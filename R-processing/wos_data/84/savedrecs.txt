FN Clarivate Analytics Web of Science
VR 1.0
PT J
AU Tan, YK
   Myreen, MO
   Kumar, R
   Fox, A
   Owens, S
   Norrish, M
AF Tan, Yong Kiam
   Myreen, Magnus O.
   Kumar, Ramana
   Fox, Anthony
   Owens, Scott
   Norrish, Michael
TI The verified CakeML compiler backend
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID FORMAL VERIFICATION; TRANSLATION
AB The CakeML compiler is, to the best of our knowledge, the most realistic verified compiler for a functional programming language to date. The architecture of the compiler, a sequence of intermediate languages through which high-level features are compiled away incrementally, enables verification of each compilation pass at an appropriate level of semantic detail. Parts of the compiler's implementation resemble mainstream (unverified) compilers for strict functional languages, and it supports several important features and optimisations. These include efficient curried multiargument functions, configurable data representations, efficient exceptions, register allocation, and more. The compiler produces machine code for five architectures: x86-64, ARMv6, ARMv8, MIPS-64, and RISC-V. The generated machine code contains the verified runtime system which includes a verified generational copying garbage collector and a verified arbitrary precision arithmetic (bignum) library. In this paper, we present the overall design of the compiler backend, including its 12 intermediate languages. We explain how the semantics and proofs fit together and provide detail on how the compiler has been bootstrapped inside the logic of a theorem prover. The entire development has been carried out within the HOL4 theorem prover.
C1 [Tan, Yong Kiam] Carnegie Mellon Univ, Comp Sci Dept, Pittsburgh, PA 15213 USA.
   [Myreen, Magnus O.] Chalmers Univ Technol, CSE, S-41296 Gothenburg, Sweden.
   [Kumar, Ramana] Univ New South Wales, CSIRO, CSE, Data61, Kensington, NSW 2033, Australia.
   [Fox, Anthony] Univ Cambridge, Dept Comp Sci & Technol, Cambridge CB3 0FD, England.
   [Owens, Scott] Univ Kent, Sch Comp, Canterbury CT2 7NF, Kent, England.
   [Norrish, Michael] Australian Natl Univ, Res Sch Comp Sci, CSIRO, Data61, Canberra, ACT 2600, Australia.
C3 Carnegie Mellon University; Chalmers University of Technology;
   Commonwealth Scientific & Industrial Research Organisation (CSIRO);
   University of New South Wales Sydney; University of Cambridge;
   University of Kent; Commonwealth Scientific & Industrial Research
   Organisation (CSIRO); Australian National University
RP Tan, YK (corresponding author), Carnegie Mellon Univ, Comp Sci Dept, Pittsburgh, PA 15213 USA.
EM yongkiat@cs.cmu.edu; myreen@chalmers.se; ramana.kumar@gmail.com;
   Anthony.Fox@arm.com; S.A.Owens@kent.ac.uk;
   Michael.Norrish@data61.csiro.au
OI Norrish, Michael/0000-0003-1163-8467; Owens, Scott/0000-0002-7437-4780
FU A*STAR, Singapore; Swedish Research Council, Sweden; EPSRC, UK
   [EP/N028759/1, EP/K008528/1]
FX We thank the anonymous reviewers for their helpful comments on drafts of
   this paper and are grateful for good comments by Mike Gordon and Konrad
   Slind on the conference version of this paper. The first author was
   supported by A*STAR, Singapore; the second author was partially
   supported by the Swedish Research Council, Sweden; the fourth author was
   partially supported by EPSRC Programme Grant EP/K008528/1, UK; and the
   fifth author was partially supported by EPSRC Grant EP/N028759/1, UK.
CR Abrahamsson O., 2017, LECT NOTES COMPUTER, P118
   Amadio R. M., 2012, LNCS, V7177, P72
   Amadio RM, 2014, LECT NOTES COMPUT SC, V8552, P1, DOI 10.1007/978-3-319-12466-7_1
   [Anonymous], 1992, Compiling with Continuations
   Barthe G, 2014, ACM T PROGR LANG SYS, V36, DOI 10.1145/2579080
   Blazy S, 2010, LECT NOTES COMPUT SC, V6012, P145, DOI 10.1007/978-3-642-11957-6_9
   Buchwald S, 2016, PROCEEDINGS OF THE 25TH INTERNATIONAL CONFERENCE ON COMPILER CONSTRUCTION (CC 2016), P67, DOI 10.1145/2892208.2892211
   Carbonneaux Q, 2014, ACM SIGPLAN NOTICES, V49, P270, DOI [10.1145/2594291.2594301, 10.1145/2666356.2594301]
   Chlipala A, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P93, DOI 10.1145/1706299.1706312
   Demange D, 2015, LECT NOTES COMPUT SC, V9031, P233, DOI 10.1007/978-3-662-46663-6_12
   Ericsson AS, 2017, LECT NOTES COMPUT SC, V10499, P444, DOI 10.1007/978-3-319-66107-0_28
   Fox A, 2017, PROCEEDINGS OF THE 6TH ACM SIGPLAN CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS, CPP'17, P125, DOI 10.1145/3018610.3018621
   Gammie P, 2015, ACM SIGPLAN NOTICES, V50, P99, DOI [10.1145/2737924.2738006, 10.1145/2813885.2738006]
   George L, 1996, ACM T PROGR LANG SYS, V18, P300, DOI 10.1145/229542.229546
   Granlund T., 2017, GNU MP GNU MULTIPLE
   Guéneau A, 2017, LECT NOTES COMPUT SC, V10201, P584, DOI 10.1007/978-3-662-54434-1_22
   Hjort R., 2017, LECT NOTES COMPUTER, P135
   Kang J, 2016, ACM SIGPLAN NOTICES, V51, P178, DOI 10.1145/2914770.2837642
   Kumar R., 2016, UCAMCLTR879
   Kumar R, 2014, ACM SIGPLAN NOTICES, V49, P179, DOI 10.1145/2535838.2535841
   Leroy X, 2009, J AUTOM REASONING, V43, P363, DOI 10.1007/s10817-009-9155-4
   Matthews D., 2017, POLY ML
   McCreight A, 2010, ICFP 2010: PROCEEDINGS OF THE 2010 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P273
   Mullen E, 2016, ACM SIGPLAN NOTICES, V51, P448, DOI [10.1145/2980983.2908109, 10.1145/2908080.2908109]
   Myreen Magnus O., 2011, Interactive Theorem Proving. Proceedings Second International Conference, ITP 2011, P265, DOI 10.1007/978-3-642-22863-6_20
   Myreen MO, 2014, J FUNCT PROGRAM, V24, P284, DOI 10.1017/S0956796813000282
   Myreen MO, 2013, LECT NOTES COMPUT SC, V8307, P66, DOI 10.1007/978-3-319-03545-1_5
   Myreen MO, 2012, Proceedings of the 12th Conference on Formal Methods in Computer-Aided Design (FMCAD 2012), P78
   Myreen MO, 2010, LECT NOTES COMPUT SC, V6217, P142, DOI 10.1007/978-3-642-15057-9_10
   Neis G, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P166, DOI 10.1145/2784731.2784764
   OCONNOR L, 2016, ICFP16 P 21 ACM, P89, DOI DOI 10.1145/2951913.2951940
   Owens S., 2017, PACMPL, V1
   Owens S, 2016, LECT NOTES COMPUT SC, V9632, P589, DOI 10.1007/978-3-662-49498-1_23
   Rideau L, 2008, J AUTOM REASONING, V40, P307, DOI 10.1007/s10817-007-9096-8
   Rideau S, 2010, LECT NOTES COMPUT SC, V6011, P224, DOI 10.1007/978-3-642-11970-5_13
   Romanenko S., 2013, MOSCOW ML OWNERS MAN
   Sevcik J, 2013, J ACM, V60, DOI 10.1145/2487241.2487248
   Sewell T, 2013, ACM SIGPLAN NOTICES, V48, P471, DOI 10.1145/2499370.2462183
   Slind K, 2008, LECT NOTES COMPUT SC, V5170, P28, DOI 10.1007/978-3-540-71067-7_6
   Stewart G, 2015, ACM SIGPLAN NOTICES, V50, P275, DOI [10.1145/2676726.2676985, 10.1145/2775051.2676985]
   Tan Y. K., 2015, P 27 S IMPL APPL FUN
   Tan YK, 2016, ACM SIGPLAN NOTICES, V51, P60, DOI 10.1145/3022670.2951924
   Yang XJ, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P283
   Zhao JZ, 2013, ACM SIGPLAN NOTICES, V48, P175, DOI 10.1145/2499370.2462164
NR 44
TC 25
Z9 28
U1 0
U2 9
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD FEB 4
PY 2019
VL 29
AR e2
DI 10.1017/S0956796818000229
PG 57
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA HJ9YO
UT WOS:000457555400001
OA Green Accepted
DA 2024-07-18
ER

PT J
AU Brandt, J
   Reisig, W
   Leser, U
AF Brandt, Joergen
   Reisig, Wolfgang
   Leser, Ulf
TI Computation semantics of the functional scientific workflow language
   Cuneiform
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID FORMAL SEMANTICS; PROCESS MODEL; TAVERNA
AB Cuneiform is a minimal functional programming language for large-scale scientific data analysis. Implementing a strict black-box view on external operators and data, it allows the direct embedding of code in a variety of external languages like Python or R, provides data-parallel higher order operators for processing large partitioned data sets, allows conditionals and general recursion, and has a naturally parallelizable evaluation strategy suitable for multi-core servers and distributed execution environments like Hadoop, HTCondor, or distributed Erlang. Cuneiform has been applied in several data-intensive research areas including remote sensing, machine learning, and bioinformatics, all of which critically depend on the flexible assembly of pre-existing tools and libraries written in different languages into complex pipelines. This paper introduces the computation semantics for Cuneiform. It presents Cuneiform's abstract syntax, a simple type system, and the semantics of evaluation. Providing an unambiguous specification of the behavior of Cuneiform eases the implementation of interpreters which we showcase by providing a concise reference implementation in Erlang. The similarity of Cuneiform's syntax to the simply typed lambda calculus puts Cuneiform in perspective and allows a straightforward discussion of its design in the context of functional programming. Moreover, the simple type system allows the deduction of the language's safety up to black-box operators. Last, the formulation of the semantics also permits the verification of compilers to and from other workflow languages.
C1 [Brandt, Joergen; Reisig, Wolfgang; Leser, Ulf] Humboldt Univ, Unter Linden 6, D-10099 Berlin, Germany.
C3 Humboldt University of Berlin
RP Brandt, J (corresponding author), Humboldt Univ, Unter Linden 6, D-10099 Berlin, Germany.
EM brandjoe@informatik.hu-berlin.de; reisig@informatik.hu-berlin.de;
   leser@informatik.hu-berlin.de
FU EU [317871]; Humboldt Graduate School GRK [1651: SOAMED]
FX This work is funded by the EU FP7 project "Scalable, Secure Storage and
   Analysis of Biobank Data" under Grant Agreement no. 317871. We also
   acknowledge funding by the Humboldt Graduate School GRK 1651: SOAMED.
CR [Anonymous], 1994, INTRO BOOTSTRAP
   [Anonymous], 2016, Pattern Recognition and Machine Learning, Softcover Reprint of the Original 1st ed., Information Science and Statistics, DOI DOI 10.1117/1.2819119
   [Anonymous], 2006, RANDOMIZATION BOOTST
   [Anonymous], 2009, NEURAL NETWORKS LEAR
   Armstrong Joe, 1996, Concurrent Programming in Erlang
   Arts T., 2006, P 2006 ACM SIGPLAN W
   Bessani A., 2015, P 1 INT WORKSH DAT M
   Brandt J., 2015, P WORKSH EDBT ICDT, V1330, P17
   Breitinger S., 1998, Principles of Declarative Programming. 10th International Symposium, PLILP'98. Held Jointly with the 6th International Conference, ALP'98. Proceedings, P318, DOI 10.1007/BFb0056623
   Budiu M., 2002, TECHNICAL REPORT
   Bux M., 2017, P 20 INT C EXT DAT T
   Bux Marc., 2015, Proceedings of the VLDB Endowment, V8, P1892
   Church A, 1936, T AM MATH SOC, V39, P472, DOI 10.2307/1989762
   Cohen-Boulakia S, 2011, SIGMOD REC, V40, P6, DOI 10.1145/2034863.2034865
   Dean J, 2004, USENIX ASSOCIATION PROCEEDINGS OF THE SIXTH SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION (OSDE '04), P137
   Deelman E., 2006, HIGH PERF COMP WORKS, P56
   DeRemer F. L, 1976, P FACHT PROGR, P80
   Di Tommaso P, 2017, NAT BIOTECHNOL, V35, P316, DOI 10.1038/nbt.3820
   Duda R. O., 2012, PATTERN CLASSIFICATI, DOI DOI 10.1007/978-3-319-57027-3_4
   Goderis A., 2007, COMPOSING DIFFERENT, Vii, P182
   Goecks J, 2010, GENOME BIOL, V11, DOI 10.1186/gb-2010-11-8-r86
   Guan ZJ, 2006, CONCURR COMP-PRACT E, V18, P1115, DOI 10.1002/cpe.988
   Harper R, 2016, Practical Foundations for Programming Languages
   Hennessy M., 1990, Semantics of programming languages-an elementary introduction using structural operational semantics
   Hey T., 2009, The fourth paradigm: data-intensive scientific discovery, V1
   Hidders J., 2008, CALCULUS COLLECTION, P374
   Hughes J., 2007, QUICKCHECK TESTING F, P1
   Hull D, 2006, NUCLEIC ACIDS RES, V34, pW729, DOI 10.1093/nar/gkl320
   Kahn G., 1987, NATURAL SEMANTICS, P22
   Kalayci S, 2010, 22ND INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING & KNOWLEDGE ENGINEERING (SEKE 2010), P587
   Kelly P. M., 2011, THESIS
   Kelly PM, 2009, CONCURR COMP-PRACT E, V21, P1999, DOI 10.1002/cpe.1448
   Köster J, 2012, BIOINFORMATICS, V28, P2520, DOI 10.1093/bioinformatics/bts480
   Liu J, 2015, J GRID COMPUT, V13, P457, DOI 10.1007/s10723-015-9329-8
   Loogen R, 2005, J FUNCT PROGRAM, V15, P431, DOI 10.1017/S0956796805005526
   Ludascher B., 2003, On Providing Declarative Design and Programming Constructs for Scientific Workfows based on Process Networks
   McPhillips T., 2006, COLLECTION ORIENTED, P248
   Michaelson G., 2011, INTRO FUNCTIONAL PRO
   MOGGI E, 1991, INFORM COMPUT, V93, P55, DOI 10.1016/0890-5401(91)90052-4
   Myers KS, 2013, PLOS GENET, V9, DOI 10.1371/journal.pgen.1003565
   Oinn T, 2006, CONCURR COMP-PRACT E, V18, P1067, DOI 10.1002/cpe.993
   Olston C., 2008, Proceedings of the 2008 ACM SIGMOD International Conference on Manage- ment of Data, P1099
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Plotkin G. D., 1981, A structural approach to operational semantics
   Pointon R. F., 2001, DESIGN IMPLEMENTATIO, P53
   Sroka J, 2010, J COMPUT SYST SCI, V76, P490, DOI 10.1016/j.jcss.2009.11.009
   Sroka J, 2009, FUND INFORM, V92, P373, DOI 10.3233/FI-2009-80
   Sroka J, 2009, FUND INFORM, V92, P279, DOI 10.3233/FI-2009-75
   TENNENT RD, 1976, COMMUN ACM, V19, P437, DOI 10.1145/360303.360308
   Thusoo A, 2009, PROC VLDB ENDOW, V2, P1626, DOI 10.14778/1687553.1687609
   Turi D, 2007, P IEEE INT C E-SCI, P441
   White T., 2012, HADOOP DEFINITIVE GU
   Winskel G., 1993, The Formal Semantics of Programming Languages
   Zaharia Matei, 2010, 2 USENIX WORKSHOP HO
   Zaharia Zaharia M. M., Login: The Usenix Magazine, V37 37, P45
   Zinn D., 2009, P 4 WORKSH WORKFL SU
NR 56
TC 8
Z9 9
U1 0
U2 3
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PY 2017
VL 27
AR e22
DI 10.1017/S0956796817000119
PG 31
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA FK5MT
UT WOS:000413544000001
DA 2024-07-18
ER

PT J
AU Endrullis, J
   Hendriks, D
   Bakhshi, R
   Rosu, G
AF Endrullis, Jorg
   Hendriks, Dimitri
   Bakhshi, Rena
   Rosu, Grigore
TI On the complexity of stream equality
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID COINDUCTIVE CALCULUS; PRODUCTIVITY
AB We study the complexity of deciding the equality of streams specified by systems of equations. There are several notions of stream models in the literature, each generating a different semantics of stream equality. We pinpoint the complexity of each of these notions in the arithmetical or analytical hierarchy. Their complexity ranges from low levels of the arithmetical hierarchy such Pi(0)(2) for the most relaxed stream models, to levels of the analytical hierarchy such as Pi(1)(1) and up to subsuming the entire analytical hierarchy for more restrictive but natural stream models. Since all these classes properly include both the semi-decidable and co-semi-decidable classes, it follows that regardless of the stream semantics employed, there is no complete proof system or algorithm for determining equality or inequality of streams. We also discuss several related problems, such as the existence and uniqueness of stream solutions for systems of equations, as well as the equality of such solutions.
C1 [Endrullis, Jorg; Hendriks, Dimitri; Bakhshi, Rena] Vrije Univ Amsterdam, Amsterdam, Netherlands.
   [Rosu, Grigore] Univ Illinois, Urbana, IL USA.
   [Rosu, Grigore] Univ Alexandru Ioan Cuza, Iasi, Romania.
C3 Vrije Universiteit Amsterdam; University of Illinois System; University
   of Illinois Urbana-Champaign; Alexandru Ioan Cuza University
RP Endrullis, J (corresponding author), Vrije Univ Amsterdam, Amsterdam, Netherlands.
EM diem@cs.vu.nl
OI Bakhshi, Rena/0000-0002-2932-3028; Endrullis, Jorg/0000-0002-2554-8270
CR Aczel P, 1988, LECT NOTES, V14
   [Anonymous], 2005, WE WILL SHOW THEM ES
   [Anonymous], 1987, Theory of recursive functions and effective computability
   Bidoit M, 2003, THEOR COMPUT SCI, V298, P471, DOI 10.1016/S0304-3975(02)00865-4
   BOHM C, 1975, LNCS, V37
   BUSS S, 2000, ELECT NOTES THEORETI, V33, P61
   CASTRO J, 1989, Z MATH LOGIK, V35, P333, DOI 10.1002/malq.19890350406
   Clavel M, 2003, LECT NOTES COMPUT SC, V2706, P76
   Coquand T., 1993, LECT NOTES COMPUTER, P62, DOI DOI 10.1007/3-540-58085-9
   Danielsson NA, 2010, ELECTRON PROC THEOR, P29, DOI 10.4204/EPTCS.43.3
   DERSHOWITZ N, 1991, THEOR COMPUT SCI, V83, P71, DOI 10.1016/0304-3975(91)90040-9
   EHRIG H, 1985, EATCS MONOGRAPHS THE
   Endrullis J., 2011, J INTEGERS B, V11B, P1
   Endrullis J, 2013, LECT NOTES COMPUT SC, V7998, P354, DOI 10.1007/978-3-642-39634-2_26
   Endrullis J, 2010, LEIBNIZ INT PR INFOR, V6, P85, DOI 10.4230/LIPIcs.RTA.2010.85
   Endrullis J, 2012, THEOR COMPUT SCI, V464, P48, DOI 10.1016/j.tcs.2012.08.018
   Endrullis J, 2012, ACM SIGPLAN NOTICES, V47, P153, DOI 10.1145/2398856.2364551
   Endrullis J, 2011, INFORM COMPUT, V209, P227, DOI 10.1016/j.ic.2010.09.003
   Endrullis J, 2010, THEOR COMPUT SCI, V411, P765, DOI 10.1016/j.tcs.2009.10.014
   Endrullis J, 2009, LECT NOTES ARTIF INT, V5663, P371, DOI 10.1007/978-3-642-02959-2_28
   Endrullis J, 2008, LECT NOTES ARTIF INT, V5330, P79, DOI 10.1007/978-3-540-89439-1_6
   Finkel O, 2009, INFORM PROCESS LETT, V109, P1223, DOI 10.1016/j.ipl.2009.09.002
   Friedman Daniel P., 1976, 3RD INT C AUT LANG P, P257
   Geuvers Herman, 1992, INFORMAL P WORKSHOP, P193
   Goguen J, 2000, THEOR COMPUT SCI, V245, P55, DOI 10.1016/S0304-3975(99)00275-3
   GOGUEN JA, 1977, J ACM, V24, P68, DOI 10.1145/321992.321997
   GOGUEN JA, 1991, TOPOLOGY AND CATEGORY THEORY IN COMPUTER SCIENCE, P357
   Grabmayer C, 2012, IEEE S LOG, P335, DOI 10.1109/LICS.2012.44
   Harel D., 1985, Topics in the Theory of Computation. Selected Papers of the International Conference on `Foundations of Computation Theory', FCT '83, P51
   Harel D., 2000, Dynamic Logic, Foundations of Computing
   Henderson Peter, 1976, P 3 ACM SIGACT SIGPL, P95, DOI DOI 10.1145/800168.811543
   Hennicker R., 1991, Formal Aspects of Computing, V3, P326, DOI 10.1007/BF01642507
   HINMAN P. G., 1978, PERSPECTIVES MATH LO, V9
   Kennaway JR, 1997, THEOR COMPUT SCI, V175, P93, DOI 10.1016/S0304-3975(96)00171-5
   Ketema J., 2010, LOG METH COMPUT SCI, V6, P1
   LANDIN PJ, 1965, COMMUN ACM, V8, P89, DOI 10.1145/363744.363749
   Lucanu D, 2009, LECT NOTES COMPUT SC, V5728, P433, DOI 10.1007/978-3-642-03741-2_30
   Malcolm G., 1997, P S NEW MOD SOFTW AR
   Meyer A. R., 1981, Automata, Languages and Programming. Eighth Colloquium, P238
   Niqui M, 2009, LECT NOTES COMPUT SC, V5497, P272, DOI 10.1007/978-3-642-02444-3_17
   Odifreddi P., 1992, STUDIES LOGIC FDN MA, V1
   Odifreddi P., 1999, STUDIES LOGIC FDN MA, VII
   Peyton-Jones S., 2003, Haskell 98 Language and Libraries: The Revised Report, DOI [10.1016/j.neucom.2020.11.041, DOI 10.1016/J.NEUCOM.2020.11.041]
   Rosu G., 2000, THESIS U CALIFORNIA
   Rosu Grigore, 2006, ICFP 2006, P184
   Rutten JJMM, 2005, MATH STRUCT COMP SCI, V15, P93, DOI 10.1017/S0960129504004517
   Rutten JJMM, 2003, THEOR COMPUT SCI, V308, P1, DOI 10.1016/S0304-3975(02)00895-2
   Rutten JJMM, 2000, THEOR COMPUT SCI, V249, P3, DOI 10.1016/S0304-3975(00)00056-6
   Shoenfield J. R., 1971, Degrees of unsolvability, V2
   SIJTSMA BA, 1989, ACM T PROGR LANG SYS, V11, P633, DOI 10.1145/69558.69563
   SLEEP MR, 1993, TERM GRAPH REWRITING
   Terese, 2003, Term Rewriting Systems
   TURNER D, 1986, SIGPLAN NOTICES, V21, P158, DOI 10.1145/15042.15053
   Zantema H, 2011, LEIBNIZ INT PR INFOR, V10, P393, DOI 10.4230/LIPIcs.RTA.2011.393
NR 54
TC 1
Z9 1
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD MAY
PY 2014
VL 24
IS 2-3
BP 166
EP 217
DI 10.1017/S0956796813000324
PG 52
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AM0QJ
UT WOS:000339550500003
OA Bronze
DA 2024-07-18
ER

PT J
AU Swierstra, W
   Van Noort, T
AF Swierstra, Wouter
   Van Noort, Thomas
TI A library for polymorphic dynamic typing
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB This paper presents a library for programming with polymorphic dynamic types in the dependently typed programming language Agda. The resulting library allows dynamically typed values with a polymorphic type to be instantiated to a less general (possibly monomorphic) type without compromising type soundness.
C1 [Swierstra, Wouter] Univ Utrecht, I-00185 Rome, Italy.
   [Van Noort, Thomas] Radboud Univ Nijmegen, NL-6525 HP Nijmegen, Netherlands.
C3 Radboud University Nijmegen
RP Swierstra, W (corresponding author), Univ Utrecht, Viale R Elena 324, I-00185 Rome, Italy.
EM w.s.swierstra@uu.nl; thomas@cs.ru.nl
CR ABADI M, 1991, ACM T PROGR LANG SYS, V13, P237, DOI 10.1145/103135.103138
   Abadi M., 1994, J FUNCTIONAL PROGRAM, V5, P81
   ALTENKIRCH T, 2003, P IFIP TC2 WORK C GE
   [Anonymous], 2003, Haskell 98 language and libraries: the revised report
   Baars A., 2002, P INT C FUNCT PROGR
   BARRAS B, 1999, THESIS U PARIS 7
   Brady E., 2011, P 12 INT C TRENDS FU
   Chapman J., 2008, THESIS U NOTTINGHAM
   Chapman J., 2010, P 15 ACM SIGPL INT C
   Cheney J., 2002, P 2002 ACM SIGPLAN W, P90, DOI [10.1145/581690.581698, DOI 10.1145/581690.581698]
   Danielsson N. A., 2006, P TYP PROOFS PROGR C
   Holdermans S., POLYMORPHIC DY UNPUB
   Lämmel R, 2003, ACM SIGPLAN NOTICES, V38, P26, DOI 10.1145/640136.604179
   Leroy X, 2011, OCAML SYSTEM RELEASE
   Leroy Xavier, 1993, J FUNCT PROGRAM, V3, P431, DOI [10.1017/S0956796800000848, DOI 10.1017/S0956796800000848]
   Martin-Lof P., 1984, Intuitionistic type theory
   McBride C, 2004, J FUNCT PROGRAM, V14, P69, DOI 10.1017/S0956796803004829
   McBride C, 2003, J FUNCT PROGRAM, V13, P1061, DOI 10.1017/S0956796803004957
   McBride C., 2010, P 6 ACM SIGPLAN WORK
   Mcbride C, 2008, J FUNCT PROGRAM, V18, P1, DOI 10.1017/S0956796807006326
   Norell U, 2009, LECT NOTES COMPUT SC, V5832, P230, DOI 10.1007/978-3-642-04652-0_5
   Norell Ulf, 2007, Towards a practical programming language based on dependent type theory
   Oury N., 2008, P INT C FUNCT PROGR
   Sheard T, 2008, ELECTRON NOTES THEOR, V199, P49, DOI 10.1016/j.entcs.2007.11.012
   Sheard Tim., 2005, GADTS EXTENSIBLE KIN
   Swierstra W., 2010, HIGH ORD SYMBOL COMP, V23, P489
   van der Walt P, 2012, 24 INT S IMPL APPL F
   van Noort T., 2012, THESIS RADBOUD U NIJ
NR 28
TC 1
Z9 1
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD MAY
PY 2013
VL 23
IS 3
BP 229
EP 248
DI 10.1017/S0956796813000063
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 245CH
UT WOS:000326436100001
OA Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Owens, S
   Reppy, J
   Turon, A
AF Owens, Scott
   Reppy, John
   Turon, Aaron
TI Regular-expression derivatives re-examined
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID AUTOMATA
AB Regular-expression derivatives Lire an old, but elegant, technique for compiling regular expressions to deterministic finite-state machines. It easily supports extending the regular-expression operators with boolean operations, such as intersection and complement. Unfortunately, this technique has been lost in the sands of time and few computer scientists are aware of it. In this paper, we reexamine regular-expression derivatives and report on our experiences in the context of two different functional-language implementations. The basic: implementation is simple and we show how to extend it to handle large character sets (e.g., Unicode). We also show that the derivatives approach leads to smaller state machines than the traditional algorithm given by McNaughton and Yamada.
C1 [Owens, Scott] Univ Cambridge, Cambridge CB2 1TN, England.
   [Turon, Aaron] Northeastern Univ, Univ Chicago, Boston, MA USA.
C3 University of Cambridge; Northeastern University; University of Chicago
RP Owens, S (corresponding author), Univ Cambridge, Cambridge CB2 1TN, England.
EM Scott.Owens@cl.cam.ac.uk; jhr@cs.uchicago.edu; turon@ccs.neu.edu
RI Turon, Albert/C-6875-2008
OI Turon, Albert/0000-0002-2554-2653; Owens, Scott/0000-0002-7437-4780;
   Reppy, John/0000-0002-5881-298X
FU NSF
FX Comments from Russ Cox and the anonymous referees were quite helpful in
   improving the presentation. Aaron Turon's work on ml-ulex at the
   University of Chicago was supported, in part, by NSF Grant CRI: Standard
   ML Sofiware Infrastructure.
CR Aho A. V., 1972, THEORY PARSING TRANS
   Aho A.V., 1986, COMPILERS PRINCIPLES
   Aho AV., 1974, DESIGN ANAL COMPUTER
   [Anonymous], 1998, Modern Compiler Implementation in C
   [Anonymous], 1960, IRE transactions on Electronic Computers, DOI [DOI 10.1109/TEC.1960.5221603, 10.1109/TEC.1960.5221603]
   Appel A. W., 1994, LEXICAL ANAL GENERAT
   BAXTER I, 2004, INT C SOFTW ENG
   BERRY G, 1986, THEOR COMPUT SCI, V48, P117, DOI 10.1016/0304-3975(86)90088-5
   Berry G., 1999, The esterel v5 language primer - version 5.21
   BRZOZOWSKI JA, 1964, J ACM, V11, P481, DOI 10.1145/321239.321249
   ENGLISH J, 1999, VALIDATE XML
   Findler RB, 2002, J FUNCT PROGRAM, V12, P159, DOI 10.1017/S0956796801004208
   FISHER CN, 1988, CRAFTING COMPILER
   RABIN MO, 1959, IBM J RES DEV, V3, P114, DOI 10.1147/rd.32.0114
   SCHMIDT M, 2002, THESIS U APPL SCI WE
   Sen Koushik, 2003, Electronic Notes in Theoretical Computer Science, V89, P226, DOI [DOI 10.1016/S1571-0661(04)81051-XRV'2003, 10.1016/S1571-0661(04)81051-X, DOI 10.1016/S1571-0661(04)81051-X]
   THOMPSON K, 1968, COMMUN ACM, V11, P419, DOI 10.1145/363347.363387
   *UN CONS, 2003, UN STAND VERS 4
NR 18
TC 66
Z9 73
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD MAR
PY 2009
VL 19
BP 173
EP 190
DI 10.1017/S0956796808007090
PN 2
PG 18
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 423OW
UT WOS:000264506600004
OA Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Ghani, N
   Johann, P
AF Ghani, Neil
   Johann, Patricia
TI Monadic augment and generalised short cut fusion
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB Monads are commonplace programming devices that are used to uniformly structure computations; in particular, they are often used to mimic the effects of impure features such as state, error handling, and I/O. This paper further develops the monadic programming paradigm by investigating the extent to which monadic computations can be optimised by lasing generalisations of short cut fusion to eliminate monadic structures whose sole purpose is to "glue together" monadic program components. Ghani, Uustalu, and Vene have recently shown that every inductive type has an associated build combinator and an associated short cut fusion law. They have also used the notion of a parameterised monad to describe those monads that give rise to inductive types, and have shown that the standard augment combinators and cata/augment fusion rules for algebraic data types can be generalised to fixed points of all parameterised monads. We revisit these augment combinators and generalised short cut fusion rules for such types but consider them from a functional programming perspective, rather than a categorical one. In addition to making the category-theoretic ideas of Ghani, Uustalu, and Vene more easily accessible to a wider audience of functional programmers, we demonstrate their practical applicability by developing nontrivial application programs and performing modest benchmarking on them. We also show how the cata/augment rules can serve as the basis for deriving additional generic fusion laws, thus opening the way for an algebra of fusion. Finally, we offer deep theoretical insights, arguing that the augment combinators are monadic in nature, and thus that the cata/build and cata/augment rules are arguably the best generally applicable fusion rules obtainable.
C1 [Johann, Patricia] Rutgers State Univ, Camden, NJ 08102 USA.
   [Ghani, Neil] Univ Nottingham, Nottingham NG7 2RD, England.
C3 Rutgers University System; Rutgers University New Brunswick; Rutgers
   University Camden; University of Nottingham
RP Johann, P (corresponding author), Rutgers State Univ, Camden, NJ 08102 USA.
EM nxg@cs.nott.ac.uk; pjohann@crab.rutgers.edu
CR [Anonymous], P 23 ACM SIGPLAN SIG
   [Anonymous], 1992, 19th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, DOI DOI 10.1145/143165.143169
   [Anonymous], 2003, Haskell 98 language and libraries: the revised report
   CHITIL O, 1999, INT C FUNCT PROGR P, P249
   Ghani N, 2004, LECT NOTES COMPUT SC, V3302, P327
   GHANI N, 2005, INT C FUNCT PROGR IC, P294
   GHANI N, 2005, TRENDS FUNCTIONAL PR, V5, P65
   Gill A., 1993, FPCA '93. Conference on Functional Programming Languages and Computer Architecture, P223, DOI 10.1145/165180.165214
   GILL A, 1996, THESIS GLASGOW U
   HU Z, 1996, INT C FUNCT PROGR P, P73
   Johann P., 2002, Higher-Order and Symbolic Computation, V15, P273, DOI 10.1023/A:1022982420888
   JONES JP, 2001, HASK WORKSH P, P203
   JURGENSEN C, 2005, THESIS TU DRESDEN
   LAUNCHBURY J, 1995, FUNCTIONAL PROGRAMMI, P314
   Launchbury John, 2000, ZIP FUSION HYPERFUNC
   MALCOLM G, 1990, THESIS RIJKSUNIVERSE
   MEIJER E, 1995, LECT NOTES COMPUTER, V925, P228
   MEIJER E, 1995, FUNCTIONAL PROGRAMMI, P324
   MOGGI E, 1991, INFORM COMPUT, V93, P55, DOI 10.1016/0890-5401(91)90052-4
   Pardo A, 2001, THEOR COMPUT SCI, V260, P165, DOI 10.1016/S0304-3975(00)00127-4
   PITTS AM, 2000, MATH STRUCTURES COMP, V10, P1
   Plotkin G, 2002, LECT NOTES COMPUT SC, V2303, P342
   Sheard T., 1993, FPCA '93. Conference on Functional Programming Languages and Computer Architecture, P233, DOI 10.1145/165180.165216
   SVENNINGSSON J, 2002, INT C FUNCT PROGR P, P124, DOI DOI 10.1145/583852.581491
   TAKANO A, 1995, FUNCTIONAL PROGRAMMI, P306
   Uustalu T, 2003, RAIRO-THEOR INF APPL, V37, P315, DOI 10.1051/ita:2003022
   VOIGTLANDER J, 2002, INT C FUNCT PROGR P, P14
NR 27
TC 5
Z9 7
U1 0
U2 1
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD NOV
PY 2007
VL 17
BP 731
EP 776
DI 10.1017/S0956796807006314
PN 6
PG 46
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 239YW
UT WOS:000251555200003
OA Bronze
DA 2024-07-18
ER

PT J
AU Sarkar, D
   Waddell, O
   Dybvig, RK
AF Sarkar, D
   Waddell, O
   Dybvig, RK
TI A nanopass framework for compiler education
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB A compiler structured as a small number of monolithic passes is difficult to understand and difficult to maintain. The steep learning curve is daunting, and even experienced developers find that modifying existing passes is difficult and often introduces subtle and tenacious bugs. These problems are especially frustrating when the developer is a student in a compiler class. An attractive alternative is to structure a compiler as a collection of many fine-grained passes, each of which performs a single task. This structure aligns the implementation of a compiler with its logical organization, simplifying development, testing, and debugging. This paper describes the methodology and tools comprising a framework for constructing such compilers.
C1 Microsoft Corp, Redmond, WA 98052 USA.
   Indiana Univ, Bloomington, IN 47405 USA.
C3 Microsoft; Indiana University System; Indiana University Bloomington
RP Microsoft Corp, Redmond, WA 98052 USA.
EM dipas@microsoft.com; owaddell@abstrax.com; dyb@cs.indiana.edu
OI Sarkar (Paria), Dipanwita/0000-0002-7823-2958
CR Aigner G., 2000, An overview of the SUIF2 compiler infrastruc- ture
   Aigner G., 2000, SUIF2 COMPILER INFRA
   ALLEN JR, 1982, MASCTR826 RIC U
   Dybvig R. K., 1993, LISP and Symbolic Computation, V5, P295, DOI 10.1007/BF01806308
   Kelsey R, 1998, ACM SIGPLAN NOTICES, V33, P26, DOI 10.1145/290229.290234
   Nystrom N, 2003, LECT NOTES COMPUT SC, V2622, P138
   Tarditi D, 1996, ACM SIGPLAN NOTICES, V31, P181, DOI 10.1145/249069.231414
   van Reeuwijk C, 2003, LECT NOTES COMPUT SC, V2622, P247
   VANREEUWIJK C, 1992, SOFTWARE PRACT EXPER, V22, P899, DOI 10.1002/spe.4380221008
   WADLER P, 1988, LECT NOTES COMPUT SC, V300, P344
NR 10
TC 10
Z9 11
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD SEP
PY 2005
VL 15
BP 653
EP 667
DI 10.1017/S0956796805005605
PN 5
PG 15
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 970SE
UT WOS:000232329100001
OA Bronze
DA 2024-07-18
ER

PT J
AU Röckl, C
   Hirschkoff, D
AF Röckl, C
   Hirschkoff, D
TI A fully adequate shallow embedding of the π-calculus in Isabelle/HOL
   with mechanized syntax analysis
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB This paper discusses an application of the higher-order abstract syntax technique to general-purpose theorem proving, yielding shallow embeddings of the binders of formalized languages. Higher-order abstract syntax has been applied with success in specialized logical frameworks which satisfy a closed-world assumption. As more general environments (like Isabelle/HOL or Coq) do not support this closed-world assumption, higher-order abstract syntax may yield exotic terms, that is, datatypes may produce more terms than there should actually be in the language. The work at hand demonstrates how such exotic terms can be eliminated by means of a two-level well-formedness predicate, further preparing the ground for an implementation of structural induction in terms of rule induction, and hence providing fully-fledged syntax analysis. In order to apply and justify well-formedness predicates, the paper develops a proof technique based on a combination of instantiations and reabstractions of higher-order terms. As an application, syntactic principles like the theory of contexts (as introduced by Honsell, Miculan, and Scagnetto) are derived, and adequacy of the predicates is shown, both within a formalization of the pi-calculus in Isabelle/HOL.
C1 Ecole Polytech Fed Lausanne, LAMP, DI, INR Ecublens, CH-1015 Lausanne, Switzerland.
   Ecole Normale Super Lyon, LIP, F-69364 Lyon 7, France.
C3 Swiss Federal Institutes of Technology Domain; Ecole Polytechnique
   Federale de Lausanne; Ecole Normale Superieure de Lyon (ENS de LYON)
EM christine.roeckl@epfl.ch; Daniel.Hirschkoff@ens-lyon.fr
CR AITMOHAMED O, 1996, THESIS U H POINCARE
   AMADIO R, 1993, LECT NOTES COMPUTER, V715, P112
   [Anonymous], 1997, LNCS
   [Anonymous], 1992, Mathematical Structures in Computer Science, DOI DOI 10.1017/S0960129500001407
   [Anonymous], 1999, Communicating and Mobile Systems: The Calculus
   [Anonymous], 1994, Lecture Notes in Computer Science
   [Anonymous], LNCS
   [Anonymous], LNCS
   [Anonymous], 1972, INDAGATIONES MATHEMA, DOI DOI 10.1016/1385-7258(72)90034-0
   BARRAS B, 2001, COQ PROOF ASSISTANT
   BARRETT JW, 1999, ADV THEOR MATH PHYS, V3, P1
   Berghofer S, 1999, LECT NOTES COMPUT SC, V1690, P19
   BOULTON R, 1992, IFIP TRANS A, V10, P129
   BUCALO A, 2001, UNPUB USING FUNCTOR
   Church A., 1940, J. Symbolic Logic, V5, P56, DOI [10.2307/2266170, DOI 10.2307/2266170]
   Despeyroux J, 1997, LECT NOTES COMPUT SC, V1210, P147
   Despeyroux J., 2000, LNCS, V1872, P425, DOI DOI 10.1007/3-540-44929-9_30
   DESPEYROUX J, 1994, LECT NOTES COMPUTER, V822, P159
   DESPEYROUX J, 1995, LECT NOTES COMPUTER, V902, P124
   DOWEK G, 2001, P MERLIN 01
   Fiore M, 2001, IEEE S LOG, P93, DOI 10.1109/LICS.2001.932486
   Fiore M., 1999, Proceedings. 14th Symposium on Logic in Computer Science (Cat. No. PR00158), P193, DOI 10.1109/LICS.1999.782615
   Gabbay M., 1999, Proceedings. 14th Symposium on Logic in Computer Science (Cat. No. PR00158), P214, DOI 10.1109/LICS.1999.782617
   GAY S, 2001, LECT NOTES COMPTUER, V2152, P217
   Gill PJ, 2001, JAVA REP, V6, P7
   GORDON AD, 1996, LECT NOTES COMPUTER, V1125, P173, DOI DOI 10.1007/BFB0105404
   Henry-Greard L., 1999, RR3698 INRIA
   HOFMANN M, 1999, P LICS 99, V158, P204
   Honsell F., 1998, Programming Concepts and Methods. PROCOMET '98. IFIP TC2/WG2.2,2.3 International Conference, P225
   Honsell F, 2001, LECT NOTES COMPUT SC, V2076, P963
   Honsell F, 2001, THEOR COMPUT SCI, V253, P239, DOI 10.1016/S0304-3975(00)00095-5
   Kleist J., 1998, Programming Concepts and Methods. PROCOMET '98. IFIP TC2/WG2.2,2.3 International Conference, P285
   LELEU P, 1998, THESIS ENPC MARNE VA
   McDowell R, 1997, IEEE S LOG, P434, DOI 10.1109/LICS.1997.614968
   MCDOWELL R, 2001, IN PRESS ACM T COMPU
   MCKINNA J, 1993, LNCS, V664, P289
   Melham T. F., 1994, Nordic Journal of Computing, V1, P50
   Miller D., 1991, Journal of Logic and Computation, V1, P497, DOI 10.1093/logcom/1.4.497
   Miller D, 2000, LECT NOTES ARTIF INT, V1861, P239
   MILLER D, 2001, P MERLIN 01
   MILLER DA, 1990, P LOG FRAM BRA WORKS
   Miller Dale, 1992, LECT NOTES COMPUTER, V660, P242, DOI DOI 10.1007/3-540-56454-3_13
   Milner R., 1989, Communication and concurrency
   MILNER R, 1992, INFORM COMPUT, V100, P1, DOI [10.1016/0890-5401(92)90008-4, 10.1016/0890-5401(92)90009-5]
   Nadathur Gopalan., 1988, Fifth International Logic Programming Conference, P810
   PAULSON LC, 1993, 286 U CAMBR COMP LAB
   PAULSON LC, 1994, LECT NOTES ARTIF INT, V814, P148
   Pfenning F, 1999, LECT NOTES COMPUT SC, V1702, P206
   Pfenning F., 1989, Proceedings. Fourth Annual Symposium on Logic in Computer Science (Cat. No.89CH2753-2), P313, DOI 10.1109/LICS.1989.39186
   PFENNING F, 1996, LNCS, V1059, P119
   PFENNING F, 1998, LECT NOTES ARTIF INT, V1421, P286
   Pfenning F., 1988, PLDI'88: Proceedings of the ACM SIGPLAN 1988 conference on Programming Language design and Implementation', P199
   Pfenning Frank, 1999, LNCS, V1632, P202, DOI DOI 10.1007/3-540-48660-7_14
   QUAGLIA P, 1999, B EATCS, V68, P104
   Röckl C, 1999, LECT NOTES COMPUT SC, V1578, P306
   ROCKL C, 2001, P MERLIN 01
   Sangiorgi D, 1996, THEOR COMPUT SCI, V167, P235, DOI 10.1016/0304-3975(96)00075-8
   Sangiorgi D., 1992, PhD thesis
   THOMSEN B, 1990, THESIS IMPERIAL COLL
   TURNER DN, 1995, THESIS U EDINBURGH
   WALKER D, 1995, INFORM COMPUT, V116, P253, DOI 10.1006/inco.1995.1018
NR 61
TC 14
Z9 15
U1 0
U2 1
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD MAR
PY 2003
VL 13
BP 415
EP 451
DI 10.1017/S0956796802004653
PN 2
PG 37
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 671RT
UT WOS:000182478400006
OA Bronze
DA 2024-07-18
ER

PT J
AU Chuang, CE
   Iraci, G
   Ziarek, L
AF Chuang, Cheng-En
   Iraci, Grant
   Ziarek, Lukasz
TI Send to me first: Priority in synchronous message-passing
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB In this paper, we introduce a tiered-priority scheme for a synchronous message-passing language with support for selective communication and first-class communication protocols. Crucially, our scheme allows higher priority threads to communicate with lower priority threads, providing the ability to express programs that would be rejected by classic priority mechanisms that disallow any (potentially) blocking interactions between threads of differing priorities. We formalize our scheme in a novel semantic framework featuring a collection of actions to represent possible communications. Utilizing our formalism, we prove several important and desirable properties of our priority scheme. We also provide a prototype implementation of our tiered-priority scheme capable of expressing Concurrent ML and built in the MLton SML compiler and runtime. We evaluate the viability of our implementation through three case studies: a prioritized buyer-seller protocol and predictable shutdown mechanisms in the Swerve web server and eXene windowing toolkit. Our experiments show that priority can be easily added to existing CML programs without degrading performance. Our system exhibits negligible overheads on more modest workloads.
C1 [Chuang, Cheng-En; Iraci, Grant; Ziarek, Lukasz] SUNY Buffalo, Buffalo, NY 14260 USA.
C3 State University of New York (SUNY) System; State University of New York
   (SUNY) Buffalo
RP Chuang, CE (corresponding author), SUNY Buffalo, Buffalo, NY 14260 USA.
EM chengenc@buffalo.edu; grantira@buffalo.edu; lziarek@buffalo.edu
OI Chuang, Cheng-En/0000-0002-3961-7118; Iraci, Grant/0009-0005-4138-5001
FU National Science Foundation;  [CRI:1823230];  [SHF:1749539]
FX Acknowledgements This work is supported in part by National Science
   Foundation grants: CRI:1823230 and SHF:1749539. Any opinions, findings,
   and conclusions or recommendations expressed in this material are those
   of the author(s) and do not necessarily reflect the views of the
   National Science Foundation.
CR [Anonymous], 2020, USING BINDER IPC
   [Anonymous], 2019, RACKET REFERENCE
   [Anonymous], 1997, The Definition of Standard ML
   Armstrong T, 1996, REACHING THE UNREACHED, P21
   Buttazzo GC, 2011, HARD REAL-TIME COMPUTING SYSTEMS: PREDICTABLE SCHEDULING ALGORITHMS AND APPLICATIONS, THIRD EDITION, P1, DOI 10.1007/978-1-14614-0676-1
   Chaudhuri A, 2009, ACM SIGPLAN NOTICES, V44, P269, DOI 10.1145/1631687.1596589
   Cheng-En Chuang, 2021, Practical Aspects of Declarative Languages. 23rd International Symposium, PADL 2021. Proceedings. Lecture Notes in Computer Science (LNCS 12548), P37, DOI 10.1007/978-3-030-67438-0_3
   Demaine E., 1996, Proceedings. Second MPI Developer's Conference, P189, DOI 10.1109/MPIDC.1996.534113
   Donnelly K, 2008, J FUNCT PROGRAM, V18, P649, DOI 10.1017/S0956796808006916
   Effinger-Dean L, 2008, ICFP'08: PROCEEDINGS OF THE 2008 SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P103
   Ezhilchelvan P, 2001, 5TH INTERNATIONAL SYMPOSIUM ON AUTONOMOUS DECENTRALIZED SYSTEMS, PROCEEDINGS, P3, DOI 10.1109/ISADS.2001.917389
   Flatt M, 2004, ACM SIGPLAN NOTICES, V39, P47, DOI 10.1145/996893.996849
   Fluet M, 2010, J FUNCT PROGRAM, V20, P537, DOI 10.1017/S0956796810000201
   Freeze J, 2018, PROCEEDINGS OF THE 51ST ANNUAL HAWAII INTERNATIONAL CONFERENCE ON SYSTEM SCIENCES (HICSS), P913
   Gansner E. R., 1993, MULTITHREADED HIGHER
   Gerrand A., 2010, SHARE MEMORY COMMUNI
   Haller P, 2009, THEOR COMPUT SCI, V410, P202, DOI 10.1016/j.tcs.2008.09.019
   Klabnik S., 2020, RUST PROGRAMMING LAN
   LAMPSON BW, 1980, COMMUN ACM, V23, P105, DOI 10.1145/358818.358824
   Mueller F., 1993, LIB IMPLEMENTATION P
   Reppy J.H., 2007, Concurrent Programming in ML
   Reppy J.H., 1991, PROC 1991 C PROGRAMM, P293, DOI [10.1145/113445.113470, DOI 10.1145/113445.113470]
   Russell E, 2001, ROAD FROM GEORGE ORWELL: HIS ACHIEVEMENT AND LEGACY, P157
   Shipman A. L., 2002, UNIX SYSTEM PROGRAMM
   SWINEHART DC, 1985, SIGPLAN NOTICES, V20, P230, DOI 10.1145/17919.806844
   Vallecillo A, 2006, FUND INFORM, V73, P583
   Weisstein E.W., Random Walk--1-Dimensional
   Ziarek L, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P628
NR 28
TC 0
Z9 0
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD DEC 22
PY 2022
VL 32
AR e16
DI 10.1017/S0956796822000119
PG 40
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 7C5GE
UT WOS:000899840400001
OA hybrid
DA 2024-07-18
ER

PT J
AU Accattoli, B
   Graham-Lengrand, E
   Kesner, D
AF Accattoli, Beniamino
   Graham-Lengrand, Ephane
   Kesner, Delia
TI Tight typings and split bounds, fully developed
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID DENOTATIONAL SEMANTICS; INTERSECTION TYPES; COST-ANALYSIS
AB Multi types - aka non-idempotent intersection types - have been used. to obtain quantitative bounds on higher-order programs, as pioneered by de Carvalho. Notably, they bound at the same time the number of evaluation steps and the size of the result. Recent results show that the number of steps can be taken as a reasonable time complexity measure. At the same time, however, these results suggest that multi types provide quite lax complexity bounds, because the size of the result can be exponentially bigger than the number of steps. Starting from this observation, we refine and generalise a technique introduced by Bernadet and Graham-Lengrand to provide exact bounds. Our typing judgements carry counters, one measuring evaluation lengths and the other measuring result sizes. In order to emphasise the modularity of the approach, we provide exact bounds for four evaluation strategies, both in the lambda-calculus (head, leftmost-outermost, and maximal evaluation) and in the linear substitution calculus (linear head evaluation). Our work aims at both capturing the results in the literature and extending them with new outcomes. Concerning the literature, it unifies de Carvalho and Bernadet & Graham-Lengrand via a uniform technique and a complexity-based perspective. The two main novelties are exact split bounds for the leftmost strategy - the only known strategy that evaluates terms to full normal forms and provides a reasonable complexity measure - and the observation that the computing device hidden behind multi types is the notion of substitution at a distance, as implemented by the linear substitution calculus.
C1 [Accattoli, Beniamino] INRIA, Palaiseau, France.
   [Accattoli, Beniamino] Ecole Polytech, LIX, UMR 7161, Palaiseau, France.
   [Graham-Lengrand, Ephane] SRI Int, 333 Ravenswood Ave, Menlo Pk, CA 94025 USA.
   [Kesner, Delia] Univ Paris, CNRS, IRIF, Paris, France.
   [Kesner, Delia] Inst Univ France, Paris, France.
C3 Inria; Institut Polytechnique de Paris; Ecole Polytechnique; SRI
   International; Universite Paris Cite; Centre National de la Recherche
   Scientifique (CNRS); Institut Universitaire de France
RP Accattoli, B (corresponding author), INRIA, Palaiseau, France.; Accattoli, B (corresponding author), Ecole Polytech, LIX, UMR 7161, Palaiseau, France.
EM beniamino.accattoli@inria.fr; stephane.graham-lengrand@csl.sri.com;
   kesner@irif.fr
OI Accattoli, Beniamino/0000-0003-4944-9944
FU ANR JCJC grant COCA HOLA [ANR-16-CE40-004-01]
FX We are grateful to Alexis Bernadet, Antonio Bucciarelli, Giulio
   Guerrieri, Maico Leberle, Pierre Vial, Andres Viso, and the anonymous
   reviewers for useful discussions and comments. This work has been
   partially funded by the ANR JCJC grant COCA HOLA (ANR-16-CE40-004-01).
CR Accattoli B, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3236789
   Accattoli B, 2019, LECT NOTES COMPUT SC, V11423, P410
   Accattoli B, 2018, LECT NOTES COMPUT SC, V11275, P45, DOI 10.1007/978-3-030-02768-1_3
   Accattoli B, 2018, ELECTRON NOTES THEOR, V338, P23, DOI 10.1016/j.entcs.2018.10.003
   Accattoli B, 2018, LECT NOTES COMPUT SC, V11187, P37, DOI 10.1007/978-3-030-02508-3_3
   Accattoli B, 2016, LOG METH COMPUT SCI, V12, DOI 10.2168/LMCS-12(1:4)2016
   Accattoli B, 2014, ACM SIGPLAN NOTICES, V49, P659, DOI 10.1145/2535838.2535886
   Accattoli B, 2010, LECT NOTES COMPUT SC, V6247, P381, DOI 10.1007/978-3-642-15205-4_30
   Accattoli Beniamino, 2012, LIPIcs, V15, P22, DOI [10.4230, DOI 10.4230/LIPICS.RTA]
   Accattoli Beniamino, 2012, LIPIcs, V15, P6, DOI [10.4230/LIPIcs.RTA.2012.6, DOI 10.4230/LIPICS.RTA.2012.6]
   Alves S., 2019, CORR
   [Anonymous], 2011, LOG METH COMPUT SCI
   Avanzini M, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110287
   Belloch G., 1995, Conference Record of FPCA '95. SIGPLAN-SIGARCH-WG2.8. Conference on Functional Programming Languages and Computer Architecture, P226, DOI 10.1145/224164.224210
   Benedetti E. D., 2016, INFORM COMPUT, V248, P195
   Bernadet A., 2013, TECHNICAL REPORT
   Bernadet A, 2013, LOG METH COMPUT SCI, V9, DOI 10.2168/LMCS-9(4:3)2013
   Bernadet A, 2011, LECT NOTES COMPUT SC, V6604, P88, DOI 10.1007/978-3-642-19805-2_7
   Bucciarelli Antonio, 2014, Theoretical Computer Science. 8th IFIP TC 1/WG 2.2 International Conference, TCS 2014. Proceedings: LNCS 8705, P341, DOI 10.1007/978-3-662-44602-7_26
   Bucciarelli A, 2001, ANN PURE APPL LOGIC, V109, P205, DOI 10.1016/S0168-0072(00)00056-7
   Bucciarelli A, 2017, LOG J IGPL, V25, P431, DOI 10.1093/jigpal/jzx018
   Bucciarelli A, 2012, ANN PURE APPL LOGIC, V163, P918, DOI 10.1016/j.apal.2011.09.008
   Carraro A, 2014, LECT NOTES COMPUT SC, V8412, P103
   Conchuir S., 2008, TECHNICAL REPORT
   Coppo M., 1980, Notre Dame Journal of Formal Logic, V21, P685, DOI 10.1305/ndjfl/1093883253
   Coppo M., 1978, Archiv fur Mathematische Logik und Grundlagenforschung, V19, P139, DOI 10.1007/BF02011875
   Dal Lago U, 2014, SCI COMPUT PROGRAM, V84, P77, DOI 10.1016/j.scico.2013.07.010
   Dal Lago U, 2013, ACM SIGPLAN NOTICES, V48, P167, DOI 10.1145/2480359.2429090
   Danos V., 2004, TECHNICAL REPORT
   de Carvalho D, 2011, THEOR COMPUT SCI, V412, P1884, DOI 10.1016/j.tcs.2010.12.017
   de Carvalho D. R. J., 2007, THESIS
   De Carvalho D, 2018, MATH STRUCT COMP SCI, V28, P1169, DOI 10.1017/S0960129516000396
   de Carvalho D, 2016, INFORM COMPUT, V248, P104, DOI 10.1016/j.ic.2015.12.010
   de Carvalho Daniel, 2016, LIPICS, V62, p41:1
   Diaz-Caro A., 2013, LFCS 2013, V7734, P164, DOI [DOI 10.1007/978-3, 10.1007/978-3-642-35722-0_12, DOI 10.1007/978-3-642-35722-0_12]
   Dudenhefner A, 2017, ACM SIGPLAN NOTICES, V52, P653, DOI 10.1145/3093333.3009862
   Ehrhard T., 2012, LIPIcs, P259, DOI DOI 10.4230/LIPICS.CSL
   Ehrhard T, 2016, PROCEEDINGS OF THE 18TH INTERNATIONAL SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING (PPDP 2016), P174, DOI 10.1145/2967973.2968608
   Gardner P., 1994, Theoretical Aspects of Computer Software. International Symposium TACS '94 Proceedings, P555
   Girard J.-Y., 1989, Cambridge Tracts in Theoretical Computer Science, V7
   GIRARD JY, 1988, ANN PURE APPL LOGIC, V37, P129, DOI 10.1016/0168-0072(88)90025-5
   Grabmayer C, 2019, ELECTRON P THEOR COM, P1, DOI 10.4204/EPTCS.288.1
   Guerrieri Giulio, 2016, LIPICS, V52
   Hoffmann Jan, 2012, Computer Aided Verification. Proceedings 24th International Conference, CAV 2012, P781, DOI 10.1007/978-3-642-31424-7_64
   Hoffmann J, 2010, LECT NOTES COMPUT SC, V6012, P287, DOI 10.1007/978-3-642-11957-6_16
   Hofmann M, 2003, ACM SIGPLAN NOTICES, V38, P185, DOI 10.1145/640128.604148
   Hughes J., 1996, Conference Record of POPL '96: The 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P410, DOI 10.1145/237721.240882
   Jost S, 2017, J AUTOM REASONING, V59, P87, DOI 10.1007/s10817-016-9398-9
   Kesner Delia, 2014, Theoretical Computer Science. 8th IFIP TC 1/WG 2.2 International Conference, TCS 2014. Proceedings: LNCS 8705, P296, DOI 10.1007/978-3-662-44602-7_23
   Kesner D, 2020, LOG METH COMPUT SCI, V16, DOI 10.23638/LMCS-16(1:3)2020
   Kesner D, 2018, LECT NOTES COMPUT SC, V10803, P241, DOI 10.1007/978-3-319-89366-2_13
   Kesner D, 2015, LECT NOTES COMPUT SC, V9399, P388, DOI 10.1007/978-3-319-25150-9_23
   Kesner Delia, 2017, LIPICS, DOI [10.4230/LIPIcs.FSCD.2017.24, DOI 10.4230/LIPICS.FSCD.2017.24]
   Kfoury AJ, 2000, J LOGIC COMPUT, V10, P411, DOI 10.1093/logcom/10.3.411
   Klop, 1980, THESIS
   Krivine J.L., 1993, LAMBDA CALCULUS TYPE
   MASCARI GF, 1994, THEOR COMPUT SCI, V135, P111, DOI 10.1016/0304-3975(94)90263-1
   Mazza D, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158094
   Milner R, 2007, ELECTRON NOTES THEOR, V175, P65, DOI 10.1016/j.entcs.2006.07.035
   MOLLER NEERGAARD P., 2004, P 9 ACM SIGPLAN INT, P138, DOI DOI 10.1145/1016850.1016871
   Nihei SS, 2009, ZOOTAXA, P1
   Ong C. L., 2017, LICS
   Paolini L, 2017, MATH STRUCT COMP SCI, V27, P626, DOI 10.1017/S0960129515000316
   Portillo A. Rebon, 2002, LNCS, V2670, P232
   Pottinger Garrel, 1980, ESSAYS COMBINATORY L, P561
   Simoes HR, 2007, LECT NOTES COMPUT SC, V4502, P221
   Urzyczyn P, 1999, J SYMBOLIC LOGIC, V64, P1195, DOI 10.2307/2586625
   Urzyczyn P, 2009, LECT NOTES COMPUT SC, V5608, P356, DOI 10.1007/978-3-642-02273-9_26
   van Raamsdonk F, 1999, INFORM COMPUT, V149, P173, DOI 10.1006/inco.1998.2750
   Vasconcelos PB, 2004, LECT NOTES COMPUT SC, V3145, P86
NR 70
TC 8
Z9 8
U1 0
U2 1
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD MAY 19
PY 2020
VL 30
AR e14
DI 10.1017/S095679682000012X
PG 101
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA LO8QK
UT WOS:000533890300001
OA Bronze
DA 2024-07-18
ER

PT J
AU Cockx, J
   Devriese, D
AF Cockx, Jesper
   Devriese, Dominique
TI Proof-relevant unification: Dependent pattern matching with only the
   axioms of your type theory
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB Dependently typed languages such as Agda, Coq, and Idris use a syntactic first-order unification algorithm to check definitions by dependent pattern matching. However, standard unification algorithms implicitly rely on principles such as uniqueness of identity proofs and injectivity of type constructors. These principles are inadmissible in many type theories, particularly in the new and promising branch known as homotopy type theory. As a result, programs and proofs in these new theories cannot make use of dependent pattern matching or other techniques relying on unification, and are as a result much harder to write, modify, and understand. This paper proposes a proof-relevant framework for reasoning formally about unification in a dependently typed setting. In this framework, unification rules compute not just a unifier but also a corresponding soundness proof in the form of an equivalence between two sets of equations. By rephrasing the standard unification rules in a proof-relevant manner, they are guaranteed to preserve soundness of the theory. In addition, it enables us to safely add new rules that can exploit the dependencies between the types of equations, such as rules for eta-equality of record types and higher dimensional unification rules for solving equations between equality proofs. Using our framework, we implemented a complete overhaul of the unification algorithm used by Agda. As a result, we were able to replace previous ad-hoc restrictions with formally verified unification rules, fixing a substantial number of bugs in the process. In the future, we may also want to integrate new principles with pattern matching, for example, the higher inductive types introduced by homotopy type theory. Our framework also provides a solid basis for such extensions to be built on.
C1 [Cockx, Jesper] Chalmers & Gothenburg Univ, Dept Comp Sci & Engn, Gothenburg, Sweden.
   [Devriese, Dominique] KULeuven, Comp Sci, Heverlee, Belgium.
C3 KU Leuven
RP Cockx, J (corresponding author), Chalmers & Gothenburg Univ, Dept Comp Sci & Engn, Gothenburg, Sweden.
EM jesper@sikanda.be; dominique.devriese@cs.kuleuven.be
RI Devriese, Dominique/C-5493-2014
OI Devriese, Dominique/0000-0002-3862-6856
FU Research Foundation Flanders (FWO)
FX We want to thank the anonymous reviewers for their hard work and
   insightful comments. Dominique Devriese holds a Postdoctoral fellowship
   from the Research Foundation Flanders (FWO).
CR Abel A., 2012, EPIC SERIES COMPUTIN, V5, P18
   Abel A., 2015, CIRCUMVENTION FORCIN
   Abel A., 2015, ORDER PATTERNS MATTE
   Abel A., 2015, INJECTIVITY TYPE CON
   Abel A., 2015, ETA EXPANDED IMPLICI
   Abel A, 2011, LECT NOTES COMPUT SC, V6690, P10, DOI 10.1007/978-3-642-21691-6_5
   Abel A, 2011, LECT NOTES COMPUT SC, V6604, P57, DOI 10.1007/978-3-642-19805-2_5
   [Anonymous], 2007, PRACTICAL PROGRAMMIN
   [Anonymous], 2014, TYPES PROOFS PROGRAM
   Asperti A, 2009, LECT NOTES COMPUT SC, V5674, P84, DOI 10.1007/978-3-642-03359-9_8
   Baader Franz, 2001, Handbook of Automated Reasoning, P445, DOI DOI 10.1016/B978-044450813-3/50010-2
   Brady E, 2004, ANN NY ACAD SCI, V3085, P115
   Brady E, 2013, J FUNCT PROGRAM, V23, P552, DOI 10.1017/S095679681300018X
   Braibant T., 2013, NEW COQ TACTIC INVER
   Cockx J., 2014, P 19 INT C FUNCT PRO
   Cockx J., 2017, P 6 C CERT PROGR PRO
   Cockx J., 2016, P 21 INT C FUNCT PRO
   Cockx J., 2017, THESIS
   Cockx J, 2016, J FUNCT PROGRAM, V26, P1, DOI 10.1017/S0956796816000174
   Cohen Cyril., 2016, CoRR
   Coquand Thierry., 1992, P WORKSHOP TYPES PRO, P71
   Cornes C, 1996, LECT NOTES COMPUT SC, V1158, P85
   Danielsson N. A., 2010, HETEROGENOUS EQUALIT
   Danielsson N. A., 2014, REGRESSION UNIFIER P
   Danielsson N. A., 2015, DEPENDENT PATTERN MA
   Danielsson N. A., 2011, UNIFICATION MACHINER
   de Moura L., 2015, INT C AUT DED CADE 2
   DEBRUIJN NG, 1991, INFORM COMPUT, V91, P189, DOI 10.1016/0890-5401(91)90066-B
   Dijkstra G., 2015, DISUNIFYING NONFULLY
   Dybjer P., 1991, P 1 WORKSH LOG FRAM
   Goguen H, 2006, LECT NOTES COMPUT SC, V4060, P521, DOI 10.1007/11780274_27
   Goguen J. A., 1989, RESOLUTION EQUATIONS, V1, P217
   Hur Chung-Kil, 2010, AGDA EXCLUDED MIDDLE
   Jouannaud Jean-Pierre., 1991, COMPUTATIONAL LOGIC, P257
   Licata D. R., 2013, 28 S LOG COMP SCI LI
   Luo Z., 1994, COMPUTATION REASONIN
   Martin-Lof P., 1972, 25 YEARS CONSTRUCTIV
   Martin-Lof Per, 1984, STUDIES PROOF THEORY, V1
   McBride C, 2006, LECT NOTES COMPUT SC, V3839, P186
   McBride C., 2002, Types for Proofs and Programs. International Workshop, TYPES 2000. Selected Papers (Lecture Notes in Computer Science Vol.2277), P197
   McBride C., 1998, Types for Proofs and Programs. International Workshop TYPES'96. Selected Papers, P236
   McBride C., 2000, THESIS
   McBride C., 1998, DEPENDENT PATT UNPUB
   McKinna J., 2015, ENCODE DECODE METHOD, P63
   Miquel Alexandre, 2010, RE AGDA EXCLUDED MID
   Monin J. - F., 2010, 2 COQ WORKSH ED UK
   Peebles D., 2012, CASE SPLITTING EMITS
   Reed Jason., 2009, P 4 INT WORKSHOP LOG, P49
   Sicard-Ramirez A., 2016, K OPTION GENERATES U
   Sozeau M, 2010, LECT NOTES COMPUT SC, V6172, P419, DOI 10.1007/978-3-642-14052-5_29
   Streicher T., 1993, Investigations into intensional type theory
   The Univalent Foundations Program, 2013, UN FDN PROGR
   Vezzosi A., 2015, HETEROGENEOUS EQUALI
   Ziliani B., 2015, INT C FUNCT PROGR IC
NR 54
TC 8
Z9 9
U1 2
U2 5
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD MAY 10
PY 2018
VL 28
AR e12
DI 10.1017/S095679681800014X
PG 55
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GF2PQ
UT WOS:000431782500001
OA Green Accepted
DA 2024-07-18
ER

PT J
AU Morazán, MT
AF Morazan, Marco T.
TI Infusing an HtDP-based CS1 with distributed programming using functional
   video games
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB A Computer Science introduction course ought to focus on exciting students about the subject matter and on problem solving through the methodical design of programs. An effective way to achieve both is through the development of functional video games. As most students are interested in video games, their development adds an exciting domain to any introduction to programming. This article advocates that an exciting crowning achievement for students in such a course is the design and implementation of a multiplayer distributed video game. By exploiting a domain that is popular with students, they are taught about design principles, communication protocols, and pitfalls in distributed programming. This article puts forth a successfully used design recipe that places distributed programming well within the reach of beginning students and outlines the use of this design recipe in the classroom. For those teaching beginners, this article presents a model for developing their own distributed programming module. The success of the presented methodology is measured through student feedback on their distributed programming experience. The empirical results suggest that the design and implementation of distributed functional video games is effective and well-received by students. Furthermore, the data suggests that the presented methodology fails to exhibit the gender gap common in Computer Science and is effective regardless of the programming experience CS1 students bring to the classroom.
C1 [Morazan, Marco T.] Seton Hall Univ, Dept Comp Sci, S Orange, NJ 07079 USA.
C3 Seton Hall University
RP Morazán, MT (corresponding author), Seton Hall Univ, Dept Comp Sci, S Orange, NJ 07079 USA.
EM morazanm@shu.edu
OI Morazan, Marco/0000-0003-4670-6116
CR Achten P, 2008, FDPE'08: PROCEEDINGS OF THE 2008 ACM SIGPLAN WORKSHOP ON FUNCTIONAL AND DECLARATIVE PROGRAMMING IN EDUCATION, P61
   Adams Joel, 2013, 2013 IEEE International Symposium on Parallel and Distributed Processing, Workshops and PhD Forum (IPDPSW), P1244, DOI 10.1109/IPDPSW.2013.275
   [Anonymous], 2015, P 46 ACM TECHN S COM, DOI DOI 10.1145/2676723.2691860
   [Anonymous], P REALM RACK
   [Anonymous], 2012, QUAKE 3 SOURCE CODE
   [Anonymous], HOW TO DESIGN WORLDS
   [Anonymous], CS 15100 FALL 2008 P
   [Anonymous], 2001, DESIGN PROGRAMS INTR
   [Anonymous], DESIGN PROGRAMS
   [Anonymous], OPERATING SYSTEMS CO
   Association for Computing Machinery (ACM) Joint Task Force on Comput-ing Curricula and IEEE Computer Society, 2013, Computer Science Curricula 2013: Curriculum Guidelines for Undergraduate Degree Programs in Computer Science, DOI 10.1145/2534860
   Bolkan S, 2011, COMMUN RES REP, V28, P337, DOI 10.1080/08824096.2011.615958
   Cooper S., 2000, NE C J COMPUTING SMA, P107
   Courtney A., 2003, P ACM SIGPLAN WORKSH, P7, DOI DOI 10.1145/871895.871897
   Dann W.P., 2011, Learning to Program with Alice (w/CD ROM)
   Danner Andrew, 2013, 2013 IEEE International Symposium on Parallel and Distributed Processing, Workshops and PhD Forum (IPDPSW), P1237, DOI 10.1109/IPDPSW.2013.67
   Felleisen M, 2009, ICFP'09: PROCEEDINGS OF THE 2009 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P47
   Felleisen M, 2009, COMMUN ACM, V52, P37, DOI 10.1145/1538788.1538803
   Findler RB, 2002, J FUNCT PROGRAM, V12, P159, DOI 10.1017/S0956796801004208
   Friedman Daniel P., 2008, Essentials of Programming Languages
   Gestwicki PV, 2007, SIGCSE 2007: PROCEEDINGS OF THE THIRTY-EIGHTH SIGCSE TECHNICAL SYMPOSIUM ON COMPUTER SCIENCE EDUCATION, P233, DOI 10.1145/1227504.1227391
   Hennessy John L, 2011, Computer Architecture: A Quantitative Approach
   McHoes A., 2013, Understanding Operating Systems, V7th
   Morazán MT, 2015, COMPUT LANG SYST STR, V44, P181, DOI 10.1016/j.cl.2015.08.001
   Morazán MT, 2011, LECT NOTES COMPUT SC, V6546, P166
   Morazan Marco T., 2014, LECT NOTES COMPUTER, V8322, P149, DOI [DOI 10.1007/978-3-642-45340-3, DOI 10.1007/978-3-642-45340-3_10]
   Page Rex., 2012, LECT NOTES COMPUTER, V7193, P146, DOI [10.1007/978-3-642-32037-8, DOI 10.1007/978-3-642-32037-8]
   Prasad Sushil K., 2012, NSF IEEE TCPP CURRIC
   Pulimood SM, 2008, SIGCSE'08: PROCEEDINGS OF THE 39TH ACM TECHNICAL SYMPOSIUM ON COMPUTER SCIENCE EDUCATION, P210, DOI 10.1145/1352322.1352209
   Scott M., 2000, PROGRAMMING LANGUAGE
   Stallings W., 2016, Computer Organization and Architecture: Designing for Performance
   Sung K, 2009, COMMUN ACM, V52, P74, DOI 10.1145/1610252.1610273
   Tanenbaum A., 2014, MODERN OPERATING SYS
   Tucker AllenB., 2001, Programming Languages
NR 34
TC 7
Z9 7
U1 0
U2 2
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD MAR 6
PY 2018
VL 28
AR e5
DI 10.1017/S0956796818000059
PG 41
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA FY6LU
UT WOS:000426959800001
DA 2024-07-18
ER

PT J
AU Nykänen, M
AF Nykanen, Matti
TI A note on the genuine Sieve of Eratosthenes
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB O'Neill (The genuine Sieve of Eratosthenes. J. Funct. Program. 19(1), 2009, 95-106) has previously considered a functional implementation for the genuine Sieve of Eratosthenes, based on the well-known heap data structure. Here, we develop it further by adapting this data structure to this particular application.
C1 Univ Eastern Finland, Sch Comp, FI-70211 Kuopio, Finland.
C3 University of Eastern Finland
RP Nykänen, M (corresponding author), Univ Eastern Finland, Sch Comp, FI-70211 Kuopio, Finland.
EM matti.nykanen@uef.fi
CR [Anonymous], 2003, Haskell 98 language and libraries: the revised report
   Hutton G., 2007, PROGRAMMING HASKELL
   O'Neill M. E., 2009, NUMBERSIEVES PACKAGE
   O'Neill ME, 2009, J FUNCT PROGRAM, V19, P95, DOI 10.1017/S0956796808007004
   Paulson L, 1996, ML for the Working Programmer
NR 5
TC 1
Z9 1
U1 0
U2 5
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD NOV
PY 2011
VL 21
BP 563
EP 572
DI 10.1017/S0956796811000128
PN 6
PG 10
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 868UQ
UT WOS:000298551800001
OA Bronze
DA 2024-07-18
ER

PT J
AU Fluet, M
   Rainey, M
   Reppy, J
   Shaw, A
AF Fluet, Matthew
   Rainey, Mike
   Reppy, John
   Shaw, Adam
TI Implicitly threaded parallelism in Manticore
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 13th ACM SIGPLAN International Conference on Functional Programming
CY SEP 22-24, 2008
CL Victoria, CANADA
SP ACM SIGPLAN
ID EXCEPTIONS; LANGUAGE
AB The increasing availability of commodity multicore processors is making parallel computing ever more widespread. In order to exploit its potential, programmers need languages that make the benefits of parallelism accessible and understandable. Previous parallel languages have traditionally been intended for large-scale scientific computing, and they tend not to be well suited to programming the applications one typically finds on a desktop system. Thus, we need new parallel-language designs that address a broader spectrum of applications. The Manticore project is our effort to address this need. At its core is Parallel ML, a high-level functional language for programming parallel applications on commodity multicore hardware. Parallel ML provides a diverse collection of parallel constructs for different granularities of work. In this paper, we focus on the implicitly threaded parallel constructs of the language, which support fine-grained parallelism. We concentrate on those elements that distinguish our design from related ones, namely, a novel parallel binding form, a nondeterministic parallel case form, and the treatment of exceptions in the presence of data parallelism. These features differentiate the present work from related work on functional data-parallel language designs, which have focused largely on parallel problems with regular structure and the compiler transformations-most notably, flattening-that make such designs feasible. We present detailed examples utilizing various mechanisms of the language and give a formal description of our implementation.
C1 [Fluet, Matthew] Rochester Inst Technol, Dept Comp Sci, Rochester, NY 14623 USA.
   [Rainey, Mike; Reppy, John; Shaw, Adam] Univ Chicago, Dept Comp Sci, Chicago, IL 60637 USA.
   [Fluet, Matthew] Toyota Technol Inst, Chicago, IL USA.
C3 University of Rochester; Rochester Institute of Technology; University
   of Chicago; Toyota Technological Institute - Chicago
RP Fluet, M (corresponding author), Rochester Inst Technol, Dept Comp Sci, Rochester, NY 14623 USA.
EM mtf@cs.rit.edu; mrainey@cs.uchicago.edu; jhr@cs.uchicago.edu;
   ams@cs.uchicago.edu
OI Reppy, John/0000-0002-5881-298X
FU Direct For Computer & Info Scie & Enginr; Division Of Computer and
   Network Systems [0811389] Funding Source: National Science Foundation
CR Acar U. A., 2000, P 12 ANN ACM S PAR A, P1, DOI [DOI 10.1145/341800.341801, 10.1145/341800.341801]
   [Anonymous], 1963, Studies in Logic and the Foundations of Mathematics, DOI DOI 10.1016/S0049-237X(08)72018-4
   [Anonymous], 1997, The Definition of Standard ML
   Armstrong Joe, 1996, Concurrent Programming in Erlang
   Arora N.S., 1998, Thread scheduling for multiprogrammed multiprocessors
   BARTH PS, 1991, LECT NOTES COMPUT SC, V523, P538
   Barton R., 1998, Cilk Pousse
   Bergstrom Lars., 2010, Proceedings of the 15th ACM SIGPLAN international conference on Functional programming, ICFP '10, P93
   Blelloch GE, 1996, COMMUN ACM, V39, P85, DOI 10.1145/227234.227246
   BLELLOCH GE, 1994, J PARALLEL DISTR COM, V21, P4, DOI 10.1006/jpdc.1994.1038
   BLELLOCH GE, 1996, P ACM SIGPLAN INT C, P213, DOI DOI 10.1145/232627.232650
   Blumofe RD, 1999, J ACM, V46, P720, DOI 10.1145/324133.324234
   BOEHM HJ, 1995, SOFTWARE PRACT EXPER, V25, P1315, DOI 10.1002/spe.4380251203
   Buck I, 2004, ACM T GRAPHIC, V23, P777, DOI 10.1145/1015706.1015800
   Chakravarty M., 2007, PROC WORKSHOP DECLAR, P10
   CHAKRAVARTY MMT, 2001, LNCS, V2150, P524, DOI DOI 10.1007/3-540-44681-8_
   CHAKRAVARTY MMT, 2000, P 5 ACM SIGPLAN INT, P94
   Culler D. E., 1993, Proceedings SUPERCOMPUTING '93, P262
   DAILEY D, 2002, J INT COMPUT CHESS A, V24, P236
   Danaher JS, 2006, SCI COMPUT PROGRAM, V63, P147, DOI 10.1016/j.scico.2006.05.008
   Dean J, 2004, USENIX ASSOCIATION PROCEEDINGS OF THE SIXTH SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION (OSDE '04), P137
   FEELEY M, 1993, THESIS BRANDEIS U WA
   Fluet M, 2007, ML'07: PROCEEDINGS OF THE 2007 WORKSHOP ON ML, P15
   Fluet M, 2008, ICFP'08: PROCEEDINGS OF THE 2008 SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P241
   Fluet M, 2008, ICFP'08: PROCEEDINGS OF THE 2008 SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P119
   Fluet Matthew., 2007, Proceedings of the 2007 Workshop on Declarative Aspects of Multicore Programming, DAMP '07, P37
   FRIGO M, 1998, PLDI 98, P212, DOI DOI 10.1145/277652.277725
   Gansner E.R., 2004, The Standard ML basis library
   Gaudiot JL, 1997, SECOND AIZU INTERNATIONAL SYMPOSIUM ON PARALLEL ALGORITHMS/ARCHITECTURE SYNTHESIS, PROCEEDINGS, P112, DOI 10.1109/AISPAS.1997.581640
   HALSTEAD RH, 1985, ACM T PROGR LANG SYS, V7, P501, DOI 10.1145/4472.4478
   HALSTEAD RH, 1984, 1984 ACM S LISP FUNC, P9
   HAMMOND K, 1991, PARALLEL SML FUNCTIO
   Harris Tim., 2005, PPoPP '05: Proceedings of the tenth ACM SIGPLAN symposium on Principles and practice of parallel programming, P48, DOI DOI 10.1145/1065944.1065952
   Hauser C., 1993, Operating Systems Review, V27, P94, DOI 10.1145/173668.168627
   HEDQVIST P, 1998, THESIS UPPSALA U UPP
   JONES MP, 1993, YALEUDCSRR982
   Jones S. Peyton, 1996, POPL 96, P295, DOI DOI 10.1145/237721.237794
   Jones SP, 1999, ACM SIGPLAN NOTICES, V34, P25, DOI 10.1145/301631.301637
   Le Fessant F., 1998, ELECT NOTES THEORETI, V16, P205
   Leroy X, 2000, ACM T PROGR LANG SYS, V22, P340, DOI 10.1145/349214.349230
   Leshchinskiy R, 2006, LECT NOTES COMPUT SC, V3992, P920, DOI 10.1007/11758525_122
   MANDEL L, 2008, JOCAML LANGUAGE RELE
   Mirani R, 2004, ACM T PROGR LANG SYS, V26, P609, DOI 10.1145/1011508.1011509
   MIRANI R, 1995, FPCA 95 C FUNCT PROG, P78
   MOHR E, 1990, PROCEEDINGS OF THE 1990 ACM CONFERENCE ON LISP AND FUNCTIONAL PROGRAMMING, P185, DOI 10.1145/91556.91631
   Nikhil R., 2001, Implicit parallel programming in pH
   Nikhil R.S., 1991, Id language reference manual
   OSBORNE R, 1990, 1990 P ACM C LISP FU, P198
   Pike Rob., 2005, SCI PROGRAMMING J, V13, P227
   RAINEY M, 2010, THESIS U CHICAGO
   Reppy J.H., 1991, PROC 1991 C PROGRAMM, P293, DOI [10.1145/113445.113470, DOI 10.1145/113445.113470]
   Reppy J, 2009, ICFP'09: PROCEEDINGS OF THE 2009 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P257
   Reppy JohnH., 1999, CONCURRENT PROGRAMMI
   SHAW A, 2007, THESIS U CHICAGO
   SPOONHOWER D, 2008, P 20 ACM ANN S PAR A
   TARDITI D, 2006, SIGOPS OPER SYST REV, V40, P325
   Trinder Philip W., 1998, J FUNCTIONAL PROGRAM, V8, P23, DOI DOI 10.1017/S0956796897002967
   Tzannes A, 2010, PPOPP 2010: PROCEEDINGS OF THE 2010 ACM SIGPLAN SYMPOSIUM ON PRINCIPLES AND PRACTICE OF PARALLEL PROGRAMMING, P179, DOI 10.1145/1693453.1693479
   Yi K, 1998, SCI COMPUT PROGRAM, V31, P147, DOI 10.1016/S0167-6423(96)00044-5
   [No title captured]
NR 60
TC 29
Z9 35
U1 0
U2 3
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD NOV
PY 2010
VL 20
SI SI
BP 537
EP 576
DI 10.1017/S0956796810000201
PN 5-6
PG 40
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 735PF
UT WOS:000288428700004
OA Bronze
DA 2024-07-18
ER

PT J
AU Kamareddine, F
AF Kamareddine, F
TI Typed λ-calculi with one binder
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB Type theory was invented at the beginning of the twentieth century with the aim of avoiding the paradoxes which result from the self-application of functions. lambda-calculus was developed in the early 1930s as a theory of functions. In 1940, Church added type theory to his lambda-calculus giving us the influential simply typed lambda-calculus where types were simple and never created by binders (or abstractors). However, realising the limitations of the simply typed lambda-calculus, in the second half of the twentieth century we saw the birth of new more powerful typed lambda-calculi where types are indeed created by abstraction. Most of these calculi use two binders lambda and Pi to distinguish between functions (created by lambda-abstraction) and types (created by Pi-abstraction). Moreover, these calculi allow beta-reduction but not Pi-reduction. That is, (pi(x:A).B)C -> B[x := C] is only allowed when pi is lambda but not when it is Pi. This means that, modern systems do not allow types to have the same instantiation right as functions. In particular, when b has type B, the type of (lambda(x:A).b)C is taken immediately to be B[x := C] instead of (Pi(x:A).B)C. Extensions of modern type systems with both Pi-reduction and type instantiation have appeared in (Kamareddine, Bloo and Nederpelt, 1999; Kamareddine and Nederpelt, 1996; Peyton-Jones and Meijer, 1997). This makes the lambda and Pi very similar and hence leads to the obvious question: why not use a unique binder instead of the lambda and Pi? This makes more sense since already, versions of de Bruijn's Automath unified lambda and Pi giving more elegant systems. This paper studies the main properties of type systems with unified lambda and Pi.
C1 Heriot Watt Univ, Sch Math & Comp Sci, Edinburgh EH14 4AS, Midlothian, Scotland.
C3 Heriot Watt University
RP Heriot Watt Univ, Sch Math & Comp Sci, Edinburgh EH14 4AS, Midlothian, Scotland.
EM fairouz@macs.hw.ac.uk
CR [Anonymous], 1974, LNCS
   [Anonymous], 1980, To H. B. Curry: Essays on Combinatory Logic, -calculus and Formalism
   [Anonymous], 1984, Studies in Logic
   [Anonymous], 1992, Handbook of Logic in Computer Science
   Church A., 1940, J. Symbolic Logic, V5, P56, DOI [10.2307/2266170, DOI 10.2307/2266170]
   COQUAND T, 1988, INFORM COMPUT, V76, P95, DOI 10.1016/0890-5401(88)90005-3
   Coquand T., 1985, THESIS U PARIS 7, VVII
   de Bruijn N. G, 1968, LECT NOTES MATH, V125, P29
   de Groote Philippe, 1993, LECT NOTES COMPUTER, V665, P712
   GIRARD JY, THESIS U PARIS 7
   Kamareddine F, 2002, LECT NOTES COMPUT SC, V2540, P74
   Kamareddine F., 1996, Journal of Functional Programming, V6, P245, DOI 10.1017/S0956796800001672
   Kamareddine F, 1999, ANN PURE APPL LOGIC, V97, P27, DOI 10.1016/S0168-0072(98)00019-0
   PEYTONJONES S, 1997, TYPES COMPILATION WO
NR 14
TC 4
Z9 4
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD SEP
PY 2005
VL 15
BP 771
EP 796
DI 10.1017/S095679680500554X
PN 5
PG 26
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 970SE
UT WOS:000232329100006
OA Bronze
DA 2024-07-18
ER

PT J
AU Filliâtre, JC
AF Filliâtre, JC
TI Verification of non-functional programs using interpretations in type
   theory
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB We study the problem of certifying programs combining imperative and functional features within the general framework of type theory. Type theory is a powerful specification language which is naturally suited for the proof of purely functional programs. To deal with imperative programs, we propose a logical interpretation of an annotated program as a partial proof of its specification. The construction of the corresponding partial proof term is based on a static analysis of the effects of the program which excludes aliases. The missing subterms in the partial proof term are seen as proof obligations, whose actual proofs are left to the user. We show that the validity of those proof obligations implies the total correctness of the program. This work has been implemented in the Coq proof assistant. It appears as a tactic taking an annotated program as argument and generating a set of proof obligations. Several nontrivial algorithms have been certified using this tactic.
C1 Univ Paris 11, LRI, F-91405 Orsay, France.
C3 Universite Paris Saclay
EM filliatr@lri.fr
CR Abrial J.-R., 1996, B BOOK ASSIGNING PRO
   [Anonymous], ICFP 98
   [Anonymous], SYSTEMATIC SOFTWARE
   [Anonymous], 1980, Software Development: A Rigorous Approach
   BACK RJR, 1981, J COMPUT SYST SCI, V23, P49, DOI 10.1016/0022-0000(81)90005-2
   BARRAS B, 1999, THESIS U PARIS 7
   Bruijn d. N. G., 1980, HB CURRY ESSAYS COMB, P579
   *COQ, 2001, COQ PROOF ASS
   COQUAND T, 1988, INFORM COMPUT, V76, P95, DOI 10.1016/0890-5401(88)90005-3
   Cousot P., 1990, HDB THEORETICAL COMP, P841
   Dijkstra E. W., 1976, A Discipline of Pro-gramming
   FILLIATRE JC, 1999, UNPUB THEORY MONADS
   FILLIATRE JC, 1999, THESIS U PARIS SUD
   FILLIATRE JC, 2001, IN PRESS SCI COMPUT
   FILLIATRE JC, 1999, P THEOR PROV HIGH OR
   Floyd R.W., 1967, P S APPL MATH, V19, P19
   Girard J.-Y., 1972, PhD thesis
   GUZMAN J, 1994, 5 ACM SIGPLAN WORKSH
   Hoare C. A. R., 1989, Essays in Computing Science
   HOARE CAR, 1969, COMMUN ACM, V12, P576, DOI 10.1145/363235.363259
   HOARE CAR, 1971, COMMUN ACM, V14, P39, DOI 10.1145/362452.362489
   HONSELL F, 1992, LECT NOTES COMPUTER, V702, P309
   Jouvelot Pierre., 1991, ACM SIGACTSIGPLAN S, P303, DOI DOI 10.1145/99583.99623
   LEROY X, 2000, ACM T PROGRAM LANG S, V2
   MASON IA, 1989, FOURTH ANNUAL SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P284
   MOGGI E, 1999, 3 INT WORKSH HIGH OR
   MOGGI E, 1991, INFOR COMPUTATION, V93
   Morgan C, 1990, PROGRAMMING SPECIFIC
   PARENT C, 1995, THESIS ECOLE NORMALE
   PARENT C, 1993, 9329 EC NORM SUP LYO
   Paulin-Mohring C, 1989, THESIS U PARIS 7
   Paulin-Mohring C, 1989, 16 ANN ACM S PRINC P
   PAULINMOHRING C, 1993, LECT NOTES COMPUTER, V664
   RIEF W, 1995, LECT NOTES COMPUTER, V1009
   SEMMELROTH M, 1999, ACM SIGPLAN INT C FU
   TALPIN JP, 1994, INFORM COMPUT, V111, P245, DOI 10.1006/inco.1994.1046
   Tolmach A., 1998, Types im Compilation. Second International Workshop, TIC '98 Proceedings, P97, DOI 10.1007/BFb0055514
   WADLER P, 1993, NATO ASI SERIES
   WRIGHT AK, 1992, LECT NOTES COMPUT SC, V582, P473
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
NR 40
TC 47
Z9 50
U1 0
U2 1
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD JUL
PY 2003
VL 13
BP 709
EP 745
DI 10.1017/S095679680200446X
PN 4
PG 37
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 709QN
UT WOS:000184636000001
OA Bronze
DA 2024-07-18
ER

PT J
AU Sison, R
   Murray, T
AF Sison, Robert
   Murray, Toby
TI Verified secure compilation for mixed-sensitivity concurrent programs
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID MODEL; FLOW
AB Proving only over source code that programs do not leak sensitive data leaves a gap between reasoning and reality that can only be filled by accounting for the behaviour of the compiler. Furthermore, software does not always have the luxury of limiting itself to single-threaded computation with resources statically dedicated to each user to ensure the confidentiality of their data. This results in mixed-sensitivity concurrent programs, which might reuse memory shared between their threads to hold data of different sensitivity levels at different times; for such programs, a compiler must preserve the value-dependent coordination of such mixed-sensitivity reuse despite the impact of concurrency. Here we demonstrate, using Isabelle/HOL, that it is feasible to verify that a compiler preserves noninterference, the strictest kind of confidentiality property, for mixed-sensitivity concurrent programs. First, we present notions of refinement that preserve a concurrent value-dependent notion of noninterference that we have designed to support such programs. As proving noninterference-preserving refinement can be considerably more complex than the standard refinements typically used to verify semantics-preserving compilation, our notions include a decomposition principle that separates the semantics preservation from security preservation concerns. Second, we demonstrate that these refinement notions are applicable to verified secure compilation, by exercising them on a single-pass compiler for mixed-sensitivity concurrent programs that synchronise using mutex locks, from a generic imperative language to a generic RISC-style assembly language. Finally, we execute our compiler on a non-trivial mixed-sensitivity concurrent program modelling a real-world use case, thus preserving its source-level noninterference properties down to an assembly-level model automatically. All results are formalised and proved in the Isabelle/HOL interactive proof assistant. Our work paves the way for more fully featured compilers to offer verified secure compilation support to developers of multithreaded software that must handle data of multiple sensitivity levels.
C1 [Sison, Robert; Murray, Toby] Univ Melbourne, Sch Comp & Informat Syst, Melbourne, Vic, Australia.
   [Sison, Robert] CSIROs Data61, Sydney, NSW, Australia.
   [Sison, Robert] UNSW Sydney, Sydney, NSW, Australia.
C3 University of Melbourne; Commonwealth Scientific & Industrial Research
   Organisation (CSIRO); University of New South Wales Sydney
RP Sison, R (corresponding author), Univ Melbourne, Sch Comp & Informat Syst, Melbourne, Vic, Australia.; Sison, R (corresponding author), CSIROs Data61, Sydney, NSW, Australia.; Sison, R (corresponding author), UNSW Sydney, Sydney, NSW, Australia.
EM robert.sison@unimelb.edu.au; toby.murray@unimelb.edu.au
RI Sison, Robert/KHY-1932-2024
OI Sison, Robert/0000-0003-0313-9764
FU Australian Government Research Training Program (RTP) Scholarship; CSIRO
   Data61 Research Project Award
FX We would like to thank our anonymous referees and to thank again all
   those who provided feedback on the conference version of this paper
   (Sison & Murray, 2019) and on Robert Sison's PhD thesis (Sison, 2020).
   This paper describes research that was conducted during Robert's PhD
   candidature at UNSW Sydney and CSIRO's Data61, which was funded by an
   Australian Government Research Training Program (RTP) Scholarship and a
   CSIRO Data61 Research Project Award. We thank the Trustworthy Systems
   group at CSIRO's Data61 for cultivating an excellent working and
   learning environment.
CR Abate C, 2019, P IEEE COMPUT SECUR, P256, DOI 10.1109/CSF.2019.00025
   Almeida JB, 2017, CCS'17: PROCEEDINGS OF THE 2017 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P1807, DOI 10.1145/3133956.3134078
   Barthe G, 2004, LECT NOTES COMPUT SC, V2937, P2
   Barthe G., 2020, P ACM PROGRAM LANG
   Barthe G, 2007, LECT NOTES COMPUT SC, V4734, P2
   Barthe G, 2007, COMPUT LANG SYST STR, V33, P35, DOI 10.1016/j.cl.2005.05.002
   Barthe G, 2018, P IEEE COMPUT SECUR, P328, DOI 10.1109/CSF.2018.00031
   Barthe G, 2010, ACM T INFORM SYST SE, V13, DOI 10.1145/1805974.1895977
   Beaumont M, 2016, ANN COMPUT SECURITY, P533, DOI 10.1145/2991079.2991087
   Cavalcanti A., 2002, FME 2002: Formal Methods-Getting IT Right. International Symposium of Formal Methods Europe (Lecture Notes in Computer Science Volume 2391), P471
   Clarkson MR, 2010, J COMPUT SECUR, V18, P1157, DOI 10.3233/JCS-2009-0393
   de Roever W.P., 1998, CAMBRIDGE TRACTS THE, V46
   Del Tedesco F, 2016, P IEEE CSFW, P401, DOI 10.1109/CSF.2016.35
   Focardi R., 1995, Proceedings. The Eighth IEEE Computer Security Foundations Workshop (Cat. No.95TB8076), P60, DOI 10.1109/CSFW.1995.518553
   Frumin D., 42 IEEE S SEC PRIV S
   Jones C. B., 1981, THESIS U OXFORD
   Kaufmann T, 2016, LECT NOTES COMPUT SC, V10052, P573, DOI 10.1007/978-3-319-48965-0_36
   Klein G, 2014, ACM T COMPUT SYST, V32, DOI 10.1145/2560537
   Kumar R, 2014, ACM SIGPLAN NOTICES, V49, P179, DOI 10.1145/2535838.2535841
   Leroy X, 2009, J AUTOM REASONING, V43, P363, DOI 10.1007/s10817-009-9155-4
   Lochbihler A, 2018, J AUTOM REASONING, V61, P243, DOI 10.1007/s10817-018-9452-x
   Lynch N, 1996, INFORM COMPUT, V128, P1, DOI 10.1006/inco.1996.0060
   Mantel H., 2015, 25 INT S LOG BAS PRO
   Mantel H, 2011, 2011 IEEE 24TH COMPUTER SECURITY FOUNDATIONS SYMPOSIUM (CSF), P218, DOI 10.1109/CSF.2011.22
   MASTICOLA SP, 1993, SIGPLAN NOTICES, V28, P129, DOI 10.1145/173284.155346
   Molnar D, 2006, LECT NOTES COMPUT SC, V3935, P156
   Murray T, 2016, ARCH FORMAL PROOFS
   Murray T., 2016, COMPOSITIONAL SECURI
   Murray T.C., 2015, P 10 ACM WORKSH PROG, P43
   Murray T, 2018, 2018 3RD IEEE EUROPEAN SYMPOSIUM ON SECURITY AND PRIVACY (EUROS&P 2018), P16, DOI 10.1109/EuroSP.2018.00010
   Murray T, 2016, P IEEE CSFW, P417, DOI 10.1109/CSF.2016.36
   Patrignani M, 2019, LECT NOTES COMPUT SC, V11423, P469, DOI 10.1007/978-3-030-17184-1_17
   Patrignani M, 2019, ACM COMPUT SURV, V51, DOI 10.1145/3280984
   Patrignani M, 2017, P IEEE CSFW, P392, DOI 10.1109/CSF.2017.13
   Podkopaev A., 2019, P ACM PROGRAM LANG
   Sabelfeld A, 2000, P IEEE CSFW, P200, DOI 10.1109/CSFW.2000.856937
   Sison R., 2019, 10 INT C INT THEOR P, V141
   Sison R., 2020, THESIS U NEW S WALES, DOI [10.26190/5fab5c0a76454, DOI 10.26190/5FAB5C0A76454]
   Staples M., 2014, EMPIRICAL SOFTWARE E, P15
   Terauchi T, 2005, LECT NOTES COMPUT SC, V3672, P352
   Volpano D, 1998, 11TH IEEE COMPUTER SECURITY FOUNDATIONS WORKSHOP - PROCEEDINGS, P34, DOI 10.1109/CSFW.1998.683153
NR 41
TC 0
Z9 0
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD JUL 28
PY 2021
VL 31
AR e18
DI 10.1017/S0956796821000162
PG 60
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA TS8ZA
UT WOS:000679935100001
OA Bronze, Green Submitted, Green Accepted
DA 2024-07-18
ER

PT J
AU Smallbone, N
   Johansson, M
   Claessen, K
   Algehed, M
AF Smallbone, Nicholas
   Johansson, Moa
   Claessen, Koen
   Algehed, Maximilian
TI Quick specifications for the busy programmer
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB QuickSpec is a theory exploration system which tests a Haskell program to find equational properties of it, automatically. The equations can be used to help understand the program, or as lemmas to help prove the program correct. QuickSpec is largely automatic: the user just supplies the functions to be tested and QuickCheck data generators. Previous theory exploration systems, including earlier versions of QuickSpec itself, scaled poorly. This paper describes a new architecture for theory exploration with which we can find vastly more complex laws than before, and much faster. We demonstrate theory exploration in QuickSpec on problems both from functional programming and mathematics.
C1 [Smallbone, Nicholas; Johansson, Moa; Claessen, Koen; Algehed, Maximilian] Chalmers Univ Technol, Gothenburg, Sweden.
C3 Chalmers University of Technology
RP Smallbone, N (corresponding author), Chalmers Univ Technol, Gothenburg, Sweden.
EM nicsma@chalmers.se; moa.johansson@chalmers.se; koen@chalmers.se;
   algehed@chalmers.se
CR Baez JC, 2002, B AM MATH SOC, V39, P145
   Buchberger B., 2006, J. Appl. Logic, V4, P470, DOI DOI 10.1016/J.JAL.2005.10.006
   Claessen Koen, 2013, Automated Deduction - CADE-24. 24th International Conference on Automated Deduction. Proceedings: LNCS 7898, P392, DOI 10.1007/978-3-642-38574-2_27
   Claessen K, 2000, ACM SIGPLAN NOTICES, V35, P268, DOI 10.1145/357766.351266
   Claessen K, 2014, LECT NOTES COMPUT SC, V8475, P18, DOI 10.1007/978-3-319-07151-0_2
   Claessen K, 2010, LECT NOTES COMPUT SC, V6143, P6, DOI 10.1007/978-3-642-13977-2_3
   Duregard J., 2016, THESIS
   Ernst MD, 2007, SCI COMPUT PROGRAM, V69, P35, DOI 10.1016/j.scico.2007.01.015
   Henderson Peter., 1982, Symposium on LISP and Functional Programming, P179, DOI DOI 10.1145/800068.802148
   Henderson Peter., 2002, HIGHER ORDER SYMBOLI, V15, P349
   Hughes J., 1995, Advanced Functional Programming. First International Spring School on Advanced Functional Programming Techniques. Tutorial Text, P53
   Johansson M., 2014, C INT COMP MATH
   Johansson M, 2011, J AUTOM REASONING, V47, P251, DOI 10.1007/s10817-010-9193-y
   Knuth D.E., 1983, Simple Word Problems in Universal Algebras, P342, DOI DOI 10.1007/978-3-642-81955-1_23
   MARTIN U, 1990, LECT NOTES ARTIF INT, V449, P366
   Montano-Rivas O, 2012, EXPERT SYST APPL, V39, P1637, DOI 10.1016/j.eswa.2011.06.055
   Moufang R., 1935, MATH ANN, P416, DOI DOI 10.1007/BF01448037
   Plaisted D. A, 1989, COMPLETION FAILURE, VII
   Smith J.D.H., 1999, PUR AP M-WI
   Smith P., 2015, WORKING PAPER
NR 20
TC 11
Z9 12
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PY 2017
VL 27
AR e18
DI 10.1017/S0956796817000090
PG 49
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA FA2PH
UT WOS:000405282800001
DA 2024-07-18
ER

PT J
AU Bernardy, JP
   Claessen, K
AF Bernardy, Jean-Philippe
   Claessen, Koen
TI Efficient parallel and incremental parsing of practical context-free
   languages
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID RECOGNITION
AB We present a divide-and-conquer algorithm for parsing context-free languages efficiently. Our algorithm is an instance of Valiant's (1975; General context-free recognition in less than cubic time. J. Comput. Syst. Sci. 10(2), 308-314), who reduced the problem of parsing to matrix multiplications. We show that, while the conquer step of Valiant's is O(n(3)), it improves to O(log(2) n) under certain conditions satisfied by many useful inputs that occur in practice, and if one uses a sparse representation of matrices. The improvement happens because the multiplications involve an overwhelming majority of empty matrices. This result is relevant to modern computing: divide-and-conquer algorithms with a polylogarithmic conquer step can be parallelized relatively easily.
C1 [Bernardy, Jean-Philippe] Chalmers Univ Technol, Stockholm, Sweden.
   Univ Gothenburg, Gothenburg, Sweden.
C3 Chalmers University of Technology; University of Gothenburg
RP Bernardy, JP (corresponding author), Chalmers Univ Technol, Stockholm, Sweden.
EM bernardy@chalmers.se; koen@chalmers.se
FU Swedish Foundation for Strategic Research under RAWFP
FX The proof-method used in the presentation of Valiant's algorithm was
   suggested by Patrik Jansson. Engaging discussions about the complexity
   of Valiant algorithm were conducted with Devdatt Dubhashi. Peter
   Ljunglof pointed us to some most relevant related work. Thomas Baath
   Sjoblom, Darius Blasband, Peter Ljunglof, as well as anonymous
   reviewers, gave useful feedback on drafts of this paper. This work has
   been partially funded by the Swedish Foundation for Strategic Research,
   under grant RAWFP.
CR ALLISON L, 1992, INFORM PROCESS LETT, V43, P207, DOI 10.1016/0020-0190(92)90202-7
   [Anonymous], 1986, Efficient parsing for natural language
   Bernardy JP, 2013, ACM SIGPLAN NOTICES, V48, P111, DOI [10.1145/2500365.2500576, 10.1145/2544174.2500576]
   Bernardy JP, 2009, HASKELL'09: PROCEEDINGS OF THE 2009 ACM SIGPLAN HASKELL SYMPOSIUM, P49
   Bernardy JP, 2008, HASKELL'08: PROCEEDINGS OF THE ACM SIGPLAN 2008 HASKELL SYMPOSIUM, P61
   Bird R., 1986, INTRO THEORY LISTS
   Burckhardt S, 2011, OOPSLA 11: PROCEEDINGS OF THE 2011 ACM INTERNATIONAL CONFERENCE ON OBJECT ORIENTED PROGRAMMING SYSTEMS LANGUAGES AND APPLICATIONS, P427
   Chomsky N., 1959, INFORM CONTR, V2, P137, DOI [10.1016/S0019-9958(59)90362-6, DOI 10.1016/S0019-9958(59)90362-6]
   CHYTIL M, 1991, THEOR COMPUT SCI, V81, P311, DOI 10.1016/0304-3975(91)90199-C
   Claessen K, 2004, J FUNCT PROGRAM, V14, P741, DOI 10.1017/S0956796804005192
   Cocke J., 1969, Programming Languages and Their Compilers: Preliminary Notes
   Cormen Thomas H., 2001, INTRO ALGORITHMS
   Forsberg M., BNFC QUICK REFERENCE, P175
   Free Software Foundation, 1991, GNU GEN PUBL LIC
   Gibbons J., 1996, Journal of Functional Programming, V6, P657, DOI 10.1017/S0956796800001908
   Hinze R, 2006, J FUNCT PROGRAM, V16, P197, DOI 10.1017/S0956796805005769
   Hughes RJM, 2003, ACM SIGPLAN NOTICES, V38, P239, DOI 10.1145/944746.944727
   Kasami Tadao., 1965, An efficient recognition and syntax analysis algorithm for context-free languages
   Lange M, 2009, INF DIDACT, V8, P2008
   Morita K, 2007, ACM SIGPLAN NOTICES, V42, P146, DOI 10.1145/1273442.1250752
   O'Sullivan B, 2013, CRITERION BENCHMARKI
   Okhotin A, 2014, THEOR COMPUT SCI, V516, P101, DOI 10.1016/j.tcs.2013.09.011
   RYTTER W, 1987, THEOR COMPUT SCI, V53, P295, DOI 10.1016/0304-3975(87)90070-3
   Sikkel K., 1997, PARSING CONTEXT FREE, P61
   STRASSEN V, 1969, NUMER MATH, V13, P354, DOI 10.1007/BF02165411
   VALIANT LG, 1975, J COMPUT SYST SCI, V10, P308, DOI 10.1016/S0022-0000(75)80046-8
   Wagner TA, 1998, ACM T PROGR LANG SYS, V20, P980, DOI 10.1145/293677.293678
   YOUNGER DH, 1967, INFORM CONTROL, V10, P189, DOI 10.1016/S0019-9958(67)80007-X
NR 28
TC 2
Z9 3
U1 0
U2 2
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PY 2015
VL 25
AR e10
DI 10.1017/S0956796815000131
PG 39
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DB1AM
UT WOS:000368240300003
OA Bronze
DA 2024-07-18
ER

PT J
AU Traytel, D
   Nipkow, T
AF Traytel, Dmitriy
   Nipkow, Tobias
TI Verified decision procedures for MSO on words based on derivatives of
   regular expressions
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB Monadic second-order logic on finite words is a decidable yet expressive logic into which many decision problems can be encoded. Since MSO formulas correspond to regular languages, equivalence of MSO formulas can be reduced to the equivalence of some regular structures (e.g., automata). This paper presents a verified functional decision procedure for MSO formulas that is not based on automata but on regular expressions. Functional languages are ideally suited for this task: regular expressions are data types and functions on them are defined by pattern matching and recursion and are verified by structural induction. Decision procedures for regular expression equivalence have been formalized before, usually based on Brzozowski derivatives. Yet, for a straightforward embedding of MSO formulas into regular expressions, an extension of regular expressions with a projection operation is required. We prove total correctness and completeness of an equivalence checker for regular expressions extended in that way. We also define a language-preserving translation of formulas into regular expressions with respect to two different semantics of MSO. Our results have been formalized and verified in the theorem prover Isabelle. Using Isabelle's code generation facility, this yields purely functional, formally verified programs that decide equivalence of MSO formulas.
C1 [Traytel, Dmitriy] Swiss Fed Inst Technol, Dept Comp Sci, Inst Informat Secur, Zurich, Switzerland.
   [Nipkow, Tobias] Tech Univ Munich, Fac Informat, D-80290 Munich, Germany.
C3 Swiss Federal Institutes of Technology Domain; ETH Zurich; Technical
   University of Munich
RP Traytel, D (corresponding author), Swiss Fed Inst Technol, Dept Comp Sci, Inst Informat Secur, Zurich, Switzerland.
EM traytel@inf.ethz.ch; nipkow@in.tum.de
RI Traytel, Dmitriy/AAC-6052-2021
OI Traytel, Dmitriy/0000-0001-7982-2768; Nipkow, Tobias/0000-0003-0730-515X
FU Deutsche Forschungsgemeinschaft (DFG) [1480]
FX We thank Alexander Krauss for inspiring discussions, Jasmin Blanchette
   for numerous comments on the presentation, and several anonymous
   reviewers for a wealth of comments and questions that helped to clarify
   certain fine points. While carrying out this work, Traytel was
   affiliated with TU Munchen and supported by the doctorate program 1480
   (PUMA) of the Deutsche Forschungsgemeinschaft (DFG).
CR Abdelwaheb A., 2000, Lecture Notes in Computer Science, V1855, P99
   [Anonymous], 2002, Lect. Notes Comput. Sci
   Antimirov V, 1996, THEOR COMPUT SCI, V155, P291, DOI 10.1016/0304-3975(95)00182-4
   Asperti Andrea, 2012, Interactive Theorem Proving. Proceedings of the Third International Conference, ITP 2012, P283, DOI 10.1007/978-3-642-32347-8_19
   Ballarin C, 2006, LECT NOTES ARTIF INT, V4108, P31
   BASIN D, 2000, STUDIES LOGIC COMPUT, V7, P39
   Berghofer S, 2009, LECT NOTES COMPUT SC, V5674, P147, DOI 10.1007/978-3-642-03359-9_12
   Braibant T, 2010, LECT NOTES COMPUT SC, V6172, P163, DOI 10.1007/978-3-642-14052-5_13
   BRZOZOWSKI JA, 1964, J ACM, V11, P481, DOI 10.1145/321239.321249
   Caron P, 2011, LECT NOTES COMPUT SC, V6638, P179, DOI 10.1007/978-3-642-21254-3_13
   Coquand Thierry, 2011, Certified Programs and Proofs. Proceedings First International Conference, CPP 2011, P119
   Danielsson NA, 2010, ICFP 2010: PROCEEDINGS OF THE 2010 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P285
   Elgaard J, 1998, LECT NOTES COMPUT SC, V1427, P516, DOI 10.1007/BFb0028773
   Fischer S, 2010, ICFP 2010: PROCEEDINGS OF THE 2010 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P357
   GINZBURG A, 1967, J ACM, V14, P355, DOI 10.1145/321386.321399
   Haftmann F, 2013, LECT NOTES COMPUT SC, V7998, P100, DOI 10.1007/978-3-642-39634-2_10
   Haftmann F, 2010, LECT NOTES COMPUT SC, V6009, P103, DOI 10.1007/978-3-642-12251-4_9
   Henriksen J. G., 1995, LNCS, P89, DOI DOI 10.1007/3-540-60630-0
   Klarlund N., 1999, Computer Aided Verification. 11th International Conference, CAV'99. Proceedings (Lecture Notes in Computer Science Vol.1633), P406
   Kozen Dexter, 2008, COALGEBRAIC THEORY K
   Krauss A, 2012, J AUTOM REASONING, V49, P95, DOI 10.1007/s10817-011-9223-4
   Might M, 2011, ICFP 11 - PROCEEDINGS OF THE 2011 ACM SIGPLAN: INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P189
   Moreira Nelma, 2012, Relational and Algebraic Methods in Computer Science. Proceedings 13th International Conference, RAMiCS 2012, P98, DOI 10.1007/978-3-642-33314-9_7
   Nipkow Tobias, 2014, Interactive Theorem Proving. 5th International Conference, ITP 2014, Held as Part of the Vienna Summer of Logic, VSL 2014. Proceedings: LNCS 8558, P450, DOI 10.1007/978-3-319-08970-6_29
   Okhotin A, 2005, THEOR COMPUT SCI, V345, P425, DOI 10.1016/j.tcs.2005.07.019
   Owens S, 2009, J FUNCT PROGRAM, V19, P173, DOI 10.1017/S0956796808007090
   OWRE S, 2000, LNCS, V1855, P548
   Pous D, 2015, ACM SIGPLAN NOTICES, V50, P357, DOI [10.1145/2676726.2677007, 10.1145/2775051.2677007]
   Rutten JJMM, 1998, LECT NOTES COMPUT SC, V1466, P194, DOI 10.1007/BFb0055624
   Thomas Wolfgang., 1997, Handbook of Formal Languages: Volume 3 Beyond Words, P389, DOI [10.1007/978-3-642-59126-6\\_7, DOI 10.1007/978-3-642-59126-6, 10.1007/978-3-642-59126-67, DOI 10.1007/978-3-642-59126-67]
   Traytel D, 2013, ACM SIGPLAN NOTICES, V48, P3, DOI [10.1145/2500365.2500612, 10.1145/2544174.2500612]
   Traytel Dmitriy, 2014, ARCH FORMAL PROOFS
   Wu CH, 2014, J AUTOM REASONING, V52, P451, DOI 10.1007/s10817-013-9297-2
NR 33
TC 3
Z9 3
U1 0
U2 1
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PY 2015
VL 25
AR e18
DI 10.1017/S0956796815000246
PG 30
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DB1AM
UT WOS:000368240300008
OA Green Submitted, Green Published, Bronze
DA 2024-07-18
ER

PT J
AU Sculthorpe, N
   Hutton, G
AF Sculthorpe, Neil
   Hutton, Graham
TI Work it, wrap it, fix it, fold it
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB The worker/wrapper transformation is a general-purpose technique for refactoring recursive programs to improve their performance. The two previous approaches to formalising the technique were based upon different recursion operators and different correctness conditions. In this paper we show how these two approaches can be generalised in a uniform manner by combining their correctness conditions, extend the theory with new conditions that are both necessary and sufficient to ensure the correctness of the worker/wrapper technique, and explore the benefits that result. All the proofs have been mechanically verified using the Agda system.
C1 [Sculthorpe, Neil] Univ Kansas, Lawrence, KS 66045 USA.
   [Hutton, Graham] Univ Nottingham, Nottingham NG7 2RD, England.
C3 University of Kansas; University of Nottingham
RP Sculthorpe, N (corresponding author), Univ Kansas, Lawrence, KS 66045 USA.
EM neil@ittc.ku.edu; Graham.Hutton@nottingham.ac.uk
RI Sculthorpe, Neil/N-7131-2014
OI Sculthorpe, Neil/0000-0002-7244-0916; Hutton, Graham/0000-0001-9584-5150
FU NSF [1117569]; Division of Computing and Communication Foundations;
   Direct For Computer & Info Scie & Enginr [1117569] Funding Source:
   National Science Foundation
FX The first author was supported by NSF award number 1117569. We would
   like to thank Jennifer Hackett for the counterexample in Section 6, and
   anonymous referees for their detailed and helpful reviews.
CR [Anonymous], 1986, Denotational Semantics: A Methodology for Language Development
   Backhouse R, 2002, LECT NOTES COMPUT SC, V2297, P89
   Bird Richard, 1997, Algebra of Programming
   BURSTALL RM, 1977, J ACM, V24, P44, DOI 10.1145/321992.321996
   Farmer A, 2012, ACM SIGPLAN NOTICES, V47, P1, DOI 10.1145/2430532.2364508
   Gammie P, 2011, J FUNCT PROGRAM, V21, P209, DOI 10.1017/S0956796810000080
   Gill A, 2009, J FUNCT PROGRAM, V19, P227, DOI 10.1017/S0956796809007175
   Hoare C. A. R., 1972, Acta Informatica, V1, P271, DOI 10.1007/BF00289507
   Hutton G, 2010, J FUNCT PROGRAM, V20, P353, DOI 10.1017/S0956796810000122
   JONES SLP, 1991, LECT NOTES COMPUT SC, V523, P636
   Meijer E., 1991, LNCS, V523, P124
   MORGAN C, 1990, ACTA INFORM, V27, P481, DOI 10.1007/BF00277386
   SCHERLIS WL, 1980, THESIS STANFORD U ST
   Sculthorpe Neil, 2013, Implementation and Application of Functional Languages. 24th International Symposium, IFL 2012. Revised Selected Papers: LNCS 8241, P86, DOI 10.1007/978-3-642-41582-1_6
   Tullsen M., 2002, THESIS YALE U YALE
   Voigtländer J, 2008, LECT NOTES COMPUT SC, V5133, P388
   Winskel G., 1993, FDN COMPUTING SERIES
NR 17
TC 3
Z9 5
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD JAN
PY 2014
VL 24
IS 1
BP 113
EP 127
DI 10.1017/S0956796814000045
PG 15
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AI4PG
UT WOS:000336846700003
OA Green Accepted, Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Culpepper, R
AF Culpepper, Ryan
TI Fortifying macros
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID SCHEME
AB Existing macro systems force programmers to make a choice between clarity of specification and robustness. If they choose clarity, they must forgo validating significant parts of the specification and thus produce low-quality language extensions. If they choose robustness, they must write in a style that mingles the implementation with the specification and therefore obscures the latter. This paper introduces a new language for writing macros. With the new macro system, programmers naturally write robust language extensions using easy-to-understand specifications. The system translates these specifications into validators that detect misuses-including violations of context-sensitive constraints-and automatically synthesize appropriate feedback, eliminating the need for ad hoc validation code.
C1 [Culpepper, Ryan] Sch Comp, Salt Lake City, UT USA.
RP Culpepper, R (corresponding author), Sch Comp, Salt Lake City, UT USA.
EM ryanc@ccs.neu.edu
CR [Anonymous], 2002, THESIS MIT
   [Anonymous], 1993, LISP SYMBOLIC COMPUT
   Culpepper R, 2004, LECT NOTES COMPUT SC, V3286, P225
   Despeyroux T, 1995, IND APPL PROLOG  OCT
   Dybvig R. K, 2010, CADENCE RES SYSTEMS
   Findler RB, 2002, J FUNCT PROGRAM, V12, P159, DOI 10.1017/S0956796801004208
   Flatt M, 2002, ACM SIGPLAN NOTICES, V37, P72, DOI 10.1145/583852.581486
   Flatt M, 2006, LECT NOTES COMPUT SC, V4279, P270
   Flatt M, 2009, ACM SIGPLAN NOTICES, V44, P109, DOI 10.1145/1631687.1596569
   Flatt Matthew., 2010, Reference: Racket
   Herman D, 2008, LECT NOTES COMPUT SC, V4960, P48
   Hilsdale Erik, 2000, P WORKSH SCH FUNCT P, P53
   HUGHES J, 1995, ADV FUNCTIONAL PROGR, V925, P53
   KOHLBECKER EE, 1987, S PRINC PROGR LANG, P77
   LANDIN PJ, 1965, COMMUN ACM, V8, P89, DOI 10.1145/363744.363749
   Le Fessant F, 2001, ACM SIGPLAN NOTICES, V36, P26, DOI 10.1145/507669.507641
   Owens Scott., 2004, SCHEME 04, P41
   Queinnec Christian., 1996, P REFLECTION 96 C, P93
   Shivers O, 2005, ACM SIGPLAN NOTICES, V40, P2, DOI 10.1145/1090189.1086368
   Sperber M., 2009, J. Funct. Program, V19, P1
   van den Brand MGJ, 2002, LECT NOTES COMPUT SC, V2304, P143
   Wand M, 2004, ACM SIGPLAN NOTICES, V39, P54, DOI 10.1145/1016848.1016861
NR 22
TC 9
Z9 11
U1 0
U2 1
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD JUL-SEP
PY 2012
VL 22
SI SI
BP 439
EP 476
DI 10.1017/S0956796812000275
PN 4-5
PG 38
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 004HQ
UT WOS:000308672600003
OA Bronze
DA 2024-07-18
ER

PT J
AU Frankau, S
   Spinellis, D
   Nassuphis, N
   Burgard, C
AF Frankau, Simon
   Spinellis, Diomidis
   Nassuphis, Nick
   Burgard, Christoph
TI Commercial uses: Going functional on exotic trades
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID DOMAIN-SPECIFIC LANGUAGES; PROGRAMS; HASKELL; TOOL
AB The Functional Payout Framework (FPF) is a Haskell application that uses an embedded domain-specific functional language to represent and process exotic financial derivatives. Whereas scripting languages for pricing exotic derivatives are common in banking, FIT uses multiple interpretations to not only price Such trades, but also to analyse the scripts to provide lifecycle support and more. This paper discusses FPF in relation to the wider trading workflow and our experiences in using a functional language in such it system as both all implementation language and a domain-specific language.
C1 [Frankau, Simon; Nassuphis, Nick; Burgard, Christoph] Barclays Capital, London E14 4BB, England.
   [Spinellis, Diomidis] Athens Univ Econ & Business, GR-10434 Athens, Greece.
C3 Barclays; Athens University of Economics & Business
RP Frankau, S (corresponding author), Barclays Capital, 5 N Colonnade, London E14 4BB, England.
EM Simon.Frankau@barclayscapital.com; dds@aueb.gr;
   Nick.Nassuphis@barclayscapital.com;
   Christoph.Burgard@barclayscapital.com
RI Spinellis, Diomidis/E-3600-2010
OI Spinellis, Diomidis/0000-0003-4231-1897
CR ANAND S, 2001, INT C FUNCT PROGR, P134
   [Anonymous], 2000, The mathematica book
   Arnold B, 1995, ICSE 17 WORKSH FORM, P6
   Bank of International Settlements, 2007, BIS Q REV
   CARDELLI L, 1997, USENIX C DOM SPEC LA, P1
   Claessen K, 2000, ACM SIGPLAN NOTICES, V35, P268, DOI 10.1145/357766.351266
   Claessen K., 1999, LECT NOTES COMPUTER
   EGGENSCHWILER T, 1992, C P OBJECT ORIENTED, P166
   ELLIOTT C, 2003, J FUNCT PROG, V13
   FELDMAN SI, 1979, SOFTWARE PRACT EXPER, V9, P255, DOI 10.1002/spe.4380090402
   Gill A, 2007, HASKELL'07: PROCEEDINGS OF THE ACM SIGPLAN 2007 HASKELL WORKSHOP, P1
   GRABMULLER M, 2006, MONAD TRANSFORMERS S
   HUDAK P, 2007, HOPL, V3
   Hudak P., 1996, ACM COMPUT SURV, V28, P196, DOI [10.1145/242224.242477, DOI 10.1145/242224.242477]
   Hull J.C., 2005, Options, Futures, and Other Derivative Securities, V6th
   Kramer D., 1999, Seventeenth Annual International Conference on Computer Documentation. Conference Proceedings, P147, DOI 10.1145/318372.318577
   LAMMEL R, 2003, TLDI 2003
   *LEXIFI, LEXIFI PLATF
   MARLOW S, 2002, P ACM SIGPLAN WORKSH
   Mernik M, 2005, ACM COMPUT SURV, V37, P316, DOI 10.1145/1118890.1118892
   *MLFI, 2004, STRUCT PRIC PROC COM
   PEYTON JS, 1999, IMPLEMENTATION FUNCT, P37
   PEYTON JS, 2000, ICFP 00, P280
   PEYTON JS, 2003, FUN PROGRAMMING
   ROUNDY D, 2005, HASKELL 05, P1
   SANSOM PM, 1995, PRINCIPLES PROGRAMMI, P355
   Spinellis D, 2001, J SYST SOFTWARE, V56, P91, DOI 10.1016/S0164-1212(00)00089-3
   SPINELLIS D, 1993, STRUCT PROGRAM, V14, P37
   Van Deursen A, 1998, J SOFTW MAINT-RES PR, V10, P75, DOI 10.1002/(SICI)1096-908X(199803/04)10:2<75::AID-SMR168>3.0.CO;2-5
   VANDEURSEN A, 1997, SMALLTALK JAVA IND A, P35
   VANROSSUM G, 2006, INTRO PYTHOM
   WALL L, 1990, PROGRAMMING PERL
   [No title captured]
NR 33
TC 7
Z9 9
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD JAN
PY 2009
VL 19
BP 27
EP 45
DI 10.1017/S0956796808007016
PN 1
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 392SM
UT WOS:000262322500003
OA Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Gibbons, J
   Lester, D
   Bird, R
AF Gibbons, Jeremy
   Lester, David
   Bird, Richard
TI Enumerating the rationals
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
C1 Univ Oxford, Oxford, England.
   Univ Manchester, Manchester M13 9PL, Lancs, England.
C3 University of Oxford; University of Manchester
RP Gibbons, J (corresponding author), Univ Oxford, Pk Rd, Oxford, England.
EM jeremy.gibbons@comlab.ox.ac.uk; dlester@cs.man.ac.uk;
   richard.bird@comlab.ox.ac.uk
RI Lester, Dave R/H-1998-2011
OI Lester, David/0000-0002-7267-291X; Gibbons, Jeremy/0000-0002-8426-9917
CR AIGNER M, 2004, PROOFS BOOK
   [Anonymous], 1998, The art of computer programming: Sorting and searching
   [Anonymous], 1912, Norske Vid. Selsk. Skr., I Mat. Nat. Kl.
   Calkin N, 2000, AM MATH MON, V107, P360, DOI 10.2307/2589182
   Dijkstra E.W., 1982, SELECTED WRITINGS CO, P215
   Graham R. L, 1994, CONCRETE MATH FDN CO, V2nd
   Hinze R., 2000, Journal of Functional Programming, V10, P305, DOI 10.1017/S0956796800003701
   Yu-Ting S., 1980, AM MATH MON, V87, P25, DOI 10.2307/2320374
   [No title captured]
   [No title captured]
   [No title captured]
NR 11
TC 20
Z9 21
U1 0
U2 1
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD MAY
PY 2006
VL 16
BP 281
EP 291
DI 10.1017/S0956796806005880
PN 3
PG 11
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 052MS
UT WOS:000238238400003
OA Bronze
DA 2024-07-18
ER

PT J
AU Koronkevich, P
   Rakow, R
   Ahmed, A
   Bowman, WJ
AF Koronkevich, Paulette
   Rakow, Ramon
   Ahmed, Amal
   Bowman, William J.
TI ANF preserves dependent types up to extensional equality
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID CALCULUS; SYSTEM; PROOF
AB Many programmers use dependently typed languages such as Coq to machine-verify high-assurance software. However, existing compilers for these languages provide no guarantees after compiling, nor when linking after compilation. Type-preserving compilers preserve guarantees encoded in types and then use type checking to verify compiled code and ensure safe linking with external code. Unfortunately, standard compiler passes do not preserve the dependent typing of commonly used (intensional) type theories. This is because assumptions valid in simpler type systems no longer hold, and intensional dependent type systems are highly sensitive to syntactic changes, including compilation. We develop an A-normal form (ANF) translation with join-point optimization-a standard translation for making control flow explicit in functional languages-from the Extended Calculus of Constructions (ECC) with dependent elimination of booleans and natural numbers (a representative subset of Coq). Our dependently typed target language has equality reflection, allowing the type system to encode semantic equality of terms. This is key to proving type preservation and correctness of separate compilation for this translation. This is the first ANF translation for dependent types. Unlike related translations, it supports the universe hierarchy, and does not rely on parametricity or impredicativity.
C1 [Koronkevich, Paulette; Rakow, Ramon; Bowman, William J.] Univ British Columbia, Vancouver, BC, Canada.
   [Ahmed, Amal] Northeastern Univ, Boston, MA 02115 USA.
C3 University of British Columbia; Northeastern University
RP Koronkevich, P (corresponding author), Univ British Columbia, Vancouver, BC, Canada.
EM pletrec@cs.ubc.ca; ramon.rakow@alumni.ubc.ca; amal@ccs.neu.edu;
   wjb@williamjbowman.com
RI Ahmed, Amal/IGC-9696-2023
OI Ahmed, Amal/0000-0001-7424-572X; Bowman, William/0000-0002-6402-4840
FU Natural Sciences and Engineering Research Council of Canada (NSERC)
   [RGPIN-2019-04207]
FX We gratefully acknowledge Youyou Cong, Max S. New, Hugo Herbelin,
   Matthias Felleisen, Greg Morrisett, Simon Peyton Jones, Paul Downen,
   Andrew Kennedy, Brian LaChance, Danel Ahman, Carlo Angiuli, and the many
   anonymous reviewers for their time in discussing ANF, CPS and related
   problems during the course of this work. Thank you all. We acknowledge
   the support of the Natural Sciences and Engineering Research Council of
   Canada (NSERC), funding reference number RGPIN-2019-04207. Cette
   recherche a ete financee par le Conseil de recherches en sciences
   naturelles et en genie du Canada (CRSNG), numero de reference
   RGPIN-2019-04207.
CR Ahman D., 2017, Ph.D. thesis
   Ahmed A., 2011, EQUIVALENCE PRESERVI
   Ahmed A, 2011, ICFP 11 - PROCEEDINGS OF THE 2011 ACM SIGPLAN: INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P431
   Ahmed Amal., 2015, 1st Summit on Advances in Programming Languages (SNAPL 2015), volume 32 of Leibniz International Proceedings in Informatics (LIPIcs), P15, DOI DOI 10.4230/LIPICS.SNAPL.2015.15
   Anand A., 2017, INT WORKSHOP COQ PRO
   Appel AW, 2015, ACM T PROGR LANG SYS, V37, DOI 10.1145/2701415
   Barthe G, 2002, ACM SIGPLAN NOTICES, V37, P131, DOI 10.1145/509799.503043
   Barthe G., 1999, Higher-Order and Symbolic Computation, V12, P125, DOI 10.1023/A:1010000206149
   Barthe G, 2009, ACM SIGPLAN NOTICES, V44, P90, DOI 10.1145/1594834.1480894
   Benton N., 1999, Electronic Notes in Theoretical Computer Science, V26, DOI 10.1016/S1571-0661(05)80280-4
   Benton N., 1998, INT C FUNCT PROGR IC, DOI [10.1145/289423.289435, DOI 10.1145/289423.289435]
   Boulier S, 2017, PROCEEDINGS OF THE 6TH ACM SIGPLAN CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS, CPP'17, P182, DOI 10.1145/3018610.3018620
   Boutillier P, 2012, RELAXATION COQS GUAR
   Bowman MatthewBurton., 2018, CHRISTIAN POLITICS W
   Bowman WJ, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158110
   Briski KariA., 2008, Minimizing code defects to improve software quality and lower development costs: IBM Rational Software Analyzer and IBM Rational PurifyPlus software
   Chan J, 2021, ANAL ANAL GIRARDS PA
   Chan JAT, 2021, Arxiv, DOI arXiv:1912.05601
   Chen J, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P183, DOI 10.1145/1375581.1375604
   Chlipala A, 2013, Certified programming with dependent types
   Chlipala A, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P54, DOI 10.1145/1250734.1250742
   Cong Y., 2018, INT S TRENDS FUNCTIO
   Cong Y, 2018, PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES, DOI 10.1145/3236764
   Cong YY, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341643
   COQUAND T, 1988, INFORM COMPUT, V76, P95, DOI 10.1016/0890-5401(88)90005-3
   FLANAGAN C, 1993, SIGPLAN NOTICES, V28, P237, DOI 10.1145/173262.155113
   Gordon A. D., 1995, SER ELECT NOTES THEO, V1, P232
   Gu RH, 2015, ACM SIGPLAN NOTICES, V50, P595, DOI [10.1145/2676726.2676975, 10.1145/2775051.2676975]
   Gu RH, 2016, PROCEEDINGS OF OSDI'16: 12TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P653
   Herbelin H, 2009, FEW OPEN PROBLEMS CA
   Herbelin H., 2005, INT C TYP LAMBF CALC, DOI DOI 10.1007/11417170_16
   Herbelin H, 2012, IEEE S LOG, P365, DOI 10.1109/LICS.2012.47
   Huet G, 1986, FORMAL STRUCTURES CO
   Kennedy A, 2007, ACM SIGPLAN NOTICES, V42, P177, DOI 10.1145/1291220.1291179
   Lennon-Bertrand M, 2022, ACM T PROGR LANG SYS, V44, DOI 10.1145/3495528
   Leroy X, 2009, J AUTOM REASONING, V43, P363, DOI 10.1007/s10817-009-9155-4
   Levy Paul Blain, 2001, Ph. D. Dissertation
   Luo Z., 1990, An extended calculus of constructions
   Maurer L, 2017, ACM SIGPLAN NOTICES, V52, P482, DOI [10.1145/3062341.3062380, 10.1145/3140587.3062380]
   Miquey É, 2017, LECT NOTES COMPUT SC, V10201, P777, DOI 10.1007/978-3-662-54434-1_29
   Morrisett G, 1999, ACM T PROGR LANG SYS, V21, P527, DOI 10.1145/319301.319345
   Necula G. C., 1997, Conference Record of POPL '97: The 24th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P106, DOI 10.1145/263699.263712
   Necula GC, 2001, ACM SIGPLAN NOTICES, V36, P142, DOI 10.1145/373243.360216
   Oury N, 2005, LECT NOTES COMPUT SC, V3603, P278
   Patterson D, 2017, ACM SIGPLAN NOTICES, V52, P495, DOI [10.1145/3062341.3062347, 10.1145/3140587.3062347]
   Pedrot P, 2017, WORKSHOP SYNTAX SEMA
   Pédrot PM, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371126
   Perconti JT, 2014, LECT NOTES COMPUT SC, V8410, P128
   Peyton Jones S. L., 1996, Programming Languages and Systems - ESOP '96. 6th European Symposium on Programming. Proceedings, P18
   PITTS AM, 1997, SEMANTICS LOGICS COM, P241, DOI DOI 10.1017/CBO9780511526619
   Sabry A., 1992, Proceedings of the 1992 ACM Conference on Lisp and Functional Programming, P288, DOI 10.1145/141471.141563
   Sabry A, 1997, ACM T PROGR LANG SYS, V19, P916, DOI 10.1145/267959.269968
   Saffrich H, 2022, Arxiv, DOI [arXiv:2010.08261, 10.46298/lmcs-18(3:33)2022, DOI 10.46298/LMCS-18(3:33)2022]
   Sarkar S, 2005, LECT NOTES COMPUT SC, V3668, P387, DOI 10.1007/11562931_29
   Severi P., 1994, Logical Foundations of Computer Science. Third International Symposium, LFCS '94 Proceedings, P316
   Shao Z, 2005, ACM T PROGR LANG SYS, V27, P1, DOI 10.1145/1053468.1053469
   Shao Z, 1997, OVERVIEW FLINTML COM
   Shao Zhong., 1998, ICFP 98, DOI DOI 10.1145/289423.289460
   Sozeau M., 2008, THESIS
   Stecklein J. M., 2004, P 14 ANN INT S TOUL
   Stewart G, 2015, ACM SIGPLAN NOTICES, V50, P275, DOI [10.1145/2676726.2676985, 10.1145/2775051.2676985]
   Stump A, 2021, Arxiv, DOI arXiv:1806.04709
   Tarditi D, 1996, ACM SIGPLAN NOTICES, V31, P181, DOI 10.1145/249069.231414
   Thielecke H, 2003, ACM SIGPLAN NOTICES, V38, P139, DOI 10.1145/640128.604144
   Timany A, 2020, Arxiv, DOI arXiv:1710.03912
   Vakar M, 2017, Arxiv, DOI [arXiv:1706.07997, 10.48550/arXiv.1706.07997]
   Watkins K, 2004, ANN NY ACAD SCI, V3085, P355
   Xi HW, 2001, ACM SIGPLAN NOTICES, V36, P169, DOI 10.1145/507669.507657
NR 68
TC 1
Z9 1
U1 0
U2 1
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD SEP 16
PY 2022
VL 32
AR e12
DI 10.1017/S0956796822000090
PG 53
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 4N7RH
UT WOS:000854213400001
OA hybrid
DA 2024-07-18
ER

PT J
AU Morihata, A
AF Morihata, Akimasa
TI Lambda calculus with algebraic simplification for reduction
   parallelisation: Extended study
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB Parallel reduction is a major component of parallel programming and widely used for summarisation and aggregation. It is not well understood, however, what sorts of non-trivial summarisations can be implemented as parallel reductions. This paper develops a calculus named lambda(AS), a simply typed lambda calculus with algebraic simplification. This calculus provides a foundation for studying a parallelisation of complex reductions by equational reasoning. Its key feature is delta abstraction. A delta abstraction is observationally equivalent to the standard lambda abstraction, but its body is simplified before the arrival of its arguments using algebraic properties such as associativity and commutativity. In addition, the type system of lambda(AS) guarantees that simplifications due to delta abstractions do not lead to serious overheads. The usefulness of lambda(AS) is demonstrated on examples of developing complex parallel reductions, including those containing more than one reduction operator, loops with conditional jumps, prefix sum patterns and even tree manipulations.
C1 [Morihata, Akimasa] Univ Tokyo, Meguro Ku, 3-8-1 Komaba, Tokyo, Japan.
C3 University of Tokyo
RP Morihata, A (corresponding author), Univ Tokyo, Meguro Ku, 3-8-1 Komaba, Tokyo, Japan.
EM morihata@graco.c.u-tokyo.ac.jp
RI Morihata, Akimasa/KFR-7683-2024
OI Morihata, Akimasa/0000-0003-2741-5954
FU JSPS [15K15965]; Grants-in-Aid for Scientific Research [15K15965]
   Funding Source: KAKEN
FX The author is grateful to Makoto Hamana for his suggestion of related
   articles that were useful for proving Theorems 1 and 2, Sin'ya Katsumata
   for his introduction to related formalisms and Shigeyuki Sato for
   insightful discussion with him. The author is also grateful to the
   reviewers for their valuable comments helping to improve this paper. The
   author is supported by JSPS Grant-in-Aid for Young Scientists (B),
   15K15965.
CR [Anonymous], 1993, Synthesis of Parallel Algorithms
   Bergstrom L, 2012, J FUNCT PROGRAM, V22, P382, DOI 10.1017/S0956796812000172
   Breazu-Tannen V., 1988, Proceedings of the Third Annual Symposium on Logic in Computer Science (Cat. No.88CH2608-8), P82, DOI 10.1109/LICS.1988.5103
   BREAZUTANNEN V, 1991, THEOR COMPUT SCI, V83, P3, DOI 10.1016/0304-3975(91)90037-3
   Bruggeman C, 1996, ACM SIGPLAN NOTICES, V31, P99, DOI 10.1145/249069.231395
   Buneman P., 2006, VLDB, P211
   CALLAHAN D, 1992, LECT NOTES COMPUT SC, V589, P169, DOI 10.1007/BFb0038664
   Castro D, 2018, FUTURE GENER COMP SY, V79, P653, DOI 10.1016/j.future.2017.04.035
   Castro D, 2016, ACM SIGPLAN NOTICES, V51, P4, DOI 10.1145/3022670.2951920
   Chi Yun-Yan, 2011, LECT NOTES COMPUTER, V7078, P74
   Chin WN, 1998, 1998 INTERNATIONAL CONFERENCE ON COMPUTER LANGUAGES, PROCEEDINGS, P153, DOI 10.1109/ICCL.1998.674166
   Cole M., 1989, DEV CHILDREN
   Cong G., 2007, SIGMOD Conference, P509
   Cong G, 2012, ACM T DATABASE SYST, V37, DOI 10.1145/2389241.2389251
   Consel C., 1992, LISP SYMB COMPUT, V5, P327
   DANVY O, 1990, PROCEEDINGS OF THE 1990 ACM CONFERENCE ON LISP AND FUNCTIONAL PROGRAMMING, P151, DOI 10.1145/91556.91622
   De Moura AL, 2009, ACM T PROGR LANG SYS, V31, DOI 10.1145/1462166.1462167
   Dean J, 2004, USENIX ASSOCIATION PROCEEDINGS OF THE SIXTH SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION (OSDE '04), P137
   Deitz S. J., 2006, Proceedings of the 2006 ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming PPoPP'06, P40, DOI 10.1145/1122971.1122980
   Dolan S, 2018, LECT NOTES COMPUT SC, V10788, P98, DOI 10.1007/978-3-319-89719-6_6
   Emoto K, 2012, FORM ASP COMPUT, V24, P623, DOI 10.1007/s00165-012-0241-8
   Emoto K, 2010, LECT NOTES COMPUT SC, V6272, P26, DOI 10.1007/978-3-642-15291-7_4
   Farzan A, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P610, DOI 10.1145/3314221.3314612
   Farzan A, 2017, ACM SIGPLAN NOTICES, V52, P540, DOI [10.1145/3062341.3062355, 10.1145/3140587.3062355]
   Fedyukovich G, 2017, ACM SIGPLAN NOTICES, V52, P572, DOI [10.1145/3062341.3062382, 10.1145/3140587.3062382]
   FISHER AL, 1994, SIGPLAN NOTICES, V29, P135, DOI 10.1145/773473.178255
   Fluet M, 2006, J FUNCT PROGRAM, V16, P751, DOI 10.1017/S0956796806006046
   Fluet M, 2010, J FUNCT PROGRAM, V20, P537, DOI 10.1017/S0956796810000201
   Frigo M, 2009, SPAA'09: PROCEEDINGS OF THE TWENTY-FIRST ANNUAL SYMPOSIUM ON PARALLELISM IN ALGORITHMS AND ARCHITECTURES, P79
   GIORGI JF, 1990, PROCEEDINGS OF THE 1990 ACM CONFERENCE ON LISP AND FUNCTIONAL PROGRAMMING, P209, DOI 10.1145/91556.91648
   Gorlatch S, 1999, SCI COMPUT PROGRAM, V33, P1, DOI 10.1016/S0167-6423(97)00014-2
   Henriksen T, 2017, ACM SIGPLAN NOTICES, V52, P556, DOI [10.1145/3140587.3062354, 10.1145/3062341.3062354]
   Hu ZJ, 1997, ACM T PROGR LANG SYS, V19, P444, DOI 10.1145/256167.256201
   Huet G., 1997, Journal of Functional Programming, V7, P549, DOI 10.1017/S0956796897002864
   Imam S, 2014, LECT NOTES COMPUT SC, V8586, P618, DOI 10.1007/978-3-662-44202-9_25
   Jiang P, 2018, 27TH INTERNATIONAL CONFERENCE ON PARALLEL ARCHITECTURES AND COMPILATION TECHNIQUES (PACT 2018), DOI 10.1145/3243176.3243204
   Jones ND, 1996, ACM COMPUT SURV, V28, P480, DOI 10.1145/243439.243447
   Keller G, 2010, ICFP 2010: PROCEEDINGS OF THE 2010 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P261
   LADNER RE, 1980, J ACM, V27, P831, DOI 10.1145/322217.322232
   Launchbury J., 1993, Conference Record of the Twentieth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P144, DOI 10.1145/158511.158618
   Levy J.-J., 1976, Theoretical Computer Science, V2, P97, DOI 10.1016/0304-3975(76)90009-8
   Levy Paul Blain, 2003, CALL BY PUSH VALUE F
   Li P, 2007, HASKELL'07: PROCEEDINGS OF THE ACM SIGPLAN 2007 HASKELL WORKSHOP, P107
   Marlow S, 2010, ACM SIGPLAN NOTICES, V45, P91, DOI 10.1145/2088456.1863535
   Matsuzaki K, 2005, PARALLEL PROCESS LET, V15, P321, DOI 10.1142/S0129626405002246
   Minamide Y., 1998, Conference Record of POPL '98: 25th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P75, DOI 10.1145/268946.268953
   Morihata A., 2011, P 16 ACM SIGPLAN INT, P117
   Morihata A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341644
   Morihata A, 2010, LECT NOTES COMPUT SC, V6009, P321, DOI 10.1007/978-3-642-12251-4_23
   Morihata A, 2009, ACM SIGPLAN NOTICES, V44, P177, DOI 10.1145/1594834.1480905
   Morita K, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P146
   Morita Z.H. M., 2006, P 18 ANN ACM S PARAL, P39
   Naoki Kobayashi, 2012, PARTIAL EVALUATION P, P121
   Nishimura S., 1999, J FUNCT PROGRAM, V9, P427
   Okada M., 1989, Proceedings of the ACM-SIGSAM 1989 International Symposium on Symbolic and Algebraic Computation, ISSAC '89, P357, DOI 10.1145/74540.74582
   Raychev V, 2015, SOSP'15: PROCEEDINGS OF THE TWENTY-FIFTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P153, DOI 10.1145/2815400.2815418
   Reif John, 1993, SYNTHESIS PARALLEL A, P115
   Sato S, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P470
   Suganuma T., 1996, ICS'96: Proceedings of the 10th international conference on Supercomputing, P18, DOI DOI 10.1145/237578.237581
   Terui Kazushige, 2012, 23 INT C REWRITING T, P323, DOI [10.4230/LIPIcs.RTA.2012.323, DOI 10.4230/LIPICS.RTA.2012.323]
   Wand M., 1999, Higher-Order and Symbolic Computation, V12, P285, DOI 10.1023/A:1010093700911
   Xu DN, 2004, LECT NOTES COMPUT SC, V3302, P197
   Zhenjiang Hu, 1998, Conference Record of POPL '98: 25th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P316
NR 63
TC 0
Z9 0
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD APR 5
PY 2021
VL 31
AR e7
DI 10.1017/S0956796821000058
PG 40
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA RI2PI
UT WOS:000636751100001
OA hybrid
DA 2024-07-18
ER

PT J
AU Brady, E
AF Brady, Edwin
TI Idris, a general-purpose dependently typed programming language: Design
   and implementation
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID UNIFICATION
AB Many components of a dependently typed programming language are by now well understood, for example, the underlying type theory, type checking, unification and evaluation. How to combine these components into a realistic and usable high-level language is, however, folklore, discovered anew by successive language implementors. In this paper, I describe the implementation of IDRIS, a new dependently typed functional programming language. IDRIS is intended to be a general-purpose programming language and as such provides high-level concepts such as implicit syntax, type classes and do notation. I describe the high-level language and the underlying type theory, and present a tactic-based method for elaborating concrete high-level syntax with implicit arguments and type classes into a fully explicit type theory. Furthermore, I show how this method facilitates the implementation of new high-level language constructs.
C1 Univ St Andrews, Sch Comp Sci, St Andrews KY16 9SX, Fife, Scotland.
C3 University of St Andrews
RP Brady, E (corresponding author), Univ St Andrews, Sch Comp Sci, St Andrews KY16 9SX, Fife, Scotland.
EM ecb10@st-andrews.ac.uk
OI Brady, Edwin/0000-0002-9734-367X
FU Scottish Informatics and Computer Science Alliance (SICSA); EU [248828]
FX This work was funded by the Scottish Informatics and Computer Science
   Alliance (SICSA) and by EU Framework 7 Project No. 248828 (ADVANCE). My
   thanks to Philip Holzenspies, Kevin Hammond, Vilhelm Sjoberg, Falko
   Spiller and Nathan Collins for their comments on an earlier draft of
   this paper, and to the anonymous referees for their many insightful and
   constructive comments.
CR Altenkirch T, 2010, LECT NOTES COMPUT SC, V6009, P40, DOI 10.1007/978-3-642-12251-4_5
   [Anonymous], 1994, Computation and reasoning: a type theory for computer science
   Asperti A, 2012, LOG METH COMPUT SCI, V8, DOI 10.2168/LMCS-8(1:18)2012
   Asperti A, 2011, LECT NOTES ARTIF INT, V6803, P64, DOI 10.1007/978-3-642-22438-6_7
   AUGUSTSSON L, 1985, LECT NOTES COMPUT SC, V201, P368
   Bertot Y., 2004, TEXT THEORET COMP S
   Brady E., 2005, THESIS U DURHAM DURH
   Brady E., 2013, PROGRAMMING IDRIS TU
   Brady E., 2006, IMPL APPL FUNCT LANG, P145
   Brady E., 2003, TYP PROOFS PROGR TYP
   Brady E., 2011, P 5 ACM WORKSH PROGR
   Brady E., 2011, P INT S TRENDS FUNCT
   Chapman J., 2010, P 15 ACM SIGPLAN INT, V45
   Chapman J., 2005, 6 S TRENDS FUNCT PRO
   Coquand T., 1986, Proceedings of the Symposium on Logic in Computer Science (Cat. No.86CH2321-8), P227
   Delahaye D, 2000, LECT NOTES ARTIF INT, V1955, P85, DOI 10.1007/3-540-44404-1_7
   Dybjer P., 1994, Formal Aspects of Computing, V6, P440, DOI 10.1007/BF01211308
   Hancock P., 2000, Computer Science Logic. 14th International Workshop, CSL 2000. Annual Conference of the EACSL. Proceedings (Lecture Notes in Computer Science Vol.1862), P317
   Huet G., 1997, Journal of Functional Programming, V7, P549, DOI 10.1017/S0956796897002864
   Jones SP, 2006, ACM SIGPLAN NOTICES, V41, P50
   Kimmell G., 2012, P 6 ACM WORKSH PROGR
   Lee CS, 2001, ACM SIGPLAN NOTICES, V36, P81, DOI 10.1145/373243.360210
   Löh A, 2010, FUND INFORM, V102, P177, DOI 10.3233/FI-2010-304
   McBride C, 2004, J FUNCT PROGRAM, V14, P69, DOI 10.1017/S0956796803004829
   McBride C., 2000, TYP PROOFS PROGR TYP
   McBride C., 2006, TYP PROOFS PROGR TYP
   McBride C., 1999, THESIS U EDINBURGH E
   Mcbride C, 2008, J FUNCT PROGRAM, V18, P1, DOI 10.1017/S0956796807006326
   MILLER D, 1992, J SYMB COMPUT, V14, P321, DOI 10.1016/0747-7171(92)90011-R
   Norell Ulf, 2007, Towards a practical programming language based on dependent type theory
   Pollack R., 1990, INF P 1 WORKSH LOG F
   Sozeau M, 2008, LECT NOTES COMPUT SC, V5170, P278, DOI 10.1007/978-3-540-71067-7_23
   Vytiniotis D, 2011, J FUNCT PROGRAM, V21, P333, DOI 10.1017/S0956796811000098
NR 33
TC 162
Z9 182
U1 0
U2 7
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD SEP
PY 2013
VL 23
IS 5
BP 552
EP 593
DI 10.1017/S095679681300018X
PG 42
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 250WQ
UT WOS:000326887800002
OA Bronze
DA 2024-07-18
ER

PT J
AU Liu, H
   Cheng, E
   Hudak, P
AF Liu, Hai
   Cheng, Eric
   Hudak, Paul
TI Causal commutative arrows
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB Arrows are a popular form of abstract computation. Being more general than monads, they are more broadly applicable, and, in particular, are a good abstraction for signal processing and dataflow computations. Most notably, arrows form the basis for a domain-specific language called Yampa, which has been used in a variety of concrete applications, including animation, robotics, sound synthesis, control systems, and graphical user interfaces. Our primary interest is in better understanding the class of abstract computations captured by Yampa. Unfortunately, arrows are not concrete enough to do this with precision. To remedy this situation, we introduce the concept of commutative arrows that capture a noninterference property of concurrent computations. We also add an init operator that captures the causal nature of arrow effects, and identify its associated law. To study this class of computations in more detail, we define an extension to arrows called causal commutative arrows (CCA), and study its properties. Our key contribution is the identification of a normal form for CCA called causal commutative normal form (CCNF). By defining a normalization procedure, we have developed an optimization strategy that yields dramatic improvements in performance over conventional implementations of arrows. We have implemented this technique in Haskell, and conducted benchmarks that validate the effectiveness of our approach. When compiled with the Glasgow Haskell Compiler (GHC), the overall methodology can result in significant speedups.
C1 [Liu, Hai; Cheng, Eric; Hudak, Paul] Yale Univ, Dept Comp Sci, New Haven, CT 06520 USA.
C3 Yale University
RP Liu, H (corresponding author), Intel Corp, Intel Labs, Santa Clara, CA 95051 USA.
EM hai.liu@aya.yale.edu; eric.cheng@aya.yale.edu; paul.hudak@yale.edu
FU NSF [CCF-0811665, CNS-0720682]; Microsoft Research
FX We thank anonymous reviewers for pointers to relevant work. This
   research was supported in part by NSF grants CCF-0811665 and
   CNS-0720682, and by a grant from Microsoft Research.
CR AMAGBEGNON P, 1995, C PROGR LANG DES IMP, P163
   ATKEY R, 2008, P 2 WORKSH MATH STRU, V229, P19
   Bjesse P., 1998, ICFP '98
   BURCHETT K, 2007, ACM SIGPLAN S PART E, P71
   Caspi P., 1987, P 14 ACM SIGACT SIGP, P178, DOI DOI 10.1145/41625.41641
   CASPI P, 1998, ELECT NOTES THEORETI, P1
   CHENG E, 2009, YALEUDCSRR1405
   CHEONG MH, 2005, THESIS U NEW S WALES
   COLACO JL, 2004, P 4 ACM INT C EMB SO, P230
   COURTNEY A, 2004, THESIS YALE U NEW HE
   Courtney A., 2003, P ACM SIGPLAN WORKSH, P7, DOI DOI 10.1145/871895.871897
   Courtney Antony., 2001, Proceedings of the 2001 Haskell Workshop, P41
   Coutts D., 2007, P 12 ACM SIGPLAN INT, P315, DOI DOI 10.1145/1291151.1291199
   Elliott C, 1997, ACM SIGPLAN NOTICES, V32, P263, DOI 10.1145/258949.258973
   Giorgidze G, 2008, LECT NOTES COMPUT SC, V4902, P282
   Goertzel G., 1958, Amer. Math. Monthly, V65, P34, DOI DOI 10.2307/2310304
   HALBWACHS N, 1991, LECT NOTES COMPUT SC, V528, P207
   HAREL D, 1980, COMMUN ACM, V23, P379, DOI 10.1145/358886.358892
   Hasegawa M, 1997, LECT NOTES COMPUT SC, V1210, P196
   Huang LW, 2007, LECT NOTES COMPUT SC, V4354, P275
   Hudak P, 2003, LECT NOTES COMPUT SC, V2638, P159
   Hudak P, 1998, FIFTH INTERNATIONAL CONFERENCE ON SOFTWARE REUSE - PROCEEDINGS, P134, DOI 10.1109/ICSR.1998.685738
   HUDAK P, 2008, YALEUDCSRR1408
   HUDAK P, 1996, ACM COMPUTING SURV A, V28
   Hughes J, 2004, LECT NOTES COMPUT SC, V3622, P73
   Hughes J, 2000, SCI COMPUT PROGRAM, V37, P67, DOI 10.1016/S0167-6423(99)00023-4
   Jansson P, 1999, LECT NOTES COMPUT SC, V1576, P273
   Jones SP, 2003, J FUNCT PROGRAM, V13, pVII
   Lindley S, 2010, J FUNCT PROGRAM, V20, P51, DOI 10.1017/S095679680999027X
   Liu H, 2010, LECT NOTES COMPUT SC, V5937, P152, DOI 10.1007/978-3-642-11503-5_14
   Liu H, 2007, ELECTRON NOTES THEOR, V193, P29, DOI 10.1016/j.entcs.2007.10.006
   Lublinerman R, 2009, ACM SIGPLAN NOTICES, V44, P78, DOI 10.1145/1594834.1480893
   Lublinerman Roberto., 2008, P C DESIGN AUTOMATIO, P1504, DOI DOI 10.1145/1403375.1403736
   Mcbride C, 2008, J FUNCT PROGRAM, V18, P1, DOI 10.1017/S0956796807006326
   MEALY GH, 1955, AT&T TECH J, V34, P1045, DOI 10.1002/j.1538-7305.1955.tb03788.x
   MOGGI E, 1991, INFORM COMPUT, V93, P55, DOI 10.1016/0890-5401(91)90052-4
   Nilsson H, 2005, ACM SIGPLAN NOTICES, V40, P54, DOI 10.1145/1090189.1086374
   OERTEL C, 2006, THESIS U TUBINGEN TU
   PATERSON R, 2001, P 6 ACM SIGPLAN INT, P229
   Peterson J, 1999, ICRA '99: IEEE INTERNATIONAL CONFERENCE ON ROBOTICS AND AUTOMATION, VOLS 1-4, PROCEEDINGS, P1144, DOI 10.1109/ROBOT.1999.772516
   Peterson J, 1999, LECT NOTES COMPUT SC, V1551, P91
   Pouzet Marc., 2009, Proceedings of the Seventh ACM International Conference on Embedded Software, EMSOFT '09, P215
   Power J., 1999, Automata, Languages and Programming. 26th International Colloquium, ICALP'99. Proceedings (Lecture Notes in Computer Science Vol.1644), P625
   RAYMOND P, 1988, THESIS IMAG
   Rutten JJMM, 2006, ELECTRON NOTES THEOR, V160, P305, DOI 10.1016/j.entcs.2006.05.030
   SCULTHORPE N, 2008, P 9 S TRENDS FUNCT P, P97
   Sheard T, 2002, ACM SIGPLAN NOTICES, V37, P60, DOI 10.1145/636517.636528
   Stephens R, 1997, ACTA INFORM, V34, P491, DOI 10.1007/s002360050095
   STREET RH, 1996, MATH P CAMBRIDGE PHI, V119, P425
   Thies W, 2002, LECT NOTES COMPUT SC, V2304, P179
   Uustalu T, 2006, LECT NOTES COMPUT SC, V4164, P135
   Wadge W. W., 1985, Lucid, the Dataflow Programming Language
NR 52
TC 13
Z9 13
U1 0
U2 3
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD JUL-SEP
PY 2011
VL 21
SI SI
BP 467
EP 496
DI 10.1017/S0956796811000153
PN 4-5
PG 30
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 828XN
UT WOS:000295538000004
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Ziarek, L
   Jagannathan, S
AF Ziarek, Lukasz
   Jagannathan, Suresh
TI Lightweight checkpointing for concurrent ML
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB Transient faults that arise in large-scale software systems can often be repaired by reexecuting the code in which they occur. Ascribing a meaningful semantics for safe reexecution in multithreaded code is not obvious, however. For a thread to reexecute correctly a region of code, it must ensure that all other threads that have witnessed its unwanted effects within that region are also reverted to a meaningful earlier state. If not done properly, data inconsistencies and other undesirable behavior might result. However, automatically determining what constitutes a consistent global checkpoint is not straightforward because thread interactions are a dynamic properly of the program. In this paper, we present a safe and efficient checkpointing mechanism for Concurrent ML (CM L) that can be used to recover from transient faults. We introduce a new linguistic abstraction, called stabilizers, that permits the specification of per-thread monitors and the restoration of globally consistent checkpoints. Safe global states are computed through lightweight monitoring of communication events among threads (e.g., message-passing operations or updates to shared variables). We present a formal characterization of its design, and provide a detailed description of its implementation within MLton, a whole-program optimizing compiler for Standard ML. Our experimental results on microbenchmarks as well as several realistic, multithreaded, server-style CML applications, including a web server and a windowing toolkit, show that the overheads to use stabilizers are small, and lead us to conclude that they are a viable mechanism for defining safe checkpoints in concurrent functional programs.(1)
C1 [Ziarek, Lukasz; Jagannathan, Suresh] Purdue Univ, Dept Comp Sci, W Lafayette, IN 47907 USA.
C3 Purdue University System; Purdue University
RP Ziarek, L (corresponding author), Purdue Univ, Dept Comp Sci, 305 N Univ St, W Lafayette, IN 47907 USA.
EM lziarek@cs.purdue.edu; suresh@cs.purdue.edu
FU National Science Foundation [CCF-0701832, CCF-0811631]
FX We thank the reviewers for their careful reading and valuable
   suggestions. This work is supported by the National Science Foundation
   under grants CCF-0701832 and CCF-0811631.
CR Adya A., 1995, SIGMOD Record, V24, P23, DOI 10.1145/568271.223787
   Agarwal S., 2004, Proceedings of the 18th annual international conference on supercomputing, ICS '04, P277, DOI DOI 10.1145/1006209.1006248
   [Anonymous], P 9 ACM SIGPLAN INT
   [Anonymous], 1993, T PROCESSING
   Beck M., 1994, COMPILER ASSISTED CH
   BRONEVETSKY G, 2004, P 11 INT C ARCH SUPP, P235
   BRONEVETSKY G, 2003, P 9 ACM SIGPLAN S PR, P84
   BRUNI R, 2005, POPL, P209
   CANDEA G, 2004, P 6 ACM S OP SYST DE, P3
   Chen Yuqun., 1997, Proceedings of the 1997 ACM/IEEE conference on Supercomputing (CDROM), Supercomputing '97, P1, DOI [DOI 10.1145/509593.509626, 10.1145/509593.509626]
   CHRYSANTHIS PK, 1992, DATABASE T MODELS AD, P349
   Dieter WR, 1999, DIG PAP INT SYMP FAU, P224, DOI 10.1109/FTCS.1999.781054
   Donnelly K, 2008, J FUNCT PROGRAM, V18, P649, DOI 10.1017/S0956796808006916
   Effinger-Dean L, 2008, ICFP'08: PROCEEDINGS OF THE 2008 SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P103
   Elnozahy EN, 2002, ACM COMPUT SURV, V34, P375, DOI 10.1145/568522.568525
   FIELD J, 2005, POPL 05, P195
   Flatt Matthew., 2004, Proceedings of the ACM SIGPLAN 2004 Conference on Programming Language Design and Implementation 2004, Washington, DC, USA, June 9-11, P47, DOI [10.1145/996841. 996849, DOI 10.1145/996841.996849]
   HARRIS T, 2003, P 18 ANN ACM SIGPLAN, P388, DOI DOI 10.1145/949305.949340
   Harris Tim., 2005, PPoPP '05: Proceedings of the tenth ACM SIGPLAN symposium on Principles and practice of parallel programming, P48, DOI DOI 10.1145/1065944.1065952
   Herlihy M, 2003, P 22 ANN S PRINCIPLE, P92
   HULSE D, 1995, P 4 INT WORKSH OBJ O, P24
   KASBEKAR M, 2001, P 21 INT C DISTR COM
   KUNG HT, 1981, ACM T DATABASE SYST, V6, P213, DOI 10.1145/319566.319567
   Li K., 1990, P 2 ACM SIGPLAN S PR, P79, DOI DOI 10.1145/99163.99173
   Manson Jeremy., 2005, Proceedings of the 32Nd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, POPL'05, P378, DOI DOI 10.1145/1040305.1040336
   Reppy JohnH., 1999, CONCURRENT PROGRAMMI
   Rinard MC, 1999, ACM T COMPUT SYST, V17, P337, DOI 10.1145/329466.329486
   RINGENBURG MF, 2005, P 10 ACM SIGPLAN INT, P92
   TANTAWI AN, 1984, ACM T COMPUT SYST, V2, P123, DOI 10.1145/190.357398
   TOLMACH AP, 1990, PROCEEDINGS OF THE 1990 ACM CONFERENCE ON LISP AND FUNCTIONAL PROGRAMMING, P1, DOI 10.1145/91556.91564
   TOLMACH AP, 1991, P ACM ONR WORKSH PAR, P120
   Welc A, 2004, LECT NOTES COMPUT SC, V3086, P519
   WELC A, 2005, P 20 ANN ACM SIGPLAN, P439
   Ziarek Lukasz., 2009, P 14 ACM SIGPLAN INT, P161
NR 34
TC 5
Z9 6
U1 0
U2 1
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD MAR
PY 2010
VL 20
BP 137
EP 173
DI 10.1017/S0956796810000067
PN 2
PG 37
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 596BN
UT WOS:000277658400002
OA Bronze
DA 2024-07-18
ER

PT J
AU Saito, C
   Igarashi, A
   Viroli, M
AF Saito, Chieri
   Igarashi, Atsushi
   Viroli, Mirko
TI Lightweight family polymorphism
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB Family polymorphism has been proposed for object-oriented languages as a solution to supporting reusable yet type-safe mutually recursive classes. A key idea of family polymorphism is the notion of families, which are used to group mutually recursive classes. In the original proposal, due to the design decision that families are represented by objects, dependent types had to be introduced, resulting in a rather complex type system. In this article, we propose a simpler solution of lightweight family polymorphism, based on the idea that families are represented by classes rather than by objects. This change makes the type system significantly simpler without losing much expressive power of the language. Moreover, "family-polymorphic" methods now take a form of parametric methods; thus, it is easy to apply method type argument inference as in Java 5.0. To rigorously show that our approach is safe, we formalize the set of language features on top of Featherweight Java and prove that the type system is sound. An algorithm for type inference for family-polymorphic method invocations is also formalized and proved to be correct. Finally, a formal translation by erasure to Featherweight Java is presented; it is proved to preserve typing and execution results, showing that our new language features can be implemented in Java by simply extending the compiler.
C1 [Saito, Chieri; Igarashi, Atsushi] Kyoto Univ, Kyoto 6068501, Japan.
   [Viroli, Mirko] Univ Bologna Cesena, Alma Mater Studiorum, Bologna, Italy.
C3 Kyoto University; University of Bologna
RP Saito, C (corresponding author), Kyoto Univ, Kyoto 6068501, Japan.
EM isaito@kuis.kyoto-u.ac.jp; igarashi@kuis.kyoto-u.ac.jp;
   mirko.viroli@unibo.it
RI Igarashi, Atsushi/AAP-4323-2020
OI Igarashi, Atsushi/0000-0002-5143-9764; Viroli, Mirko/0000-0003-2702-5702
CR [Anonymous], 1998, P 25 ACM SIGPLAN SIG, DOI DOI 10.1145/268946.268961
   Aspinall David., 2005, Advanced Topics in Types and Programming Languages, P45
   BRACHA G, 1998, P ACM C OBJ OR PROGR, P103
   Bruce K., 1995, Theory and Practice of Object Systems, V1, P221
   Bruce KB, 1997, LECT NOTES COMPUT SC, V1241, P104, DOI 10.1007/BFb0053376
   BRUCE KB, 1998, P 12 EUR C OBJ OR PR, V1445
   BRUCE KB, 2004, LECT NOTES COMPUTER, V3086
   BRUCE KB, 1999, ELECT NOTES THEORETI, V20
   BRUCE KB, 2003, ELECT NOTES THEORETI, V8
   Canning Peter, 1989, C FUNCT PROGR LANG C, P273, DOI [10.1145/99370.99392, DOI 10.1145/99370.99392]
   Clarke D., 2007, P INT C ASP OR SOFTW, P121
   Ernst E, 2003, LECT NOTES COMPUT SC, V2743, P303
   Ernst E., 1999, THESIS U AARHUS AARH
   ERNST E, 2001, LNCS, V2072, P00303
   Igarashi A, 2005, LECT NOTES COMPUT SC, V3780, P161
   Igarashi A, 1999, ACM SIGPLAN NOTICES, V34, P132, DOI 10.1145/320385.320395
   IGARASHI A, 2007, P INT WORKSH FDN DEV
   JOLLY P, 2004, P 6 ECOOP WORKSH FOR
   MADSEN OL, 1989, SIGPLAN NOTICES, V24, P397, DOI 10.1145/74878.74919
   NYSTROM N, 2004, P ACM C OBJ OR PROGR
   Odersky M, 2003, LECT NOTES COMPUT SC, V2743, P201
   ODERSKY M, 2002, INFERRED TYPE INSTAN
   Thorup KK, 1999, LECT NOTES COMPUT SC, V1628, P186
   Torgersen M, 2004, LECT NOTES COMPUT SC, V3086, P123
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
   [No title captured]
NR 26
TC 15
Z9 15
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD MAY
PY 2008
VL 18
BP 285
EP 331
DI 10.1017/S0956796807006405
PN 3
PG 47
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 296JT
UT WOS:000255540000001
OA Bronze
DA 2024-07-18
ER

PT J
AU Mcbride, C
   Paterson, R
AF Mcbride, Conor
   Paterson, Ross
TI Applicative programming with effects
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB In this article, we introduce Applicative functors - an abstract characterisation of an applicative style of effectful programming, weaker than Monads and hence more widespread. Indeed, it is the ubiquity of this programming pattern that drew us to the abstraction. We retrace our steps in this article, introducing the applicative pattern by diverse examples, then abstracting it to define the Applicative type class and introducing a bracket notation that interprets the normal application syntax in the idiom of an Applicative functor. Furthermore, we develop the properties of applicative functors and the generic operations they support. We close by identifying the categorical structure of applicative functors and examining their relationship both with Monads and with Arrows.
C1 [Mcbride, Conor] Univ Nottingham, Nottingham NG7 2RD, England.
   [Paterson, Ross] City Univ London, London, England.
C3 University of Nottingham; City University London
RP Mcbride, C (corresponding author), Univ Nottingham, Nottingham NG7 2RD, England.
OI McBride, Conor/0000-0003-1487-0886
CR [Anonymous], 2003, Haskell 98 language and libraries: the revised report
   Baars AI, 2004, J FUNCT PROGRAM, V14, P635, DOI 10.1017/S0956796804005143
   BARR M, 1984, GRUND MATH WISS, V278, pCH9
   COUTTS D, 2002, SUMM SCH ADV F UNPUB
   Fridlender D., 2000, Journal of Functional Programming, V10, P409, DOI 10.1017/S0956796800003658
   Hughes J, 2000, SCI COMPUT PROGRAM, V37, P67, DOI 10.1016/S0167-6423(99)00023-4
   Hutton G, 1998, J FUNCT PROGRAM, V8, P437, DOI [10.1017/S0956796898003050, DOI 10.1017/S0956796898003050]
   LEIJEN D, 1999, 2 C DOM SPEC LANG DS
   Power J., 1997, Mathematical Structures in Computer Science, V7, P453, DOI 10.1017/S0960129597002375
   SWIERSTRA SD, 1996, LNCS, V1129, P184
   WADLER P, 1985, LECT NOTES COMPUT SC, V201, P113
   [No title captured]
   [No title captured]
NR 13
TC 220
Z9 232
U1 1
U2 2
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD JAN
PY 2008
VL 18
BP 1
EP 13
DI 10.1017/S0956796807006326
PN 1
PG 13
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 315CQ
UT WOS:000256855900001
OA Green Submitted, Green Accepted, Bronze
DA 2024-07-18
ER

PT J
AU Baker-Finch, C
   Glynn, K
   Jones, SP
AF Baker-Finch, C
   Glynn, K
   Jones, SP
TI Constructed product result analysis for Haskell
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB Compilers for ML and Haskell typically go to a good deal of trouble to arrange that multiple arguments can be passed efficiently to a procedure. For some reason, less effort seems to be invested in ensuring that multiple results can also be returned efficiently. In the context of the lazy functional language Haskell, we describe an analysis, Constructed Product Result (CPR) analysis, that determines when a function can profitably return multiple results in registers. The analysis is based only on a function's definition, and not on its uses (so separate compilation is easily supported) and the results of the analysis can be expressed by a transformation of the function definition alone. We discuss a variety of design issues that were addressed in our implementation, and give measurements of the effectiveness of our approach across a substantial benchmark set. Overall, the price/performance ratio is good: the benefits are modest in general (though occasionally dramatic), but the costs in both complexity and compile time, are low.
C1 Australian Natl Univ, Dept Comp Sci, Canberra, ACT 0200, Australia.
   Univ Melbourne, Dept Comp Sci, Melbourne, Vic, Australia.
   Microsoft Res, Cambridge, England.
C3 Australian National University; University of Melbourne; Microsoft
RP Australian Natl Univ, Dept Comp Sci, GPO Box 4, Canberra, ACT 0200, Australia.
EM c1em@cs.anu.edu.au; keving@cs.mu.oz.au; simonpj@microsoft.com
CR [Anonymous], 1992, Compiling with Continuations
   ASHLEY JM, 1994, ACS S LISP FUNCTIONA, P140
   GIRARD JY, 1990, LOGICAL FDN FUCTIONA
   GOUBAULT J, 1994, LECT NOTES COMPUTER, V864, P147
   HANKIN C, 1986, ABSTR IMT DECL LANG
   HANNAN J, 1998, ACM SIGPLAN INT C FU, P27
   Jones SLP, 1998, SCI COMPUT PROGRAM, V32, P3, DOI 10.1016/S0167-6423(97)00029-4
   JONES SLP, 1998, SECRETS GLASGOW HASK
   JONES SLP, 1991, ACM C FUNCT PROGR CO, P636
   JONES SP, 1999, ACM C PROGR LANG DES, P25
   LEROY X, 1992, 20 ACM S PRINC PROGR, P177
   LEROY X, 1997, BCCS9703
   Partain W., 1992, FUNCTIONAL PROGRAMMI, P195
   Peyton Jones S. L., 1992, Journal of Functional Programming, V2, P127, DOI 10.1017/S0956796800000319
   Ress J., 1998, HIGHER ORDER SYMBOLI, V11
   SEWARD J, 2002, VALGRIND OPEN SOURCE
   SHAO Z, 1997, ACM SIGPLAN INT C FU, P85
NR 17
TC 3
Z9 4
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD MAR
PY 2004
VL 14
BP 211
EP 245
DI 10.1017/S0956796803004751
PN 2
PG 35
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 809LL
UT WOS:000220638100005
OA Bronze
DA 2024-07-18
ER

PT J
AU Scholz, SB
AF Scholz, SB
TI Single assignment C: efficient support for high-level array operations
   in a functional setting
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID PROGRAMS; FORTRAN
AB This paper presents a novel approach for integrating arrays with access time 61(l) into functional languages. It introduces n-dimensional arrays combined with a type system that supports hierarchies of array types with varying shape information as well as a shape-invariant form of array comprehension called WITH-loop. Together, these constructs allow for a programming style similar to that of array programming languages such as APL. We use Single Assignment C (SAC), a functional C-variant aimed at numerical applications that is based on the proposed design, to demonstrate that programs written in that style can be compiled to code whose runtime performance is competitive with that of hand-optimized Fortran programs. However, essential prerequisites for such performance figures are a shape inference system integrated in the type system as well as several high-level optimizations. Most notably of these is With Loop Folding, an optimization technique for eliminating intermediate arrays.
C1 Univ Kiel, Inst Informat & Prakt Math, D-24118 Kiel, Germany.
C3 University of Kiel
RP Scholz, SB (corresponding author), Univ Kiel, Inst Informat & Prakt Math, Herman Rodewald Str 3, D-24118 Kiel, Germany.
OI Scholz, Sven-Bodo/0000-0002-8663-1043
CR ACHTEN P, 1993, 9303 U NIJM
   ADAMS JC, 1992, FORTRAN90 HDB COMPLE
   ALLEN R, 1987, ACM T PROGR LANG SYS, V9, P491, DOI 10.1145/29873.29875
   [Anonymous], 1987, The Implementation of Functional Programming Languages
   [Anonymous], 2001, OPTIMIZING COMPILERS
   [Anonymous], INT COMPUTER SCI SER
   [Anonymous], J APL
   [Anonymous], LONDON MATH SOC STUD
   [Anonymous], P 4 INT ARCH SUPP PR
   [Anonymous], 1998, Modern Compiler Implementation in C
   AUGUSTSSON L, 1998, P 3 ICFP
   BACON DF, 1994, ACM COMPUT SURV, V26, P345, DOI 10.1145/197405.197406
   BAKER H, 1991, ACM SIGPLAN NOTICES, V26, P145
   BARENDREGT H, 1981, STUDIES LOGICS FDN M, V103
   Bird R.S, 1988, FUNCTIONAL PROGRAMMI
   BRANDES T, 1994, PROGRAMMING ENV MASS, P91
   CANN D, 1992, COMMUN ACM, V35, P81, DOI 10.1145/135226.135231
   Cann D.C., 1989, Technical Report CS-89-108
   CASTAGNA G, 1995, ACM T PROGR LANG SYS, V17, P431, DOI 10.1145/203095.203096
   CHAKRAVARTY MMT, 2001, P ICFP 01
   COHEN J, 1981, COMPUT SURV, V13, P341, DOI 10.1145/356850.356854
   COLEMAN S, 1995, P ACM SIGPLAN C PROG, P279
   DING C, 2000, THESIS RICE U HOUSTO
   Field A.J., 1988, FUNCTIONAL PROGRAMMI
   GAO GR, 1993, P 5 WORKSH LANGUAGES
   GILL A, 1996, THESIS GLASGOW U UK
   GOPINATH K, 1989, P 16 ANN ACM S PRINC, P303
   Grelck C, 2000, LECT NOTES COMPUT SC, V1868, P77
   Grelck C., 1995, P WORKSH IMPL FUNCT, P30
   GRELCK C, 2001, THESIS U KIEL
   Hammes J., 1997, Journal of Functional Programming, V7, P103, DOI 10.1017/S0956796897002621
   Hennessy J., 1995, COMPUTER ARCHITECTUR
   *HIGH PERF FORTR F, 1994, HIGH PERF FORTR LANG
   Hudak Paul., 1985, Proceedings of the 12th ACM SIGACT-SIGPLAN Symposium on Principles of Programming Languages. POPL'85. New Orleans, Louisiana, P300, DOI DOI 10.1145/318593.318660
   HUGHES J, 1996, POPL 96
   *ISO, 1984, INT STAND PROGR LANG
   Iverson K. E., 1962, A Programming Language
   Jay CB, 1998, LECT NOTES COMPUT SC, V1381, P139, DOI 10.1007/BFb0053568
   Jenkins M., 1993, QNIAL LANGUAGE REFER
   JENKINS MA, 1989, COMPUT LANG, V14, P35, DOI 10.1016/0096-0551(89)90029-5
   JENKINS MA, 1999, 157 TU DENM ELTEK
   KLUGE WE, 1992, ORG REDUCTION DATA F
   *KX SYST, 1998, K REF MAN VERS 2 0 K
   LAUNCHBURY J, 1994, PROGRAMMING LANGUAGE
   LEROY X, 2001, OBJECTIVE CAML SYSTE
   Leroy Xavier, 1997, CAML LIGHT SYSTEM RE
   LEWIS EC, 1998, P ACM SIGPLAN 98 C P
   LIN C, 1996, 941006 UWCSETR
   LUCAS J, 2001, P ARR PROC LANG C 20
   MANJIKIAN N, 1995, P INT C PAR DISTR CO
   Martin-Lof P., 1980, Logic, P153
   MAYDAN D, 1992, THESIS STANFORD U
   Mcgraw J., 1985, SISAL: Streams and iteration in a single assignment language
   Milner R., 1990, The Definition of Standard ML
   NEMETH L, 1998, P 10 INT WORKSH IMPL, P381
   OLDEHOEFT RR, 1986, LECT NOTES COMPUT SC, V237, P120
   Plasmeijer Rinus, 1993, FUNCTIONAL PROGRAMMI
   PLOTKIN G, 1974, THEOR COMPUT SCI, V1
   ROTH G, 1996, P INT C PAR DISTR PR
   SCHOLZ SB, 1998, P ARR PROC LANG C 98, P40
   SCHOLZ SB, 1998, LECT NOTES COMPUTER, V1595, P220
   TURNER DA, 1979, SOFTWARE PRACT EXPER, V9, P31, DOI 10.1002/spe.4380090105
   WADLER P, 1990, THEOR COMPUT SCI, V73, P231, DOI 10.1016/0304-3975(90)90147-A
   WADLER P, 1989, POPL 89, P60, DOI DOI 10.1145/75277.75283
   Wei-Ngan Chin, 1994, Journal of Functional Programming, V4, P515, DOI 10.1017/S0956796800001179
   WISE D, 2000, LECT NOTES COMPUTER, V1900, P24
   WISE DS, 1985, INFORM PROCESS LETT, V20, P195, DOI 10.1016/0020-0190(85)90049-3
   Wolf M. E., 1991, SIGPLAN Notices, V26, P30, DOI 10.1145/113446.113449
   WOLF ME, 1991, IEEE T PROGRAM DATA
   Wolfe M.J., 1995, High Performance Compilers for Parallel Computing
   YI Q, 2000, P ACM SIGPLAN 00 C P
   ZENGER C, 1998, THESIS U KARLSRUHE
   Zima Hans., 1991, SUPERCOMPILERS PARAL
   [No title captured]
NR 74
TC 67
Z9 72
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 40 WEST 20TH ST, NEW YORK, NY 10011-4211 USA
SN 0956-7968
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD NOV
PY 2003
VL 13
BP 1005
EP 1059
DI 10.1017/S0956796802004458
PN 6
PG 55
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 754AZ
UT WOS:000187281700002
OA Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Swierstra, W
AF Swierstra, Wouter
TI A correct-by-construction conversion from lambda calculus to combinatory
   logic
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB This pearl defines a translation from well-typed lambda terms to combinatory logic, where both the preservation of types and the correctness of the translation are enforced statically.
C1 [Swierstra, Wouter] Univ Utrecht, Utrecht, Netherlands.
C3 Utrecht University
RP Swierstra, W (corresponding author), Univ Utrecht, Utrecht, Netherlands.
EM w.s.swierstra@uu.nl
CR Abel A., 2016, 13 INT S FLOPS 2016
   [Anonymous], 1987, The Implementation of Functional Programming Languages
   [Anonymous], 1986, Introduction to Combinators and -Calculus
   [Anonymous], 1984, The Lambda Calculus: Its Syntax and Semantics
   Curry H.B., 1958, Combinatory logic, V1
   Diller A., 1988, Compiling Functional Languages
   Hughes R J. M., 1982, P 1982 ACM S LISP FU, P1, DOI DOI 10.1145/800068.802129
   Kiselyov O, 2018, LECT NOTES COMPUT SC, V10818, P33, DOI 10.1007/978-3-319-90686-7_3
   McBride C, 2004, LECT NOTES COMPUT SC, V3622, P130
   McBride C., 2010, J FUNCT PROGRAM
   Mcbride C, 2008, J FUNCT PROGRAM, V18, P1, DOI 10.1017/S0956796807006326
   McBride C, 2018, ELECTRON P THEOR COM, P53, DOI 10.4204/EPTCS.275.6
   Mimram Samuel, 2020, PROGRAM = PROOF
   Norell U, 2013, ACM SIGPLAN NOTICES, V48, P1, DOI 10.1145/2500365.2500609
   Norell U, 2009, LECT NOTES COMPUT SC, V5832, P230, DOI 10.1007/978-3-642-04652-0_5
   Norell Ulf, 2007, PRACTICAL PROGRAMMIN
   Scheevel M., 1986, Proceedings of the 1986 ACM conference on LISP and functional programming, P212
   Schonfinkel M, 1924, MATH ANN, V92, P305, DOI 10.1007/BF01448013
   Sorensen M., 2006, Lectures on the Curry-Howard Isomorphism
   Stoye W., 1985, The implementation of functional languages using custom hardware
   Stoye W., 1983, Technical Report UCAM-CL-TR-40
   TURNER DA, 1979, J SYMBOLIC LOGIC, V44, P267, DOI 10.2307/2273733
NR 22
TC 0
Z9 0
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI CAMBRIDGE
PA EDINBURGH BLDG, SHAFTESBURY RD, CB2 8RU CAMBRIDGE, ENGLAND
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD NOV 22
PY 2023
VL 33
AR e11
DI 10.1017/S0956796823000084
PG 9
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA Y5MI8
UT WOS:001105693000001
OA hybrid, Green Submitted
DA 2024-07-18
ER

PT J
AU Filinski, A
AF Filinski, Andrzej
TI Proof-directed program transformation: A functional account of efficient
   regular expression matching
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB We show how to systematically derive an efficient regular expression (regex) matcher using a variety of program transformation techniques, but very little specialized formal language and automata theory. Starting from the standard specification of the set-theoretic semantics of regular expressions, we proceed via a continuation-based backtracking matcher, to a classical, table-driven state machine. All steps of the development are supported by self-contained (and machine-verified) equational correctness proofs.
C1 [Filinski, Andrzej] Univ Copenhagen, Dept Comp Sci, Copenhagen, Denmark.
C3 University of Copenhagen
RP Filinski, A (corresponding author), Univ Copenhagen, Dept Comp Sci, Copenhagen, Denmark.
EM andrzej@di.ku.dk
CR [Anonymous], 1971, Theory of Machines and Computations, DOI DOI 10.1016/B978-0-12-417750-5.50022-1
   [Anonymous], 1993, Partial Evaluation and Automatic Program Generation
   [Anonymous], 1997, The Definition of Standard ML
   BERRY G, 1986, THEOR COMPUT SCI, V48, P117, DOI 10.1016/0304-3975(86)90088-5
   Brzozowski J. A., 1962, MRI S SERIES
   CONSEL C, 1989, INFORM PROCESS LETT, V30, P79, DOI 10.1016/0020-0190(89)90113-0
   DANVY O, 1990, PROCEEDINGS OF THE 1990 ACM CONFERENCE ON LISP AND FUNCTIONAL PROGRAMMING, P151, DOI 10.1145/91556.91622
   Filinski A., 1999, Conference Record of POPL '99. 26th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P175, DOI 10.1145/292540.292557
   Frisch A, 2004, LECT NOTES COMPUT SC, V3142, P618
   Frost RA, 1996, SCI COMPUT PROGRAM, V27, P263, DOI 10.1016/0167-6423(96)00014-7
   Harper R., 1999, Journal of Functional Programming, V9, P463, DOI 10.1017/S0956796899003378
   HARPER R, 1993, J ACM, V40, P143, DOI 10.1145/138027.138060
   Harper Robert, 2012, Practical Foundations for Programming Languages, DOI DOI 10.1017/CBO9781139342131
   Jones NeilD., 1997, COMPUTABILITY COMPLE
   Knuth D. E., 1977, SIAM Journal on Computing, V6, P323, DOI 10.1137/0206024
   Nielsen L, 2011, LECT NOTES COMPUT SC, V6638, P402, DOI 10.1007/978-3-642-21254-3_32
   Okasaki C., 1995, Conference Record of FPCA '95. SIGPLAN-SIGARCH-WG2.8. Conference on Functional Programming Languages and Computer Architecture, P86, DOI 10.1145/224164.224187
   Owens S, 2009, J FUNCT PROGRAM, V19, P173, DOI 10.1017/S0956796808007090
   Pfenning F., 1999, Automated Deduction - CADE-16. 16th International Conference on Automated Deduction. Proceedings (Lecture Notes in Artificial Intelligence Vol.1632), P202
   RABIN MO, 1959, IBM J RES DEV, V3, P114, DOI 10.1147/rd.32.0114
   Reynolds John C., 1972, ACM 72, V2, P717, DOI DOI 10.1023/A:1010027404223
   THOMPSON K, 1968, COMMUN ACM, V11, P419, DOI 10.1145/363347.363387
   Yi K, 2006, J FUNCT PROGRAM, V16, P663, DOI 10.1017/S0956796806006149
NR 23
TC 0
Z9 0
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD MAY 24
PY 2021
VL 31
AR e12
DI 10.1017/S0956796820000295
PG 38
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA SF8UJ
UT WOS:000653023400001
OA Bronze
DA 2024-07-18
ER

PT J
AU Andersen, KJA
   Sergey, I
AF Andersen, Kristoffer Just Arndal
   Sergey, Ilya
TI Protocol combinators for modeling, testing, and execution of distributed
   systems
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB Distributed systems are hard to get right, model, test, debug, and teach. Their textbook definitions, typically given in a form of replicated state machines, are concise, yet prone to introducing programming errors if naively translated into runnable implementations.
   In this work, we present Distributed Protocol Combinators (DPC), a declarative programming framework that aims to bridge the gap between specifications and runnable implementations of distributed systems, and facilitate their modeling, testing, and execution. DPC builds on the ideas from the state-of-the art logics for compositional systems verification. The contribution of DPC is a novel family of program-level primitives, which facilitates construction of larger distributed systems from smaller components, streamlining the usage of the most common asynchronous message-passing communication patterns, and providing machinery for testing and user-friendly dynamic verification of systems. This paper describes the main ideas behind the design of the framework and presents its implementation in Haskell. We introduce DPC through a series of characteristic examples and showcase it on a number of distributed protocols from the literature.
   This paper extends our preceeding conference publication (Andersen & Sergey, 2019a) with an exploration of randomized testing for protocols and their implementations, and an additional case study demonstrating bounded model checking of protocols.
C1 [Andersen, Kristoffer Just Arndal] Aarhus Univ, Dept Comp Sci, Aarhus, Denmark.
   [Sergey, Ilya] Yale NUS Coll, NUS Sch Comp, Singapore, Singapore.
   [Sergey, Ilya] Natl Univ Singapore, Singapore, Singapore.
C3 Aarhus University; Yale NUS College; National University of Singapore
RP Andersen, KJA (corresponding author), Aarhus Univ, Dept Comp Sci, Aarhus, Denmark.
EM kristoffer@arndalandersen.dk; ilya.sergey@yale-nus.edu.sg
FU Singapore NRF National Satellite of Excellence in Trustworthy Software
   Systems (NSoE-TSS); Crystal Centre at NUS School of Computing
FX We thank the JFP referees for their many helpful suggestions that helped
   to improve the presentation of the paper. Ilya Sergey's work has been
   supported by the grant of Singapore NRF National Satellite of Excellence
   in Trustworthy Software Systems (NSoE-TSS) and by Crystal Centre at NUS
   School of Computing.
CR Adamsen CQ, 2017, PROC INT CONF SOFTW, P289, DOI 10.1109/ICSE.2017.34
   Ancona D, 2016, FOUND TRENDS PROGRAM, V3, pI, DOI 10.1561/2500000031
   Andersen KJA, 2019, LECT NOTES COMPUT SC, V11372, P169, DOI 10.1007/978-3-030-05998-9_11
   Andersen Kristoffer Just Arndal, 2019, **DATA OBJECT**, DOI [10.5281/zenodo.3902686, DOI 10.5281/ZENODO.3902686]
   [Anonymous], 1999, The Coq Proof Assistant
   Brady Edwin, 2017, COMPUTER SCI AGH, V18
   Chandra T, 2007, PODC'07: PROCEEDINGS OF THE 26TH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF DISTRIBUTED COMPUTING, P398
   Claessen K, 2011, ACM SIGPLAN NOTICES, V46, P53, DOI 10.1145/1988042.1988046
   Desai A, 2013, ACM SIGPLAN NOTICES, V48, P321, DOI 10.1145/2499370.2462184
   Desai Ankush, 2018, PACMPL 2 OOPSLA, V159, P1
   Dinsdale-Young T, 2010, LECT NOTES COMPUT SC, V6183, P504, DOI 10.1007/978-3-642-14107-2_24
   Dragoi C, 2016, ACM SIGPLAN NOTICES, V51, P400, DOI [10.1145/2837614.2837650, 10.1145/2914770.2837650]
   Findler RB, 2002, ACM SIGPLAN NOTICES, V37, P48, DOI 10.1145/583852.581484
   Garcia-Perez Alvaro, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P912, DOI 10.1007/978-3-319-89884-1_32
   Gommerstadt Hannah, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P771, DOI 10.1007/978-3-319-89884-1_27
   Gray J. N., 1978, Operating Systems. An Advanced Course, P393
   Hawblitzel C, 2015, SOSP'15: PROCEEDINGS OF THE TWENTY-FIFTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P1, DOI 10.1145/2815400.2815428
   Hüttel H, 2016, ACM COMPUT SURV, V49, DOI 10.1145/2873052
   JONES CB, 1983, ACM T PROGR LANG SYS, V5, P596, DOI 10.1145/69575.69577
   Killian C, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P179, DOI 10.1145/1250734.1250755
   Kleppmann Martin, 2016, DISTRIBUTED LOCKING
   Krogh-Jespersen M, 2020, LECT NOTES COMPUT SC, V12075, P336, DOI 10.1007/978-3-030-44914-8_13
   Lamport L, 1998, ACM T COMPUT SYST, V16, P133, DOI 10.1145/279227.279229
   LAMPORT L, 1985, LECT NOTES COMPUT SC, V190, P203
   Lamport L., 2001, ACM SIGACT NEWS, V32
   Lampson Butler W., 1996, BUILD HIGHLY AVAILAB
   Lange J, 2012, LECT NOTES COMPUT SC, V7454, P225, DOI 10.1007/978-3-642-32940-1_17
   Leonini L., 2009, NSDI 09, V9, P185
   Liang Sheng, 1995, P 22 ACM SIGPLAN SIG, P333, DOI DOI 10.1145/199448.199528
   Liu YHA, 2012, ACM SIGPLAN NOTICES, V47, P395, DOI 10.1145/2398857.2384645
   Melgratti H, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110279
   Nanevski A, 2008, ACM SIGPLAN NOTICES, V43, P229, DOI 10.1145/1411203.1411237
   Newcombe C, 2015, COMMUN ACM, V58, P66, DOI 10.1145/2699417
   OHearn Peter W., 2001, CSL, V2142
   Padon O, 2016, ACM SIGPLAN NOTICES, V51, P614, DOI [10.1145/2908080.2908118, 10.1145/2980983.2908118]
   PFENNING F, 1988, SIGPLAN NOTICES, V23, P199, DOI 10.1145/960116.54010
   Pirlea George, 2018, MECH BLOCKCHAIN CONS, P78
   Sergey I, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158116
   Sergey I, 2016, ACM SIGPLAN NOTICES, V51, P92, DOI 10.1145/3022671.2983999
   van Renesse R, 2015, ACM COMPUT SURV, V47, DOI 10.1145/2673577
   Weikum G., 2002, T INFORM SYSTEMS THE
   Wilcox JR, 2015, ACM SIGPLAN NOTICES, V50, P357, DOI [10.1145/2737924.2737958, 10.1145/2813885.2737958]
   Wilcox James R., 2017, PROGRAMMING LANGUAGE
NR 43
TC 1
Z9 1
U1 0
U2 2
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD FEB 15
PY 2021
VL 31
AR e3
DI 10.1017/S095679682000026X
PG 29
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA QG9PK
UT WOS:000617911000001
DA 2024-07-18
ER

PT J
AU Perez, I
   Nilsson, H
AF Perez, Ivan
   Nilsson, Henrik
TI Runtime verification and validation of functional reactive systems
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB Many types of interactive applications, including reactive systems implemented in hardware, interactive physics simulations and games, raise particular challenges when it comes to testing and debugging. Reasons include de facto lack of reproducibility and difficulties of automatically generating suitable test data. This paper demonstrates that certain variants of functional reactive programming (FRP) implemented in pure functional languages can mitigate such difficulties by offering referential transparency at the level of whole programs. This opens up for a multi-pronged approach for assisting with testing and debugging that works across platforms, including assertions based on temporal logic, recording and replaying of runs (also from deployed code), and automated random testing using QuickCheck. When combined with extensible forms of FRP that allow for constrained side effects, it allows us to not only validate software simulations but to analyse the effect of faults in reactive systems, confirm the efficacy of fault tolerance mechanisms and perform software- and hardware-in-the-loop testing. The approach has been validated on non-trivial systems implemented in several existing FRP implementations, by means of careful debugging using a tool that allows the test or simulation under scrutiny to be controlled, moving along the execution time line, and pin-pointing of violations of assertions on personal computers as well as external devices.
C1 [Perez, Ivan] Natl Inst Aerosp, Hampton, VA 23666 USA.
   [Nilsson, Henrik] Univ Nottingham, Sch Comp Sci, Nottingham NG8 1BB, England.
C3 National Institute for Aerospace; University of Nottingham
RP Perez, I (corresponding author), Natl Inst Aerosp, Hampton, VA 23666 USA.
EM ivan.perez@nianet.org; henrik.nilsson@nottingham.ac.uk
FU NASA [80LARC17C0004]
FX This paper is an extended version of Perez & Nilsson (2017). The first
   author's contributions to this extended version were partly funded under
   NASA Cooperative Agreement 80LARC17C0004. Any opinions, findings, and
   conclusions or recommendations expressed in this material are those of
   the authors and do not necessarily reflect the views, either expressed
   or implied, of any of the funding organisations.
CR [Anonymous], 2003, P INT C ADV INFR EL
   AVIZIENIS A, 1976, IEEE T COMPUT, V25, P1304, DOI 10.1109/TC.1976.1674598
   Avizienis A., 1967, AFIPS FALL JOINT COM, V31, P733
   Bärenz M, 2018, PROCEEDINGS OF THE 11TH ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON HASKELL (HASKELL '18), P145, DOI 10.1145/3242744.3242757
   Carmack J., 1998, J CARMACK ARCH PLAN
   Claessen K, 2000, ACM SIGPLAN NOTICES, V35, P268, DOI 10.1145/357766.351266
   Clarke E. M., 1982, LOGICS OF PROGRAMS
   Courtney A., 2003, P ACM SIGPLAN WORKSH, P7, DOI DOI 10.1145/871895.871897
   Courtney Antony., 2001, Proceedings of the 2001 Haskell Workshop, P41
   Eliot C., 1997, P ICFP 07, P163
   Emerson E., 1990, HDB THEORETICAL COMP
   Giannakopoulou D, 2001, 16TH ANNUAL INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING (ASE 2001), PROCEEDINGS, P412, DOI 10.1109/ASE.2001.989841
   Gray J., 1986, Proceedings Fifth Symposium on Reliability in Distributed Software and Database Systems (Cat. No.86CH2260-8), P3
   Havelund K, 2001, 16TH ANNUAL INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING (ASE 2001), PROCEEDINGS, P135, DOI 10.1109/ASE.2001.989799
   Hughes J, 2000, SCI COMPUT PROGRAM, V37, P67, DOI 10.1016/S0167-6423(99)00023-4
   Hughes J., 2010, Proceedings of the 5th Workshop on Automation of Software Test, AST'10, P95, DOI [10.1145/1808266.1808281, DOI 10.1145/1808266.1808281]
   Jeffrey A., 2014, P JOINT M 23 EACSL A
   Jeffrey Alan., 2012, Proceedings of the sixth workshop on Programming languages meets program verification, P49
   Jeltsch W., 2013, Proceedings of the 7th workshop on Programming languages meets program verification, P69
   Jeltsch W, 2012, ELECTRON NOTES THEOR, V286, P229, DOI 10.1016/j.entcs.2012.08.015
   Lewis PG, 2010, NATIONAL POLITICS AND EUROPEAN INTEGRATION: FROM THE CONSTITUTION TO THE LISBON TREATY, P108
   Murphy IP, 2014, PROCEEDINGS OF THE ASME INTERNATIONAL MECHANICAL ENGINEERING CONGRESS AND EXPOSITION, 2013, VOL 4A
   Nejati S, 2005, SEFM 2005: THIRD IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING AND FORMAL METHODS, PROCEEDINGS, P311
   Nilsson H., 2003, YAMPA
   Nilsson H, 2002, P 2002 ACM SIGPLAN W, P51, DOI DOI 10.1145/581690.581695
   Paterson R, 2001, ACM SIGPLAN NOTICES, V36, P229, DOI 10.1145/507669.507664
   Perez I., 2017, DUNAI TEST
   Perez I., 2016, DUNAI
   Perez I., 2017, P 10 ACM SIGPLAN INT
   Perez I., 2018, THESIS
   Perez I., 2019, IEEE INT C SPAC MISS
   Perez I., 2017, YAMPA TEST
   Perez I, 2020, J FUNCT PROGRAM, V30, DOI 10.1017/S0956796820000118
   Perez I, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110246
   Perez I, 2016, ACM SIGPLAN NOTICES, V51, P33, DOI [10.1145/2976002.2976010, 10.1145/3241625.2976010]
   Perez I, 2015, ACM SIGPLAN NOTICES, V50, P47, DOI 10.1145/2804302.2804316
   Pnueli A., 1977, 18th Annual Symposium on Foundations of Computer Science, P46, DOI 10.1109/SFCS.1977.32
   Prior A.N., 1967, PRESENT FUTURE, V154
   Ronsse M., 2000, CS0011006 ARXIV
   Sculthorpe N., 2011, THESIS
   Swinburne TD, 2018, PHYS REV MATER, V2, DOI 10.1103/PhysRevMaterials.2.053802
   Tan L, 2004, PROCEEDINGS OF THE 2004 IEEE INTERNATIONAL CONFERENCE ON INFORMATION REUSE AND INTEGRATION (IRI-2004), P493
   van der Ploeg A, 2013, ACM SIGPLAN NOTICES, V48, P117, DOI 10.1145/2503778.2503783
   Wan ZY, 2000, ACM SIGPLAN NOTICES, V35, P242, DOI 10.1145/358438.349331
   Whittaker JA, 2000, IEEE SOFTWARE, V17, P70, DOI 10.1109/52.819971
   Winitzki S., 2014, TEMPORAL LOGIC FUNCT
NR 46
TC 2
Z9 2
U1 0
U2 5
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD AUG 26
PY 2020
VL 30
AR e28
DI 10.1017/S0956796820000210
PG 55
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA NE2LE
UT WOS:000562427900001
OA Green Accepted
DA 2024-07-18
ER

PT J
AU Luksic, Z
   Pretnar, M
AF Luksic, Ziga
   Pretnar, Matija
TI Local algebraic effect theories
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID HANDLERS
AB Algebraic effects are computational effects that can be described with a set of basic operations and equations between them. As many interesting effect handlers do not respect these equations, most approaches assume a trivial theory, sacrificing both reasoning power and safety. We present an alternative approach where the type system tracks equations that are observed in subparts of the program, yielding a sound and flexible logic, and paving a way for practical optimisations and reasoning tools.
C1 [Luksic, Ziga; Pretnar, Matija] Univ Ljubljana, Fac Math & Phys, Ljubljana, Slovenia.
C3 University of Ljubljana
RP Luksic, Z (corresponding author), Univ Ljubljana, Fac Math & Phys, Ljubljana, Slovenia.
EM ziga.luksic@fmf.uni-lj.si; matija.pretnar@fmf.uni-lj.si
OI Pretnar, Matija/0000-0001-7755-2303
FU Air Force Office of Scientific Research [FA9550-171-0326]
FX This material is based upon work supported by the Air Force Office of
   Scientific Research under award number FA9550-171-0326.
CR Ahman D, 2017, THESIS
   Ahman D., 2018, PACMPL, V2
   Bauer A., 2016, DAGSTUHL REP, V6, P44
   Bauer A, 2014, LOG METH COMPUT SCI, V10, DOI 10.2168/LMCS-10(4:9)2014
   Bauer A, 2015, J LOG ALGEBR METHODS, V84, P108, DOI 10.1016/j.jlamp.2014.02.001
   Biernacki D, 2018, PACMPL, V2
   Brady E, 2013, ACM SIGPLAN NOTICES, V48, P133, DOI [10.1145/2500365.2500581, 10.1145/2544174.2500581]
   Chandrasekaran Sivaramakrishnan Krishnamoorthy, 2018, DAGSTUHL REPORTS, V8, P104, DOI [10.4230/DagRep.8.4.104, DOI 10.4230/DAGREP.8.4.104]
   Claessen K, 2000, ACM SIGPLAN NOTICES, V35, P268, DOI 10.1145/357766.351266
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Forster Y, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110257
   Gibbons J, 2011, ICFP 11 - PROCEEDINGS OF THE 2011 ACM SIGPLAN: INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P2
   Hillerstrom Daniel, 2016, TYDE ICFP, P15, DOI DOI 10.1145/2976022.2976033
   Kammar O, 2017, J FUNCT PROGRAM, V27, DOI 10.1017/S0956796816000320
   Kammar O, 2013, ACM SIGPLAN NOTICES, V48, P145, DOI [10.1145/2500365.2500590, 10.1145/2544174.2500590]
   Kammar O, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P349
   Leijen D, 2017, ACM SIGPLAN NOTICES, V52, P486, DOI 10.1145/3093333.3009872
   Levy PB, 2003, INFORM COMPUT, V185, P182, DOI 10.1016/S0890-5401(03)00088-9
   McLaughlin C., 2018, CPP 2018, P102
   MOGGI E, 1991, INFORM COMPUT, V93, P55, DOI 10.1016/0890-5401(91)90052-4
   Plotkin G, 2003, APPL CATEGOR STRUCT, V11, P69, DOI 10.1023/A:1023064908962
   Plotkin G., 2001, Foundations of Software Science and Computation Structures. 4th International Conference, FOSSACS 2001. Held as Part of the Joint European Conferences on Theory and Practice of Software, ETAPS 2001. Proceedings (Lecture Notes in Computer Science Vol.2030), P1
   Plotkin G, 2008, IEEE S LOG, P118, DOI 10.1109/LICS.2008.45
   Plotkin G, 2009, LECT NOTES COMPUT SC, V5502, P80, DOI 10.1007/978-3-642-00590-9_7
   Plotkin GD, 2013, LOG METH COMPUT SCI, V9, DOI 10.2168/LMCS-9(4:23)2013
   Pretnar M, 2015, ELECTRON NOTES THEOR, V319, P19, DOI 10.1016/j.entcs.2015.12.003
   Pretnar Matija, 2010, THESIS
   Saleh Amr Hany, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P327, DOI 10.1007/978-3-319-89884-1_12
NR 28
TC 4
Z9 4
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD MAY 11
PY 2020
VL 30
AR e13
DI 10.1017/S0956796819000212
PG 27
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA LL4OX
UT WOS:000531537100001
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Eriksen, M
   Sperber, M
   Madhavapeddy, A
AF Eriksen, Marius
   Sperber, Michael
   Madhavapeddy, Anil
TI CUFP'13 scribe's report
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
C1 [Eriksen, Marius] Twitter Inc, San Francisco, CA 94103 USA.
   [Sperber, Michael] Act Grp GmbH, D-70794 Filderstadt, Germany.
   [Madhavapeddy, Anil] Univ Cambridge, Comp Lab, Cambridge CB3 0FD, England.
C3 Twitter, Inc.; University of Cambridge
RP Eriksen, M (corresponding author), Twitter Inc, 1355 Market St,Suite 900, San Francisco, CA 94103 USA.
EM marius@twitter.com; sperber@deinprogramm.de; anil@recoil.org
RI Sperber, Michael/JXL-8874-2024; Taheri, Zahra/AAA-6362-2022
OI Taheri, Zahra/0000-0001-8636-2798; Madhavapeddy,
   Anil/0000-0001-8954-2428
CR Chandra T, 2007, PODC'07: PROCEEDINGS OF THE 26TH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF DISTRIBUTED COMPUTING, P398
   Charles River Analytics, 2014, FIG
   Christensen B., 2013, Reactive Programming in the Net ix API with RxJava
   Claessen K, 2011, ACM SIGPLAN NOTICES, V46, P53, DOI 10.1145/1988042.1988046
   Compall S., 2014, USERS GUIDE ERMINE
   Epstein J., 2011, P HASK S, V46
   Google Inc, 2014, PROT BUFF
   Herington D., 2014, HUNIT 1 0 USERS GUID
   Lamport L, 1998, ACM T COMPUT SYST, V16, P133, DOI 10.1145/279227.279229
   Letourneau P.-J., 2013, MATH GETS BIG DATA H
   Madhavapeddy A, 2012, J FUNCT PROGRAM, V22, P1, DOI 10.1017/S0956796812000020
   Mitchell N., 2014, HLINT MANUAL
   Pfeffer A., 2009, CHARLES RIVER ANALYT, V137
   Siek Jeremy, 2006, WORKSHOP SCHEME FUNC, P81
   Slee M., 2007, THRIFT SCALABLE CROS
   Snoyman M., 2012, DEV WEB APPL HASKELL
   Sperber M, 2013, J FUNCT PROGRAM, V23, P701, DOI 10.1017/S0956796813000257
   Tobin-Hochstadt S., 2006, COMPANION TO THE 21S, P964
   Typesafe Inc, 2014, PLAY 2 2 DOC
   Typesafe Inc, 2014, AKK DOC REL 2 0 2
   Verlaguet Julien., 2014, Hack: a new programming langauge for HHVM
   Vouillon J, 2014, SOFTWARE PRACT EXPER, V44, P951, DOI 10.1002/spe.2187
NR 22
TC 0
Z9 0
U1 0
U2 1
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PY 2015
VL 25
AR e3
DI 10.1017/S0956796815000052
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CL9DZ
UT WOS:000357277100001
OA Bronze
DA 2024-07-18
ER

PT J
AU Flatt, M
   Culpepper, R
   Darais, D
   Findler, RB
AF Flatt, Matthew
   Culpepper, Ryan
   Darais, David
   Findler, Robert Bruce
TI Macros that Work Together Compile-time bindings, partial expansion, and
   definition contexts
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB Racket is a large language that is built mostly within itself. Unlike the usual approach taken by non-Lisp languages, the self-hosting of Racket is not a matter of bootstrapping one implementation through a previous implementation, but instead a matter of building a tower of languages and libraries via macros. The upper layers of the tower include a class system, a component system, pedagogic variants of Scheme, a statically typed dialect of Scheme, and more. The demands of this language-construction effort require a macro system that is substantially more expressive than previous macro systems. In particular, while conventional Scheme macro systems handle stand-alone syntactic forms adequately, they provide weak support for macros that share information or macros that use existing syntactic forms in new contexts. This paper describes and models features of the Racket macro system, including support for general compile-time bindings, sub-form expansion and analysis, and environment management. The presentation assumes a basic familiarity with Lisp-style macros, and it takes for granted the need for macros that respect lexical scope. The model, however, strips away the pattern and template system that is normally associated with Scheme macros, isolating a core that is simpler, can support pattern and template forms themselves as macros, and generalizes naturally to Racket's other extensions.
C1 [Flatt, Matthew; Culpepper, Ryan; Darais, David] Univ Utah, Salt Lake City, UT 84112 USA.
   [Findler, Robert Bruce] Northwestern Univ, Evanston, IL 60208 USA.
C3 Utah System of Higher Education; University of Utah; Northwestern
   University
RP Flatt, M (corresponding author), Univ Utah, Salt Lake City, UT 84112 USA.
EM mflatt@cs.utah.edu; ryan@cs.utah.edu; david.darais@gmail.com;
   robby@eecs.northwestern.edu
RI Findler, Robert/B-7145-2009
FU Direct For Computer & Info Scie & Enginr; Division Of Computer and
   Network Systems [0855140] Funding Source: National Science Foundation;
   Division of Computing and Communication Foundations; Direct For Computer
   & Info Scie & Enginr [0914759] Funding Source: National Science
   Foundation
CR [Anonymous], POPL 87
   [Anonymous], 1993, LISP SYMBOLIC COMPUT
   Bawden A., 1988, Proceedings of the 1988 ACM Conference on LISP and Functional Programming, P86, DOI 10.1145/62678.62687
   Clinger C., 1991, P ACM S PRINC PROGR, P155
   Clinger William D, 1991, LISP POINTERS, V4, P25
   Dybvig R. K., 1988, LISP and Symbolic Computation, V1, P53, DOI 10.1007/BF01806176
   Felleisen M., 2009, Semantics Engineering with PLT Redex
   Fisher D, 2008, J FUNCT PROGRAM, V18, P707, DOI 10.1017/S0956796808006928
   Flatt Matthew., 2002, INT C FUNCTIONAL PRO, P72, DOI [10.1145/581478.581484, DOI 10.1145/581478.581484]
   Gabbay M., 1999, P 14 IEEE S LOG COMP, P341
   Gasbichler M, 2006, THESIS U TUBINGEN TU
   Ghuloum A., 2007, PORTABLE SYNTAX CASE
   Herman David, 2010, THESIS NE U BOSTON
   Hilsdale E., 2000, P WORKSH SCHEM FUNCT
   Kohlbecker Eugene., 1986, P 1986 ACM C LISP FU, P151
   Milner R., 1990, The Definition of Standard ML
   PFENNING F, 1999, P 16 INT C AUT DED C, P202
   Pfenning F., 1988, PLDI'88: Proceedings of the ACM SIGPLAN 1988 conference on Programming Language design and Implementation', P199
   Sheard T., 2002, P HASK WORKSH 2002 P, P60
   SHINWELL MR, 2003, P 8 ACM SIGPLAN INT, P263
   Sperber M., 2009, J. Funct. Program, V19, P1
   van Tonder A., 2007, R6RS Libraries and Macros
   Van Wyk E, 2010, SCI COMPUT PROGRAM, V75, P39, DOI 10.1016/j.scico.2009.07.004
   WADDELL O, 1999, P ACM S PRINC PROGR, P203
NR 24
TC 15
Z9 15
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD MAR
PY 2012
VL 22
BP 181
EP 216
DI 10.1017/S0956796812000093
PN 2
PG 36
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 942BE
UT WOS:000304013700003
OA Bronze
DA 2024-07-18
ER

PT J
AU Fokkinga, M
AF Fokkinga, Maarten
TI The Hough transform
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
C1 Univ Twente, Dept EEMCS, NL-7500 AE Enschede, Netherlands.
C3 University of Twente
RP Fokkinga, M (corresponding author), Univ Twente, Dept EEMCS, POB 217, NL-7500 AE Enschede, Netherlands.
EM m.m.fokkinga@utwente.nl
CR Hart PE, 2009, IEEE SIGNAL PROC MAG, V26, P18, DOI 10.1109/MSP.2009.934181
   HOUGH PVC, 2010, Patent No. 3069654
NR 2
TC 4
Z9 6
U1 2
U2 7
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD MAR
PY 2011
VL 21
BP 129
EP 133
DI 10.1017/S0956796810000341
PN 2
PG 5
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 748GS
UT WOS:000289378800002
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Dolstra, E
   Löh, A
   Pierron, N
AF Dolstra, Eelco
   Loh, Andres
   Pierron, Nicolas
TI NixOS: A purely functional Linux distribution
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 13th ACM SIGPLAN International Conference on Functional Programming
CY SEP 22-24, 2008
CL Victoria, CANADA
SP ACM SIGPLAN
AB Existing package and system configuration management tools suffer from an imperative model, where system administration actions such as package upgrades or changes to system configuration files are stateful: they destructively update the state of the system. This leads to many problems, such as the inability to roll back changes easily, to deploy multiple versions of a package side-by-side, to reproduce a configuration deterministically on another machine, or to reliably upgrade a system. In this paper we show that we can overcome these problems by moving to a purely functional system configuration model. This means that all static parts of a system (such as software packages, configuration files and system startup scripts) are built by pure functions and are immutable, stored in a way analogous to a heap in a purely functional language. We have implemented this model in NixOS, a non-trivial Linux distribution that uses the Nix package manager to build the entire system configuration from a modular, purely functional specification.
C1 [Dolstra, Eelco] Delft Univ Technol, Dept Software Technol, NL-2600 GA Delft, Netherlands.
   [Loh, Andres] Univ Utrecht, Dept Informat & Comp Sci, NL-3508 TB Utrecht, Netherlands.
   [Pierron, Nicolas] EPITA Res & Dev Lab, F-94276 Le Kremlin Bicetre, France.
C3 Delft University of Technology; Utrecht University
RP Dolstra, E (corresponding author), Delft Univ Technol, Dept Software Technol, Postbus 5031, NL-2600 GA Delft, Netherlands.
EM e.dolstra@tudelft.nl; andres@cs.uu.nl; nicolas.b.pierron@gmail.com
OI Loh, Andres/0000-0002-7492-7293
CR ANDERSON R, 2000, END DLL HELL
   BESHERS, 2007, ICFP 07, P213
   BOEHM, 1993, P ACM SIGPLAN 93 C P, P197
   BURGESS M, 1995, COMPUT SYST, V8, P309
   CLEMM G, 1986, THESIS U COLORADO BO
   CLEMM GM, 1995, LECT NOTES COMPUTER, V1005, P241
   COSMO RD, 2008, HOTSWUP 08, P1
   DENBREEJEN W, 2008, INFSCR2007053 UTR U
   DETREVILLE J, 2005, HOTOS, V10, P61
   Dolstra E, 2004, PROC INT CONF SOFTW, P583, DOI 10.1109/ICSE.2004.1317480
   DOLSTRA E, 2006, THESIS UTRECHT U NET
   DOLSTRA E, 2005, 20 IEEE ACM INT C AU, P154
   Dolstra E, 2009, ELECTRON NOTES THEOR, V238, P81, DOI 10.1016/j.entcs.2009.09.042
   FELDMAN SI, 1979, SOFTWARE PRACT EXPER, V9, P255, DOI 10.1002/spe.4380090402
   Foster-Johnson E., 2003, RED HAT RPM GUIDE, Vfirst
   *FREEBSD PROJ, 2009, FREEBSD PORTS COLL
   HALLGREN T, 2005, ICFP 05, P116, DOI DOI 10.1145/1086365.1086380
   Hart J, 2002, USENIX ASSOCIATION PROCEEDINGS OF THE SIXTEENTH SYSTEMS ADMINISTRATION CONFERENCE (LISA XVI), P155
   HEYDON A, 2000, ACM SIGPLAN 00 C PRO, P311
   Heydon A., 2001, 168 COMP SYST RES CT
   HUDAK P, 1989, COMPUT SURV, V21, P359, DOI 10.1145/72551.72554
   Jones Simon Peyton, 2004, HASKELL 98 LANGUAGE
   Kanies L, 2003, USENIX ASSOCIATION PROCEEDINGS OF THE SEVENTEENTH LARGE INSTALLATION SYSTEMS ADMINISTRATION CONFERENCE, P115
   PENDRY JS, 1995, PROCEEDINGS OF THE 1995 USENIX TECHNICAL CONFERENCE, P25
   Peyton Jones S. L., 1992, Journal of Functional Programming, V2, P127, DOI 10.1017/S0956796800000319
   Schneier B., 2015, APPL CRYPTOGRAPHY, VSecond
   SLOANE AM, 2002, P 35 ANN HAW INT C S, P281
   Stevens W.R., 2013, Advanced Programming in the UNIX Environment, V3rd
   *TIS COMM, 1995, TOOL INT SPEC TIS EX
   Traugott S, 2002, USENIX ASSOCIATION PROCEEDINGS OF THE SIXTEENTH SYSTEMS ADMINISTRATION CONFERENCE (LISA XVI), P99
   TUCKER DB, 2001, 10 INT WORKSH SOFTW
NR 31
TC 21
Z9 21
U1 0
U2 9
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD NOV
PY 2010
VL 20
SI SI
BP 577
EP 615
DI 10.1017/S0956796810000195
PN 5-6
PG 39
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 735PF
UT WOS:000288428700005
OA Bronze
DA 2024-07-18
ER

PT J
AU Blume, M
   McAllester, D
AF Blume, Matthias
   McAllester, David
TI Sound and complete models of contracts
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 9th International Conference on Functional Programming
CY SEP 19-21, 2004
CL Snowbird, UT
SP ACM SIGPLAN
ID DRSCHEME
AB Even in statically typed languages it is useful to have certain invariants checked dynamically. Findler and Felleisen gave an algorithm for dynamically checking expressive higher-order types called contracts. They did not, however, give a semantics of contracts. The lack of a semantics makes it impossible to define and prove soundness and completeness of the checking algorithm. (Given a semantics, a sound checker never reports violations that do not exist under that semantics; a complete checker is - in principle - able to find violations when violations exist.) Ideally, a semantics should capture what programmers intuitively feel is the meaning of a contract or otherwise clearly point out where intuition does not match reality. In this paper we give an interpretation of contracts for which we prove the Findler-Fellcisen algorithm sound and (under reasonable assumptions) complete. While our semantics mostly matches intuition, it also exposes a problem with predicate contracts where an arguably more intuitive interpretation than ours would render the checking algorithm unsound. In our semantics we have to make use of a notion of safety (which we define in the paper) to avoid unsoundness. We are able to eliminate the "leakage" of safety into the semantics by changing the language, replacing the original version of unrestricted predicate contracts with a restricted form. The corresponding loss in expressive power can be recovered by making safety explicit as a contract. This can be done either in ad-hoc fashion or by including general recursive contracts. The addition of recursive contracts has far-reaching implications, deeply affecting the formulation of our model and requiring different techniques for proving soundness.
C1 Toyota Technol Inst, Chicago, IL USA.
C3 Toyota Technological Institute - Chicago
RP Blume, M (corresponding author), Toyota Technol Inst, Chicago, IL USA.
EM blume@tti-c.org; mcallester@tti-c.org
CR [Anonymous], 1972, Toposes, algebraic geometry and logic, DOI DOI 10.1007/BFB0073967
   [Anonymous], 1987, THEORY RECURSIVE FUN
   [Anonymous], 1997, The Definition of Standard ML
   [Anonymous], 2003, Haskell 98 language and libraries: the revised report
   Appel AW, 2001, ACM T PROGR LANG SYS, V23, P657, DOI 10.1145/504709.504712
   Blume Matthias, 2004, P 9 ACM SIGPLAN INT, DOI [10.1145/1016850.1016876, DOI 10.1145/1016850.1016876]
   Bruce K. B., 1997, Theoretical Aspects of Computer Software. Third International Symposium, TACS '97. Proceedings, P415, DOI 10.1007/BFb0014561
   BRUS T, 1987, LECT NOTES COMPUTER, V274
   Dijkstra E. W., 1976, A Discipline of Pro-gramming
   Felleisen M, 1998, ACM SIGPLAN NOTICES, V33, P17, DOI 10.1145/284563.284566
   FELLEISEN M, 1992, THEOR COMPUT SCI, V103, P235, DOI 10.1016/0304-3975(92)90014-7
   Findler RB, 2002, J FUNCT PROGRAM, V12, P159, DOI 10.1017/S0956796801004208
   FINDLER RB, 2002, P 7 ACM SIGPLAN INT, P48
   FINDLER RB, 2002, THESIS RICE U
   Findler Robert Bruce, 2004, TR200402 U CHIC COMP
   Hoare C. A. R., 1969, COMMUN ACM, P578
   Leroy X., 1990, 117 INRIA
   Meyer B., 1992, Eiffel: The Language
   RICE HG, 1953, T AM MATH SOC, V74, P358, DOI 10.2307/1990888
NR 19
TC 34
Z9 36
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD JUL-SEP
PY 2006
VL 16
BP 375
EP 414
DI 10.1017/S0956796806005971
PN 4-5
PG 40
WC Computer Science, Software Engineering
WE Conference Proceedings Citation Index - Science (CPCI-S); Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 079KJ
UT WOS:000240174500002
OA Bronze
DA 2024-07-18
ER

PT J
AU Shivers, O
   Fisher, D
AF Shivers, Olin
   Fisher, David
TI Multi-return function call
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 9th International Conference on Functional Programming
CY SEP 19-21, 2004
CL Snowbird, UT
SP ACM SIGPLAN
AB It is possible to extend the basic notion of "function call" to allow functions to have multiple return points. This turns out to be a surprisingly useful mechanism. This article conducts a fairly wide-ranging tour of such a feature: a formal semantics for a minimal A-calculus capturing the mechanism; motivating examples; monomorphic and parametrically polymorphic static type systems; useful transformations; implementation concerns and experience with an implementation; and comparison to related mechanisms, such as exceptions, sum-types and explicit continuations. We conclude that multiple-return function call is not only a useful and expressive mechanism, at both the source-code and intermediate-representation levels, but also quite inexpensive to implement.
C1 Georgia Inst Technol, Coll Comp, Atlanta, GA 30332 USA.
C3 University System of Georgia; Georgia Institute of Technology
RP Shivers, O (corresponding author), Georgia Inst Technol, Coll Comp, Atlanta, GA 30332 USA.
EM shivers@cc.gatech.edu; dfisher@cc.gatech.edu
CR *AM NAT STAND I IN, 1978, X391978 AM NAT STAND
   [Anonymous], LAMBDA CALCULUS
   [Anonymous], 1992, Compiling with Continuations
   [Anonymous], 1997, The Definition of Standard ML
   [Anonymous], 1951, ANN MATH STUD
   Appel A.W., 1999, Modern Compiler Implementation in Java
   Baader Franz, 1998, TERM REWRITING ALL
   BIAGIONI E, 1997, P 2 ACM SIGPLAN WORK
   Danvy O, 2005, FUND INFORM, V66, P397
   DEREMER F, 1982, ACM T PROGR LANG SYS, V4, P615, DOI 10.1145/69622.357187
   FILINKSI A, 1989, 8911 DIKU U COP COMP
   FISHER CN, 1988, CRAFTING COMPILER
   JOHNSON SC, 1979, CSTR32 AT T BELL LAB
   KELSEY R, 1989, P 16 ANN ACM S PRINC
   KELSEY RA, 1989, 702 YAL U DEP COMP S
   KRANZ D, 1986, SIGPLAN NOTICES, V21, P219, DOI 10.1145/13310.13333
   KRANZ D, 1988, 632 YAL U DEP COMP S
   MILNER R, 1978, J COMPUT SYST SCI, V17, P348, DOI 10.1016/0022-0000(78)90014-4
   MORRISETT G, 1986, 1996 SIGPLAN C PROGR, P181
   PENNELLO TJ, 1986, P SIGPLAN 86 S COMP, P145
   Ramsey N, 2000, ACM SIGPLAN NOTICES, V35, P285, DOI 10.1145/358438.349337
   SHAO Z, 1994, P 1994 ACM C LISP FU, P185
   SHIVERS O, 1988, P SIGPLAN 88 C PROGR
   SHIVERS O, 2003, SRFI 32 SORT LIB SCH
   Shivers O., 1991, CMUCS91145
   STEELE GL, 1978, 474 MIT AI LAB
   WAND W, 1987, P 2 S LOG COMP SCI I, P37
NR 27
TC 4
Z9 5
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD JUL-SEP
PY 2006
VL 16
BP 547
EP 582
DI 10.1017/S0956796806006009
PN 4-5
PG 36
WC Computer Science, Software Engineering
WE Conference Proceedings Citation Index - Science (CPCI-S); Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 079KJ
UT WOS:000240174500006
OA Bronze
DA 2024-07-18
ER

PT J
AU Hosoya, H
   Pierce, BC
AF Hosoya, H
   Pierce, BC
TI Regular expression pattern matching for XML
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB We propose regular expression pattern matching as a core feature of programming languages for manipulating XML. We extend conventional pattern-matching facilities (as in ML) with regular expression operators such as repetition (*), alternation (I), etc., that can match arbitrarily long sequences of subtrees, allowing a compact pattern to extract data from the middle of a complex sequence. We then show how to check standard notions of exhaustiveness and redundancy for these patterns. Regular expression patterns are intended to be used in languages with type systems based on regular expression types. To avoid excessive type annotations, we develop a type inference scheme that propagates type constraints to pattern variables from the type of input values. The type inference algorithm translates types and patterns into regular tree automata, and then works in terms of standard closure operations (union, intersection, and difference) on tree automata. The main technical challenge is dealing with the interaction of repetition and alternation patterns with the first-match policy, which gives rise to Subtleties concerning both the termination and precision of the analysis. We address these issues by introducing a data structure representing these closure operations lazily.
C1 Kyoto Univ, Math Sci Res Inst, Sakyo Ku, Kyoto 6068502, Japan.
   Univ Penn, Dept Comp & Informat Sci, Philadelphia, PA 19104 USA.
C3 Kyoto University; University of Pennsylvania
RP Kyoto Univ, Math Sci Res Inst, Sakyo Ku, Kyoto 6068502, Japan.
EM hahosoya@kurims.kyoto-u.ac.jp; bcpierce@cis.upenn.edu
CR Abiteboul S., 1997, International Journal on Digital Libraries, V1, P68, DOI 10.1007/s007990050001
   AIKEN A, 1992, PROCEEDINGS OF THE SEVENTH ANNUAL IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P329, DOI 10.1109/LICS.1992.185545
   [Anonymous], 2000, EXTENSIBLE MARKUP LA
   BURSTALL R, 1980, P 1980 LISP C STANF, P136
   Cardelli L., 2000, Conference Record of POPL'00: 27th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages. Papers Presented at the Symposium, P365, DOI 10.1145/325694.325742
   CARDELLI L, 2000, QUERY LANGUAGE SEMIS
   Clark J., 2001, RELAX NG
   Clark J., 1999, XML Path Language
   Clark James, 1999, Xsl transformations (xslt)
   CLUET S, 1998, INT WORKSH WEB DAT W
   Deutsch A., 1998, XML QL QUERY LANGUAG
   FALLSIDE DC, 2001, XML SCHEMA PRIMER W3
   FANKHAUSER P, 2001, XQUERY 1 0 FORMAL SE
   GAPEYEV V, 2000, P INT C FUNCT PROGR, P221
   Gilleron R, 1999, INFORM COMPUT, V149, P1, DOI 10.1006/inco.1998.2747
   Hopcroft J.E., 1979, Introduction to Automata Theory, Languages, and Computation
   HOSOYA H, 2000, P INT C FUNCT PROGR, P11
   HOSOYA H, 2000, LECT NOTES COMPUTER, V1997, P226
   JONES SLP, 1993, P UK JOINT FRAM INF
   KLARLUND N, 2000, DSD SCHEMA LANGUAGE
   LEROY X, 1996, OBJECTIVE CAML SYSTE
   Milner R., 1990, The Definition of Standard ML
   Milo T., 1999, Proceedings of the Eighteenth ACM SIGMOD-SIGACT-SIGART Symposium on Principles of Database Systems, P215, DOI 10.1145/303976.303998
   Milo Tova., 2000, Proc. 19th ACM Symposium on Principles of Database Systems (PODS'2000), P11, DOI DOI 10.1145/335168.335171
   Murata M, 1997, LECT NOTES COMPUT SC, V1293, P153
   Neumann A, 1998, LECT NOTES COMPUT SC, V1530, P134
   NEVEN F, 2000, P 19 S PRINC DAT SYS, P145
   PAPAKONSTANTINO.Y, 2000, P 19 ACM SIGMOD SIGA, P35
   PUEL L, 1990, 1990 ACM C LISP FUNC, P272
   QUEINNEC C, 1990, LECT NOTES COMPUT SC, V456, P340
   SEIDL H, 1990, SIAM J COMPUT, V19, P424, DOI 10.1137/0219027
   SLUTZKI G, 1985, THEOR COMPUT SCI, V41, P305, DOI 10.1016/0304-3975(85)90077-5
   SPERBERGMCQUEEN CM, GENTLE INTRO SGML
   Wright A. K., 1994, Proceedings of the 1994 ACM Conference on LISP and Functional Programming, P250, DOI 10.1145/182409.182485
   [No title captured]
NR 35
TC 35
Z9 36
U1 1
U2 2
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD NOV
PY 2003
VL 13
BP 961
EP 1004
DI 10.1017/S0956796802004410
PN 6
PG 44
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 754AZ
UT WOS:000187281700001
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Campora, JP
   Chen, S
   Erwig, M
   Walkingshaw, E
AF Campora, John Peter
   Chen, Sheng
   Erwig, Martin
   Walkingshaw, Eric
TI Migrating gradual types
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID REFINEMENTS; INFERENCE; LOGIC
AB Gradual typing allows programs to enjoy the benefits of both static typing and dynamic typing. While it is often desirable to migrate a program from more dynamically typed to more statically typed or vice versa, gradual typing itself does not provide a way to facilitate this migration. This places the burden on programmers who have to manually add or remove type annotations. Besides the general challenge of adding type annotations to dynamically typed code, there are subtle interactions between these annotations in gradually typed code that exacerbate the situation. For example, to migrate a program to be as static as possible, in general, all possible combinations of adding or removing type annotations from parameters must be tried out and compared. In this paper, we address this problem by developing migrational typing, which efficiently types all possible ways of replacing dynamic types with fully static types for a gradually typed program. The typing result supports automatically migrating a program to be as static as possible or introducing the least number of dynamic types necessary to remove a type error. The approach can be extended to support user-defined criteria about which annotations to modify. We have implemented migrational typing and evaluated it on large programs. The results show that migrational typing scales linearly with the size of the program and takes only 2-4 times longer than plain gradual typing.
C1 [Campora, John Peter; Chen, Sheng] Univ Louisiana Lafayette, Lafayette, LA 70504 USA.
   [Erwig, Martin; Walkingshaw, Eric] Oregon State Univ, Corvallis, OR 97331 USA.
C3 University of Louisiana Lafayette; Oregon State University
RP Campora, JP (corresponding author), Univ Louisiana Lafayette, Lafayette, LA 70504 USA.
EM petecampora@gmail.com; chen@louisiana.edu; erwig@oregonstate.edu;
   walkiner@oregonstate.edu
FU National Science Foundation [CCF-1750886]
FX We thank the anonymous POPL and JFP reviewers and Jens Palsberg for
   their constructive feedback, which have significantly improved both the
   content and presentations of this paper. This work was partially
   supported by the National Science Foundation under the grant
   CCF-1750886.
CR Ahmed A, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110283
   Ahmed A, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P201, DOI 10.1145/1926385.1926409
   AKERS SB, 1978, IEEE T COMPUT, V27, P509, DOI 10.1109/TC.1978.1675141
   Allende E, 2014, ACM SIGPLAN NOTICES, V49, P251, DOI [10.1145/2660193.2660222, 10.1145/2714064.2660222]
   [Anonymous], 2016, Feature-Oriented Software Product Lines
   Bayne M, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P521, DOI 10.1145/1985793.1985864
   BRYANT RE, 1992, COMPUT SURV, V24, P293, DOI 10.1145/136035.136043
   Campbell JessicaLynn., 2020, Proceedings_of_the_38th_ACM_International_Conference_on_Design_of Communication, P1
   Campora J., 2022, MIGRATING GRADUAL TY
   Campora JP, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158103
   Campos JR, 2019, PHARM DEV TECHNOL, V24, P616, DOI 10.1080/10837450.2018.1549075
   Castagna G, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110285
   Castagna G, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290329
   Chaudhuri A, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133872
   Chen S, 2016, EUROPEAN C OBJECT OR, V56
   Chen S., 2019, 3 SUMMIT ADV PROGRAM, V136, P1
   Chen S, 2016, ACM SIGPLAN NOTICES, V51, P416, DOI 10.1145/2914770.2837665
   Chen S, 2014, LECT NOTES COMPUT SC, V8475, P35, DOI 10.1007/978-3-319-07151-0_3
   Chen S, 2014, ACM T PROGR LANG SYS, V36, DOI 10.1145/2518190
   Chen S, 2014, ACM SIGPLAN NOTICES, V49, P583, DOI 10.1145/2535838.2535863
   Chen S, 2012, ACM SIGPLAN NOTICES, V47, P29, DOI 10.1145/2398856.2364535
   Chugh R, 2012, ACM SIGPLAN NOTICES, V47, P231, DOI 10.1145/2103621.2103686
   Cimini M, 2017, ACM SIGPLAN NOTICES, V52, P789, DOI 10.1145/3093333.3009863
   Cimini M, 2016, ACM SIGPLAN NOTICES, V51, P443, DOI 10.1145/2914770.2837632
   Danner N, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P140, DOI 10.1145/2784731.2784749
   Erwig M, 2011, ACM T SOFTW ENG METH, V21, DOI 10.1145/2063239.2063245
   Erwig Martin, 2013, LNCS, V7680, P55
   Garcia R, 2016, ACM SIGPLAN NOTICES, V51, P429, DOI 10.1145/2914770.2837670
   Garcia R, 2015, ACM SIGPLAN NOTICES, V50, P303, DOI [10.1145/2676726.2676992, 10.1145/2775051.2676992]
   Guha A., 2007, Proceedings of the 2007 symposium on Dynamic languages, DLS '07, P29, DOI [10.1145/1297081.1297089, DOI 10.1145/1297081.1297089]
   Guha A, 2011, LECT NOTES COMPUT SC, V6602, P256, DOI 10.1007/978-3-642-19718-5_14
   Henglein F., 1995, Conference Record of FPCA '95. SIGPLAN-SIGARCH-WG2.8. Conference on Functional Programming Languages and Computer Architecture, P192, DOI 10.1145/224164.224203
   Nguyen HV, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P907, DOI 10.1145/2568225.2568300
   Igarashi A, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110282
   Jafery KA, 2017, ACM SIGPLAN NOTICES, V52, P804, DOI 10.1145/3093333.3009865
   Kazerounian M, 2020, DLS '2020: PROCEEDINGS OF THE 16TH ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON DYNAMIC LANGUAGES, P112, DOI 10.1145/3426422.3426985
   Kazerounian M, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3485483
   Kuhlenschmidt A, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P517, DOI 10.1145/3314221.3314627
   Lehmann N, 2017, ACM SIGPLAN NOTICES, V52, P775, DOI 10.1145/3093333.3009856
   Loncaric C, 2016, ACM SIGPLAN NOTICES, V51, P781, DOI 10.1145/3022671.2983994
   Marceau G, 2011, SIGCSE 11: PROCEEDINGS OF THE 42ND ACM TECHNICAL SYMPOSIUM ON COMPUTER SCIENCE EDUCATION, P499
   Marceau Guillaume., 2011, Proceedings of the 10th SIGPLAN symposium on New ideas, new paradigms, and reflections on programming and software, ONWARD '11, P3
   Meng Meng, 2017, INT WORK VAR MOD SOF, P28
   Migeed Z, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371097
   Miyazaki Y, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290331
   Munson J.P., 2016, Journal of Computing Sciences in Colleges, V31, P53
   Neocleous C, 2002, LECT NOTES ARTIF INT, V2308, P300
   New MS, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371114
   Pavlinovic Z, 2014, ACM SIGPLAN NOTICES, V49, P525, DOI [10.1145/2714064.2660230, 10.1145/2660193.2660230]
   Pearce D.J., 2013, P WORKSH FORM TECHN, P7
   Phipps-Costin L., 2021, PROC ACM PROGRAM LAN, V5, P1
   Rastogi A, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P481
   ROBINSON JA, 1965, J ACM, V12, P23, DOI 10.1145/321250.321253
   Sergey I, 2012, LECT NOTES COMPUT SC, V7211, P579, DOI 10.1007/978-3-642-28869-2_29
   Serrano A, 2016, LECT NOTES COMPUT SC, V9632, P672, DOI 10.1007/978-3-662-49498-1_26
   Siek Jeremy G., 2016, A List of Successes that can Change the World. Essays Dedicated to Philip Wadler on the Occasion of his 60th Birthday. LNCS 9600, P388, DOI 10.1007/978-3-319-30936-1_21
   Siek J.G., 2008, Proceedings of the 2008 symposium on Dynamic languages, P7, DOI DOI 10.1145/1408681.1408688
   Siek J, 2007, LECT NOTES COMPUT SC, V4609, P2
   Siek Jeremy, 2006, WORKSHOP SCHEME FUNC, P81
   Siek Jeremy G., 2015, LIPICS LEIBNIZ INT P, V32, P274, DOI 10.4230/LIPIcs.SNAPL.2015.274
   Smeltzer K, 2017, PROCEEDINGS OF THE 8TH ACM SIGPLAN INTERNATIONAL WORKSHOP ON FEATURE-ORIENTED SOFTWARE DEVELOPMENT (FOSD'17), P31, DOI 10.1145/3141848.3141852
   Stanciulescu S, 2016, PROC IEEE INT CONF S, P323, DOI 10.1109/ICSME.2016.88
   Takikawa A, 2016, ACM SIGPLAN NOTICES, V51, P456, DOI 10.1145/2914770.2837630
   Tansey W, 2008, OOPSLA 2008 NASHVILLE, CONFERENCE PROCEEDINGS, P295
   Thüm T, 2014, ACM COMPUT SURV, V47, DOI 10.1145/2580950
   Tobin-Hochstadt Sam., 2006, Proc. DLS, P964, DOI DOI 10.1145/1176617.1176755
   Tobin-Hochstadt Sam, 2017, SNAPL, V17, P1, DOI [DOI 10.4230/LIPICS.SNAPL.2017.17, 10.4230/LIPIcs.SNAPL.2017.17]
   Toro M, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290330
   Toro M, 2017, LECT NOTES COMPUT SC, V10422, P382, DOI 10.1007/978-3-319-66706-5_19
   van Keeken P., 2006, THESIS UTRECHT U
   Vytiniotis D, 2012, ACM SIGPLAN NOTICES, V47, P341, DOI 10.1145/2398856.2364554
   Vytiniotis D, 2011, J FUNCT PROGRAM, V21, P333, DOI 10.1017/S0956796811000098
   Wadler P, 2009, LECT NOTES COMPUT SC, V5502, P1, DOI 10.1007/978-3-642-00590-9_1
   Walkingshaw E, 2015, ACM SIGPLAN NOTICES, V50, P29, DOI 10.1145/2658761.2658766
   Walkingshaw Eric, 2014, ACM SIGPLAN S NEW ID, P213
   Wei Jiayi, 2020, 8 INT C LEARNING REP
   Williams J., 2018, PROC ACM PROGRAM LAN, V2, P1
NR 77
TC 0
Z9 1
U1 0
U2 1
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD OCT 6
PY 2022
VL 32
AR e14
DI 10.1017/S0956796822000089
PG 60
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 5C3AV
UT WOS:000864136900001
OA hybrid
DA 2024-07-18
ER

PT J
AU Rompf, T
   Amin, N
AF Rompf, Tiark
   Amin, Nada
TI A SQL to C compiler in 500 lines of code
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB We present the design and implementation of a SQL query processor that outperforms existing database systems and is written in just about 500 lines of Scala code - a convincing case study that high-level functional programming can handily beat C for systems-level programming where the last drop of performance matters. The key enabler is a shift in perspective toward generative programming The core of the query engine is an interpreter for relational-algebra operations, written in Scala. Using the open-source lightweight modular staging framework, we turn this interpreter into a query compiler with very low effort. To do so, we capitalize on an old and widely known result from partial evaluation: the first Futamura projection, which states that a process that can specialize an interpreter to any given input program is equivalent to a compiler. In this context, we discuss lightweight modular staging programming patterns such as mixed-stage data structures (e.g., data records with static schema and dynamic field components) and techniques to generate low-level C code, including specialized data structures and data loading primitives.
C1 [Rompf, Tiark] Purdue Univ, W Lafayette, IN 47907 USA.
   [Amin, Nada] Univ Cambridge, Comp Lab, William Gates Bldg,15 JJ Thomson Ave, Cambridge CB3 0FD, England.
C3 Purdue University System; Purdue University; University of Cambridge
RP Rompf, T (corresponding author), Purdue Univ, W Lafayette, IN 47907 USA.
EM tiark@purdue.edu; na482@cl.cam.ac.uk
OI Rompf, Tiark/0000-0002-2068-3238; Amin, Nada/0000-0002-0830-7248
FU ERC [321217]; NSF [1553471, 1564207]; DOE [DE-SC0018050]; European
   Research Council (ERC) [321217] Funding Source: European Research
   Council (ERC)
FX We thank Gregory Essertel and Ruby Tahboub (Purdue University) for
   contributing the experiments reported in Section 6 and for scaling up
   the approach to a realistic SQL engine as summarized in Section 7. Parts
   of this research were supported by ERC grant 321217, NSF awards 1553471
   and 1564207, and DOE award DE-SC0018050.
CR Ackermann S., 2012, P BIGDATA
   Amin N., 2018, PACMPL, V2
   [Anonymous], THESIS
   [Anonymous], PACT
   [Anonymous], ICDE
   [Anonymous], 2015, SIGMOD
   [Anonymous], 2013, SIGMOD
   [Anonymous], 2015, CIDR
   [Anonymous], 2006, ICDE
   [Anonymous], 1993, Partial Evaluation and Automatic Program Generation
   [Anonymous], HASK S
   [Anonymous], PVLDB
   Astrahan M. M., 1976, ACM Transactions on Database Systems, V1, P97, DOI 10.1145/320455.320457
   Axelsson E., 2011, IFL 10
   Beckmann O., 2003, LECT NOTES COMPUTER, V3016
   Boncz P., 2006, SIGMOD
   Bondorf A., 1990, THESIS
   Brown K. J., 2016, CGO
   Calcagno C., 2003, GPCE
   Catanzaro B., 2011, PPOPP
   CHAMBERLIN DD, 1981, COMMUN ACM, V24, P632, DOI 10.1145/358769.358784
   Chiba T., 2015, RT0968
   Cohen A, 2006, SCI COMPUT PROGRAM, V62, P25, DOI 10.1016/j.scico.2005.10.013
   Consel C., 1993, ACM T PROGRAM LANG S, V15
   Consel C., 1993, POPL
   Crotty A., 2015, PVLDB, V8
   DeVito Z., 2013, PLDI
   DeVito Z., 2014, PLDI
   Essertel G. M., 2018, OSDI
   Futamura Y., 1971, T I ELECT COMMUN ENG, V54
   Gedik B., 2008, SIGMOD
   GRAEFE G, 1994, IEEE T KNOWL DATA EN, V6, P120, DOI 10.1109/69.273032
   Graefe Goetz., 1993, ICDE
   Grant B, 2000, THEOR COMPUT SCI, V248, P147, DOI 10.1016/S0304-3975(00)00051-7
   Hatcliff J., 1997, MATH STRUCT COMPUT S, V7
   Isard M., 2007, EUROSYS
   Jonnalagedda M., 2014, OOPSLA
   Jorring U., 1986, POPL
   Kiselyov O., 2004, EMSOFT
   Klimov A. V., 2009, ERSH MEM C
   Klonatos Y., 2014, VLDB, V7
   Lawall J. L., 1997, LECT NOTES COMPUTER, V1281
   Lee H. J., 2011, IEEE MICRO, V31
   McDonell Trevor L., 2013, ICFP
   Mehta M., 1995, SIGMOD
   Mogensen Torben a., 1988, PARTIAL EVALUATION M
   Moldovan D., 2019, SysML
   Odersky M, 2014, COMMUN ACM, V57, P76, DOI 10.1145/2591013
   Ofenbeck G., 2017, GPCE
   Reynolds J. C., 1998, HIGHER ORDER SYMB CO, V11
   Reynolds J. C., 1972, P ACM ANN C, V2
   Rompf T., 2016, LECT NOTES COMPUTER, V9600
   Rompf T., 2015, ICFP
   Rompf T., 2014, PLDI
   Rompf T., 2016, SCAL S
   Rompf T., 2011, IFIP WORK C DOM SPEC, V66
   Rompf T., 2012, HIGHER ORDER S COMPU, V25
   Rompf T., 2015, SNAPL
   Rompf T, 2012, COMMUN ACM, V55, P121, DOI 10.1145/2184319.2184345
   Rompf Tiark., 2013, POPL
   Rompf Tiark., 2010, GPCE
   Schultz U. P., 2003, ACM T PROGRAM LANG S, V25
   Shaikhha Amir., 2016, SIGMOD
   Shali A., 2011, OOPSLA
   Sperber M., 1996, PLDI
   Stonebraker M., 2007, PVLDB
   Stonebraker Michael., 2005, ICDE
   Sujeeth A. K., 2013, GPCE
   Sujeeth Arvind K., 2013, ECOOP
   Svenningsson J., 2012, TRENDS FUNCTIONAL PR
   Taha W, 2000, THEOR COMPUT SCI, V248, P211, DOI 10.1016/S0304-3975(00)00053-0
   Tahboub R. Y., 2016, SIGSPATIAL
   Tahboub R. Y., 2018, SIGMOD ACM
   The Transaction Processing Council, 2002, TPC H REV 2
   Thiemann P., 1999, TECHNICAL REPORT
   Thiemann Peter, 2013, PEPM
   Tobin-Hochstadt S., 2011, PLDI
   Zukowski M., 2005, IEEE DATA ENG B, V28
NR 78
TC 4
Z9 4
U1 0
U2 3
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD JUN 3
PY 2019
VL 29
AR e9
DI 10.1017/S0956796819000054
PG 31
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA IB4LW
UT WOS:000470244500001
DA 2024-07-18
ER

PT J
AU Dagand, PE
   McBride, C
AF Dagand, Pierre-Evariste
   McBride, Conor
TI Transporting functions across ornaments
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB Programming with dependent types is a blessing and a curse. It is a blessing to be able to bake invariants into the definition of datatypes: We can finally write correct-by-construction software. However, this extreme accuracy is also a curse: A datatype is the combination of a structuring medium together with a special purpose logic. These domain-specific logics hamper any attempt to reuse code across similarly structured data. In this paper, we capitalise on the structural invariants of datatypes. To do so, we first adapt the notion of ornament to our universe of inductive families. We then show how code reuse can be achieved by ornamenting functions. Using these functional ornaments, we capture the relationship between functions such as the addition of natural numbers and the concatenation of lists. With this knowledge, we demonstrate how the implementation of the former informs the implementation of the latter: The users can ask the definition of addition to be lifted to lists and they will only be asked the details necessary to carry on adding lists rather than numbers. Our presentation is formalised in the type theory with a universe of datatypes and all our constructions have been implemented as generic programs, requiring no extension to the type theory.
C1 [Dagand, Pierre-Evariste; McBride, Conor] Inria Rocquencourt, Le Chesnay, France.
RP Dagand, PE (corresponding author), Inria Rocquencourt, Le Chesnay, France.
EM pierre-evariste.dagand@inria.fr; conor@cis.strath.ac.uk
OI McBride, Conor/0000-0003-1487-0886
FU Engineering and Physical Sciences Research Council [EP/G034699/1]; EPSRC
   [EP/G034699/1] Funding Source: UKRI
FX We owe many thanks to the ICFP and JFP reviewers, their comments having
   significantly improved this paper. We are also very grateful to
   Guillaume Allais, Stevan Andjelkovic, and Peter Hancock for their
   meticulous reviews of this paper. We shall also thank Edwin Brady for
   suggesting the study of lookup functions, and Andrea Vezzosi for
   spotting an issue in our definition of reornaments. Finally, this paper
   would have remained a draft without the help and encouragement of Jose
   Pedro Magalhaes. The authors are supported by the Engineering and
   Physical Sciences Research Council Grant EP/G034699/1.
CR Atkey R, 2012, LOG METH COMPUT SCI, V8, DOI [10.2168/LMCS-8(2:09)2012, 10.2168/LMCS-8 (2:09)2012]
   Benton N, 2012, J AUTOM REASONING, V49, P141, DOI 10.1007/s10817-011-9219-0
   Bernardy JP, 2013, ACM SIGPLAN NOTICES, V48, P61, DOI 10.1145/2544174.2500577
   Bernardy JP, 2011, LECT NOTES COMPUT SC, V6604, P108, DOI 10.1007/978-3-642-19805-2_8
   Bird Richard, 1997, Algebra of Programming
   Brady E., 2003, TYPES PROOFS PROGRAM, DOI [10.1007/978-3-540-24849-18, DOI 10.1007/978-3-540-24849-18]
   Brady EC, 2010, ACM SIGPLAN NOTICES, V45, P297, DOI 10.1145/1932681.1863587
   Chapman J, 2010, ACM SIGPLAN NOTICES, V45, P3, DOI 10.1145/1932681.1863547
   Dagand P., 2013, Ph.D. thesis
   Dagand PÉ, 2013, IEEE S LOG, P530, DOI 10.1109/LICS.2013.60
   Dagand PE, 2012, ACM SIGPLAN NOTICES, V47, P103, DOI 10.1145/2398856.2364544
   Dagand Pierre-Evariste., 2013, JOURNEES FRANCOPHONE
   Dybjer P., 1994, Formal Aspects of Computing, V6, P440, DOI 10.1007/BF01211308
   FREEMAN T, 1991, P ACM SIGPLAN C PROG, P268, DOI DOI 10.1145/113445.113468
   Fumex C., 2012, THESIS U STRATHCLYDE
   Gonthier Georges, 2008, RR6455 INRIA
   Hermida C, 1998, INFORM COMPUT, V145, P107, DOI 10.1006/inco.1998.2725
   Hinze Ralf, 2003, TR20031901 CORN U
   HOFMANN M, 1994, IEEE S LOG, P208, DOI 10.1109/LICS.1994.316071
   Ko HS, 2011, WGP 11: PROCEEDINGS OF THE 2011 ACM SIGPLAN WORKSHOP ON GENERIC PROGRAMMING, P13
   Lindblad F., 2004, Types for Proofs and Programs. International Workshop, TYPES 2004. Revised Selected Papers (Lecture Notes in Computer Science Vol. 3839), P154
   McBride C, 2004, J FUNCT PROGRAM, V14, P69, DOI 10.1017/S0956796803004829
   McBride C., 2002, Types for Proofs and Programs. International Workshop, TYPES 2000. Selected Papers (Lecture Notes in Computer Science Vol.2277), P197
   McBride C., 2004, P INT WORKSH TYP PRO, P186, DOI [10.1007/1161799012, DOI 10.1007/1161799012]
   McBride C., J FUNCT PRO IN PRESS
   McBride C., 1999, THESIS U EDINBURGH E
   Morris P, 2009, INT J FOUND COMPUT S, V20, P83, DOI 10.1142/S0129054109006462
   Paulin-Mohring C., 1989, THESIS U PARIS 7 FRA
   Schrijvers T, 2009, ACM SIGPLAN NOTICES, V44, P341, DOI 10.1145/1631687.1596599
   Strub PY, 2010, LECT NOTES COMPUT SC, V6247, P529, DOI 10.1007/978-3-642-15205-4_40
   Swamy N, 2011, ACM SIGPLAN NOTICES, V46, P266, DOI 10.1145/2034574.2034811
   Wadler P., 1989, FPCA 89 P 4 INT C FU, P347
NR 32
TC 10
Z9 13
U1 0
U2 1
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD MAY
PY 2014
VL 24
IS 2-3
BP 316
EP 383
DI 10.1017/S0956796814000069
PG 68
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AM0QJ
UT WOS:000339550500006
OA Green Accepted, Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Borgström, J
   Gordon, AD
   Pucella, R
AF Borgstroem, Johannes
   Gordon, Andrew D.
   Pucella, Riccardo
TI Roles, stacks, histories: A triple for Hoare
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID ACCESS-CONTROL; TRUST-MANAGEMENT; INSPECTION; LOGIC
AB Behavioral type and effect systems regulate properties such as adherence to object and communication protocols, dynamic security policies, avoidance of race conditions, and many others. Typically, each system is based on some specific syntax of constraints, and is checked with an ad hoc solver. Instead, we advocate types refined with first-order logic formulas as a basis for behavioral type systems, and general purpose automated theorem provers as an effective means of checking programs. To illustrate this approach, we define a triple of security-related type systems: for role-based access control, for stack inspection, and for history-based access control. The three are all instances of a refined state monad. Our semantics allows a precise comparison of the similarities and differences of these mechanisms. In our examples, the benefit of behavioral type-checking is to rule out the possibility of unexpected security exceptions, a common problem with code-based access control.
C1 [Borgstroem, Johannes; Gordon, Andrew D.] Microsoft Res, Cambridge, England.
   [Pucella, Riccardo] Northeastern Univ, Coll Comp & Informat Sci, Boston, MA 02115 USA.
C3 Microsoft; Northeastern University
RP Borgström, J (corresponding author), Microsoft Res, Cambridge, England.
EM adg@microsoft.com
RI Borgström, Johannes/J-4378-2012
CR ABADI M, 1993, ACM T PROGR LANG SYS, V15, P706, DOI 10.1145/155183.155225
   ABADI M, 2003, NETW DISTR SYST SEC, P107
   ABADI M, 2006, ICFP, P263
   [Anonymous], 2006, YICES SMT SOLVER
   [Anonymous], 1992, 15 NAT COMP SEC C
   [Anonymous], 1992, Semantics of programming languages: structures and techniques
   Aspinall D, 2001, THEOR COMPUT SCI, V266, P273, DOI 10.1016/S0304-3975(00)00175-4
   Atkey R, 2009, J FUNCT PROGRAM, V19, P335, DOI 10.1017/S095679680900728X
   Banerjee A, 2005, LECT NOTES COMPUT SC, V3362, P27
   Banerjee A, 2005, J FUNCT PROGRAM, V15, P131, DOI 10.1017/S0956796804005453
   Becker MY, 2007, LECT NOTES COMPUT SC, V4734, P203
   Becker MY, 2004, P IEEE CSFW, P139, DOI 10.1109/CSFW.2004.1310738
   BENGTSON J, 2008, P COMP SEC FDN S 200
   Besson F, 2004, P IEEE CSFW, P61, DOI 10.1109/CSFW.2004.1310732
   Borgstrom J., 2009, MSRTR200997
   CARDELLI L, 1986, LECT NOTES COMPUTER, V306, P45
   Constable R L, 1986, Implementing mathematics with the Nuprl proof development system
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   DeLine Robert., 2001, Proceedings of the ACM SIGPLAN 2001 conference on Programming language design and implementation, P59, DOI DOI 10.1145/381694.378811
   Detlefs D, 2005, J ACM, V52, P365, DOI 10.1145/1066100.1066102
   Filliatre J.-C., 1999, Types for Proofs and Programs. International Workshop, TYPES'98 (Lecture Notes in Computer Science Vol.1657), P78
   FILLIATRE JC, 2004, ICFEM, P15
   Flanagan C, 2006, ACM SIGPLAN NOTICES, V41, P245, DOI 10.1145/1111320.1111059
   Flanagan C, 1999, LECT NOTES COMPUT SC, V1576, P91
   Fournet C, 2005, LECT NOTES COMPUT SC, V3444, P141
   Fournet C, 2003, ACM T PROGR LANG SYS, V25, P360, DOI 10.1145/641909.641912
   Fournet C, 2007, 20TH IEEE COMPUTER SECURITY FOUNDATIONS SYMPOSIUM (CSFS20), PROCEEDINGS, P31, DOI 10.1109/CSF.2007.7
   FREEMAN T, 1991, P ACM SIGPLAN C PROG, P268, DOI DOI 10.1145/113445.113468
   GIFFORD DK, 1986, ACM C LISP FUNCT PRO, P28
   GONG L., 1999, INSIDE JAVA 2 PLATFO
   Gordon A. D., 2003, Journal of Computer Security, V11, P451
   Gordon A.D., 2009, MSRTR2009147
   Gronski Jessica, 2006, SCHEM FUNCT PROGR WO, P93
   Hardy N., 1988, Operating Systems Review, V22, P36, DOI 10.1145/54289.871709
   Jia L., 2008, MSCIS0810 U PENNS
   Knowles K, 2007, LECT NOTES COMPUT SC, V4421, P505
   Li NH, 2002, P IEEE S SECUR PRIV, P114, DOI 10.1109/SECPRI.2002.1004366
   Maffeis S, 2008, LECT NOTES COMPUT SC, V5283, P563
   MOGGI E, 1991, INFORM COMPUT, V93, P55, DOI 10.1016/0890-5401(91)90052-4
   NANEVSKI A, 2006, ICFP 2006, P62
   Nanevski A, 2008, ICFP'08: PROCEEDINGS OF THE 2008 SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P229
   Nordstrom B., 1990, PROGRAMMING MARTINLO
   Pierce B., 1996, Mathematical Structures in Computer Science, V6, P409
   Pistoia M, 2007, IBM SYST J, V46, P265, DOI 10.1147/sj.462.0265
   Pistoia M, 2007, P IEEE S SECUR PRIV, P149, DOI 10.1109/SP.2007.10
   PLOTKIN GD, 1985, DENOTATIONAL S UNPUB
   Pottier F, 2005, ACM T PROGR LANG SYS, V27, P344, DOI 10.1145/1057387.1057392
   RANISE S., 2006, The SMT-LIB standard: Version 1.2
   Régis-Gianas Y, 2008, LECT NOTES COMPUT SC, V5133, P305
   Rondon PM, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P159, DOI 10.1145/1375581.1375602
   Rushby J, 1998, IEEE T SOFTWARE ENG, V24, P709, DOI 10.1109/32.713327
   Sabry A., 1993, LISP and Symbolic Computation, V6, P289, DOI 10.1007/BF01019462
   Sandhu RS, 1996, COMPUTER, V29, P38, DOI 10.1109/2.485845
   STROM RE, 1986, IEEE T SOFTWARE ENG, V12, P157, DOI 10.1109/TSE.1986.6312929
   Wadler P., 1992, MATH STRUCTURES COMP, V2, P461
   Wallach DS, 2000, ACM T SOFTW ENG METH, V9, P341, DOI 10.1145/363516.363520
   Xi Hongwei., 1999, Proceedings of the 26th ACM SIGPLAN-SIGACT symposium on Principles of programming languages, P214
NR 57
TC 4
Z9 4
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD MAR
PY 2011
VL 21
BP 159
EP 207
DI 10.1017/S0956796810000134
PN 2
PG 49
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 748GS
UT WOS:000289378800004
OA Bronze
DA 2024-07-18
ER

PT J
AU Arbiser, A
   Miquel, A
   Ríos, A
AF Arbiser, Ariel
   Miquel, Alexandre
   Rios, Alejandro
TI The λ-calculus with constructors: Syntax, confluence and separation
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB We present an extension of the lambda(eta)-calculus with a case construct that propagates through functions like a head linear Substitution, and show that this construction permits to recover the expressiveness of ML-style pattern matching. We then prove that this system enjoys the Church-Rosser property using a semi-automatic 'divide and conquer' technique by which we determine all the pairs of commuting subsystems of the formalism (considering all the possible combinations of the nine primitive reduction rules). Finally, we prove a separation theorem similar to Bohm's theorem for the whole formalism.
C1 [Arbiser, Ariel; Rios, Alejandro] Univ Buenos Aires, Dept Computac, Fac Ciencias Exactas & Nat, RA-1053 Buenos Aires, DF, Argentina.
   [Miquel, Alexandre] Univ Paris 07, F-75251 Paris 05, France.
   [Miquel, Alexandre] PPS, F-75251 Paris 05, France.
C3 University of Buenos Aires; Universite Paris Cite
RP Arbiser, A (corresponding author), Univ Buenos Aires, Dept Computac, Fac Ciencias Exactas & Nat, RA-1053 Buenos Aires, DF, Argentina.
EM arbiser@dc.uba.ar; alexandre.miquel@pps.jussieu.fr; rios@dc.uba.ar
CR [Anonymous], 1951, ANN MATH STUD
   ARBISER A, 2006, LECT NOTES COMPUTER, V4098
   BAADER F, 1999, REWRITING ALL
   Barendregt H.P., 1984, STUDIES LOGIC FDN MA, P103
   Bohm C., 1979, Theoretical Computer Science, V8, P271, DOI 10.1016/0304-3975(79)90014-8
   CERRITO S, 1999, LOGICS COMPUTER SCI, P98
   CIRSTEA H, 1998, 5 INT WORKSH CONSTR
   Girard J.-Y., 2001, Mathematical Structures in Computer Science, V11, P301, DOI 10.1017/S096012950100336X
   HUDAK P, 1992, REPORT PROGRAMMING L
   Jay B, 2006, LECT NOTES COMPUT SC, V3924, P100
   KAHL W, 2003, 16 MCMAST U SOFTW QU
   Leroy Xavier., 2008, The Objective Caml system
   Milner R., 1990, The Definition of Standard ML
   RIOS A, 1993, THESIS U PARIS 7
   TERESE, 2003, CAMBRIDGE TRACTS THE, V55
   van Oostrom V., 1990, IR228 VRIJ U
NR 16
TC 5
Z9 5
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD SEP
PY 2009
VL 19
BP 581
EP 631
DI 10.1017/S0956796809007369
PG 51
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 506GM
UT WOS:000270762600005
OA Bronze
DA 2024-07-18
ER

PT J
AU Matthews, J
   Findler, RB
AF Matthews, Jacob
   Findler, Robert Bruce
TI An operational semantics for Scheme
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article; Proceedings Paper
CT Scheme and Functional Programming Workshop 2005
CY SEP 24, 2005
CL Tallinn, ESTONIA
ID SEQUENTIAL CONTROL
AB This paper presents an operational semantics for the core of Scheme. Our specification improves over the denotational semantics from the Revised(5) Report on Scheme specification in four ways. First, it covers a larger part of the language, specifically eval, quote, dynamic-wind, and the top level. Second, it models multiple values in a way that does not require changes to unrelated parts of the language. Third, it provides a faithful model of Scheme's undefined order of evaluation. Finally, we have implemented our specification in PLT Redex, a domain-specific language for writing operational semantics. The implementation allows others to experiment with our specification and allows us to build a specification test suite, which improves our confidence that our system is a faithful model of Scheme. In addition to a specification of Scheme, this paper contributes three novel modeling techniques for Felleisen Hieb-style rewriting semantics. All three techniques are applicable to a wider range of problems than modeling Scheme, and they combine seamlessly in our model, suggesting that they would scale to complete models of other languages.
C1 [Matthews, Jacob; Findler, Robert Bruce] Univ Chicago, Chicago, IL 60637 USA.
C3 University of Chicago
RP Matthews, J (corresponding author), Univ Chicago, Chicago, IL 60637 USA.
EM jacobm@cs.uchicago.edu; robby@cs.uchicago.edu
RI Findler, Robert/B-7145-2009
CR [Anonymous], J FUNCTIONAL PROGRAM
   CLINGER WD, 1994, SIGPLAN LISP POINTER, V7
   CLINGER WD, 1998, ACM SIGPLAN C PROGR, P66
   Dybvig Kent, 2006, R6RS STATUS REPORT
   Dybvig R.Kent., 2005, CHEZ SCHEME VERSION
   FEELEY M, 2006, GAMBIT C VERSION 4 0
   FELLEISEN M, 1987, THEOR COMPUT SCI, V52, P205, DOI 10.1016/0304-3975(87)90109-5
   FELLEISEN M, 1992, THEOR COMPUT SCI, V103, P235, DOI 10.1016/0304-3975(92)90014-7
   FELLEISEN M, 1988, P C LISP FUNCT PROGR
   Felleisen M., 1987, THESIS INDIANA U
   Felleisen Matthias, 2006, PROGRAMMING LANGUAGE
   FLATT M, 2006, PLTTR20061V352
   FLATT M, 1999, FORMAL SYNTAX SEMANT, V1523, P241
   GASBICHLER M, 2003, WORKSH SCHEM FUNCT P
   *GNU, 2006, MIT GNU SCHEM 7 7 90
   HARPER R, 1996, CMUCS96136R
   HARPER R, 1993, ACM SIGPLAN SIGACT S
   HAYNES CT, 1987, ACM T PROGR LANG SYS, V9, P582, DOI 10.1145/29873.30392
   HERMAN D, 2004, ACM SIGPLAN INT C FU, P16
   Kelsey R, 1998, ACM SIGPLAN NOTICES, V33, P26, DOI 10.1145/290229.290234
   KELSEY R, 2005, SCHEME 48
   LEE DK, 2006, CMUCS06138
   MATTHEWS J, 2007, ACM SIGPLAN SIGACT S
   MATTHEWS J, 2004, P INT C REWR TECHN A
   MATTHEWS J, 2005, WORKSH SCHEM FUNCT P
   MATTHEWS J, 2005, TR200502 U CHIC
   MILLER SG, 2006, SISC SEASONED SCHEME
   MULLER R, 1992, ACM T PROGRAM LANG S, V14
   NEUBAUER M, 2001, ACM SIGPLAN INT C FU
   OLIVA DP, 1995, LISP SYMBOL COMPUT, V8
   *PROJ GNU, 2005, GUIL REF MAN
   RAMSDELL JD, 1992, LISP POINT, V2
   Reppy JohnH., 1999, CONCURRENT PROGRAMMI
   SERRANO M, 2006, BIGLOO PRACTICAL SCH
   SITARAM D, 2003, SCHEM FUNCT PROGR WO
   SUSSMAN GJ, 1975, AIM349 MIT AI LAB
   VANSTRAATEN A, 2002, EXECUTABLE DENOTATIO
   WINKELMANN FL, 2006, CHICKEN PRACTICAL PO
   WRIGHT A, 1994, 160 TR RIC U, P38
   [No title captured]
NR 40
TC 5
Z9 6
U1 0
U2 2
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD JAN
PY 2008
VL 18
BP 47
EP 86
DI 10.1017/S0956796807006478
PN 1
PG 40
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 315CQ
UT WOS:000256855900003
OA Bronze
DA 2024-07-18
ER

PT J
AU Colazzo, D
   Ghelli, G
   Manghi, P
   Sartiani, C
AF Colazzo, Dario
   Ghelli, Giorgio
   Manghi, Paolo
   Sartiani, Carlo
TI Static analysis for path correctness of XML queries
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 9th International Conference on Functional Programming
CY SEP 19-21, 2004
CL Snowbird, UT
SP ACM SIGPLAN
AB A part of a query that will never contribute data to the query answer should be regarded as an error. This principle has been recently accepted into mainstream XML query languages, but was still waiting for a complete treatment. We provide here a precise definition for this class of errors, and define a type system that is sound and complete, in its search for such errors, for a core language, under mild restrictions on the use of recursion in type definitions. In the process, we describe a dichotomy among existential and universal type systems, which is essential to understand some specific features of our type system.
C1 Univ Paris 11, LRI, F-91405 Orsay, France.
   Univ Pisa, Dipartimento Informat, Pisa, Italy.
C3 Universite Paris Saclay; University of Pisa
RP Colazzo, D (corresponding author), Univ Paris 11, LRI, Bat 490, F-91405 Orsay, France.
EM dario.colazzo@lri.fr; ghelli@di.unipi.it; manghi@di.unipi.it;
   sartiani@di.unipi.it
RI Ghelli, Giorgio/C-4775-2012; Sartiani, Carlo/E-9289-2012; Manghi,
   Paolo/D-4727-2017
OI Manghi, Paolo/0000-0001-7291-3210; Sartiani, Carlo/0000-0002-6514-3569;
   Ghelli, Giorgio/0000-0002-0596-6395
CR ABITEBOUL S, 1997, INT J DIGITAL LIBRAR, V1, P1
   Alon N, 2001, IEEE S LOG, P421, DOI 10.1109/LICS.2001.932517
   ALON N, 2001, P 20 ACM SIG SIGM SI
   BENZAKEN V, 2004, P 20 BAS DONN AV BDA
   BENZAKEN V, 2005, LECT NOTES COMPUTER, V3350
   BENZAKEN V, 2003, P 8 ACM SIGPLAN INT, P51
   BOAG S, 2003, XQUERY 1 0 X76 Q1ERY
   BUNEMAN P, 1909, P 5 INT WORKSH DAT P
   CASTAGNA G, 2005, LNCS
   CHAMBERLIN D, 2003, XML QUERY USE CASES
   Colazzo D, 2004, ACM SIGPLAN NOTICES, V39, P126, DOI 10.1145/1016848.1016869
   COLAZZO D, 2005, P WORKSH PROGR LANG
   COLAZZO D, 2002, P 5 INT WORKSH WEB D
   Comon H., 1997, Tree automata techniques and applications
   DRAPER D, 2003, XQUERY 1 0 XPATH 2 0
   Fernandez M., 1997, SIGMOD Record, V26, P4, DOI 10.1145/262762.262763
   FERNANDEZ M, 2001, LECT NOTES COMPUTER, V1973
   GUERRA R, 2005, P WORKSH PROGR LANG
   Hosoya Haruo, 2003, ACM T INTERNET TECHN, V3, DOI DOI 10.1145/767193.767195
   Lee D., 2000, Reasoning about XML schema languages using formal language theory
   Milo Tova., 2000, Proc. 19th ACM Symposium on Principles of Database Systems (PODS'2000), P11, DOI DOI 10.1145/335168.335171
   Schmidt A., 2002, Proceedings of the Twenty-eighth International Conference on Very Large Data Bases, P974
   Simeon Jerome., 2003, Proceedings of the 30th ACM SIGPLAN-SIGACT symposium on Principles of programming languages, P1, DOI [10.1145/604131.604132, DOI 10.1145/604131.604132]
   Tarski A., 1955, PAC J MATH, V5, P285, DOI DOI 10.2140/PJM.1955.5.285
   THOMPSON HS, 2002, XML SCHEMA 1
   Yergeau Francois., 2004, Extensible markup language (xml) 1.0 w3c recommendation
NR 26
TC 13
Z9 14
U1 0
U2 3
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD JUL-SEP
PY 2006
VL 16
BP 621
EP 661
DI 10.1017/S0956796806005983
PN 4-5
PG 41
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 079KJ
UT WOS:000240174500008
OA Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Malde, K
   Giegerich, R
AF Malde, K
   Giegerich, R
TI Calculating PSSM probabilities with lazy dynamic programming
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB Position-specific scoring matrices are one way to represent approximate string patterns, which are commonly encountered in the field of bioinformatics. An important problem that arises with their application is calculating the statistical significance of matches. We review the currently most efficient algorithm for this task, and show how it can be implemented in Haskell, taking advantage of the built-in non-strictness of the language. The resulting program turns out to be an instance of dynamic programming, using lists rather the typical dynamic programming matrix.
C1 Univ Bergen, Dept Informat, N-5008 Bergen, Norway.
   Univ Bielefeld, Fac Technol, D-4800 Bielefeld, Germany.
C3 University of Bergen; University of Bielefeld
RP Univ Bergen, Dept Informat, N-5008 Bergen, Norway.
EM ketil@ii.uib.no; robert@techfak.uni-bielefeld.de
RI M, Ketil/AAH-5604-2020
CR [Anonymous], 1998, BIOL SEQUENCE ANAL P
   Attwood TK, 1999, NUCLEIC ACIDS RES, V27, P220, DOI 10.1093/nar/27.1.220
   BECKSTETTE M, 2004, P GERM C BIOINF, P53
   Giegerich R, 2004, SCI COMPUT PROGRAM, V51, P215, DOI 10.1016/j.scico.2003.12.005
   RAHMANN S, 2003, APPL GENETICS MOL BI, V2
   RAHMANN S, 2003, P 3 WORKSH ALG BIOIN, P151
   STADEN R, 1989, COMPUT APPL BIOSCI, V5, P89
   Wu TD, 2000, BIOINFORMATICS, V16, P233, DOI 10.1093/bioinformatics/16.3.233
NR 8
TC 1
Z9 1
U1 0
U2 1
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD JAN
PY 2006
VL 16
BP 75
EP 81
DI 10.1017/S0956796805005708
PN 1
PG 7
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 008WL
UT WOS:000235071300005
OA Bronze
DA 2024-07-18
ER

PT J
AU Boudol, G
AF Boudol, G
TI The recursive record semantics of objects revisited
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID MULTIPLE INHERITANCE; INFERENCE; LANGUAGES
AB In a call-by-value language, representing objects as recursive records requires using an unsafe fixpoint. We design, for a core language including extensible records, a type system which rules out unsafe recursion and still supports the construction of a principal type for each typable term. We illustrate the expressive power of this language with respect to object-oriented programming by introducing a sub-language for "mixin-based" programming.
C1 INRIA, F-06902 Sophia Antipolis, France.
C3 Inria
RP Boudol, G (corresponding author), INRIA, BP 93, F-06902 Sophia Antipolis, France.
CR Abadi M., 1994, Journal of Functional Programming, V4, P249, DOI 10.1017/S0956796800001052
   Ancona D., 1998, Mathematical Structures in Computer Science, V8, P401, DOI 10.1017/S0960129598002576
   [Anonymous], 1996, A Theory of Objects
   [Anonymous], 1997, The Definition of Standard ML
   [Anonymous], 1998, P 25 ACM SIGPLAN SIG, DOI DOI 10.1145/268946.268961
   Bono V, 1999, LECT NOTES COMPUT SC, V1628, P43
   BONO V, 1999, ELECT NOTES COMPUTER, V20
   Boudol G, 2001, LECT NOTES COMPUT SC, V2028, P269
   BOUDOL G, 2002, UNPUB RECURSION CALL
   BRACHA G, 1990, ECOOP OOPSLA 90 P, P303
   Bracha G., 2016, The Dart Programming Language. Always learning
   BRUCE K, 1993, P ACM S PRINCIPLES P, P285
   Bruce KB, 1997, LECT NOTES COMPUT SC, V1241, P104, DOI 10.1007/BFb0053376
   CARDELLI L, 1984, LECT NOTES COMPUT SC, V173, P51
   CARDELLI L, 1988, INFOR COMPUTATION, V76
   CARDELLI L, 1994, THEORETICAL ASPECTS, P295
   COOK W, 1989, SIGPLAN NOTICES, V24, P433, DOI 10.1145/74878.74922
   COOK W, 1994, THEORETICAL ASPECTS, P497
   CRARY K, 1999, PLDI, P50
   Damas L., 1982, C REC 9 ANN ACM S PR, P207, DOI DOI 10.1145/582153.582176
   EIFRIG J, 1995, SIGPLAN NOTICES, V30, P169, DOI 10.1145/217839.217858
   Eifrig J., 1995, LISP and Symbolic Computation, V8, P357, DOI 10.1007/BF01018829
   FISHELL GJ, 1995, ALTSCHUL SY, V3, P189
   FISHER K, 1993, LICS 93, P26
   FISHER K. S., 1996, THESIS STANFORD U
   Gamma Erich., 1994, DESIGN PATTERNS
   Gunter Carl., 1994, Theoretical aspects of object-oriented programming
   HARPER R, 1991, P 18 ANN ACM S PRINC, P131
   Hirschowitz T, 2002, LECT NOTES COMPUT SC, V2305, P6
   Jategaonkar L. A., 1993, Fundamenta Informaticae, V19, P127
   Jouannaud Jean-Pierre., 1991, COMPUTATIONAL LOGIC, P257
   KAMIN S, 1988, P POPL 88, P80
   Leroy Xavier., 2000, The Objective Caml system
   MacQueen D., 2002, Formal Aspects of Computing, V13, P214, DOI 10.1007/s001650200010
   MADSEN OL, 1989, SIGPLAN NOTICES, V24, P10
   MARTELLI A, 1982, ACM T PROGR LANG SYS, V4, P258, DOI 10.1145/357162.357169
   MEYER B, 1986, SIGPLAN NOTICES, V21, P391, DOI 10.1145/960112.28738
   MILNER R, 1978, J COMPUT SYST SCI, V17, P348, DOI 10.1016/0022-0000(78)90014-4
   OHORI A, 1994, THEORETICAL ASPECTS, P121
   Palsberg J., 1997, Nordic Journal of Computing, V4, P259
   PALSBERG J, 1995, INFORM COMPUT, V123, P198, DOI 10.1006/inco.1995.1168
   Pierce B. C., 1994, Journal of Functional Programming, V4, P207, DOI 10.1017/S0956796800001040
   REDDY US, 1988, ACM S LISP FUNCT PRO, P289
   Remy D, 1998, THEOR PRACT OBJ SYST, V4, P27, DOI 10.1002/(SICI)1096-9942(1998)4:1<27::AID-TAPO3>3.0.CO;2-4
   REMY D, 1994, LECT NOTES COMPUTER, V789, P321
   Remy Didier., 1994, THEORETICAL ASPECTS, P67
   REMY R, 1994, THEORETICAL ASPECTS, P351
   REPPY J, 1996, P ACM SIGPLAN 96 C P, P171
   SNYDER A, 1986, SIGPLAN NOTICES, V21, P38, DOI 10.1145/960112.28702
   SNYDER A, 1986, SIGPLAN NOTICES, V21, P19, DOI 10.1145/323648.323738
   Taivalsaari A, 1996, ACM COMPUT SURV, V28, P438, DOI 10.1145/243439.243441
   WAND M, 1991, INFORM COMPUT, V93, P1, DOI 10.1016/0890-5401(91)90050-C
   WAND M., 1994, THEORETICAL ASPECTS, P97
   WAND M, 1987, LICS 87, P37
   Wright A. K., 1995, LISP and Symbolic Computation, V8, P343, DOI 10.1007/BF01018828
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
NR 56
TC 5
Z9 5
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 40 WEST 20TH ST, NEW YORK, NY 10011-4211 USA
SN 0956-7968
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD MAY
PY 2004
VL 14
BP 263
EP 315
DI 10.1017/S0956796803004775
PN 3
PG 53
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 822TR
UT WOS:000221563700002
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Damian, D
   Danvy, O
AF Damian, D
   Danvy, O
TI Syntactic accidents in program analysis: on the impact of the CPS
   transformation
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID DATA-FLOW-ANALYSIS
AB We show that a non-duplicating transformation into Continuation-Passing Style (CPS) has no effect on control-flow analysis, a positive effect on binding-time analysis for traditional partial evaluation, and no effect on binding-time analysis for continuation-based partial evaluation: a monovariant control-flow analysis yields equivalent results on a direct-style program and on its CPS counterpart, a monovariant binding-time analysis yields less precise results on a direct-style program than on its CPS counterpart, and an enhanced monovariant binding-time analysis yields equivalent results on a direct-style program and on its CPS counterpart. Our proof technique amounts to constructing the CPS counterpart of flow information and of binding times. Our results formalize and confirm a folklore theorem about traditional binding-time analysis, namely that CPS has a positive effect on binding times. What may be more surprising is that the benefit does not arise from a standard refinement of program analysis, as, for instance, duplicating continuations. The present study is symptomatic of an unsettling property of program analyses: their quality is unpredictably vulnerable to syntactic accidents in source programs, i.e., to the way these programs are written. More reliable program analyses require a better understanding of the effect of syntactic change.
C1 LION Biosci Ltd, Cambridge CB5 8DZ, England.
   Aarhus Univ, BRICS, Dept Comp Sci, DK-8000 Aarhus C, Denmark.
C3 Aarhus University
RP Damian, D (corresponding author), LION Biosci Ltd, Compass House,80-82 Newmarket Rd, Cambridge CB5 8DZ, England.
EM Daniel.Damian@uk.lionbioscience.com; danvy@brics.bk
CR Abadi Martin., 1999, POPL, P147, DOI [10.1145/292540.292555, DOI 10.1145/292540.292555]
   [Anonymous], 1993, Partial Evaluation and Automatic Program Generation
   BENTON N, 1996, P 11 ANN IEEE S LOG, P420
   BONDORF A, 1992, LISP POINTERS, V5, P1
   CONSEL C, 1991, LECT NOTES COMPUT SC, V523, P496
   CONSEL C, 1993, P 20 ANN ACM S PRINC, P493
   Console S, 2000, CHIM OGGI, V18, P14
   COUSOT P, 1995, P 7 ACM C FUNCT PROG, P170
   DAMIAN D, 2001, IN PRESS J FUNCTIONA
   DAMIAN D, 2001, RS0155 BRICS DAIMI U
   DAMIAN D, 2001, THESIS U AARHUS AARH
   DANVY O, 1991, INFORM PROCESS LETT, V37, P315, DOI 10.1016/0020-0190(91)90148-B
   DANVY O, 1990, PROCEEDINGS OF THE 1990 ACM CONFERENCE ON LISP AND FUNCTIONAL PROGRAMMING, P151, DOI 10.1145/91556.91622
   DANVY O, 2002, LECT NOTES COMPUTER
   GASSER K. L. S., 1997, P ICFP 97, P38
   HACLIFF J, 1994, P 21 ANN ACM S PRINC, P458
   Hatcliff J., 1997, Mathematical Structures in Computer Science, V7, P507, DOI 10.1017/S0960129597002405
   HEINTZE N, 1994, LISP POINTERS, V7
   Henglein F., 1996, D293 DIKU U COP COMP
   HOLST CK, 1991, SIGPLAN NOTICES, V26, P223, DOI 10.1145/115866.115890
   JAGANNATHAN S, 1995, POPL 95, P393, DOI DOI 10.1145/199448.199536
   JONES ND, 1996, LECT NOTES COMPUTER, V1110, P216
   JORRING U, 1986, P 13 ANN ACM S PRINC, P86
   KAM JB, 1977, ACTA INFORM, V7, P305, DOI 10.1007/BF00290339
   LAWALL JL, 1994, LISP POINTERS, V7
   MOGGI E, 1991, INFORM COMPUT, V93, P55, DOI 10.1016/0890-5401(91)90052-4
   MUYLAERT-FILHO J. A., 1993, WORKSHOPS COMPUTING, P247
   NIELSON F, 1982, ACTA INFORM, V18, P265, DOI 10.1007/BF00263194
   Nielson F., 1999, Principles of Program Analysis
   NIELSON F, 1992, CAMBRIDGE TRACTS THE, V34
   Nielson Flemming., 1997, POPL, P332, DOI DOI 10.1145/263699.263745
   PALSBERG J, 1995, ACM T PROGR LANG SYS, V17, P576, DOI 10.1145/210184.210187
   PALSBERG J, 1994, PROCEEDINGS OF THE 1994 INTERNATIONAL CONFERENCE ON COMPUTER LANGUAGES, P289, DOI 10.1109/ICCL.1994.288372
   Palsberg J, 1995, LECT NOTES COMPUT SC, V915, P561
   Palsberg J., 1993, Journal of Functional Programming, V3, P347, DOI 10.1017/S0956796800000770
   PALSBERG J, 2002, IN PRESS J FUNCTIONA
   Plotkin G. D., 1975, Theoretical Computer Science, V1, P125, DOI 10.1016/0304-3975(75)90017-1
   Sabry A, 1997, ACM T PROGR LANG SYS, V19, P916, DOI 10.1145/267959.269968
   SABRY A, 1994, SIGPLAN NOTICES, V29, P1, DOI 10.1145/773473.178244
   Shivers O., 1991, CMUCS91145
   Steele Jr G. L., 1978, AITR474 MIT AI LAB
   TALCOTT CL, 1994, LISP POINTERS, V7
   TOFTE M, 1997, 9712 DIKU U COP
   WAND M, 1985, P 12 ANN ACM S PRINC, P1
   Wand Mitchell, 1985, LECT NOTES COMPUTER, P219, DOI 10.1007/3-540-15648-8_17
NR 45
TC 6
Z9 6
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD SEP
PY 2003
VL 13
BP 867
EP 904
DI 10.1017/S0956796802004379
PN 5
PG 38
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 720RF
UT WOS:000185273200003
OA Bronze
DA 2024-07-18
ER

PT J
AU Pruiksma, K
   Pfenning, F
AF Pruiksma, Klaas
   Pfenning, Frank
TI Back to futures
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID LANGUAGE
AB Common approaches to concurrent programming begin with languages whose semantics are naturally sequential and add new constructs that provide limited access to concurrency, as exemplified by futures. This approach has been quite successful, but often does not provide a satisfactory theoretical backing for the concurrency constructs, and it can be difficult to give a good semantics that allows a programmer to use more than one of these constructs at a time. We take a different approach, starting with a concurrent language based on a Curry-Howard interpretation of adjoint logic, to which we add three atomic primitives that allow us to encode sequential composition and various forms of synchronization. The resulting language is highly expressive, allowing us to encode futures, fork/join parallelism, and monadic concurrency in the same framework. Notably, since our language is based on adjoint logic, we are able to give a formal account of linear futures, which have been used in complexity analysis by Blelloch and Reid-Miller. The uniformity of this approach means that we can similarly work with many of the other concurrency primitives in a linear fashion, and that we can mix several of these forms of concurrency in the same program to serve different purposes.
C1 [Pruiksma, Klaas; Pfenning, Frank] Carnegie Mellon Univ, Dept Comp Sci, Pittsburgh, PA 15213 USA.
C3 Carnegie Mellon University
RP Pruiksma, K (corresponding author), Carnegie Mellon Univ, Dept Comp Sci, Pittsburgh, PA 15213 USA.
EM kpruiksm@andrew.cmu.edu; fp@cs.cmu.edu
OI Pruiksma, Klaas/0000-0002-6032-087X
FU National Science Foundation [1718267]; Division of Computing and
   Communication Foundations; Direct For Computer & Info Scie & Enginr
   [1718267] Funding Source: National Science Foundation
FX This material is based upon work supported by the National Science
   Foundation under Grant No. 1718267.
CR Acar UA, 2018, ACM SIGPLAN NOTICES, V53, P769, DOI [10.1145/3192366.3192391, 10.1145/3296979.3192391]
   [Anonymous], 1963, P NOV 12 14 1963 FAL
   Benton PN, 1995, LECT NOTES COMPUT SC, V933, P121, DOI 10.1007/BFb0022251
   Blelloch GE, 1999, THEOR COMPUT SYST, V32, P213, DOI 10.1007/s002240000117
   Cervesato I, 2000, THEOR COMPUT SCI, V232, P133, DOI 10.1016/S0304-3975(99)00173-5
   Cervesato I, 2009, INFORM COMPUT, V207, P1044, DOI 10.1016/j.ic.2008.11.006
   Cervesato Iliano, 2002, Technical Report CMU-CS-02-102
   Church A, 1936, T AM MATH SOC, V39, P472, DOI 10.2307/1989762
   Curien PL, 2016, ACM SIGPLAN NOTICES, V51, P44, DOI 10.1145/2914770.2837652
   Das Ankush, 2020, 5 INT C FORMAL STRUC, V167, DOI [10.4230/ LIPIcs.FSCD.2020.33, DOI 10.4230/LIPICS.FSCD.2020.33]
   DeYoung H., 2020, LEIBNIZ INT P INFORM, V167
   Fairtlough M, 1997, INFORM COMPUT, V137, P1, DOI 10.1006/inco.1997.2627
   Gaboardi M, 2016, ACM SIGPLAN NOTICES, V51, P476, DOI 10.1145/3022670.2951939
   Gay S, 2005, ACTA INFORM, V42, P191, DOI 10.1007/s00236-005-0177-z
   Gay SJ, 2010, J FUNCT PROGRAM, V20, P19, DOI 10.1017/S0956796809990268
   Gentzen G., 1969, The collected papers of Gerhard Gentzen
   GIRARD JY, 1987, LECT NOTES COMPUT SC, V250, P52
   Griffith Dennis Edward, 2016, Ph.D. thesis
   HALSTEAD RH, 1985, ACM T PROGR LANG SYS, V7, P501, DOI 10.1145/4472.4478
   Hilbert D., 1934, Grundlagen der Mathematik
   Honda K, 1998, LECT NOTES COMPUT SC, V1381, P122, DOI 10.1007/BFb0053567
   Honda K., 1993, CONCUR '93. 4th International Conference on Concurrency Theory Proceedings, P509
   Kavanagh R., 2020, P COMBINED 27 INT WO, V322, P69
   Larus J. R., 1989, THESIS U CALIFORNIA
   Licata D. R., 2017, LIPICS
   Licata DR, 2016, LECT NOTES COMPUT SC, V9537, P219, DOI 10.1007/978-3-319-27683-0_16
   LINCOLN P, 1992, PROCEEDINGS OF THE SEVENTH ANNUAL IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P235, DOI 10.1109/LICS.1992.185536
   Miller H, 2016, ONWARD!'16: PROCEEDINGS OF THE 2016 ACM INTERNATIONAL SYMPOSIUM ON NEW IDEAS, NEW PARADIGMS, AND REFLECTIONS ON PROGRAMMING AND SOFTWARE, P82, DOI 10.1145/2986012.2986014
   Pruiksma K., 2018, ADJOINT LOGIC UNPUB
   Pruiksma K., 2020, ABS200204607 CORR
   Pruiksma K, 2019, ELECTRON P THEOR COM, P60, DOI 10.4204/EPTCS.291.6
   Reed Jason, 2009, JUDGMENTAL DEC UNPUB
   Simmons R. J, 2012, CMUCS12142
   Toninho B., 2015, CMUCS15109
   Toninho B, 2013, LECT NOTES COMPUT SC, V7792, P350, DOI 10.1007/978-3-642-37036-6_20
   Wadler P., 1984, C LISP FUNCTIONAL PR, P45
NR 36
TC 2
Z9 2
U1 1
U2 1
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD FEB 28
PY 2022
VL 32
AR e6
DI 10.1017/S0956796822000016
PG 34
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA ZI8MY
UT WOS:000761869800001
OA hybrid, Green Submitted
DA 2024-07-18
ER

PT J
AU Vezzosi, ANDREA
   Mörtberg, A
   Abel, A
AF Vezzosi, Andrea
   Mortberg, Anders
   Abel, Andreas
TI Cubical Agda: A dependently typed programming language with univalence
   and higher inductive types
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB Proof assistants based on dependent type theory provide expressive languages for both programming and proving within the same system. However, all of the major implementations lack powerful extensionality principles for reasoning about equality, such as function and propositional extensionality. These principles are typically added axiomatically which disrupts the constructive properties of these systems. Cubical type theory provides a solution by giving computational meaning to Homotopy Type Theory and Univalent Foundations, in particular to the univalence axiom and higher inductive types (HITs). This paper describes an extension of the dependently typed functional programming language Agda with cubical primitives, making it into a full-blown proof assistant with native support for univalence and a general schema of HITs. These new primitives allow the direct definition of function and propositional extensionality as well as quotient types, all with computational content. Additionally, thanks also to copatterns, bisimilarity is equivalent to equality for coinductive types. The adoption of cubical type theory extends Agda with support for a wide range of extensionality principles, without sacrificing type checking and constructivity.
C1 [Vezzosi, Andrea] IT Univ Copenhagen, Dept Comp Sci, Copenhagen, Denmark.
   [Mortberg, Anders] Stockholm Univ, Dept Math, Stockholm, Sweden.
   [Abel, Andreas] Chalmers & Gothenburg Univ, Dept Comp Sci & Engn, Gothenburg, Sweden.
C3 IT University Copenhagen; Stockholm University
RP Vezzosi, ANDREA (corresponding author), IT Univ Copenhagen, Dept Comp Sci, Copenhagen, Denmark.
EM avez@itu.dk; anders.mortberg@math.su.se; andreas.abel@gu.se
FU VILLUM FONDEN [13156]; USAF, Airforce office for scientific research
   [FA9550-16-1-0029]; Swedish Research Council (SRC, Vetenskapsradet)
   [201904545]; SRC [621-2014-4864, 2019-04216]
FX The authors are grateful to the anonymous reviewers for their helpful
   comments on earlier versions of the paper. The second author is also
   grateful for the feedback from everyone in the Agda learning group at
   CMU and especially to Loic Pujet for porting the HIT integers from
   cubicaltt and Zesen Qian for the formalization of set quotients. We
   would also like to thank Martin Escardo for encouraging us to develop
   the agda/cubical library and everyone who has contributed to it since
   then. Andrea Vezzosi was supported by a research grant (13156) from
   VILLUM FONDEN, and by USAF, Airforce office for scientific research,
   award FA9550-16-1-0029. Anders Mortberg was supported by the Swedish
   Research Council (SRC, Vetenskapsradet) under grant no. 201904545.
   Andreas Abel acknowledges support by the SRC under grants 621-2014-4864
   and 2019-04216.
CR Abel A, 2013, ACM SIGPLAN NOTICES, V48, P27, DOI 10.1145/2480359.2429075
   Abel Andreas, 2017, PROC ACM PROGRAM LAN, V2, DOI DOI 10.1145/3158111
   Agda Development Team, AGDA 2 5 4 2 DOC
   Ahrens Benedikt, 2015, ABS150402949 CORR
   Altenkirch T, 2020, IEEE S LOG, P67, DOI 10.1145/3373718.3394760
   Altenkirch T, 2007, PLPV'07: PROCEEDINGS OF THE 2007 WORKSHOP ON PROGRAMMING LANGUAGES MEETS PROGRAM VERIFICATION, P57, DOI 10.1145/1292597.1292608
   Angiuli C., 2019, SYNTAX MODELS CARTES
   Angiuli C., 2020, PREPRINT ARXIV200905
   Angiuli C., LEIBNIZ INT P INFORM, V119
   Angiuli C, 2016, J FUNCT PROGRAM, V26, P1, DOI 10.1017/S0956796816000198
   Angiuli Carlo, 2017, ARXIV171201800V1
   Annenkov Danil, 2017, 2 LEVEL TYPE THEORY
   Bickford Mark, 2018, ABS180606114 CORR
   Birkedal L, 2019, J AUTOM REASONING, V63, P211, DOI 10.1007/s10817-018-9471-7
   Brady E, 2013, J FUNCT PROGRAM, V23, P552, DOI 10.1017/S095679681300018X
   Brunerie Guillaume, 2016, THESIS U NICE
   Cavallo E, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290314
   Chu S, 2017, ACM SIGPLAN NOTICES, V52, P510, DOI [10.1145/3062341.3062348, 10.1145/3140587.3062348]
   Cockx J, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3236770
   Cockx J, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S095679681800014X
   Cohen C., 2018, LEIBNIZ INT P INFORM, DOI [DOI 10.4230/LIPICS.TYPES.2015.5, 10.4230/LIPIcs]
   Cohen C, 2013, LECT NOTES COMPUT SC, V8307, P147, DOI 10.1007/978-3-319-03545-1_10
   Cohen Cyril, 2015, CUBICALTT
   Coquand T., 2019, HOMOTOPY CANONICITY, V11, P1
   Coquand T, 2018, LICS'18: PROCEEDINGS OF THE 33RD ANNUAL ACM/IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P255, DOI 10.1145/3209108.3209197
   Coquand T, 2013, INDAGAT MATH NEW SER, V24, P1105, DOI 10.1016/j.indag.2013.09.002
   Danielsson N. A., 2020, HIGHER INDUCTIVE TYP
   de Moura Leonardo, 2015, AUTOMATED DEDUCTION
   Escardo, 2019, INTRO UNIVALENT FDN
   Forsberg FN, 2020, CPP '20: PROCEEDINGS OF THE 9TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS, P172, DOI 10.1145/3372885.3373835
   Geuvers H, 2019, SCHLOSS DAGSTUHL LEI
   Huber S, 2017, DOC LABOR
   Huber Simon, 2016, ARXIV160704156
   Kapulkin Chris, 2012, ARXIV12112851
   Licata DR, 2015, IEEE S LOG, P92, DOI 10.1109/LICS.2015.19
   Licata DR, 2013, IEEE S LOG, P223, DOI 10.1109/LICS.2013.28
   LOPS18 Daniel R., 2018, 3 INT C FORMAL STRUC, p22:1, DOI [10.4230/LIPIcs.FSCD.2018.22, DOI 10.4230/LIPICS.FSCD.2018.22]
   Lumsdaine Peter LeFanu, 2017, ARXIV170507088
   Martin-Lof P., 1975, LOGIC C 73, P73
   McBride C, 2009, LECT NOTES COMPUT SC, V5728, P113, DOI 10.1007/978-3-642-03741-2_9
   Mörtberg A, 2020, CPP '20: PROCEEDINGS OF THE 9TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS, P158, DOI 10.1145/3372885.3373825
   Orton I., 2016, 25 EACSL ANN C 30 WO, P19, DOI [DOI 10.4230/LIPICS.CSL, 10.4230/LIPIcs.CSL.2016.24.Id/No24, DOI 10.4230/LIPICS.CSL.2016.24.ID/NO24]
   Riehl E., 2019, INT C HOMOTOPY TYPE
   Riehl Emily, 2017, Higher Structures, V1, P147, DOI [10.1007/s42001-017-0005-6, DOI 10.1007/S42001-017-0005-6]
   Sattler Christian, 2018, TALK WORKSHOP TYPES
   Sojakova K, 2016, ACM T COMPUT LOG, V17, DOI 10.1145/2992783
   Sterling J., 2019, 4 INT C FORMAL STRUC, V31, P1
   Tabareau N., 2020, PREPRINT ARXIV190905
   Tabareau N, 2018, PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES, DOI 10.1145/3236787
   Team T. C. D., 2019, COQ PROOF ASSISTANT
   The RedPRL Development Team, REDTT PROOF ASS
   Univalent Foundations Program T., HOMOTOPY TYPE THEORY
   Veltri N, 2020, CPP '20: PROCEEDINGS OF THE 9TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS, P270, DOI 10.1145/3372885.3373814
   Vezzosi A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341691
   Vezzosi Andrea, 2017, STREAMS CUBICAL TYPE
   Voevodsky V., 2013, SIMPLE TYPE SYSTE 2
   Voevodsky V, 2015, MATH STRUCT COMP SCI, V25, P1278, DOI 10.1017/S0960129514000577
   Wood J., 2019, VECTORS MATRICES AGD
NR 58
TC 13
Z9 13
U1 0
U2 3
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD APR 6
PY 2021
VL 31
AR e8
DI 10.1017/S0956796821000034
PG 47
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA RI3ZJ
UT WOS:000636849000001
OA Green Published
DA 2024-07-18
ER

PT J
AU Breitner, J
AF Breitner, Joachim
TI The adequacy of Launchbury's natural semantics for lazy evaluation
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB In his seminal paper "A Natural Semantics for Lazy Evaluation", John Launchbury proves his semantics correct with respect to a denotational semantics, and outlines a proof of adequacy. Previous attempts to rigorize the adequacy proof, which involves an intermediate natural semantics and an intermediate resourced denotational semantics, have failed. We devised a new, direct proof that skips the intermediate natural semantics. It is the first rigorous adequacy proof of Launchbury's semantics. We have modeled our semantics in the interactive theorem prover Isabelle and machine-checked our proofs. This does not only provide a maximum level of rigor, but also serves as a tool for further work, such as a machine-checked correctness proof of a compiler transformation.
C1 [Breitner, Joachim] Univ Penn, Comp & Informat Sci, Philadelphia, PA 19146 USA.
C3 University of Pennsylvania
RP Breitner, J (corresponding author), Univ Penn, Comp & Informat Sci, Philadelphia, PA 19146 USA.
EM joachim@cis.upenn.edu
FU Deutsche Telekom Stiftung
FX This work was carried out while the author was a member of the
   Programming Paradigms Group of the Karlsruhe Institute of Technology,
   Germany. The author was supported by the Deutsche Telekom Stiftung.
CR Abramsky S., 1990, LAZY LAMBDA CALCULUS, P65
   Baker-Finch C., 2000, P ACM SIGPLAN INT C
   Baker-Finch C., 1999, 991 OP U
   Ballarin C, 2014, J AUTOM REASONING, V52, P123, DOI 10.1007/s10817-013-9284-7
   Breitner J., 2013, CORRECTNESS LAUNCHBU
   Breitner J., 2015, P HASK S
   Breitner J., 2015, ARCH FORMAL PROOFS
   Breitner J, 2015, LECT NOTES COMPUT SC, V8843, P34, DOI 10.1007/978-3-319-14675-1_3
   Eisenberg R, 2013, SYSTEM FC IMPLEMENTE
   Launchbury J., 1993, Conference Record of the Twentieth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P144, DOI 10.1145/158511.158618
   Nakata K., 2010, P 7 WORKSH FIX POINT
   Nakata K, 2009, J FUNCT PROGRAM, V19, P699, DOI 10.1017/S0956796809990219
   Sanchez-Gil L., 2011, P ACM S APPL COMP, P1301
   Sanchez-Gil L., 2012, P INT C THEOR ASP CO, P1301
   Sanchez-Gil L., 2014, P PSI
   Sanchez-Gil L., 2010, TRENDS FUNCTIONAL PR, V10, P65
   Sestoft P., 1997, Journal of Functional Programming, V7, P231, DOI 10.1017/S0956796897002712
   Urban C, 2012, LOG METH COMPUT SCI, V8, DOI 10.2168/LMCS-8(2:14)2012
   van Eekelen M., 2004, TECHNICAL REPORT NII
NR 19
TC 3
Z9 3
U1 0
U2 1
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD JAN 3
PY 2018
VL 28
AR e1
DI 10.1017/S0956796817000144
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA FS1TX
UT WOS:000419562400001
DA 2024-07-18
ER

PT J
AU Fischer, S
   Kiselyov, O
   Shan, CC
AF Fischer, Sebastian
   Kiselyov, Oleg
   Shan, Chung-Chieh
TI Purely functional lazy nondeterministic programming
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB Functional logic programming and probabilistic programming have demonstrated the broad benefits of combining laziness (nonstrict evaluation with sharing of the results) with nondeterminism. Yet these benefits are seldom enjoyed in functional programming because the existing features for nonstrictness, sharing, and nondeterminism in functional languages are tricky to combine. We present a practical way to write purely functional lazy nondeterministic programs that are efficient and perspicuous. We achieve this goal by embedding the programs into existing languages (such as Haskell, SML, and OCaml) with high-quality implementations, by making choices lazily and representing data with nondeterministic components, by working with custom monadic data types and search strategies, and by providing equational laws for the programmer to reason about their code.
EM oleg@okmij.org
CR ACOSTAGOMEZ A, 2007, THESIS ROYAL I TECHN
   Albert E, 2005, J SYMB COMPUT, V40, P795, DOI 10.1016/j.jsc.2004.01.001
   [Anonymous], 1995, C RECORD POPL 95 22, DOI DOI 10.1145/199448.199507
   [Anonymous], 1992, 19th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, DOI DOI 10.1145/143165.143169
   [Anonymous], P PROGR LANG DES IMP
   Antoy S., 2002, Functional and Logic Programming. 6th International Symposium, FLOPS 2002. Proceedings (Lecture Notes in Computer Science Vol.2441), P67
   ANTOY S, 2006, P INT C LOG PROGR, P87
   Ariola Z. M., 1997, J FUNCTIONAL PROGRAM, V7, P265
   Bird R., 1997, Journal of Functional Programming, V7, P541, DOI 10.1017/S0956796897002827
   Bjesse P., 1998, ICFP '98
   BRASSEL B, 2009, P WORKSH LOG PROGR W, P195
   Brassel B, 2007, LECT NOTES COMPUT SC, V4807, P122
   Christiansen J, 2008, LECT NOTES COMPUT SC, V4989, P322
   Claessen K, 2004, J FUNCT PROGRAM, V14, P741, DOI 10.1017/S0956796804005192
   Claessen Koen., 2000, Proceedings of the fifth ACM SIGPLAN international conference on Functional programming - ICFP'00, P268, DOI [10.1145/351240.351266, DOI 10.1145/351240.351266]
   DEVRIES E, 2009, JUST UNSAFE IS UNSAF
   Escardó M, 2007, IEEE S LOG, P443, DOI 10.1109/LICS.2007.25
   Felleisen M, 1985, 182 IND U COMP SCI D
   Filinski A., 1999, P 26 ACM SIGPLAN SIG, P175
   Fischer Sebastian, 2007, Proceedings of the 9th International ACM SIGPLAN Conference on Principles and Practice of Declarative Programming (PPDP'07), P63, DOI 10.1145/1273920.1273930
   Garcia R, 2009, ACM SIGPLAN NOTICES, V44, P153, DOI 10.1145/1594834.1480903
   González-Moreno JC, 1999, J LOGIC PROGRAM, V40, P47, DOI 10.1016/S0743-1066(98)10029-8
   Goodman ND., 2008, UAI, P220
   HAYNES CT, 1987, J LOGIC PROGRAM, V4, P157, DOI 10.1016/0743-1066(87)90016-1
   HINZE R, 2000, P 5 ACM SIGPLAN INT, P186
   Hudak P., 1996, ACM COMPUT SURV, V28, P196, DOI [10.1145/242224.242477, DOI 10.1145/242224.242477]
   HUGHES J, 1989, COMPUT J, V32, P98, DOI 10.1093/comjnl/32.2.98
   Jones SP, 1999, ACM SIGPLAN NOTICES, V34, P25, DOI 10.1145/301631.301637
   KISELYOV O, 2005, P INT C FUNCT PROGR, P192
   Kiselyov O, 2009, LECT NOTES COMPUT SC, V5658, P360, DOI 10.1007/978-3-642-03034-5_17
   Kitchin D, 2009, LECT NOTES COMPUT SC, V5522, P1, DOI 10.1007/978-3-642-02138-1_1
   Koller Daphne, 1997, P 14 NAT C ART INT 1, P740
   Launchbury John., 2010, Haskell'10: Proceedings of the 2010 ACM SIGPLAN Haskell Symposium; 2010 Sep 30; Baltimore, Maryland, USA, P79, DOI [10.1145/ 1863523.1863534, DOI 10.1145/1863523.1863534]
   Launchbury John., 1993, Proceedings of the 20th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages. POPL'93. New York, NY, P144, DOI DOI 10.1145/158511.158618
   Lopez-Fraguas Francisco J., 2007, Proceedings of the 9th International ACM SIGPLAN Conference on Principles and Practice of Declarative Programming (PPDP'07), P197, DOI 10.1145/1273920.1273947
   LOPEZFRAGUAS FJ, 2008, P S FUNCT LOG PROGR, P147
   MARAIST J, 1998, J FUNCTIONAL PROGRAM, V8, P275
   McCarthy J., 1963, P COMP PROGR FORM SY, P33
   MICHIE D, 1968, NATURE, V218, P19, DOI 10.1038/218019a0
   Moggi E., 1989, Proceedings. Fourth Annual Symposium on Logic in Computer Science (Cat. No.89CH2753-2), P14, DOI 10.1109/LICS.1989.39155
   Morrisett J.Gregory., 1993, Proceedings of the ACM SIGPLAN Workshop on State in Programming Languages, P73
   Naylor Matthew., 2007, P ACM SIGPLAN HASKEL, P37, DOI DOI 10.1145/1291201.1291207
   NICOLLET V, 2009, LAZY THREADS
   RABIN MO, 1959, IBM J RES DEV, V3, P114, DOI 10.1147/rd.32.0114
   Runciman C., P 1 ACM SIGPLAN S HA, DOI [DOI 10.1145/1411286.1411292, 10.1145/1411286.1411292.]
   SEAMAN J, 1993, THESIS PENNSYLVANIA
   SPIVEY JM, 2000, J FUNCTIONAL PROGRAM, V10, P397
   TOLMACH A, 2003, P WORKSH FUNCT LOG P, P33
   TOLMACH A, 2004, P 9 INT C FUNCT PROG, P90
   WADLER P, 1985, LECT NOTES COMPUT SC, V201, P113
   2008, MONADPLUS
NR 51
TC 18
Z9 21
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD JUL-SEP
PY 2011
VL 21
SI SI
BP 413
EP 465
DI 10.1017/S0956796811000189
PN 4-5
PG 53
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 828XN
UT WOS:000295538000003
OA Bronze
DA 2024-07-18
ER

PT J
AU Washburn, G
   Weirich, S
AF Washburn, Geoffrey
   Weirich, Stephanie
TI Boxes go bananas: Encoding higher-order abstract syntax with parametric
   polymorphism
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 8th International Conference on Functional Programming (ICFP 03)
CY AUG 25-29, 2003
CL UPPSALA, SWEDEN
SP ACM SIGPLAN
AB Higher-order abstract syntax is a simple technique for implementing languages with functional programming. Object variables and binders are implemented by variables and binders in the host language. By using this technique, one can avoid implementing common and tricky routines dealing with variables, such as capture-avoiding substitution. However, despite the advantages this technique provides, it is not commonly used because it is difficult to write sound elimination forms (such as folds or catamorphisms) for higher-order abstract syntax. To fold over such a data type, one must either simultaneously define an inverse operation (which may not exist) or show that all functions embedded in the data type are parametric. In this paper, we show how first-class polymorphism can be used to guarantee the parametricity of functions embedded in higher-order abstract syntax. With this restriction, we implement a library of iteration operators over data structures containing functionals. From this implementation, we derive "fusion laws" that functional programmers may use to reason about the iteration operator. Finally, we show how this use of parametric polymorphism corresponds to the Schurmann, Despeyroux and Pfenning method of enforcing parametricity through modal types. We do so by using this library to give a sound and complete encoding of their calculus into System F-omega. This encoding can serve as a starting point for reasoning about higher-order structures in polymorphic languages.
C1 [Washburn, Geoffrey; Weirich, Stephanie] Univ Penn, Dept Comp & Informat Sci, Philadelphia, PA 19104 USA.
C3 University of Pennsylvania
RP Washburn, G (corresponding author), Univ Penn, Dept Comp & Informat Sci, Philadelphia, PA 19104 USA.
EM geoffw@cis.upenn.edu; sweirich@cis.upenn.edu
OI Weirich, Stephanie/0000-0002-6756-9168
CR ACAR U, 2002, 30 ACM SIGPLAN SIGAC, P14
   AMBLER S, 2002, LECT NOTES COMPUTER, V2410
   [Anonymous], ACM SIGPLAN C PROGR
   [Anonymous], 2003, Haskell 98 language and libraries: the revised report
   BEKIC H, 1984, LNCS, V177
   BOHM C, 1985, THEOR COMPUT SCI, V39, P135, DOI 10.1016/0304-3975(85)90135-5
   Church A., 1940, J. Symbolic Logic, V5, P56, DOI [10.2307/2266170, DOI 10.2307/2266170]
   Danvy Olivier., 1992, MATH STRUCT COMP SCI, V2, P361, DOI DOI 10.1017/S0960129500001535
   Davies R, 2001, J ACM, V48, P555, DOI 10.1145/382780.382785
   Despeyroux J., 2001, Mathematical Structures in Computer Science, V11, P555, DOI 10.1017/S0960129501003346
   DESPEYROUX J, 2000, IFIP INT THEORETICAL
   DESPEYROUX J, 1995, 2 INT C TYP LAMBD CA
   FEGARAS L, 1996, 23 ACM SIGPLAN SIGAC
   GABBAY MJ, 2004, 19 IEEE S LOG COMP S
   GIRARD JY, 1971, 2 SCAND LOG S N HOLL
   Hinze R, 2002, SCI COMPUT PROGRAM, V43, P129, DOI 10.1016/S0167-6423(02)00025-4
   HONSELL F, 2001, LECT NOTES COMPUT SC, V2076
   HONSELL F, 1996, LNCS, V1158
   Johann P., 2002, Higher-Order and Symbolic Computation, V15, P273, DOI 10.1023/A:1022982420888
   JONES M, 2000, LNCS, V1782
   Jones M. P., 1995, Journal of Functional Programming, V5, P1, DOI 10.1017/S0956796800001210
   Jones SP, 2007, J FUNCT PROGRAM, V17, P1, DOI 10.1017/S0956796806006034
   Kripke S.A., 1959, J. Symb. Log, V24, P1, DOI [10.2307/2964568, DOI 10.2307/2964568]
   LESZCYLO.J, 1971, B ACAD POL SCI SMAP, V19, P967
   MEIJER E, 1995, C FUNCT PROGR LANG C
   MEIJER E, 1991, C FUNCT PROGR LANG C
   Miller D., 2005, ACM Transactions on Computational Logic, V6, P749, DOI 10.1145/1094622.1094628
   MILLER DA, 1990, P LOG FRAM BRA WORKS
   NANEVSKI A, 2002, 7 ACM SIGPLAN INT C, P206
   Pfenning F., 2001, Mathematical Structures in Computer Science, V11, P511, DOI 10.1017/S0960129501003322
   PFENNING F, 1999, 16 INT C AUT DED GAN
   PITTS AM, 2000, MATH PROGRAM CONSTRU
   POSWOLSKY A, 2007, YALEUDCSTR1375
   REYNOLDS JC, 1983, P IFIP 9 WORLD COMP
   Schürmann C, 2001, THEOR COMPUT SCI, V266, P1, DOI 10.1016/S0304-3975(00)00418-7
   SCHURMANN C, 2004, YALEUDCSTR1272
   Sumii E., 2001, Higher-Order and Symbolic Computation, V14, P101, DOI 10.1023/A:1012984529382
   TRIFONOV V, 2000, 5 ACM SIGPLAN INT C
   WADLER P, 1989, C FUNCT PROGR LANG C
   WASHBURN G, 2003, 8 ACM SIGPLAN INT C
   WASHBURN G, 2001, MODAL TYPING SPECIFY
   Weirich S, 2006, J FUNCT PROGRAM, V16, P681, DOI 10.1017/S0956796806005879
   XI H, 2003, 30 ACM SIGPLAN SIGAC
   [No title captured]
NR 44
TC 17
Z9 20
U1 1
U2 2
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD JAN
PY 2008
VL 18
BP 87
EP 140
DI 10.1017/S0956796807006557
PN 1
PG 54
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 315CQ
UT WOS:000256855900004
OA Green Published, Bronze
DA 2024-07-18
ER

PT J
AU Surányi, GM
AF Suranyi, Gabor M.
TI An object-oriented calculus with term constraints
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID INHERITANCE; ROLES
AB Safety has become a fundamental requirement in all aspects of computer systems. Object-oriented calculi, such as Castagna's lambda &-calculus and its variants (Castagna, 1997) ensure type safety in environments based on the distinguished object-oriented paradigm. Although for safety reasons object invariance and operation specifications are getting widely employed in all stages of the engineering process, they are not Supported by these calculi. In this paper, a new calculus is presented which supports term (value) constraints besides the key object-oriented mechanisms (class types, inheritance, overloading with multiple dispatch and late binding). We also show how a type with constraints may realise a role, another useful object-oriented modelling element. The soundness of the type system and the confluence of the notion of reduction of the calculus are considered. The contribution also discusses computability issues partially arising from the use of first-order logic to formalise the constraints.
C1 Budapest Univ Technol & Econ, H-1117 Budapest, Hungary.
C3 Budapest University of Technology & Economics
RP Surányi, GM (corresponding author), Budapest Univ Technol & Econ, H-1117 Budapest, Hungary.
EM gabor.suranyi@db.bme.hu
CR ABADI M, 1998, 161 DIG SYST RES CTR
   [Anonymous], J OBJ TECHNOL
   BORGER E, 1997, CLASSICAL DECISION P
   BOUDOL G, 1997, LNCS, V1345, P239
   CARDELLI L, 1988, INFORM COMPUT, V76, P138, DOI 10.1016/0890-5401(88)90007-7
   Cardelli L., 2004, COMPUTER SCI ENG HDB
   Castagna Giuseppe., 1997, Progress in Theoretical Computer Science
   Curien Pierre-Louis, 1992, MATH STRUCT COMP SCI, V2, p55S91, DOI DOI 10.1017/S0960129500001134
   de Boer FS, 1999, LECT NOTES COMPUT SC, V1578, P135
   Ghelli G, 2002, INFORM COMPUT, V175, P50, DOI 10.1006/inco.2001.2943
   Gottlob G, 1996, ACM T INFORM SYST, V14, P268, DOI 10.1145/230538.230540
   HOARE CAR, 1969, COMMUN ACM, V12, P576, DOI 10.1145/363235.363259
   HOARE CAR, 1969, COMMUN ACM, V12, P583
   Hofmann M, 1998, THEOR PRACT OBJ SYST, V4, P51, DOI 10.1002/(SICI)1096-9942(1998)4:1<51::AID-TAPO4>3.0.CO;2-A
   HOFMANN M, 1996, IMMDVII596 U ERL
   Igarashi A, 2004, THEOR COMPUT SCI, V311, P121, DOI 10.1016/S0304-3975(03)00325-6
   Kardkovacs Zsolt Tivadar., 2004, Proceedings of the 5th International Symposium of Hungarian Researchers on Computational Intelligence, P325
   KOBAYASHI N, 1994, OOPSLA 94, P31
   Krishnaswami N.R., 2005, P ACM SIGPLAN C PROG, P96
   Papazoglou M. P., 1997, VLDB Journal, V6, P73, DOI 10.1007/s007780050034
   POETZSCHHEFFTER A, 1998, PROCOMET 98 IFIP C P, V125, P404
   RUNDENSTEINER EA, 1992, PROC INT CONF VERY L, P187
   Wand M., 1987, Proceedings of the Symposium on Logic in Computer Science (Cat. No.87CH2464-6), P37
NR 23
TC 0
Z9 0
U1 0
U2 2
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD MAY
PY 2007
VL 17
BP 353
EP 386
DI 10.1017/S0956796806006174
PN 3
PG 34
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 163LR
UT WOS:000246161800002
OA Bronze
DA 2024-07-18
ER

PT J
AU Di Pierro, A
   Hankin, C
   Wiklicky, H
AF Di Pierro, A
   Hankin, C
   Wiklicky, H
TI Quantitative static analysis of distributed systems
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB We introduce a quantitative approach to the analysis of distributed systems which relies on a linear operator based network semantics. A typical problem in a distributed setting is how information propagates through a network, and a typical qualitative analysis is concerned with establishing whether some information will eventually be transmitted from one node to another node in the network. The quantitative approach we present allows us to obtain additional information such as an estimation of the probability that some data is transmitted within a given interval of time. We formalise situations like this using a probabilistic version of a process calculus which is the core of KLAIM, a language for distributed and mobile computing based on interactions through distributed tuple spaces. The analysis we present exploits techniques based on Probabilistic Abstract Interpretation and is characterised by compositional aspects which greatly simplify the inspection of the nodes interaction and the detection of the information propagation through a computer network.
C1 Univ Pisa, I-56100 Pisa, Italy.
   Univ London Imperial Coll Sci Technol & Med, London SW7 2AZ, England.
C3 University of Pisa; Imperial College London
RP Univ Pisa, I-56100 Pisa, Italy.
EM dipierro@di.unipi.it; clh@doc.ic.ac.uk
OI DI PIERRO, Alessandra/0000-0003-4173-7941; Hankin,
   Chris/0000-0001-9149-8577
CR Albert R, 2000, NATURE, V406, P378, DOI 10.1038/35019019
   [Anonymous], 1993, K THEORY C ALGEBRAS, DOI DOI 10.1112/BLMS/27.2.196
   [Anonymous], 2003, Generalized Inverses-Theory and Applications
   Bause F., 2002, Stochastic Petri Nets: An Introduction to the Theory
   BETTINI L., 2003, LECT NOTES COMPUTER, V2874
   BEUTLER FJ, 1965, J MATH ANAL APPL, V10, P451, DOI 10.1016/0022-247X(65)90108-3
   Bottcher A., 1999, Introduction to Large Truncated Toeplitz Matrices
   BUCHHOLZ P, 2004, KRONECKER BASED MATR
   Conway JB., 1990, COURSE FUNCTIONAL AN, V2
   COUSOT P, 1992, J LOGIC PROGRAM, V13, P103, DOI 10.1016/0743-1066(92)90030-7
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   De Nicola R, 1998, IEEE T SOFTWARE ENG, V24, P315, DOI 10.1109/32.685256
   Deutsch F, 2001, CMS BOOKS MATH
   Di Pierro A, 2004, LECT NOTES COMPUT SC, V2949, P119
   Di Pierro A, 2003, LECT NOTES COMPUT SC, V2761, P508
   Di Pierro A, 2002, P IEEE CSFW, P3, DOI 10.1109/CSFW.2002.1021803
   Di Pierro A., 2000, Proceedings of the 2nd International ACM SIGPLAN Conference on Principles and Practice of Declarative Programming (PPDP '00), P127, DOI 10.1145/351268.351284
   Di Pierro A, 2001, LECT NOTES COMPUT SC, V2042, P147
   DIPIERRO A, 2004, ELECT NOTES THEORETI
   DIPIERRO A, 2004, J COMPUT SECURITY, V1, P37
   DONATELLI S, 1993, PERFORM EVALUATION, V18, P21, DOI 10.1016/0166-5316(93)90025-P
   Fillmore P., 1996, A user's guide to operator algebras
   Herescu OM, 2000, LECT NOTES COMPUT SC, V1784, P146
   James Norris R, 1997, MARKOV CHAINS
   Kadison R.V., 1997, Graduate Studies in Mathematics, V15
   Nielson F., 1999, Principles of Program Analysis
   PALMER TW, 1994, ENCY MATH ITS APPL, V49
   Priami C, 1995, COMPUT J, V38, P578, DOI 10.1093/comjnl/38.7.578
   Tijms H. C., 1994, Wiley Series in Probability and Statistics
   Toffoli T., 1987, Cellular Automata Machines: A New Environment for Modeling
NR 30
TC 5
Z9 5
U1 0
U2 1
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD SEP
PY 2005
VL 15
BP 703
EP 749
DI 10.1071/S0956796805005599
PN 5
PG 47
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 970SE
UT WOS:000232329100004
DA 2024-07-18
ER

PT J
AU Florido, M
   Damas, L
AF Florido, M
   Damas, L
TI Linearization of the lambda-calculus and its relation with intersection
   type systems
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID LOGIC
AB In this paper we present a notion of expansion of a term in the lambda-calculus which transforms terms into linear terms. This transformation replaces each occurrence of a variable in the original term by a fresh variable taking into account non-trivial implications in the structure of the term caused by these simple replacements. We prove that the class of terms which can be expanded is the same of terms typable in an Intersection Type System, i.e. the strongly normalizable terms. We then show that expansion is preserved by weak-head reduction, the reduction considered by functional programming languages.
C1 Univ Porto, Fac Sci, Dept Comp Sci, P-4150180 Oporto, Portugal.
   Univ Porto, LIACC, P-4150180 Oporto, Portugal.
C3 Universidade do Porto; Universidade do Porto
RP Univ Porto, Fac Sci, Dept Comp Sci, R do Campo Alegre 823, P-4150180 Oporto, Portugal.
EM amf@ncc.up.pt
RI Florido, Mario/A-5818-2013
OI Florido, Mario/0000-0002-0574-7555
CR ABRAMSKY S, 1993, THEOR COMPUT SCI, V111, P3, DOI 10.1016/0304-3975(93)90181-R
   [Anonymous], 1987, The Implementation of Functional Programming Languages
   [Anonymous], 1998, Domains and lambda-calculi
   [Anonymous], 1990, PROGRAMMING CONCEPTS
   [Anonymous], 1992, Handbook of Logic in Computer Science
   BARENDREGT H, 1983, J SYMBOLIC LOGIC, V48, P931, DOI 10.2307/2273659
   Benton Nick., 1992, Term assignment for intuitionistic linear logic
   BUCCIARELLI A, 1999, 14 IEEE S LOG COMP S
   Coppo M., 1980, Notre Dame Journal of Formal Logic, V21, P685, DOI 10.1305/ndjfl/1093883253
   COPPO M, 1995, INFOR COMPUTATION, V122
   Curry HB, 1934, P NATL ACAD SCI USA, V20, P584, DOI 10.1073/pnas.20.11.584
   DAMAS L, 1982, 9 ACM S PRINC PROGR
   DAMIANI F, 1994, LECT NOTES COMPUTER
   FRADET P, 1994, LECT NOTES COMPUTER, V788
   Hindley R., 1997, BASIC SIMPLE TYPE TH
   JIM T, 1996, ACM S PRINCIPLES PRO
   Kfoury A. J., 1999, POPL 99 26 ACM S PRI
   Kfoury AJ, 2000, J LOGIC COMPUT, V10, P411, DOI 10.1093/logcom/10.3.411
   KFOURY AJ, 1996, LOGIC ALGEBRA COMPUT
   LINCOLN P, 1992, 7 S LOG COMP SCI
   VANBAKEL S, 1993, THESIS U NIJMEGEN
NR 21
TC 3
Z9 3
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD SEP
PY 2004
VL 14
BP 519
EP 546
DI 10.1017/S0956796803004970
PN 5
PG 28
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 857JC
UT WOS:000224111500004
OA Bronze
DA 2024-07-18
ER

PT J
AU Johann, P
AF Johann, P
TI Short cut fusion is correct
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB Fusion is the process of removing intermediate data structures from modularly constructed functional programs. Short cut fusion is a particular fusion technique which uses a single, local transformation rule to fuse compositions of list-processing functions. Short cut fusion has traditionally been treated purely syntactically, and justifications for it have appealed either to intuition or to "free theorems" - even though the latter have not been known to hold in languages supporting higher-order polymorphic functions and fixpoint recursion. In this paper we use Pitts' recent demonstration that contextual equivalence in such languages is parametric to provide the first formal proof of the correctness of short cut fusion for them. In particular, we show that programs which have undergone short cut fusion are contextually equivalent to their unfused counterparts.
C1 Rutgers State Univ, Dept Comp Sci, Camden, NJ 08102 USA.
C3 Rutgers University System; Rutgers University Camden; Rutgers University
   New Brunswick
RP Rutgers State Univ, Dept Comp Sci, Camden, NJ 08102 USA.
EM pjohann@crab.rutgers.edu
CR Abadi M., 2000, Mathematical Structures in Computer Science, V10, P313, DOI 10.1017/S0960129500003054
   BAINBRIDGE ES, 1990, THEOR COMPUT SCI, V70, P35, DOI 10.1016/0304-3975(90)90151-7
   BAINBRIDGE ES, 1990, THEOR COMPUT SCI, V71, P431, DOI 10.1016/0304-3975(90)90055-M
   Chitil O, 1999, ACM SIGPLAN NOTICES, V34, P249, DOI 10.1145/317765.317907
   GILL A, 1996, THESIS GLASGOW U
   Gill A., 1993, P C FUNCT PROGR LANG, P223, DOI DOI 10.1145/165180.165214
   Johann P., 2001, Semantics, Applications, and Implementation of Program Generation. Second International Workshop, SAIG 2001. Proceedings (Lecture Notes in Computer Science Vol.2196), P47
   Johann P, 2000, ANN MATH ARTIF INTEL, V29, P1, DOI 10.1023/A:1018956702672
   JOHANN P, 1997, IMPLEMENTATION WARM
   NEMETH L, 2000, THESIS GLASGOW U
   PITTS A, 1998, UNPUB PARAMETRIC POL
   Pitts AM, 1998, LECT NOTES COMPUT SC, V1443, P309, DOI 10.1007/BFb0055063
   PITTS AM, 2000, MATH STRUCTURES COMP, V10, P1
   Reynolds J. C., 1983, Information Processing 83. Proceedings of the IFIP 9th World Computer Congress, P513
   Sheard Tim., 1993, FPCA 93, P233
   TAKANO A, 1995, P C FUNCT PROGR COMP, P324
   Wadler P., 1989, FPCA 89 P 4 INT C FU, P347
NR 17
TC 17
Z9 17
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD JUL
PY 2003
VL 13
BP 797
EP 814
DI 10.1017/S0956796802004409
PN 4
PG 18
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 709QN
UT WOS:000184636000003
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Danvy, O
AF Danvy, Olivier
TI Folding left and right matters: Direct style, accumulators, and
   continuations
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB The equivalence of folding left and right over Peano numbers and lists makes it possible to minimalistically inter-derive (1) structurally recursive functions in direct style, (2) structurally tail-recursive functions that use an accumulator, and (3) structurally tail-recursive functions in delimited continuation-passing style, using Ohori and Sasano's lightweight fusion by fixed-point promotion. When the fold-left and the fold-right functions account for primitive iteration for Peano numbers, this equivalence is unconditional. When they account for primitive recursion for Peano numbers, this equivalence is modulo left permutativity of their induction-step parameter - a property which is more general than associativity and commutativity. And when they account for primitive iteration or for primitive recursion over lists, this equivalence is modulo left permutativity of their induction-step parameter if these two fold functions have the same type. Since the 1980s, however, the two fold functions for lists do not have the same type: the arguments for their induction-step parameter are swapped, a re-ordering that complicated Bird and Wadler's duality theorems and whose history is reviewed in an appendix. Without this re-ordering, Bird and Wadler's second duality theorem more visibly accounts for "re-bracketing," which is a key step to make recursive programs tail recursive in the general area of program development, from Cooper in the 1960s and onwards.
C1 [Danvy, Olivier] Natl Univ Singapore, Yale NUS Coll, Singapore, Singapore.
   [Danvy, Olivier] Natl Univ Singapore, Sch Comp, Singapore, Singapore.
C3 National University of Singapore; Yale NUS College; National University
   of Singapore
RP Danvy, O (corresponding author), Natl Univ Singapore, Yale NUS Coll, Singapore, Singapore.; Danvy, O (corresponding author), Natl Univ Singapore, Sch Comp, Singapore, Singapore.
EM danvy@acm.org
CR [Anonymous], 1989, Studies in Logic and the Foundations of Mathematics
   Bailey R, 1990, FUNCTIONAL PROGRAMMI
   Barron D.W., 1966, Advances in Programming and Non-Numerical Computation, P49
   Bauer F. L., 1982, TEXTS MONOGRAPHS COM
   Bertot Y., 2004, TEXT THEORET COMP S
   Bird R., 1988, INTRO FUNCTIONAL PRO
   Bird R., 2010, Pearls of Functional Algorithm Design
   Bird Richard S., 1986, TECHNICAL MONOGRAPH
   Boiten E. A., 1992, THESIS U NIJMEGEN NI
   Burge WilliamH., 1975, RECURSIVE PROGRAMMIN
   Burstall R. M., 1980, C RECORD 1980 LISP C, P136
   BURSTALL RM, 1977, J ACM, V24, P44, DOI 10.1145/321992.321996
   BURSTALL RM, 1969, COMPUT J, V12, P41, DOI 10.1093/comjnl/12.1.41
   Church Alonzo., 1941, The Calculi of Lambda-conversion. Annals of mathematics studies
   Clack C., 1995, PROGRAMMING MIRANDA
   COOPER DC, 1966, COMPUT J, V9, P45, DOI 10.1093/comjnl/9.1.45
   DANVY O, 1990, PROCEEDINGS OF THE 1990 ACM CONFERENCE ON LISP AND FUNCTIONAL PROGRAMMING, P151, DOI 10.1145/91556.91622
   Danvy O, 2019, J FUNCT PROGRAM, V29, DOI 10.1017/S0956796819000042
   Dowek G., 2006, M MODERN TYPE THEORY
   Field A.J., 1988, FUNCTIONAL PROGRAMMI
   Gibbons J., 1996, Journal of Functional Programming, V6, P657, DOI 10.1017/S0956796800001908
   Giesl J, 2000, LECT NOTES COMPUT SC, V1817, P293, DOI 10.1007/10720327_17
   GORDON MJC, 1979, COMPUT J, V22, P376, DOI 10.1093/comjnl/22.4.376
   Henson M. C., 1987, ELEMENTS FUNCTIONAL
   Hermes H, 1965, ENUMERABILITY DECIDA, V127
   HUGHES RJM, 1986, INFORM PROCESS LETT, V22, P141, DOI 10.1016/0020-0190(86)90059-1
   Hutton G., 1999, Journal of Functional Programming, V9, P355, DOI 10.1017/S0956796899003500
   Hutton G, 2010, J FUNCT PROGRAM, V20, P353, DOI 10.1017/S0956796810000122
   Iverson K. E., 1962, A Programming Language
   KLEENE SC, 1981, ANN HIST COMPUT, V3, P52
   Kleene SC., 1952, Introduction to metamathematics
   Meertens L., 1992, Formal Aspects of Computing, V4, P413, DOI 10.1007/BF01211391
   MEIJER E, 1991, LECT NOTES COMPUT SC, V523, P124
   Ohori A, 2007, ACM SIGPLAN NOTICES, V42, P143, DOI 10.1145/1190215.1190241
   Oliveira J. N, 2020, HASLAB012020 TR
   Reade Chris., 1989, Elements of functional programming
   Stoy Joseph E., 1977, DENOTATIONAL SEMANTI
   Strachey C., 1961, ARCHIVE WORKING PAPE
   Thompson S., 1995, INT COMPUTER SCI SER
   Thompson S., 1991, INT COMPUTER SCI SER
   TURNER D, 1986, SIGPLAN NOTICES, V21, P158, DOI 10.1145/15042.15053
   Turner D. A, 1990, TEXTS MONOGRAPHS COM, P390
   Turner D. A., 1982, FUNCTIONAL PROGRAMMI
   TURNER DA, 1985, LECT NOTES COMPUT SC, V201, P1
   Turner David A., 1976, SASL LANGUAGE MANUAL
NR 45
TC 0
Z9 0
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD FEB 14
PY 2023
VL 33
AR e2
DI 10.1017/S0956796822000156
PG 40
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 8X3PB
UT WOS:000931926500001
OA hybrid
DA 2024-07-18
ER

PT J
AU Brede, N
   Botta, N
AF Brede, Nuria
   Botta, Nicola
TI On the correctness of monadic backward induction
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB In control theory, to solve a finite-horizon sequential decision problem (SDP) commonly means to find a list of decision rules that result in an optimal expected total reward (or cost) when taking a given number of decision steps. SDPs are routinely solved using Bellman's backward induction. Textbook authors (e.g. Bertsekas or Puterman) typically give more or less formal proofs to show that the backward induction algorithm is correct as solution method for deterministic and stochastic SDPs. Botta, Jansson and Ionescu propose a generic framework for finite horizon, monadic SDPs together with a monadic version of backward induction for solving such SDPs. In monadic SDPs, the monad captures a generic notion of uncertainty, while a generic measure function aggregates rewards. In the present paper, we define a notion of correctness for monadic SDPs and identify three conditions that allow us to prove a correctness result for monadic backward induction that is comparable to textbook correctness proofs for ordinary backward induction. The conditions that we impose are fairly general and can be cast in category-theoretical terms using the notion of Eilenberg-Moore algebra. They hold in familiar settings like those of deterministic or stochastic SDPs, but we also give examples in which they fail. Our results show that backward induction can safely be employed for a broader class of SDPs than usually treated in textbooks. However, they also rule out certain instances that were considered admissible in the context of Botta et al. 's generic framework. Our development is formalised in Idris as an extension of the Botta et al. framework and the sources are available as supplementary material.
C1 [Brede, Nuria] Univ Potsdam, Potsdam, Germany.
   [Brede, Nuria; Botta, Nicola] Potsdam Inst Climate Impact Res, Potsdam, Germany.
   [Botta, Nicola] Chalmers Univ Technol, Gothenburg, Sweden.
C3 University of Potsdam; Potsdam Institut fur Klimafolgenforschung;
   Chalmers University of Technology
RP Brede, N (corresponding author), Univ Potsdam, Potsdam, Germany.; Brede, N (corresponding author), Potsdam Inst Climate Impact Res, Potsdam, Germany.
EM brede@uni-potsdam.de; botta@pik-potsdam.de
OI Botta, Nicola/0000-0002-8923-2734; Brede, Nuria/0000-0003-4435-7960
CR [Anonymous], 2013, P AISB CONV 2013 DO
   [Anonymous], 1999, P IEEE COMP SOC C CI
   Audebaud P, 2009, SCI COMPUT PROGRAM, V74, P568, DOI 10.1016/j.scico.2007.09.002
   BELLMAN R, 1966, SCIENCE, V153, P34, DOI 10.1126/science.153.3731.34
   Bertsekas D. P., 2003, CONVEX ANAL OPTIMIZA
   Bertsekas D. P., 2011, DYNAMIC PROGRAMMING, Vii
   Bertsekas Dimitri, 1996, Athena Scientific, V5
   Bird R., 2020, Algorithm Design with Haskell
   Bird R., 2014, THINKING FUNCTIONALL
   Botta N., J FUNCT PROGRAM
   Botta N., 2016, IDRISLIBS
   Botta N, 2018, EARTH SYST DYNAM, V9, P525, DOI 10.5194/esd-9-525-2018
   Botta N, 2017, LOG METH COMPUT SCI, V13, DOI [10.2168/LMCS-13(1:7)2017, 10.23638/LMCS-13(1:7)2017]
   Botta N, 2017, J FUNCT PROGRAM, V27, P1, DOI 10.1017/S0956796817000156
   Brady E., 2017, Type-Driven Development with Idris
   Brady E, 2013, J FUNCT PROGRAM, V23, P552, DOI 10.1017/S095679681300018X
   Brede N., 2021, CORRECTNESS MONADIC
   deMoor O, 1995, LECT NOTES COMPUT SC, V982, P1, DOI 10.1007/BFb0026809
   Diederich A., 2001, INT ENCY SOCIAL BEHA, P13917, DOI DOI 10.1016/B0-08-043076-7/00636-7
   Erwig M, 2006, J FUNCT PROGRAM, V16, P21, DOI 10.1017/S0956796805005721
   Finus M., 2003, 61 FEEM
   Fric R, 2010, STUD LOGICA, V94, P215, DOI 10.1007/s11225-010-9232-z
   Gintis H, 2007, ECON J, V117, P1280, DOI 10.1111/j.1468-0297.2007.02083.x
   Heitzig J., 2012, SSRN ENV EC EJOURNAL
   Helm C, 2003, J PUBLIC ECON, V87, P2737, DOI 10.1016/S0047-2727(02)00138-X
   Ionescu C, 2009, THESIS FREIE U BERLI
   Jacobs B, 2011, THEOR COMPUT SCI, V412, P3323, DOI 10.1016/j.tcs.2011.04.005
   Mac Lane S., 1978, CATEGORIES WORKING M, DOI [10.1007/978-1-4757-4721-8, DOI 10.1007/978-1-4757-4721-8]
   Mercure J.-F., 2020, C EENRG WORKING PAPE, V4, P1
   Puterman ML., 2014, MARKOV DECISION PROC, DOI DOI 10.1002/9780470316887
   Wadler P, 2015, COMMUN ACM, V58, P75, DOI 10.1145/2699407
NR 31
TC 3
Z9 3
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD OCT 29
PY 2021
VL 31
AR e26
DI 10.1017/S0956796821000228
PG 39
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA XB4GD
UT WOS:000721287900001
OA Green Submitted, Green Published, hybrid
DA 2024-07-18
ER

PT J
AU New, MS
   Fetscher, B
   Findler, RB
   Mccarthy, J
AF New, Max S.
   Fetscher, Burke
   Findler, Robert Bruce
   Mccarthy, Jay
TI Fair enumeration combinators
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB Enumerations represented as bijections between the natural numbers and elements of some given type have recently garnered interest in property-based testing because of their efficiency and flexibility. There are, however, many ways of defining these bijections, some of which are better than others. This paper offers a new property of enumeration combinators called fairness that identifies enumeration combinators that are better suited to property-based testing. Intuitively, the result of a fair combinator indexes into its argument enumerations equally when constructing its result. For example, extracting the nth element from our enumeration of three-tuples indexes about 3 root n elements into each of its components instead of, say, indexing 2 root n into one and 4 root n into the other two, as you would if a three-tuple were built out of nested pairs. Similarly, extracting the nth element from our enumeration of a three-way union returns an element that is n/3 into one of the argument enumerators. The paper presents a semantics of enumeration combinators, a theory of fairness, proofs establishing fairness of our new combinators and that some combinations of fair combinators are not fair. We also report on an evaluation of fairness for the purpose of finding bugs in programming-language models. We show that fair enumeration combinators have complementary strengths to an existing, well-tuned ad hoc random generator (better on short time scales and worse on long time scales) and that using unfair combinators is worse across the board.
C1 [New, Max S.] Northeastern Univ, Boston, MA 02115 USA.
   [Fetscher, Burke; Findler, Robert Bruce] Northwestern Univ, Evanston, IL 60208 USA.
   [Mccarthy, Jay] UMass Lowell, Lowell, MA USA.
C3 Northeastern University; Northwestern University; University of
   Massachusetts System; University of Massachusetts Lowell
RP New, MS (corresponding author), Northeastern Univ, Boston, MA 02115 USA.
EM maxnew@ccs.neu.edu; burke.fetscher@eecs.northwestern.edu;
   robby@eecs.northwestern.edu; jay@racket-lang.org
RI Findler, Robert/B-7145-2009
FU Division Of Computer and Network Systems; Direct For Computer & Info
   Scie & Enginr [1405756] Funding Source: National Science Foundation
CR [Anonymous], COMM ACM
   Appel AW, 2012, J AUTOM REASONING, V49, P453, DOI 10.1007/s10817-011-9226-1
   Bulwahn L., 2012, P INT C CERT PROGR P
   Classen K., 2000, P INT C FUNCT PROGR
   Duregard J., 2012, P HASK S
   Felleisen M., 2009, Semantics Engineering with PLT Redex
   Flatt M., 2010, PLTTR20101 PLT
   Kennedy A. J., 2010, J FUNCT PROGRAM, V22, P4
   Klein C., 2012, P S PRINC PROGR LANG
   Klein C., 2013, HIGHER ORDER SYMBOL
   Klein Casey., 2009, Proc. Scheme and Functional Programming, P26
   Kuraj I., 2014, P SCAL WORKSH
   Kuraj I., 2015, P OBJ OR PROGR SYST
   Matthews J., 2004, P INT C REW TECHN AP
   Palka Michal, 2011, IEEEACM INT WORKSHOP
   Palka Michal H., 2012, THESIS
   Runciman C., 2008, P HSK S
   Szudzik M., 2006, ELEGANT PAIRING FUNC
   Takikawa A, 2013, LECT NOTES COMPUT SC, V7792, P229, DOI 10.1007/978-3-642-37036-6_14
   Tarau P., 2012, P INT C LOG PROGR
   Tarau P., 2013, THEORY PRACT LOG PRO, V13, P4
   Yang X., 2011, P PROGR LANG DES IMP
NR 22
TC 5
Z9 6
U1 0
U2 1
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PY 2017
VL 27
AR e19
DI 10.1017/S0956796817000107
PG 29
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA FG1LM
UT WOS:000409557600001
DA 2024-07-18
ER

PT J
AU Rivas, E
   Jaskelioff, M
AF Rivas, Exequiel
   Jaskelioff, Mauro
TI Notions of computation as monoids
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID ARROWS; MONADS
AB There are different notions of computation, the most popular being monads, applicative functors, and arrows. In this article, we show that these three notions can be seen as instances of a unifying abstract concept: monoids in monoidal categories. We demonstrate that even when working at this high level of generality, one can obtain useful results. In particular, we give conditions under which one can obtain free monoids and Cayley representations at the level of monoidal categories, and we show that their concretisation results in useful constructions for monads, applicative functors, and arrows. Moreover, by taking advantage of the uniform presentation of the three notions of computation, we introduce a principled approach to the analysis of the relation between them.
C1 [Rivas, Exequiel] Consejo Nacl Invest Cient & Tecn, Ctr Int Franco Argentino Ciencias Informac & Sist, Rosario, Santa Fe, Argentina.
   Univ Nacl Rosario, FCEIA, Rosario, Santa Fe, Argentina.
C3 Consejo Nacional de Investigaciones Cientificas y Tecnicas (CONICET);
   National University of Rosario
RP Rivas, E (corresponding author), Consejo Nacl Invest Cient & Tecn, Ctr Int Franco Argentino Ciencias Informac & Sist, Rosario, Santa Fe, Argentina.
EM rivas@cifasis-conicet.gov.ar; jaskelioff@cifasis-conicet.gov.ar
OI Rivas, Exequiel/0000-0002-2114-624X
FU Agencia Nacional de Promocion Cientifica y Tecnologica (PICT); Consejo
   Nacional de Investigaciones Cientificas y Tecnicas (CONICET)
FX This work was partially funded by the Agencia Nacional de Promocion
   Cientifica y Tecnologica (PICT 2009-15) and Consejo Nacional de
   Investigaciones Cientificas y Tecnicas (CONICET).
CR Abbott M, 2003, LECT NOTES COMPUT SC, V2620, P23
   Adamek Jiri, 1994, Locally Presentable and Accessible Categories
   Altenkirch T, 2010, LECT NOTES COMPUT SC, V6014, P297, DOI 10.1007/978-3-642-12032-9_21
   [Anonymous], 1980, Bulletin of the Australian Mathematical Society, V22, P1, DOI [10.1017/S0004972700006353, DOI 10.1017/S0004972700006353]
   [Anonymous], 1854, The London, Edinburgh, and Dublin Philosophical Magazine and Journal of Science
   Asada K, 2010, ELECTRON NOTES THEOR, V264, P25, DOI 10.1016/j.entcs.2010.07.012
   Asada K, 2010, MSFP 2010: PROCEEDINGS OF THE 2010 ACM SIGPLAN WORKSHOP ON MATHEMATICALLY STRUCTURED FUNCTIONAL PROGRAMMING, P33
   Atkey R, 2011, ELECTRON NOTES THEOR, V229, P19, DOI 10.1016/j.entcs.2011.02.014
   BAINBRIDGE ES, 1990, THEOR COMPUT SCI, V70, P35, DOI 10.1016/0304-3975(90)90151-7
   Barr M., 1985, GRUNDLEHREN MATH WIS, V278
   Benabou J., 1973, RAPPORT
   Bird R., 2013, ACM SIGPLAN NOTICES, P25, DOI DOI 10.1145/2503778.2503781
   Capriotti P, 2014, ELECTRON P THEOR COM, P2, DOI 10.4204/EPTCS.153.2
   Danielsson NA, 2006, ACM SIGPLAN NOTICES, V41, P206, DOI 10.1145/1111320.1111056
   Day B., 1973, Bull. Austral. Math. Soc, V8, P1
   Day B. J., 1969, LECT NOTES MATH, V106, P178, DOI [10.1007/BFb0059139, DOI 10.1007/BFB0059139]
   Day Brian, 1970, Lecture Notes in Math., V137, P1, DOI [10.1007/BFb0060438, DOI 10.1007/BFB0060438]
   Day BJ, 2007, J PURE APPL ALGEBRA, V210, P651, DOI 10.1016/j.jpaa.2006.10.019
   DUBUC EJ, 1974, J ALGEBRA, V29, P208, DOI 10.1016/0021-8693(74)90095-7
   HACKETT J, 2015, IEEE S LOG, P115, DOI DOI 10.1109/LICS.2015.21
   Hudak P, 2003, LECT NOTES COMPUT SC, V2638, P159
   Hughes J, 2000, SCI COMPUT PROGRAM, V37, P67, DOI 10.1016/S0167-6423(99)00023-4
   HUGHES RJM, 1986, INFORM PROCESS LETT, V22, P141, DOI 10.1016/0020-0190(86)90059-1
   Hutton G, 2010, J FUNCT PROGRAM, V20, P353, DOI 10.1017/S0956796810000122
   Jacobs B, 2009, J FUNCT PROGRAM, V19, P403, DOI 10.1017/S0956796809007308
   Jacobson N., 2009, BASIC ALGEBRA, VSecond
   Jaskelioff M, 2012, ELECTRON PROC THEOR, P40, DOI 10.4204/EPTCS.76.5
   Jaskelioff M, 2010, THEOR COMPUT SCI, V411, P4441, DOI 10.1016/j.tcs.2010.09.011
   Jaskelioff M, 2009, LECT NOTES COMPUT SC, V5502, P64, DOI 10.1007/978-3-642-00590-9_6
   Jones SP, 2006, ACM SIGPLAN NOTICES, V41, P50
   KELLY GM, 1993, J PURE APPL ALGEBRA, V89, P163, DOI 10.1016/0022-4049(93)90092-8
   Lack S, 2010, APPL CATEGOR STRUCT, V18, P17, DOI 10.1007/s10485-008-9167-y
   Li P, 2010, THEOR COMPUT SCI, V411, P1974, DOI 10.1016/j.tcs.2010.01.025
   Lindley S, 2011, ELECTRON NOTES THEOR, V229, P97, DOI 10.1016/j.entcs.2011.02.018
   MacLane S., 1978, CATEGORIES WORKING M, V5
   Mcbride C, 2008, J FUNCT PROGRAM, V18, P1, DOI 10.1017/S0956796807006326
   MOGGI E, 1991, INFORM COMPUT, V93, P55, DOI 10.1016/0890-5401(91)90052-4
   Moggi E., 1995, Fundamenta Informaticae, V22, P117
   Moggi E., 1989, Proceedings. Fourth Annual Symposium on Logic in Computer Science (Cat. No.89CH2753-2), P14, DOI 10.1109/LICS.1989.39155
   Pastro C, 2008, THEOR APPL CATEG, V21, P61
   Paterson Ross, 2012, Mathematics of Program Construction. Proceedings 11th International Conference, MPC 2012, P300, DOI 10.1007/978-3-642-31113-0_15
   Reynolds JohnC., 1980, Lecture Notes in Computer Science, P211, DOI 10.1007/3-540-10250-7_24
   Rivas E, 2015, PROCEEDINGS OF THE 17TH INTERNATIONAL SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING (PPDP 2015), P196, DOI 10.1145/2790449.2790514
   Swierstra W, 2007, HASKELL'07: PROCEEDINGS OF THE ACM SIGPLAN 2007 HASKELL WORKSHOP, P25, DOI 10.1145/1291201.1291206
   Vizzotto J, 2006, MATH STRUCT COMP SCI, V16, P453, DOI 10.1017/S0960129506005287
   Voigtländer J, 2008, LECT NOTES COMPUT SC, V5133, P388
NR 46
TC 12
Z9 12
U1 0
U2 1
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PY 2017
VL 27
AR e21
DI 10.1017/S0956796817000132
PG 42
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA FJ3BS
UT WOS:000412605700001
OA Green Published, Green Submitted
DA 2024-07-18
ER

PT J
AU Bergstrom, L
   Fluet, M
   Rainey, M
   Reppy, J
   Shaw, A
AF Bergstrom, Lars
   Fluet, Matthew
   Rainey, Mike
   Reppy, John
   Shaw, Adam
TI Lazy tree splitting
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID PARALLELISM; IMPLEMENTATION; TIME
AB Nested data-parallelism (NDP) is a language mechanism that supports programming irregular parallel applications in a declarative style. In this paper, we describe the implementation of NDP in Parallel ML (PML), which is a part of the Manticore system. One of the main challenges of implementing NDP is managing the parallel decomposition of work. If we have too many small chunks of work, the overhead will be too high, but if we do not have enough chunks of work, processors will be idle. Recently, the technique of Lazy Binary Splitting was proposed to address this problem for nested parallel loops over flat arrays. We have adapted this technique to our implementation of NDP, which uses binary trees to represent parallel arrays. This new technique, which we call Lazy Tree Splitting (LTS), has the key advantage of performance robustness, i.e., it does not require tuning to get the best performance for each program. We describe the implementation of the standard NDP operations using LTS and present experimental data that demonstrate the scalability of LTS across a range of benchmarks.
C1 [Bergstrom, Lars; Reppy, John; Shaw, Adam] Univ Chicago, Dept Comp Sci, Chicago, IL 60637 USA.
   [Fluet, Matthew] Rochester Inst Technol, Dept Comp Sci, Rochester, NY 14623 USA.
   [Rainey, Mike] Max Planck Inst Software Syst, D-67663 Kaiserslautern, Rheinland Phalz, Germany.
C3 University of Chicago; Rochester Institute of Technology; University of
   Rochester; Max Planck Society
RP Bergstrom, L (corresponding author), Univ Chicago, Dept Comp Sci, Chicago, IL 60637 USA.
EM larsberg@cs.uchicago.edu; mtf@cs.rit.edu; mrainey@mpi-sws.org;
   jhr@cs.uchicago.edu; ams@cs.uchicago.edu
OI Reppy, John/0000-0002-5881-298X
FU National Science Foundation [CCF-0811389, CCF-0811419, CCF-1010568];
   Direct For Computer & Info Scie & Enginr; Division Of Computer and
   Network Systems [1065099] Funding Source: National Science Foundation;
   Division Of Computer and Network Systems; Direct For Computer & Info
   Scie & Enginr [1065002] Funding Source: National Science Foundation
FX We would like to thank the anonymous referees and editor for their
   helpful comments and suggestions. This work was performed in part while
   John Reppy was serving at the National Science Foundation. It was also
   supported in part by National Science Foundation Grants CCF-0811389,
   CCF-0811419, and CCF-1010568. The views and conclusions contained herein
   are those of the authors and should not be interpreted as necessarily
   representing the official policies or endorsements, either expressed or
   implied, of the National Science Foundation or the US Government.
CR [Anonymous], 2008, INT THREAD BUILD BLO
   [Anonymous], 1 WORKSH SOFTW TOOLS
   [Anonymous], 1990, CMUCS90190 SCH COMP
   [Anonymous], 1992, Compiling with Continuations
   [Anonymous], 1997, The Definition of Standard ML
   APPEL AW, 1989, SOFTWARE PRACT EXPER, V19, P171, DOI 10.1002/spe.4380190206
   BARNES J, 1986, NATURE, V324, P446, DOI 10.1038/324446a0
   Blelloch G. E., 1990, VECTOR MODELS DATA P
   Blelloch GE, 1996, COMMUN ACM, V39, P85, DOI 10.1145/227234.227246
   BLELLOCH GE, 1994, J PARALLEL DISTR COM, V21, P4, DOI 10.1006/jpdc.1994.1038
   Blelloch GE, 1996, ACM SIGPLAN NOTICES, V31, P213, DOI 10.1145/232629.232650
   Blumofe RD, 1999, J ACM, V46, P720, DOI 10.1145/324133.324234
   BOEHM HJ, 1995, SOFTWARE PRACT EXPER, V25, P1315, DOI 10.1002/spe.4380251203
   Burton F.W., 1981, P 1981 C FUNCTIONAL, P187
   Carver T, 2010, MAGNY COURS DIRECT C
   Chakravarty M., 2007, PROC WORKSHOP DECLAR, P10
   Chakravarty Manuel M. T., 2008, P ACM SIGPLAN WORKSH
   CHATTERJEE S, 1993, ACM T PROGR LANG SYS, V15, P400, DOI 10.1145/169683.174152
   Conway P, 2010, IEEE MICRO, V30, P16, DOI 10.1109/MM.2010.31
   Fluet M, 2007, ML'07: PROCEEDINGS OF THE 2007 WORKSHOP ON ML, P15
   Fluet M, 2008, ACM SIGPLAN NOTICES, V43, P241, DOI 10.1145/1411203.1411239
   Fluet M, 2008, ACM SIGPLAN NOTICES, V43, P119, DOI 10.1145/1411203.1411224
   Fluet Matthew., 2007, Proceedings of the 2007 Workshop on Declarative Aspects of Multicore Programming, DAMP '07, P37
   Frieo M., 1998, P SIGPLAN C PROGR LA, P212
   Ghuloum Anwar., 2007, CT FLEXIBLE PARALLEL
   HALSTEAD RH, 1984, 1984 ACM S LISP FUNC, P9
   Hinze R, 2006, J FUNCT PROGRAM, V16, P197, DOI 10.1017/S0956796805005769
   Huet G., 1997, Journal of Functional Programming, V7, P549, DOI 10.1017/S0956796897002864
   Jones SP, 2008, LECT NOTES COMPUT SC, V5356, P138
   Keller Gabriele, 1999, Ph.D. Dissertation
   Leiserson CE, 2009, DES AUT CON, P522
   Leshchinskiy R., 2005, THESIS TU BERLIN BER
   Loidl H.-W., 1995, Functional Programming, P8
   Lopez P, 1996, J SYMB COMPUT, V21, P715, DOI 10.1006/jsco.1996.0038
   McBride C, 2008, ACM SIGPLAN NOTICES, V43, P287, DOI 10.1145/1328897.1328474
   MLton, MLTON STAND ML COMP
   Narlikar GJ, 1999, ACM T PROGR LANG SYS, V21, P138, DOI 10.1145/314602.314607
   Nikhil R.S., 1991, Id language reference manual
   Plummer HC, 1910, MON NOT R ASTRON SOC, V71, P0460
   Project Scandal, 2012, LIB PARALLEL ALGORIT
   Rainey M., 2009, SEMANTICS ENG PLT RE
   Rainey M, 2007, THESIS U CHICAGO ILL
   Robison A., 2008, P IEEE INT S PAR DIS
   Tick E., 1993, INT C 5 GEN COMP SYS, P271
   Trinder Philip W., 1998, J FUNCTIONAL PROGRAM, V8, P23, DOI DOI 10.1017/S0956796897002967
   Tzannes A, 2010, ACM SIGPLAN NOTICES, V45, P179, DOI 10.1145/1837853.1693479
   Weeks S, 2006, ML 06 WORKSH
NR 47
TC 7
Z9 7
U1 0
U2 1
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD JUL-SEP
PY 2012
VL 22
SI SI
BP 382
EP 438
DI 10.1017/S0956796812000172
PN 4-5
PG 57
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 004HQ
UT WOS:000308672600002
OA Bronze
DA 2024-07-18
ER

PT J
AU Garcia, R
   Jarvi, J
   Lumsdaine, A
   Siek, J
   Willcock, J
AF Garcia, Ronald
   Jarvi, Jaakko
   Lumsdaine, Andrew
   Siek, Jeremy
   Willcock, Jeremiah
TI An extended comparative study of language support for generic
   programming
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB Many modern programming languages support basic generics, sufficient to implement type-safe polymorphic containers. Some languages have moved beyond this basic support, and in. doing so have enabled a broader, more powerful form of generic programming. This paper reports on a comprehensive comparison of facilities for generic programming in eight programming languages: C++, Standard ML, Objective Caml, Haskell, Eiffel, Java, C# (with its proposed generics extension), and Cecil. By implementing a substantial example in each of these languages, we illustrate how the basic roles of generic programming can be represented in each language. We also identify eight language properties that support this broader view of generic programming: support for multi-type concepts, multiple constraints on type parameters, convenient associated type access, constraints on associated types, retroactive modeling, type aliases, separate compilation of algorithms and data structures, and implicit argument type deduction for generic algorithms. We find that these features are necessary to avoid awkward designs, poor maintainability, and painfully verbose code. As languages increasingly support generics, it is important that language designers understand the features necessary to enable the effective use of generics and that their absence can cause difficulties for programmers.
C1 Indiana Univ, Open Syst Lab, Bloomington, IN 47401 USA.
   Texas A&M Univ, College Stn, TX USA.
   Rice Univ, Houston, TX 77251 USA.
C3 Indiana University System; Indiana University Bloomington; Texas A&M
   University System; Texas A&M University College Station; Rice University
RP Garcia, R (corresponding author), Indiana Univ, Open Syst Lab, Bloomington, IN 47401 USA.
EM garcia@osl.iu.edu; jarvi@cs.tamu.edu; lums@osl.iu.edu;
   jeremy.g.siek@rice.edu; jewillco@osl.iu.edu
RI Siek, Jeremy Graham/ABG-8845-2020
OI Siek, Jeremy/0000-0002-9894-4856; Lumsdaine, Andrew/0000-0002-9153-6622
CR [Anonymous], 2005, P GT2005 ASME TURB E
   [Anonymous], 1997, The Definition of Standard ML
   Austern MatthewH., 1998, Generic programming and the STL: Using and extending the C++ Standard Template Library
   Backhouse R, 1999, LECT NOTES COMPUT SC, V1608, P28
   BAUMGARTNER G, 2002, OSUCISRC501TR08
   Bellman R., 1958, Q APPL MATH, V16, P87
   Bracha G, 1998, ACM SIGPLAN NOTICES, V33, P183, DOI 10.1145/286942.286957
   Bruce KimB., 1996, Typing in Object-Oriented Languages: Achieving Expressiveness and Safety
   Chakravarty Manuel M. T., 2005, ICFP 05
   CHAMBERS C, 2002, CECIL LANGUAGE SPECI
   CLEELAND C, 1997, SOFTWARE PATTERN SER, V3
   COOK WR, 1989, COMPUT J, V32, P305, DOI 10.1093/comjnl/32.4.305
   Dijkstra E. W., 1959, NUMER MATH, V1, P269, DOI [10.1007/BF01386390, DOI 10.1007/BF01386390]
   *ECMA, 2005, UNPUB STAND EIFF AN
   Gamma E., 1994, Design patterns: Elements of reusable object-oriented software
   GARCIA R, 2003, OOPSLA 03, P115
   Gosling J., 2005, Java Language Specification, Vthird
   Haack C, 2003, LECT NOTES COMPUT SC, V2618, P284
   Hinze R, 2003, LECT NOTES COMPUT SC, V2793, P1
   HOWARD M, 2003, TYPE SAFE COVARIANCE
   JARVI J, 2005, IN PRESS OOPSLA 05
   JAZAYERI M, 1998, DAGST SEM GEN PROGR
   Jeuring J., 1996, LECT NOTES COMPUTER, V1129, P68
   Jones MP, 2000, LECT NOTES COMPUT SC, V1782, P230
   JONES SP, 1999, HASKELL 98 NONSTRICT
   JONES SP, 1997, P 2 HASK WORKSH
   Kiczales G, 1997, LECT NOTES COMPUT SC, V1241, P220, DOI 10.1007/BFb0053381
   Kiczales Gregor, 2001, LNCS, V2072, P327, DOI DOI 10.1007/3-540-45337-718
   Läufer K, 2000, COMPUT J, V43, P469, DOI 10.1093/comjnl/43.6.469
   LEE LQ, 1999, OOPSLA 99 C P ACM, P399
   LEROY X, 2003, OBJECTIVE CAML DOCUM
   Leroy Xavier., 2000, The Objective Caml system
   Litvinov V., 1998, OOPSLA 1998, V33, P388
   MAGNUSSON B, 1991, J OBJECT ORIENTED PR, V4
   MEYER B, 1995, OOPSLA 95, P20
   Meyer B., 2002, J OBJECT TECHNOLOGY, V1, P95
   Meyer B., 1992, Eiffel: The Language
   *MICR CORP, 2005, UNPBU C VERS 2 0 SPE
   *MICR CORP, 2002, GEN C PART GYR DISTR
   MYERS NC, 1995, TRAITS NEW USEFUL TE
   PRIM RC, 1957, AT&T TECH J, V36, P1389, DOI 10.1002/j.1538-7305.1957.tb01515.x
   RAMSEY N, 2005, IN PRESS ICFP 05
   Remy D., 1997, P POPL 97, P40
   REMY D, 1998, UNPUB REALITY VIRTUA
   SIEK J, 2005, IN PRESS GPCE 05
   Siek J., 2002, The Boost Graph Library: User Guide and Reference Manual
   SIEK J, 2005, THESIS INDIANA U
   SIEK J, 2005, N1758050018 ISOIEC J
   SIEK J, 2000, 1 WORKSH C TEMPL PRO
   STROUSTRUP B, 2005, N1782050042 ISOIEC J
   Stroustrup B., 1994, The Design and Evolution of C++
   TORGERSEN M, 2000, SAC 04, P1289
   [No title captured]
   [No title captured]
   [No title captured]
NR 55
TC 30
Z9 39
U1 0
U2 2
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD MAR
PY 2007
VL 17
BP 145
EP 205
DI 10.1017/S0956796806006198
PN 2
PG 61
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 148RQ
UT WOS:000245092700001
OA Bronze
DA 2024-07-18
ER

PT J
AU Krishnamurthi, S
AF Krishnamurthi, Shriram
TI Automata via macros
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB Lisp programmers have long used macros to extend their language. Indeed, their success has inspired macro notations for a variety of other languages, such as C and Java. There is, however, a paucity of effective pedagogic examples of macro use. This paper presents a short, non-trivial example that implements a construct not already found in mainstream languages. Furthermore, it motivates the need for tail-calls, as opposed to mere tail-recursion, and illustrates how support for tail-call optimization is crucial to support a natural style of macro-based language extension.
C1 Brown Univ, Providence, RI 02912 USA.
C3 Brown University
RP Krishnamurthi, S (corresponding author), Brown Univ, Providence, RI 02912 USA.
EM sk@cs.brown.edu
OI Krishnamurthi, Shriram/0000-0001-5184-1975
CR [Anonymous], 1985, Structure and Interpretation of Computer Programs
   Appel A.W., 1991, Compiling with Continuations
   BERNSTEIN RL, 1985, SOFTWARE PRACT EXPER, V15, P1021, DOI 10.1002/spe.4380151009
   BOWEN J, 1995, INFORM SOFTWARE TECH, V37, P269, DOI 10.1016/0950-5849(95)99362-Q
   Christensen RM, 2004, MECH TIME-DEPEND MAT, V8, P1, DOI 10.1023/B:MTDM.0000027685.91467.98
   CLINGER WD, 1998, ACM SIGPLAN C PROGR, P174
   Dybvig R. K., 1993, LISP and Symbolic Computation, V5, P295, DOI 10.1007/BF01806308
   DYBVIG RK, 1996, SCHEME PROGRAMMING L
   Felleisen Matthias, 2001, How to Design Programs
   Findler RB, 2002, J FUNCT PROGRAM, V12, P159, DOI 10.1017/S0956796801004208
   FISCHER MJ, 1972, ACM SIGPLAN NOTICES, V7, P104
   FLATT M, 2002, ACM SIGPLAN INT C FU
   Harper R., 1999, Journal of Functional Programming, V9, P463, DOI 10.1017/S0956796899003378
   HAYNES CT, 1987, J LOGIC PROGRAM, V4, P157, DOI 10.1016/0743-1066(87)90016-1
   Hoare C. A. R., 1974, Computer systems reliability: internation state of the art report, P505
   HUDAK P, 1998, INT C SOFTW REUS
   Kelsey R, 1998, ACM SIGPLAN NOTICES, V33, P26, DOI 10.1145/290229.290234
   KOHLBECKER EE, 1986, ACM S LISP FUNCT PRO
   KOHLBECKER EE, 1987, ACM SIGPLAN SIGACT S, P77
   KOHLBECKER EE, 1986, THESIS INDIANA U
   Kohlbecker Eugene., 1986, P 1986 ACM C LISP FU, P151
   Krishnamurthi S, 2000, LECT NOTES COMPUT SC, V1799, P105
   Krishnamurthi Shriram, 2001, Ph. D. Dissertation
   Smaragdakis Y., 1998, ECOOP'98 - Object-Oriented Programming. 12th European Conference. Proceedings, P550, DOI 10.1007/BFb0054107
   Steele G.L., 1977, Proceedings of the 1977 Annual ACM Conference, P153
NR 25
TC 9
Z9 10
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD MAY
PY 2006
VL 16
BP 253
EP 267
DI 10.1017/S0956796805005733
PN 3
PG 15
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 052MS
UT WOS:000238238400001
OA Bronze
DA 2024-07-18
ER

PT J
AU Hinze, R
   Paterson, R
AF Hinze, R
   Paterson, R
TI Finger trees: a simple general-purpose data structure
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB We introduce 2-3 finger trees, a functional representation of persistent sequences supporting access to the ends in amortized constant time, and concatenation and splitting in time logarithmic in the size of the smaller piece. Representations achieving these bounds have appeared previously, but 2-3 finger trees are much simpler, as are the operations on them. Further, by defining the split operation in a general form, we obtain a general purpose data structure that can serve as a sequence, priority queue, search tree, priority search queue and more.
C1 Univ Bonn, Inst Informat 3, D-53117 Bonn, Germany.
   City Univ London, Dept Comp, London EC1V 0HB, England.
C3 University of Bonn; City University London
RP Univ Bonn, Inst Informat 3, Romerstr 164, D-53117 Bonn, Germany.
EM ralf@informatik.uni-bonn.de; ross@soi.city.ac.uk
CR [Anonymous], 1998, Purely Functional Data Structures
   [Anonymous], 2003, Haskell 98 language and libraries: the revised report
   BIRD R, 1998, LECT NOTES COMPUTER, V1422, P52, DOI DOI 10.1007/BFB0054285
   Cormen Thomas H., 2001, INTRO ALGORITHMS
   DRISCOLL JR, 1989, J COMPUT SYST SCI, V38, P86, DOI 10.1016/0022-0000(89)90034-2
   Guibas L., 1977, P 9 ANN ACM S THEOR, P49, DOI DOI 10.1145/800105.803395
   Hinze R, 2003, LECT NOTES COMPUT SC, V2793, P1
   Huet Gerard P., 1997, Journal of Functional Programming, V7, P549
   JONES SP, 1997, P HASK WORKSH AMST N
   Kaplan H., 1996, Proceedings of the Twenty-Eighth Annual ACM Symposium on the Theory of Computing, P202, DOI 10.1145/237814.237865
   Kaplan H., 1995, Proceedings of the Twenty-Seventh Annual ACM Symposium on the Theory of Computing, P93, DOI 10.1145/225058.225090
   MCCREIGHT EM, 1985, SIAM J COMPUT, V14, P257, DOI 10.1137/0214021
   MEERTENS L, 1996, LECT NOTES COMPUTER, V1140, P1
   MOFFAT A, 1992, ISAAC, V650, P499
   MYCROFT A, 1984, LECT NOTES COMPUT SC, V167, P217
   Okasaki C, 1997, ACM SIGPLAN NOTICES, V32, P66, DOI 10.1145/258949.258956
   Okasaki C, 2000, ACM SIGPLAN NOTICES, V35, P131, DOI 10.1145/357766.351253
   SLEATOR DD, 1985, J ACM, V32, P652, DOI 10.1145/3828.3835
   TSAKALIDIS AK, 1985, INFORM CONTROL, V67, P173, DOI 10.1016/S0019-9958(85)80034-6
NR 19
TC 54
Z9 61
U1 0
U2 1
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD MAR
PY 2006
VL 16
BP 197
EP 217
DI 10.1017/S0956796805005769
PN 2
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 015TN
UT WOS:000235574000004
OA Bronze
DA 2024-07-18
ER

PT J
AU Banerjee, A
   Naumann, DA
AF Banerjee, A
   Naumann, DA
TI Stack-based access control and secure information flow
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID INFERENCE
AB Access control mechanisms are often used with the intent of enforcing confidentiality and integrity policies, but few rigorous connections have been made between information flow and runtime access control. The Java virtual machine and the NET runtime system provide a dynamic access control mechanism in which permissions are granted to program units and a runtime mechanism checks permissions of code in the calling chain. We investigate a design pattern by which this mechanism can be used to achieve confidentiality and integrity goals: a single interface serves callers of more than one security level and dynamic access control prevents release of high information to low callers. Programs fitting this pattern would be rejected by previous flow analyses. We give a static analysis that admits them, using permission-dependent security types. The analysis is given for a class-based object-oriented language with features including inheritance, dynamic binding, dynamically allocated mutable objects, type casts and recursive types. The analysis is shown to ensure a noninterference property formalizing confidentiality and integrity.
C1 Kansas State Univ, Dept Comp & Informat Sci, Manhattan, KS 66506 USA.
   Stevens Inst Technol, Dept Comp Sci, Hoboken, NJ 07030 USA.
C3 Kansas State University; Stevens Institute of Technology
RP Kansas State Univ, Dept Comp & Informat Sci, Manhattan, KS 66506 USA.
EM ab@cis.ksu.edu; naumann@cs.stevens-tech.edu
OI Naumann, David/0000-0002-7634-6150
CR ABADI M, 1999, ACM S PRINC PROGR LA, P147
   Abadi Martin., 2003, Proceedings of the 10th Annual Network and Distributed System Security Symposium, P107
   [Anonymous], P ACM INT C FUNCT PR
   [Anonymous], 1999, P 1999 WORKSH NEW SE
   Arnold K., 1998, JAVA PROGRAMMING LAN
   Banerjee A, 2003, P IEEE CSFW, P155, DOI 10.1109/CSFW.2003.1212711
   Banerjee A, 2002, P IEEE CSFW, P253
   BANERJEE A, 2002, UNPUB ACM S PRINC PR
   BANERJEE A, 2002, ACM S PRINC PROGR LA, P166
   Barthe G, 1999, LECT NOTES COMPUT SC, V1722, P53
   BARTHE G, 2004, LECT NOTES COMPUTER, V2937
   BELL DE, 1973, MTR2547 MITRE CORP
   Boyland J., 2001, ECOOP 2001 - Object-Oriented Programming. 15th European Conference. Proceedings (Lecture Notes in Computer Science Vol.2072), P2
   Chen Z., 2000, JAVA CARD TECHNOLOGY
   DENNING DE, 1977, COMMUN ACM, V20, P504, DOI 10.1145/359636.359712
   erbnk P., 1997, J FUNCT PROGRAM, V7, P557, DOI DOI 10.1017/S0956796897002906
   Ferrari E, 1997, P IEEE S SECUR PRIV, P130, DOI 10.1109/SECPRI.1997.601328
   FOURNET C, 2002, ACM S PRINC PROGR LA, P307
   Goguen J. A., 1982, Proceedings of the 1982 Symposium on Security and Privacy, P11
   GONG L., 1999, INSIDE JAVA 2 PLATFO
   GOUGH J, 2001, COMPILING NET COMMON
   HEINTZE N, 1998, ACM S PRINC PROGR LA, P365
   Hennessy M, 2002, ACM T PROGR LANG SYS, V24, P566, DOI 10.1145/570886.570890
   HOGG J, 1991, SIGPLAN NOTICES, V26, P271
   LAMACCHIA BA, 2003, NET FRAMEWORK SECURI
   LEINO KRM, 2002, ACM T PROGRAM LANG S, V24
   Mantel H, 2001, P IEEE CSFW, P126, DOI 10.1109/CSFW.2001.930142
   McLean J., 1994, Proceedings of 1994 IEEE Computer Society Symposium on Research in Security and Privacy (Cat. No.94CH3444-7), P79, DOI 10.1109/RISP.1994.296590
   Mitchell John C., 1996, Foundation of computing series
   Morrisett G, 1999, ACM T PROGR LANG SYS, V21, P527, DOI 10.1145/319301.319345
   Myers AC, 2004, P IEEE CSFW, P172, DOI 10.1109/CSFW.2004.1310740
   Myers AC, 1998, 1998 IEEE SYMPOSIUM ON SECURITY AND PRIVACY - PROCEEDINGS, P186, DOI 10.1109/SECPRI.1998.674834
   MYERS AC, 1999, ACM S PRINC PROGR LA, P228
   MYERS AC, 1999, IEEE COMP SEC FDN WO, P228
   NAUMANN DA, 2004, UNPUB MACHINE CHECKE
   NECULA GC, 1997, P POPL
   OWRE S, 1992, LECT NOTES ARTIF INT, V607, P748
   Pottier F, 2003, ACM T PROGR LANG SYS, V25, P117, DOI 10.1145/596980.596983
   POTTIER F, 2002, ACM S PRINC PROGR LA, P319
   Pottier FN, 2001, LECT NOTES COMPUT SC, V2028, P30
   Rushby J., 1992, NONINTERFERENCE TRAN
   Sabelfeld A, 2003, IEEE J SEL AREA COMM, V21, P5, DOI 10.1109/JSAC.2002.806121
   Sabelfeld A., 2001, Higher-Order and Symbolic Computation, V14, P59, DOI 10.1023/A:1011553200337
   Sabelfeld A, 2000, P IEEE CSFW, P200, DOI 10.1109/CSFW.2000.856937
   SKALKA C, 2000, P 5 ACM SIGPLAN INT, P34
   Smith G, 2001, P IEEE CSFW, P115, DOI 10.1109/CSFW.2001.930141
   SMITH G, 1998, ACM S PRINC PROGR LA, P355
   Stoughton A., 1981, Proceedings of the 1981 Symposium on Security and Privacy, P9
   STRECKER M, 2003, FORMAL ANAL INFORMAT
   Sun Q, 2004, LECT NOTES COMPUT SC, V3148, P84
   Vitek J, 2001, SOFTWARE PRACT EXPER, V31, P507, DOI 10.1002/spe.369
   Volpano D., 1997, TAPSOFT '97: Theory and Practice of Software Development. 7th International Joint Conference CAAP/FASE. Proceedings, P607, DOI 10.1007/BFb0030629
   Volpano D., 1996, Journal of Computer Security, V4, P167
   Volpano D, 1999, LECT NOTES COMPUT SC, V1694, P303
   VOLPANO D, 1999, ELECT NOTES THEOR CO, V20
   WALLACH D, 2000, ACM T SOFTWARE ENG M, V9
   [No title captured]
   [No title captured]
NR 58
TC 77
Z9 89
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD MAR
PY 2005
VL 15
BP 131
EP 177
DI 10.1017/S0956796804005453
PN 2
PG 47
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 912MM
UT WOS:000228082700002
OA Bronze
DA 2024-07-18
ER

PT J
AU Curtis, SA
AF Curtis, SA
TI Marble mingling
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
C1 Univ Stirling, Stirling FK9 4LA, Scotland.
C3 University of Stirling
RP Curtis, SA (corresponding author), Oxford Brookes Univ, Dept Comp, Oxford OX33 1HX, England.
EM s.curtis@cs.stir.ac.uk
CR Brodal G. S., 1996, Journal of Functional Programming, V6, P839, DOI 10.1017/S095679680000201X
   CURTIS S, 1996, THESIS COMPUTING LAB
   Freeman PR, 1979, J APPL STAT, V28, P333
   Okasaki C, 1996, ACM SIGPLAN NOTICES, V31, P62, DOI 10.1145/232629.232636
NR 4
TC 0
Z9 0
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD MAR
PY 2004
VL 14
BP 137
EP 144
PN 2
PG 8
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 809LL
UT WOS:000220638100002
DA 2024-07-18
ER

PT J
AU Fischer, B
   Schumann, J
AF Fischer, B
   Schumann, J
TI AutoBayes: a system for generating data analysis programs from
   statistical models
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article; Proceedings Paper
CT International Workshop on Semantics, Applications, and Implementation of
   Program Generation
CY SEP 20, 2000
CL MONTREAL, CANADA
SP ACM, SIGPLAN
AB Data analysis is an important scientific task which is required whenever information needs to be extracted from raw data. Statistical approaches to data analysis, which use methods from probability theory and numerical analysis, are well-founded but difficult to implement: the development of a statistical data analysis program for any given application is time-consuming and requires substantial knowledge and experience in several areas. In this paper, we describe AUTOBAYEs, a program synthesis system for the generation of data analysis programs from statistical models. A statistical model specifies the properties for each problem variable (i.e. observation or parameter) and its dependencies in the form of a probability distribution. It is a fully declarative problem description, similar in spirit to a set of differential equations. From such a model, AUTOBAYES generates optimized and fully commented C/C++ code which can be linked dynamically into the Matlab and Octave environments. Code is produced by a schema-guided deductive synthesis process. A schema consists of a code template and applicability constraints which are checked against the model during synthesis using theorem proving technology. AUTOBAYEs augments schema-guided synthesis by symbolic-algebraic computation and can thus derive closed form solutions for many problems. It is well-suited for tasks like estimating best-fitting model parameters for the given data. Here, we describe AUTOBAYES'S system architecture, in particular the schema-guided synthesis kernel. Its capabilities are illustrated by a number of advanced textbook examples and benchmarks.
C1 NASA, RIACS, Moffett Field, CA 94035 USA.
C3 National Aeronautics & Space Administration (NASA)
RP NASA, RIACS, Moffett Field, CA 94035 USA.
EM fisch@email.arc.nasa.gov; schumann@email.arc.nasa.gov
OI Fischer, Bernd/0000-0002-1815-218X
CR [Anonymous], 1981, Practical Optimization
   [Anonymous], 2013, Finite mixture distributions
   Berkowitz J., 1979, PHOTOABSORPTION PHOT
   Biggerstaff T. J., 1999, Proceedings of the 1999 International Conference on Software Engineering (IEEE Cat. No.99CB37002), P613, DOI 10.1109/ICSE.1999.841055
   Bishop C. M., 1995, NEURAL NETWORKS PATT
   Blaine L, 1998, 13TH IEEE INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING, PROCEEDINGS, P270, DOI 10.1109/ASE.1998.732672
   BLAKE C, 1998, UCI REPOSITROY MACHI
   BUNTINE WL, 1999, P 5 INT C KNOWL DISC, P372
   Buntine WL, 1994, J ARTIF INTELL RES, V2, P159, DOI 10.1613/jair.62
   *CONTROLSHELL, 1999, CONTR TRI REAL TIM I
   *CTR ATM SCI, 1999, OZ HOL TOUR
   DEMPSTER AP, 1977, J ROY STAT SOC B MET, V39, P1, DOI 10.1111/j.2517-6161.1977.tb01600.x
   Ellman T., 1998, Automated Software Engineering, V5, P291, DOI 10.1023/A:1008604724481
   Fischer B, 2000, LECT NOTES COMPUT SC, V1924, P212
   Frey Brendan J, 1998, ADAP COMP MACH LEARN
   Gelman Andrew., 1995, Texts in Statistical Science
   Green C., 1969, P 1 INT JOINT C ART
   Jordan Michael Irwin, 1999, LEARNING GRAPHICAL M
   KOCH DG, 2000, P SPIE C UV OPT IR S
   Koutsofios Eleftherios., 1996, Drawing graphs with dot
   MARCY GW, 1997, P WORKSH BROWN DWARF
   McLachlan G., 2000, WILEY SER PROB STAT, DOI 10.1002/0471721182
   McLachlan G. J., 1997, The EM Algorithm and Extensions, V473, P486
   Mitchell T. M., 1997, MACHINE LEARNING
   MJOLSNESS E, 2000, NIPS 2000 WORKSH SOF
   MOLER CB, 1987, PC MATLAB USERS GUID
   MURPHY K, 1997, BAYES NET TOOLBOX 2
   MURPHY K, 2000, BAYES NET TOOLBOX 2
   MURPHY M, 1997, PROBABILISTIC REASON
   Press W. H., 2002, Numerical Recipes in C: the Art of Scientific Computing, V2nd ed., DOI DOI 10.1119/1.14981
   SMITH DR, 1990, IEEE T SOFTWARE ENG, V16, P1024, DOI 10.1109/32.58788
   Thomas A., 1992, BAYESIAN STAT, V4, P837
   Waldinger R.J., 1969, P 1 INT JOINT C ART
   WIELEMAKER J, 1998, SWI PROLOG P 1 REFER
   [No title captured]
NR 35
TC 49
Z9 55
U1 0
U2 3
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD MAY
PY 2003
VL 13
BP 483
EP 508
DI 10.1017/S0956796802004562
PN 3
PG 26
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 689BA
UT WOS:000183470700003
OA Green Accepted, Bronze
DA 2024-07-18
ER

PT J
AU Botta, N
   Brede, N
   Jansson, P
   Richter, T
AF Botta, Nicola
   Brede, Nuria
   Jansson, Patrik
   Richter, Tim
TI Extensional equality preservation and verified generic programming
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB In verified generic programming, one cannot exploit the structure of concrete data types but has to rely on well chosen sets of specifications or abstract data types (ADTs). Functors and monads are at the core of many applications of functional programming. This raises the question of what useful ADTs for verified functors and monads could look like. The functorial map of many important monads preserves extensional equality. For instance, if f, g : A -> B are extensionally equal, that is, for all x is an element of A, f x = g x, then map f : List A -> List B and map g are also extensionally equal. This suggests that preservation of extensional equality could be a useful principle in verified generic programming. We explore this possibility with a minimalist approach: we deal with (the lack of) extensional equality in Martin-Lof's intensional type theories without extending the theories or using full-fledged setoids. Perhaps surprisingly, this minimal approach turns out to be extremely useful. It allows one to derive simple generic proofs of monadic laws but also verified, generic results in dynamical systems and control theory. In turn, these results avoid tedious code duplication and ad-hoc proofs. Thus, our work is a contribution toward pragmatic, verified generic programming.
C1 [Botta, Nicola; Brede, Nuria] Potsdam Inst Climate Impact Res, Potsdam, Germany.
   [Botta, Nicola; Jansson, Patrik] Chalmers Univ Technol, Gothenburg, Sweden.
   [Jansson, Patrik] Univ Gothenburg, Gothenburg, Sweden.
   [Richter, Tim] Potsdam Univ, Potsdam, Germany.
C3 Potsdam Institut fur Klimafolgenforschung; Chalmers University of
   Technology; University of Gothenburg; University of Potsdam
RP Botta, N (corresponding author), Potsdam Inst Climate Impact Res, Potsdam, Germany.; Botta, N (corresponding author), Chalmers Univ Technol, Gothenburg, Sweden.
EM botta@pik-potsdam.de; nubrede@pik-potsdam.de; patrikj@chalmers.se;
   tim.richter@uni-potsdam.de
RI Jansson, Patrik/B-1987-2016
OI Jansson, Patrik/0000-0003-3078-1437; Brede, Nuria/0000-0003-4435-7960;
   Botta, Nicola/0000-0002-8923-2734; Richter, Tim/0000-0002-8892-283X
FU European Union's Horizon 2020 research and innovation programme
   [820970]; H2020 Societal Challenges Programme [820970] Funding Source:
   H2020 Societal Challenges Programme
FX The work presented in this paper heavily relies on free software, among
   others on Coq, Idris, Agda, GHC, git, vi, Emacs, LATEX and on the
   FreeBSD and Debian GNU/Linux operating systems. It is our pleasure to
   thank all developers of these excellent products. This is TiPES
   contribution No 38. This project has received funding from the European
   Union's Horizon 2020 research and innovation programme under grant
   agreement No. 820970.
CR Altenkirch T., 2017, SETOID HELL HOMOTOPY
   [Anonymous], 1991, FDN COMPUTING SERIES
   [Anonymous], 1992, 19th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, DOI DOI 10.1145/143165.143169
   Arvidsson A, 2019, LECT NOTES COMPUT SC, V10447, P61, DOI 10.1007/978-3-030-14805-8_4
   Bellman R., 1957, Dynamic programming
   Bird R., 2014, THINKING FUNCTIONALL
   Bird Richard, 1997, Algebra of Programming
   Bishop E., 1967, Foundations of Constructive Analysis
   Blanqui F., 2020, COLOR COQ LIB REWRIT
   Botta N, 2017, J FUNCT PROGRAM, V27, P1, DOI 10.1017/S0956796817000156
   Boulier S, 2017, PROCEEDINGS OF THE 6TH ACM SIGPLAN CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS, CPP'17, P182, DOI 10.1145/3018610.3018620
   Brady E., 2017, Type-Driven Development with Idris
   Brede N, 2021, J FUNCT PROGRAM, V31, DOI 10.1017/S0956796821000228
   Carette J., 2021, NEW CATEGORIES LIB A
   Carette J, 2014, LECT NOTES ARTIF INT, V8543, P252, DOI 10.1007/978-3-319-08434-3_19
   Cohen C., 2018, LEIBNIZ INT P INFORM, DOI [DOI 10.4230/LIPICS.TYPES.2015.5, 10.4230/LIPIcs]
   Danielsson NA, 2006, ACM SIGPLAN NOTICES, V41, P206, DOI 10.1145/1111320.1111056
   deMoor O, 1995, LECT NOTES COMPUT SC, V982, P1, DOI 10.1007/BFb0026809
   Erwig M, 2006, J FUNCT PROGRAM, V16, P21, DOI 10.1017/S0956796805005721
   Fric R, 2010, STUD LOGICA, V94, P215, DOI 10.1007/s11225-010-9232-z
   GNESI S, 1981, J ACM, V28, P737, DOI 10.1145/322276.322285
   HOFMANN M, 1994, IEEE S LOG, P208, DOI 10.1109/LICS.1994.316071
   Hofmann M., 1995, THESIS U EDINBURGH
   Hu JZS, 2021, CPP '21: PROCEEDINGS OF THE 10TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS, P327, DOI 10.1145/3437992.3439922
   Huet G, 2000, FOUNDAT COMPUT, P239
   Ionescu C., 2013, PROC TYPES 2011, V19, P41
   Ionescu C, 2009, THESIS FREIE U BERLI
   Jansson P, 2002, SCI COMPUT PROGRAM, V43, P35, DOI 10.1016/S0167-6423(01)00020-X
   JetBrains Research, 2021, AR THEOR PROV VERS 1
   Jeuring J, 2012, ACM SIGPLAN NOTICES, V47, P49, DOI 10.1145/2430532.2364514
   Jones S.P., 2001, HASK WORKSH, V1, P203
   Kuznetsov Y. A., 1998, ELEMENTS APPL BIFURC, V112
   Manes Ernest G., 1976, Algebraic Theories
   Martin-Lof P., 1984, INTUITIONISTIC TYPE, V9
   Mcbride C, 2008, J FUNCT PROGRAM, V18, P1, DOI 10.1017/S0956796807006326
   Megacz A., 2011, CATEGORY THEORY COQ
   Mu SC, 2009, J FUNCT PROGRAM, V19, P545, DOI 10.1017/S0956796809007345
   Nordstrom B., 1990, PROGRAMMING MARTINLO, V200
   Norell Ulf, 2007, PRACTICAL PROGRAMMIN
   Sozeau M, 2009, J FORMALIZ REASON, V2, P41
   Spitters B., 2017, COQ REPOSITORY NIJME
   Streicher T., 1991, Progress in Theoretical Computer Science, pxii+298
   Streicher T., 1993, THESIS LUDWIG MAXIMI
   Streicher T., 2003, LECT NOTES
   The Coq Development Team, 2021, COQ PROOF ASSISTANT, DOI DOI 10.5281/ZENODO.4501022
   The Idris Community, 2020, DOC IDR LANG
   The Univalent Foundations Program, 2013, Homotopy Type Theory: Univalent Foundations of Mathematics
   Thomas R., 2012, CATASTROPHE THEORY
   Vezzosi ANDREA, 2021, J FUNCT PROGRAM, V31, DOI 10.1017/S0956796821000034
   Voevodsky V., 2021, UNIMATH COMPUTER COM
   von Glehn T., 2015, THESIS U CAMBRIDGE
   Wiegley J., 2018, CATEGORY THEORY COQ
NR 52
TC 2
Z9 2
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD OCT 21
PY 2021
VL 31
AR e24
DI 10.1017/S0956796821000204
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA XB3XO
UT WOS:000721265300001
OA Green Published, hybrid, Green Submitted
DA 2024-07-18
ER

PT J
AU Caldwell, S
   Garnock-Jones, T
   Felleisen, M
AF Caldwell, Sam
   Garnock-Jones, Tony
   Felleisen, Matthias
TI Typed dataspace actors
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID COORDINATION
AB Absatract Actors collaborate via message exchanges to reach a common goal. Experience has shown, however, that pure message-based communication is limiting and forces developers to use design patterns. The recently introduced dataspace actor model borrows ideas from the tuple space realm. It offers a tightly controlled, shared storage facility for groups of actors. In this model, actors assert facts that they wish to share and interests in such assertions. The dataspace notifies interested parties of changes to the set of assertions that they are interested in. Although it is straightforward to add the dataspace model to untyped languages, adding a typed interface is both necessary and challenging. Without restrictions on exchanged data, a faulty actor may propagate erroneous data through a malformed assertion, causing an otherwise well-behaved actor to crash-violating the key principle of failure isolation. A properly designed type system can prevent this scenario and rule out other kinds of uncooperative actors. This paper presents the first structural type system for the dataspace model of actors; it does not address the question of behavioral types for assertion-oriented protocols.
C1 [Caldwell, Sam; Garnock-Jones, Tony; Felleisen, Matthias] Northeastern Univ, Boston, MA 02115 USA.
C3 Northeastern University
RP Caldwell, S (corresponding author), Northeastern Univ, Boston, MA 02115 USA.
EM samc@ccs.neu.edu; tonyg@leastfixedpoint.com; matthias@ccs.neu.edu
OI Caldwell, Sam/0000-0001-7092-8769
FU CISCO; NSF [SHF 1763922, 1518844]; Direct For Computer & Info Scie &
   Enginr; Division of Computing and Communication Foundations [1518844]
   Funding Source: National Science Foundation
FX The research was partially supported by CISCO and NSF grants SHF 1763922
   and 1518844.
CR Agha G., 1986, ACTORS AMODEL CONCUR
   [Anonymous], 1999, Communicating and Mobile Systems: The Calculus
   [Anonymous], 2010, PLTTR20101 INC
   [Anonymous], 2017, JAVASPACES SERVICE S
   Armstrong J., 1994, PROGRAMMING ERLANG
   Armstrong Joe, 2003, Making reliable distributed systems in the presence of software errors
   Caires L, 2009, LECT NOTES COMPUT SC, V5502, P285, DOI 10.1007/978-3-642-00590-9_21
   CARRIERO NJ, 1994, PARALLEL COMPUT, V20, P633, DOI 10.1016/0167-8191(94)90032-9
   Chang S, 2017, ACM SIGPLAN NOTICES, V52, P694, DOI 10.1145/3093333.3009886
   Clebsch Sylvan, 2015, INT WORKSH PROGR BAS
   CLOCKSIN WF, 1981, PROGRAMMING PROLOG
   Crafa Silvia, 2012, TECHNICAL REPORT
   de'Liguoro U., 2018, ECOOP
   Dotty Compiler Team, 2019, UN TYP MOR DET
   ecma, 2015, ECMASCRIPT LANG SPEC
   Englemore R., 1988, BLACKBOARD SYSTEMS
   Eugster PT, 2003, ACM COMPUT SURV, V35, P114, DOI 10.1145/857076.857078
   Felleisen M., 2009, Semantics Engineering with PLT Redex
   Flatt M, 2012, J FUNCT PROGRAM, V22, P181, DOI 10.1017/S0956796812000093
   Garnock-Jones T., 2017, THESIS
   Garnock-Jones T, 2016, LECT NOTES COMPUT SC, V9632, P310, DOI 10.1007/978-3-662-49498-1_13
   Garnock-Jones T, 2014, LECT NOTES COMPUT SC, V8410, P473
   Gelernter D., 1985, ACM T PROGRAM LANG S
   Girard Jean-Yves., 1971, P 2 SCANDINAVIAN LOG, V63, P63
   Haller P, 2016, ACM SIGPLAN NOTICES, V51, P272, DOI 10.1145/3022671.2984042
   He J, 2014, INTERNATIONAL ACADEMIC CONFERENCE ON THE INFORMATION SCIENCE AND COMMUNICATION ENGINEERING (ISCE 2014), P24
   Hewitt Carl, 1973, POPL
   Hoffmann J, 2015, LECT NOTES COMPUT SC, V9032, P132, DOI 10.1007/978-3-662-46669-8_6
   Honda K, 1998, LECT NOTES COMPUT SC, V1381, P122, DOI 10.1007/BFb0053567
   Honda K, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P273, DOI 10.1145/2827695
   Jeuring J., 1995, Conference Record of FPCA '95. SIGPLAN-SIGARCH-WG2.8. Conference on Functional Programming Languages and Computer Architecture, P238, DOI 10.1145/224164.224212
   Leivant D., 2001, LNCS, P183
   Miller MS, 2005, LECT NOTES COMPUT SC, V3705, P195, DOI 10.1007/11580850_12
   Mostinckx S, 2007, LECT NOTES COMPUT SC, V4467, P268
   Mostrous D, 2011, LECT NOTES COMPUT SC, V6721, P95, DOI 10.1007/978-3-642-21464-6_7
   Murphy AL, 2006, ACM T SOFTW ENG METH, V15, P279, DOI 10.1145/1151695.1151698
   Newell A., 1972, HUMAN PROBLEM SOLVIN, V104
   PICCO GP, 2005, P 2005 ACM S APPL CO, P413
   PIERCE B, 1991, CMUCS91106
   Pierce B. C., 1998, Conference Record of POPL '98: 25th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P252, DOI 10.1145/268946.268967
   Scholliers C, 2011, PERS UBIQUIT COMPUT, V15, P341, DOI 10.1007/s00779-010-0355-z
   Srinivasan S, 2008, LECT NOTES COMPUT SC, V5142, P104, DOI 10.1007/978-3-540-70592-5_6
   STROM RE, 1986, IEEE T SOFTWARE ENG, V12, P157, DOI 10.1109/TSE.1986.6312929
   Summers Alexander J., 2016, ESOP
   Tasharofi S., 2013, ECOOP
   Tobin-Hochstadt S, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P395, DOI 10.1145/1328438.1328486
   Toninho B., 2011, PPDP
   Van Cutsem T, 2014, COMPUT LANG SYST STR, V40, P112, DOI 10.1016/j.cl.2014.05.002
   van der Goot R., 2000, THESIS
   Vieira HT, 2008, LECT NOTES COMPUT SC, V4960, P269
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
   Wyckoff P, 1998, IBM SYST J, V37, P454, DOI 10.1147/sj.373.0454
NR 52
TC 0
Z9 0
U1 0
U2 6
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD AUG 24
PY 2020
VL 30
AR e27
DI 10.1017/S0956796820000246
PG 50
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA ND7SW
UT WOS:000562104200001
OA Bronze
DA 2024-07-18
ER

PT J
AU Bahr, P
   Hutton, G
AF Bahr, Patrick
   Hutton, Graham
TI Calculating correct compilers II: Return of the register machines
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB In 'Calculating Correct Compilers' (Bahr & Hutton,2015), we developed a new approach to calculating compilers directly from specifications of their correctness. Our approach only required elementary reasoning techniques and has been used to calculate compilers for a wide range of language features and their combination. However, the methodology was focused on stack-based target machines, whereas real compilers often target register-based machines. In this article, we show how our approach can naturally be adapted to calculate compilers for register machines.
C1 [Bahr, Patrick] IT Univ Copenhagen, Copenhagen, Denmark.
   [Hutton, Graham] Univ Nottingham, Nottingham, England.
C3 IT University Copenhagen; University of Nottingham
RP Bahr, P (corresponding author), IT Univ Copenhagen, Copenhagen, Denmark.
EM paba@itu.dk; graham.hutton@nottingham.ac.uk
OI Bahr, Patrick/0000-0003-1600-8261; Hutton, Graham/0000-0001-9584-5150
FU EPSRC, Mind the Gap: Unified Reasoning About Program Correctness and
   Efficiency [EP/P00587X/1]; EPSRC [EP/P00587X/1] Funding Source: UKRI
FX Graham Hutton was funded by EPSRC grant EP/P00587X/1, Mind the Gap:
   Unified Reasoning About Program Correctness and Efficiency.
CR Ager M.S., 2003, RS0314 BRICS U AARH
   Ager Mads Sig, 2003, P 5 ACM SIGPLAN INT, P8
   [Anonymous], 1993, Partial Evaluation and Automatic Program Generation
   [Anonymous], 2003, ACM SIGSOFT Softw. Eng. Notes, DOI DOI 10.1145/966221.966235
   Bahr P, 2014, LNCS, V8475
   Bahr P, 2020, SUPPLEMENTARY MAT CA
   Bahr P, 2015, PROCEEDINGS OF THE 2015 ACM SIGPLAN WORKSHOP ON PARTIAL EVALUATION AND PROGRAM MANIPULATION (PEPM'15), P27, DOI 10.1145/2678015.2682539
   CHAITIN GJ, 1982, P 1982 SIGPLAN S COM
   Chlipala A., 2010, P 37 ACM SIGPLAN SIG
   DeepSpec, 2020, SCI DEEP SPEC
   Futamura Y., 1999, Higher-Order and Symbolic Computation, V12, P381, DOI 10.1023/A:1010095604496
   Hutton G., 2006, 5 S TRENDS FUNCT PRO, V5
   Hutton G, 2016, LECT NOTES COMPUTER, V9600
   Hutton G, 2007, J FUNCT PROGRAM, V17, P777, DOI 10.1017/S0956796807006363
   Hutton G, 2017, J FUNCT PROGRAM, V27, DOI 10.1017/S0956796817000120
   Kumar R., 2014, P 41 SIGPLAN SIGACT
   LANDIN PJ, 1964, COMPUT J, V6, P308, DOI 10.1093/comjnl/6.4.308
   Lattner C, 2008, P INT WORKSH ADV COM
   Leroy X, 2009, COMMUN ACM, V52, P107, DOI 10.1145/1538788.1538814
   McCarthy J., 1967, P S APPL MATH, V19
   Meijer E, 1992, THESIS
   Meijer E, 1991, FUNCTIONAL PROGRAMMI
   Milner R., 1972, Machine intelligence 7, P51
   PEPM, 2020, WORKSH PART EV PROGR
   Reynolds J. C., 1972, P ACM ANN C
   SPIVEY M, 1990, SCI COMPUT PROGRAM, V14, P25, DOI 10.1016/0167-6423(90)90056-J
   Wadler P., 1992, P MARKT SUMM SCH PRO
   WAND M, 1982, ACM T PROGR LANG SYS, V4, P496, DOI 10.1145/357172.357179
   Wand M, 1982, PRINCIPLES PROGRAMMI
NR 29
TC 3
Z9 3
U1 0
U2 2
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD AUG 20
PY 2020
VL 30
AR e25
DI 10.1017/S0956796820000209
PG 40
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA NB8FH
UT WOS:000560749100001
OA Green Accepted
DA 2024-07-18
ER

PT J
AU Johnson, JI
   Sergey, I
   Earl, C
   Might, M
   Van Horn, D
AF Johnson, J. Ian
   Sergey, Ilya
   Earl, Christopher
   Might, Matthew
   Van Horn, David
TI Pushdown flow analysis with abstract garbage collection
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID DERIVATIVES
AB In the static analysis of functional programs, pushdown flow analysis and abstract garbage collection push the boundaries of what we can learn about programs statically. This work illuminates and poses solutions to theoretical and practical challenges that stand in the way of combining the power of these techniques. Pushdown flow analysis grants unbounded yet computable polyvariance to the analysis of return-flow in higher-order programs. Abstract garbage collection grants unbounded polyvariance to abstract addresses which become unreachable between invocations of the abstract contexts in which they were created. Pushdown analysis solves the problem of precisely analyzing recursion in higherorder languages; abstract garbage collection is essential in solving the "stickiness" problem. Alone, our benchmarks demonstrate that each method can reduce analysis times and boost precision by orders of magnitude. We combine these methods. The challenge in marrying these techniques is not subtle: computing the reachable control states of a pushdown system relies on limiting access during transition to the top of the stack; abstract garbage collection, on the other hand, needs full access to the entire stack to compute a root set, just as concrete collection does. Conditional pushdown systems were developed for just such a conundrum, but existing methods are ill-suited for the dynamic nature of garbage collection. We show fully precise and approximate solutions to the feasible paths problem for pushdown garbage-collecting control-flow analysis. Experiments reveal synergistic interplay between garbage collection and pushdown techniques, and the fusion demonstrates "better-than-bothworlds" precision.
C1 [Johnson, J. Ian] Northeastern Univ, Boston, MA 02115 USA.
   [Sergey, Ilya] IMDEA Software Inst, Madrid, Spain.
   [Earl, Christopher; Might, Matthew] Univ Utah, Salt Lake City, UT USA.
   [Van Horn, David] Univ Maryland, College Pk, MD USA.
C3 Northeastern University; IMDEA Software Institute; Utah System of Higher
   Education; University of Utah; University System of Maryland; University
   of Maryland College Park
RP Johnson, JI (corresponding author), Northeastern Univ, Boston, MA 02115 USA.
EM ianj@ccs.neu.edu; ilya.sergey@imdea.org; cwearl@cs.utah.edu;
   might@cs.utah.edu; dvanhorn@cs.umd.edu
OI Sergey, Ilya/0000-0003-4250-5392; Van Horn, David/0000-0002-9201-6864
FU DARPA [FA8750-12-2-0106]
FX We thank the anonymous reviewers of ICFP 2012 and JFP for their detailed
   reviews, which helped to improve the presentation and technical content
   of the paper. Tim Smith was especially helpful with his knowledge of
   stack automata. This material is based on research sponsored by DARPA
   under the programs Automated Program Analysis for Cybersecurity
   (FA8750-12-2-0106) and Clean-Slate Resilient Adaptive Hosts (CRASH). The
   U.S. Government is authorized to reproduce and distribute reprints for
   Governmental purposes notwithstanding any copyright notation thereon.
CR Bouajjani A, 1997, LECT NOTES COMPUT SC, V1243, P135
   Cousot P., 1999, CALCULATIONAL SYSTEM
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Earl C., 2010, WORKSH SCHEM FUNCT P, P24
   Earl C, 2012, ACM SIGPLAN NOTICES, V47, P177, DOI 10.1145/2398856.2364576
   Esparza J, 2003, INFORM COMPUT, V186, P355, DOI 10.1016/S0890-5401(03)00139-1
   Felleisen M., 1987, P 14 ACM SIGACT SIGP
   FLANAGAN C, 1993, SIGPLAN NOTICES, V28, P237, DOI 10.1145/173262.155113
   GINSBURG S, 1967, J ACM, V14, P389, DOI 10.1145/321386.321403
   Johnson J. I., 2013, WORKSH HIGH ORD PROG, P10
   Kobayashi N, 2009, ACM SIGPLAN NOTICES, V44, P416, DOI 10.1145/1594834.1480933
   Kodumal J, 2004, ACM SIGPLAN NOTICES, V39, P207, DOI 10.1145/996893.996867
   Lal A, 2006, LECT NOTES COMPUT SC, V4144, P343, DOI 10.1007/11817963_32
   Li X, 2010, PEPM '10: PROCEEDINGS OF THE 2010 ACM SIGPLAN WORKSHOP ON PARTIAL EVALUATION AND PROGRAM MANIPULATION, P141
   Melski D, 2000, THEOR COMPUT SCI, V248, P29, DOI 10.1016/S0304-3975(00)00049-9
   MIDTGAARD J, 2007, THESIS U AARHUS
   Midtgaard J, 2009, ACM SIGPLAN NOTICES, V44, P287, DOI 10.1145/1631687.1596592
   Might M, 2006, ACM SIGPLAN NOTICES, V41, P127, DOI 10.1145/1111320.1111049
   Might M, 2009, P 2009 WORKSH SCHEM, P10
   Might M, 2007, LECT NOTES COMPUT SC, V4349, P59
   Might M, 2006, ACM SIGPLAN NOTICES, V41, P13, DOI 10.1145/1160074.1159807
   Might M, 2011, ACM SIGPLAN NOTICES, V46, P189, DOI 10.1145/2034574.2034801
   Might M, 2010, ACM SIGPLAN NOTICES, V45, P305, DOI 10.1145/1809028.1806631
   Might M, 2009, LECT NOTES COMPUT SC, V5403, P260, DOI 10.1007/978-3-540-93900-9_22
   Might Matthew, 2007, Ph.D. Dissertation
   Ong CHL, 2006, IEEE S LOG, P81, DOI 10.1109/LICS.2006.38
   Owens S, 2009, J FUNCT PROGRAM, V19, P173, DOI 10.1017/S0956796808007090
   Rehof J, 2001, ACM SIGPLAN NOTICES, V36, P54, DOI 10.1145/373243.360208
   Reps T, 2005, SCI COMPUT PROGRAM, V58, P206, DOI 10.1016/j.scico.2005.02.009
   Reps T, 1998, INFORM SOFTWARE TECH, V40, P701, DOI 10.1016/S0950-5849(98)00093-7
   Rounds W. C., 1973, 14th Annual Symposium on Switching Automata Theory, P145, DOI 10.1109/SWAT.1973.5
   Shivers O. G., 1991, THESIS CARNEGIE MELL
   Sipser M., 2005, Cengage Learning, V2nd
   Van Horn D, 2008, ACM SIGPLAN NOTICES, V43, P275, DOI 10.1145/1411203.1411243
   Van Horn D, 2012, J FUNCT PROGRAM, V22, P705, DOI 10.1017/S0956796812000238
   Vardoulakis D., 2012, THESIS NE U
   Vardoulakis D, 2011, ACM SIGPLAN NOTICES, V46, P69, DOI 10.1145/2034574.2034785
   Vardoulakis D, 2010, LECT NOTES COMPUT SC, V6012, P570, DOI 10.1007/978-3-642-11957-6_30
   Wright AK, 1998, ACM T PROGR LANG SYS, V20, P166, DOI 10.1145/271510.271523
NR 39
TC 7
Z9 9
U1 0
U2 3
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD MAY
PY 2014
VL 24
IS 2-3
BP 218
EP 283
DI 10.1017/S0956796814000100
PG 66
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AM0QJ
UT WOS:000339550500004
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Acar, UA
   Blume, M
   Donham, J
AF Acar, Umut A.
   Blume, Matthias
   Donham, Jacob
TI A consistent semantics of self-adjusting computation
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID MINIMUM SPANNING-TREES; DYNAMIC ALGORITHMS; TIME
AB This paper presents a semantics of self-adjusting computation and proves that the semantics is correct and consistent. The semantics introduces memoizing change propagation, which enhances change propagation with the classic idea of memoization to enable reuse of computations even when memory is mutated via side effects. During evaluation, computation reuse via memoization triggers a change-propagation algorithm that adapts the reused computation to the memory mutations (side effects) that took place since the creation of the computation. Since the semantics includes both memoization and change propagation, it involves both non-determinism (due to memoization) and mutation (due to change propagation). Our consistency theorem states that the non-determinism is not harmful: any two evaluations of the same program starting at the same state yield the same result. Our correctness theorem states that mutation is not harmful: Self-adjusting programs are compatible with purely functional programming. We formalize the semantics and its meta-theory in the LF logical framework and machine check our proofs using Twelf.
C1 [Acar, Umut A.] Carnegie Mellon Univ, Pittsburgh, PA 15213 USA.
   [Blume, Matthias] Google Inc, Chicago, IL USA.
   [Donham, Jacob] Twitter Inc, San Francisco, CA USA.
C3 Carnegie Mellon University; Google Incorporated; Twitter, Inc.
RP Acar, UA (corresponding author), Carnegie Mellon Univ, Pittsburgh, PA 15213 USA.
EM umut@cs.cmu.edu; blume@google.com; jake.donham@gmail.com
CR Abadi M, 1996, ACM SIGPLAN NOTICES, V31, P83, DOI 10.1145/232629.232638
   Acar U. A., 2008, P 25 ANN ACM S PRINC
   Acar U. A., 2010, S COMP GEOM
   ACAR UA, 2007, EUR S PROGR
   Acar Umit A, 2004, P 15 ANN ACM SIAM S, V531, P540, DOI [10.1145/990000/982871, DOI 10.1145/990000/982871]
   Acar UA, 2006, ACM T PROGR LANG SYS, V28, P990, DOI 10.1145/1186632.1186634
   Acar UA, 2009, ACM T PROGR LANG SYS, V32, DOI 10.1145/1596527.1596530
   Acar Umut A., 2005, THESIS CARNEGIE MELL
   Acar UmutA., 2003, P 30 ANN ACM S PRINC
   Alstrup S, 1997, LECT NOTES COMPUT SC, V1256, P270
   [Anonymous], 1963, Studies in Logic and the Foundations of Mathematics, DOI DOI 10.1016/S0049-237X(08)72018-4
   Bellman R., 1957, Dynamic programming
   Bhatotia Pramod, 2011, ACM S CLOUD COMP
   Brodal GS, 2002, ANN IEEE SYMP FOUND, P617, DOI 10.1109/SFCS.2002.1181985
   Burckhardt Sebastian, 2011, ACM SIGPLAN C OBJ OR
   Carlsson M, 2002, ACM SIGPLAN NOTICES, V37, P26, DOI 10.1145/583852.581482
   CHIANG YJ, 1992, P IEEE, V80, P1412, DOI 10.1109/5.163409
   COHEN RF, 1991, PROCEEDINGS OF THE SECOND ANNUAL ACM-SIAM SYMPOSIUM ON DISCRETE ALGORITHMS, P52
   Cooper G. H., 2004, CS0320 BROWN U
   COOPER GH, 2006, P 15 ANN EUR S PROGR
   Demers Alan., 1981, P 8 ANN ACM S PRINCI, P105, DOI DOI 10.1145/567532.567544
   Demetrescu C., 2005, HDB DATA STRUCTURES
   Demetrescu C., 2005, CRC PRESS SERIES COM
   Elliott C., 1998, Principles of Declarative Programming. 10th International Symposium, PLILP'98. Held Jointly with the 6th International Conference, ALP'98. Proceedings, P284, DOI 10.1007/BFb0056621
   Elliott C, 1997, ACM SIGPLAN NOTICES, V32, P263, DOI 10.1145/258949.258973
   Eppstein D, 1997, J ACM, V44, P669, DOI 10.1145/265910.265914
   EPPSTEIN D, 1999, ALGORITHMS THEORY CO, pCH8, DOI DOI 10.1201/9781420049503-C9
   FIELD J, 1990, PROCEEDINGS OF THE 1990 ACM CONFERENCE ON LISP AND FUNCTIONAL PROGRAMMING, P307, DOI 10.1145/91556.91679
   Field J., 1991, THESIS CORNELL U ITH
   FREDERICKSON GN, 1985, SIAM J COMPUT, V14, P781, DOI 10.1137/0214055
   Frederickson GN, 1997, J ALGORITHM, V24, P37, DOI 10.1006/jagm.1996.0835
   Graham R. L., 1972, Information Processing Letters, V1, P132, DOI 10.1016/0020-0190(72)90045-2
   Guibas L., 2004, HDB DISCRETE COMPUTA, V2nd, P1117
   Hammer M., 2007, DAMP 07 WORKSH DECL
   Hammer M., 2011, ACM SIGPLAN C OBJ OR
   Hammer Matthew A., 2009, ACM SIGPLAN C PROGR
   HARPER R, 1993, J ACM, V40, P143, DOI 10.1145/138027.138060
   Harper R, 2007, J FUNCT PROGRAM, V17, P613, DOI 10.1017/S0956796807006430
   Hedin G., 1992, THESIS LUND U LUND
   Henzinger MR, 1997, LECT NOTES COMPUT SC, V1256, P594
   Henzinger MR, 1999, J ACM, V46, P502, DOI 10.1145/320211.320215
   Heydon A, 2000, ACM SIGPLAN NOTICES, V35, P311, DOI 10.1145/358438.349341
   Holm J, 2001, J ACM, V48, P723, DOI 10.1145/502090.502095
   HOOVER R, 1987, THESIS CORNELL U ITH
   Ley-Wild R., 2008, INT C FUNCT PROGR VI
   Ley-Wild Ruy., 2009, P 26 ANN ACM S PRINC
   Ley-Wild Ruy, 2008, CMUCS08141
   Liu YHA, 1998, ACM T PROGR LANG SYS, V20, P546, DOI 10.1145/291889.291895
   MICHIE D, 1968, NATURE, V218, P19, DOI 10.1038/218019a0
   OVERMARS MH, 1981, J COMPUT SYST SCI, V23, P166, DOI 10.1016/0022-0000(81)90012-X
   Pfenning F., 1999, Automated Deduction - CADE-16. 16th International Conference on Automated Deduction. Proceedings (Lecture Notes in Artificial Intelligence Vol.1632), P202
   PUGH W, 1989, CONFERENCE RECORD OF THE SIXTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P315, DOI 10.1145/75277.75305
   Ramalingam G., 1993, Conference Record of the Twentieth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P502, DOI 10.1145/158511.158710
   Reps T., 1982, THESIS CORNELL U ITH
   Shankar A., 2007, INT C PROGR LANG DES
   SLEATOR DD, 1983, J COMPUT SYST SCI, V26, P362, DOI 10.1016/0022-0000(83)90006-5
   SLEATOR DD, 1985, J ACM, V32, P652, DOI 10.1145/3828.3835
   Sumer Ozgur, 2011, J MACHINE LEARNING, V8, P180
   Sundaresh R.S., 1991, C RECORD 18 ANN ACM, P1
   Tarjan RE, 2007, LECT NOTES COMPUT SC, V4525, P80
   ThomasW Reps, 1982, S PRINCIPLES PROGRAM, P169, DOI [10.1145/582153.582172, DOI 10.1145/582153.582172]
   Wan ZY, 2001, ACM SIGPLAN NOTICES, V36, P146, DOI 10.1145/507669.507654
   Wan ZY, 2000, ACM SIGPLAN NOTICES, V35, P242, DOI 10.1145/358438.349331
   YELLIN DM, 1991, ACM T PROGR LANG SYS, V13, P211, DOI 10.1145/103135.103137
NR 64
TC 3
Z9 3
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD MAY
PY 2013
VL 23
IS 3
BP 249
EP 292
DI 10.1017/S0956796813000099
PG 44
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 245CH
UT WOS:000326436100002
OA Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Kameyama, Y
   Kiselyov, O
   Shan, CC
AF Kameyama, Yukiyoshi
   Kiselyov, Oleg
   Shan, Chung-Chieh
TI Shifting the stage Staging with delimited control
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID IMPLEMENTATION
AB It is often hard to write programs that are efficient yet reusable. For example, an efficient implementation of Gaussian elimination should be specialized to the structure and known static properties of the input matrix. The most profitable optimizations, such as choosing the best pivoting or memoization, cannot be expected of even an advanced compiler because they are specific to the domain, but expressing these optimizations directly makes for ungainly source code. Instead, a promising and popular way to reconcile efficiency with reusability is for a domain expert to write code generators.
   Two pillars of this approach are types and effects. Typed multilevel languages such as MetaOCaml ensure safety and early error reporting: a well-typed code generator neither goes wrong nor generates code that goes wrong. Side effects such as state and control ease correctness and expressivity: An effectful generator can resemble the textbook presentation of an algorithm, as is familiar to domain experts, yet insert let for memoization and if for bounds checking, as is necessary for efficiency. Together, types and effects enable structuring code generators as compositions of modules with well-defined interfaces, and hence scaling to large programs. However, blindly adding effects renders multilevel types unsound.
   We introduce the first multilevel calculus with control effects and a sound type system. We give small-step operational semantics as well as a one-pass continuation-passing-style translation. For soundness, our calculus restricts the code generator's effects to the scope of generated binders. Even with this restriction, we can finally write efficient code generators for dynamic programming and numerical methods in direct style, like in algorithm textbooks, rather than in continuation-passing or monadic style.
C1 [Kameyama, Yukiyoshi] Univ Tsukuba, Dept Comp Sci, Tsukuba, Ibaraki 305, Japan.
   [Shan, Chung-Chieh] Cornell Univ, Ithaca, NY 14853 USA.
C3 University of Tsukuba; Cornell University
RP Kameyama, Y (corresponding author), Univ Tsukuba, Dept Comp Sci, Tsukuba, Ibaraki 305, Japan.
EM kameyama@acm.org; oleg@okmij.org; ccshan@post.harvard.edu
FU Grants-in-Aid for Scientific Research [21300005] Funding Source: KAKEN
CR Asai Kenichi, 2009, Higher-Order and Symbolic Computation, V22, P275, DOI 10.1007/s10990-009-9049-5
   Asai K, 2007, LECT NOTES COMPUT SC, V4807, P239
   Balat V, 2004, ACM SIGPLAN NOTICES, V39, P64, DOI 10.1145/982962.964007
   Bondorf A., 1992, Proceedings of the 1992 ACM Conference on Lisp and Functional Programming, P1, DOI 10.1145/141471.141483
   BONDORF A, 1991, SCI COMPUT PROGRAM, V16, P151, DOI 10.1016/0167-6423(91)90002-F
   Calcagno C, 2004, LECT NOTES COMPUT SC, V2986, P79
   Calcagno C, 2000, LECT NOTES COMPUT SC, V1853, P25
   Carette J, 2006, SCI COMPUT PROGRAM, V62, P3, DOI 10.1016/j.scico.2005.10.012
   Carette J, 2011, SCI COMPUT PROGRAM, V76, P349, DOI 10.1016/j.scico.2008.09.008
   Choi W, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P81, DOI 10.1145/1926385.1926397
   Cohen A, 2006, SCI COMPUT PROGRAM, V62, P25, DOI 10.1016/j.scico.2005.10.013
   Czarnecki K, 2003, LECT NOTES COMPUT SC, V3016, P51
   Danvy O., 1998, Journal of Functional Programming, V8, P621, DOI 10.1017/S0956796898003104
   DANVY O, 1990, PROCEEDINGS OF THE 1990 ACM CONFERENCE ON LISP AND FUNCTIONAL PROGRAMMING, P151, DOI 10.1145/91556.91622
   Danvy O., 1989, 8912 DIKU U COP
   Danvy Olivier., 1992, MATH STRUCT COMP SCI, V2, P361, DOI DOI 10.1017/S0960129500001535
   Davies R, 1996, IEEE S LOG, P184, DOI 10.1109/LICS.1996.561317
   Davies R, 2001, J ACM, V48, P555, DOI 10.1145/382780.382785
   Dussart D., 1996, WSI9628 U TUB
   Eckhardt J, 2005, LECT NOTES COMPUT SC, V3676, P275
   Elliott Conal., 2004, Proceedings of Haskell 2004: ACM SIGPLAN Workshop on Haskell, P45
   FELLEISEN M, 1991, SCI COMPUT PROGRAM, V17, P35, DOI 10.1016/0167-6423(91)90036-W
   Felleisen M., 1986, Proceedings of the Symposium on Logic in Computer Science (Cat. No.86CH2321-8), P131
   Filinski Andrzej, 1994, P 21 ANN ACM S PRINC, P446, DOI DOI 10.1145/174675.178047
   Fluet M, 2006, J FUNCT PROGRAM, V16, P485, DOI 10.1017/S095679680600596X
   Frigo M, 2005, P IEEE, V93, P216, DOI 10.1109/JPROC.2004.840301
   Ganz S. E., 2006, THESIS INDIANA U
   Gomard C. K., 1991, Journal of Functional Programming, V1, P21, DOI 10.1017/S0956796800000058
   Hammond K, 2003, LECT NOTES COMPUT SC, V2830, P37
   Igarashi A, 2007, LECT NOTES COMPUT SC, V4807, P206
   Jones Simon Peyton, 2003, Journal of Functional Programming, V13, P1
   Kagawa K, 2001, LECT NOTES COMPUT SC, V2024, P264
   Kameyama Y., 2009, P 2009 ACM SIGPLAN W, P111, DOI DOI 10.1145/1480945.1480962
   Kameyama Y., 2010, P 5 ACM SIGPLAN WORK
   Kameyama Y, 2008, PEPM'08: PROCEEDINGS OF THE 2008 ACM SIGPLAN SYMPOSIUM ON PARTIAL EVALUATION AND SEMANTICS-BASED PROGRAM MANIPULATION, P147, DOI 10.1145/1328408.1328430
   Kamin S., 1996, STANDARD ML METAPROG
   Kiselyov O, 2005, LECT NOTES COMPUT SC, V3605, P488
   Kiselyov O, 2006, ACM SIGPLAN NOTICES, V41, P26, DOI 10.1145/1160074.1159808
   Kiselyov O, 2010, LECT NOTES COMPUT SC, V6009, P304, DOI 10.1007/978-3-642-12251-4_22
   Lawall J. L., 1994, Proceedings of the 1994 ACM Conference on LISP and Functional Programming, P227, DOI 10.1145/182409.182483
   Lengauer C, 2006, SCI COMPUT PROGRAM, V62, P1, DOI 10.1016/j.scico.2006.05.001
   Leone M., 1998, ACM COMPUT SURV, V30, P1
   Leroy X, 2000, ACM T PROGR LANG SYS, V22, P340, DOI 10.1145/349214.349230
   Masuko M, 2009, ML'09: PROCEEDINGS OF THE 2009 ACM SIGPLAN WORKSHOP ON ML, P49, DOI 10.1145/1596627.1596636
   McAdam B. J., 2001, P WORKSH FIX POINTS
   MICHIE D, 1968, NATURE, V218, P19, DOI 10.1038/218019a0
   Minsky Y., 2008, BIND TEARS
   Moreau L., 1998, Higher-Order and Symbolic Computation, V11, P233, DOI 10.1023/A:1010087314987
   Morrisett J.Gregory., 1993, Proceedings of the ACM SIGPLAN Workshop on State in Programming Languages, P73
   Nielson F., 1988, P ACM S PRINCIPLES P, P98
   PARIGOT M, 1992, LNCS, V624, P190, DOI [10.1007/BFb0013061, DOI 10.1007/BFB0013061]
   Pasalic E., 2002, P ICFP, P157
   Püschel M, 2005, P IEEE, V93, P232, DOI 10.1109/JPROC.2004.840306
   Sorensen M. H. B., 1994, LNCS, V788, P485
   Sumii E., 2001, Higher-Order and Symbolic Computation, V14, P101, DOI 10.1023/A:1012984529382
   Swadi K., 2005, DYNAMIC PROGRAMMING
   Swadi K., 2006, PEPM, V06
   Taha W, 2005, LECT NOTES COMPUT SC, V3605, P38
   Taha W, 2003, ACM SIGPLAN NOTICES, V38, P26, DOI 10.1145/640128.604134
   Taha W., 2000, PEPM, P34, DOI DOI 10.1145/328690.328697
   Talpin J.-P., 1992, Journal of Functional Programming, V2, P245, DOI 10.1017/S0956796800000393
   Thielecke H, 2003, ACM SIGPLAN NOTICES, V38, P139, DOI 10.1145/640128.604144
   Thiemann P., 1999, Journal of Functional Programming, V9, P483, DOI 10.1017/S0956796899003469
   Thiemann Peter, 1999, PARTIAL EVALUATION H
   Tofte M., 2004, Higher-Order and Symbolic Computation, V17, P245, DOI 10.1023/B:LISP.0000029446.78563.a4
   Wadler Philip, 1992, MATH STRUCTURES COMP, V2, P461, DOI [DOI 10.1017/S0960129500001560, DOI 10.1016/0304-3975(75)90017-1]
   Whaley RC, 2005, SOFTWARE PRACT EXPER, V35, P101, DOI 10.1002/spe.626
NR 67
TC 9
Z9 10
U1 0
U2 1
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD NOV
PY 2011
VL 21
BP 617
EP 662
DI 10.1017/S0956796811000256
PN 6
PG 46
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 868UQ
UT WOS:000298551800004
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Gill, A
   Hutton, G
AF Gill, Andy
   Hutton, Graham
TI The worker/wrapper transformation
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB The worker/wrapper transformation is a technique for changing the type of a computation, usually with the aim of improving its performance. It has been used by compiler writers for many years, but the technique is little known in the wider functional programming community, and has never been described precisely. In this article we explain, formalise and explore the generality of the worker/wrapper transformation. We also provide a systematic recipe for its use as an equational reasoning technique for improving the performance of programs, and illustrate the power of this recipe using a range of examples.
C1 [Gill, Andy] Univ Kansas, Lawrence, KS 66045 USA.
   [Hutton, Graham] Univ Nottingham, Nottingham NG7 2RD, England.
C3 University of Kansas; University of Nottingham
RP Gill, A (corresponding author), Univ Kansas, Lawrence, KS 66045 USA.
EM andlygill@ku.edu; gmh@cs.nott.ac.uk
FU Galois; EPSRC [EP/E04350X/1] Funding Source: UKRI
FX We would like to thank Roland Backhouse, Olaf Chitil, Isaac Dupree,
   Conal Elliott, Peter Gammie, Peter Jonsson, John Matthews, Conor
   McBride, Simon Peyton Jones and Mark Tullsen for many useful comments
   and suggestions, Colin Runciman for the invitation to submit to JFP, and
   the three anonymous referees for their detailed reviews. Work on this
   article was initiated during a sabbatical visit to Galois, Inc. in
   Portland, Oregon by the second author during Summer 2007, for which
   funding from Galois is very gratefully acknowledged.
CR Ager Mads Sig, 2003, P 5 ACM SIGPLAN INT, P8
   ALTENKIRCH T, 2001, LNCS, V2044
   [Anonymous], 1986, Denotational Semantics: A Methodology for Language Development
   [Anonymous], 1992, 19th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, DOI DOI 10.1145/143165.143169
   [Anonymous], 2003, Haskell 98 language and libraries: the revised report
   BACKHOUSE R, 1995, P 6 INT C CAT THEOR
   Backhouse Roland, 2002, LNCS, V2297
   Bird R., 1998, INTRO FUNCTIONAL PRO, V2nd
   BURSTALL RM, 1977, J ACM, V24, P44, DOI 10.1145/321992.321996
   Chitil O., 2000, THESIS RWTH AACHEN
   CHITIL O, 2000, LNCS, V1868
   COUTTS D, 2007, P 2007 ACM SIGPLAN I
   GAMMA E, 1995, DESIGN PATTERNS
   Gibbons J., 1998, P 3 ACM SIGPLAN INT
   GILL A, 1996, THESIS U GLASGOW
   Gill A, 1993, P C FUNCT PROGR LANG
   GILL A, 2006, P 2006 ACM SIGPLAN W
   HINZE R, 2008, P 13 ACM SIGPLAN INT
   Hoare C. A. R., 1972, Acta Informatica, V1, P271, DOI 10.1007/BF00289507
   HUGHES RJM, 1986, INFORM PROCESS LETT, V22, P141, DOI 10.1016/0020-0190(86)90059-1
   Hutton G., 1999, J FUNCTIONAL PROGRAM, V9, P355, DOI DOI 10.1017/S0956796899003500
   Hutton G., 2004, LNCS, V3125
   Hutton G., 2007, PROGRAMMING HASKELL
   Hutton G., 2006, 5 S TRENDS FUNCT PRO, V5
   Hutton G, 2007, J FUNCT PROGRAM, V17, P777, DOI 10.1017/S0956796807006363
   JONES SP, 1991, P C FUNCT PROGR COMP
   JONES SP, 1993, P 1993 GLASG WORKSH
   LAUNCHBURY J, 1995, P 7 ACM SIGPLAN SIGA
   Mcbride C, 2008, J FUNCT PROGRAM, V18, P1, DOI 10.1017/S0956796807006326
   MEIJER E, 1991, LNCS, V523
   MICHIE D, 1968, NATURE, V218, P19, DOI 10.1038/218019a0
   Peyton Jones S. L., 2001, P 2001 ACM SIGPLAN W
   Reynolds J. C., 1972, P ACM ANN C
   SANDS D, 1998, HIGHER ORDER OPERATI
   Santos Andre, 1995, THESIS U GLASGOW
   SPIVEY M, 1990, SCI COMPUT PROGRAM, V14, P25, DOI 10.1016/0167-6423(90)90056-J
   Thielecke H., 2002, Higher-Order and Symbolic Computation, V15, P141, DOI 10.1023/A:1020887011500
   TURNER DA, 1995, LNCS, V1022
   Wadler P., 1992, P MARKT SUMM SCH PRO
NR 39
TC 30
Z9 35
U1 0
U2 2
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD MAR
PY 2009
VL 19
BP 227
EP 251
DI 10.1017/S0956796809007175
PN 2
PG 25
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 423OW
UT WOS:000264506600006
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Skalka, C
   Smith, S
   Van Horn, D
AF Skalka, Christian
   Smith, Scott
   Van Horn, David
TI Types and trace effects of higher order programs
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID SYSTEM
AB This paper shows how type effect systems can be combined with model-checking techniques to produce powerful, automatically verifiable program logics for higher order programs. The properties verified are based on the ordered sequence of events that occur during program execution, so-called event traces. Our type and effect systems infer conservative approximations of the event traces arising at run-time, and model-checking techniques are used to verify logical properties of these histories. Our language model is based on the lambda-calculus. Technical results include a type inference algorithm for a polymorphic type effect system, and a method for applying known model-checking techniques to the trace effects inferred by the type inference algorithm, allowing static enforcement of history- and stack-based security mechanisms. A type safety result is proven for both unification and subtyping constraint versions of the type system, ensuring that statically well-typed programs do not contain trace event checks that can fail at run-time.
C1 [Skalka, Christian] Univ Vermont, Burlington, VT 05405 USA.
   [Smith, Scott] Johns Hopkins Univ, Baltimore, MD USA.
   [Van Horn, David] Brandeis Univ, Waltham, MA 02254 USA.
C3 University of Vermont; Johns Hopkins University; Brandeis University
RP Skalka, C (corresponding author), Univ Vermont, Burlington, VT 05405 USA.
EM skalka@cs.uvm.edu; scott@cs.jhu.edu; dvanhorn@cs.brandeis.edu
RI Smith, Scott/C-9098-2009
OI Skalka, Christian/0000-0002-0402-809X; Van Horn,
   David/0000-0002-9201-6864
CR Abadi M., 2003, P 10 ANN NETW DISTR
   [Anonymous], 1999, TYPE EFFECT SYSTEMS
   [Anonymous], P 4 ACM SIGPLAN INT
   [Anonymous], POPL 2000
   [Anonymous], TYPES PROGRAMMING LA
   Ball T, 2000, LECT NOTES COMPUT SC, V1885, P113
   Bartoletti M, 2005, 18th IEEE Computer Security Foundations Workshop, Proceedings, P211, DOI 10.1109/CSFW.2005.17
   Bartoletti M, 2005, LECT NOTES COMPUT SC, V3441, P316
   BAUER L, 2002, P FDN COMP SEC WORKS
   BAUER L, 2002, P INT S SOFTW SEC
   Besson F., 2001, Journal of Computer Security, V9, P217
   BURKART O, 1992, LECT NOTES COMPUT SC, V630, P123
   Burkart O., 2001, Handbook of Process Algebra, P545
   CHEN H, 2002, CCS 02, P235
   Das Manuvir., 2002, PLDI, P57, DOI DOI 10.1145/512529.512538
   DeLine Robert., 2001, Proceedings of the ACM SIGPLAN 2001 conference on Programming language design and implementation, P59, DOI DOI 10.1145/381694.378811
   EDJLALI G, 1998, ACM C COMP COMM SEC, P38
   Eifrig Jonathan., 1995, P 1995 MATH FDN PROG, V1
   Erlingsson U, 2000, NEW SECURITY PARADIGM WORKSHOP, PROCEEDINGS, P87
   Esparza J, 2003, INFORM COMPUT, V186, P355, DOI 10.1016/S0890-5401(03)00139-1
   ESPARZA J, 1994, LECT NOTES COMPUTER, V787
   Foster J. S., 2002, SIGPLAN Notices, V37, P1, DOI 10.1145/543552.512531
   Gong L, 1997, PROCEEDINGS OF THE USENIX SYMPOSIUM ON INTERNET TECHNOLOGIES AND SYSTEMS, P103
   Hamlen K. W., 2006, PLAS 2006. Proceedings of the 2006 Programming Languages and Analysis for Security Workshop, P7, DOI 10.1145/1134744.1134748
   Higuchi T, 2007, ACM T PROGR LANG SYS, V29, DOI 10.1145/1180475.1180479
   Igarashi A, 2002, ACM SIGPLAN NOTICES, V37, P331, DOI 10.1145/565816.503303
   JENSEN T, 1999, P 1999 IEEE S SEC PR
   KOZEN D, 1983, THEOR COMPUT SCI, V27, P333, DOI 10.1016/0304-3975(82)90125-6
   MANDELBAUM Y, 2003, P 8 ACM SIGPLAN INT
   MARRIOTT K, 2003, P 1 AS PROGR LANG S
   NIERSTRASZ O, 1993, SIGPLAN NOTICES, V28, P1, DOI 10.1145/167962.167976
   PALSBERG J, 1995, ACM T PROGR LANG SYS, V17, P576, DOI 10.1145/210184.210187
   Pottier FN, 2001, LECT NOTES COMPUT SC, V2028, P30
   ROSSIE JG, 1998, OOPSLA 98, P154
   Schmidt D. A., 1998, LISP and Symbolic Computation, V10, P237, DOI 10.1023/A:1007734417713
   Schneider H P, 2000, Climacteric, V3, P50, DOI 10.3109/13697130009167599
   SKALKA C, 2000, P 5 ACM SIGPLAN INT, P34
   SKALKA C, 2004, AS PROGR LANG S
   SKALKA C, 2005, P ACM C PRINC PRACT, P139
   SKALKA C, 2005, P ACM WORKSH ABSTR I
   Skalka Christian, 2002, ELECT NOTES THEOR CO, V75, P61, DOI [10.1016/S1571-0661(04)80779-5, DOI 10.1016/S1571-0661(04)80779-5]
   STONE C, 2000, CMUCS00153
   Sulzmann M, 2001, LECT NOTES COMPUT SC, V2024, P248
   TALPIN JP, 1992, PROCEEDINGS OF THE SEVENTH ANNUAL IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P162, DOI 10.1109/LICS.1992.185530
   Tarski A., 1955, PAC J MATH, V5, P285, DOI DOI 10.2140/PJM.1955.5.285
   Trifonov V., 1996, Static Analysis. Third International Symposium, SAS'96 Proceedings, P349
   VANHORN D, 2006, THESIS U VERMONT
   VONHORN D, 2006, TRACE EFFECT ANAL
   Walker D., 2000, Conference Record of POPL'00: 27th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages. Papers Presented at the Symposium, P254, DOI 10.1145/325694.325728
   WALLACH DS, 1998, P 1998 IEEE S SEC PR
NR 50
TC 27
Z9 27
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD MAR
PY 2008
VL 18
BP 179
EP 249
DI 10.1017/S0956796807006466
PN 2
PG 71
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 282BD
UT WOS:000254541700002
OA Bronze
DA 2024-07-18
ER

PT J
AU Fluet, M
   Morrisett, G
AF Fluet, Matthew
   Morrisett, Greg
TI Monadic regions
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 9th International Conference on Functional Programming
CY SEP 19-21, 2004
CL Snowbird, UT
SP ACM SIGPLAN
ID ENCAPSULATION
AB Region-based type systems provide programmer control over memory management without sacrificing type-safety. However, the type systems for region-based languages, such as the ML-Kit or Cyclone, are relatively complicated, and proving their soundness is non-trivial. This paper shows that the complication is in principle unnecessary. In particular, we show that plain old parametric polymorphism, as found in Haskell, is all that is needed. We substantiate this claim by giving a type- and meaning-preserving translation from a variation of the region calculus of Tofte and Talpin to a monadic variant of System F with region primitives whose types and operations are inspired by (and generalize) the ST monad of Launchbury and Peyton Jones.
C1 Cornell Univ, Dept Comp Sci, Ithaca, NY 14853 USA.
   Harvard Univ, Div Engn & Appl Sci, Cambridge, MA 02138 USA.
C3 Cornell University; Harvard University
RP Fluet, M (corresponding author), Cornell Univ, Dept Comp Sci, Ithaca, NY 14853 USA.
EM fluet@cs.cornell.edu; greg@eecs.harvard.edu
OI Morrisett, John/0000-0002-2619-5614
CR [Anonymous], 1974, LNCS
   [Anonymous], 1992, 19th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, DOI DOI 10.1145/143165.143169
   [Anonymous], P PROGR LANG DES IMP
   ARIOLA Z, 1998, P 25 ACM S PRINC PRO, P62
   Banerjee A., 1999, Proceedings. 14th Symposium on Logic in Computer Science (Cat. No. PR00158), P88, DOI 10.1109/LICS.1999.782594
   Calcagno C, 2002, INFORM COMPUT, V173, P199, DOI 10.1006/inco.2001.3112
   CALCAGNO C, 2001, P 28 ACM SIGPLAN SIG, P155
   CRARY K, 1999, P 26 ACM SIGPLAN SIG, P262
   FLUET M, 2001, P 9 ACM SIGPLAN INT, P103
   GANZ SE, THESIS INDIANA U BLO
   Girard J.-Y., 1989, Cambridge Tracts in Theoretical Computer Science, V7
   GROSSMAN D, 2002, P ACM C PROGR LANG D, P282, DOI DOI 10.1145/512529.512563
   GROSSMAN D, 2001, FORMAL TYPE SOUNDNES
   Helsen Simon, 2000, ELECT NOTES THEORETI, V41, P1
   Henglein F., 2005, ADV TOPICS TYPES PRO, P87
   Kagawa K, 2001, LECT NOTES COMPUT SC, V2024, P264
   KAGAWA K, 1997, P 2 ACM SIGPLAN INT, P217
   Kieburtz R. B., 1998, P 3 ACM SIGPLAN INT, P51
   Kiselyov Oleg, 2004, HASKELL 04, P96, DOI DOI 10.1145/1017472.1017488
   Launchbury J., 1995, LISP and Symbolic Computation, V8, P293, DOI 10.1007/BF01018827
   LAUNCHBURY J, 1997, P 2 ACM SIGPLAN INT, P227
   MOGGI E, 1991, INFORM COMPUT, V93, P55, DOI 10.1016/0890-5401(91)90052-4
   Moggi E, 2001, J FUNCT PROGRAM, V11, P591, DOI 10.1017/S0956796801004154
   Moggi E., 1989, Proceedings. Fourth Annual Symposium on Logic in Computer Science (Cat. No.89CH2753-2), P14, DOI 10.1109/LICS.1989.39155
   RIECKE J, 1995, P 22 ACM SIGPLAN SIG, P1
   Sabry A, 1997, ACM T PROGR LANG SYS, V19, P916, DOI 10.1145/267959.269968
   SEMMELROTH M, 1999, P 4 ACM SIGPLAN INT, P8
   Smith G, 1998, SCI COMPUT PROGRAM, V32, P49, DOI 10.1016/S0167-6423(97)00030-0
   Tofte M, 1997, INFORM COMPUT, V132, P109, DOI 10.1006/inco.1996.2613
   Tofte M., 1994, Conference Record of POPL '94: 21st ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P188, DOI 10.1145/174675.177855
   TOFTE M, 2002, PROGRAMMING REGIONS
   Tse S., 2004, P 9 ACM SIGPLAN INT, P115
   Volpano D, 1997, P IEEE CSFW, P156, DOI 10.1109/CSFW.1997.596807
   Wadler P., 2003, ACM Transactions on Computational Logic, V4, P1, DOI 10.1145/601775.601776
   WADLER P, 1995, P 3 ACM SIGPLAN INT, P63
   Washburn G, 2003, ACM SIGPLAN NOTICES, V38, P249, DOI 10.1145/944746.944728
NR 36
TC 10
Z9 12
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD JUL-SEP
PY 2006
VL 16
BP 485
EP 545
DI 10.1017/S095679680600596X
PN 4-5
PG 61
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 079KJ
UT WOS:000240174500005
OA Bronze
DA 2024-07-18
ER

PT J
AU Bird, R
   Mu, SC
AF Bird, R
   Mu, SC
TI Countdown: A case study in origami programming
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID FOLDS
AB Countdown is the name of a game in which one is given a list of source numbers and a target number, with the aim of building an arithmetic expression out of the source numbers to get as close to the target as possible. Starting with a relational specification we derive a number of functional programs for solving Countdown. These programs are obtained by exploiting the properties of the folds and unfolds of various data types, a style of programming Gibbons has aptly called origami programming. Countdown is attractive as a case study in origami programming both as an illustration of how different algorithms can emerge from a single specification, as well as the space and time trade-offs that have to be taken into account in comparing functional programs.
C1 Univ Oxford, Programming Res Grp, Oxford OX1 3QD, England.
   Univ Tokyo, Dept Informat Engn, Bunkyo Ku, Tokyo 1138656, Japan.
C3 University of Oxford; University of Tokyo
RP Bird, R (corresponding author), Univ Oxford, Programming Res Grp, Wolfson Bldg,Parks Rd, Oxford OX1 3QD, England.
RI Mu, Shin-Cheng/ABA-7746-2020
OI Mu, Shin-Cheng/0000-0002-4755-601X
CR Bird R, 2003, LECT NOTES COMPUT SC, V2638, P1
   Bird R., 1998, INTRO FUNCTIONAL PRO, V2nd
   Bird Richard, 1997, Algebra of Programming
   CURTIS S, 1995, THESIS OXFORD U COMP
   GIBBON J, 2003, FUN PROGRAMMING
   Hutton G, 2002, J FUNCT PROGRAM, V12, P609, DOI 10.1017/S0956796801004300
   Mu SC, 2002, LECT NOTES COMPUT SC, V2386, P209
   [No title captured]
NR 8
TC 2
Z9 2
U1 0
U2 2
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD SEP
PY 2005
VL 15
BP 679
EP 702
DI 10.1017/S0956796805005642
PN 5
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 970SE
UT WOS:000232329100003
OA Bronze
DA 2024-07-18
ER

PT J
AU McBride, C
AF McBride, C
TI First-order unification by structural recursion
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID ALGORITHM
AB First-order unification algorithms (Robinson, 1965) are traditionally implemented via general recursion, with separate proofs for partial correctness and termination. The latter tends to involve counting the number of unsolved variables and showing that this total decreases each time a substitution enlarges the terms. There are many such proofs in the literature (Manna & Waldinger, 1981; Paulson, 1985; Coen, 1992; Rouyer, 1992; Jaume, 1997; Bove, 1999). This paper shows how a dependent type can relate terms to the set of variables over which they are constructed. As a consequence, first-order unification becomes a structurally recursive program, and a termination proof is no longer required. Both the program and its correctness proof have been checked using the proof assistant LEGO (Luo Pollack, 1992; McBride, 1999).
C1 Univ Durham, Dept Comp Sci, Durham DH1 3LE, England.
C3 Durham University
RP McBride, C (corresponding author), Univ Durham, Dept Comp Sci, South Rd, Durham DH1 3LE, England.
EM c.t.mcbride@durham.ac.uk
CR [Anonymous], 1994, Computation and reasoning: a type theory for computer science
   AUGUSTSSON L, 1998, ACM INT C FUNCT PROG
   Bove A., 1999, THESIS CHALMERS U TE
   BURSTALL RM, 1987, J COMPUT SYST SCI, V34, P409, DOI 10.1016/0022-0000(87)90031-6
   BURSTALL RM, 1969, COMPUT J, V12, P41, DOI 10.1093/comjnl/12.1.41
   COEN M, 1992, THESIS U CAMBRIDGE
   COQUAND C, 1999, WORKSH LOG FRAM MET
   Dybjer P., 1994, Formal Aspects of Computing, V6, P440, DOI 10.1007/BF01211308
   Dybjer P, 1999, LECT NOTES COMPUT SC, V1581, P129
   Huet Gerard P., 1997, Journal of Functional Programming, V7, P549
   JAUME M, 1997, SUPPL P 10 INT C THE, P79
   Luo Z., 1992, ECSLFCS92211 U ED DE
   MAGNUSSON L, 1994, THESIS CHALMERS U TE
   MANNA Z, 1981, SCI COMPUT PROGRAM, V1, P5, DOI 10.1016/0167-6423(81)90004-6
   MCBRIDE C, 2003, LEGO DEV 1 ORDER UNI
   MCBRIDE C, 2003, PROVING 1 ORDER UNIF
   McBride Conor, 1999, PhD thesis
   PAULSON LC, 1985, SCI COMPUT PROGRAM, V5, P143, DOI 10.1016/0167-6423(85)90009-7
   Pfenning F., 1990, LNCS, V442, P209
   ROBINSON JA, 1965, J ACM, V12, P23, DOI 10.1145/321250.321253
   Rouyer J., 1992, 1795 INRIA
   TURNER DA, 1995, LNCS, V1022
NR 22
TC 11
Z9 13
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD NOV
PY 2003
VL 13
BP 1061
EP 1075
DI 10.1017/S0956796803004957
PN 6
PG 15
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 754AZ
UT WOS:000187281700003
OA Bronze
DA 2024-07-18
ER

PT J
AU Elliott, C
   Finne, S
   De Moor, O
AF Elliott, C
   Finne, S
   De Moor, O
TI Compiling embedded languages
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article; Proceedings Paper
CT International Workshop on Semantics, Applications, and Implementation of
   Program Generation
CY SEP 20, 2000
CL MONTREAL, CANADA
SP ACM, SIGPLAN
AB Functional languages are particularly well-suited to the interpretive implementations of Domain-Specific Embedded Languages (DSELs). We describe an implemented technique for producing optimizing compilers for DSELs, based on Kamin's idea of DSELs for program generation. The technique uses a data type of syntax for basic types, a set of smart constructors that perform rewriting over those types, some code motion transformations, and a back-end code generator. Domain-specific optimization results from chains of domain-independent rewrites on basic types. New DSELs are defined directly in terms of the basic syntactic types, plus host language functions and tuples. This definition style makes compilers easy to write and, in fact, almost identical to the simplest embedded interpreters. We illustrate this technique with a language Pan for the computationally intensive domain of image synthesis and manipulation.
C1 Microsoft Res, Redmond, WA 98052 USA.
   Galoi Connect Inc, Beaverton, OR 97005 USA.
   Univ Oxford, Comp Lab, Oxford OX1 3QD, England.
C3 Microsoft; University of Oxford
RP Microsoft Res, 1 Microscoft Way, Redmond, WA 98052 USA.
CR ALSTRUP S, 1999, SICOMP SIAM J COMPUT, V28
   [Anonymous], 1993, Partial Evaluation and Automatic Program Generation
   [Anonymous], 1998, Modern Compiler Implementation in C
   [Anonymous], P PROGR LANG DES IMP
   BERLIN A, 1990, COMPUTER, V23, P25, DOI 10.1109/2.62091
   BERLIN A, 1989, AITR1144 MIT
   BIRD RS, 1984, ACTA INFORM, V21, P239, DOI 10.1007/BF00264249
   BOITEN EA, 1992, SCI COMPUT PROGRAM, V18, P139, DOI 10.1016/0167-6423(92)90008-Y
   CHIN WN, 1993, P ACM SIGPLAN S PART, P119
   Claessen K., 1999, Advances in Computing Science-ASIAN'99. 5th Asian Computing Science Conference. Proceedings (Lecture Notes in Computer Science Vol. 1742), P62
   Danvy O., 1998, Third Fuji International Symposium on Functional and Logic Programming (FLOPS'98), P271
   DAY NA, 1999, SYMBOLIC SIMULATION
   DEMOOR O, 2001, UNPUB COMMON SUBEXPR
   DEMOOR O, 1999, P 3 INT SUMM SCH ADV
   Elliott C, 1999, IEEE T SOFTWARE ENG, V25, P291, DOI 10.1109/32.798320
   ELLIOTT C, 2000, PAN IMAGE GALLERY
   Elliott C., 2001, P BRIDG 2001 MATH CO
   ELLIOTT C, 1998, P PLILP ALP
   Frigo M., 1999, P ACM SIGPLAN 1999 C, P169, DOI [DOI 10.1145/301631.301661, 10.1145/301631.301661]
   *GHC TEAM, GLASG HASK COMP
   HAREL D, 1984, SIAM J COMPUT, V13, P338, DOI 10.1137/0213024
   Harel D., 1985, P 17 ANN ACM S THEOR, P185
   HITCLIFF J, 1999, PARTIAL EVALUATION P, V1706
   Hudak P, 1998, FIFTH INTERNATIONAL CONFERENCE ON SOFTWARE REUSE - PROCEEDINGS, P134, DOI 10.1109/ICSR.1998.685738
   Hudak Paul., 1994, Haskell vs. ada vs. c++ vs awk vs..an experiment in software prototyping productivity
   Hudak Paul., 2000, The Haskell school of expression: learning functional programming through multimedia
   JOHNSSON T, 1987, LECT NOTES COMPUT SC, V274, P154
   Jones S.P., 1997, HASKELL WORKSHOP
   KAMIN S, 1996, STANDARD ML MEATPROG
   Kamin SN, 1997, PROCEEDINGS OF THE CONFERENCE ON DOMAIN-SPECIFIC LANGUAGES, P297
   LANDIN PJ, 1966, COMMUN ACM, V9, P157, DOI 10.1145/365230.365257
   LEIJEN D, 1999, 2 C DOM SPEC LANG DS
   PETTOROSSI A, 1984, THESIS U EDINBURGH S
   RUS T, 1997, P 2 FORM METH PAR PR
   TAHA W, 2000, THOER COMPUT SCI, V248
   THIEMANN P, 1997, GL ARBEITSTAGUNG PRO
   VELDHUIZEN C, 1999, C PLUS PLUS TECHNIQU
   Veldhuizen T., 1995, C++ Report, V7, P26
   WEISE D, 1991, LECT NOTES COMPUT SC, V523, P165
NR 39
TC 38
Z9 38
U1 0
U2 2
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD MAY
PY 2003
VL 13
BP 455
EP 481
DI 10.1017/S0956796802004574
PN 3
PG 27
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 689BA
UT WOS:000183470700002
OA Bronze
DA 2024-07-18
ER

PT J
AU Luo, ZH
AF Luo, ZH
TI PAL<SUP>+</SUP>:: a lambda-free logical framework
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID COERCIVE
AB A lambda-free logical framework takes parameterisation and definitions as the basic notions to provide schematic mechanisms for specification of type theories and their use in practice. The framework presented here, PAL(+), is a logical framework for specification and implementation of type theories, such as Martin-Lof's type theory or UTT As in Martin-Lof's logical framework (Nordstrom et al., 1990), computational rules can be introduced and are used to give meanings to the declared constants. However, PAL(+) only allows one to talk about the concepts that are intuitively in the object type theories: types and their objects, and families of types and families of objects of types. In particular, in PAL(+), one cannot directly represent families of families of entities, which could be done in other logical frameworks by means of lambda abstraction. PAL(+) is in the spirit of de Bruijn's PAL for Automath (de Bruijn, 1986). Compared with PAL, PAL(+) allows one to represent parametric concepts such as families of types and families of non-parametric objects, which can be used by themselves as totalities as well as when they are fully instantiated. Such parametric objects are represented by local definitions (let-expressions). We claim that PAL(+) is a correct meta-language for specifying type theories (e.g., dependent type theories), as it has the advantage of exactly capturing the intuitive concepts in object type theories, and that its implementation reflects the actual use of type theories in practice. We shall study the meta-theory of PAL(+) by developing its typed operational semantics and showing that it has nice meta-theoretic properties.
C1 Univ Durham, Dept Comp Sci, Durham DH1 3LE, England.
C3 Durham University
RP Luo, ZH (corresponding author), Univ Durham, Dept Comp Sci, South Rd, Durham DH1 3LE, England.
CR [Anonymous], 1994, Computation and reasoning: a type theory for computer science
   BARRAS B, 2000, COQ PROOF ASSISTANT
   Bruijn d. N. G., 1980, HB CURRY ESSAYS COMB, P579
   Callaghan P, 2001, J AUTOM REASONING, V27, P3, DOI 10.1023/A:1010648911114
   CARTMELL J, 1986, ANN PURE APPL LOGIC, V32
   Cartmell J.W., 1978, Generalised algebraic theories and contextual categories
   Constable R L, 1986, Implementing mathematics with the Nuprl proof development system
   GOGUEN H, 1994, THESIS U EDINBURGH
   GOGUEN H, 1999, TYPED LAMBDA CALCULI
   HARPER R, 1987, P 2 ANN S LOG COMP S
   LUO Z, 2000, P INT WORKSH LOG FRA
   LUO Z, 1997, METAVARIABLES EXISTE
   LUO Z, 1992, ECSLFCS92211 U ED
   Luo ZH, 1999, J LOGIC COMPUT, V9, P105, DOI 10.1093/logcom/9.1.105
   MAGNUSSON L, 1994, LECT NOTES COMPUTER, V806
   Nordstrom B., 1990, Programming in Martin-Lof's Type Theory
   SEVERI P, 1994, LECT NOTES COMPUTER, V813
NR 17
TC 6
Z9 6
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 40 WEST 20TH ST, NEW YORK, NY 10011-4221 USA
SN 0956-7968
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD MAR
PY 2003
VL 13
BP 317
EP 338
DI 10.1017/S0956796802004525
PN 2
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 671RT
UT WOS:000182478400004
OA Bronze
DA 2024-07-18
ER

PT J
AU Bahr, P
AF Bahr, Patrick
TI Modal FRP for all: Functional reactive programming without space leaks
   in Haskell
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB Functional reactive programming (FRP) provides a high-level interface for implementing reactive systems in a declarative manner. However, this high-level interface has to be carefully reigned in to ensure that programs can in fact be executed in practice. Specifically, one must ensure that FRP programs are causal and can be implemented without introducing space leaks. In recent years, modal types have been demonstrated to be an effective tool to ensure these operational properties. In this paper, we present Rattus, a modal FRP language that extends and simplifies previous modal FRP calculi while still maintaining the operational guarantees for productivity, causality, and space leaks. The simplified type system makes Rattus a practical programming language that can be integrated with existing functional programming languages. To demonstrate this, we have implemented a shal-low embedding of Rattus in Haskell that allows the programmer to write Rattus code in familiar Haskell syntax and seamlessly integrate it with regular Haskell code. Thus, Rattus combines the benefits enjoyed by FRP libraries such as Yampa, namely access to a rich library ecosystem (e.g., for graphics programming), with the strong operational guarantees offered by a bespoke type sys-tem. To establish the productivity, causality, and memory properties of the language, we prove type soundness using a logical relations argument fully mechanised in the Coq proof assistant.
C1 [Bahr, Patrick] IT Univ Copenhagen, Comp Sci Dept, Copenhagen, Denmark.
C3 IT University Copenhagen
RP Bahr, P (corresponding author), IT Univ Copenhagen, Comp Sci Dept, Copenhagen, Denmark.
EM paba@itu.dk
OI Bahr, Patrick/0000-0003-1600-8261
CR Abramsky S, 1998, THIRTEENTH ANNUAL IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, PROCEEDINGS, P334, DOI 10.1109/LICS.1998.705669
   [Anonymous], 1952, Symbolic logic: An introduction
   Appel AW, 2001, ACM T PROGR LANG SYS, V23, P657, DOI 10.1145/504709.504712
   Bahr P., 2021, POPL 2021
   Bahr P., 2017, 32 ANN ACMIEEE S LOG, P1
   Bahr P, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341713
   Barber Andrew., 1996, Dual intuitionistic linear logic
   Birkedal L, 2019, Arxiv, DOI arXiv:1804.05236
   Birkedal L, 2011, IEEE S LOG, P55, DOI 10.1109/LICS.2011.16
   Borghuis V. A. J., 1994, THESIS TU EINDHOVEN, P00034
   Caspi P., 1987, P 14 ACM SIGACT SIGP, P178, DOI DOI 10.1145/41625.41641
   Cave A, 2014, ACM SIGPLAN NOTICES, V49, P361, DOI 10.1145/2535838.2535881
   Chaudhury V., 2020, ICFP 2020
   Clouston R, 2018, LECT NOTES COMPUT SC, V10803, P258, DOI 10.1007/978-3-319-89366-2_14
   Elliott C, 1997, ACM SIGPLAN NOTICES, V32, P263, DOI 10.1145/258949.258973
   Guatto A, 2018, LICS'18: PROCEEDINGS OF THE 33RD ANNUAL ACM/IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P482, DOI 10.1145/3209108.3209148
   Hudak P., 2004, ADV FUNCTIONAL PROGR, P45
   Järvi J, 2008, GPCE'08: PROCEEDINGS OF THE ACM SIGPLAN SEVENTH INTERNATIONAL CONFERENCE ON GENERATIVE PROGRAMMING AND COMPONENT ENGINEERING, P89
   Jeffrey A, 2014, IEEE S LOG, DOI 10.1145/2603088.2603106
   Jeffrey Alan., 2012, Proceedings of the sixth workshop on Programming languages meets program verification, P49
   Jeltsch W., 2013, Proceedings of the 7th workshop on Programming languages meets program verification, P69
   Kavvos GA, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290333
   Krishnaswami NR, 2013, ACM SIGPLAN NOTICES, V48, P221, DOI [10.1145/2544174.2500588, 10.1145/2500365.2500588]
   Krishnaswami NR, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P45
   Krishnaswami NR, 2011, IEEE S LOG, P257, DOI 10.1109/LICS.2011.38
   Mannaa B., 2018, 3 INT C FORMAL STRUC
   Mogelberg RE, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290317
   Nakano H, 2000, IEEE S LOG, P255, DOI 10.1109/LICS.2000.855774
   Nilsson H, 2002, P 2002 ACM SIGPLAN W, P51, DOI DOI 10.1145/581690.581695
   Parent S., 2006, WORKSHOP LIB CENTRIC
   Paterson R, 2001, ACM SIGPLAN NOTICES, V36, P229, DOI 10.1145/507669.507664
   Perez I, 2020, J FUNCT PROGRAM, V30, DOI 10.1017/S0956796820000210
   Perez I, 2016, ACM SIGPLAN NOTICES, V51, P33, DOI [10.1145/2976002.2976010, 10.1145/3241625.2976010]
   Pnueli A., 1977, 18th Annual Symposium on Foundations of Computer Science, P46, DOI 10.1109/SFCS.1977.32
   Pouzet M., 2006, Universite Paris-Sud, LRI, V1, P25
   Sculthorpe N, 2009, ICFP'09: PROCEEDINGS OF THE 2009 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P23
   van der Ploeg A, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P302, DOI 10.1145/2784731.2784752
NR 37
TC 3
Z9 3
U1 1
U2 2
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD DEC 26
PY 2022
VL 32
AR e15
DI 10.1017/S0956796822000132
PG 48
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 7I5CW
UT WOS:000903906800001
OA Green Published, hybrid
DA 2024-07-18
ER

PT J
AU Kiselyov, O
   Mu, SC
   Sabry, A
AF Kiselyov, Oleg
   Mu, Shin-Cheng
   Sabry, Amr
TI Not by equations alone Reasoning with extensible effects
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID HANDLERS
AB The challenge of reasoning about programs with (multiple) effects such as mutation, jumps, or IO dates back to the inception of program semantics in the works of Strachey and Landin. Using monads to represent individual effects and the associated equational laws to reason about them proved exceptionally effective. Even then it is not always clear what laws are to be associated with a monad-for a good reason, as we show for non-determinism. Combining expressions using different effects brings challenges not just for monads, which do not compose, but also for equational reasoning: the interaction of effects may invalidate their individual laws, as well as induce emerging properties that are not apparent in the semantics of individual effects. Overall, the problems are judging the adequacy of a law; determining if or when a law continues to hold upon addition of new effects; and obtaining and easily verifying emergent laws.
   We present a solution relying on the framework of (algebraic, extensible) effects, which already proved itself for writing programs with multiple effects. Equipped with a fairly conventional denotational semantics, this framework turns useful, as we demonstrate, also for reasoning about and optimizing programs with multiple interacting effects. Unlike the conventional approach, equational laws are not imposed on programs/effect handlers, but induced from them: our starting point hence is a program (model), whose denotational semantics, besides being used directly, suggests and justifies equational laws and clarifies side conditions. The main technical result is the introduction of the notion of equivalence modulo handlers ("modulo observation") or a particular combination of handlers-and proving it to be a congruence. It is hence usable for reasoning in any context, not just evaluation contexts-provided particular conditions are met.
   Concretely, we describe several realistic handlers for non-determinism and elucidate their laws (some of which hold in the presence of any other effect). We demonstrate appropriate equational laws of non-determinism in the presence of global state, which have been a challenge to state and prove before.
C1 [Kiselyov, Oleg] Tohoku Univ, Grad Sch Informat Sci, Sendai, Miyagi, Japan.
   [Mu, Shin-Cheng] Acad Sinica, Inst Informat Sci, Taipei, Taiwan.
   [Sabry, Amr] Indiana Univ, Dept Comp Sci, Bloomington, IN 47405 USA.
C3 Tohoku University; Academia Sinica - Taiwan; Indiana University System;
   Indiana University Bloomington
RP Kiselyov, O (corresponding author), Tohoku Univ, Grad Sch Informat Sci, Sendai, Miyagi, Japan.
EM oleg@okmij.org; scm@iis.sinica.edu.tw; sabry@indiana.edu
RI Mu, Shin-Cheng/ABA-7746-2020
OI Mu, Shin-Cheng/0000-0002-4755-601X; Sabry, Amr/0000-0002-1025-7331;
   Kiselyov, Oleg/0000-0002-2570-2186
FU JSPS KAKENHI [18H03218, 17K00091]; Grants-in-Aid for Scientific Research
   [18H03218, 17K00091] Funding Source: KAKEN
FX This work was partially supported by JSPS KAKENHI Grants Number 18H03218
   and 17K00091.
CR Affeldt Reynald, 2018, 35 C JAP SOC SOFTW S
   [Anonymous], 1990, HDB THEORETICAL COMP
   Armoni M., 2009, SIGCSE B, V41, P141
   Bauer A, 2015, J LOG ALGEBR METHODS, V84, P108, DOI 10.1016/j.jlamp.2014.02.001
   Bauer Andrej, 2014, LOGICAL METHODS COMP, V1
   Brady E, 2013, ACM SIGPLAN NOTICES, V48, P133, DOI [10.1145/2500365.2500581, 10.1145/2544174.2500581]
   Cartwright R., 1994, Theoretical Aspects of Computer Software. International Symposium TACS '94 Proceedings, P244
   Chen Yu-Fang, 2017, INT C NETW SYST
   Fischer S, 2011, J FUNCT PROGRAM, V21, P413, DOI 10.1017/S0956796811000189
   Forster Y, 2019, J FUNCT PROGRAM, V29, DOI 10.1017/S0956796819000121
   Gibbons J, 2011, ICFP 11 - PROCEEDINGS OF THE 2011 ACM SIGPLAN: INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P2
   HAREL D, 1978, 5TH P ACM S PRINC PR, P203
   Hinze R, 2000, ACM SIGPLAN NOTICES, V35, P186, DOI 10.1145/357766.351258
   Hutton G., 2007, S TRENDS FUNCT PROGR
   Hyland M, 2006, THEOR COMPUT SCI, V357, P70, DOI 10.1016/j.tcs.2006.03.013
   Johann P, 2010, IEEE S LOG, P209, DOI 10.1109/LICS.2010.29
   Kiselyov O, 2018, ELECTRON P THEOR COM, P23, DOI 10.4204/EPTCS.285.2
   Kiselyov O, 2015, ACM SIGPLAN NOTICES, V50, P94, DOI 10.1145/2804302.2804319
   Kiselyov O, 2013, ACM SIGPLAN NOTICES, V48, P59, DOI 10.1145/2503778.2503791
   Kiselyov Oleg, 2017, HOPE 2017 ICFP 2017
   Leijen D, 2017, ACM SIGPLAN NOTICES, V52, P486, DOI 10.1145/3093333.3009872
   Moggi E., 1989, ECSLFCS90113
   Mu S., 2019, TRIIS19003
   Mu Shin-Cheng, 2019, TRIIS19002
   Pitts AM, 1996, INFORM COMPUT, V127, P66, DOI 10.1006/inco.1996.0052
   Plotkin G, 2003, APPL CATEGOR STRUCT, V11, P69, DOI 10.1023/A:1023064908962
   Plotkin G, 2009, LECT NOTES COMPUT SC, V5502, P80, DOI 10.1007/978-3-642-00590-9_7
   Pretnar Matija, 2010, THESIS
   RABIN MO, 1959, IBM J RES DEV, V3, P114, DOI 10.1147/rd.32.0114
   Reynolds J. C., 1981, Algorithmic Languages. Proceedings of the International Symposium, P345
   THOMPSON K, 1968, COMMUN ACM, V11, P419, DOI 10.1145/363347.363387
   Winskel G., 1993, The Formal Semantics of Programming Languages
   Wu N, 2014, ACM SIGPLAN NOTICES, V49, P1, DOI 10.1145/2633357.2633358
   Zaharia M., 2010, HOTCLOUD 2010
NR 34
TC 3
Z9 3
U1 0
U2 1
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD JAN 27
PY 2021
VL 31
AR e2
DI 10.1017/S0956796820000271
PG 42
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA PY2BT
UT WOS:000611854900001
DA 2024-07-18
ER

PT J
AU Cockx, J
   Abel, A
AF Cockx, Jesper
   Abel, Andreas
TI Elaborating dependent (co)pattern matching: No pattern left behind
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB In a dependently typed language, we can guarantee correctness of our programmes by providing formal proofs. To check them, the typechecker elaborates these programs and proofs into a low-level core language. However, this core language is by nature hard to understand by mere humans, so how can we know we proved the right thing? This question occurs in particular for dependent copattern matching, a powerful language construct for writing programmes and proofs by dependent case analysis and mixed induction/coinduction. A definition by copattern matching consists of a list of clauses that are elaborated to a case tree, which can be further translated to primitive eliminators. In previous work this second step has received a lot of attention, but the first step has been mostly ignored so far. We present an algorithm elaborating definitions by dependent copattern matching to a core language with inductive data types, coinductive record types, an identity type, and constants defined by well-typed case trees. To ensure correctness, we prove that elaboration preserves the first-match semantics of the user clauses. Based on this theoretical work, we reimplement the algorithm used by Agda to check left-hand sides of definitions by pattern matching. The new implementation is at the same time more general and less complex, and fixes a number of bugs and usability issues with the old version. Thus, we take another step towards the formally verified implementation of a practical dependently typed language.
C1 [Cockx, Jesper; Abel, Andreas] Chalmers Univ, Gothenburg, Sweden.
   [Cockx, Jesper; Abel, Andreas] Gothenburg Univ, Gothenburg, Sweden.
   [Cockx, Jesper] Delft Univ Technol, Delft, Netherlands.
C3 Chalmers University of Technology; University of Gothenburg; Delft
   University of Technology
RP Cockx, J (corresponding author), Chalmers Univ, Gothenburg, Sweden.; Cockx, J (corresponding author), Gothenburg Univ, Gothenburg, Sweden.; Cockx, J (corresponding author), Delft Univ Technol, Delft, Netherlands.
EM jesper@sikanda.be; andreas.abel@gu.se
RI Cockx, Jesper/U-1628-2018
OI Cockx, Jesper/0000-0003-3862-4073
FU Swedish Research Council (Vetenskapsradet) [621-2014-4864]; EU Cost
   Action The European research network on types for programming and
   verification (EUTypes) [CA15123]
FX The authors acknowledge support by the Swedish Research Council
   (Vetenskapsradet) under Grant No. 621-2014-4864 Termination Certificates
   for Dependently-Typed Programs and Proofs via Refinement Types. Our
   research group is part of the EU Cost Action CA15123 The European
   research network on types for programming and verification (EUTypes). We
   thank the anonymous referees of both the conference version and the
   current version of this paper for their comments that helped improving
   the presentation.
CR Abel A, 2013, ACM SIGPLAN NOTICES, V48, P27, DOI 10.1145/2480359.2429075
   Abel A, 2013, ACM SIGPLAN NOTICES, V48, P185, DOI [10.1145/2500365.2500591, 10.1145/2544174.2500591]
   Agda development team, 2017, AGD 2 5 3 DOC
   Andreoli J. M., 1992, Journal of Logic and Computation, V2, P297, DOI 10.1093/logcom/2.3.297
   [Anonymous], 2018, UNIFIER THROWS AWAY
   [Anonymous], 2017, RECORD CONSTRUCTOR I
   [Anonymous], 2017, DISAMBIGUATION TYPE
   [Anonymous], 2017, PANIC UNBOUND VARIAB
   [Anonymous], 2007, PRACTICAL PROGRAMMIN
   [Anonymous], 2018, MISMATCH ORDER MATCH
   [Anonymous], 2017, The Coq Proof Assistant Reference Manual
   [Anonymous], 1984, LISP and Functional Programming
   [Anonymous], 1998, 25 YEARS CONSTRUCTIV
   AUGUSTSSON L, 1985, LECT NOTES COMPUT SC, V201, P368
   Blanchette JC, 2017, LECT NOTES COMPUT SC, V10201, P111, DOI 10.1007/978-3-662-54434-1_5
   Brady E, 2004, ANN NY ACAD SCI, V3085, P115
   Brady E, 2013, J FUNCT PROGRAM, V23, P552, DOI 10.1017/S095679681300018X
   Cockx J., 2017, THESIS
   Cockx J., 2016, UNIFIERS EQUIVALENCE, P270, DOI [10.1145/2951913.2951917, DOI 10.1145/2951913.2951917]
   Cockx J, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3236770
   Coquand Thierry., 1992, P WORKSHOP TYPES PRO, P71
   de Moura L, 2015, LECT NOTES ARTIF INT, V9195, P378, DOI 10.1007/978-3-319-21401-6_26
   DEBRUIJN NG, 1991, INFORM COMPUT, V91, P189, DOI 10.1016/0890-5401(91)90066-B
   Garrigue J., 2016, P 21 ACM SIGPLAN INT, DOI [10.1145/2951913, DOI 10.1145/2951913]
   Goguen H, 2006, LECT NOTES COMPUT SC, V4060, P521, DOI 10.1007/11780274_27
   Krishnaswami NR, 2009, ACM SIGPLAN NOTICES, V44, P366, DOI 10.1145/1594834.1480927
   Laforgue P, 2017, PROCEEDINGS OF THE 19TH INTERNATIONAL SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING (PPDP 2017), P97, DOI 10.1145/3131851.3131869
   Licata DR, 2008, IEEE S LOG, P241, DOI 10.1109/LICS.2008.48
   Maranget L., 1992, Proceedings of the 1992 ACM Conference on Lisp and Functional Programming, P21, DOI 10.1145/141471.141499
   McBride C, 2004, J FUNCT PROGRAM, V14, P69, DOI 10.1017/S0956796803004829
   McBride C., 2000, THESIS
   Oury N, 2007, PLPV'07: PROCEEDINGS OF THE 2007 WORKSHOP ON PROGRAMMING LANGUAGES MEETS PROGRAM VERIFICATION, P47, DOI 10.1145/1292597.1292606
   Setzer Anton, 2014, Rewriting and Typed Lambda Calculi. Joint International Conference, RTA-TLCA 2014, Held as Part of the Vienna Summer of Logic, VSL 2014. Proceedings: LNCS 8560, P31, DOI 10.1007/978-3-319-08918-8_3
   Sozeau M, 2010, LECT NOTES COMPUT SC, V6172, P419, DOI 10.1007/978-3-642-14052-5_29
   Thibodeau D., 2016, INDEXED CODATA TYPES, P351, DOI [10.1145/2951913.2951929, DOI 10.1145/2951913.2951929]
   Zeilberger N, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P359, DOI 10.1145/1328438.1328482
   Zeilberger  Noam, 2009, THESIS
NR 37
TC 1
Z9 1
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD JAN 21
PY 2020
VL 30
AR e2
DI 10.1017/S0956796819000182
PG 43
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA KU4PO
UT WOS:000519691800001
OA hybrid, Green Published
DA 2024-07-18
ER

PT J
AU Seidel, EL
   Jhala, R
   Weimer, W
AF Seidel, Eric L.
   Jhala, Ranjit
   Weimer, Westley
TI Dynamic witnesses for static type errors (or, Ill-Typed Programs Usually
   Go Wrong)
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB Static type errors are a common stumbling block for newcomers to typed functional languages. We present a dynamic approach to explaining type errors by generating counterexample witness inputs that illustrate how an ill-typed program goes wrong. First, given an ill-typed function, we symbolically execute the body to synthesize witness values that make the program go wrong. We prove that our procedure synthesizes general witnesses in that if a witness is found, then for all inhabited input types, there exist values that can make the function go wrong. Second, we show how to extend this procedure to produce a reduction graph that can be used to interactively visualize and debug witness executions. Third, we evaluate the coverage of our approach on two data sets comprising over 4,500 ill-typed student programs. Our technique is able to generate witnesses for around 85% of the programs, our reduction graph yields small counterexamples for over 80% of the witnesses, and a simple heuristic allows us to use witnesses to locate the source of type errors with around 70% accuracy. Finally, we evaluate whether our witnesses help students understand and fix type errors, and find that students presented with our witnesses show a greater understanding of type errors than those presented with a standard error message.
C1 [Seidel, Eric L.; Jhala, Ranjit] Univ Calif San Diego, Dept Comp Sci & Engn, San Diego, CA 92103 USA.
   [Weimer, Westley] Univ Virginia, Dept Comp Sci, Charlottesville, VA 22903 USA.
C3 University of California System; University of California San Diego;
   University of Virginia
RP Seidel, EL (corresponding author), Univ Calif San Diego, Dept Comp Sci & Engn, San Diego, CA 92103 USA.
EM eseidel@cs.ucsd.edu; jhala@cs.ucsd.edu; weimer@virginia.edu
FU NSF [CCF-1422471, CCF-1223850, CCF-1218344, CCF-1116289, CCF-0954024];
   Air Force grant [FA8750-15-2-0075]
FX This work was supported by NSF grants CCF-1422471, CCF-1223850,
   CCF-1218344, CCF-1116289, CCF-0954024, Air Force grant FA8750-15-2-0075,
   and a gift from Microsoft Research.
CR Bayne M, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P521, DOI 10.1145/1985793.1985864
   Cadar C., 2008, Proceedings of the 8th USENIX conference on Operating systems design and implementation, OSDI'08, (USA), P209
   Chamarthi HR, 2011, ELECTRON PROC THEOR, P4, DOI 10.4204/EPTCS.70.1
   Chargueraud A., 2014, ML Family/OCaml Workshops, P80
   CHEN S, 2014, POPL, P583, DOI DOI 10.1145/2535838.2535863
   Christiansen David Raymond, 2014, PREPROCEEDINGS 15 S
   Claessen K, 2000, ACM SIGPLAN NOTICES, V35, P268, DOI 10.1145/357766.351266
   Clements J, 2001, LECT NOTES COMPUT SC, V2028, P320
   Csallner C, 2004, SOFTWARE PRACT EXPER, V34, P1025, DOI 10.1002/spe.602
   Damas L., 1982, C REC 9 ANN ACM S PR, P207, DOI DOI 10.1145/582153.582176
   Felleisen M., 2009, Semantics Engineering with PLT Redex
   Flanagan C, 1996, ACM SIGPLAN NOTICES, V31, P23, DOI 10.1145/249069.231387
   FLEISS JL, 1971, PSYCHOL BULL, V76, P378, DOI 10.1037/h0031619
   Gast H., 2004, Implementation and Application of Functional Languages. 16th International Workshop, IFL 2004. Revised Selected Papers (Lecture Notes in Computer Science Vol. 3474), P72
   Godefroid P, 2005, ACM SIGPLAN NOTICES, V40, P213, DOI 10.1145/1064978.1065036
   Guo Philip J., 2013, P 44 ACM TECHN S COM, P579
   Haack C, 2003, LECT NOTES COMPUT SC, V2618, P284
   Hage J., 2006, LECT NOTES COMPUTER, P199, DOI DOI 10.1007/978-3-540-74130-5_12
   Hage J, 2009, ELECTRON NOTES THEOR, V236, P163, DOI 10.1016/j.entcs.2009.03.021
   Heeren B, 2003, ACM SIGPLAN NOTICES, V38, P3, DOI 10.1145/944746.944707
   Krippendorff K., 2012, Content analysis
   LANDIS JR, 1977, BIOMETRICS, V33, P159, DOI 10.2307/2529310
   Lee OS, 1998, ACM T PROGR LANG SYS, V20, P707, DOI 10.1145/291891.291892
   Lempsink E., 2009, THESIS
   Lerner B., 2006, P 2006 WORKSH ML, P63
   Lerner BS, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P425, DOI 10.1145/1250734.1250783
   Lindblad F., 2007, TRENDS FUNCTIONAL PR, P105
   Loncaric C, 2016, ACM SIGPLAN NOTICES, V51, P781, DOI 10.1145/3022671.2983994
   MANN HB, 1947, ANN MATH STAT, V18, P50, DOI 10.1214/aoms/1177730491
   Marceau G, 2011, SIGCSE 11: PROCEEDINGS OF THE 42ND ACM TECHNICAL SYMPOSIUM ON COMPUTER SCIENCE EDUCATION, P499
   Marceau Guillaume., 2011, Proceedings of the 10th SIGPLAN symposium on New ideas, new paradigms, and reflections on programming and software, ONWARD '11, P3
   McAdam B.J., 1998, Implementation of Functional Languages, Lecture Notes in Computer Science, DOI [DOI 10.1007/3-540-48515-5_9, 10.1007/3-540-48515-5_9.]
   Naylor M, 2007, SEVENTH IEEE INTERNATIONAL WORKING CONFERENCE ON SOURCE CODE ANALYSIS AND MANIPULATION, PROCEEDINGS, P133
   Nelson G., 1979, ACM Transactions on Programming Languages and Systems, V1, P245, DOI 10.1145/357073.357079
   Neubauer M, 2003, ACM SIGPLAN NOTICES, V38, P15, DOI 10.1145/944746.944708
   Nguyen PC, 2015, ACM SIGPLAN NOTICES, V50, P446, DOI 10.1145/2737924.2737971
   Pacheco C, 2007, PROC INT CONF SOFTW, P75
   Pavlinovic Z, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P412, DOI 10.1145/2784731.2784765
   Pavlinovic Z, 2014, ACM SIGPLAN NOTICES, V49, P525, DOI [10.1145/2714064.2660230, 10.1145/2660193.2660230]
   Perera R, 2012, ACM SIGPLAN NOTICES, V47, P365, DOI 10.1145/2398856.2364579
   Rahli V, 2015, ELECTRON NOTES THEOR, V312, P197, DOI 10.1016/j.entcs.2015.04.012
   Runciman C, 2008, HASKELL'08: PROCEEDINGS OF THE ACM SIGPLAN 2008 HASKELL SYMPOSIUM, P37
   Sagonas K., P ACM SIGPLAN 2013 W, DOI [DOI 10.1145/2426890.2426897, 10.1145/2426890.2426897.]
   Schilling Thomas, 2011, TRENDS FUNCTIONAL PR, P1, DOI 10.1007/978-3-642-32037-8_1
   Seidel E. L., 2016, DYNAMIC WITNESSES ST
   Seidel EL, 2016, ACM SIGPLAN NOTICES, V51, P228, DOI 10.1145/3022670.2951915
   Seidel EL, 2015, LECT NOTES COMPUT SC, V9032, P812, DOI 10.1007/978-3-662-46669-8_33
   Serrano A, 2016, LECT NOTES COMPUT SC, V9632, P672, DOI 10.1007/978-3-662-49498-1_26
   Seven D., 2014, Knightmare: a DevOps cautionary tale
   Tillmann N, 2008, LECT NOTES COMPUT SC, V4966, P134
   Vytiniotis D, 2012, ACM SIGPLAN NOTICES, V47, P341, DOI 10.1145/2398856.2364554
   Wheeler D.A., 2014, The apple goto fail vulnerability: lessons learned
   ZHANG D, 2015, PLDI, P12, DOI DOI 10.1145/2737924.2738009
   ZHANG D, 2014, POPL, P569
NR 54
TC 0
Z9 0
U1 0
U2 2
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD MAY 21
PY 2018
VL 28
AR e13
DI 10.1017/S0956796818000126
PG 47
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GG7JW
UT WOS:000432875300001
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Shaikhha, A
   Dashti, M
   Koch, C
AF Shaikhha, Amir
   Dashti, Mohammad
   Koch, Christoph
TI Push versus pull-based loop fusion in query engines
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID DBTOASTER
AB Database query engines use pull-based or push-based approaches to avoid the materialization of data across query operators. In this paper, we study these two types of query engines in depth and present the limitations and advantages of each engine. Similarly, the programming languages community has developed loop fusion techniques to remove intermediate collections in the context of collection programming. We draw parallels between databases (DB) and programming language (PL) research by demonstrating the connection between pipelined query engines and loop fusion techniques. Based on this connection, we propose a new type of pull-based engine, inspired by a loop fusion technique, which combines the benefits of both approaches. Then, we experimentally evaluate the various engines, in the context of query compilation, for the first time in a fair environment, eliminating the biasing impact of ancillary optimizations that have traditionally only been used with one of the approaches. We show that for realistic analytical workloads, there is no considerable advantage for either form of pipelined query engine, as opposed to what recent research suggests. Also, by using micro-benchmarks, which demonstrate certain edge cases on which one approach or the other performs better, we show that our proposed engine dominates the existing engines by combining the benefits of both.
C1 [Shaikhha, Amir; Dashti, Mohammad; Koch, Christoph] Ecole Polytech Fed Lausanne, Lausanne, Switzerland.
C3 Swiss Federal Institutes of Technology Domain; Ecole Polytechnique
   Federale de Lausanne
RP Shaikhha, A (corresponding author), Ecole Polytech Fed Lausanne, Lausanne, Switzerland.
EM amir.shaikhha@epfl.ch; mohammad.dashti@epfl.ch; christoph.koch@epfl.ch
RI Shaikhha, Amir/JXL-7753-2024
CR Abadi D.J., 2006, P SIGMOD 06, P671, DOI [10.1145/1142473.1142548, DOI 10.1145/1142473.1142548]
   Ahmad Y, 2009, PROC VLDB ENDOW, V2, P1566, DOI 10.14778/1687553.1687592
   [Anonymous], 1993, P UK JOINT FRAM INF
   [Anonymous], 2013, P 2013 ACM SIGMOD IN, DOI DOI 10.1145/2463676.2463710
   [Anonymous], 2012, IEEE Data Eng. Bull.
   [Anonymous], 2014, IEEE DATA ENG B
   [Anonymous], P INT C DAT ENG
   Armbrust M., 2015, P SIGMOD 15
   Biboudis Aggelos., 2015, 29 EUR C OBJ OR PROG, P591, DOI 10.4230/LIPIcs.ECOOP.2015.591
   Binnig C, 2009, ACM SIGMOD/PODS 2009 CONFERENCE, P283
   BOHM C, 1985, THEOR COMPUT SCI, V39, P135, DOI 10.1016/0304-3975(85)90135-5
   Breazu-Tannen Val, 1991, LOGICAL COMPUTATIONA
   Breazu-Tannen Val, 1992, Naturally embedded query languages.
   Buchlovsky P, 2006, ELECTRON NOTES THEOR, V155, P309, DOI 10.1016/j.entcs.2005.11.061
   Chhugani J, 2008, PROC VLDB ENDOW, V1, P1313
   Choi JD, 1999, ACM SIGPLAN NOTICES, V34, P1, DOI 10.1145/320385.320386
   Coutts D., 2007, P ICEP 07
   Crotty A., 2015, P CIDR
   Emir B., 2007, P ECOOP 07
   Fegaras L, 2000, ACM T DATABASE SYST, V25, P457, DOI 10.1145/377674.377676
   Gedik B., 2008, P SIGMOD
   Gibbons J, 2009, J FUNCT PROGRAM, V19, P377, DOI 10.1017/S0956796809007291
   Gill A., 1993, P FPCA
   GRAEFE G, 1993, COMPUT SURV, V25, P73, DOI 10.1145/152610.152611
   GRAEFE G, 1994, IEEE T KNOWL DATA EN, V6, P120, DOI 10.1109/69.273032
   Grust T, 1999, J INTELL INF SYST, V12, P191, DOI 10.1023/A:1008705026446
   Grust T., 2009, P SIGMOD 2009
   Grust T, 2010, PROC VLDB ENDOW, V3, P162, DOI 10.14778/1920841.1920866
   Hellerstein JM, 2007, FOUND TRENDS DATABAS, V1, P141, DOI 10.1561/1900000002
   Hinze R, 2011, LECT NOTES COMPUT SC, V5836, P1, DOI 10.1007/978-3-642-24452-0_1
   Hirzel M, 2014, ACM COMPUT SURV, V46, DOI 10.1145/2528412
   Hofer Christian, 2010, GPCE, DOI [10.1145/1868294.1868307, DOI 10.1145/1868294.1868307]
   Hudak P., 1996, ACM COMPUT SURV, V28, P196, DOI [10.1145/242224.242477, DOI 10.1145/242224.242477]
   Jonnalagedda Manohar, 2015, P 6 ACM SIGPLAN S SC, P41, DOI DOI 10.1145/2774975.2774981
   Karpathiotakis M., 2015, P CIDR
   Karpathiotakis M, 2016, PROC VLDB ENDOW, V9, P972
   Klonatos Y, 2014, PROC VLDB ENDOW, V7, P853, DOI 10.14778/2732951.2732959
   Koch C., 2010, P PODS 2010
   Koch C, 2014, VLDB J, V23, P253, DOI 10.1007/s00778-013-0348-4
   Krikellas K, 2010, PROC INT CONF DATA, P613, DOI 10.1109/ICDE.2010.5447892
   Li Z, 1999, VLDB J, V8, P1, DOI 10.1007/s007780050071
   Lorie R. A, 1974, XRM: an extended (N-Ary) relational memory
   Mainland G., 2013, P ICFP 13
   Meijer E., 2006, P SIGMOD 06
   Murray D. G., 2011, P PLDI 11
   Nagel F, 2014, PROC VLDB ENDOW, V7, P1095, DOI 10.14778/2732977.2732984
   Neumann T, 2011, PROC VLDB ENDOW, V4, P539, DOI 10.14778/2002938.2002940
   Padmanabhan S, 2001, PROC INT CONF DATA, P567, DOI 10.1109/ICDE.2001.914871
   Paredaens J., 1988, Proceedings of the Seventh ACM SIGACT-SIGMOD-SIGART Symposium on Principles of Database Systems, P29, DOI 10.1145/308386.308402
   Park YJ, 2012, ASPLOS XVII: SEVENTEENTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS, P363
   Peyton Jones S., 2008, P LIPICS LEIBN INT P, V2
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Polychroniou O, 2015, SIGMOD'15: PROCEEDINGS OF THE 2015 ACM SIGMOD INTERNATIONAL CONFERENCE ON MANAGEMENT OF DATA, P1493, DOI 10.1145/2723372.2747645
   Schuh S, 2016, SIGMOD'16: PROCEEDINGS OF THE 2016 INTERNATIONAL CONFERENCE ON MANAGEMENT OF DATA, P1961, DOI 10.1145/2882903.2882917
   Shaikhha A., 2016, P SIGMOD 16
   Shaikhha A., 2018, T DATABASE SYST, V43
   Shivers O., 2006, P PLDI 06
   Stonebraker Mike, 2005, P VLDB 05
   Svenningsson J., 2002, P ICFP 02
   Tibbetts R., 2011, P STREAMBASE SYST
   Transaction Processing Performance Council, 2017, TPC H DEC SUPP BENCH
   Trinder Phil, 1992, P 3 DBPL WORKSH DBPL, P55
   Veldhuizen T. L., 2014, P 17 INT C DAT THEOR
   Viglas Stratis, 2014, IEEE Data Eng. Bull., V37, P12
   Vlissides John., 1995, READING ADDISON WESL, V49, P11
   WADLER P, 1990, PROCEEDINGS OF THE 1990 ACM CONFERENCE ON LISP AND FUNCTIONAL PROGRAMMING, P61, DOI 10.1145/91556.91592
   WADLER P, 1988, LECT NOTES COMPUT SC, V300, P344
   Zaharia M., 2012, P NSDI 12 USENIX ASS
   Zhou Jingren, 2002, P SIGMOD 02
   Zukowski Marcin, 2005, IEEE Data Eng. Bull., V28, P17
   Zukowski Marcin, 2006, ICDE 59, DOI DOI 10.1109/ICDE.2006.150
NR 71
TC 18
Z9 20
U1 0
U2 1
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD APR 10
PY 2018
VL 28
AR e10
DI 10.1017/S0956796818000102
PG 45
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GD1DS
UT WOS:000430240800001
DA 2024-07-18
ER

PT J
AU Seco, JC
   Ferreira, P
   Lourenço, H
AF Seco, Joao Costa
   Ferreira, Paulo
   Lourenco, Hugo
TI Capability-based localization of distributed and heterogeneous queries
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB One key aspect of data-centric applications is the manipulation of data stored in persistent repositories, which is moving fast from querying a centralized relational database to the ad-hoc combination of constellations of data sources. The extension of general purpose languages with query operations is increasingly popular, as a tool to improve reasoning and optimizing capabilities of interpreters and compilers. However, not much is being done to integrate and orchestrate different and separate sources of data. We present a data manipulation language that abstracts the nature and location of data-sources. We define its semantics and a type directed query localization mechanism to be used in development tools for heterogeneous environments to efficiently compile them into native queries. We introduce a localization procedure based on rewriting of query expressions that is confluent, terminating and provides the maximum mapping between site capabilities and the structure of the query. We provide formal type safety results that support the sound distribution of query fragments over remote sites. Our approach is also suitable for an interactive query construction environment by rich user interfaces that provide immediate feedback on data manipulation operations. This approach is currently the base for the data layer of a development platform for mobile and web applications.
C1 [Seco, Joao Costa] Univ Nova Lisboa, NOVA LINCS, Lisbon, Portugal.
   [Ferreira, Paulo; Lourenco, Hugo] OutSystems, Lisbon, Portugal.
C3 Universidade Nova de Lisboa
RP Seco, JC (corresponding author), Univ Nova Lisboa, NOVA LINCS, Lisbon, Portugal.
EM joao.seco@fct.unl.pt; paulo.ferreira@outsystems.com;
   hugo.lourenco@outsystems.com
RI Seco, João Costa/D-2035-2010
OI Costa Seco, Joao/0000-0002-2840-3966
FU NOVA LINCS [UID/CEC/04516/2013, PTDC/EEI-CTP/4293/2014]
FX We thank the anonymous reviewers for the insightful comments that
   allowed the improvement of this work. Joao Costa Seco is supported by
   NOVA LINCS ref. UID/CEC/04516/2013 and PTDC/EEI-CTP/4293/2014.
CR [Anonymous], THESIS
   [Anonymous], J FUNCT PROGRAM
   Benzaken V, 2003, ACM SIGPLAN NOTICES, V38, P51, DOI 10.1145/944746.944711
   Buneman P., 1994, SIGMOD Record, V23, P87, DOI 10.1145/181550.181564
   BUNEMAN P, 1995, THEOR COMPUT SCI, V149, P3, DOI 10.1016/0304-3975(95)00024-Q
   Cardelli L, 2002, INFORM COMPUT, V177, P160, DOI 10.1006/inco.2001.3121
   Cardelli Luca, 1989, FORM DESCR PROGR CON, P431
   CHEN JC, 2013, P 18 ACM SIGPL INT, V41, P403
   Cheney J, 2014, SIGMOD'14: PROCEEDINGS OF THE 2014 ACM SIGMOD INTERNATIONAL CONFERENCE ON MANAGEMENT OF DATA, P1027, DOI 10.1145/2588555.2612186
   CHLIPALA A, 2015, POPL, V50, P153, DOI DOI 10.1145/2676726.2677004
   CLARK J, 1999, PATH LANGUAGE XPATH
   COLBY LS, 1989, SIGMOD REC, V18, P273, DOI 10.1145/66926.66952
   Cooper E, 2007, LECT NOTES COMPUT SC, V4709, P266
   Cooper E, 2009, LECT NOTES COMPUT SC, V5708, P36, DOI 10.1007/978-3-642-03793-1_3
   Davies R, 2001, J ACM, V48, P555, DOI 10.1145/382780.382785
   Dyck M., 2014, XQUERY 30 XML QUERY
   Fu Y., 2013, P INT S DAT PROGR LA
   Grade N., 2013, P 5 S INF INFORUM
   Halevy Alon, 2006, Proceedings of the 32nd international conference on Very large data bases (2006), P9
   Jones SP, 2007, HASKELL'07: PROCEEDINGS OF THE ACM SIGPLAN 2007 HASKELL WORKSHOP, P61
   Lindley Sam, 2012, TLDI, P91, DOI DOI 10.1145/2103786.2103798
   Lourenco H, 2017, TECHNICAL REPORT
   Murphy T, 2008, LECT NOTES COMPUT SC, V4912, P108
   Newman MHA, 1942, ANN MATH, V43, P223, DOI 10.2307/1968867
   OutSystems, 2016, US AGGR FETCH DISPL
   Papakonstantinou Y, 1998, DISTRIB PARALLEL DAT, V6, P73, DOI 10.1023/A:1008646830769
   Seco J.C., 2015, Proceedings of the 15th Symposium on Database Programming Languages, P11
   Serrano Manuel, 2006, PROCEEEDINGS 21 ANN, P975, DOI [10.1145/1176617.1176756, DOI 10.1145/1176617.1176756]
   SILBERSCHATZ A., 2006, DATABASE SYSTEMS CON, V5
   Vassalos V, 2000, J LOGIC PROGRAM, V43, P75, DOI 10.1016/S0743-1066(99)00026-6
NR 30
TC 3
Z9 3
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PY 2017
VL 27
AR e26
DI 10.1017/S095679681700017X
PG 36
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA FQ1ET
UT WOS:000418099800001
DA 2024-07-18
ER

PT J
AU Cockx, J
   Devriese, D
   Piessens, F
AF Cockx, Jesper
   Devriese, Dominique
   Piessens, Frank
TI Eliminating dependent pattern matching without K
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB Dependent pattern matching is an intuitive way to write programs and proofs in dependently typed languages. It is reminiscent of both pattern matching in functional languages and case analysis in on-paper mathematics. However, in general, it is incompatible with new type theories such as homotopy type theory (HoTT). As a consequence, proofs in such theories are typically harder to write and to understand. The source of this incompatibility is the reliance of dependent pattern matching on the so-called K axiom-also known as the uniqueness of identity proofs-which is inadmissible in HoTT. In this paper, we propose a new criterion for dependent pattern matching without K, and prove it correct by a translation to eliminators in the style of Goguen et al. (2006 Algebra, Meaning, and Computation). Our criterion is both less restrictive than existing proposals, and solves a previously undetected problem in the old criterion offered by Agda. It has been implemented in Agda and is the first to be supported by a formal proof. Thus, it brings the benefits of dependent pattern matching to contexts where we cannot assume K, such as HoTT.
C1 [Cockx, Jesper; Devriese, Dominique; Piessens, Frank] Katholieke Univ Leuven, iMinds Distrinet, Leuven, Belgium.
C3 KU Leuven; IMEC
RP Cockx, J (corresponding author), Katholieke Univ Leuven, iMinds Distrinet, Leuven, Belgium.
EM jesper.cockx@cs.kuleuven.be; dominique.devriese@cs.kuleuven.be;
   frank.piessens@cs.kuleuven.be
RI Piessens, Frank/B-1695-2014; Cockx, Jesper/U-1628-2018; Devriese,
   Dominique/C-5493-2014
OI Cockx, Jesper/0000-0003-3862-4073; Devriese,
   Dominique/0000-0002-3862-6856
CR Altenkirch T., 2012, K PROBLEM
   [Anonymous], 2007, PRACTICAL PROGRAMMIN
   [Anonymous], 2012, The Coq proof assistant reference manual
   [Anonymous], 2014, TYPES PROOFS PROGRAM
   AUGUSTSSON L, 1985, LECT NOTES COMPUT SC, V201, P368
   Barras B, 2009, LECT NOTES COMPUT SC, V5497, P32, DOI 10.1007/978-3-642-02444-3_3
   Boutillier P., 2014, THESIS
   Brady E, 2013, J FUNCT PROGRAM, V23, P552, DOI 10.1017/S095679681300018X
   Cockx J., 2014, YET ANOTHER WAY AGDA
   Cockx J., 2014, P 19 ACM SIGLPLAN IN, P257
   Cockx J., P 21 ACM SI IN PRESS
   Cohen C., 2015, CUBICAL TYPE THEORY
   Coquand Thierry., 1992, P WORKSHOP TYPES PRO, P71
   Dagand P.-E., 2013, THESIS
   Danielsson N.-A., 2013, EXPERIMENTS RELATED
   de Moura L, 2015, LECT NOTES ARTIF INT, V9195, P378, DOI 10.1007/978-3-319-21401-6_26
   Devriese D, 2011, ICFP 11 - PROCEEDINGS OF THE 2011 ACM SIGPLAN: INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P143
   Dybjer P., 1991, P 1 WORKSH LOG FRAM, P213
   Goguen H, 2006, LECT NOTES COMPUT SC, V4060, P521, DOI 10.1007/11780274_27
   HOFMANN M, 1994, IEEE S LOG, P208, DOI 10.1109/LICS.1994.316071
   Jouannaud J.-P., 1990, SOLVING EQUATIONS AB
   Kraus N, 2015, ACM T COMPUT LOG, V16, DOI 10.1145/2729979
   Kraus N, 2013, LECT NOTES COMPUT SC, V7941, P173, DOI 10.1007/978-3-642-38946-7_14
   Licata D., 2011, JUST KIDDING UNDERST
   Licata D. R., 2013, P 28 ANN IEEE ACM S
   Luo Z., 1994, COMPUTATION REASONIN
   Mangin C, 2015, ELECTRON P THEOR COM, P71, DOI 10.4204/EPTCS.185.5
   Maranget L, 2008, ML'08: PROCEEDINGS OF THE 2008 ACM SIGPLAN WORKSHOP ON ML, P35
   McBride C, 2006, LECT NOTES COMPUT SC, V3839, P186
   McBride C, 2004, J FUNCT PROGRAM, V14, P69, DOI 10.1017/S0956796803004829
   McBride C., 2002, Types for Proofs and Programs. International Workshop, TYPES 2000. Selected Papers (Lecture Notes in Computer Science Vol.2277), P197
   McBride C., 2000, THESIS
   McBride C., 1998, DEPENDENT PATTERN MA
   McBride C., 2005, Proceedings of the 5th International Conference on Advanced Functional Programming, AFP'04, P130, DOI DOI 10.1007/11546382_3
   Norell U., 2012, RELEASE NOTES AGDA 2
   Paulin-Mohring C., 1993, Typed Lambda Calculi and Applications. International Conference. TLCA '93, P328, DOI 10.1007/BFb0037116
   Reed J., 2013, POSSIBLE K PROBLEM
   Sicard-Ramirez A., 2013, K OPTION TOO RESTRIC
   Sozeau M., 2015, WORKSH HOM TYP THEOR
   Sozeau M, 2010, LECT NOTES COMPUT SC, V6172, P419, DOI 10.1007/978-3-642-14052-5_29
   The Univalent Foundations Program, 2013, HOM TYP THEOR UN FDN
NR 41
TC 6
Z9 6
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PY 2016
VL 26
BP 1
EP 40
AR e16
DI 10.1017/S0956796816000174
PG 40
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DW8NR
UT WOS:000383913300001
OA Bronze, Green Accepted
DA 2024-07-18
ER

PT J
AU Altenkirch, T
   Chapman, J
AF Altenkirch, Thorsten
   Chapman, James
TI Big-step normalisation
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article; Proceedings Paper
CT Workshop on Mathematically Structured Functional Programming
CY JUL 02, 2006
CL Kuressaare, ESTONIA
AB Traditionally, decidability of conversion for typed lambda-calculi is established by showing that small-step reduction is confluent and strongly normalising. Here we investigate an alternative approach employing a recursively defined normalisation function which we show to be terminating and which reflects and preserves conversion. We apply our approach to the simply typed lambda-calculus with explicit Substitutions and beta eta-equality, a system which is not strongly normalising. We also show how the construction can be extended to system T with the usual beta-rules for the recursion combinator. Our approach is practical, since it does verify an actual implementation of normalisation which, unlike normalisation by evaluation, is first order. An important feature of our approach is that we are using logical relations to establish equational soundness (identity of normal forms reflects the equational theory), instead of the usual syntactic reasoning using the Church-Rosser property of a term rewriting system.
C1 [Altenkirch, Thorsten] Univ Nottingham, Sch Comp Sci, Nottingham NG8 1BB, England.
   [Chapman, James] Tallinn Univ Technol, Inst Cybernet, EE-12618 Tallinn, Estonia.
C3 University of Nottingham; Tallinn University of Technology
RP Altenkirch, T (corresponding author), Univ Nottingham, Sch Comp Sci, Jubilee Campus,Wollaton Rd, Nottingham NG8 1BB, England.
EM txa@cs.nott.ac.uk; james@cs.ioc.ee
RI Chapman, James/AAL-5975-2020
OI Chapman, James/0000-0001-9036-8252; Thorsten,
   Altenkirch/0000-0002-6582-5025
FU EPSRC [EP/G034109/1] Funding Source: UKRI
CR ABADI M, 1990, CONFERENCE RECORD OF THE SEVENTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P31, DOI 10.1145/96709.96712
   ALTENKIRCH T, 1995, LECT NOTES COMPUTER, V953, P182
   ALTENKIRCH T, 2006, P WORKSH MATH STRUCT
   ALTENKIRCH T, 2001, P 16 ANN IEEE S LOG
   [Anonymous], 1989, Cambridge Tracts in Theoretical Computer Science
   BALAT V, 2002, THESIS U DENIS DIDER
   BEGGER U, 1991, P 6 ANN IEEE S LOG C, P203
   BOVE A, 2001, LECT NOTES COMPUTER, V2152, P121
   CHAPMAN J, 2007, TRENDS FUNCTIONAL PR, V6, P79
   Chapman James, 2007, FORMALISATION BIG ST
   Coquand C., 2002, Higher-Order and Symbolic Computation, V15, P57, DOI 10.1023/A:1019964114625
   Coquand T., 1997, Mathematical Structures in Computer Science, V7, P75, DOI 10.1017/S0960129596002150
   Coquand Thierry., 1991, Logical Frameworks, P255, DOI DOI 10.1017/CBO9780511569807.011
   David R, 2001, ANN PURE APPL LOGIC, V107, P121, DOI 10.1016/S0168-0072(00)00030-0
   Ghani N, 1995, LNCS, V902, P171
   Hofmann Martin, 1997, Extensional Constructs in Intensional Type Theory, P13, DOI DOI 10.1007/978-1-4471-0963-1_2
   Jay C. B., 1995, Journal of Functional Programming, V5, P135, DOI 10.1017/S0956796800001301
   Lindley S, 2007, LECT NOTES COMPUT SC, V4583, P255
   Martin-Lof P., 1984, Intuitionistic type theory
   McBride C, 2004, LECT NOTES COMPUT SC, V3622, P130
   McBride C, 2004, J FUNCT PROGRAM, V14, P69, DOI 10.1017/S0956796803004829
   MCBRIDE C, 2005, EPIGRAM
   Nordstrom B., 1990, Programming in Martin-Lof's Type Theory
   NORELL U, 2007, AGDA 2
   Norell Ulf, 2007, Towards a practical programming language based on dependent type theory
   TAIT WW, 1967, J SYMBOLIC LOGIC, V32, P198, DOI 10.2307/2271658
   Watkins K, 2004, ANN NY ACAD SCI, V3085, P355
   [No title captured]
NR 28
TC 5
Z9 5
U1 0
U2 3
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD MAY-JUL
PY 2009
VL 19
BP 311
EP 333
DI 10.1017/S0956796809007278
PN 3-4
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 461BW
UT WOS:000267240300004
OA Bronze
DA 2024-07-18
ER

PT J
AU Thielecke, H
AF Thielecke, Hayo
TI Control effects as a modality
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB We combine ideas from types for continuations, effect systems and monads in a very simple setting by defining a version of classical propositional logic in which double-negation elimination is combined with a modality. The modality corresponds to control effects, and it includes a form of effect masking. Erasing the modality from formulas gives classical logic. On the other hand, the logic is conservative over intuitionistic logic.
C1 Univ Birmingham, Birmingham, W Midlands, England.
C3 University of Birmingham
RP Thielecke, H (corresponding author), Univ Birmingham, Birmingham, W Midlands, England.
EM H.Thielecke@cs.bham.ac.uk
CR [Anonymous], LOGIC COMPUTER SCI L
   [Anonymous], ICFP 98
   [Anonymous], POPL 88
   Benton P. N., 1998, Journal of Functional Programming, V8, P177, DOI 10.1017/S0956796898002998
   FELLEISEN M, 1991, SCI COMPUT PROGRAM, V17, P35, DOI 10.1016/0167-6423(91)90036-W
   FELLEISEN M, 1992, THEOR COMPUT SCI, V103, P235, DOI 10.1016/0304-3975(92)90014-7
   Griffin T., 1990, P 17 ANN ACM S PRINC, DOI 10.1145/96709.96714
   JOUVELOT P, 1988, PROGRAMMING LANGUAGE, P218
   Thielecke H, 2004, LECT NOTES COMPUT SC, V2986, P279
   [No title captured]
NR 10
TC 1
Z9 1
U1 0
U2 1
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD JAN
PY 2009
VL 19
BP 17
EP 26
DI 10.1017/S0956796808006734
PG 10
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 392SM
UT WOS:000262322500002
OA Green Published, Bronze
DA 2024-07-18
ER

PT J
AU Findler, RB
   Flatt, M
AF Findler, Robert Bruce
   Flatt, Matthew
TI Slideshow: functional presentations
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 9th International Conference on Functional Programming
CY SEP 19-21, 2004
CL Snowbird, UT
SP ACM SIGPLAN
AB Among systems for creating slide presentations, the dominant ones offer essentially no abstraction capability. Slideshow represents our effort over the last several years to build an abstraction-friendly slide system with PLT Scheme. We show how functional programming is well suited to the task of slide creation, we report on the programming contructs that we have developed for slides, and we describe our solutions to practical problems in rendering slides. We also describe experimental extensions to DrScheme that support a mixture of programmatic and WYSIWYG slide creation.
C1 Univ Chicago, Chicago, IL 60637 USA.
   Univ Utah, Salt Lake City, UT 84112 USA.
C3 University of Chicago; Utah System of Higher Education; University of
   Utah
RP Findler, RB (corresponding author), Univ Chicago, Chicago, IL 60637 USA.
EM robby@cs.uchicago.edu; mflatt@cs.utah.edu
RI Findler, Robert/B-7145-2009
CR Adobe Systems Inc, 1999, POSTSCR LANG REF
   CHAILLOUX E, 1997, MLGRAPH SYSTEM
   CLEMENTS J, 2004, DR DOBBS J      0316
   Clinger W.D., 1998, Proper tail recursion and space efficiency, P174, DOI [10.1145/277650.277719, DOI 10.1145/277650.277719]
   Cooper G. H., 2004, CS0320 BROWN U
   Felleisen Matthias, 2001, How to Design Programs
   Findler RB, 2002, J FUNCT PROGRAM, V12, P159, DOI 10.1017/S0956796801004208
   FINDLER RB, 2004, P ACM INT C FUNCT PR, P224
   Finne S., 1995, P GLASG FUNCT PROGR
   Henderson Peter., 1982, Symposium on LISP and Functional Programming, P179, DOI DOI 10.1145/800068.802148
   HEYDON A, 1994, 131A SRC
   HOBBY JD, 1992, CSTR162 ATT BELL LAB
   Kamin SN, 1997, PROCEEDINGS OF THE CONFERENCE ON DOMAIN-SPECIFIC LANGUAGES, P297
   KERNIGHAN BW, 1991, CSTR116 ATT BELL LAB
   KNUTH DE, 1990, TEX BOOK
   *PLT, 2005, PLT SCH
   SERANNO M, 2002, P WORKSH SCHEM FUNCT, P31
   SERANNO M, 2005, SKRIBE HOME PAGE
   SHIVERS O, 2004, FUNCTIONAL POSTSCRIP
   Steele G.L., 1977, Proceedings of the 1977 Annual ACM Conference, P153
   Tufte E., 2003, COGNITIVE STYLE POWE
   VANWYK CJ, 1981, CSTR103 AT T BELL LA
   VANZANDT T, 2005, PROSPER
   World Wide Web Consortium, 2003, SCAL VECT GRAPH SVG
   ZONGKER D, 2003, P EUR SIGGRAPH S COM
   ZONGKER D, 2003, THESIS U WASHINGTON
   [No title captured]
NR 27
TC 4
Z9 4
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD JUL-SEP
PY 2006
VL 16
BP 583
EP 619
DI 10.1017/S0956796806006010
PN 4-5
PG 37
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 079KJ
UT WOS:000240174500007
OA Bronze
DA 2024-07-18
ER

PT J
AU Smith, F
   Grossman, D
   Morrisett, G
   Hornof, L
   Jim, T
AF Smith, F
   Grossman, D
   Morrisett, G
   Hornof, L
   Jim, T
TI Compiling for template-based run-time code generation
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article; Proceedings Paper
CT International Workshop on Semantics, Applications, and Implementation of
   Program Generation
CY SEP 20, 2000
CL MONTREAL, CANADA
SP ACM, SIGPLAN
AB Cyclone is a type-safe programming language that provides explicit run-time code generation. The Cyclone compiler uses a template-based strategy for run-time code generation in which pre-compiled code fragments are stitched together at run time. This strategy keeps the cost of code generation low, but it requires that optimizations, such as register allocation and code motion, are applied to templates at compile time. This paper describes a principled approach to implementing such optimizations. In particular, we generalize standard flow-graph intermediate representations to support templates, define a mapping from (a subset of) Cyclone to this representation, and describe a data flow-analysis framework that supports standard optimizations across template boundaries.
C1 Cornell Univ, Dept Comp Sci, Ithaca, NY 14853 USA.
   Transmeta Corp, Santa Clara, CA 95054 USA.
   AT&T Labs Res, Florham Pk, NJ 07932 USA.
C3 Cornell University; AT&T
RP Cornell Univ, Dept Comp Sci, 4130 Upson Hall, Ithaca, NY 14853 USA.
EM fms@cs.cornell.edu; danieljg@cs.cornell.edu; jgm@cs.cornell.edu;
   hornof@transmeta.com; trevor@research.att.com
OI Morrisett, John/0000-0002-2619-5614
CR Aho A.V., 1986, COMPILERS PRINCIPLES
   [Anonymous], 1996, CSTR19961308 U WISC
   AUSLANDER J, 1996, ACM C PROGR LANG DES, P149
   BURGER D, 1998, THESIS U WISCONSIN M
   CONSELC, 1996, 23 ACM S PRINC PROGR, P145
   COUSINEAU G, 1985, LECT NOTES COMPUT SC, V201, P50
   Davies R., 1996, Conference Record of POPL '96: The 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P258, DOI 10.1145/237721.237788
   ENGLER D, 1996, 23 ANN ACM SIGPLAN S, P131
   Fraser Christopher W., 1995, A retargetable C compiler: Design and implementation
   GRANT B, 1997, UWCSE970303 DEP COMP
   GRANT B, 1999, ACM SIGPLAN C PROGR, P293
   HORNOF L, 1999, ACM C PART EV SEM BA, P60
   LEE P, 1996, ACM C PROGR LANG DES, P137
   LEONE M, 1994, ACM C PART EV SEM BA, P97
   LOWNEY PG, 1993, J SUPERCOMPUT, V7, P51, DOI 10.1007/BF01205182
   Morrisett G, 1999, ACM T PROGR LANG SYS, V21, P527, DOI 10.1145/319301.319345
   Muchnick S., 1997, ADV COMPILER DESIGN
   NOEL F, 1996, 1065 IRISA
   POLETTO M, 1997, ACM SIGPLAN C PROGRA, P109
   SMITH F, 2002, THESIS CORNELL U
   TAHA W, 2000, ACM C PART EV SEM BA, P34
   WICKLINE P, 1998, ACM C PROGR LANG DES, P224
   [No title captured]
NR 23
TC 10
Z9 12
U1 0
U2 3
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD MAY
PY 2003
VL 13
BP 677
EP 708
DI 10.1017/S095679680200463X
PN 3
PG 32
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 689BA
UT WOS:000183470700009
OA Bronze
DA 2024-07-18
ER

PT J
AU Aehlig, K
   Haftmann, F
   Nipkow, T
AF Aehlig, Klaus
   Haftmann, Florian
   Nipkow, Tobias
TI A compiled implementation of normalisation by evaluation
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB We present a novel compiled approach to Normalisation by Evaluation (NBE) for ML-like languages. It supports efficient normalisation of open lambda-terms with respect to beta-reduction and rewrite rules. We have implemented NBE and show both a detailed formal model of our implementation and its verification in Isabelle. Finally we discuss how NBE is turned into a proof rule in Isabelle.
C1 [Aehlig, Klaus] Univ Munich, Inst Informat, D-80539 Munich, Germany.
   [Haftmann, Florian; Nipkow, Tobias] Tech Univ Munich, Fak Informat, D-8000 Munich, Germany.
C3 University of Munich; Technical University of Munich
RP Aehlig, K (corresponding author), Univ Munich, Inst Informat, D-80539 Munich, Germany.
EM nipkow@in.tum.de
OI Nipkow, Tobias/0000-0003-0730-515X
FU DFG [Ni 491/10]
FX Supported by DFG Grant Ni 491/10
CR Aehlig K, 2004, MATH STRUCT COMP SCI, V14, P587, DOI 10.1017/S096012950400427X
   Aehlig K, 2008, LECT NOTES COMPUT SC, V5170, P39, DOI 10.1007/978-3-540-71067-7_8
   [Anonymous], 1972, INDAGATIONES MATHEMA, DOI DOI 10.1016/1385-7258(72)90034-0
   Barras B, 2000, LECT NOTES COMPUT SC, V1869, P17
   Berger U., 1991, Proceedings of Sixth Annual IEEE Symposium on Logic in Computer Science (Cat. No.91CH3025-4), P203, DOI 10.1109/LICS.1991.151645
   Berger U, 2003, INFORM COMPUT, V183, P19, DOI 10.1016/S0890-5401(03)00014-2
   Berger U, 1998, LECT NOTES COMPUT SC, V1546, P117
   Boespflug M, 2010, LECT NOTES COMPUT SC, V5937, P58, DOI 10.1007/978-3-642-11503-5_7
   Danvy O, 1996, P 23 ANN ACM S PRINC, P242
   Gonthier G., 2008, NOT AMS, V55, P1382
   Gordon M.J.C., 1993, Introduction to HOL: A theorem proving environment for higher order logic
   GREGOIRE B, 2002, INT C FUNCT PROGR 20, P235
   Haftmann F, 2010, LECT NOTES COMPUT SC, V6009, P103, DOI 10.1007/978-3-642-12251-4_9
   Nipkow T., 2002, ISABELLE HOL PROOF A, DOI DOI 10.1007/3-540-45949-9
   Nipkow T, 2006, LECT NOTES ARTIF INT, V4130, P21
   Reif W., 1998, STRUCTURED SPECIFICA, VII, P13
NR 16
TC 3
Z9 4
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD JAN
PY 2012
VL 22
BP 9
EP 30
DI 10.1017/S0956796812000019
PN 1
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 915LY
UT WOS:000302029400002
OA Bronze
DA 2024-07-18
ER

PT J
AU Stratford, B
AF Stratford, Barney
TI A combinator library for the design of railway track layouts
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB In the design of railway track layouts, there are only a small number of geometric configurations that are used in practice, and a number of constraints as to how those configurations can be fitted together to create a whole layout. In order to solve these problems, we construct a Haskell combinator library. The library has been used for the design of real-world track layouts.
EM barney_stratford@fastmail.fm
CR *AD SYST, 2000, PDF REF
   [Anonymous], 2003, Haskell 98 language and libraries: the revised report
   Bird R., 1998, INTRO FUNCTIONAL PRO, V2nd
   Cope GH, 1993, BRIT RAILWAY TRACK, V6th
   Karczmarczuk J., 2001, Higher-Order and Symbolic Computation, V14, P35, DOI 10.1023/A:1011501232197
   Pfeifer R., 1993, MATH MAG, V66, P75
   Press W. H., 2007, NUM REC ART SCI COMP
NR 7
TC 0
Z9 0
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD MAY
PY 2011
VL 21
BP 309
EP 329
DI 10.1017/S0956796811000086
PN 3
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 783NC
UT WOS:000292089200004
OA Bronze
DA 2024-07-18
ER

PT J
AU Lindley, S
   Wadler, P
   Yallop, J
AF Lindley, Sam
   Wadler, Philip
   Yallop, Jeremy
TI The arrow calculus
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID MONADS
AB We introduce the arrow calculus, a metalanguage for manipulating Hughes's arrows with close relations both to Moggi's metalanguage for monads and to Paterson's arrow notation. Arrows arc classically defined by extending lambda calculus With three constructs satisfying nine (somewhat idiosyncratic) laws; in contrast, the arrow Calculus adds four constructs satisfying five laws (which fit two well-known patterns). The five laws were previous]), known to be sound; we show that they are also complete, and hence that the five laws may replace the nine.
C1 [Lindley, Sam; Wadler, Philip; Yallop, Jeremy] Univ Edinburgh, Edinburgh EH8 9YL, Midlothian, Scotland.
C3 University of Edinburgh
RP Lindley, S (corresponding author), Univ Edinburgh, Edinburgh EH8 9YL, Midlothian, Scotland.
EM Sam.Lindley@ed.ac.uk; Philip.Wadler@ed.ac.uk; Jeremy.Yallop@ed.ac.uk
OI Lindley, Sam/0000-0002-1360-4714
CR ATKEY R, 2008, ELECT NOTES THEORETI
   BENTON N, 1995, LECT NOTES COMPUTER, V933
   Courtney Antony., 2001, Proceedings of the 2001 Haskell Workshop, P41
   Hudak P., 2003, LNCS, V2638
   Hughes J, 2000, SCI COMPUT PROGRAM, V37, P67, DOI 10.1016/S0167-6423(99)00023-4
   Jansson P, 1999, LECT NOTES COMPUT SC, V1576, P273
   LINDLEY S, 2008, MATH STRUCTURES FUNC, P1
   LINDLEY S, 2008, EDIINFRR1258 U ED SC
   Mcbride C, 2008, J FUNCT PROGRAM, V18, P1, DOI 10.1017/S0956796807006326
   MOGGI E, 1991, INFORM COMPUT, V93, P55, DOI 10.1016/0890-5401(91)90052-4
   PATERSON R, 2001, ICFP 01 INT C FUNCT, P229
   Power J., 1997, Mathematical Structures in Computer Science, V7, P453, DOI 10.1017/S0960129597002375
   Power John, 1999, LNCS, V1644
   Sabry A., 1993, LISP and Symbolic Computation, V6, P289, DOI 10.1007/BF01019462
NR 14
TC 14
Z9 17
U1 0
U2 2
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD JAN
PY 2010
VL 20
BP 51
EP 69
DI 10.1017/S095679680999027X
PN 1
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 562SH
UT WOS:000275074100004
OA Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Allison, L
AF Allison, L
TI Models for machine learning and data mining in functional programming
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID INFERENCE
AB The functional programming language Haskell and its type system are used to define and analyse the nature of some problems and tools in machine learning and data mining. Data types and type-classes for statistical models are developed that allow models to be manipulated in a precise, type-safe and flexible way. The statistical models considered include probability distributions, mixture models, function-models, time-series, and classification- and function-model-trees. The aim is to improve ways of designing and programming with models, not only of applying them.
C1 Monash Univ, Sch Comp Sci & Software Engn, Clayton, Vic 3800, Australia.
C3 Monash University
RP Monash Univ, Sch Comp Sci & Software Engn, Clayton, Vic 3800, Australia.
EM lloyd@bruce.cs.monash.edu.au
OI Allison, Lloyd/0000-0002-9020-3164
CR Akaike H., 1973, INT S INF THEOR, P267, DOI [10.1007/978-1-4612-1694-0, 10.1007/978-1-4612-0919-5_38]
   Allison L, 1999, COMPUT J, V42, P1, DOI 10.1093/comjnl/42.1.1
   ALLISON L, 2003, 2003148 TR SCH COMP
   [Anonymous], 1983, A TURING ENIGMA
   [Anonymous], 1962, LISP 1 5 PROGRAMMERS
   [Anonymous], BELL SYST TECH J
   Bayes Price, 1763, PHILOS T ROY SOC LON, V53, P370, DOI DOI 10.1098/RSTL.1763.0053
   Comley JW, 2003, LECT NOTES COMPUT SC, V2690, P761
   Farr GE, 2002, COMPUT J, V45, P285, DOI 10.1093/comjnl/45.3.285
   Figueiredo MAT, 2002, IEEE T PATTERN ANAL, V24, P381, DOI 10.1109/34.990138
   Georgeff M.P., 1984, Proc. of the 8th European Conf. on Artificial Intelligence (ECAI-88), P473
   HUMPHREY NK, 1973, PERCEPTION, V2, P429, DOI 10.1068/p020429
   Iverson K. E., 1962, A Programming Language
   Jones MP, 2000, LECT NOTES COMPUT SC, V1782, P230
   Jones S.P., 1999, REPORT PROGRAMMING L
   MILNER R, 1978, J COMPUT SYST SCI, V17, P348, DOI 10.1016/0022-0000(78)90014-4
   MOSSES PD, 1974, MATH SEMANTICS ALGOL
   Quinlan Ross., 1992, C4.5: Programs for Machine Learning
   Stern L, 2001, MOL BIOCHEM PARASIT, V118, P175, DOI 10.1016/S0166-6851(01)00388-7
   Venables W.N., 1999, Modern Applied Statistics with S-Plus (Statistics and Computing), V3rd
   WALLACE CS, 1992, J ROY STAT SOC B, V54, P195
   WALLACE CS, 1968, COMPUT J, V11, P185, DOI 10.1093/comjnl/11.2.185
   WALLACE CS, 1987, J ROY STAT SOC B MET, V49, P240
   WALLACE CS, 1993, MACH LEARN, V1, P7
   Witten I., 1999, DATA MINING PRACTICA, P265
NR 25
TC 10
Z9 10
U1 0
U2 6
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD JAN
PY 2005
VL 15
BP 15
EP 32
DI 10.1017/S0956796804005301
PN 1
PG 18
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 890TK
UT WOS:000226533500002
OA Bronze
DA 2024-07-18
ER

PT J
AU Peña, R
   Segura, C
AF Peña, R
   Segura, C
TI Non-determinism analyses in a parallel-functional language
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID SEMANTICS; HASKELL
AB The parallel-functional language Eden has a non-detenninistic construct, the process abstraction merge, which interleaves a set Of input lists to produce a single non-deterministic list. Its non-deterministic behaviour is a consequence of its reactivity: it immediately copies to the output list any value appearing at any of the input lists. This feature is essential in reactive systems and very useful in some deterministic parallel algorithms. The presence of non-determinism creates some problems such that some internal transformations in the compiler must be disallowed. The paper describes several non-determinism analyses developed for Eden aimed at detecting the parts of the program that, even in the presence of a process merge, still exhibit a deterministic behaviour. A polynomial cost algorithm which annotates Eden expressions is described in detail. A denotational semantics is described for Eden and the correctness of all the analyses is proved with respect to this semantics.
C1 Univ Complutense Madrid, Fac Informat, E-28040 Madrid, Spain.
C3 Complutense University of Madrid
RP Univ Complutense Madrid, Fac Informat, C-Juan Rosal 8, E-28040 Madrid, Spain.
EM ricardo@sip.ucm.es; csegura@sip.ucm.es
RI Segura, Clara/K-9610-2017; PENA MARI, RICARDO VICENTE/L-1886-2017
OI Segura, Clara/0000-0003-1403-2997; PENA MARI, RICARDO
   VICENTE/0000-0001-5387-8931
CR Armstrong T, 1998, SCI COMPUT PROGRAM, V31, P3, DOI 10.1016/S0167-6423(96)00039-1
   BREITINGER S, 1998, LNCS, V1467, P250
   BREITINGER S, 1998, 9610 U PHIL U MARB
   BREITINGER S, 1997, WORKSH HIGH LEV PAR, P120
   BURN GL, 1986, LECT NOTES COMPUT SC, V217, P42
   Cousot P., 1977, C RECORD 1977 ACM S, P238
   HANKIN C, 1992, LECT NOTES COMPUT SC, V582, P219
   Henderson P., 1982, Functional programming and its applications. An advanced course, P177
   Hidalgo-Herrero M, 2003, LECT NOTES COMPUT SC, V2895, P303
   HUGHES J, 1995, LNCS, V925, P53
   HUGHES J, 1995, P 7 INT C FUNCT PROG, P108
   HUGHES RJM, 1990, FUNCT PROGR P 1989 G, P308
   Jones NeilD., 1995, HDB LOGIC COMPUTER S, V4, P527
   Jones S.L. Peyton, 1993, GLASG WORKSH FUNCT P, P201
   Jones SLP, 1998, SCI COMPUT PROGRAM, V32, P3, DOI 10.1016/S0167-6423(97)00029-4
   JONES SLP, 1987, ABSTR INT DECL LANG, P246
   JONES SLP, 1993, JOINT FRAM INF TECHN, P249
   MOGENSEN TAE, 1989, LECT NOTES COMPUT SC, V352, P298
   MOSSIN C, 1994, THESIS U COPENHAGEN
   Peña R, 2002, LECT NOTES COMPUT SC, V2312, P121
   Peña R, 2001, LECT NOTES COMPUT SC, V2011, P1
   PENA R, 2001, 11701 U COMPL MADR D
   SEGURA C, 2003, 13103 U COMPL MADR D
   SEGURA C, 2003, LNCS, P249
   SONDERGAARD H, 1990, ACTA INFORM, V27, P505, DOI 10.1007/BF00277387
   SONDERGAARD H, 1992, COMPUT J, V35, P514, DOI 10.1093/comjnl/35.5.514
   Wadler P.L., 1987, ABSTRACT INTERPRETAT, P266
   [No title captured]
   [No title captured]
   [No title captured]
NR 30
TC 3
Z9 3
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD JAN
PY 2005
VL 15
BP 67
EP 100
DI 10.1017/S0956796804005295
PN 1
PG 34
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 890TK
UT WOS:000226533500005
OA Bronze
DA 2024-07-18
ER

PT J
AU Hartel, P
   Muller, H
   Glaser, H
AF Hartel, P
   Muller, H
   Glaser, H
TI The functional "C" experience
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB A functional programming language can be taught successfully as a first language, but if there is no follow up the students do not appreciate the functional approach. Following discussions concerning this issue at the 1995 FPLE conference (Hartel & Plasmeijer, 1995), we decided to develop such a follow up by writing a book that teaches C to students who can write simple functional programs. This paper summarises the essence of our approach, which is based on program transformation, and presents our experience teaching functional C at the Universities of Southampton and Bristol.
C1 Univ Twente, Dept Comp Sci, Enschede, Netherlands.
   Univ Bristol, Dept Comp Sci, Bristol, Avon, England.
   Univ Southampton, Dept Elect & Comp Sci, Southampton SO9 5NH, Hants, England.
C3 University of Twente; University of Bristol; University of Southampton
RP Univ Twente, Dept Comp Sci, Enschede, Netherlands.
EM pieter@cs.utwente.nl; henkm@cs.bris.ac.uk; hg@ecs.soton.ac.uk
OI Hartel, Pieter/0000-0002-0411-0421
CR Glaser H, 2000, COMPUT J, V43, P252, DOI 10.1093/comjnl/43.4.252
   GLASER H, 2001, ENCY MICROCOMPUTERS, V27, P79
   HARTEL P, 1997, FUNCTIONAL C
   HARTEL PH, 1995, 1022 LNCS
   KELLEY A, 1996, C DISSECTION ESSENTI
   KERNIGHAN BW, 1978, C PROGAMMING LANGUAG
   Thomas G J., 1993, Adv. Biophys. Chem, V3, P1
NR 7
TC 1
Z9 1
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD MAR
PY 2004
VL 14
BP 129
EP 135
DI 10.1017/S0956796803004817
PN 2
PG 7
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 809LL
UT WOS:000220638100001
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Zhang, HL
   Tang, WH
   Xie, RF
   Wang, M
   Hu, ZJ
AF Zhang, Hanliang
   Tang, Wenhao
   Xie, Ruifeng
   Wang, Meng
   Hu, Zhenjiang
TI Contract lenses: Reasoning about bidirectional programs via calculation
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB Bidirectional transformations (BXs) are a mechanism for maintaining consistency between multiple representations of related data. The lens framework, which usually constructs BXs from lens combinators, has become the mainstream approach to BX programming because of its modularity and correctness by construction. However, the involved bidirectional behaviors of lenses make the equational reasoning and optimization of them much harder than unidirectional programs. We propose a novel approach to deriving efficient lenses from clear specifications via program calculation, a correct-by-construction approach to reasoning about functional programs by algebraic laws. To support bidirectional program calculation, we propose contract lenses, which extend conventional lenses with a pair of predicates to enable safe and modular composition of partial lenses. We define several contract-lens combinators capturing common computation patterns including $\textit{fold}, \textit{filter},\textit{map}$, and $\textit{scan}$, and develop several bidirectional calculation laws to reason about and optimize contract lenses. We demonstrate the effectiveness of our new calculation framework based on contract lenses with nontrivial examples.
C1 [Zhang, Hanliang; Wang, Meng] Univ Bristol, Bristol BS8 1QU, England.
   [Tang, Wenhao] Univ Edinburgh, Edinburgh EH8 9AB, Scotland.
   [Xie, Ruifeng; Hu, Zhenjiang] Peking Univ, Beijing, Peoples R China.
C3 University of Bristol; University of Edinburgh; Peking University
RP Zhang, HL (corresponding author), Univ Bristol, Bristol BS8 1QU, England.
EM hanliang.zhang@bristol.ac.uk; wenhao.tang@ed.ac.uk;
   xieruifeng@pku.edu.cn; meng.wang@bristol.ac.uk; huzj@pku.edu.cn
OI Hu, Zhenjiang/0000-0002-9034-205X; Tang, Wenhao/0009-0000-6589-3821;
   Wang, Meng/0000-0001-7780-630X
CR Abou-Saleh Faris, 2018, Lecture Notes in Computer Science, V9715, P1, DOI [10.1007/978-3-319-79108-1_1, DOI 10.1007/978-3-319-79108-1_1]
   BANCILHON F, 1981, ACM T DATABASE SYST, V6, P557, DOI 10.1145/319628.319634
   Barbosa DMJ, 2010, ICFP 2010: PROCEEDINGS OF THE 2010 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P193
   Bird R. S., 1987, Logic of Programming and Calculi of Discrete Design. International Summer School. Proceedings of the NATO Advanced Study Institute, P5
   Bird RichardS., 1989, CONSTRUCTIVE METHODS, P151
   BIRD RS, 1989, COMPUT J, V32, P122, DOI 10.1093/comjnl/32.2.122
   Bohannon A, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P407, DOI 10.1145/1328438.1328487
   Foster JN, 2007, ACM T PROGR LANG SYS, V29, DOI [10.1145/1232420.1232424, 10.1145/1047659.1040325]
   Foster JN, 2008, ICFP'08: PROCEEDINGS OF THE 2008 SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P383
   Gibbons J, 2002, LECT NOTES COMPUT SC, V2297, P149
   Gibbons J, 2011, ELECTRON PROC THEOR, P181, DOI 10.4204/EPTCS.66.9
   Gill A., 1993, FPCA '93. Conference on Functional Programming Languages and Computer Architecture, P223, DOI 10.1145/165180.165214
   He X, 2018, ESEC/FSE'18: PROCEEDINGS OF THE 2018 26TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P434, DOI 10.1145/3236024.3236070
   Hidaka S, 2010, ICFP 2010: PROCEEDINGS OF THE 2010 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P205
   Hofmann M, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P495
   Hofmann M, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P371, DOI 10.1145/1926385.1926428
   Hu ZJ, 1996, ACM SIGPLAN NOTICES, V31, P73, DOI 10.1145/232629.232637
   Ko H.-S., 2018, P 45 ANN ACM SIGPLAN
   Ko HS, 2016, PEPM'16: PROCEEDINGS OF THE 2016 ACM SIGPLAN WORKSHOP ON PARTIAL EVALUATION AND PROGRAM MANIPULATION, P61, DOI 10.1145/2847538.2847544
   Matsuda Kazutaka, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P31, DOI 10.1007/978-3-319-89884-1_2
   Matsuda K, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3409000
   Matsuda K, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P62, DOI 10.1145/2784731.2784750
   Matsuda K, 2015, SCI COMPUT PROGRAM, V111, P79, DOI 10.1016/j.scico.2014.07.008
   Matsuda K, 2007, ICFP'07 PROCEEDINGS OF THE 2007 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P47
   Pacheco H., 2011, P 2011 ACM SIGPLAN W, P91
   Pacheco H, 2010, LECT NOTES COMPUT SC, V6120, P331, DOI 10.1007/978-3-642-13321-3_19
   Stevens P, 2014, LECT NOTES COMPUT SC, V8411, P32
   Stevens P, 2020, SOFTW SYST MODEL, V19, P39, DOI 10.1007/s10270-019-00736-x
   Stevens P, 2008, LECT NOTES COMPUT SC, V5235, P408, DOI 10.1007/978-3-540-88643-3_10
   Tran VD, 2020, PROC VLDB ENDOW, V13, P2897, DOI 10.14778/3415478.3415503
   Tsigkanos C, 2020, IEEE INT CONF AUTOM, P993, DOI 10.1145/3324884.3416579
   Vaughan J.A., 2006, P PRINC DAT SYST, P338, DOI [10.1145/1142351.1142399, DOI 10.1145/1142351.1142399]
   Voigtländer J, 2010, ICFP 2010: PROCEEDINGS OF THE 2010 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P181
   Voigtländer J, 2009, ACM SIGPLAN NOTICES, V44, P165, DOI 10.1145/1594834.1480904
   Xia LY, 2019, LECT NOTES COMPUT SC, V11423, P147, DOI 10.1007/978-3-030-17184-1_6
NR 35
TC 0
Z9 0
U1 0
U2 2
PU CAMBRIDGE UNIV PRESS
PI CAMBRIDGE
PA EDINBURGH BLDG, SHAFTESBURY RD, CB2 8RU CAMBRIDGE, ENGLAND
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD NOV 6
PY 2023
VL 33
AR e10
DI 10.1017/S0956796823000059
PG 41
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA X1WK1
UT WOS:001096421600001
OA hybrid
DA 2024-07-18
ER

PT J
AU Skorstengaard, L
   Devriese, D
   Birkedal, L
AF Skorstengaard, Lau
   Devriese, Dominique
   Birkedal, Lars
TI StkTokens<i>: Enforcing well-bracketed control flow and stack
   encapsulation using linear capabilities</i>
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID SEMANTICS
AB We propose and study StkTokens: a new calling convention that provably enforces well-bracketed control flow and local state encapsulation on a capability machine. The calling convention is based on linear capabilities: a type of capabilities that are prevented from being duplicated by the hardware. In addition to designing and formalizing this new calling convention, we also contribute a new way to formalize and prove that it effectively enforces well-bracketed control flow and local state encapsulation using what we call a fully abstract overlay semantics.
C1 [Skorstengaard, Lau] Toitware, Aarhus, Denmark.
   [Devriese, Dominique] Vrije Univ Brussel, Dept Comp Sci, Brussels, Belgium.
   [Birkedal, Lars] Aarhus Univ, Dept Comp Sci, Aarhus, Denmark.
   [Skorstengaard, Lau] Aarhus Univ, Aarhus, Denmark.
C3 Vrije Universiteit Brussel; Aarhus University; Aarhus University
RP Skorstengaard, L (corresponding author), Toitware, Aarhus, Denmark.
EM lau.skorstengaard@gmail.com; dominique.devriese@vub.be;
   birkedal@cs.au.dk
RI Devriese, Dominique/C-5493-2014
OI Devriese, Dominique/0000-0002-3862-6856
FU ModuRes Sapere Aude Advanced Grant from The Danish Council for
   Independent Research for the Natural Sciences (FNU); COST Action EUTypes
   [CA15123]; Research Foundation Flanders (FWO)
FX This research was supported in part by the ModuRes Sapere Aude Advanced
   Grant from The Danish Council for Independent Research for the Natural
   Sciences (FNU). Support for an STSM was received from COST Action
   EUTypes (CA15123). Dominique Devriese held a Postdoctoral fellowship
   from the Research Foundation Flanders (FWO) during most of this
   research. This research was supported in part by the Research Foundation
   Flanders (FWO).
CR Abadi M, 2005, LECT NOTES COMPUT SC, V3785, P111
   Abadi M., 1999, Secure Internet programming. Security issues for mobile and distributed objects, P19
   Abadi M, 1998, LECT NOTES COMPUT SC, V1543, P291
   Abadi M, 2005, P 12 ACM C COMP COMM, DOI [10.1145/1102120.1102165, DOI 10.1145/1102120.1102165]
   Abate C., 2019, COMP SEC FDN S
   Abate C., 2018, COMPUTER COMMUNICATI
   Ahmed A, 2011, ICFP 11 - PROCEEDINGS OF THE 2011 ACM SIGPLAN: INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P431
   AMERICA P, 1989, J COMPUT SYST SCI, V39, P343, DOI 10.1016/0022-0000(89)90027-5
   [Anonymous], 2015, USENIX SECURITY
   [Anonymous], 2004, Ph.D. Dissertation.
   [Anonymous], 1984, Capability-Based Computer Systems
   Barthe G., 2019, P ACM PROGRAM LANG, V4
   Birkedal L, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P119, DOI 10.1145/1926385.1926401
   Birkedal Lars, 2014, TASTE CATEGORICAL LO
   de Amorim AA, 2016, J COMPUT SECUR, V24, P689, DOI 10.3233/JCS-15784
   de Amorim AA, 2015, P IEEE S SECUR PRIV, P813, DOI 10.1109/SP.2015.55
   DENNIS JB, 1966, COMMUN ACM, V9, P143, DOI 10.1145/365230.365252
   Devriese D, 2017, LOG METH COMPUT SCI, V13, DOI 10.23638/LMCS-13(4:2)2017
   Evans I., 2015, COMPUTER COMMUNICATI
   Georges A. L., 2021, P ACM PROGRAM LANG, V5
   Joannou A., 2017, IEEE INT C COMP DES
   Juglaret Y., 2016, CSF
   Jung R, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S0956796818000151
   Laird J, 2005, THEOR COMPUT SCI, V333, P199, DOI 10.1016/j.tcs.2004.10.022
   New MS, 2016, ACM SIGPLAN NOTICES, V51, P103, DOI 10.1145/3022670.2951941
   Patrignani M., 2017, SECURE COMPILATION H
   Patrignani M., 2016, MODULAR FULLY ABSTRA
   Patrignani M, 2019, ACM COMPUT SURV, V51, DOI 10.1145/3280984
   Roessler N, 2018, P IEEE S SECUR PRIV, P478, DOI 10.1109/SP.2018.00066
   Scott D., 1976, SIAM Journal on Computing, V5, P522, DOI 10.1137/0205037
   Skorstengaard Lau, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P475, DOI 10.1007/978-3-319-89884-1_17
   Skorstengaard L., 2019, THESIS
   Skorstengaard L., 2019, P ACM PROGRAM LANG, V3
   Skorstengaard L., 2018, STKTOKENS ENFORCING
   Skorstengaard L, 2020, ACM T PROGR LANG SYS, V42, DOI 10.1145/3363519
   Szabo N., 1997, First Monday, V2
   Szabo Nick., 2004, SCARCE OBJECTS
   Thamsborg J., 2011, P 16 ACM SIGPLAN INT
   Tsampas S., 2019, 2019 IEEE 32 COMP SE
   van der Veen V, 2017, CCS'17: PROCEEDINGS OF THE 2017 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P1675, DOI 10.1145/3133956.3134026
   Van Strydonck T., 2019, P ACM PROGRAM LANG I
   Watson R. N. M., 2020, Tech. Rep. UCAM-CL-TR-951
   Watson RNM, 2016, IEEE MICRO, V36, P38, DOI 10.1109/MM.2016.84
   Watson RNM, 2015, P IEEE S SECUR PRIV, P20, DOI 10.1109/SP.2015.9
   Watson Robert N. M, 2015, UCAMCLTR876 UCAMCLTR876
   Watson Robert NM., 2012, WORKSH RUNT ENV SYST WORKSH RUNT ENV SYST
   Woodruff J, 2014, CONF PROC INT SYMP C, P457, DOI 10.1109/ISCA.2014.6853201
NR 47
TC 4
Z9 4
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD APR 15
PY 2021
VL 31
AR e9
DI 10.1017/S095679682100006X
PG 75
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA RN3LH
UT WOS:000640252700001
OA Green Published, Green Accepted
DA 2024-07-18
ER

PT J
AU Nguyên, PC
   Tobin-Hochstadt, S
   Van Horn, D
AF Nguyen, Phuc C.
   Tobin-Hochstadt, Sam
   Van Horn, David
TI Higher order symbolic execution for contract verification and refutation
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID MODEL-CHECKING; SYSTEM
AB We present a new approach to automated reasoning about higher-order programs by endowing symbolic execution with a notion of higher-order, symbolic values. To validate our approach, we use it to develop and evaluate a system for verifying and refuting behavioral software contracts of components in a functional language, which we call soft contract verification. In doing so, we discover a mutually beneficial relation between behavioral contracts and higher-order symbolic execution. Contracts aid symbolic execution by providing a rich language of specifications serving as a basis of symbolic higher-order values; the theory of blame enables modular verification and leads to the theorem that verified components can't be blamed; and the run-time monitoring of contracts enables soft verification whereby verified and unverified components can safely interact. Conversely, symbolic execution aids contracts by providing compile-time verification and automated test case generation from counter-examples to verification. This relation between symbolic exuection and contracts engenders a virtuous cycle encouraging the gradual use of contracts.
   Our approach is able to analyze first-class contracts, recursive data structures, unknown functions, and control-flow-sensitive refinements of values, which are all idiomatic in dynamic languages. It makes effective use of off-the-shelf solvers to decide problems without heavy encodings. Counterexample search is sound and relatively complete with respect to a first-order solver for base type values and counter-examples are reported as concrete values, including functions. Therefore, it can form the basis of automated verification and bug-finding tools for higher-order programs. The approach is competitive with a range of existing tools-including type systems, flow analyzers, and model checkers-on their own benchmarks. We have built a prototype to analyze programs written in Racket and report on its effectiveness in verifying and refuting contracts.
C1 [Nguyen, Phuc C.; Van Horn, David] Univ Maryland, College Pk, MD 20742 USA.
   [Tobin-Hochstadt, Sam] Indiana Univ, Bloomington, IN USA.
C3 University System of Maryland; University of Maryland College Park;
   Indiana University System; Indiana University Bloomington
RP Nguyên, PC (corresponding author), Univ Maryland, College Pk, MD 20742 USA.
EM pcn@cs.umd.edu; samth@cs.indiana.edu; dvanhorn@cs.umd.edu
OI Van Horn, David/0000-0002-9201-6864; Tobin-Hochstadt,
   Sam/0000-0003-1302-6499
FU NSF [1218390]; NSA under the Science of Security program; DARPA under
   the program Automated Program Analysis for Cybersecurity
   [FA8750-12-2-0106]; DARPA under the program Clean-slate design of
   Resilient Adaptive Secure Hosts; Division of Computing and Communication
   Foundations; Direct For Computer & Info Scie & Enginr [1218390] Funding
   Source: National Science Foundation
FX This material is based on research sponsored by the NSF under award
   1218390, the NSA under the Science of Security program, and DARPA under
   the programs Automated Program Analysis for Cybersecurity
   (FA8750-12-2-0106) and Clean-slate design of Resilient Adaptive Secure
   Hosts. The U.S. Government is authorized to reproduce and distribute
   reprints for Governmental purposes notwithstanding any copyright
   notation thereon.
CR Aiken A., 1994, Conference Record of POPL '94: 21st ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P163, DOI 10.1145/174675.177847
   [Anonymous], 2010, PLTTR20101 INC
   [Anonymous], 2012, P ACM SIGPLAN 2012 W
   [Anonymous], 2006, P 13 ACM C COMPUTER
   Austin TH, 2011, OOPSLA 11: PROCEEDINGS OF THE 2011 ACM INTERNATIONAL CONFERENCE ON OBJECT ORIENTED PROGRAMMING SYSTEMS LANGUAGES AND APPLICATIONS, P921
   Barrett Clark, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P171, DOI 10.1007/978-3-642-22110-1_14
   Cadar C., 2008, Proceedings of the 8th USENIX conference on Operating systems design and implementation, OSDI'08, (USA), P209
   Cartwright R, 1996, ACM COMPUT SURV, V28, P349, DOI 10.1145/234528.234747
   CARTWRIGHT R, 1991, SIGPLAN NOTICES, V26, P278, DOI 10.1145/113446.113469
   Chugh R, 2012, ACM SIGPLAN NOTICES, V47, P587, DOI 10.1145/2398857.2384659
   Chugh R, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P231
   Claessen K, 2000, ACM SIGPLAN NOTICES, V35, P268, DOI 10.1145/357766.351266
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Dimoulas C, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P215, DOI 10.1145/1926385.1926410
   Disney T., 2013, CONTRACTS COFFEE JUL
   Disney T, 2011, ICFP 11 - PROCEEDINGS OF THE 2011 ACM SIGPLAN: INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P176
   Fähndrich M, 2011, LECT NOTES COMPUT SC, V6528, P10
   Findler RB, 2002, ACM SIGPLAN NOTICES, V37, P48, DOI 10.1145/583852.581484
   Flanagan C, 1996, ACM SIGPLAN NOTICES, V31, P23, DOI 10.1145/249069.231387
   Flanagan C, 1999, ACM T PROGR LANG SYS, V21, P370, DOI 10.1145/316686.316703
   Foster JS, 2002, ACM SIGPLAN NOTICES, V37, P1, DOI 10.1145/543552.512531
   FREEMAN T, 1991, SIGPLAN NOTICES, V26, P268, DOI 10.1145/113446.113468
   Godefroid P, 2005, ACM SIGPLAN NOTICES, V40, P213, DOI 10.1145/1064978.1065036
   Greenberg M, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P353, DOI 10.1145/1706299.1706341
   Heidegger P, 2010, LECT NOTES COMPUT SC, V6141, P154, DOI 10.1007/978-3-642-13953-6_9
   HENGLEIN F, 1994, SCI COMPUT PROGRAM, V22, P197, DOI 10.1016/0167-6423(94)00004-2
   Hickey R., 2013, CORE CONTRACTS   JUL
   Johnson JI, 2015, ACM SIGPLAN NOTICES, V50, P11, DOI 10.1145/2661088.2661098
   Kawaguchi M, 2010, LECT NOTES COMPUT SC, V6174, P123, DOI 10.1007/978-3-642-14295-6_12
   Klein C, 2010, ACM SIGPLAN NOTICES, V45, P555, DOI 10.1145/1932682.1869505
   Knowles K, 2010, ACM T PROGR LANG SYS, V32, DOI 10.1145/1667048.1667051
   Kobayashi N, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P222
   Kobayashi N, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P495, DOI 10.1145/1706299.1706355
   Kobayashi N, 2009, IEEE S LOG, P179, DOI 10.1109/LICS.2009.29
   Kobayashi N, 2009, PPDP'09: PROCEEDINGS OF THE 11TH INTERNATIONAL ACM SIGPLAN SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING, P25, DOI 10.1145/1599410.1599415
   Kobayashi N, 2009, ACM SIGPLAN NOTICES, V44, P416, DOI 10.1145/1594834.1480933
   Meunier P, 2006, ACM SIGPLAN NOTICES, V41, P218, DOI 10.1145/1111320.1111057
   Meyer B., 1991, EIFFEL LANGUAGE
   Nguyen Phdc C., 2014, P 19 ACM SIGPLAN INT, P139
   Nguyen PC, 2015, ACM SIGPLAN NOTICES, V50, P446, DOI 10.1145/2737924.2737971
   Ong CHL, 2006, IEEE S LOG, P81, DOI 10.1109/LICS.2006.38
   Ong CHL, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P587, DOI 10.1145/1926385.1926453
   Plosch R, 1997, ASIA PACIFIC SOFTWARE ENGINEERING CONFERENCE AND INTERNATIONAL COMPUTER SCIENCE CONFERENCE, PROCEEDINGS, P213, DOI 10.1109/APSEC.1997.640178
   Rondon PM, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P159, DOI 10.1145/1375581.1375602
   Seidel EL, 2015, LECT NOTES COMPUT SC, V9032, P812, DOI 10.1007/978-3-662-46669-8_33
   SHIVERS O, 1988, SIGPLAN NOTICES, V23, P164, DOI 10.1145/960116.54007
   St-Amour Vincent, 2012, Practical Aspects of Declarative Languages. Proceedings 14th International Symposium, PADL 2012, P289, DOI 10.1007/978-3-642-27694-1_21
   Strickland TS, 2012, ACM SIGPLAN NOTICES, V47, P943, DOI 10.1145/2398857.2384685
   Terauchi T, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P119, DOI 10.1145/1706299.1706315
   Tobin-Hochstadt S, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P132
   Tobin-Hochstadt S, 2010, ICFP 2010: PROCEEDINGS OF THE 2010 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P117
   Tsukada T, 2010, LECT NOTES COMPUT SC, V6014, P343, DOI 10.1007/978-3-642-12032-9_24
   Van Horn D, 2012, J FUNCT PROGRAM, V22, P705, DOI 10.1017/S0956796812000238
   Van Horn D, 2010, ICFP 2010: PROCEEDINGS OF THE 2010 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P51
   Vazou N, 2013, LECT NOTES COMPUT SC, V7792, P209, DOI 10.1007/978-3-642-37036-6_13
   Vazou Niki, 2014, P 19 ACM SIGPLAN INT, P269
   Vytiniotis D, 2013, ACM SIGPLAN NOTICES, V48, P431, DOI 10.1145/2480359.2429121
   Wright AK, 1997, ACM T PROGR LANG SYS, V19, P87, DOI 10.1145/239912.239917
   Xie YC, 2005, ACM SIGPLAN NOTICES, V40, P351, DOI 10.1145/1047659.1040334
   Xu DN, 2009, ACM SIGPLAN NOTICES, V44, P41, DOI 10.1145/1594834.1480889
   Yang JF, 2004, USENIX ASSOCIATION PROCEEDINGS OF THE SIXTH SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION (OSDE '04), P273
   Zhu H, 2013, LECT NOTES COMPUT SC, V7737, P295
NR 62
TC 8
Z9 10
U1 0
U2 6
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PY 2017
VL 27
DI 10.1017/S0956796816000216
PG 56
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA EH1ZU
UT WOS:000391567800001
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Sergey, I
   Vytiniotis, D
   Jones, SLP
   Breitner, J
AF Sergey, Ilya
   Vytiniotis, Dimitrios
   Jones, Simon L. Peyton
   Breitner, Joachim
TI Modular, higher order cardinality analysis in theory and practice
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB Since the mid '80s, compiler writers for functional languages (especially lazy ones) have been writing papers about identifying and exploiting thunks and lambdas that are used only once. However, it has proved difficult to achieve both power and simplicity in practice. In this paper, we describe a new, modular analysis for a higher order language, which is both simple and effective. We prove the analysis sound with respect to a standard call-by-need semantics, and present measurements of its use in a full-scale, state-of-the-art optimising compiler. The analysis finds many single-entry thunks and one-shot lambdas and enables a number of program optimisations. This paper extends our preceding conference publication (Sergey et al. 2014 Proceedings of the 41st Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages (POPL 2014). ACM, pp. 335-348) with proofs, expanded report on evaluation and a detailed examination of the factors causing the loss of precision in the analysis.
C1 [Sergey, Ilya] UCL, London, England.
   [Vytiniotis, Dimitrios; Jones, Simon L. Peyton] Microsoft Res, Cambridge, England.
   [Breitner, Joachim] Univ Penn, Philadelphia, PA 19104 USA.
C3 University of London; University College London; Microsoft; University
   of Pennsylvania
RP Sergey, I (corresponding author), UCL, London, England.
EM i.sergey@ucl.ac.uk; dimitris@microsoft.com; simonpj@microsoft.com;
   joachim@cis.upenn.edu
OI Sergey, Ilya/0000-0003-4250-5392
CR Barendsen E., 1996, Mathematical Structures in Computer Science, V6, P579
   Breitner J., 2016, THESIS
   Breitner J, 2015, ACM SIGPLAN NOTICES, V50, P35, DOI 10.1145/2804302.2804312
   Breitner J, 2015, LECT NOTES COMPUT SC, V8843, P34, DOI 10.1007/978-3-319-14675-1_3
   Gill A., 1993, P C FUNCT PROGR LANG, P223, DOI DOI 10.1145/165180.165214
   Gill Andrew John, 1996, THESIS
   Girard J., 1995, ADV LINEAR LOGIC, V222, P1, DOI DOI 10.1017/CB09780511629150.002
   Goldberg B., 1987, LNCS, V274
   Gustavsson J, 2001, LECT NOTES COMPUT SC, V2011, P140
   Gustavsson Jorgen, 1998, P 3 ACM SIGPLAN INT, P39
   Hage J, 2007, ICFP'07 PROCEEDINGS OF THE 2007 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P235
   Henglein F., 1994, Static Analysis. First International Static Analysis Symposium, SAS '94 Proceedings, P395
   Hinze R., 1995, THESIS
   Holdermans S, 2010, PEPM '10: PROCEEDINGS OF THE 2010 ACM SIGPLAN WORKSHOP ON PARTIAL EVALUATION AND PROGRAM MANIPULATION, P121, DOI 10.1145/1706356.1706379
   Hudak Paul., 1986, LFP 86, P351, DOI 10.1145/319838.319876
   Jones Richard, 1992, J FUNCT PROGRAM, V2, P73
   Jones SLP, 1998, SCI COMPUT PROGRAM, V32, P3, DOI 10.1016/S0167-6423(97)00029-4
   Jones SP, 1996, ACM SIGPLAN NOTICES, V31, P1
   Kahn, 1987, LNCS, V274
   Launchbury J., 1993, WORKSH COMP
   Marlow S, 2006, J FUNCT PROGRAM, V16, P415, DOI 10.1017/S0956796806005995
   Might M., 2006, P 11 ACM SIGPLAN INT
   Moran A., 1999, Conference Record of POPL '99. 26th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P43, DOI 10.1145/292540.292547
   Partain W., 1993, WORKSH COMP
   Partain W., 1994, P 1993 GLASG WORKSH, P201
   Peyton Jones S. L., 1992, Journal of Functional Programming, V2, P127, DOI 10.1017/S0956796800000319
   Sabry A., 1992, Proceedings of the 1992 ACM Conference on Lisp and Functional Programming, P288, DOI 10.1145/141471.141563
   Sergey I, 2014, ACM SIGPLAN NOTICES, V49, P335, DOI 10.1145/2535838.2535861
   Sestoft P., 1997, Journal of Functional Programming, V7, P231, DOI 10.1017/S0956796897002712
   Turner D. N., 1995, Conference Record of FPCA '95. SIGPLAN-SIGARCH-WG2.8. Conference on Functional Programming Languages and Computer Architecture, P1, DOI 10.1145/224164.224168
   Turner DN, 1999, THEOR COMPUT SCI, V227, P231, DOI 10.1016/S0304-3975(99)00054-7
   Van Horn D, 2010, ICFP 2010: PROCEEDINGS OF THE 2010 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P51
   Verstoep H, 2015, PROCEEDINGS OF THE 2015 ACM SIGPLAN WORKSHOP ON PARTIAL EVALUATION AND PROGRAM MANIPULATION (PEPM'15), P139, DOI 10.1145/2678015.2682536
   WADLER P, 1987, LECT NOTES COMPUT SC, V274, P385
   Wansbrough K., 1999, Conference Record of POPL '99. 26th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P15, DOI 10.1145/292540.292545
   Wansbrough K., 2002, THESIS
   Xu D., 2005, ARITY ANAL UNPUB
NR 37
TC 6
Z9 6
U1 0
U2 2
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PY 2017
VL 27
DI 10.1017/S0956796817000016
PG 55
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA EN1ZT
UT WOS:000395809800001
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Schwerter, FB
   Garcia, R
   Tanter, É
AF Schwerter, Felipe Banados
   Garcia, Ronald
   Tanter, Eric
TI Gradual type-and-effect systems
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB Effect systems have the potential to help software developers, but their practical adoption has been very limited. We conjecture that this limited adoption is due in part to the difficulty of transitioning from a system where effects are implicit and unrestricted to a system with a static effect discipline, which must settle for conservative checking in order to be decidable. To address this hindrance, we develop a theory of gradual effect checking, which makes it possible to incrementally annotate and statically check effects, while still rejecting statically inconsistent programs. We extend the generic type-and-effect framework of Marino and Millstein with a notion of unknown effects, which turns out to be significantly more subtle than unknown types in traditional gradual typing. We appeal to abstract interpretation to develop and validate the concepts of gradual effect checking. We also demonstrate how an effect system formulated in the framework of Marino and Millstein can be automatically extended to support gradual checking. We use gradual effect checking to develop a fully gradual type-and-effect framework, which permits interaction between static and dynamic checking for both effects and types.
C1 [Schwerter, Felipe Banados; Garcia, Ronald] Univ British Columbia, Dept Comp Sci, Software Practices Lab, Vancouver, BC, Canada.
   [Tanter, Eric] Univ Chile, Comp Sci Dept DCC, PLEIAD Lab, Santiago, Chile.
C3 University of British Columbia; Universidad de Chile
RP Schwerter, FB (corresponding author), Univ British Columbia, Dept Comp Sci, Software Practices Lab, Vancouver, BC, Canada.
EM fbanados@cs.ubc.ca; rxg@cs.ubc.ca; etanter@dcc.uchile.cl
CR Abadi M, 2006, ACM T PROGR LANG SYS, V28, P207, DOI 10.1145/1119479.1119480
   Abadi M, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P63, DOI 10.1145/1328438.1328449
   Benton N, 2007, PROCEEDINGS OF THE TLDI 2007: 2007 ACM SIGPLAN INTERNATIONAL WORKSHOP ON TYPES IN LANGUAGES DESIGN AND IMPLEMENTATION, P15, DOI 10.1145/1190315.1190320
   Cousot P., 1979, 6 ACM S PRINCIPLES P, P269, DOI DOI 10.1145/567752.567778
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Delaware B, 2013, ACM SIGPLAN NOTICES, V48, P319, DOI [10.1145/2500365.2500587, 10.1145/2544174.2500587]
   Disney T., 2011, THE STOP
   Disney T, 2011, ICFP 11 - PROCEEDINGS OF THE 2011 ACM SIGPLAN: INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P176
   Fennell L, 2013, P IEEE CSFW, P224, DOI 10.1109/CSF.2013.22
   Findler RB, 2002, ACM SIGPLAN NOTICES, V37, P48, DOI 10.1145/583852.581484
   Garcia R, 2016, ACM SIGPLAN NOTICES, V51, P429, DOI 10.1145/2914770.2837670
   Garcia R, 2014, ACM T PROGR LANG SYS, V36, DOI 10.1145/2629609
   Garcia Ronald, 2014, P 19 ACM SIGPLAN INT, P283, DOI [10.1145/2628136.2628149, DOI 10.1145/2628136.2628149]
   Gifford DK, 1986, P 1986 ACM C LISP FU, P28, DOI DOI 10.1145/319838.319848
   Gordon CS, 2013, LECT NOTES COMPUT SC, V7920, P179, DOI 10.1007/978-3-642-39038-8_8
   Gosling J., 2003, JAVA LANGUAGE SPECIF
   Ina L, 2011, OOPSLA 11: PROCEEDINGS OF THE 2011 ACM INTERNATIONAL CONFERENCE ON OBJECT ORIENTED PROGRAMMING SYSTEMS LANGUAGES AND APPLICATIONS, P609
   Marino D., 2009, P 2009 ACM SIGPLAN I, P39, DOI DOI 10.1145/1481861.1481868
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Rytz L., 2013, P 15 WORKSH FORM TEC
   Rytz L, 2012, LECT NOTES COMPUT SC, V7313, P258, DOI 10.1007/978-3-642-31057-7_13
   Scholliers C, 2015, SCI COMPUT PROGRAM, V98, P360, DOI 10.1016/j.scico.2013.09.005
   Sergey I, 2012, LECT NOTES COMPUT SC, V7211, P579, DOI 10.1007/978-3-642-28869-2_29
   Siek J, 2007, LECT NOTES COMPUT SC, V4609, P2
   Siek Jeremy, 2006, WORKSHOP SCHEME FUNC, P81
   Takikawa A, 2012, ACM SIGPLAN NOTICES, V47, P793, DOI 10.1145/2398857.2384674
   Thiemann P., 2014, LECT NOTES COMPUTER, V8410
   Toro M., 2015, 30 ACM SIGPLAN C OBJ
   Wolff R, 2011, LECT NOTES COMPUT SC, V6813, P459, DOI 10.1007/978-3-642-22655-7_22
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
   Yan Mei Tang, 1995, Proceedings of the ACM SIGPLAN Symposium on Partial Evaluation and Semantics- Based Program Manipulation. PEPM'95, P45, DOI 10.1145/215465.215552
NR 31
TC 17
Z9 17
U1 0
U2 1
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PY 2016
VL 26
BP 1
EP 66
AR e19
DI 10.1017/S0956796816000162
PG 66
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DW8OA
UT WOS:000383914200001
DA 2024-07-18
ER

PT J
AU Dunfield, J
AF Dunfield, Joshua
TI Elaborating intersection and union types
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID ASSIGNMENT; INFERENCE; CALCULUS; MODEL
AB Designing and implementing typed programming languages is hard. Every new type system feature requires extending the metatheory and implementation, which are often complicated and fragile. To ease this process, we would like to provide general mechanisms that subsume many different features. In modern type systems, parametric polymorphism is fundamental, but intersection polymorphism has gained little traction in programming languages. Most practical intersection type systems have supported only refinement intersections, which increase the expressiveness of types (more precise properties can be checked) without altering the expressiveness of terms; refinement intersections can simply be erased during compilation. In contrast, unrestricted intersections increase the expressiveness of terms, and can be used to encode diverse language features, promising an economy of both theory and implementation. We describe a foundation for compiling unrestricted intersection and union types: an elaboration type system that generates ordinary.-calculus terms. The key feature is a Forsythe-like merge construct. With this construct, not all reductions of the source program preserve types; however, we prove that ordinary call-by-value evaluation of the elaborated program corresponds to a type-preserving evaluation of the source program. We also describe a prototype implementation and applications of unrestricted intersections and unions: records, operator overloading, and simulating dynamic typing.
C1 [Dunfield, Joshua] Max Planck Inst Software Syst MPI SWS, Kaiserslautern, Germany.
   [Dunfield, Joshua] Max Planck Inst Software Syst MPI SWS, Saarbrucken, Germany.
C3 Max Planck Society; Max Planck Society
RP Dunfield, J (corresponding author), Max Planck Inst Software Syst MPI SWS, Kaiserslautern, Germany.
EM joshua@mpi-sws.org
CR Aiken Alexander., 1994, P 21 ACM SIGPLAN SIG, P163, DOI DOI 10.1145/174675.177847
   [Anonymous], PLDI 91
   [Anonymous], 1997, The Definition of Standard ML
   BARBANERA F, 1995, INFORM COMPUT, V119, P202, DOI 10.1006/inco.1995.1086
   BARENDREGT H, 1983, J SYMBOLIC LOGIC, V48, P931, DOI 10.2307/2273659
   CASTAGNA G, 1995, INFORM COMPUT, V117, P115, DOI 10.1006/inco.1995.1033
   COPPO M, 1981, Z MATH LOGIK, V27, P45, DOI 10.1002/malq.19810270205
   Davies R, 2000, ACM SIGPLAN NOTICES, V35, P198, DOI 10.1145/357766.351259
   Dunfield J, 2004, ACM SIGPLAN NOTICES, V39, P281, DOI 10.1145/982962.964025
   Dunfield J, 2003, LECT NOTES COMPUT SC, V2620, P250
   DUNFIELD J, 2013, INT C FUNCT PROGR IC
   Dunfield J., 2013, TWELF PROOFS ACCOMPA
   Dunfield J, 2012, ACM SIGPLAN NOTICES, V47, P17, DOI 10.1145/2398856.2364534
   Dunfield J, 2011, ELECTRON PROC THEOR, P59, DOI 10.4204/EPTCS.45.5
   Dunfield J, 2009, ML'09: PROCEEDINGS OF THE 2009 ACM SIGPLAN WORKSHOP ON ML, P15
   Dunfield J, 2007, PLPV'07: PROCEEDINGS OF THE 2007 WORKSHOP ON PROGRAMMING LANGUAGES MEETS PROGRAM VERIFICATION, P21, DOI 10.1145/1292597.1292602
   FREEMAN T, 1991, P ACM SIGPLAN C PROG, P268, DOI DOI 10.1145/113445.113468
   Frisch A, 2008, J ACM, V55, DOI 10.1145/1391289.1391293
   Gentzen G., 1969, The collected papers of Gerhard Gentzen
   Hindley J. R., 1992, Formal Aspects of Computing, V4, P470, DOI 10.1007/BF01211394
   HINDLEY JR, 1984, THEOR COMPUT SCI, V28, P235, DOI 10.1016/0304-3975(83)90074-9
   Kfoury AJ, 2004, THEOR COMPUT SCI, V311, P1, DOI 10.1016/j.tcs.2003.10.032
   LOPEZESCOBAR EGK, 1985, LECT NOTES MATH, V1130, P208
   MACQUEEN D, 1986, INFORM CONTROL, V71, P95, DOI 10.1016/S0019-9958(86)80019-5
   Neergaard PM, 2004, ACM SIGPLAN NOTICES, V39, P138, DOI 10.1145/1016848.1016871
   PFENNING F, 1999, INT C AUT DED, P202
   Pfenning Frank, 2005, THESIS CARNEGIE MELL
   PIERCE B, 1991, CMUCS91106
   Pierce BC, 2000, ACM T PROGR LANG SYS, V22, P1, DOI 10.1145/345099.345100
   Pottinger Garrel, 1980, ESSAYS COMBINATORY L, P561
   Remy Didier., 1989, Principles of Programming Languages (POPL)
   Reynolds J.C, 1991, LNCS, V526, P675
   REYNOLDS JC, 1996, CMUCS96146
   REYNOLDS JC, 1988, CMUCS88159
   Tobin-Hochstadt S, 2008, ACM SIGPLAN NOTICES, V43, P395, DOI 10.1145/1328897.1328486
   Turbak F., 1997, INT WORKSH TYP COMP
   WADLER P, 1989, POPL 89, P60, DOI DOI 10.1145/75277.75283
   Wells JB, 2002, J FUNCT PROGRAM, V12, P183, DOI 10.1017/S0956796801004245
   Wright A. K., 1995, LISP and Symbolic Computation, V8, P343, DOI 10.1007/BF01018828
NR 39
TC 17
Z9 18
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD MAY
PY 2014
VL 24
IS 2-3
BP 133
EP 165
DI 10.1017/S0956796813000270
PG 33
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AM0QJ
UT WOS:000339550500002
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Voigtländer, J
   Hu, ZJ
   Matsuda, K
   Wang, M
AF Voigtlaender, Janis
   Hu, Zhenjiang
   Matsuda, Kazutaka
   Wang, Meng
TI Enhancing semantic bidirectionalization via shape bidirectionalizer
   plug-ins
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID UPDATE SEMANTICS; TRANSFORMATIONS
AB Matsuda et al. (Matsuda, K., Hu, Z., Nakano, K., Hamana, M. & Takeichi, M. (2007) Bidirectionalization transformation based on automatic derivation of view complement functions. In Proceedings of the International Conference on Functional Programming. ACM Press, pp. 47-58) and Voigtlander (Voigtlander, J. (2009) Bidirectionalization for free! In Proceedings of Principles of Programming Languages. ACM Press, pp. 165-176) have introduced two techniques that given a source-to-view function provide an update propagation function mapping an original source and an updated view back to an updated source, subject to standard consistency conditions. Previously, we developed a synthesis of the two techniques, based on a separation of shape and content aspects (Voigtlander, J., Hu, Z., Matsuda, K. & Wang, M. (2010) Combining syntactic and semantic bidirectionalization. In Proceedings of the International Conference on Functional Programming. ACM Press, pp. 181192). Here we carry that idea further, reworking the technique of Voigtlander such that any shape bidirectionalizer (based on the work of Matsuda et al. (2007) or not) can be used as a plug-in, to good effect. We also provide a data-type-generic account, enabling wider reuse, including the use of pluggable bidirectionalization itself as a plug-in.
C1 [Voigtlaender, Janis] Univ Bonn, D-53113 Bonn, Germany.
   [Hu, Zhenjiang] Natl Inst Informat, Tokyo 1018430, Japan.
   [Matsuda, Kazutaka] Univ Tokyo, Tokyo 1130033, Japan.
   [Wang, Meng] Chalmers Univ Technol, S-41296 Gothenburg, Sweden.
C3 University of Bonn; Research Organization of Information & Systems
   (ROIS); National Institute of Informatics (NII) - Japan; University of
   Tokyo; Chalmers University of Technology
RP Voigtländer, J (corresponding author), Univ Bonn, D-53113 Bonn, Germany.
EM jv@informatik.uni-bonn.de; hu@nii.ac.jp; kztk@is.s.u-tokyo.ac.jp;
   wmeng@chalmers.se
OI Voigtlander, Janis/0009-0001-2411-9909; Wang, Meng/0000-0001-7780-630X
FU JSPS KAKENHI [22800003, 24700020]; Grants-in-Aid for Scientific Research
   [22800003, 24700020] Funding Source: KAKEN
FX We thank the anonymous reviewers of the earlier related paper
   (Voigtlander et al., 2010) and of the present paper for their insightful
   comments and suggestions. Part of this work is supported by JSPS KAKENHI
   grant numbers 22800003 and 24700020.
CR Abbott M, 2003, LECT NOTES COMPUT SC, V2620, P23
   [Anonymous], 2003, Haskell 98 language and libraries: the revised report
   BANCILHON F, 1981, ACM T DATABASE SYST, V6, P557, DOI 10.1145/319628.319634
   Bohannon A, 2008, ACM SIGPLAN NOTICES, V43, P407, DOI 10.1145/1328897.1328487
   Czarnecki K, 2009, LECT NOTES COMPUT SC, V5563, P260, DOI 10.1007/978-3-642-02408-5_19
   Foster JN, 2007, ACM T PROGR LANG SYS, V29, DOI [10.1145/1232420.1232424, 10.1145/1047659.1040325]
   Foster JN, 2008, ACM SIGPLAN NOTICES, V43, P383, DOI 10.1145/1411203.1411257
   Foster Nate, 2012, Generic and Indexed Programming. International Spring School, SSGIP 2010. Revised Lectures, P1, DOI 10.1007/978-3-642-32202-0_1
   Gibbons J, 2009, J FUNCT PROGRAM, V19, P377, DOI 10.1017/S0956796809007291
   Giesl J, 2000, LECT NOTES COMPUT SC, V1817, P293, DOI 10.1007/10720327_17
   Giesl J, 2007, J LOGIC ALGEBR PROGR, V71, P79, DOI 10.1016/j.jlap.2006.11.001
   GOTTLOB G, 1988, ACM T DATABASE SYST, V13, P486, DOI 10.1145/49346.50068
   Hidaka S, 2010, ACM SIGPLAN NOTICES, V45, P205, DOI 10.1145/1932681.1863573
   Jay CB, 1995, SCI COMPUT PROGRAM, V25, P251, DOI 10.1016/0167-6423(95)00015-1
   KELLER AM, 1987, ACM T DATABASE SYST, V12, P521, DOI 10.1145/27629.214296
   Matsuda K., 2013, P 15 S PRINCIPLES PR, V13, P297, DOI [10.1145/2505879.2505888, DOI 10.1145/2505879.2505888]
   MATSUDA K, 2009, COMPUTER SOFTWARE, V26, P56
   Matsuda K, 2007, ACM SIGPLAN NOTICES, V42, P47, DOI 10.1145/1291220.1291162
   Pacheco H., 2012, ELECT COMMUN EUR ASS, V49
   Pacheco H, 2010, LECT NOTES COMPUT SC, V6120, P331, DOI 10.1007/978-3-642-13321-3_19
   Pettorossi A., 1977, P INFORMATICA, P1
   Reynolds J. C., 1983, Information Processing 83. Proceedings of the IFIP 9th World Computer Congress, P513
   Strachey C., 2000, Higher-Order and Symbolic Computation, V13, P11, DOI 10.1023/A:1010000313106
   Vaughan J.A., 2006, P PRINC DAT SYST, P338, DOI [10.1145/1142351.1142399, DOI 10.1145/1142351.1142399]
   Voigtlander J., 2012, P ACM SIGPLAN 2012 W, P39, DOI DOI 10.1145/2103746.2103757
   VOIGTLANDER J, 2009, P PRINC PROGR LANG, V44, P165
   VOIGTLANDER J, 2010, P INT C FUNCT PROGR, V45, P181
   WADLER P, 1990, THEOR COMPUT SCI, V73, P231, DOI 10.1016/0304-3975(90)90147-A
   Wadler P., 1992, Conference Record of the Nineteenth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P1, DOI 10.1145/143165.143169
   Wadler P., 1989, FPCA 89 P 4 INT C FU, P347
   Wang M, 2013, SCI COMPUT PROGRAM, V78, P2216, DOI 10.1016/j.scico.2012.07.014
   Wang M, 2011, ACM SIGPLAN NOTICES, V46, P392, DOI 10.1145/2034574.2034825
   Zhenjiang Hu, 2008, Higher-Order and Symbolic Computation, V21, P89, DOI 10.1007/s10990-008-9025-5
NR 33
TC 12
Z9 12
U1 0
U2 1
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD SEP
PY 2013
VL 23
IS 5
BP 515
EP 551
DI 10.1017/S0956796813000130
PG 37
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 250WQ
UT WOS:000326887800001
OA Green Submitted, Green Accepted, Bronze
DA 2024-07-18
ER

PT J
AU Gotsman, A
   Yang, H
AF Gotsman, Alexey
   Yang, Hongseok
TI Modular verification of preemptive OS kernels
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID SEPARATION LOGIC; SEMANTICS; CODE
AB Most major OS kernels today run on multiprocessor systems and are preemptive: it is possible for a process running in the kernel mode to get descheduled. Existing modular techniques for verifying concurrent code are not directly applicable in this setting: they rely on scheduling being implemented correctly, and in a preemptive kernel, the correctness of the scheduler is interdependent with the correctness of the code it schedules. This interdependency is even stronger in mainstream kernels, such as those of Linux, FreeBSD or Mac OS X, where the scheduler and processes interact in complex ways. We propose the first logic that is able to decompose the verification of preemptive multiprocessor kernel code into verifying the scheduler and the rest of the kernel separately, even in the presence of complex interdependencies between the two components. The logic hides the manipulation of control by the scheduler when reasoning about preemptable code and soundly inherits proof rules from concurrent separation logic to verify it thread-modularly. We illustrate the power of our logic by verifying an example scheduler, which includes some of the key features of the scheduler from Linux 2.6.11 challenging for verification.
C1 [Yang, Hongseok] Univ Oxford, Oxford OX1 2JD, England.
C3 University of Oxford
EM alexey.gotsman@imdea.org; Hongseok.Yang@cs.ox.ac.uk
RI Yang, Hongseok/AAC-4471-2020; Yang, Hongseok/M-8791-2017
FU EU FET ADVENT project; EPSRC; EPSRC [EP/H008373/2, EP/E053041/2,
   EP/E053041/1] Funding Source: UKRI
FX We thank Anindya Banerjee, Xinyu Feng, Boris Kopf, Mark Marron, Peter
   O'Hearn, Matthew Parkinson, Noam Rinetzky, Zhong Shao, Viktor Vafeiadis
   and Jules Villard for comments and discussions that helped improve the
   paper. Gotsman was supported by the EU FET ADVENT project. Yang was
   supported by EPSRC.
CR [Anonymous], 1984, Logics and Models of Concurrent Systems (NATO ASI Series, DOI [DOI 10.1007/978-3-642-82453-1_5, 10.1007/978-3-642-82453-1\5]
   BACK RJR, 1981, J COMPUT SYST SCI, V23, P49, DOI 10.1016/0022-0000(81)90005-2
   Berdine J., 2002, Higher-Order and Symbolic Computation, V15, P181, DOI 10.1023/A:1020891112409
   Bovet D. P., 2005, Understanding the Linux Kernel: from I/O ports to process management
   Brookes S, 2007, THEOR COMPUT SCI, V375, P227, DOI 10.1016/j.tcs.2006.12.034
   Calcagno C, 2007, IEEE S LOG, P366, DOI 10.1109/LICS.2007.30
   Charlton N, 2011, LECT NOTES ARTIF INT, V6642, P52, DOI 10.1007/978-3-642-20920-8_10
   Clarke D. G., 2001, ECOOP 2001 - Object-Oriented Programming. 15th European Conference. Proceedings (Lecture Notes in Computer Science Vol.2072), P53
   Cohen E, 2010, LECT NOTES COMPUT SC, V6174, P480, DOI 10.1007/978-3-642-14295-6_42
   Dinsdale-Young T, 2013, ACM SIGPLAN NOTICES, V48, P287, DOI 10.1145/2480359.2429104
   Dinsdale-Young T, 2010, LECT NOTES COMPUT SC, V6183, P504, DOI 10.1007/978-3-642-14107-2_24
   Feng XF, 2008, LECT NOTES COMPUT SC, V5295, P54, DOI 10.1007/978-3-540-87873-5_8
   Feng XY, 2008, ACM SIGPLAN NOTICES, V43, P170, DOI 10.1145/1379022.1375603
   Feng XY, 2007, LECT NOTES COMPUT SC, V4421, P173
   Feng XY, 2007, PROCEEDINGS OF THE TLDI 2007: 2007 ACM SIGPLAN INTERNATIONAL WORKSHOP ON TYPES IN LANGUAGES DESIGN AND IMPLEMENTATION, P67, DOI 10.1145/1190315.1190325
   Feng X, 2006, ACM SIGPLAN NOTICES, V41, P401, DOI 10.1145/1133981.1134028
   Gargano M, 2005, LECT NOTES COMPUT SC, V3603, P1
   Gotsman A., 2013, ELECT APPENDIX THIS, DOI DOI 10.1017/S0956796813000075
   Gotsman A., 2009, THESIS U CAMBRIDGE
   Gotsman A, 2007, LECT NOTES COMPUT SC, V4807, P19
   Gotsman A, 2011, ELECTRON NOTES THEOR, V276, P171, DOI 10.1016/j.entcs.2011.09.021
   Hasegawa M, 2004, LECT NOTES COMPUT SC, V2998, P229
   Hasegawa M., 2002, Functional and Logic Programming. 6th International Symposium, FLOPS 2002. Proceedings (Lecture Notes in Computer Science Vol.2441), P167
   Jones C. B., 1983, Information Processing 83. Proceedings of the IFIP 9th World Computer Congress, P321
   Jones CB, 2007, THEOR COMPUT SCI, V375, P109, DOI 10.1016/j.tcs.2006.12.029
   Klein G., 2009, SADHANA, V34, P26
   Klein G, 2009, SOSP'09: PROCEEDINGS OF THE TWENTY-SECOND ACM SIGOPS SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P207
   Laird J, 2005, THEOR COMPUT SCI, V333, P199, DOI 10.1016/j.tcs.2004.10.022
   Love Robert, 2010, Linux Kernel Development
   Maeda T, 2009, LECT NOTES COMPUT SC, V5458, P181
   Ni ZZ, 2006, ACM SIGPLAN NOTICES, V41, P320, DOI 10.1145/1111320.1111066
   O'Hearn PW, 2007, THEOR COMPUT SCI, V375, P271, DOI 10.1016/j.tcs.2006.12.035
   Parkinson M, 2005, ACM SIGPLAN NOTICES, V40, P247, DOI 10.1145/1047659.1040326
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Schwinghammer J, 2009, LECT NOTES COMPUT SC, V5771, P440, DOI 10.1007/978-3-642-04027-6_32
   Shao Z, 2010, COMMUN ACM, V53, P56, DOI 10.1145/1859204.1859226
   Thielecke H., 2003, ACM SIGPLAN NOTICES, P139, DOI 10.1145/604131.604144
   Turon A, 2011, ACM SIGPLAN NOTICES, V46, P247, DOI 10.1145/1925844.1926415
   Vafeiadis V, 2007, LECT NOTES COMPUT SC, V4703, P256
   Yang J, 2010, ACM SIGPLAN NOTICES, V45, P99, DOI 10.1145/1809028.1806610
NR 40
TC 4
Z9 4
U1 0
U2 12
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD JUL
PY 2013
VL 23
IS 4
SI SI
BP 452
EP 514
DI 10.1017/S0956796813000075
PG 63
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 250WP
UT WOS:000326887600004
OA Green Published, Bronze
DA 2024-07-18
ER

PT J
AU Katsumata, SY
   Nishimura, S
AF Katsumata, Shin-Ya
   Nishimura, Susumu
TI Algebraic fusion of functions with an accumulating parameter and its
   improvement
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID TRANSFORMATION
AB This paper develops a new framework for fusion that is designed for eliminating the intermediate data structures involved in the composition of functions that have one accumulating parameter. The new fusion framework comprises two steps: algebraic fusion and its Subsequent improvement process. The key idea in our development is to regard functions with an accumulating parameter as function:; that operate over the monoid of data contexts:is. Algebraic fusion composes each such function with a monoid homomorphism that is derived from the definition Of the Consumer function to obtain a higher-order function that Computes over the monoid of endofunctions net ions. The transformation result may be further refilled by an improvement process, which replaces the operation over the monoid of endofunctions (i.e., function Closures) with another monoid operation over a monoid Structure other than function Closures.
   Using our framework, one can formulate a particular Solution to the fusion problem by devising appropriate monoids and monoid homomorphisms. This provides a unified exposition of a variety of fusion methods that have been developed so far in different formalisms. Furthermore, the cleaner formulation makes it possible to argue about some delicate issues on a firm mathematical basis. We demonstrate that algebraic fusion and improvement in the world of complete pointed partial orders (CPOs) and continuous functions can correctly fuse functions that operate on partial and infinite data structures. We also show that subtle differences in termination behaviours of transformed programmes caused by certain different fusion methods can be cleanly explained by corresponding improvement processes that have different underlying monoid structures.
C1 [Katsumata, Shin-Ya] Kyoto Univ, Math Sci Res Inst, Kyoto 6068502, Japan.
   [Nishimura, Susumu] Kyoto Univ, Fac Sci, Dept Math, Kyoto 6068502, Japan.
C3 Kyoto University; Kyoto University
RP Katsumata, SY (corresponding author), Kyoto Univ, Math Sci Res Inst, Kyoto 6068502, Japan.
EM sinya@kurims.kyoto-u.ac.jp; susumu@math.kyoto-u.ac.jp
OI Katsumata, Shin-ya/0000-0001-7529-5489
CR [Anonymous], LECT NOTES COMPUTER
   BURSTALL RM, 1977, J ACM, V24, P44, DOI 10.1145/321992.321996
   ENGELFRIET J, 1985, J COMPUT SYST SCI, V31, P71, DOI 10.1016/0022-0000(85)90066-2
   Fulop Z., 1998, MONOGRAPHS THEORETIC
   GANZINGER H, 1984, SIGPLAN NOTICES, V19, P157, DOI 10.1145/502949.502890
   GHANI N, 2006, P TRENDS FUNCT PROGR, V5, P65
   GHANI N, 2005, P INT C FUNCT PROGR, P294
   GIEGERICH R, 1988, ACTA INFORM, V25, P355, DOI 10.1007/BF02737108
   Gill A., 1993, P C FUNCT PROGR LANG, P223, DOI DOI 10.1145/165180.165214
   GILL A, 1996, THESIS U GLASGOW GLA
   GOGUEN JA, 1977, J ACM, V24, P68, DOI 10.1145/321992.321997
   Hu ZJ, 1999, NEW GENERAT COMPUT, V17, P153, DOI 10.1007/BF03037434
   Johann P., 2002, Higher-Order and Symbolic Computation, V15, P273, DOI 10.1023/A:1022982420888
   Joyal A, 1996, MATH PROC CAMBRIDGE, V119, P447, DOI 10.1017/S0305004100074338
   Kakehi K, 2002, LECT NOTES COMPUT SC, V2372, P46, DOI 10.1007/3-540-45607-4_3
   Kühnemann A, 1998, LECT NOTES COMPUT SC, V1530, P146
   MA QM, 1992, LECT NOTES COMPUT SC, V598, P1
   MALCOLM G, 1989, LECT NOTES COMPUT SC, V375, P335
   Nishimura S, 2003, LECT NOTES COMPUT SC, V2895, P358
   NISHIMURA S, 2004, P 2004 ACM SIGPLAN S, P101
   Ohori Atsushi, 2007, POPL 2007. The 34th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P143, DOI 10.1145/1190216.1190241
   PLOTKIN GD, 1993, LECTURE NOTES COMPUT, V664, P361
   Sheard Tim., 1993, FPCA 93, P233
   SVENNINGSSON J, 2002, P 7 ACM SIGPLAN INT, P124, DOI DOI 10.1145/581478.581491
   TAKANO A, 1995, P C FUNCT PROGR LANG, P306
   Voigtänder J, 2007, THEOR COMPUT SYST, V41, P619, DOI 10.1007/s00224-006-1235-9
   Voigtlander J., 2004, Higher-Order and Symbolic Computation, V17, P129, DOI 10.1023/B:LISP.0000029450.36668.cb
   Voigtländer J, 2004, J FUNCT PROGRAM, V14, P317, DOI 10.1017/S0956796803004933
   WADLER P, 1990, THEOR COMPUT SCI, V73, P231, DOI 10.1016/0304-3975(90)90147-A
   Wadler P., 1989, FPCA 89 P 4 INT C FU, P347
   Wei-Ngan Chin, 1994, Journal of Functional Programming, V4, P515, DOI 10.1017/S0956796800001179
NR 31
TC 4
Z9 4
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD SEP-NOV
PY 2008
VL 18
BP 781
EP 819
DI 10.1017/S095679680800693X
PN 5-6
PG 39
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 375KD
UT WOS:000261111700006
OA Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Nanevski, A
   Morrisett, G
   Birkedal, L
AF Nanevski, Aleksandar
   Morrisett, Greg
   Birkedal, Lars
TI Hoare type theory, polymorphism and separation
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID SYSTEM; LOGIC
AB We consider the problem of reconciling a dependently typed functional language with imperative features Such as mutable higher-order state. pointer aliasing, and nontermination. We propose Hoare type theory (HTT), which incorporates Hoare-style specifications into types. making it possible to statically track and enforce correct use of side effects. The main feature of HTT is the Hoare type),{P}x:A:{Q} specifying computations with precondition P and postcondition Q that return it result Of type A. Hoare types can be nested, combined with other types, and abstracted, leading to a smooth integration with higher-order functions and type polymorphism.
   We further show that in the presence of type polymorphism, it becomes possible to interpret the Hoare types in the "small footprint" manner, as advocated by separation logic. whereby specifications tightly describe the state required by the computation.
   We establish that HTT is Sound and compositional. in the sense that separate verifications of individual program components suffice to ensure the correctness of the composite program.
C1 [Nanevski, Aleksandar; Morrisett, Greg] Harvard Univ, Cambridge, MA 02138 USA.
   [Birkedal, Lars] IT Univ Copenhagen, Copenhagen, Denmark.
C3 Harvard University; IT University Copenhagen
RP Nanevski, A (corresponding author), Harvard Univ, Cambridge, MA 02138 USA.
EM aleks@eecs.harvard.edu; greg@eecs.harvard.edu; birkedal@itu.dk
OI Morrisett, John/0000-0002-2619-5614
CR Abadi M, 2003, LECT NOTES COMPUT SC, V2772, P11
   AHMED A, 2005, ICFP 05, P78
   Altenkirch T, 2001, IEEE S LOG, P303, DOI 10.1109/LICS.2001.932506
   AMTOFT T, 2006, S PRINC PROGR LANG P, P91
   [Anonymous], 1980, To H. B. Curry: Essays on Combinatory Logic, -calculus and Formalism
   [Anonymous], ICFP 98
   [Anonymous], 1994, Computation and reasoning: a type theory for computer science
   [Anonymous], 2003, High Integrity Software: The SPARK Approach to Safety and Security
   [Anonymous], 2003, Haskell 98 language and libraries: the revised report
   Augustsson L., 1998, Proceedings of the third ACM SIGPLAN international conference on Functional programming, ICFP '98, P239
   BERGER M, 2005, INT C FUNCT PROGR IC, P280
   BIERING B, 2005, ITUTR200569
   Birkedal L, 2005, IEEE S LOG, P260
   BIRKEDAL L, 2004, S PRINC PROGR LANG P, P220
   Burdy L., 2005, International Journal on Software Tools for Technology Transfer, V7, P212, DOI 10.1007/s10009-004-0167-4
   CARTWRIGHT R, 1978, S PRINC PROGR LANG P, P131
   Church A., 1940, J. Symbolic Logic, V5, P56, DOI [10.2307/2266170, DOI 10.2307/2266170]
   Collinson M, 2006, ELECTRON NOTES THEOR, V158, P171, DOI 10.1016/j.entcs.2006.04.010
   CONDIT J, 2007, LECT NOTES COMPUTER, V4421
   COOK SA, 1978, SIAM J COMPUT, V7, P70, DOI 10.1137/0207005
   DETLEFS DL, 1998, 159 COMP SYST RES CT
   DIJKSTRA EW, 1975, COMMUN ACM, V18, P453, DOI [10.1145/360933.360975, 10.1145/390016.808417]
   Dybjer P, 2006, J LOGIC ALGEBR PROGR, V66, P1, DOI 10.1016/j.jlap.2005.07.001
   Dybjer P., 1994, Formal Aspects of Computing, V6, P440, DOI 10.1007/BF01211308
   Evans D, 2002, IEEE SOFTWARE, V19, P42, DOI 10.1109/52.976940
   Feng XY, 2007, LECT NOTES COMPUT SC, V4421, P173
   Flanagan C, 2006, ACM SIGPLAN NOTICES, V41, P245, DOI 10.1145/1111320.1111059
   FLUCT M, 2006, EUR S PROGR ESOP 06, P7
   GHANBARI M, 1995, IEEE T CIRC SYST VID, V5, P171, DOI 10.1109/76.388066
   Gill A., 1993, P C FUNCT PROGR LANG, P223, DOI DOI 10.1145/165180.165214
   Girard J.-Y., 1989, Cambridge Tracts in Theoretical Computer Science, V7
   GREIF I, 1979, S PRINC PROGR LANG P, P180
   HARRIS T, 2005, S PRINC PRACT PAR PR, P48
   HOARE CAR, 1969, COMMUN ACM, V12, P576, DOI 10.1145/363235.363259
   HOFMANN M, 1995, ECSLFCS95327 U ED DE
   Honda K, 2005, IEEE S LOG, P270
   Jim T, 2002, USENIX ASSOCIATION PROCEEDINGS OF THE GENERAL TRACK, P275
   JONES SP, 1993, S PRINC PROGR LANG P, P71
   KRISHNASWAMI N, 2006, WORKSH SEM PROGR AN, P73
   Leavens GT, 1999, SPRING INT SER ENG C, V523, P175
   Leino KRM, 2002, ACM T PROGR LANG SYS, V24, P491, DOI 10.1145/570886.570888
   LEINO KRM, 2000, 2000002 COMP SYST RE
   LUO ZH, 1990, ECSLFCS90118 U ED
   Martin-Lof P., 1996, Nordic J. Philosophical Logic, V1, P11
   McBride C, 2004, J FUNCT PROGRAM, V14, P69, DOI 10.1017/S0956796803004829
   MCBRIDE C, 1999, ECSLFCS00419 U ED
   McCarthy John., 1962, IFIP C, P21
   MOGGI E, 1991, INFORM COMPUT, V93, P55, DOI 10.1016/0890-5401(91)90052-4
   Moggi E., 1989, Proceedings. Fourth Annual Symposium on Logic in Computer Science (Cat. No.89CH2753-2), P14, DOI 10.1109/LICS.1989.39155
   Morrisett G, 2005, LECT NOTES COMPUT SC, V3461, P293
   Nanevski A, 2007, LECT NOTES COMPUT SC, V4421, P189
   Necula G. C., 1997, Conference Record of POPL '97: The 24th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P106, DOI 10.1145/263699.263712
   O'Hearn PW., 2001, Local reasoning about programs that alter data structures, volume 2142 of LNCS, V2142, P1
   ODONNELL MJ, 1982, COMMUN ACM, V25, P927, DOI 10.1145/358728.358748
   OHEARN PW, 2004, S PRINC PROGR LANG P, P268
   PAULSON LC, 1990, LECT NOTES COMPUT SC, V417, P246
   Pfenning F., 2001, Mathematical Structures in Computer Science, V11, P511, DOI 10.1017/S0960129501003322
   Pierce BC, 2000, ACM T PROGR LANG SYS, V22, P1, DOI 10.1145/345099.345100
   REUS B, 2006, INT WORKSH COMP SCI
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Shao Z, 2005, ACM T PROGR LANG SYS, V27, P1, DOI 10.1145/1053468.1053469
   SHEARD T, 2004, INT C OBJ OR PROGR S, P116
   Smith F, 2000, LECT NOTES COMPUT SC, V1782, P366
   *SRI INT DSTO, 1991, HOL SYST DESCR
   Tan G, 2006, LECT NOTES COMPUT SC, V3855, P80
   Watkins K, 2004, ANN NY ACAD SCI, V3085, P355
   WESTBROOK E, 2005, INT C FUNCT PROGR IC, P268
   XI H, 1999, S PRINC PROGR LANG J, P214
   Xi HW, 1998, ACM SIGPLAN NOTICES, V33, P249, DOI 10.1145/277652.277732
   Zhu DP, 2005, LECT NOTES COMPUT SC, V3350, P83
   [No title captured]
   [No title captured]
   [No title captured]
NR 73
TC 71
Z9 79
U1 0
U2 1
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD SEP-NOV
PY 2008
VL 18
BP 865
EP 911
DI 10.1017/S0956796808006953
PN 5-6
PG 47
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 375KD
UT WOS:000261111700008
OA Bronze
DA 2024-07-18
ER

PT J
AU Courant, J
AF Courant, Judicael
TI <i>Ml</i><sub>2</sub> -: A module calculus for Pure Type Systems
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID COQ
AB Several proof-assistants rely on the very formal basis of Pure Type Systems (PTS) as their foundations. We are concerned with the issues involved in the development of large proofs in these provers such as namespace management, development of reusable proof libraries and separate verification. Although implementations offer many features to address them, few theoretical foundations have been laid for them up to now. This is a problem as features dealing with modularity may have harmful, unsuspected effects on the reliability or usability of an implementation.
   In this paper, we propose an extension of Pure Type Systems with a module system, MC2 adapted from SML-like module systems for programming languages. This system gives a theoretical framework addressing the issues mentioned above in a quite uniform way. It is intended to be a theoretical foundation for the module systems of proof-assistants such as Coq or Agda. We show how reliability and usability can be formalized as metatheoretical properties and prove they hold for MC2
C1 CNRS, UMR 5104, VERIMAG, Ctr Equat, F-38610 Gieres, France.
C3 Communaute Universite Grenoble Alpes; Institut National Polytechnique de
   Grenoble; Universite Grenoble Alpes (UGA); Centre National de la
   Recherche Scientifique (CNRS)
RP Courant, J (corresponding author), CNRS, UMR 5104, VERIMAG, Ctr Equat, 2 Ave Vignate, F-38610 Gieres, France.
CR ANCONA D, 1996, LECT NOTES COMP SCI, V1139
   [Anonymous], 1997, The Definition of Standard ML
   APONTE MV, 1996, JOURNEES FRANCOPHONE
   ASPERTI A, 1999, HIST ADV PROJECTUAL
   Augustsson L., 1998, Proceedings of the third ACM SIGPLAN international conference on Functional programming, ICFP '98, P239
   AUGUSTSSON L, 1999, CAYENNE HOTTER HASKE
   Barendregt H, 1993, HDB LOGIC COMPUTER S, VVolume 2
   BARRAS B, 1999, COQ PROOF ASSISTANT
   BERTOT Y, 2005, LECT NOTES COMPUTER
   Betarte G., 2000, Journal of Functional Programming, V10, P137, DOI 10.1017/S0956796899003627
   BETARTE G, 2000, 0009 INCOPEDECIBA
   BETARTE G, 1998, THESIS U GOTEBORG CH
   BOURBAKI N, 1970, ELEMENTS MATH THEORI, pCH4
   CAHCERA D, 2005, IN PRESS LECT NOTES
   CARDELLI L, 1997, 24 S PRINC PROGR LAN, P266
   Chrzaszcz J, 2004, ANN NY ACAD SCI, V3085, P130
   Chrzaszcz J, 2003, LECT NOTES COMPUT SC, V2758, P270
   CHRZASZCZ J, 2004, THESIS U PARIS SUD
   COQUAND C, 1999, P WORKSH LOG FRAM ME
   COQUAND C, 2000, AGDA
   COQUAND T, 1990, P 1 INT WORKSH LOG F, P479
   COURANT J, 2002, LECT NOTES COMPUTER, V2410, P115
   COURANT J, 2002, ELECT NOTES COMPUTER, V70
   COURANT J, 1999, 1217 LRI
   COURANT J, 1998, THESIS ECOLE NORMALE
   COURANT J, 1997, LECT NOTES COMPUTER, P622
   CRARY K, 1999, SIGPLAN C PROGR LANG, P50
   DREYER D, 2002, CMUCS02122
   DREYER D, 2002, MOSCOW MLS HIGHER OR
   FARMER WM, 1992, LECT NOTES ARTIF INT, V607, P567
   Farmer WM, 2000, LECT NOTES ARTIF INT, V1831, P115
   FARMER WM, 1996, LECT NOTES COMPUTER, P298
   Filliâtre JC, 2004, LECT NOTES COMPUT SC, V2986, P370
   Flatt Matthew., 1998, P ACM SIGPLAN 1998 C, P236
   Geuvers H., 1993, THESIS U NIJMEGEN
   GOGUEN H, 1994, THESIS U EDINBURGH
   HARPER R, 1990, CONFERENCE RECORD OF THE SEVENTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P341, DOI 10.1145/96709.96744
   HARPER R, 1992, CMUCS92191
   HARPER R, 1991, THEORETICAL COMPUTER, V89
   HARPER R, 1994, POPL94
   HARPER R, 1998, J LOGIC COMPUTATION, V1
   HARPER R, 2002, PROGRAMMING STANDARD
   Hirschowitz T, 2002, LECT NOTES COMPUT SC, V2305, P6
   JOHNSON AL, 1997, LINUX J, P64
   JONES A, 1998, LECT NOTES COMPUTER
   JUTTING LSV, 1993, LECT NOTES COMPUTER, V806
   KAMMULLER F, 1996, UNPUB COMP IMPS PVS
   KAMMULLER F, 1999, LECT NOTES COMPUTER, V1657
   KAMMULLER F, 2000, LECT NOTES ARTIFICIA, V1831
   LEROY X, 1994, POPL94
   LEROY X, 2001, OBJECTIVE CAML SYSTE
   LEROY X, 1995, 22 ANN ACM S PRINC P, P142
   LILLIBRIDGE M, 1997, THESIS CARNEGIEMELLO
   Luo Z., 1990, An extended calculus of constructions
   MacQueen D.B., 1984, LISP FUNCTIONAL PROG, P198
   Owre S, 1999, PVS LANGUAGE REFEREN
   Owre Sam, 1997, SRICSL972
   POLLACK R, 1997, TYP WORK GROUP WORKS
   POLLACK R, 2000, DEPENDENTLY TYPED RE
   RAMSEY N, 1994, IEEE SOFTWARE, V11, P97, DOI 10.1109/52.311070
   RAMSEY N, 2001, NOWEB SIMPLE EXTENSI
   RUSSO CV, 1998, ECSLFCS98O89 1 ED
   SEVERI P, 1996, THESIS EINDHOVEN U T
   SHANKAR N, 1993, FORMAL METHODS EUROP, P357
   Stone C. A., 2000, Conference Record of POPL'00: 27th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages. Papers Presented at the Symposium, P214, DOI 10.1145/325694.325724
   TASISTRO A, 1997, THESIS U GOTEBORG CH
   TOFTE M, 1996, LECT NOTES COMPUTER, V1129, P208
   WENZEL M, 2001, USING AXIOMATIC TYPE
   1995, IMPS USERS MANUAL
   1994, 21 S PRINC PROGR LAN
NR 70
TC 3
Z9 4
U1 0
U2 2
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD MAY
PY 2007
VL 17
BP 287
EP 352
DI 10.1017/S0956796806005867
PN 3
PG 66
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 163LR
UT WOS:000246161800001
OA Bronze
DA 2024-07-18
ER

PT J
AU Appel, AW
   Felty, AP
AF Appel, AW
   Felty, AP
TI Dependent types ensure partial correctness of theorem provers
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article; Proceedings Paper
CT Meeting on Dependent Type Theory Meets Practical Programming
CY AUG, 2001
CL Schloss Dagstuhl, GERMANY
AB Static type systems in programming languages allow many errors to be detected at compile time that wouldn't be detected until runtime otherwise. Dependent types are more expressive than the type systems in most programming languages, so languages that have them should allow programmers to detect more errors earlier. In this paper, using the Twelf system, we show that dependent types in the logic programming setting can be used to ensure partial correctness of programs which implement theorem provers, and thus avoid runtime errors in proof search and proof construction. We present two examples: a tactic-style interactive theorem prover and a union-find decision procedure.
C1 Princeton Univ, Princeton, NJ 08544 USA.
   Univ Ottawa, Ottawa, ON K1N 6N5, Canada.
C3 Princeton University; University of Ottawa
RP Princeton Univ, 35 Olden St, Princeton, NJ 08544 USA.
EM appel@princeton.edu; afelty@site.uottawa.ca
OI Appel, Andrew/0000-0001-6009-0325
CR Aho AV., 1974, DESIGN ANAL COMPUTER
   [Anonymous], 1994, Lecture Notes in Computer Science
   [Anonymous], 1979, LECT NOTES COMPUTER
   [Anonymous], 16 INT C AUT DED
   [Anonymous], USERS GUIDE ALF
   Appel A.W., 2000, PROC 27 ACM S PRINCI, P243
   APPEL AW, 2000, HINTS PROVING THEORE
   Barras B, 1998, COQ PROOF ASSISTANT
   Bove A., 1999, THESIS CHALMERS U TE
   FELTY A, 1993, J AUTOM REASONING, V11, P43, DOI 10.1007/BF00881900
   Gordon M.J.C., 1993, Introduction to HOL: A theorem proving environment for higher order logic
   HARPER R, 1993, J ACM, V40, P143, DOI 10.1145/138027.138060
   MCBRIDE C, 2001, IN PRESS J FUNCTIONA
   NADATHUR G, 1988, 5 INT C S LOG PROGR
   POLLACK R, 1995, LECT NOTES COMPUTER, V996
   Pollack Robert, 1994, THESIS U EDINBURGH
NR 16
TC 13
Z9 13
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD JAN
PY 2004
VL 14
BP 3
EP 19
DI 10.1017/S0956796803004921
PN 1
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 809LK
UT WOS:000220638000002
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Jansson, J
   Jansson, P
AF Jansson, Julia
   Jansson, Patrik
TI Level-p-complexity of Boolean functions using thinning, memoization, and
   polynomials
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID DECISION TREE COMPLEXITY
AB This paper describes a purely functional library for computing level-p-complexity of Boolean functions and applies it to two-level iterated majority. Boolean functions are simply functions from n bits to one bit, and they can describe digital circuits, voting systems, etc. An example of a Boolean function is majority, which returns the value that has majority among the n input bits for odd n. The complexity of a Boolean function f measures the cost of evaluating it: how many bits of the input are needed to be certain about the result of f. There are many competing complexity measures, but we focus on level-p-complexity - a function of the probability p that a bit is 1. The level-p-complexity $D_p(f)$ is the minimum expected cost when the input bits are independent and identically distributed with Bernoulli(p) distribution. We specify the problem as choosing the minimum expected cost of all possible decision trees - which directly translates to a clearly correct, but very inefficient implementation. The library uses thinning and memoization for efficiency and type classes for separation of concerns. The complexity is represented using (sets of) polynomials, and the order relation used for thinning is implemented using polynomial factorization and root counting. Finally, we compute the complexity for two-level iterated majority and improve on an earlier result by J. Jansson.
C1 [Jansson, Julia; Jansson, Patrik] Chalmers Univ Technol, Gothenburg, Sweden.
   [Jansson, Julia; Jansson, Patrik] Univ Gothenburg, Gothenburg, Sweden.
C3 Chalmers University of Technology; University of Gothenburg
RP Jansson, J (corresponding author), Chalmers Univ Technol, Gothenburg, Sweden.; Jansson, J (corresponding author), Univ Gothenburg, Gothenburg, Sweden.
EM juljans@chalmers.se; patrikj@chalmers.se
RI ; Jansson, Patrik/B-1987-2016
OI Jansson, Julia/0000-0001-7876-9651; Jansson, Patrik/0000-0003-3078-1437
CR [Anonymous], 1987, The complexity of Boolean functions
   Bird R., 2020, Algorithm Design with Haskell
   Bird Richard, 1997, Algebra of Programming
   BRYANT RE, 1986, IEEE T COMPUT, V35, P677, DOI 10.1109/TC.1986.1676819
   Buhrman H, 2002, THEOR COMPUT SCI, V288, P21, DOI 10.1016/S0304-3975(01)00144-X
   Garban C., 2014, Noise sensitivity of Boolean functions and percolation, V5
   Hinze R., 2000, Journal of Functional Programming, V10, P327, DOI 10.1017/S0956796800003713
   Jansson J., 2022, Level-p-complexity of Boolean Functions
   Jansson P., 2022, Domain-Specific Languages of Mathematics, V24
   Knuth D., 1981, The art of computer programming: seminumerical algorithms
   Landau I., 2006, Undergraduate Research Reports
   Leonardos N, 2013, LECT NOTES COMPUT SC, V7965, P696, DOI 10.1007/978-3-642-39206-1_59
   Magniez F, 2016, RANDOM STRUCT ALGOR, V48, P612, DOI 10.1002/rsa.20598
   Mu SC, 2009, J FUNCT PROGRAM, V19, P545, DOI 10.1017/S0956796809007345
   ODonnell R., 2014, ANAL BOOLEAN FUNCTIO, DOI DOI 10.1017/CBO9781139814782
   Swierstra W, 2022, J FUNCT PROGRAM, V32, DOI 10.1017/S0956796822000065
   van der Rest C., 2022, P ACM PROGRAM LANG, V6
   Yun D. Y., 1976, P 3 ACM S SYMB ALG C, P26
NR 18
TC 0
Z9 0
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI CAMBRIDGE
PA EDINBURGH BLDG, SHAFTESBURY RD, CB2 8RU CAMBRIDGE, ENGLAND
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD DEC 12
PY 2023
VL 33
AR e13
DI 10.1017/S0956796823000102
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AX8E5
UT WOS:001121830900001
OA hybrid, Green Published, Green Submitted
DA 2024-07-18
ER

PT J
AU Iwasaki, H
   Emoto, K
   Morihata, A
   Matsuzaki, K
   Hu, ZJ
AF Iwasaki, Hideya
   Emoto, Kento
   Morihata, Akimasa
   Matsuzaki, Kiminori
   Hu, Zhenjiang
TI Fregel: a functional domain-specific language for vertex-centric
   large-scale graph processing
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID THINK LIKE; ALGORITHMS; ANALYTICS; FRAMEWORK; SYSTEMS
AB The vertex-centric programming model is now widely used for processing large graphs. User-defined vertex programs are executed in parallel over every vertex of a graph, but the imperative and explicit message-passing style of existing systems makes defining a vertex program unintuitive and difficult. This article presents Fregel, a purely functional domain-specific language for processing large graphs and describes its model, design, and implementation. Fregel is a subset of Haskell, so Haskell tools can be used to test and debug Fregel programs. The vertex-centric computation is abstracted using compositional programming that uses second-order functions on graphs provided by Fregel. A Fregel program can be compiled into imperative programs for use in the Giraph and Pregel+ vertex-centric frameworks. Fregel's functional nature without side effects enables various transformations and optimizations during the compilation process. Thus, the programmer is freed from the burden of program optimization, which is manually done for existing imperative systems. Experimental results for typical examples demonstrated that the compiled code can be executed with reasonable and promising performance.
C1 [Iwasaki, Hideya] Univ Elect Commun, Tokyo, Japan.
   [Emoto, Kento] Kyushu Inst Technol, Fukuoka, Japan.
   [Morihata, Akimasa] Univ Tokyo, Tokyo, Japan.
   [Matsuzaki, Kiminori] Kochi Univ Technol, Kochi, Japan.
   [Hu, Zhenjiang] Peking Univ, Beijing, Peoples R China.
C3 University of Electro-Communications - Japan; Kyushu Institute of
   Technology; University of Tokyo; Kochi University Technology; Peking
   University
RP Iwasaki, H (corresponding author), Univ Elect Commun, Tokyo, Japan.
EM iwasaki@cs.uec.ac.jp; emoto@csn.kyutech.ac.jp;
   morihata@graco.c.u-tokyo.ac.jp; matsuzaki.kiminori@kochi-tech.ac.jp;
   huzj@pku.edu.cn
RI Morihata, Akimasa/KFR-7683-2024
OI Morihata, Akimasa/0000-0003-2741-5954; Iwasaki,
   Hideya/0000-0002-3708-6624
FU JSPS KAKENHI [JP26280020, JP15K15965, JP19K11901]
FX This work was partly supported by JSPS KAKENHI Grant Numbers JP26280020,
   JP15K15965, and JP19K11901.
CR [Anonymous], 2013, P 25 INT C SCI STAT, DOI DOI 10.1145/2484838.2484843
   [Anonymous], 2016, P 1 ACM SIGMOD WORKS
   Bae SH, 2015, PROCEEDINGS OF SC15: THE INTERNATIONAL CONFERENCE FOR HIGH PERFORMANCE COMPUTING, NETWORKING, STORAGE AND ANALYSIS, DOI 10.1145/2807591.2807668
   Bahr P, 2017, SCI COMPUT PROGRAM, V137, P63, DOI 10.1016/j.scico.2016.03.006
   Bu YY, 2012, VLDB J, V21, P169, DOI 10.1007/s00778-012-0269-7
   Capota Mihai, 2015, P GRADES 15 MELBOURN, DOI [10.1145/2764947.2764954, DOI 10.1145/2764947.2764954]
   Caviness B., 1998, Quantifier elimination and cylindrical algebraic decomposition
   Cruz Flavio, 2016, ACM SIGPLAN Notices, V51, P1, DOI 10.1145/3016078.2851153
   Yan D, 2014, PROC VLDB ENDOW, V7, P1981, DOI 10.14778/2733085.2733103
   Dathathri R, 2018, ACM SIGPLAN NOTICES, V53, P752, DOI [10.1145/3296979.3192404, 10.1145/3192366.3192404]
   De Moura L, 2011, COMMUN ACM, V54, P69, DOI 10.1145/1995376.1995394
   Emoto K, 2020, J SUPERCOMPUT, V76, P4998, DOI 10.1007/s11227-019-02821-w
   Emoto K, 2016, ACM SIGPLAN NOTICES, V51, P200, DOI 10.1145/3022670.2951938
   Erwig M, 1997, ACM SIGPLAN NOTICES, V32, P52, DOI 10.1145/258949.258955
   Erwig M, 2001, J FUNCT PROGRAM, V11, P467, DOI 10.1017/S0956796801004075
   Fegaras L., 1996, Conference Record of POPL '96: The 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P284, DOI 10.1145/237721.237792
   Gao Y., 2015, P 12 ACM INT C COMPU, DOI DOI 10.1145/2742854.2742884
   Gonzalez J. E., 2014, P 11 USENIX S OP SYS, P599
   Gonzalez Joseph E., 2012, 10 USENIX S OP SYST, P17
   Hamana M, 2010, LOG METH COMPUT SCI, V6, DOI 10.2168/LMCS-6(3:15)2010
   Han MY, 2014, PROC VLDB ENDOW, V7, P1047, DOI 10.14778/2732977.2732980
   Han MY, 2015, PROC VLDB ENDOW, V8, P950, DOI 10.14778/2777598.2777604
   Hidaka S, 2013, ACM SIGPLAN NOTICES, V48, P305, DOI [10.1145/2500365.2500608, 10.1145/2544174.2500608]
   Hong S, 2012, ASPLOS XVII: SEVENTEENTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS, P349
   Kalavri V, 2018, IEEE T KNOWL DATA EN, V30, P305, DOI 10.1109/TKDE.2017.2762294
   Kang U, 2012, VLDB J, V21, P637, DOI 10.1007/s00778-012-0283-9
   Kang U, 2011, KNOWL INF SYST, V27, P303, DOI 10.1007/s10115-010-0305-0
   Kato N., 2019, COMPUT SOFTWARE, V36
   Khan A., 2017, P INT C EXT DAT TECH, P438
   Khan A, 2014, PROC VLDB ENDOW, V7, P1709, DOI 10.14778/2733004.2733067
   Liu SY, 2018, IEEE INT CONF BIG DA, P242, DOI 10.1109/BigData.2018.8622032
   Liu YQ, 2016, CIKM'16: PROCEEDINGS OF THE 2016 ACM CONFERENCE ON INFORMATION AND KNOWLEDGE MANAGEMENT, P479, DOI 10.1145/2983323.2983726
   Low Y, 2012, PROC VLDB ENDOW, V5, P716, DOI 10.14778/2212351.2212354
   Lu Y, 2014, PROC VLDB ENDOW, V8, P281, DOI 10.14778/2735508.2735517
   Malewicz Grzegorz, 2010, P ACM SIGMOD INT C M, P135, DOI [DOI 10.1145/1807167.1807184, 10.1145/1807167.1807184]
   McCune RR, 2015, ACM COMPUT SURV, V48, DOI 10.1145/2818185
   Morihata A, 2018, LECT NOTES COMPUT SC, V10818, P166, DOI 10.1007/978-3-319-90686-7_11
   Nguyen D, 2013, SOSP'13: PROCEEDINGS OF THE TWENTY-FOURTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P456, DOI 10.1145/2517349.2522739
   Oliveira BCDS, 2012, ACM SIGPLAN NOTICES, V47, P77, DOI 10.1145/2398856.2364541
   Prountzos D, 2015, ACM SIGPLAN NOTICES, V50, P533, DOI [10.1145/2737924.2737953, 10.1145/2813885.2737953]
   Prountzos D, 2012, ACM SIGPLAN NOTICES, V47, P375, DOI 10.1145/2398857.2384644
   Quamar A, 2016, VLDB J, V25, P125, DOI 10.1007/s00778-015-0405-2
   Quamar A, 2014, PROC VLDB ENDOW, V7, P1673, DOI 10.14778/2733004.2733058
   Salihoglu S, 2014, PROC VLDB ENDOW, V7, P577, DOI 10.14778/2732286.2732294
   Satish N, 2014, SIGMOD'14: PROCEEDINGS OF THE 2014 ACM SIGMOD INTERNATIONAL CONFERENCE ON MANAGEMENT OF DATA, P979, DOI 10.1145/2588555.2610518
   Sengupta D, 2015, PROCEEDINGS OF SC15: THE INTERNATIONAL CONFERENCE FOR HIGH PERFORMANCE COMPUTING, NETWORKING, STORAGE AND ANALYSIS, DOI 10.1145/2807591.2807655
   Seo J, 2013, PROC VLDB ENDOW, V6, P1906, DOI 10.14778/2556549.2556572
   Simmhan Y, 2014, LECT NOTES COMPUT SC, V8632, P451, DOI 10.1007/978-3-319-09873-9_38
   Song S, 2018, PROC VLDB ENDOW, V12, P154, DOI 10.14778/3282495.3282501
   Tian Y, 2013, PROC VLDB ENDOW, V7, P193, DOI 10.14778/2732232.2732238
   VALIANT LG, 1990, COMMUN ACM, V33, P103, DOI 10.1145/79173.79181
   Verma S, 2017, PROC VLDB ENDOW, V10, P493, DOI 10.14778/3055540.3055543
   Wang G., 2013, CIDR, V13, P3
   Watts DJ, 1998, NATURE, V393, P440, DOI 10.1038/30918
   Xie CN, 2015, ACM SIGPLAN NOTICES, V50, P194, DOI [10.1145/2688500.2688508, 10.1145/2858788.2688508]
   Yan D., 2017, TRENDS DATABASES, V7, P1, DOI [10.1561/1900000056, DOI 10.1561/1900000056]
   Yan D, 2016, SIGMOD'16: PROCEEDINGS OF THE 2016 INTERNATIONAL CONFERENCE ON MANAGEMENT OF DATA, P2241, DOI 10.1145/2882903.2912566
   Yan D, 2014, PROC VLDB ENDOW, V7, P1821, DOI 10.14778/2733085.2733089
   Yan D, 2015, PROCEEDINGS OF THE 24TH INTERNATIONAL CONFERENCE ON WORLD WIDE WEB (WWW 2015), P1307, DOI 10.1145/2736277.2741096
   Yong Guo, 2014, 2014 IEEE International Parallel & Distributed Processing Symposium (IPDPS), P395, DOI 10.1109/IPDPS.2014.49
   Yuan PP, 2016, IEEE T PARALL DISTR, V27, P2998, DOI 10.1109/TPDS.2016.2518664
   Zhou JH, 2017, IEEE ACM INT SYMP, P780, DOI 10.1109/CCGRID.2017.63
   Zhuo YW, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P592, DOI 10.1145/3385412.3385961
NR 63
TC 2
Z9 2
U1 0
U2 6
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD JAN 20
PY 2022
VL 32
AR e4
DI 10.1017/S0956796821000277
PG 69
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA YJ5BZ
UT WOS:000744548500001
OA hybrid
DA 2024-07-18
ER

PT J
AU Kiselyov, O
AF Kiselyov, Oleg
TI Many more predecessors: A representation workout
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB From the outset, lambda calculus represented natural numbers through iterated application. The successor hence adds one more application, and the predecessor removes. In effect, the predecessor un-applies a term-which seemed impossible, even to Church. It took Kleene a rather oblique glance to sight a related representation of numbers, with an easier predecessor. Let us see what we can do if we look at this old problem with today's eyes. We discern the systematic ways to derive more predecessors-smaller, faster, and sharper-while keeping all teeth.
C1 [Kiselyov, Oleg] Tohoku Univ, Sendai, Miyagi, Japan.
C3 Tohoku University
RP Kiselyov, O (corresponding author), Tohoku Univ, Sendai, Miyagi, Japan.
EM oleg@okmij.org
OI Kiselyov, Oleg/0000-0002-2570-2186
FU JSPS KAKENHI [17K00091]; Grants-in-Aid for Scientific Research
   [17K00091] Funding Source: KAKEN
FX I thank Peter Hancock for inspiring discussions. The anonymous referees
   have pushed to polish the pearl harder and gave many helpful
   suggestions. This work was partially supported by JSPS KAKENHI Grant
   Number 17K00091.
CR Abadi M., 1993, Types for the Scott numerals
   [Anonymous], 1910, PRINCIPIA MATH
   [Anonymous], THESIS
   Barendregt H, 1997, B SYMB LOG, V3, P181, DOI 10.2307/421013
   Barendregt H., 1990, Formal Models and Semantics, P321, DOI DOI 10.1016/B978-0-444-88074-1.50012-3
   Barendregt H, 2000, INTRO LAMBDA CALCULU
   Barendregt H. P., 1981, LAMBDA CALCULUS ITS
   Bawden A., 1988, 946 MIT ART INT LAB
   BOHM C, 1985, THEOR COMPUT SCI, V39, P135, DOI 10.1016/0304-3975(85)90135-5
   Dybjer P, 2002, LECT NOTES COMPUT SC, V2395, P137
   Mogensen T. AE., 1992, Journal of Functional Programming, V2, P345, DOI 10.1017/S0956796800000423
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Statman R., 1979, Theoretical Computer Science, V9, P73, DOI 10.1016/0304-3975(79)90007-0
   Urbanek F. J., 1993, B EATCS, V50, P276
NR 14
TC 0
Z9 0
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD MAR 30
PY 2020
VL 30
AR e7
DI 10.1017/S095679682000009X
PG 13
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA LB9HH
UT WOS:000524939300001
DA 2024-07-18
ER

PT J
AU Hinze, R
   Martin, C
AF Hinze, Ralf
   Martin, Clare
TI FUNCTIONAL PEARLS <i>Parberry's pairwise sorting network revealed</i>
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
C1 [Hinze, Ralf] Tech Univ Kaiserslautern, Fachbereich Informat, D-67653 Kaiserslautern, Germany.
   [Martin, Clare] Oxford Brookes Univ, Dept Comp & Commun Technol, Oxford OX33 1HX, England.
C3 University of Kaiserslautern; Oxford Brookes University
RP Hinze, R (corresponding author), Tech Univ Kaiserslautern, Fachbereich Informat, D-67653 Kaiserslautern, Germany.
EM ralf-hinze@cs.uni-kl.de; cemartin@brookes.ac.uk
OI Martin, Clare/0000-0002-3147-3746; Hinze, Ralf/0000-0001-5678-0286
CR [Anonymous], 1998, The art of computer programming: Sorting and searching
   Bove A, 2006, LECT NOTES COMPUT SC, V3839, P82
   Codish M, 2010, LECT NOTES ARTIF INT, V6355, P154, DOI 10.1007/978-3-642-17511-4_10
   Hinze R., 2000, Journal of Functional Programming, V10, P305, DOI 10.1017/S0956796800003701
   Parberry I., 1992, Parallel Processing Letters, V2, P205, DOI 10.1142/S0129626492000337
   [No title captured]
NR 6
TC 0
Z9 0
U1 0
U2 5
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD NOV 13
PY 2018
VL 28
AR e21
DI 10.1017/S0956796818000199
PG 14
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA HA3AD
UT WOS:000450119600001
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Dagand, PE
AF Dagand, Pierre-Evariste
TI The essence of ornaments
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB Functional programmers from all horizons strive to use, and sometimes abuse, their favorite type system in order to capture the invariants of their programs. A widely used tool in that trade consists in defining finely indexed datatypes. Operationally, these types classify the programmer's data, following the ML tradition. Logically, these types enforce the program invariants in a novel manner. This new programming pattern, by which one programs over inductive definitions to account for some invariants, lead to the development of a theory of ornaments (McBride, 2011 Ornamental Algebras, Algebraic Ornaments. Unpublished). However, ornaments originate as a dependently-typed object and may thus appear rather daunting to a functional programmer of the non-dependent kind. This article aims at presenting ornaments from first-principles and, in particular, to declutter their presentation from syntactic considerations. To do so, we shall give a sufficiently abstract model of indexed datatypes by means of many-sorted signatures. In this process, we formalize our intuition that an indexed datatype is the combination of a data-structure and a data-logic. Over this abstraction of datatypes, we shall recast the definition of ornaments, effectively giving a model of ornaments. Benefiting both from the operational and abstract nature of many-sorted signatures, ornaments should appear applicable and, one hopes, of interest beyond the type-theoretic circles, case in point being languages with generalized abstract datatypes or refinement types.
C1 [Dagand, Pierre-Evariste] UPMC Univ Paris 06, Sorbonne Univ, CNRS, Inria,LIP6 UMR 7606, Paris, France.
C3 Sorbonne Universite; Inria; Centre National de la Recherche Scientifique
   (CNRS)
RP Dagand, PE (corresponding author), UPMC Univ Paris 06, Sorbonne Univ, CNRS, Inria,LIP6 UMR 7606, Paris, France.
EM pierre-evariste.dagand@lip6.fr
FU Emergence(s) program of the City of Paris
FX I am very grateful to the Journal of Functional Programming reviewers,
   whose comments helped significantly improve this article. I also wish to
   thank Gabor Greif, who provided feedback on an early draft. This work
   was partially supported by the Emergence(s) program of the City of
   Paris.
CR Abbott M, 2005, FUND INFORM, V65, P1
   Abbott M. G., 2003, THESIS
   ADELSONVELSKII GM, 1962, DOKL AKAD NAUK SSSR+, V146, P263
   Altenkirch T, 2009, IEEE S LOG, P277, DOI 10.1109/LICS.2009.33
   [Anonymous], 2007, PRACTICAL PROGRAMMIN
   [Anonymous], 1998, Purely Functional Data Structures
   Atkey R, 2012, LOG METH COMPUT SCI, V8, DOI [10.2168/LMCS-8(2:09)2012, 10.2168/LMCS-8 (2:09)2012]
   Brady E, 2013, J FUNCT PROGRAM, V23, P552, DOI 10.1017/S095679681300018X
   Cheney James, 2003, Technical Report
   Chlipala Adam., 2017, Certified Programming with Dependent Types
   Constable R L, 1986, Implementing mathematics with the Nuprl proof development system
   Coq Development Team, 2015, Technical report
   Dagand PÉ, 2013, IEEE S LOG, P530, DOI 10.1109/LICS.2013.60
   Dagand PE, 2012, ACM SIGPLAN NOTICES, V47, P103, DOI 10.1145/2398856.2364544
   Dybjer P, 1997, THEOR COMPUT SCI, V176, P329, DOI 10.1016/S0304-3975(96)00145-4
   Dybjer P., 1994, Formal Aspects of Computing, V6, P440, DOI 10.1007/BF01211308
   FREEMAN T, 1991, SIGPLAN NOTICES, V26, P268, DOI 10.1145/113446.113468
   Fumex C., 2012, THESIS
   Gambino N, 2004, ANN NY ACAD SCI, V3085, P210
   Gambino N, 2013, MATH PROC CAMBRIDGE, V154, P153, DOI 10.1017/S0305004112000394
   Goguen H., 1993, Logical Environments, P198
   Goguen J. A., 1975, P C COMP GRAPH PATT
   Guibas Leo J., 1978, P 19 ANN S FDN COMP, P8, DOI DOI 10.1109/SFCS.1978.3
   Hamana M, 2011, WGP 11: PROCEEDINGS OF THE 2011 ACM SIGPLAN WORKSHOP ON GENERIC PROGRAMMING, P59
   Hinze R., 1998, TECHNICAL REPORT
   Huet G., 1997, Journal of Functional Programming, V7, P549, DOI 10.1017/S0956796897002864
   KNUTH D. E., 1981, Addison-Wesley Series in Computer Science and Information Processing, V2
   Ko H.-J., 2014, THESIS
   Ko H.-S., 2013, P ACM SIGPLAN WORKSH, P37, DOI [10.1145/2502409.2502413, DOI 10.1145/2502409.2502413]
   Ko HS, 2011, WGP 11: PROCEEDINGS OF THE 2011 ACM SIGPLAN WORKSHOP ON GENERIC PROGRAMMING, P13
   Martin-Lof P., 1984, Intuitionistic type theory
   McBride Conor, 2011, ORNAMENTAL ALG UNPUB
   Morris P, 2007, THESIS
   Morris P, 2009, INT J FOUND COMPUT S, V20, P83, DOI 10.1142/S0129054109006462
   Petersson K., 1989, Category Theory and Computer Science Proceedings, P128, DOI 10.1007/BFb0018349
   Pottier F, 2006, ACM SIGPLAN NOTICES, V41, P232, DOI 10.1145/1111320.1111058
   Schrijvers Tom., 2009, Proceedings of the 14th ACM SIGPLAN international conference on functional programming. ICFP '09, P341
   Seely R. A. G., 1983, MATH P CAMB PHIL SOC, V95, P33
   Sheard T, 2008, LECT NOTES COMPUT SC, V5161, P158, DOI 10.1007/978-3-540-88059-2_5
   SMYTH MB, 1982, SIAM J COMPUT, V11, P761, DOI 10.1137/0211062
   Swamy N., 2011, P INT C FUNCT PROGR, P266, DOI DOI 10.1145/2034773.2034811
   Williams Thomas., 2014, Proceedings of the 10th ACM SIGPLAN workshop on Generic programming, P15, DOI [10.1145/2633628.2633631, DOI 10.1145/2633628.2633631]
NR 42
TC 6
Z9 7
U1 0
U2 2
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PY 2017
VL 27
BP 1
EP 27
DI 10.1017/S0956796816000356
PG 27
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA EM7ZZ
UT WOS:000395532200001
DA 2024-07-18
ER

PT J
AU Uustalu, T
   Veltri, N
AF Uustalu, Tarmo
   Veltri, Niccolo
TI Finiteness and rational sequences, constructively
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID TREES
AB Rational sequences are possibly infinite sequences with a finite number of distinct suffixes. In this paper, we present different implementations of rational sequences in Martin-Lof type theory. First, we literally translate the above definition of rational sequence into the language of type theory, i. e., we construct predicates on possibly infinite sequences expressing the finiteness of the set of suffixes. In type theory, there exist several inequivalent notions of finiteness. We consider two of them, listability and Noetherianness, and show that in the implementation of rational sequences the two notions are interchangeable. Then we introduce the type of lists with backpointers, which is an inductive implementation of rational sequences. Lists with backpointers can be unwound into rational sequences, and rational sequences can be truncated into lists with backpointers. As an example, we see how to convert the fractional representation of a rational number into its decimal representation and vice versa.
C1 [Uustalu, Tarmo; Veltri, Niccolo] Tallinn Univ Technol, Inst Cybernet, Akad Tee 21, EE-12618 Tallinn, Estonia.
C3 Tallinn University of Technology
RP Uustalu, T (corresponding author), Tallinn Univ Technol, Inst Cybernet, Akad Tee 21, EE-12618 Tallinn, Estonia.
EM tarmo@cs.ioc.ee; niccolo@cs.ioc.ee
RI Veltri, Niccolò/AAK-1292-2020; Uustalu, Tarmo/I-1242-2015
OI Veltri, Niccolò/0000-0002-7230-3436; Uustalu, Tarmo/0000-0002-1297-0579
FU ERDF; Estonian Ministry of Education and Research institutional research
   grant [IUT33-13]; Estonian Science Foundation grant [9475]
FX This work was supported by the ERDF funded project Coinduction, the
   Estonian Ministry of Education and Research institutional research grant
   no. IUT33-13 and the Estonian Science Foundation grant no. 9475.
CR Adamek J., 2003, Mathematical Structures in Computer Science, V13, P259, DOI 10.1017/S0960129502003924
   Ancona D, 2013, COMPUT LANG SYST STR, V39, P142, DOI 10.1016/j.cl.2013.05.001
   Bezem M, 2012, LOG METH COMPUT SCI, V8, DOI 10.2168/LMCS-8(4:4)2012
   BLOOM SL, 1976, J COMPUT SYST SCI, V12, P305, DOI 10.1016/S0022-0000(76)80003-7
   Coquand T., 2010, SERVICIO PUBLICACION, P217
   COURCELLE B, 1983, THEOR COMPUT SCI, V25, P95, DOI 10.1016/0304-3975(83)90059-2
   Elgot C. C., 1975, STUDIES LOGIC, V80, P175
   ELGOT CC, 1978, J COMPUT SYST SCI, V16, P362, DOI 10.1016/0022-0000(78)90024-7
   Firsov D, 2016, ELECTRON P THEOR COM, P76, DOI 10.4204/EPTCS.207.4
   Firsov Denis., 2015, Proceedings of the 11th ACM SIGPLAN Workshop on Generic Programming, WGP@ICFP 2015, Vancouver, BC, Canada, August 30, 2015, P33, DOI [DOI 10.1145/2808098.2808102, 10.1145/2808098.2808102]
   Ghani N., 2006, Proc. of 7th Symp. on Trends in Functional Programming, P173
   GINALI S, 1979, J COMPUT SYST SCI, V18, P228, DOI 10.1016/0022-0000(79)90032-1
   Huet Gerard P., 1997, Journal of Functional Programming, V7, P549
   Jeannin JB, 2013, LECT NOTES COMPUT SC, V7792, P61, DOI 10.1007/978-3-642-37036-6_4
   Norell U, 2009, LECT NOTES COMPUT SC, V5832, P230, DOI 10.1007/978-3-642-04652-0_5
   Parmann E., 2014, LEIBNIZ INT P INFORM, V39, P187
   Spadotti R., 2016, THESIS
   Spadotti R., 2015, LECT NOTES COMPUT SC, V9236, P405
   Turbak FranklynA., 2001, PPDP, P137
NR 19
TC 1
Z9 1
U1 0
U2 3
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PY 2017
VL 27
BP 1
EP 20
DI 10.1017/S0956796817000041
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA ER1BW
UT WOS:000398525100001
DA 2024-07-18
ER

PT J
AU Atkey, R
   Johann, P
AF Atkey, Robert
   Johann, Patricia
TI Interleaving data and effects
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB The study of programming with and reasoning about inductive datatypes such as lists and trees has benefited from the simple categorical principle of initial algebras. In initial algebra semantics, each inductive datatype is represented by an initial f-algebra for an appropriate functor f. The initial algebra principle then supports the straightforward derivation of definitional principles and proof principles for these datatypes. This technique has been expanded to a whole methodology of structured functional programming, often called origami programming.
   In this article we show how to extend initial algebra semantics from pure inductive datatypes to inductive datatypes interleaved with computational effects. Inductive datatypes interleaved with effects arise naturally in many computational settings. For example, incrementally reading characters from a file generates a list of characters interleaved with input/output actions, and lazily constructed infinite values can be represented by pure data interleaved with the possibility of non-terminating computation. Straightforward application of initial algebra techniques to effectful datatypes leads either to unsound conclusions if we ignore the possibility of effects, or to unnecessarily complicated reasoning because the pure and effectful concerns must be considered simultaneously. We show how pure and effectful concerns can be separated using the abstraction of initial f-and-m-algebras, where the functor f describes the pure part of a datatype and the monad m describes the interleaved effects. Because initial f-and-m-algebras are the analogue for the effectful setting of initial f-algebras, they support the extension of the standard definitional and proof principles to the effectful setting.
   Initial f-and-m-algebras are originally due to Filinski and Stovring, who studied them in the category Cpo. They were subsequently generalised to arbitrary categories by Atkey, Ghani, Jacobs, and Johann in a FoSSaCS 2012 paper. In this article we aim to introduce the general concept of initial f-and-m-algebras to a general functional programming audience.
C1 [Atkey, Robert] Univ Strathclyde, Glasgow, Lanark, Scotland.
   [Johann, Patricia] Appalachian State Univ, Boone, NC 28608 USA.
C3 University of Strathclyde; University of North Carolina; Appalachian
   State University
RP Atkey, R (corresponding author), Univ Strathclyde, Glasgow, Lanark, Scotland.
EM robert.atkey@strath.ac.uk; johannp@appstate.edu
RI Atkey, Robert/I-3074-2016
OI Atkey, Robert/0000-0002-4414-5047
CR Adámek J, 2012, IEEE S LOG, P45, DOI 10.1109/LICS.2012.16
   [Anonymous], 1978, CURRENT TRENDS PROGR
   [Anonymous], 1998, Categories for the working mathematician
   Atkey R, 2012, LECT NOTES COMPUT SC, V7213, P42, DOI 10.1007/978-3-642-28729-9_3
   Barr M., 1990, Category Theory for Computing Science
   Benton Nick, 2000, LECT NOTES COMPUT SC, V2395, P42
   Bird Richard, 1997, Algebra of Programming
   CROLE RL, 1992, INFORM COMPUT, V98, P171, DOI 10.1016/0890-5401(92)90018-B
   Danielsson NA, 2006, ACM SIGPLAN NOTICES, V41, P206, DOI 10.1145/1111320.1111056
   Filinski A., 1999, Conference Record of POPL '99. 26th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P175, DOI 10.1145/292540.292557
   Filinski A, 2007, ICFP'07 PROCEEDINGS OF THE 2007 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P97
   Ghani N, 2004, RAIRO-THEOR INF APPL, V38, P321, DOI 10.1051/ita:2004016
   Ghani N., 2009, P TRENDS FUNCT PROGR, P113
   Gibbons J., 2003, FUN PROGRAMMING
   Hyland M, 2006, THEOR COMPUT SCI, V357, P70, DOI 10.1016/j.tcs.2006.03.013
   Jacobs B., 2012, ADV TOPICS BISIMULAT, P38, DOI [10.1017/CBO9780511792588.003, DOI 10.1017/CBO9780511792588.003]
   Jurgensen C., 2002, USING MONADS FUSE RE
   Kiselyov O, 2012, LECT NOTES COMPUT SC, V7294, P166
   LAMBEK J, 1968, MATH Z, V103, P151, DOI 10.1007/BF01110627
   LEHMANN DJ, 1981, MATH SYST THEORY, V14, P97, DOI 10.1007/BF01752392
   Lüth C, 2002, ACM SIGPLAN NOTICES, V37, P133, DOI 10.1145/583852.581492
   Meijer E., 1995, Advanced Functional Programming. First International Spring School on Advanced Functional Programming Techniques. Tutorial Text, P228
   MOGGI E, 1991, INFORM COMPUT, V93, P55, DOI 10.1016/0890-5401(91)90052-4
   Mulry P. S., 1995, MATH FDN PROGRAMMING, P304
   Pardo A, 2004, LECT NOTES COMPUT SC, V3622, P171
   Peyton Jones S. L., 1993, Conference Record of the Twentieth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P71, DOI 10.1145/158511.158524
   Piróg M, 2012, ELECTRON P THEOR COM, P90, DOI 10.4204/EPTCS.76.8
   Pitts AM, 1996, INFORM COMPUT, V127, P66, DOI 10.1006/inco.1996.0052
   Sheard T, 2004, J FUNCT PROGRAM, V14, P547, DOI 10.1017/S095679680300488X
   Sheard T., 1993, TECHNICAL REPORT
   Sheard T., 1993, ALGEBRAIC METHODS SO
   Swierstra W, 2007, HASKELL'07: PROCEEDINGS OF THE ACM SIGPLAN 2007 HASKELL WORKSHOP, P25, DOI 10.1145/1291201.1291206
   Swierstra W, 2008, J FUNCT PROGRAM, V18, P423, DOI 10.1017/S0956796808006758
   Voigtländer J, 2008, LECT NOTES COMPUT SC, V5133, P388
   Wadler P., 1998, P ACM SIGPLAN WORKSH
   [No title captured]
NR 36
TC 6
Z9 6
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PY 2015
VL 25
AR e20
DI 10.1017/S0956796815000209
PG 44
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DB1AM
UT WOS:000368240300010
OA Green Submitted, Bronze, Green Accepted
DA 2024-07-18
ER

PT J
AU Rossberg, A
   Russo, C
   Dreyer, D
AF Rossberg, Andreas
   Russo, Claudio
   Dreyer, Derek
TI F-ing modules
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID ABSTRACT TYPES; SYSTEM
AB ML modules are a powerful language mechanism for decomposing programs into reusable components. Unfortunately, they also have a reputation for being "complex" and requiring fancy type theory that is mostly opaque to non-experts. While this reputation is certainly understandable, given the many non-standard methodologies that have been developed in the process of studying modules, we aim here to demonstrate that it is undeserved. To do so, we present a novel formalization of ML modules, which defines their semantics directly by a compositional "elaboration" translation into plain System F omega (the higher-order polymorphic lambda-calculus). To demonstrate the scalability of our " F-ing" semantics, we use it to define a representative, higher-order ML-style module language, encompassing all the major features of existing ML module dialects (except for recursive modules). We thereby show that ML modules are merely a particular mode of use of System F omega.
   To streamline the exposition, we present the semantics of our module language in stages. We begin by defining a subset of the language supporting a Standard ML-like language with second-class modules and generative functors. We then extend this sublanguage with the ability to package modules as first-class values (a very simple extension, as it turns out) and OCaml-style applicative functors (somewhat harder). Unlike previous work combining both generative and applicative functors, we do not require two distinct forms of functor or signature sealing. Instead, whether a functor is applicative or not depends only on the computational purity of its body. In fact, we argue that applicative/generative is rather incidental terminology for pure versus impure functors. This approach results in a semantics that we feel is simpler and more natural than previous accounts, and moreover prohibits breaches of abstraction safety that were possible under them.
C1 [Rossberg, Andreas] Google, D-80331 Munich, Germany.
   [Russo, Claudio] Microsoft Res, Cambridge CB1 2FB, England.
   [Dreyer, Derek] Max Planck Inst Software Syst MPI SWS, D-66123 Saarbrucken, Germany.
C3 Google Incorporated; Microsoft; Max Planck Society
RP Rossberg, A (corresponding author), Google, Dienerstr 12, D-80331 Munich, Germany.
EM rossberg@mpi-sws.org; crusso@microsoft.com; dreyer@mpi-sws.org
RI Russo, Claudio/AAE-4649-2022
OI Russo, Claudio/0000-0002-8196-4375
CR Ahmed A., 2009, ACM SIGPLAN SIGACT S, P350
   [Anonymous], 2007, COQ PROOF ASS REF MA
   [Anonymous], THESIS U EDINBURGH
   [Anonymous], 1997, The Definition of Standard ML
   Atkey Robert, 2012, COMPUTER SCI LOGIC C, V16, P46
   Aydemir B., 2009, TECHNICAL REPORT
   Aydemir B, 2008, ACM SIGPLAN NOTICES, V43, P3, DOI 10.1145/1328897.1328443
   Biswas S. K., 1995, Conference Record of POPL'95: 22nd ACM SIGPLAN-SIGACT Symposium Principles of Programming Languages, P154, DOI 10.1145/199448.199478
   CARDELLI L, 1990, PROGRAMMING CONCEPTS AND METHODS, P479
   Dreyer D, 2003, ACM SIGPLAN NOTICES, V38, P236, DOI 10.1145/640128.604151
   Dreyer D., 2005, THESIS CARNEGIE MELL
   DREYER D, 2002, MOSCOW MLS HIGHER OR
   Dreyer D, 2007, ACM SIGPLAN NOTICES, V42, P289, DOI 10.1145/1291220.1291196
   Dreyer D, 2007, J FUNCT PROGRAM, V17, P433, DOI 10.1017/S0956796807006429
   Dreyer D, 2007, LECT NOTES COMPUT SC, V4421, P441
   Elsman Martin, 1999, THESIS U COPENHAGEN
   GEUVERS H, 1992, IEEE S LOG COMP SCI, P453
   Ghelli G, 1998, THEOR COMPUT SCI, V193, P75, DOI 10.1016/S0304-3975(96)00300-3
   GOLDFARB WD, 1981, THEOR COMPUT SCI, V13, P225, DOI 10.1016/0304-3975(81)90040-2
   HARPER R, 1990, CONFERENCE RECORD OF THE SEVENTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P341, DOI 10.1145/96709.96744
   Harper R, 2000, FOUNDAT COMPUT, P341
   HARPER R, 1993, ACM T PROGR LANG SYS, V15, P211, DOI 10.1145/169701.169696
   Harper R, 2012, PROGRAMMING STANDARD
   Harper R., 1994, PRINCIPLES PROGRAMMI, P123, DOI [DOI 10.1145/174675.176927, 10.1145/174675.176927]
   Harper R., 2005, ADV TOPICS TYPES PRO
   Jones M. P., 1996, Conference Record of POPL '96: The 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P68, DOI 10.1145/237721.237731
   JONES SLP, 2003, COMMUNICATION
   Kuan G, 2009, LECT NOTES COMPUT SC, V6041, P218
   Launchbury J., 1995, LISP and Symbolic Computation, V8, P293, DOI 10.1007/BF01018827
   Lee DK, 2007, ACM SIGPLAN NOTICES, V42, P173, DOI 10.1145/1190215.1190245
   Leifer JJ, 2003, ACM SIGPLAN NOTICES, V38, P87, DOI 10.1145/944746.944714
   Leroy X., 1994, Conference Record of POPL '94: 21st ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P109, DOI 10.1145/174675.176926
   Leroy X., 1995, Conference Record of POPL'95: 22nd ACM SIGPLAN-SIGACT Symposium Principles of Programming Languages, P142, DOI 10.1145/199448.199476
   Leroy X., 2000, Journal of Functional Programming, V10, P269, DOI 10.1017/S0956796800003683
   Leroy X., 1996, J FUNCTIONAL PROGRAM, V6, P667
   Lillibridge Mark., 1997, THESIS CARNEGIE MELL
   MacQueen D. B., 1994, Programming Languages and Systems - ESOP '94. 5th European Symposium on Programming. Proceedings, P409
   MacQueen DavidB., 1986, P 13 ACM SIGPLAN S P, P277, DOI DOI 10.1145/512644.512670
   Milner R., 1990, The Definition of Standard ML
   MITCHELL JC, 1988, ACM T PROGR LANG SYS, V10, P470, DOI 10.1145/44501.45065
   Montagu B, 2009, ACM SIGPLAN NOTICES, V44, P354, DOI 10.1145/1594834.1480926
   Paulson L, 1996, ML for the Working Programmer
   Romanenko S., 2000, MOSCOW ML VERSION 2
   Rossberg A., 2004, TRENDS FUNCTIONAL PR, P79
   Rossberg A, 2013, ACM T PROGR LANG SYS, V35, DOI 10.1145/2450136.2450137
   Rossberg A, 2010, TLDI '10: PROCEEDINGS OF THE 2010 ACM SIGPLAN WORKSHOP ON TYPES IN LANGUAGE DESIGN AND IMPLEMENTATION, P89
   Rossberg Andreas., 1999, Undecidability of ocaml type checking
   Russo C. V., 2000, Nordic Journal of Computing, V7, P348
   Russo C. V., 2003, ELECT NOTES THEORETI, V60, P3
   Russo CV, 1999, LECT NOTES COMPUT SC, V1702, P80
   Sewell P, 2007, J FUNCT PROGRAM, V17, P547, DOI 10.1017/S0956796807006442
   Shan C.-C., 2004, TECHNICAL REPORT
   Shields Marks B., 2002, INT WORKSH FDN OBJ O, P28
   SML/NJ Development Team, 1993, STAND ML NEW JERS US
   Stone CA, 2006, ACM T COMPUT LOG, V7, P676, DOI 10.1145/1183278.1183281
   Sulzmann M, 2007, PROCEEDINGS OF THE TLDI 2007: 2007 ACM SIGPLAN INTERNATIONAL WORKSHOP ON TYPES IN LANGUAGES DESIGN AND IMPLEMENTATION, P53, DOI 10.1145/1190315.1190324
   Torgersen M., 2005, INT WORKSH FDN OBJ O, P1
   Wright A. K., 1995, LISP and Symbolic Computation, V8, P343, DOI 10.1007/BF01018828
   Zhong S, 1999, ACM SIGPLAN NOTICES, V34, P220, DOI 10.1145/317765.317801
NR 59
TC 25
Z9 26
U1 0
U2 1
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD SEP
PY 2014
VL 24
IS 5
BP 529
EP 607
DI 10.1017/S0956796814000264
PG 79
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CA1CC
UT WOS:000348649600001
OA Bronze
DA 2024-07-18
ER

PT J
AU Bernardy, JP
   Jansson, P
   Paterson, R
AF Bernardy, Jean-Philippe
   Jansson, Patrik
   Paterson, Ross
TI Proofs for free Parametricity for dependent types
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB Reynolds' abstraction theorem (Reynolds, J. C. (1983) Types, abstraction and parametric polymorphism, Inf. Process. 83(1), 513-523) shows how a typing judgement in System F can be translated into a relational statement (in second-order predicate logic) about inhabitants of the type. We obtain a similar result for pure type systems (PTSs): for any PTS used as a programming language, there is a PTS that can be used as a logic for parametricity. Types in the source PTS are translated to relations (expressed as types) in the target. Similarly, values of a given type are translated to proofs that the values satisfy the relational interpretation. We extend the result to inductive families. We also show that the assumption that every term satisfies the parametricity condition generated by its type is consistent with the generated logic.
C1 [Bernardy, Jean-Philippe; Jansson, Patrik] Chalmers Univ Technol, Gothenburg, Sweden.
   [Bernardy, Jean-Philippe; Jansson, Patrik] Univ Gothenburg, Gothenburg, Sweden.
   [Paterson, Ross] City Univ London, London EC1V 0HB, England.
C3 Chalmers University of Technology; University of Gothenburg; City
   University London
RP Bernardy, JP (corresponding author), Chalmers Univ Technol, Gothenburg, Sweden.
EM bernardy@chalmers.se; patrikj@chalmers.se; ross@soi.city.ac.uk
RI Jansson, Patrik/B-1987-2016
OI Jansson, Patrik/0000-0003-3078-1437
CR Abadi M., 1993, Conference Record of the Twentieth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P157, DOI 10.1145/158511.158622
   Altenkirch T, 2009, IEEE S LOG, P277, DOI 10.1109/LICS.2009.33
   [Anonymous], 2022, COQ PROOF ASSISTANT
   [Anonymous], 1992, Handbook of Logic in Computer Science
   Bernardy J.-P., 2010, LIGHTWEIGHT FREE THE
   Bernardy JP, 2011, LECT NOTES COMPUT SC, V6604, P108, DOI 10.1007/978-3-642-19805-2_8
   Bernardy JP, 2010, ICFP 2010: PROCEEDINGS OF THE 2010 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P345
   BOHM C, 1985, THEOR COMPUT SCI, V39, P135, DOI 10.1016/0304-3975(85)90135-5
   Bohme S., 2007, THESIS TU DRESDEN NE
   Church A., 1940, J. Symbolic Logic, V5, P56, DOI [10.2307/2266170, DOI 10.2307/2266170]
   Coquand T., 1986, Proceedings of the Symposium on Logic in Computer Science (Cat. No.86CH2321-8), P227
   Coquand Thierry., 1992, P WORKSHOP TYPES PRO, P71
   Dybjer P., 1994, Formal Aspects of Computing, V6, P440, DOI 10.1007/BF01211308
   Gibbons J, 2009, WGP'09: PROCEEDINGS OF THE 2009 ACM SIGPLAN WORKSHOP ON GENERIC PROGRAMMING, P85
   Girard J.-Y., 1972, THESIS U PARIS PARIS
   Hofmann M., 1996, VENICE FESTSCHRIFT, P83
   Johann P, 2006, FUND INFORM, V69, P63
   MAIRSON H, 1991, LNCS, V523, P313
   McBride C, 2004, J FUNCT PROGRAM, V14, P69, DOI 10.1017/S0956796803004829
   Miquel A., 2001, THESIS U PARIS PARIS
   Monnier S, 2010, PLPV'10: PROCEEDINGS OF THE 2010 ACM SIGPLAN WORKSHOP ON PROGRAMMING LANGUAGES MEETS PROGRAM VERIFICATION, P1, DOI 10.1145/1707790.1707792
   Neis Georg, 2009, P 14 ACM SIGPLAN C F, P135
   Norell U., 2007, THESIS CHALMERS TEKN
   Oury N, 2008, ICFP'08: PROCEEDINGS OF THE 2008 SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P39
   Paulin-Mohring C., 1993, Typed Lambda Calculi and Applications, V664, DOI [10.1007/BFb0037116., DOI 10.1007/BFB0037116]
   PLOTKIN GD, 1993, LECTURE NOTES COMPUT, V664, P361
   Pouillard N., 2011, P 16 ACM SIGPLAN INT, P320
   Reynolds J. C., 1983, Information Processing 83. Proceedings of the IFIP 9th World Computer Congress, P513
   VOIGTLANDER J, 2009, P 14 ACM SIGPLAN INT, P173
   Vytiniotis D, 2010, J FUNCT PROGRAM, V20, P175, DOI 10.1017/S0956796810000079
   WADLER P, 1989, CONFERENCE RECORD OF THE SIXTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P60, DOI 10.1145/75277.75283
   Wadler P., 1989, FPCA 89 P 4 INT C FU, P347
   Wadler P, 2007, THEOR COMPUT SCI, V375, P201, DOI 10.1016/j.tcs.2006.12.042
NR 33
TC 50
Z9 52
U1 0
U2 4
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD MAR
PY 2012
VL 22
BP 107
EP 152
DI 10.1017/S0956796812000056
PN 2
PG 46
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 942BE
UT WOS:000304013700001
OA Green Accepted, Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Bernardy, JP
   Jansson, P
   Zalewski, M
   Schupp, S
AF Bernardy, Jean-Philippe
   Jansson, Patrik
   Zalewski, Marcin
   Schupp, Sibylle
TI Generic programming with C plus plus concepts and Haskell type classes-a
   comparison
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB Earlier studies have introduced a list of high-level evaluation criteria to assess how well a language supports generic programming. Languages that meet all criteria include Haskell because of its type classes and C++ with the concept feature. We refine these criteria into a taxonomy that captures commonalities and differences between type classes in Haskell and concepts in C++ and discuss which differences are incidental and which ones are due to other language features. The taxonomy allows for an improved understanding of language support for generic programming, and the comparison is useful for the ongoing discussions among language designers and users of both languages.
C1 [Bernardy, Jean-Philippe; Jansson, Patrik] Chalmers Univ Technol, Dept Comp Sci & Engn, SE-41296 Gothenburg, Sweden.
   [Bernardy, Jean-Philippe; Jansson, Patrik] Univ Gothenburg, SE-41296 Gothenburg, Sweden.
   [Zalewski, Marcin] Indiana Univ, Open Syst Lab, Bloomington, IN 47405 USA.
   [Schupp, Sibylle] Hamburg Univ Technol, Inst Software Syst, D-21073 Hamburg, Germany.
C3 Chalmers University of Technology; University of Gothenburg; Indiana
   University System; Indiana University Bloomington; Hamburg University of
   Technology
RP Bernardy, JP (corresponding author), Chalmers Univ Technol, Dept Comp Sci & Engn, SE-41296 Gothenburg, Sweden.
EM bernardy@chalmers.se; patrikj@chalmers.se; zalewski@osl.iu.edu;
   schupp@tuhh.de
RI Jansson, Patrik/B-1987-2016
OI Jansson, Patrik/0000-0003-3078-1437
CR [Anonymous], 2005, P GT2005 ASME TURB E
   [Anonymous], 2003, Haskell 98 language and libraries: the revised report
   Austern MatthewH., 1998, Generic programming and the STL: Using and extending the C++ Standard Template Library
   Becker P., 2009, STANDARD PR IN PRESS
   Bernardy JP, 2008, WGP'08: PROCEEDINGS OF THE 2008 ACM SIGPLAN WORKSHOP ON GENERIC PROGRAMMING, P37
   Boost, 2009, BOOST IN FREE PEER R
   BROWN W, 2008, N2581080091 ISOIEC
   CARDELLI L, 1985, COMPUT SURV, V17, P471, DOI 10.1145/6041.6042
   Chakravarty MMT, 2005, ACM SIGPLAN NOTICES, V40, P241, DOI 10.1145/1090189.1086397
   Dos Reis G, 2006, ACM SIGPLAN NOTICES, V41, P295, DOI 10.1145/1111320.1111064
   Garcia R, 2007, J FUNCT PROGRAM, V17, P145, DOI 10.1017/S0956796806006198
   Gibbons J, 2007, LECT NOTES COMPUT SC, V4719, P1
   GOTTSCHLING P, 2008, N2646080156 ISOIEC
   GREGOR D, 2006, P ACM SIGPLAN C OBJE
   GREGOR D, 2008, CONCEPTGCC PROTOTYPE
   Gregor D., 2009, WHAT HAPPENED FRANKF
   GREGOR D, 2008, N2576080086 ISOIEC
   GREGOR D, 2005, N1848050108 ISOIEC
   HINZE R, 2001, P 2000 ACM SIGPLAN H
   Jansson P., 1997, POPL 1997, P470
   Jazayeri M., 2000, Generic Programming: International Seminar, Dagstuhl Castle, Germany, 1998, Selected Papers, V1766
   Jones M. P., 1995, LISP and Symbolic Computation, V8, P229, DOI 10.1007/BF01019005
   Jones MP, 2000, LECT NOTES COMPUT SC, V1782, P230
   JONES MP, 1993, P C FUNCT PROGR LANG, P52
   Jones S.P., 1997, HASKELL WORKSHOP
   KAHL W, 2001, P 2001 ACM SIGPLAN H, P77
   Kapur D., 1992, Tecton: a framework for specifying and verifying generic system components
   KISELYOV O, 2007, P TRENDS FU IN PRESS
   KISELYOV O, 2008, CHOOSING TYPE CLASS
   LINCKE D, 2009, IFIP TC 2 WORK C DOM, P236
   MCBRIDE C, 2010, SHES FAKING IT
   MEACHAM J, 2006, CLASS ALIAS PROPOSAL
   MITCHELL N, 2007, YCS2007421 U YORK DE
   MUNKBY G, 2010, P 2006 ACM SIGPLAN W
   ORCHARD D, 2010, P 2010 INT S FUNCT L
   Rodriguez A., 2008, HASKELL 2008
   SCHRIJVERS T, 2008, P 13 ACM SIGPLAN INT
   Schrijvers T, 2009, J FUNCT PROGRAM, V19, P663, DOI 10.1017/S0956796809990086
   Sheard T, 2002, ACM SIGPLAN NOTICES, V37, P60, DOI 10.1145/636517.636528
   Sheard T, 2007, LECT NOTES COMPUT SC, V4719, P258
   SIEK JG, 2005, P ACM SIGPLAN 2005 C
   STEPANOV AA, 1995, HPL9511R1 HEWL PACK
   STROUSTRUP B, 2009, N2906090096 ISOIEC
   STROUSTRUP B, 2009, DR DOBBS         JUL
   SULZMANN M, 2007, P 2007 ACM SIGPLAN I, V2007, P53
   Sulzmann M, 2007, J FUNCT PROGRAM, V17, P83, DOI 10.1017/S0956796806006137
   Vandevoorde David, 2002, C++ Templates: The Complete Guide, Portable Documents
   WADLER P, 1989, P 16 ACM SIGPLAN SIG
   WILLCOCK J, 2004, CONCEPTS LINGUISTIC
   ZALEWSKI M, 2007, MULTIPARADIGM PROGRA
NR 50
TC 4
Z9 6
U1 0
U2 4
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD MAY-JUL
PY 2010
VL 20
SI SI
BP 271
EP 302
DI 10.1017/S095679681000016X
PN 3-4
PG 32
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 711BF
UT WOS:000286560000003
OA Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Spivey, JM
AF Spivey, J. Michael
TI Algebras for combinatorial search
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article; Proceedings Paper
CT Workshop on Mathematically Structured Functional Programming
CY JUL 02, 2006
CL Kuressaare, ESTONIA
AB Combinatorial search strategies including depth-first, breadth-first and depth-bounded search are shown to be different implementations of a common algebraic specification that emphasizes the compositionality of the strategies. This specification is placed in a categorical setting that combines algebraic specifications and monads.
C1 Univ Oxford, Comp Lab, Oxford OX1 3QD, England.
C3 University of Oxford
RP Spivey, JM (corresponding author), Univ Oxford, Comp Lab, Wolfson Bldg,Parks Rd, Oxford OX1 3QD, England.
EM mike@comlab.ox.ac.uk
CR Bird R. S., 1987, Logic of Programming and Calculi of Discrete Design. International Summer School. Proceedings of the NATO Advanced Study Institute, P5
   Gibbons J., INT C FUNCTIONAL PRO, P273, DOI 10.1145/289423.289455
   Hinze R., 2001, International Journal of Foundations of Computer Science, V12, P125, DOI 10.1142/S0129054101000436
   KISELYOV O, 2005, P INT C FUNCT PROGR, P192
   Mac Lane, 1971, CATEGORIES WORKING M
   MEERTENS L, 1986, CWI MONOGRAPHS, V1, P289
   Russell S., 2016, Artificial intelligence a modern approach
   SPIVEY JM, 2003, CORNERSTONES COMPUTI, P177
   SPIVEY JM, 2000, J FUNCTIONAL PROGRAM, V10, P397
   Sutherland WA., 1975, INTRO METRIC TOPOLOG
   WAND M, 2001, P 9 INT C FUNCT PROG, P54
NR 11
TC 8
Z9 8
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD MAY-JUL
PY 2009
VL 19
BP 469
EP 487
DI 10.1017/S0956796809007321
PN 3-4
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 461BW
UT WOS:000267240300009
OA Bronze
DA 2024-07-18
ER

PT J
AU Minsky, Y
   Weeks, S
AF Minsky, Yaron
   Weeks, Stephen
TI Caml trading - experiences with functional programming on Wall Street
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB Jane Street Capital is a successful proprietary trading company that uses OCaml as its primary development language. We have over twenty OCaml programmers and hundreds of thousands of lines of OCaml code. We use OCaml for a wide range of tasks: critical trading systems, quantitative research, systems software, and system administration. We value OCaml because it allows us to rapidly produce readable, correct, efficient code to solve complex problems, and to change that code quickly to adapt to a changing world. We believe that using OCaml gives us a significant advantage over competitors that use languages like VB, Pert, C++, C#, or Java. It also makes finding and hiring high-quality software developers easier than with mainstream languages. We have invested deeply in OCaml and intend to use OCaml and grow our team of functional programmers for the foreseeable future.
C1 [Minsky, Yaron; Weeks, Stephen] Jane St Capital, New York, NY 10004 USA.
RP Minsky, Y (corresponding author), Jane St Capital, New York Plaza, New York, NY 10004 USA.
EM yminsky@janestcapital.com; sweeks@janestcapital.com
CR BLANQUI F, 2007, 16 EUR S PROGR ESOP, P95
   CANNASSE N, 2007, OCAML EXTLIB EXTENDE
   *CSFB, 2007, CRED SUISS 1 BOST
   de Rauglaudre Daniel, 2003, CAMLP4 TUTORIAL
   Fluet M, 2006, J FUNCT PROGRAM, V16, P751, DOI 10.1017/S0956796806006046
   Garrigue Jacques, 1998, 1998 ACM SIGPLAN WOR
   LEROY X, 2007, OBJECTIVE CAML SYSTE
   LIEBERMAN H, 1983, COMMUN ACM, V26, P419, DOI 10.1145/358141.358147
   PEYTON J, 2002, REVISED REPORT
   Remy D, 1998, THEOR PRACT OBJ SYST, V4, P27, DOI 10.1002/(SICI)1096-9942(1998)4:1<27::AID-TAPO3>3.0.CO;2-4
   STOLPMANN G, 2007, GODI SOURCE CODE OBJ
   STOLPMANN G, 2003, FINDLIB USERS GUIDE
   YALLOP J, 2007, 2007 ACM SIGPLAN WOR
NR 13
TC 5
Z9 5
U1 0
U2 1
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD JUL
PY 2008
VL 18
BP 553
EP 564
DI 10.1017/S095679680800676X
PN 4
PG 12
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 330BW
UT WOS:000257915300004
OA Bronze
DA 2024-07-18
ER

PT J
AU Scaife, N
   Horiguchi, S
   Michaelson, G
   Bristow, P
AF Scaife, N
   Horiguchi, S
   Michaelson, G
   Bristow, P
TI A parallel SML compiler based on algorithmic skeletons
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID PROGRAMS
AB Algorithmic skeletons are abstractions from common patterns of parallel activity which offer a high degree of reusability for developers of parallel algorithms. Their close association with higher order functions (HOFs) makes functional languages, with their strong transformational properties, excellent vehicles for skeleton-based parallel program development. However, using HOFs in this way raises substantial problems of identification of useful HOFs within a given application and of resource allocation on target architectures. We present the design and implementation of a parallelising compiler for Standard ML which exploits parallelism in the familiar map and fold HOFs through skeletons for processor farms and processor trees, respectively. The compiler extracts parallelism automatically and is target architecture independant. HOF execution within a functional language can be nested in the sense that one HOF may be passed and evaluated during the execution of another HOF. We are able to exploit this by nesting our parallel skeletons in a processor topology which matches the structure of the Standard ML source. However, where HOF arguments result from partially applied functions, free variable bindings must be identified and communicated through the corresponding skeleton hierarchy to where those arguments are actually applied. We describe the analysis leading from input Standard ML through HOF instantiation and backend compilation to an executable parallel program. We also present an overview of the runtime system and the execution model. Finally, we give parallel performance figures for several example programs, of varying computational loads, on the Linux-based Beowulf, IBM SP/2, Fujitsu AP3000 and Sun StarCat 15000 MIMD parallel machines. These demonstrate good cross-platform consistency of parallel code behaviour.
C1 Japan Adv Inst Sci & Technol, Sch Informat Sci, Tatsunokuchi, Ishikawa 9231292, Japan.
   Heriot Watt Univ, Dept Comp & Elect Engn, Edinburgh EH14 4AS, Midlothian, Scotland.
C3 Japan Advanced Institute of Science & Technology (JAIST); Heriot Watt
   University
RP Scaife, N (corresponding author), Japan Adv Inst Sci & Technol, Sch Informat Sci, 1-1-Asahidai, Tatsunokuchi, Ishikawa 9231292, Japan.
EM norman@jaist.ac.jp; hori@jaist.ac.jp; greg@macs.hw.ac.uk;
   paul@macs.hw.ac.uk
CR [Anonymous], COMPUTER SIMULATION
   [Anonymous], 1994, International Journal on Supercomputer Applications, V8
   [Anonymous], ACM ANN C
   BACCI B, 1995, CONCURRENCY-PRACT EX, V7, P225, DOI 10.1002/cpe.4330070305
   BACKUS J, 1978, COMMUN ACM, V21, P613, DOI 10.1145/359576.359579
   BAILEY P, 1993, SIGPLAN NOTICES, V28, P56, DOI 10.1145/156668.156688
   Beazley D. M., 1995, Annual Reviews of Computational Physics III, V3, P119
   Bell JM, 1997, ACM SIGPLAN NOTICES, V32, P25, DOI 10.1145/258949.258953
   Bird Richard, 1997, Algebra of Programming
   BIRKEDAL L, 1993, 9314 U COP DEP COMP
   BRATVOLD T, 1994, THESIS HERIOT WATT U
   CHAILLOUX E, 2000, DEV APPL OBJECTIVE C
   CHIN WN, 1996, LISP SYMBOLIC COMPUT, V9, P287
   CHOI J, 1996, LECT NOTES COMPUT SC, V1041, P95
   Cole M., 1989, DEV CHILDREN
   Cook A, 2001, 16TH ANNUAL INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING (ASE 2001), PROCEEDINGS, P307, DOI 10.1109/ASE.2001.989817
   COUDARCHER R, 2001, LNCS, V2026
   DARLINGTON J, 1996, COMPUTING TOMORROW F, P49
   GENTLEMAN WM, 1978, J ACM, V25, P112, DOI 10.1145/322047.322057
   Golub G.H., 2013, Matrix Computations, DOI DOI 10.56021/9781421407944
   HAMDAN M, 2000, THESIS HERIOT WATT U
   Hammond K., 1999, RES DIRECTIONS PARAL
   Hayashi R, 1997, HIGH PERFORMANCE COMPUTING ON THE INFORMATION SUPERHIGHWAY - HPC ASIA '97, PROCEEDINGS, P595, DOI 10.1109/HPC.1997.592215
   HERRMANN CA, 2000, P 8 INT WORKSH COMP, P239
   JOHNSSON T, 1985, LECT NOTES COMPUT SC, V201, P190
   KALE LV, 1998, LNCS, V1457
   KESSELER M, 1995, HPEC 95 HIGH PERFORM, P182
   KLUSIK U, 2000, LNCS
   Loidl HW, 1999, CONCURRENCY-PRACT EX, V11, P701, DOI 10.1002/(SICI)1096-9128(199910)11:12<701::AID-CPE443>3.0.CO;2-P
   LOIDL HW, 2003, IN PRESS HIGH ORDER, V16
   MCCOLL WF, 1993, LECT PARALLEL COMPUT, P337
   MICHAELSON G, 2001, PARALLEL ALGORITHMS, V16, P181
   MICHAELSON G, 2000, P 12 INT WORKSH IMPL, P307
   MICHAELSON G., 1997, P 9 INT WORKSH IMPL, P539
   Milner R., 1990, The Definition of Standard ML
   PELEGATTI S, 1998, STRUCTURED DEV PARAL
   Pierce BC, 2000, FOUNDAT COMPUT, P455
   Scaife N, 2002, LECT NOTES COMPUT SC, V2312, P138
   SCAIFE N, 2002, 3 INT C PAR DISTR CO, P447
   SCAIFE N, 1998, P 10 INT WORKSH IMPL, P213
   Sérot J, 1999, RESEARCH DIRECTIONS IN PARALLEL FUNCTIONAL PROGRAMMING, P379
   SEROT J, 2001, HLPP 2001 INT WORKSH
   SKILLICORN DB, 1998, COMPUTING SURVEY JUN
   SURRY P, 1993, EPCCPAPRPL2FS U ED B
   Trinder Philip W., 1998, J FUNCTIONAL PROGRAM, V8, P23, DOI DOI 10.1017/S0956796897002967
NR 45
TC 21
Z9 22
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD JUL
PY 2005
VL 15
BP 615
EP 650
DI 10.1017/S0956796804005489
PN 4
PG 36
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 955CJ
UT WOS:000231202300004
OA Bronze
DA 2024-07-18
ER

PT J
AU Fischbach, A
   Hannan, J
AF Fischbach, A
   Hannan, J
TI Specification and correctness of lambda lifting
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article; Proceedings Paper
CT International Workshop on Semantics, Applications, and Implementation of
   Program Generation
CY SEP   20, 2000
CL MONTREAL, CANADA
SP ACM, SIGPLAN
ID RECURSIVE EQUATIONS; PROGRAMS
AB We present a formal and general specification of lambda lifting and prove its correctness with respect to a call-by-name operational semantics. We use this specification to prove the correctness of a lambda lifting algorithm similar to the one proposed by Johnsson. Lambda lifting is a program transformation that eliminates free variables from functions by introducing additional formal parameters to function definitions and additional actual parameters to function calls. This operation supports the transformation from a lexically-structured functional program into a set of recursive equations. Existing results provide specific algorithms and only limited correctness results. Our work provides a more general specification of lambda lifting (and related operations) that supports flexible translation strategies, which may result in new implementation techniques. Our work also supports a simple framework in which the interaction of lambda lifting and other optimizations can be studied and from which new algorithms might be obtained.
C1 Penn State Univ, Dept Comp Sci & Engn, University Pk, PA 16802 USA.
C3 Pennsylvania Commonwealth System of Higher Education (PCSHE);
   Pennsylvania State University; Pennsylvania State University -
   University Park
RP Fischbach, A (corresponding author), Penn State Univ, Dept Comp Sci & Engn, University Pk, PA 16802 USA.
CR Aspinall D, 1995, LECT NOTES COMPUT SC, V933, P1, DOI 10.1007/BFb0022243
   BONDORF A, 1991, SCI COMPUT PROGRAM, V16, P151, DOI 10.1016/0167-6423(91)90002-F
   Clinger W. D., 1994, Proceedings of the 1994 ACM Conference on LISP and Functional Programming, P128, DOI 10.1145/182409.156786
   Danvy O, 2000, THEOR COMPUT SCI, V248, P243, DOI 10.1016/S0304-3975(00)00054-2
   DANVY O, 1998, RS982 BRICS
   Fischbach A, 2001, LECT NOTES COMPUT SC, V2053, P25
   Fischbach A, 2000, LECT NOTES COMPUT SC, V1924, P108
   Hannan J., 2000, Higher-Order and Symbolic Computation, V13, P179, DOI 10.1023/A:1010006229549
   HANNAN J, 1995, PART P WORKSH TYP PR, P48
   HANNAN J, 1998, J FUNCTIONAL PROGRAM, V8, P239
   HANNAN J, 1997, CSE97014 PENN STAT U
   HANNAN J, 1998, P 3 INT C FUNCT PROG, P27
   HUGHES J, 1982, P ACM S LISP FUNCT P, P1
   JOHNSSON T, 1985, LECT NOTES COMPUT SC, V201, P190
   Jones S. L. P., 1992, PRENTICE HALL INT SE
   JONES SP, 1996, P ICFP 96, P1
   Peyton Jones S. L., 1987, PRENTICE HALL INT SE
   Shivers O. G., 1991, THESIS CARNEGIE MELL
   THIEMANN P, 1999, P LAT AM C FUNCT PRO
NR 19
TC 2
Z9 2
U1 0
U2 1
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 40 WEST 20TH ST, NEW YORK, NY 10011-4221 USA
SN 0956-7968
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD MAY
PY 2003
VL 13
BP 509
EP 543
DI 10.1017/S0956796802004604
PN 3
PG 35
WC Computer Science, Software Engineering
WE Conference Proceedings Citation Index - Science (CPCI-S); Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 689BA
UT WOS:000183470700004
OA Bronze
DA 2024-07-18
ER

PT J
AU Annenkov, D
   Milo, M
   Nielsen, JB
   Spitters, B
AF Annenkov, Danil
   Milo, Mikkel
   Nielsen, Jakob Botsch
   Spitters, Bas
TI Extracting functional programs from Coq, in Coq
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID IMPLICIT CALCULUS; CONSTRUCTIONS; SYSTEMS
AB We implement extraction of Coq programs to functional languages based on MetaCoq's certified erasure. We extend the MetaCoq erasure output language with typing information and use it as an intermediate representation, which we call lambda(T)(square). We complement the extraction functionality with a full pipeline that includes several standard transformations (e.g. eta-expansion and inlining) implemented in a proof-generating manner along with a verified optimisation pass removing unused arguments. We prove the pass correct wrt. a conventional call-by-value operational semantics of functional languages. From the optimised lambda(T)(square) representation, we obtain code in two functional smart contract languages, Liquidity and CameLIGO, the functional language Elm, and a subset of the multi-paradigm language for systems programming Rust. Rust is currently gaining popularity as a language for smart contracts, and we demonstrate how our extraction can be used to extract smart contract code for the Concordium network. The development is done in the context of the ConCert framework that enables smart contract verification. We contribute with two verified real-world smart contracts (boardroom voting and escrow), which we use, among other examples, to exemplify the applicability of the pipeline. In addition, we develop a verified web application and extract it to fully functional Elm code. In total, this gives us a way to write dependently typed programs in Coq, verify, and then extract them to several target languages while retaining a small trusted computing base of only MetaCoq and the pretty-printers into these languages.
C1 [Annenkov, Danil; Milo, Mikkel; Nielsen, Jakob Botsch; Spitters, Bas] Aarhus Univ, Comp Sci, Aarhus, Denmark.
C3 Aarhus University
RP Annenkov, D (corresponding author), Aarhus Univ, Comp Sci, Aarhus, Denmark.
EM danil.v.annenkov@gmail.com; mikkelmilo@gmail.com;
   jakob.botsch.nielsen@gmail.com; bas@cs.au.dk
OI Annenkov, Danil/0000-0001-8278-3069; Spitters, Bas/0000-0002-2802-0973;
   Milo, Mikkel/0000-0003-3261-5205
FU Danish Industry Foundation in the Blockchain Academy Network project;
   Concordium Blockchain Research Center (COBRA); Tezos Foundation
FX This work was partially supported by the Danish Industry Foundation in
   the Blockchain Academy Network project, the Concordium Blockchain
   Research Center (COBRA), and the Tezos Foundation.
CR Abate C, 2021, P IEEE COMPUT SECUR, P576, DOI 10.1109/CSF51468.2021.00048
   Anand A., 2017, COQPL 2017
   Anand A, 2018, LECT NOTES COMPUT SC, V10895, P20, DOI 10.1007/978-3-319-94821-8_2
   Annenkov D, 2021, CPP '21: PROCEEDINGS OF THE 10TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS, P105, DOI 10.1145/3437992.3439934
   Annenkov D, 2020, CPP '20: PROCEEDINGS OF THE 9TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS, P215, DOI 10.1145/3372885.3373829
   Annenkov D, 2018, PPDP'18: PROCEEDINGS OF THE 20TH INTERNATIONAL SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING, DOI 10.1145/3236950.3236955
   Atkey R, 2018, LICS'18: PROCEEDINGS OF THE 33RD ANNUAL ACM/IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P56, DOI 10.1145/3209108.3209189
   Bahr P., 2015, SIGPLAN NOTICES
   Barras B, 2005, LECT NOTES COMPUT SC, V3634, P151, DOI 10.1007/11538363_12
   Barras B, 2008, LECT NOTES COMPUT SC, V4962, P365, DOI 10.1007/978-3-540-78499-9_26
   Berardi S, 1996, J LOGIC COMPUT, V6, P663, DOI 10.1093/logcom/6.5.663
   Berghofer S., 2002, Types for Proofs and Programs. International Workshop, TYPES 2000. Selected Papers (Lecture Notes in Computer Science Vol.2277), P24
   Bernardo B., 2015, THESES
   BOEHM HJ, 1988, SOFTWARE PRACT EXPER, V18, P807, DOI 10.1002/spe.4380180902
   BOEHM HJ, 1991, SIGPLAN NOTICES, V26, P157
   Boerio L., 1994, PROGRAMMING LANGUAGE
   Bozman c., 2018, JFLA18
   Brady E, 2004, ANN NY ACAD SCI, V3085, P115
   Brady Edwin C., 2021, 35 EUROPEAN C OBJECT, V9, DOI 10.4230/LIPIcs. ECOOP.2021.9
   Chapman J, 2019, LECT NOTES COMPUT SC, V11825, P255, DOI 10.1007/978-3-030-33636-3_10
   Chlipala Adam., 2017, Certified Programming with Dependent Types
   Cruz-Filipe L, 2003, LECT NOTES COMPUT SC, V2758, P205
   Cruz-Filipe L., 2006, ELECTRON NOTES THEOR
   Danielsson N. A., 2019, LOGICAL PROPERTIES M
   Dziembowski S, 2018, PROCEEDINGS OF THE 2018 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY (CCS'18), P967, DOI 10.1145/3243734.3243857
   Erbsen A, 2019, P IEEE S SECUR PRIV, P1202, DOI 10.1109/SP.2019.00005
   Feldman R., 2020, ELM ACTION
   Filliâtre JC, 2004, LECT NOTES COMPUT SC, V2986, P370
   Gilbert G., 2019, P ACM PROGR LANG 3PO
   Haftmann F., 2007, 36407 U KAIS DEP COM
   Hao F, 2010, IET INFORM SECUR, V4, P62, DOI 10.1049/iet-ifs.2008.0127
   Henglein F, 2020, LECT NOTES COMPUT SC, V12063, P599, DOI 10.1007/978-3-030-54455-3_42
   Hupel Lars, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P999, DOI 10.1007/978-3-319-89884-1_35
   Jung R, 2021, COMMUN ACM, V64, P144, DOI 10.1145/3418295
   Klabnik S., 2018, The Rust Programming Language
   Klein G, 2014, ACM T COMPUT SYST, V32, DOI 10.1145/2560537
   Kumar R, 2014, ACM SIGPLAN NOTICES, V49, P179, DOI 10.1145/2535838.2535841
   Kusee W. H., 2017, THESIS
   Lamela Seijas P., 2018, INT S LEVERAGING APP
   LANDIN PJ, 1964, COMPUT J, V6, P308, DOI 10.1093/comjnl/6.4.308
   Lee O., 1998, ACM T PROGR LANG SYS
   Leroy X, 2006, ACM SIGPLAN NOTICES, V41, P42, DOI 10.1145/1111320.1111042
   Letouzey P, 2002, LECT NOTES COMPUT SC, V2646, P200
   Letouzey Pierre, 2004, Ph. D. Dissertation
   McCorry P, 2017, LECT NOTES COMPUT SC, V10322, P357, DOI 10.1007/978-3-319-70972-7_20
   Miquel A, 2001, LECT NOTES COMPUT SC, V2044, P344
   Mishra-Linger N, 2008, LECT NOTES COMPUT SC, V4962, P350, DOI 10.1007/978-3-540-78499-9_25
   Mullen E., 2018, CPP 2018
   Necula G. C., 1997, Conference Record of POPL '97: The 24th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P106, DOI 10.1145/263699.263712
   Nielsen J. B., 2019, FMBC 2019
   O'Connor R, 2017, PROCEEDINGS OF THE 2017 WORKSHOP ON PROGRAMMING LANGUAGES AND ANALYSIS FOR SECURITY (PLAS' 17), P107, DOI 10.1145/3139337.3139340
   Paraskevopoulou Z, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3473591
   Paulin-Mohring Christine., 1989, P 16 ACM SIGPLAN S P, P89
   Pit-Claudel C, 2020, LECT NOTES COMPUT SC, V12167, P119, DOI 10.1007/978-3-030-51054-1_7
   Prost F., 1995, RR199547 LIP
   Sergey I., 2019, OOPSLA19
   Sinkarovs A., 2021, CHOOSING IS LOSING C
   Sozeau M., 2019, POPL 2019
   Sozeau M, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341690
   Sozeau M, 2020, J AUTOM REASONING, V64, P947, DOI 10.1007/s10817-019-09540-0
   Tanaka A, 2021, PEPM '21: PROCEEDINGS OF THE 2021 ACM SIGPLAN WORKSHOP ON PARTIAL EVALUATION AND PROGRAM MANIPULATION, P14, DOI 10.1145/3441296.3441394
   Timany A, 2020, Arxiv, DOI arXiv:1710.03912
   Watt Conrad., 2018, Proceedings of the 7th ACM SIGPLAN International Conference on Certified Programs and Proofs. CPP 2018, P53, DOI DOI 10.1145/3167082
   Weiss A., 2019, ARXIV
NR 64
TC 1
Z9 1
U1 1
U2 1
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD AUG 22
PY 2022
VL 32
AR e11
DI 10.1017/S0956796822000077
PG 60
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 3Y0BU
UT WOS:000843396600001
OA hybrid, Green Submitted, Green Published
DA 2024-07-18
ER

PT J
AU Dagand, PÉ
   Tabareau, N
   Tanter, E
AF Dagand, Pierre-Evariste
   Tabareau, Nicolas
   Tanter, Eric
TI Foundations of dependent interoperability
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB Full-spectrum dependent types promise to enable the development of correct-by-construction software. However, even certified software needs to interact with simply-typed or untyped programs, be it to perform system calls, or to use legacy libraries. Trading static guarantees for runtime checks, the dependent interoperability framework provides a mechanism by which simply-typed values can safely be coerced to dependent types and, conversely, dependently-typed programs can defensively be exported to a simply-typed application. In this article, we give a semantic account of dependent interoperability. Our presentation relies on and is guided by a pervading notion of type equivalence, whose importance has been emphasized in recent work on homotopy type theory. Specifically, we develop the notions of type-theoretic partial Galois connections as a key foundation for dependent interoperability, which accounts for the partiality of the coercions between types. We explore the applicability of both type-theoretic Galois connections and anticonnections in the setting of dependent interoperability. A partial Galois connection enforces a translation of dependent types to runtime checks that are both sound and complete with respect to the invariants encoded by dependent types. Conversely, picking an anticonnection instead lets us induce weaker, sound conditions that can amount to more efficient runtime checks.
   Our framework is developed in Coq; it is thus constructive and verified in the strictest sense of the terms. Using our library, users can specify domain-specific partial connections between data structures. Our library then takes care of the (sometimes, heavy) lifting that leads to interoperable programs. It thus becomes possible, as we shall illustrate, to internalize and hand-tune the extraction of dependently-typed programs to interoperable OCaml programs within Coq itself.
C1 [Dagand, Pierre-Evariste] UPMC Univ Paris 06, Sorbonne Univ, CNRS, INRIA,LIP6,UMR 7606, Paris, France.
   [Tabareau, Nicolas] INRIA, Paris, France.
   [Tanter, Eric] Univ Chile, PLEIAD Lab, Comp Sci Dept DCC, Santiago, Chile.
C3 Inria; Sorbonne Universite; Centre National de la Recherche Scientifique
   (CNRS); Inria; Universidad de Chile
RP Dagand, PÉ (corresponding author), UPMC Univ Paris 06, Sorbonne Univ, CNRS, INRIA,LIP6,UMR 7606, Paris, France.
EM pierre-evariste.dagand@inria.fr; nicolas.tabareau@inria.fr;
   etanter@dcc.uchile.cl
OI tabareau, nicolas/0000-0003-3366-2273
FU CoqHoTT ERC Grant [637339]; FONDECYT [1150017]; Emergence(s) program of
   Paris; European Research Council (ERC) [637339] Funding Source: European
   Research Council (ERC)
FX This work was partially funded by the CoqHoTT ERC Grant 637339, by
   FONDECYT Project 1150017 and the Emergence(s) program of Paris.
CR Altenkirch T, 2007, PLPV'07: PROCEEDINGS OF THE 2007 WORKSHOP ON PROGRAMMING LANGUAGES MEETS PROGRAM VERIFICATION, P57, DOI 10.1145/1292597.1292608
   [Anonymous], 2014, PROMEROPS
   [Anonymous], THESIS
   Awodey S, 2004, J LOGIC COMPUT, V14, P447, DOI 10.1093/logcom/14.4.447
   Banados F., 2014, Proceedings of the 19th ACM SIGPLAN International Conference on Functional Programming, ICFP '14, P283
   Bauer A, 2017, PROCEEDINGS OF THE 6TH ACM SIGPLAN CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS, CPP'17, P164, DOI 10.1145/3018610.3018615
   Boulier S, 2017, PROCEEDINGS OF THE 6TH ACM SIGPLAN CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS, CPP'17, P182, DOI 10.1145/3018610.3018620
   Brady E, 2004, ANN NY ACAD SCI, V3085, P115
   Chlipala Adam., 2017, Certified Programming with Dependent Types
   Clairambault P, 2012, LOG METH COMPUT SCI, V8, DOI 10.2168/LMCS-8(3:08)2012
   Cockx J, 2016, J FUNCT PROGRAM, V26, P1, DOI 10.1017/S0956796816000174
   Cohen C, 2013, LECT NOTES COMPUT SC, V8307, P147, DOI 10.1007/978-3-319-03545-1_10
   Coq Development Team, 2016, COQ PROOF ASS REF MA
   Dagand PE, 2016, ACM SIGPLAN NOTICES, V51, P298, DOI 10.1145/3022670.2951933
   Dagand PE, 2012, ACM SIGPLAN NOTICES, V47, P103, DOI 10.1145/2398856.2364544
   Delaware B, 2015, ACM SIGPLAN NOTICES, V50, P689, DOI [10.1145/2775051.2677006, 10.1145/2676726.2677006]
   Di Cosmo R, 2005, MATH STRUCT COMP SCI, V15, P825, DOI 10.1017/S0960129505004871
   Disney T., 2011, P INT WORKSH SCRIPTS
   Fennell L, 2013, P IEEE CSFW, P224, DOI 10.1109/CSF.2013.22
   Findler RB, 2002, ACM SIGPLAN NOTICES, V37, P48, DOI 10.1145/583852.581484
   Garcia R, 2016, ACM SIGPLAN NOTICES, V51, P429, DOI 10.1145/2914770.2837670
   Gonthier G, 2010, J FORMALIZ REASON, V3, P95
   HOFMANN M, 1994, IEEE S LOG, P208, DOI 10.1109/LICS.1994.316071
   Hyland J. M. E., 1991, LECT NOTES MATH, P131
   Knowles K, 2010, ACM T PROGR LANG SYS, V32, DOI 10.1145/1667048.1667051
   Ko H.-S., 2013, P ACM SIGPLAN WORKSH, P37, DOI [10.1145/2502409.2502413, DOI 10.1145/2502409.2502413]
   Laurent O, 2005, MATH STRUCT COMP SCI, V15, P969, DOI 10.1017/S0960129505004895
   Lehmann Nico, 2017, ACM SIGPLAN Notices, V52, P775, DOI 10.1145/3093333.3009856
   Levy PB, 2017, ACM SIGPLAN NOTICES, V52, P400, DOI 10.1145/3093333.3009898
   Matthews J, 2007, CONFERENCE RECORD OF POPL 2007: THE 34TH ACM SIGPLAN SIGACT SYMPOSIUM ON PRINCIPLES OF PROGAMMING LANGUAGES, P3
   McBride C., 2010, TECHNICAL REPORT
   McBride C., 2000, LNCS, P197
   McKinna J, 2006, ACM SIGPLAN NOTICES, V41, P1, DOI 10.1145/1111320.1111038
   Mishra-Linger N, 2008, LECT NOTES COMPUT SC, V4962, P350, DOI 10.1007/978-3-540-78499-9_25
   Osera Peter-Michael., PLPV 12 P 6 WORKSHOP, DOI [DOI 10.1145/2103776.2103779, 10.1145/2103776.2103779.]
   Ou XM, 2004, INT FED INFO PROC, V155, P437
   Rondon PM, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P159, DOI 10.1145/1375581.1375602
   Schwerter FB, 2016, J FUNCT PROGRAM, V26, P1, DOI 10.1017/S0956796816000162
   Sekiyama T, 2015, ACM SIGPLAN NOTICES, V50, P195, DOI [10.1145/2676726.2676996, 10.1145/2775051.2676996]
   Siek Jeremy, 2006, WORKSHOP SCHEME FUNC, P81
   Siek Jeremy G., 2015, LIPICS LEIBNIZ INT P, V32, P274, DOI 10.4230/LIPIcs.SNAPL.2015.274
   Sozeau M, 2008, LECT NOTES COMPUT SC, V5170, P278, DOI 10.1007/978-3-540-71067-7_23
   Sozeau M, 2010, LECT NOTES COMPUT SC, V6172, P419, DOI 10.1007/978-3-642-14052-5_29
   Swierstra Wouter, 2016, Functional and Logic Programming. 13th International Symposium, FLOPS 2016. Proceedings: LNCS 9613, P29, DOI 10.1007/978-3-319-29604-3_3
   Tanter É, 2016, ACM SIGPLAN NOTICES, V51, P26, DOI [10.1145/2816707.2816710, 10.1145/2936313.2816710]
   The Univalent Foundations Program, 2013, Homotopy Type Theory: Univalent Foundations of Mathematics
   Thiemann P, 2014, LECT NOTES COMPUT SC, V8410, P47
   Toro M, 2015, ACM SIGPLAN NOTICES, V50, P935, DOI [10.1145/2814270.2814315, 10.1145/2858965.2814315]
   WADLER P, 1989, CONFERENCE RECORD OF THE SIXTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P60, DOI 10.1145/75277.75283
   Xi HW, 1998, ACM SIGPLAN NOTICES, V33, P249, DOI 10.1145/277652.277732
   Zimmermann T., 2015, ARXIV150505028V4
NR 51
TC 17
Z9 16
U1 0
U2 3
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD MAR 13
PY 2018
VL 28
AR e9
DI 10.1017/S0956796818000011
PG 44
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA FZ1QP
UT WOS:000427352700001
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Berthold, J
   Loidl, HW
   Hammond, K
AF Berthold, Jost
   Loidl, Hans-Wolfgang
   Hammond, Kevin
TI PAEAN: Portable and scalable runtime support for parallel Haskell
   dialects
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID GARBAGE COLLECTION
AB Over time, several competing approaches to parallel Haskell programming have emerged. Different approaches support parallelism at various different scales, ranging from small multicores to massively parallel high-performance computing systems. They also provide varying degrees of control, ranging from completely implicit approaches to ones providing full programmer control. Most current designs assume a shared memory model at the programmer, implementation and hardware levels. This is, however, becoming increasingly divorced from the reality at the hardware level. It also imposes significant unwanted runtime overheads in the form of garbage collection synchronisation etc. What is needed is an easy way to abstract over the implementation and hardware levels, while presenting a simple parallelism model to the programmer. The PArallEl shAred Nothing runtime system design aims to provide a portable and high-level shared-nothing implementation platform for parallel Haskell dialects. It abstracts over major issues such as work distribution and data serialisation, consolidating existing, successful designs into a single framework. It also provides an optional virtual shared-memory programming abstraction for (possibly) shared-nothing parallel machines, such as modern multicore/manycore architectures or cluster/cloud computing systems. It builds on, unifies and extends, existing well-developed support for shared-memory parallelism that is provided by the widely used GHC Haskell compiler. This paper summarises the state-of-the-art in shared-nothing parallel Haskell implementations, introduces the PArallEl shAred Nothing abstractions, shows how they can be used to implement three distinct parallel Haskell dialects, and demonstrates that good scalability can be obtained on recent parallel machines.
C1 [Berthold, Jost] Univ Copenhagen, Dept Comp Sci DIKU, Commonwealth Bank Australia, Sydney, NSW, Australia.
   [Loidl, Hans-Wolfgang] Heriot Watt Univ, Sch Math & Comp Sci, Edinburgh EH14 4AS, Midlothian, Scotland.
   [Hammond, Kevin] Univ St Andrews, Sch Comp Sci, St Andrews KY16 9AJ, Fife, Scotland.
C3 Heriot Watt University; University of St Andrews
RP Berthold, J (corresponding author), Univ Copenhagen, Dept Comp Sci DIKU, Commonwealth Bank Australia, Sydney, NSW, Australia.
EM jberthold@acm.org; hwloidl@macs.hw.ac.uk; kevin@kevinhammond.net
OI Hammond, Kevin/0000-0002-4326-4562
FU European Union [IST-248828, IST-288570, IST-644235]; EU COST Action
   [IC1202]; UK's Engineering and Physical Sciences Research Council
   [EP/G055181/1]; Danish Council for Strategic Research DSF [10-092299];
   Scottish SICSA initiative; EPSRC [EP/F030657/1, EP/G05553X/1,
   EP/G055181/1] Funding Source: UKRI
FX This work has been partially supported by the European Union grants
   IST-248828 ADVANCE: Asynchronous and Dynamic Virtualisation through
   performance ANalysis to support Concurrency Engineering, IST-288570
   ParaPhrase: Parallel Patterns for Adaptive Heterogeneous Multicore
   Systems, and IST-644235 RePhrase: Refactoring Parallel Heterogeneous
   Systems, a Software Engineering Approach; by EU COST Action IC1202:
   Timing Analysis On Code-Level (TACLe); and by the UK's Engineering and
   Physical Sciences Research Council grant EP/G055181/1 HPC-GAP: High
   Performance Computational Algebra. Jost Berthold was partially supported
   by the Danish Council for Strategic Research DSF under contract number
   10-092299 (HIPERFIT). We would like to thank the Scottish SICSA
   initiative for funding a visit of Jost Berthold to Heriot-Watt and St
   Andrews Universities, and for supporting numerous events promoting
   research on (parallel) programming languages and implementations. We
   would also like to thank Malak Aljabri for her contributions in terms of
   performance measurements for the GUM-SMP system, as well as all the PhD
   students and others who have contributed to extending the GUM and Eden
   systems in many interesting directions.
CR Acar U. A., 2012, WORKSH CONTR DAMP 12
   Acar UA, 2013, ACM SIGPLAN NOTICES, V48, P219, DOI 10.1145/2517327.2442538
   Aditya S., 1995, P HASK WORKSH LA JOL, P35
   Al Zain AD, 2008, IEEE T PARALL DISTR, V19, P219, DOI 10.1109/TPDS.2007.70728
   Aljabri M., 2012, P IFL 12 24 S IMPL A, P75
   Aljabri M., 2013, P ACM SIGPLAN S IMPL, P37
   Aljabri M., 2014, LNCS, V8843, P1
   Aljabri M. S., 2015, THESIS
   [Anonymous], 857 TAND COMP
   APPEL AW, 1989, SOFTWARE PRACT EXPER, V19, P171, DOI 10.1002/spe.4380190206
   Aswad M. K., 2012, THESIS
   Berthold J, 2008, LECT NOTES COMPUT SC, V4902, P214
   Berthold Jost, 2011, Implementation and Application of Functional Languages. 22nd International Symposium, IFL 2010. Revised Selected Papers, P38, DOI 10.1007/978-3-642-24276-2_3
   Berthold J, 2003, LECT NOTES COMPUT SC, V2790, P732
   Berthold J., 2008, THESIS
   Berthold J., 2005, J VONNEUMANN I COMPU, V33, P835
   Berthold J, 2007, LECT NOTES COMPUT SC, V4449, P73
   BEVAN DI, 1987, LECT NOTES COMPUT SC, V259, P176
   Breitinger S., 1998, Principles of Declarative Programming. 10th International Symposium, PLILP'98. Held Jointly with the 6th International Conference, ALP'98. Proceedings, P318, DOI 10.1007/BFb0056623
   Breitinger Silvia, 1997, LECT NOTES COMPUTER, V1467, P250
   Cejtin H, 1995, ACM T PROGR LANG SYS, V17, P704, DOI 10.1145/213978.213986
   Chakravarty M., 2007, PROC WORKSHOP DECLAR, P10
   Cole M, 1989, ALGORITHMIC SKELETON
   Dieterle M., 2013, LNCS, V8241, P18
   Dieterle M, 2010, LECT NOTES COMPUT SC, V5937, P73, DOI 10.1007/978-3-642-11503-5_8
   Du Bois A. R., 2002, LNCS, V2670, P199
   Epstein J, 2011, HASKELL 11: PROCEEDINGS OF THE 2011 ACM SIGPLAN HASKELL SYMPOSIUM, P118
   Fluet M, 2010, J FUNCT PROGRAM, V20, P537, DOI 10.1017/S0956796810000201
   Fluet Matthew., 2007, Proceedings of the 2007 Workshop on Declarative Aspects of Multicore Programming, DAMP '07, P37
   Foltzer A, 2012, ACM SIGPLAN NOTICES, V47, P235, DOI 10.1145/2398856.2364562
   Geist Al, 2011, ENCY PARALLEL COMPUT, P1647
   Hallgren T, 2005, ACM SIGPLAN NOTICES, V40, P116, DOI 10.1145/1090189.1086380
   Hammond K., 2011, ENCY PARALLEL COMPUT, P768
   Hammond K., 1990, IFL 90 INT WORKSH PA, P51
   Hammond K., 1993, IFL 93 INT WORKSH PA
   Hammond K., 1992, IFL 92 INT WORKSH PA, V92-19, P73
   JONES SLP, 1987, LECT NOTES COMPUT SC, V274, P98
   Klusik U, 1999, LECT NOTES COMPUT SC, V1595, P103
   Lameter Christoph, 2013, Queue, V11, P40, DOI [10.1145/2508834.2513149, DOI 10.1145/2508834.2513149]
   Li P, 2007, HASKELL'07: PROCEEDINGS OF THE ACM SIGPLAN 2007 HASKELL WORKSHOP, P107
   Loidl H.-W., 1994, IFL 94 INT WORKSH IM
   Loidl H.-W., 1996, LNCS, V1268, P184
   Loidl H.-W., 1998, THESIS
   Loidl H.-W., 2001, TRENDS FUNCTIONAL PR, V3, P63
   Loogen R, 2005, J FUNCT PROGRAM, V15, P431, DOI 10.1017/S0956796805005526
   Maier Patrick, 2012, Implementation and Application of Functional Languages. 23rd International Symposium, IFL 2011. Revised Selected Papers: LNCS 7257, P35, DOI 10.1007/978-3-642-34407-7_3
   Maier P, 2014, ACM SIGPLAN NOTICES, V49, P65, DOI [10.1145/2633357.2633363, 10.1145/2775050.2633363]
   Maier P, 2014, LECT NOTES COMPUT SC, V8632, P415, DOI 10.1007/978-3-319-09873-9_35
   Marlow S, 2011, HASKELL 11: PROCEEDINGS OF THE 2011 ACM SIGPLAN HASKELL SYMPOSIUM, P71
   Marlow S, 2011, ACM SIGPLAN NOTICES, V46, P71, DOI 10.1145/2096148.2034685
   Marlow S, 2010, ACM SIGPLAN NOTICES, V45, P91, DOI 10.1145/2088456.1863535
   Marlow S, 2009, ICFP'09: PROCEEDINGS OF THE 2009 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P65
   Message Passing Interface Forum, 2012, MPI: A Message Passing Interface Standard-Version 3.0
   MOHR E, 1991, IEEE T PARALL DISTR, V2, P264, DOI 10.1109/71.86103
   Reppy J, 2009, ICFP'09: PROCEEDINGS OF THE 2009 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P257
   Sivaramakrishnan K. C., 2013, TECHNICAL REPORT
   Stewart R., 2012, LNCS, V7829, P247
   Totoo P, 2014, CONCURR COMP-PRACT E, V26, P987, DOI 10.1002/cpe.3087
   Trinder P. W., 1998, Journal of Functional Programming, V8, P23, DOI 10.1017/S0956796897002967
   Trinder P. W., 1995, IFL 95 7 INT WORKSH
NR 60
TC 2
Z9 2
U1 0
U2 1
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PY 2016
VL 26
BP 1
EP 39
DI 10.1017/S0956796816000010
PG 39
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DT0GA
UT WOS:000381160000001
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Dieterle, M
   Horstmeyer, T
   Loogen, R
   Berthold, J
AF Dieterle, M.
   Horstmeyer, T.
   Loogen, R.
   Berthold, J.
TI Skeleton composition versus stable process systems in Eden
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB We compare two inherently different approaches to implement complex process systems in Eden: stable process systems and a compositional approach. A stable process system is characterised by handling several computation stages in each of the participating processes. Often, processes communicate using streams of data, change behaviour with the different computation phases, and more often than not, exactly one process is allocated to each processor element. In contrast, a complex process system can also be achieved by skeleton composition of a number of elementary skeletons, such as parallel transformation, reduction, or special communication patterns. In a compositional implementation, each computation phase leads to a new set of interacting processes. When implementing complex parallel algorithms, skeleton composition is usually easier and more flexible, but has a larger overhead from additional process creation and communication. We present case studies of different parallel application kernels implemented as stable systems and using composition in Eden, including a comprehensive description of Eden's features. Our results show that the compositional performance loss can be alleviated by co-locating processes which directly communicate, and by using Eden's remote data concept to enable such direct communication. Moreover, Eden's parallel runtime system handles communication between co-located processes in an optimised way. EdenTV visualisations of execution traces are invaluable to analyse program characteristics and for targeted optimisations towards better process placement and communication avoidance.
C1 [Dieterle, M.; Horstmeyer, T.; Loogen, R.] Univ Marburg, Fachbereich Math & Informat, Marburg, Germany.
   [Berthold, J.] Commonwealth Bank Australia, Sydney, NSW, Australia.
C3 Philipps University Marburg
RP Dieterle, M (corresponding author), Univ Marburg, Fachbereich Math & Informat, Marburg, Germany.
EM dieterle@informatik.uni-marburg.de; horstmey@informatik.uni-marburg.de;
   loogen@informatik.uni-marburg.de; jberthold@acm.org
CR Aditya S., 1995, P HASK WORKSH LA JOL, P35
   [Anonymous], 2005, P GT2005 ASME TURB E
   Armstrong J, 2007, P 3 ACM SIGPLAN C HI
   BACCI B, 1995, CONCURRENCY-PRACT EX, V7, P225, DOI 10.1002/cpe.4330070305
   Benoit A., 2002, ESKEL EDINBURGH SKEL
   Berthold J, 2007, LECT NOTES COMPUT SC, V4449, P73
   Berthold J, 2009, LECT NOTES COMPUT SC, V5704, P990, DOI 10.1007/978-3-642-03869-3_91
   Berthold J, 2008, ADV PARALLEL COMPUT, V15, P121
   Berthold J, 2009, LECT NOTES COMPUT SC, V5698, P73, DOI 10.1007/978-3-642-03275-2_8
   Blelloch GE, 1996, COMMUN ACM, V39, P85, DOI 10.1145/227234.227246
   Breitinger S., 1998, THESIS
   Chakravarty M., 2007, PROC WORKSHOP DECLAR, P10
   Chakravarty M. M., 2011, P 6 WORKSH DECL ASP, P3, DOI DOI 10.1145/1926354.1926358
   Cole M. I., 1989, RS MONOGRAPHS PARALL
   Dieterle M., 2012, LECT NOTES COMPUTER, V8241, P18
   Dieterle M, 2010, LECT NOTES COMPUT SC, V5937, P73, DOI 10.1007/978-3-642-11503-5_8
   Epstein J, 2011, HASKELL 11: PROCEEDINGS OF THE 2011 ACM SIGPLAN HASKELL SYMPOSIUM, P118
   Ferreira JF, 2006, SIXTH IEEE INTERNATIONAL SYMPOSIUM ON CLUSTER COMPUTING AND THE GRID, P301
   GHC, 1991, GHC GLASGOW HASKELL
   González-Vélez H, 2010, SOFTWARE PRACT EXPER, V40, P1135, DOI 10.1002/spe.1026
   Hewitt C., 1973, PROC 3 INT JOINT C A, P235, DOI 10.1145/359545.359563
   Jones D, 2009, HASKELL'09: PROCEEDINGS OF THE 2009 ACM SIGPLAN HASKELL SYMPOSIUM, P81
   JONES SLP, 1987, LECT NOTES COMPUT SC, V274, P98
   KUCHEN H, 2007, MUNSTER SKELETON LIB
   Leshchinskiy R., 2008, VECTOR LIB
   LI XB, 1993, PARALLEL COMPUT, V19, P1079, DOI 10.1016/0167-8191(93)90019-H
   Lippmeier B, 2012, ACM SIGPLAN NOTICES, V47, P25, DOI 10.1145/2430532.2364511
   Loogen R, 2005, J FUNCT PROGRAM, V15, P431, DOI 10.1017/S0956796805005526
   Loogen R., 2003, PATTERNS SKELETONS P, P95
   Maier P, 2014, ACM SIGPLAN NOTICES, V49, P65, DOI [10.1145/2633357.2633363, 10.1145/2775050.2633363]
   Mainland G, 2010, ACM SIGPLAN NOTICES, V45, P67, DOI 10.1145/2088456.1863533
   Marlow S., 2010, HASKELL 2010 LANGUAG
   Marlow S, 2011, HASKELL 11: PROCEEDINGS OF THE 2011 ACM SIGPLAN HASKELL SYMPOSIUM, P71
   Marlow S, 2010, ACM SIGPLAN NOTICES, V45, P91, DOI 10.1145/2088456.1863535
   Saad Y., 1996, Iterative Methods for Sparse Linear Systems
   Trinder P. W., 1998, Journal of Functional Programming, V8, P23, DOI 10.1017/S0956796897002967
   TRINDER PW, 1996, P 1996 ACM C PROGR L, P78
NR 37
TC 1
Z9 1
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PY 2016
VL 26
BP 1
EP 40
DI 10.1017/S0956796816000083
PG 40
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DT1AV
UT WOS:000381215000001
DA 2024-07-18
ER

PT J
AU Altenkirch, T
   Ghani, N
   Hancock, P
   Mcbride, C
   Morris, P
AF Altenkirch, Thorsten
   Ghani, Neil
   Hancock, Peter
   Mcbride, Conor
   Morris, Peter
TI Indexed containers
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID INDUCTION; SETS
AB We show that the syntactically rich notion of strictly positive families can be reduced to a core type theory with a fixed number of type constructors exploiting the novel notion of indexed containers. As a result, we show indexed containers provide normal forms for strictly positive families in much the same way that containers provide normal forms for strictly positive types. Interestingly, this step from containers to indexed containers is achieved without having to extend the core type theory. Most of the construction presented here has been formalized using the Agda system.
C1 [Altenkirch, Thorsten; Morris, Peter] Univ Nottingham, Sch Comp Sci, Nottingham NG7 2RD, England.
   [Ghani, Neil; Hancock, Peter; Mcbride, Conor] Univ Strathclyde, Dept Comp & Informat Sci, Glasgow, Lanark, Scotland.
C3 University of Nottingham; University of Strathclyde
RP Altenkirch, T (corresponding author), Univ Nottingham, Sch Comp Sci, Nottingham NG7 2RD, England.
OI Thorsten, Altenkirch/0000-0002-6582-5025
CR Abbott M, 2005, THEOR COMPUT SCI, V342, P3, DOI 10.1016/j.tcs.2005.06.002
   Abbott M, 2003, LECT NOTES COMPUT SC, V2620, P23
   ADAMEK J, 1995, THEOR COMPUT SCI, V150, P57, DOI 10.1016/0304-3975(95)00011-K
   Altenkirch Thorsten, 2011, Algebra and Coalgebra in Computer Science. Proceedings 4th International Conference, CALCO 2011, P70, DOI 10.1007/978-3-642-22944-2_6
   Altenkirch T, 1999, LECT NOTES COMPUT SC, V1683, P453
   Altenkirch T., 2015, AGDA SOURCES INDEXED
   Altenkirch T, 2010, LECT NOTES COMPUT SC, V6158, P11, DOI 10.1007/978-3-642-13962-8_2
   Altenkirch T, 2010, LECT NOTES COMPUT SC, V6014, P297, DOI 10.1007/978-3-642-12032-9_21
   Altenkirch T, 2009, IEEE S LOG, P277, DOI 10.1109/LICS.2009.33
   Altenkirch T, 2009, J FUNCT PROGRAM, V19, P311, DOI 10.1017/S0956796809007278
   Altenkirch T, 2007, PLPV'07: PROCEEDINGS OF THE 2007 WORKSHOP ON PROGRAMMING LANGUAGES MEETS PROGRAM VERIFICATION, P57, DOI 10.1145/1292597.1292608
   [Anonymous], LECT NOTES MATH
   [Anonymous], 2008, COQ PROOF ASS REF MA
   Asperti Andrea, 1991, Categories, Types, and Structures
   Bird Richard, 1997, Algebra of Programming
   Chapman J, 2010, ACM SIGPLAN NOTICES, V45, P3, DOI 10.1145/1932681.1863547
   Cheney James, 2003, Technical Report
   Danielsson NA, 2010, LECT NOTES COMPUT SC, V6120, P100, DOI 10.1007/978-3-642-13321-3_8
   Dybjer P, 2006, J LOGIC ALGEBR PROGR, V66, P1, DOI 10.1016/j.jlap.2005.07.001
   Dybjer P, 1997, THEOR COMPUT SCI, V176, P329, DOI 10.1016/S0304-3975(96)00145-4
   Dybjer Peter., 2001, Proof Theory in Computer Science, P93, DOI DOI 10.1007/3-540-45504-3_7
   Fiore M, 2008, J LOND MATH SOC, V77, P203, DOI 10.1112/jlms/jdm096
   FORSBERG FN, 2010, P 24 INT C 19 ANN C, V6247, P454
   Gambino N, 2004, ANN NY ACAD SCI, V3085, P210
   Gambino N., 2004, LNCS, V3085
   GIRARD JY, 1988, ANN PURE APPL LOGIC, V37, P129, DOI 10.1016/0168-0072(88)90025-5
   Hancock P, 2006, ANN PURE APPL LOGIC, V137, P189, DOI 10.1016/j.apal.2005.05.022
   Hancock P, 2013, LECT NOTES COMPUT SC, V7941, P156, DOI 10.1007/978-3-642-38946-7_13
   Hofmann M, 1996, LECT NOTES COMPUT SC, V1158, P153
   Huet G., 1997, Journal of Functional Programming, V7, P549, DOI 10.1017/S0956796897002864
   Kock J., 2009, NOTES POLYNOMI UNPUB
   LINDSTROM I, 1989, J SYMBOLIC LOGIC, V54, P57, DOI 10.2307/2275015
   Mac Lane S, 1998, GRAD TEXT M, V5
   Mcbride C, 2001, DERIVATIVE REGULAR T
   McBride Conor, 2010, ORNAMENTAL ALGEBRAS
   Morris P., 2007, AUSTR THEOR S CATS20, V65, P111
   Morris P, 2009, INT J FOUND COMPUT S, V20, P83, DOI 10.1142/S0129054109006462
   Nordvall Forsberg F., 2013, Ph.D. thesis
   Petersson K., 1989, LECT NOTES COMPUTER, V389
   Sozeau M, 2007, LECT NOTES COMPUT SC, V4502, P237
   The Agda Team, 2015, AGD WIK
   Turner D. A., 1985, LNCS, V1022, P1
NR 42
TC 26
Z9 27
U1 0
U2 3
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PY 2015
VL 25
AR e5
DI 10.1017/S095679681500009X
PG 41
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CL9DZ
UT WOS:000357277100003
OA Bronze
DA 2024-07-18
ER

PT J
AU Pottier, F
AF Pottier, Francois
TI Syntactic soundness proof of a type-and-capability system with hidden
   state
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID PARAMETRIC POLYMORPHISM; REALIZABILITY SEMANTICS; GENERAL REFERENCES;
   SEPARATION LOGIC; OWNERSHIP TYPES; IDEAL MODEL; VERIFICATION; LANGUAGE;
   FRESH
AB This paper presents a formal definition and machine-checked soundness proof for a very expressive type-and-capability system, that is, a low-level type system that keeps precise track of ownership and side effects. The programming language has first-class functions and references. The type system's features include the following: universal, existential, and recursive types; subtyping; a distinction between affine and unrestricted data; support for strong updates; support for naming values and heap fragments via singleton and group regions; a distinction between ordinary values (which exist at runtime) and capabilities (which do not); support for dynamic reorganizations of the ownership hierarchy by disassembling and reassembling capabilities; and support for temporarily or permanently hiding a capability via frame and anti-frame rules. One contribution of the paper is the definition of the type-and-capability system itself. We present the system as modularly as possible. In particular, at the core of the system, the treatment of affinity, in the style of dual intuitionistic linear logic, is formulated in terms of an arbitrary monotonic separation algebra, a novel axiomatization of resources, ownership, and the manner in which they evolve with time. Only the peripheral layers of the system are aware that we are dealing with a specific monotonic separation algebra, whose resources are references and regions. This semi-abstract organization should facilitate further extensions of the system with new forms of resources. The other main contribution is a machine-checked proof of type soundness. The proof is carried out in the Wright and Felleisen's syntactic style. This offers an evidence that this relatively simple-minded proof technique can scale up to systems of this complexity, and constitutes a viable alternative to more sophisticated semantic proof techniques. We do not claim that the syntactic technique is superior: We simply illustrate how it is used and highlight its strengths and shortcomings.
C1 Inst Natl Rech Informat & Automat, F-78153 Le Chesnay, France.
RP Pottier, F (corresponding author), Inst Natl Rech Informat & Automat, BP 105, F-78153 Le Chesnay, France.
EM Francois.Pottier@inria.fr
OI Pottier, Francois/0000-0002-4069-1235
CR Abadi M., 1991, International Journal of Foundations of Computer Science, V2, P4096, DOI 10.1142/S0129054191000029
   Ahmed A, 2005, ACM SIGPLAN NOTICES, V40, P78, DOI 10.1145/1090189.1086376
   Ahmed A. J., 2004, THESIS PRINCETON U P
   Ahmed A, 2007, FUND INFORM, V77, P397
   Ahmed A, 2010, ACM T PROGR LANG SYS, V32, DOI 10.1145/1709093.1709094
   Almeida PS, 1997, LECT NOTES COMPUT SC, V1241, P32, DOI 10.1007/BFb0053373
   AMADIO RM, 1993, ACM T PROGR LANG SYS, V15, P575, DOI 10.1145/155183.155231
   [Anonymous], MITLCSTR531
   [Anonymous], 1972, INDAGATIONES MATHEMA, DOI DOI 10.1016/1385-7258(72)90034-0
   Atkey R, 2010, LECT NOTES COMPUT SC, V6012, P85, DOI 10.1007/978-3-642-11957-6_6
   Aydemir BE, 2005, LECT NOTES COMPUT SC, V3603, P50
   Barber Andrew., 1996, ECSLFCS96347 U ED SC
   Bell C. J., 2008, P INT WORKSH PROOF C
   Bierhoff K, 2007, ACM SIGPLAN NOTICES, V42, P301, DOI 10.1145/1297105.1297050
   BIRKEDAL L, 2006, LOGICAL METHODS COMP, V2
   Birkedal L, 2011, ACM SIGPLAN NOTICES, V46, P119, DOI 10.1145/1925844.1926401
   Birkedal L, 2010, MATH STRUCT COMP SCI, V20, P655, DOI 10.1017/S0960129510000162
   Birkedal L, 2009, LECT NOTES COMPUT SC, V5504, P456
   Blanqui F, 2011, MATH STRUCT COMP SCI, V21, P827, DOI 10.1017/S0960129511000120
   Boyapati C, 2002, ACM SIGPLAN NOTICES, V37, P211, DOI 10.1145/583854.582440
   Boyland JT, 2010, ACM T PROGR LANG SYS, V32, DOI 10.1145/1749608.1749611
   Boyland JT, 2005, ACM SIGPLAN NOTICES, V40, P283, DOI 10.1145/1047659.1040329
   Brandt M., 1998, Fundamenta Informaticae, V33, P309
   Buisse A, 2011, ELECTRON NOTES THEOR, V276, P121, DOI 10.1016/j.entcs.2011.09.018
   Calcagno C, 2007, IEEE S LOG, P366, DOI 10.1109/LICS.2007.30
   Charguéraud A, 2008, ACM SIGPLAN NOTICES, V43, P213, DOI 10.1145/1411203.1411235
   Charguéraud A, 2012, J AUTOM REASONING, V49, P363, DOI 10.1007/s10817-011-9225-2
   Clarke DG, 1998, ACM SIGPLAN NOTICES, V33, P48, DOI 10.1145/286942.286947
   Crary K., 1999, Conference Record of POPL '99. 26th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P262, DOI 10.1145/292540.292564
   Danielsson NA, 2010, LECT NOTES COMPUT SC, V6120, P100, DOI 10.1007/978-3-642-13321-3_8
   DeLine R, 2001, ACM SIGPLAN NOTICES, V36, P59, DOI 10.1145/381694.378811
   DETLEFS DL, 1998, 156 SRC
   Dietl W, 2005, J OBJECT TECHNOL, V4, P5, DOI 10.5381/jot.2005.4.8.a1
   Dinsdale-Young T., 2010, CONCURRENT ABSTRACT
   Dinsdale-Young T., VIEWS COMPOSIT UNPUB
   Dockins R, 2009, LECT NOTES COMPUT SC, V5904, P161, DOI 10.1007/978-3-642-10672-9_13
   Fahndrich M., 2006, Operating Systems Review, V40, P177, DOI 10.1145/1218063.1217953
   FAHNDRICH M, 2002, P ACM C PROGR LANG D, V37, P13
   Gapeyev V, 2002, J FUNCT PROGRAM, V12, P511, DOI 10.1017/S0956796802004318
   Gauthier N, 2004, ACM SIGPLAN NOTICES, V39, P150, DOI 10.1145/1016848.1016872
   Girard J.-Y., 1972, PhD thesis
   Glew N, 2002, LECT NOTES COMPUT SC, V2305, P147
   GOTSMAN A, 2007, MSRTR200739
   HARPER R, 1994, INFORM PROCESS LETT, V51, P201, DOI 10.1016/0020-0190(94)90120-1
   Hoare C. A. R., 1972, Acta Informatica, V1, P271, DOI 10.1007/BF00289507
   Hobor A, 2008, LECT NOTES COMPUT SC, V4960, P353
   Hofman M., 2000, Nordic Journal of Computing, V7, P258
   HOGG J, 1991, SIGPLAN NOTICES, V26, P271
   Ishtiaq S, 2001, ACM SIGPLAN NOTICES, V36, P14, DOI 10.1145/373243.375719
   Launchbury J., 1995, LISP and Symbolic Computation, V8, P293, DOI 10.1007/BF01018827
   MACQUEEN D, 1986, INFORM CONTROL, V71, P95, DOI 10.1016/S0019-9958(86)80019-5
   MAZURAK K, 2010, WORKSH TYP LANG DES, P77
   MITCHELL JC, 1988, INFORM COMPUT, V76, P211, DOI 10.1016/0890-5401(88)90009-0
   Monnier S., 2008, STATICALLY IN PRESS
   MULLER P, 2001, 279 FERN HAG
   Nanevski A, 2010, ACM SIGPLAN NOTICES, V45, P261, DOI 10.1145/1707801.1706331
   Nanevski A, 2008, J FUNCT PROGRAM, V18, P865, DOI 10.1017/S0956796808006953
   O'Hearn PW, 2007, THEOR COMPUT SCI, V375, P271, DOI 10.1016/j.tcs.2006.12.035
   O'Hearn PW, 2004, ACM SIGPLAN NOTICES, V39, P268, DOI [10.1145/982962.964024, 10.1145/1498926.1498929]
   Peyton Jones S. L., 1993, Conference Record of the Twentieth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P71, DOI 10.1145/158511.158524
   Pilkiewicz A., 2011, WORKSH TYP LANG DES
   Pollack R, 2012, J AUTOM REASONING, V49, P185, DOI 10.1007/s10817-011-9229-y
   Pottier F., 2009, 3 COMMENTS ANT UNPUB
   Pottier F., 2012, PROGRAMMING PE UNPUB
   Pottier F., 2012, ACCOMPANYING COQ SCR
   POTTIER F, 2009, GEN HIGHER ORD UNPUB
   Pottier F, 2008, IEEE S LOG, P331, DOI 10.1109/LICS.2008.16
   Reus B, 2006, LECT NOTES COMPUT SC, V4207, P575
   Reynolds J. C., 1974, Programming Symposium, P408
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Schwinghammer J., 2012, MATH STRUCT COMPUT S
   Schwinghammer J, 2011, LECT NOTES COMPUT SC, V6604, P305, DOI 10.1007/978-3-642-19805-2_21
   Schwinghammer J, 2010, LECT NOTES COMPUT SC, V6014, P2, DOI 10.1007/978-3-642-12032-9_2
   Schwinghammer J, 2009, LECT NOTES COMPUT SC, V5771, P440, DOI 10.1007/978-3-642-04027-6_32
   Smith F, 2000, LECT NOTES COMPUT SC, V1782, P366
   Swamy N, 2006, SCI COMPUT PROGRAM, V62, P122, DOI 10.1016/j.scico.2006.02.003
   TALPIN JP, 1994, INFORM COMPUT, V111, P245, DOI 10.1006/inco.1994.1046
   Tan G, 2009, LECT NOTES COMPUT SC, V5904, P178
   Tofte M, 1997, INFORM COMPUT, V132, P109, DOI 10.1006/inco.1996.2613
   Tov JA, 2011, ACM SIGPLAN NOTICES, V46, P447, DOI 10.1145/1925844.1926436
   Tov JA, 2010, LECT NOTES COMPUT SC, V6012, P550, DOI 10.1007/978-3-642-11957-6_29
   Urban C, 2008, J AUTOM REASONING, V40, P327, DOI 10.1007/s10817-008-9097-2
   Vouillon J, 2004, ACM SIGPLAN NOTICES, V39, P52, DOI 10.1145/982962.964006
   Walker D., 2000, TYP COMP 3 INT WORKS, V2071, P177, DOI [10.1007/3-540-45332-6\_7, DOI 10.1007/3-540-45332-6]
   Walker David, 2005, Advanced Topics in Types and Programming Languages, chapter Substructural Type Systems, P3
   Wright A. K., 1995, LISP and Symbolic Computation, V8, P343, DOI 10.1007/BF01018828
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
   [No title captured]
NR 88
TC 12
Z9 13
U1 0
U2 3
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD JAN
PY 2013
VL 23
IS 1
BP 38
EP 144
DI 10.1017/S0956796812000366
PG 107
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 048QS
UT WOS:000311928200002
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Morihata, A
   Kakehi, K
   Hu, ZJ
   Takeichi, M
AF Morihata, Akimasa
   Kakehi, Kazuhiko
   Hu, Zhenjiang
   Takeichi, Masato
TI Manipulating accumulative functions by swapping call-time and
   return-time computations
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID PROGRAM TRANSFORMATION; DEFORESTATION; FUSION; ORDER
AB Functional languages are suitable for transformational developments of programs. However, accumulative functions, or in particular tail-recursive functions, are known to be less suitable for manipulation. In this paper, we propose a program transformation named "IO swapping" that swaps call-time and return-time computations. It moves computations in accumulative parameters to results and thereby enables interesting transformations. We demonstrate effectiveness of IO swapping by several applications: deforestation, higher order removal, program inversion, and manipulation of circular programs.
C1 [Morihata, Akimasa] Tohoku Univ, Sendai, Miyagi 980, Japan.
   [Kakehi, Kazuhiko] Univ Tokyo, Tokyo, Japan.
   [Hu, Zhenjiang] Res Org Informat & Syst, Natl Inst Informat, Chiyoda Ku, Tokyo 1018430, Japan.
   [Takeichi, Masato] Natl Inst Acad Degrees & Univ Evaluat, Kodaira, Tokyo 1878587, Japan.
C3 Tohoku University; University of Tokyo; Research Organization of
   Information & Systems (ROIS); National Institute of Informatics (NII) -
   Japan
RP Morihata, A (corresponding author), Tohoku Univ, Sendai, Miyagi 980, Japan.
EM morihata@riec.tohoku.ac.jp
RI Morihata, Akimasa/KFR-7683-2024
OI Morihata, Akimasa/0000-0003-2741-5954
CR [Anonymous], 2003, Haskell 98 language and libraries: the revised report
   Backhouse R, 1999, LECT NOTES COMPUT SC, V1608, P28
   BIRD R, 1989, INTRO FUNCTIONAL PRO
   BIRD RS, 1984, ACTA INFORM, V21, P239, DOI 10.1007/BF00264249
   BOITEN EA, 1992, SCI COMPUT PROGRAM, V18, P139, DOI 10.1016/0167-6423(92)90008-Y
   Boyer R. S., 1976, P POPL 76 3 ACM S PR, P171
   BOYER RS, 1975, J ACM, V22, P129, DOI 10.1145/321864.321875
   BURSTALL RM, 1977, J ACM, V24, P44, DOI 10.1145/321992.321996
   Chin W.N., 1994, J FUNCT PROGRAM, V4, P515
   Correnson L, 1999, LECT NOTES COMPUT SC, V1702, P360
   Danvy O, 2005, FUND INFORM, V66, P397
   Fernandes J.P., 2011, P 20 ACM SIGPLAN WOR, P131
   Fernandes J.P., 2007, P 2007 ACM SIGPLAN S, P102
   Giesl J, 2000, LECT NOTES COMPUT SC, V1817, P293, DOI 10.1007/10720327_17
   Giesl J, 2007, J LOGIC ALGEBR PROGR, V71, P79, DOI 10.1016/j.jlap.2006.11.001
   Gill A., 1993, P C FUNCT PROGR LANG, P223, DOI DOI 10.1145/165180.165214
   GILL A, 1996, THESIS GLASGOW U GLA
   Glück R, 2005, FUND INFORM, V66, P367
   Katsumata SY, 2008, J FUNCT PROGRAM, V18, P781, DOI 10.1017/S095679680800693X
   Kuhnemann A., 2001, Rewriting Techniques and Applications. 12th International Conference, RTA 2001. Proceedings (Lecture Notes in Computer Science Vol.2051), P154
   Kühnemann A, 1999, LECT NOTES COMPUT SC, V1722, P114
   Kühnemann A, 1998, LECT NOTES COMPUT SC, V1530, P146
   Matsuda K, 2010, LECT NOTES COMPUT SC, V6012, P448, DOI 10.1007/978-3-642-11957-6_24
   MEIJER E, 1991, LECT NOTES COMPUT SC, V523, P124
   Mogensen TA, 2007, LECT NOTES COMPUT SC, V4378, P322
   Morihata A., 2006, THESIS U TOKYO JAPAN
   Morihata A, 2006, LECT NOTES COMPUT SC, V4014, P379, DOI 10.1007/11783596_22
   Nishimura S, 2003, LECT NOTES COMPUT SC, V2895, P358
   NISHIMURA S, 2004, P 2004 ACM SIGPLAN S, P101
   Pardo Alberto., 2009, Proceedings of the 2009 ACM SIGPLAN Symposium on Partial Evaluation and Semantics-based Program Manipulation, PEPM 2009, Savannah, GA, USA, January 19-20, 2009, P81, DOI DOI 10.1145/1480945.1480958
   ROY P.V., 2004, CONCEPTS TECHNIQUES
   Svenningsson J, 2002, ACM SIGPLAN NOTICES, V37, P124, DOI 10.1145/583852.581491
   Takano A., 1995, Conference Record of FPCA '95. SIGPLAN-SIGARCH-WG2.8. Conference on Functional Programming Languages and Computer Architecture, P306, DOI 10.1145/224164.224221
   Fernández JT, 2007, PIXEL-BIT, P95, DOI 10.1145/1291201.1291216
   Voigtlander J., 2004, Higher-Order and Symbolic Computation, V17, P129, DOI 10.1023/B:LISP.0000029450.36668.cb
   Voigtländer J, 2004, J FUNCT PROGRAM, V14, P317, DOI 10.1017/S0956796803004933
   WADLER P, 1990, THEOR COMPUT SCI, V73, P231, DOI 10.1016/0304-3975(90)90147-A
   WAND M, 1980, J ACM, V27, P164, DOI 10.1145/322169.322183
NR 38
TC 0
Z9 0
U1 0
U2 1
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD MAY
PY 2012
VL 22
BP 275
EP 299
DI 10.1017/S0956796812000111
PN 3
PG 25
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 975TB
UT WOS:000306533300003
OA Bronze
DA 2024-07-18
ER

PT J
AU Sewell, P
   Nardelli, FZ
   Owens, S
   Peskine, G
   Ridge, T
   Sarkar, S
   Strnisa, R
AF Sewell, Peter
   Nardelli, Francesco Zappa
   Owens, Scott
   Peskine, Gilles
   Ridge, Thomas
   Sarkar, Susmit
   Strnisa, Rok
TI Ott: Effective tool support for the working semanticist
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID PROGRAMMING LANGUAGE; COMPILER; SYSTEMS; LOGIC
AB Semantic definitions of full-scale programming languages are rarely given, despite the many potential benefits. Partly this is because the available metalanguages for expressing semantics usually either (LTEX)-T-A for informal mathematics or the formal mathematics of a proof assistant make it Much harder than necessary to work with large definitions. We present a metalanguage specifically designed for this problem, and a tool, Ott, that sanity-checks Such definitions and compiles them into proof assistant code for Coq, HOL, and Isabelle/HOL, together with (LTEX)-T-A code for production-quality typesetting, and OCaml boilerplate. The main innovations are (1) metalanguage design to make definitions concise, and easy to read and edit: (2) an expressive but intuitive metalanguage for specifying binding structures; and (3) compilation to proof assistant code. This has been tested ill Substantial ease Studies, including modular Specifications of calculi from the TAPL text, a Lightweight Java with Java JSR 277/294 module system proposals, and a large fragment of OCaml (OCaml(light), 310 rules). with mechanised proofs of various soundness results. Our aim with this work is to enable a phase change: making it feasible to work routinely, without heroic effort, With rigorous semantic definitions of realistic languages.
C1 [Sewell, Peter; Owens, Scott; Peskine, Gilles; Ridge, Thomas; Sarkar, Susmit; Strnisa, Rok] Univ Cambridge, Comp Lab, Cambridge CB3 0FD, England.
   [Nardelli, Francesco Zappa] INRIA Paris Rocquencourt, F-78153 Le Chesnay, France.
C3 University of Cambridge
RP Sewell, P (corresponding author), Univ Cambridge, Comp Lab, William Gates Bldg,15 JJ Thomson Ave, Cambridge CB3 0FD, England.
EM Peter.Sewell@cl.cam.ac.uk
OI Sewell, Peter/0000-0001-9352-1013; Owens, Scott/0000-0002-7437-4780;
   Sarkar, Susmit/0000-0002-4259-9213
FU EPSRC [GR/T11715, EP/C510712, EP/F036345]; Royal Society
FX We thank the other members of the POPLmark team, especially Benjamin
   Pierce, Stephanie Weirich and Steve Zdancewic, for interesting
   discussions on this work, James Leifer for comments on a draft; Arthur
   Chargueraud for his work on the Metatheory library for Coq; Our early
   adopters for user feedback; and Keith Wansbrough, Matthew Fairbairn and
   Torn Wilkie for their work on various Ott predecessors. We acknowledge
   the support of EPSRC grants GR/T11715, EP/C510712 and EP/F036345, and a
   Royal Society University Research Fellowship (Sewell).
CR ALDRICH J, 2008, P 2008 INT WORKSH FU, P31
   [Anonymous], 2003, Haskell 98 language and libraries: the revised report
   Aspinall D, 2000, LECT NOTES COMPUT SC, V1785, P38
   AYDEMIR B, 2009, LNGEN TOOL SUPPORT L
   Aydemir BE, 2005, LECT NOTES COMPUT SC, V3603, P50
   Aydemir B, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P3, DOI 10.1145/1328438.1328443
   BARTHE G, 2001, LNCS, V2140, P2
   BENTON N, 2007, MECH BISIMULATION NU
   BERGHOFER S, 2006, ENTCS, V174, P53
   Blazy S, 2006, LECT NOTES COMPUT SC, V4085, P460
   Blazy S, 2009, J AUTOM REASONING, V43, P263, DOI 10.1007/s10817-009-9148-3
   Borras P., 1988, P SDE 3, P14
   Boulton RJ, 1997, LECT NOTES COMPUT SC, V1217, P81, DOI 10.1007/BFb0035382
   CARDELLI L, 1994, INFORM COMPUT, V109, P4, DOI 10.1006/inco.1994.1013
   CHARGUERAUD A, 2006, ANNOTATED BIBLIO FOR
   Cheney J, 2004, LECT NOTES COMPUT SC, V3132, P269, DOI 10.1007/978-3-540-27775-0_19
   *COQ, 2008, COQ PROOF ASS V 8 1
   CURIEN PL, 1991, LECT NOTES COMPUT SC, V526, P731
   DELAWARE B, 2009, P AOSD WORKSH FDN AS, P31
   Dijkstra A, 2006, LECT NOTES COMPUT SC, V3945, P30
   Fournet C., 1996, LECT NOTES COMPUTER, V1119, P406
   Fournet C, 2008, LECT NOTES COMPUT SC, V4960, P383
   Gray KE, 2008, LECT NOTES COMPUT SC, V5142, P52, DOI 10.1007/978-3-540-70592-5_4
   GREENBERG M, 2009, P 37 ACM SIGACT SIGP
   GUNTER E, 1995, COMPUT J, V38, P142, DOI 10.1093/comjnl/38.2.142
   *HOL, 2007, HOL 4 SYST KAN 4 REL
   *IS, 2008, IS 2008
   JIA L, 2009, P 37 ACM SIGACT SIGP
   KAHRS S, 1993, ECSLFCS93257 U ED
   KLEIN G, 2009, ARCH FORMAL PROOFS
   Klein G, 2006, ACM T PROGR LANG SYS, V28, P619, DOI 10.1145/1146809.1146811
   Klint P., 1993, ACM Transactions on Software Engineering and Methodology, V2, P176, DOI 10.1145/151257.151260
   LAKIN MR, 2007, 8 S TRENDS IN PRESS, P19
   Lee Daniel K., 2007, POPL 2007. The 34th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P173, DOI 10.1145/1190216.1190245
   LEE P, 1988, P 3 AC SIGSOFT SIGPL, P25
   Leroy X., 1996, Journal of Functional Programming, V6, P667, DOI 10.1017/S0956796800001933
   LEROY X, 2005, OBJECTIVE CAML SYSTE
   Levin MY, 2003, J FUNCT PROGRAM, V13, P295, DOI 10.1017/S0956796802004550
   Matthews J, 2004, LECT NOTES COMPUT SC, V3091, P301
   McPeak S, 2004, LECT NOTES COMPUT SC, V2985, P73
   Milner R., 1972, Proceedings of an ACM Conference on Proving Assertations about Programs, P1, DOI 10.1145/800235.807067
   Milner R., 1990, The Definition of Standard ML
   Moors Adriaan, 2008, INT WORKSH FDN OBJ O
   MOSSES PD, 2002, LNCS, V2422, P21
   Norrish M, 1999, LECT NOTES COMPUT SC, V1576, P147
   OWENS C, 1995, P 1 IS US WORKSH, P36
   OWENS S, 2006, P 11 ACM SIGPLAN INT, P87
   Owens S, 2008, LECT NOTES COMPUT SC, V4960, P1
   PESKINE G, 2007, BINDING SUBSTITUTION
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   PITTS AM, 1993, LECT NOTES COMPUTER, V711, P122
   POLLACK R, 2006, REASONING LANGUAGES
   Pottier F, 2006, ELECTRON NOTES THEOR, V148, P27, DOI 10.1016/j.entcs.2005.11.039
   REKERS J, 1992, THESIS U AMSTERDAM
   REPS T, 1984, P ACM SIGSOFT SIGPLA, P42
   ROSSBERG A, 2001, DEFECTS REVISED DEFI
   SEWELL P, 2007, P 12 ACM S PRINC PRO, P1
   SEWELL P, 2007, OTT
   SEWELL P, 2004, UCAMCLTR605 U CAMBR
   Sewell P, 2007, J FUNCT PROGRAM, V17, P547, DOI 10.1017/S0956796807006442
   SHINWELL MR, 2003, P 8 ACM SIGPLAN INT, P263
   SPERBER M, 2007, REVISED ALGORITHMIC
   Strachey C., 1966, FORMAL LANGUAGE DESC, P198
   STRNISA R, 2007, P INT C OBJ OR PROGR, P499
   SYME D, 1993, LECT NOTES COMPUTER, V780, P43
   Terrasse D, 1995, LECT NOTES COMPUT SC, V936, P230
   TSE S, 2008, MSCIS0811 U PENNS
   *TWELF, 2005, TWELF 1 5
   Urban C, 2008, J AUTOM REASONING, V40, P327, DOI 10.1007/s10817-008-9097-2
   Vafeiadis V, 2007, LECT NOTES COMPUT SC, V4703, P256
   VANINWEGEN M, 1996, MSCIS9631 U PENNS CO
   Visser Eelco, 1997, Syntax Definition for Language Prototyping
   XIAO Y, 2001, HIGHER ORDER SYMBOLI, V14, P387
   XIAO Y, 2000, 1 INT WORKSH RUL BAS
   Zalewski M, 2009, J OBJECT TECHNOL, V8, P105, DOI 10.5381/jot.2009.8.5.a2
   Zalewski Marcin., 2008, A semantic definition of separate type checking in C++ with concepts. Abstract syntax and complete semantic definition
NR 76
TC 71
Z9 79
U1 0
U2 3
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD JAN
PY 2010
VL 20
BP 71
EP 122
DI 10.1017/S0956796809990293
PN 1
PG 52
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 562SH
UT WOS:000275074100005
OA Bronze
DA 2024-07-18
ER

PT J
AU Hinze, R
AF Hinze, Ralf
TI The Bird Tree
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID RATIONALS
C1 Univ Oxford, Comp Lab, Oxford OX1 3QD, England.
C3 University of Oxford
RP Hinze, R (corresponding author), Univ Oxford, Comp Lab, Wolfson Bldg,Parks Rd, Oxford OX1 3QD, England.
EM ralf.hinze@comlab.ox.ac.uk
CR AIGNER M, 2004, PROOFS BOOK
   [Anonymous], 1994, FDN COMPUTER SCI
   Backhouse R, 2008, LECT NOTES COMPUT SC, V5133, P79
   Bird RS, 2006, LECT NOTES COMPUT SC, V4014, P90, DOI 10.1007/11783596_9
   Calkin N, 2000, AM MATH MON, V107, P360, DOI 10.2307/2589182
   DIJKSTRA EW, 1976, SELECTED WRITINGS CO, P215
   Gibbons J, 2006, J FUNCT PROGRAM, V16, P281, DOI 10.1017/S0956796806005880
   HINZE R, 2008, P 13 ACM SIGPLAN INT, P189
   Mcbride C, 2008, J FUNCT PROGRAM, V18, P1, DOI 10.1017/S0956796807006326
   Peyton JonesS., 2003, HASKELL 98 LANGUAGE
   Rutten JJMM, 2003, THEOR COMPUT SCI, V308, P1, DOI 10.1016/S0304-3975(02)00895-2
   SLOANE NJA, 2009, ON LINE ENCY INTEGER
NR 12
TC 7
Z9 7
U1 0
U2 1
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD SEP
PY 2009
VL 19
BP 491
EP 508
DI 10.1017/S0956796809990116
PG 18
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 506GM
UT WOS:000270762600002
OA Bronze
DA 2024-07-18
ER

PT J
AU Jones, SP
   Vytiniotis, D
   Weirich, S
   Shields, M
AF Jones, Simon Peyton
   Vytiniotis, Dimitrios
   Weirich, Stephanie
   Shields, Mark
TI Practical type inference for arbitrary-rank types
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID POLYMORPHIC TYPE INFERENCE; CALCULUS
AB Haskell's popularity has driven the need for ever more expressive type system features, most of which threaten the decidability and practicality of Damas-Milner type inference. One such feature is the ability to write functions with higher-rank types - that is, functions that take polymorphic functions as their arguments. Complete type inference is known to be undecidable for higher-rank (impredicative) type systems, but in practice programmers are more than willing to add type annotations to guide the type inference engine, and to document their code. However, the choice of just what annotations are required, and what changes are required in the type system and its inference algorithm, has been an ongoing topic of research. We take as our starting point a lambda-calculus proposed by Odersky and Laufer. Their system supports arbitrary-rank polymorphism through the exploitation of type annotations on lambda-bound arguments and arbitrary sub-terms. Though elegant, and more convenient than some other proposals, Odersky and Laufer's system requires many annotations. We show how to use local type inference (invented by Pierce and Turner) to greatly reduce the annotation burden, to the point where higher-rank types become eminently usable. Higher-rank types have a very modest impact on type inference. We substantiate this claim in a very concrete way, by presenting a complete type-inference engine, written in Haskell, for a traditional Damas-Milner type system, and then showing how to extend it for higher-rank types. We write the type-inference engine using a monadic framework: it turns out to be a particularly compelling example of monads in action. The paper is long, but is strongly tutorial in style. Although we use Haskell as our example source language, and our implementation language, much of our work is directly applicable to any ML-like functional language.
C1 Microsoft Corp, Res, Redmond, WA 98052 USA.
   Univ Penn, Philadelphia, PA 19104 USA.
C3 Microsoft; University of Pennsylvania
RP Jones, SP (corresponding author), Microsoft Corp, Res, Redmond, WA 98052 USA.
OI Weirich, Stephanie/0000-0002-6756-9168
CR *ACM, 2003, ACM SIGPLAN INT C FU
   *ACM, 2005, ACM SIGPLAN INT C FU
   [Anonymous], 1995, LISP SYMB COMPUT, DOI DOI 10.1007/BF01018827
   [Anonymous], 1995, Ph. D. Dissertation
   [Anonymous], J FUNCT PROGRAM
   BAARS AL, 2002, ACM SIGPLAN INT C FU, P157
   CARDELLI L, 1987, SCI COMPUT PROGRAM, V8, P147, DOI 10.1016/0167-6423(87)90019-0
   CLEMENT D, 1986, ACM S LISP FUNCT PRO, P13
   DAMAS L, 1982, C REC 9 ANN ACM S PR, P207
   Garrigue J, 1999, INFORM COMPUT, V155, P134, DOI 10.1006/inco.1999.2830
   GILL A, 1993, ACM C FUNCT PROGR CO, P223
   Girard Jean-Yves., 1990, LOGICAL FDN FUNCTION
   HANCOCK P, 1987, IMPLEMENTATION FUNCT, P163
   HEEREN B, 2003, ACM SIGPLAN INT C FU
   HINZE R, 2001, J FUNCTIONAL PROGRAM, V1
   Hinze Ralf, 2000, 27 ANN ACM SIGPLAN S, P119
   HUET G, 2002, LNCS
   JONES MP, 1999, P 1999 HASK WORKSH
   Jones SLP, 1998, SCI COMPUT PROGRAM, V32, P3, DOI 10.1016/S0167-6423(97)00029-4
   JONES SP, 2001, NATO ASI SER, P47
   KFOURY AJ, 1992, INFORM COMPUT, V98, P228, DOI 10.1016/0890-5401(92)90020-G
   KFOURY AJ, 1994, ACM S LISP FUNCT PRO, P196
   Lämmel R, 2003, ACM SIGPLAN NOTICES, V38, P26, DOI 10.1145/640136.604179
   LEBOTLAN D, 2003, ACM SIGPLAN INT C FU
   Lee OS, 1998, ACM T PROGR LANG SYS, V20, P707, DOI 10.1145/291891.291892
   LEIJEN D, 2005, ACM SIGPLAN INT C FU
   LONGO G, 1995, LOGIC COMPUTER SCI, P292
   MILLER D, 1992, J SYMB COMPUT, V14, P321, DOI 10.1016/0747-7171(92)90011-R
   MILNER R, 1978, JESS, V13
   MITCHELL JC, 1988, INFORM COMPUT, V76, P211, DOI 10.1016/0890-5401(88)90009-0
   ODERSKY M, 1996, 23 ACM S PRINC PROGR, P54
   ODERSKY M, 2001, 28 ACM S PRINC PROGR
   OKASAKI C, 1999, ACM SIGPLAN INT C FU, P28
   PIERCE BC, 1998, 25 ACM S PRINC PROGR, P252
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Pottier Francois, 2004, Advanced Topics in Types and Programming Languages
   REMY D, 2005, ACM SIGPLAN INT C FU
   SHAO Z, 1997, P 1997 ACM SIGPLAN W
   SHIELDS M, 2002, LEXICALLY SCOPED TYP
   TARDITI D, 1996, ACM SIGPLAN C PROGR, P181
   Tiuryn J, 2001, INFORM COMPUT, V164, P345, DOI 10.1006/inco.2000.2941
   TIURYN J, 1996, P IEEE S LOG COMP SC
   VYTINIOTIS D, 2005, MSCIS0514 U PENNS
   Wells JB, 1999, ANN PURE APPL LOGIC, V98, P111, DOI 10.1016/S0168-0072(98)00047-5
NR 44
TC 86
Z9 92
U1 0
U2 2
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD JAN
PY 2007
VL 17
BP 1
EP 82
DI 10.1017/S0956796806006034
PN 1
PG 82
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 133MO
UT WOS:000244017200001
OA Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Hosaya, H
AF Hosaya, Haruo
TI Regular expression filters for XML
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB XML data are described by types involving regular expressions. This raises the question of what language feature is convenient for manipulating such data. Previously, we have given all answer to this question by proposing regular expression pattern matching. However, since this construct is derived from ML pattern matching, it does not have an iteration functionality in itself, which makes it cumbersome to process data typed by Kleene stars. In this paper, we propose a novel programming feature regular expression filters. This construct extends the previous proposal by permitting pattern clauses to be closed under arbitrary regular expression operators. This yields many convenient programming idioms such as non-uniform processing of sequences and almost-copying of trees. We further develop a type inference mechanism that obtains (1) types for pattern variables that are locally precise with respect to the type of input values and (2) a type for the result of the whole filter expression that is also locally precise with respect to the types of the body expressions. We discuss how our construct is useful in the practice of XML processing and, in particular, how our type inference is crucial for avoiding changes of programs when types of data to be processed evolve frequently.
C1 Univ Tokyo, Dept Comp Sci, Bunkyo Ku, Tokyo 113, Japan.
C3 University of Tokyo
RP Hosaya, H (corresponding author), Univ Tokyo, Dept Comp Sci, Bunkyo Ku, Hongo 7-3-1, Tokyo 113, Japan.
EM hahosoya@is.s.u-tokyo.ac.jp
CR Abiteboul S., 1997, International Journal on Digital Libraries, V1, P68, DOI 10.1007/s007990050001
   [Anonymous], 2000, EXTENSIBLE MARKUP LA
   [Anonymous], XML SCHEMA 0
   [Anonymous], 2001, EXTREME MARKUP LANGU
   BENZAKEN V, 2003, P 8 ACM SIGPLAN INT, P51
   Cardelli L, 2001, LECT NOTES COMPUT SC, V2028, P1
   Clark J., 2001, RELAX NG
   Clark James, 1999, Xsl transformations (xslt)
   CLUET S, 1998, INT WORKSH WEB DAT W, P118
   Colazzo D, 2004, ACM SIGPLAN NOTICES, V39, P126, DOI 10.1145/1016848.1016869
   COMON H, 1999, UNPUB TREE AUTOMATA
   Deutsch A., 1998, XML QL QUERY LANGUAG
   FANKHAUSER P, 2001, XQUERY 1 0 FORMAL SE
   Fernandez M, 2001, LECT NOTES COMPUT SC, V1973, P263
   *FORMATDATA, 2000, RECIPEML
   Frisch A, 2002, IEEE S LOG, P137, DOI 10.1109/LICS.2002.1029823
   GAPEYEV V, 2004, WORKSH PROGR LANG TE
   Hopcroft J.E., 1979, Introduction to Automata Theory, Languages, and Computation
   Hosoya H, 2003, J FUNCT PROGRAM, V13, P961, DOI 10.1017/S0956796802004410
   HOSOYA H, 2000, P INT C FUNCT PROGR, P11
   HOSOYA H, 2001, P 28 ACM SIGPLAN SIG, P67
   HOSOYA H, 2000, LECT NOTES COMPUTER, V1997, P226
   HOSOYA H, 2003, 1397 RIMS KYOT U
   HOSOYA H, 2005, 32 ANN ACM SIGPLAN S, P50
   *LLC REC, 2004, MUSICXML
   LU KZM, 2004, UNPUB XHASKEL REGULA
   MANETH S, 2005, P S PRINC DAT SYST P
   Martens W, 2003, LECT NOTES COMPUT SC, V2572, P64, DOI 10.1007/3-540-36285-1_5
   MEIJER E, 1999, UNPUB XM LAMBDA FUNC
   Milo Tova., 2000, Proc. 19th ACM Symposium on Principles of Database Systems (PODS'2000), P11, DOI DOI 10.1145/335168.335171
   Murata M., 2001, P 20 S PRINC DAT SYS, P126
   *NEWSP ASS AM, 1999, NAA CLASS ADV STAND
   Perst T, 2004, INFORM PROCESS LETT, V89, P141, DOI 10.1016/j.ipl.2003.05.001
   TOZAWA A, 2001, P ACM S DOC ENG
   *W3C, 2005, SYNCHR MULT INT LANG
   *W3C, 1998, W3C XML SPEC
NR 36
TC 2
Z9 2
U1 0
U2 1
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD NOV
PY 2006
VL 16
BP 711
EP 750
DI 10.1017/S0956796806005909
PN 6
PG 40
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 112KT
UT WOS:000242525400004
OA Bronze
DA 2024-07-18
ER

PT J
AU Grundy, J
   Melham, T
   O'Leary, J
AF Grundy, J
   Melham, T
   O'Leary, J
TI A reflective functional language for hardware design and theorem proving
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID FORMAL VERIFICATION; MODEL CHECKING; IMPLEMENTATION
AB This paper introduces reFL(ect), a functional programming language with reflection features intended for applications in hardware design and verification. The reFL(ect) language is strongly typed and similar to ML, but has quotation and antiquotation constructs. These may be used to construct and decompose expressions in the reFL(ect) language itself. The paper motivates and presents the syntax and type system of this language, which brings together a new combination of pattern-matching and reflection features targeted specifically at our application domain. It also gives an operational semantics based on a novel use of contexts as expression constructors, and it presents a scheme for compiling reFL(ect) programs using the same context mechanism.
C1 Intel Corp, Strateg CAD Labs, Hillsboro, OR 97124 USA.
   Univ Oxford, Comp Lab, Oxford OX1 3QD, England.
C3 Intel Corporation; University of Oxford
RP Grundy, J (corresponding author), Intel Corp, Strateg CAD Labs, Mail Stop JF4-211,2111 NE 25th Ave, Hillsboro, OR 97124 USA.
EM Jim.D.Grundy@intel.com; Tom.Melham@comlab.ox.ac.uk;
   John.W.O'Leary@intel.com
CR Aagaard MD, 2000, DES AUT CON, P201, DOI 10.1145/337292.337388
   Aagaard MD, 1999, LECT NOTES COMPUT SC, V1690, P323
   AASA A, 1988, LIS FUNCTIONAL PROGR, P96
   [Anonymous], 2019, LCP ISABELLE 2019
   [Anonymous], CRC053 SRI
   [Anonymous], 1989, Cambridge Tracts in Theoretical Computer Science
   [Anonymous], LECT NOTES COMPUTER
   Barras B, 2000, LECT NOTES COMPUT SC, V1869, P17
   BENAISSA Z, 1999, INTUITIONSITIC MODAL
   Berghofer S., 2002, LNCS, V2277, P24
   BJESSE P, 1998, FUNCTIONAL PROGRAMMI, P174
   CARDELLI L, 1985, COMPUT SURV, V17, P471, DOI 10.1145/6041.6042
   Church A., 1940, J. Symbolic Logic, V5, P56, DOI [10.2307/2266170, DOI 10.2307/2266170]
   Claessen K., 1999, Advances in Computing Science-ASIAN'99. 5th Asian Computing Science Conference. Proceedings (Lecture Notes in Computer Science Vol. 1742), P62
   Coquand T., 1986, LOGIC COMPUTER SCI, P227
   COQUAND T, 1991, STUDIES LOGIC FDN MA, V134, P555
   DERAUGLAUDRE D, 2003, COMPLP4 REFERENCE MA
   DOWEK G, 1993, COQ PROOF ASSISTANT, P154
   Gordon M. J. C., 1979, LNCS, V78
   Gordon M.J.C., 1993, Introduction to HOL: A theorem proving environment for higher order logic
   GORDON MJC, 1985, FORMAL ASPECTS VLSI, P153
   Greve David., 2000, COMPUTER AIDED REASO
   GRUNDY J, 2003, PRGRR0316 U OXF COMP
   HARPER R, 1986, 862 U ED LAB FDN COM
   HARRISON J, 2000, HOL LIGHT MANUAL
   Jones RB, 2001, IEEE DES TEST COMPUT, V18, P16, DOI 10.1109/54.936245
   Kaivola R, 2001, SIXTH IEEE INTERNATIONAL HIGH-LEVEL DESIGN VALIDATION AND TEST WORKSHOP, PROCEEDINGS, P115, DOI 10.1109/HLDVT.2001.972817
   Kaivola R, 2000, LECT NOTES COMPUT SC, V1869, P338
   KAUFMAN M, 2000, COMPUTER AIDED REASO
   KRSTIC C, 2003, CSE03014 OR HLTH SCI
   LEISIENRING AC, 1969, MATH LOGIC HILBERTS
   Leroy X., 1993, Journal of Functional Programming, V3, P431, DOI 10.1017/S0956796800000848
   LEROY X, 2003, OBJECTIVE CAML SYSTE
   MATTHEWS J, 1998, COMPUT LANG, P90
   MAUNY M, 1994, ML ITS APPL, P70
   Melham T., 1993, Higher order logic and hardware verification
   MOORE JS, 1998, LNCS, V1522, P334
   Muller O, 1997, COMPUT J, V40, P640, DOI 10.1093/comjnl/40.10.640
   Pasalic E, 2002, ACM SIGPLAN NOTICES, V37, P218, DOI 10.1145/583852.581499
   PAULSON L, 1983, SCI COMPUT PROGRAM, V3, P119, DOI 10.1016/0167-6423(83)90008-4
   SHEARD T, 2001, LECT NOTES COMPUTER, V2196, P2
   SHEARD T, 2000, HASKELL, P1
   SHEERAN M, 1983, THESIS U OXFORD
   Shields M., 1998, Conference Record of POPL '98: 25th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P289, DOI 10.1145/268946.268970
   Spirakis G, 2003, DES AUT CON, P416
   STUMP A, 1999, COQUANDS ANAL GIRARD
   Suppes P., 1957, INTRO LOGIC
   TAHA W, 2002, SIGPLAN NOTICES, V32, P203
   Taha W., 1999, THESIS OREGON GRADUA
   [No title captured]
NR 50
TC 26
Z9 29
U1 0
U2 1
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD MAR
PY 2006
VL 16
BP 157
EP 196
DI 10.1017/S0956796805005757
PN 2
PG 40
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 015TN
UT WOS:000235574000003
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Levin, MY
   Pierce, BC
AF Levin, MY
   Pierce, BC
TI TinkerType: a language for playing with formal systems
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB TinkerType is a pragmatic framework for compact and modular description of formal systems (type systems, operational semantics, logics, etc.). A family of related systems is broken down into a set of clauses - individual inference rules - and a set of features controlling the inclusion of clauses in particular systems. Simple static checks are used to help maintain consistency of the generated systems. We present TinkerType and its implementation and describe its application to two substantial repositories of typed lambda-calculi. The first repository covers a broad range of typing features, including subtyping, polymorphism, type operators and kinding, computational effects, and dependent types. It describes both declarative and algorithmic aspects of the systems, and can be used with our tool, the TinkerType Assembler, to generate calculi either in the form of typeset collections of inference rules or as executable NIL typecheckers. The second repository addresses a smaller collection of systems, and provides modularized proofs of basic safety properties.
C1 Univ Penn, Dept Comp & Informat Sci, Philadelphia, PA 19104 USA.
C3 University of Pennsylvania
RP Levin, MY (corresponding author), Univ Penn, Dept Comp & Informat Sci, 200 S 33Rd St, Philadelphia, PA 19104 USA.
CR [Anonymous], IEEE S LOG COMP SCI
   [Anonymous], ACM Computing Surveys, DOI [DOI 10.1145/242224.242420, 10.1145/242224.242420]
   [Anonymous], LECT NOTES COMPUTER
   [Anonymous], 1992, Semantics of programming languages: structures and techniques
   [Anonymous], 1996, A Theory of Objects
   Barendregt H., 1992, HDB LOGIC COMPUTER S, V2
   BASIN D, 1995, P TBIL S LANG LOG CO
   BERARDI S, 1988, MATH ANAL COQUANDHUE
   ESPINOSA DA, 1995, THESIS COLUMBIA U
   GAPEYEV V, 2000, INT C FUNCT PROGR IC
   GHELLI G, 1990, THESIS U PISA
   GOGUEN JA, 1984, LECT NOTES COMPUT SC, V164, P221
   HARPER R, 1993, J ACM, V40, P143, DOI 10.1145/138027.138060
   HARRISON W, 1993, ACM SIGPLAN NOTICES, V28, P411
   HARRISON W, 1998, P IEEE INT C COMP LA
   JACOBS B, 1999, STUDIES LOGIC FDN MA, V141
   LANDIN PJ, 1966, COMMUN ACM, V9, P157, DOI 10.1145/365230.365257
   LANDIN PJ, 1965, COMMUN ACM, V8, P89, DOI 10.1145/363744.363749
   LANDIN PJ, 1965, COMMUN ACM, V8, P158, DOI 10.1145/363791.363804
   LIANG S, 1995, ACM S PRINC PROGR LA, P333
   LIANG S, 1996, LECT NOTES COMPUTER, V1058, P219
   Mitchell John C., 1996, Foundation of computing series
   MOGGI E, 1989, FOURTH ANNUAL SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P14
   MOSSES PD, 1992, CAMBRIDGE TRACTS THE, V26
   Odersky M, 1999, THEOR PRACT OBJ SYST, V5, P35, DOI 10.1002/(SICI)1096-9942(199901/03)5:1<35::AID-TAPO4>3.0.CO;2-4
   OSSHER H, 1999, 214529671716APR99 RC
   PFENNING F, 1988, ACM PLDI, P199
   PIERCE BC, 1994, INFORM COMPUT, V112, P131, DOI 10.1006/inco.1994.1055
   PREHOFER C, 1997, LECT NOTES COMPUTER, V1241
   STEELE GL, 1994, ACM S PRINC PROGR LA, P472
   Tarr P., 1999, P 21 INT C SOFTW ENG
   TERLOUW J, 1989, UNPUB NADERE BEWIJST
NR 32
TC 10
Z9 11
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 40 WEST 20TH ST, NEW YORK, NY 10011-4221 USA
SN 0956-7968
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD MAR
PY 2003
VL 13
BP 295
EP 316
DI 10.1017/S0956796802004550
PN 2
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Arts &amp; Humanities Citation Index (A&amp;HCI)
SC Computer Science
GA 671RT
UT WOS:000182478400003
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Chan, JAT
   Li, YF
   Bowman, W
AF Chan, Jonathan
   LI, Yufeng
   Bowman, Williamj J.
TI Is sized typing for Coq practical?
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID RECURSIVE DEFINITIONS; TERMINATION; CALCULUS
AB Contemporary proof assistants such as Coq require that recursive functions be terminating and core cursive functions be productive to maintain logical consistency of their type theories, and some ensure these properties using syntactic checks. However, being syntactic, they are inherently delicate and restrictive, preventing users from easily writing obviously terminating or productive functions at their whim.Meanwhile, there exist many sized type theories that perform type-based termination and productivity checking, including theories based on the Calculus of (Co)Inductive Constructions (CIC), the core calculus underlying Coq. These theories are more robust and compositional in comparison. So why haven't they been adapted to Coq?In this paper, we venture to answer this question with CIC*, a sized type theory based on CIC. It extends past work on sized types in CIC with additional Coq features such as global and local definitions. We also present a corresponding size inference algorithm and implement it within Coq's kernel; for maximal backward compatibility with existing Coq developments, it requires no additional annotations from the user.In our evaluation of the implementation, we find a severe performance degradation when compiling parts of the Coq standard library, inherent to the algorithm itself. We conclude that if we wish to maintain backward compatibility, using size inference as a replacement for syntactic checking is impractical in terms of performance.
C1 [Chan, Jonathan; Bowman, Williamj J.] Univ British Columbia, Vancouver, BC, Canada.
   [LI, Yufeng] Univ Waterloo, Waterloo, ON, Canada.
C3 University of British Columbia; University of Waterloo
RP Chan, JAT (corresponding author), Univ British Columbia, Vancouver, BC, Canada.
EM jcxz@cs.ubc.ca; yufeng.li@uwaterloo.ca; wjb@williamjbowman.com
RI Liu, Zhiyu/JNR-8043-2023; guo, ppdop/KAL-9865-2024
OI Liu, Zhiyu/0000-0001-8351-1268; Bowman, William/0000-0002-6402-4840;
   Chan, Jonathan/0000-0003-0830-3180
FU Natural Sciences and Engineering Research Council of Canada (NSERC);
   Canada Graduate Scholarships - Master's (CGS M) programme; Conseil de
   recherches en sciences naturelles et en genie du Canada (CRSNG)
FX We gratefully thank Bruno Barras, Amin Timany, and Andreas Abel for
   helpful discussions on the metatheory, in particular on strong
   normalization, and Felipe Banados Schwerter for testing the
   implementation and finding bugs, as well as the anonymous reviewers for
   their time and patience in providing helpful comments. We acknowledge
   the support of the Natural Sciences and Engineering Research Council of
   Canada (NSERC), funding reference number RGPIN-2019-04207, and the
   Canada Graduate Scholarships - Master's (CGS M) programme. Cette
   recherche a ete financee par le Conseil de recherches en sciences
   naturelles et en genie du Canada (CRSNG), numero de reference
   RGPIN-2019-04207, et le Programme de bourses d'etudes superieures du
   Canada au niveau de la maitrise (BESC M).
CR Abbott M, 2004, LECT NOTES COMPUT SC, V3142, P59
   Abel A, 2006, THESIS LUDWIG MAXIMI
   Abel A, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158111
   Abel A, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110277
   Abel A, 2016, J FUNCT PROGRAM, V26, DOI 10.1017/S0956796816000022
   Abel A, 2012, ELECTRON P THEOR COM, P1, DOI 10.4204/EPTCS.77.1
   Abel A, 2010, ELECTRON P THEOR COM, P14, DOI 10.4204/EPTCS.43.2
   Aczel P., 1998, RELATING TYPE THEORI
   Amadio RM, 1998, LECT NOTES COMPUT SC, V1378, P48, DOI 10.1007/BFb0053541
   Barendregt H. P., 1993, LAMBDA CALCULI TYPES
   Barras B., 2012, THESIS U PARIS DIDER
   Barthe G, 2005, LECT NOTES COMPUT SC, V3461, P71
   Barthe G, 2004, MATH STRUCT COMP SCI, V14, P97, DOI 10.1017/S0960129503004122
   Barthe G, 2006, LECT NOTES ARTIF INT, V4246, P257, DOI 10.1007/11916277_18
   Barthe G, 2008, LECT NOTES COMPUT SC, V5213, P493, DOI 10.1007/978-3-540-87531-4_35
   Bellman R., 1958, Q APPL MATH, V16, P87
   Cormen T. H., 2009, DIFFERENCE CONSTRAIN
   Frade M. J., 2004, THESIS U MINHO BRAGA
   Giménez E, 1998, LECT NOTES COMPUT SC, V1443, P397, DOI 10.1007/BFb0055070
   Grégoire B, 2010, LECT NOTES COMPUT SC, V6397, P333, DOI 10.1007/978-3-642-16242-8_24
   Hughes J., 1996, Conference Record of POPL '96: The 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P410, DOI 10.1145/237721.240882
   Komori Y, 2014, STUD LOGICA, V102, P175, DOI 10.1007/s11225-013-9470-y
   Miquel A, 2002, LECT NOTES COMPUT SC, V2646, P240
   Sacchini J. L., 2015, JSACCHINI CICMINUS, DOI [10.5281/zenodo.3928999, DOI 10.5281/ZENODO.3928999]
   Sacchini J. L., 2011, THESES
   Sacchini J. L., 2016, COQINLINE732 TYPE BA
   Sacchini J. L., 2015, WELL FOUNDED S UNPUB
   Sacchini Jorge Luis, 2015, Zenodo, DOI 10.5281/ZENODO.5182857
   Sacchini JL, 2014, LECT NOTES COMPUT SC, V8475, P169, DOI 10.1007/978-3-319-07151-0_11
   Sacchini JL, 2013, IEEE S LOG, P233, DOI 10.1109/LICS.2013.29
   Severi P. G., 1993, COMPUTING SCI NOTES, V9324
   Smith J., 1995, INT WORKSH TYP PROOF, V996, P39, DOI [DOI 10.1007/3-540-60579-7_3, 10.1007/3-540- 60579-7]
   Sozeau M, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371076
   The Coq Development Team, 2021, Zenodo, DOI 10.5281/ZENODO.5661975
   The Coq Development Team, 2018, COQTERMINATIONDISCUS
   The Coq Development Team, 2021, The Coq Proof Assistant 8.13.2 Reference Manual
NR 36
TC 0
Z9 0
U1 0
U2 1
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD JAN 24
PY 2023
VL 33
AR e1
DI 10.1017/S0956796822000120
PG 55
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 8I6WZ
UT WOS:000921873800001
OA hybrid, Green Submitted
DA 2024-07-18
ER

PT J
AU Siek, JG
   Chen, TY
AF Siek, Jeremy G.
   Chen, Tianyu
TI Parameterized cast calculi and reusable meta-theory for gradually typed
   lambda calculi
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB The research on gradual typing has led to many variations on the Gradually Typed Lambda Calculus (GTLC) of Siek & Taha (2006) and its underlying cast calculus. For example, Wadler and Findler (2009) added blame tracking, Siek et al. (2009) investigated alternate cast evaluation strategies, and Herman et al. (2010) replaced casts with coercions for space efficiency. The meta-theory for the GTLC has also expanded beyond type safety to include blame safety (Tobin-Hochstadt & Felleisen, 2006), space consumption (Herman et al., 2010), and the gradual guarantees (Siek et al., 2015). These results have been proven for some variations of the GTLC but not others. Furthermore, researchers continue to develop variations on the GTLC, but establishing all of the meta-theory for new variations is time-consuming. This article identifies abstractions that capture similarities between many cast calculi in the form of two parameterized cast calculi, one for the purposes of language specification and the other to guide space-efficient implementations. The article then develops reusable meta-theory for these two calculi, proving type safety, blame safety, the gradual guarantees, and space consumption. Finally, the article instantiates this meta-theory for eight cast calculi including five from the literature and three new calculi. All of these definitions and theorems, including the two parameterized calculi, the reusable meta-theory, and the eight instantiations, are mechanized in Agda making extensive use of module parameters and dependent records to define the abstractions.
C1 [Siek, Jeremy G.; Chen, Tianyu] Indiana Univ, Bloomington, IN 47405 USA.
C3 Indiana University System; Indiana University Bloomington
RP Siek, JG (corresponding author), Indiana Univ, Bloomington, IN 47405 USA.
EM jsiek@indiana.edu; chen512@indiana.edu
RI Siek, Jeremy Graham/ABG-8845-2020
OI Chen, Tianyu/0009-0002-3279-5971
CR Ahmed A, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110283
   Ahmed A, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P201, DOI 10.1145/1926385.1926409
   Allende Esteban., 2013, Proc. Dynamic Languages Symposium, P27, DOI DOI 10.1145/2508168.2508171
   [Anonymous], 1980, FORMULAE AS TYPES NO
   Aydemir B. E., 2005, MECHANIZED METATHEOR
   Bierman G, 2014, LECT NOTES COMPUT SC, V8586, P257
   Bove A, 2009, LECT NOTES COMPUT SC, V5674, P73, DOI 10.1007/978-3-642-03359-9_6
   BRACHA G, 1993, SIGPLAN NOTICES, V28, P215, DOI 10.1145/167962.165893
   Bracha Gilad, 2004, OOPSLA WORKSH REV DY
   Castagna G, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110285
   Castagna G, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290329
   Chaudhuri A, FLOW STATIC TYPE CHE
   Chung Benjamin, 2018, ECOOP
   Eremondi J, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341692
   Felleisen Matthias, 1986, FORMAL DESCRIPTION P, P193
   Flanagan C, 2006, ACM SIGPLAN NOTICES, V41, P245, DOI 10.1145/1111320.1111059
   Garcia R, 2016, ACM SIGPLAN NOTICES, V51, P429, DOI 10.1145/2914770.2837670
   Garcia R, 2015, ACM SIGPLAN NOTICES, V50, P303, DOI [10.1145/2676726.2676992, 10.1145/2775051.2676992]
   Garcia R, 2013, ACM SIGPLAN NOTICES, V48, P417, DOI [10.1145/2544174.2500603, 10.1145/2500365.2500603]
   García-Pérez A, 2014, PEPM '14: PROCEEDINGS OF THE ACM SIGPLAN WORKSHOP ON PARTIAL EVALUATION AND PROGRAM MANIPULATION, P157, DOI 10.1145/2543728.2543742
   Greenman B, 2018, PROCEEDINGS OF THE ACM SIGPLAN WORKSHOP ON PARTIAL EVALUATION AND PROGRAM MANIPULATION (PEPM'18), P30, DOI 10.1145/3162066
   Greenman Ben, 2020, Ph. D. Dissertation
   Greenman Ben., 2018, PACMPL 2.ICFP, V71, P1
   Gronski Jessica, 2006, SCHEM FUNCT PROGR WO, P93
   HENGLEIN F, 1994, SCI COMPUT PROGRAM, V22, P197, DOI 10.1016/0167-6423(94)00004-2
   Herman David, 2010, Higher-Order and Symbolic Computation, V23, P59, DOI 10.1007/s10990-011-9066-z
   Herman D, 2007, TRENDS FUNCTIONAL PR, pXXVIII
   Kuhlenschmidt A, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P517, DOI 10.1145/3314221.3314627
   Lennon-Bertrand M, 2020, GRADUALIZING CALCULU
   Lu K.-C., 2020, THESIS INDIANA U
   Lu K.-C, 2020, WORKSH GRAD TYP
   Maidl AndreMurbach., 2014, Proc. Workshop on Dynamic Languages and Applications, P1
   Matthews J, 2007, CONFERENCE RECORD OF POPL 2007: THE 34TH ACM SIGPLAN SIGACT SYMPOSIUM ON PRINCIPLES OF PROGAMMING LANGUAGES, P3
   Muehlboeck F, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133880
   New MS, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371114
   Ningning Xie, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P3, DOI 10.1007/978-3-319-89884-1_1
   Nipkow T, 2007, LNCS, V2283
   Schwerter FB, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434342
   Siek J. G., 2006, TR06874 RIC U
   Siek J. G, 2012, SCHEM FUNCT PRPGR WO
   Siek J. G, 2013, ABS13120694 CORR
   Siek J. G., CUCS102106 U COL
   Siek J, 2007, LECT NOTES COMPUT SC, V4609, P2
   Siek J, 2015, ACM SIGPLAN NOTICES, V50, P425, DOI [10.1145/2737924.2737968, 10.1145/2813885.2737968]
   Siek J, 2009, LECT NOTES COMPUT SC, V5502, P17, DOI 10.1007/978-3-642-00590-9_2
   Siek Jeremy, 2006, WORKSHOP SCHEME FUNC, P81
   Siek JG, 2015, LECT NOTES COMPUT SC, V9032, P432, DOI 10.1007/978-3-662-46669-8_18
   Siek JG, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P365, DOI 10.1145/1706299.1706342
   Siek Jeremy G., 2015, LIPICS LEIBNIZ INT P, V32, P274, DOI 10.4230/LIPIcs.SNAPL.2015.274
   Siek Jeremy G., 2008, DLS
   Takikawa A., 2016, THESIS NE U
   Takikawa A, 2016, ACM SIGPLAN NOTICES, V51, P456, DOI 10.1145/2914770.2837630
   Takikawa A, 2012, ACM SIGPLAN NOTICES, V47, P793, DOI 10.1145/2398857.2384674
   Tobin-Hochstadt S, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P395, DOI 10.1145/1328438.1328486
   Tobin-Hochstadt Sam., 2006, Proc. DLS, P964, DOI DOI 10.1145/1176617.1176755
   Toro M, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290330
   Toro M, 2020, SCI COMPUT PROGRAM, V197, DOI 10.1016/j.scico.2020.102496
   Verlaguet J., HACK NEW PROGRAMMING
   Vitek J., 2016, SCRIPT PROGR EV WORK
   Vitousek M., 2016, SCRIPT PROGR EV WORK
   Vitousek M., 2017, S PRINC PROGR LANG
   Vitousek M. M., TR729 IND U
   Vitousek MM, 2019, PROCEEDINGS OF THE 15TH ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON DYNAMIC LANGUAGES (DLS '19), P28, DOI 10.1145/3359619.3359742
   Wadler P., 2007, WORKSH SCHEM FUNCT P, P15
   Wadler P., 2019, PROGRAMMING LANGUAGE
   Wadler P, 2009, LECT NOTES COMPUT SC, V5502, P1, DOI 10.1007/978-3-642-00590-9_1
NR 66
TC 2
Z9 2
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD NOV 11
PY 2021
VL 31
AR e30
DI 10.1017/S0956796821000241
PG 73
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA WV1ZZ
UT WOS:000717037900001
OA hybrid, Green Submitted
DA 2024-07-18
ER

PT J
AU Allais, G
   Atkey, R
   Chapman, J
   Mcbride, C
   Mckinna, J
AF Allais, Guillaume
   Atkey, Robert
   Chapman, James
   Mcbride, Conor
   Mckinna, James
TI A type- and scope-safe universe of syntaxes with binding: their
   semantics and proofs
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID MONADS
AB The syntax of almost every programming language includes a notion of binder and corresponding bound occurrences, along with the accompanying notions of alpha-equivalence, capture-avoiding substitution, typing contexts, runtime environments, and so on. In the past, implementing and reasoning about programming languages required careful handling to maintain the correct behaviour of bound variables. Modern programming languages include features that enable constraints like scope safety to be expressed in types. Nevertheless, the programmer is still forced to write the same boilerplate over again for each new implementation of a scope-safe operation (e.g., renaming, substitution, desugaring, printing), and then again for correctness proofs. We present an expressive universe of syntaxes with binding and demonstrate how to (1) implement scope-safe traversals once and for all by generic programming; and (2) how to derive properties of these traversals by generic proving. Our universe description, generic traversals and proofs, and our examples have all been formalised in Agda and are available in the accompanying material available online at https://github.com/gallais/generic-syntax.
C1 [Allais, Guillaume] Univ St Andrews, St Andrews KY16 9AJ, Fife, Scotland.
   [Atkey, Robert; Mcbride, Conor] Univ Strathclyde, Glasgow G1 1XQ, Lanark, Scotland.
   [Chapman, James] Input Output HK Ltd, Edinburgh EH8 9BT, Midlothian, Scotland.
   [Mckinna, James] Heriot Watt Univ, Edinburgh EH14 4AS, Midlothian, Scotland.
C3 University of St Andrews; University of Strathclyde; Heriot Watt
   University
RP Allais, G (corresponding author), Univ St Andrews, St Andrews KY16 9AJ, Fife, Scotland.
EM guillaume.allais@ens-lyon.org; robert.atkey@strath.ac.uk;
   james.chapman@iohk.io; conor.mcbride@strath.ac.uk; J.McKinna@hw.ac.uk
RI ; Atkey, Robert/I-3074-2016; Chapman, James/I-3297-2015
OI McBride, Conor/0000-0003-1487-0886; Atkey, Robert/0000-0002-4414-5047;
   Allais, Guillaume/0000-0002-4091-657X; Chapman,
   James/0000-0001-9036-8252
FU EPSRC [EP/T026960/1, EP/M016951/1]; European Research Council under the
   European Union's Seventh Framework Programme (FP7/2007-2013)/ERC grant
   [320571]; IOHK; LFCS, School of Informatics, University of Edinburgh
FX Allais acknowledges the support of EPSRC grant no. EP/M016951/1 Homotopy
   Type Theory: Programming and Verification. Part of the research leading
   to these results has also received funding from the European Research
   Council under the European Union's Seventh Framework Programme
   (FP7/2007-2013)/ERC grant agreement nr. 320571.; Atkey acknowledges the
   support of EPSRC grant no. EP/T026960/1 AISEC: AI Secure and Explainable
   by Construction.; Chapman thanks IOHK for their support.; McKinna
   gratefully acknowledges the support of LFCS, School of Informatics,
   University of Edinburgh.
CR Abbott M, 2005, FUND INFORM, V65, P1
   Abel A, 2019, J FUNCT PROGRAM, V29, DOI 10.1017/S0956796819000170
   Abel A, 2013, ACM SIGPLAN NOTICES, V48, P27, DOI 10.1145/2480359.2429075
   Abel A, 2010, ELECTRON P THEOR COM, P14, DOI 10.4204/EPTCS.43.2
   Allais G., 2018, JFLA 2018 JOURN FRAN, P45
   Allais G, 2017, PROCEEDINGS OF THE 6TH ACM SIGPLAN CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS, CPP'17, P195, DOI 10.1145/3018610.3018613
   Altenkirch T, 2003, INT FED INFO PROC, V115, P1
   Altenkirch T., 1995, Category Theory and Computer Science. 6th International Conference, CTCS '95 Proceedings, P182
   Altenkirch T, 1999, LECT NOTES COMPUT SC, V1683, P453
   Altenkirch T, 2015, J FUNCT PROGRAM, V25, DOI 10.1017/S095679681500009X
   Altenkirch T, 2014, J FORMALIZ REASON, V7, P1
   Altenkirch T, 2015, LOG METH COMPUT SCI, V11, DOI 10.2168/LMCS-11(1:3)2015
   [Anonymous], 2017, COQ V 8 7
   [Anonymous], 2017, P LOG FRAM MET THEOR
   [Anonymous], 1997, The Definition of Standard ML
   [Anonymous], 2012, WORKSH GEN PROGR 201, DOI DOI 10.1145/2364394.2364403
   [Anonymous], 1972, INDAGATIONES MATHEMA, DOI DOI 10.1016/1385-7258(72)90034-0
   Appel A. W., 1997, Journal of Functional Programming, V7, P515, DOI 10.1017/S0956796897002839
   Atkey, 2015, ALGEBRAIC APPROACH T
   Aydemir BE, 2005, LECT NOTES COMPUT SC, V3603, P50
   Barber A., 1996, ECSLFCS96347 U ED
   BELLEGARDE F, 1994, SCI COMPUT PROGRAM, V23, P287, DOI 10.1016/0167-6423(94)00022-0
   Benke M., 2003, Nordic Journal of Computing, V10, P265
   Benton N., 1993, Typed Lambda Calculi and Applications. International Conference. TLCA '93, P75, DOI 10.1007/BFb0037099
   Benton N, 2012, J AUTOM REASONING, V49, P141, DOI 10.1007/s10817-011-9219-0
   Berger U., 1993, Typed Lambda Calculi and Applications. International Conference. TLCA '93, P91, DOI 10.1007/BFb0037100
   BERGER U, 1991, SIXTH ANNUAL IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P203
   Bird R. S., 1999, Journal of Functional Programming, V9, P77, DOI 10.1017/S0956796899003366
   Brady E, 2013, J FUNCT PROGRAM, V23, P552, DOI 10.1017/S095679681300018X
   Brady Edwin., 2006, GPCE 06, P111
   Brunel A, 2014, LECT NOTES COMPUT SC, V8410, P351
   Chapman J, 2010, ICFP 2010: PROCEEDINGS OF THE 2010 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P3
   Chapman James, 2009, THESIS U NOTTINGHAM
   Charguéraud A, 2012, J AUTOM REASONING, V49, P363, DOI 10.1007/s10817-011-9225-2
   Cheney J., 2005, Proceedings of the 2005 workshop on Mechanized reasoning about languages with variable binding, P33, DOI DOI 10.1145/1088454.1088459
   Chlipala A, 2008, ICFP'08: PROCEEDINGS OF THE 2008 SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P143
   Copello E., 2017, THESIS U REPUBLICA U
   Coquand C., 2002, Higher-Order and Symbolic Computation, V15, P57, DOI 10.1023/A:1019964114625
   Coquand T., 1997, Mathematical Structures in Computer Science, V7, P75, DOI 10.1017/S0960129596002150
   Cortiñas CT, 2018, PROCEEDINGS OF THE 3RD ACM SIGPLAN INTERNATIONAL WORKSHOP ON TYPE-DRIVEN DEVELOPMENT (TYDE '18), P78, DOI 10.1145/3240719.3241787
   Dagand P., 2013, Ph.D. thesis
   Dagand PE, 2014, J FUNCT PROGRAM, V24, P316, DOI 10.1017/S0956796814000069
   Danielsson NA, 2010, ICFP 2010: PROCEEDINGS OF THE 2010 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P285
   de Moura L, 2015, LECT NOTES ARTIF INT, V9195, P378, DOI 10.1007/978-3-319-21401-6_26
   Dunfield J, 2004, ACM SIGPLAN NOTICES, V39, P281, DOI 10.1145/982962.964025
   Dybjer P., 1994, Formal Aspects of Computing, V6, P440, DOI 10.1007/BF01211308
   Dybjer P, 1999, LECT NOTES COMPUT SC, V1581, P129
   Eisenberg Richard A., 2020, Haskell '20. Proceedings of the 13th ACM SIGPLAN International Symposium on Haskell, P39, DOI 10.1145/3406088.3409015
   Erdi G., 2018, ABS180400119 CORR
   Fiore M., 1999, Proceedings. 14th Symposium on Logic in Computer Science (Cat. No. PR00158), P193, DOI 10.1109/LICS.1999.782615
   Gabbay M. J., 2002, Formal Aspects of Computing, V13, P341, DOI 10.1007/s001650200016
   Ghani N., 2006, Proc. of 7th Symp. on Trends in Functional Programming, P173
   Ghica DR, 2014, LECT NOTES COMPUT SC, V8410, P331
   Gibbons J, 2009, J FUNCT PROGRAM, V19, P377, DOI 10.1017/S0956796809007291
   Hamana M, 2009, LECT NOTES COMPUT SC, V5608, P127, DOI 10.1007/978-3-642-02273-9_11
   Hatcliff J., 1994, Conference Record of POPL '94: 21st ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P458, DOI 10.1145/174675.178053
   Hedberg M., 1998, Journal of Functional Programming, V8, P413, DOI 10.1017/S0956796898003153
   HINZE R, 2001, ELECT NOTES THEORETI, V41, P5, DOI DOI 10.1016/S1571-0661(05)80542-0
   Hirschowitz A, 2012, J AUTOM REASONING, V49, P409, DOI 10.1007/s10817-010-9207-9
   HOFMANN M, 1994, IEEE S LOG, P208, DOI 10.1109/LICS.1994.316071
   Hudak P., 1996, ACM COMPUT SURV, V28, P196, DOI [10.1145/242224.242477, DOI 10.1145/242224.242477]
   Huet G., 1997, Journal of Functional Programming, V7, P549, DOI 10.1017/S0956796897002864
   Jander P., 2019, THESIS U EDINBURGH
   Jeffrey A., 2011, ASSOCIATIVITY FREE
   Kaiser Jonas, 2018, P 7 ACM SIGPLAN INT, P293, DOI DOI 10.1145/3167098
   Keep AW, 2013, ACM SIGPLAN NOTICES, V48, P343, DOI [10.1145/2544174.2500618, 10.1145/2500365.2500618]
   Keuchel S., 2011, THESIS UTRECHT U
   Keuchel S, 2016, LECT NOTES COMPUT SC, V9632, P419, DOI 10.1007/978-3-662-49498-1_17
   Lee G, 2012, LECT NOTES COMPUT SC, V7211, P436, DOI 10.1007/978-3-642-28869-2_22
   Licata Daniel R., 2017, LIPIcs, V84, DOI [10.4230/LIPIcs.FSCD.2017.25, DOI 10.4230/LIPICS.FSCD.2017.25]
   Löh A, 2011, WGP 11: PROCEEDINGS OF THE 2011 ACM SIGPLAN WORKSHOP ON GENERIC PROGRAMMING, P1
   Magalhaes JP, 2010, ACM SIGPLAN NOTICES, V45, P37, DOI 10.1145/2088456.1863529
   MALCOLM G, 1990, SCI COMPUT PROGRAM, V14, P255, DOI 10.1016/0167-6423(90)90023-7
   Martin-Lf P., 1982, Stud. Logic Found. Math, V104, P153, DOI [DOI 10.1016/S0049-237X(09)70189-2, 10.1016/ S0049-237X(09)70189-2.]
   McBride C, 2004, J FUNCT PROGRAM, V14, P69, DOI 10.1017/S0956796803004829
   Mcbride C, 2008, J FUNCT PROGRAM, V18, P1, DOI 10.1017/S0956796807006326
   McLaughlin C., 2018, CPP 2018, P102
   MITCHELL JC, 1991, ANN PURE APPL LOGIC, V51, P99, DOI 10.1016/0168-0072(91)90067-V
   MOGGI E, 1991, INFORM COMPUT, V93, P55, DOI 10.1016/0890-5401(91)90052-4
   Morris P, 2006, LECT NOTES COMPUT SC, V3839, P252
   Norell U, 2009, LECT NOTES COMPUT SC, V5832, P230, DOI 10.1007/978-3-642-04652-0_5
   O'Hearn P, 2003, J FUNCT PROGRAM, V13, P747, DOI 10.1017/S0956796802004495
   Petricek T, 2014, ICFP'14: PROCEEDINGS OF THE 2014 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P123, DOI 10.1145/2628136.2628160
   Pfenning F., 2004, LECTURE, P15
   Pientka, 2016, CASE STUDY PROGRAMMI
   Pierce BC, 2000, ACM T PROGR LANG SYS, V22, P1, DOI 10.1145/345099.345100
   Polonowski E, 2013, LECT NOTES COMPUT SC, V7998, P402, DOI 10.1007/978-3-642-39634-2_29
   Poulsen CB, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158104
   Stump A., 2016, VERIFIED FUNCTIONAL
   Swierstra W, 2008, J FUNCT PROGRAM, V18, P423, DOI 10.1017/S0956796808006758
   WADLER P, 1990, THEOR COMPUT SCI, V73, P231, DOI 10.1016/0304-3975(90)90147-A
   Wadler P., 1987, Conference Record of the Fourteenth Annual ACM Symposium on Principles of Programming Languages, P307, DOI 10.1145/41625.41653
   Wadler P., 2018, PROGRAMMING LANGUAGE
   Weirich S, 2011, ACM SIGPLAN NOTICES, V46, P333, DOI 10.1145/2034574.2034818
   Wood James., 2018, 3 WORKSH TYP DRIV DE
NR 95
TC 5
Z9 5
U1 0
U2 1
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD OCT 19
PY 2021
VL 31
AR e22
DI 10.1017/S0956796820000076
PG 55
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA XB3VN
UT WOS:000721259800001
OA Green Accepted, Green Published, Green Submitted
DA 2024-07-18
ER

PT J
AU Crary, K
AF Crary, Karl
TI A focused solution to the avoidance problem
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID FRAMEWORK; UNITY
AB In ML-style module type theory, sealing often leads to situations in which type variables must leave scope, and this creates a need for signatures that avoid such variables. Unfortunately, in general, there is no best signature that avoids a variable, so modules do not always enjoy principal signatures. This observation is called theavoidance problem.In the past, the problem has been circumvented using a variety of devices for moving variables so they can remain in scope. These devices work, but have heretofore lacked a logical foundation. They have also lacked a presentation in which the dynamic semantics is given on the same phrases as the static semantics, which limits their applications. We can provide a best supersignature avoiding a variable by fiat, by adding an existential signature that is the least upper bound of its instances. This idea is old, but a workable metatheory has not previously been worked out. This work resolves the metatheoretic issues using ideas borrowed from focused logic. We show that the new theory results in a type discipline very similar to the aforementioned devices used in prior work. In passing, this gives a type-theoretic justification for the generative stamps used in the early days of the static semantics of ML modules. All the proofs are formalized in Coq.
C1 [Crary, Karl] Carnegie Mellon Univ, Pittsburgh, PA 15213 USA.
C3 Carnegie Mellon University
RP Crary, K (corresponding author), Carnegie Mellon Univ, Pittsburgh, PA 15213 USA.
EM crary@cs.cmu.edu
CR Andreoli J. M., 1992, Journal of Logic and Computation, V2, P297, DOI 10.1093/logcom/2.3.297
   [Anonymous], THESIS
   [Anonymous], 1997, The Definition of Standard ML
   [Anonymous], J FUNCTIONAL PROGRAM
   Biswas S. K., 1995, Conference Record of POPL'95: 22nd ACM SIGPLAN-SIGACT Symposium Principles of Programming Languages, P154, DOI 10.1145/199448.199478
   Blain Levy P., 1999, Typed Lambda Calculi and Applications. 4th International Conference, TLCA'99. Proceedings, P228
   Crary K., 2019, 46 ACM S PRINC PROGR
   Crary K., 2009, MECH DEFINITION STAN
   Crary K, 2018, LICS'18: PROCEEDINGS OF THE 33RD ANNUAL ACM/IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P265, DOI 10.1145/3209108.3209145
   Crary K, 2017, ACM SIGPLAN NOTICES, V52, P100, DOI 10.1145/3093333.3009892
   Crary K, 2007, ACM T COMPUT LOG, V8, DOI 10.1145/1227839.1227840
   Crary Karl, 2009, 4 INT WKSH LOG FRAM, P21
   Dreyer D, 2003, ACM SIGPLAN NOTICES, V38, P236, DOI 10.1145/640128.604151
   Dreyer Derek, 2005, THESIS
   Elliott C. M., 1990, THESIS
   Fairtlough M, 1997, INFORM COMPUT, V137, P1, DOI 10.1006/inco.1997.2627
   Ghelli G, 1998, THEOR COMPUT SCI, V193, P75, DOI 10.1016/S0304-3975(96)00300-3
   GIRARD JY, 1993, ANN PURE APPL LOGIC, V59, P201, DOI 10.1016/0168-0072(93)90093-S
   GOLDFARB WD, 1981, THEOR COMPUT SCI, V13, P225, DOI 10.1016/0304-3975(81)90040-2
   HARPER R, 1990, CONFERENCE RECORD OF THE SEVENTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P341, DOI 10.1145/96709.96744
   HARPER R, 1987, LECT NOTES COMPUT SC, V250, P308
   HARPER R, 1993, J ACM, V40, P143, DOI 10.1145/138027.138060
   Harper R, 2000, FOUNDAT COMPUT, P341
   HARPER R, 1993, ACM T PROGR LANG SYS, V15, P211, DOI 10.1145/169701.169696
   Harper R., 1994, PRINCIPLES PROGRAMMI, P123, DOI [DOI 10.1145/174675.176927, 10.1145/174675.176927]
   Harper R., 2011, HOLY TRINITY
   Huet G. P., 1975, Theoretical Computer Science, V1, P27, DOI 10.1016/0304-3975(75)90011-0
   Lee Daniel K., 2007, POPL 2007. The 34th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P173, DOI 10.1145/1190216.1190245
   Leroy X., 1994, Conference Record of POPL '94: 21st ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P109, DOI 10.1145/174675.176926
   Leroy X., 1995, 22 ACM S PRINC PROGR
   Licata D. R., 2008, 23 IEEE S LOG COMP S
   Lillibridge M., 1997, THESIS
   Milner R., 1990, The Definition of Standard ML
   MITCHELL JC, 1988, ACM T PROGR LANG SYS, V10, P470, DOI 10.1145/44501.45065
   MOGGI E, 1989, FOURTH ANNUAL SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P14
   Plotkin G. D., 1981, TECHNICAL REPORT
   Reynolds J. C., 1983, Information Processing 83. Proceedings of the IFIP 9th World Computer Congress, P513
   Rossberg A, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P35, DOI 10.1145/2784731.2784738
   Rossberg A, 2014, J FUNCT PROGRAM, V24, P529, DOI 10.1017/S0956796814000264
   Russo C. V., 2000, Nordic Journal of Computing, V7, P348
   Russo C. V., 1998, THESIS
   Schack-Nielsen A., 2011, THESIS
   Simmons R. J., 2012, THESIS
   Simmons RJ, 2014, ACM T COMPUT LOG, V15, DOI 10.1145/2629678
   Stone C. A., 2000, Conference Record of POPL'00: 27th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages. Papers Presented at the Symposium, P214, DOI 10.1145/325694.325724
   Stone C. A., 2000, THESIS
   Stone C. A., 2006, ACM T COMPUTAT LOG, V7
   Swasey D., 2006, WORKSH ML
   Watkins K, 2004, ANN NY ACAD SCI, V3085, P355
   Watkins K., 2002, TECHNICAL REPORT
   Zeilberger N, 2008, ANN PURE APPL LOGIC, V153, P66, DOI 10.1016/j.apal.2008.01.001
   Zhong S, 1999, ACM SIGPLAN NOTICES, V34, P220, DOI 10.1145/317765.317801
NR 52
TC 2
Z9 2
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD AUG 6
PY 2020
VL 30
AR e24
DI 10.1017/S0956796820000222
PG 44
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA MU7FT
UT WOS:000555836000001
DA 2024-07-18
ER

PT J
AU Igarashi, A
   Thiemann, P
   Tsuda, Y
   Vasconcelos, VT
   Wadler, P
AF Igarashi, Atsushi
   Thiemann, Peter
   Tsuda, Yuya
   Vasconcelos, Vasco T.
   Wadler, Philip
TI Gradual session types
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID LANGUAGE PRIMITIVES; BLAME; PROPOSITIONS; DISCIPLINE; CALCULUS
AB Session types are a rich type discipline, based on linear types, that lifts the sort of safety claims that come with type systems to communications. However, web-based applications and microservices are often written in a mix of languages, with type disciplines in a spectrum between static and dynamic typing. Gradual session types address this mixed setting by providing a framework which grants seamless transition between statically typed handling of sessions and any required degree of dynamic typing. We propose Gradual GV as a gradually typed extension of the functional session type system GV. Following a standard framework of gradual typing, Gradual GV consists of an external language, which relaxes the type system of GV using dynamic types; an internal language with casts, for which operational semantics is given; and a cast-insertion translation from the former to the latter. We demonstrate type and communication safety as well as blame safety, thus extending previous results to functional languages with session-based communication. The interplay of linearity and dynamic types requires a novel approach to specifying the dynamics of the language.
C1 [Igarashi, Atsushi; Tsuda, Yuya] Kyoto Univ, Kyoto, Japan.
   [Thiemann, Peter] Univ Freiburg, Freiburg, Germany.
   [Vasconcelos, Vasco T.] Univ Lisbon, Fac Sci, Dept Informat, LASIGE, Lisbon, Portugal.
   [Wadler, Philip] Univ Edinburgh, Edinburgh, Midlothian, Scotland.
C3 Kyoto University; University of Freiburg; Universidade de Lisboa;
   University of Edinburgh
RP Igarashi, A (corresponding author), Kyoto Univ, Kyoto, Japan.
EM igarashi@kuis.kyoto-u.ac.jp; thiemann@informatik.uni-freiburg.de;
   tsuda@fos.kuis.kyoto-u.ac.jp; vv@di.fc.ul.pt; wadler@inf.ed.ac.uk
RI Igarashi, Atsushi/AAP-4323-2020; Vasconcelos, Vasco T/M-4920-2017
OI Igarashi, Atsushi/0000-0002-5143-9764; Vasconcelos, Vasco
   T/0000-0002-9539-8861; Tsuda, Yuya/0000-0002-7420-2575; Thiemann,
   Peter/0000-0002-9000-1239
FU JSPS KAKENHI [JP17H01723]; FCT through the LASIGE Research Unit
   [UID/CEC/00408/2019]; EPSRC [EP/K034413/1]; FCT through project
   Confident [PTDC/EEI-CTP/4503/2014]; EPSRC [EP/K034413/1] Funding Source:
   UKRI
FX We would like to thank Alceste Scalas and Nobuko Yoshida for comments
   and pointing out errors in the definition of subtyping rules, Kaede
   Kobayashi for pointing out subtle errors in the operational semantics,
   and anonymous reviewers for constructive comments. We are also grateful
   to Hannes Saffrich for implementing a type checker for the calculus in
   this paper. This work was supported in part by the JSPS KAKENHI Grant
   Number JP17H01723 (Igarashi), by FCT through the LASIGE Research Unit
   ref. UID/CEC/00408/2019 and project Confident ref.
   PTDC/EEI-CTP/4503/2014 (Vasconcelos), and by EPSRC program grant
   EP/K034413/1 (Wadler).
CR Ahmed A, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P201, DOI 10.1145/1926385.1926409
   [Anonymous], 1984, The Lambda Calculus: Its Syntax and Semantics
   [Anonymous], 2015, LEIBNIZ INT P INFORM, DOI DOI 10.4230/LIPICS.SNAPL.2015.274
   Bader J, 2018, LECT NOTES COMPUT SC, V10747, P25, DOI 10.1007/978-3-319-73721-8_2
   Schwerter FB, 2014, ICFP'14: PROCEEDINGS OF THE 2014 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P283, DOI 10.1145/2628136.2628149
   Bierman G, 2014, LECT NOTES COMPUT SC, V8586, P257
   Bierman G, 2010, LECT NOTES COMPUT SC, V6183, P76, DOI 10.1007/978-3-642-14107-2_5
   Bocchi L, 2017, THEOR COMPUT SCI, V669, P33, DOI 10.1016/j.tcs.2017.02.009
   Bocchi L, 2013, LECT NOTES COMPUT SC, V7892, P50
   Brady E, 2013, J FUNCT PROGRAM, V23, P552, DOI 10.1017/S095679681300018X
   Caires L, 2010, LECT NOTES COMPUT SC, V6269, P222, DOI 10.1007/978-3-642-15375-4_16
   Carbone M, 2007, LECT NOTES COMPUT SC, V4421, P2
   Carbone M, 2012, ACM T PROGR LANG SYS, V34, DOI 10.1145/2220365.2220367
   Castagna G., 2019, PACMPL, V3
   Cimini M, 2016, ACM SIGPLAN NOTICES, V51, P443, DOI 10.1145/2914770.2837632
   Cooper E, 2007, LECT NOTES COMPUT SC, V4709, P266
   Demangeon R, 2015, FORM METHOD SYST DES, V46, P197, DOI 10.1007/s10703-014-0218-8
   Demangeon R, 2011, LECT NOTES COMPUT SC, V6901, P280, DOI 10.1007/978-3-642-23217-6_19
   Disney T, 2011, STOP
   Ernst E, 2017, SCI COMPUT PROGRAM, V133, P51, DOI 10.1016/j.scico.2016.06.006
   Fahndrich M., 2006, Operating Systems Review, V40, P177, DOI 10.1145/1218063.1217953
   Fennell L, 2013, P IEEE CSFW, P224, DOI 10.1109/CSF.2013.22
   Fennell Luminous, 2012, TRENDS FUNCTIONAL PR, V7829, P37
   Findler RB, 2002, ACM SIGPLAN NOTICES, V37, P48, DOI 10.1145/583852.581484
   Flanagan C, 2006, ACM SIGPLAN NOTICES, V41, P245, DOI 10.1145/1111320.1111059
   Fowler S, 2016, ELECTRON P THEOR COM, P36, DOI 10.4204/EPTCS.223.3
   Franco J, 2014, LECT NOTES COMPUT SC, V8368, P15, DOI 10.1007/978-3-319-05032-4_2
   Garcia R, 2016, ACM SIGPLAN NOTICES, V51, P429, DOI 10.1145/2914770.2837670
   Garcia R, 2014, ACM T PROGR LANG SYS, V36, DOI 10.1145/2629609
   Gay S, 2005, ACTA INFORM, V42, P191, DOI 10.1007/s00236-005-0177-z
   Gay Simon J., 2016, A List of Successes that can Change the World. Essays Dedicated to Philip Wadler on the Occasion of his 60th Birthday. LNCS 9600, P95, DOI 10.1007/978-3-319-30936-1_5
   Gay SJ, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P299, DOI 10.1145/1706299.1706335
   Gay SJ, 2010, J FUNCT PROGRAM, V20, P19, DOI 10.1017/S0956796809990268
   GIRARD JY, 1987, THEOR COMPUT SCI, V50, P1, DOI 10.1016/0304-3975(87)90045-4
   Gommerstadt Hannah, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P771, DOI 10.1007/978-3-319-89884-1_27
   Greenberg M, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P353, DOI 10.1145/1706299.1706341
   Honda K, 1998, LECT NOTES COMPUT SC, V1381, P122, DOI 10.1007/BFb0053567
   Honda K, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P273, DOI 10.1145/2827695
   Honda K, 2016, J ACM, V63, DOI 10.1145/2827695
   Honda K, 2011, LECT NOTES COMPUT SC, V6536, P55, DOI 10.1007/978-3-642-19056-8_4
   Honda Kohei., 1993, CONCUR'93, 4th International Conference on Concurrency Theory, Hildesheim, Germany, August 23-26, 1993, V715, P509, DOI DOI 10.1007/3-540-57208-2_
   Horn D. V., 2018, PACMPL, V2
   Hu R, 2008, LECT NOTES COMPUT SC, V5142, P516, DOI 10.1007/978-3-540-70592-5_22
   Hu R, 2016, LECT NOTES COMPUT SC, V9633, P401, DOI 10.1007/978-3-662-49665-7_24
   Hu R, 2010, LECT NOTES COMPUT SC, V6183, P329, DOI 10.1007/978-3-642-14107-2_16
   Igarashi A, 2017, P ACM INT C FUNCTION, V1, P1
   Igarashi Y., 2017, P ACM PROGRAMMING LA, V1
   Jafery KA, 2017, ACM SIGPLAN NOTICES, V52, P804, DOI 10.1145/3093333.3009865
   Jespersen Thomas Bracht Laumann, 2015, P 11 ACM SIGPLAN WOR, P13, DOI DOI 10.1145/2808098.2808100
   Jia LM, 2016, ACM SIGPLAN NOTICES, V51, P582, DOI 10.1145/2914770.2837662
   Kobayashi N, 1999, ACM T PROGR LANG SYS, V21, P914, DOI 10.1145/330249.330251
   Kouzapas D, 2016, PROCEEDINGS OF THE 18TH INTERNATIONAL SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING (PPDP 2016), P146, DOI 10.1145/2967973.2968595
   Lehmann N, 2017, ACM SIGPLAN NOTICES, V52, P775, DOI 10.1145/3093333.3009856
   Lindley S, 2016, ACM SIGPLAN NOTICES, V51, P133, DOI [10.1145/2976002.2976018, 10.1145/3241625.2976018]
   Lindley S, 2016, ACM SIGPLAN NOTICES, V51, P434, DOI 10.1145/3022670.2951921
   Lindley Sam, 2017, BEHAV TYPES THEORY T
   Melgratti H, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110279
   MILNER R, 1992, INFORM COMPUT, V100, P1, DOI [10.1016/0890-5401(92)90008-4, 10.1016/0890-5401(92)90009-5]
   Mostrous D, 2011, LECT NOTES COMPUT SC, V6721, P95, DOI 10.1007/978-3-642-21464-6_7
   Neykova R, 2017, CC'17: PROCEEDINGS OF THE 26TH INTERNATIONAL CONFERENCE ON COMPILER CONSTRUCTION, P98, DOI 10.1145/3033019.3033031
   Neykova R, 2014, LECT NOTES COMPUT SC, V8459, P131, DOI 10.1007/978-3-662-43376-8_9
   Neykova R, 2013, LECT NOTES COMPUT SC, V8174, P358, DOI 10.1007/978-3-642-40787-1_25
   Ng N, 2012, LECT NOTES COMPUT SC, V7304, P202, DOI 10.1007/978-3-642-30561-0_15
   Orchard D, 2016, ACM SIGPLAN NOTICES, V51, P568, DOI 10.1145/2914770.2837634
   Ou XM, 2004, INT FED INFO PROC, V155, P437
   Padovani L, 2017, J FUNCT PROGRAM, V27, P1, DOI 10.1017/S0956796816000289
   Pfenning F, 2015, LECT NOTES COMPUT SC, V9034, P3, DOI 10.1007/978-3-662-46678-0_1
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Pol D, 2009, B AM MUS NAT HIST, P1
   Polakow J, 2015, ACM SIGPLAN NOTICES, V50, P177, DOI 10.1145/2804302.2804309
   Pucella R, 2008, HASKELL'08: PROCEEDINGS OF THE ACM SIGPLAN 2008 HASKELL SYMPOSIUM, P25
   Sackman Matthew, 2008, Session Types in Haskell Updating Message Passing for the 21st Century
   Sarkar T, 2017, PHY REV MATER, V1, DOI 10.1103/PhysRevMaterials.1.070601
   Schwerter FB, 2016, J FUNCT PROGRAM, V26, P1, DOI 10.1017/S0956796816000162
   Sergey I, 2012, LECT NOTES COMPUT SC, V7211, P579, DOI 10.1007/978-3-642-28869-2_29
   Siek Jeremy G., 2016, A List of Successes that can Change the World. Essays Dedicated to Philip Wadler on the Occasion of his 60th Birthday. LNCS 9600, P388, DOI 10.1007/978-3-319-30936-1_21
   Siek J, 2007, LECT NOTES COMPUT SC, V4609, P2
   Siek J, 2015, ACM SIGPLAN NOTICES, V50, P425, DOI [10.1145/2737924.2737968, 10.1145/2813885.2737968]
   Siek Jeremy, 2006, WORKSHOP SCHEME FUNC, P81
   Tanter E, 2019, PACMPL, V3
   The Coq Development Team, 2019, COQ PROOF ASS VERS 8
   The Dart Team, 2014, DART PROGR LANG SPEC, V1.2
   Thiemann Peter, 2014, Trustworthy Global Computing 9th International Symposium, TGC 2014. Revised Selected Papers: LNCS 8902, P144, DOI 10.1007/978-3-662-45917-1_10
   Thiemann P, 2016, LIPICS, V56
   Thiemann P, 2014, LECT NOTES COMPUT SC, V8410, P47
   Tobin-Hochstadt S, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P395, DOI 10.1145/1328438.1328486
   Toninho Bernardo, 2018, Foundations of Software Science and Computation Structures. 21st International Conference, FOSSACS 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10803, P128, DOI 10.1007/978-3-319-89366-2_7
   Toninho B., 2014, MATH STRUCT COMPUT S, V26, P367
   Toninho B, 2013, LECT NOTES COMPUT SC, V7792, P350, DOI 10.1007/978-3-642-37036-6_20
   Toro M, 2018, ACM T PROGR LANG SYS, V40, DOI 10.1145/3229061
   Tov JA, 2010, LECT NOTES COMPUT SC, V6012, P550, DOI 10.1007/978-3-642-11957-6_29
   Vasconcelos VT, 2012, INFORM COMPUT, V217, P52, DOI 10.1016/j.ic.2012.05.002
   Verlaguet Julien, 2013, WORKSH COMM US FUNCT
   Vitousek MM, 2017, ACM SIGPLAN NOTICES, V52, P762, DOI 10.1145/3093333.3009849
   Wadler P, 2014, J FUNCT PROGRAM, V24, P384, DOI 10.1017/S095679681400001X
   Wadler P, 2012, ACM SIGPLAN NOTICES, V47, P273, DOI 10.1145/2398856.2364568
   Wadler P, 2009, LECT NOTES COMPUT SC, V5502, P1, DOI 10.1007/978-3-642-00590-9_1
   Wadler Philip, 2015, SNAPL, P309
   Walker David, 2005, Advanced Topics in Types and Programming Languages, chapter Substructural Type Systems, P3
   Williams SK, 2017, J HEALTH CARE POOR U, V28, P1
   Willsey M, 2017, ELECTRON P THEOR COM, P73, DOI 10.4204/EPTCS.238.8
   Wolff R, 2011, LECT NOTES COMPUT SC, V6813, P459, DOI 10.1007/978-3-642-22655-7_22
   Yoshida N., 2014, Trustworthy Global Computing. Ed. by, V8358, P22, DOI [10.1007/978-3-319-05119-2_3, DOI 10.1007/978-3-319-05119-2, 10.1007/978-3-319-05119-2]
   Yoshida N, 2016, LIPICS
   Yoshida N, 2007, ELECTRON NOTES THEOR, V171, P73, DOI 10.1016/j.entcs.2007.02.056
NR 105
TC 5
Z9 5
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD NOV 18
PY 2019
VL 29
AR e17
DI 10.1017/S0956796819000169
PG 56
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA JO7SW
UT WOS:000497776400001
OA Green Submitted, Green Published, hybrid
DA 2024-07-18
ER

PT J
AU Johnson-Freyd, P
   Downen, P
   Ariola, ZM
AF Johnson-Freyd, Philip
   Downen, Paul
   Ariola, Zena M.
TI Call-by-name extensionality and confluence
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID LAMBDA-CALCULUS
AB Designing rewriting systems that respect functional extensionality for call-by-name languages with effects turns out to be surprisingly challenging. Simply interpreting extensional laws like eta as reduction rules easily breaks confluence. We explore these issues in the setting of a sequent calculus. Building on an insight that appears in different aspects of the theory of call-by-name functional languages-confluent rewriting for two independent control calculi and sound continuation-passing style transformations-we give a confluent reduction system for lazy extensional functions. Finally, we consider limitations to this approach when used for strict evaluation and types beyond functions.
C1 [Johnson-Freyd, Philip; Downen, Paul; Ariola, Zena M.] Univ Oregon, Eugene, OR 97403 USA.
C3 University of Oregon
RP Johnson-Freyd, P (corresponding author), Univ Oregon, Eugene, OR 97403 USA.
EM philipjf@cs.uoregon.edu; pdownen@cs.uoregon.edu; ariola@cs.uoregon.edu
OI Downen, Paul/0000-0003-0165-9387; Johnson-Freyd,
   Philip/0000-0001-5973-0671
FU Direct For Computer & Info Scie & Enginr; Division of Computing and
   Communication Foundations [1423617] Funding Source: National Science
   Foundation
CR [Anonymous], 1984, The Lambda Calculus: Its Syntax and Semantics
   Ariola ZM, 2002, ANN PURE APPL LOGIC, V117, P95, DOI 10.1016/S0168-0072(01)00104-X
   Carraro A, 2013, ELECTRON PROC THEOR, P93, DOI 10.4204/EPTCS.113.10
   Curien PL, 2010, IFIP ADV INF COMM TE, V323, P165
   Curien PL, 2000, ACM SIGPLAN NOTICES, V35, P233, DOI 10.1145/357766.351262
   Danvy O., 2004, REFOCUSING REDUCTION
   David R, 2001, J SYMBOLIC LOGIC, V66, P407, DOI 10.2307/2694930
   Downen P, 2014, LECT NOTES COMPUT SC, V8410, P249
   Fujita KE, 2003, LECT NOTES COMPUT SC, V2701, P120
   Herbelin H, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P383, DOI 10.1145/1328438.1328484
   Herbelin Hugo., 2005, C'est maintenant qu'on calcule : Au coeur de la dualite, P11
   Hofmann M, 2002, INFORM COMPUT, V179, P332, DOI 10.1006/inco.2001.2947
   KLOP JW, 1989, INFORM COMPUT, V80, P97, DOI 10.1016/0890-5401(89)90014-X
   Krivine Jean-Louis, 2007, Higher-Order and Symbolic Computation, V20, P199, DOI 10.1007/S10990-007-9018-9
   Munch-Maccagnoni G, 2015, IEEE S LOG, P127, DOI 10.1109/LICS.2015.22
   Munch-Maccagnoni Guillaume, 2013, THESIS
   Nakazawa Koji, 2014, Rewriting and Typed Lambda Calculi. Joint International Conference, RTA-TLCA 2014, Held as Part of the Vienna Summer of Logic, VSL 2014. Proceedings: LNCS 8560, P349, DOI 10.1007/978-3-319-08918-8_24
   PARIGOT M, 1992, LNCS, V624, P190, DOI [10.1007/BFb0013061, DOI 10.1007/BFB0013061]
   Pfenning F, 2002, NATO SCI SER II-MATH, V62, P137
   Pitts A. M., 2000, Mathematical Structures in Computer Science, V10, P321, DOI 10.1017/S0960129500003066
   Plotkin G. D., 1975, Theoretical Computer Science, V1, P125, DOI 10.1016/0304-3975(75)90017-1
   Sabry A., 1993, LISP and Symbolic Computation, V6, P289, DOI 10.1007/BF01019462
   Sabry A, 1997, ACM T PROGR LANG SYS, V19, P916, DOI 10.1145/267959.269968
   Saurin A, 2010, ACM T COMPUT LOG, V11, DOI 10.1145/1805950.1805958
   Zeilberger  Noam, 2009, THESIS
NR 25
TC 0
Z9 2
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PY 2017
VL 27
AR e12
DI 10.1017/S095679681700003X
PG 45
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA EN3HT
UT WOS:000395900300001
DA 2024-07-18
ER

PT J
AU Sivaramakrishnan, KC
   Harris, T
   Marlow, S
   Jones, SP
AF Sivaramakrishnan, K. C.
   Harris, Tim
   Marlow, Simon
   Jones, Simon Peyton
TI Composable scheduler activations for Haskell
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB The runtime for a modern, concurrent, garbage collected language like Java or Haskell is like an operating system: sophisticated, complex, performant, but alas very hard to change. If more of the runtime system were in the high-level language, it would be far more modular and malleable. In this paper, we describe a novel concurrency substrate design for the Glasgow Haskell Compiler that allows multicore schedulers for concurrent and parallel Haskell programs to be safely and modularly described as libraries in Haskell. The approach relies on abstracting the interface to the user-implemented schedulers through scheduler activations, together with the use of Software Transactional Memory to promote safety in a multicore context.
C1 [Sivaramakrishnan, K. C.] Univ Cambridge, Comp Lab, Cambridge, England.
   [Harris, Tim] Oracle Labs, Cambridge, England.
   [Marlow, Simon] Facebook UK Ltd, London, England.
   [Jones, Simon Peyton] Microsoft Res, Cambridge, England.
C3 University of Cambridge; Oracle; Facebook Inc; Microsoft
RP Harris, T (corresponding author), Oracle Labs, Cambridge, England.; Marlow, S (corresponding author), Facebook UK Ltd, London, England.
EM sk826@cl.cam.ac.uk; timothy.l.harris@oracle.com; smarlow@fb.com;
   simonpj@microsoft.com
CR Anderson T. E., 1991, Operating Systems Review, V25, P95, DOI 10.1145/121133.121151
   Async, 2016, JAN STREET CAP AS EX
   Baumann A, 2009, SOSP'09: PROCEEDINGS OF THE TWENTY-SECOND ACM SIGOPS SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P29
   Bershad B. N., 1995, Operating Systems Review, V29, P74, DOI 10.1145/202453.202472
   Bruggeman C, 1996, ACM SIGPLAN NOTICES, V31, P99, DOI 10.1145/249069.231395
   Chakravarty M., 2007, PROC WORKSHOP DECLAR, P10
   Dolan Stephen, 2015, OCAML US DEV WORKSH
   DYBVIG RK, 1989, COMPUT LANG, V14, P109, DOI 10.1016/0096-0551(89)90018-0
   Fluet M, 2010, J FUNCT PROGRAM, V20, P537, DOI 10.1017/S0956796810000201
   Fluet M, 2008, ICFP'08: PROCEEDINGS OF THE 2008 SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P241
   Frampton D., 2009, 2009 ACM International Conference on Virtual Execution Environments, P81, DOI [DOI 10.1145/1508293.1508305, 10.1145/1508293.1508305]
   Galois, 2016, HAHSK LIGHTW VIRT MA
   Hallgren T, 2005, ACM SIGPLAN NOTICES, V40, P116, DOI 10.1145/1090189.1086380
   Harris Tim., 2005, PPoPP '05: Proceedings of the tenth ACM SIGPLAN symposium on Principles and practice of parallel programming, P48, DOI DOI 10.1145/1065944.1065952
   Harris Tim., 2005, Proceedings of the 2005 ACM SIGPLAN Workshop on Haskell, Haskell '05, P49
   Haskell, 2016, HASK WEB DEV
   HAYNES CT, 1987, COMPUT LANG, V12, P109, DOI 10.1016/0096-0551(87)90003-8
   HotSpotVM, 2016, JAV SE JOTSPORT GLAN
   IBM, 2016, JAV PLATF STAND ED J
   Li P, 2007, HASKELL'07: PROCEEDINGS OF THE ACM SIGPLAN 2007 HASKELL WORKSHOP, P107
   Lippmeier B, 2012, ACM SIGPLAN NOTICES, V47, P25, DOI 10.1145/2430532.2364511
   Madhavapeddy A, 2014, COMMUN ACM, V57, P61, DOI 10.1145/2541883.2541895
   Madhavapeddy A, 2013, ACM SIGPLAN NOTICES, V48, P461, DOI 10.1145/2499368.2451167
   Marlow S, 2001, ACM SIGPLAN NOTICES, V36, P274, DOI 10.1145/381694.378858
   Marlow S, 2004, HASKELL 04, P22, DOI DOI 10.1145/1017472.1017479
   Marlow S, 2010, ACM SIGPLAN NOTICES, V45, P91, DOI 10.1145/2088456.1863535
   Marsh B. D., 1991, Operating Systems Review, V25, P110, DOI 10.1145/121133.344329
   Microsoft Corp, 2016, COMM LANG RUNT CLR
   Philbin J. F., 1993, THESIS
   Reid A, 1999, LECT NOTES COMPUT SC, V1595, P186
   Reppy J.H., 2007, Concurrent Programming in ML
   Reppy J, 2009, ICFP'09: PROCEEDINGS OF THE 2009 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P257
   Shivers O., 1997, CONT WORKSH
   Shootout, 2016, COMP LANG BENCHM GAM
   Sivaramakrishnan KC, 2014, J FUNCT PROGRAM, V24, P613, DOI 10.1017/S0956796814000161
   Vouillon J, 2008, ML'08: PROCEEDINGS OF THE 2008 ACM SIGPLAN WORKSHOP ON ML, P3
   Wand Mitchell., 1980, LISP FUNCTIONAL PROG, P19, DOI DOI 10.1145/800087.802786
   Williams NJ, 2002, USENIX ASSOCIATION PROCEEDINGS OF THE FREENIX TRACK, P99
NR 38
TC 3
Z9 4
U1 0
U2 3
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PY 2016
VL 26
AR e9
DI 10.1017/S0956796816000071
PG 39
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DR4EH
UT WOS:000379853800001
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Jaskelioff, M
   O'Connor, R
AF Jaskelioff, Mauro
   O'Connor, Russell
TI A representation theorem for second-order functionals
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB Representation theorems relate seemingly complex objects to concrete, more tractable ones. In this paper, we take advantage of the abstraction power of category theory and provide a datatype-generic representation theorem. More precisely, we prove a representation theorem for a wide class of second-order functionals which are polymorphic over a class of functors. Types polymorphic over a class of functors are easily representable in languages such as Haskell, but are difficult to analyse and reason about. The concrete representation provided by the theorem is easier to analyse, but it might not be as convenient to implement. Therefore, depending on the task at hand, the change of representation may prove valuable in one direction or the other. We showcase the usefulness of the representation theorem with a range of examples. Concretely, we show how the representation theorem can be used to prove that traversable functors are finitary containers, how coalgebras of a parameterised store comonad relate to very well-behaved lenses, and how algebraic effects might be implemented in a functional language.
C1 [Jaskelioff, Mauro] Consejo Nacl Invest Cient & Tecn, CIFASIS, RA-1033 Buenos Aires, DF, Argentina.
   [Jaskelioff, Mauro] Univ Nacl Rosario, FCEIA, RA-2000 Rosario, Santa Fe, Argentina.
   [O'Connor, Russell] Google Canada, Kitchener, ON, Canada.
C3 Consejo Nacional de Investigaciones Cientificas y Tecnicas (CONICET);
   National University of Rosario; Google Incorporated
RP Jaskelioff, M (corresponding author), Consejo Nacl Invest Cient & Tecn, CIFASIS, RA-1033 Buenos Aires, DF, Argentina.
EM mauro@fceia.unr.edu.ar; oconnorr@google.com
FU ANPCyT PICT [2009-15]
FX Jaskelioff is funded by ANPCyT PICT 2009-15. Many thanks go to Edward
   Kmett who assisted the authors with the isomorphism between KLens and
   VLens, and to Exequiel Rivas, Jeremy Gibbons, and the anonymous referees
   for helping us improve the presentation of the paper. We also thank
   Shachaf Ben- Kiki for explaining why affine traversals are called so,
   and Gabor Greif for finding some typos.
CR Abbott M, 2003, LECT NOTES COMPUT SC, V2620, P23
   Atkey R, 2009, LECT NOTES COMPUT SC, V5728, P3, DOI 10.1007/978-3-642-03741-2_2
   Atkey R, 2009, J FUNCT PROGRAM, V19, P335, DOI 10.1017/S095679680900728X
   Awodey S., 2006, CATEGORY THEORY
   BAINBRIDGE ES, 1990, THEOR COMPUT SCI, V70, P35, DOI 10.1016/0304-3975(90)90151-7
   Bauer A, 2013, LECT NOTES COMPUT SC, V7794, P225, DOI 10.1007/978-3-642-37075-5_15
   Bernardy JP, 2010, LECT NOTES COMPUT SC, V6012, P125, DOI 10.1007/978-3-642-11957-6_8
   Bird R, 2013, ACM SIGPLAN NOTICES, V48, P25, DOI 10.1145/2503778.2503781
   Bird Richard, 1997, Algebra of Programming
   Capriotti P, 2014, ELECTRON P THEOR COM, P2, DOI 10.4204/EPTCS.153.2
   Danielsson NA, 2006, ACM SIGPLAN NOTICES, V41, P206, DOI 10.1145/1111320.1111056
   Foster JN, 2007, ACM T PROGR LANG SYS, V29, DOI [10.1145/1232420.1232424, 10.1145/1047659.1040325]
   Gibbons J., 2012, BIDIRECTIONAL TRANSF, V49
   Gibbons J, 2009, J FUNCT PROGRAM, V19, P377, DOI 10.1017/S0956796809007291
   Jaskelioff M, 2012, ELECTRON PROC THEOR, P40, DOI 10.4204/EPTCS.76.5
   Kmett E, 2013, LENS 4 0 LENSES FOLD
   MacLane S., 1978, CATEGORIES WORKING M, V5
   Mcbride C, 2008, J FUNCT PROGRAM, V18, P1, DOI 10.1017/S0956796807006326
   Milewski B, 2013, LENSES STORES YONEDA
   Moggi E., 1999, ELECTRON NOTES THEOR, V29, P187, DOI DOI 10.1016/S1571-0661(05)80316-0.CTCS
   O'Connor R, 2010, LENSES ARE EXACTLY C
   O'Connor R., 2013, DATA LENS 2 10 4 HAS
   O'Connor R, 2011, ABS11032841V1 CORR
   Plotkin G, 2003, APPL CATEGOR STRUCT, V11, P69, DOI 10.1023/A:1023064908962
   Plotkin G., 2009, LECT NOTES COMPUTER, V5502
   REYNOLDS JC, 1993, INFORM COMPUT, V105, P1, DOI 10.1006/inco.1993.1037
   Swierstra W, 2008, J FUNCT PROGRAM, V18, P423, DOI 10.1017/S0956796808006758
   Van Laarhoven T., 2009, NONREGULAR DATA TYPE
   van Laarhoven T, 2009, CPS BASED FUNCTIONAL
   Van Laarhoven T., 2009, DO I GET MY NONREGUL
NR 30
TC 11
Z9 10
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PY 2015
VL 25
AR e13
DI 10.1017/S0956796815000088
PG 36
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DB1AM
UT WOS:000368240300006
OA hybrid, Green Published, Green Submitted
DA 2024-07-18
ER

PT J
AU Thompson, S
   Li, HQ
AF Thompson, Simon
   Li, Huiqing
TI Refactoring tools for functional languages
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB Refactoring is the process of changing the design of a program without changing what it does. Typical refactorings, such as function extraction and generalisation, are intended to make a program more amenable to extension, more comprehensible and so on. Refactorings differ from other sorts of program transformation in being applied to source code, rather than to a 'core' language within a compiler, and also in having an effect across a code base, rather than to a single function definition, say. Because of this, there is a need to give automated support to the process. This paper reflects on our experience of building tools to refactor functional programs written in Haskell (HaRe) and Erlang (Wrangler). We begin by discussing what refactoring means for functional programming languages, first in theory, and then in the context of a larger example. Next, we address system design and details of system implementation as well as contrasting the style of refactoring and tooling for Haskell and Erlang. Building both tools led to reflections about what particular refactorings mean, as well as requiring analyses of various kinds, and we discuss both of these. We also discuss various extensions to the core tools, including integrating the tools with test frameworks; facilities for detecting and eliminating code clones; and facilities to make the systems extensible by users. We then reflect on our work by drawing some general conclusions, some of which apply particularly to functional languages, while many others are of general value.
C1 [Thompson, Simon; Li, Huiqing] Univ Kent, Sch Comp, Canterbury CT2 7NZ, Kent, England.
C3 University of Kent
RP Thompson, S (corresponding author), Univ Kent, Sch Comp, Canterbury CT2 7NZ, Kent, England.
EM s.j.thompson@kent.ac.uk; h.li@kent.ac.uk
RI Thompson, Simon/B-8964-2012
OI Thompson, Simon/0000-0002-2350-301X
FU UK Engineering and Physical Sciences Research Council [GR/R75052/01,
   EP/C524969/1]; European Commission Framework 7 programme (ProTest)
   [215868]; European Commission Framework 7 programme (RELEASE) [287510]
FX The development of HaRe and Wrangler was supported by the UK Engineering
   and Physical Sciences Research Council (grants GR/R75052/01,
   EP/C524969/1) and Wrangler was further supported by the European
   Commission Framework 7 programme (ProTest, grant no. 215868; RELEASE,
   287510), and we are very grateful to them for their support, and to our
   project partners for their collaboration. Finally, we would like to
   thank the anonymous reviewers of this paper for their detailed and
   incisive comments.
CR Alglave J., 2011, P 9 INT C AUT TECHN
   [Anonymous], 2007, P 6 JOINT M EUR SOFT
   Armstrong J., 2007, Programming Erlang: Software for a Concurrent World, V1st
   BAKER BS, 1995, SECOND WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P86, DOI 10.1109/WCRE.1995.514697
   BAKER BS, 1992, COMPUTING SCIENCE AND STATISTICS : VOL 24, P49
   Bravenboer M, 2008, SCI COMPUT PROGRAM, V72, P52, DOI 10.1016/j.scico.2007.11.003
   Brown C., 2011, LNCS, V7193
   Brown C., 2008, THESIS U KENT KENT
   Brown C, 2010, PEPM '10: PROCEEDINGS OF THE 2010 ACM SIGPLAN WORKSHOP ON PARTIAL EVALUATION AND PROGRAM MANIPULATION, P111, DOI 10.1145/1706356.1706378
   Bulychev P., 2008, SPRING YOUNG RES C S, DOI DOI 10.15514/SYRCOSE-2008-2-22
   Burstall R. M., 1975, SIGPLAN Notices, V10, P465, DOI 10.1145/390016.808470
   Carlsson R., 2006, P 2006 ACM SIGPLAN W
   Carvalho A, 2007, ELECTRON NOTES THEOR, V184, P39, DOI 10.1016/j.entcs.2007.03.014
   Chassell R. J., 2004, INTRO PROGRAMMING EM
   Claessen K, 2000, ACM SIGPLAN NOTICES, V35, P268, DOI 10.1145/357766.351266
   Darlington J., 1982, FUNCTIONAL PROGRAMMI
   Drienyovszky D, 2010, ERLANG 2010: PROCEEDINGS OF THE 2010 ACM SIGPLAN, ERLANG WORKSHOP, P75
   Erlang E-learning, 2011, ONL E LEARN SYST
   Evans WS, 2007, 14TH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P150, DOI 10.1109/WCRE.2007.15
   Fowler Martin, 1999, REFACTORING
   Gallardo D., REFACTORING EVERYONE
   Garrido A., 2006, P 6 IEEE INT WORKSH
   Ge X, 2012, PROC INT CONF SOFTW, P211, DOI 10.1109/ICSE.2012.6227192
   GHC API, GHC COMM
   Gode N., 2009, P 2009 EUR C SOFTW M
   Griswold W. G., 1993, ACM Transactions on Software Engineering and Methodology, V2, P228, DOI 10.1145/152388.152389
   Griswold W. G, 1991, THESIS U WASHINGTON
   Hackage, 2010, HACKAGE DB
   Hallgren T., 2003, ACM SIGPL HASK WORKS
   HaRe, 2013, HARE SYST
   Hiller Martin, 2012, Proceedings of the DASIA 2012. Data Systems In Aerospace, P40
   Horvath Z., 2008, WORKSH ADV SOFTW DEV
   Hughes J., 1999, REPORT PROGRAMMING L
   Jiang LX, 2007, PROC INT CONF SOFTW, P96
   Katic M, 2009, REC ADV COMPUT ENG, P140
   Kitlei R., 2008, 14 INT ERL OTP US C
   Komondoor R., 2001, LECT NOTES COMPUTER
   Lahoda J., 2012, ACM INT C P SER, P63
   Lämmel R, 2000, TRENDS IN FUNCTIONAL PROGRAMMING, P143
   Lammel R., 2003, P 5 INT S PRACT ASP
   Leitao A. P. T. de M. C., 2002, P 6 EUR C SOFTW MAIN
   Li H, 2008, ACM SIGPLAN ERL WORK
   Li H., 2012, AUTOMATED SOFTWARE E
   Li H., 2006, THESIS U KENT CANTER
   Li H., 2011, P C FUND APPR SOFTW
   Li H., 2012, LECT NOTES COMPUTER, V7212, P294
   Li H., 2009, ACM SIGPLAN WORKSH P
   Li H., 2012, P 5 WORKSH REF TOOLS, P32, DOI [10.1145/2328876.2328881, DOI 10.1145/2328876.2328881]
   Li H., 2009, 3 ACM WORKSH REF TOO, P1
   Li H., 2009, 409 U KENT SCH COMP
   Li H., 2011, REF TEST WORKSH REFT
   Li H., 2005, TRENDS FUNCTIONAL PR, P95
   Li H., 2010, 12 INT S PRACT ASP D
   Li H., 2007, 19 INT S IMPL APPL F
   Li H., 2011, 201104 U KENT SCH CO
   Li HQ, 2006, SIXTH IEEE INTERNATIONAL WORKSHOP ON SOURCE CODE ANALYSIS AND MANIPULATION, PROCEEDINGS, P197
   Li HQ, 2010, IEEE INT WORK C SO, P157, DOI 10.1109/SCAM.2010.17
   Li ZM, 2006, IEEE T SOFTWARE ENG, V32, P176, DOI 10.1109/TSE.2006.28
   LOVEI L, 2009, P 2009 ACM SIGPLAN E, P11
   LOVEI L, 2008, P 7 ACM SIGPLAN WORK, P83
   Marlow Simon, 2010, Haskell 2010 language report
   Mens T, 2004, IEEE T SOFTWARE ENG, V30, P126, DOI 10.1109/TSE.2004.1265817
   Meszaros G., 2007, Xunit test patterns: refactoring test code
   Mitchell N., 2011, HLINT MANUAL
   Murphy-Hill E, 2009, PROC INT CONF SOFTW, P287, DOI 10.1109/ICSE.2009.5070529
   NetBeans, WIKI ENTRY REFACTORI
   Nguyen T. T., 2009, INT C SOFTW MAINT IC
   Opdyke W. F., 1992, Refactoring object-oriented frameworks
   Róbert K, 2010, ERLANG 2010: PROCEEDINGS OF THE 2010 ACM SIGPLAN, ERLANG WORKSHOP, P45
   Roberts D., 1997, Theory and Practice of Object Systems, V3, P253, DOI 10.1002/(SICI)1096-9942(1997)3:4<253::AID-TAPO3>3.0.CO;2-T
   Roy CK, 2009, SCI COMPUT PROGRAM, V74, P470, DOI 10.1016/j.scico.2009.02.007
   Sagonas K, 2009, PPDP'09: PROCEEDINGS OF THE 11TH INTERNATIONAL ACM SIGPLAN SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING, P13, DOI 10.1145/1599410.1599414
   Schäfer M, 2010, ACM SIGPLAN NOTICES, V45, P286, DOI 10.1145/1932682.1869485
   Soares G., 2012, P 3 ANN C SYST PROGR, P49
   Sommerlad P., 2012, P 5 WORKSH REF TOOLS
   Sultana N., 2008, WORKSH PART EV PROGR
   Thompson S., 2003, BRAZ S PROGR LANG OU
   ToTH M., 2012, Lecture Notes in Computer Science (LNCS), V7241, P451
   Tullsen M., 2002, THESIS YALE U YALE
   Ubayashi N., 2008, 1 INT C SOFTW TEST V
   Vakilian M, 2012, PROC INT CONF SOFTW, P233, DOI 10.1109/ICSE.2012.6227190
   Yin X., 2009, IEEE IFIP INT C DEP
NR 82
TC 6
Z9 7
U1 0
U2 5
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD MAY
PY 2013
VL 23
IS 3
BP 293
EP 350
DI 10.1017/S0956796813000117
PG 58
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 245CH
UT WOS:000326436100003
OA Bronze
DA 2024-07-18
ER

PT J
AU Gibbons, J
   Oliveira, BCD
AF Gibbons, Jeremy
   Oliveira, Bruno C. d. S.
TI The essence of the ITERATOR pattern
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article; Proceedings Paper
CT Workshop on Mathematically Structured Functional Programming
CY JUL 02, 2006
CL Kuressaare, ESTONIA
AB The ITERATOR pattern gives a clean interface for element-by-element access to a collection, independent of the collection's shape. Imperative iterations using the pattern have two simultaneous aspects: mapping and accumulating. Various existing functional models of iteration capture one or other of these aspects, but not both simultaneously. We argue that C. McBride R. Paterson's applicative functors (Applicative programming with effects, J. Funct. and Program., 18 (1): 1-13, 2008), and ill particular the corresponding traverse operator, do exactly this, and therefore capture the essence of the ITERATOR pattern. Moreover, they do so in a way that nicely Supports modular programming. We present some axioms for traversal, discuss modularity concerns and illustrate with a simple example, the wordcount problem.
C1 [Gibbons, Jeremy; Oliveira, Bruno C. d. S.] Univ Oxford, Comp Lab, Oxford OX1 3QD, England.
C3 University of Oxford
RP Gibbons, J (corresponding author), Univ Oxford, Comp Lab, Wolfson Bldg,Parks Rd, Oxford OX1 3QD, England.
EM jeremy.gibbons@comlab.ox.ac.uk; burno.oliveira@comlab.ox.ac.uk
RI dos Santos Oliveira, Bruno Cesar/I-7977-2013
OI Gibbons, Jeremy/0000-0002-8426-9917
FU EPSRC [EP/E02128X/1] Funding Source: UKRI
CR [Anonymous], 2003, Haskell 98 language and libraries: the revised report
   Beck J., 1969, SEMINAR TRIPLES CATE, P119, DOI [10.1007/BFb0083084, DOI 10.1007/BFB0083084]
   BIRD R, 1998, LECT NOTES COMPUTER, V1422, P52, DOI DOI 10.1007/BFB0054285
   Fokkinga M., 1994, 9428 U TWENT DEP COM
   Fokkinga M.M., 1990, SQUIGGOLIST, V1, P81
   Fridlender D., 2000, Journal of Functional Programming, V10, P409, DOI 10.1017/S0956796800003658
   GALLAGHER KB, 1991, IEEE T SOFTWARE ENG, V17, P751, DOI 10.1109/32.83912
   Gamma E., 1994, Design patterns: Elements of reusable object-oriented software
   *GHC TEAM, 2006, HASK HIER LIB
   Gibbons J, 2002, LECT NOTES COMPUT SC, V2297, P149
   GIBBONS J, 2006, P WORKSH MATH STRUCT
   GIBBONS J, 2001, ELECT NOTES THEORETI, V44
   Gibbons J., 2003, CHAP ORIGAMI PROGRAM, P41
   Gibbons J, 2006, LECT NOTES COMPUT SC, V4014, P162, DOI 10.1007/11783596_12
   Gibbons Jeremy., 2006, WGP 06, P1, DOI [10.1145/1159861.1159863, DOI 10.1145/1159861.1159863]
   Hinze R, 2003, LECT NOTES COMPUT SC, V2793, P1
   HINZE R, 2001, ELECT NOTES THEORETI, V41, P5, DOI DOI 10.1016/S1571-0661(05)80542-0
   HUGHES J, 1989, COMPUT J, V32, P98, DOI 10.1093/comjnl/32.2.98
   Jansson P, 2002, SCI COMPUT PROGRAM, V43, P35, DOI 10.1016/S0167-6423(01)00020-X
   JANSSON P, 1997, 24 ACM SIGPLAN SIGAC, P470
   Jay CB, 1998, LECT NOTES COMPUT SC, V1381, P139, DOI 10.1007/BFb0053568
   Jay CB, 1995, SCI COMPUT PROGRAM, V25, P251, DOI 10.1016/0167-6423(95)00015-1
   Jones M. P., 1993, YALEUDCSRR1004
   JONES MP, 1995, LECT NOTES COMPUTER, V925, P97
   JONES SLP, 1993, P 20 ACM SIGPLAN SIG, P71, DOI DOI 10.1145/158511.158524
   Kernighan B.W., 1988, The C Programming Language
   KING D, 1993, P 1992 GLASG WORKSH, P134
   Kiselyov Oleg., 2005, HASKELLS OVERLOOKED
   Kühne T, 1999, LECT NOTES COMPUT SC, V1628, P329
   LEROY X, 1995, 22 ANN ACM S PRINC P, P142
   Mcbride C, 2008, J FUNCT PROGRAM, V18, P1, DOI 10.1017/S0956796807006326
   MEERTENS L, 1998, P WORKSH GEN PROGR W
   MEERTENS L, 1996, LECT NOTES COMPUTER, V1140, P1
   MEIJER E, 1991, LECT NOTES COMPUT SC, V523, P124
   MEIJER E, 1995, LECT NOTES COMPUTER, V925, P228
   MOGGI E, 1991, INFORM COMPUT, V93, P55, DOI 10.1016/0890-5401(91)90052-4
   Moggi E., 1999, ELECTRON NOTES THEOR, V29, P187, DOI DOI 10.1016/S1571-0661(05)80316-0.CTCS
   Pardo A, 2004, LECT NOTES COMPUT SC, V3622, P171
   Reynolds J. C., 1983, Information Processing 83. Proceedings of the IFIP 9th World Computer Congress, P513
   Villavicencio G, 2001, EIGHTH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P35, DOI 10.1109/WCRE.2001.957808
   WADLER P, 1993, NATO ASI F, V118, P233
   Wadler P., 1989, FPCA 89 P 4 INT C FU, P347
NR 42
TC 31
Z9 31
U1 2
U2 4
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD MAY-JUL
PY 2009
VL 19
BP 377
EP 402
DI 10.1017/S0956796809007291
PN 3-4
PG 26
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 461BW
UT WOS:000267240300006
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Harper, R
   Licata, DR
AF Harper, Robert
   Licata, Daniel R.
TI Mechanizing metatheory in a logical framework
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 10th ACM SIGPLAN International Conference on Functional Programming
   (ICFP)
CY SEP 26-28, 2005
CL Tallinn, ESTONIA
SP ACM SIGPLAN
AB The LF logical framework codifies a methodology for representing deductive systems, such as programming languages and logics, within a dependently typed lambda-calculus. In this methodology, the syntactic and deductive apparatus of a system is encoded as the canonical forms of associated LF types; an encoding is correct (adequote) if and only if it defines a compositional bijection between the apparatus of the deductive system and the associated canonical forms. Given an adequate encoding, one may establish metatheoretic properties of a deductive system by reasoning about the associated LF representation. The Twelf implementation of the LF logical framework is a convenient and powerful tool for putting this methodology into practice. Twelf supports both the representation of a deductive system and the mechanical verification of proofs of metatheorems about it. The purpose of this article is to provide an up-to-date overview of the LF lambda-calculus, the LF methodology for adequate representation, and the Twelf methodology for mechanizing metatheory. We begin by defining a variant of the original LF language, called Canonical LF, in which only canonical forms (long beta eta-normal forms) are permitted. This variant is parameterized by a subordination relation, which enables modular reasoning about LF representations. We then give an adequate representation of a simply typed lambda-calculus in Canonical LF, both to illustrate adequacy and to serve as an object of analysis. Using this representation, we formalize and verify the proofs of some metatheoretic results, including preservation, determinacy, and strengthening. Each example illustrates a significant aspect of using LF and Twelf for formalized metatheory.
C1 Carnegie Mellon Univ, Pittsburgh, PA 15213 USA.
C3 Carnegie Mellon University
RP Harper, R (corresponding author), Carnegie Mellon Univ, Pittsburgh, PA 15213 USA.
EM rwh@cs.cmu.edu; drl@cs.cmu.edu
RI Harper, Robert/HLH-3752-2023
OI Harper, Robert/0000-0002-9400-2941; Licata, Daniel R/0000-0003-0697-7405
CR ACAR UA, 2007, EUR S PROGR
   Anderson P, 2004, LECT NOTES COMPUT SC, V3223, P18
   [Anonymous], 2007, COQ PROOF ASS REF MA
   [Anonymous], 2000, Computer-Aided Reasoning: An Approach
   [Anonymous], J FUNCTIONAL PROGRAM
   APPEL A, 2006, INT WORKSH LOG FRAM, P95
   Appel AW, 2001, IEEE S LOG, P247, DOI 10.1109/LICS.2001.932501
   Avron A., 1989, CURRENT TRENDS HARDW, P323
   Aydemir BE, 2005, LECT NOTES COMPUT SC, V3603, P50
   Bertot Y., 2004, TEXT THEORET COMP S
   Cervesato I, 2002, INFORM COMPUT, V179, P19, DOI 10.1006/inco.2001.2951
   CERVESATO I, 2002, CMUCS02102 CARN MELL
   Constable R L, 1986, Implementing mathematics with the Nuprl proof development system
   Coquand Thierry., 1991, Logical Frameworks, P255, DOI DOI 10.1017/CBO9780511569807.011
   CRARY K, 2003, ACM SIGPLAN SIGACT S, P198
   CRARY K, 2003, INT C AUT DED, P106
   de Bruijn N. G., 1993, Logical Environments, P131
   FELTY A, 1991, LOGICAL FRAMEWORKS, P214
   FLUET M, 2006, ESOP, P7
   GARG D, 2006, COMP SEC FDN WORKSH, P183
   GEUVERS H, 1992, IEEE S LOG COMP SCI, P453
   Goguen H, 1999, LECT NOTES COMPUT SC, V1581, P177
   Harper R., 2005, ACM Transactions on Computational Logic, V6, P61, DOI 10.1145/1042038.1042041
   HARPER R, 1993, J ACM, V40, P143, DOI 10.1145/138027.138060
   Harrison J, 1996, LECT NOTES COMPUT SC, V1166, P265, DOI 10.1007/BFb0031814
   Klein G, 2006, ACM T PROGR LANG SYS, V28, P619, DOI 10.1145/1146809.1146811
   Lee Daniel K., 2007, ACM Symposium on Principles of Programming Languages, P173
   Leroy X, 2006, ACM SIGPLAN NOTICES, V41, P42, DOI 10.1145/1111320.1111042
   LICATA DR, 2005, CMUCS05178 CARN MELL
   MICHAYLOV S, 1992, LECT NOTES ARTIF INT, V596, P299, DOI 10.1007/BFb0013612
   MICULAN M, 1997, THESIS U PISA DIPART
   Murphy T, 2005, LECT NOTES COMPUT SC, V3634, P51, DOI 10.1007/11538363_6
   Murphy T, 2004, IEEE S LOG, P286, DOI 10.1109/LICS.2004.1319623
   NANEVSKI A, ACM T COMPUTATIONAL
   NANEVSKI A, 2006, TR2405 HARV COMP SCI
   NEDERPELT RP, 1994, AUTOMATH STUDIES LOG, V133
   Nipkow Tobias, 2002, ISABELLE HOL PROOF A, V2283
   PFENNING F, 1992, LECT NOTES ARTIF INT, V607, P536
   PFENNING F, 1992, CMUCS92186 CARN MELL
   PFENNING F, 1999, INT C AUT DED, P202
   Pfenning F, 1991, Logical frameworks, P149
   Pfenning F., 1999, HDB AUTOMATED REASON
   PFENNING F, 1994, CMUCS94218 CARN MELL
   PFENNING F, 2002, TWELF USERS GUIDE VE
   PIENTKA B, 2000, WORKSH AUT PROOFS MA
   Reed J, 2006, INT WORKSH HYBR LOG, P135
   ROHWEDDER E, 1996, LNCS, V1058, P296
   SALVESEN A, 1990, UNPUB 1 WORKSH LOG F
   Schurmann C., 1998, Automated Deduction - CADE-15. 15th International Conference on Automated Deduction. Proceedings, P286, DOI 10.1007/BFb0054266
   Schurmann C., 2001, Electronic Notes in Theoretical Computer Science, V58, P79
   SCHURMANN C, 2003, INT C THEOR PROV HIG, P120
   SCHURMANN C, 2005, INT C LOG PROG ART I, P150
   SCHURMANN C, 2005, INT C TYP LAMB CALC, P339
   Schurmann C, 2000, THESIS CARNEGIE MELL
   SIMMONS R, 2005, THESIS PRINCETON U P
   VANDAALEN DT, 1980, THESIS TECHNICAL U E
   VIRGA R, 1999, THESIS CARNEGIE MELL
   Watkins K, 2004, ANN NY ACAD SCI, V3085, P355
   WATKINS K, 2002, CMUCS02101 CARN MELL
   WATKINS K, 2004, INT WORKSH LOG FRAM
NR 60
TC 42
Z9 46
U1 1
U2 2
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD JUL-SEP
PY 2007
VL 17
BP 613
EP 673
DI 10.1017/S0956796807006430
PN 4-5
PG 61
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 208VY
UT WOS:000249348500005
OA Bronze
DA 2024-07-18
ER

PT J
AU Wakeling, D
AF Wakeling, D
TI Biological sequence similarity
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB Functional languages provide an excellent framework for formulating biological algorithms in a naive form and then transforming them into an efficient form. This helps biologists understand what matters about programming and brings functional programming into the realm of the practical. In this column, we present an example from our MSc course on bioinformatics and report on our experiences teaching functional programming in this context.
C1 Univ Exeter, Bioinformat Grp, Exeter EX4 4PT, Devon, England.
C3 University of Exeter
RP Univ Exeter, Bioinformat Grp, Exeter EX4 4PT, Devon, England.
EM D.Wakeling@exeter.ac.uk
CR [Anonymous], 1985, Structure and Interpretation of Computer Programs
   ARNOLD J, 2000, JAVA PROGRAMMING LAN
   Attwood T.K., 1999, INTRO BIOINFORMATICS, V1st
   BIRD RS, 1980, COMPUT SURV, V12, P403, DOI 10.1145/356827.356831
   Cormen Thomas H., 2001, INTRO ALGORITHMS
   CORNISHBOWDEN A, 1985, NUCLEIC ACIDS RES, V13, P3021, DOI 10.1093/nar/13.9.3021
   Deitel HarveyM., 2001, Java How to Program
   HUGHES J, 1989, COMPUT J, V32, P98, DOI 10.1093/comjnl/32.2.98
   Jones Simon Peyton, 2003, Journal of Functional Programming, V13, P1
   Krane DE, 2002, FUNDAMENTAL CONCEPTS
   Lesk A.M., 2002, INTRO BIOINFORMATICS
   Lodish H., 1999, MOL CELL BIOL, V4th
   MILLER W, 1985, SOFTWARE PRACT EXPER, V15, P1025, DOI 10.1002/spe.4380151102
   MYERS EW, 1989, ACM T PROGR LANG SYS, V11, P33, DOI 10.1145/59287.59290
   NEEDLEMAN SB, 1970, J MOL BIOL, V48, P443, DOI 10.1016/0022-2836(70)90057-4
   Tisdall J.D., 2001, BEGINNING PERL BIOIN
   WADLER P, 1990, THEOR COMPUT SCI, V73, P231, DOI 10.1016/0304-3975(90)90147-A
   WADLER P, 1998, LOGIC PROGRAMMING PR, P209
   WAGNER RA, 1974, J ACM, V21, P168, DOI 10.1145/321796.321811
   WALL L, 2000, PROGRAMMING P OREILL
NR 20
TC 0
Z9 0
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD JAN
PY 2006
VL 16
BP 1
EP 12
DI 10.1017/S095679680500571X
PN 1
PG 12
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 008WL
UT WOS:000235071300001
OA Bronze
DA 2024-07-18
ER

PT J
AU McBride, C
   McKinna, J
AF McBride, C
   McKinna, J
TI The view from the left
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article; Proceedings Paper
CT Meeting on Dependent Type Theory Meets Practical Programming
CY AUG, 2001
CL Schloss Dagstuhl, GERMANY
ID LAMBDA-CALCULUS; PROGRAMS
AB Pattern matching has proved an extremely powerful and durable notion in functional programming. This paper contributes a new programming notation for type theory which elaborates the notion in various ways. First, as is by now quite well-known in the type theory community, definition by pattern matching becomes a more discriminating tool in the presence of dependent types, since it refines the explanation of types as well as values. This becomes all the more true in the presence of the rich class of datatypes known as inductive families (Dybjer, 1991). Secondly, as proposed by Peyton Jones (1997) for Haskell, and independently rediscovered by us, subsidiary case analyses on the results of intermediate computations, which commonly take place on the right-hand side of definitions by pattern matching, should rather be handled on the left. In simply-typed languages, this subsumes the trivial case of Boolean guards; in our setting it becomes yet more powerful. Thirdly, elementary pattern matching decompositions have a well-defined interface given by a dependent type; they correspond to the statement of an induction principle for the datatype. More general, user-definable decompositions may be defined which also have types of the same general form. Elementary pattern matching may therefore be recast in abstract form, with a semantics given by translation. Such abstract decompositions of data generalize Wadler's (1987) notion of 'view'. The programmer wishing to introduce a new view of a type T, and exploit it directly in pattern matching, may do so via a standard programming idiom. The type theorist, looking through the Curry-Howard lens, may see this as proving a theorem, one which establishes the validity of a new induction principle for T. We develop enough syntax and semantics to account for this high-level style of programming in dependent type theory. We close with the development of a typechecker for the simply-typed lambda calculus, which furnishes a view of raw terms as either being well-typed, or containing an error. The implementation of this view is ipso,facto a proof that typechecking is decidable.
C1 Univ Durham, Dept Comp Sci, Durham DH1 3LE, England.
C3 Durham University
RP Univ Durham, Dept Comp Sci, South Rd, Durham DH1 3LE, England.
EM c.t.mcbride@durham.ac.uk; j.h.mckinna@durham.ac.uk
CR ABEL A, 2000, J FUNCTIONAL PROGRAM, V12, P1
   Altenkirch T, 1999, LECT NOTES COMPUT SC, V1683, P453
   ALTENKIRCH T, 2002, P IFIP 2 1 WORK C GE
   [Anonymous], 1994, LNCS
   [Anonymous], THESIS U EDINBURGH
   [Anonymous], J FUNCT PROGRAM
   [Anonymous], 1994, Computation and reasoning: a type theory for computer science
   [Anonymous], 1997, The Definition of Standard ML
   [Anonymous], 1972, INDAGATIONES MATHEMA, DOI DOI 10.1016/1385-7258(72)90034-0
   AUGUSTSSON L, 1985, LECT NOTES COMPUT SC, V201, P368
   AUGUSTSSON L, 1998, ACM I C FUNCT PROGR
   Barendregt H., 1992, HDB LOGIC COMPUTER S, V2
   BIRD R, 1998, LECT NOTES COMPUTER, V1422, P52, DOI DOI 10.1007/BFB0054285
   BOVE A, 2001, LNCS, V2152
   BURSTALL RM, 1969, COMPUT J, V12, P41, DOI 10.1093/comjnl/12.1.41
   Burton Warren., 1996, Views: an extension to Haskell pattern matching
   CALLAGHAN P, 2000, LNCS, V1956, P94
   Carlsson, 1999, EXERCISE DEPENDENT T
   Clark K.L., 1978, LOGIC DATA BASES, P292
   *COQ EQ, 2001, COQ PROOF ASS REF MA
   Coquand Thierry, 1992, P 3 WORKSH LOG FRAM
   CORNES C, 1997, THESIS U PARIS 7
   DEBRUIJN NG, 1991, INFORM COMPUT, V91, P189, DOI 10.1016/0890-5401(91)90066-B
   Dybjer Peter., 1991, Logical Frameworks
   GIMENEZ E, 1998, LNCS, V1443
   GOGUEN H, 1994, THESIS U EDINBURGH
   HARPER R, 1991, THEOR COMPUT SCI, V89, P107, DOI 10.1016/0304-3975(90)90108-T
   HOFMANN M, 1994, IEEE S LOG, P208, DOI 10.1109/LICS.1994.316071
   HUET G, 1990, EL P 1 ANN BRA WORKS
   JONES SP, 1999, HASKELL 98 NONSTRICT
   JONES SP, 1997, NEW VIEW GUARDS
   JONES SP, 2000, P 2000 HASK WORKSH
   JUTTING BV, 1994, LNCS, V806
   LEIJEN D, 1999, 2 C DOM SPEC LANG
   Luo Z., 1990, An extended calculus of constructions
   LUO Z, 1992, ECSLFCS92211 U ED LA
   MAGNUSSON L, 1994, THESIS CHALMERS U TE
   MCADAM BJ, 1999, SCOTT FUNCT PROGR WO, P243
   MCBRIDE C, 2002, LNCS, V2277
   MCBRIDE C, 1998, LNCS, V1512, P236
   MCBRIDE C, 2001, IN PRESS J FUNCTIONA
   McBride Conor, 1999, DEPENDENTLY TYPED FU
   MCBRIDE F, 1970, THESIS QUEENS U BELF
   McKinna J, 1999, J AUTOM REASONING, V23, P373, DOI 10.1023/A:1006294005493
   MCKINNA J, 1993, LNCS, V664
   MCKINNA J, 2002, WORKSH TERM TYP THEO
   Nordstrom Bengt, 1990, PROGRAMMING M LOFS T
   POLLACK R, 1994, INCREMENTAL CHANGES
   POLLACK R, 2000, LNCS, V1869
   POLLACK R, 1992, IMPLICIT SYNTAX
   SEVERI P, 1994, LNCS, V813
   STREICHER T, 1993, THESIS L MAXIMILIANS
   TAMAKI H, 1984, P 2 INT LOG PROGR C
   VODA P, 2002, WORKSH TERM TYP THEO
   WADLER P, 1990, THEOR COMPUT SCI, V73, P231, DOI 10.1016/0304-3975(90)90147-A
   WADLER P, 1989, P FPCA 89 ACM
   WADLER P, 1987, P POPL 87 ACM
   XI H, 1998, THESIS CARNEGIE MELL
NR 58
TC 139
Z9 148
U1 0
U2 4
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD JAN
PY 2004
VL 14
BP 69
EP 111
DI 10.1017/S0956796803004829
PN 1
PG 43
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 809LK
UT WOS:000220638000004
OA Bronze
DA 2024-07-18
ER

PT J
AU O'Hearn, P
AF O'Hearn, P
TI On bunched typing
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID LOGIC; INTERFERENCE
AB We study a typing scheme derived from a semantic situation where a single category possesses several closed structures, corresponding to different varieties of function type. In this scheme typing contexts are trees built from two (or more) binary combining operations, or in short, bunches. Bunched typing and its logical counterpart, bunched implications, have arisen in joint work of the author and David Pym. The present paper gives a basic account of the type system, and then focusses on concrete models that illustrate how it may be understood in terms of resource access and sharing. The most basic system has two context-combining operations, and the structural rules of Weakening and Contraction are allowed for one but not the other. This system includes a multiplicative, or substructural, function type --> alongside the usual (additive) function type -->; it is dubbed the alphalambda-calculus after its binders, alpha for the additive binder and lambda for the multiplicative, or lambdainear, binder. We show that the features of this system are, in a sense, complementary to calculi based on linear logic; it is incompatible with an interpretation where a multiplicative function uses its argument once, but perfectly compatible with a reading based on sharing of resources. This sharing interpretation is derived from syntactic control of interference, a type-theoretic method of controlling sharing of storage, and we show how bunch-based management of Contraction can be used to provide a more flexible type system for interference control.
C1 Queen Mary Univ London, Dept Comp Sci, London, England.
C3 University of London; Queen Mary University London
RP O'Hearn, P (corresponding author), Queen Mary Univ London, Dept Comp Sci, London, England.
CR ABRAMSKY S, 1993, THEOR COMPUT SCI, V111, P3, DOI 10.1016/0304-3975(93)90181-R
   [Anonymous], 1973, Operating System Principles
   BELNAP ND, 1982, J PHILOS LOGIC, V11, P375
   BENTON PN, 1995, LNCS, V933
   BENTON PN, 1992, LECT NOTES COMPUTER, V702, P61
   BERBER A, 1997, DUAL INTUITIONISTIC
   BERDINE J, 2002, IN PRESS J FUNCTIONA
   BIERMAN G, 1995, LECT NOTES COMPUTER, V902
   BOUBAULT E, 1995, THESIS
   BROOKES S, 1995, ELECT NOTES THEORETI, V1
   CARDELLI L, 2000, 2M ANN ACM SIGPLAN S
   CARDELLI L, 2002, LECT NOTES COMPUTER
   Day Brian, 1970, Lecture Notes in Math., V137, P1, DOI [10.1007/BFb0060438, DOI 10.1007/BFB0060438]
   Dunn J. M., 1986, Handbook of Philosophical Logic, V3, P117
   FOLTZ F, 1980, J PURE APPL ALGEBRA, V17, P171, DOI 10.1016/0022-4049(80)90082-1
   Freyd PJ, 1999, THEOR COMPUT SCI, V228, P49, DOI 10.1016/S0304-3975(98)00354-5
   Gray J.W., 1974, Lecture Notes in Mathematics., V391
   HEARN PO, 2000, LECT NOTES COMPUTER, V2142, P1
   HOFMANN M, 1999, THESIS DARMSTADT
   ISHTIAQ S, 2001, 28 ACM S PRINC PROGR, P14
   Ishtiaq SS, 1998, J LOGIC COMPUT, V8, P809, DOI 10.1093/logcom/8.6.809
   LAFONT Y, 1988, THEOR COMPUT SCI, V59, P157, DOI 10.1016/0304-3975(88)90100-4
   LUCASSEN JM, 1988, 15 ANN ACM S PRINC P
   Mac Lane, 1971, CATEGORIES WORKING M
   O'Hearn P.W., 1997, Algol-Like Languages
   O'Hearn P.W., 1993, Mathematical Structures in Computer Science, V3, P435, DOI DOI 10.1017/S0960129500000311
   O'Hearn PW, 1999, THEOR COMPUT SCI, V228, P211, DOI 10.1016/S0304-3975(98)00359-4
   O'Hearn PW, 1999, THEOR COMPUT SCI, V228, P253, DOI 10.1016/S0304-3975(98)00360-0
   O'Hearn PW, 2000, J ACM, V47, P167, DOI 10.1145/331605.331611
   O'Hearn PW, 1999, B SYMB LOG, V5, P215, DOI 10.2307/421090
   OHEARN PW, 1999, LECT NOTES COMPUTER, V1581
   OHEARN PW, 1992, LONDON MATH SOC LECT, V177, P217
   OHEARN PW, 1990, THESIS QUEENS U KING
   OHEARN PW, 1991, LECT NOTES COMPUT SC, V530, P74
   OLES FJ, 1982, THESIS SYRACUSE U SY
   POLAKOW J, 1999, LECT NOTES COMPUTER, V1581
   Pym DavidJ., 2002, The Semantics and Proof Theory of the Logic of Bunched Implications
   READ STEPHEN, 1987, RELEVANT LOGIC PHILO
   REDDY US, 1993, UNPUB LINEAR LOGIC M
   RETORE C, 1995, COMPUTER SCI LOGIC
   Reynolds J. C., 1981, Algorithmic Languages. Proceedings of the International Symposium, P345
   REYNOLDS JC, 1989, LECT NOTES COMPUT SC, V372, P704
   REYNOLDS JC, 1978, 5 ACM S PRINC PROGR, P39
   REYNOLDS JC, 2000, P S CEL WORK CAR HOA
   RUET P, 1998, LECT NOTES COMPUTER
   SCHROEDERHEISTE.P, 1991, LOGICAL FRAMEWORKS, P385
   SEELEY R, 1989, CONT MATH, V92, P371
   WADLER P, 1991, ACM IFIP S PART EV S
   WALKER D, 2000, WORKSH TYP COMP MONT
   [No title captured]
NR 50
TC 48
Z9 52
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD JUL
PY 2003
VL 13
BP 747
EP 796
DI 10.1017/S0956796802004495
PN 4
PG 50
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 709QN
UT WOS:000184636000002
OA Bronze
DA 2024-07-18
ER

PT J
AU Danner, N
   Licata, DR
AF Danner, Norman
   Licata, Daniel R.
TI Denotational semantics as a foundation for cost recurrence extraction
   for functional languages
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID COMPLEXITY
AB A standard informal method for analyzing the asymptotic complexity of a program is to extract a recurrence that describes its cost in terms of the size of its input and then to compute a closed-form upper bound on that recurrence. We give a formal account of that method for functional programs in a higher order language with let-polymorphism. The method consists of two phases. In the first phase, a monadic translation is performed to extract a cost-annotated version of the original program. In the second phase, the extracted program is interpreted in a model. The key feature of this second phase is that different models describe different notions of size. This plays out in several ways. For example, when analyzing functions that take arguments of inductive types, different notions of size may be appropriate depending on the analysis. When analyzing polymorphic functions, our approach shows that one can formally describe the notion of size of an argument in terms of the data that is common to the notions of size for each type instance of the domain type. We give several examples of different models that formally justify various informal cost analyses to show the applicability of our approach.
C1 [Danner, Norman; Licata, Daniel R.] Wesleyan Univ, Middletown, CT 06459 USA.
C3 Wesleyan University
RP Danner, N (corresponding author), Wesleyan Univ, Middletown, CT 06459 USA.
EM ndanner@wesleyan.edu; dlicata@wesleyan.edu
OI Danner, Norman/0000-0003-1119-4982
FU National Science Foundation [CCF 1618203]
FX Both authors were supported by the National Science Foundation under
   grant number CCF 1618203. We had a number of helpful discussions about
   this work with colleagues, including Ed Morehouse, Alex Kavvos, and Joe
   Cutler. We thank the referees for a number of helpful comments and
   pointers to literature with which we were initially unfamiliar.
CR Abadi M., 1991, Journal of Functional Programming, V1, P375, DOI 10.1017/S0956796800000186
   Albert E, 2018, ACM T COMPUT LOG, V19, DOI 10.1145/3274278
   Albert E, 2013, ACM T COMPUT LOG, V14, DOI 10.1145/2499937.2499943
   Albert E, 2012, THEOR COMPUT SCI, V413, P142, DOI 10.1016/j.tcs.2011.07.009
   [Anonymous], 1992, 19th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, DOI DOI 10.1145/143165.143169
   [Anonymous], 1988, NONWELL FOUNDED SETS
   [Anonymous], 1989, FPCA 1989, DOI DOI 10.1145/99370.99404
   Atkey R, 2011, LOG METH COMPUT SCI, V7, DOI 10.2168/LMCS-7(2:17)2011
   Avanzini M, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110287
   Avanzini M, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P152, DOI 10.1145/2784731.2784753
   BACKUS J, 1978, COMMUN ACM, V21, P613, DOI 10.1145/359576.359579
   Barnaby C, 2018, THESIS WESLEYAN U
   Benzinger R, 2004, THEOR COMPUT SCI, V318, P79, DOI 10.1016/j.tcs.2003.10.022
   BRUCE KB, 1990, INFORM COMPUT, V85, P76, DOI 10.1016/0890-5401(90)90044-I
   Charguéraud A, 2019, J AUTOM REASONING, V62, P331, DOI 10.1007/s10817-017-9431-7
   Çiçek E, 2017, ACM SIGPLAN NOTICES, V52, P316, DOI 10.1145/3093333.3009858
   COHEN J, 1974, COMMUN ACM, V17, P301, DOI 10.1145/355616.361015
   Cousot Patrick, 1977, P 4 ACM S PRINC PROG, P238, DOI [10.1145/512950.512973, DOI 10.1145/512950.512973]
   Crary K., 2000, Conference Record of POPL'00: 27th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages. Papers Presented at the Symposium, P184, DOI 10.1145/325694.325716
   Cutler JW, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3408979
   Dal Lago U, 2012, LOG METH COMPUT SCI, V8, DOI 10.2168/LMCS-8(4:11)2012
   Danielsson NA, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P133, DOI 10.1145/1328438.1328457
   Danner J N., 2013, P 7 WORKSH PROGR LAN, P25, DOI DOI 10.1145/2428116.2428123
   Danner N, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P140, DOI 10.1145/2784731.2784749
   Danner N, 2007, LOG METH COMPUT SCI, V3, DOI 10.2168/LMCS-3(1:9)2007
   Davey B. A., 2002, INTRO LATTICES ORDER, V2nd, DOI DOI 10.1017/CBO9780511809088
   Fisher K., 2015, P 20 ACM SIGPLAN INT
   Gueneau Armael, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P533, DOI 10.1007/978-3-319-89884-1_19
   Hackett J, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341718
   Handley MAT, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371092
   Hoffmann Jan, 2012, Computer Aided Verification. Proceedings 24th International Conference, CAV 2012, P781, DOI 10.1007/978-3-642-31424-7_64
   Hoffmann J, 2017, ACM SIGPLAN NOTICES, V52, P359, DOI 10.1145/3093333.3009842
   Hoffmann J, 2012, ACM T PROGR LANG SYS, V34, DOI 10.1145/2362389.2362393
   Hoffmann J, 2010, LECT NOTES COMPUT SC, V6012, P287, DOI 10.1007/978-3-642-11957-6_16
   Hofmann M, 2003, ACM SIGPLAN NOTICES, V38, P185, DOI 10.1145/640128.604148
   Hongwei Xu, 1999, Conference Record of POPL '99. 26th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P214
   Hughes J., 1996, Conference Record of POPL '96: The 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P410, DOI 10.1145/237721.240882
   Jost S, 2017, J AUTOM REASONING, V59, P87, DOI 10.1007/s10817-016-9398-9
   Jost S, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P223, DOI 10.1145/1706299.1706327
   Kavvos GA, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371083
   Kincaid Z, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158142
   Knoth T, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3408988
   Knoth T, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P253, DOI 10.1145/3314221.3314602
   LEMETAYER D, 1988, ACM T PROGR LANG SYS, V10, P248, DOI 10.1145/42190.42347
   Levy Paul Blain, 2004, Call-by-push-value: A Functional/ Imperative Synthesis, V2, DOI DOI 10.1007/978-94-007-0954-6
   McCarthy J, 2018, SCI COMPUT PROGRAM, V164, P49, DOI 10.1016/j.scico.2017.05.001
   Mitchell John C., 1996, Foundation of computing series
   Okasaki Chris, 1999, Purely functional data structures, DOI DOI 10.1017/CBO9780511530104
   Radicek I, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158124
   Rajani V, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434308
   Raymond J., 2016, THESIS WESLEYAN U
   Rosendahl M., 1989, FPCA 89, P144, DOI DOI 10.1145/99370.99381
   Sands D., 1990, THESIS U LONDON
   Seidel D, 2011, ELECTRON P THEOR COM, P89, DOI 10.4204/EPTCS.57.7
   Shultis J, 1985, CUCS28885
   SMYTH MB, 1982, SIAM J COMPUT, V11, P761, DOI 10.1137/0211062
   Van Stone K., 2003, THESIS CARNEGIE MELL
   Wang D, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290326
   Wang P, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133903
   WEGBREIT B, 1975, COMMUN ACM, V18, P528, DOI 10.1145/361002.361016
   Zhan BH, 2018, LECT NOTES ARTIF INT, V10900, P532, DOI 10.1007/978-3-319-94205-6_35
NR 61
TC 0
Z9 0
U1 0
U2 1
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD JUL 5
PY 2022
VL 32
AR e8
DI 10.1017/S095679682200003X
PG 73
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 2Q7MV
UT WOS:000820603500001
OA Green Submitted, hybrid
DA 2024-07-18
ER

PT J
AU Sterling, J
AF Sterling, Jonathan
TI Higher order functions and Brouwer's thesis
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID BAR RECURSION
AB Extending Martin Escardo's effectful forcing technique, we give a new proof of a well-known result: Brouwer's monotone bar theorem holds for any bar that can be realized by a functional of type (N -> N)-> N in Godel's System T. Effectful forcing is an elementary alternative to standard sheaf-theoretic forcing arguments, using ideas from programming languages, including computational effects, monads, the algebra interpretation of call-by-name lambda-calculus, and logical relations.
   Our argument proceeds by interpreting System T programs as well-founded dialogue trees whose nodes branch on a query to an oracle of type N -> N, lifted to higher type along a call-by-name translation. To connect this interpretation to the bar theorem, we then show that Brouwer's famous "mental constructions" of barhood constitute an invariant form of these dialogue trees in which queries to the oracle are made maximally and in order.
C1 [Sterling, Jonathan] Carnegie Mellon Univ, Dept Comp Sci, Pittsburgh, PA 15213 USA.
C3 Carnegie Mellon University
RP Sterling, J (corresponding author), Carnegie Mellon Univ, Dept Comp Sci, Pittsburgh, PA 15213 USA.
EM jmsterli@cs.cmu.edu
OI Sterling, Jonathan/0000-0002-0585-5564
FU AFOSR [MURI FA9550-15-1-0053, FA9550-19-1-0216]
FX Thanks to Carlo Angiuli, Mark van Atten, Mark Bickford, Bob Constable,
   Thierry Coquand, Martin Escardo, Bob Harper, and Per Martin-Lof for
   enlightening conversations about the bar theorem; I am especially
   thankful to Pierre-Marie Pedrot for pointing out an error in a previous
   draft of this paper, and to Vincent Rahli for suggesting a significant
   simplification to the proof, and to one of the anonymous referees for a
   suggestion to make the dialogue interpretation compositional. I am
   grateful to Bob Constable for scanning and sending to me a copy of Per
   Martin-Lof's doctoral dissertation. In my formalization, I benefited
   from Darin Morrison's alternative Agda prelude library. Finally, I thank
   the referees for their helpful and constructive criticisms, and I thank
   Tristan Nguyen at AFOSR for support.; This work was supported in part by
   AFOSR under grants MURI FA9550-15-1-0053 and FA9550-19-1-0216. Any
   opinions, findings, and conclusions or recommendations expressed in this
   material are those of the authors and do not necessarily reflect the
   views of the AFOSR.
CR Abel A., 2019, P 24 ACM SIGPLAN INT
   Ackermann W, 1928, MATH ANN, V99, P118, DOI 10.1007/BF01459088
   [Anonymous], 1986, Cambridge studies in advanced mathematics
   [Anonymous], 1989, Topology via logic
   [Anonymous], 2016, UNIVERSES SHEA UNPUB
   [Anonymous], 2002, SOURCE BOOKS HIST SC
   [Anonymous], 1988, Studies in Logic and the Foundations of Mathematics
   [Anonymous], 2002, Philosophia Mathematica
   Awodey S, 2009, J SYMBOLIC LOGIC, V74, P861, DOI 10.2178/jsl/1245158088
   Bauer A, 2006, BLOG POST
   Bickford M, 2018, LICS'18: PROCEEDINGS OF THE 33RD ANNUAL ACM/IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P245, DOI 10.1145/3209108.3209200
   Brouwer L. E. J., 1981, Brouwer's Cambridge Lectures on Intuitionism
   Capretta V, 2016, LECT NOTES COMPUT SC, V9634, P91, DOI 10.1007/978-3-662-49630-5_6
   Constable R, 2014, VIRTUAL EVIDENCE CON
   Constable R L, 1986, Implementing mathematics with the Nuprl proof development system
   Constable R, 2014, ANN PURE APPL LOGIC, V165, P164, DOI 10.1016/j.apal.2013.07.009
   Coquand T, 2003, ANN PURE APPL LOGIC, V124, P71, DOI 10.1016/S0168-0072(03)00052-6
   Coquand T., 2016, LIPICS, V52
   Coquand T, 2017, IEEE S LOG
   Coquand Thierry, 2012, Logic, Epistemology, and the Unity of Science, V27, P203, DOI [10.1007/978-94-007-4435-6_10, DOI 10.1007/978-94-007-4435-6_10]
   DUMMETT MAE, 2000, OXFORD LOGIC GUIDES, V39
   Escardo M., 2007, SEEMINGLY IMPOSSIBLE
   Escardó M, 2013, ELECTRON NOTES THEOR, V298, P119, DOI 10.1016/j.entcs.2013.09.010
   Fourman M., 1984, STUDIES LOGIC FDN MA, V112, P161
   Fourman Michael P., 2013, Logic, Language, Information, and Computation. 20th International Workshop, WoLLIC 2013. Proceedings: LNCS 8071, P153, DOI 10.1007/978-3-642-39992-3_15
   Fourman M. P, 1982, NOTIONS CHOICE SEQUE, P91
   Fujiwara M, 2019, ANN PURE APPL LOGIC, V170, P867, DOI 10.1016/j.apal.2019.04.001
   Gambino N, 2007, MATH STRUCT COMP SCI, V17, P65, DOI 10.1017/S0960129506005810
   Godel K., 1958, dialectica, V12, P280, DOI 10.1111/j.1746-8361.1958.tb01464.x
   Harper R, 2016, Practical Foundations for Programming Languages
   Harper Robert, 2012, EXCEPTIONS ARE SHARE
   Heyting A., 1956, INTUITIONISM INTRO S
   Hilbert D, 1926, MATH ANN, V95, P161, DOI 10.1007/BF01206605
   Jaber G, 2012, IEEE S LOG, P395, DOI 10.1109/LICS.2012.49
   JOHNSTONE PT, 1983, B AM MATH SOC, V8, P41, DOI 10.1090/S0273-0979-1983-15080-2
   Joyal A., 2019, TOPO LOGIE
   Kreisel Georg, 1970, Annals of Mathematical Logic, V1, P229, DOI [10.1016/0003-4843(70)90001-X, DOI 10.1016/0003-4843(70)90001-X]
   Levy P. B., 2006, Higher-Order and Symbolic Computation, V19, P377, DOI 10.1007/s10990-006-0480-6
   Longley J, 2015, THEOR APPL COMPUT, P1, DOI 10.1007/978-3-662-47992-6
   Longley J, 1999, ACM SIGPLAN NOTICES, V34, P1, DOI 10.1145/317765.317775
   Mac Lane S., 1992, SHEAVES GEOMETRY LOG
   Martin-Lof P., 1970, Notes on Constructive Mathematics
   Martin-Lof P., 1980, Logic, P153
   Norell Ulf, 2009, P 4 INT WORKSHOP TYP, P1, DOI DOI 10.1145/1481861.1481862
   Oliva P, 2018, J SYMBOLIC LOGIC, V83, P70, DOI 10.1017/jsl.2017.33
   Pédrot PM, 2017, IEEE S LOG, DOI 10.1109/LICS.2017.8005113
   Petrakis I., 2010, THESIS
   Rahli V., 2017, 2017 32 ANN ACM IEEE, P1
   Rahli V, 2016, PROCEEDINGS OF THE 5TH ACM SIGPLAN CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS (CPP'16), P130, DOI 10.1145/2854065.2854077
   SCHWICHTENBERG H, 1979, J SYMBOLIC LOGIC, V44, P325, DOI 10.2307/2273126
   Spector Clifford, 1962, RECURSIVE FUNCTION T, V5, P1
   Sterling J, 2018, LICS'18: PROCEEDINGS OF THE 33RD ANNUAL ACM/IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P879, DOI 10.1145/3209108.3209153
   Streicher T, 2005, OX LOGIC G, V48, P78
   Sundholm G., 2012, LOGIC EPISTEMOLOGY U, V27, P69
   Sundholm G, 2008, ONE HUNDRED YEARS OF INTUITIONISM ( 1907- 2007 ): THE CERISY CONFERENCE, P60, DOI 10.1007/978-3-7643-8653-5_5
   Tabareau N., 2016, LOGICS COMPUTER SCI
   Tabareau N., 2019, P ACM PROGR LANG 4 P, V4
   TAIT WW, 1967, J SYMBOLIC LOGIC, V32, P198, DOI 10.2307/2271658
   Van Atten Mark, 2004, On brouwer
   van Dalen D., 2013, LEJ BROUWER TOPOLOGI
   VANDERHOEVEN G, 1984, ANN PURE APPL LOGIC, V27, P63, DOI 10.1016/0168-0072(84)90035-6
   Vickers S, 2007, HANDBOOK OF SPATIAL LOGICS, P429, DOI 10.1007/978-1-4020-5587-4_8
   Xu C, 2020, LEIBNIZ INT P INFORM, V167, pDAG
   Xu CJ, 2020, LOG METH COMPUT SCI, V16, DOI 10.23638/LMCS-16(1:22)2020
NR 64
TC 0
Z9 0
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD MAY 19
PY 2021
VL 31
AR e11
DI 10.1017/S0956796821000095
PG 33
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA SE0NQ
UT WOS:000651772400001
OA hybrid, Green Submitted
DA 2024-07-18
ER

PT J
AU Bird, RS
AF Bird, Richard S.
TI An optimal, purely functional implementation of the Garsia-Wachs
   algorithm
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID TREES
AB The Garsia-Wachs algorithm is an algorithm for building a binary leaf tree whose cost is as small as possible. The problem and the algorithm are described in more detail below, but the task is essentially the same as that of building a Huffman coding tree with the added constraint that the fringe of the tree has to be exactly the given list of inputs (in Huffman coding, the fringe of the tree can be any permutation of the input). As we will show below, the Garsia-Wachs algorithm can be implemented with a linearithmic running time-a running time of O (n log n) steps for an input of length n, the same time bound as for Huffman coding.
C1 [Bird, Richard S.] Univ Oxford, Dept Comp Sci, Wolfson Bldg,Parks Rd, Oxford OX1 3QD, England.
C3 University of Oxford
RP Bird, RS (corresponding author), Univ Oxford, Dept Comp Sci, Wolfson Bldg,Parks Rd, Oxford OX1 3QD, England.
EM bird@cs.ox.ac.uk
OI , Richard/0000-0002-3901-742X
CR [Anonymous], 1998, The art of computer programming: Sorting and searching
   Bird R., 2020, Algorithm Design with Haskell
   GARSIA AM, 1977, SIAM J COMPUT, V6, P622, DOI 10.1137/0206045
   GILBERT EN, 1959, BELL SYST TECH J, V38, P933, DOI 10.1002/j.1538-7305.1959.tb01583.x
   Hu T.C., 1982, Combinatorial Algorithms
   HU TC, 1971, SIAM J APPL MATH, V21, P514, DOI 10.1137/0121057
   Huet G., 1997, Journal of Functional Programming, V7, P549, DOI 10.1017/S0956796897002864
   Karpinski M, 1997, THEOR COMPUT SCI, V180, P309, DOI 10.1016/S0304-3975(96)00296-4
   KINGSTON JH, 1988, J ALGORITHMS, V9, P129, DOI 10.1016/0196-6774(88)90009-0
   Knuth D. E., 1971, Acta Informatica, V1, P14, DOI 10.1007/BF00264289
   [No title captured]
NR 11
TC 0
Z9 0
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD JAN 21
PY 2020
VL 30
AR e3
DI 10.1017/S0956796819000194
PG 13
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA KU3SJ
UT WOS:000519631200001
DA 2024-07-18
ER

PT J
AU García-Pérez, A
   Nogueira, P
AF Garcia-Perez, Alvaro
   Nogueira, Pablo
TI The full-reducing Krivine abstract machine KN simulates pure
   normal-order reduction in lockstep: A proof via corresponding calculus
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB We exploit the idea of proving properties of an abstract machine by using a corresponding semantic artefact better suited to their proof. The abstract machine is an improved version of Pierre Cregut's full-reducing Krivine machine KN. The original version works with closed terms of the pure lambda calculus with de Bruijn indices. The improved version reduces in similar fashion but works on closures where terms may be open. The corresponding semantic artefact is a structural operational semantics of a calculus of closures whose reduction relation is purposely a reduction strategy. As shown in previous work, improved KN and the structural operational semantics 'correspond', i.e. both artefacts realise the same reduction strategy. In this paper, we prove in the calculus of closures that the reduction strategy simulates in lockstep (at every reduction step) the complete and standard normal-order strategy (i.e. leftmost reduction to normal form) of the pure lambda calculus. The simulation is witnessed by a substitution function from closures of the closure calculus to pure terms of the pure lambda calculus. Thus, KN also simulates normal-order in lockstep by the correspondence. This result is stronger than the known proof that KN is complete, for in the pure lambda calculus there are complete but non-standard strategies. The lockstep simulation proof consists of straightforward structural inductions, thanks to three properties of the closure calculus we call 'index alignment', 'parameters-as-levels' and 'balanced derivations'. The first two come from KN Thanks to these properties, a proof in a calculus of closures involving de Bruijn indices and de Bruijn levels is unproblematic. There is no lexical adjustment at binding lookup, on-the-fly alpha-conversion or recursive traversals of the term to deal with bound and free variables as in other calculi. This paper contributes to the framework for environment machines of Biernacka and Danvy a full-reducing open-terms closure calculus, its corresponding abstract machine, and a lockstep simulation proof via a substitution function.
C1 [Garcia-Perez, Alvaro] IMDEA Software Inst, Campus Montegancedo S-N, Madrid 28223, Spain.
   [Nogueira, Pablo] ESNE, Univ Sch Design Innovat & Technol, Av Alfonso XIII 97, Madrid 28016, Spain.
C3 IMDEA Software Institute
RP García-Pérez, A (corresponding author), IMDEA Software Inst, Campus Montegancedo S-N, Madrid 28223, Spain.
EM alvaro.garcia.perez@imdea.org; pablo.nogueira@esne.es
RI García-Pérez, Álvaro/AFB-0654-2022
OI García-Pérez, Álvaro/0000-0002-9558-6037; Nogueira,
   Pablo/0000-0002-8706-0027
FU Spanish Ministry of Economy and Competitiveness [STRONGSOFT
   TIN2012-39391-C04-02]; Regional Government of Madrid [N-GREENS SOFTWARES
   2013/ICE-2731]; Icelandic Research Fund [NOSOS 141558-053]; European
   Research Council [RACCOON H2020-EU 714729]
FX We are deeply grateful to Pierre-Yves Strub for mechanising a large
   portion of the lock-step simulation proof in the Coq proof assistant.
   Pierre-Yves helped us sanitise the paper proof and improved several
   definitions and lemmata. We are also deeply grateful to our JFP editor,
   Jeremy Gibbons, for his excellent editorial support. Finally, we are
   deeply grateful to all the anonymous reviewers for their patience and
   very pertinent suggestions which have helped us improve the original
   submission substantially in terms of correctness, presentation and
   scope. In particular, a comment by one reviewer led us to state and
   prove Theorem 6.13 as a proper commuting diagram rather than as a
   conditional diagram. The authors have carried out the research presented
   in this paper part-time at different institutions: the Babel Research
   Group of Universidad Politecnica de Madrid (both authors), Reykjavik
   University and The IMDEA Software Institute (Alvaro), and ESNE,
   University School of Design, Innovation and Technology (Pablo). This
   work has been partially funded by the Spanish Ministry of Economy and
   Competitiveness through project STRONGSOFT TIN2012-39391-C04-02, by the
   Regional Government of Madrid through programme N-GREENS SOFTWARE
   S2013/ICE-2731, by the Icelandic Research Fund through project NOSOS
   141558-053 and by the European Research Council through project RACCOON
   H2020-EU 714729.
CR Abadi M., 1991, Journal of Functional Programming, V1, P375, DOI 10.1017/S0956796800000186
   Accattoli B., 2012, LOG METH COMPUT SCI, V8, P1
   Accattoli B, 2016, LECT NOTES COMPUT SC, V9803, P1, DOI 10.1007/978-3-662-52921-8_1
   Accattoli B, 2015, LECT NOTES COMPUT SC, V9458, P231, DOI 10.1007/978-3-319-26529-2_13
   [Anonymous], 1984, The Lambda Calculus: Its Syntax and Semantics
   [Anonymous], 1972, INDAGATIONES MATHEMA, DOI DOI 10.1016/1385-7258(72)90034-0
   Ariola ZM, 2009, ACM T PROGR LANG SYS, V31, DOI 10.1145/1516507.1516508
   Aydemir BE, 2005, LECT NOTES COMPUT SC, V3603, P50
   Aydemir B, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P3, DOI 10.1145/1328438.1328443
   Barendregt H., 1990, Formal Models and Semantics, P321, DOI DOI 10.1016/B978-0-444-88074-1.50012-3
   BARENDREGT HP, 1987, INFORM COMPUT, V75, P191, DOI 10.1016/0890-5401(87)90001-0
   Biernacka M, 2008, ACM T COMPUT LOG, V9, DOI 10.1145/1297658.1297664
   Charguéraud A, 2012, J AUTOM REASONING, V49, P363, DOI 10.1007/s10817-011-9225-2
   Cregut Pierre, 2007, Higher-Order and Symbolic Computation, V20, P209, DOI 10.1007/s10990-007-9015-z
   Curien PL, 1996, J ACM, V43, P362, DOI 10.1145/226643.226675
   CURIEN PL, 1991, THEOR COMPUT SCI, V82, P389, DOI 10.1016/0304-3975(91)90230-Y
   Curien PL, 2000, ACM SIGPLAN NOTICES, V35, P233, DOI 10.1145/357766.351262
   CURIEN PL, 1986, CATEGORICAL COMBINAT
   Curry H.B., 1958, Combinatory logic, V1
   Danvy O., 2013, SCI M PL CUR VEN 9 1
   Danvy O., 2011, Proceedings of the 2011 ACM SIGPLAN Workshop on Partial Evaluation and Program Manipulation, PEPM 2011, Austin, TX, USA, January 24-25, 2011, P1, DOI DOI 10.1145/1929501.1929503
   Danvy O, 2009, LECT NOTES COMPUT SC, V5832, P66, DOI 10.1007/978-3-642-04652-0_3
   Diehl S, 2000, FUTURE GENER COMP SY, V16, P739, DOI 10.1016/S0167-739X(99)00088-6
   Felleisen Mathias, 1987, THESIS
   García-Pérez A, 2014, SCI COMPUT PROGRAM, V95, P176, DOI 10.1016/j.scico.2014.05.011
   Garcia-Perez A., 2014, THESIS
   Garcia-Perez A., 2013, 15 INT S PRINCIPLES, P85, DOI DOI 10.1145/2505879.2505887
   Grégoire B, 2002, ACM SIGPLAN NOTICES, V37, P235, DOI 10.1145/583852.581501
   KAHN G, 1987, LECT NOTES COMPUT SC, V247, P22
   KELLER RM, 1976, COMMUN ACM, V19, P371, DOI 10.1145/360248.360251
   Kesner D, 2007, LECT NOTES COMPUT SC, V4646, P238
   Kesner D, 2009, LOG METH COMPUT SCI, V5, DOI 10.2168/LMCS-5(3:1)2009
   Kiselyov O., 2018, LNCS, P33
   Krivine Jean-Louis, 2007, Higher-Order and Symbolic Computation, V20, P199, DOI 10.1007/S10990-007-9018-9
   Lescanne P., 1995, Rewriting Techniques and Applications. 6th International Conference, RTA-95. Proceedings, P294
   Mellies P.-A., 1995, Typed Lambda Calculi and Applications. Second International Conference on Typed Lambda Calculi and Applications, TLCA '95. Proceedings, P328, DOI 10.1007/BFb0014062
   Munk J., 2008, THESIS
   Paulson L, 1996, ML for the Working Programmer
   Peyton-Jones Simon, 1987, IMPLEMENTATION FUNCT
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   PLOTKIN G, 1981, FN19 DAIMI AARH U DE
   Plotkin G. D., 1975, Theoretical Computer Science, V1, P125, DOI 10.1016/0304-3975(75)90017-1
   Pollack R., 1994, Types for Proofs and Programs. International Workshop TYPES '93. Selected Papers, P313
   Ronchi Della Rocca S., 2004, TEXT THEORET COMP S
   Scherer G, 2015, LECT NOTES COMPUT SC, V9032, P685, DOI 10.1007/978-3-662-46669-8_28
   Sestoft P, 2002, LECT NOTES COMPUT SC, V2566, P420
NR 46
TC 4
Z9 4
U1 0
U2 3
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD APR 29
PY 2019
VL 29
AR e7
DI 10.1017/S0956796819000017
PG 38
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA HW1BP
UT WOS:000466417600001
DA 2024-07-18
ER

PT J
AU Ko, HS
   Gibbons, J
AF Ko, Hsiang-Shang
   Gibbons, Jeremy
TI Programming with ornaments
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB Dependently typed programming advocates the use of various indexed versions of the same shape of data, but the formal relationship amongst these structurally similar datatypes usually needs to be established manually and tediously. Ornaments have been proposed as a formal mechanism to manage the relationships between such datatype variants. In this paper, we conduct a case study under an ornament framework; the case study concerns programming binomial heaps and their operations - including insertion and minimum extraction - by viewing them as lifted versions of binary numbers and numeric operations. We show how current dependently typed programming technology can lead to a clean treatment of the binomial heap constraints when implementing heap operations. We also identify some gaps between the current technology and an ideal dependently typed programming language that we would wish to have for our development.
C1 [Ko, Hsiang-Shang] Natl Inst Informat, Informat Syst Architecture Res Div, Tokyo, Japan.
   [Gibbons, Jeremy] Univ Oxford, Dept Comp Sci, Oxford OX1 2JD, England.
C3 Research Organization of Information & Systems (ROIS); National
   Institute of Informatics (NII) - Japan; University of Oxford
RP Ko, HS (corresponding author), Natl Inst Informat, Informat Syst Architecture Res Div, Tokyo, Japan.
EM hsiang-shang@nii.ac.jp; jeremy.gibbons@cs.ox.ac.uk
RI Ko, Hsiang-Shang/ABA-7755-2020
OI Ko, Hsiang-Shang/0000-0002-2439-1048
FU Clarendon Scholarship; UK EPSRC-project Reusability and Dependent Types
   [EP/G034516/1]; Japan Society for the Promotion of Science (JSPS)
   [25240009]; EPSRC [EP/G034516/1] Funding Source: UKRI
FX Most of this work was done whilst the first author was in Oxford,
   supported by a Clarendon Scholarship and by the UK EPSRC-funded project
   Reusability and Dependent Types (EP/G034516/1). The first author then
   relocated to Japan and is supported by the Japan Society for the
   Promotion of Science (JSPS) Grant-in-Aid for Scientific Research (A) No.
   25240009. We are indebted to Conor McBride for inspiration, not least in
   introducing us to ornaments and index-first datatypes. We would also
   like to thank Ralf Hinze and Venanzio Capretta for their insightful
   comments on the binomial heaps development during the first author's
   DPhil viva.Thanks are also due to the anonymous referees for their
   thorough reviewing and invaluable comments.
CR [Anonymous], 2007, PRACTICAL PROGRAMMIN
   [Anonymous], 1999, PURELY FUNCTIONAL DA
   Bernardy JP, 2013, ACM SIGPLAN NOTICES, V48, P61, DOI 10.1145/2544174.2500577
   Bove A, 2009, LECT NOTES COMPUT SC, V5520, P57, DOI 10.1007/978-3-642-03153-3_2
   Brady E, 2004, ANN NY ACAD SCI, V3085, P115
   Chapman J., 2010, P ICFP, P3
   Cockx J, 2014, ICFP'14: PROCEEDINGS OF THE 2014 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P257, DOI 10.1145/2628136.2628139
   Czarnecki K, 2009, LECT NOTES COMPUT SC, V5563, P260, DOI 10.1007/978-3-642-02408-5_19
   Dagand PE, 2014, J FUNCT PROGRAM, V24, P316, DOI 10.1017/S0956796814000069
   Dagand Pierre-Evariste., 2013, JOURNEES FRANCOPHONE
   Devriese Dominique., 2011, Proceedings of the 16th ACM SIGPLAN international conference on Functional programming, ICFP '11, P143
   Dybjer P., 1994, Formal Aspects of Computing, V6, P440, DOI 10.1007/BF01211308
   Goguen H, 2006, LECT NOTES COMPUT SC, V4060, P521, DOI 10.1007/11780274_27
   Ko H.-J., 2014, THESIS
   Ko H.-S., 2013, P ACM SIGPLAN WORKSH, P37, DOI [10.1145/2502409.2502413, DOI 10.1145/2502409.2502413]
   Ko Hsiang-Shang, 2013, PROGR INFORM, V10, P65, DOI [10.2201/NiiPi.2013.10.5, DOI 10.2201/NIIPI.2013.10.5]
   Kopylov A, 2003, IEEE S LOG, P86, DOI 10.1109/LICS.2003.1210048
   Martin-Lof P., 1984, Intuitionistic type theory
   McBride C, 2004, J FUNCT PROGRAM, V14, P69, DOI 10.1017/S0956796803004829
   McBride C., 2014, P INT C FUNCT PROGR, P297
   McBride Conor, 2011, ORNAMENTAL ALG UNPUB
   Norell U, 2009, LECT NOTES COMPUT SC, V5832, P230, DOI 10.1007/978-3-642-04652-0_5
   Sheard T, 2008, LECT NOTES COMPUT SC, V5161, P158, DOI 10.1007/978-3-540-88059-2_5
   Williams Thomas., 2014, Proceedings of the 10th ACM SIGPLAN workshop on Generic programming, P15, DOI [10.1145/2633628.2633631, DOI 10.1145/2633628.2633631]
NR 24
TC 9
Z9 9
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PY 2017
VL 27
BP 1
EP 43
AR e2
DI 10.1017/S0956796816000307
PG 43
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA EM7ZT
UT WOS:000395531600001
DA 2024-07-18
ER

PT J
AU Stansifer, P
   Wand, M
AF Stansifer, Paul
   Wand, Mitchell
TI Romeo: A system for more flexible binding-safe programming
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB Current systems for safely manipulating values containing names only support simple binding structures for those names. As a result, few tools exist to safely manipulate code in those languages for which name problems are the most challenging. We address this problem with Romeo, a language that respects alpha-equivalence on its values, and which has access to a rich specification language for binding, inspired by attribute grammars. Our work has the complex-binding support of David Herman's lambda(m), but is a full-fledged binding-safe language like Pure FreshML.
C1 [Stansifer, Paul; Wand, Mitchell] Northeastern Univ, Coll Comp & Informat Sci, Boston, MA 02115 USA.
C3 Northeastern University
RP Stansifer, P (corresponding author), Northeastern Univ, Coll Comp & Informat Sci, Boston, MA 02115 USA.
EM pauls@ccs.neu.edu; wand@ccs.neu.edu
FU Defense Advanced Research Projects Agency; Air Force Research Laboratory
   [FA8750-10-2-0233]; Direct For Computer & Info Scie & Enginr; Division
   Of Computer and Network Systems [1405881] Funding Source: National
   Science Foundation
FX This material is based on research sponsored by the Defense Advanced
   Research Projects Agency and the Air Force Research Laboratory under
   agreement number FA8750-10-2-0233. Any opinions, findings, conclusions
   or recommendations expressed herein are those of the authors, and do not
   necessarily reflect those of the US Government, DARPA, or the Air Force.
CR Adams MD, 2015, ACM SIGPLAN NOTICES, V50, P457, DOI [10.1145/2775051.2677013, 10.1145/2676726.2677013]
   [Anonymous], 1991, POPL 91, DOI DOI 10.1145/99583.99607
   [Anonymous], THESIS
   Aydemir BE, 2005, LECT NOTES COMPUT SC, V3603, P50
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Dybvig R. K., 1993, LISP and Symbolic Computation, V5, P295, DOI 10.1007/BF01806308
   Erdweg S, 2014, LECT NOTES COMPUT SC, V8586, P489
   Flatt M, 2016, ACM SIGPLAN NOTICES, V51, P705, DOI 10.1145/2914770.2837620
   Hendriks D, 2003, LECT NOTES ARTIF INT, V2741, P136
   Herman D, 2008, LECT NOTES COMPUT SC, V4960, P48
   Kohlbecker Eugene., 1986, P 1986 ACM C LISP FU, P151
   Lorenzen F., 2016, P 43 ANN ACM SIGPLAN
   Muehlboeck F., 2013, THESIS
   Pollack R, 2012, J AUTOM REASONING, V49, P185, DOI 10.1007/s10817-011-9229-y
   Pottier F, 2006, ELECTRON NOTES THEOR, V148, P27, DOI 10.1016/j.entcs.2005.11.039
   Pottier F, 2007, IEEE S LOG, P356, DOI 10.1109/LICS.2007.44
   Pottier Francois., 2007, Static name control for Fresh ML
   Pouillard N, 2010, ICFP 2010: PROCEEDINGS OF THE 2010 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P217
   Sewell P, 2010, J FUNCT PROGRAM, V20, P71, DOI 10.1017/S0956796809990293
   Shinwell MR, 2003, ACM SIGPLAN NOTICES, V38, P263, DOI 10.1145/944746.944729
   Urban C, 2008, J AUTOM REASONING, V40, P327, DOI 10.1007/s10817-008-9097-2
   Weirich Stephanie., 2011, Proceedings of the 16th ACM SIGPLAN International Conference on Functional Programming, P333
NR 22
TC 1
Z9 1
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PY 2016
VL 26
AR e13
DI 10.1017/S0956796816000137
PG 52
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DT3CK
UT WOS:000381357900001
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Tirronen, V
   Isomöttönen, V
AF Tirronen, Ville
   Isomottonen, Ville
TI Teaching types with a cognitively effective worked example format
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID DESIGN
AB Teaching functional programming as a second programming paradigm is often difficult as students can have strong preconceptions about programming. When most of these preconceived ideas fail to be confirmed, functional programming may be seen as an unnecessarily difficult topic. A typical topic that causes such difficulties is the language of types employed by many modern functional languages. In this paper, we focus on addressing this difficulty through the use of step-by-step calculations of type expressions. The outcome of the study is an elaboration of a worked example format and a methodical approach for teaching types to beginner functional programmers.
C1 [Tirronen, Ville; Isomottonen, Ville] Univ Jyvaskyla, Dept Math Informat Technol, SF-40351 Jyvaskyla, Finland.
C3 University of Jyvaskyla
RP Tirronen, V (corresponding author), Univ Jyvaskyla, Dept Math Informat Technol, SF-40351 Jyvaskyla, Finland.
EM ville.e.t.tirronen@jyu.fi; ville.isomottonen@jyu.fi
OI Tirronen, Ville/0000-0002-5500-8267
CR [Anonymous], 1967, PERSPECTIVES CURRICU
   [Anonymous], 2005, THESIS
   BHUIYAN S, 1994, INTERACTIVE LEARNING, V4, P115, DOI DOI 10.1080/1049482940040201
   Bird R., 1998, INTRO FUNCTIONAL PRO, V2nd
   Blanco J., 2009, ACM SIGCSE B, V41, P31
   BRODA K, 1994, REASONED PROGRAMMING
   Chakravarty MMI, 2004, J FUNCT PROGRAM, V14, P113, DOI 10.1017/S0956796803004805
   Chitil O, 2001, ACM SIGPLAN NOTICES, V36, P193, DOI 10.1145/507669.507659
   Clack C, 1995, LECT NOTES COMPUT SC, V1022, P289
   Dijkstra E. W., 2000, NOTATIONAL CONVENTIO
   Fung P, 1996, COMPUT EDUC, V27, P59, DOI 10.1016/0360-1315(96)00016-4
   Harrison W., 2000, BEG BORROW STEAL USI, V5, P39
   Isomöttönen V, 2013, ACM T COMPUT EDUC, V13, DOI 10.1145/2483710.2483711
   JELSMA O, 1990, INSTR SCI, V19, P89, DOI 10.1007/BF00120698
   Joosten S., 1993, Journal of Functional Programming, V3, P49, DOI DOI 10.1017/S0956796800000599
   Keravnou ET, 1995, LECT NOTES COMPUT SC, V1022, P15
   Lerner BS, 2007, ACM SIGPLAN NOTICES, V42, P425, DOI 10.1145/1273442.1250783
   Lipovaca M., 2012, LEARN YOU HASKELL GR
   Nock M.K., 2007, HDB RES METHODS ABNO, P337
   Ruehr F, 2008, P 2008 INT WORKSH FU, P79
   SEGAL J, 1994, INSTR SCI, V22, P385
   Siegfried RobertMichael., 2012, Information Systems Education Journal, V10, P24
   Sorva Juha, 2012, Visual Program Simulation in Introductory Programming Education
   Sweller J, 1998, EDUC PSYCHOL REV, V10, P251, DOI 10.1023/A:1022193728205
   Thompson S, 1995, LECT NOTES COMPUT SC, V1022, P85
   Tirronen V., 2012, Proceedings of the 12th Koli Calling International Conference on Computing Education Research, P74, DOI DOI 10.1145/2401796.2401805
   VANMERRIENBOER JJG, 1990, COMPUT HUM BEHAV, V6, P273, DOI 10.1016/0747-5632(90)90023-A
   VANMERRIENBOER JJG, 1990, J EDUC COMPUT RES, V6, P265, DOI 10.2190/4NK5-17L7-TWQV-1EHL
   Wallingford E., 2002, P INT C FUNCT PROGR, P151
   Zhu X., 1987, Cognition and Instruction, V4, P137, DOI DOI 10.1207/S1532690XCI0403_
NR 30
TC 1
Z9 1
U1 0
U2 2
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PY 2015
VL 25
AR e23
DI 10.1017/S0956796814000021
PG 16
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Social Science Citation Index (SSCI)
SC Computer Science
GA DB1AM
UT WOS:000368240300012
OA Bronze
DA 2024-07-18
ER

PT J
AU Van Horn, D
   Might, M
AF Van Horn, David
   Might, Matthew
TI Systematic abstraction of abstract machines
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID CONTROL-FLOW ANALYSIS; PROGRAM ANALYSIS; REACHABILITY
AB We describe a derivational approach to abstract interpretation that yields novel and transparently sound static analyses when applied to well-established abstract machines for higher-order and imperative programming languages. To demonstrate the technique and support our claim, we transform the CEK machine of Felleisen and Friedman (Proc. of the 14th ACM SIGACT-SIGPLAN Symp. Prin. Program. Langs, 1987, pp. 314-325), a lazy variant of Krivine's machine (Higher-Order Symb. Comput. Vol 20, 2007, pp. 199-207), and the stack-inspecting CM machine of Clements and Felleisen (ACM Trans. Program. Lang. Syst. Vol 26, 2004, pp. 1029-1052) into abstract interpretations of themselves. The resulting analyses bound temporal ordering of program events; predict return-flow and stack-inspection behavior; and approximate the flow and evaluation of by-need parameters. For all of these machines, we find that a series of well-known concrete machine refactorings, plus a technique of store-allocated continuations, leads to machines that abstract into static analyses simply by bounding their stores. These machines are parameterized by allocation functions that tune performance and precision and substantially expand the space of analyses that this framework can represent. We demonstrate that the technique scales up uniformly to allow static analysis of realistic language features, including tail calls, conditionals, mutation, exceptions, first-class continuations, and even garbage collection. In order to close the gap between formalism and implementation, we provide translations of the mathematics as running Haskell code for the initial development of our method.
C1 [Van Horn, David] Northeastern Univ, Coll Comp & Informat Sci, Boston, MA 02115 USA.
   [Might, Matthew] Univ Utah, Sch Comp, Salt Lake City, UT 84112 USA.
C3 Northeastern University; Utah System of Higher Education; University of
   Utah
RP Van Horn, D (corresponding author), Northeastern Univ, Coll Comp & Informat Sci, Boston, MA 02115 USA.
EM dvanhorn@ccs.neu.edu; might@cs.utah.edu
OI Van Horn, David/0000-0002-9201-6864
FU National Science Foundation [1035658, 0937060]; DARPA [FA8750-12-
   2-0106]; Division Of Computer and Network Systems; Direct For Computer &
   Info Scie & Enginr [1035658] Funding Source: National Science Foundation
FX This material is based upon work supported by the National Science
   Foundation under Grant No. 1035658 and research sponsored by DARPA under
   agreement number FA8750-12- 2-0106. The first author was supported by
   the National Science Foundation under Grant No. 0937060 to the Computing
   Research Association for the CIFellow Project. The US Government is
   authorized to reproduce and distribute reprints for Governmental
   purposes notwithstanding any copyright notation thereon.
CR Ager MS, 2004, INFORM PROCESS LETT, V90, P223, DOI 10.1016/j.ipl.2004.02.012
   Ashley JM, 1998, ACM T PROGR LANG SYS, V20, P845, DOI 10.1145/291891.291898
   Ayers A. E., 1993, THESIS CAMBRIDGE
   Biernacka M, 2008, ACM T COMPUT LOG, V9, DOI 10.1145/1297658.1297664
   Bouajjani A, 1997, LECT NOTES COMPUT SC, V1243, P135
   Clements J, 2004, ACM T PROGR LANG SYS, V26, P1029, DOI 10.1145/1034774.1034778
   Clements J, 2001, LECT NOTES COMPUT SC, V2028, P320
   Cousot P, 1999, NATO ADV SCI I F-COM, V173, P421
   Cousot P., 1979, 6 ACM S PRINCIPLES P, P269, DOI DOI 10.1145/567752.567778
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Danvy, 2006, THESIS AARHUS U AARH
   DANVY O, 2004, ELECT NOTES THEORETI
   Earl C., 2010, WORKSH SCHEM FUNCT P, P24
   Faxen K., 1995, LNCS, V983, P136
   Felleisen, 1987, THESIS INDIANA U IND
   Felleisen M., 1986, P 3 WORK C FORM DESC, P193
   Felleisen M., 2009, Semantics Engineering with PLT Redex
   Felleisen Mattias, 1987, P 14 ACM SIGACT SIGP, P314, DOI [10.1145/41625.41654, DOI 10.1145/41625.41654]
   FLANAGAN C, 1993, SIGPLAN NOTICES, V28, P237, DOI 10.1145/173262.155113
   Harrison W. L.  III, 1989, LISP and Symbolic Computation, V2, P179, DOI 10.1007/BF01808954
   Jones N. D., 1982, P 9 ACM SIGPLAN SIGA, P66
   Jones ND, 2007, THEOR COMPUT SCI, V375, P120, DOI 10.1016/j.tcs.2006.12.030
   Jones NeilD., 1981, P 8 C AUTOMATA LANGU, P114, DOI DOI 10.1007/3-540-10843-2_10
   Kodumal J, 2004, ACM SIGPLAN NOTICES, V39, P207, DOI 10.1145/996893.996867
   Krivine Jean-Louis, 2007, Higher-Order and Symbolic Computation, V20, P199, DOI 10.1007/S10990-007-9018-9
   Krivine J.-L, 1985, ORAL HLTH STATUS ORA, P7
   LANDIN PJ, 1964, COMPUT J, V6, P308, DOI 10.1093/comjnl/6.4.308
   Meunier P, 2006, ACM SIGPLAN NOTICES, V41, P218, DOI 10.1145/1111320.1111057
   Midtgaard J, 2008, LECT NOTES COMPUT SC, V5079, P347
   Midtgaard J, 2012, ACM COMPUT SURV, V44, DOI 10.1145/2187671.2187672
   Midtgaard J, 2009, ACM SIGPLAN NOTICES, V44, P287, DOI 10.1145/1631687.1596592
   Might M., 2006, P 11 ACM SIGPLAN INT, P13, DOI DOI 10.1016/J.TCS.2006.12.031
   Nielson F., 1999, Principles of Program Analysis
   Pottier F, 2005, ACM T PROGR LANG SYS, V27, P344, DOI 10.1145/1057387.1057392
   Reps T, 1998, INFORM SOFTWARE TECH, V40, P701, DOI 10.1016/S0950-5849(98)00093-7
   Reynolds John C., 1972, ACM 72, V2, P717, DOI DOI 10.1023/A:1010027404223
   SHAO Z, 1994, P 1994 ACM C LISP FU, P150
   Sharir M., 1981, Program flow analysis. Theory and applications, P189
   Shivers O. G., 1991, THESIS CARNEGIE MELL
   Skalka C, 2000, ACM SIGPLAN NOTICES, V35, P34, DOI 10.1145/357766.351244
   Skalka C, 2008, J FUNCT PROGRAM, V18, P179, DOI 10.1017/S0956796807006466
   Van Horn D, 2011, COMMUN ACM, V54, P101, DOI 10.1145/1995376.1995400
   Van Horn D, 2010, ACM SIGPLAN NOTICES, V45, P51, DOI 10.1145/1932681.1863553
   Vardoulalcis D., 2011, LOG METH COMPUT SCI, V7, P1
   Wickstrom U., 1991, EUREFIC EUROPEAN REA
   Wright AK, 1998, ACM T PROGR LANG SYS, V20, P166, DOI 10.1145/271510.271523
   [No title captured]
NR 47
TC 11
Z9 13
U1 0
U2 1
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD JUL-SEP
PY 2012
VL 22
SI SI
BP 705
EP 746
DI 10.1017/S0956796812000238
PN 4-5
PG 42
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 004HQ
UT WOS:000308672600008
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Nakata, K
   Hasegawa, M
AF Nakata, Keiko
   Hasegawa, Masahito
TI Small-step and big-step semantics for call-by-need
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB We present natural semantics for acyclic as well as cyclic call-by-need lambda calculi, which are proved equivalent to the reduction semantics given by Ariola and Felleisen (J. Funct. Program., vol. 7. no. 3, 1997). The natural semantics are big-step and use global heaps, where evaluation is suspended and memorized. The reduction semantics are small-step, and evaluation is suspended and memorized locally in let-bindings. Thus two styles of formalization describe the call-by-need strategy from different angles. The natural semantics for the acyclic calculus is revised from the previous presentation by Maraist et al. (J. Fund. Program., vol. 8, no. 3, 1998), and its adequacy is ascribed to its correspondence with the reduction semantics, which has been proved equivalent to call-by-name by Ariola and Felleisen. The natural semantics for the cyclic calculus is inspired by that of Launchbury (1993) and Sestoft (1997), and we state its adequacy using a denotational semantics in the style of Launchbury; adequacy of the reduction semantics for the cyclic calculus is in turn ascribed to its correspondence with the natural semantics.
C1 [Nakata, Keiko] Tallinn Univ Technol, Inst Cybernet, Tallinn, Estonia.
   [Hasegawa, Masahito] Kyoto Univ, Math Sci Res Inst, Kyoto, Japan.
C3 Tallinn University of Technology; Kyoto University
RP Nakata, K (corresponding author), Tallinn Univ Technol, Inst Cybernet, Tallinn, Estonia.
EM keiko@cs.ioc.ee; hassei@kurims.kyoto-u.ac.jp
OI Hasegawa, Masahito/0000-0003-3460-8615
FU Estonian Centre of Excellence in Computer Science
FX We thank the anonymous referees for their careful reviewing and Matthias
   Felleisen for his editorial support. Keiko Nakata has been supported by
   the Estonian Science Foundation grant no. 6940 and the ERDF cofunded
   project EXCS, the Estonian Centre of Excellence in Computer Science.
   Masahito Hasegawa has partly been supported by the Grant-in-Aid for
   Scientific Research (C) 20500010.
CR ABRAMSKY S, 1993, INFORM COMPUT, V105, P159, DOI 10.1006/inco.1993.1044
   Ariola Z. M., 1997, LNCS, V1281, P77
   Ariola Z. M., 1997, J FUNCTIONAL PROGRAM, V7, P265
   ARIOLA ZM, 1994, IEEE S LOG, P416, DOI 10.1109/LICS.1994.316066
   DANVY O, 2008, P INT C FUNCT PROGR
   GARCIA R, 2009, P ACM SIGPLAN SIGACT
   LAUNCHBURY J, 1993, P ACM SIGPLAN SIGACT
   Leroy Xavier., 2008, The Objective Caml system
   MARAIST J, 1998, J FUNCTIONAL PROGRAM, V8, P275
   NAKATA K, 2009, ARXIV0907460V1CSPL
   Okasaki C., 1994, LISP and Symbolic Computation, V7, P57, DOI 10.1007/BF01019945
   Plotkin G. D., 1975, Theoretical Computer Science, V1, P125, DOI 10.1016/0304-3975(75)90017-1
   SESTOFT P, 1997, J FUNCTIONAL PROGRAM, V7, P231, DOI DOI 10.1017/S0956796897002712
   Sperber M., 2009, J. Funct. Program, V19, P1
   Syme D., 2008, F PROGRAMMING LANGUA
   Syme D, 2006, ELECTRON NOTES THEOR, V148, P3, DOI 10.1016/j.entcs.2005.11.038
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
NR 17
TC 12
Z9 14
U1 0
U2 1
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD NOV
PY 2009
VL 19
BP 699
EP 722
DI 10.1017/S0956796809990219
PN 6
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 525EJ
UT WOS:000272196200004
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Schwinghammer, J
AF Schwinghammer, Jan
TI Coherence of subsumption for monadic types
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID SEMANTICS
AB One approach to give semantics to languages with subtypes is by translation to target languages without subtyping: SUbtypings A <= B are interpreted via conversion functions A B. This paper shows how to extend the method to languages with computational effects, using Moggi's computational metalanguage.
C1 Univ Saarland, Programming Syst Lab, D-66041 Saarbrucken, Germany.
C3 Saarland University
RP Schwinghammer, J (corresponding author), Univ Saarland, Programming Syst Lab, D-66041 Saarbrucken, Germany.
EM jan@ps.uni-sb.de
CR Aspinall D, 2001, THEOR COMPUT SCI, V266, P273, DOI 10.1016/S0304-3975(00)00175-4
   Benton N, 2002, LECT NOTES COMPUT SC, V2395, P42
   BREAZUTANNEN V, 1991, INFORM COMPUT, V93, P172, DOI 10.1016/0890-5401(91)90055-7
   BREAZUTANNEN V, 1990, PROCEEDINGS OF THE 1990 ACM CONFERENCE ON LISP AND FUNCTIONAL PROGRAMMING, P44, DOI 10.1145/91556.91590
   CARDELLI L, 1988, INFORM COMPUT, V76, P138, DOI 10.1016/0890-5401(88)90007-7
   Crary K, 2005, J FUNCT PROGRAM, V15, P249, DOI 10.1017/S0956796804005441
   Curien Pierre-Louis, 1992, MATH STRUCT COMP SCI, V2, p55S91, DOI DOI 10.1017/S0960129500001134
   Gunter Carl., 1994, Theoretical aspects of object-oriented programming
   Levy Paul Blain, 2004, SEMANTIC STRUCTURES, V2
   Mitchell John C., 1996, Foundation of computing series
   MOGGI E, 1991, INFORM COMPUT, V93, P55, DOI 10.1016/0890-5401(91)90052-4
   MOGGI E, 1990, ECSLFCS90113 U ED DE
   Pierce B, 1997, THEOR COMPUT SCI, V176, P235, DOI 10.1016/S0304-3975(96)00096-5
   REYNOLDS JC, 1991, LECT NOTES COMPUT SC, V526, P675
   Reynolds JC, 2003, MG COMP SCI, P309
   REYNOLDS JC, 1980, LECT NOTES COMPUTER, V94
   Schwinghammer J, 2005, LECT NOTES COMPUT SC, V3701, P390
   Tannen V., 1989, MSCIS8963 U PENN DEP
   Wadler P., 2003, ACM Transactions on Computational Logic, V4, P1, DOI 10.1145/601775.601776
   Zwanenburg J, 1999, LECT NOTES COMPUT SC, V1581, P381
NR 20
TC 3
Z9 3
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD MAR
PY 2009
VL 19
BP 157
EP 172
DI 10.1017/S0956796808006886
PN 2
PG 16
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 423OW
UT WOS:000264506600003
OA Bronze
DA 2024-07-18
ER

PT J
AU Schmidt-Schauss, M
   Sabel, D
   Schütz, M
AF Schmidt-Schauss, Manfred
   Sabel, David
   Schuetz, Marko
TI Safety of Nocker's strictness analysis
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID LAMBDA-CALCULUS; TOTALITY; LANGUAGE
AB This paper proves correctness of Nocker's method of strictness analysis, implemented in the Clean compiler, which is an effective way for strictness analysis in lazy functional languages based on their operational semantics. We improve upon the work Clark, Hankin and Hunt did on the correctness of the abstract reduction rules in two aspects. Our correctness proof is based on a functional core language and a contextual semantics, thus proving a wider range of strictness-based optimizations as correct, and our method fully considers the cycle detection rules, which contribute to the strength of Nocker's strictness analysis.
   Our algorithm SAL is a reformulation of Nocker's strictness analysis algorithm in a functional core language LR. This is a higher order call-by-need lambda calculus with case, constructors, letrec, and seq, which is extended during strictness analysis by set constants like Top or Inf, denoting sets of expressions, which indicate different evaluation demands. It is also possible to define new set constants by recursive equations with a greatest fixpoint semantics. The operational semantics of LR is a small-step semantics. Equality of expressions is defined by a contextual semantics that observes termination of expressions. Basically, SAL is a nontermination checker. The proof of its correctness and hence of Nocker's strictness analysis is based mainly on an exact analysis of the lengths of evaluations, i.e., normal-order reduction sequences to WHNF. The main measure being the number of "essential" reductions in evaluations.
   Our tools and results provide new insights into call-by-need lambda calculi, the role of sharing in functional programming languages, and into strictness analysis in general. The correctness result provides a foundation for Nocker's strictness analysis in Clean, and also for its use in Haskell.
C1 [Schmidt-Schauss, Manfred; Sabel, David] Goethe Univ Frankfurt, Inst Informat, D-60054 Frankfurt, Germany.
   [Schuetz, Marko] Univ Puerto Rico, Dept Math Sci, Mayaguez, PR 00681 USA.
C3 Goethe University Frankfurt; University of Puerto Rico; University of
   Puerto Rico Mayaguez
RP Schmidt-Schauss, M (corresponding author), Goethe Univ Frankfurt, Inst Informat, Postfach 11 19 32, D-60054 Frankfurt, Germany.
EM schauss@ki.informatik.uni-frankfurt.de
RI ; Sabel, David/A-1068-2014
OI Schmidt-Schauss, Manfred/0000-0001-8809-7385; Sabel,
   David/0000-0002-5109-3273
CR Abramsky Samson., 1987, Abstract Interpretation of Declarative Languages
   [Anonymous], 1995, LISP SYMB COMPUT, DOI DOI 10.1007/BF01018827
   [Anonymous], 1995, C RECORD POPL 95 22, DOI DOI 10.1145/199448.199507
   [Anonymous], 1984, The Lambda Calculus: Its Syntax and Semantics
   [Anonymous], 2003, Haskell 98 language and libraries: the revised report
   Ariola ZM, 2002, ANN PURE APPL LOGIC, V117, P95, DOI 10.1016/S0168-0072(01)00104-X
   ARIOLA ZM, 1995, THEOR COMPUT SCI, V146, P69, DOI 10.1016/0304-3975(94)00185-L
   Ariola ZM, 1997, INFORM COMPUT, V139, P154, DOI 10.1006/inco.1997.2651
   Baader Franz, 1998, TERM REWRITING ALL
   BURN GL, 1986, LECT NOTES COMPUT SC, V217, P42
   BURN GL, 1991, LAZY FUNCTIONAL LANG
   Clark D, 2000, LECT NOTES COMPUT SC, V1824, P95
   Coppo M, 2002, THEOR COMPUT SCI, V272, P69, DOI 10.1016/S0304-3975(00)00348-0
   COUSOT P, 1977, 4 ACM S PRINC PROGR
   Dezani-Ciancaglini M, 1999, INFORM COMPUT, V150, P153, DOI 10.1006/inco.1998.2773
   FELLEISEN M, 1992, THEOR COMPUT SCI, V103, P235, DOI 10.1016/0304-3975(92)90014-7
   Gasser KLS, 1998, SCI COMPUT PROGRAM, V31, P113, DOI 10.1016/S0167-6423(96)00043-3
   GORDON AD, 1994, FUNCTIONAL PROGRAMMI, P78
   JENSEN TP, 1998, S PRINCIPLES PROGRAM, P209
   JONES P, 1994, FUNCTIONAL PROGRAMMI, P194
   Jones SP, 2002, J FUNCT PROGRAM, V12, P393, DOI 10.1017/S0956796802004331
   KENNAWAY JR, 1995, LECT NOTES COMPUTER, V914, P257
   Kuo T.-M., 1989, FPCA 89, P260
   Levy J.-J., 1976, Theoretical Computer Science, V2, P97, DOI 10.1016/0304-3975(76)90009-8
   MANN M, 2004, 18 JW GEOTH U FRANKF
   Moran A, 1999, LECT NOTES COMPUT SC, V1594, P85
   MORAN A, 1999, POPL 99, P43
   Mycroft Alan, 1981, Ph. D. Dissertation
   Nocker E., 1993, FPCA '93. Conference on Functional Programming Languages and Computer Architecture, P255, DOI 10.1145/165180.165219
   NOCKER E, 1992, 9231 DEP COMP SCI U
   NOCKER E, 1990, 9014 DEP COMP SCI U
   NOCKER EGJMH, 1991, LECT NOTES COMPUT SC, V506, P202
   PAPE D, 2000, THESIS FREIE U BERLI
   PAPE D, 1998, LECT NOTES COMPUT SC, V1595, P155
   PATERSON R, 1996, LNCS, V1145
   Pitts A. M., 2000, Mathematical Structures in Computer Science, V10, P321, DOI 10.1017/S0960129500003066
   Pitts AM, 2002, LECT NOTES COMPUT SC, V2395, P378
   PITTS AM, 1994, THEOR COMPUT SCI, V124, P195, DOI 10.1016/0304-3975(94)90014-0
   PLASMEIJER R, 2003, CONCURRENT CLEAN LAN
   Plotkin G. D., 1975, Theoretical Computer Science, V1, P125, DOI 10.1016/0304-3975(75)90017-1
   Sands D, 2002, LECT NOTES COMPUT SC, V2566, P60
   Santos Andre, 1995, THESIS U GLASGOW
   Schmidt-Schauss M, 2007, RAIRO-THEOR INF APPL, V41, P225, DOI 10.1051/ita:2007010
   SCHMIDTSCHAUSS M, 2007, J FUNCT PROGRAMM
   SCHMIDTSCHAUSS M, 2004, 19 JW GEOTH U I INF
   SCHMIDTSCHAUSS M, 1995, LECT NOTES COMPUTER, V983, P343
   SCHMIDTSCHAUSS M, 2007, 23 JW GEOTH U I INF
   SCHMIDTSCHAUSS M, 2003, 16 JW GEOTH U FRANKF
   SCHUTZ M, 1994, THESIS JW GEOTHE U F
   SCHUTZ M, 2000, THESIS JW GEOTHE U F
   VANEEKELEN M, 1993, TERM GRAPH REWRITING, pCH9
   WADLER P, 1987, LECT NOTES COMPUT SC, V274, P385
   WADLER P, 1987, ABSTRACT INTERPRETAT, pCH12
NR 53
TC 19
Z9 19
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD JUL
PY 2008
VL 18
BP 503
EP 551
DI 10.1017/S0956796807006624
PN 4
PG 49
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 330BW
UT WOS:000257915300003
OA Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Adams, R
AF Adams, R
TI Pure type systems with judgemental equality
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID LOGICAL FRAMEWORK
AB In a typing system, there are two approaches that may be taken to the notion of equality. One can use some external relation of convertibility defined on the terms of the grammar, such as beta-convertibility or beta eta-convertibility; or one can introduce a judgement form for equality into the rules of the typing system itself. For quite some time, it has been an open problem whether the two systems produced by these two choices are equivalent. This problem is essentially the problem of proving that the Subject Reduction property holds in the system with judgemental equality. In this paper, we shall prove that the equivalence holds for all functional Pure Type Systems (PTSs). The proof essentially consists of proving the Church-Rosser Theorem for a typed version of parallel one-step reduction. This method should generalise easily to many typing systems which satisfy the Uniqueness of Types property.
C1 Royal Holloway Univ London, Dept Comp Sci, London, England.
C3 University of London; Royal Holloway University London
RP Royal Holloway Univ London, Dept Comp Sci, London, England.
EM robin@cs.rhul.ac.uk
RI Adams, Robin/KSM-0255-2024
OI Adams, Robin/0000-0003-2644-1093
CR BARENDREGT H, 1992, HDB LOGIC COMPUTER S, V11
   COQUAND T, 1988, INFORM COMPUT, V76, P95, DOI 10.1016/0890-5401(88)90005-3
   Coquand Thierry., 1991, Logical Frameworks, P255, DOI DOI 10.1017/CBO9780511569807.011
   Goguen H, 1999, LECT NOTES COMPUT SC, V1581, P177
   GOGUEN H, 1994, THESIS EDINBURGH U
   GUEVERS H, 1993, THEISS KATHOLIEKE U
   GUTIERRE F, 2003, LECT NOTES COMPUTER, V2719
   HARPER R, 1993, J ACM, V40, P143, DOI 10.1145/138027.138060
   JUTTING LSV, 1993, INFORM COMPUT, V105, P30, DOI 10.1006/inco.1993.1038
   Luo Z., 1994, COMPUTATION REASONIN
   Luo ZH, 2003, J FUNCT PROGRAM, V13, P317, DOI 10.1017/S0956796802004525
   Nordstrom B., 1990, PROGRAMMING MARTINLO
   Poll E., 1998, Journal of Functional Programming, V8, P89, DOI 10.1017/S095679689700292X
   RUIZ BC, 1999, LNCS, V1548, P422
   RUIZ BC, 2000, 9 INT WORKSH FUNCT L, P210
   Streicher T., 1991, Progress in Theoretical Computer Science, pxii+298
NR 16
TC 19
Z9 19
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD MAR
PY 2006
VL 16
BP 219
EP 246
DI 10.1017/S0956796805005770
PN 2
PG 28
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 015TN
UT WOS:000235574000005
OA Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Aguirre, A
   Barthe, G
   Gaboardi, M
   Garg, D
   Strub, PY
AF Aguirre, Alejandro
   Barthe, Gilles
   Gaboardi, Marco
   Garg, Deepak
   Strub, Pierre-Yves
TI A relational logic for higher-order programs
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID SECURE INFORMATION-FLOW; DEPENDENT TYPES; VERIFICATION
AB Relational program verification is a variant of program verification where one can reason about two programs and as a special case about two executions of a single program on different inputs. Relational program verification can be used for reasoning about a broad range of properties, including equivalence and refinement, and specialized notions such as continuity, information flow security, or relative cost. In a higher-order setting, relational program verification can be achieved using relational refinement type systems, a form of refinement types where assertions have a relational interpretation. Relational refinement type systems excel at relating structurally equivalent terms but provide limited support for relating terms with very different structures. We present a logic, called relational higher-order logic (RHOL), for proving relational properties of a simply typed lambda-calculus with inductive types and recursive definitions. RHOL retains the type-directed flavor of relational refinement type systems but achieves greater expressivity through rules which simultaneously reason about the two terms as well as rules which only contemplate one of the two terms. We show that RHOL has strong foundations, by proving an equivalence with higher-order logic, and leverage this equivalence to derive key meta-theoretical properties: subject reduction, admissibility of a transitivity rule, and set-theoretical soundness. Moreover, we define sound embeddings for several existing relational type systems such as relational refinement types and type systems for dependency analysis and relative cost, and we verify examples that were out of reach of prior work.
C1 [Aguirre, Alejandro; Barthe, Gilles] Imdea Software Inst, Campus Montegancedo S-N, Madrid 28223, Spain.
   [Aguirre, Alejandro] Univ Politecn Madrid, Campus Montegancedo S-N, Madrid 28223, Spain.
   [Barthe, Gilles] MPI SP, Campus Montegancedo S-N, Madrid 28223, Spain.
   [Gaboardi, Marco] Univ Buffalo State Univ New York SUNY, Comp Sci & Engn, 338B Davis Hall, Buffalo, NY 14260 USA.
   [Garg, Deepak] Max Planck Inst Software Syst MPI SWS, Campus E1 5, D-66123 Saarbrucken, Germany.
   [Strub, Pierre-Yves] Ecole Polytech, Lab Informat LIX, Batiment Alan Turing,1 Rue Honore dEstienne, F-91120 Palaiseau, France.
C3 IMDEA Software Institute; Universidad Politecnica de Madrid; Max Planck
   Society; Institut Polytechnique de Paris; Ecole Polytechnique
RP Aguirre, A (corresponding author), Imdea Software Inst, Campus Montegancedo S-N, Madrid 28223, Spain.; Aguirre, A (corresponding author), Univ Politecn Madrid, Campus Montegancedo S-N, Madrid 28223, Spain.
EM alejandro.aguirre@imdea.org; gilles.barthe@imdea.org;
   gaboardi@buffalo.edu; dg@mpi-sws.org; pierre-yves@strub.nu
RI Gaboardi, Marco/JPX-6816-2023
OI Aguirre, Alejandro/0000-0001-6746-2734
CR Abadi M., 1999, Conference Record of POPL '99. 26th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P147, DOI 10.1145/292540.292555
   Abadi M., 1993, Conference Record of the Twentieth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P157, DOI 10.1145/158511.158622
   Aczel Peter, 2000, SELECTED PAPERS LECT, V2277, P1, DOI [10.1007/3-540-45842-5, DOI 10.1007/3-540-45842-5]
   Adams R, 2010, ANN PURE APPL LOGIC, V161, P1315, DOI 10.1016/j.apal.2010.04.005
   Aguirre Alejandro, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P214, DOI 10.1007/978-3-319-89884-1_8
   Aguirre A, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110265
   ALPERN B, 1985, INFORM PROCESS LETT, V21, P181, DOI 10.1016/0020-0190(85)90056-0
   Asada K, 2017, SCI COMPUT PROGRAM, V137, P2, DOI 10.1016/j.scico.2016.02.007
   Barthe G, 2004, P IEEE CSFW, P100, DOI 10.1109/CSFW.2004.1310735
   Barthe G, 2017, ACM SIGPLAN NOTICES, V52, P161, DOI 10.1145/3093333.3009896
   Barthe G, 2015, ACM SIGPLAN NOTICES, V50, P55, DOI [10.1145/2775051.2677000, 10.1145/10.1145/2676726.2677000]
   Barthe G, 2014, ACM SIGPLAN NOTICES, V49, P193, DOI 10.1145/2535838.2535847
   Barthe G, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P97
   Barthe G, 2009, ACM SIGPLAN NOTICES, V44, P90, DOI 10.1145/1594834.1480894
   Belo JF, 2008, LECT NOTES COMPUT SC, V4941, P33
   Benton N, 2004, ACM SIGPLAN NOTICES, V39, P14, DOI 10.1145/982962.964003
   Beringer L, 2007, 20TH IEEE COMPUTER SECURITY FOUNDATIONS SYMPOSIUM (CSFS20), PROCEEDINGS, P233, DOI 10.1109/CSF.2007.30
   Blatter L, 2017, LECT NOTES COMPUT SC, V10205, P391, DOI 10.1007/978-3-662-54577-5_22
   Cantwell B, 2018, HANDBOOK ON THE POLITICS OF HIGHER EDUCATION, P130
   Çiçek E, 2017, ACM SIGPLAN NOTICES, V52, P316, DOI 10.1145/3093333.3009858
   Clarkson MR, 2008, CSF 2008: 21ST IEEE COMPUTER SECURITY FOUNDATIONS SYMPOSIUM, PROCEEDINGS, P51, DOI 10.1109/CSF.2008.7
   Dreyer D, 2011, LOG METH COMPUT SCI, V7, DOI 10.2168/LMCS-7(2:16)2011
   Dreyer D, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P185, DOI 10.1145/1706299.1706323
   Dunfield J, 2004, ACM SIGPLAN NOTICES, V39, P281, DOI 10.1145/982962.964025
   DYBJER P, 1985, LECT NOTES COMPUT SC, V201, P334
   FREEMAN T, 1991, SIGPLAN NOTICES, V26, P268, DOI 10.1145/113446.113468
   Gaboardi M, 2013, ACM SIGPLAN NOTICES, V48, P357, DOI 10.1145/2480359.2429113
   Gambino N, 2006, J SYMBOLIC LOGIC, V71, P67, DOI 10.2178/jsl/1140641163
   Ghani N, 2016, LECT NOTES COMPUT SC, V9634, P3, DOI 10.1007/978-3-662-49630-5_1
   Hatcliff J., 1997, Mathematical Structures in Computer Science, V7, P507, DOI 10.1017/S0960129597002405
   Heintze N., 1998, Conference Record of POPL '98: 25th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P365, DOI 10.1145/268946.268976
   Hongwei Xu, 1999, Conference Record of POPL '99. 26th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P214
   JACOBS B, 1999, STUDIES LOGIC FDN MA, V141
   Jung R, 2015, ACM SIGPLAN NOTICES, V50, P637, DOI [10.1145/2676726.2676980, 10.1145/2775051.2676980]
   Kobayashi Naoki, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P711, DOI 10.1007/978-3-319-89884-1_25
   Kobayashi N, 2017, ACM SIGPLAN NOTICES, V52, P246, DOI 10.1145/3093333.3009854
   Krogh-Jespersen M, 2017, ACM SIGPLAN NOTICES, V52, P218, DOI 10.1145/3093333.3009877
   Melliès PA, 2015, ACM SIGPLAN NOTICES, V50, P3, DOI 10.1145/2775051.2676970
   Nanevski A, 2013, ACM T PROGR LANG SYS, V35, DOI 10.1145/2491522.2491523
   Payen E, 2011, ACTUAL CHIMIQUE, P20
   Pfenning Frank, 2008, STUDIES LOGIC, V17, P303
   Plotkin G., 1993, Typed Lambda Calculi and Applications. International Conference. TLCA '93, P361, DOI 10.1007/BFb0037118
   Plotkin G. D., 1977, Theoretical Computer Science, V5, P223, DOI 10.1016/0304-3975(77)90044-5
   Plotkin Gordon, 1973, LAMBDA DEFINABILITY
   Pottier F, 2002, ACM SIGPLAN NOTICES, V37, P319, DOI 10.1145/565816.503302
   Radicek I, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158124
   Sato T., 2019, PACMPL, V3
   Sousa M, 2016, ACM SIGPLAN NOTICES, V51, P57, DOI 10.1145/2908080.2908092
   STATMAN R, 1985, INFORM CONTROL, V65, P85, DOI 10.1016/S0019-9958(85)80001-2
   Stewart Gordon, 2013, 15 INT S PRINC PRACT, P145, DOI [10.1145/2505879.2505895, DOI 10.1145/2505879.2505895]
   Swamy N, 2016, ACM SIGPLAN NOTICES, V51, P256, DOI 10.1145/2914770.2837655
   TAIT WW, 1967, J SYMBOLIC LOGIC, V32, P198, DOI 10.2307/2271658
   Terauchi T, 2005, LECT NOTES COMPUT SC, V3672, P352
   The Coq Development Team, 2018, COQ PROOF ASS VERS 8
   Unno H, 2017, LECT NOTES COMPUT SC, V10427, P571, DOI 10.1007/978-3-319-63390-9_30
   Vazou N, 2014, ICFP'14: PROCEEDINGS OF THE 2014 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P269, DOI 10.1145/2628136.2628161
   VOLPANO D, 1996, J COMPUTER SECURITY, V4, P1
   Wildmoser M, 2004, LECT NOTES COMPUT SC, V3223, P305
   Yang H, 2007, THEOR COMPUT SCI, V375, P308, DOI 10.1016/j.tcs.2006.12.036
   Zaks A, 2008, LECT NOTES COMPUT SC, V5014, P35, DOI 10.1007/978-3-540-68237-0_5
   Zeilberger Noam, 2016, PRINCIPLES TYPE REFI
NR 61
TC 7
Z9 8
U1 0
U2 2
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD OCT 21
PY 2019
VL 29
AR e16
DI 10.1017/S0956796819000145
PG 83
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA JF3UE
UT WOS:000491312000001
OA Green Submitted, Green Published
DA 2024-07-18
ER

PT J
AU Hamana, M
AF Hamana, Makoto
TI How to prove decidability of equational theories with second-order
   computation analyser SOL
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID TERMINATION; ALGEBRA; NOTIONS; MODEL
AB We present a general methodology of proving the decidability of equational theory of programming language concepts in the framework of second-order algebraic theories. We propose a Haskell-based analysis tool, i.e. Second-Order Laboratory, which assists the proofs of confluence and strong normalisation of computation rules derived from second-order algebraic theories. To cover various examples in programming language theory, we combine and extend both syntactical and semantical results of the second-order computation in a non-trivial manner. We demonstrate how to prove decidability of various algebraic theories in the literature. It includes the equational theories of monad and lambda-calculi, Plotkin and Power's theory of states and bits, and Stark's theory of pi-calculus. We also demonstrate how this methodology can solve the coherence of monoidal categories. A video abstract can be found at: https://vimeo.com/365486403
C1 [Hamana, Makoto] Gunma Univ, Kiryu, Gunma, Japan.
C3 Gunma University
RP Hamana, M (corresponding author), Gunma Univ, Kiryu, Gunma, Japan.
EM hamana@cs.gunma-u.ac.jp
RI Hamana, Makoto/IVU-8283-2023
OI Hamana, Makoto/0000-0002-3064-8225
FU JSPS KAKENHI [17K00092]; Grants-in-Aid for Scientific Research
   [17K00092] Funding Source: KAKEN
FX I acknowledge Kazuki Fuju and Dateyao Faustin Dieudonne for developing
   the Vue.jsbased web interface of SOL. It has been helpful to discuss
   this work with many people, including Yoshihito Toyama, Kentaro Kikuchi,
   Tetsuo Yokoyama, Tatsuya Abe, Kazuyuki Asada, Kazuhiko Sakaguchi, Yuito
   Murase, and Masahito Hasegawa. I also thank to Kazutaka Matsuda for
   advice on parsing in Haskell, Frederic Blanqui for clarifying details of
   the General Schema, and the reviewers for their constructive comments.
   This work was supported in part by JSPS KAKENHI Grant Number 17K00092.
CR [Anonymous], 1999, Communicating and Mobile Systems: The Calculus
   [Anonymous], 2007, LNCS
   [Anonymous], 1996, Algebra of Programming
   Aoto T., 2012, LOG METH COMPUT SCI, V8, P1
   Baader Franz, 1998, TERM REWRITING ALL
   Baxter L., 1977, THESIS
   Benton N, 2003, RAIRO-THEOR INF APPL, V37, P273, DOI 10.1051/ita:2003020
   Benton P. N., 1998, Journal of Functional Programming, V8, P177, DOI 10.1017/S0956796898002998
   Blanqui F, 2000, LECT NOTES COMPUT SC, V1833, P47
   Blanqui F, 2016, THEOR COMPUT SCI, V611, P50, DOI 10.1016/j.tcs.2015.07.045
   Chakravarty MMT, 2005, ACM SIGPLAN NOTICES, V40, P241, DOI 10.1145/1090189.1086397
   Chakravarty MMT, 2005, ACM SIGPLAN NOTICES, V40, P1, DOI 10.1145/1047659.1040306
   Coquand T, 1992, P 3 WORKSH TYP PROOF
   Damas L., 1982, C REC 9 ANN ACM S PR, P207, DOI DOI 10.1145/582153.582176
   Diaconescu R, 2002, THEOR COMPUT SCI, V285, P289, DOI 10.1016/S0304-3975(01)00361-9
   Fiore Marcelo, 2013, Computation, Logic, Games, and Quantum Foundations. The Many Facets of Samson Abramsky. Essays Dedicated to Samson Abramsky on the Occasion of His 60th Birthday: LNCS 7860, P37, DOI 10.1007/978-3-642-38164-5_4
   Fiore M., 1999, Proceedings. 14th Symposium on Logic in Computer Science (Cat. No. PR00158), P193, DOI 10.1109/LICS.1999.782615
   Fiore M., 2013, 28 ANN ACM IEEE S LO, P520
   Fiore M, 2008, IEEE S LOG, P57, DOI 10.1109/LICS.2008.38
   Fiore M, 2010, LECT NOTES COMPUT SC, V6281, P368, DOI 10.1007/978-3-642-15155-2_33
   Fiore M, 2010, LECT NOTES COMPUT SC, V6247, P320, DOI 10.1007/978-3-642-15205-4_26
   Fiore Marcelo P., 2002, P 4 ACM SIGPLAN INT, P26, DOI [DOI 10.1145/571157, DOI 10.1145/571157.571161]
   Fiore MP, 1996, IEEE S LOG, P43, DOI 10.1109/LICS.1996.561302
   Gibbons J., 1995, LNCS, V947, P282
   Gibbons J, 2011, ICFP 11 - PROCEEDINGS OF THE 2011 ACM SIGPLAN: INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P2
   Girard J.-Y., 1989, Cambridge Tracts in Theoretical Computer Science, V7
   Goguen J., 2000, SOFTWARE ENG OBJ ALG, P3
   Hamana M, 2005, LECT NOTES COMPUT SC, V3467, P135
   Hamana M, 2004, LECT NOTES COMPUT SC, V3302, P348
   Hamana Makoto, 2007, Proceedings of the 9th International ACM SIGPLAN Conference on Principles and Practice of Declarative Programming (PPDP'07), P97, DOI 10.1145/1273920.1273933
   Hamana M., 2016, LEIBNIZ INT P INFORM, V52, P1
   Hamana M, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110266
   Hamana M, 2018, LECT NOTES COMPUT SC, V10818, P99, DOI 10.1007/978-3-319-90686-7_7
   Hamana M, 2011, LECT NOTES COMPUT SC, V6604, P381, DOI 10.1007/978-3-642-19805-2_26
   Hamana M, 2010, LECT NOTES COMPUT SC, V5979, P62, DOI 10.1007/978-3-642-11999-6_5
   Hasegawa M, 2005, MATH STRUCT COMP SCI, V15, P323, DOI 10.1017/S0960129504004621
   HUET G, 1980, J ACM, V27, P797, DOI 10.1145/322217.322230
   Jouannaud J., 1983, P 8 INT JOINT C ART, P909
   Kelly G.M., 1964, J. Algebra, V1, P397, DOI DOI 10.1016/0021-8693(64)90018-3
   Knuth D. E., 1983, COMPUTATIONAL PROBLE, P263
   Libal T., 2016, LEIBNIZ INT P INFORM, V52
   Lindley S, 2005, LECT NOTES COMPUT SC, V3461, P262
   Lindley S, 2007, LECT NOTES COMPUT SC, V4583, P255
   Mac Lane S., 1963, RICE U STUDIES, V49, P28
   MacLane S., 1978, CATEGORIES WORKING M, V5
   Mayr R, 1998, THEOR COMPUT SCI, V192, P3, DOI 10.1016/S0304-3975(97)00143-6
   Melliès PA, 2010, IEEE S LOG, P150, DOI 10.1109/LICS.2010.46
   Miller D., 1991, Journal of Logic and Computation, V1, P497, DOI 10.1093/logcom/1.4.497
   Milner R., 1996, COMPUTING TOMORROW
   MOGGI E, 1991, INFORM COMPUT, V93, P55, DOI 10.1016/0890-5401(91)90052-4
   Moggi E., 1988, LFCS report ECS-LFCS-88-66
   Nipkow T., 1991, Proceedings of Sixth Annual IEEE Symposium on Logic in Computer Science (Cat. No.91CH3025-4), P342, DOI 10.1109/LICS.1991.151658
   Ohta Y, 2006, LECT NOTES COMPUT SC, V4098, P166
   PFENNING F, 1988, SIGPLAN NOTICES, V23, P199, DOI 10.1145/960116.54010
   Plotkin G, 2002, LECT NOTES COMPUT SC, V2303, P342
   Plotkin G. D., 1975, Theoretical Computer Science, V1, P125, DOI 10.1016/0304-3975(75)90017-1
   Prehofer C, 1995, THESIS
   Sabry A, 1997, ACM T PROGR LANG SYS, V19, P916, DOI 10.1145/267959.269968
   Sheard T., 2002, P HASK WORKSH 2002
   Stark I, 1996, IEEE S LOG, P36, DOI 10.1109/LICS.1996.561301
   Stark I, 2008, THEOR COMPUT SCI, V390, P248, DOI 10.1016/j.tcs.2007.09.024
   Staton S, 2015, ACM SIGPLAN NOTICES, V50, P395, DOI [10.1145/2676726.2676999, 10.1145/2775051.2676999]
   Staton S, 2013, IEEE S LOG, P519, DOI 10.1109/LICS.2013.58
   Staton S, 2013, LECT NOTES COMPUT SC, V7794, P401, DOI 10.1007/978-3-642-37075-5_26
   Staton S, 2009, ELECTRON NOTES THEOR, V249, P471, DOI 10.1016/j.entcs.2009.07.103
   Takeichi M, 2004, COMPUT SOFT, V21, P71
   Tolmach A., 2001, HASK WORKSH 2001
   van de Pol J., 1994, High-Order Algebra, Logic, and Term Rewriting. First International Workshop, HOA '93. Selected Papers, P305
   WADLER P, 1990, PROCEEDINGS OF THE 1990 ACM CONFERENCE ON LISP AND FUNCTIONAL PROGRAMMING, P61, DOI 10.1145/91556.91592
   Yokoyama T, 2003, LECT NOTES COMPUT SC, V3018, P128
   Yokoyama T, 2004, INFORM PROCESS LETT, V89, P309, DOI 10.1016/j.ipl.2003.12.008
NR 71
TC 3
Z9 3
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PY 2019
VL 29
AR e20
DI 10.1017/S0956796819000157
PG 53
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA JX8EW
UT WOS:000503962600001
DA 2024-07-18
ER

PT J
AU Blanqui, F
AF Blanqui, Frederic
TI Size-based termination of higher-order rewriting
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID DEPENDENCY PAIR METHOD; PROVING TERMINATION; STRONG COMPUTABILITY;
   PROOFS; CONSTRAINTS; SYSTEMS
AB We provide a general and modular criterion for the termination of simply typed lambda-calculus extended with function symbols defined by user-defined rewrite rules. Following a work of Hughes, Pareto and Sabry for functions defined with a fixpoint operator and pattern matching, several criteria use typing rules for bounding the height of arguments in function calls. In this paper, we extend this approach to rewriting-based function definitions and more general user-defined notions of size.
C1 [Blanqui, Frederic] Univ Paris Saclay, INRIA, ENS, LSV, 61 Ave President Wilson, F-94235 Cachan, France.
C3 Universite Paris Cite; Universite Paris Saclay; Inria
RP Blanqui, F (corresponding author), Univ Paris Saclay, INRIA, ENS, LSV, 61 Ave President Wilson, F-94235 Cachan, France.
EM frederic.blanqui@inria.fr
OI Blanqui, Frederic/0000-0001-7438-5554
CR Abel A, 2004, RAIRO-THEOR INF APPL, V38, P277, DOI 10.1051/ita:2004015
   Abel A, 2002, J FUNCT PROGRAM, V12, P1, DOI 10.1017/S0956796801004191
   Abel A., 2010, ELECT P THEORETICAL, V43
   Abel A., 2006, THESIS
   Abel A., 2012, ELECT P THEORETICAL, V77
   Abel A, 2008, LOG METH COMPUT SCI, V4, DOI 10.2168/LMCS-4(2:3)2008
   Ackermann W, 1925, MATH ANN, V93, P1, DOI 10.1007/BF01449946
   Amadio R., 1997, 3300 INRIA
   AMADIO R, 1998, LECT NOTES COMPUTER, V1378
   [Anonymous], 1970, Dokl
   [Anonymous], 1922, Fundam. Math.
   [Anonymous], 1972, Toposes, algebraic geometry and logic, DOI DOI 10.1007/BFB0073967
   [Anonymous], 1904, Quarterly J. Math
   [Anonymous], 1979, Lecture Notes in Economics and Mathematical Systems
   [Anonymous], 2006, P INT C MATHEMATICIA
   [Anonymous], 1976, THESIS
   [Anonymous], 1931, MONATSH F MATH PHYSI, DOI DOI 10.1007/BF01700692
   [Anonymous], 1990, COLLECTED WORKS
   Arts T, 2000, THEOR COMPUT SCI, V236, P133, DOI 10.1016/S0304-3975(99)00207-8
   Arts T., 1996, LECT NOTES COMPUTER, V1059
   Avanzini M., 2010, LEIBNIZ INT P INFORM, V6
   Baccelli F., 1992, SYNCHRONIZATION LINE
   BARBANERA F, 1997, J FUNCTIONAL PROGRAM, V7, P613
   Barthe G, 2004, MATH STRUCT COMP SCI, V14, P97, DOI 10.1017/S0960129503004122
   Barthe G., 2008, LECT NOTES COMPUTER, V5213
   Barthe G., 2005, LECT NOTES COMPUTER, V3461
   Barthe G., 2006, LECT NOTES COMPUTER, V4246
   Ben-Amram A. M., 2008, LECT NOTES COMPUTER, V4963
   BENCHERIFA A, 1987, SCI COMPUT PROGRAM, V9, P137, DOI 10.1016/0167-6423(87)90030-X
   Berger U., 2005, LECT NOTES COMPUTER, V3526
   Berger U, 2008, ANN PURE APPL LOGIC, V156, P39, DOI 10.1016/j.apal.2008.06.005
   Blanqui F, 2005, MATH STRUCT COMP SCI, V15, P37, DOI 10.1017/S0960129504004426
   Blanqui F, 2002, THEOR COMPUT SCI, V272, P41, DOI 10.1016/S0304-3975(00)00347-9
   Blanqui F., 2005, LECT NOTES COMPUTER, V3634
   Blanqui F., 2000, LECT NOTES COMPUTER, V1833
   Blanqui F., 2004, LECT NOTES COMPUTER, V3091
   Blanqui F., 2006, 5972 INRIA
   Blanqui F, 2015, LOG METH COMPUT SCI, V11, DOI 10.2168/LMCS-11(4:3)2015
   Blanqui F, 2016, THEOR COMPUT SCI, V611, P50, DOI 10.1016/j.tcs.2015.07.045
   Blanqui Frederic, 2006, 8 INT WORKSH TERM WS
   Bonfante G, 2011, THEOR COMPUT SCI, V412, P2776, DOI 10.1016/j.tcs.2011.02.007
   Boyer R. S., 1979, COMPUTATIONAL LOGIC
   Burstall R., 1980, P ACM S LISP FONCT P
   Cheney James, 2003, Technical Report TR2003-1901
   Church A., 1940, J. Symbolic Logic, V5, P56, DOI [10.2307/2266170, DOI 10.2307/2266170]
   Cichon E. A., 1996, LECT NOTES COMPUTER, V1059
   Codish M, 2012, J AUTOM REASONING, V49, P53, DOI 10.1007/s10817-010-9211-0
   Collins G. E., 1975, LECT NOTES COMPUTER, V33
   Contejean E, 2005, J AUTOM REASONING, V34, P325, DOI 10.1007/s10817-005-9022-x
   Coquand T, 2007, LOG METH COMPUT SCI, V3, DOI 10.2168/LMCS-3(4:12)2007
   Courtieu P., 2010, LECT NOTES COMPUTER, V5901
   Cousot P, 1996, ACM COMPUT SURV, V28, P324, DOI 10.1145/234528.234740
   COUSOT P, 1979, PAC J MATH, V82, P43, DOI 10.2140/pjm.1979.82.43
   Cousot P., 1997, P 24 ACM S PRINC PRO
   Curien Pierre-Louis, 1992, MATH STRUCT COMP SCI, V2, p55S91, DOI DOI 10.1017/S0960129500001134
   Curry H., 1958, Combinatory Logic, VI
   Dam M., 2003, LECT NOTES COMPUTER, V2620
   de Bruijn N. G., 1970, LECT NOTES MATH, V125
   DERSHOWITZ N, 1982, THEOR COMPUT SCI, V17, P279, DOI 10.1016/0304-3975(82)90026-3
   DERSHOWITZ N, 1979, INFORM PROCESS LETT, V9, P212, DOI 10.1016/0020-0190(79)90071-1
   DERSHOWITZ N, 1979, COMMUN ACM, V22, P465, DOI 10.1145/359138.359142
   Dershowitz N., 2013, P 13 INT WORKSH TERM
   Dershowitz N., 1979, P 20 IEEE S FDN COMP
   Dershowitz N., 1988, P 3 IEEE S LOG COMP
   Dershowitz Nachum, 1990, Handbook of Theoretical Computer Science, Volume B: Formal Models and Semantics, P243, DOI 10.1016/b978-0-444-88074-1.50011-1
   DEVRIJER R, 1987, P K NED AKAD A MATH, V90, P479
   Endrullis J, 2008, J AUTOM REASONING, V40, P195, DOI 10.1007/s10817-007-9087-9
   Fiore M., 1999, P 14 IEEE S LOG COMP
   FISCHER MJ, 1974, P SIAM AMS S APPL MA
   FUH YC, 1990, THEOR COMPUT SCI, V73, P155, DOI 10.1016/0304-3975(90)90144-7
   Fuhs C., 2012, LEIBNIZ INT P INFORM, V15
   Fuhs C., 2008, LECT NOTES COMPUTER, V5144
   Fuhs C., 2007, LECT NOTES COMPUTER, V4501
   Gallier J., 1989, LECT NOTES COMPUTER, V372
   Gandy R. O., 1980, HB CURRY ESSAYS COMB, P453
   Gandy R. O., 1980, HB CURRY ESSAYS COMB, P457
   Gentzen G, 1936, MATH ANN, V112, P493, DOI 10.1007/BF01565428
   Giesl J, 1997, J AUTOM REASONING, V19, P1, DOI 10.1023/A:1005797629953
   Giesl J, 2002, J SYMB COMPUT, V34, P21, DOI 10.1006/jsco.2002.0541
   Giesl J, 2006, J AUTOM REASONING, V37, P155, DOI 10.1007/s10817-006-9057-7
   Gimenez E., 1998, LECT NOTES COMPUTER, V1443
   Gimenez E., 1996, THESIS
   Girard J.Y., 1988, CAMBRIDGE TRACTS THE, V7
   Girard Jean-Yves, 1972, These d'etat, P7
   Godel K., 1958, dialectica, V12, P280, DOI 10.1111/j.1746-8361.1958.tb01464.x
   Gregoire B., 2010, LECT NOTES COMPUTER, V6397
   Hamana M., 2006, Higher-Order and Symbolic Computation, V19, P231, DOI 10.1007/s10990-006-8747-5
   Hamana M., 2007, P 9 ACM SIGPLAN INT
   Hartogs F, 1915, MATH ANN, V76, P438, DOI 10.1007/BF01458215
   Herbrand Jacques, 1930, THESIS
   Hessenberg G, 1909, J REINE ANGEW MATH, V135, P81
   HINDLEY R, 1969, T AM MATH SOC, V146, P29, DOI 10.2307/1995158
   Hirokawa N, 2005, INFORM COMPUT, V199, P172, DOI 10.1016/j.ic.2004.10.004
   Hirokawa N., 2006, LECT NOTES COMPUTER, V4098
   Hofbauer D., 1989, LECT NOTES COMPUTER, V355
   Hong H, 1998, J AUTOM REASONING, V21, P23, DOI 10.1023/A:1005983105493
   Hongwei Xi, 2002, Higher-Order and Symbolic Computation, V15, P91, DOI 10.1023/A:1019916231463
   Howard W. A., 1970, STUDIES LOGIC FDN MA, V60
   HOWARD WA, 1972, J SYMBOLIC LOGIC, V37, P355, DOI 10.2307/2272979
   Hrbacek K., 2017, Introduction to set theory, Vthird, DOI DOI 10.1201/9781315274096
   HUET G, 1982, J COMPUT SYST SCI, V25, P239, DOI 10.1016/0022-0000(82)90006-X
   Hughes J., 1996, P 23 ACM S PRINC PRO
   Hyvernat P., 2014, LOG METHODS COMPUT S, V10, P1
   Jones ND, 2008, LOG METH COMPUT SCI, V4, DOI 10.2168/LMCS-4(1:3)2008
   Jouannaud J.-P., 1999, P 14 IEEE S LOG COMP
   Jouannaud J.-P., 1991, P 6 IEEE S LOG COMP
   Jouannaud JP, 2007, J ACM, V54, DOI 10.1145/1206035.1206037
   Kahrs S., 1995, LECT NOTES COMPUTER, V914
   KLOP JW, 1993, THEOR COMPUT SCI, V121, P279, DOI 10.1016/0304-3975(93)90091-7
   Knaster B., 1928, Ann. Soc. Polon. Math., V6, P133
   Kop C., 2011, LEIBNIZ INT P INFORM, V10
   Koprowski A., 2006, LECT NOTES COMPUTER, V4130
   Kusakari K, 2007, APPL ALGEBR ENG COMM, V18, P407, DOI 10.1007/s00200-007-0046-9
   Kusakari K, 2009, IEICE T INF SYST, VE92D, P2007, DOI 10.1587/transinf.E92.D.2007
   LEE CS, 2001, P 28 ACM S PRINC PRO
   Lucas S, 2005, RAIRO-THEOR INF APPL, V39, P547, DOI 10.1051/ita:2005029
   Manna Z., 1970, P 3 HAW INT C SYST S
   Martin-Lof P., 1975, STUDIES LOGIC FDN MA, V80
   Matiyasevich Y, 1993, Hilbert's tenth problem. Foundations of Computing
   Mayr R, 1998, THEOR COMPUT SCI, V192, P3, DOI 10.1016/S0304-3975(97)00143-6
   Mendler N. P., 1987, THESIS
   MENDLER NP, 1991, ANN PURE APPL LOGIC, V51, P159, DOI 10.1016/0168-0072(91)90069-X
   Middeldorp A., 1996, LECT NOTES COMPUTER, V1104
   Miller D., 1991, LECT NOTES COMPUTER, V475
   MILNER R, 1978, J COMPUT SYST SCI, V17, P348, DOI 10.1016/0022-0000(78)90014-4
   Mitchell J., 1984, P 11 ACM S PRINC PRO
   Monin F, 2001, THEOR COMPUT SCI, V254, P63, DOI 10.1016/S0304-3975(99)00118-8
   Moser G., 2017, J LOG COMPUT, V27, P1
   Newman MHA, 1942, ANN MATH, V43, P223, DOI 10.2307/1968867
   Nipkow T., 1991, P 6 IEEE S LOG COMP
   Okada M., 1989, P INT S SYMB ALG COM
   Pareto L., 2000, THESIS
   Paulin-Mohring C., 1988, LECT NOTES COMPUTER, V417
   Paulson L. C., 1986, Journal of Automated Reasoning, V2, P63, DOI 10.1007/BF00246023
   Peano G., 1889, Arithmetices principia: Nova methodo exposita
   Plotkin G. D., 1977, Theoretical Computer Science, V5, P223, DOI 10.1016/0304-3975(77)90044-5
   Pottier F, 2001, INFORM COMPUT, V170, P153, DOI 10.1006/inco.2000.2963
   Pratt V., 1977, 2 EASY THEORIE UNPUB
   Presburger M., 1929, 1 KONGR MAT KRAJ SLO
   Riba C., 2009, LECT NOTES COMPUTER, V5608
   Riba C., 2008, LECT NOTES COMPUTER, V5028
   Riba C., 2006, LECT NOTES COMPUTER, V4246
   Riba C., 2007, LECT NOTES COMPUTER, V4423
   ROBINSON JA, 1965, J ACM, V12, P23, DOI 10.1145/321250.321253
   Roux C., 2009, LECT NOTES COMPUTER, V5771
   Rubin H., 1963, EQUIVALENTS AXIOM CH
   Rubio A., 2001, LECT NOTES COMPUTER, V2250
   Sacchini J. L., 2011, THESIS
   Sakai M, 2001, IEICE T INF SYST, VE84D, P1025
   Schmid S, 2014, PERSP ECON SOC HIST, P1, DOI 10.1007/978-3-319-11439-2_1
   Sellink M. P. A., 1993, P 1 INT WORKSH SEM S
   Sternagel C., 2010, LECT NOTES COMPUTER, V6247
   Sternagel C., 2008, LECT NOTES COMPUTER, V5117
   Sulzmann M., 2000, THESIS
   SULZMANN M, 2001, LECT NOTES COMPUTER, V2024
   Szabo M.E., 1969, Studies in Logic and the Foundations of Mathematics
   TAIT WW, 1967, J SYMBOLIC LOGIC, V32, P198, DOI 10.2307/2271658
   Tarski A., 1955, PAC J MATH, V5, P285, DOI DOI 10.2140/PJM.1955.5.285
   Tarski A., 1948, Tech. Rep. R-109
   Telford A., 2000, J UNIVERSAL COMPUTER, V6
   Terese, 2003, CAMBRIDGE TRACTS THE, V55
   Thiemann R, 2005, APPL ALGEBR ENG COMM, V16, P229, DOI 10.1007/s00200-005-0179-7
   Turing A. M., 1942, SOME THEOREMS UNPUB
   v Heijenoort J., 1977, FREGE GODEL SOURCE B, P1879
   van de Pol J., 1993, LECT NOTES COMPUTER, V816
   van de Pol J., 1995, LECT NOTES COMPUTER, V1074
   van de Pol J.C., 1996, THESIS
   van Oostrom Vincent, 1994, THESIS
   Wahlstedt D., 2007, THESIS
   Walther C., 1988, LECT NOTES COMPUTER, V310
   Wei-Ngan Chin, 2001, Higher-Order and Symbolic Computation, V14, P261, DOI 10.1023/A:1012996816178
   Weiermann A, 1998, J SYMBOLIC LOGIC, V63, P1348, DOI 10.2307/2586654
   Werner Benjamin, 1994, THESIS
   Wilken G, 2012, LOG METH COMPUT SCI, V8, DOI 10.2168/LMCS-8(1:19)2012
   Xi H., 2003, P 30 ACM S PRINC PRO
   Xi H., 2003, LECT NOTES COMPUTER, V3085
   Zantema H., 1995, Fundamenta Informaticae, V24, P89
   Zenger C, 1997, THEOR COMPUT SCI, V187, P147, DOI 10.1016/S0304-3975(97)00062-5
   [No title captured]
NR 179
TC 1
Z9 1
U1 0
U2 1
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD APR 19
PY 2018
VL 28
AR e11
DI 10.1017/S0956796818000072
PG 75
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GD3QE
UT WOS:000430417800001
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Angiuli, C
   Morehouse, E
   Licata, DR
   Harper, R
AF Angiuli, Carlo
   Morehouse, Edward
   Licata, Daniel R.
   Harper, Robert
TI Homotopical patch theory
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID MODELS
AB Homotopy type theory is an extension of Martin-Lof type theory, based on a correspondence with homotopy theory and higher category theory. In homotopy type theory, the propositional equality type is proof-relevant, and corresponds to paths in a space. This allows for a new class of datatypes, called higher inductive types, which are specified by constructors not only for points but also for paths. In this paper, we consider a programming application of higher inductive types. Version control systems such as Darcs are based on the notion of patches-syntactic representations of edits to a repository. We show how patch theory can be developed in homotopy type theory. Our formulation separates formal theories of patches from their interpretation as edits to repositories. A patch theory is presented as a higher inductive type. Models of a patch theory are given by maps out of that type, which, being functors, automatically preserve the structure of patches. Several standard tools of homotopy theory come into play, demonstrating the use of these methods in a practical programming context.
C1 [Angiuli, Carlo; Morehouse, Edward; Harper, Robert] Carnegie Mellon Univ, Dept Comp Sci, Pittsburgh, PA 15213 USA.
   [Licata, Daniel R.] Wesleyan Univ, Dept Math & Comp Sci, Middletown, CT USA.
C3 Carnegie Mellon University; Wesleyan University
RP Angiuli, C (corresponding author), Carnegie Mellon Univ, Dept Comp Sci, Pittsburgh, PA 15213 USA.
EM cangiuli@cs.cmu.edu; edmo@cs.cmu.edu; dlicata@wesleyan.edu;
   rwh@cs.cmu.edu
RI Harper, Robert/HLH-3752-2023
OI Harper, Robert/0000-0002-9400-2941; Licata, Daniel
   R/0000-0003-0697-7405; Angiuli, Carlo/0000-0002-9590-3303
FU National Science Foundation [CCF-1116703]; United States Air Force
   Research Laboratory [FA9550-15-1-0053]
FX This research was sponsored in part by the National Science Foundation
   under grant number CCF-1116703. The views and conclusions contained in
   this document are those of the author and should not be interpreted as
   representing the official policies, either expressed or implied, of any
   sponsoring institution, the U.S. government or any other entity. This
   material is based on research sponsored in part by The United States Air
   Force Research Laboratory under agreement number FA9550-15-1-0053. The
   U.S. Government is authorized to reproduce and distribute reprints for
   Governmental purposes notwithstanding any copyright notation thereon.
   The views and conclusions contained herein are those of the authors and
   should not be interpreted as necessarily representing the official
   policies or endorsements, either expressed or implied, of the United
   States Air Force Research Laboratory, the U.S. Government or Carnegie
   Mellon University.
CR Abbott M, 2005, THEOR COMPUT SCI, V342, P3, DOI 10.1016/j.tcs.2005.06.002
   Aczel P., 1977, P S MATH LOGIC, V2, P1
   Altenkirch T., 2014, CONTAINERS HOMOTOPY
   Altenkirch T., 2015, PREPRINT
   Altenkirch T, 2007, PLPV'07: PROCEEDINGS OF THE 2007 WORKSHOP ON PROGRAMMING LANGUAGES MEETS PROGRAM VERIFICATION, P57, DOI 10.1145/1292597.1292608
   [Anonymous], 2007, PRACTICAL PROGRAMMIN
   [Anonymous], 2014, TYPES PROOFS PROGRAM
   [Anonymous], 1959, Constructivity in mathematics
   Awodey S, 2009, MATH PROC CAMBRIDGE, V146, P45, DOI 10.1017/S0305004108001783
   Barras B, 2015, MATH STRUCT COMP SCI, V25, P1071, DOI 10.1017/S0960129514000504
   Cavallo Evan, 2015, THESIS
   Cohen C., 2016, PREPRINT
   Constable R L, 1986, Implementing mathematics with the Nuprl proof development system
   Coq Development Team, 2015, Technical report
   Dagit J., 2009, THESIS
   Gambino N, 2008, THEOR COMPUT SCI, V409, P94, DOI 10.1016/j.tcs.2008.08.030
   Garner R, 2009, MATH STRUCT COMP SCI, V19, P687, DOI 10.1017/S0960129509007646
   Hofmann M., 1996, 25 YEARS CONSTRUCTIV
   Hou K.-B., 2014, COVERING SPACES HOMO
   Houston R., 2012, ON EDITING TEXT
   Jacobson J., 2009, FORMALIZATION DARCS
   Kapulkin Chris, 2012, ARXIV12112851
   Kleene SC., 1945, J SYMBOLIC LOGIC, V10, P109
   Lawvere F. W., 1963, THESIS
   Licata D. R., 2014, P JOINT M 23 EACSL A
   Licata DR, 2011, ELECTRON NOTES THEOR, V276, P263, DOI 10.1016/j.entcs.2011.09.026
   Licata DR, 2015, IEEE S LOG, P92, DOI 10.1109/LICS.2015.19
   Licata DR, 2013, IEEE S LOG, P223, DOI 10.1109/LICS.2013.28
   Licata DR, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P337
   Licata Daniel R., 2013, LNCS, P1, DOI 10.1007/978-3-319-03545-1_1.
   Loh Andres., 2007, A principled approach to version control
   Lumsdaine P., 2011, HIGHER INDUCTIVE TYP
   Lumsdaine P. L., 2013, HIGHER INDUCTI UNPUB
   Lumsdaine PL, 2009, LECT NOTES COMPUT SC, V5608, P172, DOI 10.1007/978-3-642-02273-9_14
   Lynagh I., 2012, CAMP PATCH THEORY
   McBride C., 2000, THESIS
   Mimram S, 2013, ELECTRON NOTES THEOR, V298, P283, DOI 10.1016/j.entcs.2013.09.018
   Nordstrom B., 1990, Programming in Martin-Lof's Type Theory
   Polonsky A., 2015, ARXIV14011148
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Roundy D., 2009, THEORY OF PATCHES
   Roundy David., 2005, P 2005 ACM SIGPLAN W, P1, DOI [10.1145/1088348.1088349, DOI 10.1145/1088348.1088349]
   Shulman M., 2011, HOMOTOPY TYPE THEORY
   Shulman M, 2015, MATH STRUCT COMP SCI, V25, P1203, DOI 10.1017/S0960129514000565
   Sittampalam Ganesh, 2005, SOME PROPERTIES DARC
   Swierstra W., 2014, Proceedings of the 2014 ACM International Symposium on New Ideas, New Paradigms, and Re ections on Programming Software, Onward! 2014, P43, DOI [10.1145/2661136.2661137, DOI 10.1145/2661136.2661137]
   Univalent Foundations Program, 2013, HOM TYP THEOR UN FDN
   van den Berg B, 2011, P LOND MATH SOC, V102, P370, DOI 10.1112/plms/pdq026
   Voevodsky Vladimir, 2006, VERY SHORT NOTE HOMO, P1
   Warren M., 2008, THESIS
NR 50
TC 7
Z9 7
U1 0
U2 1
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PY 2016
VL 26
BP 1
EP 45
DI 10.1017/S0956796816000198
PG 45
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DW8NY
UT WOS:000383914000001
OA Bronze
DA 2024-07-18
ER

PT J
AU Stump, A
   Fu, P
AF Stump, Aaron
   Fu, Peng
TI Efficiency of lambda-encodings in total type theory
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB This paper proposes a new typed lambda-encoding for inductive types which, for Peano numerals, has the expected time complexities for basic operations like addition and multiplication, has a constant-time predecessor function, and requires only quadratic space to encode a numeral. This improves on the exponential space required by the Parigot encoding. Like the Parigot encoding, the new encoding is typable in System F-omega plus positive-recursive type definitions, a total type theory. The new encoding is compared with previous ones through a significant case study: mergesort using Braun trees. The practical runtime efficiency of the new encoding, and the Church and Parigot encodings, are compared by two translations, one to Racket and one to Haskell, on a small suite of benchmarks.
C1 [Stump, Aaron] Univ Iowa, Comp Sci, Iowa City, IA USA.
   [Fu, Peng] Univ Dundee, Comp Sci, Dundee, Scotland.
C3 University of Iowa; University of Dundee
RP Stump, A (corresponding author), Univ Iowa, Comp Sci, Iowa City, IA USA.; Fu, P (corresponding author), Univ Dundee, Comp Sci, Dundee, Scotland.
EM astump@acm.org; pfu@dundee.ac.uk
RI fu, peng/JER-6786-2023; Peng, F/C-5400-2011
CR Abel A, 2004, LECT NOTES COMPUT SC, V3210, P190
   [Anonymous], 1987, The Implementation of Functional Programming Languages
   [Anonymous], 1941, ANN MATH STUDIES
   [Anonymous], 2010, PLTTR20101 INC
   [Anonymous], 2014, COQ PROOF ASS REF MA
   Barendregt H.P., 1985, STUDIES LOGIC FDN MA, V103
   BOHM C, 1985, THEOR COMPUT SCI, V39, P135, DOI 10.1016/0304-3975(85)90135-5
   Curry H.B., 1972, Combinatory Logic, VII
   Felleisen M., 2009, Semantics Engineering with PLT Redex
   Hinze R, 2005, J FUNCT PROGRAM, V15, P1, DOI 10.1017/S0956796804005313
   Koopman P., 2014, P 26 S IMPL APPL FUN
   Mogensen T., 2001, LECT NOTES COMPUTER, V2244
   Norrell U., 2014, AGDA WIKI
   Okasaki C., 1997, J FUNCT PROGRAM, V7, P661
   PARIGOT M, 1990, LECT NOTES COMPUT SC, V440, P309
   Parigot M., 1988, LECT NOTES COMPUTER, V300
   Peng Fu, 2014, Rewriting and Typed Lambda Calculi. Joint International Conference, RTA-TLCA 2014, Held as Part of the Vienna Summer of Logic, VSL 2014. Proceedings: LNCS 8560, P224, DOI 10.1007/978-3-319-08918-8_16
   Philip W., 1990, RECURSIVE TYPES FREE
NR 18
TC 4
Z9 5
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PY 2016
VL 26
BP 1
EP 31
DI 10.1017/S0956796816000034
PG 31
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DH2QY
UT WOS:000372632400001
DA 2024-07-18
ER

PT J
AU Claessen, K
   Duregård, J
   Palka, MH
AF Claessen, Koen
   Duregard, Jonas
   Palka, Michal H.
TI Generating constrained random data with uniform distribution
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB We present a technique for automatically deriving test data generators from a given executable predicate representing the set of values we are interested in generating. The distribution of these generators is uniform over values of a given size. To make the generation efficient, we rely on laziness of the predicate, allowing us to prune the space of values quickly. In contrast, implementing test data generators by hand is labour intensive and error prone. Moreover, handwritten generators often have an unpredictable distribution of values, risking that some values are arbitrarily underrepresented. We also present a variation of the technique that has better performance, but where the distribution is skewed in a limited, albeit predictable way. Experimental evaluation of the techniques shows that the automatically derived generators are much easier to define than handwritten ones, and their performance, while lower, is adequate for some realistic applications.
C1 [Claessen, Koen; Duregard, Jonas; Palka, Michal H.] Chalmers Univ Technol, Dept Comp Sci & Engn, S-41296 Gothenburg, Sweden.
C3 Chalmers University of Technology
RP Claessen, K (corresponding author), Chalmers Univ Technol, Dept Comp Sci & Engn, S-41296 Gothenburg, Sweden.
EM koen@chalmers.se; jonas.duregard@chalmers.se; michal.palka@chalmers.se
FU Resource-Aware Functional Programming grant - Swedish Foundation for
   Strategic Research
FX This research has been supported by the Resource-Aware Functional
   Programming grant awarded by the Swedish Foundation for Strategic
   Research. We would like to thank David Christiansen for his valuable
   feedback, and anonymous referees for their detailed and helpful reviews.
CR [Anonymous], 2006, P 2006 ACM SIGPLAN W
   Boyapati C., 2002, Software Engineering Notes, V27, P123, DOI 10.1145/566171.566191
   Christiansen J., 2008, LNCS, V4989, P22
   Claessen K, 2000, ACM SIGPLAN NOTICES, V35, P268, DOI 10.1145/357766.351266
   Claessen K, 2014, LECT NOTES COMPUT SC, V8475, P18, DOI 10.1007/978-3-319-07151-0_2
   Duregård J, 2012, ACM SIGPLAN NOTICES, V47, P61, DOI 10.1145/2430532.2364515
   Feldt R, 2013, PROC INT SYMP SOFTW, P350, DOI 10.1109/ISSRE.2013.6698888
   Fischer S, 2011, J FUNCT PROGRAM, V21, P413, DOI 10.1017/S0956796811000189
   FLAJOLET P, 1994, THEOR COMPUT SCI, V132, P1, DOI 10.1016/0304-3975(94)90226-7
   Flajolet P, 2007, SIAM PROC S, P201
   Grygiel K, 2013, J FUNCT PROGRAM, V23, P594, DOI 10.1017/S0956796813000178
   Knuth D. E., 2006, The Art of Computer Programming, Volume 4, Fascicle 4: Generating All TreesHistory of Combinatorial Generation, V4
   Lindblad Fredrik., 2008, TRENDS FUNCTIONAL PR, P105
   Palka Michal H., 2012, THESIS
   Palka Michal H, 2011, P 6 INT WORKSH AUT S, P91, DOI DOI 10.1145/1982595.1982615
   Reich Jason S., 2012, Implementation and Application of Functional Languages. 23rd International Symposium, IFL 2011. Revised Selected Papers: LNCS 7257, P69, DOI 10.1007/978-3-642-34407-7_5
   Runciman C, 2008, HASKELL'08: PROCEEDINGS OF THE ACM SIGPLAN 2008 HASKELL SYMPOSIUM, P37
   Yakushev AR, 2010, LECT NOTES COMPUT SC, V5812, P93
   Yorgey B.A, 2014, THESIS
   Yorgey BA, 2010, ACM SIGPLAN NOTICES, V45, P147, DOI 10.1145/2088456.1863542
NR 20
TC 13
Z9 13
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PY 2015
VL 25
AR e8
DI 10.1017/S0956796815000143
PG 31
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DB1AM
UT WOS:000368240300001
OA Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Henglein, F
AF Henglein, Fritz
TI Generic top-down discrimination for sorting and partitioning in linear
   time
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB We introduce the notion of discrimination as a generalization of both sorting and partitioning, and show that discriminators (discrimination functions) can be defined generically, by structural recursion on representations of ordering and equivalence relations. Discriminators improve the asymptotic performance of generic comparison-based sorting and partitioning, and can be implemented not to expose more information than the underlying ordering, respectively equivalence relation. For a large class of order and equivalence representations, including all standard orders for regular recursive first-order types, the discriminators execute in the worst-case linear time. The generic discriminators can be coded compactly using list comprehensions, with order and equivalence representations specified using Generalized Algebraic Data Types. We give some examples of the uses of discriminators, including the most-significant digit lexicographic sorting, type isomorphism with an associative-commutative operator, and database joins. Source code of discriminators and their applications in Haskell is included. We argue that built-in primitive types, notably pointers (references), should come with efficient discriminators, not just equality tests, since they facilitate the construction of discriminators for abstract types that are both highly efficient and representation-independent.
C1 [Henglein, Fritz] Univ Copenhagen DIKU, Dept Comp Sci, Copenhagen, Denmark.
C3 University of Copenhagen
RP Henglein, F (corresponding author), Univ Copenhagen DIKU, Dept Comp Sci, Copenhagen, Denmark.
EM henglein@diku.dk
FU Danish Research Council for Nature and Universe (FNU); Danish National
   Advanced Technology Foundation; Danish Council for Strategic Research
FX This work has been partially supported by the Danish Research Council
   for Nature and Universe (FNU) under the grant Applications and
   Principles of Programming Languages (APPL), the Danish National Advanced
   Technology Foundation under the grant 3rd generation Enterprise Resource
   Planning Systems (3gERP), and the Danish Council for Strategic Research
   under the grant Functional High-Performance Computing for Financial
   Information Technology (HIPERFIT).
CR Abramsky S., 1992, HDB LOGIC COMPUTER S, V3, P1
   Aho A. V., 1983, DATA STRUCTURES ALGO
   AJTAI M, 1983, COMBINATORICA, V3, P1, DOI 10.1007/BF02579338
   Al-Badarneh A, 2004, INFORMATICA-LITHUAN, V15, P295
   Ambus T, 2004, THESIS U COPENHAGEN
   Andersson A., 1998, ACM Journal of Experimental Algorithmics, V3, DOI 10.1145/297096.297136
   Andersson A, 1998, J COMPUT SYST SCI, V57, P74, DOI 10.1006/jcss.1998.1580
   ANDERSSON A, 1994, AN S FDN CO, P714
   [Anonymous], 1998, The art of computer programming: Sorting and searching
   Batcher K. E., 1968, P AFIPS SPRING JOINT, P307, DOI [DOI 10.1145/1468075.1468121, 10.1145/1468075. 1468121]
   BENTLEY J, 1983, COMMUN ACM, V26, P623, DOI 10.1145/358172.358176
   BENTLEY J, 1986, COMMUN ACM, V29, P711, DOI 10.1145/6424.315691
   Cai Jiazhen., 1991, Proceedings of the ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages (POPL), P143, DOI DOI 10.1145/99583.99605
   CAI JZ, 1995, THEOR COMPUT SCI, V145, P189, DOI 10.1016/0304-3975(94)00183-J
   Cormen T. H., 2001, MIT ELECT ENG COMPUT
   Danvy O, 2008, AUTOMATIC PROGRAM DE
   Dean J, 2004, USENIX ASSOCIATION PROCEEDINGS OF THE SIXTH SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION (OSDE '04), P137
   DERSHOWITZ N, 1979, COMMUN ACM, V22, P465, DOI 10.1145/359138.359142
   Franceschini G, 2007, LECT NOTES COMPUT SC, V4698, P194
   FREDMAN ML, 1993, J COMPUT SYST SCI, V47, P424, DOI 10.1016/0022-0000(93)90040-4
   Gili J, 2005, MATH STRUCT COMP SCI, V15, P917, DOI 10.1017/S0960129505004913
   Glasgow Haskell, 2005, GLASG HASK COMP
   Grust T., 2004, P 30 INT C VER LARG, V30
   Han YJ, 2002, ANN IEEE SYMP FOUND, P135, DOI 10.1109/SFCS.2002.1181890
   HENGLEIN F, 2010, P 6 ACM SIGPL WORKSH, P49
   Henglein F., 2003, MULTISET DISCR UNPUB
   Henglein F, 2008, ACM SIGPLAN NOTICES, V43, P91, DOI 10.1145/1411203.1411220
   Henglein F, 2010, PEPM '10: PROCEEDINGS OF THE 2010 ACM SIGPLAN WORKSHOP ON PARTIAL EVALUATION AND PROGRAM MANIPULATION, P73, DOI 10.1145/1706356.1706372
   Henglein F, 2009, J LOGIC ALGEBR PROGR, V78, P381, DOI 10.1016/j.jlap.2008.08.007
   Henglein Fritz., 2010, Higher-Order and Symbolic Computation, V23, P337
   Hinze R., 2000, Journal of Functional Programming, V10, P327, DOI 10.1017/S0956796800003713
   Hoare C.A.R., 1961, Communications of the ACM, V4, P321, DOI [DOI 10.1145/366622.366647, DOI 10.1145/366622.366644]
   Hudak Paul., 1999, A gentle introduction to haskell 98
   Jeuring J., 1996, Advanced Functional Programming. Second International School. Tutorial Text, P68
   Jha S., 2008, AUTOMATIC PROGRAM DE
   JOUANNAUD JP, 1982, INFORM PROCESS LETT, V15, P57, DOI 10.1016/0020-0190(82)90107-7
   Maus A., 2002, P NORW INF C NIK KON
   Mehlhorn K, 1984, Data Structures and Algorithms 1: Sorting and Searching, V1
   PAIGE R, 1987, SIAM J COMPUT, V16, P973, DOI 10.1137/0216062
   Paige R., 1997, Conference Record of POPL '97: The 24th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P456, DOI 10.1145/263699.263762
   PAIGE R, 1994, IFIP TRANS A, V51, P603
   Paige R., 1991, OPTIMAL TRA IN PRESS
   Peyton Jones S., 2003, J FUNCT PROGRAM, V13, P0
   SHELL DL, 1959, COMMUN ACM, V2, P30, DOI 10.1145/368370.368387
   Sinha R., 2003, CRPIT, V16, P11, DOI DOI 10.5555/783106.783108
   Strachey C., 2000, Higher-Order and Symbolic Computation, V13, P11, DOI 10.1023/A:1010000313106
   Tarjan R., 1983, REGIONAL C SERIES AP, VCMBS 44
   Trinder P., 1988, P 1988 GLASG WORKSH, P115
   WILLIAMS JWJ, 1964, COMMUN ACM, V7, P347
   Zibin Y, 2003, ACM SIGPLAN NOTICES, V38, P160, DOI 10.1145/640128.604146
NR 50
TC 3
Z9 3
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI CAMBRIDGE
PA EDINBURGH BLDG, SHAFTESBURY RD, CB2 8RU CAMBRIDGE, ENGLAND
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD MAY
PY 2012
VL 22
BP 300
EP 374
DI 10.1017/S0956796812000160
PN 3
PG 75
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 975TB
UT WOS:000306533300004
OA Bronze
DA 2024-07-18
ER

PT J
AU Siles, V
   Herbelin, H
AF Siles, Vincent
   Herbelin, Hugo
TI Pure Type System conversion is always typable
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID NORMALIZATION
AB Pure Type Systems are usually described in two different ways, one that uses an external notion of computation like beta-reduction, and one that relies on a typed judgment of equality, directly in the typing system. For a long time, the question was open to know whether both presentations described the same theory. A first step towards this equivalence has been made by Adams for a particular class of Pure Type Systems (PTS) called functional. Then, his result has been relaxed to all semi-full PTSs in previous work. In this paper, we finally give a positive answer to the general question, and prove that equivalence holds for any Pure Type System.
C1 [Siles, Vincent; Herbelin, Hugo] Ecole Polytech, INRIA, Lab PPS, Equipe R2, F-91128 Palaiseau, France.
C3 Inria; Institut Polytechnique de Paris; Ecole Polytechnique
RP Siles, V (corresponding author), Ecole Polytech, INRIA, Lab PPS, Equipe R2, F-91128 Palaiseau, France.
EM vincent.siles@polytechnique.edu; hugo.herbelin@inria.fr
CR Abel A, 2007, IEEE S LOG, P3, DOI 10.1109/LICS.2007.33
   Abel A, 2010, LECT NOTES COMPUT SC, V6009, P224, DOI 10.1007/978-3-642-12251-4_17
   Adams R, 2006, J FUNCT PROGRAM, V16, P219, DOI 10.1017/S0956796805005770
   [Anonymous], 2022, COQ PROOF ASSISTANT
   [Anonymous], 1992, Handbook of Logic in Computer Science
   [Anonymous], 1972, INDAGATIONES MATHEMA, DOI DOI 10.1016/1385-7258(72)90034-0
   Barendregt H., 1991, Journal of Functional Programming, V1, P125
   Berardi S., 1990, THESIS MATH I TORINO
   GEUVERS H, 1994, IEEE S LOG, P320, DOI 10.1109/LICS.1994.316057
   GEUVERS H, 1993, THESIS KATHOLIEKE U
   Geuvers H., 1991, J FUNCT PROGRAM, V1, P155
   Goguen H., 1994, THESIS U EDINBURGH S
   Lee G, 2011, LOG METH COMPUT SCI, V7, DOI 10.2168/LMCS-7(4:05)2011
   Luo Z., 1989, P 4 ANN S LOGIC COMP, P385
   Martin-Lof P., 1984, Intuitionistic type theory
   MELLIES PA, 1997, LNCS
   Nordstrom B., 1990, PROGRAMMING MARTINLO
   Norell Ulf, 2007, Towards a practical programming language based on dependent type theory
   Pollack R., 1994, THESIS U EDINBURGH S
   Siles V., 2010, FORMALIZATION EQUIVA
   Siles V., 2010, P 25 ANN IEEE S LOG
   Streicher T., 1991, SEMANTICS TYPE THEOR
   Terlouw J., 1989, NADERE BEWIJST UNPUB
   van Benthem Jutting L. S., 1993, TYPES, P19
   Werner B., 1994, THESIS U PARIS FRANC
NR 25
TC 6
Z9 6
U1 0
U2 3
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD MAR
PY 2012
VL 22
BP 153
EP 180
DI 10.1017/S0956796812000044
PN 2
PG 28
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 942BE
UT WOS:000304013700002
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Park, S
   Im, H
AF Park, Sungwoo
   Im, Hyeonseung
TI A calculus for hardware description
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID LANGUAGE; DESIGN
AB In efforts to overcome the complexity of the syntax and the lack of formal semantics of conventional hardware description languages, a number of functional hardware description languages have been developed. Like conventional hardware description languages, however, functional hardware description languages eventually convert all source programs into netlists, which describe wire connections in hardware circuits at the lowest level and conceal all high-level descriptions written into source programs. We develop a calculus, called l. (linear lambda), which may serve as an intermediate functional language just above netlists in the hierarchy of hardware description languages. In order to support higher-order functions, l lambda uses a linear type system, which enforces the linear use of variables of function type. The translation of l lambda into structural descriptions of hardware circuits is sound and complete in the sense that it maps expressions only to realizable hardware circuits, and that every realizable hardware circuit has a corresponding expression in l lambda. To illustrate the use of l lambda as a practical intermediate language for hardware description, we design a simple hardware description language that extends l lambda with polymorphism, and use it to implement a fast Fourier transform circuit and a bitonic sorting network.
C1 [Park, Sungwoo; Im, Hyeonseung] Pohang Univ Sci & Technol, Dept Comp Sci & Engn, Pohang, South Korea.
C3 Pohang University of Science & Technology (POSTECH)
RP Park, S (corresponding author), Pohang Univ Sci & Technol, Dept Comp Sci & Engn, Pohang, South Korea.
EM gla@postech.ac.kr; genilhs@postech.ac.kr
OI Im, Hyeonseung/0000-0002-3901-0834
FU Korea Ministry of Education, Science and Technology (MEST) / the
   National Research Foundation of Korea (NRF) [2010-0001726]; National IT
   Industry Promotion Agency (NIPA); Ministry of Education, Science and
   Technology [2009-0077543]
FX This work was supported by the Engineering Research Center of Excellence
   Program of Korea Ministry of Education, Science and Technology (MEST) /
   the National Research Foundation of Korea (NRF) (Grant 2010-0001726),
   the National IT Industry Promotion Agency (NIPA) under the program of
   Software Engineering Technologies Development and Experts Education, and
   the Basic Science Research Program through the National Research
   Foundation of Korea (NRF) funded by the Ministry of Education, Science
   and Technology (2009-0077543).
CR Axelsson E, 2005, LECT NOTES COMPUT SC, V3725, P5
   Bjesse P., 1998, ICFP '98
   Boute R. T., 1984, Journal A, V25, P27, DOI 10.1093/petrology/25.1.27
   CARDELLI L, 1981, P VLSI 81 INT C, P173
   Claessen K., 1999, Advances in Computing Science-ASIAN'99. 5th Asian Computing Science Conference. Proceedings (Lecture Notes in Computer Science Vol. 1742), P62
   Ghica DR, 2007, CONFERENCE RECORD OF POPL 2007: THE 34TH ACM SIGPLAN SIGACT SYMPOSIUM ON PRINCIPLES OF PROGAMMING LANGUAGES, P363
   Grundy J, 2006, J FUNCT PROGRAM, V16, P157, DOI 10.1017/S0956796805005757
   Johnson StevenD., 1984, P 11 ACM SIGACT SIGP, P218, DOI DOI 10.1145/800017.800533
   JONES G, 1990, FORMAL METHODS FOR VLSI DESIGN, P13
   Li YB, 2000, IEEE T VLSI SYST, V8, P1, DOI 10.1109/92.820756
   Matthews J, 1998, 1998 INTERNATIONAL CONFERENCE ON COMPUTER LANGUAGES, PROCEEDINGS, P90, DOI 10.1109/ICCL.1998.674160
   MESHKINPOUR F, 1985, P 22 ACM IEEE C DES, P238
   MYCROFT A, 2000, P INT C AUT LANG PRO, P37
   O'Hearn P, 2003, J FUNCT PROGRAM, V13, P747, DOI 10.1017/S0956796802004495
   ODONNELL JJ, 1995, P 1 INT S FUNCT PROG, P195
   ODONNELL JT, 1993, P 1992 GLASG WORKSH, P178
   Park S, 2008, ICFP'08: PROCEEDINGS OF THE 2008 SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P353
   SHARP R, 1995, P 7 INT C FUNCT PROG, P45
   Sheeran M, 2005, J UNIVERS COMPUT SCI, V11, P1135
   Sheeran Mary., 1984, P 1984 ACM S LISP FU, P104, DOI DOI 10.1145/800055.802026
NR 20
TC 57
Z9 57
U1 0
U2 5
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD JAN
PY 2011
VL 21
BP 21
EP 58
DI 10.1017/S0956796810000249
PN 1
PG 38
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 748GB
UT WOS:000289376900002
OA Bronze
DA 2024-07-18
ER

PT J
AU Matthes, R
AF Matthes, Ralph
TI An induction principle for nested datatypes in intensional type theory
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article; Proceedings Paper
CT Workshop on Mathematically Structured Functional Programming
CY JUL 02, 2006
CL Kuressaare, ESTONIA
AB Nested datatypes are families of datatypes that are indexed over all types such that the constructors may relate different family members (unlike the homogeneous lists). Moreover, the argument types of the constructors refer to indices given by expressions ill which the family name may occur. Especially ill this case of true nesting, termination of functions that traverse these data structures is far from being obvious. A joint paper with A. Abel and I Uustalu (Theor. Comput. Sci., 333 (1-2), 2005, pp. 3-66) proposed iteration schemes that guarantee termination not by structural requirements but just by polymorphic typing. They are generic in the sense that no specific syntactic form of the underlying datatype "functor" is required. However, there was no induction principle for the verification of the programs thus obtained, although they are well known in the Usual model of initial algebras oil endofunctor categories. The new contribution is a representation of nested datatypes in intensional type theory (more specifically, in the calculus of inductive constructions) that is still generic and covers true nesting, guarantees termination of all expressible programs, and has all induction principle that allows to prove functoriality of monotonicity witnesses (maps for nested datatypes) and naturality properties of iteratively defined polymorphic functions.
C1 [Matthes, Ralph] CNRS, IRIT, F-31062 Toulouse 9, France.
   [Matthes, Ralph] Univ Toulouse 3, F-31062 Toulouse 9, France.
C3 Centre National de la Recherche Scientifique (CNRS); Universite de
   Toulouse; Universite Toulouse III - Paul Sabatier; Universite Federale
   Toulouse Midi-Pyrenees (ComUE); Institut National Polytechnique de
   Toulouse; Universite de Toulouse; Universite Toulouse III - Paul
   Sabatier
RP Matthes, R (corresponding author), CNRS, IRIT, 118 Route Narbonne, F-31062 Toulouse 9, France.
EM ralph.matthes@irit.fr
RI Matthes, Ralph/D-3231-2012
OI Matthes, Ralph/0000-0002-7299-2411
CR Abel A, 2005, THEOR COMPUT SCI, V333, P3, DOI 10.1016/j.tcs.2004.10.017
   ABEL A, 2006, THESIS LUDWIGMAXIMIL
   Adams R, 2006, LECT NOTES COMPUT SC, V3839, P1
   Altenkirch T., 1999, Proceedings. 14th Symposium on Logic in Computer Science (Cat. No. PR00158), P412, DOI 10.1109/LICS.1999.782636
   Altenkirch T, 1999, LECT NOTES COMPUT SC, V1683, P453
   [Anonymous], 2006, COQ PROOF ASS REF MA
   [Anonymous], J FUNCT PROGRAM
   BELLEGARDE F, 1994, SCI COMPUT PROGRAM, V23, P287, DOI 10.1016/0167-6423(94)00022-0
   Bertot Y., 2004, TEXT THEORET COMP S
   Bird R., 1999, Formal Aspects of Computing, V11, P200, DOI 10.1007/s001650050047
   BIRD R, 1997, INT SERIES COMPUTER, V100
   BIRD R, 1998, LECT NOTES COMPUTER, V1422, P52, DOI DOI 10.1007/BFB0054285
   CAPRETTA V, 2004, POLYMORPHIC RE UNPUB
   COQUAND T, 1990, LECT NOTES COMPUT SC, V417, P50
   Dybjer P, 2003, ANN PURE APPL LOGIC, V124, P1, DOI 10.1016/S0168-0072(02)00096-9
   Dybjer P, 2000, J SYMBOLIC LOGIC, V65, P525, DOI 10.2307/2586554
   Girard J.-Y., 1972, PhD thesis
   Hinze Ralf, 2000, P 2 WORKSH GEN PROGR, P17
   Hofmann M., 1995, THESIS U EDINBURGH
   Martin C, 2004, FORM ASP COMPUT, V16, P19, DOI 10.1007/s00165-003-0013-6
   MATTHES R, 2001, LECT NOTES COMPUTER, V2142, P600
   MATTHES R, 2006, P WORKSH MATH STRUCT
   MATTHES R, 2008, COQ DEV INDUCTION PR
   MATTHES R, 1998, THESIS LUDWIGMAXIMIL
   McBride Conor, 1999, PhD thesis
   Mendler N. P., 1987, Proceedings of the Symposium on Logic in Computer Science (Cat. No.87CH2464-6), P30
   Oury N, 2005, LECT NOTES COMPUT SC, V3603, P278
   Uustalu T, 2002, THEOR COMPUT SCI, V272, P315, DOI 10.1016/S0304-3975(00)00355-8
   UUSTALU T, 1998, THESIS ROYAL I TECHN
   UUSTALU T, 1997, 8 NORD WORKSH PROGR, P237
   Werner B, 2006, LECT NOTES ARTIF INT, V4130, P604
NR 31
TC 9
Z9 10
U1 0
U2 2
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD MAY-JUL
PY 2009
VL 19
BP 439
EP 468
DI 10.1017/S095679680900731X
PN 3-4
PG 30
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 461BW
UT WOS:000267240300008
OA Bronze
DA 2024-07-18
ER

PT J
AU Potanin, A
   Noble, J
   Clarke, D
   Biddle, R
AF Potanin, Alex
   Noble, James
   Clarke, Dave
   Biddle, Robert
TI Featherweight generic confinement
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB Existing approaches to object encapsulation either rely on ad hoc syntactic restrictions or require the use of specialised type systems. Syntactic restrictions are difficult to scale and to prove correct, while specialised type systems require extensive changes to programming languages. We demonstrate that confinement can be enforced cheaply in Featherweight Generic Java, with no essential change to the underlying language or type system. This result demonstrates that polymorphic type parameters can simultaneously act as ownership parameters and should facilitate the adoption of confinement and ownership type systems in general-purpose programming languages.
C1 Victoria Univ Wellington, Wellington, New Zealand.
   Carleton Univ, Ottawa, ON K1S 5B6, Canada.
C3 Victoria University Wellington; Carleton University
RP Potanin, A (corresponding author), Victoria Univ Wellington, Wellington, New Zealand.
EM alex@mc.vuw.ac.nz; jx@mcs.vuw.ac.nz; dave@cwi.nl;
   robert_biddle@carleton.ca
OI Potanin, Alex/0000-0002-4242-2725; Noble, James/0000-0001-9036-5692
CR Aldrich J, 2004, LECT NOTES COMPUT SC, V3086, P1
   ALDRICH J, 2002, P ACM C OBJ OR PROGR, P311
   [Anonymous], 2003, The Fun of Programming
   BANERJEE A, 2004, J ACM JACM, V52, P894
   BOYAPATI C, 2001, P ACM C OBJ OR PROGR, P56
   BOYAPATI C, 2003, POPL, P213
   CLARKE D, 2003, LNCS, V2473
   Clarke D., 2003, P ACM C OBJ OR PROGR, P374
   CLARKE D, 2002, THESIS UNSW AUSTRALI
   CLARKE D, 2002, P ACM C OBJ OR PROGR, P292
   CLARKE DG, 1998, P 13 ACM SIGPLAN C O, P48, DOI DOI 10.1145/286936.286947
   FLUET M, 2002, IFIP THEO COMP SCI T, P448
   HOGG J, 1991, P ACM C OBJ OR PROGR, V26, P271
   Igarashi A, 2001, ACM T PROGR LANG SYS, V23, P396, DOI 10.1145/503502.503505
   IGARASHI A, 1908, IN PRESS ACM T PROGR, P441
   Launchbury J., 1995, LISP and Symbolic Computation, V8, P293, DOI 10.1007/BF01018827
   Leijen D, 1999, USENIX ASSOCIATION PROCEEDINGS OF THE 2ND CONFERENCE ON DOMAIN-SPECIFIC LANGUAGES (DSL'99), P109, DOI 10.1145/331963.331977
   MULLER P, 1999, PROGRAMMING LANGUAGE
   Noble J., 1998, ECOOP'98 - Object-Oriented Programming. 12th European Conference. Proceedings, P158, DOI 10.1007/BFb0054091
   NOBLE J, 2003, VUWCSTR039 SCH MATH
   NOBLE J, 2003, P INT WORKSH AL CONF
   POTANIN A, 2004, P WORKSH FORM TECHN
   POTANIN A, 2005, OWNERSHIP GENERIC JA
   *SUN MICR, 2005, JAV DEV KIT
   Vitek J, 2001, SOFTWARE PRACT EXPER, V31, P507, DOI 10.1002/spe.369
   Zhao T, 2006, J FUNCT PROGRAM, V16, P83, DOI 10.1017/S0956796805005691
NR 26
TC 4
Z9 4
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD NOV
PY 2006
VL 16
BP 793
EP 811
DI 10.1017/S0956796806006125
PN 6
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 112KT
UT WOS:000242525400006
OA Bronze
DA 2024-07-18
ER

PT J
AU Zhao, T
   Palsberg, J
   Vitek, J
AF Zhao, T
   Palsberg, J
   Vitek, J
TI Type-based confinement
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB Confinement properties impose a structure on object graphs which can be used to enforce encapsulation properties. From a practical point of view, encapsulation is essential for building secure object-oriented systems as security requires that the interface between trusted and untrusted components of a system be clearly delineated and restricted to the smallest possible set of operations and data structures. This paper investigates the notion of package-level confinement and proposes a type system that enforces this notion for a call-by-value object calculus as well as a generic extension thereof. We give a proof of soundness of this type system, and establish links between this work and related research in language-based security.
C1 Univ Wisconsin, Dept Elect Engn & Comp Sci, Milwaukee, WI 53201 USA.
   Univ Calif Los Angeles, Dept Comp Sci, Los Angeles, CA 90095 USA.
   Purdue Univ, Dept Comp Sci, W Lafayette, IN 47907 USA.
C3 University of Wisconsin System; University of Wisconsin Milwaukee;
   University of California System; University of California Los Angeles;
   Purdue University System; Purdue University
RP Univ Wisconsin, Dept Elect Engn & Comp Sci, POB 784, Milwaukee, WI 53201 USA.
EM tzhao@cs.uwm.edu; palsberg@ucla.edu; jv@cs.purdue.edu
RI Vitek, Jan/J-9051-2014; Palsberg, Jens/JYO-6826-2024
OI Palsberg, Jens/0000-0003-4747-365X
CR ALDRICH J, 2002, P ACM C OBJ OR PROGR
   ALMEIDA PS, 1997, P EUR C OBJ OR PROGR
   [Anonymous], 1984, Capability-Based Computer Systems
   [Anonymous], 1996, A Theory of Objects
   BANERJEE A, 2002, P IEEE COMP SEC FDN
   BANERJEE A, 2002, P ACM S PRINC PROGR
   BOYAPATI C, 2001, P ACM C OBJ OR PROGR
   Boyapati C., 2004, THESIS MIT
   BOYAPATI C, 2002, P ACM C OBJ OR PROGR
   BOYAPATI C, 2003, P ACM S PRINC PROGR
   BOYAPATI C, 2003, P ACM C PROGR LANG D
   BOYAPATI C, 2003, P ACM C OBJ OR PROGR
   BOYLAND J, 2001, P EUR C OBJ OR PROGR
   CLARKE D, 2002, P ACM C OBJ OR PROGR
   CLARKE D, 1998, P ACM C OBJECT ORIEN
   CLARKE D, 2003, P ACM C OBJ OR PROGR
   Clarke David, 2001, Ph.D. Dissertation
   CLARKE DG, 2001, P EUR C OBJ OR PROGR
   DETLEFS DL, 1998, SRCRR156 DIG EQ CORP
   Foster J. S., 2002, THESIS U CALIFORNIA
   FOSTER JS, 1999, P ACM C PROGR LANG D
   FOSTER JS, 2002, P ACM C PROGR LANG D
   GENIUS D, 1998, P 2 TYP COMP WORKSH
   GONG L, 1998, LNCS, V576, P1
   GONG L., 1999, INSIDE JAVA 2 PLATFO
   Grossman D, 2000, ACM T PROGR LANG SYS, V22, P1037, DOI 10.1145/371880.371887
   GROTHOFF C, 2001, P ACM C OBJ OR PROGR
   HAGIMONT D, 1996, P 16 INT C DISTR COM
   HOGG J, 1991, P ACM C OBJ OR PROGR
   HOGG J, 1992, OOPS MESSENGER, V3
   Igarashi A, 2001, ACM T PROGR LANG SYS, V23, P396, DOI 10.1145/503502.503505
   KENT SJH, 1995, P TOOLS PAC 1995 TEC
   LEAVENS GT, 1991, IEEE SOFTWARE, V8, P72, DOI 10.1109/52.300040
   LEROY X, 1998, P ACM S PRINC PROGR
   Muller P., 2000, FDN COMPONENT BASED, P137
   MULLER P, 2000, FORMAL TECHNIQUES JA
   MULLER P, 1999, PROGRAMMING LANGUAGE
   NOBLE J, 1998, P EUR C OBJ OR PROGR
   Potanin A, 2004, CONCURR COMP-PRACT E, V16, P671, DOI 10.1002/cpe.799
   POTANIN A, 2004, INT WORKSH FDN OBJ O
   Sewell P., 2003, Journal of Computer Security, V11, P135
   Vitek J, 2001, SOFTWARE PRACT EXPER, V31, P507, DOI 10.1002/spe.369
   VITEK J, 2001, AUTONOMOUS AGENTS MU, V4
   WALLACH D, 1997, P 16 S OP SYST PRINC
   ZHAO T, 2003, P ACM C OBJ OR PROGR
NR 45
TC 12
Z9 13
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD JAN
PY 2006
VL 16
BP 83
EP 128
DI 10.1017/S0956796805005691
PN 1
PG 46
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 008WL
UT WOS:000235071300006
OA Bronze
DA 2024-07-18
ER

PT J
AU Vasconcelos, VT
AF Vasconcelos, VT
TI Lambda and pi calculi, CAM and SECD machines
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB We analyse machines that implement the call-by-value reduction strategy of the lambda-calculus: two environment machines - CAM and SECD - and two encodings into the pi-calculus due to Milner and Vasconcelos. To establish the relation between the various machines, we setup a notion of reduction machine and two notions of correspondences: operational - in which a reduction step in the source machine is mimicked by a sequence of steps in the target machine - and convergent - where only reduction to normal form is simulated. We show that there are operational correspondences from the lambda-calculus into CAM, and from CAM and from SECD into the pi-calculus. Plotkin completes the picture by showing that there is a convergent correspondence from the lambda-calculus into SECD.
C1 Univ Lisbon, Fac Sci, Dept Informat, Lisbon, Portugal.
C3 Universidade de Lisboa
RP Univ Lisbon, Fac Sci, Dept Informat, Lisbon, Portugal.
EM vv@di.fc.ul.pt
RI Vasconcelos, Vasco T/M-4920-2017
OI Vasconcelos, Vasco T/0000-0002-9539-8861
CR [Anonymous], 1998, CAMBRIDGE TRACTS THE
   [Anonymous], 1992, Mathematical Structures in Computer Science, DOI DOI 10.1017/S0960129500001407
   [Anonymous], 2001, PICALCULUS THEORY MO
   BARENDREGT HP, 1974, STUDIES LOGIC FDN MA, V103
   Boudol Gerard., 1992, Tech. Rep. 1702
   CURIEN PL, 1991, THEOR COMPUT SCI, V82, P389, DOI 10.1016/0304-3975(91)90230-Y
   HONDA K, 1991, LECT NOTES COMPUT SC, V512, P133
   LANDIN PJ, 1964, COMPUT J, V6, P308, DOI 10.1093/comjnl/6.4.308
   Milner R, 1990, RR1154 INRIA
   Pierce B., 1996, Mathematical Structures in Computer Science, V6, P409
   Pierce BC, 2000, FOUNDAT COMPUT, P455
   Plotkin G. D., 1975, Theoretical Computer Science, V1, P125, DOI 10.1016/0304-3975(75)90017-1
   VASCONCELOS V, 1994, LNCS, V821, P100
   VASCONCELOS VT, 2000, THEOR PRACT OBJ SYST, V5, P97
   VASCONCELOS VT, 1988, TYCO PROGRAMMING LAN
NR 15
TC 5
Z9 5
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD JAN
PY 2005
VL 15
BP 101
EP 127
DI 10.1017/S0956796804005386
PN 1
PG 27
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 890TK
UT WOS:000226533500006
OA Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Monnier, S
   Shao, Z
AF Monnier, S
   Shao, Z
TI Inlining as staged computation
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article; Proceedings Paper
CT International Workshop on Semantics, Applications, and Implementation of
   Program Generation
CY SEP 20, 2000
CL MONTREAL, CANADA
SP ACM, SIGPLAN
AB Inlining and specialization appear in various forms throughout the implementation of modern programming languages. From mere compiler optimizations to sophisticated techniques in partial evaluation, they are omnipresent, yet each application is treated differently. This paper is an attempt at uncovering the relations between inlining (as done in production compilers) and staged computation (as done in partial evaluators) in the hope of bringing together the research advances in both fields. Using a two-level lambda calculus as the intermediate language, we show how to model inlining as a staged computation while avoiding unnecessary code duplication. The new framework allows us to define inlining annotations formally and to reason about their interactions with module code. In fact, we present a cross-module inlining algorithm that inlines all functions marked inlinable, even in the presence of ML-style parameterized modules.
C1 Yale Univ, Dept Comp Sci, New Haven, CT 06520 USA.
C3 Yale University
RP Monnier, S (corresponding author), Yale Univ, Dept Comp Sci, POB 2158, New Haven, CT 06520 USA.
EM monnier@cs.yale.edu; shao@cs.yale.edu
OI Shao, Zhong/0000-0001-8184-7649
CR [Anonymous], ECSLFCS8886 U ED
   [Anonymous], 1974, LNCS
   [Anonymous], 17 ANN ACM S PRINC P
   [Anonymous], 1997, The Definition of Standard ML
   Appel A.W., 1991, Compiling with Continuations
   APPEL AW, 1991, 3 INT S PROG LANG IM, P1
   Asai K, 1999, LECT NOTES COMPUT SC, V1694, P117
   ASHLEY MJ, 1997, INT C FUNCT PROGR
   Birkedal L., 1995, LISP and Symbolic Computation, V8, P191, DOI 10.1007/BF01019003
   BLUME M, 1997, INT C FUNCT PROGR
   BLUME M, 1995, STANDARD ML NEW JERS
   CONSEL C, 1993, S PART ED SEM BAS PR, P145
   CONSEL C, 1996, S PRINC PROGR LANG A
   DANVY O, 1996, S PRINC PROGR LANG
   Davies R, 1996, IEEE S LOG, P184, DOI 10.1109/LICS.1996.561317
   DAVIES R, 1996, S PRINC PROGR LANG A
   Flanagan Cormac, 1993, SIGPLAN Conf. Programming Language Design and Impl. (PLDI'93), P237, DOI [DOI 10.1145/155090.155113, 10.1145/155090.155113]
   FOSTER JS, 1999, S PROGR LANG DES IMP
   GANZ S, 2001, INT C FUNCT PROGR
   Girard J.-Y., 1972, PhD thesis
   Glynn K, 2001, LECT NOTES COMPUT SC, V2053, P39
   HARPER B, 1995, S PRINC PROGR LANG, P130
   HENGLEIN F, 1994, EUR S PROGR, P287
   *ICFP, 1997, INT C FUNCT PROGR
   JONES ND, 1993, PARTIAL EVALUATION A
   JONES SP, 1999, P INT WORKSH IMPL DE
   LEROY X, 1992, S PRINC PROGR LANG, P177
   LEROY X, 1995, 2821 I NAT RECH INF
   MARLET R, 1999, S PROGR LANG DES IMP
   MINAMIDE Y, 1998, INT C FUNCT PROGR, P1
   Moggi E, 1999, LECT NOTES COMPUT SC, V1576, P193
   MOGGI E, 1997, 13 C MATH FDN PROGR
   MONNIER S, 1999, YALEUDCSTR1189
   Nielson  Flemming, 1992, 2 LEVEL FUNCTIONAL L
   *PLDI, 1999, S PROGR LANG DES IMP
   *POPL, 1996, S PRINC PROGR LANG
   SAHA B, 1998, INT WORKSH TYP COMP
   SHAO Z, 1999, P 1999 ACM SIGPLAN I, P220
   SHAO Z, 1997, INT C FUNCTIONAL PRO
   SHAO Z, 1997, P ACM SIGPLAN WORKSH
   SHAO Z, 1998, P 1998 ACM SIGPLAN I, P141
   Shao Zhong., 1998, ICFP 98, DOI DOI 10.1145/289423.289460
   Shivers O. G., 1991, THESIS CARNEGIE MELL
   SPERBER M, 1997, S PROGR LANG DES IMP, P215
   SPERBER M, 1996, S PROGR LANG DES IMP, P206
   TAHA W, 1997, S PART EV SEM BAS PR, P203
   Taha W., 1999, THESIS OREGON GRADUA
   TARDITI D, 1996, THESIS CARNEGIE MELL
   WADLER P, 1989, S PRINC PROGR LANG
NR 49
TC 2
Z9 2
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD MAY
PY 2003
VL 13
BP 647
EP 676
DI 10.1017/S0956796802004616
PN 3
PG 30
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 689BA
UT WOS:000183470700008
OA Bronze
DA 2024-07-18
ER

PT J
AU O'connor, L
   Chen, ZL
   Rizkallah, C
   Jackson, V
   Amani, S
   Klein, G
   Murray, T
   Sewell, T
   Keller, G
AF O'connor, Liam
   Chen, Zilin
   Rizkallah, Christine
   Jackson, Vincent
   Amani, Sidney
   Klein, Gerwin
   Murray, Toby
   Sewell, Thomas
   Keller, Gabriele
TI Cogent: uniqueness types and certifying compilation
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID FILE SYSTEM; FORMAL VERIFICATION; SPECIFICATION; FRAMEWORK; PROGRAMS;
   PROOF
AB This paper presents a framework aimed at significantly reducing the cost of proving functional correctness for low-level operating systems components. The framework is designed around a new functional programming language, Cogent. A central aspect of the language is its uniqueness type system, which eliminates the need for a trusted runtime or garbage collector while still guaranteeing memory safety, a crucial property for safety and security. Moreover, it allows us to assign two semantics to the language: The first semantics is imperative, suitable for efficient C code generation, and the second is purely functional, providing a user-friendly interface for equational reasoning and verification of higher-level correctness properties. The refinement theorem connecting the two semantics allows the compiler to produce a proof via translation validation certifying the correctness of the generated C code with respect to the semantics of the Cogent source program. We have demonstrated the effectiveness of our framework for implementation and for verification through two file system implementations.
C1 [O'connor, Liam] Univ Edinburgh, Sch Informat, Edinburgh, Midlothian, Scotland.
   [Chen, Zilin; Rizkallah, Christine; Jackson, Vincent; Klein, Gerwin] UNSW Sydney, Sch Comp Sci & Engn, Sydney, NSW, Australia.
   [Amani, Sidney] Canva, Sydney, NSW, Australia.
   [Klein, Gerwin] Australia Proofcraft, Kensington, NSW, Australia.
   [Murray, Toby] Univ Melbourne, Sch Comp & Informat Syst, Melbourne, Vic, Australia.
   [Sewell, Thomas] Univ Cambridge, Dept Comp Sci & Technol, Cambridge, England.
   [Keller, Gabriele] Univ Utrecht, Dept Informat & Comp Sci, Utrecht, Netherlands.
C3 University of Edinburgh; University of New South Wales Sydney;
   University of Melbourne; University of Cambridge; Utrecht University
RP O'connor, L (corresponding author), Univ Edinburgh, Sch Informat, Edinburgh, Midlothian, Scotland.
EM l.oconnor@ed.ac.uk; zilin.chen@student.unsw..edu.au;
   c.rizkallah@unsw.edu.au; v.jackson@unsw.edu.au; Sidney.amani@gmail.com;
   kleing@cse.unsw.edu.au; toby.murray@unimelb.edu.au; tals4@cam.ac.uk;
   g.k.keller@uu.nl
OI O'Connor, Liam/0000-0003-2765-4269; Chen, Zilin/0000-0003-0854-2464;
   Rizkallah, Christine/0000-0003-4785-2836
CR Alkassar E, 2014, J AUTOM REASONING, V52, P241, DOI 10.1007/s10817-013-9289-2
   Alkassar E, 2010, LECT NOTES COMPUT SC, V6217, P71, DOI 10.1007/978-3-642-15057-9_5
   Alkassar E, 2009, J AUTOM REASONING, V42, P389, DOI [10.1007/s10817-009-9123-Z, 10.1007/s10817-009-9123-z]
   Amani S, 2016, THESIS U NEW S WALES
   Amani S, 2017, PROCEEDINGS OF THE 6TH ACM SIGPLAN CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS, CPP'17, P138, DOI 10.1145/3018610.3018627
   Amani S, 2016, ACM SIGPLAN NOTICES, V51, P175, DOI 10.1145/2954679.2872404
   Amani S, 2015, ELECTRON PROC THEOR, P1, DOI 10.4204/EPTCS.196.1
   Andronick J., 2006, 2 INT S LEV APPL FOR, P129
   [Anonymous], 2014, Heartbleed Bug
   [Anonymous], 1971, P 2 SCAND LOG S N HO
   [Anonymous], 1997, A Discipline of Programming
   [Anonymous], 1995, 120 COMP LOG INC
   Arkoudas K, 2004, LECT NOTES COMPUT SC, V3308, P373
   Barendsen E., 1993, Foundations of Software Technology and Theoretical Computer Science. 13th Conference Proceedings, P41
   Beringer L, 2015, PROCEEDINGS OF THE 24TH USENIX SECURITY SYMPOSIUM, P207
   Bernardy JP, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158093
   BLUM M, 1995, J ACM, V42, P269, DOI 10.1145/200836.200880
   Brady E, 2013, J FUNCT PROGRAM, V23, P552, DOI 10.1017/S095679681300018X
   Breitner J, 2021, J FUNCT PROGRAM, V31, DOI 10.1017/S0956796820000283
   Bright JD, 1997, IEEE T COMPUT, V46, P1304, DOI 10.1109/12.641931
   Chargueraud A, 2011, ICFP 11 - PROCEEDINGS OF THE 2011 ACM SIGPLAN: INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P418
   Charguéraud A, 2010, ICFP 2010: PROCEEDINGS OF THE 2010 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P321
   Chen HG, 2015, SOSP'15: PROCEEDINGS OF THE TWENTY-FIFTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P18, DOI 10.1145/2815400.2815402
   Chen Z., 2019, DATA LAYOUT DESCRIPT
   Chen Z, 2017, SEC 2017: 2017 THE SECOND ACM/IEEE SYMPOSIUM ON EDGE COMPUTING (SEC'17), DOI 10.1145/3132211.3134458
   Cheung L., 2021, ABS210209920 CORR
   Chlipala A, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P10, DOI 10.1145/2784731.2784741
   Claessen K, 2000, ACM SIGPLAN NOTICES, V35, P268, DOI 10.1145/357766.351266
   Cock D, 2008, LECT NOTES COMPUT SC, V5170, P167, DOI 10.1007/978-3-540-71067-7_16
   Cogent, COG SOURC COD IS HOL
   COQUAND T, 1990, LECT NOTES COMPUT SC, V417, P50
   Coutts D, 2007, ICFP'07 PROCEEDINGS OF THE 2007 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P315
   Damchoom K, 2008, LECT NOTES COMPUT SC, V5256, P25, DOI 10.1007/978-3-540-88194-0_5
   Dang V, 2020, FLOGENT INFORM FLOW
   de Amorim AA, 2018, LECT NOTES COMPUT SC, V10804, P79, DOI 10.1007/978-3-319-89722-6_4
   de Roever W.P., 1998, CAMBRIDGE TRACTS THE, V46
   de Vries E, 2008, LECT NOTES COMPUT SC, V5083, P201, DOI 10.1007/978-3-540-85373-2_12
   DeLine R, 2001, ACM SIGPLAN NOTICES, V36, P59, DOI 10.1145/381694.378811
   Dezani-Ciancaglini M, 2010, LECT NOTES COMPUT SC, V6194, P1, DOI 10.1007/978-3-642-14458-5_1
   Ennals R, 2004, LECT NOTES COMPUT SC, V2986, P204
   Ernst Gidon, 2013, WORKING C VERIFIED S, P242
   FREEMAN T, 1991, SIGPLAN NOTICES, V26, P268, DOI 10.1145/113446.113468
   Goguen J. A., 1982, Proceedings of the 1982 Symposium on Security and Privacy, P11
   Greenaway David, 2012, Interactive Theorem Proving. Proceedings of the Third International Conference, ITP 2012, P99, DOI 10.1007/978-3-642-32347-8_8
   Greenaway D, 2014, ACM SIGPLAN NOTICES, V49, P429, DOI [10.1145/2594291.2594296, 10.1145/2666356.2594296]
   Gu L., 2011, AS PAC WORKSH SYST
   Gu RH, 2015, ACM SIGPLAN NOTICES, V50, P595, DOI [10.1145/2676726.2676975, 10.1145/2775051.2676975]
   Gu RH, 2016, PROCEEDINGS OF OSDI'16: 12TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P653
   Gunawi HS., 2008, P 8 USENIX C OPERATI, P131
   Harper R., 1995, Conference Record of POPL'95: 22nd ACM SIGPLAN-SIGACT Symposium Principles of Programming Languages, P130, DOI 10.1145/199448.199475
   HASP project, 2010, HAB PROGR LANG REV P
   Hawblitzel C., 2014, 11 USENIX S OPERATIN
   Hesselink WH, 2009, ELECTRON NOTES THEOR, V259, P67, DOI 10.1016/j.entcs.2009.12.018
   Hofmann M, 2000, LECT NOTES COMPUT SC, V1782, P165
   Jim T, 2002, USENIX ASSOCIATION PROCEEDINGS OF THE GENERAL TRACK, P275
   Keller G., 2013, PROGRAMMING LANGUAGE, P1
   Klein G, 2016, INT C INT THEOR PROV
   Klein G, 2017, PHILOS T R SOC A, V375, DOI 10.1098/rsta.2015.0404
   Klein G, 2009, SOSP'09: PROCEEDINGS OF THE TWENTY-SECOND ACM SIGOPS SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P207
   Kumar R, 2014, ACM SIGPLAN NOTICES, V49, P179, DOI 10.1145/2535838.2535841
   Lammich P., 2019, LIPICS, V141
   Leinenbach D, 2010, THESIS SAARLAND U
   Leroy X, 2009, J AUTOM REASONING, V43, P363, DOI 10.1007/s10817-009-9155-4
   Leroy X, 2009, COMMUN ACM, V52, P107, DOI 10.1145/1538788.1538814
   Lollipop, 2014, MEM LEAK ANDR LOLL R
   Maric O, 2014, LECT NOTES COMPUT SC, V8442, P449, DOI 10.1007/978-3-319-06410-9_31
   Marlow Simon, 2010, Haskell 2010 language report
   McConnell RM, 2011, COMPUT SCI REV, V5, P119, DOI 10.1016/j.cosrev.2010.09.009
   McCreight A, 2010, ACM SIGPLAN NOTICES, V45, P273, DOI 10.1145/1932681.1863584
   MORGAN C, 1984, IEEE T SOFTWARE ENG, V10, P128, DOI 10.1109/TSE.1984.5010215
   Murray E, 2019, THESIS UNSW SYDNEY
   Necula GC, 2005, ACM T PROGR LANG SYS, V27, P477, DOI 10.1145/1065887.1065892
   Nipkow Tobias, 2002, ISABELLE HOL PROOF A
   Noschinski L, 2014, LECT NOTES COMPUT SC, V8430, P46, DOI 10.1007/978-3-319-06200-6_4
   O'Connor Liam, 2018, Leveraging Applications of Formal Methods, Verification and Validation. Modeling. 8th International Symposium, ISoLA 2018. Proceedings: Lecture Notes in Computer Science (LNCS 11244), P134, DOI 10.1007/978-3-030-03418-4_9
   O'Connor L, 2016, ACM SIGPLAN NOTICES, V51, P89, DOI 10.1145/3022670.2951940
   OConnor Liam, 2019, THESIS U NEW S WALES
   ODERSKY M, 1992, LECT NOTES COMPUT SC, V582, P390
   OpenSSL, 2014, APPL SSL TLS BUG
   OWICKI S, 1976, ACTA INFORM, V6, P319, DOI 10.1007/BF00268134
   Palix N, 2011, ACM SIGPLAN NOTICES, V46, P305, DOI 10.1145/1961296.1950401
   Pike Lee, 2014, PLPV, P1, DOI [10.1145/2541568.2541570, DOI 10.1145/2541568.2541570]
   Pnueli A, 1998, LECT NOTES COMPUT SC, V1384, P151, DOI 10.1007/BFb0054170
   Pnueli A, 1998, LECT NOTES COMPUT SC, V1443, P235, DOI 10.1007/BFb0055057
   Reif W, 1998, APPL LOG SER, V9, P13
   Reynolds J. C., 1974, Programming Symposium, P408
   Rideau S, 2010, LECT NOTES COMPUT SC, V6011, P224, DOI 10.1007/978-3-642-11970-5_13
   Rizkallah C, 2015, THESIS SAARLAND U
   Rubio-Gonzalez Cindy., 2011, ISSTA, P111
   Rust, 2014, RUST LANG
   Rustan K, 2010, LECT NOTES ARTIF INT, V6355, P348, DOI 10.1007/978-3-642-17511-4_20
   Sabry A., 1992, Proceedings of the 1992 ACM Conference on Lisp and Functional Programming, P288, DOI 10.1145/141471.141563
   Saha S, 2011, LCTES 11: PROCEEDINGS OF THE ACM SIGPLAN/SIGBED 2011 CONFERENCE ON LANGUAGES, COMPILERS, TOOLS AND THEORY FOR EMBEDDED SYSTEMS, P41
   Schellhorn G, 2014, LECT NOTES COMPUT SC, V8477, P9, DOI 10.1007/978-3-662-43652-3_2
   Schierl A, 2009, LECT NOTES COMPUT SC, V5850, P190, DOI 10.1007/978-3-642-05089-3_13
   Schirmer N, 2005, LECT NOTES COMPUT SC, V3452, P398
   Sewell T, 2013, ACM SIGPLAN NOTICES, V48, P471, DOI 10.1145/2499370.2462183
   Shang Z, 2020, PROJECT REPORT
   Sison R., 2019, LIPICS 141
   Spector-Zabusky A., 2018, P 7 ACM SIGPLAN INT, P14, DOI [10.1145/3167092, DOI 10.1145/3167092]
   Sullivan G. F., 1990, Digest of Papers. Fault-Tolerant Computing: 20th International Symposium (Cat. No.90CH2877-9), P423, DOI 10.1109/FTCS.1990.89397
   Szekeres L, 2013, P IEEE S SECUR PRIV, P48, DOI 10.1109/SP.2013.13
   Tofte Mads, 1994, P 21 ACM SIGPLAN SIG, P188, DOI DOI 10.1145/174675.177855
   Torlak E, 2014, ACM SIGPLAN NOTICES, V49, P530, DOI [10.1145/2594291.2594340, 10.1145/2666356.2594340]
   Tuch H, 2007, CONFERENCE RECORD OF POPL 2007: THE 34TH ACM SIGPLAN SIGACT SYMPOSIUM ON PRINCIPLES OF PROGAMMING LANGUAGES, P97
   WADLER P, 1990, PROGRAMMING CONCEPTS AND METHODS, P561
   Yang J, 2010, PLDI '10: PROCEEDINGS OF THE 2010 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P99, DOI 10.1145/1806596.1806610
   Yang JF, 2006, USENIX ASSOCIATION 7TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P131
   Zhao JZ, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P427
NR 109
TC 11
Z9 11
U1 0
U2 4
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD OCT 27
PY 2021
VL 31
AR e25
DI 10.1017/S095679682100023X
PG 66
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA XB4CS
UT WOS:000721278800001
OA Green Published, hybrid
DA 2024-07-18
ER

PT J
AU Van Strydonck, T
   Piessens, F
   Devriese, D
AF Van Strydonck, Thomas
   Piessens, Frank
   Devriese, Dominique
TI Linear capabilities for fully abstract compilation of
   separation-logic-verified code
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB Separation logic is a powerful program logic for the static modular verification of imperative programs. However, dynamic checking of separation logic contracts on the boundaries between verified and untrusted modules is hard because it requires one to enforce (among other things) that outcalls from a verified to an untrusted module do not access memory resources currently owned by the verified module. This paper proposes an approach to dynamic contract checking by relying on support for capabilities, a well-studied form of unforgeable memory pointers that enables fine-grained, efficient memory access control. More specifically, we rely on a form of capabilities called linear capabilities for which the hardware enforces that they cannot be copied. We formalize our approach as a fully abstract compiler from a statically verified source language to an unverified target language with support for linear capabilities. The key insight behind our compiler is that memory resources described by spatial separation logic predicates can be represented at run time by linear capabilities. The compiler is separation-logic-proof-directed: it uses the separation logic proof of the source program to determine how memory accesses in the source program should be compiled to linear capability accesses in the target program. The full abstraction property of the compiler essentially guarantees that compiled verified modules can interact with untrusted target language modules as if they were compiled from verified code as well. This article is an extended version of one that was presented at ICFP 2019 (Van Strydonck et al., 2019).
C1 [Van Strydonck, Thomas; Piessens, Frank] Katholieke Univ Leuven, Leuven, Belgium.
   [Devriese, Dominique] Vrije Univ Brussel, Brussels, Belgium.
C3 KU Leuven; Vrije Universiteit Brussel
RP Van Strydonck, T (corresponding author), Katholieke Univ Leuven, Leuven, Belgium.
EM thomas.vanstrydonck@cs.kuleuven.be; frank.piessens@cs.kuleuven.be;
   dominique.devriese@vub.be
RI Devriese, Dominique/C-5493-2014
OI Devriese, Dominique/0000-0002-3862-6856
FU Research Fund KU Leuven; Research Foundation -Flanders (FWO); Air Force
   Office of Scientific Research [FA9550-21-1-0054]
FX This research is partially funded by the Research Fund KU Leuven, by the
   Research Foundation -Flanders (FWO) under grant number G0G0519N and by
   the Air Force Office of Scientific Research under award number
   FA9550-21-1-0054. Thomas Van Strydonck holds a PhD Fellowship of the
   Research Foundation -Flanders (FWO).
CR Abadi M., 1999, Secure Internet programming. Security issues for mobile and distributed objects, P19
   Abadi M, 2012, ACM T INFORM SYST SE, V15, DOI 10.1145/2240276.2240279
   Agten P, 2015, ACM SIGPLAN NOTICES, V50, P581, DOI [10.1145/2676726.2676972, 10.1145/2775051.2676972]
   [Anonymous], 1984, Capability-Based Computer Systems
   [Anonymous], 2017, FORMAL REASONING PRO
   Bader J., 2018, VERIFICATION MODEL C
   Berdine J., 2011, LNCS, V6806, P178, DOI DOI 10.1007/978-3-642-22110-1
   Berdine J, 2007, LECT NOTES COMPUT SC, V4590, P178
   Berdine J, 2006, LECT NOTES COMPUT SC, V4111, P115
   Calcagno C, 2015, LECT NOTES COMPUT SC, V9058, P3, DOI 10.1007/978-3-319-17524-9_1
   Chisnall D, 2015, ACM SIGPLAN NOTICES, V50, P117, DOI [10.1145/2694344.2694367, 10.1145/2775054.2694367]
   Costan V., 2016, IACR CRYPTOL EPRINT, V086, P1
   de Amorim AA, 2016, J COMPUT SECUR, V24, P689, DOI 10.3233/JCS-15784
   de Amorim AA, 2015, P IEEE S SECUR PRIV, P813, DOI 10.1109/SP.2015.55
   Devriese D, 2016, ACM SIGPLAN NOTICES, V51, P164, DOI 10.1145/2914770.2837618
   Dimoulas C, 2016, ACM SIGPLAN NOTICES, V51, P117, DOI 10.1145/3022670.2951930
   Distefano D, 2006, LECT NOTES COMPUT SC, V3920, P287
   Fournet C, 2013, ACM SIGPLAN NOTICES, V48, P371, DOI 10.1145/2480359.2429114
   Garcia R, 2016, ACM SIGPLAN NOTICES, V51, P429, DOI 10.1145/2914770.2837670
   Garg D., 2017, ROBUST HYPERPROPERTY
   Insolvibile G, 2003, LINUX J, V2003, P7
   Jacobs B, 2010, LECT NOTES COMPUT SC, V6461, P304, DOI 10.1007/978-3-642-17164-2_21
   Jacobs Bart., 2008, CW Reports
   Jung R, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S0956796818000151
   Jung R, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158154
   Jung R, 2016, ACM SIGPLAN NOTICES, V51, P256, DOI 10.1145/3022670.2951943
   Krebbers R, 2017, LECT NOTES COMPUT SC, V10201, P696, DOI 10.1007/978-3-662-54434-1_26
   Kwon A., 2012, SAFE ISA VERSION 3 0
   Leroy X, 2006, ACM SIGPLAN NOTICES, V41, P42, DOI 10.1145/1111320.1111042
   Leroy X., 2016, ERTS 2016
   New MS, 2016, ACM SIGPLAN NOTICES, V51, P103, DOI 10.1145/3022670.2951941
   Nguyen HH, 2008, LECT NOTES COMPUT SC, V4905, P203, DOI 10.1007/978-3-540-78163-9_19
   Noorman  J., 2013, 22 USENIX SEC S USEN, P479
   OHearn PeterW., 2012, NATO Science for Peace and Security Series, V33, P286, DOI [10.3233/978-1-61499-028-4-286, DOI 10.3233/978-1-61499-028-4-286]
   Patrignani M, 2019, ACM COMPUT SURV, V51, DOI 10.1145/3280984
   Patrignani M, 2017, P IEEE CSFW, P392, DOI 10.1109/CSF.2017.13
   Patrignani M, 2015, ACM T PROGR LANG SYS, V37, DOI 10.1145/2699503
   Patrignani  Marco, 2018, ABS180400489 CORR
   Pédrot PM, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341712
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Reynolds J. C., 1983, Information Processing 83. Proceedings of the IFIP 9th World Computer Congress, P513
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Sammler M, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371100
   Sieber K., 1992, APPL CATEGORIES COMP, V177, P258
   Skorstengaard Lau, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P475, DOI 10.1007/978-3-319-89884-1_17
   Skorstengaard L, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290332
   Strackx R, 2010, L N INST COMP SCI SO, V50, P344
   Swasey D, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133913
   van Ginkel N, 2017, LECT NOTES COMPUT SC, V10695, P105, DOI 10.1007/978-3-319-71237-6_6
   Van Strydonck T., 2020, LINEAR CAPABILITIES
   Van Strydonck Thomas, 2019, P ACM PROGR LANG ICF
   Vogels F, 2015, LOG METH COMPUT SCI, V11, DOI 10.2168/LMCS-11(3:19)2015
   Watson R. N. M., 2020, Tech. Rep. UCAM-CL-TR-951
   Watson RNM, 2015, P IEEE S SECUR PRIV, P20, DOI 10.1109/SP.2015.9
NR 54
TC 4
Z9 4
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD MAR 30
PY 2021
VL 31
AR e6
DI 10.1017/S0956796821000022
PG 55
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA RF0EM
UT WOS:000634521500001
OA Green Published, Green Accepted
DA 2024-07-18
ER

PT J
AU Abel, A
   Cockx, J
   Devriese, D
   Timany, A
   Wadler, P
AF Abel, Andreas
   Cockx, Jesper
   Devriese, Dominique
   Timany, Amin
   Wadler, Philip
TI Leibniz equality is isomorphic to Martin-Lof identity, parametrically
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID MODEL
AB Consider two widely used definitions of equality. That of Leibniz: one value equals another if any predicate that holds of the first holds of the second. And that of Martin-Lof: the type identifying one value with another is occupied if the two values are identical. The former dates back several centuries, while the latter is widely used in proof systems such as Agda and Coq. Here we show that the two definitions are isomorphic: we can convert any proof of Leibniz equality to one of Martin-Lof identity andvice versa, and each conversion followed by the other is the identity. One direction of the isomorphism depends crucially on values of the type corresponding to Leibniz equality satisfying functional extensionality and Reynolds' notion of parametricity. The existence of the conversions is widely known (meaning that if one can prove one equality then one can prove the other), but that the two conversions form an isomorphism (internally) in the presence of parametricity and functional extensionality is, we believe, new. Our result is a special case of a more general relation that holds between inductive families and their Church encodings. Our proofs are given inside type theory, rather than meta-theoretically. Our paper is a literate Agda script.
C1 [Abel, Andreas] Gothenburg Univ, Gothenburg, Sweden.
   [Cockx, Jesper] Delft Univ Technol, Delft, Netherlands.
   [Devriese, Dominique] Vrije Univ Brussel, Brussels, Belgium.
   [Timany, Amin] Aarhus Univ, Aarhus, Denmark.
   [Wadler, Philip] Univ Edinburgh, Edinburgh, Midlothian, Scotland.
C3 University of Gothenburg; Delft University of Technology; Vrije
   Universiteit Brussel; Aarhus University; University of Edinburgh
RP Abel, A (corresponding author), Gothenburg Univ, Gothenburg, Sweden.
EM andreas.abel@gu.se; j.g.h.cockx@tudelft.nl; dominique.devriese@vub.be;
   timany@cs.au.dk; wadler@inf.ed.ac.uk
RI Devriese, Dominique/C-5493-2014; Cockx, Jesper/U-1628-2018
OI Devriese, Dominique/0000-0002-3862-6856; Cockx,
   Jesper/0000-0003-3862-4073; Timany, Amin/0000-0002-2237-851X
FU Swedish Research Council [621-2014-4864]; EU Cost Action Types for
   programming and verification [CA15123]; UK EPSRC programme
   [EP/K034413/1]; Research Fund -Flanders (FWO); EPSRC [EP/K034413/1]
   Funding Source: UKRI
FX We are indebted to the reviewers of our manuscript, whose feedback
   helped us to great improvements. Andreas Abel acknowledges support by
   the Swedish Research Council through grant 621-2014-4864 Termination
   Certificates for Dependently-Typed Programs and Proofs via Refinement
   Types and by the EU Cost Action CA15123 Types for programming and
   verification. Philip Wadler acknowledges support from UK EPSRC programme
   grant EP/K034413/1 ABCD: A Basis for Concurrency and Distribution.
   Dominique Devriese held a Postdoctoral Fellowship of the Research Fund
   -Flanders (FWO) during part of the development of this work.
CR Altenkirch T, 2007, PLPV'07: PROCEEDINGS OF THE 2007 WORKSHOP ON PROGRAMMING LANGUAGES MEETS PROGRAM VERIFICATION, P57, DOI 10.1145/1292597.1292608
   Atkey R, 2014, ACM SIGPLAN NOTICES, V49, P503, DOI 10.1145/2535838.2535852
   Bernardy JP, 2015, ELECTRON NOTES THEOR, V319, P67, DOI 10.1016/j.entcs.2015.12.006
   Bernardy JP, 2012, J FUNCT PROGRAM, V22, P107, DOI 10.1017/S0956796812000056
   Bernardy JP, 2010, ICFP 2010: PROCEEDINGS OF THE 2010 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P345
   Cavallo E, 2019, ARXIV190100489
   Cockx J, 2014, INT C FUNCT PROGR IC
   Cockx J, 2017, PROCEEDINGS OF THE 6TH ACM SIGPLAN CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS, CPP'17, P173, DOI 10.1145/3018610.3018612
   Cockx J, 2016, ACM SIGPLAN NOTICES, V51, P270, DOI 10.1145/3022670.2951917
   Cohen Cyril, 2016, CUBICAL TYPE THEORY
   Coq Developers, 2017, COQ DOC
   Coquand T., 1992, P 3 WORK TYPES PROOF
   Hasegawa R., 1994, Mathematical Structures in Computer Science, V4, P71, DOI 10.1017/S0960129500000372
   Hofmann M., 1996, VENICE FESTSCHRIFT, P83
   Leibniz G., 1686, DISCOURSE METAPHYSIC
   Martin-Lof Per, 1975, Logic Colloquium, V80, P73, DOI [10.1016/S0049-237X(08)71945-1, DOI 10.1016/S0049-237X(08)71945-1]
   Nuyts A, 2018, S LOG COMP SCI LICS
   Nuyts A, 2017, P ACM PROGRA LANG PA, V1
   Pfenning F, 1989, LECT NOTES COMPUTER
   Reynolds J. C., 1983, Information Processing 83. Proceedings of the IFIP 9th World Computer Congress, P513
   Streicher T., 1993, Investigations into intensional type theory
   The Univalent Foundations Program, 2013, HOM TYP THEOR UN FDN
   Voevodsky Vladimir., 2011, Resizing Rules - Their Use and Semantic Justification
   Wadler P., 1989, FPCA 89 P 4 INT C FU, P347
   Wadler P, 2007, THEOR COMPUT SCI, V375, P201, DOI 10.1016/j.tcs.2006.12.042
NR 25
TC 1
Z9 1
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD JUN 17
PY 2020
VL 30
AR e17
DI 10.1017/S0956796820000155
PG 14
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA LY4BK
UT WOS:000540473800001
OA Green Accepted, Green Submitted, Green Published
DA 2024-07-18
ER

PT J
AU Hillerström, D
   Lindley, S
   Atkey, R
AF Hillerstrom, Daniel
   Lindley, Sam
   Atkey, Robert
TI Effect handlers via generalised continuations
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB Plotkin and Pretnar's effect handlers offer a versatile abstraction for modular programming with user-defined effects. This paper focuses on foundations for implementing effect handlers, for the three different kinds of effect handlers that have been proposed in the literature: deep, shallow, and parameterised. Traditional deep handlers are defined by folds over computation trees and are the original construct proposed by Plotkin and Pretnar. Shallow handlers are defined by case splits (rather than folds) over computation trees. Parameterised handlers are deep handlers extended with a state value that is threaded through the folds over computation trees. We formulate the extensions both directly and via encodings in terms of deep handlers and illustrate how the direct implementations avoid the generation of unnecessary closures. We give two distinct foundational implementations of all the kinds of handlers we consider: a continuation-passing style (CPS) transformation and a CEK-style abstract machine. In both cases, the key ingredient is a generalisation of the notion of continuation to accommodate stacks of effect handlers. We obtain our CPS translation through a series of refinements as follows. We begin with a first-order CPS translation into untyped lambda calculus which manages a stack of continuations and handlers as a curried sequence of arguments. We then refine the initial CPS translation by uncurrying it to yield a properly tail-recursive translation and then moving towards more and more intensional representations of continuations in order to support different kinds of effect handlers. Finally, we make the translation higher order in order to contract administrative redexes at translation time. Our abstract machine design then uses the same generalised continuation representation as the CPS translation. We have implemented both the abstract machine and the CPS transformation (plus extensions) as backends for the Links web programming language.
C1 [Hillerstrom, Daniel; Lindley, Sam] Univ Edinburgh, Lab Fdn Comp Sci, Edinburgh EH8 9YL, Midlothian, Scotland.
   [Lindley, Sam] Imperial Coll London, Dept Comp, London SW7 2BU, England.
   [Atkey, Robert] Univ Strathclyde, Math Struct Programming Grp, Glasgow G1 1XQ, Lanark, Scotland.
C3 University of Edinburgh; Imperial College London; University of
   Strathclyde
RP Hillerström, D (corresponding author), Univ Edinburgh, Lab Fdn Comp Sci, Edinburgh EH8 9YL, Midlothian, Scotland.
EM daniel.hillerstrom@ed.ac.uk; sam.lindley@ed.ac.uk;
   robert.atkey@strath.ac.uk
OI Lindley, Sam/0000-0002-1360-4714; Hillerstrom,
   Daniel/0000-0003-4730-9315
FU EPSRC [EP/L01503X/1, EP/K034413/1]; EPSRC [EP/K034413/1] Funding Source:
   UKRI
FX We thank Nicolas Oury for originally suggesting the Nim game as an
   example to demonstrate programming with handlers. We thank John Longley
   for insightful discussions about the inter-encodings of deep and shallow
   handlers. We thank KC Sivaramakrishnan for his generosity. We thank
   Simon Fowler, Ohad Kammar, James McKinna, Craig McLaughlin, Gabriel
   Scherer, and the anonymous reviewers for helpful feedback, suggestions,
   and discussions. This work was supported by EPSRC grants EP/L01503X/1
   (EPSRC Centre for Doctoral Training in Pervasive Parallelism) and
   EP/K034413/1 (From Data Types to Session Types-A Basis for Concurrency
   and Distribution).
CR [Anonymous], 1992, Compiling with Continuations
   Bauer A, 2015, J LOG ALGEBR METHODS, V84, P108, DOI 10.1016/j.jlamp.2014.02.001
   Berdine J., 2002, Higher-Order and Symbolic Computation, V15, P181, DOI 10.1023/A:1020891112409
   Biernacki D, 2018, PACMPL, V2
   Biernacki D, 2019, PACMPL, V3
   Bingham E., 2018, J MACH LEARN RES
   Bouton CL, 1901, ANN MATH, V3, P35, DOI 10.2307/1967631
   Brachthäuser JI, 2017, SCALA'17: PROCEEDINGS OF THE 8TH ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON SCALA, P67, DOI 10.1145/3136000.3136007
   Brachthauser J. I, 2018, PACMPL, V2
   Brachthauser J. I, J FUNCT PROGRAM, V30
   Bruggeman C, 1996, ACM SIGPLAN NOTICES, V31, P99, DOI 10.1145/249069.231395
   Chung-chieh Shan, 2007, Higher-Order and Symbolic Computation, V20, P371, DOI 10.1007/s10990-007-9010-4
   Convent L., J FUNCT PROGRAM, V30
   Cooper E, 2007, LECT NOTES COMPUT SC, V4709, P266
   Danvy O, 2003, THEOR COMPUT SCI, V308, P239, DOI 10.1016/S0304-3975(02)00733-8
   DANVY O, 1990, PROCEEDINGS OF THE 1990 ACM CONFERENCE ON LISP AND FUNCTIONAL PROGRAMMING, P151, DOI 10.1145/91556.91622
   Danvy Olivier., 1992, MATH STRUCT COMP SCI, V2, P361, DOI DOI 10.1017/S0960129500001535
   Dolan S., 2017, LECT NOTES COMPUTER, P98
   Dolan Stephen, 2014, OCAML WORKSH
   Dolan Stephen, 2015, OCAML WORKSH
   Dyvbig RK, 2007, J FUNCT PROGRAM, V17, P687, DOI 10.1017/S0956796807006259
   Felleisen Matthias, 1987, FORMAL DESCRIPTION P, P193
   FLANAGAN C, 1993, SIGPLAN NOTICES, V28, P237, DOI 10.1145/173262.155113
   Fokkinga M.M., 1990, SQUIGGOLIST, V1, P81
   Forster Y., 2017, PACMPL, V1, pe15
   Forster Y, 2019, J FUNCT PROGRAM, V29, DOI 10.1017/S0956796819000121
   Hillerstrom Daniel, 2018, Programming Languages and Systems. 16th Asian Symposium, APLAS 2018. Proceedings: Lecture Notes in Computer Science (LNCS 11275), P415, DOI 10.1007/978-3-030-02768-1_22
   Hillerstrom D, 2015, THESIS
   Hillerstrom D., 2016, ML WORKSH
   Hillerstrom D., 2017, LEIBNIZ INT P INFORM, V84
   Hillerstrom D, 2016, THESIS
   Hillerstrom Daniel, 2016, TYDE ICFP, P15, DOI DOI 10.1145/2976022.2976033
   Huet G., 1997, Journal of Functional Programming, V7, P549, DOI 10.1017/S0956796897002864
   James R. P., 2011, TPDC
   Kammar O, 2013, ACM SIGPLAN NOTICES, V48, P145, DOI [10.1145/2500365.2500590, 10.1145/2544174.2500590]
   Kennedy A, 2007, ICFP'07 PROCEEDINGS OF THE 2007 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P177
   Kiselyov O, 2012, THEOR COMPUT SCI, V435, P56, DOI 10.1016/j.tcs.2012.02.025
   Kiselyov Oleg, 2016, ML WORKSH
   Kranz D., 1986, ORBIT OPTIMIZING COM, V21, P219
   Leijen D, 2017, LECT NOTES COMPUT SC, V10695, P339, DOI 10.1007/978-3-319-71237-6_17
   Leijen D, 2017, PROCEEDINGS OF THE 2ND ACM SIGPLAN INTERNATIONAL WORKSHOP ON TYPE-DRIVEN DEVELOPMENT (TYDE' 17), P16, DOI 10.1145/3122975.3122977
   Leijen D, 2014, ELECTRON PROC THEOR, P100, DOI 10.4204/EPTCS.153.8
   Leijen D, 2017, ACM SIGPLAN NOTICES, V52, P486, DOI 10.1145/3093333.3009872
   Levy PB, 2003, INFORM COMPUT, V185, P182, DOI 10.1016/S0890-5401(03)00088-9
   Lindley S, 2017, ACM SIGPLAN NOTICES, V52, P500, DOI 10.1145/3093333.3009897
   Materzok Marek, 2012, Lecture Notes in Computer Science, V7705, P296, DOI [10.1007/978-3-642- 35182- 2_21, DOI 10.1007/978-3-642-35182-2_21]
   MEIJER E, 1991, LECT NOTES COMPUT SC, V523, P124
   Pirog M., 2019, LEIBNIZ INT P INFORM, V131
   Plotkin G., 2001, Foundations of Software Science and Computation Structures. 4th International Conference, FOSSACS 2001. Held as Part of the Joint European Conferences on Theory and Practice of Software, ETAPS 2001. Proceedings (Lecture Notes in Computer Science Vol.2030), P1
   Plotkin G. D., 1975, Theoretical Computer Science, V1, P125, DOI 10.1016/0304-3975(75)90017-1
   Plotkin GD, 2013, LOG METH COMPUT SCI, V9, DOI 10.2168/LMCS-9(4:23)2013
   Pretnar M, 2015, ELECTRON NOTES THEOR, V319, P19, DOI 10.1016/j.entcs.2015.12.003
   Remy D., 1993, RR1869 INRIA
   Steele G., 1978, AITR474 INRIA
   Wadler P., 1995, Advanced Functional Programming. First International Spring School on Advanced Functional Programming Techniques. Tutorial Text, P24
   Wu N, 2014, ACM SIGPLAN NOTICES, V49, P1, DOI 10.1145/2633357.2633358
   Wu N, 2015, LECT NOTES COMPUT SC, V9129, P302, DOI 10.1007/978-3-319-19797-5_15
   Yallop J., 2017, PACMPL, V1
NR 58
TC 19
Z9 19
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD MAR 16
PY 2020
VL 30
AR e5
DI 10.1017/S0956796820000040
PG 69
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA LB9DN
UT WOS:000524929500001
OA Green Accepted, Bronze
DA 2024-07-18
ER

PT J
AU Fegaras, L
AF Fegaras, Leonidas
TI An algebra for distributed Big Data analytics
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID MAP-REDUCE; FRAMEWORK; MODEL
AB We present an algebra for data-intensive scalable computing based on monoid homomorphisms that consists of a small set of operations that capture most features supported by current domain-specific languages for data-centric distributed computing. This algebra is being used as the formal basis of MRQL, which is a query processing and optimization system for large-scale distributed data analysis. The MRQL semantics is given in terms of monoid comprehensions, which support group-by and order-by syntax and can work on heterogeneous collections without requiring any extension to the monoid algebra. We present the syntax and semantics of monoid comprehensions and provide rules to translate them to the monoid algebra. We give evidence of the effectiveness of our algebra by presenting some important optimization rules, such as converting nested queries to joins.
C1 [Fegaras, Leonidas] Univ Texas Arlington, Dept Comp Sci & Engn, Arlington, TX 76019 USA.
C3 University of Texas System; University of Texas Arlington
RP Fegaras, L (corresponding author), Univ Texas Arlington, Dept Comp Sci & Engn, Arlington, TX 76019 USA.
EM fegaras@cse.uta.edu
FU National Science Foundation
FX We thank the anonymous reviewers for their careful reading of our
   manuscript and their many insightful comments and suggestions to improve
   the quality of the paper. The performance results presented in this
   paper were obtained using the Chameleon testbed supported by the
   National Science Foundation.
CR Acar UA, 2009, ACM T PROGR LANG SYS, V32, DOI 10.1145/1596527.1596530
   Ait-Kaci H, 2013, LNCS, V8000, P112
   Alexandrov A, 2016, SIGMOD REC, V45, P51, DOI 10.1145/2949741.2949754
   [Anonymous], 2012, USENIX S NETW SYST D
   [Anonymous], J FUNCT PROGRAM
   Armbrust M, 2015, SIGMOD'15: PROCEEDINGS OF THE 2015 ACM SIGMOD INTERNATIONAL CONFERENCE ON MANAGEMENT OF DATA, P1383, DOI 10.1145/2723372.2742797
   Backhouse R., 1993, Formal program development. IFIP TC2/WG 2.1 state-of-the-art report, P7
   Bancilhon F., 1987, Proceedings of the Thirteenth International Conference on Very Large Data Bases: 1987 13th VLDB, P97
   Battre D., 2010, SOCC, P119, DOI [10.1145/1807128.1807148, DOI 10.1145/1807128.1807148]
   Blelloch G. E., 1993, TECHNICAL REPORT
   BLELLOCH GE, 1990, J PARALLEL DISTR COM, V8, P119, DOI 10.1016/0743-7315(90)90087-6
   Boykin O, 2014, PROC VLDB ENDOW, V7, P1441, DOI 10.14778/2733004.2733016
   Breazu-tannen Val., 1991, P 3 INT WORKSHOP DAT, P9
   Bryant RE, 2011, COMPUT SCI ENG, V13, P25, DOI 10.1109/MCSE.2011.73
   Buneman P., 1994, SIGMOD Record, V23, P87, DOI 10.1145/181550.181564
   Chaiken R, 2008, PROC VLDB ENDOW, V1, P1265, DOI 10.14778/1454159.1454166
   Chakrabarti D, 2004, SIAM PROC S, P442
   Fegaras L., 1995, SIGMOD Record, V24, P47, DOI 10.1145/568271.223789
   Fegaras L, 2000, ACM T DATABASE SYST, V25, P457, DOI 10.1145/377674.377676
   Fegaras L, 2012, INT WORKSH DAT INT C
   Fegaras L., 2011, INT WORKSH WEB DAT
   Fegaras L, 2016, IEEE T KNOWL DATA EN, V28, P2998, DOI 10.1109/TKDE.2016.2601103
   Fegaras Leonidas., 2012, 15th International Conference on Extending Database Technology, EDBT'12, Berlin, Germany, March 27-30, 2012, Proceedings, P26
   Gates AF, 2009, PROC VLDB ENDOW, V2, P1414, DOI 10.14778/1687553.1687568
   Gibbons Jeremy, 2016, A List of Successes that can Change the World. Essays Dedicated to Philip Wadler on the Occasion of his 60th Birthday. LNCS 9600, P132, DOI 10.1007/978-3-319-30936-1_7
   Gibbons J, 1996, J FUNCT PROGRAM, V6, P657
   Giorgidze G, 2011, HASKELL 11: PROCEEDINGS OF THE 2011 ACM SIGPLAN HASKELL SYMPOSIUM, P13
   Grust T, 1999, J INTELL INF SYST, V12, P191, DOI 10.1023/A:1008705026446
   Hölsch J, 2016, SIGMOD'16: PROCEEDINGS OF THE 2016 INTERNATIONAL CONFERENCE ON MANAGEMENT OF DATA, P1765, DOI 10.1145/2882903.2915241
   Isard M, 2009, ACM SIGMOD/PODS 2009 CONFERENCE, P987
   Jones SP, 2007, HASKELL'07: PROCEEDINGS OF THE ACM SIGPLAN 2007 HASKELL WORKSHOP, P61
   Lin J., 2010, DATA INTENSIVE TEXT
   Low Y, 2012, PROC VLDB ENDOW, V5, P716, DOI 10.14778/2212351.2212354
   Malewicz Grzegorz, 2010, P ACM SIGMOD INT C M, P135, DOI [DOI 10.1145/1807167.1807184, 10.1145/1807167.1807184]
   Olston C., 2008, Proceedings of the 2008 ACM SIGMOD International Conference on Manage- ment of Data, P1099
   Power R., 2010, S OP SYST DES IMPL O
   Shinnar A, 2012, PROC VLDB ENDOW, V5, P1736, DOI 10.14778/2367502.2367513
   Steele GL, 2009, ICFP'09: PROCEEDINGS OF THE 2009 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P1
   Thusoo A, 2009, PROC VLDB ENDOW, V2, P1626, DOI 10.14778/1687553.1687609
   Thusoo A, 2010, PROC INT CONF DATA, P996, DOI 10.1109/ICDE.2010.5447738
   Trinder P., 1989, TENCON '89. Fourth IEEE Region 10 International Conference. `Information Technologies for the 90's' E2C2; Energy, Electronics, Computers, Communications (Cat. No.A89CH2766-4), P186, DOI 10.1109/TENCON.1989.176921
   Trinder Philip W, 1991, P 3 INT WORKSH DAT P, P55
   VALIANT LG, 1990, COMMUN ACM, V33, P103, DOI 10.1145/79173.79181
   WADLER P, 1990, PROCEEDINGS OF THE 1990 ACM CONFERENCE ON LISP AND FUNCTIONAL PROGRAMMING, P61, DOI 10.1145/91556.91592
   Wadler P., 1987, IMPLEMENTATION FUNCT
   Zaharia M., 2013, S OP SYST PRINC SOSP
NR 46
TC 9
Z9 10
U1 0
U2 2
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PY 2017
VL 27
AR e27
DI 10.1017/S0956796817000193
PG 47
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA FP4UP
UT WOS:000417612600001
DA 2024-07-18
ER

PT J
AU Hoffmann, J
   Shao, Z
AF Hoffmann, Jan
   Shao, Zhong
TI Type-based amortized resource analysis with integers and arrays
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB Proving bounds on the resource consumption of a program by statically analyzing its source code is an important and well-studied problem. Automatic approaches for numeric programs with side effects usually apply abstract interpretation-based invariant generation to derive bounds on loops and recursion depths of function calls. This article presents an alternative approach to resource-bound analysis for numeric and heap-manipulating programs that uses type-based amortized resource analysis. As a first step towards the analysis of imperative code, the technique is developed for a first-order ML-like language with unsigned integers and arrays. The analysis automatically derives bounds that are multivariate polynomials in the numbers and the lengths of the arrays in the input. Experiments with example programs demonstrate two main advantages of amortized analysis over current abstract interpretation-based techniques. For one thing, amortized analysis can handle programs with non-linear intermediate values like f((n + m)(2)). For another thing, amortized analysis is compositional and works naturally for compound programs like f(g(x)).
C1 [Hoffmann, Jan; Shao, Zhong] Yale Univ, Dept Comp Sci, 51 Prospect St, New Haven, CT 06511 USA.
C3 Yale University
RP Hoffmann, J (corresponding author), Yale Univ, Dept Comp Sci, 51 Prospect St, New Haven, CT 06511 USA.
EM jan.hoffmann@yale.edu; zhong.shao@yale.edu
OI Shao, Zhong/0000-0001-8184-7649; Hoffmann, Jan/0000-0001-8326-0788
FU NSF [1319671, 1065451]; DARPA [FA8750-10-2-0254, FA8750-12-2-0293];
   Division Of Computer and Network Systems; Direct For Computer & Info
   Scie & Enginr [1065451] Funding Source: National Science Foundation;
   Division of Computing and Communication Foundations; Direct For Computer
   & Info Scie & Enginr [1319671] Funding Source: National Science
   Foundation
FX This research is based on work supported in part by NSF grants 1319671
   and 1065451, and DARPA grants FA8750-10-2-0254 and FA8750-12-2-0293.
CR Albert E, 2012, LECT NOTES COMPUT SC, V7180, P1, DOI 10.1007/978-3-642-28717-6_1
   Albert E, 2012, THEOR COMPUT SCI, V413, P142, DOI 10.1016/j.tcs.2011.07.009
   Albert E, 2011, J AUTOM REASONING, V46, P161, DOI 10.1007/s10817-010-9174-1
   Alias C, 2010, LECT NOTES COMPUT SC, V6337, P117, DOI 10.1007/978-3-642-15769-1_8
   Alonso D, 2011, ELECTRON NOTES THEOR, V279, P3, DOI 10.1016/j.entcs.2011.11.002
   [Anonymous], 2001, Linear Programming: Foundations and extensions, Department of Operations Research and Financial Engineering
   Brockschmidt M., 2014, TOOLS ALG CONSTR AN, V8413, P140, DOI DOI 10.1007/978-3-642-54862-8_10
   Carbonneaux Q., 2014, C PROG LANG DES IMPL, P30
   Carbonneaux Q, 2015, ACM SIGPLAN NOTICES, V50, P467, DOI [10.1145/2813885.2737955, 10.1145/2737924.2737955]
   Cousot Patrick, 1978, P 5 ACM SIGACT SIGPL, p84S96, DOI DOI 10.1145/512760.512770
   Alonso-Blas DE, 2012, LECT NOTES COMPUT SC, V7460, P405, DOI 10.1007/978-3-642-33125-1_27
   Gulavani LS, 2008, LECT NOTES COMPUT SC, V5123, P370
   Gulwani S, 2009, ACM SIGPLAN NOTICES, V44, P127, DOI 10.1145/1594834.1480898
   Hoffmann Jan, 2012, Computer Aided Verification. Proceedings 24th International Conference, CAV 2012, P781, DOI 10.1007/978-3-642-31424-7_64
   Hoffmann J, 2014, LECT NOTES COMPUT SC, V8475, P152, DOI 10.1007/978-3-319-07151-0_10
   Hoffmann J, 2012, ACM T PROGR LANG SYS, V34, DOI 10.1145/2362389.2362393
   Hoffmann J, 2010, LECT NOTES COMPUT SC, V6461, P172, DOI 10.1007/978-3-642-17164-2_13
   Hoffmann J, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P357, DOI 10.1145/1926385.1926427
   Hofmann M, 2003, ACM SIGPLAN NOTICES, V38, P185, DOI 10.1145/640128.604148
   Leroy X, 2006, LECT NOTES COMPUT SC, V3924, P54
   Mine A., 2004, Domaines numeriques abstraits faiblement relationnels
   Riordan J., 1972, J COMB THEORY A, V12, P72
   Sankaranarayanan S, 2006, LECT NOTES COMPUT SC, V4134, P3
   Sinn M., 2014, P 26 INT C COMP AID, P743
   Zuleger F, 2011, LECT NOTES COMPUT SC, V6887, P280, DOI 10.1007/978-3-642-23702-7_22
   [No title captured]
NR 26
TC 8
Z9 9
U1 0
U2 1
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PY 2015
VL 25
DI 10.1017/S0956796815000192
PG 35
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DC7JC
UT WOS:000369395000003
OA Bronze
DA 2024-07-18
ER

PT J
AU Swamy, N
   Chen, J
   Fournet, C
   Strub, PY
   Bhargavan, K
   Yang, J
AF Swamy, Nikhil
   Chen, Juan
   Fournet, Cedric
   Strub, Pierre-Yves
   Bhargavan, Karthikeyan
   Yang, Jean
TI Secure distributed programming with value-dependent types
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID RECURSIVE DEFINITIONS; AUTHORIZATION; LANGUAGE
AB Distributed applications are difficult to program reliably and securely. Dependently typed functional languages promise to prevent broad classes of errors and vulnerabilities, and to enable program verification to proceed side-by-side with development. However, as recursion, effects, and rich libraries are added, using types to reason about programs, specifications, and proofs becomes challenging. We present F-star, a full-fledged design and implementation of a new dependently typed language for secure distributed programming. Our language provides arbitrary recursion while maintaining a logically consistent core; it enables modular reasoning about state and other effects using affine types; and it supports proofs of refinement properties using a mixture of cryptographic evidence and logical proof terms. The key mechanism is a new kind system that tracks several sub-languages within F-star and controls their interaction. F-star subsumes two previous languages, F7 and Fine. We prove type soundness (with proofs mechanized in Coq) and logical consistency for F-star. We have implemented a compiler that translates F-star to. NET bytecode, based on a prototype for Fine. F-star provides access to libraries for concurrency, networking, cryptography, and interoperability with C#, F#, and the other. NET languages. The compiler produces verifiable binaries with 60% code size overhead for proofs and types, as much as a 45x improvement over the Fine compiler, while still enabling efficient bytecode verification. We have programmed and verified nearly 50,000 lines of F-star including new schemes for multi-party sessions; a zero-knowledge privacy-preserving payment protocol; a provenance-aware curated database; a suite of web-browser extensions verified for authorization properties; a cloud-hosted multi-tier web application with a verified reference monitor; the core F-star typechecker itself; and programs translated to F-star from other languages such as F7 and JavaScript.
C1 [Yang, Jean] MIT, Cambridge, MA 02139 USA.
C3 Massachusetts Institute of Technology (MIT)
EM nswamy@microsoft.com; juanchen@microsoft.com; fournet@microsoft.com;
   pierre-yves@strub.nu; karthikeyan.bhargavan@inria.fr;
   jeanyang@csail.mit.edu
CR [Anonymous], 1992, Handbook of Logic in Computer Science
   [Anonymous], 2012, VERIFICATION CONDITI
   Augustsson L., 1998, Proceedings of the third ACM SIGPLAN international conference on Functional programming, ICFP '98, P239
   Avijit K, 2010, TLDI '10: PROCEEDINGS OF THE 2010 ACM SIGPLAN WORKSHOP ON TYPES IN LANGUAGE DESIGN AND IMPLEMENTATION, P27
   Backes M, 2008, CCS'08: PROCEEDINGS OF THE 15TH ACM CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P357
   Barthe G., 2012, MSRTR201237
   Barthe G, 2006, LECT NOTES ARTIF INT, V4246, P257, DOI 10.1007/11916277_18
   Bengtson J, 2008, CSF 2008: 21ST IEEE COMPUTER SECURITY FOUNDATIONS SYMPOSIUM, PROCEEDINGS, P17, DOI 10.1109/CSF.2008.27
   BERTOT Y, 2004, COQART INTERACTIVE T
   Bhargavan K, 2009, PROCEEDINGS OF THE 22ND IEEE COMPUTER SECURITY FOUNDATIONS SYMPOSIUM, P124, DOI 10.1109/CSF.2009.26
   Bhargavan K, 2010, ACM SIGPLAN NOTICES, V45, P445, DOI 10.1145/1707801.1706350
   Borgstrom J., 2011, P 5 ACM WORKSH PROGR, P15, DOI DOI 10.1145/1929529.1929532
   Cervesato I, 2002, INFORM COMPUT, V179, P19, DOI 10.1006/inco.2001.2951
   Chapin PC, 2008, ACM COMPUT SURV, V40, DOI 10.1145/1380584.1380587
   Chen J, 2010, SIGPLAN NOTICES, P412
   Clarkson MR, 2010, J COMPUT SECUR, V18, P1157, DOI 10.3233/JCS-2009-0393
   Coq Development Team, 2010, CALC IND CONSTR
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Deniélou PM, 2011, ACM SIGPLAN NOTICES, V46, P435, DOI 10.1145/1925844.1926435
   Dybjer P, 2000, J SYMBOLIC LOGIC, V65, P525, DOI 10.2307/2586554
   FELLEISEN M, 1992, THEOR COMPUT SCI, V103, P235, DOI 10.1016/0304-3975(92)90014-7
   Filliâtre JC, 2013, LECT NOTES COMPUT SC, V7792, P125, DOI 10.1007/978-3-642-37036-6_8
   Fournet C, 2007, 20TH IEEE COMPUTER SECURITY FOUNDATIONS SYMPOSIUM (CSFS20), PROCEEDINGS, P31, DOI 10.1109/CSF.2007.7
   Fournet C, 2013, ACM SIGPLAN NOTICES, V48, P371, DOI 10.1145/2480359.2429114
   Fournet C, 2011, PROCEEDINGS OF THE 18TH ACM CONFERENCE ON COMPUTER & COMMUNICATIONS SECURITY (CCS 11), P341
   Girard Jean-Yves, 1972, THESIS U PARIS 7 PAR
   Gonthier G., 2011, RR6455 INRIA
   Gordon A. D., 2003, Journal of Computer Security, V11, P451
   Guha A, 2011, P IEEE S SECUR PRIV, P115, DOI 10.1109/SP.2011.36
   Guha A, 2010, LECT NOTES COMPUT SC, V6183, P126, DOI 10.1007/978-3-642-14107-2_7
   Gurevich Y, 2008, CSF 2008: 21ST IEEE COMPUTER SECURITY FOUNDATIONS SYMPOSIUM, PROCEEDINGS, P149, DOI 10.1109/CSF.2008.8
   Guts N, 2009, LECT NOTES COMPUT SC, V5789, P168, DOI 10.1007/978-3-642-04444-1_11
   Honda K, 2008, ACM SIGPLAN NOTICES, V43, P273, DOI 10.1145/1328897.1328472
   Jeannin Jean-Baptiste, 2013, Engineering Secure Software and Systems. 5th International Symposium, ESSoS 2013. Proceedings, P139, DOI 10.1007/978-3-642-36563-8_10
   Jia L, 2008, ACM SIGPLAN NOTICES, V43, P27, DOI 10.1145/1411203.1411212
   Jia Limin., 2009, Programming Languages and Analysis for Security (PLAS)
   Kimmell G., 2012, PROGRAMMING LANGUAGE, P15
   Kiselyov O., 2010, PREPRINT
   Lahiri S.K, 2011, P ACM WORKSH PROGR L, P3
   Le Goues C, 2011, LECT NOTES COMPUT SC, V7041, P407, DOI 10.1007/978-3-642-24690-6_28
   McCarthy John., 1962, IFIP C, P21
   Mendler N. P, 1987, THESIS CORNELL U ITH
   Nanevski A, 2008, ACM SIGPLAN NOTICES, V43, P229, DOI 10.1145/1411203.1411237
   NORELL U, 2007, THESIS CHALMERS I TE
   PEDERSEN TP, 1992, LECT NOTES COMPUT SC, V576, P129
   Rial A., 2010, PRIVACY FRIENDLY SMA
   Sewell P, 2010, J FUNCT PROGRAM, V20, P71, DOI 10.1017/S0956796809990293
   Sozeau M, 2007, LECT NOTES COMPUT SC, V4502, P237
   Sozeau M, 2010, LECT NOTES COMPUT SC, V6172, P419, DOI 10.1007/978-3-642-14052-5_29
   Strub PY, 2012, ACM SIGPLAN NOTICES, V47, P571, DOI 10.1145/2103621.2103723
   Stump A., 2008, PLPV 09, P49
   Swamy N, 2008, P IEEE S SECUR PRIV, P369, DOI 10.1109/SP.2008.29
   Swamy N, 2013, ACM SIGPLAN NOTICES, V48, P387, DOI 10.1145/2499370.2491978
   Swamy N, 2011, ACM SIGPLAN NOTICES, V46, P266, DOI 10.1145/2034574.2034811
   Swamy N, 2010, LECT NOTES COMPUT SC, V6012, P529, DOI 10.1007/978-3-642-11957-6_28
   Vaughan JA, 2008, CSF 2008: 21ST IEEE COMPUTER SECURITY FOUNDATIONS SYMPOSIUM, PROCEEDINGS, P177, DOI 10.1109/CSF.2008.24
   Volpano D., 1996, Journal of Computer Security, V4, P167
NR 57
TC 20
Z9 23
U1 0
U2 3
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD JUL
PY 2013
VL 23
IS 4
SI SI
BP 402
EP 451
DI 10.1017/S0956796813000142
PG 50
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 250WP
UT WOS:000326887600003
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Spoonhower, D
   Blelloch, GE
   Harper, R
   Gibbons, PB
AF Spoonhower, Daniel
   Blelloch, Guy E.
   Harper, Robert
   Gibbons, Phillip B.
TI Space profiling for parallel functional programs
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 13th ACM SIGPLAN International Conference on Functional Programming
CY SEP 22-24, 2008
CL Victoria, CANADA
SP ACM SIGPLAN
ID EFFICIENT; IMPLEMENTATION; COLLECTION; LANGUAGES
AB We present a semantic space profiler for parallel functional programs. Building on previous work in sequential profiling, our tools help programmers to relate runtime resource use back to program source code. Unlike many profiling tools, our profiler is based on a cost semantics. This provides a means to reason about performance without requiring a detailed understanding of the compiler or runtime system. It also provides a specification for language implementers. This is critical in that it enables us to separate cleanly the performance of the application from that of the language implementation. Some aspects of the implementation can have significant effects on performance. Our cost semantics enables programmers to understand the impact of different scheduling policies while hiding many of the details of their implementations. We show applications where the choice of scheduling policy has asymptotic effects on space use. We explain these use patterns through a demonstration of our tools. We also validate our methodology by observing similar performance in our implementation of a parallel extension of Standard ML.
C1 [Spoonhower, Daniel; Blelloch, Guy E.; Harper, Robert] Carnegie Mellon Univ, Sch Comp Sci, Pittsburgh, PA 15213 USA.
   [Gibbons, Phillip B.] Intel Labs Pittsburgh, Pittsburgh, PA 15213 USA.
C3 Carnegie Mellon University; Intel Corporation
RP Spoonhower, D (corresponding author), Carnegie Mellon Univ, Sch Comp Sci, 5000 Forbes Ave, Pittsburgh, PA 15213 USA.
EM spoons@cs.cmu.edu; blelloch@cs.cmu.edu; rwh@cs.cmu.edu;
   phillip.b.gibbons@intel.com
RI Harper, Robert/HLH-3752-2023
OI Harper, Robert/0000-0002-9400-2941
CR ADITYA S, 1995, 3771 MIT COMP STRUCT
   [Anonymous], 1997, The Definition of Standard ML
   APPEL A, 1988, CSTR19788 PRINC U
   APPEL AW, 1989, SOFTWARE PRACT EXPER, V19, P171, DOI 10.1002/spe.4380190206
   BARNES J, 1986, NATURE, V324, P446, DOI 10.1038/324446a0
   BLELLOCH GE, 1994, J PARALLEL DISTR COM, V21, P4, DOI 10.1006/jpdc.1994.1038
   BLELLOCH GE, 1990, J PARALLEL DISTR COM, V8, P119, DOI 10.1016/0743-7315(90)90087-6
   Blelloch GE, 1999, J ACM, V46, P281, DOI 10.1145/301970.301974
   Blumofe RD, 1998, SIAM J COMPUT, V27, P202, DOI 10.1137/S0097539793259471
   Blumofe RD, 1999, J ACM, V46, P720, DOI 10.1145/324133.324234
   BURTON FW, 1981, P 1981 C FUNCT PROGR, P187, DOI DOI 10.1145/800223.806778
   CHAKRAVARTY MMT, 2000, P 5 ACM SIGPLAN INT, P94
   CHARLES N, 1998, WORKSH IMPL FUNCT LA, P20
   Cheng P, 2001, ACM SIGPLAN NOTICES, V36, P125, DOI 10.1145/381694.378823
   Conchon S., 1999, First International Symposium on Agent Systems and Applications/Third International Symposium on (Cat No.PR00340), P22, DOI 10.1109/ASAMA.1999.805390
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   ENNALS R, 2004, THESIS U CAMBRIDGE
   Fluet M, 2007, ML'07: PROCEEDINGS OF THE 2007 WORKSHOP ON ML, P15
   Fluet M, 2008, ICFP'08: PROCEEDINGS OF THE 2008 SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P241
   FRIGO M, 1998, PLDI 98, P212, DOI DOI 10.1145/277652.277725
   Greiner J, 1999, ACM T PROGR LANG SYS, V21, P240, DOI 10.1145/316686.316690
   GUSTAVSSON J, 1999, P WORKSH HIGH ORD OP, P69
   HAMMOND, 2003, PARALLEL PROCESSING, V13, P413
   HAMMOND K, 1992, P INT WORKSH PAR IMP, P73
   HAMMOND K, 1995, P HPFC 95 C HIGH PER, P208
   JAY CB, 1997, P INT EUR C PAR PROC, P650
   LIEBERMAN H, 1983, COMMUN ACM, V26, P419, DOI 10.1145/358141.358147
   Loidl H.-W., 1996, P GLASG WORKSH FUNCT
   NIKHIL A, 1989, ACM T PROGR LANG SYS, V11, P598, DOI 10.1145/69558.69562
   PEYTON J, 2008, P IARCS ANN C FDN SO
   Preparata F, 1988, COMPUTATIONAL GEOMET
   Reppy JohnH., 1999, CONCURRENT PROGRAMMI
   ROE P, 1991, THESIS U GLASGOW
   Rojemo N, 1996, ACM SIGPLAN NOTICES, V31, P34, DOI 10.1145/232629.232633
   Rosendahl M., 1989, FPCA 89, P144, DOI DOI 10.1145/99370.99381
   Runciman C., 1996, Journal of Functional Programming, V6, P587, DOI 10.1017/S095679680000188X
   Runciman C., 1993, Journal of Functional Programming, V3, P217, DOI 10.1017/S0956796800000708
   Runciman Colin., 1993, FUNCTIONAL PROGRAMMI, P236
   Sands D., 1990, THESIS U LONDON
   SANSOM PM, 1995, PRINCIPLES PROGRAMMI, P355
   SANSOM PM, 1992, P GLASG WORKSH FUNCT, P227
   SHAO Z, 1994, P 1994 ACM C LISP FU, P150
   Trinder Philip W., 1998, J FUNCTIONAL PROGRAM, V8, P23, DOI DOI 10.1017/S0956796897002967
   Weeks S., 2006, P ACM WORKSHOP ML 20, P1, DOI [10.1145/1159876.1159877, DOI 10.1145/1159876.1159877]
   [No title captured]
   [No title captured]
NR 46
TC 7
Z9 8
U1 0
U2 1
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD NOV
PY 2010
VL 20
SI SI
BP 417
EP 461
DI 10.1017/S0956796810000146
PN 5-6
PG 45
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 735PF
UT WOS:000288428700002
OA Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Danvy, O
   Millikin, K
   Nielsen, LR
AF Danvy, Olivier
   Millikin, Kevin
   Nielsen, Lasse R.
TI On one-pass CPS transformations
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB We bridge two distinct approaches to one-pass CPS transformations, i.e., CPS transformations that reduce administrative redexes at transformation time instead of in a post-processing phase. One approach is compositional and higher-order, and is independently due to Appel, Danvy and Filinski, and Wand, building on Plotkin's seminal work. The other is non-compositional and based on a reduction semantics for the lambda-calculus, and is due to Sabry and Felleisen. To relate the two approaches, we use three tools: Reynolds's defunctionalization and its left inverse, refunctionalization; a special case of fold-unfold fusion due to Ohori and Sasano, fixed-point promotion; and an implementation technique for reduction semantics due to Danvy and Nielsen, refocusing. This work is directly applicable to transforming programs into monadic normal form.
C1 [Danvy, Olivier; Millikin, Kevin; Nielsen, Lasse R.] Aarhus Univ, Dept Comp Sci, BRIC, DK-8200 Aarhus, Denmark.
C3 Aarhus University; University of Copenhagen
RP Danvy, O (corresponding author), Aarhus Univ, Dept Comp Sci, BRIC, IT Parken Aabogade 34, DK-8200 Aarhus, Denmark.
EM danvy@brics.dk; kmillikin@brics.dk; lrn@brics.dk
CR Allison L., 1986, PRACTICAL INTRO DENO
   [Anonymous], FN19 DAIMI
   [Anonymous], 1984, Studies in Logic
   [Anonymous], 1992, Compiling with Continuations
   [Anonymous], 1979, The Denotational Description of Programming Languages: An Introduction
   APPEL AW, 1989, CONFERENCE RECORD OF THE SIXTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P293, DOI 10.1145/75277.75303
   Barthe G., 1999, Higher-Order and Symbolic Computation, V12, P125, DOI 10.1023/A:1010000206149
   BENTON N, 1999, ELECT NOTES THEORETI, V26, P19
   BIERNACKA M, RS063 BRICS
   Biernacka M, 2007, THEOR COMPUT SCI, V375, P76, DOI 10.1016/j.tcs.2006.12.028
   BIERNACKI D, 2006, RS0615 BRICS
   Bloo R, 1996, INFORM COMPUT, V126, P123, DOI 10.1006/inco.1996.0041
   Damian D, 2003, J FUNCT PROGRAM, V13, P867, DOI 10.1017/S0956796802004379
   Danvy O, 2005, INFORM PROCESS LETT, V94, P217, DOI 10.1016/j.ipl.2005.02.002
   Danvy O, 2003, THEOR COMPUT SCI, V308, P239, DOI 10.1016/S0304-3975(02)00733-8
   DANVY O, 1994, SCI COMPUT PROGRAM, V22, P183, DOI 10.1016/0167-6423(94)00003-4
   Danvy O, 2000, THEOR COMPUT SCI, V248, P243, DOI 10.1016/S0304-3975(00)00054-2
   DANVY O, 1990, PROCEEDINGS OF THE 1990 ACM CONFERENCE ON LISP AND FUNCTIONAL PROGRAMMING, P151, DOI 10.1145/91556.91622
   DANVY O, 1992, P 1992 ACM C LISP FU, V5, P299
   DANVY O, 1997, NS9613 BRICS
   DANVY O, 1992, STANCS921426
   DANVY O, 2007, RS077 BRICS
   Danvy O, 2005, ELECTRON NOTES THEOR, V124, P79, DOI 10.1016/j.entcs.2005.01.007
   Danvy Olivier, 2004, ELECT NOTES THEORETI, V59.4
   Danvy Olivier., 1992, MATH STRUCT COMP SCI, V2, P361, DOI DOI 10.1017/S0960129500001535
   Danvy Olivier, 2001, Proceedings of the 3rd ACM SIGPLAN International Conference on Principles and Practice of Declarative Programming. PPDP'01, P162, DOI DOI 10.1145/773184.773202
   DEGROOTE P, 1994, LECT NOTES COMPUTER, V87
   FELLEISEN M, 1987, THESIS INDIANA U COM
   FELLEISEN M, 1989, PROGRAMMING LANGUAGE
   FISCHL MA, 1993, J ACQ IMMUN DEF SYND, V6, P259
   FLANAGAN C, 1993, SIGPLAN NOTICES, V28, P237, DOI 10.1145/173262.155113
   FRADET P, 1991, ACM T PROGR LANG SYS, V13, P21, DOI 10.1145/114005.102805
   Friedman D.P., 2001, ESSENTIALS PROGRAMMI, V2nd
   Griffin T., 1990, P 17 ANN ACM S PRINC, DOI 10.1145/96709.96714
   Harper R., 1993, LISP and Symbolic Computation, V6, P361, DOI 10.1007/BF01019463
   Hatcliff J., 1997, Journal of Functional Programming, V7, P303, DOI 10.1017/S0956796897002748
   HATCLIFF J, 1994, THESIS KANSAS STATE
   HATCLIFF J, 1994, P 21 ANN ACM S PRINC, P458
   KELSEY RA, 1989, 702 YAL U COMP SCI D
   Kranz David A., 1988, 632 YAL U COMP SCI D
   Kucan J., 1998, Higher-Order and Symbolic Computation, V11, P145, DOI 10.1023/A:1010012532463
   LAWALL J, 1993, P 20 ACM S PRINC PRO, P124
   LAWALL JL, 1994, THESIS INDIANA U COM
   MILLIKIN K, 2005, P 6 S TRENDS FUNCT P, P252
   MOGGI E, 1991, INFORM COMPUT, V93, P55, DOI 10.1016/0890-5401(91)90052-4
   Nielsen L. R., 2001, ELECT NOTES THEORETI, V45, P201
   NIELSEN LR, 2001, THESIS U AARHUS BRIC
   Ohori Atsushi, 2007, POPL 2007. The 34th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P143, DOI 10.1145/1190216.1190241
   Peyton Jones S. L., 1987, PRENTICE HALL INT SE
   Plotkin G. D., 1975, Theoretical Computer Science, V1, P125, DOI 10.1016/0304-3975(75)90017-1
   QUEINNEC C, 1996, LISP SMALL PIECES
   Reppy J., 2002, Higher-Order and Symbolic Computation, V15, P161, DOI 10.1023/A:1020839128338
   Reynolds J. C., 1998, Higher-Order and Symbolic Computation, V11, P355, DOI 10.1023/A:1010075320153
   Reynolds J. C., 1993, LISP and Symbolic Computation, V6, P233, DOI 10.1007/BF01019459
   Reynolds SJ, 2004, LANCET, V363, P1998, DOI 10.1016/S0140-6736(04)16419-2
   Sabry A., 1993, LISP and Symbolic Computation, V6, P289, DOI 10.1007/BF01019462
   Sabry A, 1997, ACM T PROGR LANG SYS, V19, P916, DOI 10.1145/267959.269968
   SABRY A, 1994, SIGPLAN NOTICES, V29, P1, DOI 10.1145/773473.178244
   SABRY A, 1994, 94242 RIC U COMPU SC
   SABRY A, 2001, 545 IND U COMP SCI D
   SHAN C, 2004, P 2004 ACM SIGPLAN W
   SHAN CC, 2004, HIGHER ORDER SYMBOLI, V20
   Shivers O., 1991, CMUCS91145
   STEELE GL, 1978, ALTR474
   Strachey C., 2000, Higher-Order and Symbolic Computation, V13, P135, DOI 10.1023/A:1010026413531
   THIELECKE H, 2004, P 4 ACM SIGPLAN WORK
   THIELECKE H, 1997, ECSLFSC97376
   Wadsworth Christopher P., 2000, HIGHER ORDER SYMBOLI, V13, P131
   WAND M, 1992, LECT NOTES COMPUT SC, V598, P294
   Wand Mitchell, 1985, LECT NOTES COMPUTER, P219, DOI 10.1007/3-540-15648-8_17
   XIAO Y, 2001, HIGHER ORDER SYMBOLI, V14, P387
   Zdancewic S., 2002, Higher-Order and Symbolic Computation, V15, P209, DOI 10.1023/A:1020843229247
NR 72
TC 7
Z9 8
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD NOV
PY 2007
VL 17
BP 793
EP 812
DI 10.1017/S0956796807006387
PN 6
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 239YW
UT WOS:000251555200005
OA Bronze
DA 2024-07-18
ER

PT J
AU Wakeling, D
AF Wakeling, David
TI Spreadsheet functional programming
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB The functional programming community has shown some interest in spreadsheets, but surprisingly no one seems to have considered making a standard spreadsheet, such as Excel, work with a standard functional programming language, such as Haskell. In this paper, we show one way that this can be done. Our hope is that by doing so, we might get spreadsheet programmers to give functional programming a try.
C1 Univ Gloucestershire, Sch Business, Cheltenham GL50 2RH, Glos, England.
C3 University of Gloucestershire
RP Wakeling, D (corresponding author), Univ Gloucestershire, Sch Business, Pk, Cheltenham GL50 2RH, Glos, England.
EM dwakeling@glos.ac.uk
CR Abraham R, 2004, 2004 IEEE SYMPOSIUM ON VISUAL LANGUAGES AND HUMAN CENTRIC COMPUTING: PROCEEDINGS, P165, DOI 10.1109/VLHCC.2004.29
   Ahmad Y, 2003, 18TH IEEE INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING, PROCEEDINGS, P174
   Antoniu T, 2004, PROC INT CONF SOFTW, P439, DOI 10.1109/ICSE.2004.1317466
   BACKUS J, 1978, COMMUN ACM, V21, P613, DOI 10.1145/359576.359579
   BULLEN S, 2003, EXCEL 2002 VBA PROGR
   Burnett M, 2001, J FUNCT PROGRAM, V11, P155, DOI 10.1017/S0956796800003828
   CASIMIR RJ, 1992, SIGPLAN NOTICES, V27, P10, DOI 10.1145/130981.130982
   Ceruzzi PaulE., 2000, HIST MODERN COMPUTIN
   DEHOON WAC, 1995, J FUNC PROGRAM, V3, P383
   Gear C., 1971, Numerical Initial Value Problems in Ordinary Differential Equations
   HODGKIN AL, 1990, B MATH BIOL, V52, P25, DOI 10.1007/BF02459568
   HUGHES J, 1989, COMPUT J, V32, P98, DOI 10.1093/comjnl/32.2.98
   JOENS SLP, 2003, P INT C FUNCT PROGR, P165
   JONES MP, 1994, YALEUDCSRR1030
   Jones SP, 2000, ACM SIGPLAN NOTICES, V35, P280, DOI 10.1145/357766.351267
   KAY A, 1984, SCI AM, V251, P52, DOI 10.1038/scientificamerican0984-52
   MALMSTROM J, 2004, THESIS MALARDALEN U
   *MICR CORP, 2006, EXC
   Turner D. A., 1982, Functional programming and its applications. An advanced course, P1
   VASS M, 2002, JIGCELL MODEL BUILDE
   Wadler P, 1998, ACM SIGPLAN NOTICES, V33, P23, DOI 10.1145/286385.286387
   WAKELING D, 2004, DEALING LIFE CELLS E
   WRAY SC, 1989, COMPUT J, V32, P142, DOI 10.1093/comjnl/32.2.142
NR 23
TC 13
Z9 16
U1 0
U2 1
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD JAN
PY 2007
VL 17
BP 131
EP 143
DI 10.1017/S0956796806006186
PN 1
PG 13
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 133MO
UT WOS:000244017200003
OA Bronze
DA 2024-07-18
ER

PT J
AU Weirich, S
AF Weirich, Stephanie
TI Type-safe run-time polytypic programming
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB Polytypic programming is a way of defining type-indexed operations, such as map, fold and zip, based on type information. Run-time polytypic programming allows that type information to be dynamically computed - this support is essential in modern programming languages that support separate compilation, first-class type abstraction, or polymorphic recursion. However, in previous work we defined run-time polytypic programming with a type-passing semantics. Although it is natural to define polytypic programs as operating over first-class types, such a semantics suffers from a number of drawbacks. This paper describes how to recast that work in a type-erasure semantics, where terms represent type information in a safe manner. The resulting language is simple and easy to implement - we present a prototype implementation of the necessary machinery as a small Haskell library.
C1 Univ Penn, Dept Comp & Informat Sci, Philadelphia, PA 19104 USA.
C3 University of Pennsylvania
RP Weirich, S (corresponding author), Univ Penn, Dept Comp & Informat Sci, 200 S 33rd St, Philadelphia, PA 19104 USA.
OI Weirich, Stephanie/0000-0002-6756-9168
CR Abadi M., 1995, Journal of Functional Programming, V5, P111, DOI 10.1017/S095679680000126X
   ABADI M, 1991, ACM T PROGR LANG SYS, V13, P237, DOI 10.1145/103135.103138
   [Anonymous], FPCA 95
   [Anonymous], POPL 96
   [Anonymous], 1971, P 2 SCAND LOG S N HO
   [Anonymous], 2003, Haskell 98 language and libraries: the revised report
   CHENEY J, 2002, P ACM SIGPLAN 2002 H
   Coquand Thierry., 1991, Logical Frameworks, P255, DOI DOI 10.1017/CBO9780511569807.011
   Crary K, 1999, ACM SIGPLAN NOTICES, V34, P233, DOI 10.1145/317765.317906
   Crary K, 2002, J FUNCT PROGRAM, V12, P567, DOI 10.1017/S0956796801004282
   DUBOIS C, 1995, 22 ACM SIGACT SIGPLA, P118
   FEGARAS L, 1996, 23 ACM SIGPLAN SIGAC, P284
   Girard J.-Y., 1972, PhD thesis
   HARPER R, 1995, 22 ACM S PRINC PROGR, P130
   Hinze R, 2000, LECT NOTES COMPUT SC, V1837, P2
   HINZE R, 2002, P 6 INT C MATH PROGR, P148
   JANSSON P, 1997, 24 ACM SIGPLAN SIGAC, P470
   Jay C. B., 1998, Journal of Functional Programming, V8, P573, DOI 10.1017/S0956796898003128
   LOH A, 2003, IN PRESS ACM SIGPLAN
   MORRISETT G, 1997, HIGHER ORDER OPERATI
   Pierce B.C., 1998, POPL, P252
   Reynolds J. C., 1983, Information Processing 83. Proceedings of the IFIP 9th World Computer Congress, P513
   RUEHR F, 1998, INF P WORKSH GEN PRO
   SAHA B, 2000, 3 ACM SIGPLAN WORKSH
   Schürmann C, 2001, THEOR COMPUT SCI, V266, P1, DOI 10.1016/S0304-3975(00)00418-7
   SHEARD T, 1993, 93018 CSE OR GRAD I
   STONE CA, 2000, 27 ACM S PRINC PROGR, P214
   TRIFONOV V, 2000, 5 ACM SIGPLAN INT C, P82
   WADLER P, 1989, 16 ANN ACM S PRINC P, P60
   WADLER P, 1989, FPCA 89 C FUNCT PROG
   WASHBURN G, 2003, ACM SIGPLAN INT C FU, P249
   Weirich S, 2001, LECT NOTES COMPUT SC, V2028, P92
   WEIRICH S, 2002, THESIS CORNELL U
   WEIRICH S, 2002, 11 EUR S PROGR ESOP, P98
NR 34
TC 3
Z9 3
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD NOV
PY 2006
VL 16
BP 681
EP 710
DI 10.1017/S0956796806005879
PN 6
PG 30
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 112KT
UT WOS:000242525400003
OA Bronze
DA 2024-07-18
ER

PT J
AU Erwig, M
   Abraham, R
   Kollmansberger, S
   Cooperstein, I
AF Erwig, Martin
   Abraham, Robin
   Kollmansberger, Steve
   Cooperstein, Irene
TI Gencel: a program generator for correct spreadsheets
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB A huge discrepancy between theory and practice exists in one popular application area of functional programming - spreadsheets. Although spreadsheets are the most frequently used (functional) programs, they fall short of the quality level that is expected of functional programs, which is evidenced by the fact that existing spreadsheets contain many errors, some of which have serious impacts. We have developed a template specification language that allows the definition of spreadsheet templates that describe possible spreadsheet evolutions. This language is based on a table calculus that formally captures the process of creating and modifying spreadsheets. We have developed a type system for this calculus that can prevent type, reference, and omission errors from occurring in spreadsheets. On the basis of the table calculus we have developed Gencel, a system for generating reliable spreadsheets. We have implemented a prototype version of Gencel as an extension of Excel.
C1 Oregon State Univ, Sch EECS, Corvallis, OR 97331 USA.
   Univ Houston, Dept CS, Houston, TX 77004 USA.
C3 Oregon State University; University of Houston System; University of
   Houston
RP Erwig, M (corresponding author), Oregon State Univ, Sch EECS, Corvallis, OR 97331 USA.
EM erwig@eecs.oregonstate.edu; abraharo@eecs.oregonstate.edu;
   kollmast@eecs.oregonstate.edu; Irene.Cooperstein@mail.uh.edu
OI Abraham, Robin/0000-0003-1915-8118
CR Abraham R, 2005, 2005 IEEE SYMPOSIUM ON VISUAL LANGUAGE AND HUMAN-CENTRIC COMPUTING, PROCEEDINGS, P37, DOI 10.1109/VLHCC.2005.42
   Abraham R, 2005, 2005 IEEE SYMPOSIUM ON VISUAL LANGUAGE AND HUMAN-CENTRIC COMPUTING, PROCEEDINGS, P189, DOI 10.1109/VLHCC.2005.70
   Abraham R, 2004, 2004 IEEE SYMPOSIUM ON VISUAL LANGUAGES AND HUMAN CENTRIC COMPUTING: PROCEEDINGS, P165, DOI 10.1109/VLHCC.2004.29
   Ahmad Y, 2003, 18TH IEEE INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING, PROCEEDINGS, P174
   [Anonymous], 2003, SOFTVIS 03, DOI DOI 10.1145/774833.774851
   [Anonymous], 2003, Haskell 98 language and libraries: the revised report
   Antoniu T, 2004, PROC INT CONF SOFTW, P439, DOI 10.1109/ICSE.2004.1317466
   BROWN PS, 1987, ACM T INFORM SYST, V5, P258, DOI 10.1145/27641.28058
   Burnett M, 2003, PROC INT CONF SOFTW, P93, DOI 10.1109/ICSE.2003.1201191
   Burnett M, 2002, IEEE 2002 SYMPOSIA ON HUMAN CENTRIC COMPUTING LANGUAGES AND ENVIRONMENTS, PROCEEDINGS, P140, DOI 10.1109/HCC.2002.1046366
   Burnett M, 2001, J FUNCT PROGRAM, V11, P155, DOI 10.1017/S0956796800003828
   Charniak E., 1996, Statistical language learning (language, speech, and communication), V1st
   De Hoon W. A. C. A. J., 1995, Journal of Functional Programming, V5, P383, DOI 10.1017/S0956796800001404
   DITLEA S, 1987, PERS COMPUT, V11, P60
   Erwig M, 2005, PROC INT CONF SOFTW, P136
   Erwig Martin., 2002, PADL 02 P 4 INT S PR, P173
   FISHER II, 2002, 24 IEEE INT C SOFTWA, P141
   GILMAN H, 1986, WALL STREET J, V207, P17
   Green TRG, 1996, J VISUAL LANG COMPUT, V7, P131, DOI 10.1006/jvlc.1996.0009
   Hayen R. L., 1989, Management Accounting, V70, P30
   HENDRY DG, 1994, INT J HUM-COMPUT ST, V40, P1033, DOI 10.1006/ijhc.1994.1047
   ISAKOWITZ T, 1995, ACM T INFORM SYST, V13, P1, DOI 10.1145/195705.195708
   JONES SLP, 2003, ACM INT C FUNCT PROG, P165
   KAY A, 1984, SCI AM, V251, P52, DOI 10.1038/scientificamerican0984-52
   LERCH JF, 1989, ACM C HUM FACT COMP, P121
   LEWIS C, 1987, 2 WORKSH EMP STUD PR, P248
   LISPER B, 2002, 14 INT WORKSH IMPL F, P206
   Mittermeir R, 2002, NINTH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P221, DOI 10.1109/WCRE.2002.1173080
   Norman D. A., 1986, Cognitive Engineering, P31, DOI [10.1201/b15703-3, DOI 10.1201/B15703]
   PANKO RP, 2000, SPREADSHEET ERRORS W
   PRABHAKARAO S, 2003, IEEE INT S HUM CENTR, P203
   RAJALINGHAM K, 2001, S EUR SPREADSH RISKS
   RONEN B, 1989, COMMUN ACM, V32, P84, DOI 10.1145/63238.63244
   Rothermel G, 2001, ACM T SOFTW ENG METH, V10, P110, DOI 10.1145/366378.366385
   Sajaniemi J, 2000, J VISUAL LANG COMPUT, V11, P49, DOI 10.1006/jvlc.1999.0142
   *US DEP HHS, 2003, A040202016
   *USDE, 2003, EDOIGA07C0009
   YODER AG, 1994, PROCEEDINGS OF THE 1994 INTERNATIONAL CONFERENCE ON COMPUTER LANGUAGES, P20, DOI 10.1109/ICCL.1994.288396
   2004, GHC
NR 39
TC 24
Z9 27
U1 0
U2 3
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD MAY
PY 2006
VL 16
BP 293
EP 325
DI 10.1017/S0956796805005794
PN 3
PG 33
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 052MS
UT WOS:000238238400004
OA Bronze
DA 2024-07-18
ER

PT J
AU Chen, CY
   Xi, HW
AF Chen, CY
   Xi, HW
TI Meta-programming through typeful code representation
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID NAMES
AB By allowing the programmer to write code that can generate code at run-time, meta-programming offers a powerful approach to program construction. For instance, meta-programming can often be employed to enhance program efficiency and facilitate the construction of generic programs. However, meta-programming, especially in an untyped setting, is notoriously error-prone. In this paper, we aim at making meta-programming less error-prone by providing a type system to facilitate the construction of correct meta-programs. We first introduce some code constructors for constructing typeful code representation in which program variables are represented in terms of de Bruijn indexes, and then formally demonstrate how such typeful code representation can be used to support meta-programming. With our approach, a particular interesting feature is that code becomes first-class values, which can be inspected as well as executed at run-time. The main contribution of the paper lies in the recognition and then the formalization of a novel approach to typed meta-programming that is practical, general and flexible.
C1 Boston Univ, Dept Comp Sci, Boston, MA 02215 USA.
C3 Boston University
RP Boston Univ, Dept Comp Sci, 111 Cummington St, Boston, MA 02215 USA.
EM chiyan@cs.bu.edu; hwxi@cs.bu.edu
CR [Anonymous], 1995, LISP SYMB COMPUT, DOI DOI 10.1007/BF01018827
   [Anonymous], 2004, P 2004 ACM SIGPLAN W
   [Anonymous], 1984, P ACM SIGPLAN SIGACT, DOI DOI 10.1145/800017.800542
   [Anonymous], 1997, The Definition of Standard ML
   [Anonymous], 1972, INDAGATIONES MATHEMA, DOI DOI 10.1016/1385-7258(72)90034-0
   Baars A. I., 2002, SIGPLAN Notices, V37, P157, DOI 10.1145/583852.581494
   CALCAGNO C, 2003, IN PRESS J FUCNT PRO
   Chambers C., 1989, PLDI '89, P146
   CHEN C, 2004, DISTRIBUTED METAPROG
   CHEN C, 2004, LNCS, V3057
   CHEN CY, 2003, PEPM 03, P20
   Church A., 1940, J. Symbolic Logic, V5, P56, DOI [10.2307/2266170, DOI 10.2307/2266170]
   Damas L., 1982, C REC 9 ANN ACM S PR, P207, DOI DOI 10.1145/582153.582176
   DANVY O, 2001, P 5 INT S FUNCT LOG, P343
   Davies R, 2001, J ACM, V48, P555, DOI 10.1145/382780.382785
   DAVIES R, 1996, S LOG COMP SCI LICS, P184
   Draves S., 1998, ACM COMPUTING SYRVEY, V30
   DYBVIG RK, 1992, 356 IND U
   ERSHOV AP, 1977, INFORM PROCESS LETT, V6, P38, DOI 10.1016/0020-0190(77)90078-3
   Futamura Y., 1971, Systems, Compurters, Controls, V25, P45
   Gluck R., 1997, LISP and Symbolic Computation, V10, P113, DOI 10.1023/A:1007763000430
   Hinze R, 2001, J FUNCT PROGRAM, V11, P493, DOI 10.1017/S095679680100404X
   Hongwei Xi, 2003, SIGPLAN Notices, V38, P224, DOI 10.1145/640128.604150
   JONES ND, 1985, LECT NOTES COMPUT SC, V202, P124
   JONES SP, 1999, HASKELL 98 NONSTRICT
   LEONE M, 1996, ACM SIGPLAN 96 C PRO, P137
   Massalin H, 1992, THESIS COLUMBIA U
   Moggi E, 1999, LECT NOTES COMPUT SC, V1576, P193
   NANEVSKI A, 2002, ICFP, P206
   PFENNING F, 1989, LECT NOTES COMPUT SC, V352, P345
   Pfenning F., 1988, PLDI'88: Proceedings of the ACM SIGPLAN 1988 conference on Programming Language design and Implementation', P199
   PIKE R, 1985, SOFTWARE PRACT EXPER, V15, P131, DOI 10.1002/spe.4380150203
   Pitts AM, 2003, INFORM COMPUT, V186, P165, DOI 10.1016/S0890-5401(03)00138-X
   Pitts AM, 2000, LECT NOTES COMPUT SC, V1837, P230
   SHEARD T, METAML
   SHEARD T, 2002, ACM SIGPLAN HASK WOR, P1
   Taha W., 1997, Proceedings of the ACM SIGPLAN Symposium on Partial Evaluation and Semantics-Based Program Manipulation, PEPM '97, P203, DOI 10.1145/258994.259019
   Taha W, 2000, THEOR COMPUT SCI, V248, P211, DOI 10.1016/S0304-3975(00)00053-0
   TAHA W, 2003, POPL 03, P26
   TAHA W, METAOCANL
   WRIGHT A, 1995, J LISP SYMBOLIC COMP, V8, P343
NR 41
TC 10
Z9 11
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD NOV
PY 2005
VL 15
BP 797
EP 835
DI 10.1017/S0956796805005617
PN 6
PG 39
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 980GY
UT WOS:000233003900001
OA Bronze
DA 2024-07-18
ER

PT J
AU Palsberg, J
   Wand, M
AF Palsberg, J
   Wand, M
TI CPS transformation of flow information
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB We consider the question of how a Continuation-Passing-Style (CPS) transformation changes the flow analysis of a program. We present an algorithm that takes the least solution to the flow constraints of a program and constructs in linear time the least solution to the flow constraints for the CPS-transformed program. Previous studies of this question used CPS transformations that had the effect of duplicating code, or of introducing flow sensitivity into the analysis. Our algorithm has the property that for a program point in the original program and the corresponding program point in the CPS-transformed program, the flow information is the same. By carefully avoiding both duplicated code and flow-sensitive analysis, we find that the most accurate analysis of the CPS-transformed program is neither better nor worse than the most accurate analysis of the original. Thus a compiler that needed flow information after CPS transformation could use the flow information from the original program to annotate some program points, and it could use our algorithm to find the rest of the flow information quickly, rather than having to analyze the CPS-transformed program.
C1 Purdue Univ, Dept Comp Sci, W Lafayette, IN 47907 USA.
   Northeastern Univ, Coll Comp Sci, Boston, MA 02115 USA.
C3 Purdue University System; Purdue University; Northeastern University
RP Palsberg, J (corresponding author), Purdue Univ, Dept Comp Sci, W Lafayette, IN 47907 USA.
RI Palsberg, Jens/JYO-6826-2024
OI Palsberg, Jens/0000-0003-4747-365X
CR [Anonymous], 1992, Compiling with Continuations
   DAMIAN D, 2000, P 5 ACM SIGPLAN INT, P209
   DAMIAN D, 2001, RS0140 BRICS U AARH
   Danvy O, 1996, ACM T PROGR LANG SYS, V18, P730, DOI 10.1145/236114.236119
   Danvy Olivier., 1992, MATH STRUCT COMP SCI, V2, P361, DOI DOI 10.1017/S0960129500001535
   HEINTZE N, 1995, LECT NOTES COMPUTER, V983, P189
   HEINTZE N, 1997, P ACM SIGPLAN C PROG, P261
   MUYLAERT J, 1993, P 1 IMP COLL DEP COM
   NIELSON F, 1982, ACTA INFORM, V18, P265, DOI 10.1007/BF00263194
   Palsberg J, 1998, ACM T PROGR LANG SYS, V20, P1251, DOI 10.1145/295656.295662
   PALSBERG J, 1995, ACM T PROGR LANG SYS, V17, P576, DOI 10.1145/210184.210187
   Palsberg J, 2001, J FUNCT PROGRAM, V11, P263, DOI 10.1017/S095679680100394X
   PALSBERG J, 1995, ACM T PROGR LANG SYS, V17, P47, DOI 10.1145/200994.201001
   PALSBERG J, 1998, P POPL 98 25 ANN SIG, P197
   PALSBERG J, 1995, LECT NOTES COMPUTER, V787, P276
   Palsberg J., 1994, OBJECT ORIENTED TYPE
   PALSBERG J, 1995, P POPL 95 22 ANN SIG, P367
   Plotkin G. D., 1975, Theoretical Computer Science, V1, P125, DOI 10.1016/0304-3975(75)90017-1
   SABRY A, 1994, P ACM SIGPLAN 1994 C, P1
   TANG YM, 1994, LECT NOTES COMPUTER, V789, P224
   Wand M, 2002, LECT NOTES COMPUT SC, V2305, P213
   WAND M, 1985, P 12 ANN ACM S PRINC, P1
   Wand Mitchell, 1985, LECT NOTES COMPUTER, P219, DOI 10.1007/3-540-15648-8_17
   WELLS JB, 1997, LECT NOTES COMPUTER, V1214
NR 24
TC 5
Z9 6
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 40 WEST 20TH ST, NEW YORK, NY 10011-4221 USA
SN 0956-7968
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD SEP
PY 2003
VL 13
BP 905
EP 923
DI 10.1017/S0956796802004513
PN 5
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 720RF
UT WOS:000185273200004
OA Bronze
DA 2024-07-18
ER

PT J
AU Danvy, O
AF Danvy, Olivier
TI Fold-unfold lemmas for reasoning about recursive programs using the Coq
   proof assistant
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB Fold-unfold lemmas complement the rewrite tactic in the Coq Proof Assistant to reason about recursive functions, be they defined locally or globally. Each of the structural cases gives rise to a fold-unfold lemma that equates a call to this function in that case with the corresponding case branch. As such, they are "boilerplate" and can be generated mechanically, though stating them by hand is a learning experience for a beginner, to say nothing about explaining them. Their proof is generic. Their use is precise (e.g., in terms with multiple calls) and they scale seamlessly (e.g., to continuation-passing style and to various patterns of recursion), be the reasoning equational or relational. In the author's experience, they prove effective in the classroom, considering the clarity of discourse in the subsequent term reports and oral exams, and beyond the classroom, considering their subsequent use when continuing to work with the Coq Proof Assistant. Fold-unfold lemmas also provide a measure of understanding as well as of control about what is cut short when one uses a shortcut, i.e., an automated simplification tactic. Since Version 8.0, the functional-induction plugin provides them for functions that are defined globally, i.e., recursive equations, and so does the Equations plugin now, both for global and for local declarations, a precious help for advanced users.
C1 [Danvy, Olivier] Natl Univ Singapore, Yale NUS Coll, Singapore, Singapore.
   [Danvy, Olivier] Natl Univ Singapore, Sch Comp, Singapore, Singapore.
C3 National University of Singapore; Yale NUS College; National University
   of Singapore
RP Danvy, O (corresponding author), Natl Univ Singapore, Yale NUS Coll, Singapore, Singapore.; Danvy, O (corresponding author), Natl Univ Singapore, Sch Comp, Singapore, Singapore.
EM danvy@acm.org
CR [Anonymous], 1974, Mathematical Theory of Computation
   [Anonymous], 1993, Partial Evaluation and Automatic Program Generation
   Bertot Y., 2004, TEXT THEORET COMP S
   Bertot Yves, 2006, arXiv
   Bird R., 1988, INTRO FUNCTIONAL PRO
   Boileau N, 1815, ART POETIQUE
   Burge WilliamH., 1975, RECURSIVE PROGRAMMIN
   BURSTALL RM, 1977, J ACM, V24, P44, DOI 10.1145/321992.321996
   Burstall Rod M., 1969, MACHINE INTELLIGENCE, V4, P17
   Chlipala A, 2013, Certified programming with dependent types
   Danvy O, 2005, FUND INFORM, V66, P397
   Danvy O, 2000, THEOR COMPUT SCI, V248, P243, DOI 10.1016/S0304-3975(00)00054-2
   Danvy O., 2019, IFL 19 P 31 S IMPLEM, P1
   Danvy O, 2011, LECT NOTES
   Danvy O, 2022, FUND INFORM, V185, P115, DOI 10.3233/FI-222106
   Danvy O, 2019, J FUNCT PROGRAM, V29, DOI 10.1017/S0956796819000042
   Gowers T., 2000, MATH FRONTIERS PERSP
   Grégoire B, 2002, ACM SIGPLAN NOTICES, V37, P235, DOI 10.1145/583852.581501
   JOHNSSON T, 1985, LECT NOTES COMPUT SC, V201, P190
   Nipkow T., 2002, ISABELLE HOL PROOF A, DOI DOI 10.1007/3-540-45949-9
   Pierce B.C., 2012, Software Foundations
   Raphaelson Samson, 1949, HUMAN NATURE PLAYWRI
   Rota Gian-Carlo, 1996, Indiscrete Thoughts
   Sozeau M, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341690
   Thompson S., 1995, INT COMPUTER SCI SER
   Thompson S., 2011, HASKELL CRAFT FUNCTI
NR 26
TC 2
Z9 2
U1 0
U2 2
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD SEP 29
PY 2022
VL 32
AR e13
DI 10.1017/S0956796822000107
PG 27
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 5A1JM
UT WOS:000862650600001
OA hybrid
DA 2024-07-18
ER

PT J
AU Affeldt, R
   Garrigue, J
   Nowak, D
   Saikawa, T
AF Affeldt, Reynald
   Garrigue, Jacques
   Nowak, David
   Saikawa, Takafumi
TI A trustful monad for axiomatic reasoning with probability and
   nondeterminism
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB The algebraic properties of the combination of probabilistic choice and nondeterministic choice have long been a research topic in program semantics. This paper explains a formalization in the Coq proof assistant of a monad equipped with both choices: the geometrically convex monad. This formalization has an immediate application: it provides a model for a monad that implements a nontrivial interface, which allows for proofs by equational reasoning using probabilistic and nondeterministic effects. We explain the technical choices we made to go from the literature to a complete Coq formalization, from which we identify reusable theories about mathematical structures such as convex spaces and concrete categories, and that we integrate in a framework for monadic equational reasoning.
C1 [Affeldt, Reynald] Natl Inst Adv Ind Sci & Technol, Digital Architecture Res Ctr, Tokyo, Japan.
   [Garrigue, Jacques; Saikawa, Takafumi] Nagoya Univ, Grad Sch Math, Nagoya, Aichi, Japan.
   [Nowak, David] Univ Lille, CNRS, Cent Lille, UMR 9189,CRIStAL, F-59000 Lille, France.
C3 National Institute of Advanced Industrial Science & Technology (AIST);
   Nagoya University; Centre National de la Recherche Scientifique (CNRS);
   Universite de Lille; Centrale Lille
RP Affeldt, R (corresponding author), Natl Inst Adv Ind Sci & Technol, Digital Architecture Res Ctr, Tokyo, Japan.
EM reynald.affeldt@aist.go.jp; garrigue@math.nagoya-u.ac.jp;
   tscompor@gmail.com
RI Affeldt, Reynald/M-5552-2016
OI Affeldt, Reynald/0000-0002-2327-953X
FU JSPS KAKENHI [18H03204]; JSPS-CNRS bilateral program "FoRmal tools for
   IoT sEcurity" [PRC2199]; Grants-in-Aid for Scientific Research
   [18H03204] Funding Source: KAKEN
FX We acknowledge the support of the JSPS KAKENHI Grant Number 18H03204 and
   the JSPS-CNRS bilateral program "FoRmal tools for IoT sEcurity"
   (PRC2199), and thank all the participants of these projects for fruitful
   discussions. We also thank Cyril Cohen and Shinya Katsumata for guidance
   about the formalization of monads, Kazunari Tanaka who contributed to
   the formalization of categories, Jeremy Gibbons and Joseph Tassarotti
   for their comments.
CR Affeldt Reynald, 2020, Intelligent Computer Mathematics. 13th International Conference, CICM 2020. Proceedings. Lecture Notes in Artificial Intelligence. Subseries of Lecture Notes in Computer Science (LNAI 12236), P23, DOI 10.1007/978-3-030-53518-6_2
   Affeldt R, 2019, LECT NOTES COMPUT SC, V11825, P226, DOI 10.1007/978-3-030-33636-3_9
   Affeldt R, 2018, J FORMALIZ REASON, V11, P43
   Affeldt R, 2014, J AUTOM REASONING, V53, P63, DOI 10.1007/s10817-013-9298-1
   Affeldt Reynald, 2020, Computer Software, V37, P79, DOI DOI 10.11309/JSSST.37.3_79
   Beaulieu, 2008, THESIS FACULTY GRADU
   Beck J., 1969, SEMINAR TRIPLES CATE, P119, DOI [10.1007/BFb0083084, DOI 10.1007/BFB0083084]
   Bergman George M., 2015, INVITATION GEN ALGEB, Vsecond, DOI DOI 10.1007/978-3-319-11478-1
   Bonchi F., 2017, LIPICS, V85
   Bonchi F, 2019, IEEE S LOG, DOI 10.1109/lics.2019.8785673
   Brady E, 2013, J FUNCT PROGRAM, V23, P552, DOI 10.1017/S095679681300018X
   Cheung K.-H., 2017, THESIS MERTON COLLEG
   Cock, 2014, THESIS SCHL COMP SCI
   Cohen C., 2020, LIPICS, V167
   Fric R, 2010, STUD LOGICA, V94, P215, DOI 10.1007/s11225-010-9232-z
   Fritz T., 2015, CONVEX SPACES DEFINI
   Garillot F, 2009, LECT NOTES COMPUT SC, V5674, P327, DOI 10.1007/978-3-642-03359-9_23
   Gibbons, 2016, POPL WORKSH PROBAB
   Gibbons J, 2012, P UTP 2012, P23
   Gibbons J, 2011, ICFP 11 - PROCEEDINGS OF THE 2011 ACM SIGPLAN: INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P2
   Goy A, 2020, IEEE S LOG, P454, DOI 10.1145/3373718.3394795
   Grayson D., 2014, UNIMATH A COMP CHECK
   Gross Jason, 2014, Interactive Theorem Proving. 5th International Conference, ITP 2014, Held as Part of the Vienna Summer of Logic, VSL 2014. Proceedings: LNCS 8558, P275, DOI 10.1007/978-3-319-08970-6_18
   Infotheo, 2021, COQ FORMALIZATION IN
   Jacobs B, 2010, IFIP ADV INF COMM TE, V323, P1
   Kaminski BL, 2016, LECT NOTES COMPUT SC, V9632, P364, DOI 10.1007/978-3-662-49498-1_15
   Keimel K, 2017, LOG METH COMPUT SCI, V13, DOI 10.23638/LMCS-13(1:2)2017
   Mac Lane S, 1998, GRAD TEXT M, V5
   Mahboubi A, 2013, LECT NOTES COMPUT SC, V7998, P19, DOI 10.1007/978-3-642-39634-2_5
   Mathematical Components Team, 2007, MATH COMP LIB
   McBride Conor, 1999, PhD thesis
   McIver Annabelle., 2005, MG COMP SCI
   Mislove M., 2000, CONCUR 2000 - Concurrency Theory. 11th International Conference. Proceedings (Lecture Notes in Computer Science Vol.1877), P350
   Mislove Michael W., 2003, Electronic Notes in Theoretical Computer Science, DOI DOI 10.1016/J
   Monae, 2021, MON EFF EQ REAS COQ
   Mu S.-C., 2019, TIIS19003 I INF SCI
   Pientka, 2016, LIPICS, V52
   Sakaguchi K., 2015, FINSET FINMAP LIB FI
   Stone M. H., 1949, ANN MAT PUR APPL, V29, P25, DOI [DOI 10.1007/BF02413910, 10.1007/BF02413910]
   Tassarotti J, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290377
   The Agda Team, 2020, AGDA USER MANUAL
   The Coq Development Team, 2021, COQ PROOF ASS REF MA
   The Coq Development Team, 2019, LOGIC COQ
   Tix R, 2009, ELECTRON NOTES THEOR, V222, P3, DOI 10.1016/j.entcs.2009.01.002
   Varacca D, 2006, MATH STRUCT COMP SCI, V16, P87, DOI 10.1017/S0960129505005074
   Vignudelli V, 2020, PRESENTING CONVEX SE
   Vignudelli V., 2020, MONADS QUANTITATIVE
   Vignudelli V., 2020, THEORY TRACES SYSTEM
   Wolff M., 1986, N HOLLAND MATH STUDI, V122, P79, DOI DOI 10.1016/S0304-0208(08)71950-9
   Zwart M, 2019, IEEE S LOG, DOI 10.1109/lics.2019.8785707
NR 50
TC 3
Z9 3
U1 0
U2 1
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD JUL 15
PY 2021
VL 31
AR e17
DI 10.1017/S0956796821000137
PG 38
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA TJ4SM
UT WOS:000673473300001
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Yang, YP
   Oliveira, BCDS
AF Yang, Yanpeng
   Oliveira, Bruno C. D. S.
TI Pure iso-type systems
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID DEPENDENT TYPES; OBJECT
AB Traditional designs for functional languages (such as Haskell or ML) have separate sorts of syntax for terms and types. In contrast, many dependently typed languages use a unified syntax that accounts for both terms and types. Unified syntax has some interesting advantages over separate syntax, including less duplication of concepts, and added expressiveness. However, integrating unrestricted general recursion in calculi with unified syntax is challenging when some level of type-level computation is present, since properties such as decidable type-checking are easily lost. This paper presents a family of calculi called pure iso-type systems (PITSs), which employs unified syntax, supports general recursion and preserves decidable type-checking. PITS is comparable in simplicity to pure type systems (PTSs), and is useful to serve as a foundation for functional languages that stand in-between traditional ML-like languages and fully blown dependently typed languages. In PITS, recursion and recursive types are completely unrestricted and type equality is simply based on alpha-equality, just like traditional ML-style languages. However, like most dependently typed languages, PITS uses unified syntax, naturally supporting many advanced type system features. Instead of implicit type conversion, PITS provides a generalization of iso-recursive types called iso-types. Iso-types replace the conversion rule typically used in dependently typed calculus and make every type-level computation explicit via cast operators. Iso-types avoid the complexity of explicit equality proofs employed in other approaches with casts. We study three variants of PITS that differ on the reduction strategy employed by the cast operators: call-by-name, call-by-value and parallel reduction. One key finding is that while using call-by-value or call-by-name reduction in casts loses some expressive power, it allows those variants of PITS to have simple and direct operational semantics and proofs. In contrast, the variant of PITS with parallel reduction retains the expressive power of PTS conversion, at the cost of a more complex metatheory.
C1 [Yang, Yanpeng; Oliveira, Bruno C. D. S.] Univ Hong Kong, Pokfulam, Hong Kong, Peoples R China.
C3 University of Hong Kong
RP Yang, YP (corresponding author), Univ Hong Kong, Pokfulam, Hong Kong, Peoples R China.
EM ypyang@cs.hku.hk; bruno@cs.hku.hk
RI dos Santos Oliveira, Bruno Cesar/I-7977-2013
FU Hong Kong Research Grant Council [17210617, 17258816]
FX We would like to thank the anonymous reviewers for their insightful and
   useful comments. This work has been sponsored by the Hong Kong Research
   Grant Council project numbers 17210617 and 17258816.
CR Accattoli B, 2016, LECT NOTES COMPUT SC, V10017, P206, DOI 10.1007/978-3-319-47958-3_12
   Adams R, 2006, J FUNCT PROGRAM, V16, P219, DOI 10.1017/S0956796805005770
   Altenkirch T, 2010, LECT NOTES COMPUT SC, V6009, P40, DOI 10.1007/978-3-642-12251-4_5
   Amin Nada, 2016, A List of Successes that can Change the World. Essays Dedicated to Philip Wadler on the Occasion of his 60th Birthday. LNCS 9600, P249, DOI 10.1007/978-3-319-30936-1_14
   Amin N, 2014, ACM SIGPLAN NOTICES, V49, P233, DOI [10.1145/2660193.2660216, 10.1145/2714064.2660216]
   Amin Nada, 2012, 19 INT WORKSH FDN OB
   [Anonymous], 1972, Ph. D. Dissertation
   [Anonymous], 2007, PRACTICAL PROGRAMMIN
   [Anonymous], 1992, Handbook of Logic in Computer Science
   [Anonymous], 2012, P 8 ACM SIGPLAN WORK, DOI [10.1145/2103786.2103795, DOI 10.1145/2103786.2103795]
   Aspinall D, 1996, IEEE S LOG, P86, DOI 10.1109/LICS.1996.561307
   Augustsson L., 1998, Proceedings of the third ACM SIGPLAN international conference on Functional programming, ICFP '98, P239
   Barendregt H., 1991, Journal of Functional Programming, V1, P125
   Bird R., 1998, Mathematics of Program Construction. 4th International Conference, MPC'98. Proceedings, P52, DOI 10.1007/BFb0054285
   Brady EdwinC., 2011, PLPV'11: Programming languages meets program verification, P43
   Bruce KB, 1999, INFORM COMPUT, V155, P108, DOI 10.1006/inco.1999.2829
   CARDELLI L, 1994, INFORM COMPUT, V109, P4, DOI 10.1006/inco.1994.1013
   Cardelli Luca., 1986, POLYMORPHIC LAMBDA C
   Casinghino C, 2014, ACM SIGPLAN NOTICES, V49, P33, DOI 10.1145/2535838.2535883
   Castagna G, 2001, INFORM COMPUT, V168, P1, DOI 10.1006/inco.2000.3008
   Chakravarty MMT, 2005, ACM SIGPLAN NOTICES, V40, P241, DOI 10.1145/1090189.1086397
   Cheney J., 2002, P 2002 ACM SIGPLAN W, P90, DOI DOI 10.1145/581690.581698
   Cheney J., 2003, Technical Report
   Coq Development Team, 2016, COQ PROOF ASS REF MA
   COQUAND T, 1988, INFORM COMPUT, V76, P95, DOI 10.1016/0890-5401(88)90005-3
   Crary K, 1999, ACM SIGPLAN NOTICES, V34, P50, DOI 10.1145/301631.301641
   Damas L., 1982, C REC 9 ANN ACM S PR, P207, DOI DOI 10.1145/582153.582176
   Eisenberg R., 2016, THESIS
   Eisenberg RA, 2016, LECT NOTES COMPUT SC, V9632, P229, DOI 10.1007/978-3-662-49498-1_10
   Eisenberg RA, 2014, ACM SIGPLAN NOTICES, V49, P671, DOI 10.1145/2535838.2535856
   Fegaras L., 1996, Conference Record of POPL '96: The 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P284, DOI 10.1145/237721.237792
   Geuvers H., 1995, Types for Proofs and Programs. International Workshop TYPES '94. Selected Papers, P14
   Gundry Adam, 2013, THESIS
   HINDLEY R, 1969, T AM MATH SOC, V146, P29, DOI 10.2307/1995158
   Hongwei Xi, 2003, SIGPLAN Notices, V38, P224, DOI 10.1145/640128.604150
   HUET GP, 1973, INFORM CONTROL, V22, P257, DOI 10.1016/S0019-9958(73)90301-X
   Hutchins DS, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P287, DOI 10.1145/1706299.1706334
   JONES JP, 1993, PROCEEDINGS : IEEE INTERNATIONAL CONFERENCE ON ROBOTICS AND AUTOMATION, VOLS 1-3, P52, DOI 10.1109/ROBOT.1993.291960
   Jones MP, 2000, LECT NOTES COMPUT SC, V1782, P230
   JONES SLP, 1997, TYP COMP WORKSH
   JONES SP, 2004, MSCIS0526 U PENNS
   JUTTING LSV, 1993, INFORM COMPUT, V105, P30, DOI 10.1006/inco.1993.1038
   Kimmell G., 2012, PROGRAMMING LANGUAGE, P15
   Marlow Simon, 2010, Haskell 2010 language report
   MILNER R, 1978, J COMPUT SYST SCI, V17, P348, DOI 10.1016/0022-0000(78)90014-4
   Mogensen T. AE., 1992, Journal of Functional Programming, V2, P345, DOI 10.1017/S0956796800000423
   Odersky M., 2004, Tech. Rep. IC/2004/64
   Paolini L, 1999, RAIRO-INF THEOR APPL, V33, P507, DOI 10.1051/ita:1999130
   PFENNING F, 1988, SIGPLAN NOTICES, V23, P199, DOI 10.1145/960116.54010
   Pierce B.C., 1994, J FUNCTIONAL PROGRAM, V4, P207
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Reynolds J. C., 1974, Programming Symposium, P408
   Schrijvers T, 2008, ICFP'08: PROCEEDINGS OF THE 2008 SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P51
   Siles V, 2012, J FUNCT PROGRAM, V22, P153, DOI 10.1017/S0956796812000044
   SJOBERG V, 2012, 4 WORKSH MATH STRUCT, P112
   Sjoberg Vilhelm, 2015, THESIS
   Sjöberg V, 2015, ACM SIGPLAN NOTICES, V50, P369, DOI 10.1145/2676726.2676974
   Stump A., 2008, PLPV 09, P49
   Sulzmann M, 2007, PROCEEDINGS OF THE TLDI 2007: 2007 ACM SIGPLAN INTERNATIONAL WORKSHOP ON TYPES IN LANGUAGES DESIGN AND IMPLEMENTATION, P53, DOI 10.1145/1190315.1190324
   Swamy N, 2011, ICFP 11 - PROCEEDINGS OF THE 2011 ACM SIGPLAN: INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P266
   Swierstra W, 2008, J FUNCT PROGRAM, V18, P423, DOI 10.1017/S0956796808006758
   van Doorn Floris, 2013, P 8 ACM SIGPLAN INT, P25
   Wadler P., 1995, Advanced Functional Programming. First International Spring School on Advanced Functional Programming Techniques. Tutorial Text, P24
   Weirich S, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110275
   Weirich S, 2013, ACM SIGPLAN NOTICES, V48, P275, DOI [10.1145/2544174.2500599, 10.1145/2500365.2500599]
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
   Yang Y., 2017, P ACM PROGRAM LANG
   Yang YP, 2016, LECT NOTES COMPUT SC, V10017, P251, DOI 10.1007/978-3-319-47958-3_14
NR 68
TC 3
Z9 3
U1 0
U2 2
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD SEP 17
PY 2019
VL 29
AR e14
DI 10.1017/S0956796819000108
PG 46
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA IY3RW
UT WOS:000486311400001
DA 2024-07-18
ER

PT J
AU Bird, RS
AF Bird, Richard S.
TI FUNCTIONAL PEARL <i>How to find a fake coin</i>
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
C1 [Bird, Richard S.] Univ Oxford, Dept Comp Sci, Wolfson Bldg,Pk Rd, Oxford OX1 3QD, England.
C3 University of Oxford
RP Bird, RS (corresponding author), Univ Oxford, Dept Comp Sci, Wolfson Bldg,Pk Rd, Oxford OX1 3QD, England.
EM bird@cs.ox.ac.uk
CR [Anonymous], CAN YOU SOLVE MY PRO
   Levitin Anany, 2011, Algorithmic Puzzles
NR 2
TC 0
Z9 0
U1 0
U2 3
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD APR 29
PY 2019
VL 29
AR e8
DI 10.1017/S0956796819000030
PG 9
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA HW1BR
UT WOS:000466417800001
DA 2024-07-18
ER

PT J
AU Abel, A
   Allais, G
   Hameer, A
   Pientka, B
   Momigliano, A
   Schäfer, S
   Stark, K
AF Abel, Andreas
   Allais, Guillaume
   Hameer, Aliya
   Pientka, Brigitte
   Momigliano, Alberto
   Schaefer, Steven
   Stark, Kathrin
TI POPLMark reloaded: Mechanizing proofs by logical relations
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID TYPED LAMBDA-CALCULUS; ORDER ABSTRACT SYNTAX; METATHEORY; FRAMEWORK;
   LANGUAGE; NORMALIZATION; FORMALIZATION; CHALLENGE; BINDERS; POWER
AB We propose a new collection of benchmark problems in mechanizing the metatheory of programming languages, in order to compare and push the state of the art of proof assistants. In particular, we focus on proofs using logical relations (LRs) and propose establishing strong normalization of a simply typed calculus with a proof by Kripke-style LRs as a benchmark. We give a modern view of this well-understood problem by formulating our LR on well-typed terms. Using this case study, we share some of the lessons learned tackling this problem in different dependently typed proof environments. In particular, we consider the mechanization in Beluga, a proof environment that supports higher-order abstract syntax encodings and contrast it to the development and strategies used in general-purpose proof assistants such as Coq and Agda. The goal of this paper is to engage the community in discussions on what support in proof environments is needed to truly bring mechanized metatheory to the masses and engage said community in the crafting of future benchmarks.
C1 [Abel, Andreas] Gothenburg Univ, Dept Comp Sci & Engn, Gothenburg, Sweden.
   [Allais, Guillaume] Radboud Univ Nijmegen, iCIS, Nijmegen, Netherlands.
   [Hameer, Aliya; Pientka, Brigitte] McGill Univ, Sch Comp Sci, Montreal, PQ, Canada.
   [Momigliano, Alberto] Univ Milan, Dept Comp Sci, Milan, Italy.
   [Schaefer, Steven; Stark, Kathrin] Saarland Univ, Saarland Informat Campus, Saarland, Germany.
C3 University of Gothenburg; Radboud University Nijmegen; McGill
   University; University of Milan
RP Abel, A (corresponding author), Gothenburg Univ, Dept Comp Sci & Engn, Gothenburg, Sweden.
EM andreas.abel@gu.se; gallais@cs.ru.nl; aliya.hameer@mail.mcgill.ca;
   bpientka@cs.mcgill.ca; momigliano@di.unimi.it;
   schaefer@ps.uni-saarland.de; kstark@ps.uni-saarland.de
OI MOMIGLIANO, ALBERTO/0000-0003-0942-4777; Allais,
   Guillaume/0000-0002-4091-657X
CR Abadi M., 1991, Journal of Functional Programming, V1, P375, DOI 10.1017/S0956796800000186
   Abbott M, 2005, FUND INFORM, V65, P1
   Abel Andreas, 2014, Programming Languages and Systems. 12th Asian Symposium (APLAS 2014), Proceedings: LNCS 8858, P140, DOI 10.1007/978-3-319-12736-1_8
   Abel A, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158111
   Abel A, 2013, ACM SIGPLAN NOTICES, V48, P27, DOI 10.1145/2480359.2429075
   Abel A, 2014, ELECTRON P THEOR COM, P51, DOI 10.4204/EPTCS.153.4
   Abel A, 2012, LOG METH COMPUT SCI, V8, DOI 10.2168/LMCS-8(1:29)2012
   Abel A, 2010, ELECTRON P THEOR COM, P14, DOI 10.4204/EPTCS.43.2
   Abel A, 2008, ELECTRON NOTES THEOR, V199, P3, DOI 10.1016/j.entcs.2007.11.009
   Adams R, 2006, LECT NOTES COMPUT SC, V3839, P1
   Ahmed A, 2013, OR PROGR LANG SUMM S
   Ahmed A, 2007, FUND INFORM, V77, P397
   ALLAIS G, 2018, P ACM PROGRAMMING LA, DOI DOI 10.1145/3236785
   Allais G, 2017, PROCEEDINGS OF THE 6TH ACM SIGPLAN CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS, CPP'17, P195, DOI 10.1145/3018610.3018613
   Altenkirch T, 2003, INT FED INFO PROC, V115, P1
   Altenkirch T., 1993, Typed Lambda Calculi and Applications. International Conference. TLCA '93, P13, DOI 10.1007/BFb0037095
   ALTENKIRCH T, 1995, LECT NOTES COMPUTER, V953, P182
   Altenkirch T, 1992, 92230 LFCS
   Altenkirch T, 2017, LOG METH COMPUT SCI, V13, DOI 10.23638/LMCS-13(4:1)2017
   Altenkirch T, 2016, ACM SIGPLAN NOTICES, V51, P18, DOI 10.1145/2914770.2837638
   Altenkirch T, 2014, J FORMALIZ REASON, V7, P1
   Altenkirch T, 2015, LOG METH COMPUT SCI, V11, DOI 10.2168/LMCS-11(1:3)2015
   Anand A, 2016, 5 INT C MATH SOFTW I
   [Anonymous], 1972, Ph. D. Dissertation
   [Anonymous], 2004, Ph.D. Dissertation.
   [Anonymous], 1989, Cambridge Tracts in Theoretical Computer Science
   [Anonymous], 1972, INDAGATIONES MATHEMA, DOI DOI 10.1016/1385-7258(72)90034-0
   Aydemir B.E., 2010, TECHNICAL REPORT
   Aydemir BE, 2005, LECT NOTES COMPUT SC, V3603, P50
   Bengtson J, 2016, J AUTOM REASONING, V56, P1, DOI 10.1007/s10817-015-9336-2
   Benke M., 2003, Nordic Journal of Computing, V10, P265
   Benton N, 2012, J AUTOM REASONING, V49, P141, DOI 10.1007/s10817-011-9219-0
   Berger U., 2006, Studia Logica, V82, P25, DOI 10.1007/s11225-006-6604-5
   Berghofer S., 2004, Types for Proofs and Programs. International Workshop, TYPES 2004. Revised Selected Papers (Lecture Notes in Computer Science Vol. 3839), P50
   Blanchette Jasmin Christian, 2017, Programming Languages and Systems. 26th European Symposium on Programming, ESOP 2017, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2017. Proceedings: LNCS 10201, P111, DOI 10.1007/978-3-662-54434-1_5
   Cave A., 2013, 8 ACM SIGPLAN INT WO, P15, DOI [DOI 10.1145/2503887.2503889, 10.1145/2503887.2503889]
   Cave A, 2018, MATH STRUCT COMP SCI, V28, P1606, DOI 10.1017/S0960129518000154
   Cave A, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P413
   Cave Andrew, 2015, EPTCS
   Cervesato I, 2002, INFORM COMPUT, V179, P19, DOI 10.1006/inco.2001.2951
   Chapman J, 2009, ELECTRON NOTES THEOR, V228, P21, DOI 10.1016/j.entcs.2008.12.114
   Chapman J, 2010, ACM SIGPLAN NOTICES, V45, P3, DOI 10.1145/1932681.1863547
   Charguéraud A, 2012, J AUTOM REASONING, V49, P363, DOI 10.1007/s10817-011-9225-2
   Cheney J., 2005, Proceedings of the 2005 workshop on Mechanized reasoning about languages with variable binding, P33, DOI DOI 10.1145/1088454.1088459
   Cheney J, 2017, THEOR PRACT LOG PROG, V17, P311, DOI 10.1017/S1471068417000035
   Chlipala A, 2008, ACM SIGPLAN NOTICES, V43, P143, DOI 10.1145/1411203.1411226
   Coquand C., 1993, INT WORKSHOP COMPUTE, P91, DOI DOI 10.1007/BFB0049326
   Crary Karl, 2005, ADV TOPICS TYPES PRO, P223
   CURIEN PL, 1992, LECT NOTES COMPUT SC, V629, P209
   Danielsson NA, 2007, LECT NOTES COMPUT SC, V4502, P93
   Despeyroux J., 1995, Typed Lambda Calculi and Applications. Second International Conference on Typed Lambda Calculi and Applications, TLCA '95. Proceedings, P124, DOI 10.1007/BFb0014049
   Dybjer P., 1994, Formal Aspects of Computing, V6, P440, DOI 10.1007/BF01211308
   Dybjer P, 1999, LECT NOTES COMPUT SC, V1581, P129
   Felty A, 2018, MATH STRUCT COMP SCI, V28, P1507, DOI 10.1017/S0960129517000093
   Felty A, 2012, J AUTOM REASONING, V48, P43, DOI 10.1007/s10817-010-9194-x
   Felty AP, 2015, J AUTOM REASONING, V55, P307, DOI 10.1007/s10817-015-9327-3
   Felty AP, 2009, PPDP'09: PROCEEDINGS OF THE 11TH INTERNATIONAL ACM SIGPLAN SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING, P83, DOI 10.1145/1599410.1599422
   Ferreira L, 2013, INT WORK CONTENT MUL, P1, DOI 10.1109/CBMI.2013.6576543
   Friedman Harvey, 1975, Logic colloquium, P22
   Gacek A, 2010, GIRARDS PROOF STRONG
   Geuvers H., 1995, Types for Proofs and Programs. International Workshop TYPES '94. Selected Papers, P14
   Goguen H, 2005, LECT NOTES COMPUT SC, V3441, P410
   Goguen H., 1995, Typed Lambda Calculi and Applications. Second International Conference on Typed Lambda Calculi and Applications, TLCA '95. Proceedings, P186, DOI 10.1007/BFb0014053
   Group Nominal Methods, 2009, STRONG NORMALIZATION
   Harper R., 2005, ACM Transactions on Computational Logic, V6, P61, DOI 10.1145/1042038.1042041
   HARPER R, 1993, J ACM, V40, P143, DOI 10.1145/138027.138060
   Hoare T, 2003, LECT NOTES COMPUT SC, V2789, P25
   Hofmann M., 1999, Proceedings. 14th Symposium on Logic in Computer Science (Cat. No. PR00158), P204, DOI 10.1109/LICS.1999.782616
   Hur CK, 2013, ACM SIGPLAN NOTICES, V48, P193, DOI 10.1145/2480359.2429093
   Jacob-Rao R., 3 INT C FORMAL STRUC, p19:1, DOI [10.4230/LIPIcs. FSCD.2018.19, DOI 10.4230/LIPICS.FSCD.2018.19]
   Joachimski F, 2003, ARCH MATH LOGIC, V42, P59, DOI 10.1007/s00153-002-0156-9
   Kaiser J, 2017, PROCEEDINGS OF THE WORKSHOP ON LOGICAL FRAMEWORKS AND META-LANGUAGES: THEORY AND PRACTICE (LFMTP), P10, DOI 10.1145/3130261.3130263
   Keuchel S, 2016, LECT NOTES COMPUT SC, V9632, P419, DOI 10.1007/978-3-662-49498-1_17
   Klein G, 2006, ACM T PROGR LANG SYS, V28, P619, DOI 10.1145/1146809.1146811
   Kumar R, 2014, ACM SIGPLAN NOTICES, V49, P179, DOI 10.1145/2535838.2535841
   Lee Daniel K., 2007, POPL 2007. The 34th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P173, DOI 10.1145/1190216.1190245
   Lee G, 2012, LECT NOTES COMPUT SC, V7211, P436, DOI 10.1007/978-3-642-28869-2_22
   Lenglet Serguei, 2018, P 7 ACM SIGPLAN INT, P252, DOI [10.1145/3167083, DOI 10.1145/3167083]
   Leroy X, 2009, COMMUN ACM, V52, P107, DOI 10.1145/1538788.1538814
   Licata DR, 2009, ACM SIGPLAN NOTICES, V44, P123, DOI 10.1145/1631687.1596571
   Mahmoud MY, 2019, J AUTOM REASONING, V63, P967, DOI 10.1007/s10817-019-09527-x
   MALCOLM G, 1990, SCI COMPUT PROGRAM, V14, P255, DOI 10.1016/0167-6423(90)90023-7
   Martin-Lf P., 1982, Stud. Logic Found. Math, V104, P153, DOI [DOI 10.1016/S0049-237X(09)70189-2, 10.1016/ S0049-237X(09)70189-2.]
   MITCHELL JC, 1991, ANN PURE APPL LOGIC, V51, P99, DOI 10.1016/0168-0072(91)90067-V
   Momigliano A., 2012, P 7 INT WORKSH LOG F, P33
   Momigliano A, 2019, MATH STRUCT COMP SCI, V29, P1309, DOI 10.1017/S0960129518000415
   Nanevski A, 2008, ACM T COMPUT LOG, V9, DOI 10.1145/1352582.1352591
   Narboux J, 2008, ELECTRON NOTES THEOR, V196, P3, DOI 10.1016/j.entcs.2007.09.014
   Norell U, 2009, LECT NOTES COMPUT SC, V5832, P230, DOI 10.1007/978-3-642-04652-0_5
   Pérez JA, 2014, INFORM COMPUT, V239, P254, DOI 10.1016/j.ic.2014.08.001
   Pickering M, 2016, ACM SIGPLAN NOTICES, V51, P80, DOI 10.1145/3241625.2976013
   Pientka B, 2005, J AUTOM REASONING, V34, P179, DOI 10.1007/s10817-005-6534-3
   Pientka B, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P371, DOI 10.1145/1328438.1328483
   Pientka B, 2007, LECT NOTES COMPUT SC, V4732, P246
   Pientka B, 2010, LECT NOTES ARTIF INT, V6173, P15
   Pierce BC, 2012, J AUTOM REASONING, V49, P301, DOI 10.1007/s10817-012-9254-5
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Plotkin Gordon, 1973, Lambda-definability and logical relations
   Pollack R., 1994, Types for Proofs and Programs. International Workshop TYPES '93. Selected Papers, P313
   Pouillard N, 2010, ACM SIGPLAN NOTICES, V45, P217, DOI 10.1145/1932681.1863575
   Poulsen CB, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158104
   Rasmussen A, 2013, IEEE INT CONF HIGH, P43, DOI 10.1109/HPSR.2013.6602288
   Rizkallah C, 2018, LECT NOTES COMPUT SC, V10895, P523, DOI 10.1007/978-3-319-94821-8_31
   Rossberg A, 2014, J FUNCT PROGRAM, V24, P529, DOI 10.1017/S0956796814000264
   Schäfer S, 2015, CPP'15: PROCEEDINGS OF THE 2015 ACM CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS, P67, DOI 10.1145/2676724.2693163
   Schürmann C, 2008, IEEE S LOG, P69, DOI 10.1109/LICS.2008.44
   Severi P, 1995, TECHNICAL REPORT 95
   Smolka G, 2014, 6 COQ WORKSH JUL 201
   Sturm S, 2018, THESIS
   TAIT WW, 1967, J SYMBOLIC LOGIC, V32, P198, DOI 10.2307/2271658
   Tiu A, 2010, ACM T COMPUT LOG, V11, DOI 10.1145/1656242.1656248
   Urban C, 2012, LOG METH COMPUT SCI, V8, DOI 10.2168/LMCS-8(2:14)2012
   Urban C, 2011, ACM T COMPUT LOG, V12, DOI 10.1145/1877714.1877721
   Wang YZ, 2013, PROCEEDINGS OF THE ASME 5TH ANNUAL DYNAMIC SYSTEMS AND CONTROL DIVISION CONFERENCE AND JSME 11TH MOTION AND VIBRATION CONFERENCE, DSCC 2012, VOL 1, P157
   WATKINS K, 2002, CMUCS02101
   Weirich S, 2011, ACM SIGPLAN NOTICES, V46, P333, DOI 10.1145/2034574.2034818
   Werner B., 1992, INT WORKSHOP TYPES P, P341
   Xi HW, 2004, ANN NY ACAD SCI, V3085, P394
NR 118
TC 14
Z9 16
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PY 2019
VL 29
AR e19
DI 10.1017/S0956796819000170
PG 43
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA JU4PL
UT WOS:000501659400001
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Abel, A
   Pientka, B
AF Abel, Andreas
   Pientka, Brigitte
TI Well-founded recursion with copatterns and sized types
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID TERMINATION; PRODUCTIVITY; DEFINITIONS
AB In this paper, we study strong normalization of a core language based on System F-omega which supports programming with finite and infinite structures. Finite data such as finite lists and trees is defined via constructors and manipulated via pattern matching, while infinite data such as streams and infinite trees is defined by observations and synthesized via copattern matching. Taking a type-based approach to strong normalization, we track size information about finite and infinite data in the type. We exploit the duality of pattern and copatterns to give a unifying semantic framework which allows us to elegantly and uniformly support both well-founded induction and coinduction by rewriting. The strong normalization proof is structured around Girard's reducibility candidates. As such, our system allows for non determinism and does not rely on coverage. Since System F-omega is general enough that it can be the target of compilation for the Calculus of Constructions, this work is a significant step towards representing observation-based infinite data in proof assistants such as Coq and Agda.
C1 [Abel, Andreas] Gothenburg Univ, Dept Comp Sci & Engn, S-41124 Gothenburg, Sweden.
   [Pientka, Brigitte] McGill Univ, Sch Comp Sci, Montreal, PQ, Canada.
C3 University of Gothenburg; McGill University
RP Abel, A (corresponding author), Gothenburg Univ, Dept Comp Sci & Engn, S-41124 Gothenburg, Sweden.; Pientka, B (corresponding author), McGill Univ, Sch Comp Sci, Montreal, PQ, Canada.
EM andreas.abel@gu.se; bpientka@cs.mcgill.ca
FU NSERC (National Science and Engineering Research Council Canada);
   Vetenskapsradet project Termination Certificates for Dependently-Typed
   Programs and Proofs via Refinement Types; Vetenskapsradet framework
   grant
FX Big thanks to the reviewers of a previous version of this paper who
   asked many insightful questions that lead to the present, reworked
   version. The first author thanks Andrea Vezzosi for many inspiring
   discussions on sized types that improved their exposition in this paper.
   He also acknowledges support by Vetenskapsradet project Termination
   Certificates for Dependently-Typed Programs and Proofs via Refinement
   Types and a Vetenskapsradet framework grant to the ProgLog group
   (Thierry Coquand et al.) of the Department of Computer Science and
   Engineering at Chalmers and Gothenburg University The second author
   acknowledges support by NSERC (National Science and Engineering Research
   Council Canada).
CR Abel A, 2006, THESIS LUDWIG MAXIMI
   Abel A, 2008, MATH STRUCT COMP SCI, V18, P797, DOI 10.1017/S0960129508006853
   Abel A, 2013, ACM SIGPLAN NOTICES, V48, P27, DOI 10.1145/2480359.2429075
   Abel A, 2012, ELECTRON P THEOR COM, P1, DOI 10.4204/EPTCS.77.1
   Abel A, 2008, LOG METH COMPUT SCI, V4, DOI 10.2168/LMCS-4(2:3)2008
   AgdaTeam, 2015, THE AGD WIK
   Altenkirch T., 2012, EPIC SERIES COMPUT S, V5, P101
   Amadio RM, 1998, LECT NOTES COMPUT SC, V1378, P48, DOI 10.1007/BFb0053541
   [Anonymous], 1989, Cambridge Tracts in Theoretical Computer Science
   Barthe G, 2005, LECT NOTES COMPUT SC, V3461, P71
   Barthe G, 2004, MATH STRUCT COMP SCI, V14, P97, DOI 10.1017/S0960129503004122
   Barthe G, 2008, LECT NOTES COMPUT SC, V5213, P493, DOI 10.1007/978-3-540-87531-4_35
   Blanqui F, 2004, LECT NOTES COMPUT SC, V3091, P24
   Blanqui F, 2006, LECT NOTES ARTIF INT, V4246, P105
   Bove A., 2010, ELECT P THEOR COMP S, V43
   Coquand T., 1994, Types for Proofs and Programs. International Workshop TYPES '93. Selected Papers, P62
   Dybjer P, 2000, J SYMBOLIC LOGIC, V65, P525, DOI 10.2307/2586554
   Gimenez Eduardo, 1996, Ph. D. Dissertation
   Hancock P, 2009, LOG METH COMPUT SCI, V5, DOI 10.2168/LMCS-5(3:9)2009
   Hongwei Xi, 2002, Higher-Order and Symbolic Computation, V15, P91, DOI 10.1023/A:1019916231463
   Hughes J., 1996, Conference Record of POPL '96: The 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P410, DOI 10.1145/237721.240882
   INRIA, 2012, COQ PROOF ASS REF MA
   Jones G., 1993, TECHNICAL REPORT
   Mendler N. P., 1987, Proceedings of the Symposium on Logic in Computer Science (Cat. No.87CH2464-6), P30
   Oury N, 2008, COMMUNICATION
   Pareto Lars, 2000, Ph. D. Dissertation
   Reihl F., 2013, THESIS LUDWIG MAXIMI
   Sacchini J. L., 2011, THESIS INRIA SOPHIA
   Sacchini JL, 2013, IEEE S LOG, P233, DOI 10.1109/LICS.2013.29
   SIJTSMA BA, 1989, ACM T PROGR LANG SYS, V11, P633, DOI 10.1145/69558.69563
   Sprenger C, 2003, LECT NOTES COMPUT SC, V2620, P425
   STEFFEN M, 1998, THESIS U ERLANGEN
   Taylor P, 1996, J SYMBOLIC LOGIC, V61, P705, DOI 10.2307/2275781
   Vouillon J, 2004, ACM SIGPLAN NOTICES, V39, P52, DOI 10.1145/982962.964006
   Watkins Kevin, 2003, TECHNICAL REPORT
NR 35
TC 27
Z9 28
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PY 2016
VL 26
AR e2
DI 10.1017/S0956796816000022
PG 61
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DH7WQ
UT WOS:000373005100002
OA Bronze
DA 2024-07-18
ER

PT J
AU Inoue, J
   Taha, W
AF Inoue, Jun
   Taha, Walid
TI Reasoning about multi-stage programs
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID LAMBDA-CALCULUS; ABSTRACTION
AB We settle three basic questions that naturally arise when verifying code generators written in multi-stage functional programming languages. First, does adding staging to a language compromise any equalities that hold in the base language? Unfortunately it does, and more care is needed to reason about terms with free variables. Second, staging annotations, as the name "annotations" suggests, are often thought to be orthogonal to the behavior of a program, but when is this formally guaranteed to be true? We give termination conditions that characterize when this guarantee holds. Finally, do multi-stage languages satisfy useful, standard extensional properties, for example, that functions agreeing on all arguments are equivalent? We provide a sound and complete notion of applicative bisimulation, which establishes such properties or, in principle, any valid program equivalence. These results yield important insights into staging and allow us to prove the correctness of quite complicated multi-stage programs.
C1 [Inoue, Jun] Natl Inst Adv Ind Sci & Technol, Ikeda, Osaka, Japan.
   [Taha, Walid] Halmstad Univ, Halmstad, Halland, Sweden.
C3 National Institute of Advanced Industrial Science & Technology (AIST);
   Halmstad University
RP Inoue, J (corresponding author), Natl Inst Adv Ind Sci & Technol, Ikeda, Osaka, Japan.
EM jun.inoue@aist.go.jp; walid.taha@hh.se
FU NSF [CCF 0747431, CPS 1136099]; Halmstad University
FX This work was supported by NSF CCF 0747431 award entitled "Multi-stage
   programming for object-oriented languages", NSF CSR/EHS 0720857 award
   entitled "Building physically safe embedded systems", NSF CPS 1136099
   award entitled "A CPS Approach to Robot Design", and Halmstad
   University.
CR Abramsky S., 1990, LAZY LAMBDA CALCULUS, P65
   [Anonymous], 1963, Studies in Logic and the Foundations of Mathematics, DOI DOI 10.1016/S0049-237X(08)72018-4
   Arbiser A, 2006, LECT NOTES COMPUT SC, V4098, P181
   Aydemir B, 2008, ACM SIGPLAN NOTICES, V43, P3, DOI 10.1145/1328897.1328443
   Barendregt H, 1984, STUDIES LOGIC FDN MA
   Benaissa Z.E.A., 1999, FED LOG C FLOC SAT W
   Berger M, 2015, LOG METH COMPUT SCI, V11, DOI 10.2168/LMCS-11(1:5)2015
   Bondorf A., 1992, Proceedings of the 1992 ACM Conference on Lisp and Functional Programming, P1, DOI 10.1145/141471.141483
   Brady Edwin., 2006, GPCE 06, P111
   Carette J, 2011, SCI COMPUT PROGRAM, V76, P349, DOI 10.1016/j.scico.2008.09.008
   Carette J, 2009, J FUNCT PROGRAM, V19, P509, DOI 10.1017/S0956796809007205
   Choi W, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P81, DOI 10.1145/1926385.1926397
   Cohen A, 2006, SCI COMPUT PROGRAM, V62, P25, DOI 10.1016/j.scico.2005.10.013
   Dybvig R. K., 1992, TECHNICAL REPORTS
   Gabbay M. J., 2002, Formal Aspects of Computing, V13, P341, DOI 10.1007/s001650200016
   Gordon AD, 1999, THEOR COMPUT SCI, V228, P5, DOI 10.1016/S0304-3975(98)00353-3
   Heizmann M, 2010, LECT NOTES COMPUT SC, V6337, P22, DOI 10.1007/978-3-642-15769-1_4
   Herrmann CA, 2006, SCI COMPUT PROGRAM, V62, P47, DOI 10.1016/j.scico.2006.02.002
   Howe DJ, 1996, INFORM COMPUT, V124, P103, DOI 10.1006/inco.1996.0008
   Inoue J., 2012, THESIS
   Inoue J, 2012, LECT NOTES COMPUT SC, V7211, P357, DOI 10.1007/978-3-642-28869-2_18
   Intrigila B, 2009, LOG METH COMPUT SCI, V5, DOI 10.2168/LMCS-5(2:6)2009
   Jim T, 1996, SIAM J COMPUT, V25, P663, DOI 10.1137/S0097539791224212
   Kameyama Y, 2015, SCI COMPUT PROGRAM, V112, P120, DOI 10.1016/j.scico.2015.08.007
   Kameyama Y, 2011, J FUNCT PROGRAM, V21, P617, DOI 10.1017/S0956796811000256
   Kim LS, 2006, ACM SIGPLAN NOTICES, V41, P257, DOI 10.1145/1111320.1111060
   Kiselyov O, 2005, LECT NOTES COMPUT SC, V3605, P488
   Koutavas V, 2006, ACM SIGPLAN NOTICES, V41, P141, DOI 10.1145/1111320.1111050
   Licata DR, 2008, IEEE S LOG, P241, DOI 10.1109/LICS.2008.48
   Mason I., 1991, Journal of Functional Programming, V1, P287, DOI 10.1017/S0956796800000125
   McCusker G., 2003, ELECT NOTES THEOR CO, V83, P169
   Milner R., 1977, Theoretical Computer Science, V4, P1, DOI 10.1016/0304-3975(77)90053-6
   Milner R., 1989, Communication and concurrency
   MITCHELL JC, 1993, SCI COMPUT PROGRAM, V21, P141, DOI 10.1016/0167-6423(93)90004-9
   MULLER R, 1992, ACM T PROGR LANG SYS, V14, P589, DOI 10.1145/133233.133254
   Nanevski A, 2008, ACM T COMPUT LOG, V9, DOI 10.1145/1352582.1352591
   Pitts A.M., 1998, HIGHER ORDER OPERATI, P275
   Plotkin G. D., 1975, Theoretical Computer Science, V1, P125, DOI 10.1016/0304-3975(75)90017-1
   PLOTKIN GD, 1974, J SYMBOLIC LOGIC, V39, P313, DOI 10.2307/2272645
   Pouillard N, 2010, ICFP 2010: PROCEEDINGS OF THE 2010 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P217
   Pous Damien, 2011, Advanced Topics in Bisimulation and Coinduction, P233, DOI DOI 10.1017/CBO9780511792588.007
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Riecke J. G., 1994, Theoretical Aspects of Computer Software. International Symposium TACS '94 Proceedings, P76
   Rompf T, 2012, COMMUN ACM, V55, P121, DOI 10.1145/2184319.2184345
   Sangiorgi D, 2011, ACM T PROGR LANG SYS, V33, DOI 10.1145/1889997.1890002
   Swadi K., 2006, PEPM, V06
   Taha W, 2003, ACM SIGPLAN NOTICES, V38, P26, DOI 10.1145/640128.604134
   Taha W, 2008, LECT NOTES COMPUT SC, V5235, P260, DOI 10.1007/978-3-540-88643-3_6
   Taha Walid, 1999, THESIS
   TAKAHASHI M, 1995, INFORM COMPUT, V118, P120, DOI 10.1006/inco.1995.1057
   Tsukada T., 2010, LOGICAL METHODS COMP, V6, P1
   Westbrook E, 2010, PLDI '10: PROCEEDINGS OF THE 2010 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P400, DOI 10.1145/1806596.1806642
   Yang Z., 2000, RS0046 BRICS
   Yuse Y., 2006, PPDP 2006. Proceedings of the Eighth ACM SIGPLAN Symposium on Principles and Practice of Declarative Programming, P201, DOI 10.1145/1140335.1140360
NR 54
TC 2
Z9 2
U1 0
U2 1
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PY 2016
VL 26
BP 1
EP 53
DI 10.1017/S0956796816000253
PG 53
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA EC4JG
UT WOS:000388093800001
OA Green Submitted, hybrid
DA 2024-07-18
ER

PT J
AU Stewart, R
   Maier, P
   Trinder, P
AF Stewart, Robert
   Maier, Patrick
   Trinder, Phil
TI Transparent fault tolerance for scalable functional computation
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB Reliability is set to become a major concern on emergent large-scale architectures. While there are many parallel languages, and indeed many parallel functional languages, very few address reliability. The notable exception is the widely emulated Erlang distributed actor model that provides explicit supervision and recovery of actors with isolated state. We investigate scalable transparent fault tolerant functional computation with automatic supervision and recovery of tasks. We do so by developing HdpH-RS, a variant of the Haskell distributed parallel Haskell (HdpH) DSL with Reliable Scheduling. Extending the distributed work stealing protocol of HdpH for task supervision and recovery is challenging. To eliminate elusive concurrency bugs, we validate the HdpH-RS work stealing protocol using the SPIN model checker. HdpH-RS differs from the actor model in that its principal entities are tasks, i.e. independent stateless computations, rather than isolated stateful actors. Thanks to statelessness, fault recovery can be performed automatically and entirely hidden in the HdpH-RS runtime system. Statelessness is also key for proving a crucial property of the semantics of HdpH-RS: fault recovery does not change the result of the program, akin to deterministic parallelism. HdpH-RS provides a simple distributed fork/join-style programming model, with minimal exposure of fault tolerance at the language level, and a library of higher level abstractions such as algorithmic skeletons. In fact, the HdpH-RS DSL is exactly the same as the HdpH DSL, hence users can opt in or out of fault tolerant execution without any refactoring. Computations in HdpH-RS are always as reliable as the root node, no matter how many nodes and cores are actually used. We benchmark HdpH-RS on conventional clusters and an High Performance Computing platform: all benchmarks survive Chaos Monkey random fault injection; the system scales well e.g. up to 1,400 cores on the High Performance Computing; reliability and recovery overheads are consistently low even at scale.
C1 [Stewart, Robert] Heriot Watt Univ, Math & Comp Sci, Edinburgh, Midlothian, Scotland.
   [Maier, Patrick; Trinder, Phil] Sch Comp Sci, Glasgow, Lanark, Scotland.
C3 Heriot Watt University
RP Stewart, R (corresponding author), Heriot Watt Univ, Math & Comp Sci, Edinburgh, Midlothian, Scotland.
EM R.Stewart@hw.ac.uk; Patrick.Maier@glasgow.ac.uk;
   Phil.Trinder@glasgow.ac.uk
OI Stewart, Robert/0000-0003-0365-693X
FU EPSRC [EP/G05553X, EP/L000687/1, EP/K009931/1]; EU grant RELEASE
   [FP7-ICT 287510]; EPSRC [EP/G05553X/1, EP/K009931/1, EP/L000687/1]
   Funding Source: UKRI
FX The work was funded by EPSRC grants HPC-GAP (EP/G05553X), AJITPar
   (EP/L000687/1) and Rathlin (EP/K009931/1), and EU grant RELEASE (FP7-ICT
   287510). The authors thank Blair Archibald and the anonymous referees
   for helpful feedback.
CR Aljabri M., 2014, P IMPL APPL FUNCT LA, P37
   Armstrong J, 2010, COMMUN ACM, V53, P68, DOI 10.1145/1810891.1810910
   Barroso Luiz Andr., 2013, The Datacenter as a Computer: An Introduction to the Design of Warehouse-Scale Machines, V2nd
   Boije J., 2009, DISTRIBUTED MANDELBR
   Borwein P, 2008, MATH COMPUT, V77, P1681, DOI 10.1090/S0025-5718-08-02036-X
   Cappello F, 2009, INT J HIGH PERFORM C, V23, P212, DOI 10.1177/1094342009106189
   CHANDY KM, 1985, ACM T COMPUT SYST, V3, P63, DOI 10.1145/214451.214456
   Chechina N, 2016, J PARALLEL DISTR COM, V90-91, P22, DOI 10.1016/j.jpdc.2016.01.002
   Cleary S., 2009, DET HALF OPEN DROPPE
   Cole M. I., 1988, THESIS U EDINBURGH
   Dean J, 2004, USENIX ASSOCIATION PROCEEDINGS OF THE SIXTH SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION (OSDE '04), P137
   Dinu F., 2011, P 6 INT WORKSH NETW
   Edinburgh Parallel Computing Center (EPCC), 2008, HECTOR NAT UK SUP CO
   Elnozahy EN, 2002, ACM COMPUT SURV, V34, P375, DOI 10.1145/568522.568525
   Epstein J, 2011, HASKELL 11: PROCEEDINGS OF THE 2011 ACM SIGPLAN HASKELL SYMPOSIUM, P118
   Gupta M.K., 2012, Akka essentials
   HALSTEAD RH, 1985, ACM T PROGR LANG SYS, V7, P501, DOI 10.1145/4472.4478
   Hammond K, 2007, LECT NOTES COMPUT SC, V4641, P457
   Harris Tim., 2005, Proceedings of the 2005 ACM SIGPLAN Workshop on Haskell, Haskell '05, P49
   Herington D., 2006, HASKELL LIB HUNIT PA
   Hoff T., 2010, NETFLIX CONTINUALLY
   Holzmann GJ, 2004, The SPIN model checker: primer and reference manual, V1003
   John Annu, 2013, Model Checking Software. 20th International Symposium, SPIN 2013. Proceedings, P209, DOI 10.1007/978-3-642-39176-7_14
   Kuper L, 2014, ACM SIGPLAN NOTICES, V49, P257, DOI 10.1145/2535838.2535842
   LAMPORT L, 1978, COMMUN ACM, V21, P558, DOI 10.1145/359545.359563
   Litvinova A., 2010, P 9 IASTED INT C PAR
   Loogen R, 2005, J FUNCT PROGRAM, V15, P431, DOI 10.1017/S0956796805005526
   M M., 2003, J COMPUTING SCI COLL, V18, P268
   Maier P, 2014, COMPUT LANG SYST STR, V40, P19, DOI 10.1016/j.cl.2014.03.001
   Maier Patrick, 2012, Implementation and Application of Functional Languages. 23rd International Symposium, IFL 2011. Revised Selected Papers: LNCS 7257, P35, DOI 10.1007/978-3-642-34407-7_3
   Maier P., 2014, LECT NOTES COMPUTER, V8632, P19
   Maier P, 2014, ACM SIGPLAN NOTICES, V49, P65, DOI [10.1145/2633357.2633363, 10.1145/2775050.2633363]
   Marlow S., 2013, SOURCE CODE MONAD PA
   Marlow S, 2011, HASKELL 11: PROCEEDINGS OF THE 2011 ACM SIGPLAN HASKELL SYMPOSIUM, P71
   Marlow S, 2009, ICFP'09: PROCEEDINGS OF THE 2009 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P65
   Mattsson H, 1999, LECT NOTES COMPUT SC, V1551, P152
   MICHIE D, 1968, NATURE, V218, P19, DOI 10.1038/218019a0
   Peyton Jones S., 2002, ENG THEORIES SOFTWAR, P47
   Pnueli A., 1977, 18th Annual Symposium on Foundations of Computer Science, P46, DOI 10.1109/SFCS.1977.32
   Postel J., 1980, User datagram protocol
   Prior A. N., 1957, Time and Modality
   Ramalingam G, 2013, ACM SIGPLAN NOTICES, V48, P249, DOI 10.1145/2480359.2429100
   RIVIN I, 1994, AM MATH MON, V101, P629, DOI 10.2307/2974691
   Sangtae Ha, 2008, Operating Systems Review, V42, P64, DOI 10.1145/1400097.1400105
   Scholz SB, 2003, J FUNCT PROGRAM, V13, P1005, DOI 10.1017/S0956796802004458
   Schroeder B, 2007, J PHYS CONF SER, V78, DOI 10.1088/1742-6596/78/1/012022
   Scott J., 2009, TECHNICAL REPORT
   Stewart R., 2013, HDPH RS SOURCE CODE
   Stewart R., 2015, OPEN ACCESS DATASET, DOI 10.17861/7925c541-42d9-4ded-9a01-5ac652d51353
   Stewart R., 2013, PROMELA ABSTRACTION
   Stewart Robert, 2013, THESIS HERIOT WATT U
   Trinder PW, 1996, ACM SIGPLAN NOTICES, V31, P79, DOI 10.1145/249069.231392
   White T., 2012, HADOOP DEFINITIVE GU
   Xu C., 1997, Load Balancing in Parallel Computers: Theory and Practice
NR 54
TC 5
Z9 4
U1 0
U2 5
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PY 2016
VL 26
BP 1
EP 42
DI 10.1017/S095679681600006X
PG 42
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DH7VI
UT WOS:000373001500001
OA Green Accepted
DA 2024-07-18
ER

PT J
AU Swierstra, W
AF Swierstra, Wouter
TI Sorted Verifying the Problem of the Dutch National Flag in Agda
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
RP Swierstra, W (corresponding author), Heijendaalseweg 135, NL-6525 AJ Nijmegen, Netherlands.
EM w.swierstra@cs.ru.nl
CR [Anonymous], 2003, Haskell 98 language and libraries: the revised report
   Bove A, 2005, MATH STRUCT COMP SCI, V15, P671, DOI 10.1017/S0960129505004822
   Bove A, 2009, LECT NOTES COMPUT SC, V5520, P57, DOI 10.1007/978-3-642-03153-3_2
   Brady E., 2011, P 2011 ACM SIGPLAN W
   Dijkstra E. W., 1976, A Discipline of Pro-gramming
   McBride C, 2004, LECT NOTES COMPUT SC, V3622, P130
   McBride C, 2004, J FUNCT PROGRAM, V14, P69, DOI 10.1017/S0956796803004829
   Nordstrom B., 1990, PROGRAMMING MARTINLO
   Norell U, 2009, LECT NOTES COMPUT SC, V5832, P230, DOI 10.1007/978-3-642-04652-0_5
   Norell Ulf, 2007, Towards a practical programming language based on dependent type theory
   OURY N, 2008, P 13 ACM S PRINC PRO, P39
   SWIERSTRA W, 2008, THESIS U NOTTINGHAM
NR 12
TC 0
Z9 0
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD NOV
PY 2011
VL 21
BP 573
EP 583
DI 10.1017/S0956796811000207
PN 6
PG 11
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 868UQ
UT WOS:000298551800002
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Hirai, Y
   Yamamoto, K
AF Hirai, Yoichi
   Yamamoto, Kazuhiko
TI Balancing weight-balanced trees
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB A weight-balanced tree (WBT) is a binary search tree, whose balance is based on the sizes of the subtrees in each node. Although purely functional implementations on a variant WBT algorithm are widely used in functional programming languages, many existing implementations do not maintain balance after deletion in some cases. The difficulty lies in choosing a valid pair of rotation parameters: one for standard balance and the other for choosing single or double rotation. This paper identifies the exact valid range of the rotation parameters for insertion and deletion in the original WBT algorithm where one and only one integer solution exists. Soundness of the range is proved using a proof assistant Coq. Completeness is proved using effective algorithms generating counterexample trees. For two specific parameter pairs, we also proved in Coq that set operations also maintain balance. Since the difference between the original WBT and the variant WBT is small, it is easy to change the existing buggy implementations based on the variant WBT to the certified original WBT with a rational solution.
C1 [Hirai, Yoichi] Univ Tokyo, JSPS, Tokyo 1138654, Japan.
C3 University of Tokyo; Japan Society for the Promotion of Science
RP Hirai, Y (corresponding author), Univ Tokyo, JSPS, Tokyo 1138654, Japan.
EM yh@lyon.is.s.u-tokyo.ac.jp; kazu@iij.ad.jp
OI Hirai, Yoichi/0000-0003-2076-2750
FU Grants-in-Aid for Scientific Research [11J06978] Funding Source: KAKEN
CR Adams S., 1993, J FUNCTIONAL PROGRAM, V3, P553
   ADELSONVELSKII GM, 1962, DOKL AKAD NAUK SSSR+, V146, P263
   [Anonymous], INTERACTIVE THEOREM
   [Anonymous], 1998, Purely Functional Data Structures
   [Anonymous], 1998, SORTING SEARCHING
   Borchers B, 1999, OPTIM METHOD SOFTW, V11-2, P613, DOI 10.1080/10556789908805765
   Filliâtre JC, 2004, LECT NOTES COMPUT SC, V2986, P370
   Guibas LJ., 1978, P 19 ANN S FDN COMPU, P8, DOI DOI 10.1109/SFCS.1978.3
   Marlow Simon, 2010, Haskell 2010 language report
   Pugh William, 1991, P 1991 ACM IEEE C SU
   Roura S, 2001, LECT NOTES COMPUT SC, V2076, P469
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
NR 15
TC 7
Z9 6
U1 0
U2 1
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD MAY
PY 2011
VL 21
BP 287
EP 307
DI 10.1017/S0956796811000104
PN 3
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 783NC
UT WOS:000292089200003
OA Bronze
DA 2024-07-18
ER

PT J
AU Hutton, G
   Jaskelioff, M
   Gill, A
AF Hutton, Graham
   Jaskelioff, Mauro
   Gill, Andy
TI Factorising folds for faster functions
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID TRANSFORMATION
AB The worker/wrapper transformation is a general technique for improving the performance of recursive programs by changing their types. The previous formalisation (A. Gill & G. Hutton, J. Funct. Program., vol. 19, 2009, pp. 227-251) was based upon a simple fixed-point semantics of recursion. In this paper, we develop a more structured approach, based upon initial-algebra semantics. In particular, we show how the worker/wrapper transformation can be applied to programs defined using the structured pattern of recursion captured by fold operators, and illustrate our new technique with a number of examples.
C1 [Hutton, Graham] Univ Nottingham, Nottingham NG7 2RD, England.
   [Jaskelioff, Mauro] Univ Nacl Rosario, RA-2000 Rosario, Santa Fe, Argentina.
   [Gill, Andy] Univ Kansas, Lawrence, KS 66045 USA.
C3 University of Nottingham; National University of Rosario; University of
   Kansas
RP Hutton, G (corresponding author), Univ Nottingham, Nottingham NG7 2RD, England.
EM gmh@cs.nott.ac.uk; mauro@fceia.unr.edu.ar; andygill@ku.edu
OI Hutton, Graham/0000-0001-9584-5150
FU Functional Programming Lab in Nottingham; EPSRC [EP/E04350X/1] Funding
   Source: UKRI
FX We would like to thank Ralf Hinze and the four anonymous referees for
   their useful comments. The last author would like to thank the
   Functional Programming Lab in Nottingham for funding a one-week research
   visit during June 2009.
CR [Anonymous], 2003, Haskell 98 language and libraries: the revised report
   Backhouse R, 1999, LECT NOTES COMPUT SC, V1608, P28
   Bird Richard, 1997, Algebra of Programming
   DANIELSSON NA, 2006, PRINCIPLES PROGRAMMI
   Gibbons J, 2006, LECT NOTES COMPUT SC, V4014, P162, DOI 10.1007/11783596_12
   Gill A, 2009, J FUNCT PROGRAM, V19, P227, DOI 10.1017/S0956796809007175
   HOARE T, 1972, ACTA INFORM, V1, P271
   Hughes J., 1986, INFORM PROCESSING LE, V22, P141
   Hutton G., 1999, J FUNCTIONAL PROGRAM, V9, P355, DOI DOI 10.1017/S0956796899003500
   HUTTON G, 2006, TRENDS FUNCTIONAL PR, V5
   Hutton G., 2007, PROGRAMMING HASKELL
   Jaskelioff M, 2009, LECT NOTES COMPUT SC, V5502, P64, DOI 10.1007/978-3-642-00590-9_6
   Johann P, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P297, DOI 10.1145/1328438.1328475
   Jones SP, 2007, J FUNCT PROGRAM, V17, P1, DOI 10.1017/S0956796806006034
   JONES SP, 2006, P 11 ACM SIGPLAN INT, P50
   JONES SP, 1991, P C FUNCT PROGR COMP
   Liang Sheng, 1995, P 22 ACM SIGPLAN SIG, P333, DOI DOI 10.1145/199448.199528
   MALCOLM G, 1990, SCI COMPUT PROGRAM, V14, P255, DOI 10.1016/0167-6423(90)90023-7
   MEIJER E, 1991, LNCS, V523
   Voigtländer J, 2008, LECT NOTES COMPUT SC, V5133, P388
NR 20
TC 11
Z9 11
U1 0
U2 1
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD MAY-JUL
PY 2010
VL 20
SI SI
BP 353
EP 373
DI 10.1017/S0956796810000122
PN 3-4
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 711BF
UT WOS:000286560000005
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Swierstra, SD
   Chitil, O
AF Swierstra, S. Doaitse
   Chitil, Olaf
TI Linear, bounded, functional pretty-printing
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB We present two implementations of Oppen's pretty-printing algorithm in Haskell that meet the efficiency of Oppen's imperative Solution but have a simpler and a clear structure. We start with an implementation that uses lazy evaluation to simulate two co-operating processes. Then we present an implementation that uses higher-order functions for delimited continuations to simulate co-routines with explicit scheduling.
C1 [Swierstra, S. Doaitse] Univ Utrecht, NL-3508 TC Utrecht, Netherlands.
   [Chitil, Olaf] Univ Kent, Canterbury CT2 7NZ, Kent, England.
C3 Utrecht University; University of Kent
RP Swierstra, SD (corresponding author), Univ Utrecht, NL-3508 TC Utrecht, Netherlands.
CR [Anonymous], 1998, Purely Functional Data Structures
   BIRD RS, 1984, ACTA INFORM, V21, P239, DOI 10.1007/BF00264249
   Chitil O, 2005, ACM T PROGR LANG SYS, V27, P163, DOI 10.1145/1053468.1053473
   CHITIL O, 2006, 406 U KENT COMP LAB
   CHITIL O, 2001, ACM SIGPL HASK WORKS, P183
   Hughes J., 1995, LNCS, V925
   JONES SLP, 1997, PRETTY PRINTER LIB H
   Oppen D. C., 1980, ACM Transactions on Programming Languages and Systems, V2, P465, DOI 10.1145/357114.357115
   Swierstra S.D., 2004, UUCS2004025A I INF C
   Swierstra SD, 1999, LECT NOTES COMPUT SC, V1608, P150
   Wadler Philip, 2003, The Fun of Programming Cornerstones of Computing, P223
NR 11
TC 15
Z9 15
U1 0
U2 1
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD JAN
PY 2009
VL 19
BP 1
EP 16
DI 10.1017/S0956796808006990
PN 1
PG 16
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 392SM
UT WOS:000262322500001
OA Bronze, Green Accepted
DA 2024-07-18
ER

PT J
AU Fisher, D
   Shivers, O
AF Fisher, David
   Shivers, Olin
TI Building language towers with Ziggurat
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB Ziggurat is a meta-language System that permits programmers to develop Scheme-like macros for languages With nontrivial static semantics, such as C or Java (suitably encoded in an S-expression concrete syntax). Ziggurat permits language designers to construct 'towers' of language levels With macros; each level in the tower may have its own static semantics, such as type systems or flow analyses. Crucially, the static semantics of the languages at two adjacent levels in the tower can be connected, allowing improved reasoning power at a higher level to be reflected down to the static semantics of the language level below. We demonstrate the utility of the Ziggurat framework by implementing higher level language facilities as macros on top of an assembly language, utilizing static semantics such as termination analysis, a polymorphic type system and higher order flow analysis.
C1 [Fisher, David; Shivers, Olin] Northeastern Univ, Boston, MA 02115 USA.
C3 Northeastern University
RP Fisher, D (corresponding author), Northeastern Univ, Boston, MA 02115 USA.
FU National Science Foundation's Science of Design program [0757025];
   Microsoft Corporation; Direct For Computer & Info Scie & Enginr;
   Division of Computing and Communication Foundations [0757025] Funding
   Source: National Science Foundation
FX This material is based upon work supported in part by the National
   Science Foundation's Science of Design program under Grant No. 0757025
   and by the Microsoft Corporation.
CR ANDREAE C, 2006, P 21 ANN ACM SIGPLAN, P57
   [Anonymous], 1991, POPL 91, DOI DOI 10.1145/99583.99607
   [Anonymous], 1985, Structure and Interpretation of Computer Programs
   [Anonymous], 1998, Term rewriting and all thatM
   [Anonymous], 1984, Studies in Logic
   BACHRACH J, 2001, OOPSLA 2001 C P, P31, DOI DOI 10.1145/504311.504285
   Baker Jason., 2002, PLDI 02, P270
   BRABRAND C, 2003, ELECT NOTES THEORETI, V82, P592
   Bravenboer M, 2004, ACM SIGPLAN NOTICES, V39, P365, DOI 10.1145/1035292.1029007
   BYRD WE, 2006, TR200606 U CHIC COMP
   Church Alonzo., 1941, The Calculi of Lambda-conversion. Annals of mathematics studies
   CLINGER W, 1991, LISP POINT, V4
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   DEREMER F, 1982, ACM T PROGR LANG SYS, V4, P615, DOI 10.1145/69622.357187
   Dybvig R. K., 1993, LISP and Symbolic Computation, V5, P295, DOI 10.1007/BF01806308
   DYBVIG RK, 1992, TR356 IND U COMP SCI
   Ekman T, 2004, LECT NOTES COMPUT SC, V3086, P144
   Ekman T., 2007, Proceedings of the 22nd annual ACM SIGPLAN conference on Object-oriented programming systems and applications, P1, DOI [10.1145/1297027.1297029, DOI 10.1145/1297027.1297029]
   FLATT M, 2004, P 5 WORKSH SCHEM FUN, P41
   Flatt Matthew., 2002, INT C FUNCTIONAL PRO, P72, DOI [10.1145/581478.581484, DOI 10.1145/581478.581484]
   Ford B., 2002, SIGPLAN Notices, V37, P36, DOI 10.1145/583852.581483
   Friedman D. P., 2005, REASONED SCHEMER
   Grimm R, 2006, ACM SIGPLAN NOTICES, V41, P38, DOI 10.1145/1133981.1133987
   Herman D, 2008, LECT NOTES COMPUT SC, V4960, P48
   *ISO, 2004, 14772 VRML ISOIEC
   Johnson StevenC., 1979, UNIX PROGRAMMERS MAN, V2, P353
   Jones SP, 2000, ACM SIGPLAN NOTICES, V35, P280, DOI 10.1145/357766.351267
   Krishnamurthi S, 1999, LECT NOTES COMPUT SC, V1576, P258
   MADDOX W, 1989, CSD89545 U CAL
   Mernik M, 1999, ACM SIGPLAN NOTICES, V34, P68, DOI 10.1145/606666.606678
   Might M., 2006, P 11 ACM SIGPLAN INT, P13, DOI DOI 10.1016/J.TCS.2006.12.031
   Morrisett G, 1999, ACM T PROGR LANG SYS, V21, P527, DOI 10.1145/319301.319345
   NANAVATI RA, 2000, THESIS MIT CAMBRIDGE
   NYSTROM N, 2006, P OOPSLA 06, P21
   Olinsky R, 2006, ACM SIGPLAN NOTICES, V41, P409, DOI 10.1145/1111320.1111073
   PENNELLO TJ, 1986, P SIGPLAN 86 S COMP, P145
   POTTIER F, 2005, ESSENCE ML TYPE INFE, P389
   Pottier F, 2006, ELECTRON NOTES THEOR, V148, P155, DOI 10.1016/j.entcs.2005.11.044
   Shalit A., 1996, The Dylan reference manual: the definitive guide to the new object-oriented dynamic language
   SHIVERS O, 2005, P 10 ACM SIGPLAN INT, P2
   SHIVERS O, 1991, THESIS C MELLON U PI
   Taha W., 1997, Proceedings of the ACM SIGPLAN Symposium on Partial Evaluation and Semantics-Based Program Manipulation, PEPM '97, P203, DOI 10.1145/258994.259019
   UNGAR D, 1987, P OOPSLA 87, P227
   Van Wyk E, 2002, LECT NOTES COMPUT SC, V2304, P128
   Van Wyk E, 2007, LECT NOTES COMPUT SC, V4609, P575
   Visser E, 2003, LECT NOTES COMPUT SC, V3016, P216
NR 46
TC 8
Z9 9
U1 0
U2 1
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD SEP-NOV
PY 2008
VL 18
BP 707
EP 780
DI 10.1017/S0956796808006928
PN 5-6
PG 74
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 375KD
UT WOS:000261111700005
OA Bronze
DA 2024-07-18
ER

PT J
AU Kodama, K
   Suenaga, K
   Kobayashi, N
AF Kodama, Koichi
   Suenaga, Kohei
   Kobayashi, Naoki
TI Translation of tree-processing programs into stream-processing programs
   based on ordered linear type
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 2nd Asian Symposium on Programming Languages and Systems
CY NOV 04-06, 2004
CL Taipei, TAIWAN
SP Asian Assoc Fdn Software, Acad Sinica
AB There are two ways to write a program for manipulating tree-structured data such as XML documents: One is to write a tree-processing program focusing on the logical structure of the data and the other is to write a stream-processing program focusing out the physical structure. While tree-processing programs are easier to write than stream-processing programs, tree-processing programs are less efficient in memory usage since they use trees as intermediate data. Our aim is to establish a method for automatically translating a tree-processing program to a stream-processing one in order to take the best of both worlds. We first define a programming language for processing binary trees and a type system based on ordered linear type, and show that every well-typed program can be translated to an equivalent stream-processing program. We then extend the language and the type system to deal with XML documents. We have implemented an XML stream processor generator based on our algorithm, and obtained promising experimental results.
C1 [Kodama, Koichi] Tokyo Inst Technol, Tokyo, Japan.
   [Suenaga, Kohei] Univ Tokyo, Tokyo 1138654, Japan.
   [Kobayashi, Naoki] Tohoku Univ, Sendai, Miyagi 980, Japan.
C3 Tokyo Institute of Technology; University of Tokyo; Tohoku University
RP Kodama, K (corresponding author), Tokyo Inst Technol, Tokyo, Japan.
EM kohei@yl.is.s.u_tokyo.ac.jp
OI Kobayashi, Naoki/0000-0002-0537-0604; Suenaga, Kohei/0000-0002-7466-8789
CR ABO AV, 1986, COMPILERS
   [Anonymous], 2000, EXTENSIBLE MARKUP LA
   BAKER HG, 1992, SIGPLAN NOTICES, V27, P89, DOI 10.1145/142137.142162
   Bar-Yossef Ziv., 2005, P 2005 ACM S PRINCIP, P216
   BENZAKEN V, 2003, P 8 ACM SIGPLAN INT, P51
   BERGLUND A, 2003, XML PATH LANGUAGE X
   BOAG S, 2003, X QUERY 10 AN XML QU
   Chamberlin Don., 2003, XML Query (XQuery) Requirements, W3C Working Draft 2 May 2003
   *DATAPOWER TECHN I, 2001, XSLTHARK
   GANZINGER H, 1984, P SIGPLAN 84 S COMPI, P157
   GREEN T, 2001, PROCESSING XML STREA
   GUPTA AK, 2003, P 2003 ACM SIGMOD IN, P419
   Hosoya Haruo, 2003, ACM T INTERNET TECHN, V3, DOI DOI 10.1145/767193.767195
   IGARASHI A, 2002, P ACM SIGPLAN SIGACT, P331
   KOCH C, 2003, P 9 INT WORKSH DAT P, P233
   LUDDSCHER B, 2002, P 28 INT C VER LARG, P227
   NAKANO K, 2001, ELECT NOTES THEOR CO, V44, P181
   NAKANO K, 2004, METR200401 U TOK DEP
   Nakano K, 2006, LECT NOTES COMPUT SC, V4279, P340
   Neven F, 2005, J COMPUT SYST SCI, V70, P221, DOI 10.1016/j.jcss.2004.10.008
   Olteanu D, 2002, LECT NOTES COMPUT SC, V2490, P109
   PETERSEN L, 2003, P 30 ACM SIGPLAN SIG, P172
   POLAKOW J, 2001, CMUCS01152 CARN MELL
   SATO S, 2007, THESIS TOHOKU U JAPA
   SCARDINA M, 2003, XPATH REQUIREMENTS V
   Schmidt Albrecht., 2001, XML BENCHMARK PROJEC
   SUENAGA K, 2005, INT S LOG BAS PROGR, P98
   TURNER DN, 1995, P FUNCT PROGR LANG C, P11
   WADLER P, 1988, LECT NOTES COMPUT SC, V300, P344
   [No title captured]
   [No title captured]
NR 31
TC 1
Z9 1
U1 0
U2 1
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD MAY
PY 2008
VL 18
BP 333
EP 371
DI 10.1017/S0956796807006570
PN 3
PG 39
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 296JT
UT WOS:000255540000002
OA Bronze
DA 2024-07-18
ER

PT J
AU Bucalo, A
   Honsell, F
   Miculan, M
   Scagnetto, I
   Hoffman, M
AF Bucalo, Anna
   Honsell, Furio
   Miculan, Marino
   Scagnetto, Ivan
   Hoffman, Martin
TI Consistency of the theory of contexts
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID CALCULUS; MODELS
AB The Theory of Contexts is a type-theoretic axiomatization aiming to give a metalogical account of the fundamental notions of variable and context as they appear in Higher Order Abstract Syntax. In this paper, we prove that this theory is consistent by building a model based on functor categories. By means of a suitable notion of forcing, we prove that this model validates Classical Higher Order Logic, the Theory of Contexts, and also (parametrised) structural induction and recursion principles over contexts. Our approach, which we present in full detail, should also be useful for reasoning on other models based on functor categories. Moreover, the construction could also be adopted, and possibly generalized, for validating other theories of names and binders.
C1 Univ Udine, Dept Math & Comp Sci, I-33100 Udine, Italy.
   Univ Munich, Inst Informat, Munich, Germany.
C3 University of Udine; University of Munich
RP Bucalo, A (corresponding author), Univ Udine, Dept Math & Comp Sci, I-33100 Udine, Italy.
EM miculan@dimi.uniud.it
RI Miculan, Marino/AAO-3301-2021; Scagnetto, Ivan/G-5971-2012
OI Scagnetto, Ivan/0000-0003-3206-2719; Miculan, Marino/0000-0003-0755-3444
CR AMBLER S, 2001, ELECT NOTES THEORETI
   [Anonymous], 1999, Category Theory for Computing Science
   BUCALO A, 2005, J FUNCTIONAL PROGRAM
   CATTANI GL, 1997, P CTCS
   Church A., 1940, J. Symbolic Logic, V5, P56, DOI [10.2307/2266170, DOI 10.2307/2266170]
   Crole RL, 2003, LECT NOTES COMPUT SC, V2793, P133
   DESPEYROUX J, 1995, LECT NOTES COMPUTER, V905
   Fiore M, 2001, IEEE S LOG, P93, DOI 10.1109/LICS.2001.932486
   FIORE M, 1996, P 11 LICS
   FIORE MP, 1999, P 14 ANN IEEE S LOG
   Gabbay M. J., 2002, Formal Aspects of Computing, V13, P341, DOI 10.1007/s001650200016
   GABBAY MJ, 1999, P 14 ANN IEEE S LOG
   HARPER R, 1993, J ACM, V40, P143, DOI 10.1145/138027.138060
   HOFMANN M, 1999, P 14 ANN IEEE S LOG
   Honsell F, 2001, LECT NOTES COMPUT SC, V2076, P963
   Honsell F, 2001, THEOR COMPUT SCI, V253, P239, DOI 10.1016/S0304-3975(00)00095-5
   HYLAND JME, 1980, MATH PROC CAMBRIDGE, V88, P205, DOI 10.1017/S0305004100057534
   *INRIA, 2003, COQ PROOF ASS
   JACOBS B, 1999, STUDIES LOGIC FDN MA, V141
   Jacobson D, 1995, J DIVORCE REMARRIAGE, V24, P3
   JOHNSTONE PT, 1977, LONDON MATH SOC MONO, V10
   LONGO G, 1999, P 14 ANN IEE S LOG C
   Mac Lane, 1971, CATEGORIES WORKING M
   MACLLANE S, 1994, SHEAVES GEOMETRY LOG
   McDowell R. C., 2002, ACM Transactions on Computational Logic, V3, P80, DOI 10.1145/504077.504080
   Micu S., 2001, Port. Math, V58, P1
   MICULAN M, 1997, THESIS U PISA ITALY
   MILNER R, 1992, INFORM COMPUT, V100, P1, DOI [10.1016/0890-5401(92)90008-4, 10.1016/0890-5401(92)90009-5]
   MOGGI E, 1993, INFORM COMPUT, V1
   Moggi Eugenio, 1989, Technical Report ECS-LFCS-90-113
   OLES FJ, 1985, ALGEBRAIC SEMANTICS
   Pfenning F., 1988, PLDI'88: Proceedings of the ACM SIGPLAN 1988 conference on Programming Language design and Implementation', P199
   Pfenning Frank, 1999, LNCS, V1632, P202, DOI DOI 10.1007/3-540-48660-7_14
   Pitts A. M., 1981, THESIS CAMBRIDGE U
   Pitts AM, 2003, INFORM COMPUT, V186, P165, DOI 10.1016/S0890-5401(03)00138-X
   PITTS AM, 1999, TUT WORKSH REAL SEM, V23
   Reynolds J. C., 1981, Algorithmic Languages. Proceedings of the International Symposium, P345
   ROCKL C, 2001, LNCS, V2030, P359
   SCAGNETTO I, 2002, THESIS U UDINE ITALY
   SCAGNETTO I, 2002, P 3 INT WORKSH LOG F
   STARK I, 1994, 363 U CAMBRIDGE COMP
   van Oosten J., 1991, THESIS U AMSTERDAM
NR 42
TC 19
Z9 19
U1 0
U2 1
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD MAY
PY 2006
VL 16
BP 327
EP 372
DI 10.1017/S0956796806005892
PN 3
PG 46
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 052MS
UT WOS:000238238400005
OA Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Bhaskar, S
   Simonsen, JG
AF Bhaskar, Siddharth
   Simonsen, Jakob Grue
TI Read/write factorizable programs
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID ORDER; COMPLEXITY; LANGUAGES; LOGSPACE
AB In the cons-free programming paradigm, we eschew constructors and program using only destructors. Cons-free programs in a simple first-order language with string data capture exactly P, the class of polynomial-time relations. By varying the underlying language and considering other data types, we can capture several other complexity classes. However, no cons-free programming language captures any functional complexity class for fundamental reasons. In this paper, we cleanly extend the cons-free paradigm to encompass functional complexity classes. Namely, we introduce programs with data that can either only be destructed or only be constructed, which we enforce by a type system on the program variables. We call the resulting programs read/write- (or RW-)factorizable, show that RW-factorizable string programs capture exactly the class FP of polynomial-time functions, and that tail-recursive RW-factorizable programs capture exactly the class FL of logarithmic-space functions. Finally, we state and solve the nontrivial problem of syntactic composition of two RW-factorizable programs.
C1 [Bhaskar, Siddharth; Simonsen, Jakob Grue] Univ Copenhagen, Copenhagen, Denmark.
C3 University of Copenhagen
RP Bhaskar, S (corresponding author), Univ Copenhagen, Copenhagen, Denmark.
EM bhask2sk@jmu.edu; simonsen@di.ku.dk
RI ; Simonsen, Jakob Grue/C-6061-2015
OI Bhaskar, Siddharth Kasi/0000-0003-4157-8768; Simonsen, Jakob
   Grue/0000-0002-3488-9392
CR Alton D.A., 1980, LONDON MATH SOC LECT, P248, DOI DOI 10.1007/CBO9780511629181.011
   [Anonymous], 1995, Feasible Mathematics II
   Aubert C., 2022, LIPICS, V228
   Avanzini M, 2016, INFORM COMPUT, V248, P22, DOI 10.1016/j.ic.2015.12.007
   Avanzini M, 2011, LEIBNIZ INT PR INFOR, V10, P123, DOI 10.4230/LIPIcs.RTA.2011.123
   Avanzini M, 2015, THEOR COMPUT SCI, V585, P3, DOI 10.1016/j.tcs.2015.03.003
   Baillot P, 2022, ACM T PROGR LANG SYS, V44, DOI 10.1145/3495529
   Baillot P, 2019, J AUTOM REASONING, V63, P813, DOI 10.1007/s10817-019-09530-2
   Bellantoni S., 1992, Proceedings of the Twenty-Fourth Annual ACM Symposium on the Theory of Computing, P283, DOI 10.1145/129712.129740
   Ben-Amram AM, 1998, LECT NOTES COMPUT SC, V1443, P271, DOI 10.1007/BFb0055060
   Bhaskar S, 2023, THEOR COMPUT SYST, V67, P437, DOI 10.1007/s00224-022-10074-z
   Bonfante G, 2011, THEOR COMPUT SCI, V412, P2776, DOI 10.1016/j.tcs.2011.02.007
   Bonfante G, 2006, LECT NOTES COMPUT SC, V4019, P66
   Cobham Alan, 1965, LOGIC METHODOLOGY PH, P24
   CONSTABLE RL, 1972, J ACM, V19, P526, DOI 10.1145/321707.321721
   Czajka L., 2018, 3 INT C FORM STRUCT, p13:1
   Dal Lago U, 2022, MATH STRUCT COMP SCI, V32, P760, DOI 10.1017/S0960129521000505
   Dal Lago U, 2015, INFORM COMPUT, V241, P114, DOI 10.1016/j.ic.2014.10.009
   de Carvalho Daniel, 2014, Rewriting and Typed Lambda Calculi. Joint International Conference, RTA-TLCA 2014, Held as Part of the Vienna Summer of Logic, VSL 2014. Proceedings: LNCS 8560, P179, DOI 10.1007/978-3-319-08918-8_13
   Girard JY, 1998, INFORM COMPUT, V143, P175, DOI 10.1006/inco.1998.2700
   Greibach SheilaA., 1975, Theory of Program Structures: Schemes, Semantics, Veri_cation
   Hainry E, 2022, LOG METH COMPUT SCI, V18, DOI 10.46298/LMCS-18(1:33)2022
   Hofmann M., 2000, SIGACT News, V31, P31, DOI 10.1145/346048.346051
   Hofmann M, 2002, ACM SIGPLAN NOTICES, V37, P260, DOI 10.1145/565816.503297
   Jones N. D., 2020, EPTCS
   Jones ND, 1999, THEOR COMPUT SCI, V228, P151, DOI 10.1016/S0304-3975(98)00357-0
   Jones ND, 2001, J FUNCT PROGRAM, V11, P55, DOI 10.1017/S0956796800003889
   Kop C., 2017, LECT NOTES COMPUTER, V10201, P668
   Kristiansen L, 2022, SCI COMPUT PROGRAM, V213, DOI 10.1016/j.scico.2021.102723
   Lafont Y, 2004, THEOR COMPUT SCI, V318, P163, DOI 10.1016/j.tcs.2003.10.018
   Lago U. D., 2021, LIPICS, V202
   Marion JY, 2011, IEEE S LOG, P123, DOI 10.1109/LICS.2011.41
   Mihalis Yannakakis, 1978, P 10 ANN ACM S THEOR, P253, DOI DOI 10.1145/800133.804355
   Moschovakis Y.N., 2001, MATH UNLIMITED 2001, P919, DOI DOI 10.1007/978-3-642-56478-9_46
NR 34
TC 0
Z9 0
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD JUN 8
PY 2023
VL 33
AR e5
DI 10.1017/S0956796823000023
PG 50
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA I4DV2
UT WOS:001002309500001
OA hybrid
DA 2024-07-18
ER

PT J
AU Downen, P
   Ariola, ZM
AF Downen, Paul
   Ariola, Zena M. M.
TI Classical (co)recursion: Mechanics
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID RECURSION; DUALITY; LOGIC
AB Recursion is a mature, well-understood topic in the theory and practice of programming. Yet its dual, corecursion is underappreciated and still seen as exotic. We aim to put them both on equal footing by giving a foundation for primitive corecursion based on computation, giving a terminating calculus analogous to the original computational foundation of recursion. We show how the implementation details in an abstract machine strengthens their connection, syntactically deriving corecursion from recursion via logical duality. We also observe the impact of evaluation strategy on the computational complexity of primitive (co)recursive combinators: call-by-name allows for more efficient recursion, but call-by-value allows for more efficient corecursion.
C1 [Downen, Paul; Ariola, Zena M. M.] Univ Oregon, Dept Comp & Informat Sci, Eugene, OR 97403 USA.
   [Downen, Paul] Univ Massachusetts, Dept Comp Sci, Lowell, MA 01854 USA.
C3 University of Oregon; University of Massachusetts System; University of
   Massachusetts Lowell
RP Downen, P (corresponding author), Univ Oregon, Dept Comp & Informat Sci, Eugene, OR 97403 USA.; Downen, P (corresponding author), Univ Massachusetts, Dept Comp Sci, Lowell, MA 01854 USA.
EM pdownen@cs.uoregon.edu; ariola@cs.uoregon.edu
OI Downen, Paul/0000-0003-0165-9387
FU National Science Foundation [1719158]
FX Acknowledgments We would like to thank the anonymous reviewers for their
   helpful suggestions and feedback for improving the presentation of this
   article. This work is supported by the National Science Foundation under
   Grant No. 1719158.
CR Abel A, 2006, THESIS LUDWIG MAXIMI
   Abel A, 2013, ACM SIGPLAN NOTICES, V48, P27, DOI 10.1145/2480359.2429075
   Abel A, 2013, ACM SIGPLAN NOTICES, V48, P185, DOI [10.1145/2500365.2500591, 10.1145/2544174.2500591]
   Ancona D, 2012, CORECURSIVE FEATHERW
   Ancona D, 2013, FORMAL TECHNIQUES JA
   Ancona D., 2012, CO LP 2012 WORKSH CO
   Ancona D, 2013, COMPUT LANG SYST STR, V39, P142, DOI 10.1016/j.cl.2013.05.001
   Ariola ZM, 2009, ACM T PROGR LANG SYS, V31, DOI 10.1145/1516507.1516508
   Barthe G, 2002, ACM SIGPLAN NOTICES, V37, P131, DOI 10.1145/509799.503043
   BOHM C, 1985, THEOR COMPUT SCI, V39, P135, DOI 10.1016/0304-3975(85)90135-5
   COCKETT JRB, 1995, THEOR COMPUT SCI, V139, P69, DOI 10.1016/0304-3975(94)00099-5
   Crole R. L., 2003, COINDUCTION BISIMILA
   Curien PL, 2000, ACM SIGPLAN NOTICES, V35, P233, DOI 10.1145/357766.351262
   Dagnino F, 2020, THEOR PRACT LOG PROG, V20, P818, DOI 10.1017/S147106842000023X
   Dagnino F, 2019, LOG METH COMPUT SCI, V15, DOI 10.23638/LMCS-15(1:26)2019
   Downen P., 2018, LIPICS, V119
   Downen P, 2021, Arxiv, DOI arXiv:2103.06913
   Downen P, 2020, J LOG ALGEBR METHODS, V111, DOI 10.1016/j.jlamp.2019.100512
   Downen P, 2019, FUND INFORM, V170, P39, DOI 10.3233/FI-2019-1855
   Downen P, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S0956796818000023
   Downen P, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P127, DOI 10.1145/2784731.2784762
   Downen Paul, 2017, Sequent Calculus: A Logic and a Language for Computation and Duality
   Felleisen Matthias, 1986, P IFIP TC 2WG22 WORK
   Fukushima T, 1992, CHARITY
   Gentzen G, 1935, MATH Z, V39, P176, DOI 10.1007/BF01201353
   Geuvers Herman, 1992, INFORMAL P WORKSHOP, P193
   Gibbons J., 2003, CHAP ORIGAMI PROGRAM, P41
   Girard J.-Y., 1989, Cambridge Tracts in Theoretical Computer Science, V7
   GIRARD JY, 1987, THEOR COMPUT SCI, V50, P1, DOI 10.1016/0304-3975(87)90045-4
   GODEL K, 1980, J PHILOS LOGIC, V9, P133
   HAGINO T, 1987, LECT NOTES COMPUT SC, V283, P140
   Harper R, 2016, Practical Foundations for Programming Languages
   Hinze R, 2013, ACM SIGPLAN NOTICES, V48, P209, DOI [10.1145/2500365.2500578, 10.1145/2544174.2500578]
   Hughes J., 1996, Conference Record of POPL '96: The 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P410, DOI 10.1145/237721.240882
   Jeannin JB, 2017, FUND INFORM, V150, P347, DOI 10.3233/FI-2017-1473
   Kleene SC., 1952, Introduction to metamathematics
   Knaster B., 1928, Ann. Soc. Polon. Math., V6, P133
   Krivine Jean-Louis, 2007, Higher-Order and Symbolic Computation, V20, P199, DOI 10.1007/S10990-007-9018-9
   Laforgue P, 2017, PROCEEDINGS OF THE 19TH INTERNATIONAL SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING (PPDP 2017), P97, DOI 10.1145/3131851.3131869
   Levy Paul Blain, 2001, Ph. D. Dissertation
   LISKOV B, 1988, SIGPLAN NOTICES, V23, P17, DOI 10.1145/62139.62141
   MALCOLM G, 1990, SCI COMPUT PROGRAM, V14, P255, DOI 10.1016/0167-6423(90)90023-7
   McDermott D, 2019, LECT NOTES COMPUT SC, V11423, P235, DOI 10.1007/978-3-030-17184-1_9
   Meertens L., 1992, Formal Aspects of Computing, V4, P413, DOI 10.1007/BF01211391
   Meertens L, 1987, 1 STEPS THEORY ROSE
   MEIJER E, 1991, LECT NOTES COMPUT SC, V523, P124
   Mendler N. P., 1988, THESIS CORNELL U
   Mendler N. P., 1987, LOG COMPUT SCI
   Munch-Maccagnoni G., 2013, THESIS U PARIS DIDER
   PARIGOT M, 1992, LECT NOTES ARTIF INT, V624, P190
   Rutten Jan, 2019, The Method of Coalgebra: Exercises in Coinduction
   Sabry A., 1993, LISP and Symbolic Computation, V6, P289, DOI 10.1007/BF01019462
   Sangiorgi Davide, 2011, Introduction to bisimulation and coinduction
   Tarski A., 1955, PAC J MATH, V5, P285, DOI DOI 10.2140/PJM.1955.5.285
   Vene V., 1998, Proceedings of the Estonian Academy of Sciences. Physics, Mathematics, V47, P147
   Vos T. E. J., 1995, THESIS PHILIPS RES E
   Wadler P, 2003, ACM SIGPLAN NOTICES, V38, P189, DOI 10.1145/944746.944723
   Zeilberger N, 2009, THESIS C MELLON U
NR 58
TC 0
Z9 0
U1 1
U2 2
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD APR 4
PY 2023
VL 33
AR e4
DI 10.1017/S0956796822000168
PG 63
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA C5FA8
UT WOS:000962158400001
OA hybrid, Green Submitted
DA 2024-07-18
ER

PT J
AU Perna, S
   Tannen, V
   Wong, L
AF Perna, Stefano
   Tannen, Val
   Wong, Limsoon
TI Iterating on multiple collections in synchrony
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID QUERY LANGUAGES; COMPLEXITY; ALGEBRA; FORMS
AB Modern programming languages typically provide some form of comprehension syntax which renders programs manipulating collection types more readable and understandable. However, comprehension syntax corresponds to nested loops in general. There is no simple way of using it to express efficient general synchronized iterations on multiple ordered collections, such as linear-time algorithms for low-selectivity database joins. Synchrony fold is proposed here as a novel characterization of synchronized iteration. Central to this characterization is a monotonic isBefore predicate for relating the orderings on the two collections being iterated on and an antimonotonic canSee predicate for identifying matching pairs in the two collections to synchronize and act on. A restriction is then placed on Synchrony fold, cutting its extensional expressive power to match that of comprehension syntax, giving us Synchrony generator. Synchrony generator retains sufficient intensional expressive power for expressing efficient synchronized iteration on ordered collections. In particular, it is proved to be a natural generalization of the database merge join algorithm, extending the latter to more general database joins. Finally, Synchrony iterator is derived from Synchrony generator as a novel form of iterator. While Synchrony iterator has the same extensional and intensional expressive power as Synchrony generator, the former is better dovetailed with comprehension syntax. Thereby, algorithms requiring synchronized iterations on multiple ordered collections, including those for efficient general database joins, become expressible naturally in comprehension syntax.
C1 [Perna, Stefano; Wong, Limsoon] Natl Univ Singapore, Dept Comp Sci, Singapore, Singapore.
   [Tannen, Val] Univ Penn, Dept Comp & Informat Sci, 200 S 33Rd St, Philadelphia, PA 19104 USA.
C3 National University of Singapore; University of Pennsylvania
RP Perna, S (corresponding author), Natl Univ Singapore, Dept Comp Sci, Singapore, Singapore.
EM stefano.perna@ntu.edu.sg; val@cis.upenn.edu; wongls@comp.nus.edu.sg
RI Wong, Limsoon/E-5033-2010
OI Wong, Limsoon/0000-0003-1241-5441
FU National Research Foundation, Singapore [SBP-P3]; Ministry of Education,
   Singapore [MOE T1 251RES1725, MOE-T2EP20221-0005]; Kwan Im Thong Hood
   Cho Temple Visiting Professorship; Kwan Im Thong Hood Cho Temple Chair
   Professorship
FX Stefano Ceri invited us to the GeCo Workshop on Challenges in
   Data-Driven Genomic Computing, held in Como, Italy, in March 2019. This
   work evolved from the talk given by LW at the workshop and the ensuing
   interesting discussions with VT and SP. We thank Stefano for his
   invitation and surreptitious seeding of this work. Jeremy Gibbons and
   the reviewers provided very useful suggestions on this paper. They also
   brought many relevant works and ideas to our attention. Their comments
   greatly enriched our perspective in this work. We thank them for their
   invaluable contribution in helping us improve this work. SP and LW were
   supported by National Research Foundation, Singapore, under its
   Synthetic Biology Research and Development Programme (Award No: SBP-P3),
   and by Ministry of Education, Singapore, Academic Research Fund Tier-1
   (Award No: MOE T1 251RES1725) and Tier-2 (Award No: MOE-T2EP20221-0005).
   In addition, VT was supported in part by a Kwan Im Thong Hood Cho Temple
   Visiting Professorship, and LW was supported in part by a Kwan Im Thong
   Hood Cho Temple Chair Professorship. Any opinions, findings, and
   recommendations expressed herein are those of the authors and do not
   reflect the views of these grantors.
CR Abiteboul S, 1995, FDN DATABASES
   [Anonymous], 1986, Denotational Semantics: A Methodology for Language Development
   [Anonymous], 2011, Programming in Scala: A Comprehensive Step-by-Step Guide
   [Anonymous], 1973, The art of computer programming
   Biskup J, 2004, SIAM J COMPUT, V33, P1052, DOI 10.1137/S0097539701390859
   BLASGEN MW, 1977, IBM SYST J, V16, P363, DOI 10.1147/sj.164.0363
   Bracevac O, 2018, PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES, DOI 10.1145/3236762
   Buneman P., 1994, SIGMOD Record, V23, P87, DOI 10.1145/181550.181564
   BUNEMAN P, 1995, THEOR COMPUT SCI, V149, P3, DOI 10.1016/0304-3975(95)00024-Q
   COLSON L, 1991, THEOR COMPUT SCI, V83, P57, DOI 10.1016/0304-3975(91)90039-5
   DEWITT DJ, 1991, PROC INT CONF VERY L, P443
   Dignös A, 2022, VLDB J, V31, P75, DOI 10.1007/s00778-021-00692-3
   FELLEISEN M, 1991, SCI COMPUT PROGRAM, V17, P35, DOI 10.1016/0167-6423(91)90036-W
   FORTUNE S, 1983, J ACM, V30, P151, DOI 10.1145/322358.322370
   Fridlender D., 2000, Journal of Functional Programming, V10, P409, DOI 10.1017/S0956796800003658
   Gaifman Haim, 1982, LOG C 81 N HOLL, V107, P105, DOI [10.1016/S0049-237X(08)71879-2, DOI 10.1016/S0049-237X(08)71879-2]
   Gibbons Jeremy, 2016, A List of Successes that can Change the World. Essays Dedicated to Philip Wadler on the Occasion of his 60th Birthday. LNCS 9600, P132, DOI 10.1007/978-3-319-30936-1_7
   Gibbons J, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3236781
   Gulino A, 2019, IEEE T COMPUT, V68, P125, DOI 10.1109/TC.2018.2854880
   Henglein Fritz., 2010, Higher-Order and Symbolic Computation, V23, P337
   Hunt A., 2000, PRAGMATIC PROGRAMMER
   Jones SP, 2007, HASKELL'07: PROCEEDINGS OF THE ACM SIGPLAN 2007 HASKELL WORKSHOP, P61
   Libkin L., 1994, Database Programming Languages (DBPL-4). Proceedings of the Fourth International Workshop on Database Programming Languages - Object Models and Languages, P282
   Libkin L, 1997, J COMPUT SYST SCI, V55, P241, DOI 10.1006/jcss.1997.1523
   Lindley S, 2011, ELECTRON NOTES THEOR, V229, P97, DOI 10.1016/j.entcs.2011.02.018
   Marlow S, 2016, ACM SIGPLAN NOTICES, V51, P92, DOI [10.1145/3241625.2976007, 10.1145/2976002.2976007]
   Masseroli M, 2019, BIOINFORMATICS, V35, P729, DOI 10.1093/bioinformatics/bty688
   McBride C, 2002, J FUNCT PROGRAM, V12, P375, DOI 10.1017/S0956796802004355
   MISHRA P, 1992, COMPUT SURV, V24, P63, DOI 10.1145/128762.128764
   Neph S, 2012, BIOINFORMATICS, V28, P1919, DOI 10.1093/bioinformatics/bts277
   Olteanu D, 2016, SIGMOD REC, V45, P5, DOI 10.1145/3003665.3003667
   Perna S., 2021, SYNCHRONIZED ITERATI
   Piatov D, 2016, PROC INT CONF DATA, P1098, DOI 10.1109/ICDE.2016.7498316
   Sebesta RobertW., 2016, CONCEPTS PROGRAMMING, V11th
   Silberschatz A., 2020, DATABASE SYSTEM CONC
   Suciu D, 1995, LECT NOTES COMPUT SC, V893, P111
   Suciu D, 1997, J COMPUT SYST SCI, V55, P322, DOI 10.1006/jcss.1997.1526
   Trinder P. W., 1991, P 3 INT WORKSH DAT P, P49
   Van den Bussche J, 2001, THEOR COMPUT SCI, V254, P363, DOI 10.1016/S0304-3975(99)00301-1
   WADLER P, 1990, THEOR COMPUT SCI, V73, P231, DOI 10.1016/0304-3975(90)90147-A
   Wong L, 1996, J COMPUT SYST SCI, V52, P495, DOI 10.1006/jcss.1996.0037
   Wong L, 2013, P 32 ACM S PRINCIPLE, P285
   Wong L, 2021, ADDRESSING INTENSION
NR 43
TC 1
Z9 1
U1 0
U2 2
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD JUL 5
PY 2022
VL 32
AR e9
DI 10.1017/S0956796822000041
PG 53
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 2Q7RR
UT WOS:000820616600001
OA hybrid
DA 2024-07-18
ER

PT J
AU Huang, XJ
   Zhao, JX
   Oliveira, BCDS
AF Huang, Xuejing
   Zhao, Jinxu
   Oliveira, Bruno C. D. S.
TI Taming the Merge Operator
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID POLYMORPHIC FUNCTIONS; INTERSECTION TYPES; LOGICAL RELATIONS; SEMANTICS;
   MULTIPLE; SYNTAX
AB Calculi with disjoint intersection types support a symmetric merge operator with subtyping. The merge operator generalizes record concatenation to any type, enabling expressive forms of object composition, and simple solutions to hard modularity problems. Unfortunately, recent calculi with disjoint intersection types and the merge operator lack a (direct) operational semantics with expected properties such as determinism and subject reduction, and only account for terminating programs. This paper proposes a type-directed operational semantics (TDOS) for calculi with intersection types and a merge operator. We study two variants of calculi in the literature. The first calculus, called lambda(i), is a variant of a calculus presented by Oliveira et al. (2016) and closely related to another calculus by Dunfield (2014). Although Dunfield proposes a direct small-step semantics for her calculus, her semantics lacks both determinism and subject reduction. Using our TDOS, we obtain a direct semantics for lambda(i) that has both properties. The second calculus, called lambda(+)(i), employs the well-known subtyping relation of Barendregt, Coppo and Dezani-Ciancaglini (BCD). Therefore, lambda(+)(i) extends the more basic subtyping relation of lambda(i), and also adds support for record types and nested composition (which enables recursive composition of merged components). To fully obtain determinism, both lambda(i) and lambda(+)(i) employ a disjointness restriction proposed in the original lambda(i) calculus. As an added benefit the TDOS approach deals with recursion in a straightforward way, unlike previous calculi with disjoint intersection types where recursion is problematic. We relate the static and dynamic semantics of lambda(i) to the original version of the calculus and the calculus by Dunfield. Furthermore, for lambda(+)(i), we show a novel formulation of BCD subtyping, which is algorithmic, has a very simple proof of transitivity and allows for the modular addition of distributivity rules (i.e. without affecting other rules of subtyping). All results have been fully formalized in the Coq theorem prover.
C1 [Huang, Xuejing; Zhao, Jinxu; Oliveira, Bruno C. D. S.] Univ Hong Kong, Dept Comp Sci, Pokfulam, Hong Kong, Peoples R China.
C3 University of Hong Kong
RP Huang, XJ (corresponding author), Univ Hong Kong, Dept Comp Sci, Pokfulam, Hong Kong, Peoples R China.
EM xjhuang@cs.hku.hk; jxzhao@cs.hku.hk; bruno@cs.hku.hk
RI dos Santos Oliveira, Bruno Cesar/I-7977-2013
OI Huang, Xuejing/0000-0002-8496-491X
FU Hong Kong Research Grants Council [17209519, 17209520]
FX We are grateful to anonymous reviewers and our colleagues Yaoda Zhou,
   Andong Fan, Yaozhu Sun, Baber Rehman, and Jinhao Tan for their valuable
   comments that helped improve the presentation and our understanding of
   this work. We also thank Yaozhu for implementing our TDOS. This work has
   been sponsored by Hong Kong Research Grants Council projects numbers
   17209519 and 17209520.
CR Ahmed A, 2006, LECT NOTES COMPUT SC, V3924, P69
   Alpuim J, 2017, LECT NOTES COMPUT SC, V10201, P1, DOI 10.1007/978-3-662-54434-1_1
   [Anonymous], 1984, Studies in Logic
   [Anonymous], 1998, P 25 ACM SIGPLAN SIG, DOI DOI 10.1145/268946.268961
   BARBANERA F, 1995, INFORM COMPUT, V119, P202, DOI 10.1006/inco.1995.1086
   BARENDREGT H, 1983, J SYMBOLIC LOGIC, V48, P931, DOI 10.2307/2273659
   Bessai Jan, 2019, Models, Mindsets, Meta. The What, the How, and the Why Not? Essays Dedicated to Bernhard Steffen on the Occasion of His 60th Birthday. Lecture Notes in Computer Science (LNCS 11200), P356, DOI 10.1007/978-3-030-22348-9_21
   Bessai J., 2016, EXTRACTING FORMALLY
   Bi X., 2018, 32 EUR C OBJ OR PROG
   Bi X., 2018, 32 EUR C OBJ OR PROG
   Bi X, 2019, LECT NOTES COMPUT SC, V11423, P381, DOI 10.1007/978-3-030-17184-1_14
   BRACHA G, 1990, SIGPLAN NOTICES, V25, P303, DOI 10.1145/97946.97982
   Büchi M, 2000, LECT NOTES COMPUT SC, V1850, P201
   CARDELLI L, 1985, COMPUT SURV, V17, P471, DOI 10.1145/6041.6042
   Cardelli L., 1992, Extensible Records in a Pure Calculus of Subtyping
   Cardelli Luca., 1991, Mathematical structures in computer science, V1, P3, DOI DOI 10.1017/S0960129500000049
   CASTAGNA G, 1995, INFORM COMPUT, V117, P115, DOI 10.1006/inco.1995.1033
   Castagna G, 2015, ACM SIGPLAN NOTICES, V50, P289, DOI 10.1145/2775051.2676991
   Castagna G, 2014, ACM SIGPLAN NOTICES, V49, P5, DOI 10.1145/2535838.2535840
   Castagna G, 2011, ICFP 11 - PROCEEDINGS OF THE 2011 ACM SIGPLAN: INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P94
   Chakravarty MMT, 2005, ACM SIGPLAN NOTICES, V40, P241, DOI 10.1145/1090189.1086397
   Chakravarty MMT, 2005, ACM SIGPLAN NOTICES, V40, P1, DOI 10.1145/1047659.1040306
   Chambers C, 1999, ACM SIGPLAN NOTICES, V34, P238, DOI 10.1145/320385.320407
   Chlipala A, 2010, ACM SIGPLAN NOTICES, V45, P122, DOI 10.1145/1809028.1806612
   Clifton C, 2000, ACM SIGPLAN NOTICES, V35, P130, DOI 10.1145/354222.353181
   Compagnoni A, 2003, INFORM COMPUT, V184, P242, DOI 10.1016/S0890-5401(03)00062-2
   COOK W, 1989, SIGPLAN NOTICES, V24, P433, DOI 10.1145/74878.74922
   COPPO M, 1981, Z MATH LOGIK, V27, P45, DOI 10.1002/malq.19810270205
   Davies R, 2000, ACM SIGPLAN NOTICES, V35, P198, DOI 10.1145/357766.351259
   Devriese D, 2011, ICFP 11 - PROCEEDINGS OF THE 2011 ACM SIGPLAN: INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P143
   Dunfield J, 2003, LECT NOTES COMPUT SC, V2620, P250
   Dunfield J, 2014, J FUNCT PROGRAM, V24, P133, DOI 10.1017/S0956796813000270
   Ernst E., 2001, ECOOP 2001 - Object-Oriented Programming. 15th European Conference. Proceedings (Lecture Notes in Computer Science Vol.2072), P303
   Feng Y., 2009, P TYP PROOFS PROGR R, P30
   Fisher K., 1995, FUNDAMENTALS COMPUTA
   FREEMAN T, 1991, SIGPLAN NOTICES, V26, P268, DOI 10.1145/113446.113468
   Goguen H., 1995, Typed Lambda Calculi and Applications. Second International Conference on Typed Lambda Calculi and Applications, TLCA '95. Proceedings, P186, DOI 10.1007/BFb0014053
   Goguen H, 1994, THESIS U EDINBURGH U
   Hall CV, 1996, ACM T PROGR LANG SYS, V18, P109, DOI 10.1145/227699.227700
   Harper Robert, 1991, C RECORD 18 ANN ACM, P131, DOI [10.1145/99583.99603, DOI 10.1145/99583.99603]
   Huang X, 2020, 34 EUR C OBJ OR PROG
   KAES S, 1988, LECT NOTES COMPUT SC, V300, P131
   Kniesel G, 1999, LECT NOTES COMPUT SC, V1628, P351
   Knuth D. E., 1971, S SEM ALG LANG
   Kurata T., 1995, Typed Lambda Calculi and Applications. Second International Conference on Typed Lambda Calculi and Applications, TLCA '95. Proceedings, P297, DOI 10.1007/BFb0014060
   Laurent O, 2019, ELECTRON P THEOR COM, P73, DOI 10.4204/EPTCS.293.6
   Laurent O, 2012, FUND INFORM, V121, P203, DOI 10.3233/FI-2012-776
   Leijen D., 2004, UUCS200451 UTCS
   LIEBERMAN H, 1986, SIGPLAN NOTICES, V21, P214, DOI 10.1145/960112.28718
   Luo ZH, 1999, J LOGIC COMPUT, V9, P105, DOI 10.1093/logcom/9.1.105
   Microsoft, 2012, TYPESCRIPT
   Muehlboeck F., 2018, P ACM PROGRAM LANG, DOI DOI 10.1145/3276482
   Muschevici R, 2008, OOPSLA 2008 NASHVILLE, CONFERENCE PROCEEDINGS, P563
   Nierstrasz O, 2006, J OBJECT TECHNOL, V5, P129, DOI 10.5381/jot.2006.5.4.a4
   Odersky M., 1995, Conference Record of FPCA '95. SIGPLAN-SIGARCH-WG2.8. Conference on Functional Programming Languages and Computer Architecture, P135, DOI 10.1145/224164.224195
   Odersky M, 2004, TECHNICAL REPORT
   Oliveira BCDS, 2016, ACM SIGPLAN NOTICES, V51, P364, DOI 10.1145/3022670.2951945
   Oliveira BCDS, 2010, ACM SIGPLAN NOTICES, V45, P341, DOI 10.1145/1932682.1869489
   Ostermann K, 2002, LECT NOTES COMPUT SC, V2374, P89
   Palsberg J, 2004, INFORM COMPUT, V189, P54, DOI 10.1016/j.ic.2003.10.001
   Park G, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290324
   Pierce B, 1997, THEOR COMPUT SCI, V176, P235, DOI 10.1016/S0304-3975(96)00096-5
   PIERCE B, 1991, THESIS CARNEGIE MELL
   Pierce B. C., 1998, Conference Record of POPL '98: 25th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P252, DOI 10.1145/268946.268967
   Pierce B. C, 1989, DECISION PROCEDURE S
   Plotkin Gordon, 1973, LAMBDA DEFINABILITY
   Poll E., 1997, Theoretical Aspects of Computer Software. Third International Symposium, TACS '97. Proceedings, P439, DOI 10.1007/BFb0014562
   Pottier F, 2000, LECT NOTES COMPUT SC, V1782, P320
   Pottinger Garrel, 1980, ESSAYS COMBINATORY L, P561
   Rehof J, 2011, LECT NOTES COMPUT SC, V6690, P169, DOI 10.1007/978-3-642-21691-6_15
   REMY D, 1989, CONFERENCE RECORD OF THE SIXTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P77, DOI 10.1145/75277.75284
   Remy Didier, 1995, WORKSH ADV TYP COMP
   REYNOLDS JC, 1991, LECT NOTES COMPUT SC, V526, P675
   Reynolds John C., 1988, Tech Report, CMU-CS-88-159
   Reynolds John C., 1997, ALGOL LIKE LANGUAGES, P173
   Schaefer Ina., 2011, P 10 INT C ASPECT OR, P43, DOI [10.1145/1960275.1960283, DOI 10.1145/1960275.1960283]
   Schärli N, 2003, LECT NOTES COMPUT SC, V2743, P248
   Siek J. G, 2019, CORRABS190609709
   Siek Jeremy, 2006, WORKSHOP SCHEME FUNC, P81
   Siek JG, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P365, DOI 10.1145/1706299.1706342
   STATMAN R, 1985, INFORM CONTROL, V65, P85, DOI 10.1016/S0019-9958(85)80001-2
   Statman R, 2015, ELECTRON PROC THEOR, P1, DOI 10.4204/EPTCS.177.1
   TAIT WW, 1967, J SYMBOLIC LOGIC, V32, P198, DOI 10.2307/2271658
   Ungar D., 1988, 23 IEEE COMP SOC INT
   WADLER P, 1989, CONFERENCE RECORD OF THE SIXTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P60, DOI 10.1145/75277.75283
   Wadler P., 1998, EXPRESSION PROBLEM P
   Wadler P, 2009, LECT NOTES COMPUT SC, V5502, P1, DOI 10.1007/978-3-642-00590-9_1
   WAND M, 1989, FOURTH ANNUAL SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P92
   Wang Y., 2018, 32 EUR C OBJ OR PROG
   White L, 2015, ELECTRON P THEOR COM, P22, DOI 10.4204/EPTCS.198.2
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
   Xie N., 2020, 34 EUR C OBJ OR PROG
   Zwanenburg J, 1995, RECORD CONCATENATION
   Zwanenburg J, 1997, TYPE SYSTEM RECORD C
NR 94
TC 3
Z9 3
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD NOV 2
PY 2021
VL 31
AR e28
DI 10.1017/S0956796821000186
PG 67
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA XB4IE
UT WOS:000721293300001
DA 2024-07-18
ER

PT J
AU Petricek, T
AF Petricek, Tomas
TI Composable data visualizations
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB Let's say we want to create the two charts in Figure 1. The chart on the left is a bar chart that shows two different values for each bar. The chart on the right consists of two line charts that share the x axis with parts of the timeline highlighted using two different colors.
C1 [Petricek, Tomas] Univ Kent, Sch Comp, Canterbury CT2 7NZ, Kent, England.
C3 University of Kent
RP Petricek, T (corresponding author), Univ Kent, Sch Comp, Canterbury CT2 7NZ, Kent, England.
EM t.petricek@kent.ac.uk
RI Petricek, Tomas/A-5195-2014
OI Petricek, Tomas/0000-0002-7242-2208
FU Google Digital News Initiative; Alan Turing Institute
FX The Compost library is the result of my prolonged effort to create an
   elegant charting API for F#, which was supported, at various stages, by
   Don Syme at Microsoft Research and Howard Mansell at BlueMountain
   Capital. The idea of Compost first came together in discussion with
   Mathias Brandewinder and was (much much later) implemented thanks to the
   support of Google Digital News Initiative and The Alan Turing Institute.
   The final motivation for this paper was an invitation to talk at the
   Lambda Days conference in Krakow and the positive comments from the
   attendees. Finally, the anonymous referees provided valuable feedback
   that made this a better paper.
CR Aisch G., 2015, NEW YORK TIMES
   [Anonymous], 2003, FUN PROGRAMMING
   Bostock M, 2011, IEEE T VIS COMPUT GR, V17, P2301, DOI 10.1109/TVCG.2011.185
   Czaplicki E., 2016, FAREWELL FRP MAKING
   Czaplicki Evan, 2012, ELM CONCURRENT FRP F
   DahlstrAum E., 2011, SCALABLE VECTOR GRAP, V2nd
   Docker T, 2020, DOCK WEBS
   Google, 2020, GOOGL CHARTS INT CHA
   Kennedy A., 2009, Central European Functional Programming School, P268, DOI [DOI 10.1007/978-3-642-17685-2_8, DOI 10.1007/978-3-642-17685-2_8(SPRINGER]
   Krzywinski M, 2009, GENOME RES, V19, P1639, DOI 10.1101/gr.092759.109
   Satyanarayan A, 2017, IEEE T VIS COMPUT GR, V23, P341, DOI 10.1109/TVCG.2016.2599030
   Satyanarayan A, 2016, IEEE T VIS COMPUT GR, V22, P659, DOI 10.1109/TVCG.2015.2467091
   Stolte C, 2002, IEEE T VIS COMPUT GR, V8, P52, DOI 10.1109/2945.981851
   Waskom M., 2014, SEABORN STAT DATA VI
   Wickham H., 2016, Using Gramm. Graph, P1, DOI DOI 10.18637/JSS.V077.B02
   Wickham H, 2010, J COMPUT GRAPH STAT, V19, P3, DOI 10.1198/jcgs.2009.07098
   Wilkinson L.., 1999, The Grammar of Graphics
   Yorgey BA, 2012, ACM SIGPLAN NOTICES, V47, P105, DOI 10.1145/2430532.2364520
NR 18
TC 0
Z9 0
U1 3
U2 14
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD JUN 17
PY 2021
VL 31
AR e13
DI 10.1017/S0956796821000046
PG 18
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA SV4FF
UT WOS:000663775500001
OA hybrid
DA 2024-07-18
ER

PT J
AU Mokhov, A
   Mitchell, N
   Jones, SP
AF Mokhov, Andrey
   Mitchell, Neil
   Peyton Jones, Simon
TI Build systems a la carte: Theory and practice
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB Build systems are awesome, terrifying - and unloved. They are used by every developer around the world, but are rarely the object of study. In this paper, we offer a systematic, and executable, framework for developing and comparing build systems, viewing them as related points in a landscape rather than as isolated phenomena. By teasing apart existing build systems, we can recombine their components, allowing us to prototype new build systems with desired properties.
C1 [Mokhov, Andrey] Newcastle Univ, Sch Engn, Newcastle Upon Tyne, Tyne & Wear, England.
   [Mokhov, Andrey] Jane St, London, England.
   [Mitchell, Neil] Facebook, London, England.
   [Peyton Jones, Simon] Microsoft Res, Cambridge, England.
C3 Newcastle University - UK; Facebook Inc; Microsoft
RP Mokhov, A (corresponding author), Newcastle Univ, Sch Engn, Newcastle Upon Tyne, Tyne & Wear, England.; Mokhov, A (corresponding author), Jane St, London, England.
EM andrey.mokhov@ncl.ac.uk; ndmitchell@gmail.com; simonpj@microsoft.com
OI Mokhov, Andrey/0000-0002-2493-3177
FU Royal Society [IF160117]
FX Andrey Mokhov's research was funded by a Royal Society Industry
   Fellowship IF160117 on the topic "Towards Cloud Build Systems with
   Dynamic Dependency Graphs".
CR Acar UA, 2002, ACM SIGPLAN NOTICES, V37, P247, DOI 10.1145/565816.503296
   Acar UA, 2007, LECT NOTES COMPUT SC, V4421, P458
   Bernstein Daniel J., 2003, REBUILDING TARGET FI
   Capriotti P., 2014, FREE APPL FUNCTORS, V153
   Claessen K., 1999, Journal of Functional Programming, V9, P313, DOI 10.1017/S0956796899003342
   Cormen Thomas H., 2001, INTRO ALGORITHMS
   De Levie R., 2004, ADV EXCEL SCI DATA A
   Demers Alan J., 1981, S PRINCIPLES PROGRAM, P105, DOI DOI 10.1145/567532.567544
   Dolstra E, 2004, USENIX ASSOCIATION PROCEEDINGS OF THE EIGHTEENTH LARGE INSTALLATION SYSTEM ADMINISTRATION CONFERENCE, P79
   Eichmann D., 2019, EXPLORING CLOUD BUIL
   Erdweg S, 2015, ACM SIGPLAN NOTICES, V50, P89, DOI [10.1145/2814270.2814316, 10.1145/2858965.2814316]
   Esfahani H, 2016, 2016 IEEE/ACM 38TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING COMPANION (ICSE-C), P11, DOI 10.1145/2889160.2889222
   Facebook, 2013, BUCK HIGH PERFORMANC
   FELDMAN SI, 1979, SOFTWARE PRACT EXPER, V9, P255, DOI 10.1002/spe.4380090402
   Gandhi V., 2018, TRANSLATION BUILD SY
   Google, 2016, BAZEL
   GRAIL, 2017, REFL SYST INCR DAT P
   Grosskurth A., 2007, THESIS
   Hoyt Berwyn, 2009, FABRICATE BETTER BUI
   Hughes J, 2000, SCI COMPUT PROGRAM, V37, P67, DOI 10.1016/S0167-6423(99)00023-4
   Hykes  Solomon, 2013, DOCKER CONTAINER STA
   Jaskelioff M, 2015, J FUNCT PROGRAM, V25, DOI 10.1017/S0956796815000088
   Jones SP, 2006, ACM SIGPLAN NOTICES, V41, P50
   Kosara R., 2008, DECIMAL EXPANSION 4
   LEVENSHT.VI, 1965, DOKL AKAD NAUK SSSR+, V163, P845
   Liang Sheng, 1995, P 22 ACM SIGPLAN SIG, P333, DOI DOI 10.1145/199448.199528
   Marlow S, 2014, ACM SIGPLAN NOTICES, V49, P325, DOI 10.1145/2692915.2628144
   Martin E., 2017, NINJA BUILD SYSTEM H
   Mcbride C, 2008, J FUNCT PROGRAM, V18, P1, DOI 10.1017/S0956796807006326
   Microsoft, 2011, EXC REC MSDN DOC
   Microsoft, 2017, GIT VIRT FIL SYST
   Mitchell N., 2019, GHC REBUILD TIMES SH
   Mitchell N, 2012, ACM SIGPLAN NOTICES, V47, P55, DOI 10.1145/2398856.2364538
   Mitchell  Neil, 2013, WRITE FIXED POINT BU
   Mokhov A, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3236774
   Mokhov A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341694
   Mokhov A, 2016, ACM SIGPLAN NOTICES, V51, P170, DOI [10.1145/3241625.2976011, 10.1145/2976002.2976011]
   Pennarun A., 2012, REDO TOP DOWN SOFTWA
   Pottier  Francois, 2009, LAZY LEAST FIXED POI
   Radul A., 2009, THESIS
   Shal Mike, 2009, Build system rules and algorithms
   Street Jane, 2018, DUNE COMPOSABLE BUIL
   Street Jane, 2015, INCREMENTAL LIB INCR
   The GHC Team, 2019, GLASG HASK COMP HOM
NR 44
TC 5
Z9 6
U1 0
U2 1
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD APR 21
PY 2020
VL 30
AR e11
DI 10.1017/S0956796820000088
PG 55
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA LI0FH
UT WOS:000529160000001
OA hybrid
DA 2024-07-18
ER

PT J
AU Convent, L
   Lindley, S
   Mcbride, C
   Mclaughlin, C
AF Convent, Lukas
   Lindley, Sam
   Mcbride, Conor
   Mclaughlin, Craig
TI Doo bee doo bee doo
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID HANDLERS
AB We explore the design and implementation of Frank, a strict functional programming language with a bidirectional effect type system designed from the ground up around a novel variant of Plotkin and Pretnar's effect handler abstraction. Effect handlers provide an abstraction for modular effectful programming: a handler acts as an interpreter for a collection of commands whose interfaces are statically tracked by the type system. However, Frank eliminates the need for an additional effect handling construct by generalising the basic mechanism of functional abstraction itself. A function is but the special case of a Frank operator that interprets no commands. Moreover, Frank's operators can be multihandlers which simultaneously interpret commands from several sources at once, without disturbing the direct style of functional programming with values. Effect typing in Frank employs a novel form of effect polymorphism which avoids mentioning effect variables in source code. This is achieved by propagating an ambient ability inwards, rather than accumulating unions of potential effects outwards. With the ambient ability describing the effects that are available at a certain point in the code, it can become necessary to reconfigure access to the ambient ability. A primary goal is to be able to encapsulate internal effects, eliminating a phenomenon we call effect pollution. Moreover, it is sometimes desirable to rewire the effect flow between effectful library components. We propose adaptors as a means for supporting both effect encapsulation and more general rewiring. Programming with effects and handlers is in its infancy. We contribute an exploration of future possibilities, particularly in combination with other forms of rich type systems.
C1 [Convent, Lukas] Univ Lubeck, Lubeck, Germany.
   [Lindley, Sam; Mclaughlin, Craig] Univ Edinburgh, Edinburgh EH8 9YL, Midlothian, Scotland.
   [Lindley, Sam] Imperial Coll London, London SW7 2BU, England.
   [Mcbride, Conor] Univ Strathclyde, Glasgow G1 1XQ, Lanark, Scotland.
   [Mclaughlin, Craig] Univ New South Wales, Kensington, NSW, Australia.
   [Mclaughlin, Craig] CSIRO, Data61, Canberra, ACT, Australia.
C3 University of Lubeck; University of Edinburgh; Imperial College London;
   University of Strathclyde; University of New South Wales Sydney;
   Commonwealth Scientific & Industrial Research Organisation (CSIRO)
RP Convent, L (corresponding author), Univ Lubeck, Lubeck, Germany.
EM convent@isp.uni-luebeck.de; sam.lindley@ed.ac.uk;
   conor.mcbride@strath.ac.uk; c.mclaughlin@unsw.edu.au
OI McLaughlin, Craig/0000-0002-1323-8566; Lindley, Sam/0000-0002-1360-4714;
   McBride, Conor/0000-0003-1487-0886
FU EPSRC [EP/J014591/1, EP/K034413/1, EP/M016951/1]; Royal Society Summer
   Internship; Laboratory for Foundations of Computer Science; EPSRC
   [EP/K034413/1] Funding Source: UKRI
FX We would like to thank the following people: Fred McBride for the idea
   of generalising functions to richer notions of context; Stevan
   Andjelkovic, Bob Atkey, James McKinna, Gabriel Scherer, Cameron Swords,
   and Philip Wadler for helpful feedback; Michael Adams and Adam Gundry
   for answering questions regarding their respective works and for
   providing source code used as inspiration; and Daniel Hillerstrom for
   guidance on OCaml Multicore. This work was supported by EPSRC grants
   EP/J014591/1, EP/K034413/1, and EP/M016951/1, a Royal Society Summer
   Internship, and the Laboratory for Foundations of Computer Science.
CR Abel A, 2013, ACM SIGPLAN NOTICES, V48, P185, DOI [10.1145/2500365.2500591, 10.1145/2544174.2500591]
   Adams M. D., 2014, INDENTATION SENSITIV
   Ahman D, 2017, THESIS
   [Anonymous], 1992, 19th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, DOI DOI 10.1145/143165.143169
   Atkey, 2015, ALGEBRAIC APPROACH T
   Atkey R, 2013, ACM SIGPLAN NOTICES, V48, P197, DOI [10.1145/2544174.2500597, 10.1145/2500365.2500597]
   Bauer A, 2014, LOG METH COMPUT SCI, V10, DOI 10.2168/LMCS-10(4:9)2014
   Bauer A, 2015, J LOG ALGEBR METHODS, V84, P108, DOI 10.1016/j.jlamp.2014.02.001
   Biernacki D, 2018, PACMPL, V2
   Biernacki D, 2019, PACMPL, V3, P1
   Biernacki D, 2020, PACMPL, V4
   Brachthäuser JI, 2017, SCALA'17: PROCEEDINGS OF THE 8TH ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON SCALA, P67, DOI 10.1145/3136000.3136007
   Brachthauser J. I, 2018, PACMPL, V2
   Brachthauser J. I, J FUNCT PROGRAM, V30
   Brady E, 2013, ACM SIGPLAN NOTICES, V48, P133, DOI [10.1145/2500365.2500581, 10.1145/2544174.2500581]
   Brady E, 2013, J FUNCT PROGRAM, V23, P552, DOI 10.1017/S095679681300018X
   Convent L., 2017, THESIS
   Convent L, 2020, FRANK REPOSITORY
   Cooper E, 2007, LECT NOTES COMPUT SC, V4709, P266
   Dolan Stephen, 2015, OCAML WORKSH
   Dunfield J, 2013, ACM SIGPLAN NOTICES, V48, P429, DOI 10.1145/2544174.2500582
   Filinski A., 1999, Conference Record of POPL '99. 26th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P175, DOI 10.1145/292540.292557
   Filinski A, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P483, DOI 10.1145/1706299.1706354
   Forster Y, 2019, J FUNCT PROGRAM, V29, DOI 10.1017/S0956796819000121
   Forster Y, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110257
   Fournet C., 1996, Conference Record of POPL '96: The 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P372, DOI 10.1145/237721.237805
   Geron B, 2019, THESIS
   Gundry A, 2010, MSFP
   Gundry Adam, 2013, THESIS
   Hancock P, 2006, ANN PURE APPL LOGIC, V137, P189, DOI 10.1016/j.apal.2005.05.022
   Hillerstrom D, 2015, THESIS
   Hillerstrom D, 2016, THESIS
   Hillerström D, 2020, J FUNCT PROGRAM, V30, DOI 10.1017/S0956796820000040
   Hillerstrom Daniel, 2016, TYDE ICFP, P15, DOI DOI 10.1145/2976022.2976033
   Huet G., 1997, Journal of Functional Programming, V7, P549, DOI 10.1017/S0956796897002864
   Hughes J, 2004, LECT NOTES COMPUT SC, V3622, P73
   Inostroza P, 2018, ONWARD!'18: PROCEEDINGS OF THE 2018 ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON NEW IDEAS, NEW PARADIGMS, AND REFLECTIONS ON PROGRAMMING AND SOFTWARE, P111, DOI 10.1145/3276954.3276955
   Jensen K., 1974, PASCAL USER MANUAL R, V2nd
   Kammar O, 2013, ACM SIGPLAN NOTICES, V48, P145, DOI [10.1145/2500365.2500590, 10.1145/2544174.2500590]
   Kiselyov O, 2015, ACM SIGPLAN NOTICES, V50, P94, DOI 10.1145/2804302.2804319
   Kiselyov O, 2013, ACM SIGPLAN NOTICES, V48, P59, DOI 10.1145/2503778.2503791
   Kmett E. A., 2015, TRIFECTA 1 5 2
   Leijen D, 2015, PARSEC 3 1 9
   Leijen D, 2018, TECHNICAL REPORT
   Leijen D, 2014, ELECTRON PROC THEOR, P100, DOI 10.4204/EPTCS.153.8
   Leijen D, 2017, ACM SIGPLAN NOTICES, V52, P486, DOI 10.1145/3093333.3009872
   Levy Paul Blain, 2004, SER SEMANTICS STRUCT, V2
   Lindley S., 2014, P 10 ACM SIGPLAN WOR, P47, DOI DOI 10.1145/2633628..2633636
   Lindley S, 2017, ACM SIGPLAN NOTICES, V52, P500, DOI 10.1145/3093333.3009897
   Lucassen J. M., 1988, Conference Record of the Fifteenth Annual ACM Symposium on Principles of Programming Languages, P47, DOI 10.1145/73560.73564
   MacQueen D.B., 1984, LISP FUNCTIONAL PROG, P198
   McBride C., 2012, FRANK 0 3
   McBride C, 2016, SHONKY
   McBride C, 2007, WORKSH EFF TYP THEOR
   Mcbride C, 2008, J FUNCT PROGRAM, V18, P1, DOI 10.1017/S0956796807006326
   McBride C, 2015, LECT NOTES COMPUT SC, V9129, P257, DOI 10.1007/978-3-319-19797-5_13
   McBride Conor, 2011, Ornamental algebras, algebraic ornaments
   Papert S., 1980, MINDSTORMS CHILDREN
   Pierce BC, 2000, ACM T PROGR LANG SYS, V22, P1, DOI 10.1145/345099.345100
   Pirog M, 2019, FSCD LIPICS, V131
   Plotkin G, 2003, APPL CATEGOR STRUCT, V11, P69, DOI 10.1023/A:1023064908962
   Plotkin G, 2002, LECT NOTES COMPUT SC, V2303, P342
   Plotkin G., 2001, Foundations of Software Science and Computation Structures. 4th International Conference, FOSSACS 2001. Held as Part of the Joint European Conferences on Theory and Practice of Software, ETAPS 2001. Proceedings (Lecture Notes in Computer Science Vol.2030), P1
   Plotkin GD, 2013, LOG METH COMPUT SCI, V9, DOI 10.2168/LMCS-9(4:23)2013
   Plotkin Gordon D., 2001, Electr. Notes Theor. Comput. Sci., V45, P332, DOI [10.1016/S1571-0661(04)80970-8, DOI 10.1016/S1571-0661(04)80970-8]
   Pretnar M, 2009, THESIS
   Pretnar M, 2014, LOG METHODS COMPUT S, V10, P1
   Schrijvers T, 2014, PPDP'14: PROCEEDINGS OF THE 16TH INTERNATIONAL SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING, P259, DOI 10.1145/2643135.2643145
   Shivers O, 2011, ICFP 11 - PROCEEDINGS OF THE 2011 ACM SIGPLAN: INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P58
   Swamy N, 2011, ICFP 11 - PROCEEDINGS OF THE 2011 ACM SIGPLAN: INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P15
   Swierstra W, 2008, J FUNCT PROGRAM, V18, P423, DOI 10.1017/S0956796808006758
   TALPIN JP, 1994, INFORM COMPUT, V111, P245, DOI 10.1006/inco.1994.1046
   Tom Schrijvers, 2019, P 12 ACM SIGPLAN INT, P98, DOI DOI 10.1145/3331545.3342595
   van der Ploeg A, 2014, HASKELL, P133
   Vonnegut Kurt., 1982, DEADEYE DICK
   WADLER P, 1989, CONFERENCE RECORD OF THE SIXTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P60, DOI 10.1145/75277.75283
   Wu N, 2014, ACM SIGPLAN NOTICES, V49, P1, DOI 10.1145/2633357.2633358
   Wu N, 2015, LECT NOTES COMPUT SC, V9129, P302, DOI 10.1007/978-3-319-19797-5_15
   Zhang Y, 2019, P ACM PROGRAM LANG, V3
NR 79
TC 17
Z9 17
U1 0
U2 1
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD MAR 31
PY 2020
VL 30
AR e9
DI 10.1017/S0956796820000039
PG 53
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA LB9HW
UT WOS:000524940800001
OA Green Accepted, hybrid
DA 2024-07-18
ER

PT J
AU Botta, N
   Jansson, P
   Ionescu, C
AF Botta, Nicola
   Jansson, Patrik
   Ionescu, Cezar
TI Contributions to a computational theory of policy advice and
   avoidability
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB We present the starting elements of a mathematical theory of policy advice and avoidability. More specifically, we formalize a cluster of notions related to policy advice, such as policy, viability, reachability, and propose a novel approach for assisting decision making, based on the concept of avoidability. We formalize avoidability as a relation between current and future states, investigate under which conditions this relation is decidable and propose a generic procedure for assessing avoidability. The formalization is constructive and makes extensive use of the correspondence between dependent types and logical propositions, decidable judgments are obtained through computations. Thus, we aim for a computational theory, and emphasize the role that computer science can play in global system science.
C1 [Botta, Nicola] Potsdam Inst Climate Impact Res, Transdisciplinary Concepts & Methods Res Domain 4, Potsdam, Germany.
   [Jansson, Patrik; Ionescu, Cezar] Chalmers Univ Technol, Comp Sci & Engn, Gothenburg, Sweden.
   [Jansson, Patrik; Ionescu, Cezar] Univ Gothenburg, Gothenburg, Sweden.
C3 Potsdam Institut fur Klimafolgenforschung; Chalmers University of
   Technology; University of Gothenburg
RP Botta, N (corresponding author), Potsdam Inst Climate Impact Res, Transdisciplinary Concepts & Methods Res Domain 4, Potsdam, Germany.
EM botta@pik-potsdam.de; patrikj@chalmers.se; cezar@chalmers.se
RI Jansson, Patrik/B-1987-2016
OI Jansson, Patrik/0000-0003-3078-1437
FU project GRACeFUL [640954]; project CoeGSS [676547]; European Union's
   Horizon 2020 research and innovation programme
FX This work was partially supported by the projects GRACeFUL (Grant
   agreement no. 640954) and CoeGSS (Grant agreement no. 676547), which
   have received funding from the European Union's Horizon 2020 research
   and innovation programme.
CR [Anonymous], 2013, P AISB CONV 2013 DO
   [Anonymous], PLILPS 95 P 7 INT S
   [Anonymous], REMIND THE EQUATIONS
   [Anonymous], 2008, Decision Analysis
   [Anonymous], 1 ECF
   [Anonymous], P JAC LECT ZUR 27 JU
   [Anonymous], CONFRONTING CLIMATE
   [Anonymous], THESIS
   [Anonymous], 2012, BOTTOM UP STRATEGIC
   [Anonymous], LEVITY CONCEPT COMPL
   [Anonymous], 1999, P IEEE COMP SOC C CI
   [Anonymous], TECHNICAL REPORT
   [Anonymous], INT SERIES COMPUTER
   [Anonymous], ETHICS CLIMATE CHANG
   [Anonymous], GLOB SYST RAP ASS TO
   [Anonymous], PROP FIN T TAX
   [Anonymous], TECHNICAL REPORT
   [Anonymous], BERKELEY ELECT J THE
   [Anonymous], 612003 FEEM
   [Anonymous], 2001, Individual strategy and social structure: an evolutionary theory of institutions
   [Anonymous], CEUR WORKSHOP P
   [Anonymous], CLIMATE CHANGE 2014
   [Anonymous], 1997, INT SERIES COMPUTER
   Bellman R., 1957, Dynamic programming
   Botta N, 2017, LOG METH COMPUT SCI, V13, DOI [10.2168/LMCS-13(1:7)2017, 10.23638/LMCS-13(1:7)2017]
   Brady E, 2013, J FUNCT PROGRAM, V23, P552, DOI 10.1017/S095679681300018X
   Carbone JC, 2009, J ENVIRON ECON MANAG, V58, P266, DOI 10.1016/j.jeem.2009.01.001
   ELLISON G, 1993, ECONOMETRICA, V61, P1047, DOI 10.2307/2951493
   Gintis H, 2007, ECON J, V117, P1280, DOI 10.1111/j.1468-0297.2007.02083.x
   GNESI S, 1981, J ACM, V28, P737, DOI 10.1145/322276.322285
   HARDIN G, 1968, SCIENCE, V162, P1243, DOI 10.1126/science.162.3859.1243
   Helm C, 2003, J PUBLIC ECON, V87, P2737, DOI 10.1016/S0047-2727(02)00138-X
   Holtsmark B, 2012, ECON LETT, V117, P362, DOI 10.1016/j.econlet.2012.05.034
   KYDLAND FE, 1977, J POLIT ECON, V85, P473, DOI 10.1086/260580
   MOGGI E, 1991, INFORM COMPUT, V93, P55, DOI 10.1016/0890-5401(91)90052-4
   Mu SC, 2009, J FUNCT PROGRAM, V19, P545, DOI 10.1017/S0956796809007345
   Sandler T, 2002, FISC STUD, V23, P195
   Sandler T, 2006, ROUT STUD DEFEN PEAC, P13
   Schellnhuber HJ, 1998, EARTH SYSTEMS ANALYSIS, P3
   SPIVEY M, 1990, SCI COMPUT PROGRAM, V14, P25, DOI 10.1016/0167-6423(90)90056-J
   YOUNG HP, 1993, ECONOMETRICA, V61, P57, DOI 10.2307/2951778
NR 41
TC 5
Z9 5
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI CAMBRIDGE
PA EDINBURGH BLDG, SHAFTESBURY RD, CB2 8RU CAMBRIDGE, ENGLAND
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PY 2017
VL 27
BP 1
EP 52
DI 10.1017/S0956796817000156
PG 52
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Social Science Citation Index (SSCI)
SC Computer Science
GA FK5NU
UT WOS:000413547300001
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Bird, RS
AF Bird, Richard S.
TI FUNCTIONAL PEARL <i>How to mingle streams</i>
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
C1 Univ Oxford, Dept Comp Sci, Oxford OX1 3QD, England.
C3 University of Oxford
RP Bird, RS (corresponding author), Univ Oxford, Dept Comp Sci, Wolfson Bldg,Parks Rd, Oxford OX1 3QD, England.
CR Turner DA, 2004, J UNIVERS COMPUT SCI, V10, P751
NR 1
TC 0
Z9 0
U1 0
U2 1
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PY 2015
VL 25
AR e4
DI 10.1017/S0956796815000064
PG 9
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CL9DZ
UT WOS:000357277100002
OA Bronze
DA 2024-07-18
ER

PT J
AU Martin, CE
   Curtis, SA
AF Martin, C. E.
   Curtis, S. A.
TI Fractal image compression
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB This paper describes some experiences of using fractal image compression as the subject of an assignment for a functional programming course using Haskell. The students were fascinated by the reproduction of images from their encodings and engaged well with the exercise which involved only elementary functional programming techniques.
C1 [Martin, C. E.] Oxford Brookes Univ, Oxford OX33 1HX, England.
   [Curtis, S. A.] Univ Oxford, Oxford OX3 7LF, England.
C3 Oxford Brookes University; University of Oxford
RP Martin, CE (corresponding author), Oxford Brookes Univ, Oxford OX33 1HX, England.
EM cemartin@brookes.ac.uk; sharon.curtis@ctsu.ox.ac.uk
OI Martin, Clare/0000-0002-3147-3746
CR [Anonymous], 1999, FRACTAL GEOMETRY NAT
   [Anonymous], ACM SIGCSE B
   [Anonymous], 2003, Haskell 98 language and libraries: the revised report
   Baelde D., 2011, FRACTAL COMPRESSOR
   Barnes C, 2009, ACM T GRAPHIC, V28, DOI 10.1145/1531326.1531330
   Barnsley M. F., 2011, SUPERFRACTALS
   Barnsley M. F., 1992, FRACTAL IMAGE COMPRE
   Barnsley MF., 1993, Fractals Everywhere
   BENTLEY JL, 1975, COMMUN ACM, V18, P509, DOI 10.1145/361002.361007
   CARDOSO J, 1999, FUZZINESS PETRI NETS, P293
   Curtis S. A., 2005, P 6 S TRENDS FUNCT P, P393
   Davoine F, 1997, FRACTALS IN ENGINEERING, P292
   Elliott C., 2003, FUN PROGRAMMING CORN, P131
   Fisher Y., 1995, Fractal Image Compression: Theory and Application
   Frame M., 2002, MATH ASS AM NOTES, V58
   Ghosh S. K., 2002, P IND C COMP VIS GRA
   GIMP, 2012, GNU IM MAN PROGR VER
   Hafner U., 2000, FIASCO
   Hudak Paul., 2000, The Haskell school of expression: learning functional programming through multimedia
   Hugs, 2006, HUGS 98 SYST
   Hutton G., 2007, PROGRAMMING HASKELL
   Jacquin A, 1989, FRACTAL THEORY ITERA
   Jones MP, 2004, J FUNCT PROGRAM, V14, P715, DOI 10.1017/S0956796804005167
   Kanakarakis I., 2011, FRACTAL IMAGE COMPRE
   Kaplan K., 1997, LA TIMES        0512
   LINDENMAYER A, 1968, J THEOR BIOL, V18, P280, DOI 10.1016/0022-5193(68)90079-9
   Liu D, 2007, J ALGORITHMS COMPUT, V1, P171, DOI 10.1260/174830107781389021
   Lu N., 1997, FRACTAL IMAGING
   Mandelbrot B.B., 1977, FRACTALS FORM CHANCE
   Microsoft, 2009, MICR ENC
   Munroe R, 2006, SU DOKU
   OnOne Software, 2013, PERF RES
   Peitgen H. O., 1992, FRACTALS CLASSROOM 2
   PEITGEN HO, 1991, FRACTALS CLASSROOM 1
   Rasala R, 2000, SIGCSE BULL, V32, P185, DOI 10.1145/331795.331852
   Saupe D., 1994, 53 I INF FREIB
   Skiljan I., 2012, IRFANVIEW VERSION 4
   Stanford, 2013, NIFT ASS
   Still M., 2005, DEFINITIVE GUIDE IMA
   Thalabard S., 2005, COMPRESSION FRACTALE
   Thompson S., 2011, CRAFT FUNCTIONAL PRO
   Ullrich H., 1999, LOW BIT RATE IMAGE V
   Vaddella V. R. P., 2010, J APPL COMPUT SCI MA, V9, P21
   Veenadevi S. V., 2011, INT J COMPUT APPL, V30, P33
   Welstead S.T., 1999, Fractal and Wavelet Image Compression Techniques, V40
   Wertheim M., 2006, FIELD GUIDE BUSINESS
NR 46
TC 5
Z9 5
U1 0
U2 9
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD NOV
PY 2013
VL 23
IS 6
BP 629
EP 657
DI 10.1017/S095679681300021X
PG 29
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 300KQ
UT WOS:000330463200001
OA Bronze
DA 2024-07-18
ER

PT J
AU Sperber, M
   Madhavapeddy, A
AF Sperber, Michael
   Madhavapeddy, Anil
TI Commercial users of functional programming workshop report
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB Commercial Users of Functional Programming (CUFP) is an annual workshop that is aimed at the community of software developers who use functional programming in real-world settings. This scribe report covers the talks that were delivered at the 2012 workshop, which was held in association with International Conference on Functional Programming (ICFP) in Copenhagen, Denmark. The goal of the report is to give the reader a sense of what went on, rather than to reproduce the full details of the talks. Videos and slides from all the talks are available online at http://cufp.org.
C1 [Sperber, Michael] Active Grp GmbH, D-70794 Filderstadt, Germany.
   [Madhavapeddy, Anil] Univ Cambridge, Comp Lab, Cambridge CB3 OFD, England.
C3 University of Cambridge
RP Sperber, M (corresponding author), Active Grp GmbH, Hornbergstr 49, D-70794 Filderstadt, Germany.
EM sperber@deinprogramm.de; anil@recoil.org
RI Taheri, Zahra/AAA-6362-2022; Sperber, Michael/JXL-8874-2024
OI Taheri, Zahra/0000-0001-8636-2798; Madhavapeddy,
   Anil/0000-0001-8954-2428
CR Austin JohnL., 1969, SPEECH ACTS ESSAY PH, DOI DOI 10.1017/CBO9781139173438
   Balat V, 2009, ACM SIGPLAN NOTICES, V44, P311, DOI 10.1145/1631687.1596595
   Benque David, 2012, Computer Aided Verification. Proceedings 24th International Conference, CAV 2012, P686, DOI 10.1007/978-3-642-31424-7_50
   Elliott C, 2009, HASKELL'09: PROCEEDINGS OF THE 2009 ACM SIGPLAN HASKELL SYMPOSIUM, P25
   Gamma E., 1994, Design patterns: Elements of reusable object-oriented software
   Lopez M., 2012, P 11 ACM SIGPLAN WOR, P51
   Lopez M., 2012, P 14 S PRINC PRACT D, P185
   McCabe F. G., 1995, Intelligent Agents. ECAI-94 Workshop on Agent Theories, Architectures, and Languages Proceedings, P324
   Ondov BD, 2011, BMC BIOINFORMATICS, V12, DOI 10.1186/1471-2105-12-385
   Rendel T, 2010, ACM SIGPLAN NOTICES, V45, P1
   Reppy JohnH., 1999, CONCURRENT PROGRAMMI
   Syme D, 2011, LECT NOTES COMPUT SC, V6539, P175, DOI 10.1007/978-3-642-18378-2_15
   Vouillon J, 2008, ML'08: PROCEEDINGS OF THE 2008 ACM SIGPLAN WORKSHOP ON ML, P3
   WADLER P, 1989, CONFERENCE RECORD OF THE SIXTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P60, DOI 10.1145/75277.75283
NR 14
TC 1
Z9 1
U1 0
U2 1
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD NOV
PY 2013
VL 23
IS 6
BP 701
EP 712
DI 10.1017/S0956796813000257
PG 12
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 300KQ
UT WOS:000330463200003
OA Bronze
DA 2024-07-18
ER

PT J
AU Oliveira, BCDS
   Gibbons, J
AF Oliveira, Bruno C. D. S.
   Gibbons, Jeremy
TI Scala for generic programmers Comparing Haskell and Scala support for
   generic programming
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB Datatype-generic programming (DGP) involves parametrization of programs by the shape of data, in the form of type constructors such as 'list of'. Most approaches to DGP are developed in pure functional programming languages such as Haskell. We argue that the functional object-oriented language Scala is in many ways a better choice. Not only does Scala provide equivalents of all the necessary functional programming features (such as parametric polymorphism, higher-order functions, higher-kinded type operations, and type- and constructor-classes), but it also provides the most useful features of object-oriented languages (such as subtyping, overriding, traditional single inheritance, and multiple inheritance in the form of traits). Common Haskell techniques for DGP can be conveniently replicated in Scala, whereas the extra expressivity provides some important additional benefits in terms of extensibility and reuse. We illustrate this by comparing two simple approaches in Haskell, pointing out their limitations and showing how equivalent approaches in Scala address some of these limitations. Finally, we present three case studies on how to implement in Scala real DGP approaches from the literature: Hinze's 'Generics for the Masses', Lammel and Peyton Jones's 'Scrap your Boilerplate with Class', and Gibbons's 'Origami Programming'.
C1 [Oliveira, Bruno C. D. S.] Seoul Natl Univ, ROSAEC Ctr, Seoul 151744, South Korea.
   [Gibbons, Jeremy] Univ Oxford, Comp Lab, Oxford OX1 3QD, England.
C3 Seoul National University (SNU); University of Oxford
RP Oliveira, BCDS (corresponding author), Seoul Natl Univ, ROSAEC Ctr, 599 Gwanak Ro, Seoul 151744, South Korea.
EM bruno@ropas.snu.ac.kr; jg@comlab.ox.ac.uk
OI Gibbons, Jeremy/0000-0002-8426-9917
FU UK Engineering and Physical Sciences Research Council [EP/E02128X];
   Korea Ministry of Education, Science and Technology (MEST)/Korea Science
   and Engineering Foundation (KOSEF) [R11-2008-007-01002-0]; EPSRC
   [EP/E02128X/1] Funding Source: UKRI
FX Some of the material from this paper is partly based on the first
   author's DPhil thesis (Oliveira 2007, Chapters 2 and 4); particular
   thanks are due to the DPhil examiners Ralf Hinze and Martin Odersky for
   their insightful advice and constructive comments. Adriaan Moors made
   many useful suggestions; and the members of the Scala mailing list were
   very helpful in answering some questions related to this paper their
   input, and guidance from the anonymous reviewers of the Workshop on
   Generic Programming in 2008 and of this journal, helped to improve the
   presentation. The work reported in this paper has been supported by the
   UK Engineering and Physical Sciences Research Council grant Generic and
   Indexed Programming (EP/E02128X) and the Engineering Research Center of
   Excellence Program of Korea Ministry of Education, Science and
   Technology (MEST)/Korea Science and Engineering Foundation (KOSEF) grant
   number R11-2008-007-01002-0. Some of the work was conducted while the
   first author was at Oxford University Computing Laboratory.
CR AGRAWAL R, 1991, SIGPLAN NOTICES, V26, P113, DOI 10.1145/118014.117963
   [Anonymous], POPL 96
   Brown NCC, 2009, HASKELL'09: PROCEEDINGS OF THE 2009 ACM SIGPLAN HASKELL SYMPOSIUM, P105
   Bruce K., 1995, Theory and Practice of Object Systems, V1, P221
   Buchlovsky P, 2006, ELECTRON NOTES THEOR, V155, P309, DOI 10.1016/j.entcs.2005.11.061
   CHENEY J, 2002, HASKELL 02, P90
   Cockett Robin., 1992, CHARITY
   Cook William R., 1989, PhD dissertation
   DIJKSTRA A, 2005, UUCS2005032 UTR U DE
   Gamma E., 1994, Design patterns: Elements of reusable object-oriented software
   GIBBONS J, 2006, WORKSH GEN PROGR, P1
   Gibbons J., 2003, FUN PROGRAMMING
   GIBBONS J, 2003, FUN PROGRAMMING, P41
   Gibbons J, 2009, WGP'09: PROCEEDINGS OF THE 2009 ACM SIGPLAN WORKSHOP ON GENERIC PROGRAMMING, P85
   Gibbons J, 2009, J FUNCT PROGRAM, V19, P377, DOI 10.1017/S0956796809007291
   Hall CV, 1996, ACM T PROGR LANG SYS, V18, P109, DOI 10.1145/227699.227700
   Harper R., 1994, PRINCIPLES PROGRAMMI, P123, DOI [DOI 10.1145/174675.176927, 10.1145/174675.176927]
   Hinze R, 2000, LECT NOTES COMPUT SC, V1837, P2
   HINZE R, 2000, HASKELL WORKSHOP ELE, V41, P5
   HINZE R, 2002, LNCS, V2793
   HINZE R, 2003, FUN PROGRAMMING
   HINZE R, 2007, LNCS, V4719
   Hinze R, 2006, J FUNCT PROGRAM, V16, P451, DOI 10.1017/S0956796806006022
   Hinze R, 2006, LECT NOTES COMPUT SC, V3945, P13
   Hinze R, 2009, SCI COMPUT PROGRAM, V74, P590, DOI 10.1016/j.scico.2007.10.006
   HUGHES J, 1999, HASKELL WORKSHOP
   JONES SP, 2006, ICFP 06, P50, DOI DOI 10.1145/1159803.1159811
   KAHL W, 2001, HASKELL WORKSHOP, P77
   Lämmel R, 2003, ACM SIGPLAN NOTICES, V38, P26, DOI 10.1145/640136.604179
   LAMMEL R, 2005, ICFP, P204, DOI DOI 10.1145/1086365.1086391
   LAMMEL R, 2000, P WGP 2000, P46
   LEROY X, 1994, P ACM S PRINC PROGR, P109
   Lieberherr K., 1996, ADAPTIVE OBJECT ORIE
   Loh A., 2006, PPDP 2006. Proceedings of the Eighth ACM SIGPLAN Symposium on Principles and Practice of Declarative Programming, P133, DOI 10.1145/1140335.1140352
   LOH A, 2004, THESIS UTRECHT U
   Mcbride C, 2008, J FUNCT PROGRAM, V18, P1, DOI 10.1017/S0956796807006326
   Meertens L., 1992, Formal Aspects of Computing, V4, P413, DOI 10.1007/BF01211391
   MEIJER E, 1991, LECT NOTES COMPUT SC, V523, P124
   MEIJER E, 1995, LNCS, V925
   Mitchell N, 2007, HASKELL'07: PROCEEDINGS OF THE ACM SIGPLAN 2007 HASKELL WORKSHOP, P49, DOI 10.1145/1291201.1291208
   MOORS A, 2007, CODE FOLLOWS TYPE PR
   MOORS A, 2006, WORKSH GEN PROGR, P96
   MOORS A, 2008, OBJECT ORIENTED PROG
   ODERSKY M, 2007, SCALA LANGUAGE SPECI
   ODERSKY M, 2006, IC2006001 EPFL
   ODERSKY M, 2006, POOR MAN S TYPE CLAS
   Odersky M., 2005, OOPSLA, P41
   ODERSKY M, 2001, POPL, P41
   ODERSKY M, 2007, SCALA EXAMPLE
   Odersky M., 2008, PROGRAMMING SCALA CO
   OLIVEIRA BCD, 2009, SCALA GENERIC PROGRA
   OLIVEIRA BCD, 2009, 23 EUR C OBJ OR PROG
   OLIVEIRA BCD, 2005, HASKELL 05, P98
   OLIVEIRA BCD, 2008, OBJECTS UNIFY TYPE C
   OLIVEIRA BCD, 2006, TRENDS FUNCTIONAL PR, P109
   OLIVEIRA BCD, 2007, THESIS U OXFORD
   OLIVEIRA BCD, 2010, SYSTEMS PROGRAMMING
   RODRIGUEZ A, 2008, HASKELL S
   Schärli N, 2003, LECT NOTES COMPUT SC, V2743, P248
   SCHINZ M, 2007, SCALA TUTORIAL JAVA
   SHEARD T, 2002, HASKELL WORKSHOP
   SULZMANN M, 2006, WGP 06, P55
   Wadler Philip., 1993, PROGRAM DESIGN CALCU
   Wadler Philip, 1998, The Expression Problem
   WASHBURN G, 2008, REVISITING HIGHER RA
   Weirich Stephanie., 2006, Proceedings o fthe 2006 ACM SIGPLAN workshop on Haskell, P1, DOI DOI 10.1145/1159842.1159844
   [No title captured]
NR 67
TC 4
Z9 6
U1 0
U2 4
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD MAY-JUL
PY 2010
VL 20
SI SI
BP 303
EP 352
DI 10.1017/S0956796810000171
PN 3-4
PG 50
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 711BF
UT WOS:000286560000004
OA Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Jacobs, B
   Heunen, C
   Hasuo, I
AF Jacobs, Bart
   Heunen, Chris
   Hasuo, Ichiro
TI Categorical semantics for arrows
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
CT Workshop on Mathematically Structured Functional Programming
CY JUL 02, 2006
CL Kuressaare, ESTONIA
AB Arrows are an extension of the well-established notion of a monad in functional-programming languages. This paper presents several examples and constructions and develops denotational semantics of arrows as monoids in categories of bifunctors C(op) x C -> C. Observing similarities to monads - which are monoids in categories of endofunctors C -> C - it then considers Eilenberg-Moore and Kleisli constructions for arrows. The latter yields Freyd categories, mathematically formulating the folklore claim 'Arrows are Freyd categories.'
C1 [Jacobs, Bart; Heunen, Chris; Hasuo, Ichiro] Radboud Univ Nijmegen, Inst Comp & Informat Sci, NL-6500 GL Nijmegen, Netherlands.
C3 Radboud University Nijmegen
RP Jacobs, B (corresponding author), Radboud Univ Nijmegen, Inst Comp & Informat Sci, Postbus 9010, NL-6500 GL Nijmegen, Netherlands.
EM b.jacobs@cs.ru.nl; c.heunen@cs.ru.nl; i.hasuo@cs.ru.nl
RI Heunen, Chris/AAG-8798-2020; Heunen, Chris/G-2558-2010
OI Heunen, Chris/0000-0001-7393-2640; Hasuo, Ichiro/0000-0002-8300-4650
CR Alimarine A., 2005, P 2005 ACM SIGPLAN W, P86
   [Anonymous], 2003, Haskell 98 language and libraries: the revised report
   Benabou J., 2000, Distributors at work
   Benton N, 2003, RAIRO-THEOR INF APPL, V37, P273, DOI 10.1051/ita:2003020
   Borceux F, 1994, ENCY MATH ITS APPL, V50
   BORCEUX F, 1994, ENCY MATH ITS APPL, P51
   Cattani GL, 2005, MATH STRUCT COMP SCI, V15, P553, DOI 10.1017/S0960129505004718
   Day Brian, 1970, Lecture Notes in Math., V137, P1, DOI [10.1007/BFb0060438, DOI 10.1007/BFB0060438]
   Erkok Levent, 2002, P ACM SIGPLAN WORKSH, P29, DOI DOI 10.1145/581690.581693
   Freyd P., 1964, Abelian Categories: An Introduction to the Theory of Functors
   Heunen C, 2006, ELECTRON NOTES THEOR, V158, P219, DOI 10.1016/j.entcs.2006.04.012
   Hughes J, 2004, LECT NOTES COMPUT SC, V3622, P73
   Hughes J, 2000, SCI COMPUT PROGRAM, V37, P67, DOI 10.1016/S0167-6423(99)00023-4
   HYLAND JME, 1988, ANN PURE APPL LOGIC, V40, P135, DOI 10.1016/0168-0072(88)90018-8
   Jacobs B, 2006, INFORM COMPUT, V204, P561, DOI 10.1016/j.ic.2005.03.006
   JACOBS B, 2006, P WORKSH MATH STRUCT
   JACOBS B, 1999, STUDIES LOGIC FDN MA, V141
   Kelly G, 1982, CUP ARCH, V64, DOI DOI 10.1112/BLMS/15.1.96
   Levy PB, 2003, INFORM COMPUT, V185, P182, DOI 10.1016/S0890-5401(03)00088-9
   LI P, 2008, MSCIS0802 U PENNS
   MacLane S., 1978, CATEGORIES WORKING M, V5
   Moggi E., 1989, Proceedings. Fourth Annual Symposium on Logic in Computer Science (Cat. No.89CH2753-2), P14, DOI 10.1109/LICS.1989.39155
   PATERSON R, 2003, CORNERSTONES COMPUTI, P201
   PATERSON R, 2001, P 6 ACM SIGPLAN INT, P229
   POWER J, 1997, LECT NOTES COMPUTER, V1281, P391
   ROBINSON EP, 1997, MATH STRUCT COMPUT S, V7, P453
   Street Ross, 1972, J. Pure Appl. Algebra, V2, P149, DOI [10.1016/0022-4049(72)90019-9, DOI 10.1016/0022-4049(7]
   SWIERSTRA SD, 1996, LNCS, V1129, P184
   Uustalu T, 2005, J UNIVERS COMPUT SCI, V11, P1310
   Vizzotto J, 2006, MATH STRUCT COMP SCI, V16, P453, DOI 10.1017/S0960129506005287
   WADLER P, 1993, NATO ASI F, V118, P233
NR 31
TC 25
Z9 26
U1 0
U2 1
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD MAY-JUL
PY 2009
VL 19
BP 403
EP 438
DI 10.1017/S0956796809007308
PG 36
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 461BW
UT WOS:000267240300007
OA Green Published, Bronze
DA 2024-07-18
ER

PT J
AU Donnelly, K
   Fluet, M
AF Donnelly, Kevin
   Fluet, Matthew
TI Transactional events
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB Concurrent programs require high-level abstractions in order to manage complexity and enable compositional reasoning. In this paper, we introduce a novel concurrency abstraction. dubbed transactional events. which combines first-class synchronous message passing events with all-or-nothing transactions. This combination enables Simple Solutions to interesting problems in concurrent programming. For example, guarded synchronous receive call be implemented as ail abstract transactional event, whereas in other languages it requires a non-abstract. non-modular protocol. As another example, three-way rendezyous can be implemented as in abstract transactional event, which is impossible using first-class events alone. Both solutions are easy to code and easy to reason about.
   The expressive power of transactional events arises from a sequencing combinator whose semantics enforces an all-or-nothing transactional property - either both of the constituent events synchronize in sequence or neither of them synchronizes. This sequencing combinator. along with a non-deterministic choice combinator. gives transactional events the compositional structure of a monad-with plus LIS. We provide a formal semantics for transactional events and Give a detailed account implementation
C1 [Donnelly, Kevin] Boston Univ, Boston, MA 02215 USA.
   [Fluet, Matthew] Toyota Technol Inst, Chicago, IL 60637 USA.
C3 Boston University; Toyota Technological Institute - Chicago
RP Donnelly, K (corresponding author), Boston Univ, Boston, MA 02215 USA.
EM kevind@cs.bu.edu; fluet@tti-c.org
RI Donnelly, Kevin/IQU-1817-2023
CR Adl-Tabatabai AR, 2006, ACM SIGPLAN NOTICES, V41, P26, DOI 10.1145/1133981.1133985
   [Anonymous], LECT NOTES COMPUTER
   Armstrong Joe, 1996, Concurrent Programming in Erlang
   DONNELLY K, 2006, P 11 ACM SIGPLAN INT
   Flatt Matthew., 2004, Proceedings of the ACM SIGPLAN 2004 Conference on Programming Language Design and Implementation 2004, Washington, DC, USA, June 9-11, P47, DOI [10.1145/996841. 996849, DOI 10.1145/996841.996849]
   GASNER ER, 1993, SOFTWARE TRENDS, V1, P61
   GROSSMAN D, 2006, 20060401 U WASH DEP
   HARRIS T, 2003, P 18 ANN ACM SIGPLAN, P388, DOI DOI 10.1145/949305.949340
   Harris T, 2006, ACM SIGPLAN NOTICES, V41, P14, DOI 10.1145/1133981.1133984
   Harris Tim., 2005, PPoPP '05: Proceedings of the tenth ACM SIGPLAN symposium on Principles and practice of parallel programming, P48, DOI DOI 10.1145/1065944.1065952
   Harris Tim., 2005, Proceedings of the 2005 ACM SIGPLAN Workshop on Haskell, Haskell '05, P49
   HERLIHY M., 1993, P 20 ANN INT S COMPU, P289, DOI DOI 10.1145/165123.165164.URL
   HINDMAN B, 2006, P WORKSH MEM SYST PE, P82
   HINZE R, 2000, P 5 ACM SIGPLAN INT, P186
   HOARE CAR, 1978, COMMUN ACM, V21, P666, DOI 10.1145/359576.359585
   JEFFREY A, 1995, IEEE S LOG, P255, DOI 10.1109/LICS.1995.523261
   JEFFREY A, 1995, P 11 C MATH FDN PROG, V1
   Jones S. Peyton, 1996, POPL 96, P295, DOI DOI 10.1145/237721.237794
   Jones S. Peyton, 2001, ENG THEORIES SOFTWAR, P47
   JONES SLP, 1993, P 20 ACM SIGPLAN SIG, P71, DOI DOI 10.1145/158511.158524
   Jones SP, 1999, ACM SIGPLAN NOTICES, V34, P25, DOI 10.1145/301631.301637
   KARLSEN E, 1997, GLASG FUNCT PROGR WO
   KISELYOV O, 2005, P INT C FUNCT PROGR, P192
   Manson J, 2005, REAL TIM SYST SYMP P, P62
   Marlow Simon., 2001, Proceedings of the 2001 ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI), Snowbird, Utah, USA, June 20-22, P274, DOI DOI 10.1145/378795.378858
   MOGGI E, 1991, INFORM COMPUT, V93, P55, DOI 10.1016/0890-5401(91)90052-4
   Moggi E., 1989, Proceedings. Fourth Annual Symposium on Logic in Computer Science (Cat. No.89CH2753-2), P14, DOI 10.1109/LICS.1989.39155
   MORAN A, 1999, ENTCS, V26, P122
   Moss J.E., 1985, NESTED T APPROACH RE
   PANANGADEN P, 1997, MONOGRAPHS COMPUTER, P5
   Pike R., 1989, Computing Systems, V2, P133
   Reppy JohnH., 1999, CONCURRENT PROGRAMMI
   RINGENBURG MF, 2005, P 10 ACM SIGPLAN INT, P92
   RUSSELL G, 2001, P 6 ACM SIGPLAN INT, P157
   SANGIORGI D, PI CALCULUS THEORY M, P1
   Shavit N, 1997, DISTRIB COMPUT, V10, P99, DOI 10.1007/s004460050028
   TURBAK F, 1996, P 1 ACM SIGPLAN INT, P157
   Welc A, 2004, LECT NOTES COMPUT SC, V3086, P519
   Ziarek L, 2006, ACM SIGPLAN NOTICES, V41, P136, DOI 10.1145/1160074.1159822
   2005, MONADPLUS
   2006, GLASGOW HASKELL COMP
NR 41
TC 9
Z9 13
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD SEP-NOV
PY 2008
VL 18
BP 649
EP 706
DI 10.1017/S0956796808006916
PN 5-6
PG 58
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 375KD
UT WOS:000261111700004
OA Bronze
DA 2024-07-18
ER

PT J
AU Gallesio, E
   Serrano, M
AF Gallesio, E
   Serrano, M
TI Skribe: a functional authoring language
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB This paper presents SKRIBE, a functional programming language for authoring documents, especially technical documents such as web pages, technical reports, and API documentation. Executing Skribe programs can produce documents in various formats, such as PostScript, PDF, HTML, Texinfo, or Unix man pages. That is, the very same Skribe program can be used to produce documents in different formats. Skribe is a full featured programming language whose syntax makes it look like a markup language a la HTML.
C1 Univ Nice, F-06903 Sophia Antipolis, France.
   INRIA Sophia Antipolis, F-06903 Sophia Antipolis, France.
C3 Universite Cote d'Azur
RP Gallesio, E (corresponding author), Univ Nice, 930 Route Colles,BP 145, F-06903 Sophia Antipolis, France.
EM Erick.Gallesio@unice.fr; Manuel.Serrano@sophia.inria.fr
CR *AD SYST INC, 1985, POST SCRIPT LANG REF
   GOLDFARB C, 1991, SGML HDB
   Harold E.R., 2001, XML NUTSHELL
   *ISO IEC, 1996, 10179 ISO IEC
   KISELYOV O, IMPLEMENTING METCAST
   KISELYOV O, 2002, BETTER XML PARSER FU
   Knuth Donald Ervin, 1986, The TeXbook
   LERDORF R, PHP POCKET REFERENCE
   LEWIS B, 2002, BRL REFERENCE MANUAL
   MCCARTHY J, 1960, COMMUN ACM, V3, P184, DOI 10.1145/367177.367199
   NORMARK K, 1999, SIGPLAN NOTICES, V34
   NORMARK K, 2002, PROGRAMMATIC WWW AUT
   OSSANA J, 1982, UNIX PROGRAMMERS MAN, P196
   QUEINNEC C, 1993, LITERATE PROGRAMMING
   Ress J., 1998, HIGHER ORDER SYMBOLI, V11
   SITARAM D, SLATEX
   Thiemann P, 2000, LECT NOTES COMPUT SC, V1753, P263
   WALLACE M, 1999, PROGRAMMING LANGUAGE
   *WORLD WID WEB CON, 1998, DOC OBJ MOD DOM LEV
   *WORLD WID WEB CON, 2000, XEXPR SCRIPT LANG XM
   *WORLD WID WEB CON, 2003, XQUERY XML QUERY XQU
NR 21
TC 5
Z9 5
U1 0
U2 1
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 40 WEST 20TH ST, NEW YORK, NY 10011-4211 USA
SN 0956-7968
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD SEP
PY 2005
VL 15
BP 751
EP 770
DI 10.1017/S0956796805005575
PN 5
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 970SE
UT WOS:000232329100005
OA Bronze
DA 2024-07-18
ER

PT J
AU Hinze, R
AF Hinze, R
TI Theoretical pearl - Church numerals, twice!
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB This pearl explains Church numerals, twice. The first explanation links Church numerals to Peano numerals via the well-known encoding of data types in the polymorphic lambda-calculus. This view suggests that Church numerals are folds in disguise. The second explanation, which is more elaborate, but also more insightful, derives Church numerals from first principles, that is, from an algebraic specification of addition and multiplication. Additionally, we illustrate the use of the parametricity theorem by proving exponentiation as reverse application correct.
C1 Univ Bonn, Inst Informat 2, D-53117 Bonn, Germany.
C3 University of Bonn
RP Univ Bonn, Inst Informat 2, Romerstr 164, D-53117 Bonn, Germany.
EM ralf@informatik.uni-bonn.de
CR [Anonymous], 1974, LNCS
   [Anonymous], HDB LOGIC COMPUTER S
   [Anonymous], 1998, Purely Functional Data Structures
   [Anonymous], 1951, ANN MATH STUD
   Bird Richard, 1997, Algebra of Programming
   BOHM C, 1985, THEOR COMPUT SCI, V39, P135, DOI 10.1016/0304-3975(85)90135-5
   Dershowitz Nachum, 1990, Handbook of Theoretical Computer Science, Volume B: Formal Models and Semantics, P243, DOI 10.1016/b978-0-444-88074-1.50011-1
   Gill A., 1993, FPCA '93. Conference on Functional Programming Languages and Computer Architecture, P223, DOI 10.1145/165180.165214
   Girard J.-Y., 1972, PhD thesis
   Hinze R., 2001, International Journal of Foundations of Computer Science, V12, P125, DOI 10.1142/S0129054101000436
   HINZE R, 2000, P 5 ACM SIGPLAN INT, P186
   HUGHES J, 1995, LNCS, V925, P53
   HUGHES RJM, 1986, INFORM PROCESS LETT, V22, P141, DOI 10.1016/0020-0190(86)90059-1
   Hutton G., 1999, J FUNCTIONAL PROGRAM, V9, P355, DOI DOI 10.1017/S0956796899003500
   LEIVANT D, 1983, P 24 ANN IEEE S FDN, P460
   MENDLER NP, 1991, ANN PURE APPL LOGIC, V51, P159, DOI 10.1016/0168-0072(91)90069-X
   MOGGI E, 1991, INFORM COMPUT, V93, P55, DOI 10.1016/0890-5401(91)90052-4
   PARIGOT M, 1992, THEOR COMPUT SCI, V94, P335, DOI 10.1016/0304-3975(92)90042-E
   TAKANO A, 1995, P C FUNCT PROGR LANG, P306
   WADLER P, 1990, PROCEEDINGS OF THE 1990 ACM CONFERENCE ON LISP AND FUNCTIONAL PROGRAMMING, P61, DOI 10.1145/91556.91592
   WADLER P, 1989, 4 INT C FUNCT PROGR
NR 21
TC 8
Z9 9
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD JAN
PY 2005
VL 15
BP 1
EP 13
DI 10.1017/S0956796804005313
PN 1
PG 13
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 890TK
UT WOS:000226533500001
OA Bronze
DA 2024-07-18
ER

PT J
AU New, MS
   Licata, DR
   Ahmed, A
AF New, Max S.
   Licata, Daniel R.
   Ahmed, Amal
TI Gradual type theory
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB Gradually typed languages are designed to support both dynamically typed and statically typed programming styles while preserving the benefits of each. Sound gradually typed languages dynamically check types at runtime at the boundary between statically typed and dynamically typed modules. However, there is much disagreement in the gradual typing literature over how to enforce complex types such as tuples, lists, functions and objects. In this paper, we propose a new perspective on the design of runtime gradual type enforcement: runtime type casts exist precisely to ensure the correctness of certain type-based refactorings and optimizations. For instance, for simple types, a language designer might desire that beta-eta equality is valid. We show that this perspective is useful by demonstrating that a cast semantics can be derived from beta-eta equality. We do this by providing an axiomatic account program equivalence in a gradual cast calculus in a logic we call gradual type theory (GTT). Based on Levy's call-by-push-value, GTT allows us to axiomatize both call-by-value and call-by-name gradual languages. We then show that we can derive the behavior of casts for simple types from the corresponding eta equality principle and the assumption that the language satisfies a property called graduality, also known as the dynamic gradual guarantee. Since we can derive the semantics from the assumption of eta equality, we also receive a useful contrapositive: any observably different cast semantics that satisfies graduality must violate the eta equality. We show the consistency and applicability of our axiomatic theory by proving that a contract-based implementation using the lazy cast semantics gives a logical relations model of our type theory, where equivalence in GTT implies contextual equivalence of the programs. Since GTT also axiomatizes the dynamic gradual guarantee, our model also establishes this central theorem of gradual typing. The model is parameterized by the implementation of the dynamic types, and so gives a family of implementations that validate type-based optimization and the gradual guarantee.
C1 [New, Max S.; Ahmed, Amal] Northeastern Univ, Khoury Coll Comp Sci, Boston, MA 02115 USA.
   [Licata, Daniel R.] Wesleyan Univ, Math & Comp Sci, Middletown, CT 06459 USA.
C3 Northeastern University; Wesleyan University
RP New, MS (corresponding author), Northeastern Univ, Khoury Coll Comp Sci, Boston, MA 02115 USA.
EM maxsnew@umich.edu; dlicata@wesleyan.edu; amal@ccs.neu.edu
RI Ahmed, Amal/IGC-9696-2023
OI New, Max/0000-0001-8141-195X
FU National Science Foundation [CCF-1910522, CCF-1816837, CCF-1453796];
   United States Air Force Research Laboratory [FA9550-15-10053,
   FA9550-16-1-0292]
FX The authors would like to thank Ron Garcia, KenjiMaillard and Gabriel
   Scherer for helpful discussions about this work. We thank the anonymous
   POPL 2019 reviewers for helpful feedback on this article. This material
   is based on research sponsored by the National Science Foundation under
   grants CCF-1910522, CCF-1816837, CCF-1453796 and the United States Air
   Force Research Laboratory under agreement numbers FA9550-15-10053 and
   FA9550-16-1-0292. The views and conclusions contained herein are those
   of the authors and should not be interpreted as necessarily representing
   the official policies or endorsements, either expressed or implied, of
   the United States Air Force Research Laboratory, the U.S. Government, or
   Carnegie Mellon University.
CR Ahman D, 2016, LECT NOTES COMPUT SC, V9634, P36, DOI 10.1007/978-3-662-49630-5_3
   Ahmed A, 2006, LECT NOTES COMPUT SC, V3924, P69
   Bauer Andrej, 2013, Algebra and Coalgebra in Computer Science. 5th International Conference, CALCO 2013. Proceedings: LNCS 8089, P1, DOI 10.1007/978-3-642-40206-7_1
   Boyland J, 2014, 21 WORKSH FDN OBJ OR
   Cimini M, 2017, ACM SIGPLAN NOTICES, V52, P789, DOI 10.1145/3093333.3009863
   Cimini M, 2016, ACM SIGPLAN NOTICES, V51, P443, DOI 10.1145/2914770.2837632
   Dagand PÉ, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S0956796818000011
   Degen M., 2012, Proceedings of the ACM SIGPLAN 2012 workshop on Partial evaluation and program manipulation, PEPM '12, P97
   Eremondi J, 2019, INT C FUNCT PROGR IC
   Findler RB, 2004, LECT NOTES COMPUT SC, V3086, P364
   Findler RB, 2002, ACM SIGPLAN NOTICES, V37, P48, DOI 10.1145/583852.581484
   Fuhrmann C., 1999, Electronic Notes in Theoretical Computer Science, V20, DOI 10.1016/S1571-0661(04)80078-1
   Garcia R, 2016, ACM SIGPLAN NOTICES, V51, P429, DOI 10.1145/2914770.2837670
   Girard J.-Y., 2001, Mathematical Structures in Computer Science, V11, P301, DOI 10.1017/S096012950100336X
   Greenberg M, 2015, ACM SIGPLAN NOTICES, V50, P181, DOI [10.1145/2775051.2676967, 10.1145/2676726.2676967]
   Greenberg M, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P353, DOI 10.1145/1706299.1706341
   Greenman B, 2018, INT C FUNCT PROGR IC
   Griffith Dennis, 2015, INT C FDN SOFTW SCI
   HENGLEIN F, 1994, SCI COMPUT PROGRAM, V22, P197, DOI 10.1016/0167-6423(94)00004-2
   Herman David, 2010, Higher-Order and Symbolic Computation, V23, P59, DOI 10.1007/s10990-011-9066-z
   Hinze R, 2006, LECT NOTES COMPUT SC, V3945, P208
   Igarashi A, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110282
   Levy PB, 2017, ACM SIGPLAN NOTICES, V52, P400, DOI 10.1145/3093333.3009898
   Levy Paul Blain, 2003, CALL BY PUSH VALUE F
   Lindenhovius B, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341715
   Lindley S, 2017, ACM SIGPLAN NOTICES, V52, P500, DOI 10.1145/3093333.3009897
   MOGGI E, 1991, INFORM COMPUT, V93, P55, DOI 10.1016/0890-5401(91)90052-4
   Munch-Maccagnoni G, 2014, LECT NOTES COMPUT SC, V8412, P396
   Nakano H, 2000, IEEE S LOG, P255, DOI 10.1109/LICS.2000.855774
   New MS, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371114
   New MS, 2020, LOG METH COMPUT SCI, V16, DOI 10.23638/LMCS-16(1:7)2020
   New Max S., 2018, INT C FUNCT PROGR IC
   New MaxS., 2018, FSCD
   Pédrot PM, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371126
   Pitts Andrew, 1998, Higher Order Operational Techniques in Semantics, P227
   Siek Jeremy G., 2016, A List of Successes that can Change the World. Essays Dedicated to Philip Wadler on the Occasion of his 60th Birthday. LNCS 9600, P388, DOI 10.1007/978-3-319-30936-1_21
   Siek J, 2009, LECT NOTES COMPUT SC, V5502, P17, DOI 10.1007/978-3-642-00590-9_2
   Siek Jeremy, 2006, WORKSHOP SCHEME FUNC, P81
   Siek JG, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P365, DOI 10.1145/1706299.1706342
   Siek Jeremy G., 2015, LIPICS LEIBNIZ INT P, V32, P274, DOI 10.4230/LIPIcs.SNAPL.2015.274
   Strickland T.Stephen., 2012, Proc. Conf. Object-Oriented Programming Systems, Languages, P943
   Takikawa A, 2016, ACM SIGPLAN NOTICES, V51, P456, DOI 10.1145/2914770.2837630
   Tobin-Hochstadt S, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P395, DOI 10.1145/1328438.1328486
   Tobin-Hochstadt Sam., 2006, Proc. DLS, P964, DOI DOI 10.1145/1176617.1176755
   Vitousek MM, 2017, ACM SIGPLAN NOTICES, V52, P762, DOI 10.1145/3093333.3009849
   Wadler P, 2009, LECT NOTES COMPUT SC, V5502, P1, DOI 10.1007/978-3-642-00590-9_1
   Xu DN, 2009, ACM SIGPLAN NOTICES, V44, P41, DOI 10.1145/1594834.1480889
   Zeilberger N, 2009, THESIS C MELLON U
NR 48
TC 2
Z9 2
U1 0
U2 4
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD OCT 14
PY 2021
VL 31
AR e21
DI 10.1017/S0956796821000125
PG 139
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA XB3TT
UT WOS:000721255100001
OA hybrid
DA 2024-07-18
ER

PT J
AU Mccutchen, M
   Borghouts, J
   Gordon, AD
   Peyton, JS
   Sarkar, A
AF Mccutchen, Matt
   Borghouts, Judith
   Gordon, Andrew D.
   Peyton Jones, Simon
   Sarkar, Advait
TI Elastic sheet-defined functions: Generalising spreadsheet functions to
   variable-size input arrays
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB Sheet-defined functions(SDFs) bring modularity and abstraction to the world of spreadsheets. Alas, end users naturally write SDFs that work overfixed-sizearrays, which limits their reusability. To help end user programmers write more reusable SDFs, we describe a principled approach togeneralisingsuch functions to becomeelastic SDFsthat work over inputs of arbitrary size. We prove that under natural, checkable conditions, our algorithm returns the principal generalisation of an input SDF. We describe a formal semantics and several efficient implementation strategies for elastic SDFs. A user study with spreadsheet users compares the human experience of programming with elastic SDFs to the alternative of relying on array-processing combinators. Our user study finds that the cognitive load of elastic SDFs is lower than for SDFs with map/reduce array combinators, the closest alternative solution.
C1 [Mccutchen, Matt] MIT, Cambridge, MA 02139 USA.
   [Borghouts, Judith] Univ Calif Irvine, Irvine, CA 92717 USA.
   [Gordon, Andrew D.; Peyton Jones, Simon; Sarkar, Advait] Microsoft Res, Redmond, WA USA.
   [Gordon, Andrew D.] Univ Edinburgh, Edinburgh, Midlothian, Scotland.
   [Sarkar, Advait] Univ Cambridge, Cambridge, England.
C3 Massachusetts Institute of Technology (MIT); University of California
   System; University of California Irvine; Microsoft; University of
   Edinburgh; University of Cambridge
RP Mccutchen, M (corresponding author), MIT, Cambridge, MA 02139 USA.
EM matt@mattmccutchen.net; jborghou@uci.edu; adg@microsoft.com;
   simonpj@microsoft.com; advait@microsoft.com
OI Peyton Jones, Simon/0000-0002-6085-1435; McCutchen,
   Matt/0000-0003-4814-5148; Gordon, Andrew/0000-0002-5809-2484; Borghouts,
   Judith/0000-0001-9716-0147
CR Ambler Allen., 1987, 1987 Workshop on Visual Languages, P105
   Blackwell AF, 2004, 2004 IEEE SYMPOSIUM ON VISUAL LANGUAGES AND HUMAN CENTRIC COMPUTING: PROCEEDINGS, P47, DOI 10.1109/VLHCC.2004.10
   Blackwell AF, 2002, IEEE 2002 SYMPOSIA ON HUMAN CENTRIC COMPUTING LANGUAGES AND ENVIRONMENTS, PROCEEDINGS, P2, DOI 10.1109/HCC.2002.1046334
   Bock AA, 2020, J COMPUT LANG, V57, DOI 10.1016/j.cola.2020.100960
   BOSTROM RP, 1990, MIS QUART, V14, P101, DOI 10.2307/249313
   Caine K, 2016, 34TH ANNUAL CHI CONFERENCE ON HUMAN FACTORS IN COMPUTING SYSTEMS, CHI 2016, P981, DOI 10.1145/2858036.2858498
   Erwig M, 2006, J FUNCT PROGRAM, V16, P293, DOI 10.1017/S0956796805005794
   Field A., 2013, DISCOVERING STAT USI
   Green TRG, 1996, J VISUAL LANG COMPUT, V7, P131, DOI 10.1006/jvlc.1996.0009
   Gulwani S, 2017, FOUND TRENDS PROGRAM, V4, P1, DOI 10.1561/2500000010
   HART S G, 1988, P139
   Jansen B., 2015, P 2 CEUR WORKSH 1355
   Jones SP, 2003, ACM SIGPLAN NOTICES, V38, P165, DOI 10.1145/944746.944721
   McCutchen M, 2016, ONWARD!'16: PROCEEDINGS OF THE 2016 ACM INTERNATIONAL SYMPOSIUM ON NEW IDEAS, NEW PARADIGMS, AND REFLECTIONS ON PROGRAMMING AND SOFTWARE, P112, DOI 10.1145/2986012.2986018
   Mendes J., 2017, ABS170702833 CORR
   Mitchell M., 2012, RES DESIGN EXPLAINED, V8th
   MOKHOV A, 2018, PACMPL
   Paine J., 2008, ARXIV08013690
   Pandita R, 2018, 2018 IEEE SYMPOSIUM ON VISUAL LANGUAGES AND HUMAN-CENTRIC COMPUTING (VL/HCC), P95, DOI 10.1109/VLHCC.2018.8506540
   Saha D, 2018, 2018 4TH IEEE INTERNATIONAL WIE CONFERENCE ON ELECTRICAL AND COMPUTER ENGINEERING (IEEE WIECON-ECE 2018), P87, DOI 10.1109/WIECON-ECE.2018.8782911
   Sestoft Peter, 2013, End User Development. 4th International Symposium, IS-EUD 2013. Proceedings. LNCS 7897, P88
   Sestoft P., 2014, SPREADSHEET IMPLEMEN
NR 22
TC 4
Z9 4
U1 0
U2 5
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD AUG 21
PY 2020
VL 30
AR e26
DI 10.1017/S0956796820000234
PG 66
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA NC6LJ
UT WOS:000561328700001
DA 2024-07-18
ER

PT J
AU Perez, I
   Goodloe, AE
AF Perez, Ivan
   Goodloe, Alwyn E.
TI Fault-tolerant functional reactive programming (extended version)
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID ESTEREL; MONADS
AB Highly critical application domains, like medicine and aerospace, require the use of strict design, implementation, and validation techniques. Functional languages have been used in these domains to develop synchronous dataflow programming languages for reactive systems. Causal stream functions and functional reactive programming (FRP) capture the essence of those languages in a way that is both elegant and robust. To guarantee that critical systems can operate under high stress over long periods of time, these applications require clear specifications of possible faults and hazards, and how they are being handled. Modeling failure is straightforward in functional languages, and many functional reactive abstractions incorporate support for failure or termination. However, handling unknown types of faults, and incorporating fault tolerance into FRP, requires a different construction and remains an open problem. This work demonstrates how to extend an existing functional reactive framework with fault tolerance features. At value level, we tag faulty signals with reliability and probability information and use random testing to inject faults and validate system properties encoded in temporal logic. At type level, we tag components with the kinds of faults they may exhibit and use type-level programming to obtain compile-time guarantees of key aspects of fault tolerance. Our approach is powerful enough to be used in systems with realistic complexity, and flexible enough to be used to guide system analysis and design, validate system properties in the presence of faults, perform runtime monitoring, and study the effects of different fault tolerance mechanisms.
C1 [Perez, Ivan] Natl Inst Aerosp, Hampton, VA 23666 USA.
   [Goodloe, Alwyn E.] NASA, Langley Res Ctr, Hampton, VA 23681 USA.
C3 National Institute for Aerospace; National Aeronautics & Space
   Administration (NASA); NASA Langley Research Center
RP Perez, I (corresponding author), Natl Inst Aerosp, Hampton, VA 23666 USA.
EM ivan.perez@nianet.org; a.goodloe@nasa.gov
FU NASA [80LARC17C0004]
FX The authors thank Paul Miner, Wilfredo Torres, Kerianne Hobbs, Frank
   Dedden, and William Edmonson for multiple discussions on fault
   tolerance. The authors also thank Swee Balachandran for suggestions and
   comments on earlier versions of this paper, anonymous reviewers for
   their detailed feedback during numerous reviews, and the journal and
   special issue editors. This material is based upon work funded under
   NASA Cooperative Agreement 80LARC17C0004.
CR [Anonymous], 2008, NASATM2008215108
   AVIZIENIS A, 1976, IEEE T COMPUT, V25, P1304, DOI 10.1109/TC.1976.1674598
   Avizienis A., 1967, AFIPS FALL JOINT COM, V31, P733
   Bärenz M, 2018, PROCEEDINGS OF THE 11TH ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON HASKELL (HASKELL '18), P145, DOI 10.1145/3242744.3242757
   Bedingfield K.L., 1996, NASA REFERENCE PUBLI
   Berry G, 2000, SCI COMPUT PROGRAM, V36, P5, DOI 10.1016/S0167-6423(99)00015-5
   BOUSSINOT F, 1991, P IEEE, V79, P1293, DOI 10.1109/5.97299
   Bracker J, 2016, ACM SIGPLAN NOTICES, V51, P158, DOI 10.1145/3241625.2976012
   Brady E, 2013, ACM SIGPLAN NOTICES, V48, P133, DOI [10.1145/2500365.2500581, 10.1145/2544174.2500581]
   BUTLER RW, 1993, IEEE T SOFTWARE ENG, V19, P3, DOI 10.1109/32.210303
   BUTLER RW, 1996, TECHNICAL REPORT
   Courtney A., 2003, P ACM SIGPLAN WORKSH, P7, DOI DOI 10.1145/871895.871897
   Crow J., 1998, ACM Transactions on Software Engineering and Methodology, V7, P296, DOI 10.1145/287000.287023
   Di Vito B. L., 1999, Dependable Computing for Critical Applications 7, P269, DOI 10.1109/DCFTS.1999.814300
   di Vito B. L., 1996, FME '96: Industrial Benefit and Advances in Formal Methods. Third International Symposium of Formal Methods Europe. Proceedings, P160
   Di Vito B. L., 1996, TECHNICAL REPORT
   Dormoy Francois-Xavier, 2008, EMB REAL TIM SOFTW S
   Driscoll K., 2008, REAL SYSTEM FAILURES
   Dutertre B, 1997, IEEE T SOFTWARE ENG, V23, P267, DOI 10.1109/32.588520
   Elliott C, 1997, ACM SIGPLAN NOTICES, V32, P263, DOI 10.1145/258949.258973
   Epstein J, 2011, ACM SIGPLAN NOTICES, V46, P118, DOI 10.1145/2096148.2034690
   Erwig M, 2006, J FUNCT PROGRAM, V16, P21, DOI 10.1017/S0956796805005721
   HALBWACHS N, 1991, P IEEE, V79, P1305, DOI 10.1109/5.97300
   Hughes J, 2000, SCI COMPUT PROGRAM, V37, P67, DOI 10.1016/S0167-6423(99)00023-4
   Katsumata S, 2014, ACM SIGPLAN NOTICES, V49, P633, DOI 10.1145/2535838.2535846
   Kiselyov O, 2013, ACM SIGPLAN NOTICES, V48, P59, DOI 10.1145/2503778.2503791
   Klein G, 2014, ACM T COMPUT SYST, V32, DOI 10.1145/2560537
   Klein G, 2009, SOSP'09: PROCEEDINGS OF THE TWENTY-SECOND ACM SIGOPS SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P207
   Kshemkalyani Ajay D., 2011, Distributed computing: principles, algorithms, and systems
   LAMPORT L, 1982, ACM T PROGR LANG SYS, V4, P382, DOI 10.1145/357172.357176
   Liang Sheng, 1995, P 22 ACM SIGPLAN SIG, P333, DOI DOI 10.1145/199448.199528
   LINCOLN P, 1994, COMPASS '94 - PROCEEDINGS OF THE NINTH ANNUAL CONFERENCE ON COMPUTER ASSURANCE, P107, DOI 10.1109/CMPASS.1994.318462
   Lincoln P., 1993, Digest of Papers FTCS-23 The Twenty-Third International Symposium on Fault-Tolerant Computing, P402, DOI 10.1109/FTCS.1993.627343
   Maier P, 2014, ACM SIGPLAN NOTICES, V49, P65, DOI [10.1145/2633357.2633363, 10.1145/2775050.2633363]
   Nilsson, 2016, MATH PROPERTIES MONA
   Nilsson, 2015, P 27 S IMPL APPL FUN
   Nilsson H, 2002, P 2002 ACM SIGPLAN W, P51, DOI DOI 10.1145/581690.581695
   Norbisrath Ulrich, 2000, S IMPL APPL FUNCT LA, P107
   Orchard D. A., 2014, CORR
   Orchard D, 2014, ACM SIGPLAN NOTICES, V49, P13, DOI [10.1145/2775050.2633368, 10.1145/2633357.2633368]
   OWRE S, 1992, LECT NOTES ARTIF INT, V607, P748
   Owre S., 1996, Computer Aided Verification. 8th International Conference, CAV '96. Proceedings, P411
   Owre S., 1999, TECHNICAL REPORT
   Pagano B, 2009, ICFP'09: PROCEEDINGS OF THE 2009 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P215
   Pena, 2013, TRENDS FUNCTIONAL PR, P247
   Perez I., 2017, P 10 ACM SIGPLAN INT
   Perez I., 2019, 7 IEEE INT C SPAC MI
   Perez I., J FUNC PROGRAM
   Perez I, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110246
   Perez I, 2016, ACM SIGPLAN NOTICES, V51, P33, DOI [10.1145/2976002.2976010, 10.1145/3241625.2976010]
   Pfeifer H., 1999, Dependable Computing for Critical Applications 7, P207, DOI 10.1109/DCFTS.1999.814297
   Pike L., 2012, LNCS, P310, DOI DOI 10.1007/978-3-642-29860-8_23
   Pike L, 2010, LECT NOTES COMPUT SC, V6418, P345, DOI 10.1007/978-3-642-16612-9_26
   RTCA Inc, 2011, TECHNICAL REPORT
   SPIVEY M, 1990, SCI COMPUT PROGRAM, V14, P25, DOI 10.1016/0167-6423(90)90056-J
   Steve Vinoski, 2007, IEEE INTERNET COMPUT, V11, P6
   Stewart R., 2016, J FUNC PROGRAM, V26
   Stewart R, 2013, THESIS
   Swinburne TD, 2018, PHYS REV MATER, V2, DOI 10.1103/PhysRevMaterials.2.053802
   Trinder P, 2000, TRENDS IN FUNCTIONAL PROGRAMMING, VOL 2, P103
   WADLER P, 1985, LECT NOTES COMPUT SC, V201, P113
   Xu LB, 2016, PROCEEDINGS OF 2016 IEEE 18TH INTERNATIONAL CONFERENCE ON HIGH PERFORMANCE COMPUTING AND COMMUNICATIONS; IEEE 14TH INTERNATIONAL CONFERENCE ON SMART CITY; IEEE 2ND INTERNATIONAL CONFERENCE ON DATA SCIENCE AND SYSTEMS (HPCC/SMARTCITY/DSS), P711, DOI 10.1109/HPCC-SmartCity-DSS.2016.0104
NR 62
TC 2
Z9 2
U1 0
U2 3
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD MAY 7
PY 2020
VL 30
AR e12
DI 10.1017/S0956796820000118
PG 41
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA LK2AW
UT WOS:000530661200001
DA 2024-07-18
ER

PT J
AU Hinze, R
   Martin, C
AF Hinze, Ralf
   Martin, Clare
TI Batcher's odd-even merging network revealed
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
C1 [Hinze, Ralf] Radboud Univ Nijmegen, Inst Comp & Informat Sci, NL-6525 EC Nijmegen, Netherlands.
   [Martin, Clare] Oxford Brookes Univ, Dept Comp & Commun Technol, Oxford OX33 1HX, England.
C3 Radboud University Nijmegen; Oxford Brookes University
RP Hinze, R (corresponding author), Radboud Univ Nijmegen, Inst Comp & Informat Sci, NL-6525 EC Nijmegen, Netherlands.
EM ralf@cs.ru.nl; cemartin@brookes.ac.uk
OI Martin, Clare/0000-0002-3147-3746
CR [Anonymous], 1998, The art of computer programming: Sorting and searching
   Batcher K. E., 1968, P AFIPS SPRING JOINT, P307, DOI [DOI 10.1145/1468075.1468121, 10.1145/1468075. 1468121]
   Bove A, 2006, LECT NOTES COMPUT SC, V3839, P82
   DAY NA, 1999, P 1999 HASK WORKSH
   Feijen W., 1990, FORMAL DEV PROGRAMS, P139
   Hinze R, 2009, ICFP'09: PROCEEDINGS OF THE 2009 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P3
   Reynolds J. C., 1983, Information Processing 83. Proceedings of the IFIP 9th World Computer Congress, P513
   Wadler P., 1989, FPCA 89 P 4 INT C FU, P347
NR 8
TC 0
Z9 0
U1 0
U2 2
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD JUN 4
PY 2018
VL 28
AR e14
DI 10.1017/S0956796818000163
PG 13
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GI0QV
UT WOS:000434075400001
OA Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Swords, C
   Sabry, A
   Tobin-Hochstadt, S
AF Swords, Cameron
   Sabry, Amr
   Tobin-Hochstadt, Sam
TI An extended account of contract monitoring strategies as patterns of
   communication
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB Contract systems have come to play a vital role in many aspects of software engineering. This has resulted in a wide variety of approaches to enforcing contracts-ranging from the straightforward pre-condition and post-condition checking of Eiffel to lazy, optional, and parallel enforcement strategies. Each of these approaches has its merits, but each has required ground-up development of an entire contract monitoring system. We present a unified approach to understanding this variety, while also opening the door to as-yet-undiscovered strategies. By observing that contracts are fundamentally about communication between a program and a monitor, we reframe contract checking as communication between concurrent processes. This brings out the underlying relations between widely studied enforcement strategies, including strict and lazy enforcement as well as concurrent approaches, including new contracts and strategies. We show how each of these can be embedded into a core calculus, and demonstrate a proof (via simulation) of correctness for one such encoding. Finally, we show that our approach suggests new monitoring approaches and contracts not previously expressible.
C1 [Swords, Cameron; Sabry, Amr; Tobin-Hochstadt, Sam] Indiana Univ, Comp Sci, Bloomington, IN 47405 USA.
C3 Indiana University System; Indiana University Bloomington
RP Swords, C (corresponding author), Indiana Univ, Comp Sci, Bloomington, IN 47405 USA.
EM cswords@indiana.edu; sabry@indiana.edu; samth@indiana.edu
OI Sabry, Amr/0000-0002-1025-7331; Tobin-Hochstadt, Sam/0000-0003-1302-6499
FU National Science Foundation [1117635, 1217454, 1540276, 1518844];
   National Security Agency; Direct For Computer & Info Scie & Enginr;
   Division of Computing and Communication Foundations [1540276] Funding
   Source: National Science Foundation; Division of Computing and
   Communication Foundations; Direct For Computer & Info Scie & Enginr
   [1117635, 1217454, 1518844] Funding Source: National Science Foundation
FX This research was funded by the National Science Foundation under grant
   numbers 1117635, 1217454, 1540276, 1518844, and the National Security
   Agency.
CR Ahmed A., 2017, P 22 INT C FUNCT PRO
   Ahmed A., 2011, P 38 ANN S PRINC PRO
   Ambler A. L., 1977, SIGPLAN Notices, V12, P1, DOI 10.1145/390017.808306
   Barnett M., 2005, P 2004 INT C CONSTR
   Blume M., 2004, P 9 INT C FUNCT PROG
   Chen F., 2007, P 22 ANN C OBJ OR PR
   Chitil O., 2003, P S IMPL APPL FUNCT
   Chitil O., 2012, P 17 INT C FUNCT PRO
   Chitil O., 2006, P S IMPL APPL FUNCT
   Degen M., 2009, P ARB PROGR ATPS ATP
   Degen M., 2012, P 2012 WORKSH PART E
   Degen M, 2010, J LOGIC ALGEBR PROGR, V79, P515, DOI 10.1016/j.jlap.2010.07.006
   Dimoulas C., 2011, P 38 ANN S PRINC PRO
   Dimoulas C., 2013, P 2013 INT C OBJ OR
   Dimoulas C., 2009, P 11 C PRINC PRACT D
   Dimoulas C., 2012, P EUR S PROGR ESOP 1
   Dimoulas C, 2011, ACM T PROGR LANG SYS, V33, DOI 10.1145/2039346.2039348
   Disney T., 2011, P 16 INT C FUNCT PRO
   Ergun F., 1998, P 13 ANN ACM S THEOR
   Findler R. B, 2002, P 7 INT C FUNCT PROG
   Findler R. B., 2006, P 8 INT C FUNCT LOG
   Findler R. B., 2008, P IMPL APPL FUNCT LA
   Findler R. B., 2014, P 19 INT C FUNCT PRO
   Flanagan C., 2006, P 33 S PRINC PROGR L
   Flatt M., 2010, PLTTR20101 PLT INC
   Freeman Tim, 1994, THESIS
   Friedman D., 1976, 52 IND U COMP SCI DE
   Greenberg M., 2015, P 42 S PRINC PROGR L
   Greenberg M., 2010, P 37 S PRINC PROGR L
   Guha A., 2007, Proceedings of the 2007 symposium on Dynamic languages, DLS '07, P29, DOI [10.1145/1297081.1297089, DOI 10.1145/1297081.1297089]
   Havelund K., 2001, TECHNICAL REPORT
   Herman D., 2007, TRENDS FUNCTIONAL PR, pXXVIII
   Hickey R., 2018, CLOJURE CORE SPEC DO
   Hinze R., 2006, P 8 INT C FUNCT LOG
   Ingerman P. Z., 1961, COMMUN ACM, V4
   Jeffrey A., 1998, Higher Order Operational Techniques in Semantics
   Keil M., 2015, P 20 INT C FUNCT PRO
   Meyer B., 1992, Eiffel: The Language
   Moore S., 2016, P 2016 INT C OBJ OR
   Nguyen P. C., 2014, P 19 INT C FUNCT PRO
   Ou XM, 2004, INT FED INFO PROC, V155, P437
   Owens Z., 2012, P 1 ACM SIGPLAN WORK
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Reppy J. H., 1993, INT LECT SERIES 1991
   Reppy JohnH., 1999, CONCURRENT PROGRAMMI
   Sekiyama T., 2015, P 42 S PRINC PROGR L
   Shinnar A., 2011, TECHNICAL REPORT
   Siek J. G., 2009, P EUR S PROGR ESOP 0
   Siek Jeremy, 2006, WORKSHOP SCHEME FUNC, P81
   Strickland T. S., 2012, P ACM INT C OBJ OR P
   Swords C., 2015, P 20 INT C FUNCT PRO
   Vitousek M. M., 2014, P DYN LANG S DLS 14
   Wadler P, 2009, LECT NOTES COMPUT SC, V5502, P1, DOI 10.1007/978-3-642-00590-9_1
   Xu D. N., 2009, P 36 ANN S PRINC PRO
NR 54
TC 2
Z9 2
U1 0
U2 1
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD MAR 7
PY 2018
VL 28
AR e4
DI 10.1017/S0956796818000047
PG 47
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA FY6LS
UT WOS:000426959600001
OA Green Submitted, hybrid
DA 2024-07-18
ER

PT J
AU Piróg, M
   Staton, S
AF Pirog, Maciej
   Staton, Sam
TI Backtracking with cut via a distributive law and left-zero monoids
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB We employ the framework of algebraic effects to augment the list monad with the pruning cut operator known from Prolog. We give two descriptions of the resulting monad: as the monad of free left-zero monoids, and as a composition via a distributive law of the list monad and the 'unary idempotent operation' monad. The scope delimiter of cut arises as a handler.
C1 [Pirog, Maciej] Univ Wroclaw, Wroclaw, Poland.
   [Staton, Sam] Univ Oxford, Oxford, England.
C3 University of Wroclaw; University of Oxford
RP Piróg, M (corresponding author), Univ Wroclaw, Wroclaw, Poland.
EM maciej.adam.pirog@gmail.com
OI Pirog, Maciej/0000-0002-5889-3388
FU Royal Society University Research Fellowship; EPSRC [EP/N007387/1];
   EPSRC [EP/N007387/1] Funding Source: UKRI
FX Research supported by a Royal Society University Research Fellowship and
   EPSRC Grant EP/N007387/1
CR [Anonymous], 1998, Categories for the working mathematician
   Baader Franz, 1998, TERM REWRITING ALL
   Barr M., 1985, GRUNDLEHREN MATH WIS, V278, pxiii
   Beck J., 1969, SEMINAR TRIPLES CATE, P119, DOI [10.1007/BFb0083084, DOI 10.1007/BFB0083084]
   BILLAUD M, 1990, THEOR COMPUT SCI, V71, P193, DOI 10.1016/0304-3975(90)90197-P
   Bird R, 2006, J FUNCT PROGRAM, V16, P671, DOI 10.1017/S0956796806006058
   Cheng E, 2011, ARXIV11123076
   Hinze Ralf, 2012, Mathematics of Program Construction. Proceedings 11th International Conference, MPC 2012, P324, DOI 10.1007/978-3-642-31113-0_16
   Hinze R, 2000, ACM SIGPLAN NOTICES, V35, P186, DOI 10.1145/357766.351258
   Hyland M, 2006, THEOR COMPUT SCI, V366, P144, DOI 10.1016/j.tcs.2006.07.007
   Hyland M, 2006, THEOR COMPUT SCI, V357, P70, DOI 10.1016/j.tcs.2006.03.013
   Jaskelioff M, 2010, THEOR COMPUT SCI, V411, P4441, DOI 10.1016/j.tcs.2010.09.011
   Piróg M, 2016, ELECTRON P THEOR COM, P23, DOI 10.4204/EPTCS.207.2
   Plotkin Gordon, 2004, Electronic Notes in Theoretical Computer Science, V73, P149, DOI DOI 10.1016/J.ENTCS.2004.08.008
   Plotkin GD, 2013, LOG METH COMPUT SCI, V9, DOI 10.2168/LMCS-9(4:23)2013
NR 15
TC 4
Z9 4
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PY 2017
VL 27
AR e17
DI 10.1017/S0956796817000077
PG 15
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA FA5JD
UT WOS:000405478300001
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Sivaramakrishnan, KC
   Ziarek, L
   Jagannathan, S
AF Sivaramakrishnan, K. C.
   Ziarek, Lukasz
   Jagannathan, Suresh
TI MultiMLton: A multicore-aware runtime for standard ML
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB MULTIMLTON is an extension of the MLton compiler and runtime system that targets scalable, multicore architectures. It provides specific support for ACML, a derivative of Concurrent ML that allows for the construction of composable asynchronous events. To effectively manage asynchrony, we require the runtime to efficiently handle potentially large numbers of lightweight, short-lived threads, many of which are created specifically to deal with the implicit concurrency introduced by asynchronous events. Scalability demands also dictate that the runtime minimize global coordination. MULTIMLTON therefore implements a split-heap memory manager that allows mutators and collectors running on different cores to operate mostly independently. More significantly, MULTIMLTON exploits the premise that there is a surfeit of available concurrency in ACML programs to realize a new collector design that completely eliminates the need for read barriers, a source of significant overhead in other managed runtimes. These two symbiotic features - a thread design specifically tailored to support asynchronous communication, and a memory manager that exploits lightweight concurrency to greatly reduce barrier overheads - are MULTIMLTON's key novelties. In this article, we describe the rationale, design, and implementation of these features, and provide experimental results over a range of parallel benchmarks and different multicore architectures including an 864 core Azul Vega 3, and a 48 core non-coherent Intel SCC (Single-Cloud Computer), that justify our design decisions.
C1 [Sivaramakrishnan, K. C.; Jagannathan, Suresh] Purdue Univ, W Lafayette, IN 47907 USA.
   [Ziarek, Lukasz] SUNY Buffalo, Buffalo, NY 14260 USA.
C3 Purdue University System; Purdue University; State University of New
   York (SUNY) System; State University of New York (SUNY) Buffalo
RP Sivaramakrishnan, KC (corresponding author), Purdue Univ, W Lafayette, IN 47907 USA.
EM chandras@purdue.edu; lziarek@buffalo.edu; suresh@cs.purdue.edu
FU National Science Foundation [CCF-1216613, CCF-0811631, CNS-0958465];
   Division of Computing and Communication Foundations; Direct For Computer
   & Info Scie & Enginr [1216613] Funding Source: National Science
   Foundation
FX We sincerely thank Michael Sperber and the anonymous reviewers for their
   requests for clarification, constructive criticism, and numerous
   detailed suggestions that have helped improve our presentation. This
   work is supported by the National Science Foundation under grants
   CCF-1216613, CCF-0811631, and CNS-0958465, and by gifts from Intel and
   Samsung Corporation.
CR Agrawal K, 2007, PROCEEDINGS OF THE 2007 ACM SIGPLAN SYMPOSIUM ON PRINCIPLES AND PRACTICE OF PARALLEL PROGRAMMING PPOPP'07, P112, DOI 10.1145/1229428.1229448
   Anderson TA, 2010, ACM SIGPLAN NOTICES, V45, P21
   APPEL AW, 1989, SOFTWARE PRACT EXPER, V19, P171, DOI 10.1002/spe.4380190206
   Armstrong Joe, 1996, Concurrent Programming in Erlang
   Auhagen Sven., 2011, Proceedings of the 2011 ACM SIGPLAN Workshop on Memory Systems Performance and Correctness, MSPC '11, P51
   Bacon DF, 2003, ACM SIGPLAN NOTICES, V38, P285, DOI 10.1145/640128.604155
   BAKER HG, 1978, COMMUN ACM, V21, P280, DOI 10.1145/359460.359470
   Baker M, 2000, LECT NOTES COMPUT SC, V1800, P552
   Biagioni E., 1998, Higher-Order and Symbolic Computation, V11, P209, DOI 10.1023/A:1010016600604
   Blackburn StephenM., 2004, Proceedings of the 4th International Symposium on Memory Management, ISMM '04, P143, DOI DOI 10.1145/1029873.1029891
   Blumofe RD, 1999, J ACM, V46, P720, DOI 10.1145/324133.324234
   Boehm H., 2012, GARBAGE COLLECTOR C
   Brooks RodneyA., 1984, Proceedings of the 1984 ACM Symposium on LISP and Functional Programming, LFP '84, P256
   Bruggeman C, 1996, ACM SIGPLAN NOTICES, V31, P99, DOI 10.1145/249069.231395
   Chailloux Emmanuel, 1996, J FUNCT PROGRAM, V6, P621, DOI [10.1017/S0956796800001891, DOI 10.1017/S0956796800001891]
   Chaudhuri A, 2009, ACM SIGPLAN NOTICES, V44, P269, DOI 10.1145/1631687.1596589
   Doligez D., 1993, Conference Record of the Twentieth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P113, DOI 10.1145/158511.158611
   FEELEY M, 1990, PROCEEDINGS OF THE 1990 ACM CONFERENCE ON LISP AND FUNCTIONAL PROGRAMMING, P119, DOI 10.1145/91556.91606
   Felleisen Matthias, 1986, P IFIP TC 2WG22 WORK
   Frigo M, 1998, ACM SIGPLAN NOTICES, V33, P212, DOI 10.1145/277652.277725
   GOLDMAN R, 1988, SIGPLAN NOTICES, V23, P111, DOI 10.1145/62116.62127
   Goldstein SC, 1996, J PARALLEL DISTR COM, V37, P5, DOI 10.1006/jpdc.1996.0104
   Harris Tim., 2005, Proceedings of the 2005 ACM SIGPLAN Workshop on Haskell, Haskell '05, P49
   Hot-Split, 2013, CONT STACKS GO
   Intel, 2012, SCC PLATF OV
   Johnston WM, 2004, ACM COMPUT SURV, V36, P1, DOI 10.1145/1013208.1013209
   Jones R, 2005, Fifth IEEE International Workshop on Source Code Analysis and Manipulation, Proceedings, P129, DOI 10.1109/SCAM.2005.1
   KRANZ DA, 1989, SIGPLAN NOTICES, V24, P81, DOI 10.1145/74818.74825
   Lea Doug, 1999, Concurrent Programming in Java. Second Edition: Design Principles and Patterns, V2nd
   Li GD, 2008, PPOPP'08: PROCEEDINGS OF THE 2008 ACM SIGPLAN SYMPOSIUM ON PRINCIPLES AND PRACTICE OF PARALLEL PROGRAMMING, P283, DOI 10.1145/1345206.1345257
   Marlow S, 2011, ACM SIGPLAN NOTICES, V46, P71, DOI 10.1145/2096148.2034685
   McKay DonaldP., 1980, P 1980 LISP C, P29
   MILLER JS, 1988, INT J PARALLEL PROG, V17, P367, DOI 10.1007/BF01383881
   MLton, 2012, MLTON COMP RUNT SYST
   MOHR E, 1990, PROCEEDINGS OF THE 1990 ACM CONFERENCE ON LISP AND FUNCTIONAL PROGRAMMING, P185, DOI 10.1145/91556.91631
   Nikhil R., 2001, Implicit parallel programming in pH
   Raymond D. J., 2000, LINUX J, V2000
   Reppy J.H., 2007, Concurrent Programming in ML
   Reppy J, 2009, ACM SIGPLAN NOTICES, V44, P257, DOI 10.1145/1631687.1596588
   Sansom PatrickM., 1991, Proceedings of the Workshop on the Parallel Implementation of Functional Languages, P283
   Sivaramakrishnan KC, 2012, ACM SIGPLAN NOTICES, V47, P49, DOI 10.1145/2426642.2259005
   Sivaramakrishnan KC, 2010, DAMP'10: PROCEEDINGS OF THE 2010 ACM SIGPLAN WORKSHOP ON DECLARATIVE ASPECTS OF MULTICORE PROGRAMMING, P63
   Sivaramakrishnan K. C., 2013, COMPOSABLE SCHEDULAR
   Stack T., 2013, ABANDONING SEGMENTED
   STEELE GL, 1975, COMMUN ACM, V18, P495, DOI 10.1145/361002.361005
   Steensgaard B., 2000, P 2 INT S MEMORY MAN, P18
   Svensson H, 2010, ERLANG 2010: PROCEEDINGS OF THE 2010 ACM SIGPLAN, ERLANG WORKSHOP, P23
   Syme Don., 2007, Expert F#
   Tang Hong., 2001, Proc. of 15th ACM International Conference on Supercomputing, P381
   Wand Mitchell., 1980, LISP FUNCTIONAL PROG, P19, DOI DOI 10.1145/800087.802786
   Ziarek L, 2011, ACM SIGPLAN NOTICES, V46, P628, DOI 10.1145/1993316.1993572
NR 51
TC 17
Z9 18
U1 0
U2 4
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD NOV
PY 2014
VL 24
IS 6
BP 613
EP 674
DI 10.1017/S0956796814000161
PG 62
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CA8JP
UT WOS:000349165400003
OA Bronze
DA 2024-07-18
ER

PT J
AU Achten, P
   Van Eekelen, M
   De Mol, M
   Plasmeijer, R
AF Achten, Peter
   Van Eekelen, Marko
   De Mol, Maarten
   Plasmeijer, Rinus
TI EditorArrow: An arrow-based model for editor-based programming
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID IDATA
AB State-based interactive applications, whether they run on the desktop or as a web application, can be considered as collections of interconnected editors of structured values that allow users to manipulate data. This is the view that is advocated by the GEC and iData toolkits, which offer a high level of abstraction to programming desktop and web GUI applications respectively. Special features of these toolkits are that editors have shared, persistent state, and that they handle events individually. In this paper we cast these toolkits within the Arrow framework and present EditorArrow: a single, unified semantic model that defines shared state and event handling. We study the properties of EditorArrow, and of editors in particular. Furthermore, we present the definedness properties of the combinators. A reference implementation of the EditorArrow model is given with some small program examples. We discuss formal reasoning about the model using the proof assistant Sparkle. The availability of this tool has proved to be indispensable in this endeavor.
C1 [Achten, Peter; Van Eekelen, Marko; Plasmeijer, Rinus] Radboud Univ Nijmegen, Inst Comp & Informat Sci, NL-6525 ED Nijmegen, Netherlands.
   [Van Eekelen, Marko] Open Univ Netherlands, Sch Comp Sci, Heerlen, Netherlands.
   [De Mol, Maarten] Univ Twente, NL-7500 AE Enschede, Netherlands.
C3 Radboud University Nijmegen; Open University Netherlands; University of
   Twente
RP Achten, P (corresponding author), Radboud Univ Nijmegen, Inst Comp & Informat Sci, NL-6525 ED Nijmegen, Netherlands.
EM P.Achten@cs.ru.nl; M.vanEekelen@cs.ru.nl; M.J.deMol@utwente.nl;
   R.Plasmeijer@cs.ru.nl
RI plasmeijer, rinus/D-1844-2012; Achten, Peter/AGM-7996-2022; van Eekelen,
   Marko C.J.D./F-5757-2010
CR Achten P, 2004, LECT NOTES COMPUT SC, V3622, P210
   Achten P, 2004, LECT NOTES COMPUT SC, V3302, P262
   Achten P, 2004, LECT NOTES COMPUT SC, V3057, P39
   ACHTEN P, 2003, LNCS, V3145
   [Anonymous], 1980, LNCS
   [Anonymous], 1985, INT SERIES COMP SCI
   Baeten J.C.M., 1990, Cambridge Tracts in Theoretical Computer Science, V18
   CARLSSON M, 1993, P ACM C FUNCT PROGR
   Carlsson Magnus., 1998, THESIS CHALMERS U TE
   Cartwright R., 1982, P 2 S LISP FUNCT PRO, P253
   Courtney A., 2001, P 2001 HASK WORKSH
   Courtney A., 2004, THESIS YALE U
   Courtney A., 2003, P ACM SIGPLAN WORKSH, P7, DOI DOI 10.1145/871895.871897
   de Mol M, 2002, LECT NOTES COMPUT SC, V2312, P55
   de Mol M., 2009, THESIS U NIJMEGEN NE
   de Mol M, 2008, LECT NOTES COMPUT SC, V5161, P41, DOI 10.1007/978-3-540-88059-2_2
   Dowse M, 2005, LECT NOTES COMPUT SC, V3474, P177
   Eliot C., 1997, P ICFP 07, P163
   Groote J. F., 2001, HDB PROCESS ALGEBRA, P1151, DOI [DOI 10.1016/B978-044482830-9/50035-7., 10.1016/b978-044482830-9/50035-7, DOI 10.1016/B978-044482830-9/50035-7]
   Hanus M., 2006, PPDP 2006. Proceedings of the Eighth ACM SIGPLAN Symposium on Principles and Practice of Declarative Programming, P27, DOI 10.1145/1140335.1140341
   Hudak P, 2003, LECT NOTES COMPUT SC, V2638, P159
   Hudak P., 2007, HOPL 3, DOI [10.1145/1238844.1238856, DOI 10.1145/1238844.1238856]
   Hughes J, 2000, SCI COMPUT PROGRAM, V37, P67, DOI 10.1016/S0167-6423(99)00023-4
   Paterson R, 2001, ACM SIGPLAN NOTICES, V36, P229, DOI 10.1145/507669.507664
   Plasmeijer R, 1999, ACM SIGPLAN NOTICES, V34, P23, DOI 10.1145/606666.606670
   Plasmeijer R., 2005, Central European Functional Programming School. First Summer School, CEFP 2005. Revised Selected Lectures (Lecture Notes in Computer Science Vol. 4164), P1
   Plasmeijer R., 2002, Clean language report version 2.1
   Plasmeijer R., 2006, LNCS, V4449, P108
   Plasmeijer R, 2006, LECT NOTES COMPUT SC, V4015, P106
   Plasmeijer R, 2006, LECT NOTES COMPUT SC, V3945, P242
   Shneiderman B., 2017, DESIGNING USER INTER
   Thiemann P., 2002, Practical Aspects of Declarative Languages. 4th International Symposium, PADL 2002. Proceedings (Lecture Notes in Computer Science Vol.2257), P192
   van Eekelen M, 1997, LECT NOTES COMPUT SC, V1258, P106
   van Eekelen Marko, 2005, LNCS, V4015, P37
   van Groningen J, 2010, ACM SIGPLAN NOTICES, V45, P49, DOI 10.1145/2088456.1863530
   van Kesteren R., 2004, TRENDS FUNCTIONAL PR, P1
NR 36
TC 1
Z9 1
U1 0
U2 3
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD MAR
PY 2013
VL 23
IS 2
BP 185
EP 224
DI 10.1017/S0956796812000421
PG 40
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 115LR
UT WOS:000316814200004
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Neis, G
   Dreyer, D
   Rossberg, A
AF Neis, Georg
   Dreyer, Derek
   Rossberg, Andreas
TI Non-parametric parametricity
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID RECURSIVE TYPES
AB Type abstraction and intensional type analysis are features seemingly at odds-type abstraction is intended to guarantee parametricity and representation independence, while type analysis is inherently non-parametric. Recently, however, several researchers have proposed and implemented "dynamic type generation" as a way to reconcile these features. The idea is that, when one defines an abstract type, one should also be able to generate at runtime a fresh type name, which may be used as a dynamic representative of the abstract type for purposes of type analysis. The question remains: in a language with non-parametric polymorphism, does dynamic type generation provide us with the same kinds of abstraction guarantees that we get from parametric polymorphism?
   Our goal is to provide a rigorous answer to this question. We define a step-indexed Kripke logical relation for a language with both non-parametric polymorphism ( in the form of type-safe cast) and dynamic type generation. Our logical relation enables us to establish parametricity and representation independence results, even in a non-parametric setting, by attaching arbitrary relational interpretations to dynamically generated type names. In addition, we explore how programs that are provably equivalent in a more traditional parametric logical relation may be "wrapped" systematically to produce terms that are related by our non-parametric relation, and vice versa. This leads us to develop a "polarized" variant of our logical relation, which enables us to distinguish formally between positive and negative notions of parametricity.
C1 [Neis, Georg; Dreyer, Derek; Rossberg, Andreas] Max Planck Inst Software Syst MPI SWS, D-66123 Saarbrucken, Germany.
C3 Max Planck Society
RP Neis, G (corresponding author), Max Planck Inst Software Syst MPI SWS, Campus E1-4, D-66123 Saarbrucken, Germany.
EM neis@mpi-sws.org; dreyer@mpi-sws.org; rossberg@mpi-sws.org
CR Abadi M., 1995, Journal of Functional Programming, V5, P111, DOI 10.1017/S095679680000126X
   Ahmed A, 2006, LECT NOTES COMPUT SC, V3924, P69
   Ahmed Amal., 2008, Proceedings of the 13th ACM SIGPLAN International Conference on Functional Programming, P157
   Ahmed Amal, 2009, Proceedings of the 36th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, POPL 2009, Savannah, GA, USA, January 21-23, 2009, P340, DOI DOI 10.1145/1594834.1480925
   Ahmed Amal J., 2004, Ph. D. Dissertation
   Appel AW, 2001, ACM T PROGR LANG SYS, V23, P657, DOI 10.1145/504709.504712
   Benton Nick, 2009, P TLDI 09 2009 ACM S, DOI [10.1145/1481861.1481864, DOI 10.1145/1481861.1481864]
   Birkedal L, 1999, INFORM COMPUT, V155, P3, DOI 10.1006/inco.1999.2828
   Girard J.-Y., 1972, PhD thesis
   Grossman D, 2000, ACM T PROGR LANG SYS, V22, P1037, DOI 10.1145/371880.371887
   Harper R, 1999, INFORM PROCESS LETT, V70, P1, DOI 10.1016/S0020-0190(99)00036-8
   HARPER R, 1995, P 22 ACM S PRINC PRO, P130
   Matthews J, 2008, LECT NOTES COMPUT SC, V4960, P16
   Mitchell J.C., 1986, C RECORD 13 ANN ACM, P263, DOI [10.1145/512644.512669, DOI 10.1145/512644.512669]
   MITCHELL JC, 1988, ACM T PROGR LANG SYS, V10, P470, DOI 10.1145/44501.45065
   NEIS G, 2009, THESIS U SAARLANDES
   PITTS A, 2005, ADV TOPICS TYPES PRO, pCH2
   PITTS AM, 1998, PUBLICATIONS NEWTON, P227
   PITTS AM, 1993, LECT NOTES COMPUTER, V711, P122
   Reynolds J. C., 1983, Information Processing 83. Proceedings of the IFIP 9th World Computer Congress, P513
   ROSSBERG A, 2004, P S TRENDS FUNCT PRO, V5, P79
   ROSSBERG A, 2008, P MATH FDN PROGR SEM, P313
   Rossberg A., 2007, THESIS U SAARLANDES
   Rossberg Andreas., 2003, PPDP '03, P241, DOI DOI 10.1145/888251.888274
   SEWELL P, 2001, P 28 ACM SIGPLAN SIG, P236
   Sewell P, 2007, J FUNCT PROGRAM, V17, P547, DOI 10.1017/S0956796807006442
   Sumii E., 2003, Journal of Computer Security, V11, P521
   Sumii E, 2007, THEOR COMPUT SCI, V375, P169, DOI 10.1016/j.tcs.2006.12.032
   Sumii E, 2007, J ACM, V54, DOI 10.1145/1284320.1284325
   Vytiniotis Dimitrios., 2005, Proceedings of the 2005 ACM SIGPLAN international workshop on Types in languages design and implementation, TLDI '05, P13
   Wadler P., 1989, FPCA 89 P 4 INT C FU, P347
   Washburn G, 2005, IEEE S LOG, P62
   Weirich S, 2004, J FUNCT PROGRAM, V14, P681, DOI 10.1017/S0956796804005179
   Weirich S, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P227, DOI 10.1145/1926385.1926411
NR 34
TC 13
Z9 13
U1 0
U2 2
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD JUL-SEP
PY 2011
VL 21
SI SI
BP 497
EP 562
DI 10.1017/S0956796811000165
PN 4-5
PG 66
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 828XN
UT WOS:000295538000005
OA Bronze
DA 2024-07-18
ER

PT J
AU Carette, J
   Kiselyov, O
   Shan, CC
AF Carette, Jacques
   Kiselyov, Oleg
   Shan, Chung-Chieh
TI Finally tagless, partially evaluated: Tagless staged interpreters for
   simpler typed languages
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID COMPUTATION
AB We have built the first family of tagless interpretations for a higher-order typed object language in a typed metalanguage (Haskell or ML) that require no dependent types, generalized algebraic data types, or postprocessing to eliminate tags. The statically type-preserving interpretations include an evaluator, a compiler (or staged evaluator), a partial evaluator, and call-by-name and call-by-value continuation-passing style (CPS) transformers. Our principal technique is to encode de Bruijn or higher-order abstract syntax using combinator functions rather than data constructors. In other words, we represent object terms not in an initial algebra but using the coalgebraic structure of the lambda-calculus. Our representation also simulates inductive maps from types to types, which are required for typed partial evaluation and CPS transformations. Our encoding of an object term abstracts uniformly over the family of ways to interpret it, yet statically assures that the interpreters never get stuck. This family of interpreters thus demonstrates again that it is useful to abstract over higher-kinded types.
C1 [Carette, Jacques] McMaster Univ, Hamilton, ON L8S 4L8, Canada.
   [Shan, Chung-Chieh] Rutgers State Univ, Piscataway, NJ 08855 USA.
C3 McMaster University; Rutgers University System; Rutgers University New
   Brunswick
RP Carette, J (corresponding author), McMaster Univ, Hamilton, ON L8S 4L8, Canada.
EM carette@mcmaster.ca; oleg@pobox.org; ccshan@rutgers.edu
OI Carette, Jacques/0000-0001-8993-9804
CR [Anonymous], 1995, C RECORD POPL 95 22, DOI DOI 10.1145/199448.199507
   [Anonymous], 1993, Partial Evaluation and Automatic Program Generation
   Asai K, 2002, NEW GENERAT COMPUT, V20, P27, DOI 10.1007/BF03037258
   BAARS AI, 2002, ICFP, P157
   Balat Vincent., 2004, Proceedings of the 31st ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, POPL 2004, Venice, Italy, January 14-16, P64, DOI [10.1145/964001.964007, DOI 10.1145/964001.964007]
   Bawden A., 1999, Proceedings of the 1999 ACM SIGPLAN. Workshop on Partial Evaluation and Semantics-Based Program Manipulation (PEPM'99), P4
   Benton N, 2005, J FUNCT PROGRAM, V15, P503, DOI 10.1017/S0956796804005398
   Berarducci A, 1996, LECT NOTES PURE APPL, V180, P339
   BIRKEDAL L, 1993, 9322 DIKU U COP
   BJESSE P, 1998, ICFP P ACM INT C FUN, V34, P174
   BOHM C, 1985, THEOR COMPUT SCI, V39, P135, DOI 10.1016/0304-3975(85)90135-5
   BONDORF A, 1991, SCI COMPUT PROGRAM, V16, P151, DOI 10.1016/0167-6423(91)90002-F
   Calcagno C, 2004, LECT NOTES COMPUT SC, V2986, P79
   Carette J, 2005, LECT NOTES COMPUT SC, V3676, P256
   Carette J, 2007, LECT NOTES COMPUT SC, V4807, P222
   CHEN CY, 2003, PEPM 03, P20
   Consel C., 1993, Proceedings of the ACM SIGPLAN Symposium on Partial Evaluation and Semantics-Based Program Manipulation. PEPM'93, P145, DOI 10.1145/154630.154645
   Danvy O, 2003, LECT NOTES COMPUT SC, V2618, P335
   Danvy O, 1998, LECT NOTES COMPUT SC, V1443, P908, DOI 10.1007/BFb0055112
   Danvy O, 1996, P 23 ANN ACM S PRINC, P242
   Danvy Olivier., 1992, MATH STRUCT COMP SCI, V2, P361, DOI DOI 10.1017/S0960129500001535
   Davies R, 2001, J ACM, V48, P555, DOI 10.1145/382780.382785
   Filinski Andrzej, 1994, P 21 ANN ACM S PRINC, P446, DOI DOI 10.1145/174675.178047
   Fiore Marcelo P., 2002, P 4 ACM SIGPLAN INT, P26, DOI [DOI 10.1145/571157, DOI 10.1145/571157.571161]
   FOGARTY S, 2007, P 2007 ACM SIGPLAN W
   Futamura Y., 1971, Systems, Compurters, Controls, V25, P45
   Gomard C. K., 1991, Journal of Functional Programming, V1, P21, DOI 10.1017/S0956796800000058
   GUILLEMETTE LJ, 2006, ELECT NOTES THEORETI, V174, P40
   HARPER R, 1995, P 22 ACM S PRINC PRO, P130
   HINDLEY R, 1969, T AM MATH SOC, V146, P29, DOI 10.2307/1995158
   Hinze R, 2004, SCI COMPUT PROGRAM, V51, P117, DOI 10.1016/j.scico.2003.07.001
   HOFER C, 2008, ACM C GEN PROGR COMP
   HOLST CK, 1988, PARTIAL EVALUATION M, P167
   Hongwei Xi, 2003, SIGPLAN Notices, V38, P224, DOI 10.1145/640128.604150
   Honsell F., 1999, Mathematical Structures in Computer Science, V9, P403, DOI 10.1017/S096012959900287X
   HONSELL F, 1995, LECT NOTES COMPUTER, V902, P249
   Hudak P., 1996, ACM COMPUT SURV, V28, P196, DOI [10.1145/242224.242477, DOI 10.1145/242224.242477]
   HUGHES J, 1998, ACM COMPUT SURV, V30, P1
   JACOBS B, 2007, INTRO COALGEBRA MATH
   Jones N. D., 1989, LISP SYMBOLIC COMPUT, V2, P9, DOI 10.1007/BF01806312
   JONES ND, 1994, HDB LOGIC COMPUTER S, P527
   JONES P, 2006, ICFP 06, P50
   LANDIN PJ, 1966, COMMUN ACM, V9, P157, DOI 10.1145/365230.365257
   LAUFER K, 1993, P 4 ANN OOPSLA ECOOP
   Makholm H, 2000, LECT NOTES COMPUT SC, V1924, P129
   Miller D., 1987, IEEE S LOG PROGR SAN, P379
   MILNER R, 1978, J COMPUT SYST SCI, V17, P348, DOI 10.1016/0022-0000(78)90014-4
   MOGENSEN T, 1995, P PEPM 95, P39
   Mogensen T. AE., 1992, Journal of Functional Programming, V2, P345, DOI 10.1017/S0956796800000423
   MOGGI E, 1991, INFORM COMPUT, V93, P55, DOI 10.1016/0890-5401(91)90052-4
   Moors A, 2008, OOPSLA 2008 NASHVILLE, CONFERENCE PROCEEDINGS, P423
   Nanevski A, 2005, J FUNCT PROGRAM, V15, P893, DOI 10.1017/S095679680500568X
   NANEVSKI A, T COMPUT LO IN PRESS, V9, P1
   NANEVSKI A, 2002, ICFP, P206
   NIELSON F, 1988, INFORM COMPUT, V76, P29, DOI 10.1016/0890-5401(88)90041-7
   Nielson F., 1988, P ACM S PRINCIPLES P, P98
   Nielson  Flemming, 1992, 2 LEVEL FUNCTIONAL L
   Oliveira BrunoC. d. S., 2005, HASKELL 05, P98, DOI DOI 10.1145/1088348.1088358
   PASALIC E, 2002, ICFP, P157
   PFENNING F, 1988, SIGPLAN NOTICES, V23, P199, DOI 10.1145/960116.54010
   PFENNING F, 1991, THEOR COMPUT SCI, V89, P137, DOI 10.1016/0304-3975(90)90109-U
   Plotkin G. D., 1977, Theoretical Computer Science, V5, P223, DOI 10.1016/0304-3975(77)90044-5
   Plotkin G. D., 1975, Theoretical Computer Science, V1, P125, DOI 10.1016/0304-3975(75)90017-1
   RAMSEY N, 2005, ELECT NOTES THEORETI
   Reynolds J.W., 1975, Megadrilogica, V2, P1
   Reynolds John C., 1974, LECTURE NOTES COMPUT, V14, P141
   Reynolds John C., 1972, ACM 72, V2, P717, DOI DOI 10.1023/A:1010027404223
   RHIGER M, 2001, THESIS U AARHUS DENM
   Shao Z, 2005, ACM T PROGR LANG SYS, V27, P1, DOI 10.1145/1053468.1053469
   SHAO Z, 1998, ICFP 1998, V34, P141
   Sheard T, 2002, ACM SIGPLAN NOTICES, V37, P60, DOI 10.1145/636517.636528
   SPERBER M, 1996, LECT NOTES COMPUTER, V110, P465
   SPERBER M, 1997, P ACM SIGPLAN 97 C P, P215
   Sumii E., 2001, Higher-Order and Symbolic Computation, V14, P101, DOI 10.1023/A:1012984529382
   Taha W, 2001, LECT NOTES COMPUT SC, V2053, P257
   Taha W, 1999, ACM SIGPLAN NOTICES, V34, P34, DOI 10.1145/328691.328697
   TAHA W, 2003, POPL 03, P26
   Thiemann P., 1999, Journal of Functional Programming, V9, P483, DOI 10.1017/S0956796899003469
   THIEMANN P, 1997, REIHE INFORMATIK AKT, P582
   Washburn G, 2008, J FUNCT PROGRAM, V18, P87, DOI 10.1017/S0956796807006557
   Yang Z, 2004, THEOR COMPUT SCI, V315, P151, DOI 10.1016/j.tcs.2003.11.017
NR 81
TC 140
Z9 147
U1 0
U2 2
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD SEP
PY 2009
VL 19
BP 509
EP 543
DI 10.1017/S0956796809007205
PN 5
PG 35
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 506GM
UT WOS:000270762600003
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Chlipala, A
AF Chlipala, Adam
TI Modular development certified program verifiers with a proof assistant
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB We report oil all experience using the Coq proof assistant to develop a program verification tool with a machine-checked proof of full correctness. The verifier is able to prove memory safety of x86 machine code programs compiled from code that uses algebraic datatypes. The tool's Soundness theorem is expressed in tern-is of the bit-level semantics of x86 programs, so its correctness depends oil very few assumptions. We take advantage of Coq's support for programming with dependent types and modules ill the structure of the development. The approach is based oil developing a library of reusable functors for transforming a verifier at one level of abstraction into a verifier at a lower level. Using this library, it is possible to prototype a verifier based on a new type system with a minimal amount of work. while obtaining a very strong Soundness theorem about the final product.
C1 Univ Calif Berkeley, Berkeley, CA 94720 USA.
C3 University of California System; University of California Berkeley
RP Chlipala, A (corresponding author), Univ Calif Berkeley, Berkeley, CA 94720 USA.
EM adamc@cs.berkeley.edu
FU National Defense Science and Engineering Graduate Fellowship; National
   Science Foundation [CCF-0524784, CCR-0234689, CNS-0509544, CCR-02-25610]
FX This research vas supported in part by it National Defense Science and
   Engineering Graduate Fellowship and National Science Foundation Grants
   CCF-0524784, CCR-0234689. CNS-0509544 and CCR-02-25610.
CR [Anonymous], PLDI 98
   [Anonymous], 1992, 19th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, DOI DOI 10.1145/143165.143169
   [Anonymous], P ACM WORKSH COMP SU
   Appel AW, 2001, IEEE S LOG, P247, DOI 10.1109/LICS.2001.932501
   Bertot Y, 2001, LECT NOTES COMPUT SC, V2102, P14
   Bertot Y., 2004, TEXT THEORET COMP S
   Besson F, 2006, THEOR COMPUT SCI, V364, P273, DOI 10.1016/j.tcs.2006.08.012
   Cachera D, 2005, THEOR COMPUT SCI, V342, P56, DOI 10.1016/j.tcs.2005.06.004
   Chang BYE, 2006, LECT NOTES COMPUT SC, V3855, P174
   CHANG BYE, 2005, TLDI 05
   CHLIPALA AJ, 2006, ICFP 2006, P160
   Cousot P., 1977, Proceedings of the 4th Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages (POPL), P234
   CRARY K, 2003, POPL 03, P198
   Delahaye D, 2000, LECT NOTES ARTIF INT, V1955, P85, DOI 10.1007/3-540-44404-1_7
   DETLEFS DL, 1998, 159 SRC COMP SYST RE
   Dijkstra E. W., 1976, A Discipline of Pro-gramming
   FENG XY, 2007, TLDI 07
   FILLIATRE JC, 2004, ESOP 04, P370
   Hamid NA, 2003, J AUTOM REASONING, V31, P191, DOI 10.1023/B:JARS.0000021012.97318.e9
   *INT, 2006, IA 32 INT ARCH SOFTW, V2
   Klein G, 2001, CONCURR COMP-PRACT E, V13, P1133, DOI 10.1002/cpe.597
   LERNER S, 2005, P 32 ACM SIGPLAN SIG, P364
   Leroy X, 2006, ACM SIGPLAN NOTICES, V41, P42, DOI 10.1145/1111320.1111042
   LEROY X, 2006, ESOP 06, P54
   MacQueen D.B., 1984, LISP FUNCTIONAL PROG, P198
   Martin-Lof P., 1996, Nordic J. Philosophical Logic, V1, P11
   McBride C, 2004, J FUNCT PROGRAM, V14, P69, DOI 10.1017/S0956796803004829
   Morrisett G, 1999, ACM T PROGR LANG SYS, V21, P527, DOI 10.1145/319301.319345
   MORRISETT G, 2003, JFP, V13, P957
   Necula G.C., 1997, 24 ANN S PRINCIPLES, P106
   SHEARD T, 2004, OOPSLA 04, P116
   SMITH F, 2000, EUR S PROGR, P366
   Smith J., 1995, INT WORKSH TYP PROOF, V996, P39, DOI [DOI 10.1007/3-540-60579-7_3, 10.1007/3-540- 60579-7]
   WESTBROOK E, 2005, INT C FUNCT PROGR IC, P268
   Wu Dinghao., 2003, Proceedings of the 5th ACM SIGPLAN International Conference on Principles and Practice of Declaritive Programming, PPDP'03, P264
   [No title captured]
NR 36
TC 2
Z9 2
U1 0
U2 3
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD SEP-NOV
PY 2008
VL 18
BP 599
EP 647
DI 10.1017/S0956796808006904
PN 5-6
PG 49
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 375KD
UT WOS:000261111700003
OA Bronze
DA 2024-07-18
ER

PT J
AU Gulias, VM
   Barreiro, M
   Freire, JL
AF Gulias, VM
   Barreiro, M
   Freire, JL
TI VoDKA: Developing a video-on-demand server using distributed functional
   programming
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB In this paper, we present some experience of using the concurrent functional language Erlang to implement a distributed video-on-demand server. For performance reasons, the server is deployed in a cheap cluster made from off-the-shelf components. The demanding system requirements, in addition to the complex and ever-changing domain, suggested a highly flexible and scalable architecture as well as a quite sophisticated control software. Functional programming played a key role in the development, allowing us to identify functional abstractions throughout the system. Using these building blocks, large configurations can be defined using functional and process composition, reducing the effort spent on adapting the system to the frequent changes in requirements. The server evolved from a prototype that was the result of a project supported by a regional cable company, and it is currently being used to provide services for real-world users. Despite our initial concerns, efficiency has not been a major issue.
C1 Univ A Coruna, MADS Grp, LFCIA, Dept Comp Sci, Corunna, Spain.
C3 Universidade da Coruna
RP Gulias, VM (corresponding author), Univ A Coruna, MADS Grp, LFCIA, Dept Comp Sci, Corunna, Spain.
EM gulias@lfcia.org; enano@lfcia.org; freire@lfcia.org
CR [Anonymous], 1997, CONCURRENT PROGRAMMI
   *APPL COMP INC, 2004, DARW STREAM SERV
   Armstrong Joe, 1996, Concurrent Programming in Erlang
   BARRIERO M, 1999, HIGH PERFORMANCE CLU, V1
   CARLSSON R, 2003, 2 ACM SIGPLAN ERL WO
   CHAN SH, 1997, CSLTR97723 STAND U
   Gamma E., 1994, Design patterns: Elements of reusable object-oriented software
   GRAND M, 1999, PATTERNS JAVA CATALO, V1
   GULIAS V, 1999, THESIS U CORUNNA SPA
   HOARE CAR, 1985, COMMUNICATING SEQUE
   *IBM, 2004, DB2 CONT MAN VID
   Johansson E., 2000, Proceedings of the 2nd International ACM SIGPLAN Conference on Principles and Practice of Declarative Programming (PPDP '00), P32, DOI 10.1145/351268.351273
   MARLOW S, 1997, P 1997 ACM SIGPLAN I, P136
   *MICR, 2004, WIND MED 9
   MILNER R, 1992, INFORM COMPUT, V100, P1, DOI [10.1016/0890-5401(92)90008-4, 10.1016/0890-5401(92)90009-5]
   OKASAKI C, 1996, 2 INT SUMM SCH ADV F
   Wadler P, 1998, ACM SIGPLAN NOTICES, V33, P25, DOI 10.1145/274930.274933
   WILKINSON P, 1999, IBM VIDEOCHARGER
NR 18
TC 8
Z9 8
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD MAY
PY 2005
VL 15
BP 403
EP 430
DI 10.1017/S0956796805005502
PN 3
PG 28
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 941QJ
UT WOS:000230229000003
OA Bronze
DA 2024-07-18
ER

PT J
AU Bonelli, E
   Compagnoni, A
   Gunter, E
AF Bonelli, E
   Compagnoni, A
   Gunter, E
TI Correspondence assertions for process synchronization in concurrent
   communications
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID PI-CALCULUS
AB High-level specification of patterns of communications such as protocols can be modeled elegantly by means of session types (Honda et al., 1998). However, a number of examples suggest that session types fall short when finer precision on protocol specification is required. In order to increase the expressiveness of session types we appeal to the theory of correspondence assertions (Clarke & Marrero, 1998; Gordon & Jeffrey, 2003b). The resulting type discipline augments the types of long-term channels with effects and thus yields types which may depend on messages read or written earlier within the same session. This new type system can be used to check:
   source of information,
   whether data is propagated as specified. across multiple parties,
   if there are unspecified communications between parties, and
   if the data being exchanged has been modified by the code in an unspecified way.
   We prove that evaluation. preserves typability and that well-typed processes are safe. Also, we illustrate how the resulting theory allows us to address shortcomings present in the pure theory of session types.
C1 Stevens Inst Technol, Hoboken, NJ 07030 USA.
   Natl Univ La Plata, Fac Informat, LIFIA, RA-1900 La Plata, Argentina.
   Univ Illinois, Thomas M Siebel Ctr Comp Sci, Dept Comp Sci, Urbana, IL 61801 USA.
C3 Stevens Institute of Technology; National University of La Plata;
   University of Illinois System; University of Illinois Urbana-Champaign
RP Stevens Inst Technol, Castle Point Hudson, Hoboken, NJ 07030 USA.
EM ebonelli@cs.stevens.edu; abc@cs.stevens.edu; egunter@cs.uiuc.edu
CR [Anonymous], 1992, Handbook of Logic in Computer Science
   Cervesato I, 2002, INFORM COMPUT, V179, P19, DOI 10.1006/inco.2001.2951
   Chakraborty S, 2002, EIGHTH IEEE REAL-TIME AND EMBEDDED TECHNOLOGY AND APPLICATIONS SYMPOSIUM, PROCEEDINGS, P45, DOI 10.1109/RTTAS.2002.1137380
   CLARKE E, 1998, INF SURV WORKSH
   Gay S, 1999, LECT NOTES COMPUT SC, V1576, P74
   Gay Simon J., 2003, TR2003133 U GLASG DE
   GIRARD JY, 1987, THEOR COMPUT SCI, V50, P1, DOI 10.1016/0304-3975(87)90045-4
   Gordon A. D., 2003, Journal of Computer Security, V11, P451
   Gordon AD, 2003, THEOR COMPUT SCI, V300, P379, DOI 10.1016/S0304-3975(02)00333-X
   Gordon M.J.C., 1993, Introduction to HOL: A theorem proving environment for higher order logic
   HOLE M, 2003, TR2003132 U GLASG DE
   Honda K, 1998, LECT NOTES COMPUT SC, V1381, P122, DOI 10.1007/BFb0053567
   HONDA K, 1994, LNCS, V817, P398
   Igarashi A, 2004, THEOR COMPUT SCI, V311, P121, DOI 10.1016/S0304-3975(03)00325-6
   Kobayashi N, 1999, ACM T PROGR LANG SYS, V21, P914, DOI 10.1145/330249.330251
   KOBAYASHI N, 1998, ACM T PROGRAM LANG S, V20
   PIERCE BC, 1996, MATH STRUCTURES COMP, V6
   PUNTIGAM F, 1996, LECT NOTES COMPUTER, V1123, P762
   TURNER DN, 1995, THESIS U EDINBURGH
   VALLECILLO A, 2003, ELECT NOTES THEOR CO, V68
   Woo T. Y. C., 1993, Proceedings 1993 IEEE Computer Society Symposium on Research in Security and Privacy (Cat. No.93CH3290-4), P178, DOI 10.1109/RISP.1993.287633
   YOSHIDA N, 1996, LECT NOTES COMPUT SC, V1180, P371, DOI DOI 10.1007/3-540-62034-6
NR 22
TC 39
Z9 43
U1 0
U2 1
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD MAR
PY 2005
VL 15
BP 219
EP 247
DI 10.1017/S095679680400543X
PN 2
PG 29
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 912MM
UT WOS:000228082700004
OA Green Published, Bronze
DA 2024-07-18
ER

PT J
AU Giesl, J
   Middeldorp, A
AF Giesl, J
   Middeldorp, A
TI Transformation techniques for context-sensitive rewrite systems
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID DEPENDENCY PAIRS; TERMINATION; ORDERINGS; RPO
AB Context-sensitive rewriting is a computational restriction of term rewriting used to model non-strict (lazy) evaluation in functional programming. The goal of this paper is the study and development of techniques to analyze the termination behavior of context-sensitive rewrite systems. For that purpose, several methods have been proposed in the literature which transform context-sensitive rewrite systems into ordinary rewrite systems such that termination of the transformed ordinary system implies termination of the original context-sensitive system. In this way, the huge variety of existing techniques for termination analysis of ordinary rewriting can be used for context-sensitive rewriting, too. We analyze the existing transformation techniques for proving termination of context-sensitive rewriting and we suggest two new transformations. Our first method is simple, sound, and more powerful than the previously proposed transformations. However, it is not complete, i.e., there are terminating context-sensitive rewrite systems that are transformed into non-terminating term rewrite systems. The second method that we present in this paper is both sound and complete. All these observations also hold for rewriting modulo associativity and commutativity.
C1 Rhein Westfal TH Aachen, LuFG Informat 2, D-52074 Aachen, Germany.
   Univ Tsukuba, Inst Informat Sci & Elect, Tsukuba, Ibaraki 3058573, Japan.
C3 RWTH Aachen University; University of Tsukuba
RP Giesl, J (corresponding author), Rhein Westfal TH Aachen, LuFG Informat 2, Ahornstr 55, D-52074 Aachen, Germany.
EM giesl@informatik.rwth-aachen.de; ami@is.tsukuba.ac.jp
OI Giesl, Jurgen/0000-0003-0283-8520; Middeldorp, Aart/0000-0001-7366-8464
CR [Anonymous], 1970, Computational Problems in Abstract Algebra, DOI DOI 10.1016/B978-0-08-012975-4.50028-X
   Arts T, 2000, THEOR COMPUT SCI, V236, P133, DOI 10.1016/S0304-3975(99)00207-8
   Baader Franz, 1998, TERM REWRITING ALL
   BELLEGARDE F, 1990, APPL ALGEBR ENG COMM, V1, P79
   Borralleras C, 2000, LECT NOTES ARTIF INT, V1831, P346
   BORRALLERAS C, 2002, LECT NOTES ARTIF INT, V2392, P314
   CLAVEL M, 1996, P 1 WRLA EL NOT THEO, V4
   CONTEJEAN E, 2000, CIME VERSION 2
   DERSHOWITZ N, 1987, J SYMB COMPUT, V3, P69, DOI 10.1016/S0747-7171(87)80022-6
   DERSHOWITZ N, 1995, THEOR COMPUT SCI, V142, P179, DOI 10.1016/0304-3975(94)00275-4
   Diaconescu R., 1998, AMAST Series in Computing, V6
   Ferreira M. C. F., 1999, LECT NOTES COMPUTER, V1631, P173
   Fokkink W, 2000, ACM T PROGR LANG SYS, V22, P45, DOI 10.1145/345099.345102
   Giesl J, 2002, J SYMB COMPUT, V34, P21, DOI 10.1006/jsco.2002.0541
   Giesl J, 2003, LECT NOTES COMPUT SC, V2450, P231
   GIESL J, 2001, LNCS, V2051, P93
   GIESL J, 2002, AIB200202 RWTH
   Giesl J., 1995, LECT NOTES COMPUTER, V914, P426
   GIESL J, 1999, LECT NOTES COMPUTER, V1631, P271
   Goguen J., 2000, Software Engineering with OBJ: Algebraic Specification in Action
   Gramlich B., 2002, P 4 INT ACM SIGPLAN, P50, DOI 10.1145/571157.571163
   Gramlich Bernhard, 2002, P 3 ACM SIGPLAN WORK, P29, DOI [10.1145/570186.570189, DOI 10.1145/570186.570189]
   Hong H, 1998, J AUTOM REASONING, V21, P23, DOI 10.1023/A:1005983105493
   Jones ND, 2002, LECT NOTES COMPUT SC, V2487, P1, DOI 10.1145/583852.581505
   KAPUR D, 1995, J AUTOM REASONING, V14, P293, DOI 10.1007/BF00881859
   KAPUR D, 1997, LECT NOTES COMPUT SC, V1231, P142
   Kusakari K, 2001, IEICE T INF SYST, VE84D, P604
   LANKFORD D, 1979, MTP3 LOUIS TECHN U
   Lucas S, 2002, LECT NOTES COMPUT SC, V2378, P296
   LUCAS S, 2001, P 3 INT C PRINC PRAC, P82
   LUCAS S, 1996, LECT NOTES COMPUTER, V1099, P122
   LUCAS S., 1998, J FUNCTIONAL LOGIC P, V1, P1
   LUCAS S, 2002, ELECT NOTES THEOR CO, V64
   Lucas Salvador., 2001, P 8 INT C LOGIC PROG, V2250, P669
   Marché C, 1998, LECT NOTES COMPUT SC, V1379, P241
   Middeldorp A, 2000, ACTA INFORM, V36, P1007, DOI 10.1007/PL00013300
   MIDDELDORP A, 1996, LECT NOTES ARTIF INT, V1104, P373
   Plasmeijer Rinus, 1993, FUNCTIONAL PROGRAMMI
   Rubio A, 2002, INFORM COMPUT, V178, P515, DOI 10.1006/inco.2002.3158
   RUBIO A, 1995, THEOR COMPUT SCI, V142, P209, DOI 10.1016/0304-3975(94)00276-2
   Steinbach J., 1995, Fundamenta Informaticae, V24, P47
   STEINBACH J, 1994, INFORM PROCESS LETT, V49, P85, DOI 10.1016/0020-0190(94)90032-9
   TOYAMA Y, 1987, INFORM PROCESS LETT, V25, P141, DOI 10.1016/0020-0190(87)90122-0
   Zantema H, 1997, LECT NOTES COMPUT SC, V1232, P172
   Zantema H., 1995, Fundamenta Informaticae, V24, P89
   ZANTEMA H, 1994, J SYMB COMPUT, V17, P23, DOI 10.1006/jsco.1994.1003
   [No title captured]
   [No title captured]
NR 48
TC 32
Z9 32
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD JUL
PY 2004
VL 14
BP 379
EP 427
DI 10.1017/S0956796803004945
PN 4
PG 49
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 835AQ
UT WOS:000222452400002
OA Bronze
DA 2024-07-18
ER

PT J
AU Achten, P
AF Achten, Peter
TI Segments: An alternative rainfall problem
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB Elliot Soloway's Rainfall problem is a well-known and well-studied problem to investigate the problem-solving strategies of programmers. Kathi Fisler investigated this programming challenge from the point of view of functional programmers. She showed that this particular challenge gives rise to five different high-level solution strategies, of which three are predominant and cover over 80% of all chosen solutions. In this study, we put forward the Segments problem as an alternative challenge to investigate the problem-solving skills of functional programmers. Analysis of the student solutions, their high-level solution strategies, and corresponding archetype solutions shows that the Segments problem gives rise to seven different high-level solution strategies that can be further divided into 17 subclasses. The Segments problem is particularly suited to investigate problem-solving skills that involve list processing and higher-order functions.
C1 [Achten, Peter] Radboud Univ Nijmegen, Inst Comp & Informat Sci, Nijmegen, Netherlands.
C3 Radboud University Nijmegen
RP Achten, P (corresponding author), Radboud Univ Nijmegen, Inst Comp & Informat Sci, Nijmegen, Netherlands.
EM P.Achten@cs.ru.nl
RI Achten, Peter/AGM-7996-2022
CR Achten P, 2011, J FUNCT PROGRAM, V21, P1, DOI 10.1017/S0956796810000055
   Fisler Kathi, 2014, P 10 ANN C INT COMP, P35, DOI [DOI 10.1145/2632320.2632346, 10.1145/2632320.2632346]
   Fisler Kathi., 2016, P 47 ACM TECHNICAL S, P211
   Hutton G, 2002, J FUNCT PROGRAM, V12, P609, DOI 10.1017/S0956796801004300
   LEVENSHT.VI, 1965, DOKL AKAD NAUK SSSR+, V163, P845
   SOLOWAY E, 1986, COMMUN ACM, V29, P850, DOI 10.1145/6592.6594
NR 6
TC 2
Z9 2
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD OCT 19
PY 2021
VL 31
AR e23
DI 10.1017/S0956796821000216
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA YY4CD
UT WOS:000754736300001
OA Green Published
DA 2024-07-18
ER

PT J
AU Breitner, J
   Spector-Zabusky, A
   Li, Y
   Rizkallah, C
   Wiegley, J
   Cohen, J
   Weirich, S
AF Breitner, Joachim
   Spector-Zabusky, Antal
   Li, Yao
   Rizkallah, Christine
   Wiegley, John
   Cohen, Joshua
   Weirich, Stephanie
TI Ready, Set, Verify! Applying hs-to-coq to real-world Haskell code
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID REFINEMENT
AB Good tools can bring mechanical verification to programs written in mainstream functional languages. We use hs-to-coq to translate significant portions of Haskell's containers library into Coq, and verify it against specifications that we derive from a variety of sources including type class laws, the library's test suite, and interfaces from Coq's standard library. Our work shows that it is feasible to verify mature, widely used, highly optimized, and unmodified Haskell code. We also learn more about the theory of weight-balanced trees, extend hs-to-coq to handle partiality, and - since we found no bugs - attest to the superb quality of well-tested functional code.
C1 [Breitner, Joachim; Wiegley, John] DFINITY Stiftung, Zug, Switzerland.
   [Spector-Zabusky, Antal; Li, Yao; Cohen, Joshua; Weirich, Stephanie] Univ Penn, Philadelphia, PA 19104 USA.
   [Rizkallah, Christine] Univ New South Wales, Sydney, NSW, Australia.
C3 University of Pennsylvania; University of New South Wales Sydney
RP Breitner, J (corresponding author), DFINITY Stiftung, Zug, Switzerland.
EM joachim@dfinity.org; antals@cis.upenn.edu; liyao@cis.upenn.edu;
   c.rizkallah@unsw.edu.au; john@dfinity.org; joscoh@sas.upenn.edu;
   sweirich@cis.upenn.edu
RI Li, Yao/GXW-0420-2022
OI Li, Yao/0000-0001-8720-883X; Cohen, Joshua/0000-0002-9555-8781
FU National Science Foundation [1319880, 1521539]; Direct For Computer &
   Info Scie & Enginr; Division of Computing and Communication Foundations
   [1319880, 1521539] Funding Source: National Science Foundation
FX We thank the anonymous JFP reviewers whose suggestions helped clarify
   and improve this paper. This material is based upon work supported by
   the National Science Foundation under Grant No. 1319880 and Grant No.
   1521539.
CR Abel Andreas., 2005, HASKELL 05, P62, DOI DOI 10.1145/1088348.1088355
   Adams S, 1992, 9210 CSTR
   Amani S, 2016, ACM SIGPLAN NOTICES, V51, P175, DOI 10.1145/2954679.2872404
   [Anonymous], 1999, PURELY FUNCTIONAL DA
   Appel AW, 2017, PHILOS T R SOC A, V375, DOI 10.1098/rsta.2016.0331
   Appel AndrewW., 2011, EFFICIENT VERIFIED R
   Besson F, 2007, LECT NOTES COMPUT SC, V4502, P48
   Blank RH, 2013, BASIC BIOETH, P1
   Bove A, 2009, LECT NOTES COMPUT SC, V5674, P73, DOI 10.1007/978-3-642-03359-9_6
   Brady E., 2017, Type-Driven Development with Idris
   Campbell T, 2010, BUG DATAMAP E MAIL H
   Charguéraud A, 2010, ICFP 2010: PROCEEDINGS OF THE 2010 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P321
   Charguéraud A, 2010, LECT NOTES COMPUT SC, V6172, P195, DOI 10.1007/978-3-642-14052-5_15
   Chen HG, 2015, SOSP'15: PROCEEDINGS OF THE TWENTY-FIFTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P18, DOI 10.1145/2815400.2815402
   Chen Z, 2017, SEC 2017: 2017 THE SECOND ACM/IEEE SYMPOSIUM ON EDGE COMPUTING (SEC'17), DOI 10.1145/3132211.3134458
   Claessen K, 2000, ACM SIGPLAN NOTICES, V35, P268, DOI 10.1145/357766.351266
   Coq Development Team, 2016, COQ PROOF ASS REF MA
   COQUAND T, 1988, INFORM COMPUT, V76, P95, DOI 10.1016/0890-5401(88)90005-3
   Coquand T, 1989, RR1088 INRIA
   Derrin P., 2006, Haskell '06: Proceedings of the 2006 ACM SIGPLAN workshop on Haskell, P60, DOI DOI 10.1145/1159842.1159850
   Dybjer P, 2004, INFORM SOFTWARE TECH, V46, P1011, DOI 10.1016/j.infsof.2004.07.002
   Filliâtre JC, 2004, LECT NOTES COMPUT SC, V2986, P370
   Hirai Y, 2011, J FUNCT PROGRAM, V21, P287, DOI 10.1017/S0956796811000104
   Javidi B, 2017, WORKSH INFORM OPTICS
   Jones Simon Peyton, 2001, HASKELL, P1
   Joseph A. M, 2014, THESIS U CALIFORNIA
   Kieburtz R. B., 2004, HCSS
   Klein G, 2016, INT C INT THEOR PROV
   Klein G, 2009, SOSP'09: PROCEEDINGS OF THE TWENTY-SECOND ACM SIGOPS SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P207
   Krauss A, 2006, LECT NOTES ARTIF INT, V4130, P589
   Kroning D., 2009, INF P 7 INT WORKSH S, V22
   Kumar R, 2014, ACM SIGPLAN NOTICES, V49, P179, DOI 10.1145/2535838.2535841
   Letouzey P, 2002, LECT NOTES COMPUT SC, V2646, P200
   Licata D, 2012, 15 150 LECT 21 RED B
   McBride C, 2014, ICFP'14: PROCEEDINGS OF THE 2014 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P297, DOI 10.1145/2628136.2628163
   MORRISON DR, 1968, J ACM, V15, P514, DOI 10.1145/321479.321481
   Mullen Eric., 2018, P 7 ACM SIGPLAN INT, P172, DOI 10.1145/3167089
   Myreen MO, 2014, J FUNCT PROGRAM, V24, P284, DOI 10.1017/S0956796813000282
   Nievergelt Jurg, 1972, STOC, P137, DOI DOI 10.1145/800152.804906
   Nipkow T., 2002, LECT NOTES COMPUTER, V2283, DOI [10.1007/3-540-45949-9, DOI 10.1007/3-540-45949-9]
   Nipkow T., 2018, ARCH FORMAL PROOFS
   Nipkow T, 2016, LECT NOTES COMPUT SC, V9807, P307, DOI 10.1007/978-3-319-43144-4_19
   O'Connor L, 2016, ACM SIGPLAN NOTICES, V51, P89, DOI 10.1145/3022670.2951940
   Okasaki C., 1998, WORKSHOP ML, P77
   Protzenko J, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110261
   RALSTON R, 2009, 8 INT WORKSHOP ACL2, P71, DOI DOI 10.1145/1637837.1637848
   Spector-Zabusky A., 2018, P 7 ACM SIGPLAN INT, P14, DOI [10.1145/3167092, DOI 10.1145/3167092]
   Straka M, 2010, ACM SIGPLAN NOTICES, V45, P13, DOI 10.1145/2088456.1863526
   Swamy N, 2016, ACM SIGPLAN NOTICES, V51, P256, DOI 10.1145/2914770.2837655
   Vazou N, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158141
   Vazou N, 2017, ACM SIGPLAN NOTICES, V52, P63, DOI 10.1145/3156695.3122963
   Vazou N, 2014, ICFP'14: PROCEEDINGS OF THE 2014 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P269, DOI 10.1145/2628136.2628161
   Vazou N, 2013, LECT NOTES COMPUT SC, V7792, P209, DOI 10.1007/978-3-642-37036-6_13
   Vytiniotis D, 2013, ACM SIGPLAN NOTICES, V48, P431, DOI 10.1145/2480359.2429121
   Wiegley J, 2017, COQHASKELL LIB FORMA
NR 55
TC 5
Z9 6
U1 0
U2 3
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD FEB 26
PY 2021
VL 31
AR e5
DI 10.1017/S0956796820000283
PG 41
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA QM5BW
UT WOS:000621795400001
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Forster, Y
   Kammar, O
   Lindley, S
   Pretnar, M
AF Forster, Yannick
   Kammar, Ohad
   Lindley, Sam
   Pretnar, Matija
TI On the expressive power of user-defined effects: Effect handlers,
   monadic reflection, delimited control
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID SEMANTICS; SYSTEM; NOTIONS; ABELLA
AB We compare the expressive power of three programming abstractions for user-defined computational effects: Plotkin and Pretnar's effect handlers, Filinski's monadic reflection, and delimited control. This comparison allows a precise discussion about the relative expressiveness of each programming abstraction. It also demonstrates the sensitivity of the relative expressiveness of user-defined effects to seemingly orthogonal language features. We present three calculi, one per abstraction, extending Levy's call-by-push-value. For each calculus, we present syntax, operational semantics, a natural type-and-effect system, and, for effect handlers and monadic reflection, a set-theoretic denotational semantics. We establish their basic metatheoretic properties: safety, termination, and, where applicable, soundness and adequacy. Using Felleisen's notion of a macro translation, we show that these abstractions can macro express each other, and show which translations preserve typeability. We use the adequate unitary set-theoretic denotational semantics for the monadic calculus to show that effect handlers cannot be macro expressed while preserving typeability either by monadic reflection or by delimited control. Our argument fails with simple changes to the type system such as polymorphism and inductive types. We supplement our development with a mechanised Abella formalisation.
C1 [Forster, Yannick] Saarland Univ, Dept Comp Sci, Saarbrucken, Germany.
   [Forster, Yannick; Kammar, Ohad] Univ Cambridge, Comp Lab, Cambridge, England.
   [Kammar, Ohad; Lindley, Sam] Univ Edinburgh, Sch Informat, Edinburgh, Midlothian, Scotland.
   [Kammar, Ohad] Univ Oxford, Balliol Coll, Dept Comp Sci, Oxford, England.
   [Lindley, Sam] Imperial Coll, Dept Comp, London, England.
   [Pretnar, Matija] Univ Ljubljana, Fac Math & Phys, Ljubljana, Slovenia.
C3 Saarland University; University of Cambridge; University of Edinburgh;
   University of Oxford; Imperial College London; University of Ljubljana
RP Forster, Y (corresponding author), Saarland Univ, Dept Comp Sci, Saarbrucken, Germany.; Forster, Y (corresponding author), Univ Cambridge, Comp Lab, Cambridge, England.
EM forster@ps.uni-saarland.de; ohad.kammar@ed.ac.uk; sam.lindley@ed.ac.uk;
   matja.pretnar@fmf.uni-lj.si
OI Forster, Yannick/0000-0002-8676-9819; Kammar, Ohad/0000-0002-2071-0929;
   Lindley, Sam/0000-0002-1360-4714; Pretnar, Matija/0000-0001-7755-2303
FU European Research Council; Balliol College Oxford Career Development
   Fellowship; Royal Society University Research Fellowship; Engineering
   and Physical Sciences Research Council [EP/H005633/1, EP/K034413/1,
   EP/N007387/1]; Air Force Office of Scientific Research
   [FA9550-17-1-0326]; EPSRC [EP/K034413/1] Funding Source: UKRI
FX This work was supported by the European Research Council grant "events
   causality and symmetry-the next-generation semantics", a Balliol College
   Oxford Career Development Fellowship, a Royal Society University
   Research Fellowship, and the Engineering and Physical Sciences Research
   Council grants EP/H005633/1 "Semantic Foundations for Real-World
   Systems", EP/K034413/1 "From Data Types to Session Types-A Basis for
   Concurrency and Distribution", and EP/N007387/1 "Quantum computation as
   a programming language". This material is based upon work supported by
   the Air Force Office of Scientific Research under award number
   FA9550-17-1-0326. We thank Bob Atkey, Andrej Bauer, Paul Downen, Marcelo
   Fiore, Tamara von Glehn, Mathieu Huot, Oleg Kiselyov, Daan Leijen, Craig
   McLaughlin, Kayvan Memarian, Sean Moss, Alan Mycroft, Ian Orton, Hugo
   Paquet, Jean Pichon-Pharabod, Matthew Pickering, Didier Remy, Reuben
   Rowe, Philip Saville, Filip Sieczkowsi, Ian Stark, Sam Staton, Philip
   Wadler, Jeremy Yallop, and the anonymous referees for useful suggestions
   and discussions.
CR [Anonymous], THESIS
   Asai Kenichi, 2009, Higher-Order and Symbolic Computation, V22, P275, DOI 10.1007/s10990-009-9049-5
   Asai K, 2007, LECT NOTES COMPUT SC, V4807, P239
   Atkey R, 2009, J FUNCT PROGRAM, V19, P335, DOI 10.1017/S095679680900728X
   Baelde D, 2014, J FORMALIZ REASON, V7, P1
   Barr M., 1985, GRUNDLEHREN MATH WIS, V278, pxiii
   Bauer A, 2014, LOG METH COMPUT SCI, V10, DOI 10.2168/LMCS-10(4:9)2014
   Bauer A, 2015, J LOG ALGEBR METHODS, V84, P108, DOI 10.1016/j.jlamp.2014.02.001
   Bracevac Oliver, 2018, P ACM PROGR LANG, DOI DOI 10.1145/3236762
   Brachthauser Jonathan Immanuel, 2019, MSRTR20197
   Brady E, 2013, ACM SIGPLAN NOTICES, V48, P133, DOI [10.1145/2500365.2500581, 10.1145/2544174.2500581]
   Bulwahn L, 2008, LECT NOTES COMPUT SC, V5170, P134, DOI 10.1007/978-3-540-71067-7_14
   Chung-chieh Shan, 2007, Higher-Order and Symbolic Computation, V20, P371, DOI 10.1007/s10990-007-9010-4
   DANVY O, 1990, PROCEEDINGS OF THE 1990 ACM CONFERENCE ON LISP AND FUNCTIONAL PROGRAMMING, P151, DOI 10.1145/91556.91622
   Danvy Olivier, 1989, BRICS, V89
   Danvy  Olivier, 2006, THESIS
   Doczkal C., 2007, TECHNICAL REPORT
   Doczkal C., 2009, Proceedings of the Fourth International Workshop on Logical Frameworks and Meta-Languages: Theory and Practice. LFMTP'09, P57, DOI DOI 10.1145/1577824.1577834
   FELLEISEN M, 1991, SCI COMPUT PROGRAM, V17, P35, DOI 10.1016/0167-6423(91)90036-W
   FELLEISEN M, 1987, LECT NOTES COMPUT SC, V259, P206
   Felleisen Matthias, 1988, LISP FUNCTIONAL PROG, P52
   Filinski A., 1999, POPL, P175, DOI [10.1145/292540.292557, DOI 10.1145/292540.292557]
   Filinski A., 1996, THESIS
   Filinski A, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P483, DOI 10.1145/1706299.1706354
   Filinski Andrzej, 1994, P 21 ANN ACM S PRINC, P446, DOI DOI 10.1145/174675.178047
   Forster Y., 2016, TECHNICAL REPORT
   Forster Y, 2019, PROCEEDINGS OF THE 8TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS (CPP' 19), P118, DOI 10.1145/3293880.3294097
   Forster Y, 2017, BIO-PROTOCOL, V7, DOI 10.21769/BioProtoc.2144
   Gacek A, 2008, LECT NOTES ARTIF INT, V5195, P154, DOI 10.1007/978-3-540-71070-7_13
   Hermida C., 1993, THESIS
   Hillerstrom D., 2017, 2nd International Conference on Formal Structures for Computation and Deduction, FSCD 2017, September 3-9, 2017, V84, p18:1, DOI DOI 10.4230/LIPICS.FSCD.2017.18
   Hillerstrom Daniel, 2016, TYDE ICFP, P15, DOI DOI 10.1145/2976022.2976033
   Hutton G., 1998, Journal of Functional Programming, V8, P437, DOI 10.1017/S0956796898003050
   Inostroza P, 2018, ONWARD!'18: PROCEEDINGS OF THE 2018 ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON NEW IDEAS, NEW PARADIGMS, AND REFLECTIONS ON PROGRAMMING AND SOFTWARE, P111, DOI 10.1145/3276954.3276955
   Kammar O., 2014, THESIS
   Kammar O, 2018, ELECTRON NOTES THEOR, V341, P239, DOI 10.1016/j.entcs.2018.11.012
   Kammar O, 2017, J FUNCT PROGRAM, V27, DOI 10.1017/S0956796816000320
   Kammar O, 2013, ACM SIGPLAN NOTICES, V48, P145, DOI [10.1145/2500365.2500590, 10.1145/2544174.2500590]
   Kammar O, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P349
   Katsumata S, 2014, ACM SIGPLAN NOTICES, V49, P633, DOI 10.1145/2535838.2535846
   Kiselyov O., 2005, TR611 IND U SCH INF
   Kiselyov O, 2007, LECT NOTES COMPUT SC, V4583, P223
   Kiselyov O, 2006, ACM SIGPLAN NOTICES, V41, P26, DOI 10.1145/1160074.1159808
   Kiselyov O, 2018, ELECTRON P THEOR COM, P23, DOI 10.4204/EPTCS.285.2
   Kiselyov O, 2013, ACM SIGPLAN NOTICES, V48, P59, DOI 10.1145/2503778.2503791
   Kiselyov Oleg, 2016, TYDE ICFP, P41
   Kobori I, 2016, ELECTRON P THEOR COM, P36, DOI 10.4204/EPTCS.212.3
   Laird J, 2017, ANN PURE APPL LOGIC, V168, P470, DOI 10.1016/j.apal.2016.10.011
   Laird J, 2002, LECT NOTES COMPUT SC, V2305, P133
   Laird J, 2013, ELECTRON PROC THEOR, P113, DOI 10.4204/EPTCS.127.8
   Leijen D, 2017, ACM SIGPLAN NOTICES, V52, P486, DOI 10.1145/3093333.3009872
   Levy PaulBlain., 2003, Call-by-push-value: A functional/imperative synthesis, V2
   Lindley S, 2005, LECT NOTES COMPUT SC, V3461, P262
   Lindley S, 2017, ACM SIGPLAN NOTICES, V52, P500, DOI 10.1145/3093333.3009897
   Lucassen J. M., 1988, Conference Record of the Fifteenth Annual ACM Symposium on Principles of Programming Languages, P47, DOI 10.1145/73560.73564
   Marmolejo F, 2010, THEOR APPL CATEG, V24, P84
   Materzok Marek, 2012, Lecture Notes in Computer Science, V7705, P296, DOI [10.1007/978-3-642- 35182- 2_21, DOI 10.1007/978-3-642-35182-2_21]
   MOGGI E, 1989, FOURTH ANNUAL SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P14
   PARE R, 1974, B AM MATH SOC, V80, P556, DOI 10.1090/S0002-9904-1974-13497-X
   Pirog M., 2019, LEIBNIZ INT P INFORM, V131
   Plotkin G, 2003, APPL CATEGOR STRUCT, V11, P69, DOI 10.1023/A:1023064908962
   Plotkin G, 2002, LECT NOTES COMPUT SC, V2303, P342
   Plotkin G, 2008, IEEE S LOG, P118, DOI 10.1109/LICS.2008.45
   Plotkin G, 2009, LECT NOTES COMPUT SC, V5502, P80, DOI 10.1007/978-3-642-00590-9_7
   Pretnar M., 2014, LOG METH COMPUT SCI, V10
   Pretnar M, 2015, ELECTRON NOTES THEOR, V319, P19, DOI 10.1016/j.entcs.2015.12.003
   Reynolds J.C., 1998, Theories of Programming Languages
   Saleh Amr Hany, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P327, DOI 10.1007/978-3-319-89884-1_12
   Schrijvers T, 2019, PROCEEDINGS OF THE 12TH ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON HASKELL (HASKELL '19), P98, DOI 10.1145/3331545.3342595
   Schrijvers T, 2013, CONSTRAINTS, V18, P269, DOI 10.1007/s10601-012-9137-8
   Sinkovics A, 2013, SCI COMPUT PROGRAM, V78, P1600, DOI 10.1016/j.scico.2013.01.002
   SPIVEY M, 1990, SCI COMPUT PROGRAM, V14, P25, DOI 10.1016/0167-6423(90)90056-J
   Swierstra W, 2008, J FUNCT PROGRAM, V18, P423, DOI 10.1017/S0956796808006758
   TAIT WW, 1967, J SYMBOLIC LOGIC, V32, P198, DOI 10.2307/2271658
   Wadler P., 1994, LISP and Symbolic Computation, V7, P39, DOI 10.1007/BF01019944
   WADLER P, 1990, PROCEEDINGS OF THE 1990 ACM CONFERENCE ON LISP AND FUNCTIONAL PROGRAMMING, P61, DOI 10.1145/91556.91592
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
   Zhang YZ, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290318
   Ziliani B, 2015, J FUNCT PROGRAM, V25, DOI 10.1017/S0956796815000118
NR 79
TC 19
Z9 19
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD OCT 8
PY 2019
VL 29
AR e15
DI 10.1017/S0956796819000121
PG 43
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA JC8XZ
UT WOS:000489560700001
OA Green Published, Green Submitted, Green Accepted
DA 2024-07-18
ER

PT J
AU Matsuda, K
   Wang, M
AF Matsuda, Kazutaka
   Wang, Meng
TI Applicative bidirectional programming Mixing lenses and semantic
   bidirectionalization
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID PARAMETRICITY
AB A bidirectional transformation is a pair of mappings between source and view data objects, one in each direction. When the view is modified, the source is updated accordingly with respect to some laws. One way to reduce the development and maintenance effort of bidirectional transformations is to have specialized languages in which the resulting programs are bidirectional by construction-giving rise to the paradigm of bidirectional programming. In this paper, we develop a framework for applicative-style and higher-order bidirectional programming, in which we can write bidirectional transformations as unidirectional programs in standard functional languages, opening up access to the bundle of language features previously only available to conventional unidirectional languages. Our framework essentially bridges two very different approaches of bidirectional programming, namely the lens framework and Voigtlander's semantic bidirectionalization, creating a new programming style that is able to obtain benefits from both.
C1 [Matsuda, Kazutaka] Tohoku Univ, Grad Sch Informat Sci, Sendai, Miyagi 9808579, Japan.
   [Wang, Meng] Univ Bristol, Dept Comp Sci, Bristol BS8 1TH, Avon, England.
C3 Tohoku University; University of Bristol
RP Matsuda, K (corresponding author), Tohoku Univ, Grad Sch Informat Sci, Sendai, Miyagi 9808579, Japan.
EM kztk@ecei.tohoku.ac.jp; meng.wang@bristol.ac.uk
OI Wang, Meng/0000-0001-7780-630X
FU JSPS KAKENHI [24700020, 25540001, 15H02681, 15K15966]; Grand-Challenging
   Project on the "Linguistic Foundation for Bidirectional Model
   Transformation" of the National Institute of Informatics; Grants-in-Aid
   for Scientific Research [24700020, 25540001, 15K15966, 15H02681] Funding
   Source: KAKEN
FX This work is partially supported by JSPS KAKENHI grant numbers 24700020,
   25540001, 15H02681 and 15K15966, and the Grand-Challenging Project on
   the "Linguistic Foundation for Bidirectional Model Transformation" of
   the National Institute of Informatics. The work is partly done when the
   first author was at the University of Tokyo, Japan, and when the second
   author was at University of Kent, UK.
CR [Anonymous], 1989, FPCA 1989, DOI DOI 10.1145/99370.99404
   BANCILHON F, 1981, ACM T DATABASE SYST, V6, P557, DOI 10.1145/319628.319634
   Bernardy JP, 2012, J FUNCT PROGRAM, V22, P107, DOI 10.1017/S0956796812000056
   Bird R.S., 2013, UNDERSTANDING IDIOMA, P25
   Bohannon A, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P407, DOI 10.1145/1328438.1328487
   Church A., 1940, J. Symbolic Logic, V5, P56, DOI [10.2307/2266170, DOI 10.2307/2266170]
   Davi B. M. J., 2010, ICFP
   DAYAL U, 1982, ACM T DATABASE SYST, V7, P381, DOI 10.1145/319732.319740
   Ellis T., 2012, CATEGORY AND LENSES
   Fegaras L, 2010, PROC INT CONF DATA, P309, DOI 10.1109/ICDE.2010.5447896
   Foster JN, 2007, ACM T PROGR LANG SYS, V29, DOI [10.1145/1232420.1232424, 10.1145/1047659.1040325]
   Foster JN, 2008, ICFP'08: PROCEEDINGS OF THE 2008 SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P383
   Foster N., 2010, LECT NOTES COMPUTER, V7470, P1, DOI DOI 10.1007/978-3-642-32202-0_1
   Hayashi Y, 2007, LECT NOTES COMPUT SC, V4505, P721
   HEGNER SJ, 1990, LECT NOTES COMPUT SC, V470, P422
   Hidaka S., 2010, ICFP
   Hofmann M, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P371, DOI 10.1145/1926385.1926428
   Hu Zhenjiang., 2004, PARTIAL EVALUATION P, P178
   HUET G, 1978, ACTA INFORM, V11, P31, DOI 10.1007/BF00264598
   Jaskelioff M, 2015, J FUNCT PROGRAM, V25, DOI 10.1017/S0956796815000088
   Ko HS, 2016, PEPM'16: PROCEEDINGS OF THE 2016 ACM SIGPLAN WORKSHOP ON PARTIAL EVALUATION AND PROGRAM MANIPULATION, P61, DOI 10.1145/2847538.2847544
   Lindley S, 2011, ELECTRON NOTES THEOR, V229, P97, DOI 10.1016/j.entcs.2011.02.018
   Liu D., 2007, P 2007 ACM SIGPLAN S, P21, DOI 10.1145/1244381.1244386
   Mac Lane S, 1998, GRAD TEXT M, V5
   Matsuda Kazutaka, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P31, DOI 10.1007/978-3-319-89884-1_2
   Matsuda K., 2013, P 15 S PRINCIPLES PR, V13, P297, DOI [10.1145/2505879.2505888, DOI 10.1145/2505879.2505888]
   Matsuda K, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P62, DOI 10.1145/2784731.2784750
   Matsuda K, 2015, SCI COMPUT PROGRAM, V111, P79, DOI 10.1016/j.scico.2014.07.008
   Matsuda K, 2007, ICFP'07 PROCEEDINGS OF THE 2007 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P47
   Mcbride C, 2008, J FUNCT PROGRAM, V18, P1, DOI 10.1017/S0956796807006326
   Milewski B, 2013, LENSES STORES YONEDA
   Miller D., 1987, Proceedings of the 1987 Symposium on Logic Programming (Cat. No.87CH2472-9), P379
   Mu SC, 2004, LECT NOTES COMPUT SC, V3302, P2
   O'Connor R., 2011, CORR
   Pacheco H., 2014, PEPM
   Pacheco H, 2014, PPDP'14: PROCEEDINGS OF THE 16TH INTERNATIONAL SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING, P147, DOI 10.1145/2643135.2643141
   Paterson Ross, 2012, Mathematics of Program Construction. Proceedings 11th International Conference, MPC 2012, P300, DOI 10.1007/978-3-642-31113-0_15
   Paterson R, 2001, ACM SIGPLAN NOTICES, V36, P229, DOI 10.1145/507669.507664
   PFENNING F, 1988, SIGPLAN NOTICES, V23, P199, DOI 10.1145/960116.54010
   Rajkumar R., 2013, ELECT COMMUN EASST, V57
   Reynolds J. C., 1983, Information Processing 83. Proceedings of the IFIP 9th World Computer Congress, P513
   van Laarhoven T, 2009, CPS BASED FUNCTIONAL
   Voigtländer J, 2013, J FUNCT PROGRAM, V23, P515, DOI 10.1017/S0956796813000130
   Voigtländer J, 2009, ICFP'09: PROCEEDINGS OF THE 2009 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P173
   Voigtländer J, 2009, ACM SIGPLAN NOTICES, V44, P165, DOI 10.1145/1594834.1480904
   Voigtlander J., 2010, ICFP
   Vytiniotis D, 2010, J FUNCT PROGRAM, V20, P175, DOI 10.1017/S0956796810000079
   Wallace M, 1999, ACM SIGPLAN NOTICES, V34, P148, DOI 10.1145/317765.317794
   Wang M., 2014, PEPM
   Wang M, 2013, SCI COMPUT PROGRAM, V78, P2216, DOI 10.1016/j.scico.2012.07.014
   Wang M, 2011, ICFP 11 - PROCEEDINGS OF THE 2011 ACM SIGPLAN: INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P392
   Wang M, 2010, LECT NOTES COMPUT SC, V6120, P397, DOI 10.1007/978-3-642-13321-3_22
   Xiong B, 2007, IEEE INT CON AUTO SC, P1016
   Yu YJ, 2012, PROC INT CONF SOFTW, P540, DOI 10.1109/ICSE.2012.6227162
NR 54
TC 7
Z9 7
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD JUN 21
PY 2018
VL 28
AR e15
DI 10.1017/S0956796818000096
PG 49
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GL1NH
UT WOS:000436869400001
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Haller, P
   Miller, H
   Müller, N
AF Haller, Philipp
   Miller, Heather
   Mueller, Normen
TI A programming model and foundation for lineage-based distributed
   computation
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB The most successful systems for "big data" processing have all adopted functional APIs. We present a new programming model, we call function passing, designed to provide a more principled substrate, or middleware, upon which to build data-centric distributed systems like Spark. A key idea is to build up a persistent functional data structure representing transformations on distributed immutable data by passing well-typed serializable functions over the wire and applying them to this distributed data. Thus, the function passing model can be thought of as a persistent functional data structure that is distributed, where transformations performed on distributed data are stored in its nodes rather than the distributed data itself. One advantage of this model is that failure recovery is simplified by design - data can be recovered by replaying function applications atop immutable data loaded from stable storage. Deferred evaluation is also central to our model; by incorporating deferred evaluation into our design only at the point of initiating network communication, the function passing model remains easy to reason about while remaining efficient in time and memory. Moreover, we provide a complete formalization of the programming model in order to study the foundations of lineage-based distributed computation. In particular, we develop a theory of safe, mobile lineages based on a subject reduction theorem for a typed core language. Furthermore, we formalize a progress theorem that guarantees the finite materialization of remote, lineage-based data. Thus, the formal model may serve as a basis for further developments of the theory of data-centric distributed programming, including aspects such as fault tolerance. We provide an open-source implementation of our model in and for the Scala programming language, along with a case study of several example frameworks and end-user programs written atop this model.
C1 [Haller, Philipp] KTH Royal Inst Technol, Sch Elect Engn & Comp Sci, SE-10044 Stockholm, Sweden.
   [Miller, Heather] Ecole Polytech Fed Lausanne, Sch Comp & Commun Sci, CH-1015 Lausanne, Switzerland.
   [Miller, Heather] Northeastern Univ, Coll Comp & Informat Sci, Boston, MA 02115 USA.
   [Mueller, Normen] Safeplace, DE-40667 Meerbusch, Germany.
C3 Royal Institute of Technology; Swiss Federal Institutes of Technology
   Domain; Ecole Polytechnique Federale de Lausanne; Northeastern
   University
RP Haller, P (corresponding author), KTH Royal Inst Technol, Sch Elect Engn & Comp Sci, SE-10044 Stockholm, Sweden.
EM phaller@kth.se; heather.miller@epfl.ch
RI Haller, Philipp/GWZ-7695-2022
OI Haller, Philipp/0000-0002-2659-5271
CR Agha G., 1986, Actors: a model of concurrent computation in distributed systems
   Agha G. A., 1997, Journal of Functional Programming, V7, P1, DOI 10.1017/S095679689700261X
   [Anonymous], 2010, Programming in Scala
   [Anonymous], 2015, Hadoop
   BILLINGS J, 2006, P ML O6 2006 ACM SIG, P20
   Chambers C, 2010, PLDI '10: PROCEEDINGS OF THE 2010 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P363, DOI 10.1145/1806596.1806638
   Dean J, 2004, USENIX ASSOCIATION PROCEEDINGS OF THE SIXTH SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION (OSDE '04), P137
   Dzik J., 2013, PLOS SOSP
   Elsman M., 2005, TFP 05, P47
   Epstein J, 2011, HASKELL 11: PROCEEDINGS OF THE 2011 ACM SIGPLAN HASKELL SYMPOSIUM, P118
   Germain Guillaume, 2006, P 2006 ACM SIGPLAN W, P20
   Gunda Pradeep Kumar, 2010, P 9 S OP SYST DES IM, P10
   Haller P., 2012, FUTURES AND PROMISES
   Haller P, 2016, ACM SIGPLAN NOTICES, V51, P272, DOI 10.1145/3022671.2984042
   Haller P, 2010, LECT NOTES COMPUT SC, V6183, P354
   Haller P, 2009, THEOR COMPUT SCI, V410, P202, DOI 10.1016/j.tcs.2008.09.019
   He J., 2014, P 5 ANN SCAL WORKSH, P23
   Herhut S, 2013, ACM SIGPLAN NOTICES, V48, P729, DOI [10.1145/2544173.2509516, 10.1145/2509136.2509516]
   Hickey R., 2008, P 2008 S DYN LANG, P1
   Isard M., 2007, Operating Systems Review, V41, P59, DOI 10.1145/1272998.1273005
   Jones S. P., 1996, Conference Record of POPL '96: The 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P295, DOI 10.1145/237721.237794
   Kennedy AJ, 2004, J FUNCT PROGRAM, V14, P727, DOI 10.1017/S0956796804005209
   Matsakis NicholasD., 2012, HotPar (2012), P5
   Miller H, 2014, LECT NOTES COMPUT SC, V8586, P308
   Miller H, 2013, ACM SIGPLAN NOTICES, V48, P183, DOI [10.1145/2509136.2509547, 10.1145/2544173.2509547]
   MILNER R, 1992, INFORM COMPUT, V100, P1, DOI [10.1016/0890-5401(92)90008-4, 10.1016/0890-5401(92)90009-5]
   Murphy T, 2008, LECT NOTES COMPUT SC, V4912, P108
   Murray D. G., 2011, P USENIX S NETW SYST
   Odersky M, 2005, ACM SIGPLAN NOTICES, V40, P41, DOI 10.1145/1103845.1094815
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Rossberg A., 2004, TRENDS FUNCTIONAL PR, P79
   Sewell P, 2005, ACM SIGPLAN NOTICES, V40, P15, DOI 10.1145/1090189.1086370
   Shapiro M, 2011, LECT NOTES COMPUT SC, V6976, P386, DOI 10.1007/978-3-642-24550-3_29
   Waldo Jim., 1996, International Workshop on Mobile Object Systems, P49
   Yu Y, 2008, PACIIA: 2008 PACIFIC-ASIA WORKSHOP ON COMPUTATIONAL INTELLIGENCE AND INDUSTRIAL APPLICATION, VOLS 1-3, PROCEEDINGS, P1
   Zaharia M., 2010, P USENIX WORKSH HOT, P10
NR 36
TC 4
Z9 4
U1 0
U2 3
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD MAR 12
PY 2018
VL 28
AR e7
DI 10.1017/S0956796818000035
PG 48
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA FZ0NN
UT WOS:000427266900001
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Chen, S
   Erwig, M
AF Chen, Sheng
   Erwig, Martin
TI Systematic identification and communication of type errors
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB When type inference fails, it is often difficult to pinpoint the cause of the type error among many potential candidates. Generating informative messages to remove the type error is another difficult task due to the limited availability of type information. Over the last three decades many approaches have been developed to help debug type errors. However, most of these methods suffer from one or more of the following problems: (1) Being incomplete, they miss the real cause. (2) They cover many potential causes without distinguishing them. (3) They provide little or no information for how to remove the type error. Any one of this problems can turn the type-error debugging process into a tedious and ineffective endeavor. To address this issue, we have developed a method named counter-factual typing, which (1) finds a comprehensive set of error causes in AST leaves, (2) computes an informative message on how to get rid of the type error for each error cause, and (3) ranks all messages and iteratively presents the message for the most likely error cause. The biggest technical challenge is the efficient generation of all error messages, which seems to be exponential in the size of the expression. We address this challenge by employing the idea of variational typing that systematically reuses computations for shared parts and generates all messages by typing the whole ill-typed expression only once. We have evaluated our approach over a large set of examples collected from previous publications in the literature. The evaluation result shows that our approach outperforms previous approaches and is computationally feasible.
C1 [Chen, Sheng] UL Lafayette, Lafayette, LA 70504 USA.
   [Erwig, Martin] Oregon State Univ, Corvallis, OR 97331 USA.
C3 Oregon State University
RP Chen, S (corresponding author), UL Lafayette, Lafayette, LA 70504 USA.
EM chen@louisiana.edu; erwig@oregonstate.edu
FU National Science Foundation [IIS-1314384, CCF-1717300, CCF-1750886]; Div
   Of Information & Intelligent Systems; Direct For Computer & Info Scie &
   Enginr [1314384] Funding Source: National Science Foundation
FX This work is supported by the National Science Foundation under the
   grants IIS-1314384, CCF-1717300, and CCF-1750886. We thank the anonymous
   POPL and JFP reviewers, whose feedback has improved both the content and
   the presentation of the paper.
CR [Anonymous], 2005, THESIS
   [Anonymous], THESIS
   [Anonymous], 2003, WORKSHOP HASKELL P H, DOI [DOI 10.1145/871895.871903, 10.1145/871895.871903]
   [Anonymous], 2003, P ACM SIGPLAN WORKSH
   Beaven M., 1993, ACM Letters on Programming Languages and Systems, V2, P17, DOI 10.1145/176454.176460
   Bernstein K.L., 1995, Debugging Type Errors
   Brassel B., 2004, P INT WORKSH IMPL FU
   Chen S, 2017, J VISUAL LANG COMPUT, V39, P10, DOI 10.1016/j.jvlc.2016.07.001
   Chen S, 2014, LECT NOTES COMPUT SC, V8475, P35, DOI 10.1007/978-3-319-07151-0_3
   Chen S, 2014, ACM T PROGR LANG SYS, V36, DOI 10.1145/2518190
   Chen S, 2014, ACM SIGPLAN NOTICES, V49, P583, DOI 10.1145/2535838.2535863
   Chen S, 2012, ACM SIGPLAN NOTICES, V47, P29, DOI 10.1145/2398856.2364535
   Chitil O, 2001, ACM SIGPLAN NOTICES, V36, P193, DOI 10.1145/507669.507659
   Choppella V., 2002, THESIS
   Damas L., 1982, C REC 9 ANN ACM S PR, P207, DOI DOI 10.1145/582153.582176
   Erwig M, 2006, J VISUAL LANG COMPUT, V17, P161, DOI 10.1016/j.jvlc.2005.04.004
   Erwig M, 2011, ACM T SOFTW ENG METH, V21, DOI 10.1145/2063239.2063245
   Haack C, 2003, LECT NOTES COMPUT SC, V2618, P284
   Hage J., 2013, COMMUNICATION
   Hage J, 2007, LECT NOTES COMPUT SC, V4449, P199
   Johnson-acsadi G, 1986, Popul Bull UN, P44, DOI 10.1145/512644.512649
   Lee OS, 1998, ACM T PROGR LANG SYS, V20, P707, DOI 10.1145/291891.291892
   Lee Oukseh, 2000, ROPAS20005 KOR ADV I
   Lerner BS, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P425, DOI 10.1145/1250734.1250783
   Lerner BS., 2006, Proceedings of the ACM Workshop on ML, 2006, Portland, Oregon, USA, September 16, 2006, P63, DOI DOI 10.1145/1159876
   Loncaric C, 2016, ACM SIGPLAN NOTICES, V51, P781, DOI 10.1145/3022671.2983994
   McAdam B.J., 2002, THESIS
   McAdam B. J., 1999, ECSLFCS99415 U ED
   Neubauer M, 2003, ACM SIGPLAN NOTICES, V38, P15, DOI 10.1145/944746.944708
   Pavlinovic Z, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P412, DOI 10.1145/2784731.2784765
   Pavlinovic Z, 2014, ACM SIGPLAN NOTICES, V49, P525, DOI [10.1145/2714064.2660230, 10.1145/2660193.2660230]
   Pfenning F., 1991, Proceedings of Sixth Annual IEEE Symposium on Logic in Computer Science (Cat. No.91CH3025-4), P74, DOI 10.1109/LICS.1991.151632
   Scaffidi C., 2012, C-J CARBON RES, V28, P220
   Schilling Thomas, 2012, Trends in Functional Programming. 12th International Symposium, TFP 2011. Revised Selected Papers, P1, DOI 10.1007/978-3-642-32037-8_1
   Seidel E. L., 2017, P ACM PROGRAM LANG, V1
   Seidel EL, 2016, ACM SIGPLAN NOTICES, V51, P228, DOI 10.1145/3022670.2951915
   Tip F, 2001, ACM T SOFTW ENG METH, V10, P5, DOI 10.1145/366378.366379
   Tirronen V, 2015, J FUNCT PROGRAM, V25, DOI 10.1017/S0956796815000179
   Tsushima K., 2014, PPL 2014
   Wand Mitchell, 1986, POPL, P38, DOI [DOI 10.1145/512644.512648, 10.1145/512644.512648]
   Wu B., 2017, P ACM PROGRAM LANG, V1
   Wu B., 2017, P ACM PROGRAM LANG, V1, P106
   Yang J, 2000, TRENDS IN FUNCTIONAL PROGRAMMING, P58
   Yang J-K, 2001, THESIS NATL S YATSEN
   Yang Jun, 2000, P 12 INT WORKSH IMPL, P71
   Zhang DF, 2015, ACM SIGPLAN NOTICES, V50, P12, DOI [10.1145/2813885.2738009, 10.1145/2737924.2738009]
   Zhang DF, 2014, ACM SIGPLAN NOTICES, V49, P569, DOI 10.1145/2535838.2535870
NR 47
TC 3
Z9 3
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD JAN 25
PY 2018
VL 28
AR e2
DI 10.1017/S095679681700020X
PG 48
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA FT8KY
UT WOS:000423402900001
DA 2024-07-18
ER

PT J
AU Bendkowski, M
AF Bendkowski, Maciej
TI Normal-order reduction grammars
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB We present an algorithm which, for given n, generates an unambiguous regular tree grammar defining the set of combinatory logic terms, over the set {S, K} of primitive combinators, requiring exactly n normal-order reduction steps to normalize. As a consequence of Curry and Feys's standardization theorem, our reduction grammars form a complete syntactic characterization of normalizing combinatory logic terms. Using them, we provide a recursive method of constructing ordinary generating functions counting the number of SK-combinators reducing in n normal-order reduction steps. Finally, we investigate the size of generated grammars giving a primitive recursive upper bound.
C1 [Bendkowski, Maciej] Jagiellonian Univ, Theoret Comp Sci Dept, Fac Math & Comp Sci, Ul Prof Lojasiewicza 6, PL-30348 Krakow, Poland.
C3 Jagiellonian University
RP Bendkowski, M (corresponding author), Jagiellonian Univ, Theoret Comp Sci Dept, Fac Math & Comp Sci, Ul Prof Lojasiewicza 6, PL-30348 Krakow, Poland.
EM maciej.bendkowski@tcs.uj.edu.pl
FU Polish National Science Center [2013/11/B/ST6/00975]
FX This work was partially supported within the Polish National Science
   Center grant 2013/11/B/ST6/00975.
CR Abramowitz M, 1972, Handbook of Mathematical Functions with Formulas, Graphs, and Mathematical Tables
   [Anonymous], 1984, The Lambda Calculus: Its Syntax and Semantics
   Bendkowski Maciej, 2016, SOFSEM 2016 : Theory and Practice of Computer Science. 42nd International Conference on Current Trends in Theory and Practice of Computer Science. Proceedings: LNCS 9587, P183, DOI 10.1007/978-3-662-49192-8_15
   Bendkowski M., 2016, NORMAL ORDER REDUCTI
   Bendkowski M, 2015, LECT NOTES COMPUT SC, V9076, P62, DOI 10.1007/978-3-319-17142-5_7
   Bernadet A, 2013, LOG METH COMPUT SCI, V9, DOI 10.2168/LMCS-9(4:3)2013
   Bodini O., 2015, ARXIV151001167
   Comon H., 2007, TREE AUTOMATA TECHNI
   Curry H.B., 1958, Combinatory logic, V1
   Curry HB, 1930, AM J MATH, V52, P509, DOI 10.2307/2370619
   David R, 2013, LOG METH COMPUT SCI, V9, DOI 10.2168/LMCS-9(1:02)2013
   Duchon P, 2004, COMB PROBAB COMPUT, V13, P577, DOI 10.1017/S0963548304006315
   Flajolet P., 2009, Analytic Combinatorics, Vfirst
   Gittenberger B., 2016, LIPICS, V47
   Grygiel K, 2015, J FUNCT PROGRAM, V25, DOI 10.1017/S0956796815000271
   Grygiel K, 2013, J FUNCT PROGRAM, V23, P594, DOI 10.1017/S0956796813000178
   Palka M., 2011, P 6 INT WORKSH AUT S
   Schonfinkel M, 1924, MATH ANN, V92, P305, DOI 10.1007/BF01448013
   TURNER D, 1986, SIGPLAN NOTICES, V21, P158, DOI 10.1145/15042.15053
   TURNER DA, 1979, SOFTWARE PRACT EXPER, V9, P31, DOI 10.1002/spe.4380090105
   Wolfram Research Inc, 2015, MATH VERS 10 3
NR 21
TC 3
Z9 3
U1 0
U2 3
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PY 2017
VL 27
AR e6
DI 10.1017/S0956796816000332
PG 31
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA EK5RW
UT WOS:000393984500001
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Ziliani, B
   Sozeau, M
AF Ziliani, Beta
   Sozeau, Matthieu
TI A comprehensible guide to a new unifier for CIC including universe
   polymorphism and overloading
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID UNIFICATION; PROOF
AB Unification is a core component of every proof assistant or programming language featuring dependent types. In many cases, it must deal with higher order problems up to conversion. Since unification in such conditions is undecidable, unification algorithms may include several heuristics to solve common problems. However, when the stack of heuristics grows large, the result and complexity of the algorithm can become unpredictable. Our contributions are twofold: (1) We present a full description of a new unification algorithm for the Calculus of Inductive Constructions (the base logic of Coq), building it up from a basic calculus to the full Calculus of Inductive Constructions as it is implemented in Coq, including universe polymorphism, canonical structures (the overloading mechanism baked into Coq's unification), and a small set of useful heuristics. (2) We implemented our algorithm, and tested it on several libraries, providing evidence that the selected set of heuristics suffices for large developments.
C1 [Ziliani, Beta] Univ Nacl Cordoba, FAMAF, RA-5000 Cordoba, Argentina.
   [Ziliani, Beta] Consejo Nacl Invest Cient & Tecn, Cordoba, Argentina.
   [Sozeau, Matthieu] Inria, Paris, France.
   [Sozeau, Matthieu] PPS, Paris, France.
   [Sozeau, Matthieu] Univ Paris Diderot, Paris, France.
C3 National University of Cordoba; Consejo Nacional de Investigaciones
   Cientificas y Tecnicas (CONICET); Inria; Universite Paris Cite
RP Ziliani, B (corresponding author), Univ Nacl Cordoba, FAMAF, RA-5000 Cordoba, Argentina.; Ziliani, B (corresponding author), Consejo Nacl Invest Cient & Tecn, Cordoba, Argentina.
EM bziliani@famaf.unc.edu.ar; matthieu.sozeau@inria.fr
FU EU [295261]
FX This research was partially supported by EU 7FP grant agreement 295261
   (MEALS).
CR Abel A, 2011, LECT NOTES COMPUT SC, V6690, P10, DOI 10.1007/978-3-642-21691-6_5
   [Anonymous], 2007, PRACTICAL PROGRAMMIN
   [Anonymous], 2012, The Coq proof assistant reference manual
   [Anonymous], 2011, THESIS
   Asperti A., 2006, CRAFTING PROOF ASSIS, P18
   Asperti A, 2012, LOG METH COMPUT SCI, V8, DOI 10.2168/LMCS-8(1:18)2012
   Asperti A, 2009, LECT NOTES COMPUT SC, V5674, P84, DOI 10.1007/978-3-642-03359-9_8
   Avigad J., 2015, ARXIV E PRINTS
   Baader F., 1994, HDB LOGIC ARTIFICIAL
   Baader Franz, 1998, TERM REWRITING ALL
   Bender MA, 2016, ACM T ALGORITHMS, V12, DOI 10.1145/2756553
   Brady E, 2013, J FUNCT PROGRAM, V23, P552, DOI 10.1017/S095679681300018X
   Cervesato I, 2003, J LOGIC COMPUT, V13, P639, DOI 10.1093/logcom/13.5.639
   Chlipala A., 2011, CERTIFIED PROGRAMMIN
   Dowek G., 1996, P LICS 95, p[36637, 366]
   Dunchev C, 2015, LECT NOTES COMPUT SC, V9450, P460, DOI 10.1007/978-3-662-48899-7_32
   ELLIOTT CM, 1989, LECT NOTES COMPUT SC, V355, P121
   Garillot F, 2009, LECT NOTES COMPUT SC, V5674, P327, DOI 10.1007/978-3-642-03359-9_23
   Gonthier G, 2013, J FUNCT PROGRAM, V23, P357, DOI 10.1017/S0956796813000051
   Gonthier G, 2013, LECT NOTES COMPUT SC, V7998, P163, DOI 10.1007/978-3-642-39634-2_14
   Gonthier G, 2011, ICFP 11 - PROCEEDINGS OF THE 2011 ACM SIGPLAN: INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P163
   HARPER R, 1991, THEOR COMPUT SCI, V89, P107, DOI 10.1016/0304-3975(90)90108-T
   Huet G., 2002, Theorem Proving in Higher Order Logics. 15th International Conference, TPHOLs 2002. Proceedings (Lecture Notes in Computer Science Vol.2410), P3
   Jones SP, 2006, ACM SIGPLAN NOTICES, V41, P50
   KNIGHT K, 1989, COMPUT SURV, V21, P93, DOI 10.1145/62029.62030
   Mahboubi A, 2013, LECT NOTES COMPUT SC, V7998, P19, DOI 10.1007/978-3-642-39634-2_5
   Miller D., 1991, Logic Programming. Proceedings of the Eighth International Conference, P255
   Nanevski A, 2008, ACM T COMPUT LOG, V9, DOI 10.1145/1352582.1352591
   Norell U, 2009, LECT NOTES COMPUT SC, V5832, P230, DOI 10.1007/978-3-642-04652-0_5
   PAULSON LC, 1985, SCI COMPUT PROGRAM, V5, P143, DOI 10.1016/0167-6423(85)90009-7
   Pfenning F., 1991, Proceedings of Sixth Annual IEEE Symposium on Logic in Computer Science (Cat. No.91CH3025-4), P74, DOI 10.1109/LICS.1991.151632
   Pfenning F., 1998, TYPES PROOFS PROGRAM, P1657
   Reed Jason., 2009, P 4 INT WORKSHOP LOG, P49
   ROBINSON JA, 1965, J ACM, V12, P23, DOI 10.1145/321250.321253
   Sacerdoti Coen C., 2004, THESIS
   Saibi A, 1999, THESIS, P6
   Sozeau Matthieu, 2014, Interactive Theorem Proving. 5th International Conference, ITP 2014, Held as Part of the Vienna Summer of Logic, VSL 2014. Proceedings: LNCS 8558, P499, DOI 10.1007/978-3-319-08970-6_32
   Tassi E., 2008, TECHNICAL REPORT
   WADLER P, 1989, CONFERENCE RECORD OF THE SIXTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P60, DOI 10.1145/75277.75283
   Ziliani B, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P179, DOI 10.1145/2784731.2784751
   Ziliani B, 2015, J FUNCT PROGRAM, V25, DOI 10.1017/S0956796815000118
   Ziliani B, 2013, ACM SIGPLAN NOTICES, V48, P87, DOI [10.1145/2500365.2500579, 10.1145/2544174.2500579]
NR 42
TC 5
Z9 7
U1 0
U2 3
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PY 2017
VL 27
BP 1
EP 63
DI 10.1017/S0956796817000028
PG 63
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA EN1ZN
UT WOS:000395809200001
DA 2024-07-18
ER

PT J
AU Hritcu, C
   Lampropoulos, L
   Spector-Zabusky, A
   De Amorim, AA
   Dénès, M
   Hughes, J
   Pierce, BC
   Vytiniotis, D
AF Hritcu, Catalin
   Lampropoulos, Leonidas
   Spector-Zabusky, Antal
   De Amorim, Arthur Azevedo
   Denes, Maxime
   Hughes, John
   Pierce, Benjamin C.
   Vytiniotis, Dimitrios
TI Testing noninterference, quickly
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID SECURE INFORMATION-FLOW
AB Information-flow control mechanisms are difficult both to design and to prove correct. To reduce the time wasted on doomed proof attempts due to broken definitions, we advocate modern random-testing techniques for finding counterexamples during the design process. We show how to use QuickCheck, a property-based random-testing tool, to guide the design of increasingly complex information-flow abstract machines, leading up to a sophisticated register machine with a novel and highly permissive flow-sensitive dynamic enforcement mechanism that is sound in the presence of first-class public labels. We find that both sophisticated strategies for generating well-distributed random programs and readily falsifiable formulations of noninterference properties are critically important for efficient testing. We propose several approaches and evaluate their effectiveness on a collection of injected bugs of varying subtlety. We also present an effective technique for shrinking large counterexamples to minimal, easily comprehensible ones. Taken together, our best methods enable us to quickly and automatically generate simple counterexamples for more than 45 bugs. Moreover, we show how testing guides the discovery of the sophisticated invariants needed for the noninterference proof of our most complex machine.
C1 [Hritcu, Catalin] Inria Paris, Prosecco Team, Paris, France.
   [Lampropoulos, Leonidas; Spector-Zabusky, Antal; De Amorim, Arthur Azevedo; Pierce, Benjamin C.] Univ Penn, Dept Comp & Informat Sci, 200 S 33Rd St, Philadelphia, PA 19104 USA.
   [Denes, Maxime] Inria Paris, Gallium Team, Paris, France.
   [Hughes, John] Chalmers Univ, Comp Sci & Engn, Gothenburg, Sweden.
   [Vytiniotis, Dimitrios] Microsoft Res, Programming Principles & Tools Grp, Cambridge, England.
C3 University of Pennsylvania; Chalmers University of Technology; Microsoft
RP Hritcu, C (corresponding author), Inria Paris, Prosecco Team, Paris, France.
EM catalin.hritcu@inria.fr
RI Hritcu, Catalin/D-5964-2012
OI Lampropoulos, Leonidas/0000-0003-0269-9815
FU DARPA CRASH program through the US Air Force Research Laboratory (AFRL)
   [FA8650-10-C-7090]; NSF [1421243]; Swedish Foundation for Strategic
   Research grant RAWFP; Division of Computing and Communication
   Foundations; Direct For Computer & Info Scie & Enginr [1421243] Funding
   Source: National Science Foundation
FX We thank the participants in the discussion at the IFIP WG 2.8 meeting
   in Storulvan that originated this work: Ulf Norell, Rishiyur S. Nikhil,
   Michal Palka, Nick Smallbone, and Meng Wang. We are grateful to Johannes
   Borgstrom, Cristian Cadar, Delphine Demange, Matthias Felleisen, Robby
   Findler, Alex Groce, Casey Klein, Ben Karel, Scott Moore, Michal Palka,
   John Regehr, Howard Reubenstein, Alejandro Russo, Deian Stefan, Greg
   Sullivan, and Andrew Tolmach for providing feedback on a draft, and to
   the members of the CRASH/SAFE team and to Manolis Papadakis for fruitful
   discussions. Finally, we thank the anonymous reviewers for their
   suggestions and Andreas Haeberlen for kindly providing us computing time
   on his cluster. This material is based upon work supported by the DARPA
   CRASH program through the US Air Force Research Laboratory (AFRL) under
   Contract No. FA8650-10-C-7090, and NSF award 1421243, Random Testing for
   Language Design. The views expressed are those of the authors and do not
   reflect the official policy or position of the Department of Defense or
   the U.S. Government. The work is also partially funded under the Swedish
   Foundation for Strategic Research grant RAWFP.
CR [Anonymous], 2006, P 13 ACM C COMPUTER
   [Anonymous], 2012, RR7987 INRIA
   [Anonymous], 2006, P AS COMP SCI C SEC
   Antoy S, 2000, J ACM, V47, P776, DOI 10.1145/347476.347484
   AUSTIN TH, 2010, P 5 ACM SIGPLAN WORK, DOI DOI 10.1145/1814217.1814220
   Austin Thomas H., 2009, P ACM SIGPLAN 4 WORK, P113, DOI DOI 10.1145/1554339.1554353
   Balliu M, 2012, P IEEE CSFW, P30, DOI 10.1109/CSF.2012.24
   Banerjee A, 2005, J FUNCT PROGRAM, V15, P131, DOI 10.1017/S0956796804005453
   Barthe Gilles, 2011, FM 2011: Formal Methods. Proceedings 17th International Symposium on Formal Methods, P200, DOI 10.1007/978-3-642-21437-0_17
   Barthe G, 2011, MATH STRUCT COMP SCI, V21, P1207, DOI 10.1017/S0960129511000193
   Benton N, 2004, ACM SIGPLAN NOTICES, V39, P14, DOI 10.1145/982962.964003
   Berghofer S, 2004, PROCEEDINGS OF THE SECOND INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING AND FORMAL METHODS, P230, DOI 10.1109/SEFM.2004.1347524
   Bichhawat A, 2014, INT C PRINC SEC TRUS, P159
   Bichhawat A., 2014, P 9 WORKSH PROGR LAN, P15, DOI [10.1145/2637113.2637116, DOI 10.1145/2637113.2637116]
   Birgisson Arnar, 2012, Computer Security - ESORICS 2012. Proceedings 17th European Symposium on Research in Computer Security, P55, DOI 10.1007/978-3-642-33167-1_4
   Buiras P, 2014, P IEEE CSFW, P65, DOI 10.1109/CSF.2014.13
   Bulwahn Lukas, 2012, Certified Programs and Proofs. Second International Conference (CPP 2012). Proceedings, P92, DOI 10.1007/978-3-642-35308-6_10
   Bulwahn L, 2012, LECT NOTES COMPUT SC, V7180, P153, DOI 10.1007/978-3-642-28717-6_14
   Burnim Jacob, 2008, 2008 23rd IEEE/ACM International Conference on Automated Software Engineering, P443, DOI 10.1109/ASE.2008.69
   Cadar C., 2008, Proceedings of the 8th USENIX conference on Operating systems design and implementation, OSDI'08, (USA), P209
   Cadar C, 2013, COMMUN ACM, V56, P82, DOI 10.1145/2408776.2408795
   Cadar C, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P1066, DOI 10.1145/1985793.1985995
   Chamarthi HR, 2011, ELECTRON PROC THEOR, P4, DOI 10.4204/EPTCS.70.1
   Christiansen J, 2008, LECT NOTES COMPUT SC, V4989, P322
   Claessen K, 2000, ACM SIGPLAN NOTICES, V35, P268, DOI 10.1145/357766.351266
   Claessen K, 2014, LECT NOTES COMPUT SC, V8475, P18, DOI 10.1007/978-3-319-07151-0_2
   Clarkson MR, 2010, J COMPUT SECUR, V18, P1157, DOI 10.3233/JCS-2009-0393
   de Amorim AA, 2015, P IEEE S SECUR PRIV, P813, DOI 10.1109/SP.2015.55
   de Amorim AA, 2014, ACM SIGPLAN NOTICES, V49, P165, DOI 10.1145/2535838.2535839
   Dybjer P, 2003, LECT NOTES COMPUT SC, V2758, P188
   Eastlund C, 2009, P 8 INT WORKSHOP ACL, P42, DOI [10.1145/1637837.1637844, DOI 10.1145/1637837.1637844]
   FENTON JS, 1974, COMPUT J, V17, P143, DOI 10.1093/comjnl/17.2.143
   Fetscher B, 2015, LECT NOTES COMPUT SC, V9032, P383, DOI 10.1007/978-3-662-46669-8_16
   Giffin Daniel B, 2012, 10 USENIX S OPERATIN, P47
   Godefroid P, 2005, ACM SIGPLAN NOTICES, V40, P213, DOI 10.1145/1064978.1065036
   Goguen J. A., 1984, Proceedings of the 1984 Symposium on Security and Privacy, P75
   Groce A, 2007, PROC INT CONF SOFTW, P621
   Hedin D, 2012, P IEEE CSFW, P3, DOI 10.1109/CSF.2012.19
   Hritcu C, 2013, ACM SIGPLAN NOTICES, V48, P455, DOI [10.1145/2500365.2500574, 10.1145/2544174.2500574]
   Hritcu C, 2013, P IEEE S SECUR PRIV, P3, DOI 10.1109/SP.2013.10
   Hughes J, 2007, LECT NOTES COMPUT SC, V4354, P1
   Klein C, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P285
   Klein Casey., 2009, Proc. Scheme and Functional Programming, P26
   Koopman Pieter, 2014, Trends in Functional Programming. 14th International Symposium, TFP 2013. Revised Selected Papers: LNCS 8322, P107, DOI 10.1007/978-3-642-45340-3_7
   Le Guernic G, 2007, 20TH IEEE COMPUTER SECURITY FOUNDATIONS SYMPOSIUM (CSFS20), PROCEEDINGS, P218, DOI 10.1109/CSF.2007.10
   Leroy X, 2008, J AUTOM REASONING, V41, P1, DOI 10.1007/s10817-008-9099-0
   Lindblad F., 2007, TRENDS FUNCTIONAL PR, P105
   Majumdar R, 2007, PROC INT CONF SOFTW, P416
   Milushev Dimiter, 2012, Formal Techniques for Distributed Systems. Joint 14th IFIP WG 6.1 International Conference, FMOODS 2012 and 32nd IFIP WG 6.1 International Conference, FORTE 2012, P152, DOI 10.1007/978-3-642-30793-5_10
   MOHR R, 1986, ARTIF INTELL, V28, P225, DOI 10.1016/0004-3702(86)90083-4
   Ochoa M, 2015, LECT NOTES COMPUT SC, V8978, P34, DOI 10.1007/978-3-319-15618-7_3
   Pacheco C., 2007, OOPSLA 2007 COMPANIO, P815
   Paraskevopoulou Z, 2015, LECT NOTES COMPUT SC, V9236, P325, DOI 10.1007/978-3-319-22102-1_22
   Regehr J, 2012, ACM SIGPLAN NOTICES, V47, P335, DOI 10.1145/2345156.2254104
   Runciman C, 2008, HASKELL'08: PROCEEDINGS OF THE ACM SIGPLAN 2008 HASKELL SYMPOSIUM, P37
   Russo A, 2010, 2010 23RD IEEE COMPUTER SECURITY FOUNDATIONS SYMPOSIUM (CSF), P186, DOI 10.1109/CSF.2010.20
   Sabelfeld A, 2005, 18TH IEEE COMPUTER SECURITY FOUNDATIONS WORKSHOP, PROCEEDINGS, P255, DOI 10.1109/CSFW.2005.15
   Sabelfeld A, 2003, IEEE J SEL AREA COMM, V21, P5, DOI 10.1109/JSAC.2002.806121
   Sabelfeld A, 2010, LECT NOTES COMPUT SC, V5947, P352, DOI 10.1007/978-3-642-11486-1_30
   Sen K., 2005, P 10 EUR SOFTW ENG C, V30, P263, DOI DOI 10.1145/1081706.1081750
   STEFAN D Stefan D, 2011, HASK 11 P 2011 ACM HASKELL 11: PROCEEDINGS OF THE 2011 ACM SIGPLAN HASKELL SYMPOSIUM, p95 95
   Terauchi T, 2005, LECT NOTES COMPUT SC, V3672, P352
   Torlak E, 2014, ACM SIGPLAN NOTICES, V49, P530, DOI [10.1145/2594291.2594340, 10.1145/2666356.2594340]
   Williams N, 2004, 19TH INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING, PROCEEDINGS, P290, DOI 10.1109/ASE.2004.1342749
   Yang XJ, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P283
   Zdancewic S. A., 2002, THESIS CORNELL U
   Zeller A, 2002, IEEE T SOFTWARE ENG, V28, P183, DOI 10.1109/32.988498
   Zheng L, 2007, INT J INF SECUR, V6, P67, DOI 10.1007/s10207-007-0019-9
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
NR 73
TC 14
Z9 14
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PY 2016
VL 26
AR e4
DI 10.1017/S0956796816000058
PG 62
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DJ5AT
UT WOS:000374219900001
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Keep, AW
   Dybvig, RK
AF Keep, Andrew W.
   Dybvig, R. Kent
TI A run-time representation of scheme record types
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB The Revised(6) Report on the Algorithmic Language Scheme added a mechanism to the Scheme programming language for creating new record types procedurally. While many programming languages support user defined, structured data types, these are usually handled syntactically, so that the compiler can make choices at compile time about the memory layout of these data types. The procedural record types in Scheme, however, can be constructed at run time, making the efficient run-time representation of record types important to ensure good run-time performance. The runtime representation used in our implementation provides an extended model for record types allowing record types to represent foreign scalar data types, e.g., machine word integers, and allows the base record type to be extended to create non-R6RS record-type systems. This article describes our runtime representation for record types, how the garbage collector handles foreign scalar data types, and includes extended record type systems both for an object-oriented programming model and a representation of foreign structured data types.
C1 [Keep, Andrew W.] Univ Utah, Salt Lake City, UT 84112 USA.
   [Keep, Andrew W.; Dybvig, R. Kent] Cisco Syst Inc, San Jose, CA USA.
C3 Utah System of Higher Education; University of Utah; Cisco Systems Inc
RP Keep, AW (corresponding author), Univ Utah, Salt Lake City, UT 84112 USA.
EM akeep@cisco.com; dyb@cisco.com
FU DARPA [FA8750-12-2-0106]
FX This material is based in part on research sponsored by DARPA under
   agreement number FA8750-12-2-0106. The U.S. Government is authorized to
   reproduce and distribute reprints for Governmental purposes
   notwithstanding any copyright notation thereon.
CR Bloch Joshua., 2008, The Java Series, V2nd
   BRIOT JP, 1989, SIGPLAN NOTICES, V24, P419, DOI 10.1145/74878.74921
   CHAMBERS C, 1989, SIGPLAN NOTICES, V24, P49, DOI 10.1145/74878.74884
   Clinger W. D., 2012, LARCENY USERS MANUAL
   DEMICHIEL LG, 1987, LECT NOTES COMPUT SC, V276, P151
   Flatt M., 2012, RACKET GUIDE
   Ghuloum Abdulaziz., 2008, Ikarus Scheme User's Guide
   Goldberg A., 1983, Smalltalk 80: The Language and Its Implementation
   Google Inc., 2012, CHROM V8 DES EL
   Hickey R., 2012, CLOJURE
   Keep A. W., 2011, P 2011 WORKSH SCHEM
   Keep Andrew W., 2012, P 2012 WORKSH SCHEM
   KELSEY R, 2008, INCOMPLETE SCHEME 48
   Sperber M., 2009, J. Funct. Program, V19, P1
   UNGAR D, 1987, SIGPLAN NOTICES, V22, P227, DOI 10.1145/38807.38828
   Waddell O., 1997, Static Analysis. 4th International Symposium, SAS '97 Proceedings, P35, DOI 10.1007/BFb0032732
   Waddell O., 2004, LIGHTWEIGHT OBJECT S
   Winkelmann F. L., 2012, CHICKEN USERS MANUAL
NR 18
TC 1
Z9 1
U1 0
U2 1
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD NOV
PY 2014
VL 24
IS 6
BP 675
EP 716
DI 10.1017/S0956796814000203
PG 42
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CA8JP
UT WOS:000349165400004
OA Bronze
DA 2024-07-18
ER

PT J
AU Devriese, D
   Piessens, F
AF Devriese, Dominique
   Piessens, Frank
TI Finally tagless observable recursion for an abstract grammar model
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB We define a finally tagless, shallow embedding of a typed grammar language. In order to avoid the limitations of traditional parser combinator libraries (no bottom-up parsing, no full grammar analysis or transformation), we require object-language recursion to be observable in the meta-language. Since existing proposals for recursive constructs are not fully satisfactory, we propose new finally tagless primitive recursive constructs to solve the problem. To do this in a well-typed way, we require considerable infrastructure, for which we reuse techniques from the multirec generic programming library. Our infrastructure allows a precise model of the complex interaction between a grammar, a parsing algorithm and a set of semantic actions. On the flip side, our approach requires the grammar author to provide a type-and value-level encoding of the grammar's domain and we can provide only a limited form of constructs like many. We demonstrate five meta-language grammar algorithms exploiting our model, including a grammar pretty-printer, a reachability analysis, a translation of quantified recursive constructs to the standard one and an implementation of the left-corner grammar transform. The work we present forms the basis of the grammar-combinators parsing library, 1 which is the first to work with a precise, shallow model of abstract context-free grammars in a classical (not dependently typed) functional language and which supports a wide range of grammar manipulation primitives. From a more general point of view, our work shows a solution to the well-studied problem of observable sharing in shallowly embedded domain-specific languages and specifically in finally tagless domain-specific languages.
C1 [Devriese, Dominique; Piessens, Frank] Katholieke Univ Leuven, IBBT Distrinet, Louvain, Belgium.
C3 KU Leuven
RP Devriese, D (corresponding author), Katholieke Univ Leuven, IBBT Distrinet, Louvain, Belgium.
EM dominique.devriese@cs.kuleuven.be; frank.piessens@cs.kuleuven.be
RI Piessens, Frank/B-1695-2014; Devriese, Dominique/C-5493-2014
OI Devriese, Dominique/0000-0002-3862-6856
FU Interuniversity Attraction Poles Programme Belgian State (Belgian
   Science Policy); Research Foundation - Flanders (FWO); Research Fund
   K.U. Leuven
FX This research is partially funded by the Interuniversity Attraction
   Poles Programme Belgian State (Belgian Science Policy), the Research
   Foundation - Flanders (FWO) and the Research Fund K.U. Leuven. Dominique
   Devriese holds a PhD fellowship of the Research Foundation - Flanders
   (FWO). We thank Arie Middelkoop, Tom Schrijvers, Adriaan Moors, Doaitse
   Swierstra, Nils Anders Danielsson and anonymous reviewers for their
   comments.
CR Aho A.V., 1986, COMPILERS PRINCIPLES
   [Anonymous], 1981, Lecture Notes in Computer Science, DOI [10.1007/BFb0017309, DOI 10.1007/BFB0017309]
   [Anonymous], P 4 INT WORKSH TYP L
   Baars A. I., 2004, P 2004 HASKELL WORKS
   Blum N, 1999, INFORM COMPUT, V150, P112, DOI 10.1006/inco.1998.2772
   Brink K., 2010, P MPC QUEB CIT CAN J
   Carette J, 2009, J FUNCT PROGRAM, V19, P509, DOI 10.1017/S0956796809007205
   Claessen K., 1999, P ASIAN 99 PHUK THAI
   Danielsson N. A., 2010, P 15 ICFP BALT MD US
   Devriese D., 2010, CW594 KU LEUV
   Devriese D., 2011, P 13 PADL 11 AUST TX
   Erkok L., 2002, 2002 HASK WORKSH PIT
   Ford B, 2002, P ICFP PITTSB PA US
   Frost R. A., 2008, P 10 PADL SAN FRANC
   Gill A, 2009, HASKELL'09: PROCEEDINGS OF THE 2009 ACM SIGPLAN HASKELL SYMPOSIUM, P117
   Grune Dick, 2008, Parsing Techniques: A Practical Guide, V2nd, DOI [10.1007/978-0-387-68954-8, DOI 10.1007/978-0-387-68954-8]
   Hughes J, 2000, SCI COMPUT PROGRAM, V37, P67, DOI 10.1016/S0167-6423(99)00023-4
   JOHNSON SC, 1979, UNIX PROGRAMMERS M B, V2
   Leijen Daan, 2001, Technical Report UUCS- 2001-27
   Magalhaes J. P., 2010, P PEPM MADR SPAIN JA
   Mcbride C, 2008, J FUNCT PROGRAM, V18, P1, DOI 10.1017/S0956796807006326
   Meijer E., 1991, LECT NOTES COMP SCI, V523
   Might M., 2011, P ICFP TOK JAP SEPT
   Moore R. C., 2000, P NAACL SEATTL WA US
   Norell Ulf, 2007, Towards a practical programming language based on dependent type theory
   PARR TJ, 1995, SOFTWARE PRACT EXPER, V25, P789, DOI 10.1002/spe.4380250705
   Paterson R, 2001, P ICFP FLOR IT SEPT
   Peyton Jones S., 2006, P ICFP PORTL OR US S
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Rodriguez A., 2009, P 14 ICFP ED SCOTL A
   Rosenkrantz D. J., 1970, P 11 ANN S SWITCH AU
   Sabry A., 1998, Journal of Functional Programming, V8, P1, DOI 10.1017/S0956796897002943
   Schrijvers T., 2008, P 13 ICFP BRIT COL C
   Sheard T, 2002, ACM SIGPLAN NOTICES, V37, P60, DOI 10.1145/636517.636528
   Sheard T, 2005, ANOTHER LOOK HARDWAR
   Swierstra S., 1996, P AFP OL WA US
   Swierstra SD, 2009, LECT NOTES COMPUT SC, V5520, P252, DOI 10.1007/978-3-642-03153-3_6
   Swierstra W, 2008, J FUNCT PROGRAM, V18, P423, DOI 10.1017/S0956796808006758
   Viera M., 2008, P HASKELL 2008 BRIT
NR 39
TC 6
Z9 6
U1 0
U2 1
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD NOV
PY 2012
VL 22
BP 757
EP 796
DI 10.1017/S0956796812000226
PN 6
PG 40
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 019GO
UT WOS:000309725700002
OA Green Accepted, Bronze
DA 2024-07-18
ER

PT J
AU Vytiniotis, D
   Weirich, S
AF Vytiniotis, Dimitrios
   Weirich, Stephanie
TI Parametricity, type equality, and higher-order polymorphism
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB Propositions that express type equality are a frequent ingredient of modern functional programming - they can encode generic functions, dynamic types, and GADTs. Via the Curry-Howard correspondence, these propositions are ordinary types inhabited by proof terms, computed using runtime type representations. In this paper we show that two examples of type equality propositions actually do reflect type equality; they are only inhabited when their arguments are equal and their proofs are unique (up to equivalence.) We show this result in the context of a strongly normalizing language with higher-order polymorphism and primitive recursion over runtime-type representations by proving Reynolds's abstraction theorem. We then use this theorem to derive "free" theorems about equality types.
C1 [Vytiniotis, Dimitrios] Microsoft Res Cambridge, Cambridge CB3 0FB, England.
   [Weirich, Stephanie] Univ Penn, Dept Comp & Informat Sci, Philadelphia, PA 19104 USA.
C3 Microsoft; University of Pennsylvania
RP Vytiniotis, D (corresponding author), Microsoft Res Cambridge, 7 JJ Thomson Ave, Cambridge CB3 0FB, England.
EM dimitris@microsoft.com; sweirich@cis.upenn.edu
OI Weirich, Stephanie/0000-0002-6756-9168
FU NSF [0347289, 0702545, 0716469]; Division Of Computer and Network
   Systems; Direct For Computer & Info Scie & Enginr [0716469] Funding
   Source: National Science Foundation; Division of Computing and
   Communication Foundations; Direct For Computer & Info Scie & Enginr
   [0347289, 0702545] Funding Source: National Science Foundation
FX Thanks to Aaron Bohannon, Jeff Vaughan, Steve Zdancewic, and anonymous
   reviewers for their feedback and suggestions. Janis Voigtlander brought
   Kucan's dissertation to our attention. This work was partially supported
   by NSF grants 0347289, 0702545, and 0716469.
CR Ahmed A, 2006, LECT NOTES COMPUT SC, V3924, P69
   [Anonymous], 1967, Mathematical logic
   [Anonymous], 1989, FPCA 1989, DOI DOI 10.1145/99370.99404
   Appel AW, 2001, ACM T PROGR LANG SYS, V23, P657, DOI 10.1145/504709.504712
   BAARS AI, 2002, ICFP, P157
   Chen C, 2004, LECT NOTES COMPUT SC, V3057, P239
   CHENEY J, 2002, HASKELL 02, P90
   Cheney J., 2003, Technical Report
   Crary K, 2002, J FUNCT PROGRAM, V12, P567, DOI 10.1017/S0956796801004282
   Crary K, 2007, ELECTRON NOTES THEOR, V172, P259, DOI 10.1016/j.entcs.2007.02.010
   Crole Roy., 1994, CATEGORIES TYPES
   DANIELSSON NA, 1933, POPL 06, V41, P206
   Gallier J., 1990, LOGIC COMPUTER SCI, P123
   Girard J.-Y., 1972, PhD thesis
   Harper R., 2005, ACM Transactions on Computational Logic, V6, P61, DOI 10.1145/1042038.1042041
   Harper R, 1999, INFORM PROCESS LETT, V70, P1, DOI 10.1016/S0020-0190(99)00036-8
   HARPER R, 1995, 22 ACM S PRINC PROGR, P130
   Hinze R, 2002, SCI COMPUT PROGRAM, V43, P129, DOI 10.1016/S0167-6423(02)00025-4
   Hongwei Xi, 2003, SIGPLAN Notices, V38, P224, DOI 10.1145/640128.604150
   JOHANN P, 2004, PRINC PROGR LANG P, P99, DOI DOI 10.1145/982962.964010
   Johann P, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P297, DOI 10.1145/1328438.1328475
   JONES SP, 2006, ICFP 06, P50, DOI DOI 10.1145/1159803.1159811
   Kiselyov Oleg, 2004, HASKELL 04, P96, DOI DOI 10.1145/1017472.1017488
   KUCAN J, 1997, THESIS MIT
   MEIJER E, 1995, FUNCTIONAL PROGRAMMI, P324
   MELLIES PA, 1920, LICS 05, P82
   NEIS G, 1914, ICFP 09, P135
   Paulin-Mohring C., 1993, Typed Lambda Calculi and Applications, V664, DOI [10.1007/BFb0037116., DOI 10.1007/BFB0037116]
   Pitts A. M., 2000, Mathematical Structures in Computer Science, V10, P321, DOI 10.1017/S0960129500003066
   PITTS AM, 2005, ADV TOPICS TYPES PRO, P245
   PLOTKIN G, 1993, INT C TYP LAMBD CALC, P361
   Reynolds J. C., 1983, Information Processing 83. Proceedings of the IFIP 9th World Computer Congress, P513
   SHEARD T, 2004, P 4 INT WORKSH LOG F, P106
   SPLAWSKI Z, 1999, 4 ACM INT C FUNCT PR, P102
   Takeuti I., 2001, THEORY PARAMETRICITY
   Voigtländer J, 2009, ICFP'09: PROCEEDINGS OF THE 2009 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P173
   Vytiniotis D, 2007, ELECTRON NOTES THEOR, V173, P357, DOI 10.1016/j.entcs.2007.02.043
   Washburn G, 2005, IEEE S LOG, P62
   Weirich S, 2004, J FUNCT PROGRAM, V14, P681, DOI 10.1017/S0956796804005179
   Weirich S, 2001, LECT NOTES COMPUT SC, V2028, P92
   YANG Z, 1998, 1998 ACM SIGP LAN IN, P289
NR 41
TC 13
Z9 15
U1 0
U2 1
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD MAR
PY 2010
VL 20
BP 175
EP 210
DI 10.1017/S0956796810000079
PN 2
PG 36
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 596BN
UT WOS:000277658400003
OA Bronze
DA 2024-07-18
ER

PT J
AU Might, M
   Shivers, O
AF Might, Matthew
   Shivers, Olin
TI Exploiting reachability and cardinality in higher-order flow analysis
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB We present two complementary improvements for abstract-interpretation-based flow analysis of higher-order languages: (1) abstract garbage collection and (2) abstract counting.(1,2) Abstract garbage collection is an analog to its concrete Counterpart: the analysis determines when an abstract resource has become unreachable, and then, re-allocates it as fresh. This prevents flow sets from joining during abstract interpretation, which has two immediate effects: (1) the precision of the interpretation increases and (2) its running time often [falls. In abstract counting, the analysis tracks how many times an abstract resource has been allocated. A Count of one implies that the abstract resource momentarily represents only one concrete resource. This knowledge, in turn, drives environment analysis, expanding the kind (rather than just the degree) of optimization available to the compiler.
C1 [Might, Matthew] Diagis LLC, Atlanta, GA USA.
   [Shivers, Olin] Northeastern Univ, Boston, MA 02115 USA.
C3 Northeastern University
RP Might, M (corresponding author), Diagis LLC, Atlanta, GA USA.
EM matt@diagis.com; shivers@ccs.neu.edu
FU National Science Foundation [0638060, 0438871]; Directorate For
   Engineering; Div Of Industrial Innovation & Partnersh [0638060] Funding
   Source: National Science Foundation; Division of Computing and
   Communication Foundations; Direct For Computer & Info Scie & Enginr
   [0438871] Funding Source: National Science Foundation
FX This material is based upon work supported by the National Science
   Foundation under Grants No. 0638060 and 0438871.
CR CHASE DR, 1990, P SIGPLAN 90 C PROGR, P296
   Cousot P., 1977, C RECORD 1977 ACM S, P238
   COUSOT P, 1979, P ACM SIGPLAN S PRIN, V6, P269
   HANNAN J, 1995, PART P WORKSH TYP PR, P48
   Hudak Paul., 1986, LFP 86, P351, DOI 10.1145/319838.319876
   Jagannathan Suresh., 1998, POPL, P329
   Might M., 2007, P INT WORK VER MOD C, P59
   Might M., 2006, P 11 ACM SIGPLAN INT, P13, DOI DOI 10.1016/J.TCS.2006.12.031
   MIGHT M, 2006, P 33 ANN ACM S PRINC, P127, DOI DOI 10.1145/1111037.1111049
   Might M, 2007, THEOR COMPUT SCI, V375, P137, DOI 10.1016/j.tcs.2006.12.031
   PALSBERG J, 1995, ACM T PROGR LANG SYS, V17, P47, DOI 10.1145/200994.201001
   SESTOFT P., 1988, THESIS U COPENHAGEN
   SHIVERS O, 1988, P ACM SIGPLAN C PROG, P164, DOI DOI 10.1145/53990.54007
   Shivers O., 1991, CMUCS91145
   Shivers O, 2006, ACM SIGPLAN NOTICES, V41, P295, DOI 10.1145/1133981.1134016
   STEELE, 1978, AITR474 MIT
   WAND M, 1994, P ACM SIGPLAN S PRIN, V21, P435
   Wright AK, 1998, ACM T PROGR LANG SYS, V20, P166, DOI 10.1145/271510.271523
   [No title captured]
NR 19
TC 7
Z9 7
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD SEP-NOV
PY 2008
VL 18
BP 821
EP 864
DI 10.1017/S0956796808006941
PN 5-6
PG 44
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 375KD
UT WOS:000261111700007
OA Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Fluet, M
   Pucella, R
AF Fluet, Matthew
   Pucella, Riccardo
TI Phantom types and subtyping
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID EXTENSION
AB We investigate a technique from the literature, called the phantom-types technique, that uses parametric polymorphism, type constraints, and unification of polymorphic types to model a subtyping hierarchy. Hindley-Milner type systems, such as the one found in Standard ML, can be used to enforce the subtyping relation, at least for first-order values. We show that this technique can be used to encode any finite subtyping hierarchy (including hierarchies arising from multiple interface inheritance). We formally demonstrate the suitability of the phantom-types technique for capturing first-order subtyping by exhibiting a type-preserving translation from a simple calculus with bounded polymorphism to a calculus embodying the type system of SML.
C1 Cornell Univ, Ithaca, NY 14853 USA.
   Northeastern Univ, Boston, MA 02115 USA.
C3 Cornell University; Northeastern University
RP Fluet, M (corresponding author), Cornell Univ, Ithaca, NY 14853 USA.
EM fluet@cs.cornell.edu; riccardo@ccs.neu.edu
CR [Anonymous], P ICFP ICFP 99
   [Anonymous], 1997, The Definition of Standard ML
   BLUME M, 2001, ELECT NOTES THEORETI, V59
   BURTON FW, 1990, ACM T PROGR LANG SYS, V12, P135, DOI 10.1145/77606.214515
   CARDELLI L, 1994, INFORM COMPUT, V109, P4, DOI 10.1006/inco.1994.1013
   Damas L., 1982, C REC 9 ANN ACM S PR, P207, DOI DOI 10.1145/582153.582176
   ELLIOTT C, 2000, WORKSH SEM APPL IMPL
   FLUET M, 2005, P ACM SIGPLAN WORKSH, P203
   Leijen D, 1999, USENIX ASSOCIATION PROCEEDINGS OF THE 2ND CONFERENCE ON DOMAIN-SPECIFIC LANGUAGES (DSL'99), P109, DOI 10.1145/331963.331977
   MILNER R, 1978, J COMPUT SYST SCI, V17, P348, DOI 10.1016/0022-0000(78)90014-4
   PESSAUX F, 1999, 26 ANN ACM S PRINC P, P276
   REMY D, 1989, 16TH P ACM S PRINC P, P77
   Reppy John H., 1996, SAFE INTERFACE SOCKE
   WAND M, 1987, P 2 ANN IEEE S LOG C
NR 14
TC 13
Z9 14
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD NOV
PY 2006
VL 16
BP 751
EP 791
DI 10.1017/S0956796806006046
PN 6
PG 41
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 112KT
UT WOS:000242525400005
OA Bronze
DA 2024-07-18
ER

PT J
AU Benton, N
AF Benton, N
TI Embedded interpreters
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID CALCULUS
AB This is a tutorial on using type-indexed embedding/projection pairs when writing interpreters in statically-typed functional languages. The method allows (higher-order) values in the interpreting language to be embedded in the interpreted language and values from the interpreted language may be projected back into the interpreting one. This is particularly useful when adding command-line interfaces or scripting languages to applications written in functional languages. We first describe the basic idea and show how it may be extended to languages with recursive types and applied to elementary meta-programming. We then show how the method combines with Filinski's continuation-based monadic reflection operations to define an 'extensional' version of the call-by-value monadic translation and hence to allow values to be mapped bidirectionally between the levels of an interpreter for a functional language parameterized by an arbitrary monad. Finally, we show how SML functions may be embedded into, and projected from, an interpreter for an asynchronous pi-calculus via an 'extensional' variant of a standard translation from lambda into pi.
C1 Microsoft Res, Cambridge CB3 0FB, England.
C3 Microsoft
RP Microsoft Res, 7 JJ Thomson Ave, Cambridge CB3 0FB, England.
EM nick@microsoft.com
CR ABADI M, 1991, ACM T PROGR LANG SYS, V13, P237, DOI 10.1145/103135.103138
   [Anonymous], 1999, Communicating and Mobile Systems: The Calculus
   [Anonymous], 1985, Structure and Interpretation of Computer Programs
   [Anonymous], 1996, Structure and interpretation of computer programs
   [Anonymous], 1992, MATH STRUCT COMP SCI, V2, P119, DOI DOI 10.1017/S0960129500001407
   BENTLEY J, 1986, COMMUN ACM, V29, P711, DOI 10.1145/6424.315691
   BENTON N, 2002, LECT NOTES COMPUTER, V2395
   BENTON N, 1998, P 3 ACM SIGPLAN C FU
   BENTON PN, 1996, P 11 IEEE S LOG COMP
   BOUDOL G, 1997, 24 ACM S PRINC PROGR, P228
   Boudol Gerard., 1992, Tech. Rep. 1702
   CLINICK A, 2000, INTRO JSCRIPT NET MS
   COUSOT P, 1977, C REC 4 ACM S PRINC
   Danvy O, 1998, LECT NOTES COMPUT SC, V1443, P908, DOI 10.1007/BFb0055112
   DANVY O, 1996, P 23 ACM SIGPLAN SIG
   DANVY O, 1998, J FUNCTIONAL PROGRAM, V8, P621, DOI DOI 10.1017/S0956796898003104
   FERNANDEZ M, 2001, LECT NOTES COMPUTER, V1973
   Filinski A., 1999, P 26 ACM SIGPLAN SIG, P175
   FILINSKI A, 2001, P 3 ACM SIGPLAN WORK
   FILINSKI A, 1996, CMUCS96119 CARN MELL
   FINDLER R, 2002, P INT C FUNCT PROGR
   HARPER R, 1995, C REC 22 ACM S PRINC
   HATCLIFF J, 1998, LECT NOTES COMPUTER, V1706
   HENGLEIN F, 1992, P 4 EUR S PROGR ESOP, V582
   HONDA K, 1991, LECT NOTES COMPUT SC, V512, P133
   Hudak P, 1998, FIFTH INTERNATIONAL CONFERENCE ON SOFTWARE REUSE - PROCEEDINGS, P134, DOI 10.1109/ICSR.1998.685738
   HUGUNIN J, 1997, P 6 INT PYTH C
   Jeuring J., 1996, LECT NOTES COMPUTER, V1129, P68
   Kennedy AJ, 2004, J FUNCT PROGRAM, V14, P727, DOI 10.1017/S0956796804005209
   Leroy X., 1992, Conference Record of the Nineteenth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P177, DOI 10.1145/143165.143205
   LIANG S, 1995, P 22 ACM SIGPLAN SIG
   LIANG S, 1996, P EUR S PROGR ESOP
   MCCRACKEN NJ, 1979, THESIS SYRACUSE U
   MILNER R, 1992, INFORM COMPUT, V100, P1, DOI [10.1016/0890-5401(92)90008-4, 10.1016/0890-5401(92)90009-5]
   MOGGI E, 1991, INFORM COMPUT, V93, P55, DOI 10.1016/0890-5401(91)90052-4
   *MOZ ORG, 1998, RHIN JAV JAV
   Ohori A., 1993, Conference Record of the Twentieth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P99, DOI 10.1145/158511.158529
   Ousterhout J. K., 1990, Proceedings of the Winter 1990 USENIX Conference, P133
   Ousterhout JK, 1998, COMPUTER, V31, P23, DOI 10.1109/2.660187
   Paulson L.C., 1991, ML WORKING PROGRAMME
   Pierce BC, 2000, FOUNDAT COMPUT, P455
   RAMSEY N, 2004, ML MODULE MANIA TYPE
   RAMSEY N, 2003, ACM SIGPLAN 2003 WOR
   Reynolds J. C., 1998, Higher-Order and Symbolic Computation, V11, P363, DOI 10.1023/A:1010027404223
   Reynolds John C., 1972, ACM 72, V2, P717, DOI DOI 10.1023/A:1010027404223
   Reynolds John C., 2000, RS0032 BRICS
   RHIGER M, 2003, ACM T PROGRAM LANG S, V25
   ROSE K, 1998, PREL P 1998 APPSEM W
   SANGIORGI D, 1992, P 7 ANN IEEE S LOG C
   Sangiorgi Davide, 2001, -calculus: A Theory of Mobile Processes
   Scott D., 1976, SIAM Journal on Computing, V5, P522, DOI 10.1137/0205037
   Sheard T, 2004, J FUNCT PROGRAM, V14, P547, DOI 10.1017/S095679680300488X
   SHIVERS O, 1996, LECT NOTES COMPUTER, V1179, P254
   SLIND K, 1991, P 2 ML WORKSH
   STEELE GL, 1994, C REC 21 ACM S PRINC
   Taha W, 2000, THEOR COMPUT SCI, V248, P211, DOI 10.1016/S0304-3975(00)00053-0
   TRIFONOV V, 2000, P 5 ACM SIGPLAN INT
   van Deursen A, 2000, ACM SIGPLAN NOTICES, V35, P26, DOI 10.1145/352029.352035
   VANROSSUM G, 2003, EXTENDING EMBEDDING
   WADLER P, 1992, P 19 ACM SIGPLAN SIG
   Wand M., 1980, P 1980 ACM C LISP FU
   Weirich S, 2001, LECT NOTES COMPUT SC, V2028, P92
   *WORLD WID WEB CON, 2002, WEB SERV ACT
   YANG Z, 1998, P 3 ACM SIGP INT C F
NR 64
TC 23
Z9 26
U1 0
U2 1
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD JUL
PY 2005
VL 15
BP 503
EP 542
DI 10.1017/S0956796804005398
PN 4
PG 40
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 955CJ
UT WOS:000231202300001
OA Bronze
DA 2024-07-18
ER

PT J
AU Sheard, T
   Pasalic, E
AF Sheard, T
   Pasalic, E
TI Two-level types and parameterized modules
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB In this paper, we describe two techniques for the efficient, modularized implementation of a large class of algorithms. We illustrate these techniques using several examples, including efficient generic unification algorithms that use reference cells to encode substitutions, and highly modular language implementations. We chose these examples to illustrate the following important techniques that we believe many functional programmers would find useful. First, defining recursive data types by splitting them into two levels: a structure defining level, and a recursive knot-tying level. Second, the use of rank-2 polymorphism inside Haskell's record types to implement a kind of type-parameterized modules. Finally, we explore techniques that allow us to combine already existing recursive Haskell data-types with the highly modular style of programming proposed here.
C1 Oregon Hlth & Sci Univ, OGI, Sch Sci & Engn, Beaverton, OR 97006 USA.
C3 Oregon Health & Science University
RP Sheard, T (corresponding author), Oregon Hlth & Sci Univ, OGI, Sch Sci & Engn, 20000 NW Walker Rd, Beaverton, OR 97006 USA.
EM sheard@cse.ogi.edu; pasalic@cse.ogi.edu
CR [Anonymous], POPL 96
   [Anonymous], P PROGR LANG DES IMP
   CARDELLI L, 1987, SCI COMPUT PROGRAM, V8, P147, DOI 10.1016/0167-6423(87)90019-0
   Harper R., 1994, PRINCIPLES PROGRAMMI, P123, DOI [DOI 10.1145/174675.176927, 10.1145/174675.176927]
   HARPER R, 2000, ACM SIGPLAN NOTICES, V35, P130
   HINZE R, 1999, P 3 HASK WORKSH PAR
   Hinze Ralf., 2000, Proceedings of the 27th ACM SIGPLAN-SIGACT symposium on Principles of programming languages, POPL '00, P119, DOI [DOI 10.1145/325694.325709, 10.1145/325694.325709]
   Jansson P., 1998, Journal of Functional Programming, V8, P527, DOI 10.1017/S095679689800313X
   Jansson P., 1997, POPL 1997, P470
   Jeuring J., 1996, LECT NOTES COMPUTER, V1129, P68
   JONES MP, 2000, LECT NOTES COMPUTER, V1782
   JONES MP, 1996, 23 ANN ACM S PRINC P, P68
   JONES MP, 1999, P 1999 HASK WORKSH P, P68
   LAMMEL R, 2003, P ACM SIGPLAN WORKSH
   LAMMEL R, 2000, DRAFT P SFP 00 ST AN
   LAMMEL R, 2002, J LOGIC ALGEBRAIC PR, V54
   Leijen D., 2001, UUCS200135
   LIANG S, 1996, LECT NOTES COMPUTER, V1058, P219
   Liang Sheng, 1995, P 22 ACM SIGPLAN SIG, P333, DOI DOI 10.1145/199448.199528
   Sheard T, 2002, ACM SIGPLAN NOTICES, V37, P60, DOI 10.1145/636517.636528
   Sheard T, 2001, ACM SIGPLAN NOTICES, V36, P86, DOI 10.1145/507669.507648
   Sheard T, 1999, USENIX ASSOCIATION PROCEEDINGS OF THE 2ND CONFERENCE ON DOMAIN-SPECIFIC LANGUAGES (DSL'99), P81
   STEELE G, 1994, P ACM S PRINC PROGR, P472
   Taha W., 1997, Proceedings of the ACM SIGPLAN Symposium on Partial Evaluation and Semantics-Based Program Manipulation, PEPM '97, P203, DOI 10.1145/258994.259019
   WINSTANLEY N, 1997, GLASG WORKSH FUNCT P
NR 25
TC 17
Z9 17
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD SEP
PY 2004
VL 14
BP 547
EP 587
DI 10.1017/S095679680300488X
PN 5
PG 41
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 857JC
UT WOS:000224111500005
OA Bronze
DA 2024-07-18
ER

PT J
AU Calcagno, C
   Moggi, E
   Sheard, T
AF Calcagno, C
   Moggi, E
   Sheard, T
TI Closed types for a safe imperative MetaML
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article; Proceedings Paper
CT International Workshop on Semantics, Applications, and Implementation of
   Program Generation
CY SEP   20, 2000
CL MONTREAL, CANADA
SP ACM, SIGPLAN
ID MULTISTAGE
AB This paper addresses the issue of safely combining computational effects and multi-stage programming. We propose a type system which exploits a notion of closed type, to check statically that an imperative multi-stage program does not cause run-time errors. Our approach is demonstrated formally for a core language called MiniML(ref)(meta). This core language safely combines multi-stage constructs and ML-style references, and is a conservative extension of MiniML(ref), a simple imperative subset of SML. In previous work, we introduced a closed type constructor, which was enough to ensure the safe execution of dynamically generated code in the pure fragment of MiniML(ref)(meta).
C1 Univ Genoa, DISI, Genoa, Italy.
   Oregon Grad Inst, Portland, OR USA.
C3 University of Genoa
RP Calcagno, C (corresponding author), Univ Genoa, DISI, Genoa, Italy.
OI MOGGI, EUGENIO/0000-0001-8018-6543
CR [Anonymous], 1997, The Definition of Standard ML
   BENAISSA ZE, 1999, FED LOG C SAT WORKSH
   Calcagno C, 2000, LECT NOTES COMPUT SC, V1924, P92
   Calcagno C, 2000, LECT NOTES COMPUT SC, V1853, P25
   Clement Dominique., 1986, LFP 86, P13
   DAVIES R, 1996, S LOG COMP SCI LICS, P184
   DAVIES R, 1996, S PRINC PROGR LANG P, P258
   GLUCK R, 1996, LECT NOTES COMPUTER, V1181, P261
   Gomard C. K., 1991, Journal of Functional Programming, V1, P21, DOI 10.1017/S0956796800000058
   HARPER R, 1997, CMUCS97147
   Hatcliff J., 1997, Mathematical Structures in Computer Science, V7, P507, DOI 10.1017/S0960129597002405
   JONES ND, 1993, PARTIAL EVALUATION A
   Kamin S, 2000, LECT NOTES COMPUT SC, V1924, P28
   *MHP, 2000, METAML HOM PAG PROV
   MILNER R, 1978, J COMPUT SYST SCI, V17, P348, DOI 10.1016/0022-0000(78)90014-4
   Moggi E, 1999, LECT NOTES COMPUT SC, V1576, P193
   MOGGI E, 1998, LECT NOTES COMPUTER, V1378
   Smith B.C., 1982, Ph.D. thesis
   Taha W., 1997, Proceedings of the ACM SIGPLAN Symposium on Partial Evaluation and Semantics-Based Program Manipulation, PEPM '97, P203, DOI 10.1145/258994.259019
   Taha W, 1998, LECT NOTES COMPUT SC, V1443, P918, DOI 10.1007/BFb0055113
   TAHA W, 1999, THESIS OR GRAD I SCI
   TAHA W, 2000, THEOR COMPUT SCI, V248
   TAHA W, 2000, P WORKSH PART EV SEM
   TAHA W, 2000, LECT NOTES COMPUTER, V1924
   Thiemann Peter, 1999, PARTIAL EVALUATION H
   Tucker Allen B., 1997, The Computer Science and Engineering Handbook
   WICKLINE P, 1998, P ACM SIGPLAN 98 C P, P224
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
   XI H, 1999, LECT NOTES COMPUTER, V1551
NR 29
TC 15
Z9 15
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 40 WEST 20TH ST, NEW YORK, NY 10011-4221 USA
SN 0956-7968
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD MAY
PY 2003
VL 13
BP 545
EP 571
DI 10.1017/S0956796802004598
PN 3
PG 27
WC Computer Science, Software Engineering
WE Conference Proceedings Citation Index - Science (CPCI-S); Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 689BA
UT WOS:000183470700005
OA Bronze
DA 2024-07-18
ER

PT J
AU Kammar, O
   Pretnar, M
AF Kammar, Ohad
   Pretnar, Matija
TI No value restriction is needed for algebraic effects and handlers
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID POLYMORPHISM; COMPUTATION; NOTIONS; SYSTEM
AB We present a straightforward, sound, Hindley-Milner polymorphic type system for algebraic effects and handlers in a call-by-value calculus, which, to our surprise, allows type variable generalisation of arbitrary computations, and not just values. We first recall that the soundness of unrestricted call-by-value Hindley-Milner polymorphism is known to fail in the presence of computational effects such as reference cells and continuations, and that many programming examples can be recast to use effect handlers instead of these effects. After presenting the calculus and its soundness proof, formalised in Twelf, we analyse the expressive power of effect handlers with respect to state effects. We conjecture handlers alone cannot express reference cells, but show they can simulate dynamically scoped state, establishing that dynamic binding also does not need a value restriction.
C1 [Kammar, Ohad] Univ Cambridge, Comp Lab, Cambridge CB2 1TN, England.
   [Kammar, Ohad] Univ Oxford, Dept Comp Sci, Oxford OX1 2JD, England.
   [Pretnar, Matija] Univ Ljubljana, Fac Math & Phys, Ljubljana 61000, Slovenia.
C3 University of Cambridge; University of Oxford; University of Ljubljana
RP Kammar, O (corresponding author), Univ Cambridge, Comp Lab, Cambridge CB2 1TN, England.; Kammar, O (corresponding author), Univ Oxford, Dept Comp Sci, Oxford OX1 2JD, England.
EM ohad.kammar@cl.cam.ac.uk; matija.pretnar@fmf.uni-lj.si
OI Pretnar, Matija/0000-0001-7755-2303
FU European Research Council [EP/N007387/1]; Air Force Office of Scientific
   Research, Air Force Materiel Command, USAF [FA9550-14-1-0096]; EPSRC
   [EP/N007387/1] Funding Source: UKRI
FX Supported by the European Research Council grant 'events causality and
   symmetry - the next-generation semantics', and the Engineering and
   Physical Sciences Research Council grant EP/N007387/1 'quantum computing
   as a programming language'. The material is based upon work supported by
   the Air Force Office of Scientific Research, Air Force Materiel Command,
   USAF under Award No. FA9550-14-1-0096.
CR Ahman D., 2015, 21 M TYP PROOFS PROG, P10
   Ahman D, 2013, ELECTRON NOTES THEOR, V298, P51, DOI 10.1016/j.entcs.2013.09.007
   Ahman D, 2016, LECT NOTES COMPUT SC, V9634, P36, DOI 10.1007/978-3-662-49630-5_3
   [Anonymous], 1972, Ph. D. Dissertation
   [Anonymous], 1979, LECT NOTES COMPUTER
   [Anonymous], 1992, 19th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, DOI DOI 10.1145/143165.143169
   APPEL AW, 1991, LECT NOTES COMPUT SC, V528, P1
   Asai K, 2007, LECT NOTES COMPUT SC, V4807, P239
   Bauer A, 2014, LOG METH COMPUT SCI, V10, DOI 10.2168/LMCS-10(4:9)2014
   Bauer A, 2015, J LOG ALGEBR METHODS, V84, P108, DOI 10.1016/j.jlamp.2014.02.001
   Benton Nick., 1998, P 3 ACM SIGPLAN INT, P129, DOI [10.1145/289423.289435, DOI 10.1145/289423.289435]
   Brady E, 2015, LECT NOTES COMPUT SC, V8843, P18, DOI 10.1007/978-3-319-14675-1_2
   Brady E, 2013, ACM SIGPLAN NOTICES, V48, P133, DOI [10.1145/2500365.2500581, 10.1145/2544174.2500581]
   Cardelli L., 1991, IFIP STATE OF THE AR, P431
   Cardelli Luca., 1991, Mathematical structures in computer science, V1, P3, DOI DOI 10.1017/S0960129500000049
   Cartwright R., 1994, Theoretical Aspects of Computer Software. International Symposium TACS '94 Proceedings, P244
   Chung-chieh Shan, 2007, Higher-Order and Symbolic Computation, V20, P371, DOI 10.1007/s10990-007-9010-4
   Cooper E, 2007, LECT NOTES COMPUT SC, V4709, P266
   DANVY O, 1990, PROCEEDINGS OF THE 1990 ACM CONFERENCE ON LISP AND FUNCTIONAL PROGRAMMING, P151, DOI 10.1145/91556.91622
   DANVY O, 1989, 8912 DIKU
   Danvy  Olivier, 2006, THESIS
   Felleisen M., 1988, Conference Record of the Fifteenth Annual ACM Symposium on Principles of Programming Languages, P180, DOI 10.1145/73560.73576
   FELLEISEN M, 1991, SCI COMPUT PROGRAM, V17, P35, DOI 10.1016/0167-6423(91)90036-W
   Felleisen Matthias, 1988, LISP FUNCTIONAL PROG, P52
   Filinski Andrzej, 1994, P 21 ANN ACM S PRINC, P446, DOI DOI 10.1145/174675.178047
   Fiore M. P., 2014, CSL LICS
   Forster Y., 2016, ARXIV161009161CSLO
   Garrigue J, 2004, LECT NOTES COMPUT SC, V2998, P196
   Garrigue J, 2015, MATH STRUCT COMP SCI, V25, P867, DOI 10.1017/S0960129513000066
   Garrigue J, 2010, LECT NOTES COMPUT SC, V6461, P360, DOI 10.1007/978-3-642-17164-2_25
   Garrigue Jacques, 2001, APLAS, P329
   Gifford DK, 1986, P 1986 ACM C LISP FU, P28, DOI DOI 10.1145/319838.319848
   Gordon A. D., 2017, P 44 ANN ACM SIGPLAN
   Gunter C. A., 1995, Conference Record of FPCA '95. SIGPLAN-SIGARCH-WG2.8. Conference on Functional Programming Languages and Computer Architecture, P12, DOI 10.1145/224164.224173
   Hancock P., 2000, Computer Science Logic. 14th International Workshop, CSL 2000. Annual Conference of the EACSL. Proceedings (Lecture Notes in Computer Science Vol.1862), P317
   Harper R., 1993, Conference Record of the Twentieth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P206, DOI 10.1145/158511.158630
   Harper R., 1993, LISP and Symbolic Computation, V6, P361, DOI 10.1007/BF01019463
   HARPER R, 1993, ACM T PROGR LANG SYS, V15, P211, DOI 10.1145/169701.169696
   Harper Robert, 1991, C RECORD 18 ANN ACM, P131, DOI [10.1145/99583.99603, DOI 10.1145/99583.99603]
   Hillerstrom Daniel, 2016, TYDE ICFP, P15, DOI DOI 10.1145/2976022.2976033
   Hyland M, 2006, THEOR COMPUT SCI, V357, P70, DOI 10.1016/j.tcs.2006.03.013
   Jaber G, 2016, PROCEEDINGS OF THE 31ST ANNUAL ACM-IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE (LICS 2016), P585, DOI 10.1145/2933575.2934509
   Kameyama Y, 2008, LECT NOTES COMPUT SC, V4989, P239
   Kammar O., 2014, THESIS
   Kammar O, 2013, ACM SIGPLAN NOTICES, V48, P145, DOI [10.1145/2500365.2500590, 10.1145/2544174.2500590]
   Kammar O, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P349
   Katsumata S, 2014, ACM SIGPLAN NOTICES, V49, P633, DOI 10.1145/2535838.2535846
   Katsumata S, 2013, INFORM COMPUT, V222, P228, DOI 10.1016/j.ic.2012.10.014
   Kiselyov O., 2015, TECHNICAL REPORT
   Kiselyov O, 2007, LECT NOTES COMPUT SC, V4583, P223
   Kiselyov O, 2006, ACM SIGPLAN NOTICES, V41, P26, DOI 10.1145/1160074.1159808
   Kiselyov O, 2015, ACM SIGPLAN NOTICES, V50, P94, DOI 10.1145/2804302.2804319
   Kiselyov O, 2013, ACM SIGPLAN NOTICES, V48, P59, DOI 10.1145/2503778.2503791
   LANDIN PJ, 1964, COMPUT J, V6, P308, DOI 10.1093/comjnl/6.4.308
   Leijen D, 2014, ELECTRON PROC THEOR, P100, DOI 10.4204/EPTCS.153.8
   Leijen D, 2017, ACM SIGPLAN NOTICES, V52, P486, DOI 10.1145/3093333.3009872
   Lepigre R, 2016, LECT NOTES COMPUT SC, V9632, P476, DOI 10.1007/978-3-662-49498-1_19
   Leroy X., 1993, Conference Record of the Twentieth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P220, DOI 10.1145/158511.158632
   Leroy X., 1992, THESIS, P7
   Leroy Xavier., 1991, PROC 18 ACM SIGPLAN, P291
   Levy Paul Blain, 2004, SER SEMANTICS STRUCT, V2
   Levy PB, 2003, INFORM COMPUT, V185, P182, DOI 10.1016/S0890-5401(03)00088-9
   Lillibridge M., 1999, Higher-Order and Symbolic Computation, V12, P75, DOI 10.1023/A:1010020917337
   Lindley S, 2017, ACM SIGPLAN NOTICES, V52, P500, DOI 10.1145/3093333.3009897
   Lindley Sam, 2012, TLDI, P91, DOI DOI 10.1145/2103786.2103798
   Lippmeier B, 2009, LECT NOTES COMPUT SC, V5904, P95, DOI 10.1007/978-3-642-10672-9_9
   Lucassen J. M., 1988, Conference Record of the Fifteenth Annual ACM Symposium on Principles of Programming Languages, P47, DOI 10.1145/73560.73564
   Marino D., 2009, P 2009 ACM SIGPLAN I, P39, DOI DOI 10.1145/1481861.1481868
   Mellies Paul-Andre, 2014, Rewriting and Typed Lambda Calculi. Joint International Conference, RTA-TLCA 2014, Held as Part of the Vienna Summer of Logic, VSL 2014. Proceedings: LNCS 8560, P334, DOI 10.1007/978-3-319-08918-8_23
   Melliès PA, 2010, IEEE S LOG, P150, DOI 10.1109/LICS.2010.46
   MILNER R, 1978, J COMPUT SYST SCI, V17, P348, DOI 10.1016/0022-0000(78)90014-4
   MOGGI E, 1991, INFORM COMPUT, V93, P55, DOI 10.1016/0890-5401(91)90052-4
   Moreau L., 1998, Higher-Order and Symbolic Computation, V11, P233, DOI 10.1023/A:1010087314987
   Munch-Maccagnoni G, 2009, LECT NOTES COMPUT SC, V5771, P409, DOI 10.1007/978-3-642-04027-6_30
   Nielson F, 1999, LECT NOTES COMPUT SC, V1710, P114
   Ohori A, 1995, ACM T PROGR LANG SYS, V17, P844, DOI 10.1145/218570.218572
   Ohori A., 1992, Conference Record of the Nineteenth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P154, DOI 10.1145/143165.143200
   Ohori Atsushi., 1989, Proceedings of the fourth international conference on Functional programming languages and computer architecture, FPCA '89, P281, DOI DOI 10.1145/99370.99393
   Pfenning F., 1999, Automated Deduction - CADE-16. 16th International Conference on Automated Deduction. Proceedings (Lecture Notes in Artificial Intelligence Vol.1632), P202
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Pitts A. M., 2011, LECT NOTES
   Plotkin G, 2003, APPL CATEGOR STRUCT, V11, P69, DOI 10.1023/A:1023064908962
   Plotkin G, 2002, LECT NOTES COMPUT SC, V2303, P342
   Plotkin G. D., 1977, Theoretical Computer Science, V5, P223, DOI 10.1016/0304-3975(77)90044-5
   Plotkin G, 2008, IEEE S LOG, P118, DOI 10.1109/LICS.2008.45
   Plotkin GD, 2013, LOG METH COMPUT SCI, V9, DOI 10.2168/LMCS-9(4:23)2013
   Pretnar M., 2014, LOG METHODS COMPUT S, V10
   Pretnar M, 2015, ELECTRON NOTES THEOR, V319, P19, DOI 10.1016/j.entcs.2015.12.003
   Pretnar Matija, 2010, THESIS
   REMY D, 1991, 1431 I NAT RECH INF
   Remy D., 2015, LECT NOTES
   Remy D., 1990, THESIS, V7
   REYNOLDS JC, 1984, LECT NOTES COMPUT SC, V173, P145
   Rompf T, 2009, ICFP'09: PROCEEDINGS OF THE 2009 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P317
   Saleh A. H, 2016, ABS1608 CORR
   SCOTT DS, 1993, THEOR COMPUT SCI, V121, P411, DOI 10.1016/0304-3975(93)90095-B
   Sethi R, 1992, P 19 ACM SIGPLAN SIG
   Staton S, 2015, ACM SIGPLAN NOTICES, V50, P395, DOI [10.1145/2676726.2676999, 10.1145/2775051.2676999]
   Staton S, 2013, IEEE S LOG, P519, DOI 10.1109/LICS.2013.58
   Staton S, 2013, LECT NOTES COMPUT SC, V7794, P401, DOI 10.1007/978-3-642-37075-5_26
   Staton S, 2009, ELECTRON NOTES THEOR, V249, P471, DOI 10.1016/j.entcs.2009.07.103
   Staton S, 2010, LECT NOTES COMPUT SC, V6014, P48, DOI 10.1007/978-3-642-12032-9_5
   Swierstra W, 2008, J FUNCT PROGRAM, V18, P423, DOI 10.1017/S0956796808006758
   TOFTE M, 1990, INFORM COMPUT, V89, P1, DOI 10.1016/0890-5401(90)90018-D
   Tolmach A., 1998, Types im Compilation. Second International Workshop, TIC '98 Proceedings, P97, DOI 10.1007/BFb0055514
   Wadler P., 2003, ACM Transactions on Computational Logic, V4, P1, DOI 10.1145/601775.601776
   Wand M., 1987, Proceedings of the Symposium on Logic in Computer Science (Cat. No.87CH2464-6), P37
   Wells JB, 1999, ANN PURE APPL LOGIC, V98, P111, DOI 10.1016/S0168-0072(98)00047-5
   Wright A. K., 1995, LISP and Symbolic Computation, V8, P343, DOI 10.1007/BF01018828
   Wu N, 2014, ACM SIGPLAN NOTICES, V49, P1, DOI 10.1145/2633357.2633358
   Wu N, 2015, LECT NOTES COMPUT SC, V9129, P302, DOI 10.1007/978-3-319-19797-5_15
   Zeilberger Noam, 2009, PROGRAMMING LANGUAGE, P15, DOI [10.1145/1481848.1481852, DOI 10.1145/1481848.1481852]
NR 112
TC 17
Z9 17
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PY 2017
VL 27
AR E7
DI 10.1017/S0956796816000320
PG 34
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA EL2HV
UT WOS:000394441600001
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Padovani, L
AF Padovani, Luca
TI A simple library implementation of binary sessions
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB Inspired by the continuation-passing encoding of binary sessions, we describe a simple approach to embed a hybrid form of session type checking into any programming language that supports parametric polymorphism. The approach combines static protocol analysis with dynamic linearity checks. To demonstrate the effectiveness of the technique, we implement a well-integrated OCaml module for session communications. For free, OCaml provides us with equirecursive session types, parametric behavioural polymorphism, complete session type inference, and session subtyping.
C1 [Padovani, Luca] Univ Turin, Dipartimento Informat, Turin, Italy.
C3 University of Turin
RP Padovani, L (corresponding author), Univ Turin, Dipartimento Informat, Turin, Italy.
EM luca.padovani@di.unito.it
OI Padovani, Luca/0000-0001-9097-1297
FU ICT COST Action BETTY [IC1201]; MIUR Project CINA
FX Supported by ICT COST Action IC1201 BETTY and MIUR Project CINA.
CR Ancona D, 2016, FOUND TRENDS PROGRAM, V3, pI, DOI 10.1561/2500000031
   Bartoletti M, 2015, LECT NOTES COMPUT SC, V9039, P161, DOI 10.1007/978-3-319-19195-9_11
   Bocchi L, 2013, LECT NOTES COMPUT SC, V7892, P50
   Bono V, 2012, LOG METH COMPUT SCI, V8, DOI 10.2168/LMCS-8(1:17)2012
   Caires L, 2016, LECT NOTES COMPUT SC, V9688, P74, DOI 10.1007/978-3-319-39570-8_6
   Chen T.-C., 2012, LNCS, V7173, P25, DOI DOI 10.1007/978-3-642-30065-3_2
   COURCELLE B, 1983, THEOR COMPUT SCI, V25, P95, DOI 10.1016/0304-3975(83)90059-2
   Dardha Ornela, 2012, PROC PPDP 2012, P139, DOI DOI 10.1145/2370776.2370794
   Demangeon R, 2015, FORM METHOD SYST DES, V46, P197, DOI 10.1007/s10703-014-0218-8
   Demangeon R, 2011, LECT NOTES COMPUT SC, V6901, P280, DOI 10.1007/978-3-642-23217-6_19
   Garrigue J., 1998, INF P ACM SIGPLAN WO
   Gay S, 2005, ACTA INFORM, V42, P191, DOI 10.1007/s00236-005-0177-z
   Gay SJ, 2010, J FUNCT PROGRAM, V20, P19, DOI 10.1017/S0956796809990268
   Honda K, 1998, LECT NOTES COMPUT SC, V1381, P122, DOI 10.1007/BFb0053567
   Honda K, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P273, DOI 10.1145/2827695
   Honda Kohei., 1993, CONCUR'93, 4th International Conference on Concurrency Theory, Hildesheim, Germany, August 23-26, 1993, V715, P509, DOI DOI 10.1007/3-540-57208-2_
   Hu R, 2016, LECT NOTES COMPUT SC, V9633, P401, DOI 10.1007/978-3-662-49665-7_24
   Hunt G. C., 2005, MSRTR2005135
   Imai K., 2010, EPTCS, V69, P74
   Jane Street Developers, 2016, COR LIB DOC
   Kobayashi N, 2003, LECT NOTES COMPUT SC, V2757, P439
   Kobayashi N, 1999, ACM T PROGR LANG SYS, V21, P914, DOI 10.1145/330249.330251
   Leroy X., 2014, OBJECTIVE CAML SYSTE
   Neubauer M, 2004, LECT NOTES COMPUT SC, V3057, P56
   Padovani L., 2015, TECHNICAL REPORT
   Padovani L., 2014, P CSL LICS 2014
   Padovani L., 2016, TECHNICAL REPORT
   Pierce B., 1996, Mathematical Structures in Computer Science, V6, P409
   Pucella R, 2008, HASKELL'08: PROCEEDINGS OF THE ACM SIGPLAN 2008 HASKELL SYMPOSIUM, P25
   Reppy JohnH., 1999, CONCURRENT PROGRAMMI
   Sackman Matthew, 2008, TECHNICAL REPORT
   Scalas A., 2016, P ECOOP 16 LIPICS GE, V56, P21
   Thiemann P, 2016, ACM SIGPLAN NOTICES, V51, P462, DOI 10.1145/3022670.2951926
   Tov JA, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P447, DOI 10.1145/1926385.1926436
   Tov JA, 2010, LECT NOTES COMPUT SC, V6012, P550, DOI 10.1007/978-3-642-11957-6_29
   Tov Jesse A., 2012, THESIS
   Wadler P, 2014, J FUNCT PROGRAM, V24, P384, DOI 10.1017/S095679681400001X
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
NR 38
TC 38
Z9 39
U1 0
U2 3
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PY 2017
VL 27
BP 1
EP 42
DI 10.1017/S0956796816000289
PG 42
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA EH2AW
UT WOS:000391570600001
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Fridlender, D
   Pagano, M
AF Fridlender, Daniel
   Pagano, Miguel
TI Pure type systems with explicit substitutions
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID LOF TYPE THEORY; LAMBDA-CALCULI; NORMALIZATION; CONFLUENCE; CONVERSION;
   EQUALITY
AB We introduce a new formulation of pure type systems (PTSs) with explicit substitution and de Bruijn indices and formally prove some of its meta-theory. Using techniques based on Normalisation by Evaluation, we prove that untyped conversion can be typed for predicative PTSs. Although this equivalence was settled by Siles and Herbelin for the conventional presentation of PTSs, we strongly conjecture that our proof method can also be applied to PTSs with eta.
C1 [Fridlender, Daniel; Pagano, Miguel] Univ Nacl Cordoba, FaMAF, RA-5000 Cordoba, Argentina.
C3 National University of Cordoba
RP Fridlender, D (corresponding author), Univ Nacl Cordoba, FaMAF, RA-5000 Cordoba, Argentina.
EM fridlend@famaf.unc.edu.ar; pagano@famaf.unc.edu.ar
CR ABADI M, 1990, P 17 ANN ACM S PRINC, P31
   Abel A, 2008, LECT NOTES COMPUT SC, V5133, P29
   Abel A, 2007, IEEE S LOG, P3, DOI 10.1109/LICS.2007.33
   Abel A, 2011, LOG METH COMPUT SCI, V7, DOI 10.2168/LMCS-7(2:4)2011
   Abel A, 2010, LECT NOTES COMPUT SC, V6009, P224, DOI 10.1007/978-3-642-12251-4_17
   Abramsky S, 1994, DOMAIN THEORY, P1
   Adams R, 2006, J FUNCT PROGRAM, V16, P219, DOI 10.1017/S0956796805005770
   Altenkirch T, 2009, J FUNCT PROGRAM, V19, P311, DOI 10.1017/S0956796809007278
   [Anonymous], 1999, The Coq Proof Assistant
   [Anonymous], 1992, Handbook of Logic in Computer Science
   Asperti A, 2011, LECT NOTES ARTIF INT, V6803, P64, DOI 10.1007/978-3-642-22438-6_7
   Barras B., 1998, LECT NOTES COMPUTER, V1512, P28
   Barthe G, 2006, J FUNCT PROGRAM, V16, P137, DOI 10.1017/S0956796803004726
   BARTHE G, 2000, J FUNCTIONAL PROGRAM, V10, P417
   Bloo R., 2001, Mathematical Structures in Computer Science, V11, P3, DOI 10.1017/S096012950000325X
   Curien PL, 1996, J ACM, V43, P362, DOI 10.1145/226643.226675
   CURIEN PL, 1992, LECT NOTES COMPUT SC, V629, P209
   Danielsson NA, 2007, LECT NOTES COMPUT SC, V4502, P93
   Dybjer P, 1996, LECT NOTES COMPUT SC, V1158, P120
   Dybjer P, 2000, J SYMBOLIC LOGIC, V65, P525, DOI 10.2307/2586554
   Fridlender D, 2013, LECT NOTES COMPUT SC, V7941, P140
   GEUVERS H, 1994, IEEE S LOG, P320, DOI 10.1109/LICS.1994.316057
   Geuvers H., 1993, THESIS
   HARDIN T, 1989, THEOR COMPUT SCI, V65, P291, DOI 10.1016/0304-3975(89)90105-9
   Kesner D, 2000, THEOR COMPUT SCI, V238, P183, DOI 10.1016/S0304-3975(98)00166-2
   Luo Z., 1994, INT SERIES MONOGRAPH
   Miquel A, 2002, LECT NOTES COMPUT SC, V2646, P240
   Munoz C., 2001, Mathematical Structures in Computer Science, V11, P91, DOI 10.1017/S0960129500003261
   Siles V., 2010, THESIS
   Siles V, 2012, J FUNCT PROGRAM, V22, P153, DOI 10.1017/S0956796812000044
   Siles V, 2010, IEEE S LOG, P21, DOI 10.1109/LICS.2010.19
   Streicher T., 1989, THESIS
NR 32
TC 1
Z9 1
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PY 2015
VL 25
AR e19
DI 10.1017/S0956796815000210
PG 30
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DB1AM
UT WOS:000368240300009
OA Green Published, Bronze
DA 2024-07-18
ER

PT J
AU Schaathun, HG
AF Schaathun, Hans Georg
TI Evaluation of splittable pseudo-random generators
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID RANDOM NUMBER GENERATORS; PARALLEL; TREES
AB Pseudo-random number generation is a fundamental problem in computer programming. In the case of sequential processing the problem is very well researched, but parallel processing raises new problems whereof far too little is currently understood. Splittable pseudo-random generators (S-PRNG) have been proposed to meet the challenges of parallelism. While applicable to any programming paradigm, they are designed to be particularly suitable for pure functional programming. In this paper, we review and evaluate known constructions of such generators, and we identify flaws in several large classes of generators, including Lehmer trees, the implementation in Haskell's standard library, leapfrog, and subsequencing (substreaming).
C1 Aalesund Univ Coll, N-6025 Alesund, Norway.
C3 Norwegian University of Science & Technology (NTNU)
RP Schaathun, HG (corresponding author), Aalesund Univ Coll, Pb 1517, N-6025 Alesund, Norway.
EM georg@schaathun.net
FU Regionalt Forskingsfond Midt-Norge through the project Dynamic Resource
   Allocation with Maritime Application (DRAMA) [ES504913]
FX The research was partially funded by Regionalt Forskingsfond Midt-Norge
   through the project Dynamic Resource Allocation with Maritime
   Application (DRAMA), grant no. ES504913.
CR [Anonymous], 2016, HDB APPL CRYPTOGRAPH
   Brown RG., 2015, DIEHARDER RANDOM NUM
   Bye Robin T., 2014, 28th European Conference on Modelling and Simulation ECMS 2014. Proceedings, P682
   CARTA DG, 1990, COMMUN ACM, V33, P87, DOI 10.1145/76372.76379
   Claessen K., 2013, TF RANDOM PACKAGE
   Claessen K, 2013, ACM SIGPLAN NOTICES, V48, P47, DOI 10.1145/2503778.2503784
   CUCCARO SA, 1995, SIAM PROC S, P279
   DEMATTEIS A, 1990, PARALLEL COMPUT, V14, P207, DOI 10.1016/0167-8191(90)90108-L
   EDDY WF, 1990, J COMPUT APPL MATH, V31, P63, DOI 10.1016/0377-0427(90)90336-X
   FREDERICKSON P, 1984, PARALLEL COMPUT, V1, P175, DOI 10.1016/S0167-8191(84)90072-3
   Hackage, 2011, RAND PACK
   HALTON JH, 1989, J COMPUT PHYS, V84, P1, DOI 10.1016/0021-9991(89)90180-0
   Klamkin M., 1967, Journal of Combinatorial Theory, V3, P279
   Knuth D.E., 1998, ART COMPUTER PROGRAM, V3rd
   KONIGES AE, 1989, J COMPUT PHYS, V81, P230, DOI 10.1016/0021-9991(89)90072-7
   KRAWCZYK H, 1992, J ALGORITHM, V13, P527, DOI 10.1016/0196-6774(92)90054-G
   L'ecuyer P, 2002, OPER RES, V50, P1073, DOI 10.1287/opre.50.6.1073.358
   L'Ecuyer P, 2012, HDB COMPUTATIONAL ST, P35, DOI [10.1007/978-3-642-21551-3_3, DOI 10.1007/978-3-642-21551-3_3]
   L'Ecuyer P, 2007, ACM T MATH SOFTWARE, V33, DOI 10.1145/1268776.1268777
   LECUYER P, 1988, COMMUN ACM, V31, P742, DOI 10.1145/62959.62969
   Leiserson CE, 2012, ACM SIGPLAN NOTICES, V47, P193, DOI 10.1145/2370036.2145841
   Marlow Simon, 2013, Parallel and Concurrent Programming in Haskell
   MARSAGLIA G, 1968, P NATL ACAD SCI USA, V61, P25, DOI 10.1073/pnas.61.1.25
   Mascagni M, 1998, PARALLEL COMPUT, V24, P923, DOI 10.1016/S0167-8191(98)00010-6
   Matsumoto M, 2000, MONTE CARLO AND QUASI-MONTE CARLO METHODS 1998, P56
   Matsumoto M, 2007, ACM T MODEL COMPUT S, V17, DOI 10.1145/1276927.1276928
   O'Sullivan B., 2008, Real world haskell
   PARK SK, 1988, COMMUN ACM, V31, P1192, DOI 10.1145/63039.63042
   PERCUS OE, 1989, J PARALLEL DISTR COM, V6, P477, DOI 10.1016/0743-7315(89)90002-6
   Salmon John K., 2011, Cases on Online Interview Research, P1, DOI DOI 10.1145/2063384.2063405
   Schaathun H. G., 2014, PARALLEL SLUMP PARAL
   Steele GL, 2014, ACM SIGPLAN NOTICES, V49, P453, DOI [10.1145/2714064.2660195, 10.1145/2660193.2660195]
   Warnock, 1983, C NUMER, V37, P135
   Wu PC, 2006, COMPUT PHYS COMMUN, V175, P25, DOI 10.1016/j.cpc.2004.08.009
   [No title captured]
NR 35
TC 3
Z9 4
U1 0
U2 2
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PY 2015
VL 25
AR e6
DI 10.1017/S095679681500012X
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CL9DZ
UT WOS:000357277100004
OA Bronze
DA 2024-07-18
ER

PT J
AU Pouillard, N
   Pottier, F
AF Pouillard, Nicolas
   Pottier, Francois
TI A unified treatment of syntax with binders
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID PRESERVING COMPILER; CALCULUS; NAMELESS; BINDING
AB Atoms and de Bruijn indices are two well-known representation techniques for data structures that involve names and binders. However, using either technique, it is all too easy to make a programming error that causes one name to be used where another was intended. We propose an abstract interface to names and binders that rules out many of these errors. This interface is implemented as a library in AGDA. It allows defining and manipulating term representations in nominal style and in de Bruijn style. The programmer is not forced to choose between these styles: on the contrary, the library allows using both styles in the same program, if desired. Whereas indexing the types of names and terms with a natural number is a well-known technique to better control the use of de Bruijn indices, we index types with worlds. Worlds are at the same time more precise and more abstract than natural numbers. Via logical relations and parametricity, we are able to demonstrate in what sense our library is safe, and to obtain theorems for free about world-polymorphic functions. For instance, we prove that a world-polymorphic term transformation function must commute with any renaming of the free variables. The proof is entirely carried out in AGDA.
C1 [Pouillard, Nicolas; Pottier, Francois] INRIA, F-78153 Le Chesnay, France.
C3 Inria
RP Pouillard, N (corresponding author), INRIA, BP 105, F-78153 Le Chesnay, France.
EM np@nicolaspouillard.fr; francois.pottier@inria.fr
OI Pottier, Francois/0000-0002-4069-1235
CR Altenkirch T, 1999, LECT NOTES COMPUT SC, V1683, P453
   [Anonymous], THESIS U PARIS 7
   [Anonymous], 1993, Program Verification: Fundamental Issues in Computer Science, DOI [10.1090/psapm/019/0235771, DOI 10.1090/PSAPM/019/0235771]
   [Anonymous], NOMPA AGDA CODE
   [Anonymous], IEEE S LOG COMP SCI
   [Anonymous], THESIS U CAMBRIDGE
   [Anonymous], ACM S PRINC PROGR LA
   [Anonymous], C FUNCT PROGR LANG C
   [Anonymous], J ACM
   [Anonymous], ACM WORKSH EV SEM BA
   [Anonymous], ACM INT C FUNCT PROG
   [Anonymous], J FUNCT PROGRAM
   [Anonymous], LECT NOTES COMPUTER
   [Anonymous], INFORM PROCESSING
   [Anonymous], ACM WORKSH MECH REAS
   [Anonymous], 1972, INDAGATIONES MATHEMA, DOI DOI 10.1016/1385-7258(72)90034-0
   Atkey R, 2009, HASKELL'09: PROCEEDINGS OF THE 2009 ACM SIGPLAN HASKELL SYMPOSIUM, P37
   Atkey R, 2009, LECT NOTES COMPUT SC, V5608, P35, DOI 10.1007/978-3-642-02273-9_5
   Aydemir BE, 2005, LECT NOTES COMPUT SC, V3603, P50
   Aydemir B, 2008, ACM SIGPLAN NOTICES, V43, P3, DOI 10.1145/1328897.1328443
   BELLEGARDE F, 1994, SCI COMPUT PROGRAM, V23, P287, DOI 10.1016/0167-6423(94)00022-0
   Bernardy JP, 2010, ACM SIGPLAN NOTICES, V45, P345, DOI 10.1145/1932681.1863592
   Cave A, 2012, ACM SIGPLAN NOTICES, V47, P413, DOI 10.1145/2103621.2103705
   Chargueraud A., 2011, J AUTOM REASON, P1
   Chen CY, 2003, ACM SIGPLAN NOTICES, V38, P275, DOI 10.1145/944746.944730
   Chlipala A, 2007, ACM SIGPLAN NOTICES, V42, P54, DOI 10.1145/1273442.1250742
   Danielsson NilsAnders., 2011, The Agda standard library
   DEBRUIJN NG, 1991, INFORM COMPUT, V91, P189, DOI 10.1016/0890-5401(91)90066-B
   Guillemette LJ, 2008, ACM SIGPLAN NOTICES, V43, P75, DOI 10.1145/1411203.1411218
   HOARE CAR, 1969, COMMUN ACM, V12, P576, DOI 10.1145/363235.363259
   Huet Gerard P., 1997, Journal of Functional Programming, V7, P549
   Licata DR, 2009, ACM SIGPLAN NOTICES, V44, P123, DOI 10.1145/1631687.1596571
   McBride C, 2004, J FUNCT PROGRAM, V14, P69, DOI 10.1017/S0956796803004829
   McBride C, 2003, J FUNCT PROGRAM, V13, P1061, DOI 10.1017/S0956796803004957
   Mcbride C, 2008, J FUNCT PROGRAM, V18, P1, DOI 10.1017/S0956796807006326
   Norell Ulf, 2007, Towards a practical programming language based on dependent type theory
   PFENNING F, 1989, LECT NOTES COMPUT SC, V352, P345
   Pientka B, 2008, ACM SIGPLAN NOTICES, V43, P371, DOI 10.1145/1328897.1328483
   Pitts AM, 2006, J ACM, V53, P459, DOI 10.1145/1147954.1147961
   Pitts AM, 2010, ACM SIGPLAN NOTICES, V45, P159, DOI 10.1145/1707801.1706321
   Pollack R, 2012, J AUTOM REASONING, V49, P185, DOI 10.1007/s10817-011-9229-y
   Poswolsky A, 2008, LECT NOTES COMPUT SC, V4960, P93
   Poswolsky A, 2009, ELECTRON NOTES THEOR, V228, P113, DOI 10.1016/j.entcs.2008.12.120
   Pottier F, 2006, ELECTRON NOTES THEOR, V148, P27, DOI 10.1016/j.entcs.2005.11.039
   Pottier F, 2007, IEEE S LOG, P356, DOI 10.1109/LICS.2007.44
   Pouillard N, 2011, ACM SIGPLAN NOTICES, V46, P320, DOI 10.1145/2034574.2034817
   Pouillard N, 2010, ACM SIGPLAN NOTICES, V45, P217, DOI 10.1145/1932681.1863575
   Sato M, 2010, J SYMB COMPUT, V45, P598, DOI 10.1016/j.jsc.2010.01.010
   Schürmann C, 2005, LECT NOTES COMPUT SC, V3461, P339
   Shinwell MR, 2003, ACM SIGPLAN NOTICES, V38, P263, DOI 10.1145/944746.944729
   Weirich S, 2011, ACM SIGPLAN NOTICES, V46, P333, DOI 10.1145/2034574.2034818
NR 51
TC 7
Z9 7
U1 0
U2 1
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD JUL-SEP
PY 2012
VL 22
SI SI
BP 614
EP 704
DI 10.1017/S0956796812000251
PN 4-5
PG 91
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 004HQ
UT WOS:000308672600007
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Ramsey, N
AF Ramsey, Norman
TI Embedding an interpreted language using higher-order functions and types
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB Using an embedded, interpreted language to control a complicated application can have significant software-engineering benefits. But existing interpreters are designed for embedding into C code. To embed an interpreter into a different language requires an API suited to that language. This paper presents Lua-ML, a new API that is suited to languages that provide higher-order functions and types. The API exploits higher-order functions and types to reduce the amount of glue code needed to use an embedded interpreter. Where embedding in C requires a special-purpose "glue function" for every function to be embedded, embedding in Lua-ML requires only a description of each function's type. Lua-ML also makes it easy to define a Lua function whose behavior depends on the number and types of its arguments.
C1 Tufts Univ, Dept Comp Sci, Medford, MA 02155 USA.
C3 Tufts University
RP Ramsey, N (corresponding author), Tufts Univ, Dept Comp Sci, Medford, MA 02155 USA.
EM nr@cs.tufts.edu
OI Ramsey, Norman/0000-0002-5435-1135
FU NSF [CCR-0096069]; Alfred P. Sloan Research Fellowship
FX A preliminary version of this paper was presented at the ACM SIGPLAN
   2003 Workshop on Interpreters, Virtual Machines and Emulators (IVME '03)
   in June, 2003. Conversations with Joao Dias helped illuminate design
   alternatives, and Joao also gathered statistics about the functions we
   actually embed. Olivier Danvy, Joao Dias, Simon Peyton Jones, and
   Sukyoung Ryu helpfully criticized drafts of this paper. Insightful
   questions from anonymous referees spurred many improvements; special
   thanks to the referee who caught an embarrassing error in the type of
   embedded_atan2. This work is part of the C-- project and was supported
   by NSF grant CCR-0096069, by a gift from Microsoft, and by an Alfred P.
   Sloan Research Fellowship. The code can be downloaded from
   www.cminusminus.org. A snapshot is available as a supplement to the
   online version of this paper at journals.cambridge.org/JFP.
CR Beazley DM, 1996, PROCEEDINGS OF THE FOURTH ANNUAL TCL/TK WORKSHOP, P129
   BENSON BW, 1994, PROCEEDINGS OF THE USENIX SYMPOSIUM ON VERY HIGH LEVEL LANGUAGES (VHLL), P7
   Benton N, 2005, J FUNCT PROGRAM, V15, P503, DOI 10.1017/S0956796804005398
   Blume M., 2001, P 1 WORKSH MULT INFR
   Celes W., 2003, TOLUA ACCESSING C C
   Danvy O, 1998, LECT NOTES COMPUT SC, V1443, P908, DOI 10.1007/BFb0055112
   Danvy O., 1996, Conference Record of POPL '96: The 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P242, DOI 10.1145/237721.237784
   Fokker J., 1995, Advanced Functional Programming. First International Spring School on Advanced Functional Programming Techniques. Tutorial Text, P1
   Ierusalimschy R, 1996, SOFTWARE PRACT EXPER, V26, P635, DOI 10.1002/(SICI)1097-024X(199606)26:6<635::AID-SPE26>3.0.CO;2-P
   Ierusalimschy R., 2001, Proceedings of V Brazilian Symposium on Programming Languages, pB14
   Ierusalimschy R., 2000, REFERENCE MANUAL PRO
   Ierusalimschy R., 2003, PROGRAMMING LUA
   Ierusalimschy Roberto., 2007, P 3 ACM SIGPLAN C HI, P2
   Ierusalimschy Roberto, 1996, REFERENCE MANUAL PRO
   Jenness Tim, 2002, EXTENDING EMBEDDING
   Jeske D., 1998, HZ REAL TIME A UNPUB
   Jones SP, 1999, LECT NOTES COMPUT SC, V1702, P1
   LAUMANN O, 1994, COMPUT SYST, V7, P419
   Leijen D, 2000, ACM SIGPLAN NOTICES, V35, P109, DOI 10.1145/331963.331977
   Leroy Xavier., 2004, OBJECTIVE CAML SYSTE
   Liang Sheng, 1995, P 22 ACM SIGPLAN SIG, P333, DOI DOI 10.1145/199448.199528
   Libes D., 1994, EXPLORING EXPECT TCL
   Mogilefsky B., 1999, LUA GRIM FANDANGO
   Olinsky R, 2006, ACM SIGPLAN NOTICES, V41, P409, DOI 10.1145/1111320.1111073
   Ousterhout J. K., 1990, Proceedings of the Winter 1990 USENIX Conference, P133
   OUSTERHOUT JK, 1994, PROFESSIONAL COMPUTI
   Ramsey N, 2000, ACM SIGPLAN NOTICES, V35, P285, DOI 10.1145/358438.349337
   Ramsey N., 2005, P ACM SIGPLAN WORKSH, P172
   Ramsey Norman., 2003, IVME 03, P6, DOI [10.1145/858570.858571, DOI 10.1145/858570.858571]
   Rhiger M, 2003, ACM T PROGR LANG SYS, V25, P291, DOI 10.1145/641909.641910
   Siefkes C, 2004, LECT NOTES ARTIF INT, V3202, P410
   vanRossum Guido, 2002, EXTENDING EMBEDDING
   Yang Z, 1999, ACM SIGPLAN NOTICES, V34, P289, DOI 10.1145/291251.289458
NR 33
TC 3
Z9 4
U1 0
U2 1
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD NOV
PY 2011
VL 21
BP 585
EP 615
DI 10.1017/S0956796811000219
PN 6
PG 31
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 868UQ
UT WOS:000298551800003
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Gammie, P
AF Gammie, Peter
TI Short note: Strict unwraps make worker/wrapper fusion totally correct
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID TRANSFORMATION
AB The worker/wrapper transformation is a general way of changing the type of a recursive definition, usually applied with an eye to increasing algorithmic efficiency. This note identifies an infelicity in the program transformations presented by Gill & Hutton (The worker/wrapper transformation, J. Funct. Program., vol. 19, 2009, pp. 227-251) and proposes a new totally correct worker/wrapper fusion rule.
C1 Australian Natl Univ, Sch Comp Sci, Canberra, ACT 0200, Australia.
C3 Australian National University
RP Gammie, P (corresponding author), Australian Natl Univ, Sch Comp Sci, GPO Box 4, Canberra, ACT 0200, Australia.
EM Peter.Gammie@anu.edu.au
FU Australian Government via AusAID
FX Much of this work was carried out while I was an Australian Youth
   Ambassador for Development in T. P. Ho Chi Minh, Viet Nam, funded by the
   Australian Government via AusAID. I thank Kai Engelhardt, Brian Huffman,
   Clem Baker-Finch, Bernie Pope, Peter Rickwood, Colin Runciman, Josef
   Svenningsson and the anonymous reviewers.
CR BURSTALL RM, 1977, J ACM, V24, P44, DOI 10.1145/321992.321996
   GAMMIE P, 2009, ARCH FORMAL PROOFS
   Gill A, 2009, J FUNCT PROGRAM, V19, P227, DOI 10.1017/S0956796809007175
   Huffman B, 2009, LECT NOTES COMPUT SC, V5674, P260, DOI 10.1007/978-3-642-03359-9_19
   MULLER O, 1999, J FUNCTIONAL PROGRAM, V9, P191
   Tullsen M., 2002, PATH PROGRAM TRANSFO
   [No title captured]
NR 7
TC 2
Z9 2
U1 0
U2 1
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD MAR
PY 2011
VL 21
BP 209
EP 213
DI 10.1017/S0956796810000080
PN 2
PG 5
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 748GS
UT WOS:000289378800005
OA Bronze
DA 2024-07-18
ER

PT J
AU Achten, P
AF Achten, Peter
TI The Soccer-Fun project
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB In the Soccer-Fun project, students program the brains of football players in a functional language. Soccer-Fun has been developed for an introductory course in functional programming at the Radboud University Nijmegen, The Netherlands. We have used Soccer-Fun in teaching during the past four years. We have also experience in using Soccer-Fun for pupils in secondary education. Soccer-Fun is stimulating because it is about a well-known problem domain. It engages students to problem solving with functional programming because it allows them to compete at several disciplines: the best performing football team becomes the champion of a tournament; the best written code is awarded with a prize; students are judged on the algorithms used. This enables every student to participate and perform at her favorite skill. Soccer-Fun is implemented in Clean and uses its GUI toolkit Object I/O for rendering. It can be implemented in any functional programming language that supports some kind of windowing toolkit.
C1 Radboud Univ Nijmegen, Nijmegen, Netherlands.
C3 Radboud University Nijmegen
RP Achten, P (corresponding author), Radboud Univ Nijmegen, Nijmegen, Netherlands.
EM P.Achten@cs.ru.nl
RI Achten, Peter/AGM-7996-2022
CR Achten P., 1998, Implementation of Functional Languages. 9th International Workshop, IFL'97. Selected Papers, P304, DOI 10.1007/BFb0055438
   ACHTEN P, 2000, CSIR0003 RADB U, P294
   Achten P, 2008, FDPE'08: PROCEEDINGS OF THE 2008 ACM SIGPLAN WORKSHOP ON FUNCTIONAL AND DECLARATIVE PROGRAMMING IN EDUCATION, P61
   Achten Peter, 2007, CLEAN HASKELL98 PROG
   [Anonymous], 2003, YALEUDCSRR1253
   Bird R., 1988, INTRO FUNCTIONAL PRO
   Brus T., 1987, P FUNCT PROGR LANG C, P364
   Conway M., 2000, CHI 2000 Conference Proceedings. Conference on Human Factors in Computing Systems. CHI 2000. The Future is Here, P486, DOI 10.1145/332040.332481
   Felleisen M, 2009, ICFP'09: PROCEEDINGS OF THE 2009 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P47
   Findler RB, 2002, J FUNCT PROGRAM, V12, P159, DOI 10.1017/S0956796801004208
   HUDAK P, 1992, SIGPLAN NOTICES, V27, pT1
   Hudak P, 2003, LECT NOTES COMPUT SC, V2638, P159
   Plasmeijer Rinus., 2001, CONCURRENT CLEAN LAN
   Ullman JeffreyD., 1998, Elements of ML Programming
   Wilensky U., 1999, Netlogo
NR 15
TC 4
Z9 4
U1 0
U2 1
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD JAN
PY 2011
VL 21
BP 1
EP 19
DI 10.1017/S0956796810000055
PN 1
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 748GB
UT WOS:000289376900001
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Schrijvers, T
   Stuckey, P
   Wadler, P
AF Schrijvers, Tom
   Stuckey, Peter
   Wadler, Philip
TI Monadic constraint programming
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB A constraint programming system combines two essential components: a constraint solver and a search engine. The constraint solver reasons about satisfiability of conjunctions of constraints; and the search engine controls the search for solutions by iteratively exploring a disjunctive search tree defined by the constraint program. In this paper we give a monadic definition of constraint programming in which the solver is defined as a monad threaded through the monadic search tree. We are then able to define search and search strategies as first-class objects that can themselves be built or extended by composable search transformers. Search transformers give a powerful and unifying approach to viewing search in constraint programming, and the resulting constraint programming system is first class and extremely flexible.
C1 [Schrijvers, Tom] Katholieke Univ Leuven, Dept Comp Sci, Louvain, Belgium.
   [Stuckey, Peter] Univ Melbourne, Natl ICT Australia, Victoria Lab, Dept Comp Sci & Software Engn, Melbourne, Vic, Australia.
   [Wadler, Philip] Univ Edinburgh, Sch Informat, Edinburgh, Midlothian, Scotland.
C3 KU Leuven; NICTA; University of Melbourne; University of Edinburgh
RP Schrijvers, T (corresponding author), Katholieke Univ Leuven, Dept Comp Sci, Louvain, Belgium.
EM tom.schrijvers@cs.kuleuven.be; pjs@cs.mu.OZ.AU; philip.wadler@ed.ac.uk
RI Schrijvers, Tom/A-6696-2016
OI Schrijvers, Tom/0000-0001-8771-5559; Stuckey, Peter/0000-0003-2186-0459
CR [Anonymous], P 14 ANN ACM S PRINC
   [Anonymous], P ICFP 2008 13 ACM S
   [Anonymous], 1999, OPL OPTIMIZATION PRO
   Apt KR, 1998, ACM T PROGR LANG SYS, V20, P1014, DOI 10.1145/293677.293679
   BARNIER N, THESIS I NATL POLYTE
   Bird R, 2006, J FUNCT PROGRAM, V16, P671, DOI 10.1017/S0956796806006058
   Brassel B, 2007, LECT NOTES COMPUT SC, V4807, P122
   CASAS A, 2006, 8 INT S FUNCT LOG PR, P146
   Claessen K., 2000, P HASK WORKSH MONTR
   Cook W. R., 1989, THESIS BROWN U PROVI
   FISCHER S, 2008, CONSTRAINED MONADIC
   Fruhwirth T, 1998, J LOGIC PROGRAM, V37, P95, DOI 10.1016/S0743-1066(98)10005-5
   Hinze R., 2001, International Journal of Foundations of Computer Science, V12, P125, DOI 10.1142/S0129054101000436
   Jansson P., 1998, Journal of Functional Programming, V8, P527, DOI 10.1017/S095679689800313X
   Kiselyov O, 2005, ACM SIGPLAN NOTICES, V40, P192, DOI 10.1145/1090189.1086390
   Laburthe F., 2002, Constraints, V7, P255, DOI 10.1023/A:1020565317875
   Marriott K., 1998, PROGRAMMING CONSTRAI
   Michel L, 2006, LECT NOTES COMPUT SC, V4204, P359
   OVERTON D, 2008, HASKELL FD LIB
   Regin J.C., 1994, A filtering algorithm for constraints of difference in CSP, P362
   Schulte C, 1999, LOGIC PROGRAMM, P275
   Schulte C, 1997, LECT NOTES COMPUT SC, V1330, P519, DOI 10.1007/BFb0017464
   Schulte C., 2009, Gecode: Generic constraint development environment
   SERES S, 1999, HASK WORKSH 99 PAR F
   *SICSTUS, 2008, SICST PROL
   Smolka G, 1995, LECT NOTES COMPUT SC, V1000, P324
   Somogyi Z, 1996, J LOGIC PROGRAM, V29, P17, DOI 10.1016/S0743-1066(96)00068-4
   Van Hentenryck P., 2000, ACM Transactions on Computational Logic, V2, P285
   Van Hentenryck P, 2006, CONSTRAINTS, V11, P353, DOI 10.1007/s10601-006-9005-5
   VANHENTENRYCK P, 2005, CONSTRAINED BASED LO
   WADLER P, 1985, LECT NOTES COMPUT SC, V201, P113
NR 31
TC 18
Z9 19
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD NOV
PY 2009
VL 19
BP 663
EP 697
DI 10.1017/S0956796809990086
PN 6
PG 35
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 525EJ
UT WOS:000272196200003
OA Bronze, Green Submitted, Green Accepted
DA 2024-07-18
ER

PT J
AU O'Neill, ME
AF O'Neill, Melissa E.
TI The Genuine Sieve of Eratosthenes
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB A much beloved and widely Used example showing the elegance and simplicity of lazy functional programming represents itself as "The Sieve of Eratosthenes." This paper shows that this example is not the sieve and presents an implementation that actually is.
C1 Harvey Mudd Coll, Claremont, CA 91711 USA.
C3 Claremont Colleges; Harvey Mudd College
RP O'Neill, ME (corresponding author), Harvey Mudd Coll, Claremont, CA 91711 USA.
EM oneill@acm.org
CR [Anonymous], 2001, Prime numbers, a computational perspective
   BENGELLOUN SA, 1986, ACTA INFORM, V23, P119, DOI 10.1007/BF00289493
   Hardy G. H., 1979, INTRO THEORY NUMBERS, V5th, P354
   Meertens L, 2004, J FUNCT PROGRAM, V14, P759, DOI 10.1017/S0956796804005210
   PAULSON LC, 1996, ML WORKING PROGRAMME
   PRITCHARD P, 1987, SCI COMPUT PROGRAM, V9, P17, DOI 10.1016/0167-6423(87)90024-4
   PRITCHART P, 1994, P 1 INT S ALG NUMB T, P280
   Runciman C., 1997, Journal of Functional Programming, V7, P219, DOI 10.1017/S0956796897002670
   SELBERG S, 1946, KONGELIGE NORSKE VID, V19, P3
   TURNER DA, 1975, CS751 U STANDR DEP C
NR 10
TC 22
Z9 23
U1 0
U2 3
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD JAN
PY 2009
VL 19
BP 95
EP 106
DI 10.1017/S0956796808007004
PG 12
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 392SM
UT WOS:000262322500005
OA Bronze
DA 2024-07-18
ER

PT J
AU Greve, DA
   Kaufmann, M
   Manolios, P
   Moore, JS
   Ray, S
   Ruiz-Reina, JL
   Sumners, R
   Vroon, D
   Wilding, M
AF Greve, David A.
   Kaufmann, Matt
   Manolios, Panagiotis
   Moore, J. Strother
   Ray, Sandip
   Ruiz-Reina, Jose Luis
   Sumners, Rob
   Vroon, Daron
   Wilding, Matthew
TI Efficient execution in an automated reasoning environment
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID THEOREMS
AB We describe a method that permits the user of a mechanized mathematical logic to write elegant logical definitions while allowing sound and efficient execution. In particular, the features supporting this method allow the user to install, in a logically sound way, alternative executable counterparts for logically defined functions. These alternatives are often much more efficient than the logically equivalent terms they replace. These features have been implemented in the ACL2 theorem prover, and we discuss several applications of the features in ACL2.
C1 [Greve, David A.; Wilding, Matthew] Rockwell Collins Adv Technol Ctr, Cedar Rapids, IA USA.
   [Kaufmann, Matt; Moore, J. Strother; Ray, Sandip] Univ Texas Austin, Dept Comp Sci, Austin, TX 78712 USA.
   [Manolios, Panagiotis; Vroon, Daron] Georgia Inst Technol, Coll Comp, Atlanta, GA 30332 USA.
   [Ruiz-Reina, Jose Luis] Univ Seville, Dept Ciencias Computac & Intelligencia Artificial, Seville, Spain.
   [Sumners, Rob] Adv Micro Devices Inc, Sunnyvale, CA 94088 USA.
C3 University of Texas System; University of Texas Austin; University
   System of Georgia; Georgia Institute of Technology; University of
   Sevilla; Advanced Micro Devices
RP Greve, DA (corresponding author), Rockwell Collins Adv Technol Ctr, Cedar Rapids, IA USA.
OI Manolios, Panagiotis/0000-0003-0519-9699; Ruiz Reina, Jose
   Luis/0000-0003-1021-3256
FU Direct For Computer & Info Scie & Enginr; Div Of Information &
   Intelligent Systems [0844078] Funding Source: National Science
   Foundation
CR ALLEN SF, 1990, 5TH P ANN S LOG COMP, P95
   [Anonymous], 2005, 17 IMACS WORLD C SCI
   [Anonymous], 1994, METAMATHEMATICS MACH
   BEVIER WR, 1989, J AUTOM REASONING, V5, P409, DOI DOI 10.1007/BF00243130)
   Boyer R. S., 1979, COMPUTATIONAL LOGIC
   Boyer R. S., 1997, A Computational Logic Handbook
   BOYER RS, 1975, J ACM, V22, P129, DOI 10.1145/321864.321875
   BOYER RS, 2002, LNCS, V2257, P9, DOI DOI 10.1007/3-540-45587-6_3
   BOYER RS, 1997, CORRECTNESS PROBLEM, P103
   Brock B, 1996, LECT NOTES COMPUT SC, V1166, P275, DOI 10.1007/BFb0031816
   Brock B, 1999, IND STRENGTH FORMAL, P81
   COWLES J, 2003, P 4 INT WORKSH ACL2
   Crow J., 2001, EVALUATING TESTING A
   DAVIS J, 2004, P 5 INT WORKSH ACL2
   GOLDBERG J, 1984, DEV ANAL SOFTWARE IM
   Gordon M, 2003, LECT NOTES COMPUT SC, V2860, P200
   GREVE D, 2003, P 4 INT WORKSH ACL2
   Greve D., 2000, ADVAN FORM METHODS, P113
   GREVE DA, 2006, TR0659 U TEX AUST DE
   Harrison, 1995, CRC053 SRI INT CAMBR
   HUNT W, 1994, LECT NOTES ARTIFICIA, V795
   Kaufmann M, 2001, J AUTOM REASONING, V26, P161, DOI 10.1023/A:1026517200045
   Kaufmann M., 1997, PRECISE DESCRIPTION
   Kaufmann M., 2006, ACL2
   Kaufmann Matt, 2002, P 3 INT WORKSH ACL2
   Liu Hanbing., 2003, INTERPRETERS VIRTUAL, P15, DOI DOI 10.1145/858570.858572
   Manolios P, 2003, J AUTOM REASONING, V31, P107, DOI 10.1023/B:JARS.0000009505.07087.34
   Manolios P, 2003, LECT NOTES ARTIF INT, V2741, P243
   MANOLIOS P, 2004, LECT NOTES COMPUTER, V3312
   MANOLIOS P, 2002, P 3 INT WORKSH ACL2
   MANOLIOS P, 2006, J AUTOM REASONING, V34, P1
   MATTHEWS J, 2004, P 5 INT WORKSH ACL2
   Moore JS, 2003, LECT NOTES COMPUT SC, V2860, P289
   PAULINMOHRING C, 1993, J SYMB COMPUT, V15, P607, DOI 10.1016/S0747-7171(06)80007-6
   RAY S, 2004, P 5 INT WORKSH ACL2
   RAY S, 2002, P 3 INT WORKSH ACL2
   Ruiz-Reina JL, 2006, J AUTOM REASONING, V37, P67, DOI 10.1007/s10817-006-9030-5
   RUSSINOFF DM, 2000, ADVAN FORM METHODS, V4, P201
   SHANKAR N, 1999, EFFICIENTLY EXECUTIN
   Steele Jr Guy L., 1990, COMMON LISP LANGUAGE
   SUMNERS R, 2000, P 2 INT WORKSH ACL2
   WEYHRAUCH RW, 1980, ARTIF INTELL, V13, P133, DOI 10.1016/0004-3702(80)90015-6
NR 42
TC 16
Z9 17
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD JAN
PY 2008
VL 18
BP 15
EP 46
DI 10.1017/S0956796807006338
PN 1
PG 32
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 315CQ
UT WOS:000256855900002
OA Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Barthe, G
   Coquand, T
AF Barthe, G
   Coquand, T
TI Remarks on the equational theory of non-normalizing pure type systems
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB Pure Type Systems (PTS) come in two flavours: domain-free systems with untyped lambda-abstractions (i.e. of the form lambda x.M); and domain-free systems with typed lambda-abstractions (i.e. of the form lambda x :A.M). Both flavours of systems are related by an erasure function vertical bar.vertical bar that removes types from A-abstractions. Preservation of Equational Theory, which states the equational theories of both systems coincide through the erasure function, is a property of functional and normalizing PTSs. In this paper we establish that Preservation of Equational Theory fails for some non-normalizing PTSs, including the PTS with * : *. The gist of our argument is to exhibit a typable expression Y-H whose erasure vertical bar Y vertical bar is a fixpoint combinator, but which is not a fixpoint combinator itself.
C1 INRIA Sophia Antipolis, Sophia Antipolis, France.
   Chalmers Univ, Gothenburg, Sweden.
C3 Chalmers University of Technology
RP INRIA Sophia Antipolis, Sophia Antipolis, France.
EM Gilles.Barthe@inria.fr; coquand@cs.chalmers.se
OI BARTHE, Gilles/0000-0002-3853-1777
CR [Anonymous], 1984, Studies in Logic
   [Anonymous], 1992, Handbook of Logic in Computer Science
   BARTHE G, 1999, LECT NOTES COMPUTER, V1584, P241
   BARTHE G, 2000, J FUNCTIONAL PROGRAM, V10, P417
   Coquand T., 1986, Proceedings of the Symposium on Logic in Computer Science (Cat. No.86CH2321-8), P227
   Coquand T., 1994, Journal of Functional Programming, V4, P77, DOI 10.1017/S0956796800000952
   GEUVERS H, 1992, PROCEEDINGS OF THE SEVENTH ANNUAL IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P453, DOI 10.1109/LICS.1992.185556
   Geuvers H., 1991, Journal of Functional Programming, V1, P155
   GEUVERS H, 1994, IEEE S LOG, P320, DOI 10.1109/LICS.1994.316057
   GEUVERS H, 1993, THESIS U NIJMEGEN NE
   Girard Jean-Yves, 1972, Ph. D. Dissertation
   Howe D. J., 1987, Proceedings of the Symposium on Logic in Computer Science (Cat. No.87CH2464-6), P205
   Hurkens A. J. C., 1995, LECT NOTES COMPUTER, V902, P266
   JUTTING LSV, 1993, INFORM COMPUT, V105, P30, DOI 10.1006/inco.1993.1038
   Klop J.W., 1992, HDB LOGIC COMPUTER S, VII, P1
   MARTINLOF P, 1974, THEORY TYPES
   MEYER AR, 1986, P POPL 86, P27
   REINHOLD MB, 1989, MITLCSTR458
   vanBakel S, 1997, ANN PURE APPL LOGIC, V86, P267, DOI 10.1016/S0168-0072(96)00036-X
NR 19
TC 2
Z9 2
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD MAR
PY 2006
VL 16
BP 137
EP 155
DI 10.1017/S0956796803004726
PN 2
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 015TN
UT WOS:000235574000002
OA Bronze
DA 2024-07-18
ER

PT J
AU Loogen, R
   Ortega-Mallén, Y
   Peña-Marí, R
AF Loogen, R
   Ortega-Mallén, Y
   Peña-Marí, R
TI Parallel functional programming in Eden
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID SKELETONS
AB Eden extends the non-strict functional language Haskell with constructs to control parallel evaluation of processes. Although processes are defined explicitly, communication and synchronisation issues are handled in a way transparent to the programmer. In order to offer effective support for parallel evaluation, Eden's coordination constructs override the inherently sequential demand-driven (lazy) evaluation strategy of its computation language Haskell. Eden is a general-purpose parallel functional language suitable for developing sophisticated skeletons - which simplify parallel programming immensely - as well as for exploiting more irregular parallelism that cannot easily be captured by a predefined skeleton. The paper gives a comprehensive description of Eden, its semantics, its skeleton-based programming methodology - which is applied in three case studies - its implementation and performance. Furthermore it points at many additional results that have been achieved in the context of the Eden project.
C1 Univ Marburg, Fachbereich Mathemat & Informat, D-35032 Marburg, Germany.
   Univ Complutense Madrid, Dept Sistemas Informat & Programac, E-28040 Madrid, Spain.
C3 Philipps University Marburg; Complutense University of Madrid
RP Univ Marburg, Fachbereich Mathemat & Informat, Hans Meerwein Str, D-35032 Marburg, Germany.
EM loogen@mathematik.uni-marburg.de; yolanda@sip.ucm.es; ricardo@sip.ucm.es
RI PENA MARI, RICARDO VICENTE/L-1886-2017
OI PENA MARI, RICARDO VICENTE/0000-0001-5387-8931
CR Adams W. W., 1994, An Introduction to Grobner Bases
   Amdahl G. M., 1967, P SPRING JOINT COMP, P483, DOI DOI 10.1145/1465482.1465560
   [Anonymous], 2003, Parallel Processing Letters, DOI DOI 10.1142/S0129626403001380_EPRINT:HTTPS://DOI.ORG/10.1142/S0129626403001380
   [Anonymous], 1978, Fundamentals of Computer Algorithms
   [Anonymous], 2000, Parallel programming in openMP
   Bacci B, 1999, LECT NOTES COMPUT SC, V1662, P13
   BAKERFINCH C, 2000, ICFP 00 INT C FUNCT, P162
   Berthold J, 2004, LECT NOTES COMPUT SC, V3145, P102
   Berthold J, 2003, LECT NOTES COMPUT SC, V2790, P732
   Blelloch GE, 1996, COMMUN ACM, V39, P85, DOI 10.1145/227234.227246
   BRATVOLD TA, 1993, IFL 93 5 INT WORKSH, P23
   BREITINGER S, 1998, LNCS, V1490, P318
   BREITINGER S, 1997, HIPS 97 WORKSH HIGH, P120, DOI DOI 10.1109/HIPS.1997.582964
   Breitinger Silvia, 1997, LECT NOTES COMPUTER, V1467, P250
   COLE M., 1989, ALGORITHMIC SKELTONS
   COLE MI, 2003, ESKEL REFERNCE MANUA
   Darlington J., 1993, PARLE '93 Parallel Architectures and Languages Europe. 5th International PARLE Conference Proceedings, P146
   Gaudiot J.-L., 2001, Compiler optimizations for scalable parallel systems. Languages, compilation techniques, and run time systems, P45
   *GHC, 1993, GLASG HASK COMP
   GIACALONE A, 1990, LECT NOTES COMPUTER, V443
   GOMEZ PR, 2004, THESIS PHILIPPS U MA
   Gorlatch S, 2004, ACM T PROGR LANG SYS, V26, P47, DOI 10.1145/963778.963780
   HAMDAN M, 2000, THESIS H WATT U
   Hammond K., 1999, RES DIRECTIONS PARAL
   Hammond Kevin., 1995, HIGH PERFORMANCE FUN, P208
   Hernández H, 2000, TRENDS IN FUNCTIONAL PROGRAMMING, P11
   HERRMANN C, 2000, THESIS U PASSAU
   Hidalgo-Herrero M., 2002, Parallel Processing Letters, V12, P211, DOI 10.1142/S0129626402000938
   Hidalgo-Herrero M, 2003, LECT NOTES COMPUT SC, V2895, P303
   HIDALGOHERRERO M, 2004, THESIS U COMPLUTENSE
   HIDALGOHERRERO M, 2001, TRENDS FUNCTIONAL PR, V2, P101
   Jones S. Peyton, 1996, POPL 96, P295, DOI DOI 10.1145/237721.237794
   JONES SLP, 1996, LNCS, V1058, P18
   JONES SP, 1999, HASKELL 98 NONSTRICT
   KELLY P, 1989, RES MONOGRAPHS PARAL
   Klusik U, 2000, TRENDS IN FUNCTIONAL PROGRAMMING, P2
   Klusik U, 2001, LECT NOTES COMPUT SC, V2011, P71
   Klusik U, 1999, LECT NOTES COMPUT SC, V1595, P103
   KLUSIK U, 2002, ADV COMPUTATION THEO
   KLUSIK U, 2001, TRENDS FUNCTIONAL PR, V2, P53
   Loidl H. W., 2003, Higher-Order and Symbolic Computation, V16, P203, DOI 10.1023/A:1025641323400
   Loidl H.W., 2001, TRENDS FUNCTIONAL PR, V2, P39
   LOOGEN R, 2002, PATTERNS SKELETONS P, P95
   LUANCHBURY J, 1993, POPL 93 ACM S PRINC, P144
   MARTINEZ R, 2004, LECT NOTES COMPUTER, V3145
   MICHAELSON G, 2001, PARALLEL ALGORITHMS, V16, P181
   MIHIL RS, 1995, 369 CSG MIT LAB COMP
   *MPI, 1997, MPI 2 EXT MESS PASS
   NOCKER EGJ, 1991, LNCS, V505, P202
   PAREJA C, 2001, TRENDS FUNCTIONAL PR, V2, P13
   Peña R, 2005, J FUNCT PROGRAM, V15, P67, DOI 10.1017/S0956796804005295
   PENA R, 2001, PRINCIPLES PRACTICE, P187
   PEYTONJONES SL, 1992, J FUNCTIONAL PROGRAM, V2, P127
   POINTON RF, 2001, LECT NOTES COMPUTER, V2011, P101
   *PVM, 1993, PAR VIRT MACH REF MA
   Reppy J.H., 1991, PROC 1991 C PROGRAMM, P293, DOI [10.1145/113445.113470, DOI 10.1145/113445.113470]
   SCHOLZ SB, 1996, THESIS U KIEL
   Sheard T, 2002, ACM SIGPLAN NOTICES, V37, P60, DOI 10.1145/636517.636528
   Trinder Philip W., 1998, J FUNCTIONAL PROGRAM, V8, P23, DOI DOI 10.1017/S0956796897002967
   Trinder PW, 2002, J FUNCT PROGRAM, V12, P469, DOI 10.1017/S0956796802004343
   TRINDER PW, 1996, P 1996 ACM C PROGR L, P78
   [No title captured]
NR 62
TC 82
Z9 90
U1 0
U2 3
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD MAY
PY 2005
VL 15
BP 431
EP 475
DI 10.1017/S0956796805005526
PN 3
PG 45
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 941QJ
UT WOS:000230229000004
OA Bronze
DA 2024-07-18
ER

PT J
AU Kreitz, C
AF Kreitz, C
TI Building reliable, high-performance networks with the Nuprl proof
   development system
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article; Proceedings Paper
CT Meeting on Dependent Type Theory Meets Practical Programming
CY AUG, 2001
CL Schloss Dagstuhl, GERMANY
ID VERIFICATION
AB Proof systems for expressive type theories provide a foundation for the verification and synthesis of programs. But despite their successful application to numerous programming problems there remains an issue with scalability. Are proof environments capable of reasoning about large software systems? Can the support they offer be useful in practice? In this article we answer this question by showing how the NUPRL proof development system and its rich type theory have contributed to the design of reliable, high-performance networks by synthesizing optimized code for application configurations of the ENSEMBLE group communication toolkit. We present a type-theoretical semantics of OCAML, the implementation language of ENSEMBLE, and tools for automatically importing system code into the NUPRL system. We describe reasoning strategies for generating verifiably correct fast-path optimizations of application configurations that substantially reduce end-to-end latency in ENSEMBLE. We also discuss briefly how to use NUPRL for checking configurations against specifications and for the design of reliable adaptive network protocols.
C1 Cornell Univ, Dept Comp Sci, Ithaca, NY 14853 USA.
C3 Cornell University
RP Cornell Univ, Dept Comp Sci, Ithaca, NY 14853 USA.
EM kreitz@cs.cornell.edu
CR AAGAARD M, 1993, LNCS, V663, P72
   Abbott MB, 1993, IEEE ACM T NETWORK, V1, P600, DOI 10.1109/90.251918
   Allen SF, 2000, LECT NOTES ARTIF INT, V1831, P170
   Andrews PB, 1996, J AUTOM REASONING, V16, P321, DOI 10.1007/BF00252180
   [Anonymous], 1995, Temporal verification of reactive systems-safety
   [Anonymous], USERS GUIDE ALF
   [Anonymous], 2000, Computer-Aided Reasoning: An Approach
   ATTALLI I, 1998, OOPSLA 98 WORKSH FOR
   BIAGIONI E, 1994, ACM SIGCOMM C, P36
   Bickford M., 2001, Theorem Proving in Higher Order Logics. 14th International Conference, TPHOLs 2001. Proceedings (Lecture Notes in Computer Science Vol.2152), P105
   BICKFORD M, 2001, CS20011839 CORN U DE
   BICKFORD M, 2001, DARP INF SURV C EXP, V2, P100
   BICKFORD M, 1999, IR FORM METH WORKSH
   BIRMAN K, 2000, DARP INF SURV C EXP, P149
   Birman K.P., 1994, RELIABLE DISTRIBUTED
   Blaine L, 1998, 13TH IEEE INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING, PROCEEDINGS, P270, DOI 10.1109/ASE.1998.732672
   CASTELLUCCIA C, 1996, ACM SIGCOMM C, P60
   Clark D.D., 1990, ACM SIGCOMM COMP COM, P200
   Clarke EM, 1999, MODEL CHECKING, P1
   CLEAVELAND R, 1994, SPECIFICATION PARALL, V18, P75
   Constable R L, 1986, Implementing mathematics with the Nuprl proof development system
   Constable RL, 1998, STUD LOGIC, V137, P683
   Constable RL, 2000, NATO ADV SCI I F-COM, V175, P91
   DERAUGLAUDRE D, 2000, CAMLP4 VERSION 3 00
   Dill DavidL., 1996, P 8 INT C COMPUTER A, P390
   DOWEK G, 1991, 134 RR I NAT RECH IN
   ENGLER DR, 1996, ACM COMM ARCH PROT A, P53
   FILLIATRE JC, 1998, LNCS, V1657
   FILLIATRE JC, 2003, IN PRESS J FUNCT PRO
   Finkbeiner B, 1998, LECT NOTES COMPUT SC, V1536, P239, DOI 10.1007/3-540-49213-5_9
   Gomes CP, 1996, PROCEEDINGS OF THE 11TH KNOWLEDGE-BASED SOFTWARE ENGINEERING CONFERENCE, P12, DOI 10.1109/KBSE.1996.552819
   Gordon M.J.C., 1993, Introduction to HOL: A theorem proving environment for higher order logic
   HAYDEN M, 2001, ENSEMBLE REFERENCE M
   Hickey J, 2000, LECT NOTES COMPUT SC, V1869, P252
   Hickey J, 1999, LECT NOTES COMPUT SC, V1579, P119
   HICKEY J, 1996, FDN OBJECT ORIENTED, V3
   HICKEY J, 2001, THESIS CORNELL U
   Holzmann GJ, 1997, IEEE T SOFTWARE ENG, V23, P279, DOI 10.1109/32.588521
   HOWE DJ, 1996, LECT NOTES COMPUTER, V1125, P267
   HOWES MJ, 1994, J PSYCHOSOC ONCOL, V12, P1
   Jacobs B, 2001, LECT NOTES COMPUT SC, V2028, P284
   KOPYLOV A, 2000, 20001809 TR CORN U D
   Kreitz C, 1999, LECT NOTES COMPUT SC, V1579, P104
   KREITZ C, 1997, TR971637 CORN U DEP
   KREITZ C, 1998, LECT NOTES ARTIF INT, V1421, P317
   Leino KRM, 2001, LECT NOTES COMPUT SC, V2000, P157
   Leroy Xavier., 2000, The Objective Caml system
   Lincoln P., 1993, Digest of Papers FTCS-23 The Twenty-Third International Symposium on Fault-Tolerant Computing, P402, DOI 10.1109/FTCS.1993.627343
   LIU X, 2001, INT WORKSH APPL REL, V37
   LIU X, 1999, 17 ACM S OP SYST PRI, V34, P80
   Lynch N. A., 1996, DISTRIBUTED ALGORITH
   Martin-Lof Per, 1984, STUDIES PROOF THEORY, V1
   Massalin H, 1992, THESIS COLUMBIA U
   McMillan K. L., 1993, Symbolic model checking
   MURTHY CR, 1990, 5TH P ANN S LOG COMP, P257
   NAUMOV P, 1998, THESIS CORNELL U
   OWRE S, 1996, LNCS, V1102, P411
   Paulson L., 1999, ACM T COMPUT SYST, V2, P332
   Paulson L. C., 1998, Journal of Computer Security, V6, P85
   Paulson LC, 1990, Logic and computer science, V31, P361
   Pfenning Frank, 1999, LNCS, V1632, P202, DOI DOI 10.1007/3-540-48660-7_14
   Pollack Robert, 1994, THESIS U EDINBURGH
   PROEBSTING T, 1996, 23 ACM S PRINC PROGR, P119
   PU C, 1995, 15 ACM SOSP DEC 1995, P314
   Rushby J, 1999, IEEE T SOFTWARE ENG, V25, P651, DOI 10.1109/32.815324
   RUSHBY J, 1997, DEPENDABLE COMPUTING, V6, P191
   RUSHBY J, 1994, 13 ACM S PRINC DISTR, P304
   SCHMITT S, 2001, LECT NOTES ARTIF INT, V2083, P421
   Schneider FB, 2001, LECT NOTES COMPUT SC, V2000, P86
   Sipma HB, 1999, FORM METHOD SYST DES, V15, P49, DOI 10.1023/A:1008791913551
   Smith D.R., 1991, AUTOMATING SOFTWARE, P483
   SMITH DR, 1993, 8 KNOWL BAS SOFTW EN, P60
   SRINIVAS YV, 1995, INT C MATH PROGR CON, P60
   Van Den Berg J., 2001, Lecture notes in computer science, V2031, P299
   Van Renesse R, 1998, SOFTWARE PRACT EXPER, V28, P963, DOI 10.1002/(SICI)1097-024X(19980725)28:9<963::AID-SPE179>3.0.CO;2-9
   VANDENBERG J, 2000, LNCS, V1827, P1
   VANINWEGEN M, 1994, LECT NOTES COMPUTER, V780, P61
   VanInwegen Myra., 1996, THESIS U PENNSYLVANI
   vanRenesse R, 1996, COMMUN ACM, V39, P76, DOI 10.1145/227210.227229
   Westfold SJ, 2001, KNOWL ENG REV, V16, P69, DOI 10.1017/S0269888901000029
NR 80
TC 6
Z9 6
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD JAN
PY 2004
VL 14
BP 21
EP 68
DI 10.1017/S0956796803004854
PN 1
PG 48
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 809LK
UT WOS:000220638000003
OA Bronze
DA 2024-07-18
ER

PT J
AU Felleisen, M
AF Felleisen, M
TI Welcome to the educational pearls column
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
C1 Northeastern Univ, Coll Comp Sci, Boston, MA 02115 USA.
C3 Northeastern University
RP Felleisen, M (corresponding author), Northeastern Univ, Coll Comp Sci, Cullinane Hall,360 Huntington Ave, Boston, MA 02115 USA.
EM matthias@ccs.neu.edu
CR [Anonymous], 1985, Structure and Interpretation of Computer Programs
   Felleisen Matthias, 2001, How to Design Programs
   Findler RB, 2002, J FUNCT PROGRAM, V12, P159, DOI 10.1017/S0956796801004208
   FINDLER RB, 2002, LECT NOTES COMPUTER, V1292, P369
   Harper R., 1999, Journal of Functional Programming, V9, P463, DOI 10.1017/S0956796899003378
   JUNG Y, 2000, J FUNCTIONAL PROG, V10, P527
   SERRANO M, 2000, J FUNCTIONAL PROGRAM, V10, P1
NR 7
TC 0
Z9 0
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD SEP
PY 2003
VL 13
BP 835
EP 838
DI 10.1017/s0956796803004799
PN 5
PG 4
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 720RF
UT WOS:000185273200001
OA Bronze
DA 2024-07-18
ER

PT J
AU Gallesio, E
   Serrano, M
AF Gallesio, E
   Serrano, M
TI Programming graphical user interfaces with Scheme
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB This paper presents Biglook, a widget library for an extended version of the Scheme programming language. It uses classes of a Clos-like object layer to represent widgets and Scheme closures to handle graphical events. Combining functional and object-oriented programming styles yields an original application programming interface that advocates a strict separation between the implementation of the graphical interfaces and the user-associated commands, enabling compact source code. The Biglook implementation separates the Scheme programming interface and the native back-end. This permits different ports for Biglook. The current version uses GTK+ and Swing graphical toolkits, while the previous release used Tk.
C1 Univ Nice Sophia Antipolis, F-06903 Sophia Antipolis, France.
C3 Universite Cote d'Azur
RP Gallesio, E (corresponding author), Univ Nice Sophia Antipolis, 650 Route Colles,BP 145, F-06903 Sophia Antipolis, France.
EM Erick.Gallesio@unice.fr; Manuel.Serrano@unice.fr
CR [Anonymous], 1998, P 25 ACM SIGPLAN SIG, DOI DOI 10.1145/268946.268961
   Bobrow D.G., 1988, SIGPLAN NOTICES, V23
   CHAMBERS C, 1993, 930305 U WASH DEP CO
   CHAMBERS C, 1998, INT WORKSH FDN OBJ O
   DALHEIMER MK, 1999, PROGRAMMING QT
   DYBVIG K, 1998, CHEZ SCHEME USERS GU
   Felleisen M, 1998, ACM SIGPLAN NOTICES, V33, P17, DOI 10.1145/284563.284566
   FLATT M, 1999, INT C FUNCT PROGR
   FURUSE J, 1995, 1041 RIMS KYOT U
   Gabriel Richard., 1991, Lisp: Good News, Bad News, How to Win Big
   GALLESIO E, 2001, 13SRR200113FR U NIC
   GALLESIO E, 1995, 9531A RT 13SCNRS U N
   GALLESIO E, 1996, DESIGNING META OBJEC
   Goldberg A., 1983, Smalltalk 80: The Language and Its Implementation
   Gosling J., 1996, The Java Application Programming Interface, V2
   Gosling James, 1996, The Java Language Specification
   *ISO IEC, 1990, 9899 ISOIEC DIS
   KICZALES G, 1992, ART METAOBJECT PROTO
   Millstein T, 1999, LECT NOTES COMPUT SC, V1628, P279
   NOBLE R, 1994, 94223 U YORK DEP COM
   NORDLANDER J, 1999, THESIS CHALMERS U TE
   Ousterhout J.K., 1994, TCL TK TOOLKIT
   PENNINGTON H, 1999, GTKPLUS GNOME APPL D
   QUEINNEC C, 1993, WORKS OBJ OR PROGR L
   Remy D, 1997, S PRINC PROGR LANG, P40
   ROUAIX F, 1996, COMPUTER NETWORKS TE, V28, P7
   SERRANO M, 1994, 0169 RT INRIA
   Shalit A., 1996, The Dylan reference manual: the definitive guide to the new object-oriented dynamic language
   SMART J, 1992, WXWINDOWS TOOLKIT RE
   STROUSTRUP B, 1994, DESIGN EVOLUTION CPL
   SUPERINA M, 2000, ACT JOURN JFLA, P187
   VULLINGS T, 1995, INT S PROGR LANG IMP
   Wadler P, 1998, ACM SIGPLAN NOTICES, V33, P23, DOI 10.1145/286385.286387
   WALRATH K, 1999, JFC SWING TUTORIAL G
   WEIS P, 1990, 121 INRIA
NR 35
TC 0
Z9 0
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD SEP
PY 2003
VL 13
BP 839
EP 866
DI 10.1017/S0956796802004537
PN 5
PG 28
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 720RF
UT WOS:000185273200002
OA Bronze
DA 2024-07-18
ER

PT J
AU Hinze, R
   Runciman, C
AF Hinze, Ralf
   Runciman, Colin
TI Super-naturals
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
C1 [Hinze, Ralf] Tech Univ Kaiserslautern, Fachbereich Informant, Kaiserslautern, Germany.
   [Runciman, Colin] Univ York, Dept Comp Sci, York, N Yorkshire, England.
C3 University of Kaiserslautern; University of York - UK
RP Hinze, R (corresponding author), Tech Univ Kaiserslautern, Fachbereich Informant, Kaiserslautern, Germany.
EM ralf-hinze@cs.uni-kl.de; colin.runciman@york.ac.uk
OI Runciman, Colin/0000-0002-0151-3233; Hinze, Ralf/0000-0001-5678-0286
CR [Anonymous], 1998, Purely Functional Data Structures
   Augustsson L, 2007, NUMBERS VARIOUS NUMB
   Friedman Daniel P., 1976, 3RD INT C AUT LANG P, P257
   Hughes R J. M., 1982, P 1982 ACM S LISP FU, P1, DOI DOI 10.1145/800068.802129
   Peano G., 1889, FREGE GODEL, P83
   RUNCIMAN C, 1989, COMPUT LANG, V14, P181, DOI 10.1016/0096-0551(89)90004-0
NR 6
TC 0
Z9 0
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD JAN 31
PY 2022
VL 32
AR e5
DI 10.1017/S0956796822000028
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA YP3IG
UT WOS:000748517900001
OA hybrid
DA 2024-07-18
ER

PT J
AU Gilray, T
   Adams, MD
   Might, M
AF Gilray, Thomas
   Adams, Michael D.
   Might, Matthew
TI Abstract allocation as a unified approach to polyvariance in
   control-flow analyses
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID SENSITIVITY
AB In higher order settings, control-flow analysis aims to model the propagation of both data and control by finitely approximating program behaviors across all possible executions. The polyvariance of an analysis describes the number of distinct abstract representations, or variants, for each syntactic entity (e.g., functions, variables, or intermediate expressions). Monovariance, one of the most basic forms of polyvariance, maintains only a single abstract representation for each variable or expression. Other polyvariant strategies allow a greater number of distinct abstractions and increase analysis complexity with the aim of increasing analysis precision. For example, k-call sensitivity distinguishes flows by the most recent k call sites, k-object sensitivity by a history of allocation points, and argument sensitivity by a tuple of dynamic argument types. From this perspective, even a concrete operational semantics may be thought of as an unboundedly polyvariant analysis. In this paper, we develop a unified methodology that fully captures this design space. It is easily tunable and guarantees soundness regardless of how tuned. We accomplish this by extending the method of abstracting abstract machines, a systematic approach to abstract interpretation of operational abstract-machine semantics. Our approach permits arbitrary instrumentation of the underlying analysis and arbitrary tuning of an abstract-allocation function. We show that the design space of abstract allocators both unifies and generalizes existing notions of polyvariance. Simple changes to the behavior of this function recapitulate classic styles of analysis and yield novel combinations and variants.
C1 [Gilray, Thomas] Univ Maryland, College Pk, MD 20742 USA.
   [Adams, Michael D.] Univ Utah, Salt Lake City, UT 84112 USA.
   [Might, Matthew] Univ Alabama Birmingham, Birmingham, AL USA.
C3 University System of Maryland; University of Maryland College Park; Utah
   System of Higher Education; University of Utah; University of Alabama
   System; University of Alabama Birmingham
RP Gilray, T (corresponding author), Univ Maryland, College Pk, MD 20742 USA.
EM tgilray@cs.umd.edu; adamsmd@cs.utah.edu; might@uab.edu
RI Adams, Michael/HNQ-4470-2023
FU DARPA [AFRL FA8750-15-2-0092, FA8750-12-2-0106]; NSF under CAREER
   [1350344]; Victor Basili fellowship at the University of Maryland,
   College Park
FX This material is partially based on research sponsored by DARPA under
   agreements number AFRL FA8750-15-2-0092 and FA8750-12-2-0106, by NSF
   under CAREER grant 1350344, and by the Victor Basili fellowship at the
   University of Maryland, College Park.
CR Agesen O, 1995, LECT NOTES COMPUT SC, V952, P2
   Amtoft T, 2000, LECT NOTES COMPUT SC, V1782, P26
   [Anonymous], 1991, Ph.D. dissertation
   Appel A., 2007, COMPILING CONTINUATI
   Banerjee A, 1997, ACM SIGPLAN NOTICES, V32, P1, DOI 10.1145/258949.258951
   Besson F., 2009, P 11 INT WORKSH FORM
   Bravenboer M, 2009, OOPSLA 2009, CONFERENCE PROCEEDINGS, P243
   Cousot P., 1997, Conference Record of POPL '97: The 24th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P316, DOI 10.1145/263699.263744
   Cousot P., 1979, 6 ACM S PRINCIPLES P, P269, DOI DOI 10.1145/567752.567778
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Cousot Patrick, 1976, P 2 INT S PROGRAMMIN
   Earl C, 2012, ACM SIGPLAN NOTICES, V47, P177, DOI 10.1145/2398856.2364576
   FLANAGAN C, 1993, SIGPLAN NOTICES, V28, P237, DOI 10.1145/173262.155113
   Gilray Thomas, 2014, Trends in Functional Programming. 14th International Symposium, TFP 2013. Revised Selected Papers: LNCS 8322, P134, DOI 10.1007/978-3-642-45340-3_9
   Gilray T., 2013, P WORKSH SCHEM FUNCT
   Gilray T, 2016, ACM SIGPLAN NOTICES, V51, P407, DOI 10.1145/3022670.2951936
   Gilray T, 2016, ACM SIGPLAN NOTICES, V51, P691, DOI 10.1145/2914770.2837631
   Harrison W. L.  III, 1989, LISP and Symbolic Computation, V2, P179, DOI 10.1007/BF01808954
   Holdermans S, 2010, ICFP 2010: PROCEEDINGS OF THE 2010 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P63
   Jagannathan S., 1995, Conference Record of POPL'95: 22nd ACM SIGPLAN-SIGACT Symposium Principles of Programming Languages, P393, DOI 10.1145/199448.199536
   Jagannathan S., 1997, Static Analysis. 4th International Symposium, SAS '97 Proceedings, P232, DOI 10.1007/BFb0032745
   Jenkins M, 2014, WORKSH SCHEM FUNCT P
   Johnson J. I, 2013, P 18 ACM SIGPLAN INT, P443
   JONES N. D., 1982, P 9 ACM SIGPLAN SIGA, P66, DOI DOI 10.1145/582153.582161
   KAHN G, 1987, LECT NOTES COMPUT SC, V247, P22
   Kastrinis G, 2013, ACM SIGPLAN NOTICES, V48, P423, DOI 10.1145/2499370.2462191
   Kennedy A, 2007, ICFP'07 PROCEEDINGS OF THE 2007 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P177
   Koot R, 2015, PROCEEDINGS OF THE 2015 ACM SIGPLAN WORKSHOP ON PARTIAL EVALUATION AND PROGRAM MANIPULATION (PEPM'15), P127, DOI 10.1145/2678015.2682542
   Lhoták O, 2006, LECT NOTES COMPUT SC, V3923, P47
   Lhoták O, 2008, ACM T SOFTW ENG METH, V18, DOI 10.1145/1391984.1391987
   Lhotak Ondrej, 2006, THESIS
   Liang Donglin, 2005, ACM SIGSOFT SOFTWARE, P6, DOI 10.1145/1108792.1108797
   Liang Shuying, 2012, P 7 WORKSH PROGR LAN
   Maurer L, 2017, ACM SIGPLAN NOTICES, V52, P482, DOI [10.1145/3062341.3062380, 10.1145/3140587.3062380]
   Midtgaard J., 2009, 125 ROSK U COMP SCI
   Midtgaard J, 2012, ACM COMPUT SURV, V44, DOI 10.1145/2187671.2187672
   Might M., 2006, P 11 ACM SIGPLAN INT, P13, DOI DOI 10.1016/J.TCS.2006.12.031
   Might M, 2010, LECT NOTES COMPUT SC, V6337, P407, DOI 10.1007/978-3-642-15769-1_25
   Might M, 2010, PLDI '10: PROCEEDINGS OF THE 2010 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P305, DOI 10.1145/1806596.1806631
   Might M, 2009, LECT NOTES COMPUT SC, V5403, P260, DOI 10.1007/978-3-540-93900-9_22
   Milanova A, 2005, ACM T SOFTW ENG METH, V14, P1, DOI 10.1145/1044834.1044835
   Naik M, 2006, ACM SIGPLAN NOTICES, V41, P308, DOI 10.1145/1133981.1134018
   OXHOJ N, 1992, LECT NOTES COMPUT SC, V615, P329, DOI 10.1007/BFb0053045
   Palsberg J, 2001, J FUNCT PROGRAM, V11, P263, DOI 10.1017/S095679680100394X
   Plotkin G. D., 1981, A structural approach to operational semantics
   Racket Community, 2015, RACK PROGR LANG
   Sharir M., 1981, Program flow analysis. Theory and applications, P189
   Smaragdakis Y, 2011, P 38 ANN ACM SIGPLAN, DOI DOI 10.1145/1926385.1926390
   Tarski A., 1955, PAC J MATH, V5, P285, DOI DOI 10.2140/PJM.1955.5.285
   Van Horn D, 2010, ICFP 2010: PROCEEDINGS OF THE 2010 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P51
   Van Horn D, 2008, ICFP'08: PROCEEDINGS OF THE 2008 SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P275
   Vardoulakis D, 2010, LECT NOTES COMPUT SC, V6012, P570, DOI 10.1007/978-3-642-11957-6_30
   Verstoep H, 2015, PROCEEDINGS OF THE 2015 ACM SIGPLAN WORKSHOP ON PARTIAL EVALUATION AND PROGRAM MANIPULATION (PEPM'15), P139, DOI 10.1145/2678015.2682536
   Wright AK, 1998, ACM T PROGR LANG SYS, V20, P166, DOI 10.1145/271510.271523
NR 54
TC 2
Z9 2
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD AUG 1
PY 2018
VL 28
AR e18
DI 10.1017/S0956796818000138
PG 46
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GP1TB
UT WOS:000440598700001
DA 2024-07-18
ER

PT J
AU Zakian, TAK
   McDonell, TL
   Cimini, M
   Newton, RR
AF Zakian, Timothy A. K.
   McDonell, Trevor L.
   Cimini, Matteo
   Newton, Ryan R.
TI Ghostbuster: A tool for simplifying and converting GADTs
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB Generalized Algebraic Data Types, or simply GADTs, can encode non-trivial properties in the types of the constructors. Once such properties are encoded in a datatype, however, all code manipulating that datatype must provide proof that it maintains these properties in order to typecheck. In this paper, we take a step toward gradualizing these obligations. We introduce a tool, Ghostbuster, that produces simplified versions of GADTs which elide selected type parameters, thereby weakening the guarantees of the simplified datatype in exchange for reducing the obligations necessary to manipulate it. Like ornaments, these simplified datatypes preserve the recursive structure of the original, but unlike ornaments, we focus on information-preserving bidirectional transformations. Ghostbuster generates type-safe conversion functions between the original and simplified datatypes, which we prove are the identity function when composed. We evaluate a prototype tool for Haskell against thousands of GADTs found on the Hackage package database, generating simpler Haskell'98 datatypes and round-trip conversion functions between the two.
C1 [Zakian, Timothy A. K.] Univ Oxford, Dept Comp Sci, Oxford, England.
   [McDonell, Trevor L.] Univ New South Wales, Sch Comp Sci & Engn, Sydney, NSW, Australia.
   [Cimini, Matteo] Univ Massachusetts Lowell, Dept Comp Sci, Lowell, MA USA.
   [Newton, Ryan R.] Indiana Univ, Sch Informat Comp & Engn, Bloomington, IN USA.
C3 University of Oxford; University of New South Wales Sydney; University
   of Massachusetts System; University of Massachusetts Lowell; Indiana
   University System; Indiana University Bloomington
RP Zakian, TAK (corresponding author), Univ Oxford, Dept Comp Sci, Oxford, England.
EM timothy.zakian@cs.ox.ac.uk; tmcdonell@cse.unsw.edu.au;
   matteo_cimini@uml.edu; rrnewton@indiana.edu
OI McDonell, Trevor/0000-0001-7806-9751
FU NSF [1453508, 1337242]; Clarendon Fund; Division of Computing and
   Communication Foundations; Direct For Computer & Info Scie & Enginr
   [1337242, 1453508] Funding Source: National Science Foundation
FX This work was supported by NSF awards 1453508 and 1337242. Timothy
   Zakian was funded by the Clarendon Fund.
CR Abadi M., 1989, ACM T PROGR LANG SYS, P237
   Abadi Martin, 1995, J FUNCT PROGRAM, V5, P111
   Altenkirch T, 1999, LECT NOTES COMPUT SC, V1683, P453
   Appel A., 2007, COMPILING CONTINUATI
   Appel A. W., 1997, JFP, V7, P515
   Baars AI, 2002, ACM SIGPLAN NOTICES, V37, P157, DOI 10.1145/583852.581494
   Benton N., 2005, SHRINKING REDUCTIONS, P142
   Bernardy JP, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158093
   Brady E, 2004, ANN NY ACAD SCI, V3085, P115
   Casinghino C, 2014, ACM SIGPLAN NOTICES, V49, P33, DOI 10.1145/2535838.2535883
   Chakravarty M. M., 2011, P 6 WORKSH DECL ASP, P3, DOI DOI 10.1145/1926354.1926358
   Chakravarty MMT, 2005, ACM SIGPLAN NOTICES, V40, P241, DOI 10.1145/1090189.1086397
   Cheney J., 2002, P 2002 ACM SIGPLAN W, P90, DOI DOI 10.1145/581690.581698
   Dagand PE, 2016, ACM SIGPLAN NOTICES, V51, P298, DOI 10.1145/3022670.2951933
   Dagand PE, 2012, ACM SIGPLAN NOTICES, V47, P103, DOI 10.1145/2398856.2364544
   Findler RB, 2002, ACM SIGPLAN NOTICES, V37, P48, DOI 10.1145/583852.581484
   Hall CV, 1996, ACM T PROGR LANG SYS, V18, P109, DOI 10.1145/227699.227700
   HENGLEIN F, 1994, SCI COMPUT PROGRAM, V22, P197, DOI 10.1016/0167-6423(94)00004-2
   Hinze Ralf, 2003, TR20031901 CORN U
   Knuth D. E., 1968, Mathematical Systems Theory, V2, P127, DOI 10.1007/BF01692511
   Ko H.-S., 2013, P ACM SIGPLAN WORKSH, P37, DOI [10.1145/2502409.2502413, DOI 10.1145/2502409.2502413]
   LEROY X, 1991, LECT NOTES COMPUT SC, V523, P406
   McBride Conor, 2010, ORNAMENTAL ALGEBRAS
   McBride Conor, 2005, TYPE PRESERVING RENA
   McDonell TL, 2016, ACM SIGPLAN NOTICES, V51, P338, DOI 10.1145/3022670.2951914
   McDonell TL, 2015, ACM SIGPLAN NOTICES, V50, P201, DOI 10.1145/2804302.2804313
   McDonell TL, 2013, ACM SIGPLAN NOTICES, V48, P49, DOI [10.1145/2544174.2500595, 10.1145/2500365.2500595]
   Ou XM, 2004, INT FED INFO PROC, V155, P437
   PETERSON J, 1993, SIGPLAN NOTICES, V28, P227, DOI 10.1145/173262.155112
   Peyton Jones S., 2016, REFLECTION TYPES, P292
   Schrijvers T, 2009, ICFP'09: PROCEEDINGS OF THE 2009 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P341
   Schrijvers T, 2008, ICFP'08: PROCEEDINGS OF THE 2008 SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P51
   Sheard T., 2002, ACM SIGPLAN HASK WOR, V02, P1, DOI DOI 10.1145/581690.581691
   Shields M., 1998, Conference Record of POPL '98: 25th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P289, DOI 10.1145/268946.268970
   Siek Jeremy, 2006, WORKSHOP SCHEME FUNC, P81
   Simonet V, 2007, ACM T PROGR LANG SYS, V29, DOI 10.1145/1180475.1180476
   Somogyi Z., 1995, Australian Computer Science Communications, V17, P499
   Sulzmann M., 2004, TECHNICAL REPORT
   Syme D., 2013, P DDFP, P1
   Tobin-Hochstadt S, 2010, ICFP 2010: PROCEEDINGS OF THE 2010 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P117
   Tobin-Hochstadt Sam, 2006, DLS, P964, DOI [10.1145/1176617.1176755, DOI 10.1145/1176617.1176755]
   Vytiniotis D, 2012, ACM SIGPLAN NOTICES, V47, P341, DOI 10.1145/2398856.2364554
   Wadler P, 2009, LECT NOTES COMPUT SC, V5502, P1, DOI 10.1007/978-3-642-00590-9_1
   Weirich S, 2000, ACM SIGPLAN NOTICES, V35, P58, DOI 10.1145/357766.351246
   Williams Thomas., 2014, Proceedings of the 10th ACM SIGPLAN workshop on Generic programming, P15, DOI [10.1145/2633628.2633631, DOI 10.1145/2633628.2633631]
NR 45
TC 0
Z9 0
U1 0
U2 2
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD JUN 22
PY 2018
VL 28
AR e16
DI 10.1017/S0956796818000114
PG 50
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GL1NN
UT WOS:000436870000001
DA 2024-07-18
ER

PT J
AU Downen, P
   Ariola, ZM
AF Downen, Paul
   Ariola, Zena M.
TI A tutorial on computational classical logic and the sequent calculus
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID DUALITY
AB We present a model of computation that heavily emphasizes the concept of duality and the interaction between opposites-production interacts with consumption. The symmetry of this framework naturally explains more complicated features of programming languages through relatively familiar concepts. For example, binding a value to a variable is dual to manipulating the flow of control in a program. By looking at the computational interpretation of the sequent calculus, we find a language that lets us speak about duality, control flow, and evaluation order in programs as first-class concepts.
   We begin by reviewing Gentzen's LK sequent calculus and show how the Curry-Howard isomorphism still applies to give us a different basis for expressing computation. We then illustrate how the fundamental dilemma of computation in the sequent calculus gives rise to a duality between evaluation strategies: strict languages are dual to lazy languages. Finally, we discuss how the concept of focusing, developed in the setting of proof search, is related to the idea of type safety for computation expressed in the sequent calculus. In this regard, we compare and contrast two different methods of focusing that have appeared in the literature, static and dynamic focusing, and illustrate how they are two means to the same end.
C1 [Downen, Paul; Ariola, Zena M.] Univ Oregon, Eugene, OR 97403 USA.
C3 University of Oregon
RP Downen, P (corresponding author), Univ Oregon, Eugene, OR 97403 USA.
EM pdownen@cs.uoregon.edu; ariola@cs.uoregon.edu
OI Downen, Paul/0000-0003-0165-9387
FU National Science Foundation [CCF-1423617, CCF-1719158]; Direct For
   Computer & Info Scie & Enginr; Division of Computing and Communication
   Foundations [1423617] Funding Source: National Science Foundation
FX We would like to thank Luke Maurer, Philip Johnson-Freyd, Matthias
   Felleisen, and the anonymous reviewers for their thorough and helpful
   feedback for improving this paper. This work has been supported by the
   National Science Foundation under Grant no. CCF-1423617 and Grant no.
   CCF-1719158.
CR Abelson H., 1998, Higher Order Symbolic Computation, V11, P7, DOI 10.1023/A:1010051815785
   Andreoli J. M., 1992, Journal of Logic and Computation, V2, P297, DOI 10.1093/logcom/2.3.297
   [Anonymous], 2002, THESIS
   [Anonymous], 1980, To H. B. Curry: Essays on Combinatory Logic, -calculus and Formalism
   [Anonymous], 1992, Compiling with Continuations
   [Anonymous], 2005, THESIS
   [Anonymous], THESIS
   Ariola Z. M., 1995, Conference Record of POPL'95: 22nd ACM SIGPLAN-SIGACT Symposium Principles of Programming Languages, P233, DOI 10.1145/199448.199507
   Ariola ZM, 2011, LECT NOTES COMPUT SC, V6690, P27, DOI 10.1007/978-3-642-21691-6_6
   Ariola ZM, 2009, ACM T PROGR LANG SYS, V31, DOI 10.1145/1516507.1516508
   Ariola ZM, 2003, LECT NOTES COMPUT SC, V2719, P871
   Church A, 1932, ANN MATH, V33, P346, DOI 10.2307/1968337
   Curien PL, 2010, IFIP ADV INF COMM TE, V323, P165
   Curien PL, 2000, ACM SIGPLAN NOTICES, V35, P233, DOI 10.1145/357766.351262
   Curry H.B., 1958, Combinatory logic, V1
   CYTRON R, 1991, ACM T PROGR LANG SYS, V13, P451, DOI 10.1145/115372.115320
   de Bruijn N., 1968, 66WSK05 TU EINDH
   Downen P, 2016, ACM SIGPLAN NOTICES, V51, P74, DOI 10.1145/3022670.2951931
   Downen P, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P127, DOI 10.1145/2784731.2784762
   Downen P, 2014, LECT NOTES COMPUT SC, V8410, P249
   Emmanuel P., 2004, THESIS
   FELLEISEN M, 1992, THEOR COMPUT SCI, V103, P235, DOI 10.1016/0304-3975(92)90014-7
   Felleisen Matthias, 1986, P IFIP TC 2WG22 WORK
   Filinski A., 1989, THESIS
   Gentzen G, 1935, MATH Z, V39, P405, DOI 10.1007/BF01201363
   Gentzen G, 1935, MATH Z, V39, P176, DOI 10.1007/BF01201353
   Girard J.-Y., 2001, Mathematical Structures in Computer Science, V11, P301, DOI 10.1017/S096012950100336X
   Girard J.-Y., 1989, Cambridge Tracts in Theoretical Computer Science, V7
   Girard Jean-Yves, 1991, Mathematical Structures in Computer Science, V1, P255, DOI 10.1017/S0960129500001328
   GIRARD JY, 1993, ANN PURE APPL LOGIC, V59, P201, DOI 10.1016/0168-0072(93)90093-S
   GIRARD JY, 1987, THEOR COMPUT SCI, V50, P1, DOI 10.1016/0304-3975(87)90045-4
   Graham-Lengrand S., 2016, LECT NOTES MPRI COUR
   Griffin T., 1990, P 17 ANN ACM S PRINC, DOI 10.1145/96709.96714
   Kennedy A, 2007, ICFP'07 PROCEEDINGS OF THE 2007 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P177
   Krivine Jean-Louis, 2007, Higher-Order and Symbolic Computation, V20, P199, DOI 10.1007/S10990-007-9018-9
   Munch-Maccagnoni G, 2015, IEEE S LOG, P127, DOI 10.1109/LICS.2015.22
   Munch-Maccagnoni G, 2009, LECT NOTES COMPUT SC, V5771, P409, DOI 10.1007/978-3-642-04027-6_30
   Ohori A, 2003, LECT NOTES COMPUT SC, V2618, P399
   Ohori A, 1999, LECT NOTES COMPUT SC, V1722, P300
   PARIGOT M, 1992, LECT NOTES ARTIF INT, V624, P190, DOI 10.1007/BFb0013061
   Pfenning F., 2010, LECT NOTES C MELLON, V8
   Pfenning F., 2010, LECT NOTES OREGON PR, P4
   Reynolds J. C., 1983, Information Processing 83. Proceedings of the IFIP 9th World Computer Congress, P513
   Reynolds J. C., 1998, Higher-Order and Symbolic Computation, V11, P363, DOI 10.1023/A:1010027404223
   Reynolds J. C., 1993, LISP and Symbolic Computation, V6, P233, DOI 10.1007/BF01019459
   Scherer G., 2016, THESIS
   Selinger P., 2001, Mathematical Structures in Computer Science, V11, P207, DOI 10.1017/S096012950000311X
   SELINGER P, 2003, SOME REMARKS CONTROL
   Singh S., 2011, SEXY TYPES ARE WE DO
   Tolmach A., 2001, HASK WORKSH 2001
   Wadler P, 2005, LECT NOTES COMPUT SC, V3467, P185
   Wadler P, 2003, ACM SIGPLAN NOTICES, V38, P189, DOI 10.1145/944746.944723
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
   Zeilberger N., 2013, LECT NOTES SUMMER SC
   Zeilberger  Noam, 2009, THESIS
NR 55
TC 4
Z9 4
U1 0
U2 2
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD FEB 1
PY 2018
VL 28
AR e3
DI 10.1017/S0956796818000023
PG 64
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA FY6LR
UT WOS:000426959500001
DA 2024-07-18
ER

PT J
AU Hou, KB
   Benton, N
   Harper, R
AF Hou (Favonia), Kuen-Bang
   Benton, Nick
   Harper, Robert
TI Correctness of compiling polymorphism to dynamic typing
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID SYNTACTIC LOGICAL RELATIONS; RECURSIVE TYPES
AB The connection between polymorphic and dynamic typing was originally considered by Curry et al. (1972, Combinatory Logic, vol. ii) in the form of "polymorphic type assignment" for untyped lambda-terms. Types are assigned after the fact to what is, in modern terminology, a dynamic language. Interest in type assignment was revitalized by the proposals of Bracha et al. (1998, OOPSLA) and Bank et al. (1997, POPL) to enrich Java with polymorphism (generics), which in turn sparked the development of other languages, such as Scala, with similar combinations of features. In such a setting, where the target language already has a monomorphic type system, it is desirable to compile polymorphism to dynamic typing in such a way that as much static typing as possible is preserved, relying on dynamics only insofar as genericity is actually required. The basic approach is to compile polymorphism using embeddings from each type into a universal "top" type, ID, and partial projections that go in the other direction. This scheme is intuitively reasonable, and, indeed, has been used in practice many times. Proving its correctness, however, is non-trivial. This paper studies the compilation of System F to an extension of Moggi's computational meta-language with a dynamic type and shows how the compilation may be proved correct using a logical relation.
C1 [Hou (Favonia), Kuen-Bang; Harper, Robert] Carnegie Mellon Univ, Pittsburgh, PA 15213 USA.
   [Benton, Nick] Microsoft Res Cambridge, Cambridge, Cambs, England.
C3 Carnegie Mellon University; Microsoft
RP Hou, KB (corresponding author), Carnegie Mellon Univ, Pittsburgh, PA 15213 USA.
EM favonia@cs.cmu.edu; nick@microsoft.com; rwh@cs.cmu.edu
RI Harper, Robert/HLH-3752-2023
OI Harper, Robert/0000-0002-9400-2941; Hou, Kuen-Bang/0000-0002-2310-3673
FU National Science Foundation [1116703]; Direct For Computer & Info Scie &
   Enginr; Division of Computing and Communication Foundations [1116703]
   Funding Source: National Science Foundation
FX This research is sponsored in part by the National Science Foundation
   under Grant Number 1116703. Any opinions, findings, and conclusions or
   recommendations expressed in this material are those of the author(s)
   and do not necessarily reflect the views of the National Science
   Foundation.
CR Ahmed A, 2006, LECT NOTES COMPUT SC, V3924, P69
   Ahmed A, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P201, DOI 10.1145/1926385.1926409
   Amadio R., 1993, LNCS, V711, P222
   [Anonymous], 1972, Ph. D. Dissertation
   Appel AW, 2001, ACM T PROGR LANG SYS, V23, P657, DOI 10.1145/504709.504712
   Benton N, 2005, J FUNCT PROGRAM, V15, P503, DOI 10.1017/S0956796804005398
   Benton Nick, 2010, TECHNICAL REPORT
   Bracha G, 1998, ACM SIGPLAN NOTICES, V33, P183, DOI 10.1145/286942.286957
   Crary K, 2007, ELECTRON NOTES THEOR, V172, P259, DOI 10.1016/j.entcs.2007.02.010
   Curry Haskell B., 1972, STUDIES LOGIC FDN MA, V65
   Findler RB, 2002, ACM SIGPLAN NOTICES, V37, P48, DOI 10.1145/583852.581484
   Harper Robert, 2012, Practical Foundations for Programming Languages, DOI DOI 10.1017/CBO9781139342131
   Hur CK, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P133, DOI 10.1145/1926385.1926402
   Igarashi A, 2001, ACM T PROGR LANG SYS, V23, P396, DOI 10.1145/503502.503505
   McCracken N., 1979, THESIS
   Meyer A. R., 1985, Logics of Programs. Proceedings, P219
   MILNER R, 1978, J COMPUT SYST SCI, V17, P348, DOI 10.1016/0022-0000(78)90014-4
   Minamide Y., 1996, Conference Record of POPL '96: The 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P271, DOI 10.1145/237721.237791
   MOGGI E, 1991, INFORM COMPUT, V93, P55, DOI 10.1016/0890-5401(91)90052-4
   Myers A. C., 1997, Conference Record of POPL '97: The 24th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P132
   Odersky M., 2008, P OOPSLA 08, P423
   Pitts AM, 1996, INFORM COMPUT, V127, P66, DOI 10.1006/inco.1996.0052
   Plotkin G. D., 1977, Theoretical Computer Science, V5, P223, DOI 10.1016/0304-3975(77)90044-5
   Ramsey N, 2011, J FUNCT PROGRAM, V21, P585, DOI 10.1017/S0956796811000219
   Reynolds J. C., 1983, Information Processing 83. Proceedings of the IFIP 9th World Computer Congress, P513
   Reynolds J. C., 1974, Programming Symposium, P408
   Rossberg A, 2010, TLDI '10: PROCEEDINGS OF THE 2010 ACM SIGPLAN WORKSHOP ON TYPES IN LANGUAGE DESIGN AND IMPLEMENTATION, P89
   Scott D., 1976, SIAM Journal on Computing, V5, P522, DOI 10.1137/0205037
NR 28
TC 4
Z9 4
U1 1
U2 1
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PY 2017
VL 27
BP 1
EP 24
AR e1
DI 10.1017/S0956796816000265
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA EM7ZQ
UT WOS:000395531300001
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Stefan, D
   Mazières, D
   Mitchell, JC
   Russo, A
AF Stefan, Deian
   Mazieres, David
   Mitchell, John C.
   Russo, Alejandro
TI Flexible dynamic information flow control in the presence of exceptions
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID SECURITY; ARROWS; MODEL
AB We describe a language-based, dynamic information flow control (IFC) system called LIO. Our system presents a new design point for IFC, influenced by the challenge of implementing IFC as a Haskell library, as opposed to the more typical approach of modifying the language runtime system. In particular, we take a coarse-grained, floating-label approach, previously used by IFC Operating Systems, and associate a single, mutable label-the current label-with all the data in a computation's context. This label is always raised to reflect the reading of sensitive information and it is used to restrict the underlying computation's effects. To preserve the flexibility of fine-grained systems, LIO also provides programmers with a means for associating an explicit label with a piece of data. Interestingly, these labeled values can be used to encapsulate the results of sensitive computations which would otherwise lead to the creeping of the current label. Unlike other language-based systems, LIO also bounds the current label with a current clearance, providing a form of discretionary access control that LIO programs can use to deal with covert channels. Moreover, LIO provides programmers with mutable references and exceptions. The latter, exceptions, are used in LIO to encode and recover from monitor failures, all while preserving data confidentiality and integrity-this addresses a longstanding concern that dynamic IFC is inherently prone to information leakage due to monitor failure.
C1 [Stefan, Deian] Univ Calif San Diego, La Jolla, CA 92093 USA.
   [Mazieres, David; Mitchell, John C.] Stanford Univ, Stanford, CA 94305 USA.
   [Russo, Alejandro] Chalmers, Gothenburg, Sweden.
C3 University of California System; University of California San Diego;
   Stanford University; Chalmers University of Technology
RP Stefan, D (corresponding author), Univ Calif San Diego, La Jolla, CA 92093 USA.
EM deian@cs.ucsd.edu; mitchell@cs.stanford.edu; russo@chalmers.se
RI Mitchell, John/AAH-9095-2019
OI Russo, Alejandro/0000-0002-4338-6316; Mitchell, John/0000-0002-0024-860X
FU DARPA CRASH [N66001-10-2-4088]; Swedish research agencies VR; Barbro
   Oshers Pro Suecia Foundation; DoD through the NDSEG Fellowship Program
FX This work was funded by DARPA CRASH under contract N66001-10-2-4088, by
   multiple gifts from Google, by a gift from The Mozilla Corporation, and
   by the Swedish research agencies VR and the Barbro Oshers Pro Suecia
   Foundation. Deian Stefan was supported by the DoD through the NDSEG
   Fellowship Program.
CR Abadi M., 1999, P S PRINC PROGR PANG
   Agat J., 2000, P S PRINC PROGR LANG
   [Anonymous], 2002, THESIS
   Askarov A., 2008, P EUR S RES COMP SEC
   Askarov A., 2009, P PROGR LANG AN SEC
   Askarov A., 2009, P COMP SEC FDN S
   Atkey R, 2009, J FUNCT PROGRAM, V19, P335, DOI 10.1017/S095679680900728X
   Austin T. H., 2009, P WORKSH PROGR LANG
   Austin T. H., 2010, P WORKSH PROGR LANG
   Bell D., 1976, MTR2997
   Biba K. J., 1977, ESDTR76372 MITRE COR
   Buiras P., 2014, P COMP SEC FDN S
   Crary K, 2005, J FUNCT PROGRAM, V15, P249, DOI 10.1017/S0956796804005441
   DENNING DE, 1976, COMMUN ACM, V19, P236, DOI 10.1145/360051.360056
   DENNING DE, 1977, COMMUN ACM, V20, P504, DOI 10.1145/359636.359712
   *DEP DEF, 1985, TRUST COMP SYST EV C
   Devriese D., 2011, P WORKSH TYP LANG DE
   Efstathopoulos P., 2005, P S OP SYST PRINC
   Friedman D. P., 1976, P INT C PAR PROC IND
   Giffin D. B., 2012, P S OP SYST DES IMPL
   Goguen J. A., 1982, P S SEC PRIV
   Harrison W. L., 2005, P COMP SEC FDN WORKS
   Hedin D., 2012, P COMP SEC FDN S
   Hedin D., 2006, P COMP SEC FDN WORKS
   Heintze N., 1998, P S PRINC PROGR LANG
   Heule S., 2015, P C PRINC SEC TRUST
   Hritcu C., 2013, P S SEC PRIV
   Hughes J, 2000, SCI COMPUT PROGRAM, V37, P67, DOI 10.1016/S0167-6423(99)00023-4
   Krohn M., 2007, P S OP SYST PRINC
   LAMPSON BW, 1973, COMMUN ACM, V16, P613, DOI 10.1145/362375.362389
   Landwehr Carl E., 1981, ACM COMPUT SURV, V13, P247
   Li P., 2006, P COMP SEC FDN WORKS
   Li P, 2010, THEOR COMPUT SCI, V411, P1974, DOI 10.1016/j.tcs.2010.01.025
   Liang S., 1995, P S PRINC PROGR LANG
   Miller M. J., 2006, THESIS
   Morgenstern J., 2010, P INT C FUNCT PROGR
   Myers A. C., 1997, P S OP SYST PRINC
   Myers AC, 2000, ACM T SOFTW ENG METH, V9, P410, DOI 10.1145/363516.363526
   Myers Andrew C, 2001, Jif: Java information flow. Software release
   Peyton Jones S., 2001, ENG THEORIES SOFTWAR
   Pottier F., 2002, P S PRINC PROGR LANG
   Rondon PM, 2008, ACM SIGPLAN NOTICES, V43, P159, DOI 10.1145/1379022.1375602
   Roy I., 2009, P 30 ACM SIGPLAN C P
   Russo A., 2010, P COMP SEC FDN S
   Russo A., 2008, P S HASK
   Sabelfeld A, 2003, IEEE J SEL AREA COMM, V21, P5, DOI 10.1109/JSAC.2002.806121
   Sabelfeld A., 2009, P C PERSP SYST INF
   SALTZER JH, 1975, P IEEE, V63, P1278, DOI 10.1109/PROC.1975.9939
   Simonet V., 2003, The Flow Caml system
   Stefan D., 2012, ARXIV12071457
   Stefan D., 2011, P S HASK
   Stefan D., 2011, P NORD C SEC IT SYST
   Stefan D., 2012, P INT C FUNCT PROGR
   Stoughton A., 1981, P S SEC PRIV
   Sulzmann M, 2007, J FUNCT PROGRAM, V17, P83, DOI 10.1017/S0956796806006137
   Terei D., 2012, P S HASK
   Tsai T., 2007, P COMP SEC FDN S
   Tse S., 2004, P 9 ACM SIGPL INT C
   Vandebogart S, 2007, ACM T COMPUT SYST, V25, DOI 10.1145/1314299.1314302
   Waye L., 2015, P SEC TRUST MAN 11 I, P203
   Winskel G., 1993, The Formal Semantics of Programming Languages
   Zdancewic S., 2003, P COMP SEC FDN WORKS
   Zdancewic S., 2001, CSFW 01 P 14 IEEE WO, P15
   Zeldovich N., 2006, P S OP SYST DES IMPL
NR 64
TC 13
Z9 17
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PY 2017
VL 27
AR e5
DI 10.1017/S0956796816000241
PG 56
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA EK5RT
UT WOS:000393984200001
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Breitner, J
   Eisenberg, RA
   Jones, SP
   Weirich, S
AF Breitner, Joachim
   Eisenberg, Richard A.
   Jones, Simon Peyton
   Weirich, Stephanie
TI Safe zero-cost coercions for Haskell
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB Generative type abstractions - present in Haskell, OCaml, and other languages - are useful concepts to help prevent programmer errors. They serve to create new types that are distinct at compile time but share a run-time representation with some base type. We present a new mechanism that allows for zero-cost conversions between generative type abstractions and their representations, even when such types are deeply nested. We prove type safety in the presence of these conversions and have implemented our work in GHC.
C1 [Breitner, Joachim] Karlsruhe Inst Technol, Karlsruhe, Germany.
   [Eisenberg, Richard A.; Weirich, Stephanie] Univ Penn, Philadelphia, PA 19104 USA.
   [Jones, Simon Peyton] Microsoft Res, Cambridge, England.
C3 Helmholtz Association; Karlsruhe Institute of Technology; University of
   Pennsylvania; Microsoft
RP Breitner, J (corresponding author), Karlsruhe Inst Technol, Karlsruhe, Germany.
EM breitner@kit.edu; eir@cis.upenn.edu; simonpj@microsoft.com;
   sweirich@cis.upenn.edu
OI Weirich, Stephanie/0000-0002-6756-9168; Eisenberg,
   Richard/0000-0002-7669-9781
FU National Science Foundation [CCF-1116620, CCF-1319880]; Deutsche Telekom
   Stiftung; Microsoft Research PhD Fellowship; Direct For Computer & Info
   Scie & Enginr; Division of Computing and Communication Foundations
   [1319880] Funding Source: National Science Foundation
FX Thanks to Antal Spector-Zabusky for contributing to this version of FC;
   and to Edward Kmett and Dimitrios Vytiniotis for discussion and
   feedback. This material is based upon work supported by the National
   Science Foundation under grant nos. CCF-1116620 and CCF-1319880. The
   first author was supported by the Deutsche Telekom Stiftung and the
   second author was supported by a Microsoft Research PhD Fellowship. This
   paper is typeset with the help of ott (Sewell et al., 2010).
CR [Anonymous], 2012, P 8 ACM SIGPLAN WORK, DOI [10.1145/2103786.2103795, DOI 10.1145/2103786.2103795]
   [Anonymous], 1997, The Definition of Standard ML
   [Anonymous], 2005, Advanced Topics in Types and Programming Languages
   Breitner J., 2014, MSCIS1407 U PENNS
   Breitner J, 2014, ICFP'14: PROCEEDINGS OF THE 2014 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P189, DOI 10.1145/2628136.2628141
   Chakravarty MMT, 2005, ACM SIGPLAN NOTICES, V40, P241, DOI 10.1145/1090189.1086397
   Chakravarty MMT, 2005, ACM SIGPLAN NOTICES, V40, P1, DOI 10.1145/1047659.1040306
   Crary K, 2000, ACM SIGPLAN NOTICES, V35, P68, DOI 10.1145/357766.351247
   Cretin J, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P361
   Eisenberg RA, 2014, ACM SIGPLAN NOTICES, V49, P671, DOI 10.1145/2535838.2535856
   Garrigue J., 2013, VARIANCE INJECTIVITY
   Hall CV, 1996, ACM T PROGR LANG SYS, V18, P109, DOI 10.1145/227699.227700
   HINZE R, 2001, ELECT NOTES THEORETI, V41, P5, DOI DOI 10.1016/S1571-0661(05)80542-0
   Hinze Ralf, 2003, TR20031901 CORN U
   Jones S.P., 2001, HASK WORKSH, V1, P203
   Marlow Simon, 2010, Haskell 2010 language report
   Rémy D, 2010, LECT NOTES COMPUT SC, V6009, P24, DOI 10.1007/978-3-642-12251-4_4
   Rodriguez A., 2008, HASK S ACM
   Scherer G., 2013, LNCS, V7792
   Sewell P, 2010, J FUNCT PROGRAM, V20, P71, DOI 10.1017/S0956796809990293
   Sheard T, 2002, ACM SIGPLAN NOTICES, V37, P60, DOI 10.1145/636517.636528
   Sulzmann M, 2007, PROCEEDINGS OF THE TLDI 2007: 2007 ACM SIGPLAN INTERNATIONAL WORKSHOP ON TYPES IN LANGUAGES DESIGN AND IMPLEMENTATION, P53, DOI 10.1145/1190315.1190324
   Terei D., 2012, HASK S ACM
   Vytiniotis D, 2011, J FUNCT PROGRAM, V21, P333, DOI 10.1017/S0956796811000098
   Weirich S, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P227, DOI 10.1145/1926385.1926411
NR 25
TC 10
Z9 10
U1 0
U2 2
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PY 2016
VL 26
BP 1
EP 79
DI 10.1017/S0956796816000150
PG 79
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DV3VY
UT WOS:000382853800001
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Grygiel, K
   Lescanne, P
AF Grygiel, Katarzyna
   Lescanne, Pierre
TI Counting and generating lambda terms
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB Lambda calculus is the basis of functional programming and higher order proof assistants. However, little is known about combinatorial properties of lambda terms, in particular, about their asymptotic distribution and random generation. This paper tries to answer questions like: How many terms of a given size are there? What is a 'typical' structure of a simply typable term? Despite their ostensible simplicity, these questions still remain unanswered, whereas solutions to such problems are essential for testing compilers and optimizing programs whose expected efficiency depends on the size of terms. Our approach toward the aforementioned problems may be later extended to any language with bound variables, i.e., with scopes and declarations. This paper presents two complementary approaches: one, theoretical, uses complex analysis and generating functions, the other, experimental, is based on a generator of lambda terms. Thanks to de Bruijn indices (de Bruijn, N. (1972) Lambda calculus notation with nameless dummies, a tool for automatic formula manipulation, with application to the Church-Rosser theorem. Indagat. Math. 34(5), 381-392), we provide three families of formulas for the number of closed lambda terms of a given size and we give four relations between these numbers which have interesting combinatorial interpretations. As a by-product of the counting formulas, we design an algorithm for generating lambda-terms. Performed tests provide us with experimental data, like the average depth of bound variables and the average number of head lambdas. We also create random generators for various sorts of terms. Thereafter, we conduct experiments that answer questions like: What is the ratio of simply typable terms among all terms? (Very small!) How are simply typable lambda terms distributed among all lambda terms? (A typable term almost always starts with an abstraction.) In this paper, abstractions and applications have size 1 and variables have size 0.
C1 [Grygiel, Katarzyna; Lescanne, Pierre] Jagiellonian Univ, Fac Math & Comp Sci, Theoret Comp Sci Dept, PL-30348 Krakow, Poland.
   [Lescanne, Pierre] Univ Lyon, ENS Lyon, LIP, CNRS,UMR 5668,UCBL,INRIA, F-69364 Lyon, France.
C3 Jagiellonian University; Centre National de la Recherche Scientifique
   (CNRS); Inria; Ecole Normale Superieure de Lyon (ENS de LYON)
RP Grygiel, K (corresponding author), Jagiellonian Univ, Fac Math & Comp Sci, Theoret Comp Sci Dept, Ul Prof Lojasiewicza 6, PL-30348 Krakow, Poland.
EM grygiel@tcs.uj.edu.pl; pierre.lescanne@ens-lyon.fr
RI Grygiel, Katarzyna/U-4549-2018
FU National Science Center of Poland [2011/01/B/HS1/00944]; European Union
FX Clearly, Nikolaas de Bruijn and Philippe Flajolet were influential all
   along this research. We would like to thank Marek Zaionc for stimulating
   discussions and for setting the problem of counting lambda-terms, Bruno
   Salvy for his help in the proof of Proposition 8, Olivier Bodini, Jonas
   Duregard, Daniele Gardy, Bernhard Gittenberger, Patrik Jansson, Jakub
   Kozik, John Tromp and the referees of this paper for their useful
   suggestions and interactions. This work was supported by the National
   Science Center of Poland, grant number 2011/01/B/HS1/00944, when the
   author held a post-doc position at the Jagiellonian University within
   the SET project co-financed by the European Union.
CR Abadi M., 1991, Journal of Functional Programming, V1, P375, DOI 10.1017/S0956796800000186
   [Anonymous], 2012, Sage for power users
   [Anonymous], 1972, INDAGATIONES MATHEMA, DOI DOI 10.1016/1385-7258(72)90034-0
   Bodini O., 2011, P 8 WORKSH AN ALG CO, P23, DOI DOI 10.1137/1.9781611973013.3
   Curien P.-L., 2005, INTRO LINEAR LOGIC 1
   Damas L., 1982, C REC 9 ANN ACM S PR, P207, DOI DOI 10.1145/582153.582176
   David R, 2013, LOG METH COMPUT SCI, V9, DOI 10.2168/LMCS-9(1:02)2013
   DUREGARD J, 2012, P 5 ACM SIGPLAN S HA, V47, P61
   Flajolet Philippe, 2008, Analytic Combinatorics
   GALLIER JH, 1989, THEOR COMPUT SCI, V67, P203, DOI 10.1016/0304-3975(89)90004-2
   Graham RL., 1989, Concrete Mathematics
   Hindley JR, 2008, J LOGIC COMPUT, V18, P229, DOI 10.1093/logcom/exm001
   Jouannaud Jean-Pierre., 1991, COMPUTATIONAL LOGIC, P257
   Kennedy AJ, 2012, J FUNCT PROGRAM, V22, P529, DOI 10.1017/S0956796812000263
   Knuth D. E., 2006, The Art of Computer Programming, Volume 4, Fascicle 4: Generating All TreesHistory of Combinatorial Generation, V4
   Lang W, 2002, FIBONACCI QUART, V40, P299
   Lescanne P., 1994, P 21 ANN ACM S PRINC, P60
   Lescanne P, 2013, THEOR COMPUT SCI, V474, P80, DOI 10.1016/j.tcs.2012.11.019
   Li M., 1997, INTRO KOLMOGOROV COM
   Newman MHA, 1943, P CAMB PHILOS SOC, V39, P69
   Palka M., 2012, TECHNICAL REPORT
   Palka Michal H, 2011, P 6 INT WORKSH AUT S, P91, DOI DOI 10.1145/1982595.1982615
   The On-Line Encyclopedia of Integer Sequences (OEIS)&REG; Wiki, 2013, RANK UNR FUNCT
   Tromp J., 2006, DAGSTUHL SEMINAR P, V06051
   Wang J., 2004, THESIS WELLESLEY COL
   Wang Jue., 2005, GENERATING RANDOM LA
   Yakushev AR, 2010, LECT NOTES COMPUT SC, V5812, P93
   Yang XJ, 2011, ACM SIGPLAN NOTICES, V46, P283, DOI 10.1145/1993316.1993532
NR 28
TC 29
Z9 33
U1 0
U2 2
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD SEP
PY 2013
VL 23
IS 5
BP 594
EP 628
DI 10.1017/S0956796813000178
PG 35
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 250WQ
UT WOS:000326887800003
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Pitts, AM
AF Pitts, Andrew M.
TI Structural recursion with locally scoped names
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB This paper introduces a new recursion principle for inductively defined data modulo alpha-equivalence of bound names that makes use of Odersky-style local names when recursing over bound names. It is formulated in simply typed lambda-calculus extended with names that can be restricted to a lexical scope, tested for equality, explicitly swapped and abstracted. The new recursion principle is motivated by the nominal sets notion of 'alpha-structural recursion', whose use of names and associated freshness side-conditions in recursive definitions formalizes common practice with binders. The new calculus has a simple interpretation in nominal sets equipped with name-restriction operations. It is shown to adequately represent alpha-structural recursion while avoiding the need to verify freshness side-conditions in definitions and computations. The paper is a revised and expanded version of Pitts (Nominal System T. In Proceedings of the 37th ACM SIGACT-SIGPLAN Symposium on Principles of Programming Languages, POPL 2010 (Madrid, Spain). ACM Press, pp. 159-170, 2010).
C1 Univ Cambridge, Comp Lab, Cambridge CB3 0FD, England.
C3 University of Cambridge
RP Pitts, AM (corresponding author), Univ Cambridge, Comp Lab, Cambridge CB3 0FD, England.
EM Andrew.Pitts@cl.cam.ac.uk
OI Pitts, Andrew Mawdesley/0000-0001-7775-3471
FU UK EPSRC [EP/D000459/1]
FX Research partially supported by UK EPSRC grant EP/D000459/1.
CR Altenkirch T, 2009, J FUNCT PROGRAM, V19, P311, DOI 10.1017/S0956796809007278
   [Anonymous], THESIS U CAMBRIDGE
   [Anonymous], 1984, The Lambda Calculus: Its Syntax and Semantics
   [Anonymous], 1992, MATH STRUCT COMP SCI, V2, P119, DOI DOI 10.1017/S0960129500001407
   Cardelli L, 2001, LECT NOTES COMPUT SC, V2044, P46
   CHENEY J, 2005, ACM SIGACT NEWS LOGI, V36, P47
   Cheney J, 2009, ELECTRON NOTES THEOR, V228, P37, DOI 10.1016/j.entcs.2008.12.115
   Coquand Thierry., 1991, Logical Frameworks, P255, DOI DOI 10.1017/CBO9780511569807.011
   CRARY K, 2006, ACM SIGACT NEWS LOGI, V37, P93
   Fernandez M., 2005, P 7 INT C PRINC PRAC, P47
   Fiore M., 1999, Proceedings. 14th Symposium on Logic in Computer Science (Cat. No. PR00158), P193, DOI 10.1109/LICS.1999.782615
   FRIEDMAN H, 1975, LECT NOTES MATH, V453, P22
   Gabbay M. J., 2002, Formal Aspects of Computing, V13, P341, DOI 10.1007/s001650200016
   Gabbay MJ, 2009, INFORM COMPUT, V207, P1369, DOI 10.1016/j.ic.2009.06.004
   Gacek A, 2008, IEEE S LOG, P33, DOI 10.1109/LICS.2008.33
   Godel K., 1958, dialectica, V12, P280, DOI 10.1111/j.1746-8361.1958.tb01464.x
   GORDON AD, 1996, LECT NOTES COMPUTER, V1125, P173, DOI DOI 10.1007/BFB0105404
   Grégoire B, 2002, ACM SIGPLAN NOTICES, V37, P235, DOI 10.1145/583852.581501
   Harper R., 2005, ACM Transactions on Computational Logic, V6, P61, DOI 10.1145/1042038.1042041
   JOHNSTONE PT, 2002, SKETCHES ELEPHANT TO, V1, P43
   Licata DR, 2008, IEEE S LOG, P241, DOI 10.1109/LICS.2008.48
   Licata DanielR., 2009, P 14 ACM SIGPLAN INT, P123
   Miller D., 2005, ACM Transactions on Computational Logic, V6, P749, DOI 10.1145/1094622.1094628
   MILLER DA, 1990, P LOG FRAM BRA WORKS
   MOGGI E, 1991, INFORM COMPUT, V93, P55, DOI 10.1016/0890-5401(91)90052-4
   Nordstrom B., 1990, PROGRAMMING MARTINLO
   Norrish M, 2004, LECT NOTES COMPUT SC, V3223, P241
   ODERSKY M, 1994, P 21 ACM S PRINC PRO, P48
   Pfenning F., 1988, PLDI'88: Proceedings of the ACM SIGPLAN 1988 conference on Programming Language design and Implementation', P199
   PFENNING Frank., 2001, HDB AUTOMATED REASON, V2, P1063
   Pientka B, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P371, DOI 10.1145/1328438.1328483
   Pitts AM, 2003, INFORM COMPUT, V186, P165, DOI 10.1016/S0890-5401(03)00138-X
   Pitts AM, 2000, LECT NOTES COMPUT SC, V1837, P230
   PITTS AM, 1993, LECT NOTES COMPUTER, V711, P122
   Pitts Andrew, 1998, Higher Order Operational Techniques in Semantics, P227
   Pitts AM, 2006, J ACM, V53, P459, DOI 10.1145/1147954.1147961
   Pitts AM, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P159, DOI 10.1145/1706299.1706321
   Poswolsky A, 2008, LECT NOTES COMPUT SC, V4960, P93
   Pottier F, 2007, IEEE S LOG, P356, DOI 10.1109/LICS.2007.44
   POUILLARD N, 2010, P 15 ACM SIGPLAN INT, P217
   Schöpp U, 2004, LECT NOTES COMPUT SC, V3210, P235
   Schürmann C, 2001, THEOR COMPUT SCI, V266, P1, DOI 10.1016/S0304-3975(00)00418-7
   SHINWELL M.R., 2005, UCAMCLTR621
   SHINWELL MR, 2003, P 8 ACM SIGPLAN INT, P263
   TAIT WW, 1967, J SYMBOLIC LOGIC, V32, P198, DOI 10.2307/2271658
   Urban C, 2004, THEOR COMPUT SCI, V323, P473, DOI 10.1016/j.tcs.2004.06.016
   Urban C, 2008, J AUTOM REASONING, V40, P327, DOI 10.1007/s10817-008-9097-2
   Urban C, 2006, LECT NOTES ARTIF INT, V4130, P498
   Urban C, 2011, ACM T COMPUT LOG, V12, DOI 10.1145/1877714.1877721
   WESTBROOK E, 2009, P 4 INT WORKSH LOG F, P74
NR 50
TC 10
Z9 11
U1 0
U2 2
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD MAY
PY 2011
VL 21
BP 235
EP 286
DI 10.1017/S0956796811000116
PN 3
PG 52
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 783NC
UT WOS:000292089200002
OA Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Mu, SC
   Ko, HS
   Jansson, P
AF Mu, Shin-Cheng
   Ko, Hsiang-Shang
   Jansson, Patrik
TI Algebra of programming in Agda: Dependent types for relational program
   derivation
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB Relational program derivation is the technique of stepwise refining a relational specification to a program by algebraic rules. The program thus obtained is correct by construction. Meanwhile, dependent type theory is rich enough to express various correctness properties to be verified by the type checker. We have developed a library, AoPA (Algebra of Programming in Agda), to encode relational derivations in the dependently typed programming language Agda. A program is Coupled with an algebraic derivation whose correctness is guaranteed by the type system. Two non-trivial examples are presented: an optimisation problem and a derivation of quicksort in which well-founded recursion is used to model terminating hylomorphisms in a language with inductive types.
C1 [Mu, Shin-Cheng] Acad Sinica, Inst Informat Sci, Taipei, Taiwan.
   [Ko, Hsiang-Shang] Natl Taiwan Univ, Dept Comp Sci & Informat Engn, Taipei, Taiwan.
   [Jansson, Patrik] Chalmers Univ Technol, Dept Comp Sci & Engn, Gothenburg, Sweden.
   [Jansson, Patrik] Univ Gothenburg, Gothenburg, Sweden.
C3 Academia Sinica - Taiwan; National Taiwan University; Chalmers
   University of Technology; University of Gothenburg
RP Mu, SC (corresponding author), Acad Sinica, Inst Informat Sci, Taipei, Taiwan.
EM scm@iis.sinica.edu.tw; joshs@mail2000.com.tw; patrikj@chalmers.se
RI Ko, Hsiang-Shang/ABA-7755-2020; Mu, Shin-Cheng/ABA-7746-2020; Jansson,
   Patrik/B-1987-2016
OI Ko, Hsiang-Shang/0000-0002-2439-1048; Mu,
   Shin-Cheng/0000-0002-4755-601X; Jansson, Patrik/0000-0003-3078-1437
CR *AGD TEAM, 2007, AGD WIK
   [Anonymous], 2006, COQ PROOF ASS REF MA
   [Anonymous], 1997, INT SERIES COMPUTER
   Augustsson L., 1998, Proceedings of the third ACM SIGPLAN international conference on Functional programming, ICFP '98, P239
   Augustsson Lennart, 1999, EQUALITY PROOFS CAYE
   Backhouse R, 2002, LECT NOTES COMPUT SC, V2297, P89
   BACKHOUSE RC, 1991, IFIP TC2 WG2 1 WORK, P287
   BACKHOUSE RC, 1992, LECT NOTES COMPUTER, V755, P7
   Bird RS, 1996, SCI COMPUT PROGRAM, V26, P15, DOI 10.1016/0167-6423(95)00033-X
   BIRD RS, 1989, COMPUT J, V32, P122, DOI 10.1093/comjnl/32.2.122
   BIRD RS, 1989, NATO ASI SERIES F, V55, P151
   Bove A, 2005, MATH STRUCT COMP SCI, V15, P671, DOI 10.1017/S0960129505004822
   BRADY E, 2003, LNCS, V3085, P115, DOI DOI 10.1007/978-3-540-24849-1_8
   BURSTALL RM, 1969, COMPUT J, V12, P41, DOI 10.1093/comjnl/12.1.41
   Cheney James, 2003, Technical Report TR2003-1901
   CORMEN ITH, 2001, INTRO ALGORITHMS
   Cousot P., 1990, FORMAL MODELS SEMANT, V15, P843
   Danielsson N. A., 2009, AGDA STANDARD LIB
   Doornbos H, 1996, SCI COMPUT PROGRAM, V26, P217, DOI 10.1016/0167-6423(95)00027-5
   DOORNBOS H, 1995, LECT NOTES COMPUTER, V947, P242
   DOORNBOS H, 1996, THESIS EINDHOVEN U T
   Dybjer P., 1994, Formal Aspects of Computing, V6, P440, DOI 10.1007/BF01211308
   Dybjer P, 1999, LECT NOTES COMPUT SC, V1581, P129
   Floyd R.W., 1967, P S APPL MATH, V19, P19
   Goguen H, 2006, LECT NOTES COMPUT SC, V4060, P521, DOI 10.1007/11780274_27
   GONZALIA C, 2006, THESIS CHALMERS U TE
   GRIES D, 1989, U TEXAS AUSTIN YEAR, P33
   HARPER R, 1991, THEOR COMPUT SCI, V89, P107, DOI 10.1016/0304-3975(90)90108-T
   Leroy X, 2006, ACM SIGPLAN NOTICES, V41, P42, DOI 10.1145/1111320.1111042
   MAGNUSSON L, 1994, LECT NOTES COMPUTER, V806, P213
   McBride C, 2004, J FUNCT PROGRAM, V14, P69, DOI 10.1017/S0956796803004829
   McKinna J., 1993, LECT NOTES COMPUTER, V711, P32, DOI [10.1007/3- 540- 57182-5, DOI 10.1007/3-540-57182-5]
   Megacz A, 2007, PLPV'07: PROCEEDINGS OF THE 2007 WORKSHOP ON PROGRAMMING LANGUAGES MEETS PROGRAM VERIFICATION, P11, DOI 10.1145/1292597.1292601
   MEIJER E, 1991, ACM C FUNCT PROGR LA, P124
   Mu SC, 2004, SCI COMPUT PROGRAM, V51, P87, DOI 10.1016/j.scico.2003.09.003
   MU SC, 2008, AOPA ALGEBRA PROGRAM
   Mu SC, 2008, LECT NOTES COMPUT SC, V5133, P268
   Mu SC, 2008, PEPM'08: PROCEEDINGS OF THE 2008 ACM SIGPLAN SYMPOSIUM ON PARTIAL EVALUATION AND SEMANTICS-BASED PROGRAM MANIPULATION, P31, DOI 10.1145/1328408.1328414
   NORDSTROM B, 1988, BIT, V28, P605, DOI 10.1007/BF01941137
   Norell Ulf, 2007, Towards a practical programming language based on dependent type theory
   PAULINMOHRING C, 1989, S PRINC PROGR LANG A
   Sheard T, 2008, LECT NOTES COMPUT SC, V5161, P158, DOI 10.1007/978-3-540-88059-2_5
   SWEENEY T, 2006, S PRINC PROGR LANG C
   Tarski A., 1955, PAC J MATH, V5, P285, DOI DOI 10.2140/PJM.1955.5.285
   WADLER P, 1990, THEOR COMPUT SCI, V73, P231, DOI 10.1016/0304-3975(90)90147-A
   Xi HW, 2007, J FUNCT PROGRAM, V17, P215, DOI 10.1017/S0956796806006216
NR 46
TC 22
Z9 24
U1 0
U2 2
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD SEP
PY 2009
VL 19
BP 545
EP 579
DI 10.1017/S0956796809007345
PN 5
PG 35
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 506GM
UT WOS:000270762600004
OA Bronze
DA 2024-07-18
ER

PT J
AU Swierstra, W
AF Swierstra, Wouter
TI Data types a la carte
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB This paper describes a technique for assembling both data types and functions from isolated individual components. We also explore how the same technology can be used to combine free monads and, as a result, structure Haskell's monolithic IO monad.
C1 Univ Nottingham, Sch Comp Sci, Nottingham NG8 1BB, England.
C3 University of Nottingham
RP Swierstra, W (corresponding author), Univ Nottingham, Sch Comp Sci, Jubilee Campus, Nottingham NG8 1BB, England.
EM wss@cs.nott.ac.uk
CR Awodey Steve., 2006, OXFORD LOGIC GUIDES, V49
   Johann P., 2007, LECT NOTES COMPUTER
   JOHANN P, 2008, ACM SIGPLAN SIGACT S, P297
   LIANG S, 1995, ACM S PRINC PROGR LA, P333
   Loh A., 2006, PPDP 2006. Proceedings of the Eighth ACM SIGPLAN Symposium on Principles and Practice of Declarative Programming, P133, DOI 10.1145/1140335.1140352
   MEIJER E, 1991, P ACM C FUNCT PROGR
   SHEARD T, 2001, P 6 ACM SIGPLAN INT, P86
   Swierstra W, 2007, HASKELL'07: PROCEEDINGS OF THE ACM SIGPLAN 2007 HASKELL WORKSHOP, P25, DOI 10.1145/1291201.1291206
   Wadler Philip, 1998, The Expression Problem
   [No title captured]
NR 10
TC 143
Z9 154
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD JUL
PY 2008
VL 18
BP 423
EP 436
DI 10.1017/S0956796808006758
PN 4
PG 14
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 330BW
UT WOS:000257915300001
OA Bronze
DA 2024-07-18
ER

PT J
AU Ariola, ZM
   Herbelin, H
AF Ariola, Zena M.
   Herbelin, Hugo
TI Control reduction theories: the benefit of structural substitution
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB The historical design of the call-by-value theory of control relies on the reification of evaluation contexts as regular functions and on the use of ordinary term application for jumping to a continuation. To the contrary, the lambda(ctp) control calculus, developed by the authors, distinguishes between jumps and terms. This alternative calculus, which derives from Parigot's lambda mu-calculus, works by direct structural substitution of evaluation contexts. We review and revisit the legacy theories of control and argue that lambda(ctp) provides an observationally equivalent but smoother theory. In an additional note contributed by Matthias Felleisen, we review the story of the birth of control calculi during the mid- to late-eighties at Indiana University.
C1 [Ariola, Zena M.] Univ Oregon, Eugene, OR 97403 USA.
C3 University of Oregon
RP Ariola, ZM (corresponding author), Univ Oregon, Eugene, OR 97403 USA.
CR [Anonymous], 2001, ELECTRON NOTES THEOR
   Ariola ZM, 2003, LECT NOTES COMPUT SC, V2719, P871
   ARIOLA ZM, 2004, ACM SIGPLAN INT C FU, P40
   ARIOLA ZM, 2008, IN PRESS HIGHER ORDE
   ARIOLA ZM, 2007, IN PRESS HIGHER ORDE, V20
   Curien PL, 2000, ACM SIGPLAN NOTICES, V35, P233, DOI 10.1145/357766.351262
   de Groote P., 1994, LECT NOTES COMPUTER, V822, P31, DOI DOI 10.1007/3-540-58216-9_27
   DUBA BF, 1991, C REC 18 ANN ACM S P, P163
   FELLEISEN M, 1987, THEOR COMPUT SCI, V52, P205, DOI 10.1016/0304-3975(87)90109-5
   FELLEISEN M, 1992, THEOR COMPUT SCI, V103, P235, DOI 10.1016/0304-3975(92)90014-7
   FELLEISEN M, 1988, P 15 ANN ACM S PRINC, P180, DOI DOI 10.1145/73560.73576
   FELLEISEN M, 1986, 1 S LOG COMP SCI, P131
   Filman R.E., 1984, COORDINATED COMPUTIN
   GANZ SE, 1999, ACM SIGPL INT C FUNC, P18
   GRIFFIN TG, 1990, CONFERENCE RECORD OF THE SEVENTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P47, DOI 10.1145/96709.96714
   HAYNES CT, 1984, C REC 1984 ACM S LIS, P18
   Huet G., 1991, COMPUTATIONAL LOGIC
   MURTHY C, 1992, ACM WORKSH CONT, P49
   Ong C.-H. L., 1997, Conference Record of POPL '97: The 24th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P215, DOI 10.1145/263699.263722
   PARIGOT M, 1992, LNCS, V624, P190, DOI [10.1007/BFb0013061, DOI 10.1007/BFB0013061]
   Plotkin G. D., 1975, Theoretical Computer Science, V1, P125, DOI 10.1016/0304-3975(75)90017-1
   VANOOSTROM V, 1994, THEOR COMPUT SCI, V126, P259, DOI 10.1016/0304-3975(92)00023-K
NR 22
TC 11
Z9 11
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD MAY
PY 2008
VL 18
BP 373
EP 419
DI 10.1017/S0956796807006612
PN 3
PG 47
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 296JT
UT WOS:000255540000003
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Bird, R
AF Bird, Richard
TI A program to solve Sudoku
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
C1 Univ Oxford, Programming Res Grp, Oxford OX1 3QD, England.
C3 University of Oxford
RP Bird, R (corresponding author), Univ Oxford, Programming Res Grp, Wolfson Bldg,Parks Rd, Oxford OX1 3QD, England.
EM bird@comlab.ox.ac.uk
NR 0
TC 7
Z9 7
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD NOV
PY 2006
VL 16
BP 671
EP 679
DI 10.1017/S0956796806006058
PN 6
PG 9
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 112KT
UT WOS:000242525400002
OA Bronze
DA 2024-07-18
ER

PT J
AU Marlow, S
   Jones, SP
AF Marlow, Simon
   Jones, Simon Peyton
TI Making a fast curry: push/enter vs. eval/apply for higher-order
   languages
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 9th International Conference on Functional Programming
CY SEP 19-21, 2004
CL Snowbird, UT
SP ACM SIGPLAN
AB Higher-order languages that encourage currying are typically implemented using one of two basic evaluation models: push/enter or eval/apply. Implementors use their intuition and qualitative judgements to choose one model or the other. Our goal in this paper is to provide, for the first time, a more substantial basis for this choice, based on our qualitative and quantitative experience of implementing both models in a state-of-the-art compiler for Haskell. Our conclusion is simple, and contradicts our initial intuition: compiled implementations should use eval/apply.
C1 Microsoft Res, Cambridge, England.
C3 Microsoft
RP Marlow, S (corresponding author), Microsoft Res, Cambridge, England.
EM simonmar@microsoft.com
CR [Anonymous], 1992, Compiling with Continuations
   BOQUIST U, 1999, THESIS CHALMERS U TE
   Douence R, 1998, ACM T PROGR LANG SYS, V20, P344, DOI 10.1145/276393.276397
   FAIRBAIRN J, 1987, LECT NOTES COMPUT SC, V274, P34
   Faxen K.-F., 1997, THESIS ROYAL I TECHN
   JOHNSSON T, 1984, P SIGPLAN S COMP CON
   Jones R., 1992, Journal of Functional Programming, V2, P73, DOI 10.1017/S0956796800000277
   JONES SLP, 1991, LECT NOTES COMPUT SC, V523, P636
   Jones SP, 1999, LECT NOTES COMPUT SC, V1702, P1
   LAUNCHBURY J, 1993, 20 ACM S PRINC PROGR, P144
   Maessen Jan-Willem, 2002, Ph. D. Dissertation
   Partain W., 1992, FUNCTIONAL PROGRAMMI, P195
   PEYTONJONES SL, 1992, J FUNCTIONAL PROGRAM, V2, P127
   Seward Julian., VALGRIND
   TEROY X, 1990, TR177 INRIA
NR 15
TC 23
Z9 29
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD JUL-SEP
PY 2006
VL 16
BP 415
EP 449
DI 10.1017/S0956796806005995
PN 4-5
PG 35
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 079KJ
UT WOS:000240174500003
OA Bronze
DA 2024-07-18
ER

PT J
AU Nanevski, A
   Pfenning, F
AF Nanevski, A
   Pfenning, F
TI Staged computation with names and necessity
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB Staging is a programming technique for dividing the computation in order to exploit the early availability of some arguments. In the early stages the program uses the available arguments to generate, at run time, the code for the late stages. A type system for staging should ensure that only well-typed expressions are generated, and that only expressions with no free variables are permitted for evaluation. In this paper, we present a calculus for staged computation in which code from the late stages is composed by splicing smaller code fragments into a larger context, possibly incurring capture of free variables. The type system ensures safety by tracking the names of free variables for each code fragment. The type system is based on the necessity operator rectangle from constructive modal logic, which we index with a set of names C. Our type rectangle(C)A classifies expressions of type A that belong to the late stage, and whose free names are in the set C.
C1 Carnegie Mellon Univ, Pittsburgh, PA 15213 USA.
C3 Carnegie Mellon University
RP Carnegie Mellon Univ, Pittsburgh, PA 15213 USA.
EM aleks@cs.cmu.edu; fp@cs.cmu.edu
CR [Anonymous], 1999, 1 ORDER MODAL LOGIC
   [Anonymous], 1970, Philosophical Problems in Logic: Some Recent Developments, DOI DOI 10.1007/978-94-010-3272-8_7
   [Anonymous], LECT NOTES COMPUT SC
   ATTARDI G, 1995, FUNDAMENTA INFORM, V2, P149
   AWODEY S, 2001, IMLR340001SE ROYAL S
   BENAISSA Z, 1999, WORKSH I MOD LOG APP
   BJORNER N, 1999, WORKSH LOG FRAM MET
   Calcagno C, 2003, J FUNCT PROGRAM, V13, P545, DOI 10.1017/S0956796802004598
   CALCAGNO C, 2003, C GEN PROGR COMP GEN
   CALCAGNO C, 2004, EUR S PROGR ESOP 04, P79
   Davies R, 1996, IEEE S LOG, P184, DOI 10.1109/LICS.1996.561317
   Davies R, 2001, J ACM, V48, P555, DOI 10.1145/382780.382785
   DESPEYROUX J, 1997, LNCS, V1210
   ERSHOV AP, 1977, INFORM PROCESS LETT, V6, P38, DOI 10.1016/0020-0190(77)90078-3
   FIORE M, 1999, S LOG COMP SCI LICS, P193
   FIORE M, 2002, INT C PRINC PRACT DE, P26
   Futamura Y., 1971, Systems, Compurters, Controls, V25, P45
   Gabbay M. J., 2002, Formal Aspects of Computing, V13, P341, DOI 10.1007/s001650200016
   Gabbay Murdoch J, 2000, THESIS CAMBRIDGE U
   GIRARD JY, 1986, THEOR COMPUT SCI, V45, P159, DOI 10.1016/0304-3975(86)90044-7
   Gluck R., 1997, LISP and Symbolic Computation, V10, P113, DOI 10.1023/A:1007763000430
   Gluck R, 1995, LECT NOTES COMPUT SC, V982, P259, DOI 10.1007/BFb0026825
   Harper R., 1999, Journal of Functional Programming, V9, P463, DOI 10.1017/S0956796899003378
   HOFMANN M, 1999, SEMANTICS LOGICS COM, P204
   JONES ND, 1985, LECT NOTES COMPUT SC, V202, P124
   Kripke Saul A., 1980, Naming and Necessity
   LEE P, 1996, C PROGR LANG DES IMP, P137
   McCarthy H., 1993, IJCAI-93. Proceedings of the Thirteenth International Joint Conference on Artificial Intelligence, P555
   MILLER D, 1990, P 1 WORKSH LOG FRAM, P323
   Moggi Eugenio., 1999, ESOP 99, P193
   Montague R., 1963, Acta Philosophica Fennica, V16, P153, DOI 10.2307/2271809
   NANEVSKI A, 2003, P MERLIN 03
   NANEVSKI A, 2002, INT C FUNCT PROGR IC
   NANEVSKI A, 2002, ICFP, P206
   NIELSON F, 1988, THEOR COMPUT SCI, V56, P59, DOI 10.1016/0304-3975(86)90006-X
   ODERSKY M, 1994, S PRINC PROGR POPL 9, P48
   Pfenning F., 2001, Mathematical Structures in Computer Science, V11, P511, DOI 10.1017/S0960129501003322
   Pfenning F, 2001, IEEE S LOG, P221, DOI 10.1109/LICS.2001.932499
   Pitts AM, 2000, LECT NOTES COMPUT SC, V1837, P230
   PITTS AM, 1993, LECT NOTES COMPUTER, V711, P122
   Reynolds J. C., 1983, Information Processing 83. Proceedings of the IFIP 9th World Computer Congress, P513
   Schurmann C, 2000, THESIS CARNEGIE MELL
   SCOTT DS, 1979, LECT NOTES MATH, V753, P660, DOI DOI 10.1007/BFB0061839
   SHEARD T, 2001, LECT NOTES COMPUTER, V2196, P2
   Smorynski C., 1985, Selfreference and modal logic
   TAHA W, 2003, S PRINC PROGR LANG P, P26
   TAHA W, 2000, WORKSH PART EV SEM B, P34
   TAHA W, 1997, WORKSH PART EV SEM B, P203
   Taha W., 1999, THESIS OREGON GRADUA
   WICKLINE P, 1998, C PROGR LANG DES IMP, P224
   WICKLINE P, 1998, ACM COMPUT SURV, V30
NR 51
TC 28
Z9 29
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD NOV
PY 2005
VL 15
BP 893
EP 939
DI 10.1017/S095679680500568X
PN 6
PG 47
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 980GY
UT WOS:000233003900003
OA Bronze
DA 2024-07-18
ER

PT J
AU Filliâtre, JC
   Pottier, F
AF Filliâtre, JC
   Pottier, F
TI Producing all ideals of a forest, functionally
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB We present functional implementations of Koda and Ruskey's algorithm for generating all ideals of a forest poset as a Gray code. Using a continuation-based approach, we give an extremely concise formulation of the algorithm's core. Then, in a number of steps, we derive a first-order version whose efficiency is comparable to that of a C implementation given by Knuth.
C1 Univ Paris 11, Rech Informat Lab, F-91405 Orsay, France.
   INRIA Rocquencourt, F-78153 Le Chesnay, France.
C3 Universite Paris Saclay
RP Filliâtre, JC (corresponding author), Univ Paris 11, Rech Informat Lab, Bat 490, F-91405 Orsay, France.
OI Pottier, Francois/0000-0002-4069-1235
CR Barras Bruno., 2002, COQ PROOF ASSISTANT
   Cejtin H, 2000, LECT NOTES COMPUT SC, V1782, P56
   CEJTIN H, 2002, M LION STANDARD ML C
   DANVY O, 2001, 3 INT C PRINC PRACT
   FILLIATRE JC, 2002, FUNCTIONAL IMPLEMENT
   Knuth D.E., 2001, IMPLEMENTATION KODA
   KNUTH DM, 2001, ART COMPUTER PROGRAM
   KODA Y, 1993, J ALGORITHM, V15, P324, DOI 10.1006/jagm.1993.1044
   LEROY X, 2002, OBJECTIVE CAML LANGU
   Reynolds J. C., 1998, Higher-Order and Symbolic Computation, V11, P355, DOI 10.1023/A:1010075320153
   Reynolds J. C., 1998, Higher-Order and Symbolic Computation, V11, P363, DOI 10.1023/A:1010027404223
NR 11
TC 6
Z9 6
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 40 WEST 20TH ST, NEW YORK, NY 10011-4221 USA
SN 0956-7968
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD SEP
PY 2003
VL 13
BP 945
EP 956
DI 10.1017/S0956796803004763
PN 5
PG 12
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 720RF
UT WOS:000185273200007
OA Bronze
DA 2024-07-18
ER

PT J
AU Erwig, M
   Kumar, P
AF Erwig, Martin
   Kumar, Prashant
TI Explainable dynamic programming
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB In this paper, we present a method for explaining the results produced by dynamic programming (DP) algorithms. Our approach is based on retaining a granular representation of values that are aggregated during program execution. The explanations that are created from the granular representations can answer questions of why one result was obtained instead of another and therefore can increase the confidence in the correctness of program results.
   Our focus on dynamic programming is motivated by the fact that dynamic programming offers a systematic approach to implementing a large class of optimization algorithms which produce decisions based on aggregated value comparisons. It is those decisions that the granular representation can help explain. Moreover, the fact that dynamic programming can be formalized using semirings supports the creation of a Haskell library for dynamic programming that has two important features. First, it allows programmers to specify programs by recurrence relationships from which efficient implementations are derived automatically. Second, the dynamic programs can be formulated generically (as type classes), which supports the smooth transition from programs that only produce result to programs that can run with granular representation and also produce explanations. Finally, we also demonstrate how to anticipate user questions about program results and how to produce corresponding explanations automatically in advance.
C1 [Erwig, Martin; Kumar, Prashant] Oregon State Univ, Sch EECS, Kelley Engn Ctr 3047, Corvallis, OR 97331 USA.
C3 Oregon State University
RP Erwig, M (corresponding author), Oregon State Univ, Sch EECS, Kelley Engn Ctr 3047, Corvallis, OR 97331 USA.
EM erwig@oregonstate.edu; kumarpra@oregonstate.edu
OI Erwig, Martin/0000-0002-7471-4554
FU DARPA [N66001-17-2-4030]; National Science Foundation [CCF-1717300]
FX We are grateful to Sasha Rush for his DP library (Rush, 2009). Our
   implementation depends heavily on his code. This work is partially
   supported by DARPA under the grant N66001-17-2-4030 and by the National
   Science Foundation under the grant CCF-1717300.
CR Abraham R, 2005, 2005 IEEE SYMPOSIUM ON VISUAL LANGUAGE AND HUMAN-CENTRIC COMPUTING, PROCEEDINGS, P37, DOI 10.1109/VLHCC.2005.42
   Abraham R, 2007, PROC INT CONF SOFTW, P251
   Ackley DH, 2013, COMMUN ACM, V56, P38, DOI 10.1145/2505340
   Andrew J Ko, 2004, P SIGCHI C HUMAN FAC, V6, P151, DOI [DOI 10.1145/985692.985712, 10.1145/985692.985712]
   Bartholdi JJ, 2008, INT SER OPER RES MAN, V115, P19
   Bauer T, 2011, ELECTRON P THEOR COM, P1, DOI 10.4204/EPTCS.66.1
   BELLMAN R, 1957, J MATH MECH, V6, P679, DOI 10.1512/iumj.1957.6.56038
   Bellman R., 1957, Dynamic programming
   Bellman R., 1958, Q APPL MATH, V16, P87
   Biswas S. K., 1997, THESIS
   Cheney J, 2007, FOUND TRENDS DATABAS, V1, P379, DOI 10.1561/1900000006
   DANTZIG GB, 1957, OPER RES, V5, P266, DOI 10.1287/opre.5.2.266
   Erwig M., 2018, P 2018 IJCAI WORKSH, P40
   Garfinkel P, 1981, Forms of Explanation
   GILL A, 2001, ELECT NOTES THEORETI, V41, P1
   Golan J.S., 2010, SEMIRINGS THEIR APPL, DOI [10.1007/978-94-015-9333-5, DOI 10.1007/978-94-015-9333-5]
   Goodman J, 1999, COMPUT LINGUIST, V25, P573
   Green T., 2007, PROVENANCE SEMIRINGS
   Juozapaitis Zoe, 2019, IJCAI ECAI WORKSH EX
   Khan OZ., 2009, Proceedings of the 19th International Conference on Automated Planning and Scheduling, ICAPS 2009, Thessaloniki, Greece, September 19-23, 2009, P194
   Phang KY, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P352, DOI 10.1109/ICSE.2013.6606581
   Ko A, 2009, CHI2009: PROCEEDINGS OF THE 27TH ANNUAL CHI CONFERENCE ON HUMAN FACTORS IN COMPUTING SYSTEMS, VOLS 1-4, P1569
   LIPTON P, 1990, ROY INST PH, V27, P247, DOI 10.1017/S1358246100005130
   Lipton P., 2004, INFERENCE BEST EXPLA
   Marceau G, 2007, AUTOMAT SOFTW ENG, V14, P59, DOI 10.1007/s10515-006-0003-z
   MICHIE D, 1968, NATURE, V218, P19, DOI 10.1038/218019a0
   Mohri M., 2002, Journal of Automata, Languages and Combinatorics, V7, P321
   Murphy GC, 2006, IEEE SOFTWARE, V23, P76, DOI 10.1109/MS.2006.105
   Nilsson H., 1997, Automated Software Engineering, V4, P121, DOI 10.1023/A:1008681016679
   Nilsson H., 1994, J FUNCTIONAL PROGRAM, V4, P337
   Ochoa Claudio., 2004, PEPM '04: Proceedings of the 2004 ACM SIGPLAN symposium on Partial evaluation and semantics-based program manipulation, P123
   Parnin C., 2011, P 2011 INT S SOFTWAR, P199, DOI [10.1145/2001420.2001445, DOI 10.1145/2001420.2001445]
   Perera R, 2012, ACM SIGPLAN NOTICES, V47, P365, DOI 10.1145/2398856.2364579
   Pope B, 2004, LECT NOTES COMPUT SC, V3622, P273
   Ricciotti W, 2017, P ACM PROGR LANG, V1
   Roehm T, 2012, PROC INT CONF SOFTW, P255, DOI 10.1109/ICSE.2012.6227188
   Rush S., 2009, SEMIRINGS LIB
   Vardi MY, 2020, COMMUN ACM, V63, P9, DOI 10.1145/3388890
   VESSEY I, 1986, IEEE T SYST MAN CYB, V16, P621, DOI 10.1109/TSMC.1986.289308
   Zeller A., 2002, Software Engineering Notes, V27, P1, DOI 10.1145/605466.605468
NR 40
TC 6
Z9 6
U1 6
U2 16
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD MAY 18
PY 2021
VL 31
AR e10
DI 10.1017/S0956796821000083
PG 26
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA SD5OV
UT WOS:000651424100001
DA 2024-07-18
ER

PT J
AU Svensson, BJ
   Newton, RR
   Sheeran, M
AF Svensson, Bo Joel
   Newton, Ryan R.
   Sheeran, Mary
TI A language for hierarchical data parallel design-space exploration on
   GPUs
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB Graphics Processing Units (GPUs) offer potential for very high performance; they are also rapidly evolving. Obsidian is an embedded language (in Haskell) for implementing high performance kernels to be run on GPUs. We would like to have our cake and eat it too; we want to raise the level of abstraction beyond CUDA code and still give the programmer control over the details relevant to kernel performance. To that end, Obsidian provides array representations that guarantee elimination of intermediate arrays while also using the type system to model the hierarchy of the GPU. Operations are compiled very differently depending on what level of the GPU they target, and as a result, the user is gently constrained to write code that matches the capabilities of the GPU. Thus, we implement not Nested Data Parallelism, but a more limited form that we call Hierarchical Data Parallelism. We walk through case-studies that demonstrate how to use Obsidian for rapid design exploration or auto-tuning, resulting in performance that compares well to the hand-tuned kernels used in Accelerate and NVIDIA Thrust.
C1 [Svensson, Bo Joel; Newton, Ryan R.] Indiana Univ, Sch Informat & Comp Sci, Bloomington, IN USA.
   [Sheeran, Mary] Chalmers Univ Technol, Dept Comp Sci & Engn, S-41296 Gothenburg, Sweden.
C3 Indiana University System; Indiana University Bloomington; Chalmers
   University of Technology
RP Svensson, BJ; Newton, RR (corresponding author), Indiana Univ, Sch Informat & Comp Sci, Bloomington, IN USA.; Sheeran, M (corresponding author), Chalmers Univ Technol, Dept Comp Sci & Engn, S-41296 Gothenburg, Sweden.
EM bo.joel.svensson@gmail.com; rrnewton@indiana.edu; ms@chalmers.se
FU Swedish Foundation for Strategic Research; National Science Foundation
   [1337242]; Division of Computing and Communication Foundations; Direct
   For Computer & Info Scie & Enginr [1337242] Funding Source: National
   Science Foundation
FX This research has been funded by the Swedish Foundation for Strategic
   Research (which funds the Resource Aware Functional Programming (RAW FP)
   Project) and by the National Science Foundation award 1337242.
CR [Anonymous], CUDA C PROGR GUID
   [Anonymous], 2007, Optimizing parallel reductions in CUDA
   Axelsson Emil, 2011, Implementation and Application of Functional Languages. 22nd International Symposium, IFL 2010. Revised Selected Papers, P121, DOI 10.1007/978-3-642-24276-2_8
   Bergstrom L, 2012, ACM SIGPLAN NOTICES, V47, P247, DOI 10.1145/2398856.2364563
   Billeter M., 2009, Proceedings of the Conference on High Performance Graphics 2009, HPG '09, P159, DOI [10.2312/EGGH/HPG09/159-166, DOI 10.1145/1572769.1572795, 10. 1145/1572769. 157279]
   Bjesse P., 1998, ICFP '98
   Blelloch GE, 1996, COMMUN ACM, V39, P85, DOI 10.1145/227234.227246
   Catanzaro B, 2011, ACM SIGPLAN NOTICES, V46, P47, DOI 10.1145/1941553.1941562
   CHAFI H, 2011, P 16 ACM S PRINC PRA, P35, DOI 10.1145/1941553.1941561
   Chakravarty M. M., 2011, P 6 WORKSH DECL ASP, P3, DOI DOI 10.1145/1926354.1926358
   Claessen Koen., 2012, P 7 WORKSHOP DECLARA, P21, DOI [10.1145/2103736.2103740, DOI 10.1145/2103736.2103740]
   Elliott C, 2003, J FUNCT PROGRAM, V13, P455, DOI 10.1017/S0956796802004574
   Elliott C., 2003, FUN PROGRAMMING CORN, P131
   Guibas L., 1978, Proceedings of 5th Annal. ACM Symposium on Principles of Programming Languages, P1
   Harris M., 2007, GPU GEMS, V3, P851
   Holk E, 2012, ADV PARALLEL COMPUT, V22, P297, DOI 10.3233/978-1-61499-041-3-297
   Keller G, 2010, ICFP 2010: PROCEEDINGS OF THE 2010 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P261
   Klockner A, 2015, P 2 ACM SIGPLAN INT, P1, DOI [10.1145/2774959.2774969, DOI 10.1145/2774959.2774969]
   Mainland G, 2010, ACM SIGPLAN NOTICES, V45, P67, DOI 10.1145/2088456.1863533
   McDonell TL, 2013, ACM SIGPLAN NOTICES, V48, P49, DOI [10.1145/2544174.2500595, 10.1145/2500365.2500595]
   NVIDIA, 2015, NVIDIA CUB LIB
   NVIDIA, 2015, NVIDIA THRUST LIB
   Oancea Cosmin E., 2012, P 1 ACM SIGPLAN WORK, P61, DOI [DOI 10.1145/2364474.2364484, 10.1145/2364474.2364484]
   Persson Anders, 2012, Implementation and Application of Functional Languages. 23rd International Symposium, IFL 2011. Revised Selected Papers: LNCS 7257, P85, DOI 10.1007/978-3-642-34407-7_6
   Sculthorpe N, 2013, ACM SIGPLAN NOTICES, V48, P287, DOI 10.1145/2544174.2500602
   Sklansky J., 1960, IRE Transactions on Electronic computers, VEC-9, P226, DOI DOI 10.1109/TEC.1960.5219822
   Stevens RT, 1989, FRACTAL PROGRAMMING
   Svenningsson J., 2013, P 2 ACM SIGPLAN WORK, P50
   Svenningsson J, 2013, TRENDS FUNCTIONAL PR, V7829, P21, DOI [10.1007/978-3-642-40447-4_2, DOI 10.1007/978-3-642-40447-42]
   Svenningsson J., 2013, P 18 ACM SIGPLAN INT
   Svensson BJ, 2014, COMMUN ACM, V57, P56, DOI 10.1145/2605685
   Svensson J, 2010, PROCEDIA COMPUT SCI, V1, P2059, DOI 10.1016/j.procs.2010.04.231
   Svensson Joel., 2008, Symposium on Implementation and Application of Functional Languages, P156
   Ulvinge N., 2014, THESIS CHALMERS U TE
NR 34
TC 1
Z9 1
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PY 2016
VL 26
AR e6
DI 10.1017/S0956796816000046
PG 53
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DH7VK
UT WOS:000373001700001
OA Bronze
DA 2024-07-18
ER

PT J
AU Aransay, J
   Divasón, J
AF Aransay, Jesus
   Divason, Jose
TI Formalisation in higher-order logic and code generation to functional
   languages of the Gauss-Jordan algorithm
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB In this paper, we present a formalisation in a proof assistant, Isabelle/HOL, of a naive version of the Gauss-Jordan algorithm, with explicit proofs of some of its applications; and, additionally, a process to obtain versions of this algorithm in two different functional languages (SML and Haskell) by means of code generation techniques from the verified algorithm. The aim of this research is not to compete with specialised numerical implementations of Gauss-like algorithms, but to show that formal proofs in this area can be used to generate usable functional programs. The obtained programs show compelling performance in comparison to some other verified and functional versions, and accomplish some challenging tasks, such as the computation of determinants of matrices of big integers and the computation of the homology of matrices representing digital images.
C1 [Aransay, Jesus; Divason, Jose] Univ La Rioja, Dept Matemat & Computac, La Rioja 26004, Spain.
C3 Universidad de La Rioja
RP Aransay, J (corresponding author), Univ La Rioja, Dept Matemat & Computac, C Luis de Ulloa S-N, La Rioja 26004, Spain.
RI Aransay, Jesus/N-9030-2019
OI Aransay, Jesus/0000-0002-4079-8307; Divason, Jose/0000-0002-5173-128X
FU Universidad de La Rioja [FPI-UR-12]; Ministerio de Economia y
   Competitividad (Gobierno de Espana) [MTM2014-54151-P]
FX This work has been supported by the research grant FPI-UR-12, from
   Universidad de La Rioja and by the project MTM2014-54151-P from
   Ministerio de Economia y Competitividad (Gobierno de Espana).
CR [Anonymous], 2019, LCP ISABELLE 2019
   [Anonymous], 1997, The Definition of Standard ML
   Aransay J., 2014, ARCH FORMAL PROOFS
   Aransay J, 2014, LECT NOTES COMPUT SC, V8901, P1, DOI 10.1007/978-3-319-14125-1_1
   Aransay J, 2015, LECT NOTES COMPUT SC, V9058, P415, DOI 10.1007/978-3-319-17524-9_30
   Avigad J., 2014, FORMALLY VERIFIED PR
   Avigad J, 2014, COMMUN ACM, V57, P66, DOI 10.1145/2591012
   Bulwahn L., 2008, LNCS, V5170, P352
   Denes Maxime, 2012, Interactive Theorem Proving. Proceedings of the Third International Conference, ITP 2012, P83, DOI 10.1007/978-3-642-32347-8_7
   Denes M., 2013, LNCS, V8307, P147
   Denes M, 2013, THESIS
   Duran A. J., 2014, NOT AM MATH SOC, V61, DOI DOI 10.1090/NOTI1173
   Esparza Javier, 2013, Computer Aided Verification. 25th International Conference, CAV 2013. Proceedings. LNCS 8044, P463, DOI 10.1007/978-3-642-39799-8_31
   Gockenbach M. S., 2010, FINITE DIMENSIONAL L
   Haftmann F., 2013, CODE GENERATION ISAB
   Haftmann F, 2013, LECT NOTES COMPUT SC, V7998, P100, DOI 10.1007/978-3-642-39634-2_10
   Haftmann F, 2010, LECT NOTES COMPUT SC, V6009, P103, DOI 10.1007/978-3-642-12251-4_9
   Hales T.C., 2011, The Kepler Conjecture: The Hales-Ferguson Proof
   Harrison J, 2005, LECT NOTES COMPUT SC, V3603, P114
   Haskell, 2014, HASKELL PROGRAMMING
   Heras J, 2012, LECT NOTES COMPUT SC, V7309, P49, DOI 10.1007/978-3-642-30238-1_6
   Nipkow T., 2011, ARCH FORMAL PROOFS
   Paulson LC, 1990, Logic and computer science, V31, P361
   Roman S., 2008, Advanced Linear Algebra
   Sternagel C, 2013, J AUTOM REASONING, V51, P357, DOI 10.1007/s10817-012-9260-7
   Strang, 2009, Introduction to linear algebra
NR 26
TC 5
Z9 5
U1 0
U2 5
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PY 2015
VL 25
AR e9
DI 10.1017/S0956796815000155
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DB1AM
UT WOS:000368240300002
OA Bronze, Green Published
DA 2024-07-18
ER

PT J
AU Lakin, MR
   Pitts, AM
AF Lakin, Matthew R.
   Pitts, Andrew M.
TI Contextual equivalence for inductive definitions with binders in higher
   order typed functional programming
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID OPERATIONAL SEMANTICS; SYSTEM; LOGIC; UNIFICATION; ALGORITHM; LANGUAGE;
   PROLOG; NAMES
AB Correct handling of names and binders is an important issue in meta-programming. This paper presents an embedding of constraint logic programming into the alpha ML functional programming language, which provides a provably correct means of implementing proof search computations over inductive definitions involving names and binders modulo alpha-equivalence. We show that the execution of proof search in the alpha ML operational semantics is sound and complete with regard to the model-theoretic semantics of formulae, and develop a theory of contextual equivalence for the subclass of alpha ML expressions which correspond to inductive definitions and formulae. In particular, we prove that alpha ML expressions, which denote inductive definitions, are contextually equivalent precisely when those inductive definitions have the same model-theoretic semantics. This paper is a revised and extended version of the conference paper (Lakin, M. R. & Pitts, A. M. (2009) Resolving inductive definitions with binders in higher-order typed functional programming. In Proceedings of the 18th European Symposium on Programming (ESOP 2009), Castagna, G. (ed), Lecture Notes in Computer Science, vol. 5502. Berlin, Germany: Springer-Verlag, pp. 47-61) and draws on material from the first author's PhD thesis (Lakin, M. R. (2010) An Executable Meta-Language for Inductive Definitions with Binders. University of Cambridge, UK).
C1 [Lakin, Matthew R.; Pitts, Andrew M.] Univ Cambridge, Comp Lab, Cambridge CB3 0FD, England.
C3 University of Cambridge
RP Lakin, MR (corresponding author), Univ Cambridge, Comp Lab, 15 JJ Thomson Ave, Cambridge CB3 0FD, England.
EM Matthew.Lakin@cl.cam.ac.uk; Andrew.Pitts@cl.cam.ac.uk
OI Pitts, Andrew Mawdesley/0000-0001-7775-3471
CR ALBERT E, 2002, ELECT NOTES THEORETI, V76, DOI DOI 10.1016/S1571-0661(04)80782-5
   [Anonymous], 1999, AUTOMATED DEDUCTION
   [Anonymous], LOGICAL METHODS COMP
   [Anonymous], 2005, LECT NOTES COMPUT SC
   [Anonymous], 1984, The Lambda Calculus: Its Syntax and Semantics
   [Anonymous], 1997, The Definition of Standard ML
   [Anonymous], 1972, INDAGATIONES MATHEMA, DOI DOI 10.1016/1385-7258(72)90034-0
   Antoy S, 2000, J ACM, V47, P776, DOI 10.1145/347476.347484
   Aydemir BE, 2005, LECT NOTES COMPUT SC, V3603, P50
   Aydemir B, 2008, ACM SIGPLAN NOTICES, V43, P3, DOI 10.1145/1328897.1328443
   Baelde D, 2007, LECT NOTES ARTIF INT, V4603, P391
   Brassel B, 2005, LECT NOTES COMPUT SC, V3668, P265, DOI 10.1007/11562931_21
   Cheney J, 2004, LECT NOTES COMPUT SC, V3132, P269, DOI 10.1007/978-3-540-27775-0_19
   Cheney J, 2010, J AUTOM REASONING, V45, P267, DOI 10.1007/s10817-009-9164-3
   Cheney J, 2008, ACM T PROGR LANG SYS, V30, DOI 10.1145/1387673.1387675
   Clark K. L., 1978, Logic and data bases, P293
   DERSHOWITZ N, 1979, COMMUN ACM, V22, P465, DOI 10.1145/359138.359142
   FLANAGAN C, 1993, SIGPLAN NOTICES, V28, P237, DOI 10.1145/173262.155113
   Gabbay M. J., 2002, Formal Aspects of Computing, V13, P341, DOI 10.1007/s001650200016
   Gabbay MJ, 2008, FORM ASP COMPUT, V20, P451, DOI 10.1007/s00165-007-0056-1
   Gacek A., 2010, P 2010 S PRINC PRACT, P177
   Gacek A, 2009, ELECTRON NOTES THEOR, V228, P85, DOI 10.1016/j.entcs.2008.12.118
   GOLDFARB WD, 1981, THEOR COMPUT SCI, V13, P225, DOI 10.1016/0304-3975(81)90040-2
   Gordon A. D., 1998, OPERATIONAL EQUIVALE
   Hanus M., 2000, Proceedings of the 2nd International ACM SIGPLAN Conference on Principles and Practice of Declarative Programming (PPDP '00), P202, DOI 10.1145/351268.351292
   Hanus M., 1998, Principles of Declarative Programming. 10th International Symposium, PLILP'98. Held Jointly with the 6th International Conference, ALP'98. Proceedings, P374, DOI 10.1007/BFb0056627
   Hanus M., 1994, Static Analysis. First International Static Analysis Symposium, SAS '94 Proceedings, P26
   HANUS M, 1997, P 1997 JOINT C DECL, P9
   Hanus M, 2007, LECT NOTES COMPUT SC, V4670, P45, DOI 10.1007/978-3-540-74610-2_5
   Howe DJ, 1996, INFORM COMPUT, V124, P103, DOI 10.1006/inco.1996.0008
   Huet G. P., 1975, Theoretical Computer Science, V1, P27, DOI 10.1016/0304-3975(75)90011-0
   Jaffar J, 1998, J LOGIC PROGRAM, V37, P1, DOI 10.1016/S0743-1066(98)10002-X
   Lakin M. R., 2011, LOG METH COMPUT SCI, V7, P1
   Lakin M. R., 2010, THESIS U CAMBRIDGE U
   Lakin MR, 2012, J AUTOM REASONING, V49, P115, DOI 10.1007/s10817-011-9220-7
   Lakin MR, 2009, LECT NOTES COMPUT SC, V5502, P47, DOI 10.1007/978-3-642-00590-9_4
   Lassen S. B., 1998, RELATIONAL REASONING
   Levy J, 2008, LECT NOTES COMPUT SC, V5117, P246, DOI 10.1007/978-3-540-70590-1_17
   Mason I., 1991, Journal of Functional Programming, V1, P287, DOI 10.1017/S0956796800000125
   McKinna J, 1999, J AUTOM REASONING, V23, P373, DOI 10.1023/A:1006294005493
   Miller D., 2005, ACM Transactions on Computational Logic, V6, P749, DOI 10.1145/1094622.1094628
   Miller D., 1991, Journal of Logic and Computation, V1, P497, DOI 10.1093/logcom/1.4.497
   Miller D, 2000, LECT NOTES ARTIF INT, V1861, P239
   Nadathur Gopalan., 1988, Fifth International Logic Programming Conference, P810
   Nickolas P, 1996, THEOR COMPUT SCI, V169, P81, DOI 10.1016/S0304-3975(96)00115-6
   Pfenning F., 1999, Automated Deduction - CADE-16. 16th International Conference on Automated Deduction. Proceedings (Lecture Notes in Artificial Intelligence Vol.1632), P202
   Pientka B, 2010, LECT NOTES ARTIF INT, V6173, P15
   Pitts A., 2011, ADV TOPICS BISIMULAT, V52, P197
   Pitts AM, 2003, INFORM COMPUT, V186, P165, DOI 10.1016/S0890-5401(03)00138-X
   Pitts AM, 2002, LECT NOTES COMPUT SC, V2395, P378
   Pitts AM, 2006, J ACM, V53, P459, DOI 10.1145/1147954.1147961
   Pitts Andrew M., 2005, Advanced Topics in Types and Programming Languages, P245
   Pollack R, 2012, J AUTOM REASONING, V49, P185, DOI 10.1007/s10817-011-9229-y
   Poswolsky A, 2009, ELECTRON NOTES THEOR, V228, P113, DOI 10.1016/j.entcs.2008.12.120
   Pottier F, 2006, ELECTRON NOTES THEOR, V148, P27, DOI 10.1016/j.entcs.2005.11.039
   Qi X., 2009, THESIS U MINNESOTA
   Sato M, 2010, J SYMB COMPUT, V45, P598, DOI 10.1016/j.jsc.2010.01.010
   Sewell P, 2007, ACM SIGPLAN NOTICES, V42, P1, DOI 10.1145/1291220.1291155
   Shinwell M. R., 2005, THESIS U CAMBRIDGE U
   Shinwell MR, 2005, THEOR COMPUT SCI, V342, P28, DOI 10.1016/j.tcs.2005.06.003
   Shinwell MR, 2003, ACM SIGPLAN NOTICES, V38, P263, DOI 10.1145/944746.944729
   Somogyi Z, 1996, J LOGIC PROGRAM, V29, P17, DOI 10.1016/S0743-1066(96)00068-4
   Tarski A., 1955, PAC J MATH, V5, P285, DOI DOI 10.2140/PJM.1955.5.285
   Urban C, 2004, THEOR COMPUT SCI, V323, P473, DOI 10.1016/j.tcs.2004.06.016
   URBAN C, 2005, LECT NOTES COMPUTER, V3461, P74
   Weirich S, 2011, ACM SIGPLAN NOTICES, V46, P333, DOI 10.1145/2034574.2034818
NR 66
TC 0
Z9 0
U1 0
U2 2
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD NOV
PY 2013
VL 23
IS 6
BP 658
EP 700
DI 10.1017/S0956796813000245
PG 43
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 300KQ
UT WOS:000330463200002
OA Bronze
DA 2024-07-18
ER

PT J
AU Naylor, M
   Runciman, C
AF Naylor, Matthew
   Runciman, Colin
TI The Reduceron reconfigured and re-evaluated
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB A new version of a special-purpose processor for running lazy functional programs is presented. This processor - the Reduceron - exploits parallel memories and dynamic analyses to increase evaluation speed, and is implemented using reconfigurable hardware. Compared to a more conventional functional language implementation targeting a standard RISC processor running on the same reconfigurable hardware, the Reduceron offers a significant improvement in run-time performance.
C1 [Naylor, Matthew; Runciman, Colin] Univ York, Dept Comp Sci, York YO10 5DD, N Yorkshire, England.
C3 University of York - UK
RP Naylor, M (corresponding author), Univ York, Dept Comp Sci, York YO10 5DD, N Yorkshire, England.
EM mfn@cs.york.ac.uk; colin@cs.york.ac.uk
FU Engineering and Physical Sciences Research Council of the UK
   [EP/G011052/1]; EPSRC [EP/G011052/1] Funding Source: UKRI
FX This work was supported by the Engineering and Physical Sciences
   Research Council of the UK under grant EP/G011052/1. Thanks to Xilinx
   for donating the FPGA used in this work, and to Arjan Boeijink, Satnam
   Singh, Gabor Greif and anonymous ICFP and JFP reviewers for their
   helpful suggestions.
CR [Anonymous], 1987, The Implementation of Functional Programming Languages
   [Anonymous], 2009, Microblaze soft processor core
   Augustsson L, 1992, P 1991 GLASG WORKSH, P36
   Boeijink Arjan, 2011, Implementation and Application of Functional Languages. 22nd International Symposium, IFL 2010. Revised Selected Papers, P54, DOI 10.1007/978-3-642-24276-2_4
   Burn G. L., 1988, Proceedings of the 1988 ACM Conference on LISP and Functional Programming, P244, DOI 10.1145/62678.62717
   Dijkstra E. W., 1980, EWD735
   Fasel J. H., 1987, LNCS, V279
   FLANAGAN C, 1993, SIGPLAN NOTICES, V28, P237, DOI 10.1145/173262.155113
   Frankau S., 2004, THESIS U CAMBRIDGE C
   Gill A, 2009, J FUNCT PROGRAM, V19, P227, DOI 10.1017/S0956796809007175
   Hennessy J., 1992, COMPUTER ARCHITECTUR
   Hutton G, 2002, J FUNCT PROGRAM, V12, P609, DOI 10.1017/S0956796801004300
   Jansen JM, 2007, TR FUNCT PROGRAM, V7, P73
   Jones R.E., 1996, Garbage Collection: Algorithms for Automatic Dynamic Memory Management
   KENNAWAY R, 1988, ACM T PROGR LANG SYS, V10, P602, DOI 10.1145/48022.48026
   Longbottom R., 2009, DHRYSTONE BENCHMARK
   Mycroft A, 2000, LECT NOTES COMPUT SC, V1853, P37
   Naylor M., 2009, 12 RED, V12
   Naylor M., 2009, 27 RED, V27
   Naylor M., 2009, REDUCERON HOME PAGE
   Naylor M, 2008, LECT NOTES COMPUT SC, V5083, P129, DOI 10.1007/978-3-540-85373-2_8
   Naylor M, 2010, ACM SIGPLAN NOTICES, V45, P75, DOI 10.1145/1932681.1863556
   Nielson H. R., 2007, SEMANTICS APPL APPET
   Scheevel M., 1986, Proceedings of the 1986 ACM conference on LISP and functional programming, P212
   Scott D., 1968, LECT U CAL BERK 1962
   Sharp R., 2002, THESIS U CAMBRIDGE C
   Stoye W., 1985, THESIS U CAMBRIDGE C
   TURNER DA, 1979, SOFTWARE PRACT EXPER, V9, P31, DOI 10.1002/spe.4380090105
   Ward M., 2000, THESIS U YORK YORK
   WEICKER RP, 1984, COMMUN ACM, V27, P1013, DOI 10.1145/358274.358283
NR 30
TC 1
Z9 1
U1 0
U2 2
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD JUL-SEP
PY 2012
VL 22
SI SI
BP 574
EP 613
DI 10.1017/S0956796812000214
PN 4-5
PG 40
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 004HQ
UT WOS:000308672600006
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Bird, RS
AF Bird, Richard S.
TI Building a consensus: A rectangle covering problem
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
C1 Univ Oxford, Comp Lab, Oxford OX1 3QD, England.
C3 University of Oxford
RP Bird, RS (corresponding author), Univ Oxford, Comp Lab, Wolfson Bldg,Parks Rd, Oxford OX1 3QD, England.
EM bird@comlab.ox.ac.uk
CR Quine W.V., 1959, Am. Math. Mon., V66, P755
   Schäfer M, 2010, ACM SIGPLAN NOTICES, V45, P145, DOI 10.1145/1707801.1706317
NR 2
TC 0
Z9 0
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD MAR
PY 2011
VL 21
BP 119
EP 128
DI 10.1017/S0956796810000316
PN 2
PG 10
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 748GS
UT WOS:000289378800001
OA Bronze
DA 2024-07-18
ER

PT J
AU Gay, SJ
   Vasconcelos, VT
AF Gay, Simon J.
   Vasconcelos, Vasco T.
TI Linear type theory for asynchronous session types
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID LANGUAGE PRIMITIVES; DISCIPLINE
AB Session types Support a type-theoretic formulation of structured patterns of communication, so that the communication behaviour of agents in a distributed system call be verified by static typechecking. Applications include network protocols, business processes and operating system services-In this paper we define a multithread functional language with session types, which unifies, simplifies and extends previous work. There are four main contributions. First is an operational semantics with buffered channels, instead of the synchronous communication of previous work. Second, we prove that the session type of a channel gives all upper bound on the necessary size of the buffer. Third, Session types are Manipulated by means of the standard structures Of a linear type theory, rather than by means of new forms of typing judgement. Fourth, a notion Of subtyping, including the standard subtyping relation for session types (imported into the functional setting), and a novel form of subtyping between standard and linear function types, which allows the typechecker to handle linear types conveniently. Our new approach significantly simplifies session types ill the functional setting clarifies their essential features and provides a secure foundation for language developments Such as polymorphism and object-orientation.
C1 [Gay, Simon J.] Univ Glasgow, Dept Comp Sci, Glasgow G12 8QQ, Lanark, Scotland.
   [Vasconcelos, Vasco T.] Univ Lisbon, Fac Ciencias, Dept Informat, P-1749016 Lisbon, Portugal.
C3 University of Glasgow; Universidade de Lisboa
RP Gay, SJ (corresponding author), Univ Glasgow, Dept Comp Sci, Glasgow G12 8QQ, Lanark, Scotland.
EM simon@dcs.gla.ac.uk; vv@di.fc.ul.pt
RI Vasconcelos, Vasco T/M-4920-2017
OI Vasconcelos, Vasco T/0000-0002-9539-8861
FU FEDER; EU IST [IST-2005-16004]; Fundacao para a Ciencia e a Tecnologia;
   Instituto de Telecomunicacoes, Portugal; EPSRC [EP/E065708/1]; EPSRC
   [EP/E065708/1] Funding Source: UKRI
FX Vasco T. Vasconcelos was partially Supported by FEDER, the EU IST
   proactive initiative FET-Global Computing (project Sensoria,
   IST-2005-16004), Fundacao para a Ciencia e a Tecnologia (via LASIGE).
   Simon Gay was partially supported by Instituto de Telecomunicacoes,
   Portugal, and by the EPSRC grant 'Engineering Foundations of Web
   Services: Theories and Tool Support (EP/E065708/1). We thank the
   anonymous referees for many helpful comments.
CR [Anonymous], 1999, TYPE EFFECT SYSTEMS
   Bonelli E, 2005, J FUNCT PROGRAM, V15, P219, DOI 10.1017/S09567968O400543X
   Capecchi S, 2009, THEOR COMPUT SCI, V410, P142, DOI 10.1016/j.tcs.2008.09.016
   Coppo M, 2007, LECT NOTES COMPUT SC, V4468, P1
   DeLine R, 2001, ACM SIGPLAN NOTICES, V36, P59, DOI 10.1145/381694.378811
   Dezani-Ciancaglini M, 2005, LECT NOTES COMPUT SC, V3705, P299, DOI 10.1007/11580850_16
   Dezani-Ciancaglini M, 2006, LECT NOTES COMPUT SC, V4067, P328
   Fähndrich M, 2002, ACM SIGPLAN NOTICES, V37, P13, DOI 10.1145/543552.512532
   FAHNDRICH M, 2006, P EUROSYS C SIGOPS O, V40, P177
   Gay S, 2005, ACTA INFORM, V42, P191, DOI 10.1007/s00236-005-0177-z
   GAY SJ, 2003, 2003133 U GLASG DEP
   GAY SJ, 2010, P 37 ACM SIGPLAN SIG, P404
   GAYS SJ, 2007, 2007251 U GLASG DEP
   GAYS SJ, 2006, 2006305 U GLASG DEP
   GAYS SJ, 2008, MATH STRUCT COMP SCI, V18, P895
   Grossman D, 2002, ACM SIGPLAN NOTICES, V37, P282, DOI 10.1145/543552.512563
   Grossman D, 2003, ACM SIGPLAN NOTICES, V38, P13, DOI 10.1145/640136.604177
   Honda K, 1998, LECT NOTES COMPUT SC, V1381, P122, DOI 10.1007/BFb0053567
   Honda K, 2008, ACM SIGPLAN NOTICES, V43, P273, DOI 10.1145/1328897.1328472
   Honda Kohei., 1993, CONCUR'93, 4th International Conference on Concurrency Theory, Hildesheim, Germany, August 23-26, 1993, V715, P509, DOI DOI 10.1007/3-540-57208-2_
   JONES SLP, 1993, P 20 ACM SIGPLAN SIG, P71, DOI DOI 10.1145/158511.158524
   Lanese I, 2007, SEFM 2007: FIFTH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING AND FORMAL METHODS, PROCEEDINGS, P305, DOI 10.1109/SEFM.2007.28
   Neubauer M, 2005, ACM SIGPLAN NOTICES, V40, P221, DOI 10.1145/1047659.1040324
   Neubauer M, 2004, LECT NOTES COMPUT SC, V3302, P246
   Neubauer M, 2004, LECT NOTES COMPUT SC, V3057, P56
   NEUBAUER M, 2004, SESSION TYPES ASYNCH
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Takeuchi K., 1994, Parallel Architectures and Languages Europe'94, V817, P398, DOI [DOI 10.1007/3-540-58184-7_118, 10.1007/3540581847118]
   Vallecillo A, 2006, FUND INFORM, V73, P583
   Vasconcelos V, 2004, LECT NOTES COMPUT SC, V3170, P497
   Vasconcelos VT, 2006, THEOR COMPUT SCI, V368, P64, DOI 10.1016/j.tcs.2006.06.028
   *W3C, 2005, SERV CHOR DESCR LANG
   Walker David, 2005, Advanced Topics in Types and Programming Languages, chapter Substructural Type Systems, P3
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
   Yoshida N, 2007, ELECTRON NOTES THEOR, V171, P73, DOI 10.1016/j.entcs.2007.02.056
NR 35
TC 113
Z9 122
U1 0
U2 4
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD JAN
PY 2010
VL 20
BP 19
EP 50
DI 10.1017/S0956796809990268
PN 1
PG 32
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 562SH
UT WOS:000275074100003
OA Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Maranget, L
AF Maranget, Luc
TI Warnings for pattern matching
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB We examine the ML pattern-matching anomalies of useless clauses and non-exhaustive matches. We state the definition of these anomalies, building upon pattern matching semantics, and propose a simple algorithm to detect them. We have integrated the algorithm in the Objective Caml compiler, but we show that the same algorithm is also usable in a non-strict language such as Haskell. Or-patterns are considered for both strict and non-strict languages.
C1 Inria Rocquencourt, F-78153 Le Chesnay, France.
RP Maranget, L (corresponding author), Inria Rocquencourt, BP 105, F-78153 Le Chesnay, France.
EM Luc.Maranget@inria.fr
CR AITKEN W, 1992, SML NJ MATCH COMPILE
   APPEL AW, 1991, LECT NOTES COMPUTER, V583
   AUGUSTSSON L, 1985, LECT NOTES COMPUTER, V201
   Baudinet Marianne., 1985, Tree Pattern Matching for ML
   Garrigue Jacques, 2004, JSSST WORKSH PROGR P
   HARPER RW, 1991, DEFINITION STANDARD
   HUDAK P, 1998, HASKELL 98 NONSTRICT
   Huet G., 1991, COMPUTATIONAL LOGIC
   JONES SLP, 1993, UK JOINT FRAMEWORK I
   KAHN G, 1978, 336 IRIA LAB
   LAVILLE A, 1991, J SYMB COMPUT, V11, P321, DOI 10.1016/S0747-7171(08)80109-5
   LEFESSANT F, 2001, INT C FUNCT PROGR
   LEROY X, 2003, OBJECTIVE CAML LANGU
   MARANGET L, 1992, LISP FUNCTIONAL PROG
   PETTERSSON M, 1992, LECT NOTES COMPUTER, V641
   SEKAR RC, 1992, LECT NOTES COMPUTER, V623
   SESTOFT P, 1996, LECT NOTES COMPUTER, V1110
   Wadler P., 1987, IMPLEMENTATION FUNCT
NR 18
TC 12
Z9 13
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD MAY
PY 2007
VL 17
BP 387
EP 421
DI 10.1017/S0956796807006223
PN 3
PG 35
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 163LR
UT WOS:000246161800003
OA Bronze
DA 2024-07-18
ER

PT J
AU Harrison, WL
   Kieburtz, RB
AF Harrison, WL
   Kieburtz, RB
TI The logic of demand in Haskell
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB Haskell is a functional programming language whose evaluation is lazy by default. However, Haskell also provides pattern matching facilities which add a modicum of eagerness to its otherwise lazy default evaluation. This mixed or "non-strict" semantics can be quite difficult to reason with. This paper introduces a programming logic, P-logic, which neatly formalizes the mixed evaluation in Haskell pattern-matching as a logic, thereby simplifying the task of specifying and verifying Haskell programs. In P-logic, aspects of demand are reflected or represented within both the predicate language and its model theory, allowing for expressive and comprehensible program verification.
C1 Univ Missouri, Dept Comp Sci, Columbia, MO 65211 USA.
   Oregon Hlth & Sci Univ, OGI Sch Sci & Engn, Pacific Software Res Ctr, Portland, OR 97201 USA.
C3 University of Missouri System; University of Missouri Columbia; Oregon
   Health & Science University
RP Univ Missouri, Dept Comp Sci, Columbia, MO 65211 USA.
EM HarrisonWL@missouri.edu
CR [Anonymous], 1974, LNCS
   [Anonymous], 1986, Denotational Semantics: A Methodology for Language Development
   [Anonymous], 1992, Semantics of programming languages: structures and techniques
   [Anonymous], 1989, Cambridge Tracts in Theoretical Computer Science
   [Anonymous], 1997, The Definition of Standard ML
   [Anonymous], 2003, Haskell 98 language and libraries: the revised report
   Barr M., 1990, Category Theory for Computing Science
   CHENG JH, 1991, P 3 REF WORKSH SPRIN
   DEMOL M, 2001, P 13 INT WORKSH IMPL
   Farmer W.M., 1995, ERKENNTNIS, V43, P279
   Faxén KF, 2002, J FUNCT PROGRAM, V12, P295, DOI 10.1017/S0956796802004380
   Girard J.-Y., 1972, PhD thesis
   Gries D, 1995, LECT NOTES COMPUT SC, V1000, P366
   GUMB RD, 1997, MODERN LOGIC, V7, P25
   GUMB RD, 1996, P CADE 13 WORKSH MEC, P39
   HARPER R, 1993, ACM T PROGR LANG SYS, V15, P211, DOI 10.1145/169701.169696
   Harrison W, 2002, LECT NOTES COMPUT SC, V2386, P68
   HINDLEY R, 1969, T AM MATH SOC, V146, P29, DOI 10.2307/1995158
   Hudak P, 2000, GENTLE INTRO HASKELL
   Hudak Paul., 2000, The Haskell school of expression: learning functional programming through multimedia
   Huth Michael, 2001, LECT NOTES COMPUTER, V2028
   JONES MP, 1999, P 1999 HASK WORKSH P, P68
   Konikowska B., 1991, Fundamenta Informaticae, V14, P411
   LARSEN KG, 1990, LECT NOTES COMPUT SC, V407, P232
   MACQUEEN DB, 1984, INFORM CONTROL, V71
   MILNER R, 1978, J COMPUT SYST SCI, V17, P348, DOI 10.1016/0022-0000(78)90014-4
   Mitchell J. C., 1988, Conference Record of the Fifteenth Annual ACM Symposium on Principles of Programming Languages, P28, DOI 10.1145/73560.73563
   MITCHELL JC, 2000, C REC 15 ANN ACM S P
   MITCHELL JC, 2000, FDN PROGRAMMING LANG
   OHORI A, 1989, THESIS U PENNSYLVANI
   Ohori Atsushi., 1989, Proceedings of the fourth international conference on Functional programming languages and computer architecture, FPCA '89, P281, DOI DOI 10.1145/99370.99393
   Owe O., 1993, Formal Aspects of Computing, V5, P208, DOI 10.1007/BF01211555
   Plasmeijer R, 1999, ACM SIGPLAN NOTICES, V34, P23, DOI 10.1145/606666.606670
   SMYTH MB, 1982, SIAM J COMPUT, V11, P761, DOI 10.1137/0211062
   Thomas S. C., 1995, Journal of Tropical Forest Science, V7, P412
   Wadler P., 1992, Conference Record of the Nineteenth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P1, DOI 10.1145/143165.143169
NR 36
TC 7
Z9 8
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD NOV
PY 2005
VL 15
BP 837
EP 891
DI 10.1017/S0956796805005666
PN 6
PG 55
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 980GY
UT WOS:000233003900002
OA Bronze
DA 2024-07-18
ER

PT J
AU Calcagno, C
   Cardelli, L
   Gordon, AD
AF Calcagno, C
   Cardelli, L
   Gordon, AD
TI Deciding validity in a spatial logic for trees
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB We consider a propositional spatial logic for finite trees. The logic includes a A vertical bar B (tree composition), A -> B (the implication induced by composition), and 0 (the unit of composition). We show that the satisfaction and validity problems are equivalent, and decidable. The crux of the argument is devising a finite enumeration of trees to consider when deciding whether a spatial implication is satisfied. We introduce a sequent calculus for the logic, and show it to be sound and complete with respect to an interpretation in terms of satisfaction. Finally, we describe a complete proof procedure for the sequent calculus. We envisage applications in the area of logic-based type systems for semistructured data. We describe a small programming language based on this idea.
C1 Univ London Imperial Coll Sci Technol & Med, London, England.
   Microsoft Res, Cambridge, England.
C3 Imperial College London; Microsoft
RP Univ London Imperial Coll Sci Technol & Med, London, England.
EM ccris@doc.ic.ac.uk
OI Cardelli, Luca/0000-0002-8705-8488
CR Bray Tim., 1998, EXTENSIBLE MARKUP LA
   BUNEMAN P, 1997, 16 ACM S PRINC DAT S, P117
   Caires L, 2003, INFORM COMPUT, V186, P194, DOI 10.1016/S0890-5401(03)00137-8
   Caires L, 1998, LECT NOTES COMPUT SC, V1381, P42, DOI 10.1007/BFb0053562
   CAIRES L, 2002, LECT NOTES COMPUTER, V2421, P209
   Calcagno C., 2001, LNCS, V2245, P108, DOI [10.1007/3-540-45294-X10, DOI 10.1007/3-540-45294-X10]
   CALCAGNO C, 2002, MSRTR2002113
   CALCAGNO C, 2003, TLDI, P62
   Cardelli L., 2000, Conference Record of POPL'00: 27th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages. Papers Presented at the Symposium, P365, DOI 10.1145/325694.325742
   Cardelli L, 2002, LECT NOTES COMPUT SC, V2380, P597
   Cardelli L, 2001, LECT NOTES COMPUT SC, V2044, P46
   Cardelli L, 2001, LECT NOTES COMPUT SC, V2028, P1
   CHARATONIK W, 2003, THEOR COMPUT SCI, V300, P379
   CHARATONIK W, 2001, LNCS, V2142, P339
   COHEN E, 2002, UNPUB VALIDITY MODEL
   Conforti G, 2004, LECT NOTES COMPUT SC, V2987, P105
   DALZILIO S, 2004, 31 ACM S PRINC PROGR, P135
   Hirschkoff D, 2002, IEEE S LOG, P423, DOI 10.1109/LICS.2002.1029850
   HOSOYA H, 2001, 25 ANN ACM SIGPLAN S, P67
   HOSOYA H, 2000, LECT NOTES COMPUTER, V1997, P226
   ISHTIAQ S, 2001, 28 ACM S PRINC PROGR, P14
   LINCOLN P, 1992, ANN PURE APPL LOGIC, V56, P239, DOI 10.1016/0168-0072(92)90075-B
   LOZES E, 2003, 10 INT WORKSH EXPR C
   LUGIEZ D, 2002, MULTITREES AUTOMATA
   O'Hearn PW., 2001, Local reasoning about programs that alter data structures, volume 2142 of LNCS, V2142, P1
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   URQUHART A, 1984, J SYMBOLIC LOGIC, V49, P1059, DOI 10.2307/2274261
NR 27
TC 13
Z9 15
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD JUL
PY 2005
VL 15
BP 543
EP 572
DI 10.1017/S0956796804005404
PN 4
PG 30
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 955CJ
UT WOS:000231202300002
OA Bronze
DA 2024-07-18
ER

PT J
AU Huet, G
AF Huet, G
TI A functional toolkit for morphological and phonological processing,
   application to a Sanskrit tagger
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB We present the Zen toolkit for morphological and phonological processing of natural languages. This toolkit is presented in literate programming style, in the Pidgin ML subset of the Objective Caml functional programming language. This toolkit is based on a systematic representation of finite state automata and transducers as decorated lexical trees. All operations on the state space data structures use the zipper technology, and a uniform sharing functor permits systematic maximum sharing as dags. A particular case of lexical maps is specially convenient for building invertible morphological operations such as inflected forms dictionaries, using a notion of differential word. As a particular application, we describe a general method for tagging a natural language text given as a phoneme stream by analysing possible euphonic liaisons between words belonging to a lexicon of inflected forms. The method uses the toolkit methodology by constructing a non-deterministic transducer, implementing rational rewrite rules, by mechanical decoration of a trie representation of the lexicon index. The algorithm is linear in the size of the lexicon. A coroutine interpreter is given, and its correctness and completeness are formally proved. An application to the segmentation of Sanskrit by sandhi analysis is demonstrated.
C1 Inst Natl Rech Informat & Automat, F-78153 Le Chesnay, France.
RP Huet, G (corresponding author), Inst Natl Rech Informat & Automat, BP 105, F-78153 Le Chesnay, France.
EM Gerard.Huet@inria.fr
CR [Anonymous], P 17 INT C AUT LANG
   [Anonymous], 1992, SANSKRIT INTRO CLASS
   [Anonymous], P 3 C APPL NAT LANG
   Beesley K. R., 2003, Finite-State Morphology: Xerox Tools and Techniques
   BERGAIGNE A, 1884, MANUEL ETUDIER LANGU
   BURSTALL R, 1984, P INT C 5 GEN COMP S
   BURSTALL RM, 1969, COMPUT J, V12, P41, DOI 10.1093/comjnl/12.1.41
   Cousineau G., 1998, FUNCTIONAL APPROACH
   DACIUK J., 2000, COMPUTATIONAL LINGUI, V26
   DERSHOWITZ N, 1979, COMMUN ACM, V22, P465, DOI 10.1145/359138.359142
   DRAUGLAUDRE D, 2001, CAMLP4 PREPROCESSOR
   FILLOZAT PS, 1988, GRAMMAIRE SANSKRITE
   GORDON M, 1977, CSR1677 U ED DEP COM
   HUET G, 2002, ZEN COMPUTATIONAL LI
   Huet G, 2003, INT C NAT LANG PROC
   HUET G, 2003, 35 YEARS AUTOMATING
   HUET G, 2003, LECT NOTES COMPUTER, V2772
   HUET G, 2003, PRACT ASP DECL LANG
   Huet Gerard, 2003, 12 WORLD SANSKR C HE
   Huet Gerard P., 1997, Journal of Functional Programming, V7, P549
   Kaplan R. M., 1994, Computational Linguistics, V20, P331
   KARTTUNEN L, 2000, P CIAA 2000
   KARTTUNEN L, 1995, ACL 95
   KARTTUNEN L, ESSLLI 2001 WORKSHOP
   KESSLER B, 1995, 12 W COAST C FORM LI
   KESSLER B, 1992, THESIS STANFORD U
   KOSKENNIEMI K, 1984, 10 INT C COMP LING
   LANDIN PJ, 1966, COMMUN ACM, V9, P157, DOI 10.1145/365230.365257
   LAPORTE E, 1995, 9414 IGM U MARN LA V
   Leroy Xavier., 2000, The Objective Caml system
   Mohri M., 1997, COMPUTATIONAL LINGUI, V23
   PAULSON LC, 1991, ML WORKING PROGRAMME
   RANTA A, 2003, J FUNCT PROGRAM, V13
   ROCHE E, 1995, COMPUT LINGUIST, V21, P227
   Roche E., 1997, Finite-State Language Processing
   Sproat R, 1996, COMPUT LINGUIST, V22, P377
   Sproat R. W., 1992, Morphology and computation, DOI DOI 10.7551/MITPRESS/4775.001.0001
   Weis P., 1999, LANGAGE CAML
   WHITNEY W.D, 1997, ROOTS VERB FORMS PRI
   Whitney W.D., 1924, SANSKRIT GRAMMAR
   [No title captured]
NR 41
TC 19
Z9 19
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 40 WEST 20TH ST, NEW YORK, NY 10011-4211 USA
SN 0956-7968
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD JUL
PY 2005
VL 15
BP 573
EP 614
DI 10.1017/S0956796804005416
PN 4
PG 42
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 955CJ
UT WOS:000231202300003
OA Bronze
DA 2024-07-18
ER

PT J
AU Luke, EA
   George, T
AF Luke, EA
   George, T
TI Loci: a rule-based framework for parallel mufti-disciplinary simulation
   synthesis
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB We present a rule-based framework for the development of scalable parallel high performance simulations for a broad class of scientific applications (with particular emphasis on continuum mechanics). We take a pragmatic approach to our programming abstractions by implementing structures that are used frequently and have common high performance implementations on distributed memory architectures. The resulting framework borrows heavily from rule-based systems for relational database models, however limiting the scope to those parts that have obvious high performance implementation. Using our approach, we demonstrate predictable performance behavior and efficient utilization of large scale distributed memory architectures on problems of significant complexity involving multiple disciplines.
C1 Mississippi State Univ, Dept Comp Sci & Engn, Mississippi State, MS 39762 USA.
   Texas A&M Univ, Dept Comp Sci, College Stn, TX 77843 USA.
C3 Mississippi State University; Texas A&M University System; Texas A&M
   University College Station
RP Mississippi State Univ, Dept Comp Sci & Engn, Mississippi State, MS 39762 USA.
EM luke@cse.msstate.edu; tgeorge@cs.tamu.edu
CR Allen Gabrielle., 2000, HPDC, P253
   [Anonymous], UK NATURE CONSERVATI
   [Anonymous], 2003, ANL9511
   Armstrong R., 1999, Proceedings. The Eighth International Symposium on High Performance Distributed Computing (Cat. No.99TH8469), P115, DOI 10.1109/HPDC.1999.805289
   BASSETTI F, 1998, HIGH PERFORMANCE NET
   Blelloch GuyE., 1993, Proceedings of the Fourth ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming, PPoPP'93, P102, DOI DOI 10.1145/155332.155343
   Breitinger S, 1997, SECOND INTERNATIONAL WORKSHOP ON HIGH-LEVEL PARALLEL PROGRAMMING MODELS AND SUPPORTIVE ENVIRONMENTS, PROCEEDINGS, P120, DOI 10.1109/HIPS.1997.582964
   CANN D, 1992, COMMUN ACM, V35, P81, DOI 10.1145/135226.135231
   *CASC, 2003, HIGH PERF COMP TECHN
   CLEARY A, 1998, UCRLJC131823 LLNL
   FOSTER I, 1990, STRAND NEW CONCEPTS
   GEIST A, 1994, PVM 3 USERS GUIDE RE
   Gerlach J, 1998, LECT NOTES COMPUT SC, V1505, P215
   Govindaraju M, 2003, CCGRID 2003: 3RD IEEE/ACM INTERNATIONAL SYMPOSIUM ON CLUSTER COMPUTING AND THE GRID, PROCEEDINGS, P182, DOI 10.1109/CCGRID.2003.1199367
   HILL JMD, 1997, PRGTR2997 OXF U COMP
   *HPF, 1993, HIGH PERF FORTR LANG
   Karypis G, 1998, J PARALLEL DISTR COM, V48, P96, DOI 10.1006/jpdc.1997.1404
   KOTLYAR V, 1997, SIAM C PAR PROC SCI, V8
   Luke E. A., 1999, Computing in Object-Oriented Parallel Environments. Third International Symposium, ISCOPE 99. Proceedings (Lecture Notes in Computer Science Vol.1732), P142
   LUKE EA, 2001, P 39 AIAA AER SCI M
   *MPI, 1997, MPI 2 EXT MESS PASS
   *OP, 1998, OP C C APPL PROGR IN
   *OP, 1997, OP FORTR APPL PROGR
   PANDE SS, 1994, J PARALLEL DISTR COM, V21, P223, DOI 10.1006/jpdc.1994.1054
   POINTON RF, 2000, LECT NOTES COMPUTER, V2011, P54
   Trinder Philip W., 1998, J FUNCTIONAL PROGRAM, V8, P23, DOI DOI 10.1017/S0956796897002967
   Trinder PW, 2002, J FUNCT PROGRAM, V12, P469, DOI 10.1017/S0956796802004343
   Ullman J., 1988, PRINCIPLES DATABASE, P53
   VALIANT LG, 1990, COMMUN ACM, V33, P103, DOI 10.1145/79173.79181
   WEST J, 2003, COMMUNICATION
NR 30
TC 51
Z9 66
U1 0
U2 2
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD MAY
PY 2005
VL 15
BP 477
EP 502
DI 10.1017/S0956796805005514
PN 3
PG 26
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 941QJ
UT WOS:000230229000005
OA Bronze
DA 2024-07-18
ER

PT J
AU Crary, K
   Kliger, A
   Pfenning, F
AF Crary, K
   Kliger, A
   Pfenning, F
TI A monadic analysis of information flow security with mutable state
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID LANGUAGE
AB We explore the logical underpinnings of higher-order, security-typed languages with mutable state. Our analysis is based on a logic of information flow derived from lax logic and the monadic metalanguage. Thus, our logic deals with mutation explicitly, with impurity reflected in the types, in. contrast to most higher-order security-typed languages, which deal with mutation implicitly via side-effects. More importantly, we also take a store-oriented view of security, wherein security levels are associated with elements of the mutable store. This view matches closely with the operational semantics of low-level imperative languages where information flow is expressed by operations on the store. An interesting feature of our analysis lies in its treatment of upcalls (low-security computations that include high-security ones), employing an "informativeness" judgment indicating under what circumstances a type carries useful information.
C1 Carnegie Mellon Univ, Pittsburgh, PA 15213 USA.
C3 Carnegie Mellon University
RP Carnegie Mellon Univ, 5000 Forbes Ave, Pittsburgh, PA 15213 USA.
EM crary@cs.cmu.edu; aleksey@cs.cmu.edu; fp@cs.cmu.edu
CR ABADI M, 1999, 26 ACM S PRINC PROGR, P147
   HARRISON W, 2003, FDN COMP SEC WORKSH
   HEINTZE N, 25 ACM S PRINC PROGR, P365
   HONDA K, 2002, 29 ANN ACM S PRINC P, P81
   HUET G, 1980, J ACM, V27, P797, DOI 10.1145/322217.322230
   MOGGI E, 1991, INFORM COMPUT, V93, P55, DOI 10.1016/0890-5401(91)90052-4
   MOGGI E, 1989, FOURTH ANNUAL SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P14
   Morrisett G, 1999, ACM T PROGR LANG SYS, V21, P527, DOI 10.1145/319301.319345
   MYERS AC, 1999, 26 ACM S PRINC PROGR, P228
   Pfenning F., 2001, Mathematical Structures in Computer Science, V11, P511, DOI 10.1017/S0960129501003322
   Pottier F, 2003, ACM T PROGR LANG SYS, V25, P117, DOI 10.1145/596980.596983
   Sabelfeld A, 2003, IEEE J SEL AREA COMM, V21, P5, DOI 10.1109/JSAC.2002.806121
   SMITH G, 1998, 25 ACM S PRINC PROGR, P355
   Volpano D., 1996, Journal of Computer Security, V4, P167
   Zdancewic S., 2002, Higher-Order and Symbolic Computation, V15, P209, DOI 10.1023/A:1020843229247
   Zdancewic S, 2001, LECT NOTES COMPUT SC, V2028, P46
   Zdancewic S, 2001, P IEEE CSFW, P15, DOI 10.1109/CSFW.2001.930133
   Zdancewic S.A., 2002, THESIS CORNELL U ITH
   Zdancewic Steve, 2003, ELECT NOTES THEORETI
NR 19
TC 20
Z9 27
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD MAR
PY 2005
VL 15
BP 249
EP 291
DI 10.1017/S0956796804005441
PN 2
PG 43
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 912MM
UT WOS:000228082700005
OA Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Barthe, G
   Coquand, T
AF Barthe, G
   Coquand, T
TI Remarks on the equational theory of non-normalizing pure type systems
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB Pure Type Systems (PTS) come in two flavours: domain-free systems with untyped gimel-abstractions (i.e. of the form gimelx : A. M); and domain-free systems with typed gimel-abstractions (i.e. of the form gimelx : A. M). Both flavours of systems are related by an erasure function \.\ that removes types from gimel-abstractions. Preservation of Equational Theory, which states the equational theories of both systems coincide through the erasure function, is a property of functional and normalizing PTSs. In this paper we establish that Preservation of Equational Theory fails for some non-normalizing PTSs, including the PTS with * : *. The gist of our argument is to exhibit a typable expression Y-H whose erasure \Y\ is a fixpoint combinator, but which is not a fixpoint combinator itself.
C1 INRIA Sophia Antipolis, Valbonne, France.
   Chalmers Univ Technol, S-41296 Gothenburg, Sweden.
C3 Chalmers University of Technology
RP Barthe, G (corresponding author), INRIA Sophia Antipolis, Valbonne, France.
EM Gilles.Barthe@inria.fr; coquand@cs.chalmers.se
CR [Anonymous], 1992, Handbook of Logic in Computer Science
   BAKEL S, 1997, ANN PURE APPL LOGIC, V86, P267
   BARENDREGT H, 1984, LAMBDA CALCULAS ITS, V103
   BARTHE G, 2000, J FUNCTIONAL PROGRAM, V10, P417
   BARTHE G, 1999, P CSL 98 LECT NOTES, V1584, P241
   Coquand T., 1986, Proceedings of the Symposium on Logic in Computer Science (Cat. No.86CH2321-8), P227
   Coquand T., 1994, Journal of Functional Programming, V4, P77, DOI 10.1017/S0956796800000952
   GEUVERS H, 1992, PROCEEDINGS OF THE SEVENTH ANNUAL IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P453, DOI 10.1109/LICS.1992.185556
   Geuvers H., 1991, Journal of Functional Programming, V1, P155
   GEUVERS H, 1994, IEEE S LOG, P320, DOI 10.1109/LICS.1994.316057
   GEUVERS H, 1993, THESIS U NIJMEGEN NE
   Girard J.-Y., 1972, THESIS U PARIS
   Howe D. J., 1987, Proceedings of the Symposium on Logic in Computer Science (Cat. No.87CH2464-6), P205
   Hurkens A. J. C., 1995, Typed Lambda Calculi and Applications. Second International Conference on Typed Lambda Calculi and Applications, TLCA '95. Proceedings, P266, DOI 10.1007/BFb0014058
   JUTTING LSV, 1993, INFORM COMPUT, V105, P30, DOI 10.1006/inco.1993.1038
   Klop J.W., 1992, HDB LOGIC COMPUTER S, VII, P1
   Martin-Lof Per, 1971, A Theory of Types
   Meyer Albert R., 1986, P 13 ACM SIGACT SIGP, P287, DOI DOI 10.1145/512644.512671
   REINHOLD MB, 1989, MITLCSTR458
NR 19
TC 1
Z9 1
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD MAR
PY 2004
VL 14
BP 191
EP 209
PN 2
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 809LL
UT WOS:000220638100004
DA 2024-07-18
ER

PT J
AU Thiemann, P
AF Thiemann, P
TI Program specialization for execution monitoring
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article; Proceedings Paper
CT International Workshop on Semantics, Applications, and Implementation of
   Program Generation
CY SEP 20, 2000
CL MONTREAL, CANADA
SP ACM, SIGPLAN
AB Execution monitoring is a proven tool for securing program execution and to enforce safety properties on applets and mobile code, in particular. Inlining monitoring tools perform their task by inserting certain run-time checks into the monitored application before executing it. For efficiency reasons, they attempt to insert as few checks as possible using techniques ranging from simple ad hoc optimizations to theorem proving. Partial evaluation is a powerful tool for specifying and implementing program transformations. The present work demonstrates that standard partial evaluation techniques are sufficient to transform an interpreter equipped with monitoring code into a non-standard compiler. This compiler generates application code, which contains the infined monitoring code. If the monitor is enforcing a security policy, then the result is a secured application code. If the policy is defined using a security automaton, then the transformation can elide many run-time checks by using abstract interpretation. Our approach relies on proper staging of the monitoring interpreter. The transformation runs in linear time, produces code linear in the size of the original program, and is guaranteed not to duplicate incoming code.
C1 Univ Freiburg, Inst Informat, D-79110 Freiburg, Germany.
C3 University of Freiburg
RP Thiemann, P (corresponding author), Univ Freiburg, Inst Informat, Georges Kohler Allee 079, D-79110 Freiburg, Germany.
EM thiemann@informatik.uni-freiburg.de
CR ADLTABATABAI AR, 1996, P ACM SIGPLAN C PROG
   ALPERN B, 1987, DISTRIB COMPUT, V2, P117, DOI 10.1007/BF01782772
   [Anonymous], 1993, Partial Evaluation and Automatic Program Generation
   [Anonymous], SOSP
   APPEL AW, 2000, P 27 ANN ACM S PRINC
   Bondorf A., 1992, Proceedings of the 1992 ACM Conference on Lisp and Functional Programming, P1, DOI 10.1145/141471.141483
   COLCOMBET T, 2000, P 27 ANN ACM S PRINC
   Consel C., 1995, Journal of Functional Programming, V5, P461, DOI 10.1017/S0956796800001453
   CONSEL C, 1993, ACM T PROGR LANG SYS, V15, P463, DOI 10.1145/169683.174155
   CONSEL C, 1993, P 20 ANN ACM S PRINC, P493
   CONSEL C, 1991, P C PROGR LANG DES I
   Cousot Patrick, 1977, P 4 ACM S PRINC PROG, P238, DOI [10.1145/512950.512973, DOI 10.1145/512950.512973]
   CRARY K, 1999, P 26 ACM SIGPLAN SIG, P262
   Danvy O, 1996, P 23 ANN ACM S PRINC, P242
   Erlingsson U., 2000, IEEE S SEC PRIV OAKL
   Erlingsson Ulfar, 1999, P NEW SEC PAR WORKSH
   EVANS D, 1999, IEEE S SEC POL
   Flanagan Cormac, 1993, SIGPLAN Conf. Programming Language Design and Impl. (PLDI'93), P237, DOI [DOI 10.1145/155090.155113, 10.1145/155090.155113]
   GLUCK R, 1994, J FUNCTIONAL PROGRAM, V4, P499
   GLUCK R, 1994, IEEE INT C COMP LANG, P183
   GLUCK R, 1994, LNCS, V864, P432
   Hatcliff J., 1997, Mathematical Structures in Computer Science, V7, P507, DOI 10.1017/S0960129597002405
   Hatcliff J, 1995, LECT NOTES COMPUT SC, V982, P279, DOI 10.1007/BFb0026826
   HATCLIFF J, 1994, P 21 ANN ACM S PRINC, P458
   *J2SE, 2000, JAV 2 PLATF
   Jones N., 1995, HDB LOGIC COMPUTER S, V4
   Jones N. D., 1997, LNCS, V1302, P396
   KISHON A, 1991, P C PROGR LANG DES I
   KOZEN D, 1999, TR991751 CORN U COMP
   LAUNCHBURY J, 1991, DRAFT P 4 ANN GLASG, P210
   LAWALL J, 1997, LECT NOTES COMPUTER, V1281, P165
   Lawall J. L., 1994, Proceedings of the 1994 ACM Conference on LISP and Functional Programming, P227, DOI 10.1145/182409.182483
   LEE I, 1999, 1999 INT C PAR DISTR
   LEE P, 1996, P C PROGR LANG DES I
   LINDHOLM T, 1996, JAVA VIRTUAL MACHINE
   LUCCO S, 1995, WORLDWIDEWEB JL, V1
   MICHAEL NG, 2000, 17 INT C AUT DED CAD
   MORRISETT G, 1998, P 25 ANN ACM S PRINC
   NECULA GC, 1998, LNCS, V1419, P61, DOI DOI 10.1007/3-540-68671-1
   NECULA GC, 1997, P 24 ANN ACM S PRINC
   PLATTNER B, 1981, COMPUTER, V14, P76, DOI 10.1109/C-M.1981.220255
   *PLDI, 1996, P ACM SIGPLAN C PROG
   *PLDI, 1991, P C PROGR LANG DES I
   REPS T, 2000, P 27 ANN ACM S PRINC
   Schneider F. B., 2000, ACM Transactions on Information and Systems Security, V3, P30, DOI 10.1145/353323.353382
   Thiemann P., 1999, Journal of Functional Programming, V9, P483, DOI 10.1017/S0956796899003469
   Thiemann P, 1999, LECT NOTES COMPUT SC, V1706, P412
   THIEMANN P, 2001, LECT NOTES COMPUTER
   THIEMANN P, 2000, PGG SYSTEM USER MANU
   Turchin V. F., 1993, Journal of Functional Programming, V3, P283, DOI 10.1017/S0956796800000757
   WALKER D, 2000, P 27 ANN ACM S PRINC
   WEISE D, 1991, LECT NOTES COMPUT SC, V523, P165
   Wright AK, 1998, ACM T PROGR LANG SYS, V20, P166, DOI 10.1145/271510.271523
   [No title captured]
NR 54
TC 1
Z9 1
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD MAY
PY 2003
VL 13
BP 573
EP 600
DI 10.1017/S0956796802004586
PN 3
PG 28
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 689BA
UT WOS:000183470700006
OA Bronze
DA 2024-07-18
ER

PT J
AU Barthe, G
   Capretta, V
   Pons, O
AF Barthe, G
   Capretta, V
   Pons, O
TI Setoids in type theory
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB Formalising mathematics in dependent type theory often requires to represent sets as setoids, i.e. types with an explicit equality relation. This paper surveys some possible definitions of setoids and assesses their suitability as a basis for developing mathematics. According to whether the equality relation is required to be reflexive or not we have total or partial setoid, respectively. There is only one definition of total setoid, but four different definitions of partial setoid, depending on four different notions of setoid function. We prove that one approach to partial setoids in unsuitable, and that the other approaches can be divided in two classes of equivalence. One class contains definitions of partial setoids that are equivalent to total setoids; the other class contains an inherently different definition, that has been useful in the modeling of type systems. We also provide some elements of discussion on the merits of each approach from the viewpoint of formalizing mathematics. In particular, we exhibit a difficulty with the common definition of subsetoids; in the partial setoid approach.
C1 INRIA Sophia Antipolis, F-06902 Sophia Antipolis, France.
RP INRIA Sophia Antipolis, 2004 Route Lucioles,BP 93, F-06902 Sophia Antipolis, France.
EM Gilles.Barthe@inria.fr; Venanzio.Capretta@inria.fr; pons@cnam.fr
OI BARTHE, Gilles/0000-0002-3853-1777; Capretta,
   Venanzio/0000-0003-1220-7706
CR Aczel P., 1999, Types for Proofs and Programs. International Workshop, TYPES'98 (Lecture Notes in Computer Science Vol.1657), P1
   ACZEL P, 1978, P LOG C, P77
   Aczel P., 1986, Logic, Methodology and Philosophy of Science VII, P17
   Aczel P., 1982, STUDIES LOGIC FDN MA, V110, P1
   ACZEL P, 1993, UNPUB GALOIS THEORY
   Altenkirch T., 1999, Proceedings. 14th Symposium on Logic in Computer Science (Cat. No. PR00158), P412, DOI 10.1109/LICS.1999.782636
   [Anonymous], 1986, Introduction to higher-order categorical logic
   [Anonymous], 1985, Foundations of Constructive Mathematics
   [Anonymous], STUDIES LOGIC FDN MA
   BAILEY A, 1993, THESIS U EDINBURGH
   Barbanera F., 1996, Journal of Functional Programming, V6, P519, DOI 10.1017/S0956796800001829
   BARTHE G, 1995, LECT NOTES COMPUTER, V902, P16
   BARTHE G, 1995, CSIR9508 U NIJM
   Bishop E., 1967, Foundations of Constructive Analysis
   CAPRETTA V, 2002, THESIS U NIJMEGEN
   CHIRIMAR J, 1992, LECT NOTES COMPUT SC, V613, P165, DOI 10.1007/BFb0021090
   Ciaffaglione A., 2000, Types for Proofs and Programs. International Workshop, TYPES'99. Selected Papers (Lecture Notes in Computer Science Vol.1956), P114
   *COQ DEV TEAM, 2002, COQ PROOF ASS US GUI
   COQUAND C, 1999, P LFM 99 HELD CONJ P
   COQUAND T, 1990, LOGIC COMPUTER SCI, P91
   COURTIEU P, 2001, THESIS U PARIS 11
   Cubric D., 1998, Mathematical Structures in Computer Science, V8, P153, DOI 10.1017/S0960129597002508
   GEUVERS H, 2001, INF P CALCULEMUS 01
   Harrison J., 1998, Theorem Proving with the Real Numbers
   Hofmann M., 1995, Typed Lambda Calculi and Applications. Second International Conference on Typed Lambda Calculi and Applications, TLCA '95. Proceedings, P216, DOI 10.1007/BFb0014055
   Hofmann M., 1995, THESIS U EDINBURGH
   HOFMANN M, 1994, LECT NOTES COMPUTER, V806, P166
   Huet G, 2000, FOUNDAT COMPUT, P239
   JACOBS B, 1999, STUDIES LOGIC FDN MA, V141
   Jones C., 1993, Logical Environments, P297
   LACAS S, 1999, WHICH CHOICES IMPLE
   Luo Z., 1994, COMPUTATION REASONIN
   Luo Z., 1992, ECSLFCS92211 U ED DE
   MAIETTI ME, 1999, LECT NOTES COMPUTER, V1657, P164
   NORDSTROM B, 1990, INT SERIES MONOGRAPH, V7
   QIAO H, 2000, LECT NOTES COMPTUER, V1956, P174
   SAIBI A, 1997, POPL, P292
   SAIBI A, 1998, THESIS U PARIS 6
   Salveson A., 1988, Proceedings of the Third Annual Symposium on Logic in Computer Science (Cat. No.88CH2608-8), P384, DOI 10.1109/LICS.1988.5135
   Troelstra A.S., 1988, Studies in Logic and the Foundations of Mathematics, V121
   Werner B., 1997, Theoretical Aspects of Computer Software. Third International Symposium, TACS '97. Proceedings, P530, DOI 10.1007/BFb0014566
   WERNER B, 1994, THESIS U PARIS 7
NR 42
TC 54
Z9 56
U1 0
U2 1
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD MAR
PY 2003
VL 13
BP 261
EP 293
DI 10.1017/S0956796802004501
PN 2
PG 33
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 671RT
UT WOS:000182478400002
OA Bronze
DA 2024-07-18
ER

PT J
AU Hutton, G
AF Hutton, Graham
TI Programming language semantics: It's easy as 1,2,3
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB Programming language semantics is an important topic in theoretical computer science, but one that beginners often find challenging. This article provides a tutorial introduction to the subject, in which the language of integers and addition is used as a minimal setting in which to present a range of semantic concepts in simple manner. In this setting, it is easy as 1,2,3.
C1 [Hutton, Graham] Univ Nottingham, Nottingham NG7 2RD, England.
C3 University of Nottingham
RP Hutton, G (corresponding author), Univ Nottingham, Nottingham NG7 2RD, England.
EM graham.hutton@nottingham.ac.uk
OI Hutton, Graham/0000-0001-9584-5150
FU I would like to thank Jeremy Gibbons, Ralf Hinze, Peter Thiemann, Andrew
   Tolmach and the anonymous reviewers for many useful comments and
   suggestions that significantly improved the article. This work was
   funded by EPSRC grant EP/P00587X/1, <italic>Unified [EP/P00587X/1];
   EPSRC
FX I would like to thank Jeremy Gibbons, Ralf Hinze, Peter Thiemann, Andrew
   Tolmach and the anonymous reviewers for many useful comments and
   suggestions that significantly improved the article. This work was
   funded by EPSRC grant EP/P00587X/1, <ITALIC>Unified Reasoning About
   Program Correctness and Efficiency</ITALIC>.
CR Abbott M, 2005, FUND INFORM, V65, P1
   Abramsky Samson, 1999, NATO ASI SER, P1, DOI DOI 10.1007/978-3-642-58622-4_1
   Ager M.S., 2003, RS0314 BRICS U AARH
   Ager Mads Sig, 2003, P 5 ACM SIGPLAN INT, P8
   [Anonymous], 1986, Denotational Semantics: A Methodology for Language Development
   [Anonymous], 1996, Algebraic Semantics of Imperative Programs, DOI DOI 10.7551/MITPRESS/1188.001.0001
   [Anonymous], 1999, Communicating and Mobile Systems: The Calculus
   [Anonymous], 1994, Handbook of logic in computer science
   [Anonymous], 2004, J. Logic Algebraic Program
   Bahr P., 2020, J. Funct. Program, P30
   Bahr P., 2023, P ACM PROGRAM LANG, P740
   Bahr P., 2022, P ACM PROGRAM LANG, P80
   Bahr P., 2015, J. Funct. Program, P25, DOI 10.5121/ijsea.2015.6103
   BURSTALL RM, 1969, COMPUT J, V12, P41, DOI 10.1093/comjnl/12.1.41
   Danvy O., 2004, Research Report RS-04-26
   Danvy O, 2008, ACM SIGPLAN NOTICES, V43, P131, DOI 10.1145/1411203.1411206
   Danvy O, 2009, SCI COMPUT PROGRAM, V74, P534, DOI 10.1016/j.scico.2007.10.007
   Duignan B., 2018, Encyclopedia Britannica
   Dybjer P., 1994, Formal Aspects of Computing, V6, P440, DOI 10.1007/BF01211308
   FELLEISEN M, 1992, THEOR COMPUT SCI, V103, P235, DOI 10.1016/0304-3975(92)90014-7
   Gibbons J., 1998, P 3 ACM SIGPLAN INT
   Harper R, 2016, Practical Foundations for Programming Languages
   HOARE CAR, 1969, COMMUN ACM, V12, P576, DOI 10.1145/363235.363259
   Hope C, 2006, LECT NOTES COMPUT SC, V4015, P91
   Hope Catherine., 2008, A Functional Semantics for Space and Time
   Hu L., 2010, Trends in Functional Programming, V10, P17
   Hu L., 2009, Trends in Functional Programming, V9, P129
   Huet G., 1997, Journal of Functional Programming, V7, P549, DOI 10.1017/S0956796897002864
   Hutton Graham, 2016, A List of Successes that can Change the World. Essays Dedicated to Philip Wadler on the Occasion of his 60th Birthday. LNCS 9600, P187, DOI 10.1007/978-3-319-30936-1_10
   Hutton G., 2006, Trends in Functional Programming, V5, P49
   Hutton G., 2004, LNCS, V3125
   Hutton G., 1998, P 3 INT C FUNCT PROG
   Hutton G., 2017, J. Funct. Program, P27
   Hutton G, 2007, J FUNCT PROGRAM, V17, P777, DOI 10.1017/S0956796807006363
   KAHN G, 1987, LECT NOTES COMPUT SC, V247, P22
   LANDIN PJ, 1964, COMPUT J, V6, P308, DOI 10.1093/comjnl/6.4.308
   McBride C, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P287, DOI 10.1145/1328438.1328474
   McCarthy John., 1967, P S APPL MATH VOLUME, V19, P33
   MEIJER E, 1991, LECT NOTES COMPUT SC, V523, P124
   MGS, 2022, Midlands Graduate School in the Foundations of Computing Science
   Moran A., 1998, Call-By-Name, Call-By-Need, and McCarthy's Amb
   Mosses P., 2005, Action Semantics
   Mosses PD, 2004, J LOGIC ALGEBR PROGR, V60-1, P195, DOI 10.1016/j.jlap.2004.03.008
   Norell Ulf, 2007, PRACTICAL PROGRAMMIN
   OPLSS, 2023, Oregon Programming Languages Summer School
   Pickard M., 2021, P ACM PROGRAM LANG, P1
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Plotkin G., 1981, Report DAIMI-FN-19, P3
   Reynolds J.C., 1998, Theories of Programming Languages
   Reynolds John C., 1972, ACM 72, V2, P717, DOI DOI 10.1023/A:1010027404223
   Scott D.S., 1971, Technical Monograph PRG-6
   Wadler Philip, 1998, The Expression Problem
   WAND M, 1982, ACM T PROGR LANG SYS, V4, P496, DOI 10.1145/357172.357179
   Winskel G., 1993, The Formal Semantics of Programming Languages
   Wright J., 2005, Compiling and Reasoning about Exceptions and Interrupts
NR 55
TC 0
Z9 0
U1 1
U2 1
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD OCT 26
PY 2023
VL 33
AR e9
DI 10.1017/S0956796823000072
PG 26
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA U8GN2
UT WOS:001087131900001
OA hybrid
DA 2024-07-18
ER

PT J
AU Sulzmann, M
   Wehr, S
AF Sulzmann, Martin
   Wehr, Stefan
TI A type-directed, dictionary-passing translation of method overloading
   and structural subtyping in Featherweight Generic Go
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID SYNTACTIC LOGICAL RELATIONS
AB Featherweight Generic Go (FGG) is a minimal core calculus modeling the essential features of the programming language Go. It includes support for overloaded methods, interface types, structural subtyping, and generics. The most straightforward semantic description of the dynamic behavior of FGG programs is to resolve method calls based on runtime type information of the receiver. This article shows a different approach by defining a type-directed translation from ${\textrm{FGG}<^>{-}}$ to an untyped lambda-calculus. ${\textrm{FGG}<^>{-}}$ includes all features of FGG but type assertions. The translation of an ${\textrm{FGG}<^>{-}}$ program provides evidence for the availability of methods as additional dictionary parameters, similar to the dictionary-passing approach known from Haskell type classes. Then, method calls can be resolved by a simple lookup of the method definition in the dictionary. Every program in the image of the translation has the same dynamic semantics as its source ${\textrm{FGG}<^>{-}}$ program. The proof of this result is based on a syntactic, step-indexed logical relation. The step index ensures a well-founded definition of the relation in the presence of recursive interface types and recursive methods. Although being non-deterministic, the translation is coherent.
C1 [Sulzmann, Martin] Karlsruhe Univ Appl Sci, Karlsruhe, Germany.
   [Wehr, Stefan] Offenburg Univ Appl Sci, Offenburg, Germany.
C3 Karlsruhe University of Applied Sciences; Hochschule Offenburg
RP Sulzmann, M (corresponding author), Karlsruhe Univ Appl Sci, Karlsruhe, Germany.
EM martin.sulzmann@h-ka.de; stefan.wehr@hs-offenburg.de
FU Open Access Publication Fund of the Offenburg University of Applied
   Sciences, Germany
FX We would like to thank the anonymous reviewers for their valuable
   feedback and constructive suggestions, which greatly improved the
   quality of this paper. We acknowledge support by the Open Access
   Publication Fund of the Offenburg University of Applied Sciences,
   Germany.
CR Acar UA, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P309, DOI 10.1145/1328438.1328476
   Ahmed A, 2006, LECT NOTES COMPUT SC, V3924, P69
   Alpern B, 2001, ACM SIGPLAN NOTICES, V36, P108, DOI 10.1145/504311.504291
   [Anonymous], 2022, GHC User's Guide
   Appel AW, 2001, ACM T PROGR LANG SYS, V23, P657, DOI 10.1145/504709.504712
   Benton N, 2009, ACM SIGPLAN NOTICES, V44, P97, DOI 10.1145/1631687.1596567
   Bottu GJ, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341695
   Bracha G, 1998, ACM SIGPLAN NOTICES, V33, P183, DOI 10.1145/286942.286957
   Crary K, 2007, ELECTRON NOTES THEOR, V172, P259, DOI 10.1016/j.entcs.2007.02.010
   DEAN J, 1995, SIGPLAN NOTICES, V30, P93
   Driesen K, 1996, ACM SIGPLAN NOTICES, V31, P306, DOI 10.1145/236338.236369
   Ellis S., 2022, P ACM PROGR LANG, V6, P1207
   Emir B, 2006, LECT NOTES COMPUT SC, V4067, P279
   GHC Team, 2021, GHC User's Guide
   Girard J.-Y., 1972, PhD thesis
   golang, 2022, Go Programming Language
   Griesemer R, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428217
   Hall CV, 1996, ACM T PROGR LANG SYS, V18, P109, DOI 10.1145/227699.227700
   Harper R., 1995, P POPL 1995
   haskell, 2022, Haskell Programming Language
   Hur CK, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P133, DOI 10.1145/1926385.1926402
   Igarashi A, 2001, ACM T PROGR LANG SYS, V23, P396, DOI 10.1145/503502.503505
   Kennedy A, 2001, ACM SIGPLAN NOTICES, V36, P1, DOI 10.1145/381694.378797
   Laufer K., 1996, Journal of Functional Programming, V6, P485, DOI 10.1017/S0956796800001817
   Marlow Simon, 2010, Haskell 2010 language report
   MITCHELL JC, 1988, ACM T PROGR LANG SYS, V10, P470, DOI 10.1145/44501.45065
   Mitchell John C., 1996, Foundation of computing series
   Morris J. G., 2014, P HASK 2014
   Ohori A., 2021, PROGRAMMING LANGUAGE
   Olthoff W., 1989, P FPCA 1989
   Paraskevopoulou Z, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3485491
   Pierce Benjamin C., 2004, Advanced Topics in Types and Programming Languages
   Pitts AM, 1998, LECT NOTES COMPUT SC, V1443, P309, DOI 10.1007/BFb0055063
   racket-lang, 2022, Racket Programming Lanugage
   Reynolds J. C., 1974, Programming Symposium, P408
   Reynolds J. C., 1991, THEORETICAL ASPECTS
   Skorstengaard L, 2019, Arxiv, DOI arXiv:1907.11133
   STATMAN R, 1985, INFORM CONTROL, V65, P85, DOI 10.1016/S0019-9958(85)80001-2
   Sulzmann M., 2022, P MPC 2022
   Sulzmann M, 2021, LECT NOTES COMPUT SC, V13008, P102, DOI 10.1007/978-3-030-89051-3_7
   Sumii E, 2007, J ACM, V54, DOI 10.1145/1284320.1284325
   TAIT WW, 1967, J SYMBOLIC LOGIC, V32, P198, DOI 10.2307/2271658
   Taylor I. L., 2021, Type parameters proposal
   Thatte S. R., 1994, P LISP 1994
   Thiemann P, 2008, LECT NOTES COMPUT SC, V5356, P256
   WADLER P, 1989, CONFERENCE RECORD OF THE SIXTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P60, DOI 10.1145/75277.75283
   Wadler Philip, 1998, The Expression Problem
NR 47
TC 0
Z9 0
U1 1
U2 1
PU CAMBRIDGE UNIV PRESS
PI CAMBRIDGE
PA EDINBURGH BLDG, SHAFTESBURY RD, CB2 8RU CAMBRIDGE, ENGLAND
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD OCT 9
PY 2023
VL 33
AR e8
DI 10.1017/S0956796823000047
PG 63
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA IW1J0
UT WOS:001169279800001
OA hybrid, Green Submitted
DA 2024-07-18
ER

PT J
AU Siek, JG
   Thiemann, P
   Wadler, P
AF Siek, Jeremy G.
   Thiemann, Peter
   Wadler, Philip
TI Blame and coercion: Together again for the first time
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID THREESOMES; CONTRACTS
AB C#, Dart, Pyret, Racket, TypeScript, VB: many recent languages integrate dynamic and static types via gradual typing. We systematically develop four calculi for gradual typing and the relations between them, building on and strengthening previous work. The calculi are as follows: lambda B, based on the blame calculus of Wadler and Findler (2009); lambda C, inspired by the coercion calculus of Henglein (1994); lambda S inspired by the space-efficient calculus of Herman, Tomb, and Flanagan (2006); and lambda T based on the threesome calculus of Siek and Wadler (2010). While lambda B and lambda T are little changed from previous work, lambda C and lambda S are new. Together, lambda B, lambda C, lambda S, and lambda T provide a coherent foundation for design, implementation, and optimization of gradual types. We define translations from lambda B to lambda C, from lambda C to lambda S, and from lambda S to lambda T. Much previous work lacked proofs of correctness or had weak correctness criteria; here we demonstrate the strongest correctness criterion one could hope for, that each of the translations is fully abstract. Each of the calculi reinforces the design of the others: lambda C has a particularly simple definition, and the subtle definition of blame safety for lambda B is justified by the simple definition of blame safety for lambda C. Our calculus lambda S is implementation-ready: the first space-efficient calculus that is both straightforward to implement and easy to understand. We give two applications: first, using full abstraction from lambda C to lambda S to establish an equational theory of coercions; and second, using full abstraction from lambda B to lambda S to easily establish the Fundamental Property of Casts, which required a custom bisimulation and six lemmas in earlier work.
C1 [Siek, Jeremy G.] Dept Comp Sci, Bloomington, IN 47405 USA.
   [Thiemann, Peter] Fac Engn, Freiburg, Germany.
   [Wadler, Philip] Sch Informat, Edinburgh, Midlothian, Scotland.
RP Siek, JG (corresponding author), Dept Comp Sci, Bloomington, IN 47405 USA.
EM jsiek@indiana.edu; thimann@informatik.uni-freiburg.de;
   wadler@inf.ed.ac.uk
RI Siek, Jeremy Graham/ABG-8845-2020
FU NSF [1360694, 1518844, 1763922]; EPSRC [EP/K034413/1]; Microsoft
   Research PhD Scholarship; Division of Computing and Communication
   Foundations; Direct For Computer & Info Scie & Enginr [1360694] Funding
   Source: National Science Foundation; Division of Computing and
   Communication Foundations; Direct For Computer & Info Scie & Enginr
   [1763922] Funding Source: National Science Foundation
FX The authors would like to thank Jonathan Coates and Ben Sheffield,
   student at Edinburgh, who formalized some of these results and uncovered
   some incorrect claims (reported in Section 2.1). Thanks to Shayan Najd,
   Michael Greenberg, the PLDI referees, and the students of TSPL for
   comments. Siek acknowledges NSF Grants 1360694, 1518844, and 1763922.
   Wadler acknowledges EPSRC Programme Grant EP/K034413/1 and a Microsoft
   Research PhD Scholarship.
CR ABADI M, 1991, ACM T PROGR LANG SYS, V13, P237, DOI 10.1145/103135.103138
   Ahmed A, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110283
   Ahmed A, 2011, ACM SIGPLAN NOTICES, V46, P201, DOI 10.1145/1925844.1926409
   Aiken A., 1994, Conference Record of POPL '94: 21st ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P163, DOI 10.1145/174675.177847
   [Anonymous], 1993, Program Verification: Fundamental Issues in Computer Science, DOI [10.1090/psapm/019/0235771, DOI 10.1090/PSAPM/019/0235771]
   Benton N, 2008, LECT NOTES COMPUT SC, V4989, P224
   Bierman G, 2014, LECT NOTES COMPUT SC, V8586, P257
   Bierman G, 2010, LECT NOTES COMPUT SC, V6183, P76, DOI 10.1007/978-3-642-14107-2_5
   Blume M, 2006, J FUNCT PROGRAM, V16, P375, DOI 10.1017/S0956796806005971
   Bracha G, 2011, GOTO C
   Chitil O, 2012, ACM SIGPLAN NOTICES, V47, P67, DOI 10.1145/2398856.2364539
   Dimoulas C, 2012, LECT NOTES COMPUT SC, V7211, P214, DOI 10.1007/978-3-642-28869-2_11
   Dimoulas C, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P215, DOI 10.1145/1926385.1926410
   Disney T, 2011, ICFP 11 - PROCEEDINGS OF THE 2011 ACM SIGPLAN: INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P176
   ECMA, 2014, DART PROGR LANG SPEC, V2nd
   Feigenbaum L, 2008, WALKTHROUGH DYNAMIC
   Felleisen M., 1987, THESIS INDIANA U
   Feltey D, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276503
   Findler RB, 2006, LECT NOTES COMPUT SC, V3945, P226
   Findler RB, 2002, ACM SIGPLAN NOTICES, V37, P48, DOI 10.1145/583852.581484
   Flanagan C, 2002, ACM SIGPLAN NOTICES, V37, P234, DOI 10.1145/543552.512558
   Flatt M., 2014, RACKET REFERENCE 6 0
   Garcia R, 2013, ACM SIGPLAN NOTICES, V48, P417, DOI [10.1145/2544174.2500603, 10.1145/2500365.2500603]
   Greenberg M, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P353, DOI 10.1145/1706299.1706341
   Greenberg Michael, 2013, Ph.D. Dissertation
   Greenman Ben, 2018, P ACM PROGR LANG, DOI DOI 10.1145/3236766
   Gronski Jessica, 2006, SCHEM FUNCT PROGR WO, P93
   Hejlsberg A, 2012, MICROSOFT CHANNEL 9
   Henglein F., 1992, Proceedings of the 1992 ACM Conference on Lisp and Functional Programming, P205, DOI 10.1145/141471.141542
   Henglein F., 1995, Conference Record of FPCA '95. SIGPLAN-SIGARCH-WG2.8. Conference on Functional Programming Languages and Computer Architecture, P192, DOI 10.1145/224164.224203
   HENGLEIN F, 1994, SCI COMPUT PROGRAM, V22, P197, DOI 10.1016/0167-6423(94)00004-2
   Herman David, 2010, Higher-Order and Symbolic Computation, V23, P59, DOI 10.1007/s10990-011-9066-z
   Herman D., 2007, TRENDS FUNCTIONAL PR
   Hinze R, 2006, LECT NOTES COMPUT SC, V3945, P208
   HOARE CAR, 1969, COMMUN ACM, V12, P576, DOI 10.1145/363235.363259
   Kuhlenschmidt A, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P517, DOI 10.1145/3314221.3314627
   Lu K.-C, 2020, THESIS INDIANA U
   Matthews J, 2007, ACM SIGPLAN NOTICES, V42, P3, DOI 10.1145/1190215.1190220
   Meyer B., 1988, Object-Oriented Software Construction
   Moy C, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434334
   Myers A, 2013, CS LECT
   New MS, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371114
   Ou XM, 2004, INT FED INFO PROC, V155, P437
   Patterson D., 2014, PYRET LANGUAGE REFER
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Rastogi A, 2015, ACM SIGPLAN NOTICES, V50, P167, DOI [10.1145/2775051.2676971, 10.1145/2676726.2676971]
   Rastogi A, 2012, ACM SIGPLAN NOTICES, V47, P481, DOI 10.1145/2103621.2103714
   Richards G., 2015, P ECOOP
   Siek J, MECHANIZED COMPENDIU
   Siek J. G., 2012, SCHEM FUNCT PROGR WO
   Siek J. G., 2006, WORKSH SCRIPT TO PRO, P34
   Siek J. G, 2020, GRADUAL TYPING AGDA
   Siek J, 2015, ACM SIGPLAN NOTICES, V50, P425, DOI [10.1145/2737924.2737968, 10.1145/2813885.2737968]
   Siek J, 2009, LECT NOTES COMPUT SC, V5502, P17, DOI 10.1007/978-3-642-00590-9_2
   Siek Jeremy, 2006, WORKSHOP SCHEME FUNC, P81
   Siek JG, 2010, ACM SIGPLAN NOTICES, V45, P365, DOI 10.1145/1707801.1706342
   Siek Jeremy G., 2015, LIPICS LEIBNIZ INT P, V32, P274, DOI 10.4230/LIPIcs.SNAPL.2015.274
   Strickland T.Stephen., 2012, Proc. Conf. Object-Oriented Programming Systems, Languages, P943
   Swamy N, 2014, ACM SIGPLAN NOTICES, V49, P425, DOI 10.1145/2535838.2535889
   Thiemann Peter, 2014, Trustworthy Global Computing 9th International Symposium, TGC 2014. Revised Selected Papers: LNCS 8902, P144, DOI 10.1007/978-3-662-45917-1_10
   Tobin-Hochstadt S, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P395, DOI 10.1145/1328438.1328486
   Tobin-Hochstadt Sam., 2006, Proc. DLS, P964, DOI DOI 10.1145/1176617.1176755
   Toro M, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290330
   Vitousek M., 2017, S PRINC PROGR LANG P
   Vitousek MM, 2019, PROCEEDINGS OF THE 15TH ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON DYNAMIC LANGUAGES (DLS '19), P28, DOI 10.1145/3359619.3359742
   Vitousek MM, 2015, ACM SIGPLAN NOTICES, V50, P45, DOI 10.1145/2661088.2661101
   Wadler P, 2009, LECT NOTES COMPUT SC, V5502, P1, DOI 10.1007/978-3-642-00590-9_1
   Wadler Philip, 2020, Programming Language Foundations in Agda
   Wadler Philip., 2015, SNAPL, P309, DOI DOI 10.4230/LIPICS.SNAPL.2015.309
   Williams J, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276504
   Williams Jack., 2017, EUROPEAN C OBJECT OR, DOI DOI 10.4230/LIPICS.ECOOP.2017.28
   Wright AK, 1997, ACM T PROGR LANG SYS, V19, P87, DOI 10.1145/239912.239917
   Yankov B., 2013, DEFINITELY TYPED REP
NR 73
TC 2
Z9 2
U1 0
U2 1
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD OCT 13
PY 2021
VL 31
AR e20
DI 10.1017/S0956796821000101
PG 56
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA XB3UF
UT WOS:000721256300001
OA Green Published, Green Accepted, hybrid
DA 2024-07-18
ER

PT J
AU Perugini, S
AF Perugini, Saverio
TI Emerging languages: An alternative approach to teaching programming
   languages
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID SCIENCE
AB We challenge the idea that a course intended to convey principles of languages should be structured according to those principles, and present an alternate approach to teaching a programming language course. The approach involves teaching emerging programming languages. This approach results in a variety of course desiderata including scope for instructor customization; alignment with current trends in language evolution, practice, and research; and congruence with industrial needs. We discuss the rationale for, the course mechanics supporting, and the consequences of this approach.
C1 [Perugini, Saverio] Univ Dayton, Dayton, OH 45469 USA.
C3 University System of Ohio; University of Dayton
RP Perugini, S (corresponding author), Univ Dayton, Dayton, OH 45469 USA.
EM saverio@udayton.edu
OI Perugini, Saverio/0000-0002-1736-4009
FU National Science Foundation [1712406, 1712404]; Division Of
   Undergraduate Education; Direct For Education and Human Resources
   [1712406, 1712404] Funding Source: National Science Foundation
FX This material is based upon the work supported by the National Science
   Foundation under Grant Numbers 1712406 and 1712404. Any opinions,
   findings, and conclusions or recommendations expressed in this material
   are those of the author(s) and do not necessarily reflect the views of
   the National Science Foundation. We thank Krishnaprasad Thirunarayan in
   the Department of Computer Science and Engineering at Wright State
   University for providing comments on a draft of this paper. We thank
   David J. Wright in the Learning Teaching Center at the University of
   Dayton for identifying supportive references. We also thank the
   anonymous referees for their comments and recommendations which helped
   improve the article.
CR Adams E., 2006, SIGCSE Bulletin, V38, P299, DOI 10.1145/1140123.1140204
   Alesandrini K., 2002, The Clearing House, P119
   [Anonymous], 2004, P 6 C S OP SYST DES
   Arnold Z. L., J COMPUT SCI COLL, V35
   Association for Computing Machinery (ACM) Joint Task Force on Comput-ing Curricula and IEEE Computer Society, 2013, Computer Science Curricula 2013: Curriculum Guidelines for Undergraduate Degree Programs in Computer Science, DOI 10.1145/2534860
   Budd T., 1993, SIGPLAN Notices, V28, P367, DOI 10.1145/155360.155399
   BUDD TA, 1995, MULTIPARADIGM PROGRA
   Butcher Paul., 2014, Seven Concurrency Models in Seven Weeks
   Cass Stephen., 2018, IEEE Spectrum
   CRLT, 2016, TEACH STRAT LARG CLA
   Felleisen M, 2018, COMMUN ACM, V61, P62, DOI 10.1145/3127323
   Fraser S. D., 2015, COMP P 2015 ACM SIGP, P63
   Freeman S, 2014, P NATL ACAD SCI USA, V111, P8410, DOI 10.1073/pnas.1319030111
   Friedman D.P., 2001, ESSENTIALS PROGRAMMI, V2nd
   Graham P., 2004, REVENGE NERDS
   Guzdial M, 2018, COMMUN ACM, V61, P8, DOI 10.1145/3204443
   Hamer John, 2008, SIGCSE Bulletin, V40, P194, DOI 10.1145/1473195.1473242
   Krishnamurthi S., 2012, PROGRAMMING LANGUAGE
   Krishnamurthi S, 2008, ACM SIGPLAN NOTICES, V43, P81, DOI 10.1145/1480828.1480846
   Kumar A. N., 2005, SIGCSE Bulletin, V37, DOI 10.1145/1151954.1067598
   Kumar V., 2019, 9 NEW PROGRAMMING LA
   Lee K. D., 2015, P 46 ACM TECHN S COM, P162
   Lewis M.C., 2016, Proceedings of the 47th ACM Technical Symposium on Computing Science Education Memphis, TN, P492, DOI DOI 10.1145/2839509.2844666
   Louden KennethC., 2002, PROGRAMMING LANGUAGE, V2nd
   McCartney R, 2016, ACM T COMPUT EDUC, V16, DOI 10.1145/2747008
   Miller H, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE COMPANION 2014), P256, DOI 10.1145/2591062.2591161
   NCAT, 2014, RED COLL COURS US NC
   Papert S., 1987, CONSTRUCTIONISM NEW
   Papert S., 1980, MINDSTORMS CHILDREN
   Perugini S., 2018, J COMPUT SCI COLL, V34, P52
   Perugini S., 2018, J COMPUT SCI COLL, V34, P44
   Perugini S., 2018, PROGRAMMING LANGUAGE
   Pintrich PR, 2003, J EDUC PSYCHOL, V95, P667, DOI 10.1037/0022-0663.95.4.667
   Pombrio J., 2017, P 2 SUMM ADV PROGR L
   Prince D. G., 2018, J COMPUT SCI COLL, V34, P35
   Queinnec C., 2003, Lisp in Small Pieces
   Ray B, 2017, COMMUN ACM, V60, P91, DOI 10.1145/3126905
   Savage N, 2018, COMMUN ACM, V61, P29, DOI 10.1145/3193776
   Scott ML, 2009, PROGRAMMING LANGUAGE PRAGMATICS, 3RD EDITION, P1
   Sebesta R. W., 2015, CONCEPTS PROGRAMMING, V11th
   Tate B.A., 2010, 7 LANGUAGES 7 WEEKS
   Tate BruceA., 2014, 7 MORE LANGUAGES 7 W
   Wexelblat R. L., 1993, ACM SIGPLAN NOT, V28
NR 43
TC 0
Z9 0
U1 0
U2 4
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD SEP 26
PY 2019
VL 29
AR e13
DI 10.1017/S095679681900011X
PG 13
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA JA7RL
UT WOS:000488043500001
DA 2024-07-18
ER

PT J
AU Hutton, G
   Bahr, P
AF Hutton, Graham
   Bahr, Patrick
TI FUNCTIONAL PEARL <i>Compiling a 50-year journey</i>
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB Fifty years ago, John McCarthy and James Painter (1967) published the first paper on compiler verification, in which they showed how to formally prove the correctness of a compiler that translates arithmetic expressions into code for a register-based machine. In this article, we revisit this example in a modern context, and show how such a compiler can now be calculated directly from a specification of its correctness using simple equational reasoning techniques.
C1 [Hutton, Graham] Univ Nottingham, Sch Comp Sci, Nottingham, England.
   [Bahr, Patrick] IT Univ Copenhagen, Dept Comp Sci, Copenhagen, Denmark.
C3 University of Nottingham; IT University Copenhagen
RP Hutton, G (corresponding author), Univ Nottingham, Sch Comp Sci, Nottingham, England.
EM gmh@cs.nott.ac.uk; paba@itu.dk
FU EPSRC [EP/P00587X/1]
FX Graham Hutton was funded by EPSRC grant EP/P00587X/1, Unified Reasoning
   About Program Correctness and Efficiency.
CR Bahr P., 2015, J FUNCTIONAL PROGRAM, V25
   Hutton G., 2016, PROGRAMMING HASKELL
   McCarthy J., 1967, P S APPL MATH, V19
NR 3
TC 1
Z9 1
U1 0
U2 2
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PY 2017
VL 27
AR e20
DI 10.1017/S0956796817000120
PG 11
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA FH7AC
UT WOS:000411332000001
DA 2024-07-18
ER

PT J
AU Greenberg, M
   Pierce, BC
   Weirich, S
AF Greenberg, Michael
   Pierce, Benjamin C.
   Weirich, Stephanie
TI Contracts made manifest
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB Since Findler and Felleisen (Findler, R. B. & Felleisen, M. 2002) introduced higher-order contracts, many variants have been proposed. Broadly, these fall into two groups: some follow Findler and Felleisen (2002) in using latent, contracts, purely dynamic checks that are transparent to the type system; others use manifest contracts, where refinement types record the most recent check that has been applied to each value. These two approaches are commonly assumed to be equivalent different ways of implementing the same idea, one retaining a simple type system, and the other providing more static information. Our goal is to formalize and clarify this folklore understanding. Our work extends that of Gronski and Flanagan (Gronski, J. & Flanagan, C. 2007), who defined a latent calculus lambda(C) and a manifest calculus lambda(H), gave a translation phi from lambda(C) to lambda(H), and proved that if a lambda(C) term reduces to a constant, so does its phi-image. We enrich their account with a translation psi from lambda(H) to lambda(C) and prove an analogous theorem. We then generalize the whole framework to dependent contracts, whose predicates can mention free variables. This extension is both pragmatically crucial, supporting a much more interesting range of contracts, and theoretically challenging. We define dependent versions of and two dialects ("lax" and "picky") of lambda(C), establish type soundness a substantial result in itself, for lambda(H) - and extend phi and psi accordingly. Surprisingly, the intuition that the latent and manifest systems are equivalent now breaks down: the extended translations preserve behavior in one direction, but in the other, sometimes yield terms that blame more.
C1 [Greenberg, Michael; Pierce, Benjamin C.; Weirich, Stephanie] Univ Penn, Philadelphia, PA 19104 USA.
C3 University of Pennsylvania
RP Greenberg, M (corresponding author), Univ Penn, Philadelphia, PA 19104 USA.
EM mgree@seas.upenn.edu
OI Greenberg, Michael/0000-0003-0014-7670; Weirich,
   Stephanie/0000-0002-6756-9168
FU National Science Foundation [0702545, 0910786, 0534592, 0915671];
   Division Of Computer and Network Systems; Direct For Computer & Info
   Scie & Enginr [0915671] Funding Source: National Science Foundation;
   Division of Computing and Communication Foundations; Direct For Computer
   & Info Scie & Enginr [0910786, 0702545] Funding Source: National Science
   Foundation; Div Of Information & Intelligent Systems; Direct For
   Computer & Info Scie & Enginr [0534592] Funding Source: National Science
   Foundation
FX Sewell and Zappa Nardelli's OTT tool (Sewell et al., 2007) was
   invaluable for organizing our definitions. We used Aydemir and Weirich's
   LNGen tool (June 2010) for the Coq development of parallel reduction.
   Brian Aydemir, Joao Belo, Chris Casinghino, Nate Foster, and the
   anonymous POPL reviewers gave us helpful comments. The anonymous JFP
   reviewers' thorough comments significantly improved and clarified the
   paper. Our work has been supported by the National Science Foundation
   under grants 0702545 (A Practical Dependently-Typed Functional
   Programming Language), 0910786 (TRELLYS), 0534592 (Linguistic
   Foundations for XML View Update), and 0915671 (Contracts for Precise
   Types).
CR Ahmed A, 2006, LECT NOTES COMPUT SC, V3924, P69
   Aydemir B., 2010, MSCIS1024 U PENNS DE
   Belo JF, 2011, LECT NOTES COMPUT SC, V6602, P18, DOI 10.1007/978-3-642-19718-5_2
   Blume M, 2006, J FUNCT PROGRAM, V16, P375, DOI 10.1017/S0956796806005971
   CARDELLI L, 1994, INFORM COMPUT, V109, P4, DOI 10.1006/inco.1994.1013
   Chitil O, 2007, LECT NOTES COMPUT SC, V4807, P38
   Dimoulas C, 2011, ACM SIGPLAN NOTICES, V46, P215, DOI 10.1145/1925844.1926410
   Findler RB, 2006, LECT NOTES COMPUT SC, V3945, P226
   Findler RB, 2002, ACM SIGPLAN NOTICES, V37, P48, DOI 10.1145/583852.581484
   Flanagan C, 2006, ACM SIGPLAN NOTICES, V41, P245, DOI 10.1145/1111320.1111059
   Greenberg M, 2010, ACM SIGPLAN NOTICES, V45, P353, DOI 10.1145/1707801.1706341
   Gronski J., 2007, Proceedings of the 8th Symposium on Trends in Functional Programming (TFP), P54
   Gronski Jessica, 2006, SCHEM FUNCT PROGR WO, P93
   Guha A., 2007, Proceedings of the 2007 symposium on Dynamic languages, DLS '07, P29, DOI [10.1145/1297081.1297089, DOI 10.1145/1297081.1297089]
   Hinze R, 2006, LECT NOTES COMPUT SC, V3945, P208
   Knowles K, 2010, ACM T PROGR LANG SYS, V32, DOI 10.1145/1667048.1667051
   Meyer B., 1992, Eiffel: The Language
   Ou XM, 2004, INT FED INFO PROC, V155, P437
   Pitts Andrew M., 2005, Advanced Topics in Types and Programming Languages, P245
   Sewell P, 2007, ACM SIGPLAN NOTICES, V42, P1, DOI 10.1145/1291220.1291155
   Tobin-Hochstadt S, 2008, ACM SIGPLAN NOTICES, V43, P395, DOI 10.1145/1328897.1328486
   Wadler P., 2007, P SCHEM FUNCT PROGR
   Wadler P, 2009, LECT NOTES COMPUT SC, V5502, P1, DOI 10.1007/978-3-642-00590-9_1
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
   Xu DN, 2009, ACM SIGPLAN NOTICES, V44, P41, DOI 10.1145/1594834.1480889
NR 25
TC 3
Z9 3
U1 0
U2 3
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD MAY
PY 2012
VL 22
BP 225
EP 274
DI 10.1017/S0956796812000135
PN 3
PG 50
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 975TB
UT WOS:000306533300002
OA Bronze
DA 2024-07-18
ER

PT J
AU Vytiniotis, D
   Jones, SP
   Schrijvers, T
   Sulzmann, M
AF Vytiniotis, Dimitrios
   Jones, Simon Peyton
   Schrijvers, Tom
   Sulzmann, Martin
TI OUTSIDEIN(X) <i>Modular type inference with local assumptions</i>
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB Advanced type system features, such as GADTs, type classes and type families, have proven to be invaluable language extensions for ensuring data invariants and program correctness. Unfortunately, they pose a tough problem for type inference when they are used as local type assumptions. Local type assumptions often result in the lack of principal types and cast the generalisation of local let-bindings prohibitively difficult to implement and specify. User-declared axioms only make this situation worse. In this paper, we explain the problems and - perhaps controversially - argue for abandoning local let-binding generalisation. We give empirical results that local let generalisation is only sporadically used by Haskell programmers. Moving on, we present a novel constraint-based type inference approach for local type assumptions. Our system, called OUTSIDEIN(X), is parameterised over the particular underlying constraint domain X, in the same way as HM(X). This stratification allows us to use a common metatheory and inference algorithm. OUTSIDEIN(X) extends the constraints of X by introducing implication constraints on top. We describe the strategy for solving these implication constraints, which, in turn, relies on a constraint solver for X. We characterise the properties of the constraint solver for X so that the resulting algorithm only accepts programs with principal types, even when the type system specification accepts programs that do not enjoy principal types. Going beyond the general framework, we give a particular constraint solver for X = type classes + GADTs + type families, a non-trivial challenge in its own right. This constraint solver has been implemented and distributed as part of GHC 7.
C1 [Schrijvers, Tom] Univ Ghent, Ghent, Belgium.
C3 Ghent University
EM dimitris@microsoft.com
RI Schrijvers, Tom/A-6696-2016
OI Schrijvers, Tom/0000-0001-8771-5559
CR [Anonymous], 2005, P GT2005 ASME TURB E
   [Anonymous], P ICFP 2008 13 ACM S
   [Anonymous], 2003, P ACM SIGPLAN WORKSH
   [Anonymous], 2005, Advanced Topics in Types and Programming Languages
   Bachmair L, 2000, LECT NOTES ARTIF INT, V1831, P64
   BECKERT B, 1994, P CADE 94, P678
   CHAKRAVARTY M, 2005, P ICFP 05, P241
   CHENEY J, 2003, 1901 TR CORN U
   Damas L., 1982, C REC 9 ANN ACM S PR, P207, DOI DOI 10.1145/582153.582176
   FAXEN KF, 2003, P HASK WORKSH 03, P88
   Fruhwirth T, 1998, J LOGIC PROGRAM, V37, P95, DOI 10.1016/S0743-1066(98)10005-5
   GALLIER J, 1992, J ACM, V39, P377, DOI 10.1145/128749.128754
   Hall CV, 1996, ACM T PROGR LANG SYS, V18, P109, DOI 10.1145/227699.227700
   Hongwei Xi, 2003, SIGPLAN Notices, V38, P224, DOI 10.1145/640128.604150
   JONES M, 2000, LNCS, V1782
   Jones M.P., 1993, Technical Report YALEU/DCS/RR- 989
   JONES MP, 1992, THESIS OXFORD U
   Jones SP, 2007, J FUNCT PROGRAM, V17, P1, DOI 10.1017/S0956796806006034
   JONES SP, 2006, P 11 ACM SIGPLAN INT, P50
   JONES SP, 2004, MSCIS0526 U PENNS
   Kapur D, 1997, LECT NOTES COMPUT SC, V1232, P23
   KENNEDY AJ, 1996, RR9609 LIX EC POL
   Kiselyov O, 2010, REFLECTIONS ON THE WORK OF C A R HOARE, P301, DOI 10.1007/978-1-84882-912-1_14
   Lämmel R, 2003, ACM SIGPLAN NOTICES, V38, P26, DOI 10.1145/640136.604179
   LAMMEL R, 2005, P ACM SIGPLAN INT C, P204, DOI DOI 10.1145/1086365.1086391
   LAUFER K, 1994, ACM T PROGR LANG SYS, V16, P1411, DOI 10.1145/186025.186031
   LIN CK, 2010, P ACM SIGPLAN WORKSH, P51
   LIN CK, 2010, 3 TECHNIQUE IN PRESS
   Maher M, 2005, IEEE S LOG, P397
   MILNER R, 1978, J COMPUT SYST SCI, V17, P348, DOI 10.1016/0022-0000(78)90014-4
   Nieuwenhuis R, 2005, LECT NOTES COMPUT SC, V3467, P453
   Nipkow T., 1995, Journal of Functional Programming, V5, P201, DOI 10.1017/S0956796800001325
   Odersky M, 1999, THEOR PRACT OBJ SYST, V5, P35, DOI 10.1002/(SICI)1096-9942(199901/03)5:1<35::AID-TAPO4>3.0.CO;2-4
   POTTIER F, 2006, P 33 ACM S PRINC PRO, P232
   SCHRIJVERS T, 2007, P 19 INT S IMPL APPL, P233
   SCHRIJVERS T, 2009, P ACM SIGPLAN INT C
   SCHRIJVERS T, 2008, P WORKSH PROGR LANG, P39
   Simonet V, 2007, ACM T PROGR LANG SYS, V29, DOI 10.1145/1180475.1180476
   Skalka Christian, 2002, ELECT NOTES THEOR CO, V75, P61, DOI [10.1016/S1571-0661(04)80779-5, DOI 10.1016/S1571-0661(04)80779-5]
   Stuckey P. J., 2005, ACM T PROGR LANG SYS, V27, P1
   SULZMANN M, 2000, THESIS YALE U
   SULZMANN M, 2008, 507 CW DEP COMP SCI
   SULZMANN M, 2007, P ACM SIGPLAN INT WO
   Sulzmann M, 2007, J FUNCT PROGRAM, V17, P83, DOI 10.1017/S0956796806006137
   Sulzmann M, 2006, LECT NOTES COMPUT SC, V4279, P26
   Sulzmann M, 2006, LECT NOTES COMPUT SC, V3945, P47
   Sulzmann Martin, 1999, ACRC99009 U S AUSTR
   TOFTE M, 1990, INFORM COMPUT, V89, P1, DOI 10.1016/0890-5401(90)90018-D
   VYTINIOTIS D, 2010, P ACM SIGPLAN WORKSH, P39
   Wadler P., 1989, P ACM SIGPLAN SIGACT
   WEIRICH S, 2010, P ACM SIGPLAN SIGACT
   Wright A. K., 1995, LISP and Symbolic Computation, V8, P343, DOI 10.1007/BF01018828
NR 52
TC 67
Z9 68
U1 0
U2 5
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD JUL-SEP
PY 2011
VL 21
SI SI
BP 333
EP 412
DI 10.1017/S0956796811000098
PN 4-5
PG 80
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 828XN
UT WOS:000295538000002
OA Green Submitted, Bronze, Green Published
DA 2024-07-18
ER

PT J
AU Atkey, R
AF Atkey, Robert
TI Parameterised notions of computation
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article; Proceedings Paper
CT Workshop on Mathematically Structured Functional Programming
CY JUL 02, 2006
CL Kuressaare, ESTONIA
ID LANGUAGE
AB Moggi's computational Monads and Power et al.'s equivalent notion of Freyd category have captured a large range of computational effects present in programming languages. Examples include non-termination, non-determinism, exceptions, continuations, side effects and input/output. We present generalisations of both computational monads and Freyd categories, which we call parameterised monads and parameterised Freyd categories, that also capture computational effects with para meters. Examples of such are composable continuations, side effects where the type of the state varies and input/output where the range of inputs and outputs varies. By considering structured parameterisation also, we extend the range of effects to cover separated side effects and Multiple independent streams of I/O. We also present two typed lambda-calculi that Soundly and completely model out categorical definitions - with and without symmetric monoidal parameterisation - and act as prototypical languages with parameterised effects.
C1 Univ Edinburgh, Sch Informat, Lab Fdn Comp Sci, Edinburgh EH8 9AB, Midlothian, Scotland.
C3 University of Edinburgh
RP Atkey, R (corresponding author), Univ Edinburgh, Sch Informat, Lab Fdn Comp Sci, 10 Crichton St, Edinburgh EH8 9AB, Midlothian, Scotland.
EM bob.atkey@ed.ac.uk
RI Atkey, Robert/I-3074-2016
OI Atkey, Robert/0000-0002-4414-5047
CR Atkey Robert, 2006, Ph. D. Dissertation
   BARENDSEN E, 1993, LECT NOTES COMPUTER, V761, P41
   Benton N, 2006, LECT NOTES COMPUT SC, V4279, P114
   Birkedal L, 2006, LOG METH COMPUT SCI, V2, DOI 10.2168/LMCS-2(5:1)2006
   DANVY O, 1989, 8912 U COP COMP SCI
   Ghani N., 1995, THESIS U EDINBURGH
   GIRARD JY, 1987, THEOR COMPUT SCI, V50, P1, DOI 10.1016/0304-3975(87)90045-4
   Harrington D, 2006, THEOR COMPUT SCI, V354, P24, DOI 10.1016/j.tcs.2005.11.006
   Hofman M., 2000, Nordic Journal of Computing, V7, P258
   JONES SP, 1993, 20 ACM S PRINC PROGR, P71
   Levy PB, 2003, INFORM COMPUT, V185, P182, DOI 10.1016/S0890-5401(03)00088-9
   Lucassen J. M., 1988, 15TH P ACM S PRINC P, P47, DOI DOI 10.1145/73560.73564
   Mac Lane S, 1998, GRAD TEXT M, V5
   MOGGI E, 1991, INFORM COMPUT, V93, P55, DOI 10.1016/0890-5401(91)90052-4
   Moggi E., 1989, Proceedings. Fourth Annual Symposium on Logic in Computer Science (Cat. No.89CH2753-2), P14, DOI 10.1109/LICS.1989.39155
   Morrisett G, 2005, LECT NOTES COMPUT SC, V3461, P293
   NANEVSKI A, 2006, P 11 ACM SIGPLAN INT, P62, DOI [DOI 10.1145/1159803.1159812, 10.1145/1159803.1159812]
   Nielson F, 1996, THEOR COMPUT SCI, V155, P179, DOI 10.1016/0304-3975(95)00017-8
   O'Hearn PW., 2001, Local reasoning about programs that alter data structures, volume 2142 of LNCS, V2142, P1
   OHEARN PW, 2004, POPL, P268
   Plotkin G, 2002, LECT NOTES COMPUT SC, V2303, P342
   Power J., 1997, Mathematical Structures in Computer Science, V7, P453, DOI 10.1017/S0960129597002375
   Power John, 1999, LECT NOTES COMPUTER, V1644, P625, DOI [10.1007/3-540-48523-6, DOI 10.1007/3-540-48523-6]
   Skalka C, 2004, LECT NOTES COMPUT SC, V3302, P107
   Smith F, 2000, LECT NOTES COMPUT SC, V1782, P366
   TAYLOR P, 1999, CAMBRIDGE STUDIES AD, V59
   THIELECKE H, 1997, THESIS U EDINBURGH
   Uustalu T, 2003, RAIRO-THEOR INF APPL, V37, P315, DOI 10.1051/ita:2003022
   Vasconcelos VT, 2006, THEOR COMPUT SCI, V368, P64, DOI 10.1016/j.tcs.2006.06.028
   Wadler P., 1994, LISP and Symbolic Computation, V7, P39, DOI 10.1007/BF01019944
   WADLER P, 1990, PROGRAMMING CONCEPTS AND METHODS, P561
   Wadler P., 2003, ACM Transactions on Computational Logic, V4, P1, DOI 10.1145/601775.601776
   WADLER P, 1991, P 1991 ACM SIGPLAN S, P255
   Walker D, 2000, ACM T PROGR LANG SYS, V22, P701, DOI 10.1145/363911.363923
   WALKER D, 2000, LECT NOTES COMPUTER, V2071, P177
   Walker David, 2005, Advanced Topics in Types and Programming Languages, chapter Substructural Type Systems, P3
   Zhu DP, 2005, LECT NOTES COMPUT SC, V3350, P83
NR 37
TC 62
Z9 66
U1 0
U2 4
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD MAY-JUL
PY 2009
VL 19
BP 335
EP 376
DI 10.1017/S095679680900728X
PN 3-4
PG 42
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 461BW
UT WOS:000267240300005
OA Green Accepted, Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Jay, B
   Kesner, D
AF Jay, Barry
   Kesner, Delia
TI First-class patterns
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID SYSTEMS
AB Pure pattern calculus supports pattern-matching functions in which patterns are first-class citizens that can be passed as parameters, evaluated and returned as results. This new expressive power supports two new forms of polymorphism. Path polymorphism allows recursive functions to traverse arbitrary data structures. Pattern polymorphism allows patterns to be treated as parameters which may be collected from various sources or generated from training data. A general framework for pattern calculi is developed. It supports a proof of confluence that is parameterised by the nature of the matching algorithm, Suitable for the pure pattern calculus and all other known pattern calculi.
C1 [Jay, Barry] Univ Technol Sydney, Sydney, NSW 2007, Australia.
   [Kesner, Delia] CNRS, PPS, Paris, France.
   [Kesner, Delia] Univ Paris Diderot, Paris, France.
C3 University of Technology Sydney; Centre National de la Recherche
   Scientifique (CNRS); Universite Paris Cite
RP Jay, B (corresponding author), Univ Technol Sydney, Sydney, NSW 2007, Australia.
EM cbj@it.uts.edu.au; kesner@pps.jussieu.fr
CR [Anonymous], 1987, The Implementation of Functional Programming Languages
   [Anonymous], 2003, TERM REWRITING SYSTE
   [Anonymous], 1994, Lecture Notes in Computer Science
   [Anonymous], 1984, Studies in Logic
   Baader Franz, 1998, TERM REWRITING ALL
   Barthe G., 2003, P POPL, P250, DOI DOI 10.1145/604131.604152
   BOHM C, 1994, P 5 EUR S PROGR ESOP, V788, P135
   CIRSTEA H, 2001, LOG J IGPL, V9, P427, DOI DOI 10.1093/JIGPAL/9.3.339
   Cirstea H, 2007, LECT NOTES COMPUT SC, V4533, P78
   De Nicola R, 1998, IEEE T SOFTWARE ENG, V24, P315, DOI 10.1109/32.685256
   Forest J, 2003, LECT NOTES COMPUT SC, V2706, P107
   GELERNTER D, 1985, ACM T PROGR LANG SYS, V7, P80, DOI 10.1145/2363.2433
   Gorla D, 2003, LECT NOTES COMPUT SC, V2719, P119
   HUANG FY, 2006, 29 AUSTR COMP SCI C, P287
   HUANG FY, 2006, P 2006 C CTR ADV STU, P248
   Jay B, 2006, LECT NOTES COMPUT SC, V3924, P100
   Jay B, 2009, PATTERN CALCULUS: COMPUTING WITH FUNCTIONS AND STRUCTURES, P1, DOI 10.1007/978-3-540-89185-7
   Jay CB, 2004, ACM T PROGR LANG SYS, V26, P911, DOI 10.1145/1034774.1034775
   JAY CB, 2006, PATTERNS 1 CLASS CIT
   Kahl W, 2004, LECT NOTES COMPUT SC, V2998, P276
   Klop JW, 2008, THEOR COMPUT SCI, V398, P16, DOI 10.1016/j.tcs.2008.01.019
   KLOP JW, 1980, COMBINATORY REDUCTIO
   Lämmel R, 2003, ACM SIGPLAN NOTICES, V38, P26, DOI 10.1145/640136.604179
   PFENNING F, 1990, LECT NOTES COMPUT SC, V442, P209
   van Oostrom Vincent., 1990, Lambda calculus with patterns
   Visser E, 2003, LECT NOTES COMPUT SC, V3016, P216
NR 26
TC 27
Z9 29
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD MAR
PY 2009
VL 19
BP 191
EP 225
DI 10.1017/S0956796808007144
PN 2
PG 35
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 423OW
UT WOS:000264506600005
OA Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Berger, M
   Honda, K
   Yoshida, N
AF Berger, Martin
   Honda, Kohei
   Yoshida, Nobuko
TI A logical analysis of aliasing in imperative higher-order functions
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 10th ACM SIGPLAN International Conference on Functional Programming
   (ICFP)
CY SEP 26-28, 2005
CL Tallinn, ESTONIA
SP ACM SIGPLAN
ID HOARE LOGIC; PROGRAMS; LANGUAGE
AB We present a compositional programme logic for call-by-value imperative higher-order functions with general forms of aliasing, which can arise from the use of reference names as function parameters. return values, content of references and parts of data structures. The programme logic extends our earlier logic for alias-free imperative higher-order functions with new operators which serve as building blocks for clean structural reasoning about programms and data structures in the presence of aliasing. This has been an open issue since the pioneering work by Cartwright-Oppen and Morris twenty-five years ago. We illustrate usage of the logic for description and reasoning through concrete examples including a higher-order polymorphic Quicksort. The logical status of the new operators is clarified by translating them into (in)equalities of reference names.
C1 Univ London Imperial Coll Sci Technol & Med, Dept Comp, London, England.
   Queen Mary Univ London, Dept Comp Sci, London, England.
C3 Imperial College London; University of London; Queen Mary University
   London
RP Berger, M (corresponding author), Univ London Imperial Coll Sci Technol & Med, Dept Comp, London, England.
RI Yoshida, Nobuko/AAL-6082-2020
OI Yoshida, Nobuko/0000-0002-3925-8557; Berger, Martin/0000-0003-3239-5812
FU EPSRC [GR/T03215/01] Funding Source: UKRI
CR Ahmed A., 2005, LNCS, V3461, P293
   [Anonymous], 2001, MATH INTRO LOGIC
   [Anonymous], SEMANTICS PROGRAMMIN
   [Anonymous], 1987, Introduction to Mathematical Logic
   [Anonymous], J FUNCTIONAL PROGRAM
   APT KR, 1981, ACM T PROGR LANG SYS, V3, P431, DOI 10.1145/357146.357150
   BERGER M, 2005, P 10 ACM SIGPLAN INT, P280
   Bornat R, 2000, LECT NOTES COMPUT SC, V1837, P102
   CARTWRIGHT R, 1981, ACTA INFORM, V15, P365, DOI 10.1007/BF00264535
   CARTWRIGHT R, 1978, POPL 78, P131
   COUSOT P, 1999, HDB THEORETICAL COMP, VB, P243
   FILLIATRE JC, 1999, P THEOR PROV HIGH OR
   Floyd R.W., 1967, P S APPL MATH, V19, P19
   GREIF I, 1981, ACM T PROGR LANG SYS, V3, P484, DOI 10.1145/357146.357151
   Gries D., 1980, ACM Transactions on Programming Languages and Systems, V2, P564, DOI 10.1145/357114.357119
   GROSSMAN D, 2002, P ACM C PROGR LANG D, P282, DOI DOI 10.1145/512529.512563
   Hamid NA, 2004, LECT NOTES COMPUT SC, V3223, P118
   HENNESSY M, 1985, J ACM, V32, P137, DOI 10.1145/2455.2460
   HOARE CAR, 1969, COMMUN ACM, V12, P576, DOI 10.1145/363235.363259
   Hoare T., 1998, UNIFYING THEORIES PR
   Honda K, 2005, IEEE S LOG, P270
   HONDA K, 2006, P ICALP 06, P360
   HONDA K, 2004, P ICFP 04, P163
   HONDA K, 2004, P PPDP 04
   JASSEN TMV, 1977, P ICALP 77, P282
   Jones SP, 1999, LECT NOTES COMPUT SC, V1702, P1
   Kernighan B.W., 1988, The C Programming Language
   KULCZYCKI GW, 2003, 0213 TR IOW STAT U D
   Leino KRM, 2002, ACM T PROGR LANG SYS, V24, P491, DOI 10.1145/570886.570888
   Luckham D. C., 1979, ACM Transactions on Programming Languages and Systems, V1, P226, DOI 10.1145/357073.357078
   McCarthy John., 1962, IFIP C, P21
   MILNER R, 1978, J COMPUT SYST SCI, V17, P348, DOI 10.1016/0022-0000(78)90014-4
   MILNER R, 1992, INFORM COMPUT, V100, P1, DOI [10.1016/0890-5401(92)90008-4, 10.1016/0890-5401(92)90009-5]
   MORRIS JM, 1982, LECT NOTES INT SUMME, P35
   MORRIS JM, 1982, LECT NOTES INT SUMME, P25
   MORRIS JM, 1982, LECT NOTES INT SUMME, P44
   Morrisett G, 1999, ACM T PROGR LANG SYS, V21, P527, DOI 10.1145/319301.319345
   Müller P, 2003, CONCURR COMP-PRACT E, V15, P117, DOI 10.1002/cpe.713
   NANEVSKI A, 2006, ICFP 2006, P62
   OHEARN PW, 2004, POPL, P268
   Pierce B.C., 2002, TYPE SYSTEMS PROGRAM
   Pitts Andrew, 1998, Higher Order Operational Techniques in Semantics, P227
   Reynolds J., 2002, P LICS 02
   SHO Z, 1997, P WORKSH TYP COMP TI
   TRAKHTENBROT B, 1984, P CMU WORKSH LOG PRO, V164, P474
   WING JM, 1987, ACM T PROGR LANG SYS, V9, P1, DOI 10.1145/9758.10500
   Yoshida N, 2007, LECT NOTES COMPUT SC, V4423, P361
NR 47
TC 3
Z9 3
U1 1
U2 2
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD JUL-SEP
PY 2007
VL 17
BP 473
EP 546
DI 10.1017/S0956796807006417
PN 4-5
PG 74
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 208VY
UT WOS:000249348500003
OA Bronze
DA 2024-07-18
ER

PT J
AU Dreyer, D
AF Dreyer, Derek
TI Recursive type generativity
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 10th ACM SIGPLAN International Conference on Functional Programming
   (ICFP)
CY SEP 26-28, 2005
CL Tallinn, ESTONIA
SP ACM SIGPLAN
AB Existential types provide a simple and elegant foundation for understanding generative abstract data types of the kind supported by the Standard ML module system. However, in attempting to extend ML with support for recursive modules, we have found that the traditional existential account of type generativity does not work well in the presence of mutually recursive module definitions. The key problem is that, in recursive modules, one may wish to define an abstract type in a context where a name for the type already exists, but the existential type mechanism does not allow one to do so. We propose a novel account of recursive type generativity that resolves this problem. The basic idea is to separate the act of generating a name for an abstract type from the act of defining its underlying representation. To define several abstract types recursively, one may first "forward-declare" them by generating their names, and then supply each one's identity secretly within its own defining expression. Intuitively, this can be viewed as a kind of backpatching semantics for recursion at the level of types. Care must be taken to ensure that a type name is not defined more than once, and that cycles do not arise among "transparent" type definitions. In contrast to the usual continuation-passing interpretation of existential types in terms of universal types, our account of type generativity suggests a destination-passing interpretation. Briefly, instead of viewing a value of existential type as something that creates a new abstract type every time it is unpacked, we view it as a function that takes as input a pre-existing undefined abstract type and defines it. By leaving the creation of the abstract type name up to the client of the existential, our approach makes it significantly easier to link abstract data types together recursively.
C1 Toyota Technol Inst, Chicago, IL 60637 USA.
C3 Toyota Technological Institute - Chicago
RP Dreyer, D (corresponding author), Toyota Technol Inst, Chicago, IL 60637 USA.
EM dreyer@tti-c.org
CR AMADIO RM, 1993, ACM T PROGR LANG SYS, V15, P575, DOI 10.1145/155183.155231
   Ancona D, 1999, LECT NOTES COMPUT SC, V1702, P62
   [Anonymous], 1998, Purely Functional Data Structures
   [Anonymous], 1997, The Definition of Standard ML
   [Anonymous], 1990, IFIP TC 2 Working Conference on Programming Concepts and Methods, Sea of Galilee, Israel
   BENTON N, 2005, INT C TYP LAMBD CALC, P86
   Bohr N, 2006, LECT NOTES COMPUT SC, V4279, P79
   CRARY K, 1999, ACM C PROGRAMMING LA, P50
   Dreyer D, 2003, ACM SIGPLAN NOTICES, V38, P236, DOI 10.1145/640128.604151
   DREYER D, 2006, TR200607
   DREYER D, 2007, EUR S PROGR ESOP BRA, P441
   Dreyer D., 2005, THESIS CARNEGIE MELL
   DREYER D, 2005, ICFP 05, P41
   DREYER D, 2004, ACM S PRINC PROGR LA, P293
   Duggan D, 2002, ACM T PROGR LANG SYS, V24, P711, DOI 10.1145/586088.586093
   FLATT M, 1998, ACM SIGPLAN C PROGR, P236
   FLATT M, 2005, PLT MZSCHEME LANGUAG
   GIFFORD DK, 1986, ACM C LISP FUNCT PRO, P28
   Harper R, 2000, FOUNDAT COMPUT, P341
   Jones M. P., 1996, Conference Record of POPL '96: The 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P68, DOI 10.1145/237721.237731
   Koutavas V., 2006, ACM SIGPLAN S PRINC, P141
   LEROY X, 1995, ACM SIGPLAN S PRINC, P142
   Leroy X., 2003, PROPOSAL RECURSIVE M
   Leroy Xavier., 2004, OBJECTIVE CAML SYSTE
   Mitchell John C., 1996, Foundation of computing series
   MORRISETT G, 2005, INT C TYP LAMB CALC
   Pitts A.M., 2005, ADV TOPICS TYPES PRO
   Romanenko Sergei, 2000, MOSCOW ML LANGUAGE O
   ROSSBERG A, 2003, INT C PRINC PRACT DE, P241
   RUSSO CV, 2001, INT C FUNCT PROGR IC, P50
   STONE CA, 2005, ADV TOPICS TYPES PRO, pCH9
   Stone CA, 2006, ACM T COMPUT LOG, V7, P676, DOI 10.1145/1183278.1183281
   TALPIN JP, 1994, INFORM COMPUT, V111, P245, DOI 10.1006/inco.1994.1046
   VANDERWAART JC, 2003, ACM SIGPLAN WORKSH T, P98
   WADLER P, 1985, LISTLESSNESS BETTER
   Walker D, 2000, ACM T PROGR LANG SYS, V22, P701, DOI 10.1145/363911.363923
NR 36
TC 10
Z9 10
U1 1
U2 2
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD JUL-SEP
PY 2007
VL 17
BP 433
EP 471
DI 10.1017/S0956796807006429
PN 4-5
PG 39
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 208VY
UT WOS:000249348500002
OA Bronze
DA 2024-07-18
ER

PT J
AU Biernacki, D
   Danvy, O
AF Biernacki, Dariusz
   Danvy, Olivier
TI A simple proof of a folklore theorem about delimited control
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB We formalize and prove the folklore theorem that the static delimited-control operators shift and reset can be simulated in terms of the dynamic delimited-control operators control and prompt. The proof is based on small-step operational semantics.
C1 Univ Aarhus, Dept Comp Sci, BRICS, DK-8200 Aarhus N, Denmark.
C3 Aarhus University
RP Biernacki, D (corresponding author), Univ Aarhus, Dept Comp Sci, BRICS, IT-Parken,Aabogade 34, DK-8200 Aarhus N, Denmark.
EM dabi@brics.dk; danvy@brics.dk
OI Biernacki, Dariusz/0000-0002-1477-4635
CR Abelson H., 1998, Higher Order Symbolic Computation, V11, P7, DOI 10.1023/A:1010051815785
   BIERNACKA M, 2005, IN PRESS LOGICAL MET
   BIERNACKI D, 2005, RS0516 BRICS DAIMI U
   DANVY O, 1990, PROCEEDINGS OF THE 1990 ACM CONFERENCE ON LISP AND FUNCTIONAL PROGRAMMING, P151, DOI 10.1145/91556.91622
   DYBVIG RK, 2005, 615 IND U COMP SCI D
   Felleisen M., 1988, Proceedings of the 1988 ACM Conference on LISP and Functional Programming, P52, DOI 10.1145/62678.62684
   FELLEISEN M, 1988, P 15 ANN ACM S PRINC, P180, DOI DOI 10.1145/73560.73576
   Felleisen Matthias, 1986, P IFIP TC 2WG22 WORK
   Gasbichler M, 2002, ACM SIGPLAN NOTICES, V37, P271, DOI 10.1145/583852.581504
   Kameyama Y, 2003, ACM SIGPLAN NOTICES, V38, P177, DOI 10.1145/944746.944722
   KISELYOV O, 2005, 611 IND U COMP SCI D
   Milne R., 1976, THEORY PROGRAMMING L
   Plotkin G. D., 1975, Theoretical Computer Science, V1, P125, DOI 10.1016/0304-3975(75)90017-1
   SHANG CC, 2004, P 2004 ACM SIGPLAN W
   [No title captured]
NR 15
TC 9
Z9 9
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD MAY
PY 2006
VL 16
BP 269
EP 280
DI 10.1017/S0956796805005782
PN 3
PG 12
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 052MS
UT WOS:000238238400002
OA Bronze
DA 2024-07-18
ER

PT J
AU Normark, K
AF Normark, K
TI Web programming in scheme with LAML
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB Functional programming fits well with the use of descriptive markup in HTML and XML. There is also a good fit between S-expressions in Lisp and the XML data set. These similarities are exploited in LAML which is a software package for Scheme. LAML supports exact mirrors of the three variants of XHTML 1.0, SVG 1.0, and a number of more specialized XML languages. The mirrors are all synthesized from document type definitions (DTDs). Each element in a mirror is represented by a named function in Scheme. The mirror functions validate the XML document while it is generated. The validation is based on finite state automata automatically derived from the DTD.
C1 Aalborg Univ, Dept Comp Sci, Aalborg, Denmark.
C3 Aalborg University
RP Aalborg Univ, Dept Comp Sci, Aalborg, Denmark.
EM normark@cs.auc.dk
CR Abelson H., 1998, Higher Order Symbolic Computation, V11, P7, DOI 10.1023/A:1010051815785
   Aho A.V., 1986, COMPILERS PRINCIPLES
   BOAG S, 2003, XQUERY 1 0 XML QUERY
   BRABRAND C., 2002, ACM T INTERNET TECHN, V2, P79
   CHRISTENSEN AS, 2003, IN PRESS ACM T PROGR
   Clark James, 1999, Xsl transformations (xslt)
   GLICKSTEIN B, 1999, LATTE LANGUAGE TRANS
   HANUS M, 2001, LNCS, V1990, P76
   Hosoya Haruo, 2003, ACM T INTERNET TECHN, V3, DOI DOI 10.1145/767193.767195
   HOSTETTER M, 1997, WORLD WIDE WEB J, V2
   *ISO IEC, 1996, 10179 ISO IEC
   Kiselyov O, 2003, LECT NOTES COMPUT SC, V2562, P256
   KISELYOV O, 2002, SXML
   Krishnamurthi S, 2000, LECT NOTES COMPUT SC, V1753, P249
   LEWIS BR, 2003, BRL DATABASE ORIENTE
   Meijer E., 2000, Journal of Functional Programming, V10, P1, DOI 10.1017/S0956796899003561
   MEIJER E, 2000, UNPUB USENIX ANN TEC
   NICOL GT, 2000, XEXPR SCRIPTING LANG
   NORMARK K, 2003, P INT LISP C ILC 200
   NORMARK K, 2002, P 11 INT WORLD WID W
   SERRANO M, 2002, THIS IS SCRIBE 3 WOR
   Thiemann P, 2002, J FUNCT PROGRAM, V12, P435, DOI 10.1017/S0956796802004392
   Wallace M, 1999, ACM SIGPLAN NOTICES, V34, P148, DOI 10.1145/317765.317794
   *WASH, 2003, WEB AUTH SYST HASK
NR 24
TC 3
Z9 3
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD JAN
PY 2005
VL 15
BP 53
EP 65
DI 10.1017/S0956796804005350
PN 1
PG 13
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 890TK
UT WOS:000226533500004
OA Bronze
DA 2024-07-18
ER

PT J
AU Ramsey, N
AF Ramsey, N
TI Pragmatic aspects of reusable program generators
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article; Proceedings Paper
CT International Workshop on Semantics, Applications, and Implementation of
   Program Generation
CY SEP 20, 2000
CL MONTREAL, CANADA
SP ACM, SIGPLAN
ID OPTIMIZATION; SOLVER
AB When writing a program generator requires considerable intellectual effort, it is valuable to amortize that effort by using the generator to build more than one application. When a program generator serves multiple clients, however, the implementor must address pragmatic questions that implementors of single-use program generators can ignore. In how many languages should generated code be written? How should code be packaged? What should the interfaces to the client code look like? How should a user control variations? This paper elaborates on these questions by means of case studies of the New Jersey Machine-Code Toolkit, the lambda-RTL Translator, and the ASDL program generator. It is hoped that the paper will stimulate the development of better techniques. Most urgently needed are a standard way to support multiple target languages and a simple, clear way to control interfaces to generated code.
C1 Harvard Univ, Div Engn & Appl Sci, Harvard, CT USA.
C3 Harvard University
RP Harvard Univ, Div Engn & Appl Sci, Harvard, CT USA.
EM nr@eecs.harvard.edu
OI Ramsey, Norman/0000-0002-5435-1135
CR AHO AV, 1974, ACM COMPUT SURV, V6, P99
   Auerbach J, 1999, INT CON DISTR COMP S, P393, DOI 10.1109/ICDCS.1999.776541
   Auslander J, 1996, ACM SIGPLAN NOTICES, V31, P149, DOI 10.1145/249069.231409
   Baecker R.M., 1990, HUMAN FACTORS TYPOGR
   Bala V, 2000, ACM SIGPLAN NOTICES, V35, P1, DOI 10.1145/358438.349303
   BARBACCI MR, 1982, DESIGN ANAL INSTRUME
   Batory D, 2000, LECT NOTES COMPUT SC, V1844, P117
   BENITEZ ME, 1988, SIGPLAN NOTICES, V23, P329, DOI 10.1145/960116.54023
   BLASCHEK G, 1989, SOFTWARE PRACT EXPER, V19, P687, DOI 10.1002/spe.4380190703
   BRAUN OC, 1996, THESIS PRINCETON U
   Bumbulis P., 1993, ACM Letters on Programming Languages and Systems, V2, P70, DOI 10.1145/176454.176487
   CIFUENTES C, 1999, P WORK C REV ENG ATL, P280
   DAVIDSON JW, 1984, ACM T PROGR LANG SYS, V6, P505, DOI 10.1145/1780.1783
   DAVIDSON JW, 1981, THESIS U ARIZONA TUC
   Dean J, 1996, ACM SIGPLAN NOTICES, V31, P83, DOI 10.1145/236338.236344
   DEREMER F, 1982, ACM T PROGR LANG SYS, V4, P615, DOI 10.1145/69622.357187
   DERMAN E, 1984, SOFTWARE PRACT EXPER, V14, P1169, DOI 10.1002/spe.4380141208
   Engler DR, 1996, ACM SIGPLAN NOTICES, V31, P160, DOI 10.1145/249069.231411
   FERNANDEZ MF, 1995, SIGPLAN NOTICES, V30, P103, DOI 10.1145/223428.207121
   Fraser Christopher W., 1995, A retargetable C compiler: Design and implementation
   FRASER CW, 1992, SIGPLAN NOTICES, V27, P68
   GIBBONS PB, 1987, IEEE T SOFTWARE ENG, V13, P77, DOI 10.1109/TSE.1987.232837
   Gray R. W., 1988, Proceedings of the Summer 1988 USENIX Conference, P147
   Griswold R., 1996, ICON PROGRAMMING LAN, VThird
   Hanson D. R., 1996, C INTERFACES IMPLEME
   Hanson DR, 1999, SOFTWARE PRACT EXPER, V29, P417, DOI 10.1002/(SICI)1097-024X(19990425)29:5<417::AID-SPE241>3.0.CO;2-F
   HUGHES J, 1995, LECT NOTES COMPUTER, V925
   Hunt Andrew, 1999, The Pragmatic Programmer: From Journeyman to Master, V1
   JOHNSON SC, 1975, 32 COMP SCI ST T BEL
   LARUS JR, 1995, SIGPLAN NOTICES, V30, P291, DOI 10.1145/223428.207163
   Lee A, 1996, SCAND J GASTROENTERO, V31, P5, DOI 10.3109/00365529609094506
   LESK ME, 1975, 39 COMP SCI BELL LAB
   LISKOV B, 1986, ABSTR SPEC PROGR DEV
   Odersky M., 1997, Conference Record of POPL '97: The 24th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P146, DOI 10.1145/263699.263715
   Oppen D. C., 1980, ACM Transactions on Programming Languages and Systems, V2, P465, DOI 10.1145/357114.357115
   PROEBSTING TA, 1992, SIGPLAN NOTICES, V27, P331, DOI 10.1145/143103.143145
   RAMSEY N, 1992, SIGPLAN NOTICES, V27, P22, DOI 10.1145/143103.143112
   Ramsey N, 1998, SOFTWARE PRACT EXPER, V28, P1327, DOI 10.1002/(SICI)1097-024X(1998100)28:12<1327::AID-SPE195>3.0.CO;2-C
   Ramsey N, 1996, SOFTWARE PRACT EXPER, V26, P467, DOI 10.1002/(SICI)1097-024X(199604)26:4<467::AID-SPE17>3.0.CO;2-M
   RAMSEY N, 1995, PROCEEDINGS OF THE 1995 USENIX TECHNICAL CONFERENCE, P289
   Ramsey N, 1996, ACM SIGPLAN NOTICES, V31, P226, DOI 10.1145/249069.231429
   Ramsey N, 1997, ACM T PROGR LANG SYS, V19, P492, DOI 10.1145/256167.256225
   Ramsey N., 1999, SPECIFYING INSTRUCTI
   Ramsey N., 1998, ACM SIGPLAN WORKSHOP, V1474, P172
   RAMSEY N, 1994, P 21 ACM S PRINC PRO, P15
   SHEARD T, 2001, P 6 ACM SIGPLAN INT, P86
   Sheard T., 2000, Introduction to Multistage Programming using MetaML. Revision
   SPARC, 1992, SPARC ARCHITECTURE M
   STALLMAN RM, 1992, USING PORTING GNU CC
   STEELR GL, 1994, 21 ANN ACM S PRINC P, P472
   Thiemann P, 2000, LECT NOTES COMPUT SC, V1753, P263
   United Nations Educational Scientific and Cultural Organization (UNESCO), 2018, INT TECHN GUID SEX E
   WADLER P, 1999, PRETTIER PAINTER
   WAITE WM, 1986, SOFTWARE PRACT EXPER, V16, P473, DOI 10.1002/spe.4380160508
   Wang DC, 1997, PROCEEDINGS OF THE CONFERENCE ON DOMAIN-SPECIFIC LANGUAGES, P213
   WANG DS, 1999, ASDLGEN REFERENCE MA
NR 56
TC 1
Z9 1
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD MAY
PY 2003
VL 13
BP 601
EP 646
DI 10.1017/S0956796802004628
PN 3
PG 46
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 689BA
UT WOS:000183470700007
OA Bronze
DA 2024-07-18
ER

PT J
AU Swierstra, W
AF Swierstra, Wouter
TI A well-known representation of monoids and its application to the
   function 'vector reverse'
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB Vectors-or length-indexed lists-are classic example of a dependent type. Yet, most tutorials stay clear of any function on vectors whose definition requires non-trivial equalities between natural numbers to type check. This pearl shows how to write functions, such as vector reverse, that rely on monoidal equalities to be type correct without having to write any additional proofs. These techniques can be applied to many other functions over types indexed by a monoid, written using an accumulating parameter, and even be used to decide arbitrary equalities over monoids 'for free.'
C1 [Swierstra, Wouter] Univ Utrecht, Utrecht, Netherlands.
C3 Utrecht University
RP Swierstra, W (corresponding author), Univ Utrecht, Utrecht, Netherlands.
EM w.s.swierstra@uu.nl
CR Allais G, 2017, PROCEEDINGS OF THE 6TH ACM SIGPLAN CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS, CPP'17, P195, DOI 10.1145/3018610.3018613
   [Anonymous], 1988, Groups and Symmetry
   [Anonymous], 2007, PRACTICAL PROGRAMMIN
   Awodey S., 2010, Category Theory
   BERGER U, 1991, SIXTH ANNUAL IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P203
   Beylin I, 1996, LECT NOTES COMPUT SC, V1158, P47
   Boisseau G, 2018, PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES, DOI 10.1145/3236779
   Danvy O, 2005, FUND INFORM, V66, P397
   HUGHES RJM, 1986, INFORM PROCESS LETT, V22, P141, DOI 10.1016/0020-0190(86)90059-1
   Jaber G, 2016, PROCEEDINGS OF THE 31ST ANNUAL ACM-IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE (LICS 2016), P367, DOI 10.1145/2933575.2935320
   Jeffrey A., 2011, ASSOCIATIVITY FREE
   Kidney D. O., 2020, TREES INDEXED CAYLEY
   Kidney D. O., 2019, BINARY RANDOM ACCESS
   Ko, 2020, GUN VIOLENCE DATA
   McBride Conor, 2011, Ornamental algebras, algebraic ornaments
   van der Walt Paul, 2013, Implementation and Application of Functional Languages. 24th International Symposium, IFL 2012. Revised Selected Papers: LNCS 8241, P157, DOI 10.1007/978-3-642-41582-1_10
NR 16
TC 1
Z9 1
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD AUG 8
PY 2022
VL 32
AR e10
DI 10.1017/S0956796822000065
PG 16
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 3O8KV
UT WOS:000837084500001
OA hybrid, Green Published
DA 2024-07-18
ER

PT J
AU Mu, SC
   Chiang, TJ
AF Mu, Shin-Cheng
   Chiang, Tsung-Ju
TI Longest segment of balanced parentheses: an exercise in program
   inversion in a segment problem
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB Given a string of parentheses, the task is to find the longest consecutive segment that is balanced, in linear time. We find this problem interesting because it involves a combination of techniques: the usual approach for solving segment problems and a theorem for constructing the inverse of a function-through which we derive an instance of shift-reduce parsing.
C1 [Mu, Shin-Cheng; Chiang, Tsung-Ju] Acad Sinica, Inst Informat Sci, Taipei, Taiwan.
C3 Academia Sinica - Taiwan
RP Mu, SC (corresponding author), Acad Sinica, Inst Informat Sci, Taipei, Taiwan.
EM scm@iis.sinica.edu.tw; mail@tsung-ju.org
RI Mu, Shin-Cheng/ABA-7746-2020
OI Mu, Shin-Cheng/0000-0002-4755-601X; Chiang, Tsung-Ju/0000-0003-1252-6424
CR Bird R. S., 1987, Logic of Programming and Calculi of Discrete Design. International Summer School. Proceedings of the NATO Advanced Study Institute, P5
   Bird Richard, 1997, Algebra of Programming
   de Moor O, 2000, LECT NOTES COMPUT SC, V1816, P371
   Gibbons J., 1997, P ISRG SERG RES C
   Mu SC, 2004, SCI COMPUT PROGRAM, V51, P87, DOI 10.1016/j.scico.2003.09.003
   Sasano I., 2001, Semantics, Applications, and Implementation of Program Generation. Second International Workshop, SAIG 2001. Proceedings (Lecture Notes in Computer Science Vol.2196), P72
   ZANTEMA H, 1992, SCI COMPUT PROGRAM, V18, P39, DOI 10.1016/0167-6423(92)90033-8
NR 7
TC 0
Z9 0
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD NOV 25
PY 2021
VL 31
AR e31
DI 10.1017/S0956796821000253
PG 10
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA XC7FN
UT WOS:000722175000001
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Pieters, RP
   Schrijvers, T
AF Pieters, Ruben P.
   Schrijvers, Tom
TI Faster coroutine pipelines: A reconstruction
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB The three-continuation approach to coroutine pipelines efficiently represents a large number of connected components. Previous work in this area introduces this alternative encoding but does not shed much light on the underlying principles for deriving this encoding from its specification. This paper gives this missing insight by deriving the three-continuation encoding based on eliminating the mutual recursion in the definition of the connect operation. Using the same derivation steps, we are able to derive a similar encoding for a more general setting, namely bidirectional pipes. Additionally, we evaluate the encoding in an advertisement analytics benchmark where it is as performant aspipes,conduit, andstreamly, which are other common Haskell stream processing libraries.
C1 [Pieters, Ruben P.; Schrijvers, Tom] Katholieke Univ Leuven, Leuven, Belgium.
C3 KU Leuven
RP Pieters, RP (corresponding author), Katholieke Univ Leuven, Leuven, Belgium.
EM ruben.pieters@cs.kuleuven.be; tom.schrijvers@cs.kuleuven.be
RI Schrijvers, Tom/A-6696-2016
OI Schrijvers, Tom/0000-0001-8771-5559
FU Flemish Fund for Scientific Research (FWO)
FX We would like to thank Nicolas Wu, Alexander Vandenbroucke, and the
   anonymous reviewers for their feedback. This work was partly funded by
   the Flemish Fund for Scientific Research (FWO).
CR Blöndal B, 2018, PROCEEDINGS OF THE 11TH ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON HASKELL (HASKELL '18), P55, DOI 10.1145/3242744.3242746
   BOHM C, 1985, THEOR COMPUT SCI, V39, P135, DOI 10.1016/0304-3975(85)90135-5
   Breitner J, 2018, PROCEEDINGS OF THE 11TH ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON HASKELL (HASKELL '18), P14, DOI 10.1145/3242744.3242748
   Chintapalli S, 2016, IEEE SYM PARA DISTR, P1789, DOI 10.1109/IPDPSW.2016.138
   Church Alonzo., 1941, The Calculi of Lambda-conversion. Annals of mathematics studies
   Claessen K, 2004, J FUNCT PROGRAM, V14, P741, DOI 10.1017/S0956796804005192
   Coutts Duncan, 2011, THESIS
   Ghani N, 2004, LECT NOTES COMPUT SC, V3302, P327
   Gill A., 1993, P C FUNCT PROGR LANG, P223, DOI DOI 10.1145/165180.165214
   Gonzalez G., 2012, HASKELL PIPES LIB
   Gonzalez G., 2014, STREAM FUSION PIPES
   Hancock P, 2009, LOG METH COMPUT SCI, V5, DOI 10.2168/LMCS-5(3:9)2009
   Hirzel M, 2014, ACM COMPUT SURV, V46, DOI 10.1145/2528412
   Kammar O, 2013, ACM SIGPLAN NOTICES, V48, P145, DOI [10.1145/2500365.2500590, 10.1145/2544174.2500590]
   Kiselyov O, 2017, ACM SIGPLAN NOTICES, V52, P285, DOI 10.1145/3093333.3009880
   Kumar H., 2018, STREAMLY BENCHMARKS
   Kumar H., 2017, HASKELL STREAMLY LIB
   Lindley S, 2017, ACM SIGPLAN NOTICES, V52, P500, DOI 10.1145/3093333.3009897
   Mogensen T. AE., 1992, Journal of Functional Programming, V2, P345, DOI 10.1017/S0956796800000423
   OSullivan B., 2009, HASKELL CRITERION LI
   Peyton Jones S. L., 2001, 2001 HASK WORKSH
   Pieters R. P., 2018, FASTER COROUTINE PIP
   Pieters RP, 2019, LECT NOTES COMPUT SC, V11372, P133, DOI 10.1007/978-3-030-05998-9_9
   Plotkin G., 1993, Typed Lambda Calculi and Applications. International Conference. TLCA '93, P361, DOI 10.1007/BFb0037118
   Shivers O, 2006, ACM SIGPLAN NOTICES, V41, P295, DOI 10.1145/1133981.1134016
   Snoyman M., 2011, HASKELL CONDUIT LIB
   Spivey M., 2017, P ACM PROGRAM LANG, V1
   Svenningsson J, 2002, ACM SIGPLAN NOTICES, V37, P124, DOI 10.1145/583852.581491
   Voigtländer J, 2008, LECT NOTES COMPUT SC, V5133, P388
NR 29
TC 0
Z9 0
U1 1
U2 1
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD AUG 3
PY 2020
VL 30
AR e22
DI 10.1017/S0956796820000192
PG 40
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA MT5UI
UT WOS:000555039700001
OA Green Accepted
DA 2024-07-18
ER

PT J
AU Pieters, RUBENP
   Rivas, EXEQUIEL
   Schrijvers, TOM
AF Pieters, Ruben P.
   Rivas, Exequiel
   Schrijvers, Tom
TI Generalized monoidal effects and handlers
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID MONADS; IDIOMS; ARROWS
AB Algebraic effects and handlers are a convenient method for structuring monadic effects with primitive effectful operations and separating the syntax from the interpretation of these operations. However, the scope of conventional handlers is limited as not all side effects are monadic in nature. This paper generalizes the notion of algebraic effects and handlers from monads to generalized monoids, which notably covers applicative functors and arrows as well as monads. For this purpose, we switch the category theoretical basis from free algebras to free monoids. In addition, we show how lax monoidal functors enable the reuse of handlers and programs across different computation classes, for example, handling applicative computations with monadic handlers. We motivate and present these handler interfaces in the context of build systems. Tasks in a build system are represented by a free computation and their interpretation as a handler. This use case is based on the work of Mokhovet al.[(2018).PACMPL2(ICFP), 79:1-79:29.].
C1 [Pieters, Ruben P.; Schrijvers, Tom] Katholieke Univ Leuven, Leuven, Belgium.
   [Rivas, Exequiel] INRIA, Paris, France.
C3 KU Leuven; Inria
RP Pieters, RUBENP (corresponding author), Katholieke Univ Leuven, Leuven, Belgium.
EM ruben.pieters@cs.kuleuven.be; exequiel.rivas-gadda@inria.fr;
   tom.schrijvers@cs.kuleuven.be
RI Schrijvers, Tom/A-6696-2016
OI Schrijvers, Tom/0000-0001-8771-5559; Rivas, Exequiel/0000-0002-2114-624X
FU Nomadic Labs via a grant on "Evolution, Semantics, and Engineering of
   the F* Verification System"; Flemish Fund for Scientific Research (FWO)
   [3E181126]
FX We would like to thank Nicolas Wu and the anonymous reviewers for their
   feedback. Exequiel Rivas was in part supported by Nomadic Labs via a
   grant on "Evolution, Semantics, and Engineering of the F* Verification
   System". This work was partly funded by the Flemish Fund for Scientific
   Research (FWO), project 3E181126.
CR Bauer A, 2015, J LOG ALGEBR METHODS, V84, P108, DOI 10.1016/j.jlamp.2014.02.001
   Brady E, 2013, ACM SIGPLAN NOTICES, V48, P133, DOI [10.1145/2500365.2500581, 10.1145/2544174.2500581]
   Capriotti P, 2014, ELECTRON P THEOR COM, P2, DOI 10.4204/EPTCS.153.2
   FELDMAN SI, 1979, SOFTWARE PRACT EXPER, V9, P255, DOI 10.1002/spe.4380090402
   Gibbons J, 2016, ACM SIGPLAN NOTICES, V51, P45, DOI 10.1145/3241625.2976005
   Hughes J, 2000, SCI COMPUT PROGRAM, V37, P67, DOI 10.1016/S0167-6423(99)00023-4
   Jane Street, 2018, DUN COMP BUILD SYST
   Jaskelioff M, 2015, J FUNCT PROGRAM, V25, DOI 10.1017/S0956796815000088
   Kiselyov O, 2015, ACM SIGPLAN NOTICES, V50, P94, DOI 10.1145/2804302.2804319
   Leijen D, 2017, ACM SIGPLAN NOTICES, V52, P486, DOI 10.1145/3093333.3009872
   Lindley S., 2013, FREE IDIOMS FREE ARR
   Lindley S., 2014, P 10 ACM SIGPLAN WOR, P47, DOI DOI 10.1145/2633628..2633636
   Lindley S, 2017, ACM SIGPLAN NOTICES, V52, P500, DOI 10.1145/3093333.3009897
   Lindley S, 2011, ELECTRON NOTES THEOR, V229, P97, DOI 10.1016/j.entcs.2011.02.018
   Mäkelä V, 2016, PROCEEDINGS OF THE 19TH ACM CONFERENCE ON COMPUTER SUPPORTED COOPERATIVE WORK AND SOCIAL COMPUTING COMPANION, P9, DOI 10.1145/2818052.2874312
   Mcbride C, 2008, J FUNCT PROGRAM, V18, P1, DOI 10.1017/S0956796807006326
   Mitchell N, 2012, ACM SIGPLAN NOTICES, V47, P55, DOI 10.1145/2398856.2364538
   MOGGI E, 1991, INFORM COMPUT, V93, P55, DOI 10.1016/0890-5401(91)90052-4
   Mokhov A., 2019, PACMPL, V3
   Mokhov A, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3236774
   O'Connor R., 2014, VANLAARHOVEN FREE MO
   Pastro C, 2008, THEOR APPL CATEG, V21, P61
   Paterson R, 2001, ACM SIGPLAN NOTICES, V36, P229, DOI 10.1145/507669.507664
   Pieters R. P., 2017, P 29 S IMPL APPL FUN
   Plotkin G, 2009, LECT NOTES COMPUT SC, V5502, P80, DOI 10.1007/978-3-642-00590-9_7
   Rivas E, 2018, ELECTRON P THEOR COM, P18, DOI 10.4204/EPTCS.275.3
   Rivas E, 2017, J FUNCT PROGRAM, V27, DOI 10.1017/S0956796817000132
   Rivas E, 2015, PROCEEDINGS OF THE 17TH INTERNATIONAL SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING (PPDP 2015), P196, DOI 10.1145/2790449.2790514
   WADLER P, 1990, PROCEEDINGS OF THE 1990 ACM CONFERENCE ON LISP AND FUNCTIONAL PROGRAMMING, P61, DOI 10.1145/91556.91592
NR 29
TC 3
Z9 4
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD JUL 28
PY 2020
VL 30
AR e23
DI 10.1017/S0956796820000106
PG 55
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA MQ1WZ
UT WOS:000552690200001
OA Green Accepted
DA 2024-07-18
ER

PT J
AU Manzyuk, O
   Pearlmutter, BA
   Radul, AA
   Rush, DR
   Siskind, JM
AF Manzyuk, Oleksandr
   Pearlmutter, Barak A.
   Radul, Alexey Andreyevich
   Rush, David R.
   Siskind, Jeffrey Mark
TI Perturbation confusion in forward automatic differentiation of
   higher-order functions
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB Automatic differentiation (AD) is a technique for augmenting computer programs to compute derivatives. The essence of AD in its forward accumulation mode is to attach perturbations to each number, and propagate these through the computation by overloading the arithmetic operators. When derivatives are nested, the distinct derivative calculations, and their associated perturbations, must be distinguished. This is typically accomplished by creating a unique tag for each derivative calculation and tagging the perturbations. We exhibit a subtle bug, present in fielded implementations which support derivatives of higher-order functions, in which perturbations are confused despite the tagging machinery, leading to incorrect results. The essence of the bug is as follows: a unique tag is needed for each derivative calculation, but in existing implementations unique tags are created when taking the derivative of a function at a point. When taking derivatives of higher-order functions, these need not correspond! We exhibit a simple example: a higher-order function f whose derivative at a point x, namely f'(x), is itself a function which calculates a derivative. This situation arises naturally when taking derivatives of curried functions. Two potential solutions are presented, and their deficiencies discussed. One uses eta expansion to delay the creation of fresh tags in order to put them into one-to-one correspondence with derivative calculations. The other wraps outputs of derivative operators with tag substitution machinery. Both solutions seem very difficult to implement without violating the desirable complexity guarantees of forward AD.
C1 [Manzyuk, Oleksandr; Pearlmutter, Barak A.; Radul, Alexey Andreyevich; Rush, David R.] Maynooth Univ, Dept Comp Sci, Maynooth, Co Kildare, Ireland.
   [Manzyuk, Oleksandr; Pearlmutter, Barak A.; Radul, Alexey Andreyevich; Rush, David R.] Maynooth Univ, Hamilton Inst, Maynooth, Co Kildare, Ireland.
   [Siskind, Jeffrey Mark] Purdue Univ, Sch Elect & Comp Engn, W Lafayette, IN 47907 USA.
   [Manzyuk, Oleksandr] Facebook, Menlo Pk, CA 94025 USA.
   [Radul, Alexey Andreyevich] Google AI, Mountain View, CA USA.
C3 Maynooth University; Maynooth University; Purdue University System;
   Purdue University; Facebook Inc
RP Manzyuk, O (corresponding author), Maynooth Univ, Dept Comp Sci, Maynooth, Co Kildare, Ireland.; Manzyuk, O (corresponding author), Maynooth Univ, Hamilton Inst, Maynooth, Co Kildare, Ireland.; Manzyuk, O (corresponding author), Facebook, Menlo Pk, CA 94025 USA.
EM manzyuk@gmail.com; barak@pearlmutter.net; axch@alum.mit.edu;
   kumoyuki@gmail.com
RI Pearlmutter, Barak A/M-8791-2014; Pearlmutter, Barak A./AAL-8999-2020
OI Pearlmutter, Barak A/0000-0003-0521-4553; Siskind,
   Jeffrey/0000-0002-0105-6503
FU Science Foundation Ireland (SFI) Principal Investigator grant
   [09/IN.1/I2637]; Army Research Laboratory (ARL) [W911NF-10-2-0060];
   National Science Foundation (NSF) [1522954-IIS, 1734938-IIS];
   Intelligence Advanced Research Projects Activity (IARPA) via Department
   of Interior/Interior Business Center (DOI/IBC) [D17PC00341]; Science
   Foundation Ireland (SFI) [09/IN.1/I2637] Funding Source: Science
   Foundation Ireland (SFI)
FX We would like to thank Gerald Jay Sussman for wrestling at our side in
   the search for correctness. We also appreciate the efforts of Olivier
   Danvy in helping improve an earlier version of this manuscript, and
   Jeremy Gibbons for helping to improve this version. This work was
   supported, in part, by Science Foundation Ireland (SFI) Principal
   Investigator grant 09/IN.1/I2637, by the Army Research Laboratory (ARL)
   accomplished under Cooperative Agreement Number W911NF-10-2-0060, by the
   National Science Foundation (NSF) under Grants 1522954-IIS and
   1734938-IIS, and by the Intelligence Advanced Research Projects Activity
   (IARPA) via Department of Interior/Interior Business Center (DOI/IBC)
   contract number D17PC00341. Any opinions, findings, views, and
   conclusions or recommendations expressed in this material are those of
   the authors and do not necessarily reflect the views, official policies,
   or endorsements, either expressed or implied, of SFI, ARL, NSF, IARPA,
   DOI/IBC, or the Irish or the U.S. Governments. The U.S. Government is
   authorized to reproduce and distribute reprints for Government purposes,
   notwithstanding any copyright notation herein.
CR [Anonymous], 1871, Proc London Math Soc, DOI [DOI 10.1112/PLMS/S1-4.1.381, 10.1112/plms/s1-4.1.381]
   [Anonymous], 2018, ADV NEURAL INFORM PR
   [Anonymous], 2005, IMPLEMENTATION APPL
   [Anonymous], 2018, ADV NEURAL INFORM PR
   [Anonymous], [No title captured]
   [Anonymous], 1980, THESIS
   [Anonymous], 2015, ARXIV150203492
   [Anonymous], 2016, ADV NEURAL INFORM PR
   [Anonymous], 2008, EVALUATING DERIVATIV
   Baydin A. G., 2016, ARXIV161103423
   Bendtsen Claus, 1996, Technical Report No. IMM-REP-1996-17
   Bischof C., 1992, Sci. Program., V1, P11, DOI [10.1155/1992/717832, DOI 10.1155/1992/717832]
   Breuleux O., 2017, AUTODIFF WORKSH NEUR
   Buckwalter B., 2007, SAFE FORWARD MODE AD
   Cheney J., 2012, ARXIV12015240
   Church Alonzo., 1941, The Calculi of Lambda-conversion. Annals of mathematics studies
   Ehrhard T, 2003, THEOR COMPUT SCI, V309, P1, DOI 10.1016/S0304-3975(03)00392-X
   Elliott C. M., 2017, COMPILING CATEGORIES
   Elliott  Conal, 2009, INT C FUNCT PROGR IC
   Farr W. M., 2006, AUTOMATIC DIFFERENTI
   Hamilton WilliamRowan., 1837, T ROYAL IRISH ACAD, V17, P293
   Karczmarczuk J., 2001, Higher-Order and Symbolic Computation, V14, P35, DOI 10.1023/A:1011501232197
   Kelly R., 2016, AD 2016 C OXF UK
   Kmett Edward, 2010, AD AUTOMATIC DIFFERE
   Lavendhomme R., 1996, BASIC CONCEPTS SYNTH
   Leibniz G., 1684, Acta eruditorum
   Maclaurin D., 2015, INT C MACH LEARN AUT
   Manzyuk O., 2012, ARXIV12020411
   Manzyuk O, 2012, ELECTRON NOTES THEOR, V286, P257, DOI 10.1016/j.entcs.2012.08.017
   Newton I., 1704, OPTICKS TREATISE REF
   Pearlmutter B. A., 2008, INT C AUT DIFF, P79
   Pearlmutter BA, 2007, CONFERENCE RECORD OF POPL 2007: THE 34TH ACM SIGPLAN SIGACT SYMPOSIUM ON PRINCIPLES OF PROGAMMING LANGUAGES, P155
   Pitts AM, 2003, INFORM COMPUT, V186, P165, DOI 10.1016/S0890-5401(03)00138-X
   Plotkin G., 2018, COMMUNICATION   0111
   Raissi M, 2018, J MACH LEARN RES, V19
   Salman H., 2018, ARXIV181003256CSSTAT
   Shan C.-c, 2008, DIFFERENTIATING REGI
   Siskind Jeffrey Mark, 2008, Higher-Order and Symbolic Computation, V21, P361, DOI 10.1007/s10990-008-9037-1
   Siskind JM, 2007, CONFERENCE RECORD OF POPL 2007: THE 34TH ACM SIGPLAN SIGACT SYMPOSIUM ON PRINCIPLES OF PROGAMMING LANGUAGES, P71
   Sussman G., 2001, Structure and Interpretation of Classical Mechanics
   Sussman GJ, 2013, FUNCTIONAL DIFFERENTIAL GEOMETRY, P1
   Sussman G. J., 1997, SCHEME MECH INSTALLA
   Sussman G. J., 1997, SCMUTILS REFERENCE M
   Taylor B, 1969, METHODUS INCREMENTOR, V3
   WENGERT RE, 1964, COMMUN ACM, V7, P463, DOI 10.1145/355586.364791
NR 45
TC 8
Z9 8
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD SEP 16
PY 2019
VL 29
AR e12
DI 10.1017/S095679681900008X
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA IY3RR
UT WOS:000486310800001
OA Green Submitted, hybrid
DA 2024-07-18
ER

PT J
AU Abel, A
   Adelsberger, S
   Setzer, A
AF Abel, Andreas
   Adelsberger, Stephan
   Setzer, Anton
TI Interactive programming in Agda - Objects and graphical user interfaces
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID TERMINATION; DEFINITIONS
AB We develop a methodology for writing interactive and object-based programs (in the sense of Wegner) in dependently typed functional programming languages. The methodology is implemented in the ooAgda library. ooAgda provides a syntax similar to the one used in object-oriented programming languages, thanks to Agda's copattern matching facility. The library allows for the development of graphical user interfaces (GUIs), including the use of action listeners.
   Our notion of interactive programs is based on the IO monad defined by Hancock and Setzer, which is a coinductive data type. We use a sized coinductive type which allows us to write corecursive programs in a modular way. Objects are server-side interactive programs that respond to method calls by giving answers and changing their state. We introduce two kinds of objects: simple objects and IO objects. Methods in simple objects are pure, while method calls in IO objects allow for interactions before returning their result. Our approach also allows us to extend interfaces and objects by additional methods.
   We refine our approach to state-dependent interactive programs and objects through which we can avoid exceptions. For example, with a state-dependent stack object, we can statically disable the pop method for empty stacks. As an example, we develop the implementation of recursive functions using a safe stack. Using a coinductive notion of object bisimilarity, we verify basic correctness properties of stack objects and show the equivalence of different stack implementations. Finally, we give a proof of concept that our interaction model allows to write GUI programs in a natural way: we present a simple drawing program, and a program which allows the users to move a small spaceship using a button.
C1 [Abel, Andreas] Gothenburg Univ, Dept Comp Sci & Engn, S-41124 Gothenburg, Sweden.
   [Adelsberger, Stephan] Vienna Univ Econ, Dept Informat Syst & Operat, Vienna, Austria.
   [Setzer, Anton] Swansea Univ, Dept Comp Sci, Swansea SA2 8PP, W Glam, Wales.
C3 University of Gothenburg; Vienna University of Economics & Business;
   Swansea University
RP Abel, A (corresponding author), Gothenburg Univ, Dept Comp Sci & Engn, S-41124 Gothenburg, Sweden.
EM andreas.abel@gu.se; sadelsbe@wu.ac.at; a.g.setzer@swan.ac.uk
OI Adelsberger, Stephan/0000-0001-5503-1785
FU Vetenskapsradet (Swedish Research Council) [621-2014-4864/E0486401];
   EPSRC [EP/G033374/1]; CORCON FP7 Marie Curie International Research
   Project [PIRSES-GA-2013-612638]; COMPUTAL FP7 Marie Curie International
   Research Project [PIRSES-GA-2011-294962]; CA COST Action European
   research network on types for programming and verification (EUTYPES)
   [CA15123]; EPSRC [EP/G033374/1] Funding Source: UKRI
FX The first author acknowledges support from Vetenskapsradet (Swedish
   Research Council) through project 621-2014-4864/E0486401 Termination
   Certification for Dependently-Typed Programs and Proofs via Refinement
   Types. The third author acknowledges support by EPSRC grant EP/G033374/1
   Theory and Applications of Induction Recursion; CORCON FP7 Marie Curie
   International Research Project, PIRSES-GA-2013-612638; and COMPUTAL FP7
   Marie Curie International Research Project, PIRSES-GA-2011-294962. The
   first and third authors were further supported by CA COST Action CA15123
   European research network on types for programming and verification
   (EUTYPES).
CR Abel A, 2002, J FUNCT PROGRAM, V12, P1, DOI 10.1017/S0956796801004191
   Abel A, 2007, LECT NOTES COMPUT SC, V4807, P286
   Abel A, 2013, ACM SIGPLAN NOTICES, V48, P27, DOI 10.1145/2480359.2429075
   Abel A, 2013, ACM SIGPLAN NOTICES, V48, P185, DOI [10.1145/2500365.2500591, 10.1145/2544174.2500591]
   Abel A, 2012, ELECTRON P THEOR COM, P1, DOI 10.4204/EPTCS.77.1
   Abel A, 2010, ELECTRON P THEOR COM, P14, DOI 10.4204/EPTCS.43.2
   Abel A, 2008, LOG METH COMPUT SCI, V4, DOI 10.2168/LMCS-4(2:3)2008
   Agda, 2016, WITH ABSTR
   Altenkirch T., 2012, EPIC SERIES COMPUT S, V5, P101
   Altenkirch T, 2009, IEEE S LOG, P277, DOI 10.1109/LICS.2009.33
   Amadio RM, 1998, LECT NOTES COMPUT SC, V1378, P48, DOI 10.1007/BFb0053541
   [Anonymous], 1972, Ph. D. Dissertation
   [Anonymous], 2007, PRACTICAL PROGRAMMIN
   [Anonymous], 2001, HDB LOGIC COMPUTER S
   [Anonymous], 1996, Structure and interpretation of computer programs
   [Anonymous], 1996, A Theory of Objects
   Barthe G, 2005, LECT NOTES COMPUT SC, V3461, P71
   Barthe G, 2004, MATH STRUCT COMP SCI, V14, P97, DOI 10.1017/S0960129503004122
   Barthe G, 2008, LECT NOTES COMPUT SC, V5213, P493, DOI 10.1007/978-3-540-87531-4_35
   Bauer A, 2015, J LOG ALGEBR METHODS, V84, P108, DOI 10.1016/j.jlamp.2014.02.001
   Bauer Andrej, 2012, PROGRAMMING ALGEBRAI
   Benke M, 2007, COMMUNICATION
   Blanchette JC, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P192, DOI 10.1145/2784731.2784732
   Blanqui F, 2004, LECT NOTES COMPUT SC, V3091, P24
   Boehm H.-J., 1996, P 23 ACM S PRINC PRO
   Brady E, 2015, LECT NOTES COMPUT SC, V8843, P18, DOI 10.1007/978-3-319-14675-1_2
   Coq Community, 2015, COQ PROOF ASS
   Coquand T., 1994, Types for Proofs and Programs. International Workshop TYPES '93. Selected Papers, P62
   Dam M., 2003, LECT NOTES COMPUTER, V2620
   Dybjer P, 2003, ANN PURE APPL LOGIC, V124, P1, DOI 10.1016/S0168-0072(02)00096-9
   Dybjer P., 1994, Formal Aspects of Computing, V6, P440, DOI 10.1007/BF01211308
   Forsberg FN, 2010, LECT NOTES COMPUT SC, V6247, P454, DOI 10.1007/978-3-642-15205-4_35
   Garcia R, 2014, ACM T PROGR LANG SYS, V36, DOI 10.1145/2629609
   Ghani N., 2003, LECT NOTES COMPUT SC, V2620
   Giménez E, 1998, LECT NOTES COMPUT SC, V1443, P397, DOI 10.1007/BFb0055070
   Gimenez E., 1996, THESIS
   Gordon A. D., 1996, P 23 ACM S PRINC PRO
   Gordon A. D., 2003, LECT NOTES COMPUTER, V2620
   Granstrom Johan G., 2012, Journal of Software, V7, P1136, DOI 10.4304/jsw.7.5.1136-1148
   Granstrom J. G., 2016, INTUITIONISTIC PROGR
   Hackage, 2016, CONTR MON STM
   HAGINO T, 1989, J SYMB COMPUT, V8, P629, DOI 10.1016/S0747-7171(89)80065-3
   Hancock P, 2006, ANN PURE APPL LOGIC, V137, P189, DOI 10.1016/j.apal.2005.05.022
   Hancock P., 2000, Computer Science Logic. 14th International Workshop, CSL 2000. Annual Conference of the EACSL. Proceedings (Lecture Notes in Computer Science Vol.1862), P317
   Hancock P., 2000, P WORKSH SUBT DEP TY
   Hancock P., 2004, DAGSTUHL SEMINAR P, V04381
   Hancock P., 2005, SETS TYPES TOPOLOGY
   Hancock P, 2013, LECT NOTES COMPUT SC, V7941, P156, DOI 10.1007/978-3-642-38946-7_13
   Harris T, 2008, COMMUN ACM, V51, P91, DOI 10.1145/1378704.1378725
   Haskell W., 2016, WXHASKELL QUICK STAR
   Hirschfeld R, 2008, J OBJECT TECHNOL, V7, P125, DOI 10.5381/jot.2008.7.3.a4
   Hudak P., 2016, SOE LIB
   Hughes J., 1996, P 23 ACM S PRINC PRO
   Hurkens A. J. C., 1995, Typed Lambda Calculi and Applications. Second International Conference on Typed Lambda Calculi and Applications, TLCA '95. Proceedings, P266, DOI 10.1007/BFb0014058
   Igried Bashar, 2016, P 1 INT WORKSH TYP D, P28, DOI [10.1145/2976022.2976032, DOI 10.1145/2976022.2976032]
   Jeffrey A., 2013, LECT NOTES COMPUTER, V7752, P228
   Leijen D., 2015, WXASTEROIDS
   Leijen D., 2004, P 2004 ACM SIGPLAN W, P57, DOI DOI 10.1145/1017472.1017483
   Lochbihler A., 2014, P IS WORKSH ASS ITP
   Martin-Lof P., 1984, Intuitionistic type theory
   Matthes R, 2002, SYNTHESE, V133, P107, DOI 10.1023/A:1020831825964
   McBride C, 2004, J FUNCT PROGRAM, V14, P69, DOI 10.1017/S0956796803004829
   Mendler N. P., 1986, Proceedings of the Symposium on Logic in Computer Science (Cat. No.86CH2321-8), P249
   MOGGI E, 1991, INFORM COMPUT, V93, P55, DOI 10.1016/0890-5401(91)90052-4
   Nilsson H., 2009, P ACM INT C FUNCT PR, P23
   PETERSSON K, 1989, LECT NOTES COMPUT SC, V389, P128
   Sacchini JL, 2013, IEEE S LOG, P233, DOI 10.1109/LICS.2013.29
   Setzer A., 2006, 7 S TRENDS FUNCT PRO, V7, P91
   Setzer A., 2016, OOAGDA
   Setzer A, 2016, PROG COMPUT SCI APPL, V28, P377, DOI 10.1007/978-3-319-29198-7_12
   Setzer Anton, 2012, Logic, Epistemology, and the Unity of Science, V27, P351, DOI [10.1007/978-94-007-4435-6_16, DOI 10.1007/978-94-007-4435-6_16]
   STROM RE, 1986, IEEE T SOFTWARE ENG, V12, P157, DOI 10.1109/TSE.1986.6312929
   Stump A., 2016, VERIFIED FUNCTIONAL
   WEGNER P, 1987, SIGPLAN NOTICES, V22, P168
NR 74
TC 7
Z9 10
U1 0
U2 1
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PY 2017
VL 27
BP 1
EP 54
DI 10.1017/S0956796816000319
PG 54
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA EM7ZV
UT WOS:000395531800001
DA 2024-07-18
ER

PT J
AU Stump, A
AF Stump, Aaron
TI The calculus of dependent lambda eliminations
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID INTERSECTION; RECURSION
AB Modern constructive type theory is based on pure dependently typed lambda calculus, augmented with user-defined datatypes. This paper presents an alternative called the Calculus of Dependent Lambda Eliminations, based on pure lambda encodings with no auxiliary datatype system. New typing constructs are defined that enable induction, as well as large eliminations with lambda encodings. These constructs are constructor-constrained recursive types, and a lifting operation to lift simply typed terms to the type level. Using a lattice theoretic denotational semantics for types, the language is proved logically consistent. The power of CDLE is demonstrated through several examples, which have been checked with a prototype implementation called Cedille.
C1 [Stump, Aaron] Univ Iowa, Comp Sci, Iowa City, IA 52242 USA.
C3 University of Iowa
RP Stump, A (corresponding author), Univ Iowa, Comp Sci, Iowa City, IA 52242 USA.
EM astump@acm.org
FU NSF [1524519]; DoD (MURI program) [FA9550-16-1-0082]; Division of
   Computing and Communication Foundations; Direct For Computer & Info Scie
   & Enginr [1524519] Funding Source: National Science Foundation
FX I gratefully acknowledge NSF support of this project under award
   1524519, and DoD support under award FA9550-16-1-0082 (MURI program).
CR Abel A, 2004, LECT NOTES COMPUT SC, V3210, P190
   Altenkirch T, 2010, LECT NOTES COMPUT SC, V6009, P40, DOI 10.1007/978-3-642-12251-4_5
   [Anonymous], 2007, PRACTICAL PROGRAMMIN
   [Anonymous], 1951, ANN MATH STUD
   Atkey R, 2014, ACM SIGPLAN NOTICES, V49, P503, DOI 10.1145/2535838.2535852
   Augustsson L., 1998, Proceedings of the third ACM SIGPLAN international conference on Functional programming, ICFP '98, P239
   Berger U., 1991, Proceedings of Sixth Annual IEEE Symposium on Logic in Computer Science (Cat. No.91CH3025-4), P203, DOI 10.1109/LICS.1991.151645
   Bernardy JP, 2011, LECT NOTES COMPUT SC, V6604, P108, DOI 10.1007/978-3-642-19805-2_8
   BOHM C, 1985, THEOR COMPUT SCI, V39, P135, DOI 10.1016/0304-3975(85)90135-5
   BREAZUTANNEN V, 1988, THEOR COMPUT SCI, V59, P85, DOI 10.1016/0304-3975(88)90097-7
   Carette J, 2009, J FUNCT PROGRAM, V19, P509, DOI 10.1017/S0956796809007205
   Chapman J, 2010, ICFP 2010: PROCEEDINGS OF THE 2010 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P3
   Chlipala A, 2008, ICFP'08: PROCEEDINGS OF THE 2008 SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P143
   Church A., 1940, J. Symbolic Logic, V5, P56, DOI [10.2307/2266170, DOI 10.2307/2266170]
   Constable R L, 1986, Implementing mathematics with the Nuprl proof development system
   Coq Development Team, 2015, Technical report
   Coquand T., 1986, Proceedings of the Symposium on Logic in Computer Science (Cat. No.86CH2321-8), P227
   COQUAND T, 1990, LECT NOTES COMPUT SC, V417, P50
   Coquand Thierry, 1992, P 3 WORKSH LOG FRAM
   Crary K, 2010, ICFP 2010: PROCEEDINGS OF THE 2010 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P131
   Fegaras L., 1996, Conference Record of POPL '96: The 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P284, DOI 10.1145/237721.237792
   FORTUNE S, 1983, J ACM, V30, P151, DOI 10.1145/322358.322370
   Geuvers H, 2001, LECT NOTES COMPUT SC, V2044, P166
   Ghani N, 2010, LECT NOTES COMPUT SC, V6247, P336, DOI 10.1007/978-3-642-15205-4_27
   Girard J.-Y., 1989, Cambridge Tracts in Theoretical Computer Science, V7
   Goguen H, 2006, LECT NOTES COMPUT SC, V4060, P521, DOI 10.1007/11780274_27
   HARPER R, 1989, LECT NOTES COMPUT SC, V352, P241
   Hofmann M, 2000, ANN PURE APPL LOGIC, V104, P113, DOI 10.1016/S0168-0072(00)00010-5
   Hofmann M., 1998, Twenty-five years of constructive type theory, Oxf. Logic Guides, V36, P83
   Koopman P., 2014, P 26 S IMPL APPL FUN
   Kopylov A, 2003, IEEE S LOG, P86, DOI 10.1109/LICS.2003.1210048
   Krishnaswami N. R., 2013, LIPICS, V23, P432
   LEIVANT D, 1991, INFORM COMPUT, V93, P93, DOI 10.1016/0890-5401(91)90053-5
   Leivant D., 1983, 24th Annual Symposium on Foundations of Computer Science, P460, DOI 10.1109/SFCS.1983.50
   Martin-Lof P., 1984, Intuitionistic type theory
   Mendler N. P. F., 1988, THESIS
   Meyer Albert R., 1986, P 13 ACM SIGACT SIGP, P287, DOI DOI 10.1145/512644.512671
   Miquel A, 2001, LECT NOTES COMPUT SC, V2044, P344
   Mogensen T. AE., 1992, Journal of Functional Programming, V2, P345, DOI 10.1017/S0956796800000423
   PARIGOT M, 1990, LECT NOTES COMPUT SC, V440, P309
   PARIGOT M, 1988, LECT NOTES COMPUT SC, V300, P145
   Peng Fu, 2014, Rewriting and Typed Lambda Calculi. Joint International Conference, RTA-TLCA 2014, Held as Part of the Vienna Summer of Logic, VSL 2014. Proceedings: LNCS 8560, P224, DOI 10.1007/978-3-319-08918-8_16
   PFENNING F, 1990, LECT NOTES COMPUT SC, V442, P209
   Pfenning F., 1999, Automated Deduction - CADE-16. 16th International Conference on Automated Deduction. Proceedings (Lecture Notes in Artificial Intelligence Vol.1632), P202
   PFENNING F, 1988, SIGPLAN NOTICES, V23, P199, DOI 10.1145/960116.54010
   Pientka B, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P371, DOI 10.1145/1328438.1328483
   Pierce BC, 2000, ACM T PROGR LANG SYS, V22, P1, DOI 10.1145/345099.345100
   Polakow J, 2015, ACM SIGPLAN NOTICES, V50, P177, DOI 10.1145/2804302.2804309
   Poswolsky A, 2009, ELECTRON NOTES THEOR, V228, P113, DOI 10.1016/j.entcs.2008.12.120
   Schürmann C, 2001, THEOR COMPUT SCI, V266, P1, DOI 10.1016/S0304-3975(00)00418-7
   Stump A., 2016, VERIFIED FUNCTIONAL
   Stump A, 2016, J FUNCT PROGRAM, V26, P1, DOI 10.1017/S0956796816000034
   The Univalent Foundations Program, 2013, Homotopy Type Theory: Univalent Foundations of Mathematics
   Washburn G, 2003, ACM SIGPLAN NOTICES, V38, P249, DOI 10.1145/944746.944728
   Werner B., 1992, INT WORKSHOP TYPES P, P341
   Werner Benjamin, 1994, THESIS
NR 56
TC 6
Z9 7
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PY 2017
VL 27
DI 10.1017/S0956796517000053
PG 41
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA EU3KQ
UT WOS:000400929000001
DA 2024-07-18
ER

PT J
AU Parys, P
AF Parys, Pawel
TI A characterization of lambda-terms transforming numerals
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB It is well known that simply typed lambda-terms can be used to represent numbers, as well as some other data types. We show that lambda-terms of each fixed (but possibly very complicated) type can be described by a finite piece of information (a set of appropriately defined intersection types) and by a vector of natural numbers. On the one hand, the description is compositional: having only the finite piece of information for two closed lambda-terms M and N, we can determine its counterpart for MN, and a linear transformation that applied to the vectors of numbers for M and N gives us the vector for MN. On the other hand, when a lambda-term represents a natural number, then this number is approximated by a number in the vector corresponding to this lambda-term. As a consequence, we prove that in a lambda-term of a fixed type, we can store only a fixed number of natural numbers, in such a way that they can be extracted using lambda-terms. More precisely, while representing k numbers in a closed lambda-term of some type, we only require that there are k closed lambda-terms M-1,..., M-k such that M-i takes as argument the lambda-term representing the k-tuple, and returns the i-th number in the tuple (we do not require that, using lambda-calculus, one can construct the representation of the k-tuple out of the k numbers in the tuple). Moreover, the same result holds when we allow that the numbers can be extracted approximately, up to some error (even when we only want to know whether a set is bounded or not). All the results remain true when we allow the Y combinator (recursion) in our lambda-terms, as well as uninterpreted constants.
C1 [Parys, Pawel] Univ Warsaw, Inst Informat, Warsaw, Poland.
C3 University of Warsaw
RP Parys, P (corresponding author), Univ Warsaw, Inst Informat, Warsaw, Poland.
EM parys@mimuw.edu.pl
OI Parys, Pawel/0000-0001-7247-1408
FU National Science Center [DEC-2012/07/D/ST6/02443]
FX We thank Igor Walukiewicz and Sylvain Salvati for a discussion on this
   topic. We also thank anonymous reviewers of this paper as well as of its
   conference version for useful comments. This work was supported by the
   National Science Center (decision DEC-2012/07/D/ST6/02443).
CR Barendregt H., 2013, PERSPECTIVES LOGIC
   Clairambault P., 2013, LIPICS, V24
   Colcombet T, 2013, LOG METH COMPUT SCI, V9, DOI 10.2168/LMCS-9(3:3)2013
   Kobayashi N, 2013, IEEE S LOG, P398, DOI 10.1109/LICS.2013.46
   Parys P., 2014, LECT NOTES COMPUTER, V8475
   Parys P, 2012, IEEE S LOG, P521, DOI 10.1109/LICS.2012.62
   Schwichtenberg H., 1976, Archiv fur Mathematische Logik und Grundlagenforschung, V17, P113, DOI 10.1007/BF02276799
   Statman R., 1979, Theoretical Computer Science, V9, P73, DOI 10.1016/0304-3975(79)90007-0
   ZAIONC M, 1987, THEOR COMPUT SCI, V52, P1, DOI 10.1016/0304-3975(87)90077-6
NR 9
TC 3
Z9 3
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PY 2016
VL 26
BP 1
EP 36
DI 10.1017/S0956796816000113
PG 36
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DT3CE
UT WOS:000381357300001
DA 2024-07-18
ER

PT J
AU Zeilberger, N
AF Zeilberger, Noam
TI Linear lambda terms as invariants of rooted trivalent maps
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB The main aim of the paper is to give a simple and conceptual account for the correspondence (originally described by Bodini, Gardy, and Jacquot) between alpha-equivalence classes of closed linear lambda terms and isomorphism classes of rooted trivalent maps on compact-oriented surfaces without boundary, as an instance of a more general correspondence between linear lambda terms with a context of free variables and rooted trivalent maps with a boundary of free edges. We begin by recalling a familiar diagrammatic representation for linear lambda terms, while at the same time explaining how such diagrams may be read formally as a notation for endomorphisms of a reflexive object in a symmetric monoidal closed (bi)category. From there, the "easy" direction of the correspondence is a simple forgetful operation which erases annotations on the diagram of a linear lambda term to produce a rooted trivalent map. The other direction views linear lambda terms as complete invariants of their underlying rooted trivalent maps, reconstructing the missing information through a Tutte-style topological recurrence on maps with free edges. As an application in combinatorics, we use this analysis to enumerate bridgeless rooted trivalent maps as linear lambda terms containing no closed proper subterms, and conclude by giving a natural reformulation of the Four Color Theorem as a statement about typing in lambda calculus.
C1 [Zeilberger, Noam] INRIA, Campus Ecole Polytech, F-91120 Palaiseau, France.
C3 Inria; Institut Polytechnique de Paris; Ecole Polytechnique
RP Zeilberger, N (corresponding author), INRIA, Campus Ecole Polytech, F-91120 Palaiseau, France.
EM noam.zeilberger@gmail.com
OI Zeilberger, Noam/0000-0002-5945-4184
FU ERC Advanced Grant ProofCert
FX I am grateful to Alain Giorgetti for introducing me to the idea of Tutte
   decomposition and for emphasizing its importance as a way of
   representing rooted maps. Special thanks to Andrej Bauer for inviting me
   to give a talk at the University of Ljubljana Foundations Seminar, which
   was the original impetus for writing this paper. Thanks also to Doron
   Zeilberger for helpful comments on an earlier draft, as well as to the
   anonymous referees. Finally, this work has been funded by the ERC
   Advanced Grant ProofCert.
CR [Anonymous], 1984, LAMBDA CALCULUS ITS
   BarNatan D, 1997, COMBINATORICA, V17, P43, DOI 10.1007/BF01196130
   Bodini O, 2013, THEOR COMPUT SCI, V502, P227, DOI 10.1016/j.tcs.2013.01.008
   Curry H.B., 1972, Combinatory Logic, VII
   Hyland M., 2013, SPECIAL ISSUE DEDICA, P1
   Jacobs B., 1993, LECTURE NOTES COMPUT, V664, P195
   JONES G, 1994, LOND MATH S, V200, P115
   JONES GA, 1978, P LOND MATH SOC, V37, P273
   Joyal A., 1991, ADV MATH, V102, P20
   KAUFFMAN LH, 1990, J COMB THEORY B, V48, P145, DOI 10.1016/0095-8956(90)90114-F
   Knuth D. E., 1970, LECT NOTES MATH, V188, P212
   Lando SK, 2004, ENCY MATH SCI, V141
   Mairson HG, 2004, J FUNCT PROGRAM, V14, P623, DOI 10.1017/S0956796804005131
   Mairson HG, 2002, LECT NOTES COMPUT SC, V2556, P2
   OEIS Foundation Inc, 2016, ON LINE ENCY INTEGER
   Penrose Roger, 1971, Combinatorial Mathematics and its Applications, P221
   Scott D. S., 1980, HB CURRY ESSAYS COMB, P403
   Seely R. A. G., 1987, Proceedings of the Symposium on Logic in Computer Science (Cat. No.87CH2464-6), P65
   Selinger P, 2011, LECT NOTES PHYS, V813, P289, DOI 10.1007/978-3-642-12821-9_4
   Stay M., 2013, THEORY APPL CATEGORI, V31, P755
   Thomas R., 1998, Not. Am. Math. Soc., V45, P848
   TUTTE WT, 1968, B AM MATH SOC, V74, P64, DOI 10.1090/S0002-9904-1968-11877-4
   TUTTE WT, 1962, CANADIAN J MATH, V14, P402, DOI 10.4153/CJM-1962-032-x
   Vidal S., 2010, THESIS
   Zeilberger N., 2015, BALANCED POLYM LINEA
   Zeilberger N., 2015, ARXIV150907596
   Zeilberger N, 2015, LOG METH COMPUT SCI, V11, DOI 10.2168/LMCS-11(3:22)2015
NR 27
TC 7
Z9 7
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PY 2016
VL 26
AR e21
DI 10.1017/S095679681600023X
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA EC1JX
UT WOS:000387861900001
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Tirronen, V
   Uusi-Mäkelä, S
   Isomöttönen, V
AF Tirronen, Ville
   Uusi-Makela, Samuel
   Isomottonen, Ville
TI Understanding beginners' mistakes with Haskell
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB This article presents an overview of student difficulties in an introductory functional programming (FP) course taught in Haskell. The motivation for this study stems from our belief that many student difficulties can be alleviated by understanding the underlying causes of errors and by modifying the educational approach and, possibly, the teaching language accordingly. We analyze students' exercise submissions and categorize student errors according to compiler error messages and then manually according to the observed underlying cause. Our study complements earlier studies on the topic by applying computer and manual analysis while focusing on providing descriptive statistics of difficulties specific to FP languages. We conclude that the majority of student errors, regardless of cause, are reported by three different compiler error messages that are not well understood by students. In addition, syntactic features, such as precedence, the syntax of function application, and deeply nested statements, cause difficulties throughout the course.
C1 [Tirronen, Ville; Uusi-Makela, Samuel; Isomottonen, Ville] Univ Jyvaskyla, Dept Math Informat Technol, Jyvaskyla 40014, Finland.
C3 University of Jyvaskyla
RP Tirronen, V (corresponding author), Univ Jyvaskyla, Dept Math Informat Technol, POB 35 Agora, Jyvaskyla 40014, Finland.
EM ville.tirronen@jyu.fi; samuel.h.uusi-makela@student.jyu.fi;
   ville.isomottonen@jyu.fi
OI Tirronen, Ville/0000-0002-5500-8267
CR Anderson JR., 1988, NATURE EXPERTISE, P153
   [Anonymous], 1985, Human-Computer Interaction
   [Anonymous], 2003, P ACM SIGPLAN WORKSH
   [Anonymous], 1983, Proceedings of CHI 1983
   Bieniusa A., 2008, FUNCTIONAL DECLARATI
   Blanco Javier, 2009, SIGCSE Bulletin, V41, P31, DOI 10.1145/1595453.1595459
   Brown N. C. C., 2014, P 10 ANN C INT COMP
   Chakravarty MMI, 2004, J FUNCT PROGRAM, V14, P113, DOI 10.1017/S0956796803004805
   Clack C, 1995, LECT NOTES COMPUT SC, V1022, P289
   Damas L., 1982, C REC 9 ANN ACM S PR, P207, DOI DOI 10.1145/582153.582176
   Denny Paul, 2012, P 17 ACM ANN C INN T, P75, DOI [10.1145/2325296.2325318, DOI 10.1145/2325296.2325318]
   Farchi E., 2003, Proceedings International Parallel and Distributed Processing Symposium, DOI 10.1109/IPDPS.2003.1213511
   Felleisen M, 2004, J FUNCT PROGRAM, V14, P365, DOI 10.1017/S0956796804005076
   Felleisen Matthias, 2001, How to Design Programs
   Fenwick James B.  Jr., 2009, SIGCSE Bulletin, V41, P296, DOI 10.1145/1539024.1508973
   Findler RB, 2002, J FUNCT PROGRAM, V12, P159, DOI 10.1017/S0956796801004208
   Garrison D. R., 2004, Internet and Higher Education, V7, P95, DOI 10.1016/j.iheduc.2004.02.001
   Haberman B., 2002, SIGCSE Bulletin, V34, P84, DOI 10.1145/637610.544441
   Hage J., 2006, MINING FOR HELIUM
   Hage J, 2007, LECT NOTES COMPUT SC, V4449, P199
   Hall CV, 1996, ACM T PROGR LANG SYS, V18, P109, DOI 10.1145/227699.227700
   Heeren B. J., 2005, IPA DISSERTATION SER
   Hutton G., 1999, Journal of Functional Programming, V9, P355, DOI 10.1017/S0956796899003500
   Isomöttönen V, 2013, ACM T COMPUT EDUC, V13, DOI 10.1145/2483710.2483711
   Jadud MC, 2005, COMPUT SCI EDUC, V15, P25, DOI 10.1080/08993400500056530
   Joosten S., 1993, Journal of Functional Programming, V3, P49, DOI 10.1017/S0956796800000599
   Keravnou ET, 1995, LECT NOTES COMPUT SC, V1022, P15
   Kinnunen P., 2006, ICER, P97
   Lahtinen E., 2005, SIGCSE Bulletin, V37, P14, DOI 10.1145/1151954.1067453
   LEBLANC RJ, 1982, SOFTWARE PRACT EXPER, V12, P825, DOI 10.1002/spe.4380120903
   Lerner BS, 2007, ACM SIGPLAN NOTICES, V42, P425, DOI 10.1145/1273442.1250783
   Lewandowski G., 2003, J COMPUTING SCI COLL, V19, P299
   Lu S, 2008, ACM SIGPLAN NOTICES, V43, P329, DOI 10.1145/1353536.1346323
   Ma L, 2011, COMPUT SCI EDUC, V21, P57, DOI 10.1080/08993408.2011.554722
   Marceau G, 2011, SIGCSE 11: PROCEEDINGS OF THE 42ND ACM TECHNICAL SYMPOSIUM ON COMPUTER SCIENCE EDUCATION, P499
   Marceau Guillaume., 2011, Proceedings of the 10th SIGPLAN symposium on New ideas, new paradigms, and reflections on programming and software, ONWARD '11, P3
   Mcbride C, 2008, J FUNCT PROGRAM, V18, P1, DOI 10.1017/S0956796807006326
   Morazán MT, 2011, LECT NOTES COMPUT SC, V6546, P166
   Page Rex., 2012, LECT NOTES COMPUTER, V7193, P146, DOI [10.1007/978-3-642-32037-8, DOI 10.1007/978-3-642-32037-8]
   Pane JF, 2001, INT J HUM-COMPUT ST, V54, P237, DOI 10.1006/ijhc.2000.0410
   Pea R. D., 1986, Journal of Educational Computing Research, V2, P25, DOI 10.2190/689T-1R2A-X4W4-29J2
   Perkins D., 1986, EMPIRICAL STUDIES PR, P213
   Ruehr F, 2008, P 2008 INT WORKSH FU, P79
   Scaffidi C., 2012, C-J CARBON RES, V28, P220
   SEGAL J, 1994, INSTR SCI, V22, P385
   SOLOWAY E, 1984, IEEE T SOFTWARE ENG, V10, P595, DOI 10.1109/TSE.1984.5010283
   SOLOWAY E, 1982, P 1982 C HUM FACT CO, P52, DOI DOI 10.1145/800049.801754
   Spohrer J.G., 1986, Analyzing the high frequency bugs in novice programs, P230
   Stefik A, 2013, ACM T COMPUT EDUC, V13, DOI 10.1145/2534973
   Thompson S, 1995, LECT NOTES COMPUT SC, V1022, P85
   Tinto V, 1997, J HIGH EDUC, V68, P599, DOI 10.2307/2959965
   Tirronen V., J FUNCT PRO IN PRESS
   Ulloa M., 1980, SIGCSE Bulletin, V12, P48, DOI 10.1145/989253.989263
   VANSOMEREN MW, 1990, INSTR SCI, V19, P257, DOI 10.1007/BF00116441
   Vujosevic-Janicic M, 2008, TEACH MATH-SERB, V11, P63
NR 55
TC 11
Z9 11
U1 0
U2 2
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PY 2015
VL 25
AR e11
DI 10.1017/S0956796815000179
PG 30
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DB1AM
UT WOS:000368240300004
OA Bronze
DA 2024-07-18
ER

PT J
AU Sculthorpe, N
   Frisby, N
   Gill, A
AF Sculthorpe, Neil
   Frisby, Nicolas
   Gill, Andy
TI The Kansas University rewrite engine A Haskell-Embedded Strategic
   Programming Language with Custom Closed Universes
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID PATTERN
AB When writing transformation systems, a significant amount of engineering effort goes into setting up the infrastructure needed to direct individual transformations to specific targets in the data being transformed. Strategic programming languages provide general-purpose infrastructure for this task, which the author of a transformation system can use for any algebraic data structure. The Kansas University Rewrite Engine (KURE) is a typed strategic programming language, implemented as a Haskell-embedded domain-specific language. KURE is designed to support typed transformations over typed data, and the main challenge is how to make such transformations compatible with generic traversal strategies that should operate over any type. Strategic programming in a typed setting has much in common with datatype-generic programming. Compared to other approaches to datatype-generic programming, the distinguishing feature of KURE's solution is that the user can configure the behaviour of traversals based on the location of each datum in the tree, beyond their behaviour being determined by the type of each datum. This article describes KURE's approach to assigning types to generic traversals, and the implementation of that approach. We also compare KURE, its design choices, and their consequences, with other approaches to strategic and datatype-generic programming.
C1 [Sculthorpe, Neil; Frisby, Nicolas; Gill, Andy] Univ Kansas, Informat & Telecommun Technol Ctr, Lawrence, KS 66045 USA.
C3 University of Kansas
RP Sculthorpe, N (corresponding author), Univ Kansas, Informat & Telecommun Technol Ctr, Lawrence, KS 66045 USA.
EM neil@ittc.ku.ed; nfrisby@ittc.ku.ed; andygill@ittc.ku.ed
RI Sculthorpe, Neil/N-7131-2014
OI Sculthorpe, Neil/0000-0002-7244-0916
FU National Science Foundation [1117569]; Direct For Computer & Info Scie &
   Enginr; Division of Computing and Communication Foundations [1117569]
   Funding Source: National Science Foundation
FX This material is based upon work supported by the National Science
   Foundation under Grant No. 1117569.
CR Adams MD, 2014, PEPM '14: PROCEEDINGS OF THE ACM SIGPLAN WORKSHOP ON PARTIAL EVALUATION AND PROGRAM MANIPULATION, P71, DOI 10.1145/2543728.2543730
   [Anonymous], 1992, 19th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, DOI DOI 10.1145/143165.143169
   Balland E, 2008, ELECTRON NOTES THEOR, V219, P97, DOI 10.1016/j.entcs.2008.10.037
   Bravenboer M, 2008, SCI COMPUT PROGRAM, V72, P52, DOI 10.1016/j.scico.2007.11.003
   Bringert B, 2008, J FUNCT PROGRAM, V18, P567, DOI 10.1017/S0956796808006898
   Brown NCC, 2009, HASKELL'09: PROCEEDINGS OF THE 2009 ACM SIGPLAN HASKELL SYMPOSIUM, P105
   BURSTALL RM, 1977, J ACM, V24, P44, DOI 10.1145/321992.321996
   Culpepper R, 2012, J FUNCT PROGRAM, V22, P439, DOI 10.1017/S0956796812000275
   Culpepper R, 2010, ACM SIGPLAN NOTICES, V45, P235, DOI 10.1145/1932681.1863577
   Dolstra E., 2001, THESIS UTRECHT U
   Dolstra E., 2001, UUCS200138
   Ellison C, 2012, ACM SIGPLAN NOTICES, V47, P533, DOI 10.1145/2103621.2103719
   Erdweg S, 2012, ACM SIGPLAN NOTICES, V47, P149, DOI 10.1145/2430532.2364526
   Erdweg S, 2011, ACM SIGPLAN NOTICES, V46, P391, DOI 10.1145/2076021.2048099
   Erdweg Sebastian, 2014, 13 INT C MODULARITY, P241, DOI [10.1145/2577080, DOI 10.1145/2577080]
   Farmer A, 2012, ACM SIGPLAN NOTICES, V47, P1, DOI 10.1145/2430532.2364508
   Felleisen M., 2009, Semantics Engineering with PLT Redex
   Frisby N., 2012, WORKSH GEN PROGR NEW, P1
   Gibbons J., 2005, NIC SERIES, V27, P277
   Gill A., 2006, P 2006 ACM SIGPLAN W, P108
   Gill A, 2009, LECT NOTES COMPUT SC, V5658, P285, DOI 10.1007/978-3-642-03034-5_14
   Girard Jean-Yves, 1972, THESIS U PARIS DIDER
   Hinze R, 2007, LECT NOTES COMPUT SC, V4719, P150
   Hinze R, 2009, SCI COMPUT PROGRAM, V74, P590, DOI 10.1016/j.scico.2007.10.006
   HUGHES RJM, 1986, INFORM PROCESS LETT, V22, P141, DOI 10.1016/0020-0190(86)90059-1
   Jones SP, 2007, ACM SIGPLAN NOTICES, V42, P327, DOI 10.1145/1291220.1291200
   Jones SP, 2007, J FUNCT PROGRAM, V17, P1, DOI 10.1017/S0956796806006034
   Kats LCL, 2010, ACM SIGPLAN NOTICES, V45, P444, DOI 10.1145/1932682.1869497
   Klein C, 2012, ACM SIGPLAN NOTICES, V47, P285, DOI 10.1145/2103621.2103691
   Lämmel R, 2003, ACM SIGPLAN NOTICES, V38, P26, DOI 10.1145/640136.604179
   Lammel R., 2002, Practical Aspects of Declarative Languages. 4th International Symposium, PADL 2002. Proceedings (Lecture Notes in Computer Science Vol.2257), P137
   Lazar David, 2012, FM 2012: Formal Methods. Proceedings of the 18th International Symposium, P267, DOI 10.1007/978-3-642-32759-9_23
   Liang Sheng, 1995, P 22 ACM SIGPLAN SIG, P333, DOI DOI 10.1145/199448.199528
   Löh A, 2011, WGP 11: PROCEEDINGS OF THE 2011 ACM SIGPLAN WORKSHOP ON GENERIC PROGRAMMING, P1
   Lorenzen F, 2013, ACM SIGPLAN NOTICES, V48, P331, DOI [10.1145/2544174.2500596, 10.1145/2500365.2500596]
   Magalhaes JP, 2010, ACM SIGPLAN NOTICES, V45, P37, DOI 10.1145/2088456.1863529
   Mcbride C, 2008, J FUNCT PROGRAM, V18, P1, DOI 10.1017/S0956796807006326
   Mitchell N, 2007, HASKELL'07: PROCEEDINGS OF THE ACM SIGPLAN 2007 HASKELL WORKSHOP, P49, DOI 10.1145/1291201.1291208
   Moors A., 2006, P 2006 ACM SIGPLAN W, P96
   O'Connor R., 2011, WORKSH GEN PROGR
   Oliveira BCDS, 2010, J FUNCT PROGRAM, V20, P303, DOI 10.1017/S0956796810000171
   Reynolds J. C., 1974, Programming Symposium, P408
   Rodriguez A, 2008, HASKELL'08: PROCEEDINGS OF THE ACM SIGPLAN 2008 HASKELL SYMPOSIUM, P111
   Santos A, 1995, THESIS U GLASGOW GLA
   Sculthorpe Neil, 2013, Implementation and Application of Functional Languages. 24th International Symposium, IFL 2012. Revised Selected Papers: LNCS 8241, P86, DOI 10.1007/978-3-642-41582-1_6
   Sheard T, 2002, ACM SIGPLAN NOTICES, V37, P60, DOI 10.1145/636517.636528
   Strachey C., 2000, Higher-Order and Symbolic Computation, V13, P11, DOI 10.1023/A:1010000313106
   Sulzmann M, 2007, PROCEEDINGS OF THE TLDI 2007: 2007 ACM SIGPLAN INTERNATIONAL WORKSHOP ON TYPES IN LANGUAGES DESIGN AND IMPLEMENTATION, P53, DOI 10.1145/1190315.1190324
   Swierstra W, 2008, J FUNCT PROGRAM, V18, P423, DOI 10.1017/S0956796808006758
   Tseitin G., 1983, AUTOMATION REASONING, P466, DOI [DOI 10.1007/978-3-642-81955-1_28, 10.1007/978-3-642-81955-128, DOI 10.1007/978-3-642-81955-128, 10.1007/978-3-642-81955-1_28]
   Van Noort T, 2010, J FUNCT PROGRAM, V20, P375, DOI 10.1017/S0956796810000183
   Visser E, 2005, J SYMB COMPUT, V40, P831, DOI 10.1016/j.jsc.2004.12.011
   Visser E, 2003, LECT NOTES COMPUT SC, V3016, P216
   Visser E., 2013, COMMUNICATION
   Visser Eelco, 1998, ICFP 98, P13
   WADLER P, 1989, CONFERENCE RECORD OF THE SIXTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P60, DOI 10.1145/75277.75283
NR 56
TC 4
Z9 6
U1 0
U2 3
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD JUL
PY 2014
VL 24
IS 4
BP 434
EP 473
DI 10.1017/S0956796814000185
PG 40
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AQ9VF
UT WOS:000343204600002
OA Bronze, Green Accepted
DA 2024-07-18
ER

PT J
AU Dreyer, D
   Neis, G
   Birkedal, L
AF Dreyer, Derek
   Neis, Georg
   Birkedal, Lars
TI The impact of higher-order state and control effects on local relational
   reasoning
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB Reasoning about program equivalence is one of the oldest problems in semantics. In recent years, useful techniques have been developed, based on bisimulations and logical relations, for reasoning about equivalence in the setting of increasingly realistic languages-languages nearly as complex as ML or Haskell. Much of the recent work in this direction has considered the interesting representation independence principles enabled by the use of local state, but it is also important to understand the principles that powerful features like higher-order state and control effects disable. This latter topic has been broached extensively within the framework of game semantics, resulting in what Abramsky dubbed the "semantic cube": fully abstract game-semantic characterizations of various axes in the design space of ML-like languages. But when it comes to reasoning about many actual examples, game semantics does not yet supply a useful technique for proving equivalences.
   In this paper, we marry the aspirations of the semantic cube to the powerful proof method of step-indexed Kripke logical relations. Building on recent work of Ahmed et al. (2009), we define the first fully abstract logical relation for an ML-like language with recursive types, abstract types, general references and call/cc. We then show how, under orthogonal restrictions to the expressive power of our language-namely, the restriction to first-order state and/or the removal of call/cc-we can enhance the proving power of our possible-worlds model in correspondingly orthogonal ways, and we demonstrate this proving power on a range of interesting examples. Central to our story is the use of state transition systems to model the way in which properties of local state evolve over time.
C1 [Birkedal, Lars] IT Univ Copenhagen, Copenhagen, Denmark.
C3 IT University Copenhagen
EM dreyer@mpi-sws.org; neis@mpi-sws.org; birkedal@itu.dk
CR ABRAMSKY S, 1998, P IEEE S LOG COMP SC
   Ahmed A., 2009, P ACM SIGPLAN SIGACT
   Ahmed Amal J., 2004, Ph. D. Dissertation
   Appel AW, 2001, ACM T PROGR LANG SYS, V23, P657, DOI 10.1145/504709.504712
   Benton N., 2009, P ACM SIGPLAN INT C
   Benton N., 2009, P ACM SIGPLAN WORKSH
   Birkedal L., 2011, P IEEE S LOG COMP SC
   BOHR N, 2007, THESIS IT U COPENHAG
   Dreyer D., 2012, MPISWS2012001
   Dreyer D., 2010, P ACM SIGPLAN SIGACT
   Dreyer Derek, 2011, LMCS, V7, P1
   FELLEISEN M, 1992, THEOR COMPUT SCI, V103, P235, DOI 10.1016/0304-3975(92)90014-7
   Friedman D., 1985, P ACM SIGPLAN SIGACT
   Ghica Dan R., 2000, P INT C AUT LANG PRO
   Hur C.-K., 2011, P ACM SIGPLAN SIGACT
   Hur C.-K., 2012, P ACM SIGPLAN SIGACT
   Johann P, 2006, FUND INFORM, V69, P63
   Johann P, 2003, J FUNCT PROGRAM, V13, P797, DOI 10.1017/S0956796802004409
   Johann P., 2010, P IEEE S LOG COMP SC
   Koutavas V., 2006, P ACM SIGPLAN SIGACT
   Koutavas V., 2008, FUN FULLY ABST UNPUB
   KRIVINE JL, 1994, ANN PURE APPL LOGIC, V68, P53, DOI 10.1016/0168-0072(94)90047-7
   Laird J., 2007, P INT C AUT LANG PRO
   Laird J., 1997, P IEEE S LOG COMP SC
   Lassen S. B., 2008, P IEEE S LOG COMP SC
   Lassen S. B., 2007, P C COMP SCI LOG CSL
   Mason I., 1991, Journal of Functional Programming, V1, P287, DOI 10.1017/S0956796800000125
   Morris James Hiram, 1968, Ph.D. thesis
   Murawski AS, 2008, THEOR COMPUT SCI, V390, P214, DOI 10.1016/j.tcs.2007.09.022
   Murawski AS, 2011, IEEE S LOG, P75, DOI 10.1109/LICS.2011.31
   Murawski AS, 2005, THEOR COMPUT SCI, V338, P315, DOI 10.1016/j.tcs.2004.12.036
   O'Hearn P., 1995, P C MATH FDN PROGR S
   Pilkiewicz Alexandre, 2011, P ACM SIGPLAN WORKSH
   Pitts A., 1998, P INT WORKSH HIGH OR
   Pitts A. M., 1996, P IEEE S LOG COMP SC
   Pitts A.M., 2005, ADV TOPICS TYPES PRO
   Pottier Francois, 2009, Generalizing the higher-order frame and anti-frame rules
   Pottier Francois, 2008, P IEEE S LOG COMP SC
   Reddy U. S., 2011, P INT WORKSH FDN OBJ
   Sangiorgi D, 2011, ACM T PROGR LANG SYS, V33, DOI 10.1145/1889997.1890002
   Schwinghammer J., 2012, MATH STRUCTURES COMP
   Schwinghammer J., 2010, P FDN SOFTW SCI COMP
   Stovring K., 2007, P ACM SIGPLAN SIGACT
   Sumii E., 2009, P C COMP SCI LOG CSL
   Sumii E, 2007, J ACM, V54, DOI 10.1145/1284320.1284325
   Thielecke H., 2000, P EUR S PROGR ESOP
   Yoshida N, 2008, LOG METH COMPUT SCI, V4, DOI 10.2168/LMCS-4(4:2)2008
NR 47
TC 35
Z9 37
U1 0
U2 1
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD JUL-SEP
PY 2012
VL 22
SI SI
BP 477
EP 528
DI 10.1017/S095679681200024X
PN 4-5
PG 52
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 004HQ
UT WOS:000308672600004
OA Bronze
DA 2024-07-18
ER

PT J
AU Hinze, R
AF Hinze, Ralf
TI Concrete stream calculus: An extended study
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 13th ACM SIGPLAN International Conference on Functional Programming
CY SEP 22-24, 2008
CL Victoria, CANADA
SP ACM SIGPLAN
ID COINDUCTIVE CALCULUS; POWER
AB This paper shows how to reason about streams concisely and precisely. Streams, infinite sequences of elements, live in a coworld: they are given by a coinductive datatype, operations on streams are implemented by corecursive programs, and proofs are typically concocted using coinduction. This paper offers an alternative to coinduction. Suitably restricted, stream equations possess unique solutions. This property gives rise to a simple and attractive proof technique, essentially bringing equational reasoning to the coworld. We redevelop the theory of recurrences, finite calculus and generating functions using streams and stream operators, building on the cornerstone of unique solutions. The paper contains a smorgasbord of examples: we study recursion elimination, investigate the binary carry sequence, explore Sprague-Grundy numbers and present two proofs of Moessner's Theorem. The calculations benefit from the rich structure of streams. As the type of streams is an applicative functor we can effortlessly lift operations and their properties to streams. In combination with Haskell's facilities for overloading, this greatly contributes to conciseness of notation. The development is indeed constructive: streams and stream operators are implemented in Haskell, usually by one-liners. The resulting calculus or library, if you wish, is elegant and fun to use.
C1 Univ Oxford, Comp Lab, Oxford OX1 3QD, England.
C3 University of Oxford
RP Hinze, R (corresponding author), Univ Oxford, Comp Lab, Wolfson Bldg,Parks Rd, Oxford OX1 3QD, England.
EM ralf.hinze@comlab.ox.ac.uk
CR [Anonymous], 1998, Categories for the working mathematician
   [Anonymous], 1998, SORTING SEARCHING
   [Anonymous], 1994, FDN COMPUTER SCI
   [Anonymous], 2003, Haskell 98 language and libraries: the revised report
   Backhouse R, 2001, INFORM PROCESS LETT, V77, P71, DOI 10.1016/S0020-0190(00)00205-2
   Bartels F., 2003, Mathematical Structures in Computer Science, V13, P321, DOI 10.1017/S0960129502003900
   Bird R., 1998, INTRO FUNCTIONAL PRO, V2nd
   BIRD R, 1998, LECT NOTES COMPUTER, V1422, P52, DOI DOI 10.1007/BFB0054285
   Bird R. S., 1987, Logic of Programming and Calculi of Discrete Design. International Summer School. Proceedings of the NATO Advanced Study Institute, P5
   Coquand T., 1993, LECT NOTES COMPUTER, P62, DOI DOI 10.1007/3-540-58085-9
   Danvy O, 1999, LECT NOTES COMPUT SC, V1722, P241
   Gibbons J, 2005, FUND INFORM, V66, P353
   Gill A, 2009, J FUNCT PROGRAM, V19, P227, DOI 10.1017/S0956796809007175
   Hinze R., 2000, Journal of Functional Programming, V10, P305, DOI 10.1017/S0956796800003701
   Hinze R., 2008, GUIDE2LHS2TEX VERSIO
   Hinze R, 2010, LIFTING OPERATORS LA
   Hinze R, 2009, J FUNCT PROGRAM, V19, P491, DOI 10.1017/S0956796809990116
   Hinze R, 2008, ICFP'08: PROCEEDINGS OF THE 2008 SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P189
   Hinze Ralf, 2000, P 2 WORKSH GEN PROGR, P17
   Karczmarczuk J, 1997, THEOR COMPUT SCI, V187, P203, DOI 10.1016/S0304-3975(97)00065-0
   Mcbride C, 2008, J FUNCT PROGRAM, V18, P1, DOI 10.1017/S0956796807006326
   McIlroy MD, 2001, INFORM PROCESS LETT, V77, P189, DOI 10.1016/S0020-0190(00)00201-5
   MCILROY MD, 1999, J FUNCTIONAL PROGRAM, V3, P325
   Milner Robin., 1989, INT SERIES COMPUTER
   Niqui M, 2010, LECT NOTES COMPUT SC, V6120, P310, DOI 10.1007/978-3-642-13321-3_18
   Perron O., 1951, SITZUNGSBERICHTEN MN, V4, P31
   Rutten JJMM, 2005, MATH STRUCT COMP SCI, V15, P93, DOI 10.1017/S0960129504004517
   Rutten JJMM, 2003, THEOR COMPUT SCI, V308, P1, DOI 10.1016/S0304-3975(02)00895-2
   Salle H., 1952, SITZUNGSBERICHTEN MN, V2, P7
   Silva A, 2010, INFORM COMPUT, V208, P578, DOI 10.1016/j.ic.2008.08.006
   SLOANE N., 2009, ON LINE ENCY INTEGER
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
NR 41
TC 11
Z9 12
U1 0
U2 3
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD NOV
PY 2010
VL 20
SI SI
BP 463
EP 535
DI 10.1017/S0956796810000213
PN 5-6
PG 73
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 735PF
UT WOS:000288428700003
OA Bronze
DA 2024-07-18
ER

PT J
AU Van Noort, T
   Yakushev, AR
   Holdermans, S
   Jeuring, J
   Heeren, B
   Magalhaes, JP
AF Van Noort, Thomas
   Yakushev, Alexey Rodriguez
   Holdermans, Stefan
   Jeuring, Johan
   Heeren, Bastiaan
   Magalhaes, Jose Pedro
TI A lightweight approach to datatype-generic rewriting
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID LANGUAGE
AB Term-rewriting systems can be expressed as generic programs parameterised over the shape of the terms being rewritten. Previous implementations of generic rewriting libraries require users to either adapt the datatypes that are used to describe these terms or to specify rewrite rules as functions. These are fundamental limitations: the former implies a lot of work for the user, while the latter makes it hard if not impossible to document, test, and analyze rewrite rules. In this article, we demonstrate how to overcome these limitations by making essential use of type-indexed datatypes. Our approach is lightweight in that it is entirely expressible in Haskell with GADTs and type families and can be readily packaged for use with contemporary Haskell distributions.
C1 [Van Noort, Thomas] Radboud Univ Nijmegen, Inst Comp & Informat Sci, NL-6500 GL Nijmegen, Netherlands.
   [Yakushev, Alexey Rodriguez; Holdermans, Stefan] Vector Fabr, NL-5611 KN Eindhoven, Netherlands.
   [Jeuring, Johan; Magalhaes, Jose Pedro] Univ Utrecht, Dept Informat & Comp Sci, NL-3508 TB Utrecht, Netherlands.
   [Jeuring, Johan; Heeren, Bastiaan] Open Univ Netherlands, Sch Comp Sci, NL-6401 DL Heerlen, Netherlands.
C3 Radboud University Nijmegen; Utrecht University; Open University
   Netherlands
RP Van Noort, T (corresponding author), Radboud Univ Nijmegen, Inst Comp & Informat Sci, POB 9010, NL-6500 GL Nijmegen, Netherlands.
EM thomas@cs.ru.nl; alexey@vectorfabrics.com; stefan@vectorfabrics.com;
   johanj@cs.uu.nl; bastiaan.heeren@ou.nl; jpm@cs.uu.nl
OI Magalhaes, Jose Pedro/0009-0000-6253-0865
FU SURF Foundation; Higher Education and Research Partnership Organisation
   for Information and Communications Technology (ICT); Technology
   Foundation STW through its project on "Demand Driven Workflow Systems"
   [07729]; Netherlands Organisation for Scientific Research (NWO)
   [612.063.613]; "Scriptable Compilers" [612.063.406]; Portuguese
   Foundation for Science and Technology (FCT) [SFRH/BD/35999/2007];
   Fundação para a Ciência e a Tecnologia [SFRH/BD/35999/2007] Funding
   Source: FCT
FX This work was made possible by the support of the SURF Foundation, the
   Higher Education and Research Partnership Organisation for Information
   and Communications Technology (ICT). Please visit http://www.surf.nl/
   for more information about SURF.; This work has been partially funded by
   the Technology Foundation STW through its project on "Demand Driven
   Workflow Systems" (07729), by the Netherlands Organisation for
   Scientific Research (NWO) through its projects on "Real-life
   Datatype-Generic Programming" (612.063.613) and "Scriptable Compilers"
   (612.063.406), and by the Portuguese Foundation for Science and
   Technology (FCT) via the SFRH/BD/35999/2007 grant; it was carried out
   while the second and third author were employed at Utrecht University.
CR [Anonymous], 2005, P GT2005 ASME TURB E
   [Anonymous], 1972, INDAGATIONES MATHEMA, DOI DOI 10.1016/1385-7258(72)90034-0
   Backhouse R, 1999, LECT NOTES COMPUT SC, V1608, P28
   Borovansky P., 2001, International Journal of Foundations of Computer Science, V12, P69, DOI 10.1142/S0129054101000412
   Bravenboer M, 2008, SCI COMPUT PROGRAM, V72, P52, DOI 10.1016/j.scico.2007.11.003
   BRINGERT B, 2006, P 11 ACM SIGPLAN INT
   BROWN NCC, 2008, P 9 S TREND IN PRESS, P304
   CHAKRAVARTY MMT, 2005, P 10 ACM SIGPLAN INT
   Claessen K., 2000, P 5 ACM SIGPLAN INT
   GOGUEN J, 1997, ALGEBRAIC SEMANTICS
   Heeren B, 2008, LECT NOTES ARTIF INT, V5144, P430, DOI 10.1007/978-3-540-85110-3_36
   Hinze R, 2004, SCI COMPUT PROGRAM, V51, P117, DOI 10.1016/j.scico.2003.07.001
   Hinze R., 2000, GENERIC PROGRAMS PRO
   Holdermans S, 2006, LECT NOTES COMPUT SC, V4014, P209, DOI 10.1007/11783596_14
   Hongwei Xi, 2003, SIGPLAN Notices, V38, P224, DOI 10.1145/640128.604150
   Jansson P., 1998, Journal of Functional Programming, V8, P527, DOI 10.1017/S095679689800313X
   JANSSON P, 2000, P WORKSH GEN PROGR W, P33
   JANSSON P, 1997, POPL 97 24 ACM SIGPL, P68
   JONES SP, 2006, P 11 ACM SIGPLAN INT, P50
   Lämmel R, 2003, ACM SIGPLAN NOTICES, V38, P26, DOI 10.1145/640136.604179
   LAMMEL R, 2002, LNCS, V2257, P137
   Magalhaes JP, 2010, PEPM '10: PROCEEDINGS OF THE 2010 ACM SIGPLAN WORKSHOP ON PARTIAL EVALUATION AND PROGRAM MANIPULATION, P33, DOI 10.1145/1706356.1706366
   Mitchell N, 2007, HASKELL'07: PROCEEDINGS OF THE ACM SIGPLAN 2007 HASKELL WORKSHOP, P49, DOI 10.1145/1291201.1291208
   Pasalic E, 2004, LECT NOTES COMPUT SC, V3286, P136
   Schrijvers T, 2008, ICFP'08: PROCEEDINGS OF THE 2008 SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P51
   Sheard T, 2002, ACM SIGPLAN NOTICES, V37, P60, DOI 10.1145/636517.636528
   SHEARD T, 2001, P 6 ACM SIGPLAN INT, P86
   van Noort T, 2008, WGP'08: PROCEEDINGS OF THE 2008 ACM SIGPLAN WORKSHOP ON GENERIC PROGRAMMING, P13
   VANDENBAN AW, 1996, AGR EXTENSION, P5
NR 29
TC 5
Z9 5
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD MAY-JUL
PY 2010
VL 20
SI SI
BP 375
EP 413
DI 10.1017/S0956796810000183
PN 3-4
PG 39
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 711BF
UT WOS:000286560000006
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Wazny, J
AF Wazny, Jeremy
TI Experience report: Functional programming in C-Rules
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB C-Rules is a business rules management system developed by Constraint Technologies International (www.constrainttechnologies.com) that is designed for use in transport, travel and logistics problems. Individual businesses within these industries often need to solve the same kinds of problems related to scheduling of operations, resource allocation, staff rostering and so on, but each organisation has its own rules and procedures. Furthermore, these problems tend to be combinatorially challenging: before a final solution is chosen, many potential choices need to be generated, evaluated and compared. In C-Rules, users define rules that describe various aspects of a problem. These rules can be invoked from an application, which is typically either an optimising solver or an interactive planning tool. Rules can be used to encode evaluation criteria, such as the legality or cost of a proposed solution, or values like configuration parameters that may be used by the host application to tune or direct its progress. At its core, C-Rules provides a functional expression language that affords users power and flexibility when formulating rules. In this paper we will describe our experiences of using functional programming both at the end-user level and at the implementation level. We highlight some of the benefits of basing our rule system on features such as higher-order functions, referential transparency and static, polymorphic typing. We also outline some of our experiences in using Haskell to build an efficient compiler for the core language.
C1 Constraint Technol Int, Melbourne, Vic 3000, Australia.
RP Wazny, J (corresponding author), Constraint Technol Int, Level 7,224 Queen St, Melbourne, Vic 3000, Australia.
EM jeremy.wazny@constrainttechnologies.com
CR Augustsson L., 1997, Proceedings of the ACM SIGPLAN Symposium on Partial Evaluation and Semantics-Based Program Manipulation, PEPM '97, P127, DOI 10.1145/258993.259012
   HUGHES J, 1995, LNCS, V925, P53
   Marriott K., 1998, PROGRAMMING CONSTRAI
   *MERC, 2007, MELB MERC COMP
   *TPAC PAIR, 2007, TPAC PAIR OPT
   *TPAC ROST, 2007, TPAC ROST OPT
   WAZNY J, 2006, THESIS U MELBOURNE V
   [No title captured]
NR 8
TC 0
Z9 0
U1 0
U2 1
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD MAR
PY 2010
VL 20
BP 123
EP 136
DI 10.1017/S0956796810000018
PN 2
PG 14
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 596BN
UT WOS:000277658400001
OA Bronze
DA 2024-07-18
ER

PT J
AU Lack, S
   Power, J
AF Lack, Stephen
   Power, John
TI Gabriel-Ulmer duality and Lawvere theories enriched over a general base
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article; Proceedings Paper
CT Workshop on Mathematically Structured Functional Programming
CY JUL 02, 2006
CL Kuressaare, ESTONIA
ID COMPUTATION; SEMANTICS; NOTIONS
AB Motivated by the search for a body of mathematical theory to support the semantics of computational effects, we first recall the relationship between Lawvere theories and monads oil Set. We generalise that relationship from Set to all arbitrary locally presentable category Such as Poset and omega Cpo or functor categories such as [Inj,Set] and [Inj, omega Cpo]. That involves allowing the arities of Lawvere theories to be extended to being size-restricted objects of the locally presentable category. We develop a body of theory at this level of generality, in particular explaining how the relationship between generalised Lawvere theories and monads extends Gabriel-Ulmer duality.
C1 [Lack, Stephen] Univ Western Sydney, Sch Comp & Math, Penrith, NSW 1797, Australia.
   [Power, John] Univ Bath, Dept Comp Sci, Bath BA2 7AY, Avon, England.
C3 Western Sydney University; University of Bath
RP Lack, S (corresponding author), Univ Western Sydney, Sch Comp & Math, Locked Bag 1797, Penrith, NSW 1797, Australia.
EM s.lack@uws.edu.au; a.j.power@bath.ac.uk
OI Lack, Stephen/0000-0001-7035-9295; Power, John/0000-0002-3816-8509
CR [Anonymous], 1982, Cahiers Top. Geom. Diff. Categ., V23, P3
   Hyland M, 2007, THEOR COMPUT SCI, V375, P20, DOI 10.1016/j.tcs.2006.12.026
   Hyland M, 2006, THEOR COMPUT SCI, V366, P144, DOI 10.1016/j.tcs.2006.07.007
   Hyland M, 2006, THEOR COMPUT SCI, V357, P70, DOI 10.1016/j.tcs.2006.03.013
   Hyland M, 2007, ELECTRON NOTES THEOR, V172, P437, DOI 10.1016/j.entcs.2007.02.019
   Joyal A, 1993, CAHIERS TOPOLOGIE GE, V34, P153
   LAWVERE FW, 1963, P NATL ACAD SCI USA, V50, P869, DOI 10.1073/pnas.50.5.869
   Lüth C, 2002, LECT NOTES ARTIF INT, V2309, P18
   MOGGI E, 1991, INFORM COMPUT, V93, P55, DOI 10.1016/0890-5401(91)90052-4
   Moggi E., 1989, Proceedings. Fourth Annual Symposium on Logic in Computer Science (Cat. No.89CH2753-2), P14, DOI 10.1109/LICS.1989.39155
   Nishizawa K, 2009, J PURE APPL ALGEBRA, V213, P377, DOI 10.1016/j.jpaa.2008.07.009
   Plotkin G, 2003, APPL CATEGOR STRUCT, V11, P69, DOI 10.1023/A:1023064908962
   Plotkin G, 2002, LECT NOTES COMPUT SC, V2303, P342
   POWER AJ, 1995, INFORM COMPUT, V120, P251, DOI 10.1006/inco.1995.1112
   Power J., 2000, THEORY APPL CATEGORI, V6, P83
   Power J, 2006, ELECTRON NOTES THEOR, V158, P355, DOI 10.1016/j.entcs.2006.04.018
   Robinson E., 2002, Formal Aspects of Computing, V13, P308, DOI 10.1007/s001650200014
   [No title captured]
   [No title captured]
NR 19
TC 7
Z9 7
U1 0
U2 2
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD MAY-JUL
PY 2009
VL 19
BP 265
EP 286
DI 10.1017/S0956796809007254
PN 3-4
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 461BW
UT WOS:000267240300002
OA Bronze, Green Published
DA 2024-07-18
ER

PT J
AU De La Encina, A
   Peña, R
AF De La Encina, Alberto
   Pena, Ricardo
TI From natural semantics to C: A formal derivation of two STG machines
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID HIGHER-ORDER LANGUAGES; FAST CURRY; PUSH/ENTER
AB The Spineless Tag-less G-machine (STG machine) was defined as the target abstract machine for compiling the lazy functional language Haskell. It is at the heart of the Glasgow Haskell Compiler (GHC) which is claimed to be the Haskell compiler that generates the most efficient code. A high-level description of the STG machine can be found in Peyton Jones (In Journal of Functional programming, 2(2), 127-202 1992), Marlow & Peyton Jones (In Sigplan Not., 39(9) 4-5 2004), and Marlow & Peyton Jones (in Journal of Functional Programming, 16(45), 415-449, 2006). Should the reader be interested in a more detailed view, then the only additional information available is the Haskell code of GHC and the C code of its runtime system.
   It is hard to prove that this machine correctly implements the lazy semantics of Haskell. Part of the problem lies in the fact that the STG machine executes a bare-bones functional language, called STGL, much lower level than Haskell. Therefore, part of the correctness should be-and it is-established by showing that the translation from Haskell to STGL preserves Haskell's semantics.
   The other part involves showing that the STG machine correctly implements the lazy semantics of STGL. In this paper we provide a step-by-step formal derivation of the STG machine and of its compilation to C, starting from a natural semantics of STGL. Thus, our starting point is higher level than the descriptions found Peyton Jones (In Journal of Functional programming, 2(2). 127-202, 1992) and Marlow & Peyton Jones (In Sigplan Not., 39(9) 4-5, 2004), and our arrival point is lower level than those works. Additionaly, there has been substantial changes between the so-called push/enter model or the STG machine described in Peyton Jones (In Journal of Functional programming, 2(2), 127-202, 1992), and the eval/apply model of the STG machine described in Marlow & Peyton Jones (In Sigplan Not., 39(9), 4-5, 2004). So, in fact, we derive two machines instead of one, starting from the same initial semantics.
   At each step we provide enough intuitions and explanations in order to understand the refinement, and then the formal definitions and statements proving that the derivation step is sound and complete. The main contribution of the paper is to show that an efficient machine such as the STG can be presented, understood, and formally reasoned about at different levels of abstraction.
C1 [De La Encina, Alberto; Pena, Ricardo] Univ Complutense Madrid, Dept Sistemas Informat & Computac, E-28040 Madrid, Spain.
C3 Complutense University of Madrid
RP De La Encina, A (corresponding author), Univ Complutense Madrid, Dept Sistemas Informat & Computac, E-28040 Madrid, Spain.
EM albertoe@sip.ucm.es; ricardo@sip.ucm.es
RI PENA MARI, RICARDO VICENTE/L-1886-2017; de la Encina,
   Alberto/H-7197-2015
OI PENA MARI, RICARDO VICENTE/0000-0001-5387-8931; de la Encina,
   Alberto/0000-0001-9074-4537
FU Spanish Ministry of Education and Science; Madrid Region Research
   Department
FX We want to thank the anonymous referees for the comments provided to
   previous versions of this work. They have helped us very much to improve
   and extend the ideas presented here. We also thank our sponsors, the
   Spanish Ministry of Education and Science and the Madrid Region Research
   Department, for their generous funding. Finally, we are grateful to our
   colleague Miguel Palomino for helping us to polish the english.
CR Ager Mads Sig, 2003, Proceedings of the 5th ACM SIGPLAN International Conference on Principles and Practice of Declaritive Programming, P8, DOI DOI 10.1145/888251.888254
   de la Encina A, 2002, LECT NOTES COMPUT SC, V2312, P88
   ENCINA A, 2003, PRINCIPLES PRACTICE, P102
   Hannan J., 1992, MATH STRUCT COMPUT S, V2, P415, DOI [DOI 10.1017/S0960129500001559, 10.1017/S0960129500001559]
   Jones S.P., 1999, REPORT PROGRAMMING L
   Jones Simon L. Peyton, 1989, P 4 INT C FUNCTIONAL, P184
   JONES SLP, 1991, LECT NOTES COMPUT SC, V523, P636
   Jones SLP, 1998, SCI COMPUT PROGRAM, V32, P3, DOI 10.1016/S0167-6423(97)00029-4
   JONES SLP, 1996, LNCS, V1058, P18
   JONES SLP, 1993, JOINT FRAMEWORK INFO
   JONES SLP, 2005, J FUNCT PROGRAM, V2, P127
   Jones SP, 2002, J FUNCT PROGRAM, V12, P393, DOI 10.1017/S0956796802004331
   Kluge W., 2005, SPRINGER TEXTS THEOR
   Launchbury John., 1993, Proceedings of the 20th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages. POPL'93. New York, NY, P144, DOI DOI 10.1145/158511.158618
   Marlow S, 2004, ACM SIGPLAN NOTICES, V39, P4, DOI 10.1145/1016848.1016856
   Marlow S, 2006, J FUNCT PROGRAM, V16, P415, DOI 10.1017/S0956796806005995
   MORRISETT G, 1995, INT C FUNCT PROGR LA, P66
   MOUNTJOY J, 1998, 3 INT C FUNCT PROGR, P163
   Pitts AM, 2005, LECT NOTES COMPUT SC, V3603, P17
   SESTOFT P, 1997, J FUNCTIONAL PROGRAM, V7, P231, DOI DOI 10.1017/S0956796897002712
   Urban C, 2004, THEOR COMPUT SCI, V323, P473, DOI 10.1016/j.tcs.2004.06.016
NR 21
TC 7
Z9 8
U1 0
U2 1
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD JAN
PY 2009
VL 19
BP 47
EP 94
DI 10.1017/S0956796808006746
PN 1
PG 48
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 392SM
UT WOS:000262322500004
OA Bronze
DA 2024-07-18
ER

PT J
AU David, R
   Mounier, G
AF David, R
   Mounier, G
TI An intuitionistic λ-calculus with exceptions
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID LOGIC
AB We introduce a typed lambda-calculus which allows the use of exceptions in the ML style. It is an extension of the system AF(2) of Krivine & Leivant (Krivine, 1990; Leivant, 1983). We show its main properties: confluence, strong normalization and weak subject reduction. The system satisfies the "the proof as program" paradigm as in AF(2). Moreover, the underlined logic of our system is intuitionistic logic.
C1 Univ Savoie Campus Sci, Math Lab, F-733760 Le Bourget Du Lac, France.
C3 Universite Savoie Mont Blanc
RP Univ Savoie Campus Sci, Math Lab, F-733760 Le Bourget Du Lac, France.
EM david@univ-savoie.fr; Georges.Mounier@ac-lyon.fr
CR [Anonymous], LECT NOTES COMPUTER
   CARDONE F, 1994, ANN PURE APPL LOGIC, V66, P197, DOI 10.1016/0168-0072(94)90034-5
   DEGROOTE P, 1995, LECT NOTES COMPUTER, V902, P201
   FRIEDMAN DP, 1987, THEOR COMPUT SCI, V52, P205
   Griffin T., 1990, P 17 ANN ACM S PRINC, DOI 10.1145/96709.96714
   KLOP JW, 1993, THEOR COMPUT SCI, V121, P279, DOI 10.1016/0304-3975(93)90091-7
   Krivine J.-L., 1990, Archive for Mathematical Logic, V30, P241, DOI 10.1007/BF01792986
   KRIVINE JL, 1994, ANN PURE APPL LOGIC, V68, P53, DOI 10.1016/0168-0072(94)90047-7
   KRIVINE JL, 1990, INFORM PROCESS C EIK, V26, P149
   KRIVINE JL, 1990, LAMBDA CALCUL
   LAFONT Y, 1989, PROOFS TYPES
   Leivant D., 1983, 24th Annual Symposium on Foundations of Computer Science, P460, DOI 10.1109/SFCS.1983.50
   LEROY X, 1993, LANGAGE CAML
   MANOURY P, 1993, THESIS U PARIS 7
   MOUNIER G, 1999, THESIS U SAVOIE
   NAKANO H, 1994, ANN PURE APPL LOGIC, V69, P269, DOI 10.1016/0168-0072(94)90087-6
   Nour K., 2000, Archive for Mathematical Logic, V39, P261, DOI 10.1007/s001530050147
   PARIGOT M, 1992, LECT NOTES ARTIF INT, V624, P190
   PESSAUX F, 1999, THESIS U PARIS 6
   PIERCE B, 1990, PRELIMINARY INVESTIG
NR 20
TC 5
Z9 5
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD JAN
PY 2005
VL 15
BP 33
EP 52
DI 10.1017/S0956796804005362
PN 1
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 890TK
UT WOS:000226533500003
OA Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Damian, D
   Danvy, O
AF Damian, D
   Danvy, O
TI CPS transformation of flow information, Part II: administrative
   reductions
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB We characterize the impact of a linear beta-reduction on the result of a control-flow analysis. (By 'a linear beta-reduction' we mean the beta-reduction of a linear gamma-abstraction, i.e., of a gamma-abstraction whose parameter occurs exactly once in its body.) As a corollary, we consider the administrative reductions of a Plotkin-style transformation into Continuation-Passing Style (CPS), and how they affect the result of a constraint-based control-flow analysis and, in particular, the least element in the space of solutions. We show that administrative reductions preserve the least solution. Preservation of least solutions solves a problem that was left open in Palsberg and Wand's article 'CPS Transformation of Flow Information! Together, Palsberg and Wand's article and the present article show how to map in linear time the least solution of the flow constraints of a program into the least solution of the flow constraints of the CPS counterpart of this program, after administrative reductions. Furthermore, we show how to CPS transform control-flow information in one pass.
C1 LION Biosci Ltd, Cambridge CB5 8DZ, England.
   Aarhus Univ, BRICS, Dept Comp Sci, DK-8000 Aarhus C, Denmark.
C3 Aarhus University
RP Damian, D (corresponding author), LION Biosci Ltd, Compass House,80-82 Newmarket Rd, Cambridge CB5 8DZ, England.
EM Daniel.Damian@uk.lionbioscience.com; danvy@brics.dk
CR DAMIAN D, 2002, IN PRESS J FUNCTIONA
   DAMIAN D, 2000, SIGPLAN NOTICES, V35
   DAMIAN D, 2001, THESIS U AARHUS AARH
   Danvy Olivier., 1992, MATH STRUCT COMP SCI, V2, P361, DOI DOI 10.1017/S0960129500001535
   HATCLIFF J, 1994, P 21 ANN ACM S PRINC, P458
   Henglein F., 1994, Journal of Functional Programming, V4, P435, DOI 10.1017/S0956796800001143
   HENGLEIN F, 1994, SCI COMPUT PROGRAM, V22, P197, DOI 10.1016/0167-6423(94)00004-2
   Henglein Fritz., 1991, POPL, P119, DOI DOI 10.1145/99583.99602
   Nielson F., 1999, Principles of Program Analysis
   PALSBERG J, 2002, IN PRESS J FUNCTIONA
   Plotkin G. D., 1975, Theoretical Computer Science, V1, P125, DOI 10.1016/0304-3975(75)90017-1
   Reynolds J. C., 1993, LISP and Symbolic Computation, V6, P233, DOI 10.1007/BF01019459
   Sabry A, 1997, ACM T PROGR LANG SYS, V19, P916, DOI 10.1145/267959.269968
   STEELE JR G. L., 1978, AITR474 MIT
   Wand M, 2002, LECT NOTES COMPUT SC, V2305, P213
   WAND M, 1985, P 12 ANN ACM S PRINC, P1
   Wand Mitchell, 1985, LECT NOTES COMPUTER, P219, DOI 10.1007/3-540-15648-8_17
NR 17
TC 1
Z9 2
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD SEP
PY 2003
VL 13
BP 925
EP 933
DI 10.1017/S0956796803004702
PN 5
PG 9
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 720RF
UT WOS:000185273200005
OA Bronze
DA 2024-07-18
ER

PT J
AU Bird, R
   Mu, SC
AF Bird, Richard
   Mu, Shin-Cheng
TI A greedy algorithm for dropping digits
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB Consider the following puzzle: given a number, remove k digits such that the resulting number is as large as possible. Various techniques are employed to derive a linear-time solution to the puzzle: we justify the structure of a greedy algorithm by predicate logic, give a constructive proof of the greedy condition using a dependently typed proof assistant and calculate the greedy step as well as the final, linear-time optimisation by equational reasoning.
C1 [Bird, Richard] Univ Oxford, Dept Comp Sci, Oxford OX1 3QD, England.
   [Mu, Shin-Cheng] Acad Sinica, Inst Informat Sci, Taipei, Taiwan.
C3 University of Oxford; Academia Sinica - Taiwan
RP Bird, R (corresponding author), Univ Oxford, Dept Comp Sci, Oxford OX1 3QD, England.
EM richard.bird@cs.ox.ac.uk; scm@iis.sinica.tw
RI Mu, Shin-Cheng/ABA-7746-2020
OI Mu, Shin-Cheng/0000-0002-4755-601X; , Richard/0000-0002-3901-742X
CR [Anonymous], 1991, Greedoids
   Bird Richard, 1997, Algebra of Programming
   Cormen Thomas H., 2001, INTRO ALGORITHMS
   Curtis SA, 2003, SCI COMPUT PROGRAM, V49, P125, DOI 10.1016/j.scico.2003.09.001
   Dijkstra E., 1974, AM MATH MON, V81, P608, DOI [DOI 10.2307/2319209, DOI 10.1080/00029890.1974.11993624]
   Lawler EL, 2001, COMBINATORIAL OPTIMI
   LeetCode, 2016, REM K DIG, P402
   Norell U, 2009, LECT NOTES COMPUT SC, V5832, P230, DOI 10.1007/978-3-642-04652-0_5
NR 8
TC 1
Z9 2
U1 0
U2 2
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD NOV 4
PY 2021
VL 31
AR e29
DI 10.1017/S0956796821000198
PG 9
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA XB4QD
UT WOS:000721314400001
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Shivkumar, B
   Murphy, J
   Ziarek, L
AF Shivkumar, Bhargav
   Murphy, Jeffrey
   Ziarek, Lukasz
TI Real-time MLton: A Standard ML runtime for real-time functional programs
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID GARBAGE COLLECTION; MEMORY MANAGEMENT; LANGUAGE
AB There is a growing interest in leveraging functional programming languages in real-time and embedded contexts. Functional languages are appealing as many are strictly typed, amenable to formal methods, have limited mutation, and have simple but powerful concurrency control mechanisms. Although there have been many recent proposals for specialized domain-specific languages for embedded and real-time systems, there has been relatively little progress on adapting more general purpose functional languages for programming embedded and real-time systems. In this paper, we present our current work on leveraging Standard ML (SML) in the embedded and real-time domains. Specifically, we detail our experiences in modifying MLton, a whole-program optimizing compiler for SML, for use in such contexts. We focus primarily on the language runtime, reworking the threading subsystem, object model, and garbage collector. We provide preliminary results over a radar-based aircraft collision detector ported to SML.
C1 [Shivkumar, Bhargav; Murphy, Jeffrey; Ziarek, Lukasz] Univ Buffalo, Buffalo, NY 14260 USA.
C3 State University of New York (SUNY) System; State University of New York
   (SUNY) Buffalo
RP Shivkumar, B (corresponding author), Univ Buffalo, Buffalo, NY 14260 USA.
EM bhargavs@buffalo.edu; jcmurphy@buffalo.edu; lziarek@buffalo.edu
FU National Science Foundation [CCF 1749539, CNS 1823230]
FX This work has been support in part by National Science Foundation
   grants: CCF 1749539 and CNS 1823230.
CR Anderson B, 2013, ABANDONING SEGMENTED
   [Anonymous], 2005, J EMBEDDED COMPUT
   [Anonymous], 1997, The Definition of Standard ML
   Appel A. W, 1987, LECT NOTES COMPUTER, V274, DOI [10.1007/3-540-18317-5_17, DOI 10.1007/3-540-18317-5_17]
   APPEL AW, 1996, J FUNCT PROGRAM, V6, P47, DOI DOI 10.1017/S095679680000157X
   Arts T., 2004, International Journal on Software Tools for Technology Transfer, V5, P205, DOI 10.1007/s10009-003-0114-9
   Audebaud P, 2009, SCI COMPUT PROGRAM, V74, P568, DOI 10.1016/j.scico.2007.09.002
   Bacon DF, 2003, ACM SIGPLAN NOTICES, V38, P81, DOI 10.1145/780731.780744
   Baker T. P., 1988, Proceedings. Real-Time Systems Symposium (IEEE Cat. No.88CH2618-7), P120, DOI 10.1109/REAL.1988.51108
   Ballabriga C, 2010, LECT NOTES COMPUT SC, V6399, P35, DOI 10.1007/978-3-642-16256-5_6
   Bruggeman C, 1996, ACM SIGPLAN NOTICES, V31, P99, DOI 10.1145/249069.231395
   CHENEY CJ, 1970, COMMUN ACM, V13, P677, DOI 10.1145/362790.362798
   Cheng P, 2001, AAI3179039
   Clinger W. D., 1999, Higher-Order and Symbolic Computation, V12, P7, DOI 10.1023/A:1010016816429
   Deters Morgan., 2002, Proceedings of the 3rd Int'l symposium on Memory management, ISMM'02, P132
   DIJKSTRA EW, 1978, COMMUN ACM, V21, P966, DOI 10.1145/359642.359655
   Elsman M, 2020, LECT NOTES COMPUT SC, V12007, P95, DOI 10.1007/978-3-030-39197-3_7
   Elsman Martin., 1999, Program Modules, Separate Compilation, and Intermodule Optimisation
   Erlang, 2021, ERL PROGR LANG OFF W
   FENICHEL RR, 1969, COMMUN ACM, V12, P611, DOI 10.1145/363269.363280
   Gay D, 2001, ACM SIGPLAN NOTICES, V36, P70, DOI 10.1145/381694.378815
   Go-Lang, 2013, CONTIGUOUS STACKS
   Goldstein SethCopen., 1997, Lazy Threads Compiler and Runtime Structures for Fine-Grained Parallel Programming
   Gosling James., 2000, The Real-Time Specification for Java
   Hallenberg N., 2002, ACM SIGPLAN C PROGR
   Hammond K, 2001, LECT NOTES COMPUT SC, V2011, P122
   Hammond K, 2007, HUME REPORT VERSION
   Hammond Kevin., 2003, Revised Selected Papers from the Fourth Symposium on Trends in Functional Programming, TFP 2003, Edinburgh, United Kingdom, 11-12 September 2003., P1
   Hamza H, 2012, SCI COMPUT PROGRAM, V77, P644, DOI 10.1016/j.scico.2012.01.002
   HANSON DR, 1990, SOFTWARE PRACT EXPER, V20, P5, DOI 10.1002/spe.4380200104
   Hawkins T, 2010, ATOM SYNCHRONOUS HAR
   HENTIES T, 2009, 2 INT WORKSH CERT SA
   HIEB R, 1990, SIGPLAN NOTICES, V25, P66, DOI 10.1145/93548.93554
   HUGHES J, 1989, COMPUT J, V32, P98, DOI 10.1093/comjnl/32.2.98
   Jones Richard., 2016, GARBAGE COLLECTION H
   Kalibera T, 2009, REAL TIM SYST SYMP P, P81, DOI 10.1109/RTSS.2009.40
   Kalibera Tomas., 2009, Proceedings of the 7th International Workshop on Java Technologies for Real-Time and Embedded Systems, P41, DOI DOI 10.1145/1620405.1620412
   Kumar R, 2014, ACM SIGPLAN NOTICES, V49, P179, DOI 10.1145/2535838.2535841
   Li M, 2016, SIGBED REV, V13, P8
   Lisper B, 2014, LECT NOTES COMPUT SC, V8803, P482, DOI 10.1007/978-3-662-45231-8_38
   Lopez N., 2002, Integrated Formal Methods. Third International Conference, IFM 2002. Proceedings (Lecture Notes in Computer Science Vol.2335), P29
   Marlow S, 2008, ISMM'08: PROCEEDINGS OF THE 2008 INTERNATIONAL SYMPOSIUM ON MEMORY MANAGEMENT, P11
   MLton, 2012, MLTON COMP RUNT SYST
   MLton Performance, 2012, MLTON PERF BENCHM
   Morsing D, 2014, STACKS ARE HANDL GO
   Muller SK, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3236790
   Murphy JC, 2019, CONCURR COMP-PRACT E, V31, DOI 10.1002/cpe.4902
   NETTLES S, 1993, SIGPLAN NOTICES, V28, P217, DOI 10.1145/173262.155111
   Nicosia V, 2007, ERLANG'07: PROCEEDINGS OF THE 2007 SIGPLAN ERLANG WORKSHOP, P29
   Pizlo F, 2010, EUROSYS'10: PROCEEDINGS OF THE EUROSYS 2010 CONFERENCE, P69
   Pizlo F, 2010, PLDI '10: PROCEEDINGS OF THE 2010 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P146, DOI 10.1145/1806596.1806615
   RapiTime, 2021, RAPITIME
   Regehr John, 2005, ACM T EMBED COMPUT S
   Reppy JohnH., 1999, CONCURRENT PROGRAMMI
   Reynolds John C., 1972, ACM 72, V2, P717, DOI DOI 10.1023/A:1010027404223
   ROSS DT, 1967, COMMUN ACM, V10, P481, DOI 10.1145/363534.363546
   SHIVERS O, 1988, SIGPLAN NOTICES, V23, P164, DOI 10.1145/960116.54007
   Shivkumar B, 2020, LECT NOTES COMPUT SC, V12007, P113, DOI 10.1007/978-3-030-39197-3_8
   Siebert Fridtjof., 2007, Proceedings of the 5th Int'l Workshop on Java Technologies for Real-time and Embedded Systems, JTRES'07, P94
   Sivaramakrishnan KC, 2014, J FUNCT PROGRAM, V24, P613, DOI 10.1017/S0956796814000161
   Sivaramakrishnan KC, 2012, ACM SIGPLAN NOTICES, V47, P49, DOI 10.1145/2426642.2259005
   Steele Guy L, 1978, RABBIT COMPILER SCHE
   Timber Language, 2008, TIMB GENTL INTR
   Tofte M, 1997, INFORM COMPUT, V132, P109, DOI 10.1006/inco.1996.2613
   Tolmach Andrew., 1993, Journal of Functional Programming, V8, P367
   Wan ZY, 2001, ACM SIGPLAN NOTICES, V36, P146, DOI 10.1145/507669.507654
   Ziarek L, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P628
NR 67
TC 0
Z9 0
U1 0
U2 1
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD AUG 31
PY 2021
VL 31
AR e19
DI 10.1017/S0956796821000174
PG 51
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA UJ5TX
UT WOS:000691348800001
DA 2024-07-18
ER

PT J
AU Darais, D
   Van Horn, D
AF Darais, David
   Van Horn, David
TI Constructive Galois Connections
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB Galois connections are a foundational tool for structuring abstraction in semantics, and their use lies at the heart of the theory of abstract interpretation. Yet, mechanization of Galois connections using proof assistants remains limited to restricted modes of use, preventing their general application in mechanized metatheory and certified programming. This paper presents constructive Galois connections, a variant of Galois connections that is effective both on paper and in proof assistants; is complete with respect to a large subset of classical Galois connections; and enables more general reasoning principles, including the "calculational" style advocated by Cousot. To design constructive Galois connections, we identify a restricted mode of use of classical ones which is both general and amenable to mechanization in dependently typed functional programming languages. Crucial to our metatheory is the addition of monadic structure to Galois connections to control a "specification effect." Effectful calculations may reason classically, while pure calculations have extractable computational content. Explicitly moving between the worlds of specification and implementation is enabled by our metatheory. To validate our approach, we provide two case studies in mechanizing existing proofs from the literature: the first uses calculational abstract interpretation to design a static analyzer, and the second forms a semantic basis for gradual typing. Both mechanized proofs closely follow their original paper-and-pencil counterparts, employ reasoning principles not captured by previous mechanization approaches, support the extraction of verified algorithms, and are novel.
C1 [Darais, David] Univ Vermont, Burlington, VT 05405 USA.
   [Van Horn, David] Univ Maryland, College Pk, MD 20742 USA.
C3 University of Vermont; University System of Maryland; University of
   Maryland College Park
RP Darais, D (corresponding author), Univ Vermont, Burlington, VT 05405 USA.
EM David.Darais@uvm.edu; dvanhorn@cs.umd.edu
OI Van Horn, David/0000-0002-9201-6864
FU DARPA [AFRL FA8750-15-2-0104]
FX We thank Ron Garcia and Eric Tanter for discussions of their work. Eric
   also helped with our French translation. We thank the Colony Club in
   D.C. and the Board& Brew in College Park for providing fruitful
   environments in which to work. We also thank the anonymous reviewers of
   ICFP 2016 and JFP, and the first author's thesis committee for their
   helpful feedback. This material is partially based on the research
   sponsored by DARPA under agreement number AFRL FA8750-15-2-0104.
CR [Anonymous], 1999, NATO ASI SERIES F
   [Anonymous], 2007, PRACTICAL PROGRAMMIN
   [Anonymous], 1984, STUDIES PROOF THEORY
   [Anonymous], 1996, Algebra of Programming
   Assaf M, 2017, PRINCIPLES PROGRAMMI
   Barthe G, 2007, EUR S PROGR ESQP
   Bird RichardS., 1990, Research Topics in Functional Programming
   Blanchet B., 2003, PROGRAMMING LANGUAGE
   Blazy S, 2013, STAT AN S SAS
   Cachera David., 2010, Interactive Theorem Proving ITP
   COUSOT P, 1994, PROCEEDINGS OF THE 1994 INTERNATIONAL CONFERENCE ON COMPUTER LANGUAGES, P95, DOI 10.1109/ICCL.1994.288389
   Cousot P., 1977, PRINCIPLES PROGRAMMI, P238
   Cousot P, 1978, PRINCIPLES PROGRAMMI
   Cousot P, 1976, INT S PROGR ISOP
   Cousot P, 1979, PRINCIPLES PROGRAMMI
   Cousot P., 2005, ABSTRACT INTERPRETAT
   Cousot Patrick., 1992, PRINCIPLES PROGRAMMI
   Cousot Patrick., 2008, Abstract interpretation
   Cousot Patrick., 2014, Principles of Programming Languages (POPL)
   Danielsson NilsAnders., 2011, The Agda standard library
   Darais D, 2016, INT C FUNCT PROGR IC
   Darais David., 2015, Object-Oriented Programming, Systems, Languages and Applications (OOPSLA)
   Delaware B, 2015, PRINCIPLES PROGRAMMI
   Garcia R, 2016, PRINCIPLES PROGRAMMI
   Jourdan Jacques-Henri., 2015, Principles of Programming Languages POPL
   Leroy X, 2009, COMMUNICATIONS ACM C
   Malecha Gregory., 2016, PROGRAMMING LANGUAGE
   Midtgaard J, 2008, STAT AN S SAS
   Mine Antoine., 2006, Higher Order and Symbolic Computation HOSC
   Moggi Eugenio., 1989, An abstract view of programming languages. Technical report
   Monniaux D., 1998, REALISATION MECANISE, VVII
   Nielson F., 1999, Principles of Program Analysis
   Pichardie David, 2005, THESIS
   Scott D, 1975, ISILC LOG C
   Sergey Ilya., 2013, Programming Language Design and Implementation (PLDI)
   Sergey Ilya., 2012, Mathematics of Program Construction (MPC)
   Silva PauloF., 2008, Principles and Practice of Declarative Pro-gramming (PPDP)
   Tesson Julien., 2011, Algebraic Methodology and Software Technology AMAST
   Univalent Foundations Program, 2013, Homotopy Type Theory: Univalent Foundations of Mathematics
NR 39
TC 2
Z9 2
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD JUL 8
PY 2019
VL 29
AR e11
DI 10.1017/S0956796819000066
PG 60
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA IH4IQ
UT WOS:000474455500001
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Choi, K
   Chang, BM
AF Choi, Kwanghoon
   Chang, Byeong-Mo
TI A theory of RPC calculi for client-server model
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB With multi-tier programming languages, programmers can specify the locations of code to run in order to reduce development efforts for the web-based client-server model where programmers write client and server programs separately and test the multiple programs together. The RPC calculus, one of the foundations of those languages by Cooper and Wadler, has the feature of symmetric communication in programmer's writing arbitrarily deep nested client-server interactions. The feature of the calculus is fully implemented by asymmetric communication in trampolined style suitable for the client-server model. However, the existing research only considers a stateless server strategy in which all server states are encoded for transmission to the client so that server states do not need to be stored in the server. It cannot always correctly handle all stateful operations involving disks or databases. To resolve this problem, we first propose new stateful calculi that fully support both symmetric communication from the programmer's viewpoint and asymmetric communication in its implementation using trampolined style. All the existing calculi either provide only the feature of asymmetric communication or propose only symmetric implementation suitable for the peer-to-peer model, rather than the client-server model. Second, the method used to design our stateful server strategy is based on a new locative type system which paves the way for a theory of RPC calculi for the client-server model. Besides proposing the new stateful calculi, this theory can improve the existing stateless server strategy to construct new state-encoding calculi that eliminate runtime checks on remote procedure calls present in the existing strategy, and it enables us to design a new mixed strategy that combines the benefits of both kinds of strategies. As far as we know, there are no typed multi-tier calculi that offer programmers the feature of symmetric communication with the implementation of asymmetric communication under the three strategies together.
C1 [Choi, Kwanghoon] Chonnam Natl Univ, Gwangju, South Korea.
   [Chang, Byeong-Mo] Sookmyung Womens Univ, Seoul, South Korea.
C3 Chonnam National University; Sookmyung Women's University
RP Choi, K (corresponding author), Chonnam Natl Univ, Gwangju, South Korea.
EM kwanghoon.choi@jnu.ac.kr; chang@sookmyung.ac.kr
RI 최, 광훈/JQW-9376-2023
FU National Research Foundation of Korea (NRF) - Korea government (MSIP)
   [2017R1A2B4005138]
FX This work was supported by the National Research Foundation of Korea
   (NRF) grant funded by the Korea government (MSIP) (No.
   2017R1A2B4005138).
CR Balat V., 2006, P 2006 WORKSHOP ML M, P84, DOI [10.1145/1159876.1159889, DOI 10.1145/1159876.1159889]
   Boudol G, 2012, ACM T PROGR LANG SYS, V34, DOI 10.1145/2220365.2220369
   Chlipala A, 2015, ACM SIGPLAN NOTICES, V50, P153, DOI [10.1145/2775051.2677004, 10.1145/2676726.2677004]
   CONWAY ME, 1963, COMMUN ACM, V6, P396, DOI 10.1145/366663.366704
   Cooper E, 2007, LECT NOTES COMPUT SC, V4709, P266
   Cooper EEK, 2009, PPDP'09: PROCEEDINGS OF THE 11TH INTERNATIONAL ACM SIGPLAN SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING, P231, DOI 10.1145/1599410.1599439
   FLANAGAN C, 1993, SIGPLAN NOTICES, V28, P237, DOI 10.1145/173262.155113
   Ganz SE, 1999, ACM SIGPLAN NOTICES, V34, P18, DOI 10.1145/317765.317779
   Gay S, 1999, LECT NOTES COMPUT SC, V1576, P74
   Graunke P, 2001, 16TH ANNUAL INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING (ASE 2001), PROCEEDINGS, P211, DOI 10.1109/ASE.2001.989807
   Krishnamurthi Shriram, 2007, Higher-Order and Symbolic Computation, V20, P431, DOI 10.1007/s10990-007-9008-y
   LAUNCHBURY J, 1994, SIGPLAN NOTICES, V29, P24, DOI 10.1145/773473.178246
   Matthews J., 2004, Automated Software Engineering, V11, P337, DOI 10.1023/B:AUSE.0000038936.09009.69
   McCarthy J, 2009, ICFP'09: PROCEEDINGS OF THE 2009 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P299
   McCarthy JA, 2010, ACM SIGPLAN NOTICES, V45, P567, DOI 10.1145/1932682.1869506
   Murphy T, 2004, IEEE S LOG, P286, DOI 10.1109/LICS.2004.1319623
   Murphy VII T., 2008, THESIS
   Neubauer M, 2005, ACM SIGPLAN NOTICES, V40, P221, DOI 10.1145/1047659.1040324
   Queinnec C., 2004, Higher-Order and Symbolic Computation, V17, P277, DOI 10.1007/s10990-004-4866-z
   Radanne G., 2017, THESIS
   Rastogi A, 2014, P IEEE S SECUR PRIV, P655, DOI 10.1109/SP.2014.48
   Reynders Bob, 2014, ONWARD, V2014, P55
   Reynolds John C., 1972, ACM 72, V2, P717, DOI DOI 10.1023/A:1010027404223
   Serrano Manuel, 2010, Higher-Order and Symbolic Computation, V23, P409, DOI 10.1007/s10990-010-9061-9
   Serrano M, 2016, ACM SIGPLAN NOTICES, V51, P180, DOI 10.1145/3022670.2951916
   Serrano M, 2012, COMMUN ACM, V55, P53, DOI 10.1145/2240236.2240253
   Serrano Manuel, 2006, PROCEEEDINGS 21 ANN, P975, DOI [10.1145/1176617.1176756, DOI 10.1145/1176617.1176756]
   Timany A., 2017, PACMPL 17, V2
NR 28
TC 6
Z9 6
U1 0
U2 10
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD MAR 22
PY 2019
VL 29
AR e5
DI 10.1017/S0956796819000029
PG 39
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA HP9LZ
UT WOS:000462016000001
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Greenman, B
   Takikawa, A
   New, MS
   Feltey, D
   Findler, RB
   Vitek, J
   Felleisen, M
AF Greenman, Ben
   Takikawa, Asumu
   New, Max S.
   Feltey, Daniel
   Findler, Robert Bruce
   Vitek, Jan
   Felleisen, Matthias
TI How to evaluate the performance of gradual type systems
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB A sound gradual type system ensures that untyped components of a program can never break the guarantees of statically typed components. This assurance relies on runtime checks, which in turn impose performance overhead in proportion to the frequency and nature of interaction between typed and untyped components. The literature on gradual typing lacks rigorous descriptions of methods for measuring the performance of gradual type systems. This gap has consequences for the implementors of gradual type systems and developers who use such systems. Without systematic evaluation of mixed-typed programs, implementors cannot precisely determine how improvements to a gradual type system affect performance. Developers cannot predict whether adding types to part of a program will significantly degrade (or improve) its performance. This paper presents the first method for evaluating the performance of sound gradual type systems. The method quantifies both the absolute performance of a gradual type system and the relative performance of two implementations of the same gradual type system. To validate the method, the paper reports on its application to 20 programs and 3 implementations of Typed Racket.
C1 [Greenman, Ben; Takikawa, Asumu; New, Max S.; Feltey, Daniel; Vitek, Jan; Felleisen, Matthias] Northeastern Univ, Boston, MA 02115 USA.
   [Takikawa, Asumu] Igalia, San Francisco, CA USA.
   [Feltey, Daniel; Findler, Robert Bruce] Northwestern Univ, Chicago, IL 60611 USA.
   [Vitek, Jan] Czech Tech Univ, Prague, Czech Republic.
C3 Northeastern University; Northwestern University; Czech Technical
   University Prague
RP Greenman, B (corresponding author), Northeastern Univ, Boston, MA 02115 USA.
EM benjaminlgreenman@gmail.com; asumu@simplyrobot.org; maxsnew@gmail.com;
   daniel.feltey@eecs.northwestern.edu; robby@eecs.northwestern.edu;
   j.vitek@neu.edu; matthias@ccs.neu.edu
RI Vitek, Jan/J-9051-2014; Greenman, Ben/GYV-4666-2022
OI Greenman, Ben/0000-0001-7078-9287
FU National Science Foundation [SHF 1518844]
FX The authors gratefully acknowledge support from the National Science
   Foundation (SHF 1518844) and thank the anonymous JFP reviewers. They owe
   the implementors of Typed Racket a large debt, especially Sam
   Tobin-Hochstadt. They also thank Matthew Butterick, John Clements, Matt
   Might, Linh Chi Nguyen, Vincent St-Amour, Neil Toronto, David Van Horn,
   Danny Yoo, and Jon Zeppieri for providing programs that inspired the
   benchmarks. Sam Tobin-Hochstadt and Brian LaChance provided feedback on
   early drafts.
CR Aiken A., 1994, Conference Record of POPL '94: 21st ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P163, DOI 10.1145/174675.177847
   Allende E, 2014, SCI COMPUT PROGRAM, V96, P52, DOI 10.1016/j.scico.2013.06.006
   Anderson C, 2005, LECT NOTES COMPUT SC, V3586, P428
   [Anonymous], 2014, THESIS
   Bauman S., 2017, P ACM PROGR LANG OOP, V1
   Bauman S, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P22, DOI 10.1145/2784731.2784740
   Bloom B, 2009, OOPSLA 2009, CONFERENCE PROCEEDINGS, P117
   CARTWRIGHT R, 1991, SIGPLAN NOTICES, V26, P278, DOI 10.1145/113446.113469
   CONSEL C, 1988, LECT NOTES COMPUT SC, V300, P236
   Curtsinger C, 2013, ACM SIGPLAN NOTICES, V48, P219, DOI 10.1145/2499368.2451141
   Dimoulas C, 2012, LECT NOTES COMPUT SC, V7211, P214, DOI 10.1007/978-3-642-28869-2_11
   Fieller E. C, 1957, J R STAT SOC, V16, P175
   Flanagan C, 1996, ACM SIGPLAN NOTICES, V31, P23, DOI 10.1145/249069.231387
   Flatt M, 2016, ACM SIGPLAN NOTICES, V51, P705, DOI 10.1145/2914770.2837620
   Franz Volker H, 2007, RATIOS SHORT G UNPUB
   Furr Michael, 2009, P 2009 ACM S APPL CO, P1859
   Garcia R, 2016, ACM SIGPLAN NOTICES, V51, P429, DOI 10.1145/2914770.2837670
   Garcia R, 2015, ACM SIGPLAN NOTICES, V50, P303, DOI [10.1145/2676726.2676992, 10.1145/2775051.2676992]
   Garcia R, 2013, ACM SIGPLAN NOTICES, V48, P417, DOI [10.1145/2544174.2500603, 10.1145/2500365.2500603]
   Greenberg M, 2016, ARXIV160402474V4
   Greenberg M, 2015, ACM SIGPLAN NOTICES, V50, P181, DOI [10.1145/2775051.2676967, 10.1145/2676726.2676967]
   Greenman B, 2018, P ACM PROGR LANG ICF, V2
   Greenman B, 2018, PROCEEDINGS OF THE ACM SIGPLAN WORKSHOP ON PARTIAL EVALUATION AND PROGRAM MANIPULATION (PEPM'18), P30, DOI 10.1145/3162066
   Gu D., 2005, STUDIA INFORM UNIVER, V4, P83
   Henglein F., 1992, Proceedings of the 1992 ACM Conference on Lisp and Functional Programming, P205, DOI 10.1145/141471.141542
   Henglein F., 1995, Conference Record of FPCA '95. SIGPLAN-SIGARCH-WG2.8. Conference on Functional Programming Languages and Computer Architecture, P192, DOI 10.1145/224164.224203
   Herman David, 2010, Higher-Order and Symbolic Computation, V23, P59, DOI 10.1007/s10990-011-9066-z
   Jagannathan S., 1995, Static Analysis. Second International Symposium, SAS'95. Proceedings, P207
   Knowles Kenneth., 2007, Sage: Unified hybrid checking for first-class types, general refinement types and dynamic
   Lemonnier Erwan., 2006, Pluto: or how to make Perl juggle with billions
   Matthews J, 2009, ACM T PROGR LANG SYS, V31, DOI 10.1145/1498926.1498930
   Moon DavidA., 1974, MACLISP REFERENCE MA
   Mytkowicz T, 2009, ACM SIGPLAN NOTICES, V44, P265, DOI 10.1145/1508284.1508275
   Neyman J., 1937, Phil Trans R Soc Lond a, V236, P333, DOI [DOI 10.1098/RSTA.1937.0005, 10.1098/rsta.1937.0005]
   Nguyen PC, 2014, ICFP'14: PROCEEDINGS OF THE 2014 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P139, DOI 10.1145/2628136.2628156
   Rastogi A, 2015, ACM SIGPLAN NOTICES, V50, P167, DOI [10.1145/2775051.2676971, 10.1145/2676726.2676971]
   Ren BM, 2016, ACM SIGPLAN NOTICES, V51, P462, DOI [10.1145/2980983.2908127, 10.1145/2908080.2908127]
   Richards G., 2015, P ECOOP
   Serrano M., 1995, Static Analysis. Second International Symposium, SAS'95. Proceedings, P366
   Siek J. G., 2008, P DYN LANG S
   Siek J, 2015, ACM SIGPLAN NOTICES, V50, P425, DOI [10.1145/2737924.2737968, 10.1145/2813885.2737968]
   Siek JG, 2015, LECT NOTES COMPUT SC, V9032, P432, DOI 10.1007/978-3-662-46669-8_18
   Siek JG, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P365, DOI 10.1145/1706299.1706342
   Siek Jeremy G., 2006, P SCHEM FUNCT PROGR, P81
   St-Amour V, 2015, LECT NOTES COMPUT SC, V9031, P49, DOI 10.1007/978-3-662-46663-6_3
   Steele Jr Guy L., 1990, COMMON LISP LANGUAGE
   Strickland TS, 2012, ACM SIGPLAN NOTICES, V47, P943, DOI 10.1145/2398857.2384685
   Strickland TS, 2009, LECT NOTES COMPUT SC, V5502, P32, DOI 10.1007/978-3-642-00590-9_3
   Suzuki Norihisa., 1981, Proceedings of the 8th Sympo- sium on Principles of Programming Languages (POPL), P187, DOI DOI 10.1145/567532.567553
   Takikawa A, 2016, ACM SIGPLAN NOTICES, V51, P456, DOI 10.1145/2914770.2837630
   Takikawa A, 2013, LECT NOTES COMPUT SC, V7792, P229, DOI 10.1007/978-3-642-37036-6_14
   Takikawa A, 2012, ACM SIGPLAN NOTICES, V47, P793, DOI 10.1145/2398857.2384674
   Takikawa Asumu, 2015, ECOOP, P4
   Tobin-Hochstadt S., 2017, P SUMM ADV PROGR LAN
   Tobin-Hochstadt S, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P395, DOI 10.1145/1328438.1328486
   Tobin-Hochstadt Sam., 2006, Proc. DLS, P964, DOI DOI 10.1145/1176617.1176755
   Vitousek MM, 2017, ACM SIGPLAN NOTICES, V52, P762, DOI 10.1145/3093333.3009849
   Vitousek MM, 2015, ACM SIGPLAN NOTICES, V50, P45, DOI 10.1145/2661088.2661101
   Wolff R, 2011, LECT NOTES COMPUT SC, V6813, P459, DOI 10.1007/978-3-642-22655-7_22
NR 59
TC 17
Z9 19
U1 0
U2 4
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD FEB 20
PY 2019
VL 29
AR e4
DI 10.1017/S0956796818000217
PG 45
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA HM2RJ
UT WOS:000459316400001
DA 2024-07-18
ER

PT J
AU Schultz, P
   Wisnesky, R
AF Schultz, Patrick
   Wisnesky, Ryan
TI Algebraic data integration
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB In this paper, we develop an algebraic approach to data integration by combining techniques from functional programming, category theory, and database theory. In our formalism, database schemas and instances are algebraic (multi-sorted equational) theories of a certain form. Schemas denote categories, and instances denote their initial (term) algebras. The instances on a schema S form a category, S-Inst, and a morphism of schemas F : S -> T induces three adjoint data migration functors: Sigma(F) : S-Inst -> T-Inst, defined by substitution along F, which has a right adjoint Delta(F) : T-Inst -> S-Inst, which in turn has a right adjoint Pi(F) : S-Inst -> T-Inst. We present a query language based on for/where/return syntax where each query denotes a sequence of data migration functors; a pushout-based design pattern for performing data integration using our formalism; and describe the implementation of our formalism in a tool we call AQL (Algebraic Query Language).
C1 [Schultz, Patrick] MIT, Dept Math, Cambridge, MA 02139 USA.
   [Wisnesky, Ryan] Categor Informat Inc, Cambridge, MA USA.
C3 Massachusetts Institute of Technology (MIT)
RP Schultz, P (corresponding author), MIT, Dept Math, Cambridge, MA 02139 USA.
EM schultzp@mit.edu; ryan@catinf.com
FU AFOSR grant [FA9550-14-1-0031]; ONR grant [N000141310260]; NASA grant
   [NNH13ZEA001N]; NIST SBIR grant [70NANB15H290]
FX The authors would like to thank David Spivak and Peter Gates. Patrick
   Schultz was supported by AFOSR grant FA9550-14-1-0031, ONR grant
   N000141310260, and NASA grant NNH13ZEA001N. Ryan Wisnesky was supported
   by NIST SBIR grant 70NANB15H290.
CR Abiteboul S, 1995, FDN DATABASES
   Adamek J., 2011, CAMBRIDGE TRACTS MAT, V184
   Alagic S., 2001, P 8 INT WORKSHOP DAT, P228
   Angles R, 2008, ACM COMPUT SURV, V40, DOI 10.1145/1322432.1322433
   [Anonymous], 1970, Computational Problems in Abstract Algebra
   [Anonymous], 2001, MATH INTRO LOGIC
   Baader Franz, 1998, TERM REWRITING ALL
   Barr M., 1995, CATEGORY THEORY COMP
   Bertot Y., 2010, INTERACTIVE THEOREM
   BLUM EK, 1987, J COMPUT SYST SCI, V34, P293, DOI 10.1016/0022-0000(87)90028-6
   Bush MR, 2003, J SYMB COMPUT, V35, P107, DOI 10.1016/S0747-7171(02)00102-5
   Fagin R, 2005, ACM T DATABASE SYST, V30, P994, DOI 10.1145/1114244.1114249
   Fagin R, 2005, THEOR COMPUT SCI, V336, P89, DOI 10.1016/j.tcs.2004.10.033
   Fleming M, 2003, J SYMB COMPUT, V35, P127, DOI 10.1016/S0747-7171(02)00104-9
   Garcia-Molina Hector, 2008, DATABASE SYSTEMS COM
   Ghilardi S., 2006, P 10 INT C PRINCIPLE, P187
   GOGUEN JA, 1984, LECT NOTES COMPUT SC, V164, P221
   Grust T, 2004, FUNCTIONAL APPROACH TO DATA MANAGEMENT: MODELING, ANALYZING AND INTEGRATING HETEROGENEOUS DATA, P288
   Haas L.M., 2005, P ACM SIGMOD INT C M, P805
   Johnson Michael, 2002, THEOR APPL CATEG, V10, P94
   KAPUR D, 1985, SIAM J COMPUT, V14, P1052, DOI 10.1137/0214073
   Lüth C, 2005, LECT NOTES COMPUT SC, V3423, P94
   Melnik Sergey., 2003, SIGMOD C, P193, DOI DOI 10.1145/872757.872782
   Mitchell John C., 1996, Foundation of computing series
   Mossakowski T, 2015, LECT NOTES COMPUT SC, V9463, P90, DOI 10.1007/978-3-319-28114-8_6
   NELSON G, 1980, J ACM, V27, P356, DOI 10.1145/322186.322198
   Patterson Evan., 2017, Knowledge Representation in Bicategories of Relations
   SHIPMAN DW, 1981, ACM T DATABASE SYST, V6, P140, DOI 10.1145/319540.319561
   Spivak DI, 2014, MATH STRUCT COMP SCI, V24, DOI 10.1017/S0960129513000479
   Spivak DI, 2012, INFORM COMPUT, V217, P31, DOI 10.1016/j.ic.2012.05.001
   Spivak David I., 2015, P 15 S DATABASE PROG, P21, DOI [10.1145/2815072.2815075, DOI 10.1145/2815072.2815075]
   Zielinski B, 2013, LECT NOTES COMPUT SC, V8216, P278, DOI 10.1007/978-3-642-41366-7_24
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
NR 39
TC 6
Z9 6
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PY 2017
VL 27
AR e24
DI 10.1017/S0956796817000168
PG 51
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA FL5IF
UT WOS:000414267200001
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Acar, UA
   Charguéraud, A
   Rainey, M
AF Acar, Umut A.
   Chargueraud, Arthur
   Rainey, Mike
TI Oracle-guided scheduling for controlling granularity in implicitly
   parallel languages
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB A classic problem in parallel computing is determining whether to execute a thread in parallel or sequentially. If small threads are executed in parallel, the overheads due to thread creation can overwhelm the benefits of parallelism, resulting in suboptimal efficiency and performance. If large threads are executed sequentially, processors may spin idle, resulting again in sub-optimal efficiency and performance. This "granularity problem" is especially important in implicitly parallel languages, where the programmer expresses all potential for parallelism, leaving it to the system to exploit parallelism by creating threads as necessary. Although this problem has been identified as an important problem, it is not well understood-broadly applicable solutions remain elusive. In this paper, we propose techniques for automatically controlling granularity in implicitly parallel programming languages to achieve parallel efficiency and performance. To this end, we first extend a classic result, Brent's theorem (a.k.a. the work-time principle) to include thread-creation overheads. Using a cost semantics for a general-purpose language in the style of lambda calculus with parallel tuples, we then present a precise accounting of thread-creation overheads and bound their impact on efficiency and performance. To reduce such overheads, we propose an oracle-guided semantics by using estimates of the sizes of parallel threads. We show that, if the oracle provides accurate estimates in constant time, then the oracle-guided semantics reduces the thread-creation overheads for a reasonably large class of parallel computations. We describe how to approximate the oracle-guided semantics in practice by combining static and dynamic techniques. We require the programmer to provide the asymptotic complexity cost for each parallel thread and use runtime profiling to determine hardware-specific constant factors. We present an implementation of the proposed approach as an extension of the Manticore compiler for Parallel ML. Our empirical evaluation shows that our techniques can reduce thread-creation overheads, leading to good efficiency and performance.
C1 [Acar, Umut A.] Carnegie Mellon Univ, Pittsburgh, PA 15213 USA.
   [Acar, Umut A.; Rainey, Mike] Inria, Paris, France.
   [Chargueraud, Arthur] Univ Paris Saclay, Inria, Palaiseau, France.
   [Chargueraud, Arthur] CNRS, LRI, Orsay, France.
   [Chargueraud, Arthur] Univ Paris Saclay, Univ Paris Sud, Orsay, France.
C3 Carnegie Mellon University; Inria; Universite Paris Cite; Universite
   Paris Saclay; Inria; Universite Paris Saclay; Centre National de la
   Recherche Scientifique (CNRS); Universite Paris Cite; Universite Paris
   Saclay
RP Acar, UA (corresponding author), Carnegie Mellon Univ, Pittsburgh, PA 15213 USA.; Acar, UA (corresponding author), Inria, Paris, France.
EM umut@cs.cmu.edu; arthur.chargueraud@inria.fr; mike.rainey@inria.fr
FU National Science Foundation [CCF-1320563, CCF-1408940]; European
   Research Council [ERC-2012-StG-308246]; Microsoft Research; Division of
   Computing and Communication Foundations; Direct For Computer & Info Scie
   & Enginr [1408940, 1320563] Funding Source: National Science Foundation
FX This research was partially supported by the National Science Foundation
   (grants CCF-1320563 and CCF-1408940), European Research Council (grant
   ERC-2012-StG-308246), and by Microsoft Research.
CR Acar U. A., 2015, INTRO PARALLEL COMPU
   Acar U. A., 2015, ALGORITHM DESIGN PAR
   Acar U. A., 2015, 15210 ALGORITHMS PAR
   Acar UA, 2002, THEOR COMPUT SYST, V35, P321, DOI 10.1007/s00224-002-1057-3
   Acar UA, 2015, PROCEEDINGS OF SC15: THE INTERNATIONAL CONFERENCE FOR HIGH PERFORMANCE COMPUTING, NETWORKING, STORAGE AND ANALYSIS, DOI 10.1145/2807591.2807651
   Acar UA, 2011, OOPSLA 11: PROCEEDINGS OF THE 2011 ACM INTERNATIONAL CONFERENCE ON OBJECT ORIENTED PROGRAMMING SYSTEMS LANGUAGES AND APPLICATIONS, P499
   Acar UmutA., 2013, PPoPP'13
   Aharoni G., 1992, J FUNCTIONAL PROGRAM, V2, P387
   Arora N. S., 1998, SPAA '98. Tenth Annual ACM Symposium on Parallel Algorithms and Architectures, P119, DOI 10.1145/277651.277678
   Arora NS, 2001, THEOR COMPUT SYST, V34, P115, DOI 10.1007/s00224-001-0004-z
   BARNES J, 1986, NATURE, V324, P446, DOI 10.1038/324446a0
   Belloch G., 1995, Conference Record of FPCA '95. SIGPLAN-SIGARCH-WG2.8. Conference on Functional Programming Languages and Computer Architecture, P226, DOI 10.1145/224164.224210
   Bergstrom L, 2010, ICFP 2010: PROCEEDINGS OF THE 2010 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P93
   BLELLOCH GE, 1994, J PARALLEL DISTR COM, V21, P4, DOI 10.1006/jpdc.1994.1038
   BLELLOCH GE, 1990, J PARALLEL DISTR COM, V8, P119, DOI 10.1016/0743-7315(90)90087-6
   Blelloch GE, 1996, ACM SIGPLAN NOTICES, V31, P213, DOI 10.1145/232629.232650
   Blelloch GE, 2011, SPAA 11: PROCEEDINGS OF THE TWENTY-THIRD ANNUAL SYMPOSIUM ON PARALLELISM IN ALGORITHMS AND ARCHITECTURES, P355
   Blelloch GuyE., 2004, SPAA
   Blumofe RD, 1999, J ACM, V46, P720, DOI 10.1145/324133.324234
   BRENT RP, 1974, J ACM, V21, P201, DOI 10.1145/321812.321815
   Chakravarty M., 2007, PROC WORKSHOP DECLAR, P10
   Chow R, 2010, PROCEEDINGS OF THE 2010 ACM WORKSHOP CLOUD COMPUTING SECURITY WORKSHOP (CCSW'10:), P1, DOI 10.1145/1866835.1866837
   Cole R, 2010, LECT NOTES COMPUT SC, V6198, P226, DOI 10.1007/978-3-642-14165-2_20
   Crary K., 2000, Conference Record of POPL'00: 27th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages. Papers Presented at the Symposium, P184, DOI 10.1145/325694.325716
   Feeley M., 1993, THESIS
   Feeley Marc, 1992, Parallel Symbolic Computing, P94
   FLUET M., 2011, J FUNCT PROGRAM, V20, P1
   Fluet M, 2008, ICFP'08: PROCEEDINGS OF THE 2008 SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P241
   Frens JD, 1997, ACM SIGPLAN NOTICES, V32, P206, DOI 10.1145/263767.263789
   Frigo M, 1998, ACM SIGPLAN NOTICES, V33, P212, DOI 10.1145/277652.277725
   Gibbons Phillip B, 2008, INT C FUNCT PROGR
   Goldsmith Simon F., 2007, P 6 JOINT M EUR SOFT, P395, DOI 10.1145/1287624.1287681
   Gulwani S, 2009, ACM SIGPLAN NOTICES, V44, P127, DOI 10.1145/1594834.1480898
   HALSTEAD RH, 1985, ACM T PROGR LANG SYS, V7, P501, DOI 10.1145/4472.4478
   Hiraishi T, 2009, ACM SIGPLAN NOTICES, V44, P55, DOI 10.1145/1594835.1504187
   Huelsbergen L., 1994, Proceedings of the 1994 ACM Conference on LISP and Functional Programming, P79, DOI 10.1145/182409.182442
   JONES PEYTON., 2008, FSTTCS, P383
   Jones SP, 2008, LECT NOTES COMPUT SC, V5356, P138
   Jost S, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P223, DOI 10.1145/1706299.1706327
   LEROY X, 2005, OBJECTIVE CAML SYSTE
   Lopez P, 1996, J SYMB COMPUT, V21, P715, DOI 10.1006/jsco.1996.0038
   MOHR E, 1990, PROCEEDINGS OF THE 1990 ACM CONFERENCE ON LISP AND FUNCTIONAL PROGRAMMING, P185, DOI 10.1145/91556.91631
   Narlikar G. J., 1999, THESIS
   PEHOUSHEK JD, 1990, LECT NOTES COMPUT SC, V441, P182
   Plummer HC, 1910, MON NOT R ASTRON SOC, V71, P0460
   Rainey M. A., 2010, THESIS
   Rosendahl M., 1989, FPCA 89, P144, DOI DOI 10.1145/99370.99381
   Sanchez D, 2010, ASPLOS XV: FIFTEENTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS, P311
   Sands J D., 1990, THESIS
   Sivaramakrishnan K. C., 2014, J FUNCT PROGRAM FIRS, V1-62, P6
   Spoonhower, 2009, THESIS
   Tzannes A., 2014, TOPLAS, V36
   VALIANT LG, 1990, COMMUN ACM, V33, P103, DOI 10.1145/79173.79181
   Weening J. S., 1989, THESIS
NR 54
TC 12
Z9 13
U1 0
U2 1
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PY 2016
VL 26
AR e23
DI 10.1017/S0956796816000101
PG 40
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA ED9ZM
UT WOS:000389232500001
OA Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Bahr, P
   Hutton, G
AF Bahr, Patrick
   Hutton, Graham
TI Calculating correct compilers
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID EXCEPTIONS
AB In this article, we present a new approach to the problem of calculating compilers. In particular, we develop a simple but general technique that allows us to derive correct compilers from high-level semantics by systematic calculation, with all details of the implementation of the compilers falling naturally out of the calculation process. Our approach is based upon the use of standard equational reasoning techniques, and has been applied to calculate compilers for a wide range of language features and their combination, including arithmetic expressions, exceptions, state, various forms of lambda calculi, bounded and unbounded loops, non-determinism and interrupts. All the calculations in the article have been formalised using the Coq proof assistant, which serves as a convenient interactive tool for developing and verifying the calculations.
C1 [Bahr, Patrick] Univ Copenhagen, Dept Comp Sci, DK-1168 Copenhagen, Denmark.
   [Hutton, Graham] Univ Nottingham, Sch Comp Sci, Nottingham NG7 2RD, England.
C3 University of Copenhagen; University of Nottingham
RP Bahr, P (corresponding author), Univ Copenhagen, Dept Comp Sci, DK-1168 Copenhagen, Denmark.
EM paba@diku.dk; graham.hutton@nottingham.ac.uk
OI Hutton, Graham/0000-0001-9584-5150; Bahr, Patrick/0000-0003-1600-8261
FU Danish Council for Independent Research [12-132365]
FX Discussions with Ralf Hinze at the IFIP Working Group 2.1 meeting in
   Zeegse led to the idea of combining the transformations in our original
   stepwise approach and greatly simplified the methodology. We would also
   like to thank Jeremy Gibbons, Colin Runciman, Neil Sculthorpe, Arjan
   Boeijink, the JFP referees and the Functional Programming lab in
   Nottingham for many useful comments and suggestions. This work has been
   partially funded by the Danish Council for Independent Research, Grant
   12-132365.
CR Adams N., 1986, P 1986 SIGPLAN S COM, P219
   Ager M.S., 2003, RS0314 BRICS U AARH
   Ager Mads Sig, 2003, Proceedings of the 5th ACM SIGPLAN International Conference on Principles and Practice of Declaritive Programming, P8, DOI DOI 10.1145/888251.888254
   [Anonymous], 2008, Lecture Notes in Computer Science
   Appel A.W., 1991, Compiling with Continuations
   Backhouse Roland, 2003, PROGRAM CONSTRUCTION
   Bahr P, 2014, LECT NOTES COMPUT SC, V8475, P221, DOI 10.1007/978-3-319-07151-0_14
   Chase D, 1994, J C LANGUAGE TRANSLA, V6, P20
   Chase David, 1994, The Journal of C Language Translation, V5, P229
   Day L. E., 2014, P 25 S IMPL APPL FUN, P13
   Dybjer P., 1994, Formal Aspects of Computing, V6, P440, DOI 10.1007/BF01211308
   Hutton G, 2004, LECT NOTES COMPUT SC, V3125, P211
   Hutton G., 2007, PROGRAMMING HASKELL
   Hutton G, 2007, J FUNCT PROGRAM, V17, P777, DOI 10.1017/S0956796807006363
   McCarthy John., 1967, P S APPL MATH VOLUME, V19, P33
   Meijer E, 1992, THESIS
   Reynolds John C., 1972, ACM 72, V2, P717, DOI DOI 10.1023/A:1010027404223
   Sculthorpe N., 2013, LECT NOTES COMPUTER, V8241
   SESTOFT P, 1997, J FUNCTIONAL PROGRAM, V7, P231, DOI DOI 10.1017/S0956796897002712
   SPIVEY M, 1990, SCI COMPUT PROGRAM, V14, P25, DOI 10.1016/0167-6423(90)90056-J
   Steele Jr G. L., 1978, AITR474 MIT AI LAB
   Thielecke H., 2002, Higher-Order and Symbolic Computation, V15, P141, DOI 10.1023/A:1020887011500
   WADLER P, 1989, P 4 INT C FUNCT PROG
   WAND M, 1982, ACM T PROGR LANG SYS, V4, P496, DOI 10.1145/357172.357179
   Wand Mitchell., 1982, Proceedings of the 9th ACM SIGPLAN-SIGACT symposium on Principles of Programming Languages, POPL '82, P234, DOI 10.1145/582153.582179
   Winskel G., 1993, FDN COMPUTING SERIES
   Wright Joel, 2006, TYPE CORRECT STACK S
NR 27
TC 8
Z9 8
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PY 2015
VL 25
AR e14
DI 10.1017/S0956796815000180
PG 47
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DB1AM
UT WOS:000368240300007
OA Bronze, Green Accepted
DA 2024-07-18
ER

PT J
AU Ziliani, B
   Dreyer, D
   Krishnaswami, NR
   Nanevski, A
   Vafeiadis, V
AF Ziliani, Beta
   Dreyer, Derek
   Krishnaswami, Neelakantan R.
   Nanevski, Aleksandar
   Vafeiadis, Viktor
TI Mtac: A monad for typed tactic programming in Coq
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID FORMAL VERIFICATION
AB Effective support for custom proof automation is essential for large-scale interactive proof development. However, existing languages for automation via tactics either (a) provide no way to specify the behavior of tactics within the base logic of the accompanying theorem prover, or (b) rely on advanced type-theoretic machinery that is not easily integrated into established theorem provers.
   We present Mtac, a lightweight but powerful extension to Coq that supports dependently typed tactic programming. Mtac tactics have access to all the features of ordinary Coq programming, as well as a new set of typed tactical primitives. We avoid the need to touch the trusted kernel typechecker of Coq by encapsulating uses of these new tactical primitives in a monad, and instrumenting Coq so that it executes monadic tactics during type inference.
C1 [Ziliani, Beta; Dreyer, Derek; Vafeiadis, Viktor] Max Planck Inst Software Syst MPI SWS, Kaiserslautern, Germany.
   [Ziliani, Beta; Dreyer, Derek; Vafeiadis, Viktor] Max Planck Inst Software Syst MPI SWS, Saarbrucken, Germany.
   [Krishnaswami, Neelakantan R.] Univ Birmingham, Birmingham, W Midlands, England.
   [Nanevski, Aleksandar] IMDEA Software Inst, Madrid, Spain.
C3 Max Planck Society; Max Planck Society; University of Birmingham; IMDEA
   Software Institute
RP Ziliani, B (corresponding author), Max Planck Inst Software Syst MPI SWS, Kaiserslautern, Germany.
EM beta@mpi-sws.org; dreyer@mpi-sws.org; n.krishnaswami@cs.bham.ac.uk;
   aleks.nanevski@imdea.org; viktor@mpi-sws.org
RI Vafeiadis, Viktor/B-5809-2014
OI Vafeiadis, Viktor/0000-0001-8436-0334
FU Spanish MINECO [TIN2010-20639 Paran10, TIN2012-39391-C04-01 Strongsoft];
   AMAROUT grant [PCOFUND-GA-2008-229599]; Ramon y Cajal grant
   [RYC-2010-0743]
FX We are deeply grateful to Chung-Kil Hur for suggesting the Mendler-style
   encoding of mfix, to Arnaud Spiwack for suggesting the use of telescopes
   for representing patterns, and to Georges Gonthier for the neat type
   class trick for delaying execution of Mtactics. We would also like to
   thank Jesper Bengtson and Jonas Jensen, who tested an earlier version of
   Mtac and gave useful feedback that helped us in polishing the
   implementation, as well as Nils Anders Danielsson, Scott Kilpatrick,
   Antonis Stampoulis, and the anonymous reviewers of this article (and of
   the original conference version) for their very helpful comments. This
   research was partially supported by the Spanish MINECO projects
   TIN2010-20639 Paran10 and TIN2012-39391-C04-01 Strongsoft, AMAROUT grant
   PCOFUND-GA-2008-229599, and Ramon y Cajal grant RYC-2010-0743.
CR Allen S. F., 1990, IEEE S LOG COMP SCI
   [Anonymous], 2012, The Coq proof assistant reference manual
   [Anonymous], CRC053 SRI CAMBR
   Armand M., 2010, INT C INT THEOR PROV
   Artemov S. N., 1999, C AUT DED CADE
   Asperti A, 2009, SADHANA-ACAD P ENG S, V34, P71, DOI 10.1007/s12046-009-0003-3
   BAKER HG, 1991, SIGPLAN NOTICES, V26, P145, DOI 10.1145/122598.122614
   Barendregt H., 2001, Handb. Autom. Reason., V2, P1149
   Bertot Y., 2004, TEXT THEORET COMP S
   Boutin S., 1997, INT S THEOR ASP COMP
   Cave A., 2012, ACM S PRINC PROGR LA
   Chlipala A., 2011, CERTIFIED PROGRAMMIN
   Chlipala A, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P234
   Claret G., 2013, INT C INT THEOR PROV
   Constable R. L., 1992, Programming and Mathematical Method. Proceedings of the NATO Advanced Study Institute, P45
   Devriese D., 2013, INT C FUNCT PROGR IC
   Gonthier G., 2008, NOT AMS, V55, P1382
   Gonthier G., 2013, INT C INT THEOR PROV
   Gonthier G, 2013, J FUNCT PROGRAM, V23, P357, DOI 10.1017/S0956796813000051
   Gregoire B., 2002, INT C FUNCT PROGR IC
   HARPER R, 1993, J ACM, V40, P143, DOI 10.1145/138027.138060
   Howe D. J., 1992, PROOF THEORY, P227
   Hur C.-K., 2013, ACM S PRINC PROGR LA
   Klein G, 2010, COMMUN ACM, V53, P107, DOI 10.1145/1743546.1743574
   Launchbury J., 1994, ACM C PROGR LANG DES
   Leroy X, 2009, COMMUN ACM, V52, P107, DOI 10.1145/1538788.1538814
   Malecha G., 2014, INT C INT THEOR PROV
   Malecha G., 2015, INT WORKSH COQ PL CO
   MENDLER NP, 1991, ANN PURE APPL LOGIC, V51, P159, DOI 10.1016/0168-0072(91)90069-X
   Miculan M., 2012, INT C INT THEOR PROV
   Miller D., 1991, INT C LOG PROGR ICLP
   Nanevski A., 2010, ACM S PRINC PROGR LA
   Nanevski A., 2008, INT C FUNCT PROGR IC
   NANEVSKI A, 2002, INT C FUNCT PROGR IC
   Nanevski A, 2008, ACM T COMPUT LOG, V9, DOI 10.1145/1352582.1352591
   Nanevski A, 2008, J FUNCT PROGRAM, V18, P865, DOI 10.1017/S0956796808006953
   Pientka B., 2008, ACM S PRINC PROGR LA
   Pientka B., 2008, INT S PRINC PRACT DE
   Pollack R., 1995, TYPES
   Poswolsky A, 2009, ELECTRON NOTES THEOR, V228, P113, DOI 10.1016/j.entcs.2008.12.120
   Sacerdoti Coen C., 2004, THESIS
   Saibi A., 1997, ACM S PRINC PROGR LA
   Schurmann C., 2005, INT C TYP LAMBD CALC
   Sevcik J, 2013, J ACM, V60, DOI 10.1145/2487241.2487248
   Sozeau M., 2007, TYPES
   Sozeau M., 2008, INT C THEOR PROV HIG
   Stampoulis A., 2010, INT C FUNCT PROGR IC
   Stampoulis A., 2012, ACM S PRINC PROGR LA
   Tassi E., 2008, TECHNICAL REPORT
   Vafeiadis V., 2013, INT C INT THEOR PROV
   Van der Walt P., 2013, IMPLEMENTATION APPL
   Ziliani B., 2013, INT C FUNCT PROGR IC
NR 52
TC 17
Z9 17
U1 0
U2 1
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PY 2015
VL 25
AR e12
DI 10.1017/S0956796815000118
PG 59
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DB1AM
UT WOS:000368240300005
OA Green Published, Bronze
DA 2024-07-18
ER

PT J
AU Verbruggen, W
   De Vries, E
   Hughes, A
AF Verbruggen, Wendy
   De Vries, Edsko
   Hughes, Arthur
TI Formal polytypic programs and proofs
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB The aim of our work is to be able to do fully formal, machine-verified proofs over Generic Haskell-style polytypic programs. In order to achieve this goal, we embed polytypic programming in the proof assistant Cog and provide an infrastructure for polytypic proofs. Polytypic functions are reified within Coq as a datatype and they can then be specialized by applying a dependently typed term specialization function. Polytypic functions are thus first-class citizens and can be passed as arguments or returned as results. Likewise, we reify polytypic proofs as a datatype and provide a lemma that a polytypic proof can be specialized to any datatype in the universe. The correspondence between polytypic functions and their polytypic proofs is very clear: programmers need to give proofs for, and only for, the same cases that they need to give instances for when they define the polytypic function itself. Finally, we discuss how to write (co)recursive functions and do (co)recursive proofs in a similar way that recursion is handled in Generic Haskell.
C1 [Verbruggen, Wendy; De Vries, Edsko; Hughes, Arthur] Trinity Coll Dublin, Sch Comp Sci & Stat, Coll Green, Ireland.
C3 Trinity College Dublin
RP Verbruggen, W (corresponding author), Trinity Coll Dublin, Sch Comp Sci & Stat, Coll Green, Ireland.
EM wendyverbruggen@gmail.com; Edsko.de.vries@scss.tcd.ie;
   Arthur.Hughes@scss.tcd.ie
FU Irish Research Council for Science, Engineering and Technology; SFI [SFI
   06 IN.1 1898]
FX Supported by the Irish Research Council for Science, Engineering and
   Technology.; This research was supported by SFI project SFI 06 IN.1
   1898.
CR Abbott M, 2003, LECT NOTES COMPUT SC, V2620, P23
   Abel A, 2006, THESIS LUDWIG MAXIMI
   Abel A, 2009, SCI COMPUT PROGRAM, V74, P550, DOI 10.1016/j.scico.2008.01.004
   ALIMARINE A, 2005, THESIS RADBOUND U NI
   Altenkirch T, 2003, INT FED INFO PROC, V115, P1
   Altenkirch Thorsten., 2005, WHY DEPENDENT TYPES
   [Anonymous], 1972, INDAGATIONES MATHEMA, DOI DOI 10.1016/1385-7258(72)90034-0
   Backhouse R, 2003, LECT NOTES COMPUT SC, V2793, P97
   Benke M., 2003, Nordic Journal of Computing, V10, P265
   Bertot Y, 2005, LECT NOTES COMPUT SC, V3461, P102
   BERTOT Y, 2004, COQ ART INTERACTIVE
   Bertot Y, 2008, ELECTRON NOTES THEOR, V203, P25, DOI 10.1016/j.entcs.2008.05.018
   *COQ DEV TEAM, 2008, COQ FREQ ASK QUEST V
   Coq Development Team, 2008, COQ REF MAN VERS 8 2
   Gibbons J, 2007, LECT NOTES COMPUT SC, V4719, P1
   HARPER R, 1991, THEOR COMPUT SCI, V89, P107, DOI 10.1016/0304-3975(90)90108-T
   HINZE R, 2001, ELECT NOTES THEOR CO, V41, P227
   Hinze R., 2000, GENERIC PROGRAMS PRO
   Hinze R, 2007, LECT NOTES COMPUT SC, V4719, P72
   Hinze R, 2006, J FUNCT PROGRAM, V16, P451, DOI 10.1017/S0956796806006022
   Hinze R, 2009, SCI COMPUT PROGRAM, V74, P590, DOI 10.1016/j.scico.2007.10.006
   Hoogendijk P., 2000, Journal of Functional Programming, V10, P191, DOI 10.1017/S0956796899003640
   HURKENS AJC, 1995, TLCA 95
   JANSSON P, 1997, POPL 97
   JAY CB, 1995, ESOP 94 5 EUR S PROG, P251
   Lämmel R, 2003, ACM SIGPLAN NOTICES, V38, P26, DOI 10.1145/640136.604179
   LAMMEL R, 2002, LNCS, V2257, P137
   LOH A, 2004, THESIS I PROGRAMMATU
   McBride C., 2002, Types for Proofs and Programs. International Workshop, TYPES 2000. Selected Papers (Lecture Notes in Computer Science Vol.2277), P197
   McBride Conor, 1999, PhD thesis
   Morris P, 2006, LECT NOTES COMPUT SC, V3839, P252
   MORRIS P, 2009, LICS 09
   MORRIS P, 2007, CATS 07
   Morris P, 2009, INT J FOUND COMPUT S, V20, P83, DOI 10.1142/S0129054109006462
   NORELL U, 2002, THESIS CHALMERS U TE
   Peyton Jones S. L., 1996, Programming Languages and Systems - ESOP '96. 6th European Symposium on Programming. Proceedings, P18
   Pfeifer H, 1999, LECT NOTES COMPUT SC, V1690, P55
   Plotkin G. D., 1975, Theoretical Computer Science, V1, P125, DOI 10.1016/0304-3975(75)90017-1
   Rodríguez A, 2009, INTERNATIONAL CONFERENCE ON EHEALTH, TELEMEDICINE, AND SOCIAL MEDICINE: ETELEMED 2009, PROCEEDINGS, P233, DOI 10.1109/eTELEMED.2009.43
   Rodriguez A, 2008, HASKELL'08: PROCEEDINGS OF THE ACM SIGPLAN 2008 HASKELL SYMPOSIUM, P111
   Schrijvers T, 2009, ICFP'09: PROCEEDINGS OF THE 2009 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P341
   Sheard T, 2007, LECT NOTES COMPUT SC, V4719, P258
   Sorensen M., 2006, Lectures on the Curry-Howard Isomorphism
   VERBRUGGEN W, 2009, COQ SOURCES
   VYTINIOTIS D, 2006, ICFP 06, P251
NR 45
TC 1
Z9 2
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD MAY-JUL
PY 2010
VL 20
SI SI
BP 213
EP 270
DI 10.1017/S0956796810000158
PN 3-4
PG 58
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 711BF
UT WOS:000286560000002
OA Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Clements, J
   Fisler, K
AF Clements, John
   Fisler, Kathi
TI "Little language" project modules
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB Many computer science departments are debating the role of programming language the curriculum. These discussions of ten question the relevance and appeal of programming-languages content for today's students. In our experience, domain-specific. "little languages" projects provide a compelling illustration of the importance of programming-language concepts. This paper describes projects that prototype mainstream applications such as PowerPoint, TurboTax, and animation scripting. We have used these exercises as modules in non-programming languages Courses, including courses for first year students. Such modules both encourage students to study linguistic topics in more depth and provide linguistic perspective to students who might not otherwise be exposed to the area.
C1 [Clements, John] Calif Polytech State Univ San Luis Obispo, San Luis Obispo, CA 93407 USA.
   [Fisler, Kathi] Worcester Polytech Inst, Worcester, MA USA.
C3 California State University System; California Polytechnic State
   University San Luis Obispo; Worcester Polytechnic Institute
RP Clements, J (corresponding author), Calif Polytech State Univ San Luis Obispo, San Luis Obispo, CA 93407 USA.
EM clements@brinckerhoff.org; kfisler@cs.wpi.edu
OI Fisler, Kathi/0000-0002-7895-8206
CR ALLEN E, 2004, ACM SIGPLAN INT C OB, P384
   [Anonymous], 1996, Structure and interpretation of computer programs
   Antoniu T, 2004, PROC INT CONF SOFTW, P439, DOI 10.1109/ICSE.2004.1317466
   BENTLEY J, 1986, COMMUN ACM, V29, P711, DOI 10.1145/6424.315691
   CARDELLI L, 1994, 121 SRC
   Clements J, 2004, DR DOBBS J, V29, P16
   CLEMENTS J, 2001, P MONT WORKSH ENG AU, P1
   CLINGER W, 1991, ACM SIGPLAN SIGACT S, P155
   Dybvig R. K., 1988, LISP and Symbolic Computation, V1, P53, DOI 10.1007/BF01806176
   FELLEISEN M, 2004, ACM SIGPLAN INT C FU, P47
   Felleisen Matthias, 2001, How to Design Programs
   FINDLER RB, 2009, DRSCHEME PLT PROGRAM
   Fisher D, 2008, J FUNCT PROGRAM, V18, P707, DOI 10.1017/S0956796808006928
   Fisher K, 2008, ACM SIGPLAN NOTICES, V43, P62, DOI 10.1145/1480828.1480841
   FLATT M, 2009, REFERENCE PLT SCHEME
   Friedman D.P., 2001, ESSENTIALS PROGRAMMI, V2nd
   Graham P., 1994, On LISP: Advanced Techniques for Common Lisp
   Herman D, 2008, LECT NOTES COMPUT SC, V4960, P48
   HEWITT C, 1973, IJCAI, P235
   Hudak P., 1996, ACM COMPUT SURV, V28, P196, DOI [10.1145/242224.242477, DOI 10.1145/242224.242477]
   KAMIN SN, 1989, PROGRAMMING LANGUAGE
   KENNEDY A, 1997, ACM S PRINC PROGR LA, P442
   Kohlbecker Eugene., 1986, P 1986 ACM C LISP FU, P151
   Krishnamurthi S, 2006, J FUNCT PROGRAM, V16, P253, DOI 10.1017/S0956796805005733
   Krishnamurthi Shriram., 2007, Programming languages: Application and interpretation
   MAUNY M, 1992, ACM S LISP FUNCT PRO, P76
   Rhiger M, 2009, J FUNCT PROGRAM, V19, P145, DOI 10.1017/S0956796808007089
   SABRY A, 1999, TR99346 RIC U
   van Deursen A, 2000, ACM SIGPLAN NOTICES, V35, P26, DOI 10.1145/352029.352035
NR 29
TC 0
Z9 0
U1 0
U2 1
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD JAN
PY 2010
VL 20
BP 3
EP 18
DI 10.1017/S0956796809990281
PN 1
PG 16
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 562SH
UT WOS:000275074100002
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Abel, A
AF Abel, Andreas
TI Implementing a normalizer using sized heterogeneous types
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article; Proceedings Paper
CT Workshop on Mathematically Structured Functional Programming
CY JUL 02, 2006
CL Kuressaare, ESTONIA
ID RECURSIVE DEFINITIONS; LAMBDA-CALCULUS; TERMINATION; METATHEORY; PROOFS
AB In the simply typed lambda-calculus, a hereditary Substitution replaces a free variable in a normal form r by another normal form s of type a, removing freshly created redexes on the fly. It can be defined by lexicographic induction on a and r, thus giving rise to a structurally recursive normalizer for the simply typed lambda-calculus. We implement hereditary substitutions in a functional programming language With sized heterogeneous inductive types F-omega(boolean AND) arriving at an interpreter whose termination can be tracked by the type system of its host programming language.
C1 Univ Munich, Inst Informat, D-80538 Munich, Germany.
C3 University of Munich
RP Abel, A (corresponding author), Univ Munich, Inst Informat, Oettingenstr 67, D-80538 Munich, Germany.
EM andreas.abel@ifi.lmu.de
CR Abel A, 2004, RAIRO-THEOR INF APPL, V38, P277, DOI 10.1051/ita:2004015
   ABEL A, 2006, THESIS L MAXIMILIANS
   ABEL A, 2006, P WORKSH MATH STRUCT
   Abel A, 2006, LECT NOTES COMPUT SC, V4207, P72
   Abel A, 2008, ELECTRON NOTES THEOR, V199, P3, DOI 10.1016/j.entcs.2007.11.009
   Adams R, 2006, LECT NOTES COMPUT SC, V3839, P1
   Altenkirch T, 1999, LECT NOTES COMPUT SC, V1683, P453
   Amadio RM, 1998, LECT NOTES COMPUT SC, V1378, P48, DOI 10.1007/BFb0053541
   [Anonymous], J FUNCT PROGRAM
   [Anonymous], 1976, GRADUATE TEXTS MATH
   [Anonymous], LECT NOTES COMPUTER
   [Anonymous], 1965, ACTA U STOCKHOLMIENS, DOI DOI 10.2307/2271676
   Barthe G, 2005, LECT NOTES COMPUT SC, V3461, P71
   Barthe G, 2004, MATH STRUCT COMP SCI, V14, P97, DOI 10.1017/S0960129503004122
   Barthe G, 2006, LECT NOTES ARTIF INT, V4246, P257, DOI 10.1007/11916277_18
   BELLEGARDE F, 1994, SCI COMPUT PROGRAM, V23, P287, DOI 10.1016/0167-6423(94)00022-0
   Berghofer S, 2006, LECT NOTES COMPUT SC, V3839, P50
   Blanqui F, 2005, LECT NOTES COMPUT SC, V3634, P135, DOI 10.1007/11538363_11
   Blanqui F, 2004, LECT NOTES COMPUT SC, V3091, P24
   David R, 2005, LECT NOTES COMPUT SC, V3461, P162
   Gentzen G, 1935, MATH Z, V39, P405, DOI 10.1007/BF01201363
   Gentzen G, 1935, MATH Z, V39, P176, DOI 10.1007/BF01201353
   Giménez E, 1998, LECT NOTES COMPUT SC, V1443, P397, DOI 10.1007/BFb0055070
   Harper R, 2007, J FUNCT PROGRAM, V17, P613, DOI 10.1017/S0956796807006430
   Hughes J., 1996, Conference Record of POPL '96: The 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P410, DOI 10.1145/237721.240882
   *INRIA, 2009, COQ PROOF ASS VERS 8
   Joachimski F, 2003, ARCH MATH LOGIC, V42, P59, DOI 10.1007/s00153-002-0156-9
   Lane S.Mac., 1971, GRADUATE TEXTS MATH, V5
   MCBRIDE C, 2006, TYPE PRESERVIN UNPUB
   Mendler N. P., 1987, Proceedings of the Symposium on Logic in Computer Science (Cat. No.87CH2464-6), P30
   MENDLER NP, 1991, ANN PURE APPL LOGIC, V51, P159, DOI 10.1016/0168-0072(91)90069-X
   Pareto Lars, 2000, Ph. D. Dissertation
   TAIT WW, 1967, J SYMBOLIC LOGIC, V32, P198, DOI 10.2307/2271658
   Watkins K, 2004, ANN NY ACAD SCI, V3085, P355
NR 34
TC 2
Z9 2
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD MAY-JUL
PY 2009
VL 19
BP 287
EP 310
DI 10.1017/S0956796809007266
PN 3-4
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 461BW
UT WOS:000267240300003
OA Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Park, S
   Im, H
AF Park, Sungwoo
   Im, Hyeonseung
TI Type-safe higher-order channels with channel locality
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID LANGUAGE
AB As a means of transmitting not only data but also code encapsulated within functions, higher-order channels provide an advanced form of task parallelism in parallel computations. In the presence of mutable references, however, they pose a safety problem because references may be transmitted to remote threads where they are no longer valid. This paper presents an ML-like parallel language with type-safe higher-order channels. By type safety, we mean that no value written to a channel contains references, or equivalently, that no reference escapes via a channel from the thread where it is created. The type system uses a typing judgment that is capable of deciding whether the value to which a term evaluates contains references or not. The use of such a typing judgment also makes it easy to achieve another desirable feature of channels, channel locality, that associates every channel with a unique thread for serving all values addressed to it. Our type system permits Mutable references in sequential computations and also ensures that mutable references never interfere with parallel computations. Thus, it provides both flexibility in sequential programming and ease of implementing parallel computations.
C1 [Park, Sungwoo; Im, Hyeonseung] Pohang Univ Sci & Technol, Dept Comp Sci & Engn, Pohang, South Korea.
C3 Pohang University of Science & Technology (POSTECH)
RP Park, S (corresponding author), Pohang Univ Sci & Technol, Dept Comp Sci & Engn, Pohang, South Korea.
EM gla@postech.ac.kr; genilhs@postech.ac.kr
OI Im, Hyeonseung/0000-0002-3901-0834
FU Korea Science and Engineering Foundation (KOSEF) [R01-2007-000-11087-0]
FX The authors are grateful to the anonymous reviewers for their helpful
   comments. This work was supported by the Korea Science and Engineering
   Foundation (KOSEF) grant funded by the Korea government (MOST) (No.
   R01-2007-000-11087-0).
CR ALLAN E, 2007, FORTRESS LANGUAGE SP
   AMADIO R, 1997, LECT NOTES COMPUTER, V1282, P374, DOI DOI 10.1007/3-540-63383-9
   [Anonymous], 2006, Tech. rep.
   ARMSTRONG J, 1997, P 2 ACM SIGPLAN INT, P196
   Baker H. G.  Jr., 1977, SIGPLAN Notices, V12, P55, DOI 10.1145/872734.806932
   Blelloch GE, 1996, COMMUN ACM, V39, P85, DOI 10.1145/227234.227246
   Borghuis T, 2000, COMPUT J, V43, P274, DOI 10.1093/comjnl/43.4.274
   Braüner T, 2004, J LOGIC COMPUT, V14, P229
   CHAKRAVARTY M, 2007, P ACM SIGPLAN WORKSH, P11
   Charles Philippe, 2005, Proceedings of the 20th Annual ACM SIGPLAN Conference on Object-Oriented Programming, Systems, Languages, and Applications, OOPSLA '05, (New York, NY, USA), P519, DOI DOI 10.1145/1103845.1094852
   *CRAY INC, 2005, CHAP LANG SPEC VERS
   El-Ghazawi T., 2003, UPC LANGUAGE SPECIFI
   FLUET M, 2007, P ACM SIGPLAN WORKSH, P25
   Fournet C, 2003, LECT NOTES COMPUT SC, V2638, P129
   Fournet C., 1996, LECT NOTES COMPUTER, V1119, P406
   HALSTEAD RH, 1985, ACM T PROGR LANG SYS, V7, P501, DOI 10.1145/4472.4478
   Hilfinger P. N., 2005, UCBEECS200515
   Hochstein L., 2005, SC 05, P35
   Jia LM, 2004, LECT NOTES COMPUT SC, V2986, P219
   KNABE FC, 1995, THESIS CARNEGIE MELL
   Murphy T, 2004, IEEE S LOG, P286, DOI 10.1109/LICS.2004.1319623
   Murphy Tom., 2007, Trustworthy Global Computing 2007
   Nikhil R., 2001, Implicit parallel programming in pH
   ODERSKY M, 1995, LECT NOTES COMPUTER, V1026, P324
   PARK S, 2004, P 12 ACM SIGPLAN INT, P191
   Park S, 2006, LECT NOTES COMPUT SC, V4279, P217
   Pfenning F., 2001, Mathematical Structures in Computer Science, V11, P511, DOI 10.1017/S0960129501003322
   Pierce B., 1993, Proceedings of Eighth Annual IEEE Symposium on Logic in Computer Science (Cat. No.93CH3328-2), P376, DOI 10.1109/LICS.1993.287570
   ROSSBERG A, 2005, TRENDS FUNCTIONAL PR, V5, P79
   Schmid EF, 2002, DRUG DISCOV TODAY, V7, P563, DOI 10.1016/S1359-6446(02)02266-3
   SCHMITT A, 2003, P 30 ACM SIGPLAN SIG, P50
   Shavit N., 1995, Proceedings of the Fourteenth Annual ACM Symposium on Principles of Distributed Computing, P204, DOI 10.1145/224964.224987
   Simpson A., 1994, The proof theory and semantics of intuitionistic modal logic
   STAMOS JW, 1990, ACM T PROGR LANG SYS, V12, P537, DOI 10.1145/88616.88631
   Sutter H, 2005, DR DOBBS J, V30, P16
   Yoshida N, 1999, LECT NOTES COMPUT SC, V1664, P557
   ZHANG XG, 2002, P 2 IFIP INT C THEOR, P601
NR 37
TC 0
Z9 0
U1 0
U2 3
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD JAN
PY 2009
VL 19
BP 107
EP 142
DI 10.1017/S0956796808006989
PN 1
PG 36
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 392SM
UT WOS:000262322500006
OA Bronze
DA 2024-07-18
ER

PT J
AU Dyvbig, RK
   Jones, SP
   Sabry, A
AF Dyvbig, R. Kent
   Jones, Simon Peyton
   Sabry, Amr
TI A monadic framework for delimited continuations
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB Delimited continuations are more expressive than traditional abortive continuations and they apparently require a framework beyond traditional continuation-passing style (CPS). We show that this is not the case: standard CPS is sufficient to explain the common control operators for delimited continuations. We demonstrate this fact and present an implementation as a Scheme library. We then investigate a typed account of delimited continuations that makes explicit where control effects can occur. This results in a monadic framework for typed and encapsulated delimited continuations, which we design and implement as a Haskell library.
C1 [Sabry, Amr] Indiana Univ, Bloomington, IN 47405 USA.
C3 Indiana University System; Indiana University Bloomington
RP Sabry, A (corresponding author), Indiana Univ, Bloomington, IN 47405 USA.
OI Sabry, Amr/0000-0002-1025-7331
CR [Anonymous], TECHNICAL MONOGRAPH
   ARIOLA ZM, 2004, ACM SIGPLAN INT C FU, P40
   Biernacki D, 2006, J FUNCT PROGRAM, V16, P269, DOI 10.1017/S0956796805005782
   Cheney J., 2002, P 2002 ACM SIGPLAN W, P90, DOI DOI 10.1145/581690.581698
   DANVY O, 1990, PROCEEDINGS OF THE 1990 ACM CONFERENCE ON LISP AND FUNCTIONAL PROGRAMMING, P151, DOI 10.1145/91556.91622
   DANVY O, 1989, 8912 DIKU
   DYBVIG RK, 1989, COMPUT LANG, V14, P109, DOI 10.1016/0096-0551(89)90018-0
   Felleisen M., 1988, Conference Record of the Fifteenth Annual ACM Symposium on Principles of Programming Languages, P180, DOI 10.1145/73560.73576
   Felleisen M., 1988, Proceedings of the 1988 ACM Conference on LISP and Functional Programming, P52, DOI 10.1145/62678.62684
   FELLEISEN M, 1987, THEOR COMPUT SCI, V52, P205, DOI 10.1016/0304-3975(87)90109-5
   FELLEISEN M, 1987, P C PARALLEL ARCHITE, V259, P206
   FELLEISEN M, 1987, 216 IND U COMP SCI D
   Filinski A., 1999, Conference Record of POPL '99. 26th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P175, DOI 10.1145/292540.292557
   FILINSKI A., 1996, CMUCS96119
   FILINSKI A, 1994, C REC ACM SIGPLAN SI
   FINDLER RB, 2001, ESEC FSE 9 P 8 EUR S, P229
   FRIEDMAN DP, 2005, DECLARATIVE APPL LOG
   GASBICHLER M, 2002, ACM SIGPLAN INT C FU, P271
   GUNTER CA, 1995, FUNCTIONAL PROGRAMMI
   HARPER R, 1993, J FUNCTIONAL PROGRAM, V3, P465
   Hatcliff J., 1994, Conference Record of POPL '94: 21st ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P458, DOI 10.1145/174675.178053
   HIEB R, 1990, SIGPLAN NOTICES, V25, P128
   Hieb R., 1994, LISP and Symbolic Computation, V7, P83, DOI 10.1007/BF01019946
   HIEB R, 1990, SIGPLAN NOTICES, V25, P66, DOI 10.1145/93548.93554
   HINZE R, 2000, P 5 ACM SIGPLAN INT, P186
   Huet Gerard P., 1997, Journal of Functional Programming, V7, P549
   KISELYOV O, 2005, ACM SIGPLAN INT C FU
   KISELYOV O, 2005, TR611 IND U
   Launchbury J., 1995, LISP and Symbolic Computation, V8, P293, DOI 10.1007/BF01018827
   MOGGI E, 1991, INFORM COMPUT, V93, P55, DOI 10.1016/0890-5401(91)90052-4
   MOREAU L, 1994, LECT NOTES COMPUTER, V844
   MURTHY C, 1992, ACM WORKSH CONT, P49
   NANEVSKI A, 2004, MODAL CALCULUS NAMED
   POTTIER F, 2006, 33 ACM S PRINC PROGR, P232
   QUEINNEC C, 1991, C REC ACM SIGPLAN SI, P174
   SHAN CC, 2004, P 5 WORKSH SCHEM FUN
   Sitaram D., 1990, LISP and Symbolic Computation, V3, P67, DOI 10.1007/BF01806126
   SITARAM D, 1990, LFP 90, P161
   SITARAM D, 1991, POPL 91 P 18 ACM SIG, P185
   TANG A, 2005, PUGS BOOLSTRAPPING P
   Thielecke H, 2003, ACM SIGPLAN NOTICES, V38, P139, DOI 10.1145/640128.604144
   Wadler P., 1994, LISP and Symbolic Computation, V7, P39, DOI 10.1007/BF01019944
   WADLER P, 1998, ACM SIGPLAN INT C FU, P63
   Xi HW, 2003, ACM SIGPLAN NOTICES, V38, P224, DOI 10.1145/640128.604150
NR 44
TC 47
Z9 46
U1 0
U2 1
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD NOV
PY 2007
VL 17
BP 687
EP 730
DI 10.1017/S0956796807006259
PN 6
PG 44
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 239YW
UT WOS:000251555200002
OA Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Hutton, G
   Wright, J
AF Hutton, Graham
   Wright, Joel
TI What is the meaning of these constant interruptions ?
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID EXCEPTIONS
AB Asynchronous exceptions, or interrupts, are important for writing robust, modular programs, but are traditionally viewed as being difficult from a semantic perspective. In this article, we present a simple, formally justified, semantics for interrupts. Our approach is to show how a high-level semantics for interrupts can be justified with respect to a low-level implementation, by means of a compiler and its correctness theorem. In this manner we obtain two different perspectives on the problem, formally shown to be equivalent, which gives greater confidence in the correctness of our semantics.
C1 [Hutton, Graham; Wright, Joel] Univ Nottingham, Sch Comp Sci & IT, Nottingham, England.
C3 University of Nottingham
RP Hutton, G (corresponding author), Univ Nottingham, Sch Comp Sci & IT, Nottingham, England.
OI Hutton, Graham/0000-0001-9584-5150
FU EPSRC [EP/E04350X/1] Funding Source: UKRI
CR Ager Mads Sig, 2003, RS0314 BRICS
   AIKEN A, 1990, P 17 ACM SIGPLAN SIG, P210
   ALLISON L, 1989, INFORM PROCESS LETT, V31, P327, DOI 10.1016/0020-0190(89)90097-5
   Ancona D, 2001, ACM SIGPLAN NOTICES, V36, P16, DOI 10.1145/504311.504284
   [Anonymous], 1999, Communicating and Mobile Systems: The Calculus
   [Anonymous], 1992, Compiling with Continuations
   [Anonymous], 1997, The Definition of Standard ML
   AUWAERTER JF, 1976, AM NATL STANDARD PRO
   Backhouse Roland, 2003, PROGRAM CONSTRUCTION
   Börger E, 2000, IEEE T SOFTWARE ENG, V26, P872, DOI 10.1109/32.877847
   Chase D, 1994, J C LANGUAGE TRANSLA, V6, P20
   Chase David, 1994, The Journal of C Language Translation, V5, P229
   Claessen K., 2000, P 5 ACM SIGPLAN INT
   Cleaveland R, 2001, HDB PROCESS ALGEBRA, P711, DOI DOI 10.1016/B978-044482830-9/50030-8
   Cristian Flaviu., 1989, DEPENDABILITY RESILI, P68
   DREW S, 1995, 9512 QUEESNSL U TECH
   DREW SJ, 1994, COMPUT LANG, V20, P69, DOI 10.1016/0096-0551(94)90015-9
   Drossopoulou S., 2000, JAVA EXCEPTIONS THRO
   DYBVIG RK, 1989, COMPUT LANG, V14, P109, DOI 10.1016/0096-0551(89)90018-0
   GOODENOUGH JB, 1975, COMMUN ACM, V18, P683, DOI 10.1145/361227.361230
   GORDON A, 1995, NS953 BRICS
   Haynes C.T., 1984, Proceedings of the 1984 ACM Symposium on LISP and functional programming, LFP '84, P18, DOI DOI 10.1145/800055.802018
   HINZE R, 2006, LHS2TEX SYSTEM TYPES
   Hoare CAR., 1985, Communicating Sequential Processes
   HUTTON G, 2004, LECT COMPUTER SCI, V3125
   HUTTON G, 2006, TRENDS FUNCTIONAL PR, V5
   Hutton G., 2007, PROGRAMMING HASKELL
   Jacobs B, 2001, LECT NOTES COMPUT SC, V2028, P284
   JACOBS B, 2003, N111R0318 NIJM I COM
   JONES SP, 1999, P ACM SIGPLAN C PROG
   Klein G, 2006, ACM T PROGR LANG SYS, V28, P619, DOI 10.1145/1146809.1146811
   LAIRD J, 2002, P 11 EUR S PROGR LAN
   LAIRD J, 2001, P 16 ANN IEEE S LOG
   LEINO KRM, 1994, PROGRAMMING CONCEPTS, P447
   Leroy X, 2000, ACM T PROGR LANG SYS, V22, P340, DOI 10.1145/349214.349230
   Lillibridge M., 1999, Higher-Order and Symbolic Computation, V12, P75, DOI 10.1023/A:1010020917337
   MARLOW S, 2001, P ACM SIGPLAN C PROG
   MCBRIDE C, 2006, EPIGRAM SYSTEM
   McKinna James, 2006, J. Funct. Program
   Milner R., 1989, Communication and concurrency
   MORAN A, 1999, ELECT NOTES THEOR CO, V26
   NIPKOW T, 2004, ARCH FORMAL PROOFS
   PALSBERG J, 2002, P 7 INT S FORM TECHN, P291
   Peyton Jones S., 2001, ENG THEORIES SOFTWAR
   Ramsey N, 2000, ACM SIGPLAN NOTICES, V35, P285, DOI 10.1145/358438.349337
   REICKE JG, 1999, P 26 INT C AUT LANG
   Reynolds John C., 1972, ACM 72, V2, P717, DOI DOI 10.1023/A:1010027404223
   Sebesta R.W., 2006, Concepts of Programming Languages, V7th
   SPIVEY M, 1990, SCI COMPUT PROGRAM, V14, P25, DOI 10.1016/0167-6423(90)90056-J
   THIELECKE H, 2000, P 9 EUR S PROGR LANG
   TROELSTRA AS, 1988, CONSTRUCTION MATH IN, V1
   WAND M, 1995, P 7 INT C FUNCT PROG
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
   Yi K, 2002, THEOR COMPUT SCI, V277, P185, DOI 10.1016/S0304-3975(00)00317-0
NR 54
TC 13
Z9 14
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD NOV
PY 2007
VL 17
BP 777
EP 792
DI 10.1017/S0956796807006363
PN 6
PG 16
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 239YW
UT WOS:000251555200004
OA Bronze
DA 2024-07-18
ER

PT J
AU Neergaard, PM
AF Neergaard, PM
TI A bargain for intersection types: a simple strong normalization proof
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB This pearl gives a discount proof of the folklore theorem that every strongly beta-normalizing lambda-term is typable with an intersection type. (We consider typings that do not use the empty intersection omega which can type any term.) The proof uses the perpetual reduction strategy which finds a longest path. This is a simplification over existing proofs that consider any longest reduction path. The choice of reduction strategy avoids the need for weakening or strengthening of type derivations. The proof becomes a bargain because it works for more intersection type systems, while being simpler than existing proofs.
C1 Brandeis Univ, Michtom Sch Comp Sci, Waltham, MA 02454 USA.
C3 Brandeis University
RP Neergaard, PM (corresponding author), Brandeis Univ, Michtom Sch Comp Sci, Waltham, MA 02454 USA.
EM turtle@achilles.linearity.org
CR [Anonymous], 1998, CAMBRIDGE TRACTS THE
   [Anonymous], 1974, LNCS
   [Anonymous], 1984, The Lambda Calculus: Its Syntax and Semantics
   BARENDREGT HP, 1976, DEGREES REDUCTIONS R, P13
   DEVRIJER R, 1987, P K NED AKAD A MATH, V90, P479
   Girard J.-Y., 1972, PhD thesis
   Kfoury AJ, 2004, THEOR COMPUT SCI, V311, P1, DOI 10.1016/j.tcs.2003.10.032
   KFOURY AJ, 1995, IEEE S LOG, P311, DOI 10.1109/LICS.1995.523266
   KFOURY AJ, 2000, J LOGIC COMPUTATION, V10
   KHASIDASHVILI Z, 1994, LECT NOTES COMPUTER, V813, P191
   NEERGAARD PM, 2004, THESIS BRANDEIS U
   Pottinger Garrel, 1980, ESSAYS COMBINATORY L, P561
   REGNIER L, 1994, THEOR COMPUT SCI, V126, P281, DOI 10.1016/0304-3975(94)90012-4
   SORENSEN M. H., 1996, LECT NOTES COMPUTER, V1059, P287
   TAIT WW, 1975, LECT NOTES MATH, V453, P240
   Urzyczyn P., 1997, Mathematical Structures in Computer Science, V7, P329, DOI 10.1017/S0960129597002302
   VANBAKEL S, 1992, THEOR COMPUT SCI, V102, P135, DOI 10.1016/0304-3975(92)90297-S
   VANRAAMSDONK F, 1995, CSR9545 CWL
NR 18
TC 5
Z9 5
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD SEP
PY 2005
VL 15
BP 669
EP 677
DI 10.1017/S0956796805005587
PN 5
PG 9
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 970SE
UT WOS:000232329100002
OA Bronze
DA 2024-07-18
ER

PT J
AU Besson, F
   De Latour, TD
   Jensen, T
AF Besson, F
   De Latour, TD
   Jensen, T
TI Interfaces for stack inspection
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID ACCESS-CONTROL; FLOW
AB Stack inspection is a mechanism for programming secure applications in the presence of code from various protection domains. Run-time checks of the call stack allow a method to obtain information about the code that (directly or indirectly) invoked it in order to make access control decisions. This mechanism is part of the security architecture of Java and the NET Common Language Runtime. A central problem with stack inspection is to determine to what extent the local checks inserted into the code are sufficient to guarantee that a global security property is enforced. A further problem is how such verification can be carried out in an incremental fashion. Incremental analysis is important for avoiding re-analysis of library code every time it is used, and permits the library developer to reason about the code without knowing its context of deployment. We propose a technique for inferring interfaces for stack-inspecting libraries in the form of secure calling context for methods. By a secure calling context we mean a pre-condition on the call stack sufficient for guaranteeing that execution of the method will not violate a given global property. The technique is A constraint-based static program analysis implemented via fixed point iteration over an abstract domain of linear temporal logic properties.
C1 IRISA, CNRS, F-35042 Rennes, France.
   INRIA Rennes, F-35042 Rennes, France.
C3 Universite de Rennes; Centre National de la Recherche Scientifique
   (CNRS); Universite de Rennes
RP Besson, F (corresponding author), IRISA, CNRS, Campus Beaulieu, F-35042 Rennes, France.
EM fbesson@irisa.fr; degrenie@irisa.fr; jensen@irisa.fr
CR Abadi Martin., 2003, Proceedings of the 10th Annual Network and Distributed System Security Symposium, P107
   [Anonymous], 1990, HDB THEORETICAL COMP
   [Anonymous], P 4 ACM SIGPLAN INT
   [Anonymous], 2000, Log. J. IGPL, DOI [10.1093/jigpal/8.1.55, DOI 10.1093/JIGPAL/8.1.55]
   [Anonymous], POPL 2000
   Bacon DF, 1996, ACM SIGPLAN NOTICES, V31, P324, DOI 10.1145/236338.236371
   Banerjee A, 2003, P IEEE CSFW, P155, DOI 10.1109/CSFW.2003.1212711
   BARTHE G, 2002, P FDN SOFTW ENG
   BARTOLETTI M, 2001, ELECT NOTES THEORETI, V54
   Bauer L., 2002, WORKSH FDN COMP SEC
   Besson F, 2003, LECT NOTES COMPUT SC, V2694, P19
   Besson F., 2001, Journal of Computer Security, V9, P217
   BESSON F, 2002, THESIS U RENNES 1
   BLANC T, 2002, STACK INSPECTION ACC
   Brewer D. F. C., 1989, Proceedings 1989 IEEE Symposium on Security and Privacy (Cat. No.89CH2703-7), P206, DOI 10.1109/SECPRI.1989.36295
   BRZOZOWSKI J, 1964, J ACM, V11
   COUSOT P, 1977, SIGPLAN NOTICES, V8, P1
   Cousot P., 1977, C RECORD 1977 ACM S, P238
   COUSOT P, 1995, P 7 ACM C FUNCT PROG, P170
   DRISSIKAITOUNI O, 1988, 881 INRIA
   ERLINGSSON U, 2000, NEW SEC PAR WORKSH
   Esparza J, 2003, INFORM COMPUT, V186, P355, DOI 10.1016/S0890-5401(03)00139-1
   FOURNET C, 2002, P 29 ACM S PRINC PRO
   GONG L, 1997, P US S INT TECHN SYS
   GROVE D, 1997, P OBJ OR PROGR SYST
   HIGUCHI T, 2003, P ACM INT C FUNCT PR, P227
   Jard C, 1989, LECTURE NOTES COMPUT, V407, P189
   Jensen T, 1999, P IEEE S SECUR PRIV, P89, DOI 10.1109/SECPRI.1999.766902
   KOVED L, 2002, P 17 ACM SIGPLAN C O, P359
   LaMacchia BrianA., 2002, NET Framework Security
   Nielson F., 1999, Principles of Program Analysis
   Palsberg J., 1994, OBJECT ORIENTED TYPE
   PANDE H, 1996, LECT NOTES COMPUTER, V1145
   Pottier FN, 2001, LECT NOTES COMPUT SC, V2028, P30
   Schneider F. B., 2000, ACM Transactions on Information and Systems Security, V3, P30, DOI 10.1145/353323.353382
   SKALKA C, 2000, P 5 ACM SIGPLAN INT, P34
   Vardi MY, 1995, LECT NOTES COMPUTER, P238, DOI DOI 10.1007/3-540-60915-6
   Walker D., 2000, P 27 ACM SIGPLAN SIG, P254
   WALLACH DS, 1998, P 19 IEEE S SEC PRIV
   WALLACH DS, 1999, THEIS PRINCETON U
NR 40
TC 4
Z9 4
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD MAR
PY 2005
VL 15
BP 179
EP 217
DI 10.1017/S0956796804005465
PN 2
PG 39
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 912MM
UT WOS:000228082700003
OA Bronze
DA 2024-07-18
ER

PT J
AU Qu, WH
   Gaboardi, M
   Garg, D
AF Qu, Weihao
   Gaboardi, Marco
   Garg, Deepak
TI Relational cost analysis in a functional-imperative setting
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB Relational cost analysis aims at formally establishing bounds on the difference in the evaluation costs of two programs. As a particular case, one can also use relational cost analysis to establish bounds on the difference in the evaluation cost of the same program on two different inputs. One way to perform relational cost analysis is to use a relational type-and-effect system that supports reasoning about relations between two executions of two programs. Building on this basic idea, we present a type-and-effect system, called ARel, for reasoning about the relative cost (the difference in the evaluation cost) of array-manipulating, higher order functional-imperative programs. The key ingredient of our approach is a new lightweight type refinement discipline that we use to track relations (differences) between two mutable arrays. This discipline combined with Hoare-style triples built into the types allows us to express and establish precise relative costs of several interesting programs that imperatively update their data. We have implemented ARel using ideas from bidirectional type checking.
C1 [Qu, Weihao; Gaboardi, Marco] Boston Univ, Comp Sci Dept, Boston, MA 02215 USA.
   [Garg, Deepak] Max Planck Inst Software Syst, Saarbrucken, Germany.
C3 Boston University; Max Planck Society
RP Qu, WH (corresponding author), Boston Univ, Comp Sci Dept, Boston, MA 02215 USA.
EM weihaoqu@bu.edu; gaboardi@bu.edu; dg@mpi-sws.org
RI Gaboardi, Marco/JPX-6816-2023
OI Qu, Weihao/0000-0003-1027-6556
FU National Science Foundation [1718220]; Division of Computing and
   Communication Foundations; Direct For Computer & Info Scie & Enginr
   [1718220] Funding Source: National Science Foundation
FX This work was supported in part by the National Science Foundation under
   Grant No. 1718220.
CR Ahmed A, 2006, LECT NOTES COMPUT SC, V3924, P69
   Ahmed A, 2009, ACM SIGPLAN NOTICES, V44, P340, DOI 10.1145/1594834.1480925
   Ahmed Amal, 2004, SEMANTICS TYPES MUTA
   [Anonymous], 2010, Proceedings of the FSE/SDP Workshop on Future of Software Engineering Research FOSER
   Appel AW, 2001, ACM T PROGR LANG SYS, V23, P657, DOI 10.1145/504709.504712
   Atkey R, 2010, LECT NOTES COMPUT SC, V6012, P85, DOI 10.1007/978-3-642-11957-6_6
   Avanzini M, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110287
   Barthe G, 2015, ACM SIGPLAN NOTICES, V50, P55, DOI [10.1145/2775051.2677000, 10.1145/10.1145/2676726.2677000]
   Barthe G, 2014, ACM SIGPLAN NOTICES, V49, P193, DOI 10.1145/2535838.2535847
   Benton N, 2004, ACM SIGPLAN NOTICES, V39, P14, DOI 10.1145/982962.964003
   Benton N, 2016, PROCEEDINGS OF THE 18TH INTERNATIONAL SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING (PPDP 2016), P188, DOI 10.1145/2967973.2968602
   Benton N, 2014, ACM SIGPLAN NOTICES, V49, P619, DOI 10.1145/2535838.2535869
   Bobot Francois, 2013, ALT ERGO AUTOMATED T
   Brockschmidt M., 2014, TOOLS ALG CONSTR AN, V8413, P140, DOI DOI 10.1007/978-3-642-54862-8_10
   Carbonneaux Q, 2015, ACM SIGPLAN NOTICES, V50, P467, DOI [10.1145/2813885.2737955, 10.1145/2737924.2737955]
   Charguéraud A, 2015, LECT NOTES COMPUT SC, V9236, P137, DOI 10.1007/978-3-319-22102-1_9
   Çiçek E, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P533, DOI 10.1145/3314221.3314603
   Çiçek E, 2017, ACM SIGPLAN NOTICES, V52, P316, DOI 10.1145/3093333.3009858
   Çiçek E, 2016, ACM SIGPLAN NOTICES, V51, P132, DOI 10.1145/3022670.2951950
   COOLEY JW, 1965, MATH COMPUT, V19, P297, DOI 10.2307/2003354
   Cutler JW, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3408979
   Dal Lago U, 2011, IEEE S LOG, P133, DOI 10.1109/LICS.2011.22
   Danielsson NA, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P133, DOI 10.1145/1328438.1328457
   Danner N, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P140, DOI 10.1145/2784731.2784749
   Filliâtre JC, 2013, LECT NOTES COMPUT SC, V7792, P125, DOI 10.1007/978-3-642-37036-6_8
   Gaboardi M, 2013, ACM SIGPLAN NOTICES, V48, P357, DOI 10.1145/2480359.2429113
   Grobauer B, 2001, ACM SIGPLAN NOTICES, V36, P253, DOI 10.1145/507669.507666
   Hermenegildo MV, 2005, SCI COMPUT PROGRAM, V58, P115, DOI 10.1016/j.scico.2005.02.006
   Hoffmann Jan, 2012, Computer Aided Verification. Proceedings 24th International Conference, CAV 2012, P781, DOI 10.1007/978-3-642-31424-7_64
   Hoffmann J, 2012, ACM T PROGR LANG SYS, V34, DOI 10.1145/2362389.2362393
   Hongwei Xu, 1999, Conference Record of POPL '99. 26th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P214
   Kavvos GA, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371083
   Lichtman B., 2017, 2 INT C FORM STRUCT
   Nanevski A, 2013, ACM T PROGR LANG SYS, V35, DOI 10.1145/2491522.2491523
   Nanevski A, 2008, J FUNCT PROGRAM, V18, P865, DOI 10.1017/S0956796808006953
   Neis G, 2011, J FUNCT PROGRAM, V21, P497, DOI 10.1017/S0956796811000165
   Nielson F, 1999, LECT NOTES COMPUT SC, V1710, P114
   Pierce BC, 2000, ACM T PROGR LANG SYS, V22, P1, DOI 10.1145/345099.345100
   Radicek I, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158124
   Reistad B., 1994, Proceedings of the 1994 ACM Conference on LISP and Functional Programming, P65, DOI 10.1145/182409.182439
   Sinn M, 2014, LECT NOTES COMPUT SC, V8559, P745, DOI 10.1007/978-3-319-08867-9_50
   Turon A, 2013, ACM SIGPLAN NOTICES, V48, P343, DOI 10.1145/2480359.2429111
   Unno H, 2017, LECT NOTES COMPUT SC, V10427, P571, DOI 10.1007/978-3-319-63390-9_30
   Ngo VC, 2017, P IEEE S SECUR PRIV, P710, DOI 10.1109/SP.2017.53
   Wang P, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133903
   Zhang DF, 2015, ACM SIGPLAN NOTICES, V50, P503, DOI 10.1145/2694344.2694372
NR 46
TC 1
Z9 1
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD NOV 2
PY 2021
VL 31
AR e27
DI 10.1017/S0956796821000071
PG 62
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA XB4KA
UT WOS:000721298200001
OA hybrid
DA 2024-07-18
ER

PT J
AU Gibbons, J
AF Gibbons, Jeremy
TI How to design co-programs
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB The observation that program structure follows data structure is a key lesson in introductory programming: good hints for possible program designs can be found by considering the structure of the data concerned. In particular, this lesson is a core message of the influential textbook "How to Design Programs" by Felleisen, Findler, Flatt, and Krishnamurthi. However, that book discusses using only the structure of input data for guiding program design, typically leading towards structurally recursive programs. We argue that novice programmers should also be taught to consider the structure of output data, leading them also towards structurally corecursive programs.
C1 [Gibbons, Jeremy] Univ Oxford, Dept Comp Sci, Oxford, England.
C3 University of Oxford
RP Gibbons, J (corresponding author), Univ Oxford, Dept Comp Sci, Oxford, England.
EM jeremy.gibbons@cs.ox.ac.uk
OI Gibbons, Jeremy/0000-0002-8426-9917
CR [Anonymous], 1999, CATHEDRAL BAZAAR
   Bird R, 2003, LECT NOTES COMPUT SC, V2638, P1
   Bloch S., 2007, TEACHSCHEME
   Bloch S., 2012, PROGRAM DESIGN
   Brooks Jr.F.P, 1975, MYTHICAL MAN MONTH E
   Felleisen M, 2004, J FUNCT PROGRAM, V14, P365, DOI 10.1017/S0956796804005076
   Felleisen Matthias, 2001, How to Design Programs
   Felleisen Matthias, 2018, DESIGN PROGRAMS, Vsecond
   Gibbons J, 2007, SCI COMPUT PROGRAM, V65, P108, DOI 10.1016/j.scico.2006.01.006
   Gibbons J, 2019, LECT NOTES COMPUT SC, V11825, P444, DOI 10.1007/978-3-030-33636-3_16
   Hoare C.A.R., 1972, Structured Programming, P83
   JACKSON M, 1975, PRINCIPLES PROGRAM D
   Jackson M. A., 2002, SOFTWARE PIONEERS CO, P480
   MEIJER E, 1991, LECT NOTES COMPUT SC, V523, P124
   Ramsey N, 2014, ICFP'14: PROCEEDINGS OF THE 2014 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P153, DOI 10.1145/2628136.2628137
   Swierstra D., 1993, LECT NOTES COMPUTER, V755, P355
   WADLER P, 1990, THEOR COMPUT SCI, V73, P231, DOI 10.1016/0304-3975(90)90147-A
NR 17
TC 4
Z9 4
U1 0
U2 5
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD JUL 2
PY 2021
VL 31
AR e15
DI 10.1017/S0956796821000113
PG 15
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA TD0FT
UT WOS:000669012700001
OA Bronze
DA 2024-07-18
ER

PT J
AU Karachalias, G
   Pretnar, M
   Saleh, AH
   Vanderhallen, S
   Schrijvers, T
AF Karachalias, Georgios
   Pretnar, Matija
   Saleh, Amr Hany
   Vanderhallen, Stien
   Schrijvers, Tom
TI Explicit effect subtyping
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID COMPILATION; INFERENCE; HANDLERS
AB As popularity of algebraic effects and handlers increases, so does a demand for their efficient execution. Eff, an ML-like language with native support for handlers, has a subtyping-based effect system on which an effect-aware optimising compiler could be built. Unfortunately, in our experience, implementing optimisations for Eff is overly error-prone because its core language is implicitly typed, making code transformations very fragile. To remedy this, we present an explicitly typed polymorphic core calculus for algebraic effect handlers with a subtyping-based type-and-effect system. It reifies appeals to subtyping in explicit casts with coercions that witness the subtyping proof, quickly exposing typing bugs in program transformations. Our typing-directed elaboration comes with a constraint-based inference algorithm that turns an implicitly typed Eff-like language into our calculus. Moreover, all coercions and effect information can be erased in a straightforward way, demonstrating that coercions have no computational content. Additionally, we present a monadic translation from our calculus into a pure language without algebraic effects or handlers, using the effect information to introduce monadic constructs only where necessary.
C1 [Karachalias, Georgios; Saleh, Amr Hany; Vanderhallen, Stien; Schrijvers, Tom] Katholieke Univ Leuven, Dept Comp Sci, Leuven, Belgium.
   [Karachalias, Georgios] Tweag IO, London, England.
   [Pretnar, Matija] Univ Ljubljana, Fac Math & Phys, Ljubljana, Slovenia.
C3 KU Leuven; University of Ljubljana
RP Karachalias, G (corresponding author), Katholieke Univ Leuven, Dept Comp Sci, Leuven, Belgium.; Karachalias, G (corresponding author), Tweag IO, London, England.
EM georgios.karachalias@tweag.io; matija.pretnar@fmf.uni-lj.si;
   ah.saleh@kuleuven.be; stienvdhallen@gmail.com;
   tom.schrijvers@kuleuven.be
RI Schrijvers, Tom/A-6696-2016
OI Schrijvers, Tom/0000-0001-8771-5559; Pretnar, Matija/0000-0001-7755-2303
FU KU Leuven Special Research Fund (BOF) [3E160354]; Fund for Scientific
   Research-Flanders [G0D1419N]; Air Force Office of Scientific Research
   [FA9550-17-1-0326]
FX We would like thank the anonymous reviewers, members of the IFIP WG 2.1
   group, participants of Dagstuhl seminars 16112 (Bauer et al., 2016) and
   18172 (Chandrasekaran et al., 2018), Gert-Jan Bottu, Mauro Jaskelioff,
   Filip Koprivec, Ziga Luksi.c, Leonidas Lampropoulos, Klara Mardirosian,
   Ruben Pieters, Alexander Vandenbroucke, Nicolas Wu, and Ziga Zupan.ci.c
   for all their helpful comments and suggestions. Part of this work was
   funded by the KU Leuven Special Research Fund (BOF), project 3E160354,
   and by the Fund for Scientific Research-Flanders, project G0D1419N. This
   material is based upon work supported by the Air Force Office of
   Scientific Research under award number FA9550-17-1-0326.
CR [Anonymous], 1972, Ph. D. Dissertation
   Barendregt H., 1981, STUDIES LOGIC FDN MA
   Bauer A., 2016, DAGSTUHL REP, V6, P44
   Bauer A, 2015, J LOG ALGEBR METHODS, V84, P108, DOI 10.1016/j.jlamp.2014.02.001
   Bi X., 2018, LIPICS, V109
   BREAZUTANNEN V, 1991, INFORM COMPUT, V93, P172, DOI 10.1016/0890-5401(91)90055-7
   Chandrasekaran Sivaramakrishnan Krishnamoorthy, 2018, DAGSTUHL REPORTS, V8, P104, DOI [10.4230/DagRep.8.4.104, DOI 10.4230/DAGREP.8.4.104]
   Crary K, 2000, ACM SIGPLAN NOTICES, V35, P68, DOI 10.1145/357766.351247
   Damas L., 1982, C REC 9 ANN ACM S PR, P207, DOI DOI 10.1145/582153.582176
   Dolan Stephen, 2015, OCAML WORKSH
   FUH YC, 1990, THEOR COMPUT SCI, V73, P155, DOI 10.1016/0304-3975(90)90144-7
   Girard J.-Y., 1989, Cambridge Tracts in Theoretical Computer Science, V7
   HENGLEIN F, 1994, SCI COMPUT PROGRAM, V22, P197, DOI 10.1016/0167-6423(94)00004-2
   Hillerstrom Daniel, 2016, TYDE ICFP, P15, DOI DOI 10.1145/2976022.2976033
   HINDLEY R, 1969, T AM MATH SOC, V146, P29, DOI 10.2307/1995158
   Igarashi A, 2001, ACM T PROGR LANG SYS, V23, P396, DOI 10.1145/503502.503505
   JONES MP, 1992, LECT NOTES COMPUT SC, V582, P287
   Kammar O, 2013, ACM SIGPLAN NOTICES, V48, P145, DOI [10.1145/2500365.2500590, 10.1145/2544174.2500590]
   Kiselyov Oleg, 2016, OCAML WORKSH
   Leijen D, 2014, ELECTRON PROC THEOR, P100, DOI 10.4204/EPTCS.153.8
   Leijen D, 2017, ACM SIGPLAN NOTICES, V52, P486, DOI 10.1145/3093333.3009872
   Lindley S, 2017, ACM SIGPLAN NOTICES, V52, P500, DOI 10.1145/3093333.3009897
   MILNER R, 1978, J COMPUT SYST SCI, V17, P348, DOI 10.1016/0022-0000(78)90014-4
   Mitchell JohnC., 1984, Proceedings of the 11th ACM SIGACTSIGPLAN symposium on Principles of programming languages, P175, DOI [10.1145/800017.800529, DOI 10.1145/800017.800529]
   Morris J., 1969, THESIS
   Oliveira BCDS, 2016, ACM SIGPLAN NOTICES, V51, P364, DOI 10.1145/3022670.2951945
   Peyton Jones S., 2006, ICFP 06
   Plotkin G, 2003, APPL CATEGOR STRUCT, V11, P69, DOI 10.1023/A:1023064908962
   Plotkin GD, 2013, LOG METH COMPUT SCI, V9, DOI 10.2168/LMCS-9(4:23)2013
   Pottier F, 2001, INFORM COMPUT, V170, P153, DOI 10.1006/inco.2000.2963
   Pretnar M., 2017, 708 CW KU LEUV DEP C
   Pretnar M, 2014, LOG METHODS COMPUT S, V10, P1
   Pretnar M, 2015, ELECTRON NOTES THEOR, V319, P19, DOI 10.1016/j.entcs.2015.12.003
   Reynolds J. C., 1983, Information Processing 83. Proceedings of the IFIP 9th World Computer Congress, P513
   Reynolds J. C., 1974, Programming Symposium, P408
   Saleh Amr Hany, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P327, DOI 10.1007/978-3-319-89884-1_12
   Schrijvers T, 2008, ICFP'08: PROCEEDINGS OF THE 2008 SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P51
   Simonet V, 2003, LECT NOTES COMPUT SC, V2895, P283
   Sulzmann M, 2007, PROCEEDINGS OF THE TLDI 2007: 2007 ACM SIGPLAN INTERNATIONAL WORKSHOP ON TYPES IN LANGUAGES DESIGN AND IMPLEMENTATION, P53, DOI 10.1145/1190315.1190324
   TRAYTEL D., 2011, AS S PROGR LANG SYST, P89, DOI [10.1007/978-3-642-25318-8_10, DOI 10.1007/978-3-642-25318-8_10]
   Wansbrough K., 1999, Conference Record of POPL '99. 26th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P15, DOI 10.1145/292540.292545
NR 41
TC 4
Z9 4
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD JUN 8
PY 2020
VL 30
AR e15
DI 10.1017/S0956796820000131
PG 57
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA LV9NT
UT WOS:000538774600001
OA Green Submitted, Green Accepted
DA 2024-07-18
ER

PT J
AU Rossberg, A
AF Rossberg, Andreas
TI 1ML-Core and modules united
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID POLYMORPHISM
AB ML is two language in one: there is the core, with types and expressions, and there are modules, with signatures, structures, and functors. Modules form a separate, higher-order functional language on top of the core. there are both practical and technical reasons for this stratification; yet, it creates substantial duplication in syntax and semantics, and it imposes seemingly unnecessary limits on expressiveness because it makes modules second-class citizen of the language. For example, selecting one among several possible modules implementing a given interface cannot be made a dynamic decision. Language extensions allowing modules to be packaged up as first-class values have been proposed and implemented in different variations. However, they remedy expressiveness only to same extent and tend to be even more syntactically heavyweight than using second-class modules alone. We propose a redesign of ML in which modules are truly first-class values, and core and module layers are unified into one language. In this "1ML", functions, functors, and even type constructors are one and the same construct; likewise, no distinction is needed between structures, records, or tuples. Or viewed the other way round, everything is just ("a mode of use of") modules. Yet, 1ML does not require dependent type: its type structure is expressible in terms of plain System F-omega, with a minor variation of F-ing modules approach. We introduce both an explicitly typed version of 1ML and an extension with Damas-Milner-style implicit quantification. Type inference for this language is not complete, but, we argue, not substantially worse than for Standard ML.( )
C1 [Rossberg, Andreas] Dfin Fdn, Munich, Germany.
RP Rossberg, A (corresponding author), Dfin Fdn, Munich, Germany.
EM rossberg@mpi-sws.org
CR [Anonymous], 1992, Handbook of Logic in Computer Science
   [Anonymous], 1997, The Definition of Standard ML
   [Anonymous], J FUNCTIONAL PROGRAM
   Biswas S. K., 1995, Conference Record of POPL'95: 22nd ACM SIGPLAN-SIGACT Symposium Principles of Programming Languages, P154, DOI 10.1145/199448.199478
   Damas L., 1982, C REC 9 ANN ACM S PR, P207, DOI DOI 10.1145/582153.582176
   Dreyer D, 2003, ACM SIGPLAN NOTICES, V38, P236, DOI 10.1145/640128.604151
   Dreyer D, 2007, J FUNCT PROGRAM, V17, P433, DOI 10.1017/S0956796807006429
   Dreyer D, 2007, LECT NOTES COMPUT SC, V4421, P441
   Dreyer D, 2007, CONFERENCE RECORD OF POPL 2007: THE 34TH ACM SIGPLAN SIGACT SYMPOSIUM ON PRINCIPLES OF PROGAMMING LANGUAGES, P63
   Dreyer Derek, 2005, THESIS
   Garrigue J, 1999, INFORM COMPUT, V155, P134, DOI 10.1006/inco.1999.2830
   Garrigue J, 2010, ACM SIGPLAN WORKSH M
   HARPER R, 1990, CONFERENCE RECORD OF THE SEVENTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P341, DOI 10.1145/96709.96744
   Harper R., 1994, Conference Record of POPL '94: 21st ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P123, DOI 10.1145/174675.176927
   Harper R, 2000, FOUNDAT COMPUT, P341
   HARPER R, 1993, ACM T PROGR LANG SYS, V15, P211, DOI 10.1145/169701.169696
   Harper R., 2005, ADV TOPICS TYPES PRO
   Kuan G, 2009, LECT NOTES COMPUT SC, V6041, P218
   LeBotlan D., 2003, ACM SIGPLAN INT C FU, V4, P52
   Leroy X., 1994, Conference Record of POPL '94: 21st ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P109, DOI 10.1145/174675.176926
   Leroy X., 1995, Conference Record of POPL'95: 22nd ACM SIGPLAN-SIGACT Symposium Principles of Programming Languages, P142, DOI 10.1145/199448.199476
   Lillibridge M., 1997, THESIS
   MacQueen D. B., 1994, Programming Languages and Systems - ESOP '94. 5th European Symposium on Programming. Proceedings, P409
   MacQueen DavidB., 1986, P 13 ACM SIGPLAN S P, P277, DOI DOI 10.1145/512644.512670
   Mahboubi A, 2013, LECT NOTES COMPUT SC, V7998, P19, DOI 10.1007/978-3-642-39634-2_5
   Mcbride C, 2008, J FUNCT PROGRAM, V18, P1, DOI 10.1017/S0956796807006326
   MILNER R, 1978, J COMPUT SYST SCI, V17, P348, DOI 10.1016/0022-0000(78)90014-4
   MITCHELL JC, 1988, ACM T PROGR LANG SYS, V10, P470, DOI 10.1145/44501.45065
   Odersky M, 2005, ACM SIGPLAN NOTICES, V40, P41, DOI 10.1145/1103845.1094815
   Ohori A, 1995, ACM T PROGR LANG SYS, V17, P844, DOI 10.1145/218570.218572
   REMY D, 1989, CONFERENCE RECORD OF THE SIXTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P77, DOI 10.1145/75277.75284
   Rossberg Andreas, 2016, A List of Successes that can Change the World. Essays Dedicated to Philip Wadler on the Occasion of his 60th Birthday. LNCS 9600, P336, DOI 10.1007/978-3-319-30936-1_18
   Rossberg A., 1999, TECHNICAL REPORT
   Rossberg A, 2015, 1ML CORE MODULES UNI
   Rossberg A, 1999, UNDECIDABILITY OCAML
   Rossberg A, 2006, ACM SIGPLAN NOTICES, V41, P99, DOI 10.1145/1160074.1159816
   Rossberg A, 2014, J FUNCT PROGRAM, V24, P529, DOI 10.1017/S0956796814000264
   Rossberg A, 2013, ACM T PROGR LANG SYS, V35, DOI 10.1145/2450136.2450137
   Russo C. V., 2000, Nordic Journal of Computing, V7, P348
   Russo C. V., 2003, ELECT NOTES THEORETI, V60, P3
   Russo CV, 2009, ML'09: PROCEEDINGS OF THE 2009 ACM SIGPLAN WORKSHOP ON ML, P3
   Russo CV, 1999, LECT NOTES COMPUT SC, V1702, P80
   Shields Marks B., 2002, INT WORKSH FDN OBJ O, P28
   Stone CA, 2006, ACM T COMPUT LOG, V7, P676, DOI 10.1145/1183278.1183281
   Talpin J.-P., 1992, Journal of Functional Programming, V2, P245, DOI 10.1017/S0956796800000393
   Vytiniotis D, 2008, ICFP'08: PROCEEDINGS OF THE 2008 SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P295
   WADLER P, 1989, CONFERENCE RECORD OF THE SIXTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P60, DOI 10.1145/75277.75283
   White Leo, 2014, EPTCS, V198, P22
   Wright A. K., 1995, LISP and Symbolic Computation, V8, P343, DOI 10.1007/BF01018828
   Zhong S, 1999, ACM SIGPLAN NOTICES, V34, P220, DOI 10.1145/317765.317801
NR 50
TC 4
Z9 4
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD DEC 27
PY 2018
VL 28
AR e22
DI 10.1017/S0956796818000205
PG 60
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA HF7NR
UT WOS:000454426800001
DA 2024-07-18
ER

PT J
AU Jung, R
   Krebbers, R
   Jourdan, JH
   Bizjak, A
   Birkedal, L
   Dreyer, D
AF Jung, Ralf
   Krebbers, Robbert
   Jourdan, Jacques-Henri
   Bizjak, Ales
   Birkedal, Lars
   Dreyer, Derek
TI Iris from the ground up A modular foundation for higher-order concurrent
   separation logic
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID VERIFICATION; REFINEMENT; SEMANTICS; MEMORY; STATE; MODEL
AB Iris is a framework for higher-order concurrent separation logic, which has been implemented in the Coq proof assistant and deployed very effectively in a wide variety of verification projects. Iris was designed with the express goal of simplifying and consolidating the foundations of modern separation logics, but it has evolved over time, and the design and semantic foundations of Iris itself have yet to be fully written down and explained together properly in one place. Here, we attempt to fill this gap, presenting a reasonably complete picture of the latest version of Iris (version 3.1), from first principles and in one coherent narrative.
C1 [Jung, Ralf; Jourdan, Jacques-Henri; Dreyer, Derek] MPI SWS, Saarbrucken, Germany.
   [Krebbers, Robbert] Delft Univ Technol, Delft, Netherlands.
   [Bizjak, Ales; Birkedal, Lars] Aarhus Univ, Aarhus, Denmark.
C3 Delft University of Technology; Aarhus University
RP Jung, R (corresponding author), MPI SWS, Saarbrucken, Germany.
EM jung@mpi-sws.org; mail@robbertkrebbers.nl; jjourdan@mpi-sws.org;
   abizjak@cs.au.dk; birkedal@cs.au.dk; dreyer@mpi-sws.org
OI Jourdan, Jacques-Henri/0000-0002-9781-7097; Jung,
   Ralf/0000-0001-7669-6348
FU European Research Council (ERC) Consolidator Grant for the project
   "RustBelt", under the European Union's Horizon 2020 Framework Programme
   [683289]; Danish Council for Independent Research for the Natural
   Sciences (FNU)
FX This research was supported in part by a European Research Council (ERC)
   Consolidator Grant for the project "RustBelt", funded under the European
   Union's Horizon 2020 Framework Programme (grant agreement no. 683289);
   and by the ModuRes Sapere Aude Advanced Grant from The Danish Council
   for Independent Research for the Natural Sciences (FNU).
CR AMERICA P, 1989, J COMPUT SYST SCI, V39, P343, DOI 10.1016/0022-0000(89)90027-5
   [Anonymous], P ACM PROGR LANG POP
   Appel AW, 2007, CONFERENCE RECORD OF POPL 2007: THE 34TH ACM SIGPLAN SIGACT SYMPOSIUM ON PRINCIPLES OF PROGAMMING LANGUAGES, P109
   Appel Andrew W, 2001, TOPLAS, V23, P657
   Appel Andrew W, 2014, PROGRAM LOGICS CERTI, DOI DOI 10.1017/CBO9781107256552
   Appel AW, 2001, IEEE S LOG, P247, DOI 10.1109/LICS.2001.932501
   ASHCROFT EA, 1975, J COMPUT SYST SCI, V10, P110, DOI 10.1016/S0022-0000(75)80018-3
   Beringer L, 2014, LECT NOTES COMPUT SC, V8410, P107
   Birkedal L, 2011, IEEE S LOG, P55, DOI 10.1109/LICS.2011.16
   Birkedal L, 2010, THEOR COMPUT SCI, V411, P4102, DOI 10.1016/j.tcs.2010.07.010
   Bizjak Ales, 2018, IRON MANAGING OBLIGA
   Bizjak Ales, 2017, MFPS
   Bornat R, 2005, ACM SIGPLAN NOTICES, V40, P259, DOI 10.1145/1047659.1040327
   Boyland J, 2003, LECT NOTES COMPUT SC, V2694, P55
   Brookes S, 2007, THEOR COMPUT SCI, V375, P227, DOI 10.1016/j.tcs.2006.12.034
   Buisse A, 2011, ELECTRON NOTES THEOR, V276, P121, DOI 10.1016/j.entcs.2011.09.018
   Cao QX, 2017, LECT NOTES COMPUT SC, V10695, P190, DOI 10.1007/978-3-319-71237-6_10
   Cohen Ernie, 2009, LNCS, V5947, P43
   Di Gianantonio P, 2002, LECT NOTES COMPUT SC, V2646, P148
   DIJKSTRA EW, 1975, COMMUN ACM, V18, P453, DOI [10.1145/360933.360975, 10.1145/390016.808417]
   Dinsdale-Young T, 2013, ACM SIGPLAN NOTICES, V48, P287, DOI 10.1145/2480359.2429104
   Dinsdale-Young T, 2010, LECT NOTES COMPUT SC, V6217, P199, DOI 10.1007/978-3-642-15057-9_14
   Dinsdale-Young T, 2010, LECT NOTES COMPUT SC, V6183, P504, DOI 10.1007/978-3-642-14107-2_24
   Dockins R, 2009, LECT NOTES COMPUT SC, V5904, P161, DOI 10.1007/978-3-642-10672-9_13
   Dodds M, 2009, LECT NOTES COMPUT SC, V5502, P363, DOI 10.1007/978-3-642-00590-9_26
   Dodds Mike, 2016, TOPLAS, V38
   Dreyer D, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P185, DOI 10.1145/1706299.1706323
   Feng XY, 2007, LECT NOTES COMPUT SC, V4421, P173
   Feng XY, 2009, ACM SIGPLAN NOTICES, V44, P315, DOI 10.1145/1594834.1480922
   Frumin D, 2018, LICS'18: PROCEEDINGS OF THE 33RD ANNUAL ACM/IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P442, DOI 10.1145/3209108.3209174
   Fu M, 2010, LECT NOTES COMPUT SC, V6269, P388, DOI 10.1007/978-3-642-15375-4_27
   Garillot F, 2009, LECT NOTES COMPUT SC, V5674, P327, DOI 10.1007/978-3-642-03359-9_23
   Gotsman A, 2007, LECT NOTES COMPUT SC, V4807, P19
   Hobor A, 2008, LECT NOTES COMPUT SC, V4960, P353
   Hobor A, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P171, DOI 10.1145/1706299.1706322
   Iris Team, 2017, IRIS DOC COQ DEV
   Ishtiaq S, 2001, ACM SIGPLAN NOTICES, V36, P14, DOI 10.1145/373243.375719
   Jensen JB, 2012, LECT NOTES COMPUT SC, V7211, P377, DOI 10.1007/978-3-642-28869-2_19
   Jung R, 2016, ACM SIGPLAN NOTICES, V51, P256, DOI 10.1145/3022670.2951943
   Jung R, 2015, ACM SIGPLAN NOTICES, V50, P637, DOI [10.1145/2676726.2676980, 10.1145/2775051.2676980]
   Kaiser J.-O., 2017, LIPICS, V74
   KOCK A, 1970, ARCH MATH, V21, P1, DOI 10.1007/BF01220868
   KOCK A, 1972, ARCH MATH, V23, P113, DOI 10.1007/BF01304852
   Krebbers R, 2017, LECT NOTES COMPUT SC, V10201, P696, DOI 10.1007/978-3-662-54434-1_26
   Krebbers R, 2017, ACM SIGPLAN NOTICES, V52, P205, DOI 10.1145/3093333.3009855
   Krebbers Robbert, 2018, PACMPL, V2
   Kripke Saul A., 1965, Studies in Logic and the Foundations of Mathematics, V40, P92, DOI [10.1016/S0049-237X(08)71685-9, DOI 10.1016/S0049-237X(08)71685-9]
   Krishnaswami NR, 2012, ACM SIGPLAN NOTICES, V47, P41, DOI 10.1145/2398856.2364536
   Krogh-Jespersen M, 2017, ACM SIGPLAN NOTICES, V52, P218, DOI 10.1145/3093333.3009877
   Leino KRM, 2009, LECT NOTES COMPUT SC, V5705, P195, DOI 10.1007/978-3-642-03829-7_7
   Ley-Wild R, 2013, ACM SIGPLAN NOTICES, V48, P561, DOI 10.1145/2480359.2429134
   Müller P, 2016, LECT NOTES COMPUT SC, V9583, P41, DOI 10.1007/978-3-662-49122-5_2
   Nakano H, 2000, IEEE S LOG, P255, DOI 10.1109/LICS.2000.855774
   Nanevski A, 2014, LECT NOTES COMPUT SC, V8410, P290
   O'Hearn P., 2001, Computer Science Logic. 15th International Workshop, CSL 2001 10th Annual Conference of the EACSL. Proceedings (Lecture Notes in Computer Science Vol.2142), P1
   O'Hearn PW, 2007, THEOR COMPUT SCI, V375, P271, DOI 10.1016/j.tcs.2006.12.035
   O'Hearn PW, 1999, B SYMB LOG, V5, P215, DOI 10.2307/421090
   Parkinson M, 2010, LECT NOTES COMPUT SC, V6217, P169, DOI 10.1007/978-3-642-15057-9_12
   Pilkiewicz Alexandre., 2011, Proceedings of the 7th ACM SIGPLAN Workshop on Types in Language Design and Implementation, TLDI '11, P73, DOI [DOI 10.1145/1929553.1929565, 10.1145/1929553.1929565]
   Pinto PD, 2014, LECT NOTES COMPUT SC, V8586, P207
   Pottier F, 2013, J FUNCT PROGRAM, V23, P38, DOI 10.1017/S0956796812000366
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Reynolds John C., 2000, MILLENNIAL PERSPECTI, P303
   Rustan K, 2010, LECT NOTES ARTIF INT, V6355, P348, DOI 10.1007/978-3-642-17511-4_20
   Sergey I, 2015, ACM SIGPLAN NOTICES, V50, P77, DOI [10.1145/2813885.2737964, 10.1145/2737924.2737964]
   Sozeau M, 2009, J FORMALIZ REASON, V2, P41
   Svendsen K, 2014, LECT NOTES COMPUT SC, V8410, P149
   Swasey D, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133913
   Tassarotti J, 2017, LECT NOTES COMPUT SC, V10201, P909, DOI 10.1007/978-3-662-54434-1_34
   Tassarotti Joseph, 2018, SEPARATION LOGIC CON
   Timany A, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158152
   Timany Amin, 2018, MECH RELATIONAL VERI
   Turon A, 2014, ACM SIGPLAN NOTICES, V49, P691, DOI [10.1145/2660193.2660243, 10.1145/2714064.2660243]
   Turon A, 2013, ACM SIGPLAN NOTICES, V48, P377, DOI [10.1145/2500365.2500600, 10.1145/2544174.2500600]
   Vafeiadis V, 2007, LECT NOTES COMPUT SC, V4703, P256
   Wildmoser M, 2004, LECT NOTES COMPUT SC, V3223, P305
NR 76
TC 176
Z9 187
U1 0
U2 2
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD NOV 22
PY 2018
VL 28
AR e20
DI 10.1017/S0956796818000151
PG 73
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA HB2SH
UT WOS:000450892300001
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Grygiel, K
   Lescanne, P
AF Grygiel, Katarzyna
   Lescanne, Pierre
TI Counting and generating terms in the binary lambda calculus
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB In a paper, entitled Binary lambda calculus and combinatory logic, John Tromp presents a simple way of encoding lambda calculus terms as binary sequences. In what follows, we study the numbers of binary strings of a given size that represent lambda terms and derive results from their generating functions, especially that the number of terms of size n grows roughly like 1.963447954...(n). In a second part we use this approach to generate random lambda terms using Boltzmann samplers.
C1 [Grygiel, Katarzyna] Jagiellonian Univ, Fac Math & Comp Sci, Theoret Comp Sci Dept, Ul Prof Lojasiewicza 6, PL-30348 Krakow, Poland.
   [Lescanne, Pierre] Univ Lyon, CNRS, Ecole Normale Super Lyon, LIP,UMR 5668,UCBL,INRIA, F-69364 Lyon, France.
C3 Jagiellonian University; Ecole Normale Superieure de Lyon (ENS de LYON);
   Inria; Centre National de la Recherche Scientifique (CNRS)
RP Grygiel, K (corresponding author), Jagiellonian Univ, Fac Math & Comp Sci, Theoret Comp Sci Dept, Ul Prof Lojasiewicza 6, PL-30348 Krakow, Poland.
EM grygiel@tcs.uj.edu.pl; pierre.lescanne@ens-lyon.fr
RI Grygiel, Katarzyna/U-4549-2018
CR [Anonymous], 1989, Kolmogorov Complexity and Its Applications
   [Anonymous], 1978, COMBINATORIAL ALGORI
   [Anonymous], 1972, INDAGATIONES MATHEMA, DOI DOI 10.1016/1385-7258(72)90034-0
   [Anonymous], 2003, Haskell 98 language and libraries: the revised report
   Bacher A., 2014, CORR
   Bodini O, 2013, THEOR COMPUT SCI, V502, P227, DOI 10.1016/j.tcs.2013.01.008
   Bodini O., 2011, P 8 WORKSH AN ALG CO, P23, DOI DOI 10.1137/1.9781611973013.3
   Bodini O, 2013, ELECTRON J COMB, V20
   Claessen K, 2000, ACM SIGPLAN NOTICES, V35, P268, DOI 10.1145/357766.351266
   David R, 2013, LOG METH COMPUT SCI, V9, DOI 10.2168/LMCS-9(1:02)2013
   Duchon P, 2004, COMB PROBAB COMPUT, V13, P577, DOI 10.1017/S0963548304006315
   Flajolet P, 2007, SIAM PROC S, P201
   Flajolet Philippe, 2008, Analytic Combinatorics
   Grygiel K., 2014, CORR
   Grygiel K, 2013, J FUNCT PROGRAM, V23, P594, DOI 10.1017/S0956796813000178
   HINDLEY JR, 1997, CAMBRIDGE TRACTS THE
   Karttunen A., 2015, RANKING UNRANKING FU
   Knuth D. E., 2006, The Art of Computer Programming, Volume 4, Fascicle 4: Generating All TreesHistory of Combinatorial Generation, V4
   Lescanne P., 1994, P 21 ANN ACM S PRINC, P60
   Lescanne P, 2013, THEOR COMPUT SCI, V474, P80, DOI 10.1016/j.tcs.2012.11.019
   REMY JL, 1985, RAIRO-INF THEOR APPL, V19, P179
   Tarau P, 2015, P 31 INT C LOG PROGR
   Tromp J, 2006, DAGST SEM P, V06051
   Wang J. I. N. H. U. I., 2004, THESIS
NR 24
TC 14
Z9 14
U1 0
U2 1
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PY 2015
VL 25
AR e24
DI 10.1017/S0956796815000271
PG 25
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DB1AM
UT WOS:000368240300013
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Wadler, P
AF Wadler, Philip
TI Propositions as sessions
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID LANGUAGE PRIMITIVES; LINEAR LOGIC; DISCIPLINE; CALCULUS
AB Continuing a line of work by Abramsky (1994), Bellin and Scott (1994), and Caires and Pfenning (2010), among others, this paper presents CP, a calculus, in which propositions of classical linear logic correspond to session types. Continuing a line of work by Honda (1993), Honda et al. (1998), and Gay & Vasconcelos (2010), among others, this paper presents GV, a linear functional language with session types, and a translation from GV into CP. The translation formalises for the first time a connection between a standard presentation of session types and linear logic, and shows how a modification to the standard presentation yields a language free from races and deadlock, where race and deadlock freedom follows from the correspondence to linear logic.
C1 Univ Edinburgh, Edinburgh EH8 9YL, Midlothian, Scotland.
C3 University of Edinburgh
RP Wadler, P (corresponding author), Univ Edinburgh, Edinburgh EH8 9YL, Midlothian, Scotland.
EM wadler@inf.ed.ac.uk
FU EPSRC [EP/K034413/1] Funding Source: UKRI
CR ABRAMSKY S, 1993, THEOR COMPUT SCI, V111, P3, DOI 10.1016/0304-3975(93)90181-R
   ABRAMSKY S, 1994, THEOR COMPUT SCI, V135, P5, DOI 10.1016/0304-3975(94)00103-0
   Abramsky S., 1996, P NATO ADV STUD I DE, P35
   Aceto L, 2011, BULL EUR ASSOC THEOR, P53
   BELLIN G, 1994, THEOR COMPUT SCI, V135, P11, DOI 10.1016/0304-3975(94)00104-9
   Benton N, 1996, IEEE S LOG, P420, DOI 10.1109/LICS.1996.561458
   Berger M, 2005, ACTA INFORM, V42, P83, DOI 10.1007/s00236-005-0175-1
   Caires L., 2013, BEHAV TYPES IN PRESS
   Caires L, 2013, LECT NOTES COMPUT SC, V7792, P330, DOI 10.1007/978-3-642-37036-6_19
   Caires L, 2010, LECT NOTES COMPUT SC, V6269, P222, DOI 10.1007/978-3-642-15375-4_16
   Caires Luis., 2012, P 8 ACM SIGPLAN WORK, P1, DOI [10.1145/2103786.2103788, DOI 10.1145/2103786.2103788]
   Carbone M, 2010, ELECTRON P THEOR COM, P13, DOI 10.4204/EPTCS.38.4
   Fahndrich M., 2006, Operating Systems Review, V40, P177, DOI 10.1145/1218063.1217953
   Gallier Jean H., 1990, GIRARDS CANDIDATS RE, P123
   Gay S, 2005, ACTA INFORM, V42, P191, DOI 10.1007/s00236-005-0177-z
   Gay SJ, 2010, J FUNCT PROGRAM, V20, P19, DOI 10.1017/S0956796809990268
   Girard Jean-Yves, 1991, Mathematical Structures in Computer Science, V1, P255, DOI 10.1017/S0960129500001328
   GIRARD JY, 1987, THEOR COMPUT SCI, V50, P1, DOI 10.1016/0304-3975(87)90045-4
   GIRARD JY, 1989, PROOFS TYPES CAMBRID, V7
   Herbelin H, 2005, LECT NOTES COMPUT SC, V3461, P209
   Honda K, 1998, LECT NOTES COMPUT SC, V1381, P122, DOI 10.1007/BFb0053567
   Honda K, 2008, ACM SIGPLAN NOTICES, V43, P273, DOI 10.1145/1328897.1328472
   Honda Kohei., 1993, CONCUR'93, 4th International Conference on Concurrency Theory, Hildesheim, Germany, August 23-26, 1993, V715, P509, DOI DOI 10.1007/3-540-57208-2_
   Kabayashi N., 1996, Conference Record of POPL '96: The 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P358, DOI 10.1145/237721.237804
   Kobayashi N., 1995, Formal Aspects of Computing, V7, P113, DOI 10.1007/BF01211602
   KOBAYASHI N, 1993, MIT PS LOG, P279
   Kobayashi N., 1994, LNCS, V907, P137
   Kobayashi Naoki, 2002, 10 ANN C UNU IIST, P439
   Mazurak K, 2010, ACM SIGPLAN NOTICES, V45, P39, DOI 10.1145/1932681.1863551
   Merro M, 2004, MATH STRUCT COMP SCI, V14, P715, DOI 10.1017/S0960129504004323
   Miller D., 1992, ELP, V660, P242
   MILNER R, 1992, INFORM COMPUT, V100, P1, DOI [10.1016/0890-5401(92)90008-4, 10.1016/0890-5401(92)90009-5]
   Pérez JA, 2012, LECT NOTES COMPUT SC, V7211, P539, DOI 10.1007/978-3-642-28869-2_27
   Pfenning Frank, 2011, Certified Programs and Proofs. Proceedings First International Conference, CPP 2011, P21
   Pierce BC, 2000, FOUNDAT COMPUT, P455
   Pierce BC, 2000, J ACM, V47, P531, DOI 10.1145/337244.337261
   Pitts AM, 2011, J FUNCT PROGRAM, V21, P235, DOI 10.1017/S0956796811000116
   Sumii Eijiro, 1998, ELECT NOTES THEORETI, V16, P225
   Takeuchi K., 1994, Parallel Architectures and Languages Europe'94, V817, P398, DOI [DOI 10.1007/3-540-58184-7_118, 10.1007/3540581847118]
   Toninho B, 2013, LECT NOTES COMPUT SC, V7792, P350, DOI 10.1007/978-3-642-37036-6_20
   Toninho B, 2012, LECT NOTES COMPUT SC, V7213, P346, DOI 10.1007/978-3-642-28729-9_23
   TURNER DN, 1995, THESIS U EDINBURGH E
   Wadler P, 2012, ACM SIGPLAN NOTICES, V47, P273, DOI 10.1145/2398856.2364568
   Yoshida N, 2007, ELECTRON NOTES THEOR, V171, P73, DOI 10.1016/j.entcs.2007.02.056
NR 44
TC 79
Z9 84
U1 0
U2 1
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD MAY
PY 2014
VL 24
IS 2-3
BP 384
EP 418
DI 10.1017/S095679681400001X
PG 35
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AM0QJ
UT WOS:000339550500007
OA Green Submitted, Green Accepted, Bronze
DA 2024-07-18
ER

PT J
AU Chen, Y
   Dunfield, J
   Hammer, MA
   Acar, UA
AF Chen, Yan
   Dunfield, Joshua
   Hammer, Matthew A.
   Acar, Umut A.
TI Implicit self-adjusting computation for purely functional programs
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID FLOW; INFERENCE; LANGUAGE
AB Computational problems that involve dynamic data, such as physics simulations and program development environments, have been an important subject of study in programming languages. Building on this work, recent advances in self-adjusting computation have developed techniques that enable programs to respond automatically and efficiently to dynamic changes in their inputs. Self-adjusting programs have been shown to be efficient for a reasonably broad range of problems, but the approach still requires an explicit programming style, where the programmer must use specific monadic types and primitives to identify, create, and operate on data that can change over time. We describe techniques for automatically translating purely functional programs into self-adjusting programs. In this implicit approach, the programmer need only annotate the (top-level) input types of the programs to be translated. Type inference finds all other types, and a type-directed translation rewrites the source program into an explicitly self-adjusting target program. The type system is related to information-flow type systems and enjoys decidable type inference via constraint solving. We prove that the translation outputs well-typed self-adjusting programs and preserves the source program's input-output behavior, guaranteeing that translated programs respond correctly to all changes to their data. Using a cost semantics, we also prove that the translation preserves the asymptotic complexity of the source program.
C1 [Chen, Yan; Dunfield, Joshua] Max Planck Inst Software Syst, Kaiserslautern, Germany.
   [Chen, Yan; Dunfield, Joshua] Max Planck Inst Software Syst, Saarbrucken, Germany.
   [Hammer, Matthew A.] Univ Maryland, College Pk, MD 20742 USA.
   [Acar, Umut A.] Carnegie Mellon Univ, Pittsburgh, PA 15213 USA.
   [Acar, Umut A.] INRIA Paris Rocquencourt, Paris, France.
C3 Max Planck Society; Max Planck Society; University System of Maryland;
   University of Maryland College Park; Carnegie Mellon University
RP Chen, Y (corresponding author), Max Planck Inst Software Syst, Kaiserslautern, Germany.
EM chenyan@mpi-sws.org; joshua@mpi-sws.org; hammer@mpi-sws.org;
   umut@cs.cmu.edu
CR Abadi M, 1996, ACM SIGPLAN NOTICES, V31, P83, DOI 10.1145/232629.232638
   Acar U. A., 2010, S COMP GEOM, P756
   Acar U, 2006, ELECTRON NOTES THEOR, V148, P127, DOI 10.1016/j.entcs.2005.11.043
   Acar UA, 2006, ACM T PROGR LANG SYS, V28, P990, DOI 10.1145/1186632.1186634
   Acar UA, 2010, ACM SIGPLAN NOTICES, V45, P483, DOI 10.1145/1809028.1806650
   Acar UA, 2009, ACM T PROGR LANG SYS, V32, DOI 10.1145/1596527.1596530
   BARENDREGT H, 1983, J SYMBOLIC LOGIC, V48, P931, DOI 10.2307/2273659
   Bellman R., 1957, Dynamic programming
   Burchett Kimberley., 2007, PEPM 07, P71
   Carlsson M, 2002, ACM SIGPLAN NOTICES, V37, P26, DOI 10.1145/583852.581482
   Chen Y, 2012, ACM SIGPLAN NOTICES, V47, P299, DOI 10.1145/2345156.2254100
   Chen Y, 2011, ACM SIGPLAN NOTICES, V46, P129, DOI 10.1145/2034574.2034792
   CHIANG YJ, 1992, P IEEE, V80, P1412, DOI 10.1109/5.163409
   Cooper GH, 2006, LECT NOTES COMPUT SC, V3924, P294
   Crary K, 2005, J FUNCT PROGRAM, V15, P249, DOI 10.1017/S0956796804005441
   Damas L., 1982, C REC 9 ANN ACM S PR, P207, DOI DOI 10.1145/582153.582176
   Demers Alan., 1981, P 8 ANN ACM S PRINCI, P105, DOI DOI 10.1145/567532.567544
   Demetrescu C., 2005, HDB DATA STRUCTURES
   Efremidis S. G., 1993, 931401 CORN U
   Elliott C, 1997, ACM SIGPLAN NOTICES, V32, P263, DOI 10.1145/258949.258973
   FIELD J, 1990, PROCEEDINGS OF THE 1990 ACM CONFERENCE ON LISP AND FUNCTIONAL PROGRAMMING, P307, DOI 10.1145/91556.91679
   Foster JS, 2006, ACM T PROGR LANG SYS, V28, P1035, DOI 10.1145/1186632.1186635
   Gibbons Phillip B, 2008, INT C FUNCT PROGR
   Guibas L., 2004, HDB DISCRETE COMPUTA, V2nd, P1117
   Hammer MA, 2009, ACM SIGPLAN NOTICES, V44, P25, DOI 10.1145/1543135.1542480
   Heintze N., 1998, Conference Record of POPL '98: 25th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P365, DOI 10.1145/268946.268976
   Jeffrey Alan., 2012, Proceedings of the sixth workshop on Programming languages meets program verification, P49
   Krishnaswami NR, 2013, ACM SIGPLAN NOTICES, V48, P221, DOI [10.1145/2544174.2500588, 10.1145/2500365.2500588]
   Ley-Wild R, 2008, ACM SIGPLAN NOTICES, V43, P321, DOI 10.1145/1411203.1411249
   Ley-Wild R, 2009, ACM SIGPLAN NOTICES, V44, P186, DOI 10.1145/1594834.1480907
   Liu H, 2007, ELECTRON NOTES THEOR, V193, P29, DOI 10.1016/j.entcs.2007.10.006
   Liu H, 2009, ACM SIGPLAN NOTICES, V44, P35, DOI 10.1145/1631687.1596559
   Myers A. C., 1999, Conference Record of POPL '99. 26th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P228, DOI 10.1145/292540.292561
   Nilsson H, 2005, ACM SIGPLAN NOTICES, V40, P54, DOI 10.1145/1090189.1086374
   Odersky M, 1999, THEOR PRACT OBJ SYST, V5, P35, DOI 10.1002/(SICI)1096-9942(199901/03)5:1<35::AID-TAPO4>3.0.CO;2-4
   Pfenning F., 2001, Mathematical Structures in Computer Science, V11, P511, DOI 10.1017/S0960129501003322
   Pottier F, 2003, ACM T PROGR LANG SYS, V25, P117, DOI 10.1145/596980.596983
   PUGH W, 1989, CONFERENCE RECORD OF THE SIXTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P315, DOI 10.1145/75277.75305
   Ramalingam G., 1993, Conference Record of the Twentieth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P502, DOI 10.1145/158511.158710
   Reps T., 1982, THESIS CORNELL U ITH
   Reps T.W., 1989, SYNTHESIZER GENERATO
   Sabelfeld A, 2003, IEEE J SEL AREA COMM, V21, P5, DOI 10.1109/JSAC.2002.806121
   SANDS D, 1990, THESIS U LONDON LOND
   Sansom P. M., 1995, Conference Record of POPL'95: 22nd ACM SIGPLAN-SIGACT Symposium Principles of Programming Languages, P355, DOI 10.1145/199448.199531
   Sculthorpe Neil, 2010, Higher-Order and Symbolic Computation, V23, P227, DOI 10.1007/s10990-011-9068-x
   Shankar A, 2007, ACM SIGPLAN NOTICES, V42, P310, DOI 10.1145/1273442.1250770
   Simonet V, 2003, LECT NOTES COMPUT SC, V2895, P283
   Sundaresh R.S., 1991, C RECORD 18 ANN ACM, P1
   ThomasW Reps, 1982, S PRINCIPLES PROGRAM, P169, DOI [10.1145/582153.582172, DOI 10.1145/582153.582172]
   Zhanyong Wan, 2002, Practical Aspects of Declarative Languages. 4th International Symposium, PADL 2002. Proceedings (Lecture Notes in Computer Science Vol.2257), P155
NR 50
TC 11
Z9 11
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD JAN
PY 2014
VL 24
IS 1
BP 56
EP 112
DI 10.1017/S0956796814000033
PG 57
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AI4PG
UT WOS:000336846700002
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Gonthier, G
   Ziliani, B
   Nanevski, A
   Dreyer, D
AF Gonthier, Georges
   Ziliani, Beta
   Nanevski, Aleksandar
   Dreyer, Derek
TI How to make ad hoc proof automation less ad hoc
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID FORMAL VERIFICATION; LANGUAGE
AB Most interactive theorem provers provide support for some form of user-customizable proof automation. In a number of popular systems, such as Coq and Isabelle, this automation is achieved primarily through tactics, which are programmed in a separate language from that of the prover's base logic. While tactics are clearly useful in practice, they can be difficult to maintain and compose because, unlike lemmas, their behavior cannot be specified within the expressive type system of the prover itself.
   We propose a novel approach to proof automation in Coq that allows the user to specify the behavior of custom automated routines in terms of Coq's own type system. Our approach involves a sophisticated application of Coq's canonical structures, which generalize Haskell type classes and facilitate a flexible style of dependently-typed logic programming. Specifically, just as Haskell type classes are used to infer the canonical implementation of an overloaded term at a given type, canonical structures can be used to infer the canonical proof of an overloaded lemma for a given instantiation of its parameters. We present a series of design patterns for canonical structure programming that enable one to carefully and predictably coax Coq's type inference engine into triggering the execution of user-supplied algorithms during unification, and we illustrate these patterns through several realistic examples drawn from Hoare Type Theory. We assume no prior knowledge of Coq and describe the relevant aspects of Coq type inference from first principles.
C1 [Gonthier, Georges] Microsoft Res, Cambridge, England.
   [Ziliani, Beta; Dreyer, Derek] Max Planck Inst Software Syst MPI SWS, Saarbrucken, Germany.
   [Nanevski, Aleksandar] IMDEA Software Inst, Madrid, Spain.
C3 Microsoft; Max Planck Society; IMDEA Software Institute
RP Gonthier, G (corresponding author), Microsoft Res, Cambridge, England.
EM gonthier@microsoft.com; beta@mpi-sws.org; aleks.nanevski@imdea.org;
   dreyer@mpi-sws.org
FU Spanish MINECO [TIN2010-20639 Paran10, TIN2012-39391-C04-01 Strongsoft];
   AMAROUT grant [PCOFUND-GA-2008-229599]; Ramon y Cajal grant
   [RYC-2010-0743]
FX We would like to thank Cyril Cohen and Matthieu Sozeau for very helpful
   discussions, as well as the anonymous reviewers for their thorough and
   insightful comments. This research has been partially supported by
   Spanish MINECO projects TIN2010-20639 Paran10 and TIN2012-39391-C04-01
   Strongsoft; AMAROUT grant PCOFUND-GA-2008-229599; and Ramon y Cajal
   grant RYC-2010-0743.
CR Asperti A, 2009, LECT NOTES COMPUT SC, V5674, P84, DOI 10.1007/978-3-642-03359-9_8
   Barras B, 2011, IEEE S LOG, P143, DOI 10.1109/LICS.2011.37
   Bertot Y, 2008, LECT NOTES COMPUT SC, V5170, P86, DOI 10.1007/978-3-540-71067-7_11
   BRAIBANT T, 2010, 2 C WORKSH
   Chakravarty MMT, 2005, ACM SIGPLAN NOTICES, V40, P241, DOI 10.1145/1090189.1086397
   CHLIPALA A, 2008, CERTIFIED PROGRAMMIN
   Chlipala A, 2011, ACM SIGPLAN NOTICES, V46, P234, DOI 10.1145/1993316.1993526
   GOLDFARB WD, 1981, THEOR COMPUT SCI, V13, P225, DOI 10.1016/0304-3975(81)90040-2
   Gonthier Georges, 2011, Interactive Theorem Proving. Proceedings Second International Conference, ITP 2011, P103, DOI 10.1007/978-3-642-22863-6_10
   Gonthier G., 2008, NOT AMS, V55, P1382
   Gonthier G., 2012, MAKE AD HOC PROOF AU
   Gonthier G, 2010, J FORMALIZ REASON, V3, P95
   Grégoire B, 2005, LECT NOTES COMPUT SC, V3603, P98
   Hall C., 1996, ACM T PROGR LANG SYS, V18, P241
   Jia LM, 2010, ACM SIGPLAN NOTICES, V45, P275, DOI 10.1145/1707801.1706333
   Jones MP, 2000, LECT NOTES COMPUT SC, V1782, P230
   Klein G, 2010, COMMUN ACM, V53, P107, DOI 10.1145/1743546.1743574
   Leroy X, 2009, COMMUN ACM, V52, P107, DOI 10.1145/1538788.1538814
   Miller D., 1991, Logic Programming. Proceedings of the Eighth International Conference, P255
   Morris JG, 2010, ACM SIGPLAN NOTICES, V45, P375, DOI 10.1145/1932681.1863596
   Nanevski A, 2010, ACM SIGPLAN NOTICES, V45, P261, DOI 10.1145/1707801.1706331
   Pientka Brigitte, 2008, P ACM SIGPLAN S PRIN, P163, DOI [10.1145/1389449.1389469, DOI 10.1145/1389449.1389469]
   Poswolsky A, 2009, ELECTRON NOTES THEOR, V228, P113, DOI 10.1016/j.entcs.2008.12.120
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Saibi A., 1997, Conference Record of POPL '97: The 24th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P292, DOI 10.1145/263699.263742
   Sozeau M, 2008, LECT NOTES COMPUT SC, V5170, P278, DOI 10.1007/978-3-540-71067-7_23
   Spitters B, 2011, MATH STRUCT COMP SCI, V21, P795, DOI 10.1017/S0960129511000119
   Stampoulis A, 2012, ACM SIGPLAN NOTICES, V47, P273, DOI 10.1145/2103621.2103690
   Stampoulis A, 2010, ACM SIGPLAN NOTICES, V45, P333, DOI 10.1145/1932681.1863591
   Strub PY, 2010, LECT NOTES COMPUT SC, V6247, P529, DOI 10.1007/978-3-642-15205-4_40
   WADLER P, 1989, CONFERENCE RECORD OF THE SIXTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P60, DOI 10.1145/75277.75283
NR 31
TC 12
Z9 12
U1 0
U2 2
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD JUL
PY 2013
VL 23
IS 4
SI SI
BP 357
EP 401
DI 10.1017/S0956796813000051
PG 45
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 250WP
UT WOS:000326887600002
OA Bronze
DA 2024-07-18
ER

PT J
AU Pientka, B
AF Pientka, Brigitte
TI An insider's look at LF type reconstruction: everything you (n)ever
   wanted to know
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID HIGHER-ORDER ENCODINGS; IMPLICIT CALCULUS; FRAMEWORK; CONSTRUCTIONS;
   METATHEORY; SYSTEMS
AB Although type reconstruction for dependently typed languages is common in practical systems, it is still ill-understood. Detailed descriptions of the issues around it are hard to find and formal descriptions together with correctness proofs are non-existing. In this paper, we discuss a one-pass type reconstruction for objects in the logical framework LF, describe formally the type reconstruction process using the framework of contextual modal types, and prove correctness of type reconstruction. Since type reconstruction will find most general types and may leave free variables, we in addition describe abstraction which will return a closed object where all free variables are bound at the outside. We also implemented our algorithms as part of the Beluga language, and the performance of our type reconstruction algorithm is comparable to type reconstruction in existing systems such as the logical framework Twelf.
C1 McGill Univ, Montreal, PQ, Canada.
C3 McGill University
RP Pientka, B (corresponding author), McGill Univ, Montreal, PQ, Canada.
EM bpientka@cs.mcgill.ca
CR ABADI M, 1990, CONFERENCE RECORD OF THE SEVENTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P31, DOI 10.1145/96709.96712
   Aydemir B, 2008, ACM SIGPLAN NOTICES, V43, P3, DOI 10.1145/1328897.1328443
   Barras B, 2008, LECT NOTES COMPUT SC, V4962, P365, DOI 10.1007/978-3-540-78499-9_26
   Bertot Y., 2004, TEXT THEORET COMP S
   Boespflug M., 2010, DEDUKTI
   Cervesato I, 2003, J LOGIC COMPUT, V13, P639, DOI 10.1093/logcom/13.5.639
   Crary K, 2003, ACM SIGPLAN NOTICES, V38, P198, DOI 10.1145/640128.604149
   Dowek G., 1993, Typed Lambda Calculi and Applications. International Conference. TLCA '93, P139, DOI 10.1007/BFb0037103
   DOWEK G, 1995, IEEE S LOG, P366, DOI 10.1109/LICS.1995.523271
   Dowek G., 1996, Proceedings of the Joint International Conference and Symposium on Logic Programming, P259
   Hagiya M., 1994, Logic, language and computation. Festschrift in honor of Satoru Takasu, P10, DOI 10.1007/BFb0032392
   HARPER R, 1993, J ACM, V40, P143, DOI 10.1145/138027.138060
   Harper R, 2007, J FUNCT PROGRAM, V17, P613, DOI 10.1017/S0956796807006430
   Lee DK, 2007, ACM SIGPLAN NOTICES, V42, P173, DOI 10.1145/1190215.1190245
   Licata DR, 2008, IEEE S LOG, P241, DOI 10.1109/LICS.2008.48
   Luther M., 2001, Automated Reasoning. First International Joint Conference, IJCAR 2001. Proceedings (Lecture Notes in Artificial Intelligence Vol.2083), P386
   McBride C, 2004, J FUNCT PROGRAM, V14, P69, DOI 10.1017/S0956796803004829
   Miller D., 1991, Logic Programming. Proceedings of the Eighth International Conference, P255
   Miquel A, 2001, LECT NOTES COMPUT SC, V2044, P344
   Nanevski A, 2008, ACM T COMPUT LOG, V9, DOI 10.1145/1352582.1352591
   Necula G. C., 1997, Conference Record of POPL '97: The 24th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P106, DOI 10.1145/263699.263712
   Necula GC, 1998, THIRTEENTH ANNUAL IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, PROCEEDINGS, P93, DOI 10.1109/LICS.1998.705646
   Norell U., 2007, 33D CHALM U TECHN DE
   Pfenning F., 1999, Automated Deduction - CADE-16. 16th International Conference on Automated Deduction. Proceedings (Lecture Notes in Artificial Intelligence Vol.1632), P202
   Pfenning F, 1991, Logical frameworks, P149
   Pfenning F., 2012, COMPUTATION IN PRESS
   Pientka B, 2008, ACM SIGPLAN NOTICES, V43, P371, DOI 10.1145/1328897.1328483
   Pientka B, 2007, LECT NOTES COMPUT SC, V4732, P246
   Pientka B, 2010, LECT NOTES ARTIF INT, V6173, P15
   Pientka Brigitte, 2008, P ACM SIGPLAN S PRIN, P163, DOI [10.1145/1389449.1389469, DOI 10.1145/1389449.1389469]
   Pientka Brigitte., 2003, CMUCS03185 DEP COMP
   Pollack R., 1990, P 1 WORKSHOP LOGICAL, P421
   Poswolsky A, 2008, LECT NOTES COMPUT SC, V4960, P93
   Poswolsky A, 2009, ELECTRON NOTES THEOR, V228, P113, DOI 10.1016/j.entcs.2008.12.120
   Reed J., 2004, ELECT NOTES THEORETI, V199, P89
   Reed Jason., 2009, P 4 INT WORKSHOP LOG, P49
   SCHURMANN C, 2003, P 16 INT C THEOR PRO, V2758, P120
   VIRGA R, 1999, CMUCS99167 DEP MATH
   Watkins K., 2002, TECHNICAL REPORT
NR 39
TC 7
Z9 9
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD JAN
PY 2013
VL 23
IS 1
BP 1
EP 37
DI 10.1017/S0956796812000408
PG 37
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 048QS
UT WOS:000311928200001
OA Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Oliveira, BCDS
   Schrijvers, T
   Cook, WR
AF Oliveira, Bruno C. D. S.
   Schrijvers, Tom
   Cook, William R.
TI MRI: Modular reasoning about interference in incremental programming
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID ADVICE; LANGUAGES; MONADS
AB Incremental Programming (IP) is a programming style in which new program components are defined as increments of other components. Examples of IP mechanisms include Object-oriented programming inheritance, aspect-oriented programming advice, and feature-oriented programming. A characteristic of IP mechanisms is that, while individual components can be independently defined, the composition of components makes those components become tightly coupled, sharing both control and data flows. This makes reasoning about IP mechanisms a notoriously hard problem: modular reasoning about a component becomes very difficult; and it is very hard to tell if two tightly coupled components interfere with each other's control and data flows. This paper presents modular reasoning about interference (MRI), a purely functional model of IP embedded in Haskell. MRI models inheritance with mixins and side effects with monads. It comes with a range of powerful reasoning techniques: equational reasoning, parametricity, and reasoning with algebraic laws about effectful operations. These techniques enable MRI in the presence of side effects. MRI formally captures harmlessness, a hard-to-formalize notion in the interference literature, in two theorems. We prove these theorems with a non-trivial combination of all three reasoning techniques.
C1 [Oliveira, Bruno C. D. S.] Natl Univ Singapore, Sch Comp, Singapore 117548, Singapore.
   [Schrijvers, Tom] Univ Ghent, Dept Appl Math & Comp Sci, B-9000 Ghent, Belgium.
   [Cook, William R.] Univ Texas Austin, Dept Comp Sci, Univ Stn, Austin, TX 78712 USA.
C3 National University of Singapore; Ghent University; University of Texas
   System; University of Texas Austin
RP Oliveira, BCDS (corresponding author), Natl Univ Singapore, Sch Comp, Singapore 117548, Singapore.
EM oliveira@comp.nus.edu.sg; tom.schrijvers@ugent.be; wcook@cs.utexas.edu
RI Schrijvers, Tom/A-6696-2016; Cook, William/JFK-1866-2023; dos Santos
   Oliveira, Bruno Cesar/I-7977-2013
OI Schrijvers, Tom/0000-0001-8771-5559; Cook, William/0000-0003-4918-8975
FU Engineering Research Center of Excellence Program of Korea Ministry of
   Education, Science and Technology (MEST)/Korea Science and Engineering
   Foundation (KOSEF) [R11-2008-007-01002-0]; Mid-Career Researcher Program
   through NRF [2010-0022061]; MEST; Portugal-UT Austin CoLab program
FX Bruno Oliveira was supported by the Engineering Research Center of
   Excellence Program of Korea Ministry of Education, Science and
   Technology (MEST)/Korea Science and Engineering Foundation (KOSEF) grant
   number R11-2008-007-01002-0, the Mid-Career Researcher Program
   (2010-0022061) through NRF grant funded by the MEST, and by a grant from
   the Portugal-UT Austin CoLab program.
CR Aldrich J, 2005, LECT NOTES COMPUT SC, V3586, P144
   [Anonymous], 1974, LNCS
   [Anonymous], 1992, 19th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, DOI DOI 10.1145/143165.143169
   [Anonymous], 1998, P 25 ACM SIGPLAN SIG, DOI DOI 10.1145/268946.268961
   Bagherzadeh M., 2011, Proceedings of the Tenth International Conference on Aspect-oriented Software Development, AOSD '11, P141
   Bird R. S., 1997, INT SERIES COMPUTING, V100
   Bracha Gilad, 1990, P EUR C OBJ OR PROGR, P303, DOI [10.1145/97945.97982, DOI 10.1145/97945.97982]
   Chen K., 2011, HIGHER ORDER SYMB CO, V24, P1
   Chen K, 2007, LECT NOTES COMPUT SC, V4634, P34
   Clifton C., 2002, P FDN ASP OR LANG FO, P33
   Clifton C, 2007, LECT NOTES COMPUT SC, V4609, P451
   Cook W., 1989, C P OBJ OR PROGR SYS, P433
   Cook W. R., 1989, THESIS BROWN U PROVI
   DAHL OJ, 1966, COMMUN ACM, V9, P671, DOI 10.1145/365813.365819
   Dantas DS, 2008, ACM T PROGR LANG SYS, V30, DOI 10.1145/1353445.1353448
   Dantas DS, 2006, ACM SIGPLAN NOTICES, V41, P383, DOI 10.1145/1111320.1111071
   De Fraine B, 2007, LECT NOTES COMPUT SC, V4829, P176
   Douence R., 2004, C SPED ORIENTED SOFT, P141
   Dutchyn C, 2006, SCI COMPUT PROGRAM, V63, P207, DOI 10.1016/j.scico.2006.01.003
   Gibbons J, 2011, ACM SIGPLAN NOTICES, V46, P2, DOI 10.1145/2034574.2034777
   Hughes J, 2000, SCI COMPUT PROGRAM, V37, P67, DOI 10.1016/S0167-6423(99)00023-4
   Hutton G., 2008, P S TRENDS FUNCT PRO
   Jaskelioff M., 2008, P 20 INT C IMPL APPL, P233, DOI DOI 10.1007/978-3-642-24452-013,HTTPS
   Jones MP, 2000, LECT NOTES COMPUT SC, V1782, P230
   Jones SP, 2007, J FUNCT PROGRAM, V17, P1, DOI 10.1017/S0956796806006034
   Katz S, 2006, LECT NOTES COMPUT SC, V3880, P106
   KATZ S, 1993, ACM T PROGR LANG SYS, V15, P337, DOI 10.1145/169701.169682
   Kiczales G, 2005, PROC INT CONF SOFTW, P49
   KICZALES G, 1997, P EUR C OBJ OR PROGR, V1241, P220
   Kiczales G, 1992, P C OBJ OR PROGR SYS, P435
   Lamping J., 1993, P OOPSLA 93, P201
   Leino KRM, 1998, ACM SIGPLAN NOTICES, V33, P144, DOI 10.1145/286942.286953
   Lewis JeffreyR., 2000, POPL 2000, Proceedings of the 27th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, Boston, Massachusetts, USA, January 19-21, P108, DOI [DOI 10.1145/325694.325708, 10.1145/ 325694 . 325708]
   Liang S., 1996, P 6 EUR S PROGR APR, P219
   Liang Sheng, 1995, P 22 ACM SIGPLAN SIG, P333, DOI DOI 10.1145/199448.199528
   Ligatti J, 2006, SCI COMPUT PROGRAM, V63, P240, DOI 10.1016/j.scico.2006.01.004
   Lopez-Herrejon Roberto., 2006, Proceedings of the 2006 ACM SIGPLAN symposium on Partial evaluation and semantics-based program manipulation (New York, NY, USA), PEPM '06, P68
   Masuhara H, 2005, ACM SIGPLAN NOTICES, V40, P320, DOI 10.1145/1090189.1086405
   Mcbride C, 2008, J FUNCT PROGRAM, V18, P1, DOI 10.1017/S0956796807006326
   Müller P, 2003, CONCURR COMP-PRACT E, V15, P117, DOI 10.1002/cpe.713
   OLIVEIRA BCD, 2010, P 9 ACM INT C ASP OR, P109
   Prehofer C, 1997, LECT NOTES COMPUT SC, V1241, P419
   Prehofer C., 1999, THESIS TU MUNCHEN
   Prehofer C., 2006, P 5 INT C GEN PROGR, P237
   Reynolds J. C., 1983, P IFIP C, V83, P513
   Rinard M., 2004, ACM SIGSOFT SOFTW EN, V29, P147
   Ruby C, 2000, ACM SIGPLAN NOTICES, V35, P208, DOI 10.1145/354222.353186
   Salcianu A, 2005, LECT NOTES COMPUT SC, V3385, P199
   Schrijvers T, 2011, ACM SIGPLAN NOTICES, V46, P32, DOI 10.1145/2034574.2034781
   STATA R, 1995, SIGPLAN NOTICES, V30, P200, DOI 10.1145/217839.217861
   Tanter Eric, 2008, 7 INT C ASP OR SOFTW, P168, DOI [10.1145/1353482.1353503, DOI 10.1145/1353482.1353503]
   VOIGTLANDER J, 2009, P 14 ACM SIGPLAN INT, P173
   WADLER P, 1992, NATO ASI SERIES F, V118
   Wadler P., 1989, FPCA 89 P 4 INT C FU, P347
   Wang M, 2009, WGP'09: PROCEEDINGS OF THE 2009 ACM SIGPLAN WORKSHOP ON GENERIC PROGRAMMING, P37
NR 55
TC 6
Z9 6
U1 0
U2 5
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD NOV
PY 2012
VL 22
BP 797
EP 852
DI 10.1017/S0956796812000354
PN 6
PG 56
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 019GO
UT WOS:000309725700003
OA Green Published, Green Accepted, Bronze
DA 2024-07-18
ER

PT J
AU Bringert, B
   Ranta, A
AF Bringert, Bjorn
   Ranta, Aarne
TI A pattern for almost compositional functions
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB This paper introduce a pattern for almost compositional functions over recursive data types, and over families Of mutually recursive data types. Here "almost compositional" means that for all of the constructors in the type(s), except a limited number of them, the result of the function depends only oil the constructor and the results of calling the function oil the constructor's arguments. The pattern consists of a generic part constructed once for each data type or family of data types. and a task-specific part. The generic; part contains the code for the predictable compositional cases, leaving the interesting work to the task-specific part. Examples of the pattern are given, implemented in dependent type theory with inductive families. in Haskell with generalized algebraic data types and rank-2 polymorphism. and in Java using a variant of the Visitor design pattern. The relationships to the "Scrap Your Boilerplate" approach to generic programming. and to general tree types in dependent type theory. are investigated by reimplementing our operations using those frameworks.
C1 [Bringert, Bjorn] Chalmers Univ Technol, Dept Comp Sci & Engn, SE-41296 Gothenburg, Sweden.
   Univ Gothenburg, SE-41296 Gothenburg, Sweden.
C3 Chalmers University of Technology; University of Gothenburg
RP Bringert, B (corresponding author), Chalmers Univ Technol, Dept Comp Sci & Engn, SE-41296 Gothenburg, Sweden.
EM bringert@chalmers.se; aarne@chalmers.se
FU EU TALK project [IST-507802]
FX We would like to thank the following people for their comments on
   earlier versions of this work: Thierry Coquand, Bengt Nordstrom, Patrik
   Jansson, Josef Svenningsson. Sibylle Schupp. Marcin Zalewski, Andreas
   Priesnitz, Markus Forsberg, Alejandro Russo, Thomas Schilling, Andres
   Loh, the anonymous ICFP and IFP referees, and everyone who offered
   comments during the talks at the Chalmers CS Winter Meeting, at Galois
   Connections, and at ICFP 2006. The code in this paper has been typeset
   using lhs2TeX, with the help from Andres Loh and Jeremy Gibbons. This
   work has been partly funded by the EU TALK project, IST-507802.
CR ANDREI A, 2001, MODERN C DESIGN GENE
   Appel A.W., 2002, MODERN COMPILER IMPL, V2nd
   Appel AndrewW., 1997, MODERN COMPILER IMPL
   Augustsson Lennart., 1994, Silly Type Families * DRAFT
   Bracha G, 1998, ACM SIGPLAN NOTICES, V33, P183, DOI 10.1145/286942.286957
   BRINGERT B, 2006, TRANSFER PROGRAMMING
   COQUAND C, 1999, WORKSH LOG FRAM MET
   Dybjer P., 1994, Formal Aspects of Computing, V6, P440, DOI 10.1007/BF01211308
   Forsberg M., 2007, THESIS GOTEBORG U
   Gamma Erich, 1995, DESIGN PATTERNS ELEM
   GIBBONS J, 2006, WORKSH MATH STRUCT F
   Gibbons Jeremy., 2007, LECT NOTES COMPUTER, V4719
   Gosling J., 2005, Java Language Specification, Vthird
   Hinze R, 2004, ACM SIGPLAN NOTICES, V39, P236, DOI 10.1145/1016848.1016882
   Hinze R, 2006, LECT NOTES COMPUT SC, V3945, P13
   Jansson P., 1997, POPL 1997, P470
   Jones M. P., 1995, Advanced Functional Programming. First International Spring School on Advanced Functional Programming Techniques. Tutorial Text, P97
   Jones Simon L. Peyton, 2006, P 11 ACM SIGPLAN INT, P50, DOI [DOI 10.1145/1160074.1159811, 10.1145/1159803.1159811, DOI 10.1145/1159803.1159811]
   Jones SP, 2007, J FUNCT PROGRAM, V17, P1, DOI 10.1017/S0956796806006034
   Jones Simon Peyton, 2003, Journal of Functional Programming, V13, P1
   Jones SP, 2003, J FUNCT PROGRAM, V13, pVII
   JONES SP, 2007, GHC COMMENTARY
   LAMMEL R, 2003, P ACM SIGPLAN WORKSH
   Lee L., 2002, BOOST GRAPH LIB USER
   Leivant D., 1983, C REC 10 ANN ACM S P, P88, DOI [10.1145/567067.567077, DOI 10.1145/567067.567077]
   Martin-Lof P., 1984, Intuitionistic type theory
   Mcbride C, 2008, J FUNCT PROGRAM, V18, P1, DOI 10.1017/S0956796807006326
   MITCHELL N, 2007, DATA DERIVE USER MAN
   Nordstrom B., 1990, PROGRAMMING MARTINLO
   Norell Ulf, 2007, Towards a practical programming language based on dependent type theory
   PETERSSON K, 1989, LECT NOTES COMPUT SC, V389, P128
   Ranta A, 2004, J FUNCT PROGRAM, V14, P145, DOI 10.1017/S0956796803004738
   Sarkar D, 2005, J FUNCT PROGRAM, V15, P653, DOI 10.1017/S0956796805005605
   Sheard T, 2004, J FUNCT PROGRAM, V14, P547, DOI 10.1017/S095679680300488X
   Sheard T, 2002, ACM SIGPLAN NOTICES, V37, P60, DOI 10.1145/636517.636528
   Visser J, 2001, ACM SIGPLAN NOTICES, V36, P270, DOI 10.1145/504311.504302
   WADLER P, 1990, THEOR COMPUT SCI, V73, P231, DOI 10.1016/0304-3975(90)90147-A
   [No title captured]
NR 38
TC 5
Z9 5
U1 0
U2 1
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD SEP-NOV
PY 2008
VL 18
BP 567
EP 598
DI 10.1017/S0956796808006898
PN 5-6
PG 32
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 375KD
UT WOS:000261111700002
OA Bronze
DA 2024-07-18
ER

PT J
AU Aspinall, D
   Hofmann, M
   Konecny, M
AF Aspinall, David
   Hofmann, Martin
   Konecny, Michal
TI A type system with usage aspects
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB Linear typing schemes can be used to guarantee non-interference and so the soundness of in-place update with respect to a functional semantics. But linear schemes are restrictive in practice, and more restrictive than necessary to guarantee soundness of in-place update. This limitation has prompted research into static analysis and more sophisticated typing disciplines to determine when in-place update may be safely used, or to combine linear and non-linear schemes. Here we contribute to this direction by defining a new typing scheme that better approximates the semantic property of soundness of in-place update for a functional semantics. We begin from the observation that some data are used only in a "read-only" context, after which it may be safely re-used before being destroyed. Formalising the in-place update interpretation in a machine model semantics allows us to refine this observation, motivating three usage aspects apparent from the semantics that are used to annotate function argument types. The aspects are (1) used destructively, (2), used read-only but shared with result, and (3) used read-only and not shared with the result. The main novelty is aspect (2), which allows a linear value to be safely read and even aliased with a result of a function without being consumed. This novelty makes our type system more expressive than previous systems for functional languages in the literature. The system remains simple and intuitive, but it enjoys a strong soundness property whose proof is non-trivial. Moreover, our analysis features principal types and feasible type reconstruction, as shown in M. Konecny (in TYPES 2002 workshop, Nijmegen, Proceedings, Springer-Verlag, 2003).
C1 [Aspinall, David] LFCS Edinburgh, Edinburgh EH9 3JZ, Midlothian, Scotland.
   [Hofmann, Martin] Inst Informat, D-80538 Munich, Germany.
   [Konecny, Michal] Aston Univ, Birmingham B4 7ET, W Midlands, England.
C3 University of Edinburgh; Aston University
RP Aspinall, D (corresponding author), LFCS Edinburgh, Mayfield Rd, Edinburgh EH9 3JZ, Midlothian, Scotland.
EM David.Aspinall@ed.ac.uk; mhofmann@informatik.uni-muenchen.de;
   m.konecny@aston.ac.uk
RI Konečný, Michal/HKE-0581-2023
OI Konecny, Michal/0000-0003-2374-9017
CR AIKEN A, 2003, PLDI 03, P129
   Aspinall D, 2003, J AUTOM REASONING, V31, P261, DOI 10.1023/B:JARS.0000021014.79255.33
   ASPINALL D, 2002, PROGRAMMING LANGUAGE
   ASPINALL D, 2003, TYPE SYSTEMS RESOURC
   Barendsen E., 1996, Mathematical Structures in Computer Science, V6, P579
   Boyland J, 2003, LECT NOTES COMPUT SC, V2694, P55
   CRARY K, 1999, P 26 ACM SIGPLAN SIG, P262
   Dor N, 2000, LECT NOTES COMPUT SC, V1824, P115
   DRAGHICESCU M, 1993, THEOR COMPUT SCI, V118, P231, DOI 10.1016/0304-3975(93)90110-F
   FAHNDRICH M, 2002, PLDI 02, P13
   Gifford D. K., 1986, LFP 86, P28
   Hofman M., 2000, Nordic Journal of Computing, V7, P258
   HOFMANN M, 2003, 30 ACM S PRINC PROG, P185
   ISHTIAQ S, 2001, 28 ACM S PRINC PROGR, P14
   KOBAYASHI N, 1998, 9802 U TOKY DEP INF
   KOBAYASHI N, 1999, 26 ACM SIGPLAN SIGAC, P29
   Konecny M, 2003, LECT NOTES COMPUT SC, V2701, P195
   KONECNY M, 2003, TYPES 2002 WORKSH NI, P182
   MacKenzie K., 2004, TRENDS FUNCTIONAL PR, V4, P29
   ODERSKY M, 1992, LECT NOTES COMPUT SC, V582, P390
   OHEARN PW, 1995, MFPS 11, V1
   PEYTON JS, 2000, P 3 ACM SIGPLAN WORK
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Reynolds JohnC., 1978, Proceedings of the 5th ACM SIGACT-SIGPLAN Symposium on Principles of Programming Languages. POPL'78. event-place: Tucson, P39, DOI DOI 10.1145/512760.512766
   Sabry A., 1993, LISP and Symbolic Computation, V6, P289, DOI 10.1007/BF01019462
   SHANKAR N, 1999, EFFICIENTLY EXECUTIN
   Smith F, 2000, LECT NOTES COMPUT SC, V1782, P366
   TALPIN JP, 1994, INFORM COMPUT, V111, P245, DOI 10.1006/inco.1994.1046
   Tofte M, 1997, INFORM COMPUT, V132, P109, DOI 10.1006/inco.1996.2613
   WADLER P, 1990, IFIP TC 2 WORK C PRO, P561
   Walker D., 2001, Types in Compilation. Third International Workshop, TIC 2000. Revised Selected Papers (Lecture Notes in Computer Science Vol.2071), P177
   Wand M, 1998, 1998 INTERNATIONAL CONFERENCE ON COMPUTER LANGUAGES, PROCEEDINGS, P184, DOI 10.1109/ICCL.1998.674169
   Wilhelm R, 2000, LECT NOTES COMPUT SC, V1781, P1
   YANG H, 1997, UNPUB IMPERATIVE LAM
   [No title captured]
NR 35
TC 5
Z9 5
U1 0
U2 4
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD MAR
PY 2008
VL 18
BP 141
EP 178
DI 10.1017/S0956796807006399
PN 2
PG 38
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 282BD
UT WOS:000254541700001
OA Bronze, Green Submitted, Green Accepted
DA 2024-07-18
ER

PT J
AU Sewell, P
   Leifer, JJ
   Wansbrough, K
   Nardelli, FZ
   Allen-Williams, M
   Habouzit, P
   Vafeiadis, V
AF Sewell, Peter
   Leifer, James J.
   Wansbrough, Keith
   Nardelli, Francesco Zappa
   Allen-Williams, Mair
   Habouzit, Pierre
   Vafeiadis, Viktor
TI Acute: High-level programming language design for distributed
   computation
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 10th ACM SIGPLAN International Conference on Functional Programming
   (ICFP)
CY SEP 26-28, 2005
CL Tallinn, ESTONIA
SP ACM SIGPLAN
AB Existing languages provide good support for typeful programming of stand-alone programs. In a distributed system, however, there may be interaction between multiple instances of many distinct programs, sharing some (but not necessarily all) of their module structure, and with some instances rebuilt with new versions of certain modules as time goes on. In this paper, we discuss programming-language support for such systems, focussing on their typing and naming issues. We describe an experimental language, Acute, which extends an ML core to support distributed development, deployment, and execution, allowing type-safe interaction between separately built programs. The main features are (1) type-safe marshalling of arbitrary values; (2) type names that are generated (freshly and by hashing) to ensure that type equality tests suffice to protect the invariants of abstract types, across the entire distributed system; (3) expression-level names generated to ensure that name equality tests suffice for type safety of associated values, for example, values carried on named channels; (4) controlled dynamic rebinding of marshalled values to local resources; and (5) thunkification of threads and mutexes to support computation mobility. These features are a large part of what is needed for typeful distributed programming. They are a relatively lightweight extension of ML, should be efficiently implementable, and are expressive enough to enable a wide variety of distributed infrastructure layers to be written as simple library code above the byte-string network and persistent store APIs. This disentangles the language run-time from communication intricacies. This paper highlights the main design choices in Acute. It is supported by a full language definition (of typing, compilation, and operational semantics), by a prototype implementation, and by example distribution libraries.
C1 Univ Cambridge, Cambridge, England.
   INRIA Rocquencourt, Le Chesnay, France.
C3 University of Cambridge
RP Sewell, P (corresponding author), Univ Cambridge, Cambridge, England.
EM Peter.Sewell@cl.cam.ac.uk
RI Vafeiadis, Viktor/B-5809-2014
OI Vafeiadis, Viktor/0000-0001-8436-0334; Sewell, Peter/0000-0001-9352-1013
CR *AC TEAM, 2005, ACUTE
   [Anonymous], UCAMCLTR618 U CAMBR
   Armstrong Joe, 1996, Concurrent Programming in Erlang
   BENTON N, 2002, P 16 EUR C OBJ ORIEN, V2374, P415
   BIERMAN G, 2003, P 8 ACM SIGPLAN INT, P99
   BILLINGS J, 2005, THESIS U CAMBRIDGE E
   BILLINGS J, 2006, P ML O6 2006 ACM SIG, P20
   BOUDOL G, 2003, P EUR S PROGR ESOP 0, V2986
   Buckley A, 2005, ELECTRON NOTES THEOR, V141, P75, DOI 10.1016/j.entcs.2005.02.036
   Cardelli L, 1998, LECT NOTES COMPUT SC, V1378, P140, DOI 10.1007/BFb0053547
   Cardelli Luca., 1995, POPL'95: Proceedings of the 22nd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages; 1995 Jan 23-25; San Francisco, P286, DOI DOI 10.1145/199448.199516
   Conchon S., 1999, First International Symposium on Agent Systems and Applications/Third International Symposium on (Cat No.PR00340), P22, DOI 10.1109/ASAMA.1999.805390
   DENIELOU PM, 2006, P 11 ICFP
   *DOT03, 2003, PACK DEPL NET FRAM A
   Drossopoulou S., 1999, Proceedings. 14th Symposium on Logic in Computer Science (Cat. No. PR00158), P147, DOI 10.1109/LICS.1999.782606
   Fournet C., 1996, LECT NOTES COMPUTER, V1119, P406
   FURUSE J, 2000, P JOURN FRANC LANG A, P79
   Grossman D, 2000, ACM T PROGR LANG SYS, V22, P1037, DOI 10.1145/371880.371887
   Harper R, 2000, FOUNDAT COMPUT, P341
   Harper R., 1994, PRINCIPLES PROGRAMMI, P123, DOI [DOI 10.1145/174675.176927, 10.1145/174675.176927]
   Harper Robert., 2005, Advanced Topics in Types and Programming Languages, chapter Design Considerations for ML-Style Module Systems
   Hennessy M, 2004, LECT NOTES COMPUT SC, V2987, P241
   HEYDON A, 2006, SOFTWARE CONFIGUATIO
   Hosoya Haruo, 1999, Technical Report
   LEBOTLAN D, 2003, P 8 ACM SIGPLAN INT, P27, DOI DOI 10.1145/944705.944709
   Lee Daniel K., 2007, POPL 2007. The 34th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P173, DOI 10.1145/1190216.1190245
   LEFESSANT F, 2001, P PRINC DISTR COMP P
   LEIFER JJ, 2003, RR4851 INRIA
   LEIFER JJ, 2003, P 8 ACM SIGPLAN INT, P87
   LEROY X, 1994, P ACM S PRINC PROGR, P109
   Milner R., 1990, The Definition of Standard ML
   Murphy T, 2004, IEEE S LOG, P286, DOI 10.1109/LICS.2004.1319623
   Odersky M, 2001, ACM SIGPLAN NOTICES, V36, P41, DOI 10.1145/373243.360207
   Ohori Atsushi., 1993, ACM SIGPLAN SIGACT S, P99
   PESKINE G, THESIS HOS
   Pierce BC, 2000, FOUNDAT COMPUT, P455
   PIERCE BC, 1998, P POPL FULL VERS ACM, V22, P1
   Rémy D, 2002, LECT NOTES COMPUT SC, V2395, P413
   Reppy JohnH., 1999, CONCURRENT PROGRAMMI
   Rossberg A., 2006, TRENDS FUNCTIONAL PR, V5, P79
   Rossberg Andreas., 2003, PPDP '03, P241, DOI DOI 10.1145/888251.888274
   SEKIGUCHI T, 1997, P 2 IFIP INT C FORM, P21
   Sewell P, 1999, LECT NOTES COMPUT SC, V1686, P1
   SEWELL P, 2005, P ICFP 2005 INT C FU
   SEWELL P, 2000, FORMAL METHODS DISTR, pCH9
   SEWELL P, 2001, P 28 ACM SIGPLAN SIG, P236
   SEWELL P, 2005, SOURCE RELEASE ACUTE
   Sewell P. E., 2004, 605 U CAMBR COMP LAB
   SHINWELL MR, 2003, P 8 ACM SIGPLAN INT, P263
   STOYLE G, 2006, THESIS U CAMBRIDGE C
   THOMSEN B, 1996, P CONC THEOR CONCUR, V1119, P278
   UNYAPOTH A, 2001, P POPL 01, P116
   WEIRICH S, 2002, THESIS CORNELL U ITH
NR 53
TC 22
Z9 27
U1 2
U2 3
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD JUL-SEP
PY 2007
VL 17
BP 547
EP 612
DI 10.1017/S0956796807006442
PN 4-5
PG 66
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 208VY
UT WOS:000249348500004
OA Bronze, Green Accepted
DA 2024-07-18
ER

PT J
AU Sulzmann, M
   Duck, GJ
   Peyton-Jones, S
   Stuckey, PJ
AF Sulzmann, Martin
   Duck, Gregory J.
   Peyton-Jones, Simon
   Stuckey, Peter J.
TI Understanding functional dependencies via constraint handling rules
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID INFERENCE
AB Functional dependencies are a popular and useful extension to Haskell style type classes. We give a reformulation of functional dependencies in terms of Constraint Handling Rules (CHRs). In previous work, CHRs have been employed for describing user-programmable type extensions in the context of Haskell style type classes. Here, we make use of CHRs to provide for the first time a concise result that under some sufficient conditions, functional dependencies allow for sound, complete and decidable type inference. The sufficient conditions imposed on functional dependencies can be very limiting. We show how to safely relax these conditions and Suggest several sound extensions of functional dependencies. Our results allow for a better understanding of functional dependencies and open up the opportunity for new applications.
C1 Natl Univ Singapore, Sch Comp, Singapore 117543, Singapore.
   Univ Melbourne, Dept Comp Sci & Software Engn, NICTA Victoria Lab, Parkville, Vic 3010, Australia.
   Microsoft Res Ltd, Cambridge CB3 0FB, England.
C3 National University of Singapore; University of Melbourne; Microsoft
RP Sulzmann, M (corresponding author), Natl Univ Singapore, Sch Comp, S16 Lerel 5,3 Sci Dr 2, Singapore 117543, Singapore.
EM sulzmann@comp.nus.edu.sg; gjd@cs.mu.oz.au; simonpj@microsoft.com;
   pjs@cs.mu.oz.au
OI Duck, Gregory/0000-0002-0837-9671; Stuckey, Peter/0000-0003-2186-0459
CR Abdennadher S, 1997, LECT NOTES COMPUT SC, V1330, P252, DOI 10.1007/BFb0017444
   [Anonymous], 2005, P GT2005 ASME TURB E
   [Anonymous], 1983, The theory of relational databases
   ARMSTRONG WW, 1974, P IFIP, V74, P580
   CHAKRAVARTY M, 2005, P ICFP 05, P241
   Chen Kung., 1992, Proceedings of the 1992 ACM Conference on LISP and Functional Programming, P170
   Duck GJ, 2004, LECT NOTES COMPUT SC, V2986, P49
   Duggan D, 2002, J FUNCT PROGRAM, V12, P133, DOI 10.1017/S0956796801004233
   Fruhwirth T, 1998, J LOGIC PROGRAM, V37, P95, DOI 10.1016/S0743-1066(98)10005-5
   Fruhwirth T., 2000, New Trends in Constraints. Joint ERCIM/Compulog Net Workshop. Selected Papers (Lecture Notes in Artificial Intelligence Vol. 1865), P298
   Fruhwirth TW, 1994, LECT NOTES COMPUTER, V910, P90
   *GHC, 2005, GLASG HASK COMP HOM
   *HUGS, 2005, HUGS HOM PAG
   Jones M.P., 1993, Technical Report YALEU/DCS/RR- 989
   Jones MP, 2000, LECT NOTES COMPUT SC, V1782, P230
   JONES MP, 1992, THESIS OXFORD U
   JONES MP, 1995, FPCA 95 C FUNCT PROG, P160
   Kiselyov Oleg, 2004, HASKELL 04, P96, DOI DOI 10.1145/1017472.1017488
   LASSEZ JL, 1987, F DEDUCTIVE DATABASE, P587
   Odersky M, 1999, THEOR PRACT OBJ SYST, V5, P35, DOI 10.1002/(SICI)1096-9942(199901/03)5:1<35::AID-TAPO4>3.0.CO;2-4
   Ohori A, 1995, ACM T PROGR LANG SYS, V17, P844, DOI 10.1145/218570.218572
   Shoenfield J.R., 1967, MATH LOGIC
   Stuckey P. J., 2005, ACM T PROGR LANG SYS, V27, P1
   SULZMANN M, 2000, THESIS YALE U
NR 24
TC 34
Z9 35
U1 0
U2 4
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD JAN
PY 2007
VL 17
BP 83
EP 129
DI 10.1017/S0956796806006137
PN 1
PG 47
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 133MO
UT WOS:000244017200002
OA Bronze
DA 2024-07-18
ER

PT J
AU Gustafsson, P
   Sagonas, K
AF Gustafsson, P
   Sagonas, K
TI Efficient manipulation of binary data using pattern matching
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB Pattern matching is an important operation in functional programs. So far, pattern matching has been investigated in the context of structured terms. This article presents an approach to extend pattern matching to terms without (much of a) structure such as binaries which is the kind of data format that network applications typically manipulate. After introducing the binary datatype and a notation for matching binary data against patterns, we present an algorithm that constructs a decision tree automaton from a set of binary patterns. We then show how the pattern matching using this tree automaton can be made adaptive, how redundant tests can be avoided, and how we can further reduce the size of the resulting automaton by taking interferences between patterns into account. Since the size of the tree automaton is exponential in the worst case, we also present an alternative new approach to compiling binary pattern matching which is conservative in space and analyze its complexity properties. The effectiveness of our techniques is evaluated using standard packet filter benchmarks and on implementations of network protocols taken from actual telecom applications.
C1 Uppsala Univ, Dept Informat Technol, S-75105 Uppsala, Sweden.
C3 Uppsala University
RP Uppsala Univ, Dept Informat Technol, S-75105 Uppsala, Sweden.
EM pergu@it.uu.se; kostis@it.uu.se
RI Sagonas, Konstantinos/IZD-8641-2023; Gustafsson, Per/AAY-5068-2021
OI Sagonas, Konstantinos/0000-0001-9657-0179; 
CR AUGUSTSSON L, 1985, LECT NOTES COMPUT SC, V201, P368
   BABOESCU F, 2001, P ACM SIGCOMM, P199
   BAUDINET M, 1985, UNPUB TREE PATTERN M
   Begel A, 1999, COMP COMM R, V29, P123, DOI 10.1145/316194.316214
   BILEY ML, 1994, P 1 USENIX S OP SYST, P115
   ENGLER DR, 1996, P ACM SIGCOMM 96 C C, P53
   Gupta P, 2001, IEEE NETWORK, V15, P2
   Gupta P, 2000, IEEE MICRO, V20, P34, DOI 10.1109/40.820051
   GUSTAFSSON P, 2002, P ACM SIGPLPLAN ERL, P6
   Hyafil L., 1976, Information Processing Letters, V5, P15, DOI 10.1016/0020-0190(76)90095-8
   LAKSHMAN TV, 1998, P ACM SIGCOMM, P203
   LEFESSANT F, 2001, P 6 ACM SIGPLAN INT, P26
   McCann PeterJ., 2000, P ACM SIGCOMM C, P321
   NYBLOM P, 2000, P 6 INT ERL OTP US C
   SCOTT K, 2000, CS200013 U VIRG DEPT
   SEKAR RC, 1995, SIAM J COMPUT, V24, P1207, DOI 10.1137/S0097539793246252
   Srinivasan V, 1999, COMP COMM R, V29, P135, DOI 10.1145/316194.316216
   TAYLOR DE, 2004, THESIS SEVER I WASHI
   Wadler P., 1987, IMPLEMENTATION FUNCT, P78, DOI [DOI 10.1016/0141-9331(87)90510-2, 10.1016/0141-9331(87)90510-2]
   WALLACE M, 1998, P ACM SIGPLAN ISMM, P107
   WIKSTROM C, 1999, P 5 INT ERL OTP US C
NR 21
TC 5
Z9 5
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD JAN
PY 2006
VL 16
BP 35
EP 74
DI 10.1017/S0956796805005745
PN 1
PG 40
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 008WL
UT WOS:000235071300004
OA Bronze
DA 2024-07-18
ER

PT J
AU Grelck, C
AF Grelck, C
TI Shared memory multiprocessor support for functional array processing in
   SAC
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID PRACTICAL SCHEDULING SCHEME; PARALLEL LOOPS; IMPLEMENTATION; LANGUAGE;
   SYNCHRONIZATION; OPERATIONS; SKELETONS; AFFINITY
AB Classical application domains of parallel computing are dominated by processing large arrays of numerical data. Whereas most functional languages focus on lists and trees rather than on arrays, SAC is tailor-made in design and in implementation for efficient high-level array processing. Advanced compiler optimizations yield performance levels that are often competitive with low-level imperative implementations. Based on SAC, we develop compilation techniques and runtime system support for the compiler-directed parallel execution of high-level functional array processing code on shared memory architectures. Competitive sequential performance gives us the opportunity to exploit the conceptual advantages of the functional paradigm for achieving real performance gains with respect to existing imperative implementations, not only in comparison with uniprocessor runtimes. While the design of SAC facilitates parallelization, the particular challenge of high sequential performance is that realization of satisfying speedups through parallelization becomes substantially more difficult. We present an initial compilation scheme and multi-threaded execution model, which we stepwise refine to reduce organizational overhead and to improve parallel performance. We close with a detailed analysis of the impact of certain design decisions on runtime performance, based on a series of experiments.
C1 Med Univ Lubeck, Inst Softwaretech & Programmiersprachen, D-23538 Lubeck, Germany.
   Univ Lubeck, Inst Softwaretech & Programmiersprachen, D-23538 Lubeck, Germany.
C3 University of Lubeck; University of Lubeck
RP Med Univ Lubeck, Inst Softwaretech & Programmiersprachen, Ratzeburger Allee 160, D-23538 Lubeck, Germany.
EM grelck@isp.uni-luebeck.de
RI Grelck, Clemens/GYU-8487-2022
CR Achten P., 1995, Journal of Functional Programming, V5, P81, DOI 10.1017/S0956796800001258
   Adams J.C., 1997, FORTRAN 95 HDB COMPL
   [Anonymous], 2001, OPTIMIZING COMPILERS
   [Anonymous], 2003, Computer Architecture
   [Anonymous], 1992, 19th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, DOI DOI 10.1145/143165.143169
   BAILEY D, 1993, P 16 AUSTR COMP SCI, P387
   BAILEY DH, 1991, INT J SUPERCOMPUT AP, V5, P63, DOI 10.1177/109434209100500306
   Barendsen E, 1995, LECT NOTES COMPUT SC, V982, P189, DOI 10.1007/BFb0026821
   BERNECKY R, 1997, THESIS U TORONTO TOR
   BLELLOCH GE, 1994, J PARALLEL DISTR COM, V21, P4, DOI 10.1006/jpdc.1994.1038
   BLELLOCH GE, 1990, J PARALLEL DISTR COM, V8, P119, DOI 10.1016/0743-7315(90)90087-6
   BLELLOCH GE, 1996, COMM ACM, V39
   BRATVOLD TA, 1993, P IFL 93 5 INT WORKS, P23
   BREITINGER S, 1997, P C HIGH LEV PAR PRO
   BULCK T, 1994, LNCS, V854, P497
   CANN D, 1992, COMMUN ACM, V35, P81, DOI 10.1145/135226.135231
   CANN D, 1989, CS89108 LAWR LIV NAT
   CANN DC, 1995, IEEE T PARALL DISTR, V6, P229, DOI 10.1109/71.372771
   Chakravarty MMT, 2003, LECT NOTES COMPUT SC, V2638, P27
   Chamberlain B., 1998, IEEE COMPUTATIONAL S, V5
   COHEN W, 1994, TREE949 PURD U SCH E
   Cole M, 2004, PARALLEL COMPUT, V30, P389, DOI 10.1016/j.parco.2004.12.002
   Cole M, 1989, ALGORITHMIC SKELETON
   Cooper E., 1990, CMUCS90186
   Dagum L., 1998, IEEE T COMPUTATIONAL, V5
   DONGARRA JJ, 2003, P SUP C SC 03 PHOEN
   FEO JT, 1995, P HIGH PERF FUNCT CO, P35
   Gorlatch S, 1999, IPPS PROC, P492, DOI 10.1109/IPPS.1999.760522
   Grelck C, 2003, LECT NOTES COMPUT SC, V2763, P230
   Grelck C, 2000, LECT NOTES COMPUT SC, V1900, P620
   Grelck C, 1999, APL QUOTE QUAD, V29, P50, DOI 10.1145/312627.312719
   Grelck C, 2000, LECT NOTES COMPUT SC, V1868, P77
   Grelck C, 1999, LECT NOTES COMPUT SC, V1595, P38
   Grelck C., 1995, P WORKSH IMPL FUNCT, P30
   GRELCK C, 2004, LECT NOTES COMPUTER, V3145
   GRELCK C, 2002, P 1L INT PAR DISTR P, P38
   GRELCK C, 2003, P 21 INT MULT APPL 2, P478
   GRELCK C, 2001, THESIS U KIEL GERMAN
   Grelck Clemens, 2003, Parallel Processing Letters, V13, P401
   HAINES M, 1993, LECT NOTES COMPUTER, V694, P12
   HAMDAN M, 1999, P INT C PAR COMP PAR
   Hammes J., 1997, Journal of Functional Programming, V7, P103, DOI 10.1017/S0956796897002621
   Hammond K., 1994, First International Symposium on Parallel Symbolic Computation PASCO '94, P181
   Hammond K, 2000, LECT NOTES COMPUT SC, V1868, P181
   Han HS, 1998, INT J PARALLEL PROG, V26, P591, DOI 10.1023/A:1018724631720
   HARTEL PH, 1993, P C FUNCT PROGR LANG, P341
   HARTEL PH, 1996, J FUNCT PROGRAM, V6
   Hill JMD, 1998, PROCEEDINGS OF THE SIXTH EUROMICRO WORKSHOP ON PARALLEL AND DISTRIBUTED PROCESSING - PDP '98, P438, DOI 10.1109/EMPDP.1998.647231
   Hudak Paul., 1985, Proceedings of the 12th ACM SIGACT-SIGPLAN Symposium on Principles of Programming Languages. POPL'85. New Orleans, Louisiana, P300, DOI DOI 10.1145/318593.318660
   HUMMEL SF, 1992, COMMUN ACM, V35, P90, DOI 10.1145/135226.135232
   *IEEE, 1995, 994511990B ISOIEC IE
   *IEEE I, 1995, 10031C199K IEEE
   Jones S. Peyton, 1996, POPL 96, P295, DOI DOI 10.1145/237721.237794
   Kelly P, 1999, RESEARCH DIRECTIONS IN PARALLEL FUNCTIONAL PROGRAMMING, P305
   KOEBEL C, 1994, HIGH PERFORMANCE FOR
   KRUSKAL CP, 1985, IEEE T SOFTWARE ENG, V11, P1001, DOI 10.1109/TSE.1985.231547
   LI H, 1993, PROC INT CONF PARAL, P140
   Loidl HW, 1999, CONCURRENCY-PRACT EX, V11, P701, DOI 10.1002/(SICI)1096-9128(199910)11:12<701::AID-CPE443>3.0.CO;2-P
   Loveman D. B., 1993, IEEE Parallel & Distributed Technology: Systems & Applications, V1, P25, DOI 10.1109/88.219857
   MARKATOS EP, 1994, IEEE T PARALL DISTR, V5, P379, DOI 10.1109/71.273046
   Mcgraw J., 1985, SISAL: Streams and iteration in a single assignment language
   MICHAELSON G, 2001, PARALLEL ALGORITHMS, V16, P181
   NOCKER E, 1991, P 3 INT WORKSH PAR I, P351
   OBOYLE MFP, 1995, J PARALLEL DISTR COM, V29, P196, DOI 10.1006/jpdc.1995.1117
   Oldehoeft R, 1992, P 2 SISAL USERS C, P209
   OLDEHOEFT RR, 1986, LECT NOTES COMPUT SC, V237, P120
   POLYCHRONOPOULOS CD, 1987, IEEE T COMPUT, V36, P1425, DOI 10.1109/TC.1987.5009495
   Reppy J.H., 1991, PROC 1991 C PROGRAMM, P293, DOI [10.1145/113445.113470, DOI 10.1145/113445.113470]
   ROTH G, 1997, THESIS RICE U HOUSTO
   Scholz SB, 2003, J FUNCT PROGRAM, V13, P1005, DOI 10.1017/S0956796802004458
   Scholz SB, 1997, LECT NOTES COMPUT SC, V1268, P85
   SCHOLZ SB, 1998, LNCS, V1467, P72
   SCHOLZ SB, 1998, LNCS, V1595, P216
   Serrarens PR, 1997, LECT NOTES COMPUT SC, V1268, P125
   Serrarens PR, 1999, LECT NOTES COMPUT SC, V1595, P229
   SKEDZIELEWSKI SK, 1985, LECT NOTES COMPUT SC, V201, P17
   SQUILLANTE MS, 1993, IEEE T PARALL DISTR, V4, P131, DOI 10.1109/71.207589
   Tang P., 1986, Proceedings of the 1986 International Conference on Parallel Processing (Cat. No.86CH2355-6), P528
   Trinder Philip W., 1998, J FUNCTIONAL PROGRAM, V8, P23, DOI DOI 10.1017/S0956796897002967
   TRINDER PW, 1996, P 9 GLASG FUNCT PROG
   TRINDER PW, 1999, UNPUB IEEE T SOFTW E
   TSENG C, 1995, P 5 ACM SIGPLAN S PR, P144
   TSENG CW, 1993, THESIS RICE U HOUSTO
   TZEN TH, 1993, IEEE T PARALL DISTR, V4, P87, DOI 10.1109/71.205655
   van Groningen JHG, 1997, LECT NOTES COMPUT SC, V1268, P105
   Wolfe M.J., 1995, High Performance Compilers for Parallel Computing
   Yan Y, 1997, IEEE T PARALL DISTR, V8, P70, DOI 10.1109/71.569656
   Zima Hans., 1991, SUPERCOMPILERS PARAL
   ZORNER T, 1998, P 10 INT WORKSH IMPL, P27
   [No title captured]
NR 90
TC 29
Z9 31
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD MAY
PY 2005
VL 15
BP 353
EP 401
DI 10.1017/S0956796805005538
PN 3
PG 49
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 941QJ
UT WOS:000230229000002
OA Bronze
DA 2024-07-18
ER

PT J
AU Honda, K
   Yoshida, N
AF Honda, K
   Yoshida, N
TI Noninterference through flow analysis
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID SECURE INFORMATION-FLOW; CALCULUS; LINEARITY
AB This paper proposes new syntactic inference rules which can directly extract information flow in a given typed process in the pi-calculus. In the flow analysis, a flow in a process is captured as a chain of possible interactions which transform differences in behaviours from one Part of its interface to another part of its interface. Polarity in types plays a fundamental role in the analysis, which is elucidated via examples. We show that this inductive flow analysis can be used for giving simple proofs of noninterference in the secrecy analyses for the pi-calculus with linear/affine typing, including its concurrent, stateful extensions.
C1 Queen Mary Univ London, London E1 4NS, England.
   Univ London, Univ London Imperial Coll Sci Technol & Med, London, England.
C3 University of London; Queen Mary University London; University of
   London; Imperial College London
RP Queen Mary Univ London, Mile End Rd, London E1 4NS, England.
EM kohei@dcs.gmul.ac.uk; yoshida@doc.ic.ac.uk
RI Yoshida, Nobuko/AAL-6082-2020
OI Yoshida, Nobuko/0000-0002-3925-8557
CR ABADI M, 1999, P POPL99 ACM
   Abramsky S, 2000, INFORM COMPUT, V163, P409, DOI [10.1006/inco.2000.2930, 10.1006/inco2000.2930]
   AGAT J, 2000, P POPL00
   [Anonymous], P ACM S PRINC PROGR
   [Anonymous], 1992, MATH STRUCT COMP SCI, V2, P119, DOI DOI 10.1017/S0960129500001407
   ASPERTI A, 1994, LICS94
   Berger M, 2003, LECT NOTES COMPUT SC, V2620, P103
   Bergshoeff EA, 2001, J HIGH ENERGY PHYS
   Bodei C, 1998, LECT NOTES COMPUT SC, V1466, P84, DOI 10.1007/BFb0055617
   Bodei C, 1999, LECT NOTES COMPUT SC, V1578, P120
   DENNING D, 1997, COMMUN ACM, V20, P504
   FOCARDI R, 2000, LECT NOTES COMPUTER, V1853
   François P, 2002, P IEEE CSFW, P320, DOI 10.1109/CSFW.2002.1021826
   GIRARD JY, 1987, THEOR COMPUT SCI, V50, P1, DOI 10.1016/0304-3975(87)90045-4
   Goguen J. A., 1982, Proceedings of the 1982 Symposium on Security and Privacy, P11
   Heintze Nevin., 1998, P 25 ACM SIGPLAN SIG, P365, DOI [DOI 10.1145/268946.268976, 10.1145/268946.268976]
   Hennessy M, 2000, LECT NOTES COMPUT SC, V1853, P415
   HENNESSY M, 2003, P MFPS 19 MONTR CAN
   HONDA K, 1991, LECT NOTES COMPUT SC, V512, P133
   Honda K, 2002, ACM SIGPLAN NOTICES, V37, P81, DOI 10.1145/565816.503281
   Honda K, 1999, THEOR COMPUT SCI, V221, P393, DOI 10.1016/S0304-3975(99)00039-0
   Honda K, 2000, LECT NOTES COMPUT SC, V1782, P180
   HONDA K, 1996, POPL 96, P344
   HONDA K, 2004, P CW04
   HYLAND M, 2000, INFORM COMPUTATION, V163, P285
   Kobayashi N, 1999, ACM T PROGR LANG SYS, V21, P914, DOI 10.1145/330249.330251
   Laurent O, 2003, THEOR COMPUT SCI, V290, P161, DOI 10.1016/S0304-3975(01)00297-3
   LAURENT O, 2002, LICS02, P265
   LAURENT O, 2003, LICS, P11
   Mantel H., 2003, Journal of Computer Security, V11, P615
   MILNER R, 1992, INFORM COMPUT, V100, P1, DOI [10.1016/0890-5401(92)90008-4, 10.1016/0890-5401(92)90009-5]
   MILNER R, 1992, P INT SUMM SCH LOG A
   Nielson F., 1999, Principles of Program Analysis
   Pierce B., 1996, Mathematical Structures in Computer Science, V6, P409
   SABELFELD A, 1999, LECT NOTES COMPUTER, V1576
   Sangiorgi D, 1996, THEOR COMPUT SCI, V167, P235, DOI 10.1016/0304-3975(96)00075-8
   SMITH G, 2001, P CSFW01
   Smith Geoffrey., 1998, POPL'98, Proceedings of the 25th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, San Diego, CA, USA, January 19-21, P355, DOI [DOI 10.1145/268946.268975, 10.1145/268946.268975]
   VASCONCELOS VT, 1993, LECT NOTES COMPUTER, V715
   Volpano D., 1996, Journal of Computer Security, V4, P167
   WALKER D, 1995, INFORM COMPUT, V116, P253, DOI 10.1006/inco.1995.1018
   Winskel G., 1993, The Formal Semantics of Programming Languages
   Yoshida N, 2004, INFORM COMPUT, V191, P145, DOI 10.1016/j.ic.2003.08.004
   Yoshida N, 2002, LECT NOTES COMPUT SC, V2303, P417
   YOSHIDA N, 1996, LECT NOTES COMPUT SC, V1180, P371, DOI DOI 10.1007/3-540-62034-6
   Yoshida N., 2002, 200220 MCS U LEIC
   Zdancewic S, 2001, LECT NOTES COMPUT SC, V2028, P46
NR 47
TC 5
Z9 5
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD MAR
PY 2005
VL 15
BP 293
EP 349
DI 10.1017/S0956796804005477
PN 2
PG 57
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 912MM
UT WOS:000228082700006
OA Bronze
DA 2024-07-18
ER

PT J
AU Voigtländer, J
   Kühnemann, A
AF Voigtländer, J
   Kühnemann, A
TI Composition of functions with accumulating parameters
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID TREE-TRANSFORMATIONS; ATTRIBUTE GRAMMARS; DEFORESTATION; TRANSDUCERS;
   PROGRAMS
AB Many functional programs with accumulating parameters are contained in the class of macro tree transducers. We present a program transformation technique that can be used to solve the efficiency problems due to creation and consumption of intermediate data structures in compositions of such functions, where classical deforestation techniques fail. To do so, given two macro tree transducers under appropriate restrictions, we construct a single macro tree transducer that implements the composition of the two original ones. The imposed restrictions are more liberal than those in the literature on macro tree transducer composition, thus generalising previous results.
C1 Tech Univ Dresden, Dept Comp Sci, D-01062 Dresden, Germany.
C3 Technische Universitat Dresden
RP Tech Univ Dresden, Dept Comp Sci, D-01062 Dresden, Germany.
EM voigt@tcs.inf.tu-dresden.de; kuehne@tcs.inf.tu-dresden.de
OI Voigtlander, Janis/0009-0001-2411-9909
CR [Anonymous], 1970, Math. Syst. Theory, DOI DOI 10.1007/BF01695769
   [Anonymous], 1970, J. Comput. Syst. Sci., DOI DOI 10.1016/S0022-0000(70)80017-4
   [Anonymous], 1971, Math. Syst. Theory, DOI DOI 10.1007/BF01702865
   [Anonymous], 1997, INT SERIES COMPUTER
   Baader Franz, 1998, TERM REWRITING ALL
   BURSTALL RM, 1977, J ACM, V24, P44, DOI 10.1145/321992.321996
   Correnson L, 1999, LECT NOTES COMPUT SC, V1702, P360
   CORRENSON L, 1998, 3348 INRIA ROCQ UN R
   COURCELLE B, 1982, THEOR COMPUT SCI, V17, P163, DOI 10.1016/0304-3975(82)90003-2
   Dershowitz Nachum, 1990, Handbook of Theoretical Computer Science, Volume B: Formal Models and Semantics, P243, DOI 10.1016/b978-0-444-88074-1.50011-1
   Engelfriet, 1980, FORMAL LANGUAGE THEO, P241
   ENGELFRIET J, 1975, MATH SYST THEORY, V9, P198, DOI 10.1007/BF01704020
   ENGELFRIET J, 1985, J COMPUT SYST SCI, V31, P71, DOI 10.1016/0022-0000(85)90066-2
   Engelfriet J, 1999, INFORM COMPUT, V154, P34, DOI 10.1006/inco.1999.2807
   ENGELFRIET J, 1981, 363 TH TWENT
   FRANCHIZANNETTA.P, 1982, THESIS U BORDEAUX 1
   Fülöp Z, 1999, THEOR COMPUT SYST, V32, P649, DOI 10.1007/s002240000135
   Fulop Z., 1981, Acta Cybernet, V5, P261
   Fulop Z., 1998, MONOGRAPHS THEORETIC
   GANZINGER H, 1984, SIGPLAN NOTICES, V19, P157, DOI 10.1145/502949.502890
   GANZINGER H, 1983, SCI COMPUT PROGRAM, V3, P223, DOI 10.1016/0167-6423(83)90021-7
   GIEGERICH R, 1988, ACTA INFORM, V25, P355, DOI 10.1007/BF02737108
   GILL A, 1996, THESIS U GLASGOW
   Gill A., 1993, P C FUNCT PROGR LANG, P223, DOI DOI 10.1145/165180.165214
   HAMILTON GW, 1992, SERIES WORKSHOPS COM, P134
   HOFF M, 1999, THESIS DRESDEN U TEC
   HOFF M, 1998, VERGLEICH BERECHNUNG
   HOFF M, 2001, TREE TRANSDUCER BASE
   Hu ZJ, 1996, ACM SIGPLAN NOTICES, V31, P73, DOI 10.1145/232629.232637
   Johann P., 2001, Semantics, Applications, and Implementation of Program Generation. Second International Workshop, SAIG 2001. Proceedings (Lecture Notes in Computer Science Vol.2196), P47
   JONES SP, 2001, HASK WORKSH P, P203
   JURGENSEN C, 2001, TUDF10110 DRESD U TE
   Kakehi K, 2002, LECT NOTES COMPUT SC, V2372, P46, DOI 10.1007/3-540-45607-4_3
   Knuth D. E., 1968, Mathematical Systems Theory, V2, P127, DOI 10.1007/BF01692511
   Kühnemann A, 1999, LECT NOTES COMPUT SC, V1722, P114
   Kühnemann A, 1998, LECT NOTES COMPUT SC, V1530, P146
   KUHNEMANN A, 1994, ACTA INFORM, V31, P431, DOI 10.1007/BF01178667
   KUHNEMANN A, 1997, THESIS DRESDEN U TEC
   Kuhnemann A., 2001, TUDF10107 DRESD U TE
   LESCHER C, 1999, ENTWURF IMPLEMENTIER
   MALCOLM G, 1989, LECT NOTES COMPUT SC, V375, P335
   MEIJER E, 1991, LECT NOTES COMPUT SC, V523, P124
   REUTHER S, 2002, ADDING TREE TRANSDUC
   Secher JP, 2000, LECT NOTES COMPUT SC, V1755, P113
   Sheard T., 1993, FPCA '93. Conference on Functional Programming Languages and Computer Architecture, P233, DOI 10.1145/165180.165216
   Sorensen M. H., 1996, Journal of Functional Programming, V6, P811, DOI 10.1017/S0956796800002008
   Svenningsson J, 2002, ACM SIGPLAN NOTICES, V37, P124, DOI 10.1145/583852.581491
   TURCHIN VF, 1986, ACM T PROGR LANG SYS, V8, P292, DOI 10.1145/5956.5957
   Voigtländer J, 2002, LECT NOTES COMPUT SC, V2378, P222
   VOIGTLANDER J, 2001, TUDF10108 DRESD U TE
   VOIGTLANDER J, 2002, ASIAN S PART EV SEM, P126
   VOIGTLANDER J, 2003, PROOF APPENDIX COMPO
   VOIGTLANDER J, 2001, THESIS DRESDEN U TEC
   WADLER P, 1990, THEOR COMPUT SCI, V73, P231, DOI 10.1016/0304-3975(90)90147-A
   Wei-Ngan Chin, 1994, Journal of Functional Programming, V4, P515, DOI 10.1017/S0956796800001179
NR 55
TC 12
Z9 12
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD MAY
PY 2004
VL 14
BP 317
EP 363
DI 10.1017/S0956796803004933
PN 3
PG 47
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 822TR
UT WOS:000221563700003
OA Bronze
DA 2024-07-18
ER

PT J
AU Chakravarty, MMI
   Keller, G
AF Chakravarty, MMI
   Keller, G
TI The risks and benefits of teaching purely functional programming in
   first year
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB We argue that teaching purely functional programming as such in freshman courses is detrimental to both the curriculum as well as to promoting the paradigm. Instead, we need to focus on the more general aims of teaching elementary techniques of programming and essential concepts of computing. We support this viewpoint with experience gained during several semesters of teaching large first-year classes (up to 600 students) in Haskell. These classes consisted of computer science students as well as students from other disciplines. We have systematically gathered student feedback by conducting surveys after each semester. This article contributes an approach to the use of modern functional languages in first year courses and, based on this, advocates the use of functional languages in this setting.
C1 Univ New S Wales, Sch Comp Sci & Engn, Kensington, NSW 2033, Australia.
C3 University of New South Wales Sydney
RP Univ New S Wales, Sch Comp Sci & Engn, Kensington, NSW 2033, Australia.
EM chak@cse.unsw.edu.au; keller@cse.unsw.edu.au
OI Keller, Gabriele/0000-0003-1442-5387
CR Abelson HaroldGerald Jay Sussman Julie Sussman., 1984, STRUCTURE INTERPRETA
   [Anonymous], 1999, Haskell: The Craft of Functional Programming
   Bird R., 1998, INTRO FUNCTIONAL PRO, V2nd
   CHAKRAVARTY MMT, 2002, INTRO COMPUTING
   FELLEISEN M, 2002, DESIGN PROGRAMS
   FELLEISEN M, 2002, INT WORKSH FUNCT DEC
   Hudak Paul., 2000, The Haskell school of expression: learning functional programming through multimedia
   MARGOLIS J, 2000, WOMENS STUD Q    SPR
   Peyton Jones S., 2003, J FUNCTIONAL PROGRAM, V13
   WADLER P, 1987, SIGPLAN NOTICES, V22, P83, DOI 10.1145/24697.24706
NR 10
TC 22
Z9 23
U1 0
U2 7
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD JAN
PY 2004
VL 14
BP 113
EP 123
DI 10.1017/S0956796803004805
PN 1
PG 11
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 809LK
UT WOS:000220638000005
OA Bronze
DA 2024-07-18
ER

PT J
AU Walukiewicz-Chrzaszcz, D
AF Walukiewicz-Chrzaszcz, D
TI Termination of rewriting in the Calculus of Constructions
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID STRONG NORMALIZATION; SYSTEMS
AB We show how to incorporate rewriting into the Calculus of Constructions and we prove that the resulting system is strongly normalizing with respect to beta and rewrite reductions. An important novelty of this paper is the possibility to define rewriting rules over dependently typed function symbols. We prove strong normalization for any term rewriting system, such that all function symbols satisfy the, so called, star dependency condition, and every rule is accepted by the Higher Order Recursive Path Ordering (which is an extension of the method created by Jouannaud and Rubio for the setting of the simply typed lambda calculus). The proof of strong normalization is done by using a typed version of reducibility candidates due to Coquand and Gallier. Our criterion is general enough to accept definitions by rewriting of many well-known higher order functions, for example dependent recursors for inductive types or proof carrying functions. This makes it a very good candidate for inclusion in a proof assistant based on the Curry-Howard isomorphism.
C1 Univ Warsaw, Inst Informat, PL-02097 Warsaw, Poland.
   Univ Paris 11, Rech Informat Lab, F-91405 Orsay, France.
C3 University of Warsaw; Universite Paris Saclay
RP Univ Warsaw, Inst Informat, Ul Banacha 2, PL-02097 Warsaw, Poland.
EM daria@mimuw.edu.pl
CR [Anonymous], LECT NOTES COMPUTER
   [Anonymous], 1971, P 2 SCAND LOG S N HO
   AVENHAUS J, 1995, SR9503 U KAIS
   BARBANERA F, 1994, IEEE S LOG, P406, DOI 10.1109/LICS.1994.316049
   BARBANERA F, 1997, J FUNCTIONAL PROGRAM, V7, P613
   BARENDREDGT K, 1990, HDB THEORETICAL CO B, P321
   Barendregt H, 1993, HDB LOGIC COMPUTER S, VVolume 2
   BARRAS B, 1999, COQ PROOF ASSISTANT
   BLANQUI F, 2001, P 16 IEEE S LOG COMP
   BREAZUTANNEN V, 1991, THEOR COMPUT SCI, V83, P3, DOI 10.1016/0304-3975(91)90037-3
   COQUAND T, 1988, INFORM COMPUT, V76, P95, DOI 10.1016/0890-5401(88)90005-3
   COQUAND T, 1990, LECT NOTES COMPUTER, V417
   COQUAND T, 1990, P 1 INT WORKSH LOG F, P479
   Dershowitz Nachum, 1990, Handbook of Theoretical Computer Science, Volume B: Formal Models and Semantics, P243, DOI 10.1016/b978-0-444-88074-1.50011-1
   DOWEK G, 1998, 3400 INRIA
   DOWEK G, 1999, LECT NOTES COMPUTER, V1657, P62
   Jouannaud J.-P., 1991, Proceedings of Sixth Annual IEEE Symposium on Logic in Computer Science (Cat. No.91CH3025-4), P350, DOI 10.1109/LICS.1991.151659
   Jouannaud JP, 1998, THEOR COMPUT SCI, V208, P33, DOI 10.1016/S0304-3975(98)00078-4
   Jouannaud JP, 1997, THEOR COMPUT SCI, V173, P349, DOI 10.1016/S0304-3975(96)00161-2
   JOUANNAUD JP, 1999, 14 ANN IEEE S LOG CO
   JOUANNAUD JP, 2001, 1 JAP C LOG COMP SEN
   KLOP JW, 1993, THEOR COMPUT SCI, V121, P279, DOI 10.1016/0304-3975(93)90091-7
   KLOP JW, 1980, MATH CTR TRACTS, V127
   LORIASAENZ C, 1992, LECT NOTES COMPUTER, V656, P143
   LYSNE O, 1995, LNCS, V914, P26
   Nipkow T., 1991, Proceedings of Sixth Annual IEEE Symposium on Logic in Computer Science (Cat. No.91CH3025-4), P342, DOI 10.1109/LICS.1991.151658
   Paulin-Mohring C., 1993, Typed Lambda Calculi and Applications, V664, DOI [10.1007/BFb0037116., DOI 10.1007/BFB0037116]
   STEFANOVA M, 1999, THESIS U NIJMEGEN
   VANDEPOL J, 1995, LECT NOTES COMPUTER, V902, P350
   WERNER B, 1994, THESIS U PARIS 7
   [No title captured]
NR 31
TC 14
Z9 14
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD MAR
PY 2003
VL 13
BP 339
EP 414
DI 10.1017/S0956796802004641
PN 2
PG 76
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 671RT
UT WOS:000182478400005
OA Bronze
DA 2024-07-18
ER

PT J
AU Moy, C
   Felleisen, M
AF Moy, Cameron
   Felleisen, Matthias
TI Trace contracts
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB Behavioral software contracts allow programmers to strengthen the obligations and promises that they express with conventional types. They lack expressive power, though, when it comes to invariants that hold across several function calls. Trace contracts narrow this expressiveness gap. A trace contract is a predicate over the sequence of values that flow through function calls and returns. This paper presents a principled design, an implementation, and an evaluation of trace contracts.
C1 [Moy, Cameron; Felleisen, Matthias] Northeastern Univ, Boston, MA 02115 USA.
C3 Northeastern University
RP Moy, C (corresponding author), Northeastern Univ, Boston, MA 02115 USA.
EM camoy@ccs.neu.edu; matthias@ccs.neu.edu
OI Moy, Cameron/0000-0002-4384-6351
FU National Science Foundation [SHF 2116372]
FX This work was supported by National Science Foundation grant SHF
   2116372. The authors thank anonymous POPL and JFP reviewers for their
   comments.
CR Andersen L., 2020, Object-Oriented Programming, Systems, Languages and Applications (OOPSLA)
   Andersen L, 2019, ACM T PROGR LANG SYS, V41, DOI 10.1145/3275519
   Ashley J. M., 1994, LISP and Funct. Program. (LFP)
   Ballantyne M., 2020, Object-Oriented Programming, Systems, Languages and Applications (OOPSLA)
   Barendregt HenkP., 1981, THE LAMBDA CALCULUS
   Bartocci E, 2018, Lectures on runtime verification
   Beugnard A, 1999, COMPUTER, V32, P38, DOI 10.1109/2.774917
   Beugnard A., 2010, INT WORKSH COMP SERV
   Blume M, 2006, J FUNCT PROGRAM, V16, P375, DOI 10.1017/S0956796806005971
   Bocchi L., 2010, INT C CONC THEOR
   Chen F., 2005, WORKSH RUNT VER RV
   Chen F, 2007, OOPSLA: 22ND INTERNATIONAL CONFERENCE ON OBJECT-ORIENTED PROGRAMMING, SYSTEMS, LANGUAGES, AND APPLICATIONS, PROCEEDINGS, P569
   Degen M., 2009, ARB PROGR ATPS
   Dimoulas C., 2016, INT C FUNCT PROGR IC
   Dimoulas C., 2013, Object-Oriented Programming, Systems, Languages and Applications (OOPSLA)
   Dimoulas C, 2012, LECT NOTES COMPUT SC, V7211, P214, DOI 10.1007/978-3-642-28869-2_11
   Dimoulas C, 2011, ACM T PROGR LANG SYS, V33, DOI 10.1145/2039346.2039348
   Dimoulas Christos., 2011, Principles of Programming Languages (POPL)
   Disney T, 2011, ICFP 11 - PROCEEDINGS OF THE 2011 ACM SIGPLAN: INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P176
   FELLEISEN M, 1991, SCI COMPUT PROGRAM, V17, P35, DOI 10.1016/0167-6423(91)90036-W
   Felleisen M, 2018, COMMUN ACM, V61, P62, DOI 10.1145/3127323
   Findler RB, 2006, LECT NOTES COMPUT SC, V3945, P226
   Findler RB, 2002, ACM SIGPLAN NOTICES, V37, P48, DOI 10.1145/583852.581484
   Flatt M, 2002, ACM SIGPLAN NOTICES, V37, P72, DOI 10.1145/583852.581486
   Flatt Matthew., 2010, Technical Report PLT-TR-2010-1
   Gay S. J., 2010, Principles of Programming Languages (POPL)
   Gordon C. S., 2017, EUR C OBJ OR PROGR E
   Greenberg M, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P353, DOI 10.1145/1706299.1706341
   Greenman B, 2019, J FUNCT PROGRAM, V29, DOI 10.1017/S0956796818000217
   Havelund K., 2018, Lectures on Runtime Verification
   Hinze R., 2006, Functional and Logic Programming
   Honda K, 1998, LECT NOTES COMPUT SC, V1381, P122, DOI 10.1007/BFb0053567
   Jaspan C, 2009, LECT NOTES COMPUT SC, V5653, P27, DOI 10.1007/978-3-642-03013-0_3
   Kiczales G, 1997, LECT NOTES COMPUT SC, V1241, P220, DOI 10.1007/BFb0053381
   Koskinen E, 2014, IEEE S LOG, DOI 10.1145/2603088.2603138
   Lazarek L., 2020, Principles of Programming Languages (POPL)
   Leucker M, 2009, J LOGIC ALGEBR PROGR, V78, P293, DOI 10.1016/j.jlap.2008.08.004
   McCarthy J., 2011, Automata: Compiling State Machines
   Meredith Patrick, 2012, International Journal on Software Tools for Technology Transfer, V14, P249, DOI 10.1007/s10009-011-0198-6
   MEYER B, 1992, COMPUTER, V25, P40, DOI 10.1109/2.161279
   Meyer B., 1988, ObjectOriented Software Construction
   Moore S., 2016, Object-Oriented Programming, Systems, Languages and Applications (OOPSLA)
   Moy C., 2021, Principles of Programming Languages (POPL)
   Nguyen P. C., 2018, Principles of Programming Languages (POPL)
   Nielson F., 2005, PRINCIPLES PROGRAM A
   Owens Z., 2012, Higher-Order Programming with Effects (HOPE)
   Plotkin G. D., 1975, Theoretical Computer Science, V1, P125, DOI 10.1016/0304-3975(75)90017-1
   Pucella R, 2008, HASKELL'08: PROCEEDINGS OF THE ACM SIGPLAN 2008 HASKELL SYMPOSIUM, P25
   Scholliers C, 2015, SCI COMPUT PROGRAM, V98, P360, DOI 10.1016/j.scico.2013.09.005
   Steele Jr Guy L., 1990, COMMON LISP LANGUAGE
   Strickland T. S., 2012, Object-Oriented Programming, Systems, Languages and Applications (OOPSLA)
   STROM RE, 1986, IEEE T SOFTWARE ENG, V12, P157, DOI 10.1109/TSE.1986.6312929
   Swaine J., 2012, FUNCT HIGH PERF COMP
   Swaine J., 2010, OBJECT ORIENTED PROG
   Swords C., 2019, A Unified Characterization of Runtime Verification Systems as Patterns of Communication
   Tate R, 2013, ACM SIGPLAN NOTICES, V48, P15, DOI 10.1145/2480359.2429074
   Toninho B, 2011, PPDP 11 - PROCEEDINGS OF THE 2011 SYMPOSIUM ON PRINCIPLES AND PRACTICES OF DECLARATIVE PROGRAMMING, P161
   Toronto N., 2011, Plot: Graph plotting
   Tov JA, 2010, LECT NOTES COMPUT SC, V6012, P550, DOI 10.1007/978-3-642-11957-6_29
   Waye L., 2017, INT C FUNCT PROGR IC
   Wolff R., 2011, EUR C OBJ OR PROGR E
   Xiang CC, 2015, INT J SOFTW ENG KNOW, V25, P1595, DOI 10.1142/S0218194015400343
NR 62
TC 1
Z9 1
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI CAMBRIDGE
PA EDINBURGH BLDG, SHAFTESBURY RD, CB2 8RU CAMBRIDGE, ENGLAND
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD DEC 13
PY 2023
VL 33
AR e14
DI 10.1017/S0956796823000096
PG 43
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CE7G0
UT WOS:001123631200001
OA hybrid
DA 2024-07-18
ER

PT J
AU Hu, JZS
   Jang, J
   Pientka, B
AF Hu, Jason z. s.
   Jang, Junyoung
   Pientka, Brigitte
TI Normalization by evaluation for modal dependent type theory
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID RECURSION
AB We present the Kripke-style modal type theory, Mint, which combines dependent types and the necessity modality. It extends the Kripke-style modal lambda-calculus by Pfenning and Davies to the full Martin-Lof type theory. As such it encompasses dependently typed variants of system K, T, K4, and S4. Further, Mint seamlessly supports a full universe hierarchy, usual inductive types, and large eliminations. In this paper, we give a modular sound and complete normalization-by-evaluation (NbE) proof for Mint based on an untyped domain model, which applies to all four aforementioned modal systems without modification. This NbE proof yields a normalization algorithm for Mint, which can be directly implemented. To further strengthen our results, our models and the NbE proof are fully mechanized in Agda and we extract a Haskell implementation of our NbE algorithm from it.
C1 [Hu, Jason z. s.; Jang, Junyoung; Pientka, Brigitte] McGill Univ, Sch Comp Sci, Montreal, PQ, Canada.
C3 McGill University
RP Hu, JZS (corresponding author), McGill Univ, Sch Comp Sci, Montreal, PQ, Canada.
EM zhong.s.hu@mail.mcgill.ca; junyoung.jang@mail.mcgill.ca;
   bpientka@cs.mcgill.ca
RI Hu, Jason Z.S./AAS-8728-2021
OI Hu, Jason Z.S./0000-0001-6710-6262; Jang, Junyoung/0000-0001-6338-2155
FU We would like to thank the anonymous reviewers for their suggestions and
   feedbacks. This work was funded by the Natural Sciences and Engineering
   Research Council of Canada (grant number 206263), Fonds de recherche du
   Qubec - Nature et technologies; Natural Sciences and Engineering
   Research Council of Canada; Fonds de recherche du Qubec - Nature et
   technologies [253521, 304215]; Natural Sciences and Engineering Research
   Council of Canada;  [206263]
FX We would like to thank the anonymous reviewers for their suggestions and
   feedbacks. This work was funded by the Natural Sciences and Engineering
   Research Council of Canada (grant number 206263), Fonds de recherche du
   Quebec - Nature et technologies (grant number 253521). Postgraduate
   Scholarship - Doctoral by the Natural Sciences and Engineering Research
   Council of Canada was awarded to the first author. A graduate fellowship
   from Fonds de recherche du Quebec - Nature et technologies (grant number
   304215) was awarded to the second author.
CR Abel A, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110277
   Abel Andreas, 2017, PROC ACM PROGRAM LAN, V2, DOI DOI 10.1145/3158111
   Abel Andreas, 2013, Habilitation Thesis
   Ager Mads Sig, 2003, Proceedings of the 5th ACM SIGPLAN International Conference on Principles and Practice of Declaritive Programming, P8, DOI DOI 10.1145/888251.888254
   Altenkirch T., 1995, Category Theory and Computer Science. 6th International Conference, CTCS '95 Proceedings, P182
   Altenkirch T., 2016, 1 INT C FORM STRUCT
   Altenkirch T, 2017, LOG METH COMPUT SCI, V13, DOI 10.23638/LMCS-13(4:1)2017
   Altenkirch T, 2016, ACM SIGPLAN NOTICES, V51, P18, DOI 10.1145/2914770.2837638
   Barras Bruno, 1997, Coq in coq
   BERGER U, 1991, SIXTH ANNUAL IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P203
   Bierman G. M., 2000, Studia Logica, V65, P383, DOI 10.1023/A:1005291931660
   Bierman G. M., 1996, Technical report
   Birkedal L, 2020, MATH STRUCT COMP SCI, V30, P118, DOI 10.1017/S0960129519000197
   Borghuis V. A. J., 1994, Coming to Terms with Modal Logic: On the Interpretation of Modalities in Typed Lambda-Calculus
   Brady Edwin., 2006, GPCE 06, P111
   Chapman J, 2009, ELECTRON NOTES THEOR, V228, P21, DOI 10.1016/j.entcs.2008.12.114
   Clouston R, 2018, LECT NOTES COMPUT SC, V10803, P258, DOI 10.1007/978-3-319-89366-2_14
   Clouston R, 2015, LECT NOTES COMPUT SC, V9034, P407, DOI 10.1007/978-3-662-46678-0_26
   Coquand T., 1997, Mathematical Structures in Computer Science, V7, P75, DOI 10.1017/S0960129596002150
   Danielsson NA, 2007, LECT NOTES COMPUT SC, V4502, P93
   Davies R, 2001, J ACM, V48, P555, DOI 10.1145/382780.382785
   Dybjer P, 1996, LECT NOTES COMPUT SC, V1158, P120
   Dybjer P, 2000, J SYMBOLIC LOGIC, V65, P525, DOI 10.2307/2586554
   Forsberg FN, 2010, LECT NOTES COMPUT SC, V6247, P454, DOI 10.1007/978-3-642-15205-4_35
   Gratzer D., 2022, P 37 ANN ACM IEEE S
   Gratzer D, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341711
   Gratzer D, 2020, IEEE S LOG, P492, DOI 10.1145/3373718.3394736
   Harper R., 2005, ACM Transactions on Computational Logic, V6, P61, DOI 10.1145/1042038.1042041
   Hu J. Z. S., 2022, P 38 C MATH FDN PROG
   Hu JZS, 2022, Arxiv, DOI arXiv:2206.07823
   Jang J, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498700
   Kavvos GA, 2017, IEEE S LOG
   Kawata A, 2019, LECT NOTES COMPUT SC, V11893, P53, DOI 10.1007/978-3-030-34175-6_4
   Kripke Saul A., 1963, Zeitschrift fur mathematische Logik und Grundlagen der Mathematik, V9, P67, DOI DOI 10.1002/MALQ.19630090502
   Lindley S, 2007, LECT NOTES COMPUT SC, V4583, P255
   LOPS18 Daniel R., 2018, 3 INT C FORMAL STRUC, p22:1, DOI [10.4230/LIPIcs.FSCD.2018.22, DOI 10.4230/LIPICS.FSCD.2018.22]
   Martin-Lof Per, 1975, Logic Colloquium, V80, P73, DOI [10.1016/S0049-237X(08)71945-1, DOI 10.1016/S0049-237X(08)71945-1]
   Martini S, 1996, APPL LOG SER, V2, P213
   Nakano H, 2000, IEEE S LOG, P255, DOI 10.1109/LICS.2000.855774
   Palmgren E., 1998, Twenty Five Years of Constructive Type Theory, DOI [10.1093/oso/9780198501275.001.0001/isbn-9780198501275-book-part-12, DOI 10.1093/OSO/9780198501275.001.0001/ISBN-9780198501275-BOOK-PART-12]
   Pasalic E, 2002, ACM SIGPLAN NOTICES, V37, P218, DOI 10.1145/583852.581499
   Pfenning F., 2001, Mathematical Structures in Computer Science, V11, P511, DOI 10.1017/S0960129501003322
   Pfenning F., 1995, 11 ANN C MATH FDN PR, P515
   Pientka B, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P371, DOI 10.1145/1328438.1328483
   Pientka B, 2019, IEEE S LOG, DOI 10.1109/lics.2019.8785683
   Pujet L, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3571739
   Pujet L, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498693
   Reynolds J. C., 1998, Higher-Order and Symbolic Computation, V11, P363, DOI 10.1023/A:1010027404223
   Schürmann C, 2001, THEOR COMPUT SCI, V266, P1, DOI 10.1016/S0304-3975(00)00418-7
   Shulman M, 2018, MATH STRUCT COMP SCI, V28, P856, DOI 10.1017/S0960129517000147
   Sterling J., 2022, PhD Thesis
   Taha W, 1999, ACM SIGPLAN NOTICES, V34, P34, DOI 10.1145/328691.328697
   Taha W, 1997, ACM SIGPLAN NOTICES, V32, P203, DOI 10.1145/258994.259019
   Valliappan N, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3547649
   Wieczorek Pawel, 2018, P 7 ACM SIGPLAN INT, P266, DOI DOI 10.1145/3167091
   Zyuzin N, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3473580
NR 56
TC 0
Z9 0
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD OCT 2
PY 2023
VL 33
AR e7
DI 10.1017/S0956796823000060
PG 51
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA U0KR6
UT WOS:001081786300001
OA hybrid
DA 2024-07-18
ER

PT J
AU Elsman, M
   Hallenberg, N
AF Elsman, Martin
   Hallenberg, Niels
TI Integrating region memory management and tag-free generational garbage
   collection
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB We present a region-based memory management scheme with support for generational garbage collection. The scheme features a compile-time region inference algorithm, which associates values with logical regions, and builds on a region type system that deploys region types at runtime to avoid the overhead of write barriers and to support partly tag-free garbage collection. The scheme is implemented in the MLKit Standard ML compiler, which generates native x64 machine code. Besides demonstrating a number of important formal properties of the scheme, we measure the scheme's characteristics, for a number of benchmarks, and compare the performance of the generated executables with the performance of executables generated with the MLton state-of-the-art Standard ML compiler and configurations of the MLKit with and without region inference and generational garbage collection enabled. Although region inference often serves the purpose of generations, combining region inference with generational garbage collection is shown often to be superior to combining region inference with non-generational collection despite the overhead introduced by a larger amount of memory waste, due to region fragmentation.
C1 [Elsman, Martin] Univ Copenhagen, Copenhagen, Denmark.
   [Hallenberg, Niels] SimCorp AS, Copenhagen, Denmark.
C3 University of Copenhagen
RP Elsman, M (corresponding author), Univ Copenhagen, Copenhagen, Denmark.
EM mael@di.ku.dk; niels.hallenberg@simcorp.com
CR Aditya S., 1994, Proceedings of the 1994 ACM Conference on LISP and Functional Programming, P12, DOI 10.1145/182409.182414
   AIKEN A, 1995, SIGPLAN NOTICES, V30, P174, DOI 10.1145/223428.207137
   Aldrich J, 2002, ACM SIGPLAN NOTICES, V37, P311, DOI 10.1145/583854.582448
   Anderson TA, 2010, ACM SIGPLAN NOTICES, V45, P21
   [Anonymous], 1995, Ph. D. Dissertation
   [Anonymous], 2003, ACM C PROGR LANG DES
   Appel A. W., 1989, LISP and Symbolic Computation, V2, P153, DOI 10.1007/BF01811537
   Birkedal L., 1996, ACM S PRINC PROGR LA
   Blanchet B., 1998, Conference Record of POPL '98: 25th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P25, DOI 10.1145/268946.268949
   Calcagno C, 2002, INFORM COMPUT, V173, P199, DOI 10.1006/inco.2001.3112
   Doligez D., 1993, ACM S PRINC PROGR LA
   Elsman M, 1998, 2 INT WORKSH TYP COM
   Elsman M., 2018, P ML FAM WORKSH ML
   Elsman M, 2003, ACM WORKSH TYP LANG
   Elsman M., 2008, DK2300 IT U COP
   Elsman M, 2020, LECT NOTES COMPUT SC, V12007, P95, DOI 10.1007/978-3-030-39197-3_7
   Elsman Martin, 1995, 9578 DIKU U COP
   Fluet M, 2006, LECT NOTES COMPUT SC, V3924, P7
   Gay D., 2001, ACM SIGPLAN C PROGR
   GOLDBERG B, 1991, SIGPLAN NOTICES, V26, P165, DOI 10.1145/113446.113460
   Goldberg B., 1992, Proceedings of the 1992 ACM Conference on Lisp and Functional Programming, P53, DOI 10.1145/141471.141504
   Hallenberg N, 1996, 9657 DIKU U COP DEP
   Hallenberg N, 2002, ACM C PROGR LANG DES
   HANSON DR, 1980, SOFTWARE PRACT EXPER, V10, P489, DOI 10.1002/spe.4380100607
   Helsen S, 2000, ELECTRON NOTES THEOR, V41
   Huelsbergen L., 1998, ACM INT S MEM MAN IS
   Jones R., 2011, GARBAGE COLLECTION H
   Jost S, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P223, DOI 10.1145/1706299.1706327
   Marlow S., 2011, ACM SIGPLAN NOTICES
   Marlow S, 2009, ICFP'09: PROCEEDINGS OF THE 2009 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P65
   Morrisett G., 1996, TIL ML COMPILER PERF
   Morrisett G., 1995, P 7 INT C FUNCT PROG, P66, DOI DOI 10.1145/224164.224182
   Reppy John H, 1994, HIGH PERFORMANCE GAR
   Salagnac G, 2005, ELECTRON NOTES THEOR, V131, P99, DOI 10.1016/j.entcs.2005.01.026
   Salagnac G., 2006, WORKSH IMPL COMPL OP
   Swamy N, 2006, SCI COMPUT PROGRAM, V62, P122, DOI 10.1016/j.scico.2006.02.003
   Tarditi D, 1996, ACM SIGPLAN NOTICES, V31, P181, DOI 10.1145/249069.231414
   Tofte M, 1998, ACM T PROGR LANG SYS, V20, P724, DOI 10.1145/291891.291894
   Tofte M, 1997, INFORM COMPUT, V132, P109, DOI 10.1006/inco.1996.2613
   Tofte M, 2000, FOUNDAT COMPUT, P389
   Tofte M, 2006, PROGRAMMING REGIONS
   Tofte Mads, 1993, 9315 DIKU U COP DEP
   Tolmach A., 1994, Proceedings of the 1994 ACM Conference on LISP and Functional Programming, P1, DOI 10.1145/182409.182411
   Ueno K., 2016, ACM INT C FUNCT PROG
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
NR 45
TC 5
Z9 6
U1 0
U2 3
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD FEB 22
PY 2021
VL 31
AR e4
DI 10.1017/S0956796821000010
PG 31
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA QK1LM
UT WOS:000620141400001
DA 2024-07-18
ER

PT J
AU Brachthäuser, JI
   Schuster, P
   Ostermann, K
AF Brachthaeuser, Jonathan Immanuel
   Schuster, Philipp
   Ostermann, Klaus
TI Effekt: Capability-passing style for type- and effect-safe, extensible
   effect handlers in Scala
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB Effect handlers are a promising way to structure effectful programs in a modular way. We present the Scala library Effekt, which is centered around capability passing and implemented in terms of a monad for multi-prompt delimited continuations. Effekt is the first library implementation of effect handlers that supports effect safety and effect polymorphism without resorting to type-level programming. We describe a novel way of achieving effect safety using intersection types and path-dependent types. The effect system of our library design fits well into the programming paradigm of capability passing and is inspired by the effect system of Zhang & Myers (2019, Proc. ACM Program. Lang.3(POPL), 5:1-5:29). Capabilities carry an abstract type member, which represents an individual effect type and reflects the use of the capability on the type level. We represent effect rows as the contravariant intersection of effect types. Handlers introduce capabilities and remove components of the intersection type. Reusing the existing type system of Scala, we get effect subtyping and effect polymorphism for free.
C1 [Brachthaeuser, Jonathan Immanuel; Schuster, Philipp; Ostermann, Klaus] Univ Tubingen, Tubingen, Germany.
C3 Eberhard Karls University of Tubingen
RP Brachthäuser, JI (corresponding author), Univ Tubingen, Tubingen, Germany.
EM jonathan.brachthaeuser@uni-tuebingen.de;
   philipp.schuster@uni-tuebingen.de; klaus.ostermann@uni-tuebingen.de
OI Brachthauser, Jonathan Immanuel/0000-0001-9128-0391
CR Amin N, 2016, ACM SIGPLAN NOTICES, V51, P838, DOI 10.1145/3022671.2984004
   [Anonymous], 2016, THESIS
   Bauer A, 2015, J LOG ALGEBR METHODS, V84, P108, DOI 10.1016/j.jlamp.2014.02.001
   Biernacki D, 2019, PACMPL, V3
   Biernacki Dariusz, 2017, P ACM PROGR LANG
   Brachthauser J. I, 2018, PACMPL, V2
   Brachthauser J. I, 2017, P INT S SCAL
   Carette J, 2007, LECT NOTES COMPUT SC, V4807, P222
   Convent L, 2019, TECHNICAL REPORT
   DANVY O, 1990, PROCEEDINGS OF THE 1990 ACM CONFERENCE ON LISP AND FUNCTIONAL PROGRAMMING, P151, DOI 10.1145/91556.91622
   Danvy O, 1989, 8912 U COP DIK
   Danvy Olivier., 1992, MATH STRUCT COMP SCI, V2, P361, DOI DOI 10.1017/S0960129500001535
   Dolan S, 2017, LNCS
   Dolan Stephen, 2014, OCAML WORKSH
   Dolan Stephen, 2015, OCAML WORKSH
   Dyvbig RK, 2007, J FUNCT PROGRAM, V17, P687, DOI 10.1017/S0956796807006259
   Felleisen M., 1988, Conference Record of the Fifteenth Annual ACM Symposium on Principles of Programming Languages, P180, DOI 10.1145/73560.73576
   Forster Y, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110257
   Friedman D. P, 1984, PROGRAM TRANSFORMATI
   Gaster Benedict R, 1996, Technical Report. Technical Report NOTTCS-TR-96-3
   Gunter C. A., 1995, Conference Record of FPCA '95. SIGPLAN-SIGARCH-WG2.8. Conference on Functional Programming Languages and Computer Architecture, P12, DOI 10.1145/224164.224173
   Haller P, 2016, ACM SIGPLAN NOTICES, V51, P272, DOI 10.1145/3022671.2984042
   HIEB R, 1990, SIGPLAN NOTICES, V25, P128
   Hieb R., 1994, LISP and Symbolic Computation, V7, P83, DOI 10.1007/BF01019946
   Hillerstrom D, 2017, LIPICS, V84
   Hillerstrom Daniel, 2016, P WORKSH TYP DRIV DE
   Hudak P, 1998, FIFTH INTERNATIONAL CONFERENCE ON SOFTWARE REUSE - PROCEEDINGS, P134, DOI 10.1109/ICSR.1998.685738
   Inostroza P, 2018, P 2018 ACM SIGPLAN I
   Johnson G. F., 1988, Conference Record of the Fifteenth Annual ACM Symposium on Principles of Programming Languages, P158, DOI 10.1145/73560.73574
   Kammar O, 2013, ACM SIGPLAN NOTICES, V48, P145, DOI [10.1145/2500365.2500590, 10.1145/2544174.2500590]
   Kiselyov O, 2006, ACM SIGPLAN NOTICES, V41, P26, DOI 10.1145/1160074.1159808
   Kiselyov O, 2018, ELECTRON P THEOR COM, P23, DOI 10.4204/EPTCS.285.2
   Kiselyov O, 2015, ACM SIGPLAN NOTICES, V50, P94, DOI 10.1145/2804302.2804319
   Kiselyov O, 2013, ACM SIGPLAN NOTICES, V48, P59, DOI 10.1145/2503778.2503791
   Kiselyov O, 2008, HASKELL'08: PROCEEDINGS OF THE ACM SIGPLAN 2008 HASKELL SYMPOSIUM, P1
   Kiselyov Oleg, 2016, ML WORKSH
   Kobori I, 2016, ARXIV160606379
   Launchbury J, 1997, ACM SIGPLAN NOTICES, V32, P227, DOI 10.1145/258949.258970
   Leijen Daan, 2017, Programming Languages and Systems. 15th Asian Symposium, APLAS 2017. Proceedings: LNCS 10695, P339, DOI 10.1007/978-3-319-71237-6_17
   Leijen D., 2014, P WORKSH MATH STRUCT
   Leijen D, 2018, PROCEEDINGS OF THE 3RD ACM SIGPLAN INTERNATIONAL WORKSHOP ON TYPE-DRIVEN DEVELOPMENT (TYDE '18), P51, DOI 10.1145/3240719.3241789
   Leijen D, 2017, PROCEEDINGS OF THE 2ND ACM SIGPLAN INTERNATIONAL WORKSHOP ON TYPE-DRIVEN DEVELOPMENT (TYDE' 17), P16, DOI 10.1145/3122975.3122977
   Leijen D, 2017, ACM SIGPLAN NOTICES, V52, P486, DOI 10.1145/3093333.3009872
   Leijen Daan, 2016, MSRTR201629
   Liang Sheng, 1995, P 22 ACM SIGPLAN SIG, P333, DOI DOI 10.1145/199448.199528
   Lindley S, 2018, DAGSTUHL REPORTS, V8
   Lindley S, 2017, ACM SIGPLAN NOTICES, V52, P500, DOI 10.1145/3093333.3009897
   Materzok M, 2011, ICFP 11 - PROCEEDINGS OF THE 2011 ACM SIGPLAN: INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P81
   Moggi E, 2001, J FUNCT PROGRAM, V11, P591, DOI 10.1017/S0956796801004154
   Odersky M, 2005, ACM SIGPLAN NOTICES, V40, P41, DOI 10.1145/1103845.1094815
   Odersky M., 2005, FOOL
   Odersky M, 2017, P ACM PROGRAM LANG, V2
   Oliveira BCDS, 2012, LECT NOTES COMPUT SC, V7313, P2, DOI 10.1007/978-3-642-31057-7_2
   Osvald L, 2016, ACM SIGPLAN NOTICES, V51, P234, DOI 10.1145/3022671.2984009
   Parreaux L, 2017, P ACM PROGRAM LANG, V2
   Pirog M, 2019, LIPICS, DOI DOI 10.4230/LIPICS.FSCD.2019.30
   Plotkin G, 2003, APPL CATEGOR STRUCT, V11, P69, DOI 10.1023/A:1023064908962
   Plotkin G, 2009, LECT NOTES COMPUT SC, V5502, P80, DOI 10.1007/978-3-642-00590-9_7
   Plotkin GD, 2013, LOG METH COMPUT SCI, V9, DOI 10.2168/LMCS-9(4:23)2013
   Rapoport M, 2019, ABS190407298 CORR
   Sitaram D., 1990, LISP and Symbolic Computation, V3, P67, DOI 10.1007/BF01806126
   Wadler Philip, 1998, The Expression Problem
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
   Wu N, 2014, ACM SIGPLAN NOTICES, V49, P1, DOI 10.1145/2633357.2633358
   Zhang Y, 2019, P ACM PROGRAM LANG, V3
   Zhang YZ, 2016, ACM SIGPLAN NOTICES, V51, P281, DOI [10.1145/2908080.2908086, 10.1145/2980983.2908086]
NR 66
TC 20
Z9 20
U1 0
U2 1
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD MAR 31
PY 2020
VL 30
AR e8
DI 10.1017/S0956796820000027
PG 46
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA LB9HV
UT WOS:000524940700001
OA hybrid
DA 2024-07-18
ER

PT J
AU Schrijvers, T
   Oliveira, BCDS
   Wadler, P
   Marntirosian, K
AF Schrijvers, Tom
   Oliveira, Bruno C. D. S.
   Wadler, Philip
   Marntirosian, Koar
TI COCHIS: <i>Stable and coherent implicits</i>
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID LANGUAGE SUPPORT; UNIFICATION; INFERENCE
AB Implicit programming (IP) mechanisms infer values by type-directed resolution, making programs more compact and easier to read. Examples of IP mechanisms include Haskell's type classes, Scala's implicits, Agda's instance arguments, Coq's type classes and Rust's traits. The design of IP mechanisms has led to heated debate: proponents of one school argue for the desirability of strong reasoning properties, while proponents of another school argue for the power and flexibility of local scoping or overlapping instances. The current state of affairs seems to indicate that the two goals are at odds with one another and cannot easily be reconciled. This paper presents COCHIS, the Calculus Of CoHerent ImplicitS, an improved variant of the implicit calculus that offers flexibility while preserving two key properties: coherence and stability of type substitutions. COCHIS supports polymorphism, local scoping, overlapping instances, first-class instances and higher-order rules, while remaining type-safe, coherent and stable under type substitution. We introduce a logical formulation of how to resolve implicits, which is simple but ambiguous and incoherent, and a second formulation, which is less simple but unambiguous, coherent and stable. Every resolution of the second formulation is also a resolution of the first, but not conversely. Parts of the second formulation bear a close resemblance to a standard technique for proof search called focusing. Moreover, key for its coherence is a rigorous enforcement of determinism.
C1 [Schrijvers, Tom; Marntirosian, Koar] Katholieke Univ Leuven, Dept Comp Sci, Leuven, Belgium.
   [Oliveira, Bruno C. D. S.] Univ Hong Kong, Dept Comp Sci, Hong Kong, Peoples R China.
   [Wadler, Philip] Univ Edinburgh, Sch Informat, Edinburgh, Midlothian, Scotland.
C3 KU Leuven; University of Hong Kong; University of Edinburgh
RP Schrijvers, T (corresponding author), Katholieke Univ Leuven, Dept Comp Sci, Leuven, Belgium.
EM tom.schrijvers@cs.kuleuven.be; bruno@cs.hku.hk; wadler@inf.ed.ac.uk;
   klara.mar@cs.kuleuven.be
RI Schrijvers, Tom/A-6696-2016; dos Santos Oliveira, Bruno
   Cesar/I-7977-2013
OI Schrijvers, Tom/0000-0001-8771-5559; 
FU Hong Kong Research Grant Council [27200514, 17258816]; Flemish Fund for
   Scientific Research (FWO); EPSRC [EP/K034413/1] Funding Source: UKRI
FX We are very grateful for the feedback of the anonymous reviewers. This
   work was partially supported by the Hong Kong Research Grant Council
   projects number 27200514 and 17258816, and by the Flemish Fund for
   Scientific Research (FWO).
CR Andreoli J. M., 1992, Journal of Logic and Computation, V2, P297, DOI 10.1093/logcom/2.3.297
   Barendregt H, 2013, PERSPECT LOGIC, P1, DOI 10.1017/CBO9781139032636
   Barendregt H., 1981, STUDIES LOGIC FDN MA
   Biernacki D, 2018, LOG METH COMPUT SCI, V14, DOI 10.23638/LMCS-14(1:11)2018
   Boehm H.-J., 1985, 26th Annual Symposium on Foundations of Computer Science (Cat. No.85CH2224-4), P339, DOI 10.1109/SFCS.1985.44
   Bottu G.-J., 2018, QUANTIFIED CONSTRAIN
   Bottu GJ, 2017, ACM SIGPLAN NOTICES, V52, P148, DOI 10.1145/3156695.3122967
   Brady E., 2015, TYPE CLASSES IDRIS
   BREAZUTANNEN V, 1991, INFORM COMPUT, V93, P172, DOI 10.1016/0890-5401(91)90055-7
   Camarao C, 1999, LECT NOTES COMPUT SC, V1722, P37
   Chakravarty MMT, 2005, ACM SIGPLAN NOTICES, V40, P241, DOI 10.1145/1090189.1086397
   Chakravarty MMT, 2005, ACM SIGPLAN NOTICES, V40, P1, DOI 10.1145/1047659.1040306
   Chong S., 2017, LECT 2 LOGICAL REL 2
   Damas L., 1982, C REC 9 ANN ACM S PR, P207, DOI DOI 10.1145/582153.582176
   Devriese D, 2011, ICFP 11 - PROCEEDINGS OF THE 2011 ACM SIGPLAN: INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P143
   Dijkstra A., 2005, Technical Report
   Dreyer D, 2007, CONFERENCE RECORD OF POPL 2007: THE 34TH ACM SIGPLAN SIGACT SYMPOSIUM ON PRINCIPLES OF PROGAMMING LANGUAGES, P63
   Dunfield J, 2013, ACM SIGPLAN NOTICES, V48, P429, DOI 10.1145/2544174.2500582
   Eisenberg RA, 2014, ACM SIGPLAN NOTICES, V49, P671, DOI 10.1145/2535838.2535856
   Garcia R, 2007, J FUNCT PROGRAM, V17, P145, DOI 10.1017/S0956796806006198
   GHC, 2017, QUANT CONSTR GHC
   GHC, 2017, GHC US GUID OV INST
   Gonthier G, 2011, ICFP 11 - PROCEEDINGS OF THE 2011 ACM SIGPLAN: INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P163
   Gregor D, 2006, ACM SIGPLAN NOTICES, V41, P291, DOI 10.1145/1167515.1167499
   HINDLEY R, 1969, T AM MATH SOC, V146, P29, DOI 10.2307/1995158
   Hulley B., 2009, SHOW STOPPING PROBLE
   Jones M. P., 1995, Conference Record of FPCA '95. SIGPLAN-SIGARCH-WG2.8. Conference on Functional Programming Languages and Computer Architecture, P160, DOI 10.1145/224164.224198
   Jones M. P., 1992, P ESOP S, P287
   Jones MarkP., 1995, Qualified types: theory and practice
   Jones SP, 2007, J FUNCT PROGRAM, V17, P1, DOI 10.1017/S0956796806006034
   Jones SimonPeyton., 1997, Haskell workshop, P1
   Kahl W., 2001, PREL P 2001 ACM SIGP
   KISELYOV O., 2004, HASKELL 04, P33, DOI DOI 10.1145/1017472.1017481
   Kmett E, 2015, TYPE CLASSES VS WORL
   LeBotlan D., 2003, ACM SIGPLAN INT C FU, V4, P52
   Leijen D, 2008, ICFP'08: PROCEEDINGS OF THE 2008 SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P283
   Lewis J. R., 2000, Conference Record of POPL'00: 27th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages. Papers Presented at the Symposium, P108, DOI 10.1145/325694.325708
   Liang C, 2009, THEOR COMPUT SCI, V410, P4747, DOI 10.1016/j.tcs.2009.07.041
   Manna Z., 1980, ACM Transactions on Programming Languages and Systems, V2, P90, DOI 10.1145/357084.357090
   Marlow S, 2012, SAFE HASKELL INSTANC
   MARTELLI A, 1982, ACM T PROGR LANG SYS, V4, P258, DOI 10.1145/357162.357169
   MILLER D, 1992, J SYMB COMPUT, V14, P321, DOI 10.1016/0747-7171(92)90011-R
   MILLER D, 1991, ANN PURE APPL LOGIC, V51, P125, DOI 10.1016/0168-0072(91)90068-W
   MILNER R, 1978, J COMPUT SYST SCI, V17, P348, DOI 10.1016/0022-0000(78)90014-4
   Morris J., 1969, THESIS
   Morris JG, 2010, ICFP 2010: PROCEEDINGS OF THE 2010 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P375
   Mozilla Research Team, 2017, RUST PROGR LANG
   Norell U, 2009, LECT NOTES COMPUT SC, V5832, P230, DOI 10.1007/978-3-642-04652-0_5
   nponeccop, 2012, BREAK DAT SET INT GE
   Odersky H., 1996, Conference Record of POPL '96: The 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P54, DOI 10.1145/237721.237729
   Odersky M, 2017, P ACM PROGRAM LANG, V2
   Odersky Martin, 2010, SCALA LANGUAGE SPECI
   oleg, 2006, TYP VS PROL PROGR
   Oliveira BCDS, 2010, ACM SIGPLAN NOTICES, V45, P341, DOI 10.1145/1932682.1869489
   Oliveira Bruno C.d.S., 2012, PLDI 12
   Pfenning F., 1993, Fundamenta Informaticae, V19, P185
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Reynolds J. C, 1991, P INT C THEOR ASP CO, P675
   rHaskell, 2006, CONSTR TRICK INST
   Rouvoet A., 2016, THESIS
   Schärli N, 2003, LECT NOTES COMPUT SC, V2743, P248
   SCHRIJVERS T, 2008, ICFP
   Siek J, 2005, ACM SIGPLAN NOTICES, V40, P73, DOI 10.1145/1064978.1065021
   Siek J. G, 2011, C 0X CONCEPTS I EFFO
   Sozeau M, 2008, LECT NOTES COMPUT SC, V5170, P278, DOI 10.1007/978-3-540-71067-7_23
   Sulzmann M, 2007, J FUNCT PROGRAM, V17, P83, DOI 10.1017/S0956796806006137
   Vytiniotis D, 2011, J FUNCT PROGRAM, V21, P333, DOI 10.1017/S0956796811000098
   Vytiniotis D, 2008, ICFP'08: PROCEEDINGS OF THE 2008 SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P295
   WADLER P, 1989, CONFERENCE RECORD OF THE SIXTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P60, DOI 10.1145/75277.75283
   Wadler P, 2015, COMMUN ACM, V58, P75, DOI 10.1145/2699407
   Wehr S, 2007, LECT NOTES COMPUT SC, V4609, P347
   White L, 2015, ELECTRON P THEOR COM, P22, DOI 10.4204/EPTCS.198.2
   Zhang E, 2014, TYPE CLASSES CONFLUE
   Zhang YL, 2015, P IEEE INT FREQ CONT, P436, DOI 10.1109/FCS.2015.7138875
NR 74
TC 5
Z9 5
U1 0
U2 4
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD FEB 8
PY 2019
VL 29
AR e3
DI 10.1017/S0956796818000242
PG 82
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA HK6SS
UT WOS:000458115000001
OA Green Accepted
DA 2024-07-18
ER

PT J
AU Clerc, X
AF Clerc, Xavier
TI OCaml-Java: The Java Virtual Machine as the target of an OCaml compiler
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB This article presents how the compiler from the OCaml-Java project generates Java bytecode from OCaml sources. Targeting the Java Virtual Machine (JVM) is a technological challenge, but gives access to a platform where OCaml can leverage multiple cores and access numerous libraries. We present the main design choices regarding the runtime and the various optimizations performed by the compiler that are crucial to get decent performance on a JVM. The challenge is indeed not only to generate bytecode but to generate efficient bytecode, and to provide a runtime library whose memory footprint does not impede the efficiency of the garbage collector. We focus on the strategies that differ from the original OCaml compiler, as the constraints are quite different on the JVM when compared to native code. The level of performance reached by the OCaml-Java compiler is assessed through benchmarks, comparing with both the original OCaml implementation and the Scala language.
EM xclerc@ocamljava.org
CR Balat V, 2009, ACM SIGPLAN NOTICES, V44, P311, DOI 10.1145/1631687.1596595
   BENTON N, 1999, P INT C FUNCT PROGR, P126
   Benton Nick., 1998, P 3 ACM SIGPLAN INT, P129, DOI [10.1145/289423.289435, DOI 10.1145/289423.289435]
   Benton Nick., 2004, P 6 ACM SIGPLAN INT, P215
   Chailloux E., 2009, OCAML MULTICORE ARCH
   Chailloux E., 2004, LOBJET
   Chailloux E., 2004, WORKSH MULT PROGR OB
   Clerc X., 2013, IMPLEMENTATION APPL, P167
   Clerc X., 2012, IMPLEMENTATION APPL, P71
   Clerc X., 2007, THE BARISTA LIB
   Clerc X., 2012, TRENDS FUNCTIONAL PR, P167
   Clerc X., 2013, INT C PRINC PRACT PR, P45
   Danelutto M., 2011, PARMAP MINIMALISTIC
   Filliatre J.-C., 2011, TRENDS FUNCTIONAL PR, P65
   Fournet C., 2003, ADV FUNCTIONAL PROGR, V2638, P1948, DOI [10.1007/978-3-540-44833-4., DOI 10.1007/978-3-540-44833-4]
   Hickey R., 2008, P 2008 S DYN LANG DL
   Leroy X., 1990, TECHNICAL REPORT
   Leroy X., 2004, THE CAMLJAVA PROJECT
   Leroy X., 2013, The OCaml System Release 4.01: Documentation and User's Manual
   Mauny M., 2012, OCAMLCC RAISING LOW
   Microsoft, 2000, C LANG COLL MICR PRO
   Montelatici R., 2005, P 3 INT C NET TECHN
   Nutter C., 2008, JRUBY JAVA POWERED R
   Odersky M., 2003, THE SCALA LANGUAGE
   Stolpmann G., 2012, PLAMA MAP REDUCE DIS
   Syme D., 2005, THE F LANGUAGE
   Vouillon J, 2014, SOFTWARE PRACT EXPER, V44, P951, DOI 10.1002/spe.2187
NR 27
TC 0
Z9 0
U1 0
U2 4
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PY 2016
VL 26
BP 1
EP 42
DI 10.1017/S0956796816000095
PG 42
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DN4DV
UT WOS:000377014200001
DA 2024-07-18
ER

PT J
AU Hinze, R
   Wu, N
AF Hinze, Ralf
   Wu, Nicolas
TI Unifying structured recursion schemes An Extended Study
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB Folds and unfolds have been understood as fundamental building blocks for total programming, and have been extended to form an entire zoo of specialised structured recursion schemes. A great number of these schemes were unified by the introduction of adjoint folds, but more exotic beasts such as recursion schemes from comonads proved to be elusive. In this paper, we show how the two canonical derivations of adjunctions from (co) monads yield recursion schemes of significant computational importance: monadic catamorphisms come from the Kleisli construction, and more astonishingly, the elusive recursion schemes from comonads come from the Eilenberg-Moore construction. Thus, we demonstrate that adjoint folds are more unifying than previously believed.
C1 [Hinze, Ralf] Univ Oxford, Dept Comp Sci, Oxford, England.
   [Wu, Nicolas] Univ Bristol, Dept Comp Sci, Bristol, Avon, England.
C3 University of Oxford; University of Bristol
RP Hinze, R (corresponding author), Univ Oxford, Dept Comp Sci, Oxford, England.; Wu, N (corresponding author), Univ Bristol, Dept Comp Sci, Bristol, Avon, England.
EM ralf.hinze@cs.ox.ac.uk; nicolas.wu@bristol.ac.uk
OI Wu, Nicolas/0000-0002-4161-985X
FU EPSRC [EP/J010995/1]; EPSRC [EP/J010995/1] Funding Source: UKRI
FX The authors would like to thank Jeremy Gibbons for his contributions to
   this work. We would also like to thank the anonymous reviewers for their
   insight and detailed suggestions. This work has been funded by EPSRC
   grant number EP/J010995/1, on Unifying Theories of Generic Programming.
CR Backhouse R., 1995, Category Theory and Computer Science. 6th International Conference, CTCS '95 Proceedings, P159
   Bartels F., 2003, Mathematical Structures in Computer Science, V13, P321, DOI 10.1017/S0960129502003900
   Beck J., 1969, SEMINAR TRIPLES CATE, P119, DOI [10.1007/BFb0083084, DOI 10.1007/BFB0083084]
   Bird R., 1999, Formal Aspects of Computing, V11, P200, DOI 10.1007/s001650050047
   Bird Richard, 1997, Algebra of Programming
   Capretta V, 2006, INFORM COMPUT, V204, P437, DOI 10.1016/j.ic.2005.08.005
   Climent J., 2010, EXTRACTA MATH, V25, P1
   EILENBERG S, 1965, ILLINOIS J MATH, V9, P381, DOI 10.1215/ijm/1256068141
   Fokkinga M., 1994, 9428 U TWENT DEP COM
   FOKKINGA M, 1992, THESIS U TWENTE NETH
   Fokkinga M.M., 1990, SQUIGGOLIST, V1, P81
   Gibbons J, 2000, SCI COMPUT PROGRAM, V37, P37, DOI 10.1016/S0167-6423(99)00022-2
   Hagino T., 1987, THESIS U EDINBURGH U
   Hinze R, 2013, P 9 ACM SIGPLAN WORK, P1, DOI DOI 10.1145/2502488.2502496
   Hinze R, 2015, ACM SIGPLAN NOTICES, V50, P527, DOI [10.1145/2676726.2676989, 10.1145/2775051.2676989]
   Hinze R, 2013, ACM SIGPLAN NOTICES, V48, P209, DOI [10.1145/2500365.2500578, 10.1145/2544174.2500578]
   Hinze R, 2013, SCI COMPUT PROGRAM, V78, P2108, DOI 10.1016/j.scico.2012.07.011
   Hinze R, 2011, ICFP 11 - PROCEEDINGS OF THE 2011 ACM SIGPLAN: INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P359
   Hinze R, 2011, WGP 11: PROCEEDINGS OF THE 2011 ACM SIGPLAN WORKSHOP ON GENERIC PROGRAMMING, P47
   HUBER PJ, 1961, MATH ANN, V144, P361, DOI 10.1007/BF01396534
   Kan Daniel M., 1958, Trans. Amer. Math. Soc., V87, P294, DOI DOI 10.1090/S0002-9947-1958-0131451-0
   KLEISLI H, 1965, P AM MATH SOC, V16, P544
   LAMBEK J, 1968, MATH Z, V103, P151, DOI 10.1007/BF01110627
   Mac Lane S, 1998, GRAD TEXT M, V5
   MALCOLM G, 1990, SCI COMPUT PROGRAM, V14, P255, DOI 10.1016/0167-6423(90)90023-7
   Matthes R, 2004, THEOR COMPUT SCI, V327, P155, DOI 10.1016/j.tcs.2004.07.025
   Meertens L., 1992, Formal Aspects of Computing, V4, P413, DOI 10.1007/BF01211391
   MEIJER E, 1991, LECT NOTES COMPUT SC, V523, P124
   MENDLER NP, 1991, ANN PURE APPL LOGIC, V51, P159, DOI 10.1016/0168-0072(91)90069-X
   Palmquist P. H., 1971, LECT NOTES MATH, V195, P123
   Turi D, 1997, IEEE S LOG, P280, DOI 10.1109/LICS.1997.614955
   Uustalu T., 2001, Nordic Journal of Computing, V8, P366
   Uustalu T., 1999, Nordic Journal of Computing, V6, P343
   Uustalu T., 1999, Informatica, V10, P5
   Uustalu T, 2011, ELECTRON NOTES THEOR, V229, P135, DOI 10.1016/j.entcs.2011.02.020
   Uustalu T, 2008, ELECTRON NOTES THEOR, V203, P263, DOI 10.1016/j.entcs.2008.05.029
   Vene V., 1998, Proceedings of the Estonian Academy of Sciences. Physics, Mathematics, V47, P147
   [No title captured]
   [No title captured]
NR 39
TC 3
Z9 3
U1 0
U2 1
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PY 2016
VL 26
AR e1
DI 10.1017/S0956796815000258
PG 49
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DH7WQ
UT WOS:000373005100001
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Curtis, S
   Mu, SC
AF Curtis, Sharon
   Mu, Shin-Cheng
TI Calculating a linear-time solution to the densest-segment problem
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID OPTIMAL ALGORITHM
AB The problem of finding a densest segment of a list is similar to the well-known maximum segment sum problem, but its solution is surprisingly challenging. We give a general specification of such problems, and formally develop a linear-time online solution, using a sliding-window style algorithm. The development highlights some elegant properties of densities, involving partitions that are decreasing and all right-skew.
C1 [Curtis, Sharon] Univ Oxford, Oxford OX1 2JD, England.
   [Mu, Shin-Cheng] Acad Sinica, Taipei, Taiwan.
C3 University of Oxford; Academia Sinica - Taiwan
RP Curtis, S (corresponding author), Univ Oxford, Oxford OX1 2JD, England.
EM sharon.curtis@ndph.ox.ac.uk; scm@iis.sinica.edu.tw
RI Mu, Shin-Cheng/ABA-7746-2020
OI Mu, Shin-Cheng/0000-0002-4755-601X
CR [Anonymous], 2007, PRACTICAL PROGRAMMIN
   [Anonymous], 1999, PURELY FUNCTIONAL DA
   Bird R. S., 1987, NATO ASI SERIES F, V36, P342
   Bird Richard, 1997, Algebra of Programming
   Chung K.-M., 2010, COMMUNICATION
   Chung KM, 2004, SIAM J COMPUT, V34, P373, DOI 10.1137/S0097539704440430
   Chung KM, 2003, LECT NOTES COMPUT SC, V2832, P136
   Curtis S., 2014, CALCULATING LINEAR T
   Goldwasser MH, 2005, J COMPUT SYST SCI, V70, P128, DOI 10.1016/j.jcss.2004.08.001
   GOLDWASSER MH, 2002, P 2 WORKSH ALG BIOIN, P157
   Han L, 2009, BMC BIOINFORMATICS, V10, DOI 10.1186/1471-2105-10-65
   Hinze R, 2006, J FUNCT PROGRAM, V16, P197, DOI 10.1017/S0956796805005769
   Huang X., 1994, BIOINFORMATICS, V10, P219
   Jeuring J., 1993, THESIS
   Jeuring J. T., 1989, SQUIGGOLIST, V1, P12
   Kaldewaij A., 1990, Programming: The Derivation of Algorithms
   Lin YL, 2002, LECT NOTES COMPUT SC, V2420, P459
   Malcolm G. R., 1990, THESIS
   Mu SC, 2009, J FUNCT PROGRAM, V19, P545, DOI 10.1017/S0956796809007345
   REM M, 1988, SCI COMPUT PROGRAM, V10, P99
   Swierstra S. D., 1993, LECT NOTES COMPUTER, P355
   VANDENEIJNDE JPHW, 1990, SCI COMPUT PROGRAM, V15, P79, DOI 10.1016/0167-6423(90)90045-F
   ZANTEMA H, 1992, SCI COMPUT PROGRAM, V18, P39, DOI 10.1016/0167-6423(92)90033-8
NR 23
TC 2
Z9 2
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PY 2015
VL 25
AR e22
DI 10.1017/S095679681500026X
PG 32
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DB1AM
UT WOS:000368240300011
OA Bronze
DA 2024-07-18
ER

PT J
AU Myreen, MO
   Owens, S
AF Myreen, Magnus O.
   Owens, Scott
TI Proof-producing translation of higher-order logic into pure and stateful
   ML
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID VERIFICATION; COMPILER
AB The higher-order logic found in proof assistants such as Coq and various HOL systems provides a convenient setting for the development and verification of functional programs. However, to efficiently run these programs, they must be converted (or 'extracted') to functional programs in a programming language such as ML or Haskell. With current techniques, this step, which must be trusted, relates similar looking objects that have very different semantic definitions, such as the set-theoretic model of a logic and the operational semantics of a programming language. In this paper, we show how to increase the trustworthiness of this step with an automated technique. Given a functional program expressed in higher-order logic, our technique provides the corresponding program for a functional language defined with an operational semantics, and it provides a mechanically checked theorem relating the two. This theorem can then be used to transfer verified properties of the logical function to the program. We have implemented our technique in the HOL4 theorem prover, translating functions to a subset of Standard ML, and have applied the implementation to examples including functional data structures, a parser generator, cryptographic algorithms, a garbage collector and the 500-line kernel of the HOL light theorem prover. This paper extends our previous conference publication with new material that shows how functions defined in terms of a state-and-exception monad can be translated, with proofs, into stateful ML code. The HOL light example is also new.
C1 [Myreen, Magnus O.] Univ Cambridge, Comp Lab, Cambridge CB2 3QG, England.
   [Owens, Scott] Univ Kent, Sch Comp, Canterbury, Kent, England.
C3 University of Cambridge; University of Kent
RP Myreen, MO (corresponding author), Univ Cambridge, Comp Lab, Pembroke St, Cambridge CB2 3QG, England.
EM magnus.myreen@cl.cam.ac.uk; S.A.Owens@kent.ac.uk
OI Owens, Scott/0000-0002-7437-4780
FU Royal Society, UK; EPSRC [EP/K008528/1] Funding Source: UKRI
FX The first author was funded by the Royal Society, UK. Many thanks to the
   JFP and ICFP reviewers for their detailed and helpful comments.
CR [Anonymous], 1998, Purely Functional Data Structures
   [Anonymous], 1997, The Definition of Standard ML
   Aydemir BE, 2005, LECT NOTES COMPUT SC, V3603, P50
   Barthe G, 2012, LECT NOTES COMPUT SC, V7211, P47, DOI 10.1007/978-3-642-28869-2_3
   Barthwal A, 2009, LECT NOTES COMPUT SC, V5502, P160, DOI 10.1007/978-3-642-00590-9_12
   BOYER RS, 1975, J ACM, V22, P129, DOI 10.1145/321864.321875
   Charguéraud A, 2011, ACM SIGPLAN NOTICES, V46, P418, DOI 10.1145/2034574.2034828
   Charguéraud A, 2010, ACM SIGPLAN NOTICES, V45, P321, DOI 10.1145/1932681.1863590
   Chlipala A, 2010, ACM SIGPLAN NOTICES, V45, P93, DOI 10.1145/1707801.1706312
   COQUAND T, 1988, INFORM COMPUT, V76, P95, DOI 10.1016/0890-5401(88)90005-3
   Dargaye Z., 2009, VERIFICATION FORMELL
   Davis JA, 2012, J MOD ITAL STUD, V17, P1, DOI 10.1080/1354571X.2012.628092
   Duan JJ, 2005, LECT NOTES ARTIF INT, V3835, P519, DOI 10.1007/11591191_36
   Guodong Li, 2011, FM 2011: Formal Methods. Proceedings 17th International Symposium on Formal Methods, P169, DOI 10.1007/978-3-642-21437-0_15
   Harrison J., 1995, CRC053
   Hurd J, 2003, J LOGIC ALGEBR PROGR, V56, P3, DOI 10.1016/S1567-8326(02)00065-6
   Krauss A., 2009, AUTOMATING RECURSIVE
   Kumar R., 2014, PRINCIPLES PROGRAMMI
   Leroy X, 2009, J AUTOM REASONING, V43, P363, DOI 10.1007/s10817-009-9155-4
   Letouzey P, 2002, LECT NOTES COMPUT SC, V2646, P200
   Li GD, 2008, LECT NOTES COMPUT SC, V4963, P471
   Li GD, 2007, LECT NOTES ARTIF INT, V4603, P19
   Li GD, 2007, LECT NOTES COMPUT SC, V4421, P205
   Malecha J. G., 2010, P 37 ACM SIGPLAN SIG, P237
   McCreight A, 2010, ACM SIGPLAN NOTICES, V45, P273, DOI 10.1145/1932681.1863584
   Milner R., 1972, STANCS72288
   Myreen Magnus O., 2012, Interactive Theorem Proving. Proceedings of the Third International Conference, ITP 2012, P412, DOI 10.1007/978-3-642-32347-8_29
   Myreen Magnus O., 2011, Interactive Theorem Proving. Proceedings Second International Conference, ITP 2011, P265, DOI 10.1007/978-3-642-22863-6_20
   Myreen MO, 2013, LECT NOTES COMPUT SC, V8307, P66, DOI 10.1007/978-3-319-03545-1_5
   Myreen MO, 2013, LECT NOTES COMPUT SC, V7998, P490, DOI 10.1007/978-3-642-39634-2_38
   Myreen MO, 2012, ACM SIGPLAN NOTICES, V47, P115, DOI 10.1145/2398856.2364545
   Myreen MO, 2010, LECT NOTES COMPUT SC, V6217, P142, DOI 10.1007/978-3-642-15057-9_10
   Myreen MO, 2009, LECT NOTES COMPUT SC, V5501, P2, DOI 10.1007/978-3-642-00722-4_2
   Norrish M, 2002, COMPUT J, V45, P37, DOI 10.1093/comjnl/45.1.37
   Owens Scott, 2008, Higher-Order and Symbolic Computation, V21, P377, DOI 10.1007/s10990-008-9038-0
   Sevcík J, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P43, DOI 10.1145/1926385.1926393
   Slind K, 1999, THESIS TECHNICAL U M
   Slind K, 2007, FORM ASP COMPUT, V19, P343, DOI 10.1007/s00165-007-0028-5
NR 38
TC 29
Z9 33
U1 0
U2 2
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD MAY
PY 2014
VL 24
IS 2-3
BP 284
EP 315
DI 10.1017/S0956796813000282
PG 32
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AM0QJ
UT WOS:000339550500005
OA Bronze
DA 2024-07-18
ER

PT J
AU Downen, P
   Ariola, ZM
AF Downen, Paul
   Ariola, Zena M.
TI Delimited control and computational effects
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB We give a framework for delimited control with multiple prompts, in the style of Parigot's lambda gamma-calculus, through a series of incremental extensions by starting with the pure lambda-calculus. Each language inherits the semantics and reduction theory of its parent, giving a systematic way to describe each level of control. For each language of interest, we fully characterize its semantics in terms of a reduction semantics, operational semantics, continuation-passing style transform, and abstract machine. Furthermore, the control operations are expressed in terms of fine-grained primitives that can be used to build well-known, higher-level control operators. In order to illustrate the expressive power provided by various languages, we show how other computational effects can be encoded in terms of these control operators.
C1 [Downen, Paul; Ariola, Zena M.] Univ Oregon, Eugene, OR 97403 USA.
C3 University of Oregon
RP Downen, P (corresponding author), Univ Oregon, Eugene, OR 97403 USA.
EM pdownen@cs.uoregon.edu; ariola@cs.uoregon.edu
OI Downen, Paul/0000-0003-0165-9387
FU NSF [CCF-0917329]; INRIA Equipe Associee SEMACODE
FX Paul Downen and Zena M. Ariola have been supported by NSF grant
   CCF-0917329 and by INRIA Equipe Associee SEMACODE.
CR Ariola Zena M., 2009, Higher-Order and Symbolic Computation, V22, P233, DOI 10.1007/s10990-007-9006-0
   Ariola Z. M., 2011, 1 INT WORKSH THEOR P, P6
   Ariola ZM, 2008, J FUNCT PROGRAM, V18, P373, DOI 10.1017/S0956796807006612
   Biernacka M, 2005, LOG METH COMPUT SCI, V1, DOI 10.2168/LMCS-1(2:5)2005
   Chung-chieh Shan, 2007, Higher-Order and Symbolic Computation, V20, P371, DOI 10.1007/s10990-007-9010-4
   DANVY O, 1990, PROCEEDINGS OF THE 1990 ACM CONFERENCE ON LISP AND FUNCTIONAL PROGRAMMING, P151, DOI 10.1145/91556.91622
   Danvy O., 1989, 8912 DIKU U COP
   Danvy Olivier, 2004, P 4 ACM SIGPLAN WORK, P13
   Downen P, 2012, LECT NOTES COMPUT SC, V7211, P234, DOI 10.1007/978-3-642-28869-2_12
   Dyvbig RK, 2007, J FUNCT PROGRAM, V17, P687, DOI 10.1017/S0956796807006259
   Felleisen M., 1988, Conference Record of the Fifteenth Annual ACM Symposium on Principles of Programming Languages, P180, DOI 10.1145/73560.73576
   FELLEISEN M, 1987, THEOR COMPUT SCI, V52, P205, DOI 10.1016/0304-3975(87)90109-5
   FELLEISEN M, 1991, SCI COMPUT PROGRAM, V17, P35, DOI 10.1016/0167-6423(91)90036-W
   FELLEISEN M, 1992, THEOR COMPUT SCI, V103, P235, DOI 10.1016/0304-3975(92)90014-7
   FELLEISEN M, 1987, LECT NOTES COMPUT SC, V259, P206
   Felleisen Matthias, 1988, LISP FUNCTIONAL PROG, P52
   Filinski A., 1999, Conference Record of POPL '99. 26th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P175, DOI 10.1145/292540.292557
   Filinski Andrzej, 1994, P 21 ANN ACM S PRINC, P446, DOI DOI 10.1145/174675.178047
   Flatt M, 2007, ACM SIGPLAN NOTICES, V42, P165, DOI 10.1145/1291220.1291178
   Gunter C. A., 1995, Conference Record of FPCA '95. SIGPLAN-SIGARCH-WG2.8. Conference on Functional Programming Languages and Computer Architecture, P12, DOI 10.1145/224164.224173
   Kameyama Y, 2003, ACM SIGPLAN NOTICES, V38, P177, DOI 10.1145/944746.944722
   Kiselyov O, 2006, ACM SIGPLAN NOTICES, V41, P26, DOI 10.1145/1160074.1159808
   Kiselyov O, 2010, LECT NOTES COMPUT SC, V6009, P304, DOI 10.1007/978-3-642-12251-4_22
   Materzok M, 2011, ACM SIGPLAN NOTICES, V46, P81, DOI 10.1145/2034574.2034786
   Materzok Marek, 2012, Lecture Notes in Computer Science, V7705, P296, DOI [10.1007/978-3-642- 35182- 2_21, DOI 10.1007/978-3-642-35182-2_21]
   MOGGI E, 1991, INFORM COMPUT, V93, P55, DOI 10.1016/0890-5401(91)90052-4
   Moreau L., 1998, Higher-Order and Symbolic Computation, V11, P233, DOI 10.1023/A:1010087314987
   PARIGOT M, 1992, LECT NOTES ARTIF INT, V624, P190
   Plotkin G. D., 1975, Theoretical Computer Science, V1, P125, DOI 10.1016/0304-3975(75)90017-1
   Reynolds John C., 1972, ACM 72, V2, P717, DOI DOI 10.1023/A:1010027404223
   SITARAM D, 1990, PROCEEDINGS OF THE 1990 ACM CONFERENCE ON LISP AND FUNCTIONAL PROGRAMMING, P161, DOI 10.1145/91556.91626
   Sitaram D., 1990, LISP and Symbolic Computation, V3, P67, DOI 10.1007/BF01806126
NR 32
TC 6
Z9 6
U1 0
U2 1
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD JAN
PY 2014
VL 24
IS 1
BP 1
EP 55
DI 10.1017/S0956796813000312
PG 55
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AI4PG
UT WOS:000336846700001
OA Bronze
DA 2024-07-18
ER

PT J
AU Kennedy, AJ
   Vytiniotis, D
AF Kennedy, Andrew J.
   Vytiniotis, Dimitrios
TI Every bit counts: The binary representation of typed data and programs
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB We show how the binary encoding and decoding of typed data and typed programs can be understood, programmed and verified with the help of question answer games. The encoding of a value is determined by the yes/no answers to a sequence of questions about that value; conversely, decoding is the interpretation of binary data as answers to the same question scheme. We introduce a general framework for writing and verifying game-based codecs. We present games in Haskell for structured, recursive, polymorphic and indexed types, building up to a representation of well-typed terms in the simply-typed lambda-calculus with polymorphic constants. The framework makes novel use of isomorphisms between types in the definition of games. The definition of isomorphisms together with additional simple properties make it easy to prove that codecs derived from games never encode two distinct values using the same code, never decode two codes to the same value and interpret any bit sequence as a valid code for a value or as a prefix of a valid code. Formal properties of the framework have been proved using the Coq proof assistant.
C1 [Kennedy, Andrew J.; Vytiniotis, Dimitrios] Microsoft Res, Cambridge CB3 0FB, England.
C3 Microsoft
RP Kennedy, AJ (corresponding author), Microsoft Res, Cambridge CB3 0FB, England.
EM akenn@microsoft.com; dimitrios@microsoft.com
CR [Anonymous], ECMA335
   [Anonymous], 1992, LNCS
   Bertot Y., 2004, TEXT THEORET COMP S
   Bird R, 2003, LECT NOTES COMPUT SC, V2638, P1
   BURTSCHER M, 2010, P USENIX C WEB APPL
   CAMERON RD, 1988, IEEE T INFORM THEORY, V34, P843, DOI 10.1109/18.9782
   Cheney J., 2000, Proceedings DCC 2000. Data Compression Conference, DOI 10.1109/DCC.2000.838197
   Claessen K, 2000, ACM SIGPLAN NOTICES, V35, P268, DOI 10.1145/357766.351266
   CONTLA JF, 1985, SOFTWARE PRACT EXPER, V15, P625, DOI 10.1002/spe.4380150702
   Coutts D, 2007, ACM SIGPLAN NOTICES, V42, P315, DOI 10.1145/1291220.1291199
   Duan JJ, 2005, LECT NOTES ARTIF INT, V3835, P519, DOI 10.1007/11591191_36
   ELIAS P, 1975, IEEE T INFORM THEORY, V21, P194, DOI 10.1109/TIT.1975.1055349
   Fisher K, 2006, ACM SIGPLAN NOTICES, V41, P2, DOI 10.1145/1111320.1111039
   Franz M., 2002, 0210 U CAL DEP INF C
   Ghani N., 2009, LOG METH COMPUT SCI, V5, P1
   Gibbons J, 2007, LECT NOTES COMPUT SC, V4719, P1
   Gonthier G., 2011, 6455 INRIA
   Haldar V., 2002, NSPW 02, P69
   Hinze R, 2007, LECT NOTES COMPUT SC, V4719, P72
   Holdermans S, 2006, LECT NOTES COMPUT SC, V4014, P209, DOI 10.1007/11783596_14
   Kennedy AJ, 2004, J FUNCT PROGRAM, V14, P727, DOI 10.1017/S0956796804005209
   MacKay D., 2003, INFORM THEORY INFERE
   Necula GC, 2001, ACM SIGPLAN NOTICES, V36, P142, DOI 10.1145/373243.360216
   Necula GC, 1998, ACM SIGPLAN NOTICES, V33, P333, DOI 10.1145/277652.277752
   Nielsen L, 2011, LECT NOTES COMPUT SC, V6638, P402, DOI 10.1007/978-3-642-21254-3_32
   Palka M.H., 2011, Proceeding of the 6th international workshop on Automation of software test, AST '11, P91, DOI 10.1145/1982595.1982615
   Rendel T, 2010, ACM SIGPLAN NOTICES, V45, P1
   Salomon D., 2008, A Concise Introduction to Data Compression
   Sorensen M.H., 2006, Studies in Logic and the Foundations of Mathematics, V149
   Sozeau M, 2007, LECT NOTES COMPUT SC, V4502, P237
   Sulzmann M, 2007, PROCEEDINGS OF THE TLDI 2007: 2007 ACM SIGPLAN INTERNATIONAL WORKSHOP ON TYPES IN LANGUAGES DESIGN AND IMPLEMENTATION, P53, DOI 10.1145/1190315.1190324
   Vytiniotis D, 2010, ACM SIGPLAN NOTICES, V45, P15, DOI 10.1145/1932681.1863548
   Yakushev A. R., 2009, LNCS, V5812, P41
NR 33
TC 8
Z9 10
U1 0
U2 1
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD JUL-SEP
PY 2012
VL 22
SI SI
BP 529
EP 573
DI 10.1017/S0956796812000263
PN 4-5
PG 45
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 004HQ
UT WOS:000308672600005
OA Bronze
DA 2024-07-18
ER

PT J
AU Bierman, GM
   Gordon, AD
   Hritcu, C
   Langworthy, D
AF Bierman, Gavin M.
   Gordon, Andrew D.
   Hritcu, Catalin
   Langworthy, David
TI Semantic subtyping with an SMT solver
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID THEOREM PROVER; EXECUTION
AB We study a first-order functional language with the novel combination of the ideas of refinement type (the subset of a type to satisfy a Boolean expression) and type-test (a Boolean expression testing whether a value belongs to a type). Our core calculus can express a rich variety of typing idioms; for example, intersection, union, negation, singleton, nullable, variant, and algebraic types are all derivable. We formulate a semantics in which expressions denote terms, and types are interpreted as first-order logic formulas. Subtyping is defined as valid implication between the semantics of types. The formulas are interpreted in a specific model that we axiomatize using standard first-order theories. On this basis, we present a novel type-checking algorithm able to eliminate many dynamic tests and to detect many errors statically. The key idea is to rely on a Satisfiability Modulo Theories solver to compute subtyping efficiently. Moreover, using a satisfiability modulo theories solver allows us to show the uniqueness of normal forms for non-deterministic expressions, provide precise counterexamples when type-checking fails, detect empty types, and compute instances of types statically and at run-time.
C1 [Bierman, Gavin M.; Gordon, Andrew D.] Microsoft Res, Cambridge, England.
   [Hritcu, Catalin] Univ Penn, Philadelphia, PA 19104 USA.
   [Hritcu, Catalin] Univ Saarland, Philadelphia, PA USA.
   [Langworthy, David] Microsoft Corp, Redmond, WA 98052 USA.
C3 Microsoft; University of Pennsylvania; Microsoft
RP Bierman, GM (corresponding author), Microsoft Res, Cambridge, England.
EM gmb@microsoft.com; adg@microsoft.com; catalin.hritcu@gmail.com;
   dlan@microsoft.com
RI Hritcu, Catalin/D-5964-2012
FU Microsoft Research; International Max Planck Research School for
   Computer Science
FX We thank Nikolaj Bjorner for his invaluable help in using Z3. James
   Margetson helped with F<SUP>#</SUP> programming issues. Paul Anderson,
   Ioannis Baltopoulos, Johannes Borgstrom, Nate Foster, Tim Harris, Ranjit
   Jhala, and Thorsten Tarrach commented on drafts. Discussions with Martin
   Abadi, Cliff Jones, Christoph Koch, Benjamin Pierce, and Dominique Unruh
   were useful, as were the comments of anonymous reviewers. Catalin Hritcu
   was supported by a fellowship from Microsoft Research and the
   International Max Planck Research School for Computer Science.
CR Abiteboul Serge., 2000, DATA WEB
   Aiken A., 1994, P 21 ACM SIGPLAN SIG
   Aiken A., 1993, P ICFP 03 8 ACM SIGP
   [Anonymous], 2006, YICES SMT SOLVER
   Aspinall D., 2005, ADV TOPICS TYPES PRO
   Aspinall D, 1994, LNCS, V933
   Backes M., 2011, P CPP 11 GEN APPR 2
   Barnett M., 2005, LECT NOTES COMPUT SC, V4111
   BARRETT C, 2007, LNCS, V4590
   Barrett C, 2008, INT J ARTIF INTELL T, V17, P569, DOI 10.1142/S0218213008004060
   Bengtson J., 2008, P CSF PITTSB PA US
   Benzaken V., 2003, P 8 ACM SIGPLAN INT
   Bierman G. M., 2010, MSRTR201099
   Bierman G. M., 2010, P 15 ACM SIGPLAN INT
   Bierman G. M., 2007, P 15 ACM SIGPLAN INT
   Bohme Sascha., 2008, LNCS, V5170
   Box D, 2010, UPDATE SQL SERVER MO
   BOYER RS, 1995, COMPUT MATH APPL, V29, P27, DOI 10.1016/0898-1221(94)00215-7
   BUNEMAN P, 1995, THEOR COMPUT SCI, V149, P3, DOI 10.1016/0304-3975(95)00024-Q
   Buneman P., 1999, LNCS, V1949
   Burstall R. M., 1980, C RECORD 1980 LISP C, P136
   Calcagno C, 2005, J FUNCT PROGRAM, V15, P543, DOI 10.1017/S0956796804005404
   Cartwright R., 1991, P PLDI TOR ONT CAN
   Castagna G, 2001, INFORM COMPUT, V168, P1, DOI 10.1006/inco.2000.3008
   Castagna G, 2005, LNCS, V3774
   Cohen S, 2006, P SIGMOD CHIC IL US
   Crockford D., 2006, 4627 RFC INT SOC
   Damm F, 1994, P TACS SEND JAP
   de Moura L. M., 2009, P FMCAD AUST TX US
   de Moura L. M., 2008, P TACAS BUD HUNG
   de Moura L, 2007, LECT NOTES ARTIF INT, V4603, P183
   Detlefs D, 2005, J ACM, V52, P365, DOI 10.1145/1066100.1066102
   Dunfield J., 2004, P 31 ACM SIGPLAN SIG
   DUNFIELD J, 2007, CMUCS07129
   Felleisen M, 2008, P 35 ACM SIGPLAN SIG
   Findler R. B., 2002, P 7 ACM SIGPLAN INT, P48
   Fisher K., 2006, P S PRINC PROGR LANG
   Flanagan C, 2006, P S PRINC PROGR LANG
   Freeman T., 1991, P ACM SIGPLAN 91 C P
   Frisch A, 2008, J ACM, V55, DOI 10.1145/1391289.1391293
   Geneves P., 2007, P ACM SIGPLAN 2007 C
   Giesl J, 1997, J AUTOM REASONING, V19, P1, DOI 10.1023/A:1005797629953
   Gordon A. D., 2002, P ISSS KYOT JAP
   Greenberg M., 2010, P 37 ACM SIGPLAN SIG
   Greve DA, 2008, J FUNCT PROGRAM, V18, P15, DOI 10.1017/S0956796807006338
   Hosoya H., 2000, P 5 ACM SIGPLAN INT
   Hosoya Haruo, 2003, ACM T INTERNET TECHN, V3, DOI DOI 10.1145/767193.767195
   JAFFAR J, 1994, J LOGIC PROGRAM, V20, P503, DOI 10.1016/0743-1066(94)90033-7
   Jhala Ranjit, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P470, DOI 10.1007/978-3-642-22110-1_38
   Jhala R., 2007, P TACAS BRAG PORT
   Jones C. B., 1986, SYSTEMATIC SOFTWARE
   Kawaguchi M, 2009, PLDI'09 PROCEEDINGS OF THE 2009 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P304, DOI 10.1145/1542476.1542510
   KING JC, 1976, COMMUN ACM, V19, P385, DOI 10.1145/360248.360252
   Knowles K, 2010, ACM T PROGR LANG SYS, V32, DOI 10.1145/1667048.1667051
   Knowles Kenneth., 2007, Sage: Unified hybrid checking for first-class types, general refinement types and dynamic
   Komondoor R., 2005, P 11 INT C TOOLS ALG
   Kopylov A, 2003, P 18 IEEE S LOG COMP
   Kuncak V, 2010, PLDI '10: PROCEEDINGS OF THE 2010 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P316, DOI 10.1145/1806596.1806632
   Leino K. R. M., 2009, P ACM S APPL COMP SA
   Lerner B., 2007, P PLDI SAN DIEG CA U
   Lovas W., 2007, P LFMTP BREM GERM
   McCarthy J, 1962, P IFIP C MUN GERM
   Meijer E., 2007, P SIGMOD BEIJ CHIN
   Meng J, 2008, J AUTOM REASONING, V40, P35, DOI 10.1007/s10817-007-9085-y
   Meyer B., 1992, Eiffel: The Language
   Microsoft Corporation, 2009, MICR COD NAM M MOD L
   Nordstrom B., 1983, P IFIP PAR FRANC
   PIERCE B, 1991, CMUCS91106
   Pierce BC, 2000, ACM T PROGR LANG SYS, V22, P1, DOI 10.1145/345099.345100
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Pratt V, 1983, P POPL AUST TX US
   RANISE S., 2006, The SMT-LIB standard: Version 1.2
   Reynolds J. C, 1996, ALGOL LIKE LANGUAGES, P173
   Rondon P., 2008, P PLDI TUCS AZ US
   Rushby J, 1998, IEEE T SOFTWARE ENG, V24, P709, DOI 10.1109/32.713327
   Saraswat V., 2008, P OOPSLA NASHV TN US
   Simeon J., 2003, P POPL NEW ORL US
   Sozeau M, 2006, LNCS, V4502
   Swamy N., 2010, P ESOP PAPH CYPR
   Terauchi T, 2010, P POPL MADR SPAIN
   Tobin-Hochstadt S., 2010, P 15 ACM SIGPLAN INT
   TypiCal Project, 2009, COQ PROOF ASS VERS 8
   Unno H., 2009, P 11 INT ACM SIGPLAN
   Wright AK, 1997, ACM T PROGR LANG SYS, V19, P87, DOI 10.1145/239912.239917
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
   Xi H., 1999, P 26 ACM SIGPLAN SIG
NR 86
TC 8
Z9 11
U1 0
U2 2
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD JAN
PY 2012
VL 22
BP 31
EP 105
DI 10.1017/S0956796812000032
PN 1
PG 75
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 915LY
UT WOS:000302029400003
OA Bronze
DA 2024-07-18
ER

PT J
AU Madhavapeddy, A
   Minsky, Y
   Eriksen, M
AF Madhavapeddy, Anil
   Minsky, Yaron
   Eriksen, Marius
TI CUFP 2011 Workshop Report
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
C1 [Madhavapeddy, Anil] Univ Cambridge, Comp Lab, Cambridge CB3 0FD, England.
   [Minsky, Yaron] Jane St Capital, New York, NY USA.
   [Eriksen, Marius] Twitter Inc, San Francisco, CA 94107 USA.
C3 University of Cambridge; Twitter, Inc.
RP Madhavapeddy, A (corresponding author), Univ Cambridge, Comp Lab, 15 JJ Thomson Ave, Cambridge CB3 0FD, England.
EM avsm2@cl.cam.ac.uk; yminsky@janestreet.com; marius@twitter.com
RI Taheri, Zahra/AAA-6362-2022
OI Taheri, Zahra/0000-0001-8636-2798; Madhavapeddy,
   Anil/0000-0001-8954-2428
CR Aditya S., 1995, P HASK WORKSH LA JOL, P35
   [Anonymous], 2004, P INT S COD GEN OPT
   Arvind, 1978, TR114A UC IRV
   Claessen Koen., 2000, Proceedings of the fifth ACM SIGPLAN international conference on Functional programming - ICFP'00, P268, DOI [10.1145/351240.351266, DOI 10.1145/351240.351266]
   Erkok Levent., 2009, PLPV, P73, DOI [10.1145/1481848.1481860, DOI 10.1145/1481848.1481860]
   Rishiyur S. N., 2008, SIGDA NEWSL, V38, P1
   Sagonas Konstantinos, 2007, Proceedings of the 9th International ACM SIGPLAN Conference on Principles and Practice of Declarative Programming (PPDP'07), DOI 10.1145/1273920.1273926
NR 7
TC 1
Z9 1
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD JAN
PY 2012
VL 22
BP 1
EP 8
DI 10.1017/S0956796812000020
PN 1
PG 8
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 915LY
UT WOS:000302029400001
DA 2024-07-18
ER

PT J
AU Friedmann, O
   Lange, M
AF Friedmann, Oliver
   Lange, Martin
TI More on balanced diets
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID ALGORITHM
AB Discrete Interval Encoding Trees are data structures for the representation of fat, i.e. densely populated sets over a discrete linear order. In this paper, we introduce algorithms for set-theoretic operations like intersection, union, etc. on sets represented as balanced diets. We empirically analyse their performance and show that these algorithms can outperform previously known algorithms on sets, such as the ones implemented in OCaml's standard library.
C1 [Friedmann, Oliver] Univ Munich, Dept Comp Sci, D-80539 Munich, Germany.
   [Lange, Martin] Univ Kassel, Dept Elect Engn & Comp Sci, Kassel, Germany.
C3 University of Munich; Universitat Kassel
RP Friedmann, O (corresponding author), Univ Munich, Dept Comp Sci, D-80539 Munich, Germany.
EM Oliver.Friedmann@gmail.com; Martin.Lange@uni-kassel.de
CR Adams S., 1993, J FUNCTIONAL PROGRAM, V3, P553
   ADELSONVELSKII GM, 1962, DOKL AKAD NAUK SSSR+, V146, P263
   Bayer R., 1972, Acta Informatica, V1, P290, DOI 10.1007/BF00289509
   Cormen T.H., 1992, INTRO ALGORITHMS
   Erwig M., 1998, Journal of Functional Programming, V8, P627, DOI 10.1017/S0956796898003116
   FILLIATRE JC, 2008, PATRICIA SET
   FRIEDMANN O, 2010, CAMLDIETS
   Guibas L.J., 1978, 19TH P ANN IEEE S F, P8
   Gwehenberger G., 1968, Elektronische Rechenanlagen, V10, P223
   Hinze Ralf, 1999, WAAAPL, V99, P89
   LEROY X, 2010, OCAML SET
   MORRISON DR, 1968, J ACM, V15, P514, DOI 10.1145/321479.321481
   Ohnishi S, 2003, LECT NOTES COMPUT SC, V2833, P920
   YORIYUKI Y, 2003, CAMOMILE SET
NR 14
TC 0
Z9 0
U1 1
U2 1
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD MAR
PY 2011
VL 21
BP 135
EP 157
DI 10.1017/S0956796810000328
PN 2
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 748GS
UT WOS:000289378800003
OA Bronze
DA 2024-07-18
ER

PT J
AU Sheeran, M
AF Sheeran, Mary
TI Functional and dynamic programming in the design of parallel prefix
   networks
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID CIRCUITS; GENERATION
AB A parallel prefix network of width n takes n inputs, a(1), a(2), ... , a(n), and computes each y(i) = a(1) circle a(2) circle ... a(i) for 1 <= i <= n, for an associative operator circle. This is one of the fundamental problems in computer science, because it gives insight into how parallel computation can be used to solve an apparently sequential problem. As parallel programming becomes the dominant programming paradigm, parallel prefix or scan is proving to be a very important building block of parallel algorithms and applications. There are many different parallel prefix networks, with different properties such as number of operators, depth and allowed fanout from the operators. In this paper, ideas from functional programming are combined with search to enable a deep exploration of parallel prefix network design. Networks that improve on the best known previous results are generated. It is argued that precise modelling in a functional programming language, together with simple visualization of the networks, gives a new, more experimental, approach to parallel prefix network design, improving on the manual techniques typically employed in the literature. The programming idiom that marries search with higher order functions may well have wider application than the network generation described here.
C1 Chalmers Univ Technol, CSE Dept, SE-41296 Gothenburg, Sweden.
C3 Chalmers University of Technology
RP Sheeran, M (corresponding author), Chalmers Univ Technol, CSE Dept, SE-41296 Gothenburg, Sweden.
EM ms@chalmers.se
FU Swedish Basic Research Funding Agency (Vetenskapsradet)
FX This research was funded by a grant from the Swedish Basic Research
   Funding Agency (Vetenskapsradet). Thanks to Emil Axelsson and Satnam
   Singh for constructive criticism of an earlier draft. Thanks to Joel
   Svensson for providing ideas on how to present the prefix networks, and
   to Koen Claessen for providing his purely functional memo function. Many
   thanks to the anonymous referees who made many constructive suggestions
   and forced me to think harder. My fascination with prefix networks grew
   out of my contacts with researchers at Intel Strategic CAD Labs.
CR Antoy S, 2010, COMMUN ACM, V53, P74, DOI 10.1145/1721654.1721675
   Axelsson E, 2005, 2005 IEEE International Conference on Microelectronic Systems Education, Proceedings, P119, DOI 10.1109/MSE.2005.55
   AXELSSON E, 2008, THESIS CHALMERS U TE
   AXELSSON E, 2010, P 8 ACM IEEE INT C F, P169
   BJESSE P, 1998, INT C FUNCT PROGR, P174
   Blelloch Guy, 1990, CMUCS90190 SCH COMP
   BRENT RP, 1982, IEEE T COMPUT, V31, P260, DOI 10.1109/TC.1982.1675982
   CHAN PK, 1992, IEEE T COMPUT, V41, P920, DOI 10.1109/12.156534
   CLAESSEN K, 2001, LNCS, V2144, P355
   Cormen Thomas H., 2001, INTRO ALGORITHMS
   Fich F.E., 1983, Proceedings of the fifteenth annual ACM symposium on Theory of computing, P100
   FICH FE, 1982, THESIS U CALIFORNIA
   Franchetti F, 2009, LECT NOTES COMPUT SC, V5658, P385, DOI 10.1007/978-3-642-03034-5_18
   GIEGERICH R, 2002, LECT NOTES INFORM, P3
   Gill A, 2009, LECT NOTES COMPUT SC, V6041, P18
   Han T., 1987, P 8 S COMPUTER ARITH, P49, DOI DOI 10.1109/ARITH.1987.6158699
   *HASK, 2009, WEB PAG GATH INF HAS
   Hinze R, 2004, LECT NOTES COMPUT SC, V3125, P186
   HINZE R, 2000, P 2 WORKSH GEN PROGR, P17
   JONES G, 1990, FORMAL METHODS FOR VLSI DESIGN, P13
   KNOWLES S, 1999, P 14 IEEE S COMP AR, P277
   Kogge P. M., 1973, IEEE Transactions on Computers, VC22, P786, DOI 10.1109/TC.1973.5009159
   LADNER RE, 1980, J ACM, V27, P831, DOI 10.1145/322217.322232
   Lakshmivarahan S., 1987, Proceedings of the 1987 International Conference on Parallel Processing, P58
   Lin YC, 2005, J PARALLEL DISTR COM, V65, P1585, DOI 10.1016/j.jpdc.2005.05.017
   Lin YC, 2003, J SUPERCOMPUT, V24, P279, DOI 10.1023/A:1022084814175
   Lin YC, 1999, INFORM PROCESS LETT, V70, P191, DOI 10.1016/S0020-0190(99)00058-7
   Lin YC, 2009, ACM T DES AUTOMAT EL, V14, DOI 10.1145/1455229.1455244
   Liu JH, 2007, ASIA S PACIF DES AUT, P609
   MARTEL C, 1995, PROCEEDINGS OF THE 12TH SYMPOSIUM ON COMPUTER ARITHMETIC, P42, DOI 10.1109/ARITH.1995.465378
   NAYLOR M, 2008, THESIS U YORK
   Naylor M, 2007, HASKELL'07: PROCEEDINGS OF THE ACM SIGPLAN 2007 HASKELL WORKSHOP, P37
   PIPPENGER N, 1987, IBM J RES DEV, V31, P235, DOI 10.1147/rd.312.0235
   Püschel M, 2005, P IEEE, V93, P232, DOI 10.1109/JPROC.2004.840306
   Sheeran M, 2004, LECT NOTES COMPUT SC, V3312, P6
   Sheeran M, 2003, LECT NOTES COMPUT SC, V2860, P4
   SHEERAN M, 2006, 20061 DEP COMP SCI E
   SINGH S, 1992, IFIP TRANS A, V5, P119
   Singh S, 2000, ANN IEEE SYM FIELD P, P145, DOI 10.1109/FPGA.2000.903401
   Sklansky J., 1960, IRE Transactions on Electronic computers, VEC-9, P226, DOI DOI 10.1109/TEC.1960.5219822
   SNIR M, 1986, J ALGORITHM, V7, P185, DOI 10.1016/0196-6774(86)90003-9
   SVENSSON J, 2010, P 7 INT WORKSH PRACT, P2059
   Voigtlander Janis, 2008, SIGPLAN Notices, V43, P29, DOI 10.1145/1480828.1480832
   VUILLEMIN J, 2006, COMMUNICATION
   WADLER P, 1992, NATO ASI SERIES F, V118
   Zhu HK, 2006, ACM T DES AUTOMAT EL, V11, P387, DOI 10.1145/1142155.1142162
NR 46
TC 7
Z9 7
U1 0
U2 1
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD JAN
PY 2011
VL 21
BP 59
EP 114
DI 10.1017/S0956796810000304
PN 1
PG 56
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 748GB
UT WOS:000289376900003
OA Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU [Anonymous]
AF [Anonymous]
TI Revised<SUP>6</SUP> Report on the Algorithmic Language Scheme PREFACE
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB Programming languages should be designed not by piling feature on top of feature, but by removing the weaknesses and restrictions that make additional features appear necessary. Scheme demonstrates that a very small number of rules for forming expressions, with no restrictions on how they are composed, suffice to form a practical and efficient programming language that is flexible enough to support most of the major programming paradigms in use today.
   Scheme was one of the first programming languages to incorporate first-class procedures as in the lambda calculus, thereby proving the usefulness of static scope rules and block structure in a dynamically typed language. Scheme was the first major dialect of Lisp to distinguish procedures from lambda expressions and symbols, to use a single lexical environment for all variables, and to evaluate the operator position of a procedure call in the same way as an operand position. By relying entirely on procedure calls to express iteration, Scheme emphasized the fact that tail-recursive procedure calls are essentially gotos that pass arguments. Scheme was the first widely used programming language to embrace first-class escape procedures, from which all previously known sequential control structures call be synthesized. A subsequent version of Scheme introduced the concept of exact and inexact number objects, an extension of Common Lisp's generic arithmetic. More recently, Scheme became the first programming language to support hygienic macros, which permit the syntax of a block-structured language to be extended in a consistent and reliable manner.
CR Abelson H., 1998, Higher Order Symbolic Computation, V11, P7, DOI 10.1023/A:1010051815785
   [Anonymous], 1991, POPL 91, DOI DOI 10.1145/99583.99607
   [Anonymous], 1996, Structure and interpretation of computer programs
   [Anonymous], REVISED REPORT ALGOR
   [Anonymous], 1987, SIGPLAN Notices, V22, P9
   BACKUS JW, 1963, COMMUN ACM, V6, P1, DOI 10.1145/366193.366201
   BARENDREGT HP, 1984, NIEUW ARCHIEF WISENK, V4, P337
   Bawden A., 1999, Proceedings of the 1999 ACM SIGPLAN. Workshop on Partial Evaluation and Semantics-Based Program Manipulation (PEPM'99), P4
   BAWDEN A, 1988, ACM C LISP FUNCT PRO, P86
   Bradner S., 1997, Key words for use in RFCs to Indicate Requirement Levels
   Burger RG, 1996, ACM SIGPLAN NOTICES, V31, P108, DOI 10.1145/249069.231397
   CLINGER W, 1985, 848 MIT
   CLINGER W, 1991, LISP POINTERS, V4, P1
   CLINGER W, 1986, SIGPLAN NOTICES, V21, P37
   CLINGER WD, 1990, SIGPLAN NOTICES, V25, P92, DOI 10.1145/93548.93557
   Clinger WD, 1998, ACM SIGPLAN NOTICES, V33, P174, DOI 10.1145/277652.277719
   CLINGER WD, 2005, SRFI 77 PRELIMINARY
   Clinger Will, 2005, SRFI 76 R6RS RECORDS
   COHEN D, 1980, HOLY WARS PLEA PEACE
   DAVIS M, 2006, UNICODE STANDARD ANN
   Dybvig R. K., 1993, LISP and Symbolic Computation, V5, P295, DOI 10.1007/BF01806308
   Dybvig R.K., 2003, SCHEME PROGRAMMING L, V3rd
   Dybvig R.Kent., 2005, CHEZ SCHEME VERSION
   DYBVIG RK, 2006, SRFI 93 R6RS SYNTAX
   FELLEISEN M, 2003, PROGRAMMING LANGUAGE
   FESSENDEN C, 1983, 137 IND U IND U COMP
   FLATT M, 2005, SRFI 75 R6RS UNICODE
   FLATT M, 2005, SRFI 83 R6RS LIB SYN
   Flatt Matthew., 2006, PLT MzScheme: Language manual
   FRIEDMAN DP, 1985, 153 IND U IND U COMP
   Gosling J., 2005, Java Language Specification, Vthird
   KOHLBECKER EE, 1986, THESIS INDIANA U
   Kohlbecker Eugene., 1986, P 1986 ACM C LISP FU, P151
   Leach P., 2005, TECHREPORT
   MATTHEWS J, 2004, P 15 C REWR TECHN AP
   MATTHEWS J, 2007, J FUNCTIONAL PROGRAM
   MATTHEWS J, 2005, P 6 WORKSH SCHEM FUN, P41
   *MIT DEP EL ENG CO, 1984, SCHEM MAN
   REES JA, 1982, AUG S LISP FUNCT PRO, P114
   Rees JonathanA., 1984, T MANUAL, V4th
   *SCHEM CHART, 2006, SCHEM STAND CHART
   STEELE GL, 1978, 452 MIT
   STEELE GL, 1978, 474 MIT ART INT LAB
   Steele Jr Guy L., 1990, COMMON LISP LANGUAGE
   SUSSMAN GJ, 1975, 349 MIT
   *TEX INSTR INC, 1985, TI SCHEM LANG REF MA
   *UN CONS, 2007, UN STAND VERS 5 0 0
   WADDELL O, 1999, THESIS INDIANA U
   WAITE WM, 1984, COMPILER CONSTRUCTIO
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
NR 50
TC 0
Z9 0
U1 0
U2 1
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD AUG
PY 2009
VL 19
SU S
BP 9
EP +
DI 10.1017/S0956796809990074
PG 283
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 495ZZ
UT WOS:000269938000001
OA Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Sewell, P
   Stoyle, G
   Hicks, M
   Bierman, G
   Wansbrough, K
AF Sewell, Peter
   Stoyle, Gareth
   Hicks, Michael
   Bierman, Gavin
   Wansbrough, Keith
TI Dynamic rebinding for marshalling and update, via redex-time and
   destruct-time reduction
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID PROGRAMMING LANGUAGE
AB Most programming languages adopt static binding, but for distributed programming an exclusive reliance on static binding is too restrictive: dynamic binding is required in various guises, for example, when a marshalled value is received from the network, containing identifiers that must be rebound to local resources. Typically, it is provided only by ad hoc mechanisms that lack clean semantics. In this paper, we adopt a foundational approach, developing core dynamic rebinding mechanisms as extensions to the simply typed call-by-value lambda calculus. To do so, we must first explore refinements of the call-by-value reduction strategy that delay instantiation, to ensure computations make use of the most recent versions of rebound definitions. We introduce redex-time and destruct-time strategies. The latter forms the basis for lambda(marsh) calculus that supports dynamic rebinding of marshalled values, while remaining as far as possible statically typed. We sketch an extension Of lambda(marsh) with concurrency and communication, giving examples showing how wrappers for encapsulating untrusted code can be expressed. Finally, we show that a high-level semantics for dynamic updating can also be based on the destruct-time strategy, defining lambda(update) calculus with simple primitives to provide type-safe updating of running code. We show how the ideas of this simple calculus extend to more real-world, module-level dynamic updating in the style of Erlang. We thereby establish primitives and a common semantic foundation for a variety of real-world dynamic rebinding requirements.
C1 [Sewell, Peter; Stoyle, Gareth] Univ Cambridge, Cambridge CB2 1TN, England.
   [Hicks, Michael] Univ Maryland, College Pk, MD 20742 USA.
   [Bierman, Gavin] Microsoft Res, Cambridge, England.
   [Wansbrough, Keith] Data Connect Ltd, Edinburgh, Midlothian, Scotland.
C3 University of Cambridge; University System of Maryland; University of
   Maryland College Park; Microsoft
RP Sewell, P (corresponding author), Univ Cambridge, Cambridge CB2 1TN, England.
EM Peter.Sewell@cl.cam.ac.uk; gareth@almostlogical.org; mwh@cs.umd.edu;
   gmb@microsoft.com; Keith.Wansbrough@lochan.org
OI Sewell, Peter/0000-0001-9352-1013
CR ABADI M, 1990, CONFERENCE RECORD OF THE SEVENTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P31, DOI 10.1145/96709.96712
   Ajmani S, 2006, LECT NOTES COMPUT SC, V4067, P452
   Altekar G, 2005, USENIX ASSOCIATION PROCEEDINGS OF THE 14TH USENIX SECURITY SYMPOSIUM, P287
   [Anonymous], 1995, C RECORD POPL 95 22, DOI DOI 10.1145/199448.199507
   [Anonymous], 2003, PPDP
   [Anonymous], REV SOFTWARE UPGRADE
   Ariola ZM, 2002, ANN PURE APPL LOGIC, V117, P95, DOI 10.1016/S0168-0072(01)00104-X
   Armstrong Joe, 1996, Concurrent Programming in Erlang
   BARKLUND J, 1999, ERLANG 4 7 IN PRESS
   Baumann A, 2005, USENIX ASSOCIATION PROCEEDINGS OF THE GENERAL TRACK: 2005 UNENIX ANNUAL TECHNICAL CONFERENCE, P279
   Baumann A., 2004, P WORKSH OP SYST ARC, P21
   BIERMAN G, 2003, P 8 ACM SIGPLAN INT, P99
   BIERMAN G, 2003, 568 U CAMBR COMP LAB
   BIERMAN G, 2003, P USE 2003 2 INT WOR
   BILLINGS J, 2006, P ML O6 2006 ACM SIG, P20
   BILLINGS J, 2005, THESIS U CAMBRIDGE
   *BOA, BOA WEBS
   BOYAPATI C, 2003, P ACM C OBJ OR PROGR, P403
   Cardelli L, 1998, LECT NOTES COMPUT SC, V1378, P140, DOI 10.1007/BFb0053547
   Carlsson Richard, 2004, Technical Report
   CHEN H, 2006, P 2 INT C VIRT EX EN, P35
   CHOTHIA T, 2000, ELECT NOTES THEOR CO, V41, P1
   Dami L, 1998, THEOR COMPUT SCI, V192, P201, DOI 10.1016/S0304-3975(97)00150-3
   *DLOP, POSIX DLOP SPEC
   Drossopoulou Sophia, 2002, P 1 WORKSH UN SOFTW
   DUGGAN D, 2000, LNCS, V2071, P85
   DUGGAN D, 2001, P 6 ACM SIGPLAN INT, P62, DOI DOI 10.1145/507635.507645
   FABRY RS, 1976, P 2 INT C SOFTW ENG, P470
   FELLEISEN M, 1992, THEOR COMPUT SCI, V103, P235, DOI 10.1016/0304-3975(92)90014-7
   FELLEISEN M, 1988, ACM C LISP FUNCT PRO, P52
   Felleisen Matthias, 1986, P IFIP TC 2WG22 WORK
   FOURNET C, 2007, LNCS, V1119, P406
   FRIEDER O, 1991, J SYST SOFTWARE, V14, P111, DOI 10.1016/0164-1212(91)90096-O
   FRONTANA JLV, 2001, THESIS STOCKHOLM
   GARRIGUE J, 1995, P FUJ INT WORKSH FUN
   GILMORE S, 1997, ECSLFCS97378 DEP COM
   Goldberg A., 1989, Smalltalk-80 : The Language
   Gunter Carl A., 1995, Proceedings of the Seventh International Conference on Functional Programming Languages and Computer Architecture. FPCA '95, P12, DOI DOI 10.1145/224164.224173
   GUPTA D, 1994, THESIS INDIAN I TECH
   Hashimoto M, 2000, LECT NOTES COMPUT SC, V1906, P198
   Hashimoto M, 2001, THEOR COMPUT SCI, V266, P249, DOI 10.1016/S0304-3975(00)00174-2
   HICKS M, 2000, LECT NOTES COMPUTER, V2071, P147
   HICKS M, 2000, MSCIS0007 U PENNS
   Hicks Michael, 2001, Ph. D. Dissertation
   HIRSCHOWITZ T, 2003, THESIS U PARIS 7
   JAGANNATHAN S, 1994, ACM T PROGR LANG SYS, V16, P456, DOI 10.1145/177492.177578
   *JAV, JAV PLATF DEB ARCH
   KISELYOV O, 2006, P ACM INT C FUNCT PR, P26
   Lee I., 1983, Ph.D. dissertation
   LEE SD, 1993, P ACM S PRINC PROGR, P479
   LEROY X, 2001, OBJECTIVE CAML SYSTE
   Lewis JeffreyR., 2000, POPL 2000, Proceedings of the 27th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, Boston, Massachusetts, USA, January 19-21, P108, DOI [DOI 10.1145/325694.325708, 10.1145/ 325694 . 325708]
   *MIT, MIT SCH
   Moreau L., 1998, Higher-Order and Symbolic Computation, V11, P233, DOI 10.1023/A:1010087314987
   MOREAU L, 1994, LECT NOTES COMPUTER, V844, P182
   Neamtiu I, 2006, ACM SIGPLAN NOTICES, V41, P72, DOI 10.1145/1133981.1133991
   NEEDHAM RM, 1993, DISTRIBUTED SYSTEMS, P315
   PAI VS, 1999, P USENIX ANN TECHN C, P106
   PETERSON J, 1997, YALEUDCSRR1135
   Potter S, 2005, USENIX ASSOCIATION PROCEEDINGS OF THE 19TH LARGE INSTALLATION SYSTEM ADMINISTRATION CONFERENCE, P47
   QUEINNEC C, 1993, LISP POINTERS ACM SI, V6, P11
   RIELY J, 1999, POPL 99, P93
   Rouaix F, 1996, COMPUT NETWORKS ISDN, V28, P1365, DOI 10.1016/0169-7552(96)00032-3
   SCHMITT A, 2002, IFIP C P, V223, P563
   Serra A, 2000, USENIX ASSOCIATION PROCEEDINGS OF THE 2000 USENIX ANNUAL TECHNICAL CONFERENCE, P225
   Sewell P, 1999, LECT NOTES COMPUT SC, V1686, P1
   Sewell P, 2000, P IEEE CSFW, P269, DOI 10.1109/CSFW.2000.856943
   Sewell P, 1997, LECT NOTES COMPUT SC, V1243, P391
   SEWELL P, 2004, UCAMCLTR605
   Sewell P, 2007, J FUNCT PROGRAM, V17, P547, DOI 10.1017/S0956796807006442
   Soules CAN, 2003, USENIX ASSOCIATION PROCEEDINGS OF THE GENERAL TRACK, P141
   *SQUEAK, SQUEAK SMALLT 80 PRO
   STOYLE G, 2006, THESIS U CAMBRIDGE
   Stoyle G, 2005, P 32 ACM SIGPLAN SIG, P183
   Walker D, 2000, ACM T PROGR LANG SYS, V22, P701, DOI 10.1145/363911.363923
   Walton C., 2001, ECSLFCS01425 U ED
   Welsh Matt., 2001, SIGOPS OPER SYST REV, V35, P230
NR 77
TC 3
Z9 3
U1 0
U2 1
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD JUL
PY 2008
VL 18
BP 437
EP 502
DI 10.1017/S0956796807006600
PN 4
PG 66
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 330BW
UT WOS:000257915300002
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Sulzmann, M
   Stuckey, PJ
AF Sulzmann, Martin
   Stuckey, Peter J.
TI HM(X) type inference is CLP(X) solving
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB The HM(X) system is a generalization of the Hindley/Milner system parameterized in the constraint domain X. Type inference is performed by generating constraints out of the program text, which are then solved by the domain-specific constraint solver X. The solver has to be invoked at the latest when type inference reaches a let node so that we can build a polymorphic type. A typical example of such an inference approach is Milner's algorithm W. We formalize an inference approach where the HM(X) type inference problem is first mapped to a CLP(X) program. The actual type inference is achieved by executing the CLP(X) program. Such an inference approach supports the uniform construction of type inference algorithms and has important practical consequences when it comes to reporting type errors. The CLP(X) style inference system, where X is defined by Constraint Handling Rules, is implemented as part of the Chameleon system.
C1 [Sulzmann, Martin] Natl Univ Singapore, Sch Comp, Singapore 117543, Singapore.
   [Stuckey, Peter J.] Univ Melbourne, Dept Comp Sci & Software Engn, NICTA Victoria Lab, Melbourne, Vic 3010, Australia.
C3 National University of Singapore; University of Melbourne
RP Sulzmann, M (corresponding author), Natl Univ Singapore, Sch Comp, S16 Level 5,3 Sci Dr 2, Singapore 117543, Singapore.
EM sulzmann@comp.nus.edu.sg; pjs@cs.mu.oz.au
OI Stuckey, Peter/0000-0003-2186-0459
CR AIKEN A, 1992, 7 IEEE S LOG COMP SC, P320
   ALVES S, 2002, ELECT NOTES THEOR CO, V64
   [Anonymous], P 14 ANN ACM S PRINC
   [Anonymous], 2005, Advanced Topics in Types and Programming Languages
   [Anonymous], 2003, Haskell 98 language and libraries: the revised report
   Birkedal L, 2001, THEOR COMPUT SCI, V258, P299, DOI 10.1016/S0304-3975(00)00025-6
   COQUERY E, 2002, P ICLP 02, V2401
   Damas L., 1982, C REC 9 ANN ACM S PR, P207, DOI DOI 10.1145/582153.582176
   DEMOEN B, 1999, P 22 AUSTR COMP SCI, P217
   DIETZEN S, 1991, LOGIC PROGRAMM, P372
   Eo H, 2004, NEW GENERAT COMPUT, V22, P1, DOI 10.1007/BF03037279
   FORDAN A, 1998, CP 98, P177
   Fruhwirth T., 1995, Constraint Programming: Basics and Trends. 1994 Chatillon Spring School. Selected Papers, P90
   FUH YC, 1990, THEOR COMPUT SCI, V73, P155, DOI 10.1016/0304-3975(90)90144-7
   GLYNN K, 2000, WORKSH RUL BAS CONST
   HENGLEIN F, 1993, ACM T PROGR LANG SYS, V15, P253, DOI 10.1145/169701.169692
   HENGLEIN F, 1992, SIMPLE CLOSURE ANAL
   Jaffar J, 1998, J LOGIC PROGRAM, V37, P1, DOI 10.1016/S0743-1066(98)10002-X
   Kanellakis ParisC., 1991, COMPUTATIONAL LOGIC, P444
   KENNEDY AJ, 1996, LIXRR9609
   LAKSHMAN TK, 1991, P 1991 INT S LOG PRO, P202
   Lee OS, 1998, ACM T PROGR LANG SYS, V20, P707, DOI 10.1145/291891.291892
   LIANG C, 1997, TAPSOFT 97
   Maher M. J., 1988, Proceedings of the Third Annual Symposium on Logic in Computer Science (Cat. No.88CH2608-8), P348, DOI 10.1109/LICS.1988.5132
   McAllester D, 2003, LECT NOTES COMPUT SC, V2706, P436
   MILNER R, 1978, J COMPUT SYST SCI, V17, P348, DOI 10.1016/0022-0000(78)90014-4
   Mitchell J., 2002, CONCEPTS PROGRAMMING
   MULLER M, 1994, 94R43 U NANC
   MYCROFT A, 1984, ARTIF INTELL, V23, P295, DOI 10.1016/0004-3702(84)90017-1
   NADATHUR G, 1988, 5 INT C S LOG PROGR
   Odersky M, 1999, THEOR PRACT OBJ SYST, V5, P35, DOI 10.1002/(SICI)1096-9942(199901/03)5:1<35::AID-TAPO4>3.0.CO;2-4
   Palsberg J, 1996, ACM T PROGR LANG SYS, V18, P519, DOI 10.1145/232706.232715
   POTTIER F, 1998, P 3 ACM SIGPLAN INT, P228
   Remy D., 1993, Theoretical Aspects Of Object-Oriented Programming. Types
   ROBINSON JA, 1965, J ACM, V12, P23, DOI 10.1145/321250.321253
   Stuckey P. J., 2005, ACM T PROGR LANG SYS, V27, P1
   Stuckey PJ, 2006, LECT NOTES COMPUT SC, V4279, P1
   STUCKEY PJ, 2004, P HASK 04 ACM PRESS, P80
   STUCKEY PJ, 2003, P 2003 ACM SIGPLAN W, P72
   STUCKEY PJ, 2003, P 5 INT WORKSH AUT D
   SULZMAN M, 2000, THESIS YALE U
   Sulzmann M, 2001, LECT NOTES COMPUT SC, V2024, P248
   SULZMANN M, 2007, CHAMELEON
   SULZMANN M, 1997, FOOL4
   Sulzmann Martin, 1999, ACRC99009 U S AUSTR
   Tarski, 1971, CYLINDRIC ALGEBRA
   Urban C, 2004, THEOR COMPUT SCI, V323, P473, DOI 10.1016/j.tcs.2004.06.016
   WADLER P, 1989, CONFERENCE RECORD OF THE SIXTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P60, DOI 10.1145/75277.75283
   ZENGER C, 1999, THESIS U KARLRUHE GE
NR 49
TC 10
Z9 11
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD MAR
PY 2008
VL 18
BP 251
EP 283
DI 10.1017/S0956796807006569
PN 2
PG 33
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 282BD
UT WOS:000254541700003
OA Bronze
DA 2024-07-18
ER

PT J
AU Narbel, P
AF Narbel, Philippe
TI Type sharing constraints and undecidability
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB Let A be a set of modules and parameterized modules including type sharing constraint specifications. We prove that determining the set of the effective modules described by A is undecidable. As a consequence, type sharing constraints are proved to be not always avoidable by constructive transformations.
C1 Univ Bordeaux 1, LaBRI, F-33405 Talence, France.
C3 Universite de Bordeaux; Centre National de la Recherche Scientifique
   (CNRS)
RP Narbel, P (corresponding author), Univ Bordeaux 1, LaBRI, 351 Cours Liberat, F-33405 Talence, France.
EM narbel@labri.fr
CR [Anonymous], ACM COMPUTING SURVEY, DOI DOI 10.1145/130844.130856
   [Anonymous], 2005, ADV TOPICS TYPES PRO
   [Anonymous], 2000, Generative programming: methods, tools, and applications
   Batory D., 1992, ACM Transactions on Software Engineering and Methodology, V1, P355, DOI 10.1145/136586.136587
   Biagioni E., 2001, Higher-Order and Symbolic Computation, V14, P309, DOI 10.1023/A:1014403914699
   DAVIS MD, 1985, COMPUTABILITY COMPLE
   GIBBONS J, 2003, IFIP WORK C GEN PROG
   GOGUEN JA, 1984, IEEE T SOFTWARE ENG, V10, P528, DOI 10.1109/TSE.1984.5010277
   HARPER R, 1993, ACM T PROGR LANG SYS, V15, P211, DOI 10.1145/169701.169696
   HARPER R, 2002, LECT NOTES
   HARPER R, 1987, C FUNCT LOG PROGR SP
   JONES MP, 1996, P 23 ACM S PRINC PRO, P68
   Leroy X., 1996, Journal of Functional Programming, V6, P667, DOI 10.1017/S0956796800001933
   MACQUEEN D, 1986, P 13 ANN ACM SIGPLAN, P277
   MILNER R, 1987, DEFINITION STANDARD
   NARBEL P, 2005, PROGRAMMATION FONCTI
   PAULSON LC, 1997, ML WORKING PROGRAMME
NR 17
TC 0
Z9 1
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD MAR
PY 2007
VL 17
BP 207
EP 214
DI 10.1017/S0956796806006204
PN 2
PG 8
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 148RQ
UT WOS:000245092700002
OA Bronze
DA 2024-07-18
ER

PT J
AU Xi, HW
AF Xi, Hongwei
TI Dependent ML - An approach to practical programming with dependent types
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB We present an approach to enriching the type system of ML with a restricted form of dependent types, where type index terms are required to be drawn from a given type index language L that is completely separate from run-time programs, leading to the DML(L) language schema. This enrichment allows for specification and inference of significantly more precise type information, facilitating program error detection and compiler optimization. The primary contribution of the paper lies in our language design, which can effectively support the use of dependent types in practical programming. In particular, this design makes it both natural and straightforward to accommodate dependent types in the presence of effects such as references and exceptions.
C1 Boston Univ, Dept Comp Sci, Boston, MA 02215 USA.
C3 Boston University
RP Xi, HW (corresponding author), Boston Univ, Dept Comp Sci, 111 Cummington St, Boston, MA 02215 USA.
EM hwxi@cs.bu.edu
CR ANDREWS PB, 1972, J SYMBOLIC LOGIC, V37, P385, DOI 10.2307/2272981
   ANDREWS PB, 1986, INTRO MATH LOGIC TRU
   [Anonymous], 1950, Journal of Symbolic Logic, DOI DOI 10.2307/2266967
   [Anonymous], 1984, Studies in Logic
   [Anonymous], 1998, Purely Functional Data Structures
   [Anonymous], P WORKSH ALG ASP ADV
   [Anonymous], 1992, Handbook of Logic in Computer Science
   [Anonymous], 1997, The Definition of Standard ML
   Augustsson L., 1998, Proceedings of the third ACM SIGPLAN international conference on Functional programming, ICFP '98, P239
   CHEN C, 2005, P 10 ACM SIGPLAN INT, P66
   CHEN C, 2005, J FUNCTIONAL PROGRAM, V15, P1
   CHEN C, 2005, FUNDAMENTA INFORM, V69, P103
   CHEN CY, 2003, PEPM 03, P20
   CHENEY J, 2003, CUCISTR20031901
   Church A., 1940, J. Symbolic Logic, V5, P56, DOI [10.2307/2266170, DOI 10.2307/2266170]
   Constable R L, 1986, Implementing mathematics with the Nuprl proof development system
   Dantzig GB., 1973, Journal of Combinatorial Theory (A), V14, P288, DOI DOI 10.1016/0097-3165(73)90004-6
   DANVY O, 1998, J FUNCTIONAL PROGRAM, V8, P621, DOI DOI 10.1017/S0956796898003104
   DOWEK G, 1993, 154 INRIA
   Dunfield J, 2003, LECT NOTES COMPUT SC, V2620, P250
   DUNFIELD J, 2002, CMUCS02182
   DUNFIELD J, 2004, 31 ANN S PRINC PROGR, P281
   FREEMAN T, 1991, SIGPLAN NOTICES, V26, P268, DOI 10.1145/113446.113468
   Girard Jean-Yves, 1972, THESIS U PARIS 7 PAR
   Griffin T., 1990, P 17 ANN ACM S PRINC, DOI 10.1145/96709.96714
   HARPER R, 1994, INFORM PROCESS LETT, V51, P201, DOI 10.1016/0020-0190(94)90120-1
   HAYASHI S, 1988, PX COMPUTATIONAL LOG
   Hinze R, 2001, J FUNCT PROGRAM, V11, P493, DOI 10.1017/S095679680100404X
   Hongwei Xi, 2003, SIGPLAN Notices, V38, P224, DOI 10.1145/640128.604150
   HUGHES J, 1996, P POPL 96, P410
   *INRIA, OBJ CAML
   JAY CB, 1996, 9609 U TECN
   JONES SP, 1999, HASKELL 98 NONSTRICT
   JONES SP, 2005, SIMPLE UNIFICATION B
   Kahrs S, 2001, J FUNCT PROGRAM, V11, P425
   KREITZ C, 1998, LECT NOTES ARTIF INT, V1421, P317
   Martin-Lof P., 1984, Intuitionistic type theory
   MARTINLOF P, 1985, MATH LOGIC PROGRAMMI
   MCBRIDE C, EPIGRAM
   MICHAYLOV S, 1992, CMUCS92168
   MITCHELL JC, 1988, ACM T PROGR LANG SYS, V10, P470, DOI 10.1145/44501.45065
   MITCHELL JC, 1989, CONT MATH, V92, P301
   ODERSKY M, 2001, POPL, P41
   OWRE S, 1996, LNCS, V1102, P411
   PARENT C, 1995, LNCS, V947, P351
   PFENNING F, IN PRESS COMPUTATION
   Pfenning F., 1988, PLDI'88: Proceedings of the ACM SIGPLAN 1988 conference on Programming Language design and Implementation', P199
   Pierce B.C., 1998, POPL, P252
   POTTIER F, 2006, P 33 ACM S PRINC PRO, P232
   PUGH W, 1994, CSTR3371 U MAR
   PUGH W, 1992, ACM SIGPLAN 92 C PRO, P140
   SANNELLA D, 1989, ECSLFCS8971 U ED DEP
   SHEARD T, 2004, P ONW TRACK OBJ PROG
   SHOSTAK RE, 1977, J ACM, V24, P529, DOI 10.1145/322033.322034
   SULZMANN M, 1997, P 4 INT WORKSH FDN O
   TAKAHASHI M, 1995, INFORM COMPUT, V118, P120, DOI 10.1006/inco.1995.1057
   Wand Mitchell, 1985, LECT NOTES COMPUTER, P219, DOI 10.1007/3-540-15648-8_17
   WESTBROOK E, 2005, P 10 ACM SIGPLAN INT, P268
   WI H, 1998, THESIS CARNEGIE MELL
   WRIGHT A, 1995, J LISP SYMBOLIC COMP, V8, P343
   Xi Hongwei., 2005, APPL TYPE SYSTEM
   Xi Hongwei., 1999, Proceedings of the 26th ACM SIGPLAN-SIGACT symposium on Principles of programming languages, P214
   Xi Hongwei., 2004, POSTWORKSHOP P TYPES, P394
   Xi HW, 2003, J UNIVERS COMPUT SCI, V9, P851
   Xi HW, 1998, ACM SIGPLAN NOTICES, V33, P249, DOI 10.1145/277652.277732
   Zenger C, 1997, THEOR COMPUT SCI, V187, P147, DOI 10.1016/S0304-3975(97)00062-5
   ZENGER C, 1998, THESIS U KARLSRUHE
NR 67
TC 43
Z9 48
U1 1
U2 3
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD MAR
PY 2007
VL 17
BP 215
EP 286
DI 10.1017/S0956796806006216
PN 2
PG 72
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 148RQ
UT WOS:000245092700003
OA Bronze
DA 2024-07-18
ER

PT J
AU Hinze, R
AF Hinze, Ralf
TI Generics for the masses
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 9th International Conference on Functional Programming
CY SEP 19-21, 2004
CL Snowbird, UT
SP ACM SIGPLAN
ID HASKELL
AB A generic function is a function that can be instantiated on many data types to obtain data type specific functionality. Examples of generic functions are the functions that can be derived in Haskell, such as show, read, and '=='. The recent years have seen a number of proposals that support the definition of generic functions. Some of the proposals define new languages, some define extensions to existing languages. As a common characteristic none of the proposals can be made to work within Haskell 98: they all require something extra, either a more sophisticated type system or an additional language construct. The purpose of this paper is to show that one can, in fact, program generically within Haskell 98 obviating to some extent the need for fancy type systems or separate tools. Haskell's type classes are at the heart of this approach: they ensure that generic functions can be defined succinctly and, in particular, that they can be used painlessly. We detail three different implementations of generics both from a practical and from a theoretical perspective.
C1 Univ Bonn, Inst Informat 3, D-53117 Bonn, Germany.
C3 University of Bonn
RP Hinze, R (corresponding author), Univ Bonn, Inst Informat 3, Romerstr 164, D-53117 Bonn, Germany.
EM ralf@informatik.uni-bonn.de
CR ALIMARINE A, 2001, P 13 INT WORKSH IMPL, P257
   [Anonymous], 1989, P 4 INT S FUNCT PROG
   [Anonymous], 2003, The Fun of Programming
   [Anonymous], 2003, Haskell 98 language and libraries: the revised report
   Backhouse R, 1999, LECT NOTES COMPUT SC, V1608, P28
   BOHM C, 1985, THEOR COMPUT SCI, V39, P135, DOI 10.1016/0304-3975(85)90135-5
   Cheney J., 2002, P 2002 ACM SIGPLAN W, P90, DOI DOI 10.1145/581690.581698
   CLARKE P, 2002, P IFIP TC2 WORK C GE, P21
   Crary K, 1999, ACM SIGPLAN NOTICES, V34, P233, DOI 10.1145/317765.317906
   CRARY K, 1998, P 1998 ACM SIGPLAN I, P301
   *GHC, 2005, TEAM GLOR GLASG HASK
   Girard J.-Y., 1972, PhD thesis
   HARPER R, 1995, 22 ACM S PRINC PROGR, P130
   Hinze R, 2005, J FUNCT PROGRAM, V15, P1, DOI 10.1017/S0956796804005313
   Hinze R, 2003, LECT NOTES COMPUT SC, V2793, P1
   Hinze R, 2003, LECT NOTES COMPUT SC, V2793, P57
   Hinze R, 2004, SCI COMPUT PROGRAM, V51, P117, DOI 10.1016/j.scico.2003.07.001
   Hinze R, 2002, SCI COMPUT PROGRAM, V43, P129, DOI 10.1016/S0167-6423(02)00025-4
   HINZE R, 2001, ELECT NOTES THEORETI
   JANSSON P, 1997, 24 ACM SIGPLAN SIGAC, P470
   Jones MP, 2000, LECT NOTES COMPUT SC, V1782, P230
   JONES SP, 2004, UNPUB WOBBLY TYPES T
   Lämmel R, 2003, ACM SIGPLAN NOTICES, V38, P26, DOI 10.1145/640136.604179
   LAMMEL R, 2005, P 2005 INT C FUNCT
   Lammel Ralf., 2004, ICFP 04, P244
   LEVIANT D, 1983, P 24 ANN IEEE S FDN, P460
   LOH A, 2004, THESIS UTRECHT U
   LOH A, 2005, UUCS2005004
   MEIJER E, 1991, LECT NOTES COMPUT SC, V523, P124
   NORELL U, 2003, IMPLEMENTATION FUNCT, P168
   Okasaki C, 1997, ACM SIGPLAN NOTICES, V32, P66, DOI 10.1145/258949.258956
   Oliveira BrunoC. d. S., 2005, HASKELL 05, P98, DOI DOI 10.1145/1088348.1088358
   PARIGOT M, 1992, THEOR COMPUT SCI, V94, P335, DOI 10.1016/0304-3975(92)90042-E
   SHEARD T, 2002, ACM SIGPLAN HASK WOR, P1
   Trifonov Valery, 2000, P 5 ACM SIGPLAN INT, P27, DOI [10.1145/351240.351248, DOI 10.1145/351240.351248]
   VISSER E, 2000, P 2 WORKSH GEN PROGR, P86
   Wadler Philip, 2003, The Fun of Programming Cornerstones of Computing, P223
   Weirich S, 2001, LECT NOTES COMPUT SC, V2028, P92
   WEIRICH S, 2003, HIGHER ORDER INTENSI
NR 39
TC 28
Z9 28
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD JUL-SEP
PY 2006
VL 16
BP 451
EP 483
DI 10.1017/S0956796806006022
PN 4-5
PG 33
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 079KJ
UT WOS:000240174500004
OA Bronze
DA 2024-07-18
ER

PT J
AU Mcnamara, B
   Smaragdakis, Y
AF Mcnamara, B
   Smaragdakis, Y
TI Functional programming with the FC plus plus library
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
AB We describe the FC++ library, a rich library supporting functional programming in C++. Prior approaches to encoding higher order functions in C++ have suffered with respect to polymorphic functions from either lack of expressiveness or high complexity. In contrast, FC++ offers full and concise support for higher-order polymorphic functions through a novel use of C++ type inference. The FC++ library has a number of useful features, including a generalized mechanism to implement currying in C++, a "lazy list" class which enables the creation of "infinite data structures", a subtype polymorphism facility, and an extensive library of useful functions, including a large part of the Haskell Standard Prelude. The FC++ library has an efficient implementation. We show the results of a number of experiments which demonstrate the value of optimizations we have implemented. These optimizations have improved the run-time performance by about an order of magnitude for some benchmark programs that make heavy use of FC++ lazy lists. We also make an informal performance comparison with similar programs written in Haskell.
C1 Georgia Inst Technol, Coll Comp, Atlanta, GA 30332 USA.
C3 University System of Georgia; Georgia Institute of Technology
RP Mcnamara, B (corresponding author), Georgia Inst Technol, Coll Comp, 801 Atlantic Dr, Atlanta, GA 30332 USA.
RI Smaragdakis, Yannis/AAM-2851-2021
CR Alexandrescu A., 2001, Modern C++ Design
   BOEHM H, 2002, BOHEM DEMERS WEISER
   DAMI L, 1991, MORE FUNCTIONAL REUS, P85
   FOKKER J, 1995, FUNCTIONAL PROGRAMMI
   HAMILTON J, 1997, P C OBJ OR TECHN SYS
   *ISO, 1998, 14882 ISOIEC
   JARVI J, 2002, BOOST LAMBDA LIB
   JOHNSON RE, 1988, J OBJECT-ORIENT PROG, V1, P22
   KFOURY AJ, 1992, INFORM COMPUT, V98, P228, DOI 10.1016/0890-5401(92)90020-G
   KISELYOV O, 1998, INT C FUNCT PROGR BA
   LAUFER K, 1995, P C OBJ OR TECHN COO
   MCNAMARA B, 2000, WORKSH C TEMPL PROGR
   MCNAMARA B, 2000, P INT C FUNCT PROGR
   MEIJER E, 2000, DAGST SEM 99081
   ODERSKY M, 1997, ACM S PRINC PROGR LA
   PEYTONJONES S, 1999, REPORT PROGRAMMING L
   Siek Jeremy, 2000, WORKSH C TEMPL PROGR
   SMARAGDAKIS Y, 2002, SOFTWARE PRACT EXPER
   STEPANOV A, STANDARD TEMPLATE LI
   STRIEGNITZ J, 2001, FACT FUNCTIONAL SIDE
   STROUSTRUP B, 1996, P 2 ACM HIST PROGR L, P699
   Veldhuizen T., 1995, C++ Report, V7, P26
   WADLER P, 1990, PROCEEDINGS OF THE 1990 ACM CONFERENCE ON LISP AND FUNCTIONAL PROGRAMMING, P61, DOI 10.1145/91556.91592
   Wadler P., 1998, WORKSH STAND ML BALT
NR 24
TC 11
Z9 13
U1 0
U2 0
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 40 WEST 20TH ST, NEW YORK, NY 10011-4211 USA
SN 0956-7968
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD JUL
PY 2004
VL 14
BP 429
EP 472
DI 10.1017/S0956796803004969
PN 4
PG 44
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 835AQ
UT WOS:000222452400003
OA Bronze
DA 2024-07-18
ER

PT J
AU Ranta, A
AF Ranta, A
TI A type-theoretical grammar formalism
SO JOURNAL OF FUNCTIONAL PROGRAMMING
LA English
DT Article
ID LANGUAGE; ALGORITHM
AB Grammatical Framework (GF) is a special-purpose functional language for defining grammars. It uses a Logical Framework (LF) for a description of abstract syntax, and adds to this a notation for defining concrete syntax. GF grammars themselves are purely declarative, but can be used both for linearizing syntax trees and parsing strings. GF can describe both formal and natural languages. The key notion of this description is a grammatical object, which is not just a string, but a record that contains all information on inflection and inherent grammatical features such as number and gender in natural languages, or precedence in formal languages. Grammatical objects have a type system, which helps to eliminate run-time errors in language processing. In the same way as a LF, GF uses dependent types in abstract syntax to express semantic conditions, such as well-typedness and proof obligations. Multilingual grammars, where one abstract syntax has many parallel concrete syntaxes, can be used for reliable and meaning-preserving translation. They can also be used in authoring systems, where syntax trees are constructed in an interactive editor similar to proof editors based on LF. While being edited, the trees can simultaneously be viewed in different languages. This paper starts with a gradual introduction to GF, going through a sequence of simpler formalisms till the full power is reached. The introduction is followed by a systematic presentation of the GF formalism and outlines of the main algorithms: partial evaluation and parser generation. The paper concludes by brief discussions of the Haskell implementation of GF, existing applications, and related work.
C1 Chalmers Univ Technol, Dept Comp Sci, S-41296 Gothenburg, Sweden.
   Univ Gothenburg, S-41296 Gothenburg, Sweden.
C3 Chalmers University of Technology; University of Gothenburg
RP Chalmers Univ Technol, Dept Comp Sci, S-41296 Gothenburg, Sweden.
EM aarne@cs.chalmers.se
CR ABRUSCI VM, 1990, Z MATH LOGIK, V36, P297, DOI 10.1002/malq.19900360405
   [Anonymous], COMPOSITIONAL TRANSL
   [Anonymous], 1999, SURVEY EXISTING INTE
   [Anonymous], 1993, Partial Evaluation and Automatic Program Generation
   [Anonymous], 1965, NATURAL DEDUCTION
   AUGUSTSSON L, 1998, P ICFP 98
   Bar-Hillel Y, 1953, LANGUAGE, V29, P47, DOI 10.2307/410452
   BESCHERELLE, 1997, CONJUGAISON TOUS
   *BOEING COMP, 2001, BOEING SIMPL ENGL CH
   Bresnan J, 1982, MENTAL REPRESENTATIO
   Carlsson Magnus., 1998, THESIS CHALMERS U TE
   Constable R L, 1986, Implementing mathematics with the Nuprl proof development system
   *COQ DEV TEAM, 1999, COQ PROOF ASS REF MA
   Coquand T, 1996, SCI COMPUT PROGRAM, V26, P167, DOI 10.1016/0167-6423(95)00021-6
   COSCOY Y, 1995, P 2 INT C TYP LAMBD, V902, P109
   Curry Haskell., 1961, Structure of Language and its Mathematical Aspects, number 12 in Proceedings of Symposia in Applied Mathematics, DOI [10.1090/psapm/012/9981., DOI 10.1090/PSAPM/012/9981]
   DEBRUIJN NG, 1994, SELECTED PAPERS AUTO, P56
   DONZEAUGOUGE V, 1975, INT COMPUTING S ICS
   DYMETMAN M, 2000, XML MULTILINGUAL DOC, P243
   EARLEY J, 1970, COMMUN ACM, V13, P94, DOI 10.1145/362007.362035
   FIEDLER A, 2001, THESIS U SAARLANDES
   FROST R, 1989, COMPUT J, V32, P108, DOI 10.1093/comjnl/32.2.108
   HAHNLE R, 2002, 2306 LNCS, P233
   Hallgren T, 2000, LECT NOTES ARTIF INT, V1955, P70, DOI 10.1007/3-540-44404-1_6
   HALLGREN T, 2000, HOME PAGE PROOF EDIT
   HARPER R, 1993, J ACM, V40, P143, DOI 10.1145/138027.138060
   Hopcroft J.E., 1979, Introduction to Automata Theory, Languages, and Computation
   HUDAK P, 1996, ACM COMPUT SURV, V28
   HUET G, 2000, SANSKRIT SITE PROGRA
   Huet Gerard P., 1997, Journal of Functional Programming, V7, P549
   JOHANNISSON K, 2001, JOINT WINT M COMP SC
   Johnson StephenC., 1975, YACC YET ANOTHER COM
   JONES M, 1995, USING TYPES PARSE NA
   Jones S.P., 1999, REPORT PROGRAMMING L
   Joshi Aravind K., 1985, Natural Language Parsing: Psychological, Computational, and Theoretical Perspectives, P206, DOI [DOI 10.1017/CBO9780511597855, DOI 10.1017/CBO9780511597855.007]
   Kay M., 1997, Machine Translation, V12, P3, DOI 10.1023/A:1007911416676
   Knuth D. E., 1968, Mathematical Systems Theory, V2, P127, DOI 10.1007/BF01692511
   Lambek J., 1958, American Mathematical Monthly, V65, P154, DOI [DOI 10.1080/00029890.1958.11989160, 10.2307/2310058]
   Luo ZH, 1999, LECT NOTES ARTIF INT, V1582, P231, DOI 10.1007/3-540-48975-4_12
   Luo Zhaohui., 1992, LEGO PROOF DEV SYSTE
   MAENPAA P, 1999, PLI1999 WORKSH LOG F
   MAGNUSSON L, 1994, LECT NOTES COMPUTER, V806, P213
   Marlow Simon, 2001, HAPPY PARSER GENERAT
   Martin-Lof P., 1984, Intuitionistic type theory
   MONTAGUE R, 1974, FORMAL PHILOSOPHY
   MORRILL G, 1994, TYPE LOGICAL GRAMMER
   Necula G.C., 1997, 24 ANN S PRINCIPLES, P106
   PAULSON L, 2002, ISABELLE REF MANUAL
   PENTUS M, 1993, LICS, P35
   PEREIRA FCN, 1980, ARTIF INTELL, V13, P231, DOI 10.1016/0004-3702(80)90003-X
   Peterka R J, 1990, J Vestib Res, V1, P61
   Pollard Carl J., 1994, Head-driven phrase structure grammar
   Power R., 1998, MULTILINGUAL AUTHORI
   Ranta A, 1994, Type-Theoretical Grammar
   RANTA A, 2002, GRAMMATICAL FRAMEWOR
   RANTA A, 2001, DIALOGUE SYSTEMS PRO
   Shieber S. M., 2003, INTRO UNIFICATION BA
   Steedman M., 1988, Combinators and grammars, P417
   TEITELBAUM T, 1981, COMMUN ACM, V24, P563, DOI 10.1145/358746.358755
   Warmer J., 1999, AW OBJ TECHNOL S
NR 60
TC 78
Z9 87
U1 0
U2 4
PU CAMBRIDGE UNIV PRESS
PI NEW YORK
PA 32 AVENUE OF THE AMERICAS, NEW YORK, NY 10013-2473 USA
SN 0956-7968
EI 1469-7653
J9 J FUNCT PROGRAM
JI J. Funct. Program
PD MAR
PY 2004
VL 14
BP 145
EP 189
DI 10.1017/S0956796803004738
PN 2
PG 45
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 809LL
UT WOS:000220638100003
OA Bronze
DA 2024-07-18
ER

EF