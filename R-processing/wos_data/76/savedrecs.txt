FN Clarivate Analytics Web of Science
VR 1.0
PT J
AU Soldani, J
   Forti, S
   Brogi, A
AF Soldani, Jacopo
   Forti, Stefano
   Brogi, Antonio
TI yRCA: An explainable failure root cause analyser
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Microservices; Cascading failures; Root cause analysis; Explainability;
   Declarative reasoning
AB Modern applications integrate heterogeneous microservices that can fail due to different reasons. Determining the root causes of microservices' failures and explaining how failures propagate across microservices are hence two crucial issues. We present yRCA, an open -source tool that - starting from distributed application logs - enables identifying failure cascades explaining why an observed failure happened in an application, by exploiting cause-effect relations among the failures of its microservices.& COPY; 2023 Elsevier B.V. All rights reserved.
C1 [Soldani, Jacopo; Forti, Stefano; Brogi, Antonio] Univ Pisa, Dept Comp Sci, Pisa, Italy.
C3 University of Pisa
RP Soldani, J (corresponding author), Univ Pisa, Dept Comp Sci, Pisa, Italy.
EM jacopo.soldani@unipi.it
RI Forti, Stefano/I-3083-2018
OI Forti, Stefano/0000-0002-4159-8761; Soldani, Jacopo/0000-0002-2435-3543;
   Brogi, Antonio/0000-0003-2048-2468
CR Aggarwal P, 2021, LECT NOTES COMPUT SC, V12632, P137, DOI 10.1007/978-3-030-76352-7_17
   [Anonymous], GRAYL EXT LOG FORM
   Elasticsearch, LOGST
   Kratzke N, 2017, J SYST SOFTWARE, V126, P1, DOI 10.1016/j.jss.2017.01.001
   Liu P, 2020, PROC INT SYMP SOFTW, P48, DOI 10.1109/ISSRE5003.2020.00014
   Meng Y, 2020, 2020 IEEE/ACM 28TH INTERNATIONAL SYMPOSIUM ON QUALITY OF SERVICE (IWQOS), DOI 10.1109/iwqos49365.2020.9213058
   Myunghwan Kim, 2013, Performance Evaluation Review, V41, P93
   Netflix, CHAOS MONK
   Newman S., 2021, BUILDING MICROSERVIC
   Soldani J, 2023, ACM COMPUT SURV, V55, DOI 10.1145/3501297
   Soldani J, 2021, COMM COM INF SC, V1462, P101, DOI 10.1007/978-3-030-86507-8_10
   Soldani J, 2022, LECT NOTES COMPUT SC, V13272, P74, DOI 10.1007/978-3-031-16092-9_6
   Wang LZ, 2020, 2020 IEEE 13TH INTERNATIONAL CONFERENCE ON WEB SERVICES (ICWS 2020), P142, DOI 10.1109/ICWS49710.2020.00026
   Waseem M, 2021, J SYST SOFTWARE, V182, DOI 10.1016/j.jss.2021.111061
   Weaveworks, SOCK SHOP
   Wu L, 2020, IEEE IFIP NETW OPER, DOI 10.1109/noms47738.2020.9110353
NR 16
TC 0
Z9 0
U1 1
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD AUG
PY 2023
VL 230
AR 102997
DI 10.1016/j.scico.2023.102997
EA JUL 2023
PG 7
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA O9SV7
UT WOS:001047152900001
DA 2024-07-18
ER

PT J
AU Kauffman, S
AF Kauffman, Sean
TI Log analysis and system monitoring with nfer
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 23rd International Conference on Coordination Models and Languages
   (COORDINATION)
CY JUN 14-18, 2021
CL ELECTR NETWORK
DE Log analysis; Runtime verification; Trace abstraction
AB Nfer is a tool that implements the eponymous language for log analysis and monitoring. Users write rules to calculate new information from an event stream such as a program log either offline or online. In addition to a command-line program, nfer exposes interfaces in Python and R and can generate monitors for embedded systems. Nfer is designed to be fast and has been repeatedly demonstrated to outperform similar tools. (c) 2022 The Author(s). Published by Elsevier B.V. This is an open access article under the CC BY license (http://creativecommons.org/licenses/by/4.0/).
C1 [Kauffman, Sean] Aalborg Univ, Aalborg, Denmark.
C3 Aalborg University
RP Kauffman, S (corresponding author), Aalborg Univ, Aalborg, Denmark.
EM seank@cs.aau.dk
OI Kauffman, Sean/0000-0001-6341-3898
FU ERC [ERC-2014-ADG]; Villum Foundation
FX Funded by the ERC (LASSO) grant ERC-2014-ADG and the Villum Foundation
   (S4OS).
CR Havelund K, 2021, LECT NOTES COMPUT SC, V13085, P66, DOI 10.1007/978-3-030-92124-8_4
   Holzmann G.J, 2021, COMP 2 METHODS CHECK, P127
   Kauffman S., 2022, US
   Kauffman S, 2022, LECT NOTES COMPUT SC, V13299, P388, DOI 10.1007/978-3-031-10363-6_26
   Kauffman S, 2021, LECT NOTES COMPUT SC, V13085, P103, DOI 10.1007/978-3-030-92124-8_6
   Kauffman S, 2021, J SYST ARCHITECT, V113, DOI 10.1016/j.sysarc.2020.101876
   Kauffman S, 2018, FORM METHOD SYST DES, V53, P54, DOI 10.1007/s10703-018-0317-z
   Kauffman S, 2017, 6TH INTERNATIONAL WORKSHOP ON SOFTWARE MINING (SOFTWAREMINING), P1, DOI 10.1109/SOFTWAREMINING.2017.8100847
   Kauffman S, 2016, LECT NOTES COMPUT SC, V9953, P394, DOI 10.1007/978-3-319-47169-3_31
   Kauffman S, 2016, LECT NOTES COMPUT SC, V10012, P235, DOI 10.1007/978-3-319-46982-9_15
   Narayan A., 2017, SIL ERR LOG SYST EFF
NR 11
TC 1
Z9 1
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN
PY 2023
VL 225
SI SI
AR 102909
DI 10.1016/j.scico.2022.102909
EA NOV 2022
PG 4
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 7T5ZH
UT WOS:000911523700010
OA hybrid
DA 2024-07-18
ER

PT J
AU Zhang, Q
   Xu, L
   Zhang, XY
   Xu, BW
AF Zhang, Qiang
   Xu, Lei
   Zhang, Xiangyu
   Xu, Baowen
TI Quantifying the interpretation overhead of Python
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Python; Interpreter; CPython; Overhead; Performance analysis
AB While Python has become increasingly popular for its convenience, it is also criticized for its suboptimal performance. To figure out what burdens the interpreter of Python and provide insights into possible optimizations, we conduct this empirical study on CPython's performance via sampling-based profiling. This sampling-based approach incurs a low runtime overhead and does not require any modification of the interpreter and the application code, thus providing convincing experimental results. Specifically, we use 48 benchmarks from the pyperformance project to analyze the runtime overhead of the interpreter. We compare the usage of different opcodes and decompose the overhead at various granularities (e.g., files, functions, and statements). It turns out that most parts contribute a small portion of the overhead, and the promising improvements lie in the minority, such as name access opcodes and reference counting functions. Furthermore, we pay attention to four specific performance-affecting issues: name access, dynamic typing, garbage collection, and opcode dispatch. The issue study reveals several promising optimization techniques, such as register-based virtual machine architecture and tracing based garbage collection, as well as a few fruitless optimization points, such as operator overloading and dispatch. (c) 2021 Elsevier B.V. All rights reserved.
C1 [Zhang, Qiang; Xu, Lei; Xu, Baowen] Nanjing Univ, Dept Comp Sci & Technol, Nanjing, Jiangsu, Peoples R China.
   [Zhang, Xiangyu] Purdue Univ, Dept Comp Sci, W Lafayette, IN 47907 USA.
C3 Nanjing University; Purdue University System; Purdue University
RP Xu, L (corresponding author), Nanjing Univ, Dept Comp Sci & Technol, Nanjing, Jiangsu, Peoples R China.
EM zq@smail.nju.edu.cn; xlei@nju.edu.cn; xyzhang@cs.purdue.edu;
   bwxu@nju.edu.cn
RI Xu, Baowen/IXW-4882-2023; Zhang, Xiangyu/ABC-2896-2021; Xu,
   Lei/AAE-8371-2022
OI Xu, Baowen/0000-0001-7743-1296; Zhang, Xiangyu/0000-0003-3716-4722;
   Zhang, Qiang/0000-0003-0876-4374
FU NSFC [61832009]; Jiangsu Postgraduate Innovation Program [KYCX20_0042];
   Cooperation Fund of Huawei-Nanjing University Next Generation
   Programming Innovation Lab [YBN2019105178SW27]; NSF [1901242, 1910300];
   ONR [N000141712045, N000141410468, N000141712947]
FX We would like to thank Qingkai Shi (Purdue University) for improving the
   writing and the details of this paper. We gratefully acknowledge the
   anonymous reviewers for their valuable comments on our manuscript. This
   work is supported by the NSFC (61832009), Jiangsu Postgraduate
   Innovation Program (KYCX20_0042), Cooperation Fund of Huawei-Nanjing
   University Next Generation Programming Innovation Lab
   (YBN2019105178SW27), NSF (1901242 and 1910300), and ONR (N000141712045,
   N000141410468 and N000141712947).
CR Anderson JM, 1997, ACM T COMPUT SYST, V15, P357, DOI 10.1145/265924.265925
   Anton Ertl M., 2003, The Journal of Instruction-Level Parallelism, V5, P1
   B.V. Tiobe Software, 2021, TIOB IND
   BAKER HG, 1994, SIGPLAN NOTICES, V29, P38, DOI 10.1145/185009.185016
   Barany G., 2014, SOFTWARE ENG WORKSHO, P213
   BARTON RS, 1987, ANN HIST COMPUT, V9, P11
   BELL JR, 1973, COMMUN ACM, V16, P370, DOI 10.1145/362248.362270
   Ben Asher Y, 2009, P SYSTOR ISRAELI EXP, P1, DOI DOI 10.1145/1534530.1534550
   Brunthaler S, 2010, ACM SIGPLAN NOTICES, V45, P1, DOI 10.1145/1899661.1869633
   Brunthaler S, 2009, ELECTRON NOTES THEOR, V253, P3, DOI 10.1016/j.entcs.2009.11.011
   Brunthaler Stefan, 2011, THESIS TU WIEN
   Cannon Brett, 2005, Ph.D. Dissertation
   Cao HX, 2015, ACSIS-ANN COMPUT SCI, V5, P435, DOI 10.15439/2015F139
   COLLINS GE, 1960, COMMUN ACM, V3, P655, DOI 10.1145/367487.367501
   De Melo Arnaldo Carvalho, 2010, SLID LIN K, V18
   Dot G, 2015, INT SYM COMP ARCHIT, P41, DOI 10.1109/SBAC-PAD.2015.20
   Ehringer D., 2010, DALVIK VIRTUAL MACHI
   Ertl M. A., 2001, Euro-Par 2001 Parallel Processing. 7th International Euro-Par Conference. Proceedings (Lecture Notes in Computer Science Vol.2150), P403
   Ertl MA, 2003, ACM SIGPLAN NOTICES, V38, P278, DOI 10.1145/780822.781162
   Fang R., 2016, ARXIV PREPRINT ARXIV
   Fenlason J., 2011, GNU GPROF
   Fog A., 2020, The microarchitecture of Intel, AMD and VIA CPUs: An optimization guide for assembly programmers and compiler makers
   Friedman Scott., 2005, Proceedings of the 2005 workshop on MEmory performance: DEaling with Applications, systems and architecture, MEDEA '05, P3
   Ghimire D., 2020, THESIS METROPOLIA U
   Gouy Isaac., 2020, The Computer Language Benchmarks Game
   Gregg D, 2005, SCI COMPUT PROGRAM, V57, P319, DOI 10.1016/j.scico.2004.08.005
   I.E.E.E. Spectrum, 2021, SPECTR TOP PROGR LAN
   Ierusalimschy R, 2005, J UNIVERS COMPUT SCI, V11, P1159
   Ismail M, 2018, I S WORKL CHAR PROC, P36, DOI 10.1109/IISWC.2018.8573512
   Joisha P.G, 2006, P 5 INT S MEM MAN, P150
   Ketkar N., 2017, DEEP LEARNING PYTHON, V1
   Lei K, 2014, 2014 IEEE 17th International Conference on Computational Science and Engineering (CSE), P661, DOI 10.1109/CSE.2014.142
   Levanoni Y, 2006, ACM T PROGR LANG SYS, V28, P1, DOI 10.1145/1111596.1111597
   Luk CK, 2005, ACM SIGPLAN NOTICES, V40, P190, DOI 10.1145/1064978.1065034
   Maldikar P, 2016, ITM WEB CONF, V7, DOI 10.1051/itmconf/20160709015
   MCCARTHY J, 1960, COMMUN ACM, V3, P184, DOI 10.1145/367177.367199
   Meier R, 2019, PROCEEDINGS OF THE 15TH ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON DYNAMIC LANGUAGES (DLS '19), P91, DOI 10.1145/3359619.3359747
   Mostafa Nagy, 2010, 201014 UC SANT BARB
   Musleh M., 2015, TRECE1504 PURD U
   Ogasawara T, 2014, I S WORKL CHAR PROC, P13, DOI 10.1109/IISWC.2014.6983035
   Power R., 2013, ARXIV PREPRINT ARXIV
   Python Community, 2020, PYTH BENCHM SUIT
   Python Community, 2000, WHATS NEW PYTH 2 0
   Python Community, 2020, CPYTHON VERS 3 9 0
   Python Community, 2020, CANT WE GET RID GLOB
   Redondo JM, 2015, IEEE SOFTWARE, V32, P76, DOI 10.1109/MS.2014.104
   Relan K., 2019, BUILDING REST APIS F, P159, DOI [10.1007/978-1-4842-5022-8_6, DOI 10.1007/978-1-4842-5022-8_6]
   Rohou E, 2015, INT SYM CODE GENER, P103, DOI 10.1109/CGO.2015.7054191
   Rohou E, 2013, ACM T ARCHIT CODE OP, V9, DOI 10.1145/2400682.2400685
   Romer TH, 1996, ACM SIGPLAN NOTICES, V31, P150, DOI 10.1145/248209.237175
   Shahriyar R, 2013, ACM SIGPLAN NOTICES, V48, P93, DOI [10.1145/2509136.2509527, 10.1145/2544173.2509527]
   Shi YH, 2007, ACM T ARCHIT CODE OP, V4, DOI 10.1145/1328195.1328197
   Southern Gabriel., 2016, 2016 IEEE INT S WORK, P1
   Spinellis D, 2007, BEAUTIFUL CODE LEADI, V17
   The HPy Team, HPY BETT C API PYTH, P2021
   Vidyarthi D.P, 2014, 2014 IEEE INT C EL C, P1
   Wang H., 2014, CGO 14, DOI 10.1145/2544137.2544153
   Wang HC, 2015, ACM SIGPLAN NOTICES, V50, P400, DOI [10.1145/2814270.2814273, 10.1145/2858965.2814273]
   Weaver VM, 2015, INT SYM PERFORM ANAL, P102, DOI 10.1109/ISPASS.2015.7095789
   Weaver VincentM., 2013, The 2nd International Workshop on Performance Analysis of Workload Optimized Systems, FastPath, P80
   Zhu YH, 2015, PROCEEDINGS OF THE 48TH ANNUAL IEEE/ACM INTERNATIONAL SYMPOSIUM ON MICROARCHITECTURE (MICRO-48), P762, DOI 10.1145/2830772.2830792
NR 61
TC 8
Z9 8
U1 1
U2 6
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR 1
PY 2022
VL 215
AR 102759
DI 10.1016/j.scico.2021.102759
EA DEC 2021
PG 27
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA YN9RV
UT WOS:000747588600010
OA Bronze
DA 2024-07-18
ER

PT J
AU Dejanovic, I
AF Dejanovic, Igor
TI Parglare: A LR/GLR parser for Python
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Parsing; LR; GLR; Python; Visualization
ID RECOGNITION; LANGUAGES
AB Parglare is a Python parsing library that implements deterministic LR and its generalized extension GLR algorithms. Parglare strives to be easy to use by providing rich error messages, visualization, a CLI tool for grammar development, and good documentation. The same grammar format is used for both algorithms. It is easy to choose either LR parsing if performance is more important or GLR in case a grammar cannot fit into the constraints of deterministic LR parsing and a more powerful parsing is needed. Parglare has been used in data extraction from various textual formats, analysis of legacy source code, and developing and teaching DSL development. The GitHub repository of the project contains multiple examples and a comprehensive functionality and performance test suite. (C) 2021 Elsevier B.V. All rights reserved.
C1 [Dejanovic, Igor] Univ Novi Sad, Fac Tech Sci, Novi Sad, Serbia.
C3 University of Novi Sad
RP Dejanovic, I (corresponding author), Univ Novi Sad, Fac Tech Sci, Novi Sad, Serbia.
EM igord@uns.ac.rs
OI Dejanovic, Igor/0000-0002-0414-1455
CR Afroozeh A, 2015, LECT NOTES COMPUT SC, V9031, P89, DOI 10.1007/978-3-662-46663-6_5
   Afroozeh A, 2013, LECT NOTES COMPUT SC, V8225, P137, DOI 10.1007/978-3-319-02654-1_8
   Aho A. V., 1972, THEORY PARSING TRANS
   [Anonymous], 1991, GEN LR PARSING
   [Anonymous], 2007, PARSING TECHNIQUES P
   [Anonymous], 2006, COMPILERS PRINCIPLES
   Aycock J, 2001, ACTA INFORM, V37, P633, DOI 10.1007/PL00013319
   Bravenboer M, 2008, SCI COMPUT PROGRAM, V72, P52, DOI 10.1016/j.scico.2007.11.003
   CANTOR DG, 1962, J ACM, V9, P477, DOI 10.1145/321138.321145
   Crepinsek M., 2009, INT J PURE APPL MATH, V56, P598
   Dejanovic I, 2017, KNOWL-BASED SYST, V115, P1, DOI 10.1016/j.knosys.2016.10.023
   Dejanovic I, 2016, KNOWL-BASED SYST, V95, P71, DOI 10.1016/j.knosys.2015.12.004
   Deremer F. L, 1969, Practical translators for LR(k) languages
   Diekmann L, 2014, LECT NOTES COMPUT SC, V8706, P82, DOI 10.1007/978-3-319-11245-9_5
   EARLEY J, 1970, COMMUN ACM, V13, P94, DOI 10.1145/362007.362035
   Ford B, 2004, ACM SIGPLAN NOTICES, V39, P111, DOI 10.1145/982962.964011
   Gosling J., 2021, The Java language specification, V17
   Isradisaikul C, 2015, ACM SIGPLAN NOTICES, V50, P555, DOI [10.1145/2813885.2737961, 10.1145/2737924.2737961]
   Izmaylova A, 2016, PEPM'16: PROCEEDINGS OF THE 2016 ACM SIGPLAN WORKSHOP ON PARTIAL EVALUATION AND PROGRAM MANIPULATION, P1, DOI 10.1145/2847538.2847539
   Johnstone A, 2004, LECT NOTES COMPUT SC, V2985, P89
   Johnstone A, 1998, LECT NOTES COMPUT SC, V1383, P16
   Johnstone Adrian., 2004, 4 WORKSHOP LANGUAGE, P97
   Kats LCL, 2010, ACM SIGPLAN NOTICES, V45, P918, DOI 10.1145/1932682.1869535
   Kipps James R, 1991, GEN LR PARSING, P43, DOI [10.1007/978-1-4615-4034-24, DOI 10.1007/978-1-4615-4034-24]
   Klint P, 2009, IEEE INT WORK C SO, P168, DOI 10.1109/SCAM.2009.28
   KNUTH DE, 1965, INFORM CONTROL, V8, P607, DOI 10.1016/S0019-9958(65)90426-2
   McGuire P., 2007, GETTING STARTED PYPA
   McPeak S, 2004, LECT NOTES COMPUT SC, V2985, P73
   Medeiros S, 2014, SCI COMPUT PROGRAM, V96, P177, DOI 10.1016/j.scico.2014.01.013
   Nozohoor-Farshi Rahman., 1991, GEN LR PARSING, P61, DOI DOI 10.1007/978-1-4615-4034-2_5
   Rekers J.G., 1992, THESIS CITHESISER
   Scott E, 2007, ACTA INFORM, V44, P427, DOI 10.1007/s00236-007-0054-z
   Scott E, 2006, ACM T PROGR LANG SYS, V28, P577, DOI 10.1145/1146809.1146810
   Scott E, 2013, SCI COMPUT PROGRAM, V78, P1828, DOI 10.1016/j.scico.2012.03.005
   Scott E, 2010, ELECTRON NOTES THEOR, V253, P177, DOI 10.1016/j.entcs.2010.08.041
   Scott E, 2010, SCI COMPUT PROGRAM, V75, P55, DOI 10.1016/j.scico.2009.07.001
   Tomita M., 1985, P 9 INT JOINT C ART, P756
   van Binsbergen LT, 2018, PROCEEDINGS OF THE 11TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON SOFTWARE LANGUAGE ENGINEERING (SLE '18), P16, DOI 10.1145/3276604.3276618
   van den Brand MGJ, 2002, LECT NOTES COMPUT SC, V2304, P143
   Visser E, 1997, SCANNERLESS GEN LR P
   Visser Eelco, 1997, Syntax Definition for Language Prototyping
   Warth A, 2008, PEPM'08: PROCEEDINGS OF THE 2008 ACM SIGPLAN SYMPOSIUM ON PARTIAL EVALUATION AND SEMANTICS-BASED PROGRAM MANIPULATION, P103, DOI 10.1145/1328408.1328424
   YOUNGER DH, 1967, INFORM CONTROL, V10, P189, DOI 10.1016/S0019-9958(67)80007-X
NR 43
TC 2
Z9 2
U1 0
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 1
PY 2022
VL 214
AR 102734
DI 10.1016/j.scico.2021.102734
EA OCT 2021
PG 14
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA XA8ZO
UT WOS:000720929000008
DA 2024-07-18
ER

PT J
AU Cabrera, P
   Lund, H
   Thellufsen, JZ
   Sorknæs, P
AF Cabrera, Pedro
   Lund, Henrik
   Thellufsen, Jakob Zinck
   Sorknaes, Peter
TI The MATLAB Toolbox for EnergyPLAN: A tool to extend energy planning
   studies
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 16th International Workshop on Foundations of Coordination Languages and
   Self-Adaptative Systems (FOCLASA)
CY JUN 26, 2018
CL Toulouse, FRANCE
DE Energy planning; Smart energy system; Renewable energy strategies;
   EnergyPLAN; MATLAB
ID RENEWABLE ENERGY; OPTIMIZATION
AB EnergyPLAN is an energy system analysis tool used worldwide for scientific analyses of national and regional energy planning strategies and alternatives. This work describes the MATLAB Toolbox for EnergyPLAN (MaT4EnergyPLAN), a set of functions developed to manage the EnergyPLAN software using MATLAB. The tool allows the user to take advantage of the energy system analysis capabilities of EnergyPLAN in combination with the computational advantages of MATLAB. This allows the user to easily manage EnergyPLAN files and analyse a large number of EnergyPLAN simulations. (C) 2020 Elsevier B.V. All rights reserved.
C1 [Cabrera, Pedro] Univ Las Palmas Gran Canaria, Dept Mech Engn, Campus Tafira S-N, Las Palmas Gran Canaria 35017, Canary Islands, Spain.
   [Lund, Henrik; Thellufsen, Jakob Zinck; Sorknaes, Peter] Aalborg Univ, Dept Planning, Rendsburggade 14, Aalborg, Denmark.
C3 Universidad de Las Palmas de Gran Canaria; Aalborg University
RP Cabrera, P (corresponding author), Univ Las Palmas Gran Canaria, Dept Mech Engn, Campus Tafira S-N, Las Palmas Gran Canaria 35017, Canary Islands, Spain.
EM pedro.cabrerasantana@ulgpc.es
RI Cabrera, Pedro/AAX-6957-2021; Thellufsen, Jakob Zinck/JBJ-6998-2023;
   Cabrera, Pedro/AAJ-4355-2021; Thellufsen, Jakob Zinck/GPX-2169-2022;
   Sorknæs, Peter/AAY-1368-2020; Lund, Henrik/O-5979-2015
OI Cabrera, Pedro/0000-0001-9707-6375; Thellufsen, Jakob
   Zinck/0000-0001-6119-4572; Cabrera, Pedro/0000-0001-9707-6375;
   Thellufsen, Jakob Zinck/0000-0001-6119-4572; Sorknæs,
   Peter/0000-0001-5095-9146; Lund, Henrik/0000-0002-4930-7885
FU European Union's Horizon 2020 research and innovation programme
   [837089]; ERDF funds within the INTERREG MAC 2014-2020 program [DESAL+
   Project] [MAC/1.1a/094]; H2020 Societal Challenges Programme [837089]
   Funding Source: H2020 Societal Challenges Programme
FX This project has received funding from the European Union's Horizon 2020
   research and innovation programme under grant agreement No. 837089. It
   has also been co-funded with ERDF funds within the INTERREG MAC
   2014-2020 program [DESAL+ Project (MAC/1.1a/094)]. The authors would
   like to thank Ms. Mette Reiche Sorensen and Ms. Pernille Sylvest
   Andersen for their helpful and constructive criticism of the manuscript.
CR Bjelic IB, 2015, ENERGY, V91, P1087, DOI 10.1016/j.energy.2015.09.006
   Cabrera P, 2018, ENERGY, V162, P421, DOI 10.1016/j.energy.2018.08.020
   Child M, 2018, RENEW SUST ENERG REV, V91, P321, DOI 10.1016/j.rser.2018.03.079
   Connolly D, 2011, APPL ENERG, V88, P502, DOI 10.1016/j.apenergy.2010.03.006
   Connolly D, 2010, APPL ENERG, V87, P1059, DOI 10.1016/j.apenergy.2009.09.026
   Connolly D, 2014, INT J SUSTAIN ENERGY, V1, P7, DOI [DOI 10.5278/IJSEPM.2014.1.2, 10.5278/ijsepm.2014.1.2]
   Dagoumas AS, 2019, APPL ENERG, V242, P1573, DOI 10.1016/j.apenergy.2019.03.194
   Liu W, 2011, ENERGY, V36, P4753, DOI 10.1016/j.energy.2011.05.007
   Lund H., 2019, ADV ENERGY SYSTEMS A
   Lund H., 2017, FAQS I ENERGYPLAN
   Mahbub MS, 2016, APPL ENERG, V164, P140, DOI 10.1016/j.apenergy.2015.11.042
   Ostergaard PA, 2015, APPL ENERG, V154, P921, DOI 10.1016/j.apenergy.2015.05.086
   Prina MG, 2018, ENERGY, V149, P213, DOI 10.1016/j.energy.2018.02.050
   van Beuzekom I, 2015, 2015 IEEE EINDHOVEN POWERTECH
NR 14
TC 29
Z9 29
U1 6
U2 28
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 1
PY 2020
VL 191
AR 102405
DI 10.1016/j.scico.2020.102405
PG 11
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA KW9NS
UT WOS:000521511000006
OA Bronze
DA 2024-07-18
ER

PT J
AU Accattoli, B
   Guerrieri, G
AF Accattoli, Beniamino
   Guerrieri, Giulio
TI Abstract machines for Open Call-by-Value
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 7th IPM International Conference on Fundamentals of Software Engineering
   (FSEN)
CY APR 26-28, 2017
CL Tehran, IRAN
SP IFIP, Inst Res Fundamental Sci, Sch Comp Sci
DE Lambda-calculus; Cost model; Complexity; Size explosion; Implementation
AB The theory of the call-by-value lambda-calculus relies on weak evaluation and closed terms, that are natural hypotheses in the study of programming languages. To model proof assistants, however, strong evaluation and open terms are required. Open call-by-value is the intermediate setting of weak evaluation with (possibly) open terms, on top of which Gregoire and Leroy designed one of the abstract machines of Coq. This paper provides a theory of abstract machines for the fireball calculus, the simplest presentation of open call-by-value.
   The literature contains machines that are either simple but inefficient, as they have an exponential overhead, or efficient but heavy, as they rely on a labeling of environments and a technical optimization. We introduce a machine that is simple and efficient: it does not use labels and it implements the fireball calculus within a bilinear overhead. Moreover, we provide a new fine understanding of how different optimizations impact on the complexity of the overhead, and evidence that the time cost model we work with is minimal. (C) 2019 Published by Elsevier B.V.
C1 [Accattoli, Beniamino] INRIA, Ecole Polytech, LIX, UMR 7161, Palaiseau, France.
   [Guerrieri, Giulio] Univ Bath, Dept Comp Sci, Bath, Avon, England.
C3 Institut Polytechnique de Paris; Ecole Polytechnique; Inria; University
   of Bath
RP Guerrieri, G (corresponding author), Univ Bath, Dept Comp Sci, Bath, Avon, England.
EM beniamino.accattoli@inria.fr; g.guerrieri@bath.ac.uk
RI Guerrieri, Giulio/GZA-5767-2022
OI Guerrieri, Giulio/0000-0002-0469-4279
FU ANR JCJC grant COCA HOLA [ANR-16-CE40-004-01]; EPSRC [EP/R029121/1];
   EPSRC [EP/R029121/1] Funding Source: UKRI
FX This work has been partially funded by the ANR JCJC grant COCA HOLA
   (ANR-16-CE40-004-01) and by the EPSRC grant EP/R029121/1 "Typed
   Lambda-Calculi with Sharing and Unsharing".
CR ABRAMSKY S, 1993, INFORM COMPUT, V105, P159, DOI 10.1006/inco.1993.1044
   Accattoli B, 2019, PROCEEDINGS OF THE 21ST INTERNATIONAL SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING (PPDP 2019), DOI 10.1145/3354166.3354169
   Accattoli B, 2014, IEEE S LOG, DOI 10.1145/2603088.2603105
   Accattoli B, 2018, LECT NOTES COMPUT SC, V11275, P45, DOI 10.1007/978-3-030-02768-1_3
   Accattoli B, 2018, ELECTRON NOTES THEOR, V338, P23, DOI 10.1016/j.entcs.2018.10.003
   Accattoli B, 2017, PROCEEDINGS OF THE 19TH INTERNATIONAL SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING (PPDP 2017), P4, DOI 10.1145/3131851.3131855
   Accattoli B, 2017, LECT NOTES COMPUT SC, V10522, P1, DOI 10.1007/978-3-319-68972-2_1
   Accattoli B, 2017, INFORM COMPUT, V255, P224, DOI 10.1016/j.ic.2017.01.003
   Accattoli B, 2016, LECT NOTES COMPUT SC, V9803, P1, DOI 10.1007/978-3-662-52921-8_1
   Accattoli B, 2017, ELECTRON P THEOR COM, P1, DOI 10.4204/EPTCS.235.1
   Accattoli B, 2016, LECT NOTES COMPUT SC, V10017, P206, DOI 10.1007/978-3-319-47958-3_12
   Accattoli B, 2014, ICFP'14: PROCEEDINGS OF THE 2014 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P363, DOI 10.1145/2628136.2628154
   Accattoli B, 2015, LECT NOTES COMPUT SC, V9458, P231, DOI 10.1007/978-3-319-26529-2_13
   Accattoli B, 2015, IEEE S LOG, P141, DOI 10.1109/LICS.2015.23
   Ariola ZM, 2009, ACM T PROGR LANG SYS, V31, DOI 10.1145/1516507.1516508
   Barendregt H., 1984, STUD LOGIC FDN MATH, V103
   Blelloch GE, 1996, ACM SIGPLAN NOTICES, V31, P213, DOI 10.1145/232629.232650
   COQUAND T, 1988, INFORM COMPUT, V76, P95, DOI 10.1016/0890-5401(88)90005-3
   Cregut Pierre, 1990, LISP FUNCTIONAL PROG, P333, DOI [10.1145/91556.91681, DOI 10.1145/91556.91681]
   Dal Lago U, 2010, LECT NOTES COMPUT SC, V6324, P100
   Dal Lago U, 2009, LECT NOTES COMPUT SC, V5556, P163, DOI 10.1007/978-3-642-02930-1_14
   Danvy O., 2013, Proceedings of the 15th symposium on principles and practice of declarative programming, P97, DOI DOI 10.1145/2505879.2505898
   Fernández M, 2009, ELECTRON NOTES THEOR, V237, P57, DOI 10.1016/j.entcs.2009.03.035
   Friedman Daniel P., 2007, Higher-Order and Symbolic Computation, V20, P271, DOI 10.1007/S10990-007-9014-0
   Garcia-Perez A., 2013, 15 INT S PRINCIPLES, P85, DOI DOI 10.1145/2505879.2505887
   Girard J.-Y., 1989, CAMB TRACTS THEOR CO, V7
   Grégoire B, 2002, ACM SIGPLAN NOTICES, V37, P235, DOI 10.1145/583852.581501
   Harper R., 1987, Proceedings of the Symposium on Logic in Computer Science (Cat. No.87CH2464-6), P194
   Nadathur G., 1988, Logic Programming: Proceedings of the Fifth International Conference and Symposium, P810
   Paolini L, 1999, RAIRO-INF THEOR APPL, V33, P507, DOI 10.1051/ita:1999130
   Plotkin G. D., 1975, Theoretical Computer Science, V1, P125, DOI 10.1016/0304-3975(75)90017-1
   Ronchi Della Rocca S., 2004, TEXT THEORET COMP S
   Sands D, 2002, LECT NOTES COMPUT SC, V2566, P60
   Sestoft P., 1997, Journal of Functional Programming, V7, P231, DOI 10.1017/S0956796897002712
   Terese, 2003, CAMB TRACTS THEOR CO, V55
   Wand Mitchell, 2007, Higher-Order and Symbolic Computation, V20, P231, DOI 10.1007/s10990-007-9019-8
NR 36
TC 4
Z9 4
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 1
PY 2019
VL 184
AR 102275
DI 10.1016/j.scico.2019.03.002
PG 33
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA JM6QO
UT WOS:000496336900005
OA Green Submitted, Green Published, Bronze
DA 2024-07-18
ER

PT J
AU Hierons, RM
AF Hierons, Robert M.
TI FSM quasi-equivalence testing via reduction and observing absences
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Conformance testing; Partial finite state machine; Testing for
   equivalence; Observable finite state machine
ID FINITE-STATE MACHINES; TEST SELECTION
AB There has been significant interest in automatically generating test cases from a non deterministic finite state machine (FSM). Most approaches check that the behaviours of the system under test (SUT) are allowed by the specification FSM; they therefore test for reduction. However, sometimes one wants all of the behaviours, and so features, of the specification to be implemented and then one is testing for equivalence. In this paper we first note that in order to test for equivalence one must effectively be able to observe the SUT not being able to produce an output y in response to an input x after trace d we model this as the absence of an output. We prove that the problem of testing for equivalence to FSM M can be mapped to testing for reduction to an FSM 7Z(M) that extends M with absences. Thus, one can use techniques developed for testing for reduction when testing for equivalence. We then consider the case where the specification is partial, generalising the result to quasi-equivalence. These results are proved for observable specifications and so we also show how a partial FSM can be mapped to an observable partial FSM from which we can test. (C) 2019 Elsevier B.V. All rights reserved.
C1 [Hierons, Robert M.] Univ Sheffield, Dept Comp Sci, Sheffield, S Yorkshire, England.
C3 University of Sheffield
RP Hierons, RM (corresponding author), Univ Sheffield, Dept Comp Sci, Sheffield, S Yorkshire, England.
EM r.hierons@sheffield.ac.uk
OI Hierons, Robert/0000-0002-4771-1446
CR ABOELFOTOH H, 1993, SOFTWARE ENG J, V8, P184, DOI 10.1049/sej.1993.0024
   Aichernig BK, 2010, LECT NOTES COMPUT SC, V6286, P228
   [Anonymous], ACM SIGMOD BENCHMARK
   [Anonymous], 1971, Theory of Machines and Computations, DOI DOI 10.1016/B978-0-12-417750-5.50022-1
   [Anonymous], 1964, 5 ANN S SWITCH CIRC, DOI DOI 10.1109/SWCT.1964.8
   Bertolino A, 2005, ELECTRON NOTES THEOR, V116, P85, DOI 10.1016/j.entcs.2004.02.084
   Bonifacio Adilson Luiz, 2014, Software Engineering and Formal Methods. 12th International Conference, SEFM 2014. Proceedings: LNCS 8702, P96, DOI 10.1007/978-3-319-10431-7_8
   Bonifacio AL, 2014, LECT NOTES COMPUT SC, V8687, P80
   Bonifacio Adilson Luiz, 2014, S APPL COMP SAC 2014, P1287
   Cavalcanti A, 2016, 2016 10TH INTERNATIONAL SYMPOSIUM ON THEORETICAL ASPECTS OF SOFTWARE ENGINEERING (TASE), P3, DOI 10.1109/TASE.2016.9
   Cavalcanti A, 2013, LECT NOTES COMPUT SC, V7793, P359, DOI 10.1007/978-3-642-37057-1_26
   CHOW TS, 1978, IEEE T SOFTWARE ENG, V4, P178, DOI 10.1109/TSE.1978.231496
   Gaudel MC, 1995, LECT NOTES COMPUT SC, V915, P82
   Heerink L., 1997, Formal Description Techniques and Protocol Specification, Testing and Verification. FORTE X/PSTV XVII'97. IFIP TC6 WG6.1 Joint International Conference on Formal Description Techniques for Distributed Systems and Communication Protocols (FORTE X) and Protocol Specification, Testing and Verification (PSTV XVII), P23
   Hierons RM, 2003, COMPUT J, V46, P307, DOI 10.1093/comjnl/46.3.307
   Hierons RM, 2016, IEEE T SOFTWARE ENG, V42, P1077, DOI 10.1109/TSE.2016.2539964
   Hierons RM, 2015, COMPUT J, V58, P3089, DOI 10.1093/comjnl/bxv041
   Hierons RM, 2014, LECT NOTES COMPUT SC, V8430, P62, DOI 10.1007/978-3-319-06200-6_5
   Hierons RM, 2017, IEEE T SOFTWARE ENG, V43, P1033, DOI 10.1109/TSE.2017.2652457
   Hwang I, 2001, COMPUT COMMUN, V24, P1213, DOI 10.1016/S0140-3664(00)00327-3
   Kalinowski M, 2016, LECT NOTES BUS INF P, V238, P63, DOI 10.1007/978-3-319-27033-3_5
   KUSHIK N, 2014, 9TH INTERNATIONAL CO, P230, DOI DOI 10.1109/QUATIC.2014.38
   LUO G, 1994, IEEE T SOFTWARE ENG, V20, P149, DOI 10.1109/32.265636
   Luo G., 1994, P 7 IFIP WORKSH PROT, P95
   Moore E.F., 1956, AUTOMATA STUDIES
   Petrenko A, 2005, IEEE T COMPUT, V54, P1154, DOI 10.1109/TC.2005.152
   Petrenko A., 2012, 2012 IEEE Fifth International Conference on Software Testing, Verification and Validation (ICST 2012), P310, DOI 10.1109/ICST.2012.111
   Petrenko A., 1996, Testing of Communicating Systems. IFIP TC6 9th International Workshop on Testing of Communicating Systems, P125
   Petrenko A, 2006, LECT NOTES COMPUT SC, V3997, P118
   PHILLIPS I, 1987, THEOR COMPUT SCI, V50, P241, DOI 10.1016/0304-3975(87)90117-4
   Roscoe A.W., 1998, THEORY PRACTICE CONC
   Simao A, 2008, LECT NOTES COMPUT SC, V5047, P153, DOI 10.1007/978-3-540-68524-1_12
   Simao A, 2012, SOFTW TEST VERIF REL, V22, P435, DOI 10.1002/stvr.452
   Tretmans Jan, 2008, Formal Methods and Testing. An Outcome of the FORTEST Network. Revised Selected Papers, P1, DOI 10.1007/978-3-540-78917-8_1
   Ural H, 1997, IEEE T COMPUT, V46, P93, DOI 10.1109/12.559807
   Vandermeer R., 2001, HEATHROW TERMINAL FI
   Zhang F, 2003, IEEE T SOFTWARE ENG, V29, P1, DOI 10.1109/TSE.2003.1166585
NR 37
TC 9
Z9 9
U1 0
U2 1
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAY 15
PY 2019
VL 177
BP 1
EP 18
DI 10.1016/j.scico.2019.03.004
PG 18
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA HV5YO
UT WOS:000466061200001
OA Bronze, Green Accepted
DA 2024-07-18
ER

PT J
AU Harrison, MD
   Freitas, L
   Drinnan, M
   Campos, JC
   Masci, P
   di Maria, C
   Whitaker, M
AF Harrison, Michael D.
   Freitas, Leo
   Drinnan, Michael
   Campos, Jose C.
   Masci, Paolo
   di Maria, Costanzo
   Whitaker, Michael
TI Formal techniques in the safety analysis of software components of a new
   dialysis machine
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Risk analysis; Formal methods; Model checking; Medical devices;
   Haemodialysis
ID DESIGN
AB The paper is concerned with the practical use of formal techniques to contribute to the risk analysis of a new neonatal dialysis machine. The described formal analysis focuses on the controller component of the software implementation. The controller drives the dialysis cycle and deals with error management. The logic was analysed using model checking techniques and the source code was analysed formally, checking type correctness conditions, use of pointers and shared memory. The analysis provided evidence of the verification of risk control measures relating to the software component. The productive dialogue between the developers of the device, who had no experience or knowledge of formal methods, and the analyst using the formal analysis tools, provided a basis for the development of rationale for the effectiveness of the evidence. (C) 2019 Elsevier B.V. All rights reserved.
C1 [Harrison, Michael D.; Freitas, Leo] Newcastle Univ, Sch Comp, Newcastle Upon Tyne NE1 7RU, Tyne & Wear, England.
   [Drinnan, Michael; di Maria, Costanzo; Whitaker, Michael] Royal Victoria Infirm, Reg Med Phys Dept, Newcastle Upon Tyne NE1 4LP, Tyne & Wear, England.
   [Campos, Jose C.; Masci, Paolo] Univ Minho, Dept Informat, Campus Gualtar, P-4710057 Braga, Portugal.
   [Campos, Jose C.; Masci, Paolo] INESC TEC, HASLab, Campus Gualtar, P-4710057 Braga, Portugal.
C3 Newcastle University - UK; Newcastle University - UK; Universidade do
   Minho; INESC TEC
RP Harrison, MD (corresponding author), Newcastle Univ, Sch Comp, Newcastle Upon Tyne NE1 7RU, Tyne & Wear, England.
EM michael.harrison@ncl.ac.uk
RI Campos, José Creissac/B-2506-2008; Masci, Paolo/H-9632-2019; Freitas,
   Leo/G-5733-2012; Harrison, Michael/GYD-8608-2022
OI Campos, José Creissac/0000-0001-9163-580X; Masci,
   Paolo/0000-0002-0667-7763; Drinnan, Michael/0000-0002-2181-8202;
   Harrison, Michael/0000-0002-5567-9650
FU EPSRC [EP/G059063/1, EP/J008133/1]; NanoSTIMA - North Portugal Regional
   Operational Programme (NORTE 2020), under the PORTUGAL 2020 Partnership
   Agreement [NORTE-01-0145-FEDER-000016]; European Regional Development
   Fund (ERDF); EPSRC Trams2 project; EPSRC [EP/G059063/1, EP/J008133/1]
   Funding Source: UKRI
FX This work has been funded by: EPSRC research grants EP/G059063/1 and
   EP/J008133/1: CHI+MED (Computer -Human Interaction for Medical Devices);
   and NanoSTIMA (ref. NORTE-01-0145-FEDER-000016) financed by the North
   Portugal Regional Operational Programme (NORTE 2020), under the PORTUGAL
   2020 Partnership Agreement, and through the European Regional
   Development Fund (ERDF). Leo Freitas would like to acknowledge EPSRC
   Trams2 project for financial support, Andrew Sims for providing access
   to the dialyser, which was used as our case study and Aleksandrs
   Baklanovs for doing some of the source analysis as part of an
   undergraduate project.
CR Abrial J R, 2010, Modeling in Event-B: system and softeng
   ATLEE JM, 1993, IEEE T SOFTWARE ENG, V19, P24, DOI 10.1109/32.210305
   BaekGyu Kim, 2011, 2011 International Conference on Embedded Software (EMSOFT 2011), P155
   Banach R, 2016, LECT NOTES COMPUT SC, V9675, P376, DOI 10.1007/978-3-319-33600-8_32
   Barnes J., 2006, IEEE INT S SEC SOFTW
   BSI, 2008, 623042006 BSI EN CEN
   Campos JC, 2008, LECT NOTES COMPUT SC, V5136, P72, DOI 10.1007/978-3-540-70569-7_6
   Carlton J., 2012, ESCHER VERIFICATION, P155
   Cimatti A., 2002, Computer Aided Verification. 14th International Conference, CAV 2002. Proceedings (Lecture Notes in Computer Science Vol.2404), P359
   Clarke EM, 1999, MODEL CHECKING, P1
   Coppit D, 1998, THIRD IEEE INTERNATIONAL HIGH-ASSURANCE SYSTEMS ENGINEERING SYMPOSIUM, PROCEEDINGS, P13, DOI 10.1109/HASE.1998.731590
   Coulthard MG, 2014, PEDIATR NEPHROL, V29, P1873, DOI 10.1007/s00467-014-2923-3
   Crocker D., 2013, TECH REP
   Crocker D., 2014, ACM P HIGH INT LANG
   Dwyer M. B., 1998, Proceedings of FMSP'98. Second Workshop on Formal Methods in Software Practice, P7, DOI 10.1145/298595.298598
   Fitzgerald JS, 2013, MATH STRUCT COMP SCI, V23, P726, DOI 10.1017/S0960129512000242
   Freitas L., 2015, TECH REP
   Garcia G, 2018, CONCURRENT ENG-RES A, V26, P43, DOI 10.1177/1063293X17737357
   Harrison MD, 2017, IEEE T HUM-MACH SYST, V47, P834, DOI 10.1109/THMS.2017.2717910
   Heitmeyer C, 1998, LECT NOTES COMPUT SC, V1427, P526, DOI 10.1007/BFb0028775
   Holzmann GJ, 2003, LECT NOTES COMPUT SC, V2805, P40
   Klein G, 2014, ACM T COMPUT SYST, V32, DOI 10.1145/2560537
   Masci P., 2013, ACM SIGCHI Symposium on Engineering Interactive Computing Systems, EICS'13, London, United Kingdom - June 24 - 27, 2013, P81, DOI [DOI 10.1145/2494603, DOI 10.1145/2494603.2480302]
   Mavridou A, 2017, LECT NOTES COMPUT SC, V10231, P260, DOI 10.1007/978-3-319-57666-4_16
   Monk A., 1991, USER CTR REQUIREMENT, P185
   Nipkow T., 2002, ISABELLE HOL PROOF A, DOI DOI 10.1007/3-540-45949-9
   RYAN M, 1991, LECT NOTES COMPUT SC, V526, P569
   Tapp C, 2009, SAE INT J PASSENG CA, V1, P265, DOI 10.4271/2008-01-0664
   US Food and Drug Administration, 2002, TECH REP
   VADERA S, 1994, COMPUT J, V37, P753, DOI 10.1093/comjnl/37.9.753
   Yeganefard S., 2011, P 11 INT WORKSH AUT, V46
NR 31
TC 11
Z9 13
U1 1
U2 3
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD APR 15
PY 2019
VL 175
BP 17
EP 34
DI 10.1016/j.scico.2019.02.003
PG 18
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA HQ5AF
UT WOS:000462421700002
OA Bronze, Green Accepted
DA 2024-07-18
ER

PT J
AU Barylska, K
   Koutny, M
   Mikulski, L
   Piatkowski, M
AF Barylska, Kamila
   Koutny, Maciej
   Mikulski, Lukasz
   Piatkowski, Marcin
TI Reversible computation vs. reversibility in Petri nets
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Petri net; Reversibility; Reversible computation; Decidability
ID HOME STATES; CHOICE; SYSTEMS
AB Petri nets are a general formal model of concurrent systems which supports both action based and state-based modelling and reasoning. One of important behavioural properties investigated in the context of Petri nets has been reversibility, understood as the possibility of returning to the initial marking from any reachable net marking. Thus reversibility in Petri nets is a global property. Reversible computation, on the other hand, is typically a local mechanism by which a system can undo some of the executed actions.
   This paper is concerned with the modelling of reversible computation within Petri nets. A key idea behind the proposed construction is to add 'reverses' of selected transitions, and the paper discusses its different implementations.
   Adding reverses can severely impact on the behaviour of a Petri net. Therefore it is important, in particular, to be able to determine whether the modified net has a similar set of states as the initial one. We first prove that the problem of establishing whether the initial and modified nets have the same reachable markings is undecidable, even in the restricted case considered in this paper. We then show that the problem of checking whether the reachability sets of the two nets cover the same markings is decidable. (C) 2017 Elsevier B.V. All rights reserved.
C1 [Barylska, Kamila; Mikulski, Lukasz; Piatkowski, Marcin] Nicolaus Copernicus Univ, Fac Math & Comp Sci, Chopina 12-18, PL-87100 Torun, Poland.
   [Koutny, Maciej] Newcastle Univ, Sch Comp Sci, Newcastle Upon Tyne NE1 7RU, Tyne & Wear, England.
C3 Nicolaus Copernicus University; Newcastle University - UK
RP Barylska, K (corresponding author), Nicolaus Copernicus Univ, Fac Math & Comp Sci, Chopina 12-18, PL-87100 Torun, Poland.
EM kamila.barylska@mat.umk.pl; maciej.koutny@newcastle.ac.uk;
   lukasz.mikulski@mat.umk.pl; marcin.piatkowski@mat.umk.pl
RI Mikulski, Łukasz/ABA-8872-2020; Mikulski, Lukasz/E-8951-2014; Barylska,
   Kamila/G-3835-2014
OI Mikulski, Lukasz/0000-0002-6711-557X; Piatkowski,
   Marcin/0000-0001-5636-9497; Barylska, Kamila/0000-0002-5098-4816
FU EU COST Action on Reversible Computation [IC1405]; Polish National
   Science Center (NCN) [2013/09/D/ST6/03928]
FX We would like to thank the anonymous reviewers for their remarks which
   allowed us to improve the presentation of the paper. This work was
   supported by the EU COST Action IC1405 on Reversible Computation, and by
   the Polish National Science Center (NCN) (grant No.
   2013/09/D/ST6/03928).
CR Araki T., 1977, Theoretical Computer Science, V4, P99, DOI 10.1016/0304-3975(77)90059-7
   Barylska K, 2009, FUND INFORM, V93, P33, DOI 10.3233/FI-2009-86
   Barylska Kamila, 2016, P CS P 2016 CEUR WOR, P74
   BERRY G, 1992, THEOR COMPUT SCI, V96, P217, DOI 10.1016/0304-3975(92)90185-I
   BEST E, 1984, ACTA INFORM, V21, P89, DOI 10.1007/BF00289141
   BEST E, 1992, THEOR COMPUT SCI, V101, P161, DOI 10.1016/0304-3975(92)90048-K
   Best E, 2016, INFORM PROCESS LETT, V116, P423, DOI 10.1016/j.ipl.2016.01.011
   Best E, 2015, ELECTRON P THEOR COM, P53, DOI 10.4204/EPTCS.189.6
   Cardelli Luca, 2011, P CMSB 2011, P131, DOI [10.1145/2037509.2037529, DOI 10.1145/2037509.2037529]
   Cardoza E., 1976, STOC 1976: Proceedings of the 8th annual ACM Symposium on Theory of Computing, P50, DOI DOI 10.1145/800113.803630
   Colange M, 2011, LECT NOTES COMPUT SC, V6709, P338
   Danos V, 2005, LECT NOTES COMPUT SC, V3653, P398, DOI 10.1007/11539452_31
   Danos V, 2004, LECT NOTES COMPUT SC, V3170, P292
   Danos V, 2007, ELECTRON NOTES THEOR, V175, P75, DOI 10.1016/j.entcs.2006.07.036
   DESEL J, 1993, THEOR COMPUT SCI, V114, P93, DOI 10.1016/0304-3975(93)90154-L
   Dickson LE, 1913, AM J MATH, V35, P413, DOI 10.2307/2370405
   Dufourd C, 1998, LECT NOTES COMPUT SC, V1443, P103, DOI 10.1007/BFb0055044
   Escrig David de Frutos, 1989, 503 U PAR SUD LAB RE
   Esparza Javier, 1994, BRICS REP SER, V1
   Finkel A., 2000, Mathematical Foundations of Computer Science 2000. 25th International Symposium, MFCS 2000. Proceedings. (Lecture Notes in Computer Science Vol.1893), P353
   Finkel A., 1993, Advances in Petri Nets 1993, P210
   GINSBURG S, 1964, T AM MATH SOC, V113, P333, DOI 10.2307/1994067
   Hack M., 1974, 18 CSN MIT LAB COMP
   Hack M. H. T, 1975, THESIS MIT
   Hack Michael, 1976, 159 TR MIT LAB COMP
   Haddad S, 2009, P AMER CONTR CONF, P5018, DOI 10.1109/ACC.2009.5160020
   Hujsa T, 2015, LECT NOTES COMPUT SC, V9115, P234, DOI 10.1007/978-3-319-19488-2_12
   Karp R. M., 1969, J COMPUT SYST SCI, V3, P147, DOI DOI 10.1016/S0022-0000(69)80011-5
   Kezic D., 2006, Automatika, V47, P19
   Lanese I, 2010, LECT NOTES COMPUT SC, V6269, P478, DOI 10.1007/978-3-642-15375-4_33
   Ozkan Hanife Apaydin, 2008, WSEAS Transactions on Systems, V7, P672
   Phillips I, 2007, J LOGIC ALGEBR PROGR, V73, P70, DOI 10.1016/j.jlap.2006.11.002
   Phillips I, 2015, J LOG ALGEBR METHODS, V84, P781, DOI 10.1016/j.jlamp.2015.07.004
   Phillips Iain, 2012, LNCS, V7581, P218, DOI [10.1007/978-3-642-36315-3_18, DOI 10.1007/978-3-642-36315-3_18]
   Recalde L, 1998, IEEE T ROBOTIC AUTOM, V14, P267, DOI 10.1109/70.681245
   Reisig Wolfgang, 1985, EATCS MONOGR THEOR C, V4
   Teruel E., 1993, Applications and Theory of Petri Nets 1993. 14th International Conference Proceedings, P415
   Teruel E, 1997, IEEE T SYST MAN CY A, V27, P73, DOI 10.1109/3468.553226
   Vogler W., 1989, PETRI NET NEWSLETTER, V32, P18
   Wang P., 2011, J COMPUT INF SYST, V12, P4225
NR 40
TC 18
Z9 18
U1 1
U2 6
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 1
PY 2018
VL 151
SI SI
BP 48
EP 60
DI 10.1016/j.scico.2017.10.008
PG 13
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA FP5KV
UT WOS:000417659300004
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Khatchadourian, R
   Rashid, A
   Masuhara, H
   Watanabe, T
AF Khatchadourian, Raffi
   Rashid, Awais
   Masuhara, Hidehiko
   Watanabe, Takuya
TI Detecting broken pointcuts using structural commonality and degree of
   interest
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Software development environments; Software maintenance; Software tools
ID ASPECTJ; DESIGN
AB Pointcut fragility is a well-documented problem in Aspect-Oriented Programming; changes to the base-code can lead to join points incorrectly falling in or out of the scope of pointcuts. Deciding which pointcuts have broken due to base-code changes is a daunting venture, especially in large and complex systems. We present an automated approach that recommends pointcuts that are likely to require modification due to a particular base code change, as well as ones that do not. Our hypothesis is that join points selected by a pointcut exhibit common structural characteristics. Patterns describing such commonality are used to recommend pointcuts that have potentially broken with a degree of confidence as the developer is typing. The approach is implemented as an extension to the popular Mylyn Eclipse IDE plug-in, which maintains focused contexts of entities relevant to the task at hand using a Degree of Interest (DOI) model. We show that it is accurate in revealing broken pointcuts by applying it to multiple versions of several open source projects and evaluating the quality of the recommendations produced against actual modifications. We found that our tool made broken pointcuts 2.14 times more interesting in the DOI model than unbroken ones, with a p-value under 0.1, indicating a significant difference in final DOI value between the two kinds of pointcuts (i.e., broken and unbroken). (C) 2017 Elsevier B.V. All rights reserved.
C1 [Khatchadourian, Raffi] CUNY, Hunter Coll, Dept Comp Sci, 695 Pk Ave,Room 1008, New York, NY 10065 USA.
   [Rashid, Awais] Univ Lancaster, Sch Comp & Commun, Lancaster LA1 4WA, England.
   [Masuhara, Hidehiko] Tokyo Inst Technol, Dept Math & Comp Sci, Tokyo 1528552, Japan.
   [Watanabe, Takuya] Edirium KK, Chuo Ku, 1-8-21 Ginza, Tokyo 1040061, Japan.
   [Khatchadourian, Raffi] Univ Tokyo, Dept Graph & Comp Sci, Tokyo, Japan.
   [Masuhara, Hidehiko; Watanabe, Takuya] Univ Tokyo, Sch Arts & Sci, Dept Graph & Comp Sci, Tokyo, Japan.
C3 City University of New York (CUNY) System; Hunter College (CUNY);
   Lancaster University; Tokyo Institute of Technology; University of
   Tokyo; University of Tokyo
RP Khatchadourian, R (corresponding author), CUNY, Hunter Coll, Dept Comp Sci, 695 Pk Ave,Room 1008, New York, NY 10065 USA.; Khatchadourian, R (corresponding author), Univ Tokyo, Dept Graph & Comp Sci, Tokyo, Japan.
EM raffi.khatchadourian@hunter.cuny.edu; awais@comp.lancs.ac.uk;
   masuhara@acm.org; sodium@edirium.co.jp
RI Khatchadourian, Raffi/AAH-2180-2019
OI Khatchadourian, Raffi/0000-0002-7930-0182; Rashid,
   Awais/0000-0002-0109-1341
FU National Science Foundation [OISE-1015773]; Japan Society for the
   Promotion of Science [SP10024]; Grants-in-Aid for Scientific Research
   [26330078] Funding Source: KAKEN
FX This work was supported in part by the National Science Foundation
   [OISE-1015773] and the Japan Society for the Promotion of Science
   [SP10024]. We would like to thank Phil Greenwood, Amir Aryani, Sai
   Zhang, and Yu Lin for their answers to our many technical- and
   research-related questions and for referring us to related work.
CR Aldrich J, 2005, LECT NOTES COMPUT SC, V3586, P144
   Aotani Tomoyuki., 2007, AOSD 07, P161
   Apel S, 2010, J OBJECT TECHNOL, V9, P117, DOI 10.5381/jot.2010.9.1.a2
   Bagherzadeh Mehdi., 2011, Proceedings of the Tenth International Conference on Aspect-oriented Software Development, AOSD '11, P141
   Bodden E, 2014, ACM T SOFTW ENG METH, V23, DOI 10.1145/2559933
   Buse RPL, 2011, OOPSLA 11: PROCEEDINGS OF THE 2011 ACM INTERNATIONAL CONFERENCE ON OBJECT ORIENTED PROGRAMMING SYSTEMS LANGUAGES AND APPLICATIONS, P643
   Cazzola Walter., 2006, 3rd ECOOP Workshop on Reflection, AOP and Meta-Data for Software Evolution, P35
   Clarke S, 2001, PROC INT CONF SOFTW, P5, DOI 10.1109/ICSE.2001.919076
   Clement A., 2003, ECOOP WORKSH AN ASP, P1
   Dagenais Barthelemy., 2007, ASE 07, P254, DOI DOI 10.1145/1321631.1321669
   Dean J, 1995, LECT NOTES COMPUT SC, V952, P77, DOI 10.1007/3-540-49538-x_5
   Delamare R, 2009, SECOND INTERNATIONAL CONFERENCE ON SOFTWARE TESTING, VERIFICATION, AND VALIDATION, PROCEEDINGS, P376, DOI 10.1109/ICST.2009.41
   Figueiredo E, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P261, DOI 10.1145/1368088.1368124
   Fluri B, 2007, IEEE T SOFTWARE ENG, V33, P725, DOI 10.1109/TSE.2007.70731
   FORGY CL, 1982, ARTIF INTELL, V19, P17, DOI 10.1016/0004-3702(82)90020-0
   Gamma E., 1994, Design patterns: Elements of reusable object-oriented software
   Greenwood P, 2007, LECT NOTES COMPUT SC, V4609, P176
   Griswold WG, 2006, IEEE SOFTWARE, V23, P51, DOI 10.1109/MS.2006.24
   Gudmundson S., 2001, WORKSH ADV SEP ACM S, P1
   Hoffman K., 2007, INT S PRINC PRACT PR, P63
   KELLENS A, 2006, EUR C OBJ OR PROGR, V4067, P501
   Kersten M, 2006, LECT NOTES COMPUT SC, V3896, P1
   Kersten M, 1999, ACM SIGPLAN NOTICES, V34, P340, DOI 10.1145/320385.320421
   Kersten M, 2005, P 2005 INT C ASP OR, P159, DOI DOI 10.1145/1052898.1052912
   Khatchadourian R., 2008, INT WORKSH FDN ASP O, P19
   Khatchadourian R., 2015, COMP PUBL ACM SIGPLA, P17
   Khatchadourian R, 2015, IEEE INT CONF AUTOM, P641, DOI 10.1109/ASE.2015.80
   Khatchadourian R, 2012, IEEE T SOFTWARE ENG, V38, P642, DOI 10.1109/TSE.2011.21
   Kiczales G, 1997, LECT NOTES COMPUT SC, V1241, P220, DOI 10.1007/BFb0053381
   Kiczales G., 2001, ECOOP 2001 - Object-Oriented Programming. 15th European Conference. Proceedings (Lecture Notes in Computer Science Vol.2072), P327
   Klose K., 2005, INT WORKSH FDN ASP O, P33
   Koppen C., 2004, EUR INT WORKSH ASP S, P1
   Lippert M., 2000, Proceedings of the 2000 International Conference on Software Engineering. ICSE 2000 the New Millennium, P418, DOI 10.1109/ICSE.2000.870432
   Masuhara H, 2003, LECT NOTES COMPUT SC, V2622, P46
   Murphy GC, 2001, COMMUN ACM, V44, P75, DOI 10.1145/383845.383862
   Oracle Corporation, 2010, JAV PROGR LANG ENH J
   Ostermann K, 2005, LECT NOTES COMPUT SC, V3586, P214
   Rajan H, 2008, LECT NOTES COMPUT SC, V5142, P155, DOI 10.1007/978-3-540-70592-5_8
   Sakurai Kouhei., 2008, AOSD '08: Proceedings of the 7th intern,ational conference on Aspect-oriented software development, P96
   Seiter L.M., 2007, INT WORKSHOP LINKING, P3
   Steimann F, 2010, ACM T SOFTW ENG METH, V20, DOI 10.1145/1767751.1767752
   Sullivan Kevin., 2005, SIGSOFT SOFTW ENG NO, V30, P166
   The Eclipse Foundation, 2015, MYL TASK APPL LIF MA
   Nguyen TT, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P361, DOI 10.1145/1985793.1985843
   Walker R. J., 1999, Proceedings of the 1999 International Conference on Software Engineering (IEEE Cat. No.99CB37002), P120, DOI 10.1109/ICSE.1999.841001
   Wang L, 2014, INT CONF QUAL SOFTW, P27, DOI 10.1109/QSIC.2014.34
   Wloka J., 2008, 7th international conference on Aspect-oriented software development, P132, DOI DOI 10.1145/1353482.1353499
   Ye L., 2008, P 7 INT C ASP OR SOF, P144
   Zhao Jianjun., 2002, INT WORKSHOP PRINCIP, P108
NR 49
TC 2
Z9 3
U1 0
U2 4
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 15
PY 2017
VL 150
BP 56
EP 74
DI 10.1016/j.scico.2017.06.011
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA FK3IT
UT WOS:000413379500004
OA Green Submitted, hybrid, Green Accepted
DA 2024-07-18
ER

PT J
AU Giantsios, A
   Papaspyrou, N
   Sagonas, K
AF Giantsios, Aggelos
   Papaspyrou, Nikolaos
   Sagonas, Konstantinos
TI Concolic testing for functional languages
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Concolic testing; Symbolic execution; Pattern matching; Erlang
ID EXECUTION
AB Concolic testing is a software testing technique that simultaneously combines concrete execution of a program (given specific input, along specific paths) with symbolic execution (generating new test inputs that explore other paths, which gives better path coverage than random test case generation). So far, concolic testing has been applied, mainly at the level of bytecode or assembly code, to programs written in imperative languages that manipulate primitive data types such as integers and arrays. In this article, we demonstrate its application to a functional programming language core, the functional subset of Core Erlang, that supports pattern matching, structured recursive data types such as lists, recursion and higher-order functions. We present CutEr, a tool implementing this testing technique, and describe its architecture, the challenges that it needs to address, its current limitations, and report some experiences from its use. (C) 2017 Elsevier B.V. All rights reserved.
C1 [Giantsios, Aggelos; Papaspyrou, Nikolaos; Sagonas, Konstantinos] Natl Tech Univ Athens, Sch Elect & Comp Engn, Athens, Greece.
   [Sagonas, Konstantinos] Uppsala Univ, Dept Informat Technol, Uppsala, Sweden.
C3 National Technical University of Athens; Uppsala University
RP Giantsios, A (corresponding author), Natl Tech Univ Athens, Sch Elect & Comp Engn, Athens, Greece.
EM aggelgian@softlab.ntua.gr; nickie@softlab.ntua.gr; kostis@cs.ntua.gr
RI Sagonas, Konstantinos/IZD-8641-2023
OI Sagonas, Konstantinos/0000-0001-9657-0179; Papaspyrou,
   Nikolaos/0000-0002-1934-7181
FU European Union [IST-2011-287510]
FX This work has been partially supported by the European Union grant
   IST-2011-287510 "RELEASE: A High-Level Paradigm for Reliable Large-scale
   Server Software".
CR Anand S, 2013, J SYST SOFTWARE, V86, P1978, DOI 10.1016/j.jss.2013.02.061
   [Anonymous], P 11 ACM SIGPLAN WOR
   Armstrong J, 2010, COMMUN ACM, V53, P68, DOI 10.1145/1810891.1810910
   Barrett C., 2015, TECH REP
   Burnim Jacob, 2008, 2008 23rd IEEE/ACM International Conference on Automated Software Engineering, P443, DOI 10.1109/ASE.2008.69
   Cadar C., 2008, Proceedings of the 8th USENIX conference on Operating systems design and implementation, OSDI'08, (USA), P209
   Carlson R., 2006, International Conference on Renewable Energies and Power Quality, V1, P1, DOI 10.1145/1159789.1159791
   Carlsson R., 2004, TECH REP
   Chen T, 2013, FUTURE GENER COMP SY, V29, P1758, DOI 10.1016/j.future.2012.02.006
   Claessen K, 2000, ACM SIGPLAN NOTICES, V35, P268, DOI 10.1145/357766.351266
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   de Moura L, 2007, LECT NOTES ARTIF INT, V4603, P183
   Ge YT, 2009, LECT NOTES COMPUT SC, V5643, P306
   Giantsios A, 2015, PROCEEDINGS OF THE 17TH INTERNATIONAL SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING (PPDP 2015), P137, DOI 10.1145/2790449.2790519
   Godefroid P, 2005, ACM SIGPLAN NOTICES, V40, P213, DOI 10.1145/1064978.1065036
   Godefroid P, 2012, COMMUN ACM, V55, P40, DOI 10.1145/2093548.2093564
   Gustafsson P, 2006, J FUNCT PROGRAM, V16, P35, DOI 10.1017/S0956796805005745
   Larson E., 2003, P 12 USENIX SEC S US
   LAVILLE A, 1991, J SYMB COMPUT, V11, P321, DOI 10.1016/S0747-7171(08)80109-5
   Le Fessant F, 2001, ACM SIGPLAN NOTICES, V36, P26, DOI 10.1145/507669.507641
   Lindahl T., 2006, PPDP 2006. Proceedings of the Eighth ACM SIGPLAN Symposium on Principles and Practice of Declarative Programming, P167, DOI 10.1145/1140335.1140356
   Lindahl Tobias, 2005, P 2005 ACM SIGPLAN W, P17, DOI DOI 10.1145/1088361.1088366
   Maranget L, 2008, ML'08: PROCEEDINGS OF THE 2008 ACM SIGPLAN WORKSHOP ON ML, P35
   Mesnard F, 2015, THEOR PRACT LOG PROG, V15, P711, DOI 10.1017/S1471068415000332
   Palacios A, 2015, LECT NOTES COMPUT SC, V9527, P277, DOI 10.1007/978-3-319-27436-2_17
   Papadakis M, 2011, ERLANG 11: PROCEEDINGS OF THE 2011 ACM SIGPLAN ERLANG WORKSHOP, P39
   Park Sangmin., 2012, Proceedings of the ACM SIGSOFT 20th International Symposium on the Foundations of Software Engineering. FSE'12, p35:1, DOI DOI 10.1145/2393596.2393636
   Pasareanu C.S., 2011, Proceedings of the 2011 International Symposium on Software Testing and Analysis, ISSTA '11, P34, DOI DOI 10.1145/2001420.2001425
   Reynolds A, 2016, LECT NOTES ARTIF INT, V9706, P133, DOI 10.1007/978-3-319-40229-1_10
   Runciman C, 2008, HASKELL'08: PROCEEDINGS OF THE ACM SIGPLAN 2008 HASKELL SYMPOSIUM, P37
   Sen K., 2005, P 10 EUR SOFTW ENG C, V30, P263, DOI DOI 10.1145/1081706.1081750
   Vidal G, 2015, LECT NOTES COMPUT SC, V8981, P167, DOI 10.1007/978-3-319-17822-6_10
NR 32
TC 8
Z9 8
U1 0
U2 6
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 1
PY 2017
VL 147
BP 109
EP 134
DI 10.1016/j.scico.2017.04.008
PG 26
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA FG3CK
UT WOS:000410014200006
OA Bronze
DA 2024-07-18
ER

PT J
AU Valdés-Souto, F
AF Valdes-Souto, Francisco
TI Analyzing the performance of two COSMIC approximation sizing techniques
   at the functional process level
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE COSMIC ISO 19761; Approximate sizing; Functional size; EPCU model
ID TESTS
AB For accurate results, standards for the measurement of the functional size of software require that the functionality to be measured be fully known. However, when estimating in the early phases of software development where there is a lack of detail, approximate sizing techniques must be used. This paper investigates 'equal size bands' approximation and fuzzy-logic based approximation techniques using two distinct upper size boundaries and compares performance using a set of 180 functional processes identified from 63 use cases. (C) 2016 Elsevier B.V. All rights reserved.
C1 [Valdes-Souto, Francisco] Univ Nacl Autonoma Mexico, Fac Sci, Cdmx Mexico City, Mexico.
C3 Universidad Nacional Autonoma de Mexico
RP Valdés-Souto, F (corresponding author), Univ Nacl Autonoma Mexico, Fac Sci, Cdmx Mexico City, Mexico.
EM fvaldes@ciencias.unam.mx
OI VALDES SOUTO, FRANCISCO/0000-0001-6736-0666
CR Almakadmeh K., 2013, THESIS
   [Anonymous], P SMEF 07
   [Anonymous], 2007, COSMIC ADV REL TOP C
   [Anonymous], 2015, COSMIC GUID EARL RAP
   BOCK DB, 1992, J SYST SOFTWARE, V18, P245, DOI 10.1016/0164-1212(92)90101-O
   Conte L., 2004, SOFTWARE MEASUREMENT, P416
   COSMIC, 2015, COMM SOFTW MEAS INT
   De Marco Lucia, 2013, 2013 39th Euromicro Conference on Software Engineering and Advanced Applications (SEAA), P349, DOI 10.1109/SEAA.2013.41
   De Vito G, 2014, EUROMICRO CONF PROC, P69, DOI 10.1109/SEAA.2014.30
   Demsar J, 2006, J MACH LEARN RES, V7, P1
   Desharnais J. M., 2003, 13 INT WORKSH SOFTW, P270
   DUNN OJ, 1961, J AM STAT ASSOC, V56, P52, DOI 10.2307/2282330
   Fowler M., 2015, UML Distilled: A Brief Guide to the Standard Object Modeling Language
   Friedman M, 1937, J AM STAT ASSOC, V32, P675, DOI 10.2307/2279372
   Friedman M, 1940, ANN MATH STAT, V11, P86, DOI 10.1214/aoms/1177731944
   García S, 2010, INFORM SCIENCES, V180, P2044, DOI 10.1016/j.ins.2009.12.010
   Jones C., 1997, APPL SOFTWARE MEASUR
   Meli R., 1997, ESCOM 1997, P1
   Morgenshtern O, 2007, INFORM SOFTWARE TECH, V49, P827, DOI 10.1016/j.infsof.2006.09.006
   Santillo L., 2011, COSMIC FUNCTION POIN, P176
   Santillo L., 2000, ESCOM SCOPE 2000, P1
   Souto Francisco Valdes, 2014, 2014 Joint Conference of the International Workshop on Software Measurement and the International Conference on Software Process and Product Measurement. (IWSM-MENSURA). Proceedings, P282, DOI 10.1109/IWSM.Mensura.2014.44
   Souto FV, 2015, LECT NOTES BUS INF P, V230, P192, DOI 10.1007/978-3-319-24285-9_13
   Souto FV, 2012, PROCEEDINGS OF THE 2012 JOINT CONFERENCE OF THE 22ND INTERNATIONAL WORKSHOP ON SOFTWARE MEASUREMENT AND THE 2012 SEVENTH INTERNATIONAL CONFERENCE ON SOFTWARE PROCESS AND PRODUCT MEASUREMENT (IWSM-MENSURA 2012), P178, DOI 10.1109/IWSM-MENSURA.2012.34
   Valdés F, 2010, STUD COMPUT INTELL, V296, P227, DOI 10.1007/978-3-642-13273-5_15
   Valdes-Souto F., 2011, THESIS
   Valdes-Souto F., 2007, P INT C SOFTW PROC P, P87
NR 27
TC 1
Z9 1
U1 0
U2 1
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 15
PY 2017
VL 135
SI SI
BP 105
EP 121
DI 10.1016/j.scico.2016.11.005
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA EJ5OM
UT WOS:000393267600007
DA 2024-07-18
ER

PT J
AU de Carvalho, FH
   Rezende, CA
AF de Carvalho Junior, Francisco Heron
   Rezende, Cenez Araujo
TI Performance evaluation of virtual execution environments for intensive
   computing on usual representations of multidimensional arrays
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Virtual execution; High performance computing; Performance evaluation;
   Java virtual machine (JVM); Common Language Infrastructure (CLI)
ID JAVA; BENCHMARKING; EFFICIENT; GRIDS
AB This paper evaluates the sequential performance of virtual execution environments (VEE) belonging to the CLI (Common Language Infrastructure) and JVM (Java Virtual Machine) standards, for the usual approaches of representing multidimensional arrays in programs that present intensive array access. Such programs are mostly found in scientific and engineering application domains. It shows that the performance profile of virtual execution is still highly influenced by the choice of both the multidimensional array representation and the VEE implementation, also contradicting some results of previous related works, as well as some beliefs of HPC programmers that come from their practice with native execution languages, such as C, C++, and Fortran. Finally, recommendations are provided both for HPC programmers that desire to take advantage of VEE performance for their array-intensive code and for VEE developers that are interested in improving the performance of virtual execution for the needs of HPC applications. (C) 2016 Elsevier B.V. All rights reserved.
C1 [de Carvalho Junior, Francisco Heron; Rezende, Cenez Araujo] Univ Fed Ceara, Ciencia Comp, Fortaleza, CE, Brazil.
C3 Universidade Federal do Ceara
RP de Carvalho, FH (corresponding author), Univ Fed Ceara, Ciencia Comp, Fortaleza, CE, Brazil.
EM heron@lia.ufc.br; cenezaraujo@lia.ufc.br
RI Carvalho, Francisco/AAR-9865-2021; Rezende, Cenez Araujo de/V-4469-2017
OI Carvalho, Francisco/0000-0003-2286-2376; Rezende, Cenez Araujo
   de/0000-0002-1236-6443
CR Amedro B., 2010, P 10 WSEAS INT C APP
   Amedro B, 2010, COMPUT COMMUN NETW S, P163, DOI 10.1007/978-1-84996-241-4_10
   [Anonymous], 2003, Introduction to parallel computing
   Artigas P. V., 2000, Conference Proceedings of the 2000 International Conference on Supercomputing, P1, DOI 10.1145/335231.335232
   BAILEY DH, 1991, INT J SUPERCOMPUT AP, V5, P63, DOI 10.1177/109434209100500306
   Baitsch M, 2010, ADV ENG SOFTW, V41, P75, DOI 10.1016/j.advengsoft.2008.12.013
   Budimlic Z, 2001, LECT NOTES COMPUT SC, V2179, P201, DOI 10.1007/3-540-45346-6_20
   Bull JM, 2003, CONCURR COMP-PRACT E, V15, P417, DOI 10.1002/cpe.658
   de Carvalho FH, 2013, LECT NOTES COMPUT SC, V8129, P31, DOI 10.1007/978-3-642-40922-6_3
   *ECMA INT, 2006, 335 ECMA INT
   Frumkin M.A., 2003, 17 INT S PAR DISTR P, P139
   Gundersen G, 2004, CONCURR COMP-PRACT E, V16, P799, DOI 10.1002/cpe.793
   Hamilton J, 2003, ACM SIGPLAN NOTICES, V38, P19, DOI 10.1145/772970.772973
   Kotzmann T, 2008, ACM T ARCHIT CODE OP, V5, DOI 10.1145/1369396.1370017
   LUJAN M, 2002, P 2002 JOINT ACM ISC, P76
   Lusk E, 2007, PARALLEL PROCESS LET, V17, P89, DOI 10.1142/S0129626407002892
   Mathew J. A., 1999, Proceedings of the ACM 1999 Java Grande Conference, P72, DOI 10.1145/304065.304101
   Moreira JE, 2003, CONCURR COMP-PRACT E, V15, P317, DOI 10.1002/cpe.661
   Moreira JE, 2001, COMMUN ACM, V44, P102, DOI 10.1145/383845.383867
   Nguyen TVN, 2005, ACM T PROGR LANG SYS, V27, P527, DOI 10.1145/1065887.1065893
   Nikishkov GP, 2003, COMPUT STRUCT, V81, P2401, DOI 10.1016/S0045-7949(03)00301-8
   Philippsen M., 2000, PARA 00 P 5 INT WORK, P20
   Post DE, 2005, PHYS TODAY, V58, P35, DOI 10.1063/1.1881898
   Qian F, 2002, LECT NOTES COMPUT SC, V2304, P325
   Riley CJ, 2003, CONCURR COMP-PRACT E, V15, P395, DOI 10.1002/cpe.656
   Taboada GL, 2013, SCI COMPUT PROGRAM, V78, P425, DOI 10.1016/j.scico.2011.06.002
   Temam R., 1979, NAVIER STOKES EQUATI, V2
   Todorov V, 2003, DEVELOPMENTS IN ROBUST STATISTICS, P404
   van Reeuwijk C, 2003, CONCURR COMP-PRACT E, V15, P277, DOI 10.1002/cpe.659
   VanderHeyden WB, 2003, CONCURR COMP-PRACT E, V15, P431, DOI 10.1002/cpe.662
   Vogels W., 2003, IEE Proceedings-Software, V150, P266, DOI 10.1049/ip-sen:20030987
   Wurthinger Thomas., 2007, PPPJ, P125, DOI DOI 10.1145/1294325.1294343
NR 32
TC 1
Z9 2
U1 0
U2 7
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 15
PY 2016
VL 132
BP 29
EP 49
DI 10.1016/j.scico.2016.04.005
PN 1
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA EC3YB
UT WOS:000388061900003
OA hybrid
DA 2024-07-18
ER

PT J
AU Homm, D
   Eckert, J
   German, R
AF Homm, Daniel
   Eckert, Juergen
   German, Reinhard
TI CenUMs - concurrency enhanced usage models for statistical testing of
   complex systems with concurrent streams of use
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Markov chain usage model; Concurrency; System verification; Statistical
   test
AB Model-based statistical testing with Markov chain usage model (MCUMs) represents a highly automated test approach. It also boosts test planning by providing relevant parameters that aid decision making. However, MCUMs are not suitable for testing modern systems that allow concurrent streams of use. Concurrent aspects result in a state space explosion in the model. They complicate the model specification and increase the calculation time for parameters. Therefore, we introduce concurrency enhanced usage model (CenUMs). They represent a natural extension to MCUMs by composite states with regions, which are used to formalize concurrent streams of use. This allows a simplified and reasonable specification as it hides the state space explosion. We also provide configurable algorithms for test case generation that take composite states into account. Additionally, a new analysis method is outlined that leads to a significant improvement of the calculation time for parameters. An analysis of its arithmetic complexity and results from experiments are provided. (C) 2016 Elsevier B.V. All rights reserved.
C1 [Homm, Daniel; Eckert, Juergen; German, Reinhard] Friedrich Alexander Univ Erlangen Nuremberg, Dept Comp Sci 7, D-91058 Erlangen, Germany.
C3 University of Erlangen Nuremberg
RP Homm, D (corresponding author), Friedrich Alexander Univ Erlangen Nuremberg, Dept Comp Sci 7, D-91058 Erlangen, Germany.
EM daniel.homm@fau.de; juergen.eckert@fau.de; reinhard.german@fau.de
RI Eckert, Jurgen/U-8328-2019
OI Eckert, Jurgen/0000-0003-4112-3181
CR [Anonymous], 1988, Linear Least Squares Computations
   [Anonymous], 1971, ITERATIVE SOLUTION L
   Bohr Frank, 2011, 2011 IEEE Fourth International Conference on Software Testing, Verification and Validation Workshops (ICSTW), P18, DOI 10.1109/ICSTW.2011.11
   Bohr F., 2010, P 3 WORKSH MOD BAS T, P41
   Casale Giuliano, 2011, Performance Evaluation Review, V39, P357, DOI 10.1145/2007116.2007176
   Dias Neto A. C., 2007, P ACM INT WORKSH EMP, P31
   German R., 2000, PERFORMANCE ANAL COM
   Gorrieri R., 2015, TEXTS THEORETICAL CO
   HAREL D, 1987, SCI COMPUT PROGRAM, V8, P231, DOI 10.1016/0167-6423(87)90035-9
   Homm D., 2015, P 30 ACM SIGAPP S AP
   Kim Y. G., 1999, IEE Proceedings-Software, V146, P187, DOI 10.1049/ip-sen:19990602
   Le Guen H, 2004, ELEVENTH ANNUAL INTERNATIONAL WORKSHOP ON SOFTWARE TECHNOLOGY AND ENGINEERING PRACTICE, PROCEEDINGS, P87
   PLATEAU B, 1991, IEEE T SOFTWARE ENG, V17, P1093, DOI 10.1109/32.99196
   Poore JH, 1999, SCIENCE AND ENGINEERING FOR SOFTWARE DEVELOPMENT: A RECOGNITION OF HARLAN D. MILLS' LEGACY (SESD 99), PROCEEDINGS, P40, DOI 10.1109/SESD.1999.781111
   Prowell S.J., 2005, P 38 ANN HAWAII INT, p318c
   Prowell S. J., 2004, P 37 HAW INT C SYST
   Prowell S.J., 2003, TECH REP
   Riebisch M, 2003, LECT NOTES COMPUT SC, V2591, P394
   Siegl S., 2009, P 12 EUR WORKSH DEP, P1
   Whittaker J. A., 1993, ACM Transactions on Software Engineering and Methodology, V2, P93, DOI 10.1145/151299.151326
   WHITTAKER JA, 1994, IEEE T SOFTWARE ENG, V20, P812, DOI 10.1109/32.328991
NR 21
TC 0
Z9 0
U1 0
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 15
PY 2016
VL 132
SI SI
BP 173
EP 189
DI 10.1016/j.scico.2016.07.002
PN 2
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA ED3ZB
UT WOS:000388785900003
OA hybrid
DA 2024-07-18
ER

PT J
AU Mejia, J
   Muñoz, E
   Muñoz, M
AF Mejia, Jezreel
   Munoz, Edrisi
   Munoz, Mirna
TI Reinforcing the applicability of multi-model environments for software
   process improvement using knowledge management
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Software process improvement; Knowledge management; Multi-model
   environments; Ontological models
ID ONTOLOGY; METHODOLOGY
AB Nowadays software development organizations look for tools and methods that help them maintain their competitiveness. A key approach for organizations in order to achieve this competitiveness is a successful implementation of software process improvement (SPI). Unfortunately, most of the times, software process improvement involves a path full of obstacles due to the lack of knowledge for choosing the right implementation. The most common and critical problem consists of the selection and application of the right reference model for guiding this implementation. As an effort for helping organizations in the selection of the right implementation of improvements, multi-model environments arised enabling the use of best practices from different reference models. Multi-model approach facilitates the improvement task in order to achieve the organization's business goals. In this context, effective integration of models and standards can play a crucial role in the implementation of multi-model environments as reference support tool. Nevertheless the use of multi-model approaches presents difficulties related to the lack of knowledge of how to manage the amount of information and the correct integration of different models and standards. In this sense, knowledge management technologies have proven to be highly promising support for knowledge sharing and system integration. This work presents an ontological framework based on a multi-model approach, which facilitates and supports the SPI for small and medium companies for a life cycle process improvement. Life cycle process improvement pursues the necessary actions in a deliberate, structured and methodical manner, required in each stage of the life cycle of software development, capable for improving process to current organization needs. Finally, a case study is presented in order to show the performance of the framework. (C) 2015 Elsevier B.V. All rights reserved.
C1 [Mejia, Jezreel; Munoz, Edrisi; Munoz, Mirna] Mathemat Res Ctr CIMAT AC, Zacatecas Unit, Ave Univ 222 Fracc La Loma, Zacatecas 98068, Zac, Mexico.
RP Muñoz, M (corresponding author), Mathemat Res Ctr CIMAT AC, Zacatecas Unit, Ave Univ 222 Fracc La Loma, Zacatecas 98068, Zac, Mexico.
EM mirna.munoz@cimat.mx
RI Muñoz, Mirna/I-9193-2017
OI Muñoz, Mirna/0000-0001-8537-2695; Munoz, Edrisi/0000-0002-6930-4841
CR AENOR, 2000, 90012000 AENOR UNEEN
   [Anonymous], 2008, IEEE STD 90003 2008, P1, DOI DOI 10.1109/IEEESTD.2008.4475826
   Biehl RB, 2004, IEEE SOFTWARE, V21, P68, DOI 10.1109/MS.2004.1270765
   Calvo-Manzano JA, 2012, J SOFTW-EVOL PROC, V24, P511, DOI 10.1002/smr.505
   Chrissis M., 2011, CMMI DEV GUIDELINES
   Fensel D., 2013, ONTOLOGIES SILVER BU
   GRUBER TR, 1993, KNOWL ACQUIS, V5, P199, DOI 10.1006/knac.1993.1008
   Halit Gokhan, 2006, LECT NOTES COMPUTER, P1
   Horridge M., 2007, TECHNICAL REPORT
   Humphrey W., 2006, INTRO TEAM SOFTWARE
   IEEE Computer Society, 14902003 IEEE, P1
   International Society for Measurement and Control, 2003, BATCH CONTR 3
   International Society for Measurement and Control, 2007, US ISA 88 ISA 95 TOG
   International Society for Measurement and Control, 1999, ENT CONTR SYST INT 1
   International Society for Measurement and Control, 1995, BATCH CONTR 1
   *ISO, 2004, 155042004 ISOIEC
   Lawrence J., 2009, SEPG 2009 N AM C
   Marino L., 2009, PROCESS IMPROVEMENT
   Ministry of Industry Energy and Tourism (Ministerio de Industria Energia y Turismo), 2013, MOR INF NEW DEF SMES
   Missikoff M., 2002, SEMANTIC WEB, V2342, P442
   Munch J., 2012, FRAUNHOFER IESE SERI
   Munoz E., 2012, KNOWLEDGE MANAGEMENT
   Muñoz M, 2014, INT J SOFTW ENG KNOW, V24, P909, DOI 10.1142/S0218194014400038
   Pardo C, 2012, COMPUT STAND INTER, V34, P48, DOI 10.1016/j.csi.2011.05.005
   Rodríguez D, 2010, INT J SOFTW ENG KNOW, V20, P533, DOI 10.1142/S0218194010004876
   Sharifloo A.A., 2008, 3 INT C INF COMM TEC, V1, P1
   Soto-Acosta P, 2010, INFORM SYST MANAGE, V27, P274, DOI 10.1080/10580530.2010.493847
   Stolfa Svatopluk, 2010, 2010 International Conference on Computer Information Systems and Industrial Management Applications (CISIM 2010), P328, DOI 10.1109/CISIM.2010.5643640
   Valiente MC, 2012, IEEE T SYST MAN CY C, V42, P61, DOI 10.1109/TSMCC.2011.2132717
   Vizcaíno A, 2012, IET SOFTW, V6, P214, DOI 10.1049/iet-sen.2011.0087
   Williams T, 2008, IEEE T ENG MANAGE, V55, P248, DOI 10.1109/TEM.2007.912920
NR 31
TC 14
Z9 15
U1 0
U2 34
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 1
PY 2016
VL 121
SI SI
BP 3
EP 15
DI 10.1016/j.scico.2015.12.002
PG 13
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DH6YU
UT WOS:000372938800002
OA hybrid
DA 2024-07-18
ER

PT J
AU Murta, D
   Oliveira, JN
AF Murta, Daniel
   Oliveira, Jose Nuno
TI A study of risk-aware program transformation
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 28th ACM Symposium on Applied Computing (SAC) on Programming Languages
   Track
CY MAR 18-22, 2013
CL Coimbra, PORTUGAL
SP ACM, ACM Special Interest Grp Appl Comp
DE Program transformation; Functional programming; Algebra of programming;
   Probabilistic risk assessment
AB In the trend towards tolerating hardware unreliability, accuracy is exchanged for cost savings. Running on less reliable machines, functionally correct code becomes risky and one needs to know how risk propagates so as to mitigate it. Risk estimation, however, seems to live outside the average programmer's technical competence and core practice.
   In this paper we propose that program design by source-to-source transformation be risk-aware in the sense of making probabilistic faults visible and supporting equational reasoning on the probabilistic behaviour of programs caused by faults. a la Bird-Moor algebra of programming.
   This paper studies, in particular, the propagation of faults across standard program transformation techniques known as tupling and fusion, enabling the fault of the whole to be expressed in terms of the faults of its parts. (C) 2015 Elsevier B.V. All rights reserved.
C1 [Murta, Daniel; Oliveira, Jose Nuno] Univ Minho, INESC TEC, HASLAB High Assurance Software Lab, Braga, Portugal.
C3 Universidade do Minho; INESC TEC
RP Oliveira, JN (corresponding author), Univ Minho, INESC TEC, HASLAB High Assurance Software Lab, Braga, Portugal.
EM pg23205@alunos.uminho.pt; jno@di.uminho.pt
RI Oliveira, Jose Nuno/D-3490-2013
OI Oliveira, Jose/0000-0002-0196-4229
FU ERDF through the Programme COMPETE; Portuguese Government through FCT
   (Fundacao para a Ciencia e a Tecnologia / Portuguese Foundation for
   Science and Technology) [PTDC/EIA-CCO/122240/2010]; FCT [23]; Fundação
   para a Ciência e a Tecnologia [PTDC/EIA-CCO/122240/2010] Funding Source:
   FCT
FX This work was carried out in project QAIS (Quantitative analysis of
   interacting systems: foundations and algorithms) funded by the ERDF
   through the Programme COMPETE and by the Portuguese Government through
   FCT (Fundacao para a Ciencia e a Tecnologia / Portuguese Foundation for
   Science and Technology) contract PTDC/EIA-CCO/122240/2010.; While doing
   this work Daniel Murta was supported by a grant<SUP>23</SUP> awarded by
   FCT.
CR Andova S., 2009, EPTCS, V13
   [Anonymous], ENCY MATH APPL
   [Anonymous], 28 ACM SIGPLAN C OBJ
   [Anonymous], LNCS
   [Anonymous], ACM T EMBED COMPUT S
   [Anonymous], 2003, Haskell 98 language and libraries: the revised report
   Barbosa LS, 2003, J UNIVERS COMPUT SCI, V9, P891
   Barthe Gilles, 2012, Mathematics of Program Construction. Proceedings 11th International Conference, MPC 2012, P1, DOI 10.1007/978-3-642-31113-0_1
   Bird R., 1997, COMPUT SCI
   Coecke B, 2011, LECT NOTES PHYS, V813, P1, DOI 10.1007/978-3-642-12821-9
   Cortellessa V, 2007, LECT NOTES COMPUT SC, V4608, P140
   Di Pierro A, 2010, LECT NOTES COMPUT SC, V6154, P1, DOI 10.1007/978-3-642-13678-8_1
   Duraes J.A., 2006, IEEE T SOFTW ENG
   Erwig M, 2006, J FUNCT PROGRAM, V16, P21, DOI 10.1017/S0956796805005721
   Frias M. F., 1997, Fundamenta Informaticae, V32, P1
   Gibbons J, 2011, ACM SIGPLAN NOTICES, V46, P2, DOI 10.1145/2034574.2034777
   Harper T, 2011, ACM SIGPLAN NOTICES, V46, P47, DOI 10.1145/2096148.2034682
   Hasuo I, 2007, LOG METH COMPUT SCI, V3, DOI 10.2168/LMCS-3(4:11)2007
   Hu ZJ, 1997, ACM SIGPLAN NOTICES, V32, P164, DOI 10.1145/258949.258964
   Jackson D, 2009, COMMUN ACM, V52, P78, DOI 10.1145/1498765.1498787
   Macedo H., 2012, THESIS U MINHO
   Macedo HD, 2013, SCI COMPUT PROGRAM, V78, P2160, DOI 10.1016/j.scico.2012.07.012
   Maric O, 2014, LECT NOTES COMPUT SC, V8442, P449, DOI 10.1007/978-3-319-06410-9_31
   Marlow Simon, 2013, Parallel and Concurrent Programming in Haskell
   McIver A., 2005, COMPUT SCI MONOGR
   MoD U.K., 2007, 0056 UK MOD DEF
   Morgan Carroll, 2012, Mathematics of Program Construction. Proceedings 11th International Conference, MPC 2012, P48, DOI 10.1007/978-3-642-31113-0_5
   Oliveira J.N., 2011, TRHASLAB32011 INESC
   Oliveira JN, 2014, LNCS, V8428, P119
   Oliveira JN, 2013, INT J FOUND COMPUT S, V24, P709, DOI 10.1142/S0129054113400145
   Oliveira JN, 2012, FORM ASP COMPUT, V24, P433, DOI 10.1007/s00165-012-0240-9
   Stamatelatos M., 2011, NASASP20113421
   Voas J.M., 1997, SOFTWARE FAULT INJEC
   Wong S.K.M., 2000, 8 C INF PROC MAN UNC, P876
NR 34
TC 8
Z9 9
U1 0
U2 6
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 15
PY 2015
VL 110
BP 51
EP 77
DI 10.1016/j.scico.2015.04.008
PG 27
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA CR3VX
UT WOS:000361262300004
OA Green Submitted, hybrid
DA 2024-07-18
ER

PT J
AU Tip, F
AF Tip, Frank
TI Infeasible paths in object-oriented programs
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Dataflow analysis; Feasible paths; IFDS algorithm; Program analysis
ID POINTS-TO ANALYSIS; PROPAGATION
AB A dataflow analysis computes an approximation of the values computed at various points in a program by considering how the execution of statements transforms the program's state. Dataflow analyses are often expressed as a reachability problem in a control flow graph. In the presence of procedures, care must be taken to avoid traversing infeasible paths in such graphs, in order to avoid a loss of precision. Efficient algorithms such as IFDS [1] have been devised that only consider interprocedurally feasible paths that contain properly matched call and return statements.
   In this paper, we observe that another form of infeasible path may arise in the context of object-oriented programs that contain correlated method calls. We present some examples to illustrate this phenomenon, and discuss how a dataflow analysis could be devised that avoids traversing infeasible paths. (C) 2013 Elsevier B.V. All rights reserved.
C1 Univ Waterloo, Waterloo, ON N2L 3G1, Canada.
C3 University of Waterloo
RP Tip, F (corresponding author), Univ Waterloo, 200 Univ Ave West, Waterloo, ON N2L 3G1, Canada.
EM ftip@uwaterloo.ca
CR Altucher R. Z., 1995, Conference Record of POPL'95: 22nd ACM SIGPLAN-SIGACT Symposium Principles of Programming Languages, P74, DOI 10.1145/199448.199466
   [Anonymous], 1999, P 26 ACM SIGPLAN SIG
   [Anonymous], JPL
   Bacon DF, 1996, ACM SIGPLAN NOTICES, V31, P324, DOI 10.1145/236338.236371
   Bodden E., 2012, ACM SIGPLAN 7 WORKSH
   Bodden Eric, 2012, P ACM SIGPLAN INT WO, P3, DOI DOI 10.1145/2259051.2259052
   Das M, 2002, ACM SIGPLAN NOTICES, V37, P57, DOI 10.1145/543552.512538
   Dean J, 1995, LECT NOTES COMPUT SC, V952, P77, DOI 10.1007/3-540-49538-x_5
   Dean Jeffrey A, 1996, WHOLE PROGRAM OPTIMI
   Fowler M., 2018, Refactoring: Improving the Design of Existing Code
   Grove D, 2001, ACM T PROGR LANG SYS, V23, P685, DOI 10.1145/506315.506316
   Kildall G. A., 1973, Conference Record of ACM Symposium on Principles of Programming Languages, P194
   Lhoták O, 2006, LECT NOTES COMPUT SC, V3923, P47
   Naeem NA, 2010, LECT NOTES COMPUT SC, V6011, P124, DOI 10.1007/978-3-642-11970-5_8
   Naeem NA, 2009, ISMM'09: PROCEEDINGS OF THE 2009 ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON MEMORY MANAGEMENT, P79
   Naeem NA, 2008, ACM SIGPLAN NOTICES, V43, P347, DOI 10.1145/1449955.1449792
   Odersky M., 2012, PROGRAMMING SCALA
   Reps T., 1995, Conference Record of POPL'95: 22nd ACM SIGPLAN-SIGACT Symposium Principles of Programming Languages, P49, DOI 10.1145/199448.199462
   Sagiv M, 1995, LECT NOTES COMPUT SC, V915, P651
   Sridharan M, 2012, LECT NOTES COMPUT SC, V7313, P435, DOI 10.1007/978-3-642-31057-7_20
   Tip F, 2000, ACM SIGPLAN NOTICES, V35, P281, DOI 10.1145/354222.353190
   WEGMAN MN, 1991, ACM T PROGR LANG SYS, V13, P181, DOI 10.1145/103135.103136
NR 22
TC 5
Z9 5
U1 0
U2 3
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 1
PY 2015
VL 97
SI SI
BP 91
EP 97
DI 10.1016/j.scico.2013.11.005
PN 1
PG 7
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AU6PR
UT WOS:000345725100017
OA Bronze
DA 2024-07-18
ER

PT J
AU Visser, E
AF Visser, Eelco
TI Understanding software through linguistic abstraction
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Linguistic abstraction; Programming languages; Domain-specific
   languages; Software understanding
ID INTEGRATION; LANGUAGE
AB In this essay, I argue that linguistic abstraction should be used systematically as a tool to capture our emerging understanding of domains of computation. Moreover, to enable that systematic application, we need to capture our understanding of the domain of linguistic abstraction itself in higher-level meta languages. The argument is illustrated with examples from the SDF, Stratego, Spoofax, and WebDSL projects in which I explore these ideas. (C) 2013 Elsevier B.V. All rights reserved.
C1 Delft Univ Technol, Software Engn Res Grp, Dept Software & Comp Technol, NL-2600 AA Delft, Netherlands.
C3 Delft University of Technology
RP Visser, E (corresponding author), Delft Univ Technol, Software Engn Res Grp, Dept Software & Comp Technol, NL-2600 AA Delft, Netherlands.
EM visser@acm.org
OI Visser, Eelco/0000-0002-7384-3370
CR [Anonymous], 2013, SOFTWARE LANGUAGE EN
   Efftinge S., 2006, WORKSH MOD S ECL SUM
   Fowler M, 2005, Language workbenches: The killer-app for domain specific languages?
   Groenewegen D.M., 2008, P 8 INT C WEB ENG IC, P175
   Groenewegen DM, 2013, SOFTW SYST MODEL, V12, P35, DOI 10.1007/s10270-010-0173-9
   Groenewegen DM, 2010, IEEE SOFTWARE, V27, P31, DOI 10.1109/MS.2010.92
   Heering J., 1989, SIGPLAN NOT, V24
   Hemel Z, 2011, J SYMB COMPUT, V46, P150, DOI 10.1016/j.jsc.2010.08.006
   Kats LCL, 2010, ACM SIGPLAN NOTICES, V45, P918, DOI 10.1145/1932682.1869535
   Kats LCL, 2010, ACM SIGPLAN NOTICES, V45, P444, DOI 10.1145/1932682.1869497
   Klint P., 1993, ACM T SOFTW ENG METH, V2
   Klint P, 2009, IEEE INT WORK C SO, P168, DOI 10.1109/SCAM.2009.28
   Perlis A.J., 1982, SIGPLAN NOT, V17
   TEITELBAUM T, 1981, COMMUN ACM, V24, P563, DOI 10.1145/358746.358755
   Visser E, 2008, LECT NOTES COMPUT SC, V5235, P291, DOI 10.1007/978-3-540-88643-3_7
   Visser Eelco., 1997, Scannerless Generalized-LR Parsing
   Vollebregt T, 2012, WORKSH LANG DESCR TO
   Wachsmuth G., 2013, LECT NOTES COMPUTER
NR 18
TC 2
Z9 2
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 1
PY 2015
VL 97
SI SI
BP 11
EP 16
DI 10.1016/j.scico.2013.12.001
PN 1
PG 6
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AU6PR
UT WOS:000345725100003
OA Green Published
DA 2024-07-18
ER

PT J
AU Scapin, E
   Spoto, F
AF Scapin, Enrico
   Spoto, Fausto
TI Field-sensitive unreachability and non-cyclicity analysis
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT Conference on Software Verification and Testing (SVT) Track at the 28th
   ACM Symposium on Applied Computing (ACM SAC)
CY MAR, 2013
CL Coimbra, PORTUGAL
SP ACM
DE Data-flow analysis; Interprocedural static analysis; Constraint-based
   analysis; Field-sensitive analysis; Abstract interpretation
AB Field-sensitive static analyses of object-oriented code use approximations of the computational states where fields are taken into account, for better precision. This article presents a novel and sound definite analysis of Java bytecode that approximates two strictly related properties: field-sensitive unreachability between program variables and field-sensitive non-cyclicity of program variables. The latter exploits the former for better precision. We build a data-flow analysis based on constraint graphs, whose nodes are program points and whose arcs propagate information according to the semantics of each bytecode instruction. We follow abstract interpretation both to approximate the concrete semantics and to prove our results formally correct. Our analysis has been designed with the goal of improving client analyses such as termination analysis, asserting the non-cyclicity of variables with respect to specific fields. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Scapin, Enrico] Univ Trier, Dept Comp Sci, D-54286 Trier, Germany.
   [Spoto, Fausto] Univ Verona, Dept Comp Sci, I-37100 Verona, Italy.
C3 Universitat Trier; University of Verona
RP Scapin, E (corresponding author), Univ Trier, Dept Comp Sci, D-54286 Trier, Germany.
EM scapin@uni-trier.de; fausto.spoto@univr.it
OI Spoto, Fausto/0000-0003-2973-0384
CR Cousot P., P 4 ACM SIGACT SIGPL
   Genaim S, 2013, THEOR COMPUT SCI, V474, P60, DOI 10.1016/j.tcs.2012.12.018
   Hind M., P 1 PROGR AN SOFTW T
   Lindholm Tim., 1999, JAVA VIRTUAL MACHINE, V2nd
   Logozzo F., P JOINT EUR C THEOR
   Nikolic D., P 9 INT C THEOR ASP
   Nikolic D., P 6 INT JOINT C AUT
   Palsberg J., P OBJ OR PROGR SYST
   Pearce David J., P 5 ACM SIGPLAN SIGS
   Rossignoli S., P 7 INT C VER MOD CH
   Sagiv M., 2002, ACM T PROGR LANG SYS, V24
   Scapin E., 2012, THESIS U VERONA ITAL
   Schmidt D.A., P 13 INT C STAT AN S
   Secci S., 2005, P 12 SAS LOND UK
   Spoto F., 2011, P 33 ICSE
   Spoto F, 2010, ACM T PROGR LANG SYS, V32, DOI 10.1145/1709093.1709095
NR 16
TC 1
Z9 1
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 1
PY 2014
VL 95
BP 359
EP 375
DI 10.1016/j.scico.2014.03.012
PN 3
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA AS9RH
UT WOS:000344578800007
OA Bronze
DA 2024-07-18
ER

PT J
AU Gonnord, L
   Schrammel, P
AF Gonnord, Laure
   Schrammel, Peter
TI Abstract acceleration in linear relation analysis
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Program analysis; Abstract interpretation; Linear relation analysis;
   Polyhedra; Acceleration
ID STATIC ANALYSIS; INVARIANT GENERATION; TRANSITIVE CLOSURE; WIDENING
   OPERATORS; SYSTEMS; REACHABILITY; VERIFICATION; INFINITE; COMPUTATION;
   AUTOMATA
AB Linear relation analysis is a classical abstract interpretation based on an over-approximation of reachable numerical states of a program by convex polyhedra. Since it works with a lattice of infinite height, it makes use of a widening operator to enforce the convergence of fixed point computations. Abstract acceleration is a method that computes the precise abstract effect of loops wherever possible and uses widening in the general case. Thus, it improves both the precision and the efficiency of the analysis. This article gives a comprehensive tutorial on abstract acceleration: its origins in Presburger-based acceleration including new insights w.r.t. the linear accelerability of linear transformations, methods for simple and nested loops, recent extensions, tools and applications, and a detailed discussion of related methods and future perspectives. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Gonnord, Laure] Univ Lille, LIFL, F-59655 Villeneuve Dascq, France.
   [Schrammel, Peter] Univ Oxford, Dept Comp Sci, Oxford OX1 3QD, England.
C3 Universite de Lille; University of Oxford
RP Gonnord, L (corresponding author), ENS Lyon, LIP, Lyon, France.
EM laure.gonnord@ens-lyon.fr; peter.schrammel@cs.ox.ac.uk
RI Schrammel, Peter/AAJ-9990-2021
OI Schrammel, Peter/0000-0002-5713-1381
FU APRON project of the "ACI Securite Informatique" of the French Ministry
   of Research; INRIA large-scale initiative Synchronics; ARTEMIS VeTeSS
   project
FX This work has been partially supported by the APRON project of the "ACI
   Securite Informatique" of the French Ministry of Research, the INRIA
   large-scale initiative Synchronics, and the ARTEMIS VeTeSS project.
CR Alias C, 2010, LECT NOTES COMPUT SC, V6337, P117, DOI 10.1007/978-3-642-15769-1_8
   Ancourt C, 2010, ELECTRON NOTES THEOR, V267, P3, DOI 10.1016/j.entcs.2010.09.002
   [Anonymous], 2007, INT C AUTOMATED SOFT
   [Anonymous], INT J SOFTW TOOLS TE, DOI DOI 10.1007/S100090050008
   [Anonymous], 1953, Contributions to Theory of Games
   [Anonymous], 1930, PROC COMPTES RENDUS
   ASARIN E, 1995, THEOR COMPUT SCI, V138, P35, DOI 10.1016/0304-3975(94)00228-B
   Bagnara R, 2004, LECT NOTES COMPUT SC, V2937, P135
   Bagnara R, 2003, LECT NOTES COMPUT SC, V2694, P337
   Bardin S, 2005, LECT NOTES COMPUT SC, V3707, P474
   Bardin S, 2004, LECT NOTES COMPUT SC, V2988, P576
   Bardin S, 2003, LECT NOTES COMPUT SC, V2725, P118
   Bardin Sebastien, 2008, International Journal on Software Tools for Technology Transfer, V10, P401, DOI 10.1007/s10009-008-0064-3
   Beletska A, 2009, LECT NOTES COMPUT SC, V5573, P98, DOI 10.1007/978-3-642-02026-1_9
   Bjorner N, 1997, THEOR COMPUT SCI, V173, P49, DOI 10.1016/S0304-3975(96)00191-0
   Boigelot B, 1999, FORM METHOD SYST DES, V14, P237, DOI 10.1023/A:1008719024240
   Boigelot B., 1994, Computer Aided Verification. 6th International Conference, CAV '94. Proceedings, P55
   Boigelot B., 1998, THESIS U LIEGE
   Bourdoncle F., 1993, Formal Methods in Programming and Their Applications International Conference Proceedings, P128, DOI 10.1007/BFb0039704
   Bozga M, 2010, LECT NOTES COMPUT SC, V6174, P227, DOI 10.1007/978-3-642-14295-6_23
   Bozga M, 2009, LECT NOTES COMPUT SC, V5505, P337, DOI 10.1007/978-3-642-00768-2_29
   Caspi P., 2008, REAL TIME SYSTEMS DE
   Caspi P., 1987, P 14 ACM SIGACT SIGP, P178, DOI DOI 10.1145/41625.41641
   Chernikova N.V., 1965, USSR Comput. Math. Math. Phys, V5, P228, DOI [10.1016/0041-5553(65)90045-5, DOI 10.1016/0041-5553(65)90045-5]
   Colón MA, 2003, LECT NOTES COMPUT SC, V2725, P420
   Comon H, 1998, LECT NOTES COMPUT SC, V1427, P268, DOI 10.1007/BFb0028751
   Costan A, 2005, LECT NOTES COMPUT SC, V3576, P462
   COUSOT P, 1992, LECT NOTES COMPUT SC, V631, P269, DOI 10.1007/3-540-55844-6_142
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Cousot P, 2009, FORM METHOD SYST DES, V35, P229, DOI 10.1007/s10703-009-0089-6
   Cousot Patrick, 1978, P 5 ACM SIGACT SIGPL, p84S96, DOI DOI 10.1145/512760.512770
   Dor N, 2001, LECT NOTES COMPUT SC, V2126, P194
   Feautrier P, 2010, ELECTRON NOTES THEOR, V267, P3, DOI 10.1016/j.entcs.2010.09.014
   Feret J, 2004, LECT NOTES COMPUT SC, V2986, P33
   Finkel A, 2002, LECT NOTES COMPUT SC, V2556, P145
   Finkel A., 2000, Mathematical Foundations of Computer Science 2000. 25th International Symposium, MFCS 2000. Proceedings. (Lecture Notes in Computer Science Vol.1893), P353
   Fribourg L, 1997, LECT NOTES COMPUT SC, V1243, P213
   Fukuda K., 1996, Combinatorics and Computer Science. 8th Franco-Japanese and 4th Franco-Chinese Conference. Selected Papers, P91
   Gawlitza T, 2007, LECT NOTES COMPUT SC, V4421, P300
   Gawlitza TM, 2012, J SYMB COMPUT, V47, P1416, DOI 10.1016/j.jsc.2011.12.048
   Gonnord L., 2007, THESIS U J FOURIER G
   Gonnord L., 2010, TR201010 VER RES
   Gonnord L, 2006, LECT NOTES COMPUT SC, V4134, P144
   Gopan D, 2006, LECT NOTES COMPUT SC, V4144, P452, DOI 10.1007/11817963_41
   Gopani D, 2007, LECT NOTES COMPUT SC, V4634, P349
   Gulwani S, 2008, LECT NOTES COMPUT SC, V5123, P190
   Gupta A, 2009, LECT NOTES COMPUT SC, V5643, P634, DOI 10.1007/978-3-642-02658-4_48
   Halbwachs N., 1993, Computer Aided Verification. 5th International Conference, CAV '93 Proceedings, P333
   Halbwachs N, 1997, FORM METHOD SYST DES, V11, P157, DOI 10.1023/A:1008678014487
   HALBWACHS N, 1991, P IEEE, V79, P1305, DOI 10.1109/5.97300
   Halbwachs N, 1979, THESIS I NATL POLYTE
   Halbwachs N, 2012, LECT NOTES COMPUT SC, V7460, P198, DOI 10.1007/978-3-642-33125-1_15
   Henry J, 2012, LECT NOTES COMPUT SC, V7460, P283, DOI 10.1007/978-3-642-33125-1_20
   Hojjat H., 2012, LECT NOTES COMPUT SC, V7436
   Hojjat H., 2012, LECT NOTES COMPUT SC, V7561
   Irigoin F., 1991, Conference Proceedings. 1991 International Conference on Supercomputing, P244, DOI 10.1145/109025.109086
   Jeannet B, 2003, FORM METHOD SYST DES, V23, P5, DOI 10.1023/A:1024480913162
   Jeannet B., 2000, THESIS GRENOBLE INP
   Jeannet B., 2010, ELECT NOTES THEOR CO, V267
   Jeannet B, 2009, LECT NOTES COMPUT SC, V5643, P661, DOI 10.1007/978-3-642-02658-4_52
   KAM JB, 1977, ACTA INFORM, V7, P305, DOI 10.1007/BF00290339
   Kelly W, 1996, INT J PARALLEL PROG, V24, P579
   Kovács L, 2008, LECT NOTES COMPUT SC, V5010, P349, DOI 10.1007/978-3-540-79709-8_35
   Kurzhanski AB, 2000, LECT NOTES COMPUT SC, V1790, P202
   Lakhdar-Chaouch L, 2011, LECT NOTES COMPUT SC, V6996, P492, DOI 10.1007/978-3-642-24372-1_38
   Lancaster P., 1984, THEORY MATRICES
   LEROUX J, 2003, THESIS ECOLE NORMALE
   Leroux J, 2007, LECT NOTES COMPUT SC, V4855, P520
   Leroux M, 2005, LECT NOTES COMPUT SC, V3707, P489
   Minsky M., 1967, Computation: finite and infinite machines
   Monniaux D, 2011, LECT NOTES COMPUT SC, V6887, P369, DOI 10.1007/978-3-642-23702-7_27
   Roux P, 2010, ELECTRON NOTES THEOR, V267, P55, DOI 10.1016/j.entcs.2010.09.018
   Roux P, 2012, HSCC 12: PROCEEDINGS OF THE 15TH ACM INTERNATIONAL CONFERENCE ON HYBRID SYSTEMS: COMPUTATION AND CONTROL, P105
   Sankaranarayanan S, 2005, LECT NOTES COMPUT SC, V3385, P25
   Sankaranarayanan S, 2004, LECT NOTES COMPUT SC, V3148, P53
   Sankaranarayanan Sriram, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P686, DOI 10.1007/978-3-642-22110-1_56
   Schrammel P, 2012, THESIS U GRENOBLE
   Schrammel P, 2010, ELECTRON NOTES THEOR, V267, P101, DOI 10.1016/j.entcs.2010.09.009
   Schrammel P, 2012, J SYMB COMPUT, V47, P1512, DOI 10.1016/j.jsc.2011.12.051
   Schrammel P, 2011, LECT NOTES COMPUT SC, V6887, P233, DOI 10.1007/978-3-642-23702-7_19
   Simon A, 2006, LECT NOTES COMPUT SC, V4279, P166
   Srivastava S, 2009, ACM SIGPLAN NOTICES, V44, P223, DOI 10.1145/1543135.1542501
   Su ZD, 2004, LECT NOTES COMPUT SC, V2988, P280
   Tiwari A, 2003, LECT NOTES COMPUT SC, V2623, P514
   Verdoolaege S, 2011, LECT NOTES COMPUT SC, V6887, P216, DOI 10.1007/978-3-642-23702-7_18
   Verge H.L., 1992, 1662 IRISA
   Wang C, 2007, LECT NOTES COMPUT SC, V4590, P352
   Wilkinson J. H., 1988, Monographs on numerical analysis
   WILLIAMS HP, 1986, AM MATH MON, V93, P681, DOI 10.2307/2322281
   Wolper P, 1998, LECT NOTES COMPUT SC, V1427, P88, DOI 10.1007/BFb0028736
NR 90
TC 11
Z9 11
U1 0
U2 1
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 1
PY 2014
VL 93
SI SI
BP 125
EP 153
DI 10.1016/j.scico.2013.09.016
PN B
PG 29
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CC8KR
UT WOS:000350618100004
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Feuser, J
   Peleska, J
AF Feuser, Johannes
   Peleska, Jan
TI Dependability in open proof software with hardware virtualization-The
   railway control systems perspective
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Open model software; ETCS; OpenETCS; Open proofs; Domain-specific
   modeling
AB Using the openETCS initiative as a starting point, we describe how open software can be applied in combination with platform-specific, potentially closed-source extensions, in the development, verification, validation and certification of safety-critical railway control systems. To achieve certification credit for safety-critical system developments, evidence about numerous development, verification and validation artifacts has to be provided. Our focus is therefore on open models, and a model-driven development approach ensures that a large portion of the artifacts is automatically generated from the model. This strategy is illustrated by means of the ETCS standard, as far as applicable to the ETCS on-board computer managing train control and train protection. We show that a domain-specific language is suitable to cover all modeling aspects for this computer, starting from the ETCS standard itself and ending at supplier-specific adaptations extending the re-usable core model in concrete developments. In order to re-use certification credits once achieved for the re-usable core model, we suggest virtualization of run-time environments, so that suppliers can embed re-usable core components as binary code into their ETCS target platforms. A detailed analysis is provided, indicating how future changes in the standard and project-specific adaptations, extensions and restrictions, can be accounted for in a new ETCS development, while minimizing the re-certification effort. It is shown for all phases of the development life cycle how the peer-reviewing capacity of the openETCS community may contribute to the correctness of the phases' outputs, thereby increasing overall system dependability, with special emphasis on safety and security. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Feuser, Johannes; Peleska, Jan] Univ Bremen, Dept Math & Informat, D-28359 Bremen, Germany.
C3 University of Bremen
RP Feuser, J (corresponding author), Univ Bremen, Dept Math & Informat, Bibliothekstr 1, D-28359 Bremen, Germany.
EM jfeuser@informatik.uni-bremen.de; jp@informatik.uni-bremen.de
FU Siemens AG through Graduate School on Embedded Systems GESy at the
   University of Bremen; ITEA2 project openETCS
FX The first author has been supported by Siemens AG through a research
   grant of the Graduate School on Embedded Systems GESy at the University
   of Bremen.<SUP>7</SUP> The second author is partially supported by the
   ITEA2 project openETCS [9].
CR [Anonymous], 2005, AV APPL SOFTW INT 1
   [Anonymous], 2009, AIRC DAT NETW 7
   [Anonymous], 1996, Safety-critical computer systems
   [Anonymous], 50129 CENELEC EN
   [Anonymous], 2012, OBJ CONSTR LANG
   [Anonymous], 2007, Understanding Full Virtualization, Paravirtualization, and Hardware Assist
   [Anonymous], 2009, RAILWAY OPERATION CO
   Berkenkotter K., 2006, International Journal on Software Tools for Technology Transfer, V8, P167, DOI 10.1007/s10009-005-0211-z
   Berry G., EFFECTIVENESS SYNCHR
   CENELEC, 2001, 50128 CENELEC EN
   CENELEC, 2001, 501591 CENELEC EN
   CENELEC, 1999, 50126 CENELEC EN
   European Committee for Electrotechnical Standardization (CENELEC), 2001, 501592 CENELEC EN
   Feuser J., 2010, FDN TECHNIQUES OPEN, V33
   Follinger O., 1992, REGELUNGSTECHNIK
   Harel D., 1996, ACM Transactions on Software Engineering and Methodology, V5, P293, DOI 10.1145/235321.235322
   Hase K., 2012, EUROPEAN RAILWAY REV, V18, P30
   Hase K.R., SIGNAL DRAHT, V12
   Hase K.R., SIGNAL DRAHT, V10
   Haxthausen A.E., 2003, P S FORM METH RAILW, P83
   Haxthausen AE, 2011, FORM ASP COMPUT, V23, P191, DOI 10.1007/s00165-009-0143-6
   Henning M., 1999, ADV CORBA PROGRAMMIN
   Kelly S., 2008, Domain-Specific Modeling
   KELLY S, 1997, COMPREHENSIVE METACA
   Leveson N., 1995, Safeware
   Loding H., 2010, P 3 INT C SOFTW TEST
   Mancina A, 2009, REAL-TIME SYST, V43, P177, DOI 10.1007/s11241-009-9086-5
   Mewes K., 2009, THESIS U BREMEN
   Miller I., 2003, MDA GUIDE VERSION 1
   OMG, 2005, UML 2 0 SUP SPEC OMG
   OMG, 2006, UML 2 0 INFR SPEC OM
   Peleska J, 2011, LECT NOTES COMPUT SC, V7019, P146, DOI 10.1007/978-3-642-24580-0_11
   Real-Time Systems Research Group, UP PROT
   Shaikh S.A., 2009, P 3 INT WORKSH FDN T, V20
   Stahl T., 2006, MDA GUIDE VERSION 1, P64
   Stahl T., 2006, MODEL DRIVEN SOFTWAR, P71
   Stahl T., 2006, Model-driven software development: technology, engineering, management
   Stallings W., OPERATING SYSTEMS IN, p353 
   Stallings W., 2008, OPERATING SYSTEMS IN, V6th
   Stroustrup B., 1998, C PROGRAMMING LANGUA
   Tanenbaum A.:., 2008, MODERN OPERATING SYS
   UNISIG, ERTMS ETCS LANG
   UNISIG, MESS
   UNISIG, BAS SYST DESCR
   UNISIG, PRINCIPLES
   UNISIG, PROC
   UNISIG, 2006, ERTMS ETCS CLASS 1 S
   UNISIG, MOD TRANS
NR 48
TC 2
Z9 2
U1 1
U2 9
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 1
PY 2014
VL 91
SI SI
BP 188
EP 215
DI 10.1016/j.scico.2013.08.007
PN B
PG 28
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AK4NO
UT WOS:000338401600004
OA hybrid
DA 2024-07-18
ER

PT J
AU Ketterlin, A
   Clauss, P
AF Ketterlin, Alain
   Clauss, Philippe
TI Recovering memory access patterns of executable programs
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Memory accesses; Binary analysis; Decompilation; Static single
   assignment; Memory tracing; Program skeletonization; Automatic
   parallelization
ID LOOPS
AB This paper deals with the binary analysis of executable programs, with the goal of understanding how they access memory. It explains how to statically build a formal model of all memory accesses. Starting with a control flow graph of each procedure, well-known techniques are used to structure this graph into a hierarchy of loops in all cases. The paper shows that much more information can be extracted by performing a complete data-flow analysis over machine registers after the program has been put in static single assignment (SSA) form. By using the SSA form, registers used in addressing memory can be symbolically expressed in terms of other previously set registers. By including the loop structures in the analysis, loop indices and trip counts can also often be expressed symbolically. The whole process produces a formal model made of loops where memory accesses are linear expressions of loop counters and registers. The paper provides a quantitative evaluation of the results when applied to several dozens of SPEC benchmark programs. Because static analysis has no access to input data, the paper ends by describing a lightweight instrumentation strategy that collects at run time enough information to rebuild an exact trace. The section on applications also describes how the techniques developed in this paper can be used to perform automatic parallelization of binary code. (C) 2012 Elsevier B.V. All rights reserved.
C1 [Ketterlin, Alain] INRIA CAMUS Team, Paris, France.
   Univ Strasbourg, Strasbourg, France.
C3 Universites de Strasbourg Etablissements Associes; Universite de
   Strasbourg
RP Ketterlin, A (corresponding author), INRIA CAMUS Team, Paris, France.
EM Alian.Ketterlin@inria.fr; Philippe.Clauss@inria.fr
RI Clauss, Philippe/I-3699-2019
OI Clauss, Philippe/0000-0002-5759-9195
CR Amme W, 1998, 1998 INTERNATIONAL CONFERENCE ON PARALLEL ARCHITECTURES AND COMPILATION TECHNIQUES, PROCEEDINGS, P340, DOI 10.1109/PACT.1998.727270
   [Anonymous], 2009, INT 64 IA 32 ARCH SO
   Appel Andrew W., 2004, MODERN COMPILER IMPL
   Balakrishnan G, 2004, LECT NOTES COMPUT SC, V2985, P5
   Bondhugula U, 2008, ACM SIGPLAN NOTICES, V43, P101, DOI 10.1145/1379022.1375595
   Cifuentes C, 1997, INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE, PROCEEDINGS, P188
   CYTRON R, 1991, ACM T PROGR LANG SYS, V13, P451, DOI 10.1145/115372.115320
   Feautrier Paul., 1988, RAIRO RECHERCHE OPER, V22
   GERLEK MP, 1995, ACM T PROGR LANG SYS, V17, P85, DOI 10.1145/200994.201003
   Havlak P, 1997, ACM T PROGR LANG SYS, V19, P557, DOI 10.1145/262004.262005
   Janssen J, 1997, ACM T PROGR LANG SYS, V19, P1031, DOI 10.1145/267959.269971
   Kennedy Ken., 2002, Optimizing compilers for modern architectures: a dependence-based approach
   Ketterlin A, 2011, INT SYM PERFORM ANAL, P97, DOI 10.1109/ISPASS.2011.5762719
   LARUS JR, 1993, COMPUTER, V26, P52, DOI 10.1109/2.211900
   Lengauer T., 1979, ACM T PROGR LANG SYS, V1, P121, DOI 10.1145/357062.357071
   Luk CK, 2005, ACM SIGPLAN NOTICES, V40, P190, DOI 10.1145/1064978.1065034
   Moseley T, 2007, INT SYM CODE GENER, P198
   Moseley Tipp., 2007, Proceedings of the International Conference on Computing Frontiers, CF, P143
   Muchnick S., 1997, ADV COMPILER DESIGN
   Pradelle B, 2012, ACM T ARCHIT CODE OP, V8, DOI 10.1145/2086696.2086718
   Pugh W, 1998, ACM T PROGR LANG SYS, V20, P635, DOI 10.1145/291889.291900
   Ramalingam G., 1999, Conference Record of POPL '99. 26th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P119, DOI 10.1145/292540.292553
   Ramalingam G, 2000, ACM SIGPLAN NOTICES, V35, P233, DOI 10.1145/358438.349330
   Scholz B, 2008, EIGHTH IEEE INTERNATIONAL WORKING CONFERENCE ON SOURCE CODE ANALYSIS AND MANIPULATION, PROCEEDINGS, P25, DOI 10.1109/SCAM.2008.22
   The Standard Performance Evaluation Corporation (SPEC), 2009, SPEC OPENMP SPEC CPU
   Unger S, 2002, ACM T PROGR LANG SYS, V24, P299, DOI 10.1145/567097.567098
   Wolfe M.J., 1995, High Performance Compilers for Parallel Computing
NR 27
TC 0
Z9 0
U1 0
U2 1
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 1
PY 2014
VL 80
BP 440
EP 456
DI 10.1016/j.scico.2012.08.002
PN B
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 292FH
UT WOS:000329887100010
OA hybrid
DA 2024-07-18
ER

PT J
AU Ruiz-López, T
   Noguera, M
   Rodríguez, MJ
   Garrido, JL
   Chung, L
AF Ruiz-Lopez, Tomas
   Noguera, Manuel
   Jose Rodriguez, Maria
   Luis Garrido, Jose
   Chung, Lawrence
TI REUBI: A Requirements Engineering method for ubiquitous systems
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Non-functional requirements; Requirements engineering; Ubiquitous
   systems; Software design; Context-awareness; Positioning systems
ID GOAL; DESIGN
AB Recent technological advances are increasing the spread of Ubiquitous Computing, leading to the appearance of numerous software systems, which benefit from the features of this new paradigm. Nevertheless, there are a lack of methodologies to properly support the development process of these systems. An important part of the Software Engineering lifecycle is the Requirements Engineering stage, as it grounds the bases for system design for their success. In particular, systematically addressing Non-Functional Requirements such as dynamicity and adaptation, that are important features of ubiquitous systems, eventually leads to higher quality designs. In this paper, a Requirements Engineering Method for the analysis of Ubiquitous Systems, called REUBI, is introduced. It is a goal-based method that represents the influence of context and adverse situations, providing an evaluation procedure to help in the decision making about objectives satisfaction. The proposal is illustrated through the analysis of a Positioning Service of a real system. Additionally, the application of the method has been evaluated by a team of software engineers for the analysis of an Ambient Assisted Living (AAL) health care system. (C) 2012 Elsevier B.V. All rights reserved.
C1 [Ruiz-Lopez, Tomas; Noguera, Manuel; Jose Rodriguez, Maria; Luis Garrido, Jose] Univ Granada, E-18014 Granada, Spain.
   [Chung, Lawrence] Univ Texas Dallas, Dept Comp Sci, Dallas, TX 75230 USA.
C3 University of Granada; University of Texas System; University of Texas
   Dallas
RP Ruiz-López, T (corresponding author), Univ Granada, C Periodista Daniel Saucedo Aranda S-N, E-18014 Granada, Spain.
EM tomruiz@ugr.es; mnoguera@ugr.es; mjfortiz@ugr.es; jgarrido@ugr.es;
   chung@utdallas.edu
RI Noguera, Manuel/A-7073-2008; Tsadimas, Anargyros/ABE-9931-2020; Garrido,
   Jose Luis/C-2410-2012
OI Noguera, Manuel/0000-0003-0503-6451; Tsadimas,
   Anargyros/0000-0001-5944-8617; Garrido, Jose Luis/0000-0001-7004-1957;
   Ruiz Lopez, Tomas/0000-0001-9994-6522
FU Andalusian Regional Government [P10-TIC-6600]; CEI-BioTIC Granada
   [20F2/36]; scholarship program FPU; Spanish Ministry of Education
FX This research work is funded by Project P10-TIC-6600 granted by the
   Andalusian Regional Government; Project 20F2/36 funded by CEI-BioTIC
   Granada; and the scholarship program FPU, granted by the Spanish
   Ministry of Education.
CR Abowd GD, 1997, WIREL NETW, V3, P421, DOI 10.1023/A:1019194325861
   Alarcón R, 2006, COMPUT INFORM, V25, P469
   Ali R, 2010, REQUIR ENG, V15, P439, DOI 10.1007/s00766-010-0110-z
   [Anonymous], 2005, HUMAN CTR SOFTWARE E
   Anton AI, 1998, PROC INT CONF SOFTW, P157, DOI 10.1109/ICSE.1998.671112
   Baldauf M, 2007, INT J AD HOC UBIQ CO, V2, P263, DOI 10.1504/IJAHUC.2007.014070
   Baresi L., 2010, Proceedings of the 2010 IEEE 18th International Conference on Requirements Engineering (RE2010), P125, DOI 10.1109/RE.2010.25
   Chen H, 2003, KNOWL ENG REV, V18, P197, DOI 10.1017/S0269888904000025
   Cheng BHC, 2009, LECT NOTES COMPUT SC, V5795, P468, DOI 10.1007/978-3-642-04425-0_36
   Chung L., 2006, SOFTWARE ENG RES APP, V3647, P29
   Chung L., 2000, Non-functional Requirements in Software Engineering
   Chung L, 2009, LECT NOTES COMPUT SC, V5600, P363, DOI 10.1007/978-3-642-02463-4_19
   Darimont R., 1997, P 19 INT C SOFTWARE
   Goldsby HJ, 2008, FIFTEENTH IEEE INTERNATIONAL CONFERENCE AND WORKSHOPS ON THE ENGINEERING OF COMPUTER-BASED SYSTEMS, PROCEEDINGS, P36, DOI 10.1109/ECBS.2008.22
   Henkel M, 2007, INT CONF E BUS ENG, P295, DOI 10.1109/ICEBE.2007.42
   Jara AJ, 2011, PERS UBIQUIT COMPUT, V15, P431, DOI 10.1007/s00779-010-0353-1
   Jorgensen JB, 2004, IEEE SOFTWARE, V21, P34, DOI 10.1109/MS.2004.1270759
   Kolos-Mazuryk L., 2006, A Survey of Requirements Engineering Methods for Pervasive Services
   López C, 2006, LECT NOTES COMPUT SC, V3844, P227
   Messeguer R, 2010, J UNIVERS COMPUT SCI, V16, P1556
   Miller I., 2003, MDA GUIDE VERSION 1
   Mylopoulos J, 1999, COMMUN ACM, V42, P31, DOI 10.1145/291469.293165
   OMG, 2003, UN MOD LANG UML V2 4
   Ordinez L, 2011, J UNIVERS COMPUT SCI, V17, P1572
   Potts C, 1999, IEEE INTERNATIONAL SYMPOSIUM ON REQUIREMENTS ENGINEERING, PROCEEDINGS, P58, DOI 10.1109/ISRE.1999.777985
   Qureshi Nauman A., 2011, Advanced Information Systems Engineering. Proceedings 23rd International Conference, CAiSE 2011, P33, DOI 10.1007/978-3-642-21640-4_5
   Rodriguez-Dominguez C., 2010, J NETWORK PROTOCOLS, V2, P85, DOI DOI 10.5296/NPA.V2I3.421
   Ruiz-Lopez T., 2011, EVALUATING AAL SYSTE
   Ruiz-López T, 2010, ADV INTEL SOFT COMPU, V79, P373
   Satyanarayanan M, 2001, IEEE PERS COMMUN, V8, P10, DOI 10.1109/98.943998
   Shin ME, 2007, SCI COMPUT PROGRAM, V66, P60, DOI 10.1016/j.scico.2006.10.009
   Sitou W, 2007, P INT COMP SOFTW APP, P593
   Spinola R., 2009, LEVERAGING APPL FORM, P587
   Spinola R.O., 2010, ACM S APPL COMP 2010, P306
   Supakkul S, 2005, THIRD ACIS INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING RESEARCH, MANAGMENT AND APPLICATIONS, PROCEEDINGS, P112, DOI 10.1109/SERA.2005.19
   Sutcliffe A, 2005, 13TH IEEE INTERNATIONAL CONFERENCE ON REQUIREMENTS ENGINEERING, PROCEEDINGS, P19, DOI 10.1109/RE.2005.51
   Sutcliffe A, 2003, 11TH IEEE INTERNATIONAL REQUIREMENTS ENGINEERING CONFERENCE, PROCEEDINGS, P320
   Tsadimas A, 2009, 2009 FOURTH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING ADVANCES (ICSEA 2009), P59, DOI 10.1109/ICSEA.2009.18
   Uchitel S, 2006, REQUIR ENG, V11, P123, DOI 10.1007/s00766-005-0024-3
   Vera R, 2011, PERS UBIQUIT COMPUT, V15, P365, DOI 10.1007/s00779-010-0357-x
   Yu ESK, 1997, RE '97 - PROCEEDINGS OF THE THIRD IEEE INTERNATIONAL SYMPOSIUM ON REQUIREMENTS ENGINEERING, P226, DOI 10.1109/ISRE.1997.566873
   Zambrano A., 2011, SCI COMPUTER PROGRAM
NR 42
TC 17
Z9 20
U1 0
U2 26
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 1
PY 2013
VL 78
IS 10
BP 1895
EP 1911
DI 10.1016/j.scico.2012.07.021
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 200RJ
UT WOS:000323086300009
OA Bronze
DA 2024-07-18
ER

PT J
AU Shi, R
   Xi, HW
AF Shi, Rui
   Xi, Hongwei
TI A linear type system for multicore programming in ATS
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT Annual Brazilian Symposium on Programming Languages (SBLP)
CY AUG 19-21, 2009
CL Gramado, BRAZIL
SP Catholic Univ Pelotas (UCPel), Comp Dept, Brazilian Comp Soc, CAPES, CNPq, Microsoft, Govt State Rio Grande do Sul
DE Type systems; Linear types; Multicore; ATS
ID SEPARATION
AB In this day and age of multicore architectures, programming language support is in urgent need for constructing programs that can take great advantage of machines with multiple cores. We present in this paper an approach to safe multicore programming in ATS, a recently developed functional programming language that supports both linear and dependent types. In particular, we formalize a type system capable of guaranteeing safe manipulation of resources on multicore machines and establish its soundness. We also provide concrete examples as well as experimental results in support of the practicality of the presented approach to multicore programming. (C) 2012 Elsevier B.V. All rights reserved.
C1 [Shi, Rui] Google Inc, Washington, DC USA.
   [Xi, Hongwei] Boston Univ, Boston, MA 02215 USA.
C3 Google Incorporated; Boston University
RP Xi, HW (corresponding author), Boston Univ, Boston, MA 02215 USA.
EM hwxi@cs.bu.edu
CR Abadi M, 2006, ACM T PROGR LANG SYS, V28, P207, DOI 10.1145/1119479.1119480
   [Anonymous], 1997, The Definition of Standard ML
   Asperti A., 1987, LOGIC CONCURRENCY
   Boyapati C, 2002, ACM SIGPLAN NOTICES, V37, P211, DOI 10.1145/583854.582440
   Boyapati C, 2001, ACM SIGPLAN NOTICES, V36, P56, DOI 10.1145/504311.504287
   Brookes S, 2004, LECT NOTES COMPUT SC, V3170, P16
   Butenhof David R., 1997, Programming with POSIX threads
   Chen CY, 2005, ACM SIGPLAN NOTICES, V40, P66, DOI 10.1145/1090189.1086375
   Chirimar J., 1996, J FUNCT PROGRAM, V6, P195
   Crary K., 1999, Conference Record of POPL '99. 26th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P262, DOI 10.1145/292540.292564
   Danish M, 2010, PLPV'10: PROCEEDINGS OF THE 2010 ACM SIGPLAN WORKSHOP ON PROGRAMMING LANGUAGES MEETS PROGRAM VERIFICATION, P9, DOI 10.1145/1707790.1707793
   GIRARD JY, 1987, THEOR COMPUT SCI, V50, P1, DOI 10.1016/0304-3975(87)90045-4
   Harris Tim., 2005, PPoPP '05: Proceedings of the tenth ACM SIGPLAN symposium on Principles and practice of parallel programming, P48, DOI DOI 10.1145/1065944.1065952
   Hawblitzel C., 2004, P SPACE 2004
   Hofman M., 2000, Nordic Journal of Computing, V7, P258
   Hongwei Xi, 2002, Higher-Order and Symbolic Computation, V15, P91, DOI 10.1023/A:1019916231463
   Hongwei Xu, 1999, Conference Record of POPL '99. 26th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P214
   Igarashi A., 2000, PREL P 3 ACM SIGPLAN
   Jouvelot Pierre., 1991, ACM SIGACTSIGPLAN S, P303, DOI DOI 10.1145/99583.99623
   Kobayashi N., 1999, Conference Record of POPL '99. 26th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P29, DOI 10.1145/292540.292546
   Mandelbaum Y, 2003, ACM SIGPLAN NOTICES, V38, P213, DOI 10.1145/944746.944725
   Nanevski A, 2006, ACM SIGPLAN NOTICES, V41, P62, DOI 10.1145/1160074.1159812
   O'Hearn PW, 2004, LECT NOTES COMPUT SC, V3170, P49
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Shi R., 2007, THESIS BOSTON U
   Shi R, 2007, PLPV'07: PROCEEDINGS OF THE 2007 WORKSHOP ON PROGRAMMING LANGUAGES MEETS PROGRAM VERIFICATION, P41, DOI 10.1145/1292597.1292605
   TAKAHASHI M, 1995, INFORM COMPUT, V118, P120, DOI 10.1006/inco.1995.1057
   The Cilk Development Team, 2009, CILK PROJ
   Turner DN, 1999, THEOR COMPUT SCI, V227, P231, DOI 10.1016/S0304-3975(99)00054-7
   WADLER P, 1990, PROGRAMMING CONCEPTS AND METHODS, P561
   Walker D, 2001, ACM SIGPLAN NOTICES, V36, P181, DOI 10.1145/507669.507658
   Walker D., 2000, TYP COMP 3 INT WORKS, V2071, P177, DOI [10.1007/3-540-45332-6\_7, DOI 10.1007/3-540-45332-6]
   Xi H., 2007, LNCS, P188
   XI H, 1998, THESIS CARNEGIE MELL
   Xi HW, 2007, J FUNCT PROGRAM, V17, P215, DOI 10.1017/S0956796806006216
   Xi HW, 2004, ANN NY ACAD SCI, V3085, P394
   Zhu DP, 2005, LECT NOTES COMPUT SC, V3350, P83
NR 37
TC 2
Z9 2
U1 0
U2 5
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD AUG 1
PY 2013
VL 78
IS 8
BP 1176
EP 1192
DI 10.1016/j.scico.2012.09.005
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 168XV
UT WOS:000320742200013
OA Bronze
DA 2024-07-18
ER

PT J
AU Ilie, S
   Badica, C
AF Ilie, Sorin
   Badica, Costin
TI Multi-agent approach to distributed ant colony optimization
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Distributed multi-agent middleware; Ant colony optimization; Traveling
   salesman problem
ID TRAVELING SALESMAN PROBLEM
AB This paper presents a configurable distributed architecture for ant colony optimization. We represent the problem environment as a distributed multi-agent system, and we reduce ant management to messages that are asynchronously exchanged between agents. The experimental setup allows the deployment of the system on computer clusters, as well as on ordinary computer networks. We present experimental results that we obtained by utilizing our system to solve nontrivial instances of the traveling salesman problem. The results support the effectiveness and scalability of our proposal. (C) 2011 Elsevier B.V. All rights reserved.
C1 [Ilie, Sorin; Badica, Costin] Univ Craiova, Software Engn Dept, Craiova 200440, Romania.
C3 University of Craiova
RP Badica, C (corresponding author), Univ Craiova, Software Engn Dept, Bvd Decebal 107, Craiova 200440, Romania.
EM sorin.ilie@software.ucv.ro; costin.badica@software.ucv.ro
RI Badica, Costin/B-8006-2012; Ilie, Sorin Viorel/N-9787-2019; Ilie,
   Sorin/AAS-1922-2021; Ilie, Sorin C/R-7780-2018; BĂDICĂ,
   COSTIN/IYS-6136-2023
OI Badica, Costin/0000-0001-8480-9867; Ilie, Sorin
   Viorel/0000-0003-2787-4106; Ilie, Sorin C/0000-0003-2787-4106; 
FU European Social Fund - Investing in People, within the Sectoral
   Operational Programme Human Resources Development; 
   [POSDRU/88/1.5/S/50783];  [ID50783]
FX This work was partially supported by the strategic grant
   POSDRU/88/1.5/S/50783, Project ID50783 (2009), co-financed by the
   European Social Fund - Investing in People, within the Sectoral
   Operational Programme Human Resources Development 2007-2013.
CR Ali Al-Dahoud, 2010, American Journal of Applied Sciences, V7, P428, DOI 10.3844/ajassp.2010.428.433
   [Anonymous], P INT C WEB INT MIN
   [Anonymous], 2004, ANT COLONY OPTIMIZAT
   [Anonymous], COMPUTING INFORM
   [Anonymous], APPL SOFT C IN PRESS
   [Anonymous], P 1 INT S NAT INSP S
   [Anonymous], P 8 INT WORKSH DISTR
   [Anonymous], INT J COMPUTER INTER
   [Anonymous], 2007, Developing Multi-Agent Systems with JADE
   Aras N, 2003, IEEE T NEURAL NETWOR, V14, P869, DOI 10.1109/TNN.2003.811562
   Czarnowski I, 2009, LECT NOTES ARTIF INT, V5559, P764, DOI 10.1007/978-3-642-01665-3_77
   Depickère S, 2008, J INSECT PHYSIOL, V54, P1349, DOI 10.1016/j.jinsphys.2008.07.013
   Detrain C, 2006, PHYS LIFE REV, V3, P162, DOI 10.1016/j.plrev.2006.07.001
   Holvoet T, 2009, INT CONF SELF SELF, P1, DOI 10.1109/SASO.2009.31
   Ilie S., 2010, Proceedings 2010 International Multiconference on Computer Science and Information Technology (IMCSIT 2010), P197
   Ilie S, 2010, STUD COMP INTELL, V315, P119
   Issariyakul T., 2009, INTRO NETWORK SIMULA, DOI 10.1007%2F978-0-387- 71760-9_2
   Reinelt G., 1991, ORSA Journal on Computing, V3, P376, DOI 10.1287/ijoc.3.4.376
   Thain D, 2005, CONCURR COMP-PRACT E, V17, P323, DOI 10.1002/cpe.938
   Twomey C, 2010, INFORM SCIENCES, V180, P2390, DOI 10.1016/j.ins.2010.02.017
   Wooldridge M. J., 2002, INTRO MULTIAGENT SYS
   Xiang W, 2008, ENG APPL ARTIF INTEL, V21, P73, DOI 10.1016/j.engappai.2007.03.008
NR 22
TC 29
Z9 35
U1 0
U2 25
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 1
PY 2013
VL 78
IS 6
BP 762
EP 774
DI 10.1016/j.scico.2011.09.001
PG 13
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 133JJ
UT WOS:000318134400012
OA Bronze
DA 2024-07-18
ER

PT J
AU Pourvatan, B
   Sirjani, M
   Hojjat, H
   Arbab, F
AF Pourvatan, Bahman
   Sirjani, Marjan
   Hojjat, Hossein
   Arbab, Farhad
TI Symbolic execution of Reo circuits using constraint automata
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Symbolic execution; Reo; Constraint automata; Coordination languages;
   Program verification; Program validation
ID COMPONENT CONNECTORS; SEMANTICS; MODELS
AB Reo is a coordination language that can be used to model different systems. We propose a technique for symbolic execution of Reo circuits using the symbolic representation of data constraints in Constraint Automata. This technique enables us to obtain the relations among the data that pass through different nodes in a circuit from which we infer the coordination patterns of the circuit. Deadlocks, which may involve data values, can also be checked using reachability analysis. As an alternative to constructing the symbolic execution tree, we use regular expressions and their derivatives which we obtain from our deterministic finite automata. We show that there is an upper bound of one for unfolding the cycles in constraint automata which is enough to reveal the relations between symbolic representations of inputs and outputs. In the presence of feedback in a Reo circuit a number of substitutions are necessary to make the relationship between successive input/output values explicit. The number of these substitutions depends on the number of buffers in the Reo circuit, and can be found by static analysis. We illustrate our technique on a set of Reo circuits to show the extracted relations between inputs and outputs. We have implemented a tool to automate our proposed technique. (c) 2011 Elsevier B.V. All rights reserved.
C1 [Sirjani, Marjan] Reykjavik Univ, Sch Comp Sci, Reykjavik, Iceland.
   [Pourvatan, Bahman] Amirkabir Univ Technol, Dept Comp Engn, Tehran, Iran.
   [Pourvatan, Bahman; Arbab, Farhad] Leiden Univ, LIACS, NL-2300 RA Leiden, Netherlands.
   [Sirjani, Marjan] Univ Tehran, ECE Dept, Tehran, Iran.
   [Hojjat, Hossein] Ecole Polytech Fed Lausanne, CH-1015 Lausanne, Switzerland.
C3 Reykjavik University; Amirkabir University of Technology; Leiden
   University - Excl LUMC; Leiden University; University of Tehran; Swiss
   Federal Institutes of Technology Domain; Ecole Polytechnique Federale de
   Lausanne
RP Sirjani, M (corresponding author), Reykjavik Univ, Sch Comp Sci, Reykjavik, Iceland.
EM pourvatan@aut.ac.ir; marjan@ru.is; hossein.hojjat@epfl.ch; farhad@cwi.nl
RI Hojjat, Hossein/AAB-1884-2019; Hojjat, Hossein/KBC-7456-2024
FU CWI (within the NWO) [DN62-613]
FX We thank Carolyn Talcott for her insightful and very useful comments. We
   also thank the reviewers of the workshop version of our paper presented
   at FOCLASA'09, for their very careful and helpful comments. The
   extension of the paper is mainly based on their comments. They also
   pointed to the related work and literature which helped us to properly
   position our method among other approaches. The work of the second
   author is partly supported by CWI (within the NWO project "Synthesis and
   Analysis of Connector Components (SYANCO)" DN62-613).
CR Agha G., 1990, ACTORS-A Model of Concurrent Computation in Distributed Systems, Artificial Intelligence
   Anand Saswat, 2009, International Journal on Software Tools for Technology Transfer, V11, P53, DOI 10.1007/s10009-008-0090-1
   [Anonymous], 1990, HDB THEORETICAL COMP
   [Anonymous], 1995, Temporal verification of reactive systems-safety
   [Anonymous], THEORY COMPUTING MAC
   [Anonymous], P 2009 ACM S APPL CO
   [Anonymous], 1989, CWI Q.
   [Anonymous], 2006, INTERACTIVE COMPUTAT
   Arbab F, 2004, MATH STRUCT COMP SCI, V14, P329, DOI 10.1017/S0960129504004153
   Arbab F, 2003, LECT NOTES COMPUT SC, V2755, P34
   ARBAB F, 2004, ELECT NOTES THEORETI, V97, P25
   Arbab F., CASM CONSTRAIN UNPUB
   Arbab F, 2008, LECT NOTES ARTIF INT, V5357, P42, DOI 10.1007/978-3-540-89674-6_8
   Arbab F, 2008, LECT NOTES COMPUT SC, V5282, P114, DOI 10.1007/978-3-540-87891-9_8
   Arbab F, 2008, COMM COM INF SC, V17, P108
   Arhab F., 1996, Coordination Languages and Models. First International Conference COORDINATION '96. Proceedings, P34
   Baier C, 2008, PRINCIPLES OF MODEL CHECKING, P1
   Baier C, 2006, SCI COMPUT PROGRAM, V61, P75, DOI 10.1016/j.scico.2005.10.008
   Baier C, 2009, LECT NOTES COMPUT SC, V5521, P247, DOI 10.1007/978-3-642-02053-7_13
   Boyer R. S., 1975, SIGPLAN Notices, V10, P234, DOI 10.1145/390016.808445
   Bradley A. R., 2007, The Calculus of Computation
   BRYANT RE, 1991, 28TH ACM/IEEE DESIGN AUTOMATION CONFERENCE, P397, DOI 10.1145/127601.127701
   BRZOZOWSKI JA, 1964, J ACM, V11, P481, DOI 10.1145/321239.321249
   Clarke D., 2004, Leveraging Applications of Formal Methods. First International Symposium, ISoLA 2004. Revised Selected Papers (Lecture Notes in Computer Science Vol. 4313), P9
   Clarke EM, 1999, MODEL CHECKING, P1
   Clarke L. A., 1976, IEEE Transactions on Software Engineering, VSE-2, P215, DOI 10.1109/TSE.1976.233817
   Colman A, 2005, LECT NOTES COMPUT SC, V3454, P63
   Cruz JC, 1999, LECT NOTES COMPUT SC, V1594, P355
   Gaston C, 2006, LECT NOTES COMPUT SC, V3964, P1
   GELERNTER D, 1985, ACM T PROGR LANG SYS, V7, P80, DOI 10.1145/2363.2433
   Groote J.F, 2007, P DAGST SEM
   JORDAN D, 2006, WEB SERVICES BUSINES
   KAIN R, 1981, AUTOMATA THEORY MACH
   Khurshid S, 2003, LECT NOTES COMPUT SC, V2619, P553
   KING JC, 1976, COMMUN ACM, V19, P385, DOI 10.1145/360248.360252
   Kluppelholz S., 2006, ELECT NOTES THEORETI
   Koehler C, 2007, LECT NOTES COMPUT SC, V4749, P625
   Kokash N., 2010, P 2010 ACM S APPL CO, P2406, DOI DOI 10.1145/1774088.1774590
   Kokash N., 2010, LECT NOTES COMPUTER
   Kokash N., 2010, P IEEE INT C SOFTW E
   Lazovik A, 2007, LECT NOTES COMPUT SC, V4749, P398
   Mahdikhani Farzad, 2008, 2008 IEEE International Symposium on Service-Oriented System Engineering, P239, DOI 10.1109/SOSE.2008.39
   Margaria T., 2008, COMMUNICATIONS COMPU, V17
   McMillan K. L., 1993, Symbolic model checking
   Mehta NR, 2004, 19TH INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING, PROCEEDINGS, P371, DOI 10.1109/ASE.2004.1342767
   Meng S, 2007, APPLIED COMPUTING 2007, VOL 1 AND 2, P346, DOI 10.1145/1244002.1244085
   Meseguer J, 2002, LECT NOTES COMPUT SC, V2374, P1
   Morasca S., 1989, ESEC '89. 2nd European Software Engineering Conference Proceedings, P469
   Mousavi MR, 2006, ELECTRON NOTES THEOR, V154, P83, DOI 10.1016/j.entcs.2005.12.034
   Neumann C., 2005, CONVERTING DETERMINI
   Omicini A, 2007, ELECTRON NOTES THEOR, V175, P97, DOI 10.1016/j.entcs.2007.03.006
   Omicini Andrea., 2001, DECLARATIVE PROGRAMM, V48, P179, DOI DOI 10.1016/S1571-0661(04)00156-2
   Omicini Andrea., 1999, P 1999 ACM S APPL CO, P183, DOI [10.1145/298151.298231, DOI 10.1145/298151.298231]
   Pandey M, 1997, DES AUT CON, P167, DOI 10.1145/266021.266056
   Papadopoulos G.A., 1998, Advances in Computers, P330
   Pasareanu Corina S., 2008, P 2008 INT S SOFTW T, P15, DOI [DOI 10.1145/1390630.1390635, DOI 10.1145/1390630]
   Pasareanu CS, 2004, LECT NOTES COMPUT SC, V2989, P164
   Pourvatan B, 2009, ELECTRON NOTES THEOR, V255, P137, DOI 10.1016/j.entcs.2009.10.029
   Razavi N, 2007, LECT NOTES COMPUT SC, V4767, P113
   Razavi N, 2006, FOURTH ACM & IEEE INTERNATIONAL CONFERENCE ON FORMAL METHODS AND MODELS FOR CO-DESIGN, PROCEEDINGS, P113, DOI 10.1109/MEMCOD.2006.1695912
   Ren SP, 2006, LECT NOTES COMPUT SC, V4038, P247
   Seger CJH, 2005, IEEE T COMPUT AID D, V24, P1381, DOI 10.1109/TCAD.2005.850814
   Siegel SF, 2008, ACM T SOFTW ENG METH, V17, DOI 10.1145/1348250.1348256
   Sirjani M, 2006, LECT NOTES COMPUT SC, V4038, P281
   Talcott C., SCI COMPUTER PROGRAM
   Talcott C, 2008, ELECTRON NOTES THEOR, V194, P39, DOI 10.1016/j.entcs.2008.03.098
   Tasharofi S., 2008, ELECT NOTES THEORETI, V159, P99
   Tasharofi S, 2008, LECT NOTES COMPUT SC, V4937, P108
   Zhang J, 2004, PROCEEDINGS OF THE SECOND INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING AND FORMAL METHODS, P242, DOI 10.1109/SEFM.2004.1347528
   Zhang J, 2008, LECT NOTES COMPUT SC, V4171, P539
NR 70
TC 3
Z9 3
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUL 1
PY 2012
VL 77
IS 7-8
SI SI
BP 848
EP 869
DI 10.1016/j.scico.2011.04.001
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 944DU
UT WOS:000304179400005
OA Bronze
DA 2024-07-18
ER

PT J
AU Clarke, D
   Proença, J
   Lazovik, A
   Arbab, F
AF Clarke, Dave
   Proenca, Jose
   Lazovik, Alexander
   Arbab, Farhad
TI Channel-based coordination via constraint satisfaction
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Coordination; Constraint satisfaction; Constraint automata; Reo;
   Connector colouring
ID COMPONENT CONNECTORS; REO; MODEL
AB Coordination in Reo emerges from the composition of the behavioural constraints of primitives, such as channels, in a component connector. Understanding and implementing Reo, however, has been challenging due to the interaction of the channel metaphor, which is an inherently local notion, and the non-local nature of the constraints imposed by composition. In this paper, the channel metaphor takes a back seat. We focus on the behavioural constraints imposed by the composition of primitives and phrase the semantics of Reo as a constraint satisfaction problem. Not only does this provide a clear description of the behaviour of Reo connectors in terms of synchronisation and data flow constraints, it also paves the way for new implementation techniques based on constraint satisfaction. We also demonstrate that this approach is more efficient than the existing techniques based on connector colouring. (C) 2010 Elsevier B.V. All rights reserved.
C1 [Proenca, Jose; Arbab, Farhad] CWI, NL-1098 XG Amsterdam, Netherlands.
   [Clarke, Dave] Katholieke Univ Leuven, Dept Comp Sci, B-3001 Heverlee, Belgium.
   [Lazovik, Alexander] Univ Groningen, NL-9700 AV Groningen, Netherlands.
C3 KU Leuven; University of Groningen
RP Proença, J (corresponding author), CWI, Sci Pk 123, NL-1098 XG Amsterdam, Netherlands.
EM dave.clarke@cs.kuleuven.be; proenca@cwi.nl; a.lazovik@rug.nl;
   farhad@cwi.nl
RI Proenca, Jose/K-4256-2016
OI Proenca, Jose/0000-0003-0971-8919
FU FCT, Portugal [22485]
FX The second author was supported by FCT grant 22485 - 2005, Portugal.
CR Andreoli J.-M., 1996, Theory and Practice of Object Systems, V2, P77, DOI 10.1002/(SICI)1096-9942(1996)2:2<77::AID-TAPO1>3.0.CO;2-4
   ANDREOLI JM, 1990, NEW GENERAT COMPUT, P495
   [Anonymous], 1999, JavaSpaces Principles, Patterns, and Practice
   [Anonymous], 1999, Communicating and Mobile Systems: The Calculus
   [Anonymous], 2003, Principles of Constraint Programming
   [Anonymous], 2006, INTERACTIVE COMPUTAT
   Arbab F, 2005, SCI COMPUT PROGRAM, V55, P3, DOI 10.1016/j.scico.2004.05.010
   Arbab F, 2004, MATH STRUCT COMP SCI, V14, P329, DOI 10.1017/S0960129504004153
   ARBAB F, 1998, SIGAPP APPL COMPUT R, V6, P4
   ARBAB F, 2008, ELECT NOTES THEORETI
   Arbab F, 2007, SOFTW SYST MODEL, V6, P59, DOI 10.1007/s10270-006-0009-9
   Arbab F, 2007, LECT NOTES COMPUT SC, V4467, P286
   Arbab F, 2009, ELECTRON NOTES THEOR, V229, P21, DOI 10.1016/j.entcs.2009.06.027
   Arbab F, 2009, LECT NOTES COMPUT SC, V5486, P37, DOI 10.1007/978-3-642-03429-9_4
   Arbab F, 2008, COMM COM INF SC, V17, P108
   Baier C, 2006, LECT NOTES COMPUT SC, V4038, P1
   Baier C, 2006, SCI COMPUT PROGRAM, V61, P75, DOI 10.1016/j.scico.2005.10.008
   Bettini L, 2003, LECT NOTES COMPUT SC, V2874, P88
   Bonsangue M, 2009, LECT NOTES COMPUT SC, V5521, P184, DOI 10.1007/978-3-642-02053-7_10
   CLARKE D, 2009, ABS09115445 CORR
   Clarke D, 2008, FUND INFORM, V82, P361
   Clarke D, 2007, SCI COMPUT PROGRAM, V66, P205, DOI 10.1016/j.scico.2007.01.009
   Clarke D, 2009, ELECTRON NOTES THEOR, V229, P43, DOI 10.1016/j.entcs.2009.06.028
   Clarke D, 2008, LECT NOTES COMPUT SC, V5382, P226, DOI 10.1007/978-3-540-92188-2_10
   Costa D. M., 2010, THESIS
   EVERAARS CTH, 2006, SENE0601 CWI
   Fiadeiro JL, 2006, LECT NOTES COMPUT SC, V4184, P193
   Frolund S., 1996, COORDINATING DISTRIB
   GELERNTER D, 1985, ACM T PROGR LANG SYS, V7, P80, DOI 10.1145/2363.2433
   Khosravi R, 2008, LECT NOTES COMPUT SC, V5052, P169, DOI 10.1007/978-3-540-68265-3_11
   Kitchin D, 2006, LECT NOTES COMPUT SC, V4137, P477
   Klüppelholz S, 2007, ELECTRON NOTES THEOR, V175, P19, DOI 10.1016/j.entcs.2007.03.003
   Koehler C., 2009, P SAC 2009, P1369, DOI DOI 10.1145/1529282.1529587
   Koehler C, 2008, ELECTRON NOTES THEOR, V194, P77, DOI 10.1016/j.entcs.2008.03.100
   LAZOVIK A, 2006, AICT ICIW 06, P150
   Maraikar Z, 2008, LECT NOTES COMPUT SC, V5364, P70, DOI 10.1007/978-3-540-89652-4_9
   MENG S, 2007, SAC, P346
   Meng S, 2007, LECT NOTES COMPUT SC, V4468, P301
   Minsky NH, 2000, ACM T SOFTW ENG METH, V9, P273, DOI 10.1145/352591.352592
   MONTANARI U, 1998, 3 BIENN WORLD C INT, V4, P1
   Mousavi MR, 2006, ELECTRON NOTES THEOR, V154, P83, DOI 10.1016/j.entcs.2005.12.034
   Papadopoulos G. A., 1998, ADV COMPUT, V46, P329, DOI [DOI 10.1016/S0065-2458(08)60208-9, 10.1016/S0065-2458(08)60208-9]
   PROENCA J, 2007, P INT WORKSH FDN COO
   Rutten JJMM, 2000, THEOR COMPUT SCI, V249, P3, DOI 10.1016/S0304-3975(00)00056-6
   Saraswat V, 1996, J SYMB COMPUT, V22, P475, DOI 10.1006/jsco.1996.0064
   Saraswat Vijay A., 1993, Concurrent Constraint Programming
   SCHOLTEN JVG, 2007, THESIS LEIDEN U
   Sheini HM, 2006, LECT NOTES COMPUT SC, V4121, P1
   Van der Aalst WMP, 2003, DISTRIB PARALLEL DAT, V14, P5, DOI 10.1023/A:1022883727209
   VENKATARAMAN KN, 1987, J ACM, V34, P492, DOI 10.1145/23005.24037
   Wegner P., 1996, LNCS, V1061, P28, DOI DOI 10.1007/3-540-61052-9
   XIE M, 2005, THESIS LEIDEN U NETH
NR 52
TC 12
Z9 12
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD AUG 1
PY 2011
VL 76
IS 8
SI SI
BP 681
EP 710
DI 10.1016/j.scico.2010.05.004
PG 30
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 766JL
UT WOS:000290778300005
OA Green Published, Green Submitted, Green Accepted, hybrid
DA 2024-07-18
ER

PT J
AU Matthes, R
AF Matthes, Ralph
TI Map fusion for nested datatypes in intensional type theory
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 9th International Conference on Mathematics of Program Construction
CY JUL 15-18, 2008
CL Marseille, FRANCE
SP Ctr Int Rech Math Luminy, INRIA
DE Coq; Type theory; Datatypes with true nesting; Naturality for
   generalized maps; Explicit flattening; Monad laws for substitution;
   Terminating recursion schemes
ID ITERATION
AB A definitional extension LNGMIt of the Calculus of Inductive Constructions (CIC), that underlies the proof assistant Coq, is presented that allows also to program with nested datatypes that are not legal datatype definitions of CIC since they are "truly nested". LNGMIt ensures termination of recursively defined functions that follow iteration schemes in the style of N. Mendler. Characteristically for them, termination comes from polymorphic typing instead of structural requirements on recursive calls.
   LNGMIt comes with an induction principle and generalized Mendler-style iteration that allows a very clean representation of substitution for an untyped lambda calculus with explicit flattening, as an extended case study.
   On the generic level, a notion of naturality adapted to generalized Mendler-style iteration is developed, and criteria for it are established, in particular, a map fusion theorem for the obtained iterative functions.
   Concerning the case study, substitution is proven to fulfill two of the three monad laws, the third one only for "hereditarily canonical" terms, but this is rectified by a relativization of the whole construction to those terms. All the generic results and the case study have been fully formalized with the Coq system. (C) 2010 Elsevier B.V. All rights reserved.
C1 [Matthes, Ralph] CNRS, IRIT, F-31062 Toulouse 9, France.
   [Matthes, Ralph] Univ Toulouse 3, F-31062 Toulouse 9, France.
C3 Centre National de la Recherche Scientifique (CNRS); Universite Federale
   Toulouse Midi-Pyrenees (ComUE); Universite de Toulouse; Institut
   National Polytechnique de Toulouse; Universite Toulouse III - Paul
   Sabatier; Universite de Toulouse; Universite Toulouse III - Paul
   Sabatier
RP Matthes, R (corresponding author), CNRS, IRIT, 118 Route Narbonne, F-31062 Toulouse 9, France.
EM Ralph.Matthes@irit.fr
RI Matthes, Ralph/D-3231-2012
OI Matthes, Ralph/0000-0002-7299-2411
CR Abel A, 2005, THEOR COMPUT SCI, V333, P3, DOI 10.1016/j.tcs.2004.10.017
   Abel A, 2004, LECT NOTES COMPUT SC, V3210, P190
   Abel A, 2003, LECT NOTES COMPUT SC, V2701, P1
   ABEL A, 2006, THESIS LMU MUNCHEN
   Altenkirch T, 1999, LECT NOTES COMPUT SC, V1683, P453
   [Anonymous], J FUNCT PROGRAM
   [Anonymous], COQ PROOF ASS REF MA
   Barthe G, 2004, MATH STRUCT COMP SCI, V14, P97, DOI 10.1017/S0960129503004122
   BELLEGARDE F, 1994, SCI COMPUT PROGRAM, V23, P287, DOI 10.1016/0167-6423(94)00022-0
   Bertot Y., 2004, TEXT THEORET COMP S
   Bird R., 1999, Formal Aspects of Computing, V11, P200, DOI 10.1007/s001650050047
   BIRD R, 2000, MILLENIAL PERSPECTIV
   BIRD R, 1997, INT SERIES COMPUTER, V100
   BIRD R, 1998, LECT NOTES COMPUTER, V1422, P52, DOI DOI 10.1007/BFB0054285
   Capretta Venanzio., 2004, A Polymorphic Representation of Induction-Recursion
   Dybjer P, 2000, J SYMBOLIC LOGIC, V65, P525, DOI 10.2307/2586554
   HINZE R, 2000, P 2 WORKSH GEN PROGR
   Johann Patricia, 2009, Higher-Order and Symbolic Computation, V22, P155, DOI 10.1007/s10990-009-9047-7
   Letouzey P, 2002, LECT NOTES COMPUT SC, V2646, P200
   Mac Lane S, 1998, GRAD TEXT M, V5
   Martin C, 2004, FORM ASP COMPUT, V16, P19, DOI 10.1007/s00165-003-0013-6
   MATTHES R, 2009, COQ DEV MAP FUSION N
   MATTHES R, 1996, DEC 19 1996 GIV BERN
   MATTHES R, 2008, COQ DEV INDUCTION PR
   Matthes R, 2008, LECT NOTES COMPUT SC, V5133, P220
   Matthes R, 2008, LECT NOTES COMPUT SC, V5028, P431, DOI 10.1007/978-3-540-69407-6_47
   Matthes R, 2009, J FUNCT PROGRAM, V19, P439, DOI 10.1017/S095679680900731X
   Mendler N. P., 1987, Proceedings of the Symposium on Logic in Computer Science (Cat. No.87CH2464-6), P30
   PAULINMOHRING C, 1996, DEFINITIONS INDUCTIV, V1
   UUSTALU T, 1997, 8 NORD WORKSH PROGR, V248, P237
   WADLER P, 1989, P 4 INT C FUNCT PROG, P349
NR 31
TC 5
Z9 5
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR 1
PY 2011
VL 76
IS 3
SI SI
BP 204
EP 224
DI 10.1016/j.scico.2010.05.008
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 720GT
UT WOS:000287269500004
DA 2024-07-18
ER

PT J
AU Ciancia, V
   Ferrari, G
   Guanciale, R
   Strollo, D
AF Ciancia, Vincenzo
   Ferrari, Gianluigi
   Guanciale, Roberto
   Strollo, Daniele
TI Event based choreography
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 5th International Workshop on Formal Aspects of Component Software
   (FACS)
CY SEP 10-12, 2008
CL Malaga, SPAIN
DE Service-oriented architectures; Service coordination; Sessions for
   services; Conformance; Process calculi
ID MODEL-CHECKING; CALCULUS; VERIFICATION; COMMUNICATION; COORDINATION;
   AUTOMATA
AB An important feature of the service-oriented approach is the ability to aggregate, through programmable coordination patterns, the activities involved in service interactions. Two different approaches can be adopted to tackle service coordination: orchestration and choreography. In this paper, we introduce a formal methodology to handle coordination among services from the perspective of a global observer, in the spirit of choreography models. In particular, we address the problem of verifying compliance and consistency between the design of service interactions and the choreography constraints. (C) 2010 Elsevier B.V. All rights reserved.
C1 [Ciancia, Vincenzo; Ferrari, Gianluigi; Strollo, Daniele] Univ Pisa, Dipartimento Informat, I-56127 Pisa, Italy.
   [Guanciale, Roberto; Strollo, Daniele] Inst Adv Studies IMT Lucca, I-55100 Lucca, Italy.
C3 University of Pisa; IMT School for Advanced Studies Lucca
RP Strollo, D (corresponding author), Univ Pisa, Dipartimento Informat, Largo B Pontecorvo 3, I-56127 Pisa, Italy.
EM ciancia@di.unipi.it; giangi@di.unipi.it; roberto.guanciale@imtlucca.it;
   strollo@di.unipi.it
RI Ciancia, Vincenzo/AAX-7263-2020; Ciancia, Vincenzo/G-4149-2016
OI Ciancia, Vincenzo/0000-0003-1314-0574; Ciancia,
   Vincenzo/0000-0003-1314-0574; FERRARI, GIAN-LUIGI/0000-0003-3548-5514;
   Guanciale, Roberto/0000-0002-8069-6495
CR Amadio RM, 1998, THEOR COMPUT SCI, V195, P291, DOI 10.1016/S0304-3975(97)00223-5
   Bartoletti M., 2007, LECT NOTES COMPUTER, V4667
   Boreale M, 2006, LECT NOTES COMPUT SC, V4184, P38
   Bouali A., 1996, LNCS, V1102, P441
   Bravetti M, 2008, FUND INFORM, V89, P451
   BRUNI R, 2009, LECT NOTES COMPUTER, V5569
   Carbone M, 2007, LECT NOTES COMPUT SC, V4421, P2
   Cardelli L, 2000, THEOR COMPUT SCI, V240, P177, DOI 10.1016/S0304-3975(99)00231-5
   CIANCIA V, 2010, ELECT NOTES IN PRESS
   CIANCIA V, THESIS U PISA
   CIANCIA V, 2008, FACS 2008
   Ciancia V, 2008, LECT NOTES COMPUT SC, V5048, P134, DOI 10.1007/978-3-540-68855-6_9
   Ciancia V, 2008, ELECTRON NOTES THEOR, V203, P49, DOI 10.1016/j.entcs.2008.05.019
   CLEAVELAND R, 1993, ACM T PROGR LANG SYS, V15, P36, DOI 10.1145/151646.151648
   Cugola G, 2005, 25th IEEE International Conference on Distributed Computing Systems Workshops, Proceedings, P377, DOI 10.1109/ICDCSW.2005.101
   De Nicola R, 1998, IEEE T SOFTWARE ENG, V24, P315, DOI 10.1109/32.685256
   Ferrari G, 2005, THEOR COMPUT SCI, V331, P325, DOI 10.1016/j.tcs.2004.09.021
   Ferrari G, 2007, LECT NOTES COMPUT SC, V4574, P66
   Ferrari G, 2006, LECT NOTES COMPUT SC, V4294, P453
   Ferrari G, 2006, LECT NOTES COMPUT SC, V4229, P46
   Ferrari GL, 2005, LECT NOTES COMPUT SC, V3441, P1
   Ferrari GL, 2003, ACM T SOFTW ENG METH, V12, P440, DOI 10.1145/990010.990013
   FERRARI GL, 2010, TGC
   FERRARI GL, 2008, WS FM, P127
   Fournet C, 2005, J LOGIC ALGEBR PROGR, V63, P131, DOI 10.1016/j.jlap.2004.01.006
   Fournet C., 1996, LECT NOTES COMPUTER, V1119, P406
   Frey D, 2007, LECT NOTES COMPUT SC, V4467, P37
   Gadducci F., 2006, Higher-Order and Symbolic Computation, V19, P283, DOI 10.1007/s10990-006-8749-3
   GELERNTER D, 1985, ACM T PROGR LANG SYS, V7, P80, DOI 10.1145/2363.2433
   GUANCIALE R, 2009, THESIS I ADV STUDIES
   Guidi C, 2006, LECT NOTES COMPUT SC, V4294, P327
   Hennessy M, 2002, INFORM COMPUT, V173, P82, DOI 10.1006/inco.2001.3089
   HONDA K, 1991, LECT NOTES COMPUT SC, V512, P133
   Huang Y, 2006, INT CONF PARA PROC, P7
   Kazhamiakin R, 2006, LECT NOTES COMPUT SC, V4184, P227
   Lapadula A, 2007, LECT NOTES COMPUT SC, V4421, P33
   LIU Y, 2003, TR574 IND U COMP SCI
   Meier R, 2002, 22ND INTERNATIONAL CONFERENCE ON DISTRIBUTED COMPUTING SYSTEMS WORKSHOP, PROCEEDINGS, P639, DOI 10.1109/ICDCSW.2002.1030841
   MILNER R, 1993, NATO ASI F, V94
   Misra J, 2004, PROCEEDINGS OF THE SECOND INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING AND FORMAL METHODS, P2, DOI 10.1109/SEFM.2004.1347498
   Montanan Ugo, 2000, LECT NOTES COMPUTER, V1893, P569, DOI DOI 10.1007/3-540-44612-5
   Montanari U, 2005, LECT NOTES COMPUT SC, V3465, P1
   Montanari U, 1999, LECT NOTES COMPUT SC, V1579, P255
   *OASIS BPEL, OB SPEC
   Pistore M., 1999, Ph.D. thesis
   STROLLO D, 2009, THESIS I ADV STUDIES
   Su J, 2008, LECT NOTES COMPUT SC, V4937, P1
   *WEB SERV, WEB SERV CHOR DESCR
   YONEKI E, 2004, ICDCS WORKSH IEEE CO, P788
NR 49
TC 5
Z9 5
U1 0
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 1
PY 2010
VL 75
IS 10
SI SI
BP 848
EP 878
DI 10.1016/j.scico.2010.02.009
PG 31
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 638SZ
UT WOS:000280917600004
OA hybrid
DA 2024-07-18
ER

PT J
AU Lung, CH
   Rajeswaran, P
   Sivadas, S
   Sivabalasingam, T
AF Lung, Chung-Horng
   Rajeswaran, Pragash
   Sivadas, Sathyanarayanan
   Sivabalasingam, Theleepan
TI Experience of building an architecture-based generator using GenVoca for
   distributed systems
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Generative programming; GenVoca; Software architecture; Prototyping;
   Distributed systems; Software patterns
ID MODEL
AB Selecting the architecture that meets the requirements, both functional and nonfunctional, is a challenging task, especially at the early stage when more uncertainties exist. Architectural prototyping is a useful approach in supporting the evaluation of alternative architectures and balancing different architectural qualities. Generative programming has gained increasing attention, but it mostly deals with lower-level artifacts; hence, it usually supports lower degrees of software automation. This paper proposes an architecture-centric generative approach in facilitating architectural prototyping and evaluation. We also present our empirical experience in raising the level of abstraction to the architecture layer for distributed and concurrent systems using GenVoca. GenVoca is a generative programming approach that is used here to support the generation or instantiation of a particular architectural pattern in distributed computing based on user's selection. As a result, it can support rapid architectural prototyping and evaluation of both functional and non-functional requirements and encourage greater degrees of software automation and reuse. Lessons learned from the empirical study are also reported and could be applied to other areas. (C) 2009 Elsevier B.V. All rights reserved.
C1 [Lung, Chung-Horng; Rajeswaran, Pragash; Sivadas, Sathyanarayanan; Sivabalasingam, Theleepan] Carleton Univ, Dept Syst & Comp Engn, Ottawa, ON K1S 5B6, Canada.
C3 Carleton University
RP Lung, CH (corresponding author), Carleton Univ, Dept Syst & Comp Engn, Ottawa, ON K1S 5B6, Canada.
EM chlung@sce.carleton.ca
FU NSERC (National Sciences and Engineering Research Council) of Canada
   [RGP 251177-2002]
FX We would like to thank Nortel Networks for providing us a network
   routing software system for research and education. We are indebted to
   the anonymous reviewers for their useful comments on the paper. The
   project is partially funded by NSERC (National Sciences and Engineering
   Research Council) of Canada; Grant Number RGP 251177-2002.
CR ALHUSSAINI A, 2004, PROJECT REPORT CARLE
   [Anonymous], 1996, Pattern oriented software architecture: a system of patters
   [Anonymous], 2000, Generative programming: methods, tools, and applications
   BACHMANN F, 2003, CMUSI2003TR021
   Bardram JE, 2004, FOURTH WORKING IEEE/IFIP CONFERENCE ON SOFTWARE ARCHITECTURE (WICSA 2004), PROCEEDINGS, P15, DOI 10.1109/WICSA.2004.1310686
   Batory D, 2006, IBM SYST J, V45, P527, DOI 10.1147/sj.453.0527
   Batory D, 2004, IEEE T SOFTWARE ENG, V30, P355, DOI 10.1109/TSE.2004.23
   Batory D, 1997, IEEE T SOFTWARE ENG, V23, P67, DOI 10.1109/32.585497
   BATORY D, 2002, ACM T SOFTW ENG METH, V1, P355
   BATORY D, 2007, EUR JOINT C THEOR PR
   BAYER J, 2006, P 1 GEN PROGR COMP E
   BEZIVIN J, 2005, MODEL DRIVEN ENG PRI
   Booch Grady., 2004, MDA J
   Bosch J., 2000, Design and Use of Software Architectures: Adopting and Evolving a Product-Line Approach
   CHEN DJ, 2005, P INT C SOFTW ENG KN, P360
   Czarnecki K, 2007, SPLC 2007: 11TH INTERNATIONAL SOFTWARE PRODUCT LINE CONFERENCE, PROCEEDINGS, P23, DOI 10.1109/SPLINE.2007.24
   Gamma E., 1994, Design patterns: Elements of reusable object-oriented software
   Heineman GeorgeT., 2001, COMPONENT BASED SOFT
   Hillston J., 1996, A Compositional Approach to Performance Modelling
   HOBBS C, 2001, CGNET USERS GUIDE DE
   Kang Kyo C, 1990, Technical Report
   Kazman R, 1998, IEEE INT C ENG COMP, P68, DOI 10.1109/ICECCS.1998.706657
   Lee J.-C., 2004, PERFORMANCE INVESTIG
   Loeckx J., 1996, SPECIFICATION ABSTRA
   LOPEHERREJON R, 2006, P 2006 ACM SIGPLAN S, P66
   Lung C.-H., 2006, P GEN PROGR COMP ENG
   Lung C.-H., 2004, J SYSTEMICS CYBERNET, V2
   Lung CH, 2004, PROCEEDINGS OF THE IASTED INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P321
   Lung CH, 2000, INT J SOFTW ENG KNOW, V10, P97, DOI 10.1142/S0218194000000079
   LUNG CH, 2003, P INT WORKSH SOFTW V, P30
   Martini A., 2004, PETRARCA BAROCCO CAN, V108, P11
   Northrop Linda M., 2005, A framework for software product line practice
   RJAESWARAN P, 2004, DEV C GENERATIVE FRA
   SCHMIDT D, 2004, PATTERN ORIENTED SOF
   SINGHAL VP, 1996, THESIS U TEXAS AUSTI
   Smith ConnieU., 2001, PERFORMANCE SOLUTION
   Sztipanovits J, 2002, LECT NOTES COMPUT SC, V2487, P32
   Trujillo S., 2007, P 6 INT C GEN PROGR, P105
   Trujillo S, 2007, PROC INT CONF SOFTW, P44
   WOODSIDE CM, 1995, IEEE T COMPUT, V44, P20, DOI 10.1109/12.368012
   Woodside M, 2007, FOSE 2007: FUTURE OF SOFTWARE ENGINEERING, P171, DOI 10.1109/FOSE.2007.32
   Wu PF, 2004, IEEE IPCCC, P231
NR 42
TC 1
Z9 1
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD AUG 1
PY 2010
VL 75
IS 8
SI SI
BP 672
EP 688
DI 10.1016/j.scico.2009.05.003
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 620YD
UT WOS:000279538200002
OA hybrid
DA 2024-07-18
ER

PT J
AU Järvi, J
   Marcus, M
   Smith, JN
AF Jaervi, Jaakko
   Marcus, Mat
   Smith, Jacob N.
TI Programming with C plus plus concepts
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 6th International Conference on Generative Programming and Component
   Engineering
CY OCT 01-03, 2007
CL Salzburg, AUSTRIA
SP ACM SIGPLAN, ACM SIGSOFT
DE C plus; Concepts; Software libraries; Component adaptation; Generic
   programming; Polymorphism
ID GENERIC COMPONENTS; TEMPLATE-LIBRARY; ALGORITHMS
AB This paper explores the definition, applications, and limitations of concepts and concept maps in C++, with a focus on library composition. We also compare and contrast concepts to adaptation mechanisms in other languages.
   Efficient, non-intrusive adaptation mechanisms are essential when adapting data structures to a library's API. Development with reusable components is a widely practiced method of building software. Components vary in form, ranging from source code to non-modifiable binary libraries. The Concepts language features, slated to appear in the next version of C++, have been designed with such compositions in mind, promising an improved ability to create generic, non-intrusive, efficient, and identity-preserving adapters.
   We report on two cases of data structure adaptation between different libraries, and illustrate best practices and idioms. First, we adapt GUI widgets from several libraries, with differing APIs, for use with a generic layout engine. We further develop this example to describe the run-time concept idiom, extending the applicability of concepts to domains where run-time polymorphism is required. Second, we compose an image processing library and a graph algorithm library, by making use of a transparent adaptation layer, enabling the efficient application of graph algorithms to the image processing domain. We use the adaptation layer to realize a few key algorithms, and report little or no performance degradation. (C) 2009 Elsevier B.V. All rights reserved.
C1 [Jaervi, Jaakko; Smith, Jacob N.] Texas A&M Univ, College Stn, TX 77843 USA.
   [Marcus, Mat] Adobe Syst Inc, Seattle, WA USA.
C3 Texas A&M University System; Texas A&M University College Station; Adobe
   Systems Inc.
RP Järvi, J (corresponding author), Texas A&M Univ, College Stn, TX 77843 USA.
EM jarvi@cs.tamu.edu; mmarcus@emarcus.org; jnsmith@cs.tamu.edu
CR *AD SYST INC, 2008, AD SOURC LIB
   [Anonymous], 2005, P GT2005 ASME TURB E
   [Anonymous], 2001, LCPC
   [Anonymous], C REPORT
   AUSTERN MH, 1998, PROFESSIONAL COMPUTI
   BAUMGARTNER G, 2002, OSUCISRC5101TR08
   BECKER EP, 2006, 1 ISOIEC JTC INF TEC
   Bellman R., 1958, Q APPL MATH, V16, P87
   Bourdev Lubomir., 2006, Generic Image Library
   Breuer A., 2006, P 20 IEEE INT PARALL, P466, DOI [DOI 10.1109/IPDPS.2006.1639723, DOI 10.1109/1PDPS.2006.1639723]
   Chakravarty MMT, 2005, ACM SIGPLAN NOTICES, V40, P241, DOI 10.1145/1090189.1086397
   Dickinson S, 2001, IEEE T PATTERN ANAL, V23, P1049, DOI 10.1109/TPAMI.2001.954597
   Fabri A, 2000, SOFTWARE PRACT EXPER, V30, P1167, DOI 10.1002/1097-024X(200009)30:11<1167::AID-SPE337>3.0.CO;2-B
   Felzenszwalb PF, 2004, INT J COMPUT VISION, V59, P167, DOI 10.1023/B:VISI.0000022288.19776.77
   Gamma E., 1994, Design patterns: Elements of reusable object-oriented software
   Garcia R, 2007, J FUNCT PROGRAM, V17, P145, DOI 10.1017/S0956796806006198
   Gopal K., 2003, Proceedings of the Fifteenth Innovative Applications of Artificial Intelligence Conference, P93
   Gregor D, 2005, ACM SIGPLAN NOTICES, V40, P423, DOI 10.1145/1103845.1094844
   GREGOR D, 2005, N1848050108 INF TECH
   GREGOR D, 2008, N2677080187 SUBC SC
   GREGOR D, 2008, N274108025 INF TECHN
   GREGOR D, 2006, OOPSLA 06, P291
   GREGOR D, 2005, CONCEPTGCC CONCEPT E
   HINNANT HE, 2002, N1377020035 INF TECH
   Hinnant Howard E., 2004, N1690040130 INF TECH
   HOLTON TR, 1999, P 7 INT C INT SYST M, P130
   *IBM RS, SUBJ OR PROGR AD PAT
   *INF TEHCN, 2003, N1487030070 INF TECH
   *INT ORG STAND, 2003, 148322003 ISOIEC, P757
   Jarvi J., 2006, PLDI 2006. Proceedings of the 2006 ACM SIGPLAN Conference on Programming Language Design and Implementation, P272, DOI 10.1145/1133981.1134014
   Järvi J, 2003, LECT NOTES COMPUT SC, V2830, P228
   JAZAYERI M, 1998, DAGST SEM GEN PROGR
   Jones MP, 2000, LECT NOTES COMPUT SC, V1782, P230
   JONES SP, 1997, P 2 HASK WORKSH
   Kiczales Gregor, 2001, LNCS, V2072, P327, DOI DOI 10.1007/3-540-45337-718
   LAMMEL R, 2006, GPCE 06, P161
   Läufer K, 2000, COMPUT J, V43, P469, DOI 10.1093/comjnl/43.6.469
   LAUFER K, 1994, ACM T PROGR LANG SYS, V16, P1411, DOI 10.1145/186025.186031
   Litvinov V., 1998, OOPSLA 1998, V33, P388
   MAGNUSSON B, 1991, J OBJECT ORIENTED PR, V4
   MARCUS M, 2007, MULTIPARADIGM PROGRA
   Mattsson M, 1999, COMMUN ACM, V42, P81
   Mehlhorn K., 1999, LEDA PLATFORM COMBIN
   MITCHELL N, 2005, P 1 INT WORKSH LIB C
   ODERSKY M, 2006, M IFIP WG 2 8 FUNCT
   Odersky M., 2006, SCALA LANGUAGE SPECI
   Parent S., 2006, WORKSHOP LIB CENTRIC
   PARENT S, 2005, OBJECTS UNDERSTANDIN
   PIRKELBAUER P, 2008, SAC 08, P171
   Pitt WR, 2001, BIOINFORMATICS, V17, P729, DOI 10.1093/bioinformatics/17.8.729
   Shani U., 1980, SIGGRAPH COMPUTER GR, V14, P321
   Shi JB, 2000, IEEE T PATTERN ANAL, V22, P888, DOI 10.1109/34.868688
   Siek J., 2002, The Boost Graph Library: User Guide and Reference Manual
   Siek J., 2001, BOOST GRAPH LIB
   SIEK J, 2000, 1 WORKSH C TEMPL PRO
   Siek JG, 1999, COMPUT SCI ENG, V1, P70, DOI 10.1109/5992.805137
   *SIL GRAPH INC, 2004, SGI IMPL STAND TEMPL
   Stepanov A., 1994, HPL9434R1
   SZYPERSKI C, 1998, COMPONENT OBJECT ORI
   Troyer Mathias., ITERATIVE EIGENSOLVE
   WADLER P, 1989, CONFERENCE RECORD OF THE SIXTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P60, DOI 10.1145/75277.75283
   C BOOST BOOST SMART
   [No title captured]
NR 63
TC 3
Z9 3
U1 0
U2 6
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUL 1
PY 2010
VL 75
IS 7
SI SI
BP 596
EP 614
DI 10.1016/j.scico.2009.01.001
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 603YE
UT WOS:000278243200007
DA 2024-07-18
ER

PT J
AU Garavel, H
   Salaün, G
   Serwe, W
AF Garavel, Hubert
   Salauen, Gwen
   Serwe, Wendelin
TI On the semantics of communicating hardware processes and their
   translation into LOTOS for the verification of asynchronous circuits
   with CADP
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Asynchronous circuit; Asynchronous logic; Asynchrony; CHP; Formal
   method; GALs architecture; Handshake protocol; Hardware architecture;
   Hardware design; LOTOS; Modelling; Network on chip; Process calculus;
   Specification; Structured operational semantics; Translation;
   Validation; Verification
ID DESIGN; ILLUSTRATION; CONSTRUCTION; TOOL; CHP
AB Hardware process calculi, such as CHP (Communicating Hardware Processes), BALSA, or HASTE (formerly TANGRAM), are a natural approach for the description of asynchronous hardware architectures. These calculi are extensions of standard process calculi with particular synchronisation features implemented using handshake protocols. In this article, we first give a structural operational semantics for value-passing CHP. Compared with the existing semantics Of CHP defined by translation into Petri nets, our semantics is general enough to handle value-passing CHP with communication channels open to the environment, and is also independent of any particular (2- or 4-phase) handshake protocol used for circuit implementation. We then describe the translation Of CHP into the process calculus LOTOS (ISO standard 8807), in order to allow asynchronous hardware architectures expressed in CHP to be verified using the CADP verification toolbox for LOTOS. A translator from CHP to LOTOS has been implemented and successfully used for the compositional verification of two industrial case studies, namely an asynchronous implementation of the DES (Data Encryption Standard) and an asynchronous interconnect of a NoC (Network on Chip). (c) 2008 Elsevier B.V. All rights reserved.
C1 [Serwe, Wendelin] INRIA, VASY Project Team, Ctr Rech Grenoble Rhone Alpes, F-38334 Saint Ismier, France.
C3 Inria
RP Serwe, W (corresponding author), INRIA, VASY Project Team, Ctr Rech Grenoble Rhone Alpes, 655 Ave Europe, F-38334 Saint Ismier, France.
EM Wendelin.Serwe@inria.fr
CR [Anonymous], 1980, CALCULUS COMMUNICATI, DOI DOI 10.1007/3-540-10235-3
   [Anonymous], 1985, EATCS MONOGRAPHS THE
   [Anonymous], FIPS PUB
   BAILEY A, 1994, FORM METHOD SYST DES, V4, P213, DOI 10.1007/BF01384047
   BAULCH G, 1995, PR GR LAK SYMP VLSI, P144, DOI 10.1109/GLSV.1995.516041
   Beigné E, 2006, INT SYMP ASYNCHRON C, P172, DOI 10.1109/ASYNC.2006.16
   Beigné E, 2005, INT SYMP ASYNCHRON C, P54, DOI 10.1109/ASYNC.2005.10
   Bergamini D, 2005, LECT NOTES COMPUT SC, V3440, P581
   Bergstra J.A., 2001, HDB PROCESS ALGEBRA
   BOLOGNESI T, 1988, LOTOS, V14, P25
   BORRIONE D, 2003, P INT C VER LARG SCA, P86
   Cerone A, 2005, INNOV SYST SOFTW ENG, V1, P25, DOI 10.1007/s11334-005-0002-4
   CLARK G, 1997, ECSLFCS97369 U ED DE
   DEBOER FS, 1991, LECT NOTES COMPUT SC, V493, P296
   DURAND Y, 2005, P IPSOC05, P51
   Edwards D, 2002, COMPUT J, V45, P12, DOI 10.1093/comjnl/45.1.12
   Fokkink W.J., 2000, TEXT THEORET COMP S
   Garavel H, 2006, THEOR COMPUT SCI, V351, P131, DOI 10.1016/j.tcs.2005.09.064
   Garavel H, 2002, LECT NOTES COMPUT SC, V2304, P9
   GARAVEL H, 1990, PROTOCOL SPECIFICATION, TESTING, AND VERIFICATION, X, P379
   Garavel H, 2001, INT FED INFO PROC, V69, P377, DOI 10.1007/0-306-47003-9_24
   Garavel H, 1999, INT FED INFO PROC, V28, P185
   Garavel H, 2007, LECT NOTES COMPUT SC, V4590, P158
   Groote J. F., 2000, Mathematical Foundations of Computer Science 2000. 25th International Symposium, MFCS 2000. Proceedings. (Lecture Notes in Computer Science Vol.1893), P383
   HAUCK S, 1995, P IEEE, V83, P69, DOI 10.1109/5.362752
   Hoare CAR., 1985, Communicating Sequential Processes
   ISO, 1989, Technical Report 8807
   ISO/IEC, 2001, 154372001 ISOIEC
   Ji He, 2000, Formal Methods for Distributed System Development. FORTE/PSTV 2000. IFIP TC6 WG6.1 Joint International Conference on Formal Description Techniques for Distributed Systems and Communication Protocols (FORTE XIII) and Protocol Specification, Testing and Verification (PSTV XX), P267
   Josephs MB, 2007, INT SYMP ASYNCHRON C, P83
   Kapoor HK, 2004, INFORM PROCESS LETT, V89, P293, DOI 10.1016/j.ipl.2003.12.007
   Kessels J, 2001, PROCEEDINGS OF THE ASP-DAC 2001: ASIA AND SOUTH PACIFIC DESIGN AUTOMATION CONFERENCE 2001, P255, DOI 10.1109/ASPDAC.2001.913315
   Lang F, 2002, LECT NOTES COMPUT SC, V2280, P465
   MARTIN AJ, 1986, DISTRIB COMPUT, V1, P226, DOI 10.1007/BF01660034
   MARTIN AJ, 1985, INFORM PROCESS LETT, V20, P125, DOI 10.1016/0020-0190(85)90078-X
   Milner R., 1989, Communication and concurrency
   Peeters A., 2006, HASTE MANUAL VERSION
   RAHARDJO B, 1995, P 1 SPIN WORKSH SPIN
   RENAUDIN M, 2005, TAST COMPILER TAST C
   RENAUDIN M, 2004, P WORKSH TOK BAS COM
   Salaün G, 2005, LECT NOTES COMPUT SC, V3771, P287
   Salaün G, 2007, INT SYMP ASYNCHRON C, P73
   SERWE W, 2002, THESIS I NATL POLYTE
   Van Berkel CHK, 1999, P IEEE, V87, P223, DOI 10.1109/5.740016
   VANBERKEL K, 1993, INT SERIES PARALLEL, V5
   VANGLABBEEK WP, 1989, R8911 CS
   Wang QX, 2006, MITOCHONDRION, V6, P37, DOI 10.1016/j.mito.2005.11.002
   Wang X, 2005, ELECTRON NOTES THEOR, V128, P231, DOI 10.1016/j.entcs.2005.04.014
   YOELI M, 2001, CS200109 TR COMP SCI
   YOELI M, 2008, PETRI NETS CCS PARAL
NR 50
TC 7
Z9 9
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 1
PY 2009
VL 74
IS 3
BP 100
EP 127
DI 10.1016/j.scico.2008.09.011
PG 28
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 402NY
UT WOS:000263021600002
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Navarro, A
   Fernández-Valmayor, A
   Fernández-Manjón, B
   Sierra, JL
AF Navarro, A.
   Fernandez-Valmayor, A.
   Fernandez-Manjon, B.
   Sierra, J. L.
TI Characterizing navigation maps for web applications with the NMM
   approach
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE model-driven architecture; web engineering; model-driven web
   engineering; navigation map; multi-tier architecture; presentation tier
ID CONCEPTUALIZATION
AB This paper presents the Navigation Maps Modeling approach (NMM), which provides platform independent models for characterizing navigation maps of web applications. The NMM approach is conceived to obtain a trade off between high and low-level design notations. As high-level design notations, NMM models permit architectural details that may hinder the overall understanding of the web application to be left out. As low-level design notations, NMM models can easily be transformed into detailed architectural designs, which are very valuable at coding and maintenance stages. (c) 2007 Elsevier B.V. All rights reserved.
C1 [Navarro, A.; Fernandez-Valmayor, A.; Fernandez-Manjon, B.; Sierra, J. L.] Univ Complutense Madrid, Dept Ingn Software & Inteligencia Artificial, E-28040 Madrid, Spain.
C3 Complutense University of Madrid
RP Navarro, A (corresponding author), Univ Complutense Madrid, Dept Ingn Software & Inteligencia Artificial, C Prof Jose Garcia Santesmases S-N, E-28040 Madrid, Spain.
EM anavarro@sip.ucm.es; alfredo@sip.ucm.es; batta@sip.ucm.es;
   jlsierra@sip.ucm.es
RI Moreno-Ger, Pablo/B-5419-2009; Fernandez-Manjon, Baltasar/A-5281-2011;
   Sierra, Jose Luis/J-6935-2014
OI Sierra, Jose Luis/0000-0002-0317-0510; Fernandez-Manjon,
   Baltasar/0000-0002-8200-6216
CR Abrahao S, 2003, LECT NOTES COMPUT SC, V2784, P325
   Alur D., 2003, CORE J2EE PATTERN BE
   [Anonymous], UN MOD LANG UML VERS
   [Anonymous], 1995, DESIGN PATTERN ELEME
   Book M, 2004, 19TH INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING, PROCEEDINGS, P100, DOI 10.1109/ASE.2004.1342728
   Brambilla M, 2006, ACM T SOFTW ENG METH, V15, P360, DOI 10.1145/1178625.1178627
   Brown S., 2001, PROFESSIONAL JSP
   CAMPBELL B, 1988, COMMUN ACM, V31, P856, DOI 10.1145/48511.48515
   Ceri S, 2000, COMPUT NETW, V33, P137, DOI 10.1016/S1389-1286(00)00040-2
   Conallen J, 1999, COMMUN ACM, V42, P63, DOI 10.1145/317665.317677
   Conallen J., 2002, BUILDING WEB APPL UM
   Eeles P., 2003, Building J2EE applications with the rational unified process
   FERREIRA MC, 2001, ACM T INFORM SYSTEMS, V19, P28
   Fraternali P, 1999, ACM COMPUT SURV, V31, P227, DOI 10.1145/331499.331502
   GINIGE A., 2001, IEEE Multimedia, V8, P22, DOI DOI 10.1109/MMUL.2001.917968
   Gómez J, 2000, LECT NOTES COMPUT SC, V1789, P79
   Han M, 2005, LECT NOTES COMPUT SC, V3579, P221
   Hennicker R., 2001, Unified Modeling Language: Systems Analysis, Design and Development Issues
   ISAKOWITZ T, 1995, COMMUN ACM, V38, P34, DOI 10.1145/208344.208346
   Koch N, 2003, LECT NOTES COMPUT SC, V2722, P497
   KOCH N., 2004, Journal of Web Engineering, V3, P22
   Lowe D., 2003, Requirements Engineering, V8, P102, DOI 10.1007/s00766-002-0153-x
   NANARD J, 1995, COMMUN ACM, V38, P49, DOI 10.1145/208344.208347
   Navarro A, 2004, INT J SOFTW ENG KNOW, V14, P565, DOI 10.1142/S0218194004001749
   NAVARRO A, 2005, P ICWE 2005 WORKSH M, P80
   Navarro A, 2007, INTERNET RES, V17, P207, DOI 10.1108/10662240710737059
   Rossi G, 2003, LECT NOTES COMPUT SC, V2738, P359
   Schwabe D., 2001, IEEE Multimedia, V8, P20, DOI 10.1109/93.923950
   Stotts PD, 1998, ACM T INFORM SYST, V16, P1, DOI 10.1145/267954.267955
   STOTTS PD, 1991, P HYPERTEXT 91
   WINCKLER M, 2003, P DSV IS 2003, P61
   *WORLD WID WEB CON, 1999, 401 WORLD WID WEB CO
   *WORLD WID WEB CON, HYP TERMS
NR 33
TC 6
Z9 7
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR 1
PY 2008
VL 71
IS 1
BP 1
EP 16
DI 10.1016/j.scico.2007.10.003
PG 16
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 283MX
UT WOS:000254641400001
DA 2024-07-18
ER

PT J
AU Gogolla, M
   Büttner, F
   Richters, M
AF Gogolla, Martin
   Buettner, Fabian
   Richters, Mark
TI USE:: A UML-based specification environment for validating UML and OCL
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE UML; OCL; model; constraint; invariant; pre- and post-conditions; model
   validation; model certification; model execution
AB The Unified Modeling Language (UML) is accepted today as an important standard for developing software. UML tools however provide little support for validating and checking models in early development phases. There is also no substantial support for the Object Constraint Language (OCL). We present an approach for the validation of UML models and OCL constraints based on animation and certification. The USE tool (UML-based Specification Environment) supports analysts, designers and developers in executing UML models and checking OCL constraints and thus enables them to employ model-driven techniques for software production. (c) 2007 Elsevier B.V. All rights reserved.
C1 [Gogolla, Martin; Buettner, Fabian] Univ Bremen, Bremen, Germany.
   [Richters, Mark] EADS Space Transportat, Bremen, Germany.
C3 University of Bremen; Airbus; EADS Construcciones Aeronauticas SA
RP Gogolla, M (corresponding author), Univ Bremen, Bremen, Germany.
EM gogolla@informatik.uni-bremen.de
CR Ahrendt W, 2000, LECT NOTES ARTIF INT, V1919, P21, DOI 10.1007/3-540-40006-0_3
   AKEHURST D, 2005, KENT MODELING FRAMEW
   ARNOLD D, 2005, OCL C COMPILER
   *BOLDS, 2002, BOLDS OCL TOOL MOD R
   Büttner F, 2005, SIXTEENTH INTERNATIONAL WORKSHOP ON DATABASE AND EXPERT SYSTEMS APPLICATIONS, PROCEEDINGS, P823, DOI 10.1109/DEXA.2005.192
   CHIOREAN D, 2001, P UML 2001 WORKSH RI, P57
   GOGOLLA M, 2005, J SOFTWARE SYSTEM MO
   Hussmann H, 2000, LECT NOTES COMPUT SC, V1939, P278
   *KLASS OBJ, 2005, KLASS OBJ OCL CHECK
   Kyas M, 2005, ELECTRON NOTES THEOR, V115, P39, DOI 10.1016/j.entcs.2004.09.027
   Richters M., 2002, BISS MONOGRAPHS, V14
   RICHTERS M, 2001, LNCS, V2263, P43
   Rumbaugh J., 2003, UNIFIED MODELING LAN
   TOVAL A, 2003, SOFTWARE SYSTEM MODE, V2, P248
   Warmer J., 2003, OBJECT CONSTRAINT LA, Vsecond
NR 15
TC 248
Z9 265
U1 0
U2 5
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 1
PY 2007
VL 69
IS 1-3
BP 27
EP 34
DI 10.1016/j.scico.2007.01.013
PG 8
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 253CQ
UT WOS:000252496700004
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Csenki, A
AF Csenki, Attila
TI Rotations in the plane and Prolog
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE rotations; Prolog; difference lists; Gauss-Seidel
AB Rotation is a well-known operation on lists. We define its two-dimensional analogue and discuss its implementation in Prolog using difference lists. An application to the iterative solution of a system of linear equations by the Gauss-Seidel method is given. (C) 2007 Elsevier B.V. All rights reserved.
C1 Univ Bradford, Sch Comp & Math, Bradford BD7 1DP, W Yorkshire, England.
C3 University of Bradford
RP Csenki, A (corresponding author), Univ Bradford, Sch Comp & Math, Bradford BD7 1DP, W Yorkshire, England.
EM a.csenki@bradford.ac.uk
CR CLOCKSIN WF, 1997, CLAUSE EFFECT PROLOG
   KREYSZIG E, 1998, ADV ENGN MATH
   STERLING L, 1986, ART PROLOG ADV PROGR
   TODD J, 1978, BASIC NUMERICAL MATH, V2
   WIELEMAKER J, 2003, SWIPROLOG
NR 5
TC 0
Z9 0
U1 0
U2 0
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD APR 30
PY 2007
VL 66
IS 2
BP 154
EP 161
DI 10.1016/j.scico.2007.01.002
PG 8
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 169OK
UT WOS:000246601300004
DA 2024-07-18
ER

PT J
AU Udzir, NI
   Wood, AM
   Jacob, JL
AF Udzir, Nur Izura
   Wood, Alan M.
   Jacob, Jeremy L.
TI Coordination with multicapabilities
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 7th International Conference on Coordination Models and Languages
   (COORDINATION 2005)
CY APR 20-23, 2005
CL Univ Namur, Inst Informat, Namur, BELGIUM
HO Univ Namur, Inst Informat
DE tuple-space coordination; capabilities; multicapabilities
ID SEMANTICS; MODEL
AB In the context of open distributed systems, the ability to coordinate agents coupled with the possibility to control the actions they perform is important. As open systems need to be scalable, capabilities may provide the best-fit solution to overcome the problems caused by the loosely controlled coordination of tuple-space systems. Acting as a 'ticket', capabilities can be given to the chosen agents, granting them different privileges over different kinds of data-thus providing the system with a finer control on objects' visibility to agents. One drawback of capabilities is that they can only refer to named objects-something that is not universally applicable since, unlike tuple-spaces, tuples are nameless. This paper demonstrates how the advantages of capabilities can be extended to tuples, with the introduction of multicapabilities, which generalise capabilities to collections of objects. We also present discussions on implementation and application examples to illustrate the use of capabilities and multicapabilities in tuple-space systems. (c) 2006 Elsevier B.V. All rights reserved.
C1 Univ York, Dept Comp Sci, York YO10 5DD, N Yorkshire, England.
C3 University of York - UK
RP Udzir, NI (corresponding author), Univ York, Dept Comp Sci, York YO10 5DD, N Yorkshire, England.
EM izura@fsktm.upm.edu.my; wood@cs.york.ac.uk; Jeremy.Jacob@cs.york.ac.uk
OI UDZIR, NUR IZURA/0000-0002-0543-3329
CR [Anonymous], JINI TECHNOLOGY SERI
   [Anonymous], 1984, Capability-Based Computer Systems
   Arbab F, 2004, MATH STRUCT COMP SCI, V14, P329, DOI 10.1017/S0960129504004153
   BANATRE JP, 1993, COMMUN ACM, V36, P98, DOI 10.1145/151233.151242
   Bryce C, 2002, LECT NOTES COMPUT SC, V2374, P281
   Bryce C, 1999, LECT NOTES COMPUT SC, V1594, P4
   CARRIERO N, 1989, COMPUT SURV, V21, P323
   Carriero N., 1992, COMMUN ACM, V35, P97
   CHUNG VL, 2002, AUSTR COMPUTER SCI C, V24, P57
   De Nicola R, 1998, IEEE T SOFTWARE ENG, V24, P315, DOI 10.1109/32.685256
   DENNIS JB, 1966, COMMUN ACM, V9, P143, DOI 10.1145/365230.365252
   GELERNTER D, 1985, ACM T PROGR LANG SYS, V7, P80, DOI 10.1145/2363.2433
   GORLA D, 2003, LNCS, V2802, P88
   Jacob JL, 2000, LECT NOTES COMPUT SC, V1906, P51
   Knuth Donald E., 1997, Stable marriage and its relation to other combinatorial problems: An introduction to the mathematical analysis of algorithms
   MENEZES R, 2000, THESIS U YORK UK
   MENEZES R, 1998, P 10 IASTED INT C PA, P490
   MINSKY NH, 1995, LNCS, V924, P125
   NUTT G, 2002, OPERATING SYSTEM MOD
   PINAKIS J, 1995, P 15 AUSTR COMP SCI, P731
   Rowstron A, 2001, COORDINATION OF INTERNET AGENTS: MODELS, TECHNOLOGIES AND APPLICATIONS, P61
   Rowstron AIT, 1997, P ANN HICSS, P379, DOI 10.1109/HICSS.1997.667285
   Shapiro JS, 1999, OPERATING SYSTEMS REVIEW, VOL 33, NO 5, DECEMBER 1999, P170, DOI 10.1145/319344.319163
   SHAPIRO JS, 1999, THESIS U PENNSYLVANI
   TANENBAUM AS, 1986, P 6 INT C DISTR COMP, P558
   UDZIR NI, 2006, P 2 IEEE INT C INF C
   VITEK J, 1999, SCI COMPUT PROGRAM, V46, P163
   Wood A, 1999, LECT NOTES COMPUT SC, V1594, P21
NR 28
TC 7
Z9 7
U1 1
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 15
PY 2007
VL 64
IS 2
BP 205
EP 222
DI 10.1016/j.scico.2006.06.005
PG 18
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 121IA
UT WOS:000243150100003
DA 2024-07-18
ER

PT J
AU Koschke, R
   Canfora, G
   Czeranski, J
AF Koschke, R
   Canfora, G
   Czeranski, J
TI Revisiting the ΔIC approach to component recovery
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE component recovery; reverse engineering; re-modularization; coupling;
   cohesion
ID SOFTWARE; OBJECTS; FRAMEWORK
AB Component recovery supports program understanding, architecture recovery, and re-use. Among the best known techniques for detection of re-usable objects (related global variables and their accessor functions) is Delta IC (the improvement in internal connectivity). This paper re-visits the original approach and extends it in different ways. It describes a variant of Delta IC suitable for reverse engineering that omits the slicing step of the original approach. The underlying metric of Delta IC is extended toward types integrating ideas of the Internal Access technique such that abstract data types can also be detected. Furthermore, the connectivity metric of Delta IC is combined with a cohesion metric based on vertex connectivity. The new metrics and the new algorithm for reverse engineering are evaluated and compared to other techniques quantitatively.
   The new contributions of this paper over the conference paper are the analysis of the relation of the connectivity threshold and recall and precision. additional experiments in varying the ICVC (internal connectivity vertex connectivity) factor, and a detailed comparison of the complementarity of the various techniques. (c) 2005 Elsevier B.V. All rights reserved.
C1 Univ Bremen, D-28334 Bremen, Germany.
   Univ Sannio, RCOST, I-82199 Benevento, Italy.
   Univ Stuttgart, D-70569 Stuttgart, Germany.
C3 University of Bremen; University of Sannio; University of Stuttgart
RP Univ Bremen, Fachbereich 03,Postfach 22 04 40, D-28334 Bremen, Germany.
EM koschke@informatik.uni-bremen.de; gerardo.canfora@unisannio.it;
   czeranski@informatik.uni-stuttgart.de
OI Canfora, Gerardo/0000-0003-0049-1279
CR ABREU F, 2000, P C SOFTW MAINT REEN
   Andritsos P, 2003, 10TH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P334, DOI 10.1109/WCRE.2003.1287264
   [Anonymous], THESIS U STUTTGART
   [Anonymous], 1979, Graph Algorithms
   Anquetil N, 1998, PROC INT CONF SOFTW, P84, DOI 10.1109/ICSE.1998.671105
   ANQUETIL N, 1998, P WORK C REV ENG, P235
   Bauer M, 2004, CSMR 2004: EIGHTH EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, PROCEEDINGS, P3, DOI 10.1109/CSMR.2004.1281401
   BELADY LA, 1981, J SYST SOFTWARE, V2, P23, DOI 10.1016/0164-1212(81)90043-1
   BOJIC D, 2000, P C SOFTW MAINT REEN
   Canfora G, 1996, SOFTWARE PRACT EXPER, V26, P25, DOI 10.1002/(SICI)1097-024X(199601)26:1<25::AID-SPE994>3.0.CO;2-T
   Canfora G., 1993, Proceedings. Conference on Software Maintenance 1993. CSM-93 (Cat. No.93CH3360-5), P200, DOI 10.1109/ICSM.1993.366942
   Canfora G, 1999, PROG COMPREHEN, P136, DOI 10.1109/WPC.1999.777752
   Canfora G, 2000, P WORK C REV ENG
   Chiricota Y, 2003, PROG COMPREHEN, P217
   CHOI SC, 1990, IEEE SOFTWARE, V7, P66, DOI 10.1109/52.43051
   CIMITILE A, 1995, J SYST SOFTWARE, V28, P117, DOI 10.1016/0164-1212(94)00049-S
   DOVAL D, 1999, P INT C SOFTW TOOLS
   GALL H, 1995, SECOND WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P208, DOI 10.1109/WCRE.1995.514709
   GALL H, 1998, P 7 INT C INF PROC M
   Girard JF, 2000, SCI COMPUT PROGRAM, V36, P149, DOI 10.1016/S0167-6423(99)00035-0
   Girard JF, 1997, INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE, PROCEEDINGS, P58, DOI 10.1109/ICSM.1997.624231
   GIRARD JF, 1997, P WORK C REV ENG
   GIRARD JF, 1996, CRIM950426
   GIRARD JF, 1999, J AUTOMATED SOFTWARE, V6, P357
   Graudejus H, 1998, THESIS U KAISERSLAUT
   HUTCHENS DH, 1985, IEEE T SOFTWARE ENG, V11, P749, DOI 10.1109/TSE.1985.232524
   Kazman R., 1997, CMUSEI97TR010
   KOSCHKE R, 1999, P 6 WORK C REV ENG A, P256
   KOSCHKE R, 2000, FRAMEWORK EXPT EVALU
   Lakhotia A, 1997, J SYST SOFTWARE, V36, P211, DOI 10.1016/0164-1212(95)00098-4
   LINDIG C, 1997, P INT C SOFTW ENG
   Liu S.-S., 1990, Proceedings. Conference on Software Maintenance 1990 (Cat. No.90CH2921-5), P266, DOI 10.1109/ICSM.1990.131371
   LIVADAS PE, 1994, J SOFTW MAINT-RES PR, V6, P249, DOI 10.1002/smr.4360060503
   LUNG CH, 1998, P 3 INT WORKSH SOFTW, P101
   Macro A., 1987, The craft of software engineering
   Mahdavi K, 2003, PROC IEEE INT CONF S, P315, DOI 10.1109/ICSM.2003.1235437
   MANCORIDIS S, 1996, P INT C SOFTW MAINT
   MANCORIDIS S, 1998, P WORKSH PROGR COMPR
   Maqbool O, 2004, CSMR 2004: EIGHTH EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, PROCEEDINGS, P15, DOI 10.1109/CSMR.2004.1281402
   Mitchell BS, 2001, PROC IEEE INT CONF S, P744, DOI 10.1109/ICSM.2001.972795
   Mitchell BS, 2001, EIGHTH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P93
   MULLER H, 1992, ACM SIGSOFT S SOFTW, P88
   Muller H. A., 1993, Journal of Software Maintenance: Research and Practice, V5, P181, DOI 10.1002/smr.4360050402
   MULLER HA, 1985, P INT C SOFTW ENG AS, P80
   OGANDO RM, 1994, J SOFTW MAINT-RES PR, V6, P261, DOI 10.1002/smr.4360060504
   PATEL S, 1992, P 14 INT C SOFTW ENG, P38
   Saeed M, 2003, SEVENTH EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, PROCEEDINGS, P301, DOI 10.1109/CSMR.2003.1192438
   Sahraoui HA, 1997, AUTOMATED SOFTWARE ENGINEERING, 12TH IEEE INTERNATIONAL CONFERENCE, PROCEEDINGS, P210, DOI 10.1109/ASE.1997.632841
   Sartipi K, 2001, PROC IEEE INT CONF S, P408, DOI 10.1109/ICSM.2001.972754
   Sartipi K, 2001, EIGHTH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P103, DOI 10.1109/WCRE.2001.957814
   Sartipi K., 2000, Proceedings of the Fourth European Conference on Software Maintenance and Reengineering, P129, DOI 10.1109/CSMR.2000.827321
   Sartipi K, 2001, PROG COMPREHEN, P259, DOI 10.1109/WPC.2001.921736
   Sartipi K, 2001, PROG COMPREHEN, P115, DOI 10.1109/WPC.2001.921721
   Sartipi K, 2000, PROG COMPREHEN, P37, DOI 10.1109/WPC.2000.852478
   SCHWANKE RW, 1991, 13TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P83, DOI 10.1109/ICSE.1991.130626
   Shokoufandeh A, 2002, NINTH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P3, DOI 10.1109/WCRE.2002.1173059
   Siff M, 1999, IEEE T SOFTWARE ENG, V25, P749, DOI 10.1109/32.824377
   Siff M, 1997, INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE, PROCEEDINGS, P170, DOI 10.1109/ICSM.1997.624243
   Tonella P, 2001, IEEE T SOFTWARE ENG, V27, P351, DOI 10.1109/32.917524
   Tzerpos V., 1998, INT WORKSH LARG SCAL
   TZERPOS V, 1999, P WORK C REV ENG OCT
   TZERPOS V, 2000, P WORK C REV ENG NOV
   Valasareddi RR, 1998, FIFTH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P50, DOI 10.1109/WCRE.1998.723175
   van Deursen A., 1999, Proceedings of the 1999 International Conference on Software Engineering (IEEE Cat. No.99CB37002), P246, DOI 10.1109/ICSE.1999.841014
   Weidl J, 1998, P 22 COMP SOFTW APPL
   WEISER M, 1984, IEEE T SOFTWARE ENG, V10, P352, DOI 10.1109/TSE.1984.5010248
   YEH AS, 1995, SECOND WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P227, DOI 10.1109/WCRE.1995.514711
   Yourdon E., 1979, STRUCTURED DESIGN
NR 68
TC 9
Z9 10
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD APR
PY 2006
VL 60
IS 2
BP 171
EP 188
DI 10.1016/j.scico.2005.10.004
PG 18
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 019VA
UT WOS:000235863600005
OA hybrid
DA 2024-07-18
ER

PT J
AU van Deursen, A
   Moonen, L
AF van Deursen, A
   Moonen, L
TI Documenting software systems using types
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE software maintenance; software exploration; program understanding;
   program analysis; type inference; documentation generation; variable
   usage; hypertext
AB We show how hypertext-based program understanding tools can achieve new levels of abstraction by using inferred type information for cases where the subject software system is written in a weakly typed language. We propose TYPEEXPLORER, a tool for browsing COBOL legacy systems based on these types. The paper addresses (1) how types, an invented abstraction, can be presented meaningfully to software re-engineers; (2) the implementation techniques used to construct TYPEEXPLORER; and (3) the use of TYPEEXPLORER for understanding legacy systems, at the level of individual statements as well as at the level of the software architecture - which is illustrated by using TYPEEXPLORER to browse an industrial COBOL system of 100,000 lines of code. (c) 2005 Elsevier B.V. All rights reserved.
C1 CWI, Software Renovat Res Grp, NL-1090 GB Amsterdam, Netherlands.
   Delft Univ Technol, Software Evolut Res Lab, Fac EEMCS, NL-2628 CD Delft, Netherlands.
C3 Delft University of Technology
RP Dept Software Engn, POB 94179, NL-1090 GB Amsterdam, Netherlands.
EM Arie.van.Deursen@cwi.nl; Leon.Moonen@acm.org
RI Moonen, Leon/M-8790-2015; van Deursen, Arie/G-3084-2011
OI Moonen, Leon/0000-0002-1761-6771; van Deursen, Arie/0000-0003-4850-3312
CR Bass L., 2013, SOFTWARE ARCHITECTUR
   Braga CD, 1998, J SOFTW MAINT-RES PR, V10, P279, DOI 10.1002/(SICI)1096-908X(199807/08)10:4<279::AID-SMR174>3.0.CO;2-Z
   BROWN P, 1991, IBM SYST J, V30, P363, DOI 10.1147/sj.303.0363
   Cardelli L., 1991, IFIP STATE OF THE AR, P431
   Chandra S., 1999, Software Engineering Notes, V24, P66, DOI 10.1145/381788.316183
   CHEN XP, 1994, P INT COMP SOFTW APP, P432, DOI 10.1109/CMPSAC.1994.342767
   CHIKOFSKY EJ, 1990, IEEE SOFTWARE, V7, P13, DOI 10.1109/52.43044
   Clements P., 2003, SEI S SOFTW
   DEVANBU P, 1999, 21 INT C SOFTW ENG I, P473
   EIDORF PH, 1999, 26 S PRINC PROGR LAN, P1
   Finnigan PJ, 1997, IBM SYST J, V36, P564, DOI 10.1147/sj.364.0564
   GANSNER ER, 1993, IEEE T SOFTWARE ENG, V19, P214, DOI 10.1109/32.221135
   Gravley JM, 1996, PROCEEDINGS OF THE THIRD WORKING CONFERENCE ON REVERSE ENGINEERING, P227, DOI 10.1109/WCRE.1996.558915
   Hart JM, 1996, PROC INT CONF SOFTW, P475, DOI 10.1109/ICSE.1996.493442
   Holt RC, 1998, FIFTH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P210, DOI 10.1109/WCRE.1998.723191
   KAKSER GE, 1997, 19 INT C SOFTW ENG I, P3
   KAWABE K, 1998, C SOFTW MAINT REENG, P44
   Kazman R., 1999, Automated Software Engineering, V6, P107, DOI 10.1023/A:1008781513258
   KUIPERS T, 2000, 8 INT WORKSH PROGR C
   LANDIS LD, 1988, C SOFTW MAINT IEEE C, P66
   MERLO E, 1995, INT J SOFTW ENG KNOW, V5, P5, DOI 10.1142/S0218194095000022
   Moonen L, 2002, PROG COMPREHEN, P219, DOI 10.1109/WPC.2002.1021343
   Moonen L, 2001, EIGHTH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P13, DOI 10.1109/WCRE.2001.957806
   MOONEN L, 2002, THESIS U AMSTERDAM
   Nanda MG, 1999, SOFTWARE PRACT EXPER, V29, P359, DOI 10.1002/(SICI)1097-024X(19990410)29:4<359::AID-SPE232>3.0.CO;2-H
   NEWCOMB P, 1995, SECOND WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P237, DOI 10.1109/WCRE.1995.514712
   OCallahan R, 1997, PROC INT CONF SOFTW, P338, DOI 10.1145/253228.253351
   Palsberg J, 2001, ACM SIGPLAN NOTICES, P20
   Rajlich V, 1999, INT J SOFTW ENG KNOW, V9, P55, DOI 10.1142/S021819409900005X
   Rajlich V, 1997, FIRST EUROMICRO CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, PROCEEDINGS, P68, DOI 10.1109/CSMR.1997.583009
   Ramalingam G., 1999, Conference Record of POPL '99. 26th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P119, DOI 10.1145/292540.292553
   Siff M., 1996, Software Engineering Notes, V21, P135, DOI 10.1145/250707.239121
   Sim SE, 1998, PROC INT CONF SOFTW, P361, DOI 10.1109/ICSE.1998.671389
   SIM SE, 1999, INT C SOFTWARE MAINT, P381
   van Deursen A, 1998, FIFTH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P220, DOI 10.1109/WCRE.1998.723192
   van Deursen A, 2001, SCI COMPUT PROGRAM, V40, P189, DOI 10.1016/S0167-6423(01)00015-6
   vandenBrand M, 1997, PROCEEDINGS OF THE FOURTH WORKING CONFERENCE ON REVERSE ENGINEERING, P144, DOI 10.1109/WCRE.1997.624585
   VANDEURSEN A, 1999, INT C SOFTW MAINT IC, P40
   VONMAYRHAUSER A, 1995, IEEE COMPUT, V28, P44, DOI DOI 10.1109/2A02076
   WEGMAN MN, 1991, ACM T PROGR LANG SYS, V13, P181, DOI 10.1145/103135.103136
   Williams Preston N., 1999, Software Engineering Notes, V24, P76, DOI 10.1145/381788.316184
   WONG K, 1995, IEEE SOFTWARE, V12, P46, DOI 10.1109/52.363166
NR 42
TC 10
Z9 10
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD APR
PY 2006
VL 60
IS 2
BP 205
EP 220
DI 10.1016/j.scico.2005.10.006
PG 16
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 019VA
UT WOS:000235863600007
DA 2024-07-18
ER

PT J
AU Cooper, K
   Dai, LR
   Deng, Y
AF Cooper, K
   Dai, LR
   Deng, Y
TI Performance modeling and analysis of software architectures: An
   aspect-oriented UML based approach
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 3rd International Workshop on System/Software Architectures (IWSSA 04)
CY JUN, 2004
CL Las Vegas, NV
DE architecture; architectural description languages; non-functional;
   unified modeling language
ID FRAMEWORK
AB Much attention has recently been focused on the problem of effectively developing software systems that meet their non-functional requirements (NFRs). Architectural frameworks have been proposed as a solution to support the design and analysis of NFRs such as performance, security, adaptability, etc. The significant benefits of such work include detecting and removing defects earlier, reducing development time, cost and improving the quality. The Formal Design Analysis Framework (FDAF) is an aspect-oriented approach that supports the automated translation of extended Unified Modeling Language designs for distributed real-time systems into existing formal notations, including Architecture Description Languages Rapide and Armani. The analysis of the formalized design is achieved using existing tool support for the formal methods, which leverages a large body of work in the research community. Currently, FDAF supports the design and analysis of response time and resource utilization performance sub-aspects. This paper presents the algorithms for translating extended UML diagrams into Armani, the proofs of correctness of the algorithms, and an illustration of the FDAF approach by using the Domain Name System. The Armani performance analysis results can provide architects with information indicating whether or not overloaded components exist in the design. If such a component exists, then the architect iteratively refines the UML architecture to meet the clients' requirements. (c) 2005 Elsevier B.V. All rights reserved.
C1 Univ Texas, Dept Comp Sci, Richardson, TX 75080 USA.
   Florida Int Univ, Sch Comp Sci, Miami, FL 33199 USA.
C3 University of Texas System; University of Texas Dallas; State University
   System of Florida; Florida International University
RP Univ Texas, Dept Comp Sci, PO 830688,Mail Stn 31, Richardson, TX 75080 USA.
EM kcooper@utdallas.edu; lirongd@utdallas.edu; deng@cs.fiu.edu
CR [Anonymous], 1986, Denotational Semantics: A Methodology for Language Development
   [Anonymous], 1991, The Art of Computer Systems Performance Analysis: Techniques for Experimental Design, Measurement, Simulation, and Modeling
   Bass L., 2013, SOFTWARE ARCHITECTUR
   BOOCH G, 1999, UNIFIED LANGUAGE USE
   Chung L., 2000, Non-functional Requirements in Software Engineering
   CLARK T, 1998, 2 N FORM METH WORKSH
   COOPER K, 2004, INT WORKSH SYST SOFT, P111
   COOPER K, 2004, UTDCS3104
   FLACH G, 2001, WORKSH ADV SEP CONC
   FRANCE R, 2003, P 3 INT WORKSH ASP O
   GREENSPAN S, 1994, PROC INT CONF SOFTW, P135, DOI 10.1109/ICSE.1994.296773
   Kazman R, 1998, IEEE INT C ENG COMP, P68, DOI 10.1109/ICECCS.1998.706657
   KELLER S, 1990, TUTORIAL SYSTEM SOFT, P145
   LUCKHAM DC, 1995, IEEE T SOFTWARE ENG, V21, P336, DOI 10.1109/32.385971
   McUmber W.E., 1999, 4 IEEE INT S HIGH AS
   Medvidovic N, 2002, ACM T SOFTW ENG METH, V11, P2, DOI 10.1145/504087.504088
   Medvidovic N, 2000, IEEE T SOFTWARE ENG, V26, P70, DOI 10.1109/32.825767
   MELLOR S, 2004, INTRO EXECUTABLE TRA
   MOCKAPETRIS P, 1987, IETFSTD0013
   MONROE RT, 1998, CMUCS98163 CARN MELL
   Moreira RS, 2001, DOA'01: 3RD INTERNATIONAL SYMPOSIUM ON DISTRIBUTED OBJECTS & APPLICATIONS, PROCEEDINGS, P187
   Moriconi M, 1997, P IEEE S SECUR PRIV, P84, DOI 10.1109/SECPRI.1997.601320
   *OBJ MAN GROUP, 2003, PTC20030302 UML OMG
   Simon H., 1981, The Sciences of the Artificial, V2nd ed.
   Smarkusky DL, 2001, IEEE SYMP COMP COMMU, P92, DOI 10.1109/ISCC.2001.935360
   Spitznagel B., 1998, P 1998 C SOFTW ENG K
   Warmer J., 1999, AW OBJ TECHNOL S
NR 27
TC 8
Z9 8
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUL
PY 2005
VL 57
IS 1
BP 89
EP 108
DI 10.1016/j.scico.2004.10.007
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 935UU
UT WOS:000229809700007
DA 2024-07-18
ER

PT J
AU O'Neill, I
   Hanna, P
   Liu, XK
   Greer, D
   McTear, M
AF O'Neill, I
   Hanna, P
   Liu, XK
   Greer, D
   McTear, M
TI Implementing advanced spoken dialogue management in Java
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT Conference on the Principles and Practice of Programming in Java
CY JUN, 2003
CL Kilkenny, IRELAND
DE object-orientation; Java; spoken dialogue systems
AB In this article we describe how Java can be used to implement an object-based, cross-domain, mixed initiative spoken dialogue manager (DM). We describe how dialogue that crosses between several business domains can be modelled as an inheriting and collaborating suite of objects suitable for implementation in Java. We describe the main features of the Java implementation and how the Java dialogue manager can be interfaced via the Galaxy software hub, as used in the DARPA-sponsored Communicator projects in the United States, with the various off-the-shelf components that are needed in a complete end-to-end spoken dialogue system. We describe the interplay of the Java components in the course of typical dialogue turns and present an example of the sort of dialogue that the Java DM can support. (C) 2004 Elsevier B.V. All rights reserved.
C1 Queens Univ Belfast, Sch Comp Sci, Belfast BT7 1NN, Antrim, North Ireland.
   Univ Ulster, Sch Comp & Math, Jordanstown BT37 0QB, North Ireland.
C3 Queens University Belfast; Ulster University
RP O'Neill, I (corresponding author), Queens Univ Belfast, Sch Comp Sci, Belfast BT7 1NN, Antrim, North Ireland.
EM i.oneill@qub.ac.uk; p.hanna@qub.ac.uk; xingkun.liu@qub.ac.uk;
   des.greer@qub.ac.uk; mf.mctear@ulster.ac.uk
RI McTear, Michael F/L-5139-2014; O'Neill, Ian/ABF-2389-2020
OI McTear, Michael F/0000-0001-9883-7500; Greer, Des/0000-0001-6367-9274
CR Allen RC, 2000, EUR REV ECON HIST, V4, P1, DOI 10.1017/S1361491600000125
   BOOCH G, 1998, UNIFIED MODELING LAN
   Booch G., 2007, Object-Oriented Analysis and Design with Applications, Vthird
   Heisterkamp P, 1996, ICSLP 96 - FOURTH INTERNATIONAL CONFERENCE ON SPOKEN LANGUAGE PROCESSING, PROCEEDINGS, VOLS 1-4, P200, DOI 10.1109/ICSLP.1996.607076
   O'Neill Ian., 2003, PROC EUROSPEECH 2003, P593
   ONEILL IM, 2000, NAT LANG ENG, V6, P341
   ONEILL IM, 2002, P ICSLP 2002 DENV SE, V3, P2045
   RUDNICKY A, 1999, P IEEE AUT SPEECH RE, P1
   Turunen M., 2001, Text, Speech and Dialogue. 4th International Conference, TSD 2001. Proceedings (Lecture Notes in Computer Science Vol.2166), P357
   Ward W., 1994, P INT C SPEECH LANG, P83
NR 10
TC 10
Z9 15
U1 0
U2 2
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN
PY 2005
VL 54
IS 1
BP 99
EP 124
DI 10.1016/j.scico.2004.05.006
PG 26
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 871MT
UT WOS:000225138500006
DA 2024-07-18
ER

PT J
AU Basciani, F
   Di Rocco, J
   Iovino, L
   Pierantonio, A
AF Basciani, Francesco
   Di Rocco, Juri
   Iovino, Ludovico
   Pierantonio, Alfonso
TI TyphonML: Tool support for hybrid polystores
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Hybrid polystores; Code generation; MDE
AB Polystore technology supports transparent data access, however building and deploying hybrid data persistence structures is unsupported, complex, and error-prone. Existing methods do not separate conceptual and storage concepts or technology components from modeling data items. Thus, a transparent data layer across technologies is unsupported. This document describes TyphonML's hybrid polystore modeling tools. TyphonML automatically generates hybrid polystore CRUD APIs.
C1 [Di Rocco, Juri; Pierantonio, Alfonso] Univ Aquila, DISIM, Via Vetoio, Laquila, Italy.
   [Basciani, Francesco; Iovino, Ludovico] Gran Sasso Sci Inst, Laquila, Italy.
C3 University of L'Aquila; Gran Sasso Science Institute (GSSI)
RP Di Rocco, J (corresponding author), Univ Aquila, DISIM, Via Vetoio, Laquila, Italy.
EM francesco.basciani@gssi.it; juri.dirocco@univaq.it;
   ludovico.iovino@gssi.it; alfonso.pierantonio@univaq.it
FU European Union [780251]; H2020 - Industrial Leadership [780251] Funding
   Source: H2020 - Industrial Leadership
FX This work is funded by the European Union Horizon 2020 research and
   innovation program through the Polyglot and Hybrid Persistence
   Architectures for Big Data Analytics (TYPHON) project (#780251) .
CR Atzeni P, 2020, COMPUT STAND INTER, V67, DOI 10.1016/j.csi.2016.10.003
   Basciani F., 2020, MODELS 20 ACM IEEE 2, DOI [/10.1145/3417990.3421999, DOI 10.1145/3417990.3421999]
   Jing Han, 2011, Proceedings 2011 6th International Conference on Pervasive Computing and Applications (ICPCA 2011), P363, DOI 10.1109/ICPCA.2011.6106531
   Kolovos DS, 2006, LECT NOTES COMPUT SC, V4066, P128
   Maccioni A, 2016, SIGMOD'16: PROCEEDINGS OF THE 2016 INTERNATIONAL CONFERENCE ON MANAGEMENT OF DATA, P2133, DOI 10.1145/2882903.2899393
NR 5
TC 0
Z9 0
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN
PY 2024
VL 232
AR 103044
DI 10.1016/j.scico.2023.103044
EA OCT 2023
PG 4
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA Y1HG5
UT WOS:001102842100001
DA 2024-07-18
ER

PT J
AU Driessen, SW
   Di Nucci, D
   Tamburri, DA
   van den Heuvel, WJ
AF Driessen, S. W.
   Di Nucci, D.
   Tamburri, D. A.
   Van den Heuvel, W. J.
TI SolAR: Automated test-suite generation for solidity smart contracts
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Blockchain; Smart contract; Testing; Solidity
AB Smart contracts have rapidly gained popularity as self-contained pieces of code, especially those run on the Ethereum blockchain. On the one hand, smart contracts are immutable, have transparent workings, and execute autonomously. On the other hand, these qualities make it essential to properly test the behavior of a smart contract before deploying it. In this paper, we introduce SOLAR, a tool and approach for Solidity Automated Test Suite GeneRation. SOLAR allows smart contract developers to generate test suites for Solidity smart contracts optimized automatically for branch coverage using either a state-of-the-art genetic algorithm or a fuzzing approach. It enables a novel way to handle blockchain operations-or ChainOps-from a pipeline perspective, entailing a larger-scale as well as more manageable and maintainable service continuity.
C1 [Driessen, S. W.; Van den Heuvel, W. J.] Tilburg Univ, JADS, Tilburg, Netherlands.
   [Di Nucci, D.] Univ Salerno, Salerno, Italy.
   [Tamburri, D. A.] Eindhoven Univ Technol, JADS, Eindhoven, Netherlands.
C3 Tilburg University; University of Salerno; Eindhoven University of
   Technology
RP Driessen, SW (corresponding author), Tilburg Univ, JADS, Tilburg, Netherlands.
EM s.w.driessen@jads.nl
RI Di Nucci, Dario/Y-9679-2019
OI Di Nucci, Dario/0000-0002-3861-1902
CR Anderson L, 2016, Arxiv, DOI arXiv:1606.06530
   Baier C, 2008, PRINCIPLES OF MODEL CHECKING, P1
   Butijn BJ, 2020, ACM COMPUT SURV, V53, DOI 10.1145/3369052
   Chapman P, 2019, 2019 IEEE INTERNATIONAL CONFERENCE ON BLOCKCHAIN (BLOCKCHAIN 2019), P319, DOI 10.1109/Blockchain.2019.00050
   Contro F, 2021, INT C PROGRAM COMPRE, P127, DOI 10.1109/ICPC52881.2021.00021
   Daka E, 2015, 2015 10TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE 2015) PROCEEDINGS, P107, DOI 10.1145/2786805.2786838
   FERRANTE J, 1987, ACM T PROGR LANG SYS, V9, P319, DOI 10.1145/24039.24041
   Garfatta I., 2021, ACM INT C P SERIES
   Grano G, 2018, INT C PROGRAM COMPRE, P348, DOI 10.1145/3196321.3196363
   Honig JJ, 2019, LECT NOTES COMPUT SC, V11737, P289, DOI 10.1007/978-3-030-31500-9_19
   Ivanova Y, 2020, PROCEDIA COMPUT SCI, V178, P75, DOI 10.1016/j.procs.2020.11.009
   Jiang B, 2018, IEEE INT CONF AUTOM, P259, DOI 10.1145/3238147.3238177
   Lengauer T., 1979, ACM Transactions on Programming Languages and Systems, V1, P121, DOI 10.1145/357062.357071
   Luu L, 2016, CCS'16: PROCEEDINGS OF THE 2016 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P254, DOI 10.1145/2976749.2978309
   Mossberg M, 2019, 34TH IEEE/ACM INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING (ASE 2019), P1186, DOI 10.1109/ASE.2019.00133
   Nguyen TD, 2020, PROC INT CONF SOFTW, P778, DOI 10.1145/3377811.3380334
   Olsthoorn M, 2022, PROC IEEE ACM INT C, P202, DOI [10.1145/3510454.3516869, 10.1109/ICSE-Companion55297.2022.9793754]
   Panichella A, 2018, IEEE T SOFTWARE ENG, V44, P122, DOI 10.1109/TSE.2017.2663435
   Wang XY, 2019, 2019 IEEE 26TH INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION AND REENGINEERING (SANER), P549, DOI 10.1109/saner.2019.8668020
   Zou WQ, 2021, IEEE T SOFTWARE ENG, V47, P2084, DOI 10.1109/TSE.2019.2942301
NR 20
TC 1
Z9 1
U1 1
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN
PY 2024
VL 232
AR 103036
DI 10.1016/j.scico.2023.103036
EA OCT 2023
PG 5
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA Y0ZD9
UT WOS:001102628700001
OA hybrid
DA 2024-07-18
ER

PT J
AU Ghosh, B
   André, É
AF Ghosh, Bineet
   Andre, Etienne
TI MoULDyS: Monitoring of autonomous systems in the presence of
   uncertainties
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Energy-aware monitoring; Cyber-physical systems; Formal methods;
   Monitoring tool
AB We introduce MoULDyS, that implements efficient offline and online monitoring algorithms of black-box cyber-physical systems w.r.t. safety properties. MoULDyS takes as input an uncertain log (with noisy and missing samples), as well as a bounding model in the form of an uncertain linear system; this latter model plays the role of an over-approximation so as to reduce the number of false alarms. MoULDyS is Python-based and available under the GNU General Public License v3.0 (gpl-3.0). We further provide easy-to-use scripts to recreate the results of two case studies introduced in an earlier work.& COPY; 2023 Elsevier B.V. All rights reserved.
C1 [Ghosh, Bineet] Univ North Carolina Chapel Hill, Chapel Hill, NC 27599 USA.
   [Andre, Etienne] Univ Lorraine, CNRS, Inria, LORIA, F-54000 Nancy, France.
   [Andre, Etienne] Univ Sorbonne Paris Nord, LIPN, CNRS UMR 7030, F-93430 Villetaneuse, France.
C3 University of North Carolina School of Medicine; University of North
   Carolina; University of North Carolina Chapel Hill; Inria; Universite de
   Lorraine; Centre National de la Recherche Scientifique (CNRS)
RP Ghosh, B (corresponding author), Univ North Carolina Chapel Hill, Chapel Hill, NC 27599 USA.
EM bineet@cs.unc.edu
OI Ghosh, Bineet/0000-0002-1371-2803
FU National Science Foundation (NSF) of the United States of America
   [2038960]; ANR-NRF French-Singaporean research program ProMiS [ANR-19-
   CE25-0015/2019 ANR NRF 0092]; ANR BisoUS [ANR-22-CE48-0012]
FX Bineet Ghosh was supported by the National Science Foundation (NSF) of
   the United States of America under grant number 2038960. This work is
   partially supported by the ANR-NRF French-Singaporean research program
   ProMiS (ANR-19- CE25-0015/2019 ANR NRF 0092) and by ANR BisoUS
   (ANR-22-CE48-0012).
CR André É, 2021, LECT NOTES COMPUT SC, V12759, P552, DOI 10.1007/978-3-030-81685-8_26
   [Anonymous], 2022, MOULDYS USER GUIDE
   [Anonymous], 2022, MOULDYS RECREATING R
   [Anonymous], 2022, MOULDYS INSTALLATION
   Bartocci Ezio, 2018, Lectures on Runtime. Verification Introductory and Advanced Topics. LNCS 10457, P135, DOI 10.1007/978-3-319-75632-5_5
   Basin D, 2016, FORM METHOD SYST DES, V49, P75, DOI 10.1007/s10703-016-0242-y
   Basin David A., 2017, RV-CuBES, V3, P19
   Becchi A, 2019, LECT NOTES COMPUT SC, V11822, P183, DOI 10.1007/978-3-030-32304-2_10
   Gan V., 2014, EPIC SERIES COMPUTIN, V34, P1
   Ghosh B., 2021, ARXIV 2109 07632
   Ghosh B, 2022, LECT NOTES COMPUT SC, V13273, P67, DOI 10.1007/978-3-031-08679-3_5
   Ghosh B, 2019, ACM T EMBED COMPUT S, V18, DOI 10.1145/3358229
   gnu .org, GNU GEN PUBL LIC V3
   Halbwachs N., 1994, LECT NOTES COMPUTER, V864, P223
   Lal R, 2015, 2015 PROCEEDINGS OF THE INTERNATIONAL CONFERENCE ON EMBEDDED SOFTWARE (EMSOFT), P237, DOI 10.1109/EMSOFT.2015.7318279
   Maler O, 2016, LECT NOTES COMPUT SC, V10012, P3, DOI 10.1007/978-3-319-46982-9_1
   Mamouras K, 2021, LECT NOTES COMPUT SC, V12974, P142, DOI 10.1007/978-3-030-88494-9_8
   Mitsch S., 2018, ARXIV 1811 06502
   Mitsch S, 2016, FORM METHOD SYST DES, V49, P33, DOI 10.1007/s10703-016-0241-z
   Nilsson P, 2016, IEEE T CONTR SYST T, V24, P1294, DOI 10.1109/TCST.2015.2501351
   Platzer A, 2012, IEEE S LOG, P541, DOI 10.1109/LICS.2012.64
   Waga M, 2023, ACM T SOFTW ENG METH, V32, DOI 10.1145/3517194
   Waga M, 2022, ACM TRANS CYBER-PHYS, V6, DOI 10.1145/3529095
NR 23
TC 1
Z9 1
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD AUG
PY 2023
VL 230
AR 102976
DI 10.1016/j.scico.2023.102976
EA JUN 2023
PG 10
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA N2UA1
UT WOS:001035613000001
DA 2024-07-18
ER

PT J
AU Kargén, U
   Härnqvist, I
   Wilson, J
   Eriksson, G
   Holmgren, E
   Shahmehri, N
AF Kargen, Ulf
   Harnqvist, Ivar
   Wilson, Johannes
   Eriksson, Gustav
   Holmgren, Evelina
   Shahmehri, Nahid
TI desync-cc: A research tool for automatically applying disassembly
   desynchronization during compilation
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Disassembly desynchronization; Code obfuscation; Reverse engineering;
   x86 architecture
AB Code obfuscation is an important topic, both in terms of defense, when trying to prevent intellectual property theft, and from the offensive point of view, when trying to break obfuscation used in malware. Several recent works have discussed techniques for preventing or delaying reverse engineering of binaries. While most works focus on methods that obscure program logic, the complimentary approach of disassembly desynchronizationhas received relatively little attention, despite being often used by, for example, malware authors. The technique puts another hurdle in the way of attackers by targeting the most fundamental step of the reverse-engineering process: recovering assembly code from a program binary. In the interest of furthering research into this kind of obfuscation, we present desync-cc, a tool for automatic application of disassembly desynchronization. To facilitate maximal ease-of-use, the tool is designed as a drop-in replacement for gcc, and works by intercepting and modifying intermediate assembly-code during compilation. (c) 2023 The Authors. Published by Elsevier B.V.
C1 [Kargen, Ulf; Harnqvist, Ivar; Wilson, Johannes; Eriksson, Gustav; Holmgren, Evelina; Shahmehri, Nahid] Linkoping Univ, SE-58183 Linkoping, Sweden.
C3 Linkoping University
RP Kargén, U (corresponding author), Linkoping Univ, SE-58183 Linkoping, Sweden.
EM ulf.kargen@liu.se; ivaha717@student.liu.se; johwi801@student.liu.se;
   guser908@student.liu.se; eveho444@student.liu.se; nahid.shahmehri@liu.se
RI Kargen, Ulf/HTT-4309-2023
OI Kargen, Ulf/0000-0002-3009-4314
CR [Anonymous], 2006, P 2006 ACM SIGPLAN S
   [Anonymous], 2012, Practical Malware Analysis: The Hands-On Guide to Dissecting Malicious Software. No
   Banescu S, 2017, PROCEEDINGS OF THE 26TH USENIX SECURITY SYMPOSIUM (USENIX SECURITY '17), P661
   Collberg C., 1998, Conference Record of POPL '98: 25th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P184, DOI 10.1145/268946.268962
   Collberg C., 1997, LOW TAXONOMY OBFUSCA
   Jämthagen C, 2013, PROCEEDINGS OF THE 2013 IEEE WORKSHOP ON ANTI-MALWARE TESTING RESEARCH (WATER'13), P25
   Junod P, 2015, 2015 IEEE/ACM 1ST INTERNATIONAL WORKSHOP ON SOFTWARE PROTECTION (SPRO), P3, DOI 10.1109/SPRO.2015.10
   Kargén U, 2022, EUR CON SFTWR MTNCE, P464, DOI 10.1109/SANER53432.2022.00063
   Kruegel Christopher, 2004, USENIX SEC S
   Linn C., 2003, P 10 ACM C COMP COMM, P290, DOI DOI 10.1145/948109.948149
   Popov IV, 2007, USENIX ASSOCIATION PROCEEDINGS OF THE 16TH USENIX SECURITY SYMPOSIUM, P275
   Schwarz B., 2001, PROC 2001 WORKSHOP B
   tigress, 2021, TIGRESS C OBFUSCATOR
   Tung Y.-J., 2018, RETURN DISASSEMBLY D
   Tung Y.-J., 2020, BINARY ANAL RES WORK
   Van Put L, 2005, 2005 IEEE INTERNATIONAL SYMPOSIUM ON SIGNAL PROCESSING AND INFORMATION TECHNOLOGY (ISSPIT), VOLS 1 AND 2, P7
NR 16
TC 1
Z9 1
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN
PY 2023
VL 228
AR 102954
DI 10.1016/j.scico.2023.102954
EA APR 2023
PG 9
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA F9IT2
UT WOS:000985418500001
OA Green Published, hybrid
DA 2024-07-18
ER

PT J
AU Velázquez-Rodríguez, C
   Di Nucci, D
   De Roover, C
AF Velazquez-Rodriguez, Camilo
   Di Nucci, Dario
   De Roover, Coen
TI A text classification approach to API type resolution for incomplete
   code snippets
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Fully qualified name resolution; Machine learning; Text classification;
   Stack overflow
AB The Stack Overflow Q&A platform boasts an active community of users who often include code snippets in their questions and answers. Several development tools rely on these code snippets as a source of information. Although code snippets are intended as examples for humans, they may not form compilation units. For instance, snippets illustrating how to use an API might lack the import statements for the corresponding API types. Thus, it becomes essential to determine the fully-qualified name of API types in incomplete snippets. We present RESICO, a machine learning-based text classification approach to resolving the simple name of API types to their fully-qualified names. RESICO is trained on a corpus of Java programs for which a compiler can determine the fully-qualified names. For four machine learning classifiers, we evaluate the type resolution accuracy of the resulting models on the original and an extended version of datasets of snippets previously used to evaluate the current state-of-the-art approach based on information retrieval. Results show that our approach outperforms the state-of-the-art one, although the training phase is slightly slower. We observe that most of the incorrect type resolutions are not due to ambiguities among the simple names for API types but due to similarities among the contexts in which these types are used, representing a future research challenge.(c) 2023 Elsevier B.V. All rights reserved.
C1 [Velazquez-Rodriguez, Camilo; De Roover, Coen] Vrije Univ Brussel, Brussels, Belgium.
   [Di Nucci, Dario] Univ Salerno, Fisciano, SA, Italy.
C3 Vrije Universiteit Brussel; University of Salerno
RP Velázquez-Rodríguez, C (corresponding author), Vrije Univ Brussel, Brussels, Belgium.
EM camilo.ernesto.velazquez.rodriguez@vub.be; ddinucci@unisa.it;
   coen.de.roover@vub.be
RI Di Nucci, Dario/Y-9679-2019
OI Di Nucci, Dario/0000-0002-3861-1902; De Roover,
   Coen/0000-0002-1710-1268; Velazquez-Rodriguez,
   Camilo/0000-0002-8360-1519
FU Excellence of Science project - FWO-Vlaanderen [EOS 30446992
   SECO-ASSIST]; F.R.S.-FNRS
FX We would like to thank the authors of COSTER [5] for sharing their tool
   and data. This research was partially funded by the Excellence of
   Science project EOS 30446992 SECO-ASSIST financed by FWO-Vlaanderen and
   F.R.S.-FNRS.
CR Alon U., 2018, ARXIV
   Alon U, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290353
   [Anonymous], 2014, Int. J. Datab. Theory Appl, DOI [DOI 10.14257/IJDTA.2014.7.1.06, DOI 10.14257/IJDTA.2014.7.1.0]
   Baltes S, 2018, IEEE WORK CONF MIN S, P319, DOI 10.1145/3196398.3196430
   BATES M, 1995, P NATL ACAD SCI USA, V92, P9977, DOI 10.1073/pnas.92.22.9977
   Benelallam Amine, 2018, Zenodo, V06.09.2018-snapshot, DOI 10.5281/ZENODO.1489120
   Bergstra J., 2011, ADV NEURAL INFORM PR, P1, DOI DOI 10.5555/2986459.2986743
   Bergstra J., 2013, INT C MACHINE LEARNI
   Bojanowski P., 2017, Transactions of the Association for Computational Linguistics, V5, P135, DOI DOI 10.1162/TACLA00051
   Bouaziz Ameni, 2014, Data Warehousing and Knowledge Discovery. 16th International Conference (DaWaK 2014). Proceedings: LNCS 8646, P288, DOI 10.1007/978-3-319-10160-6_26
   Breiman L, 2001, MACH LEARN, V45, P5, DOI 10.1023/A:1010933404324
   Cai L, 2019, ESEC/FSE'2019: PROCEEDINGS OF THE 2019 27TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P1075, DOI 10.1145/3338906.3341174
   Chen HH, 2022, INFORM PROCESS MANAG, V59, DOI 10.1016/j.ipm.2021.102798
   CORTES C, 1995, MACH LEARN, V20, P273, DOI 10.1007/BF00994018
   Dagenais B, 2012, PROC INT CONF SOFTW, P47, DOI 10.1109/ICSE.2012.6227207
   Dasarathy Belur V., 1991, IEEE COMPUTER SOC TU
   Di Nucci D, 2018, 2018 25TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION AND REENGINEERING (SANER 2018), P612, DOI 10.1109/SANER.2018.8330266
   Dong YW, 2022, PROC INT CONF SOFTW, P1982, DOI 10.1145/3510003.3510061
   Flannery B. P., 1992, NUMERICAL RECIPES C, DOI DOI 10.2277/052143064X
   Hall T, 2012, IEEE T SOFTWARE ENG, V38, P1276, DOI 10.1109/TSE.2011.103
   Harris ZS, 1954, WORD, V10, P146, DOI 10.1080/00437956.1954.11659520
   Hellendoorn VJ, 2018, ESEC/FSE'18: PROCEEDINGS OF THE 2018 26TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P152, DOI 10.1145/3236024.3236051
   Henkel J, 2018, ESEC/FSE'18: PROCEEDINGS OF THE 2018 26TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P163, DOI 10.1145/3236024.3236085
   Phan H, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P632, DOI 10.1145/3180155.3180230
   Joachims T., 2002, KLUWER INT SER ENG C, V668, DOI 10.1007/978-1-4615-0907-3
   Lehmann D., 2022, 2022 43 ACM SIGPLAN
   Lilleberg J, 2015, PROCEEDINGS OF 2015 IEEE 14TH INTERNATIONAL CONFERENCE ON COGNITIVE INFORMATICS & COGNITIVE COMPUTING (ICCI*CC), P136, DOI 10.1109/ICCI-CC.2015.7259377
   Lin B, 2019, PROC INT CONF SOFTW, P548, DOI 10.1109/ICSE.2019.00066
   Linares-Vasquez M, 2014, P 22 INT C PROGR C, P83
   Lipton Zachary C, 2014, Mach Learn Knowl Discov Databases, V8725, P225, DOI 10.1007/978-3-662-44851-9_15
   Luong MT, 2016, Arxiv, DOI arXiv:1604.00788
   Malik RS, 2019, PROC INT CONF SOFTW, P304, DOI 10.1109/ICSE.2019.00045
   Martins P, 2018, IEEE WORK CONF MIN S, P1, DOI 10.1145/3196398.3196450
   Mikolov T., 2013, ADV NEURAL INFORM PR, V26, P3111, DOI DOI 10.5555/2999792.2999959
   Mikolov T, 2013, Arxiv, DOI [arXiv:1301.3781, 10.48550/arXiv.1301.3781]
   Moonen L, 2001, EIGHTH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P13, DOI 10.1109/WCRE.2001.957806
   Peng Y, 2022, Arxiv, DOI arXiv:2105.03595
   Ponzanelli Luca, 2019, IEEE Transactions on Software Engineering, V45, P464, DOI 10.1109/TSE.2017.2779479
   Ponzanelli Luca, 2014, P 11 WORKING C MININ, P102, DOI DOI 10.1145/2597073.2597077
   Raychev V, 2015, ACM SIGPLAN NOTICES, V50, P111, DOI [10.1145/2775051.2677009, 10.1145/2676726.2677009]
   Rubei R, 2020, INFORM SOFTWARE TECH, V127, DOI 10.1016/j.infsof.2020.106367
   Saifullah CMK, 2019, 34TH IEEE/ACM INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING (ASE 2019), P243, DOI 10.1109/ASE.2019.00032
   Sakakibara Y., 1993, Proceedings. The Ninth Conference on Artificial Intelligence for Applications (Cat. No.93CH3254-0), DOI 10.1109/CAIA.1993.366617
   Sechidis K, 2011, LECT NOTES ARTIF INT, V6913, P145, DOI 10.1007/978-3-642-23808-6_10
   Shah K., 2020, AUGMENT HUMAN RES, V5, P1, DOI DOI 10.1007/S41133-020-00032-0
   Sirres R., 2018, EMPIR SOFTW ENG EMSE, V23
   Soucy P, 2001, 2001 IEEE INTERNATIONAL CONFERENCE ON DATA MINING, PROCEEDINGS, P647, DOI 10.1109/ICDM.2001.989592
   SPARCKJONES K, 1972, J DOC, V28, P11, DOI 10.1108/eb026526
   STONE M, 1974, J R STAT SOC B, V36, P111, DOI 10.1111/j.2517-6161.1974.tb00994.x
   Subramanian S, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P643, DOI 10.1145/2568225.2568313
   Subramanian S, 2013, IEEE WORK CONF MIN S, P85, DOI 10.1109/MSR.2013.6624012
   Terragni V., 2016, P 25 INT S SOFTWARE, P118
   Theeten Bart, 2019, 2019 IEEE/ACM 16th International Conference on Mining Software Repositories (MSR), P18, DOI 10.1109/MSR.2019.00014
   Tin Kam Ho, 1995, Proceedings of the Third International Conference on Document Analysis and Recognition, P278, DOI 10.1109/ICDAR.1995.598994
   Treude C, 2016, PROC INT CONF SOFTW, P392, DOI 10.1145/2884781.2884800
   Nguyen TD, 2017, PROC INT CONF SOFTW, P438, DOI 10.1109/ICSE.2017.47
   Nguyen TD, 2016, 2016 IEEE/ACM 38TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING COMPANION (ICSE-C), P756, DOI 10.1145/2889160.2892661
   Wang K, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P121, DOI 10.1145/3385412.3385999
   Wei JY, 2020, Arxiv, DOI arXiv:2005.02161
   Xu BX, 2012, J COMPUT, V7, P2913, DOI 10.4304/jcp.7.12.2913-2920
   Xu ZG, 2016, FSE'16: PROCEEDINGS OF THE 2016 24TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON FOUNDATIONS OF SOFTWARE ENGINEERING, P607, DOI 10.1145/2950290.2950343
   Xudong Wang, 2022, 2022 IEEE/ACM International Symposium on Code Generation and Optimization (CGO), P131, DOI 10.1109/CGO53902.2022.9741274
   Yang D, 2016, 13TH WORKING CONFERENCE ON MINING SOFTWARE REPOSITORIES (MSR 2016), P391, DOI [10.1109/MSR.2016.047, 10.1145/2901739.2901767]
   Ye X, 2016, PROC INT CONF SOFTW, P404, DOI 10.1145/2884781.2884862
   Zhang T, 2001, INFORM RETRIEVAL, V4, P5, DOI 10.1023/A:1011441423217
NR 65
TC 1
Z9 1
U1 2
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD APR
PY 2023
VL 227
AR 102941
DI 10.1016/j.scico.2023.102941
EA MAR 2023
PG 26
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA C0EY2
UT WOS:000958767800001
OA Green Published
DA 2024-07-18
ER

PT J
AU Zeng, JW
   He, YT
   Zhang, T
   Xu, Z
   Han, Q
AF Zeng, Jianwei
   He, Yutong
   Zhang, Tao
   Xu, Zhou
   Han, Qiang
TI CLG-Trans: Contrastive learning for code summarization via graph
   attention-based transformer
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Code summarization; Graph neural networks; Dynamic graph attention;
   Contrastive learning
ID NATURAL-LANGUAGE SUMMARIES; GENERATION
AB Automated code summarization is the task of automatically generating natural language descriptions of source code, which is an important research topic in the software engineering field. Many methods in recent studies were based on deep learning techniques, which effectively improve the performance of code summarization. Most of the existing code summarization methods use different kinds of neural networks to learn source code information. Some methods use graph neural network (GNN) to represent abstract syntax tree (AST) and fuse the structural information of source code. However, these methods still have two important issues: 1) they cannot solve the Out-Of-Vocabulary (OOV) problem effectively; 2) the structural information of source code they can capture is limited. In order to address the above-mentioned challenges, we propose a novel automated code summarization model named CLG-Trans in this work. This model uses the Byte Pair Encoding (BPE) algorithm and pointer-generator network to tackle the OOV problem. Then it utilizes the fusion of contrastive learning strategy and dynamic graph attention mechanism to effectively capture rich structure information of source code sequences. Experimental results on Funcom dataset show that CLG-Trans outperforms seven state-ofthe-art models (i.e., Hybrid-DRL, Ast-Attendgru, Transformer, codeGnn, Rencos, CodeBERT and SIT) by averagely increasing 19.48% and 13.17% on BLEU scores and ROUGUE-L score, respectively. In addition, CLG-Trans achieves an improvement of 16.14% and 4.70% in BLEU scores and ROUGE-L score compared with our previously proposed model DG-Trans. (c) 2023 Elsevier B.V. All rights reserved.
C1 [Zeng, Jianwei; He, Yutong; Zhang, Tao] Macau Univ Sci & Technol, Sch Comp Sci & Engn, Taipa, Macao, Peoples R China.
   [Xu, Zhou] Chongqing Univ, Sch Big Data & Software Engn, Chongqing, Peoples R China.
   [Han, Qiang] North Minzu Univ, Sch Comp Sci & Engn, Yinchuan, Ningxia, Peoples R China.
C3 Macau University of Science & Technology; Chongqing University; North
   Minzu University
RP Zhang, T (corresponding author), Macau Univ Sci & Technol, Sch Comp Sci & Engn, Taipa, Macao, Peoples R China.
EM waynetseng54@gmail.com; yutonghe98@gmail.com; tazhang@must.edu.mo;
   zhouxullx@cqu.edu.cn; hanqiang@nmu.edu.cn
RI Zhang, Tao/E-5634-2012
OI Zhang, Tao/0000-0002-6272-4069
FU Macao Science and Technology Development Fund (FDCT) [0047/2020/A1,
   0014/2022/A]
FX Acknowledgement We appreciate Dr. Zhou Xu who is one of our authors for
   helping us polish this article. Even though he left us, we cherish the
   memory of his character and morals forever. This work was supported in
   part by the Macao Science and Technology Development Fund (FDCT) under
   Grant 0047/2020/A1 and 0014/2022/A.
CR Adams O, 2017, 15TH CONFERENCE OF THE EUROPEAN CHAPTER OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS (EACL 2017), VOL 1: LONG PAPERS, P937
   Ahmad W., 2020, P 58 ANN M ASS COMPU, P4998, DOI 10.18653/v1/2020.acl-main.449
   Allamanis M, 2018, ACM COMPUT SURV, V51, DOI 10.1145/3212695
   Allamanis M, 2016, PR MACH LEARN RES, V48
   Brody S, 2022, Arxiv, DOI arXiv:2105.14491
   Chen T, 2021, Arxiv, DOI arXiv:2106.10855
   Cho KYHY, 2014, Arxiv, DOI [arXiv:1406.1078, DOI 10.3115/V1/D14-1179, 10.48550/ARXIV.1406.1078, DOI 10.48550/ARXIV.1406.1078]
   Choi Y, 2021, FINDINGS OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS, ACL-IJCNLP 2021, P2842
   Chopra Sumit, 2016, P 2016 C N AM CHAPT, P93, DOI DOI 10.18653/V1/N16-1012
   Cvitkovic M, 2019, PR MACH LEARN RES, V97
   Devlin J, 2019, Arxiv, DOI arXiv:1810.04805
   Eddy BP, 2013, CONF PROC INT SYMP C, P13, DOI 10.1109/ICPC.2013.6613829
   Feng ZY, 2020, Arxiv, DOI [arXiv:2002.08155, 10.48550/arXiv.2002.08155]
   Fernandes P, 2021, Arxiv, DOI arXiv:1811.01824
   Gao TY, 2021, 2021 CONFERENCE ON EMPIRICAL METHODS IN NATURAL LANGUAGE PROCESSING (EMNLP 2021), P6894
   Garneau N, 2019, Arxiv, DOI arXiv:1903.00724
   Gong Z., 2022, arXiv
   Gu XD, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P933, DOI 10.1145/3180155.3180167
   Gutmann MU, 2012, J MACH LEARN RES, V13, P307
   Hadsell R, 2006, IEEE C COMP VIS PATT, P1735, DOI DOI 10.1109/CVPR.2006.100
   Haiduc S., 2010, 2010 32nd International Conference on Software Engineering (ICSE), P223, DOI 10.1145/1810295.1810335
   Haiduc S., 2010, Proceedings 17th Working Conference on Reverse Engineering (WCRE 2010), P35, DOI 10.1109/WCRE.2010.13
   Hellendoorn VJ, 2017, ESEC/FSE 2017: PROCEEDINGS OF THE 2017 11TH JOINT MEETING ON FOUNDATIONS OF SOFTWARE ENGINEERING, P763, DOI 10.1145/3106237.3106290
   Hill E, 2009, PROC INT CONF SOFTW, P232, DOI 10.1109/ICSE.2009.5070524
   Hochreiter S, 1997, NEURAL COMPUT, V9, P1735, DOI [10.1162/neco.1997.9.1.1, 10.1007/978-3-642-24797-2]
   Hu X, 2018, PROCEEDINGS OF THE TWENTY-SEVENTH INTERNATIONAL JOINT CONFERENCE ON ARTIFICIAL INTELLIGENCE, P2269
   Hu X, 2018, INT C PROGRAM COMPRE, P200, DOI 10.1145/3196321.3196334
   Husain H, 2020, Arxiv, DOI arXiv:1909.09436
   Iyer S, 2016, PROCEEDINGS OF THE 54TH ANNUAL MEETING OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS, VOL 1, P2073
   Jianwei Z., 2021, IEEE INT C S Q R S
   Karampatsis RM, 2020, PROC INT CONF SOFTW, P1073, DOI 10.1145/3377811.3380342
   Krizhevsky A, 2017, COMMUN ACM, V60, P84, DOI 10.1145/3065386
   Le THM, 2020, ACM COMPUT SURV, V53, DOI 10.1145/3383458
   LeClair A., 2019, arXiv
   LeClair A, 2020, INT C PROGRAM COMPRE, P184, DOI 10.1145/3387904.3389268
   LeClair A, 2019, PROC INT CONF SOFTW, P795, DOI 10.1109/ICSE.2019.00087
   Li BH, 2020, PROCEEDINGS OF THE 2020 CONFERENCE ON EMPIRICAL METHODS IN NATURAL LANGUAGE PROCESSING (EMNLP), P9119
   Li YJ, 2017, Arxiv, DOI arXiv:1511.05493
   Lin CY, 2004, ROUGE: A Package for Automatic Evaluation of Summaries, P74, DOI DOI 10.1253/JCJ.34.1213
   Liu S., 2020, INT C LEARNING REPRE
   Liu YH, 2019, Arxiv, DOI arXiv:1907.11692
   Liu YX, 2021, Arxiv, DOI arXiv:2106.01890
   Logeswaran L, 2018, Arxiv, DOI arXiv:1803.02893
   McBurney P. W., 2014, P 22 INT C PROGRAM C, P279
   Mikolov T, 2013, Arxiv, DOI [arXiv:1301.3781, 10.48550/arXiv.1301.3781]
   Moreno L, 2018, PROC IEEE ACM INT C, P530, DOI 10.1145/3183440.3183464
   Moreno L, 2013, CONF PROC INT SYMP C, P23, DOI 10.1109/ICPC.2013.6613830
   Mou LL, 2016, AAAI CONF ARTIF INTE, P1287
   Kipf TN, 2017, Arxiv, DOI arXiv:1609.02907
   Nallapati R, 2016, Arxiv, DOI [arXiv:1602.06023, DOI 10.48550/ARXIV.1602.06023]
   Nazar N, 2016, J COMPUT SCI TECH-CH, V31, P883, DOI 10.1007/s11390-016-1671-1
   Panichella S, 2018, 2018 IEEE 2ND INTERNATIONAL WORKSHOP ON VALIDATION, ANALYSIS AND EVOLUTION OF SOFTWARE TESTS (VST), P1, DOI 10.1109/VST.2018.8327148
   Papineni K, 2002, 40TH ANNUAL MEETING OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS, PROCEEDINGS OF THE CONFERENCE, P311, DOI 10.3115/1073083.1073135
   Rodeghero P, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P390, DOI 10.1145/2568225.2568247
   RUMELHART DE, 1986, NATURE, V323, P533, DOI 10.1038/323533a0
   Scarselli F, 2009, IEEE T NEURAL NETWOR, V20, P61, DOI 10.1109/TNN.2008.2005605
   See A, 2017, PROCEEDINGS OF THE 55TH ANNUAL MEETING OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS (ACL 2017), VOL 1, P1073, DOI 10.18653/v1/P17-1099
   Sennrich R, 2016, Arxiv, DOI arXiv:1508.07909
   Shibata Yusuxke, 1999, Byte Pair encoding: A text compression scheme that accelerates pattern matching
   Sridhara Giriprasad, 2010, 25 IEEEACM INT C AUT, P43
   Su J., 2021, PREPRINT, DOI DOI 10.48550/ARXIV.2103.15316
   Sulír M, 2017, INFORMATION, V8, DOI 10.3390/info8040148
   Vaswani A, 2017, ADV NEUR IN, V30
   Veličkovic P, 2018, Arxiv, DOI arXiv:1710.10903
   Wan Y, 2018, IEEE INT CONF AUTOM, P397, DOI 10.1145/3238147.3238206
   Wang RY, 2020, IEEE ACCESS, V8, P135591, DOI 10.1109/ACCESS.2020.3011744
   Wang XR, 2017, 2017 IEEE 24TH INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER), P205, DOI 10.1109/SANER.2017.7884622
   Wei BL, 2019, Arxiv, DOI arXiv:1910.05923
   Wong E, 2015, 2015 22ND INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER), P380, DOI 10.1109/SANER.2015.7081848
   Wong E, 2013, IEEE INT CONF AUTOM, P562, DOI 10.1109/ASE.2013.6693113
   Wu HQ, 2021, FINDINGS OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS, ACL-IJCNLP 2021, P1078
   Wu ZH, 2021, IEEE T NEUR NET LEAR, V32, P4, DOI 10.1109/TNNLS.2020.2978386
   Xia MZ, 2019, AAAI CONF ARTIF INTE, P7297
   Xu K, 2018, Arxiv, DOI arXiv:1804.00823
   Zhang CY, 2022, SYMMETRY-BASEL, V14, DOI 10.3390/sym14030471
   Zhang J, 2020, PROC INT CONF SOFTW, P1385, DOI 10.1145/3377811.3380383
NR 76
TC 0
Z9 0
U1 3
U2 5
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR
PY 2023
VL 226
AR 102925
DI 10.1016/j.scico.2023.102925
EA JAN 2023
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA C6KK7
UT WOS:000962981700001
DA 2024-07-18
ER

PT J
AU van den Heuvel, B
   Pérez, JA
AF van den Heuvel, Bas
   Perez, Jorge A.
TI A decentralized analysis of multiparty protocols
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Concurrency; Process calculi; Session types; Multiparty session types;
   Deadlock freedom
ID SESSION TYPES; GLOBAL PROGRESS; VERIFICATION; LINEARITY
AB Protocols provide the unifying glue in concurrent and distributed software today; verifying that message-passing programs conform to such governing protocols is important but difficult. Static approaches based on multiparty session types (MPST) use protocols as types to avoid protocol violations and deadlocks in programs. An elusive problem for MPST is to ensure both protocol conformance and deadlock-freedom for implementations with interleaved and delegated protocols. We propose a decentralized analysis of multiparty protocols, specified as global types and implemented as interacting processes in an asynchronous pi-calculus. Our solution rests upon two novel notions: router processes and relative types. While router processes use the global type to enable the composition of participant implementations in arbitrary process networks, relative types extract from the global type the intended interactions and dependencies between pairs of participants. In our analysis, processes are typed using APCP, a type system that ensures protocol conformance and deadlock-freedom with respect to binary protocols, developed in prior work. Our decentralized, router-based analysis enables the sound and complete transference of protocol conformance and deadlock-freedom from APCP to multiparty protocols.(c) 2022 The Author(s). Published by Elsevier B.V. This is an open access article under the CC BY license (http://creativecommons.org/licenses/by/4.0/).
C1 [van den Heuvel, Bas; Perez, Jorge A.] Univ Groningen, Groningen, Netherlands.
C3 University of Groningen
RP van den Heuvel, B; Pérez, JA (corresponding author), Univ Groningen, Groningen, Netherlands.
EM b.van.den.heuvel@rug.nl; j.a.perez@rug.nl
RI Pérez, Jorge/G-1629-2011
OI Pérez, Jorge/0000-0002-1452-6180; van den Heuvel,
   Bas/0000-0002-8264-7371
FU Dutch Research Council (NWO) [016]
FX Acknowledgements We are grateful to the anonymous reviewers for their
   constructive feedback and suggestions, which were enormously helpful to
   improve the presentation. We are also grateful to Jules Jacobs for
   valuable comments and suggestions. This research has been supported by
   the Dutch Research Council (NWO) under project No. 016.Vidi.189.046
   (Unifying Correctness for Communicating Software) .
CR Abdallah R, 2015, SOFTW SYST MODEL, V14, P1029, DOI 10.1007/s10270-013-0357-1
   Alur R, 2005, THEOR COMPUT SCI, V331, P97, DOI 10.1016/j.tcs.2004.09.034
   Ancona D, 2016, FOUND TRENDS PROGRAM, V3, pI, DOI 10.1561/2500000031
   Atkey Robert, 2016, A List of Successes that can Change the World. Essays Dedicated to Philip Wadler on the Occasion of his 60th Birthday. LNCS 9600, P32, DOI 10.1007/978-3-319-30936-1_2
   Barbanera Franco, 2019, EPTCS, V304, P77, DOI /10.4204/EPTCS.304.6
   Bejleri Andi, 2019, The Art, Science, and Engineering of Programming, V3, DOI [DOI 10.22152/PROGRAMMING-JOURNAL.ORG/2019/3/6, /10.22152/programming-journal.org/2019/3/6]
   Bettini L, 2008, LECT NOTES COMPUT SC, V5201, P418, DOI 10.1007/978-3-540-85361-9_33
   Bocchi L, 2017, THEOR COMPUT SCI, V669, P33, DOI 10.1016/j.tcs.2017.02.009
   Boudol Gerard, 1992, RR1702 INRIA
   Brinksma Ed, 1989, 88071989 ISO
   Bultan T, 2008, SERV ORIENTED COMPUT, V2, P27, DOI 10.1007/s11761-008-0022-7
   Caires L, 2017, LECT NOTES COMPUT SC, V10201, P229, DOI 10.1007/978-3-662-54434-1_9
   Caires L, 2016, LECT NOTES COMPUT SC, V9688, P74, DOI 10.1007/978-3-319-39570-8_6
   Caires L, 2016, MATH STRUCT COMP SCI, V26, P367, DOI 10.1017/S0960129514000218
   Caires L, 2010, LECT NOTES COMPUT SC, V6269, P222, DOI 10.1007/978-3-642-15375-4_16
   Caires L, 2010, THEOR COMPUT SCI, V411, P4399, DOI 10.1016/j.tcs.2010.09.010
   Caires Luis, 2014, MSRTR2014104
   Carbone M, 2009, LECT NOTES COMPUT SC, V5569, P187
   Carbone Marco, 2016, LIPIcs, V59
   Castagna G, 2012, LOG METH COMPUT SCI, V8, DOI 10.2168/LMCS-8(1:24)2012
   Castellani I, 2020, THEOR COMPUT SCI, V807, P128, DOI 10.1016/j.tcs.2019.09.027
   Coppo M, 2016, MATH STRUCT COMP SCI, V26, P238, DOI 10.1017/S0960129514000188
   Coppo M, 2013, LECT NOTES COMPUT SC, V7890, P45, DOI 10.1007/978-3-642-38493-6_4
   Dardha O, 2022, J LOG ALGEBR METHODS, V124, DOI 10.1016/j.jlamp.2021.100717
   Dardha O, 2018, LECT NOTES COMPUT SC, V10803, P91, DOI 10.1007/978-3-319-89366-2_5
   Dardha O, 2015, ELECTRON P THEOR COM, P1, DOI 10.4204/EPTCS.190.1
   Dardha Ornela, 2012, PROC PPDP 2012, P139, DOI DOI 10.1145/2370776.2370794
   Demangeon R, 2015, FORM METHOD SYST DES, V46, P197, DOI 10.1007/s10703-014-0218-8
   Deniélou PM, 2013, LECT NOTES COMPUT SC, V7966, P174, DOI 10.1007/978-3-642-39212-2_18
   Deniélou PM, 2012, LOG METH COMPUT SCI, V8, DOI 10.2168/LMCS-8(4:6)2012
   DeYoung Henry, 2012, LIPIcs, V16, P228
   Francalanza Adrian, 2018, Lectures on Runtime. Verification Introductory and Advanced Topics. LNCS 10457, P176, DOI 10.1007/978-3-319-75632-5_6
   Garavel H, 2007, LECT NOTES COMPUT SC, V4590, P158
   Gay SJ, 2020, ELECTRON P THEOR COM, P23, DOI 10.4204/EPTCS.314.3
   Genest B, 2006, J COMPUT SYST SCI, V72, P617, DOI 10.1016/j.jcss.2005.09.007
   HONDA K, 1991, LECT NOTES COMPUT SC, V512, P133
   Honda K., 1993, CONCUR '93. 4th International Conference on Concurrency Theory Proceedings, P509
   Honda K, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P273, DOI 10.1145/2827695
   Honda K, 2016, J ACM, V63, DOI 10.1145/2827695
   Hüttel H, 2016, ACM COMPUT SURV, V49, DOI 10.1145/2873052
   Jia LM, 2016, ACM SIGPLAN NOTICES, V51, P582, DOI 10.1145/2914770.2837662
   Kobayashi N, 1999, ACM T PROGR LANG SYS, V21, P914, DOI 10.1145/330249.330251
   Majumdar Rupak, 2020, P ACM PROGRAMMING LA
   Neykova R, 2020, ELECTRON P THEOR COM, P12
   Neykova R, 2017, FORM ASP COMPUT, V29, P877, DOI 10.1007/s00165-017-0420-8
   Padovani L, 2014, LECT NOTES COMPUT SC, V8459, P147, DOI 10.1007/978-3-662-43376-8_10
   Peltz C, 2003, COMPUTER, V36, P46, DOI 10.1109/MC.2003.1236471
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Salaün G, 2012, IEEE T SERV COMPUT, V5, P290, DOI 10.1109/TSC.2011.9
   Scalas A., 2017, 31stEuropeanConferenceonObject-OrientedProgramming, ECOOP 2017, June 19-23, 2017, V74, DOI [DOI 10.4230/LIPICS.ECOOP.2017.24, 10.4230/LIPICS.ECOOP.2017.24, 10.4230/LIPIcs.ECOOP.2017.24]
   Scalas A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290343
   Toninho Bernardo, 2014, Trustworthy Global Computing 9th International Symposium, TGC 2014. Revised Selected Papers: LNCS 8902, P159, DOI 10.1007/978-3-662-45917-1_11
   Toninho B, 2018, ACM T PROGR LANG SYS, V40, DOI 10.1145/3242173
   van den Heuvel B, 2024, Arxiv, DOI arXiv:2111.13091
   van der Aalst W.M.P., 2009, Encyclopedia of Database Systems, P2004, DOI [DOI 10.1007/978-0-387-39940-9, 10.1007/978-0-387-39940-9_1197]
   Vasconcelos VT, 2012, INFORM COMPUT, V217, P52, DOI 10.1016/j.ic.2012.05.002
   Wadler P, 2012, ACM SIGPLAN NOTICES, V47, P273, DOI 10.1145/2398856.2364568
   Yoshida N, 2020, LECT NOTES COMPUT SC, V11969, P73, DOI 10.1007/978-3-030-36987-3_5
NR 58
TC 2
Z9 2
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 1
PY 2022
VL 222
AR 102840
DI 10.1016/j.scico.2022.102840
EA AUG 2022
PG 55
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 4N6NR
UT WOS:000854135700001
OA Green Published, Green Submitted, hybrid
DA 2024-07-18
ER

PT J
AU Paixao, J
   Rufino, L
   Sobocinski, P
AF Paixao, Joao
   Rufino, Lucas
   Sobocinski, Pawel
TI High-level axioms for graphical linear algebra
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Graphical linear algebra; Calculational proofs; Diagrammatic language;
   String diagrams; Recursive linear algebra
AB We focus on a modular, graphical language-graphical linear algebra-and use it as highlevel language for calculational reasoning. We propose a minimal framework of axioms that highlight the dualities and symmetries of linear algebra, and showcase the resulting diagrammatic calculus. Our work develops a relational approach to linear algebra, closely connected to classical relational algebra. With the symmetrical high-level axioms we are able to provide a fully diagrammatic proof that a fragment of Graphical Linear Algebra is equivalent to matrix algebra. (c) 2022 Elsevier B.V. All rights reserved.
C1 [Paixao, Joao; Rufino, Lucas] Univ Fed Rio de Janeiro, Ave Athos da Silveira Ramos 274, BR-21941916 Rio De Janeiro, RJ, Brazil.
   [Sobocinski, Pawel] Tallinn Univ Technol, Ehitajate Tee 5, EE-12616 Tallinn, Estonia.
C3 Universidade Federal do Rio de Janeiro; Tallinn University of Technology
RP Paixao, J (corresponding author), Univ Fed Rio de Janeiro, Ave Athos da Silveira Ramos 274, BR-21941916 Rio De Janeiro, RJ, Brazil.
EM jpaixao@dcc.ufrj.br
OI Sobocinski, Pawel/0000-0002-7992-9685
FU ESF [2014-2020.4.05.19-0001]; Estonian Research Council [PRG1210];
   Brazilian CAPES; CNPq; grant PIBIC (UFRJ) by CNPQ
FX This research was supported by the ESF funded Estonian IT Academy
   research measure (project 2014-2020.4.05.19-0001) and the Estonian
   Research Council grant PRG1210. This work was also supported by the
   following Brazilian research agencies: CAPES and CNPq. The second author
   is funded by the grant PIBIC (UFRJ) by CNPQ. We thank Jason Erbele,
   Gabriel Ferreira, and Iago Leal for fruitful conversations during
   various stages of this project.
CR [Anonymous], 1961, Pac. J. Math, DOI DOI 10.2140/PJM.1961.11.9
   Baez J., 2010, BIMONOIDS BIPRODUCTS
   Baez JC, 2015, THEOR APPL CATEG, V30, P836
   BERKLING K, 1991, ARRAYS, FUNCTIONAL LANGUAGES, AND PARALLEL SYSTEMS, P1
   Bonchi Filippo, 2014, CONCUR 2014 - Concurrency Theory. 25th International Conference, CONCUR 2014. Proceedings: LNCS 8704, P435, DOI 10.1007/978-3-662-44584-6_30
   Bonchi F., 2017, 28 INT C CONC THEOR
   Bonchi F., 2017, ARXIV171108699
   Bonchi F., 2019, ACM IEEE S LOG COMP
   Bonchi F, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290338
   Bonchi F, 2017, J PURE APPL ALGEBRA, V221, P144, DOI 10.1016/j.jpaa.2016.06.002
   Bonchi F, 2015, ACM SIGPLAN NOTICES, V50, P515, DOI [10.1145/2775051.2676993, 10.1145/2676726.2676993]
   CARBONI A, 1987, J PURE APPL ALGEBRA, V49, P11, DOI 10.1016/0022-4049(87)90121-6
   Coddington E.A., 1973, EXTENSION THEORY FOR, V134
   Cross R, 1998, MG TXB PUR APPL MATH, V213
   Erbele J., REDUNDANCY ZEBRA SNA
   Freyd P, 1990, North-Holland Mathematical Library, V39
   Lack S., 2004, Theory Appl. Categ., V13, P147
   LAWVERE FW, 1963, P NATL ACAD SCI USA, V50, P869, DOI 10.1073/pnas.50.5.869
   MACLANE S, 1961, P NATL ACAD SCI USA, V47, P1043
   O'Hearn PW, 2000, J ACM, V47, P167, DOI 10.1145/331605.331611
   Paixao Joao, 2020, Formal Methods: Foundations and Applications. 23rd Brazilian Symposium, SBMF 2020. Proceedings. Lecture Notes in Computer Science (LNCS 12475), P83, DOI 10.1007/978-3-030-63882-5_6
   REYNOLDS JC, 1979, COMMUN ACM, V22, P290, DOI 10.1145/359104.359110
   Selinger P, 2011, LECT NOTES PHYS, V813, P289, DOI 10.1007/978-3-642-12821-9_4
   Sobocinski Pawel., 2015, Graphical Linear Alge-bra
   Zanasi Fabio, 2015, PhD thesis
NR 25
TC 0
Z9 0
U1 4
U2 9
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 1
PY 2022
VL 218
AR 102791
DI 10.1016/j.scico.2022.102791
EA MAR 2022
PG 26
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 1D1JC
UT WOS:000793563300005
DA 2024-07-18
ER

PT J
AU Zhang, CY
   Pang, J
AF Zhang, Chenyi
   Pang, Jun
TI Modal characterisation of simulation relations in probabilistic
   concurrent games
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Concurrent games; Probabilistic alternating simulation; Probabilistic
   alternating bisimulation; Modal logic; Logic characterisation
AB Probabilistic game structures combine both nondeterminism and stochasticity, where players repeatedly take actions simultaneously to move to the next state of the concurrent game. Probabilistic alternating simulation and bisimulation are important tools to compare the behaviour of different probabilistic game structures. In this paper, we present a sound and complete modal characterisation of these two relations by proposing a new modal logic based on probability distributions. This logic enables a player to enforce a property in the next state or distribution. We further extend the logic with fixpoint operators, which also characterises the simulation relations. This logic can express a lot of interesting properties in practical applications.
C1 [Zhang, Chenyi] Jinan Univ, Coll Informat Sci & Technol, Guangzhou, Peoples R China.
   [Pang, Jun] Univ Luxembourg, Fac Sci Technol & Med, Esch Sur Alzette, Luxembourg.
   [Pang, Jun] Univ Luxembourg, Interdisciplinary Ctr Secur Reliabil & Trust, Esch Sur Alzette, Luxembourg.
C3 Jinan University; University of Luxembourg; University of Luxembourg
RP Zhang, CY (corresponding author), Jinan Univ, Coll Informat Sci & Technol, Guangzhou, Peoples R China.
EM chenyi_zhang@jnu.edu.cn
OI Zhang, Chenyi/0000-0002-3054-5883; Pang, Jun/0000-0002-4521-4112
CR Alur R, 2002, J ACM, V49, P672, DOI 10.1145/585265.585270
   Alur R, 1998, LECT NOTES COMPUT SC, V1466, P163, DOI 10.1007/BFb0055622
   [Anonymous], 2001, HDB PROCESS ALGEBRA, DOI DOI 10.1016/B978-044482830-9/50019-9
   Bradfield J, 2007, STUD LOGIC PRACT REA, V3, P721
   Chatterjee K, 2010, LOG METH COMPUT SCI, V6, DOI 10.2168/LMCS-6(3:13)2010
   Chen TL, 2007, FOURTH INTERNATIONAL CONFERENCE ON FUZZY SYSTEMS AND KNOWLEDGE DISCOVERY, VOL 2, PROCEEDINGS, P35, DOI 10.1109/FSKD.2007.458
   de Alfaro L, 2004, J COMPUT SYST SCI, V68, P374, DOI 10.1016/j.jcss.2003.07.009
   de Alfaro L, 2007, THEOR COMPUT SCI, V386, P188, DOI 10.1016/j.tcs.2007.07.008
   De Alfaro L, 2008, LOG METH COMPUT SCI, V4, DOI 10.2168/LMCS-4(3:7)2008
   Deng YX, 2007, IEEE S LOG, P313, DOI 10.1109/LICS.2007.15
   Deng YX, 2010, LECT NOTES COMPUT SC, V6397, P278, DOI 10.1007/978-3-642-16242-8_20
   Desharnais J, 2010, INFORM COMPUT, V208, P203, DOI 10.1016/j.ic.2009.11.002
   Hansson H., 1994, Formal Aspects of Computing, V6, P512, DOI 10.1007/BF01211866
   HENNESSY M, 1985, J ACM, V32, P137, DOI 10.1145/2455.2460
   Hermanns H, 2011, INFORM COMPUT, V209, P154, DOI 10.1016/j.ic.2010.11.024
   Jonsson B., 1991, Proceedings of Sixth Annual IEEE Symposium on Logic in Computer Science (Cat. No.91CH3025-4), P266, DOI 10.1109/LICS.1991.151651
   Kwiatkowska M, 2018, LECT NOTES COMPUT SC, V11024, P223, DOI 10.1007/978-3-319-99154-2_14
   Kwiatkowska M, 2018, INT J SOFTW TOOLS TE, V20, P195, DOI 10.1007/s10009-017-0476-z
   Liu WW, 2015, PROCEEDINGS OF THE TWENTY-FOURTH INTERNATIONAL JOINT CONFERENCE ON ARTIFICIAL INTELLIGENCE (IJCAI), P882
   Lynch N, 2007, SIAM J COMPUT, V37, P977, DOI 10.1137/S0097539704446487
   McIver A, 2007, ACM T COMPUT LOG, V8, DOI 10.1145/1182613.1182616
   Milner R., 1989, Communication and concurrency
   PARMA A, 2008, THESIS U VERONA
   Parma A, 2007, LECT NOTES COMPUT SC, V4423, P287
   Segala R., 1995, CONCUR '95: Concurrency Theory. 6th International Conference. Proceedings, P234
   Segala R., 1995, Nordic Journal of Computing, V2, P250
   Segala Roberto, 1995, Ph. D. Dissertation
   SMYTH MB, 1978, J COMPUT SYST SCI, V16, P23, DOI 10.1016/0022-0000(78)90048-X
   Song F, 2019, AAAI CONF ARTIF INTE, P6179
   Von Neuman J., 1947, THEORY GAMES EC BEHA
   VONKARGER B, 1994, IFIP TRANS A, V56, P383
   Zhang CY, 2020, 2020 INTERNATIONAL SYMPOSIUM ON THEORETICAL ASPECTS OF SOFTWARE ENGINEERING (TASE 2020), P121, DOI 10.1109/TASE49443.2020.00025
   Zhang CY, 2012, LECT NOTES COMPUT SC, V7147, P431
   Zhang CY, 2010, IFIP ADV INF COMM TE, V323, P71
NR 34
TC 0
Z9 0
U1 1
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR 1
PY 2022
VL 215
DI 10.1016/j.scico.2021.102762
EA DEC 2021
PG 18
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA YN9RV
UT WOS:000747588600011
DA 2024-07-18
ER

PT J
AU van Vulpen, P
   Jansen, S
   Brinkkemper, S
AF van Vulpen, Paul
   Jansen, Slinger
   Brinkkemper, Sjaak
TI The orchestrator's partner management framework for software ecosystems
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Software ecosystem health; Partner management; Software ecosystem
   orchestration; Software ecosystem governance
ID BOUNDARY RESOURCES; OPEN INNOVATION; DESIGN SCIENCE; INFORMATION;
   NETWORKS; COMPETITION; CREATION; CAPTURE; AGENDA; MODEL
AB In software ecosystems, partner management concerns establishing and maintaining meaningful relationships with partners to improve ecosystem health. At the same time, software ecosystem orchestrators have insufficient insight into partner management tools. Because of this, they fail in attracting and maintaining partnerships with software producing organizations, ultimately hindering their ability to build healthy software ecosystems. This research presents a classification for partner management activities to aid orchestrators in establishing and maintaining partnerships. We contribute (1) a methodology to assess partner management in software ecosystems, (2) a classification of knowledge and activities for partner management, and (3) a starting point for the development of theory regarding partner management activities. The classification and the activities are evaluated in five case studies of software platform orchestrators. (c) 2021 The Author(s). Published by Elsevier B.V. This is an open access article under the CC BY license (http://creativecommons.org/licenses/by/4.0/).
C1 [van Vulpen, Paul; Jansen, Slinger; Brinkkemper, Sjaak] Univ Utrecht, Utrecht, Netherlands.
C3 Utrecht University
RP Jansen, S (corresponding author), Univ Utrecht, Utrecht, Netherlands.
EM slinger.jansen@uu.nl
RI van Vulpen, Paul/GQB-3963-2022; Roijackers, Slinger/Y-4244-2019
OI Roijackers, Slinger/0000-0003-3752-2868
CR Ali S, 2016, J SYST SOFTWARE, V117, P402, DOI 10.1016/j.jss.2016.03.069
   Alves C, 2017, ICEIS: PROCEEDINGS OF THE 19TH INTERNATIONAL CONFERENCE ON ENTERPRISE INFORMATION SYSTEMS - VOL 3, P215, DOI 10.5220/0006269402150226
   Ampatzoglou A, 2019, INFORM SOFTWARE TECH, V106, P201, DOI 10.1016/j.infsof.2018.10.006
   [Anonymous], 2010, PROFIT SOFTWARE ECOS
   [Anonymous], 2011, P WORKSH SOFTW EC
   [Anonymous], 2011, P 3 INT WORKSHOP SOF
   [Anonymous], 2013, P INT WORKSH SOFTW E
   Ansys, 2021, ANS PARTN EC
   Avila A., 2016, INT WORKSH SOFTW ECO, P39
   Barrera D, 2011, IEEE SECUR PRIV, V9, P42, DOI 10.1109/MSP.2010.202
   Basole RC, 2009, J INF TECHNOL, V24, P144, DOI 10.1057/jit.2008.34
   Belo I, 2021, INFORMATION, V12, DOI 10.3390/info12060240
   Bonfiglioli E, 2006, CORP GOV-INT J BUS S, V6, P401, DOI 10.1108/14720700610689513
   Bosch J, 2010, J SYST SOFTWARE, V83, P67, DOI 10.1016/j.jss.2009.06.051
   Bosch Jan, 2009, 2009 13 INT SOFTW PR, V9, P111, DOI DOI 10.1145/1753235.1753251
   Bottemanne G., 2018, APIS ADM SOFTWARE HE
   Brinkkemper S, 1999, INFORM SYST, V24, P209, DOI 10.1016/S0306-4379(99)00016-2
   Burkard C, 2012, BUS INFORM SYST ENG+, V4, P41, DOI 10.1007/s12599-011-0199-8
   Callon M, 1999, ACTOR NETWORK THEORY AND AFTER, P181
   Ceccagnoli M, 2012, MIS QUART, V36, P263
   Chen PT, 2012, TECHNOL FORECAST SOC, V79, P543, DOI 10.1016/j.techfore.2011.08.011
   Colombo MG, 2014, RES POLICY, V43, P891, DOI 10.1016/j.respol.2013.08.015
   Cusumano M., 2010, STAYING POWER 6 ENDU
   de Reuver M, 2018, J INF TECHNOL-UK, V33, P124, DOI 10.1057/s41265-016-0033-3
   Dhanaraj C, 2006, ACAD MANAGE REV, V31, P659, DOI [10.2307/20159234, 10.5465/AMR.2006.21318923]
   Eaton B, 2015, MIS QUART, V39, P217, DOI 10.25300/MISQ/2015/39.1.10
   Eckhardt JT, 2018, STRATEG ENTREP J, V12, P369, DOI 10.1002/sej.1298
   Gawer A, 2014, J PROD INNOVAT MANAG, V31, P417, DOI 10.1111/jpim.12105
   Gawer Annabelle., 2015, The Strategy Guidebook, P68
   Ghazawneh A., 2010, the International Conference on Information Systems (ICIS) (, P1
   Ghazawneh A, 2013, INFORM SYST J, V23, P173, DOI 10.1111/j.1365-2575.2012.00406.x
   Gulati R, 2000, STRATEGIC MANAGE J, V21, P203, DOI 10.1002/(SICI)1097-0266(200003)21:3<203::AID-SMJ102>3.0.CO;2-K
   Gulati R, 2005, CALIF MANAGE REV, V47, P77, DOI 10.2307/41166307
   Handoyo E, 2013, LECT NOTES BUS INF P, V150, P212
   Harzing AW, 2016, SCIENTOMETRICS, V106, P787, DOI 10.1007/s11192-015-1798-9
   Hevner A, 2010, INTEGR SER INFORM SY, V22, P9, DOI 10.1007/978-1-4419-5653-8_2
   Hevner AR, 2004, MIS QUART, V28, P75, DOI 10.2307/25148625
   Hurni T., 2014, 22 EUR C INF SYST TE, P1, DOI DOI 10.13140/2.1.2784.0961
   Hyrynsalmi S, 2016, J SYST SOFTWARE, V111, P119, DOI 10.1016/j.jss.2015.08.053
   Iansiti Marco, 2004, The keystone advantage: What the new dynamics of business ecosystems mean for strategy, innovation, and sustainability
   Iyer B, 2006, CALIF MANAGE REV, V48, P28, DOI 10.2307/41166348
   Jacobides MG, 2018, STRATEGIC MANAGE J, V39, P2255, DOI 10.1002/smj.2904
   Jansen S, 2020, INFORM SOFTWARE TECH, V118, DOI 10.1016/j.infsof.2019.106219
   Jansen S, 2013, LECT NOTES BUS INF P, V150, P195
   Jansen S, 2014, INFORM SOFTWARE TECH, V56, P1508, DOI 10.1016/j.infsof.2014.04.006
   Jansen S, 2013, SOFTWARE ECOSYSTEMS: ANALYZING AND MANAGING BUSINESS NETWORKS IN THE SOFTWARE INDUSTRY, P13
   Jansen S, 2012, J SYST SOFTWARE, V85, P1495, DOI 10.1016/j.jss.2011.12.007
   Jansen S, 2009, PROC INT CONF SOFTW, P187, DOI 10.1109/ICSE-COMPANION.2009.5070978
   Kim K., 2020, IEEE T ENG MANAG, P1
   Kittlaus H-B, 2017, SOFTWARE PRODUCT MAN
   Kude T, 2012, IEEE T ENG MANAGE, V59, P250, DOI 10.1109/TEM.2011.2111421
   Lima Thaiana, 2016, Journal of Innovation in Digital Ecosystems, V3, P98, DOI 10.1016/j.jides.2016.10.006
   Morgan L, 2013, EUR J INFORM SYST, V22, P569, DOI 10.1057/ejis.2012.44
   Müller-Seitz G, 2012, INT J MANAG REV, V14, P428, DOI 10.1111/j.1468-2370.2011.00324.x
   Paquin RL, 2013, ORGAN STUD, V34, P1623, DOI 10.1177/0170840612470230
   Petersen K, 2015, INFORM SOFTWARE TECH, V64, P1, DOI 10.1016/j.infsof.2015.03.007
   Popp KM, 2010, LECT NOTES BUS INF P, V51, P181
   Ralph Paul, 2020, ACM SIGSOFT SOFTWARE, V45, P17, DOI [DOI 10.1145/3385678.3385681, 10.1145/3385678.3385681]
   Rickmann T, 2014, AMCIS 2014 PROCEEDINGS
   Riehle D, 2007, COMPUTER, V40, P25, DOI 10.1109/MC.2007.147
   Ritala P, 2017, TECHNOVATION, V60-61, P39, DOI 10.1016/j.technovation.2017.01.004
   Ritala P, 2013, INT J TECHNOL MANAGE, V63, P244, DOI 10.1504/IJTM.2013.056900
   Ritala P, 2009, INT J INNOV MANAG, V13, P569, DOI 10.1142/S136391960900242X
   Scholz R., 2002, Embedded case study methods: Integrating quantitative and qualitative knowledge
   Schreieck M., 2017, 38 INT C INF SYST
   Selander L., 2010, 31 INT C INF SYST IC, V138
   Spijkerman Z, 2018, P INT WORKSH SOFTW I, V2018, P128
   Storey C, 2018, INT J OPER PROD MAN, V38, P1709, DOI 10.1108/IJOPM-12-2016-0708
   Tayauova G., 2012, PROCEDIA SOCIAL BEHA, V41, P188, DOI [10.1016/J.SBSPRO.2012.04.023, DOI 10.1016/J.SBSPRO.2012.04.023]
   Tiwana A., 2013, PLATFORM ECOSYSTEMS
   Tiwana A, 2018, INFORM SYST RES, V29, P829, DOI 10.1287/isre.2017.0739
   Tiwana A, 2015, INFORM SYST RES, V26, P266, DOI 10.1287/isre.2015.0573
   Valenca G., 2017, INT C ENT INF SYST, P189
   Valenca G, 2016, LECT NOTES COMPUT SC, V10027, P69, DOI 10.1007/978-3-319-49094-6_5
   Van Angeren J., 2011, P 3 INT WORKSH SOFTW, V37
   van Angeren J, 2016, J SYST SOFTWARE, V113, P430, DOI 10.1016/j.jss.2015.11.025
   van Vulpen P., 2021, MENDELEY DATA, DOI [10.17632/ f7bx5vpy7t.1, DOI 10.17632/F7BX5VPY7T.1]
   van Vulpen P., 2021, MENDELEY DATA, DOI [10.17632/hm25k9sdm4.1, DOI 10.17632/HM25K9SDM4.1]
   van Vulpen P., 2021, MENDELEY DATA, DOI [10.17632/t57pws28rp.1, DOI 10.17632/T57PWS28RP.1]
   van Vulpen P, 2018, LECT NOTES BUS INF P, V336, P75, DOI 10.1007/978-3-030-04840-2_6
   van Vulpen P, 2017, LECT NOTES BUS INF P, V304, P131, DOI 10.1007/978-3-319-69191-6_9
   Viljainen M, 2011, LECT NOTES BUS INF P, V80, P32
   Weiblen T, 2015, CALIF MANAGE REV, V57, P66, DOI 10.1525/cmr.2015.57.2.66
   Werth D., 2012, J CONVERGENCE, V3, P35
   West J., 2008, CREATING EVOLVING OP
   West J., 2018, MARKET ORCHESTRATORS
   West J, 2013, ADV STRATEG MANAGE, V30, P27, DOI 10.1108/S0742-3322(2013)0000030005
   Williamson PJ, 2012, CALIF MANAGE REV, V55, P24, DOI 10.1525/cmr.2012.55.1.24
   Wnuk K, 2014, INFORM SOFTWARE TECH, V56, P1493, DOI 10.1016/j.infsof.2014.05.015
   WOHLIN Claes, 2014, P 18 INT C EVALUATIO, DOI [10.1145/2601248.2601268.10, 10.1145/2601248.2601268]
   Wouters J., 2019, INT C SOFTW BUS, P31
   Yin PL, 2014, AM ECON REV, V104, P255, DOI 10.1257/aer.104.5.255
   Yin R. K., 2011, APPL CASE STUDY RES
   Yoo YJ, 2010, INFORM SYST RES, V21, P724, DOI 10.1287/isre.1100.0322
NR 94
TC 6
Z9 6
U1 4
U2 22
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 1
PY 2022
VL 213
AR 102722
DI 10.1016/j.scico.2021.102722
EA OCT 2021
PG 31
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Social Science Citation Index (SSCI)
SC Computer Science
GA WK4MQ
UT WOS:000709701700005
OA Green Published, hybrid
DA 2024-07-18
ER

PT J
AU Khatchadourian, R
   Tang, YM
   Bagherzadeh, M
AF Khatchadourian, Raffi
   Tang, Yiming
   Bagherzadeh, Mehdi
TI Safe automated refactoring for intelligent parallelization of Java 8
   streams
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Automated refactoring; Automatic parallelization; Typestate analysis;
   Java 8; Streams
ID MAPREDUCE; CODE; CONCURRENCY; TYPESTATE
AB Streaming APIs are becoming more pervasive in mainstream Object-Oriented programming languages and platforms. For example, the Stream API introduced in Java 8 allows for functional-like, MapReduce-style operations in processing both finite, e.g., collections, and infinite data structures. However, using this API efficiently involves subtle considerations such as determining when it is best for stream operations to run in parallel, when running operations in parallel can be less efficient, and when it is safe to run in parallel due to possible lambda expression side-effects. In this paper, we present an automated refactoring approach that assists developers in writing efficient stream code in a semantics-preserving fashion. The approach, based on a novel data ordering and typestate analysis, consists of preconditions and transformations for automatically determining when it is safe and possibly advantageous to convert sequential streams to parallel and unorder or deparallelize already parallel streams. The approach was implemented as a plug-in to the popular Eclipse IDE, uses the WALA and SAFE analysis frameworks, and was evaluated on 18 Java projects consisting of similar to 1.65M lines of code. We found that 116 of 419 candidate streams (27.68%) were refactorable, and an average speedup of 3.49 on performance tests was observed. The results indicate that the approach is useful in optimizing stream code to their full potential. (C) 2020 Elsevier B.V. All rights reserved.
C1 [Khatchadourian, Raffi] CUNY Hunter Coll, Dept Comp Sci, 695 Pk Ave,Room HN 1008, New York, NY 10065 USA.
   [Tang, Yiming] CUNY, Dept Comp Sci, Grad Ctr, 365 5th Ave, New York, NY 10016 USA.
   [Bagherzadeh, Mehdi] Oakland Univ, Dept Comp Sci & Engn, Rochester, MI 48309 USA.
C3 City University of New York (CUNY) System; Hunter College (CUNY); City
   University of New York (CUNY) System; Oakland University
RP Khatchadourian, R (corresponding author), CUNY Hunter Coll, Dept Comp Sci, 695 Pk Ave,Room HN 1008, New York, NY 10065 USA.
EM raffi.khatchadourian@hunter.cuny.edu; ytang3@gradcenter.cuny.edu;
   mbagherzadeh@oakland.edu
RI Khatchadourian, Raffi/AAH-2180-2019
OI Khatchadourian, Raffi/0000-0002-7930-0182
FU PSC-CUNY Award - Professional Staff Congress [61793-00 49]; PSC-CUNY
   Award - City University of New York [61793-00 49]; Oakland University
FX We would like to thank Atanas Rountev, Eric Bodden, Eran Yahav, Ameya
   Ketkar, and anonymous reviewers for their insightful feedback and for
   referring us to related work. Support for this project was provided by
   PSC-CUNY Award #61793-00 49, jointly funded by The Professional Staff
   Congress and The City University of New York. Bagherzadeh was supported
   by Oakland University.
CR Ahmed S, 2018, PROCEEDINGS OF THE 12TH ACM/IEEE INTERNATIONAL SYMPOSIUM ON EMPIRICAL SOFTWARE ENGINEERING AND MEASUREMENT (ESEM 2018), DOI 10.1145/3239235.3239524
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], 2017, COLL MUT IMM COLL SC
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], 2017, HASHSET JAV SE 9 JDK
   [Anonymous], [No title captured]
   [Anonymous], 2018, HIER TEMP MEM IMPL J
   [Anonymous], 2018, LINQ NET LANG INT QU
   [Anonymous], 2015, REFSNES DATA JAVASCR
   [Anonymous], 2017, ANDROID DEV BLOG
   [Anonymous], [No title captured]
   [Anonymous], 2014, JAVA 8 LAMBDAS PRAGM
   [Anonymous], 2017, THREAD INT
   [Anonymous], 1991, Ph.D. dissertation
   [Anonymous], 2017, JAV UT STREAM JAV SE
   [Anonymous], 2007, INT WORK C SOURC COD
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], 2018, PULL REQUEST 140 ORF
   [Anonymous], [No title captured]
   [Anonymous], 2018, SAFE TYPESTATE ANAL
   [Anonymous], 1990, IFIP TC 2 Working Conference on Programming Concepts and Methods, Sea of Galilee, Israel
   [Anonymous], 2014, Parallel computing works!
   Bagherzadeh M, 2017, PROCEEDINGS OF THE 7TH ACM SIGPLAN INTERNATIONAL WORKSHOP ON PROGRAMMING BASED ON ACTORS, AGENTS, AND DECENTRALIZED CONTROL (AGERE'17), P21, DOI 10.1145/3141834.3141837
   Bagherzadeh M, 2019, ESEC/FSE'2019: PROCEEDINGS OF THE 2019 27TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P432, DOI 10.1145/3338906.3338939
   Bagherzadeh Mehdi., 2015, P 14 INT C MODULARIT, P93, DOI [10.1145/2724525.2724568, DOI 10.1145/2724525.2724568]
   BANERJEE U, 1993, P IEEE, V81, P211, DOI 10.1109/5.214548
   Bavota G., 2012, 2012 12th IEEE Working Conference on Source Code Analysis and Manipulation (SCAM 2012), P104, DOI 10.1109/SCAM.2012.20
   Biboudis Aggelos., 2015, 29 EUR C OBJ OR PROG, P591, DOI 10.4230/LIPIcs.ECOOP.2015.591
   Bodden E., 2010, Proceedings of the 32nd ACM/IEEE international Conference on Software Engineering, P5
   Brodu Etienne., 2016, Symposium on Applied Computing, P1906, DOI DOI 10.1145/2851613.2851745
   Bu YY, 2010, PROC VLDB ENDOW, V3, P285
   Chan B, 2004, J SUPERCOMPUT, V28, P91, DOI 10.1023/B:SUPE.0000014804.20789.21
   Csallner Christoph., 2011, ACM Symposium on the Foundations of Software Engineering, P504, DOI [DOI 10.1145/2025113.2025204, 10.1145/2025113.2025204]
   Dean J, 2008, COMMUN ACM, V51, P107, DOI 10.1145/1327452.1327492
   Dig D, 2009, PROC INT CONF SOFTW, P397, DOI 10.1109/ICSE.2009.5070539
   Fan Yang, 2010, Proceedings of the 2010 17th IEEE International Conference and Workshops on Engineering of Computer-Based Systems (ECBS 2010), P358, DOI 10.1109/ECBS.2010.50
   Fink SJ, 2008, ACM T SOFTW ENG METH, V17, DOI 10.1145/1348250.1348255
   Fontana FA, 2015, LECT NOTES BUS INF P, V212, P3, DOI 10.1007/978-3-319-18612-2_1
   Fowler M., 2010, ADDISON WESLEY SIGNA
   Garcia R, 2014, ACM T PROGR LANG SYS, V36, DOI 10.1145/2629609
   Gravley JM, 1996, PROCEEDINGS OF THE THIRD WORKING CONFERENCE ON REVERSE ENGINEERING, P227, DOI 10.1109/WCRE.1996.558915
   Gu R, 2014, J PARALLEL DISTR COM, V74, P2166, DOI 10.1016/j.jpdc.2013.10.003
   Gupta M, 2000, INT J PARALLEL PROG, V28, P537, DOI 10.1023/A:1007560600904
   Gyori A., 2013, CROSSING GAP IMPERAT, P543
   Habchi S, 2019, 2019 IEEE/ACM 6TH INTERNATIONAL CONFERENCE ON MOBILE SOFTWARE ENGINEERING AND SYSTEMS (MOBILESOFT 2019), P87, DOI 10.1109/MOBILESoft.2019.00022
   Harrison W. L.  III, 1989, LISP and Symbolic Computation, V2, P179, DOI 10.1007/BF01808954
   Hayashi A., 2015, Proceedings of the principles and practices of programming on the Java platform, P27
   Ishizaki K, 2015, INT CONFER PARA, P419, DOI 10.1109/PACT.2015.46
   Jahani E, 2011, PROC VLDB ENDOW, V4, P385, DOI 10.14778/1978665.1978670
   Ketkar A, 2019, PROC INT CONF SOFTW, P1142, DOI 10.1109/ICSE.2019.00117
   Khatchadourian R, 2019, PROC INT CONF SOFTW, P619, DOI 10.1109/ICSE.2019.00072
   Khatchadourian R, 2018, IEEE INT WORK C SO, P34, DOI 10.1109/SCAM.2018.00011
   Khatchadourian R, 2017, AUTOMAT SOFTW ENG, V24, P757, DOI 10.1007/s10515-016-0208-8
   Khatchadourian R, 2017, PROC INT CONF SOFTW, P82, DOI 10.1109/ICSE.2017.16
   Kim M, 2014, IEEE T SOFTWARE ENG, V40, P633, DOI 10.1109/TSE.2014.2318734
   KUMAR M, 1988, IEEE T COMPUT, V37, P1088, DOI 10.1109/12.2259
   Leung A., 2009, Proc. of the 7th International Conference on Principles and Prac- tice of Programming in Java, P91, DOI [10. 1145/1596655.1596670, DOI 10.1145/1596655.1596670]
   Long Y, 2016, PROCEEDINGS OF THE 15TH INTERNATIONAL CONFERENCE ON MODULARITY (MODULARITY'16), P54, DOI 10.1145/2889443.2889444
   Lu S, 2008, ACM SIGPLAN NOTICES, V43, P329, DOI 10.1145/1353536.1346323
   Lucas W, 2019, PROCEEDINGS OF THE XXXIII BRAZILIAN SYMPOSIUM ON SOFTWARE ENGINEERING, SBES 2019, P187, DOI 10.1145/3350768.3350791
   Mazinanian D, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133909
   Mishne A, 2012, ACM SIGPLAN NOTICES, V47, P997, DOI 10.1145/2398857.2384689
   Naftalin Maurice., 2014, Mastering Lambdas: Java Programming in a Multicore World
   Nicolay J, 2011, IEEE INT WORK C SO, P185, DOI 10.1109/SCAM.2011.13
   Nielebock S, 2019, EMPIR SOFTW ENG, V24, P103, DOI 10.1007/s10664-018-9622-9
   Nielson Flemming, 2004, Principles of Program Analysis
   Palomba F, 2014, PROC IEEE INT CONF S, P101, DOI 10.1109/ICSME.2014.32
   Radoi Cosmin., 2014, ACM SIGPLAN INT C OB
   Ravishankar Mahesh, 2014, ACM T PARALLEL COMPU, V1, P1, DOI DOI 10.1145/2660251
   Rosen B. K., 1988, Conference Record of the Fifteenth Annual ACM Symposium on Principles of Programming Languages, P12, DOI 10.1145/73560.73562
   Rugina R, 1999, ACM SIGPLAN NOTICES, V34, P72, DOI 10.1145/329366.301111
   Sangle S, 2019, ESEC/FSE'2019: PROCEEDINGS OF THE 2019 27TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P1232, DOI 10.1145/3338906.3342499
   Sato S, 2011, ACM SIGPLAN NOTICES, V46, P470, DOI 10.1145/1993316.1993554
   Seppala Ilkka., 2018, Design patterns implemented in Java
   Steensgaard B., 1996, Conference Record of POPL '96: The 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P32, DOI 10.1145/237721.237727
   Steffan JG, 1998, 1998 FOURTH INTERNATIONAL SYMPOSIUM ON HIGH-PERFORMANCE COMPUTER ARCHITECTURE, PROCEEDINGS, P2, DOI 10.1109/HPCA.1998.650541
   Stein B, 2018, IEEE INT CONF AUTOM, P565, DOI 10.1145/3238147.3238174
   STROM RE, 1986, IEEE T SOFTWARE ENG, V12, P157, DOI 10.1109/TSE.1986.6312929
   Tang YM, 2018, PROC IEEE ACM INT C, P206, DOI 10.1145/3183440.3195098
   Tip F, 2011, ACM T PROGR LANG SYS, V33, DOI 10.1145/1961204.1961205
   Tsantalis N, 2017, PROC INT CONF SOFTW, P60, DOI 10.1109/ICSE.2017.14
   Vandierendonck H, 2010, PACT 2010: PROCEEDINGS OF THE NINETEENTH INTERNATIONAL CONFERENCE ON PARALLEL ARCHITECTURES AND COMPILATION TECHNIQUES, P389, DOI 10.1145/1854273.1854322
   Wolfe M, 1996, ACM COMPUT SURV, V28, P261, DOI 10.1145/234313.234417
   Xiao T, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE COMPANION 2014), P44, DOI 10.1145/2591062.2591177
   Yu-Fang Chen, 2015, Tools and Algorithms for the Construction and Analysis of Systems. 21st International Conference, TACAS 2015, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2015. Proceedings: LNCS 9035, P131, DOI 10.1007/978-3-662-46681-0_9
   Zaharia M., 2008, P 8 USENIX C OP SYST, P29
NR 90
TC 9
Z9 9
U1 0
U2 7
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29a, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 1
PY 2020
VL 195
AR 102476
DI 10.1016/j.scico.2020.102476
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA LR7RO
UT WOS:000535893800007
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Sánchez, LE
   Diaz-Pace, JA
   Zunino, A
AF Emiliano Sanchez, Luis
   Andres Diaz-Pace, Jorge
   Zunino, Alejandro
TI A family of heuristic search algorithms for feature model optimization
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Search-based software engineering; Feature modeling; Software product
   line; Optimization; Heuristic search
ID SELECTION
AB Feature models are a well-known formalism for capturing variability, commonalities and configuration rules of software systems. These models are a compact representation of the set of products in a software product line or configurations of a system at runtime, in terms of features and logical relationships among them. The feature model optimization problem consists of selecting a valid product from the model that satisfies a set of resource or business restrictions and optimizes an objective function commonly related to user preferences. This problem, although computationally intractable, has been addressed in several works with different algorithms. However, these approaches appeal to simplifications of the problem or present drawbacks that limit their application. For example, several approaches do not contemplate feature interactions, and some of them do not guarantee exact solutions or even valid solutions satisfying complex constraints. In this article, we propose a novel algorithm called CSA that overcomes the performance and common weaknesses of existing approaches. CSA can be parameterized with a set of classic search strategies (Backtracking, Branch & Bound, and Best-First Search) and heuristics that allow us to leverage solution optimality and search efficiency. This makes CSA appropriate for automating decisions both at design-time, where exact solutions are generally required, and at run-time, where selection must be done efficiently but suboptimal solutions are acceptable. The algorithm supports different formats of objective functions, including multi-linear polynomial functions that are capable of representing feature interactions. We present an analysis to validate algorithm properties, and then a series of experiments with synthetic and real models to empirically compare CSA with existing alternatives to show the benefits of our approach. In our analysis, CSA showed to be complete, exact, and scalable for searching approximate solutions. The empirical results showed that the approximate variant of CSA can reach an optimality degree of 99%, against a 84% and 93% reached by other approximate alternatives based on genetic and greedy algorithms respectively. In terms of response time, CSA performed a 72% better than other approximate algorithms. Compared to other exact approaches, CSA improves response time on specific problem types. Furthermore, CSA was evaluated with problem instances involving feature interactions, showing that performance properties scale properly when the number of feature interactions increases. (C) 2018 Elsevier B.V. All rights reserved.
C1 [Emiliano Sanchez, Luis; Andres Diaz-Pace, Jorge; Zunino, Alejandro] UNICEN Univ, ISISTAN Res Inst, Campus Univ, Tandil, Argentina.
RP Sánchez, LE (corresponding author), UNICEN Univ, ISISTAN Res Inst, Campus Univ, Tandil, Argentina.
EM emiliano.sanchez@isistan.unicen.edu.ar;
   andres.diazpace@isistan.unicen.edu.ar;
   alejandro.zunino@isistan.unicen.edu.ar
OI Sanchez, Luis Emiliano/0000-0002-5995-2570
CR [Anonymous], 2014, THESIS
   [Anonymous], 1979, SPRINGER SCI BUSINES
   [Anonymous], 2016, Feature-Oriented Software Product Lines
   Batory D, 2005, LECT NOTES COMPUT SC, V3714, P7
   Benavides D, 2005, LECT NOTES COMPUT SC, V3520, P491
   Benavides D, 2010, INFORM SYST, V35, P615, DOI 10.1016/j.is.2010.01.001
   Boros E, 2002, DISCRETE APPL MATH, V123, P155, DOI 10.1016/S0166-218X(01)00336-5
   Sanchez LE, 2013, 2013 1ST INTERNATIONAL WORKSHOP ON COMBINING MODELLING AND SEARCH-BASED SOFTWARE ENGINEERING (CMSBSE), P39, DOI 10.1109/CMSBSE.2013.6604435
   Guo JM, 2013, IEEE INT CONF AUTOM, P301, DOI 10.1109/ASE.2013.6693089
   Guo JM, 2011, J SYST SOFTWARE, V84, P2208, DOI 10.1016/j.jss.2011.06.026
   Hierons RM, 2016, ACM T SOFTW ENG METH, V25, DOI 10.1145/2897760
   Kang Kyo C, 1990, Technical Report
   Li J, 2011, ADV INTEL SOFT COMPU, V124, P459
   Marler RT, 2010, STRUCT MULTIDISCIP O, V41, P853, DOI 10.1007/s00158-009-0460-7
   Mendonca M., 2009, P 24 ACM SIGPLAN C C, P761, DOI [10.1145/1639950.1640002, DOI 10.1145/1639950.1640002]
   Olaechea R, 2014, 18TH INTERNATIONAL SOFTWARE PRODUCT LINE CONFERENCE (SPLC 2014), VOL 1, P92, DOI 10.1145/2648511.2648521
   Pearl J., 1984, Heuristics: Intelligent Search Strategies for Computer Problem Solving
   Przybylski A, 2017, EUR J OPER RES, V260, P856, DOI 10.1016/j.ejor.2017.01.032
   Russell  S., 2009, ARTIF INTELL
   Sanchez L. E., 2015, Journal of Software Engineering Research and Development, V3, P10, DOI DOI 10.1186/S40411-015-0022-1
   Sayyad AS, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P492, DOI 10.1109/ICSE.2013.6606595
   Schobbens PY, 2007, COMPUT NETW, V51, P456, DOI 10.1016/j.comnet.2006.08.008
   Segura S., 2012, Proceedings of the Sixth International Workshop on Variability Modeling of Software-Intensive Systems, P63, DOI DOI 10.1145/2110147.2110155
   Sherali HD., 1992, J. Glob. Optim, V2, P101, DOI DOI 10.1007/BF00121304
   Siegmund N, 2017, ESEC/FSE 2017: PROCEEDINGS OF THE 2017 11TH JOINT MEETING ON FOUNDATIONS OF SOFTWARE ENGINEERING, P268, DOI 10.1145/3106237.3106251
   Siegmund N, 2015, 2015 10TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE 2015) PROCEEDINGS, P284, DOI 10.1145/2786805.2786845
   Siegmund N, 2012, SOFTWARE QUAL J, V20, P487, DOI 10.1007/s11219-011-9152-9
   Soltani Samaneh., 2012, Proceedings of the 16th International Software Product Line Conference-Volume, V1, P56, DOI DOI 10.1145/2362536.2362548
   Thüm T, 2009, PROC INT CONF SOFTW, P254, DOI 10.1109/ICSE.2009.5070526
   Wang Ying-lin, 2014, Journal of Shanghai Jiaotong University (Science), V19, P50, DOI 10.1007/s12204-013-1468-0
   White J, 2009, J SYST SOFTWARE, V82, P1268, DOI 10.1016/j.jss.2009.02.011
   Williams HP, 2009, INT SER OPER RES MAN, V130, P1, DOI 10.1007/978-0-387-92280-5
NR 32
TC 5
Z9 5
U1 0
U2 7
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR 1
PY 2019
VL 172
BP 264
EP 293
DI 10.1016/j.scico.2018.12.002
PG 30
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA HK8HC
UT WOS:000458229000012
OA hybrid
DA 2024-07-18
ER

PT J
AU Han, X
   Tang, T
   Lv, JD
AF Han, Xiao
   Tang, Tao
   Lv, Jidong
TI A hierarchical verification approach to verify complex safety control
   systems based on STAMP
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Hierarchical verification; Compositional verification; Assume-guarantee
   reasoning; STAMP; Chinese train control system level 3
ID MODEL CHECKING; AUTOMATA
AB Complexity is a major obstacle to apply formal verification techniques in industry. Assume-guarantee (AG) reasoning is a promising compositional verification approach to deal with complexity. Proper decomposition and assumption design is vital in AG reasoning. We are motivated by the fact that a good insight into the target system can help the formal verification. So, instead of trying to automate the AG reasoning process, an accident model called STAMP is adopted to help us get a better understanding of the safety control system to be verified and a strategy for decomposition and designing assumptions accordingly. This conceptual approach is exemplified by verifying a simplified train control system. (C) 2018 Elsevier B.V. All rights reserved.
C1 [Han, Xiao] Beijing Jiaotong Univ, Sch Elect & Informat Engn, Beijing, Peoples R China.
   [Tang, Tao] Beijing Jiaotong Univ, State Key Lab Rail Traff Control & Safety, Beijing, Peoples R China.
   [Lv, Jidong] Beijing Jiaotong Univ, Natl Engn Res Ctr Rail Transportat Operat & Contr, Beijing, Peoples R China.
C3 Beijing Jiaotong University; Beijing Jiaotong University; Beijing
   Jiaotong University
RP Han, X (corresponding author), Beijing Jiaotong Univ, Sch Elect & Informat Engn, Beijing, Peoples R China.
EM hanxiao@bjtu.edu.cn
FU Fundamental Research Funds for the Central Universities [2016JBZ004];
   National Natural Science Foundation of China [61304185, U1434209]
FX This work was supported by the Fundamental Research Funds for the
   Central Universities [Grant No. 2016JBZ004], and the National Natural
   Science Foundation of China [Grant Nos. 61304185, U1434209].
CR Althaus E, 2017, SCI COMPUT PROGRAM, V148, P123, DOI 10.1016/j.scico.2017.04.010
   ALUR R, 1990, LECT NOTES COMPUT SC, V443, P322, DOI 10.1007/BFb0032042
   [Anonymous], J CHINA RAILW SOC
   [Anonymous], 1984, Logics and Models of Concurrent Systems (NATO ASI Series, DOI [DOI 10.1007/978-3-642-82453-1_5, 10.1007/978-3-642-82453-1\5]
   [Anonymous], DURATION CALCULUS FO
   [Anonymous], J CHINA RAILW SOC
   [Anonymous], 1941, IND ACCIDENT PREVENT
   [Anonymous], THESIS
   [Anonymous], 1991, FACETS SYSTEMS SCI
   [Anonymous], HUPPAAL UPPAAL TRANS
   [Anonymous], LNCS
   Balakrishnan S, 1999, PR GR LAK SYMP VLSI, P284, DOI 10.1109/GLSV.1999.757434
   Banda G, 2009, LECT NOTES COMPUT SC, V5438, P55, DOI 10.1007/978-3-642-00515-2_5
   Behrmann G, 2002, FORM METHOD SYST DES, V21, P225, DOI 10.1023/A:1016095519611
   Bengtsson J, 2004, LECT NOTES COMPUT SC, V3098, P87, DOI 10.1007/978-3-540-27755-2_3
   Chaochen Z., 1995, International Hybrid Systems Workshop, P511
   Chilton C, 2014, SCI COMPUT PROGRAM, V91, P115, DOI 10.1016/j.scico.2013.12.010
   Clarke E. M., 1989, Proceedings. Fourth Annual Symposium on Logic in Computer Science (Cat. No.89CH2753-2), P353, DOI 10.1109/LICS.1989.39190
   Clarke EM, 1999, MODEL CHECKING, P1
   Cobleigh JM, 2008, ACM T SOFTW ENG METH, V17, DOI 10.1145/1348250.1348253
   Cobleigh JM, 2003, LECT NOTES COMPUT SC, V2619, P331
   Emmi M, 2008, LECT NOTES COMPUT SC, V5014, P116
   Gallier J.H., 1985, Logic for computer science: foundations of automatic theorem proving
   Ghosh S., 2016, INT C RAILWAY ENG IC, P1
   Gordon M.J.C., 1993, Introduction to HOL: A theorem proving environment for higher order logic
   GRUMBERG O, 1994, ACM T PROGR LANG SYS, V16, P843, DOI 10.1145/177492.177725
   HAREL D, 1987, SCI COMPUT PROGRAM, V8, P231, DOI 10.1016/0167-6423(87)90035-9
   Haxthausen AE, 2014, INT J SOFTW TOOLS TE, V16, P713, DOI 10.1007/s10009-013-0295-9
   Jie Liu, 1999, Proceedings of the 38th IEEE Conference on Decision and Control (Cat. No.99CH36304), P3508, DOI 10.1109/CDC.1999.827883
   Jifeng H., 1994, CLASSICAL MIND ESSAY, P171
   Jin X, 2007, USIC 2007: PROCEEDINGS OF THE SEVENTH INTERNATIONAL CONFERENCE ON QUALITY SOFTWARE, P90
   Khan U, 2015, INT CONF FRONT INFO, P347, DOI 10.1109/FIT.2015.28
   Krings S, 2018, SCI COMPUT PROGRAM, V158, P41, DOI 10.1016/j.scico.2017.08.013
   Larsen KG, 2006, LECT NOTES COMPUT SC, V4085, P82
   Leveson NG, 2011, ENG SYST, P1
   Liang Zou, 2014, Verified Software: Theories, Tools, Experiments. 5th International Conference, VSTTE 2013. Revised Selected Papers: LNCS 8164, P262, DOI 10.1007/978-3-642-54108-7_14
   Liu J, 2010, LECT NOTES COMPUT SC, V6461, P1, DOI [10.1109/PCSPA.2010.9, 10.1007/978-3-642-17164-2_1]
   Mitsch Stefan, 2017, Reliability, Safety, and Security of Railway Systems. Modelling, Analysis, Verification, and Certification. Second International Conference, RSSRail 2017. Proceedings LNCS 10598, P173, DOI 10.1007/978-3-319-68499-4_12
   Platzer A, 2009, LECT NOTES COMPUT SC, V5885, P246, DOI 10.1007/978-3-642-10373-5_13
   Reason J., 2016, MANAGING RISKS ORG A, DOI 10.4324/9781315543543
   Wu XC, 2017, J APPL SCI ENG, V20, P1, DOI 10.6180/jase.2017.20.1.01
   Yupeng Liu, 2011, 2011 Tenth International Symposium on Autonomous Decentralized Systems (ISADS), P67, DOI 10.1109/ISADS.2011.15
   Zafar NA, 2012, INT J INNOV COMPUT I, V8, P5677
NR 43
TC 7
Z9 8
U1 2
U2 15
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR 1
PY 2019
VL 172
BP 117
EP 134
DI 10.1016/j.scico.2018.11.006
PG 18
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA HK8HC
UT WOS:000458229000006
OA Bronze
DA 2024-07-18
ER

PT J
AU Durán, F
   Rocha, C
   Salaün, G
AF Duran, Francisco
   Rocha, Camilo
   Salaun, Gwen
TI Stochastic analysis of BPMN with time in rewriting logic
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE BPMN business processes; Stochastic modeling and analysis; Rewriting
   logic; Statistical model checking; Maude
ID BUSINESS PROCESS MODELS; VERIFICATION; SEMANTICS; FRAMEWORK; CHECKING;
   PATTERNS; SYSTEMS
AB A business process is a set of structured activities that provide a certain service or product. Business processes can be modeled using the BPMN standard, and several industrial platforms have been developed for supporting their design, modeling, and simulation. This paper presents a rewriting logic executable specification of BPMN with time and extended with probabilities. Duration times and delays for tasks and flows can be specified as stochastic expressions, while probabilities are associated to various forms of branching behavior in gateways. These quantities enable discrete-event simulation and automatic stochastic verification of properties such as expected processing time, expected synchronization time at merge gateways, and domain-specific quantitative assertions. The mechanization of the stochastic analysis tasks is done with Maude's statistical model checker PVeStA. The approach is illustrated with a running example and further experimental results encompass specifications from the literature. (C) 2018 Elsevier B.V. All rights reserved.
C1 [Duran, Francisco] Univ Malaga, Malaga, Spain.
   [Rocha, Camilo] Pontificia Univ Javeriana, Cali, Colombia.
   [Salaun, Gwen] Univ Grenoble Alpes, CNRS, Grenoble INP, Inria,LIG, F-38000 Grenoble, France.
C3 Universidad de Malaga; Pontificia Universidad Javeriana; Communaute
   Universite Grenoble Alpes; Institut National Polytechnique de Grenoble;
   Universite Grenoble Alpes (UGA); Centre National de la Recherche
   Scientifique (CNRS); Inria
RP Durán, F (corresponding author), Univ Malaga, Malaga, Spain.
EM duran@lcc.uma.es
RI Durán, Francisco/JXL-7273-2024
OI Rocha, Camilo/0000-0003-4356-7704; Duran, Francisco/0000-0001-5864-8094
FU Spanish MINECO/FEDER [TIN2014-52034-12]; CAPES; Colciencias; INRIA via
   the STIC AmSud project "EPIC: EPistemic Interactive Concurrency"
   [88881.117603/2016-01]; Capital Semilla [020100610]
FX The authors would like to thank the anonymous reviewers for their
   valuable comments on an earlier draft of this paper. The work of F.
   Duran has been partially supported by Spanish MINECO/FEDER project
   TIN2014-52034-12. The work of C. Rocha was partially supported by CAPES,
   Colciencias, and INRIA via the STIC AmSud project "EPIC: EPistemic
   Interactive Concurrency" (Proc. No 88881.117603/2016-01), and by Capital
   Semilla 2017, project "SCORES: Stochastic Concurrency in Rewrite-based
   Probabilistic Models" (Proj. No. 020100610).
CR Agha G, 2006, ELECTRON NOTES THEOR, V153, P213, DOI 10.1016/j.entcs.2005.10.040
   Agha G, 2018, ACM T MODEL COMPUT S, V28, DOI 10.1145/3158668
   AlTurki Musab, 2011, Algebra and Coalgebra in Computer Science. Proceedings 4th International Conference, CALCO 2011, P386, DOI 10.1007/978-3-642-22944-2_28
   AlTurki M, 2009, ELECTRON NOTES THEOR, V234, P3, DOI 10.1016/j.entcs.2009.02.069
   [Anonymous], WS FM
   [Anonymous], 2007, LNCS
   Arevalo C, 2016, INFORM SOFTWARE TECH, V77, P17, DOI 10.1016/j.infsof.2016.05.004
   Baier C, 2003, IEEE T SOFTWARE ENG, V29, P524, DOI 10.1109/TSE.2003.1205180
   Braghetto KR, 2011, LECT NOTES COMPUT SC, V6977, P42, DOI 10.1007/978-3-642-24749-1_5
   Bruni R, 2006, THEOR COMPUT SCI, V360, P386, DOI 10.1016/j.tcs.2006.04.012
   Capel MI, 2012, IEEE ANNU SOFTW ENG, P100, DOI 10.1109/SEW.2012.17
   Christiansen DR, 2011, LECT NOTES COMPUT SC, V6551, P146, DOI 10.1007/978-3-642-19589-1_10
   Clavel M, 2007, LECT NOTES COMPUT SC, V4624, P173
   Corradini F, 2017, IEEE INT CONF AUTOM, P217, DOI 10.1109/ASE.2017.8115635
   Dijkman RM, 2008, INFORM SOFTWARE TECH, V50, P1281, DOI 10.1016/j.infsof.2008.02.006
   Duran F., 2018, P WRLA
   Duran F., 2017, NOTE STOCHASTIC ANAL
   Durán F, 2017, LECT NOTES COMPUT SC, V10319, P219, DOI 10.1007/978-3-319-59746-1_12
   Eckhardt J, 2012, LECT NOTES COMPUT SC, V7212, P78, DOI 10.1007/978-3-642-28872-2_6
   EKER S, 2002, ELECT NOTES THEORETI, V71, P115
   El-Saber Nissreen A. S., 2014, P 2014 WORKSHOP BEHA, P1
   Gagne Denis, 2009, 2009 IEEE Conference on Commerce and Enterprise Computing, P361, DOI 10.1109/CEC.2009.71
   Gruhn V, 2006, ELECTRON NOTES THEOR, V153, P117, DOI 10.1016/j.entcs.2005.10.035
   Hansson H., 1994, Formal Aspects of Computing, V6, P512, DOI 10.1007/BF01211866
   Herbert L., 2012, 2012 IEEE 14th International Symposium on High-Assurance Systems Engineering (HASE 2012), P98, DOI 10.1109/HASE.2012.29
   ISO/IEC, 2013, ISO/IEC 19510
   Kheldoun A, 2015, LECT NOTES COMPUT SC, V9253, P55, DOI 10.1007/978-3-319-23063-4_4
   Konrad S, 2005, PROC INT CONF SOFTW, P372
   Krishna A., 2017, P IFM 17
   Kwiatkowska Marta, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P585, DOI 10.1007/978-3-642-22110-1_47
   Larsen KG, 2014, LECT NOTES COMPUT SC, V8803, P135, DOI 10.1007/978-3-662-45231-8_10
   Mateescu R., 2014, P CBSE 2014, P159
   Mendoza LE, 2012, INFORM SOFTWARE TECH, V54, P149, DOI 10.1016/j.infsof.2011.08.004
   Meseguer J, 2003, LECT NOTES ARTIF INT, V2741, P2
   MESEGUER J, 1992, THEOR COMPUT SCI, V96, P73, DOI 10.1016/0304-3975(92)90182-F
   Morales L. E. M, 2010, INT C ENT INF SYST, P388
   Oliveira C, 2009, IEEE SYS MAN CYBERN, P2824, DOI 10.1109/ICSMC.2009.5346592
   Olveczky P. C., 2007, Higher-Order and Symbolic Computation, V20, P161, DOI 10.1007/s10990-007-9001-5
   Poizat P., 2012, P 27 ANN ACM S APPL, P1927, DOI [10.1145/2245276.2232095, DOI 10.1145/2245276.2232095]
   Poizat P., 2016, INT WORKSH FORM ASP, P36
   Raedts I., 2007, MSVVEIS, P126
   Rocha C, 2017, J LOG ALGEBR METHODS, V86, P269, DOI 10.1016/j.jlamp.2016.10.001
   Sen K, 2005, LECT NOTES COMPUT SC, V3576, P266
   Sun YT, 2011, LECT NOTES COMPUT SC, V7084, P1, DOI 10.1007/978-3-642-25535-9_1
   van der Aalst WMP, 2002, LECT NOTES COMPUT SC, V2480, P45
   van der Aalst WMP, 2016, PROCESS MINING DATA, V2nd, DOI DOI 10.1007/978-3-662-49851-4
   Walck C., 2007, Handbook on Statistical Distributions for experimentalists
   Wong PYH, 2008, INT CONF QUAL SOFTW, P126, DOI 10.1109/QSIC.2008.6
   Wong PYH, 2009, ELECTRON NOTES THEOR, V229, P59, DOI 10.1016/j.entcs.2009.06.029
   Wong PYH, 2008, LECT NOTES COMPUT SC, V5256, P355, DOI 10.1007/978-3-540-88194-0_22
   Wynn MT, 2009, BUS PROCESS MANAG J, V15, P74, DOI 10.1108/14637150910931479
NR 51
TC 19
Z9 19
U1 1
U2 6
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 15
PY 2018
VL 168
BP 1
EP 17
DI 10.1016/j.scico.2018.08.007
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA HA6JG
UT WOS:000450385200001
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Wu, X
   Zhu, HB
AF Wu, Xi
   Zhu, Huibiao
TI Formal analysis of a calculus for WSNs from quality perspective
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Process calculus; Formal analysis; WSNs; Unreliability; Probabilistic
   trustworthiness
ID WIRELESS; SATISFIABILITY; NETWORKS
AB In viewing the common unreliability problem in wireless communications, the CWQ calculus (a Calculus for Wireless sensor networks from Quality perspective) was recently proposed for modeling and reasoning about WSNs (Wireless Sensor Networks) and their applications from a quality perspective. The CWQ calculus ensures that sensor nodes, even though in an unreliable communication network, can still behave in a reasonable manner using default values. Nevertheless, the topological structure in CWQ calculus is considered at the network level and it is tightly coupled with the processes and other configurations; this may limit its flexibility. In this paper, we extend our previous CWQ calculus to be a parametric framework to make it more flexible to be able to model and reason about networks of different topological structures. In the parametric framework, we extract the topological structure of a network and make it to be a configuration so that all topological structure changes can be captured by this framework.
   Besides, under the guide of program analysis, in this paper, we propose two analysis approaches for the extended CWQ calculus: 1) We develop a SAT-based analysis to check whether default values can always be available, so that some error configurations (e.g., deadlock processes), caused by unreliable communications in WSNs, will not be reached; 2) We also propose a data-driven probabilistic trust analysis to decouple the probability of receiving the expected input data from the probability of the trustworthiness of the data, so that the overall trustworthiness of the system decision is determined by performing a relational analysis to combine these two probability distributions. Finally, we give a real-world case study with the scenario of refueling a car to demonstrate the applicability of the extended calculus and these two analysis approaches on the extended calculus for WSNs. (C) 2017 Elsevier B.V. All rights reserved.
C1 [Wu, Xi; Zhu, Huibiao] East China Normal Univ, Shanghai Key Lab Trustworthy Comp, Shanghai 200062, Peoples R China.
   [Wu, Xi] Univ Queensland, Sch Informat Technol & Elect Engn, Brisbane, Qld 4072, Australia.
   [Zhu, Huibiao] Shenzhen Univ, Coll Comp Sci & Software Engn, Shenzhen, Peoples R China.
C3 East China Normal University; University of Queensland; Shenzhen
   University
RP Zhu, HB (corresponding author), East China Normal Univ, Shanghai Key Lab Trustworthy Comp, Shanghai 200062, Peoples R China.
EM hbzhu@sei.ecnu.edu.cn
FU Danish National Research Foundation; National Natural Science Foundation
   of China [61361136002, 61321064]; Shanghai Collaborative Innovation
   Center of Trustworthy Software for Internet of Things [ZF1213]
FX This work was partly supported by the Danish National Research
   Foundation and the National Natural Science Foundation of China (Grant
   No. 61361136002) for the Danish-Chinese Center for Cyber Physical
   Systems. It was also supported by National Natural Science Foundation of
   China (Grant No. 61321064) and Shanghai Collaborative Innovation Center
   of Trustworthy Software for Internet of Things (No. ZF1213).
CR Abrial JR, 2007, J UNIVERS COMPUT SCI, V13, P619
   [Anonymous], 1999, Communicating and Mobile Systems: The Calculus
   [Anonymous], 27 IEEE C COMP COMM
   Bertot Y., 2004, TEXT THEORET COMP S
   Cardelli L., 1997, COMPUTER SCI ENG HDB, V2nd, P2208
   Clavel M, 2002, THEOR COMPUT SCI, V285, P187, DOI 10.1016/S0304-3975(01)00359-0
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   De Moura L, 2011, COMMUN ACM, V54, P69, DOI 10.1145/1995376.1995394
   Dousse O., 2004, P 5 ACM INT S MOBILE, P109, DOI DOI 10.1145/989459.989474
   Ene C., 2001, P 15 INT PAR DISTR P, P149
   Fehnker A, 2012, LECT NOTES COMPUT SC, V7211, P295, DOI 10.1007/978-3-642-28869-2_15
   Ghassemi F, 2008, SEFM 2008: SIXTH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING AND FORMAL METHODS, PROCEEDINGS, P345, DOI 10.1109/SEFM.2008.25
   Gillies D, 2010, COMPUT J, V53, P493, DOI 10.1093/comjnl/bxp047
   Godskesen JC, 2007, LECT NOTES COMPUT SC, V4467, P132
   Godskesen JC, 2009, LECT NOTES COMPUT SC, V5521, P106, DOI 10.1007/978-3-642-02053-7_6
   HOARE CAR, 1978, COMMUN ACM, V21, P666, DOI 10.1145/359576.359585
   Huang YH, 2015, FRONT COMPUT SCI-CHI, V9, P331, DOI 10.1007/s11704-015-3251-x
   Kong ZN, 2008, MOBIHOC'08: PROCEEDINGS OF THE NINTH ACM INTERNATIONAL SYMPOSIUM ON MOBILE AD HOC NETWORKING AND COMPUTING, P139
   Kwiatkowska Marta, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P585, DOI 10.1007/978-3-642-22110-1_47
   Lanese I, 2010, THEOR COMPUT SCI, V411, P1928, DOI 10.1016/j.tcs.2010.01.023
   Lee EM., 2015, COLL STUDENTSEXPERIE, P1
   Malik S, 2009, COMMUN ACM, V52, P76, DOI 10.1145/1536616.1536637
   Merro M, 2010, LECT NOTES COMPUT SC, V5961, P228
   Merro M, 2009, INFORM COMPUT, V207, P194, DOI 10.1016/j.ic.2007.11.010
   Meseguer J, 2011, ENCY PARALLEL COMPUT, P1095
   Mezzetti N, 2006, ELECTRON NOTES THEOR, V158, P331, DOI 10.1016/j.entcs.2006.04.017
   Milner R, 1982, CALCULUS COMMUNICATI
   Nanz S, 2006, ELECTRON NOTES THEOR, V142, P195, DOI 10.1016/j.entcs.2004.10.029
   Nielson F., 1999, Principles of Program Analysis
   Nielson H.R., 2012, P 9 INT S FACS 2012, P188
   Nielson HR, 2013, LECT NOTES COMPUT SC, V7892, P258
   Prasad KVS, 2006, ELECTRON NOTES THEOR, V162, P295, DOI 10.1016/j.entcs.2005.12.096
   Prasad KVS, 1995, SCI COMPUT PROGRAM, V25, P285, DOI 10.1016/0167-6423(95)00017-8
   Sachidananda V., 2010, P JOINT WORKSH GERM, P115
   Si Liu, 2011, Proceedings of the 2011 IEEE 13th International Symposium on High-Assurance Systems Engineering (HASE 2011), P157, DOI 10.1109/HASE.2011.13
   Singh A, 2010, SCI COMPUT PROGRAM, V75, P440, DOI 10.1016/j.scico.2009.07.008
   Vigo R., 2013, LNCS, V7940, P412, DOI DOI 10.1007/978-3-642-38613-8
   Volpano D., 1996, Journal of Computer Security, V4, P167
   Woodcock J, 2009, ACM COMPUT SURV, V41, DOI 10.1145/1592434.1592436
   Wu X., 2015, COMMUN COMPUT PHYS, V596, P155
   Wu X, 2015, IEEE HI ASS SYS ENGR, P223, DOI 10.1109/HASE.2015.40
   Wu X, 2015, PROCEEDINGS 2015 INTERNATIONAL SYMPOSIUM ON THEORETICAL ASPECTS OF SOFTWARE ENGINEERING, P23, DOI 10.1109/TASE.2015.23
   Zhao SZ, 2014, IEEE ACM T NETWORK, V22, P1150, DOI 10.1109/TNET.2013.2270088
   Zhao SY, 2011, ADV MATER RES-SWITZ, V174, P337, DOI 10.4028/www.scientific.net/AMR.174.337
NR 44
TC 4
Z9 4
U1 0
U2 5
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR 1
PY 2018
VL 154
BP 134
EP 153
DI 10.1016/j.scico.2017.08.007
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA FW1RT
UT WOS:000425077800006
OA hybrid
DA 2024-07-18
ER

PT J
AU Qin, SC
   He, GH
   Chin, WN
   Craciun, F
   He, MD
   Ming, Z
AF Qin, Shengchao
   He, Guanhua
   Chin, Wei-Ngan
   Craciun, Florin
   He, Mengda
   Ming, Zhong
TI Automated specification inference in a combined domain via user-defined
   predicates
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 15th International Workshop on Automated Verification of Critical
   Systems (AVoCS)
CY SEP, 2015
CL Heriot Watt Univ, Edinburgh, SCOTLAND
SP Altran, D RisQ, Formal Methods Europe, Scottish Informat & Comp Sci Alliance
HO Heriot Watt Univ
ID SHAPE-ANALYSIS; VERIFICATION
AB Discovering program specifications automatically for heap-manipulating programs is a challenging task due to the complexity of aliasing and mutability of data structures. This task is further complicated by an expressive domain that combines shape, numerical and bag information. In this paper, we propose a compositional analysis framework that would derive the summary for each method in the expressive abstract domain, independently from its callers. We propose a novel abstraction method with a bi-abduction technique in the combined domain to discover pre-/post-conditions that could not be automatically inferred before. The analysis does not only infer memory safety properties, but also finds relationships between pure and shape domains towards full functional correctness of programs. A prototype of the framework has been implemented and initial experiments have shown that our approach can discover interesting properties for non-trivial programs. (C) 2017 Elsevier B.V. All rights reserved.
C1 [Qin, Shengchao; He, Mengda] Teesside Univ, Sch Comp, Tees Valley TS1 3BX, England.
   [He, Guanhua] Postal Savings Bank China, Beijing, Peoples R China.
   [Chin, Wei-Ngan] Natl Univ Singapore, Sch Comp, Singapore, Singapore.
   [Craciun, Florin] Babes Bolyai Univ, Dept Comp Sci, Cluj Napoca, Romania.
   [Qin, Shengchao; Ming, Zhong] Shenzhen Univ, Coll Comp Sci & Software Engn, Shenzhen, Peoples R China.
C3 University of Teesside; National University of Singapore; Babes Bolyai
   University from Cluj; Shenzhen University
RP Qin, SC (corresponding author), Teesside Univ, Sch Comp, Tees Valley TS1 3BX, England.; Qin, SC; Ming, Z (corresponding author), Shenzhen Univ, Coll Comp Sci & Software Engn, Shenzhen, Peoples R China.
EM s.qin@tees.ac.uk; m.he@tees.ac.uk; mingz@szu.edu.cn
RI Qin, Shengchao/F-4823-2012; Craciun, Florin/AAM-2152-2020
OI Qin, Shengchao/0000-0003-3028-8191; Craciun, Florin/0000-0003-0335-8369
FU EPSRC [EP/G042322/2]; NSFC [61373033, 61672358]; EPSRC [EP/G042322/2]
   Funding Source: UKRI
FX This work was supported in part by the EPSRC project EP/G042322/2 and
   the NSFC project 61373033, 61672358.
CR Alpuente M., 2013, P ACM SIGPLAN 2013 W, P127
   Beyer D, 2007, LECT NOTES COMPUT SC, V4590, P504
   Bouaijani A, 2012, LECT NOTES COMPUT SC, V7148, P1, DOI 10.1007/978-3-642-27940-9_1
   Bouajjani A, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P578
   Bozga Marius, 2003, ACM PEPM 03, V10, P55
   Brotherston J, 2014, LECT NOTES COMPUT SC, V8723, P68, DOI 10.1007/978-3-319-10936-7_5
   Calcagno C, 2011, J ACM, V58, DOI 10.1145/2049697.2049700
   Calcagno C, 2009, LECT NOTES COMPUT SC, V5904, P259, DOI 10.1007/978-3-642-10672-9_19
   Chang BYE, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P247, DOI 10.1145/1328438.1328469
   Chin WN, 2012, SCI COMPUT PROGRAM, V77, P1006, DOI 10.1016/j.scico.2010.07.004
   Chin Wei-Ngan., 2011, Proceedings of the ACM International Conference on Object-Oriented Programming Systems Languages and Applications, P9
   Dillig I, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P567
   Distefano D, 2006, LECT NOTES COMPUT SC, V3920, P287
   Gotsman A, 2006, LECT NOTES COMPUT SC, V4134, P240
   Gulwani S, 2009, ACM SIGPLAN NOTICES, V44, P239, DOI 10.1145/1594834.1480912
   Guo BL, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P256, DOI 10.1145/1250734.1250764
   Hackett B, 2005, ACM SIGPLAN NOTICES, V40, P310, DOI 10.1145/1047659.1040331
   He Guanhua, 2013, INT C FORM ENG METH, P398
   He Guanhua, 2011, THESIS DURHAM U
   Holik Lukes, 2013, Computer Aided Verification. 25th International Conference, CAV 2013. Proceedings. LNCS 8044, P740, DOI 10.1007/978-3-642-39799-8_52
   Ishtiaq S, 2001, ACM SIGPLAN NOTICES, V36, P14, DOI 10.1145/373243.375719
   Jonkers H., 1981, algorithmic languages
   Kuncak V, 2002, ACM SIGPLAN NOTICES, V37, P17, DOI 10.1145/565816.503276
   Lahiri SK, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P171, DOI 10.1145/1328438.1328461
   Le Q.L., 2014, INT C COMP AID VER J, P18
   Le T.C., 2015, ACM SIGPLAN C PROGR
   Lee O., 2011, INT C COMP AID VER
   Magill S, 2008, LECT NOTES COMPUT SC, V5123, P428
   Magill S, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P211, DOI 10.1145/1706299.1706326
   Minh-Thai Trinh, 2013, Programming Languages and Systems. 11th Asian Symposium, APLAS 2013. Proceedings: LNCS 8301, P107, DOI 10.1007/978-3-319-03542-0_8
   Nguyen HH, 2007, LECT NOTES COMPUT SC, V4349, P251
   Popeea C, 2007, LECT NOTES COMPUT SC, V4435, P331
   Qin SC, 2013, J SYMB COMPUT, V50, P386, DOI 10.1016/j.jsc.2012.08.007
   Rakamaric Z, 2007, LECT NOTES COMPUT SC, V4762, P237
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Rival X, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P173, DOI 10.1145/1926385.1926406
   Rosu G, 2012, ACM SIGPLAN NOTICES, V47, P555, DOI 10.1145/2398857.2384656
   Sagiv M, 2002, ACM T PROGR LANG SYS, V24, P217, DOI 10.1145/514188.514190
   Shengchao Qin, 2011, FM 2011: Formal Methods. Proceedings 17th International Symposium on Formal Methods, P369, DOI 10.1007/978-3-642-21437-0_28
   Tuan-Hung Pham, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P656, DOI 10.1007/978-3-642-22110-1_53
   Vafeiadis V, 2009, LECT NOTES COMPUT SC, V5403, P335, DOI 10.1007/978-3-540-93900-9_27
   Yang H, 2008, LECT NOTES COMPUT SC, V5123, P385
NR 42
TC 2
Z9 2
U1 0
U2 9
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 15
PY 2017
VL 148
SI SI
BP 189
EP 212
DI 10.1016/j.scico.2017.05.007
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA FJ8ZB
UT WOS:000413056100010
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Terven, JR
   Córdova-Esparza, DM
AF Terven, Juan R.
   Cordova-Esparza, Diana M.
TI Kin2. A Kinect 2 toolbox for MATLAB
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Kinect 2; MATLAB; Toolbox
ID CALIBRATION; SENSOR
AB This paper introduces Kin2, a Kinect 2 toolbox for MATLAB. This toolbox encapsulates most of the Kinect for Windows SDK 2.0 functionality in a single class with high-level methods. The toolbox is written mostly in C++ with MATLAB Mex functions providing access to color, depth, infrared, and body index frames; coordinate mapping capabilities; real-time six-body tracking with 25 joints and hands states; face and high-definition face processing; and real-time 3D reconstruction. We showed that the performance of a Kin2 application decreases 30% on average with respect to a native C++ application, however, Kin reduces in one order of magnitude the average code length yielding a significant reduction in development time for prototyping and research. (C) 2016 Elsevier B.V. All rights reserved.
C1 [Terven, Juan R.] CICATA IPN, Cerro Blanco 141,Colinas Cimatario, Queretaro, Qro, Mexico.
   [Cordova-Esparza, Diana M.] CIDESI, Ave Playa Pie Cuesta 702, Queretaro, Qro, Mexico.
C3 CIDESI - Centro de Ingenieria y Desarrollo Industrial
RP Terven, JR (corresponding author), CICATA IPN, Cerro Blanco 141,Colinas Cimatario, Queretaro, Qro, Mexico.
EM j.r.terven@ieee.org; diana_mce@hotmail.com
RI Terven, Juan Ramon/IAN-0006-2023; Cordova, Diana/GQZ-7591-2022
OI Cordova, Diana/0000-0002-5657-7752; Terven, Juan/0000-0001-6662-0390
FU CONACYT [492993/279855, 300097/290941]
FX This work was supported by CONACYT through a PhD scholarship grant
   number 492993/279855 and a Postdoctoral scholarship grant number
   300097/290941.
CR [Anonymous], P UIST
   BROWN DC, 1971, PHOTOGRAMM ENG, V37, P855
   Dutta T, 2012, APPL ERGON, V43, P645, DOI 10.1016/j.apergo.2011.09.011
   Han JG, 2013, IEEE T CYBERNETICS, V43, P1318, DOI 10.1109/TCYB.2013.2265378
   Jones Brett., 2014, Proceedings of the 27th Annual ACM Symposium on User Interface Software and Technology. UIST'14, P637, DOI DOI 10.1145/10.1145/2642918.2642918.26473832647383
   Levenberg K., METHOD SOLUTION CERT
   MARQUARDT DW, 1963, J SOC IND APPL MATH, V11, P431, DOI 10.1137/0111030
   Microsoft, 2016, HIGHDETAILFACEPOINTS
   Network M.D., 2016, HIGH DEF FAC TRACK
   Network M.D., 2016, FACESHAPEANIMATIONS
   Newcombe RA, 2011, INT SYM MIX AUGMENT, P127, DOI 10.1109/ISMAR.2011.6092378
   Pagliari D, 2015, SENSORS-BASEL, V15, P27569, DOI 10.3390/s151127569
   Ren Z., 2011, P 19 ACM INT C MULT, P759
   Smisek J., 2013, 3D with Kinect Consumer Depth Cameras for Computer Vision, P3, DOI [DOI 10.1007/978-1-4471-4640-7_1, 10.1007/978-1-4471-4640-7-1, DOI 10.1007/978-1-4471-4640-7-1]
   Zhang ZY, 2012, IEEE MULTIMEDIA, V19, P4, DOI 10.1109/MMUL.2012.24
NR 15
TC 35
Z9 44
U1 1
U2 22
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 15
PY 2016
VL 130
BP 97
EP 106
DI 10.1016/j.scico.2016.05.009
PG 10
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DY1MQ
UT WOS:000384859500006
OA Bronze
DA 2024-07-18
ER

PT J
AU Raspopovic, M
   Cvetanovic, S
   Stanojevic, D
   Opacic, M
AF Raspopovic, Miroslava
   Cvetanovic, Svetlana
   Stanojevic, Dusan
   Opacic, Mateja
TI Software architecture for integration of institutional and social
   learning environments
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Software architecture; e-Learning; Service oriented architecture
ID DESIGN
AB As technology continues to evolve and develop, requirements for effective teaching and learning methodologies are likewise growing and changing. As a result of this trend, Learning Management Systems (LMSs) are usually adopted in certain institutions and sometimes in order to take advantage of technological developments. However, these LMSs are adapted to a certain degree and may restrain users with its set of tools and functionalities. New requirements imply the need for integration with third-party systems and tools which are often used to increase the efficacy of learning. Properly implemented technology can serve as a tool to create new opportunities for learning systems. This work focuses on the design and technological requirements of the software architecture for integrating an institutional e-learning system, an educational management system, and a social learning environment. This work proposes a software architecture that supports functionalities promoting effective teaching and learning, while giving an overview of the diversity of technologies and tools used in the proposed architecture. (C) 2016 Elsevier B.V. All rights reserved.
C1 [Raspopovic, Miroslava; Cvetanovic, Svetlana; Stanojevic, Dusan] Belgrade Metropolitan Univ, Fac Informat Technol, Tadeusa Koscuska 63, Belgrade 11000, Serbia.
   [Opacic, Mateja] Seavus Doo, Takovska 45, Belgrade 11000, Serbia.
RP Raspopovic, M (corresponding author), Belgrade Metropolitan Univ, Fac Informat Technol, Tadeusa Koscuska 63, Belgrade 11000, Serbia.
EM miroslava.raspopovic@metropolitan.ac.rs;
   svetlana.cvetanovic@metropolitan.ac.rs;
   dusan.stanojevic@metropolitan.ac.rs; mateja.fit@gmail.com
RI Raspopović Milić, Miroslava/IAN-5545-2023; Raspopovic,
   Miroslava/J-1808-2019
OI Raspopović Milić, Miroslava/0000-0003-2158-8707; 
FU Serbian Ministry of Education, Science and Technological Development
   [III44006]
FX The work presented here was supported by the Serbian Ministry of
   Education, Science and Technological Development (project III44006).
CR AlMegren A., 2013, EUROPEAN J OPEN DIST, V2013, P115
   AMES C, 1992, J EDUC PSYCHOL, V84, P261, DOI 10.1037/0022-0663.84.3.261
   [Anonymous], AAEE 2012
   Blinco K., 2009, ADOPTION SERVICE ORI
   Casquero O, 2010, INTERACT LEARN ENVIR, V18, P293, DOI 10.1080/10494820.2010.500553
   Chun AHW, 2004, LECT NOTES COMPUT SC, V3143, P11
   Conde MA, 2014, SCI COMPUT PROGRAM, V88, P41, DOI 10.1016/j.scico.2013.10.012
   Coppeto T., 2012, OSID OSID PACKAGE DE
   Cvetanovic S., 2012, 3 INT C ELEARNING BE, P108
   García-Peñalvo FJ, 2011, J UNIVERS COMPUT SCI, V17, P1222
   Guduric N., 2013, P 4 C E LEARN, P121
   Henderson A, 2006, NURS EDUC TODAY, V26, P564, DOI 10.1016/j.nedt.2006.01.012
   IMS, 2013, IMS GLOB LEARN INF S
   Junco R, 2012, COMPUT EDUC, V58, P162, DOI 10.1016/j.compedu.2011.08.004
   Kolmos A., 1996, European Journal of Engineering Education, V21, P141, DOI 10.1080/03043799608923397
   Koschmann T., 1996, CSCL, P1
   Dodero JM, 2008, IEEE T LEARN TECHNOL, V1, P190, DOI 10.1109/TLT.2008.21
   McGreal R., 2004, INT J INSTR TECHNOL, V1
   McLoughlin C., 2010, AUSTRALAS J ED TECHN, V26
   Navarro A., 2014, J ED TECHNOL SOC, V17
   Nejdl W., 2002, Proceedings of the Eleventh International Conference on World Wide Web, P604, DOI DOI 10.1145/511446.511525
   Offermann P, 2009, 2009 13TH ENTERPRISE DISTRIBUTED OBJECT COMPUTING CONFERENCE WORKSHOPS (EDOCW 2009), P352, DOI 10.1109/EDOCW.2009.5331973
   Raspopovic M, 2016, INT REV RES OPEN DIS, V17, P123
   Richards G, 2002, P IS2002 INF SCI IT
   Savery JR., 1995, Educational Technology, V35, P31
   Valjataga T, 2010, WEB 2 0 BASED E LEAR, P85
   Wang QY, 2009, COMPUT EDUC, V53, P1138, DOI 10.1016/j.compedu.2009.05.023
   Wilson S., 2008, MASH UP PERS LEARN E, P25
   Xu ZF, 2003, CCECE 2003: CANADIAN CONFERENCE ON ELECTRICAL AND COMPUTER ENGINEERING, VOLS 1-3, PROCEEDINGS, P943
NR 29
TC 3
Z9 4
U1 0
U2 12
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 1
PY 2016
VL 129
SI SI
BP 92
EP 102
DI 10.1016/j.scico.2016.07.001
PG 11
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Social Science Citation Index (SSCI)
SC Computer Science
GA DW0CM
UT WOS:000383308500007
OA hybrid
DA 2024-07-18
ER

PT J
AU González-Torres, A
   García-Peñalvo, FJ
   Therón-Sánchez, R
   Colomo-Palacios, R
AF Gonzalez-Torres, Antonio
   Garcia-Penalvo, Francisco J.
   Theron-Sanchez, Roberto
   Colomo-Palacios, Ricardo
TI Knowledge discovery in software teams by means of evolutionary visual
   software analytics
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Visual Analytics; Software Evolution; Software Evolution Visualization;
   Visual Software Analytics; Evolutionary Visual Software Analytics
ID SERVICES
AB The day-to-day management of human resources that occurs during the development and maintenance process of software systems is a responsibility of project leads and managers, who usually perform such a task empirically. Moreover, rotation and distributed software development affect the establishment of long-term relationships between project managers and software projects, as well as between project managers and companies. It is also common for project leads and managers to face decision-making on human resources without the necessary prior knowledge. In this context, the application of visual analytics to software evolution supports software project leads and managers using analysis methods and a shared knowledge space for decision-making by, means of visualization and interaction techniques. This approach offers the possibility of determining which programmer has led a project or contributed more to the development and maintenance of a software system in terms of revisions. Moreover, this approach helps to elucidate both the software items(1) that have been changed in common by a group of programmers and who has changed what software items. With this information, software project leads and managers can make decisions regarding task assignment to developers and staff substitutions due to unexpected situations or staff turnover. Consequently, this research is aimed at supporting software practitioners in tasks related to human resources management through the application of Visual Analytics to Software Evolution. (C) 2015 Elsevier B.V. All rights reserved.
C1 [Gonzalez-Torres, Antonio] ULACIT, Sch Engn, San Jose, Costa Rica.
   [Garcia-Penalvo, Francisco J.; Theron-Sanchez, Roberto] Univ Salamanca, Dept Comp Sci, E-37008 Salamanca, Spain.
   [Colomo-Palacios, Ricardo] Ostfold Univ Coll, Fac Comp Sci, Halden, Norway.
C3 Universidad Latinoamericana de Ciencia y Tecnologia (ULACIT); University
   of Salamanca; Ostfold University College
RP Colomo-Palacios, R (corresponding author), Ostfold Univ Coll, Fac Comp Sci, Halden, Norway.
EM rcolomo@gmail.com
RI Theron, Roberto/B-5315-2008; Gonzalez-Torres, Antonio/AAW-6479-2020;
   GARCÍA-PEÑALVO, Francisco José/D-5445-2013
OI Theron, Roberto/0000-0001-6739-8875; Gonzalez-Torres,
   Antonio/0000-0001-5427-0637; GARCÍA-PEÑALVO, Francisco
   José/0000-0001-9987-5584; Colomo-Palacios, Ricardo/0000-0002-1555-9726
FU Ministry of Science and Technology (MICITT) of Costa Rica [GF-425-13]
FX This work was supported by the Ministry of Science and Technology
   (MICITT) of Costa Rica, grant number GF-425-13.
CR Andrienko G, 2007, CMV 2007: FIFTH INTERNATIONAL CONFERENCE ON COORDINATED & MULTIPLE VIEWS IN EXPLORATORY VISUALIZATION, PROCEEDINGS, P72, DOI 10.1109/CMV.2007.4
   Rodríguez-García MA, 2014, FUTURE GENER COMP SY, V32, P295, DOI 10.1016/j.future.2013.08.003
   [Anonymous], 1994, ACM Transactions on Computer-Human Interaction, DOI [10.1145/180171.180173, DOI 10.1145/180171.180173]
   [Anonymous], 2007, Software Visualization: Visualizing the Structure, Behavior, and Evolution of Software
   Bailey R.W., 1989, HUMAN PERFORMANCE EN, V2nd
   Beydoun G, 2014, INFORM SYST, V46, P45, DOI 10.1016/j.is.2014.05.002
   Boukhelifa N., 2003, Information Visualization, V2, P258, DOI 10.1057/palgrave.ivs.9500057
   Card S K., 1999, READINGS INFORM VISU
   Casado-Lumbreras C, 2014, J GLOB INF TECH MAN, V17, P267, DOI 10.1080/1097198X.2014.978626
   Chi EH, 2000, IEEE SYMPOSIUM ON INFORMATION VISUALIZATION 2000, P69, DOI 10.1109/INFVIS.2000.885092
   Colomo-Palacios R, 2014, SOFTWARE QUAL J, V22, P3, DOI 10.1007/s11219-012-9191-x
   Colomo-Palacios R, 2012, J UNIVERS COMPUT SCI, V18, P2646
   Colomo-Palacios R, 2012, J GLOB INF TECH MAN, V15, P30, DOI 10.1080/1097198X.2012.10845617
   Drigas A, 2011, COMPUT HUM BEHAV, V27, P1416, DOI 10.1016/j.chb.2010.07.045
   García J, 2011, J UNIVERS COMPUT SCI, V17, P1299
   Aguilar DAG, 2009, J UNIVERS COMPUT SCI, V15, P1526
   Gómez-Aguilar DA, 2014, PROF INFORM, V23, P236, DOI 10.3145/epi.2014.may.03
   Gonzalez A, 2009, IWPSE-EVOL 09: ERCIM WORKSHOP ON SOFTWARE EVOLUTION (EVOL) AND INTERNATIONAL WORKSHOP ON PRINCIPLES OF SOFTWARE EVOLUTION (IWPSE), P25
   Gonzalez-Torres A., 2011, 2011 IEEE 27th International Conference on Software Maintenance, P594, DOI 10.1109/ICSM.2011.6080838
   Gonzalez-Torres A., 2015, EVOLUTIONARY VISUAL
   González-Torres A, 2013, COMPUT HUM BEHAV, V29, P486, DOI 10.1016/j.chb.2012.01.013
   Gotz D., 2014, IEEE T VIS COMPUT GR, V99, P1
   Hendler J, 2008, FOUND ARTIF INTELL, P821, DOI 10.1016/S1574-6526(07)03021-0
   Hollender N, 2010, COMPUT HUM BEHAV, V26, P1278, DOI 10.1016/j.chb.2010.05.031
   Jermakovics A, 2011, PROCEEDINGS OF THE 4TH INTERNATIONAL WORKSHOP ON COOPERATIVE AND HUMAN ASPECTS OF SOFTWARE ENGINEERING (CHASE'11), P24
   García-Peñalvo FJ, 2012, EXPERT SYST APPL, V39, P11468, DOI 10.1016/j.eswa.2012.04.009
   Kagdi H, 2007, J SOFTW MAINT EVOL-R, V19, P77, DOI 10.1002/smr.344
   Khan SU, 2014, IET SOFTW, V8, P161, DOI 10.1049/iet-sen.2013.0012
   Mahyar N, 2014, IEEE T VIS COMPUT GR, V20, P1633, DOI 10.1109/TVCG.2014.2346573
   Misra S, 2013, TEH VJESN, V20, P525
   Münch J, 2004, J SYST SOFTWARE, V70, P3, DOI 10.1016/S0164-1212(02)00138-3
   North C, 2000, INT J HUM-COMPUT ST, V53, P715, DOI 10.1006/ijhc.2000.0418
   Omoronyia I, 2010, SOFTWARE PRACT EXPER, V40, P1107, DOI 10.1002/spe.1005
   Peck R., 2008, Introduction to statistics and data analysis
   Perer A, 2013, IEEE T VIS COMPUT GR, V19, P1095, DOI 10.1109/TVCG.2012.322
   Preece J., 2015, INTERACTION DESIGN H
   Roberts JC, 2007, CMV 2007: FIFTH INTERNATIONAL CONFERENCE ON COORDINATED & MULTIPLE VIEWS IN EXPLORATORY VISUALIZATION, PROCEEDINGS, P61, DOI 10.1109/CMV.2007.20
   Rodríguez-García MA, 2014, KNOWL-BASED SYST, V56, P15, DOI 10.1016/j.knosys.2013.10.006
   Shneiderman B, 1996, IEEE SYMPOSIUM ON VISUAL LANGUAGES, PROCEEDINGS, P336, DOI 10.1109/VL.1996.545307
   Takatalo J, 2008, COMPUT HUM BEHAV, V24, P1, DOI 10.1016/j.chb.2006.11.003
   Telea A, 2011, COMPUTATION STAT, V26, P635, DOI 10.1007/s00180-011-0248-2
   van Wijk JJ, 2005, IEEE VISUALIZATION 2005, PROCEEDINGS, P79
NR 42
TC 9
Z9 10
U1 0
U2 25
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 1
PY 2016
VL 121
SI SI
BP 55
EP 74
DI 10.1016/j.scico.2015.09.005
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DH6YU
UT WOS:000372938800005
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Figueroa, I
   Tabareau, N
   Tanter, É
AF Figueroa, Ismael
   Tabareau, Nicolas
   Tanter, Eric
TI Effect capabilities for Haskell: Taming effect interference in monadic
   programming
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Monads; Capabilities; Computational effects; Tagged monads
AB Computational effects complicate the tasks of reasoning about and maintaining software, due to the many kinds of interferences that can occur. While different proposals have been formulated to alleviate the fragility and burden of dealing with specific effects, such as state or exceptions, there is no prevalent robust mechanism that addresses the general interference issue. Building upon the idea of capability-based security, we propose effect capabilities as an effective and flexible manner to control monadic effects and their interferences. Capabilities can be selectively shared between modules to establish secure effect-centric coordination. We further refine capabilities with type-based permission lattices to allow fine-grained decomposition of authority. We provide an implementation of effect capabilities in Haskell, using type classes to establish a way to statically share capabilities between modules, as well as to check proper access permissions to effects at compile time. We first exemplify how to tame effect interferences using effect capabilities by treating state and exceptions. Then we focus on taming I/O by proposing a fine-grained lattice of I/O permissions based on the current classification of its operations. Finally, we show that integrating effect capabilities with modern tag-based monadic mechanisms provides a practical, modular and safe mechanism for monadic programming in Haskell. (C) 2015 Elsevier B.V. All rights reserved.
C1 [Figueroa, Ismael] Pontificia Univ Catolica Valparaiso, Escuela Ingn Informat, Valparaiso, Chile.
   [Tabareau, Nicolas] INRIA, Ascola Grp, Nantes, France.
   [Tanter, Eric] Univ Chile, Comp Sci Dept DCC, PLEIAD Lab, Santiago, Chile.
C3 Pontificia Universidad Catolica de Valparaiso; Inria; Universidad de
   Chile
RP Figueroa, I (corresponding author), Pontificia Univ Catolica Valparaiso, Escuela Ingn Informat, Valparaiso, Chile.
EM ismael.figueroa@pucv.cl; nicolas.tabareau@inria.fr;
   etanter@dcc.uchile.cl
RI Figueroa, Ismael/O-6048-2017; Figueroa, Ismael/JCD-9073-2023; Tanter,
   Eric/A-7955-2008
OI Figueroa, Ismael/0000-0003-3661-4963; Tanter, Eric/0000-0002-7359-890X;
   tabareau, nicolas/0000-0003-3366-2273
CR [Anonymous], 1992, 19th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, DOI DOI 10.1145/143165.143169
   Brady E, 2013, ACM SIGPLAN NOTICES, V48, P133, DOI [10.1145/2500365.2500581, 10.1145/2544174.2500581]
   Cacho Nelio., 2008, AOSD 08 P 7 INT C AS, P72
   Chakravarty MMT, 2005, ACM SIGPLAN NOTICES, V40, P241, DOI 10.1145/1090189.1086397
   Chakravarty MMT, 2005, ACM SIGPLAN NOTICES, V40, P1, DOI 10.1145/1047659.1040306
   Coelho R, 2008, LECT NOTES COMPUT SC, V5142, P207, DOI 10.1007/978-3-540-70592-5_10
   Delaware B., 2013, P 18 ACM SIGPLAN C F
   Harper Robert, 2012, EXCEPTIONS ARE SHARE
   Harper Robert, 2012, Practical Foundations for Programming Languages, DOI DOI 10.1017/CBO9781139342131
   Hughes J, 2004, J FUNCT PROGRAM, V14, P489, DOI 10.1017/S0956796802004471
   Jones MP, 2000, LECT NOTES COMPUT SC, V1782, P230
   Kiselyov O, 2013, ACM SIGPLAN NOTICES, V48, P59, DOI 10.1145/2503778.2503791
   Leijen D, 1999, USENIX ASSOCIATION PROCEEDINGS OF THE 2ND CONFERENCE ON DOMAIN-SPECIFIC LANGUAGES (DSL'99), P109, DOI 10.1145/331963.331977
   LEVY H.M., 1984, CAPABILITY BASED COM, V12
   Liang Sheng, 1995, P 22 ACM SIGPLAN SIG, P333, DOI DOI 10.1145/199448.199528
   McBride C, 2002, J FUNCT PROGRAM, V12, P375, DOI 10.1017/S0956796802004355
   Miller M.S., 2006, Robust Composition: Towards a Unified Approach to Access Control and Concurrency Control
   MOGGI E, 1991, INFORM COMPUT, V93, P55, DOI 10.1016/0890-5401(91)90052-4
   Orchard D, 2014, ACM SIGPLAN NOTICES, V49, P13, DOI [10.1145/2775050.2633368, 10.1145/2633357.2633368]
   Piponi D., 2010, TAGGING MONAD TRANSF
   Saltzer JeromeH., 1975, PROTECTION INFORM CO
   Sangiorgi D., 2003, PI CALCULUS THEORY M
   Schrijvers T, 2011, ICFP 11 - PROCEEDINGS OF THE 2011 ACM SIGPLAN: INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P32
   Sheard T, 2002, ACM SIGPLAN NOTICES, V37, P60, DOI 10.1145/636517.636528
   Snyder Mark, 2010, Trends in Functional Programming. 11th International Symposium (TFP 2010). Revised Selected Papers, P198, DOI 10.1007/978-3-642-22941-1_13
   Swierstra W, 2008, J FUNCT PROGRAM, V18, P423, DOI 10.1017/S0956796808006758
   TALPIN JP, 1994, INFORM COMPUT, V111, P245, DOI 10.1006/inco.1994.1046
   Tanter É, 2014, SCI COMPUT PROGRAM, V80, P311, DOI 10.1016/j.scico.2013.09.002
   Tanter É, 2009, ACM SIGPLAN NOTICES, V44, P3, DOI 10.1145/1837513.1640137
   Tanter Eric, 2010, P 9 ACM INT C ASP OR, P37, DOI DOI 10.1145/1739230.1739236
   Terei D, 2012, ACM SIGPLAN NOTICES, V47, P137, DOI 10.1145/2430532.2364524
   Wadler P, 1999, ACM SIGPLAN NOTICES, V34, P63, DOI 10.1145/291251.289429
   Wadler P, 1997, ACM COMPUT SURV, V29, P240, DOI 10.1145/262009.262011
NR 33
TC 3
Z9 3
U1 0
U2 5
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD APR 1
PY 2016
VL 119
BP 3
EP 30
DI 10.1016/j.scico.2015.11.010
PG 28
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DG9FS
UT WOS:000372388800002
OA Bronze
DA 2024-07-18
ER

PT J
AU Salas-Zárate, MD
   Alor-Hernández, G
   Valencia-García, R
   Rodríguez-Mazahua, L
   Rodríguez-González, A
   Cuadrado, JLL
AF del Pilar Salas-Zarate, Maria
   Alor-Hernandez, Giner
   Valencia-Garcia, Rafael
   Rodriguez-Mazahua, Lisbeth
   Rodriguez-Gonzalez, Alejandro
   Lopez Cuadrado, Jose Luis
TI Analyzing best practices on Web development frameworks: The lift
   approach
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Best practices; Lift; Scala; Web frameworks
ID CLINICAL-DATA; SCALA
AB Choosing the Web framework that best fits the requirements is not an easy task for developers. Several frameworks now exist to develop Web applications, such as Struts, JSF, Ruby on Rails, Grails, CakePHP, Django, and Catalyst. However, Lift is a relatively new framework that emerged in 2007 for the Scala programming language and which promises a great number of advantages and additional features. Companies such as Siemens(C) and IBM (R), as well as social networks such as Twitter and Foursquare (R), have now begun to develop their applications by using Scala and Lift. Best practices are activities, technical or important issues identified by users in a specific context, and which have rendered excellent service and are expected to achieve similar results in similar situations. Each framework has its own best practices whose aim is to facilitate the development of Web applications. However, there is no current comparative analysis that identifies the best practices for Web frameworks. Thus, as its salient contribution, this paper identifies a set of best practices for Web frameworks. Afterwards, these best practices were analyzed and discussed in terms of developing Lift-based Web applications. The identification of these best practices would allow developers to construct more interactive and efficient Liftbased Web applications, integrating features of Web 2.0 technologies with less effort and exploiting the frameworks' benefits. In addition, this paper contains a comparative analysis with Web frameworks such as JSF, Struts, CakePHP, Ruby on Rails, Lift, Django, and Catalyst. Finally, as proof of concept, a set of Lift-based Web applications were developed for this paper by applying best practices such as actors, lazy loading, Comet support, SiteMap, Wiring, HyperText Markup Language, version 5 (HTML5) support, and parallel rendering. (C) 2015 Elsevier B.V. All rights reserved.
C1 [del Pilar Salas-Zarate, Maria; Valencia-Garcia, Rafael] Univ Murcia, Dept Informat & Sistemas, E-30100 Murcia, Spain.
   [Alor-Hernandez, Giner; Rodriguez-Mazahua, Lisbeth] Inst Tecnol Orizaba, Div Res & Postgrad Studies, Orizaba, Mexico.
   [Rodriguez-Gonzalez, Alejandro] Univ Politecn Madrid, Ctr Plant Biotechnol & Genom, Bioinformat, Madrid, Spain.
   [Lopez Cuadrado, Jose Luis] Univ Carlos III Madrid, Dept Comp Sci, E-28903 Getafe, Spain.
   [Rodriguez-Gonzalez, Alejandro] Univ Int La Rioja, Sch Engn, Dept Engn, La Rioja, Spain.
C3 University of Murcia; Universidad Politecnica de Madrid; Centro de
   Investigacion en Biotecnologia Genomica de Plantas (CBGP); Universidad
   Carlos III de Madrid; Universidad Internacional de La Rioja (UNIR)
RP Alor-Hernández, G (corresponding author), Inst Tecnol Orizaba, Div Res & Postgrad Studies, Orizaba, Mexico.
EM mariapilar.salas@um.es; galor@itorizaba.edu.mx; valencia@um.es;
   lrodriguez@itorizaba.edu.mx; alejandro.rodriguezg@upm.es;
   jllopez@inf.uc3m.es
RI González, Alejandro Rodríguez/AAT-2369-2020; Valencia-Garci­a,
   Rafael/L-4759-2014; Cuadrado, Jose Luis Lopez/ABG-7821-2020;
   Alor-Hernandez, Giner/U-9203-2017; Rodriguez, Lisbeth/O-1484-2015;
   Salas-Zarate, Maria del Pilar/N-5583-2017
OI Cuadrado, Jose Luis Lopez/0000-0001-6115-0641; Alor-Hernandez,
   Giner/0000-0003-3296-0981; Rodriguez, Lisbeth/0000-0002-9861-3993;
   Salas-Zarate, Maria del Pilar/0000-0003-1818-3434
FU Tecnologico Nacional de Mexico; National Council of Science and
   Technology, Mexico (CONACYT); Public Education Secretary (SEP) through
   PROMEP; Isaac Feral Programme (UPM); UNIR Research; Spanish Ministry of
   Industry, Tourism, and Commerce [IPT-090000-2010-07]; Spanish Ministry
   of Science and Innovation [TIN2011-27405]
FX This work was supported by the Tecnologico Nacional de Mexico.
   Additionally, the work was sponsored by the National Council of Science
   and Technology, Mexico (CONACYT) and the Public Education Secretary
   (SEP) through PROMEP. Alejandro Rodriguez Gonzalez's work is supported
   by Isaac Feral Programme (UPM) and by UNIR Research Support Strategy
   2013-2015, under the CYBERSECURITIS.es Research Group
   [http://research.uninnetl. The Spanish Ministry of Industry, Tourism,
   and Commerce supported this research paper under the project TRAZAMED
   (IPT-090000-2010-07), and the Spanish Ministry of Science and Innovation
   favored it under the project FLORA (TIN2011-27405).
CR Agarwal P., 2004, JAVAWORLD       1113
   Alvarez-Sabucedo LM, 2009, SOFTWARE PRACT EXPER, V39, P299, DOI 10.1002/spe.901
   [Anonymous], 1993, Usability Engineering
   [Anonymous], 2006, INT LOC MARK REQ
   [Anonymous], 2009, BUILD COMET APPL USI
   [Anonymous], 2013, TEST DJANG 1
   [Anonymous], IEEE GLOB TEL C MIAM
   Assembla Lift, 2012, VIEW 1
   Bargas-Avila JA, 2007, INTERACT COMPUT, V19, P330, DOI 10.1016/j.intcom.2007.01.003
   Biermann M, 2014, COMPUT METH PROG BIO, V114, DOI 10.1016/j.cmpb.2014.01.007
   Bosl W, 2013, INTERACT J MED RES, V2, P11, DOI 10.2196/ijmr.2480
   Bozdag E, 2009, J WEB ENG, V8, P287
   Brabrand C., 2000, World Wide Web, V3, P205, DOI 10.1023/A:1018772405468
   Miyoshi NSB, 2013, BMC BIOINFORMATICS, V14, DOI 10.1186/1471-2105-14-180
   Brandon Gaille, 9 DEV STAT TRENDS HT
   Chen-Becker D., 2009, STARTING WITH LIFT
   Chen-Becker Derek., 2009, The Definitive Guide to Lift: A Scala-based Web Framework
   Chiusano P., 2014, FUNCTIONAL PROGRAMMI
   Dallaway R., 2013, LIFT COOKBOOK
   Dallaway R., 2014, MODULES
   Dodani M. H., 2003, J OBJECT TECHNOL, V2, P65
   Eckstein R., 2002, JAVA ENTERPRISE BEST
   Fiedler T., 2011, ENTWICKLUNG WEB APPL
   Ford N., 2003, ART JAVA WEB DEV STR
   Geary D., 2011, JSF 2 FU BEST PRACTI
   Ghosh D, 2009, IEEE INTERNET COMPUT, V13, P88, DOI 10.1109/MIC.2009.68
   Golding D., 2008, BEGINNING CAKEPHP NO
   Gray M., 2010, CATALYST BEST PRACTI
   Harper S, 2012, WORLD WIDE WEB, V15, P61, DOI 10.1007/s11280-011-0130-8
   Hightower R., 2004, JAKARTA STRUTS LIVE
   Horovitz A., 2013, MORE IOS6 DEV, P481
   Jones C., 2009, Software Engineering Best Practices, V1
   Kipyegen Noela J., 2013, International Journal of Computer Science Issues, V10, P223
   Klehr M., ETHERPAD
   Lancor L., 2013, PROC 44 ACM TECH S C, P519
   O'Reilly, 2007, PRINCIPLES BEST PRAC
   Offutt J., 2002, IEEE SOFTW, V19
   Paredes-Valverde M.A., 2013, SOFTW PRACT EXP
   Pella P., 2014, BMC BIOINFORMATICS, V15, P1
   Perrett T., 2011, LIFT ACTION SIMPLY F
   Pollak D., 2009, BEGINNING SCALA
   Pollak D., D POLLAK LIFT FRAMEW
   Pollak D., 2010, SIMPLY LIFT
   Pollak D., 2011, GEECON 16 MAY
   Pollak D, 2010, IEEE INTERNET COMPUT, V14, P88, DOI 10.1109/MIC.2010.61
   Pytel C., 2010, RAILS ANTIPATTERNS B
   Quadri SMK., 2010, International Journal of Computer Applications, V6, P7, DOI [10.5120/1343-1448, DOI 10.5120/1343-1448]
   Rao V., 2010, SCALA SERVER FACES
   Richards G, 2010, ACM SIGPLAN NOTICES, V45, P1, DOI 10.1145/1809028.1806598
   Richardson Chris., 2008, Queue, V6, P28, DOI DOI 10.1145/1394127.1394140
   Santelices RA, 2001, SOFTWARE PRACT EXPER, V31, P1091, DOI 10.1002/spe.403
   Shenoy S., 2004, STRUTS SURVIVAL GUID
   Smith C.U., 2003, Int. CMG Conference, P83
   Stout G. A., 2001, TESTING WEBSITE BEST, P3
   Uhlmann T., INSTANT LIFE WEB APP
   Vieira K, 2009, WORLD WIDE WEB, V12, P171, DOI 10.1007/s11280-009-0059-3
   Vikas H., 2009, 4 INDICTHREADS COM C
   Waller MP, 2013, J COMPUT CHEM, V34, P1420, DOI 10.1002/jcc.23272
   Wampler D, 2011, IEEE INTERNET COMPUT, V15, P87, DOI 10.1109/MIC.2011.123
   Wampler Dean., 2009, Programming Scala: Scalability= Functional Programming+Objects
   Wang J.-W., 2009, COMPUT ENG DES, V13, P059
   Wu Kehe, 2013, 2013 Fifth International Conference on Computational and Information Sciences (ICCIS 2013), P555, DOI 10.1109/ICCIS.2013.154
   Yang K, 2012, WORLD WIDE WEB, V15, P409, DOI 10.1007/s11280-011-0138-0
NR 63
TC 19
Z9 22
U1 1
U2 41
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAY 1
PY 2015
VL 102
BP 1
EP 19
DI 10.1016/j.scico.2014.12.004
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CE7UO
UT WOS:000352047500001
OA Bronze
DA 2024-07-18
ER

PT J
AU Amálio, N
   Glodt, C
AF Amalio, Nuno
   Glodt, Christian
TI A tool for visual and formal modelling of software designs
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Visual modelling languages; MDE; Formal methods; Tool-support; Empirical
   evaluation
ID UML; TRANSFORMATION; VERIFICATION; SEMANTICS
AB Diagrams are ubiquitous in software engineering and widely used for software modelling. The visual contract language (VCL) enables an approach to software design modelling that is entirely graphical and has a mathematical basis. VCL's main novelties lie in its capacity to describe predicates visually and in its graphical front-end to formal modelling. VCL is brought to life in the visual contract builder (VCB) tool presented in this paper. VCB provides diagram editors for the whole VCL suite, it type-checks diagrams and generates Z formal specifications from them; the Z specification enables formal verification and validation using Z theorem provers. The paper evaluates VCB based on the results of a survey carried out in the context of a controlled experiment. The work presented here is a contribution to the area of visual design modelling: the paper presents a state of the art tool supporting the novel VCL language and concrete empirical results on the usefulness and effectiveness of tool and language in particular, suggesting benefits of visual modelling in general. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Amalio, Nuno] Univ Autonoma Madrid, Escuela Politecn Super Engn Informat, E-28049 Madrid, Spain.
   [Glodt, Christian] Univ Luxembourg, Fac Sci Technol & Commun, L-1359 Luxembourg, Luxembourg.
C3 Autonomous University of Madrid; University of Luxembourg
RP Amálio, N (corresponding author), Univ Autonoma Madrid, Escuela Politecn Super Engn Informat, E-28049 Madrid, Spain.
EM nuno.rodrigues@uam.es; christian.glodt@uni.lu
OI Rodrigues Amalio, Nuno/0000-0003-4762-9968; Amalio,
   Nuno/0000-0001-8751-5039
FU University of Luxembourg
FX Most of the research work presented in this paper was done during
   Amalio's post-doctoral research work at the University of Luxembourg. We
   would like to thank Professor Pierre Kelsen of University of Luxembourg
   for his support of both VCL and VCB. The empirical evaluation presented
   in this paper was done in the context of a controlled experiment to
   evaluate VCL against UML and OCL, which was done in collaboration with
   professor Lionel Briand of University of Luxembourg. Pierre Kelsen and
   Lionel Briand financed the VCL vs UML+OCL controlled experiment, which
   made the empirical evaluation presented here possible; we are grateful
   to both of them. We would like to thank all participants of the VCL vs
   UML+OCL controlled experiment at the Faculty of Sciences of the
   University of Lisbon (FCUL), Faculty of Sciences and Technology of the
   New University of Lisbon (FCT/UNL), University of Luxembourg and
   University of York (UY). Several people at the host institutions made
   the controlled experiment possible, namely, Isabel Nunes (FCUL), Joao
   Aralijo (FCI'/UNL), Fiona Polack (UY), Antonia Lopes (FCUL) and Ana
   Moreira (FCT/UNL).
CR Abrial Jean-Raymond., 1996, B BOOK ASSIGNING MEA
   Amálio N, 2005, LECT NOTES COMPUT SC, V3455, P262
   Amálio N, 2004, LECT NOTES COMPUT SC, V3308, P418
   Amalio Nuno, 2011, FM 2011: Formal Methods. Proceedings 17th International Symposium on Formal Methods, P149, DOI 10.1007/978-3-642-21437-0_13
   Amalio Nuno, 2010, Proceedings 2010 IEEE Symposium on Visual Languages and Human-Centric Computing (VL/HCC 2010), P227, DOI 10.1109/VLHCC.2010.39
   Amalio N, 2012, TRLASSY1209 U LUX
   Amalio N., 2007, THESIS U YORK
   Amalio N., 2012, TRLASSY1210 U LUX
   Amalio N, 2011, TRLASSY1105 U LUX
   Amalio N, 2006, SOFTWARE SPECIFICATI, P81
   Amalio N, 2013, TRLASSY1305 U LUX
   Amalio N, 2010, LECT NOTES COMPUT SC, V6210, P151
   Amálio N, 2007, ELECTRON NOTES THEOR, V191, P3, DOI 10.1016/j.entcs.2007.09.002
   [Anonymous], 1992, The Z Notation
   Baskerville R, 2004, INFORM SYST J, V14, P237, DOI 10.1111/j.1365-2575.2004.00171.x
   Bobkowska A, 2005, FRONT ARTIF INTEL AP, V130, P75
   Booch G., 2007, Object-Oriented Analysis and Design with Applications, Vthird
   Booch Grady, 1999, UNIFIED MODELING LAN, DOI DOI 10.1007/3-540-40011-7_10
   BOTTONI P, 2001, LNCS, V2185, P257
   Broy M, 2011, SOFTW SYST MODEL, V10, P441, DOI 10.1007/s10270-011-0207-y
   Brucker A. D., 2002, "UML" 2002 - Unified Modeling Language. Model Engineering, Concepts, and Tools. 5th International Conference. Proceedings (Lecture Notes in Computer Science Vol.2460), P196
   Clarke EM, 1996, ACM COMPUT SURV, V28, P626, DOI 10.1145/242223.242257
   Cleland G., 1995, WORKSH IND STRENGTH, P46
   DAVIS FD, 1989, MIS QUART, V13, P319, DOI 10.2307/249008
   Dobing B, 2006, COMMUN ACM, V49, P109, DOI 10.1145/1125944.1125949
   Ehrig K, 2006, ELECTRON NOTES THEOR, V152, P23, DOI 10.1016/j.entcs.2006.01.012
   Evans A., 1998, UML 98, V1618, P336
   Farias K, 2012, 9 INT C ASP OR SOFTW, P73
   Ferguson E., 1992, ENG MINDS EYE
   FERGUSON ES, 1977, SCIENCE, V197, P827, DOI 10.1126/science.197.4306.827
   Fish A, 2005, J VISUAL LANG COMPUT, V16, P541, DOI 10.1016/j.jvlc.2005.03.001
   France RB, 2006, COMPUTER, V39, P59, DOI 10.1109/MC.2006.65
   France R, 2007, FOSE 2007: FUTURE OF SOFTWARE ENGINEERING, P37, DOI 10.1109/FOSE.2007.14
   GAMMA E, 1995, DESIGN PATTERNS
   Gogolla M, 2007, SCI COMPUT PROGRAM, V69, P27, DOI 10.1016/j.scico.2007.01.013
   Gronmo R, 2009, LECT NOTES COMPUT SC, V5562, P2
   Guerra E, 2013, AUTOMAT SOFTW ENG, V20, P5, DOI 10.1007/s10515-012-0102-y
   Henderson-Sellers B, 1999, LECT NOTES COMPUT SC, V1723, P550
   Henderson-Sellers B., 2005, Software Systems Modeling, V4, P4, DOI DOI 10.1007/s10270-004-0076-8
   Hennicker R, 2002, LECT NOTES COMPUT SC, V2263, P69
   Hutchinson J, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P633, DOI 10.1145/1985793.1985882
   Iivari J, 1996, COMMUN ACM, V39, P94, DOI 10.1145/236156.236183
   Jackson Daniel, 2006, Software abstractions: Logic, language, and analysis
   Kautz K, 2007, INFORM SYST J, V17, P217, DOI 10.1111/j.1365-2575.2007.00222.x
   Khaled L, 2009, PROCEEDINGS OF THE SECOND INTERNATIONAL CONFERENCE ON ENVIRONMENTAL AND COMPUTER SCIENCE, P111, DOI 10.1109/ICECS.2009.38
   Lange C. F. J., 2006, 28th International Conference on Software Engineering Proceedings, P401, DOI 10.1145/1134285.1134341
   LARKIN JH, 1987, COGNITIVE SCI, V11, P65, DOI 10.1016/S0364-0213(87)80026-5
   Larman C, 2005, APPL UML PATTERNS IN
   Leemans J., 2012, TRLASSY1204 U LUX
   Leemans J, 2012, S VIS LANG HUM CEN C, P257, DOI 10.1109/VLHCC.2012.6344542
   Lohmann M, 2005, 2005 IEEE Symposium on Visual Language and Human-Centric Computing, Proceedings, P63, DOI 10.1109/VLHCC.2005.35
   Lohmann M, 2006, IEEE INT CONF AUTOM, P355
   Malik P, 2005, LECT NOTES COMPUT SC, V3455, P65
   MEYER B, 1992, COMPUTER, V25, P40, DOI 10.1109/2.161279
   Micskei Z, 2011, SOFTW SYST MODEL, V10, P489, DOI 10.1007/s10270-010-0157-9
   Moody DL, 2009, IEEE T SOFTWARE ENG, V35, P756, DOI 10.1109/TSE.2009.67
   Object Management Group, 2011, UN MOD LANG INFR VER
   Oppenheim A:N., 1996, QUESTIONNAIRE DEISGN
   Parnas DL, 1998, J SYST SOFTWARE, V40, P195, DOI 10.1016/S0164-1212(97)00166-0
   Post G, 2000, INFORM SOFTWARE TECH, V42, P383, DOI 10.1016/S0950-5849(99)00099-3
   Post G, 1998, J SYST SOFTWARE, V44, P87, DOI 10.1016/S0164-1212(98)10046-8
   Pournelle G. H., 1953, Journal of Mammalogy, V34, P133, DOI 10.1890/0012-9658(2002)083[1421:SDEOLC]2.0.CO;2
   Ranjna Heena, 2011, ACAI 2011
   Reder Alexander, 2012, Model Driven Engineering Languages and Systems. Proceedings 15th International Conference, MODELS 2012, P202, DOI 10.1007/978-3-642-33666-9_14
   Richters M., 1998, Conceptual Modeling - ER'98. 17th International Conference on Conceptual Modeling. Proceedings, P449
   Richters M., 2001, THESIS U BREMEN
   Rumbaugh J., 1991, OBJECT ORIENTED MODE
   Rumpe B, 2011, SOFTW SYST MODEL, V10, P439, DOI 10.1007/s10270-011-0210-3
   Rushby J., 1995, SRICSL951
   Schmidt DC, 2006, COMPUTER, V39, P25, DOI 10.1109/MC.2006.58
   Selic B, 2012, SOFTW SYST MODEL, V11, P513, DOI 10.1007/s10270-012-0261-0
   Snook C, 2006, ACM T SOFTW ENG METH, V15, P92, DOI 10.1145/1125808.1125811
   Snook C, 2001, INFORM SOFTWARE TECH, V43, P275, DOI 10.1016/S0950-5849(00)00166-X
   Stevens P., 2002, SOFTWARE SYSTEMS MOD, V1, P68, DOI DOI 10.1007/S10270-002-0002-X
   Störrle H, 2003, 200S IEEE SYMPOSIUM ON HUMAN CENTRIC COMPUTING LANGUAGES AND ENVIRONMENTS, P129
   Thomas S.M., 2003, THESIS U WITWATERSRA
   Tobias E., 2012, TRLASSY1206 U LUX
   Tobias E., 2012, THESIS U LUXEMBOURG
   Tobias E, 2012, S VIS LANG HUM CEN C, P269, DOI 10.1109/VLHCC.2012.6344548
   Varró D, 2002, LECT NOTES COMPUT SC, V2505, P378
   Whittle J, 2013, LECT NOTES COMPUT SC, V8107, P1, DOI 10.1007/978-3-642-41533-3_1
   Wieringa R, 1998, ACM COMPUT SURV, V30, P459, DOI 10.1145/299917.299919
   Williams JR, 2010, ELECTRON NOTES THEOR, V263, P211, DOI 10.1016/j.entcs.2010.05.013
   Woodcock J, 2009, ACM COMPUT SURV, V41, DOI 10.1145/1592434.1592436
   [No title captured]
NR 85
TC 8
Z9 8
U1 1
U2 18
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 1
PY 2015
VL 98
BP 52
EP 79
DI 10.1016/j.scico.2014.05.002
PN 1
PG 28
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AY7LA
UT WOS:000347740500004
DA 2024-07-18
ER

PT J
AU Snelting, G
AF Snelting, Gregor
TI Understanding probabilistic software leaks
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Software security; Noninterference; Program analysis
ID NONINTERFERENCE
AB Probabilistic security leaks in multi-threaded programs exploit nondeterminism and interleaving. Probabilistic leaks does not leak secret values directly, but secret values influence the probability of public events. The article explains probabilistic leaks, and discusses various methods for checking probabilistic noninterference. (C) 2013 Elsevier B.V. All rights reserved.
C1 Karlsruhe Inst Technol, D-76021 Karlsruhe, Germany.
C3 Helmholtz Association; Karlsruhe Institute of Technology
RP Snelting, G (corresponding author), Karlsruhe Inst Technol, D-76021 Karlsruhe, Germany.
FU DFG [Sn11/10-2, Sn11/12-1, SPP 1496]
FX The work described in this paper was supported by DFG, grants Sn11/10-2
   and Sn11/12-1, in the scope of the SPP 1496 "Reliably secure software
   systems".
CR Askarov A, 2008, LECT NOTES COMPUT SC, V5283, P333
   Barthe Gilles., 2005, ACM Types, P103, DOI DOI 10.1145/1040294.1040304
   Bouaijani A, 2005, LECT NOTES COMPUT SC, V3653, P473, DOI 10.1007/11539452_36
   Gawlitza TM, 2011, LECT NOTES COMPUT SC, V6538, P199, DOI 10.1007/978-3-642-18275-4_15
   Giffhorn D., 2013, NEW ALGORITHM UNPUB
   Giffhorn Dennis, 2012, Ph. D. Dissertation
   Graf J, 2013, SOFTWARE ENG 2013 WO, VP-215, P123
   Hammer C, 2010, LECT NOTES COMPUT SC, V5965, P44, DOI 10.1007/978-3-642-11747-3_4
   Hammer C, 2009, INT J INF SECUR, V8, P399, DOI 10.1007/s10207-009-0086-1
   Hardekopf B, 2009, ACM SIGPLAN NOTICES, V44, P226, DOI 10.1145/1594834.1480911
   Huisman M, 2011, LNCS, V7421, P178
   Huisman Marieke, 2006, CSFW 2006, P3, DOI DOI 10.1109/CSFW.2006.6
   Hunt S, 2006, ACM SIGPLAN NOTICES, V41, P79, DOI 10.1145/1111320.1111045
   Mantel H., 2012, INT S LOG BAS PROGR, P106
   Mantel H, 2011, 2011 IEEE 24TH COMPUTER SECURITY FOUNDATIONS SYMPOSIUM (CSF), P218, DOI 10.1109/CSF.2011.22
   Myers A. C., 1999, Conference Record of POPL '99. 26th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P228, DOI 10.1145/292540.292561
   Myers A.C., 2001, Jif: Java information flow. software release
   Reps T., 1994, SIGSOFT Software Engineering Notes, V19, P11, DOI 10.1145/195274.195287
   Roscoe A.W., 1994, LNCS, V875, P33
   Sabelfeld A, 2000, P IEEE CSFW, P200, DOI 10.1109/CSFW.2000.856937
   Snelting G, 2006, ACM T SOFTW ENG METH, V15, P410, DOI 10.1145/1178625.1178628
   Tripp O, 2009, ACM SIGPLAN NOTICES, V44, P87, DOI 10.1145/1543135.1542486
   Volpano D.M., 1999, J COMPUT SECUR, V7
   Wasserrab Daniel., 2009, Proceedings of the 2009 Workshop on Programming Languages and Analysis for Security, PLAS 2009, Dublin, Ireland, 15-21 June, 2009, P31, DOI DOI 10.1145/1554339.1554345
   Zdancewic S, 2003, P IEEE CSFW, P29, DOI 10.1109/CSFW.2003.1212703
NR 25
TC 2
Z9 2
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 1
PY 2015
VL 97
SI SI
BP 122
EP 126
DI 10.1016/j.scico.2013.11.008
PN 1
PG 5
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AU6PR
UT WOS:000345725100021
DA 2024-07-18
ER

PT J
AU Arcaini, P
   Gargantini, A
AF Arcaini, Paolo
   Gargantini, Angelo
TI Test generation for sequential nets of Abstract State Machines with
   information passing
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Test case generation; State explosion problem; Information passing;
   Abstraction; State machines
ID MODEL; CHECKING
AB Model-based test generation consists in deriving system traces from specifications of systems under test. There exist several techniques for test generation, which, however, may suffer from scalability problems. In this paper, we assume that the system under test can be divided in several subsystems such that only one subsystem is active at the time. Moreover, each subsystem decides when and to which other subsystem to pass the control, by also initializing the initial state of the next subsystem in a desired way. We model these systems and we show how it is possible to generate tests in a very efficient way that exploits the division of the entire system in subsystems. Test generation for the whole system is performed by visiting each subsystem and generating tests for it. The tests are combined in order to obtain valid system traces. We show how several visiting policies influence the completeness of the test generation process. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Arcaini, Paolo; Gargantini, Angelo] Univ Bergamo, Dipartimento Ingn, I-24044 Dalmine, BG, Italy.
C3 University of Bergamo
RP Gargantini, A (corresponding author), Univ Bergamo, Dipartimento Ingn, Viale Marconi 5, I-24044 Dalmine, BG, Italy.
EM angelo.gargantini@unibg.it
RI Gargantini, Angelo/E-6060-2012; Arcaini, Paolo/J-3616-2017
OI Gargantini, Angelo/0000-0002-4035-0131; Arcaini,
   Paolo/0000-0002-6253-4062
CR [Anonymous], 2003, The Spin Model Checker: Primer and Reference Manual
   Arcaini Paolo, 2012, Abstract State Machines, Alloy, B, VDM, and Z. Proceedings Third International Conference, ABZ 2012, P36, DOI 10.1007/978-3-642-30885-7_3
   Arcaini P, 2011, SOFTWARE PRACT EXPER, V41, P155, DOI 10.1002/spe.1019
   Arcaini P, 2010, LECT NOTES COMPUT SC, V5977, P61, DOI 10.1007/978-3-642-11811-1_6
   Borger E., 2003, ABSTRACT STATE MACHI
   Clarke E, 2003, J ACM, V50, P752, DOI 10.1145/876638.876643
   Clarke EM, 1999, MODEL CHECKING, P1
   Del Castillo G, 2000, LECT NOTES COMPUT SC, V1785, P331
   Farahbod R., 2007, P ASM 07 14 INT ASM
   Fraser G, 2009, SECOND INTERNATIONAL CONFERENCE ON SOFTWARE TESTING, VERIFICATION, AND VALIDATION, PROCEEDINGS, P41, DOI 10.1109/ICST.2009.33
   Gargantini A, 2003, LECT NOTES COMPUT SC, V2589, P263
   Gargantini A, 2001, J UNIVERS COMPUT SCI, V7, P1050
   Godefroid P., 2007, SIGPLAN Notices, V42, P47, DOI [10.1145/1190216.1190226, 10.1145/1190215.1190226]
   Grieskamp W., 2002, Software Engineering Notes, V27, P112, DOI 10.1145/566171.566190
   Grieskamp W, 2003, LECT NOTES COMPUT SC, V2589, P413
   Hierons R, 2000, SOFTW TEST VERIF BEH, V10, P201, DOI 10.1002/1099-1689(200012)10:4<201::AID-STVR214>3.3.CO;2-Q
   Hierons RM, 2009, ACM COMPUT SURV, V41, DOI 10.1145/1459352.1459354
   Laster K, 1998, LECT NOTES COMPUT SC, V1384, P20, DOI 10.1007/BFb0054162
   Park S, 2006, LECT NOTES COMPUT SC, V3984, P905, DOI 10.1007/11751649_99
   Utting M., 2006, Practical Model-Based Testing
   Veanes M., 2009, INT J SOFTW INFORM, V3, P149
NR 21
TC 6
Z9 6
U1 0
U2 4
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 15
PY 2014
VL 94
SI SI
BP 93
EP 108
DI 10.1016/j.scico.2014.02.007
PN 2
PG 16
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AS1JW
UT WOS:000344038500003
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Konur, S
AF Konur, Savas
TI Specifying safety-critical systems with a decidable duration logic
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Safety-critical systems; Punctuality timing constraints; Temporal
   logics; Decidability; Tableau systems
ID REAL-TIME; CALCULUS
AB Punctual timing constraints are important in formal modelling of safety-critical real-time systems. But they are very expensive to express in dense time. In most cases, punctuality and dense-time lead to undecidability. Efforts have been successful to obtain decidability; but the results are either non-primitive recursive or nonelementary. In this paper we propose a duration logic which can express quantitative temporal constraints and punctuality timing constraints over continuous intervals and has a reasonable complexity. Our logic allows most specifications that are interesting in practice, and retains punctuality. It can capture the semantics of both events and states, and incorporates the notions duration and accumulation. We call this logic ESDL (the acronym stands for Event- and State-based Duration Logic). We show that the satisfiability problem is decidable, and the complexity of the satisfiability problem is NEXPTIME. ESDL is one of a few decidable interval temporal logics with metric operators. Through some case studies, we also show that ESDL can specify many safety-critical real-time system properties which were previously specified by undecidable interval logics or their decidable reductions based on some abstractions. (C) 2013 Elsevier B.V. All rights reserved.
C1 Univ Liverpool, Dept Comp Sci, Liverpool L69 3BX, Merseyside, England.
C3 University of Liverpool
RP Konur, S (corresponding author), Univ Liverpool, Dept Comp Sci, Liverpool L69 3BX, Merseyside, England.
EM konur@liverpool.ac.uk
CR Allen J. E., 1994, Journal of Logic and Computation, V4, P531, DOI 10.1093/logcom/4.5.531
   ALLEN JF, 1983, COMMUN ACM, V26, P832, DOI 10.1145/182.358434
   Alur R., 1990, Proceedings. Fifth Annual IEEE Symposium on Logic in Computer Science (90CH2897-7), P390, DOI 10.1109/LICS.1990.113764
   Alur R, 1996, J ACM, V43, P116, DOI 10.1145/227595.227602
   ALUR R, 1992, LECT NOTES COMPUT SC, V600, P74, DOI 10.1007/BFb0031988
   Alur R, 1990, P 5 C LOG COMP SCI, P12
   Bouajjani A, 1995, LECT NOTES COMPUT SC, V939, P196
   Bouyer P, 2007, IEEE S LOG, P109, DOI 10.1109/LICS.2007.49
   Chakravorty G, 2003, LECT NOTES COMPUT SC, V2725, P167
   CHAOCHEN Z, 1991, INFORM PROCESS LETT, V40, P269, DOI 10.1016/0020-0190(91)90122-X
   Chaochen Z., 1994, Formal Techniques in Real-Time and Fault-Tolerant Systems. Third International Symposium Proceedings. ProCoS, P86
   Clarke. E. M., 1982, LOGICS OF PROGRAMS, P52, DOI [10 . 1007 / BFb0025774, DOI 10.1007/BFB0025774]
   Dang Van Hung, 1996, Proceedings. 1996 Asia-Pacific Software Engineering Conference, P4, DOI 10.1109/APSEC.1996.566735
   DECHTER R, 1991, ARTIF INTELL, V49, P61, DOI 10.1016/0004-3702(91)90006-6
   EMERSON EA, 1991, LECT NOTES COMPUT SC, V531, P136, DOI 10.1007/BFb0023727
   Fränzle M, 2007, LECT NOTES COMPUT SC, V4424, P201
   Franzle M., 2009, INT J SOFTW INFORM, V3, P171
   GHEZZI C, 1990, J SYST SOFTWARE, V12, P107, DOI 10.1016/0164-1212(90)90074-V
   Goranko V, 2003, J UNIVERS COMPUT SCI, V9, P1137
   HALPERN JY, 1991, J ACM, V38, P935, DOI 10.1145/115234.115351
   Harel E., 1990, Proceedings. Fifth Annual IEEE Symposium on Logic in Computer Science (90CH2897-7), P402, DOI 10.1109/LICS.1990.113765
   Hirshfeld Y, 2004, FUND INFORM, V62, P1
   JAHANIAN F, 1986, IEEE T SOFTWARE ENG, V12, P890, DOI 10.1109/TSE.1986.6313045
   Kindler E, 1998, LECT NOTES COMPUT SC, V1420, P365
   Konur Savas, 2011, Journal of Logic, Language and Information, V20, P49, DOI 10.1007/s10849-010-9126-5
   KONUR SAN, 2008, THESIS U MANCHESTER
   Konur Savas., 2008, Advances in Modal Logic, V7, P177
   KOYMANS R, 1990, REAL-TIME SYST, V2, P255, DOI 10.1007/BF01995674
   Mattolini R, 1996, SECOND IEEE INTERNATIONAL CONFERENCE ON ENGINEERING OF COMPLEX COMPUTER SYSTEMS, P18, DOI 10.1109/ICECCS.1996.558324
   MOSZKOWSKI B, 1983, THESIS STANFORD U
   Ostroff J. S., 1987, Proceedings of the Real-Time Systems Symposium (Cat. No.87CH2475-2), P124
   Ouaknine J, 2005, IEEE S LOG, P188
   Ouaknine J, 2007, LOG METH COMPUT SCI, V3, DOI 10.2168/LMCS-3(1:8)2007
   PANDYA P, 2001, P REAL TIM TOOLS RTT
   Pandya P., 2002, ELECT NOTES THEORETI, V65, P254
   Pandya PK, 2007, LECT NOTES COMPUT SC, V4424, P246
   Pnueli A., 1977, 18th Annual Symposium on Foundations of Computer Science, P46, DOI 10.1109/SFCS.1977.32
   Pratt-Hartmann I, 2005, ARTIF INTELL, V166, P1, DOI 10.1016/j.artint.2005.04.003
   RAZOUK RR, 1989, ACM SIGSOFT, V14, P10, DOI 10.1145/75309.75311
   Sharma B, 2005, LECT NOTES COMPUT SC, V3440, P301
   Venema Y., 1991, Journal of Logic and Computation, V1, P453, DOI 10.1093/logcom/1.4.453
   Zhou CC, 1998, LECT NOTES COMPUT SC, V1536, P584, DOI 10.1007/3-540-49213-5_23
   Zhou Chaochen, 2004, MONO THEOR COMP SCI
NR 43
TC 5
Z9 5
U1 0
U2 5
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 1
PY 2014
VL 80
BP 264
EP 287
DI 10.1016/j.scico.2013.07.012
PN B
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 292FH
UT WOS:000329887100003
OA hybrid
DA 2024-07-18
ER

PT J
AU Farahbod, R
   Gervasi, V
   Glässer, U
AF Farahbod, Roozbeh
   Gervasi, Vincenzo
   Glaesser, Uwe
TI Executable formal specifications of complex distributed systems with
   CoreASM
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Formal methods; Specification and modeling environment; Extensible
   language; Abstract state machines; CoreASM
ID ABSTRACT STATE MACHINES; SUPPORT; MODEL
AB Formal specifications play a crucial role in the design of reliable complex software systems. Executable formal specifications allow the designer to attain early validation and verification of design using static analysis techniques and accurate simulation of the runtime behavior of the system-to-be. With increasing complexity of software-intensive computer-based systems and the challenges of validation and verification of abstract software models prior to coding, the need for interactive software tools supporting executable formal specifications is even more evident. In this paper, we discuss how CoreASM, an environment for writing and running executable specifications according to the ASM method, provides flexibility and manages the complexity by using an innovative extensible language architecture. (C) 2012 Elsevier B.V. All rights reserved.
C1 [Farahbod, Roozbeh] Def R&D Canada Valcartier, Quebec City, PQ, Canada.
   [Gervasi, Vincenzo] Univ Pisa, Dipartimento Informat, I-56100 Pisa, Italy.
   [Glaesser, Uwe] Simon Fraser Univ, Sch Comp Sci, Burnaby, BC V5A 1S6, Canada.
C3 University of Pisa; Simon Fraser University
RP Farahbod, R (corresponding author), Def R&D Canada Valcartier, Quebec City, PQ, Canada.
EM work@roozbeh.ca
OI Gervasi, Vincenzo/0000-0002-8567-9328
CR Abrial J.-R., 1996, B BOOK ASSIGNING PRO
   Altenhofen M, 2009, LECT NOTES COMPUT SC, V5486, P1, DOI 10.1007/978-3-642-03429-9_1
   Anlauff M., eXtensible Abstract State Machines
   [Anonymous], 2010, Z NOTATION TOOL SUPP
   [Anonymous], 1998, FM-Trends, P367
   [Anonymous], 2001, Java and the Java Virtual Machine: Definition, Verification, Validation
   [Anonymous], 1972, Chapter I: Notes on structured programming, em Structured programming
   BATORY D, 2003, SCALING STEPWISE REF
   Beckers J, 2008, LECT NOTES COMPUT SC, V5238, P112
   Beckert B, 1996, LECT NOTES COMPUT SC, V1092, P64
   Berry DM, 2002, SCI COMPUT PROGRAM, V42, P11, DOI 10.1016/S0167-6423(01)00026-0
   Bidoit Michel., 2004, CASL USER MANUAL INT
   Bjorner Dines., 1978, LECT NOTES COMPUTER, V61
   Blass A., 2003, ACM Transactions on Computational Logic, V4, P578, DOI 10.1145/937555.937561
   Blass A., 2000, Computer Science Logic. 14th International Workshop, CSL 2000. Annual Conference of the EACSL. Proceedings (Lecture Notes in Computer Science Vol.1862), P1
   BORGER E, 1995, KLUW S VLSI, V307, P107
   Börger E, 1999, LECT NOTES COMPUT SC, V1641, P1
   Borger E., 2010, FORMAL METHODS STATE
   Borger E., 2003, ABSTRACT STATE MACHI
   Börger E, 2007, FORM ASP COMPUT, V19, P225, DOI 10.1007/s00165-006-0019-y
   Brantingham P, 2009, MATHEMATICAL METHODS IN COUNTERTERRORISM, P9, DOI 10.1007/978-3-211-09442-6_2
   Del Castillo G, 1999, LECT NOTES COMPUT SC, V1641, P311
   DelCastillo G, 1996, LECT NOTES COMPUT SC, V1092, P191
   DIESEN D, 1995, THESIS U OSLO NORWAY
   Farahbod R., 2006, International Journal of Business Process Integration and Management, V1, P279, DOI 10.1504/IJBPIM.2006.012626
   Farahbod R., 2011, 2011 European Intelligence and Security Informatics Conference, P10, DOI 10.1109/EISIC.2011.64
   Farahbod R, 2009, LECT NOTES COMPUT SC, V5115, P147, DOI 10.1007/978-3-642-11447-2_10
   Farahbod R., 2006, NEW TRENDS PARALLEL, P81
   Farahbod R., 2009, P SPIE DEF SEC S ORL
   Farahbod R., 2011, LNCS, V6991
   FARAHBOD R, 2008, P 11 INT C INF FUS F
   FARAHBOD R, 2008, P 3 INT S LEV APPL F
   Farahbod R., 2009, THESIS S FRASER U BU
   Farahbod R, 2007, FUND INFORM, V77, P71
   Farahbod R, 2011, SOFTWARE PRACT EXPER, V41, P167, DOI 10.1002/spe.1029
   Gervasi V., 2012, 3 INT ABZ C PI UNPUB
   Gervasi V., 2008, ATT C NAZ BIOING 200, P79
   Glässer U, 2004, IEEE T SOFTWARE ENG, V30, P458, DOI 10.1109/TSE.2004.25
   Glässer U, 2003, COMPUT NETW, V42, P343, DOI 10.1016/S1389-1286(03)00247-0
   Gurevich Y, 1996, LECT NOTES COMPUT SC, V1092, P266
   GUREVICH Y, 1994, IFIP TRANS A, V51, P587
   Gurevich Y., 1993, SPECIFICATION VALIDA, P9
   Hudak P., ACM COMPUTING SURVEY, V28
   Jackson Daniel, 2006, Software abstractions: Logic, language, and analysis
   Lemcke J., 2007, SERV IEEE C, P262
   MA GZ, 2007, THESIS S FRASER U CA
   MAUPIN P, 2007, P 10 INT C INF FUS Q
   Micheloud S., 2003, SCALA ASML SIDE SIDE
   Microsoft FSE group, 2009, ABSTR STAT MACH LANG
   Schmid Joachim., 2008, AsmGofer
   Spivey J.M., 1992, PRENTICE HALL INT SE
   Standish T. A., 1975, SIGPLAN Notices, V10, P18, DOI 10.1145/987305.987310
   Veanes Margus, 2008, Formal Methods and Testing. An Outcome of the FORTEST Network. Revised Selected Papers, P39, DOI 10.1007/978-3-540-78917-8_2
   WIRTH N, 1971, COMMUN ACM, V14, P221, DOI 10.1145/362575.362577
NR 54
TC 2
Z9 4
U1 0
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 1
PY 2014
VL 79
SI SI
BP 23
EP 38
DI 10.1016/j.scico.2012.02.001
PG 16
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 246RH
UT WOS:000326556300003
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Hayes, IJ
   Dunne, SE
   Meinicke, LA
AF Hayes, Ian J.
   Dunne, Steve E.
   Meinicke, Larissa A.
TI Linking Unifying Theories of Program refinement
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 10th International Conference on Mathematics of Program Construction
CY JUN, 2010
CL Quebec City, CANADA
SP Ctr Rech Math, Univ Laval
DE Unifying theories of programming (UTP); Real-time refinement; Program
   termination
ID REAL-TIME REFINEMENT; CALCULUS
AB In this paper we consider three theories of programs and specifications at different levels of abstraction. The theories we focus on are: the basic Unifying Theories of Programming (UTP) model, which corresponds to the theories of VDM, B, and the refinement calculus; an extended theory that distinguishes abort from nontermination; and a further extension that introduces (abstract) time. We define UTP-style designs (or specifications) in each theory and show how program constructors, such as nondeterministic choice and sequential composition, can be expressed as single designs in each theory.
   To examine the relationships between the theories, we construct mappings in both directions between pairs of theories and show that the pairs of mappings form Galois connections. This shows that the simpler (more abstract) models are sub-theories of the more complex extensions. The mappings preserve the program structure and hence are homomorphisms. An important property of a Galois connection is that both mappings preserve refinement. The Galois connections between the models can be exploited to translate properties, including refinement laws, between theories. In addition, we show how to define an iteration in the extended model in terms of an iteration in the timed model. Crown Copyright (C) 2012 Published by Elsevier B.V. All rights reserved.
C1 [Hayes, Ian J.; Meinicke, Larissa A.] Univ Queensland, Sch Informat Technol & Elect Engn, Brisbane, Qld 4072, Australia.
   [Dunne, Steve E.] Univ Teesside, Sch Comp, Middlesbrough TS1 3BA, Cleveland, England.
C3 University of Queensland; University of Teesside
RP Hayes, IJ (corresponding author), Univ Queensland, Sch Informat Technol & Elect Engn, Brisbane, Qld 4072, Australia.
EM Ian.Hayes@itee.uq.edu.au; S.E.Dunne@tees.ac.uk
OI Hayes, Ian/0000-0003-3649-392X; MEINICKE, Larissa/0000-0002-5272-820X
CR ABADI M, 1994, ACM T PROGR LANG SYS, V16, P1543, DOI 10.1145/186025.186058
   Abrial J.-R., 1996, B BOOK ASSIGNING PRO
   [Anonymous], 1993, Program Verification: Fundamental Issues in Computer Science, DOI [10.1090/psapm/019/0235771, DOI 10.1090/PSAPM/019/0235771]
   [Anonymous], 1992, The Z Notation
   [Anonymous], 1990, Predicate Calculus and Program Semantics
   Back R.-J., 1998, Refinement Calculus
   BACK RJR, 1981, J COMPUT SYST SCI, V23, P49, DOI 10.1016/0022-0000(81)90005-2
   Davey B. A., 2002, INTRO LATTICES ORDER, V2nd, DOI DOI 10.1017/CBO9780511809088
   Duke R., 1995, COMPUTER STANDARDS I, V17
   DUNNE SE, 2001, P 5 IR WORKSH FORM M
   Fidge C., 1999, IEE Proceedings-Software, V146, P104, DOI 10.1049/ip-sen:19990407
   Guttmann W, 2013, SCI COMPUT PROGRAM, V78, P2064, DOI 10.1016/j.scico.2012.07.009
   Hayes I, 2002, SCI COMPUT PROGRAM, V43, P161, DOI 10.1016/S0167-6423(02)00024-2
   Hayes I, 2003, MG COMP SCI, P109
   Hayes I. J., 1993, SPECIFICATION CASE S
   Hayes IJ, 2006, LECT NOTES COMPUT SC, V4010, P141
   Hayes IJ, 2010, LECT NOTES COMPUT SC, V6120, P178, DOI 10.1007/978-3-642-13321-3_12
   Hayes IJ, 2001, ACTA INFORM, V37, P385, DOI 10.1007/PL00013311
   HAYES IJ, 1997, BCS FACS NO FORM MET
   HEHNER ECR, 1989, LECT NOTES COMPUT SC, V375, P36
   HEHNER ECR, 1994, CLASSICAL MIND, P191
   Hehner E, 2006, LECT NOTES COMPUT SC, V4010, P1
   Hoare C. A. R., 1998, Unifying Theories of Programming
   Hoare C. A. R., 1989, Essays in Computing Science
   Hoare C.A.R., 1969, COMMUN ACM, V12, P580
   JACOBS D, 1985, ACTA INFORM, V22, P67, DOI 10.1007/BF00290146
   Jones C. B., 1986, SYSTEMATIC SOFTWARE
   Möller B, 2006, LECT NOTES COMPUT SC, V4014, P338, DOI 10.1007/11783596_20
   Morgan Carroll, 1994, Programming from specifications
   MORGAN CC, 1988, ACM T PROGRAMMING LA, V10
   NELSON G, 1989, ACM T PROGRAMMING LA, V11
   Pandya PK, 1998, LECT NOTES COMPUT SC, V1486, P55, DOI 10.1007/BFb0055336
   PARNAS DL, 1983, COMMUN ACM, V26, P572, DOI 10.1145/358161.358168
   Smith Graeme., 2000, OBJECT Z SPECIFICATI
   Tarski A., 1955, PAC J MATH, V5, P285, DOI DOI 10.2140/PJM.1955.5.285
   UTTING M, 1996, P 7 BCS FACS REF WOR
NR 36
TC 2
Z9 2
U1 0
U2 1
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 1
PY 2013
VL 78
IS 11
BP 2086
EP 2107
DI 10.1016/j.scico.2012.07.010
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 220QR
UT WOS:000324602500005
OA hybrid
DA 2024-07-18
ER

PT J
AU Rojas, LA
   Macías, JA
AF Rojas, Luis A.
   Macias, Jose A.
TI Bridging the gap between information architecture analysis and software
   engineering in interactive web application development
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Human-computer interaction; Information architecture; End-user
   development; Software engineering
AB Web development teams comprise non-computer experts working on the conceptual modeling of non-functional aspects in software applications. Later on, such conceptual information is processed by analysts and software engineers to face the technical phases of the software project. However, this information transfer is often difficult to automate since the information processed by the different professionals involves different abstraction levels, as well as important cost and effort that need to be considered. The main aim of this research is to minimize these problems by increasing automation and interoperability in the development of interactive web applications. To take up this challenge, we have created and evaluated a tool that aims at bridging the gap between the conceptual definitions of web contents - i.e., the information architecture, and the UML elements for analysis and design required by software engineers, connecting functional and non-functional information to achieve the rest of technical activities during the software development process. (C) 2012 Elsevier B.V. All rights reserved.
C1 [Rojas, Luis A.; Macias, Jose A.] Univ Autonoma Madrid, Escuela Politecn Super, E-28049 Madrid, Spain.
C3 Autonomous University of Madrid
RP Macías, JA (corresponding author), Univ Autonoma Madrid, Escuela Politecn Super, Tomas & Valiente 11, E-28049 Madrid, Spain.
EM luisalberto.rojas@estudiante.uam.es; j.macias@uam.es
RI Rojas, Luis/Y-9071-2019; Macias, Jose Antonio/B-5397-2014
OI Rojas, Luis/0000-0002-4446-227X; Macias, Jose
   Antonio/0000-0001-5071-0076
FU  [TIN2011-24139];  [TIN2011-15009-E]
FX This work has been supported by the founded projects TIN2011-24139 and
   TIN2011-15009-E.
CR [Anonymous], ITSIM 2008 INT S INF
   [Anonymous], 2006, Information Architecture for the World Wide Web
   [Anonymous], 2001, USABILITY USER EXPER
   [Anonymous], VISUAL VOCABULARY DE
   [Anonymous], MOF 2 0 XMI MAPP SPE
   Babar MA, 2009, SOFTWARE ARCHITECTURE KNOWLEDGE MANAGEMENT: THEORY AND PRACTICE, P69, DOI 10.1007/978-3-642-02374-3_5
   Buchgeher G, 2009, LECT NOTES COMPUT SC, V5872, P316, DOI 10.1007/978-3-642-05290-3_44
   Chavarriaga E, 2009, ADV ENG SOFTW, V40, P1329, DOI 10.1016/j.advengsoft.2009.01.016
   DAVIS FD, 1989, MIS QUART, V13, P319, DOI 10.2307/249008
   Katsanos C, 2008, CHI 2008: 26TH ANNUAL CHI CONFERENCE ON HUMAN FACTORS IN COMPUTING SYSTEMS VOLS 1 AND 2, CONFERENCE PROCEEDINGS, P875
   Lin HX, 1997, BEHAV INFORM TECHNOL, V16, P267, DOI 10.1080/014492997119833
   Macías JA, 2008, WORLD WIDE WEB, V11, P253, DOI 10.1007/s11280-008-0043-3
   Pressman R.S., 2005, Software engineering: a Practitioner's Approach
   Rojas LA, 2011, LECT NOTES COMPUT SC, V6949, P515, DOI 10.1007/978-3-642-23768-3_71
   Toms EG, 2002, J AM SOC INF SCI TEC, V53, P855, DOI 10.1002/asi.10094
   United Nations Educational Scientific and Cultural Organization (UNESCO), 2018, INT TECHN GUID SEX E
NR 16
TC 5
Z9 6
U1 0
U2 28
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 1
PY 2013
VL 78
IS 11
BP 2282
EP 2291
DI 10.1016/j.scico.2012.07.020
PG 10
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 220QR
UT WOS:000324602500014
OA Green Accepted
DA 2024-07-18
ER

PT J
AU Laval, J
   Anquetil, N
   Bhatti, U
   Ducasse, S
AF Laval, Jannik
   Anquetil, Nicolas
   Bhatti, Usman
   Ducasse, Stephane
TI OZONE: Layer identification in the presence of cyclic dependencies
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Remodularization; Layered organization; Cycle; Package dependency
ID SEARCH ALGORITHM; SOFTWARE; MODELS
AB A layered software architecture helps in understanding the role of software entities (e.g. packages or classes) in a system and, hence, the impact of changes on these entities. However, the computation of an optimal layered organization in the presence of cyclic dependencies is difficult. In this paper, we present an approach that (i) provides a strategy supporting the automated detection of cyclic dependencies, (ii) proposes heuristics to break cyclic dependencies, and (iii) computes an organization of software entities in multiple layers even in the presence of cyclic dependencies. Our approach performs better than the other existing approaches in terms of accuracy and interactivity, and it supports human inputs and constraints. In this paper, we present this approach and compare it to existing solutions. We applied our approach on two large software systems to identify package layers and the results are manually validated by software engineers of the two systems. (C) 2012 Elsevier B.V. All rights reserved.
C1 [Laval, Jannik] Univ Bordeaux, UMR 5800, LaBRI, F-33400 Talence, France.
   [Anquetil, Nicolas; Bhatti, Usman; Ducasse, Stephane] USTL, Nord Europe, INRIA Lille, RMoD Team, Lille, France.
C3 Universite de Bordeaux; Centre National de la Recherche Scientifique
   (CNRS); Universite de Lille
RP Laval, J (corresponding author), Univ Bordeaux, UMR 5800, LaBRI, F-33400 Talence, France.
EM jannik.laval@gmail.com
OI Laval, Jannik/0000-0002-7155-5762; Ducasse,
   Stephane/0000-0001-6070-6599; Anquetil, Nicolas/0000-0003-1486-8399
FU Ministry of Higher Education and Research; Nord-Pas de Calais Regional
   Council; FEDER
FX This work was supported by the Ministry of Higher Education and
   Research, Nord-Pas de Calais Regional Council and FEDER through the
   'Contrat de Projets Etat Region (CPER) 2007-2013'.
CR Abdeen H, 2009, WORK CONF REVERSE EN, P103, DOI 10.1109/WCRE.2009.13
   Andriyevska Olena, 2005, VISSOFT 2005 3 IEEE, P9
   [Anonymous], 1992, On the approximability of NP-complete optimization problems
   [Anonymous], 2005, Proceedings of the 2005 ACM symposium on Software visualization, DOI DOI 10.1145/1056018.1056041
   [Anonymous], P CSMR 2006 10 EUR C
   Bachmann F., 2000, SOFTWARE ARCHITECTUR
   Bergel A, 2005, J UNIVERS COMPUT SCI, V11, P1613
   Deissenboeck F., 2010, 2010 32nd International Conference on Software Engineering (ICSE), P247, DOI 10.1145/1810295.1810343
   Demeyer S., 2002, Object-Oriented Reengineering Patterns
   Demeyer Serge, 2001, TECHNICAL REPORT
   Demeyer Serge, 1999, P 6 WORK C REV ENG W
   DeRemer F., 1976, IEEE Transactions on Software Engineering, VSE-2, P80, DOI 10.1109/TSE.1976.233534
   Dong Xinyi, 2007, ICSM 2007
   Ducasse S, 2005, IEEE T SOFTWARE ENG, V31, P75, DOI 10.1109/TSE.2005.14
   Ducasse S, 2006, PROC IEEE INT CONF S, P203
   Ducasse S, 2009, IEEE T SOFTWARE ENG, V35, P573, DOI 10.1109/TSE.2009.19
   Ducasse Stephane, 2005, RCOST SOFTWARE TECHN, P55
   Ducasse Stephane., 2007, Software Maintenance, P94
   EADES P, 1993, INFORM PROCESS LETT, V47, P319, DOI 10.1016/0020-0190(93)90079-O
   Falleri Jean Remi, 2011, P 49 INT C OBJ MOD C
   Gîrba T, 2005, NINTH EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, PROCEEDINGS, P2, DOI 10.1109/CSMR.2005.15
   Hautus Edwin, 2002, IASTED INT C SOFTW E
   Kleinberg JM, 1999, J ACM, V46, P604, DOI 10.1145/324133.324140
   Langelier G., 2005, Proc. IEEE/ACM Automated Software Engineering, P214
   Lanza M, 2003, IEEE T SOFTWARE ENG, V29, P782, DOI 10.1109/TSE.2003.1232284
   Laval Jannik, 2009, WCRE 09 P 2009 16 WO
   Laval Jannik, 2009, FAMOOSR 2009 3 WORKS
   Lutz R, 2001, J SYST ARCHITECT, V47, P613, DOI 10.1016/S1383-7621(01)00019-4
   Martin R.C., 2000, Design Principles and Design Patterns
   Melton H, 2007, P 30 AUSTR C COMP SC, V62, P87
   Melton H, 2007, EMPIR SOFTW ENG, V12, P389, DOI 10.1007/s10664-006-9033-1
   Mitchell BS, 2006, IEEE T SOFTWARE ENG, V32, P193, DOI 10.1109/TSE.2006.31
   Murphy G. C., 1995, SIGSOFT Software Engineering Notes, V20, P18, DOI 10.1145/222132.222136
   Murphy GC, 2001, IEEE T SOFTWARE ENG, V27, P364, DOI 10.1109/32.917525
   MYERS GJ, 1978, COMPOSITE STRUCTURED
   Nierstrasz O., 2005, ACM SIGSOFT SOFTWARE, V30, P1, DOI [DOI 10.1145/1095430, 10.1145/1095430.1081707, DOI 10.1145/1095430.1081707]
   Ponisio Laura, 2006, P 3 SOFTW MEAS EUR F, P91
   Praditwong Kata, 2010, IEEE T SOFTWARE ENG, V99
   Pressman R.S., 1994, SOFTWARE ENG PRACTIT, VEuropean
   Sangal N, 2005, ACM SIGPLAN NOTICES, V40, P167, DOI 10.1145/1103845.1094824
   Scanniello G, 2010, SOFTWARE PRACT EXPER, V40, P897, DOI 10.1002/spe.988
   Szyperski Clemens., 1998, COMPONENT SOFTWARE
   Tarjan R., 1972, SIAM Journal on Computing, V1, P146, DOI 10.1137/0201010
   TIERNAN JC, 1970, COMMUN ACM, V13, P722, DOI 10.1145/362814.362819
   Vainsencher D, 2004, COMPUT LANG SYST STR, V30, P5, DOI 10.1016/j.cl.2003.09.001
   WEINBLATT H, 1972, J ACM, V19, P43, DOI 10.1145/321679.321684
   Yourdon E.N., 1979, CLASSICS SOFTWARE EN
NR 47
TC 7
Z9 9
U1 0
U2 6
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD AUG 1
PY 2013
VL 78
IS 8
BP 1055
EP 1072
DI 10.1016/j.scico.2012.08.001
PG 18
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 168XV
UT WOS:000320742200006
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Rebêlo, H
   Lima, R
   Leavens, GT
   Cornélio, M
   Mota, A
   Oliveira, C
AF Rebelo, Henrique
   Lima, Ricardo
   Leavens, Gary T.
   Cornelio, Marcio
   Mota, Alexandre
   Oliveira, Cesar
TI Optimizing generated aspect-oriented assertion checking code for JML
   using program transformations: An empirical study
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT Annual Brazilian Symposium on Programming Languages (SBLP)
CY AUG 19-21, 2009
CL Gramado, BRAZIL
SP Catholic Univ Pelotas (UCPel), Comp Dept, Brazilian Comp Soc, CAPES, CNPq, Microsoft, Govt State Rio Grande do Sul
DE Aspect-oriented programming; Program transformation; JML
ID DESIGN
AB The AspectJ JML compiler (ajmlc) explores aspect-oriented programming (AOP) mechanisms to implement JML specifications, such as pre- and postconditions, and enforce them during runtime. This compiler was created to improve source-code modularity. Some experiments were conducted to evaluate the performance of the code generated through ajmlc. Results demonstrated that the strategy of adopting AOP to implement JML specifications is very promising. However, there is still a need for optimization of the generated code's bytecode size and running time. This paper presents a catalog of transformations which represent the optimizations implemented in the new optimized version of the ajmlc compiler. We employ such transformations to reduce the bytecode size and running time of the code generated through the ajmlc compiler. Aiming at demonstrating the impact of such transformation on the code quality, we conduct an empirical study using four applications in optimized and non-optimized versions generated by ajmlc. We show that our AOP transformations provide a significant improvement, regarding bytecode size and running time. (C) 2012 Elsevier B.V. All rights reserved.
C1 [Rebelo, Henrique; Lima, Ricardo; Cornelio, Marcio; Mota, Alexandre; Oliveira, Cesar] Univ Fed Pernambuco, Informat Ctr, BR-50740540 Recife, PE, Brazil.
   [Leavens, Gary T.] Univ Cent Florida, Dept Elect Engn & Comp Sci, Orlando, FL 32816 USA.
C3 Universidade Federal de Pernambuco; State University System of Florida;
   University of Central Florida
RP Rebêlo, H (corresponding author), Univ Fed Pernambuco, Informat Ctr, Caixa Postal 7851, BR-50740540 Recife, PE, Brazil.
EM hemr@cin.ufpe.br; rmfl@cin.ufpe.br; leavens@eecs.ucf.edu;
   marciocornelio@acm.org; acm@cin.ufpe.br; calo@cin.ufpe.br
OI Rebelo, Henrique/0000-0002-1932-8706; Mota,
   Alexandre/0000-0003-4416-8123
FU Division of Computing and Communication Foundations; Direct For Computer
   & Info Scie & Enginr [1017262] Funding Source: National Science
   Foundation
CR [Anonymous], 2007, 23 IEEE INT C SOFTW
   AspectJ Team Palo Alto Research Center Palo Alto Calif., 2003, ASPECTJ PROGR GUID
   Avgustinov P., 2005, ASPECT ORIENTED SYST, P87
   Binkley D, 2005, PROC IEEE INT CONF S, P27
   Briand LC, 2005, PROC IEEE INT CONF S, P687
   Burdy L., 2005, International Journal on Software Tools for Technology Transfer, V7, P212, DOI 10.1007/s10009-004-0167-4
   Cheon Yoonsik., 2002, Proceedings of the International Conference on Software Engineering Research and Practice (SERP'02), P322
   Cole L., 2005, FDN ASPECT ORIENTED
   Cole L., 2005, 4 INT C ASP OR SOFTW, P123, DOI DOI 10.1145/1052898.1052909
   Feldman Y. A., 2006, JOSE ASPECTS DESIGN, P80
   Filho F.C., 2006, INT C FDN SOFTWARE E, P152
   Filho F.C., ICSM, P134
   Fowler M., 2018, Refactoring: Improving the Design of Existing Code
   Hanenberg S., 2003, 4th Annual International Conference on Object-Oriented and Internet-based Technologies, Concepts, P19
   Hannemann J, 2002, ACM SIGPLAN NOTICES, V37, P161, DOI 10.1145/583854.582436
   Hannemann Jan., 2005, AOSD 05, P135
   Iwamoto M., 2003, 4 AOSD MOD UML WORKS
   Kiczales G, 1997, LECT NOTES COMPUT SC, V1241, P220, DOI 10.1007/BFb0053381
   Laddad R., 2003, ASPECTJ ACTION PRACT
   Lammel R., 2002, PROC AOSD 02, P41, DOI DOI 10.1145/508386.508392
   Leavens GT, 2006, LECT NOTES COMPUT SC, V4260, P2
   Leavens Gary T, 2006, SIGSOFT Softw. Eng. Notes, V31, P1, DOI [10.1145/1127878.1127884, DOI 10.1145/1127878.1127884]
   Marin Marius., 2005, MACS 05, P1, DOI DOI 10.1145/1082983.1083140
   MEYER B, 1992, COMPUTER, V25, P40, DOI 10.1109/2.161279
   Monteiro MP, 2008, SOFTWARE PRACT EXPER, V38, P361, DOI 10.1002/spe.835
   Monteiro MP, 2006, LECT NOTES COMPUT SC, V3880, P214
   MONTEIRO MP, 2005, AOSD 05, P111, DOI DOI 10.1145/1052898.1052908
   OPDYKE WF, 1992, THESIS CHAMPAIGN
   Rebelo H., 2009, SBLP 09, P117
   Rebelo H., 2008, 7 INT WORKSH SPEC VE, P11
   REBELO H, 2008, SAC 08, P228, DOI DOI 10.1145/1363686.1363745
   Rebelo H., 2011, P 15 BRAZ S PROGR LA
   SAMPAIO A., 1997, An Algebraic Approach to Compiler Design, volume 4 of AMAST Series in Computing
   Schafer Max, 2008, P 3 WORKSH PROGR LAN, P67, DOI [10.1145/1481848.1481859., DOI 10.1145/1481848.1481859]
   Soares G., 2011, SBLP 11
   Soares G, 2010, IEEE SOFTWARE, V27, P52, DOI 10.1109/MS.2010.63
   Soares S, 2006, SOFTWARE PRACT EXPER, V36, P711, DOI 10.1002/spe.715
   Soares S, 2007, APPLIED COMPUTING 2007, VOL 1 AND 2, P1293, DOI 10.1145/1244002.1244281
   Wampler Dean., 2006, ACP4IS 06, P27
   Wloka J., 2003, 13 WORKSH PH D STUD
   Wloka J., 2008, 7th international conference on Aspect-oriented software development, P132, DOI DOI 10.1145/1353482.1353499
NR 41
TC 0
Z9 0
U1 0
U2 1
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD AUG 1
PY 2013
VL 78
IS 8
BP 1137
EP 1156
DI 10.1016/j.scico.2012.09.003
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 168XV
UT WOS:000320742200011
OA Bronze
DA 2024-07-18
ER

PT J
AU Rubbo, FB
   Piveta, EK
   Nunes, DJ
AF Rubbo, Fernando Barden
   Piveta, Eduardo Kessler
   Nunes, Daltro Jose
TI Inference rules for generic code migration of aspect-oriented programs
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT Annual Brazilian Symposium on Programming Languages (SBLP)
CY AUG 19-21, 2009
CL Gramado, BRAZIL
SP Catholic Univ Pelotas (UCPel), Comp Dept, Brazilian Comp Soc, CAPES, CNPq, Microsoft, Govt State Rio Grande do Sul
DE Parametric polymorphism; Code migration; Aspect-oriented programming
ID JAVA
AB Several changes occurred in the AspectJ language to provide support for parametric polymorphism. Such changes aim to improve the source code type safety and to prepare the language to support generic code migration. Current approaches for this kind of migration focus only on object-oriented code. Therefore, they do not consider the use of aspects to encapsulate crosscutting concerns. We propose a collection of type constraint rules for the polymorphic version of AspectJ. These rules are used together with an existing constraint based algorithm to enable the conversion of non-generic code to add actual type parameters in both Java and AspectJ languages. (C) 2012 Elsevier B.V. All rights reserved.
C1 [Rubbo, Fernando Barden; Nunes, Daltro Jose] Univ Fed Rio Grande do Sul, Inst Informat, Porto Alegre, RS, Brazil.
   [Piveta, Eduardo Kessler] Univ Fed Santa Maria, Programa Pos Grad Informat, BR-97119900 Santa Maria, RS, Brazil.
C3 Universidade Federal do Rio Grande do Sul; Universidade Federal de Santa
   Maria (UFSM)
RP Piveta, EK (corresponding author), Univ Fed Santa Maria, Programa Pos Grad Informat, BR-97119900 Santa Maria, RS, Brazil.
EM fbrubbo@inf.ufrgs.br; piveta@inf.ufsm.br; daltro@inf.ufrgs.br
OI Piveta, Eduardo/0000-0002-0092-4495
CR Agesen O, 1995, LECT NOTES COMPUT SC, V952, P2
   AspectJ, 2005, ASPECTJ 5 DEV KIT DE
   Bellamy B, 2008, ACM SIGPLAN NOTICES, V43, P475, DOI 10.1145/1449955.1449802
   Bracha G, 1998, ACM SIGPLAN NOTICES, V33, P183, DOI 10.1145/286942.286957
   CARDELLI L, 1985, COMPUT SURV, V17, P471, DOI 10.1145/6041.6042
   Craciun F, 2009, LECT NOTES COMPUT SC, V5502, P112, DOI 10.1007/978-3-642-00590-9_9
   De Fraine Bruno., 2008, P 7 INT C ASPECT ORI, P60, DOI [10.1145/1353482.1353491, DOI 10.1145/1353482.1353491]
   De Sutter B, 2004, LECT NOTES COMPUT SC, V3086, P585
   Donovan A, 2004, ACM SIGPLAN NOTICES, V39, P15, DOI 10.1145/1035292.1028979
   EIFRIG J, 1995, SIGPLAN NOTICES, V30, P169, DOI 10.1145/217839.217858
   Fuhrer R, 2005, LECT NOTES COMPUT SC, V3586, P71
   Gosling J., 2005, Java Language Specification, Vthird
   Hannemann J., 2006, LATE AOSD 06
   Igarashi A, 2001, ACM T PROGR LANG SYS, V23, P396, DOI 10.1145/503502.503505
   IGARASHI A, 2001, WORKSH FDN OBJ OR LA
   Jagadeesan R, 2006, SCI COMPUT PROGRAM, V63, P267, DOI 10.1016/j.scico.2006.02.008
   Kiczales G., 2001, ECOOP 2001 - Object-Oriented Programming. 15th European Conference. Proceedings (Lecture Notes in Computer Science Vol.2072), P327
   Kiezun A, 2007, PROC INT CONF SOFTW, P437
   Munsil W., 2004, J OBJECT TECHNOLOGY, V3, P7
   Odersky M., 1997, Conference Record of POPL '97: The 24th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P146, DOI 10.1145/263699.263715
   PALSBERG J, 1991, SIGPLAN NOTICES, V26, P146
   PALSBERG J, 1993, OBJECT ORIENTED TYPE
   PLEVYAK J, 1994, SIGPLAN NOTICES, V29, P324, DOI 10.1145/191081.191130
   Rubbo F. B., 2009, THESIS FEDERAL U RIO
   Rubbo FB, 2008, J UNIVERS COMPUT SCI, V14, P3534
   Tip F, 2003, ACM SIGPLAN NOTICES, V38, P13, DOI 10.1145/949343.949308
   Torgersen M., 2004, SAC 2004, P1289, DOI DOI 10.5381/JOT.2004.3.11.A5
   von Dincklage D, 2004, ACM SIGPLAN NOTICES, V39, P1, DOI 10.1145/1035292.1028978
   Wloka J., 2008, 7th international conference on Aspect-oriented software development, P132, DOI DOI 10.1145/1353482.1353499
   Ye L., 2008, P 7 INT C ASP OR SOF, P144
NR 30
TC 0
Z9 0
U1 0
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD AUG 1
PY 2013
VL 78
IS 8
BP 1157
EP 1175
DI 10.1016/j.scico.2012.09.004
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 168XV
UT WOS:000320742200012
OA hybrid, Green Published
DA 2024-07-18
ER

PT J
AU Henrio, L
   Kammüller, F
   Lutz, B
AF Henrio, Ludovic
   Kammueller, Florian
   Lutz, Bianca
TI ASP<sub>fun</sub>: A typed functional active object calculus
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Theorem proving; Object calculus; Futures; Distribution; Typing; Binders
ID NOMINAL LOGIC; PI-CALCULUS; CONCURRENT; BINDING
AB This paper provides a sound foundation for autonomous objects communicating by remote method invocations and futures. As a distributed extension of zeta-calculus we define ASP(fun), a calculus of functional objects, behaving autonomously and communicating by a request-reply mechanism: requests are method calls handled asynchronously and futures represent awaited results for requests. This results in an object language enabling a concise representation of a set of active objects interacting by asynchronous method invocations. This paper first presents the ASP(fun) calculus and its semantics. Then, we provide a type system for ASP(fun) which guarantees the "progress" property. Most importantly, ASP(fun) has been formalised; its properties have been formalised and proved using the Isabelle theorem prover and we consider this as an important step in the formalization of distributed languages. This work was also an opportunity to study different binder representations and experiment with two of them in the Isabelle/HOL theorem prover. (c) 2011 Elsevier B.V. All rights reserved.
C1 [Kammueller, Florian] Middlesex Univ, London N17 8HR, England.
   [Henrio, Ludovic] Univ Nice Sophia Antipolis, INRIA, CNRS, Sophia Antipolis, France.
   [Kammueller, Florian; Lutz, Bianca] Techn Univ Berlin, Berlin, Germany.
C3 Middlesex University; Inria; Centre National de la Recherche
   Scientifique (CNRS); Universite Cote d'Azur; Technical University of
   Berlin
RP Kammüller, F (corresponding author), Middlesex Univ, London N17 8HR, England.
EM Ludovic.Henrio@inria.fr; f.kammueller@mdx.ac.uk; sowilo@cs.tu-berlin.de
RI Lutz, Benjamin/U-4283-2017
CR Abrahám E, 2009, J LOGIC ALGEBR PROGR, V78, P491, DOI 10.1016/j.jlap.2009.01.001
   AGHA G, 1986, SIGPLAN NOTICES, V21, P58, DOI 10.1145/323648.323743
   Agha G., 1986, Actors: a model of concurrent computation in distributed systems
   Agha G. A., 1997, Journal of Functional Programming, V7, P1, DOI 10.1017/S095679689700261X
   [Anonymous], 2019, LCP ISABELLE 2019
   [Anonymous], 1999, J FUNCT PROGRAM, DOI [DOI 10.1017/S0956796899003329, 10.1017/S0956796899003329]
   [Anonymous], 1996, A Theory of Objects
   [Anonymous], 1972, INDAGATIONES MATHEMA, DOI DOI 10.1016/1385-7258(72)90034-0
   Aydemir B.E., 2008, POPLMARK CHALLENGE
   Aydemir B, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P3, DOI 10.1145/1328438.1328443
   Bengtson J, 2007, LECT NOTES COMPUT SC, V4423, P63
   Bengtson J, 2009, IEEE S LOG, P39, DOI 10.1109/LICS.2009.20
   Briais S., 2002, Formal Methods for Open Object-Based Distributed Systems V. IFIP TC6/WG6.1. Fifth International Conference on Formal Methods for Open Object-Based Distributed Systems (FMOODS 2002), P129
   Cansado A., 2008, ELECT NOTES THEORETI
   Cardelli L., 1995, Conference Record of POPL'95: 22nd ACM SIGPLAN-SIGACT Symposium Principles of Programming Languages, P286, DOI 10.1145/199448.199516
   Caromel D, 2004, ACM SIGPLAN NOTICES, V39, P123, DOI 10.1145/982962.964012
   Caromel D., 2006, COMPUTATIONAL METHOD, V12, P69
   Caromel Denis, 2005, A Theory of Distributed Objects, DOI DOI 10.1007/B138812
   Ciaffaglione A, 2007, J AUTOM REASONING, V39, P1, DOI 10.1007/s10817-006-9061-y
   Cole M, 2004, PARALLEL COMPUT, V30, P389, DOI 10.1016/j.parco.2004.12.002
   de Boer FS, 2007, LECT NOTES COMPUT SC, V4421, P316
   Dedecker J, 2006, LECT NOTES COMPUT SC, V4067, P230
   Fleck A., 2010, 5 INT C INT MON PROT
   Gordon A.D., 1997, LNCS
   HALSTEAD RH, 1985, ACM T PROGR LANG SYS, V7, P501, DOI 10.1145/4472.4478
   Henrio L., 2007, LNCS
   Henrio L, 2009, ELECTRON NOTES THEOR, V255, P83, DOI 10.1016/j.entcs.2009.10.026
   Hewitt C., 1973, PROC 3 INT JOINT C A, P235, DOI 10.1145/359545.359563
   Honsell F, 2001, THEOR COMPUT SCI, V253, P239, DOI 10.1016/S0304-3975(00)00095-5
   Jeffrey A., ACM SIGPLAN WORKSH F
   Johnsen EB, 2006, THEOR COMPUT SCI, V365, P23, DOI 10.1016/j.tcs.2006.07.031
   Kammuller F., 2010, 5 C NETW ARCH INF SY
   Niehren J, 2006, THEOR COMPUT SCI, V364, P338, DOI 10.1016/j.tcs.2006.08.016
   Niehren J, 2007, ELECTRON NOTES THEOR, V173, P313, DOI 10.1016/j.entcs.2007.02.041
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Pitts AM, 2003, INFORM COMPUT, V186, P165, DOI 10.1016/S0890-5401(03)00138-X
   Ricci A, 2011, SCI COMPUT PROGRAM, V76, P37, DOI 10.1016/j.scico.2010.06.012
   Ridge T., 2007, LNCS, V4732
   Röckl C, 2003, J FUNCT PROGRAM, V13, P415, DOI 10.1017/S0956796802004653
   Schmitt A, 2002, INT FED INFO PROC, V96, P563
   Takada T., 1987, Object-Oriented Concurrent Programming, Computer Systems Series, P55
   Urban C., 2006, NOMINAL METHODS GROU
NR 42
TC 3
Z9 3
U1 0
U2 0
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUL 1
PY 2012
VL 77
IS 7-8
SI SI
BP 823
EP 847
DI 10.1016/j.scico.2010.12.008
PG 25
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 944DU
UT WOS:000304179400004
DA 2024-07-18
ER

PT J
AU Carette, J
   Kiselyov, O
AF Carette, Jacques
   Kiselyov, Oleg
TI Multi-stage programming with functors and monads: Eliminating
   abstraction overhead from generic code
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE MetaOCaml; Linear algebra; Genericity; Generative; Staging; Functor;
   Symbolic
ID LANGUAGES; SYSTEMS
AB We use multi-stage programming, monads and Ocaml's advanced module system to demonstrate how to eliminate all abstraction overhead from generic programs, while avoiding any inspection of the resulting code. We demonstrate this clearly with Gaussian Elimination as a representative family of symbolic and numeric algorithms. We parameterize our code to a great extent - over domain, input and permutation matrix representations, determinant and rank tracking, pivoting policies, result types, etc. - at no run-time cost. Because the resulting code is generated just right and not changed afterward, MetaOCaml guarantees that the generated code is well-typed. We further demonstrate that various abstraction parameters (aspects) can be made orthogonal and compositional, even in the presence of name-generation for temporaries, and "interleaving" of aspects. We also show how to encode some domain-specific knowledge so that "clearly wrong" compositions can be rejected at or before generation time, rather than during the compilation or running of the generated code. (C) 2008 Elsevier B.V. All rights reserved.
C1 [Carette, Jacques] McMaster Univ, Dept Comp & Software, Hamilton, ON L8S 4K1, Canada.
   [Kiselyov, Oleg] FNMOC, Monterey, CA 93943 USA.
C3 McMaster University
RP Carette, J (corresponding author), McMaster Univ, Dept Comp & Software, 1280 Main St W, Hamilton, ON L8S 4K1, Canada.
EM carette@mcmaster.ca; oleg@pobox.com
OI Carette, Jacques/0000-0001-8993-9804
FU NSERC [RPG262084-03]
FX We wish to thank Cristiano Calgano for his help in adapting camlp4 for
   use with MetaOCaml. Many helpful discussions with Walid Taha are very
   appreciated. The implementation of the monadic notation, perform, was
   joint work with Lydia van Dijk. We gratefully acknowledge numerous,
   helpful suggestions by the anonymous reviewers. The first author was
   supported in part by NSERC Discovery Grant RPG262084-03.
CR [Anonymous], 2000, Generative programming: methods, tools, and applications
   [Anonymous], Source Code
   BAREISS EH, 1968, MATH COMPUT, V22, P565
   BONDORF A, 1992, 1992 ACM C LISP FUNC, P1
   BONDORF A, 1994, ACM SIGPLAN WORKSH P, P1
   Burden R., 1989, Numerical Analysis
   Calcagno C, 2003, LECT NOTES COMPUT SC, V2830, P57
   Carette J, 2005, LECT NOTES COMPUT SC, V3676, P256
   Carette J, 2006, SCI COMPUT PROGRAM, V62, P3, DOI 10.1016/j.scico.2005.10.012
   CHEN Z, HAW INT C SYST SCI H
   Cohen A, 2006, SCI COMPUT PROGRAM, V62, P25, DOI 10.1016/j.scico.2005.10.013
   Czarnecki K, 2003, LECT NOTES COMPUT SC, V3016, P51
   de Rauglaudre D., 2002, CAMLP4 REFERENCE MAN
   Dijkstra E.W., 1982, EWD 447: On the role of scientific thought. Selected Writings on Computing: A Personal Perspective, P60, DOI DOI 10.1007/978-1-4612-5695-3
   Eckhardt J, 2005, LECT NOTES COMPUT SC, V3676, P275
   Filinski Andrzej, 1994, P 21 ANN ACM S PRINC, P446, DOI DOI 10.1145/174675.178047
   Gluck R., 1997, LISP and Symbolic Computation, V10, P113, DOI 10.1023/A:1007763000430
   GLUCK R, 1995, SYSTEM MODELLING OPT, P137
   Golub G.H., 1989, MATRIX COMPUTATIONS
   Gruntz D., 1994, SIGSAM Bulletin, V28, P3, DOI 10.1145/190694.190695
   Hudak P., 1996, ACM COMPUT SURV, V28, P196, DOI [10.1145/242224.242477, DOI 10.1145/242224.242477]
   IRWIN J, 1997, P SCI COMP OBJ OR PA, P249
   JENKS R.D., 1992, AXIOM SCI COMPUTATIO
   JOHN I, 1998, COMPUT PHYS, V12, P453
   JONES SP, 2003, REVISED HASKELL 98 R
   Kennedy K, 2001, J PARALLEL DISTR COM, V61, P1803, DOI 10.1006/jpdc.2001.1724
   Kiczales G, 1997, LECT NOTES COMPUT SC, V1241, P220, DOI 10.1007/BFb0053381
   KISELYOV O, 2004, P 4 ACM INT C EMB SO, P249
   KOHIBECKER EE, 1986, LISP FUNCTIONAL PROG, P151
   LIANG S, 1995, ACM S PRINC PROGR LA, P333
   Mendhekar A., 1997, SPL97009P9710044 XER
   Mernik M, 2005, ACM COMPUT SURV, V37, P316, DOI 10.1145/1118890.1118892
   *MLTON TEAM, PROP LIST
   MOGGI E, 1991, INFORM COMPUT, V93, P55, DOI 10.1016/0890-5401(91)90052-4
   MONAGAN MB, 2001, MAPLE 7 PROGRAMMING
   MUSSER DR, 1989, LECT NOTES COMPUT SC, V358, P13
   MUSSER DR, 1994, SOFTWARE PRACT EXPER, V24, P623, DOI 10.1002/spe.4380240703
   Parnas D. L., 1976, IEEE Transactions on Software Engineering, VSe-2, P1, DOI 10.1109/TSE.1976.233797
   PARNAS DL, 1972, COMMUN ACM, V15, P1053, DOI 10.1145/361598.361623
   Puschel M., P IEEE, V93
   Siek J., 2002, The Boost Graph Library: User Guide and Reference Manual
   Swadi K., 2006, PEPM, V06
   Taha W, 2003, ACM SIGPLAN NOTICES, V38, P26, DOI 10.1145/640128.604134
   Taha W., 1997, Proceedings of the ACM SIGPLAN Symposium on Partial Evaluation and Semantics-Based Program Manipulation, PEPM '97, P203, DOI 10.1145/258994.259019
   Taha W., 2000, PEPM, P34, DOI DOI 10.1145/328690.328697
   Taha W., 1999, THESIS OREGON GRADUA
   Veldhuizen T. L., 2004, THESIS INDIANA U COM
   Veldhuizen TL, 1998, LECT NOTES COMPUT SC, V1505, P223
   Watt StephenM., 2003, HDB COMPUTER ALGEBRA, P265
   Whaley RC, 2001, PARALLEL COMPUT, V27, P3, DOI 10.1016/S0167-8191(00)00087-9
   Zhou WQ, 2006, LECT NOTES ARTIF INT, V4120, P254
NR 51
TC 18
Z9 17
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAY 1
PY 2011
VL 76
IS 5
SI SI
BP 349
EP 375
DI 10.1016/j.scico.2008.09.008
PG 27
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 748JN
UT WOS:000289387000002
DA 2024-07-18
ER

PT J
AU Huang, SS
   Zook, D
   Smaragdakis, Y
AF Huang, Shan Shan
   Zook, David
   Smaragdakis, Yannis
TI Statically safe program generation with SafeGen
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Meta-programming; Domain-specific languages; Language extensions
ID LANGUAGES
AB SafeGen is a meta-programming language for writing statically safe generators of Java programs. If a program generator written in SafeGen passes the checks of the SafeGen compiler, then the generator will only generate well-formed Java programs, for any generator input. In other words, statically checking the generator guarantees the correctness of any generated program, with respect to static checks commonly performed by a conventional compiler (including type safety, existence of a superclass, etc.). To achieve this guarantee, SafeGen supports only language primitives for reflection over an existing well-formed Java program, primitives for creating program fragments, and a restricted set of constructs for iteration, conditional actions, and name generation. SafeGen's static checking algorithm is a combination of traditional type checking for Java, and a series of calls to a theorem prover to check the validity of first-order logical sentences, constructed to represent well-formedness properties of the generated program under all inputs. The approach has worked quite well in our tests, providing proofs for correct generators or pointing out interesting bugs. (C) 2008 Elsevier B.V. All rights reserved.
C1 [Huang, Shan Shan; Zook, David] Georgia Inst Technol, Coll Comp, Atlanta, GA 30332 USA.
   [Smaragdakis, Yannis] Univ Massachusetts, Dept Comp Sci, Amherst, MA 01003 USA.
C3 University System of Georgia; Georgia Institute of Technology;
   University of Massachusetts System; University of Massachusetts Amherst
RP Huang, SS (corresponding author), Georgia Inst Technol, Coll Comp, Atlanta, GA 30332 USA.
EM ssh@cc.gatech.edu; dzook@cc.gatech.edu; yannis@cs.umass.edu
RI Smaragdakis, Yannis/AAM-2851-2021
FU National Science Foundation [CCR-0238289]
FX This research was supported by the National Science Foundation under
   Grant No. CCR-0238289.
CR Andreka H, 1998, J PHILOS LOGIC, V27, P217, DOI 10.1023/A:1004275029985
   BACHRACH J, 2001, OOPSLA 2001 C P, P31, DOI DOI 10.1145/504311.504285
   Baker Jason., 2002, PLDI 02, P270
   Batory D, 2003, PROC INT CONF SOFTW, P187, DOI 10.1109/ICSE.2003.1201199
   Batory D, 1998, FIFTH INTERNATIONAL CONFERENCE ON SOFTWARE REUSE - PROCEEDINGS, P143, DOI 10.1109/ICSR.1998.685739
   BRYANT A., 2002, P 1 INT C ASP OR SOF, P10
   BURKE B, JBOSS AOP
   Calcagno C, 2003, LECT NOTES COMPUT SC, V2830, P57
   DRAHEIM D, 2005, GENERATIVE PROGRAMMI
   FAHNDRICH M, 2006, GPCE 06, P275
   FLANAGAN C, 2002, P ACM SIGPLAN 2002 C, P234
   GAMMA E, 1995, ADDISONWESLEY PROFES
   Ganzinger H., 1999, Proceedings. 14th Symposium on Logic in Computer Science (Cat. No. PR00158), P295, DOI 10.1109/LICS.1999.782624
   Gosling J., 2015, The Java Language Specification
   Gradel E., 2003, P KALM WORKSH LOG CO
   Huang S.S., 2007, PROC 6 INT C ASPECT, P185
   HUANG SS, 2006, ICSE 06, P865
   *JAV, JAV COLL FRAM
   Kiczales G, 1997, LECT NOTES COMPUT SC, V1241, P220, DOI 10.1007/BFb0053381
   Kiczales Gregor., 2001, Proceedings of the 15th European Conference on Object-Oriented Programming, P327
   Mohnen M., 2002, P INAUGURAL C PRINCI, P35
   PASALIC E, 2002, INT C FUNCT PROGR IC, P218
   Sheard T, 2002, ACM SIGPLAN NOTICES, V37, P60, DOI 10.1145/636517.636528
   Taha W., 1997, Proceedings of the ACM SIGPLAN Symposium on Partial Evaluation and Semantics-Based Program Manipulation, PEPM '97, P203, DOI 10.1145/258994.259019
   TILEVICH E, 2003, P AUT SOFTW ENG ASE
   Visser E, 2002, LECT NOTES COMPUT SC, V2487, P299
   WARTH A, 2006, OOPSLA 06, P37
   WEIDENBACH C, THEORY SPASS VERSION
   WEISE D, 1993, SIGPLAN C PROGR LANG, P156
   ZOOK D, 2004, P 3 INT C GEN PROGR, P1
NR 30
TC 6
Z9 7
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAY 1
PY 2011
VL 76
IS 5
SI SI
BP 376
EP 391
DI 10.1016/j.scico.2008.09.007
PG 16
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 748JN
UT WOS:000289387000003
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Schlich, B
   Brauer, J
   Kowalewski, S
AF Schlich, Bastian
   Brauer, Joerg
   Kowalewski, Stefan
TI Application of static analyses for state-space reduction to the
   microcontroller binary code
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Static analysis; Model checking; Abstraction; Embedded software; Binary
   code
ID MODEL CHECKER; ABSTRACTION
AB This paper describes the application of two abstraction techniques, namely dead variable reduction and path reduction, to the microcontroller binary code in order to tackle the state-explosion problem in model checking. These abstraction techniques are based on static analyses, which have to cope with the peculiarities of the binary code such as hardware dependencies, interrupts, recursion, and globally accessible memory locations. An interprocedural static analysis framework is presented that handles these peculiarities. Based on this framework, extensions of dead variable reduction and path reduction are detailed. A case study using several microcontroller programs is presented in order to demonstrate the efficiency of the described abstraction techniques. (C) 2010 Elsevier B.V. All rights reserved.
C1 [Schlich, Bastian; Brauer, Joerg; Kowalewski, Stefan] Rhein Westfal TH Aachen, Embedded Software Lab, D-52074 Aachen, Germany.
C3 RWTH Aachen University
RP Schlich, B (corresponding author), Rhein Westfal TH Aachen, Embedded Software Lab, Ahornstr 55, D-52074 Aachen, Germany.
EM schlich@embedded.rwth-aachen.de; brauer@embedded.rwth-aachen.de;
   kowalewski@embedded.rwth-aachen.de
CR *ATM CORP, 2008, DAT ATMEGA16
   *ATM CORP, 2008, 8 BIT AVR INSTR SET
   Baier C, 2008, PRINCIPLES OF MODEL CHECKING, P1
   Balakrishnan G, 2008, LECT NOTES COMPUT SC, V4171, P202
   Ball T, 2000, LECT NOTES COMPUT SC, V1885, P113
   Beckers J, 2008, LECT NOTES COMPUT SC, V5238, P112
   Bozga M, 1999, LECT NOTES COMPUT SC, V1694, P164
   Brauer J, 2009, ELECTRON NOTES THEOR, V254, P45, DOI 10.1016/j.entcs.2009.09.059
   Clarke E, 2001, LECT NOTES COMPUT SC, V2000, P176
   Clarke EM, 1999, MODEL CHECKING, P1
   Corbett J. C., 2000, Proceedings of the 2000 International Conference on Software Engineering. ICSE 2000 the New Millennium, P439, DOI 10.1109/ICSE.2000.870434
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Davey B. A., 2002, INTRO LATTICES ORDER, V2nd, DOI DOI 10.1017/CBO9780511809088
   EMERSON EA, 1991, HDB THEORETICAL COMP, VB, P995
   HECHT MS, 1997, FLOW ANAL COMPUTER P
   Heljanko K, 1997, A45 HELS U TECHN DIG
   Holzmann GJ, 1999, LECT NOTES COMPUT SC, V1680, P232
   Kildall Gary A., 1973, Proceedings of the 1st Annual ACM SIGACT-SIGPLAN Symposium on Principles of Programming Languages. POPL'73, P194
   King A, 2008, LECT NOTES COMPUT SC, V5123, P281
   King A, 2010, LECT NOTES COMPUT SC, V5944, P197, DOI 10.1007/978-3-642-11319-2_16
   Kosakai T, 2007, LECT NOTES COMPUT SC, V4846, P17
   Leven P, 2004, LECT NOTES COMPUT SC, V2989, P39
   Lewis Micah., 2006, Proceedings of the 2006 ACM SIGPLAN symposium on Partial evaluation and semantics-based program manipulation, PEPM'06, P48
   MARLOWE TJ, 1990, ACTA INFORM, V28, P121, DOI 10.1007/BF01237234
   MEHLER T, 2005, THESIS U DORTMUND
   Mercer E, 2005, LECT NOTES COMPUT SC, V3639, P251
   Morrisett G, 1999, ACM T PROGR LANG SYS, V21, P527, DOI 10.1145/319301.319345
   Nielson F., 1999, Principles of Program Analysis
   Noll T, 2008, LECT NOTES COMPUT SC, V4899, P185
   QUIROS G, 2006, THESIS RWTH AACHEN U
   Regehr J, 2003, LECT NOTES COMPUT SC, V2855, P306
   Regehr J, 2007, ELECTRON NOTES THEOR, V174, P139, DOI 10.1016/j.entcs.2007.04.002
   REINBACHER T, 2009, IND EMBEDDED SYSTEMS, P161
   SCHLICH B, 2009, DEPENDABLE CONTROL D
   SCHLICH B, 2006, LEVERAGING APPL FORM, P466
   SCHLICH B, 2008, THESIS RWTH AACHEN U
   SCHLICH B, 2006, AIB200611 RWTH AACH
   Schlich B, 2008, LECT NOTES COMPUT SC, V4916, P21
   SCHWARZ B, 2001, WORKSH BIN TRANSL WB
   Self JP, 2007, LECT NOTES COMPUT SC, V4595, P113
   Sharir M., 1981, Program flow analysis. Theory and applications, P189
   VanGlabbeek RJ, 1996, J ACM, V43, P555, DOI 10.1145/233551.233556
   VERGAUWEN B, 1993, LNCS, V715, P447
   VITEK J, 1992, LECT NOTES COMPUT SC, V641, P236
   Yorav K, 2004, FORM METHOD SYST DES, V25, P67, DOI 10.1023/B:FORM.0000033963.55470.9e
NR 45
TC 12
Z9 12
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 1
PY 2011
VL 76
IS 2
SI SI
BP 100
EP 118
DI 10.1016/j.scico.2010.03.006
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 693JO
UT WOS:000285220600004
DA 2024-07-18
ER

PT J
AU Jin, Y
   Parnas, DL
AF Jin, Ying
   Parnas, David Lorge
TI Defining the meaning of tabular mathematical expressions
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Tabular expressions; Software documentation; Mathematical documentation;
   Expression semantics; Software engineering
ID DOCUMENTATION; SYSTEMS
AB Mathematical expressions in tabular form (also called "tabular expressions" or "tables") have been shown to be useful for documenting and analysing software systems. They are usually easier to read than conventional mathematical expressions but are no less precise. They can be used wherever mathematical expressions are used. To avoid misunderstandings, and to support users with trustworthy tools, the meaning of these expressions must be fully defined.
   This paper presents a new method for defining the meaning of tabular expressions. Each definition of an expression type names the expression's constituents, and provides a restriction schema and one or more evaluation schemas. The restriction schema defines the class of well-formed expressions of the type. An evaluation schema maps a well-formed tabular expression of the type to a mathematical expression of a previously defined type. Since the meaning of conventional mathematical expressions is well known, describing an equivalent expression fully defines the meaning of a tabular expression.
   In this approach, indexation is used to decouple the appearance of a tabular expression from its semantics. A tabular expression is an indexed set of grids; a grid is an indexed set of expressions. The expressions in a grid can be either conventional expressions or tabular expressions of a previously defined type.
   Defining the meaning of a tabular expression in this way facilitates the building of tools that faithfully implement the semantics. The decoupling of syntax and semantics by means of indices overcomes some limitations of older approaches.
   The method presented in the paper is illustrated by defining several previously known types of tabular expressions and some new ones. The use of the new model to build a suite of tools for the input, presentation, validation, evaluation, simplification, conversion and composition of tabular expressions is discussed. (C) 2009 Elsevier B.V. All rights reserved.
C1 [Parnas, David Lorge] Univ Limerick, Limerick, Ireland.
   [Parnas, David Lorge] McMaster Univ, Hamilton, ON L8S 4L8, Canada.
   [Jin, Ying] Jilin Univ, Coll Comp Sci & Technol, Changchun 130023, Peoples R China.
C3 University of Limerick; McMaster University; Jilin University
RP Parnas, DL (corresponding author), Univ Limerick, Limerick, Ireland.
EM parnas@mcmaster.ca
FU Science Foundation Ireland; China "863" High-tech Research and
   Development Program [2007AA01Z123]
FX Research supported by Science Foundation Ireland until 31 March 2008
   through the Software Quality Research Laboratory at the University of
   Limerick. Since 2007 it has also been supported by China "863" High-tech
   Research and Development Program under the grant No. 2007AA01Z123. This
   work was started when both authors were with the Software Quality
   Research Laboratory at the University of Limerick, Ireland.
CR ABRAHAM RF, 1997, THESIS MCMASTER U
   [Anonymous], P INT C INF TECHN CO
   [Anonymous], 1987, Introduction to Mathematical Logic
   Desharnais J, 2001, STUD FUZZ SOFT COMP, V65, P3
   FU T, 1999, 38039 SERG MCMAST U
   HALMOS PR, 1987, NAIVE SET THEORY
   Heitmeyer C., 2002, Encyclopedia of Software Engineering, Vsecond
   HEITMEYER CL, 2007, P 2007 IEEE AER C BI
   HENINGER K, 1980, IEEE T SOFTWARE ENG, V6
   Heninger K.L, 1978, NRL Memorandum Report 3876
   HESTER SD, 1981, BELL SYST TECH J, V60, P1941, DOI 10.1002/j.1538-7305.1981.tb00304.x
   Hoffman D., 2001, SOFTWARE FUNDAMENTAL
   Janicki R, 2001, SCI COMPUT PROGRAM, V39, P189, DOI 10.1016/S0167-6423(00)00004-6
   JANICKI R, 1995, PROC INT CONF SOFTW, P231, DOI 10.1145/225014.225036
   JANICKI R, 1997, RELATIONAL METHODS C, P184
   JANICKI R, 1997, 35538 CRL MCMAST U
   KAHL W, 2003, 1540 SQRL QUAL RES L
   PARNAS DL, 1995, SCI COMPUT PROGRAM, V25, P41, DOI 10.1016/0167-6423(95)96871-J
   Parnas DL, 1999, LECT NOTES COMPUT SC, V1579, P345
   PARNAS DL, 1994, IEEE T SOFTWARE ENG, V20, P948, DOI 10.1109/32.368133
   PARNAS DL, 1993, IEEE T SOFTWARE ENG, V19, P856, DOI 10.1109/32.241769
   PARNAS DL, 1976, P C DAT DEF STRUCT, P22
   PARNAS DL, 1989, 89261 TRIO
   PARNAS DL, 1991, NUCL SAFETY, V32
   PARNAS DL, 1994, IEEE T SOFTWARE ENG, V19, P750
   PARNAS DL, 2001, OCEANOGRAPHY, V14, P41
   PARNAS DL, 1994, P IFIP WORLD C, V3, P270
   PARNAS DL, 1992, 26038 CRL MCMAST U C
   Peters DK, 2002, IEEE T SOFTWARE ENG, V28, P146, DOI 10.1109/32.988496
   Peters DK, 1998, IEEE T SOFTWARE ENG, V24, P161, DOI 10.1109/32.667877
   QUINN C, 2006, P INT C SOFTW ENG AD
   SHEN H, 1995, 31538 TRIO MCMAST U
   Shen HH, 1996, ADV CONCURRENT ENGN, V96, P3
   *SOFTW ENG RES GRO, 1997, 33938 CRL TRIO MCMAS
   Wassyng A, 2003, LECT NOTES COMPUT SC, V2805, P133
   WILDER A, 1996, NOTES 2 YEAR UNDERGR
   Zucker J. I., 1996, Formal Aspects of Computing, V8, P679, DOI 10.1007/BF01213494
   ZUCKER JI, 1998, 9801 CAS CRL
NR 38
TC 21
Z9 25
U1 0
U2 4
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 1
PY 2010
VL 75
IS 11
SI SI
BP 980
EP 1000
DI 10.1016/j.scico.2009.12.009
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 641MD
UT WOS:000281129600004
DA 2024-07-18
ER

PT J
AU Bravenboer, M
   Dolstra, E
   Visser, E
AF Bravenboer, Martin
   Dolstra, Eelco
   Visser, Eelco
TI Preventing injection attacks with syntax embeddings
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 6th International Conference on Generative Programming and Component
   Engineering
CY OCT 01-03, 2007
CL Salzburg, AUSTRIA
SP ACM SIGPLAN, ACM SIGSOFT
DE Injection attacks; Security; Syntax embedding; Program generation;
   Program transformation; Concrete object syntax
ID PROGRAMS
AB Software written in one language often needs to construct sentences in another language, such as SQL queries, XML output, or shell command invocations. This is almost always clone using unhygienic string manipulation, the concatenation of constants and client-supplied strings. A client can then supply specially crafted input that causes the constructed sentence to be interpreted in an unintended way, leading to an injection attack. We describe a more natural style of programming that yields code that is impervious to injections by construction. Our approach embeds the grammars of the guest languages (e.g. SQL) into that of the host language (e.g. Java) and automatically generates code that maps the embedded language to constructs in the host language that reconstruct the embedded sentences, addling escaping functions where appropriate. This approach is generic, meaning that it can be applied with relative ease to any combination of context-free host and guest languages. (C) 2009 Elsevier B.V. All rights reserved.
C1 [Bravenboer, Martin] Univ Massachusetts, Dept Comp Sci, Amherst, MA 01003 USA.
   [Dolstra, Eelco; Visser, Eelco] Delft Univ Technol, Dept Software Technol, NL-2628 CD Delft, Netherlands.
C3 University of Massachusetts System; University of Massachusetts Amherst;
   Delft University of Technology
RP Bravenboer, M (corresponding author), Univ Massachusetts, Dept Comp Sci, 140 Governors Dr, Amherst, MA 01003 USA.
EM martin.bravenboer@acm.org; e.dolstra@tudelft.nl; visser@acm.org
OI Visser, Eelco/0000-0002-7384-3370
CR Anley C., 2002, Advanced SQL Injection
   [Anonymous], 1992, 90751992 ISOIEC
   [Anonymous], 2005, INPROCEEDINGS 20 IEE
   Batory D, 1998, FIFTH INTERNATIONAL CONFERENCE ON SOFTWARE REUSE - PROCEEDINGS, P143, DOI 10.1109/ICSR.1998.685739
   Bierman G, 2005, LECT NOTES COMPUT SC, V3586, P287
   Bouwers E, 2008, ELECTRON NOTES THEOR, V203, P85, DOI 10.1016/j.entcs.2008.03.046
   BRACHA G, 1990, SIGPLAN NOTICES, V25, P303, DOI 10.1145/97946.97982
   Bravenboer M, 2005, LECT NOTES COMPUT SC, V3676, P157
   Bravenboer M, 2004, ACM SIGPLAN NOTICES, V39, P365, DOI 10.1145/1035292.1029007
   BRAVENBOER M, 2006, P 21 ACM SIGPLAN C O
   BRAVENBOER M, 2008, THESIS UTRECHT U UTR
   Bravenboer M, 2008, SCI COMPUT PROGRAM, V72, P52, DOI 10.1016/j.scico.2007.11.003
   BUEHRER GT, 2005, 5 INT WORKSH SOFTW E
   CHARLES P, 1991, THESIS NEW YORK U
   Christensen AS, 2003, LECT NOTES COMPUT SC, V2694, P1
   Cook WR, 2005, PROC INT CONF SOFTW, P97
   Ekman T., 2007, Proceedings of the 22nd annual ACM SIGPLAN conference on Object-oriented programming systems and applications, P1, DOI [10.1145/1297027.1297029, DOI 10.1145/1297027.1297029]
   ESTUBLIER J, 2004, P 26 INT C SOFTW ENG
   Gould C, 2004, PROC INT CONF SOFTW, P697, DOI 10.1109/ICSE.2004.1317494
   Halfond W. G., 2006, P IEEE INT S SEC SOF
   HALFOND WG, 2006, FDN SOFTWARE ENG FSE
   Hopcroft J. E., 2006, INTRO AUTOMATA THEOR
   Huang XG, 2004, CHINESE J ELECTRON, V13, P40
   Jeffery CL, 2003, ACM T PROGR LANG SYS, V25, P631, DOI 10.1145/937563.937566
   Leijen D, 1999, USENIX ASSOCIATION PROCEEDINGS OF THE 2ND CONFERENCE ON DOMAIN-SPECIFIC LANGUAGES (DSL'99), P109, DOI 10.1145/331963.331977
   Livshits VB, 2005, USENIX ASSOCIATION PROCEEDINGS OF THE 14TH USENIX SECURITY SYMPOSIUM, P271
   Maor O., 2004, SQL INJECTION SIGNAT
   McClure RA, 2005, PROC INT CONF SOFTW, P88
   MEIJER E, 2001, 2000 ACM SIGPLAN HAS
   MOLLER A, 2005, DK BRICS AUTOMATON F
   Nystrom N, 2003, LECT NOTES COMPUT SC, V2622, P138
   Roman G.-C, 2005, P 27 INT C SOFTW ENG
   Su Z., 2006, Conference record of the 33rd ACM SIGPLAN-SIGACT symposium on principles of programming languages, P372, DOI DOI 10.1145/1111037.1111070
   VALKERING R, 2007, THESIS U AMSTERDAM A
   VANWYK E, 2007, LECT NOTES COMPUTER
   Visser E, 2002, LECT NOTES COMPUT SC, V2487, P299
   Visser Eelco, 1997, Syntax Definition for Language Prototyping
   Xie YC, 2006, USENIX Association Proceedings of the 15th USENIX Security Symposium, P179
   Zook D, 2004, LECT NOTES COMPUT SC, V3286, P1
NR 39
TC 9
Z9 12
U1 0
U2 8
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUL 1
PY 2010
VL 75
IS 7
SI SI
BP 473
EP 495
DI 10.1016/j.scico.2009.05.004
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 603YE
UT WOS:000278243200002
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Casadei, M
   Viroli, M
   Gardelli, L
AF Casadei, Matteo
   Viroli, Mirko
   Gardelli, Luca
TI On the collective sort problem for distributed tuple spaces
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 5th International Workshop on the Foundations of Coordination Languages
   and Software Architectures (FOCLASA'06)
CY AUG 31, 2006
CL Bonn, GERMANY
DE Self-organizing systems; Tuple spaces; Stochastic simulations;
   Collective sort
AB In systems coordinated with a distributed set of tuple spaces, it is crucial to assist agents in retrieving the tuples they are interested in. This can be achieved by sorting techniques that group similar tuples together in the same tuple space, so that the position of a tuple can be inferred by similarity. Accordingly. we formulate the collective sort problem for distributed tuple spaces, where a set of agents is in charge of moving tuples up to a complete sort has been reached, namely, each of the N tuple spaces aggregate tuples belonging to one of the N kinds available. After pointing out the requirements for effectively tackling this problem, we propose a self-organizing solution resembling brood sorting performed by ants. This is based on simple agents that perform partial observations and accordingly take decisions on tuple movement. Convergence is addressed by a fully adaptive method for simulated annealing, based on noise tuples inserted and removed by agents on a need basis so as to avoid sub-optimal sorting. Emergence of sorting properties and scalability are evaluated through stochastic simulations. (C) 2009 Elsevier B.V. All rights reserved.
C1 [Casadei, Matteo; Viroli, Mirko; Gardelli, Luca] Alma Mater Studiorum Univ Bologna, I-47023 Cesena, Italy.
C3 University of Bologna
RP Casadei, M (corresponding author), Alma Mater Studiorum Univ Bologna, Via Venezia 52, I-47023 Cesena, Italy.
EM m.casadei@unibo.it; mirko.viroli@unibo.it; luca.gardelli@unibo.it
OI Viroli, Mirko/0000-0003-2702-5702
CR [Anonymous], SANTA FE I STUDIES S
   Balazinska M, 2007, IEEE PERVAS COMPUT, V6, P30, DOI 10.1109/MPRV.2007.27
   BALQIES S, 2000, INF SCI, V124, P173
   CAMAZINE S, 1991, BEHAV ECOL SOCIOBIOL, V28, P61, DOI 10.1007/BF00172140
   Camazine Scott, 2020, Self-organization in Biological Systems
   CASADEI M, 2007, ELECT NOTES THEORETI, V175
   CICIRIELLO P, 2007, LNCS, V4486, P34
   CLAVEL M, 2005, MAUDE MANUAL
   DENEUBOURG JL, 1991, FROM ANIMALS TO ANIMATS, P356
   DORIGO M, 2005, KUNSTLICHE INTELLIGE, V4, P32
   FRANKS NR, 1992, BEHAV ECOL SOCIOBIOL, V30, P109
   GARDELLI L, 2006, 3 INT WORKSH ENV MUL
   Gardelli L, 2005, LECT NOTES ARTIF INT, V3910, P153
   GELERNTER D, 1985, ACM T PROGR LANG SYS, V7, P80, DOI 10.1145/2363.2433
   Gelernter D., 1989, PARLE '89. Parallel Architectures and Languages Europe. Vol. II: Parallel Languages Proceedings, P20
   Jain AK, 1999, ACM COMPUT SURV, V31, P264, DOI 10.1145/331499.331504
   KIRKPATRICK S, 1983, SCIENCE, V220, P671, DOI 10.1126/science.220.4598.671
   Krishnamachari B., 2002, P 22 INT C DISTR COM
   Kwiatkowska M.Z., 2007, LNCS, V4486
   LUMER ED, 1994, COM ADAP SY, P501
   MAMEI M, 2004, PERV COMP COMM 2004
   MAMEI M, 2005, 4 INT JOINT C AUT AG
   Melhuish C, 2006, J R SOC INTERFACE, V3, P235, DOI 10.1098/rsif.2005.0081
   Melhuish C, 1998, FROM ANIM ANIMAT, P465
   Menezes R, 2004, LECT NOTES ARTIF INT, V2977, P212
   MENEZES R, 2003, S APPL COMP SAC 03
   NICOLA RD, 2005, S APPL COMP SAC 05
   Omicini A., 1999, Autonomous Agents and Multi-Agent Systems, V2, P251, DOI 10.1023/A:1010060322135
   Omicini A, 2001, SCI COMPUT PROGRAM, V41, P277, DOI 10.1016/S0167-6423(01)00011-9
   PHILLIPS A, 2006, STOCHASTIC PI MACHIN
   PLOTKIN G, 1991, FN19 DAIMI AARHUS U
   Resnick M., 1997, Turtles, termites, and traffic jams: Explorations in massively parallel microworlds
   RUTTEN J, 2004, CRM MONOGRAPH, V23
   Shannon C.E., BELL SYSTEM TECHNICA, V27
   VIROLI M, 2007, P 2007 ACM S APPL CO
   YAMINS D, 2008, 7 INT JOINT C AG MUL
   Yaneer B Y., 1997, Dynamics of Complex Systems
   Yuen K, 2008, IEEE T VEH TECHNOL, V57, P578, DOI 10.1109/TVT.2007.905243
   2006, RECURSIVE POROUS AGE
NR 39
TC 6
Z9 8
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUL 1
PY 2009
VL 74
IS 9
SI SI
BP 702
EP 722
DI 10.1016/j.scico.2008.09.018
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 462TT
UT WOS:000267380200004
DA 2024-07-18
ER

PT J
AU Bradel, BJ
   Abdelrahman, TS
AF Bradel, Borys J.
   Abdelrahman, Tarek S.
TI A study of potential parallelism among traces in Java programs
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Traces; Parallelism; Code optimization; Java; Benchmark characterization
AB The exploitation of parallelism among traces, i.e. hot paths of execution in programs, is a novel approach to the automatic parallelization of Java programs and it has many advantages. However, to date, the extent to which parallelism exists among traces in programs has not been made clear. The goal of this study is to measure the amount of trace-level parallelism in several Java programs. We extend the Jupiter Java Virtual Machine with a simulator that models an abstract parallel system. We use this simulator to measure trace-level parallelism. We further use it to examine the effects of the number of processors, trace window size, and communication type and cost on performance. We also analyze the dependence characteristics of the benchmarks and see how they relate to parallelism. The results indicate that enough trace-level parallelism exists for a modest number of processors. Thus, we conclude that trace-based parallelization is a potentially viable approach to improve the performance of Java programs. (C) 2009 Elsevier B.V. All rights reserved.
C1 [Bradel, Borys J.; Abdelrahman, Tarek S.] Univ Toronto, Edward S Rogers Sr Dept Elect & Comp Engn, Toronto, ON M5S 3G4, Canada.
C3 University of Toronto
RP Bradel, BJ (corresponding author), Univ Toronto, Edward S Rogers Sr Dept Elect & Comp Engn, Toronto, ON M5S 3G4, Canada.
EM bradel@eecg.toronto.edu; tsa@eecg.toronto.edu
CR Ammons Glenn., 1998, PLDI 98 P ACM SIGPLA, P72, DOI DOI 10.1145/277652.277665
   BACON DF, 1994, ACM COMPUT SURV, V26, P345, DOI 10.1145/197405.197406
   Bala V, 2000, ACM SIGPLAN NOTICES, V35, P1, DOI 10.1145/358438.349303
   Bala V., 1999, TRANSPARENT DYNAMIC
   Ball T, 1996, PROCEEDINGS OF THE 29TH ANNUAL IEEE/ACM INTERNATIONAL SYMPOSIUM ON MICROARCHITECTURE - MICRO-29, P46, DOI 10.1109/MICRO.1996.566449
   Berndl M, 2003, INT SYM CODE GENER, P276, DOI 10.1109/CGO.2003.1191552
   BRADEL BJ, 2004, THESIS U TORONTO
   BRADEL BJ, 2007, P INT C PAR PROC ICP
   Bruening D, 2003, INT SYM CODE GENER, P265, DOI 10.1109/CGO.2003.1191551
   BRUENING D, 2001, P 4 WORKSH FEEDB DIR
   BRUENING D, 2000, P 3 WORKSH FEEDB DIR
   Cahoon B, 2001, 2001 INTERNATIONAL CONFERENCE ON PARALLEL ARCHITECTURES AND COMPILATION TECHNIQUES, PROCEEDINGS, P280, DOI 10.1109/PACT.2001.953309
   Chan B., 2001, Proceedings of the IASTED International Conference. Parallel and Distributed Computing and Systems, P113
   Chen M, 2003, INT SYM CODE GENER, P301, DOI 10.1109/CGO.2003.1191554
   Chen MK, 2003, CONF PROC INT SYMP C, P434, DOI 10.1109/ISCA.2003.1207020
   DOYLE P, 2002, THESIS U TORONTO
   DU Z, 2004, P ACM SIGPLAN C PROG, P59
   FISHER JA, 1981, IEEE T COMPUT, V30, P478, DOI 10.1109/TC.1981.1675827
   Friendly DH, 1998, 31ST ANNUAL ACM/IEEE INTERNATIONAL SYMPOSIUM ON MICROARCHITECTURE, PROCEEDINGS, P173, DOI 10.1109/MICRO.1998.742779
   Geer D, 2005, COMPUTER, V38, P11, DOI 10.1109/MC.2005.160
   Jacobson Q, 1997, INT SYMP MICROARCH, P14, DOI 10.1109/MICRO.1997.645793
   JOHNSON TA, 2004, P ACM SIGPLAN 2004 C, P59
   LEUNG ST, 1993, P 4 ACM SIGPLAN S PR, P83
   Obata M., 2001, PROC INT WORKSHOP CO, P173
   Rauchwerger L., 1995, PROC C PROGRAMMING L, P218
   Rotenberg E, 1997, INT SYMP MICROARCH, P138, DOI 10.1109/MICRO.1997.645805
   Steffan JG, 2000, PROCEEDING OF THE 27TH INTERNATIONAL SYMPOSIUM ON COMPUTER ARCHITECTURE, P1, DOI [10.1145/342001.339650, 10.1109/ISCA.2000.854372]
   *U MASS AMH ARCH L, 2003, JOLD
   Wu M.-Y., 1990, IEEE Transactions on Parallel and Distributed Systems, V1, P330, DOI 10.1109/71.80160
   Wu M.-Y., 2007, MCP SOURCE CODE
   Yasue T., 2004, J INSTRUCTION LEVEL, V6, P1
   2003, JAVA GRANDE FORUM BE
NR 32
TC 0
Z9 1
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR 1
PY 2009
VL 74
IS 5-6
SI SI
BP 296
EP 313
DI 10.1016/j.scico.2009.01.004
PG 18
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 436CT
UT WOS:000265390900004
OA Bronze
DA 2024-07-18
ER

PT J
AU Barjis, J
AF Barjis, Joseph
TI The importance of business process modeling in soft ware systems design
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE requirements' specifications; model checking; business process modeling;
   business process simulation; modeling technique; petri nets; DEMO;
   language-action perspective
ID UML
AB Despite diligent efforts made by the software engineering community, the failure of software projects keeps increasing at an alarming rate. After two decades of this problem reoccurring, one of the leading causes for the high failure rate is still poor process modeling (requirements' specification). Therefore both researchers and practitioners recognize the importance of business process modeling in understanding and designing accurate software systems. However, lack of direct model checking (verification) feature is one of the main shortcomings in conventional process modeling methods. It is important that models provide verifiable insight into underlying business processes in order to design complex software systems such as Enterprise Information Systems (EIS). The software engineering community has been deploying the same methods that have haunted the industry with failure. In this paper, we try to remedy this issue by looking at a non-conventional framework. We introduce a business process modeling method that is amenable to automatic analysis (simulation), yet powerful enough to capture the rich reality of business systems as enacted in the behavior and interactions of users. The proposed method is based on the innovative language-action perspective. (c) 2008 Elsevier B.V. All rights reserved.
C1 Delft Univ Technol, NL-2628 BX Delft, Netherlands.
C3 Delft University of Technology
RP Barjis, J (corresponding author), Delft Univ Technol, Jaffalaan 5, NL-2628 BX Delft, Netherlands.
EM JBarjis@uwsp.edu
CR ALEXANDER IF, 2002, WRITING REQUIREMENTS
   [Anonymous], HARVARD BUSINESS REV
   [Anonymous], 1997, SAP R 3 BUSINESS BLU
   [Anonymous], 2002, Workflow management: models, methods, and systems
   Dehnert J, 2004, INT J COOP INF SYST, V13, P289, DOI 10.1142/S0218843004000973
   DEITERS W, 1998, BUSINESS PROCESS MAN
   Dietz J. L. G., 1994, Proceedings of the Twenty-Seventh Hawaii International Conference on System Sciences. Vol.IV: Information Systems: Collaboration Technology Organizational Systems and Technology (Cat. No.94TH0607-2), P723, DOI 10.1109/HICSS.1994.323436
   Dietz J.L. G., 2006, ENTERPRISE ONTOLOGY
   DIETZ JLG, 1999, P ANN INT C CONC MOD
   DIETZ JLG, 2002, P 7 INT WORKSH LAP D
   Eichner C, 2005, LECT NOTES COMPUT SC, V3530, P133
   Eshuis R, 2006, ACM T SOFTW ENG METH, V15, P1, DOI 10.1145/1125808.1125809
   GOLDKUHL G, 2006, P 10 INT WORK C LANG
   Hevner AR, 2004, MIS QUART, V28, P75, DOI 10.2307/25148625
   LIND M, 2002, P 7 INT WORKSH LAP D
   LINDLAND OI, 1994, IEEE SOFTWARE, V11, P42, DOI 10.1109/52.268955
   Meehan TE, 2005, DR DOBBS J, V30, P56
   MOLDT D, 1998, BUSINESS PROCESS MAN
   Ramaswamy S, 1996, IEEE T SYST MAN CY B, V26, P164, DOI 10.1109/3477.484450
   Ramaswamy S, 1997, J MANUF SYST, V16, P175, DOI 10.1016/S0278-6125(97)88886-3
   ROBINSON AG, 1999, OR MS TODAY, V26, P30
   Siau K, 2006, INFORM SYST MANAGE, V23, P43, DOI 10.1201/1078.10580530/46108.23.3.20060601/93706.5
   Smith H., 2003, BUSINESS PROCESS MAN
   STAMPER RK, 1988, MEASUR
   *STAND GROUP INT I, 2004, 2004 3 QUART RES REP
   Te'eni D, 2001, MIS QUART, V25, P251, DOI 10.2307/3250931
   van Dongen B.F., 2005, P 17 C ADV INF SYST
   vanderAalst W. M. P., 2007, INT C ENT INF SYST
   VANDERAALST WMP, 1998, BUSINESS PROCESS MAN
   VANDERAALST WMP, 1996, P INT WORK C INF PRO
   Weigand H., 2001, P 6 INT WORKSH LANG
NR 31
TC 54
Z9 66
U1 3
U2 6
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR 1
PY 2008
VL 71
IS 1
BP 73
EP 87
DI 10.1016/j.scico.2008.01.002
PG 15
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 283MX
UT WOS:000254641400004
OA Bronze
DA 2024-07-18
ER

PT J
AU Lämmel, R
AF Laemmel, Ralf
TI Google's MapReduce programming model -: Revisited
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE data processing; parallel programming; distributed programming; software
   design; executable specification; typed functional programming;
   MapReduce; Sawzall; map; reduce; list homomorphism; Haskell
AB Google's MapReduce programming model serves for processing large data sets in a massively parallel manner. We deliver the first rigorous description of the model including its advancement as Google's domain-specific language Sawzall. To this end, we reverse-engineer the seminal papers on MapReduce and Sawzall, and we capture our findings as an executable specification. We also identify and resolve some obscurities in the informal presentation given in the seminal papers. We use typed functional programming (specifically Haskell) as a tool for design recovery and executable specification. Our development comprises three components: (i) the basic program skeleton that underlies MapReduce computations; (ii) the opportunities for parallelism in executing MapReduce computations; (iii) the fundamental characteristics of Sawzall's aggregators as an advancement of the MapReduce approach. Our development does not formalize the more implementational aspects of an actual, distributed execution of MapReduce computations. (C) 2007 Elsevier B.V. All rights reserved.
C1 [Laemmel, Ralf] Microsoft Corp, Data Programmabil Team, Redmond, WA 98052 USA.
C3 Microsoft
RP Lämmel, R (corresponding author), Univ Koblenz Landau, Inst Informat B 128, Univ Str 1, D-56070 Koblenz, Germany.
EM rlaemmel@gmail.com
OI Lammel, Ralf/0000-0001-9946-4363
CR [Anonymous], 1996, Algebra of Programming
   [Anonymous], 2003, Haskell 98 language and libraries: the revised report
   AUGUSTEIJN L, 1998, LNCS, P1
   BACKUS J, 1978, COMMUN ACM, V21, P613, DOI 10.1145/359576.359579
   Bird R. S., 1987, Logic of Programming and Calculi of Discrete Design. International Summer School. Proceedings of the NATO Advanced Study Institute, P5
   Blelloch GE, 1996, COMMUN ACM, V39, P85, DOI 10.1145/227234.227246
   Borodin A., 1982, STOC 82 P 14 ANN ACM, P338
   BOUGE L, 1996, LNCS, V1123
   Cole M. I., 1995, Parallel Processing Letters, V5, P191, DOI 10.1142/S0129626495000175
   Dean J, 2004, USENIX ASSOCIATION PROCEEDINGS OF THE SIXTH SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION (OSDE '04), P137
   DeWitt D. J., 1990, IEEE Transactions on Knowledge and Data Engineering, V2, P44, DOI 10.1109/69.50905
   GAMMA E, 1995, DESIGN PATTERNS
   Ghemawat S., 2003, Operating Systems Review, V37, P29, DOI 10.1145/1165389.945450
   Gibbons J, 2002, LECT NOTES COMPUT SC, V2297, P149
   GIBBONS J, 1998, ICFP 98, P273
   GIBBONS J, 1999, J FUNCTIONAL PROGRAM, V9, P339, DOI DOI 10.1017/S0956796899003354
   HIRSCHBERG DS, 1978, COMMUN ACM, V21, P657, DOI 10.1145/359576.359582
   HUGHES J, 1989, COMPUT J, V32, P98, DOI 10.1093/comjnl/32.2.98
   Hutton G., 1999, J FUNCTIONAL PROGRAM, V9, P355, DOI DOI 10.1017/S0956796899003500
   Jones SimonPeyton., 2004, LEXICALLY SCOPED TYP
   MALCOLM G, 1990, THESIS GRONINGEN U
   MEIJER E, 1991, LECT NOTES COMPUT SC, V523, P124
   PIKE R, 2006, DYNAMIC GRIDS WORLDW, V14
   SKILLICOM DB, 1994, CAMBRIDGE SERIES PAR, V6
   Skillicorn DB, 1998, ACM COMPUT SURV, V30, P123, DOI 10.1145/280277.280278
   SKILLICORN DB, 1990, IEEE COMPUT, V23, P38
   Steele Jr Guy L., 1990, COMMON LISP LANGUAGE
   Stuckey PJ, 2005, ACM T PROGR LANG SYS, V27, P1216, DOI 10.1145/1108970.1108974
   Taniar D, 2002, INFORM SCIENCES, V146, P171, DOI 10.1016/S0020-0255(02)00196-2
   Thompson S., 1999, The Craft of Functional Programming, V2nd
NR 30
TC 227
Z9 287
U1 0
U2 61
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 1
PY 2008
VL 70
IS 1
BP 1
EP 30
DI 10.1016/j.scico.2007.07.001
PG 30
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 255DC
UT WOS:000252636000001
DA 2024-07-18
ER

PT J
AU Chothia, T
   Duggan, D
AF Chothia, Tom
   Duggan, Dominic
TI Capability passing processes
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 4th International Workshop on the Foundations of Coordination Languages
   and Software Architectures (FOCLASA'05)
CY AUG 27, 2005
CL San Francisco, CA
DE distributed systems; global agreement; atomic commitment protocols;
   process calculus
ID CALCULUS
AB Capability passing processes model global applications in a way that decouples the global agreement aspects of protocols from the details of how the communications are actually made. It relies on a restricted API or programming language and on the exchange of digital certificates representing capabilities to ensure that participants are faithful to a protocol and that outsiders cannot interfere. At the specification level, protocols are reasoned about independently of the underlying communication, using a process calculus with an abstraction of logs to isolate the remote state required for such protocols. At the implementation level, protocol steps no longer perform global communication; instead capabilities are used to transmit evidence of remote state, which in turn are used to authorize local log changes (corresponding to protocol steps). In this way, an API for global agreement protocols is defined independently of the underlying communication system. (c) 2007 Elsevier B.V. All rights reserved.
C1 Ecole Polytech, Lab Informat LIX, F-91128 Palaiseau, France.
   Stevens Inst Technol, Dept Comp Sci, Hoboken, NJ 07030 USA.
C3 Institut Polytechnique de Paris; Ecole Polytechnique; Stevens Institute
   of Technology
RP Chothia, T (corresponding author), Ecole Polytech, Lab Informat LIX, F-91128 Palaiseau, France.
EM tomc@lix.polytechnique.fr; dduggan@cs.stevens-tech.edu
RI Chothia, Tom/HDM-3159-2022
CR Abadi M, 1999, INFORM COMPUT, V148, P1, DOI 10.1006/inco.1998.2740
   Amadio RM, 1994, LECT NOTES COMPUT SC, V880, P205
   [Anonymous], 2002, 3234 RFC
   [Anonymous], 1987, Concurrency Control and Recovery in Database Systems
   Ao XH, 2000, LECT NOTES COMPUT SC, V1906, P133
   Arnold K., 1999, JINI SPECIFICATION
   BERGER M, 2000, ELECT NOTES THEOR CO, V39, P105
   BRUNI R, 2002, LECT NOTES COMPUTER, V2421, P321
   BUSI N, 2001, ELECT NOTES THEORETI, V54
   Cardelli L, 1998, LECT NOTES COMPUT SC, V1378, P140, DOI 10.1007/BFb0053547
   Chandra TD, 1996, J ACM, V43, P685, DOI 10.1145/234533.234549
   Chothia T, 2004, THEOR COMPUT SCI, V322, P567, DOI 10.1016/j.acs.2003.09.014
   CHOTHIA T, 2005, WORKSH FDN COORD LAN
   Chothia Tom, 2003, WORKSH PRINC DEP SYS
   CLARK DD, 2000, P 28 TEL POL RES C
   DeLine Robert, 2001, SIGPLAN C PROGR LANG, P59
   Duggan D., 2004, Journal of Computer Security, V12, P485
   FISCHER MJ, 1985, J ACM, V32, P374, DOI 10.1145/3149.214121
   FOURNET C, 1996, P 23 ACM S PRINC PRO, P372, DOI DOI 10.1145/237721.237805
   GONG L, 1995, ACM BALTZER J WIRELE, V1, P281
   HADZILACOS V, 1990, LECT NOTES COMPUT SC, V448, P201
   HENNESSY M, 1999, LECT NOTES COMPUTER, V1603, P5
   HONDA K, 1991, LECT NOTES COMPUT SC, V512, P133
   Malkhi D., 1997, Journal of Computer Security, V5, P113
   MILNER R, 1993, COMPUTER SYSTEMS SCI, V94, P203
   Omicini A, 2001, SCI COMPUT PROGRAM, V41, P277, DOI 10.1016/S0167-6423(01)00011-9
   Omicini A, 2005, ELECTRON NOTES THEOR, V128, P65, DOI 10.1016/j.entcs.2004.11.045
   POWELL D, 2001, P IEEE IFIP INT C DE, pD32
   Reiter Michael, 1993, IEEE S RES SEC PRIV
   Riely J, 2001, THEOR COMPUT SCI, V266, P693, DOI 10.1016/S0304-3975(00)00326-1
   SALTZER JH, 1984, ACM T COMPUT SYST, V2, P277, DOI 10.1145/357401.357402
   Schneider F. B., 2000, ACM Transactions on Information and Systems Security, V3, P30, DOI 10.1145/353323.353382
   Sewell P, 1998, LECT NOTES COMPUT SC, V1443, P695, DOI 10.1007/BFb0055094
   Smith S. W., 1994, INT C PAR DISTR COMP
   Vitek J, 1999, LECT NOTES COMPUT SC, V1686, P47
   Walker D., 2000, P 27 ACM SIGPLAN SIG, P254
NR 36
TC 0
Z9 0
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAY 15
PY 2007
VL 66
IS 3
BP 184
EP 204
DI 10.1016/j.scico.2007.01.007
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 183OI
UT WOS:000247581700002
OA Bronze
DA 2024-07-18
ER

PT J
AU Morris, JM
   Tyrrell, M
AF Morris, Joseph M.
   Tyrrell, Malcolm
TI Terms with unbounded demonic and angelic nondeterminacy
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 7th International Conference on Mathematics of Program Construction
CY JUL 12-14, 2004
CL Stirling, SCOTLAND
SP Cornell Univ, Univ Stirling, Formal Aspects Comp Sci, Specialist Grp
DE angelic nondeterminacy; demonic nondeterminacy; nondeterminism; free
   completely distributive lattice
AB We show how to introduce demonic and angelic nondeterminacy into the term language of each type in typical programming or specification language. For each type we introduce (binary infix) operators (sic) and (sic) on terms of the type, corresponding to demonic and angelic nondeterminacy, respectively. We generalise these operators to accommodate unbounded nondeterminacy. We axiomatise the operators and derive their important properties. We show that a suitable model for nondeterminacy is the free completely distributive complete lattice over a poset, and we use this to show that our axiomatisation is sound. In the process, we exhibit a strong relationship between nondeterminacy and free lattices that has not hitherto been evident. (c) 2006 Elsevier B.V. All rights reserved.
C1 Dublin City Univ, Sch Comp, Dublin 9, Ireland.
C3 Dublin City University
RP Morris, JM (corresponding author), Dublin City Univ, Sch Comp, Dublin 9, Ireland.
EM Joseph.Morris@computing.dcu.ie; Malcolm.Tyrrell@computing.dcu.ie
CR [Anonymous], 1995, Free Lattices
   Back R.-J., 1998, Refinement Calculus
   BACK RJR, 1990, ACTA INFORM, V27, P583, DOI 10.1007/BF00259469
   BARTENSCHLAGER G, 1995, ACTA MATH U COMENIAN, V64, P1
   Bird Richard, 1997, Algebra of Programming
   Birkhoff G., 1995, C PUBLICATIONS, V25
   BONSANGUE MM, 1996, THESIS VRIJE U AMSTE
   BROY M, 1986, THEOR COMPUT SCI, V45, P1, DOI 10.1016/0304-3975(86)90040-X
   Davey B. A., 2002, INTRO LATTICES ORDER, V2nd, DOI DOI 10.1017/CBO9780511809088
   de Moor O, 2000, LECT NOTES COMPUT SC, V1816, P371
   Dijkstra E. W., 1976, A Discipline of Pro-gramming
   Ganter B, 1999, Formal concept analysis: Mathematical foundations
   Hehner E.C.R., 1993, A Practical Theory of Programming
   JACOBS D, 1985, ACTA INFORM, V22, P67, DOI 10.1007/BF00290146
   MARKOWSKY G, 1979, P AM MATH SOC, V74, P227
   Martin CE, 2004, LECT NOTES COMPUT SC, V3125, P228
   Morris JM, 2004, LECT NOTES COMPUT SC, V3125, P274
   MORRIS JM, 1987, SCI COMPUT PROGRAM, V9, P287, DOI 10.1016/0167-6423(87)90011-6
   Morris JM, 1999, ACM T PROGR LANG SYS, V21, P677, DOI 10.1145/319301.319350
   Morris JM, 2001, ACTA INFORM, V37, P541, DOI 10.1007/PL00013316
   MORRIS JM, 2006, ACM T PROGRAMMING LA
   Naumann D.A., 2001, Proc. 3rd ACM SIGPLAN Int. Conf. Principles and Practice of Declarative Programming, P4
   NORVELL TS, 1993, LECT NOTES COMPUTER, V669, P269
   Plotkin G. D., 1976, SIAM Journal on Computing, V5, P452, DOI 10.1137/0205035
   Rewitzky I, 2003, LECT NOTES COMPUT SC, V2929, P256
   SMYTH MB, 1978, J COMPUT SYST SCI, V16, P23, DOI 10.1016/0022-0000(78)90048-X
   SPIVEY JM, 1988, UNDERSTANDING Z SPEC
   WARD N, 1994, THESIS U QUEENSLAND
NR 28
TC 5
Z9 5
U1 0
U2 3
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR 15
PY 2007
VL 65
IS 2
SI SI
BP 159
EP 172
DI 10.1016/j.scico.2006.01.008
PG 14
WC Computer Science, Software Engineering
WE Conference Proceedings Citation Index - Science (CPCI-S); Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 144YK
UT WOS:000244832300005
OA Bronze
DA 2024-07-18
ER

PT J
AU Binkley, D
   Danicic, S
   Gyimóthy, T
   Harman, M
   Kiss, A
   Korel, B
AF Binkley, Dave
   Danicic, Sebastian
   Gyimothy, Tibor
   Harman, Mark
   Kiss, Akos
   Korel, Bogdan
TI A formalisation of the relationship between forms of program slicing
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 5th IEEE International Workshop on Source Code Analysis and Manipulation
CY SEP 30-OCT 01, 2005
CL Budapest, HUNGARY
SP IEEE Comp Soc, IEEE, Kings Coll London, RAIN CODE, ITC irst
DE program slicing; dynamic slicing; static slicing; conditioned slicing;
   simultaneous slicing; formal methods
AB The widespread interest in program slicing within the source code analysis and manipulation community has led to the introduction of a large number of different forms of slicing. Each preserves some aspect of a program's behaviour and simplifies the program to focus exclusively upon this behaviour. In order to understand the similarities and differences between forms of slicing, a formal mechanism is required. This paper further develops a formal framework for comparing forms of slicing using a theory of program projection. This framework is used to reveal the ordering relationship between various static, dynamic, simultaneous and conditioned forms of slicing. (c) 2006 Elsevier B.V. All rights reserved.
C1 Univ London Goldsmiths Coll, London SE14 6NW, England.
   Loyola Coll, Baltimore, MD 21210 USA.
   Univ Szeged, Inst Informat, H-6720 Szeged, Hungary.
   Kings Coll London, London WC2R 2LS, England.
   IIT, Chicago, IL 60616 USA.
C3 University of London; Goldsmiths University London; Loyola University
   Maryland; Szeged University; University of London; King's College
   London; Illinois Institute of Technology
RP Danicic, S (corresponding author), Univ London Goldsmiths Coll, New Cross, London SE14 6NW, England.
EM binkley@cs.loyola.edu; s.danicic@gold.ac.uk; gyimi@inf.u-szeged.hu;
   mark@dcs.kcl.ac.uk; akiss@inf.u-szeged.hu; korel@iit.edu
RI Kiss, Ákos/A-3508-2008; Gyimothy, Tibor/M-3705-2018
OI Kiss, Ákos/0000-0003-3077-7075; Gyimothy, Tibor/0000-0002-2123-7387;
   Harman, Mark/0000-0002-5864-4488
CR AGRAWAL H, 1993, SOFTWARE PRACT EXPER, V23, P589, DOI 10.1002/spe.4380230603
   AGRAWAL H, 1990, ACM SIGPLAN C PROGR, P246
   BECK J, 1993, PROC INT CONF SOFTW, P509, DOI 10.1109/ICSE.1993.346015
   BIEMAN JM, 1994, IEEE T SOFTWARE ENG, V20, P644, DOI 10.1109/32.310673
   Binkley D, 2005, FIFTH IEEE INTERNATIONAL WORKSHOP ON SOURCE CODE ANALYSIS AND MANIPULATION, PROCEEDINGS, P45, DOI 10.1109/SCAM.2005.18
   Binkley D., 1995, ACM Transactions on Software Engineering and Methodology, V4, P3, DOI 10.1145/201055.201056
   Binkley D, 2004, FOURTH IEEE INTERNATIONAL WORKSHOP ON SOURCE CODE ANALYSIS AND MANIPULATION, PROCEEDINGS, P43
   Binkley D, 2004, ADV COMPUT, V62, P105, DOI 10.1016/S0065-2458(03)62003-6
   Binkley D., 1993, ACM Letters on Programming Languages and Systems, V2, P31, DOI 10.1145/176454.176473
   Binkley D, 1998, INFORM SOFTWARE TECH, V40, P583, DOI 10.1016/S0950-5849(98)00085-8
   BINKLEY D, 2006, IN PRESS THEORETICAL
   Binkley D., 1996, Advances in Computers, V43, P1
   BINKLEY D, 1991, THESIS MADISON
   CANFORA G, 1994, J SOFTW MAINT-RES PR, V6, P53, DOI 10.1002/smr.4360060202
   CANFORA G, 1994, INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE, PROCEEDINGS, P424, DOI 10.1109/ICSM.1994.336752
   Canfora G, 1998, INFORM SOFTWARE TECH, V40, P595, DOI 10.1016/S0950-5849(98)00086-X
   CARTWRIGHT R, 1989, ACM SIGPLAN C PROGR, P13
   Cimitile A, 1996, J SOFTW MAINT-RES PR, V8, P145, DOI 10.1002/(SICI)1096-908X(199605)8:3<145::AID-SMR127>3.0.CO;2-9
   Cimitile A, 1995, INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE, 1995 PROCEEDINGS, P124, DOI 10.1109/ICSM.1995.526534
   Cousot P., 1992, Journal of Logic and Computation, V2, P511, DOI 10.1093/logcom/2.4.511
   Danicic S, 2005, COMPUT J, V48, P737, DOI 10.1093/comjnl/bxh121
   Danicic S, 2004, PROG COMPREHEN, P89, DOI 10.1109/WPC.2004.1311051
   Danicic S, 1995, INFORM PROCESS LETT, V56, P307, DOI 10.1016/0020-0190(95)00170-0
   DANICIC S, 1999, THESIS U N LONDON UK
   Danicic S., 2004, 1 INT WORKSH PROGR L
   DANICIC S, 1996, 4 RIMS WORKSH COMP K
   De Lucia A, 2001, FIRST IEEE INTERNATIONAL WORKSHOP ON SOURCE CODE ANALYSIS AND MANIPULATION, PROCEEDINGS, P142, DOI 10.1109/SCAM.2001.972675
   DeLucia A, 1996, FOURTH WORKSHOP ON PROGRAM COMPREHENSION, PROCEEDINGS, P9, DOI 10.1109/WPC.1996.501116
   Fox C, 2004, SOFTWARE PRACT EXPER, V34, P15, DOI 10.1002/spe.556
   GALLAGHER KB, 1991, IEEE T SOFTWARE ENG, V17, P751, DOI 10.1109/32.83912
   GALLAGHER KB, 1992, P INT C SOFTW MAINT, P236
   Giacobazzi R., 2003, Higher-Order and Symbolic Computation, V16, P297, DOI 10.1023/A:1025872819613
   Gupta R., 1992, P IEEE C SOFTW MAINT, P299
   Harman M, 2003, J SYST SOFTWARE, V68, P45, DOI 10.1016/S0164-1212(02)00135-8
   Harman M, 2004, IEEE T SOFTWARE ENG, V30, P3, DOI 10.1109/TSE.2004.1265732
   Harman M, 2001, PROC IEEE INT CONF S, P138, DOI 10.1109/ICSM.2001.972724
   Harman M., 1996, Formal Aspects of Computing, V8, P490, DOI 10.1007/BF01213536
   Harman M, 1997, PROG COMPREHEN, P70, DOI 10.1109/WPC.1997.601266
   HARMAN M, 1995, J SOFTWARE TESTING V, V5, P143
   HARMAN M, 2001, SOFTWARE FOCUS, V2, P85
   HARMAN M, 2004, J AUTOMATED SOFTWARE, V11, P27
   Hierons R, 2002, SOFTW TEST VERIF REL, V12, P23, DOI 10.1002/stvr.232
   Hierons R.M., 1999, J SOFTW TEST VERIFIC, V9, P233, DOI 10.1002/(SICI)1099-1689(199912)9:43.0.CO;2-3
   HORWITZ S, 1989, ACM T PROGR LANG SYS, V11, P345, DOI 10.1145/65979.65980
   HORWITZ S, 1990, ACM T PROGR LANG SYS, V12, P26, DOI [10.1145/77606.77608, 10.1145/960116.53994]
   HORWITZ S, 1989, P ACM SIGPLAN S COMP, P28
   Kamkar M, 1993, THESIS LINKOPING U S
   Knuth D. E., 1971, Information Processing Letters, V1, P23, DOI 10.1016/0020-0190(71)90018-4
   KOREL B, 1988, INFORM PROCESS LETT, V29, P155, DOI 10.1016/0020-0190(88)90054-3
   Korel B, 1997, PROG COMPREHEN, P80, DOI 10.1109/WPC.1997.601269
   Lakhotia Arun., 1993, Proceedings of the 15th Conference on Software Engineering (ICSE-15), P34
   Laurence MR, 2003, THEOR COMPUT SCI, V290, P831, DOI 10.1016/S0304-3975(02)00374-2
   LAURENCE MR, UNPUB J LOGIC ALGEBR
   LAURENCE MR, 2004, THESIS U LONDON
   Lyle J. R., 1987, Second International Conference on Computers and Applications (Cat. No.87CH2433-1), P877
   Ott L. M., 1993, Proceedings First International Software Metrics Symposium (Cat. No.93TH0518-1), P71, DOI 10.1109/METRIC.1993.263799
   OUARBYA L, 2005, THESIS U LONDON
   RAMSHAW L, 1988, J ACM, V35, P893, DOI 10.1145/48014.48021
   Reps T, 1998, INFORM SOFTWARE TECH, V40, P701, DOI 10.1016/S0950-5849(98)00093-7
   Reps T., 1988, 777 U WISC
   REPS T, 1994, ACM SIGSOFT SOFTW EN, V19, P11
   SIMPSON D, 1993, ACM FORTRAN FORUM, V12, P26
   TIP F, 1995, J PROGRAM LANG, V3, P121
   VENKATESH GA, 1991, SIGPLAN NOTICES, V26, P107, DOI 10.1145/113446.113455
   WEISER M, 1984, IEEE T SOFTWARE ENG, V10, P352, DOI 10.1109/TSE.1984.5010248
   Weiser Mark., 1986, Papers presented at the first workshop on empirical studies of programmers on Empirical studies of programmers, P187
   Weiser MD., 1979, PROGRAM SLICES FORMA
NR 67
TC 23
Z9 27
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 15
PY 2006
VL 62
IS 3
BP 228
EP 252
DI 10.1016/j.scico.2006.04.007
PG 25
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 078HA
UT WOS:000240092100003
DA 2024-07-18
ER

PT J
AU Printezis, T
AF Printezis, Tony
TI On measuring garbage collection responsiveness
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE automatic memory management; garbage collection; garbage collection
   responsiveness; vmetrics; cathedral graphs; Percentile mutator
   utilization curves
AB In this article we survey and evaluate methods for measuring and/or illustrating the responsiveness of low-latency garbage collectors. These methods include pause time distributions, minimum and bounded mutator utilization curves, percentile utilization curves, and cathedral graphs; the latter we introduce. We also discuss why we believe it is important to evaluate a garbage collector on its compliance against an application-specific goal. We propose to do so with two techniques: Vmetrics and GC overhead graphs. (c) 2006 Sun Microsystems Inc. Published by Elsevier B.V. All rights reserved.
C1 Sun Microsyst, Burlington, MA 01803 USA.
C3 Sun Microsystems, Inc.
RP Printezis, T (corresponding author), Sun Microsyst, MS UBUR02-311,1 Network Dr, Burlington, MA 01803 USA.
EM tony.printezis@sun.com
CR [Anonymous], SPECJBB2000
   BACON DF, 2003, P 30 ANN ACM SIGPLAN
   *BEA SYST INC, WEBL JROCK JVM GARB
   BLACKBURN SM, 2002, P 2002 ACM SIGPLAN C, P175
   CHENG P, 2001, P ACM SIGPLAN C PROG, P125, DOI DOI 10.1145/378795.378823
   Detlefs D, 2004, SEVENTH IEEE INTERNATIONAL SYMPOSIUM ON OBJECT-ORIENTED REAL-TIME DISTRIBUTED COMPUTING, PROCEEDINGS, P23, DOI 10.1109/ISORC.2004.1300325
   DIWAN A, 2004, P 2004 INT S MEM MAN
   Endo T., 2002, P 3 INT S MEMORY MAN, P119, DOI [10.1145/512429.512432, DOI 10.1145/512429.512432]
   GARTHWAITE A, 2005, THESIS U PENNSYLVANI
   Harris RL, 1999, INFORM GRAPHICS COMP
   Jones R.E., 1996, Garbage Collection: Algorithms for Automatic Dynamic Memory Management
   Ossia Y, 2002, ACM SIGPLAN NOTICES, V37, P129, DOI 10.1145/543552.512546
   PRINTEZIS T, 2000, P 2000 INT S MEM MAN, P143
   PRINTEZIS T, 2004, GARBAGE COLLECTION J
   Sachindran N, 2004, ACM SIGPLAN NOTICES, V39, P81, DOI 10.1145/1035292.1028984
   WILSON PR, 1992, LECT NOTES COMPUT SC, V637, P1
NR 16
TC 5
Z9 5
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 1
PY 2006
VL 62
IS 2
BP 164
EP 183
DI 10.1016/j.scico.2006.02.004
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 075VM
UT WOS:000239913600005
DA 2024-07-18
ER

PT J
AU Harris, T
AF Harris, T
TI Exceptions and side-effects in atomic blocks
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT Workshop on Concurrency and Synchronization in Java Programs
CY JUL 25-26, 2004
CL St Johns, CANADA
DE atomic blocks; exceptions; non-blocking synchronization; software
   transactional memory
ID SUPPORT
AB In recent work we showed how to implement a new atomic keyword as an extension to the Java programming language. It allows a program to perform a series of heap accesses atomically without needing to use mutual exclusion locks. We showed that data structures built using it could perform well and scale to large multi-processor systems. In this paper we extend our system in two ways. Firstly, we show how to provide an explicit 'abort' operation to abandon execution of an atomic block and to automatically undo any updates made within it. Secondly, we show how to perform external I/O within an atomic block. During our work we found that it was surprisingly difficult to support these operations without opening loopholes through which the programmer could subvert language-based security mechanisms. Our final design is based on a 'external action' abstraction, allowing code running within an atomic block to request that a given pre-registered operation be executed outside the block. (c) 2005 Elsevier B.V. All rights reserved.
C1 Microsoft Res, Cambridge CB3 0FB, England.
C3 Microsoft
RP Microsoft Res, 7 JJ Thomson Ave, Cambridge CB3 0FB, England.
EM tharris@microsoft.com
CR [Anonymous], OOPSLA
   Hansen P. B., 1978, Communications of the ACM, V21, P934, DOI 10.1145/359642.359651
   Herlihy M, 2003, P 22 ANN S PRINCIPLE, P92
   HERLIHY M., 1993, P 20 ANN INT S COMPU, P289, DOI DOI 10.1145/165123.165164.URL
   HOARE CAR, 1972, APIC STUDIES DATA PR, V9, P61
   LISKOV B, 1983, ACM T PROGR LANG SYS, V5, P381, DOI 10.1145/2166.357215
   Rajwar R, 2002, ACM SIGPLAN NOTICES, V37, P5, DOI 10.1145/605432.605399
   SCOTT ML, 1987, IEEE T SOFTWARE ENG, V13, P88, DOI 10.1109/TSE.1987.232838
   Tofte M, 1997, INFORM COMPUT, V132, P109, DOI 10.1006/inco.1996.2613
   Welc A, 2004, PROC INT CONF PARAL, P529
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
NR 14
TC 22
Z9 28
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC
PY 2005
VL 58
IS 3
SI SI
BP 325
EP 343
DI 10.1016/j.scico.2005.03.005
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 986BR
UT WOS:000233424300004
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Maheshwari, P
   Teoh, A
AF Maheshwari, P
   Teoh, A
TI Supporting ATAM with a collaborative Web-based software architecture
   evaluation tool
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 3rd International Workshop on System/Software Architectures (IWSSA 04)
CY JUN, 2004
CL Las Vegas, NV
DE software architecture; architecture evaluation; collaborative system
AB As software companies are becoming increasingly globalised, a number of issues arise with respect to the social and environmental aspects of conducting the Architecture Tradeoff Analysis Method (ATAM), a software architecture evaluation method developed by the Software Engineering Institute. It would be fair to question the applicability of the ATAM to commercial companies. In this paper, we show that there are important issues and potential weaknesses in the ATAM from a social context. We provide suggestions for a means of overcoming these potential pitfalls through the assistance of the ubiquitous Internet. We then describe a tool dubbed ACE (ATAM Collaborative Environment), a Web-based software system that provides a common environment where stakeholders and software evaluators alike can take part in an ATAM evaluation without having to be physically collocated. (c) 2004 Elsevier B.V. All rights reserved.
C1 Univ New S Wales, Sch Comp Sci & Engn, Sydney, NSW 2052, Australia.
C3 University of New South Wales Sydney
RP Univ New S Wales, Sch Comp Sci & Engn, Sydney, NSW 2052, Australia.
EM piyush@cse.unsw.edu.au
CR [Anonymous], 2000, Dissertation
   CLEMENTS P., 2002, EVALUATING SOFTWARE
   Dingsoyr T., 2002, Empirical Software Engineering, V7, P383, DOI 10.1023/A:1020579408810
   Giddens Anthony., 1996, INTRO SOCIOLOGY, Vsecond
   Hall E. T., 1976, Beyond Culture, Double Day Anchor Books
   Hofstede G., 1991, Cultures and organizations, DOI DOI 10.1016/S0005-7967(02)00184-5
   HOFSTEDE G, 2002, CHAINS CULTURE CULTU
   Hofstede Geert., 2004, CULTURES ORG SOFTWAR
   KAZMAN R, 2000, CMUSEI2000TR004 ATAM
   MacDonald F., 1998, Empirical Software Engineering, V3, P233, DOI 10.1023/A:1009747104814
   Perlman B, 2001, INTERNATIONAL SYMPOSIUM ON TECHNOLOGY AND SOCIETY, PROCEEDINGS, P19, DOI 10.1109/ISTAS.2001.937718
   RASETTI HN, 1998, HOW SUCCESSFUL MULTI
   Sharp H, 2000, IEEE SOFTWARE, V17, P40, DOI 10.1109/52.819967
NR 13
TC 12
Z9 12
U1 0
U2 1
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUL
PY 2005
VL 57
IS 1
BP 109
EP 128
DI 10.1016/j.scico.2004.10.008
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 935UU
UT WOS:000229809700008
DA 2024-07-18
ER

PT J
AU Sancho, PP
   Juiz, C
   Puigjaner, R
AF Sancho, PP
   Juiz, C
   Puigjaner, R
TI Evaluating the performance of architectures in MASCOT
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 3rd International Workshop on System/Software Architectures (IWSSA 04)
CY JUN, 2004
CL Las Vegas, NV
DE MASCOT; architecture; evaluation; performance; simulation
AB Several design methods for software/system architectures have been developed since the origins of Software Engineering. MASCOT remains as one of such preferred design methods in the European defence arena. There are even tools that support MASCOT diagram and textual software/system designs and also their automatic code generation. However, less attention has been paid to nonfunctional aspects of these designs, e.g. performance evaluation. MASCOTime is a tool prototype for MASCOT, that uses the discrete-event simulation to help analysts to select among several software/system architectures. In order to provide the performance constraints of system designs, MASCOT has been annotated in a transparent way for software engineers. MASCOTime will assist software/system developers to decide which architecture matches the performance and functional requirements on early steps of design. (c) 2004 Elsevier B.V. All rights reserved.
C1 Univ Illes Balears, Dept Ciencies Matemat & Informat, Palma De Mallorca 07071, Spain.
C3 Universitat de les Illes Balears
RP Univ Illes Balears, Dept Ciencies Matemat & Informat, Carretera Valldemossa Km 7, Palma De Mallorca 07071, Spain.
EM perep.sancho@uib.es; cjuiz@uib.es; putxi@uib.es
RI Juiz, Carlos/L-4018-2014
OI Juiz, Carlos/0000-0001-6517-5395
CR ALLWORTH ST, 1987, COMPUTER SCI SERIES
   BATE G, 1986, SOFTWARE ENG J   MAY, P95
   *JOINT IECCA MUF C, 1987, OFF HDB MASCOT
   Juiz C, 2002, SIMULAT PRACT THEORY, V9, P215, DOI 10.1016/S0928-4869(01)00053-2
   JUIZ C, 2003, PERFORM EVALUATION, V175, P179
   JUIZ C, 2001, LNCS, V2047, P300
   JUIZ C, 2003, 10 INT C WORKSH ENG
   Law AverillM., 2000, SIMULATION MODELLING
   *MASCOT SUPPL ASS, 1986, MASCOT 3
   PUIGJANER R, 2000, UIB03810 SUCSEDE
   SANCHO PP, 2003, SERP C P CSREA PRESS, V74
   SAVINO N, 2002, P 3 INT WORKSH SOFTW, P83
   SIMPSON H, 1988, GOVT COMPUTING, V3, P52
   SIMPSON HG, 2000, PROTOCOLS PROCESS 1
   SIMPSON HR, 1986, SOFTWARE ENG J
   2000, MATRA BAE DYNAMICS P
NR 16
TC 0
Z9 0
U1 0
U2 1
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUL
PY 2005
VL 57
IS 1
BP 45
EP 60
DI 10.1016/j.scico.2004.10.004
PG 16
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 935UU
UT WOS:000229809700004
OA Bronze
DA 2024-07-18
ER

PT J
AU Schmid, K
   John, I
AF Schmid, K
   John, I
TI A customizable approach to full lifecycle variability management
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
AB In order to enable a smooth transition to product line development for an organization that so far only performed single system development, it is necessary to keep as many of the existing notations and approaches in place as possible. This requires adaptability of the basic variability management approach to the specific situation at hand. In this paper we describe an approach that enables homogenous variability management across the different life cycle stages, independent of the specific notation. The approach is accompanied by a meta-model and a process for introducing the variability management approach by developing a notation-independent representation. This approach has so far been applied in several cases where our Product Line engineering method PuLSETM has been introduced into a software development organization. (C) 2004 Elsevier B.V. All rights reserved.
C1 Fraunhofer Inst Expt Software Engn, IESE, D-67661 Kaiserslautern, Germany.
C3 Fraunhofer Gesellschaft
RP Fraunhofer Inst Expt Software Engn, IESE, Sauerwiesen 6, D-67661 Kaiserslautern, Germany.
EM Klaus.Schmid@iese.fraunhofer.de; Isabel.John@iese.fraunhofer.de
RI Schmid, Klaus/AAB-1480-2019
OI Schmid, Klaus/0000-0002-4147-3942
CR [No title captured]
NR 1
TC 68
Z9 70
U1 0
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC
PY 2004
VL 53
IS 3
BP 259
EP 284
DI 10.1016/j.scico.2003.04.002
PG 26
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 863UY
UT WOS:000224590100002
DA 2024-07-18
ER

PT J
AU Rees, DLL
   Stephenson, K
   Tucker, JV
AF Rees, DLL
   Stephenson, K
   Tucker, JV
TI The algebraic structure of interfaces
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE interface; interface definition language; imports; flattening; software
   architecture; algebraic specification; abstract syntax; object-oriented
   architecture
ID CASL
AB In this paper we examine formally the idea that the architecture of a system can be modelled by the structure of its interface expressed in terms of the interfaces for its components. Thus,
   System Interface Architecture = Structured set of Sub-system Interfaces.
   We specify an abstract model for interface definition languages (IDLs) based on this idea and the idea that an
   Interface = Name + Imports + Body.
   A set of interfaces is a repository. An interface architecture is a repository with some primary interfaces identified; the import dependencies between the interfaces of a repository are used to determine its structure.
   The abstract model uses algebraic specifications to define the abstract syntax of a general IDL, and interface transformations using structural induction. We examine a flattening process which assembles a system interface from its components.
   We use the general model to derive a simple IDL suitable for the design phase of object-oriented software development. This requires us to specify a form of Body that treats both data types and state, and in Body we explicitly distinguish between methods with and without side-effects, by commands and queries, respectively. We also consider alternative proposals for Body that yield new IDLs, including other object-oriented design languages and data type specification languages. (C) 2003 Elsevier B.V. All rights reserved.
C1 QinetiQ Trusted Informat Management, Malvern WR14 3PS, Worcs, England.
   BT Comp Partners, PP E1D, Cardiff CF24 2XF, S Glam, Wales.
   Univ Coll Swansea, Dept Comp Sci, Swansea SA2 8PP, W Glam, Wales.
C3 Swansea University
RP Stephenson, K (corresponding author), QinetiQ Trusted Informat Management, Malvern WR14 3PS, Worcs, England.
CR [Anonymous], 1996, Pattern oriented software architecture: a system of patters
   [Anonymous], 1978, CURRENT TRENDS PROGR
   [Anonymous], 1997, COMPONENT SOFTWARE O
   [Anonymous], 1991, OBJECT ORIENTED PROG
   Bergstra J. A., 1989, ALGEBRAIC SPECIFICAT
   BERGSTRA JA, 1990, J ACM, V37, P335, DOI 10.1145/77600.77621
   Bidoit M, 1999, LECT NOTES COMPUT SC, V1548, P341
   BIRRELL AD, 1984, ACM T COMPUT SYST, V2, P39, DOI 10.1145/2080.357392
   BOOCH G, 1998, UNIFIED MODELLING LA
   BROCKSHMIDT K, 1995, INSIDE OLE
   Civello F, 1998, J OBJECT-ORIENT PROG, V11, P55
   Clavel M., 1996, ELECT NOTES THEORETI, V4, P65, DOI [10.1016/S1571-0661(04)00034-9, DOI 10.1016/S1571-0661(04)00034-9]
   Cook S., 1994, DESIGNING OBJECT SYS
   D'Souza D., 1998, OBJECTS COMPONENTS F
   DAHL OJ, 1966, COMMUN ACM, V9, P671, DOI 10.1145/365813.365819
   DEUTSCH PL, 1989, SOFTWARE REUSABILITY, V1
   EHRIG H, 1990, EATCS MONOGRAPHS THE, V21
   Goguen J., 2000, SOFTWARE ENG OBJ ALG, P3
   GOGUEN JA, 1977, J ACM, V24, P68, DOI 10.1145/321992.321997
   GOGUEN JA, 2000, FDN COMPONENT BASED, P231
   GOLDBERG A, 1983, SMALLTALK, V80
   GOSLING J, 1996, JAVA APPL PROGRAMMIN, V1
   GRIES D., 1978, PROGRAMMING METHODOL
   HENINGERBRITTON K, 1981, P 5 INT C SOFTW ENG, P195
   Klop JanWillem., 1992, HDB LOGIC COMPUTER S
   Loeckx J., 1996, SPECIFICATION ABSTRA
   MARTIN RC, 1996, INTERFACE SEGREGATIO
   MESEGUER J, 1985, ALGEBRAIC METHODS SE, P459
   MEUNIER R, 1995, PATTERN LANGUAGES PR, V1, P427
   Mosses PD, 1999, LECT NOTES COMPUT SC, V1589, P216
   *OMG, 1999, 991008 OMG
   PARNAS DL, 1972, COMMUN ACM, V15, P1053, DOI 10.1145/361598.361623
   Perry D. E., 1992, SIGSOFT Software Engineering Notes, V17, P40, DOI 10.1145/141874.141884
   REES DLL, 2001, THESIS U WALES SWANS
   RIEHLE D, 1998, 98101 UBI LAB AG
   Shaw M., 1996, SOFTWARE ARCHITECTUR
   SHAW M, 1996, LECT NOTES COMPUTER, V1078, P17
   Snodgrass Richard., 1989, INTERFACE DESCRIPTIO
   SZYPERSKI C, 1997, SPECIAL ISSUES OBJEC, P1275
   TUS T, 1971, SOC SCI MATH REPUBLI, V15, P227
   VANDEURSEN A, 1996, AMAST SERIES COMPUTI
   VANROSSUM G, 1999, PYTHON REFERENCE MAN
   Walden K., 1994, SEAMLESS OBJECT ORIE
   Wirsing M., 1990, HDB THEORETICAL COMP, VB, P675, DOI [10.1016/B978-0-444-88074-1.50018-4, DOI 10.1016/B978-0-444-88074-1.50018-4]
   WULF WA, 1980, LECT NOTES COMPUTER, V88, P95
NR 45
TC 2
Z9 3
U1 0
U2 0
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC
PY 2003
VL 49
IS 1-3
BP 47
EP 88
DI 10.1016/j.scico.2003.04.001
PG 42
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 747KB
UT WOS:000186802700002
DA 2024-07-18
ER

PT J
AU Attanasio, C
   Corradini, F
   Inverardi, P
AF Attanasio, C
   Corradini, F
   Inverardi, P
TI Static analysis of real-time component-based systems configurations
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 3rd International Conference on Coordination Languages and Architectures
CY 1999
CL AMSTERDAM, NETHERLANDS
DE real-time systems; static analysis; system configuration
ID PROCESS ALGEBRA; SPECIFICATION; PERFORMANCE; MODEL
AB Nowadays, more and more often, complex systems are built by assembling together different system components. This technology also affects the construction of heterogeneous and/or hybrid systems where components can represent hardware sensors, software controllers, etc. Moreover the resulting system is normally distributed. These systems have often real-time constraints/ requirements and each component is characterized by its own speed determined by its local clock. In this paper we present a framework to specify and statically analyze the architecture of a system as a network of (parallel) components, each one with its own local clock. Configuring the system means to formally define how to get the global clock out of the local clocks. This clock configuration step is "optimal" that is, it is the best way to relate the local clocks so that the maximum number of synchronizations in the system can happen. Besides the usual behavioral and timing analysis, it is, for example, possible to verify if, and how changing the local speed of a component can affect the global performance of the system.
   Components behaviors are specified by means of a simple process algebra. Local clocks are modeled as higher order terms in a given signature, and unification is used to define the common clock. Then an operational semantics defines which transitions a process can perform and which transitions let time to elapse. A set of case studies illustrate the approach. (C) 2002 Elsevier Science B.V. All rights reserved.
C1 Univ Aquila, Dipartimento Informat, I-67010 Coppito, Italy.
C3 University of L'Aquila
RP Univ Aquila, Dipartimento Informat, Via Vetoio,Loc Coppito, I-67010 Coppito, Italy.
EM flavio@univaq.it
CR ABRIAL JR, 1996, FORMAL METHODS IND A
   Aceto L, 1996, ACTA INFORM, V33, P317, DOI 10.1007/s002360050047
   Allen R., 1997, ACM Transactions on Software Engineering and Methodology, V6, P213, DOI 10.1145/258077.258078
   AMAGBEGNON TP, 1995, P ACM S PROGR LANG D, P163
   Attanasio C, 1999, LECT NOTES COMPUT SC, V1577, P45
   Attanasio C, 1999, LECT NOTES COMPUT SC, V1594, P323
   Blair G.S., 1997, FORMAL SPECIFICATION
   BOWMAN H, 1998, P FMICS 98
   CLEAVELAND R, 1993, ACM T PROGR LANG SYS, V15, P36, DOI 10.1145/151646.151648
   COENPORISINI A, 1997, IEEE T SOFTWARE ENG, V23
   Corradini F, 2001, ACTA INFORM, V37, P467, DOI 10.1007/PL00013313
   Corradini F, 1998, INFORM COMPUT, V145, P191, DOI 10.1006/inco.1998.2726
   Friesen V, 1997, PROC INT CONF SOFTW, P315, DOI 10.1145/253228.253297
   GHEZZI C, 1994, J SYST SOFTWARE, V25, P107
   GORRIERI R, 1995, THEOR COMPUT SCI, V140, P73, DOI 10.1016/0304-3975(94)00205-W
   Hoare CAR., 1985, Communicating Sequential Processes
   Intrigila B., 1999, Fundamenta Informaticae, V39, P273
   INVERARDI P, 1995, IEEE T SOFTWARE ENG, V21, P373, DOI 10.1109/32.385973
   *IRISA INRIA RENN, 1997, PROJ EP ATR RAPP ACT
   KRAMER J, 1997, LNCS, V1282, P18
   MATHAI J, 1996, PRENTICE HALL INT SE
   Milner Robin., 1989, INT SERIES COMPUTER
   MOLLER F, 1990, LECT NOTES COMPUT SC, V458, P401, DOI 10.1007/BFb0039073
   REED GM, 1988, THEOR COMPUT SCI, V58, P249, DOI 10.1016/0304-3975(88)90030-8
NR 24
TC 0
Z9 0
U1 0
U2 1
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN-FEB
PY 2003
VL 46
IS 1-2
BP 5
EP 30
AR PII S0167-6423(02)00085-0
DI 10.1016/S0167-6423(02)00085-0
PG 26
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 633UT
UT WOS:000180302700002
OA Bronze
DA 2024-07-18
ER

PT J
AU Huang, WL
   Krafczyk, N
   Peleska, J
AF Huang, Wen-ling
   Krafczyk, Niklas
   Peleska, Jan
TI Exhaustive property oriented model-based testing with symbolic finite
   state machines
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Property-oriented testing; Conformance testing; Model-based testing;
   Exhaustive test suites; Symbolic finite state machines
AB We advocate a fusion of property-oriented testing (POT) and model-based testing (MBT). The existence of a symbolic finite state machine (SFSM) model fulfilling the properties of interest is exploited for property-directed test data generation and to create a test oracle. A new test generation strategy is presented for verifying that the system under test (SUT) satisfies the same LTL safety conditions over a given set of atomic propositions as the model. We prove that this strategy is exhaustive in the sense that any SUT violating at least one of these formulae will fail at least one test case of the generated suite. It is shown that the existence of a model allows for significantly smaller exhaustive test suites as would be necessary for POT without reference models. As a corollary, the main theorem also generalises a known result about SFSM-based conformance testing for language equivalence. Our approach fits well to industrial development processes for (potentially safety-critical) cyber-physical systems, where both models and properties representing system requirements are elaborated for development, verification, and validation.& COPY; 2023 The Author(s). Published by Elsevier B.V. This is an open access article under the CC BY-NC-ND license (http://creativecommons .org /licenses /by-nc -nd /4 .0/).
C1 [Huang, Wen-ling; Krafczyk, Niklas; Peleska, Jan] Univ Bremen, Dept Math & Comp Sci, Bibliothekstr 1, D-28359 Bremen, Germany.
C3 University of Bremen
RP Peleska, J (corresponding author), Univ Bremen, Dept Math & Comp Sci, Bibliothekstr 1, D-28359 Bremen, Germany.
EM huang@uni-bremen.de; niklas@uni-bremen.de; peleska@uni-bremen.de
FU Deutsche Forschungsgemeinschaft (DFG) [407708394]
FX This document is a result of the research project funded by the Deutsche
   Forschungsgemeinschaft (DFG) - project number 407708394.
CR Aichernig BK, 2015, SOFTW TEST VERIF REL, V25, P716, DOI 10.1002/stvr.1522
   Baier C, 2008, PRINCIPLES OF MODEL CHECKING, P1
   Bergenthal M, 2022, LECT NOTES COMPUT SC, V13045, P3, DOI 10.1007/978-3-031-04673-5_1
   Biere A, 2006, LOG METH COMPUT SCI, V2, DOI 10.2168/LMCS-2(5:5)2006
   CHOW TS, 1978, IEEE T SOFTWARE ENG, V4, P178, DOI 10.1109/TSE.1978.231496
   Clarke E, 2003, J ACM, V50, P752, DOI 10.1145/876638.876643
   Clarke EM, 1999, MODEL CHECKING, P1
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Dorofeeva R, 2005, LECT NOTES COMPUT SC, V3731, P204
   Eder KI, 2021, ELECTRON P THEOR COM, P54, DOI 10.4204/EPTCS.348.4
   El-Fakih K, 2022, SOFTW TEST VERIF REL, V32, DOI 10.1002/stvr.1789
   Endo A. T., 2012, 2012 IEEE Fifth International Conference on Software Testing, Verification and Validation (ICST 2012), P549, DOI 10.1109/ICST.2012.140
   Ermakov AD, 2017, AUTOM CONTROL COMPUT, V51, P516, DOI 10.3103/S0146411617070057
   Fernandez JC, 2004, LECT NOTES COMPUT SC, V2931, P147
   Giannakopoulou D, 2001, 16TH ANNUAL INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING (ASE 2001), PROCEEDINGS, P412, DOI 10.1109/ASE.2001.989841
   Gleirscher M, 2021, ELECTRON P THEOR COM, P101, DOI 10.4204/EPTCS.348.7
   Gleirscher Mario, 2022, arXiv, DOI [10.48550/arXiv.2203.08917, DOI 10.48550/ARXIV.2203.08917]
   Hierons RM, 2004, IEEE T COMPUT, V53, P1330, DOI 10.1109/TC.2004.85
   Huang W., 2022, MODEL BASED CONFORMA
   Huang W., 2021, ARXIV
   Huang WL, 2019, SOFTWARE QUAL J, V27, P589, DOI 10.1007/s11219-018-9421-y
   Huang WL, 2017, FORM ASP COMPUT, V29, P335, DOI 10.1007/s00165-016-0402-2
   Huang WL, 2016, INT J SOFTW TOOLS TE, V18, P265, DOI 10.1007/s10009-014-0356-8
   Hubner F, 2019, SOFTW SYST MODEL, V18, P423, DOI 10.1007/s10270-017-0595-8
   Hughes John, 2016, A List of Successes that can Change the World. Essays Dedicated to Philip Wadler on the Occasion of his 60th Birthday. LNCS 9600, P169, DOI 10.1007/978-3-319-30936-1_9
   Krafczyk N, 2021, LECT NOTES COMPUT SC, V13085, P84, DOI 10.1007/978-3-030-92124-8_5
   Kroening Daniel, 2014, TOOLS ALGORITHMS CON, P389, DOI [10.1007/978-3-642-54862-8_26, DOI 10.1007/978-3-642-54862-8_26]
   Li Qi Zhichang S, 2004, PROPERTY ORIENTED TE
   Machado PDL, 2007, ELECTRON NOTES THEOR, V184, P3, DOI 10.1016/j.entcs.2007.06.001
   MacIver David R., 2019, Journal of Open Source Software, V4, P1891, DOI DOI 10.21105/JOSS.01891
   Manès VJM, 2021, IEEE T SOFTWARE ENG, V47, P2312, DOI 10.1109/TSE.2019.2946563
   Object Management Group, 2017, OMG Unified Modeling Language (OMG UML)
   Object Management Group, 2019, OMG SYST MOD LANG OM
   Peleska Jan, 2018, Leveraging Applications of Formal Methods, Verification and Validation. Industrial Practice. 8th International Symposium, ISoLA 2018. Proceedings: Lecture Notes in Computer Science (LNCS 11247), P82, DOI 10.1007/978-3-030-03427-6_11
   Peleska J, 2021, FORM ASP COMPUT, V33, P925, DOI 10.1007/s00165-021-00551-6
   Peleska J, 2018, PROC EUR TEST SYMP
   Petrenko Alexandre, 2012, International Journal on Software Tools for Technology Transfer, V14, P383, DOI 10.1007/s10009-012-0240-3
   Petrenko A., 1996, Formal Description Techniques IX. Theory, Application and Tools. IFIP TC6/6.1 International Conference on Formal Description Techniques IX/Protocol Specification, Testing and Verification XVI, P163
   Petrenko A, 2019, SOFTW SYST MODEL, V18, P825, DOI 10.1007/s10270-017-0613-x
   Petrenko A, 2016, IEEE ICST WORKSHOP, P229, DOI 10.1109/ICSTW.2016.9
   Prasad Sistla A., 1994, Formal Aspects of Computing, V6, P495, DOI 10.1007/BF01211865
   Pretschner A, 2015, NATO SCI PEAC SECUR, V40, P224, DOI 10.3233/978-1-61499-495-4-224
   R. S.-E. WG-71, 2011, DO178C RSE WG71 RTCA
   R. S.-E. WG-71, 2011, DO331 RSE WG71 RTCA
   RABIN MO, 1959, IBM J RES DEV, V3, P114, DOI 10.1147/rd.32.0114
   Ratiu D, 2019, INT J SOFTW TOOLS TE, V21, P267, DOI 10.1007/s10009-019-00510-w
   van de Pol J., 2018, MODELS MINDSETS META, V11200, P417
NR 47
TC 0
Z9 0
U1 1
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN
PY 2024
VL 231
AR 103005
DI 10.1016/j.scico.2023.103005
EA AUG 2023
PG 28
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA R3KB9
UT WOS:001063363900001
OA hybrid
DA 2024-07-18
ER

PT J
AU Chen, J
   Jiang, T
   Yu, DJ
   Hu, HY
AF Chen, Jie
   Jiang, Tao
   Yu, Dongjin
   Hu, Haiyang
TI Pattern-based circular reference detection in Python
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Circular references; Python; Pattern -based; Memory leak
ID MEMORY LEAK DETECTION; JAVA
AB Circular references keep objects in loops from being released even if they are no longer reachable. Programming languages provide various garbage collection strategies for reclaiming unused objects at runtime. For example, CPython is equipped with a tracing collector as a complement to the count-based collector to recycle circular garbage. However, runtime detection inevitably entails resource consumption. The overhead of circular reference detection can be reduced if the introduction of circular references can be avoided, or if the presence of circular references in code can be detected before the code is run.To reduce the occurrence of circular references, we provide a data-driven approach to discover the common patterns from dynamic data and then automatically detect circular references statically. First, we observe and characterize common circular reference patterns using a large-scale dataset collected from 671 open-source projects at runtime. With these patterns in mind, developers can be aware of where potential circular references might be coming from, leading to more robust Python codes and ultimately lightening the garbage collection workload, and also potentially altering their coding practices. Then, we design CRef , a pattern-based approach for detecting circular references in code. We investigate the effectiveness of CRef on 17 projects. Across all experimental projects, CRef achieves a precision of 0.95 and a recall of 0.98. (c) 2023 Elsevier B.V. All rights reserved.
C1 [Chen, Jie; Yu, Dongjin; Hu, Haiyang] Hangzhou Dianzi Univ, Sch Comp Sci & Technol, Hangzhou 310018, Peoples R China.
   [Jiang, Tao] NetEase, Hangzhou 310018, Peoples R China.
C3 Hangzhou Dianzi University
RP Chen, J (corresponding author), Hangzhou Dianzi Univ, Sch Comp Sci & Technol, Hangzhou 310018, Peoples R China.
EM cjie@hdu.edu.cn
FU National Natural Science Foundation of China [61802095, 61702144,
   61572162]; Zhejiang Provincial Key Science and Technology Project
   Foundation [2018C01012]
FX This work was supported by the National Natural Science Foundation of
   China (No. 61802095, 61702144, 61572162) and the Zhejiang Provincial Key
   Science and Technology Project Foundation (No. 2018C01012) .
CR Ammons G., 2004, ECOOP 2004 - Object-Oriented Programming. 18th European Conference. Proceedings (Lecture Notes in Computer Science Vol.3086), P172
   [Anonymous], 2010, P ACM IEEE 32 INT C, DOI DOI 10.1145/1806799.1806874
   B.V. Tiobe Software, 2021, TIOB IND
   Campos EC, 2017, INT SYMP EMP SOFTWAR, P404, DOI 10.1109/ESEM.2017.55
   Cherem S, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P480, DOI 10.1145/1250734.1250789
   Chis AE, 2011, LECT NOTES COMPUT SC, V6813, P383, DOI 10.1007/978-3-642-22655-7_18
   CHRISTOPHER TW, 1984, SOFTWARE PRACT EXPER, V14, P503, DOI 10.1002/spe.4380140602
   Cormen T.H., 2009, INTRO ALGORITHMS
   Cui SW, 2021, Arxiv, DOI arXiv:2106.14316
   Distefano D, 2010, LECT NOTES COMPUT SC, V6013, P278, DOI 10.1007/978-3-642-12029-9_20
   Ghanavati M, 2020, EMPIR SOFTW ENG, V25, P678, DOI 10.1007/s10664-019-09731-8
   Gorbovitski M, 2010, ACM SIGPLAN NOTICES, V45, P27, DOI 10.1145/1899661.1869635
   Hanam Q, 2016, FSE'16: PROCEEDINGS OF THE 2016 24TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON FOUNDATIONS OF SOFTWARE ENGINEERING, P144, DOI 10.1145/2950290.2950308
   Hecht G, 2016, 2016 IEEE/ACM INTERNATIONAL CONFERENCE ON MOBILE SOFTWARE ENGINEERING AND SYSTEMS (MOBILESOFT 2016), P59, DOI [10.1145/2897073.2897100, 10.1109/MobileSoft.2016.030]
   Hu MZ, 2020, PROCEEDINGS OF THE 2020 IEEE 27TH INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER '20), P532, DOI [10.1109/SANER48275.2020.9054835, 10.1109/saner48275.2020.9054835]
   Ismail M, 2018, I S WORKL CHAR PROC, P36, DOI 10.1109/IISWC.2018.8573512
   Jezek K, 2017, 2017 IEEE 24TH INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER), P306, DOI 10.1109/SANER.2017.7884631
   Jump M, 2007, ACM SIGPLAN NOTICES, V42, P31, DOI 10.1145/1190215.1190224
   Jung C, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P825, DOI 10.1145/2568225.2568311
   LIEBERMAN H, 1983, COMMUN ACM, V26, P419, DOI 10.1145/358141.358147
   MCBETH JH, 1963, COMMUN ACM, V6, P575, DOI 10.1145/367593.367649
   Monat R., 2020, 34 EUROPEAN C OBJECT
   Orlovich M, 2006, LECT NOTES COMPUT SC, V4134, P405
   Pan K, 2009, EMPIR SOFTW ENG, V14, P286, DOI 10.1007/s10664-008-9077-5
   Pienaar J.A., 2013, Proceedings of the 2013 IEEE/ACM International Symposium on Code Generation and Optimization, CGO 2013, Shenzhen, China, February 23-27, 2013, p11:1, DOI DOI 10.1109/CGO.2013.6495007
   Pradel M, 2020, PROCEEDINGS OF THE 28TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE '20), P209, DOI 10.1145/3368089.3409715
   Pysibel, About us
   Rahman Aau, 2020, ICSE 20 42 INT C SOF
   Rigo Armin, 2006, COMP 21 ACM SIGPLAN, P944, DOI DOI 10.1145/1176617.1176753
   Saldana J., 2016, CODING MANUAL QUALIT, DOI DOI 10.1017/CBO9781107415324.004
   Salib M., 2004, Ph.D. thesis
   Shaham R, 2000, LECT NOTES COMPUT SC, V1781, P50
   Smith C. U., 2000, Proceedings Second International Workshop on Software and Performance. WOSP2000, P127, DOI 10.1145/350391.350420
   Sor V, 2014, J SYST SOFTWARE, V96, P139, DOI 10.1016/j.jss.2014.06.005
   Sui YL, 2014, IEEE T SOFTWARE ENG, V40, P107, DOI 10.1109/TSE.2014.2302311
   Sun XH, 2018, P INT COMP SOFTW APP, P430, DOI 10.1109/COMPSAC.2018.10271
   Tan L, 2014, EMPIR SOFTW ENG, V19, P1665, DOI 10.1007/s10664-013-9258-8
   Wang Yin, PYSONAR
   Xia X., 2018, P 8 INT C SOFTW AN T, P85
   Xu GQ, 2011, ACM SIGPLAN NOTICES, V46, P270, DOI 10.1145/1993316.1993530
   Xu GQ, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P151, DOI 10.1145/1368088.1368110
   Xu ZG, 2016, FSE'16: PROCEEDINGS OF THE 2016 24TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON FOUNDATIONS OF SOFTWARE ENGINEERING, P607, DOI 10.1145/2950290.2950343
   Yan D., 2014, INT S CODE GENERATIO, P87
   Zhang Q, 2022, SCI COMPUT PROGRAM, V215, DOI 10.1016/j.scico.2021.102759
   Zhong H, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 1, P913, DOI 10.1109/ICSE.2015.101
NR 45
TC 0
Z9 0
U1 1
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD APR
PY 2023
VL 227
AR 102932
DI 10.1016/j.scico.2023.102932
EA MAR 2023
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 9X2LI
UT WOS:000949603900001
DA 2024-07-18
ER

PT J
AU Crafa, S
   Laneve, C
   Sartor, G
   Veschetti, A
AF Crafa, Silvia
   Laneve, Cosimo
   Sartor, Giovanni
   Veschetti, Adele
TI Agreements to be kept: Legal contracts in the Stipula
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 23rd International Conference on Coordination Models and Languages
   (COORDINATION)
CY JUN 14-18, 2021
CL ELECTR NETWORK
DE Legal contracts; Assets; Formal semantics; Normative equality; Prototype
ID LANGUAGE
AB We present Stipula, a domain specific language that may assist legal practitioners in programming legal contracts through specific patterns. The language is based on a small set of programming abstractions that correspond to common patterns in legal contracts. We illustrate the language by means of two paradigmatic legal contracts: a bike rental and a bet contract. Stipula comes with a formal semantics, an observational equivalence and a type inference system, that provide for a clear account of the contracts' behaviour and illustrate how several concepts from concurrency theory can be adapted to automatically verify the properties and the correctness of software-based legal contracts. We also discuss a prototype centralized implementation of Stipula.(c) 2022 Elsevier B.V. All rights reserved.
C1 [Crafa, Silvia] Univ Padua, Padua, Italy.
   [Laneve, Cosimo; Sartor, Giovanni; Veschetti, Adele] Univ Bologna, Bologna, Italy.
   [Sartor, Giovanni] European Univ Inst, Fiesole, Italy.
C3 University of Padua; University of Bologna; European University
   Institute
RP Crafa, S (corresponding author), Univ Padua, Padua, Italy.
EM silvia.crafa@unipd.it
RI Sartor, Giovanni/KIA-7676-2024
OI Sartor, Giovanni/0000-0003-2210-0398; Veschetti,
   Adele/0000-0002-0403-1889
FU H2020 European Research Council (ERC) Project "CompuLaw" [G.A. 833647];
   H2020-MSCA-RISE project "Behavioural Application Program Interfaces
   (BEHAPI)" [778233]; Behavioural Application Program Interfaces (BEHAPI)
   ?
FX Giovanni Sartor has been supported by the H2020 European Research
   Council (ERC) Project "CompuLaw" (G.A. 833647) . Cosimo Laneve has been
   partly supported by the H2020-MSCA-RISE project ID 778233 "Behavioural
   Application Program Interfaces (BEHAPI)". Silvia Crafa dedicates this
   work to Universita di Padova and its 800th academic year.
CR Bartoletti Massimo, 2019, Principles of Security and Trust. 8th International Conference, POST 2019. Held as Part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2019. Proceedings: Lecture Notes in Computer Science (11426), P222, DOI 10.1007/978-3-030-17138-4_10
   Bartoletti M, 2018, PROCEEDINGS OF THE 2018 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY (CCS'18), P83, DOI 10.1145/3243734.3243795
   Basu S., 2022, TECHNICAL REPORT PRO
   Basu S, 2019, PROCEEDINGS OF THE 2019 ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON NEW IDEAS, NEW PARADIGMS, AND REFLECTIONS ON PROGRAMMING AND SOFTWARE (ONWARD!' 19), P128, DOI 10.1145/3359591.3359734
   Biryukov Alex, 2017, Financial Cryptography and Data Security. FC 2017 International Workshops WAHC, BITCOIN, VOTING, WTSC, and TA. Revised Selected Papers: LNCS 10323, P453, DOI 10.1007/978-3-319-70278-0_28
   Blackshear Sam, 2021, MOVE LANGUAGE PROGRA
   Cardano Developers, 2020, CARD DOC
   Coblenz M, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428200
   Coblenz M, 2020, ACM T PROGR LANG SYS, V42, DOI 10.1145/3417516
   Crafa S., 2022, P COMBINED 29 INT WO, P23
   Crafa S, 2022, LECT NOTES COMPUT SC, V13712, P205, DOI 10.1007/978-3-031-20872-0_12
   Crafa Silvia, 2022, STIPULA PROTOTYPE
   Crafa Silvia, 2021, ARXIV
   Crary K, 2015, ACM SIGPLAN NOTICES, V50, P479, DOI [10.1145/2813885.2737997, 10.1145/2737924.2737997]
   de Kruijff J.T., 2019, CEUR WORKSHOP PROC, V2383
   de Kruijff Joost T., 2018, Proceedings of the 12th International Workshop on Value Modeling and Business Ontologies, VMBO 2018, Amsterdam, The Netherlands, February 26th - 27th, 2018, V2239, P149
   Dwivedi V, 2021, IEEE ACCESS, V9, P76069, DOI 10.1109/ACCESS.2021.3081926
   Dwivedi V, 2021, ACM COMPUT SURV, V54, DOI 10.1145/3453475
   Fournet C, 2002, LECT NOTES COMPUT SC, V2395, P268
   Frantz CK, 2016, 2016 IEEE 1ST INTERNATIONAL WORKSHOPS ON FOUNDATIONS AND APPLICATIONS OF SELF* SYSTEMS (FAS*W), P210, DOI 10.1109/FAS-W.2016.53
   He X, 2018, P INT COMP SOFTW APP, P132, DOI 10.1109/COMPSAC.2018.00025
   Jones SP, 2000, ACM SIGPLAN NOTICES, V35, P280, DOI 10.1145/357766.351267
   Laneve C., 2023, 2 WORKSHOP PROGRAMMI
   Lexon Foundation, 2020, LEX DEM ED
   Lexon Foundation, 2019, LEX HOM PAG
   Merigoux D, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3473582
   Milner R., 1989, Communication and concurrency
   Open Source Contributors, 2018, ACC PROJ
   Parr T., 2013, The Definitive ANTLR 4 Reference
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Reitwiebner Christian, 2018, BABBAGE MECH SMART C
   Schrans F., 2018, P C COMP 2 INT C ART, P218
   Seijas Pablo Lamela, 2018, Leveraging Applications of Formal Methods, Verification and Validation. Industrial Practice. 8th International Symposium, ISoLA 2018. Proceedings: Lecture Notes in Computer Science (LNCS 11247), P356, DOI 10.1007/978-3-030-03427-6_27
   Seijas PL, 2020, LECT NOTES COMPUT SC, V12063, P496, DOI 10.1007/978-3-030-54455-3_35
   Study Group on a European Civil Code & Research Group on EC Private Law (Acquis Group), 2009, PRINCIPLES DEFINITIO
   Weingärtner T, 2018, 2018 CRYPTO VALLEY CONFERENCE ON BLOCKCHAIN TECHNOLOGY (CVCBT), P55, DOI 10.1109/CVCBT.2018.00012
   Wright A., 2019, OPENLAW
NR 37
TC 1
Z9 1
U1 1
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN
PY 2023
VL 225
SI SI
AR 102911
DI 10.1016/j.scico.2022.102911
EA DEC 2022
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 7T5ZH
UT WOS:000911523700009
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Guzmán-Guzmán, X
   Núñez-Valdez, ER
   Vásquez-Reynoso, R
   Asencio, A
   García-Díaz, V
AF Guzman-Guzman, Xiomarah
   Rolando Nunez-Valdez, Edward
   Vasquez-Reynoso, Raysa
   Asencio, Angel
   Garcia-Diaz, Vicente
TI SWQL: A new domain-specific language for mining the social Web
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Domain-specific language; Data mining; Query language; Web extraction
   system; Social media
ID QUERY LANGUAGE; MEDIA; EXTRACTION; FRAMEWORK; SYSTEMS; IMPROVE
AB Social media generate a massive amount of information each day. This information is usually generated by people and may be used for many studies. Social media mining is a growing discipline inside data mining, and the results have proven to be quite revealing. Getting the data to work with might seem to be the easiest task in the process, but it can be very challenging for people without programming knowledge.
   Thus, there are numerous ways to extract information from social media, such as to use the network API, a Web scraper or specialized libraries. Using a straightforward and a cross social media query language we can hide the complexity of those mechanisms and gather information in a more efficient and easier way. This is because many social media share common elements, so we can create and unify queries to search, find and extract information from those platforms.
   In this paper, we propose a domain-specific query language, specially designed to allow developers or domain experts to extract data from different social media. With this language we unify and simplify the mechanisms of data extraction from social networks such as Twitter and Facebook. (C) 2021 Elsevier B.V. All rights reserved.
C1 [Guzman-Guzman, Xiomarah; Rolando Nunez-Valdez, Edward; Garcia-Diaz, Vicente] Univ Oviedo, Dept Comp Sci, Sci Bldg, Oviedo, Asturias, Spain.
   [Vasquez-Reynoso, Raysa; Asencio, Angel] Autonomous Univ Santo Domingo, Fac Sci, Comp Sci Sch, Santo Domingo, Dominican Rep.
C3 University of Oviedo; Universidad Autonoma de Santo Domingo
RP Núñez-Valdez, ER (corresponding author), Univ Oviedo, Dept Comp Sci, Sci Bldg, Oviedo, Asturias, Spain.
EM UO273217@uniovi.es; nunezedward@uniovi.es; rvasquez60@uasd.edu.do;
   aasencio25@uasd.edu.do; garciavicente@uniovi.es
RI Garcia-Diaz, Vicente/T-3938-2017; Núñez-Valdez, Edward
   Rolando/L-1868-2017
OI Garcia-Diaz, Vicente/0000-0003-2037-8548; Núñez-Valdez, Edward
   Rolando/0000-0003-4928-4035
CR Ahmed U., 2020, IEEE T EMERG TOP COM, P1
   Andova Suzana, 2012, Formal Methods for Model-Driven Engineering. 12th International School of Formal Methods for the Design of Computer, Communication and Software Systems (SFM 2012). Advanced Lectures, P21, DOI 10.1007/978-3-642-30982-3_2
   [Anonymous], 2020, ULTIMATE GUIDE SOCIA
   Balakrishna S, 2020, INT J INTERACT MULTI, V6, P56, DOI 10.9781/ijimai.2020.03.001
   Baumgartner R., 2009, WEB DATA EXTRACTION, DOI [10.1007/978-0-387-39940-9_1154, DOI 10.1007/978-0-387-39940-9_1154]
   Borodin A, 2015, COMM COM INF SC, V521, P505, DOI 10.1007/978-3-319-18422-7_45
   Catal C, 2017, APPL SOFT COMPUT, V50, P135, DOI 10.1016/j.asoc.2016.11.022
   Chang CH, 2006, IEEE T KNOWL DATA EN, V18, P1411, DOI 10.1109/TKDE.2006.152
   de la Vega A, 2018, COMPUT LANG SYST STR, V54, P316, DOI 10.1016/j.cl.2018.07.002
   Ding WL, 2008, IEEE CONGRESS ON SERVICES 2008, PT I, PROCEEDINGS, P113, DOI 10.1109/SERVICES-1.2008.59
   Drahosová M, 2017, PROCEDIA COMPUT SCI, V109, P1005, DOI 10.1016/j.procs.2017.05.446
   Montenegro-Marín CE, 2012, J WEB ENG, V11, P23
   Eysholdt M., 2010, P ACM INT C COMPANIO, P307, DOI DOI 10.1145/1869542.1869625
   Ferrara E, 2014, KNOWL-BASED SYST, V70, P301, DOI 10.1016/j.knosys.2014.07.007
   Francis N, 2018, INT CONF MANAGE DATA, P1433, DOI 10.1145/3183713.3190657
   Gandomi A, 2015, INT J INFORM MANAGE, V35, P137, DOI 10.1016/j.ijinfomgt.2014.10.007
   García-Díaz V, 2018, APPL SOFT COMPUT, V67, P822, DOI 10.1016/j.asoc.2017.05.038
   Garton L., 1997, J. Comput.-Mediat. Commun, V3, DOI DOI 10.1111/J.1083-6101.1997.TB00062.X
   Gayo-Avello D., 2012, ARXIV12046441ABS
   Ghani NA, 2019, COMPUT HUM BEHAV, V101, P417, DOI 10.1016/j.chb.2018.08.039
   García CG, 2019, UNIVERSAL ACCESS INF, V18, P599, DOI 10.1007/s10209-019-00681-y
   García CG, 2014, I C INNOV MOBILE INT, P352, DOI 10.1109/IMIS.2014.48
   Gupta V, 2016, INT J BUS ANAL, V3, P58, DOI 10.4018/IJBAN.2016010104
   Hästbacka D, 2011, J SYST SOFTWARE, V84, P1100, DOI 10.1016/j.jss.2011.01.063
   Hermans F, 2009, LECT NOTES COMPUT SC, V5795, P423, DOI 10.1007/978-3-642-04425-0_33
   Húsek D, 2009, INT CONF COMPU ASPEC, P73, DOI 10.1109/CASoN.2009.12
   Kaplan A., 2010, BUS HORIZONS, V53, P59, DOI DOI https://doi.org/10.1016/j.bushor.2009.09.003
   Kurtev I., 2006, COMPANION 21 ANN ACM, P602, DOI DOI 10.1145/1176617.1176632
   Laender A.H., 2002, BRIEF SURVEY WEB DAT, DOI [10.1145/565117.565137, DOI 10.1145/565117.565137]
   Lies J, 2019, INT J INTERACT MULTI, V5, P134, DOI 10.9781/ijimai.2019.05.002
   Guzmán De Núñez XM, 2018, FRONT ARTIF INTEL AP, V303, P713, DOI 10.3233/978-1-61499-900-3-713
   Mazairac W, 2013, ADV ENG INFORM, V27, P444, DOI 10.1016/j.aei.2013.06.001
   Meana-Llorian D., 2017, P 2 INT C RES INT CO, V10, P57, DOI DOI 10.15439/2017R110
   Mohammed A.-M., 2020, ENCY CRIMINAL ACTIVI, P979
   Pang B., 2008, INFORM RETRIEVAL, V2, P1, DOI [10.1561/1500000011, DOI 10.1561/1500000011, https://doi.org/10.1561/1500000011]
   Parr T.J., 1995, Software: Practice and Experience Volume, V25.Number
   Patodkar V.N., 2017, COMPUTER, V5, P320, DOI [DOI 10.1371/JOURNAL.PONE.0026624, 10.17148/ijarcce.2016.51274, DOI 10.17148/IJARCCE.2016.51274]
   Pourvali M, 2019, INT J INTERACT MULTI, V5, P28, DOI 10.9781/ijimai.2018.12.007
   Puschmann C., 2014, Twitter and Society, P43, DOI [DOI 10.2139/SSRN.2206225, 10.2139/SSRN.2206225]
   Rambocas M., 2013, Marketing research: The role of sentiment analysis
   Nuñez-Valdez ER, 2013, INT J INTERACT MULTI, V2, P33, DOI 10.9781/ijimai.2013.224
   Schmidt DC, 2006, COMPUTER, V39, P25, DOI 10.1109/MC.2006.58
   Seaborne A., 2008, SPARQL Query Language for RDF
   Sharma V, 2020, PROCEEDINGS OF THE INTERNATIONAL CONFERENCE ON INTELLIGENT COMPUTING AND CONTROL SYSTEMS (ICICCS 2020), P1, DOI [10.1109/iciccs48265.2020.9121060, 10.1109/ICICCS48265.2020.9121060]
   SmartInsights, 2019, GLOBAL SOCIAL MEDIA
   Stieglitz S, 2013, SOC NETW ANAL MIN, V3, P1277, DOI 10.1007/s13278-012-0079-3
   Van Deursen A, 1998, J SOFTW MAINT-RES PR, V10, P75, DOI 10.1002/(SICI)1096-908X(199803/04)10:2<75::AID-SMR168>3.0.CO;2-5
   van Deursen A., 1997, Smalltalk and Java in Industry and Academia, P35
   Wirth N., 1996, EXTENDED BACKUS NAUR
   Yang RN, 2006, CURRENT DEVELOPMENT IN ABRASIVE TECHNOLOGY, PROCEEDINGS, P613
   Zafarani Reza, 2014, Social Media Mining, DOI [DOI 10.1017/CBO9781139088510, 10.1017/CBO9781139088510]
NR 51
TC 4
Z9 4
U1 1
U2 8
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUL 1
PY 2021
VL 207
AR 102642
DI 10.1016/j.scico.2021.102642
EA MAR 2021
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA RQ5SW
UT WOS:000642479600001
DA 2024-07-18
ER

PT J
AU Timm, N
   Gruner, S
   Nxumalo, M
   Botha, J
AF Timm, Nils
   Gruner, Stefan
   Nxumalo, Madoda
   Botha, Josua
TI Model checking safety and liveness via <i>k</i>-induction and witness
   refinement with constraint generation
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 6th International Workshop on Formal Techniques for Safety-Critical
   Systems (FTSCS)
CY NOV 16, 2018
CL Gold Coast, AUSTRALIA
DE Three-valued abstraction; SAT-based bounded model checking; Constraint
   generation; k-induction; Liveness
ID ABSTRACTION
AB In this article, we revise our constraint-based abstraction refinement technique for checking temporal logic properties of concurrent software systems. Our technique employs predicate abstraction and SAT-based three-valued bounded model checking. In contrast to classical refinement techniques where a single state space model is iteratively explored and refined with predicates, our approach is as follows: We use a coarsely-abstracted global state space model where we check for abstract witness paths for the property of interest. For each detected abstract witness we construct a local model whose state space is restricted to refinements of the witness only. On the local models we check whether the witness is real or spurious. We eliminate spurious witnesses in the global model via spurious segment constraints, which do not increase the state space complexity. Our technique is complete and terminates when a real witness in a local model can be detected, or no more witnesses in the global model exist.
   While our technique was originally restricted to the verification of safety properties, we extend it here to the verification of liveness properties. For this, we make use of the state recording translation of the input system, which reduces liveness model checking to safety checking. Another restriction of our original approach was its incompleteness due to the nature of bounded model checking. Here we show how abstraction refinement-based bounded model checking can be combined with the k-induction principle, which enables unbounded model checking. Our approach is iterative with regard to the bound. The extended approach also allows us to define enhanced concepts for strengthening the constraints that we use to rule out spurious behaviour and for reusing constraints between bound iterations. We demonstrate that our approach enables the complete verification of safety and liveness properties with a reduced state space complexity and a better solving time in comparison to classical abstraction refinement techniques. (C) 2020 Elsevier B.V. All rights reserved.
C1 [Timm, Nils; Gruner, Stefan; Nxumalo, Madoda; Botha, Josua] Univ Pretoria, Dept Comp Sci, Pretoria, South Africa.
C3 University of Pretoria
RP Timm, N (corresponding author), Univ Pretoria, Dept Comp Sci, Pretoria, South Africa.
EM ntimm@cs.up.ac.za; sg@cs.up.ac.za
OI Timm, Nils/0000-0002-9656-3240
CR [Anonymous], 2012, LECT NOTES COMPUT SC
   [Anonymous], 1999, LNCS
   Apel S, 2016, FSE'16: PROCEEDINGS OF THE 2016 24TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON FOUNDATIONS OF SOFTWARE ENGINEERING, P349, DOI 10.1145/2950290.2950349
   Bernasconi Anna, 2017, Software Engineering and Formal Methods. 15th International Conference, SEFM 2017. Proceedings: Lecture Notes in Computer Society (LNCS 10469), P54, DOI 10.1007/978-3-319-66197-1_4
   Beyer D., 2012, P FSE ACM, P57, DOI DOI 10.1145/2393596.2393664
   Biere A, 1999, LECT NOTES COMPUT SC, V1579, P193
   Biere A., 2002, ELECT NOTES THEOR CO, V66, P160, DOI [DOI 10.1016/S1571-0661(04)80410-9, 10.1016/S1571-0661(04)80410-9]
   Biere A, 2009, FRONT ARTIF INTEL AP, V185, P457, DOI 10.3233/978-1-58603-929-5-457
   Caridroit T, 2017, AAAI CONF ARTIF INTE, P3864
   Chen JH, 2018, IEEE INT CONF AUTOM, P351, DOI 10.1145/3238147.3238218
   Clarke EdmundM., 2000, Proceedings of the International Conference on Computer Aided Veri cation (CAV), P154, DOI 10.1007/1072216715
   De Angelis E, 2018, THEOR PRACT LOG PROG, V18, P126, DOI 10.1017/S1471068417000497
   de Moura L, 2003, LECT NOTES COMPUT SC, V2725, P14
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Degiovanni R, 2018, SOFTW TEST VERIF REL, V28, DOI 10.1002/stvr.1657
   Een N., 2003, ELECT NOTES THEORETI, V89, P543, DOI 10.1016/s1571-0661(05)82542-3
   Fecher H, 2007, LECT NOTES COMPUT SC, V4595, P4
   Fitting M., 1994, Fundamenta Informaticae, V20, P113
   Gadelha M.Y.R., CORR
   Henzinger TA, 2002, ACM SIGPLAN NOTICES, V37, P58, DOI 10.1145/565816.503279
   Holzmann GJ, 1997, IEEE T SOFTWARE ENG, V23, P279, DOI 10.1109/32.588521
   Hsu K., CORR
   James P., 2010, SAT BASED MODEL CHEC
   Konnov I, 2017, INFORM COMPUT, V252, P95, DOI 10.1016/j.ic.2016.03.006
   Kourie D. G., 1989, Quaestiones Informaticae, V6, P174
   Kroening Daniel, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P557, DOI 10.1007/978-3-642-22110-1_44
   Latvala T, 2004, LECT NOTES COMPUT SC, V3312, P186
   Li J., ARXIV161104946
   Li JW, 2017, ICCAD-IEEE ACM INT, P95, DOI 10.1109/ICCAD.2017.8203765
   Li YM, 2017, INFORM SCIENCES, V377, P51, DOI 10.1016/j.ins.2016.10.030
   Lomuscio A, 2015, PROCEEDINGS OF THE 2015 INTERNATIONAL CONFERENCE ON AUTONOMOUS AGENTS & MULTIAGENT SYSTEMS (AAMAS'15), P189
   Madhukar K, 2015, DES AUT TEST EUROPE, P1571
   Miller A, 2006, ACM COMPUT SURV, V38, DOI 10.1145/1132960.1132962
   Nadel Alexander, 2010, 2010 Formal Methods in Computer-Aided Design (FMCAD 2010), P221
   Nadel A, 2014, LECT NOTES COMPUT SC, V8561, P206, DOI 10.1007/978-3-319-09284-3_16
   Peled Doron., 2018, Partial-Order Reduction, P173, DOI [DOI 10.1007/978-3-319-10575-8, 10.1007/978-3-319-10575-8%206, DOI 10.1007/978-3-319-10575-86]
   Schrieb J, 2009, LECT NOTES COMPUT SC, V5850, P106, DOI 10.1007/978-3-642-05089-3_8
   Sheeran M, 2000, LECT NOTES COMPUT SC, V1954, P108
   Shoham S, 2008, INFORM COMPUT, V206, P1313, DOI 10.1016/j.ic.2008.07.004
   Sorensson N., 2005, SAT, V2005, P53
   Strichman O, 2004, FORM METHOD SYST DES, V24, P5, DOI 10.1023/B:FORM.0000004785.67232.f8
   Timm N., 2016, LNCS, V10090, P199
   Timm N, 2019, FORMAL TECHNIQUES SA, P139
   Timm N., 2018, FORMAL METHODS FDN A, P126
   Timm N, 2019, SCI COMPUT PROGRAM, V175, P37, DOI 10.1016/j.scico.2019.02.002
   Wahl T., 2013, K INDUCTION PRINCIPL, P1
   Wehrheim H, 2008, LECT NOTES COMPUT SC, V5160, P380, DOI 10.1007/978-3-540-85762-4_26
   Zhao P, 2018, LECT NOTES COMPUT SC, V10795, P171, DOI 10.1007/978-3-319-90104-6_11
NR 48
TC 5
Z9 5
U1 0
U2 8
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 1
PY 2020
VL 200
AR 102532
DI 10.1016/j.scico.2020.102532
PG 28
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA NZ8II
UT WOS:000577344900002
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Li, Y
   Sun, WD
   Sun, M
AF Li, Yi
   Sun, Weidi
   Sun, Meng
TI <i>Mediator</i>: A component-based modeling language for concurrent and
   distributed systems
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 13th International Symposium on Theoretical Aspects of Software
   Engineering (TASE)
CY JUL 29-AUG 01, 2019
CL Guilin, PEOPLES R CHINA
SP IEEE Comp Soc, Guangxi Normal Univ, Coll Comp Sci & Informat Technol
DE Component-based development; Modeling language; Mediator; Coordination;
   Distributed systems
AB In this paper we propose a new language Mediatorto formalize component-based concurrent and distributed system models. Mediator supports a two-step hierarchical modeling approach: Automata, which provide an interface of ports, are the basic behavior units; Systems declare components or connectors through automata, and glue them together. With the help of Mediator, components and systems can be modeled separately and precisely. The distributed Mediator and its semantics can be used to capture the inherent real-time and asynchronous behavior in distributed systems. Properties of Mediator models can be specified through CTL* formulae that support various families of properties such as safety and liveness, which can be verified using the nuXmv model checker. A leader election example is presented to show that this language is capable for modeling practical scenarios. (C) 2020 Elsevier B.V. All rights reserved.
C1 [Li, Yi; Sun, Weidi; Sun, Meng] Peking Univ, Sch Math Sci, Beijing, Peoples R China.
C3 Peking University
RP Sun, M (corresponding author), Peking Univ, Sch Math Sci, Beijing, Peoples R China.
EM liyi_math@pku.edu.cn; weidisun@pku.edu.cn; sunm@pku.edu.cn
RI SUN, MENG/KQA-2135-2024
OI Sun, Meng/0000-0001-6550-7396
FU National Natural Science Foundation of China [61772038, 61532019,
   61272160]; Guangdong Science and Technology Department [2018B010107004]
FX This work was partially supported by the National Natural Science
   Foundation of China under grant no. 61772038, 61532019 and 61272160, and
   the Guangdong Science and Technology Department (Grant no.
   2018B010107004).
CR Abdulla PA, 2006, LECT NOTES COMPUT SC, V4313, P115, DOI 10.1007/11925040_8
   [Anonymous], LNCS
   [Anonymous], 1989, PRENTICE HALL INT SE
   [Anonymous], 2001, MODELING VERIFICATIO
   [Anonymous], P SEKE 2019
   [Anonymous], 2016, ESSENTIAL MATLAB ENG
   Arbab F, 2004, MATH STRUCT COMP SCI, V14, P329, DOI 10.1017/S0960129504004153
   Baier C, 2008, PRINCIPLES OF MODEL CHECKING, P1
   Bernstein PA., 1996, Principles of Transaction Processing for Systems Professionals
   BERRY G, 1992, SCI COMPUT PROGRAM, V19, P87, DOI 10.1016/0167-6423(92)90005-V
   Bliudze S, 2008, IEEE T COMPUT, V57, P1315, DOI 10.1109/TC.2008.26
   Cavada R, 2014, LECT NOTES COMPUT SC, V8559, P334, DOI 10.1007/978-3-319-08867-9_22
   Curry E., 2004, Middleware for Communications, P1, DOI [10.1002/0470862084, DOI 10.1002/0470862084]
   Fu Yuan-xin, 2014, Chinese Journal of Biologicals, V27, P103
   Gropp W., 1999, Using MPI-2: Advanced Features of the Message Passing Interface, Vsecond
   Hagit A., 2004, DISTRIBUTED COMPUTIN
   HOARE CAR, 1978, COMMUN ACM, V21, P666, DOI 10.1145/359576.359585
   Hokeun Kim, 2017, 2017 IEEE/ACM Second International Conference on Internet-of-Things Design and Implementation (IoTDI), P147, DOI 10.1145/3054977.3054980
   Junqueira FP, 2011, I C DEPEND SYS NETWO, P245, DOI 10.1109/DSN.2011.5958223
   Levy E., 1991, SIGMOD Record, V20, P88, DOI 10.1145/119995.115800
   Li Y., 2017, Discret. Dyn. Nat. Soc., V2017, P1
   Li Y, 2019, 2019 13TH INTERNATIONAL SYMPOSIUM ON THEORETICAL ASPECTS OF SOFTWARE ENGINEERING (TASE 2019), P17, DOI [10.1109/TASE.2019.00-24, 10.1109/TASE.2019.00010]
   Liu ZM, 2010, LECT NOTES COMPUT SC, V5961, P62
   Margolis M., 2011, Arduino Cookbook
   Snir M., 1998, MPI-the complete reference: the MPI core, V1
   Wang S., 2013, 2013 P INT C EMB
   Wilcox JR, 2015, ACM SIGPLAN NOTICES, V50, P357, DOI [10.1145/2737924.2737958, 10.1145/2813885.2737958]
   Yi Li, 2018, Its All About Coordination - Essays to Celebrate the Lifelong Scientific Achievements of Farhad Arbab. Lecture Notes in Computer Science (LNCS 10865), P174, DOI 10.1007/978-3-319-90089-6_12
NR 28
TC 2
Z9 2
U1 0
U2 6
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 15
PY 2020
VL 192
AR 102438
DI 10.1016/j.scico.2020.102438
PG 30
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA LG6EM
UT WOS:000528191700004
OA Bronze
DA 2024-07-18
ER

PT J
AU Ferrarotti, F
   González, S
   Schewe, KD
AF Ferrarotti, Flavio
   Gonzalez, Senen
   Schewe, Klaus-Dieter
TI BSP abstract state machines capture bulk synchronous parallel
   computations
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Bulk synchronous parallel bridging model; Abstract state machine;
   Concurrent algorithm; Behavioural theory
ID THESIS
AB The bulk synchronous parallel (BSP) bridging model is a model for concurrent computations with alternating computation and communication phases between programs running on different processors. In a computation phase the programs proceed independently and asynchronously until a barrier is reached. In a communication phase initiated by all programs having reached the barrier only messages between the programs are exchanged until normal processing can be continued. In this article we present a behavioural theory for BSP computations comprising an axiomatisation of the BSP model, the definition of a restricted class of concurrent abstract state machines, which we call BSP abstract state machines, and the proof that BSP abstract state machines capture BSP computations as defined by the axiomatisation. We illustrate the use of BSP abstract state machines on map-reduce. (C) 2019 Elsevier B.V. All rights reserved.
C1 [Ferrarotti, Flavio] Software Competence Ctr Hagenberg, Hagenberg, Austria.
   [Gonzalez, Senen] P&T Connected, Hagenberg, Austria.
   [Schewe, Klaus-Dieter] Zhejiang Univ, UIUC Inst, Haining, Peoples R China.
C3 Softwarepark Hagenberg; Zhejiang University
RP Schewe, KD (corresponding author), Zhejiang Univ, UIUC Inst, Haining, Peoples R China.
EM flavio.ferrarotti@scch.at; ulcango@gmail.com; kd.schewe@intl.zju.edu.cn
CR Amarís M, 2015, 2015 IEEE 22ND INTERNATIONAL CONFERENCE ON HIGH PERFORMANCE COMPUTING (HIPC), P285, DOI 10.1109/HiPC.2015.34
   [Anonymous], 2017, P AUSTR COMP SCI WEE
   Bisseling R.H., 2004, Parallel Scientific Computation: A Structured Approach Using BSP and MPI
   Blass A., 2003, ACM Transactions on Computational Logic, V4, P578, DOI 10.1145/937555.937561
   Blass A, 2008, ACM T COMPUT LOG, V9, DOI 10.1145/1352582.1352586
   Börger E, 2017, J UNIVERS COMPUT SCI, V23, P129
   Börger E, 2016, ACTA INFORM, V53, P469, DOI 10.1007/s00236-015-0249-7
   Costa VG, 2005, Third Latin American Web Congress, Proceedings, P259, DOI 10.1109/LAWEB.2005.7
   Crumpton P., 1995, MULTIGRID AIRCRAFT C
   Dean Jeffrey, 2004, OSDI 04, P10
   Dershowitz N, 2016, LOG J IGPL, V24, P346, DOI 10.1093/jigpal/jzw008
   Ferrarotti F, 2016, THEOR COMPUT SCI, V649, P25, DOI 10.1016/j.tcs.2016.08.013
   Gava F, 2014, J SUPERCOMPUT, V69, P629, DOI 10.1007/s11227-014-1099-8
   Gurevich Y., 2000, ACM T COMPUT LOG, V1, P77, DOI DOI 10.1145/343369.343384
   Gurevich Y, 2007, BULL EUR ASSOC THEOR, P82
   Gurevich Yuri., 1995, Speci fication and Validation Methods
   LAMPORT L, 1979, IEEE T COMPUT, V28, P690, DOI 10.1109/TC.1979.1675439
   Marquer Y., 2018, HAL01717647 U PAR LA
   Marquer Y, 2018, LECT NOTES COMPUT SC, V11336, P72, DOI 10.1007/978-3-030-05057-3_6
   Schewe Klaus-Dieter, 2012, Abstract State Machines, Alloy, B, VDM, and Z. Proceedings Third International Conference, ABZ 2012, P341, DOI 10.1007/978-3-642-30885-7_27
   Schewe KD, 2010, ACTA CYBERN, V19, P765
   Trabes G, 2018, EUROMICRO WORKSHOP P, P579, DOI 10.1109/PDP2018.2018.00098
   VALIANT LG, 1990, COMMUN ACM, V33, P103, DOI 10.1145/79173.79181
NR 23
TC 4
Z9 4
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 1
PY 2019
VL 184
AR 102319
DI 10.1016/j.scico.2019.102319
PG 12
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA JM6QO
UT WOS:000496336900002
OA Bronze
DA 2024-07-18
ER

PT J
AU Winter, K
   Smith, G
   Derrick, J
AF Winter, Kirsten
   Smith, Graeme
   Derrick, John
TI Modelling concurrent objects running on the TSO and ARMv8 memory models
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 12th International Symposium on Theoretical Aspects of Software
   Engineering (TASE)
CY AUG 29-31, 2018
CL Guangzhou, PEOPLES R CHINA
SP Jinan Univ, Coll Informat Sci, IEEE Comp Soc, Jinan Univ
DE Linearizability; Weak memory models; TSO; ARMv8; Model checking
ID LINEARIZABILITY; VERIFICATION; CHECKING
AB Hardware weak memory models, such as TSO and ARM, are used to increase the performance of concurrent programs by allowing program instructions to be executed on the hardware in a different order to that specified by the software. This places a challenge on the verification of concurrent objects used in these programs since the variations in the executions need to be considered.
   Many approaches exist for verifying concurrent objects along with associated tool support. In particular, we focus on a thread-local approach to checking linearizability, the standard correctness condition for concurrent objects, using a model checker. This approach, like most others, does not support weak memory models. In order to reuse this existing approach, therefore, we show how to use the semantics of a weak memory model to directly derive a transition system of concurrent objects running under it.
   We do this for both TSO and the latest version of ARM, ARMv8. Since there is a straightforward implementation of TSO, we reflect this in our transition system which includes a buffer of writes to memory mirroring the store buffer of TSO. We illustrate linearizability checking using model checking on a transition system generated by this approach.
   The implementation of the significantly more complex ARMv8 architecture is less obvious. We derive our transition system in this case from an existing operational semantics that is consistent with the results of thousands of litmus test run on ARM hardware. (C) 2019 Elsevier B.V. All rights reserved.
C1 [Winter, Kirsten; Smith, Graeme] Univ Queensland, Sch Informat Technol & Elect Engn, Brisbane, Qld, Australia.
   [Derrick, John] Univ Sheffield, Dept Comp, Sheffield, S Yorkshire, England.
C3 University of Queensland; University of Sheffield
RP Winter, K (corresponding author), Univ Queensland, Sch Informat Technol & Elect Engn, Brisbane, Qld, Australia.
EM kirsten@itee.uq.edu.au
RI Smith, Graeme/F-9960-2014
OI Smith, Graeme/0000-0003-1019-4761; Derrick, John/0000-0002-6631-8914;
   Winter, Kirsten/0000-0002-8519-2026
FU Australian Research Council [DP160102457]; UK EPSRC [EP/R032351/1];
   EPSRC [EP/R018936/1, EP/R032351/1] Funding Source: UKRI
FX This work was supported by Australian Research Council Discovery Grant
   DP160102457, and by the UK EPSRC grant EP/R032351/1.
CR Abdulla P., 2018, LOG METH COMPUT SCI, V14, P1
   Abdulla PA, 2017, LECT NOTES COMPUT SC, V10206, P56, DOI 10.1007/978-3-662-54580-5_4
   Abe T, 2017, INT J SOFTW TOOLS TE, V19, P623, DOI 10.1007/s10009-016-0429-y
   Abe Tatsuya, 2017, J INFORM PROCESSING, V25, P244
   Alglave J, 2014, ACM T PROGR LANG SYS, V36, DOI 10.1145/2627752
   Amit D, 2007, LECT NOTES COMPUT SC, V4590, P477
   [Anonymous], 2011, SYNTHESIS LECT COMPU
   Bovet D. P., 2005, Understanding the Linux Kernel: from I/O ports to process management
   Burckhardt S, 2012, LECT NOTES COMPUT SC, V7211, P87, DOI 10.1007/978-3-642-28869-2_5
   Calcagno C, 2007, LECT NOTES COMPUT SC, V4634, P233
   Cimatti A., 2002, Computer Aided Verification. 14th International Conference, CAV 2002. Proceedings (Lecture Notes in Computer Science Vol.2404), P359
   Colvin R., ARXIV181200996 CORR
   Colvin RJ, 2018, LECT NOTES COMPUT SC, V10951, P240, DOI 10.1007/978-3-319-95582-7_14
   Derrick John, 2011, FM 2011: Formal Methods. Proceedings 17th International Symposium on Formal Methods, P323, DOI 10.1007/978-3-642-21437-0_25
   Derrick J, 2007, LECT NOTES COMPUT SC, V4591, P195
   Derrick J, 2015, LECT NOTES COMPUT SC, V9109, P178, DOI 10.1007/978-3-319-19249-9_12
   Derrick J, 2014, LECT NOTES COMPUT SC, V8739, P341, DOI 10.1007/978-3-319-10181-1_21
   Derrick J, 2011, ACM T PROGR LANG SYS, V33, DOI 10.1145/1889997.1890001
   Doherty S, 2004, LECT NOTES COMPUT SC, V3235, P97
   Doherty S, 2016, LECT NOTES COMPUT SC, V9763, P45, DOI 10.1007/978-3-319-41591-8_4
   Flur S, 2016, ACM SIGPLAN NOTICES, V51, P608, DOI 10.1145/2914770.2837615
   Herlihy M., 2008, ART MULTIPROCESSOR P
   HERLIHY MP, 1990, ACM T PROGR LANG SYS, V12, P463, DOI 10.1145/78969.78972
   Lahav O, 2015, LECT NOTES COMPUT SC, V9135, P311, DOI 10.1007/978-3-662-47666-6_25
   Moir M., 2004, HDB DATA STRUCTURES, DOI [10.1201/9781420035179.ch47, DOI 10.1201/9781420035179.CH47]
   OWICKI S, 1976, ACTA INFORM, V6, P319, DOI 10.1007/BF00268134
   Pulte C., 2018, POPL 2018
   Reif W, 1998, APPL LOG SER, V9, P13
   Sarkar S, 2011, ACM SIGPLAN NOTICES, V46, P175, DOI 10.1145/1993316.1993520
   Schellhorn G, 2014, ACM T COMPUT LOG, V15, DOI 10.1145/2629496
   Sewell P, 2010, COMMUN ACM, V53, P89, DOI 10.1145/1785414.1785443
   Smith G., 2016, SAC 2016 ACM, P1694
   Smith G, 2016, LECT NOTES COMPUT SC, V9763, P188, DOI 10.1007/978-3-319-41591-8_13
   Still V, 2018, LECT NOTES COMPUT SC, V11232, P124, DOI 10.1007/978-3-030-02450-5_8
   Travkin Oleg, 2013, Hardware and Software: Verification and Testing. 9th International Haifa Verification Conference, HVC 2013. Proceedings: LNCS 8244, P311, DOI 10.1007/978-3-319-03077-7_21
   Travkin O, 2016, LECT NOTES COMPUT SC, V9965, P3, DOI 10.1007/978-3-319-46750-4_1
   Vafeiadis V., 2007, THESIS
   Winter K, 2018, PROCEEDINGS 2018 12TH INTERNATIONAL SYMPOSIUM ON THEORETICAL ASPECTS OF SOFTWARE ENGINEERING (TASE 2018), P100, DOI 10.1109/TASE.2018.00021
NR 38
TC 1
Z9 1
U1 1
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 1
PY 2019
VL 184
AR 102308
DI 10.1016/j.scico.2019.102308
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA JM6QO
UT WOS:000496336900007
OA Bronze, Green Accepted
DA 2024-07-18
ER

PT J
AU Durán, F
   Rocha, C
   Salaün, G
AF Duran, Francisco
   Rocha, Camilo
   Salaun, Gwen
TI A rewriting logic approach to resource allocation analysis in business
   process models
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE BPMN; Resource allocation; Rewriting logic; Automated verification;
   Maude
ID SEMANTICS
AB This paper presents an approach for the modeling and analysis of resource allocation for business processes. It enables the automatic computation of measures for precisely identifying and optimizing the allocation of resources in business processes, including resource usage over time. The proposed analysis, especially suited to support decision-making strategies, is illustrated with a case study of a parcel ordering and delivery by drones that is developed throughout the paper. The paper comprises an encoding of a significant and expressive subset of the Business Process Model and Notation (BPMN) in rewriting logic, an executable logic of concurrent change that can naturally deal with state and with concurrent computations. The encoding is by itself a formal semantics and interpreter of the BPMN subset that captures all concurrent behavior and thus is used to simulate the concurrent evolution of any business process with a given number of resources and replicas. (C) 2019 Elsevier B.V. All rights reserved.
C1 [Duran, Francisco] Univ Malaga, Malaga, Spain.
   [Rocha, Camilo] Pontificia Univ Javeriana, Cali, Colombia.
   [Salaun, Gwen] Univ Grenoble Alpes, CNRS, INRIA, Grenoble INP,LIG, F-38000 Grenoble, France.
C3 Universidad de Malaga; Pontificia Universidad Javeriana; Communaute
   Universite Grenoble Alpes; Institut National Polytechnique de Grenoble;
   Universite Grenoble Alpes (UGA); Centre National de la Recherche
   Scientifique (CNRS); Inria
RP Rocha, C (corresponding author), Pontificia Univ Javeriana, Cali, Colombia.
EM camilo.rocha@javerianacali.edu.co
RI Durán, Francisco/JXL-7273-2024
OI Duran, Francisco/0000-0001-5864-8094; Rocha, Camilo/0000-0003-4356-7704
FU Spanish MINECO/FEDER [PGC2018-094905-B-100]; FEDER Andalucia
   [UMA18-FEDERJA-180]; CAPES; Colciencias; INRIA via the STIC AmSud
   project "EPIC: EPistemic Interactive Concurrency"
   [88881.117603/2016-01]; Capital Semilla 2017 project "SCORES: Stochastic
   Concurrency in Rewrite-based Probabilistic Models" [020100610]
FX The first author was supported in part by projects PGC2018-094905-B-100
   (Spanish MINECO/FEDER) and UMA18-FEDERJA-180 (FEDER Andalucia). The
   second author has been supported in part by CAPES, Colciencias, and
   INRIA via the STIC AmSud project "EPIC: EPistemic Interactive
   Concurrency" (Proc. No. 88881.117603/2016-01), and Capital Semilla 2017
   project "SCORES: Stochastic Concurrency in Rewrite-based Probabilistic
   Models" (Proj. No. 020100610).
CR [Anonymous], 2007, LECT NOTES COMPUTER
   [Anonymous], 2007, Technical Report SUF-PFY/96-01
   Arevalo C, 2016, INFORM SOFTWARE TECH, V77, P17, DOI 10.1016/j.infsof.2016.05.004
   Bouhoula A, 2000, THEOR COMPUT SCI, V236, P35, DOI 10.1016/S0304-3975(99)00206-6
   Braghetto KR, 2011, LECT NOTES COMPUT SC, V6977, P42, DOI 10.1007/978-3-642-24749-1_5
   Bruni Roberto, 2012, Web Services and Formal Methods. 8th International Workshop (WS-FM 2011). Revised Selected Papers, P111, DOI 10.1007/978-3-642-29834-9_9
   Capel MI, 2012, IEEE ANNU SOFTW ENG, P100, DOI 10.1109/SEW.2012.17
   Christiansen DR, 2011, LECT NOTES COMPUT SC, V6551, P146, DOI 10.1007/978-3-642-19589-1_10
   Dijkman RM, 2008, INFORM SOFTWARE TECH, V50, P1281, DOI 10.1016/j.infsof.2008.02.006
   Duran F., 2018, NOTE RESOURCE ALLOCA
   Durán F, 2018, LECT NOTES COMPUT SC, V11176, P320, DOI 10.1007/978-3-030-04771-9_24
   Durán F, 2018, SCI COMPUT PROGRAM, V168, P1, DOI 10.1016/j.scico.2018.08.007
   Durán F, 2017, LECT NOTES COMPUT SC, V10319, P219, DOI 10.1007/978-3-319-59746-1_12
   El-Saber Nissreen A. S., 2014, P 2014 WORKSHOP BEHA, P1
   Gagne Denis, 2009, 2009 IEEE Conference on Commerce and Enterprise Computing, P361, DOI 10.1109/CEC.2009.71
   ISO/IEC, 2013, ISO/IEC 19510
   Krishna Ajay, 2017, Integrated Formal Methods. 13th International Conference, IFM 2017. Proceedings: LNCS 10510, P323, DOI 10.1007/978-3-319-66845-1_21
   Li JQ, 2004, IEEE T SYST MAN CY A, V34, P229, DOI 10.1109/TSMCA.2003.819490
   Mateescu R., 2014, P CBSE 2014, P159
   Mendoza LE, 2012, INFORM SOFTWARE TECH, V54, P149, DOI 10.1016/j.infsof.2011.08.004
   Morales LEM, 2011, LECT NOTES BUS INF P, V73, P388
   MESEGUER J, 1992, THEOR COMPUT SCI, V96, P73, DOI 10.1016/0304-3975(92)90182-F
   Netjes Mariska., 2005, 6 WORKSHOP TUTORIAL, V576, P251
   Object Management Group (OMG), 2011, Business Process Model and Notation (BPMN) Version 2.0. Business
   Oliveira C, 2009, IEEE SYS MAN CYBERN, P2824, DOI 10.1109/ICSMC.2009.5346592
   Oliveira CAL, 2012, IEEE T SYST MAN CY A, V42, P669, DOI 10.1109/TSMCA.2011.2170412
   Olveczky P. C., 2007, Higher-Order and Symbolic Computation, V20, P161, DOI 10.1007/s10990-007-9001-5
   Poizat P., 2012, P 27 ANN ACM S APPL, P1927, DOI [10.1145/2245276.2232095, DOI 10.1145/2245276.2232095]
   Poizat P, 2017, LECT NOTES COMPUT SC, V10231, P36, DOI 10.1007/978-3-319-57666-4_4
   Raedts I., 2007, MSVVEIS, P126
   Schomig A.K., 1995, 116 U WURZB
   Sperl S., 2017, DROPPED REF, P128
   van der Aalst WMP, 2002, LECT NOTES COMPUT SC, V2480, P45
   van der Aalst WMP, 2016, PROCESS MINING DATA, V2nd, DOI DOI 10.1007/978-3-662-49851-4
   Wong PYH, 2008, INT CONF QUAL SOFTW, P126, DOI 10.1109/QSIC.2008.6
   Wong PYH, 2009, ELECTRON NOTES THEOR, V229, P59, DOI 10.1016/j.entcs.2009.06.029
   Wong PYH, 2008, LECT NOTES COMPUT SC, V5256, P355, DOI 10.1007/978-3-540-88194-0_22
NR 37
TC 10
Z9 10
U1 0
U2 9
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 1
PY 2019
VL 183
AR 102303
DI 10.1016/j.scico.2019.102303
PG 16
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA JF8DA
UT WOS:000491614000003
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Vidal, S
   Oizumi, W
   Garcia, A
   Pace, AD
   Marcos, C
AF Vidal, Santiago
   Oizumi, Willian
   Garcia, Alessandro
   Diaz Pace, Andres
   Marcos, Claudia
TI Ranking architecturally critical agglomerations of code smells
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Code smells; Agglomerations; Software architecture
AB Code smells are symptoms in the source code that could help to identify architectural problems. However, developers may feel discouraged to analyze multiple smells if they are not able to focus their attention on a small set of source code locations. Unfortunately, current techniques fall short in assisting developers to prioritize smelly locations that are likely to indicate architectural problems. Furthermore, developers often have trouble analyzing interconnected smells that contribute together to realize an architectural problem. To deal with these issues, this work presents and evaluates a suite of five criteria for ranking groups of code smells as indicators of architectural problems in evolving systems. These criteria were implemented in a tool called JSpIRIT. In a first experiment, we have assessed the criteria in the context of 23 versions of 4 systems and analyzed their effectiveness for revealing architectural problem locations. In addition, we conducted a second experiment for analyzing similarities between the prioritization provided by developers and the prioritization provided by our best performing criterion. The results provide evidence that one of the proposed criteria helped to correctly prioritize more than 80 code locations of architectural problems, alleviating tedious manual inspection of the source code vis-a-vis with the architecture. (C) 2019 Elsevier B.V. All rights reserved.
C1 [Vidal, Santiago; Diaz Pace, Andres] ISISTAN CONICET, Buenos Aires, DF, Argentina.
   [Oizumi, Willian; Garcia, Alessandro] Pontificia Univ Catolica Rio de Janeiro, Rio de Janeiro, RJ, Brazil.
   [Marcos, Claudia] ISISTAN CIC, Buenos Aires, DF, Argentina.
C3 Pontificia Universidade Catolica do Rio de Janeiro
RP Vidal, S (corresponding author), ISISTAN CONICET, Buenos Aires, DF, Argentina.
EM svidal@exa.unicen.edu.ar; woizumi@inf.puc-rio.br;
   afgarcia@inf.puc-rio.br; adiaz@exa.unicen.edu.ar;
   cmarcos@exa.unicen.edu.ar
RI Oizumi, Willian Nalepa/D-2031-2017
OI Oizumi, Willian Nalepa/0000-0002-8956-5272; Vidal,
   Santiago/0000-0003-2440-3034
CR [Anonymous], J SOFT ENG RES DEV
   [Anonymous], 2014, AUTOM SOFTW ENG, DOI DOI 10.1007/S10515-014-0175-X
   Arcoverde R., 2013, 27 SBES
   Azadi U., 2019, INT C TECHN DEBT TEC
   Bass L., 2013, SOFTWARE ARCHITECTUR
   Chatzigeorgiou A, 2014, INNOV SYST SOFTW ENG, V10, P3, DOI 10.1007/s11334-013-0205-z
   Choudhary A., 2016, 1 INT WORKSH TECHN D, P76
   Le DM, 2018, 2018 IEEE 15TH INTERNATIONAL CONFERENCE ON SOFTWARE ARCHITECTURE (ICSA), P176, DOI 10.1109/ICSA.2018.00027
   Ducasse S., 2004, P 20 IEEE INT C SOFT
   Figueiredo E., 2007, P INT WORKSH ASP ARC
   Fontana FA, 2017, 2017 IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ARCHITECTURE WORKSHOPS (ICSAW), P282, DOI 10.1109/ICSAW.2017.16
   Fontana FA, 2015, 2015 IEEE 7TH INTERNATIONAL WORKSHOP ON MANAGING TECHNICAL DEBT (MTD) PROCEEDINGS, P16, DOI 10.1109/MTD.2015.7332620
   Fowler M., 2018, Refactoring: Improving the Design of Existing Code
   Garcia J, 2009, EUR CON SFTWR MTNCE, P255, DOI 10.1109/CSMR.2009.59
   Guimaraes E, 2018, SOFTWARE PRACT EXPER, V48, P1077, DOI 10.1002/spe.2563
   Guimaraes E., 2014, 2014 IEEE 38 ANN COM
   Kazman R, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 2, P179, DOI 10.1109/ICSE.2015.146
   Lanza Michele, 2006, Objectoriented metrics in practice: using software metrics to characterize, evaluate, and improve the design of object-oriented systems
   Li ZM, 2014, PROCEEDINGS OF THE 2014 9TH INTERNATIONAL CONFERENCE ON SYSTEM OF SYSTEMS ENGINEERING (SOSE 2014), P119, DOI 10.1109/SYSOSE.2014.6892474
   Mattmann C. A., 2006, P 28 INT C SOFTW ENG
   McCallum A.K., 2002, MALLET MACHINE LEARN
   Mo R, 2015, 2015 12TH WORKING IEEE/IFIP CONFERENCE ON SOFTWARE ARCHITECTURE (WICSA), P51, DOI 10.1109/WICSA.2015.12
   Moha N, 2010, IEEE T SOFTWARE ENG, V36, P20, DOI 10.1109/TSE.2009.50
   Oizumi W., 2017, P 11 BRAZ S SOFTW CO
   Oizumi W., 2014, 2014 BRAZ S SOFTW EN
   Oizumi W, 2016, PROC INT CONF SOFTW, P440, DOI 10.1145/2884781.2884868
   Perry D. E., 1992, SIGSOFT Software Engineering Notes, V17, P40, DOI 10.1145/141874.141884
   Ricci F, 2011, RECOMMENDER SYSTEMS HANDBOOK, P1, DOI 10.1007/978-0-387-85820-3_1
   Rosik J, 2008, ESEM'08: PROCEEDINGS OF THE 2008 ACM-IEEE INTERNATIONAL SYMPOSIUM ON EMPIRICAL SOFTWARE ENGINEERING AND MEASUREMENT, P80
   Sae-Lim N, 2018, IEICE T INF SYST, VE101D, P1733, DOI 10.1587/transinf.2017KBP0006
   Soares S, 2002, ACM SIGPLAN NOTICES, V37, P174, DOI 10.1145/583854.582437
   Sousa L, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P921, DOI 10.1145/3180155.3180239
   Sousa L, 2017, XXXI BRAZILIAN SYMPOSIUM ON SOFTWARE ENGINEERING (SBES 2017), P54, DOI 10.1145/3131151.3131168
   Sousa LD, 2016, 2016 IEEE/ACM 38TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING COMPANION (ICSE-C), P863, DOI 10.1145/2889160.2889273
   Terra R, 2009, SOFTWARE PRACT EXPER, V39, P1073, DOI 10.1002/spe.931
   Tufano M, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 1, P403, DOI 10.1109/ICSE.2015.59
   Nguyen TT, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P361, DOI 10.1145/1985793.1985843
   Vidal S., 2016, 10 BRAZ S SOFTW COMP
   Vidal S., 2015, 2015 34 INT C CHIL C, P1, DOI DOI 10.1109/SCCC.2015.7416572
   Vidal S. A., 2013, 1 LATIN AM SCH SOFTW
   Vidal S. A., 2014, IEEE BIENN C ARG ARG
   Vidal S, 2018, ACM T SOFTW ENG METH, V27, DOI 10.1145/3191314
   Wong S., 2011, 2011 33 INT C SOFTW
   Xiao L, 2016, PROC INT CONF SOFTW, P488, DOI 10.1145/2884781.2884822
   Young Trevor J., 2005, THESIS
NR 45
TC 17
Z9 17
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD AUG 1
PY 2019
VL 182
BP 64
EP 85
DI 10.1016/j.scico.2019.07.003
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA JA1IN
UT WOS:000487570800003
OA Bronze
DA 2024-07-18
ER

PT J
AU Yuan, QX
   Mizera, A
   Pang, J
   Qu, HY
AF Yuan, Qixia
   Mizera, Andrzej
   Pang, Jun
   Qu, Hongyang
TI A new decomposition-based method for detecting attractors in synchronous
   Boolean networks
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Synchronous Boolean networks; Attractor detection; Decomposition; Binary
   decision diagram (BDD)
ID COMPLEXITY; ALGORITHM; MODEL
AB Boolean networks are a well-established formalism for modelling biological systems. An important aspect of analysing a Boolean network is to identify all its attractors. This becomes challenging for large Boolean networks due to the infamous state-space explosion problem. In this paper, we propose a new strongly connected component (SCC) based decomposition method for attractor detection in large synchronous Boolean networks and prove its correctness. Experimental results show that our proposed method is significantly better in terms of performance when compared to existing methods in the literature. (C) 2019 Elsevier B.V. All rights reserved.
C1 [Yuan, Qixia; Pang, Jun] Univ Luxembourg, Fac Sci Technol & Commun, Luxembourg, Luxembourg.
   [Mizera, Andrzej] Polish Acad Sci, Inst Comp Sci, Warsaw, Poland.
   [Pang, Jun] Univ Luxembourg, Interdisciplinary Ctr Secur Reliabil & Trust, Luxembourg, Luxembourg.
   [Qu, Hongyang] Univ Sheffield, Dept Automat Control & Syst Engn, Sheffield, S Yorkshire, England.
C3 University of Luxembourg; Polish Academy of Sciences; Institute of
   Computer Science of the Polish Academy of Sciences; University of
   Luxembourg; University of Sheffield
RP Pang, J (corresponding author), Univ Luxembourg, Fac Sci Technol & Commun, Luxembourg, Luxembourg.; Pang, J (corresponding author), Univ Luxembourg, Interdisciplinary Ctr Secur Reliabil & Trust, Luxembourg, Luxembourg.
EM qixia.yuan@uni.lu; andrzej.mizera@gmail.com; jun.pang@uni.lu;
   h.qu@sheffield.ac.uk
OI Pang, Jun/0000-0002-4521-4112
FU National Research Fund, Luxembourg [7814267]; research project SEC-PBN -
   University of Luxembourg; ANR-FNR project AlgoReCell
   [INTER/ANR/15/11191283]
FX Qixia Yuan is supported by the National Research Fund, Luxembourg (grant
   reference 7814267). This work is also partially supported by the
   research project SEC-PBN (funded by the University of Luxembourg) and
   the ANR-FNR project AlgoReCell (INTER/ANR/15/11191283).
CR AKERS SB, 1978, IEEE T COMPUT, V27, P509, DOI 10.1109/TC.1978.1675141
   Bollig B, 1996, IEEE T COMPUT, V45, P993, DOI 10.1109/12.537122
   Cohen DPA, 2015, PLOS COMPUT BIOL, V11, DOI 10.1371/journal.pcbi.1004571
   Davidich MI, 2008, PLOS ONE, V3, DOI 10.1371/journal.pone.0001672
   Dhillon AS, 2007, ONCOGENE, V26, P3279, DOI 10.1038/sj.onc.1210421
   Dong Z, 2018, NUCL ENG TECHNOL, V50, P599, DOI 10.1016/j.net.2018.03.015
   Dorssel B., 2005, PHYS REV LETT, V72
   Dubrova E, 2011, IEEE ACM T COMPUT BI, V8, P1393, DOI 10.1109/TCBB.2010.20
   Garg A, 2008, BIOINFORMATICS, V24, P1917, DOI 10.1093/bioinformatics/btn336
   Garg A, 2007, LECT NOTES COMPUT SC, V4453, P62
   Grieco L, 2013, PLOS COMPUT BIOL, V9, DOI 10.1371/journal.pcbi.1003286
   Guo WS, 2014, PLOS ONE, V9, DOI 10.1371/journal.pone.0094258
   Huang S, 2001, PHARMACOGENOMICS, V2, P203, DOI 10.1517/14622416.2.3.203
   Irons DJ, 2006, PHYSICA D, V217, P7, DOI 10.1016/j.physd.2006.03.006
   KAUFFMAN S, 1969, NATURE, V224, P177, DOI 10.1038/224177a0
   KAUFFMAN SA, 1969, J THEOR BIOL, V22, P437, DOI 10.1016/0022-5193(69)90015-0
   Krishna M, 2008, CELL MOL LIFE SCI, V65, P3525, DOI 10.1007/s00018-008-8170-7
   Le Coënt A, 2016, LECT NOTES COMPUT SC, V9899, P134, DOI 10.1007/978-3-319-45994-3_10
   LEE CY, 1959, BELL SYST TECH J, V38, P985, DOI 10.1002/j.1538-7305.1959.tb01585.x
   Lomuscio A, 2017, INT J SOFTW TOOLS TE, V19, P9, DOI 10.1007/s10009-015-0378-x
   Mizera Andrzej, 2017, Dependable Software Engineering. Theories, Tools, and Applications. Third International Symposium, SETTA 2017. Proceedings: LNCS 10606, P232, DOI 10.1007/978-3-319-69483-2_14
   Mizera A, 2019, IEEE ACM T COMPUT BI, V16, P31, DOI 10.1109/TCBB.2018.2850901
   Mizera A, 2018, IEEE ACM T COMPUT BI, V15, P1203, DOI 10.1109/TCBB.2017.2773477
   Mizera A, 2016, LECT NOTES COMPUT SC, V9859, P309, DOI 10.1007/978-3-319-45177-0_19
   Naldi A, 2010, PLOS COMPUT BIOL, V6, DOI 10.1371/journal.pcbi.1000912
   Tran QN, 2011, ADV EXP MED BIOL, V696, P113, DOI 10.1007/978-1-4419-7046-6_12
   Roli A, 2015, LECT NOTES ARTIF INT, V9336, P45, DOI 10.1007/978-3-319-24309-2_4
   Samuelsson B, 2003, PHYS REV LETT, V90, DOI 10.1103/PhysRevLett.90.098701
   Schlatter R, 2009, PLOS COMPUT BIOL, V5, DOI 10.1371/journal.pcbi.1000595
   Shmulevich I., 2010, Probabilistic Boolean Networks: The Modeling and Control of Gene Regulatory Networks
   Singh A, 2012, BIOINFORMATICS, V28, pI495, DOI 10.1093/bioinformatics/bts410
   Somogyi R, 2001, DRUG DISCOV TODAY, V6, P1267, DOI 10.1016/S1359-6446(01)02096-7
   Yuan QX, 2016, SCI CHINA INFORM SCI, V59, DOI 10.1007/s11432-016-5594-9
   Zhang RR, 2008, P NATL ACAD SCI USA, V105, P16308, DOI 10.1073/pnas.0806447105
   Zhao Y, 2013, IEEE T AUTOMAT CONTR, V58, P1976, DOI 10.1109/TAC.2013.2251819
NR 35
TC 9
Z9 9
U1 1
U2 10
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUL 1
PY 2019
VL 180
BP 18
EP 35
DI 10.1016/j.scico.2019.05.001
PG 18
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA IR8XM
UT WOS:000481724800003
OA hybrid
DA 2024-07-18
ER

PT J
AU Fernandes, JP
   Martins, P
   Pardo, A
   Saraiva, J
   Viera, M
AF Fernandes, Joao Paulo
   Martins, Pedro
   Pardo, Alberto
   Saraiva, Joao
   Viera, Marcos
TI Memoized zipper-based attribute grammars and their higher order
   extension
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 20th Brazilian Symposium on Programing Languages (SBLP)
CY SEP 22-23, 2016
CL Maringa, BRAZIL
DE Embedded domain specific languages; Zipper data structure; Memoization;
   Attribute grammars; Functional programming
AB Attribute grammars are a powerfull, well-known formalism to implement and reason about programs which, by design, are conveniently modular. In this work we focus on a state of the art zipper-based embedding of classic attribute grammars and higher-order attribute grammars. We improve their execution performance through controlling attribute (re)evaluation by means of memoization techniques. We present the results of our optimizations by comparing their impact in various implementations of different, well-studied, attribute grammars and their Higher-Order extensions. (C) 2018 Elsevier B.V. All rights reserved.
C1 [Fernandes, Joao Paulo] CISUC, Coimbra, Portugal.
   [Fernandes, Joao Paulo] Univ Coimbra, Coimbra, Portugal.
   [Martins, Pedro] Univ Calif Irvine, Irvine, CA 92717 USA.
   [Pardo, Alberto; Viera, Marcos] Univ Republica, Montevideo, Uruguay.
   [Saraiva, Joao] HASLab INESC TEC, Braga, Portugal.
   [Saraiva, Joao] Univ Minho, Braga, Portugal.
C3 Universidade de Coimbra; Universidade de Coimbra; University of
   California System; University of California Irvine; Universidad de la
   Republica, Uruguay; Universidade do Minho; INESC TEC; Universidade do
   Minho
RP Fernandes, JP (corresponding author), CISUC, Coimbra, Portugal.; Fernandes, JP (corresponding author), Univ Coimbra, Coimbra, Portugal.; Martins, P (corresponding author), Univ Calif Irvine, Irvine, CA 92717 USA.; Pardo, A; Viera, M (corresponding author), Univ Republica, Montevideo, Uruguay.; Saraiva, J (corresponding author), HASLab INESC TEC, Braga, Portugal.; Saraiva, J (corresponding author), Univ Minho, Braga, Portugal.
EM jpf@dei.uc.pt; pribeiro@uci.edu; pardo@fing.edu.uy;
   saraiva@di.uminho.pt; mviera@fing.edu.uy
RI Saraiva, João/L-6113-2015; Martins, Pedro/GWC-7702-2022; Fernandes,
   João/IUN-2117-2023; Fernandes, Joao Paulo/A-1929-2013
OI Saraiva, João/0000-0002-5686-7151; Fernandes, Joao
   Paulo/0000-0002-1952-9460
CR Badouel E, 2013, THEOR COMPUT SCI, V480, P1, DOI 10.1016/j.tcs.2013.02.007
   Badouel E, 2011, ELECTRON NOTES THEOR, V229, P39, DOI 10.1016/j.entcs.2011.02.015
   Badouel  Eric, 2007, RR6315 INRIA
   Balestrieri  Florent, 2015, THESIS
   BIRD RS, 1984, ACTA INFORM, V21, P239, DOI 10.1007/BF00264249
   Bransen J, 2015, PROCEEDINGS OF THE 2015 ACM SIGPLAN WORKSHOP ON PARTIAL EVALUATION AND PROGRAM MANIPULATION (PEPM'15), P39, DOI 10.1145/2678015.2682541
   Bransen J, 2017, SCI COMPUT PROGRAM, V137, P98, DOI 10.1016/j.scico.2016.06.001
   de Moor  Oege, 2000, 3 WORKSH ATTR GRAMM, P1
   Dijkstra A, 2009, HASKELL'09: PROCEEDINGS OF THE 2009 ACM SIGPLAN HASKELL SYMPOSIUM, P93
   Dijkstra  Atze, 2004, UUCS2004037 I INF CO
   Ekman T, 2007, ACM SIGPLAN NOTICES, V42, P1, DOI 10.1145/1297105.1297029
   Fernandes J.P., 2007, P 2007 ACM SIGPLAN S, P102
   Fernandes JP, 2016, LECT NOTES COMPUT SC, V9889, P46, DOI 10.1007/978-3-319-45279-1_4
   Henk  Alblas, 1991, LNCS, V545, P48
   Huet G., 1997, Journal of Functional Programming, V7, P549, DOI 10.1017/S0956796897002864
   HUGHES J, 1985, LECT NOTES COMPUT SC, V201, P129
   JOHNSSON T, 1987, LECT NOTES COMPUT SC, V274, P154
   JOURDAN M, 1984, LECT NOTES COMPUT SC, V167, P167
   JOURDAN M, 1984, SIGPLAN NOTICES, V19, P81, DOI 10.1145/502949.502882
   KASTENS U, 1991, LECT NOTES COMPUT SC, V545, P114
   Kastens U, 1998, LECT NOTES COMPUT SC, V1383, P294, DOI 10.1007/BFb0026439
   Kiselyov Oleg, 2004, HASKELL 04, P96, DOI DOI 10.1145/1017472.1017488
   Knuth D.E., 1968, Mathematical Systems Theory, V2
   Knuth  Donald, 1971, MATH SYST THEORY, V5
   Kuiper M, 1998, LECT NOTES COMPUT SC, V1383, P298
   Kuiper M., 1987, COMPUTING SCI NETHER
   Martins P, 2016, SCI COMPUT PROGRAM, V132, P2, DOI 10.1016/j.scico.2016.03.005
   Martins P, 2013, LECT NOTES COMPUT SC, V8129, P135, DOI 10.1007/978-3-642-40922-6_10
   Middelkoop A., 2010, P 9 INT C GENERATIVE, P43
   Norell  Ulf, 2015, P 14 ACM SIGPLAN WOR, P1
   PENNINGS M, 1992, LECT NOTES COMPUT SC, V631, P130, DOI 10.1007/3-540-55844-6_132
   REPS T, 1984, SIGPLAN NOTICES, V19, P42, DOI 10.1145/390011.808247
   Saraiva J, 2003, LECT NOTES COMPUT SC, V2830, P307
   Saraiva J, 2002, LECT NOTES COMPUT SC, V2487, P268
   Saraiva J, 1999, LECT NOTES COMPUT SC, V1575, P1
   Saraiva J, 2000, LECT NOTES COMPUT SC, V1781, P279
   Sloane AM, 2010, ELECTRON NOTES THEOR, V253, P205, DOI 10.1016/j.entcs.2010.08.043
   Söderberg E, 2011, LECT NOTES COMPUT SC, V6563, P2, DOI 10.1007/978-3-642-19440-5_2
   Swierstra Doaitse., 1991, International Summer School on Attribute Grammars, Applications and Systems, volume 545 of LNCS, V545, P48
   Swierstra SD, 1999, LECT NOTES COMPUT SC, V1608, P150
   ThomasW Reps, 1982, S PRINCIPLES PROGRAM, P169, DOI [10.1145/582153.582172, DOI 10.1145/582153.582172]
   Usberco J., 1999, QUIMICA
   Uustalu T., 2005, TRENDS FUNCTIONAL PR, P145
   Van Wyk E, 2008, ELECTRON NOTES THEOR, V203, P103, DOI 10.1016/j.entcs.2008.03.047
   Viera M, 2009, ICFP'09: PROCEEDINGS OF THE 2009 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P245
   VOGT HH, 1989, SIGPLAN NOTICES, V24, P131, DOI 10.1145/74818.74830
   Yakushev AR, 2009, ICFP'09: PROCEEDINGS OF THE 2009 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P233
NR 47
TC 3
Z9 4
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR 15
PY 2019
VL 173
BP 71
EP 94
DI 10.1016/j.scico.2018.10.006
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA HO3WK
UT WOS:000460853500006
OA Green Published, hybrid
DA 2024-07-18
ER

PT J
AU Imai, K
   Yoshida, N
   Yuen, S
AF Imai, Keigo
   Yoshida, Nobuko
   Yuen, Shoji
TI Session-ocaml: A session-based library with polarities and lenses
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Session types; Functional programming; Parametric polymorphism; Lenses;
   OCaml
ID LANGUAGE PRIMITIVES; IMPLEMENTATION; DISCIPLINE
AB We propose session-ocaml, a novel library for session-typed concurrent/distributed programming in OCaml. Our technique solely relies on parametric polymorphism, which can encode core session type structures with strong static guarantees. Our key ideas are: (1) polarised session types, which give an alternative formulation of duality enabling OCaml to automatically infer an appropriate session type in a session with a reasonable notational overhead; and (2) a parameterised monad with a data structure called 'slots' manipulated with lenses, which can statically enforce session linearity including delegations. We introduce a notational extension to enhance the session linearity for integrating the session types into the functional programming style. We show applications of session-ocaml to a travel agency use case and an SMTP protocol implementation. Furthermore, we evaluate the performance of session-ocaml on a number of benchmarks. (C) 2018 The Authors. Published by Elsevier B.V.
C1 [Imai, Keigo] Gifu Univ, Gifu, Japan.
   [Yoshida, Nobuko] Imperial Coll London, London, England.
   [Yuen, Shoji] Nagoya Univ, Nagoya, Aichi, Japan.
C3 Gifu University; Imperial College London; Nagoya University
RP Imai, K (corresponding author), Gifu Univ, Gifu, Japan.
EM keigoi@gifu-u.ac.jp
RI Yoshida, Nobuko/AAL-6082-2020; Imai, Keigo/I-3970-2014
OI Yoshida, Nobuko/0000-0002-3925-8557; Imai, Keigo/0000-0003-1602-8473
FU EPSRC [EP/K034413/1, EP/K011715/1, EP/L00058X/1, EP/N027833/1,
   EP/N028201/1]; EU [612985]; COST Action [IC1405]; JSPS International
   Fellowships [S15051]; KAKENHI from JSPS, Japan [JP17K12662, JP25280023,
   JP17H01722]; EPSRC [EP/L00058X/1, EP/K034413/1, EP/K011715/1,
   EP/N027833/1, EP/N028201/1] Funding Source: UKRI
FX We thank the anonymous reviewers for the thorough review and
   constructive comments. We thank Raymond Hu for his comments on the early
   version of the paper. We thank Jun Furuse for his advice on using his
   ppx_implicits. The third author thanks the JSPS bilateral research with
   NFSC for fruitful discussion. This work is partially supported by EPSRC
   projects EP/K034413/1, EP/K011715/1, EP/L00058X/1, EP/N027833/1 and
   EP/N028201/1; by EU FP7 612985 (UPSCALE), and COST Action IC1405 (RC);
   by JSPS International Fellowships (S15051), and KAKENHI JP17K12662,
   JP25280023 and JP17H01722 from JSPS, Japan.
CR [Anonymous], 1999, Communicating and Mobile Systems: The Calculus
   Atkey R, 2009, J FUNCT PROGRAM, V19, P335, DOI 10.1017/S095679680900728X
   Charalambides M, 2016, SCI COMPUT PROGRAM, V115, P100, DOI 10.1016/j.scico.2015.10.006
   Dardha Ornela, 2012, PROC PPDP 2012, P139, DOI DOI 10.1145/2370776.2370794
   Foster JN, 2005, ACM SIGPLAN NOTICES, V40, P233, DOI 10.1145/1047659.1040325
   Furuse  J., 2015, OCAML 2015
   Garrigue  J., 2011, ACM SIGPLAN WORKSH M
   Garrigue  J., 2006, SAFEIO MAILING LIST
   Gay S, 2005, ACTA INFORM, V42, P191, DOI 10.1007/s00236-005-0177-z
   Gay SJ, 2010, J FUNCT PROGRAM, V20, P19, DOI 10.1017/S0956796809990268
   Honda K, 1998, LECT NOTES COMPUT SC, V1381, P122, DOI 10.1007/BFb0053567
   Honda K, 2016, J ACM, V63, DOI 10.1145/2827695
   Hu R, 2008, LECT NOTES COMPUT SC, V5142, P516, DOI 10.1007/978-3-540-70592-5_22
   Hu R, 2017, LECT NOTES COMPUT SC, V10202, P116, DOI 10.1007/978-3-662-54494-5_7
   Hu R, 2016, LECT NOTES COMPUT SC, V9633, P401, DOI 10.1007/978-3-662-49665-7_24
   Imai K, 2011, ELECTRON P THEOR COM, P74, DOI 10.4204/EPTCS.69.6
   Imai K, 2017, LECT NOTES COMPUT SC, V10319, P99, DOI 10.1007/978-3-319-59746-1_6
   Jane Street Developers, 2016, CORE LIB DOCUMENTATI
   Jespersen Thomas Bracht Laumann, 2015, P 11 ACM SIGPLAN WOR, P13, DOI DOI 10.1145/2808098.2808100
   Jones MP, 2000, LECT NOTES COMPUT SC, V1782, P230
   Kobayashi N, 2003, LECT NOTES COMPUT SC, V2757, P439
   Lindley S, 2016, ACM SIGPLAN NOTICES, V51, P133, DOI [10.1145/2976002.2976018, 10.1145/3241625.2976018]
   Melgratti H, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110279
   Minsky Y, 2011, COMMUN ACM, V54, P53, DOI [10.1145/2018396.2018413, 10.1145/2030256.2038036]
   Neubauer M, 2004, LECT NOTES COMPUT SC, V3057, P56
   Ng N, 2015, LECT NOTES COMPUT SC, V9031, P212, DOI 10.1007/978-3-662-46663-6_11
   Odersky  M., 2006, IFIP WG2 8 WORK GROU
   Orchard D, 2017, RIV PUBL SER AUTOMAT, P219
   Orchard D, 2016, ACM SIGPLAN NOTICES, V51, P568, DOI 10.1145/2914770.2837634
   Padovani L, 2017, LECT NOTES COMPUT SC, V10201, P804, DOI 10.1007/978-3-662-54434-1_30
   Padovani L, 2017, J FUNCT PROGRAM, V27, P1, DOI 10.1017/S0956796816000289
   Pickering  M., 2017, ART SCI ENG PROGRAM, V1, DOI [10.22152/programming-journal.org/2017/1/7, DOI 10.22152/PROGRAMMING-JOURNALORG/2017/1/7]
   Pierce  B.C., 2002, TYPES PROGRAMMING LA, P267
   Polakow J, 2015, ACM SIGPLAN NOTICES, V50, P177, DOI 10.1145/2804302.2804309
   PUCELLA R, 2008, HASK P ACM SIGPL, P25
   Scalas Alceste, 2016, Schloss Dagstuhl-Leibniz-Zentrum fur Informatik, DOI [DOI 10.4230/LIPICS, DOI 10.4230/LIPICS.ECOOP.2016.21]
   Sculthorpe N, 2013, ACM SIGPLAN NOTICES, V48, P287, DOI 10.1145/2544174.2500602
   Simon Peyton Jones  M.J., 1997, P 2 HASK WORKSH
   Thiemann P, 2016, ACM SIGPLAN NOTICES, V51, P462, DOI 10.1145/3022670.2951926
   Vouillon J, 2008, ML'08: PROCEEDINGS OF THE 2008 ACM SIGPLAN WORKSHOP ON ML, P3
   Wadler P, 2012, ACM SIGPLAN NOTICES, V47, P273, DOI 10.1145/2398856.2364568
   White L, 2015, ELECTRON P THEOR COM, P22, DOI 10.4204/EPTCS.198.2
   Yoshida N, 2007, ELECTRON NOTES THEOR, V171, P73, DOI 10.1016/j.entcs.2007.02.056
NR 43
TC 10
Z9 12
U1 1
U2 9
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR 1
PY 2019
VL 172
BP 135
EP 159
DI 10.1016/j.scico.2018.08.005
PG 25
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA HK8HC
UT WOS:000458229000007
OA Green Submitted, hybrid
DA 2024-07-18
ER

PT J
AU Hélouët, L
   Kecir, K
AF Helouet, Loic
   Kecir, Karim
TI Realizability of schedules by stochastic time Petri nets with blocking
   semantics
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Petri nets; Unfolding; Scheduling; Realizability
ID MODEL CHECKING; SYSTEMS; VERIFICATION; DIAGNOSIS
AB This paper considers realizability of expected schedules by production systems with concurrent tasks, bounded resources that have to be shared among tasks, and random behaviors and durations. Schedules are high level views of desired executions of systems represented as partial orders decorated with timing constraints. Production systems (production cells, train networks...) are modeled as stochastic time Petri nets STPNs with an elementary (1-bounded) semantics. We detail their interleaved operational semantics, and then propose a non-interleaved semantics through the notion of time processes. We then consider boolean realizability: a schedule S is realizable by a net N if S embeds in a time process of N that satisfies all its constraints. However, with continuous time domains, the probability of a time process with exact dates is null. We hence consider probabilistic realizability up to alpha time units, that holds if the probability that N realizes S with constraints enlarged by a is strictly positive. Upon a sensible restriction guaranteeing time progress, boolean and probabilistic realizability of a schedule can be checked on the finite set of symbolic prefixes extracted from a bounded unfolding of the net. We give a construction technique for these prefixes and show that they represent all time processes of a net occurring up to a given maximal date. We then show how to verify existence of an embedding and compute the probability of its realization. (C) 2017 Elsevier B.V. All rights reserved.
C1 [Helouet, Loic; Kecir, Karim] INRIA Rennes, Rennes, France.
   [Kecir, Karim] INRIA Alstom, Alstom, France.
C3 Universite de Rennes
RP Hélouët, L (corresponding author), INRIA Rennes, Rennes, France.
EM loic.helouet@inria.fr; karim.kecir@alstom.com
OI Kecir, Karim/0000-0002-8200-2645
CR Aghasaryan A, 1998, DISCRETE EVENT DYN S, V8, P203, DOI 10.1023/A:1008241818642
   Akshay S, 2016, LECT NOTES COMPUT SC, V9698, P301, DOI 10.1007/978-3-319-39086-4_18
   [Anonymous], SIMULATION MONTE CAR
   Aspvall B., 1979, 20th Annual Symposium of Foundations of Computer Science, P205, DOI 10.1109/SFCS.1979.1
   Aura T, 1997, LECT NOTES COMPUT SC, V1248, P136
   Bartholdi JJ, 2012, TRANSPORT RES B-METH, V46, P481, DOI 10.1016/j.trb.2011.11.001
   BERTHOMIEU B, 1991, IEEE T SOFTWARE ENG, V17, P259, DOI 10.1109/32.75415
   Cacchiani V, 2012, EUR J OPER RES, V219, P727, DOI 10.1016/j.ejor.2011.11.003
   Caimi G, 2011, NETWORKS, V57, P3, DOI 10.1002/net.20379
   Carey M, 1999, TRANSPORT RES B-METH, V33, P473, DOI 10.1016/S0191-2615(99)00002-8
   Cecil J. A., 1992, International Journal of Advanced Manufacturing Technology, V7, P168, DOI 10.1007/BF02601620
   Chatain T, 2005, LECT NOTES COMPUT SC, V3829, P196
   Chatain T, 2004, LECT NOTES COMPUT SC, V3235, P326
   Chatain T, 2006, LECT NOTES COMPUT SC, V4024, P125
   Cicerone S, 2008, LECT NOTES COMPUT SC, V5165, P458
   Cortadella J, 1995, 1995 IEEE/ACM INTERNATIONAL CONFERENCE ON COMPUTER-AIDED DESIGN, P164, DOI 10.1109/ICCAD.1995.480008
   D'Ariano A, 2007, IEEE T INTELL TRANSP, V8, P208, DOI 10.1109/TITS.2006.888605
   Dousson C, 2002, FRONT ARTIF INTEL AP, V77, P257
   Doyen L, 2009, LECT NOTES COMPUT SC, V5813, P133, DOI 10.1007/978-3-642-04368-0_12
   Esparza J, 2002, FORM METHOD SYST DES, V20, P285, DOI 10.1023/A:1014746130920
   Hansen IA, 2010, INT J CIV ENG, V8, P19
   Hielscher W., 1998, WORKSH TUT PRACT US, P8
   Horváth A, 2012, PERFORM EVALUATION, V69, P315, DOI 10.1016/j.peva.2011.11.002
   Kettner M., 2003, INTEGRATING MICROSCO
   Koustopoulos H.N., 2009, TRANSPORT SIMULATION, P153
   Krichen M, 2009, FORM METHOD SYST DES, V34, P238, DOI 10.1007/s10703-009-0065-1
   Lime D, 2006, DISCRETE EVENT DYN S, V16, P179, DOI 10.1007/s10626-006-8133-9
   MCMILLAN KL, 1995, FORM METHOD SYST DES, V6, P45, DOI 10.1007/BF01384314
   Merlin P. M., 1974, A study of the recoverability of computing systems
   Nash A, 2004, ADV TRANSPORT, V15, P45
   Paolieri M, 2016, IEEE T SOFTWARE ENG, V42, P153, DOI 10.1109/TSE.2015.2468717
   Razouk R.R., 1985, PROTOCOL TESTING SPE, P561
   Semenov A, 1996, DES AUT CON, P59, DOI 10.1109/DAC.1996.545546
   Vicario E., 2010, ORIS TOOL ANAL TIMED
   Wang PL, 2016, IEEE T INTELL TRANSP, V17, P726, DOI 10.1109/TITS.2015.2481091
NR 35
TC 4
Z9 4
U1 0
U2 10
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 1
PY 2018
VL 157
SI SI
BP 71
EP 102
DI 10.1016/j.scico.2017.12.004
PG 32
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GB9KE
UT WOS:000429391900006
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Brau, G
   Hugues, J
   Navet, N
AF Brau, Guillaume
   Hugues, Jerome
   Navet, Nicolas
TI Towards the systematic analysis of non-functional properties in
   Model-Based Engineering for real-time embedded systems
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Model-Based Systems Engineering; Non-functional properties; Analysis
   contracts; Real-time scheduling; Architecture Description Languages
ID SCHEDULING THEORY; PROGRAMMING LANGUAGE; DESIGN; SEMANTICS
AB The real-time scheduling theory provides analytical methods to assess the temporal predictability of embedded systems. Nevertheless, their use is limited in a Model-Based Systems Engineering approach. In fact, the large number of applicability conditions makes the use of real-time scheduling analysis tedious and error-prone. Key issues are left to the engineers: when to apply a real-time scheduling analysis? What to do with the analysis results? This article presents an approach to systematize and then automate the analysis of non-functional properties in Model-Based Systems Engineering. First, preconditions and postcondltions define the applicability of an analysis. In addition, contracts specify the analysis interfaces, thereby enabling to reason about the analysis process. We present a proof-of-concept implementation of our approach using a combination of constraint languages (REAL for run-time analysis) and specification languages (Alloy for describing interfaces and reasoning about them). This approach is experimented on architectural models written with the Architecture Analysis and Design Language (AADL). (C) 2018 Elsevier B.V. All rights reserved.
C1 [Brau, Guillaume; Navet, Nicolas] Univ Luxembourg, CSC Res Unit, 6 Rue R Coudenhove Kalergi, L-1359 Luxembourg, Luxembourg.
   [Brau, Guillaume; Hugues, Jerome] Univ Fed Toulouse Midi Pyrenees, ISAE SUPAERO, 10 Ave E Belin, F-31055 Toulouse, France.
C3 University of Luxembourg; Universite de Toulouse; Institut Superieur de
   l'Aeronautique et de l'Espace (ISAE-SUPAERO)
RP Brau, G (corresponding author), Univ Luxembourg, CSC Res Unit, 6 Rue R Coudenhove Kalergi, L-1359 Luxembourg, Luxembourg.; Brau, G (corresponding author), Univ Fed Toulouse Midi Pyrenees, ISAE SUPAERO, 10 Ave E Belin, F-31055 Toulouse, France.
EM guillaume.brau@isae-supaero.fr; jerome.hugues@isae-supaero.fr;
   nicolas.navet@uni.lu
RI Hugues, Jerome/X-3274-2019
OI Hugues, Jerome/0000-0003-0148-7175
CR [Anonymous], 2006, MAV 2006 2 US EUR CO
   AUDSLEY N, 1993, SOFTWARE ENG J, V8, P284, DOI 10.1049/sej.1993.0034
   BENVENISTE A, 1991, SCI COMPUT PROGRAM, V16, P103, DOI 10.1016/0167-6423(91)90001-E
   Benveniste A, 2008, LECT NOTES COMPUT SC, V5382, P200, DOI 10.1007/978-3-540-92188-2_9
   BERRY G, 1992, SCI COMPUT PROGRAM, V19, P87, DOI 10.1016/0167-6423(92)90005-V
   Berry G, 2007, NEXT GENERATION DESIGN AND VERIFICATION METHODOLOGIES FOR DISTRIBUTED EMBEDDED CONTROL SYSTEMS, P19, DOI 10.1007/978-1-4020-6254-4_2
   BERTHOMIEU B, 2009, 14 INT C REL SOFTW, V5570, P207
   Bodeveix JP, 2015, SCI COMPUT PROGRAM, V106, P30, DOI 10.1016/j.scico.2015.03.003
   Brau G., 2015, 18 INT S OBJ COMP SE
   Brau G., 2017, THESIS
   Clements P.C., 1996, P 8 INT WORKSH SOFTW
   Cuenot P, 2010, LECT NOTES COMPUT SC, V6100, P297, DOI 10.1007/978-3-642-16277-0_11
   Davis RI, 2011, ACM COMPUT SURV, V43, DOI 10.1145/1978802.1978814
   Dissaux P., 2008, 4 EUR C EMB REAL TIM, P21
   Estefan J.A., 2007, TECH REP
   Feiler PH., 2012, Model-based engineering with AADL: An introduction to the SAE architecture analysis design language
   Forget J, 2009, THESIS
   Garavel H, 2011, LECT NOTES COMPUT SC, V6605, P372, DOI 10.1007/978-3-642-19835-9_33
   Gaudel V., 2013, INT S RAP SYST PROT
   Gaudel V, 2011, SIGADA 2011: PROCEEDINGS OF THE 2011 ACM INTERNATIONAL CONFERENCE ON ADA AND RELATED TECHNOLOGIES, P61, DOI 10.1145/2070336.2070359
   Gilles O., 2010, 5 UML AADL WORKSH UM
   HALBWACHS N, 1991, P IEEE, V79, P1305, DOI 10.1109/5.97300
   Harbour MG, 2001, EUROMICRO, P125, DOI 10.1109/EMRTS.2001.934015
   Heinecke H., 2004, P 2004 INT C TRANSP, P325
   HOARE CAR, 1969, COMMUN ACM, V12, P576, DOI 10.1145/363235.363259
   Hugues J, 2014, INT SYMP OBJECT COMP, P214, DOI 10.1109/ISORC.2014.60
   Hugues J, 2008, ACM T EMBED COMPUT S, V7, DOI 10.1145/1376804.1376810
   Jackson D, 2012, SOFTWARE ABSTRACTIONS: LOGIC, LANGUAGE, AND ANALYSIS, P1
   Jahier E., 2007, P 7 ACM IEEE INT C E, P134
   Johnsen A., 2012, 2012 IEEE 14th International Symposium on High-Assurance Systems Engineering (HASE 2012), P130, DOI 10.1109/HASE.2012.22
   Jouault F., 2005, WORKSH MOD TRANSF PR
   Kaufmann M., 2008, SYSMOD THE SYSTEMS M, P83
   Larsen K. G., 1997, International Journal on Software Tools for Technology Transfer, V1, P134, DOI 10.1007/s100090050010
   Le Guernic P, 2003, J CIRCUIT SYST COMP, V12, P261, DOI 10.1142/S0218126603000763
   Lehoczky J. P., 1987, Proceedings of the Real-Time Systems Symposium (Cat. No.87CH2475-2), P261
   LIU CL, 1973, J ACM, V20, P46, DOI 10.1145/321738.321743
   Ma Y, 2013, DES AUT TEST EUROPE, P1173
   MEYER B, 1992, COMPUTER, V25, P40, DOI 10.1109/2.161279
   Migge J., 1999, THESIS
   Mkaouar Hana, 2015, Reliable Software Technologies - Ada-Europe 2015. 20th Ada-Europe International Conference on Reliable Software Technologies. Proceedings: LNCS 9111, P146, DOI 10.1007/978-3-319-19584-1_10
   Nam M.-Y., 2013, ACM T EMBED COMPUT S, V11
   Navet N., 2016, P 8 EUR C EMB REAL T
   Nemer Fadia, 2006, 6 INT WORKSH WORST C
   Ölveczky PC, 2010, LECT NOTES COMPUT SC, V6117, P47, DOI 10.1007/978-3-642-13464-7_5
   OMG, 2015, MET OBJ FAC MOF COR
   Ouhammou Y., 2012, 20 INT C REAL TIM NE, P21
   Plantec A, 2010, LECT NOTES COMPUT SC, V6415, P4, DOI 10.1007/978-3-642-16558-0_3
   Renault X, 2009, P IEEE RAP SYST PROT, P26, DOI 10.1109/RSP.2009.30
   Ruchkin I., 2014, 5 AN VIRT INT CYB PH
   Ruchkin I., 2014, 14 INT C EMB SOFTW E
   SAE International, 2009, AS5506A AADL
   Selic B., 2013, Modeling and analysis of real-time and embedded systems with UML and MARTE: Developing cyber-physical systems
   Sha L, 2004, REAL-TIME SYST, V28, P101, DOI 10.1023/B:TIME.0000045315.61234.1e
   SHA L, 1990, IEEE T COMPUT, V39, P1175, DOI 10.1109/12.57058
   Singhoff F., 2004, Ada Letters, V24, P1
   Software Engineering Institute, 2016, OSATE2 OP SOURC TOOL
   Sokolsky O., 2006, 20 INT PAR DISTR PRO
   Sokolsky O., 2008, MSCIS0825 U PENNSVLV
   Sprunt B., 1989, Real-Time Systems, V1, P27, DOI 10.1007/BF02341920
   Steinberg D., 2008, EMF: Eclipse Modeling Framework, Vsecond
   Warmer J., 2003, OBJECT CONSTRAINT LA, Vsecond
   Xu B., 2015, 5 INT C ED MAN INF M
   Yang ZB, 2011, 2011 16TH IEEE INTERNATIONAL CONFERENCE ON ENGINEERING OF COMPLEX COMPUTER SYSTEMS (ICECCS), P344, DOI 10.1109/ICECCS.2011.41
NR 63
TC 10
Z9 11
U1 0
U2 5
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAY 1
PY 2018
VL 156
BP 1
EP 20
DI 10.1016/j.scico.2017.12.007
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GA7AE
UT WOS:000428486100001
OA Green Submitted, Green Accepted
DA 2024-07-18
ER

PT J
AU Boudaa, B
   Hammoudi, S
   Mebarki, LA
   Bouguessa, A
   Chikh, MA
AF Boudaa, Boudjemaa
   Hammoudi, Slimane
   Mebarki, Leila Amel
   Bouguessa, Abdelkader
   Chikh, Mohammed Amine
TI An aspect-oriented model-driven approach for building adaptable
   context-aware service-based applications
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Context-aware service-based application; ContextAspect; Model-driven
   methodology; Aspect weaving; Dynamic adaptation
ID ARCHITECTURE
AB Context: Context-aware service-based applications development has been considered among the most studied research fields in the last decade. The objective was to accompany the rapid technology evolution of mobile computing devices by providing customized services able to interact with different contextual situations of a pervasive environment. For this purpose, many research works have advocated Model-Driven Development (MDD) for building context-aware service-based applications. However, the proposed approaches have presented specific methodologies without using development standards, which may be followed by developers. In addition, most of them have ignored the dynamic adaptation aspect at runtime that should characterize such kind of applications and no adaptation strategy was considered in their proposals.
   Objective: The current paper aims to propose a generic model-driven approach for context aware service-based applications engineering with a software development methodology including a reconfiguration loop to achieve the dynamic adaptation of these applications.
   Method: This approach focuses on the combination of MDD and Aspect Oriented Modelling (AOM) to take advantage of their benefits. AOM encapsulates different context-awareness logics separately in aspect models called ContextAspect that can be easily woven into the service's business logic according to the changing context over time. The proposed development methodology includes four phases (modelling, composition, transformation and adaptation) which act in conformance with the MDA technology.
   Results: The main results gained by using the present approach are the possibility to combine the MDA technology with the aspect-oriented paradigm in a generic development methodology for context-aware.service-based applications, and the handling of their dynamic adaptation at execution time according to the changes in the context.
   Conclusion: The development of context-aware applications is a complex, cumbersome, and time-consuming task. However, the experience reached by implementing the proposed methodology leads us to believe that the involvement of MDD and AOM is significantly beneficial to overcome some recognised shortcomings of several existing approaches and to make this task simpler, easier and faster. (C) 2016 Elsevier B.V. All rights reserved.
C1 [Boudaa, Boudjemaa; Mebarki, Leila Amel; Bouguessa, Abdelkader] Univ Ibn Khaldoun, Dept Informat, Tiaret, Algeria.
   [Hammoudi, Slimane] ESEO, MODESTE, Angers, France.
   [Chikh, Mohammed Amine] Univ Abou Bekr Belkaid Tlemcen, Dept Informat, Tilimsen, Algeria.
C3 Universite Ibn Khaldoun Tiaret; Universite Abou Bekr Belkaid
RP Boudaa, B (corresponding author), Univ Ibn Khaldoun, Dept Informat, Tiaret, Algeria.
EM boudjemaa.boudaa@univ-tiaret.dz; slimane.hammoudi@eseo.fr;
   leilamel.mebarki@gmail.com; abdelkader.bouguessa@gmail.com;
   mea_chikh@mail.univ-tlemcen.dz
RI Boudaa, Boudjemaa/KVA-7231-2024
OI Boudaa, Boudjemaa/0000-0002-1356-4775
CR Abeywickrama DB, 2012, ACM T INTERNET TECHN, V11, DOI 10.1145/2078316.2078318
   [Anonymous], P 2005 INT C MOB BUS
   [Anonymous], P 1 INT WORKSH MOD D
   [Anonymous], 2014, MDA GUID REV 2 0
   [Anonymous], HUMAN COMPUTER INTER
   [Anonymous], 2004, W3C MEMB SUBMISS
   [Anonymous], LNCS
   [Anonymous], P 2 INT C PERVASIVE
   [Anonymous], P 2007 INT WORKSH EN
   [Anonymous], CLOS CONTEXT SHAPE D
   [Anonymous], WORKSH SEM WEB DAT
   [Anonymous], JAVA EXPERT SYSTEM S
   [Anonymous], P ACM IEEE 11 INT C
   [Anonymous], INT C INF TECHN E SE
   [Anonymous], P ASP OR MOD WORKSH
   [Anonymous], SEPCASE 07
   [Anonymous], DERI20031029
   [Anonymous], INGENIERIE DIRIGE MO
   [Anonymous], 2010, THESIS
   [Anonymous], SCA SERVICE COMPONEN
   [Anonymous], 2000, ARCHITECTURAL STYLES
   [Anonymous], EAI ENDORSED T CONTE
   [Anonymous], 2011, THESIS
   [Anonymous], 2015, MET OBJ FAC MOF VERS
   [Anonymous], 3 INT C INF TECHN E
   [Anonymous], UN MOD LAND UML VERS
   [Anonymous], 2013, TABLOIDISATION ONLIN
   [Anonymous], IEEE COMPUT
   [Anonymous], ELECT J EMERGING TOO
   [Anonymous], RECOWLFEATURES200402
   [Anonymous], P WORK IEEE IFIP C S
   [Anonymous], P 2000 ACM SIGPLAN C
   [Anonymous], QUER VIEW TRANSF QVT
   Ayed Dhouha., 2006, MODDM 06 P 1 WORKSHO, P1
   Bazire M, 2005, LECT NOTES ARTIF INT, V3554, P29
   Bettini C, 2010, PERVASIVE MOB COMPUT, V6, P161, DOI 10.1016/j.pmcj.2009.06.002
   Bézivin J, 2004, EIGHTH IEEE INTERNATIONAL ENTERPRISE DISTRIBUTED OBJECT COMPUTING CONFERENCE, PROCEEDINGS, P58, DOI 10.1109/EDOC.2004.1342505
   Blair G, 2009, COMPUTER, V42, P22, DOI 10.1109/MC.2009.326
   Brambilla M., 2012
   Bruneton E, 2006, SOFTWARE PRACT EXPER, V36, P1257, DOI 10.1002/spe.767
   David PC, 2009, ANN TELECOMMUN, V64, P45, DOI 10.1007/s12243-008-0073-y
   Dey AK, 2001, HUM-COMPUT INTERACT, V16, P97, DOI 10.1207/S15327051HCI16234_02
   Elrad T, 2001, COMMUN ACM, V44, P28
   France R, 2004, IEE P-SOFTW, V151, P173, DOI 10.1049/ip-sen:20040920
   Gasevic D., 2009, Model Driven Engineering and Ontology Development, V2nd ed
   Greenwood P, 2011, SERVICE ENGINEERING: EUROPEAN RESEARCH RESULTS, P55, DOI 10.1007/978-3-7091-0415-6_3
   Jézéquel JM, 2008, SOFTW SYST MODEL, V7, P209, DOI 10.1007/s10270-008-0080-5
   Jouault F, 2008, SCI COMPUT PROGRAM, V72, P31, DOI 10.1016/j.scico.2007.08.002
   Kapitsaki GM, 2009, INFORM SOFTWARE TECH, V51, P1244, DOI 10.1016/j.infsof.2009.03.002
   Kapitsaki GM, 2009, J SYST SOFTWARE, V82, P1285, DOI 10.1016/j.jss.2009.02.026
   Kephart JO, 2003, COMPUTER, V36, P41, DOI 10.1109/MC.2003.1160055
   Kiczales G, 2001, COMMUN ACM, V44, P59, DOI 10.1145/383845.383858
   Kim YG, 2011, INT J SOFTW ENG KNOW, V21, P931, DOI 10.1142/S0218194011005542
   Luckham David C., 2001, POWER EVENTS INTRO C
   Muller PA, 2005, LECT NOTES COMPUT SC, V3713, P264, DOI 10.1007/11557432_19
   OMG, 2014, OBJ CONSTR LANG OCL
   OMG, 2014, ONT DEF MET ODM VERS
   OMG, 2015, XML MET INT XMI VERS
   Ou S, 2006, LECT NOTES COMPUT SC, V4066, P188
   Parra C, 2011, SCI COMPUT PROGRAM, V76, P1247, DOI 10.1016/j.scico.2010.12.005
   Pascoe J, 1998, SECOND INTERNATIONAL SYMPOSIUM ON WEARABLE COMPUTERS - DIGEST OF PAPERS, P92, DOI 10.1109/ISWC.1998.729534
   Prezerakos GN, 2007, 2007 IEEE INTERNATIONAL CONFERENCE ON WEB SERVICES, PROCEEDINGS, P320
   SCHILIT BN, 1994, IEEE NETWORK, V8, P22, DOI 10.1109/65.313011
   Seinturier L, 2012, SOFTWARE PRACT EXPER, V42, P559, DOI 10.1002/spe.1077
   Seinturier L, 2009, 2009 IEEE INTERNATIONAL CONFERENCE ON SERVICES COMPUTING, P268, DOI 10.1109/SCC.2009.27
   Sheng Q.Z., 2010, Enabling Context-Aware Web Services: Methods, Architectures, and Technologies, V1st
   Sheng QZ, 2010, INT J WEB INF SYST, V6, P185, DOI 10.1108/17440081011070141
   Steinberg D, 2009, EMF ECLIPSE MODELING, V2nd
   Vogel T, 2014, ACM T AUTON ADAP SYS, V8, DOI 10.1145/2555612
   Wimmer M, 2011, ACM COMPUT SURV, V43, DOI 10.1145/1978802.1978807
NR 70
TC 9
Z9 9
U1 0
U2 7
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR 1
PY 2017
VL 136
BP 17
EP 42
DI 10.1016/j.scico.2016.08.009
PG 26
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA EK0QV
UT WOS:000393633100002
DA 2024-07-18
ER

PT J
AU Börger, E
   Schewe, KD
   Wang, Q
AF Borger, Egon
   Schewe, Klaus-Dieter
   Wang, Qing
TI Serialisable multi-level transaction control: A specification and
   verification
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Abstract state machines; Multi-level transactions; Partial updates;
   Serialisability
ID ABSTRACT STATE MACHINES; MODEL
AB We define a programming language independent controller TACTL for multi-level transactions and an operator TA, which when applied to concurrent programs with multi-level shared locations containing hierarchically structured complex values, turns their behavior with respect to some abstract termination criterion into a transactional behaviour. We prove the correctness property that concurrent runs under the transaction controller are serialisable, assuming an Inverse Operation Postulate to guarantee recoverability. For its applicability to a wide range of programs we specify the transaction controller TACTL and the operator TA in terms (o)f Abstract State Machines (ASMs). This allows us to model concurrent updates at different levels of nested locations in a precise yet simple manner, namely in terms of partial ASM updates. It also provides the possibility to use the controller TACTL and the operator TA as a plug-in when specifying concurrent system components in terms of sequential ASMs. (C) 2016 Elsevier B.V. All rights reserved.
C1 [Borger, Egon] Univ Pisa, Dipartimento Informat, I-56125 Pisa, Italy.
   [Schewe, Klaus-Dieter] Software Competence Ctr Hagenberg, A-4232 Hagenberg, Austria.
   [Wang, Qing] Australian Natl Univ, Res Sch Comp Sci, Canberra, ACT 0200, Australia.
C3 University of Pisa; Softwarepark Hagenberg; Australian National
   University
RP Börger, E (corresponding author), Univ Pisa, Dipartimento Informat, I-56125 Pisa, Italy.
EM boerger@di.unipi.it; klaus-dieter.schewe@scch.at; qing.wang@anu.edu.au
OI Wang, Qing/0000-0001-9504-4273
FU Austrian Science Fund (FWF) [P26452-N15]; Austrian Ministry for
   Transport, Innovation and Technology (bmvit); Austrian Ministry for
   Science, Research and Economy (bmwfw); Province of Upper Austria in the
   frame of the COMET center SCCH [844597]; Alexander von Humboldt
   Foundation; Austrian Science Fund (FWF) [P26452] Funding Source:
   Austrian Science Fund (FWF)
FX The research reported in this paper results from the project Behavioural
   Theory and Logics for Distributed Adaptive Systems supported by the
   Austrian Science Fund (FWF):[P26452-N15]. The research reported in this
   paper has further been supported by the Austrian Ministry for Transport,
   Innovation and Technology (bmvit), Austrian Ministry for Science,
   Research and Economy (bmwfw) and the Province of Upper Austria in the
   frame of the COMET center SCCH [844597]. The first author, Humboldt
   research prize awardee in 2007/08, gratefully acknowledges partial
   support by a renewed research grant from the Alexander von Humboldt
   Foundation in 2014.
CR Abrial J-R., 1996, The B Book
   [Anonymous], MODELING IN EVENT B
   [Anonymous], 2006, Fundamentals of Database Systems
   Batory D, 2008, J UNIVERS COMPUT SCI, V14, P2059
   BEERI C, 1989, J ACM, V36, P230, DOI 10.1145/62044.62046
   Bernstein A., 1981, ACM T COMPUT SYST, V13, P121
   Borger E., 2003, Formal Aspects of Computing, V15, P237, DOI 10.1007/s00165-003-0012-7
   BORGER E, 1994, IFIP TRANS A, V56, P489
   Borger E., 2014, LNCS, V8477, P142
   Borger E., 2015, MODELING CHANGE VIA
   Borger E., 2003, ABSTRACT STATE MACHI
   Börger E, 2016, ACTA INFORM, V53, P469, DOI 10.1007/s00236-015-0249-7
   Farahbod R., 2006, COREASM EXTENSIBLE A
   Gargantini A., 2000, LNCS, V1912, P303
   Glasser U., 2014, DAGSTUHL REP, V3, P74
   Goerigk W., 1996, INT C COMP CONSTR P
   Goos G., PROJECT VERIFIX
   Gurevich Y, 2005, THEOR COMPUT SCI, V343, P370, DOI 10.1016/j.tcs.2005.06.017
   Gurevich Y, 2005, THEOR COMPUT SCI, V336, P311, DOI 10.1016/j.tcs.2004.11.010
   Gurevich Y, 2001, J UNIVERS COMPUT SCI, V7, P917
   GUREVICH Y, 1994, IFIP TRANS A, V51, P423
   Gurevich Y., 2003, ABSTRACT STATE MACHI
   Kirchberg M, 2009, LECT NOTES COMPUT SC, V5115, P65, DOI 10.1007/978-3-642-11447-2_5
   LAMPORT L, 1979, IEEE T COMPUT, V28, P690, DOI 10.1109/TC.1979.1675439
   LOMET D, 1992, P ACM SIGMOD INT C M, P185
   Ozsu M., 1994, PRINCIPLES DISTRIBUT
   Papadimitriou C., 1986, Theory of Database Concurrency Control
   Reuter A, 1993, T PROCESSING CONCEPT
   Schewe K.-D., 2000, Acta Cybernetica, V14, P419
   Schewe K.-D., 2010, FRONT ARTIF INTELL A, V225, P37
   WEIKUM G, 1991, ACM T DATABASE SYST, V16, P132, DOI 10.1145/103140.103145
   Weikum G., 1986, THESIS
NR 32
TC 1
Z9 1
U1 0
U2 1
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 1
PY 2016
VL 131
BP 42
EP 58
DI 10.1016/j.scico.2016.03.008
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA EB8FQ
UT WOS:000387627300004
OA Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Calegari, D
   Mossakowski, T
   Szasz, N
AF Calegari, Daniel
   Mossakowski, Till
   Szasz, Nora
TI Heterogeneous verification in the context of model driven engineering
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 17th Brazilian Symposium on Formal Methods (SBMF) as part of 5th
   Brazilian Conference on Software - Theory and Practice (CBSoft)
CY SEP 29-OCT 01, 2014
CL Maceio, BRAZIL
SP Univ Fed Alagoas, Brazilian Natl Inst Sci & Technol Software Engn, CAPES, CNPq, Google Inc
DE Verification; Formal methods; Model-Driven Engineering; Theory of
   Institutions; Heterogeneous Tool Set
ID SEMANTICS; TRANSFORMATION; SPECIFICATION
AB In some cases it may be useful to represent a problem in many logical domains, since they provide different perspectives for addressing formal verification. However, the maintenance of multiple representations in separate domains can be expensive if there is neither automated assistance nor a clear formal relation between these domains. We have addressed this problem in the context of Model-Driven Engineering (MDE). We defined solid foundations of a theoretical environment for formal verification using heterogeneous verification approaches. The environment is based on the Theory of Institutions which provides a sound basis for representing MDE elements and a way for specifying translations from these elements to other domains used for verification. In this paper we present how this environment can be supported in practice within the Heterogeneous Tool Set (HETS). HETS supports heterogeneous specifications and provides capabilities for monitoring the overall correctness of a heterogeneous proof. We first extend the theoretical environment with the inclusion of an institution for the Object Constraint Language (OCL), and then we define semantic-preserving translations from the OCL-constrained MDE elements to a core language of HETS. With this we can verify basic properties of our specification, and then use the existent connections between logical domains within HETS for broadening the spectrum of domains in which complementary verification properties can be addressed. (C) 2016 Elsevier B.V. All rights reserved.
C1 [Calegari, Daniel] Univ Republica, Fac Ingn, Montevideo 11300, Uruguay.
   [Mossakowski, Till] Univ Magdeburg, D-39106 Magdeburg, Germany.
   [Szasz, Nora] Univ ORT Uruguay, Fac Ingn, Montevideo 11100, Uruguay.
C3 Universidad de la Republica, Uruguay; Otto von Guericke University;
   University ORT Uruguay
RP Calegari, D (corresponding author), Univ Republica, Fac Ingn, Montevideo 11300, Uruguay.
EM dcalegar@fing.edu.uy; mossakow@iws.cs.uni-magdeburg.de; szasz@ort.edu.uy
OI Szasz, Nora/0000-0002-8177-8695; Calegari Garcia,
   Daniel/0000-0001-9506-7619; Mossakowski, Till/0000-0002-8938-5204
CR [Anonymous], ECEASST
   [Anonymous], 2004, LNCS, V2960
   Beckert Bernhard, 2002, DIKU TECHNICAL REPOR, P113
   Bézivin J, 2006, LECT NOTES COMPUT SC, V4199, P440
   Bidoit M, 1999, LECT NOTES COMPUT SC, V1723, P399
   Boronat A, 2009, LECT NOTES COMPUT SC, V5486, P71, DOI 10.1007/978-3-642-03429-9_6
   Boronat A, 2009, LECT NOTES BUS INF P, V33, P96
   Boronat A, 2009, LECT NOTES COMPUT SC, V5503, P18
   Braga C, 2011, LECT NOTES COMPUT SC, V7021, P108, DOI 10.1007/978-3-642-25032-3_8
   Brucker A.D., 2014, ARCH FORM PROOFS
   Buttner Fabian, 2012, Model Driven Engineering Languages and Systems. Proceedings 15th International Conference, MODELS 2012, P432, DOI 10.1007/978-3-642-33666-9_28
   Buttner F., 2011, P 8 INT WORKSH MOD D
   Calegari D., 2014, THESIS
   Calegari D, 2015, SCI COMPUT PROGRAM, V107, P41, DOI 10.1016/j.scico.2015.02.006
   Calegari D, 2013, ELECTRON NOTES THEOR, V292, P5, DOI 10.1016/j.entcs.2013.02.002
   Calegari D, 2015, LECT NOTES COMPUT SC, V8941, P64, DOI [10.1007/978-3-319-15075-8-5, 10.1007/978-3-319-15075-8_5]
   Calegari D, 2011, LECT NOTES COMPUT SC, V6527, P112, DOI 10.1007/978-3-642-19829-8_8
   Cengarle M.V., 2008, TUM10807 I INF
   Cengarle MV, 2008, LECT NOTES COMPUT SC, V5065, P383, DOI 10.1007/978-3-540-68679-8_23
   CENGARLE MV, 2004, SOFTW SYST MODEL, V3, P9
   Cerioli M, 1997, THEOR COMPUT SCI, V173, P311, DOI 10.1016/S0304-3975(96)00160-0
   Clavel M., 2009, ELECT COMMUN EASST, V24
   Codescu M., 2014, SPECIFICATION UNPUB
   Corradini Andrea, 2012, Recent Trends in Algebraic Development Techniques. 20th International Workshop, WADT 2010. Revised Selected Papers, P160, DOI 10.1007/978-3-642-28412-0_11
   de Lara J, 2007, THEOR COMPUT SCI, V376, P139, DOI 10.1016/j.tcs.2007.02.001
   Diaconescu R., 1998, AMAST Series in Computing, V6
   DIACONESCU R, 1991, P WORKSH LOG FRAM
   Diaconescu R, 2013, FUZZY SET SYST, V218, P32, DOI 10.1016/j.fss.2012.11.015
   Egea M, 2010, INNOV SYST SOFTW ENG, V6, P73, DOI 10.1007/s11334-009-0108-1
   Favre L, 2009, LECT NOTES COMPUT SC, V5570, P177, DOI 10.1007/978-3-642-01924-1_13
   Giese H., 2006, P 3 INT WORKSH MOD D, P78
   Giese H, 2014, SOFTW SYST MODEL, V13, P273, DOI 10.1007/s10270-012-0247-y
   Gimenez M., 2008, EPTCS, V139, P65
   Goguen J., 2002, Formal Aspects of Computing, V13, P274, DOI 10.1007/s001650200013
   GOGUEN JA, 1984, LECT NOTES COMPUT SC, V164, P221
   James P., 2013, LNCS, V7841, P178, DOI [10.1007/978-3-642-37635-111, DOI 10.1007/978-3-642-37635-111]
   Kent S., 2002, Integrated Formal Methods. Third International Conference, IFM 2002. Proceedings (Lecture Notes in Computer Science Vol.2335), P286
   Knapp Alexander, 2015, Software, Services and Systems: Essays Dedicated to Martin Wirsing on the Occasion of his Retirement from the Chair of Programming and Software Engineering: LNCS 8950, P215
   Knapp Alexander, 2015, Software, Services and Systems: Essays Dedicated to Martin Wirsing on the Occasion of his Retirement from the Chair of Programming and Software Engineering: LNCS 8950, P193
   Lano K., 2014, CEUR WORKSHOP P, V1325, P26
   Lano K, 2012, ADV COMPUT, V85, P123, DOI 10.1016/B978-0-12-396526-4.00003-5
   Mac Lane S., 1998, Graduate Texts in Mathematics, V5
   Mossakowski T, 2003, COMPUT INFORM, V22, P285
   Mossakowski T., 2015, STUDIES UNIVERSAL LO, P489, DOI [DOI 10.1007/978-3-319-15368-1_21, DOI 10.1007/978-3-319-15368-121]
   Mossakowski T., 2005, LNCS, V3423
   Mossakowski T, 2007, LECT NOTES COMPUT SC, V4424, P519
   Mossakowski T, 2009, LECT NOTES COMPUT SC, V5486, P266, DOI 10.1007/978-3-642-03429-9_18
   Mossakowski Till., 2005, HETEROGENEOUS SPECIF
   OMG, 2009, MET OBJ FAC MOF 2 0
   OMG, 2014, OBJ CONSTR LANG FORM
   OMG (Object Management Group), 2003, Meta Object Facility (MOF) 2.0 Core Specification, Specification Version 2.0
   Orejas F, 2009, LECT NOTES COMPUT SC, V5700, P140
   SANNELLA D, 1988, INFORM COMPUT, V76, P165, DOI 10.1016/0890-5401(88)90008-9
   Sannella D, 2012, EATCS MONOGRAPHS THE
   Shan LJ, 2009, THIRD INTERNATIONAL SYMPOSIUM ON THEORETICAL ASPECTS OF SOFTWARE ENGINEERING, PROCEEDINGS, P55, DOI 10.1109/TASE.2009.62
   Tarlecki A., 2000, Frontiers of Combining Systems 2, P337
   Weidenbach C., 2002, Automated Deduction - CADE-18. 18th International Conference on Automated Deduction. Proceedings (Lecture Notes in Artificial Intelligence Vol.2392), P275
NR 57
TC 2
Z9 2
U1 0
U2 6
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 15
PY 2016
VL 126
SI SI
BP 3
EP 30
DI 10.1016/j.scico.2016.02.003
PG 28
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA DP4IP
UT WOS:000378459900002
OA Bronze
DA 2024-07-18
ER

PT J
AU Charalambides, M
   Dinges, P
   Agha, G
AF Charalambides, Minas
   Dinges, Peter
   Agha, Gul
TI Parameterized, concurrent session types for asynchronous multi-actor
   interactions
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Session types; Parameterized; Static; Actors; Concurrency
ID LANGUAGE PRIMITIVES; EXCEPTIONS; DISCIPLINE
AB Session types have been proposed as a means of statically verifying implementations of communication protocols. Although prior work has been successful for some classes of protocols, it does not cope well with parameterized, multi-actor scenarios with inherent asynchrony. For example, the sliding window protocol is not expressible in previously proposed session type notations. This article defines System-A: a novel session type system, as well the associated programming language that together overcome many of the limitations of prior work. With explicit support for asynchrony and concurrency, as well as multiple forms of parameterization, we demonstrate that System-A can be used for the static verification of a large class of asynchronous communication protocols. (C) 2015 Elsevier B.V. All rights reserved.
EM charala1@illinois.edu; pdinges@acm.org; agha@illinois.edu
OI Agha, Gul/0000-0002-0580-4206; Charalambides, Minas/0000-0002-6122-7562
FU Air Force Research Laboratory; Air Force Office of Scientific Research
   [FA8750-11-2-0084]; National Science Foundation [CCF-1438982]; Direct
   For Computer & Info Scie & Enginr; Division of Computing and
   Communication Foundations [1438982] Funding Source: National Science
   Foundation; Division of Computing and Communication Foundations; Direct
   For Computer & Info Scie & Enginr [1438969] Funding Source: National
   Science Foundation
FX The authors would like to thank Karl Palmskog for his helpful comments.
   We would also like to thank the anonymous reviewers for their many
   suggestions, which have undoubtedly led to the maturement of this paper.
   This publication was made possible in part by a joint sponsorship from
   the Air Force Research Laboratory and the Air Force Office of Scientific
   Research under agreement number FA8750-11-2-0084, and also a sponsorship
   from the National Science Foundation under grant number CCF-1438982. The
   U.S. Government is authorized to reproduce and distribute reprints for
   Governmental purposes notwithstanding any copyright notation thereon.
CR Agha G. A., 1997, Journal of Functional Programming, V7, P1, DOI 10.1017/S095679689700261X
   [Anonymous], 1992, Handbook of Logic in Computer Science
   Arbab F, 2004, MATH STRUCT COMP SCI, V14, P329, DOI 10.1017/S0960129504004153
   Basu S, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P191
   Bejleri A., 2012, THESIS
   Bejleri A, 2010, LECT NOTES COMPUT SC, V6447, P270, DOI 10.1007/978-3-642-16901-4_19
   Bettini L, 2008, LECT NOTES COMPUT SC, V5201, P418, DOI 10.1007/978-3-540-85361-9_33
   Bocchi L, 2010, LECT NOTES COMPUT SC, V6269, P162, DOI 10.1007/978-3-642-15375-4_12
   Bonelli E, 2008, LECT NOTES COMPUT SC, V4912, P240
   Boreale M, 2002, INFORM COMPUT, V172, P139, DOI 10.1006/inco.2001.3080
   Carbone M, 2008, LECT NOTES COMPUT SC, V5201, P402, DOI 10.1007/978-3-540-85361-9_32
   Carbone M, 2007, LECT NOTES COMPUT SC, V4421, P2
   Carbone M, 2013, ACM SIGPLAN NOTICES, V48, P263, DOI 10.1145/2480359.2429101
   Carbone M, 2009, LECT NOTES COMPUT SC, V5569, P187
   Castagna G, 2012, LOG METH COMPUT SCI, V8, DOI 10.2168/LMCS-8(1:24)2012
   Castagn G, 2011, LECT NOTES COMPUT SC, V6722, P1, DOI 10.1007/978-3-642-21461-5_1
   Charalambides M., EPTCS, V91, P16
   Chen T.-C., 2012, LNCS, V7173, P25, DOI DOI 10.1007/978-3-642-30065-3_2
   Chen TC, 2012, LECT NOTES COMPUT SC, V7454, P209, DOI 10.1007/978-3-642-32940-1_16
   DENICOLA R, 1984, THEOR COMPUT SCI, V34, P83, DOI 10.1016/0304-3975(84)90113-0
   Deniélou PM, 2012, LECT NOTES COMPUT SC, V7211, P194, DOI 10.1007/978-3-642-28869-2_10
   Deniélou PM, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P435, DOI 10.1145/1926385.1926435
   Dezani-Ciancaglini M., 2007, LNCS, V4709, P207
   Dinges Peter, 2012, Coordination Models and Languages. Proceedings 14th International Conference, COORDINATION 2012, P89, DOI 10.1007/978-3-642-30829-1_7
   Eugster P., 2012, OOPSLA
   FRANCEZ N, 1986, TEXTS MONOGRAPHS COM
   Frolund S., 1996, COORDINATING DISTRIB
   FROLUND S, 1993, LECTURE NOTES COMPUT, V707, P346
   Gay S, 2005, ACTA INFORM, V42, P191, DOI 10.1007/s00236-005-0177-z
   Gay SJ, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P299, DOI 10.1145/1706299.1706335
   Gay SJ, 2010, J FUNCT PROGRAM, V20, P19, DOI 10.1017/S0956796809990268
   Godel K., 1958, dialectica, V12, P280, DOI 10.1111/j.1746-8361.1958.tb01464.x
   Hennessy M., 1990, Semantics of programming languages-an elementary introduction using structural operational semantics
   Honda K, 1998, LECT NOTES COMPUT SC, V1381, P122, DOI 10.1007/BFb0053567
   Honda K, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P273, DOI 10.1145/2827695
   Honda Kohei., 1993, CONCUR'93, 4th International Conference on Concurrency Theory, Hildesheim, Germany, August 23-26, 1993, V715, P509, DOI DOI 10.1007/3-540-57208-2_
   Hu R, 2008, LECT NOTES COMPUT SC, V5142, P516, DOI 10.1007/978-3-540-70592-5_22
   Hu R, 2010, LECT NOTES COMPUT SC, V6183, P329, DOI 10.1007/978-3-642-14107-2_16
   Kouzapas D, 2011, LECT NOTES COMPUT SC, V6722, P228, DOI 10.1007/978-3-642-21461-5_15
   Lanese I, 2008, SEFM 2008: SIXTH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING AND FORMAL METHODS, PROCEEDINGS, P323, DOI 10.1109/SEFM.2008.11
   LYNCH WC, 1968, COMMUN ACM, V11, P407, DOI 10.1145/363347.363366
   Milicia G, 2005, CONCURR COMP-PRACT E, V17, P539, DOI 10.1002/cpe.849
   Mostrous D, 2009, LECT NOTES COMPUT SC, V5502, P316, DOI 10.1007/978-3-642-00590-9_23
   Peltz C, 2003, COMPUTER, V36, P46, DOI 10.1109/MC.2003.1236471
   Plotkin GD, 2004, J LOGIC ALGEBR PROGR, V60-1, P17, DOI 10.1016/j.jlap.2004.03.002
   PROBERT RL, 1991, IEEE T COMPUT, V40, P468, DOI 10.1109/12.88466
   Pucella R, 2008, HASKELL'08: PROCEEDINGS OF THE ACM SIGPLAN 2008 HASKELL SYMPOSIUM, P25
   PUNTIGAM F, 1996, P WORKSH FORM METH O
   Puntigam F., COORDINATION REQUIRE, P367
   Takeuchi K., 1994, Parallel Architectures and Languages Europe'94, V817, P398, DOI [DOI 10.1007/3-540-58184-7_118, 10.1007/3540581847118]
   Tel G., 2000, Introduction to Distributed Algorithms, V2nd
   Vasconcelos VT, 2006, THEOR COMPUT SCI, V368, P64, DOI 10.1016/j.tcs.2006.06.028
   Yoshida N, 2007, ELECTRON NOTES THEOR, V171, P73, DOI 10.1016/j.entcs.2007.02.056
   Yoshida N, 2010, LECT NOTES COMPUT SC, V6014, P128, DOI 10.1007/978-3-642-12032-9_10
   Yuang M. C., 1988, Proceedings of the Computer Networking Symposium (Cat. No.88CH2547-8), P164, DOI 10.1109/CNS.1988.4993
NR 55
TC 11
Z9 15
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN-FEB
PY 2016
VL 115
SI SI
BP 100
EP 126
DI 10.1016/j.scico.2015.10.006
PG 27
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CZ5DH
UT WOS:000367122200006
DA 2024-07-18
ER

PT J
AU Montenegro, M
   Peña, R
   Segura, C
AF Montenegro, Manuel
   Pena, Ricardo
   Segura, Clara
TI Space consumption analysis by abstract interpretation: Reductivity
   properties
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT Foundational Practical Aspects Resource Analysis (FOPARA)
CY MAY 19, 2011
CL Madrid, SPAIN
DE Resource analysis; Abstract interpretation; Functional languages;
   Regions
AB In a previous paper we presented an abstract interpretation-based static analysis for inferring heap and stack memory consumption in a functional language. The language, called Safe, is eager and first-order, and its memory management system is based on heap regions instead of the more conventional approach of having a garbage collector.
   In this paper we concentrate on an important property of our analysis, namely that the inferred bounds are reductive under certain reasonable conditions. This means that by iterating the analysis using as input the prior inferred bound, we can get tighter and tighter bounds, all of them correct. In some cases, even the exact bound is obtained.
   The paper includes several examples and case studies illustrating in detail the reductivity property of the inferred bounds. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Montenegro, Manuel; Pena, Ricardo; Segura, Clara] Univ Complutense Madrid, Dept Sistemas Informat & Computac, E-28040 Madrid, Spain.
C3 Complutense University of Madrid
RP Montenegro, M (corresponding author), Univ Complutense Madrid, Dept Sistemas Informat & Computac, E-28040 Madrid, Spain.
EM montenegro@fdi.ucm.es; ricardo@sip.ucm.es; csegura@sip.ucm.es
RI Segura, Clara/K-9610-2017; Montenegro Montes, Manuel/F-8773-2016; PENA
   MARI, RICARDO VICENTE/L-1886-2017
OI Segura, Clara/0000-0003-1403-2997; Montenegro Montes,
   Manuel/0000-0002-9686-465X; PENA MARI, RICARDO
   VICENTE/0000-0001-5387-8931
FU MEC FPU grant [AP2006-02154];  [TIN2008-06622-C03-01/TIN (STAMP)]; 
   [TIN2009-14599-C03-01 (DESAFIOS10)];  [S2009/TIC-1465 (PROMETIDOS)]
FX Work supported by the projects TIN2008-06622-C03-01/TIN (STAMP),
   TIN2009-14599-C03-01 (DESAFIOS10), S2009/TIC-1465 (PROMETIDOS) and the
   MEC FPU grant AP2006-02154.
CR Albert E, 2007, LECT NOTES COMPUT SC, V4421, P157
   Albert E, 2011, LECT NOTES COMPUT SC, V6538, P38, DOI 10.1007/978-3-642-18275-4_5
   Albert E, 2011, J AUTOM REASONING, V46, P161, DOI 10.1007/s10817-010-9174-1
   Albert E, 2010, ACM SIGPLAN NOTICES, V45, P121
   Hoffmann J, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P357, DOI 10.1145/1926385.1926427
   Hofmann M, 2003, ACM SIGPLAN NOTICES, V38, P185, DOI 10.1145/640128.604148
   Hughes J., 1996, Conference Record of POPL '96: The 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P410, DOI 10.1145/237721.240882
   Hughes J, 1999, ACM SIGPLAN NOTICES, V34, P70, DOI 10.1145/317765.317785
   Jost S., 2010, THESIS U MUNCHEN
   Jost S, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P223, DOI 10.1145/1706299.1706327
   Monteiro M., 2014, SPACE CONSUMPTION AN, P1
   Montenegro M., 2014, TECHNICAL REPORT, P1
   Montenegro M., 2008, P 10 INT ACM SIGPLAN, P152
   Montenegro M, 2014, INFORM COMPUT, V235, P3, DOI 10.1016/j.ic.2014.01.003
   Montenegro M, 2010, LECT NOTES COMPUT SC, V6324, P34
   Montenegro M, 2010, LECT NOTES COMPUT SC, V5979, P145, DOI 10.1007/978-3-642-11999-6_10
   Nielson F., 1999, PRINCIPLES PROGRAM A
   Pareto L., 1998, THESIS CHALMERS U TE
   Simoes H, 2012, ACM SIGPLAN NOTICES, V47, P165, DOI 10.1145/2398856.2364575
   Tarski A., 1955, PAC J MATH, V5, P285, DOI DOI 10.2140/PJM.1955.5.285
   [No title captured]
NR 21
TC 0
Z9 0
U1 0
U2 0
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 1
PY 2015
VL 111
SI SI
BP 458
EP 482
DI 10.1016/j.scico.2014.04.014
PN 3
PG 25
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA DB5LY
UT WOS:000368556800005
OA hybrid
DA 2024-07-18
ER

PT J
AU Calegari, D
   Szasz, N
AF Calegari, Daniel
   Szasz, Nora
TI Institution-based foundations for verification in the context of
   model-driven engineering
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT Brazilian Symposium on Formal Methods (SBMF)
CY SEP 29-OCT 03, 2013
CL Brasilia, BRAZIL
DE Verification; Formal semantics; MOF; QVT-relations; Theory of
   institutions
ID ALGEBRAIC SEMANTICS; QVT-RELATIONS; SPECIFICATION; TRANSFORMATION
AB Within the Model-Driven Engineering (MDE) paradigm, a separation of duties between software developers is usually proposed to cope with formal verification issues. MDE experts are responsible for the definition of models and model transformations, while formal verification experts conduct the verification process. This schema should be aided by (semi)automatic translations from the MDE elements to their formal representation in the potentially many semantic domains used for verification, and also by translations between these domains. Translations may be useful to perform a heterogeneous verification, i.e. using different domains for the verification of each part of the whole problem, and also to integrate MDE elements with the specification and verification of other traditional software artifacts. However, this schema requires formal foundations allowing the representation of the MDE elements in such a way that it is possible to ensure that translations are semantic-preserving. The aim of this paper is to present a formalization of the MDE elements using the Theory of Institutions. We provide institutions for the representation of MDE elements based on the MOF and QVT-Relations standards. We also show how the theory assists with these requirements for the definition of an environment for the formal verification of MDE elements using heterogeneous verification approaches. (C) 2015 Elsevier B.V. All rights reserved.
C1 [Calegari, Daniel] Univ Republica, Fac Ingn, Montevideo 11300, Uruguay.
   [Szasz, Nora] Univ ORT Uruguay, Fac Ingn, Montevideo 11100, Uruguay.
C3 Universidad de la Republica, Uruguay; University ORT Uruguay
RP Calegari, D (corresponding author), Univ Republica, Fac Ingn, Montevideo 11300, Uruguay.
EM dcalegar@fing.edu.uy; szasz@ort.edu.uy
OI Szasz, Nora/0000-0002-8177-8695; Calegari Garcia,
   Daniel/0000-0001-9506-7619
CR Anastasakis K., 2007, ModeVVa'07, P47
   Anastasakis K, 2010, SOFTW SYST MODEL, V9, P69, DOI 10.1007/s10270-008-0110-3
   [Anonymous], MET FAC MOF 2 0 QUER
   [Anonymous], MET FAC MOF 2 0 COR
   Beckert Bernhard, 2002, DIKU TECHNICAL REPOR, P113
   Bezivin J., 2005, SOFTWARE SYSTEM MODE, V4, P171, DOI DOI 10.1007/S10270-005-0079-0
   Bézivin J, 2006, LECT NOTES COMPUT SC, V4199, P440
   Boronat A, 2009, LECT NOTES COMPUT SC, V5486, P71, DOI 10.1007/978-3-642-03429-9_6
   Boronat A, 2009, LECT NOTES BUS INF P, V33, P96
   Boronat A, 2009, LECT NOTES COMPUT SC, V5503, P18
   Braga C, 2014, SCI COMPUT PROGRAM, V92, P86, DOI 10.1016/j.scico.2013.08.013
   Brucker Achim D., 2014, FEATHERWEIGHT OCL PR
   Btittner F., 2011, P 8 INT WORKSH MOD D
   Buttner Fabian, 2012, Model Driven Engineering Languages and Systems. Proceedings 15th International Conference, MODELS 2012, P432, DOI 10.1007/978-3-642-33666-9_28
   Cabot J, 2010, J SYST SOFTWARE, V83, P283, DOI 10.1016/j.jss.2009.08.012
   Calegari Daniel, 2013, Formal Methods: Foundations and Applications. 16th Brazilian Symposium, SBMF 2013. Proceedings: LNCS 8195, P34, DOI 10.1007/978-3-642-41071-0_4
   Calegari D., 2013, P C IB SOFTW ENG CIB
   Calegari D., 2014, THESIS U REPUBLICA
   Calegari D, 2013, ELECTRON NOTES THEOR, V292, P5, DOI 10.1016/j.entcs.2013.02.002
   Calegari D, 2011, LECT NOTES COMPUT SC, V6527, P112, DOI 10.1007/978-3-642-19829-8_8
   Cengarle M.V., 2008, TUM10807 I INF
   Cengarle MV, 2008, LECT NOTES COMPUT SC, V5065, P383, DOI 10.1007/978-3-540-68679-8_23
   Clavel M., 2009, ELECT COMMUN EASST, V24
   Corradini Andrea, 2012, Recent Trends in Algebraic Development Techniques. 20th International Workshop, WADT 2010. Revised Selected Papers, P160, DOI 10.1007/978-3-642-28412-0_11
   de Lara J, 2007, THEOR COMPUT SCI, V376, P139, DOI 10.1016/j.tcs.2007.02.001
   de Lara J, 2009, LECT NOTES COMPUT SC, V5795, P256, DOI 10.1007/978-3-642-04425-0_19
   Diaconescu R, 2013, FUZZY SET SYST, V218, P32, DOI 10.1016/j.fss.2012.11.015
   Egea M, 2010, INNOV SYST SOFTW ENG, V6, P73, DOI 10.1007/s11334-009-0108-1
   Favre L, 2009, LECT NOTES COMPUT SC, V5570, P177, DOI 10.1007/978-3-642-01924-1_13
   Goguen J., 2002, Formal Aspects of Computing, V13, P274, DOI 10.1007/s001650200013
   GOGUEN JA, 1984, LECT NOTES COMPUT SC, V164, P221
   GOGUEN JA, 1992, J ACM, V39, P95, DOI 10.1145/147508.147524
   Guerra E, 2012, FUND INFORM, V114, P73, DOI 10.3233/FI-2011-618
   Hermann F, 2008, ELECTRON NOTES THEOR, V211, P261, DOI 10.1016/j.entcs.2008.04.048
   James P., 2013, LNCS, V7841, P178, DOI [10.1007/978-3-642-37635-111, DOI 10.1007/978-3-642-37635-111]
   Kent S., 2002, Integrated Formal Methods. Third International Conference, IFM 2002. Proceedings (Lecture Notes in Computer Science Vol.2335), P286
   Kleppe A.G., 2003, MDA Explained; The Model Driven Architecture: Practice and Promise
   KURTEV I, 2002, DOA 2002 FED C IND T
   Lano K., 2014, FORM ASP COMPUT, P1
   Mac Lane S., 1998, Graduate Texts in Mathematics, V5
   Mossakowski T, 2003, COMPUT INFORM, V22, P285
   Mossakowski T, 2007, LECT NOTES COMPUT SC, V4424, P519
   Mossakowski Till., 2005, HETEROGENEOUS SPECIF
   OMG, 2014, OBJ CONSTR LANG FORM
   Orejas F, 2009, LECT NOTES COMPUT SC, V5700, P140
   Poernomo I, 2008, LECT NOTES COMPUT SC, V5063, P214, DOI 10.1007/978-3-540-69927-9_15
   Rivera JE, 2009, SIMUL-T SOC MOD SIM, V85, P778, DOI 10.1177/0037549709341635
   Sannella D, 2012, EATCS MONOGRAPHS THE
   Shan LJ, 2009, THIRD INTERNATIONAL SYMPOSIUM ON THEORETICAL ASPECTS OF SOFTWARE ENGINEERING, PROCEEDINGS, P55, DOI 10.1109/TASE.2009.62
   Steel J, 2007, SOFTW SYST MODEL, V6, P401, DOI 10.1007/s10270-006-0036-6
   Stenzel K, 2011, LECT NOTES COMPUT SC, V6981, P533, DOI 10.1007/978-3-642-24485-8_39
   Stevens P, 2013, SOFTW SYST MODEL, V12, P175, DOI 10.1007/s10270-011-0198-8
   Zhu H, 2012, FRONT COMPUT SCI-CHI, V6, P40, DOI 10.1007/s11704-012-2902-4
NR 53
TC 1
Z9 1
U1 0
U2 5
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP
PY 2015
VL 107
BP 41
EP 63
DI 10.1016/j.scico.2015.02.006
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA CM5DZ
UT WOS:000357708300004
DA 2024-07-18
ER

PT J
AU Hesselink, WH
AF Hesselink, Wim H.
TI Mutual exclusion by four shared bits with not more than quadratic
   complexity
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Concurrent algorithm; Mutual exclusion; Fault tolerance; Time
   complexity; Verification
ID COMMUNICATION
AB For years, the mutual exclusion algorithm of Lycklama and Hadzilacos (1991) [21] was the optimal mutual exclusion algorithm with the first-come-first-served property, with a minimal number of (non-atomic) communication variables (5 bits per thread). Recently, Aravind published an improvement of it, which uses 4 bits per thread and has simplified waiting conditions. This algorithm is extended here with fault tolerance, and it is verified by assertional methods, using the proof assistant PVS. Progress is proved by means of UNITY logic. The paper proposes a new measure of concurrent time complexity, and proves that the concurrent complexity for throughput of the present algorithm is not more than quadratic in the number of threads. (C) 2015 Elsevier B.V. All rights reserved.
C1 Univ Groningen, Dept Comp Sci, NL-9700 AK Groningen, Netherlands.
C3 University of Groningen
RP Hesselink, WH (corresponding author), Univ Groningen, Dept Comp Sci, POB 407, NL-9700 AK Groningen, Netherlands.
EM w.h.hesselink@rug.nl
OI Hesselink, Wim/0000-0002-1413-4320
CR ANDERSON JH, 1988, INFORM PROCESS LETT, V28, P99, DOI 10.1016/0020-0190(88)90171-8
   Anderson JH, 2003, DISTRIB COMPUT, V16, P75, DOI 10.1007/s00446-003-0088-6
   Andrews G.R., 2000, Foundations of Multithreaded, Parallel, and Distributed Programming
   Apt K.R., 2009, Texts in Computer Science, DOI 10.1007/978-1-84882-745-5
   Aravind AA, 2013, J PARALLEL DISTR COM, V73, P1029, DOI 10.1016/j.jpdc.2013.03.009
   Aravind AA, 2011, ACTA INFORM, V48, P67, DOI 10.1007/s00236-011-0132-0
   Buhr P.A., 2014, CONCURR COMPUT, P1
   Chandy K.M., 1988, PARALLEL PROGRAM DES
   Dijkstra E. W., 1968, Programming languages, P43
   DIJKSTRA EW, 1965, COMMUN ACM, V8, P569, DOI 10.1145/365559.365617
   Hesselink W.H., 2014, MUTUAL EXCLUSION LYC
   Hesselink WH, 1999, DISTRIB COMPUT, V12, P197, DOI 10.1007/s004460050066
   Hesselink WH, 2013, ACTA INFORM, V50, P297, DOI 10.1007/s00236-013-0181-7
   Hesselink WH, 2013, SCI COMPUT PROGRAM, V78, P1622, DOI 10.1016/j.scico.2013.03.003
   Hesselink WH, 2013, SCI COMPUT PROGRAM, V78, P1521, DOI 10.1016/j.scico.2012.10.013
   Inoue T., 2006, ELECTR COMMUN JPN, V89, P498
   LAMPORT L, 1986, J ACM, V33, P313, DOI 10.1145/5383.5384
   LAMPORT L, 1986, DISTRIB COMPUT, V1, P77, DOI 10.1007/BF01786227
   LAMPORT L, 1974, COMMUN ACM, V17, P453, DOI 10.1145/361082.361093
   LYCKLAMA EA, 1991, ACM T PROGR LANG SYS, V13, P558, DOI 10.1145/115372.115370
   OWICKI S, 1976, ACTA INFORM, V6, P319, DOI 10.1007/BF00268134
   Owre S., 2001, PVS VERSION 2 4 SYST
   Raynal M., 1986, ALGORITHMS MUTUAL EX
   Shiue WT, 2004, DES AUTOM EMBED SYST, V9, P235, DOI 10.1007/s10617-005-1195-3
   Wang Z, 2008, 2008 INTERNATIONAL SYMPOSIUM ON INTELLIGENT INFORMATION TECHNOLOGY APPLICATION WORKSHOP: IITA 2008 WORKSHOPS, PROCEEDINGS, P251, DOI 10.1109/IITA.Workshops.2008.231
   [No title captured]
NR 26
TC 5
Z9 5
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAY 1
PY 2015
VL 102
BP 57
EP 75
DI 10.1016/j.scico.2015.01.001
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CE7UO
UT WOS:000352047500004
OA Green Published, Bronze
DA 2024-07-18
ER

PT J
AU De Koster, J
   Marr, S
   D'Hondt, T
   Van Cutsem, T
AF De Koster, Joeri
   Marr, Stefan
   D'Hondt, Theo
   Van Cutsem, Tom
TI Domains: Safe sharing among actors
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Actor model; Domains; Synchronization; Shared state; Race-free mutation
AB The actor model is a concurrency model that avoids issues such as deadlocks and data races by construction, and thus facilitates concurrent programming. While it has mainly been used for expressing distributed computations, it is equally useful for modeling concurrent computations in a single shared memory machine. In component based software, the actor model lends itself to divide the components naturally over different actors and use message-passing concurrency for the interaction between these components. The tradeoff is that the actor model sacrifices expressiveness and efficiency with respect to parallel access to shared state.
   This paper gives an overview of the disadvantages of the actor model when trying to express shared state and then formulates an extension of the actor model to solve these issues. Our solution proposes domains and synchronization views to solve the issues without compromising on the semantic properties of the actor model. Thus, the resulting concurrency model maintains deadlock-freedom and avoids low-level data races. (C) 2014 Elsevier B.V. All rights reserved.
C1 [De Koster, Joeri; Marr, Stefan; D'Hondt, Theo; Van Cutsem, Tom] Vrije Univ Brussel, B-1050 Brussels, Belgium.
C3 Vrije Universiteit Brussel
RP De Koster, J (corresponding author), Vrije Univ Brussel, Pl Laan 2, B-1050 Brussels, Belgium.
EM jdekoste@vub.ac.be; smarr@vub.ac.be; tjdhondt@vub.ac.be;
   tvcutsem@vub.ac.be
RI Marr, Stefan/JXN-7556-2024
OI Marr, Stefan/0000-0001-9059-5180; Van Cutsem, Tom/0000-0003-4116-4290
FU Institute for the Promotion of Innovation through Science and Technology
   in Flanders (IWT-Vlaanderen), Belgium; INNOVIRIS
FX Joeri De Koster is supported by a doctoral scholarship granted by the
   Institute for the Promotion of Innovation through Science and Technology
   in Flanders (IWT-Vlaanderen), Belgium.; Stefan Marr is supported by the
   MobiCra<SUP>NT</SUP> project funded by INNOV<SUP>IRIS</SUP>.
CR Agha G., 1986, Actors: a model of concurrent computation in distributed systems
   Agha G. A., 1997, Journal of Functional Programming, V7, P1, DOI 10.1017/S095679689700261X
   [Anonymous], 2011, WELCOME JUNGLE
   Armstrong Joe, 1996, Concurrent Programming in Erlang
   Astley M., 1998, ACTORFOUNDRY JAVA BA
   Baduel L, 2006, GRID COMPUTING: SOFTWARE ENVIRONMENTS AND TOOLS, P205, DOI 10.1007/1-84628-339-6_9
   Bocchino RL, 2009, ACM SIGPLAN NOTICES, V44, P97, DOI 10.1145/1639949.1640097
   BREWER EA, 2000, PODC, V7, DOI [10.1145/343477.343502, DOI 10.1145/343477.343502]
   Cutsem TV., 2012, OPERATIONAL SEMANTIC
   DEMSKY B, 2010, P INT C SOFTW ENG, P395
   FELLEISEN M, 1992, THEOR COMPUT SCI, V103, P235, DOI 10.1016/0304-3975(92)90014-7
   Gharachorloo K., 1990, Proceedings. The 17th Annual International Symposium on Computer Architecture (Cat. No.90CH2887-8), P15, DOI 10.1109/ISCA.1990.134503
   Gil J, 2009, LECT NOTES COMPUT SC, V5653, P495, DOI 10.1007/978-3-642-03013-0_23
   Haller P, 2009, THEOR COMPUT SCI, V410, P202, DOI 10.1016/j.tcs.2008.09.019
   Hoffman K, 2011, ACM SIGPLAN NOTICES, V46, P289, DOI 10.1145/2076021.2048091
   Hohpe G., 2006, OBJEKT SPEKTRUM, V2, P18
   JOHNSON RE, 1988, J OBJECT-ORIENT PROG, V1, P22
   Microsoft Corporation, 2008, AX PROGR LANG
   Miller MS, 2005, LECT NOTES COMPUT SC, V3705, P195, DOI 10.1007/11580850_12
   Schäfer J, 2010, LECT NOTES COMPUT SC, V6183, P275, DOI 10.1007/978-3-642-14107-2_13
   Scholliers C., 2010, 14 BRAZ S PROGR LANG
   Srinivasan S, 2008, LECT NOTES COMPUT SC, V5142, P104, DOI 10.1007/978-3-540-70592-5_6
   UNGAR D, 1987, SIGPLAN NOTICES, V22, P227, DOI 10.1145/38807.38828
   Van Cutsem T, 2007, P INT C CHIL COMPUT, P3, DOI 10.1109/SCCC.2007.12
   Varela C, 2001, ACM SIGPLAN NOTICES, V36, P20, DOI 10.1145/583960.583964
   Yonezawa A., 1986, ACM SIGPLAN NOTICES, V21, P268
NR 26
TC 3
Z9 4
U1 0
U2 2
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 1
PY 2015
VL 98
SI SI
BP 140
EP 158
DI 10.1016/j.scico.2014.02.008
PN 2
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AY7LF
UT WOS:000347741000003
OA Green Submitted, Green Accepted
DA 2024-07-18
ER

PT J
AU Jordan, H
   Botterweck, G
   Noll, J
   Butterfield, A
   Collier, R
AF Jordan, Howell
   Botterweck, Goetz
   Noll, John
   Butterfield, Andrew
   Collier, Rem
TI A feature model of actor, agent, functional, object, and procedural
   programming languages
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Programming languages; Programming language constructs; Agent-oriented
   programming; Functional programming; Object-oriented programming
ID TAXONOMY; SYSTEMS
AB The number of programming languages is large and steadily increasing. However, little structured information and empirical evidence is available to help software engineers assess the suitability of a language for a particular development project or software architecture.
   We argue that these shortages are partly due to a lack of high-level, objective programming language feature assessment criteria: existing advice to practitioners is often based on ill-defined notions of 'paradigms' [3, p. xiii] and 'orientation', while researchers lack a shared common basis for generalisation and synthesis of empirical results. This paper presents a feature model constructed from the programmer's perspective, which can be used to precisely compare general-purpose programming languages in the actor-oriented, agent-oriented, functional, object-oriented, and procedural categories. The feature model is derived from the existing literature on general concepts of programming, and validated with concrete mappings of well-known languages in each of these categories. The model is intended to act as a tool for both practitioners and researchers, to facilitate both further high-level comparative studies of programming languages, and detailed investigations of feature usage and efficacy in specific development contexts. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Jordan, Howell; Botterweck, Goetz; Noll, John] Univ Limerick, Limerick, Ireland.
   [Butterfield, Andrew] Univ Dublin Trinity Coll, Dublin 2, Ireland.
   [Collier, Rem] Univ Coll Dublin, Dublin 4, Ireland.
C3 University of Limerick; Trinity College Dublin; University College
   Dublin
RP Jordan, H (corresponding author), Univ Limerick, Limerick, Ireland.
EM howell.jordan@lero..ie; goetz.botterweck@lero.ie; john.noll@lero.ie;
   andrew.butterfield@scss.tcd.ie; rem.collier@ucd.ie
RI Collier, Rem/AAP-8700-2020
OI Collier, Rem/0000-0003-0319-0797; Butterfield,
   Andrew/0000-0002-2337-2101; Noll, John/0000-0002-4022-9374; Botterweck,
   Goetz/0000-0002-5556-1660
FU Science Foundation Ireland - the Irish Software Engineering Research
   Centre [10/CE/I1855]; Siemens Corporate Technology CT T CEE
FX The authors would like to thank Marc-Philippe Huget, Tom Arbuckle,
   Klaas-Jan Stol, Guy Wiener, and the anonymous reviewers of AGERE! 2011
   and Science of Computer Programming, for providing many insightful
   comments on earlier drafts of this paper. This work was supported, in
   part, by Science Foundation Ireland grant 10/CE/I1855 to Lero - the
   Irish Software Engineering Research Centre (http://www.lero.ie) and by
   Siemens Corporate Technology CT T CEE.
CR Agha G., 1986, Actors: a model of concurrent computation in distributed systems
   [Anonymous], 2008, 10031 IEEE
   [Anonymous], 2004, Concepts, techniques, and models of computer programming
   [Anonymous], ADV PROGRAMMING LANG
   [Anonymous], 1996, Structure and interpretation of computer programs
   [Anonymous], 2000, Generative programming: methods, tools, and applications
   Apel S, 2009, J OBJECT TECHNOL, V8, P49, DOI 10.5381/jot.2009.8.5.c5
   APPELBE WF, 1985, SOFTWARE PRACT EXPER, V15, P169, DOI 10.1002/spe.4380150205
   Appeltauer M., 2009, INT WORKSH CONT OR P
   Armstrong DJ, 2006, COMMUN ACM, V49, P123, DOI 10.1145/1113034.1113040
   Armstrong J, 2010, COMMUN ACM, V53, P68, DOI 10.1145/1810891.1810910
   Armstrong Joe, 2007, P 3 ACM SIGPLAN C HI, P6, DOI DOI 10.1145/1238844.1238850
   Baldwin C. Y., 2000, Design Rules: The Power of Modularity, V1
   Belkhouche B., 1988, Journal of Pascal, Ada & Modula-2, V7, P13
   Bordini R., 2007, PROGRAMMING MULTIAGE
   Bosch J., 2000, Design and Use of Software Architectures: Adopting and Evolving a Product-Line Approach
   BRACHA G, 1992, PROCEEDINGS OF THE 1992 INTERNATIONAL CONFERENCE ON COMPUTER LANGUAGES, P282, DOI 10.1109/ICCL.1992.185492
   CALLISS FW, 1991, SIGPLAN NOTICES, V26, P38, DOI 10.1145/122203.122206
   Clements P., 2002, Software product lines
   Connolly T.M., 2005, DATABASE SYSTEMS PRA, V4th
   Czarnecki K, 2006, IBM SYST J, V45, P621, DOI 10.1147/sj.453.0621
   Czarnecki K, 2008, SPLC 2008: 12TH INTERNATIONAL SOFTWARE PRODUCT LINE CONFERENCE, PROCEEDINGS, P22, DOI 10.1109/SPLC.2008.49
   Dastani M, 2005, MU S ART SOC SIM ORG, V15, P39, DOI 10.1007/0-387-26350-0_2
   Dennis Louise, 2007, Computational Logic in Multi-Agent Systems. 8th International Workshop, CLIMA VIII. Revised Selected and Invited Papers, P137
   Dennis L., 2007, LNCS LNAI, P124
   FEUER AR, 1982, COMPUT SURV, V14, P73, DOI 10.1145/356869.356872
   FISHER DA, 1978, COMPUTER, V11, P24, DOI 10.1109/C-M.1978.218092
   FISHER M., 2005, Lecture Notes in Computer Science, V3862, P3, DOI DOI 10.1007/116788231
   Frakes WB, 2005, IEEE T SOFTWARE ENG, V31, P529, DOI 10.1109/TSE.2005.85
   Gabbay D.M., 2003, Many-dimensional modal logics: theory and applications
   Hanus M, 2007, LECT NOTES COMPUT SC, V4670, P45, DOI 10.1007/978-3-540-74610-2_5
   Harris T, 2008, COMMUN ACM, V51, P91, DOI 10.1145/1378704.1378725
   Hewitt C., 1973, PROC 3 INT JOINT C A, P235, DOI 10.1145/359545.359563
   HUDAK P, 1989, COMPUT SURV, V21, P359, DOI 10.1145/72551.72554
   International Organization for Standardization, 2011, 9899 ISOIEC
   International Organization for Standardization, 1999, 9899 ISOIEC
   ISO/IEC, 1990, 9899 ISOIEC
   Jones S.P., 2007, Beautiful Code: Leading Programmers Explain How They Think, P385
   Jordan H., 2011, P COMP COL WORKSH DS, P147
   Kang K. C., 1990, Technical Report
   Karmani R.K., 2009, P 7 INT C PRINC PRAC, P11
   Kernighan B.W., 1988, The C Programming Language
   Kim CHP, 2008, GPCE'08: PROCEEDINGS OF THE ACM SIGPLAN SEVENTH INTERNATIONAL CONFERENCE ON GENERATIVE PROGRAMMING AND COMPONENT ENGINEERING, P23
   Krauter K, 2002, SOFTWARE PRACT EXPER, V32, P135, DOI 10.1002/spe.432
   Kuhn T. S., 1962, STRUCTURE SCI REVOLU
   Lämmel R, 2001, IEEE SOFTWARE, V18, P78, DOI 10.1109/52.965809
   Madden N., 2009, P 7 INT WORKSH PROGR
   MARTIN BE, 1991, COMPUTER, V24, P17, DOI 10.1109/2.84873
   Meier R, 2005, COMPUT J, V48, P602, DOI 10.1093/comjnl/bxh120
   Odell JJ, 2002, LECT NOTES COMPUT SC, V2585, P16
   PARNAS DL, 1972, COMMUN ACM, V15, P1053, DOI 10.1145/361598.361623
   Peyton Jones S. L., 1993, Conference Record of the Twentieth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P71, DOI 10.1145/158511.158524
   Pohl K., 2005, Software Product Line Engineering: Foundations, Principles and Techniques, V1, DOI [10.1007/3-540-28901-1, DOI 10.1007/3-540-28901-1]
   Rao A. S., 1996, Agents Breaking Away. 7th European Workshop on Modelling Autonomous Agents in a Multi-Agent World, MAAMAW '96 Proceedings, P42, DOI 10.1007/BFb0031845
   ROSEN JP, 1992, COMMUN ACM, V35, P71, DOI 10.1145/138844.138849
   Schwarz Andrew, 2007, Data Base for Advances in Information Systems, V38, P29, DOI 10.1145/1278253.1278259
   Scott ML, 2009, PROGRAMMING LANGUAGE PRAGMATICS, 3RD EDITION, P1
   SHAPIRO E, 1989, COMPUT SURV, V21, P412, DOI 10.1145/72551.72555
   SHAW M, 1981, SOFTWARE PRACT EXPER, V11, P1, DOI 10.1002/spe.4380110102
   She S., 2010, VaMoS, P45
   Sheard T, 2002, ACM SIGPLAN NOTICES, V37, P60, DOI 10.1145/636517.636528
   SHOHAM Y, 1993, ARTIF INTELL, V60, P51, DOI 10.1016/0004-3702(93)90034-9
   Strachey C., 2000, Higher-Order and Symbolic Computation, V13, P11, DOI 10.1023/A:1010000313106
   Svahnberg M, 2005, SOFTWARE PRACT EXPER, V35, P705, DOI 10.1002/spe.652
   Tratt L, 2009, ADV COMPUT, V77, P149, DOI 10.1016/S0065-2458(09)01205-4
   Turbak F, 2008, DESIGN CONCEPTS IN PROGRAMMING LANGUAGES, P1
   Van Roy P., 2009, New Computational Paradigms for Computer Music
   Visser E, 2002, LECT NOTES COMPUT SC, V2487, P299
   Weyns D, 2007, AUTON AGENT MULTI-AG, V14, P5, DOI 10.1007/s10458-006-0012-0
   Wheeler D. A., 1997, Ada Letters, V17, P88
   WICHMANN BA, 1982, COMPUT J, V25, P248, DOI 10.1093/comjnl/25.2.248
NR 71
TC 7
Z9 7
U1 0
U2 13
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 1
PY 2015
VL 98
SI SI
BP 120
EP 139
DI 10.1016/j.scico.2014.02.009
PN 2
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AY7LF
UT WOS:000347741000002
OA Bronze
DA 2024-07-18
ER

PT J
AU Preoteasa, V
AF Preoteasa, Viorel
TI Refinement algebra with dual operator
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 14th Brazilian Symposium on Formal Methods (SBMF)
CY SEP 26-30, 2011
CL Sao Paulo, BRAZIL
SP CNPq, Brazilian Sci & Technol Res Council, CAPES, Brazilian Higher Educ Fund Council, FAPESP, Sao Paulo Res Fdn, Google Inc, Univ Sao Paulo, Univ Presbiteriana Mackenzie
DE Algebra of programming; Refinement algebra; Refinement calculus; Data
   refinement; Hoare logic
ID KLEENE ALGEBRA; NONDETERMINISM
AB Algebras of imperative programming languages have been successful in reasoning about programs. In general an algebra of programs is an algebraic structure with programs as elements and with program compositions (sequential composition, choice, skip) as algebra operations. Various versions of these algebras were introduced to model partial correctness, total correctness, refinement, demonic choice, and other aspects. We introduce here an algebra which can be used to model total correctness, refinement, demonic and angelic choice. The basic model of our algebra are monotonic Boolean transformers (monotonic functions from a Boolean algebra to itself). (C) 2013 Elsevier B.V. All rights reserved.
C1 Abo Akad Univ, Dept Informat Technol, FIN-20520 Turku, Finland.
C3 Abo Akademi University
RP Preoteasa, V (corresponding author), Abo Akad Univ, Dept Informat Technol, Joukahaisenkatu 3-5 A, FIN-20520 Turku, Finland.
EM viorel.preoteasa@abo.fi
CR [Anonymous], 2002, Lect. Notes Comput. Sci
   [Anonymous], 1993, Program Verification: Fundamental Issues in Computer Science, DOI [10.1090/psapm/019/0235771, DOI 10.1090/PSAPM/019/0235771]
   [Anonymous], 1990, Predicate Calculus and Program Semantics
   APT KR, 1986, J ACM, V33, P724, DOI 10.1145/6490.6494
   Back R.-J., 1998, Refinement Calculus
   Back R.J.R., 1980, Mathematical Center Tracts, V131
   Back RJ, 2005, FORM ASP COMPUT, V17, P69, DOI 10.1007/s00165-004-0060-7
   BACK RJR, 1989, LECT NOTES COMPUT SC, V375, P139
   BACK RJR, 1990, ACTA INFORM, V27, P583, DOI 10.1007/BF00259469
   BACK RJR, 1978, THESIS U HELSINKI
   Charpentier M., 2000, Theoretical Computer Science. Exploring New Frontiers of Theoretical Informatics. International Conference IFIP TCS 2000. Proceedings (Lecture Notes in Computer Science Vol.1872), P580
   Dang HH, 2011, J LOGIC ALGEBR PROGR, V80, P221, DOI 10.1016/j.jlap.2011.04.003
   Davey B. A., 2002, INTRO LATTICES ORDER, V2nd, DOI DOI 10.1017/CBO9780511809088
   Desharnais J, 2006, ACM T COMPUT LOG, V7, P798, DOI 10.1145/1183278.1183285
   Desharnais J, 2011, LOG METH COMPUT SCI, V7, DOI 10.2168/LMCS-7(1:1)2011
   Dijkstra E., 1976, PRENTICE HALL SER AU
   DIJKSTRA EW, 1975, COMMUN ACM, V18, P453, DOI [10.1145/360933.360975, 10.1145/390016.808417]
   GUERREIRO P, 1982, LECTURE NOTES COMPUT, V137, P164, DOI DOI 10.1007/3-540-11494-7_12
   Hoare CART, 2009, LECT NOTES COMPUT SC, V5710, P399, DOI 10.1007/978-3-642-04081-8_27
   HOARE CAR, 1969, COMMUN ACM, V12, P576, DOI 10.1145/363235.363259
   KOZEN D, 1994, INFORM COMPUT, V110, P366, DOI 10.1006/inco.1994.1037
   Kozen D, 1997, ACM T PROGR LANG SYS, V19, P427, DOI 10.1145/256167.256195
   Martin CE, 2007, SCI COMPUT PROGRAM, V65, P140, DOI 10.1016/j.scico.2006.01.007
   Meinicke L, 2006, LECT NOTES COMPUT SC, V4014, P316, DOI 10.1007/11783596_19
   Meinicke L, 2010, FORM ASP COMPUT, V22, P3, DOI 10.1007/s00165-009-0111-1
   Möller B, 2006, THEOR COMPUT SCI, V351, P221, DOI 10.1016/j.tcs.2005.09.069
   Morgan C, 1990, PROGRAMMING SPECIFIC
   Preoteasa V., 2011, ARCH FORMAL PROOFS 2
   Preoteasa V., 2010, ARCH FORMAL PROOFS, P1
   PREOTEASA V, 2006, THESIS TURKU CTR COM
   Preoteasa V, 2011, LECT NOTES COMPUT SC, V7021, P140, DOI 10.1007/978-3-642-25032-3_10
   Preoteasa V, 2009, ELECTRON NOTES THEOR, V259, P143, DOI 10.1016/j.entcs.2009.12.022
   Preoteasa V, 2012, FORM ASP COMPUT, V24, P67, DOI 10.1007/s00165-011-0195-2
   Preoteasa V, 2009, THEOR COMPUT SCI, V410, P4216, DOI 10.1016/j.tcs.2009.05.016
   Solin K., 2007, THESIS TURKU CTR COM
   Solin K, 2006, LECT NOTES COMPUT SC, V4136, P373
   Solin K, 2012, STUD LOGICA, V100, P607, DOI 10.1007/s11225-012-9416-9
   Solin K, 2009, SCI COMPUT PROGRAM, V74, P654, DOI 10.1016/j.scico.2007.11.004
   Tarski A., 1955, PAC J MATH, V5, P285, DOI DOI 10.2140/PJM.1955.5.285
   von Wright J, 2004, SCI COMPUT PROGRAM, V51, P23, DOI 10.1016/j.scico.2003.09.002
   von Wright J, 2002, LECT NOTES COMPUT SC, V2386, P233
NR 41
TC 2
Z9 2
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 15
PY 2014
VL 92
BP 179
EP 210
DI 10.1016/j.scico.2013.07.002
PN B
PG 32
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA AK7HA
UT WOS:000338598100006
OA Bronze
DA 2024-07-18
ER

PT J
AU Wognsen, ER
   Karlsen, HS
   Olesen, MC
   Hansen, RR
AF Wognsen, Erik Ramsgaard
   Karlsen, Henrik Sondberg
   Olesen, Mads Chr
   Hansen, Rene Rydhof
TI Formalisation and analysis of Dalvik bytecode
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Dalvik; Android; Static analysis; Flow logic; Reflection
AB With the large, and rapidly increasing, number of smartphones based on the Android platform, combined with the open nature of the platform that allows "apps" to be downloaded and executed on the smartphone, misbehaving and malicious (malware) apps are set to become a serious problem. To counter this problem, automated tools for analysing and verifying apps are essential. Furthermore, to ensure high-fidelity of such tools, it is essential to formally specify both semantics and analyses. In this paper we present, to the best of our knowledge, the first formalisation of the complete Dalvik bytecode language including reflection features and the first formally specified control flow analysis for the language, including advanced control flow features such as dynamic dispatch, exceptions, and reflection. To determine which features to include in the formalisation and analysis, 1700 Android apps from the Google Play app market (formerly known as Android Market) were downloaded and examined. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Wognsen, Erik Ramsgaard; Karlsen, Henrik Sondberg; Olesen, Mads Chr; Hansen, Rene Rydhof] Aalborg Univ, Dept Comp Sci, Aalborg, Denmark.
C3 Aalborg University
RP Wognsen, ER (corresponding author), Aalborg Univ, Dept Comp Sci, Aalborg, Denmark.
EM erw@cs.aau.dk; henrik.karlsen@gmail.com; mchro@cs.aau.dk; rrh@cs.aau.dk
OI Hansen, Rene Rydhof/0000-0002-5688-6432
CR [Anonymous], FN19 DAIMI
   Bertelsen P., 1997, Semantics of Java Byte Code
   Blasco J., 2010, ANAL TROJAN SMS
   Chin E, 2011, P ANN INT C MOB SYST
   Christensen AS, 2003, LECT NOTES COMPUT SC, V2694, P1
   Dalsgaard Andreas E., 2012, Formal Modeling and Analysis of Timed Systems. Proceedings of the 10th International Conference, FORMATS 2012, P91, DOI 10.1007/978-3-642-33365-1_8
   Enck William., 2011, Proceedings of the 20th USENIX Conference on Security Symposium, SEC'11, P315
   Felt AP, 2011, PROCEEDINGS OF THE 18TH ACM CONFERENCE ON COMPUTER & COMMUNICATIONS SECURITY (CCS 11), P627
   Freund SN, 1999, ACM SIGPLAN NOTICES, V34, P147, DOI 10.1145/320385.320397
   Freund SN, 1998, ACM SIGPLAN NOTICES, V33, P310, DOI 10.1145/286942.286972
   Hansen R.R., 2005, THESIS TECHNICAL U D
   Jeon Jinseong., 2012, SYMDROID SYMBOLIC EX
   Karlsen H.S., 2012, IN P 7 WORKSH BYT SE
   Karlsen H.S., 2012, THESIS AALBORG U
   Kiezun A, 2009, P 2009 INT S SOFTW T
   Laarman Alfons, 2013, Computer Aided Verification. 25th International Conference, CAV 2013. Proceedings. LNCS 8044, P968, DOI 10.1007/978-3-642-39799-8_69
   LIVSHITS B, 2005, REFLECTION ANAL JAVA
   Luo TB, 2011, 27TH ANNUAL COMPUTER SECURITY APPLICATIONS CONFERENCE (ACSAC 2011), P343
   Manson J., 2004, 133 JSR FAQ
   Nielson F., 1999, Principles of Program Analysis
   Olesen M.C., 2013, THESIS AALBORG U
   Oracle Corporation, JSR 133 JAV MEM MOD
   Oracle Corporation, JAV PLATF STAND
   Payet É, 2012, INFORM SOFTWARE TECH, V54, P1192, DOI 10.1016/j.infsof.2012.05.003
   Saxena P, 2010, P IEEE S SECUR PRIV, P513, DOI 10.1109/SP.2010.38
   Siveroni IA, 2004, J LOGIC ALGEBR PROGR, V58, P3, DOI 10.1016/j.jlap.2003.07.003
   Spoto F, 2003, ACM T PROGR LANG SYS, V25, P578, DOI 10.1145/937563.937565
   SPOTO F, 2005, P 7 WORKSH FORM TECH
   Vallee-Rai R., 1999, CASCON 1999, P125
   Vitek Jan, 1992, LECT NOTES COMPUTER, V641
NR 30
TC 25
Z9 29
U1 0
U2 33
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 15
PY 2014
VL 92
SI SI
BP 25
EP 55
DI 10.1016/j.scico.2013.11.037
PN A
PG 31
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AK7GY
UT WOS:000338597900003
DA 2024-07-18
ER

PT J
AU Sauthoff, G
   Giegerich, R
AF Sauthoff, Georg
   Giegerich, Robert
TI Yield grammar analysis and product optimization in a domain-specific
   language for dynamic programming
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Algebraic dynamic programming; Domain-specific language; Regular tree
   grammar; Compiler optimization; RNA structure prediction
ID DESIGN
AB Dynamic programming algorithms are traditionally expressed by a set of matrix recurrences-a low level of abstraction, which renders the design of novel dynamic programming algorithms difficult and makes debugging cumbersome.
   Bellman's GAP is a declarative, domain-specific language, which supports dynamic programming over sequence data. It implements the algebraic style of dynamic programming and allows one to specify algorithms by combining so-called yield grammars with evaluation algebras. Products on algebras allow to create novel types of analyses from already given ones, without modifying tested components. Bellman's GAP extends the previous concepts of algebraic dynamic programming in several respects, such as an "interleaved" product operation and the analysis of multi-track input.
   Extensive analysis of the yield grammar and the evaluation algebras is required for generating efficient imperative code from the algebraic specification. This article gives an overview of the analyses required and presents several of them in detail. Measurements with "real-world" applications demonstrate the quality of the code produced. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Sauthoff, Georg; Giegerich, Robert] Univ Bielefeld, Tech Fak, D-33501 Bielefeld, Germany.
   [Giegerich, Robert] Ctr Biotechnol, D-33501 Bielefeld, Germany.
C3 University of Bielefeld
RP Giegerich, R (corresponding author), Univ Bielefeld, Tech Fak, D-33501 Bielefeld, Germany.
EM gsauthof@techfak.uni-bielefeld.de; robert@techfak.uni-bielefeld.de
CR Abouelhoda Mohamed I., 2009, Journal of Bioinformatics and Computational Biology, V7, P287, DOI 10.1142/S0219720009004060
   [Anonymous], 1998, BIOL SEQUENCE ANAL P
   Bellman R., 1957, Dynamic programming
   Bird Richard, 1997, Algebra of Programming
   Birney E, 1997, ISMB-97 - FIFTH INTERNATIONAL CONFERENCE ON INTELLIGENT SYSTEMS FOR MOLECULAR BIOLOGY, PROCEEDINGS, P56
   Cormen T.H., 1990, Introduction to Algorithms
   Eisner J, 2011, LECT NOTES COMPUT SC, V6702, P181
   Filardo Nathaniel Wesley., 2012, LEIBNIZ INT P INFORM, V17, P425
   Giegerich R, 2004, NUCLEIC ACIDS RES, V32, P4843, DOI 10.1093/nar/gkh779
   Giegerich R, 2004, SCI COMPUT PROGRAM, V51, P215, DOI 10.1016/j.scico.2003.12.005
   Giegerich R, 2002, LECT NOTES COMPUT SC, V2386, P1
   Giegerich R., 2006, Applied Computing 2006. 21st Annual ACM Symposium on Applied Computing, P1603, DOI 10.1145/1141277.1141653
   Giegerich R., 2011, P 11 WORKSH LANG DES
   Giegerich R., 1999, P 1 WORKSH ALG ASP A, P77
   Goodman J, 1999, COMPUT LINGUIST, V25, P573
   HOFACKER IL, 1994, MONATSH CHEM, V125, P167, DOI 10.1007/BF00818163
   Hudak P, 1998, FIFTH INTERNATIONAL CONFERENCE ON SOFTWARE REUSE - PROCEEDINGS, P134, DOI 10.1109/ICSR.1998.685738
   Hudak Paul., 2007, Proceedings of the third ACM SIGPLAN conference on History of programming languages, P12, DOI DOI 10.1145/1238844.1238856
   Janssen S, 2011, BMC BIOINFORMATICS, V12, DOI 10.1186/1471-2105-12-429
   Janssen S, 2010, BIOINFORMATICS, V26, P632, DOI 10.1093/bioinformatics/btq014
   Mernik M, 2005, ACM COMPUT SURV, V37, P316, DOI 10.1145/1118890.1118892
   Morihata A, 2011, NEW GENERAT COMPUT, V29, P31, DOI 10.1007/s00354-010-0098-4
   MORIN TL, 1982, J MATH ANAL APPL, V88, P665, DOI 10.1016/0022-247X(82)90223-2
   Pachter L., 2005, Algebraic Statistics for Computational Biology, V13
   Reeder J, 2004, BMC BIOINFORMATICS, V5, DOI 10.1186/1471-2105-5-104
   Reeder J, 2005, BMC BIOINFORMATICS, V6, DOI 10.1186/1471-2105-6-153
   Reeder J, 2007, BIOINFORMATICS, V23, pI392, DOI 10.1093/bioinformatics/btm179
   Reeder J, 2006, J BIOTECHNOL, V124, P41, DOI 10.1016/j.jbiotec.2006.01.034
   Sauthoff G., 2010, BELLMANS GAP LANGUAG
   Sauthoff G, 2011, PPDP 11 - PROCEEDINGS OF THE 2011 SYMPOSIUM ON PRINCIPLES AND PRACTICES OF DECLARATIVE PROGRAMMING, P29
   Siederdissen CHZ, 2012, ACM SIGPLAN NOTICES, V47, P215, DOI 10.1145/2398856.2364559
   Smith, 2005, P HUM LANG TECHN C C, P281, DOI [10.3115/1220575.1220611, DOI 10.3115/1220575.1220611]
   Steffen P, 2005, BMC BIOINFORMATICS, V6, DOI 10.1186/1471-2105-6-224
   Steffen P, 2006, INFORM COMPUT, V204, P1325, DOI 10.1016/j.ic.2006.02.006
   Tuncay Tekle K., 2010, P 12 INT ACM SIGPLAN, P35, DOI DOI 10.1145/1836089.1836094
   UNGER SH, 1968, COMMUN ACM, V11, P240, DOI 10.1145/362991.363001
   Voss B, 2006, BMC BIOL, V4, DOI 10.1186/1741-7007-4-5
   YOUNGER DH, 1967, INFORM CONTROL, V10, P189, DOI 10.1016/S0019-9958(67)80007-X
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
NR 42
TC 4
Z9 4
U1 0
U2 8
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUL 1
PY 2014
VL 87
BP 2
EP 22
DI 10.1016/j.scico.2013.09.011
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AH3GP
UT WOS:000336012000002
OA hybrid
DA 2024-07-18
ER

PT J
AU Bajracharya, S
   Ossher, J
   Lopes, C
AF Bajracharya, Sushi
   Ossher, Joel
   Lopes, Cristina
TI Sourcerer: An infrastructure for large-scale collection and analysis of
   open-source code
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Open source; Internet-scale code retrieval; Data mining; Sourcerer;
   Static analysis; Software information retrieval
ID SOFTWARE; SEARCH; REUSE
AB A large amount of open source code is now available online, presenting a great potential resource for software developers. This has motivated software engineering researchers to develop tools and techniques to allow developers to reap the benefits of these billions of lines of source code. However, collecting and analyzing such a large quantity of source code presents a number of challenges. Although the current generation of open source code search engines provides access to the source code in an aggregated repository, they generally fail to take advantage of the rich structural information contained in the code they index. This makes them significantly less useful than Sourcerer for building state-ofthe-art software engineering tools, as these tools often require access to both the structural and textual information available in source code.
   We have developed Sourcerer, an infrastructure for large-scale collection and analysis of open source code. By taking full advantage of the structural information extracted from source code in its repository, Sourcerer provides a foundation upon which state-ofthe-art search engines and related tools can easily be built. We describe the Sourcerer infrastructure, present the applications that we have built on top of it, and discuss how existing tools could benefit from using Sourcerer. (C) 2012 Elsevier B.V. All rights reserved.
C1 [Bajracharya, Sushi; Ossher, Joel; Lopes, Cristina] Univ Calif Irvine, Irvine, CA 92697 USA.
C3 University of California System; University of California Irvine
RP Ossher, J (corresponding author), Univ Calif Irvine, Irvine, CA 92697 USA.
EM sbajrach@ics.uci.edu; jossher@uci.edu; lopes@ics.uci.edu
CR [Anonymous], 2010, BLACK DUCKS WEB PAGE
   [Anonymous], 2010, WEB SITE FOR MEROBAS
   [Anonymous], 2010, WEB SITE FOR MAVEN
   [Anonymous], 2010, WEB SITE FOR KRUGLE
   [Anonymous], 2010, WEB PAGE ON APACHE L
   [Anonymous], 2010, LUCID IMAGINATION LU
   [Anonymous], 2010, WEB SITE FOR GOOGLE
   [Anonymous], 2010, WEB PAGE FOR SOURCER
   [Anonymous], 2010, WEBSITE FOR SOLR
   [Anonymous], 2010, WEB SITE FOR KODERS
   [Anonymous], 2007, P 22 IEEE ACM INT C
   [Anonymous], 2010, WEB PAGE FOR CODEGEN
   [Anonymous], 2010, WEB SITE FOR MAVENS
   Bajracharya S., 2007, TECHNICAL REPORT UCI
   Bajracharya S., 2010, SUITE 2010 SECOND IN
   Bajracharya S., 2006, COMP 21 ACM SIGPLAN, P681, DOI DOI 10.1145/1176617.1176671
   Bajracharya S., 2010, 18TH INTERNATIONAL S
   Bajracharya S, 2009, 2009 ICSE WORKSHOP ON SEARCH-DRIVEN DEVELOPMENT-USERS, INFRASTRUCTURE, TOOLS AND EVALUATION, P1, DOI 10.1109/SUITE.2009.5070010
   Baldi PF, 2008, ACM SIGPLAN NOTICES, V43, P543, DOI 10.1145/1449955.1449807
   Brandt J, 2009, CHI2009: PROCEEDINGS OF THE 27TH ANNUAL CHI CONFERENCE ON HUMAN FACTORS IN COMPUTING SYSTEMS, VOLS 1-4, P1589
   Bruch M, 2009, 7TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P213, DOI 10.1145/1595696.1595728
   Chatterjee S, 2009, LECT NOTES COMPUT SC, V5503, P385
   Chen YF, 1998, IEEE T SOFTWARE ENG, V24, P682, DOI 10.1109/32.713323
   Cubranic D, 2005, IEEE T SOFTWARE ENG, V31, P446, DOI 10.1109/TSE.2005.71
   Demeyer Serge, 2001, TECHNICAL REPORT
   Deshpande A., 2008, FOURTH CONFERENCE ON
   Eichberg M, 2004, 11TH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P182, DOI 10.1109/WCRE.2004.45
   German D. M., 2007, P 14 WORK C REV ENG, P130
   Gosling James., 2005, Language Specification, VThird
   Gousios G, 2009, PROC INT CONF SOFTW, P579, DOI 10.1109/ICSE.2009.5070560
   Grechanik M., 2007, PROC 4 IEEE INT WORK, P12, DOI DOI 10.1109/MSR.2007.9
   Hammond J., 2010, WHAT DEVELOPERS THIN
   Hoffmann R, 2007, UIST 2007: PROCEEDINGS OF THE 20TH ANNUAL ACM SYMPOSIUM ON USER INTERFACE SOFTWARE AND TECHNOLOGY, P13
   Holmes R, 2005, PROC INT CONF SOFTW, P117
   Holmes R, 2008, LECT NOTES COMPUT SC, V5030, P330, DOI 10.1007/978-3-540-68073-4_35
   Howison J, 2006, INT J INF TECHNOL WE, V1, P17, DOI 10.4018/jitwe.2006070102
   Hummel O, 2008, IEEE SOFTWARE, V25, P45, DOI 10.1109/MS.2008.110
   Inoue K, 2003, PROC INT CONF SOFTW, P14, DOI 10.1109/ICSE.2003.1201184
   Lemos OAL, 2011, INFORM SOFTWARE TECH, V53, P294, DOI 10.1016/j.infsof.2010.11.009
   Lemos O., 2009, 24TH ANNUAL ACM SYMP
   Lemos O.A.L., 2007, P 22 IEEE ACM INT C, P525, DOI 10.1145/1321631.1321726
   Lemos O.A. L., 2007, COMPANION 22 ACM SIG, P917, DOI [10.1145/1297846.1297944, DOI 10.1145/1297846.1297944]
   Linstead E., 2007, P 22 IEEE ACM INT C, P461, DOI [10.1145/1321631.1321709, DOI 10.1145/1321631.1321709]
   Linstead E., 2007, P 4 INT WORKSHOP MIN, P30
   Linstead E., 2008, ADV NEURAL INFORM PR, P929
   Linstead E, 2009, DATA MIN KNOWL DISC, V18, P300, DOI 10.1007/s10618-008-0118-x
   Linton M.A., 1983, TECHNICAL REPORT UCB
   LINTON MA, 1984, SIGPLAN NOTICES, V19, P132, DOI 10.1145/390011.808258
   Lopes C.V., 2010, UCI SOURCE CODE DATA
   Lungu M, 2010, SCI COMPUT PROGRAM, V75, P264, DOI 10.1016/j.scico.2009.09.004
   Mandelin D, 2005, ACM SIGPLAN NOTICES, V40, P48, DOI 10.1145/1064978.1065018
   Manning Christopher D., 2008, INTRO INFORM RETRIEV
   McCandless M., 2010, Lucene in Action
   Michail A, 2001, PROC INT CONF SOFTW, P827, DOI 10.1109/ICSE.2001.919192
   Ossher Joel, 2010, Proceedings of the 2010 7th IEEE Working Conference on Mining Software Repositories (MSR 2010), P130, DOI 10.1109/MSR.2010.5463346
   Ossher J, 2009, 2009 6TH IEEE INTERNATIONAL WORKING CONFERENCE ON MINING SOFTWARE REPOSITORIES, P183, DOI 10.1109/MSR.2009.5069501
   Page R.M. Lawrence., STANFORD DIGITAL LIB
   Sahavechaphan N, 2006, ACM SIGPLAN NOTICES, V41, P413, DOI 10.1145/1167515.1167508
   Thummalapenta Suresh, 2008, 2008 23rd IEEE/ACM International Conference on Automated Software Engineering, P327, DOI 10.1109/ASE.2008.43
NR 59
TC 56
Z9 62
U1 0
U2 22
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 1
PY 2014
VL 79
SI SI
BP 241
EP 259
DI 10.1016/j.scico.2012.04.008
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 246RH
UT WOS:000326556300017
OA hybrid
DA 2024-07-18
ER

PT J
AU Backhouse, R
   Chen, W
   Ferreira, JF
AF Backhouse, Roland
   Chen, Wei
   Ferreira, Joao F.
TI The algorithmics of solitaire-like games
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 10th International Conference on Mathematics of Program Construction
CY JUN, 2010
CL Quebec City, CANADA
SP Ctr Rech Math, Univ Laval
DE Solitaire; Tiling problems; Cyclotomic polynomials; Cyclotomic game;
   Replacement-set game; Seven-trees-in-one; Algorithm derivation;
   Invariants; Type isomorphism
AB One-person solitaire-like games are explored with a view to using them in teaching algorithmic problem solving. The key to understanding solutions to such games is the identification of invariant properties of polynomial arithmetic. We demonstrate this via three case studies: solitaire itself, tiling problems and a novel class of one-person games.
   The known classification of states of the game of (peg) solitaire into 16 equivalence classes is used to introduce the relevance of polynomial arithmetic. Then we give a novel algebraic formulation of the solution to a class of tiling problems. Finally, we introduce an infinite class of challenging one-person games, which we call "replacement-set games", inspired by earlier work by Chen and Backhouse on the relation between cyclotomic polynomials and generalisations of the seven-trees-in-one type isomorphism. We present an algorithm to solve arbitrary instances of replacement-set games and we show various ways of constructing infinite (solvable) classes of replacement-set games. (C) 2012 Elsevier B.V. All rights reserved.
C1 [Backhouse, Roland; Chen, Wei; Ferreira, Joao F.] Univ Nottingham, Sch Comp Sci, Nottingham NG8 1BB, England.
C3 University of Nottingham
RP Backhouse, R (corresponding author), Univ Nottingham, Sch Comp Sci, Nottingham NG8 1BB, England.
EM rcb@cs.nott.ac.uk; wzc@cs.nott.ac.uk; joao@joaoff.com
OI Backhouse, Roland/0000-0002-0140-8089; Ferreira,
   Joao/0000-0002-6612-9013
CR [Anonymous], CRELLES J
   Backhouse R, 2010, LECT NOTES COMPUT SC, V6120, P1, DOI 10.1007/978-3-642-13321-3_1
   Backhouse Roland, 2003, PROGRAM CONSTRUCTION
   Berlekamp E., 1982, WINNING WAYS, VII
   Berlekamp E.R., 1982, WINNING WAYS, V1-2
   BLASS A, 1995, J PURE APPL ALGEBRA, V103, P1, DOI 10.1016/0022-4049(95)00098-H
   Chen W., 2010, 7 TREES IN ONE CYCLO
   de Bruijn NicolaasG., 1972, J. of Recreational Math, V5, P133
   Dijkstra E.W., 1992, CHECKERS PROBLEM TOL
   Fiore M, 2004, ACM SIGPLAN NOTICES, V39, P77, DOI 10.1145/982962.964008
   GOLOMB S, 1965, POLYOMINOES
   Graham R. L, 1994, CONCRETE MATH FDN CO, V2nd
   Gries D., 1993, LOGICAL APPROACH DIS
   Isaacs I. M., 1994, GRADUATE STUDIES MAT
   LAWVERE FW, 1991, LECT NOTES MATH, V1488, P1
   Lawvere FW, 2004, THEOR COMPUT SCI, V316, P105, DOI 10.1016/j.tcs.2004.01.026
   MACKINNON N, 1989, MATH GAZ, V73, P210
   Piponi D., 2007, USING THERMONUCLEAR
   Piponi D., 2007, ARBOREAL ISOMORPHISM
NR 19
TC 1
Z9 1
U1 0
U2 8
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 1
PY 2013
VL 78
IS 11
BP 2029
EP 2046
DI 10.1016/j.scico.2012.07.007
PG 18
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 220QR
UT WOS:000324602500002
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Niqui, M
   Rutten, JJMM
AF Niqui, Milad
   Rutten, Jan J. M. M.
TI Stream processing coalgebraically
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 10th International Conference on Mathematics of Program Construction
CY JUN, 2010
CL Quebec City, CANADA
SP Ctr Rech Math, Univ Laval
DE Stream calculus; Dataflow programming; Coinduction; Rational stream;
   Algebraic stream; Stream circuit; Moessner's theorem
ID COINDUCTIVE CALCULUS
AB We study various operations for splitting, partitioning, projecting and merging streams of data. These operations are motivated by their use in dataflow programming and stream processing languages. We use the framework of stream calculus and stream circuits for defining and proving properties of such operations using behavioural differential equations and coinduction proof principles. As a featured example we give proofs of results, observed by Moessner, from elementary number theory using our framework. We study the invariance of certain well patterned classes of streams, namely rational and algebraic streams, under splitting and merging. Finally we show that stream circuits extended with gates for dyadic split and merge are expressive enough to realise some non-rational algebraic streams, thereby going beyond ordinary stream circuits. (C) 2013 Published by Elsevier B.V.
C1 [Rutten, Jan J. M. M.] Radboud Univ Nijmegen, NL-6525 ED Nijmegen, Netherlands.
C3 Radboud University Nijmegen
EM M.Niqui@cwi.nl; jan.Rutten@cwi.nl
CR Allouche J., 2003, Automatic sequences: theory, applications, generalisations
   [Anonymous], 2002, LECT NOTES MATH, DOI DOI 10.1007/B13861
   [Anonymous], 1974, PROC IFIP C 74
   Arbab F, 2004, MATH STRUCT COMP SCI, V14, P329, DOI 10.1017/S0960129504004153
   Berstel J., 1988, EATCS Monographs on Theoretical Computer Science, V12
   Broy M, 2001, THEOR COMPUT SCI, V258, P99, DOI 10.1016/S0304-3975(99)00322-9
   Christol G., 1979, Theoretical Computer Science, V9, P141, DOI 10.1016/0304-3975(79)90011-2
   Graham R. L, 1994, CONCRETE MATH FDN CO, V2nd
   Hinze R., 2008, IFL 2008 LE IN PRESS, V5836
   Hungerford T. W., 1980, GRADUATE TEXTS MATH, V73
   Kim J, 2008, LECT NOTES COMPUT SC, V5140, P253
   Lucanu D, 2007, LECT NOTES COMPUT SC, V4624, P372
   Mak R.H., 2008, THESIS TU EINDHOVEN
   Moessner A., 1952, SITZUNGSBER BAYER MN, V1951, P29
   Perron O., 1952, SITZUNGSBER BAYER MN, V1951, P31
   Rutten JJMM, 2006, ELECTRON NOTES THEOR, V160, P305, DOI 10.1016/j.entcs.2006.05.030
   Rutten J, 2008, LOG METH COMPUT SCI, V4, DOI 10.2168/LMCS-4(3:9)2008
   Rutten JJMM, 2005, THEOR COMPUT SCI, V343, P443, DOI 10.1016/j.tcs.2005.06.019
   Rutten JJMM, 2005, MATH STRUCT COMP SCI, V15, P93, DOI 10.1017/S0960129504004517
   Rutten JJMM, 2003, THEOR COMPUT SCI, V308, P1, DOI 10.1016/S0304-3975(02)00895-2
   Uustalu T, 2008, ELECTRON NOTES THEOR, V203, P263, DOI 10.1016/j.entcs.2008.05.029
   Wilf H. S., 1994, Generating Functionology
NR 22
TC 4
Z9 4
U1 0
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 1
PY 2013
VL 78
IS 11
BP 2192
EP 2215
DI 10.1016/j.scico.2012.07.013
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 220QR
UT WOS:000324602500008
OA Green Published, hybrid
DA 2024-07-18
ER

PT J
AU Oh, H
   Yi, K
AF Oh, Hakjoo
   Yi, Kwangkeun
TI Access-based abstract memory localization in static analysis
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Static analysis; Abstract interpretation; Localization
ID INTERPROCEDURAL SHAPE-ANALYSIS; EMBEDDED C-PROGRAMS; ALGORITHMIC
   MITIGATION; CHECKING; ANALYZER
AB On-the-fly localization of abstract memory states is vital for economical abstract interpretation of imperative programs. Such localization is sometimes called "abstract garbage collection" or "framing". In this article we present a new memory localization technique that is more effective than the conventional reachability-based approach. Our technique is based on a key observation that collecting the reachable memory parts is too conservative and the accessed parts are usually tiny subsets of the reachable part. Our technique first estimates, by an efficient pre-analysis, which parts of input states will be accessed during the analysis of each code block. Then the main analysis uses the access-set results to trim the memory entries before analyzing code blocks. In experiments with an industrial-strength global C static analyzer, the technique is applied right before analyzing each procedure's body and reduces the average analysis time and memory by 92.1% and 71.2%, respectively, without sacrificing the analysis precision.
   In addition, we present three extensions of access-based localization: (1) we generalize the idea and apply the localization more frequently such as at loop bodies and basic blocks as well as procedure bodies, additionally reducing analysis time by an average of 31.8%; (2) we present a technique to mitigate a performance problem of localization in handling recursive procedures, and show that this extension improves the average analysis time by 42%; (3) we show how to incorporate the access-based localization into relational numeric analyses. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Oh, Hakjoo; Yi, Kwangkeun] Seoul Natl Univ, Seoul 151, South Korea.
C3 Seoul National University (SNU)
RP Oh, H (corresponding author), Seoul Natl Univ, Seoul 151, South Korea.
EM pronto@ropas.snu.ac.kr
RI ‍, 오학주[ 부교수 / 컴퓨터학과 ]/AAW-5194-2020
FU Engineering Research Center of Excellence Program of Korea Ministry of
   Education, Science and Technology (MEST)/National Research Foundation of
   Korea (NRF) [2012-0000468]; Brain Korea 21 Project, School of Electrical
   Engineering and Computer Science, Seoul National University
FX This work was supported by the Engineering Research Center of Excellence
   Program of Korea Ministry of Education, Science and Technology
   (MEST)/National Research Foundation of Korea (NRF) (Grant 2012-0000468)
   and Brain Korea 21 Project, School of Electrical Engineering and
   Computer Science, Seoul National University in 2012.
CR Adams S, 2002, LECT NOTES COMPUT SC, V2477, P230
   Allamigeon X, 2006, LECT NOTES COMPUT SC, V4134, P35
   Balakrishnan G, 2004, LECT NOTES COMPUT SC, V2985, P5
   Berdine J, 2005, LECT NOTES COMPUT SC, V3780, P52
   Blanchet B, 2003, ACM SIGPLAN NOTICES, V38, P196, DOI 10.1145/780822.781153
   Brodel F, 1993, DINAMIKA KAPITALIZMA, P128
   Calcagno C, 2009, ACM SIGPLAN NOTICES, V44, P289, DOI 10.1145/1594834.1480917
   CHEN LL, 1994, P ACM C SUP, P98
   Chong S, 2003, LECT NOTES COMPUT SC, V2694, P463
   COUSOT P, 1992, LECT NOTES COMPUT SC, V631, P269, DOI 10.1007/3-540-55844-6_142
   Cousot P, 2009, FORM METHOD SYST DES, V35, P229, DOI 10.1007/s10703-009-0089-6
   Cousot Patrick, 1976, P 2 INT S PROGRAMMIN
   Gotsman A, 2006, LECT NOTES COMPUT SC, V4134, P240
   Hakjoo Oh, 2011, LECT NOTES COMPUTER, V7078, P50
   Harrison III Williams L., 1989, THESIS U ILLINOIS UR
   Jagannathan Suresh., 1998, POPL, P329
   Jeannet B, 2009, LECT NOTES COMPUT SC, V5643, P661, DOI 10.1007/978-3-642-02658-4_52
   Jung YB, 2005, LECT NOTES COMPUT SC, V3672, P203
   Jung Y, 2008, ISMM'08: PROCEEDINGS OF THE 2008 INTERNATIONAL SYMPOSIUM ON MEMORY MANAGEMENT, P131
   Marron M, 2008, LECT NOTES COMPUT SC, V4959, P245
   Might M., 2006, P 11 ACM SIGPLAN INT, P13, DOI DOI 10.1016/J.TCS.2006.12.031
   Might M, 2007, LECT NOTES COMPUT SC, V4349, P59
   Mine A., 2006, Higher-Order and Symbolic Computation, V19, P31, DOI 10.1007/s10990-006-8609-1
   Oh H, 2011, LECT NOTES COMPUT SC, V6538, P356, DOI 10.1007/978-3-642-18275-4_25
   Oh H, 2010, SOFTWARE PRACT EXPER, V40, P585, DOI 10.1002/spe.969
   Oh H, 2009, LECT NOTES COMPUT SC, V5904, P14
   Patrick Cousot, 1977, P ACM SIGPLAN SIGACT, P238
   Pioli A., 1999, TECHNICAL REPORT
   Rinetzky N, 2005, LECT NOTES COMPUT SC, V3672, P284
   Rinetzky N, 2005, ACM SIGPLAN NOTICES, V40, P296, DOI 10.1145/1047659.1040330
   Shin Jaeho, 2006, ROPAS200632 SEOUL NA
   Venet A, 2004, ACM SIGPLAN NOTICES, V39, P231, DOI 10.1145/996893.996869
   Xu GQ, 2009, LECT NOTES COMPUT SC, V5653, P98
   Yang H, 2008, LECT NOTES COMPUT SC, V5123, P385
   Yang Hongseok, 2007, RR0710 QUEEN MARY U
   Yongin Jhee, 2008, WORKSH 30 YEARS ABST
   [No title captured]
NR 37
TC 1
Z9 1
U1 0
U2 8
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 1
PY 2013
VL 78
IS 9
BP 1701
EP 1727
DI 10.1016/j.scico.2013.04.002
PG 27
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 179QJ
UT WOS:000321536100025
DA 2024-07-18
ER

PT J
AU Bettini, L
   Damiani, F
   Schaefer, I
   Strocco, F
AF Bettini, Lorenzo
   Damiani, Ferruccio
   Schaefer, Ina
   Strocco, Fabio
TI TRAITRECORDJ: A programming language with traits and records
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Java; Trait; Type system; Implementation; Eclipse
ID MINIMAL CORE CALCULUS; JAVA; EXTENSION; DESIGN
AB Traits have been designed as units for fine-grained reuse of behavior in the object-oriented paradigm. Records have been devised to complement traits for fine-grained reuse of state. In this paper, we present the language TRAITRECORDJ, a JAVA dialect with records and traits. Records and traits can be composed by explicit linguistic operations, allowing code manipulations to achieve fine-grained code reuse. Classes are assembled from (composite) records and traits and instantiated to generate objects. We introduce the language through examples and illustrate the prototypical implementation of TRAITRECORDJ using XTEXT, an Eclipse framework for the development of programming languages as well as other domain-specific languages. Our implementation comprises an Eclipse-based editor for TRAITRECORDJ with typical IDE functionalities, and a stand-alone compiler, which translates TRAITRECORDJ programs into standard JAVA programs. As a case study, we present the TRAITRECORDJ implementation of a part of the software used in a web-based information system previously implemented in JAVA. (C) 2011 Elsevier B.V. All rights reserved.
C1 [Bettini, Lorenzo; Damiani, Ferruccio; Strocco, Fabio] Univ Turin, Dipartimento Informat, I-10124 Turin, Italy.
   [Schaefer, Ina] Tech Univ Carolo Wilhelmina Braunschweig, Braunschweig, Germany.
C3 University of Turin; Braunschweig University of Technology
RP Bettini, L (corresponding author), Univ Turin, Dipartimento Informat, I-10124 Turin, Italy.
EM bettini@di.unito.it
RI Ferruccio, Damiani/D-2383-2011
OI Ferruccio, Damiani/0000-0001-8109-1706; Bettini,
   Lorenzo/0000-0002-4481-8096
FU Ateneo Italo-Tedesco/Deutsch-Italienisches Hochschulzentrum (Vigoni
   project "Language constructs and type systems for object oriented
   program components"); Deutsche Forschungsgemeinschaft (DFG); EU
   [FP7-231620]; MIUR PRIN
FX This work has been partially supported by the Ateneo
   Italo-Tedesco/Deutsch-Italienisches Hochschulzentrum (Vigoni project
   "Language constructs and type systems for object oriented program
   components"), the Deutsche Forschungsgemeinschaft (DFG), the EU project
   FP7-231620 HATS: Highly Adaptable and Trustworthy Software using Formal
   Models (http://www.hats-project.eu), and the MIUR PRIN 2009 project
   DISCO: Distribution, Interaction, Specification, Composition for Object
   Systems.
CR Allen Eric., 2008, FORTRESS LANGUAGE SP
   Ancona D, 2003, ACM T PROGR LANG SYS, V25, P641, DOI 10.1145/937563.937567
   [Anonymous], 1997, Object-oriented software construction
   [Anonymous], 2007, COMPILERS PRINCIPLES
   [Anonymous], 1998, P 25 ACM SIGPLAN SIG, DOI DOI 10.1145/268946.268961
   Batory D, 1998, FIFTH INTERNATIONAL CONFERENCE ON SOFTWARE REUSE - PROCEEDINGS, P143, DOI 10.1109/ICSR.1998.685739
   Beck Kent, 1999, Extreme Programming Explained: Embrace Change
   Bergel A, 2008, COMPUT LANG SYST STR, V34, P83, DOI 10.1016/j.cl.2007.05.003
   Bettini L., 2011, 1352011 RT U TOR DIP
   Bettini L, 2008, PPPJ, P149, DOI [10.1145/1411732.1411753, DOI 10.1145/1411732.1411753]
   Bettini Lorenzo., 2010, Proceedings of the 2010 ACM Symposium on Applied Computing, SAC '10, P2096
   Bierman G., 2003, 563 U CAMBR COMP LAB
   Black A.P., 2007, Squeak by Example
   Black A.P., 2009, PHARO EXAMPLE
   Black AP, 2003, ACM SIGPLAN NOTICES, V38, P47, DOI 10.1145/949343.949311
   Bono V., 2007, ELECT P FTFJP
   Bono V, 2008, INT FED INFO PROC, V273, P367
   BRACHA G, 1990, SIGPLAN NOTICES, V25, P303, DOI 10.1145/97946.97982
   Bracha G., 2016, The Dart Programming Language. Always learning
   Bravenboer M, 2006, LECT NOTES COMPUT SC, V4143, P297
   Cassou D., 2007, ICDL, P50
   Cassou D, 2009, COMPUT LANG SYST STR, V35, P2, DOI 10.1016/j.cl.2008.05.004
   Cazzola W., 2010, ECOOP WORKSH REFL AO
   Charles P, 2009, ACM SIGPLAN NOTICES, V44, P191, DOI 10.1145/1639949.1640104
   Clark T., 2008, CETEVA
   COOK WR, 1990, CONFERENCE RECORD OF THE SEVENTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P125, DOI 10.1145/96709.96721
   Dovland J., 2011, SCI COMPUTER PROGRAM, V76
   Ducasse S, 2006, ACM T PROGR LANG SYS, V28, P331, DOI 10.1145/1119479.1119483
   Fisher K., 2004, FOOL
   Fowler M., 2008, LANGUAGE WORKBENCH A
   Gamma E., 1994, Design patterns: Elements of reusable object-oriented software
   Heidenreich F, 2009, LECT NOTES COMPUT SC, V5562, P114, DOI 10.1007/978-3-642-02674-4_9
   HENDLER J, 1986, SIGPLAN NOTICES, V21, P98, DOI 10.1145/323648.323748
   Igarashi A, 2001, ACM T PROGR LANG SYS, V23, P396, DOI 10.1145/503502.503505
   Krahn Holger, 2010, International Journal on Software Tools for Technology Transfer, V12, P353, DOI 10.1007/s10009-010-0142-1
   Lagorio G., 2009, FOOL
   Lagorio G, 2009, LECT NOTES COMPUT SC, V5653, P244, DOI 10.1007/978-3-642-03013-0_12
   Lienhard A., 2005, PROC 20 IEEEACM INT, P66
   Liguori L., 2008, ACM T PROGR LANG SYS, V30
   Murphy-Hill EmersonR., 2005, OOPSLA 05, P282, DOI 10.1145/1094855.1094963
   Nierstrasz O, 2006, J OBJECT TECHNOL, V5, P129, DOI 10.5381/jot.2006.5.4.a4
   Northrop L., 2001, SOFTWARE PRODUCT LIN
   Odersky M., 2007, TECHNICAL REPORT
   Parr T., 2007, PRAGMATIC PROGRA MAY
   Pfeiffer M., 2008, P 8 OOPSLA WORKSH DO, P1
   Quitslund P. J., 2004, CSE04005 OGI SCH SCI
   Quitslund P. J., 2004, P 2004 OOPSLA WORKSH, P37
   Remy D, 1998, THEOR PRACT OBJ SYST, V4, P27, DOI 10.1002/(SICI)1096-9942(1998)4:1<27::AID-TAPO3>3.0.CO;2-4
   Renggli L, 2010, LECT NOTES COMPUT SC, V5969, P274
   Reppy J., 2006, FOOL WOOD
   Reppy J, 2007, LECT NOTES COMPUT SC, V4609, P373
   Sauer T., 2006, MULT WIRTSCH 2006 MK, P349
   Schärli N, 2003, LECT NOTES COMPUT SC, V2743, P248
   Smith C, 2005, LECT NOTES COMPUT SC, V3586, P453
   SNYDER A, 1986, SIGPLAN NOTICES, V21, P38, DOI 10.1145/960112.28702
   Steinberg D., 2008, EMF: Eclipse Modeling Framework, Vsecond
   Strnisa R, 2007, ACM SIGPLAN NOTICES, V42, P499, DOI 10.1145/1297105.1297064
   Strocco F., 2009, THESIS U TORINO
   Ungar D., 1991, LISP and Symbolic Computation, V4, P223, DOI 10.1007/BF01806107
   VanLimberghen M, 1996, OBJECT ORIENTED SYST, V3, P1
   Xu H, 2010, LECT NOTES COMPUT SC, V6141, P192, DOI 10.1007/978-3-642-13953-6_11
NR 61
TC 13
Z9 13
U1 0
U2 4
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAY 1
PY 2013
VL 78
IS 5
BP 521
EP 541
DI 10.1016/j.scico.2011.06.007
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 125MS
UT WOS:000317544500007
OA Green Submitted, Green Published
DA 2024-07-18
ER

PT J
AU Clark, JA
   Dan, HT
   Hierons, RM
AF Clark, John A.
   Dan, Haitao
   Hierons, Robert M.
TI Semantic mutation testing
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Mutation testing; Semantics; Misunderstandings
AB Mutation testing is a powerful and flexible test technique. Traditional mutation testing makes a small change to the syntax of a description (usually a program) in order to create a mutant. A test suite is considered to be good if it distinguishes between the original description and all of the (functionally non-equivalent) mutants. These mutants can be seen as representing potential small slips and thus mutation testing aims to produce a test suite that is good at finding such slips. It has also been argued that a test suite that finds such small changes is likely to find larger changes. This paper describes a new approach to mutation testing, called semantic mutation testing. Rather than mutate the description, semantic mutation testing mutates the semantics of the language in which the description is written. The mutations of the semantics of the language represent possible misunderstandings of the description language and thus capture a different class of faults. Since the likely misunderstandings are highly context dependent, this context should be used to determine which semantic mutants should be produced. The approach is illustrated through examples with statecharts and C code. The paper also describes a semantic mutation testing tool for C and the results of experiments that investigated the nature of some semantic mutation operators for C. (C) 2011 Elsevier B.V. All rights reserved.
C1 [Clark, John A.] Univ York, Dept Comp Sci, York YO10 5GH, N Yorkshire, England.
   [Dan, Haitao; Hierons, Robert M.] Brunel Univ, Sch Informat Syst Comp & Math, Uxbridge UB8 3PH, Middx, England.
C3 University of York - UK; Brunel University
RP Hierons, RM (corresponding author), Brunel Univ, Sch Informat Syst Comp & Math, Uxbridge UB8 3PH, Middx, England.
EM jac@cs.york.ac.uk; haitao.dan@brunel.ac.uk; rob.hierons@brunel.ac.uk
OI Hierons, Robert/0000-0002-4771-1446
FU EPSRC [EP/G043604/1, EP/G04354X/1] Funding Source: UKRI
CR Alur R, 1999, LECT NOTES COMPUT SC, V1664, P114
   Andrews JH, 2005, PROC INT CONF SOFTW, P402, DOI 10.1145/1062455.1062530
   [Anonymous], MUTATION
   [Anonymous], 1994, LNCS
   [Anonymous], 1988, AX3J1188090 ANSI, P5
   [Anonymous], 2002, I 13568 INFORM TECHN
   [Anonymous], ACM T SOFTWARE ENG M
   Baldwin D., 276 YAL U DEP COMP S
   BARNES J., 1997, ADA 95 RATIONALE LAN
   Baudry B, 2005, SOFTW TEST VERIF REL, V15, P73, DOI 10.1002/stvr.313
   BRILLIANT SS, 1990, IEEE T SOFTWARE ENG, V16, P238, DOI 10.1109/32.44387
   Budd T. A., 1981, Computer Program Testing. Proceedings of the Summer School on Computer Program Testing, P129
   Clark John A., 2010, Proceedings of the IEEE Third International Conference on Software Testing Verification and Validation - Workshops (ICSTW 2010), P100, DOI 10.1109/ICSTW.2010.8
   Cordy J.R., 2004, Electron. Notes Theor. Comput. Sci, V110, P3, DOI [DOI 10.1016/J.ENTCS.2004.11.006, 10.1016/j.entcs.2004.11.006, https://doi.org/10.1016/j.entcs.2004.11.006]
   Do HS, 2005, EMPIR SOFTW ENG, V10, P405, DOI 10.1007/s10664-005-3861-2
   Eshuis R, 2000, INT FED INFO PROC, V49, P121
   Fabbri S. C. P. F., 1999, Proceedings 10th International Symposium on Software Reliability Engineering (Cat. No.PR00443), P210, DOI 10.1109/ISSRE.1999.809326
   Frankl P. G., 1998, Software Engineering Notes, V23, P153, DOI 10.1145/291252.288298
   Frankl PG, 1997, J SYST SOFTWARE, V38, P235, DOI 10.1016/S0164-1212(96)00154-9
   Gosling J., 2005, Java Language Specification, Vthird
   HAMLET RG, 1977, IEEE T SOFTWARE ENG, V3, P279, DOI 10.1109/TSE.1977.231145
   Harel D., 1996, ACM Transactions on Software Engineering and Methodology, V5, P293, DOI 10.1145/235321.235322
   Harel D., 1998, MODELING REACTIVE SY
   Harman M, 2001, KLUW INT S ADV DATA, V24, P5
   Hierons R.M., 1999, J SOFTW TEST VERIFIC, V9, P233, DOI 10.1002/(SICI)1099-1689(199912)9:43.0.CO;2-3
   HOWDEN WE, 1982, IEEE T SOFTWARE ENG, V8, P371, DOI 10.1109/TSE.1982.235571
   ISO, 1999, 98991999 ISO ISOIEC
   Kapoor K., 2004, FORMAL APPROACHES SO, P195
   Kim Sun-woo., 1999, 28 JAIIO: Symposium on Software Technology (SoST'99), P72
   KING KN, 1991, SOFTWARE PRACT EXPER, V21, P685, DOI 10.1002/spe.4380210704
   Ma Y.S., 2006, 28 INT C SOFTW ENG I
   Mathur A. P., 1994, Software Testing, Verification and Reliability, V4, P9, DOI 10.1002/stvr.4370040104
   MathWorks Inc, 2001, STAT US GUID
   McMinn P., 2009, PROC 11 ANN C GENET, P1689, DOI [10.1145/1569901.1570127, DOI 10.1145/1569901.1570127]
   Mresa E. S., 1999, Software Testing, Verification and Reliability, V9, P205, DOI 10.1002/(SICI)1099-1689(199912)9:4<205::AID-STVR186>3.0.CO;2-X
   Namin AS, 2009, ISSTA 2009: INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, P57
   Namin Akbar Siami, 2006, 2 WORKSH MUT AN MUT
   Offut A. J., 1997, Software Testing, Verification and Reliability, V7, P165, DOI 10.1002/(SICI)1099-1689(199709)7:3<165::AID-STVR143>3.0.CO;2-U
   Offutt A. J., 1996, ACM Transactions on Software Engineering and Methodology, V5, P99, DOI 10.1145/227607.227610
   Offutt A. J., 1996, SIGSOFT Software Engineering Notes, V21, P195, DOI [10.1145/229000.226317, 10.1145/226295.226317]
   Offutt A. J., 1994, Software Testing, Verification and Reliability, V4, P131, DOI 10.1002/stvr.4370040303
   Offutt AJ, 1996, COMPASS '96 - PROCEEDINGS OF THE ELEVENTH ANNUAL CONFERENCE ON COMPUTER ASSURANCE, P224, DOI 10.1109/CMPASS.1996.507890
   OFFUTT AJ, 1994, IEEE T SOFTWARE ENG, V20, P337, DOI 10.1109/32.286422
   OFFUTT AJ, 1993, PROC INT CONF SOFTW, P100, DOI 10.1109/ICSE.1993.346062
   Offutt AJ, 1996, SOFTWARE PRACT EXPER, V26, P165, DOI 10.1002/(SICI)1097-024X(199602)26:2<165::AID-SPE5>3.0.CO;2-K
   Safer C, 1994, DEV SOFTWARE HIGH IN
   Sayward F.G., 1978, IEEE COMPUT, V11, P31
   SIDHU DP, 1989, IEEE T SOFTWARE ENG, V15, P413, DOI 10.1109/32.16602
   Spafford Eugene, 1989, DESIGN MUTANT OPERAT
   SRIVRATANAKUL J, 2003, 12 IEEE AS PAC SOFTW
   Stroustrup B., 1991, C PROGRAMMING LANGUA, VSecond
   Sugeta T, 2004, LECT NOTES COMPUT SC, V2978, P193
   Voas J.M., 1998, SOFTWARE FAULT INJEC
   Wah KSHT, 2000, SOFTW TEST VERIF REL, V10, P3, DOI 10.1002/(SICI)1099-1689(200003)10:1<3::AID-STVR196>3.0.CO;2-P
   Wong WE, 1993, THESIS PURDUE U
   Woodward M.R., 1988, P 2 WORKSH SOFTW TES
   WOODWARD MR, 1993, SOFTWARE ENG J, V8, P211, DOI 10.1049/sej.1993.0027
   Zhan Y, 2005, GECCO 2005: GENETIC AND EVOLUTIONARY COMPUTATION CONFERENCE, VOLS 1 AND 2, P1061
   [No title captured]
NR 59
TC 15
Z9 16
U1 0
U2 3
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD APR 1
PY 2013
VL 78
IS 4
BP 345
EP 363
DI 10.1016/j.scico.2011.03.011
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 104GA
UT WOS:000315978700002
OA Green Accepted, Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Acciai, L
   Boreale, M
   Zavattaro, G
AF Acciai, Lucia
   Boreale, Michele
   Zavattaro, Gianluigi
TI Behavioural contracts with request-response operations
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Service-oriented computing; Behavioural contracts; Client-service
   compliance; Expressiveness
ID SERVICE; SYSTEM
AB In the context of service-oriented computing, behavioural contracts are abstract descriptions of the message-passing behaviour of services. They can be used to check properties of service compositions such as, for instance, client-service compliance. To the best of our knowledge, previous formal models for contracts consider unidirectional send and receive operations. In this paper, we present two models for contracts with bidirectional request-response operations, in the presence of unboundedly many instances of both clients and servers. The first model takes inspiration from the abstract service interface language WSCL, the second one is inspired by Abstract WS-BPEL. We prove that two different notions of client-service compliance (one based on client satisfaction and another one requiring mutual completion) are decidable in the former while they are undecidable in the latter, thus showing an interesting expressiveness gap between the modelling of request-response operations in WSCL and in Abstract WS-BPEL. (C) 2011 Elsevier B.V. All rights reserved.
C1 [Acciai, Lucia; Boreale, Michele] Univ Florence, Dipartimento Sistemi & Informat, I-50121 Florence, Italy.
   [Zavattaro, Gianluigi] Univ Bologna, Dipartimento Sci Informaz, I-40126 Bologna, Italy.
C3 University of Florence; University of Bologna
RP Acciai, L (corresponding author), Univ Florence, Dipartimento Sistemi & Informat, I-50121 Florence, Italy.
EM lucia.acciai@unifi.it
OI Boreale, Michele/0000-0002-1972-7491
FU EU; HATS
FX The third author is partly supported by the EU integrated projects HATS
   and is a member of the joint INRIA/University of Bologna Research Team
   FOCUS.
CR Acciai L, 2008, LECT NOTES COMPUT SC, V5065, P642, DOI 10.1007/978-3-540-68679-8_40
   Acciai L, 2010, INFORM COMPUT, V208, P1118, DOI 10.1016/j.ic.2009.10.011
   Acciai L, 2010, LECT NOTES COMPUT SC, V6116, P16, DOI 10.1007/978-3-642-13414-2_2
   [Anonymous], 2005, WEB SERV CHOR DESCR
   [Anonymous], WEB SERV DESCR LANG
   Boreale M, 2006, LECT NOTES COMPUT SC, V4184, P38
   Boreale M, 2008, LECT NOTES COMPUT SC, V5051, P19, DOI 10.1007/978-3-540-68863-1_3
   Boreale M, 2011, LECT NOTES COMPUT SC, V6582, P282, DOI 10.1007/978-3-642-20401-2_13
   Bravetti M, 2007, LECT NOTES COMPUT SC, V4829, P34
   Bravetti M, 2007, LECT NOTES COMPUT SC, V4767, P207
   Bravetti M, 2007, LECT NOTES COMPUT SC, V4467, P96
   Busi N, 2008, J LOGIC ALGEBR PROGR, V75, P52, DOI 10.1016/j.jlap.2007.06.003
   Carbone M, 2007, LECT NOTES COMPUT SC, V4421, P2
   Carpineti S, 2006, LECT NOTES COMPUT SC, V4184, P148
   Castagna G, 2008, ACM SIGPLAN NOTICES, V43, P261, DOI 10.1145/1328897.1328471
   Decker G, 2007, 2007 IEEE INTERNATIONAL CONFERENCE ON WEB SERVICES, PROCEEDINGS, P296
   DENICOLA R, 1984, THEOR COMPUT SCI, V34, P83, DOI 10.1016/0304-3975(84)90113-0
   Janicki R., 1994, Journal of Information Processing and Cybernetics, V30, P143
   Esparza J., 1997, Fundamenta Informaticae, V31, P13
   Higman G., 1952, Proc. Lond. Math. Soc., V3, P326
   Honda K, 1998, LECT NOTES COMPUT SC, V1381, P122, DOI 10.1007/BFb0053567
   Honda K., 2008, P POPL 08
   Igarashi A, 2004, THEOR COMPUT SCI, V311, P121, DOI 10.1016/S0304-3975(03)00325-6
   Karp R. M., 1969, J COMPUT SYST SCI, V3, P147, DOI DOI 10.1016/S0022-0000(69)80011-5
   Laneve C, 2007, LECT NOTES COMPUT SC, V4703, P212
   Milner R., 1989, Communication and concurrency
   MILNER R, 1992, INFORM COMPUT, V100, P1, DOI [10.1016/0890-5401(92)90008-4, 10.1016/0890-5401(92)90009-5]
   Minsky M., 1967, Computation: finite and infinite machines
   Mooij AJ, 2010, J LOGIC ALGEBR PROGR, V79, P233, DOI 10.1016/j.jlap.2009.12.001
   OASIS, 2007, Web Services Business Process Execution Language Version 2.0
   Petri C. A., 1962, dissertation
   Rensink A, 2007, INFORM COMPUT, V205, P125, DOI 10.1016/j.ic.2006.06.002
   van der Aalst WMP, 2010, COMPUT J, V53, P90, DOI 10.1093/comjnl/bxn064
   Vasconcelos VT, 2009, LECT NOTES COMPUT SC, V5569, P158
   W3C, 2002, WEB SERV CHOR INT WS
   W3C, 2002, WEB SERV CONV LANG W
NR 36
TC 5
Z9 5
U1 0
U2 8
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 1
PY 2013
VL 78
IS 2
SI SI
BP 248
EP 267
DI 10.1016/j.scico.2011.10.007
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 056WS
UT WOS:000312522700006
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Karus, S
   Dumas, M
AF Karus, Siim
   Dumas, Marlon
TI Predicting the maintainability of XSL transformations
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Software maintenance; XML; XSLT; Software metrics
ID SOFTWARE EVOLUTION; CODE CHURN; DELTA
AB XSLT is a popular language for implementing both presentation templates in Web applications as well as document and message converters in enterprise applications. The widespread adoption and popularity of XSLT raises the challenge of efficiently managing the evolution of significant amounts of XSLT code. This challenge calls for guidelines and tool support for developing maintainable XSLT code. In this setting, this paper addresses the following question: Can the maintainability of XSL transformations, measured in terms of code churn in the next revision of a transformation, be predicted using a combination of simple metrics? This question is studied using a dataset extracted from open-source software project repositories. An outcome of this empirical study is a set of statistical models for predicting the maintainability of XSL transformations with relatively high accuracy. In addition, by analyzing the major influencers of code churn in these models, the paper identifies guidelines for designing XSL transformations with reduced future churn. (C) 2010 Elsevier B.V. All rights reserved.
C1 [Karus, Siim; Dumas, Marlon] Univ Tartu, Tartu, Estonia.
C3 University of Tartu
RP Karus, S (corresponding author), Univ Tartu, Tartu, Estonia.
EM siim.karus@ut.ee; marlon.dumas@ut.ee
RI Dumas, Marlon/H-2757-2015
OI Dumas, Marlon/0000-0002-9247-7476
FU ESF
FX This research was partly conducted during a visit of the first author to
   the Software Engineering Group at University of Zurich, funded by the
   ESF DoRa 6 Program. We thank Harald Gall and his group for their
   valuable advice.
CR Ajila SA, 2007, J SYST SOFTWARE, V80, P74, DOI 10.1016/j.jss.2006.05.034
   [Anonymous], XSL TRANSFORMATIONS
   Benedikt M, 2008, J ACM, V55, DOI 10.1145/1346330.1346333
   Hall GA, 2000, J SYST SOFTWARE, V54, P111, DOI 10.1016/S0164-1212(00)00031-5
   Halstead M. H., 1977, ELEMENTS SOFTWARE SC
   Jiang Haifeng., 2007, WWW, P1063
   JORGENSEN M, 1995, IEEE T SOFTWARE ENG, V21, P674, DOI 10.1109/32.403791
   Kagdi H, 2007, J SOFTW MAINT EVOL-R, V19, P77, DOI 10.1002/smr.344
   Karus S, 2007, LECT NOTES COMPUT SC, V4832, P154
   Khoshgoftaar T., 1996, SOFTW REL ENG INT S, P364
   Koppen C., 2004, EUR INT WORKSH ASP S
   LI W, 1993, J SYST SOFTWARE, V23, P111, DOI 10.1016/0164-1212(93)90077-B
   MOLLER A, 2006, INTRO XML WEB TECHNO
   Munson JC, 1998, PROC IEEE INT CONF S, P24, DOI 10.1109/ICSM.1998.738486
   Nagappan N, 2005, PROC INT CONF SOFTW, P284, DOI 10.1145/1062455.1062514
   Probert D., UNDERSTANDING BIZ 12
   Rahm E, 2001, VLDB J, V10, P334, DOI 10.1007/s007780100057
   RATZINGER J, 2007, EMP SOFTW ENG MEAS 2, P354
   Storzer M., 2005, SOFTWARE MAINTENANCE, P653, DOI [10.1109/ICSM.2005.99, DOI 10.1109/ICSM.2005.99]
   Vaucher S., 2007, P 2007 S LIB CENTR S, P88, DOI [10.1145/1512762.1512771, DOI 10.1145/1512762.1512771]
NR 20
TC 3
Z9 3
U1 0
U2 5
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 1
PY 2011
VL 76
IS 12
SI SI
BP 1161
EP 1176
DI 10.1016/j.scico.2010.12.006
PG 16
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 793FX
UT WOS:000292806900007
DA 2024-07-18
ER

PT J
AU Mendonca, M
   Cowan, D
AF Mendonca, Marcilio
   Cowan, Donald
TI Decision-making coordination and efficient reasoning techniques for
   feature-based configuration
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Software Product Lines; Product configuration; Feature models; Feature
   modelling; Decision-making coordination; Automated reasoning;
   Constraint-based reasoning
ID FEATURE MODELS; ALGORITHMS
AB Software Product Lines is a contemporary approach to software development that exploits the similarities and differences within a family of systems in a particular domain of interest in order to provide a common infrastructure for deriving members of this family in a timely fashion, with high-quality standards, and at lower costs.
   In Software Product Lines, feature-based product configuration is the process of selecting the desired features for a given software product from a repository of features called a feature model. This process is usually carried out collaboratively by people with distinct skills and interests called stakeholders. Collaboration benefits stakeholders by allowing them to directly intervene in the configuration process. However, collaboration also raises an important side effect, i.e., the need of stakeholders to cope with decision conflicts. Conflicts arise when decisions that are locally consistent cannot be applied globally because they violate one or more constraints in the feature model.
   Unfortunately, current product configuration systems are typically single-user-based in the sense that they do not provide means to coordinate concurrent decision-making on the feature model. As a consequence, configuration is carried out by a single person that is in charge of representing the interests of all stakeholders and managing decision conflicts on their own. This results in an error-prone and time-consuming process that requires past decisions to be revisited continuously either to correct misinterpreted stakeholder requirements or to handle decision conflicts. Yet another challenging issue related to configuration problems is the typically high computational cost of configuration algorithms. In fact, these algorithms frequently fall into the category of NP-hard and thus can become intractable in practice.
   In this paper, our goal is two-fold. First, we revisit our work on Collaborative Product Configuration (CPC) in which we proposed an approach to describe and validate collaborative configuration scenarios. We discuss how collaborative configuration can be described in terms of a workflow-like plan that safely guides stakeholders during the configuration process. Second, we propose a preliminary set of reasoning algorithms tailored to the feature modelling domain that can be used to provide automated support for product configuration. In addition, we compare empirically the performance of the proposed algorithms to that of a general-purpose solution. We hope that the insights provided in this paper will encourage other researchers to develop new algorithms in the near future. (C) 2009 Elsevier B.V. All rights reserved.
C1 [Mendonca, Marcilio; Cowan, Donald] Univ Waterloo, David R Cheriton Sch Comp Sci, Waterloo, ON N2L 3G1, Canada.
C3 University of Waterloo
RP Mendonca, M (corresponding author), Univ Waterloo, David R Cheriton Sch Comp Sci, 200 Univ Ave W, Waterloo, ON N2L 3G1, Canada.
EM marcilio@csg.uwaterloo.ca; dcowan@csg.uwaterloo.ca
CR [Anonymous], 2000, Generative programming: methods, tools, and applications
   ANTKIEWICZ M, 2004, OOPSLA 04 ECL TECHN
   Batory D, 2005, LECT NOTES COMPUT SC, V3714, P7
   BATORY D, 2005, TR0514 U TEX AUST
   Batory D, 2006, COMMUN ACM, V49, P45, DOI 10.1145/1183236.1183264
   Benavides D., 2005, LNCS
   Berre D. L, 2005, SAT4J SATISFIABILITY
   Beuche D, 2004, PURE VARIANTS ECLIPS
   BRYANT RE, 1986, IEEE T COMPUT, V35, P677, DOI 10.1109/TC.1986.1676819
   Cechticky V, 2004, LECT NOTES COMPUT SC, V3107, P101
   Cook Stephen A, 1971, P 3 ANN ACM S THEOR, DOI 10.1145/800157.805047
   Czarnecki K., 2005, Software Process Improvement and Practice, V10, P143, DOI 10.1002/spip.225
   CZARNECKI K, 2007, P 10 INT SOFTW PROD
   Felfernig A., 2001, KI 2001: Advances in Artificial Intelligence. Joint German/ Austrian Conference on AI. Proceedings (Lecture Notes in Artificial Intelligence Vol.2174), P198
   HADRIEN C, 2003, CHOCO CONSTRAINT PRO
   KANG K, 2002, FOPLE FEATURE ORIENT
   Kang Kyo C, 1990, Technical Report
   KRUEGER CW, 2001, SOFTWARE MASS CUSTOM
   Meinel C., 1998, ALGORITHMS DATA STRU
   Mendonca M., 2008, 23 ANN ACM S APPL CO
   MENDONCA M, 2008, RES PROJECT WEB PAGE
   MENDONCA M, 2008, INT C GEN PROGR COMP, P13
   MENDONCA M, 2008, J SOFTWARE, V0003, P00069, DOI DOI 10.4304/jsw.3.2.69-82
   Northrop L., 2001, SOFTWARE PRODUCT LIN
   Pohl K., 2005, SOFTWARE PRODUCT LIN, V10
   Rossi F, 2006, FOUND ARTIF INTELL, P1
   Yokoo M, 1998, IEEE T KNOWL DATA EN, V10, P673, DOI 10.1109/69.729707
NR 27
TC 22
Z9 22
U1 0
U2 6
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAY 1
PY 2010
VL 75
IS 5
SI SI
BP 311
EP 332
DI 10.1016/j.scico.2009.12.004
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 583YV
UT WOS:000276717500003
OA Bronze
DA 2024-07-18
ER

PT J
AU Hoffman, K
   Eugster, P
AF Hoffman, Kevin
   Eugster, Patrick
TI Cooperative aspect-oriented programming
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Aspect-oriented programming; Extensibility; Join point; Modularity
ID INTERFACES; DESIGN
AB Aspect-oriented programming (AOP) seeks to improve software modularity via the separation of cross-cutting concerns. AOP proponents often advocate a development strategy where programmers write the main application (base code), ignoring crosscutting concerns, and then aspect programmers, domain experts in their specific concerns, weave in the logic for these more specialized cross-cutting concerns. This purely oblivious strategy, however, has empirically been shown to tightly couple aspects to base code in many cases, hindering aspect modularity and reuse. In essence, the more intricate the weaving between the cross-cutting concern and the base code (lexically and/or semantically), the harder it becomes to: (a) robustly specify how to weave the aspects in at the required points, (b) capture interactions between aspects and base code, and (c) preserve the correct weaving as the base code evolves.
   We propose an alternate methodology, termed cooperative aspect-oriented programming (Co-AOP), where complete lexical separation of concerns is not taken as an absolute requirement. Instead, cross-cutting concerns are explicitly modeled as abstract interfaces through explicit join points (EJPs). Programmers specify where these interfaces interact with base code either through explicit lexical references or via traditional oblivious aspects. This explicit awareness allows base code and aspects to cooperate in ways that were previously not possible: arbitrary blocks of code can be advised, advice can be explicitly parameterized, base code can guide aspects in where to apply advice, and aspects can statically enforce new constraints upon the base code that they advise. These new techniques allow aspect modularity and program safety to increase, and bring us towards a cooperative ACIP paradigm.
   We illustrate our methodology via an example on transactions, and also give an initial evaluation of cooperative AOP through an empirical study on program extensibility comparing both the traditional and cooperative AOP methodologies. Initial results show that cooperative AOP techniques result in code that is less complex with lower overall coupling, facilitating extensibility. (C) 2009 Elsevier B.V. All rights reserved.
C1 [Hoffman, Kevin; Eugster, Patrick] Purdue Univ, W Lafayette, IN 47907 USA.
C3 Purdue University System; Purdue University
RP Hoffman, K (corresponding author), Purdue Univ, 305 N Univ St, W Lafayette, IN 47907 USA.
EM kjhoffma@cs.purdue.edu; peugster@cs.purdue.edu
CR ALDRICH J, 2005, ECOOP 05
   AVGUSTINOV P, 2005, T ASPECT ORIENTED SO, V1, P293
   BECK K, 1999, COMPUTER, V32
   BONER J, 2004, AOSD 04
   BUSSARD L, 2000, WORKSH ASP DIM CONC
   Butler M, 2005, LECT NOTES COMPUT SC, V3525, P133
   CACHO N, 2006, AOSD 06
   Ceccato M., 2004, 1 WORKSH ASP REV ENG
   CHIDAMBER SR, 1994, IEEE T SOFTWARE ENG, V20, P476, DOI 10.1109/32.295895
   CLIFTON C, 2003, SPLAT 03
   COLYER A, 2003, AOSD 03
   Fetzer C, 2004, IEEE T SOFTWARE ENG, V30, P547, DOI 10.1109/TSE.2004.35
   FILHO FC, 2006, FSE 06
   Filman RobertE., 2005, ASPECT ORIENTED SOFT, P21
   FUAD M, 2006, ICAS 06
   Gamma E., 1994, Design patterns: Elements of reusable object-oriented software
   GARCIA A, 2005, AOSD 05
   Garcia-Pichel F, 2004, GEOBIOLOGY, V2, P49, DOI 10.1111/j.1472-4669.2004.00017.x
   Ghosh S, 2005, SOFTWARE PRACT EXPER, V35, P1131, DOI 10.1002/spe.666
   GOLDMAN S, 2006, JAVAONE 2006
   Gosling J., 2005, Java Language Specification, Vthird
   GREENWOOD P, 2007, ECOOP 07
   Griswold WG, 2006, IEEE SOFTWARE, V23, P51, DOI 10.1109/MS.2006.24
   GUDMUNDSON S, 2001, WORKSH ADV SEP CONC
   HARRIS T, SCI COMPUTER PROGRAM, V58
   HOFFMAN K, EJP EXTENSION ASPECT
   HOFFMAN K, 2007, PPPJ 07
   Hoffman K., 2008, ICSE 08, p91
   *IBM BEA SYST MICR, 2005, WEB SERV T SPEC
   Kiczales G., 1997, ECOOP 97
   Kiczales G., 2005, ICSE 05
   Kiczales Gregor, 2001, ECOOP 01
   KIENZLE J, 2002, ECOOP 02
   KUZINS S, 2004, THESIS OXFORD U
   LADDAD R, 2003, MANNING, P356
   PARNAS DL, 1972, COMMUN ACM, V15, P1053, DOI 10.1145/361598.361623
   PREHOFER C, 1997, ECOOP 97
   RAJAN H, 2005, ICSE 05
   Sant'anna C., 2003, P 17 BRAZ S SOFTW EN
   Smaragdakis Y, 2002, ACM T SOFTW ENG METH, V11, P215, DOI 10.1145/505145.505148
   STOERZER M, 2005, ICSM 05
   SULLIVAN K, 2005, FSE 05
   TARR PL, 1993, ICSE 93
   Tonella P, 2005, IEEE T SOFTWARE ENG, V31, P819, DOI 10.1109/TSE.2005.115
   ZHANG C, 2003, AOSD 03
   Zhao J., 2004, METRICS 04
NR 46
TC 8
Z9 8
U1 0
U2 2
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR 1
PY 2009
VL 74
IS 5-6
SI SI
BP 333
EP 354
DI 10.1016/j.scico.2009.01.003
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 436CT
UT WOS:000265390900006
DA 2024-07-18
ER

PT J
AU Cicchetti, A
   Di Ruscio, D
AF Cicchetti, Antonio
   Di Ruscio, Davide
TI Decoupling web application concerns through weaving operations
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE abstract state machines; model transformations; model weaving; web
   applications; metamodel specification
ID TRANSFORMATION; METAMODEL
AB Today's Web applications require instruments and techniques able to face their complexity which has noticeably increased at the expense of productivity and quality factors. A number of design methodologies have been proposed in the process of trying to provide developers with languages and tools to abstract and capture Web applications under orthogonal views, like data, navigation and presentation. While the different modeling language constructs can be unified in a common metamodel, consistency among the distinct concerns is guaranteed by less formal relations. Usually, they are based on name conventions and/or ad hoc tool support that could affect reuse and maintenance ratings of specifications.
   In order to define rigorous and explicit correspondences between the artifacts produced during a system development, this paper proposes the exploitation of dedicated weaving models. The approach aims at providing structural mappings that do not interfere with the definition of the views on either side achieving a clear separation between them and their connections. Furthermore, following the "everything is a model" principle, this work can enable the use of general-purpose theories and tools. For example, model transformations can be applied to evaluate the given specifications or to derive alternative descriptions like Webile or WebML. (C) 2007 Elsevier B.V. All rights reserved.
C1 [Cicchetti, Antonio; Di Ruscio, Davide] Univ Aquila, Dipartimento Informat, I-67100 Laquila, Italy.
C3 University of L'Aquila
RP Di Ruscio, D (corresponding author), Univ Aquila, Dipartimento Informat, I-67100 Laquila, Italy.
EM cicchetti@di.univaq.it; diruscio@di.univaq.it
RI Di Ruscio, Davide/AAG-4674-2020; Cicchetti, Antonio/D-2375-2015
OI Di Ruscio, Davide/0000-0002-5077-6793; Cicchetti,
   Antonio/0000-0003-0416-1787
CR ANLAUFF M, 2000, LNCS, V1912, P69
   [Anonymous], LNCS
   [Anonymous], 2003, Eclipse Modeling Framework
   [Anonymous], 0602 LINA
   *ATLAS GROUP, ATL ZOO
   Bezivin J., 2005, SOFTWARE SYSTEM MODE, V4, P171, DOI DOI 10.1007/S10270-005-0079-0
   BEZIVIN J, 2004, 19 ANN ACM C OBJ OR
   Börger E, 2002, J UNIVERS COMPUT SCI, V8, P2
   BOUZITOUNA S, 2005, P INT C SOFTW ENG RE, V1, P354
   Ceri S, 2000, COMPUT NETW, V33, P137, DOI 10.1016/S1389-1286(00)00040-2
   CERI S, 2001, DESIGNING MULTIROLE
   Chen K, 2005, LECT NOTES COMPUT SC, V3748, P115
   CHEN K, 2005, P 5 ACM INT C EMB SO, P35
   CICCHETTI A, PROTOTYPICAL IMPLEME
   Conallen J, 1999, COMMUN ACM, V42, P63, DOI 10.1145/317665.317677
   CONSEL C, DMAIN SPECIFIC LANGU
   Corradini Andrea., 1997, HDB GRAPH GRAMMARS C, V1, P163
   Courbis C, 2005, PROC INT CONF SOFTW, P69
   Czarnecki K, 2006, IBM SYST J, V45, P621, DOI 10.1147/sj.453.0621
   DELCASTILLO G, 2001, THESIS U PADERBORN
   DELFABRO MD, 2005, 22 ANN ACM SAC MT 20
   Di Ruscio D, 2005, LECT NOTES COMPUT SC, V3520, P475
   DIRUSCIO D, 2004, INT J WEB ENG TECHNO, V1, P320
   DIRUSCIO D, 2007, THEIS SU AQUILA
   *ECL PROJ, GMF GRAPH MOD FRAM
   FRASINCAR F, 2002, WWW
   GARZOTTO F, 2002, 6 WORLD MULT SYST CY
   GOMEZ J, 2003, OO H METHOD EXTENDIN, P144
   GUREVICH Y, 1988, CURRENT TRENDS THEOR, P1
   Ho W.M., 2002, PROC 1 INT, P99
   JOUAULT F, 2005, P EUR C MOD DRIV ARC
   Jouault F, 2006, LECT NOTES COMPUT SC, V4037, P171
   Kleppe A, 2006, LECT NOTES COMPUT SC, V4066, P173
   KNAPP A, 2006, LNI, V82, P115
   Koch N, 2003, LECT NOTES COMPUT SC, V2722, P497
   KOCH N, 2002, LNCS, V2548, P105
   KOLOVOS D, EPSILON PROJECT PAGE
   *M R FDN SOFTW ENG, ASML
   MELIA S, 2005, ICWE, P465
   Melnik Sergey., 2003, SIGMOD C, P193, DOI DOI 10.1145/872757.872782
   MORENO AN, 2006, 2 INT WORKSH MOD DRI
   *OMG, MET OBJ FAC MOF 2 0
   Pin-Shan Chen P., 1976, ACM Transactions on Database Systems, V1, P9, DOI 10.1145/320434.320440
   POTTINGER R, 2003, VLDB, P826
   Schauerhuber A., 2006, 2 INT WORKSH MOD DRI
   SCHMID J, EXECUTING ASM SPECIF
   SCHMID J, J U COMPUT SCI, V7
   Schwabe D, 1998, THEOR PRACT OBJ SYST, V4, P207, DOI 10.1002/(SICI)1096-9942(1998)4:4<207::AID-TAPO2>3.0.CO;2-2
   Simos M, 1998, FIFTH INTERNATIONAL CONFERENCE ON SOFTWARE REUSE - PROCEEDINGS, P94, DOI 10.1109/ICSR.1998.685734
   Straw G, 2004, LECT NOTES COMPUT SC, V3273, P84
   Tarr P., 1999, Proceedings of the 1999 International Conference on Software Engineering (IEEE Cat. No.99CB37002), P107, DOI 10.1109/ICSE.1999.841000
   TRATT L, 2005, J SOFTWARE SYSTEMS M, V4, P112
   Varró D, 2004, LECT NOTES COMPUT SC, V3273, P290
   Varró D, 2002, SCI COMPUT PROGRAM, V44, P205, DOI 10.1016/S0167-6423(02)00039-4
   Varro D., 2004, THESIS BUDAPEST U TE
   *WEBRATIO TOOL, WEB MOD
   [No title captured]
NR 57
TC 9
Z9 10
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 1
PY 2008
VL 70
IS 1
BP 62
EP 86
DI 10.1016/j.scico.2007.10.002
PG 25
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 255DC
UT WOS:000252636000003
OA Bronze
DA 2024-07-18
ER

PT J
AU Gallardo, MD
   Martínez, J
   Merino, P
   Nuñéz, P
   Pimentel, E
AF del Mar Gallardo, Maria
   Martinez, Jesus
   Merino, Pedro
   Nunez, Pablo
   Pimentel, Ernesto
TI <i>PiXL</i>:: Applying XML standards to support the integration of
   analysis tools for protocols
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE XML; protocols; analysis; formal methods; model checking; performance;
   MDA
AB This paper presents our experiences on using XML technologies and standards for the integration of analysis tools for protocols. The core proposal consists in the design of a new xML-based language named PiXL (Protocol Interchange using xML Languages), responsible for interchanging the whole specification of the protocol (data and control) among different existing tools. The structure and flexibility of xML has proven to be very useful when implementing new tools such as abstract model checkers. In addition, the suitability of the proposal has been applied to achieve a new kind of analysis, where PiXL and new MDA methodologies have been proposed to build integrated environments for reliability and performance analysis of Active Network protocols. (c) 2006 Elsevier B.V. All rights reserved.
C1 Univ Malaga, Dpto Lenguajes & Ciencias Computac, E-29071 Malaga, Spain.
C3 Universidad de Malaga
RP Martínez, J (corresponding author), Univ Malaga, ETSI Telecomunicac, Campus Teatinos, E-29071 Malaga, Spain.
EM jmcruz@lcc.uma.es
RI Gallardo, Maria-del-Mar/JAC-7780-2023; Pimentel, Ernesto/AAC-3810-2019;
   Merino-Gomez, Pedro/L-4518-2014; Gallardo Melgarejo, Maria del
   Mar/G-4371-2014
OI Pimentel, Ernesto/0000-0002-7125-8434; Merino-Gomez,
   Pedro/0000-0003-2456-4946; Gallardo Melgarejo, Maria del
   Mar/0000-0003-3481-5307
CR [Anonymous], MDA GUID VERS 1 0 1
   [Anonymous], XML SCHEM
   [Anonymous], INT J SOFTWARE TOOLS
   [Anonymous], 2003, The Spin Model Checker: Primer and Reference Manual
   BOZGA M, 2000, LNCS, V1855, P543
   Calvert KL, 1998, IEEE COMMUN MAG, V36, P72, DOI 10.1109/35.722139
   Clarke Edmund M., 2001, Model Checking
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   DAMS D, 2002, LECT NOTES COMPUTER, V2318
   Gallardo MD, 2005, ELECTRON NOTES THEOR, V133, P217, DOI 10.1016/j.entcs.2004.08.066
   Gallardo MD, 2005, COMPUT COMMUN, V28, P609, DOI 10.1016/j.comcom.2004.08.006
   GALLARDO MM, 2002, P ACM S APPL COMP, P1021
   GALLARDO MM, 2004, SOFTWARE EVOLUTION U
   GAMMA E, 1995, DESIGN PATTERNS
   Garavel H., 2002, EASST NEWSLETTER, V4, P13
   GARAVEL H, 2002, LNCS, V2391, P410
   Harel D., 1987, Proceedings of the Symposium on Logic in Computer Science (Cat. No.87CH2464-6), P54
   Hatcliff J, 2002, LECT NOTES COMPUT SC, V2566, P172
   HAVELUND K, 2002, SOFTWARE TOOLS TECHN, P8
   KATZ S, 2001, P FORM METH EUR
   MARGARIA T, 2003, P ESEC FSE WORKSH TO
   Rodríguez G, 2002, COMPUT COMMUN, V25, P189, DOI 10.1016/S0140-3664(01)00366-8
   *SUN MICR SYST, 2003, ENT JAV BEANS SPEC V
   *SUN MICR SYST, 2006, JAV ARCH XML BIND JA
   *VINT, 2004, NETW SIM NS 2
   *W3C, 2000, EXT MARK LANG XML 1
NR 26
TC 6
Z9 6
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR 1
PY 2007
VL 65
IS 1
BP 57
EP 69
DI 10.1016/j.scico.2006.08.006
PG 13
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 144CB
UT WOS:000244771700007
OA Bronze
DA 2024-07-18
ER

PT J
AU Jagadeesan, R
   Jeffrey, A
   Riely, J
AF Jagadeesan, Radha
   Jeffrey, Alan
   Riely, James
TI Typed parametric polymorphism for aspects
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE aspect-oriented programming; typing; generic types
ID CALCULUS; LANGUAGE; JAVA
AB We study the incorporation of generic types in aspect languages. Since advice acts like method update, such a study has to accommodate the subtleties of the interaction of classes, polymorphism and aspects. Indeed, simple examples demonstrate that current aspect compiling techniques do not avoid runtime type errors.
   We explore type systems with polymorphism for two models of parametric polymorphism: the type erasure semantics of Generic Java, and the type carrying semantics of designs such as genetic C#. Our main contribution is the design and exploration of a source-level type system for a parametric OO language with aspects. We prove progress and preservation properties.
   We believe our work is the first source-level typing scheme for an aspect-based extension of a parametric object-oriented language. (c) 2006 Elsevier B.V. All rights reserved.
C1 Depaul Univ, Sch CTI, Chicago, IL 60604 USA.
C3 DePaul University
RP Jagadeesan, R (corresponding author), Depaul Univ, Sch CTI, 243 S Wabash Ave, Chicago, IL 60604 USA.
EM rjagadeesan@cti.depaul.edu
OI Riely, James/0000-0002-8731-1463
CR AKSIT M, 1993, LNCS
   [Anonymous], 1996, A Theory of Objects
   BERGMANS L, 1994, THESIS U TWENTE
   Bierman G., 2003, 563 U CAMBR COMP LAB
   BLACK AP, 1996, ACM COMPUT SURV, V28, P149
   Bockisch Christoph, 2004, VIRTUAL MACHINE SUPP, P83, DOI [10.1145/976270.976282, DOI 10.1145/976270.976282]
   BONO V, 1994, SUBTYPING FISHERHONS, P16
   BRACHA G, 1998, MAKING FUTURE SAFE P, P183
   BRUCE KB, 1997, EUR C OBJ OR PROGR E
   BRUCE KB, 1995, EUR C OBJ OR PROGR E
   BRUCE KB, 1997, LNCS, V1281, P415
   CHIBA S, 2004, JOSH OPEN ASPECTJ LI, P102
   CLIFTON C, 2003, 0301A TR
   COADY Y, 2001, USING ASPECTC IMPROV, P88
   COLYER AM, 2004, LARGE SCALE AOSD MID, P56
   DANTAS DS, 2005, ICFP 05 P 10 ACM SIG, P306
   Drossopoulou S, 1999, THEOR PRACT OBJ SYST, V5, P3, DOI 10.1002/(SICI)1096-9942(199901/03)5:1<3::AID-TAPO2>3.0.CO;2-T
   Eichberg M, 2004, LECT NOTES COMPUT SC, V3302, P366
   Filman R.E., 2000, ASPECT ORIENTED PROG
   FISHER K, 2000, EUR C OBJ OR PROGR E
   FLATT M, 1998, ACM S PRINC PROGR LA, P171
   Igarashi A, 2002, INFORM COMPUT, V177, P56, DOI 10.1006/inco.2002.3092
   Igarashi A, 2001, ACM T PROGR LANG SYS, V23, P396, DOI 10.1145/503502.503505
   Jagadeesan R, 2003, LECT NOTES COMPUT SC, V2743, P54
   Kennedy A, 2004, CONCURR COMP-PRACT E, V16, P707, DOI 10.1002/cpe.801
   KHALED R, 2003, INSPECTJ PROGRAM MON, P359
   KICZALES G, 1997, EUR C OBJ OR PROGR E
   KICZALES G, 2001, ASPECTC
   Kiczales Gregor, 2001, LNCS, V2072, P327, DOI DOI 10.1007/3-540-45337-718
   LEAVENS G, 2002, FOAL 2002 WORKSH
   Lieberherr K, 2003, COMPUT J, V46, P542, DOI 10.1093/comjnl/46.5.542
   Lieberherr K., 1996, ADAPTIVE OBJECT ORIE
   LOPES CV, 1997, THESIS NW U
   Masuhara H., 2005, ICFP 05, P320
   MATSUOKA S., 1993, RES DIRECTIONS CONCU, P107
   MEZINI M, 2003, CONQUERING ASPECTS C, P90
   MEZINI M, 2004, P INT S FDN SOFTW EN, P127
   Murphy GC, 2001, COMMUN ACM, V44, P75, DOI 10.1145/383845.383862
   NIERSTRASZ O, 1993, REGULAR TYPES ACTIVE, P1
   NISHIZAWA M, 2004, REMOTE POINTCUT LANG, P7
   Odersky Martin., 1997, P 24 ACM S PRINCIPLE, P146
   OSSHER H, 2001, P S SOFTW ARCH COMP
   RINARD M, 2004, CLASSIFICATION SYSTE, P147
   SALTZER J, 1975, IEEE, V9
   Schneider FB, 2001, LECT NOTES COMPUT SC, V2000, P86
   TARR PL, 2002, HYPER J MULTIDIMENSI, P689
   TARR PL, 2001, HYPER J MULTIDIMENSI, P729
   Torgersen M., 2004, SAC 2004, P1289, DOI DOI 10.5381/JOT.2004.3.11.A5
   Tucker D.B., 2003, P 2 INT C ASPECT ORI, P158
   VOLDER KD, 1999, LECT NOTES COMPUTER, V1616, P250
   Wadler P., 1987, IMPLEMENTATION FUNCT
   WALKER D, 2003, ICFP 03 ACM SIGPLAN
   WIN BD, 2004, AOSDSEC AOSD TECHNOL
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
   YU D, 2004, POPL 04, P39
NR 55
TC 14
Z9 15
U1 0
U2 0
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 15
PY 2006
VL 63
IS 3
SI SI
BP 267
EP 296
DI 10.1016/j.scico.2006.02.008
PG 30
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 110CL
UT WOS:000242355800004
DA 2024-07-18
ER

PT J
AU Brogi, A
   Canal, C
   Pimentel, E
AF Brogi, Antonio
   Canal, Carlos
   Pimentel, Ernesto
TI Component adaptation through flexible subservicing
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT International Workshop on Security Issues in Coordination Models,
   Languages, and Systems
CY JUN 28-29, 2003
CL Eindhoven, NETHERLANDS
DE component-based software development; software adaptation; pi-calculus;
   session types
AB Component adaptation is widely recognised to be one of the crucial problems in Component-Based Software Engineering (CBSE). We present here a formal methodology for the soft adaptation of components presenting mismatching interaction behaviour. The notions of access rights (associating components with the services they are allowed to use) and subservicing (providing alternative services in place of those requested by components lacking the required access rights) are exploited to feature a secure and flexible adaptation of third-party components. (c) 2006 Elsevier B.V. All rights reserved.
C1 Univ Malaga, Dept Comp Sci, E-29071 Malaga, Spain.
   Univ Pisa, Dept Comp Sci, I-56100 Pisa, Italy.
C3 Universidad de Malaga; University of Pisa
RP Canal, C (corresponding author), Univ Malaga, Dept Comp Sci, E-29071 Malaga, Spain.
EM brogi@di.unipi.it; canal@lcc.uma.es; ernesto@lcc.uma.es
RI Brogi, Antonio/HLQ-2040-2023; Pimentel, Ernesto/AAC-3810-2019; Canal,
   Carlos/H-4782-2015
OI Pimentel, Ernesto/0000-0002-7125-8434; Brogi,
   Antonio/0000-0003-2048-2468; Canal, Carlos/0000-0002-8002-0372
CR Abadi M, 1999, J ACM, V46, P749, DOI 10.1145/324133.324266
   ACETO L, 1994, INFORM COMPUT, V115, P179, DOI 10.1006/inco.1994.1096
   Allen R., 1997, ACM Transactions on Software Engineering and Methodology, V6, P213, DOI 10.1145/258077.258078
   Bracciali A, 2005, J SYST SOFTWARE, V74, P45, DOI 10.1016/j.jss.2003.05.007
   BROGI A, 2004, ELECT NOTES THEORETI, V97, P47
   Brogi A., 2004, LNCS, V3116
   Brogi A., 2002, ELECT NOTES THEORETI, V66
   Brown AW, 1998, IEEE SOFTWARE, V15, P37, DOI 10.1109/52.714622
   CAMPBELL GH, 1999, ICSE 1999, P685
   GAY S, 1999, LNCS, V1576
   Gordon A. D., 2003, Journal of Computer Security, V11, P451
   GORRIERI R, 2000, HDB PROCESS ALGEBRA
   HEINEMAN G, 1999, EVALUATION COMPONENT
   Hodas JS, 2002, LECT NOTES COMPUT SC, V2471, P167
   Honda K, 1998, LECT NOTES COMPUT SC, V1381, P122, DOI 10.1007/BFb0053567
   Honda Kohei., 1993, CONCUR'93, 4th International Conference on Concurrency Theory, Hildesheim, Germany, August 23-26, 1993, V715, P509, DOI DOI 10.1007/3-540-57208-2_
   INVERARDI P, 2001, ESEC FSE 2001
   Kobayashi N, 1999, ACM T PROGR LANG SYS, V21, P914, DOI 10.1145/330249.330251
   Magen J G, 1995, Ann Clin Psychiatry, V7, P133, DOI 10.3109/10401239509149040
   Meredith LG, 2003, COMMUN ACM, V46, P41, DOI 10.1145/944217.944236
   Morel B, 2003, 18TH IEEE INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING, PROCEEDINGS, P142, DOI 10.1109/ASE.2003.1240302
   PALAMIDESSI C, 1997, 24 ACM SIGPLAN SIGAC, P256, DOI DOI 10.1145/263699.263731
   SEWELL P, 2003, J COMPUTER SECURITY
   Takeuchi K., 1994, Parallel Architectures and Languages Europe'94, V817, P398, DOI [DOI 10.1007/3-540-58184-7_118, 10.1007/3540581847118]
   Vallecillo A, 2000, LECT NOTES COMPUT SC, V1964, P256
   Vallecillo A., 2003, ELECT NOTES THEORETI, V68
NR 26
TC 11
Z9 12
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV
PY 2006
VL 63
IS 1
BP 39
EP 56
DI 10.1016/j.scico.2005.07.012
PG 18
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 096DD
UT WOS:000241356300004
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Nagpurkar, P
   Krintz, C
AF Nagpurkar, P
   Krintz, C
TI Phase-based visualization and analysis of Java programs
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT Academic Emergency Medicine Consensus Conference on Ethical Conduct of
   Resuscitation Research
CY MAY 21, 2005
CL New York, NY
DE program phases; program behaviour visualization; program analysis; Java
AB Extant Java Virtual Machines (JVMs) apply dynamic compiler optimizations adaptively, based on the partial execution of the program, with the goal of improving performance. Understanding and characterizing program behavior is of vital importance to such systems. Recent research, primarily in the area of computer architecture, has identified potential optimization opportunities in the repeating patterns in the time-varying behavior of programs. In view of this, we believe that by considering time-varying, i.e., phase, behavior in Java programs, adaptive JVMs can enable performance that exceeds current levels.
   To enable analysis and visualization of phase behavior in Java programs and to facilitate optimization development, we have implemented a freely available, offline, phase analysis framework within the IBM Jikes Research Virtual Machine (JikesRVM) for Java. The framework couples existing techniques into a unifying set of tools for data collection, processing, and analysis of dynamic phase behavior in Java programs. The framework enables optimization developers to significantly reduce analysis time and to target adaptive optimization to parts of the code that will recur with sufficient regularity. We use the framework to evaluate phase behavior in the SpecJVM benchmark suite and discuss optimizations that are enabled by the framework. (c) 2005 Elsevier B.V. All rights reserved.
C1 Univ Calif Santa Barbara, Dept Comp Sci, Santa Barbara, CA 93106 USA.
C3 University of California System; University of California Santa Barbara
RP Univ Calif Santa Barbara, Dept Comp Sci, Santa Barbara, CA 93106 USA.
EM priya@cs.ucsb.edu; ckrintz@cs.ucsb.edu
CR Alpern B, 2000, IBM SYST J, V39, P211, DOI 10.1147/sj.391.0211
   ARNOLD M, 2002, ACM C OBJ OR PROGR S, P111
   ARNOLD MATTHEW., 2000, ACM SIGPLAN Conference on Object-Oriented Programming Systems, Languages, and Applications, P47
   Bala V, 2000, ACM SIGPLAN NOTICES, V35, P1, DOI 10.1145/358438.349303
   Dhodapkar AS, 2003, 36TH INTERNATIONAL SYMPOSIUM ON MICROARCHITECTURE, PROCEEDINGS, P217
   Dhodapkar AS, 2002, CONF PROC INT SYMP C, P233, DOI 10.1109/ISCA.2002.1003581
   Duesterwald E, 2003, 12TH INTERNATIONAL CONFERENCE ON PARALLEL ARCHITECTURES AND COMPILATION TECHNIQUES, PROCEEDINGS, P220
   Ebcioglu K, 2001, IEEE T COMPUT, V50, P529, DOI 10.1109/12.931892
   HIND M, 2003, 22887 IBM
   *IBM, IBM JIK RES VIRT MAC
   KISTLER T, 2003, ACM T PROGR LANG SYS, P500
   Kremer U, 2001, P 14 INT C LANG COMP, P115
   Krintz C, 2003, INT SYM CODE GENER, P69, DOI 10.1109/CGO.2003.1191534
   MADISON AW, 1976, COMMUN ACM, V19, P285, DOI 10.1145/360051.360227
   NAGPURKAR P, 2004, ACM INT C PRINC PRAC, P27
   NGUYEN T, PANIC LAB RUTGERS U
   SAPUTRA H, 2002, ACM SIGPLAN 02 C LAN, P2
   SHEN X, 2004, 11 INT C ARCH SUPP P, P165
   Sherwood T, 2003, CONF PROC INT SYMP C, P336, DOI 10.1109/ISCA.2003.1207012
   Sherwood T, 2001, 2001 INTERNATIONAL CONFERENCE ON PARALLEL ARCHITECTURES AND COMPILATION TECHNIQUES, PROCEEDINGS, P3, DOI 10.1109/PACT.2001.953283
   Sherwood Timothy, 2002, ACM SIGPLAN Notices, P45, DOI DOI 10.1145/605432.605403
   SMITH M, 2000, SCM SIGPLAN WORKSH D, P1
   WHALEY J, 2001, ACM C OBJ OR PROGR S, P166
   XIE F, 2003, ACM SIGPLAN 03 C PRO, P49
   ZHANG L, 2004, ACM INT C PRINC PRAC, P83
   [No title captured]
NR 26
TC 0
Z9 1
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN
PY 2006
VL 59
IS 1-2
BP 64
EP 81
DI 10.1016/j.scico.2005.07.004
PG 18
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 993HZ
UT WOS:000233946500005
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Cole, C
   Herlihy, M
AF Cole, C
   Herlihy, M
TI Snapshots and software transactional memory
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT Workshop on Concurrency and Synchronization in Java Programs
CY JUL 25-26, 2004
CL St Johns, CANADA
DE synchronization; transactions; transactional memory
AB One way that software transactional memory implementations attempt to reduce synchronization conflicts among transactions is by supporting different kinds of access modes. One such implementation, Dynamic Software Transactional Memory (DSTM), supports three kinds of memory access: WRITE access, which allows an object to be observed and modified, READ access, which allows an object to be observed but not modified, and RELEASE access, which allows an object to be observed for a limited duration.
   In this paper, we examine the relative performance of these modes for simple benchmarks on a small-scale multiprocessor. We find that on this platform and for these benchmarks, the READ and RELEASE access benchmarks do not substantially increase transaction throughput (and sometimes reduce it). We blame the extra bookkeeping inherent in these access modes.
   In response, we propose a new SNAP access mode. This mode provides almost the same behaviour as RELEASE mode, but admits much more efficient implementations. (c) 2005 Elsevier B.V. All rights reserved.
C1 Northrop Gumman Mission Syst, Middletown, RI 02842 USA.
   Brown Univ, Dept Comp Sci, Providence, RI 02912 USA.
C3 Brown University
RP Cole, C (corresponding author), Northrop Gumman Mission Syst, 88 Silva Lane, Middletown, RI 02842 USA.
EM chris.cole@ngc.com; herlihy@cs.brown.edu
CR Afek Y., 1995, Proceedings of the Twenty-Seventh Annual ACM Symposium on the Theory of Computing, P538, DOI 10.1145/225058.225271
   ANDERSON JH, 1995, LNCS
   Fraser K., 2004, UCAM-CL-TR-579
   HARRIS T, 2003, P 18 ANN ACM SIGPLAN, P388, DOI DOI 10.1145/949305.949340
   Herlihy M, 2003, P 22 ANN S PRINCIPLE, P92
   Herlihy M., 1993, P 20 ANN INT S COMP
   HERLIHY MP, 1990, ACM T PROGR LANG SYS, V12, P463, DOI 10.1145/78969.78972
   Israeli A., 1994, Proceedings of the Thirteenth Annual ACM Symposium on Principles of Distributed Computing, P151, DOI 10.1145/197917.198079
   JOHNSON T, 1990, P ACM SIGMETRICS C B, P106
   MARATHE VJ, 2004, 839 U ROCH DEP COMP
   MOIR M, 1997, P 11 INT WORKSH DIST, P305
   RAJWAR R, 2002, ASPOLOS, V10, P5
   REIMAN M, 1991, P 1991 ACM SIGMETRIC, P168
   SHAVIT N, 1995, S PRINC DISTR COMP, P204
   Stone J. M., 1993, IEEE Parallel & Distributed Technology: Systems & Applications, V1, P58, DOI 10.1109/88.260295
NR 15
TC 6
Z9 7
U1 0
U2 1
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC
PY 2005
VL 58
IS 3
SI SI
BP 310
EP 324
DI 10.1016/j.scico.2005.03.006
PG 15
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 986BR
UT WOS:000233424300003
DA 2024-07-18
ER

PT J
AU Lee, O
   Yang, H
   Yi, K
AF Lee, O
   Yang, H
   Yi, K
TI Static insertion of safe and effective memory reuse commands into
   ML-like programs
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 10th International Static Analysis Symposium (SAS 2003)
CY JUN 11-13, 2003
CL SAN DIEGO, CA
SP ACM
DE program analysis; program transformation; type system; compile-time
   garbage collection
AB We present a static analysis that estimates reusable memory cells and a source-level transformation that adds explicit memory reuse commands into the program text. For benchmark ML programs, our analysis and transformation system achieves a memory reuse ratio from 5.2% to 91.3% and reduces the memory peak from 0.0% to 71.9%. The small-ratio cases are for programs that have a number of data structures that are shared. For other cases, our experimental results are encouraging in terms of accuracy and cost. Major features of our analysis and transformation are: (1) polyvariant analysis of functions by parameterization for the argument heap cells; (2) use of multiset formulas in expressing the sharings and partitionings of heap cells; (3) deallocations conditioned by dynamic flags that are passed as extra arguments to functions; (4) individual heap cells as the granularity of explicit memory reuse. Our analysis and transformation system is fully automatic. (c) 2005 Elsevier B.V. All rights reserved.
C1 Hanyang Univ, Dept Comp Sci & Engn, Ansan 426791, South Korea.
   Seoul Natl Univ, Sch Comp Sci & Engn, Seoul 151742, South Korea.
C3 Hanyang University; Seoul National University (SNU)
RP Hanyang Univ, Dept Comp Sci & Engn, Ansan 426791, South Korea.
EM oukseh@hanyang.ac.kr; hyang@ropas.snu.ac.kr; kwang@cse.snu.ac.kr
RI Yang, Hongseok/AAC-4471-2020; Yang, Hongseok/M-8791-2017; Lee,
   Oukseh/G-5505-2011
CR [Anonymous], 2001, P CSL 01
   [Anonymous], 1990, PROGRAMMING CONCEPTS
   Aspinall D, 2002, LECT NOTES COMPUT SC, V2305, P36
   Barendsen E., 1996, Mathematical Structures in Computer Science, V6, P579
   BLANCHET B, 1998, P 25 ANN ACM S PRINC, P25
   CRARY K, 1999, P 26 ACM SIGPLAN SIG, P262
   GAY D, 2001, P ACM C PROGR LANG D, P70
   Gheorghioiu O, 2003, ACM SIGPLAN NOTICES, V38, P273, DOI 10.1145/640128.604154
   GROSSMAN D, 2002, P ACM C PROGR LANG D, P282, DOI DOI 10.1145/512529.512563
   Harrison W. L.  III, 1989, LISP and Symbolic Computation, V2, P179, DOI 10.1007/BF01808954
   ISHTIAQ S, 2001, P ACM S PRINC PROGR
   LEE O, ROPAS200319 SCH COMP
   *LUC TECHN BELL LA, 2000, STAND ML NEW JERS VE
   Minamide Yasuhiko, 1996, S PRINC PROGR LANG P, P271, DOI DOI 10.1145/237721.237791
   Mohnen M, 1995, LECT NOTES COMPUT SC, V982, P241, DOI 10.1007/BFb0026824
   REYNOLDS J, 2002, P IEEE S LOG COMP SC
   Smith F, 2000, LECT NOTES COMPUT SC, V1782, P366
   Tofte M, 1998, ACM T PROGR LANG SYS, V20, P724, DOI 10.1145/291891.291894
   Tofte M, 1997, INFORM COMPUT, V132, P109, DOI 10.1006/inco.1996.2613
   Tofte M., 1994, Conference Record of POPL '94: 21st ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P188, DOI 10.1145/174675.177855
   TOFTE M, 2002, PROGRAMMING REGIONS
   TURNER DN, 1995, P INT C FUNCT PROGR, P25
   WALKER D, 2000, LECT NOTES COMPUTER, V2071, P177
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
   [No title captured]
NR 25
TC 1
Z9 2
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT
PY 2005
VL 58
IS 1-2
BP 141
EP 178
DI 10.1016/j.scico.2005.02.007
PG 38
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 968PY
UT WOS:000232175700007
DA 2024-07-18
ER

PT J
AU Liu, XD
   Wang, BH
   Kerridge, J
AF Liu, XD
   Wang, BH
   Kerridge, J
TI Achieving seamless component composition through scenario-based deep
   adaptation and generation
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE component reuse; scenario-based adaptation; component generation;
   component composition; component definition language; XML
AB Mismatches between pre-qualified existing components and the particular reuse context in applications have been a major factor hindering component reusability and successful composition. Although component adaptation has acted as a key solution of eliminating these mismatches, deep adaptation is often either impossible or incurring heavy overheads in the components. This paper proposes an approach, namely Scenario-based dynamic component Adaptation and GenerAtion (SAGA), to achieve deep adaptation with little code overhead through XML-based component specification, interrelated adaptation scenarios and corresponding component adaptation and generation. (c) 2004 Elsevier B.V. All rights reserved.
C1 Napier Univ, Sch Comp, Edinburgh EH10 5DT, Midlothian, Scotland.
C3 Edinburgh Napier University
RP Napier Univ, Sch Comp, Edinburgh EH10 5DT, Midlothian, Scotland.
EM x.liu@napier.ac.uk
OI Kerridge, Jon/0000-0002-1261-9519
CR Batory D, 2000, IEEE T SOFTWARE ENG, V26, P441, DOI 10.1109/32.846301
   Bosch J, 1999, INFORM SOFTWARE TECH, V41, P257, DOI 10.1016/S0950-5849(99)00007-5
   BRACCIALI A, 2003, J SYSTEMS SOFTWARE
   Brogi A., 2003, ELECT NOTES THEORETI, V85
   FROHLICH AA, 2000, P 4 WORLD MULT SYST
   HAACK C, 2002, 9 INT C ALG METH SOF
   Han J, 1998, 1998 ASIA PACIFIC SOFTWARE ENGINEERING CONFERENCE, PROCEEDINGS, P110, DOI 10.1109/APSEC.1998.733601
   HEINEMAN GT, 1999, P 2 ANN WORKSH COMP
   HEUZEROTH D, 2001, 3 INT C GEN COMP BAS
   KETFI A, 2002, P INT C PAR DISTR PR, P1365
   Khan KM, 2002, IEEE SOFTWARE, V19, P34, DOI 10.1109/52.976939
   Kniesel G, 1999, LECT NOTES COMPUT SC, V1628, P351
   KUCUK B, 1998, P 3 INT WORKSH COMP, P53
   MENS T, 2000, AUTOMATING SUPPORT S, V7
   RALPH UH, 1998, P ECOOP 98
   TAKUDA L, 2001, J AUTOMATED SOFTWARE, P98
   WANG B, 2003, IEEE INT C INF REUS
   WANG B, 2003, 7 IASTED INT C SOFTW
   WANG B, 2003, IEEE INT C SOFTWARE
   ZAREMSKI AM, 1997, ACM T SOFTWARE ENG T, V6
NR 20
TC 5
Z9 5
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD APR
PY 2005
VL 56
IS 1-2
BP 157
EP 170
DI 10.1016/j.scico.2004.11.010
PG 14
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 908SR
UT WOS:000227811000010
OA Green Accepted, Bronze
DA 2024-07-18
ER

PT J
AU Damm, W
   Westphal, B
AF Damm, W
   Westphal, B
TI Live and let die: LSC based verification of UML models
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 1st International Symposium on Formal Methods for Components and Objects
CY NOV 05-11, 2002
CL LEIDEN, NETHERLANDS
SP Lorentz Ctr, IST Project Omega, Dutch Inst Programming Res & Algorithm, Royal Netherlands Acad Arts & Sci, Centrum Wiskunde Informat, Leiden Inst Adv Comp Sci
ID SYMMETRY; SYSTEMS
AB This paper addresses the problem of formal verification of UML models in the semantics of Damm and Josko et al. (Science of Computer Programming, this issue). The problem is twofold in that it requires on the one hand a specification language which is rich enough to express properties about entities that are only created during a run of the system and on the other hand a means to abstract the a priori unbounded state space to a finite one which lends itself to treatment by approved finite state methods.
   As the specification language, the paper proposes to extend Live Sequence Charts as presented by W. Damm and D. Hare] [LSCs: breathing life into message sequence charts, Formal Methods in System Design 19 (1) (2001) 121-141] and J. Klose [Live sequence charts: A graphical formalism for the specification of communication behavior, Ph.D. Thesis, Carl von Ossietzky Universitat Oldenburg, 20031 by means of dynamically bound instance lines and equips it with a formal semantics w.r.t. the UML domain.
   For verification, the paper proposes to transfer to the UML domain the methodology of K.L. McMillan [A methodology for hardware verification using compositional model checking, Science of Computer Programming 37 (2000) 279-309], comprising a first step which is based on results of C.N. Ip and D.L. Dill [Better verification through symmetry, Formal Methods in System Design 9 (1-2) (1996) 41-75] about symmetric data-types and for which F. Xie and J.C. Browne [Integrated state space reduction for model checking executable object-oriented software system designs, in: R.-D. Kutsche, H. Weber (Eds.), FASE, Lecture Notes in Computer Science, vol. 2306, Springer, 20021 coined the term "Query Reduction" and, as second step, an abstract interpretation called "data-type reduction" to construct a finite state over-approximation of the original model for each query. The paper also briefly discusses counter-measures against false-negatives occurring in OF the over-approximation. (C) 2004 Elsevier B.V. All rights reserved.
C1 Carl von Ossietzky Univ Oldenburg, Dept Informat, D-26111 Oldenburg, Germany.
C3 Carl von Ossietzky Universitat Oldenburg
RP Carl von Ossietzky Univ Oldenburg, Dept Informat, D-26111 Oldenburg, Germany.
EM damm@informatik.uni-oldenburg.de; westphal@informatik.uni-oldenburg.de
CR [Anonymous], IEEE COMPUT
   [Anonymous], 1991, The Temporal Logic of Reactive and Concurrent Systems
   Clarke EM, 1999, MODEL CHECKING, P1
   Corbett JC, 2000, LECT NOTES COMPUT SC, V1885, P205
   CSERTAN G, 2002, ASE IEEE COMPUTER SO
   Damm W, 2001, FORM METHOD SYST DES, V19, P121, DOI 10.1023/A:1011279932612
   DAMM W, 2002, LNCS, V2469
   David A, 2002, LECT NOTES COMPUT SC, V2306, P218
   DISTEFANO D, 2003, THESIS U TWENTE
   Emerson EA, 1996, FORM METHOD SYST DES, V9, P105, DOI 10.1007/BF00625970
   FEATHER M, 2001, 16 IEEE INT C AUT SO
   Harel D., 2003, COME LETS PLAY SCENA, DOI 10.1007/978-3-642-19029-2
   Iosif R, 2002, LECT NOTES COMPUT SC, V2318, P22
   Ip CN, 1999, FORM METHOD SYST DES, V14, P273, DOI 10.1023/A:1008723125149
   KLOSE J, 2001, LNCS, V2031, P512
   KLOSE J, 2002, P INT 2002 INT WORKS
   KLOSE J, 2003, THESIS C VONOSSIETZK
   Latella D., 1999, Formal Aspects of Computing, V11, P637, DOI 10.1007/s001659970003
   Lilius J, 1999, LECT NOTES COMPUT SC, V1723, P430
   Marelly R, 2002, ACM SIGPLAN NOTICES, V37, P83, DOI 10.1145/583854.582429
   McMillan K.L., GETTING STARTED SMV
   McMillan KL, 1998, LECT NOTES COMPUT SC, V1427, P110, DOI 10.1007/BFb0028738
   McMillan KL, 1999, LECT NOTES COMPUT SC, V1703, P219
   McMillan KL, 2000, SCI COMPUT PROGRAM, V37, P279, DOI 10.1016/S0167-6423(99)00030-1
   OBER I, 2002, IST33522WP21D212 UML
   *OMG, 2001, OMG UN MOD LANG SPEC
   SCHAFER T, 2001, ELECT NOTES THEORETI, V55
   SCHLOR R, 2000, THESIS C VONOSSIETZK
   XIE F, 2002, LECT NOTES COMPUTER, V2306
   Yahav E, 2003, LECT NOTES COMPUT SC, V2618, P204
NR 30
TC 9
Z9 9
U1 0
U2 0
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR
PY 2005
VL 55
IS 1-3
BP 117
EP 159
DI 10.1016/j.scico.2004.05.013
PG 43
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 899FQ
UT WOS:000227130700005
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Qie, XH
   Narain, S
AF Qie, XH
   Narain, S
TI Using service grammar to diagnose BGP configuration errors
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
AB Often network components work correctly, yet end-to-end services don't. This happens if configuration parameters of components are set to incorrect values. Configuration is a fundamental operation for logically integrating components to set up end-to-end services.
   Configuration errors arise frequently because transforming end-to-end service requirements into component configurations is inherently difficult. Such transformation is largely performed in a manual and localized fashion, resulting in high cost of network operations.
   The Service Grammar technique has been developed to solve the configuration error diagnosis problem, and, more generally, to formalize the process of building complex systems via configuration.
   At its core is a Requirements Language that contains global, high-level constraints upon configuration parameters. These are derived from identifying the notion of "correct configuration" associated with different protocols. These are composed to create system-wide requirements on architecture and policies. A Diagnosis Engine checks if constraints in the Requirements Language are true given definite component configurations, and is used recursively to check composite requirements.
   This paper describes an application of Service Grammar to diagnosing BGP configuration errors. As BGP architecture and policies differ widely from one network to another, it is not possible using previous techniques to check if router configurations implement the intended requirements. Our tools enable administrators to specify system-wide, network-specific requirements and check if they are correctly implemented by component configurations. (C) 2004 Elsevier B.V. All rights reserved.
C1 Google Inc, Mountain View, CA 94043 USA.
   Telcordia Technol, Piscataway, NJ 08854 USA.
C3 Google Incorporated; Ericsson; Telcordia Technologies
RP Google Inc, 1600 Amphitheatre Pkwy, Mountain View, CA 94043 USA.
EM qiexh@cs.princeton.edu
CR ALAETTINOGLU C, 1999, 2622 RPSL
   [Anonymous], 2002, P ACM SIGCOMM AUG
   [Anonymous], 1995, BORDER GATEWAY PROTO
   BARTON M, 2002, P IEEE INT COMM C NE
   GAO L, 2000, P ACM SIGMETRICS JUN
   GOTTLIEB J, 2003, IEEE NETWORK     NOV
   GRIFFIN TG, 2002, P ACM SIGCOMM AUG
   Horn P., 2011, AUTONOMIC COMPUTING
   LAMPSON BW, 2000, P ANN COMP SEC APPL
   NARAIN S, 2001, P IEEE INT COMM C HE
   Narain S., 2001, P ACM SIGPLAN WORKSH
   NARAIN S, 2003, P AMS AUT COMP WORKS
NR 12
TC 2
Z9 2
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV
PY 2004
VL 53
IS 2
BP 125
EP 141
DI 10.1016/j.scico.2003.12.007
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 858DB
UT WOS:000224169400002
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Giegerich, R
   Meyer, C
   Steffen, P
AF Giegerich, R
   Meyer, C
   Steffen, P
TI A discipline of dynamic programming over sequence data
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
ID SECONDARY STRUCTURES; RNA; BIOINFORMATICS; PREDICTION; ALGORITHMS
AB Dynamic programming is a classical programming technique, applicable in a wide variety ofdomains such as stochastic systems analysis, operations research, combinatorics of discrete structures, flow problems, parsing of ambiguous languages, and biosequence analysis. Little methodology has hitherto been available to guide the design of such algorithms. The matrix recurrences that typically describe a dynamic programming algorithm are difficult to construct, error-prone to implement, and, in nontrivial applications, almost impossible to debug completely.
   This article introduces a discipline designed to alleviate this problem. We describe an algebraic style of dynamic programming over sequence data. We define its formal framework, based on a combination of grammars and algebras, and including a formalization of Bellman's Principle. We suggest a language used for algorithm design on a convenient level of abstraction. We outline three ways of implementing this language, including an embedding in a lazy functional language. The workings of the new method are illustrated by a series of examples drawn from diverse areas of computer science. (C) 2004 Elsevier B.V. All rights reserved.
C1 Univ Bielefeld, Fac Technol, D-33501 Bielefeld, Germany.
C3 University of Bielefeld
RP Univ Bielefeld, Fac Technol, Postfach 10 01 31, D-33501 Bielefeld, Germany.
EM robert@techfak.uni-bielefeld.de; emeyer@techfak.uni-bielefeld.de;
   psteffen@techfak.uni-bielefeld.de
CR Aho A. V., 1983, DATA STRUCTURES ALGO
   Akutsu T, 2000, DISCRETE APPL MATH, V104, P45, DOI 10.1016/S0166-218X(00)00186-4
   [Anonymous], 1992, J FUNCT PROGRAM
   [Anonymous], 1998, BIOL SEQUENCE ANAL P
   [Anonymous], 1997, ACM SIGACT NEWS
   [Anonymous], ALGORITHMS
   [Anonymous], 2003, Haskell 98 language and libraries: the revised report
   Bellman R., 1957, Dynamic programming
   Bellman R., 1962, Applied Dynamic Programming
   Bird Richard, 1997, Algebra of Programming
   BRAINERD WS, 1969, INFORM CONTROL, V14, P217, DOI 10.1016/S0019-9958(69)90065-5
   Cormen T.H., 1990, Introduction to Algorithms
   Curtis S, 1997, ALGORITHMIC LANGUAGES AND CALCULI, P1
   Giegerich R, 2000, BIOINFORMATICS, V16, P665, DOI 10.1093/bioinformatics/16.8.665
   Giegerich R, 2002, LECT NOTES COMPUT SC, V2386, P1
   Giegerich R, 2000, LECT NOTES COMPUT SC, V1848, P46
   GIEGERICH R, 1988, LECT NOTES COMPUT SC, V300, P247
   GIEGERICH R, 2002, LNCS, V2422, P349
   GOTOH O, 1982, J MOL BIOL, V162, P705, DOI 10.1016/0022-2836(82)90398-9
   Höchsmann M, 2003, PROCEEDINGS OF THE 2003 IEEE BIOINFORMATICS CONFERENCE, P159, DOI 10.1109/CSB.2003.1227315
   Meyer C, 2002, Z PHYS CHEM, V216, P193, DOI 10.1524/zpch.2002.216.2.193
   MITTEN LG, 1964, OPER RES, V12, P610, DOI 10.1287/opre.12.4.610
   NUSSINOV R, 1978, SIAM J APPL MATH, V35, P68, DOI 10.1137/0135006
   Sczyrba A, 2003, NUCLEIC ACIDS RES, V31, P3767, DOI 10.1093/nar/gkg576
   SMITH TF, 1981, J MOL BIOL, V147, P195, DOI 10.1016/0022-2836(81)90087-5
   Sniedovich M., 1992, DYNAMIC PROGRAMMING
   Wuchty S, 1999, BIOPOLYMERS, V49, P145, DOI 10.1002/(SICI)1097-0282(199902)49:2<145::AID-BIP4>3.0.CO;2-G
   ZUKER M, 1984, B MATH BIOL, V46, P591, DOI 10.1016/S0092-8240(84)80062-2
   ZUKER M, 1981, NUCLEIC ACIDS RES, V9, P133, DOI 10.1093/nar/9.1.133
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
NR 40
TC 66
Z9 69
U1 0
U2 1
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN
PY 2004
VL 51
IS 3
BP 215
EP 263
DI 10.1016/j.scico.2003.12.005
PG 49
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 827YO
UT WOS:000221939800002
DA 2024-07-18
ER

PT J
AU Burgess, M
AF Burgess, M
TI On the theory of system administration
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE computer models; dynamical system; system administration; mean field
   theory
AB This paper describes a mean field approach to defining and implementing policy-based system administration. The concepts of regulation and optimization are used to define the notion of maintenance. These are then used to evaluate stable equilibria of system configuration, that are associated with sustainable policies for system management. Stable policies are thus associated with fixed points of a mapping that describes the evolution of the system. In general, such fixed points are the solutions of strategic games. A consistent system policy is not sufficient to guarantee compliance; the policy must also be implementable and maintainable. The paper proposes two types of model to understand policy driven management of Human-Computer systems: (i) average dynamical descriptions of computer system variables which provide a quantitative basis for decision, and (ii) competitive game theoretical descriptions that select optimal courses of action by generalizing the notion of configuration equilibria. It is shown how models can be formulated and simple examples are given. (C) 2003 Elsevier B.V. All rights reserved.
C1 Oslo Univ Coll, N-0254 Oslo, Norway.
C3 Oslo Metropolitan University (OsloMet)
RP Oslo Univ Coll, Cort Adelers Gate 30, N-0254 Oslo, Norway.
EM mark.burgess@iu.hio.no
CR [Anonymous], 1944, THEORY GAMES EC BEHA, DOI DOI 10.1515/9781400829460
   [Anonymous], 1949, MATH MODEL COMMUNICA
   APTHORPE R, 2001, P 15 SYST ADM C LISA, P31
   Berge C., 2001, The theory of graphs
   Bouchard J.P., 2000, Theory of Financial Risks: From Statistical Physics to Risk Management
   Burgess CP, 2000, ASTROPART PHYS, V14, P1, DOI 10.1016/S0927-6505(00)00102-X
   Burgess M, 1998, PROCEEDINGS OF THE TWELFTH SYSTEMS ADMINISTRATION CONFERENCE (LISA XII), P283
   Burgess M, 2000, PHYS REV E, V62, P1738, DOI 10.1103/PhysRevE.62.1738
   Burgess M, 2002, ACM T COMPUT SYST, V20, P125, DOI 10.1145/507052.507054
   Burgess M, 1997, SOFTWARE PRACT EXPER, V27, P1083, DOI 10.1002/(SICI)1097-024X(199709)27:9<1083::AID-SPE126>3.0.CO;2-H
   BURGESS M, 1995, COMPUT SYST, V8, P309
   Burgess M, 2001, INT J MOD PHYS C, V12, P759, DOI 10.1142/S012918310100195X
   BURGESS M, 2002, UNPUB SCI COMPUT PRO
   CHEUNG SC, 1996, 18 INT C SOFTW ENG I
   Cohen R, 2000, PHYS REV LETT, V85, P4626, DOI 10.1103/PhysRevLett.85.4626
   COUCH A, 2001, P 15 SYST ADM C LISA, P63
   Couch AL, 1999, USENIX ASSOCIATION PROCEEDINGS OF THE THIRTEENTH SYSTEMS ADMINISTRATION CONFERENCE (LISA XIII), P123
   Diao YX, 2002, LECT NOTES COMPUT SC, V2506, P42
   Dresher M., 1961, GAMES STRATEGY THEOR, VNo
   Evard R, 1997, PROCEEDINGS OF THE ELEVENTH SYSTEMS ADMINISTRATION CONFERENCE (LISA XI), P179
   Forrest S, 1997, COMMUN ACM, V40, P88, DOI 10.1145/262793.262811
   Glance N, 1991, INT J MOD PHYS C, V2, P735, DOI 10.1142/S0129183191000974
   Goudarzi KM, 1996, THIRD INTERNATIONAL CONFERENCE ON CONFIGURABLE DISTRIBUTED SYSTEMS, PROCEEDINGS, P62, DOI 10.1109/CDS.1996.509347
   GRIMMETT G, 1982, PROBABILITY RANDOM P
   HELLERSTEIN JL, 1999, P IFIP IEEE INM, V6, P309
   Hogan C, 1995, USENIX ASSOCIATION PROCEEDINGS OF THE NINTH SYSTEMS ADMINISTRATION CONFERENCE (LISA IX), P125
   HOGG T, 1987, PHYS REP, V156, P227, DOI 10.1016/0370-1573(87)90096-2
   HOOGENBOOM P, 1993, PROCEEDINGS OF THE SUMMER 1993 USENIX CONFERENCE, P15
   *IFIP IEEE, 1989, IFIP IM C SER P, P1989
   KRAMER J, 1990, IEEE T SOFTWARE ENG, V16, P1293, DOI 10.1109/32.60317
   Myerson R. B., 2013, Game theory
   NEUMANN JV, 1952, PROBABILTISTIC LOGIC, V5
   Osterlund R, 2000, USENIX ASSOCIATION PROCEEDINGS OF THE FOURTEENTH SYSTEMS ADMINISTRATION CONFERENCE (LISA XIV), P147
   Seltzer M, 1997, SIXTH WORKSHOP ON HOT TOPICS IN OPERATING SYSTEMS, PROCEEDINGS, P124, DOI 10.1109/HOTOS.1997.595194
   SHERIDAN TB, 1996, IMPROVING FUNCTION A, P179
   Somayaji A, 2000, USENIX ASSOCIATION PROCEEDINGS OF THE NINTH USENIX SECURITY SYMPOSIUM, P185
   Traugott S, 2002, USENIX ASSOCIATION PROCEEDINGS OF THE SIXTEENTH SYSTEMS ADMINISTRATION CONFERENCE (LISA XVI), P99
   Traugott S, 1998, PROCEEDINGS OF THE TWELFTH SYSTEMS ADMINISTRATION CONFERENCE (LISA XII), P181
   West D.B., 2001, INTRO GRAPH THEORY
   WILSON KG, 1971, PHYS REV B, V4, P1144
   Yaïche H, 2000, IEEE ACM T NETWORK, V8, P667, DOI 10.1109/90.879352
   ZADEH LA, 1973, IEEE T SYST MAN CYB, VSMC3, P28, DOI 10.1109/TSMC.1973.5408575
   ZWICKY ED, 1989, P 3 SYST ADM C LISA, P41
NR 43
TC 15
Z9 18
U1 0
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC
PY 2003
VL 49
IS 1-3
BP 1
EP 46
DI 10.1016/j.scico.2003.08.001
PG 46
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 747KB
UT WOS:000186802700001
DA 2024-07-18
ER

PT J
AU Curtis, SA
AF Curtis, SA
TI The classification of greedy algorithms
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE greedy algorithms
AB This paper presents principles for the classification of greedy algorithms for optimization problems. These principles are made precise by their expression in the relational calculus, and illustrated by various examples. A discussion compares this work to other greedy algorithms theory. (C) 2003 Elsevier B.V. All rights reserved.
C1 Oxford Brookes Univ, Dept Comp, Oxford OX33 1HX, England.
C3 Oxford Brookes University
RP Curtis, SA (corresponding author), Oxford Brookes Univ, Dept Comp, Oxford OX33 1HX, England.
CR Bird R. S., 1993, Formal Aspects of Computing, V5, P61, DOI 10.1007/BF01211316
   BIRD RS, 1992, SCI COMPUT PROGRAM, V18, P281, DOI 10.1016/0167-6423(92)90020-C
   BIRD RS, 1993, LNCS, V755, P43
   CHANG L, 1976, J ACM, V23, P418, DOI 10.1145/321958.321961
   CHANG SK, 1970, J ACM, V17, P113, DOI 10.1145/321556.321567
   Edmonds J., 1971, MATH PROGRAM, V1, P126
   HELMAN P, 1993, SIAM J DISCRETE MATH, V6, P274, DOI 10.1137/0406021
   HUFFMAN DA, 1952, P IRE, V40, P1098, DOI 10.1109/JRPROC.1952.273898
   Jarnk V., 1930, Prce Moravsk Prodovdeck Spolenosti v Brn, V6, P57
   KECECIOGLU JD, 1995, ALGORITHMICA, V13, P7, DOI 10.1007/BF01188580
   KORTE B, 1984, SIAM J ALGEBRA DISCR, V5, P229, DOI 10.1137/0605024
   Korte B., 1981, LECT NOTES COMPUTER, V117, P205
   Kruskal J. B., 1956, Proceedings of the American Mathematical Society, V7, P48
   LAWLER EL, 1973, MANAGE SCI, V19, P544, DOI 10.1287/mnsc.19.5.544
   MEERTENS L, 1986, CWI MONOGRAPHS, V1, P289
   PRIM RC, 1957, AT&T TECH J, V36, P1389, DOI 10.1002/j.1538-7305.1957.tb01515.x
   SCHWARTZ ES, 1964, INFORM CONTROL, V7, P37, DOI 10.1016/S0019-9958(64)90241-4
   WAGNER RA, 1973, COMMUN ACM, V16, P148, DOI 10.1145/361972.361982
   Whitney H, 1935, AM J MATH, V57, P509, DOI 10.2307/2371182
   ZANTEMA H, 1992, SCI COMPUT PROGRAM, V18, P39, DOI 10.1016/0167-6423(92)90033-8
   [No title captured]
   [No title captured]
NR 22
TC 31
Z9 37
U1 3
U2 33
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC
PY 2003
VL 49
IS 1-3
BP 125
EP 157
DI 10.1016/j.scico.2003.09.001
PG 33
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 747KB
UT WOS:000186802700004
OA Bronze
DA 2024-07-18
ER

PT J
AU van Eerd, J
   Groote, JF
   Hijma, P
   Martens, J
   Osama, M
   Wijs, A
AF van Eerd, Johri
   Groote, Jan Friso
   Hijma, Pieter
   Martens, Jan
   Osama, Muhammad
   Wijs, Anton
TI Innermost many-sorted term rewriting on GPUs
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Term rewriting; GPU; Programming; Parallel computing
ID PERFORMANCE
AB This article presents a way to implement many-sorted term rewriting on a GPU. This is done by letting the GPU repeatedly perform a massively parallel evaluation of all subterms. Innermost many-sorted term rewriting is experimentally compared with a relaxed form of innermost many-sorted term rewriting, and two different garbage collection mechanisms, to remove terms that are no longer needed, are discussed and experimentally compared. It is concluded that when the many-sorted term rewrite systems exhibit sufficient internal parallelism, GPU rewriting substantially outperforms the CPU. Both relaxed innermost many-sorted rewriting and garbage collection further improve this performance. Since the implementation can probably be even further optimised, and because in any case GPUs will become much more powerful in the future, this suggests that GPUs are an interesting platform for (many-sorted) term rewriting. As term rewriting can be viewed as a universal programming language, this also opens a route towards programming GPUs by term rewriting, especially for irregular computations.(c) 2022 The Author(s). Published by Elsevier B.V. This is an open access article under the CC BY license (http://creativecommons.org/licenses/by/4.0/).
C1 [van Eerd, Johri; Groote, Jan Friso; Martens, Jan; Osama, Muhammad; Wijs, Anton] Eindhoven Univ Technol, Eindhoven, Netherlands.
   [Hijma, Pieter] Vrije Univ Amsterdam, Amsterdam, Netherlands.
C3 Eindhoven University of Technology; Vrije Universiteit Amsterdam
RP Wijs, A (corresponding author), Eindhoven Univ Technol, Eindhoven, Netherlands.
EM johrivaneerd@hotmail.com; j.f.groote@tue.nl; pieter@cs.vu.nl;
   j.m.martens@tue.nl; o.m.m.muhammad@tue.nl; a.j.wijs@tue.nl
RI Wijs, Anton J./A-9694-2019
OI Martens, Jan/0000-0003-4797-7735; Groote, Jan Friso/0000-0003-2196-6587
FU  [612.001751]
FX Acknowledgements This work is carried out in the context of the NWO AVVA
   project 612.001751.
CR Barendregt H. P., 1987, Future Generation Computer Systems, V3, P261, DOI 10.1016/0167-739X(87)90030-6
   Billeter M., 2009, Proceedings of the Conference on High Performance Graphics 2009, HPG '09, P159, DOI [10.2312/EGGH/HPG09/159-166, DOI 10.1145/1572769.1572795, 10. 1145/1572769. 157279]
   Bosnacki Dragan, 2010, Proceedings 2010 9th International Workshop on Parallel & Distributed Methods in Verification and 2nd International Workshop on High Performance Computational Systems Biology (PDMC-HiBi 2010), P17, DOI 10.1109/PDMC-HiBi.2010.11
   Bosnacki D, 2012, BMC BIOINFORMATICS, V13, DOI 10.1186/1471-2105-13-281
   Bunte O, 2019, LECT NOTES COMPUT SC, V11428, P21, DOI 10.1007/978-3-030-17465-1_2
   CHENG J., 2014, Professional CUDA c Programming
   Dejanovic I, 2017, KNOWL-BASED SYST, V115, P1, DOI 10.1016/j.knosys.2016.10.023
   Durán F, 2019, LECT NOTES COMPUT SC, V11429, P93, DOI 10.1007/978-3-030-17502-3_6
   Fokkink W, 1998, ACM T PROGR LANG SYS, V20, P679, DOI 10.1145/291889.291903
   GOGUEN JA, 1988, ARTIF INTELL, V37, P123, DOI 10.1016/0004-3702(88)90052-5
   Heldens S, 2020, ACM COMPUT SURV, V53, DOI 10.1145/3372390
   Henriksen T, 2018, FHPC'18: PROCEEDINGS OF THE 7TH ACM SIGPLAN INTERNATIONAL WORKSHOP ON FUNCTIONAL HIGH-PERFORMANCE COMPUTING, P10, DOI 10.1145/3264738.3264740
   Henriksen T, 2017, ACM SIGPLAN NOTICES, V52, P556, DOI [10.1145/3140587.3062354, 10.1145/3062341.3062354]
   Hijma P, 2015, CONCURR COMP-PRACT E, V27, P4515, DOI 10.1002/cpe.3416
   Huet Gerard, 1978, 283 IRIA
   JONES SLP, 1987, LECT NOTES COMPUT SC, V274, P98
   KAMPERMAN JFT, 1996, THESIS U AMSTERDAM
   Khairy M, 2019, J PARALLEL DISTR COM, V127, P65, DOI 10.1016/j.jpdc.2018.11.012
   Klop Jan Willem, 1993, HDB LOGIC COMPUTER S, V2, P1
   Lee VW, 2010, CONF PROC INT SYMP C, P451, DOI 10.1145/1816038.1816021
   Maas M, 2012, ACM SIGPLAN NOTICES, V47, P25, DOI 10.1145/2426642.2259002
   McDonell T.L., 2015, THESIS U NEW S WALES
   Meseguer J, 1998, LECT NOTES COMPUT SC, V1376, P18
   Nasre Abhinav R., 2016, CASES
   Nasre R, 2013, INT PARALL DISTRIB P, P463, DOI 10.1109/IPDPS.2013.28
   Nasre R, 2013, ACM SIGPLAN NOTICES, V48, P147, DOI 10.1145/2517327.2442531
   Osama Muhammad, 2021, Tools and Algorithms for the Construction and Analysis of Systems. 27th International Conference, TACAS 2021. Held as Part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2021. Proceedings. Lecture Notes in Computer Science (LNCS 12651), P133, DOI 10.1007/978-3-030-72016-2_8
   Osama M, 2021, LECT NOTES COMPUT SC, V12760, P447, DOI 10.1007/978-3-030-81688-9_21
   Osama M, 2019, LECT NOTES COMPUT SC, V11427, P21, DOI 10.1007/978-3-030-17462-0_2
   Osama M, 2018, J ELECTRON TEST, V34, P511, DOI 10.1007/s10836-018-5747-4
   Springer M, 2019, PROCEEDINGS OF THE 2019 ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON MEMORY MANAGEMENT (ISMM '19), P14, DOI 10.1145/3315573.3329979
   Term Terese, 2003, CAMBRIDGE TRACTS THE, V55
   Van Eerd J., 2021, LNCS, V12818, P175
   Wijs A., 2014, Proc. of TACAS 2014: the 20th International Conference on Tools and Algorithms for the Construction and Analysis of Systems, V8413, P233, DOI DOI 10.1007/978-3-642-54862-816
   Wijs A, 2016, LECT NOTES COMPUT SC, V9995, P694, DOI 10.1007/978-3-319-48989-6_42
NR 35
TC 1
Z9 1
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN
PY 2023
VL 225
AR 102910
DI 10.1016/j.scico.2022.102910
EA DEC 2022
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 7S4SH
UT WOS:000910744500001
OA Green Published, hybrid
DA 2024-07-18
ER

PT J
AU Afzal, U
   Mahmood, T
   Usmani, S
AF Afzal, Uzma
   Mahmood, Tariq
   Usmani, Shazia
TI Evolutionary Computing to solve product inconsistencies in Software
   Product Lines
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Information systems; Genetic Algorithms; Software Product Line;
   Optimization; Inconsistencies resolution
ID GENETIC ALGORITHMS; PARAMETER CONTROL; FEATURE-SELECTION; FEATURE
   MODELS; CONFIGURATIONS; OPTIMIZATION
AB In Software Product Lines (SPLs), multiple design teams work collectively to configure products. Often, having multiple sub-designs leads to inconsistencies which prevent and delay the configuration of the final product at the end. Solutions are available to identify and resolve these inconsistencies for limited scale SPLs. For large scale and industrial SPLs, resolution of inconsistencies is still a potential research topic. In this paper, we propose, implement and validate an application of evolutionary computation, particularly genetic algorithms, to resolve inconsistencies in large scale SPL products. We label our approach ga-SPLIS (genetic algorithm-Software Product LIne Solution). Using a concrete experimental methodology with different feature set sizes and multiple standard performance metrics, we generate results which validate the applicability of ga-SPLIS for the SPL community.(c) 2022 Elsevier B.V. All rights reserved.
C1 [Afzal, Uzma; Usmani, Shazia] Fed Urdu Univ Arts Sci & Technol FUUAST, Dept Comp Sci, Karachi, Pakistan.
   [Mahmood, Tariq] Inst Business Adm IBA, Karachi, Pakistan.
C3 Institute of Business Administration, Karachi
RP Afzal, U (corresponding author), Fed Urdu Univ Arts Sci & Technol FUUAST, Dept Comp Sci, Karachi, Pakistan.
EM uzma.afzal@fuuast.edu.pk
CR Afzal U., 2010, GLOB J COMPUT SCI TE
   Afzal U, 2021, INT J COMPUT INT SYS, V14, P1880, DOI 10.2991/ijcis.d.210620.003
   Afzal U, 2020, IEEE ACCESS, V8, P160231, DOI 10.1109/ACCESS.2020.3020795
   Afzal U, 2016, COMPUT STAND INTER, V48, P30, DOI 10.1016/j.csi.2016.03.003
   Afzal U, 2014, 17TH IEEE INTERNATIONAL MULTI TOPIC CONFERENCE 2014, P137, DOI 10.1109/INMIC.2014.7097326
   Alsawalqah HI, 2014, J SYST SOFTWARE, V98, P79, DOI 10.1016/j.jss.2014.08.034
   [Anonymous], 2013, GENETIC ALGORITHMS O
   Arcaini P, 2019, J SYST SOFTWARE, V150, P64, DOI 10.1016/j.jss.2019.01.045
   Arcuri A, 2014, SOFTW TEST VERIF REL, V24, P219, DOI 10.1002/stvr.1486
   Ardis M, 2000, SOFTWARE PRACT EXPER, V30, P825, DOI 10.1002/(SICI)1097-024X(200006)30:7<825::AID-SPE322>3.0.CO;2-1
   Bagheri E, 2010, LECT NOTES COMPUT SC, V6287, P300, DOI 10.1007/978-3-642-15579-6_21
   Barros Mrciode Oliveira., 2011, RELATE DIA, V5
   Bellu R., 2018, Microsoft Dynamics 365 For Dummies
   Bhushan M, 2020, SOFTWARE QUAL J, V28, P1507, DOI 10.1007/s11219-020-09522-1
   Bhushan M, 2018, EXPERT SYST, V35, DOI 10.1111/exsy.12256
   Bhushan M, 2018, J SYST SOFTWARE, V137, P605, DOI 10.1016/j.jss.2017.06.002
   Bielza C, 2013, J COMPUT SCI TECH-CH, V28, P720, DOI 10.1007/s11390-013-1370-0
   Blum Christian, 2008, P43, DOI 10.1007/978-3-540-74089-6_2
   Brace I., 2018, Questionnaire design: How to plan, structure and write survey material for effective market research
   Brooke J., 1996, USABILITY EVALUATION, P189, DOI DOI 10.1201/9781498710411-35
   Camillieri C., 2016, 10 WORKSH MOD EV COL
   Clements P., 2002, Software product lines
   Cruz J, 2013, 2013 IEEE CONGRESS ON EVOLUTIONARY COMPUTATION (CEC), P2229
   DEJONG KA, 1991, LECT NOTES COMPUT SC, V496, P38
   Eiben AE, 2007, STUD COMPUT INTELL, V54, P19
   Eiben A.E., 2015, NAT COMP SER, P223, DOI 10.1007/978-3-662-44874-8_15
   Elfaki A.O., 2008, P SOFTW PROD LIN C S SPLC, V2, P217
   Sánchez LE, 2019, SCI COMPUT PROGRAM, V172, P264, DOI 10.1016/j.scico.2018.12.002
   Flores Rick., 2012, Proceedings of the 16th International Software Product Line Conference, V1, P259
   Guo JM, 2019, SOFTW SYST MODEL, V18, P1447, DOI 10.1007/s10270-017-0610-0
   Guo JM, 2011, J SYST SOFTWARE, V84, P2208, DOI 10.1016/j.jss.2011.06.026
   Hariyanto D, 2020, KNOWL MANAG E-LEARN, V12, P85, DOI 10.34105/j.kmel.2020.12.005
   Horcas JM, 2020, SPLC'19: PROCEEDINGS OF THE 23RD INTERNATIONAL SYSTEMS AND SOFTWARE PRODUCT LINE CONFERENCE, VOL A, P164, DOI 10.1145/3336294.3336304
   Hubaux A., 2012, THESIS U NAMUR BELGI
   Kang K. C., 1990, Technical Report
   Katoch S, 2021, MULTIMED TOOLS APPL, V80, P8091, DOI 10.1007/s11042-020-10139-6
   Lebib FZ, 2017, INT J INFORM MANAGE, V37, P741, DOI 10.1016/j.ijinfomgt.2017.07.011
   Lund A M., 2001, USABILITY INTERFACE, V8, P3, DOI DOI 10.1177/1078087402250360
   Luo DZ, 2009, 2009 INTERNATIONAL CONFERENCE ON COMPUTER ENGINEERING AND TECHNOLOGY, VOL II, PROCEEDINGS, P256, DOI 10.1109/ICCET.2009.125
   Luszczak A., 2019, WHAT IS MICROSOFT DY, P1, DOI [10.1007/978-3-658-24107-0_1, DOI 10.1007/978-3-658-24107-0_1]
   Man KF, 1996, IEEE T IND ELECTRON, V43, P519, DOI 10.1109/41.538609
   Marler RT, 2004, STRUCT MULTIDISCIP O, V26, P369, DOI 10.1007/s00158-003-0368-6
   Mathwork, 2016, VARY MUTATION CROSSO
   Muller J., 2011, Proceedings of the 2011 15th International Software Product Line Conference (SPLC 2011), P15, DOI 10.1109/SPLC.2011.18
   Nan Niu, 2010, 2010 IEEE Proceedings of 34th Annual Computer Software and Applications Conference (COMPSAC 2010), P337, DOI 10.1109/COMPSAC.2010.41
   Noorian M., 2011, P DMS P 17 INT C DISTR MUL, V11, P158
   Pohl K., 2005, SOFTWARE PRODUCT LIN, V10
   Rylander B., 2002, POPULATION, V100, P900
   Saber T., 2021, SN COMPUT SCI, V2, P1
   Sayyad AS, 2013, IEEE INT CONF AUTOM, P465, DOI 10.1109/ASE.2013.6693104
   Sayyad AS, 2013, 2013 1ST INTERNATIONAL WORKSHOP ON COMBINING MODELLING AND SEARCH-BASED SOFTWARE ENGINEERING (CMSBSE), P22, DOI 10.1109/CMSBSE.2013.6604432
   Segura S., 2012, Proceedings of the Sixth International Workshop on Variability Modeling of Software-Intensive Systems, P63, DOI DOI 10.1145/2110147.2110155
   SEI, 2012, FRAMEWORK SOFTWARE P
   SPLC, 2014, SOFTWARE PRODUCT LIN
   SRINIVAS M, 1994, IEEE T SYST MAN CYB, V24, P656, DOI 10.1109/21.286385
   Thao C., 2012, THESES DISSERTATIONS
   Thao C, 2008, FIFTEENTH IEEE INTERNATIONAL CONFERENCE AND WORKSHOPS ON THE ENGINEERING OF COMPUTER-BASED SYSTEMS, PROCEEDINGS, P265, DOI 10.1109/ECBS.2008.53
   Trinidad P, 2008, J SYST SOFTWARE, V81, P883, DOI 10.1016/j.jss.2007.10.030
   Trinidad P., 2009, 3 INT WORKSH VAR MOD VAMOS, V9, P145
   Van Gurp Jilles., 2008, COMBINING ADVANTAGES
   Wang HH, 2007, J WEB SEMANT, V5, P117, DOI 10.1016/j.websem.2006.11.006
   Wang Ying-lin, 2014, Journal of Shanghai Jiaotong University (Science), V19, P50, DOI 10.1007/s12204-013-1468-0
   White J, 2010, J SYST SOFTWARE, V83, P1094, DOI 10.1016/j.jss.2010.02.017
   White J, 2009, J SYST SOFTWARE, V82, P1268, DOI 10.1016/j.jss.2009.02.011
   Wu ZQ, 2009, CCDC 2009: 21ST CHINESE CONTROL AND DECISION CONFERENCE, VOLS 1-6, PROCEEDINGS, P1880, DOI 10.1109/CCDC.2009.5192848
NR 65
TC 0
Z9 0
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 1
PY 2022
VL 224
AR 102875
DI 10.1016/j.scico.2022.102875
EA OCT 2022
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 5M4KB
UT WOS:000871065100001
DA 2024-07-18
ER

PT J
AU Basile, D
   ter Beek, MH
AF Basile, Davide
   ter Beek, Maurice H.
TI Contract Automata Library
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Service composition; Controller synthesis; Behavioural contracts;
   Software quality
ID BEHAVIOR COMPOSITION; ORCHESTRATION
AB Contract automata facilitate the specification, composition, and synthesis of behavioural contracts, comprehending modalities and configurations. Contract automata are supported by a software API called Contract Automata Library. This paper accompanies the software artefact by discussing its architecture, showing some usage examples and presenting recent improvements of the software in terms of quality, availability, usability, and documentation. (C) 2022 Elsevier B.V. All rights reserved.
C1 [Basile, Davide; ter Beek, Maurice H.] ISTI CNR, Formal Methods & Tools Lab, Pisa, Italy.
C3 Consiglio Nazionale delle Ricerche (CNR); Istituto di Scienza e
   Tecnologie dell'Informazione "Alessandro Faedo" (ISTI-CNR)
RP Basile, D (corresponding author), ISTI CNR, Formal Methods & Tools Lab, Pisa, Italy.
EM davide.basile@isti.cnr.it
RI BASILE, Davide/AAX-1112-2020
OI BASILE, Davide/0000-0002-7196-6609
FU MIUR PRIN [2017FTXR7S]
FX Research funded by the MIUR PRIN 2017FTXR7S project IT MaTTerS (Methods
   and Tools for Trustworthy Smart Systems). The authors would like to
   thank the anonymous reviewers for their excellent suggestions that have
   improved the paper considerably.
CR Abreu J, 2009, LECT NOTES COMPUT SC, V5522, P219, DOI 10.1007/978-3-642-02138-1_15
   [Anonymous], GPLV3 LICENSE
   [Anonymous], REPOSITORY SCI COMPU
   [Anonymous], JAVADOC SITE CATLIB
   [Anonymous], REPOSITORY CONTRACT
   [Anonymous], CATLIB PACKAGES REPO
   [Anonymous], GITHUB ACTIONS WORKF
   [Anonymous], REPOSITORY TIC TAC T
   [Anonymous], GUIDELINES SCI COMPU
   [Anonymous], CATLIB NAVIGABLE SIT
   [Anonymous], CONTRACT AUTOMATA TU
   [Anonymous], CATLIB TECHNICAL REP
   [Anonymous], Maven Central Repository
   [Anonymous], CATLIB DIAGRAM REPOR
   [Anonymous], GITHUB WEBSITE CATLI
   Atampore F, 2019, DISCRETE EVENT DYN S, V29, P297, DOI 10.1007/s10626-019-00282-0
   Autili M, 2020, SCI COMPUT PROGRAM, V197, DOI 10.1016/j.scico.2020.102498
   Balbiani P, 2008, IEEE CONGRESS ON SERVICES 2008, PT I, PROCEEDINGS, P521, DOI 10.1109/SERVICES-1.2008.11
   Barati M, 2015, IEEE SYS MAN CYBERN, P115, DOI 10.1109/SMC.2015.33
   Bartoletti M, 2015, LECT NOTES COMPUT SC, V9465, P103, DOI 10.1007/978-3-319-25527-9_9
   Basile Davide, 2021, Coordination Models and Languages. 23rd IFIP WG 6.1 International Conference, COORDINATION 2021 Held as Part of the 16th International Federated Conference on Distributed Computing Techniques, DisCoTec 2021. Proceedings. Lecture Notes in Computer Science (LNCS 12717), P225, DOI 10.1007/978-3-030-78142-2_14
   Basile D, 2016, J LOG ALGEBR METHODS, V85, P425, DOI 10.1016/j.jlamp.2015.09.011
   Basile D., 2022, LNCS
   Basile D., 2017, P 11 INT WORKSH VAR, P20, DOI DOI 10.1145/3023956.3023965
   Basile D, 2023, Arxiv, DOI arXiv:2203.14122
   Basile D, 2022, EMPIR SOFTW ENG, V27, DOI 10.1007/s10664-022-10149-y
   Basile Davide, 2022, Zenodo, DOI 10.5281/ZENODO.6704433
   Basile D, 2020, LOG METH COMPUT SCI, V16, DOI 10.23638/LMCS-16(2:9)2020
   Basile D, 2020, INNOV SYST SOFTW ENG, V16, P199, DOI 10.1007/s11334-019-00353-3
   Basile D, 2020, SCI COMPUT PROGRAM, V187, DOI 10.1016/j.scico.2019.102344
   Basile D, 2018, SPLC'18: PROCEEDINGS OF THE 22ND INTERNATIONAL SYSTEMS AND SOFTWARE PRODUCT LINE CONFERENCE - VOL 2, P11, DOI 10.1145/3236405.3236408
   Basile D, 2017, 21ST INTERNATIONAL SYSTEM & SOFTWARE PRODUCT LINE CONFERENCE (SPLC 2017), VOL 2, P117, DOI 10.1145/3109729.3109741
   Basile D, 2017, 21ST INTERNATIONAL SYSTEM & SOFTWARE PRODUCT LINE CONFERENCE (SPLC 2017), VOL 2, P3, DOI 10.1145/3109729.3109760
   Basile D, 2016, LOG METH COMPUT SCI, V12, DOI 10.2168/LMCS-12(4:6)2016
   Basile D, 2017, MODELSWARD: PROCEEDINGS OF THE 5TH INTERNATIONAL CONFERENCE ON MODEL-DRIVEN ENGINEERING AND SOFTWARE DEVELOPMENT, P679, DOI 10.5220/0006291106790686
   Basile D, 2016, LECT NOTES COMPUT SC, V9688, P62, DOI 10.1007/978-3-319-39570-8_5
   Bettini L., 2019, TEST DRIVEN DEV BUIL
   Boswell D., 2011, ART READABLE CODE
   Bouguettaya A, 2017, COMMUN ACM, V60, P64, DOI 10.1145/2983528
   Caillaud B., 2002, SYNTHESIS CONTROL DI
   Campbell GA, 2018, 2018 IEEE/ACM INTERNATIONAL CONFERENCE ON TECHNICAL DEBT (TECHDEBT), P57, DOI 10.1145/3194164.3194186
   Cheon Y., 2016, UTEPCS1683
   De Giacomo G, 2013, ARTIF INTELL, V196, P106, DOI 10.1016/j.artint.2012.12.001
   Farhat H, 2018, IEEE ACCESS, V6, P59779, DOI 10.1109/ACCESS.2018.2874564
   Felli P, 2017, IEEE T AUTOMAT CONTR, V62, P986, DOI 10.1109/TAC.2016.2570748
   Ferrari A, 2023, ACM COMPUT SURV, V55, DOI 10.1145/3520480
   Goetz B, 2006, JAVA CONCURRENCY PRA
   Goorden M. A., 2020, Dependable Software Engineering. Theories, Tools, and Applications. 6th International Symposium, SETTA 2020. Proceedings. Lecture Notes in Computer Science (LNCS 12153), P1, DOI 10.1007/978-3-030-62822-2_1
   Guanciale R, 2021, SCI COMPUT PROGRAM, V202, DOI 10.1016/j.scico.2020.102535
   Henderson K, 2021, SYSTEMS ENG, V24, P51, DOI 10.1002/sys.21566
   JGraphX, US
   Kouzapas D, 2018, SCI COMPUT PROGRAM, V155, P52, DOI 10.1016/j.scico.2017.10.006
   Lange J, 2015, ACM SIGPLAN NOTICES, V50, P221, DOI [10.1145/2775051.2676964, 10.1145/2676726.2676964]
   Martin R. C., 2008, CLEAN CODE
   McCabe T. J., 1976, IEEE Transactions on Software Engineering, VSE-2, P308, DOI 10.1109/TSE.1976.233837
   Peltz C, 2003, COMPUTER, V36, P46, DOI 10.1109/MC.2003.1236471
   RAMADGE PJ, 1987, SIAM J CONTROL OPTIM, V25, P206, DOI 10.1137/0325013
   Smart J.F., 2014, BDD ACTION BEHAV DRI
   Snook C, 2018, LECT NOTES COMPUT SC, V11232, P21, DOI 10.1007/978-3-030-02450-5_2
   ter Beek M.H., 2007, P 2 INT C INTERNET W, P151
   ter Beek MH, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P613, DOI 10.1145/1368088.1368173
   TERBEEK MH, 2009, P 24 ANN ACM S APPL, P2111, DOI DOI 10.1145/1529282.1529751
   Tockey S., 2019, ENG SOFTWARE MODEL B
   Warburton R., 2014, JAVA 8 LAMBDAS PRAGM
NR 64
TC 6
Z9 6
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 1
PY 2022
VL 221
AR 102841
DI 10.1016/j.scico.2022.102841
PG 11
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 6M8WI
UT WOS:000889143200001
DA 2024-07-18
ER

PT J
AU Gleirscher, M
   Calinescu, R
   Douthwaite, J
   Lesage, B
   Paterson, C
   Aitken, J
   Alexander, R
   Law, J
AF Gleirscher, Mario
   Calinescu, Radu
   Douthwaite, James
   Lesage, Benjamin
   Paterson, Colin
   Aitken, Jonathan
   Alexander, Rob
   Law, James
TI Verified synthesis of optimal safety controllers for human-robot
   collaboration
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Risk-informed design automation; Formal verification; Probabilistic
   model checking; Collaborative robot safety; Digital twins
ID DIGITAL TWIN; GUARANTEES; FRAMEWORK; SOFTWARE; SERVICE; MODEL
AB We present a tool-supported approach to the synthesis, verification, and testing of the control software responsible for the safety of human-robot interaction in manufacturing processes that use collaborative robots. In human-robot collaboration, software-based safety controllers are used to improve operational safety, for example, by triggering shutdown mechanisms or emergency stops to reduce the likelihood of accidents. Complex robotic tasks and increasingly close human-robot interaction pose new challenges to controller developers and certification authorities. Key among these challenges is the need to assure the correctness of safety controllers under explicit (and preferably weak) assumptions. Our integrated synthesis, verification, and test approach is informed by the process, risk analysis, and relevant safety regulations for the target application. Controllers are selected from a design space of feasible controllers according to a set of optimality criteria, are formally verified against correctness criteria, and are translated into executable code and tested in a digital twin. The resulting controller can detect the occurrence of hazards, move the process into a safe state, and, under certain circumstances, return the process to an operational state from which it can resume its original task. We show the effectiveness of our software engineering approach through a case study involving the development of a safety controller for a manufacturing work cell equipped with a collaborative robot. (c) 2022 The Author(s). Published by Elsevier B.V.
C1 [Gleirscher, Mario; Calinescu, Radu; Lesage, Benjamin; Paterson, Colin; Alexander, Rob] Univ York, Deramore Lane, York YO10 5GH, N Yorkshire, England.
   [Douthwaite, James; Aitken, Jonathan; Law, James] Univ Sheffield, Mappin St, Sheffield S1 3JD, S Yorkshire, England.
   [Gleirscher, Mario] Univ Bremen, Bibliothekstr 5, D-28359 Bremen, Germany.
C3 University of York - UK; University of Sheffield; University of Bremen
RP Gleirscher, M (corresponding author), Univ Bremen, Bibliothekstr 5, D-28359 Bremen, Germany.
EM mario.gleirscher@york.ac.uk; radu.calinescu@york.ac.uk;
   j.douthwaite@sheffield.ac.uk; benjamin.lesage@york.ac.uk;
   colin.paterson@york.ac.uk; jonathan.aitken@sheffield.ac.uk;
   rob.alexander@york.ac.uk; j.law@sheffield.ac.uk
RI Aitken, Jonathan/O-5012-2019; Alexander, Rob/GPF-8217-2022
OI Aitken, Jonathan/0000-0003-4204-4020; Alexander,
   Rob/0000-0003-3818-0310; Calinescu, Radu/0000-0002-2678-9260;
   Douthwaite, James/0000-0002-7149-0372; Paterson,
   Colin/0000-0002-6678-3752; Law, James/0000-0002-4966-3556; Gleirscher,
   Mario/0000-0002-9445-6863
FU Assuring Autonomy International Programme (AAIP grant); Lloyd's Register
   Foundation; University of York; UKRI [EP/V026747/1]; SPF [EP/V026747/1]
   Funding Source: UKRI
FX This research has received funding from the Assuring Autonomy
   International Programme(AAIP grant CSI: Cobot), a partnership between
   Lloyd's Register Foundation and the University of York, and from the
   UKRI project EP/V026747/1 `Trustworthy Autonomous Systems Node in
   Resilience'. We are grateful for the insights into manufacturing cobots
   gained from our industrial collaborator and being useful for the
   integration of the work on verified controller synthesis and
   situation-based testing at the University of York with the digital
   twinning research at the University of Sheffield. We would like to thank
   Simos Gerasimou for his guidance on usingevoCheckerand David Parker for
   his advice in the use ofPrism's MDP policy synthesis functionality. We
   are also grateful to Jan Peleska for discussions and feedback on formal
   parts of the manuscript and to Andrea Orlandini for further more general
   feedback on our work.
CR Ajoudani A, 2018, AUTON ROBOT, V42, P957, DOI 10.1007/s10514-017-9677-2
   Alami R., 2006, 2006 IEEERSJ INT C I, P1, DOI [10.1109/IROS.2006.6936985, DOI 10.1109/IROS.2006.6936985]
   Alur R, 1996, J ACM, V43, P116, DOI 10.1145/227595.227602
   Anderson G., 2016, EC ANAL BRIEFS
   [Anonymous], 2015, Situation coverage a coverage criterion for testing autonomous robots
   [Anonymous], 2011, 10218 ISO RIA
   Askarpour Mehrnoosh, 2016, Computer Safety, Reliability and Security. 35th International Conference, SAFECOMP 2016. Proceedings: LNCS 9922, P283, DOI 10.1007/978-3-319-45477-1_22
   Askarpour M, 2019, ROBOT CIM-INT MANUF, V57, P465, DOI 10.1016/j.rcim.2019.01.001
   Avizienis A, 2004, IEEE T DEPEND SECURE, V1, P11, DOI 10.1109/TDSC.2004.2
   Baier C, 2008, PRINCIPLES OF MODEL CHECKING, P1
   Bersani MM, 2020, FORM ASP COMPUT, V32, P187, DOI 10.1007/s00165-020-00509-0
   Bjorner D, 2010, FORMAL METHODS: STATE OF THE ART AND NEW DIRECTIONS, P1, DOI 10.1007/978-1-84882-736-3_1
   Bolton A., 2018, GEMINI PRINCIPLES
   Broy M, 2010, COMPUT J, V53, P1758, DOI 10.1093/comjnl/bxq005
   Calinescu R., 2017, Self-Aware Computing Systems, P337
   Calinescu R, 2018, IEEE T SOFTWARE ENG, V44, P1039, DOI 10.1109/TSE.2017.2738640
   Cesta A, 2008, PROC 27 WORK SHOP UK, P1
   Cesta A., 2016, 2016 IEEE 21st International Conference on Emerging Technologies and Factory Automation (ETFA), P1
   Chemweno P, 2020, SAFETY SCI, V129, DOI 10.1016/j.ssci.2020.104832
   De Santis A, 2008, MECH MACH THEORY, V43, P253, DOI 10.1016/j.mechmachtheory.2007.03.003
   Dehnert C, 2017, LECT NOTES COMPUT SC, V10427, P592, DOI 10.1007/978-3-319-63390-9_31
   Douthwaite JA, 2021, FRONT ROBOT AI, V8, DOI 10.3389/frobt.2021.758099
   Dwyer M. B., 1999, Proceedings of the 1999 International Conference on Software Engineering (IEEE Cat. No.99CB37002), P411, DOI 10.1109/ICSE.1999.841031
   Forejt V, 2011, LECT NOTES COMPUT SC, V6659, P53, DOI 10.1007/978-3-642-21455-4_3
   Foster S, 2020, IEEE INT C ENG COMP, P113, DOI 10.1109/ICECCS51672.2020.00020
   Gerasimou S., 2021, 36 IEEEACM INT C AUT, P1
   Gerasimou S, 2018, AUTOMAT SOFTW ENG, V25, P785, DOI 10.1007/s10515-018-0235-8
   Gillespie RB, 2001, IEEE T ROBOTIC AUTOM, V17, P391, DOI 10.1109/70.954752
   Gleirscher, 2021, YAP PERILS APPL GUID
   Gleirscher M., 2011, AUTOMATION SOFTWARE, P64, DOI DOI 10.1145/1982595.1982609
   Gleirscher M., 2021, FORM ASP COMPUT, DOI DOI 10.1007/S00165-021-00545-4
   Gleirscher M, 2020, ELECTRON P THEOR COM, P31, DOI 10.4204/EPTCS.329.4
   Gleirscher M, 2020, IEEE INT C ENG COMP, P83, DOI 10.1109/ICECCS51672.2020.00017
   Gleirscher M, 2019, LECT NOTES COMPUT SC, V11724, P87, DOI 10.1007/978-3-030-30446-1_5
   Gleirscher M, 2017, ELECTRON P THEOR COM, P75, DOI 10.4204/EPTCS.257.8
   Griffin D, 2020, REAL TIM SYST SYMP P, P76, DOI 10.1109/RTSS49844.2020.00018
   Haddadin S, 2009, INT J ROBOT RES, V28, P1507, DOI 10.1177/0278364909343970
   Hayes B., 2013, CHALLENGES SHARED EN, V8, P1
   Heinzmann J, 2003, INT J ROBOT RES, V22, P479, DOI 10.1177/02783649030227004
   Helms E, 2002, IEEE ROMAN 2002, PROCEEDINGS, P399, DOI 10.1109/ROMAN.2002.1045655
   International Organization for Standardization, 2016, ISO/TS 15066:2016 robots and robotic devices-Collaborative robots
   Jessen JJ, 2007, LECT NOTES COMPUT SC, V4763, P227
   Jones R. H., 1986, THESIS IMPERIAL COLL
   Kaiser L, 2018, LECT NOTES ARTIF INT, V11097, P95, DOI 10.1007/978-3-319-99582-3_11
   Kress-Gazit H, 2018, ANNU REV CONTR ROBOT, V1, P211, DOI 10.1146/annurev-control-060117-104838
   Kritzinger W, 2018, IFAC PAPERSONLINE, V51, P1016, DOI 10.1016/j.ifacol.2018.08.474
   Kshirsagar A, 2019, IEEE INT C INT ROBOT, P5930, DOI [10.1109/IROS40897.2019.8967709, 10.1109/iros40897.2019.8967709]
   Kwiatkowska Marta, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P585, DOI 10.1007/978-3-642-22110-1_47
   Kwiatkowska M, 2007, LECT NOTES COMPUT SC, V4486, P220
   Lahijanian M, 2012, IEEE T ROBOT, V28, P396, DOI 10.1109/TRO.2011.2172150
   Leveson N.G., 1995, Safeware: System Safety and Computers
   Leveson NG, 2012, ENG SAFER WORLD SYST
   Long P, 2018, IND ROBOT, V45, P220, DOI 10.1108/IR-09-2017-0165
   Marvel JA, 2015, IEEE T SYST MAN CY-S, V45, P260, DOI 10.1109/TSMC.2014.2337275
   Matthias B., 2011, 2011 IEEE INT S ASSE, P1, DOI DOI 10.1109/ISAM.2011.5942307
   Negri E, 2017, PROCEDIA MANUF, V11, P939, DOI 10.1016/j.promfg.2017.07.198
   Nicolaisen P., 1985, ROBOT SAFETY, P33
   Orlandini A, 2013, PROC INT C TOOLS ART, P306, DOI 10.1109/ICTAI.2013.54
   PARNAS DL, 1995, SCI COMPUT PROGRAM, V25, P41, DOI 10.1016/0167-6423(95)96871-J
   Stanton NA, 2006, APPL ERGON, V37, P55, DOI 10.1016/j.apergo.2005.06.003
   Sugimoto N, 1977, 7 INT S IND ROBOTS, P461
   Tao F, 2018, INT J ADV MANUF TECH, V94, P3563, DOI 10.1007/s00170-017-0233-1
   Vazquez-Chanlatte M., 2019, MVCISBACKPY METRIC T, DOI [DOI 10.5281/ZENODO.2548862, 10.5281/zenodo.2548862]
   Vicentini F, 2020, IEEE T ROBOT, V36, P42, DOI 10.1109/TRO.2019.2937471
   Villani V, 2018, MECHATRONICS, V55, P248, DOI 10.1016/j.mechatronics.2018.02.009
   Wang XV, 2017, CIRP ANN-MANUF TECHN, V66, P5, DOI 10.1016/j.cirp.2017.04.101
NR 66
TC 8
Z9 8
U1 0
U2 9
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 1
PY 2022
VL 218
AR 102809
DI 10.1016/j.scico.2022.102809
EA APR 2022
PG 38
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 1D1JC
UT WOS:000793563300002
OA Green Accepted, Green Published, hybrid, Green Submitted
DA 2024-07-18
ER

PT J
AU Murray, Y
   Sirevåg, M
   Ribeiro, P
   Anisi, DA
   Mossige, M
AF Murray, Yvonne
   Sirevag, Martin
   Ribeiro, Pedro
   Anisi, David A.
   Mossige, Morten
TI Safety assurance of an industrial robotic control system using
   hardware/software co-verification
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 7th International Conference on Rigorous State-Based Methods (ABZ)
CY MAY 27-29, 2020
CL Ulm, GERMANY
DE Formal verification; Co-verification; Model checking; Robots;
   Cyber-physical systems (CPS)
AB As a general trend in industrial robotics, an increasing number of safety functions are being developed or re-engineered to be handled in software rather than by physical hardware such as safety relays or interlock circuits. This trend reinforces the importance of supplementing traditional, input-based testing and quality procedures which are widely used in industry today, with formal verification and model-checking methods. To this end, this paper focuses on a representative safety-critical system in an ABB industrial paint robot, namely the High-Voltage electrostatic Control system (HVC). The practical convergence of the high-voltage produced by the HVC, essential for safe operation, is formally verified using a novel and general co-verification framework where hardware and software models are related via platform mappings. This approach enables the pragmatic combination of highly diverse and specialised tools. The paper's main contribution includes details on how hardware abstraction and verification results can be transferred between tools in order to verify system-level safety properties. It is noteworthy that the HVC application considered in this paper has a rather generic form of a feedback controller. Hence, the co-verification framework and experiences reported here are also highly relevant for any cyber-physical system tracking a setpoint reference. (C) 2021 The Author(s). Published by Elsevier B.V.
C1 [Murray, Yvonne; Sirevag, Martin; Anisi, David A.] Univ Agder, Fac Engn & Sci, Dept Mechatron, Tromso, Norway.
   [Ribeiro, Pedro] Univ York, Dept Comp Sci, York, N Yorkshire, England.
   [Anisi, David A.] Norwegian Univ Life Sci NMBU, Fac Sci & Technol, Robot Grp, Trondheim, Norway.
   [Mossige, Morten] ABB Robot, Bryne, Norway.
C3 University of Agder; University of York - UK; Norwegian University of
   Life Sciences
RP Murray, Y (corresponding author), Univ Agder, Fac Engn & Sci, Dept Mechatron, Tromso, Norway.
EM yvonne.murray@uia.no; martin.sirevag@uia.no; pedro.ribeiro@york.ac.uk;
   david.anisi@nmbu.no; morten.mossige@no.abb.com
OI Ribeiro, Pedro/0000-0003-4319-4872; Anisi, David A./0000-0003-0870-4259
FU Norwegian Research Council; SFI Offshore Mechatronics [237896]; UK EPSRC
   [EP/M025756/1]; Royal Academy of Engineering [CiET1718/45]
FX The authors would like to gratefully acknowledge all the support,
   guidance and inspiration provided by Prof. Ana Cavalcanti during this
   work. The research presented in this paper has received funding from the
   Norwegian Research Council, SFI Offshore Mechatronics, project number
   237896. Pedro Ribeiro is funded by the UK EPSRC (grant EP/M025756/1),
   and by the Royal Academy of Engineering (grant CiET1718/45). The icons
   used in RoboChart have been made by Sarfraz Shoukat, Freepik, Google,
   Icomoon and Madebyoliver from www.flaticon.com, and are licensed under
   CC 3.0 BY.
CR ABB Robotics, BRYN IPS STRUCT REF
   Abrial J R, 2010, Modeling in Event-B: system and softeng
   Afzal A., 2020, A study on the challenges of using robotics simulators for testing
   Alur R., 2011, 2011 International Conference on Embedded Software (EMSOFT 2011), P273
   Amálio N, 2016, LECT NOTES COMPUT SC, V10009, P450, DOI 10.1007/978-3-319-47846-3_28
   [Anonymous], 1993, Hybrid Systems, DOI [DOI 10.1007/3-540-57318-6_30, DOI 10.1007/3-540, DOI 10.1007/3-540-57318-6, 10.1007/3-540-57318-6_30]
   [Anonymous], SIM DES VER
   [Anonymous], 2017, PRESENT ULTERIOR SOF, DOI [DOI 10.1007/978-3-319-67425-4_11, 10.1007/978-3-319-67425-4_11]
   Baier C, 2008, PRINCIPLES OF MODEL CHECKING, P1
   Barnett M, 2006, LECT NOTES COMPUT SC, V4111, P364
   Baxter J, 2021, ROBOTOOL ROBOCHART T
   Baxter J, 2022, ACTA INFORM, V59, P125, DOI 10.1007/s00236-020-00394-3
   Bernardeschi C, 2018, IEEE T SOFTWARE ENG, V44, P512, DOI 10.1109/TSE.2017.2694423
   Blockwitz T., 2012, 9 INT MOD C, P173, DOI DOI 10.3384/ECP12076173
   Bordini Rafael H., 2008, 2008 23rd IEEE/ACM International Conference on Automated Software Engineering, P69, DOI 10.1109/ASE.2008.17
   Boström P, 2016, SOFTW SYST MODEL, V15, P1141, DOI 10.1007/s10270-015-0477-x
   Bourbouh Hamza, 2021, NASA Formal Methods. 13th International Symposium, NFM 2021. Virtual Event. Proceedings. Lecture Notes in Computer Science (LNCS 12673), P53, DOI 10.1007/978-3-030-76384-8_4
   Bourbouh H., 2020, 10 EUR C EMB REAL TI
   Bresolin D., 2012, 2012 15th Euromicro Conference on Digital System Design (DSD 2012), P469, DOI 10.1109/DSD.2012.96
   Cardoso RC, 2020, LECT NOTES COMPUT SC, V12229, P353, DOI 10.1007/978-3-030-55754-6_20
   Caspi P., 1987, Conference Record of the Fourteenth Annual ACM Symposium on Principles of Programming Languages, P178, DOI 10.1145/41625.41641
   Cavalcanti A.L.C., SOFTWARE ENG ROBOTIC, V2021, P249
   Cavalcanti A, 2019, SCI COMPUT PROGRAM, V174, P1, DOI 10.1016/j.scico.2019.01.004
   Champion A, 2016, LECT NOTES COMPUT SC, V9780, P510, DOI 10.1007/978-3-319-41540-6_29
   Colaço JL, 2017, PROCEEDINGS 11TH 2017 INTERNATIONAL SYMPOSIUM ON THEORETICAL ASPECTS OF SOFTWARE ENGINEERING (TASE), P4
   Feiler PH., 2012, Model-based engineering with AADL: An introduction to the SAE architecture analysis design language
   Foster S, 2020, SCI COMPUT PROGRAM, V197, DOI 10.1016/j.scico.2020.102510
   Geretti L, 2017, IFAC PAPERSONLINE, V50, P9248, DOI 10.1016/j.ifacol.2017.08.1287
   Gibson-Robinson T., 2014, Lecture Notes in Computer Science, V8413, P187
   Gomes C, 2018, ACM COMPUT SURV, V51, DOI 10.1145/3179993
   Guiochet J, 2017, ROBOT AUTON SYST, V94, P43, DOI 10.1016/j.robot.2017.04.004
   Henzinger TA, 1998, J COMPUT SYST SCI, V57, P94, DOI 10.1006/jcss.1998.1581
   Henzinger TA, 1998, LECT NOTES COMPUT SC, V1386, P190
   Hoare C. A. R., 1998, Unifying Theories of Programming
   Holzmann GJ, 1997, IEEE T SOFTWARE ENG, V23, P279, DOI 10.1109/32.588521
   Kawahara R, 2009, MBSE: 2009 INTERNATIONAL CONFERENCE ON MODEL-BASED SYSTEMS ENGINEERING, P21, DOI 10.1109/MBSE.2009.5031716
   Kwiatkowska M, 2002, LECT NOTES COMPUT SC, V2324, P200
   Larsen PG, 2016, 2016 2ND INTERNATIONAL WORKSHOP ON MODELLING, ANALYSIS, AND CONTROL OF COMPLEX CPS (CPS DATA)
   Luckcuck M, 2019, ACM COMPUT SURV, V52, DOI 10.1145/3342355
   MathWorks, ACKN
   Mavridou A., 2020, CEUR WORKSHOP PROC, V2584
   Miyazawa A., 2016, ROBOCHART REFERENCE
   Miyazawa A, DIAGRAMMATIC P UNPUB
   Miyazawa A., 2021, ROBOSIM PHYS MODELLI
   Miyazawa A, 2019, SOFTW SYST MODEL, V18, P3097, DOI 10.1007/s10270-018-00710-z
   Mossige M., 2005, THESIS U STAVANGER N
   Murray Yvonne, 2020, Formal Methods: Foundations and Applications. 23rd Brazilian Symposium, SBMF 2020. Proceedings. Lecture Notes in Computer Science (LNCS 12475), P45, DOI 10.1007/978-3-030-63882-5_4
   OMG, 2012, OMG SYST MOD LANG OM
   Owre S., 1996, Computer Aided Verification. 8th International Conference, CAV '96. Proceedings, P411
   Quigley M, 2009, IEEE INT CONF ROBOT, P3604
   Reicherdt Robert, 2014, Software Engineering and Formal Methods. 12th International Conference, SEFM 2014. Proceedings: LNCS 8702, P190, DOI 10.1007/978-3-319-10431-7_14
   Roscoe AW, 2010, TEXTS COMPUT SCI, P3, DOI 10.1007/978-1-84882-258-0_1
   Roscoe A.W., 2013, 1 OP EIT ICT LABS WO
   Rustan K, 2010, LECT NOTES ARTIF INT, V6355, P348, DOI 10.1007/978-3-642-17511-4_20
   Selic B., 2013, Modeling and analysis of real-time and embedded systems with UML and MARTE: Developing cyber-physical systems
   Seligman E., 2015, Formal Verification, An Essential Toolkit for Modern VLSI Design
   Sheeran M, 2000, FORM METHOD SYST DES, V16, P23, DOI 10.1023/A:1008725524946
   Svensen N.R., 2005, THESIS U STAVANGER N
   Toyn I., 2002, iSO/IEC 13568:2002(E)
   Tripakis S., 2005, ACM T EMBED COMPUT S, V4, P779, DOI DOI 10.1145/1113830.1113834
   Webster M, 2020, INT J ROBOT RES, V39, P73, DOI 10.1177/0278364919883338
   Weissmann Markus, 2011, Model Checking Software. Proceedings 18th International SPIN Workshop, P161, DOI 10.1007/978-3-642-22306-8_11
   Woodcock Jim, 2019, Unifying Theories of Programming. 7th International Symposium, UTP 2019. Dedicated to Tony Hoare on the Occasion of His 85th Birthday. Proceedings. Lecture Notes in Computer Science (LNCS 11885), P80, DOI 10.1007/978-3-030-31038-7_5
   Woodcock J., 1996, Using Z: Specification, Refinement, and Proof
   Ye KF, 2022, SOFTW SYST MODEL, V21, P667, DOI 10.1007/s10270-021-00916-8
NR 65
TC 4
Z9 4
U1 0
U2 6
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD APR 1
PY 2022
VL 216
AR 102766
DI 10.1016/j.scico.2021.102766
EA JAN 2022
PG 27
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA ZG5YX
UT WOS:000760335200002
OA Green Accepted, hybrid, Green Published, Green Submitted
DA 2024-07-18
ER

PT J
AU Huang, RB
   Sun, WF
   Chen, HB
   Cui, CH
   Yang, N
AF Huang, Rubing
   Sun, Weifeng
   Chen, Haibo
   Cui, Chenhui
   Yang, Ning
TI A nearest-neighbor divide-and-conquer approach for adaptive random
   testing
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Adaptive random testing; Computational overhead; Boundary effect
   problem; Nearest-neighbor; Divide-and-conquer
ID CENTROIDAL VORONOI TESSELLATIONS; ALGORITHMS; STRATEGY
AB Adaptive Random Testing (ART) aims at enhancing the failure detection capability of Random Testing (RT) by evenly distributing test cases over the input domain. Many ART algorithms have been proposed to achieve an even spread of test cases, according to different notations. A well-known ART algorithm, namely Fixed-Size-Candidate-Set ART (FSCS-ART), chooses an element as the next test case such that it is farthest away from previously executed test cases. Previous studies have demonstrated that FSCS-ART could achieve good improvements in test effectiveness over RT, but suffers from some drawbacks such as high computational overhead and boundary effect problem. In this paper, we propose an alternative approach to enhance FSCS-ART, namely Nearest-Neighbor Divide-and-Conquer based ART (NNDC-ART), which combines the concepts of nearest-neighbor and divide-and-conquer. It attempts to reduce the computational overhead of test case generation, and also to alleviate the boundary effect problem; while maintaining the advantages of FSCS-ART. The simulation results show that compared with FSCS-ART, NNDC-ART requires much less computational overhead, and also achieves much better test case distribution; while maintaining better or comparable failure-detection effectiveness. Our empirical studies further show that the proposed approach is much more cost-effective than FSCS-ART. In addition, we further compare NNDC-ART against two enhancements of FSCS-ART based on the partitioning strategy, i.e., ART with Divide-and-Conquer (ART-DC) and ART by Bisection and Localization (ART-B-Loc), and find that our proposed approach can achieve similar or even better testing performances in some scenarios. (C) 2021 Elsevier B.V. All rights reserved.
C1 [Huang, Rubing] Macau Univ Sci & Technol, Fac Informat Technol, Macau 999078, Peoples R China.
   [Sun, Weifeng] Chongqing Univ, Sch Big Data & Software Engn, Chongqing 401331, Peoples R China.
   [Chen, Haibo; Cui, Chenhui] Jiangsu Univ, Sch Comp Sci & Commun Engn, Zhenjiang 212013, Jiangsu, Peoples R China.
   [Yang, Ning] Jiangsu Univ, Sch Elect & Informat Engn, Zhenjiang 212013, Jiangsu, Peoples R China.
C3 Macau University of Science & Technology; Chongqing University; Jiangsu
   University; Jiangsu University
RP Sun, WF (corresponding author), Chongqing Univ, Sch Big Data & Software Engn, Chongqing 401331, Peoples R China.
EM rbhuang@must.edu.mo; weifeng.sun@cqu.edu.cn;
   2221808034@stmail.ujs.edu.cn; 2211908012@stmail.ujs.edu.cn;
   yangn@ujs.edu.cn
RI ning, yang/JDW-5468-2023
OI Cui, Chenhui/0009-0004-8746-316X; Huang, Rubing/0000-0002-1769-6126;
   Sun, Weifeng/0000-0001-6013-1369
FU National Natural Science Foundation of China [61872167, 61502205];
   Science and Technology Program of the Ministry of Housing and
   Urban-Rural Development of China [2020-S-001]; Postgraduate Research &
   Practice Innovation Program of Jiangsu Province [KYCX19_1616]
FX The authors would like to thank Junlong Lian for his valuable discussion
   and comments on this paper. This work is in part supported by the
   National Natural Science Foundation of China, under grant nos. 61872167
   and 61502205. This work is also partly supported by the Science and
   Technology Program of the Ministry of Housing and Urban-Rural
   Development of China, under grant no. 2020-S-001, and the Postgraduate
   Research & Practice Innovation Program of Jiangsu Province, under grant
   no. KYCX19_1616.
CR ACM, 1980, COLL ALG ACM
   AMMANN PE, 1988, IEEE T COMPUT, V37, P418, DOI 10.1109/12.2185
   Anand S, 2013, J SYST SOFTWARE, V86, P1978, DOI 10.1016/j.jss.2013.02.061
   [Anonymous], 2012, ART SOFTWARE TESTING, DOI DOI 10.1002/9781119202486
   Arcuri A, 2014, SOFTW TEST VERIF REL, V24, P219, DOI 10.1002/stvr.1486
   Arcuri A, 2012, IEEE T SOFTWARE ENG, V38, P258, DOI 10.1109/TSE.2011.121
   Bati H., 2007, P 33 INT C VER LARG, P1243
   Bellman R., 1957, Dynamic programming
   BISHOP PG, 1993, FTCS-23 - TWENTY-THIRD INTERNATIONAL SYMPOSIUM ON FAULT-TOLERANT COMPUTING : DIGEST OF PAPERS, P98, DOI 10.1109/FTCS.1993.627312
   Chan FT, 1996, INFORM SOFTWARE TECH, V38, P775, DOI 10.1016/0950-5849(96)01103-2
   Chan KP, 2006, P INT COMP SOFTW APP, P485
   Chan KP, 2006, INT J SOFTW ENG KNOW, V16, P553, DOI 10.1142/S0218194006002926
   Chen TY, 2006, LECT NOTES COMPUT SC, V4006, P155
   Chen T. Y., 2007, P 9 INT C SOFTW ENG, P141
   Chen T. Y., 2007, P 40 ANN HAW INT C S, p262a
   Chen T. Y., 2007, P 2 ACM INT WORKSH R, P2
   Chen TY, 2008, J SYST SOFTWARE, V81, P2146, DOI 10.1016/j.jss.2008.03.062
   Chen TY, 2007, INT J SOFTW ENG KNOW, V17, P805, DOI 10.1142/S0218194007003501
   Chen TY, 2007, IEEE T RELIAB, V56, P562, DOI 10.1109/TR.2007.903293
   Chen TY, 2006, J SYST SOFTWARE, V79, P591, DOI 10.1016/j.jss.2005.05.029
   Chen TY, 2013, IEEE T RELIAB, V62, P226, DOI 10.1109/TR.2013.2240898
   Chen TY, 2011, J INF SCI ENG, V27, P1449
   Chen TY, 2009, IEEE T RELIAB, V58, P179, DOI 10.1109/TR.2008.2011687
   Chen TY, 2004, LECT NOTES COMPUT SC, V3321, P320
   Chen TY, 2004, INFORM SOFTWARE TECH, V46, P1001, DOI 10.1016/j.infsof.2004.07.004
   Chen TY, 2004, QSIC 2004: PROCEEDINGS OF THE FOURTH INTERNATIONAL CONFERENCE ON QUALITY SOFTWARE, P146
   Chen TY, 2004, QSIC 2004: PROCEEDINGS OF THE FOURTH INTERNATIONAL CONFERENCE ON QUALITY SOFTWARE, P79
   Chow C, 2013, INT CONF QUAL SOFTW, P268, DOI 10.1109/QSIC.2013.19
   COVER TM, 1967, IEEE T INFORM THEORY, V13, P21, DOI 10.1109/TIT.1967.1053964
   Du Q, 1999, SIAM REV, V41, P637, DOI 10.1137/S0036144599352836
   Ferrer J, 2012, SOFTWARE PRACT EXPER, V42, P1331, DOI 10.1002/spe.1135
   FINELLI GB, 1991, RELIAB ENG SYST SAFE, V32, P155, DOI 10.1016/0951-8320(91)90052-9
   Forrester JE, 2000, USENIX ASSOCIATION PROCEEDINGS OF THE 4TH UNSENIX WINDOWS SYSTEMS SYMPOSIUM, P59
   HALTON JH, 1964, COMMUN ACM, V7, P701, DOI 10.1145/355588.365104
   Huang RB, 2021, IEEE T SOFTWARE ENG, V47, P2052, DOI 10.1109/TSE.2019.2942921
   Huang RB, 2015, INFORM SOFTWARE TECH, V67, P13, DOI 10.1016/j.infsof.2015.06.003
   Jia Y, 2011, IEEE T SOFTWARE ENG, V37, P649, DOI 10.1109/TSE.2010.62
   Johannes M., 2006, P 1 INT WORKSH RAND, P70
   Kuo F.-C., 2007, P 19 INT C SOFTW ENG, P135
   Kuo FC, 2008, SOFTWARE QUAL J, V16, P303, DOI 10.1007/s11219-008-9047-6
   Mao CY, 2019, IEEE T RELIAB, V68, P1444, DOI 10.1109/TR.2019.2892230
   Mao CY, 2017, SCI CHINA INFORM SCI, V60, DOI 10.1007/s11432-016-0087-0
   Mayer J., 2006, Proceedings of the 2006 International Conference on Software Engineering Research and Practice and Conference on Programming Languages and Compilers SERP'06, P16
   Mayer J., 2006, P 5 ACM IEEE INT S E, P105
   Mayer J, 2006, GECCO 2006: Genetic and Evolutionary Computation Conference, Vol 1 and 2, P1955
   Mayer J, 2006, INT CONF QUAL SOFTW, P251
   Mayer J, 2006, LECT NOTES COMPUT SC, V3997, P72
   MILLER BP, 1990, COMMUN ACM, V33, P32, DOI 10.1145/96267.96279
   Orso A., 2014, P FUTURE SOFTWARE EN, P117, DOI [10.1145/2593882.2593885, DOI 10.1145/2593882.2593885]
   Press W. H., 1996, NUMERICAL RECIPES FO
   Regehr J, 2005, P 5 ACM INT C EMB SO, P290
   Schneckenburger C., 2007, P 4 INT WORKSH SOFTW, P90
   Shahbazi A, 2013, IEEE T SOFTWARE ENG, V39, P163, DOI 10.1109/TSE.2012.18
   Vargha A, 2000, J EDUC BEHAV STAT, V25, P101, DOI 10.3102/10769986025002101
   WHITE LJ, 1980, IEEE T SOFTWARE ENG, V6, P247, DOI 10.1109/TSE.1980.234486
   Yoshikawa T, 2003, THIRD INTERNATIONAL CONFERENCE ON QUALITY SOFTWARE, PROCEEDINGS, P20, DOI 10.1109/QSIC.2003.1319081
   Zhang J, 2010, P 7 INT C ED INF TEC
NR 57
TC 3
Z9 3
U1 1
U2 8
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR 1
PY 2022
VL 215
AR 102743
DI 10.1016/j.scico.2021.102743
EA NOV 2021
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA YN9RV
UT WOS:000747588600006
DA 2024-07-18
ER

PT J
AU Audrito, G
   Pianini, D
   Damiani, F
   Viroli, M
AF Audrito, Giorgio
   Pianini, Danilo
   Damiani, Ferruccio
   Viroli, Mirko
TI Aggregate centrality measures for IoT-based coordination
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 17th International Workshop on Coordination and Self-Adaptativeness of
   Software Applications (FOCLASA )
CY SEP 17, 2019
CL Oslo, NORWAY
DE Graph algorithms; Network centrality; Distributed computing; Aggregate
   computing
ID SIMULATION; EMERGENCE
AB Collecting statistics from graph-based data is an increasingly studied topic in the data mining community. We argue that they can have great value in the coordination of dynamic IoT systems as well, especially to support complex coordination strategies related to distributed situation recognition.
   Thanks to a mapping to the field calculus, a distribution coordination model proposed for collective adaptive systems, we show that many existing "centrality measures" for graphs can be naturally turned into field computations that compute the centrality of nodes in a network. Not only this mapping gives evidence that the field coordination is well-suited to accommodate massively parallel computations over graphs, but also it provides a new basic "brick" of coordination which can be used in several contexts, there including improved leader election or network vulnerabilities detection. We validate our findings by simulation, first measuring the ability of the translated algorithm to self-adjust to network changes, then investigating an application of centrality measures for data summarisation. (C) 2020 Elsevier B.V. All rights reserved.
C1 [Audrito, Giorgio; Damiani, Ferruccio] Univ Torino, Turin, Italy.
   [Pianini, Danilo; Viroli, Mirko] Univ Bologna, Alma Mater Studiorum, Cesena, Italy.
C3 University of Turin; University of Bologna
RP Audrito, G (corresponding author), Univ Torino, Turin, Italy.
EM giorgio.audrito@unito.it; danilo.pianini@unibo.it;
   ferruccio.damiani@unito.it; mirko.viroli@unibo.it
RI Audrito, Giorgio/S-4613-2018; Ferruccio, Damiani/D-2383-2011
OI Ferruccio, Damiani/0000-0001-8109-1706; PIANINI,
   DANILO/0000-0002-8392-5409
CR Abderrahim M, 2017, 2017 IEEE 5TH INTERNATIONAL CONFERENCE ON FUTURE INTERNET OF THINGS AND CLOUD (FICLOUD 2017), P337, DOI 10.1109/FiCloud.2017.30
   Altisen K, 2016, LECT NOTES COMPUT SC, V9688, P36, DOI 10.1007/978-3-319-39570-8_3
   [Anonymous], 2004, WORKSHOP DATA MANAGE, DOI DOI 10.1145/1052199.1052213
   [Anonymous], 2007, Discrete Mathematics and Theoretical Computer Science, DOI DOI 10.46298/DMTCS.3545
   [Anonymous], 2011, P 20 INT C WORLD WID, DOI DOI 10.1145/1963405.1963493
   Audrito Giorgio, 2018, Coordination Models and Languages. 20th IFIP WG 6.1 International Conference, COORDINATION 2018. Held as Part of the 13th International Federated Conference on Distributed Computing Techniques, DisCoTec 2018. Proceedings: LNCS 10852, P1, DOI 10.1007/978-3-319-92408-3_1
   AUDRITO G, 2017, EPTCS, V264, P18
   Audrito G, 2019, ACM T COMPUT LOG, V20, DOI 10.1145/3285956
   Bachrach J, 2010, NEURAL COMPUT APPL, V19, P825, DOI 10.1007/s00521-010-0382-8
   Backstrom L, 2012, PROCEEDINGS OF THE 3RD ANNUAL ACM WEB SCIENCE CONFERENCE, 2012, P33
   Barabási AL, 1999, SCIENCE, V286, P509, DOI 10.1126/science.286.5439.509
   Beal J, 2006, IEEE INTELL SYST, V21, P10, DOI 10.1109/MIS.2006.29
   Beal J, 2018, ACM T AUTON ADAP SYS, V13, DOI 10.1145/3179994
   Beal J, 2015, COMPUTER, V48, P22, DOI 10.1109/MC.2015.261
   Beal J, 2014, INT CONF SELF SELF, P8, DOI 10.1109/SASOW.2014.6
   Beal J, 2013, FORMAL AND PRACTICAL ASPECTS OF DOMAIN-SPECIFIC LANGUAGES: RECENT DEVELOPMENTS, P436, DOI 10.4018/978-1-4666-2092-6.ch016
   Bettini L., 2016, Implementing Domain Specific Languages with Xtext and Xtend
   Bicocchi N, 2012, ACM T AUTON ADAP SYS, V7, DOI 10.1145/2168260.2168262
   Brin S, 1998, COMPUT NETWORKS ISDN, V30, P107, DOI 10.1016/S0169-7552(98)00110-X
   Brogi A, 2019, LECT NOTES COMPUT SC, V11895, P523, DOI 10.1007/978-3-030-33702-5_40
   Casadei R, 2021, ENG APPL ARTIF INTEL, V97, DOI 10.1016/j.engappai.2020.104081
   Casadei R, 2019, FUTURE GENER COMP SY, V91, P252, DOI 10.1016/j.future.2018.09.005
   Coutaz J, 2005, COMMUN ACM, V48, P49, DOI 10.1145/1047671.1047703
   Curino C, 2005, PERVASIVE MOB COMPUT, V1, P446, DOI 10.1016/j.pmcj.2005.08.003
   Dean J, 2004, USENIX ASSOCIATION PROCEEDINGS OF THE SIXTH SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION (OSDE '04), P137
   Eysholdt M., 2010, P ACM INT C COMPANIO, P307, DOI DOI 10.1145/1869542.1869625
   Faghih F, 2016, LECT NOTES COMPUT SC, V9688, P124, DOI 10.1007/978-3-319-39570-8_9
   Gibson MA, 2000, J PHYS CHEM A, V104, P1876, DOI 10.1021/jp993732q
   Guerrero C, 2018, 2018 IEEE 6TH INTERNATIONAL CONFERENCE ON FUTURE INTERNET OF THINGS AND CLOUD (FICLOUD 2018), P377, DOI 10.1109/FiCloud.2018.00061
   Hoyer S., 2017, J. Open Res. Software, V5, DOI [10.5334/jors.148, DOI 10.5334/JORS.148]
   Hunter JD, 2007, COMPUT SCI ENG, V9, P90, DOI 10.1109/MCSE.2007.55
   Igarashi A, 2001, ACM T PROGR LANG SYS, V23, P396, DOI 10.1145/503502.503505
   Lafuente AL, 2017, LOG METH COMPUT SCI, V13, DOI 10.23638/LMCS-13(1:13)2017
   Madden S, 2002, USENIX ASSOCIATION PROCEEDINGS OF THE FIFTH SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P131, DOI 10.1145/1060289.1060303
   Mamei M, 2004, SECOND IEEE ANNUAL CONFERENCE ON PERVASIVE COMPUTING AND COMMUNICATIONS, PROCEEDINGS, P263, DOI 10.1109/PERCOM.2004.1276864
   Mertens S, 2012, PHYS REV E, V86, DOI 10.1103/PhysRevE.86.061109
   Montagna S., 2012, Proceedings of the 27th Annual ACM Symposium on Applied Computing - SAC'12, P1406, DOI DOI 10.1145/2245276.2231999
   Nagpal R., 2003, WORKSH AD MULT SYST
   Page L, 2001, US patent, Patent No. [6,285,999, 6285999]
   Palmer Christopher R, 2002, P 8 ACM SIGKDD INT C, P81
   Paulos A, 2019, 2019 IEEE 4TH INTERNATIONAL WORKSHOPS ON FOUNDATIONS AND APPLICATIONS OF SELF* SYSTEMS (FAS*W 2019), P98, DOI 10.1109/FAS-W.2019.00036
   Penrose M., 2003, OXFORD STUDIES PROBA, V5
   Pianini D, 2013, J SIMUL, V7, P202, DOI 10.1057/jos.2012.27
   Pianini D, 2021, FUTURE GENER COMP SY, V114, P44, DOI 10.1016/j.future.2020.07.032
   Pianini D, 2015, 30TH ANNUAL ACM SYMPOSIUM ON APPLIED COMPUTING, VOLS I AND II, P1846, DOI 10.1145/2695664.2695913
   Pigne Y., 2008, ABS08032093 CORR
   Raghuwanshi S, 2003, IEEE VTS VEH TECHNOL, P2921, DOI 10.1109/VETECF.2003.1286158
   Sakhaee E, 2009, 2009 2ND INTERNATIONAL SYMPOSIUM ON APPLIED SCIENCES IN BIOMEDICAL AND COMMUNICATION TECHNOLOGIES (ISABEL 2009), P454
   Skarlat O, 2017, 2017 IEEE 1ST INTERNATIONAL CONFERENCE ON FOG AND EDGE COMPUTING (ICFEC), P89, DOI 10.1109/ICFEC.2017.12
   Stewart RL, 2006, ADAPT BEHAV, V14, P21, DOI 10.1177/105971230601400104
   Viroli M., 2016, 1 WORKSH PROGR MOD L
   Viroli M, 2019, J LOG ALGEBR METHODS, V109, DOI 10.1016/j.jlamp.2019.100486
   Viroli M, 2016, UBICOMP'16 ADJUNCT: PROCEEDINGS OF THE 2016 ACM INTERNATIONAL JOINT CONFERENCE ON PERVASIVE AND UBIQUITOUS COMPUTING, P1321, DOI 10.1145/2968219.2979129
   Viroli M, 2018, ACM T MODEL COMPUT S, V28, DOI 10.1145/3177774
   Wang J, 2019, SENSORS-BASEL, V19, DOI 10.3390/s19112579
   Welsh M, 2004, USENIX ASSOCIATION PROCEEDINGS OF THE FIRST SYMPOSIUM ON NETWORKED SYSTEMS DESIGN AND IMPLEMENTATION (NSDI'04), P29
   Whitehouse Kamin, 2004, P 2 INT C MOB SYST A
   Yamins Daniel, 2007, THESIS
   Yao Y, 2002, SIGMOD REC, V31, P9, DOI 10.1145/601858.601861
   Zaburdaev V, 2015, REV MOD PHYS, V87, P483, DOI 10.1103/RevModPhys.87.483
   Zahadat P, 2019, 2019 IEEE 4TH INTERNATIONAL WORKSHOPS ON FOUNDATIONS AND APPLICATIONS OF SELF* SYSTEMS (FAS*W 2019), P261, DOI 10.1109/FAS-W.2019.00072
   Zhou XQ, 2013, INFORM PROCESS LETT, V113, P30, DOI 10.1016/j.ipl.2012.09.008
NR 62
TC 1
Z9 1
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR 1
PY 2021
VL 203
AR 102584
DI 10.1016/j.scico.2020.102584
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA PQ7UT
UT WOS:000606750500001
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Beierle, C
   Schewe, KD
AF Beierle, Christoph
   Schewe, Klaus-Dieter
TI Type-2 effectivity in abstract state machines for algorithms with exact
   real arithmetic
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 5th International Conference on Abstract State Machines, Alloy, B, TLA,
   VDM, and Z (ABZ)
CY MAY 23-27, 2016
CL Linz, AUSTRALIA
DE Abstract state machine; Type-2 theory of effectivity; Real arithmetic;
   Stream computation; Cauchy sequence
ID LANGUAGE
AB Computations with real numbers are decisive for all scientific and technical applications, in particular cyber-physical systems, and precision in the results is essential for quality and safety. The type-2 theory of effectivity (TTE) is a well established theory of computability on infinite strings, which can be used to represent real numbers by rapidly converging Cauchy sequences, on top of which standard operations such as addition, multiplication, division, exponentials, trigonometric functions, etc. can be defined. In this paper we develop an extension of Abstract State Machines (ASMs) handling streams in an incremental way in accordance with TTE. This enables defining a data type Real as part of the background structure and based on this exact computation with real numbers. Output can be generated at any degree of precision by exploring only sufficiently long prefixes of the representing Cauchy sequences. We then outline an ASM development process that starts from a specification of an algorithm using Real, proceeds by making the rational elements of the Cauchy sequences explicit in a refinement, reconsiders this refined specification as a concurrent ASM, where each agent cares about computation up to some precision, and finally, based on a detailed analysis of the required precision, prunes the concurrent ASM down to an ASM that guarantees a sufficient level of precision in the outputs. In doing so, backward precision propagation replaces the common forward error propagation that is common for implementations exploiting floating point arithmetic. (C) 2019 Elsevier B.V. All rights reserved.
C1 [Beierle, Christoph] Fernuniv, Fac Math & Comp Sci, D-58084 Hagen, Germany.
   [Schewe, Klaus-Dieter] Zhejiang Univ, UIUC Inst, Haining, Peoples R China.
C3 Fern University Hagen; Zhejiang University
RP Beierle, C (corresponding author), Fernuniv, Fac Math & Comp Sci, D-58084 Hagen, Germany.
EM christoph.beierle@FernUni-Hagen.de; kdschewe@acm.org
CR Abrial J.-R., 2010, TECHNICAL REPORT
   Abrial J R, 2010, Modeling in Event-B: system and softeng
   Ait-Ameur Y, 1999, SCI COMPUT PROGRAM, V33, P133, DOI 10.1016/S0167-6423(98)00008-2
   [Anonymous], 2017, P AUSTR COMP SCI WEE
   [Anonymous], 1994, Lecture Notes in Computer Science
   [Anonymous], 2005, B BOOK ASSIGNING PRO
   Bancerek G, 2015, LECT NOTES ARTIF INT, V9150, P261, DOI 10.1007/978-3-319-20615-8_17
   Beierle Christoph, 2018, Abstract State Machines, Alloy, B, TLA, VDM, and Z. 6th International Conference, ABZ 2018. Proceedings: LNCS 10817, P139, DOI 10.1007/978-3-319-91271-4_10
   Beierle C, 2014, LECT NOTES ARTIF INT, V8439, P48, DOI 10.1007/978-3-319-08909-6_4
   Blass A, 1999, ANN PURE APPL LOGIC, V100, P141, DOI 10.1016/S0168-0072(99)00005-6
   Borger E., 2003, ABSTRACT STATE MACHI
   Börger E, 2016, ACTA INFORM, V53, P469, DOI 10.1007/s00236-015-0249-7
   Briggs K, 2006, THEOR COMPUT SCI, V351, P74, DOI 10.1016/j.tcs.2005.09.058
   Farahbod R, 2007, FUND INFORM, V77, P71
   Ferrarotti F, 2016, THEOR COMPUT SCI, V649, P25, DOI 10.1016/j.tcs.2016.08.013
   Gargantini A, 2008, J UNIVERS COMPUT SCI, V14, P1949
   Gowland P., 2001, Computability and Complexity in Analysis. 4th International Workshop, CCA 2000. Selected Papers (Lecture Notes in Computer Science Vol.2064), P30
   Gurevich Y, 2005, THEOR COMPUT SCI, V336, P311, DOI 10.1016/j.tcs.2004.11.010
   Gurevich Y, 2007, LECT NOTES COMPUT SC, V4797, P153, DOI 10.1007/978-3-540-75987-4_11
   Gurevich Y, 2007, BULL EUR ASSOC THEOR, P82
   Hoyrup M, 2012, COMPUTABILITY, V1, P3, DOI 10.3233/COM-2012-005
   Lelitko U., 2013, THESIS
   Lester D, 2003, THEOR COMPUT SCI, V291, P203, DOI 10.1016/S0304-3975(02)00226-8
   Marcial-Romero JR, 2007, THEOR COMPUT SCI, V379, P120, DOI 10.1016/j.tcs.2007.01.021
   Muller N. T., 2001, Computability and Complexity in Analysis. 4th International Workshop, CCA 2000. Selected Papers (Lecture Notes in Computer Science Vol.2064), P222
   Naumowicz A, 2009, LECT NOTES COMPUT SC, V5674, P67, DOI 10.1007/978-3-642-03359-9_5
   Nipkow T., 2002, ISABELLE HOL PROOF A, DOI DOI 10.1007/3-540-45949-9
   Schewe KD, 2011, FRONT ARTIF INTEL AP, V225, P37, DOI 10.3233/978-1-60750-690-4-37
   Scott L.R., 2011, Numerical Analysis
   Tavana NR, 2011, LOG METH COMPUT SCI, V7, DOI 10.2168/LMCS-7(2:19)2011
   VUILLEMIN JE, 1990, IEEE T COMPUT, V39, P1087, DOI 10.1109/12.57047
   Weihrauch K., 2014, LOG METHODS COMPUT S, V10
   Weihrauch K., 2000, TEXT THEORET COMP S
NR 33
TC 0
Z9 0
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 1
PY 2019
VL 184
AR 102307
DI 10.1016/j.scico.2019.102307
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA JM6QO
UT WOS:000496336900008
OA Bronze
DA 2024-07-18
ER

PT J
AU Wang, YC
   Cheng, KS
   Song, M
   Tilevich, E
AF Wang, Yuchen
   Cheng, Kwok Sun
   Song, Myoungkyu
   Tilevich, Eli
TI A declarative enhancement of JavaScript programs by leveraging the Java
   metadata infrastructure
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Software reuse; Code enhancement; Metadata; Annotations
AB Web browsers have evolved into indispensable software platforms for modern applications. Although JavaScript has become a de-facto lingua franca for developing web applications, the JavaScript software development tools and methodologies lag behind those of languages such as Java and C#. In particular, to enhance JavaScript programs with non-functional concerns (e.g., persistence, security, transactions, and logging) JavaScript developers need to modify the source code by hand. Developers then often end up having to maintain the resulting modified version separately for reasons that include poor design, the complexities of program evolution, and fundamental language limitations. The necessity to modify code by hand could be avoided if JavaScript had metadata facilities for developers to specify non-functional concerns declaratively.
   To address this problem, we present a novel declarative approach, Transparent Automated Enhancement for JavaScript (TAE-JS) that enhances JavaScript programs with the ability to use declarative metadata. The metadata is expressed by means of Java annotations. We have implemented our technique in an open-source plug-in for the Eclipse IDE. This plugin allows a developer to enhance the original version of a JavaScript program by specifying concerns declaratively using Java annotations. It then analyzes an original version of the program to automatically generate enhanced program versions by adding the declared concerns. We evaluated TAE-JS with four practical examples that enhance JavaScript programs by declaratively adding concerns such as persistence, security, transactions, and logging. In a user study with ten student developers and three professional engineers at PayPal, the participants viewed favorably TAE-JS's flexible declarative enhancement capabilities, seeing them as a valuable mechanism for implementing non-functional concerns in JavaScript programs. Our evaluation results are promising in demonstrating the potential benefits of our approach to complement existing JavaScript development tools. (C) 2019 Elsevier B.V. All rights reserved.
C1 [Wang, Yuchen; Cheng, Kwok Sun; Song, Myoungkyu] Univ Nebraska, Dept Comp Sci, Omaha, NE 68182 USA.
   [Tilevich, Eli] Virginia Tech, Dept Comp Sci, Blacksburg, VA USA.
C3 University of Nebraska System; Virginia Polytechnic Institute & State
   University
RP Song, M (corresponding author), Univ Nebraska, Dept Comp Sci, Omaha, NE 68182 USA.
EM ywang01@unomaha.edu; kwoksuncheng@unomaha.edu; myoungkyu@unomaha.edu;
   tilevich@cs.vt.edu
OI Tilevich, Eli/0000-0003-2415-6926
CR Alves ELG, 2018, IEEE T SOFTWARE ENG, V44, P365, DOI 10.1109/TSE.2017.2679742
   Ballance R. A., 1992, ACM Transactions on Software Engineering and Methodology, V1, P95, DOI 10.1145/125489.122804
   Bauer C., 2005, HIBERNATE ACTION
   Beazley D. M., 1996, P TCLTK
   Bennett K. H., 2000, P C FUT SOFTW ENG, P73
   Bubba JF, 2001, P INT COMP SOFTW APP, P393, DOI 10.1109/CMPSAC.2001.960644
   Cannon B., 2010, Proceedings of the 19th international conference on World wide web (New York, NY, USA, 2010), P191
   Cepa V, 2004, LECT NOTES COMPUT SC, V3286, P283
   Cerny Tomas, 2015, Information Science and Applications, P933, DOI 10.1007/978-3-662-46578-3_111
   Chugh R, 2012, ACM SIGPLAN NOTICES, V47, P587, DOI 10.1145/2398857.2384659
   Dhawan M, 2012, LECT NOTES COMPUT SC, V7313, P383, DOI 10.1007/978-3-642-31057-7_18
   Dufour Bruno, 2007, ACM SIGSOFT Int. Symp. Software Testing and Analysis, DOI [10.1145/1273463.1273480, DOI 10.1145/1273463.1273480]
   Dutchyn C, 2006, SCI COMPUT PROGRAM, V63, P207, DOI 10.1016/j.scico.2006.01.003
   Forman I. R., JAVA REFLECTION ACTI
   Fowler M., 2000, Refactoring: Improving the Design of Existing Code
   Ge X, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P1095, DOI 10.1145/2568225.2568280
   Gordon Rob., 1998, Essential JNI: Java Native Interface
   Grimmer M., 2013, P 2013 INT C PRINCIP, P35, DOI [10.1145/2500828.2500832, DOI 10.1145/2500828.2500832]
   Guo B, 2017, P INT COMP SOFTW APP, P118, DOI 10.1109/COMPSAC.2017.153
   Herzig K., 2013, P MSR
   Kiciman Emre, 2007, Operating Systems Review, V41, P17, DOI 10.1145/1323293.1294264
   Kiczales G, 2005, LECT NOTES COMPUT SC, V3586, P195
   KICZALES G, 1997, P ECOOP
   Kiczales Gregor., 2001, Proceedings of the 15th European Conference on Object-Oriented Programming, P327
   Kienzle J., 2002, P ECOOP
   Lämmel R, 2014, PPDP'14: PROCEEDINGS OF THE 16TH INTERNATIONAL SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING, P1, DOI 10.1145/2643135.2643163
   Lee B, 2010, PLDI '10: PROCEEDINGS OF THE 2010 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P36, DOI 10.1145/1806596.1806601
   Lerner BS, 2010, ACM SIGPLAN NOTICES, V45, P361, DOI 10.1145/1932682.1869490
   Minamide Y, 2006, LECT NOTES COMPUT SC, V4279, P357
   Nagashima K., 2013, P 8 INT WORKSH ADV M, P5
   Noye J., 2013, P 3 WORKSH MOD SYST, P7
   Noye J., 2015, COMP P 14 INT C MOD, P64
   Ossher H, 2001, PROC INT CONF SOFTW, P821, DOI 10.1109/ICSE.2001.919190
   Parr T.J., 2004, P 13 INT C WORLD WID, P224, DOI [DOI 10.1145/988672.988703, 10.1145/988672.988703]
   Pawlak Renaud., 2001, LECT NOTES COMPUTER, V2192, P1, DOI DOI 10.1007/3-540-45429-2_1
   Prasad M.D., 2003, AOSD Workshop on Aspects, Components and Patterns for Infrastructure Software, P49
   Reis C, 2007, ACM T WEB, V1, DOI 10.1145/1281480.1281481
   Ren XX, 2004, ACM SIGPLAN NOTICES, V39, P432, DOI 10.1145/1035292.1029012
   Song M., 2012, P 11 INT C ASPECT OR, P227
   Song M, 2012, PROC INT CONF SOFTW, P694, DOI 10.1109/ICSE.2012.6227148
   Stamey John., 2005, Proceedings of the 23rd Annual International Conference on Design of Communication: Documenting Designing for Pervasive Information, SIGDOC '05, P89
   Stark E, 2009, 25TH ANNUAL COMPUTER SECURITY APPLICATIONS CONFERENCE, P373, DOI 10.1109/ACSAC.2009.42
   Tao Y, 2015, 12TH WORKING CONFERENCE ON MINING SOFTWARE REPOSITORIES (MSR 2015), P180, DOI 10.1109/MSR.2015.24
   Tilevich E., 2010, AOSD 10 P 9 INT C AS, P25, DOI [10.1145/1739230.1739234, DOI 10.1145/1739230.1739234]
   Toledo R., 2010, P 9 ACM INT C ASPECT, P13
   Walls C., 2003, ACTION SERIES
   Washizaki H, 2009, ACP4IS'09: 8TH WORKSHOP ON ASPECTS, COMPONENTS AND PATTERNS FOR INFRASTRUCTURE SOFTWARE, P31
   Yu DC, 2007, CONFERENCE RECORD OF POPL 2007: THE 34TH ACM SIGPLAN SIGACT SYMPOSIUM ON PRINCIPLES OF PROGAMMING LANGUAGES, P237
NR 48
TC 2
Z9 2
U1 3
U2 14
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUL 15
PY 2019
VL 181
BP 27
EP 46
DI 10.1016/j.scico.2019.05.005
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA IW0MB
UT WOS:000484654900002
OA Bronze
DA 2024-07-18
ER

PT J
AU Syriani, E
   Sousa, V
   Lúcio, L
AF Syriani, Eugene
   Sousa, Vasco
   Lucio, Levi
TI Structure and behavior preserving statecharts refinements
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Statechart; Refinement; Software design; Verification
ID RULE-BASED REFINEMENT; CALCULUS; MODELS; NETS
AB Statecharts are one of the most popular modeling formalisms that is used in a diversity of real world applications, such as cyber-physical systems, mobile computing, and bioinformatics. Following common step-wise refinement strategies, modelers often develop and evolve Statecharts models incrementally to satisfy requirements and changes. Although there are already several existing Statecharts refinement approaches, they provide insufficient guarantees to support reasoning about the preservation of both its internal structure, to enhance development and maintenance, and its behavior, which external components using the Statecharts model may depend on. In this paper, we formulate formal requirements to minimally limit the allowable Statecharts refinement operations such that certain assumptions on the structure and reachability of the Statecharts model will hold. To satisfy these requirements, we propose a set of practical bounding refinement rules that allows the modeler to achieve such refinements for which notions of behavior and structure preservation can be statically verified under some assumptions. Our implementation shows how these rules can be applied in realistic scenarios. (C) 2018 Elsevier B.V. All rights reserved.
C1 [Syriani, Eugene; Sousa, Vasco] Univ Montreal, POB 6128,Succ Ctr Ville, Montreal, PQ H3C 3J7, Canada.
   [Lucio, Levi] Fortiss GmbH, Guerickestr 25, D-80805 Munich, Germany.
C3 Universite de Montreal; fortiss
RP Syriani, E (corresponding author), Univ Montreal, POB 6128,Succ Ctr Ville, Montreal, PQ H3C 3J7, Canada.
EM syriani@iro.umontreal.ca; dasilvav@iro.umontreal.ca; lucio@fortiss.org
RI Syriani, Eugene/AAI-5036-2020
OI Syriani, Eugene/0000-0001-6527-1651
CR ABRIAL JR, 1991, LECT NOTES COMPUT SC, V552, P398
   ACETO L, 1991, LECT NOTES COMPUT SC, V510, P506
   [Anonymous], 1989, PRENTICE HALL INT SE
   [Anonymous], 2012, PROPERTY PRESERVING
   [Anonymous], OOPSLA 87
   [Anonymous], THESIS
   Aravantinos V., 2015, CEUR WORKSHOP P, P19
   Bagherzadeh M, 2017, ESEC/FSE 2017: PROCEEDINGS OF THE 2017 11TH JOINT MEETING ON FOUNDATIONS OF SOFTWARE ENGINEERING, P419, DOI 10.1145/3106237.3106278
   Barbosa Luis Soares, 2008, 2008 10th International Symposium on Symbolic and Numeric Algorithms for Scientific Computing (SYNASC 2008), P340, DOI 10.1109/SYNASC.2008.88
   Boström P, 2007, LECT NOTES COMPUT SC, V4711, P79
   CASTAGNA G, 1995, ACM T PROGR LANG SYS, V17, P431, DOI 10.1145/203095.203096
   Crane ML, 2007, SOFTW SYST MODEL, V6, P415, DOI 10.1007/s10270-006-0042-8
   de Alfaro L., 2001, Software Engineering Notes, V26, P109, DOI 10.1145/503271.503226
   Famelis M, 2012, PROC INT CONF SOFTW, P573, DOI 10.1109/ICSE.2012.6227159
   Fuchs M., 1992, TECHNICAL REPORT
   Hansen C., 2013, P 6 C SOFTW LANG ENG
   Harel D., 1996, ACM Transactions on Software Engineering and Methodology, V5, P293, DOI 10.1145/235321.235322
   HAREL D, 1987, SCI COMPUT PROGRAM, V8, P231, DOI 10.1016/0167-6423(87)90035-9
   Harel D, 1997, COMPUTER, V30, P31, DOI 10.1109/2.596624
   Harel D, 2002, IEEE T SOFTWARE ENG, V28, P889, DOI 10.1109/TSE.2002.1033228
   IBM, 2018, RAT RHAPS
   ITU-T, 2016, SPEC DESCR LANG
   Klein C, 1997, FEATURE INTERACTIONS IN TELECOMMUNICATION NETWORKS IV, P284
   Long Q, 2003, LECT NOTES COMPUT SC, V2885, P125
   Lticio L, 2012, MODEL EVOLUTION
   MASIERO PC, 1994, INFORM SOFTWARE TECH, V36, P615, DOI 10.1016/0950-5849(94)90021-3
   MathWorks, 2013, STAT US GUID
   MathWorks, 2013, SIM US GUID
   Meyer B., 1994, REUSABLE SOFTWARE BA
   Mikk E., 1997, Advances in Computing Science - ASIAN '97. Third Asian Computing Science Conference. Proceedings, P181
   Miyazawa A, 2012, SCI COMPUT PROGRAM, V77, P1151, DOI 10.1016/j.scico.2011.07.007
   O. M. Group, 2017, UN MOD LANG SUP
   Padberg J, 2003, LECT NOTES COMPUT SC, V2472, P161
   Padberg J, 2001, SCI COMPUT PROGRAM, V40, P97, DOI 10.1016/S0167-6423(00)00022-8
   Paech B., 1994, FME '94: Industrial Benefit of Formal Methods. Second International Symposium of Formal Methods Europe. Proceedings, P154
   Prehofer C, 2013, ELECTRON NOTES THEOR, V295, P65, DOI 10.1016/j.entcs.2013.04.006
   Said MY, 2015, SOFTW SYST MODEL, V14, P1557, DOI 10.1007/s10270-013-0391-z
   Scholz P, 1998, LECT NOTES COMPUT SC, V1382, P285, DOI 10.1007/BFb0053597
   Scholz P, 2001, SCI COMPUT PROGRAM, V40, P119, DOI 10.1016/S0167-6423(00)00026-5
   Selic B., 2011, Int. J. Software and Informatics, V5, P313
   Syriani E., 2013, JOINT P MODELS 13 DE, P21
   Szasz N., 2010, 1013 RT U REP MONT
NR 42
TC 7
Z9 7
U1 0
U2 1
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 15
PY 2019
VL 170
BP 45
EP 79
DI 10.1016/j.scico.2018.10.005
PG 35
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA HF8AB
UT WOS:000454462200003
OA hybrid
DA 2024-07-18
ER

PT J
AU de Berardinis, J
   Forcina, G
   Jafari, A
   Sirjani, M
AF de Berardinis, Jacopo
   Forcina, Giorgio
   Jafari, Ali
   Sirjani, Marjan
TI Actor-based macroscopic modeling and simulation for smart urban planning
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Actor-based modeling languages
AB Assessing the impacts of a mobility initiative prior to deployment is a complex task for both urban planners and transport companies. Computational models like Tangramob offer an agent-based framework for simulating the evolution of urban traffic after the introduction of new mobility services. However, simulations can be computationally expensive to perform due to their iterative nature and the microscopic representation of traffic. To address this issue, we designed a simplified model architecture of Tangramob in Timed Rebeca (TRebeca) and we developed a tool-chain for the generation runnable instances of this model starting from the same input files of Tangramob. Running TRebeca models allows users to get an idea of how the mobility initiatives under study affect the traveling experience of commuters, in a short time and without the need to use the simulator during this first experimental step. Then, once a subset of these initiatives is identified according to user's criteria, it is reasonable to simulate them with Tangramob in order to get more detailed results. To validate this approach, we compared the output of both the simulator and the TRebeca model on a collection of mobility initiatives. The correlation between the results demonstrates the usefulness of using TRebeca models for unconventional contexts of application. (C) 2018 Elsevier B.V. All rights reserved.
C1 [de Berardinis, Jacopo] Univ Manchester, Sch Comp Sci, Oxford Rd, Manchester M13 9PL, Lancs, England.
   [Forcina, Giorgio; Sirjani, Marjan] Malardalen Univ, Sch Innovat Design & Engn, Hogskoleplan 1, S-72123 Vasteras, Sweden.
   [Jafari, Ali; Sirjani, Marjan] Reykjavik Univ, Sch Comp Sci, Menntavegur 1, IS-101 Reykjavik, Iceland.
C3 University of Manchester; Malardalen University; Reykjavik University
RP de Berardinis, J (corresponding author), Univ Manchester, Sch Comp Sci, Oxford Rd, Manchester M13 9PL, Lancs, England.
EM jacopo.deberardinis@postgrad.manchester.ac.uk; giorgio.forcina@mdh.se
OI de Berardinis, Jacopo/0000-0001-6770-1969
FU Icelandic Research Fund [163205-051]; DPAC Project at Malardalen
   University
FX The work of the 3rd and a part of that of the 4th author are supported
   by "Self-Adaptive Actors: SEADA" (project nr. 163205-051) from Icelandic
   Research Fund. Work of the 2nd and 4th author is also supported by DPAC
   Project at Malardalen University.
CR Agarwal A, 2018, TRANSPORTMETRICA A, V14, P520, DOI 10.1080/23249935.2017.1364802
   [Anonymous], WHY RIDE SHARING CO
   [Anonymous], HIGH PERFORMANCE COM
   [Anonymous], 2016, The Multi -Agent Transport Simulation MATSim
   [Anonymous], EL SIT RES PROJ
   [Anonymous], ANOTHER FAILED ATTEM
   [Anonymous], 2018, ARXIV180510906
   [Anonymous], 2016, WORLDS CIT 2016
   [Anonymous], LNCS WORKSH P SEFM
   Axtell R., 1996, Comput. Math. Organ. Theory, V1, P123, DOI DOI 10.1007/BF01299065
   Benevolo C, 2016, L N INF SYST ORGAN, V11, P13, DOI 10.1007/978-3-319-23784-8_2
   Bösch PM, 2017, PROCEDIA COMPUT SCI, V109, P861, DOI 10.1016/j.procs.2017.05.406
   Charypar D, 2007, TRANSPORT RES REC, P35, DOI 10.3141/2003-05
   Crociani L, 2016, LECT NOTES ARTIF INT, V10002, P147, DOI 10.1007/978-3-319-46882-2_9
   Jafari A, 2018, 33RD ANNUAL ACM SYMPOSIUM ON APPLIED COMPUTING, P423, DOI 10.1145/3167132.3167382
   Khamespanah E, 2015, SCI COMPUT PROGRAM, V98, P184, DOI 10.1016/j.scico.2014.07.005
   Nigro Christian, 2018, International Journal of Simulation and Process Modelling, V13, P73
   Reynisson AH, 2014, SCI COMPUT PROGRAM, V89, P41, DOI 10.1016/j.scico.2014.01.008
   Sirjani Marjan, 2016, Theory and Practice of Formal Methods. Essays Dedicated to Frank de Boer on the Occasion of His 60th Birthday. LNCS 9660, P373, DOI 10.1007/978-3-319-30734-3_25
   Sirjani M, 2007, LECT NOTES COMPUT SC, V4709, P102
   Waraich RA, 2015, GEOTECH ENVIRON, V13, P211, DOI 10.1007/978-3-319-11469-9_9
   Weidmann U., 1992, TRANSPORTTECHNIK FUS
   Zhou XS, 2014, COGENT ENG, V1, DOI 10.1080/23311916.2014.961345
NR 23
TC 2
Z9 3
U1 2
U2 7
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 15
PY 2018
VL 168
BP 142
EP 164
DI 10.1016/j.scico.2018.09.002
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA HA6JG
UT WOS:000450385200007
OA hybrid, Green Submitted
DA 2024-07-18
ER

PT J
AU Cámara, J
   Peng, WX
   Garlan, D
   Schmerl, B
AF Camara, Javier
   Peng, Wenxin
   Garlan, David
   Schmerl, Bradley
TI Reasoning about sensing uncertainty and its reduction in decision-making
   for self-adaptation
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Adaptive system; Uncertainty; Uncertainty awareness; Uncertainty
   reduction; Decision making
ID CYBER-PHYSICAL SYSTEMS; ATTACKS
AB Adaptive systems are expected to adapt to unanticipated run-time events using imperfect information about themselves, their environment, and goals. This entails handling the effects of uncertainties in decision-making, which are not always considered as a first-class concern. This paper contributes a formal analysis technique that explicitly considers uncertainty in sensing when reasoning about the best way to adapt, together with uncertainty reduction mechanisms to improve system utility. We illustrate our approach on a Denial of Service (DoS) attack scenario and present results that demonstrate the benefits of uncertainty-aware decision-making in comparison to using an uncertainty-ignorant approach, both in the presence and absence of uncertainty reduction mechanisms. (C) 2018 Elsevier B.V. All rights reserved.
C1 [Camara, Javier; Garlan, David; Schmerl, Bradley] Carnegie Mellon Univ, 5000 Forbes Ave, Pittsburgh, PA 15213 USA.
   [Peng, Wenxin] Google Inc, 1600 Amphitheatre Pkwy, Mountain View, CA 94043 USA.
C3 Carnegie Mellon University; Google Incorporated
RP Cámara, J (corresponding author), Carnegie Mellon Univ, 5000 Forbes Ave, Pittsburgh, PA 15213 USA.
EM jcmoreno@cs.cmu.edu; wenxinp@google.com; garlan@cs.cmu.edu;
   schmerl@cs.cmu.edu
RI Camara, Javier/ABF-1534-2021
OI Schmerl, Bradley/0000-0001-7828-622X; Garlan, David/0000-0002-6735-8301
FU AFRL; DARPA [FA8750-16-2-0042]; Department of Defense
   [FA8721-05-C-0003]; Carnegie Mellon University
FX This material is based on research sponsored by AFRL and DARPA under
   agreement number FA8750-16-2-0042 and by the Department of Defense under
   Contract No. FA8721-05-C-0003 with Carnegie Mellon University for the
   operation of the Software Engineering Institute, a federally funded
   research and development center. The U.S. Government is authorized to
   reproduce and distribute reprints for Governmental purposes
   notwithstanding any copyright notation thereon. The views and
   conclusions contained herein are those of the authors and should not be
   interpreted as necessarily representing the official policies or
   endorsements, either expressed or implied, of the AFRL, DARPA, ONR or
   the U.S. Government. References herein to any specific commercial
   product, process, or service by trade name, trade mark, manufacturer, or
   otherwise, does not necessarily constitute or imply its endorsement,
   recommendation, or favoring by Carnegie Mellon University or its
   Software Engineering Institute. This material has been approved for
   public release and unlimited distribution.
CR Baresi L., 2010, Proceedings of the 2010 IEEE 18th International Conference on Requirements Engineering (RE2010), P125, DOI 10.1109/RE.2010.25
   Bianco A., 1995, Foundations of Software Technology and Theoretical Computer Science. 15th Conference. Proceedings, P499
   Calinescu R, 2011, IEEE T SOFTWARE ENG, V37, P387, DOI 10.1109/TSE.2010.92
   Calinescu R, 2009, PROC INT CONF SOFTW, P100, DOI 10.1109/ICSE.2009.5070512
   Camara Javier, 2015, 2015 IEEE/ACM 10th International Symposium on Software Engineering for Adaptive and Self-Managing Systems (SEAMS), P146, DOI 10.1109/SEAMS.2015.14
   Camara J., 2018, P 15 INT WORKSH FDN
   Camara J., 2018, LNCS, V9640
   Cámara J, 2015, 30TH ANNUAL ACM SYMPOSIUM ON APPLIED COMPUTING, VOLS I AND II, P428, DOI 10.1145/2695664.2695680
   Cámara J, 2016, ACM T AUTON ADAP SYS, V10, DOI 10.1145/2774222
   Camara Javier, 2017, Technical Report CMUISR- 17-110
   Camara Javier, 2016, MANAGING TRADE OFFS
   Cassandra A, 2005, 2005 IEEE 2nd Symposium on Multi-Agent Security and Survivability, Proceedings, P11
   Chen TL, 2013, FORM METHOD SYST DES, V43, P61, DOI 10.1007/s10703-013-0183-7
   Chen T, 2013, LECT NOTES COMPUT SC, V7795, P185, DOI 10.1007/978-3-642-36742-7_13
   Chen Y, 2015, INT CONF ACOUST SPEE, P1752, DOI 10.1109/ICASSP.2015.7178271
   Cheng BHC, 2009, LECT NOTES COMPUT SC, V5525, P1, DOI 10.1007/978-3-642-02161-9_1
   Chong MS, 2015, P AMER CONTR CONF, P2439, DOI 10.1109/ACC.2015.7171098
   Deshpande T, 2014, 2014 TENTH EUROPEAN DEPENDABLE COMPUTING CONFERENCE (EDCC), P226, DOI 10.1109/EDCC.2014.37
   Epifani I, 2009, PROC INT CONF SOFTW, P111, DOI 10.1109/ICSE.2009.5070513
   Esfahani Naeem, 2013, Uncertainty in SelfAdaptive Software Systems, P214, DOI [DOI 10.1007/978-3-642-35813-59, DOI 10.1007/978-3-642-35813-5_9]
   Esfahani Naeem, 2011, SIGSOFT FSE 11 19 AC, P234, DOI DOI 10.1145/2025113.2025147
   Fawzi H, 2014, IEEE T AUTOMAT CONTR, V59, P1454, DOI 10.1109/TAC.2014.2303233
   Forejt V, 2011, LECT NOTES COMPUT SC, V6659, P53, DOI 10.1007/978-3-642-21455-4_3
   Fox M, 2003, J ARTIF INTELL RES, V20, P61, DOI 10.1613/jair.1129
   Garlan David, 2010, P FSE SDP WORKSH FUT, P125, DOI [10.1145/1882362.1882389, DOI 10.1145/1882362.1882389]
   He KL, 2015, PROCEEDINGS 2015 INTERNATIONAL SYMPOSIUM ON THEORETICAL ASPECTS OF SOFTWARE ENGINEERING, P135, DOI 10.1109/TASE.2015.15
   Huebscher MC, 2008, ACM COMPUT SURV, V40, DOI 10.1145/1380584.1380585
   Kephart JO, 2003, COMPUTER, V36, P41, DOI 10.1109/MC.2003.1160055
   Kwiatkowska Marta, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P585, DOI 10.1007/978-3-642-22110-1_47
   Mandavi-Hezavehi S., 2016, MANAGING TRADE OFFS
   Moreno GA, 2016, PR INT CONF AUTONOM, P147, DOI 10.1109/ICAC.2016.59
   Moreno GA, 2015, 2015 10TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE 2015) PROCEEDINGS, P1, DOI 10.1145/2786805.2786853
   Moreno J. C., 2014, LECT NOTES COMPUTER, P89
   Ramirez Andres J., 2012, 2012 7th International Symposium on Software Engineering for Adaptive and Self-Managing Systems, P99, DOI 10.1109/SEAMS.2012.6224396
   Schmerl Bradley R., 2014, P HOTSOS 14, P2
   Whittle J, 2009, PROCEEDINGS OF THE 2009 17TH IEEE INTERNATIONAL REQUIREMENTS ENGINEERING CONFERENCE, P79, DOI 10.1109/RE.2009.36
NR 36
TC 16
Z9 17
U1 0
U2 3
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 1
PY 2018
VL 167
BP 51
EP 69
DI 10.1016/j.scico.2018.07.002
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GZ1NZ
UT WOS:000449136100004
OA Bronze
DA 2024-07-18
ER

PT J
AU Audrito, G
   Damiani, F
   Viroli, M
AF Audrito, Giorgio
   Damiani, Ferruccio
   Viroli, Mirko
TI Optimal single-path information propagation in gradient-based algorithms
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Aggregate programming; Gradient; Information speed; Reliability; Spatial
   computing
AB Scenarios like wireless network networks, Internet of Things, and pervasive computing, promote full distribution of computation as well as opportunistic, peer-to-peer interactions between devices spread in the environment. In this context, computing estimated distances between devices in the network is a key component, commonly referred to as the gradient self-organisation pattern: it is frequently used to broadcast information, forecast pointwise events, as carrier for distributed sensing, and as combinator for higher-level spatial structures. However, computing gradients is very problematic in an environment affected by mutability in the position and working frequency of devices: existing algorithms fail in reaching adequate trade-offs between accuracy and reaction speed to environment changes. We propose BIS (Bounded Information Speed) gradient, a fully-distributed algorithm that uses time information to achieve a smooth and predictable reaction speed, and prove it is optimal across algorithms following a single-path-communication strategy to spread information. We empirically evaluate BIS gradient and compare it with other approaches, showing that BIS achieves the best accuracy while keeping smoothness under control, and accordingly provides improved performance when used as building block in more complex algorithms for creating spatial structures and performing distributed collection of data. (C) 2018 Elsevier B.V. All rights reserved.
C1 [Audrito, Giorgio; Damiani, Ferruccio] Univ Torino, Dipartimento Informat, Turin, Italy.
   [Audrito, Giorgio; Damiani, Ferruccio] Univ Torino, Ctr Competenza Calcolo Sci, Turin, Italy.
   [Viroli, Mirko] Univ Bologna, DISI, Cesena, Italy.
C3 University of Turin; University of Turin; University of Bologna
RP Audrito, G; Damiani, F (corresponding author), Univ Torino, Dipartimento Informat, Turin, Italy.; Audrito, G; Damiani, F (corresponding author), Univ Torino, Ctr Competenza Calcolo Sci, Turin, Italy.; Viroli, M (corresponding author), Univ Bologna, DISI, Cesena, Italy.
EM giorgio.audrito@unito.it; ferruccio.damiani@unito.it;
   mirko.viroli@unibo.it
RI Ferruccio, Damiani/D-2383-2011; Audrito, Giorgio/S-4613-2018
OI Ferruccio, Damiani/0000-0001-8109-1706; Viroli,
   Mirko/0000-0003-2702-5702
FU EU [644298]; ICT COST Action [IC1402 ARVI]; Ateneo/CSP project RunVar
   [D16D15000360005]
FX This work has been partially supported by: EU Horizon 2020 project HyVar
   (www.hyvar-project.eu), GA No. 644298; ICT COST Action IC1402 ARVI
   (www.cost-arvi.eu); Ateneo/CSP D16D15000360005 project RunVar
   (runvar-project.di.unito.it).
CR Aldinucci M., 2016, 22 INT C COMP HIGH E
   Audrito G, 2017, INT CONF SELF SELF, P91, DOI 10.1109/SASO.2017.18
   Audrito G, 2017, LECT NOTES COMPUT SC, V10319, P59, DOI 10.1007/978-3-319-59746-1_4
   Bachrach J, 2010, NEURAL COMPUT APPL, V19, P825, DOI 10.1007/s00521-010-0382-8
   Beal J, 2015, COMPUTER, V48, P22, DOI 10.1109/MC.2015.261
   Beal J, 2014, INT CONF SELF SELF, P8, DOI 10.1109/SASOW.2014.6
   Beal J, 2013, FORMAL AND PRACTICAL ASPECTS OF DOMAIN-SPECIFIC LANGUAGES: RECENT DEVELOPMENTS, P436, DOI 10.4018/978-1-4666-2092-6.ch016
   Beal J, 2008, APPLIED COMPUTING 2008, VOLS 1-3, P1969
   Beal Jacob., 2009, Proceedings of the 2009 ACM symposium on Applied Computing, P1197, DOI DOI 10.1145/1529282.1529550
   Bicocchi N, 2012, ACM T AUTON ADAP SYS, V7, DOI 10.1145/2168260.2168262
   Castelli G, 2015, ACM T AUTON ADAP SYS, V10, DOI 10.1145/2700321
   Damiani F, 2015, LOG METH COMPUT SCI, V11, DOI 10.2168/LMCS-11(4:21)2015
   Damiani F, 2016, SCI COMPUT PROGRAM, V117, P17, DOI 10.1016/j.scico.2015.11.005
   Damiani F, 2015, LECT NOTES COMPUT SC, V9039, P113, DOI 10.1007/978-3-319-19195-9_8
   Elhage N., 2010, P 9 INT C AUTONOMOUS, V1-3, P907
   Fernandez-Marquez JL, 2012, INT CONF SELF SELF, P217, DOI 10.1109/SASOW.2012.45
   Giavitto J., 2004, TECH REP
   Lafuente AL, 2017, LOG METH COMPUT SCI, V13, DOI 10.23638/LMCS-13(1:13)2017
   Liu QZ, 2013, COMPUT J, V56, P1469, DOI 10.1093/comjnl/bxt124
   Fernandez-Marquez JL, 2013, NAT COMPUT, V12, P43, DOI 10.1007/s11047-012-9324-y
   Montagna S, 2013, MOBILE NETW APPL, V18, P398, DOI 10.1007/s11036-012-0411-1
   Nagpal R, 2003, LECT NOTES COMPUT SC, V2634, P333
   Pianini D, 2013, J SIMUL, V7, P202, DOI 10.1057/jos.2012.27
   Pianini D, 2015, 30TH ANNUAL ACM SYMPOSIUM ON APPLIED COMPUTING, VOLS I AND II, P1846, DOI 10.1145/2695664.2695913
   Royer EM, 1999, IEEE PERS COMMUN, V6, P46, DOI 10.1109/98.760423
   Stuart A., 1994, KENDALLS ADV THEORY, V1
   Viroli Mirko, 2012, Coordination Models and Languages. Proceedings 14th International Conference, COORDINATION 2012, P212, DOI 10.1007/978-3-642-30829-1_15
   Viroli M., 2013, COMMUN COMPUT PHYS, V393, P114, DOI 10.1007/978-3-642-45364-9
   Viroli M., ARXIV161008116
   Viroli M, 2015, INT CONF SELF SELF, P81, DOI 10.1109/SASO.2015.16
   Viroli M, 2018, ACM T MODEL COMPUT S, V28, DOI 10.1145/3177774
   Viroli M, 2014, LECT NOTES COMPUT SC, V8459, P163, DOI 10.1007/978-3-662-43376-8_11
   Viroli M, 2011, ACM T AUTON ADAP SYS, V6, DOI 10.1145/1968513.1968517
   Viroli M, 2009, LECT NOTES COMPUT SC, V5521, P143, DOI 10.1007/978-3-642-02053-7_8
   WEIBULL W, 1951, J APPL MECH-T ASME, V18, P293
NR 35
TC 13
Z9 14
U1 0
U2 2
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 15
PY 2018
VL 166
BP 146
EP 166
DI 10.1016/j.scico.2018.06.002
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GV5OO
UT WOS:000446152000007
OA hybrid
DA 2024-07-18
ER

PT J
AU Brogi, A
   Neri, D
   Rinaldi, L
   Soldani, J
AF Brogi, Antonio
   Neri, Davide
   Rinaldi, Luca
   Soldani, Jacopo
TI Orchestrating incomplete TOSCA applications with Docker
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Cloud applications; TOSCA; Docker; Container reuse
AB Cloud applications typically integrate multiple components, each needing a virtualised runtime environment that provides the required software support (e.g., operating system, libraries). This paper shows how TOSCA and Docker can effectively support the orchestration of multi-component applications, even when their runtime specification is incomplete. More precisely, we first introduce a TOSCA-based representation of multi-component applications, and we illustrate how such representation can be exploited to specify only the application-specific components. We then present TOSKERISER, a tool for automatically completing TOSCA application specifications, which can automatically discover the Docker based runtime environments that provide the software support needed by the application components. We also show how we fruitfully exploited TOSKERISER in two concrete case studies. Finally, we discuss how the specifications completed by TOSKERISER can be automatically orchestrated by already existing TOSCA engines. (C) 2018 Elsevier B.V. All rights reserved.
C1 [Brogi, Antonio; Neri, Davide; Rinaldi, Luca; Soldani, Jacopo] Univ Pisa, Dept Comp Sci, Pisa, Italy.
C3 University of Pisa
RP Soldani, J (corresponding author), Univ Pisa, Dept Comp Sci, Pisa, Italy.
EM soldani@di.unipi.it
RI Brogi, Antonio/HLQ-2040-2023; Soldani, Jacopo/O-5057-2019
OI Soldani, Jacopo/0000-0002-2435-3543; Neri, Davide/0000-0002-4758-4328;
   Brogi, Antonio/0000-0003-2048-2468
CR Abrahám E, 2016, LECT NOTES COMPUT SC, V9984, P229, DOI 10.1007/978-3-319-47677-3_15
   [Anonymous], Sock Shop
   Armbrust M, 2010, COMMUN ACM, V53, P50, DOI 10.1145/1721654.1721672
   Binz T., 2014, TOSCA: Portable Automated Deployment and Management of Cloud Applications, P527, DOI 10.1007/978-1-4614-7535-4_22
   Brogi A., 2013, Adv. in Serv.-Oriented and Cloud Comput, P218
   Brogi A, 2018, SOFTWARE PRACT EXPER, V48, P2061, DOI 10.1002/spe.2625
   Brogi A, 2018, LECT NOTES COMPUT SC, V10729, P491, DOI 10.1007/978-3-319-74781-1_33
   Brogi A, 2017, INT CONF CLOUD ENG, P273, DOI 10.1109/IC2E.2017.41
   Brogi A, 2016, SCI COMPUT PROGRAM, V115, P177, DOI 10.1016/j.scico.2015.09.004
   Brogi A, 2014, LECT NOTES COMPUT SC, V8745, P171, DOI 10.1007/978-3-662-44879-3_13
   Buyya R, 2009, FUTURE GENER COMP SY, V25, P599, DOI 10.1016/j.future.2008.12.001
   Di Martino Beniamino, 2011, EURO 2010 PARALLEL P
   Fettling Christoph, 2014, CLOUD COMPUTING PATT
   Guillén J, 2013, J SYST SOFTWARE, V86, P2294, DOI 10.1016/j.jss.2012.12.033
   Hamdaqa Mohammad, 2011, CLOSER 2011 P 1 INT
   Hirmer P., 2014, GI-Jahrestagung, P247
   Leymann F, 2011, IT-INF TECHNOL, V53, P163, DOI 10.1524/itit.2011.9070
   Matthias K., 2015, Docker: up and running
   Newman S., 2015, BUILDING MICROSERVIC
   Nygard M., 2007, Release It!: Design and Deploy Production-Ready Software
   OASIS, 2013, Topology and Orchestration Specification for Cloud Applications Version 1.0 OASIS Standard
   OASIS. Topology and Orchestration Specification for Cloud Applications (TOSCA), 2016, SIMPL PROF YAML VERS
   OpenStack development community, PARS TOSCA SIMPL PRO
   Pahl C, 2019, IEEE T CLOUD COMPUT, V7, P677, DOI 10.1109/TCC.2017.2702586
   Smith R., 2017, Docker orchestration
   Soldani J., 2014, P 4 INT C CLOUD COMP, P758, DOI [10.5220/0004979507580763, DOI 10.5220/0004979507580763]
   Soldani J, 2016, J SYST SOFTWARE, V113, P395, DOI 10.1016/j.jss.2015.12.025
   Soltesz S., 2007, Operating Systems Review, V41, P275, DOI 10.1145/1272998.1273025
   Zeng H, 2017, 2017 INTERNATIONAL CONFERENCE ON CYBER-ENABLED DISTRIBUTED COMPUTING AND KNOWLEDGE DISCOVERY (CYBERC), P105, DOI 10.1109/CyberC.2017.78
NR 29
TC 6
Z9 7
U1 0
U2 4
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 15
PY 2018
VL 166
BP 194
EP 213
DI 10.1016/j.scico.2018.07.005
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GV5OO
UT WOS:000446152000009
OA Bronze
DA 2024-07-18
ER

PT J
AU Cavarlé, G
   Plantec, A
   Costiou, S
   Ribaud, V
AF Cavarle, Glenn
   Plantec, Alain
   Costiou, Steven
   Ribaud, Vincent
TI A feature-oriented model-driven engineering approach for the early
   validation of feature-based applications
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Feature-oriented development; Early validation; Model driven
   engineering; Smalltalk
AB The software industry has to offer increasingly individualized software for a large number of platforms. In a constantly evolving technical context, the appropriateness and the profitableness of a software has to be ensured earlier, before most of the costs have been incurred and before most of the risks have been taken. Feature-Oriented Model Driven Development (FOMDD) is a promising paradigm to tackle the issue of developing software variants when multiple platforms are targeted. However, because of its model driven fundament, FOMDD suffers from limited capabilities regarding model execution and early validation. In this paper, we present CrossFabrik, an approach for the design and the early functional validation of feature-based applications. This approach allows the live debugging and editing of the underlying models during a simulation without being forced to stop and restart a validation process. Such an approach relies on the reflective capability of the development environment. An implementation of our approach within Pharo is also presented. (C) 2018 Elsevier B.V. All rights reserved.
C1 [Cavarle, Glenn; Plantec, Alain; Costiou, Steven; Ribaud, Vincent] Univ Bretagne Occidentale, Lab STICC, CNRS, UMR 6285, F-29200 Brest, France.
   [Cavarle, Glenn] Libre Informat, F-29000 Quimper, France.
C3 Universite de Bretagne Occidentale; Centre National de la Recherche
   Scientifique (CNRS)
RP Cavarlé, G; Plantec, A (corresponding author), Univ Bretagne Occidentale, Lab STICC, CNRS, UMR 6285, F-29200 Brest, France.; Cavarlé, G (corresponding author), Libre Informat, F-29000 Quimper, France.
EM glenn.cavarle@univ-brest.fr; alain.plantec@univ-brest.fr
RI Ribaud, Vincent/B-4018-2010
OI Ribaud, Vincent/0000-0002-5710-6469
CR Albassam E, 2013, 2013 3RD INTERNATIONAL WORKSHOP ON GAMES AND SOFTWARE ENGINEERING: ENGINEERING COMPUTER GAMES TO ENABLE POSITIVE, PROGRESSIVE CHANGE (GAS), P1, DOI 10.1109/GAS.2013.6632582
   Anastasopoulos M., OPTIMIZING MODEL DRI
   [Anonymous], THESIS
   [Anonymous], 2000, P C FUT SOFTW ENG IC, DOI DOI 10.1145/336512.336532
   [Anonymous], 2013, IEEE PES ISGT EUROPE, DOI DOI 10.1109/ISGTEUROPE.2013.6695263
   [Anonymous], 2012, PROC 7 WORKSHOP MODE, DOI DOI 10.1145/2422518.2422527
   [Anonymous], THESIS
   Apel S, 2009, J OBJECT TECHNOL, V8, P49, DOI 10.5381/jot.2009.8.5.c5
   Batory D, 2003, PROC INT CONF SOFTW, P187, DOI 10.1109/ICSE.2003.1201199
   Berander P., 2005, SOFTWARE QUALITY ATT, P1
   Boehm B, 2001, COMPUTER, V34, P135, DOI 10.1109/2.962984
   Cavarle G., 2016, P 11 ED INT WORKSH S, P1
   Crane Michelle L., 2008, P 2008 C CTR ADV STU, P8, DOI [10.1145/1463788.1463799, DOI 10.1145/1463788.1463799]
   da Silva AR, 2015, COMPUT LANG SYST STR, V43, P139, DOI 10.1016/j.cl.2015.06.001
   Davis A.M., 1995, Advances in computers, V40, P39
   EBRAERT P, 2007, ICDL 07, P3
   Eisenstadt M, 1997, COMMUN ACM, V40, P30, DOI 10.1145/248448.248456
   Forward A., 2010, P 2010 21 IEEE INT S, P1, DOI [10.1109/RSP.2010.5656338, DOI 10.1109/RSP.2010.5656338]
   Jezequel J. M., 2009, INT SUMMER SCH GENER, P201
   Jicheng Fu, 2007, Innovations for Requirements Analysis. From Stakeholders' Needs to Formal Designs.14th Monterey Workshop 2007. Revised Selected Papers, P43
   Joorabchi Mona Erfani, 2013, 2013 ACM / IEEE International Symposium on Empirical Software Engineering and Measurement (ESEM), P15, DOI 10.1109/ESEM.2013.9
   Kang Kyo C., 1990, Distribution, V17, P161, DOI [10.1080/10629360701306050, DOI 10.1080/10629360701306050]
   KENT S, 2002, LNCS, V2335, P286, DOI DOI 10.1007/3-540-47884-1
   Kiczales G., 1993, OBJECT ORIENTED PROG, P101
   Lee K, 2002, LECT NOTES COMPUT SC, V2319, P62
   Meuter W., 2005, ISIM 2005, P194
   Miller I., 2003, MDA GUIDE VERSION 1
   Muller PA, 2005, LECT NOTES COMPUT SC, V3713, P264, DOI 10.1007/11557432_19
   Nierstrasz Oscar, 2010, Pharo By Example
   Northrop L., 2001, SOFTWARE PRODUCT LIN
   Object Management Group, 2013, OMG MET FAC MOF COR
   Peck MM, 2015, SCI COMPUT PROGRAM, V98, P339, DOI 10.1016/j.scico.2014.05.015
   Quinn Clark N., 2011, The Mobile Academy: mLearning for Higher Education, P1
   Riehle D, 2001, ACM SIGPLAN NOTICES, V36, P327, DOI 10.1145/504311.504306
   Steinberg D., 2008, EMF: Eclipse Modeling Framework, Vsecond
   Usman M, 2017, J SYST SOFTWARE, V123, P1, DOI 10.1016/j.jss.2016.09.049
   Van Paesschen E, 2006, LECT NOTES COMPUT SC, V3844, P347
   Verwaest T, 2011, OOPSLA 11: PROCEEDINGS OF THE 2011 ACM INTERNATIONAL CONFERENCE ON OBJECT ORIENTED PROGRAMMING SYSTEMS LANGUAGES AND APPLICATIONS, P959
NR 38
TC 2
Z9 2
U1 0
U2 6
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 1
PY 2018
VL 161
SI SI
BP 18
EP 33
DI 10.1016/j.scico.2018.01.001
PG 16
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GI7ZZ
UT WOS:000434742900003
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Nagao, T
   Nishida, N
AF Nagao, Takahiro
   Nishida, Naoki
TI Rewriting induction for constrained inequalities
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Term rewriting system; Constrained rewriting; Rewriting induction;
   Inductive theorem proving
ID PROVING TERMINATION; PROOFS
AB Rewriting induction (RI) frameworks consist of inference rules to prove equations to be inductive theorems of a given term rewriting system, i.e., to be inductively valid w.r.t. reduction of the given system. To prove inductive validity of inequalities within such frameworks, one may reduce inequalities to equations. However, it is often hard to prove inductive validity of such reduced equations within the existing RI frameworks due to their indirect handling of inequalities. In this paper, we adapt the notion of inductive theorems to inequalities and propose an RI framework for directly proving inductive validity of inequalities of constrained term rewriting systems. Direct handling of inequalities enables us to utilize transitivity of binary predicates via application of induction hypotheses. Our framework succeeds in proving inductive validity of some inequalities that are hard to verify within the existing RI frameworks for equations. For the sake of automated reasoning, we provide a strategy for applying inference rules and evaluate its performance by means of an implementation. (C) 2017 Elsevier B.V. All rights reserved.
C1 [Nagao, Takahiro] Nagoya Univ, Grad Sch Informat Sci, Chikusa Ku, Furo Cho, Nagoya, Aichi 4648603, Japan.
   [Nishida, Naoki] Nagoya Univ, Grad Sch Informat, Chikusa Ku, Furo Cho, Nagoya, Aichi 4648603, Japan.
C3 Nagoya University; Nagoya University
RP Nishida, N (corresponding author), Nagoya Univ, Grad Sch Informat, Chikusa Ku, Furo Cho, Nagoya, Aichi 4648603, Japan.
EM nishida@i.nagoya-u.ac.jp
RI Nishida, Naoki/M-4970-2014
OI Nishida, Naoki/0000-0001-8697-4970
FU Graduate Program for Real-World Data Circulation Leaders of Nagoya
   University
FX This research is partly supported by the Graduate Program for Real-World
   Data Circulation Leaders of Nagoya University.
CR Aoto T., 2008, IPSJ T PROGRAM, P28
   Aoto T., 2007, P 24 ISSST ANN C, P1
   Aoto T, 2006, LECT NOTES COMPUT SC, V4098, P242
   Arts T, 2000, THEOR COMPUT SCI, V236, P133, DOI 10.1016/S0304-3975(99)00207-8
   Baader Franz, 1998, TERM REWRITING ALL
   Barrett Clark, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P171, DOI 10.1007/978-3-642-22110-1_14
   BOUHOULA A, 1995, J AUTOM REASONING, V14, P189, DOI 10.1007/BF00881856
   BOUHOULA A, 1992, LECT NOTES ARTIF INT, V624, P460
   Bouhoula A, 1997, J SYMB COMPUT, V23, P47, DOI 10.1006/jsco.1996.0076
   Bouhoula A, 2008, LECT NOTES ARTIF INT, V5195, P539, DOI 10.1007/978-3-540-71070-7_44
   Boyer R. S., 1979, COMPUTATIONAL LOGIC
   Brotherston J, 2005, LECT NOTES ARTIF INT, V3702, P78
   BUNDY A, 1993, ARTIF INTELL, V62, P185, DOI 10.1016/0004-3702(93)90079-Q
   Bundy A., 1990, 10th International Conference on Automated Deduction Proceedings, P647
   BUNDY A, 1990, LECT NOTES ARTIF INT, V449, P132
   Bundy A., 2001, HDB AUTOMATED REASON, P845, DOI DOI 10.1016/B978-044450813-3/50015-1
   BURCKERT HJ, 1994, ARTIF INTELL, V66, P235, DOI 10.1016/0004-3702(94)90027-2
   Claessen K., 2012, EPIC SERIES COMPUTIN, V17, P16
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Dillinger PC, 2007, ELECTRON NOTES THEOR, V174, P3, DOI 10.1016/j.entcs.2006.09.018
   Dixon L, 2003, LECT NOTES ARTIF INT, V2741, P279
   Falke Stephan, 2012, Automated Reasoning. Proceedings 6th International Joint Conference, IJCAR 2012, P241, DOI 10.1007/978-3-642-31365-3_20
   Falke S, 2008, LECT NOTES COMPUT SC, V5117, P94, DOI 10.1007/978-3-540-70590-1_7
   Falke S, 2009, LECT NOTES ARTIF INT, V5663, P277, DOI 10.1007/978-3-642-02959-2_22
   FRIBOURG L, 1989, J SYMB COMPUT, V8, P253, DOI 10.1016/S0747-7171(89)80069-0
   Fuhs C, 2017, ACM T COMPUT LOG, V18, DOI 10.1145/3060143
   Fuhs C, 2009, LECT NOTES COMPUT SC, V5595, P32, DOI 10.1007/978-3-642-02348-4_3
   Furuichi Y., 2008, IPSJ T PROGRAM, V1, P100
   Giesl J, 2007, LECT NOTES ARTIF INT, V4603, P443
   Guttag J., 1975, THESIS
   HUET G, 1982, J COMPUT SYST SCI, V25, P239, DOI 10.1016/0022-0000(82)90006-X
   Huth MichaelR. A., 2000, LOGIC COMPUTER SCI M
   Johansson M, 2014, LECT NOTES ARTIF INT, V8543, P108, DOI 10.1007/978-3-319-08434-3_9
   JOUANNAUD JP, 1989, INFORM COMPUT, V82, P1, DOI 10.1016/0890-5401(89)90062-X
   KAPUR D, 1991, J SYMB COMPUT, V11, P83, DOI 10.1016/S0747-7171(08)80133-2
   Klop J. W., 2003, TERM REWRITING SYSTE
   Koike Hirotaka, 2000, COMPUTER SOFTWARE, V17, P1
   Kop Cynthia, 2014, Programming Languages and Systems. 12th Asian Symposium (APLAS 2014), Proceedings: LNCS 8858, P334, DOI 10.1007/978-3-319-12736-1_18
   Kop C., 2013, P 13 INT WORKSH TERM, P59
   Kop C, 2015, LECT NOTES COMPUT SC, V9450, P549, DOI 10.1007/978-3-662-48899-7_38
   Kop C, 2013, LECT NOTES COMPUT SC, V8152, P343, DOI 10.1007/978-3-642-40885-4_24
   Leino KRM, 2012, LECT NOTES COMPUT SC, V7148, P315, DOI 10.1007/978-3-642-27940-9_21
   Musser D.R., 1980, Proceed- ings of the 7th ACM Symp. Principles of Programming Languages (POPL 1980), P154, DOI DOI 10.1145/567446.567461
   Nagao T, 2016, PROCEEDINGS OF THE 18TH INTERNATIONAL SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING (PPDP 2016), P50, DOI 10.1145/2967973.2968598
   Nakabayashi Naoki, 2011, Computer Software, V28, P173
   Nipkow T., 2002, ISABELLE HOL PROOF A, DOI DOI 10.1007/3-540-45949-9
   REDDY US, 1990, LECT NOTES ARTIF INT, V449, P162
   Reynolds A, 2015, LECT NOTES COMPUT SC, V8931, P80
   Rustan K, 2010, LECT NOTES ARTIF INT, V6355, P348, DOI 10.1007/978-3-642-17511-4_20
   Sakata T, 2011, LECT NOTES COMPUT SC, V6816, P138, DOI 10.1007/978-3-642-22531-4_9
   Sakata Tsubasa, 2009, IPSJ T PROGRAMMING, V2, P80
   Sato H, 2010, IEICE T INF SYST, VE93D, P942, DOI 10.1587/transinf.E93.D.942
   Sonnex W, 2012, LECT NOTES COMPUT SC, V7214, P407, DOI 10.1007/978-3-642-28756-5_28
   Urso P, 2004, THEOR COMPUT SCI, V323, P443, DOI 10.1016/j.tcs.2004.05.022
   Valbuena Irene Lobo, 2015, ELECT COMMUN EASST, V72
   Vidal G., 2012, 2012 12th IEEE Working Conference on Source Code Analysis and Manipulation (SCAM 2012), P34, DOI 10.1109/SCAM.2012.13
NR 56
TC 0
Z9 0
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD APR 1
PY 2018
VL 155
BP 76
EP 102
DI 10.1016/j.scico.2017.10.012
PG 27
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA FZ1JJ
UT WOS:000427332600005
OA hybrid
DA 2024-07-18
ER

PT J
AU Felgentreff, T
   Perscheid, M
   Hirschfeld, R
AF Felgentreff, T.
   Perscheid, M.
   Hirschfeld, R.
TI Implementing record and refinement for debugging timing-dependent
   communication
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 4th International Workshop on Academic Software Development Tools and
   Techniques
CY JUL 01, 2013
CL Montpellier, FRANCE
DE Distributed debugging; Record and replay; Dynamic analysis; Record and
   refinement
AB Distributed applications are hard to debug because timing-dependent network communication is a source of non-deterministic behavior. Current approaches to debug non deterministic failures include post-mortem debugging as well as record and replay. However, the first impairs system performance to gather data, whereas the latter requires developers to understand the timing-dependent communication at a lower level of abstraction than they develop at. Furthermore, both approaches require intrusive core library modifications to gather data from live systems.
   In this paper, we present the Peek-At-Talk debugger for investigating non-deterministic failures with low overhead in a systematic, top-down method, with a particular focus on tool-building issues in the following areas: First, we show how our debugging framework Path Tools guides developers from failures to their root causes and gathers run-time data with low overhead. Second, we present Peek-At-Talk, an extension to our Path Tools framework to record non-deterministic communication and refine behavioral data that connects source code with network events. Finally, we scope changes to the core library to record network communication without impacting other network applications. (C) 2015 Elsevier B.V. All rights reserved.
C1 [Felgentreff, T.; Perscheid, M.; Hirschfeld, R.] Univ Potsdam, Software Architecture Grp, Hasso Plattner Inst, Prof Dr Helmert Str 2-3, Potsdam, Germany.
C3 University of Potsdam
RP Felgentreff, T (corresponding author), Univ Potsdam, Software Architecture Grp, Hasso Plattner Inst, Prof Dr Helmert Str 2-3, Potsdam, Germany.
EM tim.felgentreff@hpi.uni-potsdam.de;
   michael.perscheid@hpi.uni-potsdam.de;
   robert.hirschfeld@hpi.uni-potsdam.de
OI Felgentreff, Tim/0000-0002-1293-632X
CR Almeida P.S., 2008, Interval Tree Clocks, P259
   Altekar G, 2009, SOSP'09: PROCEEDINGS OF THE TWENTY-SECOND ACM SIGOPS SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P193
   [Anonymous], ADV AUTOMATIC DIFFER
   [Anonymous], COP
   [Anonymous], 2009, TECHNICAL REPORT
   [Anonymous], 2475 IETF RFC
   [Anonymous], WASDETT
   [Anonymous], THESIS
   [Anonymous], NSDI
   Appeltauer M, 2013, J OBJECT TECHNOL, V12, DOI 10.5381/jot.2013.12.2.a4
   Appeltauer Malte, 2009, P 1 ACM INT WORKSHOP, P1, DOI DOI 10.1145/1562112.1562118
   Artho C, 2003, SOFTW TEST VERIF REL, V13, P207, DOI 10.1002/stvr.281
   BOHM C, 1966, COMMUN ACM, V9, P366, DOI 10.1145/355592.365646
   Brant J., 1998, ECOOP'98 - Object-Oriented Programming. 12th European Conference. Proceedings, P396, DOI 10.1007/BFb0054101
   Ernst MD, 2007, SCI COMPUT PROGRAM, V69, P35, DOI 10.1016/j.scico.2007.01.015
   Geels D, 2006, USENIX ASSOCIATION PROCEEDINGS OF THE 2006 USENIX ANNUAL TECHNICAL CONFERENCE, P289
   Gschwind T, 2003, SEVENTH EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, PROCEEDINGS, P259, DOI 10.1109/CSMR.2003.1192434
   Guo ZX, 2008, MANAG SCI ENG MANAG, P193
   Hirschfeld R, 2008, LECT NOTES COMPUT SC, V5235, P396, DOI 10.1007/978-3-540-88643-3_9
   Ingalls D, 1997, ACM SIGPLAN NOTICES, V32, P318, DOI 10.1145/263700.263754
   Jones JA, 2002, ICSE 2002: PROCEEDINGS OF THE 24TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P467, DOI 10.1109/ICSE.2002.1007991
   Kondo D., 2009, PAR DISTR PROC 2009, P1, DOI DOI 10.1109/IPDPS.2009.5160911
   Konuru R., 2000, Proceedings 14th International Parallel and Distributed Processing Symposium. IPDPS 2000, P219, DOI 10.1109/IPDPS.2000.845988
   LAMPORT L, 1978, COMMUN ACM, V21, P558, DOI 10.1145/359545.359563
   Lienhard A, 2008, LECT NOTES COMPUT SC, V5142, P592, DOI 10.1007/978-3-540-70592-5_25
   Mattern F., 1988, WORKSH PAR DISTR ALG, P215
   Nadiminti K., 2006, INFONET MAG, V16, P1
   PARKER DS, 1983, IEEE T SOFTWARE ENG, V9, P240, DOI 10.1109/TSE.1983.236733
   Perscheid Michael, 2012, Computer Software, V29, P188
   Perscheid M., 2012, Proceedings of the Tenth International Conference on Creating, Connecting and Collaborating through Computing (C5 2012), P60, DOI 10.1109/C5.2012.7
   Perscheid M., 2010, Proceedings 17th Working Conference on Reverse Engineering (WCRE 2010), P77, DOI 10.1109/WCRE.2010.17
   Perscheid M, 2014, 2014 SOFTWARE EVOLUTION WEEK - IEEE CONFERENCE ON SOFTWARE MAINTENANCE, REENGINEERING, AND REVERSE ENGINEERING (CSMR-WCRE), P446, DOI 10.1109/CSMR-WCRE.2014.6747215
   Perscheid M, 2014, 2014 SOFTWARE EVOLUTION WEEK - IEEE CONFERENCE ON SOFTWARE MAINTENANCE, REENGINEERING, AND REVERSE ENGINEERING (CSMR-WCRE), P124, DOI 10.1109/CSMR-WCRE.2014.6747162
   Pothier Guillaume, 2007, SIGPLAN Notices, V42, P535, DOI 10.1145/1297105.1297067
   Ronsse M, 1999, ACM T COMPUT SYST, V17, P133, DOI 10.1145/312203.312214
   Saito Yasushi., 2005, Proceedings of the Sixth International Symposium on Automated Analysis-Driven Debugging, AADEBUG'05, page, P69, DOI DOI 10.1145/1085130.1085139
   Van Gorp P, 2011, PROCEDIA COMPUT SCI, V4, P589, DOI 10.1016/j.procs.2011.04.062
   Yu Y., 2005, P 20 ACM S OP SYST P, P221
   Zeller A, 2009, WHY PROGRAMS FAIL: A GUIDE TO SYSTEMATIC DEBUGGING, 2ND EDITION
NR 39
TC 0
Z9 0
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 1
PY 2017
VL 134
SI SI
BP 4
EP 18
DI 10.1016/j.scico.2015.11.006
PG 15
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA EF1GE
UT WOS:000390072500002
OA hybrid
DA 2024-07-18
ER

PT J
AU Fürst, A
   Hoang, TS
   Basin, D
   Sato, N
   Miyazaki, K
AF Furst, Andreas
   Hoang, Thai Son
   Basin, David
   Sato, Naoto
   Miyazaki, Kunihiko
TI Large-scale system development using Abstract Data Types and refinement
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Instantiation; Refinement; Event-B; Abstract Data Types (ADTs)
AB We present a formal modelling approach using Abstract Data Types (ADTs) for large-scale system development in Event-B. The novelty of our approach is the combination of refinement and instantiation techniques to manage the complexity of systems under development. With ADTs, we model system components on an abstract level, specifying just their necessary properties, and we postpone the introduction of their concrete definitions to later development steps. As the ADTs are incrementally instantiated and become more concrete, behavioural details of systems are expanded via refinement in a manner consistent with the ADTs' transformation. We evaluate this approach using a large-scale case study in train control systems. The results show that our approach helps reduce system details during early development stages and leads to simpler and more automated proofs. (C) 2016 Elsevier B.V. All rights reserved.
C1 [Furst, Andreas; Basin, David] Swiss Fed Inst Technol, Inst Informat Secur, Zurich, Switzerland.
   [Hoang, Thai Son] Univ Southampton, ECS, Southampton SO9 5NH, Hants, England.
   [Sato, Naoto; Miyazaki, Kunihiko] Hitachi Ltd, Yokohama Res Lab, Tokyo, Japan.
C3 Swiss Federal Institutes of Technology Domain; ETH Zurich; University of
   Southampton; Hitachi Limited
RP Hoang, TS (corresponding author), Hitachi Ltd, YRL, Tokyo, Japan.
EM fuersta@inf.ethz.ch; T.S.Hoang@ecs.soton.ac.uk; basin@inf.ethz.ch;
   naoto.satoje@hitachi.com; kunihiko.miyazalci.zt@hitachi.com
RI Hoang, Thai Son/H-6159-2019
OI Hoang, Thai Son/0000-0003-4095-0732
CR Abrial J. -R., 2006, 28th International Conference on Software Engineering Proceedings, P761, DOI 10.1145/1134285.1134406
   Abrial Jean-Raymond, 2010, International Journal on Software Tools for Technology Transfer, V12, P447, DOI 10.1007/s10009-010-0145-y
   Abrial J.-R., 2013, LNCS, V7940, P1, DOI DOI 10.1007/978-3-642-38613-8_
   Abrial J.-R., 1996, B BOOK ASSIGNING PRO
   Abrial J R, 2010, Modeling in Event-B: system and softeng
   Abrial JR, 2007, FUND INFORM, V77, P1
   BACK RJR, 1990, LECT NOTES COMPUT SC, V430, P67
   Basin D., CORR
   Behm P, 1999, LECT NOTES COMPUT SC, V1708, P369
   Bjorner D., 2003, FORMS
   Borger E., 1995, SOFSEM '95: Theory and Practice of Informatics. 22nd Seminar on Current Trends in Theory and Practice of Informatics. Proceedings, P236
   Breitman K., 2009, LECT NOTES COMPUT SC, V5885
   Butler Michael, 2013, Theories of Programming and Formal Methods. Essays Dedicated to Jifeng He on the Occasion of His 70th Birthday. LNCS 8051, P67, DOI 10.1007/978-3-642-39698-4_5
   EHRIG H, 1985, EATCS MONOGR THEOR C, V6
   *EUR RAILW AG, 2007, ERTMS ETCS FUNCT REQ
   Furst A., 2014, GENERIC INSTANTIATIO
   Furst A, 2014, LECT NOTES COMPUT SC, V8739, P323, DOI 10.1007/978-3-319-10181-1_20
   Fürst A, 2014, LECT NOTES COMPUT SC, V8477, P222, DOI 10.1007/978-3-662-43652-3_20
   Hoang T.S., 2013, IND DEPLOYMENT SYSTE, P211
   IEEE, 2005, IEEE Std 1474.1-2004, IEEE Standard for Communications-Based Train Control (CBTC) Performance and Functional Requirements
   James P, 2014, SCI COMPUT PROGRAM, V96, P315, DOI 10.1016/j.scico.2014.04.005
   LAMPORT L, 1994, ACM T PROGR LANG SYS, V16, P872, DOI 10.1145/177492.177726
   Liskov B., 1974, SIGPLAN Notices, V9, P50, DOI 10.1145/942572.807045
   Sannella D., 1997, Formal Aspects of Computing, V9, P229, DOI 10.1007/BF01211084
NR 24
TC 5
Z9 6
U1 0
U2 2
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 1
PY 2016
VL 131
BP 59
EP 75
DI 10.1016/j.scico.2016.04.010
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA EB8FQ
UT WOS:000387627300005
OA Bronze, Green Accepted
DA 2024-07-18
ER

PT J
AU Villanueva, D
   González-Carrasco, I
   López-Cuadrado, JL
   Lado, N
AF Villanueva, Daniel
   Gonzalez-Carrasco, Israel
   Lopez-Cuadrado, J. L.
   Lado, Nora
TI SMORE: Towards a semantic modeling for knowledge representation on
   social media
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Semantic data models; Social media; Semantic representation
ID PERSONALIZED RECOMMENDER SYSTEM; EXPERT-SYSTEM; SUPPORT; FRAMEWORK;
   EFFICIENT; CONTEXT
AB This research presents SMORE, a semantic model for knowledge representation on social media. In order to provide recommendations, the model provides the elements for representing the content through the use of an ontological model and semantic techniques for the characterization and relationships between user profiles, products and social networks. In fact, with this model could be the basis of recommendation system based on social media data, and it could be exploited use by the recommendations on different products, which are stored in the Web and with similar characteristics between them. Moreover, SMORE represent the information related to user of the social networks in order to have a user characterization to be used for future recommendations in several domains. The semantic model has been evaluated with semantic data extracted from a trusted social network as, Twitter, obtaining the information specified by an expert in the field of marketing for recommendations in the automotive industry. (C) 2015 Elsevier B.V. All rights reserved.
C1 [Villanueva, Daniel; Gonzalez-Carrasco, Israel; Lopez-Cuadrado, J. L.; Lado, Nora] Univ Carlos III Madrid, Dept Comp Sci, E-28903 Getafe, Spain.
C3 Universidad Carlos III de Madrid
RP Villanueva, D (corresponding author), Univ Carlos III Madrid, Dept Comp Sci, E-28903 Getafe, Spain.
EM dany.villavas@gmail.com
RI lado, nora/L-7677-2014; Gonzalez-Carrasco, Israel/Q-5102-2017; Cuadrado,
   Jose Luis Lopez/ABG-7821-2020
OI Gonzalez-Carrasco, Israel/0000-0001-8294-3157; Cuadrado, Jose Luis
   Lopez/0000-0001-6115-0641; Villanueva Vasquez,
   Daniel/0000-0001-8512-7630; LADO Couste, NORA RITA/0000-0001-6117-8951
FU National Council of Science and Technology (CONACYT); Public Education
   Secretary (SEP) through PROMEP; project "FLORA: Financial Linked Open
   Data-based Reasoning and Management for Web Science" [TIN2011-27405]
FX The Authors are very grateful to the General Council of Superior
   Technological Education of Mexico (DGEST). Additionally, this work was
   sponsored by the National Council of Science and Technology (CONACYT)
   and the Public Education Secretary (SEP) through PROMEP and the project
   "FLORA: Financial Linked Open Data-based Reasoning and Management for
   Web Science" (TIN2011-27405).
CR Agius HW, 1999, ARTIF INTELL REV, V13, P55, DOI 10.1023/A:1006569626086
   Ale MA, 2014, SCI COMPUT PROGRAM, V95, P73, DOI 10.1016/j.scico.2013.12.012
   Mayer MA, 2012, STUD HEALTH TECHNOL, V180, P853, DOI 10.3233/978-1-61499-101-4-853
   [Anonymous], 2007, P 2007 INT C SERV SY, DOI DOI 10.1109/ICSSSM.2007.4280214
   [Anonymous], 2009, 2009 ICDIM 2009 4 IN, DOI [10.1109/ICDIM.2009.5356767, DOI 10.1109/ICDEW.2009.5356764]
   [Anonymous], 2010, Proceedings of the 1st ACM International Health Informatics Symposium, DOI DOI 10.1145/1882992.1883053
   Atzori L, 2012, COMPUT NETW, V56, P3594, DOI 10.1016/j.comnet.2012.07.010
   Bao Xinlong., 2009, Proceedings of the 3rd ACM Conference on Recommender Systems, P109
   Martínez ABB, 2009, IEEE T CONSUM ELECTR, V55, P286, DOI 10.1109/TCE.2009.4814447
   Belk M., 2010, P 4 INT WORKSH PERS, P35
   Biuk-Aghai RP, 2008, 2008 2ND INTERNATIONAL CONFERENCE ON INTERNET MULTIMEDIA SERVICES ARCHITECTURE AND APPLICATION (IMSAA), P144
   Blanco-Fernández Y, 2011, ENG APPL ARTIF INTEL, V24, P1385, DOI 10.1016/j.engappai.2011.02.020
   Bojars U., 2008, SOCIAL NETWORKS DATA
   Burke R, 2011, AI MAG, V32, P13, DOI 10.1609/aimag.v32i3.2361
   Catala A, 2013, SCI COMPUT PROGRAM, V78, P1930, DOI 10.1016/j.scico.2012.06.010
   Chen L, 2013, EXPERT SYST APPL, V40, P2889, DOI 10.1016/j.eswa.2012.12.006
   Cho YH, 2002, EXPERT SYST APPL, V23, P329, DOI 10.1016/S0957-4174(02)00052-0
   Choi SM, 2013, EXPERT SYST APPL, V40, P1274, DOI 10.1016/j.eswa.2012.08.063
   Christensen IA, 2011, EXPERT SYST APPL, V38, P14127, DOI 10.1016/j.eswa.2011.04.221
   Crespo P., 2013, EXPERT SYST
   Salas-Zárate MD, 2015, SCI COMPUT PROGRAM, V102, P1, DOI 10.1016/j.scico.2014.12.004
   Denecke Kerstin, 2008, 2008 IEEE 24th International Conference on Data Engineering Workshop (ICDE Workshop), P507, DOI 10.1109/ICDEW.2008.4498370
   Di Noia T., 2012, P 8 INT C SEM SYST, P1, DOI [DOI 10.1145/2362499.2362501, 10.1145/2362499.2362501]
   DUFFY P. D., 2006, USE BLOGS WIKIS RSS
   Dugan C, 2007, GROUP'07: PROCEEDINGS OF THE 2007 INTERNATIONAL ACM CONFERENCE ON SUPPORTING GROUP WORK, P387
   Fernandez-Tobias Ignacio., 2011, Proceedings of the Second International Workshop on Information Heterogeneity and Fusion in Recommender Systems as the Fifth ACM Conference on Recommender Systems, HetRec'11, P25
   Fornara N, 2013, ARTIF INTELL REV, V39, P63, DOI 10.1007/s10462-012-9390-7
   Gao SJ, 2007, DECIS SUPPORT SYST, V44, P60, DOI 10.1016/j.dss.2007.03.001
   Garcia I, 2011, EXPERT SYST APPL, V38, P7683, DOI 10.1016/j.eswa.2010.12.143
   Garcia-Crespo A, 2010, COMPUT IND, V61, P595, DOI 10.1016/j.compind.2010.01.004
   García-Crespo A, 2011, EXPERT SYST APPL, V38, P13310, DOI 10.1016/j.eswa.2011.04.152
   Ghani R., 2002, P WORKSHOP RECOMMEND, P27
   Glass J., 2010, INF MANAG SPIM, V34
   Golbeck J, 2006, CONSUM COMM NETWORK, P282
   GOLDBERG D, 1992, COMMUN ACM, V35, P61, DOI 10.1145/138859.138867
   Guy I., 2009, P 3 ACM C REC SYST, P53
   Guy I, 2010, SIGIR 2010: PROCEEDINGS OF THE 33RD ANNUAL INTERNATIONAL ACM SIGIR CONFERENCE ON RESEARCH DEVELOPMENT IN INFORMATION RETRIEVAL, P194
   Hofmann T, 2004, ACM T INFORM SYST, V22, P89, DOI 10.1145/963770.963774
   Hsieh KL, 2011, EXPERT SYST APPL, V38, P14376, DOI 10.1016/j.eswa.2011.03.078
   Hyung Z, 2014, EXPERT SYST APPL, V41, P2608, DOI 10.1016/j.eswa.2013.10.035
   Kazienko P, 2011, IEEE T SYST MAN CY A, V41, P746, DOI 10.1109/TSMCA.2011.2132707
   Kim YS, 2011, EXPERT SYST APPL, V38, P13320, DOI 10.1016/j.eswa.2011.04.154
   Laroche M, 2013, INT J INFORM MANAGE, V33, P76, DOI 10.1016/j.ijinfomgt.2012.07.003
   Lee WP, 2004, EXPERT SYST APPL, V27, P665, DOI 10.1016/j.eswa.2004.07.001
   Lee WP, 2003, EXPERT SYST APPL, V25, P331, DOI 10.1016/S0957-4174(03)00074-5
   Lemos M.L., 2012, RING CONTEXT ONTOLOG, P10
   Lu J, 2015, DECIS SUPPORT SYST, V74, P12, DOI 10.1016/j.dss.2015.03.008
   Lu J, 2013, COMPUT INTELL-US, V29, P37, DOI 10.1111/j.1467-8640.2012.00427.x
   Lü LY, 2012, PHYS REP, V519, P1, DOI 10.1016/j.physrep.2012.02.006
   López-Cuadrado JL, 2012, EXPERT SYST APPL, V39, P8671, DOI 10.1016/j.eswa.2012.01.198
   Martínez L, 2008, INT J COMPUT INT SYS, V1, P225
   Martínez-Costa C, 2009, J BIOMED INFORM, V42, P150, DOI 10.1016/j.jbi.2008.05.005
   McAvoy LM, 2015, COMPUT SYST SCI ENG, V30, P19
   McCarthy JF, 2001, IEEE INTERNET COMPUT, V5, P48, DOI 10.1109/4236.968831
   Mcsherry D, 2005, ARTIF INTELL REV, V24, P179, DOI 10.1007/s10462-005-4612-x
   Morzy M, 2007, COMPUT SYST SCI ENG, V22, P279
   Mye Sohn, 2012, International Journal of Computer Systems Science & Engineering, V27, P415
   Nguyen K., 2007, OBLIGATION NETS RIGO
   Colombo-Mendoza LO, 2015, EXPERT SYST APPL, V42, P1202, DOI 10.1016/j.eswa.2014.09.016
   Paltoglou G, 2012, ACM T INTEL SYST TEC, V3, DOI 10.1145/2337542.2337551
   Peixoto R., 2012, TRACEABILITY BASED A
   Raimond Y., 2009, BBC PROGRAMMES ONTOL
   Rana C, 2015, ARTIF INTELL REV, V43, P141, DOI 10.1007/s10462-012-9359-6
   Ricci F, 2002, IEEE INTELL SYST, V17, P55
   Ricci F, 2011, RECOMMENDER SYSTEMS HANDBOOK, P1, DOI 10.1007/978-0-387-85820-3_1
   Rodríguez A, 2009, INTENSIVE: 2009 FIRST INTERNATIONAL CONFERENCE ON INTENSIVE APPLICATIONS AND SERVICES, P47, DOI 10.1109/INTENSIVE.2009.12
   Rodríguez-González A, 2012, COMPUT SCI INF SYST, V9, P713, DOI 10.2298/CSIS110722008R
   Rosaci D, 2010, COMPUT INTELL-US, V26, P121, DOI 10.1111/j.1467-8640.2009.00343.x
   Ruiz-Montiel M, 2009, LECT NOTES COMPUT SC, V5872, P604, DOI 10.1007/978-3-642-05290-3_74
   Santos O., 2013, EXPERT SYST
   Santos OC, 2014, SCI COMPUT PROGRAM, V88, P92, DOI 10.1016/j.scico.2013.12.004
   Stavrianou A., 2013, COMPUT INTELL
   Thelwall M, 2011, J AM SOC INF SCI TEC, V62, P406, DOI 10.1002/asi.21462
   Tiroshi Amit, 2012, Advances in User Modeling. UMAP 2011 Workshops. Revised Selected Papers, P60, DOI 10.1007/978-3-642-28509-7_7
   Towle B., 2000, Knowledge-Based Electronic Markets. Papers from the AAAI Workshop (Technical Report WS-00-04), P74
   Tsatsou D, 2012, 2012 SEVENTH INTERNATIONAL WORKSHOP ON SEMANTIC AND SOCIAL MEDIA ADAPTATION AND PERSONALIZATION (SMAP 2012), P101, DOI 10.1109/SMAP.2012.10
   Tumasjan A, 2010, 4 INT AAAI C WEBL SO, V10, P178, DOI 10.1074/jbc.M501708200
   Tung HW, 2004, 2004 IEEE INTERNATIONAL CONFERNECE ON E-TECHNOLOGY, E-COMMERE AND E-SERVICE, PROCEEDINGS, P259
   Monfil-Contreras EU, 2013, EXPERT SYST APPL, V40, P242, DOI 10.1016/j.eswa.2012.07.016
   Valencia-García R, 2014, SCI COMPUT PROGRAM, V95, P1, DOI 10.1016/j.scico.2014.04.010
   Wallace I., 2013, COMPUT INTELL
   Wang HH, 2014, SCI COMPUT PROGRAM, V95, P93, DOI 10.1016/j.scico.2014.02.027
   Wang XH, 2004, SECOND IEEE ANNUAL CONFERENCE ON PERVASIVE COMPUTING AND COMMUNICATIONS WORKSHOPS, PROCEEDINGS, P18
   Yates D, 2011, INT J INFORM MANAGE, V31, P6, DOI 10.1016/j.ijinfomgt.2010.10.001
   Zhong N, 2002, COMPUTER, V35, P27
NR 85
TC 13
Z9 13
U1 1
U2 36
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 1
PY 2016
VL 121
SI SI
BP 16
EP 33
DI 10.1016/j.scico.2015.06.008
PG 18
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DH6YU
UT WOS:000372938800003
OA Bronze
DA 2024-07-18
ER

PT J
AU Adams, MD
   Farmer, A
   Magalhaes, JP
AF Adams, Michael D.
   Farmer, Andrew
   Magalhaes, Jose Pedro
TI Optimizing SYB traversals is easy!
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Optimization; Partial evaluation; Datatype-generic programming; Haskell;
   Scrap Your Boilerplate (SYB)
AB The most widely used generic-programming system in the Haskell community, Scrap Your Boilerplate (SYB), also happens to be one of the slowest. Generic traversals in SYB are often an order of magnitude slower than equivalent handwritten, non-generic traversals. Thus while SYB allows the concise expression of many traversals, its use incurs a significant runtime cost. Existing techniques for optimizing other generic-programming systems are not able to eliminate this overhead.
   This paper presents an optimization that eliminates this cost. Essentially, it is a partial evaluation that takes advantage of domain-specific knowledge about the structure of SYB. It optimizes SYB traversals to be as fast as handwritten, non-generic code, and benchmarks show that this optimization improves the speed of SYB traversals by an order of magnitude or more. (C) 2015 Published by Elsevier B.V.
C1 [Adams, Michael D.] Univ Utah, Sch Comp, Salt Lake City, UT 84112 USA.
   [Adams, Michael D.] Univ Illinois, Dept Comp Sci, Urbana, IL 61801 USA.
   [Farmer, Andrew] Univ Kansas, Informat & Telecommun Technol Ctr, Lawrence, KS 66045 USA.
   [Magalhaes, Jose Pedro] Univ Oxford, Dept Comp Sci, Oxford OX1 2JD, England.
C3 Utah System of Higher Education; University of Utah; University of
   Illinois System; University of Illinois Urbana-Champaign; University of
   Kansas; University of Oxford
RP Adams, MD (corresponding author), Univ Utah, Sch Comp, Salt Lake City, UT 84112 USA.
EM afarmer@ittc.ku.edu; jpm@cs.ox.ac.uk
RI Adams, Michael/HNQ-4470-2023
FU National Science Foundation (NSF) [CCF-1218605, 1117569, 1248464];
   Rockwell Collins [4504813093]; Engineering and Physical Sciences
   Research Council (EPSRC) [EP/J010995/1]; Defense Advanced Research
   Projects Agency (DARPA) [FA8750-10-2-0233]; EPSRC [EP/J010995/1] Funding
   Source: UKRI; Division of Computing and Communication Foundations;
   Direct For Computer & Info Scie & Enginr [1248464] Funding Source:
   National Science Foundation; Division of Computing and Communication
   Foundations; Direct For Computer & Info Scie & Enginr [1117569] Funding
   Source: National Science Foundation
FX The work presented in this paper was supported in part by the National
   Science Foundation (NSF) grants CCF-1218605, 1117569, and 1248464, the
   Rockwell Collins contract 4504813093, the Engineering and Physical
   Sciences Research Council (EPSRC) grant EP/J010995/1, and the Defense
   Advanced Research Projects Agency (DARPA) agreement no.
   FA8750-10-2-0233.
CR Adams MD, 2014, PEPM '14: PROCEEDINGS OF THE ACM SIGPLAN WORKSHOP ON PARTIAL EVALUATION AND PROGRAM MANIPULATION, P71, DOI 10.1145/2543728.2543730
   Adams MD, 2012, ACM SIGPLAN NOTICES, V47, P13, DOI 10.1145/2430532.2364509
   Alimarine A, 2004, LECT NOTES COMPUT SC, V3125, P16
   [Anonymous], 1993, Prentice Hall international series in computer science
   Augustsson L, 2011, GENIPLATE VERSION 0
   Baker-Finch C, 2004, J FUNCT PROGRAM, V14, P211, DOI 10.1017/S0956796803004751
   Bolingbroke M, 2010, ACM SIGPLAN NOTICES, V45, P135, DOI 10.1145/2088456.1863540
   Brown NCC, 2009, HASKELL'09: PROCEEDINGS OF THE 2009 ACM SIGPLAN HASKELL SYMPOSIUM, P105
   Chakravarty M.M.T., 2009, INSTANT GENERICS FAS
   Farmer A, 2012, ACM SIGPLAN NOTICES, V47, P1, DOI 10.1145/2430532.2364508
   GHC Team, 2013, GLOR GLASG HASK COMP
   Gill A, 2009, LECT NOTES COMPUT SC, V5658, P285, DOI 10.1007/978-3-642-03034-5_14
   Hinze R, 2006, LECT NOTES COMPUT SC, V3945, P13
   Industrial Haskell Group, 2013, HACK TOT DOWNL
   Jones M. P., 1995, LISP and Symbolic Computation, V8, P229, DOI 10.1007/BF01019005
   Jones Simon Peyton, 2007, P 12 ACM SIGPLAN INT, P327, DOI [10.1145/1291151.1291200, DOI 10.1145/1291151.1291200]
   Jones SP, 2002, J FUNCT PROGRAM, V12, P393, DOI 10.1017/S0956796802004331
   Jonsson Peter A., 2011, P 20 ACM SIGPLAN WOR, P33, DOI [10.1145/1929501.1929507, DOI 10.1145/1929501.1929507]
   Lämmel R, 2004, ACM SIGPLAN NOTICES, V39, P244, DOI 10.1145/1016848.1016883
   Lämmel R, 2003, ACM SIGPLAN NOTICES, V38, P26, DOI 10.1145/640136.604179
   Magalhaes Jose Pedro, 2013, Implementation and Application of Functional Languages. 24th International Symposium, IFL 2012. Revised Selected Papers: LNCS 8241, P104, DOI 10.1007/978-3-642-41582-1_7
   Magalhaes JP, 2010, PEPM '10: PROCEEDINGS OF THE 2010 ACM SIGPLAN WORKSHOP ON PARTIAL EVALUATION AND PROGRAM MANIPULATION, P33, DOI 10.1145/1706356.1706366
   Mitchell N, 2007, HASKELL'07: PROCEEDINGS OF THE ACM SIGPLAN 2007 HASKELL WORKSHOP, P49, DOI 10.1145/1291201.1291208
   Rodriguez Alexey, 2008, UUCS2008010
   Santos A.S, 1995, THESIS
   Sculthorpe N, 2014, J FUNCT PROGRAM, V24, P434, DOI 10.1017/S0956796814000185
   Sculthorpe Neil, 2013, IMPLEMENTATION APPL
   Turchin V. F., 1979, SIGPLAN Notices, V14, P46, DOI 10.1145/954063.954069
   TURCHIN VF, 1986, ACM T PROGR LANG SYS, V8, P292, DOI 10.1145/5956.5957
   Vytiniotis D, 2012, ACM SIGPLAN NOTICES, V47, P341, DOI 10.1145/2398856.2364554
   Yakushev A, 2009, THESIS
NR 31
TC 4
Z9 3
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 15
PY 2015
VL 112
BP 170
EP 193
DI 10.1016/j.scico.2015.09.003
PN 2
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CW3HD
UT WOS:000364881700004
DA 2024-07-18
ER

PT J
AU Ale, MA
   Toledo, CM
   Chiotti, O
   Galli, MR
AF Ale, Mariel A.
   Toledo, Carlos M.
   Chiotti, Omar
   Galli, Maria R.
TI A conceptual model and technological support for organizational
   knowledge management
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Knowledge management; Knowledge management model; Distributed
   organizational memory; Semantic information retrieval; Ontology
   evolution
ID ONTOLOGY; INFORMATION; SIMILARITY; INTENTION; CONTEXT; SYSTEM
AB Knowledge Management (KM) models proposed in the literature do not take into account all necessary aspects for effective knowledge management. First, to address this issue, this paper presents a set of requirements that any KM model or initiative should take into account to cover all aspects implied in knowing processes. These requirements were identified through a critical and evolutionary analysis of KM. Second; the paper presents a new distributed KM Conceptual Model whose building blocks are the knowledge activities involved in knowing processes. These activities are: knowledge creation, knowledge sharing, and knowledge representation and retrieval. This model provides a holistic view of KM whose purpose is helping managers understand the scope of this initiative, and supplying a guide for research and implementation in organizations. In this sense, the model presents KM as a highly social rather than technological process. Third; the paper briefly describes an architecture to provide a technological support for knowledge representation and retrieval activities of the proposed KM Conceptual Model. This architecture allows implementing a distributed organizational memory that helps to represent the knowledge context through an ontological model, providing a local perspective of each knowledge domain within the organization. Strategies for knowledge annotation, knowledge retrieval, and ontology evolution are briefly described and results of preliminary performance analysis are shown. Finally; based on the available literature, a comparative analysis of different KM models shows their adequacy for previously presented requirements. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Ale, Mariel A.] CIDISI UTN, Santa Fe, NM, Argentina.
   [Toledo, Carlos M.; Chiotti, Omar; Galli, Maria R.] Consejo Nacl Invest Cient & Tecn, Inst Desarrollo Diseno, INGAR CONICET UTN, Santa Fe, NM, Argentina.
C3 Consejo Nacional de Investigaciones Cientificas y Tecnicas (CONICET)
RP Toledo, CM (corresponding author), Consejo Nacl Invest Cient & Tecn, Inst Desarrollo Diseno, INGAR CONICET UTN, Ave 3657, Santa Fe, NM, Argentina.
EM male@frsf.utn.edu.ar; cmtoledo@santafe-conicet.gov.ar;
   chiotti@santafe-conicet.gov.ar; mrgalli@santafe-conicet.gov.ar
OI Chiotti, Omar/0000-0003-2499-8998
CR Ackerman M.S., 1994, P 27 HAWAII INT C SY, V4, P191
   Alavi M, 2001, MIS QUART, V25, P107, DOI 10.2307/3250961
   Alavi M., 2000, Framing the Domains of It Management Research: Glimpsing the Future through the Past, P15
   Alavi M., 1999, P 32 ANN HAW INT C S, V7
   Ale MA, 2008, LECT NOTES ARTIF INT, V5288, P441, DOI 10.1007/978-3-540-87781-3_48
   Andersen A., 1996, KNOWLEDGE MANAGEMENT
   [Anonymous], J BUS STRATEGY
   [Anonymous], 2002, CULTIVATING COMMUNIT
   [Anonymous], 1997, P 10 RES COMPUTATION
   [Anonymous], 2008, INTRO INFORM RETRIEV, DOI DOI 10.1017/CBO9780511809071
   Baeza-Yates Ricardo, 1999, MODERN INFORM RETRIE, V463
   Barna Z., 2002, Knowledge Management; A Critical E-Business Strategic Factor
   Bennet A., 2004, ORG SURVIVAL NEW WOR
   Boissier O, 2013, SCI COMPUT PROGRAM, V78, P747, DOI 10.1016/j.scico.2011.10.004
   Bonifacio M., 2002, P 6 INT C KNOWL BAS
   Braganza A.E., 2002, KNOWL PROCESS MANAG, V9, P23
   Bukowitz W., 1999, KNOWLEDEGE MANAGEMEN
   Chan I., 2008, GETTING KNOWLEDGE MA
   Choo CW, 1996, INT J INFORM MANAGE, V16, P329, DOI 10.1016/0268-4012(96)00020-5
   Chournazidis AJ, 2013, PROCD SOC BEHV, V73, P327, DOI 10.1016/j.sbspro.2013.02.059
   Chua AYK, 2008, ASLIB PROC, V60, P335, DOI 10.1108/00012530810887971
   Cross R, 2000, SLOAN MANAGE REV, V41, P69
   Davenport TH, 1998, SLOAN MANAGE REV, V39, P43
   Dixon N., 2000, KNOWLEDGE MANAGEMENT
   Feldman Ronen., 2007, TEXT MINING HDB
   Fensel Dieter., 2003, ONTOLOGIES SILVER BU, V2nd
   Grant Kenneth A., 2008, Journal of Issues in Informing Science and Information Technology Journal, V5, P571
   Grantz K., 2006, Interannual variability of North American Monsoon hydroclimate and application to water management in the Pecos River Basin, P1
   Han KH, 2009, EXPERT SYST APPL, V36, P7441, DOI 10.1016/j.eswa.2008.09.031
   Harris K., 2006, Knowledge management enables the high-performance workplace
   Sánchez JH, 2013, PROCD SOC BEHV, V74, P388, DOI 10.1016/j.sbspro.2013.03.029
   Hirst G, 1998, LANG SPEECH & COMMUN, P305
   Jennex M., 2007, ADV KNOWL MANAG, V1
   Jennex M., 2002, HAWAII INT C SYSTEM, V4, p109b
   Jennex M. E., 2003, 36th Hawaii International Conference on Systems Sciences
   Kalling T., 2003, Journal of Knowledge Management, V7, P67, DOI 10.1108/13673270310485631
   Kuan Yew Wong, 2005, Journal of Knowledge Management, V9, P64, DOI 10.1108/13673270510602773
   LaContora JM, 2003, ITRE2003: INTERNATIONAL CONFERENCE ON INFORMATION TECHNOLOGY: RESEARCH AND EDUCATION, P395, DOI 10.1109/ITRE.2003.1270645
   Leacock C, 1998, LANG SPEECH & COMMUN, P265
   Lee MR, 2011, EXPERT SYST APPL, V38, P729, DOI 10.1016/j.eswa.2010.07.025
   Leonard-Barton D., 1998, Wellsprings of knowledge: Building and sustaining the sources of innovation
   Liao SH, 2010, EXPERT SYST APPL, V37, P1096, DOI 10.1016/j.eswa.2009.06.109
   Lin D., 1998, Machine Learning. Proceedings of the Fifteenth International Conference (ICML'98), P296
   Malone D., 2002, INT J ACCOUNT INF SY, V3, P111
   McElroy M., 2003, The new knowledge management: complexity, learning and sustainable innovation
   McElroy M.W., 2000, J KNOWL MANAG, V4, P195, DOI [10.1108/13673270010377652, DOI 10.1108/13673270010377652]
   Mearns M, 2012, EXPERT SYST APPL, V39, P9892, DOI 10.1016/j.eswa.2012.02.187
   Meyer MH, 1996, SLOAN MANAGE REV, V37, P43
   Newell S, 2001, BRIT J MANAGE, V12, P97, DOI 10.1111/1467-8551.00188
   NONAKA I, 1994, ORGAN SCI, V5, P14, DOI 10.1287/orsc.5.1.14
   Patwardhan S, 2003, LECT NOTES COMPUT SC, V2588, P241
   Pedersen Ted., 2004, DEMONSTRATION PAPERS, P38
   Petrash G., 1996, EUR MANAG J, V14, P365, DOI https://doi.org/10.1016/0263-2373(96)00023-0
   Piunti M., 2009, P MALLOW FED WORKSH
   Polanyi M., 1958, Personal Knowledge
   Ponzi LJ, 2002, INFORM RES, V8
   Rademakers M, 2005, J WORKPLACE LEARN, V17, P130, DOI 10.1108/13665620510574513
   Resnik P, 1995, INT JOINT CONF ARTIF, P448
   Sage A. P., 1999, Information Systems Frontiers, V1, P205, DOI 10.1023/A:1010046210832
   Savvas I, 2009, EXPERT SYST APPL, V36, P4467, DOI 10.1016/j.eswa.2008.05.022
   Schultze U, 2004, J MANAGE STUD, V41, P549, DOI 10.1111/j.1467-6486.2004.00444.x
   Sharma RS, 2013, KNOWL-BASED SYST, V45, P100, DOI 10.1016/j.knosys.2013.02.011
   Shi L, 2013, KNOWL-BASED SYST, V45, P47, DOI 10.1016/j.knosys.2013.02.004
   Snowden D.J., 2000, EMERGENCE, V2, P50
   Spiegler I, 2003, INFORM MANAGE-AMSTER, V40, P533, DOI 10.1016/S0378-7206(02)00069-1
   Storey J., 2000, J KNOWL MANAG, V4, P145
   Styhre A., 2003, UNDERSTANDING KNOWLE
   Sung-Ho Yu, 2004, Proceedings of the 37th Annual Hawaii International Conference on System Sciences
   Sveiby K.E., 1997, The new organisational wealth: Managing measuring knowledge-based assets
   Swan J., 2002, KNOWL MANAG INFORM T, V3, P11
   Szulanski G, 1996, STRATEGIC MANAGE J, V17, P27, DOI 10.1002/smj.4250171105
   Tamjidyamcholo A, 2013, COMPUT EDUC, V68, P223, DOI 10.1016/j.compedu.2013.05.010
   Toledo Carlos M., 2012, Programming Multi-Agent Systems. 9th International Workshop, ProMAS 2011. Revised Selected Papers, P41, DOI 10.1007/978-3-642-31915-0_3
   Toledo CM, 2011, ELECTRON NOTES THEOR, V281, P21, DOI 10.1016/j.entcs.2011.11.023
   Toledo CM., 2010, 5 INT C KNOWL INF CR, P47
   Van der Spek R., 1997, KNOWLEDGE MANAGEMENT
   Weick K.E., 2012, Making Sense of the Organization, V2
   Wiig K.M., 1994, KNOWLEDGE MANAGEMENT
   Wilson T.D., 2002, INFORM RES, V8
   WU ZB, 1994, 32ND ANNUAL MEETING OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS, P133
   Yun EK, 2013, NURS EDUC TODAY, V33, P1477, DOI 10.1016/j.nedt.2013.05.018
NR 81
TC 20
Z9 24
U1 0
U2 39
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 1
PY 2014
VL 95
SI SI
BP 73
EP 92
DI 10.1016/j.scico.2013.12.012
PN 1
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Social Science Citation Index (SSCI)
SC Computer Science
GA AS9RF
UT WOS:000344578600005
OA Bronze, Green Published
DA 2024-07-18
ER

PT J
AU Tekin, U
   Buzluca, F
AF Tekin, Umut
   Buzluca, Feza
TI A graph mining approach for detecting identical design structures in
   object-oriented design models
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Software design models; Identical design structures; Software motifs;
   Pattern extraction; Graph mining
ID SOFTWARE ARCHITECTURE
AB The object-oriented approach has been the most popular software design methodology for the past twenty-five years. Several design patterns and principles are defined to improve the design quality of object-oriented software systems. In addition, designers can use unique design motifs that are designed for the specific application domains. Another commonly used technique is cloning and modifying some parts of the software while creating new modules. Therefore, object-oriented programs can include many identical design Structures. This work proposes a sub-graph mining-based approach for detecting identical design structures in object-oriented systems. By identifying and analyzing these structures, we can obtain useful information about the design, such as commonly-used design patterns, most frequent design defects, domain-specific patterns, and reused design clones, which could help developers to improve their knowledge about the software architecture. Furthermore, problematic parts of frequent identical design structures are appropriate refactoring opportunities because they affect multiple areas of the architecture. Experiments with several open-source and industrial projects show that we can successfully find many identical design structures within a project (intra-project) and between different projects (inter-project). We observe that usually most of the detected identical structures are an implementation of common design patterns; however, we also detect various anti-patterns, domain-specific patterns, reused design parts and design-level clones. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Tekin, Umut] Informat & Informat Secur Res Ctr, Kocaeli, Turkey.
   [Buzluca, Feza] Istanbul Tech Univ, Dept Comp Engn, TR-80626 Istanbul, Turkey.
C3 Turkiye Bilimsel ve Teknolojik Arastirma Kurumu (TUBITAK); Istanbul
   Technical University
RP Tekin, U (corresponding author), Informat & Informat Secur Res Ctr, Kocaeli, Turkey.
EM umut.tekin@tubitak.gov.tr; buzluca@itu.edu.tr
RI BUZLUCA, Feza/N-9260-2013; Tekin, Umut/HJP-4447-2023
OI BUZLUCA, Feza/0000-0001-9589-8754; Tekin, Umut/0000-0002-6947-4306
CR [Anonymous], P DAGST SEM 06301 DU
   [Anonymous], 2007, DYNAM CONT DIS SER B
   [Anonymous], SOFTW MAG
   [Anonymous], DERIVATION DOMAIN SP
   [Anonymous], 932339 SAND SAND NAT
   BAKER BS, 1995, SECOND WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P86, DOI 10.1109/WCRE.1995.514697
   Basit Hamid Abdul, 2005, SIGSOFT Softw. Eng. Notes, V30, P156, DOI [10.1145/1095430.1081733, DOI 10.1145/1095430.1081733]
   Belderrar A, 2011, EUR CON SFTWR MTNCE, P171, DOI 10.1109/CSMR.2011.23
   Bittencourt RA, 2009, EUR CON SFTWR MTNCE, P251, DOI 10.1109/CSMR.2009.28
   Booch G, 2011, IEEE SOFTWARE, V28, P6, DOI 10.1109/MS.2011.4
   Dong J, 2008, APPLIED COMPUTING 2008, VOLS 1-3, P765
   Erdemir Ural., 2011, VISUALIZING SOFTWARE, P1
   Erlikh L., 2000, IT Professional, V2, P17, DOI 10.1109/6294.846201
   Fiduccia C. M., 1982, DES AUT C P, P175, DOI DOI 10.1109/DAC.1982.1585498
   Gamma Erich, 1995, DESIGN PATTERNS ELEM
   Gravino Carmine, 2011, 2011 18th Working Conference on Reverse Engineering, P67, DOI 10.1109/WCRE.2011.18
   Hendrickson B, 1995, SUPERCOMP PROC, P626
   HENDRICKSON B, 1992, SAND921460 SAND NAT
   Kernighan B. W., 1970, The Bell System Technical Journal, V49, P291, DOI [10.1002/j.1538-7305.1970.tb01770.x, DOI 10.1002/J.1538-7305.1970.TB01770.X]
   Komondoor R, 2001, LECT NOTES COMPUT SC, V2126, P40
   Kuramochi M, 2005, DATA MIN KNOWL DISC, V11, P243, DOI 10.1007/s10618-005-0003-9
   Lange CFJ, 2006, IEEE SOFTWARE, V23, P40, DOI 10.1109/MS.2006.50
   Larman C., 2001, APPL UML PATTERNS
   Li ZM, 2006, IEEE T SOFTWARE ENG, V32, P176, DOI 10.1109/TSE.2006.28
   Liu H, 2006, ASPEC 2006: 13TH ASIA-PACIFIC SOFTWARE ENGINEERING CONFERENCE, PROCEEDINGS, P269
   Nguyen HA, 2009, LECT NOTES COMPUT SC, V5503, P440
   Peeger ShariLawrence., 2006, SOFTWARE ENG THEORY, V3rd
   Prechelt L, 2002, IEEE T SOFTWARE ENG, V28, P595, DOI 10.1109/TSE.2002.1010061
   Roy CK, 2009, SCI COMPUT PROGRAM, V74, P470, DOI 10.1016/j.scico.2009.02.007
   Roy J. R., 2007, QUEENS SCH COMPUTING, V541, P64
   Storrle Harald., 2010, ECSA COMPANION VOLUM, P285
   Tekin U., 2012, 2012 Proceedings of the 6th International Workshop on Software Clones (IWSC 2012), P43, DOI 10.1109/IWSC.2012.6227865
   Tsantalis N, 2006, IEEE T SOFTWARE ENG, V32, P896, DOI 10.1109/TSE.2006.112
   William J.Brown Raphael C. Malveau Hays W. McCormick., 1998, Anti Patterns: Refactoring Software, Architectures, and Projects in Crisis
   Wörlein M, 2005, LECT NOTES ARTIF INT, V3721, P392
   Yan X., 2003, Proceedings of the ninth ACM SIGKDD international conference on Knowledge discovery and data mining, KDD '03, P286
NR 36
TC 6
Z9 7
U1 0
U2 14
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 1
PY 2014
VL 95
SI SI
BP 406
EP 425
DI 10.1016/j.scico.2013.09.015
PN 4
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AS9RI
UT WOS:000344578900003
OA Bronze
DA 2024-07-18
ER

PT J
AU Banach, R
   Zhu, HB
   Su, W
   Wu, XF
AF Banach, Richard
   Zhu, Huibiao
   Su, Wen
   Wu, Xiaofeng
TI ASM, controller synthesis, and complete refinement
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE ASM; Controller; Complete refinement; Continuous ASM; Chopsticks
AB While many systems are naturally viewed as the interaction between a controller subsystem and a controlled, or plant subsystem, they are often most easily initially understood and designed monolithically, simply as a collection of variables that represent various aspects of the system, which interact in the most self-evident way. A practical implementation needs to separate controller from plant though. We study the problem of when a monolithic ASM system can be split into controller and plant subsystems along syntactic lines derived from variables' natural affiliations. We give restrictions that enable the split to be carried out cleanly, and we give conditions that ensure that the resulting pair of controller and plant subsystems have the same behaviours as the original design. We relate this phenomenon to the concept of complete refinement in ASM. Making this strategy work effectively, usually requires a nontrivial domain theory, into which a number of properties which are neither the sole possession of the controller subsystem nor of the plant subsystem must be placed. We argue that these properties are latent in the original monolithic model. We illustrate the theory with a case study concerning eating with chopsticks. This leads to an extension of controller synthesis for continuous ASM systems, which are briefly covered. The chopsticks case study is then extended into the continuous sphere. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Banach, Richard] Univ Manchester, Sch Comp Sci, Manchester M13 9PL, Lancs, England.
   [Zhu, Huibiao; Wu, Xiaofeng] E China Normal Univ, Shanghai Key Lab Trustworthy Comp, Shanghai 200062, Peoples R China.
   [Su, Wen] Shanghai Univ, Sch Comp Engn & Sci, Shanghai, Peoples R China.
C3 University of Manchester; East China Normal University; Shanghai
   University
RP Banach, R (corresponding author), Univ Manchester, Sch Comp Sci, Oxford Rd, Manchester M13 9PL, Lancs, England.
EM banach@cs.man.ac.uk; hbzhu@sei.ecnu.edu.cn; wsu@shu.edu.cn;
   xfwu@sei.ecnu.edu.cn
FU ECNU; National High Technology Research and Development Program of China
   [2012AA011205]; National Natural Science Foundation of China
   [61361136002, 61321064]; Shanghai Knowledge Service Platform Project
   [ZF1213]; Shanghai Minhang Talent Project; Open Project of the Shanghai
   Key Laboratory of Trustworthy Computing [07dz22304201303]
FX A large portion of the work reported in this paper was done while the
   first author was a visiting researcher at the Shanghai Key Laboratory of
   Trustworthy Computing at East China Normal University. The support of
   ECNU is gratefully acknowledged.; Huibiao Zhu is supported by National
   High Technology Research and Development Program of China (No.
   2012AA011205), National Natural Science Foundation of China (No.
   61361136002 and No. 61321064), Shanghai Knowledge Service Platform
   Project (No. ZF1213) and Shanghai Minhang Talent Project.; Wen Su was
   supported in part by the Open Project of the Shanghai Key Laboratory of
   Trustworthy Computing (No. 07dz22304201303).
CR [Anonymous], 2009, VERIFICATION CONTROL
   [Anonymous], 1997, LNCS
   [Anonymous], 2010, LOGICAL ANAL HYBRID
   Banach Richard, 2012, Abstract State Machines, Alloy, B, VDM, and Z. Proceedings Third International Conference, ABZ 2012, P65, DOI 10.1007/978-3-642-30885-7_5
   Banach R., 2013, MODED CONTINUO UNPUB
   Banach R., 2014, ACM T SOFTW IN PRESS
   Banach R, 2014, FORM ASP COMPUT, V26, P319, DOI 10.1007/s00165-012-0263-2
   Borger E., 2003, ABSTRACT STATE MACHI
   Sztipanovits Janos, 2011, FM 2011: Formal Methods. Proceedings 17th International Symposium on Formal Methods, DOI 10.1007/978-3-642-21437-0_1
   Walter W, 1998, ORDINARY DIFFERENTIA
   Willems J., 2007, OPEN DYNAMICAL SYSTE
NR 11
TC 4
Z9 4
U1 1
U2 5
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 15
PY 2014
VL 94
SI SI
BP 109
EP 129
DI 10.1016/j.scico.2014.04.013
PN 2
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AS1JW
UT WOS:000344038500004
OA Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Alberta, E
   Arenas, P
   Genaim, S
   Puebla, G
   Román-Díez, G
AF Alberta, Elvira
   Arenas, Puri
   Genaim, Samir
   Puebla, German
   Roman-Diez, Guillermo
TI Conditional termination of loops over heap-allocated data
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Static analysis; Heap-sensitive analysis; Termination; Java bytecode;
   Program transformation
ID SENSITIVE VALUE ANALYSIS; COST-ANALYSIS; PROGRAMS
AB Static analysis which takes into account the values of data stored in the heap is considered complex and computationally intractable in practice. Thus, most static analyzers do not keep track of object fields nor of array contents, i.e., they are heap-insensitive. In this article, we propose locality conditions for soundly tracking heap-allocated data in Java (bytecode) programs, by means of ghost non-heap allocated variables. This way, heap-insensitive analysis over the transformed program can infer information on the original heap-allocated data without sacrificing efficiency. If the locality conditions cannot be proven unconditionally, we seek to generate aliasing preconditions which, when they hold in the initial state, guarantee the termination of the program. Experimental results show that we greatly improve the accuracy w.r.t. a heap-insensitive analysis while the overhead introduced is reasonable. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Alberta, Elvira; Arenas, Puri; Genaim, Samir] Complutense Univ Madrid UCM, DSIC, Madrid, Spain.
   [Puebla, German; Roman-Diez, Guillermo] Tech Univ Madrid UPM, DLSIIS, Madrid, Spain.
C3 Complutense University of Madrid; Universidad Politecnica de Madrid
RP Román-Díez, G (corresponding author), Tech Univ Madrid UPM, DLSIIS, Madrid, Spain.
EM elvira@sip.ucm.es; puri@sip.ucm.es; samir@fdi.ucm.es; german@fi.upm.es;
   guillermo.roman.fi@gmail.com
RI Roman-Diez, Guillermo/AAS-4445-2020
OI Roman-Diez, Guillermo/0000-0002-5427-8855; Genaim,
   Samir/0000-0002-7176-1881
FU Information & Communication Technologies program of the European
   Commission, Future and Emerging Technologies (FET), under the HATS
   project [ICT-231620]; Spanish Ministry of Science and Innovation
   (MICINN) [TIN2008-05624, TIN2012-38137, PRI-AIBDE-2011-0900]; Madrid
   Regional Government under the PROMETIDOS-CM project [S2009TIC-1465]; 
   [UCM-BSCH-GR35/10-A-910502]
FX We are grateful to the anonymous referees for their comments and
   suggestions that have greatly improved the quality of the article. This
   work was funded in part by the Information & Communication Technologies
   program of the European Commission, Future and Emerging Technologies
   (FET), under the ICT-231620 HATS project, by the Spanish Ministry of
   Science and Innovation (MICINN) under the TIN2008-05624, TIN2012-38137
   and PRI-AIBDE-2011-0900 projects, by UCM-BSCH-GR35/10-A-910502 grant and
   by the Madrid Regional Government under the S2009TIC-1465 PROMETIDOS-CM
   project.
CR Aiken A, 2003, ACM SIGPLAN NOTICES, V38, P129, DOI 10.1145/780822.781146
   Albert E, 2007, LECT NOTES COMPUT SC, V4421, P157
   Albert E, 2008, APPLIED COMPUTING 2008, VOLS 1-3, P368
   Albert E., 2012, P BYTECODE12
   Albert E., 2012, P PEPM12, P25
   Albert E., 2011, LNCS, V7078, P238, DOI DOI 10.1007/978-3-642-25318-8_
   Albert E, 2008, LECT NOTES COMPUT SC, V5051, P2, DOI 10.1007/978-3-540-68863-1_2
   Albert E, 2012, THEOR COMPUT SCI, V413, P142, DOI 10.1016/j.tcs.2011.07.009
   Albert E, 2010, LECT NOTES COMPUT SC, V6337, P100, DOI 10.1007/978-3-642-15769-1_7
   Albert E, 2009, LECT NOTES COMPUT SC, V5850, P370, DOI 10.1007/978-3-642-05089-3_24
   Banerjee A, 2008, LECT NOTES COMPUT SC, V5142, P387, DOI 10.1007/978-3-540-70592-5_17
   Berdine J, 2006, LECT NOTES COMPUT SC, V4144, P386, DOI 10.1007/11817963_35
   Bozga M, 2012, LECT NOTES COMPUT SC, V7214, P252, DOI 10.1007/978-3-642-28756-5_18
   Chang BYE, 2005, LECT NOTES COMPUT SC, V3385, P147
   Cook B, 2008, LECT NOTES COMPUT SC, V5123, P328
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Cousot Patrick, 1978, P 5 ACM SIGACT SIGPL, p84S96, DOI DOI 10.1145/512760.512770
   Distefano D, 2006, LECT NOTES COMPUT SC, V3920, P287
   Ferrara Pietro, 2012, Software Engineering and Formal Methods. Proceedings of the 10th International Conference, SEFM 2012, P63, DOI 10.1007/978-3-642-33826-7_5
   Johnsen EB, 2012, LNCS, P142, DOI DOI 10.1007/978-3-642-25271-6_8
   Lehner H., 2007, P BYTECODE07
   LINDHOLM T, 1996, JAVA VIRTUAL MACHINE
   Miné A, 2006, ACM SIGPLAN NOTICES, V41, P54, DOI 10.1145/1134650.1134659
   Otto C, 2010, LEIBNIZ INT PR INFOR, V6, P259, DOI 10.4230/LIPIcs.RTA.2010.259
   Podelski A, 2004, LECT NOTES COMPUTER, V2937, P465
   Rossignoli S, 2006, LECT NOTES COMPUT SC, V3855, P95
   Sagiv M., 1999, Conference Record of POPL '99. 26th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P105, DOI 10.1145/292540.292552
   Spoto F., 2006, P EAAI06
   Spoto F, 2010, ACM T PROGR LANG SYS, V32, DOI 10.1145/1709093.1709095
   Vallee-Rai R., 1999, CASCON 1999, P125
NR 30
TC 7
Z9 7
U1 0
U2 10
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 15
PY 2014
VL 92
SI SI
BP 2
EP 24
DI 10.1016/j.scico.2013.04.006
PN A
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AK7GY
UT WOS:000338597900002
DA 2024-07-18
ER

PT J
AU Davies, J
   Gibbons, J
   Welch, J
   Crichton, E
AF Davies, Jim
   Gibbons, Jeremy
   Welch, James
   Crichton, Edward
TI Model-driven engineering of information systems: 10 years and 1000
   versions
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Model-driven; Evolution; Data migration; Formal methods; Agile;
   Databases
ID LANGUAGE
AB This paper reports upon ten years of experience in the development and application of model-driven technology. The technology in question was inspired by work on formal methods: in particular, by the B toolkit. It was used in the development of a number of information systems, all of which were successfully deployed in real world situations. The paper reports upon three systems: one that informed the design of the technology, one that was used by an internal customer, and one that is currently in use outside the development organisation. It records a number of lessons regarding the application of model-driven techniques. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Davies, Jim; Gibbons, Jeremy; Welch, James; Crichton, Edward] Univ Oxford, Dept Comp Sci, Oxford OX1 3QD, England.
C3 University of Oxford
RP Davies, J (corresponding author), Univ Oxford, Dept Comp Sci, Oxford OX1 3QD, England.
EM jimdavies@mac.com; Jeremy.Gibbons@cs.ox.ac.uk; James.Welch@cs.ox.ac.uk;
   Edward.Crichton@cs.ox.ac.uk
RI Welch, Doctor James/HZI-2490-2023
OI Welch, Doctor James/0000-0002-3563-1254; Welch,
   James/0000-0003-1017-1623; Davies, Jim/0000-0003-4664-6862
FU UK Medical Research Council [G0300648]; Microsoft Research; MRC
   [G0300648] Funding Source: UKRI
FX We are grateful to Dave Neilson and Charles Crichton for their
   contributions to the work reported here. We are grateful also to our
   colleagues at the University of Oxford, and at Oxford Health NHS
   Foundation Trust, for trusting us to provide information systems that
   they could rely upon - that they needed to rely upon - using
   model-driven technology. We would like to acknowledge the support of the
   UK Medical Research Council (grant number G0300648) and Microsoft
   Research. We would like to dedicate this paper to the memory of Ib Holm
   Sorensen (1949-2012), without whom none of this would have happened.
CR Aagedal JO, 2004, LECT NOTES COMPUT SC, V3344, P148
   Aboulsamh MA, 2011, LECT NOTES BUS INF P, V81, P383
   Abrial J.-R., 1996, B BOOK ASSIGNING PRO
   [Anonymous], 2003, ALAN APT SERIES
   Barnett M, 2005, LECT NOTES COMPUT SC, V3362, P49
   Beck K., SIGPLAN NOTICES, V24, P10
   Bravenboer M, 2008, SCI COMPUT PROGRAM, V72, P52, DOI 10.1016/j.scico.2007.11.003
   CHIKOFSKY EJ, 1988, IEEE SOFTWARE, V5, P11, DOI 10.1109/52.2005
   Coad P., 1993, OBJECT ORIENTED PROG
   Cuesta AG, 2008, COMM COM INF SC, V22, P101
   Dantas B, 2009, ELECTRON NOTES THEOR, V240, P79, DOI 10.1016/j.entcs.2009.05.046
   Davies Jim, 2012, Formal Methods: Foundations and Applications. Proceedings 15th Brazilian Symposium, SBMF 2012, P99, DOI 10.1007/978-3-642-33296-8_9
   Davies J., 2006, P 11 IEEE C ENG COMP
   Davies J., 2005, ELECT NOTES COMPUTER
   Eclipse, 2012, EMF COMP PROJ
   Edmunds A., 2008, REF 2008 INT REF WOR
   ENTCS, 2003, ENTCS, V80
   Frankel D.S., 2003, Model Driven Architecture: Applying MDA to Enterprise Computing
   George NS, 2011, 2011 IEEE INTERNATIONAL CONFERENCE ON INFORMATION REUSE AND INTEGRATION (IRI), P218, DOI 10.1109/IRI.2011.6009549
   Hayes I. J, 1992, SPECIFICATION CASE S, Vsecond
   Henrard J, 2002, NINTH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P211, DOI 10.1109/WCRE.2002.1173079
   Kats LCL, 2010, ACM SIGPLAN NOTICES, V45, P444, DOI 10.1145/1932682.1869497
   Kleppe A.G., 2003, MDA Explained; The Model Driven Architecture: Practice and Promise
   KLEPPER R, 1995, COMMUN ACM, V38, P69, DOI 10.1145/223248.223268
   Loukides M., 2012, WHAT IS DEVOPS OREIL
   Martin James, 1981, Applications Development Without Programmers
   Mellor S.J., 1997, TOOLS 1997 23 INT C, P372
   Mellor SJ., 2002, EXECUTABLE UML FDN M
   Morgan C., 1998, Programming from Specification, VThird
   Object Management Group, 2008, PTC20081103 OBJ MAN
   Smith Graeme., 2000, OBJECT Z SPECIFICATI
   Turner E, 2008, LECT NOTES COMPUT SC, V5160, P364, DOI 10.1007/978-3-540-85762-4_25
   Warmer J., 2003, OBJECT CONSTRAINT LA, Vsecond
   Wirfs-Brock R., 1991, RESPONSIBILITY DRIVE
NR 34
TC 16
Z9 16
U1 0
U2 6
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 1
PY 2014
VL 89
SI SI
BP 88
EP 104
DI 10.1016/j.scico.2013.02.002
PN B
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AJ8CA
UT WOS:000337929100003
OA hybrid
DA 2024-07-18
ER

PT J
AU Meseguer, J
AF Meseguer, Jose
TI Taming distributed system complexity through formal patterns
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Software patterns; Distributed systems; Formal specification and
   verification; Rewriting logic; Maude
ID REWRITING LOGIC; DOS-PROTECTION; MODEL; SPECIFICATION
AB Many distributed systems are real-time, safety-critical systems with strong qualitative and quantitative formal requirements. They often need to be reflective and adaptive, and may be probabilistic in their algorithms and/or their operating environments. All this makes these systems quite complex and therefore hard to design, build and verify. To tame such system complexity, this paper proposes formal patterns, that is, formally specified solutions to frequently occurring distributed system problems that are generic, executable, and come with strong formal guarantees. The semantics of such patterns as theory transformations in rewriting logic is explained; and a representative collection of useful patterns is presented to ground all the key concepts and show their effectiveness. (C) 2013 Published by Elsevier B.V.
C1 Univ Illinois, Dept Comp Sci, Urbana, IL 61801 USA.
C3 University of Illinois System; University of Illinois Urbana-Champaign
RP Meseguer, J (corresponding author), Univ Illinois, Dept Comp Sci, Urbana, IL 61801 USA.
EM meseguer@illinois.edu
FU Boeing Corporation [C8088-557395]; NSF [CNS 08-34709, CCF 09-05584];
   AFOSR [FA8750-11-2-0084]; Direct For Computer & Info Scie & Enginr;
   Division of Computing and Communication Foundations [0905584] Funding
   Source: National Science Foundation
FX I thank the organizers of FACS 2011 for giving me the opportunity of
   presenting these ideas in Oslo, and all the participants for their
   interest and comments. I thank the anonymous referees for their
   constructive criticism and their suggestions, which have all helped in
   improving the paper. Kyungmin Bae, Jonas Eckhardt, Tobias Mahlbauer,
   Camilo Rocha and Mu Sun deserve special thanks for their help with
   various pictures and diagrams in the paper. This work has been supported
   in part by the Boeing Corporation under Grant C8088-557395, NSF Grants
   CNS 08-34709, CCF 09-05584, and AFOSR Grant FA8750-11-2-0084.
CR ABADI M, 1993, ACM T PROGR LANG SYS, V15, P73, DOI 10.1145/151646.151649
   Abrial JR, 2008, LECT NOTES COMPUT SC, V5160, P1, DOI 10.1007/978-3-540-85762-4_1
   Agha G., 1993, IEEE Parallel & Distributed Technology: Systems & Applications, V1, P3, DOI 10.1109/88.218170
   Agha G, 2006, ELECTRON NOTES THEOR, V153, P213, DOI 10.1016/j.entcs.2005.10.040
   Alencar P. S. C., 1996, FME '96: Industrial Benefit and Advances in Formal Methods. Third International Symposium of Formal Methods Europe. Proceedings, P576
   AlTurki Musab, 2011, Algebra and Coalgebra in Computer Science. Proceedings 4th International Conference, CALCO 2011, P386, DOI 10.1007/978-3-642-22944-2_28
   AlTurki M., 2011, THESIS U ILLINOIS UR
   AlTurki M, 2010, ELECTRON P THEOR COM, P26, DOI 10.4204/EPTCS.36.2
   AlTurki M, 2009, ELECTRON NOTES THEOR, V234, P3, DOI 10.1016/j.entcs.2009.02.069
   [Anonymous], 1998, AMAST SERIES
   [Anonymous], 1997, Object-oriented software construction
   [Anonymous], 1996, PATTERN ORIENTED SOF
   [Anonymous], 2007, LNCS
   Bae K., 2012, LNCS, V7684, P1
   Bae K, 2012, ELECTRON PROC THEOR, P5, DOI 10.4204/EPTCS.105.2
   Bergstra J., 1980, LNCS, V81, P76
   Bernstein D. J., 1996, SYN COOKIES
   Borovansky P, 2002, THEOR COMPUT SCI, V285, P155, DOI 10.1016/S0304-3975(01)00358-9
   BURSTALL RM, 1980, LECTURE NOTES COMPUT, V86, P292, DOI DOI 10.1007/3-540-10007-5_41
   Chadha R, 2008, LECT NOTES COMPUT SC, V5051, P39, DOI 10.1007/978-3-540-68863-1_4
   Chandy K.M., 1988, PARALLEL PROGRAM DES
   Clavel M, 2007, THEOR COMPUT SCI, V373, P70, DOI 10.1016/j.tcs.2006.12.009
   Denker G., 2000, ENTCS, V36
   Dong J, 2007, J SYST SOFTWARE, V80, P1755, DOI 10.1016/j.jss.2007.03.005
   Durán F, 2003, THEOR COMPUT SCI, V309, P357, DOI 10.1016/S0304-3975(03)00312-8
   Durán F, 2000, LECT NOTES COMPUT SC, V1882, P73
   Durán F, 2007, SCI COMPUT PROGRAM, V66, P125, DOI 10.1016/j.scico.2006.07.002
   Eckhardt J., 2011, THESIS LMU MUNICH
   Eckhardt J, 2012, LECT NOTES COMPUT SC, V7212, P78, DOI 10.1007/978-3-642-28872-2_6
   Eden A.H., 2001, CASCON, P3
   Gamma Erich., 1994, DESIGN PATTERNS
   Goguen J., 2000, SOFTWARE ENG OBJ ALG, P3
   GOGUEN JA, 1992, J ACM, V39, P95, DOI 10.1145/147508.147524
   GUNTER CA, 2004, NETWORK DISTRIBUTED
   Khanna S, 2008, IEEE INFOCOM SER, P1202
   LAMPORT L, 1994, ACM T PROGR LANG SYS, V16, P872, DOI 10.1145/177492.177726
   Meseguer J, 2002, LECT NOTES COMPUT SC, V2374, P1
   MESEGUER J, 1992, THEOR COMPUT SCI, V96, P73, DOI 10.1016/0304-3975(92)90182-F
   Meseguer J, 1998, LECT NOTES COMPUT SC, V1376, P18
   Meseguer J., 1993, Research Directions in Concurrent Object-Oriented Programming, P314
   Meseguer J, 2012, THEOR COMPUT SCI, V451, P1, DOI 10.1016/j.tcs.2012.05.040
   Meseguer J, 2010, LECT NOTES COMPUT SC, V6447, P303, DOI 10.1007/978-3-642-16901-4_21
   Meyer B, 2006, COMPUTER, V39, P23, DOI 10.1109/MC.2006.227
   Mikkonen T, 1998, PROC INT CONF SOFTW, P115, DOI 10.1109/ICSE.1998.671108
   Miller S, 2009, P 28 DIG AV SYST C
   Misra J., 2001, A Discipline of Multiprogramming
   Muhlbauer T., 2011, THESIS LMU MUNICH
   Olveczky P. C., 2007, Higher-Order and Symbolic Computation, V20, P161, DOI 10.1007/s10990-007-9001-5
   Saeki M, 2000, SEVENTH ASIA-PACIFIC SOFTWARE ENGINEERING CONFERENCE, PROCEEDINGS, P408, DOI 10.1109/APSEC.2000.896727
   Schmidt D., 2000, Pattern-Oriented Software Architecture, Patterns for Concurrent and Networked Objects, V2
   Sha Lui, 2008, Software-Intensive Systems and New Computing Paradigms, P92
   Soundarajan N, 2004, PROC INT CONF SOFTW, P666, DOI 10.1109/ICSE.2004.1317488
   Sun M, 2010, ELECTRON PROC THEOR, P158, DOI 10.4204/EPTCS.36.9
   Sun M, 2010, LECT NOTES COMPUT SC, V6381, P157, DOI 10.1007/978-3-642-16310-4_11
   Taibi T., 2003, Journal of Object Technology, V2, P127
   Venkatasubramanian N, 2004, ACM T SOFTW ENG METH, V13, P86, DOI 10.1145/1005561.1005564
   Viswanathan M, 2001, LECT NOTES COMPUT SC, V2076, P835
NR 57
TC 11
Z9 11
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD APR 1
PY 2014
VL 83
SI SI
BP 3
EP 34
DI 10.1016/j.scico.2013.07.004
PG 32
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AE4IK
UT WOS:000333945900002
OA hybrid
DA 2024-07-18
ER

PT J
AU Lungu, M
   Lanza, M
   Nierstrasz, O
AF Lungu, Mircea
   Lanza, Michele
   Nierstrasz, Oscar
TI Evolutionary and collaborative software architecture recovery with
   Softwarenaut
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Architecture recovery; Visualization; Reverse engineering; Software
   tools
AB Architecture recovery is an activity applied to a system whose initial architecture has eroded. When the system is large, the user must use dedicated tools to support the recovery process. We present Softwarenaut a tool which supports architecture recovery through interactive exploration and visualization. Classical architecture recovery features, such as filtering and details on demand, are enhanced with evolutionary capabilities when multi-version information about a subject system is available. The tool allows sharing and discovering the results of previous analysis sessions through a global repository of architectural views indexed by systems.
   We present the features of the tool together with the architecture recovery process that it supports using as a case-study ArgoUML, a well-known open source Java system. (C) 2012 Elsevier B.V. All rights reserved.
C1 [Lungu, Mircea; Nierstrasz, Oscar] Univ Bern, Software Composit Grp, CH-3012 Bern, Switzerland.
   [Lanza, Michele] Univ Lugano, REVEAL Fac Informat, Lugano, Switzerland.
C3 University of Bern; Universita della Svizzera Italiana
RP Lungu, M (corresponding author), Univ Bern, Software Composit Grp, CH-3012 Bern, Switzerland.
EM lungu@iam.unibe.ch
RI Lanza, Michele/JNQ-9470-2023
OI Lanza, Michele/0000-0003-4391-0197; Nierstrasz,
   Oscar/0000-0002-9975-9791
FU NF through project SOSYA [132175]
FX We would like to thank Fabrizio Perin for feedback on earlier drafts of
   this paper. We would like to thank the anonymous reviewers for their
   qualitative feedback. We would also like to acknowledge Joel Ossher and
   Crista Lopes from UC Irvine for the collaboration in integrating
   Softwarenaut with the Sourcerer database. We would also like to thank
   the anonymous reviewers for their constructive feedback and patience
   while reading the first version of this article and trying out
   Softwarenaut. Lanza acknowledges the financial support of the SNF
   through project SOSYA (SNF Project No. 132175).
CR [Anonymous], INT S SYMB NUM ALG S
   [Anonymous], 14712000 IS IEEE ARC
   [Anonymous], IEEE VIS LANG COLL P
   [Anonymous], THESIS VIENNA U TECH
   [Anonymous], EST SCI COMPUTER PRO
   [Anonymous], THESIS U VICTORIA VI
   [Anonymous], THESIS U BERNE BERNE
   [Anonymous], RELIABLE SOFTWARE TE
   [Anonymous], P C SOFTW MAINT REEN
   [Anonymous], SOFTVIS 03
   [Anonymous], TECHNICAL REPORT
   [Anonymous], SOFTVIS 06
   [Anonymous], THESIS U LUGANO
   [Anonymous], P 19 IEEE INT C PROG
   [Anonymous], 2009, THESIS U LUGANO
   [Anonymous], P CSMR 2006 10 EUR C
   Antoniol G, 2004, 7TH INTERNATIONAL WORKSHOP ON PRINCIPLES OF SOFTWARE EVOLUTION, P31, DOI 10.1109/IWPSE.2004.1334766
   Bass L., 1997, SOFTWARE ARCHITECTUR
   Buchsbaum AL, 2000, PROCEEDINGS OF THE ELEVENTH ANNUAL ACM-SIAM SYMPOSIUM ON DISCRETE ALGORITHMS, P566
   D'Ambros M, 2008, CSMR 2008: 12TH EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, P3
   Ducasse S, 2009, IEEE T SOFTWARE ENG, V35, P573, DOI 10.1109/TSE.2009.19
   Gallagher K, 2008, IEEE T SOFTWARE ENG, V34, P260, DOI 10.1109/TSE.2007.70757
   Garlan D, 2009, IEEE SOFTWARE, V26, P66, DOI 10.1109/MS.2009.86
   Hindle A, 2007, 4TH IEEE INTERNATIONAL WORKSHOP ON VISUALIZING SOFTWARE FOR UNDERSTANDING AND ANALYSIS, PROCEEDINGS, P129, DOI 10.1109/VISSOF.2007.4290711
   Hofmeister C., 2000, APPL SOFTWARE ARCHIT
   Hupfer S., 2004, Computer Supported Cooperative Work Conference Proceedings, P21, DOI 10.1145/1031607.1031611
   Koschke R, 2002, PROC IEEE INT CONF S, P478, DOI 10.1109/ICSM.2002.1167807
   KRUCHTEN PB, 1995, IEEE SOFTWARE, V12, P42, DOI 10.1109/52.469759
   Lanza M, 2003, IEEE T SOFTWARE ENG, V29, P782, DOI 10.1109/TSE.2003.1232284
   LEHMAN MM, 1980, P IEEE, V68, P1060, DOI 10.1109/PROC.1980.11805
   Linstead E, 2009, DATA MIN KNOWL DISC, V18, P300, DOI 10.1007/s10618-008-0118-x
   Lungu M, 2007, CSMR 2007: 11TH EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, PROCEEDINGS, P91
   Lungu M, 2005, 3RD IEEE INTERNATIONAL WORKSHOP ON VISUALIZING SOFTWARE FOR UNDERSTANDING AND ANALYSIS, PROCEEEDINGS, P95
   Lungu M, 2010, SCI COMPUT PROGRAM, V75, P264, DOI 10.1016/j.scico.2009.09.004
   Margaret-Anne D.Storey., 2005, SOFTVIS, P193, DOI DOI 10.1145/1056018.1056045
   Mitchell BS, 2006, IEEE T SOFTWARE ENG, V32, P193, DOI 10.1109/TSE.2006.31
   Muller H. A., 1988, Proceedings of the 10th International Conference on Software Engineering (Cat. No.88CH2554-4), P80, DOI 10.1109/ICSE.1988.93690
   Muller H. A., 1992, SIGSOFT Software Engineering Notes, V17, P88, DOI 10.1145/142882.143755
   Murphy G. C., 1995, SIGSOFT Software Engineering Notes, V20, P18, DOI 10.1145/222132.222136
   Nierstrasz O., 2005, ACM SIGSOFT SOFTWARE, V30, P1, DOI [DOI 10.1145/1095430, 10.1145/1095430.1081707, DOI 10.1145/1095430.1081707]
   Perry D. E., 1992, SIGSOFT Software Engineering Notes, V17, P40, DOI 10.1145/141874.141884
   Pollet D, 2007, CSMR 2007: 11TH EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, PROCEEDINGS, P137
   Rayside D, 2003, INFORM SYST FRONT, V5, P161, DOI 10.1023/A:1022649506310
   Robertson G. G., 1991, Human Factors in Computing Systems. Reaching Through Technology. CHI '91. Conference Proceedings, P189, DOI 10.1145/108844.108883
   Sinha V, 2006, IEEE SYMPOSIUM ON VISUAL LANGUAGES AND HUMAN-CENTRIC COMPUTING, PROCEEDINGS, P187
   Storey MAD, 1995, INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE, 1995 PROCEEDINGS, P275, DOI 10.1109/ICSM.1995.526549
   Tichelaar S., 2001, Ph.D. thesis
   Wettel R, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P551, DOI 10.1145/1985793.1985868
NR 48
TC 24
Z9 25
U1 0
U2 36
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 1
PY 2014
VL 79
SI SI
BP 204
EP 223
DI 10.1016/j.scico.2012.04.007
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 246RH
UT WOS:000326556300015
OA Bronze
DA 2024-07-18
ER

PT J
AU Cetina, C
   Giner, P
   Fons, J
   Pelechano, V
AF Cetina, Carlos
   Giner, Pau
   Fons, Joan
   Pelechano, Vicente
TI Prototyping Dynamic Software Product Lines to evaluate run-time
   reconfigurations
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Dynamic Software Product Line; Variability modeling; Smart Hotel
ID VARIABILITY
AB Dynamic Software Product Lines (DSPL) encompass systems that are capable of modifying their own behavior with respect to changes in their operating environment by using run-time reconfigurations. A failure in these reconfigurations can directly impact the user experience since the reconfigurations are performed when the system is already under the users control. In this work, we prototype a Smart Hotel DSPL to evaluate the reliability-based risk of the DSPL reconfigurations; specifically, the probability of malfunctioning (Availability) and the consequences of malfunctioning (Severity). This DSPL prototype was performed with the participation of human subjects by means of a Smart Hotel case study which was deployed with real devices. Moreover, we successfully identified and addressed two challenges associated with the involvement of human subjects in DSPL prototyping: enabling participants to (1) trigger the run-time reconfigurations and to (2) understand the effects of the reconfigurations. The evaluation of the case study reveals positive results regarding both Availability and Severity. However, the participant feedback highlights issues with recovering from a failed reconfiguration or a reconfiguration triggered by mistake. To address these issues, we discuss some guidelines learned in the case study. Finally, although the results achieved by the DSPL may be considered satisfactory for its particular domain, DSPL engineers must provide users with more control over the reconfigurations or the users will not be comfortable with DSPLs. (C) 2012 Elsevier B.V. All rights reserved.
C1 [Cetina, Carlos] San Jorge Univ, Pervas Comp Res Grp, Zaragoza 50830, Spain.
   [Giner, Pau; Fons, Joan; Pelechano, Vicente] Univ Politecn Valencia, Ctr Invest Metodos Prod De50830, E-46022 Valencia, Spain.
C3 Universidad San Jorge; Universitat Politecnica de Valencia
RP Cetina, C (corresponding author), San Jorge Univ, Pervas Comp Res Grp, Autovia A-23 Zaragoza Huesca Km 299, Zaragoza 50830, Spain.
EM ccetina@usj.es; pginer@dsic.upv.es; jjfons@dsic.upv.es; pele@dsic.upv.es
RI Cetina, Carlos/P-8682-2017; Fons, Joan/ABG-9296-2020; Pelechano,
   Vicente/S-4344-2016
OI Cetina, Carlos/0000-0001-8542-5515; Pelechano,
   Vicente/0000-0003-1090-230X; Fons, Joan/0000-0002-3718-3096
FU MICINN under the project EVERYWARE [TIN2010-18011]
FX We are grateful to the participants of this case study. We also thank
   both Esteban Saiz and David Unio who helped in preparing the Smart Hotel
   Case Study. This work has been developed with the support of MICINN
   under the project EVERYWARE TIN2010-18011.
CR [Anonymous], INT WORKSH REQ REUS
   Benavides D, 2005, LECT NOTES COMPUT SC, V3520, P491
   Bennani M. N., 2005, ICAC 05
   CETINA C, 2009, 5 INT C AUT AUT SYST
   CETINA C, 2008, SOFTW PROD LIN C 200
   CETINA C, 2009, COMPUTER, P46
   CETINA C, 2008, 2 INT WORKSH DYN SOF
   Coplien J, 1998, IEEE SOFTWARE, V15, P37, DOI 10.1109/52.730836
   Czarnecki K, 2004, LECT NOTES COMPUT SC, V3154, P266
   Dean M., 2004, OWL WEB ONTOLOGY LAN
   Dey AK, 2009, J AMB INTEL SMART EN, V1, P57, DOI 10.3233/AIS-2009-0008
   Etxeberria L, 2008, SPLC 2008: 12TH INTERNATIONAL SOFTWARE PRODUCT LINE CONFERENCE, PROCEEDINGS, P243, DOI 10.1109/SPLC.2008.37
   FABRO DD, 2007, THESIS U NANTES
   Folmer E, 2003, P WORKSH BRIDG GAPS, P61
   Gibbs WW, 2005, SCI AM, V292, P54, DOI 10.1038/scientificamerican0105-54
   Gomaa H, 2004, FOURTH WORKING IEEE/IFIP CONFERENCE ON SOFTWARE ARCHITECTURE (WICSA 2004), PROCEEDINGS, P79, DOI 10.1109/WICSA.2004.1310692
   Gomaa H, 2004, LECT NOTES COMPUT SC, V3014, P435
   GOMAA H, 2003, SOFTW PROD FAM ENG 5, P435
   Hallsteinsen S., 2006, SOFTW PROD LIN C 200
   Hallsteinsen S, 2008, COMPUTER, V41, P93, DOI 10.1109/MC.2008.123
   Immonen A., 2006, Research Issues in Software Product-Lines - Engineering and Managemen, P373, DOI DOI 10.1007/978-3-540-33253-4_10
   Jarzabek S, 2006, IEE P-SOFTW, V153, P61, DOI 10.1049/ip-sen:20050008
   Lee Jaejoon, 2006, SOFTW PROD LIN C 200
   Lemlouma T, 2004, 2004 IEEE INTERNATIONAL CONFERENCE ON MOBILE DATA MANAGEMENT, P106
   Liu Y, 2008, LECT NOTES COMPUT SC, V5281, P189
   Niemelä E, 2007, INFORM SOFTWARE TECH, V49, P1107, DOI 10.1016/j.infsof.2006.11.003
   Parekh S, 2002, REAL-TIME SYST, V23, P127, DOI 10.1023/A:1015350520175
   Parra Carlos, 2009, SOFTW PROD LIN C 200
   Rosnow R.L., 1997, People studying people: Artifacts and ethics in behavioral research
   SERRAL E, 2008, UIC 08
   Sinnema M, 2004, LECT NOTES COMPUT SC, V3154, P197
   Tesauro G, 2005, 3RD INTERNATIONAL CONFERENCE ON AUTONOMIC COMPUTING, PROCEEDINGS, P65
   WEAL MJ, 2007, PERV COMP COMM 2007, P108
   White J, 2007, SPLC 2007: 11TH INTERNATIONAL SOFTWARE PRODUCT LINE CONFERENCE, PROCEEDINGS, P129, DOI 10.1109/SPLINE.2007.19
   Yacoub SM, 2002, IEEE T SOFTWARE ENG, V28, P529, DOI 10.1109/TSE.2002.1010058
   ZHANG H, 2003, QUALITY PREDICTION A, P1031
   2002, PROCEEDINGS OF THE T
   [No title captured]
NR 38
TC 12
Z9 12
U1 1
U2 30
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 1
PY 2013
VL 78
IS 12
BP 2399
EP 2413
DI 10.1016/j.scico.2012.06.007
PG 15
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 234SL
UT WOS:000325664500008
DA 2024-07-18
ER

PT J
AU Hinze, R
AF Hinze, Ralf
TI Adjoint folds and unfolds-An extended study
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 10th International Conference on Mathematics of Program Construction
CY JUN, 2010
CL Quebec City, CANADA
SP Ctr Rech Math, Univ Laval
DE Initial algebra; Fold; Final coalgebra; Unfold; Adjunction; Kan
   extension; Fusion; Haskell
ID INITIAL ALGEBRA-SEMANTICS; RECURSIVE COALGEBRAS; SCHEMES
AB Folds and unfolds are at the heart of the algebra of programming. They allow the cognoscenti to derive and manipulate programs rigorously and effectively. However, most, if not all, programs require some tweaking to be given the form of an (un)fold. In this article, we remedy the situation by introducing adjoint (un)folds. We demonstrate that most programs are already of the required form and thus are directly amenable to formal manipulation. Central to the development is the categorical notion of an adjunction, which links adjoint (un)folds to standard (un)folds. We discuss a multitude of basic adjunctions and ways of combining adjunctions and show that they are directly relevant to programming. Furthermore, we develop the calculational properties of adjoint (un)folds, providing several fusion laws, which codify basic optimisation principles. We give a novel proof of type fusion based on adjoint folds and discuss several applications-type fusion states conditions for fusing a left adjoint with an initial algebra to form another initial algebra. The formal development is complemented by a series of examples in Haskell. (C) 2012 Elsevier B.V. All rights reserved.
C1 Univ Oxford, Dept Comp Sci, Oxford OX1 3QD, England.
C3 University of Oxford
RP Hinze, R (corresponding author), Univ Oxford, Dept Comp Sci, Wolfson Bldg,Parks Rd, Oxford OX1 3QD, England.
EM ralf.hinze@cs.ox.ac.uk
FU EPSRC [EP/J010995/1] Funding Source: UKRI
CR Abel A, 2005, THEOR COMPUT SCI, V333, P3, DOI 10.1016/j.tcs.2004.10.017
   Adámek J, 2007, RAIRO-THEOR INF APPL, V41, P447, DOI 10.1051/ita:2007028
   [Anonymous], 2022, COQ PROOF ASSISTANT
   [Anonymous], 1994, LNCS
   [Anonymous], 1998, GRADUATE TEXTS MATH
   [Anonymous], 1998, The art of computer programming: Sorting and searching
   [Anonymous], 1912, Norske Vid. Selsk. Skr., I Mat. Nat. Kl.
   [Anonymous], 2003, The Fun of Programming
   [Anonymous], 1999, Category Theory for Computing Science
   [Anonymous], 2003, Haskell 98 language and libraries: the revised report
   Backhouse R., 1995, Category Theory and Computer Science. 6th International Conference, CTCS '95 Proceedings, P159
   Backhouse R. C., 1994, Category theory as coherently constructive lattice theory: an illustration
   Bartels F., 2003, Mathematical Structures in Computer Science, V13, P321, DOI 10.1017/S0960129502003900
   Bird R., 1998, Mathematics of Program Construction. 4th International Conference, MPC'98. Proceedings, P52, DOI 10.1007/BFb0054285
   Bird R., 1999, Formal Aspects of Computing, V11, P200, DOI 10.1007/s001650050047
   Bird R., 1998, INTRO FUNCTIONAL PRO, V2nd
   Bird Richard, 1997, Algebra of Programming
   Capretta V, 2006, INFORM COMPUT, V204, P437, DOI 10.1016/j.ic.2005.08.005
   Capretta V, 2009, LECT NOTES COMPUT SC, V5902, P84, DOI 10.1007/978-3-642-10452-7_7
   COCKETT R, 1992, 9248018 U CALG DEP C
   Connelly R. H., 1995, Mathematical Structures in Computer Science, V5, P381, DOI 10.1017/S0960129500000803
   Coutts D, 2007, ACM SIGPLAN NOTICES, V42, P315, DOI 10.1145/1291220.1291199
   Danvy O, 1999, LECT NOTES COMPUT SC, V1722, P241
   FREYD P, 1991, LECT NOTES MATH, V1488, P95
   Gibbons J, 2000, SCI COMPUT PROGRAM, V37, P37, DOI 10.1016/S0167-6423(99)00022-2
   Gibbons J., 1998, ICFP 98, V34, P273
   Gibbons J, 2009, WGP'09: PROCEEDINGS OF THE 2009 ACM SIGPLAN WORKSHOP ON GENERIC PROGRAMMING, P85
   GOGUEN JA, 1977, J ACM, V24, P68, DOI 10.1145/321992.321997
   HAGINO T, 1987, LECT NOTES COMPUTER, V283
   Hinze R., 2000, Journal of Functional Programming, V10, P327, DOI 10.1017/S0956796800003713
   Hinze R., 2000, Journal of Functional Programming, V10, P305, DOI 10.1017/S0956796800003701
   HINZE R, 2001, ELECT NOTES THEORETI, V41, P5, DOI DOI 10.1016/S1571-0661(05)80542-0
   HINZE R, 2000, P 2 WORKSH GEN PROGR
   Hinze R, 2011, LECT NOTES COMPUT SC, V6486, P92, DOI 10.1007/978-3-642-17796-5_6
   Hinze R, 2010, WGP 2010: PROCEEDINGS OF THE 2010 ACM SIGPLAN WORKSHOP ON GENERIC PROGRAMMING, P85
   Hinze R, 2010, J FUNCT PROGRAM, V20, P463, DOI 10.1017/S0956796810000213
   Hinze Ralf, 2000, P 2 WORKSH GEN PROGR, P17
   Hutton G, 2010, J FUNCT PROGRAM, V20, P353, DOI 10.1017/S0956796810000122
   Johann P, 2008, ACM SIGPLAN NOTICES, V43, P297, DOI 10.1145/1328897.1328475
   Johann P, 2007, LECT NOTES COMPUT SC, V4583, P207
   LAMBEK J, 1968, MATH Z, V103, P151, DOI 10.1007/BF01110627
   Lambek J., 1980, To H. B. Curry: Essays on Combinatory Logic, P376
   LAMMEL R, 2005, P 2005 INT C FUNCT P
   LEHMANN DJ, 1981, MATH SYST THEORY, V14, P97, DOI 10.1007/BF01752392
   MALCOLM G, 1990, SCI COMPUT PROGRAM, V14, P255, DOI 10.1016/0167-6423(90)90023-7
   Marlow Simon, 2010, Haskell 2010 language report
   Martin C, 2004, FORM ASP COMPUT, V16, P19, DOI 10.1007/s00165-003-0013-6
   Matthes R, 2004, THEOR COMPUT SCI, V327, P155, DOI 10.1016/j.tcs.2004.07.025
   Meertens L., 1992, Formal Aspects of Computing, V4, P413, DOI 10.1007/BF01211391
   MEIJER E, 1991, LECT NOTES COMPUT SC, V523, P124
   MENDLER NP, 1991, ANN PURE APPL LOGIC, V51, P159, DOI 10.1016/0168-0072(91)90069-X
   MYCROFT A, 1984, LECT NOTES COMPUT SC, V167, P217
   Okasaki C, 1997, ACM SIGPLAN NOTICES, V32, P66, DOI 10.1145/258949.258956
   Schrijvers T, 2009, ACM SIGPLAN NOTICES, V44, P341, DOI 10.1145/1631687.1596599
   Sheard T, 2004, J FUNCT PROGRAM, V14, P547, DOI 10.1017/S095679680300488X
   Sheard T, 2008, LECT NOTES COMPUT SC, V5161, P158, DOI 10.1007/978-3-540-88059-2_5
   SMYTH MB, 1982, SIAM J COMPUT, V11, P761, DOI 10.1137/0211062
   TRIFONOV V, 2003, P ACM SIGPLAN WORKSH, P98, DOI DOI 10.1145/871895.871906
   Uustalu T., 2001, Nordic Journal of Computing, V8, P366
   Uustalu T., 1999, Informatica, V10, P5
   Uustalu Tarmo., 2000, PROC 2 WORKSHOP GENE, P69
   Vene V., 1998, Proceedings of the Estonian Academy of Sciences. Physics, Mathematics, V47, P147
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
NR 71
TC 10
Z9 12
U1 0
U2 3
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 1
PY 2013
VL 78
IS 11
BP 2108
EP 2159
DI 10.1016/j.scico.2012.07.011
PG 52
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 220QR
UT WOS:000324602500006
OA hybrid
DA 2024-07-18
ER

PT J
AU Bonsangue, M
   Caltais, G
   Goriac, EI
   Lucanu, D
   Rutten, J
   Silva, A
AF Bonsangue, Marcello
   Caltais, Georgiana
   Goriac, Eugen-Ioan
   Lucanu, Dorel
   Rutten, Jan
   Silva, Alexandra
TI Automatic equivalence proofs for non-deterministic coalgebras
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Coalgebra; Algebra; Bisimilarity; Automatic reasoning
ID CIRCULAR COINDUCTION; SPECIFICATION; ALGEBRA
AB A notion of generalized regular expressions for a large class of systems modeled as coalgebras, and an analog of Kleene's theorem and Kleene algebra, were recently proposed by a subset of the authors of this paper. Examples of the systems covered include infinite streams, deterministic automata, Mealy machines and labeled transition systems. In this paper, we present a novel algorithm to decide whether two expressions are bisimilar or not. The procedure is implemented in the automatic theorem prover CIRC, by reducing coinduction to an entailment relation between an algebraic specification and an appropriate set of equations. We illustrate the generality of the tool with three examples: infinite streams of real numbers, Mealy machines and labeled transition systems. (C) 2012 Elsevier B.V. All rights reserved.
C1 [Bonsangue, Marcello] Leiden Univ, LIACS, NL-2300 RA Leiden, Netherlands.
   [Caltais, Georgiana; Goriac, Eugen-Ioan] Reykjavik Univ, Sch Comp Sci, Reykjavik, Iceland.
   [Lucanu, Dorel] Alexandru Ioan Cuza Univ, Fac Comp Sci, Iasi, Romania.
   [Rutten, Jan; Silva, Alexandra] Radboud Univ Nijmegen, NL-6525 ED Nijmegen, Netherlands.
   [Silva, Alexandra] Univ Minho, HASLab INESC TEC, Braga, Portugal.
C3 Leiden University; Leiden University - Excl LUMC; Reykjavik University;
   Alexandru Ioan Cuza University; Radboud University Nijmegen;
   Universidade do Minho; INESC TEC
RP Goriac, EI (corresponding author), Reykjavik Univ, Sch Comp Sci, Reykjavik, Iceland.
EM marcello@liacs.nl; gcaltais10@ru.is; eugen.goriac@gmail.com;
   dlucanu@info.uaic.ro; janr@cwi.nl; alexandra@cs.ru.nl
RI Lucanu, Dorel/C-3626-2012
OI Lucanu, Dorel/0000-0001-8097-040X; Bonsangue,
   Marcello/0000-0003-3746-3618
FU project 'Meta-theory of Algebraic Process Theories' of Icelandic
   Research Fund [100014021]; project 'Extending and Axiomatizing
   Structural Operational Semantics: Theory and Tools' of Icelandic
   Research Fund [110294-0061]; DAK [SMIS-CSNR 602-12516, 161/15.06.2010];
   ERDF-European Regional Development Fund through the COMPETE Programme;
   Fundacao para a Ciencia e a Tecnologia, Portugal
   [FCOMP-01-0124-FEDER-020537, SFRH/BPD/71956/2010]; Fundação para a
   Ciência e a Tecnologia [SFRH/BPD/71956/2010] Funding Source: FCT
FX We would like to thank the referees for the many constructive comments,
   which greatly helped us to improve the paper. The authors are also
   grateful for useful comments from Luca Aceto, Filippo Bonchi, and Miguel
   Palomino Tarjuelo. The work of GC and E-IG has been partially supported
   by the project 'Meta-theory of Algebraic Process Theories' (no.
   100014021) of the Icelandic Research Fund. The work of E-IG has also
   been partially supported by the project 'Extending and Axiomatizing
   Structural Operational Semantics: Theory and Tools' (no. 110294-0061) of
   the Icelandic Research Fund. The work of DL has been partially supported
   by the DAK project SMIS-CSNR 602-12516, Contract 161/15.06.2010. The
   work of AS was partially funded by ERDF-European Regional Development
   Fund through the COMPETE Programme and by Fundacao para a Ciencia e a
   Tecnologia, Portugal within projects FCOMP-01-0124-FEDER-020537 and
   SFRH/BPD/71956/2010.
CR ACETO L, 1992, J ACM, V39, P147, DOI 10.1145/147508.147527
   Bonsangue M, 2011, LECT NOTES COMPUT SC, V6527, P226, DOI 10.1007/978-3-642-19829-8_15
   Bouhoula A, 2000, THEOR COMPUT SCI, V236, P35, DOI 10.1016/S0304-3975(99)00206-6
   Goguen J, 2000, FIFTEENTH IEEE INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING, PROCEEDINGS, P123, DOI 10.1109/ASE.2000.873657
   GOGUEN JA, 1992, THEOR COMPUT SCI, V105, P217, DOI 10.1016/0304-3975(92)90302-V
   Goriac EI, 2010, LECT NOTES COMPUT SC, V6447, P220, DOI 10.1007/978-3-642-16901-4_16
   Hausmann D, 2005, LECT NOTES COMPUT SC, V3442, P341, DOI 10.1007/978-3-540-31984-9_26
   Hermida C, 1998, INFORM COMPUT, V145, P107, DOI 10.1006/inco.1998.2725
   Kleene S., 1956, AUTOMATA STUDIES, P3
   Kozen D., 2001, STACS 2001. 18th Annual Symposium on Theoretical Aspects of Computer Science. Proceedings (Lecture Notes in Computer Science Vol.2010), P27
   Kozen D., 1991, Proceedings of Sixth Annual IEEE Symposium on Logic in Computer Science (Cat. No.91CH3025-4), P214, DOI 10.1109/LICS.1991.151646
   Kozen Dexter, 2008, COALGEBRAIC THEORY K
   Lucanu D, 2009, LECT NOTES COMPUT SC, V5728, P433, DOI 10.1007/978-3-642-03741-2_30
   MILNER R, 1984, J COMPUT SYST SCI, V28, P439, DOI 10.1016/0022-0000(84)90023-0
   Owens S, 2009, J FUNCT PROGRAM, V19, P173, DOI 10.1017/S0956796808007090
   Rosu G., 2000, THESIS U CALIFORNIA
   Rosu G, 2009, LECT NOTES COMPUT SC, V5728, P127, DOI 10.1007/978-3-642-03741-2_10
   Rothe J, 2001, J UNIVERS COMPUT SCI, V7, P175
   Rutten JJMM, 2000, THEOR COMPUT SCI, V249, P3, DOI 10.1016/S0304-3975(00)00056-6
   SALOMAA A, 1966, J ACM, V13, P158, DOI 10.1145/321312.321326
   Silva A, 2011, INFORM COMPUT, V209, P822, DOI 10.1016/j.ic.2010.09.007
   Silva A, 2010, LOG METH COMPUT SCI, V6, DOI 10.2168/LMCS-6(3:23)2010
   Staton S, 2009, LECT NOTES COMPUT SC, V5728, P191, DOI 10.1007/978-3-642-03741-2_14
   Worthington J, 2008, LECT NOTES COMPUT SC, V4988, P382
NR 24
TC 1
Z9 1
U1 0
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 1
PY 2013
VL 78
IS 9
BP 1324
EP 1345
DI 10.1016/j.scico.2012.07.001
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 179QJ
UT WOS:000321536100008
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Garcia, E
   Giret, A
   Botti, V
AF Garcia, Emilia
   Giret, Adriana
   Botti, Vicente
TI A Model-Driven CASE tool for developing and verifying regulated open MAS
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Multi-agent systems; Contracts; Model-Driven software development; Model
   checking
AB This paper describes a CASE tool for developing complex systems in which heterogeneous and autonomous agents may need to coexist in a complex social and legal framework. Model-Driven Technologies are used to integrate the design of systems of this kind with the verification of the models and with the generation of executable code from these models. The verification module is based on model-checking techniques to check the coherence of a modeled legal context at design time is presented and it is exemplified with a case study. (C) 2011 Elsevier B.V. All rights reserved.
C1 [Garcia, Emilia; Giret, Adriana; Botti, Vicente] Univ Politecn Valencia, Valencia, Spain.
C3 Universitat Politecnica de Valencia
RP Garcia, E (corresponding author), Camino Vera S-N, Valencia 46022, Spain.
EM mgarcia@dsic.upv.es; agiret@dsic.upv.es; vbotti@dsic.upv.es
RI Garcia, Emilia/P-7559-2019; Giret, Adriana/G-8660-2015; Botti,
   Vicente/M-5853-2019
OI Garcia, Emilia/0000-0002-0610-4631; Giret, Adriana/0000-0002-2311-0785;
   Botti, Vicente/0000-0002-6507-2756
FU CONSOLIDER INGENIO [CSD2007-00022]; FPU [AP2007-01276]; 
   [TIN2008-04446];  [TIN2009-13839-C03-01];  [PROMETEO 2008/051]
FX This work is partially supported by the TIN2008-04446,
   TIN2009-13839-C03-01, PROMETEO 2008/051 projects, CONSOLIDER INGENIO
   2010 under grant CSD2007-00022 and FPU grant AP2007-01276 awarded to
   Emilia Garcia.
CR [Anonymous], INT T SYSTEMS SCI AP
   [Anonymous], MET FAC MOF 2 0
   [Anonymous], 2011, ECL OP DEV PLATF
   [Anonymous], 2011, ECL XPAND PLUG IN
   [Anonymous], 2007, J APPL LOGICS
   [Anonymous], 2003, The Spin Model Checker: Primer and Reference Manual
   Argente E., 2011, KNOWL INF SYST, P1
   Bordini RH, 2006, AUTON AGENT MULTI-AG, V12, P239, DOI 10.1007/s10458-006-5955-7
   Criado N, 2013, J LOGIC COMPUT, V23, P309, DOI 10.1093/logcom/exr025
   Dignum V., 2699 FAABS, P37
   Fenech S, 2009, LECT NOTES COMPUT SC, V5684, P200, DOI 10.1007/978-3-642-03466-4_13
   Garcia E., 2010, 19 INT C INF SYST DE, P235
   Garcia E, 2009, LECT NOTES ARTIF INT, V5925, P345, DOI 10.1007/978-3-642-11161-7_24
   Garrido A, 2009, FRONT ARTIF INTEL AP, V202, P252, DOI 10.3233/978-1-60750-061-2-252
   Hachicha H., 2008, 6 INT WORKSH AG THEO, P75
   Hsieh FS, 2005, LECT NOTES COMPUT SC, V3590, P148
   KOVSE T, 2009, P 16 INT SPIN WORKSH, V5578, P143
   Lomuscio A., 2010, AUTON AGENT MULTI-AG, P1
   Morandini M, 2008, LECT NOTES COMPUT SC, V4951, P182
   Oren Nir, 2009, Coordination, Organizations, Institutions and Norms in Agent Systems IV. COIN 2008, International Workshops. Revised Selected Papers, P156, DOI 10.1007/978-3-642-00443-8_11
   Osman Nardine., 2006, P 5 INT JOINT C AUTO, P238
   Pace G, 2007, LECT NOTES COMPUT SC, V4762, P82
   Rougemaille S, 2008, LECT NOTES ARTIF INT, V4995, P318
   Sierra C., 2004, UPGRADE The European Journal for the Informatics Professional, VV, P33
   Solaiman E, 2003, LECT NOTES COMPUT SC, V2910, P303
   Soley R., 2000, MODEL DRIVEN ARCHITE
   Vazquez-Salceda J., 2009, P 1 INT ICST C DIG B
   Wooldridge M., 2002, Proceedings of the First International Joint Conference on Autonomous Agents and Multiagent Systems, P952
NR 28
TC 5
Z9 5
U1 1
U2 6
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 1
PY 2013
VL 78
IS 6
BP 695
EP 704
DI 10.1016/j.scico.2011.10.009
PG 10
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 133JJ
UT WOS:000318134400007
OA Green Published
DA 2024-07-18
ER

PT J
AU Khalilian, A
   Azgomi, MA
   Fazlalizadeh, Y
AF Khalilian, Alireza
   Azgomi, Mohammad Abdollahi
   Fazlalizadeh, Yalda
TI An improved method for test case prioritization by incorporating
   historical test case data
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Software regression test; Test case prioritization; History-based
   prioritization; Historical fault detection
ID COVERAGE
AB Test case prioritization reorders test cases from a previous version of a software system for the current release to optimize regression testing. We have previously introduced a technique for test case prioritization using historical test case performance data. The technique was based on a test case prioritization equation, which directly computes the priority of each test case using the historical information of the test case using an equation with constant coefficients. This technique was compared just with random ordering approach. In this paper, we present an enhancement of the aforementioned technique in two ways. First, we propose a new prioritization equation with variable coefficients gained according to the available historical performance data, which acts as a feedback from the previous test sessions. Second, a family of comprehensive empirical studies has been conducted to evaluate the performance of the technique. We have compared the proposed technique with our previous technique and the technique proposed by Kim and Porter. The experimental results demonstrate the effectiveness of the proposed technique in accelerating the rate of fault detection in history-based test case prioritization. (C) 2012 Elsevier B.V. All rights reserved.
C1 [Khalilian, Alireza; Azgomi, Mohammad Abdollahi; Fazlalizadeh, Yalda] Iran Univ Sci & Technol, Sch Comp Engn, Tehran 1684613114, Iran.
C3 Iran University Science & Technology
RP Azgomi, MA (corresponding author), Iran Univ Sci & Technol, Sch Comp Engn, Hengam S,Resalat Sq, Tehran 1684613114, Iran.
EM khalilian@comp.iust.ac.ir; azgomi@gmail.com; ya_alizadeh@comp.iust.ac.ir
RI Abdollahi Azgomi, Mohammad/D-3734-2009; khalilian, alireza/H-6083-2017;
   Khalilian, Alireza/H-8242-2015
OI Abdollahi Azgomi, Mohammad/0000-0002-9605-8412; Khalilian,
   Alireza/0000-0002-4079-703X
CR Agrawal H., 1993, Proceedings. Conference on Software Maintenance 1993. CSM-93 (Cat. No.93CH3360-5), P348, DOI 10.1109/ICSM.1993.366927
   [Anonymous], INT S SOFTW TEST AN
   [Anonymous], SAS 9 1 3 DOC SAS GR
   [Anonymous], 1992, MATH STAT
   Burnstein Ilene., 2003, Practical Software Testing: A Process-Oriented Approach
   Delamaro M.E., 1996, P C PERFORMABILITY C, P79
   Do HS, 2005, EMPIR SOFTW ENG, V10, P405, DOI 10.1007/s10664-005-3861-2
   Elbaum S, 2004, SOFTWARE QUAL J, V12, P185, DOI 10.1023/B:SQJO.0000034708.84524.22
   Elbaum S, 2002, IEEE T SOFTWARE ENG, V28, P159, DOI 10.1109/32.988497
   Elbaum S., 2000, Software Engineering Notes, V25, P102, DOI 10.1145/347636.348910
   Fazlalizadeh Y, 2009, LECT NOTES COMPUT SC, V5668, P43
   Frankl PG, 2003, 2003 INTERNATIONAL SYMPOSIUM ON EMPIRICAL SOFTWARE ENGINEERING, PROCEEDINGS, P195, DOI 10.1109/ISESE.2003.1237978
   Gyimóthy T, 1999, LECT NOTES COMPUT SC, V1687, P303, DOI 10.1145/318774.319248
   Harrold M. J., 1993, ACM Transactions on Software Engineering and Methodology, V2, P270, DOI 10.1145/152388.152391
   Horgan J. R., 1992, Proceedings of the Second Symposium on Assessment of Quality Software Development Tools (Cat. No.92TH0415-0), P2, DOI 10.1109/AQSDT.1992.205829
   Jeffrey D, 2007, IEEE T SOFTWARE ENG, V33, P108, DOI 10.1109/TSE.2007.18
   Jeffrey D, 2008, J SYST SOFTWARE, V81, P196, DOI 10.1016/j.jss.2007.05.006
   Jeffrey D, 2006, P INT COMP SOFTW APP, P411
   Jung-Min Kim, 2000, Proceedings of the 2000 International Conference on Software Engineering. ICSE 2000 the New Millennium, P126, DOI 10.1109/ICSE.2000.870404
   Kim JM, 2002, ICSE 2002: PROCEEDINGS OF THE 24TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P119, DOI 10.1109/ICSE.2002.1007961
   Li Z, 2007, IEEE T SOFTWARE ENG, V33, P225, DOI 10.1109/TSE.2007.38
   MALISHEVSKY G, 2006, TRUNLCSE20060004 DEP
   Mirarab S, 2007, LECT NOTES COMPUT SC, V4422, P276
   Nisan N, 2007, ALGORITHMIC GAME THEORY, P1, DOI 10.1017/CBO9780511800481
   Park H, 2008, PROCEEDINGS OF THE SECOND INTERNATIONAL CONFERENCE ON INFORMATION SECURITY AND ASSURANCE, P32
   Qu B, 2007, P INT COMP SOFTW APP, P465
   Rosenblum DS, 1997, IEEE T SOFTWARE ENG, V23, P146, DOI 10.1109/32.585502
   Rothermel G, 1998, PROC IEEE INT CONF S, P34, DOI 10.1109/ICSM.1998.738487
   Rothermel G, 2003, IEEE SOFTWARE, V20, P74, DOI 10.1109/MS.2003.1231157
   Rothermel G., 1999, Proceedings IEEE International Conference on Software Maintenance - 1999 (ICSM'99). `Software Maintenance for Business Change' (Cat. No.99CB36360), P179, DOI 10.1109/ICSM.1999.792604
   Rothermel G., 1997, ACM Transactions on Software Engineering and Methodology, V6, P173, DOI 10.1145/248233.248262
   Rothermel  Gregg, 2001, IEEE T SOFTWARE ENG, V27, P102
   Walcott K.R., 2006, P INT S SOFTW TEST A, P1, DOI DOI 10.1145/1146238.1146240
   Wong W., 1997, P 8 INT S SOFTW REL, P230
   Yang Q, 2009, COMPUT J, V52, P589, DOI 10.1093/comjnl/bxm021
   Yoo S., 2007, Proceedings of the 2007 international symposium on Software testing and analysis, P140, DOI 10.1145/1273463.1273483
   Zhu H, 1997, ACM COMPUT SURV, V29, P366, DOI 10.1145/267580.267590
NR 37
TC 32
Z9 32
U1 1
U2 7
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 1
PY 2012
VL 78
IS 1
BP 93
EP 116
DI 10.1016/j.scico.2012.01.006
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 024RD
UT WOS:000310125400006
DA 2024-07-18
ER

PT J
AU Biggar, P
   de Vries, E
   Gregg, D
AF Biggar, Paul
   de Vries, Edsko
   Gregg, David
TI A practical solution for achieving language compatibility in scripting
   language compilers
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Compiler; Scripting language
AB Although scripting languages have become very popular, even mature scripting language implementations remain interpreted. Several compilers and reimplementations have been attempted, generally focusing on performance.
   Based on our survey of these reimplementations, we determine that there are three important features of scripting languages that are difficult to compile or reimplement. Since scripting languages are defined primarily through the semantics of their original implementations, they often change semantics between releases. They provide C APIs, used both for foreign-function interfaces and to write third-party extensions. These APIs typically have tight integration with the original implementation, and are used to provide large standard libraries, which are difficult to re-use, and costly to reimplement. Finally, they support run-time code generation. These features make it difficult to design a fully compatible compiler.
   We present a technique to support these features in an ahead-of-time compiler for PHP. Our technique uses the original PHP implementation through the provided C API, both in our compiler and in our generated code. We support all of these important scripting language features. Additionally, our approach allows us to automatically support limited future language changes. We present a discussion and performance evaluation of this technique. (c) 2011 Elsevier B.V. All rights reserved.
C1 [Biggar, Paul; de Vries, Edsko; Gregg, David] Trinity Coll Dublin, Lero TCD, Dublin 2, Ireland.
C3 Trinity College Dublin
RP Biggar, P (corresponding author), Trinity Coll Dublin, Lero TCD, Dublin 2, Ireland.
EM pbiggar@cs.tcd.ie; edsko.de.vries@cs.tcd.ie; david.gregg@cs.tcd.ie
FU Irish Research Council for Science, Engineering and Technology (IRCSET)
   Embark Initiative; Science Foundation Ireland grant [03/CE2/1303_1]; SFI
   [SFI 06 IN.1 1898]
FX We would also like to thank the anonymous reviewers, whose comments
   helped us improve an earlier version of this paper. The authors are
   grateful for funding from the Irish Research Council for Science,
   Engineering and Technology (IRCSET) Embark Initiative, which made this
   work possible. This work was also supported, in part, by Science
   Foundation Ireland grant 03/CE2/1303_1 to Lero - the Irish Software
   Engineering Research Centre (www.lero.ie) and by SFI project SFI 06 IN.1
   1898.
CR [Anonymous], TIOBE PROGR COMM IND
   [Anonymous], 2006, Programming in lua
   Aycock J, 2003, ACM COMPUT SURV, V35, P97, DOI 10.1145/857076.857077
   Aycock J. ., 1998, P 7 INT PYTH C
   Aycock J., 2003, PYCON DC2003 MARCH
   Benda J, 2006, NET TECHNOLOGIES 2006, FULL PAPERS PROCEEDINGS, P31
   de Vries E., 2007, TR200747 TRIN COLL D
   Dufour Mark, 2006, Master's thesis
   Ewing G., PYREX LANGUAGE WRITI
   Feeley M., 2007, IMPLEMENTATION FUNCT, P237
   Gal A., 2006, VEE 2006. Proceedings of the Second International Conference on Virtual Execution Environments, P144
   Gal A, 2009, PLDI'09 PROCEEDINGS OF THE 2009 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P465, DOI 10.1145/1542476.1542528
   Golemon S., 2006, EXTENDING EMBEDDING
   Ierusalimschy R, 2005, J UNIVERS COMPUT SCI, V11, P1159
   Johnson G., 2006, INT PHP MAGAZINE DEC, P24
   Jones D. M., 2008, ISOIECJTC1SC220WGN01
   Lattner C, 2004, INT SYM CODE GENER, P75, DOI 10.1109/CGO.2004.1281665
   Lopes N., BUILDING JIT COMPILE
   Malyshev S., 2007, RECOMPILED VARIABLES
   Muhammad H, 2007, J UNIVERS COMPUT SCI, V13, P839
   Nethercote N, 2007, ACM SIGPLAN NOTICES, V42, P89, DOI 10.1145/1273442.1250746
   PAGAN FG, 1988, SOFTWARE PRACT EXPER, V18, P509, DOI 10.1002/spe.4380180603
   Rigo Armin., 2004, P 2004 ACM SIGPLAN W, P15, DOI DOI 10.1145/1014007.1014010
   Roadsend Inc, ROADS PHP 2 9 X MAN
   Salib M., 2004, Ph.D. thesis
   SCHNEIDER V, 1989, SOFTWARE PRACT EXPER, V19, P1111, DOI 10.1002/spe.4380191108
   Suganuma T, 2002, USENIX ASSOCIATION PROCEEDINGS OF THE 2ND JAVA(TM) VIRTUAL MACHINE RESEARCH AND TECHNOLOGY SYMPOSIUM, P91
   The PHP Group, ZEND BENCHM
   Tozawa A, 2009, ACM SIGPLAN NOTICES, V44, P200, DOI 10.1145/1594834.1480908
   WALKER K, 1992, SOFTWARE PRACT EXPER, V22, P637, DOI 10.1002/spe.4380220803
   Wassermann G, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P32, DOI 10.1145/1250734.1250739
   Zaleski M, 2007, VEE'07: PROCEEDINGS OF THE THIRD INTERNATIONAL CONFERENCE ON VIRTUAL EXECUTION ENVIRONMENTS, P83
NR 32
TC 1
Z9 1
U1 0
U2 3
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD AUG 1
PY 2012
VL 77
IS 9
BP 971
EP 989
DI 10.1016/j.scico.2011.01.004
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 967RD
UT WOS:000305924600002
OA Green Accepted, Green Submitted
DA 2024-07-18
ER

PT J
AU Durán, F
   Ouederni, M
   Salaün, G
AF Duran, Francisco
   Ouederni, Meriem
   Salauen, Gwen
TI A generic framework for <i>n</i>-protocol compatibility checking
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE SOC; Transition systems; Non-observable actions; Compatibility; Maude
ID PROCESS ALGEBRA; ADAPTATION; MODEL; SPECIFICATION; TOOLBOX
AB Service-Oriented Computing promotes the development of new systems from existing services which are usually accessed through their public interfaces. In this context, interfaces must be compatible in order to avoid interoperability issues. In this article, we propose a new framework for checking the compatibility of n service interfaces. Our framework is generic, in the sense that it implements several compatibility notions useful for different application areas, and extensible since new further notions can easily be incorporated. We consider a service interface model which takes behavioural descriptions with value-passing and non-observable actions into account. Our compatibility checking framework has been fully implemented into a prototype tool which relies on the rewriting logic-based system Maude. (c) 2011 Elsevier B.V. All rights reserved.
C1 [Duran, Francisco; Ouederni, Meriem] Univ Malaga, Dept Comp Sci, E-29071 Malaga, Spain.
   [Salauen, Gwen] Grenoble INP INRIA LIG, Grenoble, France.
C3 Universidad de Malaga; Communaute Universite Grenoble Alpes; Institut
   National Polytechnique de Grenoble; Universite Grenoble Alpes (UGA);
   Centre National de la Recherche Scientifique (CNRS)
RP Ouederni, M (corresponding author), Univ Malaga, Dept Comp Sci, E-29071 Malaga, Spain.
EM duran@lcc.uma.es; meriem@lcc.uma.es; Gwen.Salaun@inria.fr
RI Durán, Francisco/JXL-7273-2024
OI Duran, Francisco/0000-0001-5864-8094
FU RESCUE [TIN2008-05932]; MDD-MERTS [TIN2008-03107]; Spanish Ministry of
   Innovation and Science (MICINN); FEDER; regional government of Andalucia
   [P07-TIC-03184]
FX This work has been partially supported by the RESCUE (TIN2008-05932) and
   MDD-MERTS (TIN2008-03107) projects funded by the Spanish Ministry of
   Innovation and Science (MICINN) and FEDER, and by the regional
   government of Andalucia through project P07-TIC-03184.
CR Ait-Bachir A, 2008, LECT NOTES COMPUT SC, V5240, P374, DOI 10.1007/978-3-540-85758-7_27
   Aldini A, 2005, THEOR COMPUT SCI, V335, P281, DOI 10.1016/j.tcs.2004.10.043
   [Anonymous], 1980, Lecture Notes in Computer Science
   [Anonymous], 2007, LNCS
   Martín JA, 2009, ELECTRON NOTES THEOR, V229, P115, DOI 10.1016/j.entcs.2009.06.032
   Attiogbe C., 2006, LNCS, V4089, P8
   Bordeaux L, 2005, LECT NOTES COMPUT SC, V3324, P15
   Bouhoula A, 2000, THEOR COMPUT SCI, V236, P35, DOI 10.1016/S0304-3975(99)00206-6
   BRAND D, 1983, J ACM, V30, P323, DOI 10.1145/322374.322380
   Cámara J, 2009, PROC INT CONF SOFTW, P627, DOI 10.1109/ICSE.2009.5070572
   Canal C, 2001, SCI COMPUT PROGRAM, V41, P105, DOI 10.1016/S0167-6423(01)00002-8
   Chae HS, 2008, INT J SOFTW ENG KNOW, V18, P223, DOI 10.1142/S0218194008003647
   Clavel M, 2002, THEOR COMPUT SCI, V285, P187, DOI 10.1016/S0304-3975(01)00359-0
   Cortellessa V, 2007, LECT NOTES COMPUT SC, V4829, P97
   Cubo J, 2008, ELECTRON NOTES THEOR, V215, P39, DOI 10.1016/j.entcs.2008.06.020
   de Alfaro L., 2001, Software Engineering Notes, V26, P109, DOI 10.1145/503271.503226
   Deng SG, 2006, LECT NOTES COMPUT SC, V4215, P26
   Durán F, 2009, ELECTRON NOTES THEOR, V255, P65, DOI 10.1016/j.entcs.2009.10.025
   Foster H., 2006, 28th International Conference on Software Engineering Proceedings, P771, DOI 10.1145/1134285.1134408
   Frantzen L, 2006, LECT NOTES COMPUT SC, V4262, P40
   Fu X, 2005, IEEE T SOFTWARE ENG, V31, P1042, DOI 10.1109/TSE.2005.141
   Fu X., 2004, P 13 INT C WORLD WID, P621
   Garavel H, 2007, LECT NOTES COMPUT SC, V4590, P158
   Groote J.F., 2007, METH MOD SOFTW SYST
   Hameurlain N, 2007, SEFM 2007: FIFTH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING AND FORMAL METHODS, PROCEEDINGS, P391
   HENNESSY M, 1995, THEOR COMPUT SCI, V138, P353, DOI 10.1016/0304-3975(94)00172-F
   Ingolfsdottir A., 2001, HDB PROCESS ALGEBRA, P427
   Manning C.D., 1999, FDN STAT NATURAL LAN
   Martens A., 2006, INT C INTERNET WEB A, P147
   Martens A., 2003, PETRI NET NEWSLETTER, V65, P12
   Mateescu R, 2008, LECT NOTES COMPUT SC, V5364, P84, DOI 10.1007/978-3-540-89652-4_10
   MESEGUER J, 1992, THEOR COMPUT SCI, V96, P73, DOI 10.1016/0304-3975(92)90182-F
   Meseguer J, 1998, LECT NOTES COMPUT SC, V1376, P18
   MILNER R, 1993, THEOR COMPUT SCI, V114, P149, DOI 10.1016/0304-3975(93)90156-N
   Ouederni M., MAUDE COMPATIBILITY
   Pedersen T, 2004, PROCEEDING OF THE NINETEENTH NATIONAL CONFERENCE ON ARTIFICIAL INTELLIGENCE AND THE SIXTEENTH CONFERENCE ON INNOVATIVE APPLICATIONS OF ARTIFICIAL INTELLIGENCE, P1024
   Plasil F, 2002, IEEE T SOFTWARE ENG, V28, P1056, DOI 10.1109/TSE.2002.1049404
   Poizat P, 2006, J UNIVERS COMPUT SCI, V12, P1741
   RAMADGE PJG, 1989, P IEEE, V77, P81, DOI 10.1109/5.21072
   Salan G., 2006, INT J BUSINESS PROCE, V1, P116, DOI [10.1504/IJBPIM.2006.010025, DOI 10.1504/IJBPIM.2006.010025]
   Shi YL, 2005, 2005 IEEE/WIC/ACM INTERNATIONAL CONFERENCE ON WEB INTELLIGENCE, PROCEEDINGS, P483
   Wong PYH, 2008, INT CONF QUAL SOFTW, P126, DOI 10.1109/QSIC.2008.6
   WONHAM WM, 1987, SIAM J CONTROL OPTIM, V25, P637, DOI 10.1137/0325036
   Yellin DM, 1997, ACM T PROGR LANG SYS, V19, P292, DOI 10.1145/244795.244801
NR 44
TC 19
Z9 19
U1 0
U2 5
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUL 1
PY 2012
VL 77
IS 7-8
SI SI
BP 870
EP 886
DI 10.1016/j.scico.2011.03.009
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 944DU
UT WOS:000304179400006
OA Bronze
DA 2024-07-18
ER

PT J
AU Wong, PYH
   Gibbons, J
AF Wong, Peter Y. H.
   Gibbons, Jeremy
TI Formalisations and applications of BPMN
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Business process; CSP; Model checking; Property specifications;
   Refinement; Semantics; Timed behaviour; Workflow
AB We present two formalisations of the Business Process Modelling Notation (BPMN). In particular, we introduce a semantic model for BPMN in the process algebra CSP; we then study an augmentation of this model in which we introduce relative timing information, allowing one to specify timing constraints on concurrent activities. By exploiting CSP refinement, we are able to show some relationships between the timed and the untimed models. We then describe a novel empirical studies' model, and the transformation to BPMN, allowing one to apply our formal semantics for analysing different kinds of workflows. To provide a better facility for describing behaviour specification about a BPMN diagram, we also present a pattern-based approach using which a workflow designer could specify properties which could otherwise be difficult to express. Our approach is specifically designed to allow behavioural properties of BPMN diagrams to be mechanically verified via automatic model checking as provided by the FDR tool. We use two examples to illustrate our approach. (C) 2009 Elsevier B.V. All rights reserved.
C1 [Wong, Peter Y. H.; Gibbons, Jeremy] Univ Oxford, Comp Lab, Oxford OX1 2JD, England.
C3 University of Oxford
RP Wong, PYH (corresponding author), Univ Oxford, Comp Lab, Oxford OX1 2JD, England.
EM peter.wong@comlab.ox.ac.uk; jeremy.gibbons@comlab.ox.ac.uk
OI Gibbons, Jeremy/0000-0002-8426-9917
CR Bravetti Mario, 2007, P 6 INT S SOFTW COMP
   BRENTON J, 2005, P UK ESC ALL HANDS M, P678
   Carbone M., 2006, A theoretical basis of communication-centred concurrent programming
   DIJKMAN RM, 2007, 5969 QUEENSL U TECHN
   Dwyer M. B., 1999, P 21 INT C SOFTW ENG
   *FORM SYST EUR LTD, FAIL DIV REF FDR2 US
   FOSTER H, 2003, MAPPING BPEL4WS FSP
   Guelfi N, 2005, 12TH ASIA-PACIFIC SOFTWARE ENGINEERING CONFERENCE, PROCEEDINGS, P283, DOI 10.1109/APSEC.2005.7
   HAMMAND P, 1995, 19 ANN S COMP APPL M
   *ILOG, ILOG JVIEWS BPMN MOD
   Linden I, 2006, SCI COMPUT PROGRAM, V61, P152, DOI 10.1016/j.scico.2005.10.011
   Ling S, 2000, IEEE SYS MAN CYBERN, P3039, DOI 10.1109/ICSMC.2000.884464
   Lowe G., 2008, FORMAL ASPECTS COMPU, V20
   Ludäscher B, 2006, CONCURR COMP-PRACT E, V18, P1039, DOI 10.1002/cpe.994
   *MICR RES, MICR RES TRID SCI WO
   MODGIL S, 2003, ARTIFICIAL INTELLIGE, V27
   Mukarram Ahmed, 1992, THESIS U OXFORD
   *OMG, 2006, BUS MOD NOT BPMN SPE
   Ouyang C., 2006, BPM0602
   Reed JN, 2004, FORM ASP COMPUT, V16, P394, DOI 10.1007/s00165-004-0050-9
   Roscoe A.W., 1998, THEORY PRACTICE CONC
   van der Aalst WMP, 1997, LECT NOTES COMPUT SC, V1248, P407
   W3C, 2002, WEB SERV CHOR INT WS
   Wong PYH, 2008, INT CONF QUAL SOFTW, P126, DOI 10.1109/QSIC.2008.6
   Wong Peter Y. H., 2008, LNCS, V5063
   WONG PYH, 2009, ENTCS, V229
   WONG PYH, 2008, LNCS, V5256
   WONG PYH, 2009, LNCS, V5423
   Woodcock J., 1996, PRENTICE HALL INT SE
   MODEL CHECKING BPMN
   2004, XML SCHEMA 2
NR 31
TC 43
Z9 47
U1 1
U2 23
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD AUG 1
PY 2011
VL 76
IS 8
SI SI
BP 633
EP 650
DI 10.1016/j.scico.2009.09.010
PG 18
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 766JL
UT WOS:000290778300003
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Ricci, A
   Viroli, M
   Piancastelli, G
AF Ricci, Alessandro
   Viroli, Mirko
   Piancastelli, Giulio
TI simpA: An agent-oriented approach for programming concurrent
   applications on top of Java
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Agent-oriented programming; Concurrent programming; Agents and
   artifacts; Multi-agent systems; Core calculi
ID CORE CALCULUS; DECIDABILITY
AB More and more aspects of concurrency and concurrent programming are becoming part of mainstream programming and software engineering, due to several factors such as the widespread availability of multi-core/parallel architectures and Internet-based systems. This leads to the extension of mainstream object-oriented programming languages and platforms - Java is a main example - with libraries providing fine-grained mechanisms and idioms to support concurrent programming, in particular for building efficient programs. Besides this fine-grained support, a main research goal in this context is to devise higher-level, coarse-grained abstractions that would help building concurrent programs, as pure object-oriented abstractions help building large component-based programs. To this end, in this paper we present simpA, a Java-based framework that provides programmers with agent-oriented abstractions on top of the basic 00 layer, as a means to organize and structure concurrent applications. We first describe the application programming interface (API) and annotation framework provided to Java programmers for building simpA applications, and then we discuss the main features of the approach from a software engineering point of view, by showing some programming examples. Finally, we define an operational semantics formalizing the main aspects of this programming model. (C) 2010 Elsevier B.V. All rights reserved.
C1 [Ricci, Alessandro; Viroli, Mirko; Piancastelli, Giulio] Univ Bologna, Alma Mater Studiorum, DEIS, I-47023 Cesena, Italy.
C3 University of Bologna
RP Ricci, A (corresponding author), Univ Bologna, Alma Mater Studiorum, DEIS, Via Venezia 52, I-47023 Cesena, Italy.
EM a.ricci@unibo.it; mirko.viroli@unibo.it; giulio.piancastelli@unibo.it
RI Ricci, Alessandro/AFQ-1187-2022
OI Ricci, Alessandro/0000-0002-9222-5092; Viroli, Mirko/0000-0003-2702-5702
CR AGHA G, 1993, SIGPLAN NOTICES, V28, P23, DOI 10.1145/173284.155335
   Agha G., 1993, RES DIRECTIONS CONCU
   Agha G.Actors., 1986, MODEL CONCURRENT COM
   [Anonymous], 1999, Communicating and Mobile Systems: The Calculus
   [Anonymous], RES DIRECTIONS CONCU
   [Anonymous], 2007, Developing Multi-Agent Systems with JADE
   Arbab F., 1996, COORDINATION 96, P34
   Armstrong J., 2007, Programming Erlang: Software for a Concurrent World, V1st
   BAETEN JCM, 1987, LECT NOTES COMPUT SC, V259, P94
   Benton N, 2004, ACM T PROGR LANG SYS, V26, P769, DOI 10.1145/1018203.1018205
   BORDINI RH, 2005, MULTIAGENT PROGRAMMI, V15
   Brion J, 1998, J ATMOS CHEM, V30, P291, DOI 10.1023/A:1006036924364
   Caire Giovanni., 2008, Proceedings of the 7th international joint conference on Autonomous agents and multiagent systems: industrial track (AAMAS '08). International Foundation for Autonomous Agents and Multiagent Systems, Richland, P29
   Damiani F, 2008, ACTA INFORM, V45, P479, DOI 10.1007/s00236-008-0079-y
   Damiani F, 2009, ICSOFT 2009: PROCEEDINGS OF THE 4TH INTERNATIONAL CONFERENCE ON SOFTWARE AND DATA TECHNOLOGIES, VOL 1, P218
   DENTI E, 1997, LNCS, V1282, P274
   Dufourd C, 1998, LECT NOTES COMPUT SC, V1443, P103, DOI 10.1007/BFb0055044
   FOURNET C, 1996, P 23 ACM S PRINC PRO, P372, DOI DOI 10.1145/237721.237805
   FROLUND S, 1995, ECOOP 94, P107
   GELERNTER D, 1985, ACM T PROGR LANG SYS, V7, P80, DOI 10.1145/2363.2433
   Goetz B, 2006, JAVA CONCURRENCY PRA
   HALLER P, 2008, THEORET COMPUT SCI
   Haustein M, 2006, CONCURR COMP-PRACT E, V18, P519, DOI 10.1002/cpe.956
   Igarashi A, 2001, ACM T PROGR LANG SYS, V23, P396, DOI 10.1145/503502.503505
   Igarashi A, 2006, ACM T PROGR LANG SYS, V28, P795, DOI 10.1145/1152649.1152650
   Iglesias CA, 1999, LECT NOTES ARTIF INT, V1555, P317
   ITZSTEIN GS, 2001, ACRC01001 U S AUSTR
   Jennings NR, 2001, COMMUN ACM, V44, P35, DOI 10.1145/367211.367250
   Keen AW, 2004, ACM T PROGR LANG SYS, V26, P578, DOI 10.1145/982158.982162
   Larson J, 2009, COMMUN ACM, V52, P48, DOI 10.1145/1467247.1467263
   Lavender R.G., 1996, PATTERN LANGUAGES PR, P483
   Lea D, 2005, SCI COMPUT PROGRAM, V58, P293, DOI 10.1016/j.scico.2005.03.007
   Lea Doug, 1999, Concurrent Programming in Java. Second Edition: Design Principles and Patterns, V2nd
   Lea Doug, 2000, JAVA, P36
   MEYER B, 1993, COMMUN ACM, V36, P56, DOI 10.1145/162685.162705
   Milicia G, 2005, CONCURR COMP-PRACT E, V17, P539, DOI 10.1002/cpe.849
   Mosses PD, 2004, J LOGIC ALGEBR PROGR, V60-1, P195, DOI 10.1016/j.jlap.2004.03.008
   Omicini A, 2001, SCI COMPUT PROGRAM, V41, P277, DOI 10.1016/S0167-6423(01)00011-9
   OMICINI A, 2009, AUTON AGENTS MULTIAG, V19
   OMICINI A, 2004, AAMAS 2004, V1, P286, DOI DOI 10.1109/AAMAS.2004.10070
   Pokahr A., 2005, MULTIAGENT PROGRAMMI
   Resnick Mitchel, 1994, Turtles, Termites and Traffic Jams: Explorations in Massively Parallel Microworlds
   RICCI A, 2009, MULTIAGENT PROGRAMMI, V2, P259, DOI DOI 10.1007/978-0-387-89299-3_
   RICCI A, 2007, 5 INT C PRINC PRACT, P185
   RICCI A, 2008, P ELECT NOTES THEOR, V194, P111
   Ricci A, 2008, LECT NOTES ARTIF INT, V5118, P261, DOI 10.1007/978-3-540-85058-8_16
   Ricci Alessandro., 2007, Proceedings of the 6th International Joint Conference on Autonomous Agents and Multiagent Systems. AAMAS'07, p150:1, DOI DOI 10.1145/1329125.1329308
   Sangiorgi Davide, 2001, LNCS, V2154, P292, DOI [10.1007/3-540-44685-020, DOI 10.1007/3-540-44685-020]
   Sewell P, 1997, LECT NOTES COMPUT SC, V1243, P391
   Sutter H., 2005, ACM Queue, V3, P54, DOI 10.1145/1095408.1095421
   Velroyen H, 2008, LECT NOTES COMPUT SC, V4966, P154
   Viroli M, 2007, SCI COMPUT PROGRAM, V66, P226, DOI 10.1016/j.scico.2007.01.008
   Viroli M, 2007, J LOGIC ALGEBR PROGR, V70, P74, DOI 10.1016/j.jlap.2006.05.006
   WEYNS D, 2007, J AUTON AGENTS MULTI, V14
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
   Yonezawa A, 1986, OBJECT ORIENTED CONC
NR 56
TC 10
Z9 10
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 1
PY 2011
VL 76
IS 1
SI SI
BP 37
EP 62
DI 10.1016/j.scico.2010.06.012
PG 26
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 684BH
UT WOS:000284521500004
OA Bronze
DA 2024-07-18
ER

PT J
AU Tanter, É
   Fabry, J
   Douence, R
   Noyé, J
   Sudholt, M
AF Tanter, Eric
   Fabry, Johan
   Douence, Remi
   Noye, Jacques
   Sudholt, Mario
TI Scoping strategies for distributed aspects
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Aspect oriented programming; Distribution; Scoping strategies; Dynamic
   deployment; Scope; Scheme; Operational semantics
ID SEMANTICS; MODEL
AB Dynamic deployment of aspects brings greater flexibility and reuse potential but requires a proper means for scoping aspects Scoping issues are particularly crucial in a distributed context adequate treatment of distributed scoping is necessary to enable the propagation of aspect Instances across host boundaries and to avoid inconsistencies due to unintentional spreading of data and computations in a distributed system
   We motivate the need for expressive scoping of dynamically-deployed distributed aspects by an analysis of the deficiencies of current approaches for distributed aspects Extending recent work on scoping strategies for non-distributed aspects we then introduce a set of high-level strategies for specifying locality of aspect propagation and activation and illustrate the corresponding gain in expressiveness We present the operational semantics of our proposal using Scheme interpreters first introducing a model of distributed aspects that covers the range of current proposals and then extending It with dynamic aspect deployment and scoping strategies This work shows that given some extensions to their original execution model scoping strategies are directly applicable to the expressive scoping of distributed aspects (C) 2010 Elsevier B V All rights reserved
C1 [Tanter, Eric; Fabry, Johan] Univ Chile, Comp Sci Dept DCC, PLEIAD Lab, Santiago, Chile.
   [Douence, Remi; Noye, Jacques; Sudholt, Mario] Ecole Mines Nantes, ASCOLA, INRIA, LINA, Nantes, France.
C3 Universidad de Chile; Inria; IMT - Institut Mines-Telecom; IMT
   Atlantique
RP Tanter, É (corresponding author), Univ Chile, Comp Sci Dept DCC, PLEIAD Lab, Santiago, Chile.
RI Tanter, Éric/A-7955-2008
OI Tanter, Éric/0000-0002-7359-890X; Fabry, Johan/0000-0002-7533-9354
FU INRIA Associate Team RAPIDS; FONDECYT [1090083]
FX This work is partially funded by the INRIA Associate Team RAPIDS and the
   FONDECYT project 1090083 (J Fabry & E Tanter) This article extends the
   article Expressive Scoping of Distributed Aspects Tanter et al
   (2009)1281 that appeared in the Proceedings of the 8th International
   Conference on Aspect Oriented Software Development (AOSD 2009) DOI http
   //doi acm org/10 1145/1509239 1509245
CR Aracic I, 2006, LECT NOTES COMPUT SC, V3880, P135
   BENAVIDESNAVARR.LD, 2006, AOSD 2006, P51
   Bergmans L, 2001, COMMUN ACM, V44, P51, DOI 10.1145/383845.383857
   Bockisch C, 2006, ACM SIGPLAN NOTICES, V41, P125, DOI 10.1145/1167515.1167484
   Bockisch C, 2006, ACM SIGPLAN NOTICES, V41, P109, DOI 10.1145/1167515.1167483
   BOCKISH C, LIEBERHERR, P83
   DANIEL L, 2008, INT MIDDLEWARE C LEU
   DEFRAME B, 2007, P INT S SOFTWARE COM, V4829
   Dutchyn C, 2006, SCI COMPUT PROGRAM, V63, P207, DOI 10.1016/j.scico.2006.01.003
   FELLEISEN M, 1991, SCI COMPUT PROGRAM, V17, P35, DOI 10.1016/0167-6423(91)90036-W
   Friedman D.P., 2001, ESSENTIALS PROGRAMMI, V2nd
   Kiczales G., 2001, ECOOP 2001 - Object-Oriented Programming. 15th European Conference. Proceedings (Lecture Notes in Computer Science Vol.2072), P327
   Laddad R., 2003, ACTION PRACTICAL ASP
   Lagaisse B, 2006, LECT NOTES COMPUT SC, V4290, P42
   LIEBERHERR K, 2004, P ACM INT C ASPECT O
   Masuhara H, 2003, LECT NOTES COMPUT SC, V2622, P46
   Masuhara H, 2003, LECT NOTES COMPUT SC, V2743, P2
   MENU M, 2003, TECHNISCHE UNIVERSIT
   NISHIZAWA M, AOP IN LIEBERHERR, V1151, P7
   Popovici Andrei., 2003, AOSD 03, P100
   RAJAN H, 2003, HELSINKI FINLAND, P297
   TANTER E, 2008, P ACM INT C ASPECT O, V4025, P168
   TANTER E, 2009, P ACM DYNAMIC LANGUA, P3
   TANTER E, 2006, AOP P IFIP INT C DIS, P316
   TANTER E, 2009, SCHEME FUNCTIONAL PR
   Tanter É, 2009, AOSD'09: 8TH INTERNATIONAL CONFERENCE ON ASPECT-ORIENTED SOFTWARE DEVELOPMENT, P27
   Tanter É, 2008, J UNIVERS COMPUT SCI, V14, P3498
   TRUYEN E, 2006, T ASPECT ORIENTED SO, V4242, P147
   UBAYASHI NT, 2005, INT C AUTOMATED SOFT, P194
   Wand M, 2004, ACM T PROGR LANG SYS, V26, P890, DOI 10.1145/1018203.1018208
   2006, ACM SIGPLAN NOTICES, V41
   1998, SUN MICROSYSTEMS REM
NR 32
TC 2
Z9 2
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 1
PY 2010
VL 75
IS 12
BP 1235
EP 1261
DI 10.1016/j.scico.2010.06.011
PG 27
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 682WM
UT WOS:000284433700003
OA Bronze
DA 2024-07-18
ER

PT J
AU Denny, JE
   Malloy, BA
AF Denny, Joel E.
   Malloy, Brian A.
TI The IELR(1) algorithm for generating minimal LR(1) parser tables for
   non-LR(1) grammars with conflict resolution
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Grammarware; Canonical LR; LALR; Minimal LR; Yacc; Bison
ID LANGUAGES
AB There has been a recent effort in the literature to reconsider grammar-dependent software development from an engineering point of view. As part of that effort, we examine a deficiency in the state of the art of practical LR parser table generation. Specifically, LALR sometimes generates parser tables that do not accept the full language that the grammar developer expects, but canonical LR is too inefficient to be practical particularly during grammar development. In response, many researchers have attempted to develop minimal LR parser table generation algorithms. In this paper, we demonstrate that a well known algorithm described by David Pager and implemented in Menhir, the most robust minimal LR(1) implementation we have discovered, does not always achieve the full power of canonical LR(1) when the given grammar is non-LR(1) coupled with a specification for resolving conflicts. We also detail an original minimal LR(1) algorithm, IELR(1) (Inadequacy Elimination LR(1)), which we have implemented as an extension of GNU Bison and which does not exhibit this deficiency. Using our implementation, we demonstrate the relevance of this deficiency for several real-world parser specifications, and we demonstrate the feasibility of IELR(1). Finally, we demonstrate that, if canonical LR(1) were employed instead, grammar development would be severely impeded regardless of the power of the computer hardware. (C) 2009 Elsevier B.V. All rights reserved.
C1 [Denny, Joel E.; Malloy, Brian A.] Clemson Univ, Sch Comp, Clemson, SC 29634 USA.
C3 Clemson University
RP Denny, JE (corresponding author), Clemson Univ, Sch Comp, Clemson, SC 29634 USA.
EM jdenny@cs.clemson.edu; malloy@cs.clemson.edu
OI Denny, Joel/0000-0001-9699-5599
CR Aho A.V., 1986, COMPILERS PRINCIPLES
   [Anonymous], 1988, PARSING THEORY
   DENNY JE, 2008, SAC 08
   DEREMER F, 1982, ACM T PROGR LANG SYS, V4, P615, DOI 10.1145/69622.357187
   Hopcroft J.E., 1979, Introduction to Automata Theory, Languages, and Computation
   Johnson StevenC., 1979, UNIX PROGRAMMERS MAN, V2, P353
   Klint P, 2005, ACM T SOFTW ENG METH, V14, P331, DOI 10.1145/1072997.1073000
   Klint Paul, 1994, Tech. Rep. 126-1994, P1
   KNUTH DE, 1965, INFORM CONTROL, V8, P607, DOI 10.1016/S0019-9958(65)90426-2
   LAMMEL R, 2001, FASE
   Mernik M, 2005, ACM COMPUT SURV, V37, P316, DOI 10.1145/1118890.1118892
   PAGER D, 1977, ACTA INFORM, V7, P249, DOI 10.1007/BF00290336
   PAGER D, 1977, INFORM SCIENCES, V12, P19, DOI 10.1016/0020-0255(77)90036-6
   PAGER D, 1973, STOC 73
   PEPPER P, 1999, 9905 TU BERL
   SPECTOR D, 1988, SIGPLAN NOTICES, V23, P143, DOI 10.1145/57669.57684
   Spector D., 1981, SIGPLAN Notices, V16, P58, DOI 10.1145/947874.947879
   Tomita Masaru., 1985, EFFICIENT PARSING NA
   Van Den Brand M., 1996, ACM Transactions on Software Engineering and Methodology, V5, P1, DOI 10.1145/226155.226156
   VANDENBRAND MGJ, 1998, IWPC
   Visser Eelco, 1997, Syntax Definition for Language Prototyping
NR 21
TC 4
Z9 4
U1 0
U2 1
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 1
PY 2010
VL 75
IS 11
SI SI
BP 943
EP 979
DI 10.1016/j.scico.2009.08.001
PG 37
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 641MD
UT WOS:000281129600003
DA 2024-07-18
ER

PT J
AU Rinderknecht, C
   Volanschi, N
AF Rinderknecht, Christian
   Volanschi, Nic
TI Theory and practice of unparsed patterns for metacompilation
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Pattern matching; Tree pattern; Code checking; Metacompilation; Formal
   methods
AB Several software development tools support the matching of concrete syntax user-supplied patterns against the application source code, allowing the detection of invalid, risky, inefficient or forbidden constructs. When applied to compilers, this approach is called metacompilation. These patterns are traditionally parsed into tree patterns, i.e., fragments of abstract-syntax trees with metavariables, which are then matched against the abstract-syntax tree corresponding to the parsing of the Source code. Parsing the patterns requires extending the grammar of the application programming language with metavariables, which can be difficult, especially in the case of legacy tools. Instead, we propose a novel matching algorithm which is independent of the programming language because the patterns are not parsed and, as such, are called unparsed patterns. It is as efficient as the classic pattern matching while being easier to implement. By giving tip the possibility of static checks that parsed patterns usually enable, it can be integrated within ally existing utility based on abstract-syntax trees at a low cost. We present an in-depth coverage of the practical and theoretical aspects of this new technique by describing a working minimal patch for the GNU C compiler, together with a small standalone prototype punned Matchbox, and by lying out a complete formalisation, including mathematical proofs of key algorithmic properties, like correctness and equivalence to the classic matching. (C) 2009 Elsevier B.V. All rights reserved.
C1 [Rinderknecht, Christian] Konkuk Univ, Seoul 143701, South Korea.
C3 Konkuk University
RP Rinderknecht, C (corresponding author), Konkuk Univ, Seoul 143701, South Korea.
EM rinderkn@konkuk.ac.kr; nic.volanschi@free.fr
CR BACK G, 2003, SYSTEM CONSTRUCTING
   BEYER D, 2004, 6 ACM SIGPLAN INT C
   BEYER D, 2003, 8 ACM SIGPLAN INT C
   BRAVENBOER M, 2005, LNCS, V3676
   BURSON S, 1990, 14 ACM C COMP SOFTW
   CHEN H, 2002, 9 ACM C COMP COMM SE
   De Roover C., 2007, P 2007 ACM SIGPLAN S, P92
   EARLEY J, 1970, COMMUN ACM, V13
   ENGLER D, 4 S OP SYST DES IMPL
   GRISWOLD W, 1996, 4 INT WORKSH PROGR C
   HEERING J, 1992, SYNTAX DEFINITION FO
   HENZINGER T, 2002, 14 INT C COMP AID VE, V2404
   Luccio F., 2001, TR0114 U PIS
   MCPEAK S, 2004, C COMP CONSTR CC APR
   OLENDER K, 1990, IEEE T SOFTW ENG, V16
   PAUL S, 1992, C CTR ADV STUD COLL, V1
   PETERSON MS, 1978, J COMPUT SYST SCI, V16
   SCOTT E, 2007, ACTA INFORMAT, V44
   SELLINK A, 1998, WORK C REV ENG WCRE
   Tomita Masaru., 1985, EFFICIENT PARSING NA
   van den Brand MGJ, 2000, SOFTWARE PRACT EXPER, V30, P259, DOI 10.1002/(SICI)1097-024X(200003)30:3<259::AID-SPE298>3.0.CO;2-Y
   Van den Brand MGJ, 2002, ACM T PROGR LANG SYS, V24, P334, DOI 10.1145/567097.567099
   Visser E, 2002, LECT NOTES COMPUT SC, V2487, P299
   VOLANSCHI N, 2006, 8 ACM SIGPLAN S PRIN
   ZOOK D, 2004, LNCS, V3286
NR 25
TC 1
Z9 1
U1 0
U2 0
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR
PY 2010
VL 75
IS 3
BP 85
EP 105
DI 10.1016/j.scico.2009.09.011
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 561LD
UT WOS:000274977800001
OA Bronze
DA 2024-07-18
ER

PT J
AU Jouault, F
   Allilaire, F
   Bézivin, J
   Kurtev, I
AF Jouault, Frederic
   Allilaire, Freddy
   Bezivin, Jean
   Kurtev, Ivan
TI ATL:: A model transformation tool
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT International Workshop on Advanced Software Development Tools and
   Techniques
CY JUL, 2008
CL Paphos, CYPRUS
DE model engineering; model transformation; M2M (model-to-model
   transformation)
AB In the context of Model Driven Engineering, models are the main development artifacts and model transformations are among the most important operations applied to models. A number of specialized languages have been proposed, aimed at specifying model transformations. Apart from the software engineering properties of transformation languages, the availability of high quality tool support is also of key importance for the industrial adoption and ultimate success of MDE. In this paper we present ATL: a model transformation language and its execution environment based on the Eclipse framework. ATL tools provide support for the major tasks involved in using a language: editing, compiling, executing, and debugging. (c) 2008 Elsevier B.V. All rights reserved.
C1 [Jouault, Frederic; Allilaire, Freddy; Bezivin, Jean] Univ Nantes, ATLAS INRIA & LINA, F-44322 Nantes, France.
   [Kurtev, Ivan] Univ Twente, Software Engn Grp, NL-7500 AE Enschede, Netherlands.
C3 Nantes Universite; University of Twente
RP Jouault, F (corresponding author), Univ Nantes, ATLAS INRIA & LINA, 2 Rue de la Houssiniere,BP 92208, F-44322 Nantes, France.
EM frederic.jouault@univ-nantes.fr; freddy.allilaire@univ-nantes.fr;
   jean.bezivin@univ-nantes.fr; kurtev@ewi.utwente.nl
OI Kurtev, Ivan/0009-0003-3783-405X
CR AGRAWAL A, 2005, J SOFTWARE SYS UNPUB
   [Anonymous], P MOD TRANSF PRACT W
   [Anonymous], PTC031014 OMG
   [Anonymous], 2003, Eclipse Modeling Framework
   [Anonymous], AD20020410 OMG
   Bézivin J, 2005, LECT NOTES COMPUT SC, V3599, P33
   DIRUSCIO D, 2006, 0602 LINA U NANT
   JOUAULT F, 2006, P ACM S APPL COMP SA
   Jouault F., 2006, KM3: a DSL for metamodel specification
   *OMG MOF, 1997, AD970814 OMG
   Varró D, 2002, SCI COMPUT PROGRAM, V44, P205, DOI 10.1016/S0167-6423(02)00039-4
   NETBEANS META DATA R
NR 12
TC 540
Z9 578
U1 0
U2 19
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 1
PY 2008
VL 72
IS 1-2
BP 31
EP 39
DI 10.1016/j.scico.2007.08.002
PG 9
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 330AX
UT WOS:000257912800004
OA Green Published, Bronze
DA 2024-07-18
ER

PT J
AU Singer, J
   Kirkham, C
AF Singer, Jeremy
   Kirkham, Chris
TI Dynamic analysis of Java program concepts for visualization and
   profiling
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT International Conference on Principles and Practices of Programming in
   Java
CY 2006
CL Mannheim, GERMANY
DE concept assignment; dynamic analysis; jikes RVM
ID CONCEPT ASSIGNMENT
AB Concept assignment identifies units of source code that are functionally related, even if this is not apparent from a syntactic point of view. Until now, the results of concept assignment have only been used for static analysis, mostly of program source code. This paper investigates the possibility of using concept information within a framework for dynamic analysis of programs. The paper presents two case studies involving a small Java program used in a previous research exercise, and a large Java virtual machine (the popular Jikes RVM system). These studies investigate two applications of dynamic concept information: visualization and profiling. The paper demonstrates two different styles of concept visualization, which show the proportion of overall time spent in each concept and the sequence of concept execution, respectively. The profiling study concerns the interaction between runtime compilation and garbage collection in Jikes RVM. For some benchmark cases, we are able to obtain a significant reduction in garbage collection time. We discuss how this phenomenon might be harnessed to optimize the scheduling of garbage collection in Jikes RVM. (C) 2007 Elsevier B.V. All rights reserved.
C1 [Singer, Jeremy; Kirkham, Chris] Univ Manchester, Sch Comp Sci, Manchester M13 9PL, Lancs, England.
C3 University of Manchester
RP Singer, J (corresponding author), Univ Manchester, Sch Comp Sci, Manchester M13 9PL, Lancs, England.
EM jsinger@cs.man.ac.uk; chris@cs.man.ac.uk
OI Singer, Jeremy/0000-0001-9462-6802
CR Alpern B, 2005, IBM SYST J, V44, P399, DOI 10.1147/sj.442.0399
   Azevedo A., 1999, Proceedings of the ACM 1999 Java Grande Conference, P142, DOI 10.1145/304065.304115
   BIGGERSTAFF TJ, 1994, COMMUN ACM, V37, P72, DOI 10.1145/175290.175300
   BROWN RHF, 2006, P WORKSH IMPL COMP O
   BUYTAERT D, 2006, T HIGH PERFORMANCE E, V1, P52
   De Pauw W, 2002, LECT NOTES COMPUT SC, V2269, P151
   Ding Chen., 2005, Proceedings of the 2005 Workshop on Memory System Performance, MSP'05, P62
   DOURISH P, 2002, P ICDMS WORKSH VIS C
   Duesterwald E, 2003, 12TH INTERNATIONAL CONFERENCE ON PARALLEL ARCHITECTURES AND COMPILATION TECHNIQUES, PROCEEDINGS, P220
   Eng D., 2002, PROC ACM SIGPLAN SIG, P43
   GEORGES A, 2004, P 19 ANN ACM SIGPLAN, P270
   Gold N., 2002, IEE Proceedings-Software, V149, P103, DOI 10.1049/ip-sen:20020549
   Gold N, 2001, PROC IEEE INT CONF S, P545, DOI 10.1109/ICSM.2001.972768
   Gold NE, 2005, SOFTWARE PRACT EXPER, V35, P977, DOI 10.1002/spe.664
   GOLM M, 2002, P 2002 JOINT ACM ISC, P230
   Hauswirth M., 2004, OOPSLA 04 P 19 ANN A, P251
   Kiczales G, 1997, LECT NOTES COMPUT SC, V1241, P220, DOI 10.1007/BFb0053381
   Kiczales Gregor., 2001, Proceedings of the 15th European Conference on Object-Oriented Programming, P327
   Lipasti MikkoH., 1996, ACM SIGPLAN NOTICES, P138, DOI DOI 10.1145/248209.237173
   Morrisett G, 1999, ACM T PROGR LANG SYS, V21, P527, DOI 10.1145/319301.319345
   Nagpurkar P., 2004, P 3 INT S PRINCIPLES, P27
   Nethercote N., 2003, ELECTRON NOTES THEOR, V89, P1
   POPOVICI A., 2002, P 1 INT C ASPECT ORI, P141
   PRINTEZIS T, 2002, P OOPSLA, P343
   Reiss S.P., 2005, Proceedings of the 2005 ACM Symposium on Software Visualization, P115, DOI DOI 10.1145/1056018.1056034
   REISS SP, P IEEE C SOFTW VIS, P123
   Sazeides Y, 1997, INT SYMP MICROARCH, P248, DOI 10.1109/MICRO.1997.645815
   SEVITSKY G, 2001, P TOOLS EUR C
   Singer J, 2005, FIFTH IEEE INTERNATIONAL WORKSHOP ON SOURCE CODE ANALYSIS AND MANIPULATION, PROCEEDINGS, P75, DOI 10.1109/SCAM.2005.4
   Singer J, 2006, ELECTRON NOTES THEOR, V164, P137, DOI 10.1016/j.entcs.2006.07.016
   Singer Jeremy, 2006, PPPJ, P31, DOI [10.1145/1168054.1168060, DOI 10.1145/1168054.1168060]
   WEIDENDORFER J, 2005, KCACHEGRIND PROFILIN
   WILSON PR, 1989, C OBJECT ORIENTED PR, P23
NR 33
TC 2
Z9 3
U1 0
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 1
PY 2008
VL 70
IS 2-3
BP 111
EP 126
DI 10.1016/j.scico.2007.07.006
PG 16
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 278EJ
UT WOS:000254266600003
OA Bronze
DA 2024-07-18
ER

PT J
AU Maurer, WD
AF Maurer, Ward Douglas
TI Generalized structured programs and loop trees
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE generalized structured program; GSP; loop trees; reducible graphs;
   overlapping loops; strongly connected components
ID FLOW DIAGRAMS; ALGORITHM; LANGUAGES
AB Any directed graph, even a flow graph representing "spaghetti code", is shown here to have at least one loop tree, which is a structure of loops within loops in which no loops overlap. The nodes of the graph may be rearranged in such a way that, with respect to their new order, every edge proceeds in the forward direction except for the loopbacks. Here a loopback goes from somewhere in a loop L to the head of L. We refer to such a rearrangement as a generalized structured program, in which forward goto statements remain unrestricted. Like a min-heap or a max-heap, a loop tree has an array representation, without pointers; it may be constructed in time no worse than O(n(2)) for any program written in this fashion. A scalable version of this construction uses a label graph, whose only nodes are the labels of the given program. A graph has a unique loop tree if and only if it is reducible. (c) 2007 Elsevier B.V. All rights reserved.
C1 George Washington Univ, Dept Comp Sci, Washington, DC 20052 USA.
C3 George Washington University
RP Maurer, WD (corresponding author), George Washington Univ, Dept Comp Sci, Washington, DC 20052 USA.
EM maurer@gwu.edu
CR Aho A., 1988, Compilers - Principles, Techniques and Tools
   Aho A. V., 1983, DATA STRUCTURES ALGO
   AHO AV, 1972, THEORY PARSING TRANS, V2, P915
   ALLEN FE, 1976, COMMUN ACM, V19, P137, DOI 10.1145/360018.360025
   ALLEN FE, 1974, P IFIP C 1974, P398
   [Anonymous], 1977, Flow Analysis of Computer Programs
   [Anonymous], 1979, Graph Algorithms
   APT KR, 1981, ACM T PROGR LANG SYS, V3, P431, DOI 10.1145/357146.357150
   BAKER BS, 1977, J ACM, V24, P98, DOI 10.1145/321992.321999
   BOHM C, 1966, COMMUN ACM, V9, P366, DOI 10.1145/355592.365646
   CHATY G, 1976, DISCRETE MATH, V16, P309, DOI 10.1016/S0012-365X(76)80003-9
   Cifuentes Cristina., 1994, Reverse Compilation Techniques
   Cormen Thomas H., 2001, INTRO ALGORITHMS
   CUNNINGHAM WH, 1980, CAN J MATH, V32, P734, DOI 10.4153/CJM-1980-057-7
   FLOYD RW, 1964, ACM, V7, P701
   Gabow HN, 2000, INFORM PROCESS LETT, V74, P107, DOI 10.1016/S0020-0190(00)00051-X
   GONDRAM M, 1984, GRAPHS ALGORITHMS
   Harary F., 1965, Structural Models: An Introduction to the Theory of Directed Graphs, V4
   Hecht M. S., 1972, SIAM Journal on Computing, V1, P188, DOI 10.1137/0201014
   HOHBERG W, 1989, DECOMPOSITION GRAPHS
   HOROWITZ E., 1983, FUNDAMENTALS DATA ST
   Knuth D.E., 1974, J COMBIN THEORY, V16, P42, DOI DOI 10.1016/0095-8956(74)90093-8
   Konig Denes., 1990, Theory of finite and infinite graphs
   Lee Y.-F., 1990, Proceedings of Supercomputing '90 (Cat. No.90CH2916-5), P942, DOI 10.1109/SUPERC.1990.130122
   LICHTBLAU U, 1991, LECT NOTES COMPUT SC, V532, P538, DOI 10.1007/BFb0017411
   LUCE D, 1952, AM J MATH, V74, P701
   MARLOWE TJ, 1990, CONFERENCE RECORD OF THE SEVENTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P184, DOI 10.1145/96709.96728
   Maurer WD, 2006, IEEE INT CONF AUTOM, P357
   Maurer WD, 2006, LECT NOTES COMPUT SC, V4006, P191
   MAURER WD, 2005, TRGWUCS05004 GEORG W
   OULSNAM G, 1982, COMPUT J, V25, P379, DOI 10.1093/comjnl/25.3.379
   Reingold E.M., 1977, Combinatorial Algorithms
   RYDER BG, 1988, ACM T PROGR LANG SYS, V10, P1, DOI 10.1145/42192.42193
   RYDER BG, 1986, COMPUT SURV, V18, P277, DOI 10.1145/27632.27649
   RYDER BG, 1979, IEEE T SOFTWARE ENG, V5, P216, DOI 10.1109/TSE.1979.234183
   SHARIR M, 1981, COMPUT MATH APPL, V7, P67, DOI 10.1016/0898-1221(81)90008-0
   Tarjan R., 1972, SIAM Journal on Computing, V1, P146, DOI 10.1137/0201010
   TARJAN RE, 1983, INFORM PROCESS LETT, V17, P37, DOI 10.1016/0020-0190(83)90088-1
   TARJAN RE, 1981, J ACM, V28, P594, DOI 10.1145/322261.322273
   VANLEEUWEN J, 1990, HDB THEORETICAL COMP, P570
   WILLIAMS MH, 1978, COMPUT J, V21, P161, DOI 10.1093/comjnl/21.2.161
NR 41
TC 2
Z9 3
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUL 1
PY 2007
VL 67
IS 2-3
BP 223
EP 246
DI 10.1016/j.scico.2007.02.002
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 192AW
UT WOS:000248174100004
DA 2024-07-18
ER

PT J
AU Peschanski, F
   Darrasse, A
   Guts, N
   Bobbio, J
AF Peschanski, Frederic
   Darrasse, Alexis
   Guts, Nataliya
   Bobbio, Jeremy
TI Coordinating mobile agents in interaction spaces
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 4th International Workshop on the Foundations of Coordination Languages
   and Software Architectures (FOCLASA'05)
CY AUG   27, 2005
CL San Francisco, CA
DE mobile agents; process algebras; coordination languages; geometry
ID LANGUAGE
AB We present a kernel coordination language for mobile agent systems that considers as first-class citizens both the agents and the channels they use to interact with each other. Channels implement distributed, asynchronous communications with FIFO ordering and multicast routing. Features related to mobility include agent migration as well as remote cloning. Most importantly, a virtual form of channel mobility inspired by the pi-calculus is also supported. This expressive feature allows mobile agents to adapt dynamically to their changing environment. The language semantics, presented formally, is based on a geometrical model named the Interaction Spaces. This provides an intuitive interpretation of the agent features and capabilities in terms of combined spatial projections and transformations. Through spatial composition, we show that standard labeled transition systems and bisimulation-based semantics may be defined above the geometry, enabling reasoning and formal verification. Finally, we describe prototype implementations of the proposed model and language. (c) 2007 Elsevier B.V. All rights reserved.
C1 Univ Paris 06, LIP6, Paris, France.
C3 Sorbonne Universite
RP Peschanski, F (corresponding author), Univ Paris 06, LIP6, Paris, France.
EM Frederic.Peschanski@lip6.fr
OI Peschanski, Frederic/0000-0002-4206-3283
CR Agha GulA., 1997, J FUNCT PROGRAM, V7, P1
   Amadio Roberto, 2001, LNCS, V1119
   AMY L, 2001, ICDCS, P524
   [Anonymous], 1999, Communicating and Mobile Systems: The Calculus
   Arbab F, 2004, MATH STRUCT COMP SCI, V14, P329, DOI 10.1017/S0960129504004153
   ARBAB F, 2001, ELECT NOTES THEORETI, V54
   Cardelli L, 2000, THEOR COMPUT SCI, V240, P177, DOI 10.1016/S0304-3975(99)00231-5
   De Nicola R, 1998, IEEE T SOFTWARE ENG, V24, P315, DOI 10.1109/32.685256
   Ene Christian, 1999, LNCS, V1684
   Fournet C., 1996, LECT NOTES COMPUTER, V1119, P406
   GELERNTER D, 1992, COMMUN ACM, V35, P96, DOI 10.1145/129630.129635
   Harris Tim., 2005, PPoPP '05: Proceedings of the tenth ACM SIGPLAN symposium on Principles and practice of parallel programming, P48, DOI DOI 10.1145/1065944.1065952
   Hennessy M, 2005, ACTA INFORM, V42, P227, DOI 10.1007/s00236-005-0178-y
   MASUYAMA T, 2004, P MOB DISTR COMP MDC
   Merro M., 1998, LNCS, V1443
   PADOPOULOS GA, 1998, COORDINATION MODELS, V46
   PESCHANSKI F, 2005, ENTCS, V154, P63
   PESCHANSKI F, 2006, P 2 INT C VIRT EX EN, P57
   Pierce B., 1996, Mathematical Structures in Computer Science, V6, P409
   Scholten J., 2005, P 2005 ACM S APPL CO, P436
   UNYPOTH A, 2001, POPL 2001, V36
NR 21
TC 0
Z9 1
U1 0
U2 2
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAY 15
PY 2007
VL 66
IS 3
BP 246
EP 265
DI 10.1016/j.scico.2007.01.011
PG 20
WC Computer Science, Software Engineering
WE Conference Proceedings Citation Index - Science (CPCI-S); Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 183OI
UT WOS:000247581700005
OA Bronze
DA 2024-07-18
ER

PT J
AU Atanassow, F
   Jeuring, J
AF Atanassow, Frank
   Jeuring, Johan
TI Customizing an XML-Haskell data binding with type isomorphism inference
   in Generic Haskell
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 7th International Conference on Mathematics of Program Construction
CY JUL 12-14, 2004
CL Stirling, SCOTLAND
SP Cornell Univ, Univ Stirling, Formal Aspects Comp Sci, Specialist Grp
DE Generic programming; polytypic programming; Generic Haskell;
   isomorphisms; XML Schema
AB This paper introduces a type-preserving XML Schema-Haskell data binding (or, translation) UUXML, and shows how to customize it by exploiting the theory of canonical isomorphisms to automatically infer coercions between the machine-generated types and an equivalent, more natural, user-defined set of types. We show how to implement the inference mechanism in Generic Haskell. (c) 2006 Elsevier B.V. All rights reserved.
C1 CWI, Ctr Math & Comp Sci, NL-1090 GB Amsterdam, Netherlands.
   Univ Utrecht, Inst Comp & Informat Sci, NL-3508 TB Utrecht, Netherlands.
   Open Univ, Heerlen, Netherlands.
C3 Utrecht University; Open University Netherlands
RP Atanassow, F (corresponding author), CWI, Ctr Math & Comp Sci, POB 4079, NL-1090 GB Amsterdam, Netherlands.
EM F.Atanassow@cwi.nl; johanj@cs.uu.nl
CR [Anonymous], XML INF SET
   [Anonymous], 2003, Higher operads, higher categories
   [Anonymous], 1997, The Definition of Standard ML
   [Anonymous], 2003, Haskell 98 language and libraries: the revised report
   Atanassow F, 2004, LECT NOTES COMPUT SC, V3057, P71
   Atanassow F, 2004, LECT NOTES COMPUT SC, V3125, P32
   ATANASSOW F, 2003, UUCS2003023
   ATANASSOW F, 2003, O 7 BRAZ S PROGR LAN
   BAARS AI, 2001, P 2001 ACM SIGPLAN H, P171
   Balat V, 1999, LECT NOTES COMPUT SC, V1683, P250
   BENZAKEN V, 2003, P 2003 ACM SIGPLAN H
   BEYLIN I, 1995, TYPES, P47
   BROWN A, 2001, P WWW10 MAY 2001
   Bruce K.B., 1992, Math. Struct. Comput. Sci., V2, P231
   Coelho J, 2003, LECT NOTES COMPUT SC, V2562, P273
   Di Cosmo Roberto, 1995, Isomorphisms of types: from.- calculus to information retrieval and language design
   Erwig M, 2003, LECT NOTES COMPUT SC, V2814, P342
   GAPEYEV V, 2003, ECOOP 2003
   Hermida C, 2000, ADV MATH, V151, P164, DOI 10.1006/aima.1999.1877
   Hinze R, 2003, LECT NOTES COMPUT SC, V2793, P1
   Hinze R, 2002, LECT NOTES COMPUT SC, V2386, P148
   HOSOYA H, 2000, LECT NOTES COMPUTER, V1997, P226
   Hutton G, 1998, J FUNCT PROGRAM, V8, P437, DOI [10.1017/S0956796898003050, DOI 10.1017/S0956796898003050]
   LAROY X, 2003, OBJECTIVE CAML SYSTE
   Leijen D, 1999, USENIX ASSOCIATION PROCEEDINGS OF THE 2ND CONFERENCE ON DOMAIN-SPECIFIC LANGUAGES (DSL'99), P109, DOI 10.1145/331963.331977
   LEINSTER TSH, 2000, THESIS TRINITY COLLE
   LOH A, 2003, P INT C FUNCT PROGR
   LOH A, 2004, THESIS UTRECHT U
   Mac Lane S., 1963, RICE U STUDIES, V49, P28
   MCADAM B, 2001, TRENDS FUNCTIONAL PR, V3
   MEIJER E, 1999, XMLAMBDA FUNCTIONAL
   Metz E, 2003, DR DOBBS J, V28, P26
   *OASIS, 2001, RELAX NG
   OGBUJI U, 2003, XML DATA BINDINGS PY
   OGBUJI U, 2005, EASEXML PYTHON DATA
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Rahm E, 2001, VLDB J, V10, P334, DOI 10.1007/s007780100057
   RITTRI M, 1993, RAIRO-INF THEOR APPL, V27, P523, DOI 10.1051/ita/1993270605231
   RITTRI M, 1990, C AUTOMATED DEDUCTIO, P603
   SHIELDS M, 2001, 28 ANN ACM SIGPLAN S, P261
   SOLOVIEV S, 1993, LECT NOTES ARTIF INT, V698, P360
   *SUN MICR, 2003, JAV ARCH XML BIND JA
   THATTE SR, 1991, LNCS, V523, P29
   Thiemann P, 2002, J FUNCT PROGRAM, V12, P435, DOI 10.1017/S0956796802004392
   *W3C, 1999, XSL TRANSF 1 0
   *W3C, 2001, XML SHCEM DAT 2
   *W3C, 2001, SML SCHEM FORM DESCR
   *W3C, 1998, XML
   *W3C, 2001, XML SCHEM PRIM 0
   *W3C, 2001, XML SCHEM STRUCT 1
   *W3C, 2005, XQUER 1 0 XML QUER L
   Wallace Malcolm., 1999, ICFP 99, P148
   [No title captured]
NR 53
TC 1
Z9 2
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR 15
PY 2007
VL 65
IS 2
SI SI
BP 72
EP 107
DI 10.1016/j.scico.2006.01.005
PG 36
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 144YK
UT WOS:000244832300002
OA Green Submitted, Green Published
DA 2024-07-18
ER

PT J
AU Akhlaki, KB
   Tuñón, MIC
   Terriza, JAH
   Morales, LEM
AF Akhlaki, K. Benghazi
   Tunon, M. I. Capel
   Terriza, J. A. Holgado
   Morales, L. E. Mendoza
TI A methodological approach to the formal specification of real-time
   systems by transformation of UML-RT design models
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE CSP plus T; formal specification; real-time software systems; UML-RT
AB By following a methodological approach, introduced in a previous work, a correct system specification in terms of CSP+T process algebra is systematically obtained from the UML-RT model of a real-time software system. Among other contributions, this article aims at integrating collaboration diagrams into our approach to facilitate the specification of capsules in UML-RT design models. Thus, an improved systematic transformation procedure for deriving a correct and complete formal system specification of real-time systems is established here. Temporal requirements integration in the design and system specification stages of a real-time system is also addressed, so that the approach now opens up the possibility of carrying out scheduling and dependability analysis at the design phase of the system development life cycle for hard real-time systems. The article also discusses a practical application to present a systematic transformation from a UML-RT model of a well known manufacturing-industry paradigmatic case, the "Production Cell". (c) 2006 Elsevier B.V. All rights reserved.
C1 Univ Granada, Dept Lenguajes & Sistemas Informat, ETSI Informat & Telecomunicac, E-18071 Granada, Spain.
   Univ Simon Bolivar, Dept Proc & Sistemas, Caracas 1080A, Venezuela.
C3 University of Granada; Simon Bolivar University
RP Akhlaki, KB (corresponding author), Univ Granada, Dept Lenguajes & Sistemas Informat, ETSI Informat & Telecomunicac, E-18071 Granada, Spain.
EM benghazi@ugr.es; mcapel@ugr.es; jholgado@ugr.es; lmendoza@usb.ve
RI Holgado Terriza, Juan Antonio/D-9995-2012; Morales, Luis
   Mendoza/AAN-9128-2020; Benghazi, Kawtar/ABG-7868-2020; Morales, Luis E
   Mendoza/E-9520-2010; Capel Tunon, Manuel Isidoro/C-2435-2012
OI Holgado Terriza, Juan Antonio/0000-0002-8031-1276; Morales, Luis
   Mendoza/0000-0002-5081-7559; Benghazi, Kawtar/0000-0002-6677-7301;
   Morales, Luis E Mendoza/0000-0002-5081-7559; Capel Tunon, Manuel
   Isidoro/0000-0003-2449-4394
CR [Anonymous], 1997, The Theory and Practice of Concurrency
   [Anonymous], 1985, INT SERIES COMP SCI
   *BUND INN, 2004, V MOD XT TEAM V MOD
   CAPEL MI, 2005, IJIT, V2, P137
   ENGELS G, 2001, ESEC SIGSOFT FSE, P186
   ERICKSON J, 2005, P 11 AM C INF SYST A, P3067
   EVANS A, FDN UNIFIED MODELING
   FISCHER C, 2001, LNCS, V2029, P91
   Kim SK, 1999, LECT NOTES COMPUT SC, V1723, P83
   Kitchenham B. A., 1997, Software Engineering Notes, V22, P10, DOI 10.1145/270849.270851
   Küster JM, 2001, FOURTH IEEE INTERNATIONAL SYMPOSIUM ON OBJECT-ORIENTED REAL-TIME DISTRIBUTED COMPUTING, PROCEEDINGS, P31, DOI 10.1109/ISORC.2001.922815
   LI X, 2005, LECT NOTES COMPUTER, V1723, P661
   LINDNER T, 1995, LNCS, V891, P7
   Moller M, 2004, LECT NOTES COMPUT SC, V2999, P267
   *OBJ MAN GROUP, 2004, UML SUP SPEC VERS 2
   Ramos R, 2005, LECT NOTES COMPUT SC, V3535, P99
   SELIC B, 1998, UML MODELING COMPLEX
   Selic B., 1994, REAL TIME OBJECT ORI
   WOODCOCK J, 2002, LECT NOTES COMPUTER, V2272, P184, DOI DOI 10.1007/3-540-45648-1_
   ZIC JJ, 1994, ACM T PROGR LANG SYS, V16, P1661, DOI 10.1145/197320.197322
NR 20
TC 14
Z9 16
U1 0
U2 9
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR 1
PY 2007
VL 65
IS 1
BP 41
EP 56
DI 10.1016/j.scico.2006.08.005
PG 16
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 144CB
UT WOS:000244771700006
DA 2024-07-18
ER

PT J
AU Neverov, G
   Roe, P
AF Neverov, Gregory
   Roe, Paul
TI Experiences with an object-oriented, multi-stage language
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 1st MetalOCaml Workshop
CY OCT, 2004
CL Vancouver, CANADA
SP Natl Sci Fdn
DE multi-stage languages; object-oriented programming; cross-stage
   persistence
AB Metaphor is a multi-stage programming language extension to an imperative, object-oriented language in the style of C# or Java. This paper discusses some issues we faced when applying multi-stage language design concepts to an imperative base language and run-time environment. The issues range from dealing with pervasive references and open code to garbage collection and implementing cross-stage persistence. (c) 2006 Elsevier B.V. All rights reserved.
C1 Queensland Univ Technol, Sch Sofware Engn & Data Commun, Brisbane, Qld, Australia.
C3 Queensland University of Technology (QUT)
RP Neverov, G (corresponding author), Queensland Univ Technol, Sch Sofware Engn & Data Commun, Brisbane, Qld, Australia.
EM g.neverov@qut.edu.au; p.roe@qut.edu.au
CR BATORY D, 1998, P SOFTW REUS 5 INT C
   CALCAGNO C, 2003, P GEN PROGR COMP ENG
   CALCAGNO C, 2004, P PROGR LANG SYST 13
   CALCAGNO C, 2000, P SEM APPL IMPL PROG
   CALCAGNO C, 2002, BYTECODE COMPILED TY
   CALCAGNO C, 2003, J FUNCT PROGRAM, V13
   FERRARI GL, 2004, MAT STRUCT COMPUT SC, V14
   GLUCK R, 1999, P PART EV PRACT THEO
   HATCLIFF J, 1999, P PART EV PRACT THEO
   KAMIN S, 2003, P COD GEN OPT 1 IEEE
   LEAGUE C, SCI COMPUT PROGRAM
   NEVEROV G, 2004, P GEN PROGR COMP ENG
   Oiwa Y., 2001, JSST WORKSH PROGR PR
   SCHULTZ U, 2003, T PROGRAM LANG SYST, V25
   SCHULTZ U, 2004, P GEN PROGR COMP ENG
   STARYNKEVITCH B, 2004, INF P MET WORKSH OCT
   Swadi K., 2006, PEPM, V06
   Taha W, 2003, LECT NOTES COMPUT SC, V3016, P30
   TAHA W, 1997, P PART EV SEM BAS PR
   TAHA W, 2003, P PRINC PROGR LANG 3
   TAHA W, 1999, CSE99007 OR GRAD I S
   Taha W., 1999, THESIS OREGON GRADUA
   TATSUBORI M, 1999, P REFL SOFTW ENG 1 O
   ZOOK D, 2004, 3 INT C OCT 2004 VAN
NR 24
TC 1
Z9 1
U1 0
U2 0
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP
PY 2006
VL 62
IS 1
BP 85
EP 94
DI 10.1016/j.scico.2006.05.002
PG 10
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 066UL
UT WOS:000239255500006
OA Bronze
DA 2024-07-18
ER

PT J
AU Gregg, D
   Beatty, A
   Casey, K
   Davis, B
   Nisbet, A
AF Gregg, D
   Beatty, A
   Casey, K
   Davis, B
   Nisbet, A
TI The case for virtual register machines
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 1st Workshop on Interpreters, Virtual Machines and Emulators (IVME 03)
CY JUN 12, 2003
CL San Diego, CA
DE interpreter; virtual machine; register architecture; stack architecture
AB Virtual machines (VMs) are a popular target for language implementers. A long-running question in the design of virtual machines has been whether stack or register architectures can be implemented more efficiently with an interpreter. Many designers favour stack architectures since the location of operands is implicit in the stack pointer. In contrast, the operands of register machine instructions must be specified explicitly. In this paper, we present a working system for translating stack-based Java virtual machine (JVM) code to a simple register code. We describe the translation process, the complicated parts of the JVM which make translation more difficult, and the optimisations needed to eliminate copy instructions. Experimental results show that a register format reduced the number of executed instructions by 34.88%, while increasing the number of bytecode loads by an average of 44.81%. Overall, this corresponds to an increase of 2.32 loads for each dispatch removed. We believe that the high cost of dispatches makes register machines attractive even at the cost of increased loads. (c) 2005 Elsevier B.V. All rights reserved.
C1 Trinity Coll Dublin, Dept Comp Sci, Dublin 2, Ireland.
   Manchester Metropolitan Univ, Dept Comp & Math, Manchester M1 5GD, Lancs, England.
C3 Trinity College Dublin; Manchester Metropolitan University
RP Trinity Coll Dublin, Dept Comp Sci, Dublin 2, Ireland.
EM David.Gregg@cs.tcd.ie; a.nisbet@mmu.ac.uk
OI Davis, Brian/0000-0002-5759-2655
CR BELL JR, 1973, COMMUN ACM, V16, P370, DOI 10.1145/362248.362270
   Bodik R, 1998, ACM SIGPLAN NOTICES, V33, P1, DOI 10.1145/277652.277653
   BULL M, 2000, 2 INT C EXH PRACT AP
   Costa VS, 1999, LECT NOTES COMPUT SC, V1702, P261
   DORAN R, 1978, COMPUTER ARCHITECTUR, V7, P25
   Dorward S, 1997, COMPCON IEEE, P245, DOI 10.1109/CMPCON.1997.584719
   Ertl M.A., 1995, STACK CACHING INTERP, P315
   Ertl MA, 2003, ACM SIGPLAN NOTICES, V38, P278, DOI 10.1145/780822.781162
   Ertl MA, 2002, SOFTWARE PRACT EXPER, V32, P265, DOI 10.1002/spe.434
   ERTL MA, 1996, THESIS TU WIEN AUSTR
   ERTL MA, 2001, LNCS, V2150, P403
   Gagnon E, 2003, LECT NOTES COMPUT SC, V2622, P170
   GAGNON E, 2001, 1 USENIX JAV VIRT MA
   GAGNON EM, 2002, THESIS MCGILL U
   Gregg D., 2001, P WORKSH JAV OPT STR
   Hoogerbrugge J, 1999, SOFTWARE PRACT EXPER, V29, P1005, DOI 10.1002/(SICI)1097-024X(199909)29:11<1005::AID-SPE270>3.0.CO;2-F
   Ierusalimschy R., 2003, Programming in Lua
   Kay A.C., 1996, HIST PROGRAMMING LAN, P511
   KEEDY JL, 1979, COMPUTER ARCHITECTUR, V7, P18
   KEEDY JL, 1978, COMPUTER ARCHITECTUR, V6, P22
   KOOPMAN PJ, 1989, STACK COMPUTERS
   Krasner G., 1983, SMALLTALK 80 BITS HI
   MCGLASHAN B, 1999, OOPSLA 99 WORKSH SIM
   MYERS GJ, 1977, COMPUT ARCHIT NEWS, V6, P7
   MYERS GJ, 1978, COMPUTER ARCHITECTUR, V6, P20
   Pemberton Steven, 1982, PASCAL IMPLEMENTATIO
   Piumarta I., 1998, PLDI 98, P291
   PROEBSTING TA, 1995, PRINCIPLES PROGRAMMI, P322
   SCHULTHESS P, 1977, COMPUTER ARCHITECTUR, V6, P24
   SITES R, 1978, COMPUTER ARCHITECTUR, V6, P19
   WALDRON J, 1999, P TECHN OBJ OR LANG
   1998, SIGPLAN 98 C PROGR L
NR 32
TC 6
Z9 7
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP
PY 2005
VL 57
IS 3
BP 319
EP 338
DI 10.1016/j.scico.2004.08.005
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 957YP
UT WOS:000231409800005
OA Green Accepted, Green Submitted
DA 2024-07-18
ER

PT J
AU Santone, A
   Vaglini, G
AF Santone, A
   Vaglini, G
TI Compositionality and locality for improving model checking in the
   selective mu-calculus
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE software engineering; model checking; temporal logic; compositionality;
   tableau system
AB Model checking is an automatic technique for verifying properties of finite concurrent systems on a structure that represents the states of the system; the crucial point of the technique is to avoid the computation of all the possible states. In this paper a method of proof for concurrent systems is presented that combines several approaches to meet the previous goal. The method exploits compositionality issues, in the presence of a parallel composition of processes, to compute at most the states of each sequential process, and not their combinations; moreover the method employs abstraction techniques to compute but a subset of the states of each sequential process. Finally, tableau-based proofs are used to allow the dynamic generation of the system states when needed, taking into account the goal of the formula verification. The tableau system is proved finite, sound and complete, for finite state systems. (C) 2004 Elsevier B.V. All rights reserved.
C1 Univ Pisa, Dipartimento Ingn Informaz, I-56126 Pisa, Italy.
   Univ Sannio, Fac Ingn, I-82100 Benevento, Italy.
C3 University of Pisa; University of Sannio
RP Univ Pisa, Dipartimento Ingn Informaz, Via Diotisalvi 2, I-56126 Pisa, Italy.
EM santone@unisannio.it; gigliola.vaglini@iet.unipi.it
CR ANDERSEN HR, 1994, IEEE S LOG, P144, DOI 10.1109/LICS.1994.316076
   Barbuti R, 1999, J COMPUT SYST SCI, V59, P537, DOI 10.1006/jcss.1999.1660
   BARBUTI R, 1997, P FORTE 10 PSTV 17 9, P519
   Bensalem Saddek., 1992, International Conference on Computer Aided Verification, P260
   BEREZIN S, 1997, CMUCS97105
   BOUAJJANI A, 1991, LECT NOTES COMPUT SC, V510, P76
   Clarke Edmund M., 2001, Model Checking
   CLARKE EM, 1994, ACM T PROGR LANG SYS, V16, P1512, DOI 10.1145/186025.186051
   CLEAVELAND R, 1990, ACTA INFORM, V27, P725, DOI 10.1007/BF00264284
   KAIVOLA R, 1991, LECT NOTES COMPUTER, V663, P248
   KOZEN D, 1983, THEOR COMPUT SCI, V27, P333, DOI 10.1016/0304-3975(82)90125-6
   MILNER R, 1989, COMMUNICATIOIN CONCU
   STIRLING C, 1991, THEOR COMPUT SCI, V89, P161, DOI 10.1016/0304-3975(90)90110-4
   STIRLING C, 1985, LECT NOTES COMPUT SC, V194, P475
   Stirling C., 1989, LECT NOTES COMPUTER, V391
   [No title captured]
NR 16
TC 0
Z9 0
U1 0
U2 0
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB
PY 2005
VL 54
IS 2-3
BP 291
EP 311
DI 10.1016/j.scico.2004.07.002
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 874ZC
UT WOS:000225388200004
DA 2024-07-18
ER

PT J
AU Seigneur, JM
   Jensen, CD
AF Seigneur, JM
   Jensen, CD
TI The Claim Tool Kit for ad hoc recognition of peer entities
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT Conference on the Principles and Practice of Programming in Java
CY JUN, 2003
CL Kilkenny, IRELAND
DE authentication; ad hoc peer-to-peer; auto-configuration; performance
AB In ubiquitous/pervasive computing environments, it is envisaged that computing elements-entities-will start interacting in an ad hoc fashion. The peer-to-peer (p2p) paradigm is appealing for such types of interaction especially with JXTA, which supports the development of reusable p2p building blocks, which facilitate implementation on any smart device. However, the inability to rely on a centralised authentication infrastructure, the openness of the environment and the absence of an administrator (it is assumed to be too expensive to have a skilled administrator at hand due to the large number of peers) challenge the use of legacy authentication mechanisms.
   Supporting spontaneous interactions among previously unknown entities requires dynamic enrolment of strangers and unknown entities. Entity recognition (ER) is a process that is carried out each time an interaction happens between entities in order to dynamically recognise previously met entities.
   In this paper, we present the Claim Tool Kit (CTK), a Java-based implementation of ER: entities exchange messages, called Claims, and rely on their associated clues to evaluate the level of confidence in recognition.
   The CTK employs advanced features available with Java, such as JXTA and Java Cryptography and Security Architectures. We show that the CTK needs performance results on these features in order to increase the level of auto-configuration of the CTK. We describe how to obtain performance assessment for some of these new features. Finally, we explain how the CTK can be instrumented to take into account performance assessment. By analysing the evaluation results, the applicability of these advanced Java-based technologies for peer entity recognition is assessed. (C) 2004 Elsevier B.V. All rights reserved.
C1 Univ Dublin Trinity Coll, Dublin 2, Ireland.
   Tech Univ Denmark, DK-2800 Lyngby, Denmark.
C3 Trinity College Dublin; Technical University of Denmark
RP Univ Dublin Trinity Coll, Dublin 2, Ireland.
EM Jean-Marc.Seigneur@trustcomp.org; Christian.Jensen@imm.dtu.dk
RI Seigneur, Jean-Marc/V-8416-2019; Jensen, Christian
   Damsgaard/IAM-0461-2023
OI Seigneur, Jean-Marc/0000-0002-3271-2905; Jensen, Christian
   Damsgaard/0000-0002-0921-7148
CR [Anonymous], P 1 INT WORKSH PEER
   [Anonymous], IBM SYSTEMS J
   Bohnenkamp H, 2003, 2003 INTERNATIONAL CONFERENCE ON DEPENDABLE SYSTEMS AND NETWORKS, PROCEEDINGS, P531, DOI 10.1109/DSN.2003.1209963
   Damiani E, 2003, IEEE INTERNET COMPUT, V7, P29, DOI 10.1109/MIC.2003.1250581
   Dey AK, 2001, PERS UBIQUIT COMPUT, V5, P4, DOI 10.1007/s007790170019
   GOLDBERG I, 2000, THESIS U CALIFORNIA
   GRAY E, 2003, P 1 INT C TRUST MAN
   HALEPOVIC E, IN PRESS SPECIAL ISS
   Juric MB, 1999, LECT NOTES COMPUT SC, V1691, P349
   KANT K, 1992, INTRO COMPUTER SYST
   KANTOLA K, 2004, PEER PEER SPAM INTER
   KLEINMANN K, 2003, P KIMAS 03 INT C INT
   Kobsa A., 2003, ACM Transactions on Internet Technology, V3, P149, DOI DOI 10.1145/767193.767196
   Milojicic Dejan S., 2002, Technical Report
   Newman MEJ, 2000, J STAT PHYS, V101, P819, DOI 10.1023/A:1026485807148
   SCOTT F, 2000, UML DISTILLED
   SEIGNEUR JM, 2003, UNDERSTANING PRIVACY, V1
   SEIGNEUR JM, 2004, LNCS
   SEIGNEUR JM, 2003, P 2 INT C PRINC PRAC
   SEIGNEUR JM, 2003, P 1 INT C SEC PERV C
   SEIGNEUR JM, 2004, P ITRUST 04 2 INT C
   SEIGNEUR JM, 2004, P SAC 2004 ACM
   SEIGNEUR JM, 2003, P SMART OBJ C 2003
   Smith Richard E., 2001, Authentication: from passwords to public keys
   Stajano F, 2000, LECT NOTES COMPUT SC, V1796, P172
   TRAVERSAT B, 2003, SUN MICROSYSTEMS
   WEISER M, 1991, COMPUTER 21ST CENTUR
   YAO W, 2003, P 3 INT C PEER TO PE
   1999, GNU PRIVARY HDB
NR 29
TC 2
Z9 2
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN
PY 2005
VL 54
IS 1
BP 49
EP 71
DI 10.1016/j.scico.2004.05.005
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 871MT
UT WOS:000225138500004
OA Bronze
DA 2024-07-18
ER

PT J
AU Shah, V
   Younan, N
   Alford, T
   Skjellum, A
AF Shah, V
   Younan, N
   Alford, T
   Skjellum, A
TI A spectral estimation toolkit for Java applications
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT Conference on the Principles and Practice of Programming in Java
CY JUN, 2003
CL Kilkenny, IRELAND
DE Java; algorithms; VSIPL; spectral estimation
AB This paper examines the capability, performance, and relevance of a high-performance advanced signal processing toolkit in Java, a programming language for Web-based applications. To demonstrate the simplicity, ease, and application use of the toolkit, a spectral estimation applet has been developed in the Java environment using advanced Internet technologies such as Remote Method Invocation (RMI). This application provides an interactive and visual approach in understanding theoretical concepts of advanced signal processing methods and shows the need to create more application applets to better understand additional concepts in signal and image processing. Furthermore, a toolkit with limited functionality and different framework has been developed for embedded and handheld devices such as cellular phones and palm pilots. This toolkit is also shown to be useful in developing applications MIDlets on those devices. (C) 2004 Elsevier B.V. All rights reserved.
C1 Mississippi State Univ, Dept Elect & Comp Engn, Mississippi State, MS 39762 USA.
   MPI Software Technol, Birmingham, AL 35203 USA.
C3 Mississippi State University
RP Mississippi State Univ, Dept Elect & Comp Engn, Mississippi State, MS 39762 USA.
EM vps1@ece.msstate.edu; younan@ece.msstate.edu
RI Shah, Vijay/D-4083-2014
OI Shah, Vijay/0000-0003-3856-156X
CR ALFORD T, 2002, P 2002 JOINT ACM ISC, P148
   Andraka R., 1998, FPGA'98. ACM/SIGDA International Symposium on Field Programmable Gate Arrays, P191, DOI 10.1145/275107.275139
   [Anonymous], PROGR DIG SIGN PROC
   DESPAIN AM, 1974, IEEE T COMPUT, VC 23, P993, DOI 10.1109/T-C.1974.223800
   *DIG SIGN PROC COM, 1979, IEEE T COMPUTERS C
   HOLLASCH S, 2004, 754 IEEE
   Kay S. M., 1988, Modern Spectral Estimation: Theory and Application
   LIANG S, 1999, JAVATM NATIVE INTERF
   LYON DA, 1998, JAVA DSP
   Marple SL., 1987, Digital spectral analysis with applications
   MATTHEWS C, 1998, ELECT DEV MAGAZINE O, V6
   *MPI SOFTW TECHN, 2002, VSI PRO COR US MAN
   SCHWARTZ DA, 2002, VSIPL 1 1 API MANUAL
   SHIN S, 2002, INTRO DISTRIBUTED SY
NR 14
TC 0
Z9 0
U1 1
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN
PY 2005
VL 54
IS 1
BP 125
EP 142
DI 10.1016/j.scico.2004.05.008
PG 18
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 871MT
UT WOS:000225138500007
OA Bronze
DA 2024-07-18
ER

PT J
AU Borba, P
   Sampaio, A
   Cavalcanti, A
   Cornélio, M
AF Borba, P
   Sampaio, A
   Cavalcanti, A
   Cornélio, M
TI Algebraic reasoning for object-oriented programming
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
ID REFINEMENT; UML; SEMANTICS; LAWS
AB We present algebraic laws for a language similar to a subset of sequential Java that includes inheritance, recursive classes, dynamic binding, access control, type tests and casts, assignment, but no sharing. These laws are proved sound with respect to a weakest precondition semantics. We also show that they are complete in the sense that they are sufficient to reduce an arbitrary program to a normal form substantially close to an imperative program; the remaining object-oriented constructs could be further eliminated if our language had recursive records. This suggests that our laws are expressive enough to formally derive behaviour preserving program transformations; we illustrate that through the derivation of provably-correct refactorings. (C) 2004 Elsevier B.V. All rights reserved.
C1 Univ Fed Pernambuco, Informat Ctr, BR-50740540 Recife, PE, Brazil.
   Univ Kent, Comp Lab, Canterbury CT2 7NF, Kent, England.
C3 Universidade Federal de Pernambuco; University of Kent
RP Univ Fed Pernambuco, Informat Ctr, BR-50740540 Recife, PE, Brazil.
EM phmb@cin.ufpe.br; a.l.c.cavalcanti@kent.ac.uk
RI Borba, Paulo/C-5617-2013
OI Borba, Paulo/0000-0002-0381-2843; Cavalcanti, Ana Lucia
   Caneca/0000-0002-0831-1976
CR BACK RJR, 1987, PROCEDURAL ABSTR RE, V55
   BANERJEE A, 2001, POPL2002
   BERGSTEIN PL, 1991, OOPSLA 91 CONFERENCE PROCEEDINGS : OBJECT-ORIENTED PROGRAMMING SYSTEMS, LANGUAGES, AND APPLICATIONS, P299
   Bird Richard, 1997, Algebra of Programming
   Booch Grady, 1999, UNIFIED MODELING LAN, DOI DOI 10.1007/3-540-40011-7_10
   Borba P, 2003, LECT NOTES COMPUT SC, V2743, P457
   CASTOR F, 2001, 5 BRAZ S PROGR LANG, P236
   Cavalcanti A, 2000, IEEE T SOFTWARE ENG, V26, P713, DOI 10.1109/32.879810
   Cavalcanti A, 1999, SCI COMPUT PROGRAM, V33, P87, DOI 10.1016/S0167-6423(97)00015-4
   Cavalcanti A. L. C., 1998, J BRAZILIAN COMPUTER, V5, P1
   CAVALCANTI ALC, 2002, LNCS, V2391, P471
   Cornelio M., 2004, THESIS FEDERAL U PER
   CORNELIO ML, 2002, ELET NOTES THEORETIC, V70
   Dijkstra E. W., 1976, A Discipline of Pro-gramming
   Duran A, 2003, LECT NOTES COMPUT SC, V2805, P301
   Evans A, 1999, LECT NOTES COMPUT SC, V1618, P336
   EVANS A, 1998, WORKSHOP IND STRENGT
   Fowler M., 1999, AW OBJ TECHNOL S
   Gamma Erich., 1994, DESIGN PATTERNS
   Gogolla M, 1999, LECT NOTES COMPUT SC, V1618, P92
   Gosling James, 1996, The Java Language Specification
   He Jifeng, 1994, Formal Aspects of Computing, V6, P643, DOI 10.1007/BF03259390
   Hoare C. A. R., 1998, Unifying Theories of Programming
   HOARE CAR, 1987, COMMUN ACM, V30, P672, DOI 10.1145/27651.27653
   Lano K, 1999, LECT NOTES COMPUT SC, V1618, P107
   LEINO KRM, 1998, LECT NOTES COMPUTER, V1381
   Lindholm T., 1997, JAVA VIRTUAL MACHINE
   Lira BO, 2002, P 5 BRAZ WORKSH FORM, P193
   Mahony B, 2000, IEEE T SOFTWARE ENG, V26, P150, DOI 10.1109/32.841115
   MESEGUER J, 1993, OBJECT ORIENTED PROG, P314
   MIKHAJLOVA A, 1997, LNCS, V1313, P82
   MOORE I, 1996, OOPSLA, P235
   MOORE I, 1996, P TECHN OBJ OR LANG, P173
   Morgan C.C., 1988, TECHNICAL MONOGRAPH
   Morgan Carroll, 1994, Programming from specifications
   Opdyke W. F., 1992, Refactoring object-oriented frameworks
   PARTCSH HA, 1990, TEXTS MONOGRAPHS COM
   Roberts D., 1999, Ph. D. Dissertation
   ROSCOE AW, 1988, THEOR COMPUT SCI, V60, P177, DOI 10.1016/0304-3975(88)90049-7
   Roscoe AW, 1998, PRENTICE HALL SERIES
   SAMPAIO ACA, 1997, AMAST SERIES COMPUTI, V4
   Seres S., 1999, ICPL'99
   Smith Graeme., 1999, OBJECT Z SPECIFICATI
   UNGAR D, 1987, SIGPLAN NOTICES, V22, P227, DOI 10.1145/38807.38828
   UTTING M, 1992, THESIS U NEW S WALES
NR 45
TC 40
Z9 40
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD AUG
PY 2004
VL 52
IS 1-3
BP 53
EP 100
DI 10.1016/j.scico.2004.03.003
PG 48
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 841OS
UT WOS:000222940800003
OA Bronze
DA 2024-07-18
ER

PT J
AU Consel, C
   Lawall, JL
   Le Meur, AF
AF Consel, C
   Lawall, JL
   Le Meur, AF
TI A tour of Tempo: a program specializer for the C language
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE program specialization; data specialization; program analysis;
   imperative language; applications
ID COMPILER
AB Specialization is an automatic approach to customizing a program with respect to configuration values. In this paper, we present a survey of Tempo, a specializer for the C language. Tempo offers specialization at both compile time and run time, and both program and data specialization. To control the specialization process, Tempo provides the program developer with a declarative language to describe specialization opportunities for a given program.
   The functionalities and features of Tempo have been driven by the needs of practical applications. Tempo has been successfully applied to a variety of realistic programs in areas such as operating systems and networking. We give an overview of the design of Tempo and of its use in specializing realistic applications. (C) 2004 Elsevier B.V.. All rights reserved.
C1 ENSEIRB, LaBRI, INRIA, Compose Grp, F-33402 Talence, France.
   Univ Copenhagen, Dept Comp Sci, DK-2100 Copenhagen, Denmark.
C3 Inria; Universite de Bordeaux; Centre National de la Recherche
   Scientifique (CNRS); University of Copenhagen
RP ENSEIRB, LaBRI, INRIA, Compose Grp, 1 Ave Docteur Albert Schweitzer, F-33402 Talence, France.
EM consel@labri.fr
CR [Anonymous], ACM COMPUTING SURVEY
   [Anonymous], P 12 ACM S OP SYST P
   Aycock J, 2003, ACM COMPUT SURV, V35, P97, DOI 10.1145/857076.857077
   BARZDINS GJ, 1988, MIXED COMPUTATION TR, P32
   BIRRELL AD, 1984, ACM T COMPUT SYST, V2, P39, DOI 10.1145/2080.357392
   Bondorf A., 1993, Journal of Functional Programming, V3, P315, DOI 10.1017/S0956796800000769
   BONDORF A, 1992, ACM C LISP FUNCT PRO, P1
   BRAUX M, 2000, ACM SIGPLAN WORKSH P, P2
   Chirokoff S., 1999, Higher-Order and Symbolic Computation, V12, P309, DOI 10.1023/A:1010035401770
   CONSEL C, 1991, LECT NOTES COMPUT SC, V523, P496
   CONSEL C, 1996, 23 ACM SIGPLAN SIGAC, P145
   CONSEL C, 1996, LECT NOTES COMPUTER, V1110, P54
   CONSEL C, 1993, 20 ANN ACM SIGPLAN S, P493
   DUSSART D, PEPM 95, P54
   EROSA AM, 1994, PROCEEDINGS OF THE 1994 INTERNATIONAL CONFERENCE ON COMPUTER LANGUAGES, P229, DOI 10.1109/ICCL.1994.288377
   FELDMAN SI, 1995, 149 AT T BELL LAB
   Gluck R., 1997, LISP and Symbolic Computation, V10, P113, DOI 10.1023/A:1007763000430
   Gluck R, 1995, LECT NOTES COMPUT SC, V982, P259, DOI 10.1007/BFb0026825
   Grant B, 2000, THEOR COMPUT SCI, V248, P147, DOI 10.1016/S0304-3975(00)00051-7
   GRANT B, 1999, P ACM SIGPLAN 99 C P, P293
   Hornof L, 2000, THEOR COMPUT SCI, V248, P3, DOI 10.1016/S0304-3975(00)00048-7
   HORNOF L, 1997, ACM SIGPLAN S PART E, P63
   Johnson JH, 2002, URBAN GEOGR, V23, P201, DOI 10.2747/0272-3638.23.3.201
   JONES ND, 1985, LECT NOTES COMPUT SC, V202, P124
   JONES ND, 1996, LECT NOTES COMPUTER, V1110, P216
   Jones Neil D., 1993, INT SERIES COMPUTER, pJune
   Keppel D, 1993, FAST DATA BREAKPOINT
   KLEINRUBATSCHER P, 1994, WORKSH SEM AN ENTW G, P45
   KNOBLOCK TB, 1996, P ACM SIGPLAN 96 C P, P215
   Kono K., 2000, Proceedings 20th IEEE International Conference on Distributed Computing Systems, P308, DOI 10.1109/ICDCS.2000.840943
   Lawall JL, 2001, LECT NOTES COMPUT SC, V2053, P84
   Lawall JL, 1999, LECT NOTES COMPUT SC, V1706, P338
   LEMEUR AF, 2004, HIGHER ORDER SYMBOLI, V17, P47
   LEMEUR AF, 2002, THESIS U RENNES 1 FR
   LEMEUR AF, 2002, IFIP ACM C COMP DEPL, P1
   LEONE M, 1994, ACM C PART EV SEM BA, P97
   Leroy Xavier., 1997, OBJECTIVE CAML SYSTE
   Locanthi B. N., 1987, EUUG Autumn '87 Conference Proceedings, P243
   LOWNEY PG, 1993, J SUPERCOMPUT, V7, P51, DOI 10.1007/BF01205182
   Makholm H., 1999, Specializing c - an introduction to the principles behind c-mix/ii
   MALMKJAER K, 1989, THESIS DIKU U COPENH
   MARINESCU M, 1997, ACM SIGPLAN S PART E, P47
   MARLET R, 1999, P ACM SIGPLAN 99 C P, P281
   MCCANNE S, 1993, PROCEEDINGS OF THE WINTER 1993 USENIX CONFERENCE, P259
   McNamee D, 2001, ACM T COMPUT SYST, V19, P217, DOI 10.1145/377769.377778
   Muller G, 1997, PROCEEDINGS OF THE THIRD USENIX CONFERENCE ON OBJECT-ORIENTED TECHNOLOGIES AND SYSTEMS (COOTS), P1
   Muller G, 1998, INT CON DISTR COMP S, P240, DOI 10.1109/ICDCS.1998.679507
   Muller G, 1999, IEEE SOFTWARE, V16, P44, DOI 10.1109/52.754052
   MULLER G, 1997, ACM SIGPLAN S PART E, P116
   Noel F, 1998, 1998 INTERNATIONAL CONFERENCE ON COMPUTER LANGUAGES, PROCEEDINGS, P132, DOI 10.1109/ICCL.1998.674164
   PARK J, 2002, ACM SIGPLAN ASIA PEP, P61
   Proebsting TA, 1997, PROCEEDINGS OF THE THIRD USENIX CONFERENCE ON OBJECT-ORIENTED TECHNOLOGIES AND SYSTEMS (COOTS), P41
   SCHROEDER MD, 1990, ACM T COMPUT SYST, V8, P1, DOI 10.1145/77648.77653
   Schultz UP, 2003, ACM T PROGR LANG SYS, V25, P452, DOI 10.1145/778559.778561
   Schultz UP, 2000, FIFTEENTH IEEE INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING, PROCEEDINGS, P197, DOI 10.1109/ASE.2000.873664
   Schultz UP, 1999, LECT NOTES COMPUT SC, V1628, P367
   SCHULTZ UP, 2000, THESIS U REENES 1 FR
   SRINIVASAN R, 1995, 1832 RFC SUN MICR
   *SUN MICR RPC, 1988, REM PROC CALL PROT S
   Thibault S, 1998, SYM REL DIST SYST, P135, DOI 10.1109/RELDIS.1998.740484
   Thibault S, 1999, INT CON DISTR COMP S, P234, DOI 10.1109/ICDCS.1999.776525
   Thibault Scott, 2000, HIGHER ORDER SYMBOLI, V13
   VOLANSCHI EN, 1998, THESIS U RENNES 1 FR
   [No title captured]
   1993, P 1993 ACM SIGPLAN S
   1995, P 1995 ACM SIGPLAN S
   1996, P ACM SIGPLAN 96 C P, V31
   1991, P 1991 ACM SIGPLAN S
NR 68
TC 15
Z9 23
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD AUG
PY 2004
VL 52
IS 1-3
BP 341
EP 370
DI 10.1016/j.scico.2004.03.011
PG 30
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 841OS
UT WOS:000222940800011
DA 2024-07-18
ER

PT J
AU Winter, VL
   Subramaniam, M
AF Winter, VL
   Subramaniam, M
TI The transient combinator, higher-order strategies, and the distributed
   data problem
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE distributed data problem; strategic programming; higher-order strategic
   programming; higher-order traversal; one-layer higher-order traversals;
   transformation; program transformation; rewriting; higher-order
   rewriting; transient combinator; skip strategy; TL; HATS; table
   normalization; Java class loader; strategic benchmarks; Java virtual
   machine; sandia secure processor
ID TRAVERSAL
AB The distributed data problem is characterized by the desire to bring together semantically related data from syntactically unrelated portions of a term. A strategic combinator called transient and a strategic constant called skip are introduced in the context of a higher-order strategic framework. The notion of traversal is lifted to the higher order as well. The resulting framework allows the manipulation of data to be expressed directly in strategic terms. The impact of this dynamic approach to strategy creation is then explored for several instances of the distributed data problem. Problems considered include three strategic benchmarks as well as two transformations that arise within a class loader for the Java virtual machine. (C) 2004 Elsevier B.V. All rights reserved.
C1 Univ Nebraska, Dept Comp Sci, Omaha, NE 68182 USA.
C3 University of Nebraska System
RP Winter, VL (corresponding author), Univ Nebraska, Dept Comp Sci, PK1 174C 1110,S 67th St, Omaha, NE 68182 USA.
EM vwinter@mail.unomaha.edu
CR [Anonymous], ELECT NOTES THEORETI
   [Anonymous], LNCS
   Bergstra J. A., 1989, ALGEBRAIC SPECIFICAT
   Borovansky P., 2001, INT J FDN COMPUTER S
   BOROVANSKY P, 1998, ELECT NOTES THEORETI, V15
   Cirstea H., 1999, RR3818 INRIA
   CLAVEL M, 2000, REFLECTION REWRITING
   Clavel M., 2001, THEORETICAL COMPUTER
   CLAVEL M, 1998, ELECT NOTES THEORETI, V15
   EKER SM, 1995, COMPUT J, V38, P381, DOI 10.1093/comjnl/38.5.381
   *ELAN, US MAN
   Jansson P., 1997, POPL 1997, P470
   KORT J, 2000, P 9 INT WORKSH FUNCT
   Lämmel R, 2003, LECT NOTES COMPUT SC, V2562, P357
   Lämmel R, 2003, J LOGIC ALGEBR PROGR, V54, P1, DOI 10.1016/S1567-8326(02)00028-0
   LAMMEL R, 2002, LNCS, V2257, P137
   LAMMEL R, 2000, WORKSHOP GENERIC PRO
   LAMMEL R, 2002, ELECT NOTES THEORETI, V70
   Lammel Ralf., ESSENCE STRATEGIC PR
   Lindholm Tim., 1999, JAVA VIRTUAL MACHINE, V2nd
   MCCOY JA, 2000, P 5 IEEE INT HIGH AS
   MEIJER E, 1995, LECT NOTES COMPUTER, V925, P228
   MILNER R, 1978, J COMPUT SYST SCI, V17, P348, DOI 10.1016/0022-0000(78)90014-4
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Van den Brand MGJ, 2003, ACM T SOFTW ENG METH, V12, P152, DOI 10.1145/941566.941568
   VISSER E, 1999, LECT NOTES COMPUTER
   Visser E., 2001, ELECT NOTES THEORETI, V59
   VISSER E, 1998, ELECT NOTES THEORETI, V15
   VISSER E, 2000, WORKSHOP GENERIC PRO
   VISSER E, 2004, COMMUNICATION   0218
   WINTER VL, ADV COMPUTERS, V58
   WINTER VL, 1999, P SOFTW TRANSF SYST
   WINTER VL, 1999, P IEEE S APPL SPEC S
   [No title captured]
NR 34
TC 10
Z9 11
U1 0
U2 0
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD AUG
PY 2004
VL 52
IS 1-3
BP 165
EP 212
DI 10.1016/j.scico.2004.03.006
PG 48
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 841OS
UT WOS:000222940800006
DA 2024-07-18
ER

PT J
AU Backhouse, K
   Backhouse, R
AF Backhouse, K
   Backhouse, R
TI Safety of abstract interpretations for free, via logical relations and
   Galois connections
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE abstract interpretation; logical relations; parametricity; theorems for
   free; Galois connections
AB Algebraic properties of logical relations on partially ordered sets are studied. It is shown how to construct a logical relation that extends a collection of base Galois connections to a Galois connection of arbitrary higher-order type. "Theorems-for-free" is used to show that the construction ensures safe abstract interpretation of parametrically polymorphic functions. The properties are used to show how abstract interpretations of program libraries can be constructed. (C) 2004 Elsevier B.V. All rights reserved.
C1 ARM Ltd, Cambridge CB1 9NJ, England.
   Univ Nottingham, Sch Comp Sci & Informat Technol, Nottingham NG8 1BB, England.
C3 Arm Holdings; University of Nottingham
RP Backhouse, K (corresponding author), ARM Ltd, Cambridge CB1 9NJ, England.
EM kevin.backhouse@arm.com; roland.backhouse@nottingham.ac.uk
OI Backhouse, Roland/0000-0002-0140-8089
CR Abramsky S., 1990, Journal of Logic and Computation, V1, P5, DOI 10.1093/logcom/1.1.5
   [Anonymous], INFORM PROCESSING
   Backhouse K, 2002, LECT NOTES COMPUT SC, V2280, P142
   BACKHOUSE K, 2002, THESIS U OXFORD
   Backhouse R. C., 1992, RELATIONAL THEORY DA
   BACKHOUSE RC, 1990, BEAUTY IS OUR BUSINE
   BACKHOUSE RC, 1992, P 2 C ALG METH SOFTW, P303
   COUSOT P, 1994, PROCEEDINGS OF THE 1994 INTERNATIONAL CONFERENCE ON COMPUTER LANGUAGES, P95, DOI 10.1109/ICCL.1994.288389
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   DEBRUIN PJ, 1995, THESIS RIJKUNIVERSIT
   Dijkstra EdsgerW., 1990, TEXTS MONOGRAPHS COM
   HARTMANIS J, 1964, ALGEBRAIC STRUCTURE, V7, P485
   Hoare CAR., 1985, Communicating Sequential Processes
   HOOGENDIJK PF, 1997, THESIS EINDHOVEN U T
   Jones S.P., 1999, REPORT PROGRAMMING L
   JONES SLP, 1987, SERIES COMPUTER SCI
   MILNER R, 1978, J COMPUT SYST SCI, V17, P348, DOI 10.1016/0022-0000(78)90014-4
   Mycroft Alan, 1981, Ph. D. Dissertation
   NIELSON F, 1998, PRINCIPLES PROGRAM A
   PLOTKIN GD, 1980, ESSAYS COMBINATORY L
   WADLER P, 1989, 4 S FUNCT PROGR LANG
   [No title captured]
NR 22
TC 9
Z9 11
U1 0
U2 1
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAY
PY 2004
VL 51
IS 1-2
BP 153
EP 196
DI 10.1016/j.scico.2003.06.002
PG 44
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 817WR
UT WOS:000221208100007
DA 2024-07-18
ER

PT J
AU Flanagan, C
AF Flanagan, C
TI Automatic software model checking via constraint logic
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 12th European Symposium on Programming (ESOP 2003)
CY APR 05-13, 2003
CL Warsaw, POLAND
DE model checking; constraint logic; program verification
AB This paper proposes the use of constraint logic to perform model checking of imperative, infinite-state programs. We present a semantics-preserving translation from an imperative language with recursive procedures and heap-allocated mutable data structures into constraint logic. The constraint logic formulation provides a clean way to reason about the behavior and correctness of the original program. In addition, it enables the use of existing constraint logic implementations to perform bounded software model checking, using a combination of symbolic reasoning and explicit path exploration. (C) 2003 Elsevier B.V. All rights reserved.
C1 Univ Calif Santa Cruz, Dept Comp Sci, Santa Cruz, CA 95064 USA.
C3 University of California System; University of California Santa Cruz
RP Univ Calif Santa Cruz, Dept Comp Sci, Santa Cruz, CA 95064 USA.
EM cormac@cs.ucsc.edu
CR [Anonymous], LNCS
   [Anonymous], 2002, LECT NOTES COMPUTER, DOI DOI 10.1007/3-540-45620-1
   [Anonymous], P 14 ANN ACM S PRINC
   [Anonymous], 2003, Technical Report HPL-2003-148
   BRUENING D, 1999, THESIS MIT
   BURCH JR, 1992, INFORM COMPUT, V98, P142, DOI 10.1016/0890-5401(92)90017-A
   Bush WR, 2000, SOFTWARE PRACT EXPER, V30, P775, DOI 10.1002/(SICI)1097-024X(200006)30:7<775::AID-SPE309>3.0.CO;2-H
   Clarke. E. M., 1982, LOGICS OF PROGRAMS, P52, DOI [10 . 1007 / BFb0025774, DOI 10.1007/BFB0025774]
   Delzanno G, 1999, LECT NOTES COMPUT SC, V1579, P223
   DETLEFS DL, 1998, 159 COMP SYST RES CT
   Dijkstra E. W., 1976, A Discipline of Pro-gramming
   Dwyer MB, 2001, PROC INT CONF SOFTW, P177, DOI 10.1109/ICSE.2001.919092
   ERNST MD, 2000, P 22 INT C SOFTW ENG
   Flanagan C, 2001, INFORM PROCESS LETT, V77, P97, DOI 10.1016/S0020-0190(00)00196-4
   Flanagan C, 2001, LNCS, V2021, P500, DOI DOI 10.1007/3-540-45251-6_29
   FLANAGAN C, 2002, P ACM SIGPLAN 2002 C, P234
   FLANAGAN C, 2001, 28 ANN ACM S PRINC P, P193
   Graf S, 1997, LECT NOTES COMPUT SC, V1254, P72
   GUNTER E, 2002, ELECT NOTES THEORETI, V70
   HENZINGER TA, 2001, P 29 S PRINC PROGR L, P28
   JAFFAR J, 1994, J LOGIC PROGRAM, V20, P503, DOI 10.1016/0743-1066(94)90033-7
   Jaffar J, 1998, J LOGIC PROGRAM, V37, P1, DOI 10.1016/S0743-1066(98)10002-X
   LAMPORT L, 1994, 119 DEC SYST RES CTR
   MAHER MJ, 1993, LOGIC PROGRAMM, P737
   McMillan K. L., 1993, Symbolic model checking
   Queille J.-P., 1982, ser. Lecture Notes in Computer Science, P337, DOI [DOI 10.1007/3-540-11494-722, DOI 10.1007/3-540-11494-7_22, 10 . 1007 / 3 - 540 - 11494-7_22]
   SHANKAR AU, 1993, COMPUT SURV, V25, P225, DOI 10.1145/158439.158441
   Stoller SD, 2000, LECT NOTES COMPUT SC, V1885, P224
   Yahav E, 2001, ACM SIGPLAN NOTICES, V36, P27, DOI 10.1145/373243.360206
NR 29
TC 20
Z9 22
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR
PY 2004
VL 50
IS 1-3
BP 253
EP 270
DI 10.1016/j.scico.2004.01.006
PG 18
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 804AH
UT WOS:000220271100011
OA Green Submitted, Green Published
DA 2024-07-18
ER

PT J
AU Ohori, A
AF Ohori, A
TI Register allocation by proof transformation
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 12th European Symposium on Programming (ESOP 2003)
CY APR 05-13, 2003
CL Warsaw, POLAND
DE register allocation; liveness analysis; proof transformation; structural
   rules
ID GRAPH
AB This paper presents a proof-theoretical framework that accounts for the entire process of register allocation-liveness analysis is proof reconstruction (similar to type inference), and register allocation is proof transformation from a proof system with unrestricted variable accesses to a proof system with, restricted variable access. In our framework, the set of registers acts as a "working set" of the live variables at each instruction step, which changes during the execution of the code. This eliminates the ad hoc notion of "spilling". Memory-register moves are systematically incorporated in our proof transformation process. Its correctness is a direct corollary of our construction; the resulting proof is equivalent to the proof of the original code modulo treatment of structural rules. The framework serves as a basis for reasoning about formal properties of register allocation process, and it also yields a clean and systematic register allocation algorithm. The algorithm has been implemented, demonstrating the feasibility of the framework. (C) 2004 Elsevier B.V. All rights reserved.
C1 Japan Adv Inst Sci & Technol, Sch Informat Sci, Tatsunokuchi, Ishikawa 9231292, Japan.
C3 Japan Advanced Institute of Science & Technology (JAIST)
RP Ohori, A (corresponding author), Japan Adv Inst Sci & Technol, Sch Informat Sci, Tatsunokuchi, Ishikawa 9231292, Japan.
EM ohori@jaist.ac.jp
CR [Anonymous], 1982, SIGPLAN Not, DOI DOI 10.1145/872726.806984
   BRIGGS P, 1994, ACM T PROGR LANG SYS, V16, P428, DOI 10.1145/177492.177575
   CHAITIN GJ, 1981, COMPUT LANG, V6, P47, DOI 10.1016/0096-0551(81)90048-5
   CURRY H, 1968, COMBINATORY LOGIC, V1
   CYTRON R, 1991, ACM T PROGR LANG SYS, V13, P451, DOI 10.1145/115372.115320
   GIRARD JY, 1987, THEOR COMPUT SCI, V50, P1, DOI 10.1016/0304-3975(87)90045-4
   HIGUCHI T, 2002, P INT C PRINC PRACT, P201
   HIGUCHI T, 2003, P ACM INT C FUNCT PR, P227
   HOWARD W, 1980, HB CURRY ESSAYS COMB, P476
   MORRISETT G, 1998, P ACM S PRINC PROGR
   NECULA G, 1998, P POPL 98, P106
   Ohori A, 1995, ACM T PROGR LANG SYS, V17, P844, DOI 10.1145/218570.218572
   OHORI A, 1999, P INT S FUNCT LOG PR
   ONO H, 1985, J SYMBOLIC LOGIC, V50, P169, DOI 10.2307/2273798
   Ono H., 1998, THEORIES TYPES PROOF, V2, P207
   Poletto M, 1999, ACM T PROGR LANG SYS, V21, P895, DOI 10.1145/330249.330250
   Remy D., 1989, P ACM S PRINC PROGR, P242
   STATA R, 1998, P 25 ACM S PRINC PRO, P149
   Troelstra Anne Sjerp, 1992, CSLI Lecture Notes, V29
NR 19
TC 3
Z9 3
U1 0
U2 0
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR
PY 2004
VL 50
IS 1-3
BP 161
EP 187
DI 10.1016/j.scico.2004.01.005
PG 27
WC Computer Science, Software Engineering
WE Conference Proceedings Citation Index - Science (CPCI-S); Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 804AH
UT WOS:000220271100008
DA 2024-07-18
ER

PT J
AU Reddy, US
   Yang, H
AF Reddy, US
   Yang, H
TI Correctness of data representations involving heap data structures
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 12th European Symposium on Programming (ESOP 2003)
CY APR 05-13, 2003
CL Warsaw, POLAND
DE denotational semantics; relational parametricity; separation logic;
   imperative programming languages
ID ALGOL
AB While the semantics of local variables in programming languages is by now well-understood, the semantics of pointer-addressed heap variables is still an outstanding issue. In particular, the commonly. assumed relational reasoning principles or data representations have not been validated in a semantic model of heap variables. In this paper, we define a parametricity semantics for a Pascal-like language with pointers and heap variables which gives such reasoning principles. It turns out that the correspondences between data representations cannot simply be relations between states, but more intricate correspondences that also need to keep track of visible locations whose pointers can be stored and leaked. (C) 2004 Elsevier B.V. All rights reserved.
C1 Univ Birmingham, Sch Comp Sci, Birmingham B15 2TT, W Midlands, England.
   Korea Adv Inst Sci & Technol, Micros Res Ctr, Taejon 305701, South Korea.
C3 University of Birmingham; Korea Advanced Institute of Science &
   Technology (KAIST)
RP Univ Birmingham, Sch Comp Sci, Birmingham B15 2TT, W Midlands, England.
EM u.reddy@cs.bham.ac.uk; hyang@kaist.ac.kr
RI Yang, Hongseok/AAC-4471-2020
CR Abramsky S, 1998, THIRTEENTH ANNUAL IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, PROCEEDINGS, P334, DOI 10.1109/LICS.1998.705669
   [Anonymous], 1974, LNCS
   BANERJEE A, 2002, POPL
   DUNPHY BP, 2002, THESIS U ILLINOIS
   GHICA DR, 1997, THESIS QUEENS U KING
   Launchbury J., 1995, LISP and Symbolic Computation, V8, P293, DOI 10.1007/BF01018827
   Levy PB, 2002, LECT NOTES COMPUT SC, V2471, P232
   LEVY PB, 2001, THESIS U LONDON QUEE
   MEYER AR, 1988, 15TH P ACM S PRINC P, P191
   MITCHELL JC, 1988, ACM T PROGR LANG SYS, V10, P470, DOI 10.1145/44501.45065
   MOGGI E, 1991, INFORM COMPUT, V93, P55, DOI 10.1016/0890-5401(91)90052-4
   O'Hearn P.W., 1997, Algol-Like Languages
   O'Hearn PW, 2000, J ACM, V47, P167, DOI 10.1145/331605.331611
   O'Hearn PW., 2001, Local reasoning about programs that alter data structures, volume 2142 of LNCS, V2142, P1
   OHEARN P, 2004, ACM S PRINC PROGR LA, P268
   OHEARN PW, 1995, J ACM, V42, P658, DOI 10.1145/210346.210425
   OHEARN PW, 1992, APPL CATEGORIES COMP, P217
   Oles Frank J., 1982, PhD thesis
   Reddy US, 2003, LECT NOTES COMPUT SC, V2618, P223
   Reddy US, 2002, INFORM COMPUT, V172, P63, DOI 10.1006/inco.2001.2927
   REDDY US, 1997, WHEN PARAMETRICITY I
   REDDY US, 1998, FOOL 5 5 INT WORKSH
   Reynolds J. C., 1981, Algorithmic Languages. Proceedings of the International Symposium, P345
   REYNOLDS J. C., 2000, MILLENIAL PERSPECTIV
   ROBINSON E, 1994, P 9 ANN IEEE S LOG C
   Stark I., 1996, LISP and Symbolic Computation, V9, P77, DOI 10.1007/BF01806033
   STARK I, 1995, THESIS U CAMBRIDGE C
   Tennent H., 1994, CLASSICAL MIND ESSAY, P405
   WADLER P, 1992, ACM SIGPLAN SIGACT S, P1
   WIRTH N, 1966, COMMUN ACM, V9, P413, DOI 10.1145/365696.365702
   Yang H., 2001, Ph.D. thesis
NR 31
TC 22
Z9 22
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR
PY 2004
VL 50
IS 1-3
BP 129
EP 160
DI 10.1016/j.scico.2004.01.007
PG 32
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 804AH
UT WOS:000220271100007
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Renkin, F
   Schlehuber-Caissier, P
   Duret-Lutz, A
   Pommellet, A
AF Renkin, Florian
   Schlehuber-Caissier, Philipp
   Duret-Lutz, Alexandre
   Pommellet, Adrien
TI The Mealy-machine reduction functions of Spot
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Mealy machines; Synthesis; SAT
ID STATE REDUCTION; ALGORITHM
AB We present functions for reducing Mealy machines, initially detailed in our FORTE'22 article. These functions are now integrated into Spot 2.11.2, where they are used as part of the ltlsynt tool for reactive synthesis. Of course, since Spot is a library, these functions can also be used on their own, and we provide Python bindings for easy experiments. The reproducible capsule benchmarks these functions on Mealy machines from various sources, and compare them to the MEMIN tool.
C1 [Renkin, Florian; Schlehuber-Caissier, Philipp; Duret-Lutz, Alexandre; Pommellet, Adrien] EPITAs Res Lab, Le Kremlin Bicetre, France.
RP Duret-Lutz, A (corresponding author), EPITAs Res Lab, Le Kremlin Bicetre, France.
EM adl@lrde.epita.fr
RI Duret-Lutz, Alexandre/I-6764-2017
OI Duret-Lutz, Alexandre/0000-0002-6623-2512
CR Abel A, 2015, ICCAD-IEEE ACM INT, P94, DOI 10.1109/ICCAD.2015.7372555
   Alberto ADB, 2013, OPEN COMPUT SCI, V3, P91, DOI 10.2478/s13537-013-0106-0
   [Anonymous], 2008, J. Satisf. Boolean Model. Comput., DOI 10.3233/sat190039
   Babiak Tomas, 2013, Model Checking Software. 20th International Symposium, SPIN 2013. Proceedings, P81, DOI 10.1007/978-3-642-39176-7_6
   Duret-Lutz A, 2022, LECT NOTES COMPUT SC, V13372, P174, DOI 10.1007/978-3-031-13188-2_9
   Gören S, 2007, COMPUT ELECTR ENG, V33, P58, DOI 10.1016/j.compeleceng.2006.06.001
   Hachtel G. D., 1991, EDAC. Proceedings of the European Conference on Design Automation, P184, DOI 10.1109/EDAC.1991.206387
   Jacobs S, 2019, Arxiv, DOI arXiv:1904.07736
   KAM T, 1994, ACM IEEE D, P684
   Lind-Nielsen J., 2002, Buddy: Binary Decision Diagram package
   MEALY GH, 1955, AT&T TECH J, V34, P1045, DOI 10.1002/j.1538-7305.1955.tb03788.x
   Michaud T., 2018, P 7 WORKSHOP SYNTHES
   Paull M.C., 1959, IRE Trans. Electron. Comput. EC, P356
   Pena JM, 1999, IEEE T COMPUT AID D, V18, P1619, DOI 10.1109/43.806807
   PFLEEGER CP, 1973, IEEE T COMPUT, VC 22, P1099, DOI 10.1109/T-C.1973.223655
   Renkin F., 2022, THESIS SORBONNE U PA
   Renkin F, 2022, LECT NOTES COMPUT SC, V13273, P114, DOI 10.1007/978-3-031-08679-3_8
NR 17
TC 0
Z9 0
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD AUG
PY 2023
VL 230
AR 102995
DI 10.1016/j.scico.2023.102995
EA JUL 2023
PG 5
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA N8KS4
UT WOS:001039444500001
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Liu, KA
   Mahmoud, K
   Yoo, J
   Liu, YD
AF Liu, Kenan
   Mahmoud, Khaled
   Yoo, Joonhwan
   Liu, Yu David
TI Vincent: Green hot methods in the JVM
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Energy efficiency; JVM; Just-in-time compilation
ID DYNAMIC VOLTAGE; ENERGY; JALAPENO; POWER; PERFORMANCE; MANAGEMENT
AB In this paper, we show the energy efficiency of Java applications can be improved by applying Dynamic Voltage and Frequency Scaling (DVFS) inside the Java Virtual Machine (JVM). We augment the JVM to record the energy consumption of hot methods as the underlying CPU is run at different clock frequencies; after all the frequency possibilities for a method have been explored, the execution of the method in an optimized run is set to the CPU frequency that leads to the most energy-efficient execution for that method. We introduce a new sampling methodology to overcome the dual challenges in our design: both the underlying measurement mechanism for energy profiling and the DVFS for energy optimization are overhead-prone. We extend JikesRVM with our approach and benchmark it over the DaCapo suite on a server-class Linux machine. Experiments show we are able to use 14.9% less energy than built-in power management in Linux, and improve energy efficiency by 21.1% w.r.t. the metric of Energy-Delay Product (EDP). & COPY; 2023 Elsevier B.V. All rights reserved.
C1 [Liu, Kenan; Mahmoud, Khaled; Yoo, Joonhwan; Liu, Yu David] SUNY Binghamton, Binghamton, NY 13902 USA.
C3 State University of New York (SUNY) System; State University of New York
   (SUNY) Binghamton
RP Liu, YD (corresponding author), SUNY Binghamton, Binghamton, NY 13902 USA.
EM kliu20@binghamton.edu; kmahmou1@binghamton.edu; jyoo45@binghamton.edu;
   davidl@binghamton.edu
OI Liu, Yu David/0000-0002-2768-3898
FU US NSF [CNS-1910532]
FX Acknowledgements This project is supported by the US NSF award
   CNS-1910532.
CR Accardi Kristen., 2015, BALANCING POWER PERF
   Akram S, 2017, IEEE T COMPUT, V66, P601, DOI 10.1109/TC.2016.2609903
   Alpern B, 2000, IBM SYST J, V39, P211, DOI 10.1147/sj.391.0211
   Alpern B, 1999, ACM SIGPLAN NOTICES, V34, P314, DOI 10.1145/320385.320418
   [Anonymous], 2016, P 2016 INT C SUP ICS
   Arnold M, 2005, INT SYM CODE GENER, P51, DOI 10.1109/CGO.2005.9
   Arnold M, 2000, ACM SIGPLAN NOTICES, V35, P47, DOI 10.1145/354222.353175
   Babakol T, 2022, PROC INT CONF SOFTW, P823, DOI 10.1145/3510003.3510145
   Babakol T, 2020, PROCEEDINGS OF THE 28TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE '20), P976, DOI 10.1145/3368089.3409703
   Baek W, 2010, PLDI '10: PROCEEDINGS OF THE 2010 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P198, DOI 10.1145/1806596.1806620
   Bartenstein Thomas, 2013, P 35 INT C SOFTW ENG
   Blackburn SM, 2006, ACM SIGPLAN NOTICES, V41, P169, DOI 10.1145/1167515.1167488
   Burd T. D., 1995, Proceedings of the Twenty-Eighth Hawaii International Conference on System Sciences, P288, DOI 10.1109/HICSS.1995.375385
   Canino A, 2018, ESEC/FSE'18: PROCEEDINGS OF THE 2018 26TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P703, DOI 10.1145/3236024.3236076
   Canino A, 2017, ACM SIGPLAN NOTICES, V52, P217, DOI [10.1145/3140587.3062356, 10.1145/3062341.3062356]
   Cao T, 2012, CONF PROC INT SYMP C, P225
   CHANDRAKASAN AP, 1992, IEEE J SOLID-ST CIRC, V27, P473, DOI 10.1109/4.126534
   CHEN G, 2002, ACM T EMBED COMPUT S, V1, P27, DOI DOI 10.1145/581888.581892
   Cohen M., 2012, OOPSLA'12
   David Howard, 2010, Proceedings of the 16th ACM/IEEE International Symposium on Low Power Electronics and Design (ISLPED 2010), P189, DOI 10.1145/1840845.1840883
   Esmaeilzadeh H, 2011, ACM SIGPLAN NOTICES, V46, P319, DOI 10.1145/1961296.1950402
   Gao X, 2017, INT CON DISTR COMP S, P492, DOI 10.1109/ICDCS.2017.218
   Haldar Vivek, 2003, 0321 SICS
   Hoffmann H, 2015, SOSP'15: PROCEEDINGS OF THE TWENTY-FIFTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P198, DOI 10.1145/2815400.2815403
   Hoffmann H, 2011, ACM SIGPLAN NOTICES, V46, P199, DOI 10.1145/1961296.1950390
   Hsu CH, 2003, ACM SIGPLAN NOTICES, V38, P38, DOI 10.1145/780822.781137
   Hussein Ahmed, 2015, P 8 ACM INT SYST STO, p13:1
   Intel, EN AN US GUID
   Intel, INT 64 IA 32 ARCH SO, V3
   Isci C, 2003, I S WORKL CHAR PROC, P108, DOI 10.1109/WWC.2003.1249062
   Kambadur M, 2014, ACM SIGPLAN NOTICES, V49, P329, DOI [10.1145/2660193.2660196, 10.1145/2714064.2660196]
   Kansal A, 2013, ACM SIGPLAN NOTICES, V48, P661, DOI [10.1145/2544173.2509541, 10.1145/2509136.2509541]
   Lea Doug, 2000, JAVA, P36
   Lin B, 2009, INT SYM PERFORM ANAL, P11, DOI 10.1109/ISPASS.2009.4919634
   Liu Kenan, 2015, FASE 2015
   Liu Yu David, 2012, P ASPLOS 12 PROVACTI
   Liu Yu David, 2012, P WORKSH PROGR LANG
   Lucia B, 2015, ACM SIGPLAN NOTICES, V50, P575, DOI [10.1145/2737924.2737978, 10.1145/2813885.2737978]
   Manotas I, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P503, DOI 10.11455/2568225.2568297
   Masanet E, 2020, SCIENCE, V367, P984, DOI 10.1126/science.aba3758
   Noureddine A, 2015, AUTOMAT SOFTW ENG, V22, P291, DOI 10.1007/s10515-014-0171-1
   Pathak Abhijit D., 2012, Proceedings of the PCIM ASIA 2012. International Conference and Exhibition for Power Electronics, Intelligent Motion, Renewable Energy and Energy Management, P29
   Pinto G, 2017, IEEE INT CONF AUTOM, P765, DOI 10.1109/ASE.2017.8115687
   Pinto G, 2016, PROC IEEE INT CONF S, P20, DOI 10.1109/ICSME.2016.34
   Pinto G, 2014, ACM SIGPLAN NOTICES, V49, P345, DOI [10.1145/2714064.2660235, 10.1145/2660193.2660235]
   Ribic H, 2014, ACM SIGPLAN NOTICES, V49, P513, DOI 10.1145/2541940.2541971
   Sampson A, 2011, ACM SIGPLAN NOTICES, V46, P164, DOI 10.1145/1993316.1993518
   Saputra H, 2002, ACM SIGPLAN NOTICES, V37, P2, DOI 10.1145/566225.513832
   Sartor JB, 2012, ACM SIGPLAN NOTICES, V47, P281, DOI 10.1145/2398857.2384638
   Sherwood T, 2002, ACM SIGPLAN NOTICES, V37, P45, DOI 10.1145/605432.605403
   Sherwood T, 2001, 2001 INTERNATIONAL CONFERENCE ON PARALLEL ARCHITECTURES AND COMPILATION TECHNIQUES, PROCEEDINGS, P3, DOI 10.1109/PACT.2001.953283
   SIDIROPOULOS S, 1994, 1994 SYMPOSIUM ON VLSI CIRCUITS, P43
   Smith L.A., 2001, SC 01 P 2001 ACM IEE, P6
   Sorber J, 2007, SENSYS'07: PROCEEDINGS OF THE 5TH ACM CONFERENCE ON EMBEDDED NETWORKED SENSOR SYSTEMS, P161
   The Linux Kernel Archives, LINUX CPUFREQ GOVERN
   The Linux Kernel Archives, INTEL P STATE DRIVER
   Vijaykrishnan N., P 1 JAVA VIRT MACH R
   WEISER M, 1994, OPERATING SYSTEMS DESIGN AND IMPLEMENTATION (OSDI), P13
   Wu Q, 2005, INT SYMP MICROARCH, P271
   Xie F, 2003, ACM SIGPLAN NOTICES, V38, P49, DOI 10.1145/780822.781138
   Zeng H, 2003, USENIX ASSOCIATION PROCEEDINGS OF THE GENERAL TRACK, P43
   Zhu HS, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 1, P767, DOI 10.1109/ICSE.2015.89
NR 62
TC 0
Z9 0
U1 3
U2 5
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD AUG
PY 2023
VL 230
AR 102962
DI 10.1016/j.scico.2023.102962
EA JUN 2023
PG 26
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA M0NR7
UT WOS:001027178300001
DA 2024-07-18
ER

PT J
AU Macedo, N
   Cunha, A
   Pereira, J
   Carvalho, R
   Silva, R
   Paiva, ACR
   Ramalho, MS
   Silva, D
AF Macedo, Nuno
   Cunha, Alcino
   Pereira, Jose
   Carvalho, Renato
   Silva, Ricardo
   Paiva, Ana C. R.
   Ramalho, Miguel Sozinho
   Silva, Daniel
TI Experiences on teaching alloy with an automated assessment platform
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Teaching formal methods; Alloy; Automated assessment
AB This paper presents Alloy4Fun, a web application that enables online editing and sharing of Alloy models and instances (including dynamic ones developed with the Electrum extension), to be used mainly in an educational context. By introducing secret paragraphs and commands in the models, Alloy4Fun allows the distribution and automated assessment of simple specification challenges, a mechanism that enables students to learn the language at their own pace. Alloy4Fun stores all versions of shared and analyzed models, as well as derivation trees that depict how they evolved over time: this wealth of information can be mined by researchers or tutors to identify, for example, learning breakdowns in the class or typical mistakes made by Alloy users. A data analysis library is also provided to support this process. Alloy4Fun has been used in formal methods graduate courses for 3 years and for the latest editions we present results regarding its adoption by the students, as well as preliminary insights regarding the most common bottlenecks when learning Alloy (and Electrum). (C) 2021 Elsevier B.V. All rights reserved.
C1 [Macedo, Nuno; Cunha, Alcino; Carvalho, Renato; Paiva, Ana C. R.; Ramalho, Miguel Sozinho] INESC TEC, Porto, Portugal.
   [Macedo, Nuno; Paiva, Ana C. R.; Ramalho, Miguel Sozinho; Silva, Daniel] Univ Porto, Fac Engn, Porto, Portugal.
   [Cunha, Alcino; Pereira, Jose; Carvalho, Renato; Silva, Ricardo] Univ Minho, Braga, Portugal.
C3 INESC TEC; Universidade do Porto; Universidade do Minho
RP Macedo, N (corresponding author), INESC TEC, Porto, Portugal.
EM nuno.m.macedo@inesctec.pt
RI Macedo, Nuno/A-1539-2013; Silva, Daniel/KIH-3905-2024; Cunha,
   Alcino/I-4104-2015; Paiva, Ana/B-1136-2014
OI Macedo, Nuno/0000-0002-4817-948X; Cunha, Alcino/0000-0002-2714-8027;
   Paiva, Ana/0000-0003-3431-8060
FU ERDF - European Regional Development Fund through the Operational
   Programme for Competitiveness and Internationalisation - COMPETE 2020
   Programme; Portuguese funding agency, FCT - Fundacao para a Ciencia e a
   Tecnologia [POCI-01-0145-FEDER-016826]
FX This work is financed by the ERDF -European Regional Development Fund
   through the Operational Programme for Competitiveness and
   Internationalisation -COMPETE 2020 Programme and by National Funds
   through the Portuguese funding agency, FCT -Fundac.ao para a Ciencia e a
   Tecnologia, within project POCI-01-0145-FEDER-016826.
CR Ball T., 2013, PROC PASTE, P49, DOI [10.1145/2462029.2462031, DOI 10.1145/2462029.2462031]
   Boyatt R., 2008, FORMED, P71
   Brida SG, 2021, PROC INT CONF SOFTW, P1135, DOI 10.1109/ICSE43902.2021.00105
   Brunel J, 2019, ELECTRON P THEOR COM, P63, DOI 10.4204/EPTCS.310.7
   Chong Liu, 2019, Dependable Software Engineering. Theories, Tools, and Applications. 5th International Symposium, SETTA 2019. Proceedings. Lecture Notes in Computer Science (LNCS 11951), P38, DOI 10.1007/978-3-030-35540-1_3
   Couto R, 2018, ELECTRON P THEOR COM, P37, DOI 10.4204/EPTCS.284.4
   Edwards J., 2004, Software Engineering Notes, V29, P189, DOI 10.1145/1041685.1029921
   Jackson D, 2012, SOFTWARE ABSTRACTIONS: LOGIC, LANGUAGE, AND ANALYSIS, P1
   Macedo Nuno, 2020, Rigorous State-Based Methods. 7th International Conference, ABZ 2020. Proceedings. Lecture Notes in Computer Science (LNCS 12071), P61, DOI 10.1007/978-3-030-48077-6_5
   Macedo N., 2021, ALLOY4FUN DATASET 20, DOI [10.5281/zenodo.4676413, DOI 10.5281/ZENODO.4676413]
   Macedo N, 2016, FSE'16: PROCEEDINGS OF THE 2016 24TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON FOUNDATIONS OF SOFTWARE ENGINEERING, P373, DOI 10.1145/2950290.2950318
   Mangaroska K, 2019, IEEE T LEARN TECHNOL, V12, P516, DOI 10.1109/TLT.2018.2868673
   Pereira J., 2016, THESIS U MINHO THESIS U MINHO
   Sioson A.A., 2013, IISA, P1
   Tillmann N, 2008, LECT NOTES COMPUT SC, V4966, P134
   Tillmann N, 2013, IEEE INT CONF AUTOM, P730, DOI 10.1109/ASE.2013.6693144
NR 16
TC 7
Z9 7
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 1
PY 2021
VL 211
AR 102690
DI 10.1016/j.scico.2021.102690
EA JUL 2021
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA TY1NH
UT WOS:000683550800003
OA Green Submitted, Green Published
DA 2024-07-18
ER

PT J
AU Zeller, P
   Bieniusa, A
   Poetzsch-Heffter, A
AF Zeller, Peter
   Bieniusa, Annette
   Poetzsch-Heffter, Arnd
TI Combining state- and event-based semantics to verify highly available
   applications
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Formal verification; Concurrency; Consistency
ID SYSTEM
AB Replicated databases are attractive for managing the data of distributed applications. To achieve high availability, low latency, and high throughput for such applications, consistency has to be weakened. This comes at a price: it is harder to prove application correctness. In this paper, we describe a new and powerful specification and verification technique for highly available applications together with the tool Replissthat partiallyautomates its use.
   The verification technique is based on existing event-based semantics for database replication and embeds the semantics into a classical state-based verification approach for application programs. As a central contribution, we carefully designed the specification and programming framework in such a way, that the complex concurrent semantics are reduced to sequential verification, which is much easier to handle and provide a betterbasis for automated tool support. We prove the soundness of this reduction and a restricted form of completeness. All these proofs and the underlying semantics of the system have been formalized in Isabelle/HOL. (C) 2021 Elsevier B.V. All rights reserved.
C1 [Zeller, Peter; Bieniusa, Annette; Poetzsch-Heffter, Arnd] TU Kaiserslautern, Fachbereich Informat, Gebaude 34,Postfach 30 49, D-67653 Kaiserslautern, Germany.
C3 University of Kaiserslautern
RP Zeller, P (corresponding author), TU Kaiserslautern, Fachbereich Informat, Gebaude 34,Postfach 30 49, D-67653 Kaiserslautern, Germany.
EM p_zeller@cs.uni-kl.de; bieniusa@cs.uni-kl.de; poetzsch@cs.uni-kl.de
OI Zeller, Peter/0000-0001-7859-2219
FU EU [732505]
FX This research is supported in part by the EU H2020 project "LightKone"
   (732505) https://www.lightkone.eu/.
CR Abadi DJ, 2012, COMPUTER, V45, P37, DOI 10.1109/MC.2012.33
   [Anonymous], 2019, LCP ISABELLE 2019
   [Anonymous], 1995, P 1995 ACM SIGMOD IN
   Barrett Clark, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P171, DOI 10.1007/978-3-642-22110-1_14
   Barrett C.W., 2018, Handbook of Model Checking, P305, DOI DOI 10.1007/978-3-319-10575-8_11
   Beckert B, 2003, LECT NOTES COMPUT SC, V2621, P246
   Berdine J, 2005, LECT NOTES COMPUT SC, V3780, P52
   Bodik Rastislav, 2016, P 43 ANN ACM SIGPLAN
   Burckhardt S, 2014, FOUND TRENDS PROGRAM, V1, P2
   Burckhardt S, 2014, ACM SIGPLAN NOTICES, V49, P271, DOI 10.1145/2535838.2535848
   COOK SA, 1978, SIAM J COMPUT, V7, P70, DOI 10.1137/0207005
   Dongol B, 2015, ACM COMPUT SURV, V48, DOI 10.1145/2796550
   Gilbert Seth, 2002, SIGACT NEWS, V33
   Gotsman A, 2016, ACM SIGPLAN NOTICES, V51, P371, DOI 10.1145/2914770.2837625
   Gotsman A, 2015, LECT NOTES COMPUT SC, V9032, P585, DOI 10.1007/978-3-662-46669-8_24
   HANTLER SL, 1976, COMPUT SURV, V8, P331, DOI 10.1145/356674.356677
   Jones CB, 2010, REFLECTIONS ON THE WORK OF C A R HOARE, P167, DOI 10.1007/978-1-84882-912-1_8
   Kaki Gowtham, 2018, 32 ACM SIGPLAN INT C
   Lakshman Avinash, 2010, Operating Systems Review, V44, P35, DOI 10.1145/1773912.1773922
   LAMPORT L, 1979, IEEE T COMPUT, V28, P690, DOI 10.1109/TC.1979.1675439
   Lesani M, 2016, ACM SIGPLAN NOTICES, V51, P357, DOI 10.1145/2914770.2837622
   LIPTON RJ, 1975, COMMUN ACM, V18, P717, DOI 10.1145/361227.361234
   Lloyd W, 2011, SOSP 11: PROCEEDINGS OF THE TWENTY-THIRD ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P401
   Müller P, 2016, LECT NOTES COMPUT SC, V9779, P405, DOI 10.1007/978-3-319-41528-4_22
   Nair Sreeja, 2019, ARXIV190302759ABS ARXIV190302759ABS
   Najafzadeh M, 2016, PROCEEDINGS OF THE 2ND WORKSHOP ON THE PRINCIPLES AND PRACTICE OF CONSISTENCY FOR DISTRIBUTED DATA, PAPOC 2016, DOI [10.1145/2911151.2911160, 10.1109/CPE-POWERENG50821.2021.9501173]
   Rustan K, 2010, LECT NOTES ARTIF INT, V6355, P348, DOI 10.1007/978-3-642-17511-4_20
   Schwerhoff Malte, 2016, THESIS ETZ ZURICH THESIS ETZ ZURICH
   Shapiro Marc, 2011, 7506 INRIA RR 7506 INRIA RR
   Shapiro Marc, 2011, SSS
   Sivaramakrishnan KC, 2015, ACM SIGPLAN NOTICES, V50, P413, DOI [10.1145/2813885.2737981, 10.1145/2737924.2737981]
   Sovran Y, 2011, SOSP 11: PROCEEDINGS OF THE TWENTY-THIRD ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P385
   Terry D. B., 1994, Proceedings of the Third International Conference on Parallel and Distributed Information Systems (Cat. No.94TH0668-4), P140, DOI 10.1109/PDIS.1994.331722
   Vishnevskiy S., DISCORD STORES BILLI
   Wilhelm R, 2000, LECT NOTES COMPUT SC, V1781, P1
   Wobber Ted, 2011, P 23 ACM S OP SYST P P 23 ACM S OP SYST P
   Zeller Peter, 2017, P 3 INT WORKSH PRINC P 3 INT WORKSH PRINC
   Zeller Peter, 2014, LECT NOTES COMPUT SC LECT NOTES COMPUT SC, P33
   Zeller Peter, 2019, LECT NOTES COMPUTER, V12018, P213
NR 39
TC 0
Z9 0
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 1
PY 2021
VL 210
AR 102687
DI 10.1016/j.scico.2021.102687
EA JUN 2021
PG 25
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA TH5WZ
UT WOS:000672161400001
DA 2024-07-18
ER

PT J
AU Zhang, YR
   Wu, HY
   Chen, YX
   Mallet, F
AF Zhang, Yuanrui
   Wu, Hengyang
   Chen, Yixiang
   Mallet, Frederic
TI A clock-based dynamic logic for the verification of CCSL specifications
   in synchronous systems
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Dynamic logic; The clock constraint specification language; Synchronous
   systems; Verification; Theorem proving
ID MODEL CHECKING; LANGUAGE; MARTE/CCSL; TIME
AB The Clock Constraint Specification Language (CCSL) is a clock-based specification language for real-time embedded systems. With logical clocks defined as first-class citizens, CCSL provides a natural way for describing clock constraints in synchronous systems - a classical model of concurrency for real-time embedded systems. In this paper, we propose a clock-based dynamic logic called CCSL Dynamic Logic (CDL) for the verification of CCSL specifications in synchronous systems. It extends the first-order dynamic logic with a synchronous execution mechanism in its program model and with CCSL primitives as terms in its logical formulae. We build a sound and relatively complete proof system for CDL to support the verification. Compared with previous approaches for verifying CCSL specifications, which are based on model checking and SMT checking techniques, our approach, which is based on theorem-proving, offers a unified verification framework in which both bounded and unbounded CCSL specifications can be verified. Technically, with the proof system of CDL, a complex CDL formula can be semi-automatically transformed into a set of quantifier-free, arithmetical first-order logic (QF-AFOL) formulae which can be checked by an SMT solver in an efficient way. As a case study, we analyze a simple synchronous system throughout the paper to illustrate how CDL works. We analyze and prove the soundness and completeness of the proof system for CDL. Currently, CDL is partially mechanized in Coq. (C) 2020 Elsevier B.V. All rights reserved.
C1 [Zhang, Yuanrui] Southwest Univ, Sch Math & Stat, Chongqing, Peoples R China.
   [Zhang, Yuanrui] Southwest Univ, Coll Comp & Informat Sci, RISE, Chongqing, Peoples R China.
   [Zhang, Yuanrui; Wu, Hengyang; Chen, Yixiang] East China Normal Univ, CMoE Engn Res Ctr Software Hardware Codesign Tech, Shanghai 200062, Peoples R China.
   [Mallet, Frederic] Univ Cote Azur, CNRS, INRIA, I3S, F-06900 Sophia Antipolis, France.
C3 Southwest University - China; Southwest University - China; East China
   Normal University; Universite Cote d'Azur; Inria; Centre National de la
   Recherche Scientifique (CNRS)
RP Mallet, F (corresponding author), Univ Cote Azur, CNRS, INRIA, I3S, F-06900 Sophia Antipolis, France.
EM zhangyrmath@126.com; Frederic.Mallet@inria.fr
RI Mallet, Frederic/HKW-6782-2023; Mallet, Frédéric/H-3942-2011
OI Mallet, Frédéric/0000-0002-9088-9821
FU French government, through the EUR DS4H Investments in the Future
   project [ANR-17-EURE-0004]
FX This work has been supported by the French government, through the EUR
   DS4H Investments in the Future project managed by the National Research
   Agency (ANR) with the reference number ANR-17-EURE-0004.
CR André C, 2009, LCTES'09: PROCEEDINGS OF THE 2009 ACM SIGPLAN/SIGBED CONFERENCE ON LANGUAGES, COMPILERS, AND TOOLS FOR EMBEDDED SYSTEMS, P167
   [Anonymous], 2009, Res. Rep. RR-6925
   [Anonymous], 2005, UML PROF SCHED PERF
   Arden D.N., 1961, 2 ANN S SWITCHING CI, P133, DOI DOI 10.1109/FOCS.1961.13
   Barrett C., 2017, TECH REP
   Beckert B, 2006, LECT NOTES ARTIF INT, V4130, P266
   BENVENISTE A, 1991, SCI COMPUT PROGRAM, V16, P103, DOI 10.1016/0167-6423(91)90001-E
   BERRY G, 1992, SCI COMPUT PROGRAM, V19, P87, DOI 10.1016/0167-6423(92)90005-V
   Berry Gerard, 1999, The constructive semantics of pure Esterel.
   Bertot Y., 2004, TEXT THEORET COMP S
   Blass Andreas, 2001, ACM Trans. Comput. Logic, V2, P1
   BRZOZOWSKI JA, 1964, J ACM, V11, P481, DOI 10.1145/321239.321249
   Chen B, 2018, J SYST ARCHITECT, V88, P120, DOI 10.1016/j.sysarc.2018.06.002
   COOK SA, 1978, SIAM J COMPUT, V7, P70, DOI 10.1137/0207005
   Du DH, 2018, SCI COMPUT PROGRAM, V166, P71, DOI 10.1016/j.scico.2018.05.005
   Gentzen G, 1935, MATH Z, V39, P176, DOI 10.1007/BF01201353
   Godel K., 1931, Monatshefte fur Mathematik und Physik, V38, P173, DOI 10.1007/BF01700692
   HAREL D, 1982, J COMPUT SYST SCI, V25, P144, DOI 10.1016/0022-0000(82)90003-4
   Harel D., 1979, Lecture Notes in Computer Science (LNCS), V68
   Harel D., 2001, HDB PHILOS LOGIC, P99, DOI [DOI 10.1145/568438.568456, 10.1145/568438.568456]
   HOARE CAR, 1969, COMMUN ACM, V12, P576, DOI 10.1145/363235.363259
   Jones C. B., 1983, Information Processing 83. Proceedings of the IFIP 9th World Computer Congress, P321
   Laurence MR, 2011, LECT NOTES COMPUT SC, V6663, P248, DOI 10.1007/978-3-642-21070-9_19
   Leary Christopher C., 2015, FRIENDLY INTRO MATH
   Mallet F, 2015, SCI COMPUT PROGRAM, V106, P78, DOI 10.1016/j.scico.2015.03.001
   Mallet F, 2013, P ACM IEEE INT CONF, P157
   Mallet F, 2010, INNOV SYST SOFTW ENG, V6, P99, DOI 10.1007/s11334-009-0109-0
   Mallet F, 2008, INNOV SYST SOFTW ENG, V4, P309, DOI 10.1007/s11334-008-0055-2
   Mao Y, 2011, INT CONF CLOUD COMPU, P23, DOI 10.1109/CCIS.2011.6045025
   Nipkow T., 2002, ISABELLE HOL PROOF A, DOI DOI 10.1007/3-540-45949-9
   Olivencia-Yurvati AH, 2012, WOODHEAD PUBL MATER, P86
   OMG, 2011, BUSINESS PROCESS MOD
   PELEG D, 1987, J COMPUT SYST SCI, V35, P23, DOI 10.1016/0022-0000(87)90035-3
   Platzer A, 2007, LECT NOTES COMPUT SC, V4548, P216
   Platzer A, 2007, LECT NOTES COMPUT SC, V4514, P457, DOI 10.1007/978-3-540-72734-7_32
   Platzer A, 2010, LOGICAL ANALYSIS OF HYBRID SYSTEMS: PROVING THEOREMS FOR COMPLEX DYNAMICS, P335, DOI 10.1007/978-3-642-14509-4_9
   Pratt V.R., 1976, 17 ANN S FDN COMPUTE, P109, DOI [10.1109/SFCS.1976.27, DOI 10.1109/SFCS.1976.27]
   Rustan K., 2007, Lecture Notes in Computer Science (LNCS), V4334
   Suryadevara J, 2013, LECT NOTES COMPUT SC, V8137, P1, DOI 10.1007/978-3-642-40561-7_1
   Yin L, 2011, 2011 16TH IEEE INTERNATIONAL CONFERENCE ON ENGINEERING OF COMPLEX COMPUTER SYSTEMS (ICECCS), P65, DOI 10.1109/ICECCS.2011.14
   Zhang M, 2018, SCI COMPUT PROGRAM, V154, P42, DOI 10.1016/j.scico.2017.08.015
   Zhang M, 2017, ACM SIGPLAN NOTICES, V52, P61, DOI [10.1145/3078633.3081035, 10.1145/3140582.3081035]
   Zhang M, 2016, LECT NOTES COMPUT SC, V10009, P433, DOI 10.1007/978-3-319-47846-3_27
   Zhang Y., 2019, COMMUNICATIONS COMPU, V1008, P101
   Zhang YR, 2014, 2014 THEORETICAL ASPECTS OF SOFTWARE ENGINEERING CONFERENCE (TASE), P201, DOI 10.1109/TASE.2014.10
NR 45
TC 0
Z9 0
U1 0
U2 4
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR 1
PY 2021
VL 203
AR 102591
DI 10.1016/j.scico.2020.102591
PG 51
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA PQ7UT
UT WOS:000606750500007
OA Green Published, Bronze
DA 2024-07-18
ER

PT J
AU Pereira, R
   Couto, M
   Ribeiro, F
   Rua, R
   Cunha, J
   Fernandes, JP
   Saraiva, J
AF Pereira, Rui
   Couto, Marco
   Ribeiro, Francisco
   Rua, Rui
   Cunha, Jacome
   Fernandes, Joao Paulo
   Saraiva, Joao
TI Ranking programming languages by energy efficiency
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Energy efficiency; Programming languages; Language benchmarking; Green
   software
AB This paper compares a large set of programming languages regarding their efficiency, including from an energetic point-of-view. Indeed, we seek to establish and analyze different rankings for programming languages based on their energy efficiency. The goal of being able to rank programming languages based on their energy efficiency is both recent, and certainly deserves further studies.
   We have taken rigorous and strict solutions to 10 well defined programming problems, expressed in (up to) 27 programming languages, from the well known Computer Language Benchmark Game repository. This repository aims to compare programming languages based on a strict set of implementation rules and configurations for each benchmarking problem. We have also built a framework to automatically, and systematically, run, measure and compare the energy, time, and memory efficiency of such solutions. Ultimately, it is based on such comparisons that we propose a series of efficiency rankings, based on single and multiple criteria.
   Our results show interesting findings, such as how slower/faster languages can consume less/more energy, and how memory usage influences energy consumption. We also present a simple way to use our results to provide software engineers and practitioners support in deciding which language to use when energy efficiency is a concern.
   In addition, we further validate our results and rankings against implementations from a chrestomathy program repository, Rosetta Code., by reproducing our methodology and benchmarking system. This allows us to understand how the results and conclusions from our rigorously and well defined benchmarked programs compare to those based on more representative and real-world implementations. Indeed our results show that the rankings do not change apart from one programming language. (C) 2021 Elsevier B.V. All rights reserved.
C1 [Pereira, Rui] Univ Beira Interior, C4 Ctr Competencias Cloud Comp C4 UBI, Rua Marques dAvila & Bolama, P-6201001 Covilha, Portugal.
   [Pereira, Rui; Couto, Marco; Ribeiro, Francisco; Rua, Rui; Cunha, Jacome; Saraiva, Joao] INESC Tec, HASLab, Braga, Portugal.
   [Couto, Marco; Ribeiro, Francisco; Rua, Rui; Cunha, Jacome; Saraiva, Joao] Univ Minho, Braga, Portugal.
   [Fernandes, Joao Paulo] Univ Porto, Dept Engn Informat, Fac Engn, Porto, Portugal.
   [Fernandes, Joao Paulo] CISUC, Coimbra, Portugal.
C3 Universidade da Beira Interior; INESC TEC; Universidade do Minho;
   Universidade do Porto; Universidade de Coimbra
RP Pereira, R (corresponding author), Univ Beira Interior, C4 Ctr Competencias Cloud Comp C4 UBI, Rua Marques dAvila & Bolama, P-6201001 Covilha, Portugal.; Pereira, R (corresponding author), INESC Tec, HASLab, Braga, Portugal.
EM rui.a.pereira@inesctec.pt; marco.l.couto@inesctec.pt;
   francisco.j.ribeiro@inesctec.pt; rui.a.rua@inesctec.pt;
   jacome@di.uminho.pt; jpf@dei.uc.pt; jas@di.uminho.pt
RI Fernandes, João/IUN-2117-2023; Saraiva, João/L-6113-2015; Pereira,
   Rui/GMW-9448-2022; Cunha, Jacome/A-1213-2013; Fernandes, Joao
   Paulo/A-1929-2013
OI Saraiva, João/0000-0002-5686-7151; Pereira, Rui/0000-0002-5801-7345;
   Ribeiro, Francisco/0000-0003-0427-4503; Cunha,
   Jacome/0000-0002-4713-3834; Couto, Marco/0000-0003-2333-6095; Ramada
   Rua, Rui Antonio/0000-0003-2979-0635; Fernandes, Joao
   Paulo/0000-0002-1952-9460
FU ERDF - European Regional Development Fund through the Operational
   Programme for Competitiveness and Internationalisation - COMPETE 2020
   Programme [POCI-01-0145-FEDER-006961]; National Funds through the
   Portuguese funding agency, FCT - Fundacao para a Ciencia e a Tecnologia
   [UID/EEA/50014/2013 (POCI-010145-FEDER-016718), PTDC/CCI-INF/29583/2017
   (POCI-01-0145-FEDER-029583)]; FCT [SFRH/BD/132485/2017,
   SFRH/BD/144938/2019, SFRH/BD/146624/2019]; C4 - Centro de Competencias
   em Cloud Computing [01-0145-FEDER-000019]; European Regional Development
   Fund (ERDF); Erasmus+ Key Action 2 (Strategic partnership for higher
   education) [2020-1-PT01-KA203-078646];  [C4_SMDS_L1-1_D]; Fundação para
   a Ciência e a Tecnologia [SFRH/BD/146624/2019, SFRH/BD/132485/2017,
   SFRH/BD/144938/2019] Funding Source: FCT
FX We would like to thank Luis Cruz (University of Porto) for the help that
   he provided. This work is financed by the ERDF -European Regional
   Development Fund through the Operational Programme for Competitiveness
   and Internationalisation - COMPETE 2020 Programme within project
   POCI-01-0145-FEDER-006961, and by National Funds through the Portuguese
   funding agency, FCT - Fundacao para a Ciencia e a Tecnologia within
   projects: UID/EEA/50014/2013 (POCI-010145-FEDER-016718) and
   PTDC/CCI-INF/29583/2017 (POCI-01-0145-FEDER-029583). The second, third,
   and fourth author are also sponsored by FCT grant SFRH/BD/132485/2017,
   SFRH/BD/144938/2019, and SFRH/BD/146624/2019 respectively. This work is
   also supported by operation Centro-01-0145-FEDER-000019 - C4 - Centro de
   Competencias em Cloud Computing, cofinanced by the European Regional
   Development Fund (ERDF) through the Programa Operacional Regional do
   Centro (Centro 2020), in the scope of the Sistema de Apoio a
   Investigacao Cientifica e Tecnologica - Programas Integrados de IC&DT,
   and the first author was financed by post-doc grant reference
   C4_SMDS_L1-1_D. Additionally, this paper acknowledges the support of the
   Erasmus+ Key Action 2 (Strategic partnership for higher education)
   project No. 2020-1-PT01-KA203-078646: "SusTrainable -Promoting
   Sustainability as a Fundamental Driver in Software Development Training
   and Education". The information and views set out in this paper are
   those of the author(s) and do not necessarily reflect the official
   opinion of the European Union. Neither the European Union institutions
   and bodies nor any person acting on their behalf may be held responsible
   for the use which may be made of the information contained therein.
CR Abdulsalam Sarah, 2015, 2015 Sixth International Green and Sustainable Computing Conference (IGSC), P1, DOI 10.1109/IGCC.2015.7393699
   ANDERSON TW, 1952, ANN MATH STAT, V23, P193, DOI 10.1214/aoms/1177729437
   Chowdhury SA, 2016, 13TH WORKING CONFERENCE ON MINING SOFTWARE REPOSITORIES (MSR 2016), P49, DOI [10.1145/2901739.2901763, 10.1109/MSR.2016.015]
   Cook T. D., 1979, QUASIEXPERIMENTATION
   Couto M, 2020, 2020 IEEE/ACM INTERNATIONAL CONFERENCE ON TECHNICAL DEBT, TECHDEBT, P62, DOI 10.1145/3387906.3388628
   Couto M, 2020, PROCEEDINGS OF THE 2020 IEEE 27TH INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER '20), P217, DOI [10.1109/SANER48275.2020.9054858, 10.1109/saner48275.2020.9054858]
   Couto M, 2017, 21ST INTERNATIONAL SYSTEMS & SOFTWARE PRODUCT LINE CONFERENCE (SPLC 2017), VOL 1, P84, DOI 10.1145/3106195.3106214
   Couto M, 2017, PROCEEDINGS OF THE 21ST BRAZILIAN SYMPOSIUM ON PROGRAMMING LANGUAGES (SBLP 2017), DOI 10.1145/3125374.3125382
   Couto M, 2014, LECT NOTES COMPUT SC, V8771, P77, DOI 10.1007/978-3-319-11863-5_6
   Cruz Luis, 2017, 2017 IEEE/ACM 4th International Conference on Mobile Software Engineering and Systems (MOBILESoft). Proceedings, P46, DOI 10.1109/MOBILESoft.2017.19
   Cruz L, 2021, IEEE T SOFTWARE ENG, V47, P2260, DOI 10.1109/TSE.2019.2946163
   Cruz L, 2019, EMPIR SOFTW ENG, V24, P2209, DOI 10.1007/s10664-019-09682-0
   Deb K, 2005, EVOL COMPUT, V13, P501, DOI 10.1162/106365605774666895
   Deb K, 2002, IEEE T EVOLUT COMPUT, V6, P182, DOI 10.1109/4235.996017
   Fangwei Ding, 2011, Proceedings of the 2011 IEEE International Conference on Internet of Things and 4th IEEE International Conference on Cyber, Physical and Social Computing (iThings/CPSCom 2011), P610, DOI 10.1109/iThings/CPSCom.2011.122
   Georgiou S, 2018, IEEE WORK CONF MIN S, P303, DOI 10.1145/3196398.3196414
   Gouy I, The computer language benchmarks game
   Hahnel Marcus, 2012, Performance Evaluation Review, V40, P13
   Hao S, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P92, DOI 10.1109/ICSE.2013.6606555
   Hasan S, 2016, PROC INT CONF SOFTW, P225, DOI 10.1145/2884781.2884869
   Homescu A, 2012, ACM SIGPLAN NOTICES, V47, P25, DOI 10.1145/2168696.2047854
   Jabbarvand R, 2015, 2015 IEEE/ACM FOURTH INTERNATIONAL WORKSHOP ON GREEN AND SUSTAINABLE SOFTWARE (GREENS), P8, DOI 10.1109/GREENS.2015.9
   JUNIOR WD, 2019, 2019 IEEE ACM 16 INT, P160, DOI DOI 10.1109/MSR.2019.00033
   Kim Seung-Woo, 2015, INTEL R POWER GOVERN
   Li D, 2013, P 2013 INT S SOFTW T, P78, DOI DOI 10.1145/2483760.2483780
   Li D, 2014, INT WORKS EARTH OB
   Li W.H., 2013, P 2013 INT C PRINC P, P101, DOI DOI 10.1145/2500828.2500838
   Lima LG, 2019, J SYST SOFTWARE, V149, P554, DOI 10.1016/j.jss.2018.12.014
   Lima LG, 2016, 2016 IEEE 23RD INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER), VOL 1, P517, DOI 10.1109/SANER.2016.85
   Linares-Vasquez M., 2014, Proceedings of the 11th Working Conference on Mining Software Repositories, P2
   Liu KN, 2015, LECT NOTES COMPUT SC, V9033, P316, DOI 10.1007/978-3-662-46675-9_21
   Manotas I, 2016, PROC INT CONF SOFTW, P237, DOI 10.1145/2884781.2884810
   Manotas I, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P503, DOI 10.11455/2568225.2568297
   Names L. Rea, 2016, DESIGNING CONDUCTING
   Oliveira W, 2017, IEEE WORK CONF MIN S, P42, DOI 10.1109/MSR.2017.66
   Oliveira W, 2016, 2016 IEEE 23RD INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER), VOL 1, P589, DOI 10.1109/SANER.2016.93
   Pang C, 2016, IEEE SOFTWARE, V33, P83, DOI 10.1109/MS.2015.83
   Pereira Rui, 2016, 2016 IEEE/ACM 5th International Workshop on Green and Sustainable Software (GREENS), P15, DOI 10.1109/GREENS.2016.011
   Pereira R., 2017, P 39 INT C SOFTW ENG
   Pereira R, 2020, J SYST SOFTWARE, V161, DOI 10.1016/j.jss.2019.110463
   Pereira R, 2017, SLE'17: PROCEEDINGS OF THE 10TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON SOFTWARE LANGUAGE ENGINEERING, P256, DOI 10.1145/3136014.3136031
   Pereira R, 2017, PROC IEEE ACM INT C, P238, DOI 10.1109/ICSE-C.2017.80
   Pinto G., 2014, P 11 WORK C MIN SOFT, P22
   Pinto G, 2017, COMMUN ACM, V60, P68, DOI 10.1145/3154384
   Pinto G, 2014, ACM SIGPLAN NOTICES, V49, P345, DOI [10.1145/2714064.2660235, 10.1145/2660193.2660235]
   Rotem E, 2012, IEEE MICRO, V32, P20, DOI 10.1109/MM.2012.12
   Rua R., 2020, P 7 INT C MOB SOFTW
   Sahin C., 2012, 2012 First International Workshop on Green and Sustainable Software (GREENS), P55, DOI 10.1109/GREENS.2012.6224257
   Sahin Cagri., 2014, Proceedings of the 8th ACM/IEEE International Symposium on Empirical Software Engineering and Measurement, p36:1, DOI 10.1145/2652524.2652538
   Schulze M, 2011, SOC CHOICE WELFARE, V36, P267, DOI 10.1007/s00355-010-0475-4
   SHAPIRO SS, 1965, BIOMETRIKA, V52, P591, DOI 10.1093/biomet/52.3-4.591
   Spearman C, 1904, AM J PSYCHOL, V15, P72, DOI 10.2307/1412159
   St-Amour V, 2012, ACM SIGPLAN NOTICES, V47, P163, DOI 10.1145/2398857.2384629
   Trefethen AE, 2013, J COMPUT SCI-NETH, V4, P444, DOI 10.1016/j.jocs.2013.01.005
   Williams K, 2010, INT SYM CODE GENER, P278
   Wohlin C., 2012, Experimentation in Software Engineering
   Woodruff M., 2013, PARETOPY E NONDOMINA
   Yuki T, 2014, LECT NOTES COMPUT SC, V8664, P169, DOI 10.1007/978-3-319-09967-5_10
   Zhang YS, 2020, IEEE T MULTIMEDIA, V22, P2844, DOI 10.1109/TMM.2020.2966887
NR 59
TC 35
Z9 35
U1 2
U2 34
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAY 1
PY 2021
VL 205
AR 102609
DI 10.1016/j.scico.2021.102609
EA JAN 2021
PG 30
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA RC1OV
UT WOS:000632572100002
OA Green Published, Green Submitted
DA 2024-07-18
ER

PT J
AU de Putter, S
   Lang, F
   Wijs, A
AF de Putter, Sander
   Lang, Frederic
   Wijs, Anton
TI Compositional model checking with divergence preserving branching
   bisimilarity is lively
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 14th International Conference on Formal Aspects of Component Software
   (FACS)
CY OCT 10-13, 2017
CL Braga, PORTUGAL
SP Univ Minho, Engn Sch, INESC, TEC, FCT, Elsevier
DE Divergence-preserving branching bisimilarity; Congruence; Parallel
   composition; Synchronisation; Compositional model checking
ID OPERATIONAL SEMANTICS; MUTUAL EXCLUSION; PARTIAL ORDER; VERIFICATION;
   REDUCTIONS
AB Compositional model checking approaches attempt to limit state space explosion by iteratively combining the behaviour of the components in a concurrent system and reducing the result modulo an appropriate equivalence relation. In this article, we consider Labelled Transition Systems(LTSs), in which transitions are labelled by actions, to describe component behaviour, and LTS networksto combine the behaviour of all components in a system. For an equivalence relation to be useful for the compositional model checking of LTS networks, it should be a congruence for the parallel composition operator that is used to combine component behaviour. Such an operator may define synchronisations between the actions of component transitions.
   An equivalence relation preserving both safety and liveness properties is divergence-preserving branching bisimilarity (DPBB). It has long been generally assumed that DPBB is a congruence for parallel composition. Fokkink, Van Glabbeek and Luttik recently proposed a congruence format that implies that this is the case. In parallel, we were the first to prove, by means of the Coq proof assistant, that DPBB is a congruence for the parallel composition of two LTS networks with synchronisation on transition labels. In the current article, we also consider an instance of our parallel composition operator that is both associative and commutative, which are two essential properties for the compositional construction of state spaces.
   Furthermore, we show that DPBB is a congruence for LTS networks in which many LTSs are composed in parallel at once with support for multi-party synchronisation. Additionally, we discuss how to safely decompose an existing LTS network into components such that their recomposition is equivalent to the original LTS network.
   Finally, to demonstrate the effectiveness of compositional model checking with intermediate DPBB reductions, we discuss the results we obtained after having conducted a number of experiments. (C) 2020 Elsevier B.V. All rights reserved.
C1 [de Putter, Sander; Wijs, Anton] Eindhoven Univ Technol, POB 513, NL-5600 MB Eindhoven, Netherlands.
   [Lang, Frederic] Univ Grenoble Alpes, INRIA, CNRS, Grenoble INP,LIG,Inst Engn, F-38000 Grenoble, France.
C3 Eindhoven University of Technology; Inria; Communaute Universite
   Grenoble Alpes; Institut National Polytechnique de Grenoble; Universite
   Grenoble Alpes (UGA); Centre National de la Recherche Scientifique
   (CNRS)
RP Wijs, A (corresponding author), Eindhoven Univ Technol, POB 513, NL-5600 MB Eindhoven, Netherlands.
EM s.m.j.d.putter@tue.nl; frederic.lang@inra.fr; a.j.wijs@tue.nl
RI Wijs, Anton J./A-9694-2019
FU ARTEMIS Joint Undertaking project EMC2 [621429]
FX This work is supported by ARTEMIS Joint Undertaking project EMC2 (grant
   nr. 621429).
CR Abd Elkader K, 2016, LECT NOTES COMPUT SC, V9779, P329, DOI 10.1007/978-3-319-41528-4_18
   Andersen H. R., 1999, International Journal on Software Tools for Technology Transfer, V2, P242, DOI 10.1007/s100090050032
   ANDERSEN HR, 1995, IEEE S LOG, P398, DOI 10.1109/LICS.1995.523274
   Anderson JH, 2003, DISTRIB COMPUT, V16, P75, DOI 10.1007/s00446-003-0088-6
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   Baier C, 2008, PRINCIPLES OF MODEL CHECKING, P1
   Bal H, 2016, COMPUTER, V49, P54, DOI 10.1109/MC.2016.127
   Barnat Jiri, 2013, Computer Aided Verification. 25th International Conference, CAV 2013. Proceedings. LNCS 8044, P863, DOI 10.1007/978-3-642-39799-8_60
   BERGSTRA JA, 1984, INFORM CONTROL, V60, P109, DOI 10.1016/S0019-9958(84)80025-X
   Bertot Y., 2004, TEXT THEORET COMP S
   BLOOM B, 1995, THEOR COMPUT SCI, V146, P25, DOI 10.1016/0304-3975(94)00152-9
   Bunte O, 2019, LECT NOTES COMPUT SC, V11428, P21, DOI 10.1007/978-3-030-17465-1_2
   Cec G., 2017, LICS, P1
   Cheung SC, 1997, LECT NOTES COMPUT SC, V1301, P227, DOI 10.1145/267896.267913
   CLARKE EM, 1989, FOURTH ANNUAL SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P353
   Clarke EM, 1999, MODEL CHECKING, P1
   Clarke EM, 1998, LECT NOTES COMPUT SC, V1427, P147, DOI 10.1007/BFb0028741
   Crouzen P, 2011, LECT NOTES COMPUT SC, V6603, P111, DOI 10.1007/978-3-642-19811-3_9
   de Putter S, 2017, LECT NOTES COMPUT SC, V10487, P117, DOI 10.1007/978-3-319-68034-7_7
   de Putter S, 2016, LECT NOTES COMPUT SC, V9633, P383, DOI 10.1007/978-3-662-49665-7_23
   Fokkink W, 2008, FUND INFORM, V87, P287
   Garavel H, 1999, INT FED INFO PROC, V28, P185
   Garavel H, 2015, ACTA INFORM, V52, P337, DOI 10.1007/s00236-015-0226-1
   Groote JF, 2017, ACM T COMPUT LOG, V18, DOI 10.1145/3060140
   Groote JF, 2016, LECT NOTES COMPUT SC, V9636, P607, DOI 10.1007/978-3-662-49674-9_40
   HELMBOLD D, 1985, IEEE SOFTWARE, V2, P47, DOI 10.1109/MS.1985.230351
   HOARE CAR, 1978, COMMUN ACM, V21, P666, DOI 10.1145/359576.359585
   ISO, 1989, Technical Report 8807
   Kahlouche H, 1998, TESTING OF COMMUNICATING SYSTEMS, P211
   KOZEN D, 1983, THEOR COMPUT SCI, V27, P333, DOI 10.1016/0304-3975(82)90125-6
   Krimm JP, 1997, LECT NOTES COMPUT SC, V1217, P239, DOI 10.1007/BFb0035392
   Lang F, 2005, LECT NOTES COMPUT SC, V3771, P70
   Lang F, 2006, LECT NOTES COMPUT SC, V4229, P159
   LUTTIK S, 1997, SENR9706 CWI
   MARANINCHI F, 1992, LECT NOTES COMPUT SC, V630, P550
   Mateescu R, 2014, SCI COMPUT PROGRAM, V96, P354, DOI 10.1016/j.scico.2014.04.004
   Mazzara M, 2006, LECT NOTES COMPUT SC, V4184, P257
   Milner R., 1989, Communication and concurrency
   Pelánek R, 2007, LECT NOTES COMPUT SC, V4595, P263
   Peled D, 1998, LECT NOTES COMPUT SC, V1427, P17, DOI 10.1007/BFb0028727
   PETERSON GL, 1981, INFORM PROCESS LETT, V12, P115, DOI 10.1016/0020-0190(81)90106-X
   ROMIJN J, 1999, SENR9915 CWI
   Roscoe A.W., 1998, THEORY PRACTICE CONC
   Ulidowski I, 2002, INFORM COMPUT, V178, P180, DOI 10.1006/inco.2002.3161
   van Glabbeek R, 2009, LOG METH COMPUT SCI, V5, DOI 10.2168/LMCS-5(4:5)2009
   van Glabbeek R, 2009, FUND INFORM, V93, P371, DOI 10.3233/FI-2009-109
   VanGlabbeek RJ, 1996, J ACM, V43, P555, DOI 10.1145/233551.233556
   Verhoef C, 1994, LECT NOTES COMPUT SC, V836, P433
   Wijs A, 2005, IEEE INT C ENG COMP, P184
   Wijs Anton, 2015, Tools and Algorithms for the Construction and Analysis of Systems. 21st International Conference, TACAS 2015, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2015. Proceedings: LNCS 9035, P368, DOI 10.1007/978-3-662-46681-0_29
   Wijs AJ, 2007, IEEE INT C ENG COMP, P35, DOI 10.1109/ICECCS.2007.13
   Wijs A, 2017, LECT NOTES COMPUT SC, V10426, P570, DOI 10.1007/978-3-319-63387-9_28
   Wijs A, 2015, ELECTRON P THEOR COM, P1, DOI 10.4204/EPTCS.181.1
   Wijs A, 2014, LECT NOTES COMPUT SC, V8348, P348, DOI 10.1007/978-3-319-07602-7_21
   Wijs A, 2014, LECT NOTES COMPUT SC, V8430, P258, DOI 10.1007/978-3-319-06200-6_21
   Wijs A, 2013, LECT NOTES COMPUT SC, V7795, P565, DOI 10.1007/978-3-642-36742-7_41
NR 67
TC 1
Z9 1
U1 0
U2 5
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29a, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 15
PY 2020
VL 196
AR 102493
DI 10.1016/j.scico.2020.102493
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA LY6WG
UT WOS:000540668900001
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Kamburjan, E
   Hähnle, R
   Schön, S
AF Kamburjan, Eduard
   Haehnle, Reiner
   Schoen, Sebastian
TI Formal modeling and analysis of railway operations with active objects
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Railway operations; Active objects; Formal methods; Deductive
   verification; Distributed systems
AB We present a comprehensive model of railway operations written in the active object language ABS. The model is based on specifications taken from the rulebooks of Deutsche Bahn AG. It is statically analyzable and executable, hence allows to use static and dynamic analysis within one and the same formalism. We are able to combine aspects of micro and macroscopic modeling and provide a way to inspect changes in the rulebooks. We illustrate the static analysis capability by a safety analysis based on invariant reasoning that only relies on assumptions about the underlying railway infrastructure instead of explicitly exploring the state space. A concrete infrastructure layout and train schedule can be used as input to the model to examine dynamic properties such as delays. We illustrate the capability for dynamic analysis by demonstrating the effect that different ways of dealing with faulty signals have on delays and propagation of delays. (C) 2018 Elsevier By. All rights reserved.
C1 [Kamburjan, Eduard; Haehnle, Reiner] Tech Univ Darmstadt, Software Engn Grp, Darmstadt, Germany.
   [Schoen, Sebastian] Tech Univ Darmstadt, Railway Engn Grp, Darmstadt, Germany.
C3 Technical University of Darmstadt; Technical University of Darmstadt
RP Kamburjan, E (corresponding author), Tech Univ Darmstadt, Software Engn Grp, Darmstadt, Germany.
EM kamburjan@cs.tu-darmstadt.de; haehnle@cs.tu-darmstadt.de;
   schoen@verkehr.tu-darmstadt.de
OI Kamburjan, Eduard/0000-0002-0996-2543; Schon,
   Sebastian/0000-0002-6450-8263; Hahnle, Reiner/0000-0001-8000-7613
FU FormbaR, "Formalisierung von betrieblichen und anderen Regelwerken",
   part of AG Signalling/DB RailLab in the Innovation Alliance of Deutsche
   Bahn AG; TU Darmstadt
FX The authors thank the interviewees for their time and valuable
   information and the anonymous reviewers for their constructive
   suggestions. This work is supported by FormbaR, "Formalisierung von
   betrieblichen und anderen Regelwerken", part of AG Signalling/DB RailLab
   in the Innovation Alliance of Deutsche Bahn AG and TU Darmstadt.
CR ABS, 2018, ABS DOC
   Ahrendt W, 2016, LNCS
   Albert E., 2011, LNCS, V7078, P238, DOI DOI 10.1007/978-3-642-54862-8_
   Albert E, 2016, PROCEEDINGS OF THE 25TH INTERNATIONAL CONFERENCE ON COMPILER CONSTRUCTION (CC 2016), P269, DOI 10.1145/2892208.2892236
   [Anonymous], 2004, CAP
   Bjork J, 2013, INNOV SYST SOFTW ENG, V9, P29, DOI 10.1007/s11334-012-0184-5
   Borger E., 2000, Abstract State Machines Theory and Applications. International Workshop, ASM 2000. Proceedings (Lecture Notes in Computer Science Vol.1912), P361
   Borger E., 2003, ABSTRACT STATE MACHI
   Börger E, 2016, ACTA INFORM, V53, P469, DOI 10.1007/s00236-015-0249-7
   CENELEC, 2011, 501282011 DIN EN CEN
   Cui Y, 2011, PROMET-ZAGREB, V23, P511
   Damiani Ferruccio, 2017, Integrated Formal Methods. 13th International Conference, IFM 2017. Proceedings: LNCS 10510, P111, DOI 10.1007/978-3-319-66845-1_8
   Damiani F, 2017, LECT NOTES COMPUT SC, V10202, P424, DOI 10.1007/978-3-662-54494-5_25
   DB Netz AG, 2017, FRANKF GERM RICHTL 4
   DB Netz AG, 2017, GERM FRANKF RICHTL
   de Fabris S, 2014, J RAIL TRANSPORT PLA, V4, P2, DOI 10.1016/j.jrtpm.2014.04.001
   Din CC, 2015, LECT NOTES ARTIF INT, V9195, P517, DOI 10.1007/978-3-319-21401-6_35
   Din CC, 2015, FORM ASP COMPUT, V27, P551, DOI 10.1007/s00165-014-0322-y
   Eisenbahnbundesamt (Federal Railway Authority), 2017, EISENBAHN BAU BETRIE
   Eisenbahnbundesamt (Federal Railway Authority), 2017, EISENBAHN SIGNALORDN
   Fantechi Alessandro, 2017, Software Engineering and Formal Methods. 15th International Conference, SEFM 2017. Proceedings: Lecture Notes in Computer Society (LNCS 10469), P236, DOI 10.1007/978-3-319-66197-1_15
   Fantechi A, 2014, INT J SOFTW TOOLS TE, V16, P643, DOI 10.1007/s10009-014-0342-1
   Giachino E, 2016, SOFTW SYST MODEL, V15, P1013, DOI 10.1007/s10270-014-0444-y
   Hähnle R, 2016, LECT NOTES COMPUT SC, V9953, P433, DOI 10.1007/978-3-319-47169-3_36
   Hahnle R., 2012, P FORM METH COMP BAS, P1
   Haxthausen AE, 2011, FORM ASP COMPUT, V23, P191, DOI 10.1007/s00165-009-0143-6
   Hewitt C., 1973, PROC 3 INT JOINT C A, P235, DOI 10.1145/359545.359563
   Hoppner S., 2015, THESIS
   Horste M. Meyerzu, 2004, FORTSCHRITTBERICH 12, V571
   International Union of Railways (UIC), 2016, IRS30100
   James P, 2016, COMM COM INF SC, V596, P103, DOI 10.1007/978-3-319-29510-7_6
   James P, 2014, INT J SOFTW TOOLS TE, V16, P685, DOI 10.1007/s10009-014-0304-7
   Johnsen E.B., 2011, Lecture Notes in Computer Science, V6957, P142, DOI [10.1007/978- 3- 642-25271-6 8, DOI 10.1007/978-3-642-25271-6]
   Kamburjan Eduard, 2017, Reliability, Safety, and Security of Railway Systems. Modelling, Analysis, Verification, and Certification. Second International Conference, RSSRail 2017. Proceedings LNCS 10598, P131, DOI 10.1007/978-3-319-68499-4_9
   Kamburjan E., 2016, CCIS, V694, P55, DOI [10.1007/978-3-319-53946-14, DOI 10.1007/978-3-319-53946-14]
   Kamburjan E., 2017, SCI RAILW SIGN S GER
   Kamburjan E., 2018, P 11 INT CONC EXP IC
   Limbree C, 2016, LECT NOTES COMPUT SC, V9707, P134, DOI 10.1007/978-3-319-33951-1_10
   Lin JH, 2016, IEEE INT CONF ADV LE, P49, DOI 10.1109/ICALT.2016.99
   Luteberget B, 2016, LECT NOTES COMPUT SC, V9681, P491, DOI 10.1007/978-3-319-33693-0_31
   MISRA J, 1986, COMPUT SURV, V18, P39, DOI 10.1145/6462.6485
   Moller F., 2012, LECT NOTES COMPUTER, V7857, P193, DOI [10.1007/978-3-642- 39611-3 20, DOI 10.1007/978-3-642-39611-3]
   Newcombe C, 2015, COMMUN ACM, V58, P66, DOI 10.1145/2699417
   Pachl Jorn., 2008, Systemtechnik des Schienenverkehrs - Bahnbetrieb planen, steuern und sichern
   Schaefer I, 2010, LECT NOTES COMPUT SC, V6287, P77, DOI 10.1007/978-3-642-15579-6_6
   Schärli N, 2003, LECT NOTES COMPUT SC, V2743, P248
   Winter K., 2003, 26 AUSTRALASIAN COMP, P309
   Wong Peter Y. H., 2012, International Journal on Software Tools for Technology Transfer, V14, P567, DOI 10.1007/s10009-012-0250-1
NR 48
TC 13
Z9 13
U1 0
U2 8
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 15
PY 2018
VL 166
BP 167
EP 193
DI 10.1016/j.scico.2018.07.001
PG 27
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GV5OO
UT WOS:000446152000008
OA Bronze
DA 2024-07-18
ER

PT J
AU Maalej, M
   Paisante, V
   Pereira, FMQ
   Gonnord, L
AF Maalej, Maroua
   Paisante, Vitor
   Quintao Pereira, Fernando Magno
   Gonnord, Laure
TI Combining range and inequality information for pointer disambiguation
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Points-to analysis; Pentagons; Less-than check; Abstract interpretation;
   Compiler construction
ID VALIDATION
AB Pentagons is an abstract domain invented by Logozzo and Fahndrich to validate array accesses in low-level programming languages. This algebraic structure provides a cheap "less-than check", which builds a partial order between the integer variables used in a program. In this paper, we show how we have used the ideas available in Pentagons to design and implement a novel alias analysis.
   With this new algorithm, we are able to disambiguate pointers with offsets, that commonly occur in C programs, in a precise and efficient way. Together with this new abstract domain we describe several implementation decisions that let us produce a practical pointer disambiguation algorithm on top of the LLVM compiler. Our alias analysis is able to handle programs as large as SPEC CPU2006's gcc in a few minutes. Furthermore, it improves on LLVM's industrial quality analyses. As an extreme example, we have observed a 4x improvement when analyzing SPEC's 1bm. (C) 2017 Elsevier B.V. All rights reserved.
C1 [Maalej, Maroua; Gonnord, Laure] Univ Lyon, F-69000 Lyon, France.
   [Maalej, Maroua; Gonnord, Laure] ENS Lyon, INRIA, UCB Lyon1, CNRS,UMR,LIP, F-69000 Lyon, France.
   [Paisante, Vitor; Quintao Pereira, Fernando Magno] Univ Fed Minas Gerais, Belo Horizonte, MG, Brazil.
   [Paisante, Vitor; Quintao Pereira, Fernando Magno] Lab Compiladores, Belo Horizonte, MG, Brazil.
C3 Universite Claude Bernard Lyon 1; Inria; Ecole Normale Superieure de
   Lyon (ENS de LYON); Centre National de la Recherche Scientifique (CNRS);
   Universidade Federal de Minas Gerais
RP Gonnord, L (corresponding author), Univ Lyon, F-69000 Lyon, France.; Gonnord, L (corresponding author), ENS Lyon, INRIA, UCB Lyon1, CNRS,UMR,LIP, F-69000 Lyon, France.
EM laure.gonnord@ens-lyon.fr
RI Pereira, Fernando/HNR-7786-2023
FU CNPq [443019/2014-2]; FAPEMIG (The Prospiel) [APQ-03832-14]; French
   National Research Agency ANR (LABEX MILYON of Universite de Lyon, within
   the program "Investissement d'Avenir") [ANR-11-IDEX-0007]
FX This project is supported by CNPq (443019/2014-2, Intel (The eCoSoC
   grant), FAPEMIG (The Prospiel project APQ-03832-14 (INRIA Associated
   team - Project Prospiel)), and by the French National Research Agency
   ANR (LABEX MILYON of Universite de Lyon, within the program
   "Investissement d'Avenir" (ANR-11-IDEX-0007)).
CR Alpern B., 1988, Conference Record of the Fifteenth Annual ACM Symposium on Principles of Programming Languages, P1, DOI 10.1145/73560.73561
   Alves P, 2015, ACM SIGPLAN NOTICES, V50, P589, DOI 10.1145/2814270.2814285
   [Anonymous], 1994, Program analysis and specialization for the C programming language
   [Anonymous], 1976, Mathematical developments arising from Hilbert problems, DOI DOI 10.1090/PSPUM/028.2
   [Anonymous], 98992011 ISO
   [Anonymous], 2006, COMPILERS PRINCIPLES
   BALAKRISHNAN G, 2004, 200, V2985, P5
   Balatsouras G, 2016, LECT NOTES COMPUT SC, V9837, P84, DOI 10.1007/978-3-662-53413-7_5
   Blume W., 1994, Proceedings of the 9th International Parallel Processing Symposium, P357
   Bodik R, 2000, ACM SIGPLAN NOTICES, V35, P321, DOI 10.1145/358438.349342
   Cousot P, 2005, LECT NOTES COMPUT SC, V3444, P21
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Cousot Patrick, 1978, P 5 ACM SIGACT SIGPL, p84S96, DOI DOI 10.1145/512760.512770
   CYTRON R, 1989, CONFERENCE RECORD OF THE SIXTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P25, DOI 10.1145/75277.75280
   Dietrich J, 2015, ACM SIGPLAN NOTICES, V50, P535, DOI [10.1145/2858965.2814307, 10.1145/2814270.2814307]
   Fahndrich Manuel, 2010, Formal Verification of Object-Oriented Software. International Conference, (FoVeOOS 2010). Revised Selected Papers, P10
   FERRANTE J, 1987, ACM T PROGR LANG SYS, V9, P319, DOI 10.1145/24039.24041
   Hardekopf B., 2011, CGO, P265
   Hardekopf B, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P290, DOI 10.1145/1250734.1250767
   Henning J. L., 2006, SIGARCH COMPUT ARCHI, V34, P1, DOI [DOI 10.1145/1186736.1186737, 10.1145/1186736.1186737]
   Henry J, 2012, LECT NOTES COMPUT SC, V7460, P283, DOI 10.1007/978-3-642-33125-1_20
   Hind M, 2001, ACM SIGPLAN NOTICES, P54
   Johnson A, 2015, ACM SIGPLAN NOTICES, V50, P291, DOI [10.1145/2813885.2737957, 10.1145/2737924.2737957]
   Lattner C, 2004, INT SYM CODE GENER, P75, DOI 10.1109/CGO.2004.1281665
   Logozzo F, 2010, SCI COMPUT PROGRAM, V75, P796, DOI 10.1016/j.scico.2009.04.004
   Logozzo F, 2008, APPLIED COMPUTING 2008, VOLS 1-3, P184
   Maalej M, 2017, INT SYM CODE GENER, P134, DOI 10.1109/CGO.2017.7863735
   Mine A., 2006, Higher-Order and Symbolic Computation, V19, P31, DOI 10.1007/s10990-006-8609-1
   Nazaré H, 2014, ACM SIGPLAN NOTICES, V49, P791, DOI [10.1145/2714064.2660205, 10.1145/2660193.2660205]
   Nielson E, 2005, PRINCIPLES PROGRAM A
   Paisante V, 2016, INT SYM CODE GENER, P171, DOI 10.1145/2854038.2854050
   Pereira FMQ, 2009, INT SYM CODE GENER, P126, DOI 10.1109/CGO.2009.9
   Petrashko D, 2016, ACM SIGPLAN NOTICES, V51, P394, DOI 10.1145/3022671.2983991
   Rodriguez R, 2013, COLEC MONOGRAF ACAD, P1
   Rugina R, 2005, ACM T PROGR LANG SYS, V27, P185, DOI 10.1145/1057387.1057388
   Rugina R, 2000, ACM SIGPLAN NOTICES, V35, P182, DOI 10.1145/358438.349325
   Rus Silvius, 2002, I&CS-INSTR CON SYST, P251
   Serebryany K., 2012, USENIX ATC 2012, P309
   Singer J., 2006, THESIS
   Steensgaard B., 1996, Conference Record of POPL '96: The 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P32, DOI 10.1145/237721.237727
   Sui YL, 2016, ACM SIGPLAN NOTICES, V51, P41, DOI [10.1145/2907950.2907957, 10.1145/2980930.2907957]
   SURENDRAN R, 2014, 200, V8409, P40
   Tavares A. L. C., 2014, COMPILER CONSTRUCTIO, P2
   van Engelen R.A., 2004, ICS 04, P106, DOI DOI 10.1145/1006209.1006226
   WILSON RP, 1995, SIGPLAN NOTICES, V30, P1, DOI 10.1145/223428.207111
   Wolfe M.J., 1996, High Performance Compilers For Parallel Computing
NR 46
TC 3
Z9 3
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 15
PY 2018
VL 152
BP 161
EP 184
DI 10.1016/j.scico.2017.10.014
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA FR3OJ
UT WOS:000418975700007
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Westman, J
   Nyberg, M
   Gustavsson, J
   Gurov, D
AF Westman, Jonas
   Nyberg, Mattias
   Gustavsson, Joakim
   Gurov, Dilian
TI Formal architecture modeling of sequential non-recursive C programs
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE C program; Modeling; Architecture; Component; Interfaces
ID VERIFICATION; REFINEMENT
AB To manage the complexity of C programs, architecture models are used as high-level descriptions, allowing developers to understand, assess, and manage the C programs without having to understand the intricate complexity of the code implementations. However, for the architecture models to serve their purpose, they must be accurate representations of the C programs. In order to support creating accurate architecture models, the present paper presents a mapping from the domain of sequential non recursive C programs to a domain of formal architecture models, each being a hierarchy of components with well-defined interfaces. The hierarchically organized components and their interfaces, which capture both data and function call dependencies, are shown to both enable high-level assessment and analysis of the C program and provide a foundation for organizing and expressing specifications for compositional verification. (C) 2017 Elsevier B.V. All rights reserved:
C1 [Westman, Jonas; Nyberg, Mattias; Gustavsson, Joakim] KTH Royal Inst Technol, Brinellvagen 83, S-10044 Stockholm, Sweden.
   [Gurov, Dilian] KTH Royal Inst Technol, Lindstedtsvagen 3, S-10044 Stockholm, Sweden.
C3 Royal Institute of Technology; Royal Institute of Technology
RP Westman, J (corresponding author), KTH Royal Inst Technol, Brinellvagen 83, S-10044 Stockholm, Sweden.
EM jowestm@kth.se; matny@kth.se; joagusta@kth.se; dilian@csc.kth.se
RI Gurov, Dilian/ITU-2606-2023
OI Gurov, Dilian/0000-0002-0074-8786; Westman, Jonas/0000-0002-9655-7326
FU Swedish governmental agency for innovation VINNOVA [2011-04446]; Vinnova
   [2011-04446] Funding Source: Vinnova
FX This work is a result from a collaborative effort with automotive
   manufacturer Scania CV AB, and has received funding under grant
   agreement no. 2011-04446 from Swedish governmental agency for innovation
   VINNOVA.
CR ABADI M, 1991, THEOR COMPUT SCI, V82, P253, DOI 10.1016/0304-3975(91)90224-P
   ABADI M, 1993, ACM T PROGR LANG SYS, V15, P73, DOI 10.1145/151646.151649
   AGRAWAL H, 1990, SIGPLAN NOTICES, V25, P246, DOI 10.1145/93548.93576
   Allen E.B., 2001, Proceedings Seventh International Software Metrics Symposium, IEEE, P124
   Alur R, 2004, ACM T PROGR LANG SYS, V26, P339, DOI 10.1145/973097.973101
   Alur R, 1999, FORM METHOD SYST DES, V15, P7, DOI 10.1023/A:1008739929481
   [Anonymous], 1994, INFORM TECHNOLOGY OS
   [Anonymous], CYBER PHYS SYSTEMS T
   [Anonymous], 2013, LECT NOTES COMPUT
   [Anonymous], 2015, CYBER PHYS SYSTEMS T
   [Anonymous], 2008, A Practical Guide To SysML: The Systems Modeling Language
   [Anonymous], 2011, ROAD VEH FUNCT SAF
   [Anonymous], 2004, Mastering Simulink
   [Anonymous], SCI COMPUT PROGRAM
   [Anonymous], 2004, P 2004 INT S COD GEN
   [Anonymous], 1998, COMPOSITIONALITY SIG
   [Anonymous], THESIS
   [Anonymous], SAFETY CRITICAL SYST
   [Anonymous], 2013, REFERENCE EXAMPLE SP
   [Anonymous], P INCOSE INT S
   [Anonymous], 2011, SOFTW ARCH DESCR
   Armstrong MN, 1998, FIFTH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P30, DOI 10.1109/WCRE.1998.723173
   AUTOSAR, 2015, AUT OP SYST ARCH
   Baumgart A, 2010, LECT NOTES COMPUT SC, V6399, P59, DOI 10.1007/978-3-642-16256-5_8
   Bellay B, 1998, J SOFTW MAINT-RES PR, V10, P305, DOI 10.1002/(SICI)1096-908X(199809/10)10:5<305::AID-SMR175>3.0.CO;2-7
   Benveniste A, 2008, LECT NOTES COMPUT SC, V5382, P200, DOI 10.1007/978-3-540-92188-2_9
   BROOKES SD, 1984, J ACM, V31, P560, DOI 10.1145/828.833
   Broy M, 2007, P IEEE, V95, P356, DOI 10.1109/JPROC.2006.888386
   Cass S., 2014, Top 10 Programming Languages
   Chaki S, 2003, PROC INT CONF SOFTW, P385, DOI 10.1109/ICSE.2003.1201217
   Chilton C, 2014, THEOR COMPUT SCI, V549, P146, DOI 10.1016/j.tcs.2014.07.018
   CODD EF, 1970, COMMUN ACM, V13, P377, DOI 10.1145/357980.358007
   Cohen E, 2009, LECT NOTES COMPUT SC, V5674, P23, DOI 10.1007/978-3-642-03359-9_2
   CYTRON R, 1991, ACM T PROGR LANG SYS, V13, P451, DOI 10.1145/115372.115320
   Damm W, 2011, DES AUT TEST EUROPE, P1023
   Diestel R., 2012, GRAPH THEORY, V173
   Dill D. L., 1988, Advanced Research in VLSI. Proceedings of the Fifth MIT Conference, P51
   Feiler PH., 2012, Model-based engineering with AADL: An introduction to the SAE architecture analysis design language
   Greenaway David, 2014, Ph. D. Dissertation
   Henzinger TA, 2003, LECT NOTES COMPUT SC, V2648, P235
   Henzinger TA, 2007, COMPUTER, V40, P32, DOI 10.1109/MC.2007.364
   Hind M, 2001, ACM SIGPLAN NOTICES, P54
   HOOMAN J, 1986, LECT NOTES COMPUT SC, V224, P343
   Kaur A., 2010, International Journal of Computer Applications, V2, P105, DOI DOI 10.5120/605-855
   Kernighan B.W., 1988, The C Programming Language
   Koskinen J, 2010, ADVANCES TECHNIQUES IN COMPUTING SCIENCES AND SOFTWARE ENGINEERING, P389, DOI 10.1007/978-90-481-3660-5_67
   LAMPORT L, 1989, COMMUN ACM, V32, P32, DOI 10.1145/63238.63240
   Laster K, 1998, LECT NOTES COMPUT SC, V1384, P20, DOI 10.1007/BFb0054162
   Lee EA, 2008, ISORC 2008: 11TH IEEE SYMPOSIUM ON OBJECT/COMPONENT/SERVICE-ORIENTED REAL-TIME DISTRIBUTED COMPUTING - PROCEEDINGS, P363, DOI 10.1109/ISORC.2008.25
   Mens T, 2010, COMPUTER, V43, P42, DOI 10.1109/MC.2010.136
   MISRA-C, 2012, GUID US C LANG VEH B
   Negulescu R., 2000, CONCUR 2000 - Concurrency Theory. 11th International Conference. Proceedings (Lecture Notes in Computer Science Vol.1877), P199
   Nyberg M, 2015, 2015 ELEVENTH EUROPEAN DEPENDABLE COMPUTING CONFERENCE (EDCC), P108, DOI 10.1109/EDCC.2015.21
   Nyberg M, 2013, CONF CONTR FAULT-TOL, P91, DOI 10.1109/SysTol.2013.6693936
   Rasool G., 2007, INT J COMPUT INF SYS, V1
   Rumbaugh J., 2004, UNIFIED MODELING LAN, V2nd
   Sangiovanni-Vincentelli A, 2012, EUR J CONTROL, V18, P217, DOI 10.3166/EJC.18.217-238
   Schaefer I., 2012, LECT NOTES COMPUTER, V6957, P184
   van Gurp J, 2002, J SYST SOFTWARE, V61, P105, DOI 10.1016/S0164-1212(01)00152-2
   Westman Jonas, 2013, Computer Safety, Reliability and Security. 32nd International Conference, SAFECOMP 2013. Proceedings: LNCS 8153, P166, DOI 10.1007/978-3-642-40793-2_16
   Westman J, 2016, LECT NOTES COMPUT SC, V9539, P312, DOI 10.1007/978-3-319-28934-2_17
   Westman J, 2015, IEEE HI ASS SYS ENGR, P85, DOI 10.1109/HASE.2015.21
   Westman J, 2014, LECT NOTES COMPUT SC, V8767, P218, DOI 10.1007/978-3-319-11653-2_14
   Whalen MW, 2013, IEEE SOFTWARE, V30, P54, DOI 10.1109/MS.2012.173
NR 64
TC 2
Z9 2
U1 0
U2 1
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 15
PY 2017
VL 146
SI SI
BP 2
EP 27
DI 10.1016/j.scico.2017.03.007
PG 26
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA FD2ZE
UT WOS:000407402500002
DA 2024-07-18
ER

PT J
AU Fritz, E
   Zhao, T
AF Fritz, Eric
   Zhao, Tian
TI Typing and semantics of asynchronous arrows in JavaScript
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE JavaScript; Asynchronous programming; Type inference; Type checking;
   Semantics
AB Asynchronous programs in JavaScript using callbacks and promises are difficult to write correctly. Many programs have subtle errors due to the unwanted interaction of event handlers. To fix such errors, the programmer is burdened with explicit registration and de-registration of event handlers. This produces fragile code which is difficult to read and maintain.
   Arrows, a generalization of monads, are an elegant solution to asynchronous program composition. In this paper, we present the semantics of an arrow-based DSL in JavaScript which can encode asynchronous programs as a state machine where edge transitions are triggered by external events. To ensure that arrows are composed correctly, we provide an optional type checker that reports errors before the machine begins execution. (C) 2017 Elsevier B.V. All rights reserved.
C1 [Fritz, Eric; Zhao, Tian] Univ Wisconsin, Milwaukee, WI 53201 USA.
C3 University of Wisconsin System; University of Wisconsin Milwaukee
RP Zhao, T (corresponding author), Univ Wisconsin, Milwaukee, WI 53201 USA.
EM tzhao@uwm.edu
CR [Anonymous], 1992, 19th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, DOI DOI 10.1145/143165.143169
   Czaplicki E, 2013, ACM SIGPLAN NOTICES, V48, P411, DOI 10.1145/2499370.2462161
   Doaitse Swierstra S., 1996, Advanced Functional Programming. Second International School. Tutorial Text, P184
   Eifrig Jonathan, 1995, Electronic Notes in Theoretical Computer Science, V1, P132, DOI [10.1016/S1571-0661(04)80008-2, DOI 10.1016/S1571-0661(04)80008-2]
   Fritz E., 2015, REACTIVE EVENT BASED
   Fritz E., 2016, ARROWS COMMERCIAL WE
   Guha A, 2010, LECT NOTES COMPUT SC, V6183, P126, DOI 10.1007/978-3-642-14107-2_7
   Hudak P, 2003, LECT NOTES COMPUT SC, V2638, P159
   Hughes J, 2004, LECT NOTES COMPUT SC, V3622, P73
   Hughes J, 2000, SCI COMPUT PROGRAM, V37, P67, DOI 10.1016/S0167-6423(99)00023-4
   Lerner B. S., 2013, EUR C OBJ OR PROGR E
   Lerner B. S., 2013, ACM SIGPLAN NOTICES, V49
   Lerner B. S., 2013, EUR S RES COMP SEC E
   Lindley S, 2011, ELECTRON NOTES THEOR, V229, P97, DOI 10.1016/j.entcs.2011.02.018
   Lindley S, 2010, J FUNCT PROGRAM, V20, P51, DOI 10.1017/S095679680999027X
   Liu H., 2009, P 14 ACM SIGPLAN INT
   Madsen M, 2015, ACM SIGPLAN NOTICES, V50, P505, DOI [10.1145/2858965.2814272, 10.1145/2814270.2814272]
   Maffeis S, 2008, LECT NOTES COMPUT SC, V5356, P307
   Meyerovich LA, 2009, ACM SIGPLAN NOTICES, V44, P1, DOI 10.1145/1639949.1640091
   Muller S. K., 2015, TECH REP
   Paterson R, 2001, ACM SIGPLAN NOTICES, V36, P229, DOI 10.1145/507669.507664
   Phang KY, 2009, ACM SIGPLAN NOTICES, V44, P49, DOI 10.1145/1837513.1640143
   POLITZ J. G., 2011, USENIX SEC S
   Ren B. M., 2016, P 37 ACM SIGPLAN C P
   Wan ZY, 2000, ACM SIGPLAN NOTICES, V35, P242, DOI 10.1145/358438.349331
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
NR 26
TC 0
Z9 2
U1 0
U2 10
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUL-AUG
PY 2017
VL 141
BP 1
EP 39
DI 10.1016/j.scico.2017.03.003
PG 39
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA EU7LK
UT WOS:000401216100001
OA hybrid
DA 2024-07-18
ER

PT J
AU Kafle, B
   Gallagher, JP
AF Kafle, Bishoksan
   Gallagher, John P.
TI Constraint specialisation in Horn clause verification
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Constraint specialisation; Query-answer transformation; Horn clauses;
   Abstract interpretation; Convex polyhedral analysis
ID SOFTWARE MODEL CHECKING; ABSTRACT INTERPRETATION; IMPERATIVE PROGRAMS;
   LOGIC PROGRAMS
AB We present a method for specialising the constraints in constrained Horn clauses with respect to a goal. We use abstract interpretation to compute a model of a query answer transformed version of a given set of clauses and a goal. The constraints from the model are then used to compute a specialised version of each clause. The effect is to propagate the constraints from the goal top-down and propagate answer constraints bottom-up. The specialisation procedure can be repeated to yield further specialisation. The approach is independent of the abstract domain and the constraint theory underlying the clauses. Experimental results on verification problems show that this is an effective transformation, both in our own verification tools (based on a convex polyhedra analyser) and as a preprocessor to other Horn clause verification tools. (C) 2017 Elsevier B.V. All rights reserved.
C1 [Kafle, Bishoksan; Gallagher, John P.] Roskilde Univ, Roskilde, Denmark.
   [Gallagher, John P.] IMDEA Software Inst, Madrid, Spain.
C3 Roskilde University; IMDEA Software Institute
RP Gallagher, JP (corresponding author), Roskilde Univ, Roskilde, Denmark.; Gallagher, JP (corresponding author), IMDEA Software Inst, Madrid, Spain.
EM kafle@ruc.dk; jpg@ruc.dk
OI Gallagher, John P./0000-0001-6984-7419; Kafle,
   Bishoksan/0000-0001-5191-1216
FU European Commission [318337]; Danish Research Council [FNU 10-084290]
FX This paper is an extended version of a paper presented at the ACM
   SIGPLAN Workshop on Partial Evaluation and Program Manipulation
   (PEPM'15). We thank the anonymous referees of PEPM'15 for useful
   comments as well as the referees for this journal, who gave many
   constructive suggestions for improvement. The paper has been extended in
   several directions. We have provided algorithms and implementation
   details, extended the related work and other sections. We have also
   carried out some further experiments in a set of examples from software
   verification benchmarks available in the literature and evaluated our
   constraint specialisation as a pre-processor to other Horn clause
   verification tools in the literature. We would like to thank Jorge A.
   Navas for his help with the tool SeaHorn and for several interesting
   discussions and Emanuele De Angelis for providing us with benchmark
   programs. B. Kafie was supported by European Commission Framework 7
   project ENTRA (Project 318337). J. Gallagher was supported by Danish
   Research Council grant FNU 10-084290 "Numeric and Symbolic Abstractions
   for Software Model Checking".
CR [Anonymous], 2015, TOOLS ALGORITHMS CON
   [Anonymous], 1993, Partial Evaluation and Automatic Program Generation
   Ball T, 2011, COMMUN ACM, V54, P68, DOI 10.1145/1965724.1965743
   Bancilhon  F., 1986, P 5 ACM SIGMOD SIGAC
   Benoy F, 1997, LECT NOTES COMPUT SC, V1207, P204
   Beyer Dirk, 2015, Tools and Algorithms for the Construction and Analysis of Systems. 21st International Conference, TACAS 2015, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2015. Proceedings: LNCS 9035, P401, DOI 10.1007/978-3-662-46681-0_31
   Beyer D., 2012, REPOSITORY HORN CLAU
   Beyer D, 2013, LECT NOTES COMPUT SC, V7795, P594
   Bjorner N, 2013, LECT NOTES COMPUT SC, V7935, P105
   Clarke E, 2003, J ACM, V50, P752, DOI 10.1145/876638.876643
   Codish M, 1995, J LOGIC PROGRAM, V25, P249, DOI 10.1016/0743-1066(95)00064-X
   Cousot P., 1992, Journal of Logic and Computation, V2, P511, DOI 10.1093/logcom/2.4.511
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Cousot Patrick, 1978, P 5 ACM SIGACT SIGPL, p84S96, DOI DOI 10.1145/512760.512770
   DAWSON S, 1993, LOGIC PROGRAMM, P424
   De Angelis E, 2015, PROCEEDINGS OF THE 17TH INTERNATIONAL SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING (PPDP 2015), P91, DOI 10.1145/2790449.2790529
   De Angelis E, 2014, SCI COMPUT PROGRAM, V95, P149, DOI 10.1016/j.scico.2014.05.017
   De Angelis E., 2014, Lecture Notes in Computer Science, V8413, P568, DOI [DOI 10.1007/978-3-642-54862-8_47, 10.1007/978-3-642-54862-8_47]
   De Angelis  E., 2013, PEPM, P43
   De Angelis E, 2015, THEOR PRACT LOG PROG, V15, P635, DOI 10.1017/S1471068415000289
   DEBRAY S, 1994, J LOGIC PROGRAM, V18, P149, DOI 10.1016/0743-1066(94)90050-7
   Delzanno G., 2001, International Journal on Software Tools for Technology Transfer, V3, P250, DOI 10.1007/s100090100049
   Fujita  H., 1987, TR258 ICOT
   Gallagher J., 1993, Logic Program Synthesis and Transformation. Proceedings of LOPSTR 92, International Workshop on Logic Program Synthesis and Transformation, P151
   GALLAGHER J, 1988, NEW GENERAT COMPUT, V6, P159, DOI 10.1007/BF03037136
   Gallagher J. P., 1993, Proceedings of the ACM SIGPLAN Symposium on Partial Evaluation and Semantics-Based Program Manipulation. PEPM'93, P88, DOI 10.1145/154630.154640
   Gallagher J. P., 1990, P META90 WORKSH MET
   Gallagher J. P., 1994, P INT C LOG PROGR IC
   Gange G, 2013, THEOR PRACT LOG PROG, V13, P593, DOI 10.1017/S1471068413000379
   Grebenshchikov S, 2012, ACM SIGPLAN NOTICES, V47, P405, DOI 10.1145/2345156.2254112
   Grebenshchikov S, 2012, LECT NOTES COMPUT SC, V7214, P549, DOI 10.1007/978-3-642-28756-5_46
   Gupta A., 2011, LNCS, V7078, P188, DOI DOI 10.1007/978-3-642-25318-8_
   Gupta A, 2009, LECT NOTES COMPUT SC, V5643, P634, DOI 10.1007/978-3-642-02658-4_48
   Gurfinkel A, 2015, LECT NOTES COMPUT SC, V9206, P343, DOI 10.1007/978-3-319-21690-4_20
   Halbwachs N, 1997, FORM METHOD SYST DES, V11, P157, DOI 10.1023/A:1008678014487
   Halbwachs N., 1994, LECT NOTES COMPUTER, V864, P223
   Hojjat Hossein, 2012, FM 2012: Formal Methods. Proceedings of the 18th International Symposium, P247, DOI 10.1007/978-3-642-32759-9_21
   Jaffar J, 2005, LECT NOTES COMPUT SC, V3668, P412, DOI 10.1007/11562931_34
   JAFFAR J, 1994, J LOGIC PROGRAM, V20, P503, DOI 10.1016/0743-1066(94)90033-7
   Jaffar J, 2012, LNCS, P396, DOI DOI 10.1007/978-3-642-29860-8_
   Jaffar J, 1998, HDB LOGIC ARTIFICIAL, V5, P591
   Jones N., 1986, P PRINC PROGR LANG P
   Jones N. D., 1997, Static Analysis. 4th International Symposium, SAS '97 Proceedings, P396, DOI 10.1007/BFb0032761
   Jones N.D., 1997, J FUNCT LOGIC PROGRA, V1997
   Kafle B, 2016, ELECTRON P THEOR COM, P33, DOI 10.4204/EPTCS.219.4
   Kafle B, 2016, ELECTRON P THEOR COM, P104, DOI 10.4204/EPTCS.216.6
   Kafle B, 2016, LECT NOTES COMPUT SC, V9779, P261, DOI 10.1007/978-3-319-41528-4_14
   Klimov A.V., 2011, LECT NOTES COMPUTER, V7162, P193
   Klyuchnikov I, 2010, LECT NOTES COMPUT SC, V5947, P193, DOI 10.1007/978-3-642-11486-1_17
   KOMOROWSKI J, 1992, LECT NOTES COMPUT SC, V649, P49
   Lafave L., 1998, LECT NOTES COMPUTER
   Lakhdar-Chaouch L, 2011, LECT NOTES COMPUT SC, V6996, P492, DOI 10.1007/978-3-642-24372-1_38
   Leuschel M, 2004, ACM T PROGR LANG SYS, V26, P413, DOI 10.1145/982158.982159
   Leuschel M, 1999, LECT NOTES COMPUT SC, V1706, P271
   Leuschel M., 1999, LNCS, V1817, P62
   Lisitsa A, 2008, INT J FOUND COMPUT S, V19, P953, DOI 10.1142/S0129054108006066
   Lloyd J. W., 2012, Foundations of Logic Programming
   Marriott K., 1993, Conference Record of the Twentieth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P334, DOI 10.1145/158511.158685
   Marriott  K., 1988, P 5 INT C LOG PROGR
   McMillan K.L., 2013, TECH REP
   Monniaux D, 2011, LECT NOTES COMPUT SC, V6887, P369, DOI 10.1007/978-3-642-23702-7_27
   NILSSON U, 1995, THEOR COMPUT SCI, V142, P125, DOI 10.1016/0304-3975(94)00223-6
   Peralta IC., 2002, LNCS, V2664, P90
   Peralta JC, 1998, LECT NOTES COMPUT SC, V1503, P246
   Pettorossi A, 2000, LECT NOTES ARTIF INT, V1861, P613
   Podelski A, 2007, LECT NOTES COMPUT SC, V4354, P245
   Ramakrishnan R., 1988, Logic Programming: Proceedings of the Fifth International Conference and Symposium, P140
   Rummer Philipp, 2013, Computer Aided Verification. 25th International Conference, CAV 2013. Proceedings. LNCS 8044, P347, DOI 10.1007/978-3-642-39799-8_24
   SRIVASTAVA D, 1993, J LOGIC PROGRAM, V16, P361, DOI 10.1016/0743-1066(93)90048-L
   Tarjan R., 1972, SIAM Journal on Computing, V1, P146, DOI 10.1137/0201010
   Turchin V. F., 1980, Automata, Languages and Programming, Seventh Colloquium, P645
   Ullman J., 1988, PRINCIPLES KNOWLEDGE, V1
   Vieille Laurent., 1986, EXPERT DATABASE C, P253
   WINSBOROUGH W, 1992, J LOGIC PROGRAM, V13, P259, DOI 10.1016/0743-1066(92)90033-Y
NR 74
TC 7
Z9 7
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD APR 1
PY 2017
VL 137
BP 125
EP 140
DI 10.1016/j.scico.2017.01.002
PG 16
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA EO8WY
UT WOS:000396972400005
OA Green Published, Bronze
DA 2024-07-18
ER

PT J
AU Tsunoda, M
   Monden, A
   Matsumoto, K
   Ohiwa, S
   Oshino, T
AF Tsunoda, Masateru
   Monden, Akito
   Matsumoto, Kenichi
   Ohiwa, Sawako
   Oshino, Tomoki
TI Benchmarking IT operations cost based on working time and unit cost
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Benchmarking; IT operations; Work efficiency; Regression analysis
ID SOFTWARE-DEVELOPMENT; PRODUCTIVITY
AB Recently, size of information system gets large, and the information system operation (IT operations) is often outsourced. When IT operations of the large system is outsourced, high cost is needed, and troubles in IT operations may affect the activity of the company. Therefore, the information system operation is important for the companies. Cost is one of the important factors when the system operation is outsourced. However, it is not easy for the customers (system users) to judge whether the operation cost is valid or not. To support the judgment, we focus on information which the customers can know (e.g., size of software), to estimate the working time. In the analysis, we clarified the factors which affect the working time. Then, data was stratified based on the factors, to show the benchmark of working time. Using the benchmark, customers estimate the working time roughly. Also, we clarified the factors which affect the unit cost, and showed the benchmark. Operation cost can be estimated, by estimated working time multiplied by the estimated unit cost. The analysis results showed that the process standardization relates to the working time of operators. Also, the network range and the contract type have a relationship to the unit cost of operators. Work efficiency and unit cost do not affect operation quality. (C) 2016 Elsevier B.V. All rights reserved.
C1 [Tsunoda, Masateru; Matsumoto, Kenichi] Nam Inst Sci & Technol, Grad Sch Informat Sci, 8916-5 Takayama, Nara 6300192, Japan.
   [Tsunoda, Masateru] Kindai Univ, Dept Informat, 3-4-1 Kowakae, Higashiosaka, Osaka 5778502, Japan.
   [Monden, Akito] Okayama Univ, Grad Sch Nat Sci & Technol, 1-1-1 Tsushima Naka, Okayama, Okayama 7008530, Japan.
   [Ohiwa, Sawako; Oshino, Tomoki] Econ Res Assoc, Econ Res Inst, Minato Ku, Ryoshin Onarimon Bldg,6-17-15 Shinbashi, Tokyo 1050004, Japan.
C3 Nara Institute of Science & Technology; Kindai University (Kinki
   University); Okayama University
RP Tsunoda, M (corresponding author), Kindai Univ, Dept Informat, 3-4-1 Kowakae, Higashiosaka, Osaka 5778502, Japan.
EM tsunoda@info.kindai.ac.jp
RI MATSUMOTO, KENICHI/AAD-9090-2019; Tsunoda, Masateru/ABF-3437-2021
OI MATSUMOTO, KENICHI/0000-0002-7418-9323; Monden,
   Akito/0000-0003-4295-207X
FU Japan Ministry of Education, Culture, Sports, Science, and Technology
   [25330090]; Grants-in-Aid for Scientific Research [25330090] Funding
   Source: KAKEN
FX This research was partially supported by the Japan Ministry of
   Education, Culture, Sports, Science, and Technology [Grant in-Aid for
   Scientific Research (C) (No. 25330090)].
CR Aaron B.B., 2005, Proceeding of the 10th Conference on Hot Topics in Operating Systems, V10, P12
   Blackburn JD, 1996, IEEE T SOFTWARE ENG, V22, P875, DOI 10.1109/32.553636
   Boehm BW., 1981, Software Engineering Economics
   Bon J. V., 2005, FDN IT SERVICE MANAG
   Brooks P., 2006, Metrics for IT service management
   Continuity Software, 2013, IT OP AN BENCHM SURV
   Cusumano M, 2003, IEEE SOFTWARE, V20, P28, DOI 10.1109/MS.2003.1241363
   Han K, 2013, MIS QUART, V37, P315
   Hao Wang, 2008, 2008 International Conference on Computer Science and Software Engineering (CSSE 2008), P587, DOI 10.1109/CSSE.2008.1178
   Kaseya, 2015, IT OP BENCHM SURV
   Lee NY, 1997, IEEE T SOFTWARE ENG, V23, P537, DOI 10.1109/32.629492
   Lokan C, 2001, IEEE SOFTWARE, V18, P26, DOI 10.1109/52.951491
   Mannino M, 2008, DECIS SUPPORT SYST, V44, P883, DOI 10.1016/j.dss.2007.10.011
   Maxwell KD, 1996, IEEE T SOFTWARE ENG, V22, P706, DOI 10.1109/32.544349
   Pollard C, 2009, INFORM SYST MANAGE, V26, P164, DOI 10.1080/10580530902797540
   Potter K., 2010, IT Metrics: IT Spending and Staffing Report 2010 (No. G00173877)
   Rubin DB., 2002, STAT ANAL MISSING DA, P408, DOI [10.1002/9781119013563, DOI 10.1002/9781119013563]
   Runeson P., 1998, Empirical Software Engineering, V3, P381, DOI 10.1023/A:1009728205264
   Tsunoda M., 2010, P INT WORKSH SOFTW M, P571
   Tsunoda M, 2015, 3RD INTERNATIONAL CONFERENCE ON APPLIED COMPUTING AND INFORMATION TECHNOLOGY (ACIT 2015) 2ND INTERNATIONAL CONFERENCE ON COMPUTATIONAL SCIENCE AND INTELLIGENCE (CSI 2015), P20, DOI 10.1109/ACIT-CSI.2015.13
   Tsunoda M, 2009, INFORM TECHNOL MANAG, V10, P193, DOI 10.1007/s10799-009-0050-9
NR 21
TC 2
Z9 2
U1 1
U2 5
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 15
PY 2017
VL 135
SI SI
BP 75
EP 87
DI 10.1016/j.scico.2016.10.006
PG 13
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA EJ5OM
UT WOS:000393267600005
DA 2024-07-18
ER

PT J
AU Jakobsson, A
   Kosmatov, N
   Signoles, J
AF Jakobsson, Arvid
   Kosmatov, Nikolai
   Signoles, Julien
TI Fast as a shadow, expressive as a tree: Optimized memory monitoring for
   C
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Runtime assertion checking; Memory monitoring; Specification language;
   Executable specification; Frama-C toolset
AB One classical approach to ensuring memory safety of C programs is based on storing block metadata in a tree-like datastructure. However it becomes relatively slow when the number of memory locations in the tree becomes high. Another solution, based on shadow memory, allows very fast constant-time access to metadata and led to development of several highly optimized tools for the detection of memory safety errors. However, this solution appears to be insufficient for evaluation of complex memory-related properties of an expressive specification language.
   In this work, we address memory monitoring in the context of runtime assertion checking of C programs annotated in E-ACSL, an expressive specification language offered by the FRAMA-C framework for the analysis of C code. We present an original combination of a tree-based and a shadow-memory-based techniques that reconciles the efficiency of shadow memory and the higher expressiveness of annotations that can be evaluated using a tree of metadata. Shadow memory with its instant access to stored metadata is used whenever small shadow metadata suffices to evaluate required annotations, while richer metadata stored in a compact prefix tree (Patricia trie) is used for evaluation of more complex memory annotations supported by E-ACSL. We also present a preliminary static analysis step that determines which variables should be monitored (and in which way) in order to be able to evaluate annotations present in the program.
   The combined monitoring technique and the pre-analysis step have been implemented in the runtime assertion checking tool for E-ACSL. Our initial experiments confirm that the proposed hybrid approach leads to a significant speedup with respect to an earlier implementation based on a Patricia trie alone without any loss of precision, while the proposed static analysis reduces the monitoring of irrelevant variables and further improves the performances of the instrumented code. (C) 2016 Elsevier B.V. All rights reserved.
C1 [Jakobsson, Arvid; Kosmatov, Nikolai; Signoles, Julien] CEA, LIST, Software Reliabil & Secur Lab, PC 174, F-91191 Gif Sur Yvette, France.
C3 Universite Paris Saclay; CEA
RP Jakobsson, A (corresponding author), CEA, LIST, Software Reliabil & Secur Lab, PC 174, F-91191 Gif Sur Yvette, France.
EM arvid.jakobsson@gmail.com; nikolai.kosmatov@cea.fr;
   julien.signoles@cea.fr
OI Signoles, Julien/0000-0001-9266-0820
FU EU FP7 (project STANCE) [317753]
FX This work has been partially funded by EU FP7 (project STANCE, grant
   317753). The authors thank the FRAMA-C team members for support and
   useful discussions, and the anonymous referees for useful remarks and
   suggestions of improvement. Special thanks to Matthieu Lemerre for his
   advice on implementation of the shadow memory technique.
CR Akritidis P., 2009, P 18 C USENIX SEC S, V10, P51
   AUSTIN TM, 1994, SIGPLAN NOTICES, V29, P290, DOI 10.1145/773473.178446
   Barnett M, 2005, LECT NOTES COMPUT SC, V3362, P49
   Bartocci E, 2014, LECT NOTES COMPUT SC, V8734, P1, DOI 10.1007/978-3-319-11164-3_1
   Baudin P, 2002, INTERNATIONAL CONFERENCE ON DEPENDABLE SYSTEMS AND NETWORKS, PROCEEDINGS, P537, DOI 10.1109/DSN.2002.1028953
   Baudin P, ACSL: ANSI/ISO C Specification Language
   Cheon Yoonsik., 2003, RUNTIME ASSERTION CH
   Clarke L. A., 2006, Software Engineering Notes, V31, P25, DOI 10.1145/1127878.1127900
   Correnson L, 2012, LECT NOTES COMPUT SC, V7437, P108, DOI 10.1007/978-3-642-32469-7_8
   Delahaye Mickael., 2013, Proceedings of the 28th Annual ACM Symposium on Applied Computing, P1230, DOI [10.1145/2480362.2480593, DOI 10.1145/2480362.2480593]
   Dhurjati D., 2006, 28th International Conference on Software Engineering Proceedings, P162, DOI 10.1145/1134285.1134309
   Fahndrich M., 2010, S APPL COMP, P2103, DOI DOI 10.1145/1774088.1774531
   Falcone Y, 2015, LECT NOTES COMPUT SC, V9333, P405, DOI 10.1007/978-3-319-23820-3_27
   Filliâtre JC, 2007, LECT NOTES COMPUT SC, V4590, P173
   Giorgetti A., IET STWARE, V2
   Herms P., 2012, THESIS
   *ISO IEC, 98991999 ISOIEC
   Jakobsson A, 2015, 30TH ANNUAL ACM SYMPOSIUM ON APPLIED COMPUTING, VOLS I AND II, P1765, DOI 10.1145/2695664.2695815
   Jones Richard WM, 1997, AADEBUG, V97, P13
   Jun Yuan, 2012, 2012 12th IEEE Working Conference on Source Code Analysis and Manipulation (SCAM 2012), P54, DOI 10.1109/SCAM.2012.30
   Kirchner F, 2015, FORM ASP COMPUT, V27, P573, DOI 10.1007/s00165-014-0326-7
   Kosmatov N, 2013, LECT NOTES COMPUT SC, V8174, P167, DOI 10.1007/978-3-642-40787-1_10
   Leavens GT, 2003, LECT NOTES COMPUT SC, V2852, P262
   Leucker M, 2009, J LOGIC ALGEBR PROGR, V78, P293, DOI 10.1016/j.jlap.2008.08.004
   Meyer B., 1988, Object-Oriented Software Construction
   Necula GC, 2005, ACM T PROGR LANG SYS, V27, P477, DOI 10.1145/1065887.1065892
   Nethercote N, 2007, VEE'07: PROCEEDINGS OF THE THIRD INTERNATIONAL CONFERENCE ON VIRTUAL EXECUTION ENVIRONMENTS, P65
   Nielson F., 1999, Principles of Program Analysis
   Oiwa Y, 2009, PLDI'09 PROCEEDINGS OF THE 2009 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P259, DOI 10.1145/1542476.1542505
   Petiot G, 2016, LECT NOTES COMPUT SC, V9762, P130, DOI 10.1007/978-3-319-41135-4_8
   Petiot G, 2014, IEEE INT WORK C SO, P105, DOI 10.1109/SCAM.2014.19
   Ruwase Olatunji, 2004, NDSS, P159
   Serebryany Konstantin, 2012, USENIX, P309
   Signoles J, 2015, E ACSL EXECUTABLE AN
   Simpson MS, 2013, SOFTWARE PRACT EXPER, V43, P93, DOI 10.1002/spe.2105
   Steensgaard B., 1996, Conference Record of POPL '96: The 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P32, DOI 10.1145/237721.237727
   Sullivan M., 1991, Digest of Papers. Fault-Tolerant Computing: Twenty-First International Symposium (Cat. No.91CH2985-0), P2, DOI 10.1109/FTCS.1991.146625
   SZPANKOWSKI W, 1990, J ACM, V37, P691, DOI 10.1145/96559.214080
   Wei Xu, 2004, Software Engineering Notes, V29, P117, DOI 10.1145/1041685.1029913
NR 39
TC 5
Z9 6
U1 0
U2 4
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 15
PY 2016
VL 132
SI SI
BP 226
EP 246
DI 10.1016/j.scico.2016.09.003
PN 2
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA ED3ZB
UT WOS:000388785900006
OA hybrid
DA 2024-07-18
ER

PT J
AU Timm, N
   Gruner, S
AF Timm, Nils
   Gruner, Stefan
TI Parameterised three-valued model checking
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 17th Brazilian Symposium on Formal Methods (SBMF) as part of 5th
   Brazilian Conference on Software - Theory and Practice (CBSoft)
CY SEP 29-OCT 01, 2014
CL Maceio, BRAZIL
SP Univ Fed Alagoas, Brazilian Natl Inst Sci & Technol Software Engn, CAPES, CNPq, Google Inc
DE Three-valued logic; Three-valued abstraction; Parameterisation; Model
   checking; Counterexample-guided abstraction refinement
ID ABSTRACTION; PRECISION
AB Three-valued abstraction is an established technique in software model checking. It proceeds by generating a state space model over the values true, false and unknown, where the latter value is used to represent the loss of information due to abstraction. Temporal logic properties can then be evaluated on such models. In case of an unknown result, the abstraction is iteratively refined until a definite result can be obtained. In this paper, we present and extend our work on parameterised three-valued model checking (PMC). In our parameterised three-valued models, unknown parts can be either associated with the constant value unknown or with expressions over boolean parameters. Our parameterisation is an alternative way to state that the truth value of certain predicates or transitions is actually not known and that the checked property has to yield the same result under each possible parameter instantiation. A specific feature of our approach is that it allows for establishing logical connections between parameters: While unknown parts in pure three-valued models are never related to each other, our parameterisation approach enables to represent facts like 'a certain pair of transitions has unknown but complementary truth values', or the value of a predicate is unknown but remains unchanged along all states of a certain path'. We demonstrate that such facts can be automatically derived from the system to be verified and that covering these facts in an abstract model can be crucial for the success and the efficiency of checking temporal logic safety and liveness properties. Parameterisation enhances the precision of three valued models without increasing their state space, but it leads to an exponential increase in time complexity, since any property of interest must be checked for each possible parameter instantiation. In this extended paper, we introduce a novel algorithm for direct parameterised three-valued model checking that straightly explores the parameterised state space and thus avoids to construct all instantiations explicitly. We present example verification tasks where the application of our direct algorithm considerably reduces the time effort of PMC. (C) 2016 Elsevier B.V. All rights reserved.
C1 [Timm, Nils; Gruner, Stefan] Univ Pretoria, Dept Comp Sci, ZA-0002 Pretoria, South Africa.
C3 University of Pretoria
RP Timm, N (corresponding author), Univ Pretoria, Dept Comp Sci, ZA-0002 Pretoria, South Africa.
EM ntimm@cs.up.ac.za; sg@cs.up.ac.za
CR [Anonymous], THESIS
   [Anonymous], 1992, TEMPORAL LOGIC REACT, DOI DOI 10.1007/978-1-4612-0931-7
   [Anonymous], 2001, P ACM SIGPLAN 2001 C, DOI DOI 10.1145/378795.378846
   [Anonymous], 1995, Temporal verification of reactive systems-safety
   [Anonymous], 2012, LECT NOTES COMPUT SC
   [Anonymous], LECT NOTES COMPUT SC
   [Anonymous], P 2014 THEOR ASP SOF
   [Anonymous], 1999, LNCS
   [Anonymous], MODEL CHECKING
   [Anonymous], PARAMETERISED 3 VALU
   [Anonymous], LNCS
   Bonsangue M. M., 1994, Formal Aspects of Computing, V6, P788, DOI 10.1007/BF01213603
   Chechik M, 2003, ACM T SOFTW ENG METH, V12, P371, DOI 10.1145/990010.990011
   Clarke E, 2003, TIME-ICTL 2003: 10TH INTERNATIONAL SYMPOSIUM ON TEMPORAL REPRESENTATION AND REASONING AND FOURTH INTERNATIONAL CONFERENCE ON TEMPORAL LOGIC, PROCEEDINGS, P7
   de Alfaro L, 2007, LECT NOTES COMPUT SC, V4703, P74
   Fitting M., 1994, Fundamenta Informaticae, V20, P113
   Godefroid P, 2009, LECT NOTES COMPUT SC, V5403, P89, DOI 10.1007/978-3-540-93900-9_11
   Grumberg O, 2010, NATO SCI PEAC SECUR, V25, P105, DOI 10.3233/978-1-60750-100-8-105
   Herbstritt M, 2007, LECT NOTES COMPUT SC, V4739, P531
   Jussila T, 2007, ELECTRON NOTES THEOR, V174, P45, DOI 10.1016/j.entcs.2006.12.022
   Katoen JP, 2012, J LOGIC ALGEBR PROGR, V81, P356, DOI 10.1016/j.jlap.2012.03.007
   Kourie D. G., 1989, Quaestiones Informaticae, V6, P174
   Marques-Silva J, 2009, FRONT ARTIF INTEL AP, V185, P131, DOI 10.3233/978-1-58603-929-5-131
   Miller DM, 2002, INT SYM MVL, P245, DOI 10.1109/ISMVL.2002.1011095
   Nopper T, 2013, IEEE T COMPUT, V62, P1234, DOI 10.1109/TC.2012.53
   Schrieb J, 2009, LECT NOTES COMPUT SC, V5850, P106, DOI 10.1007/978-3-642-05089-3_8
   Shoham S, 2008, INFORM COMPUT, V206, P1313, DOI 10.1016/j.ic.2008.07.004
   Tarjan R., 1972, SIAM Journal on Computing, V1, P146, DOI 10.1137/0201010
   Timm N, 2015, LECT NOTES COMPUT SC, V9232, P242, DOI 10.1007/978-3-319-23404-5_16
   Timm N, 2015, LECT NOTES COMPUT SC, V8941, P162, DOI [10.1007/978-3-319-15075-8_11, 10.1007/978-3-319-15075-8-11]
   Timm N, 2010, LECT NOTES COMPUT SC, V6447, P534, DOI 10.1007/978-3-642-16901-4_35
   Wei O, 2011, INFORM COMPUT, V209, P20, DOI 10.1016/j.ic.2010.08.001
NR 32
TC 2
Z9 2
U1 0
U2 7
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 15
PY 2016
VL 126
SI SI
BP 94
EP 110
DI 10.1016/j.scico.2016.01.006
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA DP4IP
UT WOS:000378459900006
OA Green Submitted, hybrid
DA 2024-07-18
ER

PT J
AU Damiani, F
   Viroli, M
   Beal, J
AF Damiani, Ferruccio
   Viroli, Mirko
   Beal, Jacob
TI A type-sound calculus of computational fields
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Computational field; Core calculus; Operational semantics; Spatial
   computing; Type soundness
ID DESIGN
AB A number of recent works have investigated the notion of "computational fields" as a means of coordinating systems in distributed, dense and dynamic environments such as pervasive computing, sensor networks, and robot swarms. We introduce a minimal core calculus meant to capture the key ingredients of languages that make use of computational fields: functional composition of fields, functions over fields, evolution of fields over time, construction of fields of values from neighbours, and restriction of a field computation to a sub-region of the network. We formalise a notion of type soundness for the calculus that encompasses the concept of domain alignment, and present a sound static type inference system. This calculus and its type inference system can act as a core for actual implementation of coordination languages and models, as well as to pave the way towards formal analysis of properties concerning expressiveness, self-stabilisation, topology independence, and relationships with the continuous space-time semantics of spatial computations. (C) 2015 Elsevier B.V. All rights reserved.
C1 [Damiani, Ferruccio] Univ Turin, I-10124 Turin, Italy.
   [Viroli, Mirko] Univ Bologna, I-40126 Bologna, Italy.
   [Beal, Jacob] Raytheon BBN Technol, Cambridge, MA USA.
C3 University of Turin; University of Bologna; Raytheon Technologies;
   Raytheon BBN Technologies
RP Damiani, F (corresponding author), Univ Turin, I-10124 Turin, Italy.
EM ferruccio.damiani@unito.it; mirko.viroli@unibo.it; jakebeal@bbn.com
RI Ferruccio, Damiani/D-2383-2011
OI Ferruccio, Damiani/0000-0001-8109-1706
FU project HyVar (European Union's Horizon research and innovation
   programme) [644298]; EU FP7 project SAPERE [256873]; ICT COST Action
   IC1402 ARVI; Italian MIUR PRIN project CINA [2010LHT4KM]; Ateneo/CSP
   project RunVar; United States Air Force; Defense Advanced Research
   Projects Agency [FA8750-10-C-0242]; ICT COST Action IC1201 BETTY
FX This work has been partially supported by project HyVar
   (www.hyvar-project.eu, this project has received funding from the
   European Union's Horizon 2020 research and innovation programme under
   grant agreement No. 644298-Damiani), by EU FP7 project SAPERE
   (www.sapere-project.eu, under contract No. 256873-Viroli), by ICT COST
   Action IC1402 ARVI (www.cost-arvi.eu-Damiani), by ICT COST Action IC1201
   BETTY (www.behavioural-types.eu-Damiani), by the Italian MIUR PRIN
   2010/2011 2010LHT4KM project CINA (sysma.imtlucca.it/cina-Damiani &
   Viroli), by Ateneo/CSP project RunVar (Damiani), and by the United
   States Air Force and the Defense Advanced Research Projects Agency under
   Contract No. FA8750-10-C-0242 (Beal). The U.S. Government is authorized
   to reproduce and distribute reprints for Governmental purposes
   notwithstanding any copyright notation thereon. The views, opinions,
   and/or findings contained in this article are those of the
   author(s)/presenter(s) and should not be interpreted as representing the
   official views or policies of the Department of Defense or the U.S.
   Government. Approved for public release; distribution is unlimited.
CR [Anonymous], IEEE COMPUT
   [Anonymous], 2004, WORKSHOP DATA MANAGE, DOI DOI 10.1145/1052199.1052213
   [Anonymous], 27 ANN ACM S APPL CO
   [Anonymous], P 2011 ACM S APPL CO
   [Anonymous], 1997, The Definition of Standard ML
   [Anonymous], 2009, P 2009 ACM S APPL CO, DOI DOI 10.1145/1529282.1529585
   Ashley-Rollman Michael P., 2007, 2007 IEEE/RSJ International Conference on Intelligent Robots and Systems, P2794, DOI 10.1109/IROS.2007.4399480
   Bachrach J., 2007, MITCSAILTR2007017
   Bachrach J., 2008, IEEE INT C SELF AD S
   Beal J, 2006, IEEE INTELL SYST, V21, P10, DOI 10.1109/MIS.2006.29
   Beal J., 2012, 1 INT C THROUGH LIF, P35
   Beal J, 2015, PHILOS T R SOC A, V373, DOI 10.1098/rsta.2014.0220
   Beal J, 2014, INT CONF SELF SELF, P8, DOI 10.1109/SASOW.2014.6
   Beal J, 2013, FORMAL AND PRACTICAL ASPECTS OF DOMAIN-SPECIFIC LANGUAGES: RECENT DEVELOPMENTS, P436, DOI 10.4018/978-1-4666-2092-6.ch016
   Beal J, 2008, APPLIED COMPUTING 2008, VOLS 1-3, P1969
   Beal Jacob, 2014, 7 SPAT COMP WORKSH S
   Birkedal L, 2006, LECT NOTES COMPUT SC, V3921, P187
   Butera W., 2002, THESIS MIT CAMBRIDGE
   Cardelli L, 2000, THEOR COMPUT SCI, V240, P177, DOI 10.1016/S0304-3975(99)00231-5
   Cardelli L, 2010, LECT NOTES COMPUT SC, V6158, P78, DOI 10.1007/978-3-642-13962-8_9
   Clark SS, 2015, INT CONF SELF SELF, P111, DOI 10.1109/SASO.2015.19
   Damas L., 1982, C REC 9 ANN ACM S PR, P207, DOI DOI 10.1145/582153.582176
   Damiani F, 2015, LECT NOTES COMPUT SC, V9039, P113, DOI 10.1007/978-3-319-19195-9_8
   Egerstedt M, 2001, IEEE T ROBOTIC AUTOM, V17, P947, DOI 10.1109/70.976029
   Elhage N., 2010, AAMAS 2010
   ENGSTROM BR, 1989, J PARALLEL DISTR COM, V7, P201, DOI 10.1016/0743-7315(89)90018-X
   Eysholdt M., 2010, P ACM INT C COMPANIO, P307, DOI DOI 10.1145/1869542.1869625
   Haklay M, 2008, IEEE PERVAS COMPUT, V7, P12, DOI 10.1109/MPRV.2008.80
   Helbing D., 2009, Encyclopedia of Complexity and Systems Science, P6476, DOI DOI 10.1007/978-0-387-30440-3_382.763
   Igarashi A., 2001, ACM T PROGRAM LANG S, V23
   Lasser C., 1988, STARLISP REFERENCE M
   Fernandez-Marquez JL, 2013, NAT COMPUT, V12, P43, DOI 10.1007/s11047-012-9324-y
   Mamei M, 2006, J SYST ARCHITECT, V52, P443, DOI 10.1016/j.sysarc.2006.02.002
   Mamei M, 2009, ACM T SOFTW ENG METH, V18, DOI 10.1145/1538942.1538945
   Mansutti A, 2014, LECT NOTES COMPUT SC, V8460, P201, DOI 10.1007/978-3-662-43352-2_16
   Milner R, 2006, INFORM COMPUT, V204, P60, DOI 10.1016/j.ic.2005.07.003
   Olfati-Saber R., 2006, IEEE T AUTOM CONTROL, V51
   Omicini A, 2011, KNOWL ENG REV, V26, P53, DOI 10.1017/S026988891000041X
   Päun G, 2000, J COMPUT SYST SCI, V61, P108, DOI 10.1006/jcss.1999.1693
   Pianini D, 2013, J SIMUL, V7, P202, DOI 10.1057/jos.2012.27
   Pianini D, 2015, 30TH ANNUAL ACM SYMPOSIUM ON APPLIED COMPUTING, VOLS I AND II, P1846, DOI 10.1145/2695664.2695913
   Pianini D, 2014, 2014 INTERNATIONAL CONFERENCE ON HIGH PERFORMANCE COMPUTING & SIMULATION (HPCS), P460, DOI 10.1109/HPCSim.2014.6903721
   Raimbault F., 1993, Proceedings. International Conference on Application-Specific Array Processors (Cat. No.93TH0572-8), P132, DOI 10.1109/ASAP.1993.397128
   Viroli Mirko, 2012, Coordination Models and Languages. Proceedings 14th International Conference, COORDINATION 2012, P212, DOI 10.1007/978-3-642-30829-1_15
   Viroli M., 2013, SPAT COMP WORKSH SCW
   Viroli M., 2013, COMMUN COMPUT PHYS, V393, P114, DOI 10.1007/978-3-642-45364-9
   Viroli M, 2015, INT CONF SELF SELF, P81, DOI 10.1109/SASO.2015.16
   Viroli M, 2015, SCI COMPUT PROGRAM, V110, P3, DOI 10.1016/j.scico.2015.06.003
   Viroli M, 2013, SCI COMPUT PROGRAM, V78, P633, DOI 10.1016/j.scico.2012.12.003
   Viroli M, 2011, ACM T AUTON ADAP SYS, V6, DOI 10.1145/1968513.1968517
   WELSH M, 2004, P 1 USENIX ACM S NET
   Whitehouse Kamin, 2004, P 2 INT C MOB SYST A
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
   Xiao L., 2005, 4 INT S INF PROC SEN
   Yu C.-H., 2009, INT C ROB AUT ICRA
   Zambonelli F, 2011, INT J PERVASIVE COMP, V7, P186, DOI 10.1108/17427371111172997
   Zambonelli F, 2011, PROCEDIA COMPUT SCI, V7, P197, DOI 10.1016/j.procs.2011.09.006
   [No title captured]
NR 58
TC 24
Z9 26
U1 0
U2 2
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 15
PY 2016
VL 117
BP 17
EP 44
DI 10.1016/j.scico.2015.11.005
PG 28
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DC8HC
UT WOS:000369459500002
OA hybrid, Green Submitted
DA 2024-07-18
ER

PT J
AU Jacquet, JM
   Linden, I
   Staicu, MO
AF Jacquet, Jean-Marie
   Linden, Isabelle
   Staicu, Mihail-Octavian
TI Blackboard rules: From a declarative reading to its application for
   coordinating context-aware applications in mobile ad hoc networks
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Blackboard rules; Context awareness; Coordination
ID MIDDLEWARE; MODEL; LIME
AB Thanks to improvements in wireless communication technologies and increasing computing power in hand-held devices, mobile ad hoc networks are becoming an ever-more present reality. Coordination languages are expected to become important means in supporting this type of interaction. To this extent we argue the interest of the Bach coordination language as a middleware that can handle and react to context changes as well as cope with unpredictable physical interruptions that occur in opportunistic network connections. More concretely, our proposal is based on blackboard rules that model declaratively the actions to be taken once the blackboard content reaches a predefined state, but also that manage the engagement and disengagement of hosts and transient sharing of blackboards. The idea of reactiveness has already been introduced in previous work, but as will be appreciated by the reader, this article presents a new perspective, more focused on a declarative setting. (C) 2015 Elsevier B.V. All rights reserved.
C1 [Jacquet, Jean-Marie; Staicu, Mihail-Octavian] Univ Namur, Fac Comp Sci, Namur, Belgium.
   [Linden, Isabelle] Univ Namur, Dept Business Adm, Namur, Belgium.
C3 University of Namur; University of Namur
RP Staicu, MO (corresponding author), Univ Namur, Fac Comp Sci, Rue Grandgagnage 21, Namur, Belgium.
EM jean-marie.jacquet@unamur.be; isabelle.linden@unamur.be;
   mihail.staicu@unamur.be
RI Linden, Isabelle/H-5938-2015
OI Linden, Isabelle/0000-0001-8034-1857
FU Belgian National Fund of Research; Walloon Region
FX The authors wishes to thank the Belgian National Fund of Research and
   the Walloon Region for partially supporting this research. They also
   like to warmly thank the anonymous reviewers for their comments on early
   versions of this paper.
CR [Anonymous], 1999, Haskell: The Craft of Functional Programming
   [Anonymous], 27 ANN ACM S APPL CO
   [Anonymous], P 25 ANN ACM S APPL
   [Anonymous], 1981, Technical Report DAIMI FN-19
   Banatre J.-P., 1988, Future Generation Computer Systems, V4, P133, DOI 10.1016/0167-739X(88)90012-X
   BERRY G, 1990, CONFERENCE RECORD OF THE SEVENTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P81, DOI 10.1145/96709.96717
   Bosschere K.D., 1996, COORDINATION LANGUAG, V1061, P142, DOI DOI 10.1007/3-540-61052-9_44
   Brogi A, 2003, SCI COMPUT PROGRAM, V46, P71, DOI 10.1016/S0167-6423(02)00087-4
   Brogi A, 2006, FUND INFORM, V73, P431
   Cabri G., 1998, Mobile Agents. Second International Workshop, MA'98. Proceedings, P237, DOI 10.1007/BFb0057663
   De Nicola R, 1998, IEEE T SOFTWARE ENG, V24, P315, DOI 10.1109/32.685256
   DEBOER FS, 1994, INFORM COMPUT, V108, P128, DOI 10.1006/inco.1994.1004
   Denti E, 1999, LECT NOTES ARTIF INT, V1760, P90
   Denti E, 1998, 1998 ACM S APPL COMP, P169, DOI DOI 10.1145/330560.330665
   GELERNTER D, 1992, COMMUN ACM, V35, P96, DOI 10.1145/129630.129635
   Hildebrandt T, 2011, LECT NOTES COMPUT SC, V7041, P237, DOI 10.1007/978-3-642-24690-6_17
   Jacquet J.-M., 2007, P 1 ERCIM WORKSH EMO
   Jacquet JM, 2012, ELECTRON P THEOR COM, P63, DOI 10.4204/EPTCS.91.5
   Jacquet JM, 2001, NEW GENERAT COMPUT, V19, P23, DOI 10.1007/BF03037533
   Linden I, 2004, LECT NOTES COMPUT SC, V2949, P232
   Linden I., 2007, THESIS
   Menezes R., 2002, AI IA TABOO JOINT WO
   Menezes R., 2004, ELECTRON NOTES THEOR, V97, P97
   Murphy AL, 2001, INT CON DISTR COMP S, P524, DOI 10.1109/ICDSC.2001.918983
   Murphy AL, 2006, ACM T SOFTW ENG METH, V15, P279, DOI 10.1145/1151695.1151698
   Omicini A, 2007, ELECTRON NOTES THEOR, V175, P97, DOI 10.1016/j.entcs.2007.03.006
   Omicini A, 2006, LECT NOTES COMPUT SC, V3914, P71
   Omicini Andrea., 1999, P 1999 ACM S APPL CO, P183, DOI [10.1145/298151.298231, DOI 10.1145/298151.298231]
   Picco G. P., 1999, Proceedings of the 1999 International Conference on Software Engineering (IEEE Cat. No.99CB37002), P368, DOI 10.1109/ICSE.1999.841027
   Rety J.-H., 1998, Fundamenta Informaticae, V34, P323
   Saraswat Vijay A., 1993, Concurrent Constraint Programming
   Satoh I, 2002, LECT NOTES COMPUT SC, V2535, P186
   Shapiro E., 1992, CONCUR '92. Third International Conference on Concurrency Theory. Proceedings, P486
   Snyder J, 2002, LECT NOTES COMPUT SC, V2315, P317
   Sterling L., 1994, LOGIC PROGRAMMING
   Viroli M, 2009, LECT NOTES COMPUT SC, V5521, P143, DOI 10.1007/978-3-642-02053-7_8
   Zachariadis S, 2002, 22ND INTERNATIONAL CONFERENCE ON DISTRIBUTED COMPUTING SYSTEMS WORKSHOP, PROCEEDINGS, P385, DOI 10.1109/ICDCSW.2002.1030799
NR 37
TC 3
Z9 3
U1 0
U2 6
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN-FEB
PY 2016
VL 115
SI SI
BP 79
EP 99
DI 10.1016/j.scico.2015.08.003
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CZ5DH
UT WOS:000367122200005
OA hybrid
DA 2024-07-18
ER

PT J
AU Bender, M
   Laurin, K
   Lawford, M
   Pantelic, V
   Korobkine, A
   Ong, J
   Mackenzie, B
   Bialy, M
   Postma, S
AF Bender, Marc
   Laurin, Karen
   Lawford, Mark
   Pantelic, Vera
   Korobkine, Alexandre
   Ong, Jeff
   Mackenzie, Bennett
   Bialy, Monika
   Postma, Steven
TI Signature required: Making Simulink data flow and interfaces explicit
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Simulink; Interfaces; Model transformation; Software engineering; Data
   flow
AB Model comprehension and effective use and reuse of complex subsystems are problems currently encountered in the automotive industry. To address these problems we present a technique for extracting, presenting, and making use of signatures for Simulink subsystems. The signature of a subsystem is defined to be a generalization of its interface, including the subsystem's explicit ports, locally defined and inherited data stores, as well as scoped gotos/froms. We argue that the use of signatures has significant benefits for model comprehension and subsystem testing, and show how the incorporation of signatures into existing Simulink models is practical and useful by discussing various usage scenarios. Furthermore, outside of the model setting, signatures have proven to be an asset when exported and included in software documentation. (C) 2015 Elsevier B.V. All rights reserved.
C1 [Bender, Marc; Laurin, Karen; Lawford, Mark; Pantelic, Vera; Korobkine, Alexandre; Ong, Jeff; Mackenzie, Bennett; Bialy, Monika; Postma, Steven] McMaster Univ, Dept Comp & Software, McMaster Ctr Software Certificat, Hamilton, ON L8S 4L8, Canada.
C3 McMaster University
RP Pantelic, V (corresponding author), McMaster Univ, Dept Comp & Software, McMaster Ctr Software Certificat, Hamilton, ON L8S 4L8, Canada.
EM bendermm@mcmaster.ca; laurink@mcmaster.ca; lawford@mcmaster.ca;
   pantelv@mcmaster.ca; korobka@mcmaster.ca; ongj2@mcmaster.ca;
   mackeb@mcmaster.ca; bialym2@mcmaster.ca; posmasm@mcmaster.ca
RI Jaskolka, Monika/AAA-9415-2022
OI Jaskolka, Monika/0000-0001-5853-6412
CR [Anonymous], 1977, Elements of software science
   Bender M, 2014, PROCEEDINGS OF THE 2014 2ND INTERNATIONAL CONFERENCE ON MODEL-DRIVEN ENGINEERING AND SOFTWARE DEVELOPMENT (MODELSWARD 2014), P119
   Cox A., 2004, P INT C DISTR MULT S, P247
   Green Thomas RG, 1992, HUMAN COMPUTER INTER, P167
   MathWorks, 2013, SUBS AT SUBS NONV SU
   MathWorks, 2008, BEST PRACT DAT STOR
   McCabe T. J., 1976, IEEE Transactions on Software Engineering, VSE-2, P308, DOI 10.1109/TSE.1976.233837
   MEYER B, 1992, COMPUTER, V25, P40, DOI 10.1109/2.161279
   Olszewska M., 2011, 1002 TURK CTR COMP S
   PARNAS DL, 1972, COMMUN ACM, V15, P1053, DOI 10.1145/361598.361623
   Quante J., 2013, SOFTW TECH TRENDS, V33, P55
   Rau A, 2000, BUSINESS BRIEFING GL, P124
   Rau A., 2001, SOFTW TECH TRENDS, V21, P19
   Rau A., 2002, Gesellschaft fur Informatik, FG, V2, P12
   Schafer M., 2009, P 23 EUROPEAN C ECOO, P369, DOI [10.1007/978-3-642-03013-0_17, DOI 10.1007/978-3-642-03013-0_17]
   Schatz B., 2002, Advances in Object-Oriented Information Systems. OOIS 2002 Workshops. Proceedings (Lecture Notes in Computer Science Vol.2426), P298
NR 16
TC 10
Z9 10
U1 0
U2 1
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 1
PY 2015
VL 113
SI SI
BP 29
EP 50
DI 10.1016/j.scico.2015.07.005
PN 1
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CY2HT
UT WOS:000366230100003
OA Bronze
DA 2024-07-18
ER

PT J
AU Koshima, AA
   Englebert, V
AF Koshima, Amanuel Alemayehu
   Englebert, Vincent
TI Collaborative editing of EMF/Ecore meta-models and models: Conflict
   detection, reconciliation, and merging in DiCoMEF
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE EMF; DSML; Collaborative modeling; Conflict detection; Merging
ID CONFIGURATION MANAGEMENT
AB Despite the fact that Domain Specific Modeling tools are becoming very powerful and more frequently used, the support for their cooperation has not reached its full strength, and demand for model management is growing. In cooperative work, the decision agents are semi-autonomous and therefore a solution for reconciliating DSM after a concurrent evolution is needed. Conflict detection and reconciliation are important steps for merging of concurrently evolved (meta)models in order to ensure collaboration. In this work, we present a conflict detection, reconciliation and merging framework for concurrently evolved meta-models and models. Additionally, we formally specify the EMF Ecore meta-model into set constructs that help to analyze the (meta)model and operations performed on it. (C) 2015 Elsevier B.V. All rights reserved.
C1 [Koshima, Amanuel Alemayehu; Englebert, Vincent] Univ Namur, Fac Comp Sci, PReCISE Res Ctr, B-5000 Namur, Belgium.
C3 University of Namur
RP Koshima, AA (corresponding author), Univ Namur, Fac Comp Sci, PReCISE Res Ctr, Rue Grandgagnage 21, B-5000 Namur, Belgium.
EM amanuel.koshima@unamur.be; vincent.englebert@unamur.be
OI Koshima, Amanuel/0000-0002-5293-0678
CR Alanen M, 2003, LECT NOTES COMPUT SC, V2863, P2
   Altmanninger K., 2009, SURVEY MODEL VERSION
   [Anonymous], 2008, Metamodelling for software engineering
   [Anonymous], 2011, THESIS
   [Anonymous], WORKSH INT SIGN PROC
   [Anonymous], 1992, COMPUT SUPP COOP W J, DOI DOI 10.1007/BF00752449
   [Anonymous], 2011, UML 2 0 SUP OMG UN M
   [Anonymous], 2002, MET OBJ FAC MOF SPEC
   Apiwattanapong T, 2007, AUTOMAT SOFTW ENG, V14, P3, DOI 10.1007/s10515-006-0002-0
   Blanc X., 2005, P 2003 EUR C MOD DRI, P17
   Blanc X, 2009, LECT NOTES COMPUT SC, V5565, P32, DOI 10.1007/978-3-642-02144-2_8
   Chacon Scott., 2009, Pro Git, V1st, DOI DOI 10.1016/j.rse.2010.01.021
   Constantin C., 2009, P 1 INT WORKSH DOM E, V457
   de Lara J., 2002, ICEIS 2002. Proceedings of the Fourth International Conference on Enterprise Information Systems, P642
   Demever S., 2001, FAMIX 2 1 FAMOOS INF
   Dewan P, 2007, ECSCW 2007: PROCEEDINGS OF THE 10TH EUROPEAN CONFERENCE ON COMPUTER-SUPPORTED COOPERATIVE WORK, P159, DOI 10.1007/978-1-84800-031-5_9
   Dig D, 2007, PROC INT CONF SOFTW, P427
   Englebert V, 2007, LECT NOTES COMPUT SC, V4495, P454
   Gîrba T, 2005, ELECTRON NOTES THEOR, V137, P57, DOI 10.1016/j.entcs.2005.07.005
   Herrmannsdoerfer M, 2009, 2009 ICSE WORKSHOP ON COMPARISON AND VERSIONING OF SOFTWARE MODELS, P49, DOI 10.1109/CVSM.2009.5071722
   Ignat C.-L, 2007, 2007 International Conference on Collaborative Computing: Networking, Applications and Worksharing (CollaborateCom 2007), P474, DOI 10.1109/COLCOM.2007.4553878
   Kelly S., 2008, Domain-Specific Modeling
   Koegel M., 2010, 2010 32nd International Conference on Software Engineering (ICSE), P307, DOI 10.1145/1810295.1810364
   Koegel M, 2009, 2009 ICSE WORKSHOP ON COMPARISON AND VERSIONING OF SOFTWARE MODELS, P43, DOI 10.1109/CVSM.2009.5071721
   Koegel Maximilian, 2009, P MODELS, V9
   Koshima A., 2011, Proceedings of the 2011 6th IEEE International Conference on Global Software Engineering (ICGSE 2011), P113, DOI 10.1109/ICGSE.2011.18
   Koshima A. A., 2013, DOMAIN ENG, P239
   LAMPORT L, 1978, COMMUN ACM, V21, P558, DOI 10.1145/359545.359563
   Langer P., SOFTWARETECHNIK TREN
   Lippe E., 1992, SIGSOFT Software Engineering Notes, V17, P78, DOI 10.1145/142882.143753
   Mens T, 2002, IEEE T SOFTWARE ENG, V28, P449, DOI 10.1109/TSE.2002.1000449
   Monperrus M, 2009, 16TH ANNUAL IEEE INTERNATIONAL CONFERENCE AND WORKSHOP ON THE ENGINEERING OF COMPUTER BASED SYSTEMS, PROCEEDINGS, P315, DOI 10.1109/ECBS.2009.41
   Monson-Haefel R., 2000, Java Message Service
   Morse T., 1996, LINUX J, V1996, p21es
   Mougenot A., 2009, P 9 IFIP WG 6 1 INT, P16
   Oliveira HamiltonL. R., 2008, Proceedings of the 12th International Workshop on Software Configuration Management, SCM 2005, Lisbon, Portugal, September 5-6, 2005, P1, DOI [10.1145/1109128.1109129, DOI 10.1145/1109128.1109129]
   Pilato C.M., 2008, VERSION CONTROL SUBV
   Rolland C., 1998, IFIP C P, V115, P49
   Saeki M, 2006, LECT NOTES COMPUT SC, V4001, P384, DOI 10.1007/11767138_26
   Schmidt DC, 2006, COMPUTER, V39, P25, DOI 10.1109/MC.2006.58
   Sriplakich P, 2008, APPLIED COMPUTING 2008, VOLS 1-3, P674
   Steinberg D, 2009, EMF ECLIPSE MODELING, V2nd
   Taentzer G, 2014, SOFTW SYST MODEL, V13, P239, DOI 10.1007/s10270-012-0248-x
   Zimmermann T., 2012, P CSCW WORKSH FUT CO
NR 44
TC 8
Z9 8
U1 0
U2 4
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 1
PY 2015
VL 113
SI SI
BP 3
EP 28
DI 10.1016/j.scico.2015.07.004
PN 1
PG 26
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CY2HT
UT WOS:000366230100002
DA 2024-07-18
ER

PT J
AU Perry, DE
AF Perry, Dewayne E.
TI A framework for exploring unifying theories of empirical software
   engineering
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Theories and models of software engineering and software engineering
   research; Model calculus; Model composition; Framework evaluation
AB One of the reasons for the lack of rigor in software engineering compared to physical and behavioral sciences is that the theories that underpin our work, both as software engineers and as software engineering researchers, have not been given enough attention. To provide a step forward towards greater rigor, a framework has been created with which to explore theories of software engineering and software engineering research. This framework provides a simple theory modeling language and model calculus to explore informally described theories and to generate the results of composing modeled theories. To illustrate and evaluate this framework, a general theory about software engineering is presented and then two simple theories, D and E, are proposed as the basis for laying out a unified theoretical foundation for software engineering and software engineering research. Software Engineering consists of two logical parts: design, and empirical evaluation (both terms used in their broadest senses). Theory D is the theoretical basis for the design part, and theory E is the theoretical basis for empirical evaluation. These two theories are then composed in various ways to lay out a space (a taxonomy, or ontology if you will) for software engineering and software engineering research. Finally, it is claimed that software engineering and software engineering research (both fully integrated with empirical evaluations) are models (in the logical sense) for these atomic and composed theories. To further evaluate the framework, examples are provided of modeling (implicit) theories found in a number of software engineering (theory) papers.
   The results of this research are: 1) a scientific elegance in creating larger more complex theories out of simpler theories, 2) an elegant way of explaining the complexity of software engineering and software engineering research, and 3) a theory modeling language and model calculus for composing the resulting theoretical models. (C) 2014 Elsevier B.V. All rights reserved.
C1 Univ Texas Austin, Ctr Adv Res Software Engn ARiSE, Austin, TX 78712 USA.
C3 University of Texas System; University of Texas Austin
RP Perry, DE (corresponding author), Univ Texas Austin, Ctr Adv Res Software Engn ARiSE, Austin, TX 78712 USA.
EM perry@mail.utexas.edu
FU NSF CISE SRS Grant [CCF-0820251]
FX This research was sponsored in part by NSF CISE SRS Grant CCF-0820251.
   My thanks also to Don Batory for a willingness to listen and comment.
CR Adolph Steve, 2013, 2 SEM WORKSH GEN THE
   [Anonymous], 1995, MYTHICAL MAN MONTH
   Batory D, 2004, IEEE T SOFTWARE ENG, V30, P355, DOI 10.1109/TSE.2004.23
   Brandozzi Manuel, 2003, INT WORKSH SOFTW REQ, P107
   Brandozzi Manuel., 2001, Workshop from Soft. Req. to Arch, P54
   Fortnow L., 2002, HIST MATH LOGIC
   Glaser B. G., 1967, DISCOVERY GROUNDED T, DOI 10.1515/9783111660211/html
   Gooding D., 1989, The Uses of Experiment: Studies in the Natural Sciences
   Gregor S, 2006, MIS QUART, V30, P611
   JACKSON M, 1995, PROC INT CONF SOFTW, P283, DOI 10.1145/225014.225041
   JANI D, 2005, EUR WORKSH SOFTW ARC
   MARKUS ML, 1988, MANAGE SCI, V34, P583, DOI 10.1287/mnsc.34.5.583
   Nuseibeh Bashar, 1993, INT C SOFTW ENG 1993
   Perry Dewayne E., 2011, 20 INT C SOFTW ENG D
   Perry Dewayne E., 2013, TRARISE20130004 ARIS
   Perry Dewayne E., 2013, 2 SEM WORKSH GEN THE
   Shao D., 2007, 23 INT C SOFTW MAINT
   Simon H., 1982, SCI ARTIFICIAL
   Turski WladyslawM., 1987, SPECIFICATION COMPUT
   van Lamsweerde A, 2003, LECT NOTES COMPUT SC, V2804, P25
   Walter G. Vincenti, 1990, WHAT ENG KNOW THEY K
   Wittgenstein L., 1974, Tractatus logico-philosophicus
NR 22
TC 1
Z9 1
U1 0
U2 11
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD APR 1
PY 2015
VL 101
BP 99
EP 123
DI 10.1016/j.scico.2014.11.011
PG 25
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CC6XZ
UT WOS:000350513600007
OA Bronze
DA 2024-07-18
ER

PT J
AU Tushkanova, E
   Giorgetti, A
   Ringeissen, C
   Kouchnarenko, O
AF Tushkanova, E.
   Giorgetti, A.
   Ringeissen, C.
   Kouchnarenko, O.
TI A rule-based system for automatic decidability and combinability
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Decision procedures; Superposition; Schematic saturation
ID SATISFIABILITY PROCEDURES; REWRITING APPROACH; COMBINATION
AB This paper deals with decision procedures specified by using a superposition calculus which is an inference system at the core of all equational theorem provers. This calculus is refutation complete: it provides a semi-decision procedure that halts on unsatisfiable inputs but may diverge on satisfiable ones. Fortunately, it may also terminate for some theories of interest in verification, and thus it becomes a decision procedure. To reason on the superposition calculus, a schematic superposition calculus has been developed to build the schematic form of the saturations allowing to automatically prove decidability of single theories and of their combinations.
   This paper presents a rule-based logical framework and a tool implementing a complete many-sorted schematic superposition calculus for arbitrary theories. By providing results for unit theories, arbitrary theories, and also for theories with counting operators, we show that this tool is very useful to derive decidability and combinability of theories of practical interest in verification. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Tushkanova, E.; Giorgetti, A.; Ringeissen, C.; Kouchnarenko, O.] Inria, F-54600 Villers Les Nancy, France.
   [Tushkanova, E.; Giorgetti, A.; Kouchnarenko, O.] Univ Franche Comte, FEMTO ST Inst, UMR 6174, F-25030 Besancon, France.
C3 Inria; Centre National de la Recherche Scientifique (CNRS); CNRS -
   Institute for Engineering & Systems Sciences (INSIS); Universite de
   Franche-Comte; Universite de Technologie de Belfort-Montbeliard (UTBM)
RP Giorgetti, A (corresponding author), Inria, F-54600 Villers Les Nancy, France.
EM elena.tushkanova@femto-st.fr; alain.giorgetti@femto-st.fr;
   Christophe.Ringeissen@loria.fr; olga.kouchnarenko@femto-st.fr
RI Kouchnarenko, Olga/AFY-4564-2022; Giorgetti, Alain/I-6035-2019;
   Giorgetti, Alain/JSL-7797-2023
OI Kouchnarenko, Olga/0000-0003-1482-9015; Giorgetti,
   Alain/0000-0002-0990-9611; 
CR Armando A, 2005, LECT NOTES COMPUT SC, V3717, P65
   Armando A, 2003, INFORM COMPUT, V183, P140, DOI 10.1016/S0890-5401(03)00020-8
   Armando A, 2009, ACM T COMPUT LOG, V10, DOI 10.1145/1459010.1459014
   Blanchette Jasmin Christian, 2013, Automated Deduction - CADE-24. 24th International Conference on Automated Deduction. Proceedings: LNCS 7898, P414, DOI 10.1007/978-3-642-38574-2_29
   Clavel M, 2003, LECT NOTES COMPUT SC, V2706, P76
   Clavel M, 2009, LECT NOTES COMPUT SC, V5595, P380, DOI 10.1007/978-3-642-02348-4_27
   Dershowitz Nachum, 1990, Handbook of Theoretical Computer Science, Volume B: Formal Models and Semantics, P243, DOI 10.1016/b978-0-444-88074-1.50011-1
   Durán F, 2010, LECT NOTES COMPUT SC, V6381, P86, DOI 10.1007/978-3-642-16310-4_7
   Durán F, 2010, LECT NOTES COMPUT SC, V6381, P69, DOI 10.1007/978-3-642-16310-4_6
   Eker S, 2007, ELECTRON NOTES THEOR, V174, P3, DOI 10.1016/j.entcs.2006.03.017
   Godoy G, 2004, J SYMB COMPUT, V37, P1, DOI 10.1016/S0747-7171(03)00070-1
   Krstic S, 2007, LECT NOTES COMPUT SC, V4424, P602
   Lynch C, 2002, IEEE S LOG, P7, DOI 10.1109/LICS.2002.1029813
   Lynch C, 2011, INFORM COMPUT, V209, P1026, DOI 10.1016/j.ic.2011.03.005
   Martí-Oliet N, 2005, ELECTRON NOTES THEOR, V117, P417, DOI 10.1016/j.entcs.2004.06.020
   Nicolini E, 2009, LECT NOTES ARTIF INT, V5663, P51, DOI 10.1007/978-3-642-02959-2_4
   Nicolini E, 2009, LECT NOTES COMPUT SC, V5505, P428, DOI 10.1007/978-3-642-00768-2_35
   Nieuwenhuis R., 2001, HDB AUTOMATED REASON, VI, P371, DOI DOI 10.1016/B978-044450813-3/50009-6
   Ringeissen C, 2011, LECT NOTES ARTIF INT, V6989, P211, DOI 10.1007/978-3-642-24364-6_15
   Tushkanova Elena, 2012, Rewriting Logic and Its Applications. 9th International Workshop, WRLA 2012. Held as a Satellite Event of ETAPS. Revised Selected Papers, P221, DOI 10.1007/978-3-642-34005-5_12
   Tushkanova E., 2013, THESIS U FRANCHE COM
   Tushkanova E., 2013, RTA 13, P303
NR 22
TC 9
Z9 10
U1 0
U2 2
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR 7
PY 2015
VL 99
BP 3
EP 23
DI 10.1016/j.scico.2014.02.005
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CA5PI
UT WOS:000348959900002
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Bolz, CF
   Tratt, L
AF Bolz, Carl Friedrich
   Tratt, Laurence
TI The impact of meta-tracing on VM design and implementation
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Virtual machines; Meta-tracing; Programming languages
AB Most modern languages are implemented using Virtual Machines (VMs). While the best VMs use Just-In-Time (JIT) compilers to achieve good performance, JITs are costly to implement, and few VMs therefore come with one. The RPython language allows tracing JIT VMs to be automatically created from an interpreter, changing the economics of VM implementation. In this paper, we explain, through two concrete VMs, how meta-tracing RPython VMs can be designed and optimised, and, experimentally, the performance levels one might reasonably expect from them. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Bolz, Carl Friedrich] Univ Dusseldorf, D-40204 Dusseldorf, Germany.
   [Tratt, Laurence] Kings Coll London, London WC2R 2LS, England.
C3 Heinrich Heine University Dusseldorf; University of London; King's
   College London
RP Tratt, L (corresponding author), Kings Coll London, London WC2R 2LS, England.
EM cfbolz@gmx.de; laurie@tratt.net
RI Tratt, Laurence/A-8594-2013
OI Bolz-Tereick, CF/0000-0003-4562-1356
CR Ancona D., 2007, DLS
   Anderson K. R., 1994, ACM SIGPLAN LISP POI, V7, P2
   Bala V, 2000, ACM SIGPLAN NOTICES, V35, P1, DOI 10.1145/358438.349303
   Barrett K, 1996, ACM SIGPLAN NOTICES, V31, P69, DOI 10.1145/236338.236343
   Bebenita M, 2010, ACM SIGPLAN NOTICES, V45, P708, DOI 10.1145/1932682.1869517
   Bolz C.F., 2010, PPDP
   Bolz C.F., 2011, P 20 ACM SIGPLAN WOR, P43, DOI DOI 10.1145/1929501.1929508
   Bolz Carl Friedrich, 2011, P 6 WORKSH IMPL COMP, P1, DOI [10.1145/2069172.2069181, DOI 10.1145/2069172.2069181]
   Bolz Carl Friedrich, 2009, P 4 WORKSH IMPL COMP, P18, DOI [10.1145/1565824.1565827, DOI 10.1145/1565824.1565827]
   Bracha G, 2004, ACM SIGPLAN NOTICES, V39, P331, DOI 10.1145/1035292.1029004
   Chambers C., 1989, OOPSLA, V24
   Chambers C., 1989, P PLDI
   Diekmann L., 2012, THESIS HEINRICH HEIN
   Gal A., 2006, VEE
   Goldberg Adele., 1983, SMALLTALK 80 LANGUAG
   Ingalls D, 1997, ACM SIGPLAN NOTICES, V32, P318, DOI 10.1145/263700.263754
   Kelsey R. A., 1994, LISP and Symbolic Computation, V7, P315, DOI 10.1007/BF01018614
   Paleczny M., 2001, P JVM RES TECHN S
   Rigo A., 2006, DLS
   Rose J.R., 2009, P VMIL
   Schiffman A. M., 1984, POPL
   Serpette BP, 2002, ACM SIGPLAN NOTICES, V37, P259, DOI 10.1145/583852.581503
   Tratt L, 2010, ACM SIGPLAN NOTICES, V45, P73, DOI 10.1145/1899661.1869640
   Tratt L, 2009, ADV COMPUT, V77, P149, DOI 10.1016/S0065-2458(09)01205-4
   Tratt Laurence., 2005, DLS 05, P49, DOI DOI 10.1145/1146841.1146846
   Weicker R. P., 1989, Ada Letters, V9, P60
   Wolczko M., 1999, P WORKSH SIMPL PERF
NR 27
TC 11
Z9 12
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 1
PY 2015
VL 98
SI SI
BP 408
EP 421
DI 10.1016/j.scico.2013.02.001
PN 3
PG 14
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AY7LH
UT WOS:000347741200007
DA 2024-07-18
ER

PT J
AU Bruntink, M
AF Bruntink, Magiel
TI Towards base rates in software analytics Early results and challenges
   from studying Ohloh
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Software engineering; Software analytics; Open source software; Base
   rates
AB Nowadays a vast and growing body of open source software (OSS) project data is publicly available on the internet. Despite this public body of project data, the field of software analytics has not yet settled on a solid quantitative base for basic properties such as code size, growth, team size, activity, and project failure. What is missing is a quantification of the base rates of such properties, where other fields (such as medicine) commonly rely on base rates for decision making and the evaluation of experimental results. The lack of knowledge in this area impairs both research activities in the field of software analytics and decision making on software projects in general. This paper contributes initial results of our research towards obtaining base rates using the data available at Ohloh (a large-scale index of OSS projects). Zooming in on the venerable 'lines of code' metric for code size and growth, we present and discuss summary statistics and identify further research challenges. (C) 2013 Elsevier B.V. All rights reserved.
C1 Univ Amsterdam, Syst & Network Engn Res Grp, Fac Sci, NL-1012 WX Amsterdam, Netherlands.
C3 University of Amsterdam
RP Bruntink, M (corresponding author), Univ Amsterdam, Syst & Network Engn Res Grp, Fac Sci, NL-1012 WX Amsterdam, Netherlands.
EM M.Bruntink@uva.nl
CR Androutsellis-Theotokis Stephanos, 2010, Foundations and Trends in Technology, Information and Operations Management, V4, P187, DOI 10.1561/0200000026
   [Anonymous], P 9 JOINT M EUR SOFT
   Arafat O., 2009, 42nd Hawaii International Conference on System Sciences, P1, DOI DOI 10.1109/HICSS.2009.421
   Barahona J. M. Gonzalez, 2010, P 3 INT WORKSH EM TR, P29
   Black Duck Software Inc. Ohcount, 2013, OHC
   Bruntink M., 2013, OHLOHANALYTICS DATA
   Delorey D. P., 2007, P 1 INT WORKSH 2007
   Deshpande A, 2008, INT FED INFO PROC, V275, P197
   Gousios Georgios, 2012, 2012 9th IEEE Working Conference on Mining Software Repositories (MSR 2012), P12, DOI 10.1109/MSR.2012.6224294
   Hassan AE, 2008, 2008 FRONTIERS OF SOFTWARE MAINTENANCE, P48, DOI 10.1109/FOSM.2008.4659248
   Kagdi H, 2007, J SOFTW MAINT EVOL-R, V19, P77, DOI 10.1002/smr.344
   Klint P, 2009, IEEE INT WORK C SO, P168, DOI 10.1109/SCAM.2009.28
   Liebchen G. A., 2010, THESIS BRUNEL U
   Menzies T., 2012, The PROMISE Repository of empirical software engineering data
   Nussbaum Lucas, 2010, Proceedings of the 2010 7th IEEE Working Conference on Mining Software Repositories (MSR 2010), P52, DOI 10.1109/MSR.2010.5463277
   Pournelle G. H., 1953, Journal of Mammalogy, V34, P133, DOI 10.1890/0012-9658(2002)083[1421:SDEOLC]2.0.CO;2
   Rodriguez D., 2012, 2012 Proceedings of the First International Workshop on Realizing Artificial Intelligence Synergies in Software Engineering (RAISE 2012), P52, DOI 10.1109/RAISE.2012.6227971
   Shepperd M., 2011, P 2 INT WORKSH EM TR
   Tabemero I. Herraiz, 2008, THESIS MADRID
   van der Maaten L, 2008, J MACH LEARN RES, V9, P2579
   van Solingen R., 2013, ENCY SOFTWARE ENG
   Wiggins A, 2010, IFIP ADV INF COMM TE, V319, P294
   Zhang DY, 2011, ISTM/2011: 9TH INTERNATIONAL SYMPOSIUM ON TEST AND MEASUREMENT, P55
NR 23
TC 1
Z9 1
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 1
PY 2015
VL 97
SI SI
BP 135
EP 142
DI 10.1016/j.scico.2013.11.023
PN 1
PG 8
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AU6PR
UT WOS:000345725100023
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Cameron, A
   Stumptner, M
   Nandagopal, N
   Mayer, W
   Mansell, T
AF Cameron, Alexander
   Stumptner, Markus
   Nandagopal, Nanda
   Mayer, Wolfgang
   Mansell, Todd
TI Rule-based peer-to-peer framework for decentralised real-time service
   oriented architectures
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Service-Oriented Architectures; Rule based decentralised process
   execution; Real-time systems; Deterministic; Real-Time Calculus
AB Modularity has been a key issue in the design and development of modern embedded Real-Time Software Systems (RTS) where modularity enables flexibility with respect to changes in platform, environment, and requirements, as well as reuse. In distributed RTS, similar ideas have led to the adoption of Commercial Off-The-Shelf (COTS) components integrated via Service-Oriented Architecture (SOA) principles and technologies that are already well-established in business-oriented information systems. However, current SOA technologies for orchestration, such as Enterprise Service Busses, do not meet strict time-dependent constraints on scalability and latency required by RTS.
   We present a novel approach to RTS development where the orchestration of real-time processes is decentralised among the services within a fully distributed rule-driven process framework. Our framework wraps around COTS components implementing individual processing steps in a decentralised real-time process. Our execution model incorporates real-time constraints and is configurable through message routing policies distributed as a knowledge base containing rule sets, and therefore dispenses with the need for a central orchestration component which could easily become a bottleneck. Deterministic behaviour can be achieved through the validation of the rule-sets and the use of Modular Performance Analysis (MPA).
   We analyse the performance of our architecture using the Real-Time Calculus and show by empirical evaluation that our method scales to a typical real-time process application found in a tactical naval combat system context. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Cameron, Alexander; Stumptner, Markus; Nandagopal, Nanda; Mayer, Wolfgang] Univ S Australia, Adv Comp Ctr, Adelaide, SA 5001, Australia.
   [Mansell, Todd] Def Sci & Technol Org, Adelaide, SA, Australia.
C3 University of South Australia; Defence Science & Technology
RP Cameron, A (corresponding author), Univ S Australia, Adv Comp Ctr, Adelaide, SA 5001, Australia.
EM alexander.cameron@mymail.unisa.edu.au; markus.stumptner@unisa.edu.au;
   nanda.nandagopal@unisa.edu.au; wolfgang.mayer@unisa.edu.au;
   todd.mansell@dsto.defence.gov.au
RI Stumptner, Markus/B-5558-2009
OI Stumptner, Markus/0000-0002-7125-3289; Nandagopal,
   Doraisamy/0000-0003-0722-9724; Mayer, Wolfgang/0000-0002-2154-2269
CR [Anonymous], 2012, MIL COMM INF SYST C
   B'Far R., 2013, PRACTICAL ASPECTS SO
   Ball M, 2005, LECT NOTES COMPUT SC, V3791, P218, DOI 10.1007/11580072_20
   Barker A, 2009, CLADE09: 7TH INTERNATIONAL WORKSHOP ON CHALLENGES OF LARGE APPLICATIONS IN DISTRIBUTED ENVIRONMENTS, P1
   Baruah SK, 2003, REAL-TIME SYST, V24, P93, DOI 10.1023/A:1021711220939
   Boley H., 2012, SCHEMA SPECIFICATION
   Buhler P. A., 2005, Information Technology & Management, V6, P61, DOI 10.1007/s10799-004-7775-2
   Cameron A., 2013, P 28 ANN ACM S APPL, P1877
   Canney S. A., 2002, VIRTUAL MARITIME SYS
   Cassandras C. G., 2008, INTRO TODISCRETE EVE
   Chakraborty S, 2003, DESIGN, AUTOMATION AND TEST IN EUROPE CONFERENCE AND EXHIBITION, PROCEEDINGS, P190
   Chokshi DB, 2008, RTCSA 2008: 14TH IEEE INTERNATIONAL CONFERENCE ON EMBEDDED AND REAL-TIME COMPUTING SYSTEMS AND APPLICATIONS - PROCEEDINGS, P387, DOI 10.1109/RTCSA.2008.28
   Davidrajuh Reggie, 2008, 2008 Second Asia International Conference on Modeling & Simulation, P861, DOI 10.1109/AMS.2008.13
   Erbas C, 2007, FORM METHOD SYST DES, V30, P29, DOI 10.1007/s10703-006-0021-2
   Esfahani FS, 2011, J SYST SOFTWARE, V84, P1591, DOI 10.1016/j.jss.2011.03.031
   Eshuis R., 2001, Fundamental Approaches to Software Engineering. 4th International Conference, FASE 2001. Held as Part of the Joint European Conferences on Theory and Practice of Software, ETAPS 2001. Proceedings (Lecture Notes in Computer Science Vol.2029), P76
   Fidler M, 2010, IEEE COMMUN SURV TUT, V12, P59, DOI 10.1109/SURV.2010.020110.00019
   Fowler M., 2018, Refactoring: Improving the Design of Existing Code
   Haid W., 2007, COMPLEX TASK ACTIVAT
   Kott K, 2008, NAV ENG J, V120, P67, DOI 10.1111/j.1559-3584.2008.00166.x
   Kowalewski B, 2008, LECT NOTES COMPUT SC, V5103, P358, DOI 10.1007/978-3-540-69389-5_41
   Krammer A., 2011, BUS INF SYST ENG
   Laliwala Zakir, 2008, 2008 International Conference on Service Systems and Service Management (ICSSSM 2008), P1, DOI 10.1109/ICSSSM.2008.4598452
   Levina O, 2009, 2009 FOURTH INTERNATIONAL CONFERENCE ON INTERNET AND WEB APPLICATIONS AND SERVICES, P37, DOI 10.1109/ICIW.2009.14
   Mall R., 2007, Real-Time Systems: Theory and Practice
   Mendling J, 2008, J ENTERP INF MANAG, V21, P525, DOI 10.1108/17410390810904274
   Naedele M., 1999, Proceedings of the 14th World Congress. International Federation of Automatic Control, P251
   Perathoner S., 2011, MODULAR PERFORMANCE
   Reese C, 2006, LECT NOTES COMPUT SC, V3529, P200
   Savage EL, 2005, INFORMS J COMPUT, V17, P3, DOI [10.1287/ijoc.1030.0053, 10.1287/ijoc1030.0053]
   SOA, 2013, RTOTRSET123 NATO SCI
   Thiele L, 2000, ISCAS 2000: IEEE INTERNATIONAL SYMPOSIUM ON CIRCUITS AND SYSTEMS - PROCEEDINGS, VOL IV, P101, DOI 10.1109/ISCAS.2000.858698
   Tsai WT, 2006, SOSE 2006: SECOND IEEE INTERNATIONAL SYMPOSIUM ON SERVICE-ORIENTED SYSTEM ENGINEERING, PROCEEDINGS, P49
   Wandeler E., 2006, Modular Performance Analysis and Interface-Based Design for Embedded Real-Time Systems
   Wang J., 2007, HDB DYNAMIC SYSTEM M, P241
   Weindelmayer F., 2008, NAVSEA 2008
   Wutke D, 2008, APPLIED COMPUTING 2008, VOLS 1-3, P90
   Yoon Young., 2011, P 20 INT BIBLIO 160, P785, DOI 10.1145/1963405.1963515
NR 38
TC 11
Z9 11
U1 0
U2 10
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 1
PY 2015
VL 97
SI SI
BP 202
EP 234
DI 10.1016/j.scico.2014.06.005
PN 2
PG 33
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AU6PS
UT WOS:000345725200003
OA Bronze
DA 2024-07-18
ER

PT J
AU Zhao, Y
   Rozier, KY
AF Zhao, Yang
   Rozier, Kristin Yvonne
TI Formal specification and verification of a coordination protocol for an
   automated air traffic control system
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Temporal logic; Model validation; Specification debugging; Model
   checking; Safety-critical system
ID SYMBOLIC MODEL CHECKING
AB Safe separation between aircraft is the primary consideration in air traffic control. To achieve the required level of assurance for this safety-critical application, the Automated Airspace Concept (AAC) proposes three levels of conflict detection and resolution. Recently, a high-level operational concept was proposed to define the cooperation between components in the MC. However, the proposed coordination protocol has not been formally studied. We use formal verification techniques to ensure there are no potentially catastrophic design flaws remaining in the MC design before the next stage of production. We formalize the high-level operational concept, which was previously described only in natural language, in both NuSMV and CadenceSMV, and perform model validation by checking against temporal logic specifications in LTL and CTL that we derive from the system description. We write LTL specifications describing safe system operations and use model checking for system verification. We employ specification debugging to ensure correctness of both sets of formal specifications and model abstraction to reduce model checking time and enable fast, design-time checking. We analyze two counterexamples revealing unexpected emergent behaviors in the operational concept that triggered design changes by system engineers to meet safety standards. Our experience report illuminates the application of formal methods in real safety-critical system development by detailing a complete end-to-end design-time verification process including all models and specifications. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Zhao, Yang] Univ Calif Riverside, Riverside, CA 92521 USA.
   [Rozier, Kristin Yvonne] NASA, Ames Res Ctr, Moffett Field, CA 94035 USA.
C3 University of California System; University of California Riverside;
   National Aeronautics & Space Administration (NASA); NASA Ames Research
   Center
RP Zhao, Y (corresponding author), Univ Calif Riverside, Riverside, CA 92521 USA.
EM zhaoy@cs.ucr.edu; Kristin.Y.Rozier@nasa.gov
RI Rozier, Kristin Yvonne/T-6708-2019
OI Rozier, Kristin Yvonne/0000-0002-6718-2828
FU NASA's Airspace Systems Program; National Science Foundation
   [CCF-1018057]
FX Work contributing to this paper was supported in part by NASA's Airspace
   Systems Program and by the National Science Foundation under Grant
   CCF-1018057.
CR Andrews J.W., 2006, Air Traffic Control Quarterly, V14, P5
   [Anonymous], DASC
   [Anonymous], LNCS
   [Anonymous], LNAI
   [Anonymous], 2002, CAV, DOI DOI 10.1007/3-540-45657-0
   [Anonymous], 1989, C RECORD 16 ANN ACM, DOI DOI 10.1145/75277.75293
   Beer I, 2001, FORM METHOD SYST DES, V18, P141, DOI 10.1023/A:1008779610539
   Bloem R, 2007, LECT NOTES COMPUT SC, V4590, P263
   Blum D., 2010, P AIAA GUID NAV CONT, V15
   Bozzano M, 2009, LECT NOTES COMPUT SC, V5775, P173, DOI 10.1007/978-3-642-04468-7_15
   Bradley AR, 2011, LECT NOTES COMPUT SC, V6538, P70, DOI 10.1007/978-3-642-18275-4_7
   BURCH JR, 1992, INFORM COMPUT, V98, P142, DOI 10.1016/0890-5401(92)90017-A
   Bushnell D, 2009, AEROSP CONF PROC, P3166
   Cavada R., 2005, NUSMV 24 USER MANUAL
   Choi Y, 2003, 18TH IEEE INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING, PROCEEDINGS, P314
   Choi YJ, 2007, FORM METHOD SYST DES, V30, P199, DOI 10.1007/s10703-006-0027-9
   Cimatti A., 2000, Int. J. Softw. Tools for Technol. Transf. (STTT), V2, P410, DOI [DOI 10.1007/S100090050046, 10.1007/s100090050046]
   CLARKE EM, 1994, ACM T PROGR LANG SYS, V16, P1512, DOI 10.1145/186025.186051
   EMERSON EA, 1985, J COMPUT SYST SCI, V30, P1, DOI 10.1016/0022-0000(85)90001-7
   Erzberger H, 2010, P I MECH ENG G-J AER, V224, P225, DOI 10.1243/09544100JAERO546
   Erzberger H., 2010, INT C AER SCI
   Erzberger H., 2004, INT C AER SCI
   Fisman Dana, 2008, Hardware and Software: Verification and Testing. Proceedings 4th International Haifa Verification Conference, HVC 2008, P7
   Gan X, 2014, SCI COMPUT PROGRAM, V82, P44, DOI 10.1016/j.scico.2013.03.005
   Giannakopoulou D, 2011, ANN MATH ARTIF INTEL, V63, P5, DOI 10.1007/s10472-011-9224-3
   Heinz T.L. Erzberger, 2011, COMMUNICATION    MAY
   Heitmeyer C. L., 1996, ACM Transactions on Software Engineering and Methodology, V5, P231, DOI 10.1145/234426.234431
   Kähkönen K, 2009, LECT NOTES COMPUT SC, V5779, P93, DOI 10.1007/978-3-642-04694-0_7
   Kupferman O., 2003, International Journal on Software Tools for Technology Transfer, V4, P224, DOI 10.1007/s100090100062
   Kupferman O, 2000, J ACM, V47, P312, DOI 10.1145/333979.333987
   Kupferman O, 2006, LECT NOTES COMPUT SC, V4137, P37
   Kurshan R., 1998, FormalCheck User's Manual
   Kwiatkowska M., 2004, International Journal on Software Tools for Technology Transfer, V6, P128, DOI 10.1007/s10009-004-0140-2
   Lahtinen J, 2012, RELIAB ENG SYST SAFE, V105, P104, DOI 10.1016/j.ress.2012.03.021
   McMillan K., 1999, The SMV language
   McMillan K., 2013, COMMUNICATION
   McMillan K., 1999, GETTING STARTED SMV
   McMillan K. L., 1993, Symbolic model checking
   Miller SP, 2003, LECT NOTES COMPUT SC, V2805, P75
   Miller SP, 2008, LECT NOTES COMPUT SC, V5170, P6, DOI 10.1007/978-3-540-71067-7_2
   Miller StevenP., 2006, International Journal on Software Tools for Technology Transfer, V8, P303, DOI [DOI 10.1007/S10009-004-0173-6, 10.1007/s10009-004-0173-6.]
   Munoz C. A., 2004, Software Engineering Notes, V29, P175, DOI 10.1145/1013886.1007536
   Paielli RA, 2009, J GUID CONTROL DYNAM, V32, P184, DOI 10.2514/1.36449
   Pill I, 2006, DES AUT CON, P821, DOI 10.1109/DAC.2006.229231
   Reinbacher T, 2014, TACAS, V8413, P357
   Rozier Kristin Y., 2011, FM 2011: Formal Methods. Proceedings 17th International Symposium on Formal Methods, P417, DOI 10.1007/978-3-642-21437-0_31
   Rozier Kristin Y., 2010, International Journal on Software Tools for Technology Transfer, V12, P123, DOI 10.1007/s10009-010-0140-3
   Rozier KY, 2011, COMPUT SCI REV, V5, P163, DOI 10.1016/j.cosrev.2010.06.002
   Schumann J, 2013, P 2013 ANN C PROGN H
   Siminiceanu R. I., 2007, International Journal on Software Tools for Technology Transfer, V9, P63, DOI 10.1007/s10009-006-0004-z
   Tabakov D, 2012, FORM METHOD SYST DES, V41, P236, DOI 10.1007/s10703-011-0139-8
   Yoo J, 2009, IEEE SOFTWARE, V26, P42, DOI 10.1109/MS.2009.67
NR 52
TC 22
Z9 22
U1 0
U2 17
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 15
PY 2014
VL 96
SI SI
BP 337
EP 353
DI 10.1016/j.scico.2014.04.002
PN 3
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AT8KA
UT WOS:000345181100005
OA Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Simon, A
AF Simon, Axel
TI Deriving a complete type inference for Hindley-Milner and vector sizes
   using expansion
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Type inference; Completeness; Abstract interpretation; Polymorphic
   recursion; Vector size inference
ID POLYMORPHIC RECURSION
AB Type inference and program analysis both infer static properties about a program. Yet, they are constructed using very different techniques. We reconcile both approaches by deriving a type inference from a denotational semantics using abstract interpretation. We observe that completeness results in the abstract interpretation literature can be used to derive type inferences that are backward complete, implying that type annotations cannot improve the result of type inference, thus making type annotations optional. The resulting algorithm is similar to that of Milner-Mycroft, that is, it infers Hindley-Milner types while allowing for polymorphic recursion. Although undecidable, we present a practical check that reliably distinguishes typeable from untypeable programs.,Instead of type schemes, we use expansion to instantiate types. Since our expansion operator is agnostic to the abstract domain, we are able to apply it not only to types. We illustrate this by inferring the size of vector types using systems of linear equalities and present practical uses of polymorphic recursion using vector types. (C) 2014 Elsevier B.V. All rights reserved.
C1 Tech Univ Munich, Garching, Germany.
C3 Technical University of Munich
RP Simon, A (corresponding author), Tech Univ Munich, Lehrstuhl Informat 2, Garching, Germany.
EM Axel.Simon@in.tum.de
FU DFG Emmy Noether program [SI 1579/1]; Microsoft SEIF grant
FX Supported by DFG Emmy Noether program SI 1579/1 and Microsoft SEIF 2013
   grant.
CR Cousot P., 1997, POPL 97, P316
   Cousot P., 1979, 6 ACM S PRINCIPLES P, P269, DOI DOI 10.1145/567752.567778
   Damas L., 1982, C REC 9 ANN ACM S PR, P207, DOI DOI 10.1145/582153.582176
   Emms M, 1999, THEOR COMPUT SCI, V212, P157, DOI 10.1016/S0304-3975(98)00139-X
   Giacobazzi R, 2000, J ACM, V47, P361, DOI 10.1145/333979.333989
   Giacobazzi R., 2005, T COMPUT LOG, V6, P33
   Gori R., 2002, LNCS, V2294, P237
   HENGLEIN F, 1993, ACM T PROGR LANG SYS, V15, P253, DOI 10.1145/169701.169692
   KARR M, 1976, ACTA INFORM, V6, P133, DOI 10.1007/BF00268497
   Lassez J.-L., 1986, LECT NOTES COMPUTER, V306, P67
   Lenglet S, 2012, LECT NOTES COMPUT SC, V7211, P456, DOI 10.1007/978-3-642-28869-2_23
   MILNER R, 1978, J COMPUT SYST SCI, V17, P348, DOI 10.1016/0022-0000(78)90014-4
   MYCROFT A, 1984, LECT NOTES COMPUT SC, V167, P217
   Schmidt DA, 2006, LECT NOTES COMPUT SC, V4279, P183
   Sepp A., 2012, ENTCS
   Siegel H., 2011, ENTCS
   Simon A., 2013, PARTIAL EVALUATION P
   Tofte M., 1988, THESIS U EDINBURGH U
   Trevor Jim, 1996, P EUR INT C DET AB L, P42
   Venet A., 1996, Static Analysis. Third International Symposium, SAS'96 Proceedings, P366
   Wells JB, 2002, LECT NOTES COMPUT SC, V2380, P913
NR 21
TC 1
Z9 1
U1 0
U2 1
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 1
PY 2014
VL 95
BP 254
EP 271
DI 10.1016/j.scico.2014.03.005
PN 2
PG 18
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AS9RG
UT WOS:000344578700006
OA Bronze
DA 2024-07-18
ER

PT J
AU Aminof, B
   Mogavero, F
   Murano, A
AF Aminof, Benjamin
   Mogavero, Fabio
   Murano, Aniello
TI Synthesis of hierarchical systems
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Hierarchical systems; mu-Calculus; Temporal logics; Parity games;
   Synthesis
ID PUSHDOWN MODULE CHECKING; IMPROVED MODEL CHECKING; TEMPORAL LOGIC;
   AUTOMATA; CALCULUS
AB In automated synthesis, given a specification, we automatically create a system that is guaranteed to satisfy the specification. In the classical temporal synthesis algorithms, one usually creates a "flat" system "from scratch". However, real-life software and hardware systems are usually created using preexisting libraries of reusable components, and are not "flat" since repeated sub-systems are described only once.
   In this work we describe an algorithm for the synthesis of a hierarchical system from a library of hierarchical components, which follows the "bottom-up" approach to system design. Our algorithm works by synthesizing in many rounds, when at each round the system designer provides the specification of the currently desired module, which is then automatically synthesized using the initial library and the previously constructed modules. To ensure that the synthesized module actually takes advantage of the available high-level modules, we guide the algorithm by enforcing certain modularity criteria.
   We show that the synthesis of a hierarchical system from a library of hierarchical components is EXPTIME-complete for mu-calculus, and 2EXPTIME-complete for LTL, both in the cases of complete and incomplete information. Thus, in all cases, it is not harder than the classical synthesis problem (of synthesizing flat systems "from scratch"), even though the synthesized hierarchical system may be exponentially smaller than a flat one. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Aminof, Benjamin] Hebrew Univ Jerusalem, IL-91904 Jerusalem, Israel.
   [Mogavero, Fabio; Murano, Aniello] Univ Naples Federico II, I-80126 Naples, Italy.
C3 Hebrew University of Jerusalem; University of Naples Federico II
RP Mogavero, F (corresponding author), Univ Naples Federico II, I-80126 Naples, Italy.
EM fm@fabiomogavero.com
RI Murano, Aniello/I-3038-2012; Mogavero, Fabio/C-5018-2015
OI Murano, Aniello/0000-0003-4876-3448; Mogavero, Fabio/0000-0002-5140-5783
CR Alonso G., 2004, DAT SYS APP, DOI 10.1007/978-3-662-10876-5_5
   Alur R, 2006, ACM SIGPLAN NOTICES, V41, P153, DOI 10.1145/1111320.1111051
   Alur R, 2005, ACM T PROGR LANG SYS, V27, P786, DOI 10.1145/1075382.1075387
   Alur R, 2001, ACM T PROGR LANG SYS, V23, P273, DOI 10.1145/503502.503503
   Alur R, 2008, LOG METH COMPUT SCI, V4, DOI 10.2168/LMCS-4(4:11)2008
   Alurl R, 2005, LECT NOTES COMPUT SC, V3440, P61
   Aminof B, 2008, INT FED INFO PROC, V273, P333
   Aminof B, 2007, LECT NOTES COMPUT SC, V4703, P460
   Aminof B, 2013, INFORM COMPUT, V223, P1, DOI 10.1016/j.ic.2012.11.005
   Aminof B, 2012, INFORM COMPUT, V210, P68, DOI 10.1016/j.ic.2011.10.008
   Aminof B, 2010, LECT NOTES COMPUT SC, V5944, P61, DOI 10.1007/978-3-642-11319-2_8
   [Anonymous], 1995, MFCS 1995, DOI DOI 10.1007/3-540-60246-1_160
   [Anonymous], HDB MODAL LOGIC
   [Anonymous], 2000, Advances in Temporal Logic, DOI [10.1007/978-94-015-9586-5 6 [p. 11, DOI 10.1007/978-94-015-9586-56[P.11]
   [Anonymous], HDB THEORETICAL COMP
   [Anonymous], 1992, Ph.D. thesis
   [Anonymous], LNCS
   [Anonymous], 1963, P INT C MATH
   Bliudze Simon, 2011, Software Composition. Proceedings of the 10th International Conference, SC 2011, P51, DOI 10.1007/978-3-642-22045-6_4
   Bliudze S, 2008, LECT NOTES COMPUT SC, V5201, P508, DOI 10.1007/978-3-540-85361-9_39
   BOHY A, 2012, LNCS, V7312, P652
   Bonatti PA, 2008, LOG METH COMPUT SCI, V4, DOI 10.2168/LMCS-4(3:11)2008
   Bozzelli L, 2010, FORM METHOD SYST DES, V36, P65, DOI 10.1007/s10703-010-0093-x
   Calvanese D., 2008, IEEE Data Eng. Bull, V31, P18
   de Alfaro L, 2005, NATO SCI SER II-MATH, V195, P83
   De Giacomo G, 2013, ARTIF INTELL, V196, P106, DOI 10.1016/j.artint.2012.12.001
   De Giacomo G, 2007, 20TH INTERNATIONAL JOINT CONFERENCE ON ARTIFICIAL INTELLIGENCE, P1866
   Ehlers R, 2011, LECT NOTES COMPUT SC, V6605, P272, DOI 10.1007/978-3-642-19835-9_25
   Eisner C, 2003, LECT NOTES COMPUT SC, V2725, P27
   EMERSON EA, 1982, SCI COMPUT PROGRAM, V2, P241, DOI 10.1016/0167-6423(83)90017-5
   EMERSON EA, 1991, PROCEEDINGS - 32ND ANNUAL SYMPOSIUM ON FOUNDATIONS OF COMPUTER SCIENCE, P368, DOI 10.1109/SFCS.1991.185392
   Göller S, 2005, LECT NOTES COMPUT SC, V3821, P483, DOI 10.1007/11590156_39
   Guelev DP, 2006, ELECTRON NOTES THEOR, V145, P79, DOI 10.1016/j.entcs.2005.10.006
   HAREL D, 1985, NATO ASI SERIES F, V13, P477
   KOZEN D, 1983, THEOR COMPUT SCI, V27, P333, DOI 10.1016/0304-3975(82)90125-6
   Kupferman O, 2001, INFORM COMPUT, V164, P322, DOI 10.1006/inco.2000.2893
   Kupferman O, 2000, J ACM, V47, P312, DOI 10.1145/333979.333987
   Kupferman O, 2000, Lecture notes in computer science, V1893, P497, DOI [10.1007/3-540-44612-5_45, DOI 10.1007/3-540-44612-5_45]
   Lanotte R, 2004, LECT NOTES COMPUT SC, V3153, P525
   Lustig Y, 2009, LECT NOTES COMPUT SC, V5504, P395
   Lustigt Y, 2011, ELECTRON P THEOR COM, P1, DOI 10.4204/EPTCS.54.1
   Manna Z., 1980, ACM Transactions on Programming Languages and Systems, V2, P90, DOI 10.1145/357084.357090
   MULLER DE, 1987, THEOR COMPUT SCI, V54, P267, DOI 10.1016/0304-3975(87)90133-2
   Muller P., 2002, Modular specification and verification of object-oriented programs
   Piterman N, 2006, LECT NOTES COMPUT SC, V3855, P364
   Pixley C, 2001, IEEE DES TEST COMPUT, V18, P4, DOI 10.1109/MDT.2001.936243
   PNUELI A, 1989, CONFERENCE RECORD OF THE SIXTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P179, DOI 10.1145/75277.75293
   Pnueli Amir, 1977, FOCS, P46, DOI DOI 10.1109/SFCS.1977.32
   Rabin M.O., 1970, Stud. Logic Found. Math., V59, P1, DOI 10.1016/S0049-237X(08)71929
   Sifakis J, 2005, SEFM 2005: THIRD IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING AND FORMAL METHODS, PROCEEDINGS, P293
   SOHAIL S, 2012, INT J SOFTW TOOLS TE, P1
   Sohail S, 2008, LECT NOTES COMPUT SC, V4905, P309, DOI 10.1007/978-3-540-78163-9_26
   STREETT RS, 1989, INFORM COMPUT, V81, P249, DOI 10.1016/0890-5401(89)90031-X
   Wilke T., 2001, B SOC MATH BELG, V8
NR 54
TC 13
Z9 13
U1 0
U2 6
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD APR 1
PY 2014
VL 83
SI SI
BP 56
EP 79
DI 10.1016/j.scico.2013.07.001
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AE4IK
UT WOS:000333945900004
OA Green Submitted, hybrid
DA 2024-07-18
ER

PT J
AU Hoang, TS
AF Thai Son Hoang
TI Reasoning about almost-certain convergence properties using Event-B
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Event-B; Formal modelling; Probabilistic termination; Almost-certain
   convergence; Tool support
AB We propose an approach for proving that a system guarantees to establish a given property eventually with probability one. Using Event-B as our modelling language, our correctness reasoning is a combination of termination proofs (in terms of probabilistic convergence), deadlock-freedom and invariant techniques. We illustrate the approach by formalising some non-trivial algorithms, including the duelling cowboys, Herman's probabilistic self-stabilisation and Rabin's choice coordination. We extend the supporting Rodin Platform (Rodin) of Event-B to generate appropriate proof obligations for our reasoning, then subsequently (automatically/interactively) discharge the obligations using the built-in provers of Rodin. (C) 2013 Elsevier B.V. All rights reserved.
C1 Swiss Fed Inst Technol, Inst Informat Secur, Zurich, Switzerland.
C3 Swiss Federal Institutes of Technology Domain; ETH Zurich
RP Hoang, TS (corresponding author), Swiss Fed Inst Technol, Inst Informat Secur, Zurich, Switzerland.
EM htson@inf.ethz.ch
RI Hoang, Thai Son/H-6159-2019
OI Hoang, Thai Son/0000-0003-4095-0732
FU European Commission ICT [214158 DEPLOY]
FX Part of this work is supported by the European Commission ICT project
   214158 DEPLOY (http://www.deploy-project.eu/index.html). Special thanks
   are due to E. Yilmaz for the work in his master thesis which inspired
   our work here. We thank M. Schmalz, S. Hallerstede, and A. Furst for
   their critical comments on various drafts of this paper. We thank the
   anonymous reviewers of the AVoCS 2010 workshop (Dusseldorf, Germany) for
   their valuable comments for improving our paper. Finally, we would like
   to thank Systerel and in particular T. Muller for the current
   implementation of the plug-in based on the initial work in [18].
CR Abrial J.-R., 2003, Formal Aspects of Computing, V14, P215, DOI 10.1007/s001650300002
   Abrial Jean-Raymond, 2010, International Journal on Software Tools for Technology Transfer, V12, P447, DOI 10.1007/s10009-010-0145-y
   Abrial J.-R., 1996, B BOOK ASSIGNING PRO
   Abrial J R, 2010, Modeling in Event-B: system and softeng
   [Anonymous], 9 ACM SIGPLAN SIGACT
   [Anonymous], THESIS U NEW S WALES
   BACK RJR, 1990, LECT NOTES COMPUT SC, V430, P67
   Brams SJ., 1997, Mathematics Magazine, V70, P315, DOI [10.1080/0025570X.1997.11996570, 10.2307/2691167, DOI 10.1080/0025570X.1997.11996570]
   Chandy K.M., 1989, Parallel program design
   Hallerstede S, 2007, LECT NOTES COMPUT SC, V4591, P293
   HERMAN T, 1990, INFORM PROCESS LETT, V35, P63, DOI 10.1016/0020-0190(90)90107-9
   Hoang T.S., 2012, 768 ETH ZUR DEP COMP
   Hoang TS, 2009, SCI COMPUT PROGRAM, V74, P879, DOI 10.1016/j.scico.2009.07.006
   IEEE, 2000, 1394A2000 IEEE, V1
   LAMPORT L, 1994, ACM T PROGR LANG SYS, V16, P872, DOI 10.1145/177492.177726
   McIver A, 2003, LECT NOTES COMPUT SC, V2651, P216
   McIver Annabelle., 2005, MG COMP SCI
   Motwani Rajeev, 1995, RANDOMIZED ALGORITHM
   Pnueli Amir, 1983, P 15 ANN ACM S THEOR, P278, DOI [10.1145/800061.808757, DOI 10.1145/800061.808757]
   RABIN MO, 1982, ACTA INFORM, V17, P121, DOI 10.1007/BF00288965
   RABIN MO, 1980, J NUMBER THEORY, V12, P128, DOI 10.1016/0022-314X(80)90084-0
   RAO JR, 1994, ACM T PROGR LANG SYS, V16, P798, DOI 10.1145/177492.177724
   Hoang TS, 2011, LECT NOTES COMPUT SC, V6991, P456, DOI 10.1007/978-3-642-24559-6_31
   Yilmaz E., 2010, ELECT COMMUNICATION, V35
   Yilmaz E., 2010, THESIS ETH ZURICH
   Zuck L., 2002, Verification, Model Checking, and Abstract Interpretation. Third International Workshop, VMCAI 2002. Revised Papers (Lecture Notes in Computer Science Vol.2294), P208
NR 26
TC 2
Z9 2
U1 0
U2 3
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 15
PY 2014
VL 81
SI SI
BP 108
EP 121
DI 10.1016/j.scico.2013.08.006
PG 14
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AB0JS
UT WOS:000331478600005
DA 2024-07-18
ER

PT J
AU Alpuente, M
   Ballis, D
   Frechina, F
   Romero, D
AF Alpuente, Maria
   Ballis, Demis
   Frechina, Francisco
   Romero, Daniel
TI Using conditional trace slicing for improving Maude programs
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Trace slicing; Program debugging and comprehension; Rewriting logic
ID WEB APPLICATIONS; REWRITING LOGIC; ORIGINS; MODEL
AB Understanding the behavior of software is important for the existing software to be improved. In this paper, we present a trace slicing technique that is suitable for analyzing complex, textually-large computations in rewriting logic, which is a general framework efficiently implemented in the Maude language that seamlessly unifies a wide variety of logics and models of concurrency. Given a Maude execution trace T and a slicing criterion for the trace (i.e., a piece of information that we want to observe in the final computation state), we traverse T from back to front and the backward dependence of the observed information is incrementally computed at each execution step. At the end of the traversal, a simplified trace slice is obtained by filtering out all the irrelevant data that do not impact on the data of interest. By narrowing the size of the trace, the slicing technique favors better inspection and debugging activities since most tedious and irrelevant inspections that are routinely performed during diagnosis and bug localization can be eliminated automatically. Moreover, cutting down the execution trace can expose opportunities for further improvement, which we illustrate by means of several examples that we execute by using iJULIENNE, a trace slicer that implements our conditional slicing technique and is endowed with a trace querying mechanism that increases flexibility and reduction power. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Alpuente, Maria; Frechina, Francisco; Romero, Daniel] Univ Politecn Valencia, DSIC ELP, E-46071 Valencia, Spain.
   [Ballis, Demis] Dipartimento Matemat & Informat, I-33100 Udine, Italy.
C3 Universitat Politecnica de Valencia
RP Frechina, F (corresponding author), Univ Politecn Valencia, DSIC ELP, Camino Vera S-N,Apdo 22012, E-46071 Valencia, Spain.
EM alpuente@dsic.upv.es; demis@dimi.uniud.it; ffrechina@dsic.upv.es;
   dromero@dsic.upv.es
RI ALPUENTE, MARÍA/E-1899-2012
OI ALPUENTE, MARÍA/0000-0002-9268-1178
FU EU (FEDER); Spanish MEC project [TIN2010-21062-C02-02]; Generalitat
   Valenciana [PROMETEO2011/052]; European Union [246016]; FPU-ME
   [AP2010-5681]; FPI-MEC [BES-2008-004860]
FX This work has been partially supported by the EU (FEDER) and the Spanish
   MEC project ref. TIN2010-21062-C02-02, and by Generalitat Valenciana
   ref. PROMETEO2011/052. This work was carried out during the tenure of D.
   Ballis' ERCIM "Alain Bensoussan" Postdoctoral Fellowship. The research
   leading to these results has received funding from the European Union
   Seventh Framework Programme (FP7/2007-2013) under grant agreement No.
   246016. F. Frechina was supported by FPU-ME grant AP2010-5681 and D.
   Romero by FPI-MEC grant BES-2008-004860.
CR AGRAWAL H, 1993, SOFTWARE PRACT EXPER, V23, P589, DOI 10.1002/spe.4380230603
   Alpuente Maria, 2012, FM 2012: Formal Methods. Proceedings of the 18th International Symposium, P28, DOI 10.1007/978-3-642-32759-9_5
   Alpuente M, 2011, ELECTRON PROC THEOR, P66, DOI 10.4204/EPTCS.61.5
   Alpuente M, 2013, LECT NOTES COMPUT SC, V7792, P121, DOI 10.1007/978-3-642-37036-6_7
   Alpuente M, 2012, LECT NOTES COMPUT SC, V7180, P62, DOI 10.1007/978-3-642-28717-6_8
   Alpuente M, 2011, LECT NOTES ARTIF INT, V6803, P34, DOI 10.1007/978-3-642-22438-6_5
   Alpuente M, 2010, LECT NOTES COMPUT SC, V6252, P341
   Alpuente M, 2009, LECT NOTES COMPUT SC, V5850, P790, DOI 10.1007/978-3-642-05089-3_50
   [Anonymous], 1996, LNCS
   [Anonymous], TECHNICAL REPORT
   Baggi M, 2009, LECT N BIOINFORMAT, V5688, P68, DOI 10.1007/978-3-642-03845-7_5
   Barringer H., 2010, LECT NOTES COMPUT SC, V6418
   Bethke I, 2000, INFORM COMPUT, V159, P59, DOI 10.1006/inco.2000.2876
   Bruni R, 2006, THEOR COMPUT SCI, V360, P386, DOI 10.1016/j.tcs.2006.04.012
   Chen F, 2009, LECT NOTES COMPUT SC, V5505, P246, DOI 10.1007/978-3-642-00768-2_23
   Chitil O, 2001, LECT NOTES COMPUT SC, V2011, P176
   Clavel M, 2007, All About Maude: A High-Performance Logical Framework
   Ducassé M, 1999, J LOGIC PROGRAM, V39, P177, DOI 10.1016/S0743-1066(98)10036-5
   Durán F, 2010, LECT NOTES COMPUT SC, V6381, P86, DOI 10.1007/978-3-642-16310-4_7
   Escobar S, 2009, LECT NOTES COMPUT SC, V5705, P1, DOI 10.1007/978-3-642-03829-7_1
   Farzan A, 2004, LECT NOTES COMPUT SC, V3114, P501
   Field J., 1994, Programming Language Implementation and Logic Programming. 6th International Symposium, PLILP '94. Proceedings, P415
   Francel MA, 2001, SCI COMPUT PROGRAM, V40, P151, DOI 10.1016/S0167-6423(01)00013-2
   JSlice, 2008, JSLICE DYN SLIC TOOL
   Klop J.W., 1992, HDB LOGIC COMPUTER S, VII, P1
   KOREL B, 1988, INFORM PROCESS LETT, V29, P155, DOI 10.1016/0020-0190(88)90054-3
   Liu YHA, 2003, SCI COMPUT PROGRAM, V47, P221, DOI 10.1016/S0167-6423(02)00134-X
   Martí-Oliet N, 2012, J LOGIC ALGEBR PROGR, V81, P782, DOI 10.1016/j.jlap.2012.06.001
   MESEGUER J, 1992, THEOR COMPUT SCI, V96, P73, DOI 10.1016/0304-3975(92)90182-F
   Meseguer J, 2008, LECT NOTES COMPUT SC, V5065, P354, DOI 10.1007/978-3-540-68679-8_22
   Plotkin GD, 2004, J LOGIC ALGEBR PROGR, V60-1, P3, DOI 10.1016/j.jlap.2004.03.009
   Riesco A, 2011, LECT NOTES COMPUT SC, V6486, P216, DOI 10.1007/978-3-642-17796-5_14
   Rodrigues NF, 2006, ELECTRON NOTES THEOR, V160, P291, DOI 10.1016/j.entcs.2006.05.029
   Shapiro Ehud Y., 1982, Proceedings of the 9th ACM SIGPLAN-SIGACT symposium on Principles of programming languages, P299, DOI 10.1145/582153.582185
   Talcott C, 2008, LECT NOTES COMPUT SC, V5016, P21
   TeReSe, 2003, Term Rewriting Systems
   TIP F, 1995, J PROGRAM LANG, V3, P121
   Villavicencio G, 2001, EIGHTH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P35, DOI 10.1109/WCRE.2001.957808
   Weiser M., 1981, 5th International Conference on Software Engineering, P439
NR 39
TC 14
Z9 14
U1 0
U2 5
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 1
PY 2014
VL 80
BP 385
EP 415
DI 10.1016/j.scico.2013.09.018
PN B
PG 31
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 292FH
UT WOS:000329887100008
OA Green Published
DA 2024-07-18
ER

PT J
AU Scholliers, C
   Tanter, É
   De Meuter, W
AF Scholliers, Christophe
   Tanter, Eric
   De Meuter, Wolfgang
TI Parallel actor monitors: Disentangling task-level parallelism from data
   partitioning in the actor model
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 14th Brazilian Symposium on Programming Languages (SBLP)
CY SEP 27-29, 2010
CL Salvador, BRAZIL
DE Actors; Concurrency; Monitors; Efficiency
ID CONCURRENCY; OBJECT
AB While the actor model of concurrency is well appreciated for its ease of use, its scalability is often criticized. Indeed, the fact that execution within an actor is sequential prevents certain actor systems to take advantage of multicore architectures. In order to combine scalability and ease of use, we propose Parallel Actor Monitors (PAMs), as a means to relax the sequentiality of intra-actor activity in a structured and controlled way. A PAM is a modular, reusable scheduler that permits one to introduce intra-actor parallelism in a local and abstract manner. PAM allows the stepwise refinement of local parallelism within a system on a per-actor basis, without having to deal with low-level synchronization details and locks. We present the general model of PAM and its instantiation in the AmbientTalk language. Benchmarks confirm the expected performance gain. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Scholliers, Christophe; De Meuter, Wolfgang] Vrije Univ Brussel, Software Languages Lab, Elsene, Belgium.
   [Tanter, Eric] Univ Chile, Comp Sci Dept DCC, PLEIAD Lab, Santiago, Chile.
C3 Vrije Universiteit Brussel; Universidad de Chile
RP Scholliers, C (corresponding author), Vrije Univ Brussel, Software Languages Lab, Pleinlaan 2, Elsene, Belgium.
EM cfscholl@vub.ac.be; etanter@dcc.uchile.cl; wdmeuter@vub.ac.be
RI Scholliers, Christophe/F-6280-2015; Tanter, Éric/A-7955-2008
OI Tanter, Éric/0000-0002-7359-890X; Scholliers,
   Christophe/0000-0002-2837-4763
CR Agha G., 1986, Actors: a model of concurrent computation in distributed systems
   Armstrong Joe, 1996, Concurrent Programming in Erlang
   Baduel L, 2006, GRID COMPUTING: SOFTWARE ENVIRONMENTS AND TOOLS, P205, DOI 10.1007/1-84628-339-6_9
   Benton N, 2004, ACM T PROGR LANG SYS, V26, P769, DOI 10.1145/1018203.1018205
   Boix E. Gonzalez, 2011, 26 S APPL COMP SAC T
   Bracha G, 2004, ACM SIGPLAN NOTICES, V39, P331, DOI 10.1145/1035292.1029004
   Caromel D, 2008, CONCURR COMP-PRACT E, V20, P1387, DOI 10.1002/cpe.1261
   Carreton Andoni Lombide, 2010, 2010 8th IEEE International Conference on Pervasive Computing and Communications Workshops (PERCOM Workshops), P250, DOI 10.1109/PERCOMW.2010.5470661
   Dahl O.-J., 1972, STRUCTURED PROGRAMMI
   Dedecker J, 2006, LECT NOTES COMPUT SC, V4067, P230
   Diaconescu R., 2002, THESIS U SCI TECHNOL
   DIJKSTRA EW, 1975, COMMUN ACM, V18, P453, DOI [10.1145/360933.360975, 10.1145/390016.808417]
   Fournet C., 1996, Conference Record of POPL '96: The 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P372, DOI 10.1145/237721.237805
   Frolund S., 1993, ECOOP '93 - Object-Oriented Programming. 7th European Conference Proceedings, P346
   Gosling J., 2005, Java Language Specification, Vthird
   Haller P, 2009, THEOR COMPUT SCI, V410, P202, DOI 10.1016/j.tcs.2008.09.019
   Hickey R., MESSAGE PASSING ACTO
   Imam S, 2012, ACM SIGPLAN NOTICES, V47, P753, DOI 10.1145/2398857.2384671
   Itzstein GS, 2003, LECT NOTES COMPUT SC, V2823, P151
   Johnsen EB, 2009, ELECTRON NOTES THEOR, V243, P89, DOI 10.1016/j.entcs.2009.07.007
   Karmani R.K., 2009, P 7 INT C PRINC PRAC, P11
   Miller MS, 2005, LECT NOTES COMPUT SC, V3705, P195, DOI 10.1007/11580850_12
   Mostinckx S, 2009, SOFTWARE PRACT EXPER, V39, P661, DOI 10.1002/spe.909
   Schäfer J, 2010, LECT NOTES COMPUT SC, V6183, P275, DOI 10.1007/978-3-642-14107-2_13
   Srinivasan S, 2008, LECT NOTES COMPUT SC, V5142, P104, DOI 10.1007/978-3-540-70592-5_6
   Varela C, 2001, ACM SIGPLAN NOTICES, V36, P20, DOI 10.1145/583960.583964
   Yonezawa A., 1990, COMPUTER SYSTEMS SER
NR 27
TC 14
Z9 16
U1 0
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 1
PY 2014
VL 80
BP 52
EP 64
DI 10.1016/j.scico.2013.03.011
PN A
PG 13
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 292FG
UT WOS:000329887000005
OA hybrid, Green Submitted
DA 2024-07-18
ER

PT J
AU Losada, B
   Urretavizcaya, M
   Fernández-Castro, I
AF Losada, Begona
   Urretavizcaya, Maite
   Fernandez-Castro, Isabel
TI A guide to agile development of interactive software with a "User
   Objectives"-driven methodology
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE User-centred design; Agile methods; Model-driven development; Software
   engineering
AB This paper presents the InterMod methodology. By combining the widely accepted Agile Methods, Model-Driven Developments and User-Centred Design it allows us to develop high-quality interactive applications. As a main characteristic, it plans and organises the software project as a series of iterations that are guided by the User Objectives in an agile and user-centred manner. At each iteration, the software development work can be distributed to different teams according to some developmental and integration activities. Each activity is driven by models that are validated by a multidisciplinary team composed of developers and users. The requirements are incrementally collected and formalised by means of models based on user-centred design. Besides, the Semantically Enriched Human Computer Interaction model is proposed to speed up project validation. This model enriches a human computer interaction model with some visual characteristics and the application semantic. Thus, the enriched model provides enough information to generate prototypes so users and developers can easily validate this model. Diagram project is a real case study that is used to illustrate the application of the InterMod methodology through the whole paper. (C) 2012 Elsevier B.V. All rights reserved.
C1 [Losada, Begona; Urretavizcaya, Maite; Fernandez-Castro, Isabel] Univ Basque Country, Fac Comp Engn, Dept Comp Languages & Syst, San Sebastian 20001, Spain.
C3 University of Basque Country
RP Losada, B (corresponding author), Univ Basque Country, Fac Comp Engn, Dept Comp Languages & Syst, San Sebastian 20001, Spain.
EM b.losada@ehu.es; maite.urretavizcaya@ehu.es; isabel.fernandez@ehu.es
OI LOSADA PEREDA, MARIA BEGONA/0000-0001-8248-6494
FU DFG [157/2009];  [TIN2009-14380]
FX This work has been partially supported by TIN2009-14380 and DFG
   157/2009.
CR Abrams M., 2008, UIML SPECIFICATION V
   Ambler S., DEBUNKING MODELING M
   Ambler S., 2012, EXAMINING BIG REQUIR
   Ambler Scott W., 2004, The Object Primer: Agile Model-Driven Development with UML
   Annett J., 1967, OCCUP PSYCHOL, V41, P211
   [Anonymous], 2002, Agile software development
   [Anonymous], 2007, FACE 3 0 ESSENTIALS
   [Anonymous], 2001, USER CTR DESIGN INTE
   [Anonymous], 1994, Human-Computer Interaction
   [Anonymous], 1998, ISO 9241-11
   [Anonymous], 2004, Agile and Iterative Development
   Beck K., 2000, EXTREME PROGRAMMING
   Bevan N, 1999, J SYST SOFTWARE, V49, P89, DOI 10.1016/S0164-1212(99)00070-9
   Constantine L.L., 1999, Software for Use: A Practical Guide to the Models and Methods of Usage-Centered Design
   Evans E., 2011, DOMAIN DRIVEN DESIGN
   Ferreira J., 2007, INTERACTION DESIGN A
   Fowler M., 2001, Software Development, V9, P28
   Highsmith J, 2001, COMPUTER, V34, P120, DOI 10.1109/2.947100
   Jacobson Ivar., 1999, AW OBJ TECHNOL S
   Lamsweerde A., 2004, 12 IEEE INT REQ ENG
   Limbourg Q, 2005, LECT NOTES COMPUT SC, V3425, P200
   Losada B, 2009, NEW TRENDS ON HUMAN-COMPUTER INTERACTION: RESEARCH, DEVELOPMENT, NEW TOOLS AND METHODS, P53, DOI 10.1007/978-1-84882-352-5_6
   Mayhew D.J., 1999, USABILITY ENG LIFECY, P123
   McBreen P., 2003, QUESTIONING EXTREME
   Nolan B., 2007, MODEL DRIVEN SYSTEMS
   Norman D.A., 2006, INTERACTIONS, V13, P50, DOI DOI 10.1145/1142169.1142199
   Norman D.A., 1986, USER CTR SYSTEM DESI, DOI 10.1201/b15703
   Norman D.A., 1998, INVISIBLE COMPUTER
   Object Management Group, 2003, TECHNICAL REPORT
   Palmer S.R., 2002, PRACTICAL GUIDE FEAT
   Patern'o F., 1999, Model-based design and evaluation of interactive applications
   Propp S, 2009, ADV ENG SOFTW, V40, P1223, DOI 10.1016/j.advengsoft.2009.01.025
   Puerta A., 1997, IEEE SOFTWARE, V14
   Robey D., 2001, Information Technology & Management, V2, P53, DOI 10.1023/A:1009982704160
   Luna ER, 2009, LECT NOTES COMPUT SC, V5648, P136, DOI 10.1007/978-3-642-02818-2_10
   Schwaber K., 2002, AGILE SOFTWARE DEV S
   Snyder C., 2003, Paper Prototyping: The Fast and Easy Way to Design and Refne User Interfaces, VIllustrated
   United Nations Educational Scientific and Cultural Organization (UNESCO), 2018, INT TECHN GUID SEX E
   Wiegers K.E., 2003, SOFTWARE REQUIREMENT, P234
NR 39
TC 28
Z9 31
U1 0
U2 46
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 1
PY 2013
VL 78
IS 11
BP 2268
EP 2281
DI 10.1016/j.scico.2012.07.022
PG 14
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 220QR
UT WOS:000324602500013
OA hybrid
DA 2024-07-18
ER

PT J
AU Halder, R
   Cortesi, A
AF Halder, Raju
   Cortesi, Agostino
TI Abstract program slicing on dependence condition graphs
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Program slicing; Dependence graph; Abstract interpretation
ID SINGLE ASSIGNMENT FORM; SEMANTICS; FLOW
AB Context: Mastroeni and Zanardini introduced the notion of semantics-based data dependences, both at concrete and abstract domains, that helps in converting the traditional syntactic Program Dependence Graphs (PDGs) into more refined semantics-based (abstract) PDGs by disregarding some false dependences from them. As a result, the slicing techniques based on these semantics-based (abstract) PDGs result in more precise slices. Aim: The aim of this paper is to further refine the slicing algorithms when focusing on a given property. Method: The improvement is obtained by (i) applying the notions of semantic relevancy of statements and semantic data dependences, and (ii) combining them with conditional dependences. Result: We provide an abstract slicing algorithm based on semantics-based abstract Dependence Condition Graphs (DCGs) that enable us to identify the conditions for dependences between program points. (C) 2012 Elsevier B.V. All rights reserved.
C1 [Halder, Raju; Cortesi, Agostino] Univ Ca Foscari Venezia, Venice, Italy.
C3 Universita Ca Foscari Venezia
RP Cortesi, A (corresponding author), Univ Ca Foscari Venezia, Venice, Italy.
EM halder@unive.it; cortesi@unive.it
RI Cortesi, Agostino/F-9637-2011; Cortesi, Agostino/AAQ-2996-2020
OI Cortesi, Agostino/0000-0002-0946-5440; Halder, Raju/0000-0002-8873-8258
FU TESLA [RAS L.R. 7/2007]
FX This work is partially supported by RAS L.R. 7/2007 Project TESLA. We
   thank the anonymous reviewers for their useful comments and remarks.
CR AGRAWAL H, 1990, SIGPLAN NOTICES, V25, P246, DOI 10.1145/93548.93576
   Barraclough RW, 2010, THEOR COMPUT SCI, V411, P1372, DOI 10.1016/j.tcs.2009.10.025
   BERGERETTI JF, 1985, ACM T PROGR LANG SYS, V7, P37, DOI 10.1145/2363.2366
   Bhattacharya S., 2011, THESIS U CAFOSCARI V
   Binkley D, 2006, SCI COMPUT PROGRAM, V62, P228, DOI 10.1016/j.scico.2006.04.007
   CANFORA G, 1994, INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE, PROCEEDINGS, P424, DOI 10.1109/ICSM.1994.336752
   CARTWRIGHT R, 1989, SIGPLAN NOTICES, V24, P13, DOI 10.1145/74818.74820
   Cortesi A, 2011, COMPUT LANG SYST STR, V37, P24, DOI 10.1016/j.cl.2010.09.001
   Cortesi Agostino, 2010, P 10 INT WORKSH LANG
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   CYTRON R, 1991, ACM T PROGR LANG SYS, V13, P451, DOI 10.1145/115372.115320
   Danicic S, 2007, J LOGIC ALGEBR PROGR, V72, P191, DOI 10.1016/j.jlap.2007.02.010
   DeLucia A, 1996, FOURTH WORKSHOP ON PROGRAM COMPREHENSION, PROCEEDINGS, P9, DOI 10.1109/WPC.1996.501116
   FERRANTE J, 1987, ACM T PROGR LANG SYS, V9, P319, DOI 10.1145/24039.24041
   Giacobazzi R., 2003, Higher-Order and Symbolic Computation, V16, P297, DOI 10.1023/A:1025872819613
   Giacobazzi R, 2000, J ACM, V47, P361, DOI 10.1145/333979.333989
   Halder Raju, 2011, TECHNICAL REPORT
   HALL RJ, 1995, J AUTOMATED SOFTWARE, V2, P33
   Harman M, 2003, J SYST SOFTWARE, V68, P45, DOI 10.1016/S0164-1212(02)00135-8
   Harrold Mary Jean, 1998, P 20 INT C SOFTW ENG
   Hasti R, 1998, ACM SIGPLAN NOTICES, V33, P97, DOI 10.1145/277652.277668
   Hong HS, 2005, FIFTH IEEE INTERNATIONAL WORKSHOP ON SOURCE CODE ANALYSIS AND MANIPULATION, PROCEEDINGS, P25
   HORWITZ S, 1990, ACM T PROGR LANG SYS, V12, P26, DOI [10.1145/77606.77608, 10.1145/960116.53994]
   Horwitz S., 1988, Conference Record of the Fifteenth Annual ACM Symposium on Principles of Programming Languages, P146, DOI 10.1145/73560.73573
   KOREL B, 1988, INFORM PROCESS LETT, V29, P155, DOI 10.1016/0020-0190(88)90054-3
   Kuck R. H., 1981, Proceedings of the 8th ACM SIGPLAN-SIGACT symposium on Principles of programming languages, P207
   Liang DL, 2002, ACM T SOFTW ENG METH, V11, P347, DOI 10.1145/567793.567796
   Mastroeni I, 2010, LECT NOTES COMPUT SC, V6447, P452, DOI 10.1007/978-3-642-16901-4_30
   Mastroeni I, 2008, PEPM'08: PROCEEDINGS OF THE 2008 ACM SIGPLAN SYMPOSIUM ON PARTIAL EVALUATION AND SEMANTICS-BASED PROGRAM MANIPULATION, P125, DOI 10.1145/1328408.1328428
   Mund GB, 2006, J SYST SOFTWARE, V79, P791, DOI 10.1016/j.jss.2005.07.024
   Nestra H., 2005, Proceedings of the Estonian Academy of Sciences (Engineering), V11, P313
   OTTENSTEIN KJ, 1984, SIGPLAN NOTICES, V19, P177, DOI 10.1145/390011.808263
   Reps T., 1995, SIGSOFT SOFTW ENG NO, P41, DOI [10.1145/222124.222138, DOI 10.1145/222124.222138]
   Rival X, 2005, LECT NOTES COMPUT SC, V3780, P347
   SARKAR V, 1991, IBM J RES DEV, V35, P779, DOI 10.1147/rd.355.0779
   Sinha S., 1999, Proceedings of the 1999 International Conference on Software Engineering (IEEE Cat. No.99CB37002), P432, DOI 10.1109/ICSE.1999.841033
   Sukumaran S, 2010, COMPUT LANG SYST STR, V36, P96, DOI 10.1016/j.cl.2009.04.001
   VENKATESH GA, 1991, SIGPLAN NOTICES, V26, P107, DOI 10.1145/113446.113455
   WEISER M, 1984, IEEE T SOFTWARE ENG, V10, P352, DOI 10.1109/TSE.1984.5010248
   Weiser MD., 1979, PROGRAM SLICES FORMA
   Winskel G., 1993, The Formal Semantics of Programming Languages
   Zanardini D, 2008, EIGHTH IEEE INTERNATIONAL WORKING CONFERENCE ON SOURCE CODE ANALYSIS AND MANIPULATION, PROCEEDINGS, P89, DOI 10.1109/SCAM.2008.19
NR 42
TC 4
Z9 6
U1 0
U2 7
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 1
PY 2013
VL 78
IS 9
BP 1240
EP 1263
DI 10.1016/j.scico.2012.05.007
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 179QJ
UT WOS:000321536100004
OA hybrid
DA 2024-07-18
ER

PT J
AU Lievens, D
   Harrison, W
AF Lievens, David
   Harrison, William
TI Abstraction over implementation structure with symmetrically
   encapsulated multimethods
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Object-orientation; Encapsulated multimethods; Modular type-checking
ID MULTIJAVA
AB In object-oriented languages, methods are encapsulated, hence module interfaces are made up of sets of methods partitioned along the objects or classes that make up the module. This prevents abstraction over the implementation structure of applications. Any change in method placement may cause a global effect that ripples through all clients depending on that method. Sometimes this unduly restricts the scope of software evolution, particularly for methods with multiple parameters where there is no clear owner. We investigate a simple scheme where methods may be defined in the classes of any of their parameters. This allows client code to be oblivious to choice of method placement, and therefore immune against it changing. When combined with multiple dispatch, this scheme allows for modular extensibility, where methods defined in one class may be overloaded by methods defined in classes that are not its subclasses. We detail our proposal by extending a core calculus of class-based object-oriented languages with these symmetrically encapsulated multimethods, and prove the result sound. It is well-known that multiple dispatch is at odds with modular type-checking. We also discuss different strategies that can be followed to mitigate the type-checking problem and propose variants of the original calculus that are amenable to modular checking. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Lievens, David; Harrison, William] Trinity Coll Dublin, Sch Comp Sci & Stat, Software Struct Grp, Dublin 2, Ireland.
C3 Trinity College Dublin
RP Lievens, D (corresponding author), Trinity Coll Dublin, Sch Comp Sci & Stat, Software Struct Grp, Dublin 2, Ireland.
EM david.lievens@cs.tcd.ie
FU Science Foundation Ireland
FX This work has been supported by a grant from Science Foundation Ireland.
CR Allen Chase, 2008, FORTRESS LANGUAGE SP
   Allen E, 2007, APPLIED COMPUTING 2007, VOL 1 AND 2, P1117, DOI 10.1145/1244002.1244245
   Bettini L, 2009, SCI COMPUT PROGRAM, V74, P261, DOI 10.1016/j.scico.2009.01.007
   Bobrow D.G., 1988, ACM SIGPLAN NOTICES, V23, P1
   Boyland J, 1997, ACM SIGPLAN NOTICES, V32, P66, DOI 10.1145/263700.263721
   CASTAGNA G, 1995, ACM T PROGR LANG SYS, V17, P431, DOI 10.1145/203095.203096
   Castagna Giuseppe., 1997, Progress in Theoretical Computer Science
   CHAMBERS C, 1992, LECT NOTES COMPUT SC, V615, P33, DOI 10.1007/BFb0053029
   Chambers Craig., 2006, The Diesel Language, specification and rationale
   Clifton C, 2006, ACM T PROGR LANG SYS, V28, P517, DOI 10.1145/1133651.1133655
   Ernst E., 2001, LNCS, V2072, P303
   HARRISON W, 1993, SIGPLAN NOTICES, V28, P411, DOI 10.1145/167962.165932
   Harrison W., 2009, CONTINUUM LANGUAGE S
   Hejlsberg A., 2008, The C# Programming Language
   Igarashi A, 2001, ACM T PROGR LANG SYS, V23, P396, DOI 10.1145/503502.503505
   Lievens D., ARXIV11103470
   Lievens D, 2009, PROC INT CONF SOFTW, P243, DOI 10.1109/ICSE-COMPANION.2009.5070992
   LISKOV B, 1988, SIGPLAN NOTICES, V23, P17, DOI 10.1145/62139.62141
   Malayeri D, 2008, LECT NOTES COMPUT SC, V5142, P260, DOI 10.1007/978-3-540-70592-5_12
   Millstein T, 2003, ACM SIGPLAN NOTICES, V38, P224, DOI 10.1145/949343.949325
   Millstein T, 2002, ACM SIGPLAN NOTICES, V37, P110, DOI 10.1145/583852.581489
   Millstein T, 2002, INFORM COMPUT, V175, P76, DOI 10.1006/inco.2002.3103
   Millstein T, 2009, ACM T PROGR LANG SYS, V31, DOI 10.1145/1462166.1462168
   PARNAS DL, 1972, COMMUN ACM, V15, P1053, DOI 10.1145/361598.361623
   Pirkelbauer Peter., 2007, Proc. 6th Int. Conf. on Generative Programming and Component Engineering (GPCE), P123
   Simeoni F, 2009, ACP4IS'09: 8TH WORKSHOP ON ASPECTS, COMPONENTS AND PATTERNS FOR INFRASTRUCTURE SOFTWARE, P13
NR 26
TC 0
Z9 0
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUL 1
PY 2013
VL 78
IS 7
BP 953
EP 968
DI 10.1016/j.scico.2012.12.007
PG 16
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 164PJ
UT WOS:000320421700012
OA Bronze
DA 2024-07-18
ER

PT J
AU Taboada, GL
   Ramos, S
   Expósito, RR
   Touriño, J
   Doallo, R
AF Taboada, Guillermo L.
   Ramos, Sabela
   Exposito, Roberto R.
   Tourino, Juan
   Doallo, Ramon
TI Java in the High Performance Computing arena: Research, practice and
   experience
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Java; High Performance Computing; Performance evaluation; Multi-core
   architectures; Message-passing; Threads; Cluster; InfiniBand
ID COLLECTIVE COMMUNICATION; OPENMP; MPJ; IMPLEMENTATION; INTERFACE; CODE;
   RMI
AB The rising interest in Java for High Performance Computing (HPC) is based on the appealing features of this language for programming multi-core cluster architectures, particularly the built-in networking and multithreading support, and the continuous increase in Java Virtual Machine (JVM) performance. However, its adoption in this area is being delayed by the lack of analysis of the existing programming options in Java for HPC and thorough and up-to-date evaluations of their performance, as well as the unawareness on current research projects in this field, whose solutions are needed in order to boost the embracement of Java in HPC.
   This paper analyzes the current state of Java for HPC, both for shared and distributed memory programming, presents related research projects, and finally, evaluates the performance of current Java HPC solutions and research developments on two shared memory environments and two InfiniBand multi-core clusters. The main conclusions are that: (1) the significant interest in Java for HPC has led to the development of numerous projects, although usually quite modest, which may have prevented a higher development of Java in this field; (2) Java can achieve almost similar performance to natively compiled languages, both for sequential and parallel applications, being an alternative for HPC programming; (3) the recent advances in the efficient support of Java communications on shared memory and low-latency networks are bridging the gap between Java and natively compiled applications in HPC. Thus, the good prospects of Java in this area are attracting the attention of both industry and academia, which can take significant advantage of Java adoption in HPC. (C) 2011 Elsevier B.V. All rights reserved.
C1 [Taboada, Guillermo L.; Ramos, Sabela; Exposito, Roberto R.; Tourino, Juan; Doallo, Ramon] Univ A Coruna, Comp Architecture Grp, La Coruna, Spain.
C3 Universidade da Coruna
RP Taboada, GL (corresponding author), Univ A Coruna, Comp Architecture Grp, La Coruna, Spain.
EM taboada@udc.es; sramos@udc.es; rreye@udc.es; juan@udc.es; doallo@udc.es
RI Taboada, Guillermo L./F-8340-2016; Tourino, Juan/O-2878-2015; Expósito,
   Roberto R./N-5119-2015; Ramos Garea, Sabela/H-1053-2014
OI Taboada, Guillermo L./0000-0002-6281-6641; Tourino,
   Juan/0000-0001-9670-1933; Expósito, Roberto R./0000-0002-2077-1473;
   Doallo, Ramon/0000-0002-6011-3387; Ramos Garea,
   Sabela/0000-0001-6656-9732
FU Ministry of Science and Innovation of Spain [TIN2010-16735]; FPU
   [AP2009-2112]
FX This work was funded by the Ministry of Science and Innovation of Spain
   under Project TIN2010-16735 and an FPU grant AP2009-2112. We gratefully
   thank CESGA (Galicia Supercomputing Center, Santiago de Compostela,
   Spain) for providing access to the Finis Terrae supercomputer.
CR Amedro B., 2009, INT J COMPUT COMMUN, V3, P49
   [Anonymous], P 8 INT C PRINC PRAC, DOI DOI 10.1145/1852761.1852769
   [Anonymous], 2011, FIN TERR SUP
   Arndt H, 2009, P INT COMP SOFTW APP, P460, DOI 10.1109/COMPSAC.2009.67
   Baduel L, 2005, 2005 IEEE International Symposium on Cluster Computing and the Grid, Vols 1 and 2, P824
   Baitsch M, 2010, ADV ENG SOFTW, V41, P75, DOI 10.1016/j.advengsoft.2008.12.013
   Baker M., 1999, Parallel and Distributed Processing. 11th IPPS/SPDP'99 Workshops Held in Conjunction with the 13th International Parallel Processing Symposium and 10th Symposium on Parallel and Distributed Processing. Proceedings, P748
   Baker M, 2006, LECT NOTES COMPUT SC, V4192, P358
   Bang SJ, 2007, SERA 2007: 5TH ACIS INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING RESEARCH, MANAGEMENT, AND APPLICATIONS, PROCEEDINGS, P153, DOI 10.1109/SERA.2007.60
   Barchet-Estefanel LA, 2004, LECT NOTES COMPUT SC, V3241, P28
   Boisvert RF, 1998, CONCURRENCY-PRACT EX, V10, P1117, DOI 10.1002/(SICI)1096-9128(199809/11)10:11/13<1117::AID-CPE386>3.0.CO;2-I
   Bornemann M, 2005, LECT NOTES COMPUT SC, V3666, P217
   Bull JM, 2000, CONCURRENCY-PRACT EX, V12, P375, DOI 10.1002/1096-9128(200005)12:6<375::AID-CPE480>3.0.CO;2-M
   Carpenter B, 2000, CONCURRENCY-PRACT EX, V12, P1019, DOI 10.1002/1096-9128(200009)12:11<1019::AID-CPE518>3.0.CO;2-G
   Carpenter B, MPIJAVA 1 2 API SPEC
   Chan E, 2007, CONCURR COMP-PRACT E, V19, P1749, DOI 10.1002/cpe.1206
   Charles P, 2005, ACM SIGPLAN NOTICES, V40, P519, DOI 10.1145/1103845.1094852
   Datta K., 2005, INT WORKSHOP LANGUAG, P200
   Dongarra J., 2007, CTWATCH Q, V3, P1
   Dotzler G., 2010, IWMSE '10: Proceedings of the 3rd International Workshop on Multicore Software Engineering, P10, DOI DOI 10.1145/1808954.1808959
   Genaud Stephane, 2007, Journal of Grid Computing, V5, P109, DOI 10.1007/s10723-006-9056-2
   Georges A, 2007, ACM SIGPLAN NOTICES, V42, P57, DOI 10.1145/1297105.1297033
   Kambites ME, 2001, CONCURR COMP-PRACT E, V13, P793, DOI 10.1002/cpe.579
   Kaminsky A., 2007, P 9 INT WORKSH JAV C, p196a
   Klemm M, 2007, CONCURR COMP-PRACT E, V19, P2333, DOI 10.1002/cpe.1178
   Kurzyniec Dawid., 2003, Parallel and Distributed Processing Symposium, International, 0, P140
   Leung A, 2013, SCI COMPUT PROGRAM, V78, P458, DOI 10.1016/j.scico.2011.06.004
   Maassen J, 2001, ACM T PROGR LANG SYS, V23, P747, DOI 10.1145/506315.506317
   Mallón DA, 2009, LECT NOTES COMPUT SC, V5759, P174, DOI 10.1007/978-3-642-03770-2_24
   Mallón DA, 2009, EUROMICRO WORKSHOP P, P181, DOI [10.1109/PDP.2009.59, 10.1109/.58]
   Moreira JE, 2000, IBM SYST J, V39, P21, DOI 10.1147/sj.391.0021
   Philippsen M, 2000, CONCURRENCY-PRACT EX, V12, P495, DOI 10.1002/1096-9128(200005)12:7<495::AID-CPE496>3.0.CO;2-W
   Pugh W., 2003, International Workshop on Languages and Compilers for Parallel Computing, P323
   Shafi A, 2009, CONCURR COMP-PRACT E, V21, P1882, DOI 10.1002/cpe.1416
   Shafi A, 2009, J PARALLEL DISTR COM, V69, P532, DOI 10.1016/j.jpdc.2009.02.006
   Shirako J., 2007, PROC INT WORKSHOP LA, P78
   Springel V, 2005, MON NOT R ASTRON SOC, V364, P1105, DOI 10.1111/j.1365-2966.2005.09655.x
   Taboada Guillermo L., 2007, 2007 IEEE Symposium on Computers and Communications, P233, DOI 10.1109/ISCC.2007.4381536
   Taboada GL, 2003, IEEE INTERNATIONAL CONFERENCE ON CLUSTER COMPUTING, PROCEEDINGS, P118
   Taboada GL, 2009, P 7 INT C PRINC PRAC, P30, DOI [10.1145/1596655.1596661, DOI 10.1145/1596655.1596661]
   Taboada GL, 2012, J SUPERCOMPUT, V60, P117, DOI 10.1007/s11227-009-0270-0
   Taboada GL, 2011, J SUPERCOMPUT, V55, P126, DOI 10.1007/s11227-010-0464-5
   Taboada GL, 2008, COMPUT COMMUN, V31, P4049, DOI 10.1016/j.comcom.2008.08.012
   Thakur R, 2005, INT J HIGH PERFORM C, V19, P49, DOI 10.1177/1094342005051521
   Vadhiyar SS, 2004, INT J HIGH PERFORM C, V18, P159, DOI 10.1177/1094342004041297
   van Nieuwpoort RV, 2005, CONCURR COMP-PRACT E, V17, P1079, DOI 10.1002/cpe.860
   Veldema R, 2003, CONCURR COMP-PRACT E, V15, P299, DOI 10.1002/cpe.660
   Yan YH, 2009, LECT NOTES COMPUT SC, V5704, P887
   Yelick K, 1998, CONCURRENCY-PRACT EX, V10, P825, DOI 10.1002/(SICI)1096-9128(199809/11)10:11/13<825::AID-CPE383>3.0.CO;2-H
   Zhang BY, 2006, CONCURR COMP-PRACT E, V18, P1541, DOI 10.1002/cpe.986
NR 50
TC 51
Z9 59
U1 3
U2 44
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAY 1
PY 2013
VL 78
IS 5
BP 425
EP 444
DI 10.1016/j.scico.2011.06.002
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 125MS
UT WOS:000317544500002
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Hesselink, WH
AF Hesselink, Wim H.
TI Simulation refinement for concurrency verification
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 13th Refinement Workshop
CY MAY 27, 2008
CL Turku, FINLAND
SP British Comp Soc (BCS)
DE Refinement; Simulation; Atomicity; Verification; Semantic completeness
ID REDUCTION
AB In recent years, we applied and extended the theory of Abadi and Lamport (1991) [1] on the existence of refinement mappings. The present paper presents an overview of our extensions of the theory. For most concepts we provide examples or pointers to case studies where they occurred. The paper presents the results on semantic completeness. It sketches out how the theory is related to the other formalisms in the area. It discusses the tension between semantic completeness and methodological convenience. It concludes with our experience with the theorem provers NQTHM and PVS that were used during these projects. (C) 2009 Elsevier B.V. All rights reserved.
C1 Univ Groningen, Dept Comp Sci, NL-9700 AK Groningen, Netherlands.
C3 University of Groningen
RP Hesselink, WH (corresponding author), Univ Groningen, Dept Comp Sci, POB 407, NL-9700 AK Groningen, Netherlands.
EM w.h.hesselink@rug.nl
OI Hesselink, Wim/0000-0002-1413-4320
CR ABADI M, 1991, THEOR COMPUT SCI, V82, P253, DOI 10.1016/0304-3975(91)90224-P
   Andrews G. R., 1991, Concurrent Programming: Principles and Practice
   [Anonymous], 1980, LNCS
   [Anonymous], 1995, Temporal verification of reactive systems-safety
   [Anonymous], 1981, Lecture Notes in Computer Science, DOI [10.1007/BFb0017309, DOI 10.1007/BFB0017309]
   Aravind A, 2009, ACTA INFORM, V46, P73, DOI 10.1007/s00236-008-0086-z
   ATTIE PC, 1999, ACM S PRINC DISTR CO, P63
   BACK RJR, 1989, LECT NOTES COMPUT SC, V375, P115
   Back RJR, 1994, LECT NOTES COMPUT SC, V836, P367
   Back RJR, 1989, LNCS, V366, P199
   Birrell A. D., 1987, Operating Systems Review, V21, P94, DOI 10.1145/37499.37509
   Boyer R. S., 1997, A Computational Logic Handbook
   Chandy K.M., 1988, PARALLEL PROGRAM DES
   Cohen E, 1998, LECT NOTES COMPUT SC, V1466, P317, DOI 10.1007/BFb0055631
   DENICOLA R, 1995, J ACM, V42, P458, DOI 10.1145/201019.201032
   GRIFFIOEN D, 2003, ACM T COMPUT LOG, V5, P1
   HE J, 1986, LECT NOTES COMPUT SC, V213, P187
   Hesselink W. H., 2005, ACM Transactions on Computational Logic, V6, P175, DOI 10.1145/1042038.1042044
   Hesselink WH, 2006, ACTA INFORM, V42, P583, DOI 10.1007/s00236-006-0007-y
   Hesselink WH, 2004, SCI COMPUT PROGRAM, V51, P47, DOI 10.1016/j.scico.2003.06.001
   HESSELINK WH, 2009, MECH VERIFICATION PR
   HESSELINK WH, 1992, CAMBRIDGE TRACTS THE, V27
   Hesselink WH, 2008, SCI COMPUT PROGRAM, V71, P57, DOI 10.1016/j.scico.2008.01.001
   Hesselink WH, 2008, INFORM COMPUT, V206, P108, DOI 10.1016/j.ic.2007.10.003
   Hesselink WH, 2007, ACTA INFORM, V44, P123, DOI 10.1007/s00236-007-0044-1
   Hesselink WH, 2006, ACTA INFORM, V43, P195, DOI 10.1007/s00236-006-0020-1
   Hesselink WH, 2008, ELECTRON NOTES THEOR, V214, P3, DOI 10.1016/j.entcs.2008.06.002
   JONSSON B, 1991, LNCS, V527, P346
   JOSEPHS MB, 1988, DISTRIB COMPUT, V3, P9, DOI 10.1007/BF01788563
   Kleiman S, 1996, PROGRAMMING THREADS
   Ladkin P, 1999, DISTRIB COMPUT, V12, P151, DOI 10.1007/s004460050063
   LAMPORT L, 1989, COMMUN ACM, V32, P32, DOI 10.1145/63238.63240
   Lamport L, 1997, THEOR COMPUT SCI, V179, P333, DOI 10.1016/S0304-3975(96)00153-3
   LAMPORT L, 1992, DISTRIB COMPUT, V6, P65, DOI 10.1007/BF02276641
   LAMPORT L, 1994, ACM T PROGR LANG SYS, V16, P872, DOI 10.1145/177492.177726
   LAMPORT L, 1989, 44 SRC DIG EQ CORP
   LIPTON RJ, 1975, COMMUN ACM, V18, P717, DOI 10.1145/361227.361234
   LYNCH N, 1995, INFORM COMPUT, V121, P214, DOI 10.1006/inco.1995.1134
   Manolios P, 2003, LECT NOTES COMPUT SC, V2860, P304
   MCCARTHY J, 1980, ARTIF INTELL, V13, P27, DOI 10.1016/0004-3702(80)90011-9
   Milner R., 1971, IJCAI'71: Proceedings of the 2nd International Joint Conference on Arti cial Intelligence, P481
   Nejati S, 2005, SEFM 2005: THIRD IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING AND FORMAL METHODS, PROCEEDINGS, P311
   Owre S., 2001, PVS VERSION 2 4 SYST
   Schellhorn G, 2008, ELECTRON NOTES THEOR, V214, P25, DOI 10.1016/j.entcs.2008.06.003
   SCHNEIDER FB, 1992, DISTRIB COMPUT, V6, P1, DOI 10.1007/BF02276637
   VanGlabbeek RJ, 1996, J ACM, V43, P555, DOI 10.1145/233551.233556
NR 46
TC 3
Z9 3
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 1
PY 2011
VL 76
IS 9
SI SI
BP 739
EP 755
DI 10.1016/j.scico.2009.09.006
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 765IY
UT WOS:000290700100002
OA Green Published
DA 2024-07-18
ER

PT J
AU Backhouse, R
   Ferreira, JF
AF Backhouse, Roland
   Ferreira, Joao F.
TI On Euclid's algorithm and elementary number theory
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 9th International Conference on Mathematics of Program Construction
CY JUL 15-18, 2008
CL Marseille, FRANCE
SP Ctr Int Rech Math Luminy, INRIA
DE Number theory; Calculational method; Greatest common divisor; Euclid's
   algorithm; Invariant; Eisenstein array; Eisenstein-Stern tree (aka
   Calkin-Wilf tree); Stern-Brocot tree; Algorithm derivation; Enumeration
   algorithm; Rational number
ID RATIONALS
AB Algorithms can be used to prove and to discover new theorems. This paper shows how algorithmic skills in general, and the notion of invariance in particular, can be used to derive many results from Euclid's algorithm. We illustrate how to use the algorithm as a verification interface (i.e., how to verify theorems) and as a construction interface (i.e., how to investigate and derive new theorems).
   The theorems that we verify are well-known and most of them are included in standard number-theory books. The new results concern distributivity properties of the greatest common divisor and a new algorithm for efficiently enumerating the positive rationals in two different ways. One way is known and is due to Moshe Newman. The second is new and corresponds to a deforestation of the Stern-Brocot tree of rationals. We show that both enumerations stem from the same simple algorithm. In this way, we construct a Stern-Brocot enumeration algorithm with the same time and space complexity as Newman's algorithm. A short review of the original papers by Stern and Brocot is also included. Crown Copyright (C) 2010 Published by Elsevier B.V. All rights reserved.
C1 [Backhouse, Roland; Ferreira, Joao F.] Univ Nottingham, Sch Comp Sci, Nottingham NG8 1BB, England.
C3 University of Nottingham
RP Backhouse, R (corresponding author), Univ Nottingham, Sch Comp Sci, Nottingham NG8 1BB, England.
EM rcb@cs.nott.ac.uk; joao@joaoff.com
OI Backhouse, Roland/0000-0002-0140-8089; Ferreira,
   Joao/0000-0002-6612-9013
CR AIGNER M, 2004, PROOFS BOOK
   [Anonymous], 1 COURSE ABSTRACT AL
   BACKHOUSE R, 2009, EUCLIDS ALGORITHM EL
   Backhouse R, 2008, LECT NOTES COMPUT SC, V5133, P79
   Backhouse Roland, 2003, PROGRAM CONSTRUCTION
   Brocot A., 1861, Revue Chronometrique, V3, P186
   Burton D. M, 2005, Elementary number theory, V6th
   Calkin N, 2000, AM MATH MON, V107, P360, DOI 10.2307/2589182
   DIJKSTRA EW, 1975, COMMUN ACM, V18, P453, DOI [10.1145/360933.360975, 10.1145/390016.808417]
   DIJKSTRA EW, 1990, FIBONACCI GREATEST C
   Gibbons J, 2006, J FUNCT PROGRAM, V16, P281, DOI 10.1017/S0956796806005880
   Graham R. L, 1994, CONCRETE MATH FDN CO, V2nd
   Gries D., 1993, LOGICAL APPROACH DIS
   Hayes B, 2000, AM SCI, V88, P296, DOI 10.1511/2000.29.3334
   HIRST KE, 1995, SEQUENCES SERIES
   Knuth D. E., 2003, AM MATH MON, V110, P642
   Knuth DE, 1997, SEMINUMERICAL ALGORI, V2
   Sloane N.J.A., The On-Line Encyclopedia of Integer Sequences-A338706-Number of 2-linear trees on n nodes
   Stern M.A., 1858, J REINE ANGEW MATH, V55, P193, DOI DOI 10.1515/CRLL.1858.55.193
   VANGASTEREN AJM, 1990, LNCS, V445
NR 20
TC 9
Z9 11
U1 0
U2 2
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR 1
PY 2011
VL 76
IS 3
SI SI
BP 160
EP 180
DI 10.1016/j.scico.2010.05.006
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 720GT
UT WOS:000287269500002
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Singh, A
   Ramakrishnan, CR
   Smolka, SA
AF Singh, Anu
   Ramakrishnan, C. R.
   Smolka, Scott A.
TI A process calculus for Mobile Ad Hoc Networks
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 10th International Conference on Coordination Models and Languages
   (COORDINATION 2008)
CY JUN 04-06, 2008
CL Oslo, NORWAY
DE Mobile Ad Hoc Networks; Process calculi; Bisimulation; Congruence
ID EFFICIENT MODEL CHECKING; VERIFICATION
AB We present the omega-calculus, a process calculus for formally modeling and reasoning about Mobile Ad Hoc Wireless Networks (MANETs) and their protocols. The omega-calculus naturally captures essential characteristics of MANETs, including the ability of a MANET node to broadcast a message to any other node within its physical transmission range (and no others), and to move in and out of the transmission range of other nodes in the network. A key feature of the omega-calculus is the separation of a node's communication and computational behavior, described by an omega-process, from the description of its physical transmission range, referred to as an omega-process interface.
   Our main technical results are as follows. We give a formal operational semantics of the omega-calculus in terms of labeled transition systems and show that the state reachability problem is decidable for finite-control omega-processes. We also prove that the omega-calculus is a conservative extension of the pi-calculus, and that late bisimulation equivalence (appropriately lifted from the pi-calculus to the omega-calculus) is a congruence. Congruence results are also established for a weak version of late bisimulation equivalence, which abstracts away from two types of internal actions: tau-actions, as in the pi-calculus, and mu-actions, signaling node movement. We additionally define a symbolic semantics for the omega-calculus extended with the mismatch operator, along with a corresponding notion of symbolic bisimulation equivalence, and establish congruence results for this extension as well. Finally, we illustrate the practical utility of the calculus by developing and analyzing formal models of a leader election protocol for MANETs and the AODV routing protocol. (C) 2009 Elsevier B.V. All rights reserved.
C1 [Singh, Anu; Ramakrishnan, C. R.; Smolka, Scott A.] SUNY Stony Brook, Dept Comp Sci, Stony Brook, NY 11794 USA.
C3 State University of New York (SUNY) System; State University of New York
   (SUNY) Stony Brook
RP Singh, A (corresponding author), SUNY Stony Brook, Dept Comp Sci, Stony Brook, NY 11794 USA.
EM anusingh@cs.sunysb.edu; cram@cs.sunysb.edu; sas@cs.sunysb.edu
FU Division Of Computer and Network Systems; Direct For Computer & Info
   Scie & Enginr [0831298, 0926190] Funding Source: National Science
   Foundation
CR [Anonymous], AD HOC ON D IN PRESS
   Basu S, 2003, LECT NOTES COMPUT SC, V2619, P315
   Bruni R, 2008, THEOR COMPUT SCI, V402, P102, DOI 10.1016/j.tcs.2008.04.029
   CARDELLI L, 1998, FOSSACS
   Dam M, 1997, THEOR COMPUT SCI, V183, P215, DOI 10.1016/S0304-3975(96)00325-8
   ENE C, 2001, IPDPS, P149
   GODSKESEN JC, 2006, P 18 NORD WORKSH PRO
   Godskesen JC, 2007, LECT NOTES COMPUT SC, V4467, P132
   Hennessy Matthew., 1998, HIGH LEVEL CONCURREN, P3
   Merro M, 2007, ELECTRON NOTES THEOR, V173, P275, DOI 10.1016/j.entcs.2007.02.039
   Mezzetti N, 2006, ELECTRON NOTES THEOR, V158, P331, DOI 10.1016/j.entcs.2006.04.017
   Milner R., 1993, Logic and Algebra of Specification. Proceedings of the NATO Advanced Study Institute, P203
   MILNER R, 1992, INFORM COMPUT, V100, P1, DOI [10.1016/0890-5401(92)90008-4, 10.1016/0890-5401(92)90009-5]
   Nanz S, 2006, THEOR COMPUT SCI, V367, P203, DOI 10.1016/j.tcs.2006.08.036
   Ostrovsky Karol., 2002, PPDP, P2
   Parrow J., 2001, Handbook of Process Algebra, P479, DOI [10.1016/B978-044482830-9/50026-6, DOI 10.1016/B978-044482830-9/50026-6]
   Prasad KVS, 1995, SCI COMPUT PROGRAM, V25, P285, DOI 10.1016/0167-6423(95)00017-8
   Ramakrishna YS, 1997, LECT NOTES COMPUT SC, V1254, P143
   Sangiorgi D., 1998, Mathematical Structures in Computer Science, V8, P447, DOI 10.1017/S0960129598002527
   Vasudevan S, 2004, 12TH IEEE INTERNATIONAL CONFERENCE ON NETWORK PROTOCOLS - PROCEEDINGS, P350, DOI 10.1109/ICNP.2004.1348124
   *XSB, XSB LOG PROGR SYST
   Yang P., 2004, International Journal on Software Tools for Technology Transfer, V6, P38, DOI 10.1007/s10009-003-0136-3
   Yang P, 2005, LECT NOTES COMPUT SC, V3350, P113
   Yang P, 2006, LECT NOTES COMPUT SC, V3920, P42
NR 24
TC 47
Z9 53
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 1
PY 2010
VL 75
IS 6
SI SI
BP 440
EP 469
DI 10.1016/j.scico.2009.07.008
PG 30
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 590MT
UT WOS:000277231300005
DA 2024-07-18
ER

PT J
AU Binkley, D
   Lawrie, D
   Maex, S
   Morrell, C
AF Binkley, Dave
   Lawrie, Dawn
   Maex, Steve
   Morrell, Christopher
TI Identifier length and limited programmer memory
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 16th IEEE International Conference on Program Comprehension
CY JUN 10-13, 2008
CL Amsterdam, NETHERLANDS
SP IEEE Comp Soc, IEEE Comp Soc TCSE
DE Program comprehension; Memory; Identifier names
AB Because early variable mnemonics were limited to as few as six to eight characters, many early programmers abbreviated concepts in their variable names. The past thirty years have seen a steady increase in permitted name length and, slowly, an increase in the actual identifier length. However, in theory names can be too long for programmers to comprehend and manipulate effectively. Most obviously, in object-oriented programs, entity naming often involves chaining of method calls and field selectors (e.g.. class.firstAssignment().name.trim()). While longer names bring the potential for better comprehension through more embedded sub-words, there are practical limits to their length given limited human memory resources.
   The driving hypothesis behind the presented study is that names used in modern programs have reached this limit. Thus, a goal of the study is to better understand the balance between longer, more expressive names and limited programmer memory resources. Statistical models derived from an experiment involving 158 programmers of varying degrees of experience show that longer names extracted from production code take more time to process and reduce correctness in a simple recall activity. This has clear negative implications for any attempt to read, and hence comprehend or manipulate, the source code found in modern software. The experiment also evaluates the advantage of identifiers having probable ties to a programmer's persistent memory. Combined, these results reinforce past proposals advocating the use of limited, consistent, and regular vocabulary in identifier names. In particular, good naming limits individual name length and reduces the need for specialized vocabulary. (C) 2009 Elsevier B.V. All rights reserved.
C1 [Binkley, Dave; Lawrie, Dawn; Maex, Steve; Morrell, Christopher] Loyola Coll, Baltimore, MD 21210 USA.
C3 Loyola University Maryland
RP Binkley, D (corresponding author), Loyola Coll, Baltimore, MD 21210 USA.
EM binkley@cs.loyola.edu; lawrie@cs.loyola.edu; smaex@cs.loyola.edu;
   chm@loyola.edu
RI Morrell, Christopher/AAN-3267-2021
OI Lawrie, Dawn/0000-0001-7347-7086
CR [Anonymous], ICSM
   Antoniol G, 2002, IEEE T SOFTWARE ENG, V28, P970, DOI 10.1109/TSE.2002.1041053
   COWAN N, 2001, BEHAV BRAIN SCI, V24
   DEISSENBOCK F, 2005, P 13 INT WORKSH PROG
   JONES D, 2004, C VU, V16
   Laitinen K., 1996, SIGSOFT SOFTWARE ENG, V21
   LAWRIE D, 2007, NASA J INNOVATIONS S, V3
   LAWRIE D, 2006, 14 INT C PROGR COMPR
   LIBLIT B, 2006, 8 ANN PSYCH PROGR WO
   MORRELL C, 1997, AM STAT, V51
   Nevid J.S., 2003, Psychology: Concepts and Applications
   NEW B, 2006, PSYCHONOMIC B REV, V13
   RILLING J, 2003, P 11 IEEE INT WORKSH
   SJOBERG D, 1993, IEEE T SOFTWARE ENG, V19
   TAKANG A, 1996, J PROGRAM LANGUAGES, V4
   Tulsky D., 1997, WAIS-III WMS-III Technical Manual
   Verbeke G., 2001, Linear Mixed Models for Longitudinal Data
NR 17
TC 27
Z9 30
U1 0
U2 6
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAY 1
PY 2009
VL 74
IS 7
SI SI
BP 430
EP 445
DI 10.1016/j.scico.2009.02.006
PG 16
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 447XG
UT WOS:000266224700004
DA 2024-07-18
ER

PT J
AU Vidács, L
   Beszédes, A
   Gyimóthy, T
AF Vidacs, Laszlo
   Beszedes, Arpad
   Gyimothy, Tibor
TI Combining preprocessor slicing with C/C plus plus language slicing
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 16th IEEE International Conference on Program Comprehension
CY JUN 10-13, 2008
CL Amsterdam, NETHERLANDS
SP IEEE Comp Soc, IEEE Comp Soc TCSE
DE Program slicing; C/C; Preprocessing; Preprocessor slicing
AB Of the very few practical implementations of program slicing algorithms, the majority deal with C/C++ programs. Yet, preprocessor-related issues have been marginally addressed by these slicers, despite the fact that ignoring (or only partially handling) these constructs may lead to serious inaccuracies in the slicing results and hence in the program analysis task being performed. Recently, an accurate slicing method for preprocessor-related constructs has been proposed, which - when combined with existing C/C++ language slicers - can provide more complete slices and hence a more successful analysis of programs written in one of these languages. In this paper, we present our approach which combines the two slicing methods and, via practical experiments, describe its benefits in terms of the completeness of the resulting slices. (C) 2009 Elsevier B.V. All rights reserved.
C1 [Vidacs, Laszlo; Beszedes, Arpad; Gyimothy, Tibor] Univ Szeged, Dept Software Engn, H-6720 Szeged, Hungary.
C3 Szeged University
RP Vidács, L (corresponding author), Univ Szeged, Dept Software Engn, Arpad Ter 2, H-6720 Szeged, Hungary.
EM lac@inf.u-szeged.hu; beszedes@inf.u-szeged.hu; gyimi@inf.u-szeged.hu
RI Vidács, László/M-3028-2018; Gyimothy, Tibor/M-3705-2018
OI Gyimothy, Tibor/0000-0002-2123-7387; Beszedes, Arpad/0000-0002-5421-9302
CR AGRAWAL H, 1993, SOFTWARE PRACT EXPER, V23, P589, DOI 10.1002/spe.4380230603
   AGRAWAL H, 1990, SIGPLAN NOTICES, V25, P246, DOI 10.1145/93548.93576
   Binkley D, 2005, PROC IEEE INT CONF S, P177
   Binkley D, 2003, PROC IEEE INT CONF S, P44, DOI 10.1109/ICSM.2003.1235405
   Binkley D, 1998, INFORM SOFTWARE TECH, V40, P583, DOI 10.1016/S0950-5849(98)00085-8
   Bohner S. A., 1996, SOFTWARE CHANGE IMPA
   Cimitile A, 1996, J SOFTW MAINT-RES PR, V8, P145, DOI 10.1002/(SICI)1096-908X(199605)8:3<145::AID-SMR127>3.0.CO;2-9
   Ernst MD, 2002, IEEE T SOFTWARE ENG, V28, P1146, DOI 10.1109/TSE.2002.1158288
   Ferenc R, 2002, PROC IEEE INT CONF S, P172, DOI 10.1109/ICSM.2002.1167764
   GALLAGHER KB, 1991, IEEE T SOFTWARE ENG, V17, P751, DOI 10.1109/32.83912
   GARRIDO A, 2005, THESIS UIUC
   HORWITZ S, 1990, ACM T PROGR LANG SYS, V12, P26, DOI [10.1145/77606.77608, 10.1145/960116.53994]
   Kullbach B, 2001, EIGHTH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P3, DOI 10.1109/WCRE.2001.957805
   Livadas P. E., 1994, Proceedings. IEEE Third Workshop on Program Comprehension (Cat. No.94TH06767), P89, DOI 10.1109/WPC.1994.341255
   Mock M, 2005, IEEE T SOFTWARE ENG, V31, P657, DOI 10.1109/TSE.2005.94
   OTTENSTEIN KJ, 1984, SIGPLAN NOTICES, V19, P177, DOI 10.1145/390011.808263
   Rajlich V, 1997, INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE, PROCEEDINGS, P84, DOI 10.1109/ICSM.1997.624234
   ROTHERMEL G, 1994, P 1994 INT S SOFTW T, P169
   TIP F, 1995, J PROGRAM LANG, V3, P121
   Vidács L, 2004, CSMR 2004: EIGHTH EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, PROCEEDINGS, P75, DOI 10.1109/CSMR.2004.1281408
   Vidács L, 2007, ICSOFT 2007: PROCEEDINGS OF THE SECOND INTERNATIONAL CONFERENCE ON SOFTWARE AND DATA TECHNOLOGIES, VOL SE, P230
   Vidács L, 2008, INT C PROGRAM COMPRE, P163, DOI 10.1109/ICPC.2008.33
   Vittek Marian., 2005, ICSM 2005 Industrial and Tool Volume, P61
   WEISER M, 1984, IEEE T SOFTWARE ENG, V10, P352, DOI 10.1109/TSE.1984.5010248
   Xu B., 2005, ACM SIGSOFT Software Engineering Notes, V30, P1
   Zhao J., 2000, Proceedings of the Fourth European Conference on Software Maintenance and Reengineering, P215, DOI 10.1109/CSMR.2000.827330
NR 26
TC 4
Z9 5
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAY 1
PY 2009
VL 74
IS 7
SI SI
BP 399
EP 413
DI 10.1016/j.scico.2009.02.003
PG 15
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 447XG
UT WOS:000266224700002
OA Green Accepted, Green Submitted
DA 2024-07-18
ER

PT J
AU Duan, ZH
   Yang, XX
   Koutny, M
AF Duan, Zhenhua
   Yang, Xiaoxiao
   Koutny, Maciej
TI Framed temporal logic programming
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE temporal logic programming; framing; minimal model; monotonicity;
   synchronization; communication; semantics
AB A Projection Temporal Logic is discussed and some of its laws are given. After that, an executable temporal logic programming language, called Framed Tempura, is formalized. A minimal model-based approach for framing in temporal logic programming is presented. Since framing destroys monotonicity, canonical models - used to define the semantics of non-framed programs - are no longer appropriate. To deal with this, a minimal model theory is developed, using which the temporal semantics of framed programs is captured. The existence of a minimal model for a given framed program is demonstrated. A synchronous communication mechanism for concurrent programs is provided by means of the framing technique and minimal model semantics. (C) 2007 Elsevier B.V. All rights reserved.
C1 [Duan, Zhenhua; Yang, Xiaoxiao] Xidian Univ, Inst Comp Theory & Technol, Xian 710071, Peoples R China.
   [Koutny, Maciej] Newcastle Univ, Sch Comp Sci, Newcastle Upon Tyne NE1 7RU, Tyne & Wear, England.
C3 Xidian University; Newcastle University - UK
RP Duan, ZH (corresponding author), Xidian Univ, Inst Comp Theory & Technol, Xian 710071, Peoples R China.
EM zhhduan@mail.xidian.edu.cn; xxyang@mail.xidian.edu.cn;
   maciej.koutny@newcastle.ac.uk
CR BARRINGER H, 1989, LNCS, V430
   BIDOIT N, 1991, THEOR COMPUT SCI, V78, P3, DOI 10.1016/0304-3975(51)90003-5
   Bowman H, 2003, J LOGIC COMPUT, V13, P195, DOI 10.1093/logcom/13.2.195
   BOWMAN H, 1997, APPL LOGIC SERIES
   BOWMAN H, 1998, LNAI, V1397
   Duan Z., 2006, TEMPORAL LOGIC TEMPO
   DUAN Z, 1994, LECT NOTES ARTIF INT, V822, P333
   Duan ZH, 2005, LECT NOTES COMPUT SC, V3668, P356, DOI 10.1007/11562931_27
   Duan ZH, 2004, J COMPUT SCI TECHNOL, V19, P341, DOI 10.1007/BF02944904
   Duan ZH, 2000, BIOSYSTEMS, V55, P93, DOI 10.1016/S0303-2647(99)00087-8
   Duan ZH., 1996, THESIS U NEWCASTLE T
   EMERSON EA, 1982, SCI COMPUT PROGRAM, V2, P241, DOI 10.1016/0167-6423(83)90017-5
   FISHER M, 1995, LNAI, V897
   FUJITA M, 1986, LECT NOTES COMPUT SC, V225, P695
   GABBAY DM, 1984, 8411 IMP COLL DEP CO
   HALE RWS, 1988, THESIS CAMBRIDGE U
   HEHNER ECR, 1990, SCI COMPUT PROGRAM, V14, P133, DOI 10.1016/0167-6423(90)90018-9
   Hoare CAR., 1985, Communicating Sequential Processes
   Kroger F., 1987, TEMPORAL LOGIC PROGR
   LAMPORT L, 1994, ACM T PROGRAMMING LA, V16
   Manna Z., 1992, The temporal logic of reactive and concurrent systems-specification, DOI DOI 10.1007/978-1-4612-0931-7
   Milner R., 1989, Communication and concurrency
   MOSZKOWSKI B, 1994, IFIP TRANS A, V56, P307
   Moszkowski B.C., 1986, Executing Temporal Logic Programs
   NESS L, 1990, P ACM SIGSOFT INT WO
   Tang C. S., 1994, Chinese Journal of Advanced Software Research, V1, P1
   Tang C.-S., 1983, Information Processing 83. Proceedings of the IFIP 9th World Computer Congress, P425
NR 27
TC 57
Z9 74
U1 0
U2 6
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 1
PY 2008
VL 70
IS 1
BP 31
EP 61
DI 10.1016/j.scico.2007.09.001
PG 31
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 255DC
UT WOS:000252636000002
DA 2024-07-18
ER

PT J
AU Varró, D
   Balogh, A
AF Varro, Daniel
   Balogh, Andras
TI The model transformation language of the VIATRA2 framework
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT Model Transformation Track held at the 21st Annual ACM Symposium on
   Applied Computing
CY APR 23-27, 2006
CL Dijon, FRANCE
SP ACM
DE model transformation; graph transformation; abstract state machines
AB We present the model transformation language of the VIATRA2 framework, which provides a rule- and pattern-based transformation language for manipulating graph models by combining graph transformation and abstract state machines into a single specification paradigm. This language offers advanced constructs for querying (e.g. recursive graph patterns) and manipulating models (e.g. generic transformation and meta-transformation rules) in unidirectional model transformations frequently used in formal model analysis to carry out powerful abstractions. (c) 2007 Elsevier B.V. All rights reserved.
C1 [Varro, Daniel; Balogh, Andras] Budapest Univ Technol Econ, Dept Measurement & Informat Syst, H-1117 Budapest, Hungary.
   [Varro, Daniel; Balogh, Andras] OptXware Res & Dev LLC, Budapest, Hungary.
C3 Budapest University of Technology & Economics
RP Varró, D (corresponding author), Budapest Univ Technol Econ, Dept Measurement & Informat Syst, Magyar Tudosok krt 2, H-1117 Budapest, Hungary.
EM varro@mit.bme.hu; abalogh@mit.bme.hu
RI Varro, Daniel/AAC-4234-2022; Varro, Daniel/G-8963-2012
OI Varro, Daniel/0000-0002-8790-252X; 
CR [Anonymous], 22 INT C SOFTW ENG I
   [Anonymous], ECLIPSE MODELING FRA
   ATKINSON C, 2001, LNCS, V2185, P19
   *ATLAS GROUP, ATLAS TRANSF LANG
   Balogh A., 2006, Applied Computing 2006. 21st Annual ACM Symposium on Applied Computing, P1288, DOI 10.1145/1141277.1141576
   Balogh A., 2006, Applied Computing 2006. 21st Annual ACM Symposium on Applied Computing, P1280, DOI 10.1145/1141277.1141575
   Bézivin J, 2003, LECT NOTES COMPUT SC, V2863, P175
   Bondavalli A, 2001, COMPUT SYST SCI ENG, V16, P265
   BORGER E, 2003, ABSTRACT STATE MECH
   *DECOS, FP6 INT PROJ
   DELARA J, 2002, 5 INT C FASE 2002 FU, V2306, P174
   Ehrig H., 1999, Handbook of Graph Grammars and Computing by Graph Transformation: Applications, Languages and Tools, V2
   Ermel C., 1999, WORLD SCI, P551
   HORVATH A, 2007, P GRAPH TRANSF VIS M, V6
   KARAI G, 2003, J UNIVERSAL COMPUTER
   LEVENDOVSZKY T, 2004, P GRABATS 2004 WORKS
   *OBJ MAN GROUP, 2003, MET OBJ FAC VER 2 0
   *RAC SYST GMBH, REC
   Rensink A, 2004, LECT NOTES COMPUT SC, V3256, P319
   Schurr A., 1999, WORLD SCI, P487
   Schurr Andy., 1995, P 20 WORKSHOP GRAPH, V903, P151
   *TEFK, EMF TRANSF ENG
   TRATT L, 2006, P ACM S APPL COMP AP, P1296
   ULLMAN D, 1988, DEDUCTIVE DATABASES
   VARRO D, 2004, THESIS U TECHNOLOGY
   Varro D., 2003, Journal of Software and Systems Modeling, V2, P187, DOI [DOI 10.1007/S10270-003-0028-8, 10.1007/s10270-003-0028-8]
   VARRO G, 2006, GRAMOT 2005 INT WORK, V152, P191
   VIATRA2 TRANSFORMATI
NR 28
TC 111
Z9 127
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 1
PY 2007
VL 68
IS 3
BP 214
EP 234
DI 10.1016/j.scico.2007.05.004
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 243BZ
UT WOS:000251771200007
OA Bronze
DA 2024-07-18
ER

PT J
AU Magnusson, E
   Hedin, G
AF Magnusson, Eva
   Hedin, Goerel
TI Circular reference attributed grammars - their evaluation and
   applications
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 3rd Workshop on Language Descriptions, Tools and Applications (LDTA '03)
CY APR 06, 2003
CL Warsaw, POLAND
DE attribute grammars; circular attribute evaluation; reference attributes;
   fixed-point evaluation; demand-driven evaluation; grammar flow; live
   analysis
AB This paper presents a combination of Reference Attributed Grammars (RAGs) and Circular Attribute Grammars (CAGs). While RAGs allow the direct and easy specification of nonlocally dependent information, CAGs allow iterative fixed-point computations to be expressed directly using recursive (circular) equations. We demonstrate how the combined formalism, Circular Reference Attributed Grammars (CRAGs), can take advantage of both these strengths, making it possible to express solutions to many problems in an easy way. We exemplify with the specification and computation of the nullable, first, and follow sets used in parser construction, a problem which is highly recursive and normally programmed by hand using an iterative algorithm. We also present a general demand-driven evaluation algorithm for CRAGs and some optimizations of it. The approach has been implemented and experimental results include computations on a series of grammars including that of Java 1.2. We also revisit some of the classical examples of CAGs and show how their solutions are facilitated by CRAGs. (c) 2007 Elsevier B.V. All rights reserved.
C1 Lund Univ, Dept Comp Sci, S-22100 Lund, Sweden.
C3 Lund University
RP Magnusson, E (corresponding author), Lund Univ, Dept Comp Sci, Box 118, S-22100 Lund, Sweden.
EM eva@cs.lth.se; gorel@cs.lth.se
CR [Anonymous], 1996, Ph.D. Dissertation
   [Anonymous], 1971, Math. Syst. Theory, DOI DOI 10.1007/BF01702865
   [Anonymous], 1998, Modern Compiler Implementation in C
   Boyland JT, 1998, LECT NOTES COMPUT SC, V1383, P31, DOI 10.1007/BFb0026421
   BOYLAND JT, 2003, COMMUNICATION
   BOYLAND JT, 2003, REMOTE ATTRIBUTE GRA
   BOYLAND JT, 2002, ELECT NOTES THEORETI, V65
   CORNILS A, 2000, P WAGA 00 WORKSH ATT
   EKMAN T, 2004, P ECCOOP 2004 18 EUR
   FARROW R, 1986, ACM SIGPLAN NOTICES, V21, P85
   Hedin G., 1989, ECOOP '89. Proceedings of the 1989 European Conference on Object-Oriented Programming, P329
   Hedin G., 2000, Informatica, V24, P301
   HEDIN G, 2002, JASTADD SYSTEM ASPEC, V47, P37
   JALILI F, 1983, ACM SIGPLAN NOTICES, V18, P35
   JONES LG, 1990, ACM T PROGR LANG SYS, V12, P429, DOI 10.1145/78969.78971
   JOURDAN M, 1984, LECT NOTES COMPUT SC, V167, P167
   KASTENS U, 1980, ACTA INFORM, V13, P229, DOI 10.1007/BF00288644
   KATAYAMA T, 1984, ACM T PROGR LANG SYS, V6, P345, DOI 10.1145/579.586
   Knuth D. E., 1968, Mathematical Systems Theory, V2, P127, DOI 10.1007/BF01692511
   MADSEN OL, 1980, LECTURE NOTES COMPUT, V94, P259
   Magnusson E., 2000, Nordic Journal of Computing, V7, P67
   PERSSON P, 1999, WAGA 2 WORKSH ATTR G
   PoetzschHeffter A, 1997, ACTA INFORM, V34, P737, DOI 10.1007/s002360050105
   Rodeh M, 1999, J ACM, V46, P556, DOI 10.1145/320211.320243
   SASAKI A, 2000, WAGA 00 3 WORKSH ATT
NR 25
TC 38
Z9 39
U1 0
U2 2
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD AUG 1
PY 2007
VL 68
IS 1
BP 21
EP 37
DI 10.1016/j.scico.2005.06.005
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 206LT
UT WOS:000249185700003
DA 2024-07-18
ER

PT J
AU Ponsen, M
   Spronck, P
   Muñoz-Avila, H
   Aha, DW
AF Ponsen, Marc
   Spronck, Pieter
   Munoz-Avila, Hector
   Aha, David W.
TI Knowledge acquisition for adaptive game AI
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE computer games; artificial intelligence; real-time strategy;
   reinforcement learning; dynamic scripting; evolutionary algorithm;
   knowledge acquisition
AB Game artificial intelligence (AI) controls the decision-making process of computer-controlled opponents in computer games. Adaptive game AI (i.e., game At that can automatically adapt the behaviour of the computer players to changes in the environment) can increase the entertainment value of computer games. Successful adaptive game AI is invariably based on the game's domain knowledge. We show that an offline evolutionary algorithm can learn important domain knowledge in the form of game tactics (i.e., a sequence of game actions) for dynamic scripting, an offline algorithm inspired by reinforcement learning approaches that we use to create adaptive game AI. We compare the performance of dynamic scripting under three conditions for defeating non-adaptive opponents in a real-time strategy game. In the first condition, we manually encode its tactics. In the second condition, we manually translate the tactics learned by the evolutionary algorithm, and use them for dynamic scripting. In the third condition, this translation is automated. We found that dynamic scripting performs best under the third condition, and both of the latter conditions outperform manual tactic encoding. We discuss the implications of these results, and the performance of dynamic scripting for adaptive game At from the perspective of machine learning research and commercial game development. (c) 2007 Published by Elsevier B.V.
C1 Maastricht Univ, MICC IKAT, NL-6200 MD Maastricht, Netherlands.
   Lehigh Univ, Dept Comp Sci & Engn, Bethlehem, PA 18015 USA.
   USN, Res Lab, Navy Ctr Appl Res Artificial Intelligence, Washington, DC 20375 USA.
C3 Maastricht University; Lehigh University; United States Department of
   Defense; United States Navy; Naval Research Laboratory
RP Ponsen, M (corresponding author), Maastricht Univ, MICC IKAT, POB 616, NL-6200 MD Maastricht, Netherlands.
EM m.ponsen@micc.unimaas.nl; p.spronck@micc.unimaas.nl; hem4@lehigh.edu;
   david.aha@nrl.navy.mil
CR ALLEN M, 2001, P 2 INT C INT GAM SI, P22
   BLYTHE J, 2001, P INT C INT US INT 2
   BROCKINGTON M, 2002, AI GAME PROGRAMMING, P548
   BUCKLAND M, 2004, AI GAME PROGRAMMING, P649
   Buro Michael., 2004, P AAAI WORKSHOP GAME, P139
   Chan B, 2004, IEEE C EVOL COMPUTAT, P125, DOI 10.1109/CEC.2004.1330847
   Cheng D.C., 2004, Proceedings of the Game-On Conference, P36
   COHEN R, 1995, EMPIRICAL METHODS AR
   FORBUS K, 2001, AAAI SPRING S
   Forbus KD, 2002, IEEE INTELL SYST, V17, P15, DOI 10.1109/MIS.2002.1024746
   Gold J., 2004, Object-oriented game development
   Goldberg David E, 1989, GENETIC ALGORITHMS S
   Guestrin Carlos, 2003, P 18 INT JOINT C ART, P1003
   IIGHAMI O, 2002, P AIPS 02
   KIRBY N, 2003, AI GAME PROGRAMMING
   Kohavi R, 1997, ARTIF INTELL, V97, P273, DOI 10.1016/S0004-3702(97)00043-X
   Laird JE, 2001, AI MAG, V22, P15
   MANSLOW J, 2002, AI GAME PROGRAMMING, P557
   MANSLOW J, 2004, AI GAME PROGRAMMING, P591
   NAREYEK A, 2004, ACM QUEUE, V1, P58
   PONSEN M, IN PRESS P BNAIC 200
   PONSEN M, 2006, IN PRESS AI MAGAZINE
   Rabin S., 2004, AI GAME PROGRAMMING
   Schaeffer J, 2001, AI MAG, V22, P29
   Spronck P, 2006, MACH LEARN, V63, P217, DOI 10.1007/s10994-006-6205-6
   Street G., 2001, P 2001 GAM DEV C
   Sutton R., 1998, Reinforcement Learning: An Introduction
   *TIELT, 2006, TESTB INT EV LEARN T
   Tomlinson SL, 2003, GAME-ON 2003: 4th International Conference on Intelligent Games and Simulation, P5
   Tozour P., 2002, AI Game Programming Wisdom, P541
   WINNER E, 2003, P ICML 2003
NR 31
TC 17
Z9 21
U1 0
U2 9
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 1
PY 2007
VL 67
IS 1
BP 59
EP 75
DI 10.1016/j.scico.2007.01.006
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 187HK
UT WOS:000247838100004
DA 2024-07-18
ER

PT J
AU Roden, TE
   Parberry, I
   Ducrest, D
AF Roden, Timothy E.
   Parberry, Ian
   Ducrest, David
TI Toward mobile entertainment: A paradigm for narrative-based audio only
   games
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE computer games; entertainment computing; 3D audio; interactive audio
AB The widespread use of sophisticated mobile computing devices has set the stage for a renaissance in audio only entertainment. Traditional visual games are already used widely in cellular phones and similar devices. A significant limitation is the small display size. In contrast, audio only games on suitable mobile hardware need not degrade due to the smaller form factor. This makes audio only games an attractive alternative to visual games. We describe a framework for authoring interactive narrative-based audio only games set in 3D virtual environments. Despite the novelty in audio only gaming, our approach builds on a foundation of several years of research into audio only applications for sight impaired users, augmented reality systems and human-computer interaction studies. In comparison to attempts to provide a realistic user interface, we argue a simple interface enhances both immersion and entertainment value, serendipitously making audio only games practical for mobile computing. Novel features of our system include real-time gameplay and multi-player support. We also describe our software architecture, the current implementation of which uses low-cost existing PC-based hardware and software. In addition, we describe our first game, Dragon's Roar. (c) 2007 Elsevier B.V. All rights reserved.
C1 Univ Louisiana Lafayette, Ctr Adv Comp Studies, Lafayette, LA USA.
   Univ N Texas, Dept Comp Sci & Engn, Denton, TX 76203 USA.
   Univ Louisiana Lafayette, Dept Comp Sci, Lafayette, LA USA.
C3 University of Louisiana Lafayette; University of North Texas System;
   University of North Texas Denton; University of Louisiana Lafayette
RP Roden, TE (corresponding author), Univ Louisiana Lafayette, Ctr Adv Comp Studies, Lafayette, LA USA.
EM txr4453@louisiana.edu
OI Parberry, Ian/0000-0003-2194-2817
CR *AM3D, 2005, DIES POW FX PLAY WIN
   Andresen G., 2002, Playing by ear: Creating blind-accessible games
   [Anonymous], BBC NEWS
   *AT T, 2006, AT T NAT VOIC
   BACK M, 1996, P ICAD 1996
   BENNALLACK O, 2006, SIMS 2 GAMES MOBILE
   BOER J, 2004, DYNAMIC VARIABLES AU
   CRISPIEN K, 1996, P ICAD 1996
   DREWES T, 2000, P ICAD 2000
   Freeman J., 2001, P 7 INT C AUD DISPL
   FRIBERG J, 2004, P ACM SIGCHI C ADV C, P48
   GAYE L, 2002, P ACM CHI 2002, P840
   HADRUP R, 2004, P MOBILE ENTERTAINME, P207
   LASKY M, 2001, BUSINESS MOBILE GAME, P36
   *LINUXDEVICES COM, 2004, ARM9 LIN GAINS 3D AU
   Lyons K., 2000, Guided by Voices: An Audio Augmented Reality System
   McCrindle R.J., 2000, P INT C DISABILITY, P59
   *MIDI MAN ASS, 1999, INT 3D AUD REND GUID
   *OPENAL, 2000, OPENAL 1 0 SPEC
   *QU INC, 2006, BREW 3 1 SDK
   ROBER N, 2005, P 2005 DIG GAM RES C
   ROBER N, 2004, P ICAD 2004
   SANCHEZ J, 2003, P ACM CHI 2003, P798
   Shinn-Cunningham B., 2003, P 2003 INT C AUDITOR, P21
   *SUN MICR, 2006, MOB MED API 1 1 SPEC
   Targett S., 2003, Proceedings of the 2003 International Conference on Auditory Display, P216
   WINBERG F, 2000, P ACM CHI 2000, P281
NR 27
TC 11
Z9 12
U1 0
U2 6
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 1
PY 2007
VL 67
IS 1
BP 76
EP 90
DI 10.1016/j.scico.2006.07.004
PG 15
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 187HK
UT WOS:000247838100005
DA 2024-07-18
ER

PT J
AU Colón, MA
AF Colon, Michael A.
TI Polynomial approximations of the relational semantics of imperative
   programs
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 11th International Static Analysis Symposium (SAS 2004)
CY AUG 26-28, 2004
CL Verona, ITALY
DE program analysis; relational semantics; abstract interpretation;
   polynomial invariants; non-linear invariants; polynomial ideals
ID SYSTEMS
AB We present a static analysis that approximates the relational semantics of imperative programs by systems of low-degree polynomial equalities. Our method is based on Abstract Interpretation in a lattice of polynomial pseudo ideals - finite-dimensional vector spaces of degree-bounded polynomials that are closed under degree-bounded products. For a fixed degree bound, the sizes of bases of pseudo ideals and the lengths of chains in the lattice of pseudo ideals are bounded by polynomials in the number of program variables. Despite the approximate nature of our analysis, for several programs taken from the literature on non-linear polynomial invariant generation our method produces results that are as precise as those produced by methods based on polynomial ideals and Grobner bases. (c) 2006 Elsevier B.V. All rights reserved.
C1 USN, Res Lab, Ctr High Assurance Comp Syst, Washington, DC 20375 USA.
C3 United States Department of Defense; United States Navy; Naval Research
   Laboratory
RP Colón, MA (corresponding author), USN, Res Lab, Ctr High Assurance Comp Syst, Washington, DC 20375 USA.
EM colon@itd.nrl.navy.mil
CR [Anonymous], 1974, Mathematical Theory of Computation
   [Anonymous], 1990, Introduction to Lattices and Order
   [Anonymous], 1992, IDEALS VARIETIES ALG, DOI DOI 10.1007/978-1-4757-2181-2
   [Anonymous], [No title captured]
   Becker T., 1993, Grobner bases-a computational approach to commutative algebra.
   Colón MA, 2003, LECT NOTES COMPUT SC, V2725, P420
   COLON MA, 2004, P 11 INT STAT AN S, P296
   COUSOT P, 1992, LECT NOTES COMPUT SC, V631, P269, DOI 10.1007/3-540-55844-6_142
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   COUSOT P, 1977, P 1977 S ART INT PRO, P1
   Cousot Patrick, 1978, P 5 ACM SIGACT SIGPL, p84S96, DOI DOI 10.1145/512760.512770
   Dijkstra E. W., 1976, A Discipline of Pro-gramming
   German S. M., 1975, IEEE Transactions on Software Engineering, VSE-1, P68, DOI 10.1109/TSE.1975.6312821
   Granger Philippe, 1991, P TAPSOFT 91, P169
   Halbwachs N, 1997, FORM METHOD SYST DES, V11, P157, DOI 10.1023/A:1008678014487
   KARR M, 1976, ACTA INFORM, V6, P133, DOI 10.1007/BF00268497
   KATZ S, 1976, COMMUN ACM, V19, P188, DOI 10.1145/360032.360048
   Kaye R., 1998, LINEAR ALGEBRA
   Lazard D., 1983, P EUR COMP ALG C, P146
   Mastroeni I, 2001, LECT NOTES COMPUT SC, V2053, P117
   MAYR EW, 1982, ADV MATH, V46, P305, DOI 10.1016/0001-8708(82)90048-2
   MILI A, 1983, ACTA INFORM, V20, P315, DOI 10.1007/BF00264277
   MILLS HD, 1975, COMMUN ACM, V18, P43, DOI 10.1145/360569.360659
   MULLEROLM H, 2004, 31 ACM S PRINC PROGR, P330
   Nielson F., 1999, Principles of Program Analysis
   RODRIGUEZCARBON.E, 2003, TRCS200339 U NEW MEX
   RODRIGUEZCARBON.E, 2004, P 11 INT STAT AN S, P280
   SANKARANARAYANA.S, 2004, 31 ACM S PRINC PROGR, P318
   Schrijver A., 1998, THEORY LINEAR INTEGE
   Wegbreit B., 1975, IEEE Transactions on Software Engineering, VSE-1, P270, DOI 10.1109/TSE.1975.6312852
   YAP CK, 1991, J SYMB COMPUT, V12, P1, DOI 10.1016/S0747-7171(08)80138-1
NR 31
TC 9
Z9 9
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 1
PY 2007
VL 64
IS 1
BP 76
EP 96
DI 10.1016/j.scico.2006.03.004
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 118ES
UT WOS:000242925700005
DA 2024-07-18
ER

PT J
AU Rose, J
   Swamy, N
   Hicks, M
AF Rose, J
   Swamy, N
   Hicks, M
TI Dynamic inference of polymorphic lock types
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT Workshop on Concurrency and Synchronization in Java Programs
CY JUL 25-26, 2004
CL St Johns, CANADA
DE dynamic analysis; type inference; data races; Java; multithreading
AB We present FINDLOCKS, an approach for automatically proving the absence of data races in multi-threaded Java programs, using a combination of dynamic and static analysis. The program in question is instrumented so that when executed it will gather information about locking relationships. This information is then used to automatically generate annotations needed to type check the program using the Race-Free Java type system. Programs that type check are sure to be free from races. We call this technique dynamic annotation inference. We describe the design and implementation of our approach, and our experience applying the tool to a variety of Java programs. We have found that when using a reasonably comprehensive test suite, which is easy for small programs but harder for larger ones, the approach generates useful annotations. (c) 2005 Elsevier B.V. All rights reserved.
C1 Univ Maryland, Dept Comp Sci, College Pk, MD 20742 USA.
C3 University System of Maryland; University of Maryland College Park
RP Univ Maryland, Dept Comp Sci, College Pk, MD 20742 USA.
EM rosejr@cs.umd.edu; nswamy@cs.umd.edu; mwh@cs.umd.edu
CR AGARWAL R, 2004, LECT NOTES COMPUTER, V2937
   AIKEN A, 1998, LECT NOTES COMPUTER, V1473, P78
   Ammons G, 2002, ACM SIGPLAN NOTICES, V37, P4, DOI 10.1145/565816.503275
   Ammons Glenn., 1998, PLDI 98 P ACM SIGPLA, P72, DOI DOI 10.1145/277652.277665
   [Anonymous], 2000, Programming Language Design and Implementation, DOI [DOI 10.1145/358438.349328, 10.1145/349299.349328]
   [Anonymous], 1994, P MICRO 27 ANN IEEE
   BALLEARI E, 1992, THYMUS, V19, P59
   BOYAPATI C, 2001, P ACM C OBJ OR PROGR, P56
   CHOI JD, PLDI 02, P258
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Engler Dawson., 2003, Proceedings of the Nineteenth ACM Symposium on Operating Systems Principles, SOSP '03, P237, DOI DOI 10.1145/945445.945468
   Ernst MD, 2001, IEEE T SOFTWARE ENG, V27, P99, DOI 10.1109/32.908957
   Flanagan C, 2001, ACM SIGPLAN NOTICES, P90
   FLANAGAN C, 2004, LECT NOTES COMPUTER, V3148
   Flanagan C, 2001, LNCS, V2021, P500, DOI DOI 10.1007/3-540-45251-6_29
   Flanagan Cormac B., PLDI 02, P234
   GROSSMAN D, 2003, P ACM SIGPLAN INT WO, P13
   HAMLEN KW, 2005, IN PRESS ACM T PROGR, V27
   HENGLEIN F, 1993, ACM T PROGR LANG SYS, V15, P253, DOI 10.1145/169701.169692
   Hovemeyer David., 2004, ACM Conference on Object-Oriented Programming Systems, Lan-guages, and Applications, OOPSLA '04, P132
   Mosberger D., 1998, Performance Evaluation Review, V26, P31, DOI 10.1145/306225.306235
   NIMMER JW, 2001, P 1 WORKSH RUNT VER
   NIMMER JW, 2002, 10 S FDN SOFTW ENG C, P11
   OCALLAHAN R, 2003, P 9 ACM SIGPLAN S PR, P167
   Pettis K., 1990, SIGPLAN Notices, V25, P16, DOI 10.1145/93548.93550
   Savage S., 2015, P 16 ACM S OP SYST P, P27, DOI [10.1145/268998.266641, DOI 10.1145/268998.266641]
   Schneider F. B., 2000, ACM Transactions on Information and Systems Security, V3, P30, DOI 10.1145/353323.353382
   2002, P 2002 ACM SIGPLAN C
NR 28
TC 6
Z9 9
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC
PY 2005
VL 58
IS 3
SI SI
BP 366
EP 383
DI 10.1016/j.scico.2005.03.003
PG 18
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 986BR
UT WOS:000233424300006
DA 2024-07-18
ER

PT J
AU Shanneb, A
   Potter, J
   Noble, J
AF Shanneb, A
   Potter, J
   Noble, J
TI Exclusion requirements and potential concurrency for composite objects
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT Workshop on Concurrency and Synchronization in Java Programs
CY JUL 25-26, 2004
CL St Johns, CANADA
DE concurrency control; concurrent objects; composite objects;
   component-based systems; locking granularity
AB Concurrent object-oriented systems must prevent the interference that may arise when multiple threads simultaneously access shared components. We present a simple approach for implementing flexible locking strategies in an object-oriented system, in which the components themselves may be composite objects. We express exclusion requirements as sets of conflict pairs on component interfaces. Given knowledge of the dependency between the interface of a composite object and its internal components, we show how external exclusion requirements can be calculated from internal requirements, and further, how any potential concurrent activity outside an object can be projected into potential concurrency for the internal components.
   With our approach we can defer the distribution of locks in the system until deployment: the placement of locks and choice of lock type for a component can depend on its operating environment. A Galois connection between the outward mapping of exclusion requirements, and the inward mapping of potential concurrency, limits how many locks are worth considering. In this paper we only deal with exclusion control, including mutexes, read-write locks and read-write sets, and do not cover state-dependent locking or transaction-based approaches. (c) 2005 Elsevier B.V. All rights reserved.
C1 Univ New S Wales, Sch Comp Sci & Engn, Programming Languages & Compilers Grp, Sydney, NSW, Australia.
   Victoria Univ Wellington, Sch Math & Comp Sci, Wellington, New Zealand.
C3 University of New South Wales Sydney; Victoria University Wellington
RP Univ New S Wales, Sch Comp Sci & Engn, Programming Languages & Compilers Grp, Sydney, NSW, Australia.
EM shanneba@cse.unsw.edu.au; potter@cse.unsw.edu.au; kjx@mcs.vuw.ac.nz
RI Shanneb, Abdelsalam/AAD-7241-2020
OI Noble, James/0000-0001-9036-5692; Shanneb,
   Abdelsalam/0000-0001-9407-8711
CR [Anonymous], 1987, SOFTWARE COMPONENT A
   [Anonymous], 1973, Operating System Principles
   Benton N, 2004, ACM T PROGR LANG SYS, V26, P769, DOI 10.1145/1018203.1018205
   Bergmans L, 1996, J PARALLEL DISTR COM, V36, P32, DOI 10.1006/jpdc.1996.0088
   BIRTWISTLE GM, 1973, SIMULA BEGIN STUDENT
   BOYAPATI C, P 16 ACM C OBJ OR PR, P56
   Briot JP, 1998, ACM COMPUT SURV, V30, P291, DOI 10.1145/292469.292470
   Caromel D, 2004, LECT NOTES COMPUT SC, V3086, P316
   CLARKE D, 2002, P ACM C OBJ OR PROGR, P292
   Clarke D. G., 2001, ECOOP 2001 - Object-Oriented Programming. 15th European Conference. Proceedings (Lecture Notes in Computer Science Vol.2072), P53
   CLARKE DG, 1998, P 13 ACM SIGPLAN C O, P48, DOI DOI 10.1145/286936.286947
   Davey B. A., 2002, INTRO LATTICES ORDER, V2nd, DOI DOI 10.1017/CBO9780511809088
   Fournet C, 2002, LECT NOTES COMPUT SC, V2395, P268
   GAMMA E, 1995, DESIGN PATTERNS
   Greenhouse A, 2002, ICSE 2002: PROCEEDINGS OF THE 24TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P453, DOI 10.1109/ICSE.2002.1007990
   HOARE CAR, 1974, COMMUN ACM, V17, P549, DOI 10.1145/355620.361161
   HOLMES D, 1997, P 25 INT C TECHN OBJ, P2
   ITZSTEIN G, 2002, 7 AS PAC COMP SYST A, P37
   JACOBS B, 2004, 0409 IOW STAT U DEP
   KICZALES G, 1997, LNCS SPRINGER VERLAG
   Lea Doug, 1999, Concurrent Programming in Java. Second Edition: Design Principles and Patterns, V2nd
   Lee SY, 1996, IEEE T KNOWL DATA EN, V8, P144, DOI 10.1109/69.485643
   LOPES CV, 1997, THESIS NE U
   MATSUOKA S., 1993, RES DIRECTIONS CONCU, P107
   NOBLE J, 2000, P C OBJ OR PROGR SYS, P13
   Philippsen M, 2000, CONCURRENCY-PRACT EX, V12, P917, DOI 10.1002/1096-9128(20000825)12:10<917::AID-CPE517>3.0.CO;2-F
   POTTER J, 2004, PODC WORKSHOP CONCUR, P10
   REZ TH, 1995, DEXA 95
   *URL, JSR166 URL
NR 29
TC 3
Z9 3
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC
PY 2005
VL 58
IS 3
SI SI
BP 344
EP 365
DI 10.1016/j.scico.2005.03.004
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 986BR
UT WOS:000233424300005
DA 2024-07-18
ER

PT J
AU Jagannathan, S
   Vitek, J
   Welc, A
   Hosking, A
AF Jagannathan, S
   Vitek, J
   Welc, A
   Hosking, A
TI A transactional object calculus
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE transactions; threads; object calculus; nesting; optimistic concurrency;
   two-phase locking
ID LOCKING
AB A transaction defines a locus of computation that satisfies important concurrency and failure properties. These so-called ACID properties provide strong serialization guarantees that allow us to reason about concurrent and distributed programs in terms of higher-level units of computation (e.g., transactions) rather than lower-level data structures (e.g., mutual-exclusion locks). This paper presents a framework for specifying the semantics of a transactional facility integrated within a host programming language. The TFJ calculus, an object calculus derived from Featherweight Java, supports nested and multi-threaded transactions. We give a semantics to THJ that is parametrized by the definition of the transactional mechanism that permits the study of different transaction models. We give two instantiations: one that defines transactions in terms of a versioning-based optimistic concurrency model, and the other which specifies transactions in terms of a pessimistic two-phase locking protocol, and present soundness and serializability properties for our semantics. (c) 2005 Elsevier B.V. All rights reserved.
C1 Purdue Univ, Dept Comp Sci, W Lafayette, IN 47906 USA.
C3 Purdue University System; Purdue University
RP Purdue Univ, Dept Comp Sci, W Lafayette, IN 47906 USA.
EM suresh@cs.purdue.edu; jv@cs.purdue.edu; welc@cs.purdue.edu;
   hosking@cs.purdue.edu
RI Vitek, Jan/J-9051-2014; Hosking, Antony/G-3618-2012
OI Hosking, Antony/0000-0002-4487-6923
CR ATKINSON MP, 2000, TR200090 SUN MICR LA
   BENTON N, 2002, P 16 EUR C OBJ OR PR, P415
   BLACK A, 2003, 3007 CSE
   BRUNI R, 2002, 13 INT C CONC THEOR
   BUSI N, 2001, CONCOORD INT WORKSH
   CHOTHIA T, 2003, 20033 STEV I TECHN
   CHRYSANTHIS PK, 1994, ACM T DATABASE SYST, V19, P450, DOI 10.1145/185827.185843
   Daynès L, 2001, PROC INT CONF DATA, P163, DOI 10.1109/ICDE.2001.914825
   Daynès L, 2000, SOFTWARE PRACT EXPER, V30, P325, DOI 10.1002/(SICI)1097-024X(20000410)30:4<325::AID-SPE302>3.0.CO;2-Q
   DAYNES L, 2002, P INT C VERY LARG DA
   DETLEFS DL, 1988, IEEE COMPUT, V21, P57
   Eppinger JeffreyL., 1991, Camelot and Avalon: A Distributed Transaction Facility
   ESWARAN KP, 1976, COMMUN ACM, V19, P624, DOI 10.1145/360363.360369
   GARTHWAITE A, 1996, P 1 INT WORKSH PERS, P6
   GRAY J, 1993, DATA MANAGEMENT SYST
   HAINES N, 1994, ACM T PROGR LANG SYS, V16, P1719, DOI 10.1145/197320.197346
   Igarashi A, 2001, ACM T PROGR LANG SYS, V23, P396, DOI 10.1145/503502.503505
   Lipton R.J., 1975, POPL, P78
   LISKOV B, 1983, ACM T PROGR LANG SYS, V5, P381, DOI 10.1145/2166.357215
   LYNCH N, 1994, ATOMIC T
   MATSUOKA S., 1993, RES DIRECTIONS CONCU, P107
   Moss J.E., 1985, NESTED T APPROACH RE
   QADEER S, 2004, P 31 ACM SIGPLAN SIG, P24
   VITEK J, 2004, P EUR S PROGR, P246
NR 24
TC 29
Z9 33
U1 0
U2 0
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD AUG
PY 2005
VL 57
IS 2
BP 164
EP 186
DI 10.1016/j.scico.2005.03.001
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 949PY
UT WOS:000230801800002
DA 2024-07-18
ER

PT J
AU Erwig, M
   Ren, DL
AF Erwig, M
   Ren, DL
TI Monadification of functional programs
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
AB The structure of monadic functional programs allows the integration of many different features by just changing the definition of the monad and not the rest of the program, which is a desirable feature from a software engineering and software maintenance point of view. We describe an algorithm for the automatic transformation of a group of functions into such a monadic form. We identify two correctness criteria and argue that the proposed transformation is at least correct in the sense that transformed programs yield the same results as the original programs modulo monad constructors.
   The translation of a set of functions into monadic form is in most cases only a first step toward an extension of a program by adding new features. The extended behavior can be realized by choosing an appropriate monad type and by inserting monadic actions into the functions that have been transformed into monadic form. We demonstrate an approach to the integration of monadic actions that is based on the idea of specifying context-dependent rewritings. (C) 2004 Elsevier B.V. All rights reserved.
C1 Oregon State Univ, Sch EECS, Corvallis, OR 97331 USA.
C3 Oregon State University
RP Erwig, M (corresponding author), Oregon State Univ, Sch EECS, Corvallis, OR 97331 USA.
EM erwig@cs.orst.edu
CR [Anonymous], 2003, Haskell 98 language and libraries: the revised report
   Bird R., 1998, INTRO FUNCTIONAL PRO, V2nd
   Erwig M, 2003, LECT NOTES COMPUT SC, V2618, P269
   ERWIG M, 2002, 3 ACM SIGPLAN WORKSH, P67
   FLANAGAN C, 1993, ACM C PROGR LANG DES, P237
   Fowler M., 2018, Refactoring: Improving the Design of Existing Code
   HATCLIFF J, 1994, 21ST P ANN ACM S PRI, P458
   HUGHES J, 1995, LNCS, V925, P53
   Jones S. Peyton, 2001, ENG THEORIES SOFTWAR, P47
   Lämmel R, 2003, LECT NOTES COMPUT SC, V2562, P357
   Lammel R., 2000, FUNCTIONAL PROGRAMMI
   LI H, 2003, ACM SIGPLAN HASK WOR
   LIANG S, 1995, 22 ACM SIGPLAN SIGAC, P333
   MACLANE S, 1971, CATEGORIES WORKING
   MOGGI E, 1991, INFORMATION COMPUTAT, V93
   REPPY J, 2001, 3 ACM WORKSH CONT
   Wadler P, 1997, ACM COMPUT SURV, V29, P240, DOI 10.1145/262009.262011
   WADLER P, 1995, LNCS, V925, P24
   WADLER P, 1992, 19 ANN ACM SIGPLAN S, P1
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
NR 20
TC 7
Z9 7
U1 0
U2 3
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD AUG
PY 2004
VL 52
IS 1-3
BP 101
EP 129
DI 10.1016/j.scico.2004.03.004
PG 29
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 841OS
UT WOS:000222940800004
DA 2024-07-18
ER

PT J
AU Mauborgne, L
AF Mauborgne, L
TI Infinitary relations and their representation
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 6th International Symposium on Static Analysis
CY SEP 22-24, 1999
CL VENICE, ITALY
SP EALPS, ALP, CNR, Compulog, Ca Foscari Univ, Padova Univ
DE BDD; infinite functions; model checking; static analysis
AB This papers presents extensions of Binary Decision Diagrams (BDDs) to represent some infinitary relations (coded as infinite boolean functions). Four classes of infinitary relations are presented, and their representations are discussed. The widest class is closed under all boolean operations. The three others give rise to a canonical representation, which, when restricted to finite relations, are the classical BDDs. The paper also gives new insights in to the notion of variables and the possibility of sharing variables that can be of interest in the case of finite relations. (C) 2003 Elsevier Science B.V. All rights reserved.
C1 Ecole Normale Super, DI, F-75230 Paris 05, France.
C3 Universite PSL; Ecole Normale Superieure (ENS)
RP Mauborgne, L (corresponding author), Ecole Normale Super, DI, 45 Rue Ulm, F-75230 Paris 05, France.
EM laurent.mauborgne@ens.fr
CR Anuchitanukul A, 1995, LECT NOTES COMPUT SC, V1000, P218
   BAGNARA R, 1996, 8 INT S PROGR LANG I, V1140, P107
   BILLON JP, 1987, PERFECT NORMAL FORM
   BRYANT RE, 1986, IEEE T COMPUT, V35, P677, DOI 10.1109/TC.1986.1676819
   BRYANT RE, 1992, COMPUT SURV, V24, P293, DOI 10.1145/136035.136043
   BUCHI JR, 1960, INT C LOG METH PHIL
   BURCH JR, 1990, 5 ANN S LOG COMP SC
   CORSINI MM, 1992, WORKSH STAT AN
   COUSOT, 1978, THESIS U GRENOBLE
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   FUJITA M, 1988, INT C COMP AID DES N, P3
   Gupta A., 1993, LNCS, V697, P15
   JEONG SW, 1991, IEEE INT C COMPUTER, P476
   LECHARLIER B, 1993, PEPM 93 COP DENM
   MADRE JC, 1991, 12 INT JOINT C ART I, P294
   MANNA Z, 1989, LECT NOTES COMPUT SC, V354, P201, DOI 10.1007/BFb0013024
   Mauborgne L., 2000, Nordic Journal of Computing, V7, P290
   Mauborgne L, 2000, LECT NOTES COMPUT SC, V1824, P302
   Mauborgne L, 2000, LECT NOTES COMPUT SC, V1782, P275
   Mauborgne L, 1998, SCI COMPUT PROGRAM, V31, P91, DOI 10.1016/S0167-6423(96)00042-1
   MAUBORGNE L, 1999, THESIS ECOLE POLYTEC
   MICHIE D, 1968, NATURE, V218, P19, DOI 10.1038/218019a0
   SISTLA AP, 1985, 1I INT C AUT LANG PR
   Srinivasan Arvind., 1990, IEEE International Conference on Computer-Aided Design, P92
NR 24
TC 1
Z9 1
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAY-JUN
PY 2003
VL 47
IS 2-3
BP 121
EP 144
AR PII S0167-6423(02)00130-2
DI 10.1016/S0167-6423(02)00130-2
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 664CQ
UT WOS:000182044500003
DA 2024-07-18
ER

PT J
AU Mu, XY
   Liu, L
   Zhang, P
   Li, JY
   Li, H
AF Mu, Xiangyu
   Liu, Lei
   Zhang, Peng
   Li, Jingyao
   Li, Hui
TI A method of test case set generation in the commutativity test of reduce
   functions
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE MapReduce; Test case set generation; Commutativity detect; Reducer
ID MODEL
AB MapReduce framework has become one of the more popular big data processing frameworks. In the MapReduce framework, the test of the commutativity problem of the reduce function may take a lot of time and space. The aim of this study is to reduce the size of the test case set required to detect the commutativity problem of the reduce function when the initial test cases are available. With the initial test case as input, this method will determine the pattern of the function according to the information when the function is running, and select the corresponding test case according to the characteristics of each pattern to generate the subsequent test case set. Experiments on 170 reduce functions can verify that the test case set generated by our method is effective when testing the commutativity of reduce functions. And compared with the existing test case generation strategy, our method can have a smaller test case set to achieve the same accuracy. When detecting the commutativity of reduce functions, the test case set generation strategy we proposed can detect the commutativity of functions with a smaller test scale, and has a high recall.& COPY; 2023 Elsevier B.V. All rights reserved.
C1 [Mu, Xiangyu; Liu, Lei; Zhang, Peng; Li, Jingyao] Jilin Univ, Coll Comp Sci & Technol, Jilin, Peoples R China.
   [Mu, Xiangyu; Zhang, Peng; Li, Hui] Jilin Univ, Key Lab Symbol Computat & Knowledge Engn, Jilin, Peoples R China.
C3 Jilin University; Jilin University
RP Zhang, P (corresponding author), Jilin Univ, Coll Comp Sci & Technol, Jilin, Peoples R China.
EM zhangpengccst@jlu.edu.cn
RI lei, liu/HTR-5486-2023; Li, Jingyao/HGU-7197-2022
FU National Natural Science Foundation of China(NSFC) [62102160]; Jilin
   Provincial Natural Science Foundation [20230101070JC]; Fundamental
   Research Funds for the Central Universities
FX The work is funded by the National Natural Science Foundation of
   China(NSFC) No.62102160, Jilin Provincial Natural Science Foundation,
   20230101070JC and Fundamental Research Funds for the Central
   Universities, JLU.
CR Chen YF, 2016, LECT NOTES COMPUT SC, V9780, P91, DOI 10.1007/978-3-319-41540-6_6
   Chen YF, 2015, LECT NOTES COMPUT SC, V9206, P658, DOI 10.1007/978-3-319-21690-4_44
   Csallner C., 2011, SIGSOFT FSE 11 19 AC, P504
   Dean J, 2004, USENIX ASSOCIATION PROCEEDINGS OF THE SIXTH SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION (OSDE '04), P137
   Dinn A, 2011, AOSD 2011 PROCEEDINGS AND COMPANION MATERIAL, P41
   Ekanayake J., 2010, Proc. the 19th ACM International Symposium on High Performance Distributed Computing (HDPC'10), P810, DOI DOI 10.1145/1851476.1851593
   FOSDICK LD, 1976, COMPUT SURV, V8, P305, DOI 10.1145/356674.356676
   Issa JA, 2015, IEEE ACCESS, V3, P2784, DOI 10.1109/ACCESS.2015.2509598
   Karloff H, 2010, PROC APPL MATH, V135, P938
   KING JC, 1976, COMMUN ACM, V19, P385, DOI 10.1145/360248.360252
   Li-Yung Ho, 2011, Proceedings of the 2011 IEEE 4th International Conference on Cloud Computing (CLOUD 2011), P420, DOI 10.1109/CLOUD.2011.17
   Liu C., 2014, 2014 IEEE TRANSP EL, P1
   Martins R, 2015, J EXP THEOR ARTIF IN, V27, P673, DOI 10.1080/0952813X.2014.993508
   Moran J., 2015, P 6 INT WORKSH AUT T, P20
   Shi A, 2016, IEEE INT CONF SOFTW, P80, DOI 10.1109/ICST.2016.40
   Song J, 2018, J GRID COMPUT, V16, P409, DOI 10.1007/s10723-016-9370-2
   Wang Y, 2015, PROCEEDINGS OF THE 27TH INTERNATIONAL CONFERENCE ON SCIENTIFIC AND STATISTICAL DATABASE MANAGEMENT, DOI 10.1145/2791347.2791349
   Xiao T, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE COMPANION 2014), P44, DOI 10.1145/2591062.2591177
   Xu ZH, 2013, I S WORKL CHAR PROC, P87, DOI 10.1109/IISWC.2013.6704673
   [杨东华 Yang Donghua], 2016, [计算机学报, Chinese Journal of Computers], V39, P97
   Yu-Fang Chen, 2017, Networked Systems. 5th International Conference, NETYS 2017. Proceedings: LNCS 10299, P421, DOI 10.1007/978-3-319-59647-1_31
   Yu-Fang Chen, 2015, Tools and Algorithms for the Construction and Analysis of Systems. 21st International Conference, TACAS 2015, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2015. Proceedings: LNCS 9035, P131, DOI 10.1007/978-3-662-46681-0_9
NR 22
TC 0
Z9 0
U1 2
U2 8
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN
PY 2024
VL 231
AR 103006
DI 10.1016/j.scico.2023.103006
EA AUG 2023
PG 25
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA R9IS4
UT WOS:001067422100001
DA 2024-07-18
ER

PT J
AU Sepahvand, R
   Akbari, R
   Jamasb, B
   Hashemi, S
   Boushehrian, O
AF Sepahvand, Reza
   Akbari, Reza
   Jamasb, Behnaz
   Hashemi, Sattar
   Boushehrian, Omid
TI Using word embedding and convolution neural network for bug triaging by
   considering design flaws
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Bug triage; Convolution neural network; Word embedding; Design flaw
   prediction; Code smell
ID CODE SMELL DETECTION; BORDERLINE-SMOTE; LOCALIZATION; METRICS; IMPACT;
   BAD
AB Resolving bugs in the maintenance phase of software is a complicated task. Bug assignment is one of the main tasks for resolving bugs. Some Bugs cannot be fixed properly without making design decisions and have to be assigned to designers to avoid emerging bad smells that may cause subsequent bug reports. Hence, it is important to refer some bugs to the designer to check the possible design flaws. Based on our best knowledge, no work has considered referring bugs to designers. This issue is considered in this work. In this paper, a dataset is created, and a CNN-based model is proposed to predict the need for assigning a bug to a designer by learning the peculiarities of bug reports effective in creating bad smells in the code. The features of each bug are extracted from CNN based on its textual features, such as a summary and description. The number of bad samples added to it in the fixing process using the PMD tool determines the bug tag. The summary and description of the new bug are given to the model and the model predicts the need to refer to the designer to review the design. An accuracy of 75% (or more) was achieved for datasets with a sufficient number of samples for deep learning-based model training. A model is proposed to predict bug referrals to the designer. The efficiency of the model in predicting referrals to the designer at the time of receiving the bug report was demonstrated by testing the model on 10 projects.
C1 [Sepahvand, Reza; Akbari, Reza; Jamasb, Behnaz; Boushehrian, Omid] Shiraz Univ Technol, Dept Comp Engn & IT, Sotware Engn Lab, Shiraz, Iran.
   [Hashemi, Sattar] Shiraz Univ, Dept Comp Sci Engn & IT, Shiraz, Iran.
C3 Shiraz University of Technology; Shiraz University
RP Akbari, R (corresponding author), Shiraz Univ Technol, Dept Comp Engn & IT, Sotware Engn Lab, Shiraz, Iran.
EM akbari@sutech.ac.ir
RI Akbari, Reza/J-8937-2015
OI Akbari, Reza/0000-0001-6491-7908
CR Abbes M, 2011, EUR CON SFTWR MTNCE, P181, DOI 10.1109/CSMR.2011.24
   Agnihotri M, 2020, J INF PROCESS SYST, V16, P915
   Al Majzoub H, 2020, ARAB J SCI ENG, V45, P3205, DOI 10.1007/s13369-019-04336-1
   [Anonymous], 2003, ADV SOFTWARE MAINTEN
   Anvik J., P 28 INT C SOFTWARE
   Azeem MI, 2019, INFORM SOFTWARE TECH, V108, P115, DOI 10.1016/j.infsof.2018.12.009
   Brown WH., 1998, AntiPatterns: refactoring software, architectures, and projects in crisis
   Cairo AS, 2018, INFORMATION, V9, DOI 10.3390/info9110273
   Chawla NV, 2002, J ARTIF INTELL RES, V16, P321, DOI 10.1613/jair.953
   CHIDAMBER SR, 1994, IEEE T SOFTWARE ENG, V20, P476, DOI 10.1109/32.295895
   Cubranic D., 2004, P 16 INT C SOFTW SEK
   D'Ambros Marco, 2010, Proceedings of the Tenth International Conference on Quality Software (QSIC 2010), P23, DOI 10.1109/QSIC.2010.58
   Dewangan S, 2022, APPL SCI-BASEL, V12, DOI 10.3390/app122010321
   Ferenc R, 2020, SOFTWARE QUAL J, V28, P1447, DOI 10.1007/s11219-020-09515-0
   Fontana FA, 2013, PROC IEEE INT CONF S, P396, DOI 10.1109/ICSM.2013.56
   Fowler M., 1999, Refactoring: Improving the Design of Existing Code
   Gharibi R, 2018, INFORM PROCESS MANAG, V54, P1058, DOI 10.1016/j.ipm.2018.07.004
   Gosain A, 2019, ADV INTELL SYST COMP, V711, P309, DOI 10.1007/978-981-10-8055-5_28
   Habayeb M, 2018, IEEE T SOFTWARE ENG, V44, P1224, DOI 10.1109/TSE.2017.2757480
   Han H, 2005, LECT NOTES COMPUT SC, V3644, P878, DOI 10.1007/11538059_91
   He HB, 2008, IEEE IJCNN, P1322, DOI 10.1109/IJCNN.2008.4633969
   Huo X, 2021, IEEE T SOFTWARE ENG, V47, P1368, DOI 10.1109/TSE.2019.2920771
   Ibrahim Z.M., 2019, ADV INTELL SYST, V1043
   Iglesias EL, 2013, EXPERT SYST APPL, V40, P7184, DOI 10.1016/j.eswa.2013.07.036
   Jorgensen M, 2007, IEEE T SOFTWARE ENG, V33, P33, DOI 10.1109/TSE.2007.256943
   Kessentini W, 2014, IEEE T SOFTWARE ENG, V40, P841, DOI 10.1109/TSE.2014.2331057
   Khomh F, 2012, EMPIR SOFTW ENG, V17, P243, DOI 10.1007/s10664-011-9171-y
   Khomh F, 2009, WORK CONF REVERSE EN, P75, DOI 10.1109/WCRE.2009.28
   KRUSKAL WH, 1952, J AM STAT ASSOC, V47, P583, DOI 10.1080/01621459.1952.10483441
   Liang XW, 2020, KNOWL-BASED SYST, V196, DOI 10.1016/j.knosys.2020.105845
   Ling Charles X., 1998, KDD 98
   Lozano Angelo., 2007, Ninth International Workshop on Principles of software evolution, P31
   Nascimento Rogeres, 2017, P 11 BRAZ S SOFTW CO, P1
   Palomba F, 2014, PROC IEEE INT CONF S, P101, DOI 10.1109/ICSME.2014.32
   Palomba F, 2013, IEEE INT CONF AUTOM, P268, DOI 10.1109/ASE.2013.6693086
   Pecorelli F, 2021, SCI COMPUT PROGRAM, V205, DOI 10.1016/j.scico.2021.102611
   Pham Van, 2020, EASE2020. Proceedings of the Evaluation and Assessment in Software Engineering, P230, DOI 10.1145/3383219.3383243
   Piotrowski P., 2020, LECT NOTES DATA ENG, V40
   Ran M., 2022, INFORM SOFTWARE TECH, V144
   Rath M., 2018 44 EUR C SOFTW
   Rath M, 2018, IEEE WORK CONF MIN S, P442, DOI 10.1145/3196398.3196415
   Ratiu D, 2004, CSMR 2004: EIGHTH EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, PROCEEDINGS, P223
   Ruan H, 2019, J SYST SOFTWARE, V158, DOI 10.1016/j.jss.2019.110406
   Sepahvand R., 2020, IET SOFTW
   Sharanpreet K., 2015, INT J COMPUT APPL, P0975
   Shorten C, 2019, J BIG DATA-GER, V6, DOI 10.1186/s40537-019-0197-0
   Sjoberg DIK, 2013, IEEE T SOFTWARE ENG, V39, P1144, DOI 10.1109/TSE.2012.89
   Tufano M, 2017, IEEE T SOFTWARE ENG, V43, P1063, DOI 10.1109/TSE.2017.2653105
   Tufano M, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 1, P403, DOI 10.1109/ICSE.2015.59
   Xi SQ, 2019, J COMPUT SCI TECH-CH, V34, P942, DOI 10.1007/s11390-019-1953-5
   Xiao Y, 2019, INFORM SOFTWARE TECH, V105, P17, DOI 10.1016/j.infsof.2018.08.002
   Xu ZW, 2018, SCI COMPUT PROGRAM, V162, P93, DOI 10.1016/j.scico.2017.06.010
   Yamashita A, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P682, DOI 10.1109/ICSE.2013.6606614
   Yamashita A, 2013, WORK CONF REVERSE EN, P242, DOI 10.1109/WCRE.2013.6671299
   Yamashita A, 2012, 2012 28TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE (ICSM), P306, DOI 10.1109/ICSM.2012.6405287
   Zaidi SFA, 2022, IEEE ACCESS, V10, P20677, DOI 10.1109/ACCESS.2022.3153075
   Zaidi SFA, 2021, 35TH INTERNATIONAL CONFERENCE ON INFORMATION NETWORKING (ICOIN 2021), P504, DOI 10.1109/ICOIN50884.2021.9333902
   Zaidi SFA, 2020, IEEE ACCESS, V8, P213729, DOI 10.1109/ACCESS.2020.3040065
   Zhang XF, 2017, 2017 ANNUAL CONFERENCE ON SOFTWARE ANALYSIS, TESTING AND EVOLUTION (SATE 2017), P1, DOI 10.1109/SATE.2017.9
   Zhou J, 2012, PROC INT CONF SOFTW, P14, DOI 10.1109/ICSE.2012.6227210
NR 60
TC 2
Z9 2
U1 3
U2 5
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN
PY 2023
VL 228
AR 102945
DI 10.1016/j.scico.2023.102945
EA MAR 2023
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA E1WB7
UT WOS:000973511200001
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Decan, A
   Mens, T
AF Decan, Alexandre
   Mens, Tom
TI Lost in zero space - An empirical comparison of 0.y.z releases in
   software package distributions
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Software package distribution; Software library; Version management;
   Semantic versioning; Software health
AB Distributions of open source software packages dedicated to specific programming languages facilitate software development by allowing software projects to depend on the functionality provided by such reusable packages. The health of a software project can be affected by the maturity of the packages on which it depends. The version numbers of the used package releases provide an indication of their maturity. Packages with a 0.y.z version number are commonly assumed to be under initial development, suggesting that they are likely to be less stable, and depending on them may be considered as less healthy.
   In this paper, we empirically study, for four open source package distributions (Cargo, npm, Packagist and RubyGems) to which extent 0.y.z package releases and >= 1.0.0 package releases behave differently. We quantify the prevalence of 0.y.z releases, we explore how long packages remain in the initial development stage, we compare the update frequency of 0.y.z and >= 1.0.0 package releases, we study how often 0.y.z releases are required by other packages, we assess whether semantic versioning is respected for dependencies towards them, and we compare some characteristics of 0.y.z and >= 1.0.0 package repositories hosted on GitHub. Among others, we observe that package distributions are more permissive than what semantic versioning dictates for 0.y.z releases, and that many of the 0.y.z releases can actually be regarded as mature packages. As a consequence, the version number does not provide a good indication of the maturity of a package release. (C) 2021 Elsevier B.V. All rights reserved.
C1 [Decan, Alexandre; Mens, Tom] Univ Mons, Software Engn Lab, Ave Maistriau 15, B-7000 Mons, Belgium.
C3 University of Mons
RP Decan, A (corresponding author), Univ Mons, Software Engn Lab, Ave Maistriau 15, B-7000 Mons, Belgium.
EM alexandre.decan@umons.ac.be; tom.mens@umons.ac.be
FU Fonds De La Recherche ScientifiqueFNRS [T.0017.18, O.0157.18FRG43,
   J.0151.20]
FX This work was supported by the Fonds De La Recherche ScientifiqueFNRS
   under Grants number T.0017.18, O.0157.18FRG43 and J.0151.20.
CR Aalen OO, 2008, STAT BIOL HEALTH, P1
   [Anonymous], 2008, Software Evolution, DOI [10.1007/978-3-540-76440-311, DOI 10.1007/978-3-540-76440-311]
   [Anonymous], 2007, Ninth International Workshop on Principles of Software Evolution in Conjunction with the 6th ESEC/FSE Joint Meeting-IWPSE'07
   [Anonymous], **DATA OBJECT**, DOI DOI 10.5281/ZENODO.2536573
   Bogart C., 2017, VALUES PRACTICES 18
   Bogart C, 2016, FSE'16: PROCEEDINGS OF THE 2016 24TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON FOUNDATIONS OF SOFTWARE ENGINEERING, P109, DOI 10.1145/2950290.2950325
   CLIFF N, 1993, PSYCHOL BULL, V114, P494, DOI 10.1037/0033-2909.114.3.494
   Costa J, 2018, SBES'18: PROCEEDINGS OF THE XXXII BRAZILIAN SYMPOSIUM ON SOFTWARE ENGINEERING, P202, DOI 10.1145/3266237.3266243
   Decan A., 2020, ICSE WORKSH SOFTW HL
   Decan A., 2018, PORTION PYTHON DATA
   Decan A, 2021, IEEE T SOFTWARE ENG, V47, P1226, DOI 10.1109/TSE.2019.2918315
   Decan A, 2019, EMPIR SOFTW ENG, V24, P381, DOI 10.1007/s10664-017-9589-y
   Decan A, 2017, 2017 IEEE 24TH INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER), P2, DOI 10.1109/SANER.2017.7884604
   Hofmann H, 2017, J COMPUT GRAPH STAT, V26, P469, DOI 10.1080/10618600.2017.1305277
   HOLM S, 1979, SCAND J STAT, V6, P65
   Kahn J., 2013, FEAR 1 0 0
   KAPLAN EL, 1958, J AM STAT ASSOC, V53, P457, DOI 10.2307/2281868
   MANN HB, 1947, ANN MATH STAT, V18, P50, DOI 10.1214/aoms/1177730491
   Preston-Werner Tom., 2013, Semantic Versioning 2.0.0
   Raemaekers S, 2017, J SYST SOFTWARE, V129, P140, DOI 10.1016/j.jss.2016.04.008
   Rajlich VT, 2000, COMPUTER, V33, P66, DOI 10.1109/2.869374
   Romano J., 2006, P ANN M SO ASS I RES
   Stuckenholz A., 2005, ACM SIGSOFT Software Engineering Notes, V30, DOI DOI 10.1145/1039174.1039197
   Wittern E, 2016, 13TH WORKING CONFERENCE ON MINING SOFTWARE REPOSITORIES (MSR 2016), P351, DOI [10.1145/2901739.2901743, 10.1109/MSR.2016.043]
   Wohlin C., 2012, Experimentation in Software Engineering
NR 25
TC 3
Z9 3
U1 1
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD AUG 1
PY 2021
VL 208
AR 102656
DI 10.1016/j.scico.2021.102656
EA APR 2021
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA SF6EZ
UT WOS:000652847700006
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Carvalho, G
   Meira, I
AF Carvalho, Gustavo
   Meira, Igor
TI Validating, verifying and testing timed data-flow reactive systems in
   Coq from controlled natural-language requirements
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Timed data-flow reactive system; Interactive theorem proving;
   Property-based testing; Controlled natural language
ID GENERATION
AB Data-flow reactive systems (DFRSs) form a class of embedded systems whose inputs and outputs are always available as signals. Input signals can be seen as data provided by sensors, whereas the output data are provided to system actuators. In previous works, verifying well-formedness properties of DFRS models was accomplished in a programmatic way, with no formal guarantees, and test cases were generated by translating these models into other notations. Here, we use Coq as a single framework to specify, validate and verify DFRS models. Moreover, the specification of DFRSs in Coq is automatically derived from controlled natural-language requirements, and well-formedness properties are formally verified with no user intervention. System validation is supported by bounded exploration of models; general and domain-specific system property verification is supported by the development of proof scripts, and test generation is achieved with the aid of the QuickChick tool. Considering examples from the literature, but also from the aerospace (Embraer) and the automotive (Mercedes) industries, our automatic testing strategy was evaluated in terms of performance and the ability to detect defects generated by mutation. Within seconds, test cases were generated automatically from the requirements, achieving an average mutation score of about 75%. (C) 2020 Elsevier B.V. All rights reserved.
C1 [Carvalho, Gustavo; Meira, Igor] Univ Fed Pernambuco, Ctr Informat, BR-50740560 Recife, PE, Brazil.
C3 Universidade Federal de Pernambuco
RP Carvalho, G (corresponding author), Univ Fed Pernambuco, Ctr Informat, BR-50740560 Recife, PE, Brazil.
EM ghpc@cin.ufpe.br; iam2@cin.ufpe.br
OI Carvalho, Gustavo/0000-0002-3700-9709
FU Coordenacao de Aperfeicoamento de Pessoal de Nivel Superior, Brasil
   (CAPES) [001]; Centro de Informatica (CIn) at Universidade Federal de
   Pernambuco (UFPE)
FX This study was financed in part by the Coordenacao de Aperfeicoamento de
   Pessoal de Nivel Superior, Brasil (CAPES) Finance Code 001. It has also
   been partially supported by Centro de Informatica (CIn) at Universidade
   Federal de Pernambuco (UFPE).
CR Ahrendt W., 2016, PROOF BASED TEST CAS, P415
   Ammann P., 2016, INTRO SOFTWARE TESTI, DOI [10.1017/9781316771273, DOI 10.1017/9781316771273]
   Andrews JH, 2005, PROC INT CONF SOFTW, P402, DOI 10.1145/1062455.1062530
   [Anonymous], 1986, Efficient parsing for natural language
   Barros F.A., 2011, SEKE 2011 P 23 INT C, P250
   Barza Sergio, 2016, Formal Methods: Foundations and Applications. 19th Brazilian Symposium, SBMF 2016. Proceedings: LNCS 10090, P217, DOI 10.1007/978-3-319-49815-7_13
   Berghofer S, 2004, PROCEEDINGS OF THE SECOND INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING AND FORMAL METHODS, P230, DOI 10.1109/SEFM.2004.1347524
   Bertot Y., 2010, INTERACTIVE THEOREM
   Brucker AD, 2016, LECT NOTES COMPUT SC, V9593, P40, DOI 10.1007/978-3-319-29613-5_3
   Brucker AD, 2013, FORM ASP COMPUT, V25, P683, DOI 10.1007/s00165-012-0222-y
   Brucker AD, 2009, LECT NOTES COMPUT SC, V5503, P417
   Carvalho G., 2013, P INT C FORM ENG MET
   Carvalho G., 2013, INT WORKSH FORM METH
   Carvalho G, 2016, FORM ASP COMPUT, V28, P725, DOI 10.1007/s00165-016-0387-x
   Carvalho G, 2015, LECT NOTES COMPUT SC, V9276, P283, DOI 10.1007/978-3-319-22969-0_20
   Carvalho G, 2014, SCI COMPUT PROGRAM, V95, P275, DOI 10.1016/j.scico.2014.06.007
   Cimatti A., 2000, Int. J. Softw. Tools for Technol. Transf. (STTT), V2, P410, DOI [DOI 10.1007/S100090050046, 10.1007/s100090050046]
   Claessen K, 2000, ACM SIGPLAN NOTICES, V35, P268, DOI 10.1145/357766.351266
   Cofer D, 2014, LECT NOTES COMPUT SC, V8430, P1, DOI 10.1007/978-3-319-06200-6_1
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   DURAN JW, 1984, IEEE T SOFTWARE ENG, V10, P438, DOI 10.1109/TSE.1984.5010257
   ESSER M.W., 2007, INT WORKSHOP PRINCIP, P75
   F.A.A. Requirements, 2009, REQUIREMENTS ENG MAN
   Feliachi A, 2013, LECT NOTES COMPUT SC, V8144, P131, DOI 10.1007/978-3-642-41202-8_10
   Fillmore C.J., 1968, UNIVERSALS LINGUIST, P1, DOI DOI 10.4236/ENG
   Gaudel MC, 1995, LECT NOTES COMPUT SC, V915, P82
   Gibson-Robinson T., 2014, Lecture Notes in Computer Science, V8413, P187
   HAMLET D, 1990, IEEE T SOFTWARE ENG, V16, P1402, DOI 10.1109/32.62448
   Hariri F, 2018, IEEE INT CONF AUTOM, P860, DOI 10.1145/3238147.3240482
   Heninger K., 1978, TECH REP
   Hong WJ, 2018, LECT NOTES COMPUT SC, V10729, P558, DOI 10.1007/978-3-319-74781-1_37
   Jensen K, 2009, COLOURED PETRI NETS: MODELLING AND VALIDATION OF CONCURRENT SYSTEMS, P1, DOI 10.1007/b95112
   Larsen KG, 2005, LECT NOTES COMPUT SC, V3395, P79
   Leonard E. I., 2003, Higher-Order and Symbolic Computation, V16, P63, DOI 10.1023/A:1023072104553
   Miller SP, 2010, COMMUN ACM, V53, P58, DOI 10.1145/1646353.1646372
   Nipkow Tobias, 2002, ISABELLE HOL PROOF A
   Nogueira S, 2014, FORM ASP COMPUT, V26, P441, DOI 10.1007/s00165-012-0258-z
   Oliveira B, 2017, IEEE INT CON AUTO SC, P1320, DOI 10.1109/COASE.2017.8256284
   Paulin-Mohring C., 2001, THEORETICAL ASPECTS, P298
   Roscoe AW, 2010, TEXTS COMPUT SCI, P3, DOI 10.1007/978-1-84882-258-0_1
   Santos T., 2018, FORMAL METHODS FDN A, P252
   Silva BCE, 2019, SCI COMPUT PROGRAM, V181, P111, DOI 10.1016/j.scico.2019.04.001
   Sinha Avik, 2010, Proceedings of the Third IEEE International Conference on Software Testing, Verification and Validation (ICST 2010), P155, DOI 10.1109/ICST.2010.19
   Somé SS, 2006, INFORM SOFTWARE TECH, V48, P43, DOI 10.1016/j.infsof.2005.02.006
   Taha W, 2016, L N INST COMP SCI SO, V169, P118, DOI 10.1007/978-3-319-47063-4_11
   Wan H, 2009, P INT COMP SOFTW APP, P315, DOI 10.1109/COMPSAC.2009.49
   Wimmer S, 2018, LECT NOTES COMPUT SC, V10805, P61, DOI 10.1007/978-3-319-89960-2_4
   Yue T, 2011, LECT NOTES COMPUT SC, V6698, P115, DOI 10.1007/978-3-642-21470-7_9
   Zahlten C., 2011, TECH REP
NR 49
TC 1
Z9 1
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 1
PY 2021
VL 201
AR 102537
DI 10.1016/j.scico.2020.102537
PG 29
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA OS0ZN
UT WOS:000589893400004
OA Green Published
DA 2024-07-18
ER

PT J
AU Ugliara, FA
   Vieira, GMD
   Guimaraes, JD
AF Ugliara, Fellipe A.
   Vieira, Gustavo M. D.
   Guimaraes, Jose de O.
TI Transparent replication using metaprogramming in Cyan
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 21st Brazilian Symposium on Programming Languages (SBLP) as Part of 8th
   Brazilian Conference on Software (CBSoft)
CY SEP 21-22, 2017
CL Fortaleza, BRAZIL
SP Google, Mob Telecom
DE Replication; Metaprogramming; Code generation
AB Replication can be used to increase the availability of a service by creating many operational copies of its data called replicas. Active replication is a form of replication that has strong consistency semantics, which are easier to reason about and program. However, creating replicated services using active replication still demands from the programmer the knowledge of subtleties of the replication mechanism. In this paper we show how to use the metaprogramming infrastructure of the Cyan language to shield the application programmer from these details, allowing easier creation of fault-tolerant replicated applications through simple annotations. (C) 2020 Elsevier B.V. All rights reserved.
C1 [Ugliara, Fellipe A.; Vieira, Gustavo M. D.; Guimaraes, Jose de O.] DComp CCGT UFSCar, Sorocaba, Brazil.
RP Vieira, GMD (corresponding author), DComp CCGT UFSCar, Sorocaba, Brazil.
EM ugliara.fellipe@gmail.com; gdvieira@ufscar.br; jose@ufscar.br
RI Maciel Dias Vieira, Gustavo/F-7509-2012
OI Maciel Dias Vieira, Gustavo/0000-0002-9209-7764
FU Sao Paulo Research Foundation (FAPESP) [2014/01817-3]; FIT Instituto de
   Tecnologia
FX This work was supported by the Sao Paulo Research Foundation (FAPESP)
   under grant #2014/01817-3 and by FIT Instituto de Tecnologia.
CR Altinbuken D., 2012, TECH REP
   [Anonymous], 2014, The Java Language Specification, Java SE
   [Anonymous], 1987, Concurrency Control and Recovery in Database Systems
   Blaschek Gunther, 1994, OBJECT ORIENTED PROG
   Blewitt A., 2005, INT C AUTOMATED SOFT, P224
   Burrows M, 2006, USENIX ASSOCIATION 7TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P335
   Chlipala A, 2013, ACM SIGPLAN NOTICES, V48, P391, DOI [10.1145/2544174.2500592, 10.1145/2500365.2500592]
   Dagum L, 1998, IEEE COMPUT SCI ENG, V5, P46, DOI 10.1109/99.660313
   Damasevicius R, 2008, INF TECHNOL CONTROL, V37, P124
   Eder J., 1994, TECH REP
   Goldberg A., 1983, Smalltalk 80: The Language and Its Implementation
   Gray J., 1996, SIGMOD Record, V25, P173, DOI 10.1145/235968.233330
   Guimaraes J.d.O., 2019, TECH REP
   Kiczales Gregor., 2001, Proceedings of the 15th European Conference on Object-Oriented Programming, P327
   Klabnik S., 2018, The Rust Programming Language
   Lamport L, 2006, DISTRIB COMPUT, V19, P79, DOI 10.1007/s00446-006-0005-x
   Lilis Y, 2020, ACM COMPUT SURV, V52, DOI 10.1145/3354584
   Markstrum S, 2010, ACM T PROGR LANG SYS, V32, DOI 10.1145/1667048.1667049
   Mekruksavanich Sakorn, 2012, Information Technology Journal, V11, P1677, DOI 10.3923/itj.2012.1677.1686
   Ramalho Luciano Gama de Sousa., 2015, Fluent Python: Clear, Concise, and Effective Programming
   Rebêlo H, 2017, PROCEEDINGS OF THE 21ST BRAZILIAN SYMPOSIUM ON PROGRAMMING LANGUAGES (SBLP 2017), DOI 10.1145/3125374.3125383
   Rentschler A., 2014, P 13 INT C MOD, P217
   SCHNEIDER FB, 1990, COMPUT SURV, V22, P299, DOI 10.1145/98163.98167
   Seibel P., 2012, PRACTICAL COMMON LIS
   Skalski Kamil, 2005, THESIS
   Spoon L., 2020, SCALA COMPILER PLUGI
   Stroustrup Bjarne, 2013, The C++ programming language
   Tratt Laurence., 2005, DLS 05, P49, DOI DOI 10.1145/1146841.1146846
   Vieira G.M.D., 2010, IC1026 U CAMP
   Vieira Gustavo Maciel Dias, 2008, SBRC 08
   Vogels W, 2009, COMMUN ACM, V52, P40, DOI 10.1145/1435417.1435432
   Wienke S, 2012, LECT NOTES COMPUT SC, V7484, P859, DOI 10.1007/978-3-642-32820-6_85
NR 32
TC 0
Z9 0
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29a, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 1
PY 2020
VL 200
AR 102531
DI 10.1016/j.scico.2020.102531
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA NZ8II
UT WOS:000577344900001
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Fava, DS
   Steffen, M
AF Fava, Daniel Schnetzer
   Steffen, Martin
TI Ready, set, Go! Data-race detection and the Go language
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 22nd Brazilian Symposium on Formal Methods (SBMF)
CY NOV 25-29, 2019
CL Sao Paulo, BRAZIL
SP Brazilian Comp Soc
DE Concurrency; Synchronization; Message passing; Data-race detection;
   Golang
AB Data races are often discussed in the context of lock acquisition and release, with race-detection algorithms routinely relying on vector clocks as a means of capturing the relative ordering of events from different threads. In this paper, we present a data-race detector for a language with channel communication as its sole synchronization primitive, and provide a semantics directly tied to the happens-before relation, thus forging the notion of vector clocks. (C) 2020 The Author(s). Published by Elsevier B.V.
C1 [Fava, Daniel Schnetzer; Steffen, Martin] Univ Oslo, Dept Informat, Oslo, Norway.
C3 University of Oslo
RP Fava, DS (corresponding author), Univ Oslo, Dept Informat, Oslo, Norway.
EM danielsf@ifi.uio.no; msteffen@ifi.uio.no
OI Schnetzer Fava, Daniel/0000-0002-6900-4849
FU  [UTF-2018-CAPES-Diku/10001]
FX Supported by the bilateral project UTF-2018-CAPES-Diku/10001 "Modern
   Refactoring."
CR [Anonymous], P 9 ACM S PRINC PAR
   [Anonymous], GRACE ARACE DETECTOR
   [Anonymous], TYPING CONFLUENCE IN
   [Anonymous], SEQUENTIALITEIT PROC
   [Anonymous], ACM SIGPLAN NOT
   Banerjee U., 2006, PADTAD 06, P69, DOI [10.1145/1147403.1147416, DOI 10.1145/1147403.1147416]
   Benveniste A, 2003, P IEEE, V91, P64, DOI 10.1109/JPROC.2002.805826
   Blackshear S, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276514
   Choi JD, 2002, ACM SIGPLAN NOTICES, V37, P258, DOI 10.1145/543552.512560
   Cypher R., 1995, Proceedings. Seventh IEEE Symposium on Parallel and Distributed Processing (Cat. No.95TB8131), P534, DOI 10.1109/SPDP.1995.530730
   Fava DS, 2019, J LOG ALGEBR METHODS, V103, P1, DOI 10.1016/j.jlamp.2018.10.004
   Flanagan C, 2009, PLDI'09 PROCEEDINGS OF THE 2009 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P121, DOI 10.1145/1542476.1542490
   Huang J, 2014, ACM SIGPLAN NOTICES, V49, P337, DOI [10.1145/2666356.2594315, 10.1145/2594291.2594315]
   KATZ S, 1992, THEOR COMPUT SCI, V101, P337, DOI 10.1016/0304-3975(92)90054-J
   LAMPORT L, 1978, COMMUN ACM, V21, P558, DOI 10.1145/359545.359563
   Lidbury C, 2017, ACM SIGPLAN NOTICES, V52, P443, DOI 10.1145/3093333.3009857
   Marino D, 2009, ACM SIGPLAN NOTICES, V44, P134, DOI 10.1145/1543135.1542491
   Mattern F., 1988, WORKSH PAR DISTR ALG, P215
   MAZURKIEWICZ A, 1987, LECT NOTES COMPUT SC, V255, P279
   Naik M, 2006, ACM SIGPLAN NOTICES, V41, P308, DOI 10.1145/1133981.1134018
   Netzer R.H., 1990, Proceedings of the 1990 Interna- tional Conference on Parallel Processing, P93
   O'Callahan R., 2003, SIGPLAN Notices, V38, P166, DOI 10.1145/966049.781528
   Palamidessi Catuscia., 1997, Proceedings of the 24th ACM SIGPLAN-SIGACT symposium on Principles of programming languages, P256
   Peters K, 2012, LECT NOTES COMPUT SC, V7213, P210, DOI 10.1007/978-3-642-28729-9_14
   Pratikakis P, 2006, ACM SIGPLAN NOTICES, V41, P320, DOI 10.1145/1133981.1134019
   Rhodes D, 2017, ACM SIGPLAN NOTICES, V52, P141, DOI [10.1145/3140587.3062350, 10.1145/3062341.3062350]
   Sabry A., 1992, Proceedings of the 1992 ACM Conference on Lisp and Functional Programming, P288, DOI 10.1145/141471.141563
   Savage S, 1997, ACM T COMPUT SYST, V15, P391, DOI 10.1145/269005.266641
   Serebryany K., 2012, Dynamic race detection with the LLVM compiler, V7186, P110, DOI 10.1007/978-3-642-29860-8
   Serebryany Konstantin, 2009, Proceedings of the Workshop on Binary Instrumentation and Applications, WBIA'09, P62, DOI DOI 10.1145/1791194.1791203
   Smaragdakis Y, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P387
   Terauchi T, 2008, ACM T PROGR LANG SYS, V30, DOI 10.1145/1387673.1387676
   Voung J.W., 2007, PROC 6 JOINT M EUROP, P205
NR 33
TC 1
Z9 1
U1 1
U2 8
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 1
PY 2020
VL 195
AR 102473
DI 10.1016/j.scico.2020.102473
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA LR7RO
UT WOS:000535893800004
OA hybrid
DA 2024-07-18
ER

PT J
AU Dantas, ABD
   de Carvalho, FH
   Barbosa, LS
AF de Oliveira Dantas, Allberson Bruno
   de Carvalho Junior, Francisco Heron
   Barbosa, Luis Soares
TI A component-based framework for certification of components in a cloud
   of HPC services
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 16th International Workshop on Foundations of Coordination Languages and
   Self-Adaptative Systems (FOCLASA)
CY JUN 26, 2018
CL Toulouse, FRANCE
DE Verification-as-a-Service; Formal verification; High Performance
   Computing; Software components; Scientific workflows
ID FORMAL VERIFICATION; HIGH-PERFORMANCE; MODEL; WORKFLOW; SYSTEM;
   MANAGEMENT; VERIFIER
AB HPC Shelf is a proposal of a cloud computing platform to provide component-oriented services for High Performance Computing (HPC) applications. This paper presents a Verification-as-a-Service (VaaS) framework for component certification on HPC Shelf. Certification is aimed at providing higher confidence that components of parallel computing systems of HPC Shelf behave as expected according to one or more requirements expressed in their contracts. To this end, new abstractions are introduced, starting with certifier components. They are designed to inspect other components and verify them for different types of functional, non-functional and behavioral requirements. The certification framework is naturally based on parallel computing techniques to speed up verification tasks. (C) 2020 Elsevier B.V. All rights reserved.
C1 [de Oliveira Dantas, Allberson Bruno] Univ Integracao Int Lusofonia Afro Brasileira, Campus Liberdade, Redencao, Brazil.
   [de Carvalho Junior, Francisco Heron] Univ Fed Ceara, Mestrado & Doutorado Ciencia Comp, Fortaleza, Ceara, Brazil.
   [Barbosa, Luis Soares] HASLab INESC TEC, Campus Gualtar, Braga, Portugal.
   [Barbosa, Luis Soares] Univ Minho, Campus Gualtar, Braga, Portugal.
C3 Universidade da Integracao Internacional da Lusofonia Afro-Brasileira
   (UNILAB); Universidade Federal do Ceara; INESC TEC; Universidade do
   Minho; Universidade do Minho
RP de Carvalho, FH (corresponding author), Univ Fed Ceara, Mestrado & Doutorado Ciencia Comp, Fortaleza, Ceara, Brazil.
EM allberson@unilab.edu.br; heron@lia.ufc.br; lsb@di.uminho.pt
RI Carvalho, Francisco/AAR-9865-2021; Soares Barbosa, Luis/N-7086-2013
OI Carvalho, Francisco/0000-0003-2286-2376; Soares Barbosa,
   Luis/0000-0002-5037-2588
CR Akhunzada A, 2015, 2015 SAI INTELLIGENT SYSTEMS CONFERENCE (INTELLISYS), P532, DOI 10.1109/IntelliSys.2015.7361191
   AKL S.G., 1990, PARALLEL SORTING ALG
   Al-Haj S, 2013, INT CONF NETW SER, P51, DOI 10.1109/CNSM.2013.6727809
   Albert E, 2014, SERV ORIENTED COMPUT, V8, P323, DOI 10.1007/s11761-013-0148-0
   Alvaro A, 2005, EUROMICRO-SEAA 2005: 31ST EUROMICRO CONFERENCE ON SOFTWARE ENGINEERING AND ADVANCED APPLICATIONS, PROCEEDINGS, P106
   [Anonymous], 1992, TEMPORAL LOGIC REACT, DOI DOI 10.1007/978-1-4612-0931-7
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], 1995, CS95274 U TENN
   [Anonymous], 2010, CAMBRIDGE TRACTS THE
   [Anonymous], [No title captured]
   [Anonymous], 1999, The Coq Proof Assistant
   [Anonymous], 1992, Dependability: Basic Concepts and Terminology
   APT KR, 1986, ACM T PROGR LANG SYS, V8, P388, DOI 10.1145/5956.6000
   Arbab F, 2004, MATH STRUCT COMP SCI, V14, P329, DOI 10.1017/S0960129504004153
   Baegh J, 2006, IEEE SOFTWARE, V23, P74, DOI 10.1109/MS.2006.69
   Barnett M, 2006, LECT NOTES COMPUT SC, V4111, P364
   Barrett Clark, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P171, DOI 10.1007/978-3-642-22110-1_14
   Barrett C, 2007, LECT NOTES COMPUT SC, V4590, P298
   Berriman GB, 2004, PROC SPIE, V5493, P221, DOI 10.1117/12.550551
   Beyer D, 2014, LECT NOTES COMPUT SC, V8559, P327, DOI 10.1007/978-3-319-08867-9_21
   Bobot F., 2011, BOOGIE 2011 1 INT WO, P53
   Bobot F, 2015, INT J SOFTW TOOLS TE, V17, P709, DOI 10.1007/s10009-014-0314-5
   Bobot Francois, 2008, The Alt-Ergo automated theorem prover
   Brogi A, 2018, J SYST SOFTWARE, V139, P189, DOI 10.1016/j.jss.2018.02.005
   Brogi A, 2014, LECT NOTES COMPUT SC, V8745, P171, DOI 10.1007/978-3-662-44879-3_13
   Calegari P, 2019, ACM T WEB, V13, DOI 10.1145/3197385
   Camilli CBM, 2016, CONCURR COMP-PRACT E, V28, P3025, DOI 10.1002/cpe.3652
   Candea George, 2010, P 1 ACM S CLOUD COMP, P155, DOI DOI 10.1145/1807128.1807153
   Carvalho FH, 2007, CONCURR COMP-PRACT E, V19, P697, DOI 10.1002/cpe.1121
   Chunqing Chen, 2012, 2012 IEEE 5th International Conference on Cloud Computing (CLOUD), P883, DOI 10.1109/CLOUD.2012.95
   Cimatti A., 2002, Computer Aided Verification. 14th International Conference, CAV 2002. Proceedings (Lecture Notes in Computer Science Vol.2404), P359
   Ciortea Liviu, 2009, Operating Systems Review, V43, P5, DOI 10.1145/1713254.1713257
   Clarke E, 2001, LECT NOTES COMPUT SC, V2000, P176
   Clavel M, 2007, All About Maude: A High-Performance Logical Framework
   Cohen E, 2009, LECT NOTES COMPUT SC, V5674, P23, DOI 10.1007/978-3-642-03359-9_2
   Cuoq Pascal, 2012, Software Engineering and Formal Methods. Proceedings of the 10th International Conference, SEFM 2012, P233, DOI 10.1007/978-3-642-33826-7_16
   Dabaghchian M, 2015, FORM ASP COMPUT, V27, P789, DOI 10.1007/s00165-014-0331-x
   de Carvalho FH, 2016, SCI COMPUT PROGRAM, V132, P96, DOI 10.1016/j.scico.2016.07.005
   de Carvalho FH, 2013, J PARALLEL DISTR COM, V73, P557, DOI 10.1016/j.jpdc.2012.12.007
   de Carvalho FH, 2008, ELECTRON NOTES THEOR, V195, P113, DOI 10.1016/j.entcs.2007.08.029
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Dantas ABD, 2017, LECT NOTES COMPUT SC, V10487, P198, DOI 10.1007/978-3-319-68034-7_12
   de Rezende CA, 2018, 2018 SYMPOSIUM ON HIGH PERFORMANCE COMPUTING SYSTEMS (WSCAD 2018), P108, DOI 10.1109/WSCAD.2018.00026
   Dean J, 2004, USENIX ASSOCIATION PROCEEDINGS OF THE SIXTH SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION (OSDE '04), P137
   Deelman E., 2005, Scientific Programming, V13, P219
   Dehne F, 2017, EMERGENCE COMPLEX CO, V24, P293, DOI 10.1007/978-3-319-46376-6_12
   Di Cosmo R, 2014, INFORM COMPUT, V239, P100, DOI 10.1016/j.ic.2014.11.002
   Di Domenico D, 2015, 2015 9TH INTERNATIONAL CONFERENCE ON COMPLEX, INTELLIGENT, AND SOFTWARE INTENSIVE SYSTEMS CISIS 2015, P547, DOI 10.1109/CISIS.2015.81
   Duran A., 2012, 2012 International Conference on High Performance Computing & Simulation (HPCS 2012), P365, DOI 10.1109/HPCSim.2012.6266938
   Evangelidis A, 2017, IEEE ACM INT SYMP, P355, DOI 10.1109/CCGRID.2017.39
   Fan Z., 2004, SC 04, P47, DOI [DOI 10.1109/SC.2004.26, 10.1109/SC.2004.26]
   Groote JF, 2014, MODELING AND ANALYSIS OF COMMUNICATING SYSTEMS, P1
   Groote Jan Friso, 2007, METHODS MODELLING SO, P1
   Harrison A, 2008, INT J HIGH PERFORM C, V22, P268, DOI 10.1177/1094342007086226
   Herbordt MC, 2007, COMPUTER, V40, P50, DOI 10.1109/MC.2007.79
   Hu CL, 2019, 2019 8TH INTERNATIONAL CONFERENCE ON SOFTWARE AND COMPUTER APPLICATIONS (ICSCA 2019), P210, DOI 10.1145/3316615.3316714
   Hu K, 2016, SIMUL MODEL PRACT TH, V60, P122, DOI 10.1016/j.simpat.2015.09.003
   Jackson D, 2002, ACM T SOFTW ENG METH, V11, P256, DOI 10.1145/505145.505149
   Jacobs B, 2011, LECT NOTES COMPUT SC, V6617, P41, DOI 10.1007/978-3-642-20398-5_4
   Klai K, 2015, P INT COMP SOFTW APP, P398, DOI 10.1109/COMPSAC.2015.251
   KOZEN D, 1983, THEOR COMPUT SCI, V27, P333, DOI 10.1016/0304-3975(82)90125-6
   Kumar R, 2016, LECT NOTES COMPUT SC, V9681, P523, DOI 10.1007/978-3-319-33693-0_33
   Kwiatkowska M, 2002, LECT NOTES COMPUT SC, V2324, P200
   López HA, 2015, ACM SIGPLAN NOTICES, V50, P280, DOI [10.1145/2858965.2814302, 10.1145/2814270.2814302]
   Ludäscher B, 2006, CONCURR COMP-PRACT E, V18, P1039, DOI 10.1002/cpe.994
   Mancini T, 2016, FUND INFORM, V149, P101, DOI 10.3233/FI-2016-1444
   MILNER R, 1989, ECSLFCS8985 ED U
   Milner R, 2008, ELECTRON NOTES THEOR, V209, P5, DOI 10.1016/j.entcs.2008.04.002
   Montesi F, 2010, LECT NOTES COMPUT SC, V6084, P153, DOI 10.1007/978-3-642-15640-3_11
   Morris J, 2001, COMPUTER, V34, P30, DOI 10.1109/2.947086
   Moscato F, 2008, STUD COMPUT INTELL, V162, P187
   Nezhad HRM, 2018, LECT NOTES COMPUT SC, V11236, P714, DOI 10.1007/978-3-030-03596-9_51
   Nipkow Tobias, 2002, ISABELLE HOL PROOF A
   OWICKI S, 1976, ACTA INFORM, V6, P319, DOI 10.1007/BF00268134
   Qin J, 2007, DISTRIBUTED AND PARALLEL SYSTEMS: FROM CLUSTER TO GRID COMPUTING, P191, DOI 10.1007/978-0-387-69858-8_19
   Quinn M.J., 2003, Parallel Programming in C with MPI and OpenMP
   Ren G, 2016, L N INST COMP SCI SO, V167, P317, DOI 10.1007/978-3-319-38904-2_33
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Riazanov A., 1999, Automated Deduction - CADE-16. 16th International Conference on Automated Deduction. Proceedings (Lecture Notes in Artificial Intelligence Vol.1632), P292
   Sahli H, 2015, PROCEDIA COMPUT SCI, V68, P29, DOI 10.1016/j.procs.2015.09.221
   Schaefer I, 2012, COMM COM INF SC, V255, P16
   Schulz S, 2002, AI COMMUN, V15, P111
   Siegel SF, 2015, PROCEEDINGS OF SC15: THE INTERNATIONAL CONFERENCE FOR HIGH PERFORMANCE COMPUTING, NETWORKING, STORAGE AND ANALYSIS, DOI 10.1145/2807591.2807635
   Skowyra R, 2014, INT CONF CLOUD ENG, P337, DOI 10.1109/IC2E.2014.72
   Taylor IanJ., 2006, WORKFLOWS E SCI SCI
   Vo A, 2009, ACM SIGPLAN NOTICES, V44, P261, DOI 10.1145/1594835.1504214
   Voas JM, 1998, COMPUTER, V31, P53, DOI 10.1109/2.683008
   Weidenbach C, 2009, LECT NOTES ARTIF INT, V5663, P140, DOI 10.1007/978-3-642-02959-2_10
   WOHLIN C, 1994, IEEE T SOFTWARE ENG, V20, P494, DOI 10.1109/32.295896
   Wolstencroft K, 2013, NUCLEIC ACIDS RES, V41, pW557, DOI 10.1093/nar/gkt328
   Zhou WB, 2019, IEEE ACCESS, V7, P26721, DOI 10.1109/ACCESS.2019.2900473
NR 94
TC 2
Z9 2
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29a, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 1
PY 2020
VL 191
AR 102379
DI 10.1016/j.scico.2019.102379
PG 36
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA KW9NS
UT WOS:000521511000007
OA Bronze, Green Published
DA 2024-07-18
ER

PT J
AU Tekinerdogan, B
   Erata, F
AF Tekinerdogan, Bedir
   Erata, Ferhat
TI Automated reasoning framework for traceability management of system of
   systems
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 16th International Workshop on Foundations of Coordination Languages and
   Self-Adaptative Systems (FOCLASA)
CY JUN 26, 2018
CL Toulouse, FRANCE
DE System of systems; Traceability; Metamodeling; Domain specific language
ID SMART CITY
AB An important aspect in system of systems (SoS) is the realization of the capabilities in different systems that work together. Identifying and locating these capabilities are important to orchestrate the overall activities and hereby to achieve the overall goal of the SoS. System elements and capabilities in SoS however, are rarely stable and need to evolve in different ways and different times in accordance with the changing requirements. To manage the SoS and cope with its evolution it is necessary that the dependency links to the capabilities and the system elements can be easily traced. Several approaches have been proposed to model traceability and reason about these by extending a predetermined set of possible trace links with fixed semantics. However, for the context of SoS a fixed traceability model with fixed traceability semantics is limited to consider the various different and changing scenarios. In this article, we first present the different traceability requirements for managing traceability in the context of SoS. Subsequently, we present the metamodel and the corresponding domain specific language to support modeling traceability and traceability analysis approaches within the evolving SoS context. Further, we provide the tool support for automated reasoning of traceability of SoS capabilities and system elements. We illustrate and discuss the approach for the application to a smart city SoS. (C) 2020 Elsevier B.V. All rights reserved.
C1 [Tekinerdogan, Bedir] Wageningen Univ, Informat Technol, Wageningen, Netherlands.
   [Erata, Ferhat] Yale Univ, Dept Comp Sci, New Haven, CT 06520 USA.
   [Erata, Ferhat] UNIT Informat Technol, Res & Dev, Izmir, Turkey.
C3 Wageningen University & Research; Yale University
RP Tekinerdogan, B (corresponding author), Wageningen Univ, Informat Technol, Wageningen, Netherlands.
EM bedir.tekinerdogan@wur.nl
RI Tekinerdogan, Bedir/K-3639-2019; Erata, Ferhat/IQR-9159-2023
OI Tekinerdogan, Bedir/0000-0002-8538-7261; Erata,
   Ferhat/0000-0001-6305-4266
CR Bondé L, 2006, APPLICATIONS OF SPECIFICATION AND DESIGN LANGUAGES FOR SOCS, P263, DOI 10.1007/978-1-4020-4998-9_15
   Cavalcante E., 2016, Proceedings of the 2nd International Workshop on Smart, page, P9
   Chitchyan R., 2005, D11 AOSD, V11, P8
   Cleland-Huang J., 2014, FOSE P FUTURE SOFTWA, P55
   Cleland-Huang J., 2012, Software and systems traceability, V2
   Cocchia A, 2014, PROGR IS, P13, DOI 10.1007/978-3-319-06160-3_2
   Dahmann JS, 2008, 2008 2ND ANNUAL IEEE SYSTEMS CONFERENCE, P133
   Erata F, 2017, IEEE INT CONF AUTOM, P907, DOI 10.1109/ASE.2017.8115703
   Erata F, 2017, ESEC/FSE 2017: PROCEEDINGS OF THE 2017 11TH JOINT MEETING ON FOUNDATIONS OF SOFTWARE ENGINEERING, P959, DOI 10.1145/3106237.3122825
   Erata  Ferhat, 2017, P S APPL COMP SAC 17, P1607
   Henshaw M. J. de C., 2011, INCOSE INT S, P712
   IEEE Standards Coordinating Committee, 1990, IEEE Std 610.12-1990), P169
   Kahraman G, 2015, SOFTW SYST MODEL, V14, P1505, DOI 10.1007/s10270-013-0387-8
   Kim TH, 2017, FUTURE GENER COMP SY, V76, P159, DOI 10.1016/j.future.2017.03.034
   Krokhin A, 2003, J ACM, V50, P591, DOI 10.1145/876638.876639
   Lacinák M, 2017, PROCEDIA ENGINEER, V192, P522, DOI 10.1016/j.proeng.2017.06.090
   Lim C, 2018, CITIES, V82, P86, DOI 10.1016/j.cities.2018.04.011
   Ramesh B, 2001, IEEE T SOFTWARE ENG, V27, P58, DOI 10.1109/32.895989
   Strembeck M, 2009, SOFTWARE PRACT EXPER, V39, P1253, DOI 10.1002/spe.936
   Tekinerdogan B, 2004, FOURTH WORKING IEEE/IFIP CONFERENCE ON SOFTWARE ARCHITECTURE (WICSA 2004), PROCEEDINGS, P5, DOI 10.1109/WICSA.2004.1310685
   Tekinerdogan B., 2018, SOFTW SYST MODEL, P1
   Tekinerdogan B., 2017, ENG CONNECTED INTELL
   Tekinerdogan B., 2007, P 10 INT WORKSH ASP, P49
   Tekinerdogan B, 2007, J OBJECT TECHNOL, V6, P7, DOI 10.5381/jot.2007.6.7.a1
   Tekinerdogan B, 2007, LECT NOTES COMPUT SC, V4765, P175
   Tekinerdogan B, 2019, 2019 14TH ANNUAL CONFERENCE SYSTEM OF SYSTEMS ENGINEERING (SOSE), P278, DOI [10.1109/sysose.2019.8753841, 10.1109/SYSOSE.2019.8753841]
   Tekinerdogan B, 2009, EA'09: EARLY ASPECT WORKSHOP, P13
NR 27
TC 1
Z9 1
U1 0
U2 7
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 1
PY 2020
VL 191
AR 102416
DI 10.1016/j.scico.2020.102416
PG 16
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA KW9NS
UT WOS:000521511000005
OA Bronze
DA 2024-07-18
ER

PT J
AU Jaiswal, S
   Khedker, UP
   Chakraborty, S
AF Jaiswal, Swati
   Khedker, Uday P.
   Chakraborty, Supratik
TI Bidirectionality in flow-sensitive demand-driven analysis
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Flow-sensitive alias analysis; Demand-driven analysis; Bidirectional
   analysis; Meet-Over-Paths solution
ID POINTS-TO ANALYSIS; GLOBAL OPTIMIZATION; SUPPRESSION; ALGORITHM
AB Demand-driven methods for program analysis have primarily been viewed as efficient algorithms for computing the same information as the corresponding exhaustive methods, but for a given set of demands. We explore demand-driven flow-sensitive alias analysis (which we call ADFSA) and propose its improved version called PDFSA that computes both aliases and pointers for the demands raised by changing the notion of relevance for indirect assignment statements. We formally show that while ADFSA is as precise as the corresponding exhaustive flow-sensitive alias analysis (EFSA), PDFSA can be more precise than both ADFSA and EFSA. This surprising result is based on the following insight: A demand-driven method computes less information than the corresponding exhaustive method. PDFSA exploits this to reduce the uncertainty caused by aliasing which in turn, reduces the conflation of memory locations thereby increasing precision.
   We formalize PDFSA using an inherent property of a demand-driven flow-sensitive alias analysis: demands are propagated against the control flow and aliases are propagated along the control flow. Traditionally, this has been seen as a collection of two separate analyses whose interaction is controlled by an algorithm that drives the two analyses. We formalize this algorithmic view as a bidirectional data flow analysis to define PDFSA declaratively. Further, we define Meet Over Paths (MoP) solution for bidirectional flows for reasoning about the soundness of PDFSA. Our definition generalizes the classical definition of MoP which is restricted to unidirectional flows.
   We have implemented PDFSA, ADFSA, and EFSA for static resolution of virtual function calls in C++ for constructing more precise call graphs. Our measurements show that the call graphs computed using PDFSA are indeed more precise than those that are computed using ADFSA or EFSA. (C) 2020 Elsevier B.V. All rights reserved.
C1 [Jaiswal, Swati; Khedker, Uday P.; Chakraborty, Supratik] Indian Inst Technol, Bombay, Maharashtra, India.
C3 Indian Institute of Technology System (IIT System); Indian Institute of
   Technology (IIT) - Bombay
RP Jaiswal, S (corresponding author), Indian Inst Technol, Bombay, Maharashtra, India.
EM swati.j@iitb.ac.in; uday@cse.iitb.ac.in; supratik@cse.iitb.ac.in
RI Chakraborty, Supratik/AAY-5937-2021; Jaiswal, Swati/AAA-6243-2022
OI Chakraborty, Supratik/0000-0002-7527-7675; Jaiswal,
   Swati/0000-0001-5381-3345
FU TCS Research Fellowship
FX Swati Jaiswal was partially supported by TCS Research Fellowship.
CR Agrawal G, 2002, LECT NOTES COMPUT SC, V2304, P29
   Aigner G., 1996, ECOOP '96 - Object-Oriented Programming. 10th European Conference. Proceedings, P142, DOI 10.1007/BFb0053060
   Andersen L. O., 1994, Technical Report
   [Anonymous], 1992, Programming Language Design and Implementation (PLDI), DOI DOI 10.1145/143103.143137
   Arzt S, 2014, ACM SIGPLAN NOTICES, V49, P259, DOI [10.1145/2666356.2594299, 10.1145/2594291.2594299]
   Bacon DF, 1996, ACM SIGPLAN NOTICES, V31, P324, DOI 10.1145/236338.236371
   Balatsouras George, 2016, P 2016 INT STAT AN S, P84
   Balatsouras George, 2013, P 2013 ACM SIGPLAN I, P515
   Bootstrapping Vineet Kahlon, 2008, P 29 ACM SIGPLAN C P, P249
   BRIGGS P, 1994, SIGPLAN NOTICES, V29, P159, DOI 10.1145/773473.178257
   CALLAHAN D, 1990, IEEE T SOFTWARE ENG, V16, P483, DOI 10.1109/32.54302
   Carini Paul R., 1995, TECHNICAL REPORT
   Dean J, 1995, LECT NOTES COMPUT SC, V952, P77, DOI 10.1007/3-540-49538-x_5
   Dhamdhere D. M., 1993, Conference Record of the Twentieth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P397, DOI 10.1145/158511.158696
   DHAMDHERE DM, 1992, SIGPLAN NOTICES, V27, P212, DOI 10.1145/143103.143135
   DHAMDHERE DM, 1988, SIGPLAN NOTICES, V23, P172, DOI 10.1145/51607.51621
   DHAMDHERE DM, 1993, ACM T PROGR LANG SYS, V15, P312, DOI 10.1145/169701.169684
   DHANESHWAR VM, 1995, J PROGRAM LANG, V3, P95
   Diwan A, 1998, ACM SIGPLAN NOTICES, V33, P106, DOI 10.1145/277652.277670
   Diwan A, 2001, ACM T PROGR LANG SYS, V23, P30, DOI 10.1145/383721.383732
   DRECHSLER KH, 1988, ACM T PROGR LANG SYS, V10, P635, DOI 10.1145/48022.214509
   DRECHSLER KH, 1993, SIGPLAN NOTICES, V28, P29, DOI 10.1145/152819.152823
   Duesterwald E, 1997, ACM T PROGR LANG SYS, V19, P992, DOI 10.1145/267959.269970
   EMAMI M, 1994, SIGPLAN NOTICES, V29, P242, DOI 10.1145/773473.178264
   Frade Maria Jo-do, 2009, P 2009 ACM SIGPLAN W, P141
   Gharat Pritam M., 2018, TECHNICAL REPORT
   Guyer SZ, 2003, LECT NOTES COMPUT SC, V2694, P214
   Hailperin M, 1998, ACM T PROGR LANG SYS, V20, P1297, DOI 10.1145/295656.295664
   Hall M. W., 1992, ACM Letters on Programming Languages and Systems, V1, P227, DOI 10.1145/151640.151643
   Hardekopf B, 2011, INT SYM CODE GENER, P289, DOI 10.1109/CGO.2011.5764696
   Hasti R, 1998, ACM SIGPLAN NOTICES, V33, P97, DOI 10.1145/277652.277668
   Heintze N, 2001, ACM SIGPLAN NOTICES, V36, P24, DOI 10.1145/381694.378802
   Hind M, 2001, ACM SIGPLAN NOTICES, P54
   Huang JJ, 2016, FSE'16: PROCEEDINGS OF THE 2016 24TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON FOUNDATIONS OF SOFTWARE ENGINEERING, P169, DOI 10.1145/2950290.2950348
   Kanvar V, 2016, ACM COMPUT SURV, V49, DOI 10.1145/2931098
   Karkare B, 2007, ACM T PROGR LANG SYS, V29, DOI 10.1145/1286821.1286829
   Khedker U., 2009, Data Flow Analysis: Theory and Practice, V1st
   Khedker UP, 2012, LECT NOTES COMPUT SC, V7460, P265, DOI 10.1007/978-3-642-33125-1_19
   Khedker UP, 2003, COMPUT LANG SYST STR, V29, P15, DOI 10.1016/S1477-8424(03)00012-5
   Khedker UP, 1999, ACM SIGPLAN NOTICES, V34, P47, DOI 10.1145/606666.606676
   KHEDKER UP, 1994, ACM T PROGR LANG SYS, V16, P1472, DOI 10.1145/186025.186043
   Kildall G. A., 1973, Conference Record of ACM Symposium on Principles of Programming Languages, P194
   KNOOP J, 1995, SIGPLAN NOTICES, V30, P233, DOI 10.1145/223428.207150
   KNOOP J, 1994, SIGPLAN NOTICES, V29, P147
   KNOOP J, 1992, SIGPLAN NOTICES, V27, P224, DOI 10.1145/143103.143136
   KNOOP J, 1994, ACM T PROGR LANG SYS, V16, P1117, DOI 10.1145/183432.183443
   KNOOP J, 1993, J PROGRAM LANG, V1, P71
   Lattner C, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P278, DOI 10.1145/1250734.1250766
   Lhoták O, 2003, LECT NOTES COMPUT SC, V2622, P153
   Li L, 2013, PROCEEDINGS OF THE ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON MEMORY MANAGEMENT (ISMM '13), P85
   Masticola SP, 1995, ACM T PROGR LANG SYS, V17, P777, DOI 10.1145/213978.213989
   Milanova A, 2005, ACM T SOFTW ENG METH, V14, P1, DOI 10.1145/1044834.1044835
   MOREL E, 1979, COMMUN ACM, V22, P96, DOI 10.1145/359060.359069
   Muchnick S., 1997, ADV COMPILER DESIGN
   Nielson F., 1999, Principles of Program Analysis
   Oh H, 2010, SOFTWARE PRACT EXPER, V40, P585, DOI 10.1002/spe.969
   Oh H, 2011, ADVANCES IN AEROSPACE GUIDANCE, NAVIGATION AND CONTROL, P55
   Paleri VK, 1998, ACM SIGPLAN NOTICES, V33, P35, DOI 10.1145/307824.307851
   PALSBERG J, 1991, SIGPLAN NOTICES, V26, P146
   Palsberg J, 2001, ACM SIGPLAN NOTICES, P20
   Pande Hemant D., 1994, P 6 C USENIX 6 C TEC, V6
   Pande Hemant D., 1995, TECHNICAL REPORT
   Rosen B. K., 1981, P POPL 1981, P117, DOI [10.1145/567532.567545, DOI 10.1145/567532.567545]
   Ryder BG, 2003, LECT NOTES COMPUT SC, V2622, P126
   RYDER BG, 1979, IEEE T SOFTWARE ENG, V5, P216, DOI 10.1109/TSE.1979.234183
   Saabas A, 2007, ELECTRON NOTES THEOR, V190, P103, DOI 10.1016/j.entcs.2007.02.063
   Sagiv M, 1996, THEOR COMPUT SCI, V167, P131, DOI 10.1016/0304-3975(96)00072-2
   Saha Diptikalyan, 2005, P 7 ACM SIGPLAN INT, P117, DOI DOI 10.1145/1069774.1069785
   Shivers Olin Grigsby, 1991, GAX9126964
   Singer Jeremy, 2004, WEB P APPL SEM WORKS
   Smaragdakis Y, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P17, DOI 10.1145/1926385.1926390
   Spath J., 2016, PROC EUR C OBJECT OR, p22:1, DOI [10.4230/DARTS.2.1.12, DOI 10.4230/LIPICS.ECOOP.2016.22]
   Sridharan A, 2013, INT BLACK SEA CONF, P196, DOI 10.1109/BlackSeaCom.2013.6623409
   Sridharan M, 2005, ACM SIGPLAN NOTICES, V40, P59, DOI 10.1145/1103845.1094817
   Sridharan M, 2006, ACM SIGPLAN NOTICES, V41, P387, DOI 10.1145/1133981.1134027
   Steensgaard B., 1996, Conference Record of POPL '96: The 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P32, DOI 10.1145/237721.237727
   Sui Yulei, 2011, P 9 AS S PROGR LANG, P155, DOI DOI 10.1007/978-3-642-25318-8
   Sundaresan V, 2000, ACM SIGPLAN NOTICES, V35, P264, DOI 10.1145/354222.353189
   Tan T, 2017, ACM SIGPLAN NOTICES, V52, P278, DOI [10.1145/3140587.3062360, 10.1145/3062341.3062360]
   Tarjan R., 1972, SIAM J COMPUT, P1
   Thakur M, 2019, PROCEEDINGS OF THE 28TH INTERNATIONAL CONFERENCE ON COMPILER CONSTRUCTION (CC '19), P135, DOI 10.1145/3302516.3307359
   Tiejun Wang, 2001, ECOOP 2001 - Object-Oriented Programming. 15th European Conference. Proceedings (Lecture Notes in Computer Science Vol.2072), P99
   Tip F, 2000, ACM SIGPLAN NOTICES, V35, P281, DOI 10.1145/354222.353190
   VONHANXLEDEN R, 1994, SIGPLAN NOTICES, V29, P107, DOI 10.1145/773473.178253
   Whaley J, 2004, ACM SIGPLAN NOTICES, V39, P131, DOI 10.1145/996893.996859
   Winskel G., 1993, The Formal Semantics of Programming Languages
   Yan D, 2011, MECH ENG AUTOMATION, V1, P11
   Yu HT, 2010, INT SYM CODE GENER, P218
   Zheng X, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P197, DOI 10.1145/1328438.1328464
   Zhu JW, 2005, DES AUT CON, P831, DOI 10.1109/DAC.2005.193930
NR 90
TC 3
Z9 3
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAY 1
PY 2020
VL 190
AR 102391
DI 10.1016/j.scico.2020.102391
PG 49
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA KR5LR
UT WOS:000517660400002
OA Bronze
DA 2024-07-18
ER

PT J
AU Li, Y
   Zhang, XY
   Ji, YY
   Sun, M
AF Li, Yi
   Zhang, Xiyue
   Ji, Yuanyi
   Sun, Meng
TI A formal framework capturing real-time and stochastic behavior in
   connectors
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Coordination; Stochastic; Real-time; Reo connectors; STA(r)
ID MODEL; REO; COORDINATION
AB Modern distributed systems are often coupled with flexible architectures, composed of heterogeneous components, and deployed on different execution nodes. In such architectures, connectors (or middlewares) are widely used to orchestrate the separated components and make them functioning. Apparently, correctness of such systems highly depends on the behavior of connectors. Reo is a channel-based coordination language where complex connectors are compositionally constructed from simpler ones. In this paper, we propose a stochastic and real-time extension of Reo, including a set of new primitive channels and an expressive semantics as Stochastic Timed Automata for Reo (STA(r)). Furthermore, a logical formalization of STA(r) for property analysis has been proposed and the transformation from STA(r) to PRISM and JANI has been implemented. Several case studies are presented to demonstrate how STA(r) and its corresponding logic can be used to capture coordination scenarios in the real world. (C) 2019 Elsevier B.V. All rights reserved.
C1 [Li, Yi; Zhang, Xiyue; Ji, Yuanyi; Sun, Meng] Peking Univ, Sch Math Sci, LMAM & DI, Beijing, Peoples R China.
C3 Peking University
RP Sun, M (corresponding author), Peking Univ, Sch Math Sci, LMAM & DI, Beijing, Peoples R China.
EM liyi_math@pku.edu.cn; zhangxiyue@pku.edu.cn; jyy@pku.edu.cn;
   sunm@pku.edu.cn
RI SUN, MENG/KQA-2135-2024
OI Zhang, Xiyue/0000-0003-1649-7165
FU National Natural Science Foundation of China [61772038, 61532019,
   61202069, 61272160]
FX The work was partially supported by the National Natural Science
   Foundation of China under grant Nos. 61772038, 61532019, 61202069 and
   61272160.
CR ALUR R, 1994, J ACM, V41, P181, DOI 10.1145/174644.174651
   Arbab F, 2004, MATH STRUCT COMP SCI, V14, P329, DOI 10.1017/S0960129504004153
   Arbab F, 2007, SOFTW SYST MODEL, V6, P59, DOI 10.1007/s10270-006-0009-9
   Arbab F, 2009, LECT NOTES COMPUT SC, V5521, P268, DOI 10.1007/978-3-642-02053-7_14
   Baier C, 2005, J UNIVERS COMPUT SCI, V11, P1718
   Baier C, 2006, LECT NOTES COMPUT SC, V4038, P1
   Baier C, 2006, SCI COMPUT PROGRAM, V61, P75, DOI 10.1016/j.scico.2005.10.008
   Di Pierro A, 2004, LECT NOTES COMPUT SC, V2949, P119
   Hahn E. M., 2014, ELECT COMMUN EUROP A, V70
   Hong W., 2018, LECT NOTES COMPUT SC, V10729, P558
   Jongmans SSTQ, 2012, SCI ANN COMPUT SCI, V22, P201, DOI 10.7561/SACS.2012.1.201
   Kokash N, 2012, FORM ASP COMPUT, V24, P187, DOI 10.1007/s00165-011-0191-6
   Kwiatkowska M., 2000, CONCUR 2000 - Concurrency Theory. 11th International Conference. Proceedings (Lecture Notes in Computer Science Vol.1877), P123
   Kwiatkowska Marta, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P585, DOI 10.1007/978-3-642-22110-1_47
   Kwiatkowska M, 2007, CONTROL ENG PRACT, V15, P1427, DOI 10.1016/j.conengprac.2006.07.003
   Li Henry., 2009, Introducing Windows Azure
   Li Y, 2017, LECT NOTES COMPUT SC, V10623, P287, DOI 10.1007/978-3-319-70848-5_18
   Meng S, 2007, LECT NOTES COMPUT SC, V4468, P301
   Moon YJ, 2014, SCI COMPUT PROGRAM, V80, P3, DOI 10.1016/j.scico.2011.11.007
   Nawaz MS, 2018, SEKE, P391, DOI [10.18293/SEKE2018-024, DOI 10.18293/SEKE2018-024]
   Newcombe C, 2015, COMMUN ACM, V58, P66, DOI 10.1145/2699417
   Oliveira N, 2016, ELECTRON P THEOR COM, P35, DOI 10.4204/EPTCS.228.5
   Priami C, 1995, COMPUT J, V38, P578, DOI 10.1093/comjnl/38.7.578
   Sun Meng, 2012, 2012 IEEE Sixth International Symposium on Theoretical Aspects of Software Engineering (TASE 2012), P201, DOI 10.1109/TASE.2012.36
NR 24
TC 2
Z9 2
U1 0
U2 5
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAY 15
PY 2019
VL 177
BP 19
EP 40
DI 10.1016/j.scico.2019.02.005
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA HV5YO
UT WOS:000466061200002
OA hybrid
DA 2024-07-18
ER

PT J
AU Perez-Schofield, BG
   Ortin, F
AF Garcia Perez-Schofield, Baltasar
   Ortin, Francisco
TI A didactic object-oriented, prototype-based visual programming
   environment
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Visual programming; Object-oriented programming; Prototype-based model;
   Education
AB Object-oriented programming is widely used in both the industry and the education areas. The most-common model of object-oriented programming is the class-based one. However, popular languages not implementing this model are gaining traction as time goes by. This alternative model is the prototype-based one, with one key characteristic: there are no classes. In this paper, a visual tool is proposed as a vehicle for learning the prototype-based object-oriented programming, present, for instance, in Self, Lua, or JavaScript. This software has been in use for three years in a subject of the Computer Science Engineering degree, at the University of Vigo. (C) 2019 Elsevier B.V. All rights reserved.
EM jbgarcia@uvigo.es
RI Ortin, Francisco/K-9272-2014
OI Ortin, Francisco/0000-0003-1199-8649
CR [Anonymous], 2005, P OOPSLA 05 COMP 20, P166
   Arnold K., 1997, JAVA PROGRAMMING LAN, VSecond
   Barnes D. J., 2016, Objects first with Java: A practical introduction using BlueJ, Vglobal
   Cooper S., 2000, CONSORTIUM COMPUTING, V15, P107, DOI DOI 10.5555/364133.364161
   Crockford D., 2008, JAVASCRIPT GOOD PART
   DONY C, 1992, SIGPLAN NOTICES, V27, P201, DOI 10.1145/141937.141954
   Dony Christophe, 1998, PROTOTYPE BASED PROG, V86, P71
   Perez-Schofield JBG, 2008, J VISUAL LANG COMPUT, V19, P380, DOI 10.1016/j.jvlc.2007.11.002
   Goldberg A., 1983, Smalltalk 80: The Language and Its Implementation
   Hu CH, 1999, J INF SCI ENG, V15, P585
   Lerusalimschy R., 2016, PROGRAMMING LUA, V4th ed.
   Maloney John, 2004, P 2 INT C CREAT CONN
   UNGAR D, 1987, SIGPLAN NOTICES, V22, P227, DOI 10.1145/38807.38828
   Ungar David, 1991, ORG PROGRAMS CLASSES, P223
NR 14
TC 2
Z9 4
U1 0
U2 8
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAY 1
PY 2019
VL 176
BP 1
EP 13
DI 10.1016/j.scico.2019.02.004
PG 13
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA HT3VM
UT WOS:000464491300001
OA Bronze
DA 2024-07-18
ER

PT J
AU Scott, E
   Johnstone, A
   van Binsbergen, LT
AF Scott, Elizabeth
   Johnstone, Adrian
   van Binsbergen, L. Thomas
TI Derivation representation using binary subtree sets
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Generalised parsing; Combinators; Derivations; Shared packed parse
   forests
AB This paper introduces sets of binary subtree representations as an alternative to shared packed parse forests as the output of a generalised parser, and shows how these may be generated by Earley's algorithm, by a new GLL-style parser and by Johnson's continuation passing combinator style parsers. The set based output removes the clerical overhead associated with graph constructions, making the parsers simpler. (C) 2019 Elsevier B.V. All rights reserved.
C1 [Scott, Elizabeth; Johnstone, Adrian; van Binsbergen, L. Thomas] Royal Holloway Univ London, Egham, Surrey, England.
C3 University of London; Royal Holloway University London
RP Scott, E; Johnstone, A; van Binsbergen, LT (corresponding author), Royal Holloway Univ London, Egham, Surrey, England.
EM e.scott@rhul.ac.uk; a.johnstone@rhul.ac.uk; ltvanbinsbergen@acm.org
RI van Binsbergen, L. Thomas/IQR-9591-2023
OI van Binsbergen, L. Thomas/0000-0001-8113-2221
FU EPSRC [EP/I032509/1] Funding Source: UKRI
CR Afroozeh A, 2015, LECT NOTES COMPUT SC, V9031, P89, DOI 10.1007/978-3-662-46663-6_5
   [Anonymous], THESIS
   [Anonymous], THESIS
   [Anonymous], 1986, Efficient parsing for natural language
   [Anonymous], LECT NOTES COMPUT SC
   [Anonymous], THESIS
   [Anonymous], 1991, GEN LR PARSING
   [Anonymous], 2007, PARSING TECHNIQUES P
   [Anonymous], NOTTCSTR964
   [Anonymous], ELECT NOTES THEOR CO
   [Anonymous], SOURCE CODE ANAL MAN
   [Anonymous], 2007, Pragmatic Programmers
   Aycock J, 1999, LECT NOTES COMPUT SC, V1575, P32
   Aycock J, 2001, ACTA INFORM, V37, P633, DOI 10.1007/PL00013319
   BILLOT S, 1990, 27TH ANNUAL MEETING OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS, P143
   Devriese D, 2012, J FUNCT PROGRAM, V22, P757, DOI 10.1017/S0956796812000226
   Devriese D, 2011, LECT NOTES COMPUT SC, V6539, P84, DOI 10.1007/978-3-642-18378-2_9
   EARLEY J, 1970, COMMUN ACM, V13, P94, DOI 10.1145/362007.362035
   Frost RA, 2008, LECT NOTES COMPUT SC, V4902, P167
   Izmaylova A, 2016, PEPM'16: PROCEEDINGS OF THE 2016 ACM SIGPLAN WORKSHOP ON PARTIAL EVALUATION AND PROGRAM MANIPULATION, P1, DOI 10.1145/2847538.2847539
   JOHNSON M, 1995, COMPUT LINGUIST, V21, P405
   KNUTH DE, 1965, INFORM CONTROL, V8, P607, DOI 10.1016/S0019-9958(65)90426-2
   Lang B., 1994, Computational Intelligence, V10, P486, DOI 10.1111/j.1467-8640.1994.tb00011.x
   Lee L, 2002, J ACM, V49, P1, DOI 10.1145/505241.505242
   MICHIE D, 1968, NATURE, V218, P19, DOI 10.1038/218019a0
   Cardona PAN, 2015, CUAD ACT, P154
   Norvig P., 1991, Computational Linguistics, V17, P91
   Ridge T, 2014, LECT NOTES COMPUT SC, V8706, P261, DOI 10.1007/978-3-319-11245-9_15
   Rosu G, 2010, J LOGIC ALGEBR PROGR, V79, P397, DOI 10.1016/j.jlap.2010.03.012
   Scott E, 2005, COMPUT J, V48, P565, DOI 10.1093/comjnl/bxh102
   Scott E, 2007, ACTA INFORM, V44, P427, DOI 10.1007/s00236-007-0054-z
   Scott E, 2016, SCI COMPUT PROGRAM, V125, P1, DOI 10.1016/j.scico.2016.04.003
   Scott E, 2013, SCI COMPUT PROGRAM, V78, P1828, DOI 10.1016/j.scico.2012.03.005
   Scott E, 2010, SCI COMPUT PROGRAM, V75, P55, DOI 10.1016/j.scico.2009.07.001
   van Binsbergen LT, 2018, PROCEEDINGS OF THE 11TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON SOFTWARE LANGUAGE ENGINEERING (SLE '18), P16, DOI 10.1145/3276604.3276618
   Van den Brand MGJ, 2002, ACM T PROGR LANG SYS, V24, P334, DOI 10.1145/567097.567099
   Visser E, 2003, LECT NOTES COMPUT SC, V3016, P216
NR 37
TC 5
Z9 5
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD APR 15
PY 2019
VL 175
BP 63
EP 84
DI 10.1016/j.scico.2019.01.008
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA HQ5AF
UT WOS:000462421700005
OA Bronze
DA 2024-07-18
ER

PT J
AU Valentin, E
   de Freitas, R
   Barreto, R
AF Valentin, Eduardo
   de Freitas, Rosiane
   Barreto, Raimundo
TI Towards optimal solutions for the low power hard real-time task
   allocation on multiple heterogeneous processors
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Hard real-time; MGAP; Schedulability; DVFS
ID MULTIPROCESSOR PLATFORMS; SYSTEMS; ASSIGNMENT; OPTIMIZATION; ALGORITHM
AB The usage of heterogeneous multicore platforms is appealing for applications, e.g. hard real-time systems, due to the potential reduced energy consumption offered by such platforms. However, even in such platforms the power wall phenomena still imposes limits to performance. Hard real-time systems are part of life critical environments and reducing the energy consumption on such systems is an onerous and complex process. We tackle the problem from the perspective of different representative integer programming mathematical formulations and their interplay on the search for optimal solutions for Rate Monotonic (RM) and Earliest Deadline First (EDF) scheduling algorithms. The proposed models are based on a well-established formulation in the operational research literature, namely, the Multilevel Generalized Assignment Problem (MGAP). This paper, therefore, assesses the problem of finding optimal allocations and frequency assignments of hard real-time tasks among heterogeneous processors targeting low power consumption, but taking into account timing constraints. Computational experiments show that finding optimal solutions reduces the estimated energy consumption of the evaluated cases when compared to state-of-the-art algorithms. (C) 2017 Elsevier B.V. All rights reserved.
C1 [Valentin, Eduardo; de Freitas, Rosiane; Barreto, Raimundo] Fed Univ Amazonas UFAM, Grad Program Informat PPGI, Av Gen Rodrigo Otavio 6-200,Coroado 1, BR-69080900 Manaus, Amazonas, Brazil.
C3 Universidade Federal de Amazonas
RP Valentin, E (corresponding author), Fed Univ Amazonas UFAM, Grad Program Informat PPGI, Av Gen Rodrigo Otavio 6-200,Coroado 1, BR-69080900 Manaus, Amazonas, Brazil.
EM eduardo.valentin@icomp.ufam.edu.br; rosiane@icomp.ufam.edu.br;
   rbarreto@icomp.ufam.edu.br
RI da Silva Barreto, Raimundo/E-7905-2019
OI Barreto, Raimundo/0000-0001-8494-4225
FU FAPEAM [582/2014 (PRO-TI-PESQUISA)]
FX The authors acknowledge the support granted by FAPEAM through project
   582/2014 (PRO-TI-PESQUISA).
CR Alahmad BN, 2011, SUSTAIN COMPUT-INFOR, V1, P314, DOI 10.1016/j.suscom.2011.09.001
   Avella P, 2013, IEEE ACCESS, V1, P475, DOI 10.1109/ACCESS.2013.2273268
   Awan MA, 2013, IEEE REAL TIME, P205, DOI 10.1109/RTAS.2013.6531093
   Aydin H, 2001, 22ND IEEE REAL-TIME SYSTEMS SYMPOSIUM, PROCEEDINGS, P95, DOI 10.1109/REAL.2001.990600
   Barrefors B., 2014, 2014 IEEE 33 INT PER, P1, DOI [10.1109/PCCC.2014.7017092, DOI 10.1109/PCCC.2014.7017092]
   Brucker P., 2010, SCHEDULING ALGORITHM
   Burd TD, 1996, J VLSI SIG PROC SYST, V13, P203, DOI 10.1007/BF01130406
   Ceselli A, 2006, OPER RES, V54, P1172, DOI 10.1287/opre.1060.0323
   Chen H, 2011, J PARALLEL DISTR COM, V71, P132, DOI 10.1016/j.jpdc.2010.09.011
   Chen JJ, 2011, J SYST ARCHITECT, V57, P573, DOI 10.1016/j.sysarc.2010.09.008
   COCHRAN R, 2013, THESIS
   Da He, 2012, 2012 15th Euromicro Conference on Digital System Design (DSD 2012), P288, DOI 10.1109/DSD.2012.7
   *FREE SOFTW FDN, 2012, GNU LINEAR PROGRAMMI
   GLOVER F, 1979, INTERFACES, V0009
   Goossens J, 2008, LECT NOTES COMPUT SC, V5401, P388, DOI 10.1007/978-3-540-92221-6_25
   He C, 2012, J SYST SOFTWARE, V85, P780, DOI 10.1016/j.jss.2011.10.008
   He D, 2012, IEEE I C EMBED SOFTW, P1748, DOI 10.1109/HPCC.2012.263
   Lehoczky J., 1989, Proceedings. Real Time Systems Symposium (Cat. No.89CH2803-5), P166, DOI 10.1109/REAL.1989.63567
   LIU CL, 1973, J ACM, V20, P46, DOI 10.1145/321738.321743
   Osorio MA, 2003, EUR J OPER RES, V151, P238, DOI 10.1016/S0377-2217(02)00576-3
   Prescilla K, 2013, MICROPROCESS MICROSY, V37, P583, DOI 10.1016/j.micpro.2013.05.003
   *SAMS EL CO LTD, 2014, SAMS EX
   Valentin E., 2010, WORKSH REAL TIM SYST, P27
   Valentin E, 2016, PROCEDIA COMPUT SCI, V80, P1135, DOI 10.1016/j.procs.2016.05.425
   Valentin E, 2015, INT WORKS POW TIM, P1, DOI 10.1109/PATMOS.2015.7347580
   Venkatachalam V, 2005, ACM COMPUT SURV, V37, P195, DOI 10.1145/1108956.1108957
   Yang CY, 2009, DES AUT TEST EUROPE, P694
   Yu Y, 2003, J INF SCI ENG, V19, P433
   [No title captured]
NR 29
TC 3
Z9 3
U1 0
U2 7
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 1
PY 2018
VL 165
SI SI
BP 38
EP 53
DI 10.1016/j.scico.2017.08.005
PG 16
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GV3KH
UT WOS:000445992300004
OA Bronze
DA 2024-07-18
ER

PT J
AU Hu, Y
   Yan, JW
   Yan, D
   Lu, Q
   Yan, J
AF Hu, Yan
   Yan, Jiwei
   Yan, Dong
   Lu, Qiong
   Yan, Jun
TI Lightweight energy consumption analysis and prediction for Android
   applications
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Android application; Energy consumption analysis; Energy prediction;
   Linear regression
AB The energy consumption problem is a hot topic in Android communities. The high energy cost caused by improper development brings lots of complaints from users. An effective and efficient energy consumption analysis technique can guide Android developers to improve the energy efficiency of their apps. Existing researches on this problem focus on either system entity level that gives the energy consumption of the hardware, or source line level that calculates the energy cost of source codes. With the consideration of accuracy and cost of analysis, this paper proposes a lightweight and automatic approach to analyze and predict the energy consumption for Android apps. We conduct the study from a method-level and API-level perspective. The method-level analysis gives developers facts about the energy consumption of the user methods in their apps, while the API-level analysis shows the energy consumption of Android APIs, which can help them make good decisions about how to choose appropriate APIs to improve the energy efficiency of an Android app. We construct a statistical model from a set of energy values obtained by Dalvik bytecode based instrumentation and software-based measurement, to predict the energy consumption of method sequences or API sequences. The experiments on several real-world apps show that the proposed techniques have low overhead while persisting acceptable accuracy. (C) 2017 Elsevier B.V. All rights reserved.
C1 [Hu, Yan] Dalian Univ Technol, Sch Software, Dalian, Peoples R China.
   [Yan, Jiwei; Yan, Jun] Chinese Acad Sci, Inst Software, State Key Lab Comp Sci, Beijing, Peoples R China.
   [Yan, Dong; Lu, Qiong; Yan, Jun] Chinese Acad Sci, Inst Software, Technol Ctr Software Engn, Beijing, Peoples R China.
   [Yan, Jiwei; Yan, Dong; Yan, Jun] Univ Chinese Acad Sci, Beijing, Peoples R China.
C3 Dalian University of Technology; Chinese Academy of Sciences; Institute
   of Software, CAS; Chinese Academy of Sciences; Institute of Software,
   CAS; Chinese Academy of Sciences; University of Chinese Academy of
   Sciences, CAS
RP Yan, J (corresponding author), Chinese Acad Sci, Inst Software, State Key Lab Comp Sci, Beijing, Peoples R China.
EM yanjun@ios.ac.cn
RI Yan, Jiwei/AAM-8797-2021
OI Yan, Jiwei/0000-0001-8080-7506
FU National Natural Science Foundation of China [61672505, 61300017];
   National Key Basic Research (973) Program of China [2014CB340701]
FX This work is supported by National Natural Science Foundation of China
   (Grant No. 61672505, 61300017) and the National Key Basic Research (973)
   Program of China (Grant No. 2014CB340701).
CR [Anonymous], 2013, P ISWCS 2013 10 INT
   Banerjee A, 2014, 22ND ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (FSE 2014), P588, DOI 10.1145/2635868.2635871
   Basile D, 2017, STUD SYST DECIS CONT, V74, P187, DOI 10.1007/978-3-319-44162-7_10
   Carroll A., 2010, 2010 USENIX ANNUAL T
   Ferrari A, 2015, 2015 IEEE INTERNATIONAL CONFERENCE ON PERVASIVE COMPUTING AND COMMUNICATION WORKSHOPS (PERCOM WORKSHOPS), P421, DOI 10.1109/PERCOMW.2015.7134075
   Flinn J, 1999, WMCSA '99, SECOND IEEE WORKSHOP ON MOBILE COMPUTING SYSTEMS AND APPLICATIONS, PROCEEDINGS, P2, DOI 10.1109/MCSA.1999.749272
   Kansal A., 2010, 1 ACM S CLOUD COMP, P39
   Kim K., 2013, EMSOFT 2013
   KIRKPATRICK S, 1983, SCIENCE, V220, P671, DOI 10.1126/science.220.4598.671
   Li D, 2013, P 2013 INT S SOFTW T, P78, DOI DOI 10.1145/2483760.2483780
   Li D, 2015, 2015 10TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE 2015) PROCEEDINGS, P958, DOI 10.1145/2786805.2803190
   Li T., 2003, Performance Evaluation Review, V31, P160, DOI 10.1145/885651.781048
   Li X., 2018, CORR
   Linares-Vasquez M., 2014, Proceedings of the 11th Working Conference on Mining Software Repositories, P2
   Linares-Vásquez M, 2015, 2015 10TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE 2015) PROCEEDINGS, P143, DOI 10.1145/2786805.2786847
   Liqat U., 2016, LECT NOTES COMPUTER, V9964, P81
   Liu YP, 2014, IEEE T SOFTWARE ENG, V40, P911, DOI 10.1109/TSE.2014.2323982
   McIntire D, 2007, PROCEEDINGS OF THE SIXTH INTERNATIONAL SYMPOSIUM ON INFORMATION PROCESSING IN SENSOR NETWORKS, P576, DOI 10.1145/1236360.1236448
   Mittal R, 2012, MOBICOM 12: PROCEEDINGS OF THE 18TH ANNUAL INTERNATIONAL CONFERENCE ON MOBILE COMPUTING AND NETWORKING, P317
   Pathak A., 2012, Mobisys, DOI DOI 10.1145/2307636.2307661
   Pathak Abhijit D., 2012, Proceedings of the PCIM ASIA 2012. International Conference and Exhibition for Power Electronics, Intelligent Motion, Renewable Energy and Energy Management, P29
   Paul Kolin, 2010, Proceedings of the 2010 IEEE 10th International Conference on Computer and Information Technology (CIT 2010), P2421, DOI 10.1109/CIT.2010.416
   Ra M.-R., 2010, 8th International Conference on Mobile systems, Applications, and Services, P255
   Sahin C., 2012, 2012 First International Workshop on Green and Sustainable Software (GREENS), P55, DOI 10.1109/GREENS.2012.6224257
   Zhang L, 2010, PROCEEDINGS OF 2010 INTERNATIONAL CONFERENCE ON PUBLIC ADMINISTRATION (6TH), VOL II, P105, DOI 10.1145/1878961.1878982
NR 25
TC 12
Z9 13
U1 1
U2 22
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 15
PY 2018
VL 162
SI SI
BP 132
EP 147
DI 10.1016/j.scico.2017.05.002
PG 16
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GJ1UM
UT WOS:000435053400008
OA Bronze
DA 2024-07-18
ER

PT J
AU Autili, M
   Inverardi, P
   Tivoli, M
AF Autili, Marco
   Inverardi, Paola
   Tivoli, Massimo
TI Choreography Realizability Enforcement through the <i>Automatic
   Synthesis of Distributed Coordination Delegates</i>
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Choreography realizability; Realizability enforcement; Software
   integration; Automated synthesis; Service choreography; Distributed
   coordination
ID SERVICE CHOREOGRAPHIES
AB In the near future we will be surrounded by a virtually infinite number of software applications that provide services in the digital space. This situation promotes reuse based software production through composition of existing software services distributed over the Internet. Choreographies are a form of decentralized composition that model the external interaction of the participant services by specifying peer-to-peer message exchanges from a global perspective. When third-party (possibly black-box) services are to be composed, obtaining the distributed coordination logic required to enforce the realizability of the specified choreography is a non-trivial and error prone task. Automatic support is then needed. In this paper, we propose a formal approach to the enforcement of choreography realizability through the automatic synthesis of distributed Coordination Delegates (CDs). CDs are additional software entities with respect to the choreography participants. They are synthesized in order to proxify and control the participant services interaction. When interposed among the services, the synthesized entities enforce the collaboration prescribed by the choreography specification. We state correctness of our synthesis method and illustrate its formalization at work on an explanatory example. (C) 2017 Elsevier B.V. All rights reserved.
C1 [Autili, Marco; Inverardi, Paola; Tivoli, Massimo] Univ Aquila, Dipartimento Ingn & Sci Informaz & Matemat, Laquila, Italy.
C3 University of L'Aquila
RP Autili, M (corresponding author), Univ Aquila, Dipartimento Ingn & Sci Informaz & Matemat, Laquila, Italy.
EM marco.autili@univaq.it; paola.inverardi@univaq.it;
   massimo.tivoli@univaq.it
RI Tivoli, Massimo/A-7289-2008; AUTILI, Marco/AAG-7127-2020
OI AUTILI, Marco/0000-0001-5951-1567; TIVOLI, Massimo/0000-0001-9290-1997
FU European Union's H2020 Programme [644178]; Ministry of Economy and
   Finance [135/2012]; GAUSS national research project - MIUR under the
   PRIN program [2015KWREMX]; H2020 - Industrial Leadership [644178]
   Funding Source: H2020 - Industrial Leadership
FX This research work has been supported by (i) the European Union's H2020
   Programme under grant agreement number 644178 (project CHOReVOLUTION -
   Automated Synthesis of Dynamic and Secured Choreographies for the Future
   Internet), (ii) the Ministry of Economy and Finance, Cipe resolution No.
   135/2012 (project INCIPICT - INnovating City Planning through
   Information and Communication Technologies), and (iii) the GAUSS
   national research project, which has been funded by the MIUR under the
   PRIN 2015 program (Contract 2015KWREMX).
CR Autili M., 2017, TRANSITION STRATEGIE
   Autili M., 2014, LNCS, V8378
   Autili M, 2015, ELECTRON P THEOR COM, P18
   Autili M, 2015, ELECTRON P THEOR COM, P33, DOI 10.4204/EPTCS.201.3
   Autili M, 2015, IEEE SOFTWARE, V32, P50, DOI 10.1109/MS.2014.131
   Autili Marco, 2013, LNCS, V7793
   Basu S., 2012, DECIDING CHOREOGRAPH
   Basu S., 2011, P 20 INT C WORLD WID
   Basu S, 2016, LECT NOTES COMPUT SC, V9633, P13, DOI 10.1007/978-3-662-49665-7_2
   Bertolino A, 2009, 7TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P141, DOI 10.1145/1595696.1595719
   BROOKES SD, 1984, J ACM, V31, P560, DOI 10.1145/828.833
   Carbone M, 2013, ACM SIGPLAN NOTICES, V48, P263, DOI 10.1145/2480359.2429101
   European Commission, 2015, DIG AG EUR FUT INT R
   Farah Z, 2017, INT J SOFTW TOOLS TE, V19, P465, DOI 10.1007/s10009-016-0421-6
   Finkbeiner B., 2001, LANGUAGE CONTAINMENT, P24
   Gossler G, 2011, LNCS, P151, DOI [10.1007/978-3-642-35743-5_10, DOI 10.1007/978-3-642-35743-5_10]
   Gudemann Matthias, 2012, Automated Technology for Verification and Analysis. Proceedings of the 10th International Symposium, ATVA 2012, P238, DOI 10.1007/978-3-642-33386-6_20
   Güdemann M, 2013, LECT NOTES COMPUT SC, V7793, P226, DOI 10.1007/978-3-642-37057-1_16
   Hu DerekHao., 2008, AAAI, P1363
   Kazhamiakin R, 2006, LECT NOTES COMPUT SC, V4184, P227
   Kazhamiakin R, 2006, LECT NOTES COMPUT SC, V4229, P61
   LAMPORT L, 1978, COMMUN ACM, V21, P558, DOI 10.1145/359545.359563
   Lanese Ivan, 2015, Software, Services and Systems: Essays Dedicated to Martin Wirsing on the Occasion of his Retirement from the Chair of Programming and Software Engineering: LNCS 8950, P506
   Malek S., 2004, ARCHITECTING DEPENDA, P173
   Poizat P., 2012, P OF SAC 2012
   Trainotti M, 2005, LECT NOTES COMPUT SC, V3826, P495
   Uchitel S, 2009, IEEE T SOFTWARE ENG, V35, P384, DOI 10.1109/TSE.2008.107
   Weber B., 2012, ENABLING FLEXIBILITY
NR 28
TC 26
Z9 27
U1 0
U2 4
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD AUG 1
PY 2018
VL 160
SI SI
BP 3
EP 29
DI 10.1016/j.scico.2017.10.010
PG 27
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GG2HS
UT WOS:000432511400002
OA Bronze
DA 2024-07-18
ER

PT J
AU Camilli, M
   Gargantini, A
   Scandurra, P
AF Camilli, Matteo
   Gargantini, Angelo
   Scandurra, Patrizia
TI Zone-based formal specification and timing analysis of real-time
   self-adaptive systems
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Self-adaptation; Real-time systems; Petri nets; Formal verification;
   Timing analysis
ID MODEL-CHECKING; SPACE EXPLORATION; PETRI; VERIFICATION; ADAPTATION;
   FRAMEWORK
AB Self-adaptive software systems are able to autonomously adapt their behavior at run-time to react to internal dynamics and to uncertain and changing environment conditions. Formal specification and verification of self-adaptive systems are tasks generally very difficult to carry out, especially when involving time constraints. In this case, in fact, the system correctness depends also on the time associated with events.
   This article introduces the Zone-based Time Basic Petri nets specification formalism. The formalism adopts timed adaptation models to specify self-adaptive behavior with temporal constraints, and relies on a zone-based modeling approach to support separation of concerns. Zones identified during the modeling phase can be then used as modules either in isolation, to verify intro-zone properties, or all together, to verify inter-zone properties over the entire system. In addition, the framework allows the verification of (timed) robustness properties to guarantee self-healing capabilities when higher levels of reliability and availability are required to the system, especially when dealing with time-critical systems. This article presents also the ZAFETY tool, a JAVA software implementation of the proposed framework, and the validation and experimental results obtained in modeling and verifying two time-critical self-adaptive systems: the Gas Burner system and the Unmanned Aerial Vehicle system. (C) 2018 Elsevier B.V. All rights reserved.
C1 [Camilli, Matteo] Univ Milan, Dept Comp Sci, Milan, Italy.
   [Gargantini, Angelo; Scandurra, Patrizia] Univ Bergamo, Dept Management Informat & Prod Engn DIGIP, Bergamo, Italy.
C3 University of Milan; University of Bergamo
RP Camilli, M (corresponding author), Univ Milan, Dept Comp Sci, Milan, Italy.
EM matteo.camilli@unimi.it; angelo.gargantini@unibg.it;
   patrizia.scandurra@unibg.it
RI Gargantini, Angelo/E-6060-2012
OI Gargantini, Angelo/0000-0002-4035-0131; CAMILLI,
   MATTEO/0000-0003-2491-5267; SCANDURRA, Patrizia/0000-0002-9209-3624
CR Allen R, 1998, LECT NOTES COMPUT SC, V1382, P21, DOI 10.1007/BFb0053581
   ALUR R, 1993, INFORM COMPUT, V104, P2, DOI 10.1006/inco.1993.1024
   Arcaini P, 2017, ACM T AUTON ADAP SYS, V11, DOI 10.1145/3019598
   Bartels B., 2015, EAI ENDORSED T SELF, V1, pe5
   Bellettini C, 2012, INT SYMP SYMB NUMERI, P110, DOI 10.1109/SYNASC.2011.16
   Bellettini C, 2013, LECT NOTES COMPUT SC, V8169, P83, DOI 10.1007/978-3-642-41036-9_9
   Bellettini C, 2012, INT SYMP SYMB NUMERI, P295, DOI 10.1109/SYNASC.2012.18
   Bengtsson J, 2004, LECT NOTES COMPUT SC, V3098, P87, DOI 10.1007/978-3-540-27755-2_3
   BERTHOMIEU B, 1991, IEEE T SOFTWARE ENG, V17, P259, DOI 10.1109/32.75415
   Borger E., 2003, ABSTRACT STATE MACHI
   Boucheneb H, 2006, THEOR COMPUT SCI, V353, P208, DOI 10.1016/j.tcs.2005.11.002
   Boucheneb H, 2009, J LOGIC COMPUT, V19, P1509, DOI 10.1093/logcom/exp036
   Bouyer P, 2009, ELECTRON NOTES THEOR, V231, P323, DOI 10.1016/j.entcs.2009.02.044
   Boyer M, 2007, LECT NOTES COMPUT SC, V4546, P63
   Brun Y, 2009, LECT NOTES COMPUT SC, V5525, P48, DOI 10.1007/978-3-642-02161-9_3
   Calinescu R., 2010, 16 MON WORKSH REDM W
   Cámara J, 2014, 9TH INTERNATIONAL SYMPOSIUM ON SOFTWARE ENGINEERING FOR ADAPTIVE AND SELF-MANAGING SYSTEMS (SEAMS 2014), P155, DOI 10.1145/2593929.2593933
   Camilli CBM, 2016, CONCURR COMP-PRACT E, V28, P3025, DOI 10.1002/cpe.3652
   Camilli Matteo, 2016, 2016 18th International Symposium on Symbolic and Numeric Algorithms for Scientific Computing (SYNASC), P165, DOI 10.1109/SYNASC.2016.036
   Camilli M., 2017, INVERSE UNCERTAINTY, P375
   Camilli M, 2018, LECT NOTES COMPUT SC, V10729, P168, DOI 10.1007/978-3-319-74781-1_12
   Camilli M, 2018, LECT NOTES COMPUT SC, V10729, P187, DOI 10.1007/978-3-319-74781-1_14
   Camilli M, 2017, LECT NOTES COMPUT SC, V10227, P115, DOI 10.1007/978-3-319-57288-8_8
   Camilli M, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE COMPANION 2014), P638, DOI 10.1145/2591062.2591088
   Camilli M, 2015, 2015 IEEE 26TH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING (ISSRE), P303, DOI 10.1109/ISSRE.2015.7381823
   Camilli M, 2014, INT SYMP SYMB NUMERI, P333, DOI 10.1109/SYNASC.2014.52
   Camilli M, 2012, PROC INT CONF SOFTW, P1638, DOI 10.1109/ICSE.2012.6227217
   Cardellini V, 2012, IEEE T SOFTWARE ENG, V38, P1138, DOI 10.1109/TSE.2011.68
   Cheng B., 2009, SOFTWARE ENG SELF AD
   Clarke. E. M., 1982, LOGICS OF PROGRAMS, P52, DOI [10 . 1007 / BFb0025774, DOI 10.1007/BFB0025774]
   de la Iglesia DG, 2015, ACM T AUTON ADAP SYS, V10, DOI 10.1145/2724719
   de la Iglesia DG, 2013, PROCEEDINGS OF THE 8TH INTERNATIONAL SYMPOSIUM ON SOFTWARE ENGINEERING FOR ADAPTIVE AND SELF-MANAGING SYSTEMS (SEAMS 2013), P83, DOI 10.1109/SEAMS.2013.6595495
   de Lemos R., 2002, Proceedings Workshop on Self-healing Systems, P39, DOI DOI 10.1145/582128.582136
   de Lemos R., 2013, Lecture Notes in Computer Science, V7475, P1, DOI DOI 10.1007/978-3-642-35813-5_1
   Ding ZH, 2016, IEEE T SYST MAN CY-S, V46, P483, DOI 10.1109/TSMC.2015.2433892
   Dingle N.J., 2009, ACM SIGMETRICS PERFO, V36, P34, DOI DOI 10.1145/1530873.1530881
   Esfahani N., 2010, SOFTWARE ENG SELF AD, P214
   Esfahani Naeem, 2013, Uncertainty in SelfAdaptive Software Systems, P214, DOI [DOI 10.1007/978-3-642-35813-59, DOI 10.1007/978-3-642-35813-5_9]
   Filieri A, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P341, DOI 10.1145/1985793.1985840
   FLOYD RW, 1962, COMMUN ACM, V5, P345, DOI 10.1145/367766.368168
   Gansner ER, 2000, SOFTWARE PRACT EXPER, V30, P1203, DOI 10.1002/1097-024X(200009)30:11<1203::AID-SPE338>3.0.CO;2-N
   Gardey G, 2006, THEOR PRACT LOG PROG, V6, P301, DOI 10.1017/S147106840600264X
   Garlan D., 2014, DAGST SEMINAR, P67
   GHEZZI C, 1991, IEEE T SOFTWARE ENG, V17, P160, DOI 10.1109/32.67597
   Giese Holger, 2013, Lecture Notes in Computer Science, V7740, P152, DOI [10.1007/978-3-642-36249-1_6, DOI 10.1007/978-3-642-36249-1_6]
   Güdemann M, 2007, IEEE INT SYMP CIRC S, P2922, DOI 10.1109/ISCAS.2007.377861
   Gunetti P, 2013, J AEROSP INFORM SYST, V10, P53, DOI 10.2514/1.53282
   Gurevich Y., 2000, ACM T COMPUT LOG, V1, P77, DOI DOI 10.1145/343369.343384
   Hillah LM, 2010, LECT NOTES COMPUT SC, V6128, P318, DOI 10.1007/978-3-642-13675-7_20
   Horen J., 1983, LINEAR PROGRAMMING
   Horen J., 1985, Networks, V15, P273, DOI DOI 10.1002/NET.3230150211
   Huebscher MC, 2008, ACM COMPUT SURV, V40, DOI 10.1145/1380584.1380585
   Iftikhar MU, 2014, 9TH INTERNATIONAL SYMPOSIUM ON SOFTWARE ENGINEERING FOR ADAPTIVE AND SELF-MANAGING SYSTEMS (SEAMS 2014), P125, DOI 10.1145/2593929.2593944
   Iftikhar MU, 2012, ELECTRON P THEOR COM, P45, DOI 10.4204/EPTCS.91.4
   Juanole G., 1995, Proceedings. 1995 IEEE International Workshop on Factory Communication Systems. WFCS'95 (Cat. No.95TH8141), P107, DOI 10.1109/WFCS.1995.482656
   Kephart JO, 2003, COMPUTER, V36, P41, DOI 10.1109/MC.2003.1160055
   Lee WJ, 1998, IEEE T SOFTWARE ENG, V24, P1115, DOI 10.1109/32.738342
   Marsan MA., 1994, Modelling with Generalized Stochastic Petri Nets
   Mirandola R, 2014, SCI COMPUT PROGRAM, V80, P356, DOI 10.1016/j.scico.2013.09.017
   Moreno GA, 2015, 2015 10TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE 2015) PROCEEDINGS, P1, DOI 10.1145/2786805.2786853
   Morin B, 2009, PROC INT CONF SOFTW, P122, DOI 10.1109/ICSE.2009.5070514
   Musliner D. J., 2000, P INT WORKSH SELF AD, V1936, P143, DOI [10. 1007/3-540-44584-6_12, DOI 10.1007/3-540-44584-6_12]
   Norris J., 1998, CAMB SER STAT PROBAB
   Pan L, 2014, IEEE T SYST MAN CY-S, V44, P482, DOI 10.1109/TSMC.2013.2258907
   Perez-Palacin Diego, 2014, 5 ACMSPEC INT C PERF, V14, P3
   Peterson J.L., 1977, ACM Comput. Surv, V9, P223
   RAMCHANDANI C, 1974, TECH REP
   Robertson P, 2005, LECT NOTES COMPUT SC, V3460, P112
   Rodosek G. D., 2009, DAGSTUHL SEMINAR P
   Salehie M, 2009, ACM T AUTON ADAP SYS, V4, DOI 10.1145/1516533.1516538
   Schaefer P, 2001, AEROSP CONF PROC, P677
   Tarjan R., 1971, P 12 ANN S SWITCH AU, P114, DOI DOI 10.1109/SWAT.1971.10
   Vachtsevanos G., 2006, P 10 WSEAS INT C SYS, P56
   Weyns Danny, 2017, Software Engineering for Self-Adaptive Systems III. Assurances. International Seminar. Revised Selected and Invited Papers: LNCS 9640, P31, DOI 10.1007/978-3-319-74183-3_2
   Weyns D., 2012, CAN C COMP SCI SOFTW, P67, DOI 10.1145/2347583.2347592
   Weyns D, 2016, PR INT CONF AUTONOM, P364, DOI 10.1109/ICAC.2016.67
   Zeller M., 2012, 2012 7th International Symposium on Software Engineering for Adaptive and Self-Managing Systems, P73, DOI 10.1109/SEAMS.2012.6224393
   Zhang Ji., 2005, WADS 05, P1, DOI DOI 10.1145/1083217.1083220
   Zhang Ji, 2006, P 28 INT C SOFTW ENG, P371
NR 79
TC 12
Z9 12
U1 0
U2 8
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUL 1
PY 2018
VL 159
BP 28
EP 57
DI 10.1016/j.scico.2018.03.002
PG 30
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GF2CV
UT WOS:000431746800002
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Ralph, P
AF Ralph, Paul
TI The two paradigms of software development research
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Empiricism; Rationalism; Philosophy of science; Software design;
   Empirical software engineering
ID SYSTEMS DEVELOPMENT-PROJECTS; DESIGN; MODEL; SCIENCE; METHODOLOGIES;
   PARADOX; SENSE
AB The most profound conflict in software engineering is not between positivist and interpretivist research approaches or Agile and Heavyweight software development methods, but between the Rational and Empirical Design Paradigms. The Rational and Empirical Paradigms are disparate constellations of beliefs about how software is and should be created. The Rational Paradigm remains dominant in software engineering research, standards and curricula despite being contradicted by decades of empirical research. The Rational Paradigm views analysis, design and programming as separate activities despite empirical research showing that they are simultaneous and inextricably interconnected. The Rational Paradigm views developers as executing plans despite empirical research showing that plans are a weak resource for informing situated action. The Rational Paradigm views success in terms of the Project Triangle (scope, time, cost and quality) despite empirical researching showing that the Project Triangle omits critical dimensions of success. The Rational Paradigm assumes that analysts elicit requirements despite empirical research showing that analysts and stakeholders co-construct preferences. The Rational Paradigm views professionals as using software development methods despite empirical research showing that methods are rarely used, very rarely used as intended, and typically weak resources for informing situated action. This article therefore elucidates the Empirical Design Paradigm, an alternative view of software development more consistent with empirical evidence. Embracing the Empirical Paradigm is crucial for retaining scientific legitimacy, solving numerous practical problems and improving software engineering education. (C) 2018 Elsevier B.V. All rights reserved.
C1 [Ralph, Paul] Univ Auckland, Auckland, New Zealand.
   [Ralph, Paul] Univ British Columbia, Vancouver, BC, Canada.
C3 University of Auckland; University of British Columbia
RP Ralph, P (corresponding author), Univ Auckland, Dept Comp Sci, Auckland, New Zealand.
EM paul@paulralph.name
RI Ralph, D. Paul/H-4322-2019
OI Ralph, D. Paul/0000-0002-7411-0857
CR Alexander C., 1964, Notes on the Synthesis of Form
   [Anonymous], SOFTWARE ENG 2004 CU
   [Anonymous], P 3 SEMAT WORKSH GEN
   [Anonymous], CHAOS DAT CHAOS SURV
   [Anonymous], P 2013 INT C SOFTW E
   [Anonymous], MANAG DECIS
   [Anonymous], SOFTW ENG 2014 CURR
   [Anonymous], P INT C EV ASS SOFTW
   [Anonymous], 1997, THESIS
   [Anonymous], P INT C SOFTW ENG
   [Anonymous], WHATS WRONG SOCIOLOG
   [Anonymous], P 10 C SOFTW MAINT R
   [Anonymous], P INT C SOFTW ENG
   [Anonymous], P 14 INT C EV ASS SO
   [Anonymous], 2010, DESIGN RES INFORM SY
   [Anonymous], 1998, RATIONAL UNIFIED PRO
   [Anonymous], 291482011 ISOIECIEEE
   [Anonymous], SOFTWARE ENG 2014 CU
   [Anonymous], P INT C INF SYST
   [Anonymous], METHODS NEED THEORY
   [Anonymous], P INT C EV ASS SOFTW
   [Anonymous], 2005, Extreme programming explained: Embrace change
   [Anonymous], 2010, J ASS INFORM SYSTEMS, DOI DOI 10.17705/1jais.00225
   [Anonymous], 2005, HARVARD DESIGN MAGAZ
   [Anonymous], SOFTWARE DEV WASTE
   [Anonymous], 2008, STANFORD ENCY PHILOS
   [Anonymous], PHILOS SCI MAPPING R
   [Anonymous], MAN SUCC PROJ PRINCE
   [Anonymous], LEARNABILITY LINGUIS
   [Anonymous], ESS KERN LANG SOFTW
   Archer M., 2016, Perspectives
   Arvola M., 2007, Artifact, V1, P106, DOI [10.1080/17493460601117272, DOI 10.1080/17493460601117272]
   Atkinson R., 1999, International Journal of Project Management, V17, P337, DOI [DOI 10.1016/S0263-7863(98)00069-6, 10.1016/S0263-7863(98)00069-6]
   AVGEROU C, 1993, J INFORM TECHNOL, V8, P277, DOI 10.1057/jit.1993.38
   Avison D.E., 1999, RETHINKING MANAGEMEN, P250
   Bahill A.T., 2009, Handbook of systems engineering and management, P205
   Baker M.J., 2003, MARKETING REV, V3, P343
   BANSLER JP, 1993, ACM T INFORM SYST, V11, P165, DOI 10.1145/130226.148055
   Beck K., 2011, MANIFESTO AGILE SOFT
   Beck Kent L., 2003, Test Driven Development By Example
   Berger Peter., 1966, SOCIAL CONSTRUCTION
   Bjarnason E., 2014, 3rd SEMAT Workshop on General Theories of Software Engineering (GTSE'14), P21, DOI DOI 10.1145/2593752.2593757
   BOEHM BW, 1988, COMPUTER, V21, P61, DOI 10.1145/12944.12948
   Bourque Pierre, 2014, SWEBOK: Guide to the Software Engineering Body of Knowledge, V3rd
   Brooks F.P., 2010, Design of Design: Essays from a Computer Scientist
   Brown AD, 2008, HUM RELAT, V61, P1035, DOI 10.1177/0018726708094858
   Bunge M., 1984, The Sceptical Inquirer, P36
   CAMPANARIO JM, 1995, SCI COMMUN, V16, P304, DOI 10.1177/1075547095016003004
   Campbell DT., 1963, EXPT QUASIEXPERIMENT
   Chalmers A. F., 1999, WHAT IS THIS THING C
   Checkland P., 1999, System Thinking, System Practice, V2e
   CHOMSKY N, 1967, SYNTHESE, V17, P2, DOI 10.1007/BF00485013
   Conboy K, 2009, INFORM SYST RES, V20, P329, DOI 10.1287/isre.1090.0236
   Cook VJ., 1996, CHOMSKYS UNIVERSAL G, V2nd
   Cottingham John., 1984, RATIONALISM
   Cross, 2011, Design Thinking: Understanding How Designers Think and Work, DOI DOI 10.5040/9781474293884
   Cross N, 2007, BOARD INT RES DES, P1, DOI 10.1007/978-3-7643-8485-2
   Cross N., 2001, Design Studies, V22, P425, DOI [10.1016/S0142-694X(01)00009-6, DOI 10.1016/S0142-694X(01)00009-6]
   CROSS N., 1992, RES DESIGN THINKING
   Cross N., 2001, DESIGN KNOWING LEARN, P79
   Cross N., 1997, Design Studies, V18, P427, DOI DOI 10.1016/S0142-694X(97)00010-0
   Cross N., 2001, Design knowing and learning: Cognition in design education, V7, P9
   CURTIS B, 1992, COMMUN ACM, V35, P75, DOI 10.1145/130994.130998
   Damer T.Edward., 2008, Attacking Faulty Reasoning: A Practical Guide to Fallacy-Free Arguments
   DeLone WH, 2003, J MANAGE INFORM SYST, V19, P9, DOI 10.1080/07421222.2003.11045748
   Devanbu P., 2016, P 38 INT C SOFTWARE, P108, DOI [DOI 10.1590/0103, 10.1145/2884781, DOI 10.1145/2884781]
   Dobing B, 2006, COMMUN ACM, V49, P109, DOI 10.1145/1125944.1125949
   DORST K., 1995, DESIGN STUD, V16, P261, DOI DOI 10.1016/0142-694X(94)00012-3
   Dorst K, 2006, DES ISSUES, V22, P4, DOI 10.1162/desi.2006.22.3.4
   Ewusi-Mensah K., 2003, Software Development Failures
   Ferneley EH, 2006, EUR J INFORM SYST, V15, P345, DOI 10.1057/palgrave.ejis.3000629
   Fishburn P.C., 1970, Utility theory for decision making: Technical report
   Fitzgerald B, 2006, MIS QUART, V30, P587
   Forsberg K., 1992, Eng. Manag. J., V4, P36
   Freeman P, 2004, COMMUN ACM, V47, P19, DOI 10.1145/1012037.1012054
   Fullerton Tracy, 2004, GAM DES WORKSH DES P
   Gero J. S., 2007, P 16 INT C ENG DES P
   GERO JS, 1990, AI MAG, V11, P26
   Goguen J.A., 1993, 1993 P IEEE INT S RE, P152, DOI DOI 10.1109/ISRE.1993.324822
   Grudin J., 2002, P PART DES C PDC 200, P141
   Hannay JE, 2009, INFORM SOFTWARE TECH, V51, P1110, DOI 10.1016/j.infsof.2009.02.001
   Herbsleb J, 1997, COMMUN ACM, V40, P30, DOI 10.1145/255656.255692
   Herbsleb JD, 1996, PROC INT CONF SOFTW, P323, DOI 10.1109/ICSE.1996.493427
   Herrmann A, 2009, EMPIR SOFTW ENG, V14, P644, DOI 10.1007/s10664-009-9105-0
   Hevner AR, 2004, MIS QUART, V28, P75, DOI 10.2307/25148625
   Hoffmann R, 2001, RATION SOC, V13, P205, DOI 10.1177/104346301013002003
   Hookway C., 2013, The Stanford Encyclopedia of Philosophy
   Hunt SD, 2008, ORGAN STUD, V29, P1469, DOI 10.1177/0170840608099521
   IEEE, 1998, 8301998 IEEE
   Jacobson Ivar., 1999, AW OBJ TECHNOL S
   James W., 1976, ESSAYS RADICAL EMPIR
   Johnson P., 2012, IEEE Software, V29, P94, DOI 10.1109/MS.2012.127
   Kirsch LJ, 2002, MANAGE SCI, V48, P484, DOI 10.1287/mnsc.48.4.484.204
   Kitchenham BA, 2004, PROC INT CONF SOFTW, P273
   KLING R, 1980, COMPUT SURV, V12, P61, DOI 10.1145/356802.356806
   Ko AJ, 2015, EMPIR SOFTW ENG, V20, P110, DOI 10.1007/s10664-013-9279-3
   Kruchten P, 2005, IEEE SOFTWARE, V22, P52, DOI 10.1109/MS.2005.33
   Kruchten P.., 2004, RATIONAL UNIFIED PRO
   Kuhn T.S., 1962, The structure of scientifc revolutions, V3rd ed.
   Kurtz CF, 2003, IBM SYST J, V42, P462, DOI 10.1147/sj.423.0462
   Latour B., 1987, SCI ACTION
   Laudon K.C., 2009, MANAGEMENT INFORM SY, V11th
   Levina N, 2005, INFORM SYST RES, V16, P109, DOI 10.1287/isre.1050.0055
   Lewis MW, 2000, ACAD MANAGE REV, V25, P760, DOI 10.2307/259204
   Lichtenstein S, 2006, CONSTRUCTION OF PREFERENCE, P1, DOI 10.2277/ 0521542200
   Mahoney Michael J, 1977, COGNITIVE THERAPY RE, V1, P161, DOI DOI 10.1007/BF01173636
   Maiden Neil, 2010, Proceedings of the 2010 IEEE 18th International Conference on Requirements Engineering (RE2010), P57, DOI 10.1109/RE.2010.16
   MARCH ST, 1995, DECIS SUPPORT SYST, V15, P251, DOI 10.1016/0167-9236(94)00041-2
   Markie Peter., 2013, The Stanford Encyclopedia of Philosophy
   Mathiassen L, 2002, INFORM SYST J, V12, P81, DOI 10.1046/j.1365-2575.2002.00122.x
   McGrew T., 2009, The Philosophy of Science: an Historical Anthology, VVolume 14
   Mens T, 2004, IEEE T SOFTWARE ENG, V30, P126, DOI 10.1109/TSE.2004.1265817
   Mingers J., 2004, Information and Organization, V14, P87, DOI 10.1016/j.infoandorg.2003.06.001
   Mohanani R, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P895, DOI 10.1145/2568225.2568235
   Molokken K, 2003, 2003 INTERNATIONAL SYMPOSIUM ON EMPIRICAL SOFTWARE ENGINEERING, PROCEEDINGS, P223, DOI 10.1109/ISESE.2003.1237981
   Nandhakumar J., 1999, Information Technology & People, V12, P176, DOI 10.1108/09593849910267224
   Newell A., 1972, HUMAN PROBLEM SOLVIN, V104
   Newell MichaelW., 2004, The Project Management Question and Answer Book
   Pahl G., 1996, ENG DESIGN, DOI DOI 10.1557/S0883769400035776
   Parnas DL, 2009, KNOWL-BASED SYST, V22, P132, DOI 10.1016/j.knosys.2008.11.001
   PARNAS DL, 1995, SCI COMPUT PROGRAM, V25, P41, DOI 10.1016/0167-6423(95)96871-J
   Parnas DL, 2003, 2003 INTERNATIONAL SYMPOSIUM ON EMPIRICAL SOFTWARE ENGINEERING, PROCEEDINGS, P2, DOI 10.1109/ISESE.2003.1237959
   PARNAS DL, 1986, IEEE T SOFTWARE ENG, V12, P251, DOI 10.1109/TSE.1986.6312940
   Parsons J, 2008, MIS QUART, V32, P839
   Paulk M., 1993, CAPABILITY MATURITY
   Polya G., 1957, How to Solve It. A New Aspect of Mathematical Method, V2, DOI DOI 10.1515/9781400828678
   Poppendieck M., 2007, Lean software development, V1st
   Poppendieck M., 2003, Lean Software Development: An Agile Tollkit
   Rainer A, 2003, 2003 INTERNATIONAL SYMPOSIUM ON EMPIRICAL SOFTWARE ENGINEERING, PROCEEDINGS, P326, DOI 10.1109/ISESE.2003.1237993
   Rajlich V, 2006, COMMUN ACM, V49, P67, DOI 10.1145/1145287.1145289
   Ralph P., 2010, THESIS
   Ralph P., 2012, P 2012 INT C INF SYS
   Ralph P, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P24, DOI 10.1145/2568225.2568261
   Ralph P, 2015, 2015 IEEE/ACM 5TH INTERNATIONAL WORKSHOP ON THE TWIN PEAKS OF REQUIREMENTS AND ARCHITECTURE (TWINPEAKS), P20, DOI 10.1109/TwinPeaks.2015.12
   Ralph P, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 1, P20, DOI 10.1109/ICSE.2015.25
   Ralph P, 2016, INFORM SOFTWARE TECH, V70, P232, DOI 10.1016/j.infsof.2015.06.010
   Ralph P, 2015, SCI COMPUT PROGRAM, V101, P21, DOI 10.1016/j.scico.2014.11.007
   Ralph P, 2013, REQUIR ENG, V18, P293, DOI 10.1007/s00766-012-0161-4
   Ralph P, 2010, LECT NOTES COMPUT SC, V6105, P139, DOI 10.1007/978-3-642-13335-0_10
   Ralph P, 2009, LECT NOTES BUS INF P, V14, P103
   Robinson H, 1998, COMPUT J, V41, P363, DOI 10.1093/comjnl/41.6.363
   Rodriguez L.C., 2009, Handbook of Research on Modern Systems Analysis and Design Technologies and Applications, P76
   Royce W.W., 1970, P IEEE WESCON IEEE, P1
   Runeson P, 2009, EMPIR SOFTW ENG, V14, P131, DOI 10.1007/s10664-008-9102-8
   RUSSELL DM, 1993, HUMAN FACTORS IN COMPUTING SYSTEMS, P269
   Sabherwal R, 2003, J INF TECHNOL-UK, V18, P69, DOI 10.1080/0268396032000101144
   Samuelson W., 1988, Journal of Risk and Uncertainty, V1, P7, DOI [10.1007/BF00055564, DOI 10.1007/BF00055564]
   Schon D., 1984, The Reflective Practitioner: How Professionals Think in Action
   Schwaber K., 2021, SCRUM GUIDE
   Schwaber K., 2001, Agile software development with scrum
   Sharp H, 2000, IEEE SOFTWARE, V17, P40, DOI 10.1109/52.819967
   Shore B, 2008, PROJ MANAG J, V39, P5, DOI 10.1002/pmj.20082
   Sim SK, 2003, RES ENG DES, V14, P200, DOI 10.1007/s00163-003-0037-1
   Simon H.A., 1996, The Sciences of the Artificial, V3rd ed
   Simon H.A., 1976, From substantive to procedural rationality, 25 years of economic theory, P65, DOI DOI 10.1007/978-1-4613-4367-7_6
   SIMON HA, 1956, PSYCHOL REV, V63, P129, DOI 10.1037/h0042769
   Sjoberg DIK, 2002, 2002 INTERNATIONAL SYMPOSIUM ON EMPIRICAL SOFTWARE ENGINEERING, PROCEEDINGS, P17, DOI 10.1109/ISESE.2002.1166921
   Stacey P, 2009, INFORM SYST J, V19, P479, DOI 10.1111/j.1365-2575.2007.00273.x
   Stacey P, 2008, COMMUN ACM, V51, P143, DOI 10.1145/1409360.1409387
   Stefik A, 2017, COMPUTER, V50, P60, DOI 10.1109/MC.2017.3001257
   STEVENS WP, 1974, IBM SYST J, V13, P115, DOI 10.1147/sj.132.0115
   Stigliani I, 2012, ACAD MANAGE J, V55, P1232, DOI 10.5465/amj.2010.0890
   Stol KJ, 2016, PROC INT CONF SOFTW, P120, DOI 10.1145/2884781.2884833
   Stolterman E., 1991, Scandinavian Journal of Information Systems, V3, P137
   Suchman L, 2007, LEARN DOING, P1, DOI 10.2277/052167588X
   Suchman L. A., 1987, Plans and situated actions: The problem of human-machine communication
   Tiwana A, 2009, J MANAGE INFORM SYST, V26, P9, DOI 10.2753/MIS0742-1222260301
   Topi H, 2010, COMMUN ASSOC INF SYS, V26, P359
   Trochim W.M., 2001, Research Methods Knowledge Base, V2
   Truex D., 2000, Accounting, Management and Information Technologies, V10, P53, DOI 10.1016/S0959-8022(99)00009-0
   VANDEVEN AH, 1995, ACAD MANAGE REV, V20, P510, DOI 10.2307/258786
   Venable John, 2012, Design Science Research in Information Systems. Advances in Theory and Practice. Proceedings 7th International Conference, DESRIST 2012, P423, DOI 10.1007/978-3-642-29863-9_31
   Vermaas PE, 2007, DESIGN STUD, V28, P133, DOI 10.1016/j.destud.2006.11.001
   VISSER W, 1990, INT J MAN MACH STUD, V33, P247, DOI 10.1016/S0020-7373(05)80119-1
   Weber R, 2004, MIS QUART, V28, pIII
   Weick K., 1995, SENSEMAKING ORG
   WEICK KE, 1976, ADMIN SCI QUART, V21, P1, DOI 10.2307/2391875
   Whitley E.A., 1998, P 19 INT C INFORM SY, P68
   Whitworth E, 2007, LECT NOTES COMPUT SC, V4536, P62
   Wufka M, 2015, 2015 AGILE CONFERENCE, P60, DOI 10.1109/Agile.2015.10
   Wynekoop JL, 1997, INFORM SYST J, V7, P47, DOI 10.1046/j.1365-2575.1997.00004.x
   Yin R.K., 2009, CASE STUDIES DESIGN, V4th
   Zannier C, 2007, INFORM SOFTWARE TECH, V49, P637, DOI 10.1016/j.infsof.2007.02.010
   Zelkowitz MV, 2009, J SYST SOFTWARE, V82, P373, DOI 10.1016/j.jss.2008.06.040
   Zheng YQ, 2011, INFORM SYST J, V21, P303, DOI 10.1111/j.1365-2575.2010.00360.x
NR 185
TC 20
Z9 23
U1 0
U2 29
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAY 1
PY 2018
VL 156
BP 68
EP 89
DI 10.1016/j.scico.2018.01.002
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Social Science Citation Index (SSCI)
SC Computer Science
GA GA7AE
UT WOS:000428486100004
DA 2024-07-18
ER

PT J
AU Kuhn, S
   Ulidowski, I
AF Kuhn, Stefan
   Ulidowski, Irek
TI Local reversibility in a Calculus of Covalent Bonding
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Reversible process calculi; Local reversibility; Modelling of
   biochemical reactions
ID ALGEBRAIC PROCESS CALCULI; PI-CALCULUS; SYSTEMS; ABSTRACTION;
   SIMULATION; MEMBRANES
AB We introduce a process calculus with a new prefixing operator that allows us to model locally controlled reversibility. Actions can be undone spontaneously, as in other reversible process calculi, or as pairs of concerted actions, where performing a weak action forces undoing of another action. The new operator in its full generality allows us to model out-of-causal order computation, where causes are undone before their effects are undone, which goes beyond what typical reversible calculi can express. However, the core calculus, which uses only the reduced form of the new operator, is well behaved as it satisfied causal consistency. We demonstrate the usefulness of the calculus by modelling the hydration of formaldehyde in water into methanediol, an industrially important reaction, where the creation and breaking of some bonds are examples of locally controlled out-of-causal order (C) computation. 2017 Elsevier B.V. All rights reserved.
C1 [Kuhn, Stefan; Ulidowski, Irek] Univ Leicester, Dept Informat, Leicester LE1 7RH, Leics, England.
C3 University of Leicester
RP Ulidowski, I (corresponding author), Univ Leicester, Dept Informat, Leicester LE1 7RH, Leics, England.
EM iu3@le.ac.uk
RI Ulidowski, Irek/GSD-5747-2022; Ulidowski, Irek/GSE-3147-2022; Kuhn,
   Stefan/AAN-3350-2020
OI Ulidowski, Irek/0000-0002-3834-2036; Kuhn, Stefan/0000-0002-5990-4157
FU COST Action on Reversible Computation - extending horizons of computing
   [IC1405]
FX We are grateful to the referees for their detailed and helpful comments
   and suggestions. The authors acknowledge partial support of COST Action
   IC1405 on Reversible Computation - extending horizons of computing. The
   second author acknowledges the support by the University of Leicester in
   granting him Academic Study Leave, and thanks Nagoya University for
   support during the study leave.
CR [Anonymous], 1980, LNCS
   [Anonymous], 1999, Communicating and Mobile Systems: The Calculus
   [Anonymous], 1996, The barrier of objects: From dynamical systems to bounded organizations
   Baeten J.C.M., 1990, Cambridge Tracts in Theoretical Computer Science, V18
   Cardelli L, 2005, LECT NOTES COMPUT SC, V3082, P257
   Ciocchetta F, 2009, THEOR COMPUT SCI, V410, P3065, DOI 10.1016/j.tcs.2009.02.037
   Claydon J., 2001, ORGANIC CHEM
   Cleaveland R, 2001, HDB PROCESS ALGEBRA, P711, DOI DOI 10.1016/B978-044482830-9/50030-8
   Cristescu I, 2013, IEEE S LOG, P388, DOI 10.1109/LICS.2013.45
   Danos V, 2004, THEOR COMPUT SCI, V325, P69, DOI 10.1016/j.tcs.2004.03.065
   Danos V, 2004, LECT NOTES COMPUT SC, V3170, P292
   Danos V, 2007, ELECTRON NOTES THEOR, V180, P31, DOI 10.1016/j.entcs.2004.01.040
   Fages Francois, 2004, Journal of Biological Physics and Chemistry, V4, P64, DOI 10.4024/2040402.jbpc.04.02
   Fokkink W.J., 2000, TEXTS THEORETICAL CO, DOI [10.1007/978-3-662-04293-9, DOI 10.1007/978-3-662-04293-9]
   GILLESPIE DT, 1977, J PHYS CHEM-US, V81, P2340, DOI 10.1021/j100540a008
   Hoare C., 1985, Prentice-Hall International Series in Computer Science
   Köhler A, 2014, LECT NOTES COMPUT SC, V8859, P173, DOI 10.1007/978-3-319-12982-2_13
   Kuhn S, 2016, LECT NOTES COMPUT SC, V9720, P20, DOI 10.1007/978-3-319-40578-0_2
   Kuhn S, 2015, LECT NOTES COMPUT SC, V9138, P279, DOI 10.1007/978-3-319-20860-2_19
   Lanese I., 2013, LECT NOTES COMPUT SC, V7581, P233, DOI DOI 10.1007/978-3-642-36315-3
   Lanese I, 2011, LECT NOTES COMPUT SC, V6901, P297, DOI 10.1007/978-3-642-23217-6_20
   Lanese I, 2010, LECT NOTES COMPUT SC, V6269, P478, DOI 10.1007/978-3-642-15375-4_33
   Mousavi M, 2009, INFORM COMPUT, V207, P85, DOI 10.1016/j.ic.2007.11.008
   Päun G, 2000, J COMPUT SYST SCI, V61, P108, DOI 10.1006/jcss.1999.1693
   Phillips Iain, 2013, CONCUR 2013 - Concurrency Theory. 24th International Conference, CONCUR 2013. Proceedings: LNCS 8052, P303, DOI 10.1007/978-3-642-40184-8_22
   Phillips Iain, 2013, Reversible Computation. 5th International Conference, RC 2013. Proceedings. LNCS 7936, P141, DOI 10.1007/978-3-642-38986-3_12
   Phillips I, 2007, J LOGIC ALGEBR PROGR, V73, P70, DOI 10.1016/j.jlap.2006.11.002
   Phillips I, 2006, LECT NOTES COMPUT SC, V3921, P246
   Phillips Iain, 2012, Lecture Notes in Computer Science, V7581, P218, DOI [10.1007/978-3-642-36315-3_18, DOI 10.1007/978-3-642-36315-3_18]
   Priami C, 2001, INFORM PROCESS LETT, V80, P25, DOI 10.1016/S0020-0190(01)00214-9
   Priami C, 1995, COMPUT J, V38, P578, DOI 10.1093/comjnl/38.7.578
   Regev A, 2004, NAT COMPUT SER, P219
   Regev A, 2004, THEOR COMPUT SCI, V325, P141, DOI 10.1016/j.tcs.2004.03.061
   Regev A., 2001, Pacific symposium on biocomputing, V6, P459
   Regev A., 2001, 2 WORKSH COMP BIOCH, P109
   Ulidowski I, 2002, INFORM COMPUT, V178, P180, DOI 10.1006/inco.2002.3161
   ULIDOWSKI I, 1992, PROCEEDINGS OF THE SEVENTH ANNUAL IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P148, DOI 10.1109/LICS.1992.185529
   Ulidowski I, 2014, LECT NOTES COMPUT SC, V8507, P1, DOI 10.1007/978-3-319-08494-7_1
NR 38
TC 12
Z9 12
U1 0
U2 0
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 1
PY 2018
VL 151
SI SI
BP 18
EP 47
DI 10.1016/j.scico.2017.09.008
PG 30
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA FP5KV
UT WOS:000417659300003
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Desharnais, J
   Diallo, N
   Ghardallou, W
   Mili, A
AF Desharnais, Jules
   Diallo, Nafi
   Ghardallou, Wided
   Mili, Ali
TI Projecting programs on specifications: Definition and implications
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Absolute correctness; Relative correctness; Refinement; Projection;
   Lattices
AB Given a specification R, it is common for a candidate program P to be doing more than R requires; this is not necessarily bad, and is often unavoidable, due to programming language constraints or to otherwise sensible design decisions. In this paper, we introduce a relational operator that captures, for a given specification R and candidate program P, the functionality delivered by P that is relevant to R. This operator, which we call the projection of P over R (for reasons we explain), has a number of interesting properties, which we explore in this paper. (C) 2017 Elsevier B.V. All rights reserved.
C1 [Desharnais, Jules] Univ Laval, Dept Informat Genie Log, Quebec City, PQ, Canada.
   [Diallo, Nafi; Mili, Ali] New Jersey Inst Technol, Newark, NJ 07102 USA.
   [Ghardallou, Wided] El Manar, Fac Sci Tunis, Tunis, Tunisia.
C3 Laval University; New Jersey Institute of Technology; Universite de
   Tunis-El-Manar; Faculte des Sciences de Tunis (FST)
RP Mili, A (corresponding author), New Jersey Inst Technol, Newark, NJ 07102 USA.
EM Jules.Desharnais@ift.ulaval.ca; ncd8@njit.edu;
   wided.ghardallou@gmail.com; mili@cis.njitedu
RI Desharnais, Jules/A-4023-2008
OI mili, amira/0000-0003-3002-7303
CR [Anonymous], 1981, SCI PROGRAMMING, DOI DOI 10.1007/978-1-4612-5983-1
   [Anonymous], 1974, Mathematical Theory of Computation
   Boudriga N., 1992, Formal Aspects of Computing, V4, P544, DOI 10.1007/BF01211474
   Desharnais J, 2015, LECT NOTES COMPUT SC, V9348, P191, DOI 10.1007/978-3-319-24704-5_12
   Dijkstra E. W., 1976, A Discipline of Pro-gramming
   Hehner E.C.R., 1993, A Practical Theory of Programming
   Hehner Eric C.R., 1992, PRACTICAL THEORY PRO
   Hoare C. A. R., 1997, Mathematical Methods in Program Development, P313
   HOARE CAR, 1969, COMMUN ACM, V12, P576, DOI 10.1145/363235.363259
   Janzen D, 2005, COMPUTER, V38, P43, DOI 10.1109/MC.2005.314
   Jipsen P, 1997, ADV COMP SCI, P1
   Lahiri ShuvenduK., 2013, ACM SIGSOFT S FDN SO, P345, DOI DOI 10.1145/2491411.2491452
   Logozzo F, 2014, ACM SIGPLAN NOTICES, V49, P294, DOI [10.1145/2594291.2594326, 10.1145/2666356.2594326]
   Logozzo F, 2012, ACM SIGPLAN NOTICES, V47, P133, DOI 10.1145/2398857.2384626
   Mili A, 2014, LECT NOTES COMPUT SC, V8428, P191, DOI 10.1007/978-3-319-06251-8_12
   Mills H.D., 1987, PRINCIPLES STRUCTURE
   Morgan C.C., 1998, INT SER COMPUT SCI
   Perelman D, 2014, ACM SIGPLAN NOTICES, V49, P408, DOI [10.1145/2594291.2594297, 10.1145/2666356.2594297]
   [No title captured]
NR 19
TC 1
Z9 1
U1 0
U2 1
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAY 1
PY 2017
VL 138
BP 26
EP 48
DI 10.1016/j.scico.2016.11.006
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA EO8WZ
UT WOS:000396972500002
OA hybrid
DA 2024-07-18
ER

PT J
AU Martins, P
   Fernandes, JP
   Saraiva, J
   Van Wyk, E
   Sloane, A
AF Martins, Pedro
   Fernandes, Joao Paulo
   Saraiva, Joao
   Van Wyk, Eric
   Sloane, Anthony
TI Embedding attribute grammars and their extensions using functional
   zippers
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Attribute grammars; Functional programming; Functional zippers;
   Bidirectional transformations
ID TRANSFORMATIONS
AB Attribute grammars are a suitable formalism to express complex software language analysis and manipulation algorithms, which rely on multiple traversals of the underlying syntax tree. Attribute grammars have been extended with mechanisms such as reference, higher order and circular attributes. Such extensions provide a powerful modular mechanism and allow the specification of complex computations. This paper studies an elegant and simple, zipper-based embedding of attribute grammars and their extensions as first class citizens. In this setting, language specifications are defined as a set of independent, off-the-shelf components that can easily be composed into a powerful, executable language processor. Techniques to describe automatic bidirectional transformations between grammars in this setting are also described. Several real examples of language specification and processing programs have been implemented. (C) 2016 Elsevier B.V. All rights reserved.
C1 [Martins, Pedro; Fernandes, Joao Paulo; Saraiva, Joao] Univ Minho, High Assurance Software Lab HASLAB INESC TEC, Braga, Portugal.
   [Fernandes, Joao Paulo] Univ Beira Interior, Reliable & Secure Computat Grp Release, Covilha, Portugal.
   [Van Wyk, Eric] Univ Minnesota, Dept Comp Sci & Engn, Minneapolis, MN USA.
   [Sloane, Anthony] Macquarie Univ, Dept Comp, Sydney, NSW, Australia.
C3 Universidade do Minho; INESC TEC; Universidade da Beira Interior;
   University of Minnesota System; University of Minnesota Twin Cities;
   Macquarie University
RP Martins, P (corresponding author), Univ Minho, High Assurance Software Lab HASLAB INESC TEC, Braga, Portugal.
EM prmartins@di.uminho.pt; jpf@di.ubi.pt; jas@di.uminho.pt; evw@cs.umn.edu;
   anthony.sloane@mq.edu.au
RI Martins, Pedro/GWC-7702-2022; Fernandes, João/IUN-2117-2023; Saraiva,
   João/L-6113-2015; Fernandes, Joao Paulo/A-1929-2013
OI Saraiva, João/0000-0002-5686-7151; Sloane, Anthony/0000-0002-6802-7360;
   Fernandes, Joao Paulo/0000-0002-1952-9460
FU ERDF - European Regional Development Fund through the COMPETE Programme
   (operational programme for competitiveness); National Funds through the
   FCT - Fundacao para a Ciencia e a Tecnologia (Portuguese Foundation for
   Science and Technology) [BIM-2013_BestCase_RL3.2_UMINHO,
   FCOMP-01-0124-FEDER-020532]; NSF Award [1047961]; Direct For Computer &
   Info Scie & Enginr; Office of Advanced Cyberinfrastructure (OAC)
   [1047961] Funding Source: National Science Foundation
FX This author is supported by ERDF - European Regional Development Fund
   through the COMPETE Programme (operational programme for
   competitiveness) and by National Funds through the FCT - Fundacao para a
   Ciencia e a Tecnologia (Portuguese Foundation for Science and
   Technology) within project ON.2 IC&DT Programa Integrado "BEST CASE -
   Better Science Through Cooperative Advanced Synergetic Efforts (Ref.
   BIM-2013_BestCase_RL3.2_UMINHO) and project FATBIT - Foundations,
   Applications and Tools for Bidirectional Transformation (Ref.
   FCOMP-01-0124-FEDER-020532).; This author is partially supported by NSF
   Award #1047961.
CR Adams MD, 2010, WGP 2010: PROCEEDINGS OF THE 2010 ACM SIGPLAN WORKSHOP ON GENERIC PROGRAMMING, P13
   [Anonymous], 1997, The Definition of Standard ML
   Badouel E, 2013, THEOR COMPUT SCI, V480, P1, DOI 10.1016/j.tcs.2013.02.007
   Badouel E, 2011, ELECTRON NOTES THEOR, V229, P39, DOI 10.1016/j.entcs.2011.02.015
   Bird R., 1998, INTRO FUNCTIONAL PRO, V2nd
   BIRD RS, 1984, ACTA INFORM, V21, P239, DOI 10.1007/BF00264249
   Boyland JT, 2005, J ACM, V52, P627, DOI 10.1145/1082036.1082042
   Czarnecki K, 2006, IBM SYST J, V45, P621, DOI 10.1147/sj.453.0621
   Czarnecki K, 2009, LECT NOTES COMPUT SC, V5563, P260, DOI 10.1007/978-3-642-02408-5_19
   de Moor O., 2000, INFORM SLOVENIA, V24
   Dijkstra A, 2009, HASKELL'09: PROCEEDINGS OF THE 2009 ACM SIGPLAN HASKELL SYMPOSIUM, P93
   Ekman T, 2007, ACM SIGPLAN NOTICES, V42, P1, DOI 10.1145/1297105.1297029
   FARROW R, 1986, SIGPLAN NOTICES, V21, P85, DOI 10.1145/13310.13320
   Fernandes J.P., 2007, P 2007 ACM SIGPLAN S, P102
   Foster JN, 2007, ACM T PROGR LANG SYS, V29, DOI [10.1145/1232420.1232424, 10.1145/1047659.1040325]
   Hibberd M, 2007, LECT NOTES COMPUT SC, V4735, P589
   Hu Zhenjiang., 2004, PARTIAL EVALUATION P, P178
   Huet G., 1997, Journal of Functional Programming, V7, P549, DOI 10.1017/S0956796897002864
   Johnsson T., 1987, FUNCTIONAL PROGRAMMI
   JONES LG, 1990, ACM T PROGR LANG SYS, V12, P429, DOI 10.1145/78969.78971
   Jones S. A., 1999, TECHNICAL REPORT
   Jouault F, 2006, LECT NOTES COMPUT SC, V3844, P128
   Kaminski Ted, 2011, REVISED SELECTED PAP, V6940, P263, DOI [10.1007/978-3-642-28830-2_15, DOI 10.1007/978-3-642-28830-2_15]
   Knuth D. E., 1968, Mathematical Systems Theory, V2, P127, DOI 10.1007/BF01692511
   Knuth DonaldE., 1971, MATH SYST THEORY, V5, P95
   Kuiper M, 1998, LECT NOTES COMPUT SC, V1383, P298
   Kuiper M., 1987, COMPUTING SCI NETHER
   Lämmel R, 2003, ACM SIGPLAN NOTICES, V38, P26, DOI 10.1145/640136.604179
   Magnusson E, 2007, SCI COMPUT PROGRAM, V68, P21, DOI 10.1016/j.scico.2005.06.005
   Martins P., 2012, Information Technology and Open Source: Applications for Education, Innovation, and Sustainability - SEFM'12 Satellite Events, InSuEdu, MoKMaDS, and OpenCert, Thessaloniki, Greece, October 1-2, 2012, Revised, P244
   Martins P., 2012, P S LANGUAGES APPL T, V21, P51
   Martins P, 2014, PEPM '14: PROCEEDINGS OF THE ACM SIGPLAN WORKSHOP ON PARTIAL EVALUATION AND PROGRAM MANIPULATION, P63, DOI 10.1145/2543728.2543745
   Martins P, 2013, LECT NOTES COMPUT SC, V8129, P135, DOI 10.1007/978-3-642-40922-6_10
   Martins P, 2013, LECT NOTES COMPUT SC, V7972, P443, DOI 10.1007/978-3-642-39643-4_32
   Matsuda K, 2007, ICFP'07 PROCEEDINGS OF THE 2007 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P47
   Middelkoop A., 2010, P 9 INT C GENERATIVE, P43
   Norell  Ulf, 2015, P 14 ACM SIGPLAN WOR, P1
   PAAKKI J, 1995, ACM COMPUT SURV, V27, P196, DOI 10.1145/210376.197409
   Reps T.W., 1989, SYNTHESIZER GENERATO
   Saraiva J, 2003, LECT NOTES COMPUT SC, V2830, P307
   Saraiva J, 1999, LECT NOTES COMPUT SC, V1575, P1
   Sasaki A, 2004, NEW GENERAT COMPUT, V22, P37, DOI 10.1007/BF03037280
   Sloane AM, 2013, SCI COMPUT PROGRAM, V78, P1752, DOI 10.1016/j.scico.2011.11.005
   Soderberg E., 2012, THESIS
   Söderberg E, 2013, LECT NOTES COMPUT SC, V8225, P302, DOI 10.1007/978-3-319-02654-1_17
   Söderberg E, 2015, COMPUT LANG SYST STR, V44, P3, DOI 10.1016/j.cl.2015.08.008
   Stevens P, 2008, LECT NOTES COMPUT SC, V5235, P408, DOI 10.1007/978-3-540-88643-3_10
   Swierstra SD, 1999, LECT NOTES COMPUT SC, V1608, P150
   Usberco J., 1999, QUIMICA
   Uustalu T., 2005, TRENDS FUNCTIONAL PR, P145
   Van Wyk E, 2010, SCI COMPUT PROGRAM, V75, P39, DOI 10.1016/j.scico.2009.07.004
   Vaughan J.A., 2006, P PRINC DAT SYST, P338, DOI [10.1145/1142351.1142399, DOI 10.1145/1142351.1142399]
   Viera M., 2013, THESIS
   Viera M, 2009, ICFP'09: PROCEEDINGS OF THE 2009 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P245
   VOGT HH, 1989, SIGPLAN NOTICES, V24, P131, DOI 10.1145/74818.74830
   Yakushev AR, 2009, ICFP'09: PROCEEDINGS OF THE 2009 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P233
   Yellin D. M., 1988, LNCS, V302
NR 57
TC 5
Z9 5
U1 0
U2 2
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 15
PY 2016
VL 132
BP 2
EP 28
DI 10.1016/j.scico.2016.03.005
PN 1
PG 27
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA EC3YB
UT WOS:000388061900002
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Hallerstede, S
AF Hallerstede, Stefan
TI The correctness of event-B inductive convergence
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Refinement; Termination; Well-foundedness; Correctness
AB Anticipation proof obligations for stated variants need to be proved in Event-B even if the variant has no variable in common with an anticipated event. This often leads to models that are complicated by additional auxiliary variables and variants that need to take into account these variables. Because of such "encodings" of control flow information in the variants the corresponding proof obligations can usually not be discharged automatically. We present a new proof obligation for anticipated events that does not have this defect and prove it correct. The proof is fairly intricate due to the nondeterminism of the simulations that link refinements. An informal soundness argument suggests using a lexicographic product in the soundness proof. However, it turns out that a weaker order is required which we call quasi-lexicographic product. (C) 2016 Elsevier B.V. All rights reserved.
C1 [Hallerstede, Stefan] Aarhus Univ, Dept Engn, DK-8000 Aarhus C, Denmark.
C3 Aarhus University
RP Hallerstede, S (corresponding author), Aarhus Univ, Dept Engn, DK-8000 Aarhus C, Denmark.
EM stefan.hallerstede@wanadoo.fr
CR Abrial Jean-Raymond, 2010, International Journal on Software Tools for Technology Transfer, V12, P447, DOI 10.1007/s10009-010-0145-y
   Abrial J R, 2010, Modeling in Event-B: system and softeng
   Abrial JR, 2005, LECT NOTES COMPUT SC, V3455, P222
   [Anonymous], 1990, Predicate Calculus and Program Semantics
   [Anonymous], 1994, Lecture Notes in Computer Science
   Apt Krzysztof R., 2009, VERIFICATION SEQUENT, V3, DOI DOI 10.1007/978-1-84882-745-5
   BACK RJR, 1990, LECT NOTES COMPUT SC, V430, P67
   BACK RJR, 1988, ACM T PROGR LANG SYS, V10, P513, DOI 10.1145/48022.48023
   Boyer R. S., 1979, COMPUTATIONAL LOGIC
   Bulwahn L, 2007, LECT NOTES COMPUT SC, V4732, P38
   Chandy K.M., 1989, Parallel program design
   Cook B, 2013, LECT NOTES COMPUT SC, V7795, P47, DOI 10.1007/978-3-642-36742-7_4
   Cook B, 2011, COMMUN ACM, V54, P88, DOI 10.1145/1941487.1941509
   Dijkstra E.W., 1990, AVG88EWD1079
   Emre Yilmaz, 2010, THESIS
   Hallerstede S, 2014, LECT NOTES COMPUT SC, V8477, P86, DOI 10.1007/978-3-662-43652-3_7
   Hallerstede S, 2011, LECT NOTES COMPUT SC, V6991, P569, DOI 10.1007/978-3-642-24559-6_38
   Hallerstede S, 2011, FORM ASP COMPUT, V23, P133, DOI 10.1007/s00165-009-0138-3
   KALDEWAIJ A, 1990, INT SERIES COMPUTER
   Lamport L., 1983, Information Processing 83. Proceedings of the IFIP 9th World Computer Congress, P657
   Maric O, 2015, I C DEPEND SYS NETWO, P391, DOI 10.1109/DSN.2015.38
   Schmalz M, 2011, LECT NOTES COMPUT SC, V6991, P633, DOI 10.1007/978-3-642-24559-6_42
NR 22
TC 0
Z9 0
U1 0
U2 3
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 1
PY 2016
VL 131
BP 94
EP 108
DI 10.1016/j.scico.2016.04.012
PG 15
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA EB8FQ
UT WOS:000387627300007
OA hybrid
DA 2024-07-18
ER

PT J
AU Rockai, P
   Barnat, J
   Brim, L
AF Rockai, P.
   Barnat, J.
   Brim, L.
TI Model checking C plus plus programs with exceptions
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Model checking; C plus; Exception handling; LLVM
AB We present an extension of the DIVINE software model checker to support programs with exception handling. The extension consists of two parts, a language-neutral implementation of the LLVM exception-handling instructions, and an adaptation of the C++ runtime for the DIVINE/LLVM exception model. This constitutes an important step towards support of both the full C++ specification and towards verification of real-world C++ programs using a software model checker. Additionally, we show how these extensions can be used to elegantly implement other features with non-local control transfer, most importantly the longjmp function in C. (C) 2016 Elsevier B.V. All rights reserved.
C1 [Rockai, P.; Barnat, J.; Brim, L.] Masaryk Univ, Fac Informat, Bot 68a, Brno, Czech Republic.
C3 Masaryk University Brno
RP Rockai, P (corresponding author), Masaryk Univ, Fac Informat, Bot 68a, Brno, Czech Republic.
EM xrockai@fi.muni.cz; barnat@fi.muni.cz; brim@fi.muni.cz
RI Barnat, Jiří/J-3212-2013
OI Brim, Lubos/0000-0001-9393-7545; Barnat, Jiri/0000-0003-2044-2861;
   Rockai, Petr/0000-0002-8484-1063
FU Czech Science Foundation [15-08772S]; Red Hat, Inc.
FX This work has been partially supported by the Czech Science Foundation
   grant No. 15-08772S.; Petr Rockai has been partially supported by Red
   Hat, Inc.
CR Aidemark J, 2001, INTERNATIONAL CONFERENCE ON DEPENDABLE SYSTEMS AND NETWORKS, PROCEEDINGS, P83, DOI 10.1109/DSN.2001.941394
   [Anonymous], 1986, P 1 S LOG COMP SCI I
   [Anonymous], 1995, C PROGRAMMING LANGUA
   Armando A, 2006, LECT NOTES COMPUT SC, V3925, P146
   Barnat J, 2015, LECT NOTES COMPUT SC, V9232, P49, DOI 10.1007/978-3-319-23404-5_5
   Barnat Jiri, 2013, Computer Aided Verification. 25th International Conference, CAV 2013. Proceedings. LNCS 8044, P863, DOI 10.1007/978-3-642-39799-8_60
   Barnat J., 2012, NASA Formal Methods. Proceedings of the 4th International Symposium, NFM 2012, P252, DOI 10.1007/978-3-642-28891-3_25
   Barnat J., 2016, 31 ANN ACM IN PRESS
   Beyer D., 2014, Tools and Algorithms for the Con- struction and Analysis of Systems, P373
   Cadar C., 2008, Proceedings of the 8th USENIX conference on Operating systems design and implementation, OSDI'08, (USA), P209
   Cadar C, 2013, COMMUN ACM, V56, P82, DOI 10.1145/2408776.2408795
   Clarke E, 2001, FORM METHOD SYST DES, V19, P7, DOI 10.1023/A:1011276507260
   DWARF Debugging Information Format Committee, 2010, DWARF DEB INF FORM V
   Evangelista Sami, 2012, Automated Technology for Verification and Analysis. Proceedings of the 10th International Symposium, ATVA 2012, P269, DOI 10.1007/978-3-642-33386-6_22
   Falke S, 2013, IEEE INT CONF AUTOM, P706, DOI 10.1109/ASE.2013.6693138
   Farzan A., 2013, Proceedings of the 2013 9th Joint Meeting on Foundations of Software Engineering, P37
   Grumberg Orna., 2008, 25 Years of Model Checking: History, Achievements, Perspectives
   Gunther Henning, 2014, SPIN
   Guodong Li, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P609, DOI 10.1007/978-3-642-22110-1_49
   Jones R.E., 1996, Garbage Collection: Algorithms for Automatic Dynamic Memory Management
   KANAWATI GA, 1995, IEEE T COMPUT, V44, P248, DOI 10.1109/12.364536
   Lattner C, 2004, INT SYM CODE GENER, P75, DOI 10.1109/CGO.2004.1281665
   LLVM Project, LLVM LANG REF MAN
   Merz F, 2012, LECT NOTES COMPUT SC, V7152, P146, DOI 10.1007/978-3-642-27705-4_12
   Meszaros G., 2007, Xunit test patterns: refactoring test code
   Nethercote N., 2007, C PROGR LANG DES IMP
   Pelánek R, 2007, LECT NOTES COMPUT SC, V4595, P263
   Prabhu P, 2011, LECT NOTES COMPUT SC, V6813, P583, DOI 10.1007/978-3-642-22655-7_27
   Ramalho M, 2013, 2013 20TH ANNUAL IEEE INTERNATIONAL CONFERENCE AND WORKSHOPS ON THE ENGINEERING OF COMPUTER BASED SYSTEMS (ECBS 2013), P147, DOI 10.1109/ECBS.2013.15
   Rockai Petr, 2013, NASA Formal Methods. 5th International Symposium, NFM 2013. Proceedings, P1, DOI 10.1007/978-3-642-38088-4_1
   Sen Koushik, 2005, ESEC FSE
   Turner D., ROBUST DESIGN TECHNI
NR 32
TC 3
Z9 3
U1 0
U2 6
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 15
PY 2016
VL 128
SI SI
BP 68
EP 85
DI 10.1016/j.scico.2016.05.007
PG 18
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DS2JI
UT WOS:000380595400005
OA hybrid
DA 2024-07-18
ER

PT J
AU Velasco-Elizondo, P
   Marín-Piña, R
   Vazquez-Reyes, S
   Mora-Soto, A
   Mejia, J
AF Velasco-Elizondo, Perla
   Marin-Pina, Rosario
   Vazquez-Reyes, Sodel
   Mora-Soto, Arturo
   Mejia, Jezreel
TI Knowledge representation and information extraction for analysing
   architectural patterns
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Architectural design; Architectural patterns; Quality attribute;
   Ontology; Information extraction
ID SOFTWARE ARCHITECTURE; SELECTION
AB Today, many software architecture design methods consider the use of architectural patterns as a fundamental design concept. When making an effective pattern selection, software architects must consider, among other aspects, its impact on promoting or inhibiting quality attributes. However, for inexperienced architects, this task often requires significant time and effort. Some reasons of the former include: the number of existing patterns, the emergence of new patterns, the heterogeneity in the natural language descriptions used to define them and the lack of tools for automatic pattern analysis. In this paper we describe an approach, based on knowledge representation and information extraction, for analysing architectural pattern descriptions with respect to specific quality attributes. The approach is automated by computable model that works as a prototype tool. We focus on the performance quality attribute and, by performing experiments on a corpus of patterns with forty-five architects of varying levels of experience, demonstrate that the proposed approach increases recall and reduces analysis time compared to manual analysis. (C) 2016 Elsevier B.V. All rights reserved.
C1 [Velasco-Elizondo, Perla; Vazquez-Reyes, Sodel] Autonomous Univ Zacatecas, Zacatecas 98160, Zac, Mexico.
   [Marin-Pina, Rosario; Mora-Soto, Arturo; Mejia, Jezreel] Ctr Math Res, Zacatecas 98060, Zac, Mexico.
C3 Universidad Autonoma de Zacatecas
RP Velasco-Elizondo, P (corresponding author), Autonomous Univ Zacatecas, Zacatecas 98160, Zac, Mexico.
EM pvelasco@uaz.edu.mx
RI Reyes, Sodel Vázquez/AAK-2391-2021
OI Reyes, Sodel Vázquez/0000-0002-9435-5499; Velasco-Elizondo,
   Perla/0000-0002-4091-3475
CR [Anonymous], 1996, Pattern oriented software architecture: a system of patters
   Barbacci M.R., 2003, CMU/ SEI- 2003- TR-016). Technical Report., Vthird
   Bass L., 2013, SOFTWARE ARCHITECTUR
   Benamara F., 2007, ICWSM, V7, P203
   Birukou A., 2010, P 15 EUR C PATT LANG, P1
   Brachman R., 1985, READINGS KNOWLEDGE R
   Cowie J, 1996, COMMUN ACM, V39, P80, DOI 10.1145/234173.234209
   Cunningham H, 2002, 40TH ANNUAL MEETING OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS, PROCEEDINGS OF THE CONFERENCE, P168
   Daigneau R., 2011, SERVICE DESIGN PATTE
   Dhaya C., 2012, 2012 International Conference on Communications and Signal Processing (ICCSP), P93, DOI 10.1109/ICCSP.2012.6208400
   DROMEY RG, 1995, IEEE T SOFTWARE ENG, V21, P146, DOI 10.1109/32.345830
   Erl T., 2009, SOA DESIGN PATTERNS, VFirst
   Fishburn P.C., 1970, Utility theory for decision making: Technical report
   Fowler M., 2002, Patterns of Enterprise Application Architecture
   Galster M, 2010, IET SOFTW, V4, P349, DOI 10.1049/iet-sen.2009.0004
   Giuliano C., 2008, P 22 INT C COMP LING, V1, P265
   Hadaytullah H., 2010, Proceedings Fifth International Conference on Software Engineering Advances (ICSEA 2010), P359, DOI 10.1109/ICSEA.2010.61
   Hasheminejad SMH, 2012, J SYST SOFTWARE, V85, P408, DOI 10.1016/j.jss.2011.08.031
   Homer Alex., 2014, Cloud design patterns: Prescriptive architecture guidance for cloud applications
   Hsueh NL, 2009, SOFTW SYST MODEL, V8, P67, DOI 10.1007/s10270-007-0063-y
   International S. R., 2015, SPEED READ FACTS
   ISO, 2001, 912612001 ISO
   Jabali FH, 2011, PROCEDIA COMPUT SCI, V3, DOI 10.1016/j.procs.2011.01.035
   Jassem K., 2002, Machine Translation, V17, P19, DOI 10.1023/A:1025512525185
   Kampffmeyer H, 2007, LECT NOTES COMPUT SC, V4735, P211
   Kim DK, 2007, J VISUAL LANG COMPUT, V18, P560, DOI 10.1016/j.jvlc.2007.02.009
   Ko AJ, 2015, EMPIR SOFTW ENG, V20, P110, DOI 10.1007/s10664-013-9279-3
   Lattanze A., 2008, ARCHITECTING SOFTWAR, DOI [10.5555/1521428, DOI 10.5555/1521428]
   Levin B., 1993, English Verb Classes and Alternations: A Preliminary Investigation
   Lim Edward H.Y., 2011, KNOWLEDGE SEEKER ONT
   Mc Call J. A., 1977, FACTORS SOFTWARE QUA, VI
   Miller GeorgeA., 1993, P WORKSHOP HUMAN LAN, P409, DOI DOI 10.3115/1075671.1075788
   Miner Donald., 2012, MapReduce Design Patterns: Building Effective Algorithms and Analytics for Hadoop and Other Systems
   Patterns M., 2009, MICROSOFT APPL ARCHI
   Pazienza M., 1999, INFORM EXTRACTION SC, V1714
   Pearson S, 2010, LECT NOTES COMPUT SC, V6264, P69, DOI 10.1007/978-3-642-15152-1_7
   Pelliccione P, 2009, IEEE T SOFTWARE ENG, V35, P325, DOI 10.1109/TSE.2008.104
   Ramachandran Jay., 2002, DESIGNING SECURITY A
   Rozanski N., 2005, SOFTWARE SYSTEMS ARC
   Sawant N., 2013, Big Data Application Architecture QA: A Problem - Solution Approach, V1st
   Schuler, 2005, THESIS
   Shen W., 2012, Proceedings of the 21st ACM international conference on Information and knowledge management, P345, DOI DOI 10.1145/2396761.2396807
   Subrahmanian VS, 2008, IEEE INTELL SYST, V23, P43, DOI 10.1109/MIS.2008.57
   Van Rijsbergen C. J., 1979, Information Retrieval, V2nd
   Weiss M, 2008, INT REQUIR ENG CONF, P169, DOI 10.1109/RE.2008.32
   Weiss M., 2008, P WIKI4SE WIK SOFTW
   Wojcik R., 2006, Tech. Rep. CMU/SEI- 2006-TR-023
   Zimmerman O, 2008, SEVENTH WORKING IEEE/IFIP CONFERENCE ON SOFTWARE ARCHITECTURE, PROCEEDINGS, P157, DOI 10.1109/WICSA.2008.19
NR 48
TC 17
Z9 19
U1 0
U2 18
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 1
PY 2016
VL 121
SI SI
BP 176
EP 189
DI 10.1016/j.scico.2015.12.007
PG 14
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DH6YU
UT WOS:000372938800010
OA Bronze
DA 2024-07-18
ER

PT J
AU Santos, A
   Alves, P
   Figueiredo, E
   Ferrari, F
AF Santos, Adriano
   Alves, Pericles
   Figueiredo, Eduardo
   Ferrari, Fabian
TI Avoiding code pitfalls in Aspect-Oriented Programming
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Aspect-Oriented Programming; Mistakes; Code pitfalls; Empirical study
ID METRICS; SMELLS
AB Aspect-Oriented Programming (AOP) is a maturing technique that requires a good comprehension of which types of mistakes programmers make during the development of applications. Unfortunately, the lack of such knowledge seems to represent one of the reasons for the cautious adoption of AOP in real software development projects. This paper reports on the results of a series of experiments whose main goal is to analyze and catalogue code pitfalls that are likely to lead programmers to make mistakes in AOP refactoring. Each experiment consists of a task that requires the aspectization of a crosscutting concern in one object-oriented application. Eight rounds of the experiment provided us with data of 98 AOP implementations from four crosscutting concerns in four different applications. Each participant of the experiment produced one implementation. Based on the analysis of these implementations, we (i) document six categories of recurring mistakes made by programmers, (ii) correlate these mistakes with the programmer expertise in object-oriented programming, years of software development, and pair programming, and (iii) derive a catalogue of code pitfalls which are likely to lead programmers to make the documented mistakes. We apply significance tests in order to statistically evaluate our results. We also present a prototype tool to warn programmers of the code pitfalls during refactoring activities. (C) 2016 Elsevier B.V. All rights reserved.
C1 [Santos, Adriano; Alves, Pericles; Figueiredo, Eduardo] Univ Fed Minas Gerais, Dept Comp Sci, Belo Horizonte, MG, Brazil.
   [Ferrari, Fabian] Univ Fed Sao Carlos, Dept Comp, BR-13560 Sao Carlos, SP, Brazil.
C3 Universidade Federal de Minas Gerais; Universidade Federal de Sao Carlos
RP Santos, A (corresponding author), Univ Fed Minas Gerais, Dept Comp Sci, Belo Horizonte, MG, Brazil.
EM adrianolages@dcc.ufmg.br; periclesrafael@dcc.ufmg.br;
   figueiredo@dcc.ufmg.br; fabiano@dc.ufscar.br
RI Ferrari, Fabiano Cutigi/AAC-1392-2019
OI Ferrari, Fabiano Cutigi/0000-0002-7339-8529
CR Alexander R. T., 2004, CS04105 COL STAT U
   Alves P., 2012, P 34 INT C SOFTW ENG
   Alves P, 2014, LECT NOTES COMPUT SC, V8771, P31, DOI 10.1007/978-3-319-11863-5_3
   [Anonymous], 1990, 61012 IEEE
   Bækken JS, 2006, ISSRE 2006:17TH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P169
   Binkley D, 2006, IEEE T SOFTWARE ENG, V32, P698, DOI 10.1109/TSE.2006.95
   Burrows R., 2010, Proceedings of the 2010 IEEE 21st International Symposium on Software Reliability Engineering (ISSRE 2010), P329, DOI 10.1109/ISSRE.2010.33
   Burrows R, 2011, CONF PROC INT SYMP C, P131, DOI 10.1109/ICPC.2011.30
   Castor F, 2009, SOFTWARE PRACT EXPER, V39, P1377, DOI 10.1002/spe.939
   Coelho R, 2008, LECT NOTES COMPUT SC, V5142, P207, DOI 10.1007/978-3-540-70592-5_10
   Fenske W., 2015, P 9 INT WORKSH VAR M, P3, DOI DOI 10.1145/2701319.2701321
   Ferrari F., 2010, P 32 ACMIEEE INT C S, V1, P65
   Ferrari F. C., 2010, 2010 Proceedings of 24th Brazilian Symposium on Software Engineering (SBES 2010), P50, DOI 10.1109/SBES.2010.11
   Ferrari Fabiano Cutigi, 2008, 2008 First IEEE International Conference on Software Testing, Verification and Validation (ICST '08), P52, DOI 10.1109/ICST.2008.37
   Figueiredo E., 2011, P 10 INT C ASP OR SO, P81
   Figueiredo E, 2008, CSMR 2008: 12TH EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, P183
   Figueiredo E, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P261, DOI 10.1145/1368088.1368124
   Firman R.E., 2004, Aspect Oriented Software Development, P21
   Fowler M., 2018, Refactoring: Improving the Design of Existing Code
   Gamma Erich., 1994, DESIGN PATTERNS
   JAIN R., 1991, The art of computer systems performance analysis - techniques for experimental design, measurement, simulation, and modeling, P1
   Kiczales G, 1997, LECT NOTES COMPUT SC, V1241, P220, DOI 10.1007/BFb0053381
   Kiczales G., 2001, ECOOP 2001 - Object-Oriented Programming. 15th European Conference. Proceedings (Lecture Notes in Computer Science Vol.2072), P327
   Lemos OAL, 2012, PROC INT CONF SOFTW, P529, DOI 10.1109/ICSE.2012.6227163
   Lemos O.A. L., 2014, Proceedings of the 11th Working Conference on Mining Software Repositories, P212, DOI DOI 10.1145/2597073.2597087
   Macia Bertran I., 2011, P 10 INT C ASP OR SO, P203
   Meyer B., 2000, OBJECT ORIENTED SOFT, V2nd
   MEZINI M, 2003, P 2 INT C ASP OR SOF
   Monteiro MP, 2005, PROC IEEE INT CONF S, P17
   Monteiro MP, 2006, LECT NOTES COMPUT SC, V3880, P214
   Munoz F, 2009, PROC IEEE INT CONF S, P137, DOI 10.1109/ICSM.2009.5306300
   Nunes C, 2011, EUR CON SFTWR MTNCE, P101, DOI 10.1109/CSMR.2011.16
   Piveta EK, 2006, J UNIVERS COMPUT SCI, V12, P811
   Piveta EK, 2012, SCI COMPUT PROGRAM, V78, P117, DOI 10.1016/j.scico.2012.02.003
   Rashid A, 2010, COMPUTER, V43, P19, DOI 10.1109/MC.2010.30
   Robillard M.P., 2005, Proceedings of the OOPSLA Workshop on Eclipse Technology eXchange, eclipse '05, P65, DOI DOI 10.1145/1117696.1117710
   Robillard MP, 2007, ACM T SOFTW ENG METH, V16, DOI 10.1145/1189748.1189751
   Shen H., 2008, P 8 ACM SIGPLAN SIGS, P70
   SOLOWAY E, 1984, IEEE T SOFTWARE ENG, V10, P595, DOI 10.1109/TSE.1984.5010283
   Spohrer J., 1986, COMMUN ACM, V29
   Srivisut K, 2007, 6TH IEEE/ACIS INTERNATIONAL CONFERENCE ON COMPUTER AND INFORMATION SCIENCE, PROCEEDINGS, P1060, DOI 10.1109/ICIS.2007.68
   Vidal SA, 2013, J SYST SOFTWARE, V86, P1482, DOI 10.1016/j.jss.2012.12.045
   Wohlin C., 2012, EXPT SOFTWARE ENG IN
   Zhang S, 2007, P INT COMP SOFTW APP, P431
   Zhao M, 1998, INFORM SOFTWARE TECH, V40, P801, DOI 10.1016/S0950-5849(98)00098-6
NR 45
TC 10
Z9 10
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD APR 1
PY 2016
VL 119
BP 31
EP 50
DI 10.1016/j.scico.2015.12.003
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DG9FS
UT WOS:000372388800003
DA 2024-07-18
ER

PT J
AU Cholewa, A
   Escobar, S
   Meseguer, J
AF Cholewa, Andrew
   Escobar, Santiago
   Meseguer, Jose
TI Constrained narrowing for conditional equational theories modulo axioms
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 5th IPM International Conference on Fundamentals of Software Engineering
   (FSEN)
CY APR 24-26, 2013
CL Tehran, IRAN
SP IFIP WG 2 2, Inst Res Fundamental Sci, Sch Comp Sci, ACM SIGSOFT
DE Narrowing modulo; Conditional narrowing; Constrained variants;
   Constrained unification; Layered narrowing
ID MODEL CHECKING; COMPLETE-SETS; TERMINATION; ALGEBRA; SMT
AB For an unconditional equational theory (Sigma, E) whose oriented equations (E) over arrow are confluent and terminating, narrowing provides an E-unification algorithm. This has been generalized by various authors in two directions: (i) by considering unconditional equational theories (Sigma, E boolean OR B) where the (E) over arrow are confluent, terminating and coherent modulo axioms B, and (ii) by considering conditional equational theories. Narrowing for a conditional theory (Sigma, E boolean OR B) has also been studied, but much less and with various restrictions. In this paper we extend these prior results by allowing conditional equations with extra variables in their conditions, provided the corresponding rewrite rules (E) over arrow are confluent, strictly coherent, operationally terminating modulo B and satisfy a natural determinism condition allowing incremental computation of matching substitutions for their extra variables. We also generalize the type structure of the types and operations in Sigma to be order-sorted. The narrowing method we propose, called constrained narrowing, treats conditions as constraints whose solution is postponed. This can greatly reduce the search space of narrowing and allows notions such as constrained variant and constrained unifier that can cover symbolically possibly infinite sets of actual variants and unifiers. It also supports a hierarchical method of solving constraints. We give an inference system for hierarchical constrained narrowing modulo B and prove its soundness and completeness. (C) 2015 Elsevier B.V. All rights reserved.
C1 [Cholewa, Andrew; Meseguer, Jose] Univ Illinois, Urbana, IL 61801 USA.
   [Escobar, Santiago] Univ Politecn Valencia, DSIC ELP, Valencia, Spain.
C3 University of Illinois System; University of Illinois Urbana-Champaign;
   Universitat Politecnica de Valencia
RP Escobar, S (corresponding author), Univ Politecn Valencia, DSIC ELP, Valencia, Spain.
EM acholew2@illinois.edu; sescobar@dsic.upv.es; meseguer@illinois.edu
RI Escobar, Santiago/C-9589-2012; Escobar, Santiago/AAL-3399-2020
OI Escobar, Santiago/0000-0002-3550-4781; Escobar,
   Santiago/0000-0002-3550-4781
FU NSF [CNS 13-19109]; EU (FEDER); Spanish MINECO [TIN 2013-45732-C4-1-P];
   Generalitat Valenciana [PROMETEOII/2015/013]; Division Of Computer and
   Network Systems; Direct For Computer & Info Scie & Enginr [1319109]
   Funding Source: National Science Foundation
FX We thank the anonymous referees for their constructive criticism and
   their very detailed and helpful suggestions for improving an earlier
   version of this work. We also thank Luis Aguirre for kindly giving us
   additional suggestions to improve the text. This work has been partially
   supported by NSF Grant CNS 13-19109 and by the EU (FEDER) and the
   Spanish MINECO under grant TIN 2013-45732-C4-1-P, and by Generalitat
   Valenciana PROMETEOII/2015/013.
CR Abdulla P. A., 2002, Computer Aided Verification. 14th International Conference, CAV 2002. Proceedings (Lecture Notes in Computer Science Vol.2404), P555
   Aguirre L, 2014, LECT NOTES COMPUT SC, V8663, P80, DOI 10.1007/978-3-319-12904-4_4
   ALUR R, 1994, THEOR COMPUT SCI, V126, P183, DOI 10.1016/0304-3975(94)90010-8
   Alur R, 2009, J ACM, V56, DOI 10.1145/1516512.1516518
   [Anonymous], 2000, Lecture Notes in Computer Science
   [Anonymous], 1993, Hybrid Systems, DOI [DOI 10.1007/3-540-57318-6_30, DOI 10.1007/3-540, DOI 10.1007/3-540-57318-6, 10.1007/3-540-57318-6_30]
   [Anonymous], TECHNICAL REPORT
   Armando A, 2006, LECT NOTES COMPUT SC, V3925, P146
   Baader Franz, 1998, TERM REWRITING ALL
   Bachmair L, 1995, LECT NOTES COMPUT SC, V968, P1
   Bae K., 2013, LIPICS, V21, P81
   Bae K, 2014, LECT NOTES COMPUT SC, V8663, P113, DOI 10.1007/978-3-319-12904-4_6
   Beyene Tewodros A., 2014, P 2014 INT S MOD CHE, P101, DOI DOI 10.1145/2632362.2632364
   BOCKMAYR A, 1993, APPL ALGEBR ENG COMM, V4, P147, DOI 10.1007/BF01202035
   Bouajjani A, 2001, LECT NOTES COMPUT SC, V2076, P24
   Bouajjani A, 2006, LECT NOTES COMPUT SC, V4098, P136
   Bruni R, 2006, THEOR COMPUT SCI, V360, P386, DOI 10.1016/j.tcs.2006.04.012
   Burel G, 2010, LECT NOTES COMPUT SC, V6247, P155, DOI 10.1007/978-3-642-15205-4_15
   Comon H., 2001, LECT NOTES COMPUTER, V2002
   Comon-Lundh H, 2005, LECT NOTES COMPUT SC, V3467, P294
   Cordeiro L, 2009, IEEE INT CONF AUTOM, P137, DOI 10.1109/ASE.2009.63
   Dershowitz N., 1990, HDB THEORETICAL COMP, P244, DOI DOI 10.1016/B978-0-444-88074-1.50011-1
   Dershowitz N., 2001, Handbook of Automated Reasoning, VI, P535, DOI [10.1016/b978-044450813-3/50011-4, DOI 10.1016/B978-044450813-3/50011-4]
   Dowek G, 2003, J AUTOM REASONING, V31, P33, DOI 10.1023/A:1027357912519
   Duran Francisco, 2008, Higher-Order and Symbolic Computation, V21, P59, DOI 10.1007/s10990-008-9028-2
   Durán F, 2009, ELECTRON NOTES THEOR, V248, P93, DOI 10.1016/j.entcs.2009.07.062
   Durán F, 2012, J LOGIC ALGEBR PROGR, V81, P816, DOI 10.1016/j.jlap.2011.12.004
   Durán F, 2009, LECT NOTES ARTIF INT, V5749, P246, DOI 10.1007/978-3-642-04222-5_15
   Erbatur Serdar, 2013, Automated Deduction - CADE-24. 24th International Conference on Automated Deduction. Proceedings: LNCS 7898, P231, DOI 10.1007/978-3-642-38574-2_16
   Erbatur Serdar, 2012, Computer Security - ESORICS 2012. Proceedings 17th European Symposium on Research in Computer Security, P73, DOI 10.1007/978-3-642-33167-1_5
   Escobar S, 2007, LECT NOTES COMPUT SC, V4533, P153
   Escobar S, 2012, J LOGIC ALGEBR PROGR, V81, P898, DOI 10.1016/j.jlap.2012.01.002
   Escobar S, 2009, LECT NOTES COMPUT SC, V5705, P1, DOI 10.1007/978-3-642-03829-7_1
   Farzan Azadeh, 2015, Language and Automata Theory and Applications. 9th International Conference, LATA 2015. Proceedings: LNCS 8977, P25, DOI 10.1007/978-3-319-15579-1_2
   GALLIER JH, 1989, THEOR COMPUT SCI, V67, P203, DOI 10.1016/0304-3975(89)90004-2
   Ganai MK, 2008, DES AUT TEST EUROPE, P710
   Ganai MalayK., 2006, P 2006 IEEEACM INT C, P794
   Ghilardi S, 2010, LECT NOTES ARTIF INT, V6173, P22
   GOGUEN JA, 1992, THEOR COMPUT SCI, V105, P217, DOI 10.1016/0304-3975(92)90302-V
   González-Moreno JC, 1999, J LOGIC PROGRAM, V40, P47, DOI 10.1016/S0743-1066(98)10029-8
   Hendrix J, 2012, ELECTRON NOTES THEOR, V290, P37, DOI 10.1016/j.entcs.2012.11.010
   Horbach M, 2014, LECT NOTES ARTIF INT, V8562, P192, DOI 10.1007/978-3-319-08587-6_14
   Hullot Jean-Marie., 1980, CADE, volume 87 of Lecture Notes in Computer Science, V87, P318
   Jouannaud Jean-Pierre., 1991, COMPUTATIONAL LOGIC, P257
   JOUANNAUD JP, 1986, SIAM J COMPUT, V15, P1155, DOI 10.1137/0215084
   JOUANNAUD JP, 1983, LECT NOTES COMPUT SC, V154, P361
   KIRCHNER C, 1988, LECT NOTES COMPUT SC, V317, P287
   Kirchner C., 2006, TECHNICAL REPORT
   Kirchner Claude., 1990, REV DINTELLIGENCE AR, V4, P9
   KIRCHNER H, 1994, MIT PS LOG, P617
   Lucas S, 2005, INFORM PROCESS LETT, V95, P446, DOI 10.1016/j.ipl.2005.05.002
   Lucas S., 1998, J FUNCT LOGIC PROGRA, V1998, P1
   Lucas S, 2014, LECT NOTES COMPUT SC, V8663, P178, DOI 10.1007/978-3-319-12904-4_10
   MARTIOLIET N, 1994, WHAT IS LOGICAL SYST, P355
   MESEGUER J, 1992, THEOR COMPUT SCI, V96, P73, DOI 10.1016/0304-3975(92)90182-F
   Meseguer J, 1998, LECT NOTES COMPUT SC, V1376, P18
   MESEGUER J, 1989, J SYMB COMPUT, V8, P383, DOI 10.1016/S0747-7171(89)80036-7
   Meseguer J., 2014, P UN WORKSH UNIF 20
   Meseguer J., 2013, LNCS, V8161
   Meseguer J, 2012, J LOGIC ALGEBR PROGR, V81, P721, DOI 10.1016/j.jlap.2012.06.003
   MIDDELDORP A, 1994, APPL ALGEBR ENG COMM, V5, P213, DOI 10.1007/BF01190830
   Milicevic A, 2011, LECT NOTES COMPUT SC, V6617, P282, DOI 10.1007/978-3-642-20398-5_21
   Ohlebusch E., 2002, Advanced Topics in Term Rewriting
   Ohsaki H, 2003, LECT NOTES COMPUT SC, V2706, P483
   PETERSON GE, 1981, J ACM, V28, P233, DOI 10.1145/322248.322251
   Robinson George., 1969, Machine intelligence, V4, P133
   Rocha C, 2008, LECT NOTES COMPUT SC, V4988, P337
   Rocha C, 2014, LECT NOTES COMPUT SC, V8663, P247, DOI 10.1007/978-3-319-12904-4_14
   Thati P., 2007, HIGH ORDER SYMB COMP, V20, P123
   Tong V.V.T., 2001, P 8 INT C LOG PROGR, P695
   Veanes M, 2008, LECT NOTES COMPUT SC, V5048, P53, DOI 10.1007/978-3-540-68855-6_4
   Viry P., 1998, ELECT NOTES THEOR CO, V15, P21, DOI DOI 10.1016/S1571-0661(05)82550-2
   Walter D, 2007, LECT NOTES COMPUT SC, V4762, P66
   WALTHER C, 1985, ARTIF INTELL, V26, P217, DOI 10.1016/0004-3702(85)90029-3
NR 74
TC 7
Z9 8
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 15
PY 2015
VL 112
BP 24
EP 57
DI 10.1016/j.scico.2015.06.001
PN 1
PG 34
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA CW3HB
UT WOS:000364881500003
OA Green Published, hybrid
DA 2024-07-18
ER

PT J
AU Alkhammash, E
   Butler, M
   Fathabadi, AS
   Cîrstea, C
AF Alkhammash, Eman
   Butler, Michael
   Fathabadi, Asieh Salehi
   Cirstea, Corina
TI Building traceable Event-B models from requirements
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Event-B; Traceability; UML-B; Event Refinement Structure (ERS)
AB Bridging the gap between informal requirements and formal specifications is a key challenge in systems engineering. Constructing appropriate abstractions in formal models requires skill and managing the complexity of the relationships between requirements and formal models can be difficult. In this paper we present an approach that aims to address the twin challenges of finding appropriate abstractions and managing traceability between requirements and models. Our approach is based on the use of semi-formal structures to bridge the gap between requirements and Event-B models and retain traceability to requirements in Event-B models. In the stepwise refinement approach, design details are gradually introduced into formal models. Stepwise refinement allows each requirement to be introduced at the most appropriate stage in the development. Our approach makes use of the UML-B and Event Refinement Structures (ERS) approaches. UML-B provides UML graphical notation that enables the development of data structures for Event-B models, while the ERS approach provides a graphical notation to illustrate event refinement structures and assists in the organisation of refinement levels. The ERS approach also combines several constructor patterns to manage control flows in Event-B. The intent of this paper is to harness the benefits of the UML-B and ERS approaches to facilitate constructing Event-B models from requirements and provide traceability between requirements and Event-B models. (C) 2015 Published by Elsevier B.V.
C1 [Alkhammash, Eman] Taif Univ, Dept Comp Sci, At Taif, Saudi Arabia.
   [Butler, Michael; Fathabadi, Asieh Salehi; Cirstea, Corina] Univ Southampton, Elect & Comp Sci, Southampton SO9 5NH, Hants, England.
C3 Taif University; University of Southampton
RP Alkhammash, E (corresponding author), Taif Univ, Dept Comp Sci, At Taif, Saudi Arabia.
EM eman.kms@tu.edu.sa; mjb@ecs.soton.ac.uk; asf08r@ecs.soton.ac.uk;
   cc2@ecs.soton.ac.uk
RI Cirstea, Corina/AAF-9127-2020; Alkhammash, Eman/AAZ-3119-2020;
   Alkhammash, Eman/V-7020-2018
OI Alkhammash, Eman/0000-0002-0412-7127; Butler,
   Michael/0000-0003-4642-5373; Salehi Fathabadi,
   Asieh/0000-0002-0508-3066; Cirstea, Corina/0000-0003-3165-5678
CR Abrial Jean-Raymond, 2010, International Journal on Software Tools for Technology Transfer, V12, P447, DOI 10.1007/s10009-010-0145-y
   Abrial J R, 2010, Modeling in Event-B: system and softeng
   Abrial JR, 2006, LECT NOTES COMPUT SC, V4260, P588
   Alkhammash E., 2013, P AUT VER CRIT SYST
   [Anonymous], 1980, SRI INT
   [Anonymous], 2009, Requirements Engineering: From System Goals to UML Models to Software
   Barry R., 2010, USING FREERTOS REAL, V1st
   Barry R., 2010, THE FREERTOS PROJECT
   Butler M, 2009, LECT NOTES COMPUT SC, V5423, P20
   CRAIG ID, 2007, FORMAL MODELS OPERAT
   Craig ID., 2007, FORMAL REFINEMENT OP
   Déharbe D, 2009, LECT NOTES COMPUT SC, V5902, P101, DOI 10.1007/978-3-642-10452-7_8
   der Rieden T., 2009, VERIFIED LINKING MOD
   Dromey R., 2007, MATH FRAMEWORKS COMP
   Fathabadi A., 2012, THESIS U SOUTHAMPTON
   Fathabadi Asieh Salehi, 2012, Software Engineering and Formal Methods. Proceedings of the 10th International Conference, SEFM 2012, P78, DOI 10.1007/978-3-642-33826-7_6
   Feiertag R. J., 1979, AFIPS Conference Proceedings, vol.48. 1979 National Computer Conference, P329
   Freitas L, 2009, LECT NOTES COMPUT SC, V5902, P186, DOI 10.1007/978-3-642-10452-7_13
   Hoare C. A. R., 1973, Acta Informatica, V2, P335, DOI 10.1007/BF00289504
   Hudak P, 2000, GENTLE INTRO HASKELL
   Jackson Michael., 1983, SYSTEM DEV
   Jastram M, 2010, LECT NOTES COMPUT SC, V6217, P97, DOI 10.1007/978-3-642-15057-9_7
   Klein G, 2009, SOSP'09: PROCEEDINGS OF THE TWENTY-SECOND ACM SIGOPS SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P207
   Klein G, 2009, ACM SIGPLAN NOTICES, V44, P91, DOI 10.1145/1631687.1596566
   Li M., 2012, SOFL, P44
   Liu S., 2010, 2010 INT C INT COMP, P561
   Liu Shaoying., 2004, Formal Engineering for Industrial Software Development
   Milner R., 1989, Communication and concurrency
   Nipkow Tobias, 2002, ISABELLE HOL PROOF A
   PERRINE T, 1984, P 7 DOD NBS COMP SEC, P146
   Ponsard C., 2011, INFORSID 2011
   Radha G.P., 1999, PASCAL PROGRAMMING
   Robinson K, 2010, REFLECTIONS TEACHING
   Saydjari O., 1987, 10th National Computer Security Conference, P129
   SILVA R, 2011, LECT NOTES COMPUTER, V6957, P122
   Smith Graeme., 2000, OBJECT Z SPECIFICATI
   Snook C, 2006, ACM T SOFTW ENG METH, V15, P92, DOI 10.1145/1125808.1125811
   Snook C, 2008, LECT NOTES COMPUT SC, V5238, P344
   Spivey J. Michael, 1992, Z NOTATION REFERENCE, V2
   Velykis A, 2010, LECT NOTES COMPUT SC, V6255, P230, DOI 10.1007/978-3-642-14808-8_16
   WALKER BJ, 1980, COMMUN ACM, V23, P118, DOI 10.1145/358818.358825
   Winter K, 2004, LECT NOTES COMPUT SC, V2999, P148
   Yeganefard S, 2012, IEEE INT C ENG COMP, P39, DOI 10.1109/ICECCS.2012.13
NR 43
TC 8
Z9 9
U1 0
U2 5
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 1
PY 2015
VL 111
SI SI
BP 318
EP 338
DI 10.1016/j.scico.2015.06.002
PN 2
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DB5LX
UT WOS:000368556700006
OA Green Accepted, Bronze
DA 2024-07-18
ER

PT J
AU Smyth, B
   Ryan, MD
   Chen, LQ
AF Smyth, Ben
   Ryan, Mark D.
   Chen, Liqun
TI Formal analysis of privacy in Direct Anonymous Attestation schemes
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Accountability; Applied pi calculus; Direct Anonymous Attestation;
   Privacy; Trusted computing
ID AUTOMATED VERIFICATION; COMPUTATIONAL ANALYSIS; DAA SCHEME; SECURITY;
   PROTOCOL; AUTHENTICATION; CRYPTOGRAPHY; ISSUES; PROOF
AB This article introduces a definition of privacy for Direct Anonymous Attestation schemes. The definition is expressed as an equivalence property which is suited to automated reasoning using Blanchet's ProVerif. The practicality of the definition is demonstrated by analysing the RSA-based Direct Anonymous Attestation protocol by Brickell, Camenisch & Chen. The analysis discovers a vulnerability in the RSA-based scheme which can be exploited by a passive adversary and, under weaker assumptions, corrupt issuers and verifiers. A security fix is identified and the revised protocol is shown to satisfy our definition of privacy. (C) 2015 Elsevier B.V. All rights reserved.
C1 [Smyth, Ben] Huawei Technol Co Ltd, France Res Ctr, Math & Algorithm Sci Lab, Montpellier, France.
   [Ryan, Mark D.] Univ Birmingham, Sch Comp Sci, Birmingham B15 2TT, W Midlands, England.
   [Chen, Liqun] HP Labs, Bristol, Avon, England.
C3 Huawei Technologies; University of Birmingham
RP Smyth, B (corresponding author), Huawei, 20 Quai Point Jour, F-92100 Boulogne, France.
EM research@bensmyth.com
RI Chen, Liang-Chia/AAV-9954-2020
OI Chen, Liang-Chia/0000-0001-9613-9936; Chen, Liqun/0000-0003-2680-4907;
   Ryan, Mark/0000-0002-1632-497X
FU ERC project CRYSP [259639]; ERC project ProSecure [258865]; EPSRC
   [EP/L001802/1, EP/H005501/1, EP/F033540/1] Funding Source: UKRI;
   European Research Council (ERC) [259639] Funding Source: European
   Research Council (ERC)
FX We are particularly grateful to Tom Chothia and Andy Gordon for their
   careful reading of an earlier version of this work and their
   constructive feedback. We are also grateful to David Bernhard for his
   discussion with regards Section 6 and the anonymous reviewers who
   provided constructive criticism. This research was funded by the ERC
   projects CRYSP (259639) and ProSecure (258865). Smyth's work was partly
   conducted at: the School of Computer Science, University of Birmingham,
   UK; Loria, CNRS & INRIA Nancy Grand Est, France; and INRIA
   Paris-Rocquencourt, France.
CR Abadi M, 2002, J CRYPTOL, V15, P103, DOI 10.1007/s00145-001-0014-7
   Abadi M., 2000, Theoretical Computer Science. Exploring New Frontiers of Theoretical Informatics. International Conference IFIP TCS 2000. Proceedings (Lecture Notes in Computer Science Vol.1872), P3
   Abadi M, 2001, ACM SIGPLAN NOTICES, V36, P104, DOI 10.1145/373243.360213
   Anderson R, 2004, ADV INF SEC, V12, P35
   Anderson Ross., 2003, Proceedings_of_the_twenty-second_annual_symposium_on_Principles_of_distributed_computing, P3, DOI DOI 10.1145/872035.872036
   [Anonymous], 2007, TPM SPEC VERS 1 2
   [Anonymous], 2002, P 9 ACM C COMPUTER C
   [Anonymous], IACR CRYPTOL EPRINT
   Arapinis M, 2011, 2011 IEEE 24TH COMPUTER SECURITY FOUNDATIONS SYMPOSIUM (CSF), P33, DOI 10.1109/CSF.2011.10
   Backes M, 2008, CSF 2008: 21ST IEEE COMPUTER SECURITY FOUNDATIONS SYMPOSIUM, PROCEEDINGS, P195, DOI 10.1109/CSF.2008.26
   Backes M, 2008, P IEEE S SECUR PRIV, P202, DOI 10.1109/SP.2008.23
   Bernhard D., 2011, 2011658 CRYPT EPRINT
   Bernhard D., 2012, 2012475 CRYPT EPRINT
   Blanchet B, 2004, P IEEE S SECUR PRIV, P86
   Blanchet B., 2011, PROVERIF 1 86PL3 AUT
   Blanchet B, 2008, J LOGIC ALGEBR PROGR, V75, P3, DOI 10.1016/j.jlap.2007.06.002
   Brickell Ernie, 2005, Trusted Computing, P143, DOI 10.1049/PBPC006E_ch5
   Brickell Ernie, 2009, Intel Technology Journal, V13, P96
   Brickell E., 2009, 2009095 CRYPT EPRINT
   Brickell E, 2004, P 11 ACM C COMP COMM, P132, DOI DOI 10.1109/TSC.2010.60
   Brickell E., 2011, LNCS, V7222, P304
   Brickell E., 2008, 2008104 CRYPT EPRINT
   Brickell E, 2008, LECT NOTES COMPUT SC, V4968, P166
   Brickell E, 2010, LECT NOTES COMPUT SC, V6101, P181, DOI 10.1007/978-3-642-13869-0_12
   Brickell E, 2009, INT J INF SECUR, V8, P315, DOI 10.1007/s10207-009-0076-3
   Camenisch J, 2003, LECT NOTES COMPUT SC, V2576, P268
   Camenisch J, 2001, LECT NOTES COMPUT SC, V2045, P93
   Camenisch J, 1997, LECT NOTES COMPUT SC, V1294, P410
   Cesena E., 2010, THESIS U STUDI ROMA
   Cesena E, 2010, LECT NOTES COMPUT SC, V6101, P47, DOI 10.1007/978-3-642-13869-0_4
   Chen L., 2010, 2010008 CRYPT EPRINT
   Chen L., 2011, DAA FIXING PAI UNPUB
   Chen L. Q., 2011, LNCS, V6151, P350
   Chen LQ, 2008, LECT NOTES COMPUT SC, V5209, P1, DOI 10.1007/978-3-540-85538-5_1
   Chen LQ, 2010, LECT NOTES COMPUT SC, V6101, P166, DOI 10.1007/978-3-642-13869-0_11
   Chen LQ, 2010, INFORM PROCESS LETT, V110, P485, DOI 10.1016/j.ipl.2010.04.017
   Chen LQ, 2010, LECT NOTES COMPUT SC, V6035, P223, DOI 10.1007/978-3-642-12510-2_16
   Chen LQ, 2008, LECT NOTES COMPUT SC, V5324, P156, DOI 10.1007/978-3-540-88733-1_11
   Chen XF, 2008, J COMPUT, V3, P43
   Dahl M, 2010, LECT NOTES COMPUT SC, V6345, P55, DOI 10.1007/978-3-642-15497-3_4
   Delaune S., 2007, CSR0712 U BIRM SCH C
   Delaune S, 2008, INT FED INFO PROC, V263, P263
   Delaune S, 2010, LECT NOTES COMPUT SC, V6000, P289, DOI 10.1007/978-3-642-12980-3_18
   Delaune S, 2009, J COMPUT SECUR, V17, P435, DOI 10.3233/JCS-2009-0340
   Delaune Stephanie., 2006, P 19 COMPUTER SECURI, P28
   International Organization for Standardization, 2011, 200082 ISOIEC WD
   International Organization for Standardization, 2009, 11889 ISOIEC
   Koblitz N, 2006, LECT NOTES COMPUT SC, V4329, P148
   Koblitz N, 2007, J CRYPTOL, V20, P3, DOI 10.1007/s00145-005-0432-z
   Kremer S, 2005, LECT NOTES COMPUT SC, V3444, P186
   Liqun Chen, 2010, Trusted Systems. Second International Conference, INTRUST 2010. Revised Selected Papers, P128, DOI 10.1007/978-3-642-25283-9_9
   Lysyanskaya A, 2000, LECT NOTES COMPUT SC, V1758, P184
   Lysyanskaya A., 2002, THESIS MIT
   Martin A., 2008, CSRR0811 U OXF
   Meadows C, 2003, IEEE J SEL AREA COMM, V21, P44, DOI 10.1109/JSAC.2002.806125
   MOORE JH, 1988, P IEEE, V76, P594, DOI 10.1109/5.4444
   Rudolph C, 2007, INT FED INFO PROC, V232, P443
   Ryan M.D., 2011, FORMAL MODELS TECHNI
   Ryan PYA, 1998, INFORM PROCESS LETT, V65, P7, DOI 10.1016/S0020-0190(97)00180-4
   Smyth B., 2011, LNCS, V7140, P245, DOI DOI 10.1007/978-3-642-29420-416
   Smyth B., 2011, THESIS U BIRMINGHAM
   Smyth B, 2007, LECT NOTES COMPUT SC, V4572, P218, DOI 10.1007/978-3-540-73275-4_16
   Stallman R., 2010, FREE SOFTWARE
   Stallman R., 2002, Can you trust your computer? Essay
   Tarnovsky C., 2010, BLACK HAT DC 2010
   Trusted Computing Group, 2012, CAS TURN TRUST PLATF
   Trusted Computing Group, 2011, DO YOU KNOW FEW NOT
   Warinschi B, 2003, P IEEE CSFW, P248, DOI 10.1109/CSFW.2003.1212717
   Warinschi B, 2005, J COMPUT SECUR, V13, P565
NR 69
TC 9
Z9 9
U1 0
U2 5
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 1
PY 2015
VL 111
SI SI
BP 300
EP 317
DI 10.1016/j.scico.2015.04.004
PN 2
PG 18
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DB5LX
UT WOS:000368556700005
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Bruni, R
   Lafuente, AL
   Montanari, U
AF Bruni, Roberto
   Lafuente, Alberto Lluch
   Montanari, Ugo
TI Constraint design rewriting
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Constraints; Rewriting; Hierarchical graphs; Architectures
AB Constraint networks are hyper-graphs whose nodes and hyper-edges respectively represent variables and relations between them. The problem to assign values to variables by satisfying all constraints is NP-complete. We propose an algebraic approach to the design and transformation of constraint networks, inspired by Architectural Design Rewriting (ADR). The main idea is to exploit ADR to equip constraint networks with some hierarchical structure and represent them as terms of a suitable algebra, when possible. Constraint network transformations such as constraint propagations are then specified with efficient rewrite rules exploiting the network's structure provided by terms. The approach can be understood as (i) an extension of ADR with constraints, and (ii) an application of ADR to the design of reconfigurable constraint networks. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Bruni, Roberto; Montanari, Ugo] Univ Pisa, Dipartimento Informat, I-56100 Pisa, Italy.
   [Lafuente, Alberto Lluch] IMT Inst Adv Studies, Lucca, Italy.
C3 University of Pisa; IMT School for Advanced Studies Lucca
RP Lafuente, AL (corresponding author), IMT Inst Adv Studies, Lucca, Italy.
EM bruni@di.unipi.it; alberto.lluch@imtlucca.it; ugo@di.unipi.it
RI BRUNI, ROBERTO/KBB-9626-2024; Lafuente, Alberto Lluch/G-4413-2011;
   Bruni, Roberto/O-8349-2015
OI Lafuente, Alberto Lluch/0000-0001-7405-0818; Montanari,
   Ugo/0000-0002-6204-8670; Bruni, Roberto/0000-0002-7771-4154
FU European projects [IP 257414 ASCENS, STReP 600708 QUANTICOL]; Italian
   PRIN [2010LHT4KM CINA]
FX Research supported by the European projects IP 257414 ASCENS and STReP
   600708 QUANTICOL, and the Italian PRIN 2010LHT4KM CINA.
CR Apt KR, 1999, THEOR COMPUT SCI, V221, P179, DOI 10.1016/S0304-3975(99)00032-8
   Bruni R, 2008, LECT NOTES COMPUT SC, V4912, P186
   Bruni R., 2011, INT J SOFTW INFORM, V2, P185
   Bruni R, 2008, LECT NOTES COMPUT SC, V5065, P37, DOI 10.1007/978-3-540-68679-8_4
   Bruni R, 2008, BULL EUR ASSOC THEOR, P161
   Bruni R, 2010, SCI ANN COMPUT SCI, V20, P53
   Bruni R, 2011, LECT NOTES COMPUT SC, V6582, P133, DOI 10.1007/978-3-642-20401-2_7
   Buscemi MG, 2007, LECT NOTES COMPUT SC, V4421, P18
   CORRADINI A, 1994, THEOR COMPUT SCI, V122, P165, DOI 10.1016/0304-3975(94)90206-2
   Drewes F., 1997, Handbook of Graph Grammars and Computing by Graph Transformation, V1, P95, DOI [10.1142/9789812384720, DOI 10.1142/9789812384720, DOI 10.1142/9789812384720_0002]
   Ferrari GL, 2006, LECT NOTES COMPUT SC, V4111, P22
   Le Metayer D, 1998, IEEE T SOFTWARE ENG, V24, P521, DOI 10.1109/32.708567
   Montanan U., 2012, 5 INT C COMP SCI SOF, P99
   MONTANAR.U, 1974, INFORM SCIENCES, V7, P95, DOI 10.1016/0020-0255(74)90008-5
   MONTANARI U, 1991, ARTIF INTELL, V48, P143, DOI 10.1016/0004-3702(91)90059-S
   MONTANARI U, 1991, 8 INT C LOG PROGR IC, P223
   Poyias K., 2013, SCI COMPUT PROGRAM
   Poyias K, 2012, ELECTRON PROC THEOR, P67, DOI 10.4204/EPTCS.104.7
   Rossi F, 2006, FOUND ARTIF INTELL, P1
   SARASWAT VA, 1990, CONFERENCE RECORD OF THE SEVENTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P232, DOI 10.1145/96709.96733
NR 20
TC 0
Z9 0
U1 0
U2 0
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 1
PY 2015
VL 97
SI SI
BP 23
EP 30
DI 10.1016/j.scico.2013.11.015
PN 1
PG 8
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AU6PR
UT WOS:000345725100005
OA Green Submitted, Green Accepted
DA 2024-07-18
ER

PT J
AU Moonen, L
AF Moonen, Leon
TI Towards evidence-based recommendations to guide the evolution of
   component-based product families
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Program comprehension; Reverse engineering; Change impact analysis
AB Many large-scale software-intensive systems are produced as instances of component-based product families, a well-known tactic to develop a portfolio of software products based on a collection of shared assets. However, sharing components between software products introduces dependencies that complicate maintenance and evolution: changes made in a component to address an issue in one product may have undesirable effects on other products in which the same component is used. Therefore, developers not only need to understand how a proposed change will impact the component and product at hand; they also need to understand how it affects the whole product family, including systems that are already deployed. Given that these systems contain thousands of components, it is no surprise that it is hard to reason about the impact of a change on a single product, let alone assess the effects of more complex evolution scenarios on a complete product family. Conventional impact analysis techniques do not suffice for large-scale software-intensive systems and highly populated product families, and software engineers need better support to conduct these tasks. Finally, for an accountable comparison of alternative evolution scenarios, a measure is needed to quantify the scale of impact for each strategy. This is especially important in our context of safety-critical systems since these need to undergo (costly) re-certification after a change. Cost-effective recommendations should prioritize evolution scenarios that minimize impact scale, and thereby minimize re-certification efforts.
   This paper explores how reverse engineering and program comprehension techniques can be used to develop novel recommendation technology that uses concrete evidence gathered from software artifacts to support engineers with the evolution of families of complex, safety-critical, software-intensive systems. We give an overview of the state of the art in this area, discuss some of the research directions that have been considered up to now and, identify challenges, and pose a number of research questions to advance the state of the art. (C) 2013 Elsevier B.V. All rights reserved.
C1 Simula Res Lab, Oslo, Norway.
RP Moonen, L (corresponding author), Simula Res Lab, Oslo, Norway.
EM leon.moonen@computer.org
RI Moonen, Leon/M-8790-2015
OI Moonen, Leon/0000-0002-1761-6771
CR Anderson P, 2003, IEEE SOFTWARE, V20, P42, DOI 10.1109/MS.2003.1207453
   Anderson P, 2008, EIGHTH IEEE INTERNATIONAL WORKING CONFERENCE ON SOURCE CODE ANALYSIS AND MANIPULATION, PROCEEDINGS, P3, DOI 10.1109/SCAM.2008.11
   [Anonymous], 2000, SOFTWARE ARCHITECTUR
   [Anonymous], 2011, MODEL DRIVEN DOMAIN
   Binkley D, 2007, FoSE 2007: Future of Software Engineering, P104, DOI 10.1109/FOSE.2007.27
   Bohner S. A., 1996, SOFTWARE CHANGE IMPA
   Bosch J., 2000, Design and Use of Software Architectures: Adopting and Evolving a Product-Line Approach
   Chaumun MA, 1999, PROCEEDINGS OF THE THIRD EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, P130, DOI 10.1109/CSMR.1999.756690
   Deelstra S, 2005, J SYST SOFTWARE, V74, P173, DOI 10.1016/j.jss.2003.11.012
   Díaz J, 2011, LECT NOTES COMPUT SC, V6903, P114, DOI 10.1007/978-3-642-23798-0_12
   Feng T, 2006, SNPD 2006: SEVENTH ACIS INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING ARTIFICIAL INTELLIGENCE, NETWORKING, AND PARALLEL/DISTRIBUTED COMPUTING, PROCEEDINGS, P43
   Harrold M.J., 1999, ICSE WS TESTING DIST
   Hatton L, 2004, INFORM SOFTWARE TECH, V46, P465, DOI 10.1016/j.infsof.2003.09.016
   Hattori Lile., 2008, Brazilian Symposium on Databases, P210
   Kagdi H, 2007, J SOFTW MAINT EVOL-R, V19, P77, DOI 10.1002/smr.344
   Kagdi H, 2006, SECOND INTERNATIONAL IEEE WORKSHOP ON SOFTWARE EVOLVABILITY, PROCEEDINGS, P38, DOI 10.1109/SOFTWARE-EVOLVABILITY.2006.14
   Lehnert S., 2011, PROC 12 INT WORKSHOP, P41, DOI DOI 10.1145/2024445.2024454
   LEHNERT S., 2011, REV SOFTWARE CHANGE
   Mao CY, 2007, P INT COMP SOFTW APP, P641
   MATINLASSI M, 2004, INT C SOFTW ENG ICSE
   Moonen L., 2011, IEEE INT C PROGR COM
   OMG, 2010, ARCH DRIV MOD ADM KN
   Owen Sean., 2011, Mahout in Action
   Robillard MP, 2010, IEEE SOFTWARE, V27, P80, DOI 10.1109/MS.2009.161
   Rountev A., 2005, INT C COMP BAS SOFTW
   Shull F., 2008, ADV TOPICS EMPIRICAL
   Svahnberg M, 1999, J SOFTW MAINT-RES PR, V11, P391, DOI 10.1002/(SICI)1096-908X(199911/12)11:6<391::AID-SMR199>3.0.CO;2-8
   Szyperski C., 2002, Component Software: Beyond Object-Oriented Programming
   Wang ZJ, 2007, J INF SCI ENG, V23, P1769
   Witten IH, 2011, MOR KAUF D, P1
   Xiaobing Sun, 2010, 2010 IEEE Proceedings of 34th Annual Computer Software and Applications Conference (COMPSAC 2010), P373, DOI 10.1109/COMPSAC.2010.45
   Yan LM, 2008, ISISE 2008: INTERNATIONAL SYMPOSIUM ON INFORMATION SCIENCE AND ENGINEERING, VOL 1, P38, DOI 10.1109/ISISE.2008.138
   Yazdanshenas A. R., 2011, IEEE INT C SOFTW MAI
   Yazdanshenas A.R., 2012, IEEE INT C SOFTW MAI, V5
   Yazdanshenas A. R., 2012, IEEE INT C PROGR COM
NR 35
TC 0
Z9 0
U1 0
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 1
PY 2015
VL 97
SI SI
BP 105
EP 112
DI 10.1016/j.scico.2013.11.009
PN 1
PG 8
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AU6PR
UT WOS:000345725100019
OA Bronze
DA 2024-07-18
ER

PT J
AU Watson, BW
   Kourie, DG
   Cleophas, L
AF Watson, B. W.
   Kourie, D. G.
   Cleophas, L.
TI Experience with correctness-by-construction
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Correctness-by-construction; Refinement calculus; Algorithm derivation
AB We discuss the correctness-by-construction approach to software development, and our experience with this approach in various small to large scale algorithmic settings. We argue that although it is not realistic to apply the approach in developing every line of code of a software system, its pragmatic application to the algorithmically complex parts of such a system is worthwhile. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Watson, B. W.] Univ Stellenbosch, Fastar Res Grp, ZA-7600 Stellenbosch, South Africa.
   [Kourie, D. G.; Cleophas, L.] Univ Pretoria, Fastar Res Grp, ZA-0002 Pretoria, South Africa.
C3 Stellenbosch University; University of Pretoria
RP Cleophas, L (corresponding author), Univ Pretoria, Fastar Res Grp, ZA-0002 Pretoria, South Africa.
OI Cleophas, Loek/0000-0002-7221-3676
CR [Anonymous], THESIS EINDHOVEN U T
   Cleophas L., 2006, South African Computer Journal, P30
   Cleophas L., 2008, Ph.D. thesis
   DIJKSTRA E, 1989, COMMUN ACM, V32, P1414
   Dijkstra E. W., 1976, A Discipline of Pro-gramming
   Dijkstra E.W., 1967, CONSTRUCTIVE APPROAC
   DIJKSTRA EW, 1975, COMMUN ACM, V18, P453, DOI [10.1145/360933.360975, 10.1145/390016.808417]
   Gries David., 1980, The Science of Computer Programming, Vsecond
   HOARE CAR, 1969, COMMUN ACM, V12, P576, DOI 10.1145/363235.363259
   Kourie D.G., 2012, CORRECTNESS CONSTRUC
   Morgan C., 1998, Programming from Specification, VThird
   Watson B. W., 2010, THESIS U PRETORIA DE
   Watson BW, 2004, SOFTWARE PRACT EXPER, V34, P697, DOI 10.1002/spe.590
NR 13
TC 0
Z9 1
U1 0
U2 1
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 1
PY 2015
VL 97
SI SI
BP 55
EP 58
DI 10.1016/j.scico.2013.11.024
PN 1
PG 4
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AU6PR
UT WOS:000345725100010
DA 2024-07-18
ER

PT J
AU Krishnan, L
   Van Wyk, E
AF Krishnan, Lijesh
   Van Wyk, Eric
TI Monolithic and modular termination analyses for higher-order attribute
   grammars
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Higher-order attribute grammars; Attribute grammar analysis; Termination
   analysis
ID LANGUAGES
AB In this paper we describe a sound, but not complete, analysis to prove the termination of higher-order attribute grammar evaluation caused by the creation of an unbounded number of (finite) trees as local tree-valued attributes, which are then themselves decorated with attributes. The analysis extracts a set of term-rewriting rules from the grammar that model creation of new syntax trees during the evaluation of higher-order attributes. If this term rewriting system terminates, then only a finite number of trees will be created during attribute grammar evaluation. The analysis places an ordering on nonterminals to handle the cases in which higher-order inherited attributes are used to ensure that a finite number of trees are created using such attributes. When paired with the traditional completeness and circularity analyses for attribute grammars and the assumption that each attribute equation defines a terminating computation, this analysis can be used to show that attribute grammar evaluation will terminate normally. This analysis can be applied to a wide range of common attribute grammar idioms and has been used to show that evaluation of our specification of Java 1.4 terminates. We also describe a modular version of the analysis that is performed on independently developed language extension grammars and the host language being extended. If the extensions individually pass the modular analysis then their composition is also guaranteed to terminate. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Krishnan, Lijesh; Van Wyk, Eric] Univ Minnesota, Dept Comp Sci & Engn, Minneapolis, MN 55455 USA.
C3 University of Minnesota System; University of Minnesota Twin Cities
RP Van Wyk, E (corresponding author), Univ Minnesota, Dept Comp Sci & Engn, Minneapolis, MN 55455 USA.
EM krishnan@cs.umn.edu; evw@cs.umn.edu
FU National Science Foundation [0905581, 1047961]; Direct For Computer &
   Info Scie & Enginr; Div Of Information & Intelligent Systems [0905581]
   Funding Source: National Science Foundation; Direct For Computer & Info
   Scie & Enginr; Office of Advanced Cyberinfrastructure (OAC) [1047961]
   Funding Source: National Science Foundation
FX We would like to thank the anonymous reviewers of the original
   conference version and this extended version for their helpful and
   insightful comments. This material is based upon work partially
   supported by the National Science Foundation under Grants No. 0905581
   and No. 1047961.
CR [Anonymous], 1971, Math. Syst. Theory, DOI DOI 10.1007/BF01702865
   Backhouse K, 2002, LECT NOTES COMPUT SC, V2280, P142
   Boyland JT, 2005, J ACM, V52, P627, DOI 10.1145/1082036.1082042
   DERSHOWITZ N, 1982, THEOR COMPUT SCI, V17, P279, DOI 10.1016/0304-3975(82)90026-3
   Ekman T, 2007, SCI COMPUT PROGRAM, V69, P14, DOI 10.1016/j.scico.2007.02.003
   Gao JM, 2007, LECT NOTES COMPUT SC, V4422, P102
   Giesl Jurgen., 2003, 6th International Workshop on Termination, P68
   Hedin G., 2000, Informatica, V24, P301
   JOHNSSON T, 1987, LECT NOTES COMPUT SC, V274, P154
   Kaminski Ted, 2012, Lecture Notes in Computer Science, V7745, P352, DOI DOI 10.1007/978-3-642-36089-3_20
   Knuth D. E., 1968, Mathematical Systems Theory, V2, P127, DOI 10.1007/BF01692511
   Krishnan L., 2012, THESIS U MINNESOTA M
   Krishnan L., 2012, LECT NOTES COMPUT SC, V7745, P44
   Lee CS, 2001, ACM SIGPLAN NOTICES, V36, P81, DOI 10.1145/373243.360210
   Mali Y., 2011, LECT NOTES COMPUT SC, V6823, P108
   Saraiva J, 2003, LECT NOTES COMPUT SC, V2830, P307
   Schwerdfeger AC, 2009, ACM SIGPLAN NOTICES, V44, P199, DOI 10.1145/1543135.1542499
   Sereni D, 2005, LECT NOTES COMPUT SC, V3780, P281
   Sloane AM, 2013, SCI COMPUT PROGRAM, V78, P1752, DOI 10.1016/j.scico.2011.11.005
   Swierstra SD, 1999, LECT NOTES COMPUT SC, V1608, P150
   Van Wyk E, 2002, LECT NOTES COMPUT SC, V2304, P128
   Van Wyk E, 2007, LECT NOTES COMPUT SC, V4609, P575
   Van Wyk E, 2010, SCI COMPUT PROGRAM, V75, P39, DOI 10.1016/j.scico.2009.07.004
   Vogt H., 1989, ACM SIGPLAN 89 C PRO, P131
   VOGT H, 1989, THESIS UTRECHT U NET
NR 25
TC 0
Z9 0
U1 0
U2 1
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 15
PY 2014
VL 96
BP 511
EP 526
DI 10.1016/j.scico.2014.05.016
PN 4
PG 16
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AT8KC
UT WOS:000345181300007
OA hybrid
DA 2024-07-18
ER

PT J
AU Sarimbekov, A
   Zheng, YD
   Ansaloni, D
   Bulej, L
   Marek, L
   Binder, W
   Tuma, P
   Qi, ZW
AF Sarimbekov, Aibek
   Zheng, Yudi
   Ansaloni, Danilo
   Bulej, Lubomir
   Marek, Lukas
   Binder, Walter
   Tuma, Petr
   Qi, Zhengwei
TI Dynamic program analysis-Reconciling developer productivity and tool
   performance
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT Conference on Software Verification and Testing (SVT) Track at the 28th
   ACM Symposium on Applied Computing (ACM SAC)
CY MAR, 2013
CL Coimbra, PORTUGAL
SP ACM
DE Dynamic program analysis; Bytecode instrumentation; Development
   productivity; Controlled experiment
AB Dynamic program analysis tools serve many important software engineering tasks such as profiling, debugging, testing, program comprehension, and reverse engineering. Many dynamic analysis tools rely on program instrumentation and are implemented using low-level instrumentation libraries, resulting in tedious and error-prone tool development. Targeting this issue, we have created the Domain-Specific Language for Instrumentation (DiSL), which offers high-level programming abstractions especially designed for instrumentation-based dynamic analysis. When designing DiSL, our goal was to boost the productivity of tool developers targeting the Java Virtual Machine, without impairing the performance of the resulting tools. In this paper we assess whether DiSL meets this goal. First, we perform a controlled experiment to measure tool development time and correctness of the developed tools, comparing DiSL with a prevailing, state-of-the-art instrumentation library. Second, we recast 10 open-source software engineering tools in DiSL and compare source code metrics and performance with the original implementations. Our studies show that DiSL significantly improves developer productivity, enables concise tool implementations, and does not have any negative impact on tool performance. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Marek, Lukas; Tuma, Petr] Charles Univ Prague, CR-11636 Prague 1, Czech Republic.
   [Sarimbekov, Aibek; Zheng, Yudi; Ansaloni, Danilo; Bulej, Lubomir; Binder, Walter] Univ Lugano, Lugano, Switzerland.
   [Qi, Zhengwei] Shanghai Jiao Tong Univ, Shanghai 200030, Peoples R China.
C3 Charles University Prague; Universita della Svizzera Italiana; Shanghai
   Jiao Tong University
RP Sarimbekov, A (corresponding author), Univ Lugano, Lugano, Switzerland.
EM aibek.sarimbekov@usi.ch; yudi.zheng@usi.ch; danilo.ansaloni@usi.ch;
   lubomir.bulej@usi.ch; lukas.marek@d3s.mff.cuni.cz; walter.binder@usi.ch;
   petr.tuma@d3s.mff.cuni.cz; qizhenwei@sjtu.edu.cn
RI Tuma, Petr/A-3094-2009; Bulej, Lubomír/G-3045-2014
OI Tuma, Petr/0000-0002-7035-2322; Bulej, Lubomír/0000-0002-4573-6084;
   Binder, Walter/0000-0002-2477-2182
CR Ammons G, 1997, ACM SIGPLAN NOTICES, V32, P85, DOI 10.1145/258916.258924
   [Anonymous], P 3 INT C ASP OR SOF
   Artzi S, 2008, LECT NOTES COMPUT SC, V5142, P542, DOI 10.1007/978-3-540-70592-5_23
   Binder W., 2009, P 3 WORKSH VIRT MACH, P1
   Binder W, 2009, SOFTWARE PRACT EXPER, V39, P47, DOI 10.1002/spe.890
   Blackburn S.M., P 21 ACM SIGPLAN C O, P169
   Bodden E., 2008, Proceedings of the International Symposium on Software Testing and Analysis (ISSTA), P155, DOI DOI 10.1145/1390630.1390650
   Bodden E, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P241, DOI 10.1145/1985793.1985827
   Bodden E, 2010, IEEE T SOFTWARE ENG, V36, P509, DOI 10.1109/TSE.2010.25
   Chiba S, 2000, LECT NOTES COMPUT SC, V1850, P313
   Cornelissen B, 2011, IEEE T SOFTWARE ENG, V37, P341, DOI 10.1109/TSE.2010.47
   Di Penta M, 2007, INT C PROGRAM COMPRE, P281
   Eaddy M, 2007, LECT NOTES COMPUT SC, V4829, P200
   Flann C., 2010, Addressing global change: a new agenda for botanic gardens. Fourth Global Botanic Gardens Congress, Dublin, Irish Republic, 13-18 June 2010, P1, DOI 10.1145/1806672.1806674
   Goetz B, 2006, JAVA CONCURRENCY PRA
   Gosling J., 2005, Java Language Specification, Vthird
   Kiczales G, 1997, LECT NOTES COMPUT SC, V1241, P220, DOI 10.1007/BFb0053381
   Kinneer A, 2007, PROC INT CONF SOFTW, P51, DOI 10.1109/ICSECOMPANION.2007.68
   Marek Lukas, 2012, AOSD, P239, DOI [10.1145/2162049.2162077, DOI 10.1145/2162049.2162077]
   Naik M., 2012, CHORD STATIC DYNAMIC
   O'Hair K., 2004, HPROF HEAP CPU PROFI
   Oracle Corp, 2007, JVM TOOL INT JVMTI V
   Pearce DJ, 2007, SOFTWARE PRACT EXPER, V37, P747, DOI 10.1002/spe.788
   Röthlisberger D, 2012, IEEE T SOFTWARE ENG, V38, P579, DOI 10.1109/TSE.2011.42
   Sarimbekov A., P 22 AUSTR SOFTW ENG, P11
   Sarimbekov A, 2014, SCI COMPUT PROGRAM, V79, P146, DOI 10.1016/j.scico.2011.11.003
   Sewe A, 2012, ACM SIGPLAN NOTICES, V47, P97, DOI 10.1145/2426642.2259010
   Vallée-Rai R, 2000, LECT NOTES COMPUT SC, V1781, P18
   Wettel R, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P551, DOI 10.1145/1985793.1985868
   Xu GQ, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P151, DOI 10.1145/1368088.1368110
   Zheng YD, 2012, LECT NOTES COMPUT SC, V7304, P353, DOI 10.1007/978-3-642-30561-0_24
NR 31
TC 0
Z9 0
U1 0
U2 7
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 1
PY 2014
VL 95
BP 344
EP 358
DI 10.1016/j.scico.2014.03.014
PN 3
PG 15
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA AS9RH
UT WOS:000344578800006
OA Bronze
DA 2024-07-18
ER

PT J
AU Chilton, C
   Jonsson, B
   Kwiatkowska, M
AF Chilton, Chris
   Jonsson, Bengt
   Kwiatkowska, Marta
TI Compositional assume-guarantee reasoning for input/output component
   theories
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 9th International Symposium on Formal Aspects of Component Software
   (FACS)
CY SEP 12-14, 2012
CL Mountain View, CA
DE Assume-guarantee; Contracts; Interface automata; Substitutivity;
   Quotient
ID SPECIFICATION; VERIFICATION
AB We formulate a sound and complete assume-guarantee framework for reasoning compositionally about components modelled as a variant of interface automata. The specification of a component, which expresses both safety and progress properties of input and output interactions with the environment, is characterised by finite traces. The framework supports dynamic reasoning about components and specifications, and includes rules for parallel composition, logical conjunction and disjunction corresponding to independent development, and quotient for incremental synthesis. Practical applicability of the framework is demonstrated through a link layer protocol case study. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Chilton, Chris; Kwiatkowska, Marta] Univ Oxford, Dept Comp Sci, Oxford OX1 2JD, England.
   [Jonsson, Bengt] Uppsala Univ, Dept Informat Technol, Uppsala, Sweden.
C3 University of Oxford; Uppsala University
RP Kwiatkowska, M (corresponding author), Univ Oxford, Dept Comp Sci, Oxford OX1 2JD, England.
OI Kwiatkowska, Marta/0000-0001-9022-7599
CR ABADI M, 1993, ACM T PROGR LANG SYS, V15, P73, DOI 10.1145/151646.151649
   ABADI M, 1995, ACM T PROGR LANG SYS, V17, P507, DOI 10.1145/203095.201069
   ABADI M, 1993, THEOR COMPUT SCI, V114, P3, DOI 10.1016/0304-3975(93)90151-I
   [Anonymous], 1984, Logics and Models of Concurrent Systems (NATO ASI Series, DOI [DOI 10.1007/978-3-642-82453-1_5, 10.1007/978-3-642-82453-1\5]
   [Anonymous], LNCS
   Bauer SS, 2012, LECT NOTES COMPUT SC, V7212, P43, DOI 10.1007/978-3-642-28872-2_3
   Benveniste A, 2008, LECT NOTES COMPUT SC, V5382, P200, DOI 10.1007/978-3-540-92188-2_9
   Bhaduri P, 2008, FORM ASP COMPUT, V20, P205, DOI 10.1007/s00165-007-0045-4
   Chen TL, 2012, LECT NOTES COMPUT SC, V7211, P148, DOI 10.1007/978-3-642-28869-2_8
   Chilton C., 2013, CSRR1302 U OXFORD
   Chilton Chris, 2013, THESIS U OXFORD
   Clarke E. M., 1989, Proceedings. Fourth Annual Symposium on Logic in Computer Science (Cat. No.89CH2753-2), P353, DOI 10.1109/LICS.1989.39190
   Collette P., 1993, TAPSOFT '93: Theory and Practice of Software Development. 4th International Joint Conference CAAP/FASE Proceedings, P230
   de Alfaro L., 2001, Software Engineering Notes, V26, P109, DOI 10.1145/503271.503226
   Delahaye B, 2011, FORM METHOD SYST DES, V38, P1, DOI 10.1007/s10703-010-0107-8
   Doyen L., 2008, Proc. ACM IEEE Int. Conf. Embedded Software, P79, DOI DOI 10.1145/1450058.1450070
   Emmi M, 2008, LECT NOTES COMPUT SC, V5014, P116
   Grumberg O., 1991, ACM T PROGRAM LANG S, V16
   Jonsson B, 1996, THEOR COMPUT SCI, V167, P47, DOI 10.1016/0304-3975(96)00069-2
   JONSSON B, 1994, ACM T PROGR LANG SYS, V16, P259, DOI 10.1145/174662.174665
   Larsen KG, 2006, LECT NOTES COMPUT SC, V4085, P82
   Maier P, 2003, LECT NOTES COMPUT SC, V2620, P343
   Namjoshi KS, 2010, ACM T COMPUT LOG, V11, DOI 10.1145/1740582.1740584
   Nyman U, 2007, LECT NOTES COMPUT SC, V4421, P64
   Raclet JB, 2011, FUND INFORM, V108, P119, DOI 10.3233/FI-2011-416
NR 25
TC 13
Z9 15
U1 0
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 1
PY 2014
VL 91
SI SI
BP 115
EP 137
DI 10.1016/j.scico.2013.12.010
PN A
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA AK4NL
UT WOS:000338401300006
OA hybrid
DA 2024-07-18
ER

PT J
AU Abdeen, H
   Ducasse, S
   Pollet, D
   Alloui, I
   Falleri, JR
AF Abdeen, Hani
   Ducasse, Stephane
   Pollet, Damien
   Alloui, Ilham
   Falleri, Jean-Remy
TI The Package Blueprint: Visually analyzing and quantifying packages
   dependencies
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Software engineering; Software comprehension; Software maintenance;
   Software visualization
ID VISUALIZATION
AB Large object-oriented applications are structured over many packages. Packages are important but complex structural entities that are difficult to understand since they act as containers of classes, which can have many dependencies with other classes spread over multiple packages. However to be able to take decisions (e.g. refactoring and/or assessment decisions), maintainers face the challenges of managing (sorting, grouping) the massive amount of dependencies between classes spread over multiple packages. To help maintainers, there is a need for at the same time understanding, and quantifying, dependencies between classes as well as understanding how packages as containers of such classes depend on each other.
   In this paper, we present a visualization, named Package Blueprint, that reveals in detail package internal structure, as well as the dependencies between an observed package and its neighbors, at both package and class levels. Package blueprint aims at assisting maintainers in understanding package structure and dependencies, in particular when they focus on few packages and want to take refactoring decisions and/or to assess the structure of those packages. A package blueprint is a space filling matrix-based visualization, using two placement strategies that are enclosure and adjacency. Package blueprint is structured around the notion of surfaces that group classes and their dependencies by their packages (i.e., enclosure placement); whilst surfaces are placed next to their parent node which is the package under-analysis (i.e., adjacency placement). We present two views: one stressing how an observed package depends upon the rest of the system and another stressing how the system depends upon that package.
   To evaluate the contribution of package blueprint for understanding packages we performed an exploratory user study comparing package blueprint with an advanced IDE. The results show that users of package blueprint are faster in analyzing and assessing package structure. The results are proved statically significant and they show that package blueprint considerably improves the experience of standard browser users. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Abdeen, Hani; Ducasse, Stephane; Pollet, Damien] RMoD INRIA Lille Nord Europe, LIFL, CNRS UMR 8022, Lille, France.
   [Alloui, Ilham] LISTIC Univ Savoie, Savoie, France.
   [Falleri, Jean-Remy] Univ Bordeaux, LaBRI, UMR 5800, F-33400 Talence, France.
C3 Universite de Lille; Universite Savoie Mont Blanc; Universite de
   Bordeaux; Centre National de la Recherche Scientifique (CNRS)
RP Ducasse, S (corresponding author), RMoD INRIA Lille Nord Europe, LIFL, CNRS UMR 8022, Lille, France.
EM hani.abdeen@inria.fr; stephane.ducasse@inria.fr; damien.pollet@inria.fr;
   ilham.alloui@univ-savoie.fr; falleri@labri.fr
OI Falleri, Jean-Remy/0000-0002-8284-7218; Ducasse,
   Stephane/0000-0001-6070-6599
CR Abdeen H., 2011, 2011 18th Working Conference on Reverse Engineering, P394, DOI 10.1109/WCRE.2011.55
   Abdeen H., 2009, THESIS U LILLE
   Abdeen H, 2008, CSMR 2008: 12TH EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, P213, DOI 10.1109/CSMR.2008.4493316
   Abdeen H, 2013, WORK CONF REVERSE EN, P212, DOI 10.1109/WCRE.2013.6671296
   Abdeen H, 2009, WORK CONF REVERSE EN, P103, DOI 10.1109/WCRE.2009.13
   Abdeen H, 2010, INFORM SOFTWARE TECH, V52, P1312, DOI 10.1016/j.infsof.2010.07.005
   Abello J, 2004, IEEE SYMPOSIUM ON INFORMATION VISUALIZATION 2004, PROCEEDINGS, P183, DOI 10.1109/INFVIS.2004.46
   [Anonymous], 2000, Information Visualization: Perception for Design
   [Anonymous], PHARO BY EXAMPLE
   [Anonymous], 2018, The Visual Display of Quantitative Information
   [Anonymous], 2008, GUIDE ADV EMPIRICAL, DOI DOI 10.1007/978-1-84800-044-511
   [Anonymous], P CSMR 2006 10 EUR C
   Anquetil N., 1999, Sixth Working Conference on Reverse Engineering (Cat. No.PR00303), P235, DOI 10.1109/WCRE.1999.806964
   Bertin J., 1983, SEMIOLOGY GRAPHICS D
   Beyer D., 2005, P 21 IEEE INT C SOFT, P89
   Briand L. C., 1998, Empirical Software Engineering, V3, P65, DOI 10.1023/A:1009783721306
   Briand LC, 1999, IEEE T SOFTWARE ENG, V25, P91, DOI 10.1109/32.748920
   Chuah MC, 1998, IEEE COMPUT GRAPH, V18, P24, DOI 10.1109/38.689658
   Churcher Neville., 2003, Proceedings of the Asia-Pacific symposium on Information visualisation - Volume 24, APVis '03, P89
   D'Ambros M, 2006, WORK CONF REVERSE EN, P189
   DUCASSE S, 2005, P 11 IEEE INT SOFTW, P70
   Ducasse S, 2006, PROC IEEE INT CONF S, P203
   Ducasse Stephane., 2007, Software Maintenance, P94
   Eick SG, 2002, IEEE T SOFTWARE ENG, V28, P396, DOI 10.1109/TSE.2002.995435
   Fowler M., 2018, Refactoring: Improving the Design of Existing Code
   Froehlich J, 2004, PROC INT CONF SOFTW, P387, DOI 10.1109/ICSE.2004.1317461
   Ghoniem M., 2005, Information Visualization, V4, P114, DOI 10.1057/palgrave.ivs.9500092
   Ghoniem M, 2004, IEEE SYMPOSIUM ON INFORMATION VISUALIZATION 2004, PROCEEDINGS, P17, DOI 10.1109/INFVIS.2004.1
   Gomez Veronica Uquillas, 2010, Proceedings 17th Working Conference on Reverse Engineering (WCRE 2010), P55, DOI 10.1109/WCRE.2010.15
   Healey C., 1992, THESIS U BRIT COLUMB
   Healey C.G., 1993, GI 93 P GRAPH INT 19
   Henry N, 2007, IEEE T VIS COMPUT GR, V13, P1302, DOI 10.1109/TVCG.2007.70582
   Herman I, 2000, IEEE T VIS COMPUT GR, V6, P24, DOI 10.1109/2945.841119
   Holten D., 2009, THESIS COMPUTER SCI
   Holten D, 2006, IEEE T VIS COMPUT GR, V12, P741, DOI 10.1109/TVCG.2006.147
   Jain AK, 1999, ACM COMPUT SURV, V31, P264, DOI 10.1145/331499.331504
   Karouach S., 2003, J INFORM SCI DECIS M, V6, P12
   Lanza Michele, 2006, Objectoriented metrics in practice: using software metrics to characterize, evaluate, and improve the design of object-oriented systems
   Laval Jannik, 2009, WCRE 09 P 2009 16 WO
   Marcus A., 2003, P ACM S SOFTW VIS IE, p27ff
   Margaret-Anne D.Storey., 2005, SOFTVIS, P193, DOI DOI 10.1145/1056018.1056045
   Martin R.C., 2000, DESIGN PRINCIPALS DE
   Mitchell BS, 2006, IEEE T SOFTWARE ENG, V32, P193, DOI 10.1109/TSE.2006.31
   Müller C, 2010, LECT NOTES COMPUT SC, V6455, P447
   Pinzger Martin., 2005, SOFTVIS 05, P67
   Pressman R. S., 2010, Software Engineering: A Practitioner's Approach
   Sangal N, 2005, ACM SIGPLAN NOTICES, V40, P167, DOI 10.1145/1103845.1094824
   Storey MAD, 1995, INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE, 1995 PROCEEDINGS, P275, DOI 10.1109/ICSM.1995.526549
   Storey MAD, 1997, IEEE SYMPOSIUM ON INFORMATION VISUALIZATION, PROCEEDINGS, P38, DOI 10.1109/INFVIS.1997.636784
   TREISMAN A, 1985, COMPUT VISION GRAPH, V31, P156, DOI 10.1016/S0734-189X(85)80004-9
   Tufte E., 1997, VISUAL STAT THINKING
   Voinea L., 2005, Proceedings of the ACM Symposium on Software Visualization, P47, DOI [10.1145/1056018.1056025, DOI 10.1145/1056018.1056025]
   von Landesberger T, 2011, COMPUT GRAPH FORUM, V30, P1719, DOI 10.1111/j.1467-8659.2011.01898.x
   Xie XR, 2006, WORK CONF REVERSE EN, P231
NR 54
TC 2
Z9 2
U1 1
U2 4
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 1
PY 2014
VL 89
BP 298
EP 319
DI 10.1016/j.scico.2014.02.016
PN C
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AJ8CB
UT WOS:000337929200005
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Davies, J
   Gibbons, J
   Harris, S
   Crichton, C
AF Davies, Jim
   Gibbons, Jeremy
   Harris, Steve
   Crichton, Charles
TI The CancerGrid experience: Metadata-based model-driven engineering for
   clinical trials
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Metadata; ISO/IEC 11179; Semantic frameworks; Model-driven engineering;
   Clinical informatics; Electronic government
ID OVARIAN-CANCER; BEHAVIOR
AB The CancerGrid approach to software support for clinical trials is based on two principles: careful curation of semantic metadata about clinical observations, to enable subsequent data integration, and model-driven generation of trial-specific software artefacts from a trial protocol, to streamline the software development process. This paper explains the approach, presents four varied case studies, and discusses the lessons learned. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Davies, Jim; Gibbons, Jeremy; Harris, Steve; Crichton, Charles] Univ Oxford, Dept Comp Sci, Oxford OX1 2JD, England.
C3 University of Oxford
RP Gibbons, J (corresponding author), Univ Oxford, Dept Comp Sci, Oxford OX1 2JD, England.
EM jim.davies@cs.ox.ac.uk; jeremy.gibbons@cs.ox.ac.uk;
   steve.harris@cs.ox.ac.uk; charles.crichton@cs.ox.ac.uk
RI Birts, Charles N/N-9845-2013
OI Davies, Jim/0000-0003-4664-6862; Harris, Steve/0000-0002-0899-325X;
   Crichton, Charles/0000-0002-9171-1427
FU Medical Research Council [G0300648]; Research Councils UK
   [EP/F059345/1]; Engineering and Physical Sciences Research Council
   [EP/F1019944/1]; EU Framework Programme 7 [228436]; Microsoft Research;
   EPSRC [EP/F059345/1] Funding Source: UKRI; MRC [G0300648] Funding
   Source: UKRI
FX We would like to acknowledge the other members of the CancerGrid team
   and related projects - Daniel Abler, James Brenton, Carlos Caldas, Radu
   Calinescu, Marta Kwiatkowska, Peter Maccallum, Sylvia Nagl, Aadya
   Shukla, Matthew Snape, Andrew Tsui, James Welch, Tianyi Zang - for their
   contributions towards the ideas presented here. We are also very
   grateful to the Medical Research Council (grant number G0300648),
   Research Councils UK (grant number EP/F059345/1), the Engineering and
   Physical Sciences Research Council (grant number EP/F1019944/1), the EU
   Framework Programme 7 (grant number 228436), and Microsoft Research, for
   funding this work.
CR Abler D., SPLASH WORKSH DOM SP
   Altman DG, 2001, ANN INTERN MED, V134, P663, DOI 10.7326/0003-4819-134-8-200104170-00012
   [Anonymous], BIOMEDICAL J UNPUB
   [Anonymous], 11179 ISO IEC JTCI S
   Begg C, 1996, JAMA-J AM MED ASSOC, V276, P637, DOI 10.1001/jama.276.8.637
   Blair T., 1999, 4310 CM UK CAB OFF
   Brenton J., UK E SCI ALL HANDS M
   Brenton J., MICR ESCIENCE WORKSH
   Calinescu R., OOPSLA WORKSH SERV O, P57
   Calinescu R., SOFTWARE ENG FORMAL
   Clarke M, 1998, LANCET, V351, P1451
   Clinical Data Interchange Standards Consortium, 2010, TECHN REP VERS 1 3 1
   Crichton C., INT C THEOR PRACT EL, P30
   Crichton C., ICSE WORKSH SOFTW EN
   Crichton C., 2009, STANDARDIZATION QUER
   Crichton C., HICSS WORKSH EL GOV
   Crijns APG, 2003, EJC SUPPL, V1, P127, DOI 10.1016/S1359-6349(03)90017-6
   Davies J., INT C THEOR PRACT EL
   Davies J., INT S FDN HLTH INF E
   Davies J., MICR ESCIENCE WORKSH
   de Graeff P, 2006, BRIT J CANCER, V95, P627, DOI 10.1038/sj.bjc.6603300
   Del Fabro MD, 2009, SOFTW SYST MODEL, V8, P305, DOI 10.1007/s10270-008-0094-z
   Earl H., 2007, 78234870 ISRCTN
   Golding J, 2001, PAEDIATR PERINAT EP, V15, P74
   Harris PA, 2009, J BIOMED INFORM, V42, P377, DOI 10.1016/j.jbi.2008.08.010
   International Cancer Genome Consortium, 2012, ES CANC ES AD
   Laine C, 2007, BRIT MED J, V334, P1177, DOI 10.1136/bmj.39233.510810.80
   Lyotard JF, 1984, The Postmodern Condition: A Report on Knowledge
   MacArthur GJ, 2012, J PUBLIC HEALTH-UK, V34, pI20, DOI 10.1093/pubmed/fds006
   Moher D, 2001, LANCET, V357, P1191, DOI 10.1016/S0140-6736(00)04337-3
   Nature Publishing Group, 2012, POL AV DAT MAT
   Noble J., P ONW TRACK OOPSLA, P49
   *OBJ MAN GROUP, 2001, MOD DRIV ARCH
   Papatheodorou I, 2009, BMC MED GENOMICS, V2, DOI 10.1186/1755-8794-2-66
   Poole C., 2004, 51146252 ISRCTN
   Poole C., 2001, 42625759 ISRCTN
   Schulz KF, 2010, PLOS MED, V7, DOI 10.1371/journal.pmed.1000251
   Sim I, 2005, PLOS MED, V2, P1090, DOI 10.1371/journal.pmed.0020365
   The Cochrane Collaboration, 2012, COCHR CENTR REG CONT
   University of Birmingham School of Medicine, 1997, MEDLINES, V4
   Vardigan M., 2008, The International Journal of Digital Curation, V3, P107, DOI DOI 10.2218/IJDC.V3I1.45
   Westgarth C, 2012, PLOS ONE, V7, DOI 10.1371/journal.pone.0031315
   Williams HC, 2005, J INVEST DERMATOL, V124, pviii, DOI 10.1111/j.0022-202X.2005.23665.x
   Winsper C, 2012, J AM ACAD CHILD PSY, V51, P271, DOI 10.1016/j.jaac.2012.01.001
   Wong P.Y.H., SOFTWARE COMPOSITION
   Wong PYH, 2008, LECT NOTES COMPUT SC, V5063, P76, DOI 10.1007/978-3-540-69927-9_6
   Wong PYH, 2011, SCI COMPUT PROGRAM, V76, P942, DOI 10.1016/j.scico.2010.09.007
   Wong PYH, 2011, SCI COMPUT PROGRAM, V76, P633, DOI 10.1016/j.scico.2009.09.010
NR 48
TC 13
Z9 13
U1 0
U2 9
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 1
PY 2014
VL 89
SI SI
BP 126
EP 143
DI 10.1016/j.scico.2013.02.010
PN B
PG 18
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AJ8CA
UT WOS:000337929100005
OA hybrid, Green Submitted
DA 2024-07-18
ER

PT J
AU Cuadrado, JS
   Izquierdo, JLC
   Molina, JG
AF Sanchez Cuadrado, Jesus
   Izquierdo, Javier Luis Canovas
   Garcia Molina, Jesus
TI Applying model-driven engineering in small software enterprises
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Model Driven Engineering; Experience report; Small companies;
   Incremental consistency
ID LANGUAGE
AB Model-Driven Engineering (MDE) is increasingly gaining acceptance in the software engineering community, however its adoption by the industry is far from successful. The number of companies applying MDE is still very limited. Although several case studies and reports have been published on MDE adoption in large companies, experience reports on small enterprises are still rare, despite the fact that they represent a large part of the software companies ecosystem.
   In this paper we report on our practical experience in two transfer of technology projects on two small companies. In order to determine the degree of success of these projects we present some factors that have to be taken into account in transfer of technology projects. Then, we assess both projects analyzing these factors and applying some metrics to give hints about the potential productivity gains that MDE could bring. We also comment on some lessons learned. These experiences suggest that MDE has the potential to make small companies more competitive, because it enables them to build powerful automation tools at modest cost. We will also present the approach followed to train these companies in MDE, and we contribute the teaching material so that it can be used or adapted by others projects of this nature. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Sanchez Cuadrado, Jesus] Univ Autonoma Madrid, E-28049 Madrid, Spain.
   [Izquierdo, Javier Luis Canovas] Ecole Mines Nantes INRIA, AtlanMod, Nantes, France.
   [Garcia Molina, Jesus] Univ Murcia, E-30001 Murcia, Spain.
C3 Autonomous University of Madrid; IMT - Institut Mines-Telecom; IMT
   Atlantique; University of Murcia
RP Cuadrado, JS (corresponding author), Univ Autonoma Madrid, E-28049 Madrid, Spain.
EM jesus.sanchez.cuadrado@uam.es; javier.canovas@inria.fr; jmolina@um.es
RI Izquierdo, Javier Luis Canovas/JAO-0822-2023; Izquierdo, Javier Luis
   Canovas/E-8940-2016; GARCIA-MOLINA, JESUS J/X-7078-2019; Sanchez
   Cuadrado, Jesus/L-2365-2013
OI Izquierdo, Javier Luis Canovas/0000-0002-2326-1700; Sanchez Cuadrado,
   Jesus/0000-0001-9755-5616
FU Spanish Ministry of Economy and Competitivity [TIN2011-24139]; European
   Commission [317859]; Fundacion Seneca-CARM [15389/PI/10]
FX We are grateful to Pedro Luis Lopez Sanchez and Carlos Castillo for
   their rapid and precise responses about the projects. We also credit
   Pedro for devising, and sharing with us, the incremental consistency
   mechanism based on Git. This work has been supported by the Spanish
   Ministry of Economy and Competitivity (project "Go Lite" TIN2011-24139),
   by the European Commission under the ICT Policy Support Programme, grant
   no. 317859, and by Fundacion Seneca-CARM (grant 15389/PI/10).
CR [Anonymous], 2003, Modernizing Legacy Systems: Software Technologies, Engineering Processes,and Business Practices
   [Anonymous], 2003, MDA GUIDE VERSION 1
   [Anonymous], 2012, TRAINING MDE MAT
   Aranda Jorge, 2012, Model Driven Engineering Languages and Systems. Proceedings 15th International Conference, MODELS 2012, P692, DOI 10.1007/978-3-642-33666-9_44
   Baker P, 2005, LECT NOTES COMPUT SC, V3713, P476, DOI 10.1007/11557432_36
   Bézivin J, 2006, ELECTRON NOTES THEOR, V152, P69, DOI 10.1016/j.entcs.2006.01.015
   Briand L, 2012, MODEL DRIVEN ENG LAN
   Izquierdo JLC, 2010, IEEE SOFTWARE, V27, P37, DOI 10.1109/MS.2010.61
   Izquierdo JLC, 2009, LECT NOTES COMPUT SC, V5562, P82, DOI 10.1007/978-3-642-02674-4_7
   CHIKOFSKY EJ, 1990, IEEE SOFTWARE, V7, P13, DOI 10.1109/52.43044
   Clark A., 2008, APPL METAMODELLING F
   Clark T, 2012, SOFTW SYST MODEL, V11, P481, DOI 10.1007/s10270-012-0260-1
   Crepinsek M, 2010, COMPUT SCI INF SYST, V7, P309, DOI 10.2298/CSIS1002309C
   Daft R.L., 1992, Organization theory and design
   E. European Comission Industry, 2012, US GUID MOD DECL
   G. DVCS, 2012, GIT FAST VERS CONTR
   Hutchinson J., 2011, ICSE 11, P471
   Hutchinson J, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P633, DOI 10.1145/1985793.1985882
   I. U. ScoreBoard, INNOVATION UNIONS PE
   Jouault F., 2006, 5 INT C GEN PROGR CO, P249, DOI DOI 10.1145/1173706.1173744
   Jouault F, 2006, LECT NOTES COMPUT SC, V4037, P171
   Kelly S., 2008, Domain-Specific Modeling
   Long E, 1998, COMPUTER, V31, P35, DOI 10.1109/2.707615
   Mellor S.J., 2004, ADDISON WESLEY OBJEC
   Mohagheghi P, 2008, LECT NOTES COMPUT SC, V5095, P432, DOI 10.1007/978-3-540-69100-6_31
   N. S. I. of Spain, 2009, NUMB COMP IND SECT
   Richardson I, 2007, IEEE SOFTWARE, V24, P18, DOI 10.1109/MS.2007.12
   Sánchez Cuadrado J, 2006, LECT NOTES COMPUT SC, V4066, P158
   Cuadrado JS, 2009, SOFTW SYST MODEL, V8, P325, DOI 10.1007/s10270-008-0093-0
   Selic B, 2008, AUTOMAT SOFTW ENG, V15, P379, DOI 10.1007/s10515-008-0035-7
   Selic B, 2012, SOFTW SYST MODEL, V11, P513, DOI 10.1007/s10270-012-0261-0
   Stahl T., 2006, Model-driven software development: technology, engineering, management
   Staron M, 2006, LECT NOTES COMPUT SC, V4199, P57
   Vogel R., 2005, WORKSH COD CENTR MOD
NR 34
TC 23
Z9 24
U1 0
U2 5
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 1
PY 2014
VL 89
SI SI
BP 176
EP 198
DI 10.1016/j.scico.2013.04.007
PN B
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AJ8CA
UT WOS:000337929100008
OA Green Submitted, Green Accepted, Bronze
DA 2024-07-18
ER

PT J
AU Ramli, CDPK
   Nielson, HR
   Nielson, F
AF Ramli, Carroline Dewi Puspa Kencana
   Nielson, Hanne Riis
   Nielson, Flemming
TI The logic of XACML
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Access control; Control systems; XACML 3.0; Composition policies
ID ACCESS-CONTROL
AB We study the international standard XACML 3.0 for describing security access control policies in a compositional way. Our main contributions are (i) to derive a logic that precisely captures the intentions of the standard, (ii) to formally define a semantics for the XACML 3.0 component evaluation, and (iii) to define a semantics for the XACML 3.0 standard combining operators. To guard against modeling artefacts we provide an alternative lattice based way of characterizing the policy combining operators and we formally prove the equivalence of these approaches thereby increasing our faith in either one. We then discuss several ways of extending XACML: one direction is to extend XACML with new combining operators, and another direction is to incorporate the notion of conflict into XACML. We conclude by discussing the possibility of analysing XACML policies for gaps and conflicts. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Ramli, Carroline Dewi Puspa Kencana; Nielson, Hanne Riis; Nielson, Flemming] Danmarks Tekn Univ, Dept Appl Math & Comp Sci, Lyngby, Denmark.
C3 Technical University of Denmark
RP Ramli, CDPK (corresponding author), Danmarks Tekn Univ, Dept Appl Math & Comp Sci, Lyngby, Denmark.
EM cdpu@imm.dtu.dk; hrni@dtu.dk; fnie@dtu.dk
OI Nielson, Flemming/0000-0001-7362-6176; Nielson, Hanne
   Riis/0000-0002-2484-5580
FU MT-LAB; VKR Centre of Excellence for the Modelling of Information
   Technology
FX The author was partially supported by MT-LAB, a VKR Centre of Excellence
   for the Modelling of Information Technology.
CR Ahn G.-J., 2010, 13 INT WORKSH NONM R
   [Anonymous], 2005, SWS
   [Anonymous], 2000, P INT SCH FDN SEC AN
   [Anonymous], 2007, P 16 INT C WORLD WID
   Belnap N., 1977, MODERN USES MULTIPLE, P8, DOI [10.1007/978-94-010-1161-7_2, DOI 10.1007/978-94-010-1161-7_2]
   Biere A, 2009, FRONT ARTIF INTEL AP, V185, P457, DOI 10.3233/978-1-58603-929-5-457
   Bruns G, 2008, 21 IEEE COMP SEC FDN
   Bruns G, 2007, FMSE'07: PROCEEDINGS OF THE 2007 ACM WORKSHOP ON FORMAL METHODS IN SECURITY ENGINEERING, P12
   Bryans JW, 2007, LECT NOTES COMPUT SC, V4789, P37
   Chakraborty S., 2006, SACMAT 2006. Proceedings of Eleventh ACM Symposium on Access Control Models and Technologies, P49
   Crampton J, 2012, LECT NOTES COMPUT SC, V7215, P390, DOI 10.1007/978-3-642-28641-4_21
   Dougherty DJ, 2006, LECT NOTES ARTIF INT, V4130, P632
   Freudenthal E, 2002, INT CON DISTR COMP S, P411, DOI 10.1109/ICDCS.2002.1022279
   Halpern JY, 2008, ACM T INFORM SYST SE, V11, DOI 10.1145/1380564.1380569
   Hankin C, 2009, PROCEEDINGS OF THE 22ND IEEE COMPUTER SECURITY FOUNDATIONS SYMPOSIUM, P234, DOI 10.1109/CSF.2009.8
   Hayton RJ, 1998, 1998 IEEE SYMPOSIUM ON SECURITY AND PRIVACY - PROCEEDINGS, P3, DOI 10.1109/SECPRI.1998.674819
   Jackson D, 2002, ACM T SOFTW ENG METH, V11, P256, DOI 10.1145/505145.505149
   Koleini M, 2011, LECT NOTES COMPUT SC, V6991, P243, DOI 10.1007/978-3-642-24559-6_18
   Kolovski V., 2007, P 15 INT WORLD WID W
   Masi M, 2012, LECT NOTES COMPUT SC, V7159, P60, DOI 10.1007/978-3-642-28166-2_7
   Moses T., 2010, EXTENSIBLE ACCESS CO
   Ni Qun., 2009, P 4 INT S INFORM COM, P298, DOI [10.1145/1533057.1533097, DOI 10.1145/1533057.1533097]
   Rissanen E., 2013, extensible access control markup language (xacml) version 3.0
NR 23
TC 18
Z9 22
U1 0
U2 7
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD APR 1
PY 2014
VL 83
SI SI
BP 80
EP 105
DI 10.1016/j.scico.2013.05.003
PG 26
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AE4IK
UT WOS:000333945900005
OA hybrid
DA 2024-07-18
ER

PT J
AU Macedo, HD
   Oliveira, JN
AF Macedo, Hugo Daniel
   Oliveira, Jose Nuno
TI Typing linear algebra: A biproduct-oriented approach
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 10th International Conference on Mathematics of Program Construction
CY JUN, 2010
CL Quebec City, CANADA
SP Ctr Rech Math, Univ Laval
DE Linear algebra; Categories of matrices; Algebra of programming
ID GENERATION; MATRICES
AB Interested in formalizing the generation of fast running code for linear algebra applications, the authors show how an index-free, calculational approach to matrix algebra can be developed by regarding matrices as morphisms of a category with biproducts. This shifts the traditional view of matrices as indexed structures to a type-level perspective analogous to that of the pointfree algebra of programming. The derivation of fusion, cancellation and abide laws from the biproduct equations makes it easy to calculate algorithms implementing matrix multiplication, the central operation of matrix algebra, ranging from its divide-and-conquer version to its vectorization implementation.
   From errant attempts to learn how particular products and coproducts emerge from biproducts, not only blocked matrix algebra is rediscovered but also a way of extending other operations (e.g. Gaussian elimination) blockwise, in a calculational style, is found.
   The prospect of building biproduct-based type checkers for computer algebra systems such as MATLAB (TM) is also considered. (C) 2012 Elsevier B.V. All rights reserved.
C1 [Macedo, Hugo Daniel; Oliveira, Jose Nuno] Univ Minho, HASLAB High Assurance Software Lab, Braga, Portugal.
C3 Universidade do Minho
RP Macedo, HD (corresponding author), Univ Minho, HASLAB High Assurance Software Lab, Braga, Portugal.
EM hugodsmacedo@gmail.com; jno@di.uminho.pt
RI Macedo, Hugo D/H-2646-2016; Oliveira, Jose Nuno/D-3490-2013
OI Oliveira, Jose/0000-0002-0196-4229
CR Abadir K. M., 2005, ECONOMETRIC EXERCISE, V1
   Allenby R.B.J.T., 1995, LINEAR ALGEBRA
   Altenkirch T, 2010, LECT NOTES COMPUT SC, V6014, P297, DOI 10.1007/978-3-642-12032-9_21
   [Anonymous], 2010, lambek festschrift. Linguistic Analysis
   [Anonymous], 2010, RELATIONAL MATH
   Backhouse R., 2004, MATH PROGRA IN PRESS
   Baroni Marco, 2010, P 2010 C EMP METH NA, P1183
   Bird R., 1988, CONSTRUCTIVE METHODS, V55, P151
   BIRD R, 1997, SERIES COMPUTER SCI
   Bloom SL, 1996, APPL CATEGOR STRUCT, V4, P343, DOI 10.1007/BF00122683
   Bove A, 2009, LECT NOTES COMPUT SC, V5520, P57, DOI 10.1007/978-3-642-03153-3_2
   Conway J.H., 1971, Regular Algebra and Finite Machines
   D'Alberto Paolo., 2007, ICS '07, P284
   de Geijn R.A.V., 2008, SCI PROGRAMMING MATR
   Dosen K, 2003, J PURE APPL ALGEBRA, V184, P7, DOI 10.1016/S0022-4049(03)00084-7
   Dosen K., 2011, PREPRINT
   Eddington A., 1936, RELATIVITY THEORY EL
   Franchetti F, 2009, LECT NOTES COMPUT SC, V5658, P385, DOI 10.1007/978-3-642-03034-5_18
   FREYD PJ, 1990, MATH LIB, V39
   Frias MF, 2002, LOGIC COMPUTER SCI
   Goto K, 2008, ACM T MATH SOFTWARE, V34, DOI 10.1145/1356052.1356053
   JEURING J, 1991, CONSTRUCTING PROGRAM, P9
   JOHNSON JR, 1990, CIRC SYST SIGNAL PR, V9, P449, DOI 10.1007/BF01189337
   JONES SP, 2003, HASKELL 98 LANGUAGE, DOI DOI 10.2277/0521826144
   JOYAL A, 1991, ADV MATH, V88, P55, DOI 10.1016/0001-8708(91)90003-P
   Joyal A, 1996, MATH PROC CAMBRIDGE, V119, P447, DOI 10.1017/S0305004100074338
   KOZEN DC, 1997, UNDERGRADUATE TEXTS
   Lewis JR, 2003, IEEE MILIT COMMUN C, P820
   Liu S., 2008, Int. J. Inf. Syst. Sci., V4, P160
   Mac Lane S., 1999, Algebra, V3rd
   Mac Lane S, 1998, GRAD TEXT M, V5
   Macedo H., 2012, J PAPER UNPUB
   Macedo H., 2012, THESIS U MINHO
   Macedo HD, 2010, LECT NOTES COMPUT SC, V6120, P271, DOI 10.1007/978-3-642-13321-3_16
   Mad91 R.D., 1991, Studia Logica, V50, P421
   MAGNUS JR, 1979, ANN STAT, V7, P381, DOI 10.1214/aos/1176344621
   Oliveira JN, 2008, LECT NOTES COMPUT SC, V5235, P134, DOI 10.1007/978-3-540-88643-3_4
   Padua D., 2011, ENCY PARALLEL COMPUT
   Parnas DL, 2010, COMPUTER, V43, P28, DOI 10.1109/MC.2010.22
   Püschel M, 2005, P IEEE, V93, P232, DOI 10.1109/JPROC.2004.840306
   ROTH W. E., 1934, B AM MATH SOC, V40, P461, DOI [DOI 10.1090/S0002-9904-1934-05899-3, 10.1090/S0002-9904-1934-05899-3]
   Sernadas A., 2008, 1049001 SQIGIT TU LI
   Silva A, 2011, INFORM COMPUT, V209, P822, DOI 10.1016/j.ic.2010.09.007
   Tarski A., 1987, AMS COL PUB, V41
   Trcka N, 2009, ELECTRON PROC THEOR, P55, DOI 10.4204/EPTCS.13.5
   VORONENKO Y, 2008, THESIS CARNEGIE MELL
   Winter M., 2000, TAC THEORY APPL CATE, V7, P23
   Wolfram Stephen., 1988, Mathematica: A system for Doing Mathematics by Computer, V2nd
NR 48
TC 43
Z9 45
U1 0
U2 6
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 1
PY 2013
VL 78
IS 11
BP 2160
EP 2191
DI 10.1016/j.scico.2012.07.012
PG 32
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 220QR
UT WOS:000324602500007
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Hadar, I
AF Hadar, Irit
TI When intuition and logic clash: The case of the object-oriented paradigm
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Object-oriented analysis and design; Cognitive processes; Intuition;
   Qualitative research
ID COGNITIVE CONSEQUENCES; RATIONALITY; DESIGN
AB This paper presents difficulties illustrated by software development practitioners with regard to the use and understanding of concepts and principles of the object-oriented paradigm. In order to understand these difficulties and the sources from which they stem, a theoretical framework borrowed from cognitive psychology, called the dual-process theory, was used. The empirical findings, collected using tools based on the qualitative research approach and analyzed through the lens of the dual-process theory, suggest that a tension between intuitive and logical thinking modes may lead to simple mistakes software engineers exhibit when practicing object-oriented analysis and design (OOA/D). Examining the understanding of OOA/D from this perspective helps explain some of the previously documented, as well as some newly identified difficulties in learning and practicing OOA/D, as well as guide the design of future quantitative experiments to understand how prevalent these phenomena are. (C) 2012 Elsevier B.V. All rights reserved.
C1 Univ Haifa, Dept Informat Syst, IL-31905 Haifa, Israel.
C3 University of Haifa
RP Hadar, I (corresponding author), Univ Haifa, Dept Informat Syst, IL-31905 Haifa, Israel.
EM hadari@is.haifa.ac.il
CR Abraham C., 2011, EUROPEAN J INFORM SY, DOI DOI 10.1057/EJIS.2011.25.ADVANCE
   Aharoni D., 1997, P 21 C INT GROUP PSY
   [Anonymous], COGNITION AGENCY RAT
   [Anonymous], 1981, Cognitive Skills and their Acquisition
   [Anonymous], COMMUNICATION
   [Anonymous], 2002, NOBEL PRIZES PRESENT
   Armstrong DJ, 2008, INF RESOUR MANAG J, V21, P63, DOI 10.4018/irmj.2008040104
   Armstrong DJ, 2007, MIS QUART, V31, P453
   Armstrong DJ, 2006, COMMUN ACM, V49, P123, DOI 10.1145/1113034.1113040
   Baragry J., 2001, DO WE THINK TERMS OB
   Barbey AK, 2007, BEHAV BRAIN SCI, V30, P241, DOI 10.1017/S0140525X07001653
   BASSEY M, 1999, CASE STUDY RES ED SE, P65
   Berge O., 2003, NORSK INF NORW INF C
   Bieman JM, 1998, IEEE T SOFTWARE ENG, V24, P111, DOI 10.1109/32.666825
   Blum B., 1989, P AIAA C, P502
   Bogdan R., 1992, Qualitative research in education: An introduction to theory and methods
   Booch G., 2007, Object-Oriented Analysis and Design with Applications, Vthird
   Booch Grady, 1982, ACM SIGAda Ada Letters, V1, P64
   BROOKS R, 1977, INT J MAN MACH STUD, V9, P737, DOI 10.1016/S0020-7373(77)80039-4
   Burton-Jones A., 1999, P P 20 INT C INFORM, P214
   Cartwright M, 2000, IEEE T SOFTWARE ENG, V26, P786, DOI 10.1109/32.879814
   Carwright M., 1988, INFORM SOFTWARE TECH, V40, P795
   Corbin J., 2015, BASICS QUALITATIVE R
   Cosmides L, 1966, ARE HUMANS GOOD INTU, V58, P1
   Daly J, 1996, EMPIRICAL STUDIES OF PROGRAMMERS: SIXTH WORKSHOP, P39
   Detienne F, 1997, INTERACT COMPUT, V9, P47, DOI 10.1016/S0953-5438(97)00006-4
   Evermann J, 2005, REQUIR ENG, V10, P146, DOI 10.1007/s00766-004-0208-2
   Fleury AE, 2001, SIGCSE BULL, V33, P189, DOI 10.1145/366413.364582
   Gigerenzer G, 1999, Simple Heuristics that Make us Smart, P3
   Gilovich T, 2002, Heuristics and biases: The psychology of intuitive judgment, DOI DOI 10.1017/CBO9780511808098
   Glaser B. G., 1967, DISCOV GROUNDED THEO
   Guindon R., 1987, Human-Computer Interaction - INTERACT '87. Proceedings of the Second IFIP Conference, P383
   Hadar I, 2008, COMMUN ACM, V51, P41, DOI 10.1145/1342327.1342336
   Hatton L, 1998, IEEE SOFTWARE, V15, P46, DOI 10.1109/52.676735
   Hazzan O, 2002, J SYST SOFTWARE, V63, P161, DOI 10.1016/S0164-1212(02)00012-2
   KANT E, 1984, INFORM PROCESS MANAG, V20, P97, DOI 10.1016/0306-4573(84)90042-6
   Khatri V, 2006, INFORM SYST RES, V17, P81, DOI 10.1287/isre.1060.0081
   Kramer J, 2007, COMMUN ACM, V50, P37
   Ledgard HF, 2001, COMMUN ACM, V44, P126, DOI 10.1145/383845.383873
   LEININGER M, 1994, CRITICAL ISSUES IN QUALITATIVE RESEARCH METHODS, P95
   Leron U., 2003, ORIGINS MATH THINKIN, V3
   Leron U., 2004, P 28 C INT GROUP PSY, P217
   Leron U., 2006, Educational Studies in Mathematics, V62, P105
   Leron U., 1997, EDUC STUD MATH, V32, P265, DOI DOI 10.1023/A:1002908608251
   MALHOTRA A, 1980, INT J MAN MACH STUD, V12, P119, DOI 10.1016/S0020-7373(80)80013-7
   Meyer B., 1988, Object-Oriented Software Construction
   Nelson HJ, 2009, J MANAGE INFORM SYST, V25, P271, DOI 10.2753/MIS0742-1222250409
   Or-Bach R., 2004, SIGCSE Bulletin, V36, P82, DOI 10.1145/1024338.1024378
   Petre M, 1999, INT J HUM-COMPUT ST, V51, P7, DOI 10.1006/ijhc.1999.0267
   Rosch E., 1978, Cognition and categorization, P24
   Rosemann M., 2007, P 13 AM C INF SYST A
   Rosson M. B., 1990, Human-Computer Interaction, V5, P345, DOI 10.1207/s15327051hci0504_1
   Rosson M. B., 1990, SIGCHI Bulletin, V21, P76, DOI 10.1145/379088.379101
   Sheetz SD, 2001, J SYST SOFTWARE, V59, P163, DOI 10.1016/S0164-1212(01)00060-7
   SHNEIDERMAN B, 1979, INT J COMPUT INF SCI, V8, P219, DOI 10.1007/BF00977789
   SIME ME, 1973, INT J MAN MACH STUD, V5, P105, DOI 10.1016/S0020-7373(73)80011-2
   Stanovich KE, 2000, BEHAV BRAIN SCI, V23, P645, DOI 10.1017/S0140525X00003435
   Strauss A., 1994, HDB QUALITATIVE RES, P273, DOI DOI 10.1007/BF00988593
   Strauss A.L., 1990, BASICS QUALITATIVE R
   Strauss E, 1998, CLIN ORTHOP RELAT R, P2
   Suddaby R, 2006, ACAD MANAGE J, V49, P633, DOI 10.5465/AMJ.2006.22083020
   Svetinovic D, 2005, 13th IEEE International Conference on Requirements Engineering, Proceedings, P189, DOI 10.1109/RE.2005.17
   Svetinovic D., 2006, P 2006 INT WORKSH RO, P19
   Tegarden DP, 2001, INT J HUM-COMPUT ST, V54, P779, DOI 10.1006/ijhc.1999.0462
   TVERSKY A, 1983, PSYCHOL REV, V90, P293, DOI 10.1037/0033-295X.90.4.293
   Tversky A., 1982, Judgment under uncertainty: Heuristics and biases, P84, DOI DOI 10.21236/ADA099502
   VESSEY I, 1994, COMMUN ACM, V37, P102, DOI 10.1145/175290.175305
   vonMayrhauser A, 1996, IEEE T SOFTWARE ENG, V22, P424, DOI 10.1109/32.508315
   Wason P., 1996, NEW HORIZONS PSYCHOL
   White G., 2005, Information Technology & Management, V6, P333, DOI 10.1007/s10799-005-3899-2
   Wilensky U., 1991, MED CONCR CONCR IMPL, P101
   Wiley J, 1998, MEM COGNITION, V26, P716, DOI 10.3758/BF03211392
   YOUNGS EA, 1974, INT J MAN MACH STUD, V6, P361, DOI 10.1016/S0020-7373(74)80027-1
NR 73
TC 24
Z9 27
U1 0
U2 13
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 1
PY 2013
VL 78
IS 9
BP 1407
EP 1426
DI 10.1016/j.scico.2012.10.006
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 179QJ
UT WOS:000321536100011
OA Bronze
DA 2024-07-18
ER

PT J
AU Hesselink, WH
AF Hesselink, Wim H.
TI Mechanical verification of Lamport's Bakery algorithm
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Mutual exclusion; Shared variables; Safe variables; FCFS; Mechanical
   theorem proving
AB Proof assistants like PVS can be used fruitfully for the design and verification of concurrent algorithms. The technique is presented here by applying it to Lamport's Bakery algorithm. The proofs for safety properties such as mutual exclusion, first-come first-served, and absence of deadlock are based on invariants. The argument for liveness (progress) is given in a set-theoretic version of temporal logic. Liveness requires the assumption of weak fairness and holds only for executions with not more than finitely many fault steps per process. The condition of finitely many faults can be removed by postulating strong fairness. The algorithm and its verification are extended to allow unboundedly many processes, by means of expandable arrays and weak atomic snapshots. (C) 2013 Elsevier B.V. All rights reserved.
C1 Univ Groningen, Dept Comp Sci, NL-9700 AK Groningen, Netherlands.
C3 University of Groningen
RP Hesselink, WH (corresponding author), Univ Groningen, Dept Comp Sci, POB 407, NL-9700 AK Groningen, Netherlands.
EM w.h.hesselink@rug.nl
OI Hesselink, Wim/0000-0002-1413-4320
CR ABADI M, 1991, THEOR COMPUT SCI, V82, P253, DOI 10.1016/0304-3975(91)90224-P
   Abdulla P.A., 2008, LOSSY ABSTRACTION WO
   Abdulla PA, 2007, LECT NOTES COMPUT SC, V4590, P145
   Abraham U., 1993, P CONC SPEC PROGR WO, P7
   ANDERSON JH, 1988, INFORM PROCESS LETT, V28, P99, DOI 10.1016/0020-0190(88)90171-8
   Anderson JH, 2003, DISTRIB COMPUT, V16, P75, DOI 10.1007/s00446-003-0088-6
   Apt K.R., 2009, Texts in Computer Science, DOI 10.1007/978-1-84882-745-5
   Arons T., 2001, COMPUTER AIDED VERIF, V2102
   Chandy K.M., 1988, PARALLEL PROGRAM DES
   Chaudhuri K, 2010, LECT NOTES ARTIF INT, V6173, P142
   Clarke E, 2006, LECT NOTES COMPUT SC, V3855, P126
   Dijkstra E. W., 1968, Programming languages, P43
   DIJKSTRA EW, 1975, COMMUN ACM, V18, P453, DOI [10.1145/360933.360975, 10.1145/390016.808417]
   DIJKSTRA EW, 1965, COMMUN ACM, V8, P569, DOI 10.1145/365559.365617
   Harder M., 2006, THESIS CHRISTIAN ALB
   Hesselink W.H., 2010, PVS PROOF SCRIPT LAM
   Hesselink WH, 2008, INFORM COMPUT, V206, P108, DOI 10.1016/j.ic.2007.10.003
   Inoue T., 2006, ELECTR COMMUN JPN, V89, P498
   ISRAELI A, 1993, DISTRIB COMPUT, V6, P205, DOI 10.1007/BF02242708
   Jayanti P., 2001, SOFSEM 2001 THEORY P, P261, DOI DOI 10.1007/3-540-45627-9_23
   LAMPORT L, 1994, ACM T PROGR LANG SYS, V16, P872, DOI 10.1145/177492.177726
   LAMPORT L, 1986, DISTRIB COMPUT, V1, P77, DOI 10.1007/BF01786227
   LAMPORT L, 1974, COMMUN ACM, V17, P453, DOI 10.1145/361082.361093
   OWICKI S, 1976, ACTA INFORM, V6, P319, DOI 10.1007/BF00268134
   Owre S., 2001, PVS VERSION 2 4 SYST
   PNUELI A, 2004, LNCS, V2772, P598
   Raynal M., 1986, ALGORITHMS MUTUAL EX
   Shalev O, 2006, J ACM, V53, P379, DOI 10.1145/1147954.1147958
   Shiue WT, 2004, DES AUTOM EMBED SYST, V9, P235, DOI 10.1007/s10617-005-1195-3
   Tai-Kuo Woo, 1990, Operating Systems Review, V24, P78, DOI 10.1145/94574.94581
   Takamura M., 2002, Computing and Combinatorics. 8th Annual International Conference, COCOON 2002. Proceedings (Lecture Notes in Computer Science Vol.2387), P259
   Taubenfeld G, 2004, LECT NOTES COMPUT SC, V3274, P56
   Taubenfeld Gadi, 2006, SYNCHRONIZATION ALGO
   VIJAYARAGHAVAN S, 2003, P DES AN SIM DISTR S
   Wang Z, 2008, 2008 INTERNATIONAL SYMPOSIUM ON INTELLIGENT INFORMATION TECHNOLOGY APPLICATION WORKSHOP: IITA 2008 WORKSHOPS, PROCEEDINGS, P251, DOI 10.1109/IITA.Workshops.2008.231
NR 35
TC 10
Z9 10
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 1
PY 2013
VL 78
IS 9
BP 1622
EP 1638
DI 10.1016/j.scico.2013.03.003
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 179QJ
UT WOS:000321536100021
DA 2024-07-18
ER

PT J
AU Sinkovics, A
   Porkoláb, Z
AF Sinkovics, Abel
   Porkolab, Zoltan
TI Implementing monads for C plus plus template metaprograms
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE C plus plus template metaprogram; Monad; Exception handling; Monoid;
   Typeclass
AB C++ template metaprogramming is used in various application areas, such as expression templates, static interface checking, active libraries, etc. Its recognized similarities to pure functional programming languages - like Haskell - make the adoption of advanced functional techniques possible. Such a technique is using monads, programming structures representing computations. Using them actions implementing domain logic can be chained together and decorated with custom code. C++ template metaprogramming could benefit from adopting monads in situations like advanced error propagation and parser construction. In this paper we present an approach for implementing monads in C++ template metaprograms. Based on this approach we have built a monadic framework for C++ template metaprogramming. As real world examples we present a generic error propagation solution for C++ template metaprograms and a technique for building compile-time parser generators. All solutions presented in this paper are implemented and available as an open source library. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Sinkovics, Abel; Porkolab, Zoltan] Eotvos Lorand Univ, Dept Programming Languages & Compilers, Fac Informat, H-1117 Budapest, Hungary.
C3 Eotvos Lorand University
RP Porkoláb, Z (corresponding author), Eotvos Lorand Univ, Dept Programming Languages & Compilers, Fac Informat, Pazmany Peter Satiny 1-C, H-1117 Budapest, Hungary.
EM abel@elte.hu; gsd@elte.hu
RI Porkolab, Zoltan/H-8233-2017
OI Porkolab, Zoltan/0000-0001-6819-0224
CR Abrahams D., 2004, CONCEPTS TOOLS TECHN
   Anderson Lennart, 2001, PARSING HASKELL
   [Anonymous], 2000, The C++ Programming Language
   [Anonymous], 2000, Generative programming: methods, tools, and applications
   Bernardy JP, 2010, J FUNCT PROGRAM, V20, P271, DOI 10.1017/S095679681000016X
   GAMMA E, 1995, DESIGN PATTERNS
   Gil Y., 2007, GEN PROGR COMP ENG 6
   Golodetz Stuart, 2007, FUNCTIONAL PROGRAM 1
   Golodetz Stuart, 2007, FUNCTIONAL PROGRAM 2
   Gurtovoy Aleksey, BOOST METAPROGRAMMIN
   HOPCROFT JE, 1969, INTRO AUTOMATA THEOR
   Hutton G., 1998, Journal of Functional Programming, V8, P437, DOI 10.1017/S0956796898003050
   Hutton Graham, 1996, Monadic Parser Combinators
   Karvonen Vesa, BOOST PREPROCESSOR L
   Lopez Munoz Joaquin M, MONADS C TEMPLATE ME
   McNamara B, 2000, ACM SIGPLAN NOTICES, V35, P118, DOI 10.1145/357766.351251
   McNamara B., 2000, 1 WORKSH C TEMP MET
   Milewski Bartosz, MONADS CURIOUS PROGR
   Milewski Bartosz, MONADS C
   Milewski Bartosz, HASKELL C TEMPLATE M
   MYERS N, 1996, C GEMS, P451
   Niebler Eric, BOOST XPRESSIVE REGU
   O'Sullivan B., 2008, Real world haskell
   Popa Dan, 2007, STUD CERCET SER MA S, V17, P173
   Porkolab Zoltan, 2010, GEN PROGR COMP ENG P
   Ramsey N, 1999, COMPUT J, V42, P360, DOI 10.1093/comjnl/42.5.360
   Sheard T, 1999, USENIX ASSOCIATION PROCEEDINGS OF THE 2ND CONFERENCE ON DOMAIN-SPECIFIC LANGUAGES (DSL'99), P81
   Siek J., 2000, 1 WORKSH C TEMPL MET
   Sinkovics A, 2011, ELECTRON NOTES THEOR, V264, P85, DOI 10.1016/j.entcs.2011.06.006
   Sinkovics A, 2011, ELECTRON NOTES THEOR, V279, P27, DOI 10.1016/j.entcs.2011.11.036
   Sinkovics Abel, SOURCE CODE MPLLIBS
   Sinkovics Abel, 2011, P 3 WORKSH GEN TECHN, P63
   Sinkovics Abel, 2010, P 2 WORKSH GEN TECHN, P56
   Sipos A., 2007, P 19 INT S IMPL APPL, P489
   SPIVEY M, 1990, SCI COMPUT PROGRAM, V14, P25, DOI 10.1016/0167-6423(90)90056-J
   Unruh E., X3J16940075ISOWG2146, pWG21
   VANDEVOORDE D, 2003, C TEMPLATES COMPLETE
   Veldhuizen T., 1995, C++ Report, V7, P26
   Veldhuizen T., 1995, C++ Report, V7, P36
   Veldhuizen T.L., 1998, P SIAM WORKSH OBJ OR, P21
NR 40
TC 2
Z9 2
U1 0
U2 7
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 1
PY 2013
VL 78
IS 9
BP 1600
EP 1621
DI 10.1016/j.scico.2013.01.002
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 179QJ
UT WOS:000321536100020
OA hybrid
DA 2024-07-18
ER

PT J
AU Rodrigues, ER
   Navaux, POA
   Panetta, J
   Mendes, CL
AF Rodrigues, Eduardo R.
   Navaux, Philippe O. A.
   Panetta, Jairo
   Mendes, Celso L.
TI Preserving the original MPI semantics in a virtualized processor
   environment
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Processor virtualization; MPI; User-level threads; Privatization; TLS
AB Processor virtualization is a technique in which a programmer divides a computation into many entities, which are mapped to the available processors. The number of these entities, referred to as virtual processors, is typically larger than the number of physical processors. For an MPI program, the user decomposes the computation into more MPI tasks than physical processors. This approach allows overlapping computation and communication, and enables load balancing. User-level threads are often used to implement these virtual processors because they are generally faster to create, manage and migrate than heavy processes or kernel threads. However, these threads present issues concerning private data because they break the private address space assumption typically made by MPI programs. In this paper, we propose a new approach to privatize data in user-level threads. This approach is based on thread-local storage (TLS), which is often used by kernel threads. We apply this technique so that MPI programs can be executed in a virtualized environment while preserving their original semantics. We show that this alternative has a more efficient context switch and lower migration cost and is simpler to implement than other approaches. (C) 2012 Elsevier B.V. All rights reserved.
C1 [Navaux, Philippe O. A.] Univ Fed Rio Grande do Sul, Inst Informat, Porto Alegre, RS, Brazil.
C3 Universidade Federal do Rio Grande do Sul
EM edrodri@br.ibm.com
RI Panetta, Jairo/E-9849-2015
OI Panetta, Jairo/0000-0002-7798-3979; Mendes, Celso/0000-0001-7170-5217
CR [Anonymous], 1996, Pthreads Programming a POSIX Standard for Better Multiprocessing
   Bonorden O., 2007, IEEE INT PAR DISTR P
   Carribault P, 2011, LECT NOTES COMPUT SC, V6665, P80, DOI 10.1007/978-3-642-21487-5_7
   Chao Huang, 2006, Proceedings of the 2006 ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming PPoPP'06, P12, DOI 10.1145/1122971.1122976
   Culler D., 1997, PARALLEL COMPUTER AR
   Dooley I, 2006, THESIS U ILLINOIS
   Drepper U., 2003, ELF HANDLING THREAD
   Forum, 1994, MESSAGE PASSING INTE
   FOSTER IT, 1994, PROCEEDINGS OF THE SCALABLE HIGH-PERFORMANCE COMPUTING CONFERENCE, P674, DOI 10.1109/SHPCC.1994.296706
   Ghan S, 2005, INT J HIGH PERFORM C, V19, P237, DOI 10.1177/1094342005056112
   Huang C, 2004, LECT NOTES COMPUT SC, V2958, P306, DOI 10.1007/978-3-540-24644-2_20
   Itzkovitz A, 1998, J SYST SOFTWARE, V42, P71, DOI 10.1016/S0164-1212(98)00008-9
   Jiang Hai., 2002, P 16 ACMIEEE INT PAR, P58
   Levine, 1999, Linkers and Loaders, V4, P149
   Loh E, 2010, COMMUN ACM, V53, P42, DOI 10.1145/1785414.1785433
   Martorell X., 2006, Proceedings. 20th International Parallel and Distributed Processing Symposium (IEEE Cat. No.06TH8860)
   Milojicic DS, 2000, ACM COMPUT SURV, V32, P241, DOI 10.1145/367701.367728
   Mukherjee J., 2002, THESIS VIRGINIA POLY
   Muszala SP, 2006, J ATMOS OCEAN TECH, V23, P525, DOI 10.1175/JTECH1865.1
   Oliva A., 2006, GCC DEV SUMM 2006, P159
   OTTO SW, 1994, SIAM PROC S, P66
   Pielke RogerA., 2002, MESOSCALE METEOROLOG
   Radi B, 1998, PARALLEL COMPUT, V24, P1167, DOI 10.1016/S0167-8191(98)00051-9
   Rodrigues E. R., 2010, P INT C HIGH PERFORM
   Song J., 2010, 2010 12 IEEE INT C H, P98
   Zhang H., 2008, SOFTWARE PRACTICE EX, V38
   ZHENG G, 2005, THESIS U ILLINOIS UR
NR 27
TC 0
Z9 0
U1 1
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD APR 1
PY 2013
VL 78
IS 4
BP 412
EP 421
DI 10.1016/j.scico.2012.07.005
PG 10
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 104GA
UT WOS:000315978700006
DA 2024-07-18
ER

PT J
AU Palikareva, H
   Ouaknine, J
   Roscoe, AW
AF Palikareva, Hristina
   Ouaknine, Joel
   Roscoe, A. W.
TI SAT-solving in CSP trace refinement
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE CSP; FDR; Concurrency; Process algebra; SAT-solving; Bounded model
   checking; k-induction; Safety properties
ID SYMBOLIC MODEL CHECKING
AB In this paper, we address the problem of applying SAT-based bounded model checking (BMC) and temporal k-induction to asynchronous concurrent systems. We investigate refinement checking in the process-algebraic setting of Communicating Sequential Processes (CSP), focusing on the CSP traces model which is sufficient for verifying safety properties. We adapt the BMC framework to the context of CSP and the existing refinement checker FDR yielding bounded refinement checking which also lays the foundation for tailoring the k-induction technique. As refinement checking reduces to checking for reverse containment of possible behaviours, we exploit the SAT-solver to decide bounded language inclusion as opposed to bounded reachability of error states, as in most existing model checkers. Due to the harder problem to decide and the presence of invisible silent actions in process algebras, the original syntactic translation of BMC to SAT cannot be applied directly and we adopt a semantic translation algorithm based on watchdog transformations. We propose a Boolean encoding of CSP processes resting on FDR's hybrid two-level approach for calculating the operational semantics using supercombinators. We have implemented a prototype tool, SymFDR, written in C++, which uses FDR as a shared library for manipulating CSP processes and the state-of-the-art incremental SAT-solver MiniSAT 2.0. Experiments with BMC indicate that in some cases, especially in complex combinatorial problems, SymFDR significantly outperforms FDR and even copes with problems that are beyond FDR's capabilities. SymFDR in k-induction mode works reasonably well for small test cases, but is inefficient for larger ones as the threshold becomes too large, due to concurrency. (c) 2011 Elsevier B.V. All rights reserved.
C1 [Palikareva, Hristina; Ouaknine, Joel; Roscoe, A. W.] Univ Oxford, Dept Comp Sci, Oxford OX1 2JD, England.
C3 University of Oxford
RP Palikareva, H (corresponding author), Univ Oxford, Dept Comp Sci, Oxford OX1 2JD, England.
EM hristina.palikareva@cs.ox.ac.uk
OI Ouaknine, Joel/0000-0003-0031-9356
FU EPSRC; US ONR; EPSRC [EP/E035590/1, EP/H005617/1] Funding Source: UKRI
FX We are grateful to the anonymous reviewers for their thorough and truly
   helpful feedback, to Daniel Kroening and James Worrell for their early
   comments, Philip Armstrong for his help with FDR and Vijay D'Silva,
   Alastair Donaldson and Phillip Rummer for interesting discussions on
   k-induction. The analysis using DFS refinement through divergence
   checking was inspired by a correspondence several years ago between A.
   W. Roscoe and James Heather. The work presented in this paper is
   supported by grants from EPSRC and US ONR.
CR [Anonymous], 2002, LNCS
   [Anonymous], 2008, J. Satisf. Boolean Model. Comput., DOI 10.3233/sat190039
   [Anonymous], CLASSICAL MIND ESSAY
   [Anonymous], ELECT NOTES THEORETI
   Baier C, 2008, PRINCIPLES OF MODEL CHECKING, P1
   Biere A, 1999, LECT NOTES COMPUT SC, V1579, P193
   Biere A, 2009, FRONT ARTIF INTEL AP, V185, P457, DOI 10.3233/978-1-58603-929-5-457
   Biere Armin, 2008, DIGITALTECHNIK
   BURCH JR, 1992, INFORM COMPUT, V98, P142, DOI 10.1016/0890-5401(92)90017-A
   Chaki S, 2005, FORM ASP COMPUT, V17, P461, DOI 10.1007/s00165-005-0071-z
   Clarke E., 2005, International Journal on Software Tools for Technology Transfer, V7, P174, DOI 10.1007/s10009-004-0182-5
   Clarke Edmund, 2000, SPRINGER LNCS
   Clarke Edmund M., 2004, VMCAI
   Clarke EM, 1999, MODEL CHECKING, P1
   Eén N, 2005, LECT NOTES COMPUT SC, V3569, P61, DOI 10.1007/11499107_5
   Eén N, 2004, LECT NOTES COMPUT SC, V2919, P502, DOI 10.1007/978-3-540-24605-3_37
   Een N., 2003, ELECT NOTES THEORETI, V89
   FSEL, 2005, FAIL DIV REF FDR2 US
   Goldsmith Michael, 2004, 25 YEARS COMMUNICATI, P265
   Hoare CAR., 1985, Communicating Sequential Processes
   Jackson Daniel, 2006, Software abstractions: Logic, language, and analysis
   Katz Randy H., 2005, CONT LOGIC DESIGN
   Lowe G., 1998, Journal of Computer Security, V6, P53
   Lowe G., 1996, Tools and Algorithms for the Construction and Analysis of Systems. Second International Workshop, TACAS '96. Proceedings, P147
   LOWE G, 1995, INFORM PROCESS LETT, V56, P131, DOI 10.1016/0020-0190(95)00144-2
   McMillan KL, 2003, LECT NOTES COMPUT SC, V2725, P1
   Parashkevov A., 1996, AAPP
   Peled D, 1998, LECT NOTES COMPUT SC, V1427, P17, DOI 10.1007/BFb0028727
   Roscoe A. W., 1993, Journal of Logic and Computation, V3, P131, DOI 10.1093/logcom/3.2.131
   Roscoe AW, 2010, TEXTS COMPUT SCI, P3, DOI 10.1007/978-1-84882-258-0_1
   Roscoe A.W., 2003, P FME
   Roscoe A. W., 2011, EXPRESSIVEN IN PRESS
   Roscoe A.W., 1998, THEORY PRACTICE CONC
   Roscoe A.W., 2001, MODELLING ANAL SECUR
   Sheeran M, 2000, LECT NOTES COMPUT SC, V1954, P108
   Shtrichman O., 2000, Proceedings of the The International Conference on Computer Aided Verification (CAV), P480
   Sun J, 2008, TASE 2008: SECOND IFIP/IEEE INTERNATIONAL SYMPOSIUM ON THEORETICAL ASPECTS OF SOFTWARE ENGINEERING, PROCEEDINGS, P23, DOI 10.1109/TASE.2008.12
   Sun J, 2008, COMM COM INF SC, V17, P307
NR 38
TC 8
Z9 12
U1 0
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 1
PY 2012
VL 77
IS 10-11
SI SI
BP 1178
EP 1197
DI 10.1016/j.scico.2011.07.008
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 980JQ
UT WOS:000306889800008
OA Bronze
DA 2024-07-18
ER

PT J
AU Ghosal, A
   Iercan, D
   Kirsch, CM
   Henzinger, TA
   Sangiovanni-Vincentelli, A
AF Ghosal, Arkadeb
   Iercan, Daniel
   Kirsch, Christoph M.
   Henzinger, Thomas A.
   Sangiovanni-Vincentelli, Alberto
TI Separate compilation of hierarchical real-time programs into
   linear-bounded Embedded Machine code
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Real-time; Coordination language; Hierarchy; Compiler; Virtual machine
ID GIOTTO
AB Hierarchical Timing Language (HTL) is a coordination language for distributed, hard real-time applications. HTL is a hierarchical extension of Giotto and, like its predecessor, based on the logical execution time (LET) paradigm of real-time programming. Giotto is compiled into code for a virtual machine, called the Embedded Machine (or E machine). If HTL is targeted to the E machine, then the hierarchical program structure needs to be flattened; the flattening makes separate compilation difficult, and may result in E machine code of exponential size. In this paper, we propose a generalization of the E machine, which supports a hierarchical program structure at runtime through real-time trigger mechanisms that are arranged in a tree. We present the generalized E machine, and a modular compiler for HTL that generates code of linear size. The compiler may generate code for any part of a given HTL program separately in any order. (C) 2010 Elsevier B.V. All rights reserved.
C1 [Iercan, Daniel] Politehnica Univ Timisoara, Timisoara, Romania.
   [Ghosal, Arkadeb; Sangiovanni-Vincentelli, Alberto] Univ Calif Berkeley, Berkeley, CA 94720 USA.
   [Kirsch, Christoph M.] Salzburg Univ, A-5020 Salzburg, Austria.
C3 Universitatea Politehnica Timisoara; University of California System;
   University of California Berkeley; Salzburg University
RP Iercan, D (corresponding author), Politehnica Univ Timisoara, Timisoara, Romania.
EM arkadeb@gmail.com; daniel.iercan@aut.upt.ro; ck@cs.uni-salzburg.at;
   tah@ist.ac.at; alberto@eecs.berkeley.edu
RI Iercan, Daniel/E-1972-2013; Sangiovanni-Vincentelli,
   Alberto/S-3822-2019; Sangiovanni-Vincentelli, Alberto/F-5742-2018
OI Sangiovanni-Vincentelli, Alberto/0000-0003-1298-8389
FU EU ArtistDesign Network of Excellence on Embedded Systems Design;
   Austrian Science Fund [P18913-N15]; Austrian Science Fund (FWF) [P18913]
   Funding Source: Austrian Science Fund (FWF)
FX Supported by the EU ArtistDesign Network of Excellence on Embedded
   Systems Design and the Austrian Science Fund P18913-N15.
CR [Anonymous], P AIAA GUID NAV CONT
   Auerbach J, 2009, ACM T EMBED COMPUT S, V8, DOI 10.1145/1457255.1457262
   Bertin V, 2001, IEEE DECIS CONTR P, P2875, DOI 10.1109/CDC.2001.980712
   BOUSSINOT F, 1991, P IEEE, V79, P1293, DOI 10.1109/5.97299
   Buttazzo G., 1997, HARD REAL TIME COMPU
   Caspi P, 2003, ACM SIGPLAN NOTICES, V38, P153, DOI 10.1145/780731.780754
   Chatterjee Krishnendu, 2008, DATE, DOI DOI 10.1109/DATE.2008.4484790
   Farcas E, 2005, ACM SIGPLAN NOTICES, V40, P31, DOI 10.1145/1070891.1065915
   Ghosal A., 2008, THESIS U CALIFORNIA
   Ghosal Arkadeb., 2006, EMSOFT 06, P132
   HALBWACHS N, 1991, P IEEE, V79, P1305, DOI 10.1109/5.97300
   Henzinger TA, 2003, P IEEE, V91, P84, DOI 10.1109/JPROC.2002.805825
   Henzinger TA, 2007, ACM T PROGR LANG SYS, V29, DOI 10.1145/1286821.1286824
   Iercan D., 2009, Proceedings 2009 5th International Symposium on Applied Computational Intelligence and Informatics (SACI), P283, DOI 10.1109/SACI.2009.5136258
   Kirsch ChristophM., 2005, PROC ACMUSENIX C VIR, P35
   Kirsch CM, 2002, LECT NOTES COMPUT SC, V2491, P46
   lercan D., 2008, THESIS U POLITEHNICA
   Liu J, 2003, IEEE CONTR SYST MAG, V23, P65, DOI 10.1109/MCS.2003.1172830
   Lublinerman R, 2008, PROCEEDINGS OF THE 14TH IEEE REAL-TIME AND EMBEDDED TECHNOLOGY AND APPLICATIONS SYMPOSIUM, P147, DOI 10.1109/RTAS.2008.12
   Lublinerman R, 2009, ACM SIGPLAN NOTICES, V44, P78, DOI 10.1145/1594834.1480893
   Sangiovanni-Vincentelli A, 2004, DES AUT CON, P409, DOI 10.1145/996566.996684
NR 21
TC 0
Z9 0
U1 1
U2 4
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 1
PY 2012
VL 77
IS 2
SI SI
BP 96
EP 112
DI 10.1016/j.scico.2010.06.004
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 867OX
UT WOS:000298464800003
DA 2024-07-18
ER

PT J
AU Castro, S
   De Roover, C
   Kellens, A
   Lozano, A
   Mens, K
   D'Hondt, T
AF Castro, Sergio
   De Roover, Coen
   Kellens, Andy
   Lozano, Angela
   Mens, Kim
   D'Hondt, Theo
TI Diagnosing and correcting design inconsistencies in source code with
   logical abduction
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Inconsistency management; Abductive reasoning; Logic meta programming
AB Correcting design decay in source code is not a trivial task. Diagnosing and subsequently correcting inconsistencies between a software system's code and its design rules (e.g., database queries are only allowed in the persistence layer) and coding conventions can be complex, time-consuming and error-prone. Providing support for this process is therefore highly desirable, but of a far greater complexity than suggesting basic corrective actions for simplistic implementation problems (like the "declare a local variable for non-declared variable" suggested by Eclipse).
   We present an abductive reasoning approach to inconsistency correction that consists of (1) a means for developers to document and verify a system's design and coding rules, (2) an abductive logic reasoner that hypothesizes possible causes of inconsistencies between the system's code and the documented rules and (3) a library of corrective actions for each hypothesized cause. This work builds on our previous work, where we expressed design rules as equality relationships between sets of source code artifacts (e.g., the set of methods in the persistence layer is the same as the set of methods that query the database). In this paper, we generalize our approach to design rules expressed as user-defined binary relationships between two sets of source code artifacts (e.g., every state changing method should invoke a persistence method).
   We illustrate our approach on the design of IntensiVE, a tool suite that enables defining sets of source code artifacts intensionally (by means of logic queries) and verifying relationships between such sets. (C) 2010 Elsevier B.V. All rights reserved.
C1 [De Roover, Coen; Kellens, Andy; D'Hondt, Theo] Vrije Univ Brussel, B-1050 Brussels, Belgium.
   [Castro, Sergio; Lozano, Angela; Mens, Kim] Catholic Univ Louvain, B-1348 Louvain, Belgium.
C3 Vrije Universiteit Brussel; Universite Catholique Louvain
RP Kellens, A (corresponding author), Vrije Univ Brussel, Pl Laan 2, B-1050 Brussels, Belgium.
EM Sergio.Castro@uclouvain.be; cderoove@vub.ac.be; akellens@vub.ac.be;
   Angela.Lozano@uclouvain.be; Kim.Mens@uclouvain.be; tjdhondt@vub.ac.be
OI Mens, Kim/0000-0003-0303-1630; De Roover, Coen/0000-0002-1710-1268
FU "Institute for the Promotion of Innovation through Science and
   Technology in Flanders" (IWT Vlaanderen); Belgian Science Policy Office
FX We would like to acknowledge Johan Brichau for his invaluable comments
   and suggestions. Andy Kellens is funded by a research mandate provided
   by the "Institute for the Promotion of Innovation through Science and
   Technology in Flanders" (IWT Vlaanderen). This work was partially funded
   by the Interuniversity Attraction Poles program of the Belgian Science
   Policy Office and the STADiUM project of the "Institute for the
   Promotion of Innovation through Science and Technology in Flanders" (IWT
   Vlaanderen).
CR ABDUCTION CHY, 1994, ANN M AM ED RES ASS
   ALBINAMIOT H, 2001, 2001INFO EC MIN NANT
   [Anonymous], 2006, COMP 21 ACM SIGPLAN, DOI DOI 10.1145/1176617
   BALZER R, 1991, 13TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P158, DOI 10.1109/ICSE.1991.130638
   Bauer Christian., 2006, Java Persistence with Hibernate
   Beck Kent, 1997, SMALLTALK BEST PRACT
   BESNARD P, 1995, P EUR C SYMB QUANT A, P44
   Black A.P., 2009, PHARO EXAMPLE
   Brichau J, 2007, P INT C CHIL COMPUT, P92, DOI 10.1109/SCCC.2007.16
   Brichau J, 2010, SCI COMPUT PROGRAM, V75, P232, DOI 10.1016/j.scico.2009.11.005
   CASTRO S, 2009, INT WORK SMALLT TECH, P8
   CASTRO S, 2008, WORK SESS QUER TECHN
   Console L., 1995, Journal of Intelligent Information Systems: Integrating Artificial Intelligence and Database Technologies, V4, P261, DOI 10.1007/BF00961655
   Coplien JO, 1992, ADV C PROGRAMMING ST
   De Roover C, 2006, INT C PROGRAM COMPRE, P202, DOI 10.1109/ICPC.2006.10
   De Roover Coen., 2009, THESIS VRIJE U BRUSS
   Flach P., 1994, Simply Logical: Intelligent Reasoning by Example
   Gamma E., 1994, Design patterns: Elements of reusable object-oriented software
   GUEHENEUC YG, 2007, P INT C SOFTW MAINT, P529
   Hintikka J, 1998, T C S PEIRCE SOC, V34, P503
   Hunter A., 1998, ACM Transactions on Software Engineering and Methodology, V7, P335, DOI 10.1145/292182.292187
   Inoue K, 1995, INT JOINT CONF ARTIF, P204
   INOUE K, 1998, P 6 INT C PRINC KNOW, P394
   JOHNSON S, 2007, LINT
   KAKAS AC, 1990, VERY LARGE DATA BASES, P650
   KAKAS RKA, 1998, HDB LOGIC ARTIFICIAL
   KELLENS A, 2007, THESIS VRIJE U BRUSS
   Kellens A, 2009, EUR CON SFTWR MTNCE, P199, DOI 10.1109/CSMR.2009.9
   Knodel J, 2008, PROC IEEE INT CONF S, P287, DOI 10.1109/ICSM.2008.4658077
   MENS K, 2001, P 13 INT C SOFTW ENG, P236
   Mens K, 2006, 10TH EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, PROCEEDINGS, P237
   Menzies T, 1996, INT J HUM-COMPUT ST, V45, P305, DOI 10.1006/ijhc.1996.0054
   Minsky N. H., 1996, Theory and Practice of Object Systems, V2, P283, DOI 10.1002/(SICI)1096-9942(1996)2:4<283::AID-TAPO4>3.0.CO;2-V
   Murphy G.C., 1995, Proceedings of the 3rd ACM SIGSOFT symposium on Foundations of software engineering, P18
   Nuseibeh B., 2000, P C FUTURE SOFTWARE, P35, DOI [10.1145/336512.336523, DOI 10.1145/336512.336523]
   Nuseibeh Bashar, 1999, AUSTRALASIAN J INFOR, V6
   Paavola S., 2004, FOUND SCI, V9, P267
   Peirce Charles S, 1955, Philosophical writings of Peirce
   Pierce C. S., 1935, The Collected Papers of Charles Sanders Peirce
   POOLE D, 1988, ARTIF INTELL, V36, P27, DOI 10.1016/0004-3702(88)90077-X
   REITER R, 1987, ARTIF INTELL, V32, P57, DOI 10.1016/0004-3702(87)90062-2
   RUSSO A, 2000, P WORKSH INT SOFTW E
   RUSSO A, 2000, HDB SOFTWARE ENG KNO
   SATOH K, 1998, P AS PAC WORKSH INT, P48
   Satoh K., 1998, Proceedings of International Workshop on the Principles of Software Evolution, P177
   SATOH K, P WORKSH INT SOFTW E, P90
   *SEMML LTD, 2010, SEMMLECODE
   SULLIVAN PF, 1991, T C S PEIRCE SOC, V27, P197
   Wuyts R., 2001, Ph.D. thesis
   Zave P., 1997, ACM Transactions on Software Engineering and Methodology, V6, P1, DOI 10.1145/237432.237434
   Zisman A, 2001, 16TH ANNUAL INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING (ASE 2001), PROCEEDINGS, P359, DOI 10.1109/ASE.2001.989829
NR 51
TC 2
Z9 2
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 1
PY 2011
VL 76
IS 12
SI SI
BP 1113
EP 1129
DI 10.1016/j.scico.2010.09.001
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 793FX
UT WOS:000292806900004
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Benes, N
   Brim, L
   Buhnova, B
   Cerná, I
   Sochor, J
   Vareková, P
AF Benes, N.
   Brim, L.
   Buhnova, B.
   Cerna, I.
   Sochor, J.
   Varekova, P.
TI Partial order reduction for state/event LTL with application to
   component-interaction automata
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 7th International Conference on Integrated Formal Methods
CY FEB 16-19, 2009
CL Dusseldorf, GERMANY
DE State/event LTL; Partial order reduction; Formal verification; Model
   checking; Component-based systems; Component-interaction automata
ID VERIFICATION
AB Software systems assembled from a large number of autonomous components become an interesting target for formal verification due to the issue of correct interplay in component interaction. State/event LTL (Chaki et al. (2004, 2005)11,21) incorporates both states and events to express important properties of component-based software systems.
   The main contribution of this paper is a partial order reduction technique for verification of state/event LTL properties. The core of the partial order reduction is a novel notion of stuttering equivalence which we call state/event stuttering equivalence. The positive attribute of the equivalence is that it can be resolved with existing methods for partial order reduction. State/event LTL properties are, in general, not preserved under state/event stuttering equivalence. To this end we define a new logic, called weak state/event LTL, which is invariant under the new equivalence.
   To bring some evidence of the method's efficiency, we present some of the results obtained by employing the partial order reduction technique within our tool for verification of component-based systems modelled using the formalism of component-interaction automata (Brim et al. (2005)[3]). (C) 2010 Elsevier B.V. All rights reserved.
C1 [Benes, N.; Brim, L.; Buhnova, B.; Cerna, I.; Sochor, J.; Varekova, P.] Masaryk Univ, Fac Informat, Brno 60200, Czech Republic.
C3 Masaryk University Brno
RP Benes, N (corresponding author), Masaryk Univ, Fac Informat, Bot 68A, Brno 60200, Czech Republic.
EM xbenes3@fi.muni.cz; brim@fi.muni.cz; buhnova@fi.muni.cz;
   cerna@fi.muni.cz; sochor@fi.muni.cz
RI Brim, Luboš/J-3268-2013; Buhnova, Barbora/J-3364-2013; Sochor,
   Jiri/D-7067-2013; Cerna, Ivana/A-8939-2010
OI Brim, Luboš/0000-0001-9393-7545; Buhnova, Barbora/0000-0003-4205-101X;
   Benes, Nikola/0000-0003-0164-4046; Cerna, Ivana/0000-0002-0711-9552
CR [Anonymous], 1989, CWI Q.
   Barnat J, 2009, 2009 INTERNATIONAL WORKSHOP ON HIGH PERFORMANCE COMPUTATIONAL SYSTEMS BIOLOGY, PROCEEDINGS, P31, DOI 10.1109/HiBi.2009.10
   BENES N, 2008, P WORKSH FORM ASP CO, P221
   BENES N, 2008, P PDMC 2008, P35
   BENES N, 2009, P MEMICS 09
   Bosnacki D, 2006, LECT NOTES COMPUT SC, V3925, P271
   BRIM L, 2005, P SAVCBS 05, P31
   Brückner I, 2005, LECT NOTES COMPUT SC, V3455, P414
   Chaki S, 2005, FORM ASP COMPUT, V17, P461, DOI 10.1007/s00165-005-0071-z
   Chaki S, 2004, LECT NOTES COMPUT SC, V2999, P128
   Clarke EM, 1999, MODEL CHECKING, P1
   *COLN TEAM, COLN TOOL FORM VER T
   de Alfaro L., 2005, P 2004 MARKT SUMM SC
   Gerth R., 1995, INT C PROTOCOL SPECI, P3
   GIANNAKOPOULOU D, 2003, ESEC FSE 03, P257
   GODEFROID P, 1991, LECT NOTES COMPUT SC, V531, P176, DOI 10.1007/BFb0023731
   HOLZMANN GJ, 1994, FORTE, P197
   LAMPORT L, 1994, ACM T PROGR LANG SYS, V16, P872, DOI 10.1145/177492.177726
   Peled D, 1997, INFORM PROCESS LETT, V63, P243, DOI 10.1016/S0020-0190(97)00133-6
   Peled D, 1998, LECT NOTES COMPUT SC, V1427, P17, DOI 10.1007/BFb0028727
   Peled D., 1993, Proceedings of the 5th International Conference on Computer Aided Verification, V697, P409
   Peled Doron., 1994, Proceedings of the 6th International Conference on Computer Aided Veri cation, CAV '94, P377, DOI DOI 10.1007/3-540-58179-0_69
   SUN J, 2008, ICFEM, P5
   VALMARI A, 1991, LECT NOTES COMPUT SC, V531, P156, DOI 10.1007/BFb0023729
   Zimmerova B, 2008, LECT NOTES COMPUT SC, V5153, P146
NR 25
TC 4
Z9 5
U1 0
U2 6
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 1
PY 2011
VL 76
IS 10
SI SI
BP 877
EP 890
DI 10.1016/j.scico.2010.02.008
PG 14
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 785MK
UT WOS:000292232900004
DA 2024-07-18
ER

PT J
AU Weiss, B
AF Weiss, Benjamin
TI Predicate abstraction in a program logic calculus
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 7th International Conference on Integrated Formal Methods
CY FEB 16-19, 2009
CL Dusseldorf, GERMANY
DE Formal methods; Software verification; Theorem proving; Invariant
   generation; Abstract interpretation; Predicate abstraction
ID INVARIANTS
AB Predicate abstraction is a form of abstract interpretation where the abstract domain is constructed from a finite set of predicates over the variables of the program. This paper explores a way to integrate predicate abstraction into a calculus for deductive program verification based on symbolic execution, where it allows us to infer loop invariants automatically that would otherwise have to be given interactively. The approach has been implemented as a part of the KeY verification system. (C) 2010 Elsevier B.V. All rights reserved.
C1 Karlsruhe Inst Technol, Inst Theoret Comp Sci, Karlsruhe, Germany.
C3 Helmholtz Association; Karlsruhe Institute of Technology
RP Weiss, B (corresponding author), Karlsruhe Inst Technol, Inst Theoret Comp Sci, Karlsruhe, Germany.
EM bweiss@ira.uka.de
CR [Anonymous], 2002, POPL
   [Anonymous], 2000, DYNAMIC LOGIC CAMBRI, DOI DOI 10.7551/MITPRESS/2516.001.0001
   [Anonymous], CEUR WORKSH P
   [Anonymous], LNCS
   [Anonymous], CEUR WORKSH P
   [Anonymous], LNCS
   [Anonymous], P 1 INT WORKSH INV G
   [Anonymous], LECT NOTES COMPUT SC
   [Anonymous], ACM SIGSOFT SOFTWARE
   Balser M, 2000, LECT NOTES COMPUT SC, V1783, P363
   Barnett M, 2006, LECT NOTES COMPUT SC, V4111, P364
   Beckert B, 2006, LECT NOTES ARTIF INT, V4130, P266
   Beckert Bernhard., 2007, LNCS, V4334
   Beyer D, 2005, LECT NOTES COMPUT SC, V3442, P2, DOI 10.1007/978-3-540-31984-9_2
   Clarke E, 2003, TIME-ICTL 2003: 10TH INTERNATIONAL SYMPOSIUM ON TEMPORAL REPRESENTATION AND REASONING AND FOURTH INTERNATIONAL CONFERENCE ON TEMPORAL LOGIC, PROCEEDINGS, P7
   Cousot P., 1977, C RECORD 1977 ACM S, P238
   Detlefs D, 2005, J ACM, V52, P365, DOI 10.1145/1066100.1066102
   Ernst MD, 2001, IEEE T SOFTWARE ENG, V27, P99, DOI 10.1109/32.908957
   Graf S, 1997, LECT NOTES COMPUT SC, V1254, P72
   HOARE CAR, 1969, COMMUN ACM, V12, P576, DOI 10.1145/363235.363259
   KING JC, 1976, COMMUN ACM, V19, P385, DOI 10.1145/360248.360252
   Leino KRM, 2005, LECT NOTES COMPUT SC, V3780, P119
   Rümmer P, 2006, LECT NOTES ARTIF INT, V4246, P422, DOI 10.1007/11916277_29
   Tiwari A, 2007, LECT NOTES ARTIF INT, V4603, P147
   Weiss B, 2009, LECT NOTES COMPUT SC, V5423, P136
NR 25
TC 2
Z9 2
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 1
PY 2011
VL 76
IS 10
SI SI
BP 861
EP 876
DI 10.1016/j.scico.2010.06.008
PG 16
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 785MK
UT WOS:000292232900003
OA Green Submitted, hybrid
DA 2024-07-18
ER

PT J
AU Edelkamp, S
   Sulewski, D
   Barnat, J
   Brim, L
   Simecek, P
AF Edelkamp, S.
   Sulewski, D.
   Barnat, J.
   Brim, L.
   Simecek, P.
TI Flash memory efficient LTL model checking
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Model checking; External memory algorithms; Algorithm engineering
ID DUPLICATE DETECTION; HASH; VERIFICATION; COMPLEXITY
AB As the capacity and speed of flash memories in form of solid state disks grow, they are becoming a practical alternative for standard magnetic drives. Currently, most solid-state disks are based on NAND technology and much faster than magnetic disks in random reads, while in random writes they are generally not.
   So far, large-scale LTL model checking algorithms have been designed to employ external memory optimized for magnetic disks. We propose algorithms optimized for flash memory access. In contrast to approaches relying on the delayed detection of duplicate states, in this work, we design and exploit appropriate hash functions to re-invent immediate duplicate detection.
   For flash memory efficient on-the-fly LTL model checking, which aims at finding any counter-example to the specified LTL property, we study hash functions adapted to the two-level hierarchy of RAM and flash memory. For flash memory efficient off-line LTL model checking, which aims at generating a minimal counterexample and scans the entire state space at least once, we analyze the effect of outsourcing a memory-based perfect hash function from RAM to flash memory.
   Since the characteristics of flash memories are different to magnetic hard disks, the existing I/O complexity model is no longer sufficient. Therefore, we provide an extended model for the computation of the I/O complexity adapted to flash memories that has a better fit to the observed behavior of our algorithms. (C) 2010 Elsevier B.V. All rights reserved.
C1 [Edelkamp, S.; Sulewski, D.] Univ Bremen, D-2800 Bremen 33, Germany.
   [Barnat, J.; Brim, L.; Simecek, P.] Masaryk Univ Brno, Brno, Czech Republic.
C3 University of Bremen; Masaryk University Brno
RP Sulewski, D (corresponding author), Univ Bremen, D-2800 Bremen 33, Germany.
EM Damian.Sulewski@TU-Dortmund.de
RI Brim, Luboš/J-3268-2013; Barnat, Jiří/J-3212-2013
OI Brim, Luboš/0000-0001-9393-7545; Barnat, Jiri/0000-0003-2044-2861
FU Grant Agency of Czech Republic [201/06/1338]; Academy of Sciences
   [1ET408050503]; DFG [ED 74/8-1]
FX This work has been partially supported by the Grant Agency of Czech
   Republic grant No.201/06/1338, the Academy of Sciences grant No.
   1ET408050503, and DFG grant No. ED 74/8-1.
CR AGGARWAL A, 1988, COMMUN ACM, V31, P1116, DOI 10.1145/48529.48535
   Ajwani D, 2008, LECT NOTES COMPUT SC, V5038, P208, DOI 10.1007/978-3-540-68552-4_16
   Ajwani D, 2009, LECT NOTES COMPUT SC, V5526, P16, DOI 10.1007/978-3-642-02011-7_4
   [Anonymous], 1973, The art of computer programming
   Barnat J, 2008, LECT NOTES COMPUT SC, V4963, P48, DOI 10.1007/978-3-540-78800-3_5
   BARNAT J, 2004, THESIS MASARYK U BRN
   BARNAT J, 2009, MASSIVE 09, P82
   BARNAT J, 2009, AUT SOFTW ENG INT C, P635, DOI DOI 10.1109/ASE.2009.32
   Barnat J, 2007, LECT NOTES COMPUT SC, V4590, P281
   Barnat J, 2006, LECT NOTES COMPUT SC, V4144, P278, DOI 10.1007/11817963_26
   Barnat J, 2009, LECT NOTES COMPUT SC, V5596, P150, DOI 10.1007/978-3-642-03240-0_14
   Belazzougui D, 2009, PROCEEDINGS OF THE TWENTIETH ANNUAL ACM-SIAM SYMPOSIUM ON DISCRETE ALGORITHMS, P785
   Belazzougui D, 2009, LECT NOTES COMPUT SC, V5757, P682, DOI 10.1007/978-3-642-04128-0_61
   BLOOM BH, 1970, COMMUN ACM, V13, P422, DOI 10.1145/362686.362692
   Botelho FC, 2007, LECT NOTES COMPUT SC, V4619, P139
   BOTELHO FC, 2007, C INF KNOWL MAN CIKM, P653
   Brim L, 2004, LECT NOTES COMPUT SC, V3312, P352
   Butterfield A, 2009, SCI COMPUT PROGRAM, V74, P219, DOI 10.1016/j.scico.2008.09.014
   Cerná I, 2003, LECT NOTES COMPUT SC, V2648, P49
   Clarke EM, 1999, MODEL CHECKING, P1
   Courcoubetis C., 1992, Formal Methods in System Design, V1, P275, DOI 10.1007/BF00121128
   Dementiev R, 2008, SOFTWARE PRACT EXPER, V38, P589, DOI 10.1002/spe.844
   DIAL RB, 1969, COMMUN ACM, V12, P632, DOI 10.1145/363269.363610
   Dietzfelbinger M., 1988, 29th Annual Symposium on Foundations of Computer Science (IEEE Cat. No.88CH2652-6), P524, DOI 10.1109/SFCS.1988.21968
   Dietzfelbinger M, 2009, LECT NOTES ARTIF INT, V5803, P33, DOI 10.1007/978-3-642-04617-9_5
   Edelkamp S, 2006, LECT NOTES COMPUT SC, V3925, P1
   Edelkamp S, 2004, LECT NOTES COMPUT SC, V3238, P226
   EDELKAMP S, 2008, DISK BASED SEARCH, P501
   EDELKAMP S, 2008, KI 22, V2, P44
   Edelkamp S, 2008, LECT NOTES COMPUT SC, V5123, P530
   Edelkamp S, 2009, LECT NOTES COMPUT SC, V5348, P65
   Edelkamp S, 2008, SEFM 2008: SIXTH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING AND FORMAL METHODS, PROCEEDINGS, P73, DOI 10.1109/SEFM.2008.34
   Evangelista S, 2008, LECT NOTES COMPUT SC, V5156, P77, DOI 10.1007/978-3-540-85114-1_8
   FREDMAN ML, 1982, SFCS 82, P165
   Gastin P, 2007, LECT NOTES COMPUT SC, V4595, P24
   HAGERUP T, 2001, LNCS, V2010, P317
   Hammer M, 2007, LECT NOTES COMPUT SC, V4346, P51
   HART PE, 1968, IEEE T SYST SCI CYB, VSSC4, P100, DOI 10.1109/TSSC.1968.300136
   Holzmann G., 1996, Proceedings of the 2nd International SPIN Workshop on Model Checking of Software, P23
   Holzmann G. J., 1999, International Journal on Software Tools for Technology Transfer, V2, P270, DOI 10.1007/s100090050034
   Holzmann GJ, 1998, FORM METHOD SYST DES, V13, P289, DOI 10.1023/A:1008696026254
   *INT, 2009, INT X25 M X 18 M MAI
   KIRSCH N, 2009, INTEL X25 M 160GB 34
   KOFF RE, 2005, AAAI 05, P1380
   Korf RE, 2004, PROCEEDING OF THE NINETEENTH NATIONAL CONFERENCE ON ARTIFICIAL INTELLIGENCE AND THE SIXTEENTH CONFERENCE ON INNOVATIVE APPLICATIONS OF ARTIFICIAL INTELLIGENCE, P650
   Lamborn P, 2008, LECT NOTES COMPUT SC, V5156, P160, DOI 10.1007/978-3-540-85114-1_13
   Majewski BS, 1996, COMPUT J, V39, P547, DOI 10.1093/comjnl/39.6.547
   McMillan K. L., 1993, Symbolic model checking
   MEHLHORN K, 1984, MONOGRAPHS THEORETIC, V2
   MEHLHORN K, 1984, SORTING SEARCHING
   MIN SL, 2007, LNCS, P75
   Munagala K, 1999, PROCEEDINGS OF THE TENTH ANNUAL ACM-SIAM SYMPOSIUM ON DISCRETE ALGORITHMS, P687
   Pagh R., 2001, LNCS, V2161, P121, DOI DOI 10.1007/3-540-44676-1_10
   Pelánek R, 2007, LECT NOTES COMPUT SC, V4595, P263
   Pnueli Amir, 1977, FOCS, P46, DOI DOI 10.1109/SFCS.1977.32
   SANDERS P, 2003, MEMORY HIERARCHIES
   SCHMIDT JP, 1990, SIAM J COMPUT, V19, P775, DOI 10.1137/0219054
   Schuppan V., 2004, International Journal on Software Tools for Technology Transfer, V5, P185, DOI 10.1007/s10009-003-0121-x
   Schwoon S, 2005, LECT NOTES COMPUT SC, V3440, P174
   Stern U, 1998, LECT NOTES COMPUT SC, V1427, P172, DOI 10.1007/BFb0028743
   STERN U, 1996, METHODEN ENTWURFS VE, P81
   TARJAN RE, 1979, COMMUN ACM, V22, P606, DOI 10.1145/359168.359175
   Vitter JS, 2001, ACM COMPUT SURV, V33, P209, DOI 10.1145/384192.384193
NR 63
TC 3
Z9 3
U1 0
U2 4
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 1
PY 2011
VL 76
IS 2
SI SI
BP 136
EP 157
DI 10.1016/j.scico.2010.03.005
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 693JO
UT WOS:000285220600006
OA Bronze
DA 2024-07-18
ER

PT J
AU Barbosa, MA
   Barbosa, LS
AF Barbosa, Marco A.
   Barbosa, Luis S.
TI A perspective on service orchestration
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 5th International Workshop on the Foundations of Coordination Languages
   and Software Architectures (FOCLASA'06)
CY AUG 31, 2006
CL Bonn, GERMANY
DE Services; Software connectors; Exogenous coordination; REO
ID CALCULUS; MODEL; REO
AB Service-oriented computing is an emerging paradigm with increasing impact on the way modern software systems are designed and developed. Services are autonomous, loosely coupled and heterogeneous computational entities able to cooperate to achieve common goals. This paper introduces a model for service orchestration, which combines a exogenous coordination model, with services' interfaces annotated with behavioural patterns specified in a process algebra which is parametric on the interaction discipline. The coordination model is a variant of REO for which a new semantic model is proposed. (C) 2009 Published by Elsevier B.V.
C1 [Barbosa, Marco A.; Barbosa, Luis S.] Univ Minho, CCTC, P-4700320 Braga, Portugal.
C3 Universidade do Minho
RP Barbosa, MA (corresponding author), Univ Minho, CCTC, P-4700320 Braga, Portugal.
EM marco@di.uminho.pt; lsb@di.uminho.pt
RI Barbosa, Marco Aurelio Ramos dos Santos/KDM-8492-2024; Barbosa, Marco
   Antonio/HRA-6365-2023; Barbosa, Marco/GXV-3130-2022; Soares Barbosa,
   Luis/N-7086-2013
OI Barbosa, Marco Antonio/0000-0001-9674-2348; Soares Barbosa,
   Luis/0000-0002-5037-2588
CR ABRAMSKY S, 1994, NATO ASI SERIES F
   Adam NR, 1998, J INTELL INF SYST, V10, P131, DOI 10.1023/A:1008656726700
   Allen R., 1997, ACM Transactions on Software Engineering and Methodology, V6, P213, DOI 10.1145/258077.258078
   Alonso G., 2004, DAT SYS APP, DOI 10.1007/978-3-662-10876-5_5
   Amici Roberta., 2004, Proceedings of the First International Workshop on Petri Nets and Coordination (PNC04), Satellite Event of the 25th International Conference on Application and Theory of Petri Nets, Bologna, Italy, June 21, 2004, P33
   Andrade L.F., 2004, Journal of Universal Computer Science, V10, P751
   [Anonymous], 1999, Communicating and Mobile Systems: The Calculus
   [Anonymous], 2007, Business Process Execution Language for Web Services (version 1.1)
   Arbab F, 2004, MATH STRUCT COMP SCI, V14, P329, DOI 10.1017/S0960129504004153
   Arbab F, 2003, LECT NOTES COMPUT SC, V2755, P34
   Arbab F, 2003, LECT NOTES COMPUT SC, V2852, P33
   ARBAB F, 2002, LECT NOTES COMP SCI, V2315
   Baier C, 2006, SCI COMPUT PROGRAM, V61, P75, DOI 10.1016/j.scico.2005.10.008
   BARBOSA LS, 2003, ELECT NOTES THEOR CO
   BARBOSA LS, 2001, ELECT NOTES THEOR CO, P47
   BARBOSA LS, 2002, LECT NOTES COMP SCI, V2441, P183
   BARBOSA MA, 2004, SPRINGER LECT NOTES, V3407, P53
   Barbosa MA, 2007, ELECTRON NOTES THEOR, V181, P49, DOI 10.1016/j.entcs.2007.01.053
   BIRD R, 1997, SERIES COMPUTER SCI
   Bird R.S., 1987, Program Specification and Transformation, P451
   Brogi A., 2004, Electronic Notes in Theoretical Computer Science, V105, P73, DOI DOI 10.1016/J.ENTCS.2004.05.007
   Busi N, 2005, LECT NOTES COMPUT SC, V3826, P228
   Clarke D, 2007, SCI COMPUT PROGRAM, V66, P205, DOI 10.1016/j.scico.2007.01.009
   de Alfaro L., 2001, CONCUR 2001 - Concurrency Theory. 12th International Conference. Proceedings (Lecture Notes in Computer Science Vol.2154), P351
   Fiadeiro JL, 2005, LECT NOTES COMPUT SC, V3407, P1
   FIADEIRO JL, 1997, LNCS, V1214, P505
   HAGINO T, 1987, LECT NOTES COMPUT SC, V283, P140
   Henzinger TA, 1995, LECT NOTES COMPUT SC, V944, P324
   Hoare C.A.R., 1985, SERIES COMPUTER SCI
   Jean guySchneider., 1999, SOFTWARE ARCHITECTUR, P13
   Kelly S, 2007, INT FED INFO PROC, V244, P1
   LARSEN KG, 1991, INFORM COMPUT, V94, P1, DOI 10.1016/0890-5401(91)90030-6
   Magee J, 1999, INT FED INFO PROC, V12, P35
   Magee J., 1995, P 5 EUROPEAN SOFTWAR, P137
   MAZZARA M, 2005, LECT NOTES COMP SCI, V3454
   MILNER R, 1993, COMMUN ACM, V36, P78, DOI 10.1145/151233.151240
   MILNER R., 1989, SERIES COMPUTER SCI
   Nierstrasz O, 2003, LECT NOTES COMPUT SC, V2852, P339
   OAKS S, 2000, JINI NUTSHELL
   Papadopoulos G. A., 1998, ADV COMPUT, V46, P329, DOI [DOI 10.1016/S0065-2458(08)60208-9, 10.1016/S0065-2458(08)60208-9]
   PAPAZOGLOU M, 2003, COMMUNICATIONS ACM, V46
   Plasil F, 2002, IEEE T SOFTWARE ENG, V28, P1056, DOI 10.1109/TSE.2002.1049404
   PLASIL F, 1997, JMLC 97, P267
   Ribeiro PR, 2006, J UNIVERS COMPUT SCI, V12, P922
   Ribeiro PR, 2008, ELECTRON NOTES THEOR, V207, P89, DOI 10.1016/j.entcs.2008.03.087
   Rutten JJMM, 2000, THEOR COMPUT SCI, V249, P3, DOI 10.1016/S0304-3975(00)00056-6
   Salaün G, 2004, IEEE INTERNATIONAL CONFERENCE ON WEB SERVICES, PROCEEDINGS, P43, DOI 10.1109/ICWS.2004.1314722
   Sangiorgi D., 2001, PHI CALCULUS THEORY
   Selinger P., 1999, ENTCS, V20
   Van der Aalst WMP, 2003, DISTRIB PARALLEL DAT, V14, P5, DOI 10.1023/A:1022883727209
   VISNOVSKY S, 2003, THESIS CHARLES U CZE
   *W2C, 2005, WEB SERV CHOR DESCR
   *W2C, 2005, WEB SERV DESCR LANG
   Yang HL, 2007, LECT NOTES COMPUT SC, V4574, P81
   ZONGYAN Q, 2007, P 16 INT C WORLD WID, P973
NR 55
TC 4
Z9 5
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUL 1
PY 2009
VL 74
IS 9
SI SI
BP 671
EP 687
DI 10.1016/j.scico.2008.09.019
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 462TT
UT WOS:000267380200002
OA Bronze
DA 2024-07-18
ER

PT J
AU Fabry, J
   Tanter, É
   D'Hondt, T
AF Fabry, Johan
   Tanter, Eric
   D'Hondt, Theo
TI KALA:: Kernel aspect language for advanced transactions
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE advanced transaction management; domain-specific languages; ACTA; reflex
AB Transaction management is a known crosscutting concern. Previous research has been conducted to express this concern as an aspect. However, such work has used general-purpose aspect languages which lack a formal foundation, and most importantly are unable to express advanced models of transaction management. In this paper, we propose a domain-specific aspect language for advanced transaction management, called KALA, that overcomes these limitations. First, KALA is based on a recognized formalism for the domain of advanced transaction management, called ACTA. Second, as a consequence of being based on the ACTA formalism, KALA covers a wide variety of models for transaction management. Finally, being a domain-specific aspect language, KALA allows programmers to express their needs at a higher level of abstraction than what is achieved with general-purpose aspect languages. This paper reports on the design of KALA and its implementation over Java, based on the Reflex AOP kernel for domain-specific aspect languages. (C) 2008 Elsevier B.V. All rights reserved.
C1 [Fabry, Johan; Tanter, Eric] Univ Chile, Comp Sci Dept DCC, PLEIAD Lab, Santiago, Chile.
   [D'Hondt, Theo] Vrije Univ Brussel, Programming Technol Lob, B-1050 Brussels, Belgium.
C3 Universidad de Chile; Vrije Universiteit Brussel
RP Fabry, J (corresponding author), Univ Chile, Comp Sci Dept DCC, PLEIAD Lab, Blanco Encalada 2120, Santiago, Chile.
EM jfabry@dcc.uchile.cl; etanter@dcc.uchile.cl; tjdhondt@vub.ac.be
RI Tanter, Éric/A-7955-2008
OI Tanter, Éric/0000-0002-7359-890X; Fabry, Johan/0000-0002-7533-9354
CR Bravenboer M, 2004, ACM SIGPLAN NOTICES, V39, P365, DOI 10.1145/1035292.1029007
   Bravenboer Martin., 2006, OOPSLA 06, P209, DOI DOI 10.1145/1167473
   Elmagarmid A., 1992, Database Transactional Models for Advanced Applications
   FABRY J, 2007, P 2 WORKSH DOM SPEC
   FABRY J, 2006, OP DYN ASP LANG WORK
   FABRY J, 2005, THESIS VRIJE U BRUSS
   FARRAG AA, 1989, ACM T DATABASE SYST, V14, P503, DOI 10.1145/76902.76905
   FILMAN RE, 2000, OOPSLA 2000 WORKSH A
   Garcia-Molina H., 1987, ACM SIGMOD Record, P249, DOI DOI 10.1145/38714.38742
   JAJODIA S, 1997, ADV T MODELS ARCHITE
   KICZALES G, 1997, P EUR C OBJ OR PROGR, V1241, P220
   KIENZLE J, 2002, LECT NOTES COMPUTER, V2374
   Maes P, 1987, C P OBJ OR PROGR SYS, P147
   Mernik M, 2005, ACM COMPUT SURV, V37, P316, DOI 10.1145/1118890.1118892
   Monson-Haefel Richard., 2001, ENTERPRISE JAVABEANS
   MOSS JEB, 1981, THESIS MIT
   Pitoura E, 1999, PROCEEDINGS OF THE TWENTY-FIFTH INTERNATIONAL CONFERENCE ON VERY LARGE DATA BASES, P114
   Prochazka M., 2001, Engineering Distributed Objects. Second International Workshop, EDO 2000. Revised Papers. (Lecture Notes in Computer Science Vol.1999), P215
   Rashid Awais., 2003, AOSD 03, P120
   Reuter A, 1993, T PROCESSING CONCEPT
   Soares S, 2002, ACM SIGPLAN NOTICES, V37, P174, DOI 10.1145/583854.582437
   Tanter É, 2005, LECT NOTES COMPUT SC, V3676, P173
   Tanter É, 2003, ACM SIGPLAN NOTICES, V38, P27, DOI 10.1145/949343.949309
   Tanter É, 2006, LECT NOTES COMPUT SC, V4089, P98
   van Deursen A, 2000, ACM SIGPLAN NOTICES, V35, P26, DOI 10.1145/352029.352035
   Visser E, 2003, LECT NOTES COMPUT SC, V3016, P216
   Visser Eelco, 1997, Syntax Definition for Language Prototyping
NR 27
TC 5
Z9 6
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAY 1
PY 2008
VL 71
IS 3
BP 165
EP 180
DI 10.1016/j.scico.2007.10.004
PG 16
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 322VD
UT WOS:000257402500001
OA Bronze
DA 2024-07-18
ER

PT J
AU Gao, H
   Groote, JF
   Hesselink, WH
AF Gao, H.
   Groote, J. F.
   Hesselink, W. H.
TI Lock-free parallel and concurrent garbage collection by mark&sweep
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE garbage collection; lock-free; shared-memory; correctness; theorem
   proving
AB This paper presents a lock-free algorithm for mark&sweep garbage collection (GC) in a realistic model using synchronization primitives load-linked/store-conditional (LL/SC) or compare-and-swap (CAS) offered by machine arch i lectures. The algorithm is concurrent in the sense that garbage collection can run concurrently with the application (the mutator threads). It is parallel in that garbage collection itself may employ several concurrent collector threads.
   We first design and prove an algorithm with a coarse grain of atomicity and subsequently apply the reduction method developed and verified in [H. Gao, W.H. Hesselink, A formal reduction for lock-free parallel algorithms, in: Proceedings of the 16th Conference on Computer Aided Verification, CAV, July 2004] to implement the high-level atomic steps by means of the low-level primitives. Even the correctness of the coarse grain algorithm is very delicate due to the presence of concurrent mutator and collector threads. We have verified it therefore by means of the interactive theorem prover PVS. (c) 2006 Elsevier B.V. All rights reserved.
C1 [Gao, H.] Univ Elect Sci & Technol China, Sch Comp Sci & Engn, Chengdu 610054, Peoples R China.
   [Groote, J. F.] Eindhoven Univ Technol, Dept Math & Comp Sci, NL-5600 MB Eindhoven, Netherlands.
   [Hesselink, W. H.] Univ Groningen, Dept Math & Comp Sci, NL-9700 AV Groningen, Netherlands.
C3 University of Electronic Science & Technology of China; Eindhoven
   University of Technology; University of Groningen
RP Hesselink, WH (corresponding author), Univ Groningen, Dept Math & Comp Sci, Blauwborgje 10 Postbus 800, NL-9700 AV Groningen, Netherlands.
EM huigao@uestc.edu.cn; jfg@win.tue.nl; w.h.hesselink@rug.nl
OI Hesselink, Wim/0000-0002-1413-4320; Groote, Jan
   Friso/0000-0003-2196-6587
CR [Anonymous], 2005, SOC NETWORKS, DOI [DOI 10.1016/j.socnet.2004.11.009, DOI 10.1016/J.SOCNET.2004.11.009]
   APT KR, 1991, VERIFICATION SEQUANT
   AZATCHI H, 2003, P 18 ACM SIGPLAN C O, P269
   BACK RJR, 1990, LECT NOTES COMPUT SC, V430, P42
   BARNES G, 1993, P 5 ANN ACM S PAR AL, P261, DOI DOI 10.1145/165231.165265
   BENARI M, 1984, ACM T PROGR LANG SYS, V6, P333, DOI 10.1145/579.587
   Bershad B. N., 1993, Proceedings the 13th International Conference on Distributed Computing Systems (Cat. No.93CH3282-1), P264, DOI 10.1109/ICDCS.1993.287700
   Boehm H. J., 1991, SIGPLAN Notices, V26, P157, DOI 10.1145/113446.113459
   Chandy K.M., 1988, PARALLEL PROGRAM DES
   COHEN E, 1998, P 9 INT C CONC THEOR, P317
   CORNES C, 1997, COQ PROOF ASSISTANT
   Detlefs DL, 2002, DISTRIB COMPUT, V15, P255, DOI 10.1007/s00446-002-0079-z
   DIJKSTRA EW, 1978, COMMUN ACM, V21, P966, DOI 10.1145/359642.359655
   DOLIGEZ D, 1993, POPL 93, P113
   Endo Toshio., 1997, Proceedings of the 1997 ACM/IEEE Conference on Supercomputing, P1
   FLOOD C, 2001, US JAV VIRT MACH RES
   Gao H, 2007, INFORM COMPUT, V205, P225, DOI 10.1016/j.ic.2006.10.003
   Gao H, 2005, DISTRIB COMPUT, V18, P21, DOI 10.1007/s00446-004-0115-2
   GAO H, 2004, 0431 CS EINDH U TECH
   GAO H, 2005, LNCS, V3758, P263
   GAO H, 2004, P 18 INT PAR DISTR P
   GAO H, 2004, P 16 C COMP AID VER
   Groote JF, 2001, DISTRIB COMPUT, V14, P75, DOI 10.1007/PL00008930
   Herlihy M, 2002, LECT NOTES COMPUT SC, V2508, P339
   HERLIHY M, 1993, ACM T PROGR LANG SYS, V15, P745, DOI 10.1145/161468.161469
   HERLIHY MP, 1992, IEEE T PARALL DISTR, V3, P304, DOI 10.1109/71.139204
   Hesselink WH, 2004, SCI COMPUT PROGRAM, V51, P47, DOI 10.1016/j.scico.2003.06.001
   Hesselink WH, 2001, DISTRIB COMPUT, V14, P31, DOI 10.1007/PL00008924
   HUDSON RL, 2001, ISCOPE C ACM 2001 JA, P48
   HUELSBERGEN L, 1993, P 4 ACM SIGPLAN S PR, P73
   Jackson PB, 1998, LECT NOTES COMPUT SC, V1479, P225, DOI 10.1007/BFb0055139
   Jensen E. H., 1987, Technical Report. UCRL-97663
   Jones ML, 1998, AM J RHINOL, V12, P249, DOI 10.2500/105065898781390019
   Jones R.E., 1996, Garbage Collection: Algorithms for Automatic Dynamic Memory Management
   JONKER JE, 1992, DISTRIB COMPUT, V5, P187, DOI 10.1007/BF02277666
   KANELLAKIS PC, 1997, KLUWER INT SER ENG C, P1
   LAMPORT L, 1994, ACM T PROGR LANG SYS, V16, P872, DOI 10.1145/177492.177726
   LEVANONI Y, 2001, P 16 ACM SIGPLAN C O, P367
   Luchangco Victor., 2003, P 15 ANN ACM S PARAL, P314
   Lynch N. A., 1996, DISTRIBUTED ALGORITH
   Massalin Henry, 1991, Technical Report CUCS-005-91
   Michael M. M., 2002, P 14 ANN ACM S PAR A, P73, DOI DOI 10.1145/564870.564881
   Moir M., 1997, Proceedings of the Sixteenth Annual ACM Symposium on Principles of Distributed Computing, P219, DOI 10.1145/259380.259442
   MOOIJ AJ, 2004, COMMUNICATION
   Moreau L, 2001, ACTA INFORM, V37, P563, DOI 10.1007/PL00013315
   O'Toole J., 1994, Proceedings of the 1994 ACM Conference on LISP and Functional Programming, P34, DOI 10.1145/182409.182425
   OWICKI S, 1982, ACM T PROGR LANG SYS, V4, P455, DOI 10.1145/357172.357178
   OWICKI S, 1976, ACTA INFORM, V6, P319, DOI 10.1007/BF00268134
   Owre S., 2001, PVS VERSION 2 4 SYST
   Russinoff D. M., 1994, Formal Aspects of Computing, V6, P359, DOI 10.1007/BF01211305
   Sundell Hakan., 2004, P 2004 ACM S APPL CO, P1438
   Valois J. D., 1995, Proceedings of the Fourteenth Annual ACM Symposium on Principles of Distributed Computing, P214, DOI 10.1145/224964.224988
   van den Brand MGJ, 2000, SOFTWARE PRACT EXPER, V30, P259, DOI 10.1002/(SICI)1097-024X(200003)30:3<259::AID-SPE298>3.0.CO;2-Y
   Wavelund K., 1999, Parallel and Distributed Processing. 11th IPPS/SPDP'99 Workshops Held in Conjunction with the 13th International Parallel Processing Symposium and 10th Symposium on Parallel and Distributed Processing. Proceedings, P1258
NR 54
TC 13
Z9 13
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 1
PY 2007
VL 64
IS 3
BP 341
EP 374
DI 10.1016/j.scico.2006.10.001
PG 34
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 122SH
UT WOS:000243246500006
OA Green Published
DA 2024-07-18
ER

PT J
AU Eugster, P
   Vaucouleur, S
AF Eugster, Patrick
   Vaucouleur, Sebastien
TI Composing atomic features
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT OOPSLA Workshop on Synchronization and Concurrent in Object-Oriented
   Languages
CY 2005
CL San Diego, CA
DE transactions; concurrency; compensation; objects; SCOOP
AB SCOOP (Simple Concurrent Object-Oriented Programming) is a model of concurrency that builds on the concept of contracts for synchronizing accesses to objects. This model is based on a pessimistic concurrency control scheme whose reservation semantics avoids race conditions altogether-alas at the expense of parallelism. In this paper we propose to extend the initial SCOOP model by adding transactional semantics, aspiring to an increase of performance but also reliability of distributed object-oriented programs executing in the presence of partial failures.
   Our solution consists in programming language support for the specification of atomicity properties of particular features (routines or attributes). With such support, the application programmer is assisted by the compiler in composing atomic features, which substantially alleviates the task of constructing reliable distributed software. We investigate the impact of concepts such as nesting, inheritance, polymorphism, and contracts in such a statically typed approach, illustrated in the context of the Eiffel programming language. in particular, we depict how our solution enables the composition of atomic features from not only elementary atomic features (such as updates applied to variables which can be rolled back - backward recovery) but also from non-atomic ones by making use of compensation mechanisms (forward recovery). (c) 2006 Elsevier B.V. All rights reserved.
C1 IT Univ Copenhagen, Software Dev Grp, DK-2300 Copenhagen, Denmark.
   Purdue Univ, Dept Comp Sci, W Lafayette, IN 47906 USA.
C3 IT University Copenhagen; Purdue University System; Purdue University
RP Vaucouleur, S (corresponding author), IT Univ Copenhagen, Software Dev Grp, Rued Langgaards Vej 7, DK-2300 Copenhagen, Denmark.
EM peugster@cs.purdue.edu; vaucouleur@itu.dk
CR [Anonymous], OOPSLA
   [Anonymous], RES DIRECTIONS OBJEC
   [Anonymous], ACM COMPUTING SURVEY
   BARNETT M, 2004, CASSIS 2004
   BURDY L, 2003, ELECT NOTES THEOR CO, V80
   BUTLER M, 2004, 25 YEARS COMMUNICATI, P133
   E. ECMA, 2005, 367 ECMA
   EPPINGER JL, 1991, SERIES DATA MANAGEME
   Fetzer C, 2004, IEEE T SOFTWARE ENG, V30, P547, DOI 10.1109/TSE.2004.35
   GARCIAMOLINA H, 1987, SIGMOD C, P249, DOI DOI 10.1145/38713.38742
   GRAY J, 1993, DATA MANAGEMENT SYST
   Harris T, 2005, SCI COMPUT PROGRAM, V58, P325, DOI 10.1016/j.scico.2005.03.005
   Herlihy M, 2003, P 22 ANN S PRINCIPLE, P92
   HERLIHY M, 1993, ISCA, P289, DOI DOI 10.1145/165123.165164
   LEYMANN F, 1995, BTW, P51
   Leymann F., 1999, Production Workflow: Concepts and Techniques
   LISKOV B, 1988, COMMUN ACM, V31, P300, DOI 10.1145/42392.42399
   LISKOV B, 1987, S OP SYST PRINC, P111
   MEYER B, 1993, COMMUN ACM, V36, P56, DOI 10.1145/162685.162705
   Meyer B., 2000, OBJECT ORIENTED SOFT, V2nd
   MOSS JEB, 1981, 260 MIT LAB COMP SCI
   REUTER A, 1997, ADV T MODELS ARCH
   RODRIGUEZ E, ECOOP 2005, P551
   WACHTER H, 1992, DATABASE T MODELS AD, P219
   WEIKUM G, 1992, DATABASE T MODELS AD, P515
   Weikum G., 2002, Transactional Information Systems
   Welc A, 2004, LECT NOTES COMPUT SC, V3086, P519
NR 27
TC 1
Z9 1
U1 1
U2 1
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 1
PY 2006
VL 63
IS 2
BP 130
EP 146
DI 10.1016/j.scico.2006.05.007
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 103XT
UT WOS:000241921200003
OA hybrid
DA 2024-07-18
ER

PT J
AU Biernacki, D
   Danvy, O
   Shan, CC
AF Biernacki, D
   Danvy, O
   Shan, CC
TI On the static and dynamic extents of delimited continuations
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE delimited continuations; direct style; continuation-passing style (CPS);
   CPS transformation; defunctionalization; control operators; shift and
   reset; control and prompt
ID BACKTRACKING
AB We show that breadth-first traversal exploits the difference between the static delimited-control operator shift (alias S) and the dynamic delimited-control operator control (alias F). For the last 15 years, this difference has been repeatedly mentioned in the literature but it has only been illustrated with one-line toy examples. Breadth-first traversal fills this vacuum.
   We also point out where static delimited continuations naturally give rise to the notion of control stack whereas dynamic delimited continuations can be made to account for a notion of 'control queue'. (c) 2006 Elsevier B.V. All rights reserved.
C1 Univ Aarhus, Dept Comp Sci, BRICS, DK-8200 Aarhus, Denmark.
   Rutgers State Univ, Dept Comp Sci, Piscataway, NJ 08854 USA.
C3 Aarhus University; Rutgers University System; Rutgers University New
   Brunswick
RP Univ Aarhus, Dept Comp Sci, BRICS, Aabogade 34, DK-8200 Aarhus, Denmark.
EM dabi@brics.dk; danvy@brics.dk; ccshan@cs.rutgers.edu
OI Biernacki, Dariusz/0000-0002-1477-4635
CR Abelson H., 1998, Higher Order Symbolic Computation, V11, P7, DOI 10.1023/A:1010051815785
   [Anonymous], TECHNICAL MONOGRAPH
   [Anonymous], 1985, Structure and Interpretation of Computer Programs
   [Anonymous], 1997, The Definition of Standard ML
   Balat V, 2002, LECT NOTES COMPUT SC, V2487, P78
   BALAT V, 2002, THESIS U D DIDEROT P
   Balat Vincent., 2004, Proceedings of the 31st ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, POPL 2004, Venice, Italy, January 14-16, P64, DOI [10.1145/964001.964007, DOI 10.1145/964001.964007]
   BERDINE J, 2004, THESIS U LONDON
   BIERNACKA M, 2005, RS0538 BRICS DAIMI U
   BIERNACKA M, 2006, THESIS U AARHUS AARH
   Biernacka M, 2005, LOG METH COMPUT SCI, V1, DOI 10.2168/LMCS-1(2:5)2005
   Biernacki D, 2005, INFORM PROCESS LETT, V96, P7, DOI 10.1016/j.ipl.2005.04.003
   Biernacki D, 2003, LECT NOTES COMPUT SC, V3018, P143
   BIERNACKI D, 2005, RS0516 BRICS DAIMI U
   BIERNACKI D, 2005, RS0525 BRICS DAIMI U
   BIERNACKI D, 2005, THESIS U AARHUS AARH
   CARLSSON M, 1984, NEW GENERAT COMPUT, V2, P347, DOI 10.1007/BF03037326
   CARTWRIGHT R, 1991, P 18 ANN ACM S PRINC
   CHARNIAK E, 1980, ARTIFICIAL INTELLIGE
   Clinger W. D., 1985, Algebraic Methods in Semantics, P237
   Danvy O, 2002, NEW GENERAT COMPUT, V20, P53, DOI 10.1007/BF03037259
   DANVY O, 1990, PROCEEDINGS OF THE 1990 ACM CONFERENCE ON LISP AND FUNCTIONAL PROGRAMMING, P151, DOI 10.1145/91556.91622
   DANVY O, 1989, BIGRE J PUTTING SCHE, V65, P10
   Danvy Olivier, 1989, 8912 DIKU U COP COMP
   Danvy Olivier., 1992, MATH STRUCT COMP SCI, V2, P361, DOI DOI 10.1017/S0960129500001535
   Danvy Olivier, 2004, P 4 ACM SIGPLAN WORK, P13
   Danvy Olivier, 2001, Proceedings of the 3rd ACM SIGPLAN International Conference on Principles and Practice of Declarative Programming. PPDP'01, P162, DOI DOI 10.1145/773184.773202
   Danvy Olivier, 1988, P WORKSH IMPL LAZ FU, P445
   Duba BruceF., 1991, J FUNCT PROGRAM, P163, DOI DOI 10.1145/99583.99608
   DYBVIG RK, 2005, 615 IND U COMP SCI D
   Felleisen M., 1988, Proceedings of the 1988 ACM Conference on LISP and Functional Programming, P52, DOI 10.1145/62678.62684
   FELLEISEN M, 1988, P 15 ANN ACM S PRINC, P180, DOI DOI 10.1145/73560.73576
   FELLEISEN M, 1987, 216 IND U COMP SCI D
   FELLEISEN M, 1987, THESIS INDIANA U BLO
   Felleisen Matthias, 1986, P IFIP TC 2WG22 WORK
   FERRANTE J, 1988, P 15 ANN ACM S PRINC
   FILINSKI A., 1996, CMUCS96119
   Filinski Andrzej, 1994, P 21 ANN ACM S PRINC, P446, DOI DOI 10.1145/174675.178047
   Friedman Daniel P., 1976, 3RD INT C AUT LANG P, P257
   FUHRMANN C, 2000, THESIS U EDINBURGH E
   Griffin T., 1990, P 17 ANN ACM S PRINC, DOI 10.1145/96709.96714
   Gunter Carl A., 1995, Proceedings of the Seventh International Conference on Functional Programming Languages and Computer Architecture. FPCA '95, P12, DOI DOI 10.1145/224164.224173
   HATCLIFF J, 1994, THESIS KANSAS STATE
   Henderson Peter, 1976, P 3 ACM SIGACT SIGPL, P95, DOI DOI 10.1145/800168.811543
   Hieb Robert, 1993, LISP SYMBOLIC COMPUT, V5, P295
   Hinze R, 2000, ACM SIGPLAN NOTICES, V35, P186, DOI 10.1145/357766.351258
   JOHNSON GF, 1987, SIGPLAN NOTICES, V22, P165, DOI 10.1145/960114.29668
   JOHNSON GF, 1988, P 15 ANN ACM S PRINC, P158
   Kiselyov O, 2005, ACM SIGPLAN NOTICES, V40, P192, DOI 10.1145/1090189.1086390
   KISELYOV O, 2005, 611 IND U COMP SCI D
   LAIRD J, 1998, THESIS U EDINBURGH E
   Landin P. J., 1965, GEN JUMPS LABELS
   LAWALL JL, 1994, THESIS INDIANA U BLO
   MCCARTHY J, 1977, SIGART NEWSLETTER, V61
   MELLISH C, 1984, IMPLEMENTATIONS PROL, P147
   MOREAU L, 1994, LECT NOTES COMPUTER, V844, P182
   MURTHY CR, 1990, THESIS CORNELL U ITH
   NANEVSKI A, 2004, CMUCS04151 SCH COMP
   NIELSEN LR, 2001, DS017 BRICS U AARH B
   Okasaki C, 2000, ACM SIGPLAN NOTICES, V35, P131, DOI 10.1145/357766.351253
   Plotkin G. D., 1975, Theoretical Computer Science, V1, P125, DOI 10.1016/0304-3975(75)90017-1
   POLAKOW J, 2001, CMUCS01152 SCH COMP
   QUEINNEC C, 1991, P 18 ANN ACM S PRINC, P174, DOI DOI 10.1145/99583.99610
   QUEINNEC C, 1992, BIGRE J, V81, P20
   Reynolds John C., 1972, ACM 72, V2, P717, DOI DOI 10.1023/A:1010027404223
   SABRY A, 1994, 94242 RIC U COMP SCI
   Sandewall E., 1999, Higher-Order and Symbolic Computation, V12, P105, DOI 10.1023/A:1010072901408
   Shan C.-c., 2005, THESIS HARVARD U
   SHEN CC, 2004, P 2004 ACM SIGPLAN W
   SITARAM D, 1990, PROCEEDINGS OF THE 1990 ACM CONFERENCE ON LISP AND FUNCTIONAL PROGRAMMING, P161, DOI 10.1145/91556.91626
   SITARAM D, 1994, THESIS RICE U HOUSTO
   SPIVEY M, 2003, FUN PROGRAMMING, P177
   STEELE GL, 1978, AITR474 MIT ART INT
   Sussman G., 1975, 349 AI MIT
   Thielecke H., 1998, Higher-Order and Symbolic Computation, V11, P117, DOI 10.1023/A:1010060315625
   Thielecke H., 1997, ECSLFCS97376 U ED
   WADLER P, 1985, LECT NOTES COMPUT SC, V201, P113
   WALDER P, 2000, SIGPLAN NOTICES, V35
   WAND M, 1980, J ACM, V27, P164, DOI 10.1145/322169.322183
   WAND M, 1990, P 1990 ACM C LISP FU
   Wand Mitchell, 1985, LECT NOTES COMPUTER, P219, DOI 10.1007/3-540-15648-8_17
NR 81
TC 18
Z9 20
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAY
PY 2006
VL 60
IS 3
BP 274
EP 296
DI 10.1016/j.scico.2006.01.002
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 037QA
UT WOS:000237160600003
DA 2024-07-18
ER

PT J
AU Cunningham, HC
   Liu, Y
   Zhang, CH
AF Cunningham, HC
   Liu, Y
   Zhang, CH
TI Using classic problems to teach Java framework design
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT Academic Emergency Medicine Consensus Conference on Ethical Conduct of
   Resuscitation Research
CY MAY 21, 2005
CL New York, NY
DE software family; software framework; hot spot; design pattern; divide
   and conquer; tree traversal
AB All programmers should understand the concept of software families and know the techniques for constructing them. This paper suggests that classic problems, such as well-known algorithms and data structures, are good sources for examples to use in a study of software family design. The paper describes two case studies that can be used to introduce students in a Java software design course to the construction of software families using software frameworks. The first is the family of programs that use the well-known divide and conquer algorithmic strategy. The second is the family of programs that carry out traversals of binary trees. (c) 2005 Elsevier B.V. All rights reserved.
C1 Univ Mississippi, Dept Comp & Informat Sci, University, MS 38677 USA.
   NW Vista Coll, Dept Comp & Informat Syst, San Antonio, TX 78251 USA.
C3 University of Mississippi
RP Univ Mississippi, Dept Comp & Informat Sci, 201 Weir Hall, University, MS 38677 USA.
EM cunningha@cs.olemiss.edu
RI Zhang, Chaohai/JDM-5535-2023
OI Zhang, Chaohai/0000-0003-0129-1252
CR Bass Len, 2012, SEI S SOFTW
   Budd TA., 2002, An Introduction to Object-Oriented Programming
   CHRISTENSEN HB, 2004, P SIGCSE C INN TECHN, P142
   CUNNINGHAM HC, 2004, P INT C PRINC PRACT, P40
   CUNNINGHAM HC, 2004, P SOFTW ENG RES PRAC, P712
   CUNNINGHAM HC, 2005, J COMPUTING SCI COLL, V20, P74
   CUNNINGHAM HC, 2004, UMCIS200422
   Fontoura M., 2002, The UML Profile for Framework Architectures
   Gamma E., 1994, Design patterns: Elements of reusable object-oriented software
   Gannod G. C., 2000, Proceedings of the 2000 International Conference on Software Engineering. ICSE 2000 the New Millennium, P548, DOI 10.1109/ICSE.2000.870447
   Goodrich M.T., 2004, Data Structures and Algorithms in C++
   JIA X, 2000, OBJECT ORIENTED SOFT
   Nguyen D, 2001, SIGCSE BULL, V33, P263, DOI 10.1145/366413.364597
   NGUYEN D, 2000, P ACM SIGCSE TECHN S, P21
   NGUYEN D, 2002, P ACM SIGCSE TECHN S, P126
   Nguyen DZ, 1999, PROCEEDINGS OF THE THIRTIETH SIGCSE TECHNICAL SYMPOSIUM ON COMPUTER SCIENCE EDUCATION, P87, DOI 10.1145/384266.299693
   Parnas D. L., 1976, IEEE Transactions on Software Engineering, VSe-2, P1, DOI 10.1109/TSE.1976.233797
   PARNAS DL, 2001, SOFTWARE FUNDAMENTAL, P137
   Roberts D, 1998, SOFTW PATT S, P471
   Schmid H. A., 1999, BUILDING APPL FRAMEW, P353
   Schmid HA, 1997, COMMUN ACM, V40, P48, DOI 10.1145/262793.262803
   TADEPALLI P, 2005, P C APPL RES INF TEC, P95
   TENENBERG J, 2003, P 34 SIGCSE TECHN S, P210
   Weiss D.M., 1999, Software Product-Line Engineering-A Family-Based Software Development Process
NR 24
TC 7
Z9 7
U1 1
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN
PY 2006
VL 59
IS 1-2
BP 147
EP 169
DI 10.1016/j.scico.2005.07.009
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 993HZ
UT WOS:000233946500010
DA 2024-07-18
ER

PT J
AU Latendresse, M
   Feeley, M
AF Latendresse, M
   Feeley, M
TI Generation of fast interpreters for Huffman compressed bytecode
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 1st Workshop on Interpreters, Virtual Machines and Emulators (IVME 03)
CY JUN 12, 2003
CL San Diego, CA
AB Embedded systems often have severe memory constraints requiring careful encoding of programs. For example, smart cards have on the order of IK of RAM, 16K of non-volatile memory, and 24K of ROM. A virtual machine can be an effective approach to obtain compact programs but instructions are commonly encoded using one byte for the opcode and multiple bytes for the operands, which can be wasteful and thus limit the size of programs runnable on embedded systems. Our approach uses canonical Huffman codes to generate compact opcodes with customsized operand fields and with a virtual machine that directly executes this compact code. We present techniques to automatically generate the new instruction formats and the decoder. In effect, this automatically creates both an instruction set for a customized virtual machine and an implementation of that machine. We demonstrate that, without prior decompression, fast decoding of these virtual compressed instructions is feasible. Through experiments on Scheme and Java, we demonstrate the speed of these decoders. Java benchmarks show an average execution slowdown of 9%. The reductions in size highly depend on the original bytecode and the training samples, but typically vary from 40% to 60%. (c) 2005 Elsevier B.V. All rights reserved.
C1 USN, Sci & Technol Advancement Team, FNMOC, Monterey, CA 93940 USA.
   Univ Montreal, Dept Informat & Rech Operat, Montreal, PQ H3C 3J7, Canada.
C3 United States Department of Defense; United States Navy; Universite de
   Montreal
RP USN, Sci & Technol Advancement Team, FNMOC, 7 Grace Hopper, Monterey, CA 93940 USA.
EM mario.latendresse.ctr.ca@metnet.navy.mil; feeley@IRO.UMontreal.CA
RI Latendresse, Mario/C-9192-2014
OI Latendresse, Mario/0000-0002-6292-0158
CR BENES M, 1998, P INT S ADV RES AS C
   BENNETT JP, 1989, COMPUT J, V32, P370, DOI 10.1093/comjnl/32.4.370
   Choueka Y., 1985, Proc. of the 8th ACM-SIGIR Conference, P122
   Clausen LR, 2000, ACM T PROGR LANG SYS, V22, P471, DOI 10.1145/353926.353933
   Cooper KD, 1999, ACM SIGPLAN NOTICES, V34, P1, DOI 10.1145/315253.314414
   COOPER KD, 1999, SIGPLAN C PROGR LANG, P139
   Debray S., 2002, PLDI 02 P ACM SIGPLA, P95
   EVANS WS, 2001, PLDI 01 P ACM SIGPLA, P148
   GREGG D, 2002, 18 EUR C VIENN AUSTR, P24
   Hoogerbrugge J, 1999, SOFTWARE PRACT EXPER, V29, P1005, DOI 10.1002/(SICI)1097-024X(199909)29:11<1005::AID-SPE270>3.0.CO;2-F
   HUFFMAN DA, 1952, P IRE, V40, P1098, DOI 10.1109/JRPROC.1952.273898
   Kemp TM, 1998, IBM J RES DEV, V42, P807, DOI 10.1147/rd.426.0807
   Kissell K., 1997, MIPS16 HIGH DENSITY
   KOZUCH M, 1994, PR IEEE COMP DESIGN, P270, DOI 10.1109/ICCD.1994.331903
   LATENDRESSE M, 2002, DIRO1219 U MONTR
   LATENDRESSE M, 2000, P WORKSH SCHEM FUNCT
   Lekatsas H, 1998, 1998 DESIGN AUTOMATION CONFERENCE, PROCEEDINGS, P516, DOI 10.1109/DAC.1998.724526
   LUCCO S, 2000, P ACM SIGPLAN 00 C P, P27
   Moffat A, 1997, IEEE T COMMUN, V45, P1200, DOI 10.1109/26.634683
   Muller G, 1997, PROCEEDINGS OF THE THIRD USENIX CONFERENCE ON OBJECT-ORIENTED TECHNOLOGIES AND SYSTEMS (COOTS), P1
   Patterson DavidA., 1996, Computer architecture: a quantitative approach, V2nd
   PROEBSTING TA, 1995, PRINCIPLES PROGRAMMI, P322
   PUGH W, 1999, P 1999 ACM SIGPLAN C, P247
   RAYSIDE D, 1999, CASCON, P1
   SCHWARTZ ES, 1964, COMMUN ACM, V7, P166, DOI 10.1145/363958.363991
   Turley J. L., 1995, MICROPROCESSOR REPOR, V9, P1
   WILNER W, 1972, AFIPS P FJCC, V41, P579
   [No title captured]
   1999, JAVA BYTEMARK BENCHM
NR 29
TC 4
Z9 4
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP
PY 2005
VL 57
IS 3
BP 295
EP 317
DI 10.1016/j.scico.2004.07.005
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 957YP
UT WOS:000231409800004
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Nishimura, S
   Nakano, K
AF Nishimura, S
   Nakano, K
TI XML stream transformer generation through program composition and
   dependency analysis
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
AB XML stream transformation, which sequentially processes the input XML data on the fly, makes it possible to process large sized data within a limited amount of memory. Though being efficient in memory-use, stream transformation requires stateful programming, which is error-prone and hard to manage.
   This paper proposes a scheme for generating XML stream transformers. Given an attribute grammar definition of transformation over an XML tree structure, we systematically derive a stream transformer in two steps. First, an attribute grammar definition of the XML stream transformation is inferred by applying a program composition method. Second, a finite state transition machine is constructed through a dependency analysis. Due to the closure property of the program composition method, our scheme also allows modular construction of XML stream transformers.
   We have implemented a prototype XML stream transformer generator, called altSAX. The experimental results show that the generated transformers are efficient in memory consumption as well as in execution time. (C) 2004 Elsevier B.V. All rights reserved.
C1 Kyoto Univ, Fac Sci, Dept Math, Kyoto 6068502, Japan.
   Univ Tokyo, Dept Math Engn & Informat Phys, Tokyo 1138656, Japan.
C3 Kyoto University; University of Tokyo
RP Kyoto Univ, Fac Sci, Dept Math, Kyoto 6068502, Japan.
EM susumu@math.kyoto-u.ac.jp; ksk@mist.i.u-tokyo.ac.jp
RI Nakano, Keisuke/GNH-5880-2022; Nakano, Keisuke/AIC-9113-2022
OI Nakano, Keisuke/0000-0003-1955-4225; 
CR Aho A.V., 1986, COMPILERS PRINCIPLES
   Altinel Mehmet., 2000, VLDB, P53
   [Anonymous], 1984, METHODS TOOLS COMPIL
   [Anonymous], 1984, The Lambda Calculus: Its Syntax and Semantics
   BOYLAND J, 1994, P 21 ACM SIGPLAN SIG, P375
   Correnson L, 1999, LECT NOTES COMPUT SC, V1702, P360
   Diao YL, 2002, PROC INT CONF DATA, P341, DOI 10.1109/ICDE.2002.994748
   Feng A., 1993, Electronic Publishing: Origination, Dissemination and Design, V6, P361
   GANZINGER H, 1984, SIGPLAN NOTICES, V19, P157, DOI 10.1145/502949.502890
   Green TJ, 2003, LECT NOTES COMPUT SC, V2572, P173
   Hopcroft JE., 2008, Introduction to automata theory, languages, and computation
   JOHNSSON T, 1987, LECT NOTES COMPUT SC, V274, P154
   Knuth D. E., 1968, Mathematical Systems Theory, V2, P127, DOI 10.1007/BF01692511
   Ludascher B., 2002, Proceedings of the Twenty-eighth International Conference on Very Large Data Bases, P227
   NAKANO K, XTISP XML TRANSFORMA
   NAKANO K, 2004, IN PRESS P 2 AS S PR
   NAKANO K, 2004, METR200401 U TOK DEP
   Nakano K., 2001, ELECT NOTES THEORETI, V44
   NISHIMURA S, 2003, LNCS, V2895
   NISHIMURA S, 2004, IN PRESS P ACM SIGPL
   Olteanu D, 2003, PROC INT CONF DATA, P702, DOI 10.1109/ICDE.2003.1260841
   Olteanu D, 2002, LECT NOTES COMPUT SC, V2490, P109
   SEGOUFIN L, 2002, VALIDATING STREAMING, P53
   VOIGTLANDER J, 2002, ASIAN S PART EV SEM, P126
   VOIGTLANDER J, 2001, THESIS DRESDEN U TEC
NR 25
TC 6
Z9 8
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB
PY 2005
VL 54
IS 2-3
BP 257
EP 290
DI 10.1016/j.scico.2004.07.001
PG 34
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 874ZC
UT WOS:000225388200003
OA Bronze
DA 2024-07-18
ER

PT J
AU Zhang, HY
   Jarzabek, S
AF Zhang, HY
   Jarzabek, S
TI XVCL: a mechanism for handling variants in software product lines
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE variability mechanism; XVCL; frame technology; software product lines
AB Software reuse focused on product lines has emerged as one of the promising ways to increase software productivity and quality. XVCL (XML-based Variant Configuration Language) is a variability mechanism that we developed for handling variants in software product lines. We apply XVCL to develop product line assets (including the domain model, product line architecture and generic components) as a set of x-frames that are capable of accommodating both commonality and variability in a domain. Specific systems, members of a product line, can be constructed by adapting and composing x-frames. In this paper, we illustrate our approach using examples from our product line project on the Computer Aided Dispatch (CAD) domain. (C) 2004 Elsevier B.V. All rights reserved.
C1 RMIT Univ, Sch Comp Sci & Informat Technol, Melbourne, Vic 3001, Australia.
   Natl Univ Singapore, Sch Comp, Singapore 117543, Singapore.
C3 Royal Melbourne Institute of Technology (RMIT); National University of
   Singapore
RP RMIT Univ, Sch Comp Sci & Informat Technol, Melbourne, Vic 3001, Australia.
EM hongyu@cs.rmit.edu.au; stan@comp.nus.edu.sg
RI zhang, hongyu/ABC-3702-2021
OI zhang, hongyu/0000-0002-3063-9425
CR [Anonymous], 2000, Generative programming: methods, tools, and applications
   Bassett P.G., 1997, FRAMING SOFTWARE REU, V1st
   BATORY D, 1998, PRODUCT LINE ARCHITE
   Bosch J., 2000, Design and Use of Software Architectures: Adopting and Evolving a Product-Line Approach
   Gamma E., 1994, Design patterns: Elements of reusable object-oriented software
   Jacobson I., 1997, Software Reuse: Architecture, Process and Organization for Business Success
   Jarzabek S, 2001, FIFTH IEEE INTERNATIONAL SYMPOSIUM ON REQUIREMENTS ENGINEERING, PROCEEDINGS, P166
   Jarzabek S, 2003, PROC INT CONF SOFTW, P810, DOI 10.1109/ICSE.2003.1201298
   Kang Kyo C, 1990, Technical Report
   Kiczales G, 1997, LECT NOTES COMPUT SC, V1241, P220, DOI 10.1007/BFb0053381
   MINSKY M., 1974, FRAMEWORK REPRESENTI
   Musser D.R., 1996, STL tutorial and reference guide
   Northrop L., 2001, SOFTWARE PRODUCT LIN
   *OMG XML, 1999, MET INT XMI 1 1 RTF
   Parnas D. L., 1976, IEEE Transactions on Software Engineering, VSe-2, P1, DOI 10.1109/TSE.1976.233797
   Rumbaugh James, 1999, The unified modeling language reference manual
   Shaw M., 1996, SOFTWARE ARCHITECTUR
   SOE MS, 2002, P 14 INT C SOFTW ENG, P341
   Tarr P., 1999, Proceedings of the 1999 International Conference on Software Engineering (IEEE Cat. No.99CB37002), P107, DOI 10.1109/ICSE.1999.841000
   Tracz W., 1995, SIGSOFT Software Engineering Notes, V20, P49, DOI 10.1145/219308.219318
   ZHANG H, 2001, LECT NOTES COMPUTER, V2186, P36
   Zhang HY, 2003, LECT NOTES COMPUT SC, V2681, P681
NR 22
TC 20
Z9 23
U1 0
U2 5
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC
PY 2004
VL 53
IS 3
BP 381
EP 407
DI 10.1016/j.scico.2003.04.007
PG 27
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 863UY
UT WOS:000224590100007
DA 2024-07-18
ER

PT J
AU Bonifaci, V
   Demetrescu, C
   Finocchi, I
   Laura, L
AF Bonifaci, V
   Demetrescu, C
   Finocchi, I
   Laura, L
TI A Java-based system for building animated presentations over the Web
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE animated presentations; software visualization; e-leaming; Java
AB We describe Leonardo Web, a collection of tools for building animated presentations that can be useful for teaching, disseminating, and e-learning. Presentations can be created via the combined use of a visual editor and a Java library. The library allows it to generate animations in a batch fashion directly from Java code according to an imperative specification style. Batch-generated animations can then be refined and customized using the editor. Presentations can be finally viewed with a simple Java player, which ships both as a stand-alone application for off-line deployment and as a Java applet embedded in a Web page. The player supports step-by-step and continuous execution, reversibility, speed selection, and smooth animation. (C) 2004 Published by Elsevier B.V.
C1 Univ Roma La Sapienza, Dipartimento Informat & Sistemist, I-00198 Rome, Italy.
   Univ Roma Tor Vergata, Dipartimento Informat Sistemi & Produz, I-00133 Rome, Italy.
C3 Sapienza University Rome; University of Rome Tor Vergata
RP Univ Roma La Sapienza, Dipartimento Informat & Sistemist, Via Salaria 113, I-00198 Rome, Italy.
EM vincenzo.bonifaci@dis.uniromal.it; demetres@dis.uniroma1.it;
   finocchi@disp.uniroma2.it; laura@dis.uniroma1.it
RI Bonifaci, Vincenzo/H-2856-2012; Laura, Luigi/A-8970-2010; Finocchi,
   Irene/G-7404-2012; Demetrescu, Camil/H-9904-2012
OI Bonifaci, Vincenzo/0000-0001-9038-6901; Laura,
   Luigi/0000-0001-6880-8477; FINOCCHI, Irene/0000-0002-6394-6798
CR BAKER RS, 1999, SIGCSE B, V31
   Boroni C. M., 1998, SIGCSE Bulletin, V30, P145, DOI 10.1145/274790.273181
   BROWN MH, 1992, COMPUTER, V25, P52, DOI 10.1109/2.179117
   *CAL STAT U DEP CO, 2000, ALGORITHMA
   Cormen Thomas H., 2001, INTRO ALGORITHMS
   DEMETRESCU C, 2004, ALGORITMI STRUTTURE
   DEMETRESCU C, 2000, LNCS, V1982, P147
   DIEHL S, 2001, LNCS, V2269
   Domingue J, 1998, J VISUAL LANG COMPUT, V9, P485, DOI 10.1006/jvlc.1998.0097
   FINOCCHI I, 2002, P 2 PROGR VIS WORKSH, P93
   Haajanen J, 1997, IEEE VISLANG, P356, DOI 10.1109/VL.1997.626605
   HIPKE CA, 1999, P 7 INT C CENTR EUR, P110
   Lawrence A. W., 1994, Proceedings. IEEE Symposium on Visual Languages (Cat. No.94TH8010), P48, DOI 10.1109/VL.1994.363641
   LAWRENCE AW, 1993, THESIS GEORGIA I TEC
   NAPS T, 1996, ACM SIGCSE B, V28, P66
   Palmiter S., 1991, P SIGCHI C HUMAN FAC, P257
   PIERSON WC, 1998, P 29 SIGCSE TECHN S, P267
   RIEBER LP, 1990, J COMPUT-BASE INSTR, V17, P46
   ROSS RJ, 2001, LNCS, V2269, P269
   Rössling G, 2000, SIGCSE BULL, V32, P37, DOI 10.1145/353519.343069
   ROSSLING G, COLLECTION ANIMATION
   SANCHEZ ADD, 1996, P 3 INT C COMP AID L
   STASKO J, 1997, SOFTWARE VISUALIZATI
   Stasko J.T., 1997, Proceedings of the ACM Technical Symposium on Computer Science Education, P25
   STASKO JT, 1990, COMPUTER, V23, P27, DOI [10.1109/2.58216, 10.1145/379088.1046618]
   STASKO JT, ALGORITHM ANIMATION
   Syrjakow M, 2000, PROCEEDINGS OF THE 2000 WINTER SIMULATION CONFERENCE, VOLS 1 AND 2, P1651, DOI 10.1109/WSC.2000.899152
NR 27
TC 3
Z9 3
U1 1
U2 7
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT
PY 2004
VL 53
IS 1
BP 37
EP 49
DI 10.1016/j.scico.2004.02.004
PG 13
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 849KT
UT WOS:000223538200004
OA Bronze, Green Published
DA 2024-07-18
ER

PT J
AU Liu, ZH
   Yu, H
   Lim, EP
   Yin, M
   Goh, DHL
   Theng, YL
   Ng, WK
AF Liu, ZH
   Yu, H
   Lim, EP
   Yin, M
   Goh, DHL
   Theng, YL
   Ng, WK
TI A Java-based digital library portal for geography education
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE digital libraries; geography education; metadata management
AB G-Portal is a Java-based digital library system for managing the metadata of geography related resources on the Web. In addition to providing a flexible repository subsystem to accommodate metadata of different formats using XML and XML Schemas, G-Portal organizes metadata into projects and layers, and supports an integrated and synchronized classification and map-based interfaces over the stored metadata. G-Portal also includes a classification subsystem that creates category structures and classifies metadata resources into categories based on user-specified classification schemas. Furthermore, G-Portal users can annotate resources and make their annotations available to others. In this paper, we describe the design and implementation of G-Portal and elaborate how Java is used to implement its features. G-Portal has been designed to be modular and some of the modules can be used as stand-alone tools. In this paper, we use UML notation to describe the detailed design of G-Portal and highlight some of the design decisions. (C) 2004 Elsevier B.V. All rights reserved.
C1 Nanyang Technol Univ, Sch Comp Engn, Ctr Adv Informat Syst, Singapore 639798, Singapore.
   Nanyang Technol Univ, Sch Commun & Informat, Singapore 639798, Singapore.
C3 Nanyang Technological University; Nanyang Technological University
RP Nanyang Technol Univ, Sch Comp Engn, Ctr Adv Informat Syst, Singapore 639798, Singapore.
EM liuzh@pmail.ntu.edu.sg; ashyu@ntu.edu.sg; liuzh@pmail.ntu.edu.sg;
   asmyin@ntu.edu.sg; ashlgoh@ntu.edu.sg; tyltheng@ntu.edu.sg;
   awkng@ntu.edu.sg
RI Goh, Dion H/W-4444-2017; Lim, Ee-Peng/E-8562-2012; Ng, Wee
   Keong/A-3724-2011
OI Lim, Ee-Peng/0000-0003-0065-8665; Ng, Wee Keong/0000-0001-7106-2768
CR BERNERSLEE T, 2002, ERCIM NEWS       OCT
   Cha SK, 2000, PROCEEDINGS OF THE FIRST INTERNATIONAL CONFERENCE ON WEB INFORMATION SYSTEMS ENGINEERING, VOL I, P34, DOI 10.1109/WISE.2000.882372
   CHUA LH, 2002, P 2 ACM IEEE JOINT C, P115
   COLEMAN A, 2001, P 5 EUR C RES ADV TE, P251
   GAMMA E, 1995, ADDISONWESLEY PROFES
   Lee F, 2001, INFORM SYST, V26, P75, DOI 10.1016/S0306-4379(01)00011-4
   LETOURNEAU F, 1997, D LIB MAGAZINE   MAR
   Lim E.-P., 2002, JCDL 2002. Proceedings of the Second ACM/IEEE-CS Joint Conference on Digital Libraries, P351, DOI 10.1145/544220.544307
   LIM EP, 2002, P DIG LIB IT OPP CHA
   LIU Z, 2002, P 5 INT C AS DIG LIB, P287
   ORENDORF J, 1996, P 1 ACM INT C DIG LI, P83
   PROULX MJ, 1996, D LIB MAGAZINE   DEC
   SMITH T, 2003, P 7 EUR C RES ADV TE, P300
   Smith TR, 1996, COMPUTER, V29, P54, DOI 10.1109/2.493457
   Sumner T., 2001, P 1 ACMIEE CS JOINT, P416
   ZHU B, 1999, P 4 ACM C DIG LIB DL, P260
NR 16
TC 6
Z9 7
U1 1
U2 13
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT
PY 2004
VL 53
IS 1
BP 87
EP 105
DI 10.1016/j.scico.2004.02.007
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 849KT
UT WOS:000223538200007
OA Green Accepted, Bronze, Green Published
DA 2024-07-18
ER

PT J
AU Gorrieri, R
   Martinelli, F
AF Gorrieri, R
   Martinelli, F
TI A simple framework for real-time cryptographic protocol analysis with
   compositional proof rules
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 12th European Symposium on Programming (ESOP 2003)
CY APR 05-13, 2003
CL Warsaw, POLAND
DE real-time process algebra; crytographic protocols; non-interference
AB A real-time process algebra, enhanced with specific constructs for handling cryptographic primitives, is proposed to model cryptographic protocols in a simple way. We show that some security properties, such as authentication and secrecy, can be re-formulated in this timed setting. Moreover, we show that they can be seen as suitable instances of a general information flow-like scheme, called timed generalized non-deducibility on compositions (tGNDC), parametric w.r.t. the observational semantics of interest. We show that, when considering timed trace semantics, there exists a most powerful hostile environment (or enemy) that can try to compromise the protocol. Moreover, we present a couple of compositionality results for tGNDC, one of which is time dependent, and show their usefulness by means of a case study. (C) 2004 Elsevier B.V. All rights reserved.
C1 Univ Bologna, Dipartimento Sci Informaz, I-40127 Bologna, Italy.
   CNR, Ist Informat & Telemat, I-56100 Pisa, Italy.
C3 University of Bologna; Consiglio Nazionale delle Ricerche (CNR);
   Istituto di Informatica e Telematica (IIT-CNR)
RP Gorrieri, R (corresponding author), Univ Bologna, Dipartimento Sci Informaz, Mura Anteo Zamboni 7, I-40127 Bologna, Italy.
EM gorrieri@cs.unibo.it; fabio.martinelli@iit.cnr.it
OI Gorrieri, Roberto/0000-0001-5502-0584
CR [Anonymous], 1995, J COMPUT SECUR, DOI [DOI 10.3233/JCS-1994/1995-3103, 10.3233/JCS-1994/1995-3103]
   BOREALE M, 2002, LECT NOTES COMPUTER, V2303
   BROADFOOT P, 2002, LECT NOTES COMPUTER, V2502
   CLARK J, SURVEY AUTENTICATION
   DEFRANCESCO N, 2003, P 18 ACM SAC ACM PRE
   Focardi R, 2003, THEOR COMPUT SCI, V291, P285, DOI 10.1016/S0304-3975(02)00365-1
   Focardi R, 2003, IEEE J SEL AREA COMM, V21, P20, DOI 10.1109/JSAC.2002.806122
   FOCARDI R, 2000, LECT NOTES COMPUTER, V1853
   FOCARDI R, 1999, LECT NOTES COMPUTER, V1708
   FOCARDI R, 2000, ELECT NOTES THEORET, V32
   Gennaro R, 2001, INFORM COMPUT, V165, P100, DOI 10.1006/inco.2000.2916
   GORRIERI R, 2003, P ACSD 03 LISB
   GORRIERI R, 2003, LECT NOTES COMPUTER, V2618
   GORRIERI R, 2003, LECT NOTES COMPUTER, V2884
   GROOTE JF, 1993, THEOR COMPUT SCI, V118, P263, DOI 10.1016/0304-3975(93)90111-6
   GUTTMAN J, 2000, P CSFW 00 NEW YORK
   LOWE G, 1997, P CSFW 97 NEW YORK
   MARTINELLI F, 2003, LECT NOTES COMPUTER, V2841
   Milner R., 1989, Communication and concurrency
   Perrig A, 2002, WIREL NETW, V8, P521, DOI 10.1023/A:1016598314198
   PERRING A, 2000, P IEEE S P 00 NEW YO
   Ryan P.Y. A., 2001, MODELLING ANAL SECUR
   SCHNEIDER S, 2000, LECT NOTES COMPUTER, V1895
   ULIDOWSKI I, 1997, LECT NOTES COMPUTER, V1349
NR 24
TC 16
Z9 16
U1 0
U2 0
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR
PY 2004
VL 50
IS 1-3
BP 23
EP 49
DI 10.1016/j.scico.2004.01.001
PG 27
WC Computer Science, Software Engineering
WE Conference Proceedings Citation Index - Science (CPCI-S); Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 804AH
UT WOS:000220271100003
DA 2024-07-18
ER

PT J
AU Comini, M
   Gori, R
   Levi, G
   Volpe, P
AF Comini, M
   Gori, R
   Levi, G
   Volpe, P
TI Abstract interpretation based verification of logic programs
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
ID DIAGNOSIS
AB This paper is an overview of our results on the application of abstract interpretation concepts to various problems related to the verification of logic programs. These include the systematic design of semantics modeling various proof methods and the characterization of assertions as abstract domains. We derive an assertion based verification method and we show two instances based on different assertion languages: a decidable assertion language and CLP used as an assertion language. (C) 2003 Elsevier B.V. All rights reserved.
C1 Univ Pisa, Dipartimento Informat, I-25100 Pisa, Italy.
   Univ Udine, Dipartimento Matemat & Informat, I-33100 Udine, Italy.
C3 University of Pisa; University of Udine
RP Univ Pisa, Dipartimento Informat, Via Buonarroti 2, I-25100 Pisa, Italy.
EM comini@dimi.uniud.it; gori@di.unipi.it; levi@di.unipi.it;
   volpep@di.unipi.it
RI Comini, Marco/G-8074-2014
OI Comini, Marco/0000-0002-8069-3411
CR Apt K. R., 1994, Formal Aspects of Computing, V6, P743, DOI 10.1007/BF01213601
   Bossi A., 1989, LECT NOTES COMPUT SC, V352, P96
   Bueno F., 1997, PROC 3 INT WS AUTOMA, P155
   Clark K., 1979, 7959 DOC IMP COLL
   Codish M, 2000, THEOR COMPUT SCI, V238, P131, DOI 10.1016/S0304-3975(98)00122-4
   Comini M, 1999, J LOGIC PROGRAM, V39, P43, DOI 10.1016/S0743-1066(98)10033-X
   COMINI M, 1998, THESIS U PISA PISA
   CORTESI A, 1996, LECT NOTES COMPUT SC, V1207, P38
   Cousot P., 1992, Journal of Logic and Computation, V2, P511, DOI 10.1093/logcom/2.4.511
   COUSOT P, 1992, P POPL 92, P83, DOI DOI 10.1145/143165.143184
   Cousot P., 1979, 6 ACM S PRINCIPLES P, P269, DOI DOI 10.1145/567752.567778
   COUSOT P, 1997, ELECT NOTES THEORETI, V6
   Cousot Patrick, 1977, P 4 ACM S PRINC PROG, P238, DOI [10.1145/512950.512973, DOI 10.1145/512950.512973]
   DERANSART P, 1993, THEOR COMPUT SCI, V118, P99, DOI 10.1016/0304-3975(93)90107-5
   DRABENT W, 1988, J THEORETICAL COMPUT, V59, P133
   DRABENT W, 1997, ILPS 97 PORT JEFF LO
   DRABENT W, 1989, METAPROGRAMMING LOGI, P383
   FERRAND G, 1987, J LOGIC PROGRAM, V4, P177, DOI 10.1016/0743-1066(87)90001-X
   File G, 1996, ACM COMPUT SURV, V28, P333, DOI 10.1145/234528.234742
   FIORAVANTI F, 2000, ELECT NOTES THEORETI, V30
   FIORAVANTI F, 2000, LOPSTR 2000 10 INT W, P24
   GIACOBAZZI R, 1997, LECT NOTES COMPUTER, V1292, P175
   GIACOBAZZI R, 1995, P 1995 INT S LOG PRO
   GIACOBAZZI R, 1997, LECT NOTES COMPUTER
   GIACOBAZZI R, 1996, LECT NOTES COMPUTER, V1046, P503
   LAGOON V, SOURCES TOOL COMPUTI
   LECHARLIER B, 1997, LECT NOTES COMPUTER, V1345, P225
   LEVI G, 1998, LECT NOTES COMPUTER, V1490, P102
   LICHTENSTEIN Y, 1988, P 5 INT C S LOG PROG, P512
   MARCHIORI E, 1996, LNCS, V1139, P209
   MARCHIORI E, 1994, LECT NOTES COMPUTER, V850, P287
   Pettorossi A, 1999, J LOGIC PROGRAM, V41, P197, DOI 10.1016/S0743-1066(99)00029-1
   Pettorossi A., 1998, Handbook of Logic in Artificial Intelligence and Logic Programming, V5, P697
   PETTOROSSI A, MAP TOOL PROGRAM TRA
   PUEBLA G, 2000, LECT NOTES COMPUTER, V1870, pCH2
   PUEBLA G, 2000, LECT NOTES COMPUTER, V1870, pCH3
   SHAPIRO EY, 1982, P 9 ANN ACM S PRINC, P412
   Volpe P, 2001, SCI COMPUT PROGRAM, V39, P125, DOI 10.1016/S0167-6423(00)00017-4
   VOLPE P, 1999, THESIS U NAPOLI FEDE
   [No title captured]
NR 40
TC 1
Z9 2
U1 0
U2 0
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC
PY 2003
VL 49
IS 1-3
BP 89
EP 123
DI 10.1016/j.scico.2003.08.002
PG 35
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 747KB
UT WOS:000186802700003
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU James, P
   Moller, F
   Pantekis, F
AF James, Phillip
   Moller, Faron
   Pantekis, Filippos
TI OnTrack: Reflecting on domain specific formal methods for railway
   designs
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Model driven engineering; Formal methods; Railway verification
ID VERIFICATION; CONSTRUCTION; GENERATION
AB OnTrack is a tool that supports workflows for railway verification that has been implemented using model driven engineering frameworks. Starting with graphical scheme plans and finishing with automatically generated formal models set-up for verification, OnTrack allows railway engineers to interact with verification procedures through encapsulating formal methods. OnTrack is grounded on a domain specification language (DSL) capturing scheme plans and supports generation of various formal models using model transformations. In this paper, we detail the role model driven engineering takes within OnTrack and reflect on the use of model driven engineering concepts for developing domain specific formal methods toolsets.
C1 [James, Phillip; Moller, Faron; Pantekis, Filippos] Swansea Univ, Dept Comp Sci, Swansea, Wales.
C3 Swansea University
RP James, P (corresponding author), Swansea Univ, Dept Comp Sci, Swansea, Wales.
EM P.D.James@swansea.ac.uk; F.G.Moller@swansea.ac.uk;
   Filippos.Pantekis@swansea.ac.uk
FU Siemens Rail Automation UK; Rail Safety and Standards Board, RSSB
FX The authors would like to thank Siemens Rail Automation UK and the Rail
   Safety and Standards Board, RSSB, for supporting this work. We also wish
   to highlight the rich insights provided by Simon Chadwick, Mark Thomas,
   Thomas Werner and Andrew Lawrence from Siemens Rail Automation UK. We
   extend a special thanks to our academic collaborators, in particular,
   Prof. Markus Roggenbach, Dr. Hoang Nga Nguyen, Prof. Helen Treharne and
   Dr. Monika Seisenberger for their valued insights and contributions to
   the development of OnTrack.
CR Abrial Jean-Raymond, 2010, International Journal on Software Tools for Technology Transfer, V12, P447, DOI 10.1007/s10009-010-0145-y
   Abrial J R, 2010, Modeling in Event-B: system and softeng
   Banci M., 2005, Technical report
   Basile D, 2018, LECT NOTES COMPUT SC, V11023, P20, DOI 10.1007/978-3-319-98938-9_2
   Beydeda S., 2005, MODEL DRIVEN SOFTWAR
   Bj0 rner D., 1999, IND STRENGTH FORMAL, V1, P157
   Bjorner D., 2000, CTS2000, P1
   Bjorner D., 2003, CTS2003
   Boulanger JL, 2000, ADV TRANSPORT, V7, P189
   Bowen JP, 2006, COMPUTER, V39, P40, DOI 10.1109/MC.2006.35
   Cao Y., 2011, P IEEE INT C COMP SC, V2, P511
   Chen L, 2016, 2016 IEEE INTERNATIONAL CONFERENCE ON INTELLIGENT RAIL TRANSPORTATION (ICIRT), P347, DOI 10.1109/ICIRT.2016.7588753
   European Union, 2011, En-50128
   Fantechi Alessandro, 2022, Reliability, Safety, and Security of Railway Systems. Modelling, Analysis, Verification, and Certification: 4th International Conference, RSSRail 2022, Proceedings. Lecture Notes in Computer Science (13294), P3, DOI 10.1007/978-3-031-05814-1_1
   Fantechi A., 2022, Lecture Notes in Computer Science (LNCS), V13704
   Ferrari A, 2022, IEEE T SOFTWARE ENG, V48, P4675, DOI 10.1109/TSE.2021.3124677
   Ferrari A, 2020, PROC INT CONF SOFTW, P62, DOI 10.1145/3377811.3380373
   Ferrari A, 2019, LECT NOTES COMPUT SC, V11495, P226, DOI 10.1007/978-3-030-18744-6_15
   Ferrari A, 2011, FORMS/FORMAT 2010: FORMAL METHODS FOR AUTOMATION AND SAFETY IN RAILWAY AND AUTOMOTIVE SYSTEMS, P107, DOI 10.1007/978-3-642-14261-1_11
   Garavel H, 2020, LECT NOTES COMPUT SC, V12327, P3, DOI 10.1007/978-3-030-58298-2_1
   Gleirscher M, 2020, EMPIR SOFTW ENG, V25, P4473, DOI 10.1007/s10664-020-09836-5
   Gronback R. C., 2009, ECLIPSE MODELING PRO
   Haxthausen Anne E., 2011, FM 2011: Formal Methods. Proceedings 17th International Symposium on Formal Methods, P118, DOI 10.1007/978-3-642-21437-0_11
   Haxthausen AE, 2007, LECT NOTES COMPUT SC, V4700, P320
   Haxthausen AE, 2014, INT J SOFTW TOOLS TE, V16, P713, DOI 10.1007/s10009-013-0295-9
   Haxthausen AE, 2011, LECT NOTES COMPUT SC, V6662, P176
   Haxthausen AE, 2014, LECT NOTES COMPUT SC, V8368, P205, DOI 10.1007/978-3-319-05032-4_16
   Haxthausen AE, 2011, FORM ASP COMPUT, V23, P191, DOI 10.1007/s00165-009-0143-6
   Haxthausen AE, 2010, LECT NOTES COMPUT SC, V6028, P141
   Haxthausen AE, 2023, FORM ASP COMPUT, V35, DOI 10.1145/3549736
   Holland G., 2009, P 18 INT C CONC SPEC
   Iliasov A, 2018, LECT NOTES COMPUT SC, V11093, P91, DOI 10.1007/978-3-319-99130-6_7
   Iliasov A, 2014, LECT NOTES COMPUT SC, V8454, P177
   James Phillip, 2013, NASA Formal Methods. 5th International Symposium, NFM 2013. Proceedings, P435, DOI 10.1007/978-3-642-38088-4_30
   James P., 2014, PhD thesis
   James P., 2010, SAT-based Model Checking and its Applications to Train Control Software
   James P, 2014, INT J SOFTW TOOLS TE, V16, P685, DOI 10.1007/s10009-014-0304-7
   James P, 2014, MATH COMPUT SCI, V8, P11, DOI 10.1007/s11786-014-0174-0
   James P, 2014, SCI COMPUT PROGRAM, V96, P315, DOI 10.1016/j.scico.2014.04.005
   Kanso K., 2013, PhD thesis,
   Kent S., 2002, Integrated Formal Methods. Third International Conference, IFM 2002. Proceedings (Lecture Notes in Computer Science Vol.2335), P286
   Kolovos D.S., 2013, THE EPSILON BOOK
   Luteberget B, 2019, LECT NOTES COMPUT SC, V11918, P341, DOI 10.1007/978-3-030-34968-4_19
   Mirabadi A, 2009, TRANSP PROBL, V4, P103
   Moller Faron., 2013, HARDWARE SOFTWARE VE, V7857
   Nash A., 2004, WIT Transactions on the Built Environment, P74
   Pantekis F., 2019, Communications in Computer and Information Science, V1165, P95
   Peleska J., 2004, P FORMAL METHODS AUT
   Peleska J, 2021, FORM ASP COMPUT, V33, P925, DOI 10.1007/s00165-021-00551-6
   Peleska J, 2019, LECT NOTES COMPUT SC, V11495, P142, DOI 10.1007/978-3-030-18744-6_9
   Romanovsky A., 2011, UKRI (EPSRC) Project EP/I010807/1
   Simpson A., 1994, Lecture Notes in Computer Science (LNCS), V873
   Stankaitis P, 2017, IEEE INT SYMP SOFTW, P153, DOI 10.1109/ISSREW.2017.66
   Steinberg D., 2008, EMF: Eclipse Modeling Framework, Vsecond
   Stevens P, 2008, LECT NOTES COMPUT SC, V5235, P408, DOI 10.1007/978-3-540-88643-3_10
   Tombs D., 2002, CORE 2002: Cost Efficient Railways through Engineering, P415
   Vu Linh H., 2017, Reliability, Safety, and Security of Railway Systems. Modelling, Analysis, Verification, and Certification. Second International Conference, RSSRail 2017. Proceedings LNCS 10598, P99, DOI 10.1007/978-3-319-68499-4_7
   Vu LH, 2015, COMM COM INF SC, V476, P223, DOI 10.1007/978-3-319-17581-2_15
   Winter Kirsten, 2012, Leveraging Applications of Formal Methods, Verification and Validation. Applications and Case Studies. Proceedings of the 5th International Symposium, ISoLA 2012, P246, DOI 10.1007/978-3-642-34032-1_24
   Winter K., 2006, 10 AUSTR WORKSH SAF, V55, P101
   Winter K., 2003, ACSC 03
   Winter K., 2002, Australian Computer Science Communications, V24, P303
NR 62
TC 0
Z9 0
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR
PY 2024
VL 233
AR 103057
DI 10.1016/j.scico.2023.103057
EA NOV 2023
PG 15
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CB7I1
UT WOS:001122852000001
OA hybrid
DA 2024-07-18
ER

PT J
AU Banach, R
AF Banach, Richard
TI Core Hybrid Event-B III: Fundamentals of a reasoning framework
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Hybrid Event-B; Reasoning framework; Verification
ID LANDING GEAR SYSTEM; METHODOLOGY
AB The Hybrid Event-B framework was introduced to add continuously varying behaviour to the discrete changes of state characteristic of the well established Event-B method. This is made necessary by the needs of verifying the hybrid and cyber-physical systems that are increasingly prevalent today. The semantic foundation of Hybrid Event-B rests on piecewise absolutely continuous functions of time. This enables unproblematic modelling of all classical physical phenomena, as well as the specification of conventional discrete changes of state, regardless of whether these arise in the physical arena or as abstractions of computational behaviour. In this paper, the large gap between arbitrary piecewise absolutely continuous functions, and what can be reasoned about mechanically/symbolically, is addressed. First, piecewise absolutely continuous real functions are restricted to piecewise complex analytic functions, real and without singularities on a semiinfinite portion of the real axis. This class has good properties with respect to symbolic manipulation and thus provides a good foundation for an approach to system verification that avoids dealing with the interleaved quantifiers of mathematical analysis, thus reducing the verification of the proof obligations of Hybrid Event-B to calculational checks. The individual proof obligations, whose discharge assures the correctness of a Hybrid Event-B machine, are examined, and results establishing sufficient conditions for their successful discharge via calculation are given. A small scale case study illustrates the verification process in this setting. & COPY; 2023 The Author(s). Published by Elsevier B.V. This is an open access article under the CC BY-NC-ND license (http://creativecommons .org /licenses /by-nc -nd /4 .0/).
C1 [Banach, Richard] Univ Manchester, Dept Comp Sci, Oxford Rd, Manchester M13 9PL, Lancs, England.
C3 University of Manchester
RP Banach, R (corresponding author), Univ Manchester, Dept Comp Sci, Oxford Rd, Manchester M13 9PL, Lancs, England.
EM richard.banach@manchester.ac.uk
CR Abrial Jean-Raymond, 2012, Abstract State Machines, Alloy, B, VDM, and Z. Proceedings Third International Conference, ABZ 2012, P178, DOI 10.1007/978-3-642-30885-7_13
   Abrial Jean-Raymond, 2010, International Journal on Software Tools for Technology Transfer, V12, P447, DOI 10.1007/s10009-010-0145-y
   Abrial J.R., 2005, RODIN PROJECT DELIVE
   Abrial J.-R., 1996, B BOOK ASSIGNING PRO
   Abrial J R, 2010, Modeling in Event-B: system and softeng
   Afendi Meryem, 2020, Rigorous State-Based Methods. 7th International Conference, ABZ 2020. Proceedings. Lecture Notes in Computer Science (LNCS 12071), P139, DOI 10.1007/978-3-030-48077-6_10
   Ahmed NasirUddin., 2006, Dynamic Systems and Control with Applications
   Akbarpour B, 2008, LECT NOTES ARTIF INT, V5144, P217, DOI 10.1007/978-3-540-85110-3_18
   [Anonymous], MATHEMATICA
   [Anonymous], 1992, Godel's incompleteness theorems
   [Anonymous], 1993, Algorithmic Algebra, Texts and Monographs in Computer Science
   [Anonymous], 1956, Introduction to Mathematical Logic
   Antsaklis PJ., 2006, LINEAR SYSTEMS
   Aplevich J., 1991, Implicit Linear Systems
   Astrom K. J., 2006, Advanced PID Control
   Back R.-J., 2001, Nordic Journal of Computing, V8, P2
   BANACH R, 1995, SCI COMPUT PROGRAM, V24, P221, DOI 10.1016/0167-6423(95)00004-C
   Banach Richard, 2013, Theoretical Aspects of Computing - ICTAC 2013. 10th International Colloquium. Proceedings: LNCS 8049, P76, DOI 10.1007/978-3-642-39718-9_5
   Banach Richard, 2013, Theories of Programming and Formal Methods. Essays Dedicated to Jifeng He on the Occasion of His 70th Birthday. LNCS 8051, P37, DOI 10.1007/978-3-642-39698-4_3
   BANACH R, 1994, THEOR COMPUT SCI, V129, P187, DOI 10.1016/0304-3975(94)90086-8
   Banach R., 2014, CCIS, V433, P126
   Banach R., 2018, MODELS CONCEPTS THEO, V34, P177
   Banach R, 2020, EMERGENCE COMPLEX CO, V35, P157, DOI 10.1007/978-3-030-15792-0_7
   Banach R, 2017, INT J SOFTW TOOLS TE, V19, P205, DOI 10.1007/s10009-015-0409-7
   Banach R, 2017, SCI COMPUT PROGRAM, V139, P1, DOI 10.1016/j.scico.2016.12.003
   Banach R, 2016, LECT NOTES COMPUT SC, V10009, P90, DOI 10.1007/978-3-319-47846-3_7
   Banach R, 2016, 2016 10TH INTERNATIONAL SYMPOSIUM ON THEORETICAL ASPECTS OF SOFTWARE ENGINEERING (TASE), P65, DOI 10.1109/TASE.2016.16
   Banach R, 2016, LECT NOTES COMPUT SC, V9675, P376, DOI 10.1007/978-3-319-33600-8_32
   Banach R, 2015, ACSIS-ANN COMPUT SCI, V5, P731, DOI 10.15439/2015F132
   Banach R, 2015, SCI COMPUT PROGRAM, V105, P92, DOI 10.1016/j.scico.2015.02.003
   Barendregt H., 1981, The Lambda Calculus: Its Syntax and Semantics
   Barwise J., 1977, Handbook of Mathematical Logic
   Basu Saugata, 2006, Algorithms in Real Algebraic Geometry
   Bender C., 2010, Advanced Mathematical Methods for Scientists and Engineers: Asymptotic Methods and Perturbation Theory
   Billingsley P., 1995, PROBABILITY MEASURE
   Boldo S, 2015, MATH COMPUT SCI, V9, P41, DOI 10.1007/s11786-014-0181-1
   Brickell F., 1970, Differentiable Manifolds
   Butler M.B., 2016, Multicultural science education: Preparing teachers for equity and social justice, P29
   cam .ac, METITARSKI
   Carloni LP, 2006, FOUND TRENDS ELECTRO, V1, P1, DOI 10.1561/1000000001
   Caviness B., 1998, Quantifier elimination and cylindrical algebraic decomposition
   Chaochen Z., 1995, International Hybrid Systems Workshop, P511
   Chicone C., 2006, Ordinary Differential Equations with Applications, DOI DOI 10.1007/0-387-35794-7
   Church Alonzo., 1941, The Calculi of Lambda-conversion. Annals of mathematics studies
   Clarke F., 1997, Nonsmooth Analysis and Control Theory
   Clarke F. H., 1983, OPTIMIZATION NONSMOO
   Cobzas S, 2013, STUD U BABES-BOL MAT, V58, P279
   Copson E., 1935, An Introduction to the Theory of Functions of a Complex Variable
   Copson E., 1965, Asymptotic Expansions
   Curry H., 1958, Combinatory Logic, VI
   Diekmann O., 1995, Delay Equations: Functional, Complex, and Nonlinear Analysis
   Dingle R.B., 1973, Asymptotic Expansions: Their Derivation and Interpretation
   Dorf R. C., 2011, Modern Control Systems
   Dupont Guillaume, 2020, Formal Methods and Software Engineering. 22nd International Conference on Formal Engineering Methods, ICFEM 2020. Proceedings. Lecture Notes in Computer Science (LNCS 12531), P251, DOI 10.1007/978-3-030-63406-3_15
   Dupont G, 2021, ACM T EMBED COMPUT S, V20, DOI 10.1145/3448270
   Dupont G, 2020, LECT NOTES COMPUT SC, V12546, P82, DOI 10.1007/978-3-030-63461-2_5
   Dutton K., 1997, The art of control engineering
   Erneux T., 2009, APPL DELAY DIFFERENT
   event -b, RODIN USERS HDB
   event -b, RODIN TOOL
   Filliâtre JC, 2007, LECT NOTES COMPUT SC, V4590, P173
   Fritzsche K., 2002, From Holomorphic Functions to Complex Manifolds
   Gallier J., 1987, LOGIC COMPUTER SCI
   Gamelin T., 2001, Complex Analysis
   Garoche P.L., 2019, FORMAL VERIFICATION
   Geisberger E., 2015, Living in a networked world: Integrated research agenda Cyber-Physical Systems (agendaCPS)
   Gerdts M, 2012, DE GRUYTER TEXTBOOK, P1, DOI 10.1515/9783110249996
   Grauert Hans., 1976, Several Complex Variables
   Grimmett G., 2001, Probability and random processes, V3rd edn
   H??rmander L., 1990, INTRO COMPLEX ANAL S
   Haddad W. M., 2008, Nonlinear Dynamical Systems and Control: A Lyapunov-Based Approach
   Hair JF, 2010, Multivariate data analysis
   Hairer E., 1993, SPRINGER SERIES COMP
   Hairer E., 2010, Solving Ordinary Differential Equations II, V14, DOI [10.1007/978-3-642-05221-7, DOI 10.1007/978-3-642-05221-7]
   Hale J. K., 1993, INTRO FUNCTIONAL DIF
   Heading J., 2013, An Introduction to Phase-Integral Methods
   Herencia-Zapana H., 2012, LNCS, V7226, P173
   Hindley Roger., 1986, Introduction to Combinators and Lambda-Calculus
   Hinrichsen D., 2005, Mathematical Systems Theory, VI
   Hoang T.S., ARXIV
   Hobson E., 1957, The theory of functions of a real variable and the theory of fourier series, V1
   Howie J., 2003, Complex analysis
   Hubbard J., 1991, DIFF EQUAT+
   Hubbard J.H., 1995, DIFF EQUAT+
   ILCHMANN A., 2013, SURVEYS DIFFERENTIAL
   Jifeng H., 1994, CLASSICAL MIND ESSAY, P171
   Krantz S. G., 1982, FUNCTION THEORY SEVE
   Krob Marchal, 2013, PROC CSDM 13, P97
   Kunkel P., 2006, Textbooks in Mathematics
   Lamour R., 2013, DIFFERENTIAL ALGEBRA
   Lamport L, 2012, FOUND PHYS, V42, P1056, DOI 10.1007/s10701-012-9647-7
   Lang S., 2008, COMPLEX ANAL
   Laub A. J., 2004, Matrix Analysis for Scientists and Engineers
   Laurent-Thiébaut C, 2011, UNIVERSITEXT, P1, DOI 10.1007/978-0-85729-030-4_1
   Leadbetter R., 2014, BASIC COURSE MEASURE
   Lebl J., 2019, Tasty Bits of Several Complex Variables
   Lee J.M., 2002, Graduate Texts in Math
   Liu J, 2010, LECT NOTES COMPUT SC, V6461, P1, DOI [10.1109/PCSPA.2010.9, 10.1007/978-3-642-17164-2_1]
   Maamria I., 2010, LNCS, V5977, P407
   Manin Yu., 1977, COURSE MATH LOGIC
   maplesoft, Maple
   mathworks, MATLAB Simulink
   MILI A, 1986, SOFTWARE PRACT EXPER, V16, P1003, DOI 10.1002/spe.4380161105
   Mili A., 1990, INTRO PROGRAM FAULT
   Mrsevic M, 2008, TEACH MATH-SERB, V11, P21
   Ogata K., 2008, MODERN CONTROL ENG
   Olver F.W.J., 2010, NIST HDB MATH FUNCTI
   Perko L., 2001, DIFFERENTIAL EQUATIO, Vthird, P228
   Platzer A., 2018, Logical Foundations of Cyber-Physical Systems
   Platzer A, 2010, LOGICAL ANALYSIS OF HYBRID SYSTEMS: PROVING THEOREMS FOR COMPLEX DYNAMICS, P335, DOI 10.1007/978-3-642-14509-4_9
   Rasiowa H., 1963, MATH METAMATHEMATICS
   redlog, REDLOG
   Rönkkö M, 2003, THEOR COMPUT SCI, V290, P937, DOI 10.1016/S0304-3975(02)00547-9
   Rudin W., 1976, International series in pure and applied mathematics
   Rudin W, 1987, REAL COMPLEX ANAL
   Ryan M., 1992, HDB LOGIC COMPUTER S, V1
   Sanfelice R. G., 2021, HYBRID FEEDBACK CONT
   scilab, SCILAB
   Smith H, 2011, TEXTS APPL MATH, V57, P1, DOI 10.1007/978-1-4419-7646-8
   Sontag E. D, 1998, Mathematical Control Theory: Deterministic Finite Dimensional Systems, V6
   Su W., 2012, ICFEM, P230
   Su W., 2011, PROC 3 IEEE INT WORK, P416
   Su W, 2017, INT J SOFTW TOOLS TE, V19, P141, DOI 10.1007/s10009-015-0400-3
   Su W, 2011, LECT NOTES COMPUT SC, V6991, P437, DOI 10.1007/978-3-642-24559-6_30
   symbolaris, KEYMAERA
   Tabuada P., 2009, VERIFICATION CONTROL
   Titchmarsh EC., 1939, The theory of functions, V2nd ed
   usna, QEPCAD
   Voisin L, 2014, LECT NOTES COMPUT SC, V8477, P1, DOI 10.1007/978-3-662-43652-3_1
   Walter W., 1998, Ordinary Differential Equations
   Warner F., 1983, FDN DIFFERENTIABLE M
   Whittaker E.T., 1927, A course of modern analysis, V4th
   why3 .lri , WHY3
   Wikipedia, ABS CONT
   Yakubovich V. A., 2004, Stability of stationary sets in control systems with discontinuous nonlinearities
   Zhan N., 2017, FORMAL VERIFICATION, P71
   Zhan N., 2017, Formal Verification of Simulink/Stateflow Diagrams, A Deductive Approach
NR 137
TC 0
Z9 0
U1 0
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN
PY 2024
VL 231
AR 103002
DI 10.1016/j.scico.2023.103002
EA AUG 2023
PG 54
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA P8JK6
UT WOS:001053076800001
OA hybrid
DA 2024-07-18
ER

PT J
AU Hoey, J
   Ulidowski, I
AF Hoey, James
   Ulidowski, Irek
TI Reversing an imperative concurrent programming language
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Reversible computation; Inverse concurrent execution; Correct reversal
   of execution
ID REVERSIBILITY; GENERATION
AB We introduce a method of reversing the execution of imperative concurrent programs. Given an irreversible program, we describe the process of producing two versions. The first performs forward execution and saves information necessary for reversal. The second uses this saved information to simulate reversal. We propose using identifiers to capture statement execution order, and to use this to correctly undo data races via backtracking reversibility. We prove this reversibility to be correct, showing that the initial program state is restored and that all saved information is used (garbage-clean).(c) 2022 Elsevier B.V. All rights reserved.
C1 [Hoey, James; Ulidowski, Irek] Univ Leicester, Sch Comp & Math Sci, Leicester, England.
C3 University of Leicester
RP Hoey, J (corresponding author), Univ Leicester, Sch Comp & Math Sci, Leicester, England.
EM jbh13@leicester.ac.uk
RI Ulidowski, Irek/GSE-3147-2022
OI Hoey, James/0000-0003-1877-666X; Ulidowski, Irek/0000-0002-3834-2036
CR [Anonymous], 1999, Parallel and Distribution Simulation Systems
   Aubert C, 2021, LECT NOTES COMPUT SC, V12805, P144, DOI 10.1007/978-3-030-79837-6_9
   BENNETT CH, 1973, IBM J RES DEV, V17, P525, DOI 10.1147/rd.176.0525
   Bergstra J.A., 1993, LNCS, V803, P46
   Carothers CD, 1999, THIRTEENTH WORKSHOP ON PARALLEL AND DISTRIBUTED SIMULATION - PROCEEDINGS, P126, DOI [10.1109/PADS.1999.766169, 10.1145/347823.347828]
   Cingolani D, 2017, SIGSIM-PADS'17: PROCEEDINGS OF THE 2017 ACM SIGSIM CONFERENCE ON PRINCIPLES OF ADVANCED DISCRETE SIMULATION, P41, DOI 10.1145/3064911.3064927
   Cingolani D, 2017, ACM T MODEL COMPUT S, V27, DOI 10.1145/3077583
   Cingolani D, 2016, LECT NOTES COMPUT SC, V9720, P137, DOI 10.1007/978-3-319-40578-0_9
   Cservenka MH, 2018, LECT NOTES COMPUT SC, V11106, P269, DOI 10.1007/978-3-319-99498-7_19
   Danos V, 2004, LECT NOTES COMPUT SC, V3170, P292
   De Vos A., 2010, Reversible Computing: Fundamentals, Quantum Computing, and Applications
   Engblom J., 2012, P 2012 SYSTEM SOFTWA
   Fabbretti G, 2021, LECT NOTES COMPUT SC, V12805, P79, DOI 10.1007/978-3-030-79837-6_5
   Frank M.P., 1999, THESIS MIT US
   Frank MP, 2018, LECT NOTES COMPUT SC, V11106, P3, DOI 10.1007/978-3-319-99498-7_1
   Giachino E., US
   Gluck R., 2016, Comput. Softw, V33, p3_108
   Glück R, 2017, IEICE T INF SYST, VE100D, P1026, DOI 10.1587/transinf.2016EDP7274
   Habermann AN., 1972, PARALLEL NEIGHBOR SO
   Haulund T, 2017, LECT NOTES COMPUT SC, V10301, P66, DOI 10.1007/978-3-319-59936-6_5
   Hay-Schmidt L., 2021, LNCS, V2805, DOI DOI 10.1007/978-3-030-79837-6_6
   Hoey J., 2020, THESIS U LEICESTER
   Hoey J., 2022, ARXIV
   Hoey J., 2020, LNCS, V2070, P108, DOI [DOI 10.1007/978-3-030-47361-7, DOI 10.1007/978-3-030-47361-75]
   Hoey J, 2022, LECT NOTES COMPUT SC, P213, DOI 10.1007/978-3-031-09005-9_15
   Hoey J, 2019, LECT NOTES COMPUT SC, V11497, P108, DOI 10.1007/978-3-030-21500-2_7
   Huttel H., 2010, TRANSITIONS TREES IN
   Jacobsen PAH, 2018, LECT NOTES COMPUT SC, V11106, P304, DOI 10.1007/978-3-319-99498-7_21
   LANDAUER R, 1961, IBM J RES DEV, V5, P183, DOI 10.1147/rd.53.0183
   Lanese I., US
   Lanese I, 2021, IT PROF, V23, P12, DOI 10.1109/MITP.2021.3073757
   Lanese I, 2020, LECT NOTES COMPUT SC, V12077, P442, DOI 10.1007/978-3-030-45231-5_23
   Lanese I, 2021, ACTA INFORM, V58, P1, DOI 10.1007/s00236-019-00346-6
   Lanese I, 2019, LECT NOTES COMPUT SC, V11535, P167, DOI 10.1007/978-3-030-21759-4_10
   Lanese I, 2018, J LOG ALGEBR METHODS, V100, P71, DOI 10.1016/j.jlamp.2018.06.004
   Lanese I, 2018, LECT NOTES COMPUT SC, V10818, P247, DOI 10.1007/978-3-319-90686-7_16
   Lutz C, 1986, Janus: a time-reversible language
   Medic D, 2020, INFORM COMPUT, V275, DOI 10.1016/j.ic.2020.104644
   Mogensen RSSA T, 2015, PERSPECTIVES SYSTEM, V9609, P203
   Mogensen TAE, 2021, LECT NOTES COMPUT SC, V12805, P45, DOI 10.1007/978-3-030-79837-6_3
   Perumalla KS, 2014, CH CRC COMP SCI SER, P1
   Phillips I, 2007, J LOGIC ALGEBR PROGR, V73, P70, DOI 10.1016/j.jlap.2006.11.002
   Phillips Iain, 2012, Lecture Notes in Computer Science, V7581, P218, DOI [10.1007/978-3-642-36315-3_18, DOI 10.1007/978-3-642-36315-3_18]
   Plotkin GD, 2004, J LOGIC ALGEBR PROGR, V60-1, P17, DOI 10.1016/j.jlap.2004.03.002
   Schordan M, 2018, NEW GENERAT COMPUT, V36, P257, DOI 10.1007/s00354-018-0038-2
   Schordan M, 2015, LECT NOTES COMPUT SC, V9138, P95, DOI 10.1007/978-3-319-20860-2_6
   Schultz UP, 2018, LECT NOTES COMPUT SC, V11106, P322, DOI 10.1007/978-3-319-99498-7_22
   Schultz UP, 2016, LECT NOTES COMPUT SC, V9720, P153, DOI 10.1007/978-3-319-40578-0_10
   Tang YR, 2006, SIMUL-T SOC MOD SIM, V82, P61, DOI 10.1177/0037549706065481
   Thomsen M.K., 2015, IFL 2015, P8
   Ulidowski I., 2020, REVERSIBLE COMPUTATI, V2070
   Undo Software, 2014, INCR SOFTW DEV PROD
   Undo Software, UNDODB COMM AV REV D
   Vulov G, 2011, WINT SIMUL C PROC, P2960, DOI 10.1109/WSC.2011.6147998
   Yokoyama Tetsuo, 2012, Reversible Computation. Third International Workshop, RC 2011. Revised Papers, P14, DOI 10.1007/978-3-642-29517-1_2
   Yokoyama T., 2007, SIGPLAN WORKSH PART, P144
   Zeller A, 2009, WHY PROGRAMS FAIL: A GUIDE TO SYSTEMATIC DEBUGGING, 2ND EDITION
NR 57
TC 2
Z9 2
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 1
PY 2022
VL 223
AR 102873
DI 10.1016/j.scico.2022.102873
EA SEP 2022
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 5K5JW
UT WOS:000869763500003
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Schlatte, R
   Johnsen, EB
   Kamburjan, E
   Tarifa, SLT
AF Schlatte, Rudolf
   Johnsen, Einar Broch
   Kamburjan, Eduard
   Tarifa, S. Lizeth Tapia
TI The ABS simulator toolchain
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Distributed actor systems; Executable models; Time and resource behavior
ID ARCHITECTURES; MODEL
AB ABS is a language for behavioral modeling of distributed, time-and resource-sensitive communicating systems. ABS is based on an executable actor-based semantics with asynchronous method calls, with method call results being delivered via future variables. Data is modeled via a functional, side-effect-free layer of algebraic data types and parametric functions. Actor behavior is expressed in a sequential, imperative way, with explicit suspension points for in-actor cooperative scheduling. A declarative time and resource model allows modeling of time-sensitive actor behavior in a compositional way. A software product line language layer implements model variability via code deltas and feature models. This paper describes the toolchain that makes it possible to simulate ABS models, and lists the most important case studies done with ABS. (c) 2022 The Author(s). Published by Elsevier B.V. This is an open access article under the CC BY license (http://creativecommons.org/licenses/by/4.0/).
C1 [Schlatte, Rudolf; Johnsen, Einar Broch; Kamburjan, Eduard; Tarifa, S. Lizeth Tapia] Univ Oslo, Oslo, Norway.
C3 University of Oslo
RP Schlatte, R (corresponding author), Univ Oslo, Oslo, Norway.
EM rudi@ifi.uio.no; einarj@ifi.uio.no; eduard@ifi.uio.no;
   sltarifa@ifi.uio.no
OI Kamburjan, Eduard/0000-0002-0996-2543; Schlatte,
   Rudolf/0000-0001-5601-5517
FU EU projects HATS [FP7 ICT 231620]; Envisage [FP7 610582]; HyVar [H2020
   644298]; Research Council of Norway via the Sirius Centre for Scalable
   Data Access [237898]
FX Acknowledgements The development of the ABS language and toolchain was
   supported by the EU projects HATS (FP7 ICT 231620) , Envisage (FP7
   610582) , and HyVar (H2020 644298) , and by the Research Council of
   Norway via the Sirius Centre for Scalable Data Access (237898) . We also
   wish to thank all individual developers for their contributions, large
   and small.
CR Albert E, 2014, SERV ORIENTED COMPUT, V8, P323, DOI 10.1007/s11761-013-0148-0
   Armstrong J, 2010, COMMUN ACM, V53, P68, DOI 10.1145/1810891.1810910
   Bezirgiannis N, 2019, LECT NOTES COMPUT SC, V11424, P332, DOI 10.1007/978-3-030-16722-6_20
   Bezirgiannis N, 2017, LECT NOTES COMPUT SC, V10465, P143, DOI 10.1007/978-3-319-67262-5_11
   Bijo S, 2019, SCI COMPUT PROGRAM, V179, P24, DOI 10.1016/j.scico.2019.04.003
   Bjork J, 2013, INNOV SYST SOFTW ENG, V9, P29, DOI 10.1007/s11334-012-0184-5
   De Boer F, 2017, ACM COMPUT SURV, V50, DOI 10.1145/3122848
   Doménech J, 2017, LECT NOTES COMPUT SC, V10202, P379, DOI 10.1007/978-3-662-54494-5_22
   Ekman T, 2007, SCI COMPUT PROGRAM, V69, P14, DOI 10.1016/j.scico.2007.02.003
   Hahnle Reiner, 2013, Formal Methods for Components and Objects. 11th International Symposium, FMCO 2012. Revised Lectures: LNCS 7866, P1, DOI 10.1007/978-3-642-40615-7_1
   Hightower K., 2017, KUBERNETES RUNNING
   Johnsen E.B., 2011, Lecture Notes in Computer Science, V6957, P142, DOI [10.1007/978- 3- 642-25271-6 8, DOI 10.1007/978-3-642-25271-6]
   Johnsen EB, 2016, LECT NOTES COMPUT SC, V9953, P482, DOI 10.1007/978-3-319-47169-3_39
   Johnsen EB, 2015, J LOG ALGEBR METHODS, V84, P67, DOI 10.1016/j.jlamp.2014.07.001
   Kamburjan E, 2019, ELECTRON P THEOR COM, P70, DOI 10.4204/EPTCS.310.8
   Kamburjan E, 2018, SCI COMPUT PROGRAM, V166, P167, DOI 10.1016/j.scico.2018.07.001
   Lin JC, 2020, INT J GRID UTIL COMP, V11, P185, DOI 10.1504/IJGUC.2020.105531
   Lin JC, 2017, 2017 IEEE 7TH INTERNATIONAL SYMPOSIUM ON CLOUD AND SERVICE COMPUTING (SC2 2017), P163, DOI 10.1109/SC2.2017.32
   Lin JC, 2016, LECT NOTES COMPUT SC, V9633, P49, DOI 10.1007/978-3-662-49665-7_4
   PARR TJ, 1995, SOFTWARE PRACT EXPER, V25, P789, DOI 10.1002/spe.4380250705
   Schlatte Rudolf, 2021, Coordination Models and Languages. 23rd IFIP WG 6.1 International Conference, COORDINATION 2021 Held as Part of the 16th International Federated Conference on Distributed Computing Techniques, DisCoTec 2021. Proceedings. Lecture Notes in Computer Science (LNCS 12717), P3, DOI 10.1007/978-3-030-78142-2_1
   Schlatte R., 2021, ABS TOOLS, DOI [10.5281/zenodo.6867529, DOI 10.5281/ZENODO.6867529]
   Turin Gianluca, 2020, Leveraging Applications of Formal Methods, Verification and Validation. Verification. Principles. 9th International Symposium on Leveraging Applications of Formal Methods, ISoLA 2020. Proceedings. Lecture Notes in Computer Science (LNCS 12476), P558, DOI 10.1007/978-3-030-61362-4_32
NR 23
TC 3
Z9 3
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 1
PY 2022
VL 223
AR 102861
DI 10.1016/j.scico.2022.102861
EA SEP 2022
PG 5
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 4V5MH
UT WOS:000859520500004
OA hybrid
DA 2024-07-18
ER

PT J
AU De Nicola, R
   Di Stefano, L
   Inverso, O
   Uwimbabazi, A
AF De Nicola, Rocco
   Di Stefano, Luca
   Inverso, Omar
   Uwimbabazi, Aline
TI Automated replication of tuple spaces via static analysis
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Tuple spaces; Replication; Program transformation; Static analysis;
   Golang
AB Coordination languages for tuple spaces can offer significant advantages in the specification and implementation of distributed systems, but often do require manual programming effort to ensure consistency. We propose an experimental technique for automated replication of tuple spaces in distributed systems. The system of interest is modelled as a concurrent Go program where different threads represent the behaviour of the separate components, each owning its own local tuple repository. We automatically transform the initial program by combining program transformation and static analysis, so that tuples are replicated depending on the components & rsquo; read-write access patterns. In this way, we turn the initial system into a replicated one where the replication of tuples is automatically achieved, while avoiding unnecessary replication overhead. Custom static analyses may be plugged in easily in our prototype implementation. We see this as a first step towards developing a fully-fledged framework to support designers to quickly evaluate many classes of replication-based systems under different consistency levels. (c) 2022 The Author(s). Published by Elsevier B.V. This is an open access article under the CC BY license (http://creativecommons.org/licenses/by/4.0/).
C1 [De Nicola, Rocco] IMT Sch Adv Studies, Lucca, Italy.
   [Di Stefano, Luca] Univ Grenoble Alpes, Inria, CNRS, Grenoble INP,LIG, Grenoble, France.
   [Di Stefano, Luca] Univ Gothenburg, Gothenburg, Sweden.
   [Inverso, Omar; Uwimbabazi, Aline] Gran Sasso Sci Inst GSSI, LAquila, Italy.
   [Di Stefano, Luca] Univ Grenoble Alpes, Inst Engn, Grenoble, France.
C3 IMT School for Advanced Studies Lucca; Inria; Communaute Universite
   Grenoble Alpes; Institut National Polytechnique de Grenoble; Universite
   Grenoble Alpes (UGA); Centre National de la Recherche Scientifique
   (CNRS); University of Gothenburg; Gran Sasso Science Institute (GSSI);
   Communaute Universite Grenoble Alpes; Universite Grenoble Alpes (UGA)
RP Di Stefano, L (corresponding author), Univ Gothenburg, Dept Comp Sci & Engn, Gothenburg, Sweden.
EM luca.di.stefano@gu.se
RI De Nicola, Rocco/B-8584-2012; Di Stefano, Luca/O-6976-2017
OI Di Stefano, Luca/0000-0003-1922-3151
FU MIUR project [2017FTXR7S IT MATTERS]
FX Work partially funded by MIUR project PRIN 2017FTXR7S IT MATTERS
   (Methods and Tools for Trustworthy Smart Systems) , and by ERC
   consolidator grant no. 772459 D-SynMA (Distributed Synthesis: from
   Single to Multiple Agents) .
CR Andric M, 2016, LECT NOTES COMPUT SC, V9560, P236, DOI 10.1007/978-3-319-27810-0_12
   Andric M, 2015, LECT NOTES COMPUT SC, V9037, P3, DOI 10.1007/978-3-319-19282-6_1
   Benedicte P, 2018, 33RD ANNUAL ACM SYMPOSIUM ON APPLIED COMPUTING, P593, DOI 10.1145/3167132.3167197
   Bessani AN, 2008, EUROSYS'08: PROCEEDINGS OF THE EUROSYS 2008 CONFERENCE, P163, DOI 10.1145/1357010.1352610
   Bettini L, 2002, SOFTWARE PRACT EXPER, V32, P1365, DOI 10.1002/spe.486
   Casadei M, 2009, SCI COMPUT PROGRAM, V74, P702, DOI 10.1016/j.scico.2008.09.018
   Chen SM, 2007, SPAA'07: PROCEEDINGS OF THE NINETEENTH ANNUAL SYMPOSIUM ON PARALLELISM IN ALGORITHMS AND ARCHITECTURES, P105
   Corradi A., 1996, DEISLIA96005 U BOL
   Cousot Patrick, 1978, P 5 ACM SIGACT SIGPL, p84S96, DOI DOI 10.1145/512760.512770
   De Nicola R, 1998, IEEE T SOFTWARE ENG, V24, P315, DOI 10.1109/32.685256
   De Nicola R, 2000, LECT NOTES COMPUT SC, V1906, P66
   Dilley N, 2021, 2021 36TH IEEE/ACM INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING ASE 2021, P1016, DOI 10.1109/ASE51524.2021.9678571
   Elnikety S., 2007, Operating Systems Review, V41, P399, DOI 10.1145/1272998.1273037
   Fekete AD, 2010, LECT NOTES COMPUT SC, V5959, P1, DOI 10.1007/978-3-642-11294-2_1
   GELERNTER D, 1985, ACM T PROGR LANG SYS, V7, P80, DOI 10.1145/2363.2433
   Gelernter D., 1989, PARLE '89. Parallel Architectures and Languages Europe. Vol. II: Parallel Languages Proceedings, P20
   Kaki G, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276534
   Kaminskas Linas, 2018, Coordination Models and Languages. 20th IFIP WG 6.1 International Conference, COORDINATION 2018. Held as Part of the 13th International Federated Conference on Distributed Computing Techniques, DisCoTec 2018. Proceedings: LNCS 10852, P181, DOI 10.1007/978-3-319-92408-3_8
   Karandikar R. R., 2016, INT J COMPUT APPL T, V975, P26
   Lange J, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P1137, DOI 10.1145/3180155.3180157
   Lange J, 2017, ACM SIGPLAN NOTICES, V52, P748, DOI 10.1145/3093333.3009847
   Lattner C., 2008, THE BSD C
   Mamei M., 2002, WOA, P108
   Menezes R., 2012, 27 S APPL COMPUTING, P1557
   Murphy AL, 2006, LECT NOTES COMPUT SC, V4038, P194
   Nicola Rocco, 2015, Software Engineering for Collective Autonomic Systems. The ASCENS Approach: LNCS 8998, P3, DOI 10.1007/978-3-319-16310-9_1
   Pike R., 2012, Proceedings of the 3rd annual conference on Systems, programming, and applications: software for humanity, P5
   Quinlan D., 2011, CETUS USERS COMPILER
   Russello G, 2005, LECT NOTES COMPUT SC, V3454, P109
   Saraswat V, 2005, LECT NOTES COMPUT SC, V3653, P353, DOI 10.1007/11539452_28
   Stoica I, 2001, ACM SIGCOMM COMP COM, V31, P149, DOI 10.1145/964723.383071
   Terry D, 2013, COMMUN ACM, V56, P82, DOI 10.1145/2500500
   Uwimbabazi A., 2021, LNCS, V12818, P18
   WEGMAN MN, 1991, ACM T PROGR LANG SYS, V13, P181, DOI 10.1145/103135.103136
NR 34
TC 1
Z9 1
U1 2
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 1
PY 2022
VL 223
AR 102863
DI 10.1016/j.scico.2022.102863
EA SEP 2022
PG 18
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 4V5MH
UT WOS:000859520500003
OA hybrid
DA 2024-07-18
ER

PT J
AU Huang, ZJ
   Shao, ZQ
   Fan, GS
   Yu, HQ
   Yang, K
   Zhou, ZY
AF Huang, Zijie
   Shao, Zhiqing
   Fan, Guisheng
   Yu, Huiqun
   Yang, Kang
   Zhou, Ziyi
TI HBSNIFF: A static analysis tool for Java Hibernate object-relational
   mapping code smell detection
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Code smell; Object-relational mapping; Hibernate; Static analysis;
   Object-oriented programming
ID IMPACT
AB Code smells are symptoms of sub-optimal software design and implementation choices. Detection tools were actively developed for general code smell related to coupling and cohesion issues, but such tools cannot capture domain-specific problems. In this work, we fill the gap in data persistence and query code quality by proposing HBSNIFF, i.e., a static analysis tool for detecting 14 code smells as well as 4 mapping metrics in Java Hibernate Object-Relational Mapping (ORM) codes. HBSNIFF is tested, documented, and manually validated. It also generates readable and customizable reports for every project. Moreover, it is beneficial to Mining Software Repository (MSR) research requiring large-scale analysis since project compilation is not needed for detection. (c) 2022 Elsevier B.V. All rights reserved.
C1 [Huang, Zijie; Shao, Zhiqing; Fan, Guisheng; Yu, Huiqun; Yang, Kang; Zhou, Ziyi] East China Univ Sci & Technol, Dept Comp Sci & Engn, Shanghai 200237, Peoples R China.
C3 East China University of Science & Technology
RP Shao, ZQ; Fan, GS (corresponding author), East China Univ Sci & Technol, Dept Comp Sci & Engn, Shanghai 200237, Peoples R China.
EM hzj@mail.ecust.edu.cn; zshao@ecust.edu.cn; gsfan@ecust.edu.cn;
   yhq@ecust.edu.cn; 15921709583@163.com; zhouziyi@mail.ecust.edu.cn
RI Huang, Zijie/JUF-4746-2023
OI Huang, Zijie/0000-0002-8911-9889
FU National Natural Science Foundation of China [61772200]; Natural Science
   Foundation of Shanghai [21ZR1416300]
FX This work was partially supported by the National Natural Science
   Foundation of China under Grant No. 61772200, and the Natural Science
   Foundation of Shanghai under Grant No. 21ZR1416300.
CR Aniche M, 2018, EMPIR SOFTW ENG, V23, P2121, DOI 10.1007/s10664-017-9540-2
   Chen TH, 2016, 13TH WORKING CONFERENCE ON MINING SOFTWARE REPOSITORIES (MSR 2016), P165, DOI [10.1109/MSR.2016.026, 10.1145/2901739.2901758]
   Chen TH, 2016, FSE'16: PROCEEDINGS OF THE 2016 24TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON FOUNDATIONS OF SOFTWARE ENGINEERING, P666, DOI 10.1145/2950290.2950303
   Chen TH, 2016, IEEE T SOFTWARE ENG, V42, P1148, DOI 10.1109/TSE.2016.2553039
   Chen TH, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P1001, DOI 10.1145/2568225.2568259
   Chen TH, 2015, 2015 13TH IEEE INTERNATIONAL CONFERENCE ON DATA ENGINEERING WORKSHOPS (ICDEW), P245, DOI 10.1109/ICDEW.2015.7129584
   Cook W.R., 2006, COMP 21 ACM SIGPLAN, P926
   de Almeida FG, 2019, INT C PROGRAM COMPRE, P116, DOI 10.1109/ICPC.2019.00025
   Dyer R, 2015, ACM T SOFTW ENG METH, V25, DOI 10.1145/2803171
   Holder S, 2008, COMM COM INF SC, V8, P43
   Lenarduzzi V, 2021, J SYST SOFTWARE, V171, DOI 10.1016/j.jss.2020.110806
   Loli Samuel, 2020, SBES '20: Proceedings of the 34th Brazilian Symposium on Software Engineering, P82, DOI 10.1145/3422392.3422432
   Lorenz M, 2017, PROCEEDINGS OF THE 50TH ANNUAL HAWAII INTERNATIONAL CONFERENCE ON SYSTEM SCIENCES, P4877
   Meurice L, 2016, 2016 IEEE INTERNATIONAL CONFERENCE ON SOFTWARE QUALITY, RELIABILITY AND SECURITY (QRS 2016), P262, DOI 10.1109/QRS.2016.38
   Meurice L, 2016, LECT NOTES COMPUT SC, V9694, P491, DOI 10.1007/978-3-319-39696-5_30
   Muse Biruk Asmare, 2020, MSR '20: Proceedings of the 17th International Conference on Mining Software Repositories, P327, DOI 10.1145/3379597.3387467
   Nagy C, 2017, IEEE INT WORK C SO, P147, DOI 10.1109/SCAM.2017.19
   Nagy C, 2015, 2015 22ND INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER), P580, DOI 10.1109/SANER.2015.7081881
   Nazari Mir Hossein Seyed, 2019, 2019 Conference on Lasers and Electro-Optics Europe & European Quantum Electronics Conference (CLEO/Europe-EQEC), DOI 10.1109/CLEOE-EQEC.2019.8872792
   Palomba F, 2021, IEEE T SOFTWARE ENG, V47, P108, DOI 10.1109/TSE.2018.2883603
   Palomba F, 2018, IEEE T SOFTWARE ENG, V44, P977, DOI 10.1109/TSE.2017.2752171
   Palomba F, 2018, EMPIR SOFTW ENG, V23, P1188, DOI 10.1007/s10664-017-9535-z
   Procaccianti G, 2016, P 10 ACM IEEE INT S, P36
   Silva TM, 2019, PROCEEDINGS OF THE XXXIII BRAZILIAN SYMPOSIUM ON SOFTWARE ENGINEERING, SBES 2019, P94, DOI 10.1145/3350768.3351796
   Singh R, 2016, PROCEEDINGS OF THE 2016 ACM/SPEC INTERNATIONAL CONFERENCE ON PERFORMANCE ENGINEERING (ICPE'16), P309, DOI 10.1145/2851553.2851576
   Torres A, 2017, INFORM SOFTWARE TECH, V82, P1, DOI 10.1016/j.infsof.2016.09.009
   Tsantalis N, 2018, 2018 25TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION AND REENGINEERING (SANER 2018), P4, DOI 10.1109/SANER.2018.8330192
   Tufano M, 2017, J SOFTW-EVOL PROC, V29, DOI 10.1002/smr.1838
   Vial G, 2019, IEEE SOFTWARE, V36, P43, DOI 10.1109/MS.2018.227105428
   Wegrzynowicz P, 2013, FED CONF COMPUT SCI, P1475
NR 30
TC 4
Z9 4
U1 3
U2 5
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAY 1
PY 2022
VL 217
AR 102778
DI 10.1016/j.scico.2022.102778
EA FEB 2022
PG 10
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 0D6NG
UT WOS:000776109200005
DA 2024-07-18
ER

PT J
AU Beelen, L
   Jansen, S
   Overbeek, S
AF Beelen, Luc
   Jansen, Slinger
   Overbeek, Sietse
TI Are you of value to me? A partner selection reference method for
   software ecosystem orchestrators
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Software ecosystems; Partner selection criteria; Partner selection
   reference method; Software ecosystem orchestration
ID RESEARCH-AND-DEVELOPMENT; STRATEGIC ALLIANCES; CRITERIA; PLATFORM;
   SUPPLIER; MODEL; SEARCH; MARKET; SENSE
AB Software ecosystem orchestrators have insufficient insight and lack academic guidance in the partner selection criteria and methods available to aid them in their partner selection process. Therefore, orchestrators fail to vet, select, and engage suitable partners for their software ecosystem. Through six case studies with software orchestrators, we extract six industry methods for partner selection. Using situational method engineering, we create PALERMO: the PArtner seLEction Reference MethOd, which is subsequently evaluated by three different experts in the context of three more case studies.
   The method is composed and described using method engineering, and a list of partner selection criteria. Together, the method and list of criteria aid orchestrators in organizing and optimizing the partner selection process. The evaluation of the method in three extensive case studies, shows that the method is complete, effective, useful, and easy to use. (C) 2021 The Authors. Published by Elsevier B.V.
C1 [Beelen, Luc; Jansen, Slinger; Overbeek, Sietse] Univ Utrecht, Princetonpl 5, NL-3584 CC Utrecht, Netherlands.
   [Jansen, Slinger] LUT Univ, POB 20, FI-53851 Lappeenranta, Finland.
C3 Utrecht University; Lappeenranta-Lahti University of Technology LUT
RP Jansen, S (corresponding author), Univ Utrecht, Princetonpl 5, NL-3584 CC Utrecht, Netherlands.; Jansen, S (corresponding author), LUT Univ, POB 20, FI-53851 Lappeenranta, Finland.
EM l.g.n.m.beelen@uu.nl; slinger.jansen@uu.nl; s.j.overbeek@uu.nl
RI Roijackers, Slinger/Y-4244-2019
OI Roijackers, Slinger/0000-0003-3752-2868
CR ABRATT R, 1986, IND MARKET MANAG, V15, P293, DOI 10.1016/0019-8501(86)90021-0
   Al-Khalifa A.K., 1999, European Journal of Marketing, V33, P1064, DOI DOI 10.1108/03090569910292276
   Alves C, 2017, ICEIS: PROCEEDINGS OF THE 19TH INTERNATIONAL CONFERENCE ON ENTERPRISE INFORMATION SYSTEMS - VOL 3, P215, DOI 10.5220/0006269402150226
   Angeles R, 2000, INFORM MANAGE, V37, P241, DOI 10.1016/S0378-7206(99)00054-3
   [Anonymous], 2010, SAGE HDB GROUNDED TH
   [Anonymous], 2017, 9 INT WORKSH SOFTW E
   [Anonymous], 2011, P WORKSH SOFTW EC
   [Anonymous], 2006, P EUROPEAN NETWORK C
   [Anonymous], 2016, EUR C INF SYST 2016
   Baars A, 2012, LECT NOTES BUS INF P, V114, P168
   Bech H.P., 2015, Building successful partner channels: Channel development management in the software industry
   Belo I, 2021, INFORMATION, V12, DOI 10.3390/info12060240
   Benlian A, 2015, J INF TECHNOL-UK, V30, P209, DOI 10.1057/jit.2015.6
   Bierly PE, 2007, LONG RANGE PLANN, V40, P134, DOI 10.1016/j.lrp.2007.03.001
   Brinkkemper S, 1999, INFORM SYST, V24, P209, DOI 10.1016/S0306-4379(99)00016-2
   Brinkkemper S, 1996, INFORM SOFTWARE TECH, V38, P275, DOI 10.1016/0950-5849(95)01059-9
   Büyüközkan G, 2008, INT J PROD ECON, V113, P148, DOI 10.1016/j.ijpe.2007.01.016
   Cartwright S., 1993, Academy of Management Executive, V7, P57, DOI DOI 10.5465/AME.1993.9411302324
   Ceccagnoli M, 2012, MIS QUART, V36, P263
   Chen SH, 2008, MANAGE DECIS, V46, P449, DOI 10.1108/00251740810863889
   Cusumano M., 2010, STAYING POWER 6 ENDU
   Cusumano M, 2010, COMMUN ACM, V53, P32, DOI 10.1145/1629175.1629189
   Das TK, 2006, INT J ENTREP BEHAV R, V12, P114, DOI 10.1108/13552550610667422
   De Boer L., 2001, European Journal of Purchasing Supply Management, V7, P75, DOI [10.1016/S0969-7012(00)00028-9, DOI 10.1016/S0969-7012(00)00028-9]
   de Reuver M, 2018, J INF TECHNOL-UK, V33, P124, DOI 10.1057/s41265-016-0033-3
   de Reuver M, 2008, 21ST BLED ECONFERENCE ECOLLABORATION: OVERCOMING BOUNDARIES THROUGH MULTI-CHANNEL INTERACTION, CONFERENCE PROCEEDINGS, P103
   Dekker H., 2007, AM ACC ASS 2008 MAN
   den Hartigh E, 2013, SOFTWARE ECOSYSTEMS: ANALYZING AND MANAGING BUSINESS NETWORKS IN THE SOFTWARE INDUSTRY, P221
   Dickson G. W., 1966, J PURCHASING, V2, P5, DOI [DOI 10.1111/J.1745-493X.1966.TB00818.X, 10.1111/j.1745-493X.1966.tb00818.x]
   Doherty AM, 2009, J BUS RES, V62, P528, DOI 10.1016/j.jbusres.2008.06.011
   Dong L, 2006, INT BUS REV, V15, P577, DOI 10.1016/j.ibusrev.2006.09.003
   Duysters G, 1999, R&D MANAGE, V29, P343, DOI 10.1111/1467-9310.00145
   Emden Z, 2006, J PROD INNOVAT MANAG, V23, P330, DOI 10.1111/j.1540-5885.2006.00205.x
   Farshidi S, 2018, J DECIS SYST, V27, P98, DOI 10.1080/12460125.2018.1464821
   Fincher S, 2005, EXPERT SYST, V22, P89, DOI 10.1111/j.1468-0394.2005.00299.x
   Forbes, 2018, The Future of National Development Banks
   Franco M, 2010, INT J BUS ENVIRON, V3, P267, DOI 10.1504/IJBE.2010.034824
   Gavrilova T, 2012, J KNOWL MANAG, V16, P523, DOI 10.1108/13673271211246112
   Geringer J.M., 1988, JOINT VENTURE PARTNE
   Giessmann A., 2012, J. Inf. Technol. Theory Appl., V13, P31
   Gorwa R, 2019, INFORM COMMUN SOC, V22, P854, DOI 10.1080/1369118X.2019.1573914
   Guest G., 2012, Applied thematicanalysis
   Henderson-Sellers B., 2014, Situational Method Engineering
   Hevner AR, 2004, MIS QUART, V28, P75, DOI 10.2307/25148625
   Hitt MA, 2000, ACAD MANAGE J, V43, P449, DOI 10.5465/1556404
   Hong S., 1993, Proceeding of the Twenty-Sixth Hawaii International Conference on System Sciences (Cat. No.93TH0501-7), P689, DOI 10.1109/HICSS.1993.284253
   Huang CY, 2003, INT J PROD RES, V41, P1855, DOI 10.1080/0020754031000087210
   Huang XG, 2004, INT J COMPUT INTEG M, V17, P294, DOI 10.1080/09511920310001654292
   Hutzschenreuter T, 2010, J KNOWL MANAG, V14, P428, DOI 10.1108/13673271011050148
   Iansiti M, 2004, HARVARD BUS REV, V82, P68
   Jansen S., 2009, P 1 INT WORKSHOP SOF, P34
   Jansen S, 2020, INFORM SOFTWARE TECH, V118, DOI 10.1016/j.infsof.2019.106219
   Jansen S, 2015, LECT NOTES COMPUT SC, V9278, P121, DOI 10.1007/978-3-319-23727-5_10
   Jansen S, 2014, INFORM SOFTWARE TECH, V56, P1508, DOI 10.1016/j.infsof.2014.04.006
   Jansen S, 2013, SOFTWARE ECOSYSTEMS: ANALYZING AND MANAGING BUSINESS NETWORKS IN THE SOFTWARE INDUSTRY, P13
   Jansen S, 2012, J SYST SOFTWARE, V85, P1495, DOI 10.1016/j.jss.2011.12.007
   Jansen S, 2009, PROC INT CONF SOFTW, P187, DOI 10.1109/ICSE-COMPANION.2009.5070978
   Jarimo T, 2006, INT FED INFO PROC, V224, P389
   Joshua JV, 2013, INT J ADV COMPUT SC, V4, P242
   Jovanovic M, 2022, TECHNOVATION, V118, DOI 10.1016/j.technovation.2020.102218
   Kabbedijk J, 2011, LECT NOTES BUS INF P, V80, P44
   Kaistinen J., 2017, PARTNER ECOSYSTEMS E
   Kannan G, 2007, INT J PROD RES, V45, P3831, DOI 10.1080/00207540600676676
   Keung SNLC, 2008, LECT NOTES ARTIF INT, V5396, P43, DOI 10.1007/978-3-540-92803-4_3
   Kitchenham Barbara, 2004, Joint Technical Report, V2004, P1
   Kraus S, 2018, REV MANAG SCI, V12, P1025, DOI 10.1007/s11846-017-0237-0
   KREINER K, 1993, ORGAN STUD, V14, P189, DOI 10.1177/017084069301400202
   Lantz M., 2013, SOFTWARE ECOSYSTEM G
   Lau HCW, 2001, INT J COMP INTEG M, V14, P186, DOI 10.1080/09511920150216305
   Maimbo H, 2005, PACIFIC ASIA CONFERENCE ON INFORMATION SYSTEMS 2005, SECTIONS 1-8 AND POSTER SESSIONS 1-6, P1281
   Mat N.A.C., 2009, ACIS 2009 P
   Mathijssen M., 2020, ARXIV200710611
   Meffert J., 2017, MCKINSEY INSIGHTS
   Metallo C, 2018, TECHNOL FORECAST SOC, V136, P298, DOI 10.1016/j.techfore.2018.01.020
   Miles M. B., 1984, Qualitative data analysis: An expanded sourcebook
   Molenaar S., 2018, P INT WORKSH SOFTW I
   Möller K, 2007, IND MARKET MANAG, V36, P895, DOI 10.1016/j.indmarman.2007.05.016
   Pant Vik, 2018, Perspectives in Business Informatics Research. 17th International Conference, BIR 2018. Proceedings. Lecture Notes in Business Information Processing (LNBIP 330), P47, DOI 10.1007/978-3-319-99951-7_4
   Parker GG, 2005, MANAGE SCI, V51, P1494, DOI 10.1287/mnsc.1050.0400
   Partanen J, 2012, IND MARKET MANAG, V41, P481, DOI 10.1016/j.indmarman.2011.05.002
   Peffers Ken, 2012, Design Science Research in Information Systems. Advances in Theory and Practice. Proceedings 7th International Conference, DESRIST 2012, P398, DOI 10.1007/978-3-642-29863-9_29
   Plakidas Konstantinos., 2016, Proceedings of the 20th International Systems and Software Product Line Conference, SPLC'16, P89, DOI DOI 10.1145/2934466.2934488
   Prat N, 2015, J MANAGE INFORM SYST, V32, P229, DOI 10.1080/07421222.2015.1099390
   Rickmann T., 2014, 20 AM C INF SYST
   Robson M., 2002, J GEN MANAG, V28, P1
   Runeson P, 2009, EMPIR SOFTW ENG, V14, P131, DOI 10.1007/s10664-008-9102-8
   Shah RH, 2008, STRATEGIC MANAGE J, V29, P471, DOI 10.1002/smj.656
   Solesvik MZ, 2010, IND MANAGE DATA SYST, V110, P841, DOI 10.1108/02635571011055081
   Spencer Donna., 2004, CARD SORTING DEFINIT
   Spencer L., 2013, QUALITATIVE RES PRAC, V2nd
   Teddlie C, 2007, J MIX METHOD RES, V1, P77, DOI 10.1177/2345678906292430
   Tiwana A., 2013, PLATFORM ECOSYSTEMS
   Traitler H, 2011, J FOOD SCI, V76, pR62, DOI 10.1111/j.1750-3841.2010.01998.x
   van Angeren J., 2011, P 3 INT WORKSH SOFTW
   van de Weerd I., 2009, HDB RES MODERN SYSTE, P35
   van de Weerd I, 2007, INT FED INFO PROC, V244, P313
   van Vulpen P, 2022, SCI COMPUT PROGRAM, V213, DOI 10.1016/j.scico.2021.102722
   Williamson PJ, 2012, CALIF MANAGE REV, V55, P24, DOI 10.1525/cmr.2012.55.1.24
   Wouters J., 2019, INT C SOFTW BUS, P31
   Wu C, 2012, INT J OPER PROD MAN, V32, P79, DOI 10.1108/01443571211195745
   Wu C, 2011, J PURCH SUPPLY MANAG, V17, P256, DOI 10.1016/j.pursup.2011.09.002
   Wu DS, 2009, EUR J OPER RES, V197, P548, DOI 10.1016/j.ejor.2008.06.032
   Wu WY, 2009, EXPERT SYST APPL, V36, P4646, DOI 10.1016/j.eswa.2008.06.049
   Xia WJ, 2007, OMEGA-INT J MANAGE S, V35, P494, DOI 10.1016/j.omega.2005.09.002
   YIN RK, 1981, ADMIN SCI QUART, V26, P58, DOI 10.2307/2392599
   Zhong Y.X., 2015, INT J RES STUD SCI E, V2, P8
   Zutshi Ravinder K., 2009, International Entrepreneurship and Management Journal, V5, P369, DOI 10.1007/s11365-008-0076-1
NR 107
TC 7
Z9 8
U1 0
U2 24
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 1
PY 2022
VL 214
AR 102733
DI 10.1016/j.scico.2021.102733
EA OCT 2021
PG 27
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Social Science Citation Index (SSCI)
SC Computer Science
GA XA8ZO
UT WOS:000720929000004
OA Green Published, hybrid
DA 2024-07-18
ER

PT J
AU Guérin, S
   Polet, G
   Silva, C
   Champeau, J
   Bach, JC
   Martínez, S
   Dagnat, F
   Beugnard, A
AF Guerin, Sylvain
   Polet, Guillaume
   Silva, Caine
   Champeau, Joel
   Bach, Jean-Christophe
   Martinez, Salvador
   Dagnat, Fabien
   Beugnard, Antoine
TI PAMELA: An annotation-based Java modeling framework
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Model driven engineering; Object oriented programming; Metaprogramming
AB This article presents PAMELA, an annotation-based Java modeling framework. PAMELA provides a smooth integration between model and code and enables Java developers to handle software development both at conceptual level and at source-code level, without code transformation and/or generation, avoiding round-trip-related issues. (C) 2021 Published by Elsevier B.V.
C1 [Guerin, Sylvain; Polet, Guillaume; Silva, Caine; Champeau, Joel] ENSTA Bretagne, Lab STICC, UMR 6285, Brest, France.
   [Bach, Jean-Christophe; Martinez, Salvador; Dagnat, Fabien; Beugnard, Antoine] IMT Atlantique, Lab STICC, UMR 6285, Brest, France.
C3 ENSTA Bretagne; Universite de Bretagne Occidentale; Universite de
   Bretagne Occidentale; IMT - Institut Mines-Telecom; IMT Atlantique
RP Guérin, S (corresponding author), ENSTA Bretagne, Lab STICC, UMR 6285, Brest, France.
EM sylvain.guerin@openflexo.org
RI Martínez, Salvador/F-2081-2016
OI Martínez, Salvador/0000-0002-3978-9876; Guerin,
   Sylvain/0000-0001-7473-470X
CR Abrial J R, 2010, Modeling in Event-B: system and softeng
   Bencomo N, 2019, SOFTW SYST MODEL, V18, P3049, DOI 10.1007/s10270-018-00712-x
   Black Andrew P, 2010, Pharo by example
   Boronat A, 2019, 34TH IEEE/ACM INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING (ASE 2019), P874, DOI 10.1109/ASE.2019.00086
   Buschmann F., 2008, Pattern-Oriented Software Architecture: A System of Patterns, V1
   Cavarle Glenn, 2016, P 11 ED INT WORKSH S P 11 ED INT WORKSH S, P15
   Cazzola W., 2004, Research Reports on Mathematical and Computing Sciences Series C (Computer Science), P21
   Chiba S, 2000, LECT NOTES COMPUT SC, V1850, P313
   Denker M, 2010, LECT NOTES COMPUT SC, V6395, P138
   Formose team, 2020, FORM ANR PROJ FORM ANR PROJ
   Golra FR, 2016, COMPANION PROCEEDINGS OF THE 15TH INTERNATIONAL CONFERENCE ON MODULARITY (MODULARITY COMPANION'16), P206, DOI 10.1145/2892664.2892701
   IMT Atlantique, 2020, FORM PROT FORM PROT
   Jézéquel JM, 2011, LECT NOTES COMPUT SC, V6491, P201, DOI 10.1007/978-3-642-18023-1_5
   Kuhn Adrian, 2008, 3 INT WORKSH MOD RUN 3 INT WORKSH MOD RUN, P10
   Lethbridge TC, 2016, LECT NOTES COMPUT SC, V9953, P187, DOI 10.1007/978-3-319-47169-3_14
   Mongiello M, 2015, 2015 IEEE/ACM 10TH INTERNATIONAL SYMPOSIUM ON SOFTWARE ENGINEERING FOR ADAPTIVE AND SELF-MANAGING SYSTEMS, P24, DOI 10.1109/SEAMS.2015.11
   OMG, 2012, SEM INF MOD FED SIMF SEM INF MOD FED SIMF
   Openflexo team, 2020, OP INFR OP INFR
   Pierra G, 2004, INT FED INFO PROC, V156, P13
   Plantec A, 2006, SCHRIFTEN INFORMATIK, V19, P261
   Sengupta K., 2014, ENCY SOCIAL NETWORK, P2374, DOI [DOI 10.1007/978-1-4614-6170-8_113, 10.1007/978-1-4614-6170-8 113]
   Silva Caine, 2020, ARES 2020: Proceedings of the 15th International Conference on Availability, Reliability and Security, DOI 10.1145/3407023.3409185
   Song Hui, 2010, P 5 INT WORKSH MOD R P 5 INT WORKSH MOD R, P15
   Stahl T., 2006, Model-driven software development: technology, engineering, management
   van Lamsweerde A., 2009, REQUIREMENTS ENG SYS
NR 25
TC 3
Z9 3
U1 1
U2 7
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 1
PY 2021
VL 210
AR 102668
DI 10.1016/j.scico.2021.102668
EA JUL 2021
PG 11
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA TH5WZ
UT WOS:000672161400003
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Salaün, G
AF Salauen, Gwen
TI Quantifying the similarity of non-bisimilar labelled transition systems
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Equivalence checking; Labelled transition systems; Similarity measure;
   Internet of things; Process matching
AB Equivalence checking is an established technique for automatically verifying that two behavioural models (Labelled Transition Systems, LTSs) are equivalent from the point of view of an external observer. When these models are not equivalent, the checker returns a Boolean result with a counterexample, which is a sequence of actions leading to a state where the equivalence relation is not satisfied. However, this counterexample does not give any indication of how far the two LTSs are one from another. One can wonder whether they are almost identical or totally different, which is quite different from a design or debugging point of view. In this paper, we present an approach for measuring the similarity between two LTS models. The set of metrics is computed automatically using a tool we implemented. Beyond presenting the foundations of the proposed solution, we will show how it can be applied to two concrete application domains for supporting the construction of IoT applications on the one hand and for contributing to the process model matching problem on the other. (C) 2020 Elsevier B.V. All rights reserved.
C1 [Salauen, Gwen] Univ Grenoble Alpes, Grenoble INP, CNRS, INRIA,LIG, F-38000 Grenoble, France.
C3 Communaute Universite Grenoble Alpes; Institut National Polytechnique de
   Grenoble; Universite Grenoble Alpes (UGA); Centre National de la
   Recherche Scientifique (CNRS); Inria
RP Salaün, G (corresponding author), Univ Grenoble Alpes, Grenoble INP, CNRS, INRIA,LIG, F-38000 Grenoble, France.
EM gwen.salaun@inria.fr
CR Baier J. Katoen, 2008, PRINCIPLES MODEL CHE
   Bordeaux L, 2005, LECT NOTES COMPUT SC, V3324, P15
   Cerny P, 2010, LECT NOTES COMPUT SC, V6269, P253, DOI 10.1007/978-3-642-15375-4_18
   Champelovier D., 2018, Reference Manual of the LNT to LOTOS Translator (Version 6.7)
   Duran Francisco, 2019, Software Technology: Methods and Tools. 51st International Conference, TOOLS 2019. Proceedings. Lecture Notes in Computer Science (LNCS 11771), P252, DOI 10.1007/978-3-030-29852-4_21
   Garavel Hubert, 2013, International Journal on Software Tools for Technology Transfer, V15, P89, DOI 10.1007/s10009-012-0244-z
   ISO/IEC, 2013, ISO/IEC 19510
   KANELLAKIS PC, 1990, INFORM COMPUT, V86, P43, DOI 10.1016/0890-5401(90)90025-D
   Krishna A., 2017, P INT C INT FORM MET, P323
   Krishna A, 2019, 2019 IEEE/ACM 41ST INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING: COMPANION PROCEEDINGS (ICSE-COMPANION 2019), P19, DOI [10.1109/ICSE-Companion.2019.00028, 10.1109/ICSE.Companion.2019.00028]
   Krishna A, 2019, SCI COMPUT PROGRAM, V170, P1, DOI 10.1016/j.scico.2018.09.007
   KUNZE T, 2011, P BPM 11, P166
   Mateescu R., 2008, P FM 08
   Melnik S, 2002, PROC INT CONF DATA, P117, DOI 10.1109/ICDE.2002.994702
   Milner R., 1989, Communication and concurrency
   Nejati S, 2007, PROC INT CONF SOFTW, P54
   Ouederni M., 2017, PROC SAC 17, P1334
   Ouederni M., 2011, P SAC 2011 ACM, P1560
   Ouederni M, 2010, LECT NOTES COMPUT SC, V6470, P619, DOI 10.1007/978-3-642-17358-5_47
   PAIGE R, 1987, SIAM J COMPUT, V16, P973, DOI 10.1137/0216062
   Poizat P., 2012, P 27 ANN ACM S APPL, P1927, DOI [10.1145/2245276.2232095, DOI 10.1145/2245276.2232095]
   Romero Hernandez David, 2012, Formal Techniques for Distributed Systems. Joint 14th IFIP WG 6.1 International Conference, FMOODS 2012 and 32nd IFIP WG 6.1 International Conference, FORTE 2012, P169, DOI 10.1007/978-3-642-30793-5_11
   Romero-Hernández D, 2014, LECT NOTES COMPUT SC, V8461, P249, DOI 10.1007/978-3-662-43613-4_16
   Ruvo G.D., 2015, LECT NOTES COMPUTER, P181
   Salaün G, 2004, IEEE INTERNATIONAL CONFERENCE ON WEB SERVICES, PROCEEDINGS, P43, DOI 10.1109/ICWS.2004.1314722
   Salaun G., 2020, DLTS TOOL EXAMPLES
   Salaun G., 2019, P FOCLASA 19, P211
   Sokolsky O, 2006, LECT NOTES COMPUT SC, V3920, P426
   Walkinshaw N, 2013, ACM T SOFTW ENG METH, V22, DOI 10.1145/2430545.2430549
   Weidlich Matthias, 2011, Advanced Information Systems Engineering. Proceedings 23rd International Conference, CAiSE 2011, P267, DOI 10.1007/978-3-642-21640-4_21
   Xing ZC, 2011, LECT NOTES COMPUT SC, V6991, P537, DOI 10.1007/978-3-642-24559-6_36
NR 31
TC 1
Z9 1
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 1
PY 2021
VL 202
AR 102580
DI 10.1016/j.scico.2020.102580
PG 12
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA PC2SJ
UT WOS:000596856600001
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Siirtola, A
   Heljanko, K
AF Siirtola, Antti
   Heljanko, Keijo
TI An optimal cut-off algorithm for parameterised refinement checking
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Compositional verification; Parameterized systems; Cut-off;
   Satisfiability modulo theories; Automated verification
ID MODEL CHECKING; VERIFICATION; SYSTEMS
AB The verification of contemporary distributed software systems is challenging, because they are heavily parameterised, containing components whose number and connections cannot be a priori fixed. In this work, we consider the multi-parameterised verification of safety properties by refinement checking in the context of labelled transition systems (LTSs). The LTSs are parameterised by using first-order constructs, sorts, variables, and predicates, while preserving compositionality. This allows us to parameterise not only the number of replicated components but also the communication topology of the system. Our approach to solving a verification task in the parameterised LTS formalism is to determine a finite cut-off set of parameter values such that in order to prove a parameterised system implementation correct with respect to its specification, it is sufficient to consider only finitely many instances of the parameterised system generated by the parameter values in the cut-off set.
   In the conference version of this work, we converted the problem of determining a finite cut-off set into the unsatisfiability of a first-order formula and provided a satisfiability modulo theories (SMT)-based semi-algorithm for dynamically, i.e., iteratively, computing a cut-off set. In this article, we present a new version of the algorithm and prove that the cut-off sets computed by this new algorithm are optimal. Hence, we call the new version the optimal cut-off algorithm. The algorithm will always terminate for system topologies expressible in the there exists*for all* fragment of first-order logic. It also enables us to consider systems with topologies beyond this fragment, but for these systems, the algorithm is not guaranteed to terminate. We have implemented the approach on top of the Z3 SMT solver and successfully applied it to several system models. As a running example, we consider the leader election phase of the generalised (Byzantine) Raft consensus algorithm and prove the optimal cut-off set of six (respectively, thirteen) parameter values corresponding to instances up to three (respectively, four) servers. To the best of our knowledge, this is the first time a Byzantine variant of the parameterised Raft leader election is automatically verified. (C) 2020 Elsevier B.V. All rights reserved.
C1 [Siirtola, Antti] Univ Oulu, Fac Informat Technol & Elect Engn, Oulu, Finland.
   [Heljanko, Keijo] Univ Helsinki, Dept Comp Sci, Helsinki, Finland.
   [Heljanko, Keijo] Helsinki Inst Informat Technol HIIT, Helsinki, Finland.
C3 University of Oulu; University of Helsinki; University of Helsinki;
   Aalto University
RP Siirtola, A (corresponding author), Univ Oulu, Fac Informat Technol & Elect Engn, Oulu, Finland.
EM antti.siirtola@oulu.fi; keijo.heljanko@helsinki.fi
RI Heljanko, Keijo/C-7603-2011
OI Heljanko, Keijo/0000-0002-4547-2701; Siirtola, Antti/0000-0001-9118-5087
FU Academy of Finland [313469, 277522]; Academy of Finland (AKA) [277522,
   313469] Funding Source: Academy of Finland (AKA)
FX The research is partly funded by Academy of Finland projects 313469 and
   277522.
CR Abadi A, 2010, J SYMB COMPUT, V45, P153, DOI 10.1016/j.jsc.2009.03.003
   Abdulla P, 2016, INT J SOFTW TOOLS TE, V18, P495, DOI 10.1007/s10009-015-0406-x
   Aminof B, 2018, DISTRIB COMPUT, V31, P187, DOI 10.1007/s00446-017-0302-6
   Bouajjani A, 2008, FORM METHOD SYST DES, V32, P129, DOI 10.1007/s10703-008-0048-7
   Bovet J, 2008, SOFTWARE PRACT EXPER, V38, P1305, DOI 10.1002/spe.872
   Clarke E, 2004, LECT NOTES COMPUT SC, V3170, P276
   Colbourn CJ, 2001, INFORM COMPUT, V169, P160, DOI [10.1006/inco.2001.3044, 10.1006/inco.2000.2844]
   COPELAND C., 2014, Tangaroa: a Byzantine fault tolerant raft
   Creese S.J., 2001, THESIS
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Emerson EA, 2004, LECT NOTES COMPUT SC, V3210, P325
   Emerson EA, 2003, LECT NOTES COMPUT SC, V2860, P247
   Emerson EA, 2002, LECT NOTES COMPUT SC, V2280, P251
   Emerson EA, 2000, LECT NOTES ARTIF INT, V1831, P236
   Emerson EA., 2003, INT J FOUND COMPUT S, V14, P527, DOI DOI 10.1142/S0129054103001881
   Finkel A, 2001, THEOR COMPUT SCI, V256, P63, DOI 10.1016/S0304-3975(00)00102-X
   Gallier J.H., 2015, LOGIC COMPUTER SCI F
   Gibson-Robinson T, 2016, INT J SOFTW TOOLS TE, V18, P149, DOI 10.1007/s10009-015-0377-y
   Gurevich Y., 1993, WORLD SCI SERIES COM, V40, P254
   Hanna Y, 2010, LECT NOTES COMPUT SC, V6447, P338, DOI 10.1007/978-3-642-16901-4_23
   Haustein M, 2008, DATA KNOWL ENG, V65, P147, DOI 10.1016/j.datak.2007.11.001
   Hoare CAR., 1985, Communicating Sequential Processes
   Holzmann GJ, 2004, The SPIN model checker: primer and reference manual, V1003
   Kaiser A, 2010, LECT NOTES COMPUT SC, V6174, P645
   KURSHAN RP, 1995, INFORM COMPUT, V117, P1, DOI 10.1006/inco.1995.1024
   Lazic R, 1999, THESIS
   Lazic R., 2000, LNCS, V1877, P581
   Liu PZ, 2018, ACM SIGPLAN NOTICES, V53, P105, DOI 10.1145/3192366.3192419
   Maric O, 2017, LECT NOTES COMPUT SC, V10427, P217, DOI 10.1007/978-3-319-63390-9_12
   McKay BD, 2014, J SYMB COMPUT, V60, P94, DOI 10.1016/j.jsc.2013.09.003
   Ongaro Diego, 2014, 2014 USENIX ANN TECH, P305, DOI DOI 10.1007/0-387-34805-0_21
   Roscoe AW, 2010, TEXTS COMPUT SCI, P3, DOI 10.1007/978-1-84882-258-0_1
   Siirtola Antti, 2010, 2010 Tenth International Conference on Application of Concurrency to System Design (ACSD 2010), P105, DOI 10.1109/ACSD.2010.16
   Siirtola A., 2018, LNCS, V11222, P256
   Siirtola A., 2020, BOUNDS GIT REPOSITOR
   Siirtola A, 2017, INT CONF APPL CONCUR, P39, DOI 10.1109/ACSD.2017.15
   Siirtola A, 2015, ACM T EMBED COMPUT S, V14, DOI 10.1145/2776892
   Siirtola A, 2015, INFORM COMPUT, V244, P23, DOI 10.1016/j.ic.2015.08.002
   Siirtola A, 2013, INT CONF APPL CONCUR, P60, DOI 10.1109/ACSD.2013.9
   Siirtola A, 2010, LECT NOTES COMPUT SC, V6447, P321, DOI 10.1007/978-3-642-16901-4_22
   Siirtola Antti, 2014, LECT NOTES COMPUTER, V8413, P599
   VALMARI A, 1991, PROTOCOL SPECIFICATION, TESTING, AND VERIFICATION, XI, P3
   WOLPER P, 1990, LECT NOTES COMPUT SC, V407, P68
   Woos D, 2016, PROCEEDINGS OF THE 5TH ACM SIGPLAN CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS (CPP'16), P154, DOI 10.1145/2854065.2854081
   Yang Q., 2010, Software Engineering, 2010 ACM/IEEE 32nd International Conference on, V1, P345, DOI DOI 10.1145/1806799.1806851
   Zuck L, 2004, COMPUT LANG SYST STR, V30, P139, DOI 10.1016/j.cl.2004.02.006
NR 46
TC 0
Z9 0
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 15
PY 2020
VL 198
AR 102517
DI 10.1016/j.scico.2020.102517
PG 31
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA NS6CK
UT WOS:000572346900003
OA Green Accepted
DA 2024-07-18
ER

PT J
AU Vidal, M
   Massoni, T
   Ramalho, F
AF Vidal, Marzina
   Massoni, Tiago
   Ramalho, Franklin
TI A domain-specific language for verifying software requirement
   constraints
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE GIRL; Alloy; Requirement Constraints; DSL
AB Software requirement analysis can undoubtedly benefit from prevention and early detection of failures, in particular by some kind of automatic analysis. Formal methods offer means to represent and analyze requirements with rigorous tools, avoiding ambiguities, and allowing automatic verification of requirement consistency. However, formalisms often clash in the culture or lack of software analysts' skills, making them challenging to apply. In this article, we propose a Domain-Specific Language (DSL) based on Set Theory for requirement analysts. The Graphical InvaRiant Language (GIRL) can be used to specify software requirement structural invariants, with entities and their relationships. Those invariants can then have their consistency evaluated by the Alloy Analyzer, based on a translational semantics we provide for transforming GIRL models into Alloy specifications with no user intervention. With a prototypical language editor and transformations implemented into an Eclipse plugin, we carried out a qualitative study, with requirement analysts working for a government software company in Brazil, to evaluate usability and effectiveness of the GIRL-based analysis of real software requirements. The participants were able to effectively use the underlying formal analysis since 79 out of 80 assigned invariants were correctly modeled. While participants perceived as low the complexity of learning and using GIRL's simplest, set-based structures and relationships, the most complex logical structures, such as quantification and implication, were challenging. Furthermore, almost all post-study evaluations from the participants were positive, especially as a tool for discovering requirement inconsistencies. (C) 2020 Elsevier B.V. All rights reserved.
C1 [Vidal, Marzina; Massoni, Tiago; Ramalho, Franklin] Univ Fed Campina Grande, Campina Grande, Paraiba, Brazil.
C3 Universidade Federal de Campina Grande
RP Massoni, T (corresponding author), Univ Fed Campina Grande, Campina Grande, Paraiba, Brazil.
EM marzina@ufcg.edu.br; massoni@computacao.ufcg.edu.br;
   franklin@computacao.ufcg.edu.br
OI Massoni, Tiago/0000-0002-9423-7556
CR Anastasakis K, 2007, LECT NOTES COMPUT SC, V4735, P436
   [Anonymous], 2011, META OBJECT FACILITY
   [Anonymous], 1994, The logical status of diagrams
   [Anonymous], 2003, Software requirements
   Broadfoot GH, 2003, ASIA-PACIFIC SOFTWARE ENGINEERING CONFERENCE, PROCEEDINGS, P49, DOI 10.1109/APSEC.2003.1254357
   Cabot Jordi, 2012, Formal Methods for Model-Driven Engineering. 12th International School of Formal Methods for the Design of Computer, Communication and Software Systems (SFM 2012). Advanced Lectures, P58, DOI 10.1007/978-3-642-30982-3_3
   Damyanov I., 2015, INT J COMPUT APPL, V115, P42
   Fernández DM, 2017, EMPIR SOFTW ENG, V22, P2298, DOI 10.1007/s10664-016-9451-7
   Fish A, 2005, ELECTRON NOTES THEOR, V127, P53, DOI 10.1016/j.entcs.2004.08.047
   Fonteyn ME., 1993, Qualitative Health Research, V3, P430, DOI [DOI 10.1177/104973239300300403, 10.1177/104973239300300403]
   Gheyi R, 2007, ELECTRON NOTES THEOR, V184, P209, DOI 10.1016/j.entcs.2007.03.023
   González CA, 2014, INFORM SOFTWARE TECH, V56, P821, DOI 10.1016/j.infsof.2014.03.003
   Gonzalez Perez Carlos Alberto., 2012, Formal Methods in Software Engineering: Rigorous and Agile Approaches, DOI [10 . 1109 / FormSERA.2012.6229788, DOI 10.1109/FORMSERA.2012.6229788]
   Gramzow RH, 2003, J RES PERS, V37, P41, DOI 10.1016/S0092-6566(02)00535-4
   Guarino A, 2019, IEEE INT CON INF VIS, P7, DOI 10.1109/IV.2019.00011
   Hammer E. M., 1996, Logic and Visual Information
   Hoare T, 2007, I C DEPEND SYS NETWO, P2, DOI 10.1109/DSN.2007.87
   Jackson D., 2000, 22 INT C SOFTW ENG F, P133, DOI DOI 10.1145/336512.336545
   Jackson Daniel, 2006, Software abstractions: Logic, language, and analysis
   Jaspan C, 2009, IEEE SOFTWARE, V26, P60, DOI 10.1109/MS.2009.188
   Karpen Samuel C, 2018, Am J Pharm Educ, V82, P6299, DOI 10.5688/ajpe6299
   Kent S, 2002, LECT NOTES COMPUT SC, V2263, P228
   Kholkar D., 2005, P 2005 ACM S SOFTWAR, P77
   Makinson D., 2012, Sets, Logic and Maths for Computing
   Maoz S, 2011, LECT NOTES COMPUT SC, V6981, P592, DOI 10.1007/978-3-642-24485-8_44
   Moody DL, 2009, IEEE T SOFTWARE ENG, V35, P756, DOI 10.1109/TSE.2009.67
   OMG, 2013, OMG MET FAC MOF COR
   OMG, 2015, XML MET INT XMI VERS
   Perez B., 2018, INF SCI
   Snook C, 2006, ACM T SOFTW ENG METH, V15, P92, DOI 10.1145/1125808.1125811
   Spichkova M., 2014, CORR
   Stahl T., 2006, Model-driven software development: technology, engineering, management
   Stol KJ, 2015, IEEE-ACM INT WKSP CO, P47, DOI 10.1109/CESI.2015.15
   Tahchiev P., 2010, JUnit in Action, V2nd
   van der Linden D, 2017, INT REQUIR ENG CONF, P41, DOI 10.1109/RE.2017.37
   VOLTER M., 2013, DSL ENG DESIGNING IM
   Wohlin C., 2000, EXPT SOFTWARE ENG IN
   Zimmerman MK, 2002, ICSE 2002: PROCEEDINGS OF THE 24TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P33, DOI 10.1109/ICSE.2002.1007954
NR 38
TC 4
Z9 4
U1 1
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 1
PY 2020
VL 197
AR 102509
DI 10.1016/j.scico.2020.102509
PG 26
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA NS6CO
UT WOS:000572347300011
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Davies, J
   Welch, J
   Milward, D
   Harris, S
AF Davies, Jim
   Welch, James
   Milward, David
   Harris, Steve
TI A formal, scalable approach to semantic interoperability
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 18th Brazilian Symposium on Formal Methods (SBMF) as part of 6th
   Brazilian Conference on Software - Theory and Practice (CBSoft)
CY SEP 21-22, 2015-2018
CL Belo Horizonte, BRAZIL
DE Semantic interoperability; Refinement; Formal methods
AB Scientific progress is increasingly dependent upon the acquisition, processing, and analysis of large volumes of data. The validity of results and the safety of applications rely upon an adequate understanding of the real-world semantics of this data: its intended interpretation, and the context in which it is acquired and processed. This presents a challenge: interpretations vary, context is infinite, and either may change over time.
   This paper addresses that challenge. It introduces a language for the description of real-world semantics that allows for multiple, evolving interpretations, together with a high degree of automation in the capture and creation of contextual metadata. The language itself has a mathematical semantics, and supports a notion of semantic interoperability closely related to existing, formal notions of refinement.
   The language represents a scalable approach in three respects: it is compositional, in terms of composing real-world semantics piece by piece; it allows for multiple perspectives, allowing the parallel development of different interpretations; and it supports automatic transformations to and from implementation languages. The practical application of the approach is illustrated with examples from large-scale medical research. (C) 2020 The Authors. Published by Elsevier B.V.
C1 [Davies, Jim; Milward, David] Univ Oxford, Dept Comp Sci, Oxford OX1 3QD, England.
   [Davies, Jim; Welch, James; Harris, Steve] Big Data Inst, Oxford OX3 7LF, England.
C3 University of Oxford
RP Davies, J (corresponding author), Univ Oxford, Dept Comp Sci, Oxford OX1 3QD, England.
EM Jim.Davies@cs.ox.ac.uk; James.Welch@bdi.ox.ac.uk; dmmilward@gmail.com;
   Steve.Harris@bdi.ox.ac.uk
RI Welch, Doctor James/HZI-2490-2023
OI Welch, Doctor James/0000-0002-3563-1254; Davies,
   Jim/0000-0003-4664-6862; Harris, Steve/0000-0002-0899-325X
FU National Institute for Health Research (NIHR) Oxford Biomedical Research
   Centre (BRC)
FX This research has been supported by the National Institute for Health
   Research (NIHR) Oxford Biomedical Research Centre (BRC). We are grateful
   to Charles Crichton, Kinga Varnai, and Kerrie Woods for helpful
   discussions regarding theories of semantic interoperability, to Oliver
   Freeman, Peter Gammon, Soheil Saifipour, Anshita Shrivastava, Andrew
   Tsui, and Ayshe Yalmaz for their work on the catalogue toolkit
   implementation, and to our colleagues in the NIHR Health Informatics
   Collaborative for helping us to evaluate and develop our technology. A
   complete implementation of the toolkit is available at
   metadata-catalogue.org.
CR [Anonymous], MARS CLIM ORB MISH I
   Calegari D, 2015, LECT NOTES COMPUT SC, V8941, P64, DOI [10.1007/978-3-319-15075-8-5, 10.1007/978-3-319-15075-8_5]
   Castro Pablo F., 2016, Formal Methods: Foundations and Applications. 19th Brazilian Symposium, SBMF 2016. Proceedings: LNCS 10090, P112, DOI 10.1007/978-3-319-49815-7_7
   Davies J., 2008, INT C THEOR PRACT EL
   Davies J, 2015, SPLASH WORKSH DOM SP
   Davies J, 2014, SCI COMPUT PROGRAM, V89, P88, DOI 10.1016/j.scico.2013.02.002
   Davies J, 2010, LECT NOTES COMPUT SC, V5966, P40, DOI 10.1007/978-3-642-11659-9_4
   Dugas M, 2016, BMC MED RES METHODOL, V16, DOI 10.1186/s12874-016-0164-9
   Gimenez M., 2014, ARXIV14010974
   Gomes A., 2010, BRAZ S FORM METH, P210
   Grau BC, 2004, LECT NOTES COMPUT SC, V3298, P620
   Hinchey M., 2012, IND STRENTH FORMAL M
   International Standards Organisation, INT STAND MET REG
   Kaura A, 2019, BMJ-BRIT MED J, V367, DOI 10.1136/bmj.l6055
   Kuchinke W, 2009, METHOD INFORM MED, V48, P408, DOI 10.3414/ME9236
   Meier W, 2003, LECT NOTES COMPUT SC, V2593, P169
   Meyer B., 2000, OBJECT ORIENTED SOFT, V2nd
   Milward D, 2019, P 7 INT C MOD DRIV E, V1, P107, DOI [10.5220/0007391101070118, DOI 10.5220/0007391101070118]
   OMG, 2005, UML 20 SUP SPEC
   Ribière M, 2002, LECT NOTES ARTIF INT, V2393, P220
   Rumbaugh J., 1991, OBJECT ORIENTED MODE, V199
   Sprague LA, 2017, WATER RES, V110, P252, DOI 10.1016/j.watres.2016.12.024
   Tennison J., 1998, P 11 KNOWL ACQ WORKS, P18
   Ulrich H, 2016, STUD HEALTH TECHNOL, V228, P162, DOI 10.3233/978-1-61499-678-1-162
   WOODCOCK JCP, 1996, USING Z
NR 25
TC 6
Z9 6
U1 0
U2 7
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 15
PY 2020
VL 192
AR 102426
DI 10.1016/j.scico.2020.102426
PG 26
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA LG6EM
UT WOS:000528191700002
OA hybrid, Green Published
DA 2024-07-18
ER

PT J
AU Gualandi, HM
   Ierusalimschy, R
AF Gualandi, Hugo Musso
   Ierusalimschy, Roberto
TI Pallene: A companion language for Lua
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Dynamic languages; Scripting languages; Just-in-time compilers; Type
   systems; Gradual typing
AB The simplicity and flexibility of dynamic languages make them popular for prototyping and scripting, but the lack of compile-time type information makes it challenging to generate efficient executable code.
   Inspired by ideas from scripting, just-in-time compilers, and optional type systems, we have developed Pallene, a typed companion language to the Lua scripting language, intended for writing lower-level libraries and extension modules. It plays the role of a system language in the scripting paradigm, but one that has been explicitly designed to interoperate with Lua. Pallene is designed to be efficient, to interoperate seamlessly with Lua (even sharing its runtime), and to be familiar to Lua programmers. It should also be simple, easy to understand, and easy to implement, so it can be as portable as maintainable as Lua itself.
   In this paper, we discuss the rationale for Pallene's design and present a description of its syntax, type system, and semantics. We also compare the performance of Pallene extension modules against pure Lua (both interpreted and JIT-compiled), against C extension modules (operating with Lua data structures), and also against programs fully written in C, which provide a familiar baseline. The results corroborate our hypothesis that Pallene has the potential to be a low-level counterpart to Lua. The performance of Lua extension modules written in Pallene can be better than that of equivalent modules written in C and it is competitive with the performance from a JIT compiler, despite the vastly simpler implementation.
   This is a revised and extended version of a SBLP 2018 paper with a similar title [1]. (C) 2020 Elsevier B.V. All rights reserved.
EM hgualandi@inf.puc-rio.br
OI Musso Gualandi, Hugo/0000-0003-2444-1209
FU Conselho Nacional de Desenvolvimento Cientifico e Tecnologico-Brasil
   (CNPQ) [153918/2015-2, 305001/2017-5]; Coordenacao de Aperfeicoamento de
   Pessoal de Nivel Superior -Brasil (CAPES) [001]
FX We would like to thank Hisham Muhammad, Gabriel Ligneul, Fabio
   Mascarenhas, and Andre Maidl for useful discussions about the initial
   ideas behind Pallene. We would also like to thank Sergio Medeiros for
   assisting us with the development of Pallene's scanner and parser.;
   Pallene was born as a fork of the Titan [35] programming language, with
   a focus on researching the performance aspects of dynamic programming
   language implementation. Gabriel Ligneul has heavily contributed to
   current implementation of the Pallene compiler, as well as its continued
   design.; This study was financed in part by the Conselho Nacional de
   Desenvolvimento Cientifico e Tecnologico-Brasil (CNPQ)-Finance Codes
   153918/2015-2 and 305001/2017-5, and by the Coordenacao de
   Aperfeicoamento de Pessoal de Nivel Superior -Brasil (CAPES)-Finance
   Code 001.
CR Ancona D., 2007, P 2007 S DYN LANG DL, P53, DOI DOI 10.1145/1297081.1297091
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], 1996, ANSI COMMON LISP
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], LUAJIT 2 0 INTELLECT
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], 2015, LEIBNIZ INT P INFORM, DOI DOI 10.4230/LIPICS.SNAPL.2015.274
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   Barrett E, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133876
   Behnel S, 2011, COMPUT SCI ENG, V13, P31, DOI 10.1109/MCSE.2010.118
   Bierman G, 2014, LECT NOTES COMPUT SC, V8586, P257
   Bolz Carl Friedrich, 2009, P 4 WORKSH IMPL COMP, P18, DOI [10.1145/1565824.1565827, DOI 10.1145/1565824.1565827]
   Deutsch PeterL., 1984, Proceedings of the 11th ACM SIGACT-SIGPLAN symposium on Principles of Programming Languages, POPL '84, P297, DOI [10.1145/800017.800542, DOI 10.1145/800017.800542]
   Gal A., 2006, VEE 2006. Proceedings of the Second International Conference on Virtual Execution Environments, P144
   Gualandi HugoMusso., 2018, Proceedings of the XXII Brazilian Symposium on Programming Languages, SBLP'18, P19, DOI DOI 10.1145/3264637.3264640
   Ierusalimschy R, 2011, COMMUN ACM, V54, P38, DOI 10.1145/1965724.1965739
   Ierusalimschy Roberto., 2007, P 3 ACM SIGPLAN C HI, P2
   Maidl AM, 2016, ACM SIGPLAN NOTICES, V51, P13, DOI [10.1145/2816707.2816709, 10.1145/2936313.2816709]
   Ousterhout JK, 1998, COMPUTER, V31, P23, DOI 10.1109/2.660187
   Pall Mike., 2005, LuaJIT, a Just-In-Time Compiler for Lua
   Siek Jeremy, 2006, WORKSHOP SCHEME FUNC, P81
   Soldevila M, 2017, ACM SIGPLAN NOTICES, V52, P75, DOI 10.1145/3170472.3133848
   Takikawa A, 2016, ACM SIGPLAN NOTICES, V51, P456, DOI 10.1145/2914770.2837630
   Tobin-Hochstadt Sam., 2006, Proc. DLS, P964, DOI DOI 10.1145/1176617.1176755
   Vitousek MM, 2017, ACM SIGPLAN NOTICES, V52, P762, DOI 10.1145/3093333.3009849
   Wrthinger T., 2013, P 2013 ACM INT S NEW, P187, DOI [10.1145/2509578.2509581, DOI 10.1145/2509578.2509581]
NR 32
TC 5
Z9 6
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29a, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD APR 1
PY 2020
VL 189
AR 102393
DI 10.1016/j.scico.2020.102393
PG 15
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA KN9XE
UT WOS:000515199800003
OA Bronze
DA 2024-07-18
ER

PT J
AU Kukovec, J
   Tran, TH
   Konnov, I
AF Kukovec, Jure
   Tran, Thanh-Hai
   Konnov, Igor
TI Extracting symbolic transitions from TLA<SUP>+</SUP> specifications
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE TLA(+); SMT; Symbolic transition systems
ID VERIFICATION; SAFETY
AB In TLA(+), a system specification is written as a logical formula that restricts the system behavior. As a logic, TLA(+) does not have assignments and other imperative statements that are used by model checkers to compute the successor states of a system state. Model checkers compute successors either explicitly - by evaluating program statements or symbolically - by translating program statements to an SMT formula and checking its satisfiability. To efficiently enumerate the successors, TLA's model checker TLC introduces side effects. For instance, an equality x' = e is interpreted as an assignment of e to the yet unbound variable x.
   Inspired by TLC, we introduce an automatic technique for discovering expressions in TLA(+) formulas such as x' = e and x' is an element of {e(1), ..., e(k)} that can be provably used as assignments. In contrast to TLC, our technique does not explicitly evaluate expressions, but it reduces the problem of finding assignments to the satisfiability of an SMT formula. Hence, we give a way to slice a TLA(+) formula in symbolic transitions, which can be used as an input to a symbolic model checker. Our prototype implementation successfully extracts symbolic transitions from a few TLA(+) benchmarks. (C) 2019 Elsevier B.V. All rights reserved.
C1 [Kukovec, Jure; Tran, Thanh-Hai] TU Wien, A-1040 Vienna, Austria.
   [Konnov, Igor] Inria Nancy Grand Est, Nancy, France.
   [Konnov, Igor] Interchain Fdn, Baar, Switzerland.
C3 Technische Universitat Wien
RP Kukovec, J (corresponding author), TU Wien, A-1040 Vienna, Austria.
EM jkukovec@forsyte.at; tran@forsyte.at; igor.konnov@inria.fr
OI Konnov, Igor/0000-0001-6629-3377
FU Vienna Science and Technology Fund (WWTF) through project APALACHE
   [ICT15-103]; Austrian Science Fund (FWF) through Doctoral College LogiCS
   [W1255-N23]
FX Supported by the Vienna Science and Technology Fund (WWTF) through
   project APALACHE (ICT15-103) and the Austrian Science Fund (FWF) through
   Doctoral College LogiCS (W1255-N23).
CR Abrial J R, 2010, Modeling in Event-B: system and softeng
   [Anonymous], 2012, COMPUTER AIDED VERIF, DOI DOI 10.1007/978-3-642-31424-7_55
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   Azmy N, 2016, LECT NOTES COMPUT SC, V9675, P86, DOI 10.1007/978-3-319-33600-8_5
   Beyer Dirk, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P184, DOI 10.1007/978-3-642-22110-1_16
   Biere A, 1999, LECT NOTES COMPUT SC, V1579, P193
   Biere A, 2009, FRONT ARTIF INTEL AP, V185, P457, DOI 10.3233/978-1-58603-929-5-457
   Blom S, 2010, LECT NOTES COMPUT SC, V6174, P354
   Cabodi G, 1997, DES AUT CON, P728, DOI 10.1145/266021.266355
   Chaudhuri K, 2010, LECT NOTES COMPUT SC, V6255, P44, DOI 10.1007/978-3-642-14808-8_3
   Cimatti A., 2002, Computer Aided Verification. 14th International Conference, CAV 2002. Proceedings (Lecture Notes in Computer Science Vol.2404), P359
   Clarke E, 2003, J ACM, V50, P752, DOI 10.1145/876638.876643
   Gafni E, 2003, DISTRIB COMPUT, V16, P1, DOI [10.1007/s00446-002-0070-8, 10.1007/S00446-002-0070-8]
   Konnov I, 2017, ACM SIGPLAN NOTICES, V52, P719, DOI 10.1145/3093333.3009860
   Kroening Daniel, 2014, TOOLS ALGORITHMS CON, P389, DOI [10.1007/978-3-642-54862-8_26, DOI 10.1007/978-3-642-54862-8_26]
   Lamport L., 2002, SPECIFYING SYSTEMS T
   Merz S, 2012, LECT NOTES COMPUT SC, V7180, P289, DOI 10.1007/978-3-642-28717-6_23
   Merz S, 2008, MONOGR THEOR COMPUT, P401, DOI 10.1007/978-3-540-74107-7_8
   Moraru I, 2013, SOSP'13: PROCEEDINGS OF THE TWENTY-FOURTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P358, DOI 10.1145/2517349.2517350
   Newcombe C, 2015, COMMUN ACM, V58, P66, DOI 10.1145/2699417
   Ongaro D., 2014, THESIS
   Padon O, 2016, ACM SIGPLAN NOTICES, V51, P614, DOI [10.1145/2908080.2908118, 10.1145/2980983.2908118]
   Rustan K, 2010, LECT NOTES ARTIF INT, V6355, P348, DOI 10.1007/978-3-642-17511-4_20
   Yu Y, 1999, LECT NOTES COMPUT SC, V1703, P54
NR 26
TC 0
Z9 0
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29a, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 15
PY 2020
VL 187
AR 102361
DI 10.1016/j.scico.2019.102361
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA KM2YN
UT WOS:000513988800006
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Tigane, S
   Kahloul, L
   Benharzallah, S
   Baarir, S
   Bourekkache, S
AF Tigane, Samir
   Kahloul, Laid
   Benharzallah, Saber
   Baarir, Souheib
   Bourekkache, Samir
TI Reconfigurable GSPNs: A modeling formalism of evolvable discrete-event
   systems
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Reconfigurable generalized stochastic Petri nets; Net rewriting systems;
   Formal modeling and verification; Performance evaluation
ID GRAPH TRANSFORMATION; NETS; VERIFICATION
AB Nowadays, a wide range of systems are becoming structurally dynamic, variably interconnected, and highly complex. The use of classical formal approaches, such as Petri nets, in the design of such systems becomes neither convenient nor sufficient. Indeed, they cannot handle, in a natural way, the dynamic structure and the growing complexity of modern systems.
   Introducing reconfigurability in Petri nets, as well as generalized stochastic Petri nets increases the modeling power, but decreases the applicability of analysis techniques. In fact, several properties become undecidable
   In this paper, we extend generalized stochastic Petri nets to a reconfigurable formalism, while maintaining verifiability with reduced complexity. The proposed approach identifies a set of properties that are preserved after reconfiguration. These properties are decidable with reduced time and space complexity. The use of the proposed formalism is illustrated through a running example. (C) 2019 Elsevier B.V. All rights reserved.
C1 [Tigane, Samir; Kahloul, Laid; Bourekkache, Samir] Biskra Univ, Comp Sci Dept, LINFI Lab, Biskra, Algeria.
   [Benharzallah, Saber] Batna 2 Univ, Comp Sci Dept, LINFI Lab, Batna, Algeria.
   [Tigane, Samir; Baarir, Souheib] Sorbonne Univ, CNRS, LIP6, F-75005 Paris, France.
C3 Universite Mohamed Khider Biskra; Centre National de la Recherche
   Scientifique (CNRS); Sorbonne Universite
RP Kahloul, L (corresponding author), Biskra Univ, Comp Sci Dept, LINFI Lab, Biskra, Algeria.
EM kahloul2006@yahoo.fr
OI Kahloul, Laid/0000-0002-9739-7715; Tigane, Samir/0000-0001-9093-1180;
   Bourekkache, Samir/0000-0003-2038-6257
CR Baarir Soheib, 2009, Performance Evaluation Review, V36, P4, DOI 10.1145/1530873.1530876
   Baier C, 2008, PRINCIPLES OF MODEL CHECKING, P1
   Baldan P, 2008, INFORM COMPUT, V206, P869, DOI 10.1016/j.ic.2008.04.002
   Camilli M., 2018, P 12 EUR C SOFTW ARC, P40
   Capra L, 2018, IFAC PAPERSONLINE, V51, P480, DOI 10.1016/j.ifacol.2018.06.343
   CHIOLA G, 1993, IEEE T COMPUT, V42, P1343, DOI 10.1109/12.247838
   Chryssolouris G, 2013, INT J PROD RES, V51, P6788, DOI 10.1080/00207543.2012.761362
   da Costa SA, 2012, SCI COMPUT PROGRAM, V77, P480, DOI 10.1016/j.scico.2010.02.006
   Dingle N.J., 2009, ACM SIGMETRICS PERFO, V36, P34, DOI DOI 10.1145/1530873.1530881
   Dufourd C, 1998, LECT NOTES COMPUT SC, V1443, P103, DOI 10.1007/BFb0055044
   EHRIG H, 2004, GRAPH GRAMMARS PETRI, P496
   Hoffmann K, 2005, LECT NOTES COMPUT SC, V3536, P268
   Kastenberg H, 2006, LECT NOTES COMPUT SC, V3925, P299
   Lambers L, 2006, LECT NOTES COMPUT SC, V4178, P61
   Li J, 2009, COMPUT IND ENG, V57, P1431, DOI 10.1016/j.cie.2009.07.013
   Llorens M, 2004, LECT NOTES COMPUT SC, V3299, P310
   Marsan MA., 1994, Modelling with Generalized Stochastic Petri Nets
   Moller D.P., 2016, Guide to Computing Fundamentals in Cyber-Physical Systems: Concepts, Design Methods, and Applications, P307, DOI DOI 10.1007/978-3-319-25178-3_7
   Padberg Julia, 2018, OVERVIEW RECONFIGURA, P201
   Rensink A, 2004, LECT NOTES COMPUT SC, V3256, P226
   Rensink A., 2008, EXPLICIT STATE MODEL, P114
   Steenken D, 2011, LECT NOTES COMPUT SC, V7021, P92, DOI 10.1007/978-3-642-25032-3_7
   SUZUKI I, 1983, J COMPUT SYST SCI, V27, P51, DOI 10.1016/0022-0000(83)90029-6
   Tigane Samir, 2018, International Journal of Critical Computer-Based Systems, V8, P25
   Tigane S, 2017, STUD COMPUT INTELL, V694, P383, DOI 10.1007/978-3-319-51100-9_34
   Tigane S, 2017, PROCEEDINGS OF 2017 FIRST INTERNATIONAL CONFERENCE ON EMBEDDED & DISTRIBUTED SYSTEMS (EDIS 2017), P7
   Tigane S, 2017, PROCEEDINGS OF THE 2017 INTERNATIONAL CONFERENCE ON MATHEMATICS AND INFORMATION TECHNOLOGY (ICMIT), P301, DOI 10.1109/MATHIT.2017.8259733
   Tigane S, 2016, 2016 INTERNATIONAL CONFERENCE ON ADVANCED ASPECTS OF SOFTWARE ENGINEERING (ICAASE), P38
   Zhang JF, 2013, IEEE T SYST MAN CY-S, V43, P757, DOI 10.1109/TSMCA.2012.2217321
NR 29
TC 5
Z9 5
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 1
PY 2019
VL 183
AR 102302
DI 10.1016/j.scico.2019.102302
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA JF8DA
UT WOS:000491614000002
OA Bronze
DA 2024-07-18
ER

PT J
AU Fragal, VH
   Simao, A
   Mousavi, MR
AF Fragal, Vanderson Hafemann
   Simao, Adenilso
   Mousavi, Mohammad Reza
TI Hierarchical featured state machines
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Model validation; Software product line; Featured finite state machine;
   Hierarchical featured finite state machine
ID SOFTWARE PRODUCT LINE; PRINCIPLES; MODELS
AB Variants of the Finite State Machine (FSM) model have been extensively used to describe the behavior of reactive systems. In particular, several model-based testing techniques have been developed to support test case generation from FSMs and test case execution. Most of such techniques require several validation properties to hold for the underlying test models. Featured Finite State Machine (FFSM) is an extension of the FSM model proposed in our earlier publication that represents the abstract behavior of an entire Software Product Line (SPL). By validating an FFSM, we validate all valid products configurations of the SPL looking forward configurable test suites. However, modeling a large SPL using flat FFSMs may lead to a huge and hard-to-maintain specification. In this paper, we propose an extension of the FFSM model, named Hierarchical Featured State Machine (HFSM). Inspired by Statecharts and UML state machines, we introduce the HFSM model to improve model readability by grouping up FFSM conditional states and transitions into abstracted entities. Our ultimate goal is to use HFSMs as test models. To this end, we first define some syntactic and semantical validation criteria for HFSMs as prerequisites for using them as test models. Moreover, we implement an adapted graphical Eclipse-based editor from the Yakindu Project for modeling, derivation, and checking feature-oriented properties using Satisfiability Modulo Theory (SMT) solver tools. We investigate the applicability of our approach by applying it to an HFSM for a realistic case study (the Body Comfort System). The results indicate that HFSMs can be used to compactly represent and efficiently validate the behavior of parallel components in SPLs. (C) 2018 Elsevier B.V. All rights reserved.
C1 [Fragal, Vanderson Hafemann; Simao, Adenilso] Univ Sao Paulo, ICMC, Inst Math & Comp Sci, Sao Paulo, Brazil.
   [Mousavi, Mohammad Reza] Univ Leicester, Dept Informatics, Leicester, Leics, England.
C3 Universidade de Sao Paulo; University of Leicester
RP Fragal, VH (corresponding author), Univ Sao Paulo, ICMC, Inst Math & Comp Sci, Sao Paulo, Brazil.
EM vanderson.fragal@gmail.com; adenilso@icmc.usp.br; mm789@le.ac.uk
RI Mousavi, Mohammad Reza/A-3410-2013; Simao, Adenilso S/E-9620-2011
OI Mousavi, Mohammad Reza/0000-0002-4869-6794; Simao,
   Adenilso/0000-0002-1454-2607
FU Science Without Borders project [201694/2015-8]; Swedish Research
   Council [621-2014-5057]; Swedish Knowledge Foundation [20140312]
FX The work of V. Hafemann has been partially supported by the Science
   Without Borders project number 201694/2015-8.; The work of M.R. Mousavi
   has been partially supported by the Swedish Research Council award
   number: 621-2014-5057 and the Swedish Knowledge Foundation project
   number 20140312.
CR [Anonymous], 2004, SIGSOFT SOFTWARE ENG
   Batory D, 2005, LECT NOTES COMPUT SC, V3714, P7
   Beohar H., 2014, P 9 WORKSH MOD BAS T, P44
   Beohar Harsh, 2014, P 29 ACM S APPL COMP, P1272, DOI [10.1145/2554850.2554949, DOI 10.1145/2554850.2554949]
   Broy M., 2005, Springer LNCS
   Cichos H, 2011, LECT NOTES COMPUT SC, V6981, P425, DOI 10.1007/978-3-642-24485-8_31
   Clarke D, 2011, ACM SIGPLAN NOTICES, V46, P13, DOI 10.1145/1942788.1868298
   Classen A, 2013, IEEE T SOFTWARE ENG, V39, P1069, DOI 10.1109/TSE.2012.86
   Czarnecki K, 2005, LECT NOTES COMPUT SC, V3676, P422
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Devroey X, 2016, PROC INT CONF SOFTW, P655, DOI 10.1145/2884781.2884821
   Engström E, 2013, INFORM SOFTWARE TECH, V55, P581, DOI 10.1016/j.infsof.2012.04.009
   Fragal V. H., 2018, COMPUT J, DOI [10.1093/comjnlibxy046, DOI 10.1093/COMJNLIBXY046]
   Fragal V.H., 2016, International Workshop on Formal Aspects of Component Software, P210
   Greenfield J., 2003, OOPSLA 03 COMPANION, P16, DOI DOI 10.1145/949344.949348
   Gronninger H., 2008, TAG MOD WORKSH MBEFF, P1
   Haber A., 2011, Proceedings of the 2011 15th International Software Product Line Conference (SPLC 2011), P150, DOI 10.1109/SPLC.2011.28
   Harel D., 1996, ACM Transactions on Software Engineering and Methodology, V5, P293, DOI 10.1145/235321.235322
   Hierons RM, 2009, ACM COMPUT SURV, V41, DOI 10.1145/1459352.1459354
   Kang K, 1990, TECH REP
   Kang S, 2007, 2007 CIT: 7TH IEEE INTERNATIONAL CONFERENCE ON COMPUTER AND INFORMATION TECHNOLOGY, PROCEEDINGS, P921
   Lee D, 1996, P IEEE, V84, P1090, DOI 10.1109/5.533956
   Lity S., 2013, TECH REP
   Lochau Malte, 2012, Leveraging Applications of Formal Methods, Verification and Validation. Technologies for Mastering Change. Technologies for Mastering Change. Proceedings of the 5th International Symposium, ISoLA 2012, P223, DOI 10.1007/978-3-642-34026-0_17
   Lochau M, 2014, J SYST SOFTWARE, V91, P63, DOI 10.1016/j.jss.2013.11.1096
   Luo G, 1994, P PROT TEST SYS, P91
   Mikk E., 1997, P 2 BCS FACS C NO FO, P1
   Myers G. J., 2004, ART SOFTWARE TESTING, V15
   OMG, 2015, TECH REP
   Oster S., 2012, MODEL BASED TESTING, P338
   Pohl K., 2005, SOFTWARE PRODUCT LIN, V10
   Pohl K, 2006, COMMUN ACM, V49, P78, DOI 10.1145/1183236.1183271
   Schaefer I., 2012, International Journal on Software Tools for Technology Transfer (STTT), V14, P477, DOI [DOI 10.1007/S10009-012-0253-Y, 10.1007/s10009-012-0253-y]
   Schobbens PY, 2006, RE'06: 14TH IEEE INTERNATIONAL REQUIREMENTS ENGINEERING CONFERENCE, PROCEEDINGS, P139
   SEI, 2011, FRAM SOFTW PROD LIN
   Thüm T, 2014, ACM COMPUT SURV, V47, DOI 10.1145/2580950
   Thüma T, 2014, SCI COMPUT PROGRAM, V79, P70, DOI 10.1016/j.scico.2012.06.002
   van der Linden F. J., 2007, Software Product Lines in Action: the Best Industrial Practice in Product Line Engineering
   Varshosaz Mahsa, 2015, Formal Methods and Software Engineering. 17th International Conference on Formal Engineering Methods (ICFEM 2015). Proceedings: LNCS 9407, P366, DOI 10.1007/978-3-319-25423-4_24
   Weileder S, 2008, PROC 1 WORK MODEL TE, V6, P10
NR 40
TC 4
Z9 4
U1 0
U2 13
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 15
PY 2019
VL 171
BP 67
EP 88
DI 10.1016/j.scico.2018.10.001
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA HI9CQ
UT WOS:000456753300004
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Pittou, M
   Manolios, P
   Reineke, J
   Tripakis, S
AF Pittou, Maria
   Manolios, Panagiotis
   Reineke, Jan
   Tripakis, Stavros
TI Checking multi-view consistency of discrete systems with respect to
   periodic sampling abstractions
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Multi-view modeling; View consistency; Formal methods; Modeling;
   Verification
ID FRAMEWORK
AB In multi-view modeling (MVM) the system under development is described by distinct models, called views, which capture different perspectives of the system. Possible overlaps of the views may give rise to inconsistencies. Following the formal MVM framework of [33], the view consistency problem asks to check the consistency of a given set of views with respect to a given set of abstraction functions. Existing work checks view consistency of discrete systems (transition systems or finite automata) with respect to two types of abstraction functions: (1) projections of state variables and (2) projections of an alphabet of events onto a subalphabet. In this paper, we study view consistency with respect to timing abstractions, specifically, periodic sampling, for automata and transition systems. (C) 2018 Elsevier B.V. All rights reserved.
C1 [Pittou, Maria; Tripakis, Stavros] Aalto Univ, Helsinki, Finland.
   [Manolios, Panagiotis] Northeastern Univ, Boston, MA 02115 USA.
   [Reineke, Jan] Saarland Univ, Saarbrucken, Germany.
C3 Aalto University; Northeastern University; Saarland University
RP Pittou, M; Tripakis, S (corresponding author), Aalto Univ, Helsinki, Finland.; Manolios, P (corresponding author), Northeastern Univ, Boston, MA 02115 USA.
EM mpittou5@gmail.com
OI Tripakis, Stavros/0000-0002-1777-493X; Manolios,
   Panagiotis/0000-0003-0519-9699
FU Academy of Finland; U.S. National Science Foundation [1329759, 1139138,
   1319580]; Direct For Computer & Info Scie & Enginr [1329759, 1139138]
   Funding Source: National Science Foundation; Division Of Computer and
   Network Systems [1329759] Funding Source: National Science Foundation;
   Division of Computing and Communication Foundations [1139138] Funding
   Source: National Science Foundation; Division of Computing and
   Communication Foundations; Direct For Computer & Info Scie & Enginr
   [1319580] Funding Source: National Science Foundation
FX This work was partially supported by the Academy of Finland and the U.S.
   National Science Foundation (awards #1329759, #1139138, and #1319580).
   This paper is an extended and modified version of conference paper [27].
CR Amaral V., 2011, ELECT COMMUN EASST, V50, P1
   [Anonymous], 6 INT WORKSH MULT MO
   [Anonymous], 2011, 420102 ISOIECIEEE
   [Anonymous], INTRO AUTOMATA THEOR
   [Anonymous], 2001, LNCS, DOI [DOI 10.1007/3-540-45449-7_11, DOI 10.1007/3-540-45449-711]
   [Anonymous], 1997, Elements of the Theory of Computation
   [Anonymous], 1990, HDB THEORETICAL COMP
   Benveniste A, 2008, LECT NOTES COMPUT SC, V5382, P200, DOI 10.1007/978-3-540-92188-2_9
   Bhave A, 2011, ACM IEEE INT CONF CY, P151, DOI 10.1109/ICCPS.2011.17
   Blanc X, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P511, DOI 10.1145/1368088.1368158
   Broy M., 2012, CONQUERING COMPLEXIT, P309, DOI [10.1007/978-1-4471-2297-5_14, DOI 10.1007/978-1-4471-2297-5_14]
   Caspi P, 2003, ACM SIGPLAN NOTICES, V38, P153, DOI 10.1145/780731.780754
   Dijkman R.M, 2006, THESIS
   Easterbrook S, 2001, PROC INT CONF SOFTW, P411, DOI 10.1109/ICSE.2001.919114
   FINKELSTEIN ACW, 1994, IEEE T SOFTWARE ENG, V20, P569, DOI 10.1109/32.310667
   Getir S, 2015, LECT NOTES COMPUT SC, V9152, P34, DOI 10.1007/978-3-319-21155-8_3
   Henzinger Thomas A., 2012, Large-Scale Complex IT Systems. Development, Operation and Management. 17th Monterey Workshop 2012. Revised Selected Papers, P380, DOI 10.1007/978-3-642-34059-8_20
   Holzmann GJ, 1997, IEEE T SOFTWARE ENG, V23, P279, DOI 10.1109/32.588521
   Jackson D, 1994, CMUCS94126
   Jackson E, 2009, SOFTW SYST MODEL, V8, P451, DOI 10.1007/s10270-008-0105-0
   Jackson EK, 2015, SOFTW SYST MODEL, V14, P271, DOI 10.1007/s10270-013-0315-y
   Kienzle J, 2009, AOSD'09: 8TH INTERNATIONAL CONFERENCE ON ASPECT-ORIENTED SOFTWARE DEVELOPMENT, P87
   Lucas FJ, 2009, INFORM SOFTWARE TECH, V51, P1631, DOI 10.1016/j.infsof.2009.04.009
   Maoz S., 2014, ARXIV14092313
   Maoz S, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P95, DOI 10.1145/2568225.2568237
   McMillan K. L., 1993, Symbolic model checking
   Persson M, 2013, ECON EDUC REV, V35, P1, DOI 10.1016/j.econedurev.2013.02.004
   Pittou M., 2016, LNCS, V10231, P73
   Pittou M, 2016, PROCEEDINGS OF 2016 INTERNATIONAL CONFERENCE ON EMBEDDED COMPUTER SYSTEMS: ARCHITECTURES, MODELING AND SIMULATION (SAMOS), P148, DOI 10.1109/SAMOS.2016.7818342
   Rajhans A., 2013, HSCC 13, P253
   Rajhans A, 2012, HSCC 12: PROCEEDINGS OF THE 15TH ACM INTERNATIONAL CONFERENCE ON HYBRID SYSTEMS: COMPUTATION AND CONTROL, P35
   Rasch H, 2003, LECT NOTES COMPUT SC, V2884, P229
   Reineke J, 2017, SOFTW SYST MODEL, P1
   Reineke S., 2014, INT C TOOLS ALG CONS, P217, DOI DOI 10.1007/978-3-642-54862-8_15
   Shah AA, 2010, LECT NOTES COMPUT SC, V5765, P580, DOI 10.1007/978-3-642-17322-6_25
   SISTLA AP, 1987, THEOR COMPUT SCI, V49, P217, DOI 10.1016/0304-3975(87)90008-9
   Spanoudakis G, 1997, ANN SOFTW ENG, V3, P433, DOI 10.1023/A:1018998207415
   Tripakis S, 2016, P IEEE, V104, P960, DOI 10.1109/JPROC.2015.2510366
   Von Hanxleden R., 2012, LNCS, V7539
   WARSHALL S, 1962, J ACM, V9, P11, DOI 10.1145/321105.321107
   Zhao XP, 2006, LECT NOTES COMPUT SC, V4260, P440
NR 41
TC 0
Z9 0
U1 0
U2 0
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 1
PY 2018
VL 167
BP 1
EP 24
DI 10.1016/j.scico.2018.07.003
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GZ1NZ
UT WOS:000449136100002
OA hybrid
DA 2024-07-18
ER

PT J
AU Mefteh, M
   Bouassida, N
   Ben-Abdallah, H
AF Mefteh, Mariem
   Bouassida, Nadia
   Ben-Abdallah, Hanene
TI Towards naturalistic programming: Mapping language-independent
   requirements to constrained language specifications
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Natural language processing; Patterns; Semantics; Multilingual
   requirements; Use case scenarios
ID PATTERNS
AB This research paper presents a new approach that constitutes a first step towards programming using language-independent requirements. To leverage the needed programming effort, our approach takes requirements in the form of language-independent use case scenarios. Then, it generates the inputs of a code generator which, in turn, produces the corresponding code. To provide for the language-independence, our approach uses an enriched version of the semantic model, as a means to represent similar ideas possibly in different ways and in different natural languages. The enrichment consists of a set of patterns that it implements as XML code representing the information embedded in the use case scenarios. This intermediate representation can be processed to derive the inputs required by any code generator to produce code in a particular programming language. This paper illustrates the approach and its tool support for use case scenarios written in English and French, and semantic model patterns implemented as XML code that can be processed by the ReDSeeDS code generator. In addition, it presents the results of an experimental evaluation of the approach on use case scenarios (written in English and in French) belonging to five different systems. This evaluation quantitatively shows the ability of our approach: to extract ReDSeeDS inputs conforming to the expert's inputs with a high precision; to generate XML code elements conforming to the input with an encouraging performance as evaluated by the participating students (an F-measure ranging between 87.43% and 92.31%); and to generate Java code judged efficient by the participating programmers (an F-measure ranging between 66.4% and 93.43%). (C) 2018 Elsevier B.V. All rights reserved.
C1 [Mefteh, Mariem; Bouassida, Nadia; Ben-Abdallah, Hanene] Sfax Univ, Mir Cl Lab, Sfax, Tunisia.
   [Ben-Abdallah, Hanene] King Abdulaziz Univ, Jeddah, Saudi Arabia.
C3 Universite de Sfax; King Abdulaziz University
RP Mefteh, M (corresponding author), Sfax Univ, Mir Cl Lab, Sfax, Tunisia.
EM Mariem.mefteh.ch@gmail.com; Nadia.bouassida@isimsf.rnu.tn;
   HBenAbdallah@kau.edu.sa
RI ; Ben-Abdallah, Hanene/L-1239-2014
OI MEFTEH, MARIEM/0000-0001-9353-1414; Ben-Abdallah,
   Hanene/0000-0001-9215-4661
CR Ali M., 2005, EUR C MOD ARCH FDN A, P143
   [Anonymous], TECH REP
   [Anonymous], 1977, PATTERN LANGUAGE TOW
   [Anonymous], 1992, Object Oriented Software Engineering: A Use Case Driven Approach
   [Anonymous], TECH REP
   [Anonymous], 2013, Tech. Rep.
   [Anonymous], 2002, Use Case Modeling
   Baker C.F., 1998, P 36 ANN M ASS COMP, P86, DOI [DOI 10.3115/980845.980860, DOI 10.3115/980451.980860]
   Barros O, 2007, BUS PROCESS MANAG J, V13, P47, DOI 10.1108/14637150710721122
   Beggar O. E, 2012, INT J COMPUTER INFOR, V01, P129
   Ben-Abdallah H., 2009, PROGR METHODS DATA W, V3, P172
   Bittner K., 2002, USE CASE MODELING, P301
   Brahe S, 2007, LECT NOTES COMPUT SC, V4652, P166
   Brahim Bousetta, 2013, Journal of Information Engineering and Applications, V3, P1
   Chakroun A., 2011, BRAIN PRO
   Cockburn A, 2001, Writing effective use cases, the crystal collection for software professionals
   Constantine LL, 2001, AW OBJ TECHNOL S, P245
   Davril Jean-Marc., 2013, JOINT M EUR SOFTW EN, P290, DOI DOI 10.1145/2491411.2491455
   Fatolahi Ali, 2008, SEKE 2008. The 20th International Conference Proceedings on Software Engineering & Knowledge Engineering, P619
   Fillmore CJ., 1976, ANU N Y SCI, P155, DOI [10.11115.1749-6632.1976.tb25467.x, DOI 10.11115.1749-6632.1976.TB25467.X]
   Franc J., 2011, AUTOMATED GENERATION, P34
   Gamma E., 1994, Design patterns: Elements of reusable object-oriented software
   Glavas G, 2015, NAT LANG ENG, V21, P607, DOI 10.1017/S1351324914000060
   Gvero T, 2015, ACM SIGPLAN NOTICES, V50, P416, DOI [10.1145/2858965.2814295, 10.1145/2814270.2814295]
   Hafiz M., 2012, PROC ACM INT S NEW I, P139
   Hafiz M, 2007, IEEE SOFTWARE, V24, P52, DOI 10.1109/MS.2007.114
   Jirapanthong W, 2009, SOFTW SYST MODEL, V8, P117, DOI 10.1007/s10270-007-0066-8
   Kalnins A., 2014, HDB RES INNOVATIONS
   Kardos M, 2010, J INF ORGAN SCI, V34, P89
   Khaylov L, 2009, THESIS
   Kienzle J, 2010, LECT NOTES COMPUT SC, V6210, P1
   Knoll R., 2006, COMPANION 21 ACM SIG, P542, DOI DOI 10.1145/1176617.1176628
   Knoll R., 2011, P 10 SIGPLAN S NEW I, P33, DOI [10.1145/2048237.2048243, DOI 10.1145/2048237.2048243]
   KRUCHTEN P., 1999, Rational Unified Process-An Introduction
   LHomme M. C., 2016, CONGRES MONDIAL LING, V27, P1, DOI [10.1051/shsconf/20162705010, DOI 10.1051/SHSCONF/20162705010]
   Liu HZ, 2005, PROCEEDINGS OF THE 2ND INTERNATIONAL YELLOW RIVER FORUM ON KEEPING HEALTHY LIFE OF THE RIVER, VOL VI, P305, DOI 10.1145/1040830.1040908
   Manning Christopher D., 2008, INTRO INFORM RETRIEV
   Mefteh M., 2018, THE SEMANTIC MODEL
   Mefteh M., 2014, ADA USER J, V35, P108
   Mefteh M, 2016, COMPUT J, V59, P1784, DOI 10.1093/comjnl/bxw027
   Mefteh M, 2015, 30TH ANNUAL ACM SYMPOSIUM ON APPLIED COMPUTING, VOLS I AND II, P1602, DOI 10.1145/2695664.2695907
   MILLER GA, 1995, COMMUN ACM, V38, P39, DOI 10.1145/219717.219748
   MUTHIG D, 2004, 02504E IESE
   Nakache Didier, 2005, INFORSID 05 23 C GRE, P555
   Nowakowski W, 2013, COMPUT SCI INF SYST, V10, P1499, DOI 10.2298/CSIS121210062N
   Ozcan E., 2004, NATURAL LANGUAGE UND, P126
   Pathan M., 2016, INT J RECENT INNOV T, V4, P365
   Price D., 2000, IUI 2000. 2000 International Conference on Intelligent User Interfaces, P207, DOI 10.1145/325737.325845
   Rhazali Y., INT J SOFTWARE ENG I, V10, P125, DOI [10.14257/ijseia.2016.10.4.13, DOI 10.14257/IJSEIA.2016.10.4.13]
   Ruppenhofer J., 2010, FrameNet II: Extended theory and practice
   Scowen RS, 1993, P 1993 SOFTW ENG STA
   Silberztein M., 2015, NOOJ LINGUISTIC DEV
   Skrzypek L., 2014, TECH REP
   Smialek M, 2012, COMPUT SCI-AGH, V13, P35, DOI 10.7494/csci.2012.13.4.35
   Smialek M, 2012, S VIS LANG HUM CEN C, P159, DOI 10.1109/VLHCC.2012.6344506
   Smialek Michal., 2015, REQUIREMENTS JAVA SN
   Sunye G., 2000, Design patterns application in UML, P44
   Thelin T, 2004, EMPIR SOFTW ENG, V9, P77, DOI 10.1023/B:EMSE.0000013515.86806.d4
   Tizzei LP., 2013, HLTH COMPLAINT SYSTE
   Tourabi E., 2004, LEXICAL SEMANTICS VE
   Trochim W. M., 2006, RES METHODS KNOWLEDG
   van der Burg C. R., 2011, THESIS
   Wirfs-Brock R, 1993, DESIGNING SCENARIOS
   Wohlin Claes, 2006, Empirical Research Methods in Web and Software Engineering, page, P409
   Yue T., 2010, THESIS
   [No title captured]
NR 66
TC 5
Z9 6
U1 0
U2 3
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 15
PY 2018
VL 166
BP 89
EP 119
DI 10.1016/j.scico.2018.05.006
PG 31
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GV5OO
UT WOS:000446152000005
OA hybrid
DA 2024-07-18
ER

PT J
AU Kouzapas, D
   Dardha, O
   Perera, R
   Gay, SJ
AF Kouzapas, Dimitrios
   Dardha, Ornela
   Perera, Roly
   Gay, Simon J.
TI Typechecking protocols with Mungo and StMungo: A session type toolchain
   for Java
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Session types; Object-oriented programming; Typestate; Type inference
ID TYPESTATE
AB Static typechecking is an important feature of many standard programming languages. However, static typing focuses on data rather than communication, and therefore does not help programmers correctly implement communication protocols in distributed systems. The theory of session types provides a basis for tackling this problem; we use it to develop two tools that support static typechecking of communication protocols in Java. The first tool, Mungo, extends Java with typestate definitions, which allow classes to be associated with state machines defining permitted sequences of method calls: for example, communication methods. The second tool, StMungo, takes a session type describing a communication protocol, and generates a typestate specification of the permitted sequences of messages in the protocol. Protocol implementations can be validated by Mungo against their typestate definitions and then compiled with a standard Java compiler. The result is a toolchain for static typechecking of communication protocols in Java. We formalise and prove soundness of the typestate inference system used by Mungo, and show that our toolchain can be used to typecheck a client for the standard Simple Mail Transfer Protocol (SMTP). (C) 2017 The Author(s). Published by Elsevier B.V.
C1 [Kouzapas, Dimitrios] Univ Cyprus, Dept Comp Sci, Nicosia, Cyprus.
   [Dardha, Ornela; Perera, Roly; Gay, Simon J.] Univ Glasgow, Sch Comp Sci, Glasgow, Lanark, Scotland.
   [Perera, Roly] Univ Edinburgh, Sch Informat, Edinburgh, Midlothian, Scotland.
C3 University of Cyprus; University of Glasgow; University of Edinburgh
RP Kouzapas, D (corresponding author), Univ Cyprus, Dept Comp Sci, Nicosia, Cyprus.
EM Dimitrios.Kouzapas@glasgow.ac.uk
RI Dardha, Ornela/AAV-7956-2021
OI Dardha, Ornela/0000-0001-9927-7875; Kouzapas,
   Dimitrios/0000-0001-9300-0146
FU project From Data Types to Session Types: A Basis for Concurrency and
   Distribution (UK EPSRC) [EP/K034413/1]; EPSRC [EP/K034413/1] Funding
   Source: UKRI
FX This research was funded by the project From Data Types to Session
   Types: A Basis for Concurrency and Distribution (UK EPSRC, grant
   EP/K034413/1). During the research, Dimitrios Kouzapas was employed by
   the University of Glasgow. We thank Laura Voinea for contributing to
   Mungo and StMungo. We thank Garrett Morris, Raymond Hu and Nobuko
   Yoshida for useful comments and discussion.
CR Aldrich J., 2009, OOPSLA COMPANION, P1015, DOI DOI 10.1145/1639950
   Allan C, 2005, ACM SIGPLAN NOTICES, V40, P345, DOI 10.1145/1103845.1094839
   Beckman NE, 2008, OOPSLA 2008 NASHVILLE, CONFERENCE PROCEEDINGS, P227
   Bierhoff K, 2009, LECT NOTES COMPUT SC, V5653, P195, DOI 10.1007/978-3-642-03013-0_10
   Bierhoff K, 2007, OOPSLA: 22ND INTERNATIONAL CONFERENCE ON OBJECT-ORIENTED PROGRAMMING, SYSTEMS, LANGUAGES, AND APPLICATIONS, PROCEEDINGS, P301
   Bodden Eric, 2012, International Journal on Software Tools for Technology Transfer, V14, P307, DOI 10.1007/s10009-010-0183-5
   Bono V, 2011, LECT NOTES COMPUT SC, V6602, P57, DOI 10.1007/978-3-642-19718-5_4
   Capecchi S, 2009, THEOR COMPUT SCI, V410, P142, DOI 10.1016/j.tcs.2008.09.016
   Carbone M, 2008, LECT NOTES COMPUT SC, V5201, P402, DOI 10.1007/978-3-540-85361-9_32
   Crafa S, 2015, ACM SIGPLAN NOTICES, V50, P917, DOI [10.1145/2858965.2814287, 10.1145/2814270.2814287]
   DeLine R, 2004, LECT NOTES COMPUT SC, V3086, P465
   DeLine R, 2001, ACM SIGPLAN NOTICES, V36, P59, DOI 10.1145/381694.378811
   Dezani-Ciancaglini M, 2005, LECT NOTES COMPUT SC, V3705, P299, DOI 10.1007/11580850_16
   Dezani-Ciancaglini M., 2007, LNCS, V4709, P207
   Dezani-Ciancaglini M, 2006, LECT NOTES COMPUT SC, V4067, P328
   Dezani-Ciancaglini M, 2009, INFORM COMPUT, V207, P595, DOI 10.1016/j.ic.2008.03.028
   Fähndrich M, 2002, ACM SIGPLAN NOTICES, V37, P13, DOI 10.1145/543552.512532
   Fahndrich M., 2006, Operating Systems Review, V40, P177, DOI 10.1145/1218063.1217953
   Garcia R, 2014, ACM T PROGR LANG SYS, V36, DOI 10.1145/2629609
   Gay S, 2005, ACTA INFORM, V42, P191, DOI 10.1007/s00236-005-0177-z
   Gay SJ, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P299, DOI 10.1145/1706299.1706335
   Gay SJ, 2010, J FUNCT PROGRAM, V20, P19, DOI 10.1017/S0956796809990268
   Hedin G, 2011, LECT NOTES COMPUT SC, V6491, P166, DOI 10.1007/978-3-642-18023-1_4
   Honda K, 1998, LECT NOTES COMPUT SC, V1381, P122, DOI 10.1007/BFb0053567
   Honda K, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P273, DOI 10.1145/2827695
   Hu R, 2008, LECT NOTES COMPUT SC, V5142, P516, DOI 10.1007/978-3-540-70592-5_22
   Hu R, 2016, LECT NOTES COMPUT SC, V9633, P401, DOI 10.1007/978-3-662-49665-7_24
   Hu R, 2010, LECT NOTES COMPUT SC, V6183, P329, DOI 10.1007/978-3-642-14107-2_16
   Kouzapas D, 2016, PROCEEDINGS OF THE 18TH INTERNATIONAL SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING (PPDP 2016), P146, DOI 10.1145/2967973.2968595
   Militao F., 2010, P 12 WORKSH FORM TEC
   MPI, 1994, TECHNICAL REPORT
   Neubauer M, 2004, LECT NOTES COMPUT SC, V3057, P56
   Neykova R, 2014, LECT NOTES COMPUT SC, V8459, P131, DOI 10.1007/978-3-662-43376-8_9
   Neykova R, 2013, LECT NOTES COMPUT SC, V8174, P358, DOI 10.1007/978-3-642-40787-1_25
   Ng N, 2015, LECT NOTES COMPUT SC, V9031, P212, DOI 10.1007/978-3-662-46663-6_11
   Ng N, 2012, LECT NOTES COMPUT SC, V7304, P202, DOI 10.1007/978-3-642-30561-0_15
   Ng N, 2011, LECT NOTES COMPUT SC, V6721, P110, DOI 10.1007/978-3-642-21464-6_8
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   PUCELLA R, 2008, HASK P ACM SIGPL, P25
   STROM RE, 1986, IEEE T SOFTWARE ENG, V12, P157, DOI 10.1109/TSE.1986.6312929
   Sunshine J, 2011, OOPSLA 11: PROCEEDINGS OF THE 2011 ACM INTERNATIONAL CONFERENCE ON OBJECT ORIENTED PROGRAMMING SYSTEMS LANGUAGES AND APPLICATIONS, P713
   Takeuchi K., 1994, Parallel Architectures and Languages Europe'94, V817, P398, DOI [DOI 10.1007/3-540-58184-7_118, 10.1007/3540581847118]
   Wolff R, 2011, LECT NOTES COMPUT SC, V6813, P459, DOI 10.1007/978-3-642-22655-7_22
   Yoshida N., 2013, LECT NOTES COMPUTER, V8358, P22, DOI [10.1007/978- 3-319, DOI 10.1007/978-3-319]
NR 44
TC 18
Z9 19
U1 0
U2 3
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD APR 1
PY 2018
VL 155
BP 52
EP 75
DI 10.1016/j.scico.2017.10.006
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA FZ1JJ
UT WOS:000427332600004
OA Green Accepted, hybrid, Green Submitted
DA 2024-07-18
ER

PT J
AU Althaus, E
   Beber, B
   Damm, W
   Disch, S
   Hagemann, W
   Rakow, A
   Scholl, C
   Waldmann, U
   Wirtz, B
AF Althaus, Ernst
   Beber, Bjoern
   Damm, Werner
   Disch, Stefan
   Hagemann, Willem
   Rakow, Astrid
   Scholl, Christoph
   Waldmann, Uwe
   Wirtz, Boris
TI Verification of linear hybrid systems with large discrete state spaces
   using counterexample-guided abstraction refinement
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 15th International Workshop on Automated Verification of Critical
   Systems (AVoCS)
CY SEP, 2015
CL Heriot Watt Univ, Edinburgh, SCOTLAND
SP Altran, D RisQ, Formal Methods Europe, Scottish Informat & Comp Sci Alliance
HO Heriot Watt Univ
DE Verification; Linear hybrid automata; Symbolic representation; CEGAR;
   Interpolation
ID REPRESENTATIONS; POLYHEDRA; CHECKING; AUTOMATA
AB We present a counterexample-guided abstraction refinement (CEGAR) approach for the verification of safety properties of linear hybrid automata with large discrete state spaces, such as naturally arising when incorporating health state monitoring and degradation levels into the controller design. Such models can- in contrast to purely functional controller models- not be analyzed with hybrid verification engines relying on explicit representations of modes, but require fully symbolic representations for both the continuous and discrete part of the state space. The presented abstraction methods directly work on a symbolic representation of arbitrary non-convex combinations of linear constraints and boolean variables using LinAIGs. Several interpolation methods allow us to compute abstractions consisting of fewer linear constraints, and hence reduce the complexity of the reachable state set computation. In combination with methods that guarantee the preciseness of abstractions, this leads to a significant reduction of the runtimes of the verification process compared with exact verification. (C) 2017 Elsevier B.V. All rights reserved.
C1 [Althaus, Ernst; Beber, Bjoern] Johannes Gutenberg Univ Mainz, Staudinger Weg 9, D-55128 Mainz, Germany.
   [Althaus, Ernst; Beber, Bjoern; Waldmann, Uwe] Max Planck Inst Informat, Campus E1-4, D-66123 Saarbrucken, Germany.
   [Damm, Werner; Hagemann, Willem; Rakow, Astrid; Wirtz, Boris] Carl von Ossietzky Univ Oldenburg, Ammerlander Heerstr 114-118, D-26111 Oldenburg, Germany.
   [Damm, Werner] OFFIS eV, Escherweg 2, D-26121 Oldenburg, Germany.
   [Disch, Stefan; Scholl, Christoph] Albert Ludwigs Univ Freiburg, Georges Kohler Allee 51, D-79110 Freiburg, Germany.
C3 Johannes Gutenberg University of Mainz; Max Planck Society; Carl von
   Ossietzky Universitat Oldenburg; University of Freiburg
RP Hagemann, W (corresponding author), Carl von Ossietzky Univ Oldenburg, Ammerlander Heerstr 114-118, D-26111 Oldenburg, Germany.
EM ernst.althaus@uni-mainz.de; b.beber@uni-mainz.de; damm@offis.de;
   disch@informatik.uni-freiburg.de; willem.hagemann@uol.de;
   a.rakow@uol.de; scholl@informatik.uni-freiburg.de; uwe@mpi-inf.mpg.de;
   boris.wirtz@uol.de
FU German Research Council (DFG) as part of the Transregional Collaborative
   Research Center "Automatic Verification and Analysis of Complex Systems"
   [SFB/TR 14 AVACS]
FX This work was partly supported by the German Research Council (DFG) as
   part of the Transregional Collaborative Research Center "Automatic
   Verification and Analysis of Complex Systems" (SFB/TR 14 AVACS,
   http://www.avacs.orgi).
CR Althaus E., 2016, VERIFICATION LINEAR
   Althaus E, 2015, LECT NOTES COMPUT SC, V9364, P48, DOI 10.1007/978-3-319-24953-7_5
   Alur R, 2003, LECT NOTES COMPUT SC, V2619, P208
   [Anonymous], 2012, Lecture Notes in Computer Science
   [Anonymous], 2013, Proceedings of the 25th International Conference on Computer Aided Verification, CAV'13, DOI 10.1007/978-3-642-39799-8
   [Anonymous], LNCS
   Asarin E., 2002, Computer Aided Verification. 14th International Conference, CAV 2002. Proceedings (Lecture Notes in Computer Science Vol.2404), P365
   Backes JD, 2010, ICCAD-IEEE ACM INT, P602, DOI 10.1109/ICCAD.2010.5654209
   Bar-Ilan Omer, 2011, International Journal on Software Tools for Technology Transfer, V13, P263, DOI 10.1007/s10009-010-0167-5
   Briand X, 2010, IEEE T COMPUT AID D, V29, P1481, DOI 10.1109/TCAD.2010.2066010
   Chen L, 2009, LECT NOTES COMPUT SC, V5673, P309, DOI 10.1007/978-3-642-03237-0_21
   Cimatti Alessandro, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P310, DOI 10.1007/978-3-642-22110-1_24
   Cimatti A, 2010, ACM T COMPUT LOG, V12, DOI 10.1145/1838552.1838559
   Clarke E., 2003, INT J FDN COMPUTER S, V14, P583, DOI [/10.1142/S012905410300190X, DOI 10.1142/S012905410300190X, 10.1142/S012905410300190X]
   Clarke EdmundM., 2000, Proceedings of the International Conference on Computer Aided Veri cation (CAV), P154, DOI 10.1007/1072216715
   Cousot Patrick, 1978, P 5 ACM SIGACT SIGPL, p84S96, DOI DOI 10.1145/512760.512770
   Craig W., 1957, J SYMBOLIC LOGIC, V22, P269
   D'Silva V, 2010, LECT NOTES COMPUT SC, V5944, P129, DOI 10.1007/978-3-642-11319-2_12
   Damm W, 2007, LECT NOTES COMPUT SC, V4762, P425
   Damm W, 2006, LECT NOTES COMPUT SC, V4218, P276
   Damm W, 2012, SCI COMPUT PROGRAM, V77, P1122, DOI 10.1016/j.scico.2011.07.006
   de Moura L., 2002, P CADE, P1
   Dolzmann A., 2000, THESIS U PASSAU
   Dutertre B., 2015, WROKSH SAT MOD THEOR
   Frehse G, 2005, LECT NOTES COMPUT SC, V3414, P258
   Frehse G., 2011, COMPUTER AIDED VERIF, P379, DOI [DOI 10.1007/978-3-642-22110-1, 10.1007/978-3-642-22110-1_30]
   Gupta Ashutosh, 2012, Automated Technology for Verification and Analysis. Proceedings of the 10th International Symposium, ATVA 2012, P107, DOI 10.1007/978-3-642-33386-6_10
   Henzinger TA, 2004, ACM SIGPLAN NOTICES, V39, P232, DOI 10.1145/982962.964021
   Henzinger TA, 1998, J COMPUT SYST SCI, V57, P94, DOI 10.1006/jcss.1998.1581
   Henzinger TA, 1997, LECT NOTES COMPUT SC, V1254, P460, DOI 10.1007/s100090050008
   HOARE CAR, 1969, COMMUN ACM, V12, P576, DOI 10.1145/363235.363259
   Hoder K, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P259
   Jhala R, 2007, LOG METH COMPUT SCI, V3, DOI 10.2168/LMCS-3(4:1)2007
   Komuravelli A, 2014, LECT NOTES COMPUT SC, V8559, P17
   Kroening Daniel, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P573, DOI 10.1007/978-3-642-22110-1_45
   Kuehlmann A, 2002, IEEE T COMPUT AID D, V21, P1377, DOI 10.1109/TCAD.2002.804386
   LOOS R, 1993, COMPUT J, V36, P450, DOI 10.1093/comjnl/36.5.450
   McMillan K. L., 1993, Symbolic model checking
   McMillan KL, 2006, LECT NOTES COMPUT SC, V4144, P123
   McMillan KL, 2005, THEOR COMPUT SCI, V345, P101, DOI 10.1016/j.tcs.2005.07.003
   McMillan KL, 2003, LECT NOTES COMPUT SC, V2725, P1
   MEGIDDO N, 1988, DISCRETE COMPUT GEOM, V3, P325, DOI 10.1007/BF02187916
   Mishchenko A., 2005, FRAIGs: A Unifying Representation for Logic Synthesis and Verification
   Peikenkamp T., 2004, INCOSE INT S, V14, P246, DOI [10.1002/j.2334-5837.2004.tb00493.x, DOI 10.1002/J.2334-5837.2004.TB00493.X]
   Pigorsch F, 2006, PROCEEDINGS OF FORMAL METHODS IN COMPUTER AIDED DESIGN, P89
   Pigorsch F, 2013, DES AUT TEST EUROPE, P1405
   Prabhakar P, 2013, LECT NOTES COMPUT SC, V7737, P48
   Ratschan S, 2005, LECT NOTES COMPUT SC, V3414, P573
   Reynolds A., ARXIV151002642
   Rollini SF, 2011, LECT NOTES COMPUT SC, V6504, P182, DOI 10.1007/978-3-642-19583-9_17
   Rybalchenko A, 2007, LECT NOTES COMPUT SC, V4349, P346
   Scholl C., 2014, DES AUT TEST EUROPE, P1
   Scholl C, 2009, LECT NOTES COMPUT SC, V5505, P383, DOI 10.1007/978-3-642-00768-2_32
   Segelken M, 2007, LECT NOTES COMPUT SC, V4590, P433
   Silva B.I., 2000, 4 C AUT MIX PROC, P237
   Sinz C, 2007, LECT NOTES COMPUT SC, V4739, P547
NR 56
TC 3
Z9 3
U1 0
U2 7
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 15
PY 2017
VL 148
SI SI
BP 123
EP 160
DI 10.1016/j.scico.2017.04.010
PG 38
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA FJ8ZB
UT WOS:000413056100008
OA hybrid
DA 2024-07-18
ER

PT J
AU Bahr, P
   Axelsson, E
AF Bahr, Patrick
   Axelsson, Emil
TI Generalising tree traversals and tree transformations to DAGs:
   Exploiting sharing without the pain
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Attribute grammars; Sharing; Graph traversal; Graph transformation;
   Directed acyclic graphs
AB We present a recursion scheme based on attribute grammars that can be transparently applied to trees and acyclic graphs. Our recursion scheme allows the programmer to implement a tree traversal or a tree transformation and then apply it to compact graph representations of trees instead. The resulting graph traversal or graph transformation avoids recomputation of intermediate results for shared nodes- even if intermediate results are used in different contexts. Consequently, this approach leads to asymptotic speedup proportional to the compression provided by the graph representation. In general, however, this sharing of intermediate results is not sound. Therefore, we complement our implementation of the recursion scheme with a number of correspondence theorems that ensure soundness for various classes of traversals. We illustrate the practical applicability of the implementation as well as the complementing theory with a number of examples. (C) 2016 Elsevier B.V. All rights reserved.
C1 [Bahr, Patrick] IT Univ Copenhagen, Copenhagen, Denmark.
   [Axelsson, Emil] Chalmers Univ Technol, Dept Comp Sci & Engn, S-41296 Gothenburg, Sweden.
C3 IT University Copenhagen; Chalmers University of Technology
RP Bahr, P (corresponding author), IT Univ Copenhagen, Copenhagen, Denmark.
EM paba@itu.dk; emax@chalmers.se
OI Bahr, Patrick/0000-0003-1600-8261
FU Danish Council for Independent Research [12-132365]; Swedish Foundation
   for Strategic Research, under grant RAWFP
FX We would like to thank the attendees of PEPM 2015 as well as the
   anonymous referees for their insightful comments and suggestions. The
   first author is funded by the Danish Council for Independent Research,
   Grant 12-132365. The second author is funded by the Swedish Foundation
   for Strategic Research, under grant RAWFP.
CR Anantharaman S, 2005, INFORM PROCESS LETT, V94, P231, DOI 10.1016/j.ipl.2005.02.004
   [Anonymous], POPL
   [Anonymous], FOSSACS
   [Anonymous], MEMOCODE
   [Anonymous], WAGA
   [Anonymous], ICFP
   [Anonymous], FSMNLP
   [Anonymous], HIGH ORDER SYMB COMP
   [Anonymous], POPL
   [Anonymous], ICFP
   [Anonymous], GETTING MOST OUT MON
   [Anonymous], COMPILER CONSTRUCTIO
   [Anonymous], ICFP
   [Anonymous], HASKELL
   [Anonymous], THESIS
   [Anonymous], THESIS
   [Anonymous], INFORMATICA
   [Anonymous], 1984, Toposes Triples and Theories
   [Anonymous], WGP
   [Anonymous], LDTA
   [Anonymous], PROBLEM 70 DESIGN NO
   [Anonymous], MPC
   [Anonymous], 1971, Math. Syst. Theory, DOI DOI 10.1007/BF01702865
   [Anonymous], DSL
   [Anonymous], PLDI
   [Anonymous], 2015, P 14 INT C MODULARIT
   [Anonymous], ASS SOURCE CODE REPO
   [Anonymous], PEPM
   [Anonymous], HASKELL
   [Anonymous], P 2 WORKSH GEN PROGR
   [Anonymous], RES REPORT
   [Anonymous], POPL
   [Anonymous], ICFP
   [Anonymous], TECHNICAL REPORT
   [Anonymous], RUUCS8616 UTR U DEP
   [Anonymous], TECHNICAL REPORT
   Bahr P, 2015, PROCEEDINGS OF THE 2015 ACM SIGPLAN WORKSHOP ON PARTIAL EVALUATION AND PROGRAM MANIPULATION (PEPM'15), P27, DOI 10.1145/2678015.2682539
   Bahr P, 2014, LECT NOTES COMPUT SC, V8475, P221, DOI 10.1007/978-3-319-07151-0_14
   Bille P, 2015, INFORM COMPUT, V243, P166, DOI 10.1016/j.ic.2014.12.012
   BIRD RS, 1984, ACTA INFORM, V21, P239, DOI 10.1007/BF00264249
   Buneman P, 2000, VLDB J, V9, P76, DOI 10.1007/s007780050084
   Busatto G, 2008, INFORM SYST, V33, P456, DOI 10.1016/j.is.2008.01.004
   Charikar M, 2005, IEEE T INFORM THEORY, V51, P2554, DOI 10.1109/TIT.2005.850116
   DOWNEY PJ, 1980, J ACM, V27, P758, DOI 10.1145/322217.322228
   Ekman T, 2007, SCI COMPUT PROGRAM, V69, P14, DOI 10.1016/j.scico.2007.02.003
   ENGELFRIET J, 1975, MATH SYST THEORY, V9, P198, DOI 10.1007/BF01704020
   ENGELFRIET J, 1985, J COMPUT SYST SCI, V31, P71, DOI 10.1016/0022-0000(85)90066-2
   Fujiyoshi A, 2010, THEOR COMPUT SCI, V411, P3493, DOI 10.1016/j.tcs.2010.06.006
   Fulop Zoltan., 1998, Syntax-Directed Semantics: Formal Models Based on Tree Transducers
   Gibbons J, 2000, SCI COMPUT PROGRAM, V37, P37, DOI 10.1016/S0167-6423(99)00022-2
   Hasuo I, 2007, LECT NOTES COMPUT SC, V4596, P619
   Hedin G., 2000, Informatica, V24, P301
   Hidaka S, 2013, ACM SIGPLAN NOTICES, V48, P305, DOI [10.1145/2500365.2500608, 10.1145/2544174.2500608]
   Jones SP, 2002, J FUNCT PROGRAM, V12, P393, DOI 10.1017/S0956796802004331
   KAMIMURA T, 1982, MATH SYST THEORY, V15, P225
   Khedker UP, 2003, COMPUT LANG SYST STR, V29, P15, DOI 10.1016/S1477-8424(03)00012-5
   KHEDKER UP, 1994, ACM T PROGR LANG SYS, V16, P1472, DOI 10.1145/186025.186043
   Knuth D. E., 1968, Mathematical Systems Theory, V2, P127, DOI 10.1007/BF01692511
   Lerner S, 2002, ACM SIGPLAN NOTICES, V37, P270, DOI 10.1145/565816.503298
   Lohrey M, 2006, THEOR COMPUT SCI, V363, P196, DOI 10.1016/j.tcs.2006.07.024
   Magnusson E, 2007, SCI COMPUT PROGRAM, V68, P21, DOI 10.1016/j.scico.2005.06.005
   Maneth S, 2004, LECT NOTES COMPUT SC, V2987, P363
   MEIJER E, 1991, LECT NOTES COMPUT SC, V523, P124
   MORRISON DR, 1968, J ACM, V15, P514, DOI 10.1145/321479.321481
   Cardona PAN, 2015, CUAD ACT, P154
   Pierce BC, 2000, ACM T PROGR LANG SYS, V22, P1, DOI 10.1145/345099.345100
   Rompf Tiark., 2010, GPCE
   Sakr S, 2009, J COMPUT SYST SCI, V75, P303, DOI 10.1016/j.jcss.2009.01.004
   Sloane AM, 2013, SCI COMPUT PROGRAM, V78, P1752, DOI 10.1016/j.scico.2011.11.005
NR 69
TC 3
Z9 3
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD APR 1
PY 2017
VL 137
BP 63
EP 97
DI 10.1016/j.scico.2016.03.006
PG 35
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA EO8WY
UT WOS:000396972400003
OA hybrid
DA 2024-07-18
ER

PT J
AU Neves, R
   Madeira, A
   Martins, MA
   Barbosa, LS
AF Neves, Renato
   Madeira, Alexandre
   Martins, Manuel A.
   Barbosa, Luis S.
TI Proof theory for hybrid(ised) logics
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 17th Brazilian Symposium on Formal Methods (SBMF) as part of 5th
   Brazilian Conference on Software - Theory and Practice (CBSoft)
CY SEP 29-OCT 01, 2014
CL Maceio, BRAZIL
SP Univ Fed Alagoas, Brazilian Natl Inst Sci & Technol Software Engn, CAPES, CNPq, Google Inc
DE Hybrid logic; Decidability; Completeness; Tableau systems; Hilbert
   calculus
ID SEMANTICS; SPECIFICATION; COMPLETENESS
AB Hybridisation is a systematic process along which the characteristic features of hybrid logic, both at the syntactic and the semantic levels, are developed on top of an arbitrary logic framed as an institution. In a series of papers this process has been detailed and taken as a basis for a specification methodology for reconfigurable systems. The present paper extends this work by showing how a proof calculus (in both a Hilbert and a tableau based format) for the hybridised version of a logic can be systematically generated from a proof calculus for the latter. Such developments provide the basis for a complete proof theory for hybrid(ised) logics, and thus pave the way to the development of (dedicated) proof support. (C) 2016 Elsevier B.V. All rights reserved.
C1 [Neves, Renato; Madeira, Alexandre; Barbosa, Luis S.] HASLab INESC TEC, Braga, Portugal.
   [Neves, Renato; Madeira, Alexandre; Barbosa, Luis S.] Univ Minho, P-4719 Braga, Portugal.
   [Martins, Manuel A.] Univ Aveiro, CIDMA, Dept Math, P-3800 Aveiro, Portugal.
C3 Universidade do Minho; INESC TEC; Universidade do Minho; Universidade de
   Aveiro
RP Neves, R (corresponding author), HASLab INESC TEC, Braga, Portugal.; Neves, R (corresponding author), Univ Minho, P-4719 Braga, Portugal.
EM rjneves@inescporto.pt; amadeira@inescporto.pt; martins@ua.pt;
   lsb@di.uminho.pt
RI Neves, Renato/ABE-5290-2020; Madeira, Alexandre/AAF-4147-2021; Martins,
   Manuel A./A-8821-2010; Soares Barbosa, Luis/N-7086-2013
OI Neves, Renato/0000-0002-8787-2551; Madeira,
   Alexandre/0000-0002-0646-2017; Martins, Manuel A./0000-0002-5109-8066;
   Soares Barbosa, Luis/0000-0002-5037-2588
FU Fundação para a Ciência e a Tecnologia [UID/MAT/04106/2013] Funding
   Source: FCT
CR AGUSTICULLELL J, 1991, LECT NOTES COMPUT SC, V521, P269, DOI 10.1007/BFb0028112
   [Anonymous], 1999, Handbook of Tableau Methods
   [Anonymous], STANFORD ENCY PHILOS
   [Anonymous], 2006, HDB MODAL LOGICS
   Areces C, 2015, LOG J IGPL, V23, P601, DOI 10.1093/jigpal/jzv020
   Areces C, 2014, LOG J IGPL, V22, P309, DOI 10.1093/jigpal/jzt030
   Baltazar P, 2013, LOG UNIVERSALIS, V7, P403, DOI 10.1007/s11787-013-0087-8
   Barbosa LS, 2014, J LOGIC LANG INFORM, V23, P31, DOI 10.1007/s10849-013-9184-6
   Beierle Christoph., 2005, CONDITIONALS INFORM, V3301, P162
   Benzmüller C, 2008, LECT NOTES ARTIF INT, V5195, P162, DOI 10.1007/978-3-540-71070-7_14
   Bidoit M, 2006, J LOGIC ALGEBR PROGR, V67, P3, DOI 10.1016/j.jlap.2005.09.002
   Braüner T, 2011, APPL LOG SER, V37, P1, DOI 10.1007/978-94-007-0002-4
   BURSTALL RM, 1980, LECTURE NOTES COMPUT, V86, P292, DOI DOI 10.1007/3-540-10007-5_41
   Burstall Rod., 1994, CLASSICAL MIND ESSAY, P75
   Caleiro C, 1999, LECT NOTES COMPUT SC, V1589, P48
   Caleiro C., 2005, We will show them! Essays in Honour of Dov Gabbay, VI, P363
   Caleiro C, 2006, LECT NOTES COMPUT SC, V4060, P50, DOI 10.1007/11780274_4
   Cerrito Serenella, 2010, Journal of Applied Non-Classical Logic, V20, P39, DOI 10.3166/jancl.20.39-61
   Cerrito S, 2013, J AUTOM REASONING, V51, P197, DOI 10.1007/s10817-012-9257-2
   Cîrstea C, 2006, J LOGIC ALGEBR PROGR, V67, P87, DOI 10.1016/j.jlap.2005.09.004
   Costa-Leite A., 2007, THESIS
   Diaconescu R., 2015, MATH STRUCTURES COMP, P1, DOI DOI 10.1017/S0960129514000383
   Diaconescu R., 2013, J LOG COMPUT
   Diaconescu R., 2008, Institution-Independent Model Theory
   Diaconescu R, 2007, THEOR COMPUT SCI, V379, P210, DOI 10.1016/j.tcs.2007.02.068
   Diaconescu R, 2013, FUZZY SET SYST, V218, P32, DOI 10.1016/j.fss.2012.11.015
   Diaconescu R, 2010, J LOGIC ALGEBR PROGR, V79, P174, DOI 10.1016/j.jlap.2009.09.001
   Fajardo Rogerio., 2002, ADV MODAL LOGIC 4 TO, P83
   FIADEIRO J, 1988, LECT NOTES COMPUT SC, V332, P44
   Finger M., 1992, Journal of Logic, Language and Information, V1, P203, DOI 10.1007/BF00156915
   FITTING M, 1969, THEORIA, V35, P259
   Gabbay DM, 1996, J SYMBOLIC LOGIC, V61, P1057, DOI 10.2307/2275807
   GOGUEN JA, 1987, LECT NOTES COMPUT SC, V250, P1
   GOGUEN JA, 1992, J ACM, V39, P95, DOI 10.1145/147508.147524
   Hoffmann G, 2009, ELECTRON NOTES THEOR, V231, P3, DOI 10.1016/j.entcs.2009.02.026
   Jackson Daniel, 2006, Software abstractions: Logic, language, and analysis
   Madeira A., 2014, ADV MOD LOG 2014, P74
   Madeira A., 2013, THESIS
   Madeira A, 2015, FORM ASP COMPUT, V27, P375, DOI 10.1007/s00165-014-0327-6
   Madeira A, 2013, 2013 INTERNATIONAL SYMPOSIUM ON THEORETICAL ASPECTS OF SOFTWARE ENGINEERING (TASE), P79, DOI 10.1109/TASE.2013.19
   Madeira A, 2011, LECT NOTES COMPUT SC, V7041, P269, DOI 10.1007/978-3-642-24690-6_19
   Martins Manuel A., 2011, Algebra and Coalgebra in Computer Science. Proceedings 4th International Conference, CALCO 2011, P283, DOI 10.1007/978-3-642-22944-2_20
   Martins MA, 2007, MATH STRUCT COMP SCI, V17, P1075, DOI 10.1017/S0960129507006305
   Mossakowski T, 2003, COMPUT INFORM, V22, P285
   Mossakowski T, 2007, LECT NOTES COMPUT SC, V4424, P519
   Mossakowski T, 2007, LECT NOTES COMPUT SC, V4409, P92
   Neves Renato, 2013, 2013 IEEE 14th International Conference on Information Reuse & Integration (IRI), P512, DOI 10.1109/IRI.2013.6642513
   Neves Renato, 2013, Algebra and Coalgebra in Computer Science. 5th International Conference, CALCO 2013. Proceedings: LNCS 8089, P340, DOI 10.1007/978-3-642-40206-7_28
   Neves R., 2014, ADV INTELLIGENT SYST, V263
   Neves R, 2015, LECT NOTES COMPUT SC, V8941, P146, DOI 10.1007/978-3-319-15075-8_10
   Rasga J, 2013, STUD LOGICA, V101, P117, DOI 10.1007/s11225-011-9363-x
   Rasga J, 2012, STUD LOGICA, V100, P545, DOI 10.1007/s11225-012-9414-y
   Sannella D, 2012, EATCS MONOGRAPHS THE
   Schroeder L, 2009, THEOR COMPUT SCI, V410, P1217, DOI 10.1016/j.tcs.2008.11.020
   Segerberg Krister, 1973, Journal of Philosophical Logic, V2, P77, DOI 10.1007/BF02115610
   Sernadas A, 1999, J LOGIC COMPUT, V9, P149, DOI 10.1093/logcom/9.2.149
   Szepesia HoriaCiocarlie Robert., 2011, THEORY APPL MATH COM, V1, P74
   Thomason R., 1984, Handbook of philosophical logic, P135, DOI [10.1007/978-94-009-6259-03, DOI 10.1007/978-94-009-6259-03]
   Weidenbach C, 2009, LECT NOTES ARTIF INT, V5663, P140, DOI 10.1007/978-3-642-02959-2_10
NR 59
TC 8
Z9 9
U1 0
U2 6
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 15
PY 2016
VL 126
SI SI
BP 73
EP 93
DI 10.1016/j.scico.2016.03.001
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA DP4IP
UT WOS:000378459900005
OA Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Pearce, DJ
   Groves, L
AF Pearce, David J.
   Groves, Lindsay
TI Designing a verifying compiler: Lessons learned from developing Whiley
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Program verification; Loop invariants; Hoare logic; Verification tools
ID RUNTIME ASSERTION CHECKING; VERIFICATION CONDITIONS; JML; ABSTRACTION;
   DERIVATION; PROGRAMS; TOOL
AB An ongoing challenge for computer science is the development of a tool which automatically verifies programs meet their specifications, and are free from runtime errors such as divide-by-zero, array out-of-bounds and null dereferences. Several impressive systems have been developed to this end, such as ESC/Java and Spec#, which build on existing programming languages (e.g., Java, C#). We have been developing a programming language from scratch to simplify verification, called Whiley, and an accompanying verifying compiler. In this paper, we present a technical overview of the verifying compiler and document the numerous design decisions made. Indeed, many of our decisions reflect those of similar tools. However, they have often been ignored in the literature and/or spread thinly throughout. In doing this, we hope to provide a useful resource for those building verifying compilers. (C) 2015 Elsevier B.V. All rights reserved.
C1 [Pearce, David J.; Groves, Lindsay] Victoria Univ Wellington, Sch Engn & Comp Sci, Wellington, New Zealand.
C3 Victoria University Wellington
RP Pearce, DJ (corresponding author), Victoria Univ Wellington, Sch Engn & Comp Sci, Wellington, New Zealand.
EM djp@ecs.vuw.ac.nz; lindsay@ecs.vuw.ac.nz
OI Pearce, David/0000-0003-4535-9677
FU Marsden Fund [VUW1105]
FX This work is supported by the Marsden Fund, administered by the Royal
   Society of New Zealand, Grant number VUW1105.
CR Alagic S., 1978, DESIGN WELL STRUCTUR
   [Anonymous], 1993, Program Verification: Fundamental Issues in Computer Science, DOI [10.1090/psapm/019/0235771, DOI 10.1090/PSAPM/019/0235771]
   [Anonymous], 2004, J. Obj. Technol., DOI [10.5381/jot.2004.3.6.a2, DOI 10.5381/JOT.2004.3.6.A2]
   [Anonymous], 2008, WORKSHOP SPECIFICATI
   [Anonymous], 2008, Lecture Notes in Computer Science, DOI DOI 10.1007/978-3-642-13010-6_4
   Aponte Virginia, 2012, FM 2012: Formal Methods. Proceedings of the 18th International Symposium, P37, DOI 10.1007/978-3-642-32759-9_7
   Babic D., 2007, LNCS, V4899, P169
   Babic D, 2007, LECT NOTES COMPUT SC, V4590, P366
   BARBANERA F, 1991, LECT NOTES COMPUT SC, V526, P651
   Barnett M, 2006, LECT NOTES COMPUT SC, V4111, P364
   Barnett M, 2011, COMMUN ACM, V54, P81, DOI 10.1145/1953122.1953145
   Barnett Mike, 2005, PASTE, V31, P82, DOI [DOI 10.1145/1108792, DOI 10.1145/1108792.1108813]
   Barrett C, 2007, LECT NOTES COMPUT SC, V4590, P298
   Beckert B, 2005, LECT NOTES COMPUT SC, V3785, P315
   Bertot Y., 2004, TEXT THEORET COMP S
   Betts Adam, 2012, ACM SIGPLAN NOTICES, DOI DOI 10.1145/2398857.2384625
   Bjorner N., 2009, P WORKSH CONSTR FORM
   Bobot F., 2014, WHY3 PLATFORM V0 85
   Bobot F., 2011, P WORKSH INT VER LAN
   Bormer T., 2011, INT C FORMAL VERIFIC, P3, DOI 10.1007/978-3-642-31762-0_2
   Bryant RE, 2007, LECT NOTES COMPUT SC, V4424, P358
   Burdy L, 2003, LECT NOTES COMPUT SC, V2805, P422
   Cachera D, 2012, LECT NOTES COMPUT SC, V7460, P58, DOI 10.1007/978-3-642-33125-1_7
   Catano N., 2002, FME 2002: Formal Methods-Getting IT Right. International Symposium of Formal Methods Europe (Lecture Notes in Computer Science Volume 2391), P272
   CHADHA R, 1993, J SYMB COMPUT, V15, P705, DOI 10.1016/S0747-7171(06)80010-6
   Chalin P, 2008, LECT NOTES COMPUT SC, V5014, P246, DOI 10.1007/978-3-540-68237-0_18
   Chalin P, 2007, LECT NOTES COMPUT SC, V4609, P227
   Chalin P, 2009, SEFM 2009: SEVENTH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING AND FORMAL METHODS, P317, DOI 10.1109/SEFM.2009.37
   Chandra S, 2009, PLDI'09 PROCEEDINGS OF THE 2009 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P363, DOI 10.1145/1542476.1542517
   Cielecki Maciej., 2006, Proceedings of the 4th International Symposium on Principles and Practice of Programming in Java (PPPJ), P135, DOI 10.1145/1168054
   Cohen E., MOVE INVARIANTS END
   Cohen E, 2009, LECT NOTES COMPUT SC, V5674, P23, DOI 10.1007/978-3-642-03359-9_2
   Cok DR, 2014, ELECTRON P THEOR COM, P79, DOI 10.4204/EPTCS.149.8
   Cok DR, 2011, LECT NOTES COMPUT SC, V6617, P472, DOI 10.1007/978-3-642-20398-5_35
   Cok DR, 2005, LECT NOTES COMPUT SC, V3362, P108
   Cook B, 2011, COMMUN ACM, V54, P88, DOI 10.1145/1941487.1941509
   Cuoq Pascal, 2012, Software Engineering and Formal Methods. Proceedings of the 10th International Conference, SEFM 2012, P233, DOI 10.1007/978-3-642-33826-7_16
   CYTRON R, 1991, ACM T PROGR LANG SYS, V13, P451, DOI 10.1145/115372.115320
   CYTRON R, 1989, CONFERENCE RECORD OF THE SIXTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P25, DOI 10.1145/75277.75280
   Darulova E, 2014, ACM SIGPLAN NOTICES, V49, P235, DOI 10.1145/2535838.2535874
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Denney E, 2008, LECT NOTES COMPUT SC, V5140, P145
   Detlefs D, 2005, J ACM, V52, P365, DOI 10.1145/1066100.1066102
   Detlefs D.L., 1998, 159 SRC
   Deutsch L.P., 1973, INTERACTIVE PROGRAM
   DIJKSTRA EW, 1975, COMMUN ACM, V18, P453, DOI [10.1145/360933.360975, 10.1145/390016.808417]
   Dymnikov C, 2013, IEEE AUS SOFT ENGR, P181, DOI 10.1109/ASWEC.2013.30
   Ekman T, 2007, J OBJECT TECHNOL, V6, P455, DOI 10.5381/jot.2007.6.9.a23
   Fähndrich M, 2003, ACM SIGPLAN NOTICES, V38, P302, DOI 10.1145/949343.949332
   Filliâtre JC, 2007, LECT NOTES COMPUT SC, V4590, P173
   Filliâtre JC, 2013, LECT NOTES COMPUT SC, V7792, P125, DOI 10.1007/978-3-642-37036-6_8
   Filliâtre JC, 2012, LECT NOTES COMPUT SC, V7152, P83, DOI 10.1007/978-3-642-27705-4_8
   Flanagan C, 2002, ACM SIGPLAN NOTICES, V37, P234, DOI 10.1145/543552.512558
   Flanagan C, 2002, ACM SIGPLAN NOTICES, V37, P191, DOI 10.1145/565816.503291
   Flanagan C, 2001, ACM SIGPLAN NOTICES, V36, P193, DOI 10.1145/373243.360220
   Frade MJ, 2011, COMPUT SCI REV, V5, P252, DOI 10.1016/j.cosrev.2011.02.002
   FUCHS NE, 1992, SOFTWARE ENG J, V7, P323, DOI 10.1049/sej.1992.0033
   Furia C.A., CORR
   Ge Y, 2007, LECT NOTES ARTIF INT, V4603, P167
   Gladisch Christoph D., 2010, Formal Verification of Object-Oriented Software. International Conference, (FoVeOOS 2010). Revised Selected Papers, P76
   GOOD DI, 1985, MATH LOGIC PROGRAMMI, P55
   Goodloe Alwyn E., 2013, NASA Formal Methods. 5th International Symposium, NFM 2013. Proceedings, P441, DOI 10.1007/978-3-642-38088-4_31
   Grigore R., 2009, P 11 INT WORKSH FORM
   Guha A, 2011, LECT NOTES COMPUT SC, V6602, P256, DOI 10.1007/978-3-642-19718-5_14
   Gulwani S, 2006, LECT NOTES COMPUT SC, V3924, P279
   Hoare C. A. R., 1973, Acta Informatica, V2, P335, DOI 10.1007/BF00289504
   HOARE CAR, 1969, COMMUN ACM, V12, P576, DOI 10.1145/363235.363259
   Hoare T, 2003, J ACM, V50, P63, DOI 10.1145/602382.602403
   Hoare T., 2009, QCON
   Hubert L, 2008, LECT NOTES COMPUT SC, V5051, P132, DOI 10.1007/978-3-540-68863-1_9
   Hubert Laurent., 2008, P 8 ACM SIGPLAN SIGS, P36, DOI [DOI 10.1145/1512475.1512484, 10.1145/1512475.1512484]
   Huisman M., 2013, VERIFYTHIS VERIFICAT
   Igarashi A, 2007, J OBJECT TECHNOL, V6, P31, DOI 10.5381/jot.2007.6.2.a3
   Ireland A, 2004, LECT NOTES COMPUT SC, V2972, P190
   ISO/IEC, 1990, 9899 ISOIEC
   Jacobs B, 2004, J LOGIC ALGEBR PROGR, V58, P61, DOI 10.1016/j.jlap.2003.07.005
   Jacobs B., 2014, VERIFAST PROGRAM VER
   Jacobs B, 2011, LECT NOTES COMPUT SC, V6617, P41, DOI 10.1007/978-3-642-20398-5_4
   Jacobs B, 2010, LECT NOTES COMPUT SC, V6461, P304, DOI 10.1007/978-3-642-17164-2_21
   Jefferson S., 1986, P ACM S PRINC PROGR, P318
   Kaldewau A., 1990, INT SERIES COMPUTER
   Kassios IT, 2006, LECT NOTES COMPUT SC, V4085, P268
   King S., 1969, THESIS
   Klebanov V., 2011, LNCS
   Kroning D., 2009, P C AUT DED CADE
   Kulczycki G, 2007, IEEE ANNU SOFTW ENG, P204, DOI 10.1109/SEW.2007.89
   Lahiri SK, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P171, DOI 10.1145/1328438.1328461
   Lameed N, 2011, LECT NOTES COMPUT SC, V6601, P22, DOI 10.1007/978-3-642-19861-8_3
   Leavens GT, 2005, SCI COMPUT PROGRAM, V55, P185, DOI 10.1016/j.scico.2004.05.015
   Leino K.R.M., 2007, P WORKSH FORM TECHN
   Leino KRM, 2012, LECT NOTES COMPUT SC, V7152, P82, DOI 10.1007/978-3-642-27705-4_7
   Leino KRM, 2010, LECT NOTES COMPUT SC, V6217, P112, DOI 10.1007/978-3-642-15057-9_8
   Leino KRM, 2005, LECT NOTES COMPUT SC, V3780, P119
   Leino KRM, 2004, LECT NOTES COMPUT SC, V3086, P491
   Leino KRM, 2001, LECT NOTES COMPUT SC, V2000, P157
   LUCKHAM DC, 1979, CSTR79731 STANF U
   Male C, 2008, LECT NOTES COMPUT SC, V4959, P229
   Milanova A., 2002, Software Engineering Notes, V27, P1, DOI 10.1145/566171.566174
   Monniaux D, 2008, ACM T PROGR LANG SYS, V30, DOI 10.1145/1353445.1353446
   Moskal M, 2009, P 7 INT WORKSH SAT M, P20, DOI [DOI 10.1145/1670412.1670416, 10.1145/1670412.1670416]
   Nielson F., 1999, Principles of Program Analysis
   Odersky M., 1991, P 18 ACM S PRINC PRO, P25, DOI DOI 10.1145/99583.99590
   Pearce D.J., 2015, P C SOFTW L IN PRESS
   Pearce D.J., 2014, GETTING STARTED WHIL
   Pearce D.J., 2014, ECSTR1407 VICT U WEL
   Pearce D.J., 2014, WHILEY LANGUAGE SPEC
   Pearce D.J., 2013, P WORKSH FORM TECHN, P7
   Pearce DJ, 2015, 2015 IEEE 18TH INTERNATIONAL SYMPOSIUM ON REAL-TIME DISTRIBUTED COMPUTING WORKSHOPS, P26, DOI 10.1109/ISORCW.2015.54
   Pearce DJ, 2011, ELECTRON NOTES THEOR, V279, P47, DOI 10.1016/j.entcs.2011.11.005
   Pearce DJ, 2013, LECT NOTES COMPUT SC, V7737, P335
   Pearce DJ, 2013, LECT NOTES COMPUT SC, V8225, P238, DOI 10.1007/978-3-319-02654-1_13
   Pearce DJ, 2011, LECT NOTES COMPUT SC, V6601, P104, DOI 10.1007/978-3-642-19861-8_7
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Polikarpova N, 2009, ISSTA 2009: INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, P93
   Poss R., CORR
   Rountev A, 2004, PROC IEEE INT CONF S, P82, DOI 10.1109/ICSM.2004.1357793
   Rustan K, 2005, INFORM PROCESS LETT, V93, P281, DOI 10.1016/j.ipl.2004.10.015
   Rustan K, 2010, LECT NOTES ARTIF INT, V6355, P348, DOI 10.1007/978-3-642-17511-4_20
   Salcianu A, 2005, LECT NOTES COMPUT SC, V3385, P199
   Sanchez J., 2014, P WORKSH FDN ASP OR, P13
   Schwerhoff Malte, 2015, LIPIcs, V37, P614
   Shankar N., 2001, P S LOG BAS PROGR SY, P1
   Smans J, 2008, LECT NOTES COMPUT SC, V5051, P220, DOI 10.1007/978-3-540-68863-1_14
   Sonnex W, 2012, LECT NOTES COMPUT SC, V7214, P407, DOI 10.1007/978-3-642-28756-5_28
   Souyris J, 2009, LECT NOTES COMPUT SC, V5850, P532, DOI 10.1007/978-3-642-05089-3_34
   Stevens M., 2014, DEMONSTRATING WHILEY
   Tobin-Hochstadt S, 2010, ICFP 2010: PROCEEDINGS OF THE 2010 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P117
   Wylde H., 2014, VERIFYING WHILEY PRO
NR 128
TC 14
Z9 14
U1 0
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 1
PY 2015
VL 113
BP 191
EP 220
DI 10.1016/j.scico.2015.09.006
PN 2
PG 30
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CY2HV
UT WOS:000366230300005
DA 2024-07-18
ER

PT J
AU Stoica, AJ
   Pelckmans, K
   Rowe, W
AF Stoica, Anca-Juliana
   Pelckmans, Kristiaan
   Rowe, William
TI System components of a general theory of software engineering
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE General theory of software engineering; Model systems; Theoretic
   Decision Framework; Optimal decision-under-risk process; Adaptive
   software development
AB The contribution of this paper to a general theory of software engineering is twofold: it presents the model system concept, and it integrates the software engineering design process into a decision making theory and a value-based decision-under-risk process. The model system concept is defined as a collection of interconnected and consistent components that work together for defining, developing, and delivering a software system. This model system concept is used to represent the multiple facets of a software engineering project such as stakeholders and models related to domain/environment, success, decision, product, process, and property. The model system concept is derived from software development practices in the industry and academia.
   The theoretical decision framework acts as a central governance component for a given software engineering project. Applying this decision framework allows for effectively managing risks and uncertainties related to success in the project building stage. Especially, this puts the design process in an economic perspective, where concepts such as value-of-waiting, value-of-information and possible outcomes can be coped with explicitly. In practice, the decision framework allows for the optimal control of modern adaptive software development. In particular, one can use dynamic programming to find the optimal sequence of decisions to be made considering a defined time horizon. In this way we can relate our contribution to a theory of software engineering to the well-studied areas of automatic control, optimization, decision theory and Bayesian analysis.
   Computational case studies exemplify the conceptual innovations proposed in this paper. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Stoica, Anca-Juliana; Pelckmans, Kristiaan] Uppsala Univ, Dept Informat Technol, Uppsala, Sweden.
   [Rowe, William] Univ Florida, Dept Elect & Comp Engn, Gainesville, FL USA.
C3 Uppsala University; State University System of Florida; University of
   Florida
RP Pelckmans, K (corresponding author), Uppsala Univ, Dept Informat Technol, Uppsala, Sweden.
EM anca.stoica@it.uu.se; kp@it.uu.se; wrowe001@ufl.edu
CR Abran A., 2013, GUIDE SOFTWARE ENG B
   Ambler S.W., 2007, AGILE MODELING
   [Anonymous], 1999, NSF WORKSH USE CSE A
   [Anonymous], 2004, 1471 ANSIIEEE
   [Anonymous], 1989, Software risk management tutorial
   [Anonymous], 1998, MOD BAS SOFTW DEV
   Bellman R., 1957, Dynamic programming
   Boehm B, 1996, IEEE SOFTWARE, V13, P25, DOI 10.1109/52.506460
   Boehm B., 1999, ACM SOFTW ENG NO JAN
   Boehm B., 1999, CONCEPTUAL MODELING
   Boehm B.W., 1989, IEEE T SOFTW ENG, V15
   BOOCH G, 1998, UNIFIED MODELING LAN
   Craver CarlF., 2002, The Blackwell Guide to the Philosophy of Science, P55, DOI DOI 10.1002/9780470756614.CH4
   EGYED A, 1999, USCCSE99514
   Falessi D, 2011, ACM COMPUT SURV, V43, DOI 10.1145/1978802.1978812
   FISHER J, 1998, INCOSE INSIGHT, V1
   France R., 2007, FUTURE SOFTWARE ENG
   Gargaro A., 1996, 96TR017 CMUSEI
   Islam S., 2012, RISK ASSESSMENT MANA, P385
   Jacobson I., 2013, The Essence of Software Engineering: Applying the SEMAT Kernel
   Jacobson Ivar., 1999, AW OBJ TECHNOL S
   Johnson P., 2012, IEEE SOFTW       SEP
   Johnson P., 2007, ICSEA 2007 INT C SOF
   Johnson P., 2005, GRAND UNIFIED THEORY
   Johnson P., 2012, GTSE P
   Kazman R., 1994, P ICSE, V16, P81
   Lamsweerde A.Van., 2008, Requirements Engineering - From System Goals to UML Models to Software Specifications
   Lewin K., 1976, Field theory in social science
   Madachy R., 1995, AUTOM SOFTW ENG, V2
   Nguyen T., 2006, INF MANAG, V43
   Paivarinta T., 2012, GTSE P
   Popper K., 2005, The logic of scientific discovery
   Stoica A.J., 2011, OPEN SOFTW ENG J, V5, P1
   Stoica A.J., 1995, AFRK03SE ISRN
   Stoica A.J., 2000, 15 INT FOR SCM FOC W
   Stoica A.J., 2007, 1 IEEE EQUITY INT C, P1
   Stoica AJ., 1999, EDSER 1 WORKSH ICSE
   Swithinbank Peter., 2005, Patterns: Model-Driven Development Using IBM Rational Software Architect
   Torrance G W, 1989, Int J Technol Assess Health Care, V5, P559
NR 39
TC 1
Z9 2
U1 0
U2 21
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD APR 1
PY 2015
VL 101
BP 42
EP 65
DI 10.1016/j.scico.2014.11.008
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CC6XZ
UT WOS:000350513600004
OA hybrid
DA 2024-07-18
ER

PT J
AU Poyias, K
   Tuosto, E
AF Poyias, Kyriakos
   Tuosto, Emilio
TI A design-by-contract approach to recover the architectural style from
   run-time misbehaviour
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Design-by-contract; Software architectures; Architectural style
ID SOFTWARE; VERIFICATION
AB We propose to control the reconfigurations of applications leading to an erroneous state by exploiting its architectural model. Our work relies on Architectural Design Rewriting (ADR, for short) which is a rule-based formal framework for modelling (the evolution of) software architectures. We equip the reconfiguration rules of an ADR architecture with pre- and post-conditions expressed in a simple logic; a pre-condition constraints the applicability of a rule while a post-condition specifies the properties expected of the resulting graphs. We give an algorithm to compute the weakest pre-condition out of a rule and its post-condition. On top of this algorithm, we design a simple methodology that allows us to select which rules can be applied at the architectural level to reconfigure a system so to regain its architectural style when it becomes compromised by unexpected run-time reconfigurations. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Poyias, Kyriakos] Adv Management Solut Ltd, Nicosia, Cyprus.
   [Tuosto, Emilio] Univ Leicester, Leicester LE1 7RH, Leics, England.
C3 University of Leicester
RP Poyias, K (corresponding author), Adv Management Solut Ltd, Nicosia, Cyprus.
EM kyriakos@poyias.com; emilio@le.ac.uk
FU European Union [295261 (MEALS)]
FX This work has been supported by the European Union Seventh Framework
   Programme under grant agreement no. 295261 (MEALS).
CR Aguirre N., 2004, ENTCS, V108, P69
   Allen R, 1998, LECT NOTES COMPUT SC, V1382, P21, DOI 10.1007/BFb0053581
   Becker Basil., 2006, Proceeding of the 28th international conference on Software engineering - ICSE '06, P72
   Bradbury J.S., 2004, Proceedings of the 1st ACM SIGSOFT Workshop on Self-managed Systems. WOSS '04, P28, DOI [10.1145/1075405.1075411, DOI 10.1145/1075405.1075411]
   Bruni R, 2008, LECT NOTES COMPUT SC, V4912, P186
   Bruni R, 2008, LECT NOTES COMPUT SC, V5065, P37, DOI 10.1007/978-3-540-68679-8_4
   Bruni R, 2008, BULL EUR ASSOC THEOR, P161
   Bruni R, 2012, LECT NOTES COMPUT SC, V7212, P240, DOI 10.1007/978-3-642-28872-2_17
   Bruni R, 2011, LECT NOTES COMPUT SC, V6582, P133, DOI 10.1007/978-3-642-20401-2_7
   Bruni R, 2009, ELECTRON NOTES THEOR, V238, P45, DOI 10.1016/j.entcs.2009.05.012
   Calinescu R, 2012, COMMUN ACM, V55, P69, DOI 10.1145/2330667.2330686
   Clavel M, 2007, All About Maude: A High-Performance Logical Framework
   Cobleigh JM, 2003, LECT NOTES COMPUT SC, V2619, P331
   Dijkstra EdsgerW., 1976, LANGUAGE HIERARCHIES, V46, P111
   Ehrig H, 2010, LECT NOTES COMPUT SC, V6013, P139, DOI 10.1007/978-3-642-12029-9_10
   Ferrari GL, 2006, LECT NOTES COMPUT SC, V4111, P22
   Fiadeiro JL, 2006, LECT NOTES COMPUT SC, V4184, P193
   Foster H, 2011, LECT NOTES COMPUT SC, V6582, P35, DOI 10.1007/978-3-642-20401-2_4
   Garlan D, 2004, COMPUTER, V37, P46, DOI 10.1109/MC.2004.175
   Grosso William., 2001, JAVA RMI
   Habel A., 1996, Fundamenta Informaticae, V26, P287
   Habel A, 2006, LECT NOTES COMPUT SC, V4178, P445
   Hirsch D, 1999, INT FED INFO PROC, V12, P127
   Le Metayer D, 1998, IEEE T SOFTWARE ENG, V24, P521, DOI 10.1109/32.708567
   Mazzara Manuel, 2012, Web Services and Formal Methods. 8th International Workshop (WS-FM 2011). Revised Selected Papers, P64, DOI 10.1007/978-3-642-29834-9_6
   MEYER B, 1992, COMPUTER, V25, P40, DOI 10.1109/2.161279
   Poyias K., 2013, ICE, P63
   Poyias K, 2012, ELECTRON PROC THEOR, P67, DOI 10.4204/EPTCS.104.7
   Shaw M., 1996, SOFTWARE ARCHITECTUR
NR 29
TC 2
Z9 2
U1 0
U2 1
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR 15
PY 2015
VL 100
BP 2
EP 27
DI 10.1016/j.scico.2014.10.005
PG 26
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CB6IS
UT WOS:000349731300002
DA 2024-07-18
ER

PT J
AU Gutiérrez, R
   Meseguer, J
   Rocha, C
AF Gutierrez, Raul
   Meseguer, Jose
   Rocha, Camilo
TI Order-sorted equality enrichments modulo axioms
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Equality predicate; Order-sorted equational logic modulo axioms;
   Algebraic specifications; Initial algebra semantics; Maude
ID TERMINATION; TOOL
AB Built-in equality and inequality predicates based on comparison of canonical forms in algebraic specifications are frequently used because they are handy and efficient. However, their use places algebraic specifications with initial algebra semantics beyond the pale of theorem proving tools based, for example, on explicit or inductionless induction techniques, and of other formal tools for checking key properties such as confluence, termination, and sufficient completeness. Such specifications would instead be amenable to formal analysis if an equationally-defined equality predicate enriching the algebraic data types were to be added to them. Furthermore, having an equationally-defined equality predicate is very useful in its own right, particularly in inductive theorem proving. Is it possible to effectively define a theory transformation epsilon bar right arrow epsilon(similar to) that extends an algebraic specification epsilon to a specification epsilon(similar to) having an equationally-defined equality predicate? This paper answers this question in the affirmative for a broad class of order-sorted conditional specifications epsilon that are sort-decreasing, ground confluent, and operationally terminating modulo axioms B and have a subsignature of constructors. The axioms B can consist of associativity, or commutativity, or associativity-commutativity axioms, so that the constructors are free modulo B. We prove that the transformation epsilon bar right arrow epsilon(similar to) preserves all the just-mentioned properties of epsilon. The transformation has been automated in Maude using reflection and is used as a component in many Maude formal tools. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Gutierrez, Raul; Meseguer, Jose] Univ Illinois, Dept Comp Sci, Urbana, IL 61801 USA.
   [Rocha, Camilo] Escuela Colombiana Ingn, Bogota, DC, Colombia.
C3 University of Illinois System; University of Illinois Urbana-Champaign
RP Gutiérrez, R (corresponding author), Univ Politecn Valencia, Dept Sistemes Informat & Computacio, Camino Vera S-N, E-46022 Valencia, Spain.
EM rgutierrez@dsic.upv.es; meseguer@cs.illinois.edu;
   camilo.rocha@escuelaing.edu.co
RI Gutiérrez, Raúl/P-4531-2019
OI Gutiérrez, Raúl/0000-0002-3984-2868; Rocha, Camilo/0000-0003-4356-7704
FU NSF [CCF 09-05584, CNS 13-19109]; EU (FEDER); Spanish MINECO [TIN
   2010-21062-C02, TIN 2013-45732-C4-1-P]; Generalitat Valenciana
   [PROMETEO/2011/052]; Juan de la Cierva Fellowship from the Spanish
   MINECO [JCI-2012-13528]
FX This work has been supported in part by NSF Grants CCF 09-05584 and CNS
   13-19109, the EU (FEDER) and the Spanish MINECO under Grants TIN
   2010-21062-C02 and TIN 2013-45732-C4-1-P, and by the Generalitat
   Valenciana, ref. PROMETEO/2011/052. Raul Gutierrez is also partially
   supported by a Juan de la Cierva Fellowship from the Spanish MINECO,
   ref. JCI-2012-13528.
CR [Anonymous], 2007, LNCS
   Baader Franz, 1998, TERM REWRITING ALL
   BACHMAIR L, 1985, J SYMB COMPUT, V1, P329, DOI 10.1016/S0747-7171(85)80019-5
   Bergstra J., 1980, LNCS, V81, P76
   Clavel M, 2007, LECT NOTES COMPUT SC, V4624, P173
   Duran Francisco, 2008, Higher-Order and Symbolic Computation, V21, P59, DOI 10.1007/s10990-008-9028-2
   Durán F, 2012, J LOGIC ALGEBR PROGR, V81, P816, DOI 10.1016/j.jlap.2011.12.004
   Durán F, 2009, LECT NOTES ARTIF INT, V5749, P246, DOI 10.1007/978-3-642-04222-5_15
   Goguen J.A., 1980, LECTURE NOTES COMPUT, V87, P356
   GOGUEN JA, 1992, THEOR COMPUT SCI, V105, P217, DOI 10.1016/0304-3975(92)90302-V
   Gutierrez Raul, 2012, Rewriting Logic and Its Applications. 9th International Workshop, WRLA 2012. Held as a Satellite Event of ETAPS. Revised Selected Papers, P162, DOI 10.1007/978-3-642-34005-5_9
   Hendrix J, 2005, LECT NOTES COMPUT SC, V3467, P165
   Hendrix Joseph D, 2008, THESIS U ILLINOIS UR
   Lucas S, 2005, INFORM PROCESS LETT, V95, P446, DOI 10.1016/j.ipl.2005.05.002
   Masaki N, 2007, LECT NOTES COMPUT SC, V4711, P381
   Meseguer J, 1998, LECT NOTES COMPUT SC, V1376, P18
   Meseguer J., 1986, ALGEBRAIC METHODS SE, P459
   Musser D.R., 1980, Proceed- ings of the 7th ACM Symp. Principles of Programming Languages (POPL 1980), P154, DOI DOI 10.1145/567446.567461
   Ohlebusch E., 2002, Advanced Topics in Term Rewriting
   Rocha Camilo, 2011, Algebra and Coalgebra in Computer Science. Proceedings 4th International Conference, CALCO 2011, P314, DOI 10.1007/978-3-642-22944-2_22
   Rocha C, 2008, LECT NOTES COMPUT SC, V4988, P337
   Rubio A, 2002, INFORM COMPUT, V178, P515, DOI 10.1006/inco.2002.3158
NR 22
TC 6
Z9 6
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR 7
PY 2015
VL 99
BP 235
EP 261
DI 10.1016/j.scico.2014.07.003
PG 27
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CA5PI
UT WOS:000348959900008
OA Green Published, Green Submitted, hybrid
DA 2024-07-18
ER

PT J
AU Sanchez, A
   Oliveira, N
   Barbosa, LS
   Henriques, P
AF Sanchez, Alejandro
   Oliveira, Nuno
   Barbosa, Luis S.
   Henriques, Pedro
TI A perspective on architectural re-engineering
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Software architecture; Coordination patterns; Re-engineering
ID SOFTWARE; REO
AB Continuous evolution towards very large, heterogeneous, highly dynamic computing systems entails the need for sound and flexible approaches to deal with system modification and re-engineering. The approach proposed in this paper combines an analysis stage, to identify concrete patterns of interaction in legacy code, with an iterative re-engineering process at a higher level of abstraction. Both stages are supported by the tools CoordPat and Archery, respectively. Bi-directional model transformations connecting code level and design level architectural models are defined. The approach is demonstrated in a (fragment of a) case study. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Sanchez, Alejandro] Univ Nacl San Luis, San Luis, Argentina.
   [Sanchez, Alejandro; Oliveira, Nuno; Barbosa, Luis S.] INESC TEC, HASLab, Braga, Portugal.
   [Sanchez, Alejandro; Oliveira, Nuno; Barbosa, Luis S.] Univ Minho, Braga, Portugal.
   [Henriques, Pedro] Univ Minho, CCTC, Braga, Portugal.
C3 Universidad Nacional de San Luis; INESC TEC; Universidade do Minho;
   Universidade do Minho
RP Barbosa, LS (corresponding author), INESC TEC, HASLab, Braga, Portugal.
RI Henriques, Pedro Rangel/M-5587-2013; Soares Barbosa, Luis/N-7086-2013
OI Henriques, Pedro Rangel/0000-0002-3208-0207; Soares Barbosa,
   Luis/0000-0002-5037-2588; Sanchez, Alejandro/0000-0003-4899-6567
FU ERDF through the Programme COMPETE; FCT, the Portuguese Foundation for
   Science and Technology [FCOMP-01-0124-FEDER-028923]
FX This work is funded by the ERDF through the Programme COMPETE and by
   FCT, the Portuguese Foundation for Science and Technology, under
   contract FCOMP-01-0124-FEDER-028923.
CR Aldini A., 2010, PROCESS ALGEBRAIC AP, V54
   Allen R., 1997, ACM Transactions on Software Engineering and Methodology, V6, P213, DOI 10.1145/258077.258078
   Allen R, 1998, LECT NOTES COMPUT SC, V1382, P21, DOI 10.1007/BFb0053581
   [Anonymous], 1996, PATTERN ORIENTED SOF
   Arbab F, 2004, MATH STRUCT COMP SCI, V14, P329, DOI 10.1017/S0960129504004153
   Baeten J.C., 2010, Process Algebra: Equational Theories of Communicating Processes, VVolume 50
   Baeten JCM, 2005, THEOR COMPUT SCI, V335, P131, DOI 10.1016/j.tcs.2004.07.036
   Barbosa LS., 2011, P TTSS 11 5 INT WORK, P77
   Barbosa LS, 2010, COMPUT SYST SCI ENG, V25, P273
   Bass L., 2013, SOFTWARE ARCHITECTUR
   Booch G., 2005, The Unified Modeling Language User Guide
   Bradbury J.S., 2004, Proceedings of the 1st ACM SIGSOFT Workshop on Self-managed Systems. WOSS '04, P28, DOI [10.1145/1075405.1075411, DOI 10.1145/1075405.1075411]
   Bruni R, 2008, LECT NOTES COMPUT SC, V5065, P37, DOI 10.1007/978-3-540-68679-8_4
   Bruni R, 2008, BULL EUR ASSOC THEOR, P161
   Bruni R, 2010, SCI ANN COMPUT SCI, V20, P53
   Cranen S, 2013, LECT NOTES COMPUT SC, V7795, P199, DOI 10.1007/978-3-642-36742-7_15
   Garlan D., 1997, P CASCON, V97, P169
   GELERNTER D, 1992, COMMUN ACM, V35, P96, DOI 10.1145/129630.129635
   Georgiadis I., 2002, P 1 WORKSHOP SELF HE, P33, DOI DOI 10.1145/582128.582135.
   Groote J.F., 2007, DAGSTUHL SEMINAR P, V06351
   HORWITZ S, 1988, SIGPLAN NOTICES, V23, P35
   Jackson D, 2002, ACM T SOFTW ENG METH, V11, P256, DOI 10.1145/505145.505149
   Kramer J, 2003, LECT NOTES COMPUT SC, V2804, P44
   Krause C, 2011, SCI COMPUT PROGRAM, V76, P23, DOI 10.1016/j.scico.2009.10.006
   Magee J., 1995, Software Engineering - ESEC '95. 5th European Software Engineering Conference. Proceedings, P137
   Magee J., 1996, Software Engineering Notes, V21, P3, DOI 10.1145/250707.239104
   Medvidovic N, 2002, ACM T SOFTW ENG METH, V11, P2, DOI 10.1145/504087.504088
   Medvidovic N, 2000, IEEE T SOFTWARE ENG, V26, P70, DOI 10.1109/32.825767
   Milner R., 2001, CONCUR 2001 - Concurrency Theory. 12th International Conference. Proceedings (Lecture Notes in Computer Science Vol.2154), P16
   Nanda MG, 2006, ACM T PROGR LANG SYS, V28, P1088, DOI 10.1145/1186632.1186636
   Oliveira N., 2012, LECT NOTES COMPUTER, P134
   OTTENSTEIN KJ, 1984, SIGPLAN NOTICES, V19, P177, DOI 10.1145/390011.808263
   Ranganath Venkatesh Prasad, 2007, International Journal on Software Tools for Technology Transfer, V9, P489, DOI 10.1007/s10009-007-0043-0
   Ranganath V.P., 2007, ACM T PROGR LANG SYS, P29
   Rodrigues NF, 2008, EIGHTH IEEE INTERNATIONAL WORKING CONFERENCE ON SOURCE CODE ANALYSIS AND MANIPULATION, PROCEEDINGS, P265, DOI 10.1109/SCAM.2008.10
   Rodrigues NF, 2011, LECT NOTES COMPUT SC, V7046, P83
   Rodrigues NF, 2010, SCI COMPUT PROGRAM, V75, P828, DOI 10.1016/j.scico.2010.02.002
   Sanchez A., 2014, THESIS U SAN LUIS AR
   Sanchez Alejandro., 2011, Formal Aspects of Component Software. FACS, V7253, P313
   Sánchez A, 2011, PM2HW2N 11: PROCEEDINGS OF THE SIXTH ACM INTERNATIONAL WORKSHOP ON PERFORMANCE MONITORING, MEASUREMENT, AND EVALUATION OF HETEROGENEOUS WIRELESS AND WIRED NETWORKS, P17
   Shaw M., 1996, SOFTWARE ARCHITECTUR
NR 41
TC 4
Z9 4
U1 0
U2 12
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 1
PY 2015
VL 98
BP 764
EP 784
DI 10.1016/j.scico.2014.02.026
PN 4
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AY7LJ
UT WOS:000347741400013
OA Green Published
DA 2024-07-18
ER

PT J
AU Kfoury, A
AF Kfoury, Assaf
TI The syntax and semantics of a domain-specific language for flow-network
   design
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 15th Brazilian Symposium on Programming Languages (SBLP)
CY SEP 26-30, 2011
CL Sao Paulo, BRAZIL
DE Network specification; Flow conservation; Capacity constraint; Typing;
   Vector space
ID REWRITING CALCULUS
AB Flow networks are inductively defined, assembled from small components to produce arbitrarily large ones, with interchangeable functionally-equivalent parts. We carry out this induction formally using a domain-specific language (DSL). Associated with our DSL are a semantics and a typing theory. The latter gives rise to a system of formal annotations that enforce desirable properties of flow networks as invariants across their interfaces. A prerequisite for a typing theory is a formal semantics, i.e., a rigorous characterization of flows that are safe for the network (limited to the notion of feasible flows in this paper, unfeasible flows being considered unsafe). We give a detailed presentation of a denotational semantics only, but also point out the elements that an equivalent operational semantics must include. (C) 2013 Elsevier B.V. All rights reserved.
C1 Boston Univ, Dept Comp Sci, Boston, MA 02215 USA.
C3 Boston University
RP Kfoury, A (corresponding author), Boston Univ, Dept Comp Sci, 111 Cummington St, Boston, MA 02215 USA.
EM kfoury@bu.edu
CR [Anonymous], 1992, Semantics of programming languages: structures and techniques
   Aydin H, 2001, EUROMICRO, P225, DOI 10.1109/EMRTS.2001.934038
   Baldan P, 2007, MATH STRUCT COMP SCI, V17, P363, DOI 10.1017/S0960129507006093
   Balon S, 2006, ICON: 2006 IEEE INTERNATIONAL CONFERENCE ON NETWORKS, VOLS 1 AND 2, PROCEEDINGS, P566
   Barthe G, 2003, ACM SIGPLAN NOTICES, V38, P250, DOI 10.1145/640128.604152
   Bestavros A., 2009, P IEEE RTSS 2 WORKSH, P32
   Bestavros A, 2011, ELECTRON PROC THEOR, P24, DOI 10.4204/EPTCS.66.2
   Bestavros A, 2010, HSSC 10: PROCEEDINGS OF THE 13TH ACM INTERNATIONAL CONFERENCE ON HYBRID SYSTEMS: COMPUTATION AND CONTROL, P231
   Boyd S., 2004, CONVEX OPTIMIZATION
   Cirstea H, 2004, ANN NY ACAD SCI, V3085, P147
   Cirstea H., 2004, ELECT NOTES THEORETI, V71, P3, DOI DOI 10.1016/S1571-0661(05)82526-5
   Cormen Thomas H., 2001, INTRO ALGORITHMS
   Cousot P., 1997, Conference Record of POPL '97: The 24th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P316, DOI 10.1145/263699.263744
   Cousot Patrick, 1978, P 5 ACM SIGACT SIGPL, p84S96, DOI DOI 10.1145/512760.512770
   Cunningham W. H., 1979, Mathematics of Operations Research, V4, P196, DOI 10.1287/moor.4.2.196
   Deng Z, 1997, REAL TIM SYST SYMP P, P308, DOI 10.1109/REAL.1997.641292
   Fritzson P., 2011, TECHNICAL REPORTS CO, V10
   Fritzson P., 2011, TECHNICAL REPORTS CO, V9
   Halbwachs N., 1993, Computer Aided Verification. 5th International Conference, CAV '93 Proceedings, P333
   Jay B, 2006, LECT NOTES COMPUT SC, V3924, P100
   Kfoury A., 2012, BUCSTR2012004
   Kfoury A., P SBLP 2011 BRAZ S P, P76
   Kfoury A., 2011, BUCSTR2011011
   Krafzig D., 2004, ENTERPRISE SOA SERVI
   Lim S.-S., 1995, IEEE Real-Time Systems Symposium, P97
   Mitchell John C., 1996, Foundation of computing series
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Pouwelse J., 2001, P ACM MOBICOM, P251, DOI DOI 10.1145/381677.381701
   Rashidi H., 2009, J IND ENG, V2, P1
   Regehr J, 2002, USENIX ASSOCIATION PROCEEDINGS OF THE FREENIX TRACK, P143
   Schmidt DC, 1998, COMPUT COMMUN, V21, P294, DOI 10.1016/S0140-3664(97)00165-5
   Schrijver A., 2012, COURSE COMBINA UNPUB
   Schrijver A., 1986, Wiley-Interscience Series in Discrete Mathematics
   Soule N., 2011, P 4 INT WORKSH EQ BA
   Stankovic J., 2000, SPRINGER VERLAG LECT, V2211, P390
NR 35
TC 1
Z9 2
U1 0
U2 6
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 1
PY 2014
VL 93
SI SI
BP 19
EP 38
DI 10.1016/j.scico.2012.12.009
PN A
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA AO7QS
UT WOS:000341548300003
OA hybrid
DA 2024-07-18
ER

PT J
AU Jansen, N
   Wimmer, R
   Abrahám, E
   Zajzon, B
   Katoen, JP
   Becker, B
   Schuster, J
AF Jansen, Nils
   Wimmer, Ralf
   Abraham, Erika
   Zajzon, Barna
   Katoen, Joost-Pieter
   Becker, Bernd
   Schuster, Johann
TI Symbolic counterexample generation for large discrete-time Markov chains
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 9th International Symposium on Formal Aspects of Component Software
   (FACS)
CY SEP 12-14, 2012
CL Mountain View, CA
DE Markov chain; Counterexample; Model checking; Binary decision diagram
ID BINARY DECISION DIAGRAMS; MODEL CHECKING; ALGORITHM
AB This paper presents several symbolic counterexample generation algorithms for discrete-time Markov chains (DTMCs) violating a PCTL formula. A counterexample is (a symbolic representation of) a sub-DTMC that is incrementally generated. The crux to this incremental approach is the symbolic generation of paths that belong to the counterexample. We consider two approaches. First, we extend bounded model checking and develop a simple heuristic to generate highly probable paths first. We then complement the SAT-based approach by a fully (multi-terminal) BOO-based technique. All symbolic approaches are implemented, and our experimental results show a substantially better scalability than existing explicit techniques. In particular, our BDD-based approach using a method called fragment search allows for counterexample generation for DTMCs with billions of states (up to 10(15)). (C) 2014 Elsevier B.V. All rights reserved.
C1 [Jansen, Nils; Abraham, Erika; Zajzon, Barna; Katoen, Joost-Pieter] Rhein Westfal TH Aachen, D-52056 Aachen, Germany.
   [Wimmer, Ralf; Becker, Bernd] Univ Freiburg, D-79106 Freiburg, Germany.
   [Schuster, Johann] Univ Fed Armed Forces, Munich, Germany.
C3 RWTH Aachen University; University of Freiburg; Bundeswehr University
   Munich
RP Jansen, N (corresponding author), Rhein Westfal TH Aachen, Comp Sci 2,Ahornstr 55, D-52056 Aachen, Germany.
EM nils.jansen@informatik.rwth-aachen.de;
   wimmer@informatik.uni-freiburg.de; abraham@informatik.rwth-aachen.de;
   barna.zajzon@rwth-aachen.de; katoen@informatik.rwth-aachen.de;
   becker@informatik.uni-freiburg.de; johann.schuster@unibw.de
RI Abraham, Erika/G-5259-2012; Katoen, Joost-Pieter/O-3307-2018
OI Abraham, Erika/0000-0002-5647-6134; Zajzon, Barna/0000-0002-3458-103X;
   Becker, Bernd/0000-0003-4031-3258; Jansen, Nils/0000-0003-1318-8973;
   Katoen, Joost-Pieter/0000-0002-6143-1926
CR Aljazzar Husain, 2011, Model Checking Software. Proceedings 18th International SPIN Workshop, P183, DOI 10.1007/978-3-642-22306-8_13
   Aljazzar H, 2011, ARTIF INTELL, V175, P2129, DOI 10.1016/j.artint.2011.07.003
   Aljazzar H, 2010, IEEE T SOFTWARE ENG, V36, P37, DOI 10.1109/TSE.2009.57
   Aljazzar Husain., 2010, Proceedings of the 2010 ICSE Workshop on Quantitative Stochastic Models in the Verification and Design of Software Systems, QUOVADIS'10, P25
   Andrés ME, 2009, LECT NOTES COMPUT SC, V5394, P129
   [Anonymous], 2002, Ph.D. Thesis
   [Anonymous], 1998, ACM Trans Inform Syst Secur TISSEC, DOI DOI 10.1145/290163.290168
   Baier C, 2008, PRINCIPLES OF MODEL CHECKING, P1
   Baier C, 1997, LECT NOTES COMPUT SC, V1256, P430
   Biere A., 2009, Handbook of Satisfiability
   Bollig B, 1996, IEEE T COMPUT, V45, P993, DOI 10.1109/12.537122
   Braitling B, 2011, LECT NOTES COMPUT SC, V6722, P75, DOI 10.1007/978-3-642-21461-5_5
   BREITBART Y, 1995, THEOR COMPUT SCI, V145, P45, DOI 10.1016/0304-3975(94)00181-H
   BRYANT RE, 1986, IEEE T COMPUT, V35, P677, DOI 10.1109/TC.1986.1676819
   BRYANT RE, 1991, IEEE T COMPUT, V40, P205, DOI 10.1109/12.73590
   BURCH JR, 1992, INFORM COMPUT, V98, P142, DOI 10.1016/0890-5401(92)90017-A
   Chadha R, 2010, ACM T COMPUT LOG, V12, DOI 10.1145/1838552.1838553
   Clarke E, 2001, FORM METHOD SYST DES, V19, P7, DOI 10.1023/A:1011276507260
   Clarke EM, 2008, LECT NOTES COMPUT SC, V5000, P1
   Clarke EdmundM., 2000, Proceedings of the International Conference on Computer Aided Veri cation (CAV), P154, DOI 10.1007/1072216715
   Cook S. A., 1971, Proceedings of the 3rd annual ACM symposium on theory of computing, P151
   Dijkstra EW., 1959, NUMER MATH, V1, P269, DOI [10.1007/BF01386390, DOI 10.1007/BF01386390]
   Eén N, 2004, LECT NOTES COMPUT SC, V2919, P502, DOI 10.1007/978-3-540-24605-3_37
   Eppstein D, 1998, SIAM J COMPUT, V28, P652, DOI 10.1137/S0097539795290477
   Fecher H, 2010, PERFORM EVALUATION, V67, P858, DOI 10.1016/j.peva.2009.07.002
   Fujita M, 1997, FORM METHOD SYST DES, V10, P149, DOI 10.1023/A:1008647823331
   Gentilini R, 2003, SIAM PROC S, P573
   Gunther M., 2010, P 1 WORKSH DYN ASP D, P13
   Han T, 2009, IEEE T SOFTWARE ENG, V35, P241, DOI 10.1109/TSE.2009.5
   Hansson H., 1994, Formal Aspects of Computing, V6, P512, DOI 10.1007/BF01211866
   Hermanns H, 2003, J LOGIC ALGEBR PROGR, V56, P23, DOI 10.1016/S1567-8326(02)00066-8
   Hermanns H, 2008, LECT NOTES COMPUT SC, V5123, P162
   ITAI A, 1990, INFORM COMPUT, V88, P60, DOI 10.1016/0890-5401(90)90004-2
   Jansen Nils, 2012, Automated Technology for Verification and Analysis. Proceedings of the 10th International Symposium, ATVA 2012, P349, DOI 10.1007/978-3-642-33386-6_27
   Jansen N., 2012, INT WORKSH FORM ASP, P134
   Jansen N, 2011, LECT NOTES COMPUT SC, V6996, P443, DOI 10.1007/978-3-642-24372-1_33
   Jiménez VM, 1999, LECT NOTES COMPUT SC, V1668, P15
   Katoen JP, 2011, PERFORM EVALUATION, V68, P90, DOI 10.1016/j.peva.2010.04.001
   Kattenbelt M., 2009, LIPICS, V4, P251
   Kemeney J.G., 1976, DENUMERABLE MARKOV C
   Kwiatkowsa M., 2012, 2012 Ninth International Conference on Quantitative Evaluation of Systems (QEST 2012), P203, DOI 10.1109/QEST.2012.14
   Kwiatkowska Marta, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P585, DOI 10.1007/978-3-642-22110-1_47
   Kwiatkowska M, 2002, LECT NOTES COMPUT SC, V2280, P52
   Norman G, 2006, J COMPUT SECUR, V14, P561, DOI 10.3233/JCS-2006-14604
   RUDELL R, 1993, 1993 IEEE/ACM INTERNATIONAL CONFERENCE ON COMPUTER-AIDED DESIGN - DIGEST OF TECHNICAL PAPERS, P42, DOI 10.1109/ICCAD.1993.580029
   Schuster J., 2012, THESIS U BUNDESWEHR
   Somenzi F., 2013, CUDD DECISION DIAGRA
   Tarjan R., 1970, SIAM J COMPUT, V1, P146
   Tseitin G.S., 1983, STUDIES CONSTRUCTI 2, P466, DOI DOI 10.1007/978-3-642-81955-128
   Wimmer R, 2012, LECT NOTES COMPUT SC, V7214, P299, DOI 10.1007/978-3-642-28756-5_21
   Wimmer R, 2009, LECT NOTES COMPUT SC, V5403, P366, DOI 10.1007/978-3-540-93900-9_29
NR 51
TC 12
Z9 13
U1 0
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 1
PY 2014
VL 91
SI SI
BP 90
EP 114
DI 10.1016/j.scico.2014.02.001
PN A
PG 25
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA AK4NL
UT WOS:000338401300005
OA hybrid
DA 2024-07-18
ER

PT J
AU Nadas, A
   Levendovszky, T
   Jackson, EK
   Madari, I
   Sztipanovits, J
AF Nadas, Andras
   Levendovszky, Tihamer
   Jackson, Ethan K.
   Madari, Istvan
   Sztipanovits, Janos
TI A model-integrated authoring environment for privacy policies
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Privacy policies; Model-integrated computing; Constraint logic
   programming
ID SEMANTICS; LOGIC; DESIGN
AB Privacy policies are rules designed to ensure that individuals' health data are properly protected. Health Information Systems (HIS) are legally required to adhere to these policies. Since privacy policies are imposed on complex software systems, it is extremely hard to reason about their conformance and consistency. In order to address this problem, we have created a model-driven authoring environment to formally specify privacy policies originally defined in legal terms. In our observation, appropriate formalization of our policy language enabled formal analysis of its policies; these features were key to a successful model-driven engineering process. In this paper we present our modeling language and show its semantic anchoring to analyzable logic programs. We report on several projects where our approach is being applied and validated. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Nadas, Andras; Levendovszky, Tihamer; Madari, Istvan; Sztipanovits, Janos] Vanderbilt Univ, Nashville, TN 37235 USA.
   [Jackson, Ethan K.] Microsoft Res, Seattle, WA USA.
C3 Vanderbilt University; Microsoft
RP Levendovszky, T (corresponding author), Vanderbilt Univ, 221 Kirkland Hall, Nashville, TN 37235 USA.
EM andras.nadas@vanderbilt.edu; tihamer@isis.vanderbilt.edu;
   ejacksonh@microsoft.com; pityu@isis.vanderbilt.edu;
   janos.sztipanovits@vanderbilt.edu
OI Sztipanovits, Janos/0000-0002-8360-6299
FU National Science Foundation (NSF) TRUST (The Team for Research in
   Ubiquitous Secure Technology) Science and Technology Center
   [CCF-0424422]; Office of National Coordinator for Health Information
   Technology (ONC) [HHS 90TR0003/1]
FX The work presented in this paper was funded through National Science
   Foundation (NSF) TRUST (The Team for Research in Ubiquitous Secure
   Technology) Science and Technology Center Grant Number CCF-0424422 and
   Office of National Coordinator for Health Information Technology (ONC)
   Grant Number HHS 90TR0003/1. Its contents are solely the responsibility
   of the authors and do not necessarily represent the official views of
   the HHS or NSF.
CR [Anonymous], WORKSH INT SIGN PROC
   [Anonymous], 1992, Semantics of programming languages: structures and techniques
   Balasubramanian D, 2009, IEEE INT CONF AUTOM, P645, DOI 10.1109/ASE.2009.83
   Barth A., 2004, Proceedings of the 2004 ACM workshop on Privacy in the electronic society, P45
   Barth A, 2007, 20TH IEEE COMPUTER SECURITY FOUNDATIONS SYMPOSIUM (CSFS20), PROCEEDINGS, P279, DOI 10.1109/CSF.2007.26
   Barth A, 2006, P IEEE S SECUR PRIV, P184, DOI 10.1109/SP.2006.32
   Basin D, 2010, LECT NOTES COMPUT SC, V6174, P1, DOI 10.1007/978-3-642-14295-6_1
   Becker MY, 2010, J COMPUT SECUR, V18, P619, DOI 10.3233/JCS-2009-0364
   Bodenreider O, 2004, NUCLEIC ACIDS RES, V32, pD267, DOI 10.1093/nar/gkh061
   Chen K, 2007, DES AUT TEST EUROPE, P906
   Chen Kai., 2005, P 5 ACM INT C EMBEDD, P35, DOI DOI 10.1145/1086228.1086236
   Cousot Patrick, 2012, NASA Formal Methods. Proceedings of the 4th International Symposium, NFM 2012, P3, DOI 10.1007/978-3-642-28891-3_3
   Craven R., FORMAL FRAMEWORK POL
   Dantsin E, 2001, ACM COMPUT SURV, V33, P374, DOI 10.1145/502807.502810
   Datta A, 2011, LECT NOTES COMPUT SC, V7093, P1, DOI 10.1007/978-3-642-25560-1_1
   Datta A, 2009, P IEEE S SECUR PRIV, P221, DOI 10.1109/SP.2009.16
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Garg D., ABS11022521 CORR
   Gargantini A, 2009, AUTOMAT SOFTW ENG, V16, P415, DOI 10.1007/s10515-009-0053-0
   Gurevich Y., 1993, EVOLVING ALGEBRAS AT
   Gurevich Y, 2008, CSF 2008: 21ST IEEE COMPUTER SECURITY FOUNDATIONS SYMPOSIUM, PROCEEDINGS, P149, DOI 10.1109/CSF.2008.8
   Harel D, 2004, COMPUTER, V37, P64, DOI 10.1109/MC.2004.172
   Hemingway G, 2007, P INT COMP SOFTW APP, P287
   Jackson E, 2009, SOFTW SYST MODEL, V8, P451, DOI 10.1007/s10270-008-0105-0
   Jackson EK, 2011, LECT NOTES COMPUT SC, V6981, P653, DOI 10.1007/978-3-642-24485-8_48
   Jackson EK, 2009, LECT NOTES COMPUT SC, V5634, P72, DOI 10.1007/978-3-642-02655-3_7
   Jaffar J, 1998, J LOGIC PROGRAM, V37, P1, DOI 10.1016/S0743-1066(98)10002-X
   Lam PE, 2009, LECT NOTES COMPUT SC, V5695, P73, DOI 10.1007/978-3-642-03748-1_8
   Lam PeifungE., 2012, Proceedings of the 2nd ACM SIGHIT International Health Informatics Symposium, P323
   Lassila O., Resource description framework (rdf) model and syntax specification
   LEDECZI A, 2001, GME 2000 USERS MANUA
   Liu Q, 2011, COMM COM INF SC, V153, P484
   Nissenbaum H, 2004, WASH LAW REV, V79, P119
   Pan A., 1990, Proceedings of the 1990 Symposium on Applied Computing (Cat. No.90TH0307-9), P122, DOI 10.1109/SOAC.1990.82152
   Pritts J., REPORT STATE LAW REQ
   Rustan K, 2010, LECT NOTES ARTIF INT, V6355, P348, DOI 10.1007/978-3-642-17511-4_20
   Savova GK, 2010, J AM MED INFORM ASSN, V17, P507, DOI 10.1136/jamia.2009.001560
   Simko G., 2012, P ASME 2012 INT DES, P12, DOI DOI 10.1115/DETC2012-70534
   Tschantz M.C., ABS11012819 CORR
   Weirich S, 2011, ACM SIGPLAN NOTICES, V46, P227, DOI 10.1145/1925844.1926411
   Wermelinger M., 2004, LECT NOTES COMPUTER, V2984
   Yue Lu, 2009, 2009 33rd Annual IEEE International Computer Software and Applications Conference (COMPSAC 2009), P510, DOI 10.1109/COMPSAC.2009.184
NR 42
TC 5
Z9 5
U1 0
U2 11
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 1
PY 2014
VL 89
SI SI
BP 105
EP 125
DI 10.1016/j.scico.2013.05.004
PN B
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AJ8CA
UT WOS:000337929100004
OA hybrid
DA 2024-07-18
ER

PT J
AU Santos, OC
   Boticario, JG
   Pérez-Marín, D
AF Santos, Olga C.
   Boticario, Jesus G.
   Perez-Marin, Diana
TI Extending web-based educational systems with personalised support
   through User Centred Designed recommendations along the e-learning life
   cycle
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE e-learning life cycle; Personalisation; Adaptive educational systems;
   Educational recommender systems; User centred design
ID USABILITY; ENVIRONMENT; ADAPTIVITY; LESSONS; OBJECTS; MODELS; STATE
AB In this paper we address an open key issue during the development of web-based educational systems. In particular, we provide an educational-oriented approach for building personalised e-learning environments that focuses on putting the learners' needs in the centre of the development process. Our approach proposes user centred design methodologies involving interdisciplinary teams of software developers and domain experts. It is illustrated in an adaptive e-learning system, where a MOOC (Massive Open Online Course) was taken by nearly 400 learners. In particular, we report where user centred design methods can be applied along the e-learning life cycle to designing and evaluating personalisation support through recommendations in learning management systems. (C) 2013 Elsevier BY. All rights reserved.
C1 [Santos, Olga C.; Boticario, Jesus G.] UNED, Sch Comp Sci, Dept Artificial Intelligence, aDeNu Res Grp, Madrid 28040, Spain.
   [Perez-Marin, Diana] Univ Rey Juan Carlos, Escuela Tecn Super Ingn Informat, Dept Comp Languages & Syst 1, Madrid 28933, Spain.
C3 Universidad Nacional de Educacion a Distancia (UNED); Universidad Rey
   Juan Carlos
RP Santos, OC (corresponding author), UNED, Sch Comp Sci, Dept Artificial Intelligence, aDeNu Res Grp, Calle Juan del Rosal 16, Madrid 28040, Spain.
EM ocsantos@dia.uned.es; jgb@dia.uned.es; diana.perez@urjc.es
RI Santos, Olga C/H-5629-2011; Pérez-Marín, Diana/ABF-6641-2021;
   Pérez-Marín, Diana/L-4100-2014; Boticario, Jesus G./H-5874-2011; Santos,
   Olga C./IZE-0791-2023
OI Santos, Olga C/0000-0002-9281-4209; Pérez-Marín,
   Diana/0000-0003-3390-0251; Boticario, Jesus G./0000-0003-4949-9220;
   Santos, Olga C./0000-0002-9281-4209
FU "Multimodal approaches for Affective Modelling in Inclusive Personalised
   Educational scenarios in intelligent Contexts" - MAMIPEC
   [TIN2011-29221-C03-01]; "Ubiquitous Collaborative Adaptive Training"
   (U-CAT) [TIN2004-03140]; SERS approach, "Active Learning For Adaptive
   internet" - aLFanet [IST-2001-33288]
FX The research outcomes presented in this paper have been possible thanks
   to the funding obtained in several projects. For Willow, "Ubiquitous
   Collaborative Adaptive Training" (U-CAT, TIN2004-03140). For the SERS
   approach, "Active Learning For Adaptive internet" - aLFanet
   (IST-2001-33288), "Accessible e-Learning Platform for Europe - ALPE
   (eTEN-029328)", "European Unified Approach for Accessible Lifelong
   learning" - EU4ALL (IST-2006-034478) and "Multimodal approaches for
   Affective Modelling in Inclusive Personalised Educational scenarios in
   intelligent Contexts" - MAMIPEC (TIN2011-29221-C03-01).
CR Abel F, 2010, IEEE T LEARN TECHNOL, V3, P165, DOI 10.1109/TLT.2009.40
   Adomavicius G, 2005, IEEE T KNOWL DATA EN, V17, P734, DOI 10.1109/TKDE.2005.99
   Aher S. B., 2012, INT J COMPUTER APPL, V39, P8, DOI DOI 10.5120/4830-7087
   Al-Hamad A., 2008, IEEE MULTIDISCIPL EN, V3
   Al-Khalifa HS, 2008, P 10 INT C INF INT W, P390, DOI DOI 10.1145/1497308.1497378
   Anjorin M., 2012, P 2 WORKSH REC SYST, P83
   [Anonymous], 2005, THESIS ALBERT LUDWIG
   [Anonymous], E LEARNING NETWORKED
   [Anonymous], J MED ED
   [Anonymous], 2009, 9241 210 2010 ERGONO, DOI DOI 10.3403/30388991
   [Anonymous], ED RECOMMENDER SYSTE
   [Anonymous], IJC P INT JOINT C AR
   Avancini H, 2007, J INTELL INF SYST, V28, P253, DOI 10.1007/s10844-006-0010-3
   Belk Marios, 2012, Advances in Conceptual Modeling. Proceedings ER 2012 Workshops: CMS, ECDM-NoCoDA, MoDIC, MORE-BI, RIGiM, SeCoGIS, WISM, P337, DOI 10.1007/978-3-642-33999-8_40
   Bodea CN, 2012, ED RECOMMENDER SYSTE, P154, DOI 10.4018/978-1-61350-489-5.ch007
   Boticario JG, 2007, J INTERACT MEDIA EDU
   Boticario JG, 2012, J UNIVERS COMPUT SCI, V18, P62
   Brooke John., 1996, Usability evaluation in industry, V189, P4, DOI DOI 10.1201/9781498710411
   Brusilovsky P., 2003, J CONT ENG ED LIFELO, V13
   Calvo RA, 2010, IEEE T AFFECT COMPUT, V1, P18, DOI 10.1109/T-AFFC.2010.1
   Candillier Laurent, 2009, COLLABORATIVE SOCIAL, P1
   Cechinel Cristian, 2012, CEUR WORKSHOP P, V896, P11
   Chen SY, 2011, INTERACT LEARN ENVIR, V19, P179, DOI 10.1080/10494820802667256
   González MAC, 2009, 2009 FOURTH INTERNATIONAL CONFERENCE ON INTERNET AND WEB APPLICATIONS AND SERVICES, P322, DOI 10.1109/ICIW.2009.54
   Dagger D, 2007, IEEE INTERNET COMPUT, V11, P28, DOI 10.1109/MIC.2007.70
   Daniel J, 2012, J INTERACT MEDIA EDU, DOI 10.5334/2012-18
   De Bra P. M. E., 2008, HDB INFORM TECHNOLOG, P29, DOI [10.1007/978-3-540-74155-8_2, DOI 10.1007/978-3-540-74155-8_2]
   Deco C., 2008, P 3 C LAT OBJ APR LA, P63
   Despotovic-Zrakic M, 2012, EDUC TECHNOL SOC, V15, P326
   Diaz A., 2012, ED RECOMMENDER SYSTE, P67, DOI [10.4018/978-1-61350-489-5.ch004, DOI 10.4018/978-1-61350-489-5.CH004]
   Drachsler D., 2009, J DIGIT INF, V10
   Drachsler H, 2009, LECT NOTES COMPUT SC, V5794, P788, DOI 10.1007/978-3-642-04636-0_85
   Drachsler H, 2009, EDUC TECHNOL SOC, V12, P115
   Dron J, 2000, J NETW COMPUT APPL, V23, P131, DOI 10.1006/jnca.2000.0105
   Farzan R., 2006, P 4 INT C AD HYP AD
   Feldstein M., 2002, ELEARN MAG       SEP, V2002
   Fiaidhi J, 2004, INT J INSTRUCTIONAL, V1, P35
   Fraij Fares, 2012, International Journal of Web Based Communities, V8, P322, DOI 10.1504/IJWBC.2012.048055
   Garreta-Domingo M., 2007, P EDEN 2007
   Gasparini I, 2010, BULL TECH COMM LEARN, V12, P13
   Gena C., 2006, P 5 WORKSH US CTR DE, P3
   Ghauth KI, 2010, ETR&D-EDUC TECH RES, V58, P711, DOI 10.1007/s11423-010-9155-4
   Gómez-Albarrán M, 2009, INT J EMERG TECHNOL, V4, P35, DOI 10.3991/ijet.v4s1.797
   Grandbastien M., 2012, P 2 WORKSH REC SYST, P89
   Gruber MR, 2010, LECT NOTES COMPUT SC, V6383, P123, DOI 10.1007/978-3-642-16020-2_9
   Gulliksen J., 2003, BEHAV INF TECHNOL, V22
   Gunawardana A, 2009, J MACH LEARN RES, V10, P2935
   Hall M., 2009, ACM SIGKDD Explor. Newsl, V11, P18, DOI DOI 10.1145/1656274.1656278
   Harrigan M., 2009, 17 INT C US MOD AD P, P455
   Hauger D., 2007, WORKSH AD US MOD INT
   Hayes C, 2002, WORKSH PERS REC E CO
   Holanda Olavo, 2012, International Journal of Web Based Communities, V8, P333, DOI 10.1504/IJWBC.2012.048056
   Hsu MH, 2008, EXPERT SYST APPL, V34, P683, DOI 10.1016/j.eswa.2006.10.004
   IMS Global Learning Consortium, 2013, INT STAND
   ISO, 1998, ERG HUM SYST INT GUI
   ISO, 2002, 169822002 ISOTR
   Khribi MK, 2009, EDUC TECHNOL SOC, V12, P30
   Knijnenburg BP, 2012, USER MODEL USER-ADAP, V22, P441, DOI 10.1007/s11257-011-9118-4
   KONSTAN JA, 1999, CHI 99 WORKSH INT RE
   Koper R., 2008, Handbook on information technologies for education and training, V2nd, P135, DOI [10.1007/978-3-540-74155-8_8, DOI 10.1007/978-3-540-74155-8_8]
   Koutrika G, 2008, RECSYS'08: PROCEEDINGS OF THE 2008 ACM CONFERENCE ON RECOMMENDER SYSTEMS, P203
   Kristofic Andrej, 2005, P 16 ACM C HYP HYP, P184, DOI [10.1145/1083356.1083392, DOI 10.1145/1083356.1083392]
   Leino Juha, 2012, International Journal of Web Based Communities, V8, P285, DOI 10.1504/IJWBC.2012.048053
   Lemire D, 2005, INTERACT TECHNOL SMA, V2, P179, DOI 10.1108/17415650580000043
   Linton F, 2000, USER MODEL USER-ADAP, V10, P181, DOI 10.1023/A:1026521931194
   Mangina E, 2008, COMPUT EDUC, V50, P807, DOI 10.1016/j.compedu.2006.08.012
   Manouselis N, 2010, J COMPUT ASSIST LEAR, V26, P227, DOI 10.1111/j.1365-2729.2010.00362.x
   Manouselis N., 2012, P 2 WORKSH REC SYST, V896
   Manouselis N., 2012, SPRINGERBRIEFS ELECT
   Manouselis N., 2014, RECOMMENDER IN PRESS
   Manouselis N., 2012, 2 WORKSH REC SYST TE, V896, P35
   Manouselis N., 2010, P 1 WORKSH REC SYST, V1
   Manouselis N, 2007, INT J PATTERN RECOGN, V21, P311, DOI 10.1142/S021800140700548X
   Mao JY, 2005, COMMUN ACM, V48, P105, DOI 10.1145/1047671.1047677
   Markellou P., 2005, Proceedings of the web-based education, P461
   Martín E, 2009, IEEE T LEARN TECHNOL, V2, P23, DOI 10.1109/TLT.2008.24
   Martin L, 2007, LECT NOTES COMPUT SC, V4832, P453
   McAndrew P., 2007, Rethinking pedagogy for a digital age: Designing and delivering e-learning, P92
   MCNEE S, 2002, P ACMCSCW 2002
   McNee S., 2006, P SIGCHI C HUM FACT
   Mehlenbacher B., 2000, TUT IPCC SIGDOC INT
   Michlík P, 2010, PROCEDIA COMPUT SCI, V1, P2821, DOI 10.1016/j.procs.2010.08.007
   MOLICH R, 1990, COMMUN ACM, V33, P338, DOI 10.1145/77481.77486
   Munoz-Merino P.J., 2009, INTERFACES, V31, P484
   Munoz-Organero M., 2010, IEEE INTERNET CO MAR
   Nagata R., 2009, Proceedings of the 2nd International Conference on Educational Data Mining, P91
   Newell A.F., 2000, P 2000 C UN US
   Norman D.A., 1986, USER CTR SYSTEM DESI, DOI 10.1201/b15703
   Okoye I., 2012, ED RECOMMENDER SYSTE, P1, DOI [10.4018/978-1-61350-489-5.ch001, DOI 10.4018/978-1-61350-489-5.CH001]
   Paquette G., 2012, P 2 WORKSH REC SYST, P23
   Paramythis A, 2010, USER MODEL USER-ADAP, V20, P383, DOI 10.1007/s11257-010-9082-4
   Perez-Marin D, 2009, ADAPTIVE COMPUTER AS
   Pérez-Marín D, 2009, KNOWL ENG REV, V24, P353, DOI 10.1017/S026988890999018X
   Psaromiligkos Y, 2011, OPER RES-GER, V11, P187, DOI 10.1007/s12351-008-0032-4
   Pu P., 2010, CEUR WORKSHOP PROC, V612, P14, DOI DOI 10.1145/2043932.2043962
   Pu P, 2012, USER MODEL USER-ADAP, V22, P317, DOI 10.1007/s11257-011-9115-7
   Rafaeli S, 2004, COMPUT EDUC, V43, P273, DOI 10.1016/j.compedu.2003.10.008
   Ranka A., 2010, PUNDIT INTELLIGENT R
   Recker MM, 2003, INSTR SCI, V31, P299, DOI 10.1023/A:1024686010318
   Resnick P, 1997, COMMUN ACM, V40, P56, DOI 10.1145/245108.245121
   Ricci F, 2011, RECOMMENDER SYSTEMS HANDBOOK, P1, DOI 10.1007/978-0-387-85820-3
   Romero C, 2008, COMPUT EDUC, V51, P368, DOI 10.1016/j.compedu.2007.05.016
   Romero C, 2009, COMPUT EDUC, V53, P828, DOI 10.1016/j.compedu.2009.05.003
   Rosson MB., 2001, Usability engineering: scenario-based development of human-computer interaction
   Ruiz-Iniesta Almudena, 2012, International Journal of Web Based Communities, V8, P302, DOI 10.1504/IJWBC.2012.048054
   Sacn Vialardi, 2009, P 2 INT C ED DAT MIN
   Santos O., 2012, ED RECOMMENDER SYSTE
   Santos Olga C., 2013, Artificial Intelligence in Education. Proceedings of 16th International Conference (AIED 2013): LNCS 7926, P742, DOI 10.1007/978-3-642-39112-5_102
   Santos Olga C., 2012, International Journal of Web Based Communities, V8, P354, DOI 10.1504/IJWBC.2012.048057
   Santos O.C., 2013, EXPERT SYST IN PRESS
   Santos O.C., 2013, SCI WORLD J IN PRESS
   Santos O.C., 2011, HDB RES E LEARNING S
   Santos O.C., 2014, RECOMMENDER IN PRESS
   Santos OC, 2012, BULL TECH COMM LEARN, V14, P35
   Santos OC, 2011, ALGORITHMS, V4, P131, DOI 10.3390/a4030131
   Santos OC, 2011, LECT NOTES ARTIF INT, V6738, P541, DOI 10.1007/978-3-642-21869-9_95
   Santos OC, 2010, PROCEDIA COMPUT SCI, V1, P2793, DOI 10.1016/j.procs.2010.08.004
   Santoso H.B., 2007, DIG LEARN AS C MAL
   Sauro Jeff., 2011, MeasuringU
   Shen LP, 2004, LECT NOTES COMPUT SC, V3143, P363
   Sielis G. A., 2012, ED RECOMMENDER SYSTE, P43, DOI [10.4018/978-1-61350-489-5.ch003, DOI 10.4018/978-1-61350-489-5.CH003]
   Soonthornphisaj N, 2006, LECT NOTES ARTIF INT, V4114, P518
   Specht M, 2007, J INTERACT MEDIA EDU
   Squires D, 1999, INTERACT COMPUT, V11, P467, DOI 10.1016/S0953-5438(98)00063-0
   Sun PC, 2008, COMPUT EDUC, V50, P1183, DOI 10.1016/j.compedu.2006.11.007
   Tai DWS, 2008, ELECTRON LIBR, V26, P329, DOI 10.1108/02640470810879482
   Tang TY, 2009, IEEE INTERNET COMPUT, V13, P34, DOI 10.1109/MIC.2009.73
   Tattersall C., 2008, HDB VISUAL LANGUAGES
   Tsolis D, 2012, INTELL DECIS TECHNOL, V6, P97, DOI 10.3233/IDT-2012-0126
   Underwood J, 2012, ED RECOMMENDER SYSTE, P24
   van Rosmalen P., 2004, IEEE LEARNING TECHNO, V4, P59
   Van Velsen L, 2008, KNOWL ENG REV, V23, P261, DOI 10.1017/S0269888908001379
   Vandewaetere M, 2011, COMPUT HUM BEHAV, V27, P118, DOI 10.1016/j.chb.2010.07.038
   Verbert K, 2012, IEEE T LEARN TECHNOL, V5, P318, DOI 10.1109/TLT.2012.11
   Wan X, 2008, IEEE IJCNN, P3912, DOI 10.1109/IJCNN.2008.4634360
   Wang FH, 2008, EDUC TECHNOL SOC, V11, P94
   Wang TI, 2007, EDUC TECHNOL SOC, V10, P84
   Wang YY, 2010, PROCEDIA COMPUT SCI, V1, P2801, DOI 10.1016/j.procs.2010.08.005
   Yu Z., 2007, 4 C UB INT COMP BERL
   Zaharias P, 2009, INT J HUM-COMPUT INT, V25, P75, DOI 10.1080/10447310802546716
   Zaïane OR, 2002, INTERNATIONAL CONFERENCE ON COMPUTERS IN EDUCATION, VOLS I AND II, PROCEEDINGS, P55, DOI 10.1109/CIE.2002.1185862
   Zanker M, 2010, INT J HUM-COMPUT ST, V68, P469, DOI 10.1016/j.ijhcs.2010.04.002
   Zapata A, 2013, ADV ENG SOFTW, V56, P1, DOI 10.1016/j.advengsoft.2012.10.005
   Zhu F., 2007, ADV WEB BASED LEARNI, V2007
   Zorrilla M, 2013, DECIS SUPPORT SYST, V55, P399, DOI 10.1016/j.dss.2012.05.045
NR 145
TC 37
Z9 40
U1 1
U2 145
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD AUG 1
PY 2014
VL 88
SI SI
BP 92
EP 109
DI 10.1016/j.scico.2013.12.004
PG 18
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Social Science Citation Index (SSCI)
SC Computer Science
GA AH9QM
UT WOS:000336476900007
OA hybrid
DA 2024-07-18
ER

PT J
AU van Emden, MH
AF van Emden, M. H.
TI Matrix Code
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Programming methodology; Program verification; Finite-state machines
AB Matrix Code gives imperative programming a mathematical semantics and heuristic power comparable in quality to functional and logic programming. A program in Matrix Code is developed incrementally from a specification in pre/post-condition form. The computations of a code matrix are characterized by powers of the matrix when it is interpreted as a transformation in a space of vectors of logical conditions. Correctness of a code matrix is expressed in terms of a fixpoint of the transformation. The abstract machine for Matrix Code is the dual-state machine, which we present as a variant of the classical finite-state machine. (C) 2013 Elsevier B.V. All rights reserved.
C1 Univ Victoria, Dept Comp Sci, Victoria, BC, Canada.
C3 University of Victoria
RP van Emden, MH (corresponding author), Univ Victoria, Dept Comp Sci, Victoria, BC, Canada.
EM vanemden@cs.uvic.ca
CR [Anonymous], 1993, Program Verification: Fundamental Issues in Computer Science, DOI [10.1090/psapm/019/0235771, DOI 10.1090/PSAPM/019/0235771]
   [Anonymous], 1967, Journal ofComputer and System Sciences
   [Anonymous], 1972, Chapter I: Notes on structured programming, em Structured programming
   APT KR, POPL 97, P67
   Baier C, 2008, PRINCIPLES OF MODEL CHECKING, P1
   Borger E., 2003, ABSTRACT STATE MACHI
   CLARK KL, 1981, IEEE T SOFTWARE ENG, V7, P52, DOI 10.1109/TSE.1981.234508
   Conway J.H., 1971, Regular Algebra and Finite Machines
   DEBAKKER JW, 1973, AUTOMATA LANGUAGES P
   Dijkstra E. W., 1968, BIT (Nordisk Tidskrift for Informationsbehandling), V8, P174, DOI 10.1007/BF01933419
   DIJKSTRA EW, 1971, 4 GENERATION, P359
   Goldstine H. H., 1963, J VONNEUMANN COLLECT, V5, P80
   HOARE CAR, 1969, COMMUN ACM, V12, P576, DOI 10.1145/363235.363259
   KOWALSKI R, 1979, COMMUN ACM, V22, P424, DOI 10.1145/359131.359136
   Minsky M., 1967, Computation: finite and infinite machines
   PARKER DS, 1987, CSD870067 U CAL LOS
   Perrin D., 1990, Handbook of Theoretical Computer Science, VB, P1
   VANEMDEN MH, 1979, IEEE T SOFTWARE ENG, V5, P148, DOI 10.1109/TSE.1979.234171
   WOODS WA, 1970, COMMUN ACM, V13, P591, DOI 10.1145/355598.362773
NR 19
TC 0
Z9 0
U1 0
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAY 1
PY 2014
VL 84
SI SI
BP 3
EP 21
DI 10.1016/j.scico.2013.05.005
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AE6EZ
UT WOS:000334084700002
OA hybrid
DA 2024-07-18
ER

PT J
AU Recio-García, JA
   González-Calero, PA
   Díaz-Agudo, B
AF Recio-Garcia, Juan A.
   Gonzalez-Calero, Pedro A.
   Diaz-Agudo, Belen
TI jCOLIBRI2: A framework for building Case-based reasoning systems
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Case-based reasoning; Framework; jCOLIBRI
ID AGENTS; WEB
AB This paper describes the jCOLIBRI2 framework for building Case-based reasoning (CBR) systems. CBR is a mature subfield of artificial intelligence based on the reuse of previous problem solutions - cases - to solve new ones. However, up until now, it lacked a reference toolkit for developing such systems. jCOLIBRI2 aims to become that toolkit and to foster the collaboration among research groups. This software is the result of the experience collected over several years of framework development and evolution. This experience is explained in the paper, together with a description of the specialized CBR tools that can be implemented with jCOLIBRI: CBR with textual cases, recommenders, knowledge/data intensive applications or distributed architectures. (C) 2012 Elsevier B.V. All rights reserved.
C1 [Recio-Garcia, Juan A.; Gonzalez-Calero, Pedro A.; Diaz-Agudo, Belen] Univ Complutense Madrid, Fac Informat, E-28040 Madrid, Spain.
C3 Complutense University of Madrid
RP Recio-García, JA (corresponding author), Univ Complutense Madrid, Fac Informat, E-28040 Madrid, Spain.
EM jareciog@fdi.ucm.es; pedro@sip.ucm.es; belend@sip.ucm.es
RI Díaz-Agudo, Belén/AAC-5815-2021; Recio-Garcia, Juan/AAH-3284-2020;
   Recio-Garcia, Juan A/K-5962-2014; Díaz-Agudo, Belén/K-6046-2014;
   Gonzalez-Calero, Pedro A./B-2935-2009
OI Díaz-Agudo, Belén/0000-0003-2818-027X; Recio-Garcia,
   Juan/0000-0001-8731-6195; Recio-Garcia, Juan A/0000-0001-8731-6195;
   Díaz-Agudo, Belén/0000-0003-2818-027X; Gonzalez-Calero, Pedro
   A./0000-0002-9151-5573
FU Spanish Ministry of Science Education [TIN2009-13692-C03-03]; Madrid
   Education Council; UCM [Group 910494]
FX Supported by Spanish Ministry of Science & Education
   (TIN2009-13692-C03-03) and Madrid Education Council and UCM (Group
   910494).
CR AAMODT A, 1994, AI COMMUN, V7, P39
   Aamodt A., P 9 EUR C ART INT EC, P1
   AHA DW, 2001, LECT NOTES COMPUTER, V2080
   Althoff K.D., 1995, A Review of Industrial Case-Based Reasoning Tools
   Althoff K.-D., 2008, LECT NOTES COMPUTER, V5239
   Althoff KD, 2005, KNOWL ENG REV, V20, P305, DOI 10.1017/S0269888906000543
   [Anonymous], 1996, CASE BASED REASONING
   [Anonymous], PATTERN LANGUAGE PRO
   [Anonymous], 2006, SGAI 2006, DOI DOI 10.1007/978-1-84628-666-712
   [Anonymous], 1999, P 1999 DESCR LOG WOR
   [Anonymous], 2008, AMB INT INT MON SYST
   [Anonymous], 2000, Data Mining: Practical Machine Learning Tools and Techniques with Java Implementations
   [Anonymous], 2002, LNCS
   Baader F., 2003, DESCRIPTION LOGIC HD
   Benjamins VR, 1998, INT J HUM-COMPUT ST, V49, P305, DOI 10.1006/ijhc.1998.0208
   Blanzieri E., 2000, LECT NOTES COMPUTER, V1898
   BOGAERTS S, 2005, 617 IND U
   Bridge D, 2005, KNOWL ENG REV, V20, P315, DOI 10.1017/S0269888906000567
   Brighton H, 2002, DATA MIN KNOWL DISC, V6, P153, DOI 10.1023/A:1014043630878
   Burke R, 2002, ARTIF INTELL REV, V18, P245, DOI 10.1023/A:1020701617138
   Carozzoni J. A., 2008, TECHNICAL REPORT
   Case-Based Reasoning (CBR), 2011, US SIM SIT SOLV PRES
   Cox MT, 2005, KNOWL ENG REV, V20, P283, DOI 10.1017/S0269888906000592
   de Bruijn J, 2006, LECT NOTES COMPUT SC, V4011, P590
   Diaz-Agudo B., 2007, ONTOLOGIES, V14, DOI [173-213.10.1007/978-0-387-37022-4_7, DOI 10.1007/978-0-387-37022-4-7]
   Diaz-Agudo B., 2001, P 6 UK WORKSH CAS BA
   Díaz-Agudo B, 2007, PROC INT C TOOLS ART, P468, DOI 10.1109/ICTAI.2007.27
   Díaz-Agudo B, 2007, SCI COMPUT PROGRAM, V69, P68, DOI 10.1016/j.scico.2007.02.004
   Fornells A, 2006, LECT NOTES ARTIF INT, V4106, P241
   Fornells A, 2009, LECT NOTES ARTIF INT, V5650, P418, DOI 10.1007/978-3-642-02998-1_30
   Funk P., 2004, LECT NOTES COMPUTER, P3155
   Göker MH, 2005, KNOWL ENG REV, V20, P277, DOI 10.1017/S0269888906000610
   Gonzalez-Calero P. A., 1999, CHALL CAS BAS REAS P, P2
   Govedarova N., 2008, P 9 INT C COMP SYST, P67
   Gunderson LF, 2009, ROBOTS, REASONING, AND REIFICATION: WHERE IS MY ROBOT?, P1
   Haarslev V., 2001, P INT WORKSHOP DESCR, P2083
   Hatcher E., 2004, Lucene in Action (in Action Series
   Herlocker JL, 1999, SIGIR'99: PROCEEDINGS OF 22ND INTERNATIONAL CONFERENCE ON RESEARCH AND DEVELOPMENT IN INFORMATION RETRIEVAL, P230, DOI 10.1145/312624.312682
   Holt A, 2005, KNOWL ENG REV, V20, P289, DOI 10.1017/S0269888906000622
   Kelleher J, 2004, ARTIF INTELL REV, V21, P193, DOI 10.1023/B:AIRE.0000036255.53433.26
   Kohonen T., 2000, Self Organizing Maps, V3rd
   Kolodner J.L., 1993, Case-Based Reasoning
   Kolodner JL, 2005, KNOWL ENG REV, V20, P299, DOI 10.1017/S0269888906000634
   Kukuric N., 2008, I3S DOCUMENT SERIES
   Lopes EC, 2010, SECOND INTERNATIONAL CONFERENCE ON INFORMATION, PROCESS, AND KNOWLEDGE MANAGEMENT: EKNOW 2010, P37, DOI 10.1109/eKNOW.2010.15
   Lotfy Abdrabou Essam Amin M., 2010, Proceedings 2010 International Multiconference on Computer Science and Information Technology (IMCSIT 2010), P3
   Martín A, 2010, ICEIS 2010: PROCEEDINGS OF THE 12TH INTERNATIONAL CONFERENCE ON ENTERPRISE INFORMATION SYSTEMS, VOL 2: ARTIFICIAL INTELLIGENCE AND DECISION SUPPORT SYSTEMS, P291
   Martin R., 1997, PATTERN LANGUAGES PR, P471
   McManus JW, 1996, IEEE T SYST MAN CY A, V26, P669, DOI 10.1109/3468.541328
   McSherry D, 2002, LECT NOTES ARTIF INT, V2416, P219
   McSherry D, 2003, LECT NOTES ARTIF INT, V2689, P291
   Napoli A, 1996, LECT NOTES ARTIF INT, V1168, P295, DOI 10.1007/BFb0020618
   Nierstrasz Oscar., 1995, OBJECT ORIENTED SOFT
   ONTANON S, 2006, LNCS, V4766, P36
   Perner P, 2005, KNOWL ENG REV, V20, P311, DOI 10.1017/S0269888906000671
   Plaza E, 2005, KNOWL ENG REV, V20, P261, DOI 10.1017/S0269888906000683
   Recio JA, 2005, LECT NOTES ARTIF INT, V3620, P421, DOI 10.1007/11536406_33
   Recio-Garcia J. A., 2006, P 11 UK WORKSH CAS B, P60
   Recio-Garcia J. A., P ICCBR 2011 WORKSH, P101
   Recio-Garcia J. A., 2007, JCOLIBRI2 TUTORIAL
   Recio-Garcia J. A., P ICCBR 2007 WORKSH, P217
   Recio-García JA, 2006, LECT NOTES ARTIF INT, V4106, P226
   Recio-García JA, 2010, LECT NOTES COMPUT SC, V6220, P121, DOI 10.1007/978-3-642-15034-0_8
   Recio-García JA, 2008, RECSYS'08: PROCEEDINGS OF THE 2008 ACM CONFERENCE ON RECOMMENDER SYSTEMS, P243
   Rissland EL, 2005, KNOWL ENG REV, V20, P293, DOI 10.1017/S0269888906000701
   Salotti S., STUDY FORMALIZATION, P286
   Schank Roger C., 1977, SCRIPTS PLANS GOALS
   Schulz S., 1999, P 7 GERM WORKSH CAS, P166
   Serra A., 2008, RECOMMENDATION LEARN
   Shimazu H, 2002, ARTIF INTELL REV, V18, P223, DOI 10.1023/A:1020757023711
   Smyth B., 2007, The Adaptive Web. Methods and Strategies of Web Personalization, P342
   Smyth B., 1998, LECT NOTES COMPUTER, V1488
   Smyth Barry, 2003, P INT JOINT C ART IN, V3, P127
   Sparks S, 1996, COMPUTER, V29, P52, DOI 10.1109/2.536784
   The OWL Services Coalition, 2004, OWL S SEMANTIC MARKU
   TOMEK I, 1976, IEEE T SYST MAN CYB, V6, P448
   Vargas EC, 2007, P INT COMP SOFTW APP, P326
   VERNET D, 2003, SPECIALIST GROUP ART, V6, P37
   Weber R., P 9 GERM WORKSH CAS, P244
   Weber RO, 2005, KNOWL ENG REV, V20, P255, DOI 10.1017/S0269888906000713
   Wilke W., 1998, Case-based reasoning technology. From foundations to applications, P91
NR 81
TC 45
Z9 48
U1 0
U2 19
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 1
PY 2014
VL 79
SI SI
BP 126
EP 145
DI 10.1016/j.scico.2012.04.002
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 246RH
UT WOS:000326556300010
OA Bronze
DA 2024-07-18
ER

PT J
AU Ganesan, D
   Lindvall, M
   McComas, D
   Bartholomew, M
   Siegel, S
   Medina, B
   Krikhaar, R
   Verhoef, C
   Montgomery, LP
AF Ganesan, Dharmalingam
   Lindvall, Mikael
   McComas, David
   Bartholomew, Maureen
   Siegel, Steve
   Medina, Barbara
   Krikhaar, Rene
   Verhoef, Chris
   Montgomery, Lisa P.
TI An analysis of unit tests of a flight software product line
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Unit testing; Stub; Metrics; Software architecture; Self-testable
   components; Flight software
AB This paper presents an analysis of the unit testing approach developed and used by the Core Flight Software System (CFS) product line team at the NASA Goddard Space Flight Center (GSFC). The goal of the analysis is to understand, review, and recommend strategies for improving the CFS' existing unit testing infrastructure as well as to capture lessons learned and best practices that can be used by other software product line (SPL) teams for their unit testing. The results of the analysis show that the core and application modules of the CFS are unit tested in isolation using a stub framework developed by the CFS team. The application developers can unit test their code without waiting for the core modules to be completed, and vice versa. The analysis found that this unit testing approach incorporates many practical and useful solutions such as allowing for unit testing without requiring hardware and special OS features in-the-loop by defining stub implementations of dependent modules. These solutions are worth considering when deciding how to design the testing architecture for a SPL. (C) 2012 Elsevier B.V. All rights reserved.
C1 [Ganesan, Dharmalingam; Lindvall, Mikael] Fraunhofer Ctr Expt Software Engn, College Pk, MD 20740 USA.
   [McComas, David; Bartholomew, Maureen; Siegel, Steve; Medina, Barbara] NASA, Goddard Space Flight Ctr, Greenbelt, MD 20771 USA.
   [Krikhaar, Rene; Verhoef, Chris] Vrije Univ Amsterdam, Dept Comp Sci, NL-1081 HV Amsterdam, Netherlands.
   [Montgomery, Lisa P.] NASA, Independent Verificat & Validat Facil, Fairmont, WV 26554 USA.
C3 National Aeronautics & Space Administration (NASA); NASA Goddard Space
   Flight Center; Vrije Universiteit Amsterdam; National Aeronautics &
   Space Administration (NASA); NASA Goddard Space Flight Center; Katherine
   Johnson Independent Verification & Validation Facility
RP Ganesan, D (corresponding author), Fraunhofer Ctr Expt Software Engn, College Pk, MD 20740 USA.
EM dganesan@fc-md.umd.edu; mlindvall@fc-md.umd.edu;
   david.c.mccomas@nasa.gov; maureen.o.bartholomew@nasa.gov;
   steve.slegel@nasa.gov; barbara.b.medina@nasa.gov; rkrikhaa@few.vu.nl;
   x@cs.vu.nl; lisa.p.montgomery@nasa.gov
RI McComas, David J/H-6202-2011
CR [Anonymous], 2000, SOFTWARE ARCHITECTUR
   Basili V., 2001, P PROFES 2001
   Feijs L, 1998, SOFTWARE PRACT EXPER, V28, P371, DOI 10.1002/(SICI)1097-024X(19980410)28:4<371::AID-SPE154>3.0.CO;2-1
   FELDMAN SI, 1979, SOFTWARE PRACT EXPER, V9, P255, DOI 10.1002/spe.4380090402
   Ganesan D., 2010, IEEE WORK C REV ENG
   Ganesan D., 2010, LECT NOTES COMPUTER, V6287
   Ganesan D., 2009, SOFTW PROD LIN C SPL
   Ganesan D., 2011, THESIS VU U AMSTERDA
   Ganesan D., 2011, FLIGHT SOFTW WORKSH
   Ganesan D., 2011, TUT VER ATI TEST AUT
   HAYHURST KJ, 2001, TM2001210876 NASA
   Heineman GT, 2009, LECT NOTES COMPUT SC, V5582, P262, DOI 10.1007/978-3-642-02414-6_16
   Hoffman D., 2001, SOFTWARE FUNDAMENTAL
   Kernighan B.W., 1988, The C Programming Language
   Krikhaar R., 1999, Proceedings IEEE International Conference on Software Maintenance - 1999 (ICSM'99). `Software Maintenance for Business Change' (Cat. No.99CB36360), P371, DOI 10.1109/ICSM.1999.792635
   Lamancha B.P., TECHNICAL REPORT
   Lindvall M., 2010, INNOVATIONS SYST JUN
   Martins E, 2001, INTERNATIONAL CONFERENCE ON DEPENDABLE SYSTEMS AND NETWORKS, PROCEEDINGS, P151, DOI 10.1109/DSN.2001.941401
   McGregor J.D., 2001, TESTING SOFTWARE PRO
   Pohl K, 2006, COMMUN ACM, V49, P78, DOI 10.1145/1183236.1183271
   Reisner E., 2010, P ACM IEEE INT C SOF, V1, P445, DOI DOI 10.1145/1806799.1806864
   Tevanlinna A., 2004, ACM SIGSOFT NOTES, V29
   Trew T, 2005, LECT NOTES COMPUT SC, V3714, P137
   Uzuncaova E, 2010, IEEE T SOFTWARE ENG, V36, P309, DOI 10.1109/TSE.2010.30
   VANDERLINDEN FJ, 1995, IEEE SOFTWARE, V12, P51, DOI 10.1109/52.469760
NR 25
TC 7
Z9 9
U1 0
U2 10
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 1
PY 2013
VL 78
IS 12
BP 2360
EP 2380
DI 10.1016/j.scico.2012.02.006
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 234SL
UT WOS:000325664500006
OA Bronze
DA 2024-07-18
ER

PT J
AU Wang, M
   Gibbons, J
   Matsuda, K
   Hu, ZJ
AF Wang, Meng
   Gibbons, Jeremy
   Matsuda, Kazutaka
   Hu, Zhenjiang
TI Refactoring pattern matching
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 10th International Conference on Mathematics of Program Construction
CY JUN, 2010
CL Quebec City, CANADA
SP Ctr Rech Math, Univ Laval
DE Functional programming; Refactoring; Pattern matching; Invertible
   programming; Abstract datatypes; Fusion
ID UNIVERSAL RESOLVING ALGORITHM; INVERSE COMPUTATION;
   BIDIRECTIONALIZATION; LANGUAGE; LENSES; VIEW
AB Defining functions by pattern matching over the arguments is advantageous for understanding and reasoning, but it tends to expose the implementation of a datatype. Significant effort has been invested in tackling this loss of modularity; however, decoupling patterns from concrete representations while maintaining soundness of reasoning has been a challenge. Inspired by the development of invertible programming, we propose an approach to program refactoring based on a right-invertible language RINV-every function has a right (or pre-) inverse. We show how this new design is able to permit a smooth incremental transition from programs with algebraic datatypes and pattern matching, to ones with proper encapsulation, while maintaining simple and sound reasoning. (C) 2012 Elsevier B.V. All rights reserved.
C1 [Wang, Meng] Chalmers Univ Technol, S-41296 Gothenburg, Sweden.
   [Gibbons, Jeremy] Univ Oxford, Dept Comp Sci, Oxford OX1 3QD, England.
   [Matsuda, Kazutaka] Tohoku Univ, Grad Sch Informat Sci, Aoba Ku, Sendai, Miyagi 9808579, Japan.
   [Hu, Zhenjiang] Natl Inst Informat, GRACE Ctr, Chiyoda Ku, Tokyo 1018430, Japan.
C3 Chalmers University of Technology; University of Oxford; Tohoku
   University; Research Organization of Information & Systems (ROIS);
   National Institute of Informatics (NII) - Japan
RP Wang, M (corresponding author), Chalmers Univ Technol, S-41296 Gothenburg, Sweden.
EM wmeng@chalmers.se
OI Wang, Meng/0000-0001-7780-630X; Gibbons, Jeremy/0000-0002-8426-9917
FU Grants-in-Aid for Scientific Research [22300012] Funding Source: KAKEN;
   EPSRC [EP/E02128X/1] Funding Source: UKRI
CR Abramov S, 2002, SCI COMPUT PROGRAM, V43, P193, DOI 10.1016/S0167-6423(02)00023-0
   Abramov S, 2007, LECT NOTES COMPUT SC, V4378, P27
   Albert E, 2002, NEW GENERAT COMPUT, V20, P3, DOI 10.1007/BF03037257
   Alimarine A., 2005, P 2005 ACM SIGPLAN W, P86
   [Anonymous], 1971, IJCAI
   [Anonymous], 1997, INT SERIES COMPUTER
   [Anonymous], 2003, Haskell 98 language and libraries: the revised report
   Bird R.S., 1987, Logic of Programming and Calculi of Discrete Design, volume 36 of NATO ASI Series F, V36, P3
   BIRD RS, 1984, ACM T PROGR LANG SYS, V6, P487, DOI 10.1145/1780.1781
   Bohannon A, 2008, ACM SIGPLAN NOTICES, V43, P407, DOI 10.1145/1328897.1328487
   Burstall RodM., 1980, Proceedings of the 1980 ACM conference on LISP and Functional Programming, LFP '80, P136, DOI 10.1145/800087.802799
   Cameron R. D., 1993, J FUNCT PROGRAM, V3, P171
   Capretta V, 2006, INFORM COMPUT, V204, P437, DOI 10.1016/j.ic.2005.08.005
   Coutts D, 2007, ACM SIGPLAN NOTICES, V42, P315, DOI 10.1145/1291220.1291199
   Dahl O.-J., 1972, STRUCTURED PROGRAMMI
   Emir B, 2007, LECT NOTES COMPUT SC, V4609, P273
   Erwig M, 1997, LECT NOTES COMPUT SC, V1268, P21
   ERWIG M, 2000, HASK WORKSH
   FOKKINGA M., 1991, CSR9104 CWI
   Foster JN, 2007, ACM T PROGR LANG SYS, V29, DOI [10.1145/1232420.1232424, 10.1145/1047659.1040325]
   Foster JN, 2008, ACM SIGPLAN NOTICES, V43, P383, DOI 10.1145/1411203.1411257
   Foster JN, 2009, PROCEEDINGS OF THE 22ND IEEE COMPUTER SECURITY FOUNDATIONS SYMPOSIUM, P60, DOI 10.1109/CSF.2009.25
   Frisch A, 2008, J ACM, V55, DOI 10.1145/1391289.1391293
   *GHC TEAM, GLASG HASK COMP
   Gostanza PP, 1996, ACM SIGPLAN NOTICES, V31, P110, DOI 10.1145/232629.232641
   Hoare C. A. R., 1972, Acta Informatica, V1, P271, DOI 10.1007/BF00289507
   Hu Zhenjiang., 2004, PARTIAL EVALUATION P, P178
   Hughes J, 2000, SCI COMPUT PROGRAM, V37, P67, DOI 10.1016/S0167-6423(99)00023-4
   JAY CB, 2004, ACM T PROGRAMMING LA, V26
   Lee CS, 2001, ACM SIGPLAN NOTICES, V36, P81, DOI 10.1145/373243.360210
   LICATA D, 2007, VIEW PATTERNS LIGHTW
   Liskov B., 1974, SIGPLAN Notices, V9, P50, DOI 10.1145/942572.807045
   Liskov B., 2000, PROGRAM DEV JAVA ABS
   Liu J, 2003, LECT NOTES COMPUT SC, V2562, P110
   Matsuda K., PROTOTYPE IMPLEMENTA
   Matsuda K, 2007, ACM SIGPLAN NOTICES, V42, P47, DOI 10.1145/1291220.1291162
   Matsuda K, 2010, LECT NOTES COMPUT SC, V6012, P448, DOI 10.1007/978-3-642-11957-6_24
   McBride C, 2004, J FUNCT PROGRAM, V14, P69, DOI 10.1017/S0956796803004829
   Meertens L., 1986, Mathematics and Computer Science. Proceedings of the CWI Symposium, P289
   Meertens L., 1992, Formal Aspects of Computing, V4, P413, DOI 10.1007/BF01211391
   MEIJER E, 1991, LECT NOTES COMPUT SC, V523, P124
   Moreau PE, 2003, LECT NOTES COMPUT SC, V2622, P61
   Morita K, 2007, ACM SIGPLAN NOTICES, V42, P146, DOI 10.1145/1273442.1250752
   Mu SC, 2004, LECT NOTES COMPUT SC, V3302, P2
   Mu SC, 2004, LECT NOTES COMPUT SC, V3125, P289
   Mu SC, 2004, SCI COMPUT PROGRAM, V51, P87, DOI 10.1016/j.scico.2003.09.003
   Nogueira P, 2008, WGP'08: PROCEEDINGS OF THE 2008 ACM SIGPLAN WORKSHOP ON GENERIC PROGRAMMING, P61
   Okasaki C., 2001, ELECT NOTES THEORETI, V41, P60
   OKASAKI C, 1998, SIGPLAN WORKSH ML, P14
   Pacheco H, 2010, LECT NOTES COMPUT SC, V6120, P331, DOI 10.1007/978-3-642-13321-3_19
   Sereni D, 2007, ACM SIGPLAN NOTICES, V42, P71, DOI 10.1145/1291220.1291165
   Sheard T, 2002, ACM SIGPLAN NOTICES, V37, P60, DOI 10.1145/636517.636528
   SLEEP MR, 1982, SOFTWARE PRACT EXPER, V12, P1082, DOI 10.1002/spe.4380121109
   Sorensen M. H., 1996, Journal of Functional Programming, V6, P811, DOI 10.1017/S0956796800002008
   Steele GL, 2009, ACM SIGPLAN NOTICES, V44, P1, DOI 10.1145/1631687.1596551
   Syme D, 2007, ACM SIGPLAN NOTICES, V42, P29, DOI 10.1145/1291220.1291159
   The 2LT Team, 2LT 2 LEV TRANSF
   Tullsen M, 2000, LECT NOTES COMPUT SC, V1753, P1
   Uustalu T., 1999, Informatica, V10, P5
   Voigtländer J, 2010, ACM SIGPLAN NOTICES, V45, P181, DOI 10.1145/1932681.1863571
   Voigtländer J, 2009, ACM SIGPLAN NOTICES, V44, P165, DOI 10.1145/1594834.1480904
   WADLER P, 1990, THEOR COMPUT SCI, V73, P231, DOI 10.1016/0304-3975(90)90147-A
   Wadler P., 1987, Conference Record of the Fourteenth Annual ACM Symposium on Principles of Programming Languages, P307, DOI 10.1145/41625.41653
   Wadler P., 1987, CONCATENATE VANISHES
   WADLER P, 1987, ACM SIGPLAN NOTICES, V22, P83
   Wang M, 2010, LECT NOTES COMPUT SC, V6120, P397, DOI 10.1007/978-3-642-13321-3_22
   WIRTH N, 1971, COMMUN ACM, V14, P221, DOI 10.1145/362575.362577
NR 67
TC 15
Z9 15
U1 0
U2 9
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 1
PY 2013
VL 78
IS 11
BP 2216
EP 2242
DI 10.1016/j.scico.2012.07.014
PG 27
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 220QR
UT WOS:000324602500009
OA Green Accepted, Green Submitted
DA 2024-07-18
ER

PT J
AU Rodríguez-Covili, J
   Ochoa, SF
AF Rodriguez-Covili, Juan
   Ochoa, Sergio F.
TI A lightweight and distributed middleware to provide presence awareness
   in mobile ubiquitous systems
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Presence awareness; Mobile ubiquitous computing; Middleware;
   Loosely-coupled mobile work
ID CONTEXT; COLLABORATION
AB Several researchers have identified the need to count on presence awareness in ubiquitous systems that support mobile activities, particularly when these systems are used to perform loosely-coupled mobile work. In such a work style, mobile users conduct face-to-face on-demand interactions, therefore counting on awareness information about the position and availability of potential collaborators becomes mandatory for these applications. Most proposed solutions that provide user presence awareness involve centralized components, have reusability limitations, or simply address a part of that service. This article presents a lightweight and fully distributed middleware named Moware, which allows developers to embed presence awareness services in mobile ubiquitous systems in a simple way. The article also describes the Moware architecture, its main components and strategies used to deal with several aspects of the presence awareness support. These design strategies can be reused by software designers to provide presence awareness capabilities into middleware and specific software applications. Moware services were embedded in a mobile ubiquitous system that supports inspectors during the construction inspection process. The preliminary results indicate that the middleware was easy to use for developers, and its services were useful for the end-users. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Rodriguez-Covili, Juan; Ochoa, Sergio F.] Univ Chile, Dept Comp Sci, Santiago, Chile.
C3 Universidad de Chile
RP Ochoa, SF (corresponding author), Univ Chile, Dept Comp Sci, Santiago, Chile.
EM jrodrigu@dcc.uchile.cl; sochoa@dcc.uchile.cl
RI Ochoa, Sergio F./J-3740-2016
OI Ochoa, Sergio F./0000-0002-0431-8767
FU Fondecyt (Chile) [1120207]
FX This research work was partially supported by Fondecyt (Chile), grant
   No. 1120207.
CR Almeida A, 2011, PERS UBIQUIT COMPUT, V15, P419, DOI 10.1007/s00779-010-0359-8
   [Anonymous], CONTEXT AWARE MIDDLE
   Bahl P., 2000, Proceedings IEEE INFOCOM 2000. Conference on Computer Communications. Nineteenth Annual Joint Conference of the IEEE Computer and Communications Societies (Cat. No.00CH37064), P775, DOI 10.1109/INFCOM.2000.832252
   Baldauf M, 2007, INT J AD HOC UBIQ CO, V2, P263, DOI 10.1504/IJAHUC.2007.014070
   Becker C, 2005, PERS UBIQUIT COMPUT, V9, P20, DOI 10.1007/s00779-004-0270-2
   Bellavista P, 2012, ACM COMPUT SURV, V44, DOI 10.1145/2333112.2333119
   Bolchini C, 2009, COMMUN ACM, V52, P136, DOI 10.1145/1592761.1592793
   Bravo J, 2006, J UNIVERS COMPUT SCI, V12, P270
   Brumitt B, 2000, LECT NOTES COMPUT SC, V1927, P12
   Capra L, 2003, IEEE T SOFTWARE ENG, V29, P929, DOI 10.1109/TSE.2003.1237173
   Casado D., 2011, PERVASIVE COMPUTING
   Castro LA, 2008, IEEE T SYST MAN CY C, V38, P861, DOI 10.1109/TSMCC.2008.2001572
   Chabridon S, 2013, SCI COMPUT PROGRAM, V78, P1912, DOI 10.1016/j.scico.2012.07.019
   Chen GL, 2008, PERVASIVE MOB COMPUT, V4, P216, DOI 10.1016/j.pmcj.2007.10.001
   Chen J. C., 2006, IEEE T WIREL COMMUN, V5, P46
   Christein H., 2002, LNCS, V2468, P345
   Corradi Antonio, 2010, International Journal of Adaptive, Resilient and Autonomic Systems, V1, P58, DOI 10.4018/jaras.2010071704
   Dey AK, 2001, PERS UBIQUIT COMPUT, V5, P4, DOI 10.1007/s007790170019
   Dourish P., 2002, P ACM CHI 02, P541
   Greenberg S., 1996, CHI 96, P206
   Guerrero LA, 2012, SENSORS-BASEL, V12, P8236, DOI 10.3390/s120608236
   Henricksen K, 2005, LECT NOTES COMPUT SC, V3760, P846
   Herskovic V., 2012, 2012 Proceedings of IEEE 16th International Conference on Computer Supported Cooperative Work in Design (CSCWD 2012), P258, DOI 10.1109/CSCWD.2012.6221827
   Herskovic V, 2011, J UNIVERS COMPUT SCI, V17, P183
   Hervás R, 2011, PERS UBIQUIT COMPUT, V15, P409, DOI 10.1007/s00779-010-0363-z
   Hightower J, 2001, COMPUTER, V34, P57, DOI 10.1109/2.940014
   Hofer T., 2003, 36th Hawaii International Conference on Systems Sciences, DOI 10.1109/HICSS.2003.1174831
   Juszczyk L, 2009, MDM: 2009 10TH INTERNATIONAL CONFERENCE ON MOBILE DATA MANAGEMENT, P588, DOI 10.1109/MDM.2009.101
   Kaemarungsi K, 2004, PROCEEDINGS OF MOBIQUITOUS 2004, P14
   Kekwaletswe RM, 2006, IEEE INTERNATIONAL CONFERENCE ON SENSOR NETWORKS, UBIQUITOUS, AND TRUSTWORTHY COMPUTING, VOL 2, PROCEEDINGS, P90
   Kortuem G, 1999, LECT NOTES COMPUT SC, V1707, P171
   Liu H, 2007, IEEE T SYST MAN CY C, V37, P1067, DOI 10.1109/TSMCC.2007.905750
   López-de-Ipiña D, 2010, J UNIVERS COMPUT SCI, V16, P1521
   Marinho F. G., SCI COMPUT PROGRAM, DOI DOI 10.1016/J.SCIC0.2012.04.009
   Miraoui M., 2008, UBIQUITOUS COMPUT CO, P68
   Morán AL, 2010, LECT NOTES COMPUT SC, V6257, P305, DOI 10.1007/978-3-642-15714-1_23
   Neyem A, 2008, J UNIVERS COMPUT SCI, V14, P88
   Ochoa SF, 2011, GROUP DECIS NEGOT, V20, P39, DOI 10.1007/s10726-010-9203-9
   PINELLE D, 2003, P 2003 INT ACM SIGGR, P75
   Rodríguez MD, 2012, SCI COMPUT PROGRAM, V77, P46, DOI 10.1016/j.scico.2010.12.003
   Rodríguez-Covili J, 2011, J NETW COMPUT APPL, V34, P1883, DOI 10.1016/j.jnca.2010.12.014
   Saeed A., 2010, Electro/Information Technology (EIT), 2010 IEEE International Conference on, P1
   Schiaffino S, 2009, LECT NOTES COMPUT SC, V5640, P193, DOI 10.1007/978-3-642-03226-4_11
   Schilit B., 1994, 1994 1 WORKSHOP MOBI, P85, DOI [DOI 10.1109/WMCSA.1994.16, 10.1109/WMCSA.1994.16]
   Tang J. C., 2001, CHI 2001 Conference Proceedings. Conference on Human Factors in Computing Systems, P221, DOI 10.1145/365024.365105
   Tollmar Konrad, 1996, P 1996 ACM C COMP SU, P298
   Vera R, 2011, PERS UBIQUIT COMPUT, V15, P365, DOI 10.1007/s00779-010-0357-x
   Yeh S., 2009, P 2009 IEEE INT C NE
   Zhang XL, 2009, INT J PERVASIVE COMP, V5, P42, DOI 10.1108/17427370910950302
NR 49
TC 3
Z9 3
U1 0
U2 5
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 1
PY 2013
VL 78
IS 10
BP 2009
EP 2025
DI 10.1016/j.scico.2013.02.003
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 200RJ
UT WOS:000323086300015
OA Bronze
DA 2024-07-18
ER

PT J
AU Sloane, AM
   Kats, LCL
   Visser, E
AF Sloane, Anthony M.
   Kats, Lennart C. L.
   Visser, Eelco
TI A pure embedding of attribute grammars
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Language processing; Compilers; Domain-specific languages
ID LANGUAGE; JASTADD
AB Attribute grammars are a powerful specification paradigm for many language processing tasks, particularly semantic analysis of programming languages. Recent attribute grammar systems use dynamic scheduling algorithms to evaluate attributes on demand. In this paper, we show how to remove the need for a generator, by embedding a dynamic approach in a modern, object-oriented and functional programming language. The result is a small, lightweight attribute grammar library that is part of our larger Kiama language processing library. Kiama's attribute grammar library supports a range of advanced features including cached, uncached, higher order, parameterised and circular attributes. Forwarding is available to modularise higher order attributes and decorators abstract away from the details of attribute value propagation. Kiama also implements new techniques for dynamic extension and variation of attribute equations. We use the Scala programming language because of its support for domain-specific notations and emphasis on scalability. Unlike generators with specialised notation, Kiama attribute grammars use standard Scala notations such as pattern-matching functions for equations, traits and mixins for composition and implicit parameters for forwarding. A benchmarking exercise shows that our approach is practical for realistic language processing. (C) 2011 Elsevier B.V. All rights reserved.
C1 [Sloane, Anthony M.] Macquarie Univ, Dept Comp, Sydney, NSW 2109, Australia.
   [Kats, Lennart C. L.; Visser, Eelco] Delft Univ Technol, Software Engn Res Grp, Delft, Netherlands.
C3 Macquarie University; Delft University of Technology
RP Sloane, AM (corresponding author), Macquarie Univ, Dept Comp, Sydney, NSW 2109, Australia.
EM Anthony.Sloane@mq.edu.au; L.C.L.Kats@tudelft.nl; visser@acm.org
OI Visser, Eelco/0000-0002-7384-3370; Sloane, Anthony/0000-0002-6802-7360
FU Netherlands NWO [638.001.610, 612.063.512, 040.11.001]
FX Expanded and revised version of an article presented at the 9th Workshop
   on Language Descriptions, Tools and Applications (LDTA'09). This
   research was supported by The Netherlands NWO projects 638.001.610,
   MoDSE: Model-Driven Software Evolution, 612.063.512, TFA:
   Transformations for Abstractions, and 040.11.001, Combining Attribute
   Grammars and Term Rewriting for Programming Abstractions.
CR [Anonymous], 2008, Programming in Scala
   [Anonymous], 2006, P 1 WORKSH DOM SPEC
   AUGUSTEIJN A, 1993, THESIS EINDHOVEN U T
   Baars A., 2011, UU AG SYSTEM USER MA
   BIRD RS, 1984, ACTA INFORM, V21, P239, DOI 10.1007/BF00264249
   Boyland JT, 2005, J ACM, V52, P627, DOI 10.1145/1082036.1082042
   Bravenboer M, 2008, SCI COMPUT PROGRAM, V72, P52, DOI 10.1016/j.scico.2007.11.003
   de Moor O., 1999, LNCS, P121
   DERANSART P, 1988, LECT NOTES COMPUTER, V323
   Ekman T, 2007, ACM SIGPLAN NOTICES, V42, P1, DOI 10.1145/1297105.1297029
   Ekman T, 2006, LECT NOTES COMPUT SC, V4143, P422
   Hedin G., 2000, Informatica, V24, P301
   Hedin G, 2003, SCI COMPUT PROGRAM, V47, P37, DOI 10.1016/S0167-6423(02)00109-0
   Hudak P, 1998, FIFTH INTERNATIONAL CONFERENCE ON SOFTWARE REUSE - PROCEEDINGS, P134, DOI 10.1109/ICSR.1998.685738
   JOHNSSON T, 1987, LECT NOTES COMPUT SC, V274, P154
   JOURDAN M, 1984, LECT NOTES COMPUT SC, V167, P167
   KASTENS U, 1994, ACTA INFORM, V31, P601, DOI 10.1007/BF01177548
   KASTENS U, 2007, GENERATING SOFTWARE
   Kats LCL, 2009, LECT NOTES COMPUT SC, V5501, P142, DOI 10.1007/978-3-642-00722-4_11
   Magnusson E, 2007, SEVENTH IEEE INTERNATIONAL WORKING CONFERENCE ON SOURCE CODE ANALYSIS AND MANIPULATION, PROCEEDINGS, P69, DOI 10.1109/SCAM.2007.13
   Magnusson Eva, 2003, ENTCS, V82, P532, DOI [10.1016/S1571-0661(05)82627-1, DOI 10.1016/S1571-0661(05)82627-1]
   Mariani R., 2003, GARBAGE COLLECTOR BA
   Mernik M, 2005, ACM COMPUT SURV, V37, P316, DOI 10.1145/1118890.1118892
   Nilsson-Nyman E., 2008, P WORKSH LANG DESCR
   Odersky M, 2005, ACM SIGPLAN NOTICES, V40, P41, DOI 10.1145/1103845.1094815
   PAAKKI J, 1995, ACM COMPUT SURV, V27, P196, DOI 10.1145/210376.197409
   SARAIVA J, 1999, THESIS UTRECHT U NET
   Sloane AM, 2011, LECT NOTES COMPUT SC, V6491, P408, DOI 10.1007/978-3-642-18023-1_12
   Spiewak D, 2010, LECT NOTES COMPUT SC, V5969, P154
   Van Wyk E, 2002, LECT NOTES COMPUT SC, V2304, P128
   Van Wyk E, 2010, SCI COMPUT PROGRAM, V75, P39, DOI 10.1016/j.scico.2009.07.004
   Viera M, 2009, ACM SIGPLAN NOTICES, V44, P245, DOI 10.1145/1631687.1596586
   Visser Eelco, 1998, ICFP 98, P13
   VOGT HH, 1989, SIGPLAN NOTICES, V24, P131, DOI 10.1145/74818.74830
   Wampler D., 2008, PROGRAMMING SCALA
NR 35
TC 17
Z9 17
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 1
PY 2013
VL 78
IS 10
BP 1752
EP 1769
DI 10.1016/j.scico.2011.11.005
PG 18
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 200RJ
UT WOS:000323086300002
OA hybrid
DA 2024-07-18
ER

PT J
AU Lin, CS
   Hwang, GH
AF Lin, Che-Sheng
   Hwang, Gwan-Hwan
TI State-cover testing for nondeterministic terminating concurrent programs
   with an infinite number of synchronization sequences
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Concurrent program; Nondeterministic behavior; Concurrent testing;
   SYN-sequence; Reachability testing
ID SUPPORT; MODEL
AB Concurrent programs exhibit nondeterministic behavior in that multiple executions thereof with the same input might produce different sequences of synchronization events and different results. This is because different executions of a concurrent program with the same input may exhibit different interleavings. Thus, one of the major issues in the testing of concurrent programs is how to explore different interleavings or exhaust all the possible interleavings of the target programs. However, for terminating concurrent programs that have cyclic state spaces due to using iterative statements such as busy-waiting loops, they might have an infinite number of feasible synchronization sequences; that is, there is an infinite number of possible interleavings, which makes it impossible to explore all the possible interleavings for this type of concurrent program. To overcome this problem, we propose a testing scheme called dynamic effective testing that can perform state-cover testing for nondeterministic terminating concurrent programs with an infinite number of synchronization sequences. Dynamic effective testing does not require static analysis of the target concurrent program or the assistance of a model checker, and thus is loosely coupled to the syntax of the target concurrent program. It only needs to analyze sequences of synchronization events produced by the execution of the concurrent programs for race detection and state-traversal control. Therefore, the method is easy to port to different programming languages. In addition, only reiterated states discovered in a single SYN-sequence need to be stored. The implementation and experimental results obtained with real code demonstrate that source-code-level dynamic testing can be systematically performed on nondeterministic concurrent programs with infinite synchronization sequences. (C) 2012 Elsevier B.V. All rights reserved.
C1 [Lin, Che-Sheng; Hwang, Gwan-Hwan] Natl Taiwan Normal Univ, Dept Comp Sci & Informat Engn, Taipei 11677, Taiwan.
C3 National Taiwan Normal University
RP Hwang, GH (corresponding author), Natl Taiwan Normal Univ, Dept Comp Sci & Informat Engn, Taipei 11677, Taiwan.
EM ghhwang@csie.ntnu.edu.tw
FU Republic of China Science Council [95-2221-E-003-004, 98-2220-E-003-002]
FX The authors would like to thank the anonymous referees for a number of
   useful suggestions to improve the paper. Che-Sheng Lin and Gwan-Hwan
   Hwang's work was supported in part by the Republic of China Science
   Council under grant 95-2221-E-003-004 and 98-2220-E-003-002.
CR ADRION WR, 1982, COMPUT SURV, V14, P159, DOI 10.1145/356876.356879
   Ben-Asher Y, 2003, P 2 WORKSH RUNT VER
   Bloch J., 2001, EFFECTIVE JAVA PROGR
   Campbell C, 2005, LECT NOTES COMPUT SC, V3502, P97
   Carver R., IEEE SOFTWARE, V8, P66
   Carver R., P C TRIAD 89 AD TECH, P528
   Carver R.H., 2010, IEEE 12 INT HIGH ASS
   Carver RH, 2004, LECT NOTES COMPUT SC, V3308, P76
   Carver RH, 2010, CONCURR COMP-PRACT E, V22, P2445, DOI 10.1002/cpe.1573
   Chaki S., 2003, P SOFTMC 2003
   Charles E., 1989, J PARALLEL DISTRIBUT, V6, P515
   Chen J., 2007, P 22 IEEE ACM INT C
   Chen J., 2008, INT S SOFTW TEST AN
   CHESS, FIND REPR HEIS CONC
   Clarke EM, 1999, MODEL CHECKING, P1
   Dijkstra E. W., 1965, TECHNICAL REPORT
   Dillinger PC, 2009, LECT NOTES COMPUT SC, V5578, P12, DOI 10.1007/978-3-642-02652-2_6
   DINNING A, 1989, COMPUTER, V22, P66, DOI 10.1109/2.30733
   Edelstein O, 2002, IBM SYST J, V41, P111, DOI 10.1147/sj.411.0111
   Edelstein O, 2002, 5 INT C ACH QUAL SOF
   Ellson J, GRAPHVIZ GRAPH VISUA
   Flanagan C, 2005, ACM SIGPLAN NOTICES, V40, P110, DOI 10.1145/1047659.1040315
   GAIT J, 1986, SOFTWARE PRACT EXPER, V16, P225, DOI 10.1002/spe.4380160304
   Garg V. K., 2003, Proceedings of the Fifteenth IASTED Internation Conference on Parallel and Distributed Computing and Systems, P134
   GODEFROID P, 1995, FORM METHOD SYST DES, V7, P227, DOI 10.1007/BF01384077
   Goetz B, 2006, JAVA CONCURRENCY PRA
   Harvey C, 2001, 2001 AUSTRALIAN SOFTWARE ENGINEERING CONFERENCE, PROCEEDINGS, P61, DOI 10.1109/ASWEC.2001.948498
   Havelund K, 2000, LECT NOTES COMPUT SC, V1885, P245
   Heljanko K., 2000, CONCUR 2000 - Concurrency Theory. 11th International Conference. Proceedings (Lecture Notes in Computer Science Vol.1877), P108
   HELMBOLD D, 1985, IEEE SOFTWARE, V2, P47, DOI 10.1109/MS.1985.230351
   Hierons RM, 2009, ACM COMPUT SURV, V41, DOI 10.1145/1459352.1459354
   HOLZMANN GJ, 1985, AT&T TECH J, V64, P2413, DOI 10.1002/j.1538-7305.1985.tb00010.x
   Huth Michael, 2004, Logic in Computer Science: Modelling and reasoning about systems
   Hwang G-H, 1993, THESIS NATL CHIAOTUN
   Hwang GH, 2004, IEEE T SOFTWARE ENG, V30, P59, DOI 10.1109/TSE.2004.1265736
   Hwang GH, 1995, INT J SOFTW ENG KNOW, V5, P493, DOI 10.1142/S0218194095000241
   Hwang GH, 2009, THIRD INTERNATIONAL SYMPOSIUM ON THEORETICAL ASPECTS OF SOFTWARE ENGINEERING, PROCEEDINGS, P139, DOI 10.1109/TASE.2009.22
   Joshi P., 2009, P 21 INT C COMP AID
   KAHN AB, 1962, COMMUN ACM, V5, P558, DOI 10.1145/368996.369025
   KING JC, 1976, COMMUN ACM, V19, P385, DOI 10.1145/360248.360252
   Kirner Raimund, 2007, 14 K PROGR GRUNDL PR
   LAMPORT L, 1978, COMMUN ACM, V21, P558, DOI 10.1145/359545.359563
   Lei Y, 2002, IEEE INT C ENG COMP, P35, DOI 10.1109/ICECCS.2002.1181496
   Lei Y, 2007, SOFTW TEST VERIF REL, V17, P207, DOI 10.1002/stvr.369
   Lei Y, 2006, IEEE T SOFTWARE ENG, V32, P382, DOI 10.1109/TSE.2006.56
   Li-Te Tsao, 2009, THESIS TAIWAN NORMAL
   Long B, 2003, IEEE T SOFTWARE ENG, V29, P555, DOI 10.1109/TSE.2003.1205182
   MCDOWELL CE, 1989, COMPUT SURV, V21, P593, DOI 10.1145/76894.76897
   MCDOWELL CE, 1989, J PARALLEL DISTR COM, V6, P515, DOI 10.1016/0743-7315(89)90004-X
   Musuvathi M., 2007, ACM C PROGR LANG DES
   Musuvathi M., 2008, ACM C PROGR LANG DES
   Musuvathi Madan, 2007, Technical Report MSR-TR-2007-149
   Nir-Buchbinder Yarden, MULTITHREADED UNIT T
   OASIS, 2007, Web Services Business Process Execution Language Version 2.0
   PETERSON GL, 1981, INFORM PROCESS LETT, V12, P115, DOI 10.1016/0020-0190(81)90106-X
   Pugh W., 2007, ASE, P513, DOI [10.1145/1321631.1321722, DOI 10.1145/1321631.1321722]
   Rungta N, 2009, P 7 WORKSH PAR DISTR
   Sen K, 2006, LECT NOTES COMPUT SC, V3922, P339
   Sen K., 2007, P 22 IEEE ACM INT C, P323, DOI [DOI 10.1145/1321631.1321679, 10.1145/1321631.1321679]
   Silberschatz A., 2001, OPERATING SYSTEM CON
   Stoller S. D., 2002, Electronic Notes in Theoretical Computer Science, V70
   Tai K.C., 1996, PARALLEL DISTRIBUTED
   TAI KC, 1989, PROCEEDINGS : THE THIRTEENTH ANNUAL INTERNATIONAL COMPUTER SOFTWARE & APPLICATIONS CONFERENCE, P62, DOI 10.1109/CMPSAC.1989.65057
   Tai KC, 1997, SECOND INTERNATIONAL WORKSHOP ON SOFTWARE ENGINEERING FOR PARALLEL AND DISTRIBUTED SYSTEMS, PROCEEDINGS, P50, DOI 10.1109/PDSE.1997.596826
   Taylor Richard N., 1978, COMMUN ACM, V21
   Thomas J., 1987, IEEE T COMPUTERS C, V36, P471
   Tian C, 2009, SOFTWARE PRACT EXPER, V39, P947, DOI 10.1002/spe.922
   Vernet O, 1997, XVII INTERNATIONAL CONFERENCE OF THE CHILEAN COMPUTER SCIENCE SOCIETY, PROCEEDINGS, P264, DOI 10.1109/SCCC.1997.637099
   Web Service Archiecture, 2004, W3C WORK GROUP NOT 1
   Yan-You Li, 2009, THESIS NATL NORMAL U
   Yang Y, 2008, LECT NOTES COMPUT SC, V5156, P288, DOI 10.1007/978-3-540-85114-1_20
   YOUNG M, 1988, IEEE T SOFTWARE ENG, V14, P1499, DOI 10.1109/32.6195
NR 72
TC 4
Z9 4
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 1
PY 2013
VL 78
IS 9
BP 1294
EP 1323
PG 30
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 179QJ
UT WOS:000321536100007
OA hybrid
DA 2024-07-18
ER

PT J
AU Autili, M
   Di Benedetto, P
   Inverardi, P
AF Autili, Marco
   Di Benedetto, Paolo
   Inverardi, Paola
TI A hybrid approach for resource-based comparison of adaptable Java
   applications
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Adaptable applications; Analysis; Tool support
ID TIMING ANALYSIS; CONTEXT
AB During the last decade, context-awareness and adaptation have been receiving significant attention in many research areas. For application developers, the heterogeneity of resource-constrained mobile terminals creates serious problems for the development of mobile applications able to run properly on a large number of different devices. Thus, resource awareness plays a crucial role when developing such applications. It identifies the capability of being aware of the resources offered by an execution environment, in order to decide whether that environment is suited to receive and execute the application. Within this line of research, we propose CHAMELEON, a framework that provides both an integrated development environment and a proper context-aware support to adaptable Java applications for limited devices. In this paper we present the novel hybrid (from static to dynamic) analysis approach that CHAMELEON uses for inspecting (adaptable) Java programs with respect to their resource consumption in a given execution environment. This analysis permits to quantitatively compare alternative versions of the same program. The analysis is based on a resource model for specifying resource provisions and consumptions, and a parametric transition system that performs the actual analysis. (C) 2012 Elsevier B.V. All rights reserved.
C1 [Autili, Marco; Di Benedetto, Paolo; Inverardi, Paola] Univ Aquila, Dipartimento Informat, I-67100 Laquila, Italy.
C3 University of L'Aquila
RP Autili, M (corresponding author), Univ Aquila, Dipartimento Informat, I-67100 Laquila, Italy.
EM marco.autili@di.univaq.it; paolo.dibenedetto@di.univaq.it;
   paola.inverardi@di.univaq.it
RI AUTILI, Marco/AAG-7127-2020
OI AUTILI, Marco/0000-0001-5951-1567
FU European Community [257178, 231167]
FX This work is supported by the European Community's Seventh Framework
   Programme FP7/2007-2013 under grant agreements: number 257178 (project
   CHOReOS - Large Scale Choreographies for the Future Internet -
   www.choreos.eu), and number 231167 (project CONNECT Emergent Connectors
   for Eternal Software Intensive Networked Systems -
   http://connect-forever.eu/).
CR Albert E, 2007, ELECTRON NOTES THEOR, V190, P67, DOI 10.1016/j.entcs.2007.02.061
   Albert E, 2007, ISMM'07: PROCEEDINGS OF THE 2007 INTERNATIONAL SYMPOSIUM ON MEMORY MANAGEMENT, P105
   Altmeyer S, 2008, RTCSA 2008: 14TH IEEE INTERNATIONAL CONFERENCE ON EMBEDDED AND REAL-TIME COMPUTING SYSTEMS AND APPLICATIONS - PROCEEDINGS, P367, DOI 10.1109/RTCSA.2008.7
   [Anonymous], 1995, PROFESSIONAL COMPUTI
   Aspinall D, 2006, LECT NOTES COMPUT SC, V3956, P16
   Aspinall D, 2010, LECT NOTES COMPUT SC, V6084, P1, DOI 10.1007/978-3-642-15640-3_1
   Autili M., 2008, COMPSAC 08 32 INT CO
   Autili M., 2010, PPPJ 10 8 INT C PRIN, P119
   Autili M., 2008, DISCOTEC 08 CAMPUS 0
   Autili M, 2009, LECT NOTES COMPUT SC, V5503, P124
   BAKER BS, 1977, J ACM, V24, P98, DOI 10.1145/321992.321999
   Barthe G., 2005, ERCIM NEWS
   Braberman V, 2008, ISMM'08: PROCEEDINGS OF THE 2008 INTERNATIONAL SYMPOSIUM ON MEMORY MANAGEMENT, P141
   Cazzola W., 2011, JAVA JAVA ANNOVATION
   Chin WN, 2008, ISMM'08: PROCEEDINGS OF THE 2008 INTERNATIONAL SYMPOSIUM ON MEMORY MANAGEMENT, P151
   Cifuentes Cristina., 1994, Reverse Compilation Techniques
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   COUSOT P, 1976, 2 INT S PROGR PAR FR
   Cowan C., 1996, 5 INT WORKSH OBJ OR
   Curatelli F, 2006, REAL-TIME SYST, V32, P73, DOI 10.1007/s11241-006-5317-1
   Di Benedetto P., 2010, THESIS U AQUILA
   EADDY M, 2006, ECOOP WORKSH REFL AO
   Ermedahl A., 1997, Euro-Par '97 Parallel Processing. Third International Euro-Par Conference. Proceedings, P1298
   Ernst M. D., 2009, TYPE ANNOTATIONS SPE
   González S, 2011, LECT NOTES COMPUT SC, V6563, P246, DOI 10.1007/978-3-642-19440-5_15
   González S, 2008, J UNIVERS COMPUT SCI, V14, P3307
   Gulwani S, 2009, ACM SIGPLAN NOTICES, V44, P127, DOI 10.1145/1594834.1480898
   Healy C, 2000, REAL-TIME SYST, V18, P129, DOI 10.1023/A:1008189014032
   Healy C, 1998, FOURTH IEEE REAL-TIME TECHNOLOGY AND APPLICATIONS SYMPOSIUM - PROCEEDINGS, P12, DOI 10.1109/RTTAS.1998.683183
   Henricksen K, 2006, PERVASIVE MOB COMPUT, V2, P37, DOI 10.1016/j.pmcj.2005.07.003
   Hirschfeld R, 2008, J OBJECT TECHNOL, V7, P125, DOI 10.5381/jot.2008.7.3.a4
   Keays R., 2003, International Workshop on Data Engineering for Wireless and Mobile Access, P9
   Kochan S., 2003, Programming in objective-C
   KRAMER J, 1990, IEEE T SOFTWARE ENG, V16, P1293, DOI 10.1109/32.60317
   Mancinelli F., 2007, P 6 INT WORKSH SOFTW, P15, DOI 10.1145/1216993.1216998
   Mandelbrot B. B., 1982, FRACTAL GEOMETRY NAT
   Miecznikowski J, 2001, EIGHTH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P368, DOI 10.1109/WCRE.2001.957845
   Moeller M., 2002, INTRO TIVOLI DISTRIB
   Necula G. C., 1997, Conference Record of POPL '97: The 24th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P106, DOI 10.1145/263699.263712
   Sable research group, SOOT JAV OPT FRAM
   Seo Chiyoung., 2007, Proceedings of the twentysecond IEEE/ACM international conference on Automated software engineering, ASE '07, P421
   Sokolsky O, 2004, SECOND IEEE WORKSHOP ON SOFTWARE TECHNOLOGIES FOR FUTURE EMBEDDED AND UBIQUITOUS SYSTEMS, PROCEEDINGS, P99, DOI 10.1109/WSTFES.2004.1300422
   Tanter É, 2006, LECT NOTES COMPUT SC, V4089, P227
   Vandewoude Y, 2007, IEEE T SOFTWARE ENG, V33, P856, DOI 10.1109/TSE.2007.70733
   Villazón A, 2010, ACM SIGPLAN NOTICES, V45, P95, DOI 10.1145/1837852.1621622
   Villazon Alex., 2009, Proceedings of the Eighth International Conference on Generative Programming and Component Engineering, GPCE'09, P85, DOI [DOI 10.1145/1621607.1621621, DOI 10.1145/1837852.1621621]
   Visser W., 2003, Automated Software Engineering, V10, P203, DOI 10.1023/A:1022920129859
   Volanschi EN, 1997, ACM SIGPLAN NOTICES, V32, P286, DOI 10.1145/263700.263749
   Wilhelm R, 2010, LECT NOTES COMPUT SC, V5944, P3, DOI 10.1007/978-3-642-11319-2_3
   Wilhelm R, 2008, ACM T EMBED COMPUT S, V7, DOI 10.1145/1347375.1347389
NR 50
TC 6
Z9 6
U1 0
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD AUG 1
PY 2013
VL 78
IS 8
BP 987
EP 1009
DI 10.1016/j.scico.2012.01.005
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 168XV
UT WOS:000320742200003
DA 2024-07-18
ER

PT J
AU Canal, C
   Cámara, J
   Salaün, G
AF Canal, Carlos
   Camara, Javier
   Salauen, Gwen
TI Structural reconfiguration of systems under behavioral adaptation
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Components; Dynamic reconfiguration; Behavioral adaptation
ID COMPONENT; MODEL
AB A major asset of modern systems is to dynamically reconfigure themselves to cope with failures or component updates. Nevertheless, designing such systems with off-the-shelf components is hardly feasible: components are black-boxes that can only interact with others on compatible interfaces. Part of the problem is solved through Software Adaptation techniques, which compensate mismatches between interfaces. Our approach aims at using results of Software Adaptation in order to also provide reconfiguration capabilities to black-box components.
   This paper first formalizes a framework that unifies behavioral adaptation and structural reconfiguration of components. This formalization is used for statically detecting whether it is possible to reconfigure a system. In a second part, we present five notions of reconfiguration: history-aware reconfiguration, future-aware reconfiguration, property-compliant reconfiguration, one-way reconfigurability, and full reconfigurability. For each of these notions, its relevant properties are presented, and they are illustrated on simple yet realistic examples. (C) 2011 Elsevier B.V. All rights reserved.
C1 [Canal, Carlos] Univ Malaga, Dept Comp Sci, E-29071 Malaga, Spain.
   [Camara, Javier] Univ Coimbra, Dept Informat Engn, P-3000 Coimbra, Portugal.
   [Salauen, Gwen] INRIA, Grenoble INP, Grenoble, France.
C3 Universidad de Malaga; Universidade de Coimbra; Inria; Communaute
   Universite Grenoble Alpes; Institut National Polytechnique de Grenoble
RP Canal, C (corresponding author), Univ Malaga, Dept Comp Sci, E-29071 Malaga, Spain.
EM canal@lcc.uma.es; jcmoreno@dei.uc.pt; gwen.salaun@inria.fr
RI Camara, Javier/ABF-1534-2021; Canal, Carlos/H-4782-2015
OI Canal, Carlos/0000-0002-8002-0372
FU Spanish Ministry of Science and Innovation (MICINN) [TIN2008-05932];
   Andalusian Regional Government [P07-TIC-3184]; European Regional
   Development Fund (ERDF)
FX This work has been partially supported by projects TIN2008-05932 funded
   by the Spanish Ministry of Science and Innovation (MICINN), and
   P07-TIC-3184 funded by the Andalusian Regional Government and the
   European Regional Development Fund (ERDF). We would also like to thank
   Antonio Cansado and Javier Cubo for their collaboration in the early
   stages of this work.
CR Aguirre N, 2003, LECT NOTES COMPUT SC, V2621, P37
   ANGLUIN D, 1987, INFORM COMPUT, V75, P87, DOI 10.1016/0890-5401(87)90052-6
   Autili M, 2007, PROC INT CONF SOFTW, P784
   Back R. J., 2005, 660 TURK CTR COMP SC
   Barros T, 2009, ANN TELECOMMUN, V64, P25, DOI 10.1007/s12243-008-0069-7
   BIERMANN AW, 1972, IEEE T COMPUT, VC 21, P592, DOI 10.1109/TC.1972.5009015
   Brogi A, 2006, LECT NOTES COMPUT SC, V4294, P27
   Bruneton E, 2006, SOFTWARE PRACT EXPER, V36, P1257, DOI 10.1002/spe.767
   Bures T, 2006, FOURTH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING RESEARCH, MANAGEMENT AND APPLICATIONS, PROCEEDINGS, P40, DOI 10.1109/SERA.2006.62
   Cámara J, 2009, PROC INT CONF SOFTW, P627, DOI 10.1109/ICSE.2009.5070572
   Canal C, 2008, IEEE T SOFTWARE ENG, V34, P546, DOI 10.1109/TSE.2008.31
   Cansado A, 2010, ELECTRON NOTES THEOR, V263, P95, DOI 10.1016/j.entcs.2010.05.006
   Cerná I, 2007, ELECTRON NOTES THEOR, V182, P39, DOI 10.1016/j.entcs.2006.09.030
   Ketfi A, 2004, LECT NOTES COMPUT SC, V3107, P264
   Kramer J., 1998, IEE Proceedings-Software, V145, P146, DOI 10.1049/ip-sen:19982297
   KRAMER J, 1990, IEEE T SOFTWARE ENG, V16, P1293, DOI 10.1109/32.60317
   Mateescu R, 2008, LECT NOTES COMPUT SC, V5364, P84, DOI 10.1007/978-3-540-89652-4_10
   MEDVIDOVIC N, 1996, JOINT P 2 INT SOFTW, P24, DOI [10.1145/243327.243340, DOI 10.1145/243327.243340]
   Moser O., 2008, P 17 INT C WORLD WID, P815, DOI DOI 10.1145/1367497.1367607
   NEZHAD H.R. MOTAHARI., 2007, 16th international conference on World Wide Web (WWW '07), P993, DOI [10.1145/1242572.1242706, DOI 10.1145/1242572.1242706]
   Poizat P., 2006, P WCAT 06, P61
   Poizat P., 2007, P FACS 06, V182, P39
   Poizat P, 2007, LECT NOTES COMPUT SC, V4468, P141
   Salaün G, 2008, SEFM 2008: SIXTH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING AND FORMAL METHODS, PROCEEDINGS, P313, DOI 10.1109/SEFM.2008.42
   Wermelinger M., 2001, Software Engineering Notes, V26, P21, DOI 10.1145/503271.503213
   Yellin DM, 1997, ACM T PROGR LANG SYS, V19, P292, DOI 10.1145/244795.244801
NR 26
TC 8
Z9 9
U1 1
U2 17
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 1
PY 2012
VL 78
IS 1
BP 46
EP 64
DI 10.1016/j.scico.2011.09.003
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 024RD
UT WOS:000310125400004
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Fiadeiro, J
   Lopes, A
   Abreu, J
AF Fiadeiro, Jose
   Lopes, Antonia
   Abreu, Joao
TI A formal model for service-oriented interactions
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Conversational protocols; Formal methods; Labelled transition systems;
   Orchestration; Service-oriented computing; Temporal logic
ID CHECKING APPROACH; TEMPORAL LOGIC; CONTROL FLOW; CALCULUS;
   ORCHESTRATION; SPECIFICATION; VERIFICATION; SESSIONS; SYSTEMS; EVENTS
AB In this paper, we provide a mathematical semantics for a fragment of a language - SRML-that we have defined in the IST-FET-GC2 Integrated Project SENSORIA for modelling service-oriented systems. The main goal of this research is to make available a foundational basis for the development of practical modelling languages and tools that designers can use to model complex services at a level of abstraction that captures business functionality independently of the languages in which services are implemented and the platforms in which they execute. The basic artefact of the language is the service module, which provides a model for a complex service in terms of a number of components that jointly orchestrate a business function and may dynamically discover and bind to external parties that can deliver required functionalities. We define a mathematical model of computation and an associated logic for service-oriented systems based on the typical business conversations that occur between the parties that deliver a service. We then define the semantics of SRML service modules over this model and logic, and formulate a property of correctness that guarantees that services programmed and assembled as specified in a module provide the business functionality advertised by that module. Finally, we define an algebraic operation of composition of service modules that preserves correctness. To the best of our knowledge, there is no other formal approach that has been defined from first principles with the aim of capturing the business nature of service conversations and support service assembly based on the business logic that is required, not as it is programmed. (C) 2012 Elsevier B.V. All rights reserved.
C1 [Fiadeiro, Jose] Univ Leicester, Dept Comp Sci, Leicester LE1 7RH, Leics, England.
   [Lopes, Antonia] Univ Lisbon, Fac Sci, Dept Informat, P-1699 Lisbon, Portugal.
C3 University of Leicester; Universidade de Lisboa
RP Fiadeiro, J (corresponding author), Univ Leicester, Dept Comp Sci, Leicester LE1 7RH, Leics, England.
EM fiadeiroj@me.com
RI Lopes, Antonia/M-1755-2015
OI Lopes, Antonia/0000-0003-0688-3521
CR Abreu J., 2009, THESIS U LEICESTER
   Abreu J, 2008, LECT NOTES COMPUT SC, V5052, P1, DOI 10.1007/978-3-540-68265-3_1
   Abreu J, 2007, LECT NOTES COMPUT SC, V4574, P358
   Abreu J, 2009, LECT NOTES COMPUT SC, V5522, P219, DOI 10.1007/978-3-642-02138-1_15
   Acciai L, 2008, LECT NOTES COMPUT SC, V5065, P642, DOI 10.1007/978-3-540-68679-8_40
   Allen R., 1997, ACM Transactions on Software Engineering and Methodology, V6, P213, DOI 10.1145/258077.258078
   Alonso G., 2004, DAT SYS APP, DOI 10.1007/978-3-662-10876-5_5
   Alves A., 2007, Web Services Business Process Execution Language Version 2.0
   [Anonymous], 1999, Communicating and Mobile Systems: The Calculus
   [Anonymous], 2005, Web Services Choreography Description Language Version 1.0
   Baïna K, 2004, BIOMED SCI INSTRUM, V3084, P290
   Beisiegel M, 2007, SERVICE COMPONENT AR
   Benatallah B, 2004, IEEE INTERNET COMPUT, V8, P46, DOI 10.1109/MIC.2004.1260703
   Beyer Dirk., 2005, 15 WORLD WIDE WEB C, P148
   Bocchi Laura, 2008, 2008 IEEE 32nd International Computer Software and Applications Conference (COMPSAC), P1059, DOI 10.1109/COMPSAC.2008.228
   Bocchi L., ADV KNOWLED IN PRESS, P36
   Bocchi L, 2008, LECT NOTES COMPUT SC, V4937, P92
   Bocchi L, 2008, LECT NOTES COMPUT SC, V4961, P163, DOI 10.1007/978-3-540-78743-3_13
   Bocchi L, 2009, ELECTRON NOTES THEOR, V253, P3, DOI 10.1016/j.entcs.2009.09.025
   Boreale M, 2006, LECT NOTES COMPUT SC, V4184, P38
   Bruni R, 2008, LECT NOTES COMPUT SC, V5140, P100
   Bruni R, 2008, LECT NOTES COMPUT SC, V5052, P67, DOI 10.1007/978-3-540-68265-3_5
   Bruni R, 2009, LECT NOTES COMPUT SC, V5569, P1
   Bultan T., 2003, Proc. of the 12th Int. Conf on World Wide Web, P403, DOI [10.1145/775152.775210, DOI 10.1145/775152.775210]
   Bultan T, 2008, SERV ORIENTED COMPUT, V2, P27, DOI 10.1007/s11761-008-0022-7
   Carbone M, 2007, ELECTRON NOTES THEOR, V171, P127, DOI 10.1016/j.entcs.2006.12.041
   Chaki S, 2005, FORM ASP COMPUT, V17, P461, DOI 10.1007/s00165-005-0071-z
   CLARKE EM, 1986, ACM T PROGR LANG SYS, V8, P244, DOI 10.1145/5397.5399
   DENICOLA R, 1995, J ACM, V42, P458, DOI 10.1145/201019.201032
   DENICOLA R, 1990, LECT NOTES COMPUT SC, V469, P407
   Diaz G, 2005, LECT NOTES COMPUT SC, V3670, P230
   Dwyer M. B., 1999, Proceedings of the 1999 International Conference on Software Engineering (IEEE Cat. No.99CB37002), P411, DOI 10.1109/ICSE.1999.841031
   Elfatatry A, 2007, COMMUN ACM, V50, P35, DOI 10.1145/1278201.1278203
   Fantechi A, 2008, LECT NOTES COMPUT SC, V4961, P230, DOI 10.1007/978-3-540-78743-3_17
   Fiadeiro J, 2011, LECT NOTES COMPUT SC, V6582, P61, DOI 10.1007/978-3-642-20401-2_5
   Fiadeiro JL, 2006, LECT NOTES COMPUT SC, V4184, P193
   Fiadeiro JL, 2011, LECT NOTES COMPUT SC, V6603, P18, DOI 10.1007/978-3-642-19811-3_3
   Fiadeiro JL, 2011, FORM ASP COMPUT, V23, P433, DOI 10.1007/s00165-010-0166-z
   Fiadeiro JL, 2010, LECT NOTES COMPUT SC, V6285, P70, DOI 10.1007/978-3-642-15114-9_8
   Foster I., 2004, The Grid, V2
   Fu X., 2004, P 13 INT C WORLD WID, P621
   Gilmore S., 1994, Computer Performance Evaluation. Modelling Techniques and Tools. 7th International Conference Proceedings, P353
   GNESI S, 2005, P 43 C ANN AICA
   Hamadi R., 2003, Proceedings of the 14th Australasian database conference, V17, P191
   Hinz S, 2005, LECT NOTES COMPUT SC, V3649, P220, DOI 10.1007/11538394_15
   Holzmann GJ, 1997, IEEE T SOFTWARE ENG, V23, P279, DOI 10.1109/32.588521
   Honda K, 1998, LNCS, V1381, P22, DOI DOI 10.1007/BFB0053567
   Huth M, 2001, LECT NOTES COMPUT SC, V2028, P155
   KAMINSKI M, 1994, J COMPUT SYST SCI, V49, P223, DOI 10.1016/S0022-0000(05)80048-0
   Kiepuszewski B, 2003, ACTA INFORM, V39, P143, DOI 10.1007/s00236-002-0105-4
   Kindler E, 1998, LECT NOTES COMPUT SC, V1420, P365
   Kitchin D, 2009, LECT NOTES COMPUT SC, V5522, P1, DOI 10.1007/978-3-642-02138-1_1
   Lapadula A, 2007, LECT NOTES COMPUT SC, V4421, P33
   Manna Z, 1990, CSTR901321 STANF U
   Martens A, 2005, LECT NOTES COMPUT SC, V3442, P19, DOI 10.1007/978-3-540-31984-9_3
   Misra J, 2005, NATO SCI SER II-MATH, V195, P285
   Müller-Olm M, 1999, LECT NOTES COMPUT SC, V1694, P330
   Narayanan S., 2002, Proceedings of the 11th International Conference on World Wide Web, P77, DOI DOI 10.1145/511446.511457
   Ouyang C, 2007, SCI COMPUT PROGRAM, V67, P162, DOI 10.1016/j.scico.2007.03.002
   Peltz C, 2003, COMPUTER, V36, P46, DOI 10.1109/MC.2003.1236471
   Su Jianwen., 2007, Web Services and Formal Methods, P1
   ter Beek M., 2006, P 4 IEEE EUR C WEB S, P287
   TERBEEK MH, 2007, LNCS, V4916
   van der Aalst W., 2007, SPECIFYING MONITORIN
   van der Aalst WMP, 2006, LECT NOTES COMPUT SC, V4184, P1
   Vieira HT, 2008, LECT NOTES COMPUT SC, V4960, P269
   Xiaochuan Y, 2004, IEEE INTERNATIONAL CONFERENCE ON WEB SERVICES, PROCEEDINGS, P756
NR 67
TC 3
Z9 5
U1 0
U2 14
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAY 1
PY 2012
VL 77
IS 5
BP 577
EP 608
DI 10.1016/j.scico.2011.12.003
PG 32
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 917OQ
UT WOS:000302188000002
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU ter Beek, MH
   Fantechi, A
   Gnesi, S
   Mazzanti, F
AF ter Beek, Maurice H.
   Fantechi, Alessandro
   Gnesi, Stefania
   Mazzanti, Franco
TI A state/event-based model-checking approach for the analysis of abstract
   system properties
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Formal methods; UML; State machines; Temporal logic; Model checking;
   Automotive systems; Service-oriented computing
ID LOGICS
AB We present the UMC framework for the formal analysis of concurrent systems specified by collections of UML state machines. The formal model of a system is given by a doubly labelled transition system, and the logic used to specify its properties is the state-based and event-based logic UCTL UMC is an on-the-fly analysis framework which allows the user to interactively explore a UML model, to visualize abstract behavioural slices of it and to perform local model checking of UCTL formulae. An automotive scenario from the service-oriented computing (SOC) domain is used as case study to illustrate our approach. (C) 2010 Elsevier B.V. All rights reserved.
C1 [ter Beek, Maurice H.; Fantechi, Alessandro; Gnesi, Stefania; Mazzanti, Franco] CNR, Ist Sci Tecnol Informaz A Faedo, I-56124 Pisa, Italy.
   [Fantechi, Alessandro] Univ Florence, Dipartimento Sistemi & Informat, I-50139 Florence, Italy.
C3 Consiglio Nazionale delle Ricerche (CNR); Istituto di Scienza e
   Tecnologie dell'Informazione "Alessandro Faedo" (ISTI-CNR); University
   of Florence
RP ter Beek, MH (corresponding author), CNR, Ist Sci Tecnol Informaz A Faedo, Via G Moruzzi 1, I-56124 Pisa, Italy.
EM terbeek@isti.cnr.it; fantechi@dsi.unifi.it; gnesi@isti.cnr.it;
   mazzanti@isti.cnr.it
RI Beek, Maurice H ter/N-5563-2015; Mazzanti, Franco/B-7324-2015
OI Beek, Maurice H ter/0000-0002-2930-6367; Mazzanti,
   Franco/0000-0003-4562-8777; GNESI, STEFANIA/0000-0002-0139-0421
FU EU [IST-2005-016004]; Italian project D-ASAP
FX The work presented in this paper has been partially funded by the EU
   project SENSORIA (IST-2005-016004) and the Italian project D-ASAP.
CR [Anonymous], POPL 2000
   [Anonymous], LNCS
   Bernardi S., 2002, PROC 3 INT WORKSHOP, P35
   Biere A, 1999, LECT NOTES COMPUT SC, V1579, P193
   Clarke E, 2002, IEEE S LOG, P19, DOI 10.1109/LICS.2002.1029814
   CLARKE EM, 1986, ACM T PROGR LANG SYS, V8, P244, DOI 10.1145/5397.5399
   Clarke EM, 1999, MODEL CHECKING, P1
   DENICOLA R, 1995, J ACM, V42, P458, DOI 10.1145/201019.201032
   Dubrovin J, 2008, INT CONF APPL CONCUR, P108, DOI 10.1109/ACSD.2008.4574602
   Fantechi A, 2008, LECT NOTES COMPUT SC, V4961, P230, DOI 10.1007/978-3-540-78743-3_17
   GNESI S, 2005, 43 ANN IT C AICA UD
   GNESI S, 2004, P 2 INT C SOFTW ENG, P331
   Gurfinkel A, 2003, LECT NOTES COMPUT SC, V2619, P160
   HENNESSY M, 1985, J ACM, V32, P137, DOI 10.1145/2455.2460
   JUSSILA T, 2006, P 3 INT WORKSH MOD D, P94
   KNAPP A, 2002, LECT NOTES COMPUTER, V2469, P395
   KOCH N, 2007, UML SERVICE ORIENTED
   KOCH N, 2007, REQUIREMENTS MODELLI
   LATELLA D, 1999, FORM ASP COMPUT, V711, P637
   MAZZANTI F, 2009, 2009TR043 CNR I SCI
   Meolic R, 2008, INFORM SCIENCES, V178, P1542, DOI 10.1016/j.ins.2007.10.023
   Müller-Olm M, 1999, LECT NOTES COMPUT SC, V1694, P330
   OBE I, 2004, LNCS, V2989, P127
   *OMG, UML SUP 2 1 2
   *PATT, SPAC PATT
   PNUELI A, 1985, LECT NOTES COMPUT SC, V194, P15
   PORRES I, 2001, THESIS ABO AKAD U TU
   RUMBAUGH JAMES., 1998, UNIFIED MODELING LAN
   Saldhana JA, 2001, INT J SOFTW ENG KNOW, V11, P643, DOI 10.1142/S021819400100075X
   Schinz I, 2004, PROCEEDINGS OF THE SECOND INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING AND FORMAL METHODS, P174, DOI 10.1109/SEFM.2004.1347518
   *SENS, EU IST FET INT PROJ
   ter Beek MH, 2008, LECT NOTES COMPUT SC, V4916, P133
   ter Beek MH, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P613, DOI 10.1145/1368088.1368173
   TERBEEK MH, 2009, P 24 ANN ACM S APPL, P2111, DOI DOI 10.1145/1529282.1529751
   VANGLABBEEK RJ, 1990, LECT NOTES COMPUT SC, V458, P278, DOI 10.1007/BFb0039066
   UMC ONLINE WEB APPL
NR 36
TC 42
Z9 43
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 1
PY 2011
VL 76
IS 2
SI SI
BP 119
EP 135
DI 10.1016/j.scico.2010.07.002
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 693JO
UT WOS:000285220600005
OA Green Published, Bronze
DA 2024-07-18
ER

PT J
AU Krause, C
   Maraikar, Z
   Lazovik, A
   Arbab, F
AF Krause, Christian
   Maraikar, Ziyan
   Lazovik, Alexander
   Arbab, Farhad
TI Modeling dynamic reconfigurations in Reo using high-level replacement
   systems
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Dynamic reconfiguration; Graph transformation; Coordination
ID PETRI NETS; CHECKING; LOGIC
AB Reo is a channel-based coordination language, wherein circuit-like connectors model and implement interaction protocols in heterogeneous environments that coordinate components or services. Connectors are constructed from primitive channels and can be reconfigured dynamically. Reconfigurations can even execute within a pending I/O transaction. In this article, we formally model and analyze dynamic reconfigurations and show how running coordinators can be reconfigured without the cooperation of their engaged components.
   We utilize the theory of high-level replacement systems to model rule-based reconfigurations of connectors. This allows us to perform a complex reconfiguration as an atomic step and analyze it using formal verification techniques. Specifically, we formalize the structure of connectors as typed hypergraphs and use critical pair and state space analyses for verification of dynamic reconfigurations. We provide a full implementation of our approach in a framework that includes tools for the definition, analysis, and execution of reconfigurations, and is integrated with two execution engines for Reo. Our framework, moreover, integrates with the graph transformation tools AGG and GROOVE for formal analysis, as well as the Eclipse platform and standard web service technologies. (C) 2009 Elsevier B.V. All rights reserved.
C1 [Krause, Christian; Maraikar, Ziyan; Arbab, Farhad] Ctr Wiskunde & Informat, NL-1090 GB Amsterdam, Netherlands.
   [Lazovik, Alexander] Univ Groningen, Inst Math & Comp Sci, NL-9747 AG Groningen, Netherlands.
C3 University of Groningen
RP Krause, C (corresponding author), Ctr Wiskunde & Informat, POB 94079, NL-1090 GB Amsterdam, Netherlands.
EM c.krause@cwi.nl; z.maraikar@cwi.nl; a.lazovik@rug.nl; farhad@cwi.nl
FU NWO GLANCE
FX First author's work was supported by NWO GLANCE funding programs
   WoMaLaPaDiA and SYANCO.
CR [Anonymous], 1993, TERM GRAPH REWRITING
   [Anonymous], 2006, MONOGRAPHS THEORETIC
   Arbab F, 2004, MATH STRUCT COMP SCI, V14, P329, DOI 10.1017/S0960129504004153
   Baier C, 2006, SCI COMPUT PROGRAM, V61, P75, DOI 10.1016/j.scico.2005.10.008
   Baldan P, 2005, MATH STRUCT COMP SCI, V15, P1, DOI 10.1017/S0960129504004311
   BALDAN P, 2008, ABS08094115 CORR, DOI DOI 10.2168/LMCS-4(4:3)2008
   Bonsangue M, 2009, LECT NOTES COMPUT SC, V5521, P184, DOI 10.1007/978-3-642-02053-7_10
   BRUNI R, 2008, B EATCS, V94, P160
   Clarke D, 2008, FUND INFORM, V82, P361
   Clarke D, 2007, SCI COMPUT PROGRAM, V66, P205, DOI 10.1016/j.scico.2007.01.009
   CLARKE EM, 1986, ACM T PROGR LANG SYS, V8, P244, DOI 10.1145/5397.5399
   Ehrig H, 2006, FUND INFORM, V74, P31
   Gelernter D., 1985, Proceedings of the 1985 International Conference on Parallel Processing (Cat. No.85CH2140-2), P255
   Heckel R, 2002, LECT NOTES COMPUT SC, V2505, P161
   Klüppelholz S, 2007, ELECTRON NOTES THEOR, V175, P19, DOI 10.1016/j.entcs.2007.03.003
   KOEHLER C, 2008, ELECT COMMUNICATIONS, V10
   Koehler C, 2009, LECT NOTES COMPUT SC, V5486, P221, DOI 10.1007/978-3-642-03429-9_15
   Rensink A, 2003, LECT NOTES COMPUT SC, V3062, P479
   Rensink A, 2008, LECT NOTES COMPUT SC, V5065, P114, DOI 10.1007/978-3-540-68679-8_8
   Taentzer G, 2003, LECT NOTES COMPUT SC, V3062, P446
   Van der Aalst WMP, 1998, J CIRCUIT SYST COMP, V8, P21, DOI 10.1142/S0218126698000043
   van der Aalst WMP, 2001, INFORM SYST FRONT, V3, P297, DOI 10.1023/A:1011409408711
NR 22
TC 29
Z9 33
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 1
PY 2011
VL 76
IS 1
SI SI
BP 23
EP 36
DI 10.1016/j.scico.2009.10.006
PG 14
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 684BH
UT WOS:000284521500003
OA Green Published
DA 2024-07-18
ER

PT J
AU Boiten, E
   Derrick, J
AF Boiten, Eerke
   Derrick, John
TI Incompleteness of relational simulations in the blocking paradigm
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Relational refinement; Downward and upward simulations; Joint
   completeness; Failures refinement
ID REFINEMENT
AB Refinement is the notion of development between formal specifications For specifications given in a relational formalism downward and upward simulations are the standard method to verify that a refinement holds their usefulness based upon their soundness and joint completeness This is known to be true for total relational specifications and has been claimed to hold for partial relational specifications in both the non-blocking and blocking interpretations
   In this paper we show that downward and upward simulations in the blocking interpretation where domains are guards are not Jointly complete This contradicts earlier claims in the literature We illustrate this with an example (based on one recently constructed by Reeves and Streader) and then construct a proof to show why Joint completeness fails in general (C) 2010 Elsevier B V All rights reserved
C1 [Boiten, Eerke] Univ Kent, Sch Comp, Canterbury CT2 7NF, Kent, England.
   [Derrick, John] Univ Sheffield, Dept Comp Sci, Sheffield S1 4DP, S Yorkshire, England.
C3 University of Kent; University of Sheffield
RP Boiten, E (corresponding author), Univ Kent, Sch Comp, Canterbury CT2 7NF, Kent, England.
OI Derrick, John/0000-0002-6631-8914; Boiten, Eerke/0000-0002-9184-8968
CR BOITEN EA, 2003, INT SEMINAR RELATION, V7, P82
   Boiten E, 2009, FORM ASP COMPUT, V21, P65, DOI 10.1007/s00165-007-0066-z
   Bolton C., 1999, IFM'99. Proceedings of the 1st International Conference on Integrated Formal Methods, P273
   BOLTON C, 2002, INTEGRATED FORMAL ME, V2335, P225
   BOLTON C, 2002, TRGOMR 02 BCS FACS R, V70
   DEROEVER WP, 1998, COMPARISON CUP
   Derrick J., 2003, Formal Aspects of Computing, V15, P182, DOI 10.1007/s00165-003-0007-4
   Derrick J., 2001, FACIT, VSecond
   Deutsch M, 2006, FORM ASP COMPUT, V18, P329, DOI 10.1007/s00165-006-0006-3
   FISCHER C, 2000, B EATCS EUROPEAN ASS, V71, P92
   JIFENG H, 1986, P ESOP 86, V213, P187
   JIFENG H, 1990, DATA REFINEMENT CATE, V90
   JIFENG H, 1989, FORM ASP COMPUT, V1, P229
   JOSEPHS MB, 1988, DISTRIB COMPUT, V3, P9, DOI 10.1007/BF01788563
   LYNCH N, 1995, INFORM COMPUT, V121, P214, DOI 10.1006/inco.1995.1134
   REEVES S, 2008, FORM ASP COMPUT, P295
   REEVES S, 2006, DEP COMPUTER SCI U W, V20
   Roscoe A.W., 1998, THEORY PRACTICE CONC
   SIMPSON A, 1998, DISCRETE MATH THEORE
   Smith G, 1997, FIRST IEEE INTERNATIONAL CONFERENCE ON FORMAL ENGINEERING METHODS, PROCEEDINGS, P293, DOI 10.1109/ICFEM.1997.630436
   STRULO B, 1995, ZUM Z FORMAL SPECIFI, V967, P264
   Woodcock J., 1996, Using Z: Specification, Refinement, and Proof
   WOODCOCK JCP, 1990, VDM VDM ZI FORMAL ME, V428
   1985, CE HOARE COMMUNICATI
NR 24
TC 3
Z9 3
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 1
PY 2010
VL 75
IS 12
BP 1262
EP 1269
DI 10.1016/j.scico.2010.07.003
PG 8
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 682WM
UT WOS:000284433700004
OA Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Conejero, JM
   Hernández, J
   Jurado, E
   van den Berg, K
AF Conejero, Jose M.
   Hernandez, Juan
   Jurado, Elena
   van den Berg, Klaas
TI Mining early aspects based on syntactical and dependency analyses
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Requirements engineering; Aspect mining; Crosscutting concerns;
   Concern-oriented metrics
AB Aspect-Oriented Requirements Engineering focuses on the identification and modularisation of crosscutting concerns at early stages. There are different approaches in the requirements engineering community to deal with crosscutting concerns, introducing the benefits of the application of aspect-oriented approaches at these early stages of development. However, most of these approaches rely on the use of Natural Language Processing techniques for aspect identification in textual documents and thus, they lack a unified process that generalises its application to other requirements artefacts such as use case diagrams or viewpoints. In this paper, we propose a process for mining early aspects, i.e. identifying crosscutting concerns at the requirements level. This process is based on a crosscutting pattern where two different domains are related. These two different domains may represent different artefacts of the requirements analysis such as text and use cases or concerns and use cases. The process uses syntactical and dependency based analyses to automatically identify crosscutting concerns at the requirements level. Validation of the process is illustrated by applying it to several systems and showing a comparison with other early aspects tools. A set of aspect-oriented metrics is also used to show this validation. (C) 2010 Elsevier B.V. All rights reserved.
C1 [van den Berg, Klaas] Univ Twente, Software Engn Grp, NL-7500 AE Enschede, Netherlands.
C3 University of Twente
EM chemacm@unex.es; juanher@unex.es; elenajur@unex.es;
   k.g.vandenberg@ewi.utwente.nl
RI Manzano, José M. Conejero/AAF-9336-2019; Van den Berg,
   Klaas/AAU-8601-2021; Hernandez, Juan/L-5065-2014
OI Manzano, José M. Conejero/0000-0003-2640-679X; Hernandez,
   Juan/0000-0002-6343-7395
FU MEC [TIN2008-02985]
FX This work has been carried out with the support by MEC under contract
   TIN2008-02985. We thank Bedir Tekinerdogan for allowing us to use the
   CFVS example and Alessandro Garcia and Eduardo Figueiredo for allowing
   us to use the MobileMedia case study and for their helpful comments on
   the first versions of this paper. Finally, we would also like to thank
   the anonymous reviewers and the different editors for their useful
   comments and reviews of this paper.
CR [Anonymous], LNCS
   [Anonymous], P OBJ OR PROGR SYST
   [Anonymous], P INT C SOFTW MAINT
   [Anonymous], 2004, The Unified Modeling Language Reference Manual
   [Anonymous], 2005, THESIS U BRIT COLUMB
   Baniassad E, 2006, IEEE SOFTWARE, V23, P61, DOI 10.1109/MS.2006.8
   Baniassad E, 2004, PROC INT CONF SOFTW, P158, DOI 10.1109/ICSE.2004.1317438
   Breu S, 2004, 19TH INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING, PROCEEDINGS, P310, DOI 10.1109/ASE.2004.1342754
   Bruntink M, 2005, IEEE T SOFTWARE ENG, V31, P804, DOI 10.1109/TSE.2005.114
   Ceccato M, 2006, SOFTWARE QUAL J, V14, P209, DOI 10.1007/s11219-006-9217-3
   Chitchyan R, 2009, AOSD'09: 8TH INTERNATIONAL CONFERENCE ON ASPECT-ORIENTED SOFTWARE DEVELOPMENT, P149
   Chitchyan Ruzanna., 2015, SURVEY ASPECT ORIENT
   Cleland-Huang J, 2007, REQUIR ENG, V12, P103, DOI 10.1007/s00766-007-0045-1
   Cleland-Huang J, 2007, COMPUTER, V40, P27, DOI 10.1109/MC.2007.195
   Colyer A., 2004, COMP0012004 LANC U
   CONEJERO J, 2007, P 15 IEEE INT REQ EN
   Conejero JM, 2009, LECT NOTES BUS INF P, V33, P136
   Dijkstra E. W., 1976, A Discipline of Pro-gramming
   EADDY M, 2007, P WORKSH ASS ASP TEC
   *EARL ASP, 2007, ASP OR REQ ENG ARCH
   EGYED A, 2005, P 3 INT WORKSH TRAC
   Figueiredo E, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P261, DOI 10.1145/1368088.1368124
   Filman R., 2000, Workshop on Advanced Separation of Concerns, P21
   Filman R., 2004, ASPECT ORIENTED SOFT
   France RB, 2004, IEEE T SOFTWARE ENG, V30, P193, DOI 10.1109/TSE.2004.1271174
   GAMMA E, 1995, ELEMENTS REUSABLE OB
   Garcia A, 2008, COMMUN ACM, V51, P75, DOI 10.1145/1342327.1342341
   Griss ML, 2000, SPRINGER INT SER ENG, V576, P271
   HANNEMANN J, 2001, P WORKSH ADV SEP 23
   Jacobson Ivar., 2005, ASPECT ORIENTED SOFT
   Kellens A, 2007, LECT NOTES COMPUT SC, V4640, P143
   KICZALES G, 2005, CROSS CUTTING
   Kiczales G., 1997, P 11 EUR C OBJ OR PR
   KIT L, 2006, P OOPSLA C PORTL US
   Moreira A, 2006, LECT NOTES COMPUT SC, V4001, P544, DOI 10.1007/11767138_36
   Neyman J., 1967, Joint statistical papers
   RASHID A, 2003, P 2 INT ASP OR SOFTW
   Robillard MP, 2003, PROC INT CONF SOFTW, P822, DOI 10.1109/ICSE.2003.1201304
   SAMPAIO A, 2007, AOSDEUROPEULANC33
   SAMPAIO A, 2005, P INT C AUT SOFTW EN
   SANTANNA C, 2007, P 1 EUR C SOFTW ARCH
   SHEPHERD D, 2005, P 1 INT WORKSH MOD A
   Sutton Jr S, 2004, ASPECT ORIENTED SOFT, P479
   Tekinerdogan B, 2007, ELECTRON NOTES THEOR, V163, P45, DOI 10.1016/j.entcs.2006.10.015
   TONELLA P, 2004, P 11 IEEE WORK C REV
   TOURWE T, 2004, P 4 INT WORKSH SOURC
   van den Berg K, 2007, LECT NOTES COMPUT SC, V4620, P73
   VANDENBERG K, 2006, P ASP OR MOD WORKSH
   Wilde N, 2003, J SYST SOFTWARE, V65, P105, DOI [10.1016/S0164-1212(02)00052-3, 10.1016/s0164-1212(02)00052-3]
   Wong WE, 2000, J SYST SOFTWARE, V54, P87, DOI 10.1016/S0164-1212(00)00029-7
   Yu YJ, 2004, 12TH IEEE INTERNATIONAL REQUIREMENTS ENGINEERING CONFERENCE, PROCEEDINGS, P38
   ZHANG J, 2006, INT J COMPUTER APPLI, V31, P74
   2009, MINING EARLY ASPECTS
   2007, XQUERY 1 0 XML QUERY
   2005, XMI MAPPING SPECIFIC
NR 55
TC 4
Z9 4
U1 0
U2 5
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 1
PY 2010
VL 75
IS 11
SI SI
BP 1113
EP 1141
DI 10.1016/j.scico.2010.04.013
PG 29
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 641MD
UT WOS:000281129600010
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Brichau, J
   Kellens, A
   Castro, S
   D'Hondt, T
AF Brichau, Johan
   Kellens, Andy
   Castro, Sergio
   D'Hondt, Theo
TI Enforcing structural regularities in software using IntensiVE
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Software evolution; Logic meta-programming; Structural regularities
ID CODE
AB The design and implementation of a software system is often governed by a variety of coding conventions, design patterns, architectural guidelines, design rules, and other so-called structural regularities. To prevent a deterioration of the system's source code, it is important that these regularities are verified and enforced upon evolution of the system. The Intensional Views Environment (IntensiVE), presented in this article, is a tool suite for specifying relevant structural regularities in an (object-oriented) software system and verifying them against the current and later versions of the system. At the heart of the IntensiVE tool suite are (logic) program queries and the model of intensional views and relations, through which regularities are expressed. Upon verification of these regularities in the source code of the system, IntensiVE reports the code entities (i.e. classes, methods, variables, statements, etc.) that violate these constraints. We present IntensiVE and illustrate its application to the verification of an Abstract Factory design pattern in the implementation of a software system. (C) 2009 Elsevier B.V. All rights reserved.
C1 [Brichau, Johan; Castro, Sergio] Catholic Univ Louvain, Louvain, Belgium.
   [Kellens, Andy; D'Hondt, Theo] Vrije Univ Brussel, Brussels, Belgium.
C3 Universite Catholique Louvain; Vrije Universiteit Brussel
RP Brichau, J (corresponding author), Catholic Univ Louvain, Louvain, Belgium.
EM johan.brichau@uclouvain.be; andy.kellens@vub.ac.be;
   sergio.castro@uclouvain.be; tjdhondt@vub.ac.be
FU Institute for the encouragement of Scientific Research and Innovation of
   Brussels; "Institute for the Promotion of Innovation through Science and
   Technology in Flanders" (IWT Vlaanderen); Belgian Science Policy
FX The first author's work was funded by the SOIB program of the "Institute
   for the encouragement of Scientific Research and Innovation of
   Brussels". The second author's Postdoctoral scholarship was funded by
   the "Institute for the Promotion of Innovation through Science and
   Technology in Flanders" (IWT Vlaanderen). The third author's work was
   partially funded by the Inter-University Attraction Poles Program of the
   Belgian Science Policy.
CR BECK K, 2001, SMALLTALK BEST PRACT
   Brichau J, 2007, P INT C CHIL COMPUT, P92, DOI 10.1109/SCCC.2007.16
   BROOKS FP, 1987, COMPUTER, V20, P10, DOI 10.1109/MC.1987.1663532
   Ciupke O., 1999, Proceedings of Technology of Object-Oriented Languages and Systems - TOOLS 30 (Cat. No.PR00278), P18, DOI 10.1109/TOOLS.1999.787532
   COHEN J, 1987, ACM T PROGR LANG SYS, V9, P125, DOI 10.1145/22719.22946
   Coplien JO, 1992, ADV C PROGRAMMING ST
   Depradine C, 2003, SOFTWARE PRACT EXPER, V33, P61, DOI 10.1002/spe.495
   DUBY CK, 1992, USENIX C(PLUS-PLUS) TECHNICAL CONFERENCE PROCEEDINGS, P99
   DUCASSE S, 2005, COLLABORATIVE EXTENS, P55
   Eichberg M, 2004, 11TH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P182, DOI 10.1109/WCRE.2004.45
   Florijn Gern., 2002, RevJava - Design critiques and architectural conformance checking for Java software
   Gamma E., 1994, Design patterns: Elements of reusable object-oriented software
   GOLDBERG A, 1989, SRNALLTALK 80 LANGUA
   GUEHENEUC Y, 2002, WORKSH DECL MET PROG
   Hajiyev E, 2006, LECT NOTES COMPUT SC, V4067, P2
   Haldiman N, 2009, COMPUT LANG SYST STR, V35, P48, DOI 10.1016/j.cl.2008.06.003
   Hou DQ, 2006, IEEE T SOFTWARE ENG, V32, P404, DOI 10.1109/TSE.2006.60
   Hovemeyer D, 2004, ACM SIGPLAN NOTICES, V39, P92, DOI 10.1145/1052883.1052895
   JOHNSON S, 1979, ATT BELL LAB A, V2
   Kellens A, 2006, LECT NOTES COMPUT SC, V4067, P501
   Kellens A, 2009, EUR CON SFTWR MTNCE, P199, DOI 10.1109/CSMR.2009.9
   Lanza M, 2003, IEEE T SOFTWARE ENG, V29, P782, DOI 10.1109/TSE.2003.1232284
   Marinescu C., 2005, P INT C SOFTW MAINT, P77
   MENS K, 2006, ELSEVIER J COMPUTER, V32, P140
   Mens K., 2006, C SOFTW MAINT REENG, P239
   Meyer M., 2006, Proceedings of the 2006 ACM symposium on Software visualization, P135, DOI DOI 10.1145/1148493.1148513
   MINSKY NH, 1991, SOFTWARE ENG J, V6, P285, DOI 10.1049/sej.1991.0031
   Moha N, 2006, IEEE INT CONF AUTOM, P297
   PAPI MM, 2008, ISSTA, P201
   Wuyts R, 2004, COMPUT LANG SYST STR, V30, P63, DOI 10.1016/j.cl.2003.08.003
   Wuyts R., 2001, Ph.D. thesis
NR 31
TC 7
Z9 7
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD APR
PY 2010
VL 75
IS 4
BP 232
EP 246
DI 10.1016/j.scico.2009.11.005
PG 15
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 580QR
UT WOS:000276464800004
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Roldán, M
   Durán, F
   Vallecillo, A
AF Roldan, Manuel
   Duran, Francisco
   Vallecillo, Antonio
TI Invariant-driven specifications in Maude
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Execution strategies; Invariants; Rewriting logic; Maude; Reflection
ID REWRITING LOGIC; TEMPORAL LOGIC; MODEL
AB This work presents a general mechanism for executing specifications that comply with given invariants, which may be expressed in different formalisms and logics. We exploit Maude's reflective capabilities and its properties as a general semantic framework to provide a generic strategy that allows us to execute Maude specifications taking into account user-defined invariants. The strategy is parameterized by the invariants and by the logic in which such invariants are expressed. We experiment with different logics, providing examples for propositional logic, (finite future time) linear temporal logic and metric temporal logic. (C) 2009 Elsevier B.V. All rights reserved.
C1 [Roldan, Manuel; Duran, Francisco; Vallecillo, Antonio] Univ Malaga, Dpto Lenguajes & Ciencias Computac, E-29071 Malaga, Spain.
C3 Universidad de Malaga
RP Durán, F (corresponding author), Univ Malaga, Dpto Lenguajes & Ciencias Computac, Campus Teatinos,Bulevar Luois Pasteur, E-29071 Malaga, Spain.
EM mrc@lcc.uma.es; duran@lcc.uma.es; av@lcc.uma.es
RI Durán, Francisco/JXL-7273-2024; Roldán Castro, Manuel/L-6149-2014;
   Duran, Francisco/A-5373-2011; Vallecillo, Antonio/B-1884-2014
OI Roldán Castro, Manuel/0000-0003-2869-4828; Vallecillo,
   Antonio/0000-0002-8139-9986; Duran, Francisco/0000-0001-5864-8094
CR Abrial J.-R., 1996, B BOOK ASSIGNING PRO
   Ahrendt W., 2005, Softw. Syst. Model., V4, P32
   Alur R., 1990, Proceedings. Fifth Annual IEEE Symposium on Logic in Computer Science (90CH2897-7), P390, DOI 10.1109/LICS.1990.113764
   [Anonymous], OBJ CONSTR LANG OMG
   [Anonymous], SFCS 1977
   [Anonymous], HDB PHILOS LOGIC, DOI [10.1007/978-94-017-0464-9_1, DOI 10.1007/978-94-017-0464-9_1]
   [Anonymous], UN MOD LANG OMG UML
   Beckert B., 2007, LECT NOTES COMPUTER, V4334
   Borovansky P, 2002, THEOR COMPUT SCI, V285, P155, DOI 10.1016/S0304-3975(01)00358-9
   BOROVANSKY P, 1998, ELAN V 3 3 USER MANU
   Bradfield J, 2002, LECT NOTES COMPUT SC, V2306, P203
   Bravenboer Martin, 2006, STRATEGO XT TUTORIAL
   Clarke EM, 1999, MODEL CHECKING, P1
   Clarke L. A., 2006, Software Engineering Notes, V31, P25, DOI 10.1145/1127878.1127900
   CLARKE LA, 2006, ACM SIGSOFT SOFTWARE, V31, P25
   Clavel M, 2002, THEOR COMPUT SCI, V285, P187, DOI 10.1016/S0304-3975(01)00359-0
   Clavel M, 1999, LECT NOTES COMPUT SC, V1709, P1684
   CLAVEL M, 2008, MAUDE 2 4 MANUAL
   Clavel M., 2007, Lecture Notes in Computer Science
   Conrad S, 2001, UNIFIED MODELING LAN, P151
   Derrick J, 2004, LECT NOTES COMPUT SC, V3116, P117
   Derrick J, 2008, LECT NOTES COMPUT SC, V5238, P280
   DISTEFANO D, 2000, IFIP C P, P305
   Durán F, 2005, COMPUT STAND INTER, V27, P597, DOI 10.1016/j.csi.2004.10.008
   Durán F, 2003, THEOR COMPUT SCI, V309, P357, DOI 10.1016/S0304-3975(03)00312-8
   DURAN F, 2007, PRICE GOING METALEVE
   DURAN F, 1998, ELECT NOTES THEORETI, V15, P185
   Durán F, 2005, ELECTRON NOTES THEOR, V117, P263, DOI 10.1016/j.entcs.2004.06.014
   Durán F, 2007, SCI COMPUT PROGRAM, V66, P125, DOI 10.1016/j.scico.2006.07.002
   Durán F, 2005, ELECTRON NOTES THEOR, V124, P25, DOI 10.1016/j.entcs.2004.07.013
   Eker S., 2002, ELECT NOTES THEORETI
   Fitzgerald J., 1998, Modelling Systems: Practical Tools and Techniques for Software Development, V1st
   FLAKE S, 2002, LNCS, V2460, P179
   Goguen J., 2000, Software Engineering with OBJ: Algebraic Specification in Action
   Havelund K, 2001, 16TH ANNUAL INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING (ASE 2001), PROCEEDINGS, P135, DOI 10.1109/ASE.2001.989799
   HAVELUND K, 2001, ELECT NOTES THEORETI, V55
   HAVELUND K, 2005, J AUTOMATED SOFTWARE, V12, P151
   Hewitt M. A., 1997, ZUM '97: The Z Formal Specification Notation. 10th International Conference of Z Users Proceedings, P37
   Holzmann Gerard J., 2003, The SPIN Model Checker
   HSIANG J, 1985, ARTIF INTELL, V25, P255, DOI 10.1016/0004-3702(85)90074-8
   JIA X, 2002, TUTORIAL ZANS
   Jones CB., 1990, SYSTEMATIC SOFTWARE
   Lano K., 1996, SPECIFICATION B INTR
   Martin C., 2005, PROC IACMAG TURIN, P441
   McComb T., 2003, 1 INT C SOFTW ENG FO
   Mellor SJ., 2002, EXECUTABLE UML FDN M
   MESEGUER J, 1992, THEOR COMPUT SCI, V96, P73, DOI 10.1016/0304-3975(92)90182-F
   Meseguer J, 1998, LECT NOTES COMPUT SC, V1376, P18
   RAMAKRISHNAN S, 1999, P WORKSH TEST DISTR
   RICHTERS M, 2001, LNCS, V2263, P43
   Spivey J. Michael, 1992, Z NOTATION
   Thati P, 2005, ELECTRON NOTES THEOR, V113, P145, DOI 10.1016/j.entcs.2004.01.029
   UTTING M, 2005, JAZA USER MANUAL TUT
   Visser Eelco., 2001, REWRITING TECHNIQUES, V2051, P357, DOI DOI 10.1007/3-540-45127-7_27.URL
   ZIEMANN P, 2003, LECT NOTES COMPUTER, V2890
NR 55
TC 7
Z9 7
U1 0
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD AUG 15
PY 2009
VL 74
IS 10
BP 812
EP 835
DI 10.1016/j.scico.2009.03.003
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 482WF
UT WOS:000268920000002
DA 2024-07-18
ER

PT J
AU Kulk, GP
   Verhoef, C
AF Kulk, G. P.
   Verhoef, C.
TI Quantifying requirements volatility effects
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE requirements volatility; IT portfolio management; quantitative IT
   portfolio management; volatility benchmark; IT dashboard; requirements
   metric; requirements creep; scope creep; requirements scrap;
   requirements churn; compound monthly growth rate; volatility tolerance
   factor; pi-ratio; rho-ratio; requirements volatility dashboard
ID SOFTWARE; RELIABILITY; GOVERNANCE; PROJECT; SYSTEM; MODEL
AB In an organization operating in the bancassurance sector we identified a low-risk IT subportfolio of 84 IT projects comprising together 16,500 function points, each project varying in size and duration, for which we were able to quantify its requirements volatility. This representative portfolio stems from a much larger portfolio of IT projects. We calculated the volatility from the function point countings that were available to us. These figures were aggregated into a requirements volatility benchmark. We found that maximum requirements volatility rates depend on size and duration, which refutes currently known industrial averages. For instance, a monthly growth rate of 5% is considered a critical failure factor, but in our low-risk portfolio we found more than 21% of successful projects with a volatility larger than 5%. We proposed a mathematical model taking size and duration into account that provides a maximum healthy volatility rate that is more in line with the reality of low-risk IT portfolios. Based on the model, we proposed a tolerance factor expressing the maximal volatility tolerance for a project or portfolio. For a low-risk portfolio its empirically found tolerance is apparently acceptable, and values exceeding this tolerance are used to trigger IT decision makers. We derived two volatility ratios from this model, the pi-ratio and the rho-ratio. These ratios express how close the volatility of a project has approached the danger zone when requirements volatility reaches a critical failure rate. The volatility data of a governmental IT portfolio were juxtaposed to our baricassurance benchmark, immediately exposing a problematic project, which was corroborated by its actual failure. When function points are less common, e.g. in the embedded industry, we used daily source code size measures and illustrated how to govern the volatility of a software product line of a hardware manufacturer. With the three real-world portfolios we illustrated that our results serve the purpose of an early warning system for projects that are bound to fail due to excessive volatility. Moreover, we developed essential requirements volatility metrics that belong on an IT governance dashboard and presented such a volatility dashboard. (c) 2008 Elsevier B.V. All rights reserved.
C1 [Kulk, G. P.; Verhoef, C.] Vrije Univ Amsterdam, Dept Comp Sci, NL-1081 HV Amsterdam, Netherlands.
C3 Vrije Universiteit Amsterdam
RP Kulk, GP (corresponding author), Vrije Univ Amsterdam, Dept Comp Sci, De Boelelaan 1081A, NL-1081 HV Amsterdam, Netherlands.
EM erald@few.vu.nl; x@cs.vu.nl
FU Dutch joint Academic and Commercial Quality Research & Development
   (Jacquard) program [638.004.405]
FX This research received partial support by the Dutch joint Academic and
   Commercial Quality Research & Development (Jacquard) program on Software
   Engineering Research via contract 638.004.405 Equity: Exploring
   Quantifiable Information Technology Yields and via contract 638.003.611
   Symbiosis: Synergy of managing business-IT-alignment, IT-sourcing and
   offshoring success in society. We like to thank a number of
   organizations that will remain anonymous for discussions on their
   requirements volatility.
CR ADAMO DA, 2007, P 1 IEEE INT C EXPL
   ALAN M, 1993, SOFTWARE REQUIREMENT
   Albrecht A.J., 1979, Em Proceedings of the Joint SHARE, GUIDE, and IBM Application Development Symposium, P83
   ALBRECHT AJ, 1983, IEEE T SOFTWARE ENG, V9, P639, DOI 10.1109/TSE.1983.235271
   [Anonymous], 1997, Requirements engineering: a good practice guide
   [Anonymous], ACM SIGSOFT Software Engineering Notes, DOI [DOI 10.1145/986710.986727, 10.1145/986710.986727]
   Anthes G., 1994, Computerworld, V28, P107
   Arranga E, 2000, IEEE SOFTWARE, V17, P70
   Barry C, 2003, INFORM SOFTWARE TECH, V45, P217, DOI 10.1016/S0950-5849(02)00207-0
   Boehm BW., 1981, Software Engineering Economics
   Brooks Frederick P., 1995, The mythical man-month
   Charette RN, 1996, IEEE SOFTWARE, V13, P110, DOI 10.1109/52.526838
   Corless RM, 1996, ADV COMPUT MATH, V5, P329, DOI 10.1007/BF02124750
   COSTELLO RJ, 1995, J SYST SOFTWARE, V29, P39, DOI 10.1016/0164-1212(94)00127-9
   DONALD CG, 1989, EXPLORING REQUIREMEN
   Dreger J.B., 1989, FUNCTION POINT ANAL
   Euler L., 1783, ACTA ACAD SCI IMPERI
   *FAA, BLUEPR NAS MOD 2002
   Faust D, 2003, SOFTWARE PRACT EXPER, V33, P933, DOI 10.1002/spe.530
   Fraser RG, 2005, COMPUT METH PROG BIO, V79, P97, DOI 10.1016/j.cmpb.2005.01.002
   FREDERICK T, 1992, RELIABILITY MEASUREM, V9, P13
   Garmus David., 2001, AW INFORMAT
   GERALD L, 2005, GAO05331
   GERALD M, 1995, AM PROGRAM, V8, P19
   Glass R.L., 1998, SOFTWARE RUNAWAYS
   GLASS RL, 1981, IEEE T SOFTWARE ENG, V7, P162, DOI 10.1109/TSE.1981.230831
   HAMMER TF, 1998, CROSSTALK J DEFE DEC, P20
   Harker S., 1993, P IEEE INT S REQUIRE, P266, DOI DOI 10.1109/ISRE.1993.324847
   HARRY M, 2003, P INT C SOFTW MAINT, P190
   Henry J., 1993, Proceedings of the 1993 ACM conference on Computer science, P346
   Houston DX, 2001, J SYST SOFTWARE, V59, P247, DOI 10.1016/S0164-1212(01)00066-8
   *INT FUNCT POINT U, 2003, 209262003 ISOIEC INT
   Jackson M., 1995, SOFTWARE REQUIREMENT
   Jalote P, 2004, J SYST SOFTWARE, V70, P117, DOI [10.1016/S0164-1212(03)00010-4, 10.1016/S0164-1212(02)00010-4]
   JEFFERY DR, 1993, IEEE T SOFTWARE ENG, V19, P529, DOI 10.1109/32.232016
   Jones C, 1996, COMPUTER, V29, P92, DOI 10.1109/2.507640
   JONES C, 2000, INFORM TECHNOLOGY SE
   JONES C, 2001, CONFLICT LITIGATION
   Jones C., 1996, Patterns of software system failure and success
   JONES C, 1998, YEAR 2000 SOFTWARE P
   Jones C., 1996, APPL SOFTWARE MEASUR
   Jones C., 2007, Estimating Software Costs: Bringing Realism To Estimating
   Karl E, 2003, WIEGERS SOFTWARE REQ
   KEMERER CF, 1993, COMMUN ACM, V36, P85, DOI 10.1145/151220.151230
   KEMERER CF, 1992, IEEE T SOFTWARE ENG, V18, P1011, DOI 10.1109/32.177370
   Kerr D, 2006, COMPUT ELECTRON AGR, V50, P61, DOI 10.1016/j.compag.2005.09.001
   Kettunen P, 2005, INFORM SOFTWARE TECH, V47, P587, DOI 10.1016/j.infsof.2004.11.001
   Kotonya G., 1998, Requirements engineering: processes and techniques
   Lambert JH., 1758, Acta Helv. Phys.-Math.-Anat.-Bot.-Med, V3, P128
   Layman L, 2006, INFORM SOFTWARE TECH, V48, P781, DOI 10.1016/j.infsof.2006.01.004
   Leffingwell D., 1997, American Programmer, V10, P13
   Loconsole A, 2005, 12TH ASIA-PACIFIC SOFTWARE ENGINEERING CONFERENCE, PROCEEDINGS, P249, DOI 10.1109/APSEC.2005.38
   LOCONSOLE A, 2007, THESIS UMEA U
   Lorenzi NM, 2003, INT J MED INFORM, V69, P197, DOI 10.1016/S1386-5056(02)00105-3
   Malaiya Y., 1998, P 10 INT S SOFTWARE, P285
   MARK O, 1995, GAORCED95175FS
   Mendes E., 2002, IEE Proceedings-Software, V149, P86, DOI 10.1049/ip-sen:20020337
   Nurmuliani N, 2004, 2004 AUSTRALIAN SOFTWARE ENGINEERING CONFERENCE, PROCEEDINGS, P28, DOI 10.1109/ASWEC.2004.1290455
   Pacioli Luca., Summa de Arithmetica Geometria Proportioni et Proportionalita
   PETERS RJ, 2007, QUANTIFYING YIELD RI
   Putnam L., 1992, MEASURES EXCELLENCE
   PUTNAM LH, 1984, P INT SOC PAR AN 6 A, V3, P443
   Ramos I, 2005, INFORM SOFTWARE TECH, V47, P479, DOI 10.1016/j.infsof.2004.09.014
   ROBERTSON S, 2004, REQUIREMENTS LED PRO
   Robertson S., 2006, Mastering the Requirements Process
   ROSENBERG L, 1996, P EUR SPAC AG SOFTW
   Ross SA., 2000, FUNDAMENTALS CORPORA, V5th edn
   STAPLETON J, 1997, DSDM DYNAMIC SYSTEM
   Stapleton Jennifer., 2003, DSDM: Business focused development
   STARK G, 1998, CROSSTALK J DEFE DEC, P11
   Stark GE, 1999, J SOFTW MAINT-RES PR, V11, P293, DOI 10.1002/(SICI)1096-908X(199909/10)11:5<293::AID-SMR198>3.0.CO;2-R
   Steele MJ, 2002, PROCEEDINGS OF THE 2002 WINTER SIMULATION CONFERENCE, VOLS 1 AND 2, P747, DOI 10.1109/WSC.2002.1172956
   TAKAHASHI M, 1989, IEEE T SOFTWARE ENG, V15, P82, DOI 10.1109/32.21729
   TAVOLATO P, 1984, APPROACHES PROTOTYPI
   Tukey J.W., 1977, EXPLORATORY DATA ANA, V2
   Verhoef C, 2007, SCI COMPUT PROGRAM, V67, P247, DOI 10.1016/j.scico.2007.01.010
   Verhoef C, 2002, SCI COMPUT PROGRAM, V45, P1, DOI 10.1016/S0167-6423(02)00106-5
   VERHOEF C, 2004, QUANTIFYING SOFTWARE
   Watson HJ, 2004, DECIS SUPPORT SYST, V38, P435, DOI 10.1016/j.dss.2003.06.001
   Weigel AL, 2003, ACTA ASTRONAUT, V52, P551, DOI 10.1016/S0094-5765(02)00122-4
   Weinberg GeraldM., 1993, QUALITY SOFTWARE MAN, V2
   White A. S., 2006, International Journal of Project Management, V24, P127, DOI 10.1016/j.ijproman.2005.07.002
   *WIK, BANC
   ZOWGHI ND, 2002, P 9 AS PAC SOFTW ENG, P3
NR 84
TC 29
Z9 35
U1 0
U2 22
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD AUG 1
PY 2008
VL 72
IS 3
BP 136
EP 175
DI 10.1016/j.scico.2008.04.003
PG 40
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 349KB
UT WOS:000259278600002
OA Green Published, Green Submitted
DA 2024-07-18
ER

PT J
AU Dai, LR
   Cooper, K
AF Dai, Lirong
   Cooper, Kendra
TI Using FDAF to bridge the gap between enterprise and software
   architectures for security
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 5th International Workshop on System/Software Architectures (IWSSA 2006)
CY JUN 27, 2006
CL Las Vegas, NV
DE aspect-oriented design; enterprise architecture; software architecture;
   traceability
ID GOAL; REQUIREMENTS
AB The vision, strategies, and goals of enterprises involve numerous security issues; these stem from legal and business concerns. In turn, these goals are realized by the enterprise, organized into business groups, departments, divisions, etc. For example, a financial organization, such as a bank, needs to provide a range of services to their customers including private banking, commercial banking, international banking, and investment services. These services are provided by sub-organizations in the enterprise (i.e., the enterprise architecture); the sub-organizations are often partitioned along the business lines. For example, one sub-organization is responsible for private banking, another for commercial banking, etc. When providing financial services, there is a need to ensure that customer and account data are kept private, not corrupted, and safely backed up. Some of these needs may be realized in a collection of software applications. The problem of effectively designing secure software systems to meet an organization's needs is a critical part of their success. This paper focuses on the problem of how to bridge the gap between enterprise and software architectures for security using a set of UML based notations: the Business Modeling Extension for UML, standard UML use case diagrams, and the Formal Design Analysis Framework (FDAF). The Business Modeling Extension and standard UML are established approaches we adopt in this work. FDAF is an aspect-oriented approach that supports the design and analysis of nonfunctional properties for distributed, real-time systems at the software architecture level. An empirical study for an online banking system is used to illustrate the approach. (C) 2006 Elsevier B.V. All rights reserved.
C1 Univ Texas Dallas, Dallas, TX 75083 USA.
   Seattle Univ, Seattle, WA 98122 USA.
C3 University of Texas System; University of Texas Dallas; Seattle
   University
RP Cooper, K (corresponding author), Univ Texas Dallas, Mail Stn 31,POB 830688, Dallas, TX 75083 USA.
EM kcooper@utdallas.edu
CR [Anonymous], 1992, Object Oriented Software Engineering: A Use Case Driven Approach
   [Anonymous], NON FUNCTIONAL REQUI
   [Anonymous], J SOFTW SYST MODEL
   [Anonymous], 2003, Rational Unified Process Made Easy: A Practitioner's Guide to the RUP
   [Anonymous], UN MOD LANG SUP SPEC
   [Anonymous], 2003, The Spin Model Checker: Primer and Reference Manual
   Arbaugh B, 2002, COMPUTER, V35, P109, DOI 10.1109/2.982925
   BALSAMO S, 2002, P 3 INT WORKSH SOFTW, P190
   BRUCKER A, 2003, ELECT NOTES THEORETI, V80, P1
   Chung L, 2005, LECT NOTES COMPUT SC, V3647, P29
   Cooper K, 2006, J VISUAL LANG COMPUT, V17, P551, DOI 10.1016/j.jvlc.2006.10.005
   COOPER K, 2005, P INT C SOFTW ENG RE, V2, P905
   DAI L, 2006, 5 INT WORKSH SYST SO
   Dai L., 2005, THESIS U TEXAS DALLA
   DARIMONT R, 1997, INT C SOFTW ENG MAY, P612
   *ECRIM WATCH, 2004, COMP EM READ TEAM CO
   Eriksson H., 2000, BUSINESS MODELING UM
   FILMAN R, 2005, ASPECT ORIENTED SOFT
   Gamma E., 1994, Design patterns: Elements of reusable object-oriented software
   Giorgini P, 2005, ENG APPL ARTIF INTEL, V18, P159, DOI 10.1016/j.engappai.2004.11.017
   HOFSTEDE AHM, 1998, INFORM SOFTWARE TECH, V40, P51
   Hoogervorst J, 2004, INT J COOP INF SYST, V13, P213, DOI 10.1142/S021884300400095X
   *IEEE, 1998, 13201 IEEE IDEFO
   *ISO, 2000, 17799 ISO
   JANI D, 2005, EUR WORKSH SOFTW ARC
   Kim J, 2006, DATA KNOWL ENG, V58, P21, DOI 10.1016/j.datak.2005.05.006
   Lee J, 1999, IEEE SOFTWARE, V16, P92, DOI 10.1109/52.776956
   LIU D, 2003, 2 INT WORKSH SOFTW R
   Lodderstedt Torsten., 2002, UML 02 P 5 INT C UNI, P426, DOI [DOI 10.1007/3-540-45800-X_33, DOI 10.1007/3-540-45800-X33]
   LUCKHAM DC, 1995, IEEE T SOFTWARE ENG, V21, P336, DOI 10.1109/32.385971
   MONROE RT, 1998, CMUCS98163 SCH COMP
   2005, BANK MONTREAL FINANC
NR 32
TC 10
Z9 14
U1 0
U2 9
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD APR 15
PY 2007
VL 66
IS 1
BP 87
EP 102
DI 10.1016/j.scico.2006.10.010
PG 16
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 168GO
UT WOS:000246511500007
DA 2024-07-18
ER

PT J
AU Linden, I
   Jacquet, JM
   De Bosschere, K
   Brogi, A
AF Linden, I.
   Jacquet, J. -M.
   De Bosschere, K.
   Brogi, A.
TI On the expressiveness of timed coordination models
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 2nd International Workshop on Foundations of Languages and Software
   Architectures (FOCLASA 03)
CY SEP 02, 2003
CL -Coordination, Marseilles, FRANCE
HO -Coordination
DE coordination; time; expressiveness; embedding
ID PROCESS ALGEBRA; LANGUAGES
AB Although very simple and elegant, Linda-style coordination models lack the notion of time, and are therefore not able to precisely model real-life coordination applications. Nevertheless, industrial proposals such as TSpaces and JavaSpaces, inspired from Linda, have incorporated time constructs. This paper aims at a systematic study of the introduction of time in coordination models. It builds upon previous work to study in a coherent framework the expressiveness of Linda extended with two notions of time, relative time and absolute time, and, for each notion, two types of features. On the one hand, with respect to relative time, we describe two extensions: (i) a delay mechanism to postpone the execution of communication primitives, and (ii) explicit deadlines on the validity of tuples and on the duration of suspension of communication operations. On the other hand, for absolute time, we introduce: (iii) a wait primitive capable of waiting till an absolute point of time, and (iv) time intervals, both on tuples in the data store and on communication operations. This expressiveness study points out a most expressive language for which an implementation is described, thereby allowing for the implementation of all the languages presented in the paper. (c) 2006 Elsevier B.V. All rights reserved.
C1 Univ Namur, Inst Informat, Namur, Belgium.
   Univ Ghent, Elect Dept, Ghent, Belgium.
   Univ Pisa, Dept Comp Sci, Pisa, Italy.
C3 University of Namur; Ghent University; University of Pisa
RP Linden, I (corresponding author), Univ Namur, Inst Informat, Namur, Belgium.
EM ili@info.fundp.ac.be; jmj@info.fundp.ac.be; kdb@elis.ugent.be;
   brogi@di.unipi.it
RI Brogi, Antonio/HLQ-2040-2023; De Bosschere, Koen OM/P-6865-2014; Linden,
   Isabelle/H-5938-2015
OI Linden, Isabelle/0000-0001-8034-1857; Brogi, Antonio/0000-0003-2048-2468
CR Aceto L, 1996, ACTA INFORM, V33, P317, DOI 10.1007/s002360050047
   Andreoli J. M., 1991, New Generation Computing, V9, P445, DOI 10.1007/BF03037173
   [Anonymous], 1999, JavaSpaces Principles, Patterns, and Practice
   ARBAB F, 1993, CONCURRENCY-PRACT EX, V5, P23, DOI 10.1002/cpe.4330050103
   BAETA J, 2002, PROCESS ALGEBRA TIMI
   Baeten J. C. M., 1991, Formal Aspects of Computing, V3, P142, DOI 10.1007/BF01898401
   Baeten J.C.M., 1990, Cambridge Tracts in Theoretical Computer Science, V18
   Baeten JCM, 2004, LECT NOTES COMPUT SC, V3185, P59
   Banatre J., 1991, COMMUN ACM, V36, P98
   BERRY G, 1992, SCI COMPUTER PROGRAM, V19
   Boerger E., 2003, Abstract State Machines
   BOERGER E, 2003, FORM ASP COMPUT, V15, P1
   BROGI A, 1991, ACM T PROGR LANG SYS, V13, P99, DOI 10.1145/114005.102807
   Busi N, 2003, THEOR COMPUT SCI, V298, P529, DOI 10.1016/S0304-3975(02)00867-8
   BUSI N, 2000, LECT NOTES COMPUTER
   Cacciagrano DR, 2004, LECT NOTES COMPUT SC, V3185, P98
   CARRIERO N, 1989, COMMUN ACM, V32, P444, DOI 10.1145/63334.63337
   CASPI P, 1987, P POPL 87
   CIANCARINI P, 1994, NEW GENERAT COMPUT, V12, P251, DOI 10.1007/BF03037345
   Ciancarini P, 1997, LECT NOTES COMPUT SC, V1222, P213
   Cleaveland R., 1991, Proceedings of Sixth Annual IEEE Symposium on Logic in Computer Science (Cat. No.91CH3025-4), P110, DOI 10.1109/LICS.1991.151635
   Corradini F, 2001, ACTA INFORM, V37, P467, DOI 10.1007/PL00013313
   de Boer FS, 2000, INFORM COMPUT, V161, P45, DOI 10.1006/inco.1999.2879
   DEBOER FS, 1994, INFORM COMPUT, V108, P128, DOI 10.1006/inco.1994.1004
   DEBOSSCHERE K, 1996, LECT NOTES COMPUTER, V1061, P142
   DENICOLA R, 1998, IEEE T SOFTWARE ENG
   GELERNTER D, 1992, COMMUN ACM, V35, P96, DOI 10.1145/129630.129635
   Gelernter D., 1994, LECT NOTES COMPUTER, V924, P66
   GORRIERI R, 1995, THEOR COMPUT SCI, V140, P73, DOI 10.1016/0304-3975(94)00205-W
   HAREL D, 1987, SCI COMPUTER PROGRAM, V8
   HENNESSY M, 1995, INFORM COMPUT, V117, P221, DOI 10.1006/inco.1995.1041
   Hoare TonyC.A.R., 1985, COMMUNICATING SEQUEN
   HORITA E, 1994, INFORM COMPUT, V115, P125, DOI 10.1006/inco.1994.1095
   JACQUET JM, 1994, FUTURE GENER COMP SY, V10, P93, DOI 10.1016/0167-739X(94)90053-1
   JACQUET JM, 2000, LECT NOTES COMPUTER, V1906
   Linden I, 2004, LECT NOTES COMPUT SC, V2949, P232
   LINDEN I, 2005, EXPRESSIVENESS TIMED
   Linden I., 2004, ELECTRONICAL NOTES T, V97, P125, DOI [10.1016/j.entcs.2004.04.034, DOI 10.1016/J.ENTCS.2004.04.034]
   Maraninchi F., 1992, LECT NOTES COMPUTER, V630
   Milner Robin., 1989, INT SERIES COMPUTER
   MOLLER F, 1990, LECT NOTES COMPUT SC, V458, P401
   NICOLLIN X, 1994, INFORM COMPUT, V114, P131, DOI 10.1006/inco.1994.1083
   NIELSEN M, 2002, P 4 INT ACM SIGPLAN, P156
   PAPADOPOULOS GA, 1998, ADV COMPUTERS, V48
   Quemada J., 1993, Formal Aspects of Computing, V5, P224, DOI 10.1007/BF01211556
   REED GM, 1988, THEOR COMPUT SCI, V58, P249, DOI 10.1016/0304-3975(88)90030-8
   ROWSTRON A, 1997, P 30 HAW INT C SYST, V1, P379
   SARASWAT V, 1996, J SYMBOLIC COMPUTATI, V11
   SARASWAT V, 1994, NATO ASI, V131
   Saraswat Vijay A., 1993, Concurrent Constraint Programming
   Shapiro E. Y., 1992, P CONCUR 92, P486
   Smolka G, 1995, LECT NOTES COMPUT SC, V1000, P324
   Tini S., 1999, ELECT NOTES THEORETI
   TOLKSDORF R, 1996, LECT NOTES COMPUTER, V1061
   Wyckoff P., 1998, IBM SYSTEMS J, V37
NR 55
TC 9
Z9 9
U1 0
U2 0
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUL
PY 2006
VL 61
IS 2
BP 152
EP 187
DI 10.1016/j.scico.2005.10.011
PG 36
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 049MM
UT WOS:000238020600005
OA Green Published, Bronze
DA 2024-07-18
ER

PT J
AU Lera, I
   Juiz, C
   Puigjaner, R
AF Lera, Isaac
   Juiz, Carlos
   Puigjaner, Ramon
TI Performance-related ontologies and semantic web applications for on-line
   performance assessment of intelligent systems
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 4th International Workshop on Systems/Software Architectures
CY JUN, 2005
CL Las Vegas, NV
DE performance engineering; semantic web; ontology engineering
AB Several techniques and applications have been proposed to aid the decision taking process in the system performance domain. Most of these techniques have depicted the performance model of systems through annotations of performance measurements coming from specific software descriptive syntactical languages. However, the semantic representation of performance information provides the possibility of its ulterior machine-processable logical interpretation and therefore the applicability of inference rules about a particular domain. Moreover, ontologies ease the interchange and reuse of knowledge of particular domains, e.g. system performance. In this work, we propose a performance ontology together with the system performance analysis technique as an example of framework building for intelligent applications based on semantic web. The paper also shows the construction of performance rules through OWL to automatically infer new performance constraints and QoS knowledge about the system on execution. (c) 2006 Elsevier B.V. All rights reserved.
C1 Univ Illes Balears, Palma De Mallorca 07071, Spain.
C3 Universitat de les Illes Balears
RP Lera, I (corresponding author), Univ Illes Balears, Ctra Valldemossa,Km 7-5, Palma De Mallorca 07071, Spain.
EM isaac.lera@uib.es; cjuiz@uib.es; putxi@uib.es
RI Lera, Isaac ILC/E-5467-2011; Juiz, Carlos/L-4018-2014
OI Lera, Isaac ILC/0000-0002-2826-5970; Juiz, Carlos/0000-0001-6517-5395
CR [Anonymous], 1987, Logical Foundations of Artificial Intelligence
   Berners-Lee T., 2001, Scientific American May
   CORTELLESSA V, 2005, ACM P WOSP 05, P195
   *DAML, DARPA AG MARK LANG
   Davies J., 2003, Towards the semantic web
   Gruber T.R., 1993, A translation approach to portable ontology specifications
   Guarino N, 1998, FR ART INT, V46, P3
   HOBBS JR, DAML ONTOLOGY TIME P
   Jain R., ART COMPUTER SYSTEMS
   *JEN, JAV FRAM BUILD SEM W
   LERA I, 2005, LNCS
   LERA I, 2005, ACM P WOSP 05, P205
   *OMG, UML PROF SCHED
   *OWL, OWL WEB ONT LANG OV
   *OWL S, SEM MARK WEB SERV
   *OWL S, OWL S SUPPL WEB SERV
   PETRIU D, 2002, APPL UML PERFORMANCE
   *SWEDE, EXT FRAM INT VAR SEM
   SWRL, A Semantic Web Rule Language Combining OWL and RuleML
   *UML, UML PROF MOD QUAL SE
   USCHOLD M, 1995, AIAITR183
   Uschold M., 1996, KNOWLEDGE ENG REV, V11
   WANG XH, ONTOLOGY BASED CONTE
   *XML, XML SCHEM 2
   PROTEGE TOOL WHICH A
NR 25
TC 14
Z9 16
U1 0
U2 5
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN
PY 2006
VL 61
IS 1
BP 27
EP 37
DI 10.1016/j.scico.2005.11.003
PG 11
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 043QP
UT WOS:000237616700004
DA 2024-07-18
ER

PT J
AU Shaham, R
   Yahav, E
   Kolodner, EK
   Sagiv, M
AF Shaham, R
   Yahav, E
   Kolodner, EK
   Sagiv, M
TI Establishing local temporal heap safety properties with applications to
   compile-time memory management
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 10th International Static Analysis Symposium (SAS 2003)
CY JUN 11-13, 2003
CL SAN DIEGO, CA
SP ACM
DE abstract interpretation; memory liveness; garbage collection; shape
   analysis; safety properties; verification
ID GARBAGE COLLECTION
AB We present a framework for statically reasoning about temporal heap safety properties. We focus on local temporal heap safety properties, in which the verification process may be performed for a program object independently of other program objects. We apply our framework to produce new conservative static algorithms for compile-time memory management, which prove for certain program points that a memory object or a heap reference will not be needed further. These algorithms can be used for reducing space consumption of Java programs. We have implemented a prototype of our framework, and used it to verify compile-time memory management properties for several small, but interesting example programs, including JavaCard programs. (c) 2005 Elsevier B.V. All rights reserved.
C1 IBM Haifa Res Lab, IL-31905 Haifa, Israel.
   Tel Aviv Univ, Sch Comp Sci, IL-69978 Tel Aviv, Israel.
C3 International Business Machines (IBM); Tel Aviv University
RP IBM Haifa Res Lab, Univ Campus, IL-31905 Haifa, Israel.
EM ran.shaham@gmail.com; yahave@post.tau.ac.il; kolodner@il.ibm.com;
   msagiv@post.tau.ac.il
CR AGESEN O, 1998, SIGPLAN C PROG LANG, P269
   AIKEN A, 1995, SIGPLAN C PROGR LANG, P174
   APPEL AW, 1992, COMPILING CONTINUATI, P205
   Ball T., 2001, MSRTR200121
   BARTH JM, 1977, COMMUN ACM, V20, P513, DOI 10.1145/359636.359713
   BIRKEDAL L, 1996, S PRINC PROG LANG, P171
   BLANCHET B, 1998, C OBJ OR PROG SYST L, P20
   COLOCMBET T, 2000, S PRINC PROG LANG JA, P54
   Corbett J. C., 2000, Proceedings of the 2000 International Conference on Software Engineering. ICSE 2000 the New Millennium, P439, DOI 10.1109/ICSE.2000.870434
   Corbett JC, 2000, LECT NOTES COMPUT SC, V1885, P205
   Cousot P., 1979, 6 ACM S PRINCIPLES P, P269, DOI DOI 10.1145/567752.567778
   DAS M, 2002, SIGPLAN C PROG LANG, P57
   EMANI M, 1994, SIGPLAN C PROG LANG, P242
   Field J, 2003, LECT NOTES COMPUT SC, V2694, P439
   FOSTER I, 1991, P INT LOGIC PROGRAMM, P455
   HALLENBERG N, 2002, SIGPLAN C PROG LANG, P141
   HAMILTON GW, 1995, LEC NOTES COMP SCI, V637
   Henderson MS, 1999, KNEE, V6, P125, DOI 10.1016/S0968-0160(98)00036-2
   Hirzel M, 2002, ACM T PROGR LANG SYS, V24, P593, DOI 10.1145/586088.586089
   Holzmann GJ, 1997, IEEE T SOFTWARE ENG, V23, P279, DOI 10.1109/32.588521
   HORWITZ S, 1989, SIGPLAN C PROGR LANG, P28
   INOUE K, 1988, ACM T PROGR LANG SYS, V10, P555, DOI 10.1145/48022.48025
   Jones Richard., 1999, GARBAGE COLLECTION A
   Lev-Ami T, 2000, LECT NOTES COMPUT SC, V1824, P280
   Lev-Ami T., 2000, P ACM INT S SOFTWARE, P26
   Muchnick S., 1997, ADV COMPILER DESIGN
   RINETZKY N, 2001, LNCS, V2027, P133
   Ross JL, 1998, LECT NOTES COMPUT SC, V1381, P221, DOI 10.1007/BFb0053573
   Sagiv M, 2002, ACM T PROGR LANG SYS, V24, P217, DOI 10.1145/514188.514190
   Schneider F. B., 2000, ACM Transactions on Information and Systems Security, V3, P30, DOI 10.1145/353323.353382
   Shaham R, 2000, LECT NOTES COMPUT SC, V1781, P50
   SHAHAM R, 2001, SIGPLAN C PROG LANG, P104
   SHAHAM R, 2004, THESIS TEL AVIV U
   SHAUHAM R, 2002, INT S MEM MAN JUN 20, P171
   TOFTE M, 1994, S PRINC PROGR LANG, P188
   YAHAV E, 2003, 33904 TEL AVIV U
   YAHAV E, 2003, LNCS, V2618
NR 37
TC 3
Z9 5
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT
PY 2005
VL 58
IS 1-2
BP 264
EP 289
DI 10.1016/j.scico.2005.02.010
PG 26
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 968PY
UT WOS:000232175700010
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Jones, ND
AF Jones, ND
TI Transformation by interpreter specialisation
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
ID PROGRAMS
AB A program may be transformed by specialising an interpreter for the language in which it is written. Efficiency of the transformed program is determined by the efficiency of the interpreter's dynamic operations; the efficiency of its static operations is irrelevant, since all will be "specialised away". This approach is automatic (as automatic as the specialiser is); general, in that it applies to all of the interpreter's input programs; and flexible, in that a wide range of program transformations are achievable since the transformed program inherits the style of the interpreter.
   The chief practical challenge is understanding cause and effect: how should one write the interpreter so that specialisation produces efficient transformed programs? The core of this paper is a series of examples, both positive and negative, showing how the way the interpreter is written can influence the removal of interpretational overhead, and thus the efficiency and size of the target programs obtained by specialisation.
   In principle this method can speed up source programs by an arbitrary amount; the limit depends only on how efficiently the interpreter can be written. An example shows that a "memoising" interpreter can yield asymptotic speedup, transforming an exponential-time program into one running in polynomial time. A final analysis is made of the speed of the output programs in relation to the speed of the interpreter from which they are derived. It is argued that this relative speedup is linear, with a constant coefficient depending on the program being transformed. (C) 2004 Elsevier B.V. All rights reserved.
C1 Univ Copenhagen, DIKU, DK-1168 Copenhagen, Denmark.
C3 University of Copenhagen
RP Univ Copenhagen, DIKU, DK-1168 Copenhagen, Denmark.
EM neil@diku.dk
CR ACAR UA, 2003, P 30 ACM SIGPLAN SIG, P14
   AGER MS, 2003, P 2003 ACM SIGPLAN W, P3
   Anderson R J, 1992, Community Dent Health, V9 Suppl 1, P1
   [Anonymous], 1993, Partial Evaluation and Automatic Program Generation
   Asai K., 1996, LISP and Symbolic Computation, V9, P203, DOI 10.1007/BF01806113
   BIRD RS, 1977, COMMUN ACM, V20, P856, DOI 10.1145/359863.359889
   CHIN WN, 1996, SEL PAP INT SEM PART, P33
   CONSEL C, 1989, INFORM PROCESS LETT, V30, P79, DOI 10.1016/0020-0190(89)90113-0
   Danvy O, 1996, ACM T PROGR LANG SYS, V18, P730, DOI 10.1145/236114.236119
   DANVY O, 1996, LECT NOTES COMPUTER, V1110
   FELLEISEN M, 1992, THEOR COMPUT SCI, V103, P235, DOI 10.1016/0304-3975(92)90014-7
   Futamura Y., 1971, Systems, Compurters, Controls, V25, P45
   GALLAGHER J, 1988, NEW GENERAT COMPUT, V6, P159, DOI 10.1007/BF03037136
   GALLAGHER J, 1986, P ECAI 86, P109
   Glenstrup AJ, 1999, LECT NOTES COMPUT SC, V1706, P108
   GLUCK R, 1994, LNCS, V864, P432
   HATCLIFF J, 1999, LECT NOTES COMPUTER, V1706
   Jones N. D., 1996, Partial Evaluation. International Seminar. Selected Papers, P216
   JONES ND, 2002, ACM SIGPLAN SIGSOFT, P1
   Jorgensen J, 1999, LECT NOTES COMPUT SC, V1706, P83
   JORGENSEN J, 1991, THESIS DIKU U COPENH
   Leuschel M, 1999, LECT NOTES COMPUT SC, V1706, P271
   Leuschel M, 1999, LECT NOTES COMPUT SC, V1706, P155
   Liu Y. A., 2003, Higher-Order and Symbolic Computation, V16, P37, DOI 10.1023/A:1023068020483
   LLOYD JW, 1991, J LOGIC PROGRAM, V11, P217, DOI 10.1016/0743-1066(91)90027-M
   Masuhara H, 2003, LECT NOTES COMPUT SC, V2622, P46
   MOGENSEN T, 1998, LECT NOTES COMPUTER, V1706, P202
   MULLER G, 2003, T SYSTEMS MAN CYBERN, V33
   PU C, 1997, 1 CM SIGPLAN WORKSH
   Reynolds J. C., 1998, Higher-Order and Symbolic Computation, V11, P363, DOI 10.1023/A:1010027404223
   SAHLIN D, 1993, NEW GENERAT COMPUT, V12, P7, DOI 10.1007/BF03038271
   SCHMIDT DA, 1987, DENOTATIONAL SEMANTI
   SPERBER M, 1996, P 1996 ACM S APPL CO, P408
   THIBAULT S, 2003, IEEE T SOFTWARE ENG, V25, P363
   Thibault Scott, 2000, HIGHER ORDER SYMBOLI, V13
   Thiemann P, 1999, LECT NOTES COMPUT SC, V1706, P412
   TURCHIN VF, 1986, ACM T PROGR LANG SYS, V8, P292, DOI 10.1145/5956.5957
   van Deursen A, 2000, ACM SIGPLAN NOTICES, V35, P26, DOI 10.1145/352029.352035
   Winskel G., 1993, The Formal Semantics of Programming Languages
NR 39
TC 21
Z9 23
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD AUG
PY 2004
VL 52
IS 1-3
BP 307
EP 339
DI 10.1016/j.scico.2004.03.010
PG 33
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 841OS
UT WOS:000222940800010
DA 2024-07-18
ER

PT J
AU Lhoussaine, C
AF Lhoussaine, C
TI Type inference for a distributed π-calculus
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 12th European Symposium on Programming (ESOP 2003)
CY APR 05-13, 2003
CL Warsaw, POLAND
DE type inference; pi-calculus; migration; row; dependent types
ID CONSTRAINTS
AB We study the type inference problem for a distributed pi-calculus with explicit notions of locality and migration. Location types involve names that may be bound in terms. This requires an accurate new approach. We define a notion of principal typing. We provide a formal description of a sound and complete type inference algorithm. (C) 2003 Elsevier B.V. All rights reserved.
C1 Univ Sussex, Brighton, E Sussex, England.
C3 University of Sussex
RP Lhoussaine, C (corresponding author), Univ Sussex, Brighton, E Sussex, England.
EM c.lhoussaine@sussex.ac.uk
CR AMADIO R, 2000, 4080 INRIA ACMTOPLAS
   Amadio RM, 2000, THEOR COMPUT SCI, V240, P147, DOI 10.1016/S0304-3975(99)00230-3
   BERRY G, 1992, THEOR COMPUT SCI, V96, P217, DOI 10.1016/0304-3975(92)90185-I
   Cardelli L, 1998, LECT NOTES COMPUT SC, V1378, P140, DOI 10.1007/BFb0053547
   Cardelli L, 1994, THEORETICAL ASPECTS
   Fournet C., 1996, CONCUR '96: Concurrency Theory. 7th International Conference. Proceedings, P406
   Jategaonkar L. A., 1993, Fundamenta Informaticae, V19, P127
   LHOUSSAINE C, 2002, THESIS U PROVENCE
   Müller M, 1998, LECT NOTES COMPUT SC, V1538, P169
   Odersky M, 1999, THEOR PRACT OBJ SYST, V5, P35, DOI 10.1002/(SICI)1096-9942(199901/03)5:1<35::AID-TAPO4>3.0.CO;2-4
   PALSBERG M, 1994, LOGIC COMPUT SCI, P186
   Pottier F., 2000, Nordic Journal of Computing, V7, P312
   Pottier F, 2001, INFORM COMPUT, V170, P153, DOI 10.1006/inco.2000.2963
   Remy D., 1993, Theoretical Aspects Of Object-Oriented Programming. Types
   REMY D, 1993, 1869 INRIA
   RIELY J, 1999, IN PRESS 25 ACM SIGP, P93
   WAND M, 1987, S LOG COMP SCI ITH N, P37
   Wells JB, 2002, LECT NOTES COMPUT SC, V2380, P913
   Yoshida N, 2002, INFORM COMPUT, V174, P143, DOI 10.1006/inco.2002.3113
NR 19
TC 0
Z9 0
U1 0
U2 0
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR
PY 2004
VL 50
IS 1-3
BP 225
EP 251
DI 10.1016/j.scico.2003.12.003
PG 27
WC Computer Science, Software Engineering
WE Conference Proceedings Citation Index - Science (CPCI-S); Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 804AH
UT WOS:000220271100010
DA 2024-07-18
ER

PT J
AU Rowstron, AIT
AF Rowstron, AIT
TI Using mobile code to provide fault tolerance in tuple space based
   coordination languages
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 3rd International Conference on Coordination Languages and Architectures
CY 1999
CL AMSTERDAM, NETHERLANDS
DE Linda; WCL; tuple spaces; mobile objects; mobile coordination;
   transactions; mobile code; fault tolerance; agent wills
AB Tuple space based coordination languages suffer from poor fault tolerance to agent failure. Traditionally, transaction type mechanisms have been adopted in them to provide this type of fault tolerance. However, transactions change the semantics of the tuple space access primitives performed within them and do not provide a sufficient level of flexibility.
   We propose using mobile coordination, which utilises mobile code, as an alternative mechanism for providing better fault tolerance to agent failure. The use of mobile code is transparent to the application programmer. Mobile coordination provides the same level of fault tolerance as transactions, but it also introduces the concept of agent wills. This allows coordination patterns to be performed in a fault tolerant manner which cannot be performed in a fault tolerant manner using transactions.
   Mobile coordination is described in detail. The API for a prototype centralised implementation is presented. It is shown that mobile coordination provides better support and better performance than the traditional approach of using transactions. Implementation strategies for a distributed implementation are also discussed. (C) 2002 Elsevier Science B.V. All rights reserved.
C1 Microsoft Res Ltd, Cambridge CB3 0FB, England.
C3 Microsoft
RP Microsoft Res Ltd, 7 JJ Thomson Ave, Cambridge CB3 0FB, England.
EM antr@microsoft.com
CR ANDERSON B, 1991, LECT NOTES COMPUTER, V574
   Bettini L, 1998, SEVENTH IEEE INTERNATIONAL WORKSHOPS ON ENABLING TECHNOLOGIES: INFRASTRUCTURE FOR COLLABORATIVE ENTERPRISES (WET ICE '98), P110, DOI 10.1109/ENABL.1998.725680
   Busi N., 1997, LECT NOTES COMPUTER, V1282, P205
   Cabri G, 2000, IEEE INTERNET COMPUT, V4, P26, DOI 10.1109/4236.865084
   CARDELLI L, 1999, LECT NOTES COMPUTER, V1644, P10
   CARRIERO N, 1989, COMMUN ACM, V32, P444, DOI 10.1145/63334.63337
   CARRIERO N, 1987, YALEUDCSRR567
   Ciancarini P., 1998, World Wide Web, V1, P87, DOI 10.1023/A:1019255429322
   Ciancarini P, 1998, IEEE T SOFTWARE ENG, V24, P362, DOI 10.1109/32.685259
   DAY M, 1999, LECT NOTES COMPUTER, V1594, P417
   De Nicola R, 1998, IEEE T SOFTWARE ENG, V24, P315, DOI 10.1109/32.685256
   GELERNTER D, 1985, ACM T PROGR LANG SYS, V7, P80, DOI 10.1145/2363.2433
   JEONG K, 1994, P 13 S REL DISTR SYS
   Menezes R, 1998, P ANN HICSS, P216, DOI 10.1109/HICSS.1998.649216
   Omicini A., 1999, Autonomous Agents and Multi-Agent Systems, V2, P251, DOI 10.1023/A:1010060322135
   Picco G. P., 1999, Proceedings of the 1999 International Conference on Software Engineering (IEEE Cat. No.99CB37002), P368, DOI 10.1109/ICSE.1999.841027
   Reuter A, 1993, T PROCESSING CONCEPT
   Rowstron A., 1998, World Wide Web, V1, P167, DOI 10.1023/A:1019263731139
   Rowstron A, 1999, LECT NOTES COMPUT SC, V1686, P78
   Rowstron A., 1997, Coordination Languages and Models. Second International Conference COORDINATION '97. Proceedings, P426, DOI 10.1007/3-540-63383-9_98
   Rowstron A, 1999, LECT NOTES COMPUT SC, V1594, P196
   ROWSTRON A, 1997, HICSS 30, V1, P379
   ROWSTRON A, 1997, THESIS U YORK
   *SC ASS, 1996, PAR US GUID REF MAN
   *SUN MICR, 1999, JAV SPEC VERS 1 0 FI
   Wyckoff P, 1998, IBM SYST J, V37, P454, DOI 10.1147/sj.373.0454
NR 26
TC 3
Z9 3
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN-FEB
PY 2003
VL 46
IS 1-2
BP 137
EP 162
AR PII S0167-6423(02)00089-8
DI 10.1016/S0167-6423(02)00089-8
PG 26
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 633UT
UT WOS:000180302700006
OA Bronze
DA 2024-07-18
ER

PT J
AU Masuda, M
   Kameyama, Y
AF Masuda, Masahiro
   Kameyama, Yukiyoshi
TI Program generation meets program verification: A case study on
   number-theoretic transform
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Program generation; Static analysis; Functional correctness;
   Number-theoretic transform; Post-quantum cryptography
AB Program generation allows us to produce high-performance code specialized to each application domain. Although it has had great success in various domains, it remains to be seen whether it is effective for cryptography, where the correctness of programs is indispensable.This work presents a unified approach to program generation, analysis, and verification. Our target is Number-Theoretic Transform (NTT), a key building block of several candidates in Post Quantum Cryptography. We developed a program-generation framework based on the typed tagless-final style, and obtained highly efficient implementations with vector instructions such as AVX2 and AVX-512. The framework allows us to implement a program analyzer for integer overflow analysis. By combining a brute-force analysis with the standard static interval analysis, we have obtained more precise results than the state-of-the-art static analyzer, which let us find a new optimization.We have verified the generated program using the framework. While verifying the generated program all at once is intractable, we can separately verify the low-level components and the high-level algorithm, thanks to the compositional nature of our program generator. We have used an SMT solver for the former and a custom symbolic interpreter for the latter to prove the functional correctness of the generated program successfully.
C1 [Masuda, Masahiro; Kameyama, Yukiyoshi] Univ Tsukuba, Dept Comp Sci, Tsukuba 3058573, Japan.
C3 University of Tsukuba
RP Kameyama, Y (corresponding author), Univ Tsukuba, Dept Comp Sci, Tsukuba 3058573, Japan.
EM masa@logic.cs.tsukuba.ac.jp; kameyama@acm.org
FU JSPS [18H03218, 22H03563]
FX We thank Hiroshi Unno and Oleg Kiselyov for the helpful comments.
   Feedback from anonymous reviewers of FLOPS'22 and SCP helped us improve
   this paper and is greatly appreciated. The second author is supported in
   part by JSPS Grant-in-Aid for Scientific Research (B) 18H03218 and
   22H03563.
CR Akbarpour B, 2004, LECT NOTES COMPUT SC, V3312, P37
   Alkim E, 2016, PROCEEDINGS OF THE 25TH USENIX SECURITY SYMPOSIUM, P327
   Almeida J.B., 2023, IACR Cryptol. ePrint Arch., P215
   Almeida JB, 2017, CCS'17: PROCEEDINGS OF THE 2017 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P1807, DOI 10.1145/3133956.3134078
   Amin N, 2017, ACM SIGPLAN NOTICES, V52, P859, DOI 10.1145/3093333.3009867
   BARRETT P, 1987, LECT NOTES COMPUT SC, V263, P311
   Buhler D., 2017, Ph.D. thesis
   Capretta V., 2001, Theorem Proving in Higher Order Logics. 14th International Conference, TPHOLs 2001. Proceedings (Lecture Notes in Computer Science Vol.2152), P154
   Carette J, 2011, SCI COMPUT PROGRAM, V76, P349, DOI 10.1016/j.scico.2008.09.008
   Carette J, 2009, J FUNCT PROGRAM, V19, P509, DOI 10.1017/S0956796809007205
   Cormen T. H., 2009, Introduction to Algorithms, VSecond
   Erbsen A, 2019, P IEEE S SECUR PRIV, P1202, DOI 10.1109/SP.2019.00005
   frama-c, ANSI/ISO C specification language
   Gamboa RA, 2002, FORM METHOD SYST DES, V20, P91, DOI 10.1023/A:1012912614285
   Güneysu T, 2013, LECT NOTES COMPUT SC, V7932, P67, DOI 10.1007/978-3-642-38616-9_5
   Hwang V., 2022, I+ACR Trans. CryptographicHardware Embedded Syst., P718
   Kiselyov O., 2018, Foundations and Trends in Programming Languages, V5, P1, DOI [DOI 10.1561/2500000038, /10.1561/2500000038]
   Kiselyov O, 2017, ACM SIGPLAN NOTICES, V52, P285, DOI 10.1145/3093333.3009880
   Kiselyov Oleg., 2004, EMSOFT 04, P249
   Kiselyov Oleg, 2012, Generic and Indexed Programming, P130, DOI DOI 10.1007/978-3-642-32202-0_3
   Krishnaswami NR, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P379, DOI 10.1145/3314221.3314625
   Kroening D., 2016, Texts in Theoretical Computer Science. An EATCS Series, VSecond
   Longa P, 2016, LECT NOTES COMPUT SC, V10052, P124, DOI 10.1007/978-3-319-48965-0_8
   Lynbashevsky V, 2010, LECT NOTES COMPUT SC, V6110, P1, DOI 10.1145/2535925
   Masuda Masahiro, 2022, Functional and Logic Programming: 16th International Symposium, FLOPS 2022, Proceedings. Lecture Notes in Computer Science (13215), P133, DOI 10.1007/978-3-030-99461-7_8
   Masuda M., 2022, Master's thesis
   Masuda M, 2021, LECT NOTES COMPUT SC, V12835, P151, DOI 10.1007/978-3-030-85987-9_9
   MONTGOMERY PL, 1985, MATH COMPUT, V44, P519, DOI 10.1090/S0025-5718-1985-0777282-X
   Navas Jorge A., 2020, Software Verification. 12th International Conference, VSTTE 2020 and 13th International Workshop, NSV 2020. Revised Selected Papers. Lecture Notes in Computer Science (LNCS 12549), P144, DOI 10.1007/978-3-030-63618-0_9
   Protzenko J, 2020, P IEEE S SECUR PRIV, P983, DOI 10.1109/SP40000.2020.00114
   Seiler G., 2018, IACR Cryptol, V2018, P39
   Shaikhha A, 2018, ACM T DATABASE SYST, V43, DOI 10.1145/3183653
   Tokuda Ryo, 2023, PEPM 2023: Proceedings of the 2023 ACM SIGPLAN International Workshop on Partial Evaluation and Program Manipulation, P27, DOI 10.1145/3571786.3573017
   Tsai M.-H., 2022, Paper 2022/1116
   Wei GN, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360552
   Zinzindohoué JK, 2017, CCS'17: PROCEEDINGS OF THE 2017 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P1789, DOI 10.1145/3133956.3134043
NR 36
TC 0
Z9 0
U1 1
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN
PY 2024
VL 232
AR 103035
DI 10.1016/j.scico.2023.103035
EA OCT 2023
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA Y1HC6
UT WOS:001102838200001
OA hybrid
DA 2024-07-18
ER

PT J
AU Zhao, YX
   Gong, LA
   Yang, WH
   Zhou, Y
AF Zhao, Yaxin
   Gong, Lina
   Yang, Wenhua
   Zhou, Yu
TI How accessibility affects other quality attributes of software? A case
   study of GitHub
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Mining software repositories; Software accessibility; Quality
   attributes; Standard
AB Accessible design focuses on enabling as many people as possible to access software products and services, which has drawn extensive attention from software engineering researchers and developers. Currently, developers are improving the accessibility of software in a simple way, and researchers are putting much effort into investigating the characteristics of accessibility issues. No studies have explored the interaction of accessibility with other factors that affect software performance, although some researchers have found that these accessibility problems interact with other quality attributes (e.g., functionality, efficiency, and security) when they categorize accessibility issues. To fill this gap, we conducted the first comprehensive study to characterize symptoms, the violated standard, causes, and solutions for the accessibility issues along with quality attributes of software with 4,572 accessibility issues collected from GitHub. Specifically, we first investigated the symptoms of the interaction between the accessibility issues and software quality attributes. Second, we manually assessed accessibility issues where the interaction occurs to determine the violated standards. We then analyzed the causes of these interaction problems. Finally, we explored the commits that fix these accessibility issues along with quality attributes to find solutions. Our results indicate that: i) usability and functionality are the quality attributes that most frequently interact with accessibility, appearing more than 66% of the time; ii) 87% of the interaction issues violated Perceivable and Operable in the Web Content Accessibility Guidelines; iii) the main reason for these interaction problems is that UI Component Related (UCR) and Contrast Related (CR) issues show up more than 52% of the time.
C1 [Zhao, Yaxin; Gong, Lina; Yang, Wenhua; Zhou, Yu] Nanjing Univ Aeronaut & Astronaut, Coll Comp Sci & Technol, Nanjing, Peoples R China.
C3 Nanjing University of Aeronautics & Astronautics
RP Zhou, Y (corresponding author), Nanjing Univ Aeronaut & Astronaut, Coll Comp Sci & Technol, Nanjing, Peoples R China.
EM zhouyu@nuaa.edu.cn
RI zhao, yaxin/GXV-4914-2022
FU National Natural Science Foundation of China (NSFC) [61972197]; Natural
   Science Foundation of Jiangsu Province [BK20201292]; Collaborative
   Innovation Center of Novel Software Technology and Industrialization;
   NSFC [61972197, 62372232]
FX The authors are grateful for the valuable feedback from domain experts.
   This work was partially supported by the National Natural Science
   Foundation of China (NSFC, No. 61972197) , the Natural Science
   Foundation of Jiangsu Province (No. BK20201292) , the Collaborative
   Innovation Center of Novel Software Technology and Industrialization,
   and the NSFC numbers to No. 61972197, No. 62372232.
CR Al-Kilidar H, 2005, 2005 INTERNATIONAL SYMPOSIUM ON EMPIRICAL SOFTWARE ENGINEERING (ISESE), PROCEEDINGS, P122, DOI 10.1109/ISESE.2005.1541821
   Alshayban A, 2020, PROC INT CONF SOFTW, P1323, DOI 10.1145/3377811.3380392
   Androidguide, 2019, Android accessibility developer guidelines
   [Anonymous], 2018, It accessibility laws and policies
   [Anonymous], 2015, Ensuring Digital Accessibility through Process and Policy
   [Anonymous], 2019, ADAlaws
   [Anonymous], 2018, Mobile accessibility at w3c
   Appleguide, 2018, Apple accessibility developer guidelines
   Baker CM, 2020, SIGCSE 2020: PROCEEDINGS OF THE 51ST ACM TECHNICAL SYMPOSIUM ON COMPUTER SCIENCE EDUCATION, P107, DOI 10.1145/3328778.3366843
   Bambury A, 2018, BRIT J PHARMACOL, V175, P4430, DOI 10.1111/bph.14127
   Bevan N, 2015, LECT NOTES COMPUT SC, V9169, P143, DOI 10.1007/978-3-319-20901-2_13
   Bi Tingting, 2022, IEEE Transactions on Software Engineering, V48, P1834, DOI 10.1109/TSE.2020.3038881
   Bi TT, 2021, PROC IEEE INT CONF S, P390, DOI 10.1109/ICSME52107.2021.00041
   Billingham L, 2014, LIBR MANAGE, V35, P565, DOI 10.1108/LM-11-2013-0107
   Borges H, 2016, PROC IEEE INT CONF S, P334, DOI 10.1109/ICSME.2016.31
   Buhalis D, 2011, CURR ISSUES TOUR, V14, P145, DOI 10.1080/13683501003653361
   Cao Junming, 2022, ESEC/FSE 2022: Proceedings of the 30th ACM Joint European Software Engineering Conference and Symposium on the Foundations of Software Engineering, P357, DOI 10.1145/3540250.3549123
   Chen S, 2022, IEEE T SOFTWARE ENG, V48, P3954, DOI 10.1109/TSE.2021.3108162
   Chen Sen, 2021, IEEE Transactions on Software Engineering, P1
   Clegg-Vinell Raphael, 2014, P 11 WEB ALL C, P1
   Crabb M, 2019, CHI 2019: PROCEEDINGS OF THE 2019 CHI CONFERENCE ON HUMAN FACTORS IN COMPUTING SYSTEMS, DOI 10.1145/3290605.3300446
   Di Gregorio M, 2022, EMPIR SOFTW ENG, V27, DOI 10.1007/s10664-022-10182-x
   Easterbrook S., 2008, GUIDE ADV EMPIRICAL, P285, DOI [DOI 10.1007/978-1-84800-044-5_11, DOI 10.1007/978-1-84800-044-511]
   Espadinha C, 2011, DISABIL REHABIL, V33, P475, DOI 10.3109/09638288.2010.498554
   Fan YR, 2021, EMPIR SOFTW ENG, V26, DOI 10.1007/s10664-020-09916-6
   GSA, 2018, European accessibility act-Employment, Social Affairs, Inclusion
   Huang J, 2021, PROCEEDINGS OF THE 30TH USENIX SECURITY SYMPOSIUM, P3631
   Islam MJ, 2019, ESEC/FSE'2019: PROCEEDINGS OF THE 2019 27TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P510, DOI 10.1145/3338906.3338955
   ISO/IEC, 2011, iso-25000-standards
   Ivy Botchway., 2021, Compt. Sci. Ser., V19, P26
   Iwarsson S, 2003, DISABIL REHABIL, V25, P57, DOI 10.1080/0963828021000007969
   Jung HW, 2004, IEEE SOFTWARE, V21, P88, DOI 10.1109/MS.2004.1331309
   Kumar A., 2022, Academia, V29, P68
   Makkouk Tarek, 2022, P 44 INT C SOFTW ENG, P1
   Milne Lauren R, 2014, INT TECHN PERS DIS C, P166
   Mishra A, 2020, COMPUT SCI REV, V38, DOI 10.1016/j.cosrev.2020.100308
   Naranjo-Puentes S, 2022, EUR CON SFTWR MTNCE, P454, DOI 10.1109/SANER53432.2022.00061
   Patel R, 2020, CHI'20: EXTENDED ABSTRACTS OF THE 2020 CHI CONFERENCE ON HUMAN FACTORS IN COMPUTING SYSTEMS, DOI 10.1145/3334480.3383103
   Petrie H, 2007, CONFERENCE ON HUMAN FACTORS IN COMPUTING SYSTEMS, VOLS 1 AND 2, P397
   Putnam C., 2012, P 14 INT ACM SIGACCE, P87, DOI [DOI 10.1145/2384916.2384932, 10.1145/2384916, DOI 10.1145/2384916]
   Serra LC, 2015, PROCEDIA COMPUT SCI, V67, P348, DOI 10.1016/j.procs.2015.09.279
   Vendome C, 2019, PROC IEEE INT CONF S, P41, DOI 10.1109/ICSME.2019.00014
   Viera AJ, 2005, FAM MED, V37, P360
   Walker BN, 2017, LECT NOTES COMPUT SC, V10277, P113, DOI 10.1007/978-3-319-58706-6_9
   WCAG, 2018, WEB CONTENT ACCESSIB
   WCAG, 2019, Web content accessibility guidelines (WCAG) overview
   Zaina LAM, 2022, J SYST SOFTWARE, V186, DOI 10.1016/j.jss.2021.111213
NR 47
TC 0
Z9 0
U1 2
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN
PY 2024
VL 231
AR 103027
DI 10.1016/j.scico.2023.103027
EA SEP 2023
PG 18
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA T8AX2
UT WOS:001080165100001
DA 2024-07-18
ER

PT J
AU Azzeh, M
   Elsheikh, Y
   Nassif, AB
   Angelis, L
AF Azzeh, Mohammad
   Elsheikh, Yousef
   Nassif, Ali Bou
   Angelis, Lefteris
TI Examining the performance of kernel methods for software defect
   prediction based on support vector machine
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Software defect prediction; Kernel functions; Support vector machine;
   Information gain
ID RESEARCHER BIAS; MODEL; ALGORITHM; CRITIQUE; MODULES
AB Support Vector Machine (SVM) has been widely used to build software defect prediction models. Prior studies compared the accuracy of SVM to other machine learning algorithms but arrives at contradictory conclusions due to the use of different choices of kernel functions and metrics. Such a contradictory conclusion raises an important question about the performance of kernel functions, across different experimental conditions. To this end, the present study examines the impact and stability of four kernel functions with feature selection on the performance of SVM for software defect prediction. Strictly speaking, we examine the performance of nonlinear kernel functions against linear kernel function based on different experimental parameters such as data granularity, imbalance ratio of the dataset, and feature subsets. A large-scale study has been conducted using four kernel functions, ten feature subset selection thresholds based on the Information gain algorithm, 38 public datasets and one evaluation measure. This has resulted in 1520 experiments. The findings demonstrate that: 1) Not all nonlinear kernel functions significantly outperform linear, only RBF surpasses linear and other nonlinear kernel functions. 2) We don't have significant difference between kernel functions w.r.t. data granularity, we only found significant difference between RBF and other kernel function based on 'function' data granularity. 3) we also found that RBF can work significantly better than linear and other nonlinear function over datasets with very high and high imbalance ratios. 4) The performances of all kernel functions fluctuate over different feature subsets; However, using top 40% of the features would work best with all kernel functions. To conclude, we can recommend using SVM with RBF kernel for defects datasets because the performance of other kernel functions is limited.(c) 2022 Elsevier B.V. All rights reserved.
C1 [Azzeh, Mohammad] Princess Sumaya Univ Technol, Dept Data Sci, Amman, Jordan.
   [Elsheikh, Yousef] Appl Sci Private Univ, Dept Comp Sci, Amman, Jordan.
   [Nassif, Ali Bou] Univ Sharjah, Dept Comp Engn, Sharjah, U Arab Emirates.
   [Angelis, Lefteris] Aristotle Univ Thessaloniki, Sch Informat, Thessaloniki, Greece.
C3 Princess Sumaya University for Technology; University of Sharjah;
   Aristotle University of Thessaloniki
RP Azzeh, M (corresponding author), Princess Sumaya Univ Technol, Dept Data Sci, Amman, Jordan.
EM m.azzeh@psut.edu.jo; y_elsheikh@asu.edu.jo; anassif@sharjah.ac.ae;
   lef@csd.auth.gr
RI Azzeh, Mohammad/G-5472-2017
OI Azzeh, Mohammad/0000-0002-0323-6452
FU Princess Sumaya University for Technology, Amman, Jordan; Applied
   Science Private University, Amman, Jordan; University of Sharjah
FX Mohammad Azzeh is grateful to the Princess Sumaya University for
   Technology, Amman, Jordan, for the financial support granted to cover
   the publication fee of this research article.Yousef Elsheikh is grateful
   to the Applied Science Private University, Amman, Jordan, for the
   financial support granted to cover the publication fee of this research
   article.Ali Bou Nassif would like to thank the University of Sharjah for
   supporting this research.
CR Abu Alhija H., 2022, INT J SYST INNOV, V7, DOI [10.6977/IJoSI.202206_7(2).0003, DOI 10.6977/IJOSI.202206_7(2).0003]
   Agarwal S, 2014, PROCEEDINGS OF THE 2014 INTERNATIONAL CONFERENCE ON INFORMATION SYSTEMS AND COMPUTER NETWORKS (ISCON), P128, DOI 10.1109/ICISCON.2014.6965232
   Al-Jamimi H. A., 2011, 2011 5th Malaysian Conference in Software Engineering (MySEC), P251, DOI 10.1109/MySEC.2011.6140679
   Anbu M, 2019, CLUSTER COMPUT, V22, P10925, DOI 10.1007/s10586-017-1235-3
   Arar ÖF, 2017, APPL SOFT COMPUT, V59, P197, DOI 10.1016/j.asoc.2017.05.043
   Arora I, 2018, ADV INTELL SYST, V562, P51, DOI 10.1007/978-981-10-4603-2_6
   Bennin KE, 2019, EMPIR SOFTW ENG, V24, P602, DOI 10.1007/s10664-018-9633-6
   Bowes D, 2018, SOFTWARE QUAL J, V26, P525, DOI 10.1007/s11219-016-9353-3
   Cahill J, 2013, IEEE AUS SOFT ENGR, P211, DOI 10.1109/ASWEC.2013.33
   Catal C, 2009, EXPERT SYST APPL, V36, P7346, DOI 10.1016/j.eswa.2008.10.027
   Chakravarthy Adithi D., 2019, 2019 18th IEEE International Conference On Machine Learning And Applications (ICMLA), P1492, DOI 10.1109/ICMLA.2019.00245
   Chen X, 2019, INFORM SOFTWARE TECH, V106, P161, DOI 10.1016/j.infsof.2018.10.003
   Chen X, 2018, INFORM SOFTWARE TECH, V93, P1, DOI 10.1016/j.infsof.2017.08.004
   Cheung S.-C., 2011, P 19 ACM SIGSOFT S 1, P15
   Choeikiwong Teerawit, 2015, Information Science and Applications, P923, DOI 10.1007/978-3-662-46578-3_110
   D'Ambros M, 2012, EMPIR SOFTW ENG, V17, P531, DOI 10.1007/s10664-011-9173-9
   Di Martino Sergio, 2011, Product-Focused Software Process Improvement. Proceedings 12th International Conference, PROFES 2011, P247, DOI 10.1007/978-3-642-21843-9_20
   Elish KO, 2008, J SYST SOFTWARE, V81, P649, DOI 10.1016/j.jss.2007.07.040
   Fenton NE, 1999, IEEE T SOFTWARE ENG, V25, P675, DOI 10.1109/32.815326
   Graves T. L., 2002, READ, V26, P1
   Gray D, 2009, COMM COM INF SC, V43, P223
   Huda S, 2018, IEEE ACCESS, V6, P24184, DOI 10.1109/ACCESS.2018.2817572
   Khoshgoftaar TM, 2010, PROC INT C TOOLS ART, DOI 10.1109/ICTAI.2010.27
   Kumar L, 2018, J SYST SOFTWARE, V137, P686, DOI 10.1016/j.jss.2017.04.016
   Laradji IH, 2015, INFORM SOFTWARE TECH, V58, P388, DOI 10.1016/j.infsof.2014.07.005
   Lessmann S, 2008, IEEE T SOFTWARE ENG, V34, P485, DOI 10.1109/TSE.2008.35
   Li M, 2012, AUTOMAT SOFTW ENG, V19, P201, DOI 10.1007/s10515-011-0092-1
   Li ZQ, 2018, AUTOMAT SOFTW ENG, V25, P201, DOI 10.1007/s10515-017-0220-7
   Liu MX, 2014, IEEE T RELIAB, V63, P676, DOI 10.1109/TR.2014.2316951
   Ma Y, 2012, INFORM SOFTWARE TECH, V54, P248, DOI 10.1016/j.infsof.2011.09.007
   Mahmood Z, 2018, INFORM SOFTWARE TECH, V99, P148, DOI 10.1016/j.infsof.2018.02.003
   Manjula C, 2019, CLUSTER COMPUT, V22, pS9847, DOI 10.1007/s10586-018-1696-z
   Menzies T, 2010, AUTOMAT SOFTW ENG, V17, P375, DOI 10.1007/s10515-010-0069-5
   Menzies T, 2013, IEEE T SOFTWARE ENG, V39, P822, DOI 10.1109/TSE.2012.83
   Menzies Tim., 2012, PROMISE REPOSITORY E
   Nam J, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P382, DOI 10.1109/ICSE.2013.6606584
   Niu Y, 2018, INT J COMPUT SCI MAT, V9, P547, DOI 10.1504/IJCSM.2018.096327
   Okutan A, 2014, EMPIR SOFTW ENG, V19, P154, DOI 10.1007/s10664-012-9218-8
   Peters F, 2012, PROC INT CONF SOFTW, P189, DOI 10.1109/ICSE.2012.6227194
   Qiu SJ, 2019, INT J PATTERN RECOGN, V33, DOI 10.1142/S0218001419590377
   Qiu SJ, 2018, IET SOFTW, V12, P345, DOI 10.1049/iet-sen.2017.0111
   Rana ZA, 2014, LECT NOTES COMPUT SC, V8588, P637, DOI 10.1007/978-3-319-09333-8_69
   Ryu D, 2016, EMPIR SOFTW ENG, V21, P43, DOI 10.1007/s10664-014-9346-4
   SHEPPERD M, 1994, J SYST SOFTWARE, V26, P197, DOI 10.1016/0164-1212(94)90011-6
   Shepperd M, 2014, IEEE T SOFTWARE ENG, V40, P603, DOI 10.1109/TSE.2014.2322358
   Shepperd M, 2013, IEEE T SOFTWARE ENG, V39, P1208, DOI 10.1109/TSE.2013.11
   Shilton A, 2020, Arxiv, DOI arXiv:1805.07852
   Song QB, 2019, IEEE T SOFTWARE ENG, V45, P1253, DOI 10.1109/TSE.2018.2836442
   Tantithamthavorn C, 2020, IEEE T SOFTWARE ENG, V46, P1200, DOI 10.1109/TSE.2018.2876537
   Tantithamthavorn C, 2016, IEEE T SOFTWARE ENG, V42, P1092, DOI 10.1109/TSE.2016.2553030
   Tomar D, 2016, APPL COMPUT INTELL S, V2016, DOI 10.1155/2016/7658207
   Tong HN, 2018, INFORM SOFTWARE TECH, V96, P94, DOI 10.1016/j.infsof.2017.11.008
   Turhan B, 2009, EMPIR SOFTW ENG, V14, P540, DOI 10.1007/s10664-008-9103-7
   Wang S, 2013, IEEE T RELIAB, V62, P434, DOI 10.1109/TR.2013.2259203
   Wang S, 2020, IEEE T SOFTWARE ENG, V46, P1267, DOI 10.1109/TSE.2018.2877612
   Wang S, 2016, PROC INT CONF SOFTW, P297, DOI 10.1145/2884781.2884804
   Wang TJ, 2016, AUTOMAT SOFTW ENG, V23, P569, DOI 10.1007/s10515-015-0179-1
   Wei H, 2019, INFORM SCIENCES, V477, P399, DOI 10.1016/j.ins.2018.10.056
   Wu F, 2018, IEEE T RELIAB, V67, P581, DOI 10.1109/TR.2018.2804922
   Xu Z, 2019, INFORM SOFTWARE TECH, V106, P182, DOI 10.1016/j.infsof.2018.10.004
   Yang XX, 2018, IEEE T RELIAB, V67, P885, DOI 10.1109/TR.2018.2847353
   Yang XX, 2015, IEEE T RELIAB, V64, P234, DOI 10.1109/TR.2014.2370891
   Yu Q, 2019, IEEE ACCESS, V7, P35710, DOI 10.1109/ACCESS.2019.2895614
   Zhang HY, 2007, 13TH PACIFIC RIM INTERNATIONAL SYMPOSIUM ON DEPENDABLE COMPUTING, PROCEEDINGS, P93, DOI 10.1109/PRDC.2007.28
   Zhang ZW, 2017, AUTOMAT SOFTW ENG, V24, P47, DOI 10.1007/s10515-016-0194-x
   Zimmermann T., 2007, P ICSE 2007 WORK 3 I, DOI [10.1109/PROMISE.2007.10, DOI 10.1109/PROMISE.2007.10]
NR 66
TC 11
Z9 11
U1 3
U2 7
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR
PY 2023
VL 226
AR 102916
DI 10.1016/j.scico.2022.102916
EA JAN 2023
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 8F2XW
UT WOS:000919531400001
DA 2024-07-18
ER

PT J
AU Bacchiani, L
   Bravetti, M
   Giunti, M
   Mota, J
   Ravara, A
AF Bacchiani, Lorenzo
   Bravetti, Mario
   Giunti, Marco
   Mota, Joao
   Ravara, Antonio
TI A Java typestate checker supporting inheritance
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Behavioral types; Object-oriented programming; Subtyping; Type-checking;
   Typestates
ID LANGUAGE
AB Detecting programming errors in software is increasingly important, and building tools that help developers with this task is a crucial area of investigation on which the industry depends. Leveraging on the observation that in Object-Oriented Programming (OOP) it is natural to define stateful objects where the safe use of methods depends on their internal state, we present Java Typestate Checker (JATYC), a tool that verifies Java source code with respect to typestates. A typestate defines the object's states, the methods that can be called in each state, and the states resulting from the calls. The tool statically verifies that when a Java program runs: sequences of method calls obey to object's protocols; objects' protocols are completed; null-pointer exceptions are not raised; subclasses' instances respect the protocol of their superclasses. To the best of our knowledge, this is the first OOP tool that simultaneously tackles all these aspects. (C) 2022 Elsevier B.V. All rights reserved.
C1 [Bacchiani, Lorenzo; Bravetti, Mario] Univ Bologna, Bologna, Italy.
   [Bravetti, Mario] INRIA, Focus Team, Paris, France.
   [Giunti, Marco; Mota, Joao; Ravara, Antonio] NOVA LINCS, Costa Da Caparica, Portugal.
   [Giunti, Marco; Mota, Joao; Ravara, Antonio] NOVA Sch Sci & Technol, Caparica, Portugal.
C3 University of Bologna; Inria
RP Mota, J (corresponding author), NOVA Sch Sci & Technol, Caparica, Portugal.
EM jd.mota@campus.fct.unl.pt
RI Giunti, Marco/KIH-6588-2024; Ravara, António/G-1667-2016
OI Giunti, Marco/0000-0002-7582-0308; Ravara, António/0000-0001-8074-0380;
   Mota, Joao/0000-0003-3182-2245
FU EU [778233]; NOVA LINCS via the Portuguese Fundacao para a Ciencia e a
   Tecnologia [UIDB/04516/2020, UIDB/04516/2020/TRA/BIM/07]
FX This work was partially supported by the EU H2020 RISE programme under
   the Marie Sklodowska-Curie grant agreement No. 778233 (BehAPI) and by
   NOVA LINCS (UIDB/04516/2020 and UIDB/04516/2020/TRA/BIM/07) via the
   Portuguese Fundacao para a Ciencia e a Tecnologia.
CR Amin N, 2016, ACM SIGPLAN NOTICES, V51, P838, DOI 10.1145/3022671.2984004
   Anthony Charles, 2009, QCON C
   Bacchiani Lorenzo, 2021, Coordination Models and Languages. 23rd IFIP WG 6.1 International Conference, COORDINATION 2021 Held as Part of the 16th International Federated Conference on Distributed Computing Techniques, DisCoTec 2021. Proceedings. Lecture Notes in Computer Science (LNCS 12717), P90, DOI 10.1007/978-3-030-78142-2_6
   Beckman NE, 2011, LECT NOTES COMPUT SC, V6813, P2, DOI 10.1007/978-3-642-22655-7_2
   Boreale M, 2006, LECT NOTES COMPUT SC, V4184, P38
   Cardelli L, 1996, ACM COMPUT SURV, V28, P263, DOI 10.1145/234313.234418
   Cruz-Filipe L, 2014, FORM ASP COMPUT, V26, P865, DOI 10.1007/s00165-013-0284-5
   Garcia R, 2014, ACM T PROGR LANG SYS, V36, DOI 10.1145/2629609
   Gay S, 1999, LECT NOTES COMPUT SC, V1576, P74
   Honda K, 1998, LECT NOTES COMPUT SC, V1381, P122, DOI 10.1007/BFb0053567
   Hüttel H, 2016, ACM COMPUT SURV, V49, DOI 10.1145/2873052
   Ishtiaq S, 2001, ACM SIGPLAN NOTICES, V36, P14, DOI 10.1145/373243.375719
   Jacobs B, 2011, LECT NOTES COMPUT SC, V6617, P41, DOI 10.1007/978-3-642-20398-5_4
   Jemerov D., 2017, Kotlin in Action
   Kouzapas D, 2016, PROCEEDINGS OF THE 18TH INTERNATIONAL SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING (PPDP 2016), P146, DOI 10.1145/2967973.2968595
   Lange J, 2016, LECT NOTES COMPUT SC, V9636, P833, DOI 10.1007/978-3-662-49674-9_52
   Mota Joao, 2021, Coordination Models and Languages. 23rd IFIP WG 6.1 International Conference, COORDINATION 2021 Held as Part of the 16th International Federated Conference on Distributed Computing Techniques, DisCoTec 2021. Proceedings. Lecture Notes in Computer Science (LNCS 12717), P121, DOI 10.1007/978-3-030-78142-2_8
   Mota Joao, 2021, Master's thesis
   Papi Matthew M., 2008, INT S SOFT TEST AN I, P201
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Sunshine J., 2013, THESIS CARNEGIE MELL
   Tan L, 2014, EMPIR SOFTW ENG, V19, P1665, DOI 10.1007/s10664-013-9258-8
NR 22
TC 1
Z9 1
U1 2
U2 5
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 1
PY 2022
VL 221
AR 102844
DI 10.1016/j.scico.2022.102844
PG 8
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 6M8WI
UT WOS:000889143200003
OA hybrid, Green Published
DA 2024-07-18
ER

PT J
AU Burlò, CB
   Francalanza, A
   Scalas, A
   Trubiani, C
   Tuosto, E
AF Burlo, Christian Bartolo
   Francalanza, Adrian
   Scalas, Alceste
   Trubiani, Catia
   Tuosto, Emilio
TI PSTMonitor: Monitor synthesis from probabilistic session types
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Runtime verification; Probabilistic session types; Monitor synthesis
AB We present PSTMonitor, a tool for the run-time verification of quantitative specifications of message-passing applications, based on probabilistic session types. The key element of PSTMonitor is the detection of executions that deviate from expected probabilistic behaviour. Besides presenting PSTMonitor and its operation, the paper analyses its feasibility in terms of the runtime overheads it induces.(c) 2022 Elsevier B.V. All rights reserved.
C1 [Burlo, Christian Bartolo; Trubiani, Catia; Tuosto, Emilio] Gran Sasso Sci Inst, Laquila, Italy.
   [Francalanza, Adrian] Univ Malta, Dept Comp Sci, Msida, Malta.
   [Scalas, Alceste] Tech Univ Denmark, DTU Compute, Lyngby, Denmark.
C3 Gran Sasso Science Institute (GSSI); University of Malta; Technical
   University of Denmark
RP Burlò, CB (corresponding author), Gran Sasso Sci Inst, Laquila, Italy.
EM christian.bartolo@gssi.it
RI Trubiani, Catia/AAU-4040-2021
OI Trubiani, Catia/0000-0002-7675-6942; Bartolo Burlo,
   Christian/0000-0002-0016-086X
FU MoVeMnt [217987-051]; EU Horizon [778233]; MIUR [PRIN 2017FTXR7S IT
   MATTERS, 2017TWRCNB SEDUCE]; EU [830929]; Danish Industriens Fonds Cyber
   program [2020-0489]
FX The work has been partly supported by: the project MoVeMnt (No:
   217987-051) under the Icelandic Research Fund; the BehAPI project funded
   by the EU Horizon 2020 RISE under the Marie Sklodowska-Curie action (No:
   778233); the MIUR projects PRIN 2017FTXR7S IT MATTERS and 2017TWRCNB
   SEDUCE; the EU Horizon 2020 project 830929 CyberSec4Europe; the Danish
   Industriens Fonds Cyberprogram 2020-0489 Security-by-Design in Digital
   Denmark.
CR Aceto L, 2021, LECT NOTES COMPUT SC, V12649, P3, DOI 10.1007/978-3-030-71500-7_1
   Bartocci Ezio, 2018, Lectures on Runtime. Verification Introductory and Advanced Topics. LNCS 10457, P1, DOI 10.1007/978-3-319-75632-5_1
   Bartocci E, 2019, INT J SOFTW TOOLS TE, V21, P31, DOI 10.1007/s10009-017-0454-5
   Burlo Christian Bartolo, 2021, Coordination Models and Languages. 23rd IFIP WG 6.1 International Conference, COORDINATION 2021 Held as Part of the 16th International Federated Conference on Distributed Computing Techniques, DisCoTec 2021. Proceedings. Lecture Notes in Computer Science (LNCS 12717), P106, DOI 10.1007/978-3-030-78142-2_7
   Burlo C.B., 2021, DAGSTUHL ARTIFACTS S, V7, P1
   Burlo C.B., 2021, LIPICS, V2021
   Calinescu R, 2016, IEEE T RELIAB, V65, P107, DOI 10.1109/TR.2015.2452931
   Das A., 2020, ARXIV201109037ABS CO
   Debnath B, 2018, INT CON DISTR COMP S, P1052, DOI 10.1109/ICDCS.2018.00105
   Inverso Omar, 2020, 31 INT C CONCURRENCY, V14, P1
   Network Working Group, 2008, 5321 RFC
   Sammapun U, 2005, 11TH IEEE INTERNATIONAL CONFERENCE ON EMBEDDED AND REAL-TIME COMPUTING SYSTEMS AND APPLICATIONS, PROCEEDINGS, P147, DOI 10.1109/RTCSA.2005.84
   Scalas A., 2016, LIPICS, V56
   SecuritySpace, 2021, SECURITYSPACE MAIL M
   Wilson EB, 1927, J AM STAT ASSOC, V22, P209, DOI 10.2307/2276774
NR 15
TC 2
Z9 2
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 1
PY 2022
VL 222
AR 102847
DI 10.1016/j.scico.2022.102847
EA AUG 2022
PG 8
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 4N6NR
UT WOS:000854135700003
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Boykett, T
AF Boykett, Tim
TI Notes on the maximality of reversible gate sets under borrow and ancilla
   closure
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Reversible gates; Maximal closed classes; Permutation groups; Ancilla
   closure; Borrow closure
AB We investigate collections of reversible gates closed under parallel and serial composition, with and without borrow and ancilla closure. In order to better understand the structure of these collections of reversible gates, we investigate the lattice of closed sets and the maximal members of this lattice, that is, collections that are not all gates, but the addition of a single new gate will allow us to construct all gates. From previous work, we know the maximal closed sets over a finite alphabet.
   In this paper we extend this work to ancilla and borrow closure for reversible gates. Here we find several structural results, where we know that there are restricted possibilities for all maximal borrow and ancilla closed collections of gates. We determine several classes of maximal gates and determine their dual structures as weights as defined by Jerabek. These maximal closed collections of gates correspond to minimal weight permutation co-clones. Maximality has several applications, one of the interesting ones being that a gate in no maximal closed set must be universal. Thus an understanding of maximality is intimately tied to an understanding of universality. (C) 2021 Elsevier B.V. All rights reserved.
C1 [Boykett, Tim] Johannes Kepler Univ Linz, Inst Algebra, Linz, Austria.
   [Boykett, Tim] Times Up Res, Linz, Austria.
   [Boykett, Tim] Univ Appl Arts, Vienna, Austria.
C3 Johannes Kepler University Linz
RP Boykett, T (corresponding author), Johannes Kepler Univ Linz, Inst Algebra, Linz, Austria.; Boykett, T (corresponding author), Times Up Res, Linz, Austria.; Boykett, T (corresponding author), Univ Appl Arts, Vienna, Austria.
EM tim.boykett@jku.at
OI Boykett, Tim/0000-0002-3003-0927
FU Austrian Science Fund (FWF) [AR561, P29931]; Austrian Science Fund (FWF)
   [AR561] Funding Source: Austrian Science Fund (FWF)
FX Michael Guidici has helped extensively with understanding primitive
   permutations groups, for which I thank him greatly. The research has
   been supported by Austrian Science Fund (FWF) research projects AR561
   and P29931.
CR Aaronson S., 2015, ELECT C COMPUT COMPL, V66
   Boykett T., 2020, MAXIMALITY DUALITY C
   Boykett T, 2020, LECT NOTES COMPUT SC, V12227, P206, DOI 10.1007/978-3-030-52482-1_12
   Boykett T, 2019, J MULT-VALUED LOG S, V32, P565
   Boykett T, 2017, THEOR COMPUT SCI, V701, P27, DOI 10.1016/j.tcs.2016.12.032
   Brouwer A.E., 1989, DISTANCE REGULAR GRA, V18
   Cameron P.J., 2014, CHIC J THEOR COMPUT, P7
   Dixon J.D., 1996, GRADUATE TEXTS MATH, V163, DOI DOI 10.1007/978-1-4612-0731-3
   Gadouleau M, 2015, THEOR COMPUT SCI, V562, P129, DOI 10.1016/j.tcs.2014.09.040
   Jerábek E, 2018, ALGEBR UNIV, V79, DOI 10.1007/s00012-018-0499-7
   Kerkhoff S, 2014, ELECTRON NOTES THEOR, V303, P107, DOI 10.1016/j.entcs.2014.02.006
   Lafont Y, 2003, J PURE APPL ALGEBRA, V184, P257, DOI 10.1016/S0022-4049(03)00069-0
   LIEBECK MW, 1987, J ALGEBRA, V111, P365, DOI 10.1016/0021-8693(87)90223-7
   MORTIMER B, 1977, J LOND MATH SOC, V15, P445
   The GAP Group, 2019, GAPGROUPS ALG PROGR
   Toffoli T., 1980, Automata, Languages and Programming, Seventh Colloquium, P632
NR 16
TC 1
Z9 1
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 1
PY 2021
VL 212
AR 102714
DI 10.1016/j.scico.2021.102714
EA SEP 2021
PG 12
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA UW4HG
UT WOS:000700118500005
DA 2024-07-18
ER

PT J
AU Schewe, KD
   Ferrarotti, F
   González, S
AF Schewe, Klaus-Dieter
   Ferrarotti, Flavio
   Gonzalez, Senen
TI A logic for reflective ASMs
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Linguistic reflection; Abstract state machine; Logic; Tree algebra
ID LINGUISTIC REFLECTION; PARALLEL; VERIFICATION
AB Reflective algorithms are algorithms that can modify their own behaviour. Recently a behavioural theory of reflective algorithms has been developed, which shows that they are captured by reflective abstract state machines (rASMs). Reflective ASMs exploit extended states that include an updatable representation of the ASM signature and rules to be executed by the machine in that state. Updates to the representation of ASM signatures and rules are realised by means of a sophisticated tree algebra defined in the background of the rASM. In this article the theory is taken further by an extension of the logic of ASMs, by means of which we can formally express properties a reflective algorithm must satisfy. The proof theory associated with the logic then enables static verification of adaptive systems. The key is the introduction of terms that are interpreted by ASM rules stored in some location. We show that fragments of the logic with a fixed bound on the number of steps preserve completeness, whereas the full run-logic for rASMs becomes incomplete. (C) 2021 Elsevier B.V. All rights reserved.
C1 [Schewe, Klaus-Dieter] Zhejiang Univ, UIUC Inst, Haining, Peoples R China.
   [Ferrarotti, Flavio] Software Competence Ctr Hagenberg, Hagenberg, Austria.
   [Gonzalez, Senen] P&T Connected, Hagenberg, Austria.
C3 Zhejiang University; Softwarepark Hagenberg
RP Schewe, KD (corresponding author), Zhejiang Univ, UIUC Inst, Haining, Peoples R China.
EM kd.schewe@intl.zju.edu.cn; flavio.ferrarotti@scch.at; ulcango@gmail.com
OI Schewe, Klaus-Dieter/0000-0002-8309-1803; Ferrarotti,
   Flavio/0000-0003-2278-8233
FU BMVIT; BMDW; Province of Upper Austria [FFG-865891]
FX The research reported in this paper has been partly funded by BMVIT,
   BMDW, and the Province of Upper Austria in the frame of the COMET
   Programme FFG-865891 managed by FFG.
CR [Anonymous], 1993, GENETIC PROGRAMMING
   [Anonymous], 1998, TEXTS THEORETICAL CO
   [Anonymous], 2002, Membrane computing: An introduction, DOI 10.1007/978-3-642-56196-2
   Balasubramaniam D., 2004, P 1 ACM SIGSOFT WORK, P18
   BOOKER LB, 1989, ARTIF INTELL, V40, P235, DOI 10.1016/0004-3702(89)90050-7
   Borger E., 2003, ABSTRACT STATE MACHI
   Borger Egon., 2018, Modeling Companion for Software Practitioners
   Cooper R., 1995, PERSISTENT OBJECT SY, P332
   Dearle A., 2010, CORR ARXIV10063724 A
   Ehrenfeucht A, 2017, THEOR COMPUT SCI, V682, P79, DOI 10.1016/j.tcs.2016.12.031
   Ferrarotti F, 2019, SCI COMPUT PROGRAM, V184, DOI 10.1016/j.scico.2019.102319
   Ferrarotti F, 2018, ANN MATH ARTIF INTEL, V83, P321, DOI 10.1007/s10472-017-9569-3
   Ferrarotti F, 2018, LECT NOTES COMPUT SC, V10742, P117, DOI 10.1007/978-3-319-74313-4_10
   Ferrarotti F, 2017, LOG J IGPL, V25, P700, DOI 10.1093/jigpal/jzx021
   Ferrarotti F, 2016, THEOR COMPUT SCI, V649, P25, DOI 10.1016/j.tcs.2016.08.013
   Goldber D. E., 1988, Machine Learning, V3, P95, DOI 10.1023/A:1022602019183
   Goldberg D. E., 1989, GENETIC ALGORITHMS S
   Greenwood R. M., 2001, Software Process Technology. 8th European Workshop, EWSPT 2001. Proceedings (Lecture Notes in Computer Science Vol.2077), P27
   Harel D., 2000, Dynamic Logic, Foundations of Computing
   Harrison B., 2001, Semantics, Applications, and Implementation of Program Generation. Second International Workshop, SAIG 2001. Proceedings (Lecture Notes in Computer Science Vol.2196), P163
   Holland I.H., 1975, ADAPTATION NATURAL A
   Holland J. H., 2006, Journal of Systems Science and Complexity, V19, P1, DOI 10.1007/s11424-006-0001-z
   HOLLAND JH, 1962, J ACM, V9, P297, DOI 10.1145/321127.321128
   Holland JH, 2012, SCHOLARPEDIA, V7, P1482, DOI [DOI 10.4249/SCH0LARPEDIA.1482, DOI 10.4249/SCHOLARPEDIA.1482]
   Kirby G, 1998, SOFTWARE PRACT EXPER, V28, P1045, DOI 10.1002/(SICI)1097-024X(199808)28:10<1045::AID-SPE191>3.0.CO;2-F
   Kirby G.N.C., 1995, PERSISTENT OBJECT SY, P355
   Kirby G.N.C., 1992, THESIS THESIS
   Koza J.R., 2005, Search Methodologies, P127, DOI DOI 10.1007/0-387-28356-0_5
   Koza JR, 2004, SOFT COMPUT, V8, P318, DOI [10.1007/s00500-03-0288-9, 10.1007/s00500-003-0288-9]
   Leivant D., 1994, Handbook of Logic in Artificial Intelligence and Logic Programming, P229
   MAHFOUD SW, 1995, PARALLEL COMPUT, V21, P1, DOI 10.1016/0167-8191(94)00071-H
   Popplestone R., 2002, Formal Aspects of Computing, V13, P196, DOI 10.1007/s001650200009
   Riccobene E, 2014, LECT NOTES COMPUT SC, V8477, P204, DOI 10.1007/978-3-662-43652-3_17
   Schellhorn G, 2001, J UNIVERS COMPUT SCI, V7, P952
   Schewe Klaus-Dieter, 2020, Rigorous State-Based Methods. 7th International Conference, ABZ 2020. Proceedings. Lecture Notes in Computer Science (LNCS 12071), P93, DOI 10.1007/978-3-030-48077-6_7
   Schewe K.-D., 2016, COMPUTATIONAL MODELS, P365
   Schewe K.-D., 1994, 6 INT C MAN DAT COMA 6 INT C MAN DAT COMA
   Schewe K.-D., 2020, BEHAVIOURAL THEORY R
   Schewe K.-D., 2017, P AUSTRALASIAN COMPU
   Schewe KD, 2017, INT SYMP SYMB NUMERI, P30, DOI 10.1109/SYNASC.2017.00015
   Schewe KD, 2011, FRONT ARTIF INTEL AP, V225, P37, DOI 10.3233/978-1-60750-690-4-37
   Schewe KD, 2010, J UNIVERS COMPUT SCI, V16, P3043
   Sheard T., 1988, Proceedings 1988 International Conference on Computer Languages (IEEE Cat. No.88CH2647-6), P194, DOI 10.1109/ICCL.1988.13064
   Sheard T, 2004, ACM SIGPLAN NOTICES, V39, P119, DOI 10.1145/1052883.1052897
   Sheard T., 2001, Semantics, Applications, and Implementation of Program Generation. Second International Workshop, SAIG 2001. Proceedings (Lecture Notes in Computer Science Vol.2196), P2
   SHEARD T, 1989, ACM T DATABASE SYST, V14, P322, DOI 10.1145/68012.68014
   SHEARD T, 1992, COMPUT LANG, V17, P157, DOI 10.1016/0096-0551(92)90026-J
   Smith B. C., 1984, P 11 ACM SIGACT SIGP, P23, DOI [DOI 10.1145/800017.800513, 10.1145/800017.800513]
   Stark R., 2001, J UNIVERS COMPUT SCI, V7
   STEMPLE D, 1991, DATABASE PROGRAMMING LANGUAGES : BULK TYPES & PERSISTENT DATA, P357
   STEMPLE D, 1990, LECT NOTES COMPUT SC, V416, P269
   STEMPLE D, 2000, ESPRIT BAS RES SER, P158
   Taha W, 2000, THEOR COMPUT SCI, V248, P211, DOI 10.1016/S0304-3975(00)00053-0
   Tauber M., 2010, 2010 Fourth IEEE International Conference on Self-Adaptive and Self-Organizing Systems Workshop (SASOW), P9, DOI 10.1109/SASOW.2010.40
   VandenBussche J, 1996, J COMPUT SYST SCI, V52, P537, DOI 10.1006/jcss.1996.0040
NR 55
TC 0
Z9 0
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 1
PY 2021
VL 210
AR 102691
DI 10.1016/j.scico.2021.102691
EA JUL 2021
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA TH5WZ
UT WOS:000672161400002
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Pecorelli, F
   Di Nucci, D
AF Pecorelli, Fabiano
   Di Nucci, Dario
TI Adaptive selection of classifiers for bug prediction: A large-scale
   empirical analysis of its performances and a benchmark study
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Bug prediction; Within-project; Cross-project; Ensemble classifiers
ID SOFTWARE DEFECT PREDICTION; FAULT-PREDICTION; MODELS; FRAMEWORK;
   QUALITY; METRICS; IMPACT
AB Bug prediction aims at locating defective source code components relying on machine learning models. Although some previous work showed that selecting the machine-learning classifier is crucial, the results are contrasting. Therefore, several ensemble techniques, i.e., approaches able to mix the output of different classifiers, have been proposed. In this paper, we present a benchmark study in which we compare the performance of seven ensemble techniques on 21 open-source software projects. Our aim is twofold. On the one hand, we aim at bridging the limitations of previous empirical studies that compared the accuracy of ensemble approaches in bug prediction. On the other hand, our goal is to verify how ensemble techniques perform in different settings such as cross-and local-project defect prediction. Our empirical experimentation results show that ensemble techniques are not a silver bullet for bug prediction. In within-project bug prediction, using ensemble techniques improves the prediction performance with respect to the best stand-alone classifier. We confirm that the models based on VALIDATION AND VOTING achieve slightly better results. However, they are similar to those obtained by other ensemble techniques. Identifying buggy classes using external sources of information is still an open problem. In this setting, the use of ensemble techniques does not provide evident benefits with respect to stand-alone classifiers. The statistical analysis highlights that local and global models are mostly equivalent in terms of performance. Only one ensemble technique (i.e., ASCI) slightly exploits local learning to improve performance. (C) 2021 Elsevier B.V. All rights reserved.
C1 [Pecorelli, Fabiano] Univ Salerno, SeSa Lab, Salerno, Italy.
   [Di Nucci, Dario] Tilburg Univ, Jheronimus Acad Data Sci, Tilburg, Netherlands.
C3 University of Salerno; Tilburg University
RP Pecorelli, F (corresponding author), Univ Salerno, SeSa Lab, Salerno, Italy.
EM fpecorelli@unisa.it; d.dinucci@uvt.nl
RI Di Nucci, Dario/Y-9679-2019; Pecorelli, Fabiano/HKO-8789-2023
OI Di Nucci, Dario/0000-0002-3861-1902; Pecorelli,
   Fabiano/0000-0003-2446-4291
FU European Commission [825040 (RADON H2020)]
FX Dario is supported by the European Commission grants no. #825040 (RADON
   H2020).
CR Alpaydin E, 2014, ADAPT COMPUT MACH LE, P1
   [Anonymous], 1998, CORRELATION BASED FE
   Baeza-Yates Ricardo, 1999, MODERN INFORM RETRIE, V463
   Basili VR, 1996, IEEE T SOFTWARE ENG, V22, P751, DOI 10.1109/32.544352
   Bell RM, 2013, EMPIR SOFTW ENG, V18, P478, DOI 10.1007/s10664-011-9178-4
   Bell Robert M., 2011, P 7 INT C PRED MOD S
   Benni KE, 2018, IEEE T SOFTWARE ENG, V44, P534, DOI 10.1109/TSE.2017.2731766
   Bergstra J, 2012, J MACH LEARN RES, V13, P281
   Bettenburg N., 2012, 2012 9th IEEE Working Conference on Mining Software Repositories (MSR 2012), P60, DOI 10.1109/MSR.2012.6224300
   Bettenburg N, 2015, EMPIR SOFTW ENG, V20, P294, DOI 10.1007/s10664-013-9292-6
   Bezerra MER, 2008, INT FED INFO PROC, V276, P119
   Bezerra MER, 2007, IEEE IJCNN, P2874
   Bowes D, 2018, SOFTWARE QUAL J, V26, P525, DOI 10.1007/s11219-016-9353-3
   Bowes David., 2016, Proceedings of the 25th International Symposium on Software Testing and Analysis, P330, DOI DOI 10.1145/2931037.2931039
   Breiman L, 1996, MACH LEARN, V24, P123, DOI 10.1007/bf00058655
   Canfora G, 2013, 2013 IEEE SIXTH INTERNATIONAL CONFERENCE ON SOFTWARE TESTING, VERIFICATION AND VALIDATION (ICST 2013), P252, DOI 10.1109/ICST.2013.38
   Chawla NV, 2002, J ARTIF INTELL RES, V16, P321, DOI 10.1613/jair.953
   CHIDAMBER SR, 1994, IEEE T SOFTWARE ENG, V20, P476, DOI 10.1109/32.295895
   Cruz AEC, 2009, INT SYMP EMP SOFTWAR, P461
   D'Ambros M, 2012, EMPIR SOFTW ENG, V17, P531, DOI 10.1007/s10664-011-9173-9
   De Lucia A., 2020, ADAPTIVE SELECTION C
   Dean D., 2012, ICAC
   DEMPSTER AP, 1977, J ROY STAT SOC B MET, V39, P1, DOI 10.1111/j.2517-6161.1977.tb01600.x
   Di Nucci D, 2018, INT WORK REAL ARTIF, P48, DOI 10.1145/3194104.3194112
   Di Nucci D, 2018, IEEE T SOFTWARE ENG, V44, P5, DOI 10.1109/TSE.2017.2659747
   Di Nucci D, 2017, IEEE TETCI, V1, P202, DOI 10.1109/TETCI.2017.2699224
   Dietterich T, 1995, ACM COMPUT SURV, V27, P326, DOI 10.1145/212094.212114
   Elish MO, 2014, ARTIF INTELL REV, V42, P695, DOI 10.1007/s10462-012-9348-9
   Freund Y., 1996, Machine Learning. Proceedings of the Thirteenth International Conference (ICML '96), P148
   Ghotra B, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 1, P789, DOI 10.1109/ICSE.2015.91
   Graves TL, 2000, IEEE T SOFTWARE ENG, V26, P653, DOI 10.1109/32.859533
   Gray David, 2011, 15th Annual Conference on Evaluation & Assessment in Software Engineering (EASE 2011), P96, DOI 10.1049/ic.2011.0012
   Hall M., 2009, ACM SIGKDD Explor. Newsl, V11, P18, DOI DOI 10.1145/1656274.1656278
   Hall T, 2012, IEEE T SOFTWARE ENG, V38, P1276, DOI 10.1109/TSE.2011.103
   Hall T, 2011, IEEE SOFTWARE, V28, P96, DOI 10.1109/MS.2011.138
   HANLEY JA, 1982, RADIOLOGY, V143, P29, DOI 10.1148/radiology.143.1.7063747
   Hassan AE, 2009, PROC INT CONF SOFTW, P78, DOI 10.1109/ICSE.2009.5070510
   He P, 2015, INFORM SOFTWARE TECH, V59, P170, DOI 10.1016/j.infsof.2014.11.006
   Herbold S., 2013, P 9 INT C PREDICTIVE, P1
   Herbold S, 2020, IEEE WORK CONF MIN S, P611, DOI 10.1145/3379597.3387504
   Herbold S, 2018, IEEE T SOFTWARE ENG, V44, P811, DOI 10.1109/TSE.2017.2724538
   Herbold S, 2017, EMPIR SOFTW ENG, V22, P1866, DOI 10.1007/s10664-016-9468-y
   Jiang Y., 2008, DEFECTS 08 P 2008 WO, P16, DOI [DOI 10.1145/1390817.1390822, 10.1145/1390817.1390822]
   Jingxiu Yao, 2020, EASE2020. Proceedings of the Evaluation and Assessment in Software Engineering, P120, DOI 10.1145/3383219.3383232
   Jureczko M, 2010, P 6 INT C PREDICTIVE, DOI DOI 10.1145/1868328.1868342
   Khoshgoftaar T. M., 2010, 2010 Proceedings of 22nd International Conference on Tools with Artificial Intelligence (ICTAI 2010), P137, DOI 10.1109/ICTAI.2010.27
   Khoshgoftaar TM, 1996, SEVENTH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P364, DOI 10.1109/ISSRE.1996.558896
   Kim S, 2007, PROC INT CONF SOFTW, P489
   Kim S, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P481, DOI 10.1145/1985793.1985859
   Kittler J, 1998, IEEE T PATTERN ANAL, V20, P226, DOI 10.1109/34.667881
   Koning AJ, 2005, INT J FORECASTING, V21, P397, DOI 10.1016/j.ijforecast.2004.10.003
   Lanza M, 2016, IEEE SOFTWARE, V33, P102, DOI 10.1109/MS.2016.156
   Lessmann S, 2008, IEEE T SOFTWARE ENG, V34, P485, DOI 10.1109/TSE.2008.35
   Liu Y, 2010, IEEE T SOFTWARE ENG, V36, P852, DOI 10.1109/TSE.2010.51
   Lumpe M, 2012, INT J SOFTW ENG KNOW, V22, P621, DOI 10.1142/S0218194012500179
   Ma Y, 2012, INFORM SOFTWARE TECH, V54, P248, DOI 10.1016/j.infsof.2011.09.007
   Malhotra R, 2016, APPL SOFT COMPUT, V49, P1034, DOI 10.1016/j.asoc.2016.04.032
   Marcus A, 2008, IEEE T SOFTWARE ENG, V34, P287, DOI 10.1109/TSE.2007.70768
   Menzies T., 2017, The SEACRAFT Repository of Empirical Software Engineering Data
   Menzies T, 2013, IEEE T SOFTWARE ENG, V39, P822, DOI 10.1109/TSE.2012.83
   Moser R, 2008, ESEM'08: PROCEEDINGS OF THE 2008 ACM-IEEE INTERNATIONAL SYMPOSIUM ON EMPIRICAL SOFTWARE ENGINEERING AND MEASUREMENT, P309
   Nagappan N, 2005, PROC INT CONF SOFTW, P580, DOI 10.1145/1062455.1062558
   Nagappan N., 2008, P 16 ACM SIGSOFT INT, P1
   Nam J., 2017, IEEE Transactions on Software Engineering, V44, P874, DOI 10.1109/TSE.2017.2720603
   Nam J, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P382, DOI 10.1109/ICSE.2013.6606584
   NEMENYI P, 1962, BIOMETRICS, V18, P263
   Neuhaus S, 2007, CCS'07: PROCEEDINGS OF THE 14TH ACM CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P529
   Nikora AP, 2003, NINTH INTERNATIONAL SOFTWARE METRICS SYMPOSIUM, PROCEEDINGS, P338, DOI 10.1109/METRIC.2003.1232479
   O'Brien RM, 2007, QUAL QUANT, V41, P673, DOI 10.1007/s11135-006-9018-6
   Pai GJ, 2007, IEEE T SOFTWARE ENG, V33, P675, DOI [10.1109/TSE.2007.70722, 10.1109/TSE.2007.70722.]
   Palomba F, 2019, IEEE T SOFTWARE ENG, V45, P194, DOI 10.1109/TSE.2017.2770122
   Panichella A, 2014, 2014 SOFTWARE EVOLUTION WEEK - IEEE CONFERENCE ON SOFTWARE MAINTENANCE, REENGINEERING, AND REVERSE ENGINEERING (CSMR-WCRE), P164, DOI 10.1109/CSMR-WCRE.2014.6747166
   Pascarella Luca, 2018, Proceedings of the ACM on Human-Computer Interaction, V2, DOI 10.1145/3274404
   Pascarella L, 2019, J SYST SOFTWARE, V150, P22, DOI 10.1016/j.jss.2018.12.001
   Petric J, 2016, ESEM'16: PROCEEDINGS OF THE 10TH ACM/IEEE INTERNATIONAL SYMPOSIUM ON EMPIRICAL SOFTWARE ENGINEERING AND MEASUREMENT, DOI 10.1145/2961111.2962610
   Robnik-Sikonja M, 2004, LECT NOTES COMPUT SC, V3201, P359
   Rokach L, 2010, ARTIF INTELL REV, V33, P1, DOI 10.1007/s10462-009-9124-7
   Sammut C., 2011, Leave-One-Out Cross-Validation, DOI DOI 10.1007/978-0-387-30164-8469
   Scanniello G, 2013, IEEE INT CONF AUTOM, P640, DOI 10.1109/ASE.2013.6693126
   Shepperd M, 2013, IEEE T SOFTWARE ENG, V39, P1208, DOI 10.1109/TSE.2013.11
   Song QB, 2011, IEEE T SOFTWARE ENG, V37, P356, DOI 10.1109/TSE.2010.90
   STONE M, 1974, J R STAT SOC B, V36, P111, DOI 10.1111/j.2517-6161.1974.tb00994.x
   Tantithamthavorn C, 2020, IEEE T SOFTWARE ENG, V46, P1200, DOI 10.1109/TSE.2018.2876537
   Tantithamthavorn C, 2017, IEEE T SOFTWARE ENG, V43, P1, DOI 10.1109/TSE.2016.2584050
   Tantithamthavorn C, 2016, PROC INT CONF SOFTW, P321, DOI 10.1145/2884781.2884857
   Thomas SW, 2013, IEEE T SOFTWARE ENG, V39, P1427, DOI 10.1109/TSE.2013.27
   Tin Kam Ho, 1995, Proceedings of the Third International Conference on Document Analysis and Recognition, P278, DOI 10.1109/ICDAR.1995.598994
   Tosun A, 2008, ESEM'08: PROCEEDINGS OF THE 2008 ACM-IEEE INTERNATIONAL SYMPOSIUM ON EMPIRICAL SOFTWARE ENGINEERING AND MEASUREMENT, P318
   Nguyen TT, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P932, DOI 10.1145/1985793.1985950
   Turhan B, 2009, EMPIR SOFTW ENG, V14, P540, DOI 10.1007/s10664-008-9103-7
   Wang T., 2011, Journal of Information Computational Science, V8, P4241
   Watanabe S., 2008, P 4 INT WORKSH PRED, P19
   Wolf T, 2009, PROC INT CONF SOFTW, P1, DOI 10.1109/ICSE.2009.5070503
   WOLPERT DH, 1992, NEURAL NETWORKS, V5, P241, DOI 10.1016/S0893-6080(05)80023-1
   Xu Z, 2016, PROC INT SYMP SOFTW, P309, DOI 10.1109/ISSRE.2016.13
   Zhang F, 2017, EMPIR SOFTW ENG, V22, P3186, DOI 10.1007/s10664-017-9516-2
   Zhang F, 2016, PROC INT CONF SOFTW, P309, DOI 10.1145/2884781.2884839
   Zhang Y, 2015, P INT COMP SOFTW APP, P264, DOI 10.1109/COMPSAC.2015.58
   Zhimin He, 2013, 2013 ACM / IEEE International Symposium on Empirical Software Engineering and Measurement (ESEM), P45, DOI 10.1109/ESEM.2013.20
   Zimmerman T, 2009, 7TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P91, DOI 10.1145/1595696.1595713
   Zimmermann T., 2007, PROC 3 INT WORKSHOP
NR 101
TC 7
Z9 7
U1 0
U2 4
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAY 1
PY 2021
VL 205
AR 102611
DI 10.1016/j.scico.2021.102611
EA JAN 2021
PG 18
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA RC1OV
UT WOS:000632572100003
DA 2024-07-18
ER

PT J
AU Figueroa, I
   Leger, P
   Fukuda, H
AF Figueroa, Ismael
   Leger, Paul
   Fukuda, Hiroaki
TI Which monads Haskell developers use: An exploratory study
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Monads; Empirical study; Use of monads; Haskell; Hackage; Mining
   software repositories
AB Monads are a mechanism for embedding and reasoning about notions of computation such as mutable state, I/O, exceptions, and many others. Even though monads are technically language-agnostic, they are mostly associated with the Haskell language. Indeed, one could argue that the use of monads is one of the defining characteristic of the Haskell language. In practical terms, monadic programming in Haskell relies on the standard mtl package library, which provides eight core notions of computation: identity, error, list, state, reader, writer, RWS, and continuations. Despite their widespread use, we are not aware of any empirical investigations regarding which monads are the most used by developers. In this paper we present an empirical study that covers a snapshot of available packages in the Hackage repository-covering 85135 packages and more than five million Haskell files. To the best of our knowledge this is the first large-scale analysis of Hackage with regards to monads and their usage as dependencies. Our results show that around 30.8% of the packages depend on the mtl package, whereas only 1.2% depend on alternative, yet compatible implementations. Nevertheless, usage patterns for each specific monad remain similar both for mtl and alternatives. Finally, the state monad is by far the most popular one, although all of them are used. We also report on the distribution of packages that use mtl, regarding their category and stability level. (C) 2020 Elsevier B.V. All rights reserved.
C1 [Figueroa, Ismael] Univ Valparaiso, Ingn Informac & Control Gest, Valparaiso, Chile.
   [Leger, Paul] Univ Catolica Norte Coquimbo, Escuela Ingn, Coquimbo, Chile.
   [Fukuda, Hiroaki] Shibaura Inst Technol, Tokyo, Japan.
C3 Universidad de Valparaiso; Shibaura Institute of Technology
RP Figueroa, I (corresponding author), Univ Valparaiso, Ingn Informac & Control Gest, Valparaiso, Chile.
EM ismael.figueroa@uv.cl; pleger@ucn.cl; hiroaki@shibaura-it.ac.jp
RI Leger, Paul/Q-6174-2017; Figueroa, Ismael/O-6048-2017
OI Leger, Paul/0000-0003-0969-5139; Figueroa, Ismael/0000-0003-3661-4963
FU FONDECYT Postdoctoral Project [3150672]
FX This work is partially funded by FONDECYT Postdoctoral Project 3150672.
   We thank all the anonymous reviewers for their insightful comments.
CR [Anonymous], 1992, 19th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, DOI DOI 10.1145/143165.143169
   Bezirgiannis N., 2013, P 9 ACM SIGPLAN WORK, P47
   Callaú O, 2015, ACM SIGPLAN NOTICES, V50, P135, DOI 10.1145/2661088.2661091
   Callaú O, 2013, EMPIR SOFTW ENG, V18, P1156, DOI 10.1007/s10664-012-9203-2
   Casalnuovo C, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 1, P755, DOI 10.1109/ICSE.2015.88
   DIJKSTRA EW, 1968, COMMUN ACM, V11, P147, DOI 10.1145/362929.362947
   Figueroa I., 2017, ONLINE RESOURCES WHI
   Figueroa I, 2017, PROCEEDINGS OF THE 21ST BRAZILIAN SYMPOSIUM ON PROGRAMMING LANGUAGES (SBLP 2017), DOI 10.1145/3125374.3125385
   Figueroa I, 2016, SCI COMPUT PROGRAM, V119, P3, DOI 10.1016/j.scico.2015.11.010
   Hemmati H, 2013, IEEE WORK CONF MIN S, P343, DOI 10.1109/MSR.2013.6624048
   Liang Sheng, 1995, P 22 ACM SIGPLAN SIG, P333, DOI DOI 10.1145/199448.199528
   MOGGI E, 1991, INFORM COMPUT, V93, P55, DOI 10.1016/0890-5401(91)90052-4
   Nagappan M, 2015, 2015 10TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE 2015) PROCEEDINGS, P404, DOI 10.1145/2786805.2786834
   Robbes R, 2012, LECT NOTES COMPUT SC, V7313, P28, DOI 10.1007/978-3-642-31057-7_3
   Schrijvers T, 2011, ACM SIGPLAN NOTICES, V46, P32, DOI 10.1145/2034574.2034781
   Shaffer MJ, 2010, LOG ANAL, P61
   WADLER P, 1989, CONFERENCE RECORD OF THE SIXTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P60, DOI 10.1145/75277.75283
NR 17
TC 3
Z9 3
U1 1
U2 4
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 1
PY 2021
VL 201
AR 102523
DI 10.1016/j.scico.2020.102523
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA OS0ZN
UT WOS:000589893400005
DA 2024-07-18
ER

PT J
AU Meldrum, S
   Licorish, SA
   Owen, CA
   Savarimuthu, BTR
AF Meldrum, Sarah
   Licorish, Sherlock A.
   Owen, Caitlin A.
   Savarimuthu, Bastin Tony Roy
TI Understanding stack overflow code quality: A recommendation of caution
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Stack overflow; Code reliability and conformance to programming rules;
   Code readability; Code performance; Code security
ID REUSE; STACKOVERFLOW
AB Community Question and Answer (CQA) platforms use the power of online groups to solve problems, or gain information. While these websites host useful information, it is critical that the details provided on these platforms are of high quality, and that users can trust the information. This is particularly necessary for software development, given the ubiquitous use of software across all sections of contemporary society. Stack Overflow is the leading CQA platform for programmers, with a community comprising over 10 million contributors. While research confirms the popularity of Stack Overflow, concerns have been raised about the quality of answers that are provided to questions on Stack Overflow. Code snippets often contained in these answers have been investigated; however, the quality of these artefacts remains unclear. This could be problematic for the software engineering community, as evidence has shown that Stack Overflow snippets are frequently used in both open source and commercial software. This research fills this gap by evaluating the quality of code snippets on Stack Overflow. We explored various aspects of code snippet quality, including reliability and conformance to programming rules, readability, performance and security. Outcomes show variation in the quality of Stack Overflow code snippets for the different dimensions; however, overall, quality issues in Stack Overflow snippets were not always severe. Vigilance is encouraged for those reusing Stack Overflow code snippets. (C) 2020 Elsevier B.V. All rights reserved.
C1 [Meldrum, Sarah; Licorish, Sherlock A.; Owen, Caitlin A.; Savarimuthu, Bastin Tony Roy] Univ Otago, Dept Informat Sci, Dunedin, New Zealand.
C3 University of Otago
RP Licorish, SA (corresponding author), Univ Otago, Dept Informat Sci, Dunedin, New Zealand.
EM sarah-meldrum@outlook.com; sherlock.licorish@otago.ac.nz;
   oweca636@student.otago.ac.nz; tony.savarimuthu@otago.ac.nz
OI Licorish, Sherlock/0000-0001-7318-2421; Owen,
   Caitlin/0000-0002-4763-0005
FU University of Otago
FX We thank Stack Overflow for granting us access to the data that were
   analysed in this study. Thanks to the reviewers for their detailed and
   insightful comments on the early version of this work. This work is
   funded by a University of Otago Commerce Research Grant Award (CRG-2019)
   -accessed through the Otago Business School Research Committee.
CR Abdalkareem R, 2017, INFORM SOFTWARE TECH, V88, P148, DOI 10.1016/j.infsof.2017.04.005
   Acar Y, 2016, P IEEE S SECUR PRIV, P289, DOI 10.1109/SP.2016.25
   Ahmad Mashal, 2019, 2019 IEEE/ACM 16th International Conference on Mining Software Repositories (MSR), P250, DOI 10.1109/MSR.2019.00050
   Amir B, 2018, PROC IEEE ACM INT C, P344, DOI 10.1145/3183440.3195001
   Anand D, 2015, ADV INTELL SYST, V340, P639, DOI 10.1007/978-81-322-2247-7_65
   [Anonymous], 2002, Metrics and Models in Software Quality Engineering
   [Anonymous], 1969, CONTENT ANAL SOCIAL
   [Anonymous], 2011, P 2 INT WORKSHOP WEB
   Asaduzzaman M, 2013, IEEE WORK CONF MIN S, P97, DOI 10.1109/MSR.2013.6624015
   Ayewah N., 2010, Proceedings of the 19th international symposium on Software testing and analysis, P241
   Bakota T., 2011, 2011 IEEE 27th International Conference on Software Maintenance, P243, DOI 10.1109/ICSM.2011.6080791
   Baltes S, 2017, PROC IEEE ACM INT C, P161, DOI 10.1109/ICSE-C.2017.99
   Bauer P, 2014, 2014 14TH INTERNATIONAL WORKSHOP ON ACOUSTIC SIGNAL ENHANCEMENT (IWAENC), P1, DOI 10.1109/IWAENC.2014.6953304
   Bi F., 2016, NISSAN APP DEV BUSTE
   Buse R.P., 2008, Proceedings of the 2008 International Symposium on Software Testing and Analysis, P121
   Buse RPL, 2010, IEEE T SOFTWARE ENG, V36, P546, DOI 10.1109/TSE.2009.70
   CAST, 2019, SOFTW INT DIG LEAD
   Cavusoglu H., 2015, P ACM C COMPUTER SUP, V2015, P171, DOI DOI 10.1145/2685553.2698999
   Chen FX, 2015, 2015 10TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE 2015) PROCEEDINGS, P320, DOI 10.1145/2786805.2786819
   Cohen J., 1988, STAT POWER ANAL BEHA
   Cunningham W., 1993, OOPS Messenger, V4, P29
   di Biase M, 2019, 2019 IEEE/ACM INTERNATIONAL CONFERENCE ON TECHNICAL DEBT (TECHDEBT 2019), P113, DOI 10.1109/TechDebt.2019.00030
   Duijn M, 2015, 12TH WORKING CONFERENCE ON MINING SOFTWARE REPOSITORIES (MSR 2015), P410, DOI 10.1109/MSR.2015.51
   Ercan S, 2015, 12TH WORKING CONFERENCE ON MINING SOFTWARE REPOSITORIES (MSR 2015), P442, DOI 10.1109/MSR.2015.59
   Ernst NA, 2015, 2015 10TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE 2015) PROCEEDINGS, P50, DOI 10.1145/2786805.2786848
   Ferreira Campos Uriel, 2019, 2019 IEEE/ACM 16th International Conference on Mining Software Repositories (MSR), P195, DOI 10.1109/MSR.2019.00039
   Fischer F, 2017, P IEEE S SECUR PRIV, P121, DOI 10.1109/SP.2017.31
   Ginsca AL, 2013, P 2013 WORKSH DAT DR, P25, DOI [10.1145/2513577.2513579, DOI 10.1145/2513577.2513579]
   Haefliger S, 2008, MANAGE SCI, V54, P180, DOI 10.1287/mnsc.1070.0748
   Heitlager I, 2007, QUATIC 2007: 6TH INTERNATIONAL CONFERENCE ON THE QUALITY OF INFORMATION AND COMMUNICATIONS TECHNOLOGY, PROCEEDINGS, P30, DOI 10.1109/QUATIC.2007.8
   Holvitie J., 2016, QUASOQ TDA, P80
   Holvitie J, 2018, INFORM SOFTWARE TECH, V96, P141, DOI 10.1016/j.infsof.2017.11.015
   Hosseini M, 2015, COMPUT SCI REV, V17, P43, DOI 10.1016/j.cosrev.2015.05.001
   Jin Y, 2015, 12TH WORKING CONFERENCE ON MINING SOFTWARE REPOSITORIES (MSR 2015), P434, DOI 10.1109/MSR.2015.57
   Johnson B, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P672, DOI 10.1109/ICSE.2013.6606613
   Jones Capers, 2011, The Economics of Software Quality
   Kamiya T, 2002, IEEE T SOFTWARE ENG, V28, P654, DOI 10.1109/TSE.2002.1019480
   Knight JC, 1998, ANN SOFTW ENG, V5, P293, DOI 10.1023/A:1018960021044
   Kottom C., 2015, CODE QUALITY METRICS
   Krinke J, 2007, 14TH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P170, DOI 10.1109/WCRE.2007.7
   Krüger J, 2017, IEEE-ACM INT WKSP CO, P23, DOI 10.1109/CESI.2017.6
   Letouzey J-L, 2012, Proceedings 2012 Third International Workshop on Managing Technical Debt (MTD 2012), P31, DOI 10.1109/MTD.2012.6225997
   Lotter A, 2018, 2018 25TH AUSTRALASIAN SOFTWARE ENGINEERING CONFERENCE (ASWEC), P141, DOI 10.1109/ASWEC.2018.00027
   Lu Y, 2016, ASIA PAC SOFWR ENG, P49, DOI [10.1109/APSEC.2016.44, 10.1109/APSEC.2016.018]
   Majumdar S., 2016, J ENTOMOL ZOOL STUD, V4, P13
   Marshall MN, 1996, FAM PRACT, V13, P522, DOI 10.1093/fampra/13.6.522
   Mojica IJ, 2014, IEEE SOFTWARE, V31, P78, DOI 10.1109/MS.2013.142
   Mordal-Manet K, 2009, PROC IEEE INT CONF S, P531, DOI 10.1109/ICSM.2009.5306381
   Nasehi SM, 2012, 2012 28TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE (ICSM), P25, DOI 10.1109/ICSM.2012.6405249
   Nikolaidis N, 2019, EUROMICRO CONF PROC, P87, DOI 10.1109/SEAA.2019.00022
   Oman P., 1992, Conference on Software Maintenance 1992 (Cat.No.92CH3206-0), P337, DOI 10.1109/ICSM.1992.242525
   Ponzanelli L, 2013, EUR CON SFTWR MTNCE, P57, DOI 10.1109/CSMR.2013.16
   Ragkhitwetsagul C, 2021, IEEE T SOFTWARE ENG, V47, P560, DOI 10.1109/TSE.2019.2900307
   Rahman MM, 2015, IEEE INT WORK C SO, P81, DOI 10.1109/SCAM.2015.7335404
   Rigby PC, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P832, DOI 10.1109/ICSE.2013.6606629
   San Pedro J, 2014, PROCEEDINGS OF THE 8TH ACM CONFERENCE ON RECOMMENDER SYSTEMS (RECSYS'14), P193, DOI 10.1145/2645710.2645736
   Shah C, 2009, LIBR INFORM SCI RES, V31, P205, DOI 10.1016/j.lisr.2009.07.006
   Sommerville I., 2010, SOFTWARE ENG
   Spinellis D., 2006, Code Quality: The Open Source Perspective
   Squire M, 2014, P ANN HICSS, P1425, DOI 10.1109/HICSS.2014.185
   Srba I, 2016, ACM T WEB, V10, DOI 10.1145/2934687
   Subramanian S, 2013, IEEE WORK CONF MIN S, P85, DOI 10.1109/MSR.2013.6624012
   Suri H, 2011, QUAL RES J, V11, P63, DOI 10.3316/QRJ1102063
   Treude C, 2017, PROC IEEE INT CONF S, P509, DOI 10.1109/ICSME.2017.24
   Treude C, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P804, DOI 10.1145/1985793.1985907
   Wagner S, 2015, INFORM SOFTWARE TECH, V62, P101, DOI 10.1016/j.infsof.2015.02.009
   Westen D, 2003, J PERS SOC PSYCHOL, V84, P608, DOI 10.1037/0022-3514.84.3.608
   Wu YH, 2019, EMPIR SOFTW ENG, V24, P637, DOI 10.1007/s10664-018-9634-5
   Yang D, 2017, IEEE WORK CONF MIN S, P280, DOI 10.1109/MSR.2017.13
   Yang D, 2016, 13TH WORKING CONFERENCE ON MINING SOFTWARE REPOSITORIES (MSR 2016), P391, DOI [10.1109/MSR.2016.047, 10.1145/2901739.2901767]
   Zou J, 2015, 12TH WORKING CONFERENCE ON MINING SOFTWARE REPOSITORIES (MSR 2015), P446, DOI 10.1109/MSR.2015.60
NR 71
TC 16
Z9 18
U1 0
U2 15
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 1
PY 2020
VL 199
AR 102516
DI 10.1016/j.scico.2020.102516
PG 50
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA NZ8IA
UT WOS:000577344100002
DA 2024-07-18
ER

PT J
AU Ribeiro, L
   Duarte, LM
   Machado, R
   Costa, A
   Cota, ÉF
   Bezerra, JS
AF Ribeiro, Leila
   Duarte, Lucio Mauro
   Machado, Rodrigo
   Costa, Andrei
   Cota, Erika Fernandes
   Bezerra, Jonas Santos
TI Use case evolution analysis based on graph transformation with negative
   application conditions
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 22nd Brazilian Symposium on Formal Methods (SBMF)
CY NOV 25-29, 2019
CL Sao Paulo, BRAZIL
SP Brazilian Comp Soc
DE Use case; Graph transformation; Software evolution; Higher-order
   transformations; NACs
AB Use Case (UC) quality impacts the overall quality and defect rate of a system, as they specify the expected behavior of an implementation. In a previous work, we have defined an approach for a step-by-step translation from UCs written in natural language to a formal description in terms of Graph Transformation (GT), where each step of the UC was translated to a transformation rule. This UC formalization enables the detection of several specification problems even before an actual implementation is produced, thus reducing development costs. In this paper, we extend our approach to handle UC evolution by defining evolution rules, which are described as higher-order rules, simultaneously changing the behavior of a set of transformation rules. We also support the use of negative application conditions (NAC) associated both to the transformation and evolution rules. Analysis of the interplay between the evolution rules and the rules describing UC steps shows the effects of an evolution and serves to identify potential impacts, even before the changes are actually carried out. Besides defining the theoretical foundations of UC evolution with NACs, we have implemented the evolution analysis technique in the Verigraph tool and used it to verify impacts in 3 different case studies. The results demonstrate the applicability and usefulness of our approach to help developers in the evolution process based on UCs. (C) 2020 Elsevier B.V. All rights reserved.
C1 [Ribeiro, Leila; Duarte, Lucio Mauro; Machado, Rodrigo; Costa, Andrei; Cota, Erika Fernandes; Bezerra, Jonas Santos] PPGC INF Fed Univ Rio Grande do Sul UFRGS Porto A, Porto Alegre, RS, Brazil.
RP Ribeiro, L; Duarte, LM; Machado, R (corresponding author), PPGC INF Fed Univ Rio Grande do Sul UFRGS Porto A, Porto Alegre, RS, Brazil.
EM leila@inf.ufrgs.br; lmduarte@inf.ufrgs.br; rma@inf.ufrgs.br;
   acosta@inf.ufrgs.br; erika@inf.ufrgs.br; jsbezerra@inf.ufrgs.br
FU VeriTeS project (CNPq); (FAPERGS)
FX This work is partially supported by the VeriTeS project (CNPq, FAPERGS).
CR Alagar VS, 2011, TEXTS COMPUT SCI, P1, DOI 10.1007/978-0-85729-277-3
   [Anonymous], 2002, SEI SERIES SOFTWARE
   Cockburn A, 2001, Writing effective use cases, the crystal collection for software professionals
   Colman A., 2014, Context in computing: a cross-disciplinary approach for modeling the real world, P63
   Costa A. N., 2019, THESIS
   De Leenheer P, 2008, LECT NOTES COMPUT SC, V5088, P44
   Ehrig H., 1973, 14th Annual Symposium on Switching Automata Theory, P167, DOI 10.1109/SWAT.1973.11
   Ehrig Hartmut, 1979, Graph-Grammars and Their Application to Computer Science and Biology, P1, DOI [10.1007/BFb0025714, DOI 10.1007/BFB0025714]
   Hajri I, 2018, J SYST SOFTWARE, V139, P211, DOI 10.1016/j.jss.2018.02.021
   Kiczales G, 1997, LECT NOTES COMPUT SC, V1241, P220, DOI 10.1007/BFb0053381
   Lambers L., 2010, THESIS
   Lambers L, 2006, LECT NOTES COMPUT SC, V4178, P61
   Machado R., 2012, THESIS
   Machado R, 2015, THEOR COMPUT SCI, V594, P1, DOI 10.1016/j.tcs.2015.01.034
   Mantz F., 2012, AGTIVE 2011, P3
   Mens T, 2007, SOFTW SYST MODEL, V6, P269, DOI 10.1007/s10270-006-0044-6
   Oliveira M, 2015, LECT NOTES COMPUT SC, V9463, P110, DOI 10.1007/978-3-319-28114-8_7
   Rui K., 2003, P 25 AUSTRALASIAN CO, P301
   Rui K., 2007, THESIS
   Taentzer G, 2000, LECT NOTES COMPUT SC, V1779, P481
NR 20
TC 1
Z9 1
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29a, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 15
PY 2020
VL 198
AR 102495
DI 10.1016/j.scico.2020.102495
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA NS6CK
UT WOS:000572346900006
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Müller, S
   Mikaelyan, L
   Gerndt, A
   Noll, T
AF Mueller, Sascha
   Mikaelyan, Liana
   Gerndt, Andreas
   Noll, Thomas
TI Synthesizing and optimizing FDIR recovery strategies from fault trees
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 6th International Workshop on Formal Techniques for Safety-Critical
   Systems (FTSCS)
CY NOV 16, 2018
CL Gold Coast, AUSTRALIA
DE FDIR; Fault Tree Analysis; Synthesis; Formal methods
ID SYSTEMS
AB Redundancy concepts are major design drivers in fault-tolerant space systems. It can be a difficult task to decide when to activate which redundancy, and which component should be replaced. In this paper, we refine a methodology where recovery strategies are synthesized from a model of non-deterministic dynamic fault trees. The synthesis is performed by transforming non-deterministic dynamic fault trees into Markov automata that represent all possible choices between recovery actions. From the corresponding scheduler, optimized for maximum expected long-term reachability of failure states, a recovery strategy, optimal with respect to mean time to failure, can then be derived and represented by a model we call recovery automaton. We discuss techniques for reducing the state space of this recovery automaton, and analyze their soundness and completeness. We show that they do not generally guarantee recovery automata with the minimal number of states and derive a class where this guarantee holds. Implementation details for our approach are given and its effectiveness is verified on the basis of three case studies. (C) 2020 The Authors. Published by Elsevier B.V.
C1 [Mueller, Sascha; Mikaelyan, Liana; Gerndt, Andreas] DLR German Aerosp Ctr, Software Space Syst & Interact Visualizat, D-38108 Braunschweig, Germany.
   [Noll, Thomas] Rhein Westfal TH Aachen, Software Modeling & Verificat Grp, D-52056 Aachen, Germany.
   [Gerndt, Andreas] Univ Bremen, D-28334 Bremen, Germany.
C3 Helmholtz Association; German Aerospace Centre (DLR); RWTH Aachen
   University; University of Bremen
RP Müller, S (corresponding author), DLR German Aerosp Ctr, Software Space Syst & Interact Visualizat, D-38108 Braunschweig, Germany.
EM Sa.Mueller@dlr.de; liana.mikaelyan.18@ucl.ac.uk; Andreas.Gerndt@dlr.de;
   Noll@cs.rwth-aachen.de
RI Gerndt, Andreas/AAO-2644-2021
OI Gerndt, Andreas/0000-0002-0409-8573; Muller, Sascha/0000-0002-1913-1719;
   Noll, Thomas/0000-0002-1865-1798
CR [Anonymous], TRINF20101204 UNIPMN
   [Anonymous], AN TECHN SYST REL PR
   [Anonymous], CCIS
   [Anonymous], 1971, Theory of Machines and Computations, DOI DOI 10.1016/B978-0-12-417750-5.50022-1
   [Anonymous], 2006, FAULT TREE AN FTA
   [Anonymous], DTSCH LUFT RAUMF 201
   [Anonymous], 2017 AIAA SPACE FOR
   [Anonymous], LECT NOTES COMPUTER
   [Anonymous], THESIS
   Beccuti M, 2014, COMPUT J, V57, P1870, DOI 10.1093/comjnl/bxt134
   Bettini L., 2016, Implementing Domain Specific Languages with Xtext and Xtend
   Bittner B, 2014, LECT NOTES COMPUT SC, V8822, P82, DOI 10.1007/978-3-319-12214-4_7
   Bobbio A, 2001, RELIAB ENG SYST SAFE, V71, P249, DOI 10.1016/S0951-8320(00)00077-6
   Codetta-Raiteri D, 2015, IEEE T SYST MAN CY-S, V45, P13, DOI 10.1109/TSMC.2014.2323212
   DUGAN JB, 1992, IEEE T RELIAB, V41, P363, DOI 10.1109/24.159800
   Dugan JB, 2000, IEEE T RELIAB, V49, P49, DOI 10.1109/24.855536
   Edifor Ernest, 2012, Computer Safety, Reliability, and Security. Proceedings of the 31st International Conference, SAFECOMP 2012, P99, DOI 10.1007/978-3-642-33678-2_9
   Eisentraut C, 2010, IEEE S LOG, P342, DOI 10.1109/LICS.2010.41
   Guck Dennis, 2013, Quantitative Evaluation of Systems. 10th International Conference, QEST 2013. Proceedings: LNCS 8054, P55, DOI 10.1007/978-3-642-40196-1_5
   Junges Sebastian, 2016, 2016 46th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN). Proceedings, P299, DOI 10.1109/DSN.2016.35
   Kildall G. A., 1973, Conference Record of ACM Symposium on Principles of Programming Languages, P194
   Lange C, 2018, CONCURRENT ENG-RES A, V26, P77, DOI 10.1177/1063293X17736358
   MEALY GH, 1955, AT&T TECH J, V34, P1045, DOI 10.1002/j.1538-7305.1955.tb03788.x
   Muller S., 2018, SECESA 2018
   Muller S., 2018, J. Aerosp. Inform. Syst., P1, DOI [10.2514/1.1010669, DOI 10.2514/1.1010669]
   Ruijters E., 2016, 2016 Annual Reliability and Maintainability Symposium (RAMS), V25-28, P1, DOI [DOI 10.1109/RAMS.2016.7447986, 10.1109/RAMS.2016.7447986]
   Ruijters E, 2015, COMPUT SCI REV, V15-16, P29, DOI 10.1016/j.cosrev.2015.03.001
   Vesely W.E., 1981, Fault tree handbook
NR 28
TC 4
Z9 4
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 15
PY 2020
VL 196
AR 102478
DI 10.1016/j.scico.2020.102478
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA LY6WG
UT WOS:000540668900003
OA Green Accepted, hybrid
DA 2024-07-18
ER

PT J
AU Marra, M
   Polito, G
   Boix, EG
AF Marra, Matteo
   Polito, Guillermo
   Boix, Elisa Gonzalez
TI A debugging approach for live Big Data applications
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Online debugging; Big Data; Map/reduce; Live programming
AB Many frameworks exist for programmers to develop and deploy Big Data applications such as Hadoop Map/Reduce and Apache Spark. However, very little debugging support is currently provided in those frameworks. When an error occurs, developers are lost in trying to understand what has happened from the information provided in log files. Recently, new solutions allow developers to record & replay the application execution, but replaying is not always affordable when hours of computation need to be re-executed. In this paper, we present an online approach that allows developers to debug Big Data applications in isolation by moving the debugging session to an external process when a halting point is reached. We introduce IDRAMR, our prototype implementation in Pharo. IDRAMR centralizes the debugging of parallel applications by introducing novel debugging concepts, such as composite debugging events, and the ability to dynamically update both the code of the debugged application and the same configuration of the running framework. We validate our approach by debugging both application and configuration failures for two driving scenarios. The scenarios are implemented and executed using Port, our Map/Reduce framework for Pharo, also introduced in this paper. (C) 2020 Elsevier B.V. All rights reserved.
C1 [Marra, Matteo; Boix, Elisa Gonzalez] Vrije Univ Brussel, Software Languages Lab, Brussels, Belgium.
   [Polito, Guillermo] Univ Lille, CRIStAL, INRIA, Cent Lille,CNRS,UMR 9189, Lille, France.
C3 Vrije Universiteit Brussel; Centre National de la Recherche Scientifique
   (CNRS); Inria; Universite de Lille; Centrale Lille
RP Marra, M (corresponding author), Vrije Univ Brussel, Software Languages Lab, Brussels, Belgium.
EM mmarra@vub.be; guillermo.polito@univ-lille.fr; egonzale@vub.be
OI Gonzalez Boix, Elisa/0000-0002-9966-6421; Marra,
   Matteo/0000-0002-8037-0567
FU FWO -Research Foundation -Flanders [1S63418N]
FX We would like to thank Clement Bera for his help in the early stages of
   this work ([17]). We would also like to thank the anonymous reviewers
   for their useful feedback.; Matteo Marra is a SB PhD Fellow at the FWO
   -Research Foundation -Flanders. Project: 1S63418N.
CR [Anonymous], P INT WORKSH SMALLT
   [Anonymous], P 12 ED INT WORKSH S
   [Anonymous], 2013, TECHNICAL REPORT
   [Anonymous], 2018, ART SCI ENG PROGRAM
   [Anonymous], ARXIV13094334ABS COR
   [Anonymous], ARXIV13095821ABS COR
   [Anonymous], SYNCS 3 ANN HAD SURV
   [Anonymous], P 12 ED INT WORKSH S
   Bragagnolo S, 2019, 2019 IEEE/ACM 2ND INTERNATIONAL WORKSHOP ON EMERGING TRENDS IN SOFTWARE ENGINEERING FOR BLOCKCHAIN (WETSEB 2019), P1, DOI 10.1109/WETSEB.2019.00007
   Dean J, 2008, COMMUN ACM, V51, P107, DOI 10.1145/1327452.1327492
   Fisher Danyel, 2012, Interactions, V19, P50, DOI 10.1145/2168931.2168943
   Gulzar MA, 2018, ESEC/FSE'18: PROCEEDINGS OF THE 2018 26TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P863, DOI 10.1145/3236024.3264586
   Gulzar MA, 2016, PROC INT CONF SOFTW, P784, DOI 10.1145/2884781.2884813
   Jagannath V., 2011, 2011 IEEE International Symposium on Parallel & Distributed Processing, Workshops and Phd Forum, P1266, DOI 10.1109/IPDPS.2011.268
   Kalodner H., 2017, ARXIV E PRINTS
   Kiciman E, 2005, IEEE T NEURAL NETWOR, V16, P1027, DOI 10.1109/TNN.2005.853411
   Mayer-Schonberger Cukier., 2013, BIG DATA REVOLUTION
   MCDOWELL CE, 1989, COMPUT SURV, V21, P593, DOI 10.1145/76894.76897
   Mohandas M, 2013, 2013 INTERNATIONAL CONFERENCE ON GREEN COMPUTING, COMMUNICATION AND CONSERVATION OF ENERGY (ICGCE), P861, DOI 10.1109/ICGCE.2013.6823555
   Pacheco D, 2011, COMMUN ACM, V54, P44, DOI 10.1145/2043174.2043189
   Rabkin A, 2013, IEEE SOFTWARE, V30, P88, DOI 10.1109/MS.2012.73
   Salihoglu S, 2015, SIGMOD'15: PROCEEDINGS OF THE 2015 ACM SIGMOD INTERNATIONAL CONFERENCE ON MANAGEMENT OF DATA, P1403, DOI 10.1145/2723372.2735353
   Zeller A., 2005, Why Programs Fail: A Guide to Systematic Debugging
NR 23
TC 5
Z9 5
U1 2
U2 6
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD AUG 1
PY 2020
VL 194
AR 102460
DI 10.1016/j.scico.2020.102460
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA LG6ET
UT WOS:000528192400003
OA Green Published, Green Submitted
DA 2024-07-18
ER

PT J
AU Chen, HM
   Xu, ZW
AF Chen, Haiming
   Xu, Zhiwu
TI Inclusion algorithms for one-unambiguous regular expressions and their
   applications
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE One-unambiguous regular expressions; Inclusion; Algorithms; Applications
ID EFFICIENT INCLUSION; POLYMORPHIC FUNCTIONS; XML TYPES; COMPLEXITY;
   DERIVATIVES
AB One-unambiguous regular expressions are used in DTD and XML Schema. It is known that inclusion for one-unambiguous regular expressions is in PTIME. However, there has been few studies on algorithms for the inclusion. In this paper we present algorithms for checking inclusion of one-unambiguous regular expressions. A classical way is based on automata, following which one algorithm is provided and improvements are given. The other algorithm is based on derivatives, utilizing a property presented here that the number of derivatives of a one-unambiguous regular expression is finite. We have applied the algorithms to XML typechecking. The results of experiments with the algorithms are also included. First we give comparisons of the efficiency of our algorithms by experiments. Since after our work Hovland has given another algorithm, we also included his algorithm in the experiments. The results show that both of our algorithms are more efficient than Hovland's algorithm for one-unambiguous regular expressions, and under the inclusion mode (see Section 6) the derivative-based algorithm is more efficient than the automata-based one for small expressions, while for large expressions the latter is more efficient. Then we have conducted preliminary experiments by implementing typechecking of XML using the algorithms. The results show that typechecking using our algorithms is more efficient than typechecking using XDuce. Comparisons of the algorithms with CDuce are also given. (C) 2020 Elsevier B.V. All rights reserved.
C1 [Chen, Haiming] Chinese Acad Sci, Inst Software, State Key Lab Comp Sci, Beijing 100190, Peoples R China.
   [Xu, Zhiwu] Shenzhen Univ, Coll Comp Sci & Software Engn, Shenzhen 518060, Peoples R China.
C3 Chinese Academy of Sciences; Institute of Software, CAS; Shenzhen
   University
RP Chen, HM (corresponding author), Chinese Acad Sci, Inst Software, State Key Lab Comp Sci, Beijing 100190, Peoples R China.; Xu, ZW (corresponding author), Shenzhen Univ, Coll Comp Sci & Software Engn, Shenzhen 518060, Peoples R China.
EM chm@ios.ac.cn; xuzhiwu@szu.edu.cn
FU National Natural Science Foundation of China [61872339, 61472405,
   61972260, 61502308]; Guangdong Basic and Applied Basic Research
   Foundation [2019A1515011577]
FX We thank Lixiao Zheng for her careful reading and helpful comments on
   the writing of an earlier version of the paper. We also thank the editor
   and the anonymous reviewers for their constructive comments. This work
   was supported by National Natural Science Foundation of China under
   Grant Nos. 61872339, 61472405, 61972260 and 61502308, and Guangdong
   Basic and Applied Basic Research Foundation under Grant No.
   2019A1515011577.
CR Amavi J, 2011, LECT NOTES COMPUT SC, V6807, P30, DOI 10.1007/978-3-642-22256-6_4
   [Anonymous], 1961, Surveys, DOI [10.1070/RM1961v016n05ABEH004112, DOI 10.1070/RM1961V016N05ABEH004112]
   [Anonymous], 1960, IRE transactions on Electronic Computers, DOI [DOI 10.1109/TEC.1960.5221603, 10.1109/TEC.1960.5221603]
   Antimirov V., 1995, Fundamentals of Computation Theory. 10th International Conference, FCT'95. Proceedings, P116
   Antimirov V, 1996, THEOR COMPUT SCI, V155, P291, DOI 10.1016/0304-3975(95)00182-4
   Benzaken V, 2003, ACM SIGPLAN NOTICES, V38, P51, DOI 10.1145/944746.944711
   Bonchi F, 2015, COMMUN ACM, V58, P87, DOI 10.1145/2713167
   Bray T., 2006, W3C RECOMMENDATION
   Bruggemann-Klein A, 1998, INFORM COMPUT, V142, P182, DOI 10.1006/inco.1997.2695
   BRUGGEMANNKLEIN A, 1993, THEOR COMPUT SCI, V120, P197, DOI 10.1016/0304-3975(93)90287-4
   BRZOZOWSKI JA, 1967, J ACM, V14, P466, DOI 10.1145/321406.321409
   BRZOZOWSKI JA, 1964, J ACM, V11, P481, DOI 10.1145/321239.321249
   Caron Pascal, 2015, Implementation and Application of Automata. 20th International Conference, CIAA 2015. Proceedings: LNCS 9223, P63, DOI 10.1007/978-3-319-22360-5_6
   Caron Pascal, 2011, Developments in Language Theory. Proceedings 15th International Conference, DLT 2011, P129, DOI 10.1007/978-3-642-22321-1_12
   Caron P, 2017, THEOR COMPUT SCI, V679, P95, DOI 10.1016/j.tcs.2016.07.004
   Castagna G, 2015, ACM SIGPLAN NOTICES, V50, P289, DOI 10.1145/2775051.2676991
   Castagna G, 2014, ACM SIGPLAN NOTICES, V49, P5, DOI 10.1145/2535838.2535840
   Castagna G, 2011, ICFP 11 - PROCEEDINGS OF THE 2011 ACM SIGPLAN: INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P94
   Champavère J, 2008, LECT NOTES COMPUT SC, V5196, P184, DOI 10.1007/978-3-540-88282-4_18
   Chen H., 2018, TECHNICAL REPORT
   Chen HM, 2008, LECT NOTES COMPUT SC, V5160, P96, DOI 10.1007/978-3-540-85762-4_7
   Chen HM, 2015, INFORM COMPUT, V241, P302, DOI 10.1016/j.ic.2014.12.001
   Chen H, 2010, WINT SIMUL C PROC, P11, DOI 10.1109/WSC.2010.5679180
   Chen L, 2010, LECT NOTES COMPUT SC, V6255, P45, DOI 10.1007/978-3-642-14808-8_4
   Colazzo D, 2013, THEOR COMPUT SCI, V492, P88, DOI 10.1016/j.tcs.2013.04.023
   COLAZZO D., 2009, P 12 INT C DAT THEOR, P174
   COLAZZO D., 2009, P 18 ACM C INF KNOWL, P137
   Colazzo D, 2013, ACM T DATABASE SYST, V38, DOI 10.1145/2508020.2508022
   Colazzo D, 2009, INFORM SYST, V34, P643, DOI 10.1016/j.is.2008.10.001
   CORMEN HT, 2001, INTRO ALGORITHMS
   Czerwinski W, 2017, J COMPUT SYST SCI, V88, P75, DOI 10.1016/j.jcss.2017.03.011
   Frisch A, 2004, INT FED INFO PROC, V155, P661
   Gelade W, 2009, SIAM J COMPUT, V38, P2021, DOI 10.1137/070697367
   Gesbert N, 2011, ICFP 11 - PROCEEDINGS OF THE 2011 ACM SIGPLAN: INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P107
   Ghelli G, 2007, LECT NOTES COMPUT SC, V4797, P231
   Giammarresi D., 2001, LECT NOTES COMPUTER, V2202, P184
   Grijzenhout S, 2013, J WEB SEMANT, V19, P59, DOI 10.1016/j.websem.2012.12.001
   Groz B, 2017, J COMPUT SYST SCI, V89, P372, DOI 10.1016/j.jcss.2017.05.013
   Han YS, 2008, INFORM COMPUT, V206, P1117, DOI 10.1016/j.ic.2008.03.013
   Hosoya H, 2009, ACM T PROGR LANG SYS, V32, DOI 10.1145/1596527.1596529
   Hosoya Haruo, 2003, ACM T INTERNET TECHN, V3, DOI DOI 10.1145/767193.767195
   Hovland D, 2012, J COMPUT SYST SCI, V78, P1795, DOI 10.1016/j.jcss.2011.12.003
   Huang EW, 2005, COMPUT METH PROG BIO, V80, P1, DOI 10.1016/j.cmpb.2005.05.001
   Kilpeläinen P, 2007, INFORM COMPUT, V205, P890, DOI 10.1016/j.ic.2006.12.003
   Kilpeläinen P, 2011, INFORM SYST, V36, P596, DOI 10.1016/j.is.2010.10.001
   Latte M, 2015, LECT NOTES COMPUT SC, V9234, P369, DOI 10.1007/978-3-662-48057-1_29
   Losemann K, 2016, THEOR COMPUT SCI, V627, P54, DOI 10.1016/j.tcs.2016.02.027
   Lu P, 2015, INFORM COMPUT, V245, P181, DOI 10.1016/j.ic.2015.08.005
   Lu P, 2015, THEOR COMPUT SYST, V57, P97, DOI 10.1007/s00224-014-9576-2
   Martens W, 2006, ACM T DATABASE SYST, V31, P770, DOI 10.1145/1166074.1166076
   Martens W, 2009, SIAM J COMPUT, V39, P1486, DOI 10.1137/080743457
   MAYER AJ, 1994, INFORM COMPUT, V115, P293, DOI 10.1006/inco.1994.1098
   Peng FF, 2015, LECT NOTES COMPUT SC, V9399, P203, DOI 10.1007/978-3-319-25150-9_13
   SPERBERG-MCQUEEN C. M., 2005, XML SCHEMA
   Stockmeyer L.J., 1973, P STOC 73, P1
   Sulzmann M, 2008, LECT NOTES COMPUT SC, V5083, P75, DOI 10.1007/978-3-540-85373-2_5
   Suzuki N, 2007, APPLIED COMPUTING 2007, VOL 1 AND 2, P482, DOI 10.1145/1244002.1244115
   Vouillon J, 2006, ACM SIGPLAN NOTICES, V41, P103, DOI 10.1145/1111320.1111047
   Yu S., 1997, Word, Language, Grammar, V1, P41, DOI [10.1007/978-3-642-59136-5_2, DOI 10.1007/978-3-642-59136-52, DOI 10.1007/978-3-642-59136-5_2]
NR 59
TC 1
Z9 1
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUL 1
PY 2020
VL 193
AR 102436
DI 10.1016/j.scico.2020.102436
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA LG6EP
UT WOS:000528192000001
OA Bronze
DA 2024-07-18
ER

PT J
AU López-González, J
   Serrano, JM
AF Lopez-Gonzalez, J.
   Serrano, Juan M.
TI The optics of language-integrated query
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Optics; Language-integrated query; Comprehensions; Typed tagless-final;
   Scala
AB Monadic comprehensions reign over the realm of language-integrated query (LINQ), and for good reasons. Indeed, comprehensions are tightly integrated with general purpose programming languages and close enough to common query languages, such as SQL, to guarantee their translation into effective queries. Comprehensions also support features for writing reusable and composable queries, such as the handling of nested data and the use of functional abstractions.
   In parallel to these developments, optics have emerged in recent years as the technology of choice to write programs that manipulate complex data structures with nested components. Optic abstractions are easily composable and, in principle, permit both data access and updates. This paper attempts to exploit the notion of optic for LINQ as a higher-level language that complements comprehension-based approaches.
   In order to do this, we lift a restricted subset of optics, namely getters, affine folds and folds, into a full-blown DSL. The type system of the resulting language of optics, that we have named Optica, distills their compositional properties, whereas its denotational semantics is given by standard optics. This formal specification of the concept of optic enables the definition of non-standard optic representations beyond van Laarhoven, profunctor optics, etc. In particular, the paper demonstrates that a restricted subset of XQuery can be understood as an optic representation: it introduces Triplets, a non-standard semantic domain to normalize optic expressions and facilitate the generation of SQL queries: and it describes how to generate comprehension-based queries from optic expressions, thus showing that both approaches can coexist.
   Despite the limited expressiveness of optics in relation to comprehensions, results are encouraging enough to anticipate the convenience and feasibility of extending existing comprehension-based libraries for LINQ in the functional ecosystem, with optic capabilities. In order to show this potential, the paper also describes S-Optica, a Scala implementation of Optica using the tagless-final approach. (C) 2020 Elsevier B.V. All rights reserved.
C1 [Lopez-Gonzalez, J.; Serrano, Juan M.] Univ Rey Juan Carlos, Calle Tulipan S-N, Mostoles 28933, Spain.
   [Lopez-Gonzalez, J.; Serrano, Juan M.] Habla Comp SL, Avda Gregorio Peces Barba, Leganes 28918, Spain.
C3 Universidad Rey Juan Carlos
RP López-González, J (corresponding author), Habla Comp SL, Avda Gregorio Peces Barba, Leganes 28918, Spain.
EM jesus.lopez@urjc.es; juanmanuel.serrano@urjc.es
OI Lopez-Gonzalez, Jesus/0000-0002-8730-2292
FU Spanish Ministry of Economy, Industry and Competitiveness [DI-14-06921]
FX This work is partially supported by a Doctorate Industry Program grant
   to Habla Computing SL, from the Spanish Ministry of Economy, Industry
   and Competitiveness with reference number DI-14-06921.
CR [Anonymous], [No title captured]
   [Anonymous], 2006, SIGMOD C
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], 2004, TECH REP
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], 2003, The Fun of Programming
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   BACHMAN CW, 1973, COMMUN ACM, V16, P653, DOI 10.1145/355611.362534
   Benedikt M, 2009, LECT NOTES COMPUT SC, V5708, P1, DOI 10.1007/978-3-642-03793-1_1
   BREAZUTANNEN V, 1992, LECT NOTES COMPUT SC, V646, P140
   Buneman P., 1994, SIGMOD Record, V23, P87, DOI 10.1145/181550.181564
   BUNEMAN P, 1995, THEOR COMPUT SCI, V149, P3, DOI 10.1016/0304-3975(95)00024-Q
   Burmako Eugene, 2013, P 4 WORKSHOP SCALA M, DOI [10.1145/2489837.2489840, DOI 10.1145/2489837.2489840, 10.1145/ 2489837.2489840]
   Ceri S., 1989, IEEE Transactions on Knowledge and Data Engineering, V1, P146, DOI 10.1109/69.43410
   Cheney J, 2014, SIGMOD'14: PROCEEDINGS OF THE 2014 ACM SIGMOD INTERNATIONAL CONFERENCE ON MANAGEMENT OF DATA, P1027, DOI 10.1145/2588555.2612186
   Cheney J, 2013, ACM SIGPLAN NOTICES, V48, P403, DOI [10.1145/2544174.2500586, 10.1145/2500365.2500586]
   Cooper E, 2009, LECT NOTES COMPUT SC, V5708, P36, DOI 10.1007/978-3-642-03793-1_3
   Copeland G., 1984, SIGMOD Record, V14, P316, DOI 10.1145/971697.602300
   Date C. J., 1984, SIGMOD Record, V14, P8, DOI 10.1145/984549.984551
   Fegaras L, 2017, J FUNCT PROGRAM, V27, DOI 10.1017/S0956796817000193
   Fernández M, 2002, ACM T DATABASE SYST, V27, P438, DOI 10.1145/582410.582413
   Fischer S, 2015, LECT NOTES COMPUT SC, V9129, P215, DOI 10.1007/978-3-319-19797-5_10
   Foster JN, 2007, ACM T PROGR LANG SYS, V29, DOI [10.1145/1232420.1232424, 10.1145/1047659.1040325]
   Hartig O, 2017, AMW 2017 11 A MEND I, V1912
   Hongwei Xi, 2003, SIGPLAN Notices, V38, P224, DOI 10.1145/640128.604150
   Horn R., 2018, P ACM PROGR LANG, DOI [10.1145/3236769, DOI 10.1145/3236769]
   Hudak P., 1996, ACM COMPUT SURV, V28, P196, DOI [10.1145/242224.242477, DOI 10.1145/242224.242477]
   HUGHES J, 1989, COMPUT J, V32, P98, DOI 10.1093/comjnl/32.2.98
   Ireland C, 2009, 2009 FIRST INTERNATIONAL CONFERENCE ON ADVANCES IN DATABASES, KNOWLEDGE, AND DATA APPLICATIONS, P36, DOI 10.1109/DBKDA.2009.11
   Katsushima T, 2017, PROCEEDINGS OF THE 2017 ACM SIGPLAN WORKSHOP ON PARTIAL EVALUATION AND PROGRAM MANIPULATION (PEPM'17), P123, DOI 10.1145/3018882.3018893
   Kiselyov Oleg, 2012, Generic and Indexed Programming. International Spring School, SSGIP 2010. Revised Lectures, P130, DOI 10.1007/978-3-642-32202-0_3
   Kiselyov O, 2017, LECT NOTES COMPUT SC, V10695, P364, DOI 10.1007/978-3-319-71237-6_18
   Kiselyov O, 2019, ELECTRON P THEOR COM, P15, DOI 10.4204/EPTCS.294.2
   Kmett EdwardA., 2018, LENS LENSES FOLDS TR
   Limsoon Wong, 2000, Journal of Functional Programming, V10, P19, DOI 10.1017/S0956796899003585
   Lindley Sam, 2012, TLDI, P91, DOI DOI 10.1145/2103786.2103798
   Mao L, 2020, JAMA NEUROL, V77, P683, DOI 10.1001/jamaneurol.2020.1127
   Najd S, 2016, PEPM'16: PROCEEDINGS OF THE 2016 ACM SIGPLAN WORKSHOP ON PARTIAL EVALUATION AND PROGRAM MANIPULATION, P25, DOI 10.1145/2847538.2847541
   Nemirovsky A, 2010, NANOTECHNOLOGY AND MICROELECTRONICS: GLOBAL DIFFUSION, ECONOMICS AND POLICY, P341, DOI 10.4018/978-1-61692-006-7.ch021
   Norris R, DOOBIE FUNCTIONAL JD
   PARNAS DL, 1972, COMMUN ACM, V15, P1053, DOI 10.1145/361598.361623
   Suzuki K, 2016, PEPM'16: PROCEEDINGS OF THE 2016 ACM SIGPLAN WORKSHOP ON PARTIAL EVALUATION AND PROGRAM MANIPULATION, P37, DOI 10.1145/2847538.2847542
   Syme Don., 2006, ML
   Trinder P., 1989, TENCON '89. Fourth IEEE Region 10 International Conference. `Information Technologies for the 90's' E2C2; Energy, Electronics, Computers, Communications (Cat. No.A89CH2766-4), P186, DOI 10.1109/TENCON.1989.176921
   WADLER P, 1989, CONFERENCE RECORD OF THE SIXTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P60, DOI 10.1145/75277.75283
   Wadler P., 1995, Advanced Functional Programming. First International Spring School on Advanced Functional Programming Techniques. Tutorial Text, P24
   WADLER P, 1990, PROCEEDINGS OF THE 1990 ACM CONFERENCE ON LISP AND FUNCTIONAL PROGRAMMING, P61, DOI 10.1145/91556.91592
   Wong L, 1996, J COMPUT SYST SCI, V52, P495, DOI 10.1006/jcss.1996.0037
NR 62
TC 0
Z9 0
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29a, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAY 1
PY 2020
VL 190
AR 102395
DI 10.1016/j.scico.2020.102395
PG 44
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA KR5LR
UT WOS:000517660400001
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Ferrando, A
AF Ferrando, Angelo
TI The early bird catches the worm: First verify, then monitor!
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Runtime verification of object-oriented programming; Trace expressions;
   Automata-based model checking; Runtime monitoring; Combining static and
   runtime verification
ID MODEL CHECKING; POWER
AB Trace expressions are a compact and expressive formalism, initially devised for runtime verification of agent interactions in multiagent systems, which has been successfully employed to model real-world protocols, and to generate monitors for mainstream multiagent system platforms, and generalized to support runtime verification of different kinds of properties and systems. In this paper, we propose an algorithm to check Linear Temporal Logic (LTL) properties satisfiability on trace expressions. To do this, we show how to translate a trace expression into a Buchi Automaton in order to realize an AutomataBased Model Checking. We show that this translation generates an over-approximation of our trace expression leading us to obtain a sound procedure to verify LTL properties. Once we have statically checked a set of LTL properties, we can conclude that: (1) our trace expression is formally correct (2) since we use this trace expression to generate monitors checking the runtime behavior of the system, the LTL properties verified by this trace expression are also verified by the monitored system. (C) 2018 Elsevier B.V. All rights reserved.
C1 [Ferrando, Angelo] Univ Genoa, Dept Informat Bioengn Robot & Syst Engn DIBRIS, Via Dodecaneso 35, Genoa, Italy.
C3 University of Genoa
RP Ferrando, A (corresponding author), Univ Genoa, Dept Informat Bioengn Robot & Syst Engn DIBRIS, Via Dodecaneso 35, Genoa, Italy.
EM angelo.ferrando@dibris.unige.it
RI Ferrando, Angelo/ABC-9750-2020
OI Ferrando, Angelo/0000-0002-8711-4670
CR Ahrendt W, 2016, LECT NOTES COMPUT SC, V9952, P402, DOI 10.1007/978-3-319-47166-2_28
   Ahrendt Wolfgang, 2016, LECT NOTES COMPUT SC
   Alur R, 2008, LECT NOTES COMPUT SC, V5000, P89
   Ancona D., 2013, LNCS, V7784, P76, DOI DOI 10.1007/978-3-642-37890-45
   Ancona  D., 2016, COMP TRACE EXPRESSIO, P47
   Ancona  D., 2017, P 19 WORKSH FORM TEC
   Ancona D, 2016, FOUND TRENDS PROGRAM, V3, pI, DOI 10.1561/2500000031
   Ancona Davide, 2013, P 28 ANN ACM S APPL, P1377
   [Anonymous], 2012, COMPUTER AIDED VERIF, DOI DOI 10.1007/978-3-642-31424-7_55
   [Anonymous], P ACM INT S SOFTW TE
   [Anonymous], 1990, HDB THEORETICAL COMP
   [Anonymous], 2012, ART SOFTWARE TESTING, DOI DOI 10.1002/9781119202486
   [Anonymous], 1996, AUTOMATA THEORETIC A, DOI [10.1007/3-540-60915-66, DOI 10.1007/3-540-60915-66]
   [Anonymous], 2001, MODEL CHECKING
   Artho C, 2004, LECT NOTES COMPUT SC, V3114, P462
   Artho C, 2005, ELECTRON NOTES THEOR, V131, P3, DOI 10.1016/j.entcs.2005.01.018
   Bartocci Ezio, 2018, Lectures on Runtime. Verification Introductory and Advanced Topics. LNCS 10457, P1, DOI 10.1007/978-3-319-75632-5_1
   Bauer A, 2006, LECT NOTES COMPUT SC, V4337, P260
   Bauer A, 2011, ACM T SOFTW ENG METH, V20, DOI 10.1145/2000799.2000800
   Bauer A, 2010, J LOGIC COMPUT, V20, P651, DOI 10.1093/logcom/exn075
   Bettini L, 2008, LECT NOTES COMPUT SC, V5201, P418, DOI 10.1007/978-3-540-85361-9_33
   Bodden  E., 2005, GRAND FINALS ACM STU
   Boer Frank S., 2014, Formal Methods for Executable Software Models. 14th International School on Formal Methods for the Design of Computer, Communication, and Software Systems, SFM 2014. Advanced Lectures: LNCS 8483, P217, DOI 10.1007/978-3-319-07317-0_6
   Brorkens M., 2002, Electr. Notes Theor. Comput. Sci., V70, P21
   Broy M., 2005, LECT NOTES COMPUT SC, V3472
   Buchi J. R, 1990, On a Decision Method in Restricted Second Order Arithmetic, P425, DOI [DOI 10.1007/978-1-4613-8928-6_23, 10.1007/978-1-4613-8928-6_23, 10.1007%2F978-1-4613-8928-6_23]
   Capecchi S, 2009, THEOR COMPUT SCI, V410, P142, DOI 10.1016/j.tcs.2008.09.016
   Castagna G, 2012, LOG METH COMPUT SCI, V8, DOI 10.2168/LMCS-8(1:24)2012
   Caucal D, 2002, LECT NOTES COMPUT SC, V2420, P165
   Chen F, 2007, OOPSLA: 22ND INTERNATIONAL CONFERENCE ON OBJECT-ORIENTED PROGRAMMING, SYSTEMS, LANGUAGES, AND APPLICATIONS, PROCEEDINGS, P569
   Chimento JM, 2015, LECT NOTES COMPUT SC, V9333, P297, DOI 10.1007/978-3-319-23820-3_21
   CHOW TS, 1978, IEEE T SOFTWARE ENG, V4, P178, DOI 10.1109/TSE.1978.231496
   COHEN J, 1993, J COMPUT SYST SCI, V46, P271, DOI 10.1016/0022-0000(93)90005-H
   Colombo C, 2009, SEFM 2009: SEVENTH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING AND FORMAL METHODS, P33, DOI 10.1109/SEFM.2009.13
   d'Amorim M, 2005, LECT NOTES COMPUT SC, V3576, P364
   DAMM W, 1977, LNCS, V52, P164
   Dezani-Ciancaglini  M., 2005, 2 INT C PERS TECHN, P299
   Dezani-Ciancaglini M, 2006, LECT NOTES COMPUT SC, V4067, P328
   Dezani-Cianeaglini M, 2007, LECT NOTES COMPUT SC, V4709, P207
   Dubslaff C, 2012, INFORM PROCESS LETT, V112, P320, DOI 10.1016/j.ipl.2012.01.006
   Falcone Y, 2010, LECT NOTES COMPUT SC, V6418, P89, DOI 10.1007/978-3-642-16612-9_9
   Ferrando A, 2018, PROCEEDINGS OF THE 17TH INTERNATIONAL CONFERENCE ON AUTONOMOUS AGENTS AND MULTIAGENT SYSTEMS (AAMAS' 18), P1933
   Gabbay D, 1980, P 7 ACM SIGPLAN SIGA, P163, DOI DOI 10.1145/567446.567462
   Gay SJ, 2010, ACM SIGPLAN NOTICES, V45, P299, DOI 10.1145/1707801.1706335
   Giannakopoulou D, 2001, 16TH ANNUAL INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING (ASE 2001), PROCEEDINGS, P412, DOI 10.1109/ASE.2001.989841
   Giannakopoulou  D., 2001, TECH REP
   Havelund K., 2001, Electronic Notes in Theoretical Computer Science, V55, DOI 10.1016/S1571-0661(04)00253-1
   Havelund K, 2002, LECT NOTES COMPUT SC, V2280, P342
   Hinrichs T., 2014, HOWARD-60: A Festschrift on the Occasion of Howard Barringer's 60th Birthday, V42, P234
   Holzmann G. J., 2002, Computer Aided Verification. 14th International Conference, CAV 2002. Proceedings (Lecture Notes in Computer Science Vol.2404), P1
   Holzmann G. J., 1991, Design and Validation of Comp. Protocols, V512
   Holzmann GJ, 1997, IEEE T SOFTWARE ENG, V23, P279, DOI 10.1109/32.588521
   Holzmann GJ, 2004, The SPIN model checker: primer and reference manual, V1003
   Honda K, 1998, LECT NOTES COMPUT SC, V1381, P122, DOI 10.1007/BFb0053567
   Honda K, 2016, J ACM, V63, DOI 10.1145/2827695
   Hoperoft J. E., 1969, ADDISON WESLEY SERIE
   Hu R, 2008, LECT NOTES COMPUT SC, V5142, P516, DOI 10.1007/978-3-540-70592-5_22
   Kripke Saul A., 1963, Zeitschrift fur mathematische Logik und Grundlagen der Mathematik, V9, P67, DOI DOI 10.1002/MALQ.19630090502
   Leucker M, 2009, J LOGIC ALGEBR PROGR, V78, P293, DOI 10.1016/j.jlap.2008.08.004
   Lichtenstein O., 1985, P 12 ACM SIGACT SIGP, P97, DOI DOI 10.1145/318593.318622
   Luo QZ, 2014, LECT NOTES COMPUT SC, V8734, P285, DOI 10.1007/978-3-319-11164-3_24
   Martin M, 2005, ACM SIGPLAN NOTICES, V40, P365, DOI 10.1145/1103845.1094840
   Merz Stephan., 2000, SUMMER SCH MODELING, P3
   Pnueli A., 1977, 18th Annual Symposium on Foundations of Computer Science, P46, DOI 10.1109/SFCS.1977.32
   Prior A.N., 1955, Time and Modality
   Staiger L, 1997, LECT NOTES COMPUT SC, V1218, P377
   Stolz V, 2006, ELECTRON NOTES THEOR, V144, P109, DOI 10.1016/j.entcs.2006.02.007
   Takeuchi K., 1994, Parallel Architectures and Languages Europe'94, V817, P398, DOI [DOI 10.1007/3-540-58184-7_118, 10.1007/3540581847118]
   Vardi MY, 2007, LECT NOTES COMPUT SC, V4349, P137
   Visser W., 2003, Automated Software Engineering, V10, P203, DOI 10.1023/A:1022920129859
   Wielemaker J, 2012, THEOR PRACT LOG PROG, V12, P67, DOI 10.1017/S1471068411000494
NR 71
TC 4
Z9 4
U1 0
U2 5
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR 1
PY 2019
VL 172
BP 160
EP 179
DI 10.1016/j.scico.2018.11.008
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA HK8HC
UT WOS:000458229000008
OA hybrid
DA 2024-07-18
ER

PT J
AU Baldan, P
   Lafuente, AL
AF Baldan, Paolo
   Lafuente, Alberto Lluch
TI Many-to-many information flow policies
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE information flow; Coordination; Declassification; Non-interference;
   Causality
ID EVENT STRUCTURES; NONINTERFERENCE; SECURITY
AB Information flow techniques typically classify information according to suitable security levels and enforce policies that are based on binary relations between individual levels, e.g., stating that information is allowed to flow from one level to another. We argue that some information flow properties of interest naturally require coordination patterns that involve sets of security levels rather than individual levels: some secret information could be safely disclosed to a set of confidential channels of incomparable security levels, with individual leaks considered instead illegal; a group of competing agencies might agree to disclose their secrets, with individual disclosures being undesired, etc. Motivated by this, we study a semantic foundation for such properties based on causal models of computation. We propose a simple language for expressing information flow policies where the usual admitted flow relation between individual security levels is replaced by a relation between sets of security levels, thus allowing to capture coordinated flows of information. The flow of information is expressed in terms of causal dependencies and the satisfaction of a policy is defined with respect to an event structure that is assumed to capture the causal structure of system computations. We also preliminarily explore possibilities for practical applicability of our approach by focusing on systems specified as safe Petri nets, a formalism with a well-established causal semantics. We show how unfolding-based verification techniques for Petri nets can be adopted for solving the problem of checking policy satisfaction. (C) 2018 Elsevier B.V. All rights reserved.
C1 [Baldan, Paolo] Univ Padua, Dipartimento Matemat, Padua, Italy.
   [Lafuente, Alberto Lluch] Tech Univ Denmark, DTU Compute, Lyngby, Denmark.
C3 University of Padua; Technical University of Denmark
RP Lafuente, AL (corresponding author), Tech Univ Denmark, DTU Compute, Lyngby, Denmark.
EM baldan@math.unipd.it; albl@dtu.dk
RI Lafuente, Alberto Lluch/G-4413-2011
OI Lafuente, Alberto Lluch/0000-0001-7405-0818; Baldan,
   Paolo/0000-0001-9357-5599
CR [Anonymous], 1995, J COMPUT SECUR, DOI [DOI 10.3233/JCS-1994/1995-3103, 10.3233/JCS-1994/1995-3103]
   Baldan P, 2017, LECT NOTES COMPUT SC, V10319, P159, DOI 10.1007/978-3-319-59746-1_9
   Baldan P, 2016, LECT NOTES COMPUT SC, V9686, P1, DOI 10.1007/978-3-319-39519-7_1
   Bérard B, 2017, ACM T EMBED COMPUT S, V16, DOI 10.1145/2984639
   Best E, 2012, LECT NOTES COMPUT SC, V7215, P290, DOI 10.1007/978-3-642-28641-4_16
   Broberg N, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P431, DOI 10.1145/1706299.1706349
   Busi N, 2009, MATH STRUCT COMP SCI, V19, P1065, DOI 10.1017/S0960129509990120
   Clarkson B., 2014, INT C PRINC SEC TRUS, P265, DOI [10.1007/978-3-642-54792-8_15, DOI 10.1007/978-3-642-54792-8_15]
   Clarkson MR, 2010, J COMPUT SECUR, V18, P1157, DOI 10.3233/JCS-2009-0393
   FOCARDI R., 2001, FDN SECURITY ANAL DE, V2171, P331
   Fujisaki E, 1999, LECT NOTES COMPUT SC, V1560, P53
   Gorrieri Roberto, 2011, Foundations of Security Analysis and Design VI. FOSAD Tutorial Lectures: LNCS 6858, P125, DOI 10.1007/978-3-642-23082-0_5
   Khomenko V, 2003, ACTA INFORM, V40, P95, DOI 10.1007/s00236-003-0122-y
   Leitner-Fischer Florian, 2013, International Journal of Critical Computer-Based Systems, V4, P119, DOI 10.1504/IJCCBS.2013.056492
   Madhusudan P, 2003, IEEE S LOG, P371, DOI 10.1109/LICS.2003.1210077
   Mantel H, 2004, LECT NOTES COMPUT SC, V3302, P129
   MERKLE RC, 1978, COMMUN ACM, V21, P294, DOI 10.1145/359460.359473
   Milushev D, 2012, LECT NOTES COMPUT SC, V7215, P329, DOI 10.1007/978-3-642-28641-4_18
   Nielsen M., 1979, Semantics of Concurrent Computations, P266, DOI 10.1007/BFb0022474
   Okamoto T., 1994, 2nd ACM Conference on Computer and Communications Security, P184, DOI 10.1145/191177.191221
   Sabelfeld A, 2003, IEEE J SEL AREA COMM, V21, P5, DOI 10.1109/JSAC.2002.806121
   Sabelfeld A, 2009, J COMPUT SECUR, V17, P517, DOI 10.3233/JCS-2009-0352
   Selective Disclosure and Insider Trading, 2000, TECH REP
   Stefan D., 2011, LNCS, V7161, P223, DOI [10.1007/978-3-642-29615-, DOI 10.1007/978-3-642-29615, 10.1007/ 978-3-642-29615-4_16, DOI 10.1007/978-3-642-29615-4_16]
   Thiagarajan P. S., 2002, Formal and natural computing. Essays dedicated to Grzegorz Rozenberg (Lecture Notes in Computer Science Vol.2300), P244
   Waye L, 2015, LECT NOTES COMPUT SC, V9331, P203, DOI 10.1007/978-3-319-24858-5_13
   WINSKEL G, 1987, LECT NOTES COMPUT SC, V255, P325
NR 27
TC 0
Z9 1
U1 0
U2 2
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 15
PY 2018
VL 168
BP 118
EP 141
DI 10.1016/j.scico.2018.08.003
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA HA6JG
UT WOS:000450385200006
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Furda, A
   Fidge, C
   Barros, A
AF Furda, Andrei
   Fidge, Colin
   Barros, Alistair
TI A practical approach for detecting multi-tenancy data interference
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Multi-tenancy; Microservices; Cloud computing; Multi-tenant data
   separation
AB This paper presents a practical solution for identifying tenant data interference defects when migrating single-tenant legacy code to multi-tenant components or multi-tenant microservices.
   The paper explains the concepts of multi-tenant components and microservices, elaborates a formal definition of the multi-tenancy data interference problem based on information flow control theory, and presents a practical method to identify potential defects by analysing the code statically. The method has been implemented as a prototype developer support tool for PHP code.
   The implemented support tool prototype demonstrates the method's effectiveness for supporting the transformation of single-tenant legacy source code into multi-tenant components or microservices. It could also be used to confirm that multi-tenant components or microservices are free of data interference defects. The prototype implementation has been validated in a case study with code from the open-source enterprise application Sugar-CRM. Results indicate that the developed approach significantly increases the efficiency of multi-tenancy transformation in larger code bases by pointing out potential defects. (C) 2018 Elsevier B.V. All rights reserved.
C1 [Furda, Andrei; Fidge, Colin; Barros, Alistair] Queensland Univ Technol, Sci & Engn Fac, Brisbane, Qld 4001, Australia.
C3 Queensland University of Technology (QUT)
RP Furda, A; Fidge, C (corresponding author), Queensland Univ Technol, Sci & Engn Fac, Brisbane, Qld 4001, Australia.
EM andreifurda@gmail.com; c.fidge@qut.edu.au; alistair.barros@qut.edu.au
RI Barros, Alistair/HPC-0647-2023; Furda, Andrei/F-8784-2013; Fidge,
   Colin/J-1036-2012
OI Barros, Alistair/0000-0001-8980-6841; Furda, Andrei/0000-0001-6219-8612;
   Fidge, Colin/0000-0002-9410-7217
FU Australian Research Council [DP140103788]
FX This research was supported under Australian Research Council's
   Discovery Projects funding scheme (project number DP140103788).
CR An W., 2012, Patent Application, Patent No. [13/600619, 13600619]
   [Anonymous], 2008, CrossTalk: The Journal of Defense Software Engineering
   Bezemer Cor-Paul., 2010, SOFTWARE MAINTENANCE, P1, DOI DOI 10.1109/ICSM.2010.5609735
   Biggar P., 2011, PHP COMPILER
   Chong F., 2006, Multi -Tenant Data Architecture
   DENNING DE, 1976, COMMUN ACM, V19, P236, DOI 10.1145/360051.360056
   DENNING DE, 1977, COMMUN ACM, V20, P504, DOI 10.1145/359636.359712
   Evans E., 2011, DOMAIN DRIVEN DESIGN
   Fehling C., 2014, Cloud Computing Patterns: Fundamentals to Design, Build, and Manage Cloud Applications, DOI DOI 10.1007/978-3-7091-1568-8
   Fowler M., 2003, Patterns of Enterprise Application Architecture. A Martin Fowler signature book
   Furda A, 2017, SOFTWARE ARCHITECTURE FOR BIG DATA AND THE CLOUD, P227, DOI 10.1016/B978-0-12-805467-3.00013-2
   Furda A, 2018, IEEE SOFTWARE, V35, P63, DOI 10.1109/MS.2017.440134612
   Graf J., 2015, 8 INT WORKSH AN SEC
   Guo CJ, 2007, 9TH IEEE INTERNATIONAL CONFERENCE ON E-COMMERCE TECHNOLOGY/4TH IEEE INTERNATIONAL CONFERENCE ON ENTERPRISE COMPUTING, E-COMMERCE AND E-SERVICES, P551, DOI 10.1109/CEC-EEE.2007.4
   Hills M, 2015, IEEE INT CONF AUTOM, P563, DOI 10.1109/ASE.2015.72
   Hills M, 2017, SCI COMPUT PROGRAM, V134, P37, DOI 10.1016/j.scico.2016.05.003
   Hong Cai, 2010, Proceedings of the 2010 IEEE Congress on Services (SERVICES-1), P40, DOI 10.1109/SERVICES.2010.48
   Kabbedijk J., 2014, J SYST SOFTW
   Kabbedijk J, 2014, LECT NOTES COMPUT SC, V8627, P202, DOI 10.1007/978-3-319-09970-5_18
   Keynes N., 2009, 20 AUSTR SOFTW ENG C, P59
   Kousiouris G, 2012, INT CONF CLOUD COMPU, P603, DOI 10.1109/CCIS.2012.6664245
   Lewis James, 2014, Microservices
   Mcarthur K., 2008, PRO PHP
   Millard C., 2013, Cloud Computing Law
   Pasquier TFJM, 2017, IEEE T CLOUD COMPUT, V5, P472, DOI 10.1109/TCC.2015.2489211
   Pistoia M, 2007, IBM SYST J, V46, P265, DOI 10.1147/sj.462.0265
   Sabelfeld A, 2003, IEEE J SEL AREA COMM, V21, P5, DOI 10.1109/JSAC.2002.806121
   Schaffner J., 2014, MULTI TENANCY CLOUD
   Smith G, 2007, ADV INF SEC, P291
   Snelting G, 2015, SCI COMPUT PROGRAM, V97, P122, DOI 10.1016/j.scico.2013.11.008
   Tip F, 2015, SCI COMPUT PROGRAM, V97, P91, DOI 10.1016/j.scico.2013.11.005
   w3techs, 2016, US SERV SID PROGR LA
   Walraven S, 2014, COMPUTING, V96, P669, DOI 10.1007/s00607-013-0346-9
   Walraven S, 2011, LECT NOTES COMPUT SC, V7049, P370
   Yu F, 2008, LECT NOTES COMPUT SC, V5156, P306
   [No title captured]
NR 36
TC 1
Z9 1
U1 0
U2 8
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 1
PY 2018
VL 163
BP 160
EP 173
DI 10.1016/j.scico.2018.04.006
PG 14
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GN0MN
UT WOS:000438662800010
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Baugh, J
   Altuntas, A
AF Baugh, John
   Altuntas, Alper
TI Formal methods and finite element analysis of hurricane storm surge: A
   case study in software verification
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Formal methods; Model checking; Scientific computing; Earth and
   atmospheric sciences
AB Used to predict the effects of hurricane storm surge, ocean circulation models are essential tools for evacuation planning, vulnerability assessment, and infrastructure design. Implemented as numerical solvers that operate on large-scale datasets, these models determine the geographic extent and severity of coastal floods and other impacts. In this study, we look at an ocean circulation model used in production and an extension made to it that offers substantial performance gains. To explore implementation choices and ensure soundness of the extension, we make use of Alloy, a declarative modeling language with tool support and an automatic form of analysis performed within a bounded scope using a SAT solver. Abstractions for relevant parts of the ocean circulation model are presented, including the physical representation of land and seafloor surfaces as a finite element mesh, and an algorithm operating on it that allows for the propagation of overland flows. The approach allows us to draw useful conclusions about implementation choices and guarantees about the extension, in particular that it is equivalence preserving. (C) 2017 Elsevier B.V. All rights reserved.
C1 [Baugh, John; Altuntas, Alper] North Carolina State Univ, Dept Civil Construct & Environm Engn, Raleigh, NC 27695 USA.
C3 North Carolina State University
RP Baugh, J (corresponding author), North Carolina State Univ, Dept Civil Construct & Environm Engn, Raleigh, NC 27695 USA.
EM jwb@ncsu.edu
RI Altuntas, Alper/AAT-8390-2020
OI Baugh, John/0000-0002-4999-7505; Altuntas, Alper/0000-0003-1708-9518
CR Altuntas A, 2017, OCEAN MODEL, V115, P86, DOI 10.1016/j.ocemod.2017.05.009
   [Anonymous], 5 INT WORKSH AUT FOR
   [Anonymous], DEP COMPUTER SCI S B
   [Anonymous], PERF EV NEW OR SE LO
   [Anonymous], SOFTWARE ABSTRACTION
   [Anonymous], FLOOD INS STUD SE PA
   [Anonymous], ERDCCHLTR111 US ARM
   [Anonymous], INT C ABSTR STAT MAC
   [Anonymous], JUBILEE C P
   [Anonymous], EL DES HURR PROT LEV
   Arnold G, 2010, ACM SIGPLAN NOTICES, V45, P249, DOI 10.1145/1932681.1863581
   Ball T, 2001, LECT NOTES COMPUT SC, V2102, P260
   Baugh J, 2016, LECT NOTES COMPUT SC, V9675, P256, DOI 10.1007/978-3-319-33600-8_18
   Baugh J, 2015, COAST ENG, V97, P60, DOI 10.1016/j.coastaleng.2014.12.003
   BAUGH JW, 1992, COMPUT STRUCT, V45, P557, DOI 10.1016/0045-7949(92)90440-B
   Bientinesi P, 2005, ACM T MATH SOFTWARE, V31, P1, DOI 10.1145/1055531.1055532
   Chadha HS, 1999, ADV ENG SOFTW, V30, P211, DOI 10.1016/S0965-9978(98)00058-1
   Clarke EM, 1996, ACM COMPUT SURV, V28, P626, DOI 10.1145/242223.242257
   Dietrich J.C., 2006, Proc. of the Int. Conference on Estuarine and Coastal Modeling, P637
   Dietrich JC, 2004, DEV WATER SCI, V55, P1767
   Dyer T, 2016, ADV ENG SOFTW, V92, P27, DOI 10.1016/j.advengsoft.2015.10.003
   Gammaitoni L, 2014, LECT NOTES COMPUT SC, V8477, P324, DOI 10.1007/978-3-662-43652-3_33
   Graf S, 1997, LECT NOTES COMPUT SC, V1254, P72
   Graham L, 2017, MON WEATHER REV, V145, P929, DOI 10.1175/MWR-D-16-0149.1
   Graham Lindley Christin, 2015, THESIS
   Haddad Jana., 2015, OCEANS 2015-MTS/IEEE Washington, P1
   Jackson D, 2003, MG COMP SCI, P247
   Jackson D, 1996, IEEE T SOFTWARE ENG, V22, P484, DOI 10.1145/226295.226322
   LeVeque RJ, 2007, OTHER TITL APPL MATH, V98, P1, DOI 10.1137/1.9780898717839
   Medeiros SC, 2013, INT J NUMER METH FL, V71, P473, DOI 10.1002/fld.3668
   Near JP, 2010, LECT NOTES COMPUT SC, V5977, P118, DOI 10.1007/978-3-642-11811-1_10
   Sheng Y. Peter, 2012, Twelfth International Conference. Estuarine and Coastal Modeling. Proceedings, P476, DOI 10.1061/9780784412411.00028
   Sicun Gao, 2013, Automated Deduction - CADE-24. 24th International Conference on Automated Deduction. Proceedings: LNCS 7898, P208, DOI 10.1007/978-3-642-38574-2_14
   Siegel SF, 2008, ACM T SOFTW ENG METH, V17, DOI 10.1145/1348250.1348256
   Sorensson N., 2005, SAT 2005 COMPETITION
   Visser W., 2003, Automated Software Engineering, V10, P203, DOI 10.1023/A:1022920129859
   Wing, 1996, IEEE COMPUT, V29, P22
   Woodcock J, 2009, ACM COMPUT SURV, V41, DOI 10.1145/1592434.1592436
   Zienkiewicz OC, 2005, FINITE ELEMENT METHOD FOR FLUID DYNAMICS, 6TH EDITION, P1
NR 39
TC 4
Z9 5
U1 0
U2 15
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 15
PY 2018
VL 158
BP 100
EP 121
DI 10.1016/j.scico.2017.08.012
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GE4CX
UT WOS:000431163000007
OA Bronze
DA 2024-07-18
ER

PT J
AU Thimbleby, H
   Williams, D
AF Thimbleby, Harold
   Williams, David
TI A tool for publishing reproducible algorithms & A reproducible, elegant
   algorithm for sequential experiments
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Reproducibility & tools; Publishing algorithms; Literate programming;
   Euler cycle algorithm; Experimental design
AB Tools to ease the burden of reproducibility are important so computer science does not fall into the trap of "cargo cult" science: particularly publishing discussions of algorithms that look like algorithms but which do not work properly when they are copied from the paper. This paper introduces a tool, called relit, which makes it very easy to write about and publish correct algorithms, yet without restricting the author's style. In fact, relit can be used with any material: mathematics, proofs, algorithms or programs. It can be used in papers, in reports and books and, with analogous advantages, in student work where examiners may wish to automatically check what the student claims to have written is actually correct.
   To demonstrate relit, this paper presents a new, elegant algorithm for the design of sequential experiments to efficiently control bias, drift, random error, carry-over and other effects. The algorithm is written in C, in a clear style to simplify porting to other languages.
   We developed relit because it was impossible to find simple reproducible code for this problem, and we wanted to do better. Thanks to relit, the published algorithm is reproducible and works exactly as published in the present paper. This paper also includes discussion of the problems and opportunities of reproducibility and the essential contributions of relit-style approaches to improving the reliability of computer science publications. (C) 2017 Published by Elsevier B.V.
C1 [Thimbleby, Harold; Williams, David] Swansea Univ, Swansea SA2 8PP, W Glam, Wales.
C3 Swansea University
RP Thimbleby, H (corresponding author), Swansea Univ, Swansea SA2 8PP, W Glam, Wales.
EM harold@thimbleby.net; drdjwilliams67@gmail.com
RI Thimbleby, Harold/D-4389-2013
OI Thimbleby, Harold/0000-0003-2222-4243
FU EPSRC [EP/L019272/1]; EPSRC [EP/L019272/1] Funding Source: UKRI
FX We are very grateful to Paul Cairns, Rod Chapman and Bob Laramee for
   helping us greatly improve the paper. This research was funded by EPSRC
   under grant no. [EP/L019272/1].
CR ACM, 2016, ART REV BADG
   Aguirre GK, 2011, NEUROIMAGE, V56, P1293, DOI 10.1016/j.neuroimage.2011.02.005
   [Anonymous], 2012, MATH IDEAS ANIMATE G
   Compeau PEC, 2011, NAT BIOTECHNOL, V29, P987, DOI 10.1038/nbt.2023
   Cormen T. H., 2009, Introduction to Algorithms, VSecond
   De Bruijn N. G., 1946, COMBINATORIAL PROB A, V49, P758
   Eagle B, 2017, ANESTH ANALG, V125, P458, DOI 10.1213/ANE.0000000000002172
   Euler L., 1741, Commentarii academiae scientiarum Petropolitanae, P128
   Feynman R.P., 1972, SURELY YOURE JOKING
   Fisher R. A., 1946, Statistical methods for research workers.
   Fleury M., 1883, J. de Mathematiques Element. 2nd ser, V2, P257
   Flye Sainte-Marie C., 1894, INTERMEDIAIRE MATH, V1, P107
   Good IJ., 1946, Journal of the London Mathematical Society, V1, P167, DOI 10.1112/jlms/s1-21.3.167
   Hall R.W., 2015, MATH POETS DRUMMERS
   HANSON DR, 1987, COMMUN ACM, V30, P594
   Hierholzer C., 1873, MATH ANN, V6, P30, DOI DOI 10.1007/BF01442866
   Knuth D.E., 1998, COMBINATORIAL ALGORI, V4
   Knuth D.E., 1992, CTR STUDY LANGUAGE I, V27
   Knuth DE, 1998, Seminumerical algorithms, V2
   Knuth Donald Ervin, 1986, The TeXbook
   Kruse R.L., 1999, TEX USERS GROUP ANN, P1070
   Lamport L., 1994, X DOCUMENT PREPARATI
   Libes D., 1994, EXPLORING EXPECT TCL
   Mecklenburg R., 2004, Managing Projects with GNU make
   Mlodinow L, 2004, SOME TIME FEYNMAN
   Petkovsek Marko, 1996, A = B
   Pinker S., 2015, SENSE STYLE THINKING, VReprint
   Popper K., 2005, The logic of scientific discovery
   Project Jupyter team, 2016, PROJ JUP
   RAMSEY N, 1994, IEEE SOFTWARE, V11, P97, DOI 10.1109/52.311070
   Schulte E, 2012, J STAT SOFTW, V46, P1
   Sedgewick R., DIRECTEDEULERIANCYCL
   Sedgewick R., 1983, ALGORITHMS
   Sedgewick R., 2011, Algorithm
   Simkin M.V., 2003, COPIED CITATIONS CRE
   Smaldino PE, 2016, ROY SOC OPEN SCI, V3, DOI 10.1098/rsos.160384
   Syed M., 2015, Black Box Thinking
   Thimbleby H, 2003, SOFTWARE PRACT EXPER, V33, P975, DOI 10.1002/spe.537
   Thimbleby H, 2003, SOFTWARE PRACT EXPER, V33, P1081, DOI 10.1002/spe.540
   Thimbleby H, 2000, BCS CONFERENCE S, P221
   Thimbleby H., 2004, TIMES HIGHER ED SUPP
   Thimbleby H, 2008, RESEARCH METHODS FOR HUMAN-COMPUTER INTERACTION, P196
   Thimbleby H, 2012, SOFTWARE PRACT EXPER, V42, P1393, DOI 10.1002/spe.1141
   Turan M.S., 2011, P ACM AISEC, P81
   Wilson R.J., 2004, COLL MATH J, V35, P198, DOI 10.2307/4146895
   Wolfram S., 2003, The Mathematica Book
   Zink Michael, 2018, ACM MULTIMEDIA SYSTE
NR 47
TC 1
Z9 1
U1 0
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAY 1
PY 2018
VL 156
BP 45
EP 67
DI 10.1016/j.scico.2017.12.010
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GA7AE
UT WOS:000428486100003
OA Green Accepted
DA 2024-07-18
ER

PT J
AU Bride, H
   Julliand, J
   Masson, PA
AF Bride, Hadrien
   Julliand, Jacques
   Masson, Pierre-Alain
TI Tri-modal under-approximation for test generation
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Model-based testing; Predicate abstraction; Symbolic exploration; Over
   and under approximations
AB This paper presents a method for under-approximating behavioural models with the guarantee that the abstract paths can be instantiated as executions of the models. This allows a model-based testing approach to operate on an abstraction of an infinite or very large behavioural model. We characterize the abstract transitions as may, must+ or must. This allows us to benefit from Thomas Ball's result that any abstract sequence in the shape of must-*.may.must+* (a Ball chain) can be instantiated as a sequence of connected concrete transitions. We adapt Ball's work aiming at abstracting C programs to the case of event systems, where the instantiated Ball chains might not be reachable from a model's initial state because our method can abstract the control structure. We propose as a solution to this problem to symbolically explore the set of states reachable after a finite number of steps. The Ball chains that start in any of these states are reachable and instantiable. By keeping track of the paths that lead to these starting states, we are able to instantiate with certainty the sequences made of the reached Ball chains with their prefix. This method improves the usual methods that often look for instantiations even though they don't exist for some sequences. We also propose in this paper a way to compute the abstraction w.r.t. predicates that are automatically extracted out of a dynamic property expressed in the Dwyer et al. language. We give experimental results obtained via a proof of -concept prototype that we have implemented. They show that many Ball chains are exhibited, reached and concretized by our method, and that despite the complexity of symbolic exploration, the Ball chains can be reached within a small number of exploration steps. (C) 2016 Elsevier B.V. All rights reserved.
C1 [Bride, Hadrien; Julliand, Jacques; Masson, Pierre-Alain] Univ Franche Comte, FEMTO ST DISC, 16 Route Gray, F-25030 Besancon, France.
C3 Universite de Franche-Comte
RP Masson, PA (corresponding author), Univ Franche Comte, FEMTO ST DISC, 16 Route Gray, F-25030 Besancon, France.
EM hadrien.bride@femto-st.fr; jacques.julliand@femto-st.fr;
   pierre-alain.masson@femto-st.fr
CR Abrial J R, 2010, Modeling in Event-B: system and softeng
   Abrial J-R., 1996, The B Book
   Aichernig B.K., 2011, SIGSOFT Softw. Eng. Notes, V36, P1, DOI DOI 10.1145/1921532.1921559
   [Anonymous], 2006, P 13 ACM C COMPUTER
   Ball T., 2004, Formal Methods for Components and Objects. Third International Symposium, FMCO 2004. Revised Lectures (Lecture Notes in Computer Science Vol. 3657), P1
   Beckman NE, 2010, IEEE T SOFTWARE ENG, V36, P495, DOI 10.1109/TSE.2010.49
   Bert D, 2000, LECT NOTES COMPUT SC, V1945, P235
   Beyer Dirk, 2008, 2008 23rd IEEE/ACM International Conference on Automated Software Engineering, P29, DOI 10.1109/ASE.2008.13
   Bouquet F., 2010, Proceedings of the IEEE Third International Conference on Software Testing Verification and Validation - Workshops (ICSTW 2010), P54, DOI 10.1109/ICSTW.2010.47
   Bride H, 2015, 30TH ANNUAL ACM SYMPOSIUM ON APPLIED COMPUTING, VOLS I AND II, P1737, DOI 10.1145/2695664.2695731
   Broy M, 2005, LNCS, V3472
   Bué PC, 2011, LECT NOTES COMPUT SC, V6706, P51, DOI 10.1007/978-3-642-21768-5_5
   Castillos KC, 2011, LECT NOTES COMPUT SC, V7019, P32, DOI 10.1007/978-3-642-24580-0_4
   Cousot P., 1992, Journal of Logic and Computation, V2, P511, DOI 10.1093/logcom/2.4.511
   Dijkstra E. W., 1976, A Discipline of Pro-gramming
   DIJKSTRA EW, 1975, COMMUN ACM, V18, P453, DOI [10.1145/360933.360975, 10.1145/390016.808417]
   Dwyer M. B., 1999, Proceedings of the 1999 International Conference on Software Engineering (IEEE Cat. No.99CB37002), P411, DOI 10.1109/ICSE.1999.841031
   Dwyer M. B., 1998, Proceedings of FMSP'98. Second Workshop on Formal Methods in Software Practice, P7, DOI 10.1145/298595.298598
   Flanagan C, 2002, ACM SIGPLAN NOTICES, V37, P191, DOI 10.1145/565816.503291
   Godefroid P., 2007, SIGPLAN Notices, V42, P47, DOI [10.1145/1190216.1190226, 10.1145/1190215.1190226]
   Godefroid P, 2005, ACM SIGPLAN NOTICES, V40, P213, DOI 10.1145/1064978.1065036
   Godefroid P., 2001, CONCUR 2001 - Concurrency Theory. 12th International Conference. Proceedings (Lecture Notes in Computer Science Vol.2154), P426
   Graf S, 1997, LECT NOTES COMPUT SC, V1254, P72
   Grieskamp W., 2002, Software Engineering Notes, V27, P112, DOI 10.1145/566171.566190
   Gulavani B.S., 2006, P FSE ACM, P117, DOI DOI 10.1145/1181775.1181790
   Jeannet B, 2005, LECT NOTES COMPUT SC, V3440, P349
   Julliand J., 2008, AST 08 3 INT WORKSH, P41, DOI DOI 10.1145/1370042.1370051
   KING JC, 1976, COMMUN ACM, V19, P385, DOI 10.1145/360248.360252
   Larsen U, 1988, Eur J Popul, V3, P203, DOI 10.1109/LICS.1988.5119
   Majumdar R, 2007, PROC INT CONF SOFTW, P416
   Namjoshi K. S., 2000, Computer Aided Verification, P435
   Pasareanu Corina S., 2009, International Journal on Software Tools for Technology Transfer, V11, P339, DOI 10.1007/s10009-009-0118-1
   Pasareanu CS, 2007, LOG METH COMPUT SCI, V3, DOI 10.2168/LMCS-3(1:5)2007
   Potter B, 2004, IEEE SECUR PRIV, V2, P81, DOI 10.1109/MSP.2004.84
   Rapin N., 2003, ATVA
   Sen K., 2005, P 10 EUR SOFTW ENG C, V30, P263, DOI DOI 10.1145/1081706.1081750
   Taha S, 2015, FORM ASP COMPUT, V27, P641, DOI 10.1007/s00165-014-0328-5
   Tillmann N, 2008, LECT NOTES COMPUT SC, V4966, P134
   Utting M., 2006, Practical Model-Based Testing
NR 39
TC 5
Z9 5
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 15
PY 2016
VL 132
SI SI
BP 190
EP 208
DI 10.1016/j.scico.2016.07.003
PN 2
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA ED3ZB
UT WOS:000388785900004
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Huynh, N
   Frappier, M
   Mammar, A
   Laleau, R
   Desharnàis, J
AF Huynh, Nghi
   Frappier, Marc
   Mammar, Amel
   Laleau, Regine
   Desharnais, Jules
TI A formal validation of the RBAC ANSI 2012 standard using B
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Role-Based Access Control; B method; Invariant preservation
ID ACCESS-CONTROL; CRITIQUE
AB We validate the RBAC ANSI 2012 standard using the B method. Numerous problems are identified: logical errors, inconsistencies, ambiguities, typing errors, missing preconditions, invariant violation, inappropriate specification notation. A clean version of the standard written in the B notation is proposed. We argue that the ad hoc. mathematical notation used in the standard is inappropriate and we propose that a more methodological and tool-supported approach must definitely be used for writing standards, in order to avoid the issues identified in the paper. Human reviewing is insufficient to produce error-free international standards. (C) 2016 Elsevier B.V. All rights reserved.
C1 [Huynh, Nghi; Frappier, Marc] Univ Sherbrooke, Sherbrooke, PQ J1K 2R1, Canada.
   [Huynh, Nghi; Laleau, Regine] Univ Paris Est Creteil, Val De Marne, France.
   [Mammar, Amel] Univ Paris Saclay, CNRS, SAMOVAR, Telecom SudParis, Evry, France.
   [Desharnais, Jules] Univ Laval, Quebec City, PQ, Canada.
C3 University of Sherbrooke; Universite Paris-Est-Creteil-Val-de-Marne
   (UPEC); Universite Paris Cite; Centre National de la Recherche
   Scientifique (CNRS); Universite Paris Saclay; IMT - Institut
   Mines-Telecom; Institut Polytechnique de Paris; Telecom SudParis; Laval
   University
RP Frappier, M (corresponding author), Univ Sherbrooke, Sherbrooke, PQ J1K 2R1, Canada.
EM nghi.huynh@usherbrooke.ca; marc.frappier@usherbrooke.ca;
   amel.mammar@telecom-sudparis.eu; laleau@u-pec.fr;
   Jules.Desharnais@ift.ulaval.ca
RI Laleau, Regine/ABA-9759-2021; Desharnais, Jules/A-4023-2008
OI Laleau, Regine/0000-0002-2019-4936; MAMMAR, AMEL/0000-0003-0016-6898
FU Natural Sciences and Engineering Research Council of Canada (NSERC);
   Agence de la sante et des services sociaux de l'Estrie in Quebec
FX The authors would like to thank the anonymous referees for their
   valuable comments which helped improve this paper. This research was
   supported in part by the Natural Sciences and Engineering Research
   Council of Canada (NSERC) and by the Agence de la sante et des services
   sociaux de l'Estrie in Quebec.
CR [Anonymous], 2004, 3592004 ANSI INCITS
   [Anonymous], 3592012 ANSI INCITS
   Ferraiolo D, 2007, IEEE SECUR PRIV, V5, P51, DOI 10.1109/MSP.2007.173
   Franqueira VNL, 2012, COMPUTER, V45, P81, DOI 10.1109/MC.2012.38
   Hu HX, 2008, SACMAT'08: PROCEEDINGS OF THE 13TH ACM SYMPOSIUM ON ACCESS CONTROL MODELS AND TECHNOLOGIES, P195
   Huynh N., 2014, B SPECIFICATION RBAC
   Jackson D, 2012, SOFTWARE ABSTRACTIONS: LOGIC, LANGUAGE, AND ANALYSIS, P1
   KOZEN D, 1994, INFORM COMPUT, V110, P366, DOI 10.1006/inco.1994.1037
   Leuschel Michael, 2008, International Journal on Software Tools for Technology Transfer, V10, P185, DOI 10.1007/s10009-007-0063-9
   Li N., 2005, 200529 TR PURD U
   Li NH, 2007, IEEE SECUR PRIV, V5, P41, DOI 10.1109/MSP.2007.158
   McCune W., PROVER9 MACE4
   O'Connor A.C., 2010, Economic analysis of role-based access control
   Pohl K., 2005, SOFTWARE PRODUCT LIN, V10
   Power D, 2011, LECT NOTES COMPUT SC, V6542, P15, DOI 10.1007/978-3-642-19125-1_2
   Power D, 2009, COMPUT J, V52, P305, DOI 10.1093/comjnl/bxn016
   Rissanen E., 2010, EXTENSIBLE ACC CONTR
   Sandhu R., 2000, Symposium on Access Control Models and Technologies: Proceedings of the fifth ACM workshop on Role-based access control, V26, P47, DOI 10.1145/344287.344301
   Schmidt G., 1993, EATCS monographs on theoretical computer science
NR 19
TC 4
Z9 4
U1 0
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 1
PY 2016
VL 131
BP 76
EP 93
DI 10.1016/j.scico.2016.04.011
PG 18
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA EB8FQ
UT WOS:000387627300006
OA hybrid
DA 2024-07-18
ER

PT J
AU Striewe, M
AF Striewe, Michael
TI An architecture for modular grading and feedback generation for complex
   exercises
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Software architecture; Component architecture; E-assessment systems
AB Grading and feedback generation for complex open exercises is a major challenge in e-learning and e-assessment. One particular instance of e-assessment systems designed especially for grading programming exercises is JACK. This paper aims to discuss and evaluate key architectural concepts of JACK in terms of components, interfaces, and communication. It is shown how the architectural concept stands the test in an actual large scale deployment. (C) 2016 Elsevier B.V. All rights reserved.
C1 [Striewe, Michael] Univ Duisburg Essen, Paluno Ruhr Inst Software Technol, Duisburg, Germany.
C3 University of Duisburg Essen
RP Striewe, M (corresponding author), Univ Duisburg Essen, Paluno Ruhr Inst Software Technol, Duisburg, Germany.
EM michael.striewe@paluno.uni-due.de
OI Striewe, Michael/0000-0001-8866-6971
FU Federal Ministry of Research and Education [01PL11075]
FX The author would like to thank all current and previous members of the
   JACK development team who have coined core decisions of the system's
   architecture. The author would also like to thank the reviewers for
   their comments and questions that helped a lot to improve this paper.
   Part of the work presented here was funded by the Federal Ministry of
   Research and Education under grant number 01PL11075.
CR Ala-Mutka KM, 2005, COMPUT SCI EDUC, V15, P83, DOI 10.1080/08993400500150747
   Amelung M, 2008, ITICSE '08: PROCEEDINGS OF THE 13TH ANNUAL CONFERENCE ON INNOVATION AND TECHNOLOGY IN COMPUTER SCIENCE EDUCATION, P219
   [Anonymous], 2010, P KOLI CALLING, DOI 10.1145/1930464.1930480
   [Anonymous], 2004, THESIS
   Baudisch D, 2009, CSEDU 2009: PROCEEDINGS OF THE FIRST INTERNATIONAL CONFERENCE ON COMPUTER SUPPORTED EDUCATION, VOL I, P104
   Benford Steve, 1992, P C DEV TEACH COMP S, P158
   Choy M, 2008, LECT NOTES COMPUT SC, V4823, P584, DOI 10.1007/978-3-540-78139-4_51
   Christian Q, 2010, CSEDU 2010: PROCEEDINGS OF THE 2ND INTERNATIONAL CONFERENCE ON COMPUTER SUPPORTED EDUCATION, VOL 2, P37
   DAVIES WM, 2005, P 9 INT CAA C
   Douce Christopher, 2005, P 9 CAA C
   Edwards Stephen H., 2008, ITICSE 08
   Fossati D, 2009, IEEE T LEARN TECHNOL, V2, P107, DOI 10.1109/TLT.2009.21
   Gusev M, 2013, INT J EMERG TECHNOL, V8, P55, DOI 10.3991/ijet.v8iS2.2783
   Higgins C. A., 2005, J ED RESOURCES COMPU, V5, P5
   Hoffmann Andreas, 2008, LNI, V132, P173
   Jackson D., 1997, SIGCSE Bulletin, V29, P335, DOI 10.1145/268085.268210
   Joy M., 2005, J ED RESOUR COMPUT, V5
   Lessa Demian, 2010, 201013 U BUFF DEP CO
   Oechsle R, 2002, LECT NOTES COMPUT SC, V2269, P176
   Pardo A., 2002, SIGCSE Bulletin, V34, P60, DOI 10.1145/637610.544434
   Ristov Sasko, 2014, IEEE GLOB ENG ED C E
   Spacco J., 2006, SIGCSE Bulletin, V38, P13, DOI 10.1145/1140123.1140131
   Striewe M., 2015, GEM TAG WORKSH TAG S, P118
   Striewe M, 2014, THESIS
   Striewe M, 2009, CSEDU 2009: PROCEEDINGS OF THE FIRST INTERNATIONAL CONFERENCE ON COMPUTER SUPPORTED EDUCATION, VOL II, P54
   Striewe Michael, 2008, 28 ICB U DUISB ESS
   Striewe Michael., 2011, Proceedings of the 16th Annual Joint Conference on Innovation and Technology in Computer Science Education, ITiCSE '11, P303
   Zeller A, 2000, SIGCSE BULL, V32, P89, DOI 10.1145/353519.343090
NR 28
TC 11
Z9 11
U1 0
U2 19
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 1
PY 2016
VL 129
SI SI
BP 35
EP 47
DI 10.1016/j.scico.2016.02.009
PG 13
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DW0CM
UT WOS:000383308500004
OA Bronze
DA 2024-07-18
ER

PT J
AU Camarao, C
   Figueiredo, L
   Ribeiro, R
AF Camarao, Carlos
   Figueiredo, Lucilia
   Ribeiro, Rodrigo
TI Ambiguity and constrained polymorphism
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Ambiguity; Context-dependent overloading; Haskell
AB This paper considers the problem of ambiguity in Haskell-like languages. Overloading resolution is characterized in the context of constrained polymorphism by the presence of unreachable variables in constraints on the type of the expression. A new definition of ambiguity is presented, where existence of more than one instance for the constraints on an expression type is considered only after overloading resolution. This introduces a clear distinction between ambiguity and overloading resolution, makes ambiguity more intuitive and independent from extra concepts, such as functional dependencies, and enables more programs to type-check as fewer ambiguities arise.
   The paper presents a type system and a type inference algorithm that includes: a constraint-set satisfiability function, that determines whether a given set of constraints is entailed or not in a given context, focusing on issues related to decidability, a constraint-set improvement function, for filtering out constraints for which overloading has been resolved, and a context-reduction function, for reducing constraint sets according to matching instances. A standard dictionary-style semantics for core Haskell is also presented. (C) 2016 Elsevier B.V. All rights reserved.
C1 [Camarao, Carlos] Univ Fed Minas Gerais, Dept Ciencias Comp, Av Antonio Carlos 6627, Belo Horizonte, MG, Brazil.
   [Figueiredo, Lucilia] Univ Fed Ouro Preto, ICEB, Dept Comp, Campus Univ Morro do Cruzeiro, Ouro Preto, MG, Brazil.
   [Ribeiro, Rodrigo] Univ Fed Ouro Preto, ICEA, Dept Comp & Sistemas, Joao Monlevade, MG, Brazil.
C3 Universidade Federal de Minas Gerais; Universidade Federal de Ouro
   Preto; Universidade Federal de Ouro Preto
RP Ribeiro, R (corresponding author), Univ Fed Ouro Preto, ICEA, Dept Comp & Sistemas, Joao Monlevade, MG, Brazil.
EM camarao@dcc.ufmg.br; luciliacf@gmail.com; rodrigo@decsi.ufop.br
CR BLOTT S, 1992, THESIS U GLASGOW
   Chakravarty MMT, 2005, ACM SIGPLAN NOTICES, V40, P241, DOI 10.1145/1090189.1086397
   Chakravarty MMT, 2005, ACM SIGPLAN NOTICES, V40, P1, DOI 10.1145/1047659.1040306
   Damas L., 1982, C REC 9 ANN ACM S PR, P207, DOI DOI 10.1145/582153.582176
   Devriese D, 2011, ACM SIGPLAN NOTICES, V46, P143, DOI 10.1145/2034574.2034796
   Dreyer D, 2007, ACM SIGPLAN NOTICES, V42, P63, DOI 10.1145/1190215.1190229
   Duck GJ, 2004, LECT NOTES COMPUT SC, V2986, P49
   Faxén KF, 2002, J FUNCT PROGRAM, V12, P295, DOI 10.1017/S0956796802004380
   Fruhwirth T, 1998, J LOGIC PROGRAM, V37, P95, DOI 10.1016/S0743-1066(98)10005-5
   Hall CV, 1996, ACM T PROGR LANG SYS, V18, P109, DOI 10.1145/227699.227700
   Hallgren Thomas., 2001, P JOINT CSCE WINTER, P135
   HARPER R, 1993, ACM T PROGR LANG SYS, V15, P211, DOI 10.1145/169701.169696
   Jones M., 1994, THESIS
   Jones M. P., 1995, Conference Record of FPCA '95. SIGPLAN-SIGARCH-WG2.8. Conference on Functional Programming Languages and Computer Architecture, P160, DOI 10.1145/224164.224198
   Jones M. P., 1995, LISP and Symbolic Computation, V8, P229, DOI 10.1007/BF01019005
   Jones MP, 2008, HASKELL'08: PROCEEDINGS OF THE ACM SIGPLAN 2008 HASKELL SYMPOSIUM, P87
   Jones MP, 2000, LECT NOTES COMPUT SC, V1782, P230
   Jones Simon P., 2011, GHC GLASGOW HASKELL
   Kahl W., 2001, P 2001 HASK WORKSH, P71
   Kanellakis ParisC., 1991, COMPUTATIONAL LOGIC, P444
   KFOURY AJ, 1994, J ACM, V41, P368, DOI 10.1145/174652.174659
   Kiselyov Oleg, 2004, HASKELL 04, P96, DOI DOI 10.1145/1017472.1017488
   Kung Chen, 1992, Proceedings of the 1992 ACM Conference on Lisp and Functional Programming, P170
   McBride C, 2002, J FUNCT PROGRAM, V12, P375, DOI 10.1017/S0956796802004355
   Mitchell John C., 1996, Foundation of computing series
   PETERSON J, 1993, SIGPLAN NOTICES, V28, P227, DOI 10.1145/173262.155112
   Ribeiro Rodrigo, 2013, J BRAZ COMPUT SOC, V19, P313
   ROBINSON JA, 1965, J ACM, V12, P23, DOI 10.1145/321250.321253
   Silva Alexandra, 2006, P 2006 ACM SIGPLAN W, P25, DOI [10.1145/1159842.1159846, DOI 10.1145/1159842.1159846]
   Silva M., 2011, P SBLP 2011, P29
   SMITH GS, 1991, THESIS CORNELL U
   Stuckey PJ, 2005, ACM T PROGR LANG SYS, V27, P1216, DOI 10.1145/1108970.1108974
   Sulzmann M, 2007, J FUNCT PROGRAM, V17, P83, DOI 10.1017/S0956796806006137
   Vytiniotis D, 2011, J FUNCT PROGRAM, V21, P333, DOI 10.1017/S0956796811000098
   WADLER P, 1989, CONFERENCE RECORD OF THE SIXTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P60, DOI 10.1145/75277.75283
NR 35
TC 1
Z9 1
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD AUG 1
PY 2016
VL 124
BP 1
EP 19
DI 10.1016/j.scico.2016.03.007
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DN1HH
UT WOS:000376816400001
OA Green Published
DA 2024-07-18
ER

PT J
AU Falcone, Y
   Jéron, T
   Marchand, H
   Pinisetty, S
AF Falcone, Ylies
   Jeron, Thierry
   Marchand, Herve
   Pinisetty, Srinivas
TI Runtime enforcement of regular timed properties by suppressing and
   delaying events
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 29th ACM Symposium on Applied Computing
CY MAR 24-28, 2014
CL Gyeongju, SOUTH KOREA
SP ACM, SIGAPP
DE Verification; Monitoring; Runtime enforcement; Timed specifications
ID MODEL CHECKING; VERIFICATION
AB Runtime enforcement is a verification/validation technique aiming at correcting possibly incorrect executions of a system of interest. In this paper, we consider enforcement monitoring for systems where the physical time elapsing between actions matters. Executions are thus modelled as timed words (i.e., sequences of actions with dates). We consider runtime enforcement for timed specifications modelled as timed automata. Our enforcement mechanisms have the power of both delaying events to match timing constraints, and suppressing events when no delaying is appropriate, thus possibly allowing for longer executions. To ease their design and their correctness-proof, enforcement mechanisms are described at several levels: enforcement functions that specify the input output behaviour in terms of transformations of timed words, constraints that should be satisfied by such functions, enforcement monitors that describe the operational behaviour of enforcement functions, and enforcement algorithms that describe the implementation of enforcement monitors. The feasibility of enforcement monitoring for timed properties is validated by prototyping the synthesis of enforcement monitors from timed automata. (C) 2016 Elsevier B.V. All rights reserved.
C1 [Falcone, Ylies] Univ Grenoble Alpes, INRIA, LIG, F-38000 Grenoble, France.
   [Jeron, Thierry; Marchand, Herve] INRIA Rennes Bretagne Atlantique, Campus Beaulieu, F-35042 Rennes, France.
   [Pinisetty, Srinivas] Aalto Univ, Aalto, Finland.
C3 Inria; Communaute Universite Grenoble Alpes; Institut National
   Polytechnique de Grenoble; Universite Grenoble Alpes (UGA); Centre
   National de la Recherche Scientifique (CNRS); Universite de Rennes;
   Aalto University
RP Falcone, Y (corresponding author), Univ Grenoble Alpes, INRIA, LIG, F-38000 Grenoble, France.
EM ylies.falcone@imag.fr; thierry.jeron@inria.ir; herve.marchand@inria.fr;
   srinivas.pinisetty@aalto.fi
OI Jeron, Thierry/0000-0002-9922-6186; pinisetty,
   srinivas/0000-0001-7779-8231
CR ALUR R, 1994, THEOR COMPUT SCI, V126, P183, DOI 10.1016/0304-3975(94)90010-8
   Alur R, 1999, THEOR COMPUT SCI, V211, P253, DOI 10.1016/S0304-3975(97)00173-4
   Bak S, 2013, IEEE INT CONF EMBED, P287, DOI 10.1109/RTCSA.2013.6732229
   Bak S, 2011, ACM IEEE INT CONF CY, P3, DOI 10.1109/ICCPS.2011.25
   Bartocci E., 2015, LECT NOTES COMPUT SC, V9333
   Basin D. A., ALGORITHMS MONITORIN, P260
   Basin D. A., SCALABLE OFFLINE MON, P31
   Basin D, 2013, ACM T INFORM SYST SE, V16, DOI 10.1145/2487222.2487225
   Bauer A, 2011, ACM T SOFTW ENG METH, V20, DOI 10.1145/2000799.2000800
   Behrmann G, 2004, LECT NOTES COMPUT SC, V3185, P200
   Bengtsson J, 2004, LECT NOTES COMPUT SC, V3098, P87, DOI 10.1007/978-3-540-27755-2_3
   Bielova N, 2011, INT J INF SECUR, V10, P239, DOI 10.1007/s10207-011-0137-2
   Bonakdarpour B., 2014, LECT NOTES COMPUT SC, V8734
   Bouyer P, 2007, FORM METHOD SYST DES, V31, P135, DOI 10.1007/s10703-007-0035-4
   Colombo C., 2012, LECT NOTES COMPUT SC, V7687, P214, DOI DOI 10.1007/978-3-642-35632-2
   Colombo C, 2012, FORM METHOD SYST DES, V41, P269, DOI 10.1007/s10703-012-0142-8
   Colombo C, 2009, SEFM 2009: SEVENTH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING AND FORMAL METHODS, P33, DOI 10.1109/SEFM.2009.13
   Colombo C, 2009, LECT NOTES COMPUT SC, V5596, P135, DOI 10.1007/978-3-642-03240-0_13
   Erlingsson U, 2000, P IEEE S SECUR PRIV, P246, DOI 10.1109/SECPRI.2000.848461
   Falcone Ylies, 2012, International Journal on Software Tools for Technology Transfer, V14, P349, DOI 10.1007/s10009-011-0196-8
   Falcone Y., 2013, Eng. Dependable Softw. Syst., P141, DOI [10.3233/978-1- 61499-207-3-141, DOI 10.3233/978-1-61499-207-3-141]
   Falcone Y, 2010, LECT NOTES COMPUT SC, V6418, P89, DOI 10.1007/978-3-642-16612-9_9
   Falcone Y, 2011, FORM METHOD SYST DES, V38, P223, DOI 10.1007/s10703-011-0114-4
   Goodloe A., 2010, NASACR2010216724 LAN
   Gruhn V, 2006, ELECTRON NOTES THEOR, V153, P117, DOI 10.1016/j.entcs.2005.10.035
   Hamlen KW, 2006, ACM T PROGR LANG SYS, V28, P175, DOI 10.1145/1111596.1111601
   Havelund K, 2002, LECT NOTES COMPUT SC, V2280, P342
   Havelund Klaus, 2005, LNCS, V4171, P374, DOI [DOI 10.1007/978-3-540-69149-5, 10.1007/978-3-540-69149-540, DOI 10.1007/978-3-540-69149-540]
   HENZINGER TA, 1994, INFORM COMPUT, V111, P193, DOI 10.1006/inco.1994.1045
   Kassem A., MONITORING ELECT EXA, P118
   Khurshid S., 2012, LECT NOTES COMPUT SC, V7186
   Kim Moonjoo, 2002, ELECTRON NOTES THEOR, V70, P80, DOI [10.1016/S1571-0661(04)80578-4, DOI 10.1016/S1571-0661(04)80578-4]
   Larsen K. G., 1997, International Journal on Software Tools for Technology Transfer, V1, P134, DOI 10.1007/s100090050010
   Leucker M, 2009, J LOGIC ALGEBR PROGR, V78, P293, DOI 10.1016/j.jlap.2008.08.004
   Ligatti J, 2009, ACM T INFORM SYST SE, V12, DOI 10.1145/1455526.1455532
   Maler O, 2006, LECT NOTES COMPUT SC, V4202, P274
   Meredith P, 2010, LECT NOTES COMPUT SC, V6418, P136, DOI 10.1007/978-3-642-16612-9_12
   Mitsch S., MODELPLEX VERIFIED R, P199
   Nickovic D, 2007, LECT NOTES COMPUT SC, V4763, P304
   Nickovic D, 2010, LECT NOTES COMPUT SC, V6246, P152, DOI 10.1007/978-3-642-15297-9_13
   Pinisetty S., TIPEX TOOL CHAIN TIM, P306
   Pinisetty S, 2014, 12 INT WORKSH DISCR, P420
   Pinisetty S, 2014, FORM METHOD SYST DES, V45, P381, DOI 10.1007/s10703-014-0215-y
   Pinisetty Srinivas, 2014, P 29 ANN ACM S APPL, P1279, DOI [10.1145/2554850.2554967, DOI 10.1145/2554850.2554967]
   Pinisetty Srinivas., 2012, INT C RUNTIME VERIFI, P229
   Pnueli A, 2006, LECT NOTES COMPUT SC, V4085, P573
   Rosu G, 2012, SCI ANN COMPUT SCI, V22, P327
   Sammapun U, 2005, 11TH IEEE INTERNATIONAL CONFERENCE ON EMBEDDED AND REAL-TIME COMPUTING SYSTEMS AND APPLICATIONS, PROCEEDINGS, P147, DOI 10.1109/RTCSA.2005.84
   Schneider F. B., 2000, ACM Transactions on Information and Systems Security, V3, P30, DOI 10.1145/353323.353382
   Seto D, 1998, P AMER CONTR CONF, P3504, DOI 10.1109/ACC.1998.703255
   Sistla A. P., RUNTIME MONITORING S, P276
   Sokolsky O., 2012, International Journal on Software Tools for Technology Transfer, V14, P243, DOI [10.1007/s10009-011-0218-6, DOI 10.1007/S10009-011-0218-6]
   Sokolsky O, 2006, ELECTRON NOTES THEOR, V144, P91, DOI 10.1016/j.entcs.2006.02.006
   Thati P, 2005, ELECTRON NOTES THEOR, V113, P145, DOI 10.1016/j.entcs.2004.01.029
   Viswanathan M, 2005, LECT NOTES COMPUT SC, V3407, P543
   Zeng Bin., 2013, Proceedings of the 22nd USENIX conference on Security, SEC'13, P369
NR 56
TC 24
Z9 25
U1 0
U2 4
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUL 1
PY 2016
VL 123
BP 2
EP 41
DI 10.1016/j.scico.2016.02.008
PG 40
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA DJ7BT
UT WOS:000374367600002
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Freudenthal, M
AF Freudenthal, Margus
TI Simpl DSL toolkit
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Simpl DSL toolkit; Tool challenge
AB This paper describes LDTA tool challenge entry that is implemented using Simpl DSL toolkit. Simpl is targeted at enterprise software development, helping to create DSL implementations that can be embedded into other systems. Simpl builds up on top of existing tools and programming languages and adds: a simple language for grammar descriptions that can be used to generate both the parser and the data types for representing abstract syntax trees; a pretty-printing library; an IDE framework; and integration layer that combines all components into a single whole and minimizes the need for boilerplate code.
   When implementing the challenge, Simpl provided direct support for parsing and code generation tasks. Name and type checking were implemented in Scala. In addition to the challenge task, Simpl was used to create an Eclipse-based IDE for the target language. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Freudenthal, Margus] Cybernetica AS, EE-51003 Tartu, Estonia.
C3 Cybernetica
RP Freudenthal, M (corresponding author), Cybernetica AS, Ulikooli 2, EE-51003 Tartu, Estonia.
EM margus@cyber.ee
FU Estonian Doctoral School in Information and Communication Technology
FX This research was supported by the Estonian Doctoral School in
   Information and Communication Technology.
CR CHARLES P, 2007, AUTOMAT SOFTW ENG, P485
   Freudenthal M., 2010, P 10 WORKSH LANG DES, P11
   Freudenthal M., 2013, THESIS
   PARR TJ, 1995, SOFTWARE PRACT EXPER, V25, P789, DOI 10.1002/spe.4380250705
   Wadler Philip, 2003, The Fun of Programming Cornerstones of Computing, P223
NR 5
TC 2
Z9 2
U1 0
U2 3
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 15
PY 2015
VL 114
BP 85
EP 91
DI 10.1016/j.scico.2014.11.018
PG 7
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CZ5DX
UT WOS:000367123800008
OA hybrid
DA 2024-07-18
ER

PT J
AU Boudjadar, A
   David, A
   Kim, JH
   Larsen, KG
   Mikucionis, M
   Nyman, U
   Skou, A
AF Boudjadar, Abdeldjalil
   David, Alexandre
   Kim, Jin Hyun
   Larsen, Kim G.
   Mikucionis, Marius
   Nyman, Ulrik
   Skou, Arne
TI A reconfigurable framework for compositional schedulability and power
   analysis of hierarchical scheduling systems with frequency scaling
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Hierarchical scheduling systems; Schedulability analysis; Power
   consumption; Voltage/frequency scaling; UPPAAL
ID MODEL
AB This paper presents a compositional framework for the modeling and analysis of hierarchical scheduling systems. We consider both schedulability and energy consumption of individual components, while analyzing a single core setting with a voltage frequency scaling CPU. According to the CPU frequency scaling, each task has a set of different execution times. Thus, the energy consumption of the whole system varies from one execution to another.
   We analyze each component individually by checking the feasibility of its workload against both the CPU availability and energy consumption constraints of such a component. Our periodic task model considers both static and dynamic priorities together with preemptive and non-preemptive behaviors. The models are realized using different forms of Hybrid Automata, all of which are analyzed using variants of UPPAAL. The CPU frequencies, task behavior and scheduling policies used in each component are some of the reconfigurable parameters of the system. Finally, we demonstrate the applicability and scalability of our framework by analyzing the schedulability and power consumption of an avionics system. (C) 2015 Elsevier B.V. All rights reserved.
C1 [Boudjadar, Abdeldjalil] Linkoping Univ, S-58183 Linkoping, Sweden.
   [David, Alexandre; Larsen, Kim G.; Mikucionis, Marius; Nyman, Ulrik; Skou, Arne] Aalborg Univ, Comp Sci, Aalborg, Denmark.
   [Kim, Jin Hyun] INRIA IRISA, Rennes, France.
C3 Linkoping University; Aalborg University; Universite de Rennes
RP Nyman, U (corresponding author), Aalborg Univ, Comp Sci, Aalborg, Denmark.
EM abdeldjalil.boudjadar@liu.se; adavid@cs.aau.dk; jin-hyun.kim@inria.fr;
   kgl@cs.aau.dk; marius@cs.aau.dk; ulrik@cs.aau.dk; ask@cs.aau.dk
RI Nyman, Ulrik/HNJ-5352-2023; Skou, Arne J/J-3659-2017; Mikucionis,
   Marius/AAF-7969-2020
OI Nyman, Ulrik/0000-0001-6430-540X; Guldstrand Larsen,
   Kim/0000-0002-5953-3384; Skou, Arne/0000-0002-3727-9936; Mikucionis,
   Marius/0000-0001-8157-5428
FU EU Artemis Project CRAFTERS; EU Artemis Project MBAT
FX The research presented in this paper has been partially supported by EU
   Artemis Projects CRAFTERS and MBAT.
CR Abdeddaim Y., 2012, 2012 IEEE 18th International Conference on Embedded and Real-Time Computing Systems and Applications (RTCSA 2012), P31, DOI 10.1109/RTCSA.2012.21
   ALUR R, 1994, THEOR COMPUT SCI, V126, P183, DOI 10.1016/0304-3975(94)90010-8
   Alur R., OPTIMAL PATHS WEIGHT, P49
   Amnell T, 2003, LECT NOTES COMPUT SC, V2791, P60
   [Anonymous], P 6 INT WORKSH JAV T
   [Anonymous], MINIMUM COST REACHAB
   [Anonymous], 2000, Proceedings of the 11th International Conference on Concurrency Theory, CONCUR 00
   [Anonymous], 2005, J EMBEDDED COMPUT
   [Anonymous], TECHNICAL REPORT
   [Anonymous], J CONVERG
   [Anonymous], LECT NOTES COMPUTER
   Asberg M., 2014, SIGBED REV, V11, P13
   Behnam M., 2008, P 4 INT WORKSH OP SY, P63
   Boudjadar AJ, 2014, 2014 THEORETICAL ASPECTS OF SOFTWARE ENGINEERING CONFERENCE (TASE), P126, DOI 10.1109/TASE.2014.27
   Boudjadar A, 2014, LECT NOTES COMPUT SC, V8348, P61, DOI 10.1007/978-3-319-07602-7_6
   Carnevali L, 2013, IEEE T SOFTWARE ENG, V39, P638, DOI 10.1109/TSE.2012.54
   Cassez F., 2005, CONCUR
   CHANDRAKASAN AP, 1992, IEEE J SOLID-ST CIRC, V27, P473, DOI 10.1109/4.126534
   Clarke E., 1999, Compositional model checking
   David Alexandre, 2015, Tools and Algorithms for the Construction and Analysis of Systems. 21st International Conference, TACAS 2015, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2015. Proceedings: LNCS 9035, P206, DOI 10.1007/978-3-662-46681-0_16
   David Alexandre, 2012, Leveraging Applications of Formal Methods, Verification and Validation. Applications and Case Studies. Proceedings of the 5th International Symposium, ISoLA 2012, P293, DOI 10.1007/978-3-642-34032-1_28
   David Alexandre, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P349, DOI 10.1007/978-3-642-22110-1_27
   David A., STAT MODEL CHECKING, P80
   David A, 2012, ELECTRON PROC THEOR, P122, DOI 10.4204/EPTCS.92.9
   Davis R.I., 2005, 26th IEEE International Real-Time Systems Symposium (RTSS'05), V10, P398, DOI DOI 10.1109/RTSS.2005.25
   Deng Z, 1997, REAL TIM SYST SYMP P, P308, DOI 10.1109/REAL.1997.641292
   Easwaran A, 2007, 10TH IEEE INTERNATIONAL SYMPOSIUM ON OBJECT AND COMPONENT-ORIENTED REAL-TIME DISTRIBUTED COMPUTING, PROCEEDINGS, P274, DOI 10.1109/ISORC.2007.25
   Fahrenberg U., 2011, LECT NOTES COMPUTER, V6919
   Feng X, 2002, REAL TIM SYST SYMP P, P26, DOI 10.1109/REAL.2002.1181559
   Fersman E, 2007, INFORM COMPUT, V205, P1149, DOI 10.1016/j.ic.2007.01.009
   Hessel Anders, 2008, Formal Methods and Testing. An Outcome of the FORTEST Network. Revised Selected Papers, P77, DOI 10.1007/978-3-540-78917-8_3
   Larsen K, 2001, LECT NOTES COMPUT SC, V2102, P493
   Lind-Nielsen J, 2001, FORM METHOD SYST DES, V18, P5, DOI 10.1023/A:1008736219484
   Niu LW, 2012, IEEE IPCCC, P41, DOI 10.1109/PCCC.2012.6407732
   Purna KMG, 1999, IEEE T COMPUT, V48, P579, DOI 10.1109/12.773795
   Shin I, 2003, RTSS 2003: 24TH IEEE INTERNATIONAL REAL-TIME SYSTEMS SYMPOSIUM, PROCEEDINGS, P2, DOI 10.1109/REAL.2003.1253249
   Shin I, 2008, ACM T EMBED COMPUT S, V7, DOI 10.1145/1347375.1347383
   Shin I, 2008, ECRTS 2008: PROCEEDINGS OF THE 20TH EUROMICRO CONFERENCE ON REAL-TIME SYSTEMS, P181, DOI 10.1109/ECRTS.2008.28
   Sun Y, 2014, C ELECT INSUL DIEL P, P15, DOI 10.1109/CEIDP.2014.6995782
   Yao F, 1995, AN S FDN CO, P374, DOI 10.1109/SFCS.1995.492493
   Zhou TR, 2012, CHINESE J AERONAUT, V25, P109, DOI 10.1016/S1000-9361(11)60368-3
NR 41
TC 7
Z9 7
U1 0
U2 5
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 1
PY 2015
VL 113
BP 236
EP 260
DI 10.1016/j.scico.2015.10.003
PN 3
PG 25
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CY2HW
UT WOS:000366230400003
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Cerulo, L
   Di Penta, M
   Bacchelli, A
   Ceccarelli, M
   Canfora, G
AF Cerulo, Luigi
   Di Penta, Massimiliano
   Bacchelli, Alberto
   Ceccarelli, Michele
   Canfora, Gerardo
TI IRISH: A Hidden Markov Model to detect coded information islands in free
   text
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Hidden Markov Models; Mining unstructured data; Developers'
   communication
AB Developers' communication, as contained in emails, issue trackers, and forums, is a precious source of information to support the development process. For example, it can be used to capture knowledge about development practice or about a software project itself. Thus, extracting the content of developers' communication can be useful to support several software engineering tasks, such as program comprehension, source code analysis, and software analytics. However, automating the extraction process is challenging, due to the unstructured nature of free text, which mixes different coding languages (e.g., source code, stack dumps, and log traces) with natural language parts.
   We conduct an extensive evaluation of IRISH (InfoRmation ISlands Hmm), an approach we proposed to extract islands of coded information from free text at token granularity, with respect to the state of art approaches based on island parsing or island parsing combined with machine learners. The evaluation considers a wide set of natural language documents (e.g., textbooks, forum discussions, and development emails) taken from different contexts and encompassing different coding languages. Results indicate an F-measure of IRISH between 74% and 99%; this is in line with existing approaches which, differently from IRISH, require specific expertise for the definition of regular expressions or grammars. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Cerulo, Luigi; Ceccarelli, Michele] Univ Sannio, Dept Sci & Technol, Benevento, Italy.
   [Di Penta, Massimiliano; Canfora, Gerardo] Univ Sannio, Dept Engn, Benevento, Italy.
   [Cerulo, Luigi] Inst Genet Res Gaetano Salvatore, BioGeM, Ariano Irpino, AV, Italy.
   [Bacchelli, Alberto] Delft Univ Technol, Dept Software Technol, NL-2600 AA Delft, Netherlands.
   [Ceccarelli, Michele] QCRI Qatar Comp Res Inst, Doha, Qatar.
C3 University of Sannio; University of Sannio; Delft University of
   Technology; Qatar Foundation (QF); Hamad Bin Khalifa University-Qatar;
   Qatar Computing Research Institute
RP Cerulo, L (corresponding author), Univ Sannio, Dept Sci & Technol, Benevento, Italy.
EM lcerulo@unisannio.it; dipenta@unisannio.it; A.Bacchelli@tudelft.nl;
   ceccarelli@unisannio.it; canfora@unisannio.it
RI Bacchelli, Alberto/ABG-5379-2020; Di Penta, Massimiliano/AAF-9656-2021;
   Ceccarelli, Michele/AGP-1739-2022
OI Bacchelli, Alberto/0000-0003-0193-6823; Canfora,
   Gerardo/0000-0003-0049-1279; Ceccarelli, Michele/0000-0002-4702-6617; Di
   Penta, Massimiliano/0000-0002-0340-9747
CR [Anonymous], 1995, Technical report
   [Anonymous], 2005, P 11 ACM SIGKDD INT
   [Anonymous], 1999, Proceedings of the 37th annual meeting of the Association for Computational Linguistics on Computational Linguistics
   [Anonymous], 1998, Biological Sequence Analysis: Probabilistic Models of Proteins and Nucleic Acids
   Antoniol G, 2002, IEEE T SOFTWARE ENG, V28, P970, DOI 10.1109/TSE.2002.1041053
   Anvik John, 2006, P 28 INT C SOFTWARE, P361, DOI DOI 10.1145/1134285.1134336
   Bacchelli A., 2011, 2011 26th IEEE/ACM International Conference on Automated Software Engineering, P476, DOI 10.1109/ASE.2011.6100103
   Bacchelli A, 2012, PROC INT CONF SOFTW, P375, DOI 10.1109/ICSE.2012.6227177
   Bacchelli A, 2011, EUR CON SFTWR MTNCE, P15, DOI 10.1109/CSMR.2011.6
   Baeza-Yates Ricardo, 1999, MODERN INFORM RETRIE, V463
   Basili V.R., 1994, Encyclopedia of Software Engineering, P528532
   BAUM LE, 1970, ANN MATH STAT, V41, P164, DOI 10.1214/aoms/1177697196
   Bettenburg N., 2008, P 2008 INT WORKING C, P27
   Bettenburg N, 2011, CONF PROC INT SYMP C, P185, DOI 10.1109/ICPC.2011.36
   Binkley D., 2010, ENCY SOFTWARE ENG, P231
   Cerulo L, 2013, IEEE INT WORK C SO, P157, DOI 10.1109/SCAM.2013.6648197
   DEERWESTER S, 1990, J AM SOC INFORM SCI, V41, P391, DOI 10.1002/(SICI)1097-4571(199009)41:6<391::AID-ASI1>3.0.CO;2-9
   Glebmer T., 2010, REALTIME PREEMPTION
   Gosling J., 2012, Java Language Specification, V7
   Hindle A, 2012, PROC INT CONF SOFTW, P837, DOI 10.1109/ICSE.2012.6227135
   Huang X. D., 1990, Hidden Markov Models for Speech Recognition
   Mamykina L, 2011, 29TH ANNUAL CHI CONFERENCE ON HUMAN FACTORS IN COMPUTING SYSTEMS, P2857
   Mitchell T. M., 1997, MACHINE LEARNING
   Moonen L, 2001, EIGHTH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P13, DOI 10.1109/WCRE.2001.957806
   Murphy G. C., 1996, ACM Transactions on Software Engineering and Methodology, V5, P262, DOI 10.1145/234426.234441
   PARDO B., 2005, Proceedings of the 20th national conference on Artificial intelligence, P1018
   Ponzanelli L., 2013, P CSMR 2013 17 IEEE, P59
   Ponzanelli L, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P1295, DOI 10.1109/ICSE.2013.6606701
   Rigby PC, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P832, DOI 10.1109/ICSE.2013.6606629
   Skounakis M., 2003, International Joint Conference on Artificial Intelligence, V18, P427
   van Rossum G., 2006, UNIFIED DIFF FORMAT
   VITERBI AJ, 1967, IEEE T INFORM THEORY, V13, P260, DOI 10.1109/TIT.1967.1054010
   Wang XY, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P461, DOI 10.1145/1368088.1368151
NR 33
TC 4
Z9 4
U1 0
U2 4
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUL 1
PY 2015
VL 105
BP 26
EP 43
DI 10.1016/j.scico.2014.11.017
PG 18
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CK4MT
UT WOS:000356198600003
OA Bronze
DA 2024-07-18
ER

PT J
AU Champion, A
   Delmas, R
   Dierkes, M
AF Champion, Adrien
   Delmas, Remi
   Dierkes, Michael
TI Generating property-directed potential invariants by quantifier
   elimination in a <i>k</i>-induction-based framework
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 1st International Workshop on Formal-Techniques-for-
   Safety-Critical-Systems (FTSCS 2012)
CY NOV 12, 2012
CL Kyoto, JAPAN
DE Software verification; Formal methods; Invariant discovery;
   Satisfiability modulo theory; Quantifier elimination
ID VERIFICATION; CHECKING; SET
AB This paper addresses the issue of potential invariant generation in the formal analysis of transition systems with k-induction, in the linear real/integer arithmetic fragment. First, quantifier elimination is used to find parameters for generic templates such that the said templates become inductive. Second, a backward analysis, also using quantifier elimination, outputs preimages of the negation of the proof objective, viewed as unauthorized states, or gray states. Two heuristics are proposed to take advantage of this source of information and generate potential invariants: a thorough exploration of the possible partitionings of the gray state space, and an inexact exploration regrouping and over-approximating disjoint areas of the gray state space. Both aim at discovering hidden relations between state variables. K-induction is used to isolate actual invariants and to check if they make the proof objective inductive. These heuristics can be used on the first preimage of the backward exploration, and each time a new one is output, refining the information on the gray states. We show, on examples of interest in the application field of critical embedded systems, that our approach is able to prove properties for which other academic or commercial tools fail. The different methods are introduced as components of a collaborative formal verification framework based on k-induction and are motivated through two examples, one of which was provided by Rockwell Collins. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Champion, Adrien; Delmas, Remi] Off Natl Etud & Rech Aerosp, F-31055 Toulouse 4, France.
   [Champion, Adrien; Dierkes, Michael] Rockwell Collins France, F-31701 Blagnac, France.
C3 National Office for Aerospace Studies & Research (ONERA)
RP Champion, A (corresponding author), Off Natl Etud & Rech Aerosp, 2 Ave Edouard Belin,BP 74025, F-31055 Toulouse 4, France.
EM adrien.champion@onera.fr; remi.delmas@onera.fr;
   mdierkes@rockwellcollins.com
FU French Agence Nationale de la Recherche [ANR-INSE-2012-CAFEIN]
FX Part of the presented work was performed thanks to funding from the
   French Agence Nationale de la Recherche project ANR-INSE-2012-CAFEIN.
CR [Anonymous], 1975, Lecture Notes In Computer Science, DOI [10.1007/3-540-07407-4_17, 10.1007/3-, DOI 10.1007/3, DOI 10.1007/3-540-07407-4_17]
   Bagnara R, 2008, SCI COMPUT PROGRAM, V72, P3, DOI 10.1016/j.scico.2007.08.001
   Barrett Clark W., 2010, P 8 INT WORKSH SAT M
   Bjorner N, 2010, LECT NOTES ARTIF INT, V6173, P316, DOI 10.1007/978-3-642-14203-1_27
   Blanchet B, 2003, ACM SIGPLAN NOTICES, V38, P196, DOI 10.1145/780822.781153
   Bradley AR, 2006, LECT NOTES COMPUT SC, V4281, P35
   Bradley AR, 2011, LECT NOTES COMPUT SC, V6538, P70, DOI 10.1007/978-3-642-18275-4_7
   Caspi P., 1987, Conference Record of the Fourteenth Annual ACM Symposium on Principles of Programming Languages, P178, DOI 10.1145/41625.41641
   Champion A, 2011, SAE INT J AEROSP, V4, P850, DOI 10.4271/2011-01-2558
   Champion A, 2012, ELECTRON PROC THEOR, P22, DOI 10.4204/EPTCS.105.3
   Cimatti A, 2013, LECT NOTES COMPUT SC, V7795, P93
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Damm W, 2007, LECT NOTES COMPUT SC, V4762, P425
   de Moura L, 2003, LECT NOTES COMPUT SC, V2725, P14
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Dierkes M., 2012, P INT C EMB REAL TIM, P42
   Dierkes M, 2011, LECT NOTES COMPUT SC, V6959, P102, DOI 10.1007/978-3-642-24431-5_9
   Een N., 2011, 2011 Formal Methods in Computer-Aided Design (FMCAD), P125
   Jeannet B, 2003, FORM METHOD SYST DES, V23, P5, DOI 10.1023/A:1024480913162
   Kahsai T, 2011, ELECTRON PROC THEOR, P55, DOI 10.4204/EPTCS.72.6
   Kahsai T, 2011, LECT NOTES COMPUT SC, V6617, P192, DOI 10.1007/978-3-642-20398-5_15
   Kapur D., 2005, DAGSTUHL SEMINAR P, V05431
   McMillan KL, 2008, LECT NOTES COMPUT SC, V4963, P413, DOI 10.1007/978-3-540-78800-3_31
   Monniaux D, 2008, LECT NOTES ARTIF INT, V5330, P243, DOI 10.1007/978-3-540-89439-1_18
   Nipkow T, 2008, LECT NOTES ARTIF INT, V5195, P18, DOI 10.1007/978-3-540-71070-7_3
   Roux P, 2012, HSCC 12: PROCEEDINGS OF THE 15TH ACM INTERNATIONAL CONFERENCE ON HYBRID SYSTEMS: COMPUTATION AND CONTROL, P105
   Sheeran M, 2000, LECT NOTES COMPUT SC, V1954, P108
   Tarski A., 1951, TECHNICAL REPORT
NR 28
TC 1
Z9 2
U1 0
U2 2
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 1
PY 2015
VL 103
BP 71
EP 87
DI 10.1016/j.scico.2014.10.004
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA CE6QX
UT WOS:000351964100005
OA Bronze
DA 2024-07-18
ER

PT J
AU Päivärinta, T
   Smolander, K
AF Paivarinta, Tero
   Smolander, Kari
TI Theorizing about software development practices
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Software development; Practice; Theory; Theorizing; Reflection-in-action
ID DEVELOPMENT METHODOLOGIES; INFORMATION-SYSTEMS; KNOWLEDGE; RELEVANCE;
   RIGOR; VIEW
AB The paper focuses on the challenge of generating theoretical support for software development, especially when human software developers are involved in the software development process. We outline a model, "Coat Hanger", for theorizing about development practices. The model focuses on the intended rationale for the actual realization and resulting impacts of using particular practices in varying contexts. To illustrate the use of the model, we have studied recent practice-oriented articles in the journal Science of Computer Programming. A survey of articles in the journal between 2010 and 2013 showed that out of 371 articles, only four studied software development in professional organizations with actual software practitioners as informants. The Coat Hanger model was then used to identify the theoretical strengths and weaknesses of these four practice descriptions. The analysis is used as the basis to declare the potential of our model as a conceptual aid for more structured theorizing about software development practices. The contribution of the model is the introduction of a concretization of how theorizing can be done through reflection-in-action, instead of regarding research on software practices plainly from the prevailing viewpoint of technical rationality. (C) 2014 The Authors. Published by Elsevier B.V.
C1 [Paivarinta, Tero] Lulea Univ Technol, Informat Syst, S-95187 Lulea, Sweden.
   [Smolander, Kari] Lappeenranta Univ Technol, Software Engn & Informat Management, Lappeenranta, Finland.
C3 Lulea University of Technology; Lappeenranta-Lahti University of
   Technology LUT
RP Päivärinta, T (corresponding author), Lulea Univ Technol, Informat Syst, S-95187 Lulea, Sweden.
EM tero.paivarinta@ltu.se; kari.smolander@lut.fi
RI ; Smolander, Kari/B-4581-2015
OI Paivarinta, Tero/0000-0002-7477-0783; Smolander,
   Kari/0000-0002-7043-0458
CR Adolph S, 2012, J SYST SOFTWARE, V85, P1269, DOI 10.1016/j.jss.2012.01.059
   [Anonymous], 197592005 ISOIEC TR
   [Anonymous], CHALLENGES STRATEGIE
   Argyris C., 1996, Organizational learning II: Theory, method, and practice, V2
   Arias TBC, 2011, SCI COMPUT PROGRAM, V76, P1098, DOI 10.1016/j.scico.2010.11.008
   Bajec M, 2007, INFORM SOFTWARE TECH, V49, P345, DOI 10.1016/j.infsof.2006.05.007
   Basili V., 2001, Product Focused Software Process Improvement. Third International Conference, PROFES 2001. Proceedings (Lecture Notes in Computer Science Vol.2188), P110
   Benbasat I, 1999, MIS QUART, V23, P3, DOI 10.2307/249403
   Berger H, 2009, INFORM SYST J, V19, P549, DOI 10.1111/j.1365-2575.2009.00329.x
   BOURDIEU P, 1973, SOC SCI INFORM, V12, P53, DOI 10.1177/053901847301200103
   Bourdieu P., 1977, OUTLINE THEORY PRACT
   Brown JS, 1991, ORGAN SCI, V2, P40, DOI 10.1287/orsc.2.1.40
   Carlile PR, 2002, ORGAN SCI, V13, P442, DOI 10.1287/orsc.13.4.442.2953
   Clarke P, 2012, INFORM SOFTWARE TECH, V54, P433, DOI 10.1016/j.infsof.2011.12.003
   Collins CoBUILD, 1989, ENGL DICT
   CURTIS B, 1988, COMMUN ACM, V31, P1268, DOI 10.1145/50087.50089
   Davenport TH, 1999, MIS QUART, V23, P19, DOI 10.2307/249405
   Eklund U, 2013, SCI COMPUT PROGRAM, V78, P2347, DOI 10.1016/j.scico.2012.06.008
   Feldman MS, 2011, ORGAN SCI, V22, P1240, DOI 10.1287/orsc.1100.0612
   Fitzgerald B, 2003, COMMUN ACM, V46, P64, DOI 10.1145/641205.641206
   Fitzgerald B, 1997, INFORM SYST J, V7, P201, DOI 10.1046/j.1365-2575.1997.d01-18.x
   Fitzgerald B., 2001, INFORM SYSTEMS DEV M
   Ganesan D, 2013, SCI COMPUT PROGRAM, V78, P2360, DOI 10.1016/j.scico.2012.02.006
   Goldkuhl G., 2012, 2 INT C PRACT RES HE
   Gregor S, 2006, MIS QUART, V30, P611
   Hadar I, 2013, SCI COMPUT PROGRAM, V78, P1407, DOI 10.1016/j.scico.2012.10.006
   Hall JG, 2012, INNOV SYST SOFTW ENG, V8, P175, DOI 10.1007/s11334-011-0171-2
   Herbsleb JD, 2001, PROC INT CONF SOFTW, P81, DOI 10.1109/ICSE.2001.919083
   Hofmeister C, 2006, 5TH WORKING IEEE/IFIP CONFERENCE ON SOFTWARE ARCHITECTURE, PROCEEDINGS, P77
   Hoorn JF, 2011, J SYST SOFTWARE, V84, P1424, DOI 10.1016/j.jss.2010.11.909
   IEEE Computer Society, 2004, GUID SOFTW ENG BOD K
   JACKSON M, 1994, IEEE SOFTWARE, V11, P57, DOI 10.1109/52.329402
   Jacobson I., 2013, The Essence of Software Engineering: Applying the SEMAT Kernel
   Jayaratna N., 1994, Understanding and Evaluating Methodologies
   Johnson P., 2012, IEEE Software, V29, P94, DOI 10.1109/MS.2012.127
   Jorgensen N., 2005, 26 INT C INF SYST LA
   Kitchenham B, 2007, IET SOFTW, V1, P161, DOI 10.1049/iet-sen:20060052
   Kitchenham B, 2008, EMPIR SOFTW ENG, V13, P97, DOI 10.1007/s10664-007-9053-5
   KOGUT B, 1992, ORGAN SCI, V3, P383, DOI 10.1287/orsc.3.3.383
   Kostova T, 2002, ACAD MANAGE J, V45, P215, DOI 10.5465/3069293
   Larsen E.A, 2012, JITTA, V13
   Lee AS, 1999, MIS QUART, V23, P29, DOI 10.2307/249407
   Lyytinen K, 1999, INFORM SYST J, V9, P85, DOI 10.1046/j.1365-2575.1999.00051.x
   Madsen S, 2006, EUR J INFORM SYST, V15, P225, DOI 10.1057/palgrave.ejis.3000593
   Mathiassen L, 1998, REFLECTIVE SYSTEMS, V1
   Mathiassen L, 1981, SYSTEMS DEV SYSTEMS
   McLeod L, 2011, ACM COMPUT SURV, V43, DOI 10.1145/1978802.1978803
   Mellor SJ, 2003, IEEE SOFTWARE, V20, P14, DOI 10.1109/MS.2003.1231145
   Nelson R.R., 1982, EVOL THEOR
   Nielsen P. A., 1990, Scandinavian Journal of Information Systems, V2, P43
   Object Management Group, 2013, ESS KERN LANG SOFTW
   Orlikowski WJ, 2002, ORGAN SCI, V13, P249, DOI 10.1287/orsc.13.3.249.2776
   ORLIKOWSKI WJ, 1993, MIS QUART, V17, P309, DOI 10.2307/249774
   Päivärinta T, 2010, INFORM SYST J, V20, P481, DOI 10.1111/j.1365-2575.2007.00256.x
   Pentland BT, 2005, IND CORP CHANGE, V14, P793, DOI 10.1093/icc/dth070
   Petre M, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P722, DOI 10.1109/ICSE.2013.6606618
   Rossi M., 2004, J ASSOC INF SYST, V5
   Runeson P, 2009, EMPIR SOFTW ENG, V14, P131, DOI 10.1007/s10664-008-9102-8
   Schon D., 1984, The Reflective Practitioner: How Professionals Think in Action
   Schultze U, 2000, J STRATEGIC INF SYST, V9, P193, DOI 10.1016/S0963-8687(00)00043-3
   Sjoberg D. I. K., 2008, Guide to Advanced Empirical Software Engineering, P312
   Stolterman E., 1992, SCAND J INF SYST, V4
   Szulanski G, 1996, STRATEGIC MANAGE J, V17, P27, DOI 10.1002/smj.4250171105
   TOLVANEN JP, 1998, JYVASKYLA STUDIES CO, V47
   Vidgen R, 2009, INFORM SYST RES, V20, P355, DOI 10.1287/isre.1090.0237
   Wohlin C., 2000, EXPT SOFTWARE ENG IN
   Wynekoop JL, 1997, INFORM SYST J, V7, P47, DOI 10.1046/j.1365-2575.1997.00004.x
NR 67
TC 18
Z9 21
U1 0
U2 16
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD APR 1
PY 2015
VL 101
BP 124
EP 135
DI 10.1016/j.scico.2014.11.012
PG 12
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Social Science Citation Index (SSCI)
SC Computer Science
GA CC6XZ
UT WOS:000350513600008
OA Green Published, hybrid, Green Submitted
DA 2024-07-18
ER

PT J
AU Guizzardi, G
   Zamborlini, V
AF Guizzardi, Giancarlo
   Zamborlini, Veruska
TI Using a trope-based foundational ontology for bridging different areas
   of concern in ontology-driven conceptual modeling
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Ontological foundations for conceptual modeling; Conceptual domain
   modeling; Foundational ontology; Temporal reification; Trope theory
AB In recent years, ontology-driven reference models have gained much attention in the literature due to their potential key role in activities such as complex information modeling and semantic interoperability. The engineering process of these conceptual models should account for different phases addressing different areas of concern. In an initial phase of conceptual domain modeling, the target modeling artifacts should be constructed with the goal of maximizing quality attributes such as expressivity and truthfulness to the represented domain in reality. In a subsequent development phase, the resulting domain models can be used to guide the design decisions in the construction of different implementation artifacts addressing different computational concerns. In this paper, we present a philosophically sound, cognitively-oriented and formally characterized foundational theory of objects and tropes (property-instances). Moreover, we use this theory to bring about engineering contributions to both the aforementioned phases of ontology-driven conceptual modeling. Firstly, we show how this theory has been used to (re)design a system of modeling primitives underlying the conceptual domain modeling language OntoUML. Furthermore, we provide precise directives on how to map conceptual domain models in this language to their implementation in less-expressive computationally-oriented codification languages. In particular, we address here a mapping strategy to OWL (Web Ontology Language) that partially preserves the modal-temporal semantics of OntoUML. Finally, we discuss computational support for the proposed approach in terms of conceptual model construction, automatic transformation and temporal querying. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Guizzardi, Giancarlo] Univ Fed Espirito Santo, Dept Comp Sci, Ontol & Conceptual Modeling Res Grp NEMO, Vitoria, ES, Brazil.
   [Guizzardi, Giancarlo] ISTC, Lab Appl Ontol LOA, Trento, Italy.
   [Zamborlini, Veruska] Ctr Rech Publ Henri Tudor, CR SANTEC, Luxembourg, Luxembourg.
   [Zamborlini, Veruska] Vrije Univ Amsterdam, Amsterdam, Netherlands.
C3 Universidade Federal do Espirito Santo; Consiglio Nazionale delle
   Ricerche (CNR); Istituto di Scienze e Tecnologie della Cognizione
   (ISTC-CNR); Luxembourg Institute of Science & Technology; Vrije
   Universiteit Amsterdam
RP Guizzardi, G (corresponding author), Univ Fed Espirito Santo, Dept Comp Sci, Ontol & Conceptual Modeling Res Grp NEMO, Vitoria, ES, Brazil.
EM gguizzardi@inf.ufes.br; v.carrettazamborlini@vu.nl
OI Zamborlini, Veruska/0000-0003-3425-0481; Guizzardi,
   Giancarlo/0000-0002-3452-553X
CR Albuquerque Antognoni., 2013, IEEE 7 INT C RES CHA, P1
   [Anonymous], 21 INT C ADV INF SYS
   [Anonymous], 2005, Ontological foundations for structural conceptual models
   [Anonymous], 2001, ESSAYS ACTIONS EVENT, DOI DOI 10.1093/0199246270.001.0001
   Bauman B.T., 2009, BA MARK C
   Benevides A.B., 2009, 11 INT C ENT INF SYS
   Benevides AB, 2010, J UNIVERS COMPUT SCI, V16, P2904
   Costal D, 2011, 30 INT C CONC MOD ER
   Fiorini S., 2010, 15 IEEE INT ENT COMP
   Fitting M., 1998, METHODOLOGY PHILOS S, V277
   G?rdenfors P., 2004, CONCEPTUAL SPACES GE
   Guizzardi G., 2010, INT J INF SYST MODEL
   Guizzardi G., 2013, LECT NOTES COMPUT SC, V7745, P286
   Guizzardi G., 2013, DOMAIN ENG, P317
   Guizzardi G., 2012, 24 INT C ADV INF SYS
   Guizzardi G., 2007, ONTOLOGY ONTOLOGIES
   Guizzardi G., 16 INT C ADV INF SYS
   Guizzardi G., 2011, 3 INT WORKSH ONT DRI
   Guizzardi G., 2012, PHILOS COMPUTATIONAL
   Guizzardi G., 2006, 25 INT C CONC MOD ER
   Guizzardi G, 2008, LECT NOTES COMPUT SC, V5231, P83, DOI 10.1007/978-3-540-87877-3_8
   Guizzardi R.S.S., 2010, COOPERATIVE INFORM S
   Halpin T, 2008, MOR KAUF D, P1, DOI 10.1016/B978-012373568-3.50005-9
   Heller B., 2004, ONTOLOGICAL CATEGORI, V14, P71
   Henderson-Sellers B, 2011, J SYST SOFTWARE, V84, P301, DOI 10.1016/j.jss.2010.10.025
   Henderson-Sellers B., 2012, On the mathematics of modelling, metamodelling, ontologies and modelling languages
   Lowe E.J., 2006, 4 CATEGORY ONTOLOGY
   Masolo C., 2003, Ontology Library
   MULLIGAN K, 1986, TOPOI-INT REV PHILOS, V5, P115, DOI 10.1007/BF00139225
   MULLIGAN K, 1984, PHILOS PHENOMEN RES, V44, P287, DOI 10.2307/2107686
   Mylopoulos J., 1992, Conceptual Modelling Databases and CASE: An Integrated View of Information Systems Development, P49
   Object Management Group, SEM INF MOD FED SIMF
   Parsons T., 1990, Events in the Semantics of English: A Study in Subatomic Semantics
   Quine WV., 1985, Actions and Events: Perspectives on the Philosophy of Davidson, P162
   Recker J, 2011, MIS QUART, V35, P57
   Russell Bertrand, 1905, MIND, V14, P479, DOI DOI 10.1093/MIND/XIV.4.479
   Sider T., 2003, FOURDIMENSIONALISM O
   Thomasson Amie., 1999, Fiction and Metaphysics
   Varzi AC, 2003, DIALECTICA, V57, P387
   Wand Y., 1989, ONTOLOGICAL EVALUATI
   Welty C, 2006, FRONT ARTIF INTEL AP, V150, P226
   West M., 2002, INFORM MODELING ANAL
   Wieringa R., 1995, Theory and Practice of Object Systems, V1, P61
   Zamborlini V., 2010, 15 IEEE INT ENT COMP
NR 44
TC 16
Z9 16
U1 0
U2 11
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 15
PY 2014
VL 96
BP 417
EP 443
DI 10.1016/j.scico.2014.02.022
PN 4
PG 27
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AT8KC
UT WOS:000345181300003
OA Bronze
DA 2024-07-18
ER

PT J
AU Unterholzner, M
AF Unterholzner, Martin
TI Improving refactoring tools in Smalltalk using static type inference
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Smalltalk; Type inference; Static type inference; Refactoring
AB Refactoring is a crucial activity in agile software development, As a consequence, automated tools are expected to support refactoring, both for reducing the developer's effort as well as for avoiding errors due to manual changes. In this context, the chosen programming language has a major impact on the level of support that an automated refactoring tool can offer. One important aspect of a programming language concerning the automation of refactoring is the type system. While a static type system, present in languages such as Java, provides information about dependencies in the program, the dynamic type system of the Smalltalk programming language offers little information that can be used by automated refactoring tools.
   This paper focuses on the challenges in the context of refactoring raised by the dynamic type system of Smalltalk. It highlights the problems caused by the absence of static type information and proposes the use of static code analysis for performing type inference to gather information about the dependencies in the program's source code. It explains the mechanism of the static code analysis using sample code and presents a prototype of an enhanced refactoring tool, which uses the structural information extracted through static code analysis. Empirical samples build the base for evaluating the effectiveness of the approach. (C) 2013 Elsevier B.V. All rights reserved.
RP Unterholzner, M (corresponding author), Contrada Municipio 4, CH-6934 Bioggio, Switzerland.
EM martin_unterholzner@hotmail.com
CR [Anonymous], 2004, XP Ser
   [Anonymous], 2003, TEST DRIVEN DEV EXAM
   Black A.P., 2009, PHARO EXAMPLE
   Borning AlanH., 1982, Proceedings of the 9th Symposium on Principles of Programming Languages (POPL), P133
   BRACHA G, 1993, SIGPLAN NOTICES, V28, P215, DOI 10.1145/167962.165893
   Burnstein Ilene., 2003, Practical Software Testing: A Process-Oriented Approach
   Campbell Dustin, 2008, P 2 WORKSH REF TOOLS, P1
   Cinneide M., 1998, P WORKSH FORM TECHN
   Cinneide M. O., 2000, Proceedings of the 2000 International Conference on Software Engineering. ICSE 2000 the New Millennium, P722, DOI 10.1109/ICSE.2000.870480
   Dahl O.-J., 1972, STRUCTURED PROGRAMMI
   Du Bois B., 2004, DISCUSSION REFACTORI
   Ebraert P., 2005, EL P 21 INT C SOFTW
   Eid M., 2010, Statistik und Forschungsmethoden
   FOOTE B, 1989, SIGPLAN NOTICES, V24, P327, DOI 10.1145/74878.74911
   Fowler M., 2018, Refactoring: Improving the Design of Existing Code
   Garrido A, 2006, SIXTH IEEE INTERNATIONAL WORKSHOP ON SOURCE CODE ANALYSIS AND MANIPULATION, PROCEEDINGS, P165
   Goldberg A., 1983, Smalltalk 80: The Language and Its Implementation
   GRAVER J, 1989, THESIS U ILLINOIS
   Graver J.O., 1989, P 17 ACM SIGPLAN SIG, P136
   Griswold W. G., 1993, ACM Transactions on Software Engineering and Methodology, V2, P228, DOI 10.1145/152388.152389
   Johnson R. E., 1993, Object Technologies for Advanced Software. First JSSST International Symposium. Proceedings, P264
   JOHNSON RE, 1986, SIGPLAN NOTICES, V21, P315, DOI 10.1145/960112.28728
   Kataoka Y, 2002, PROC IEEE INT CONF S, P576, DOI 10.1109/ICSM.2002.1167822
   Kerievsky J., 2005, Refactoring to Patterns
   Lippert M., 2006, Refactoring in large software projects: performing complex restructurings successfully
   Mens T, 2004, IEEE T SOFTWARE ENG, V30, P126, DOI 10.1109/TSE.2004.1265817
   Murphy-Bill E, 2008, IEEE SOFTWARE, V25, P38, DOI 10.1109/MS.2008.123
   Opdyke W.F., 1992, Refactoring Object-Oriented Frameworks
   PALSBERG J, 1991, SIGPLAN NOTICES, V26, P146
   Poo Danny., 2008, Object-Oriented Programming and Java
   Rapicault P, 1998, LECT NOTES COMPUT SC, V1543, P76
   Roberts D., 2004, IEE Proceedings-Software, V151, P49, DOI 10.1049/ip-sen:20040078
   Roberts D., 1997, Theory and Practice of Object Systems, V3, P253, DOI 10.1002/(SICI)1096-9942(1997)3:4<253::AID-TAPO3>3.0.CO;2-T
   Spoon S., 2004, 18 C OBJ OR PROGR EC, P485
   Sultana N, 2008, PEPM'08: PROCEEDINGS OF THE 2008 ACM SIGPLAN SYMPOSIUM ON PARTIAL EVALUATION AND SEMANTICS-BASED PROGRAM MANIPULATION, P51, DOI 10.1145/1328408.1328417
   Tip F, 2011, ACM T PROGR LANG SYS, V33, DOI 10.1145/1961204.1961205
   Tratt L, 2009, ADV COMPUT, V77, P149, DOI 10.1016/S0065-2458(09)01205-4
   Unterholzner M., 2012, THESIS FREE U BOLZAN
   van Gurp J, 2002, J SYST SOFTWARE, V61, P105, DOI 10.1016/S0164-1212(01)00152-2
   Wilcox RR, 2010, FUNDAMENTAL OF MODERN STATISTICAL METHODS: SUBSTANTIALLY IMPROVING POWER AND ACCURACY, SECOND EDITION, P1, DOI 10.1007/978-1-4419-5525-8
   Wright A, 2010, COMMUN ACM, V53, P16, DOI 10.1145/1646353.1646361
   Zhu H, 1997, ACM COMPUT SURV, V29, P366, DOI 10.1145/267580.267590
NR 42
TC 2
Z9 2
U1 0
U2 4
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 15
PY 2014
VL 96
SI SI
BP 70
EP 83
DI 10.1016/j.scico.2013.11.032
PN 1
PG 14
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AT8JX
UT WOS:000345180800006
OA Bronze
DA 2024-07-18
ER

PT J
AU Bonino, D
   Procaccianti, G
AF Bonino, Dario
   Procaccianti, Giuseppe
TI Exploiting semantic technologies in smart environments and grids:
   Emerging roles and case studies
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Semantic technologies; Smart grid; Smart environments; Home automation;
   Ontologies
ID ONTOLOGY
AB Semantic technologies are currently spreading across several application domains as a reliable and consistent mean to address challenges related to organization, manipulation, visualization and exchange of data and knowledge. Different roles are actually played by these techniques depending on the application domain, on the timing constraints, on the distributed nature of applications, and so on. This paper provides an overview of the roles played by semantic technologies in the domain of smart grids and smart environments, with a particular focus on changes brought by such technologies in the adopted architectures, programming techniques and tools. Motivations driving the adoption of semantics in these different, but strictly intertwined, fields are introduced using a strong application-driven perspective. Two real-world case studies in smart grids and smart environments are presented to exemplify the roles covered by such technologies and the changes they fostered in software engineering processes. Learned lessons are then distilled and future adoption scenarios discussed. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Bonino, Dario; Procaccianti, Giuseppe] Politecn Torino, Dipartimento Automat & Informat, I-10129 Turin, Italy.
C3 Polytechnic University of Turin
RP Bonino, D (corresponding author), Politecn Torino, Dipartimento Automat & Informat, Corso Duca Abtuzzi 24, I-10129 Turin, Italy.
EM dario.bonino@polito.it; giuseppe.procaccianti@polito.it
RI Procaccianti, Giuseppe/K-5379-2013
OI Procaccianti, Giuseppe/0000-0003-0122-8333; Bonino,
   Dario/0000-0002-6975-9192
CR Abowd GD, 1999, LECT NOTES COMPUT SC, V1707, P304
   Agostini Alessandra, 2009, International Journal of Web Engineering and Technology, V5, P3, DOI 10.1504/IJWET.2009.025011
   [Anonymous], GRID INTEROP ROAD IN
   [Anonymous], 61850 IEC
   [Anonymous], 2007, ZIGBEE HOME AUTOMATI
   Bechhofer S., 2004, QWL WEB ONTOLOGY LAN
   Berners-Lee T, 2001, SCI AM, V284, P34, DOI 10.1038/scientificamerican0501-34
   Bettini C, 2010, PERVASIVE MOB COMPUT, V6, P161, DOI 10.1016/j.pmcj.2009.06.002
   Bhatt M, 2009, LECT NOTES COMPUT SC, V5756, P371, DOI 10.1007/978-3-642-03832-7_23
   Bonino D., 2010, 8 ANN IEEE INT C PER, P61
   Bonino D, 2012, PERVASIVE MOB COMPUT, V8, P614, DOI 10.1016/j.pmcj.2011.10.009
   Bonino D, 2010, AUTOMAT CONSTR, V19, P183, DOI 10.1016/j.autcon.2009.10.008
   Bonino D, 2009, IEEE T CONSUM ELECTR, V55, P499, DOI 10.1109/TCE.2009.5174413
   Bonino D, 2008, LECT NOTES COMPUT SC, V5318, P790, DOI 10.1007/978-3-540-88564-1_51
   Bonino D, 2008, IEEE T CONSUM ELECTR, V54, P1656, DOI 10.1109/TCE.2008.4711217
   Chen H, 2005, WHITESTEIN SER SOFTW, P233, DOI 10.1007/3-7643-7361-X_10
   Chen H, 2003, KNOWL ENG REV, V18, P197, DOI 10.1017/S0269888904000025
   Chen LM, 2009, STUD COMPUT INTELL, V189, P279
   Compton M, 2012, J WEB SEMANT, V17, P25, DOI 10.1016/j.websem.2012.05.003
   Cook DJ, 2009, J CARDIOTHOR VASC AN, V23, P277, DOI 10.1053/j.jvca.2009.02.009
   D'Elia Alfredo, 2010, 2010 IEEE Symposium on Computers and Communications (ISCC), P1, DOI 10.1109/ISCC.2010.5546633
   Furfari F., 2004, Proc. 2nd Eur. Union Symp. Ambient Intell, P41
   Gavshin Y, 2011, LECT NOTES ARTIF INT, V6943, P157, DOI 10.1007/978-3-642-23857-4_18
   Grassi M., 2011, 2011 IEEE 20th International Symposium on Industrial Electronics (ISIE 2011), P1753, DOI 10.1109/ISIE.2011.5984327
   Grimm C., 2013, ICT SUSTAINABLE PLAC, P9
   Gu T, 2004, IEEE PERVAS COMPUT, V3, P66
   Guo B, 2011, HANDBOOK OF RESEARCH ON AMBIENT INTELLIGENCE AND SMART ENVIRONMENTS: TRENDS AND PERSPECTIVES, P272, DOI 10.4018/978-1-61692-857-5.ch015
   HAREL D, 1987, SCI COMPUT PROGRAM, V8, P231, DOI 10.1016/0167-6423(87)90035-9
   Hois Joana., 2009, Formal Ontologies Meet Industry, P66
   Hughes J., 2006, EPRI
   International Electrotechnical Commission, 2009, 61970 IEC 301
   International Electrotechnical Commission, 2008, 61968 IEC 13
   Katasonov Artem, 2010, 2010 8th IEEE International Conference on Pervasive Computing and Communications Workshops (PERCOM Workshops), P696, DOI 10.1109/PERCOMW.2010.5470523
   Kostic T, 2003, LESCOPE'03 : 2003 LARGE ENGINEERING SYSTEMS CONFERENCE ON POWER ENGINEERING, CONFERENCE PROCEEDINGS, P24, DOI 10.1109/LESCPE.2003.1204674
   Lee Yooyoung., 2009, Workshop onMotion and Video Computing, P1
   Miori V, 2006, IEEE T CONSUM ELECTR, V52, P97, DOI 10.1109/TCE.2006.1605032
   Mohsin S.M., 2012, ONTOLOGY DRIVEN SMAR, P1
   Moreaux P., 2012, Proceedings of the 2012 20th Euromicro International Conference on Parallel, Distributed and Network-Based Processing (PDP 2012), P47, DOI 10.1109/PDP.2012.45
   Muñoz A, 2009, AMB INTELL SMART ENV, V5, P35, DOI 10.3233/978-1-60750-481-8-35
   Niezen G., 2012, THESIS TECHNISCHE U
   NIST, 2010, NIST Framework and Roadmap for Smart Grid Interoperability Standards, Release 1.0
   Pedersen AB, 2010, INT CONF SMART GRID, P61, DOI 10.1109/SMARTGRID.2010.5622020
   Pellegrino P., 2006, Applied Computing 2006. 21st Annual ACM Symposium on Applied Computing, P1915, DOI 10.1145/1141277.1141730
   Pena A., 2011, Proceedings of the 2011 9th IEEE International Conference on Industrial Informatics (INDIN 2011), P721, DOI 10.1109/INDIN.2011.6034981
   Preuveneers D, 2004, LECT NOTES COMPUT SC, V3295, P148
   Randell David A., 1992, P 3 INT C KNOWL REPR
   Ranganathan A, 2003, KNOWL ENG REV, V18, P209, DOI 10.1017/S0269888904000037
   Rodriguez Natalia Diaz, 2011, Proceedings of the 11th IEEE/IPSJ International Symposium on Applications and the Internet (SAINT 2011), P218, DOI 10.1109/SAINT.2011.39
   Roman M., 2002, SIGMOBILE MOBILE COM, P65
   Santodomingo R., 2011, 2011 IEEE Second International Conference on Smart Grid Communications (SmartGridComm 2011), P422, DOI 10.1109/SmartGridComm.2011.6102359
   Santodomingo R, 2010, INT CONF SMART GRID, P55, DOI 10.1109/SMARTGRID.2010.5622017
   Sommaruga L., 2005, P SWAP 2005 2 IT SEM
   Soylu Ahmet, 2009, 2009 24th International Symposium on Computer and Information Sciences (ISCIS), P730, DOI 10.1109/ISCIS.2009.5291915
   Stevenson G, 2011, LECT NOTES BUS INF P, V83, P425
   Strang T., 2004, UBICOMP 2004 6 INT C
   Tomic S., 2011, APPL SEMANTIC TECHNO, P429
   Díaz JJV, 2013, ENERG BUILDINGS, V60, P20, DOI 10.1016/j.enbuild.2013.01.012
   Wagner A., 2010, ISWC POST DEM CEUR W, V658
   Wagner A., 2012, GRIDPEDIA RDF ONTOLO
   Wang XH, 2004, SECOND IEEE ANNUAL CONFERENCE ON PERVASIVE COMPUTING AND COMMUNICATIONS WORKSHOPS, PROCEEDINGS, P18
   Xu JJ, 2009, IEEE I C EMBED SOFTW, P297, DOI 10.1109/ICESS.2009.60
   Ye J, 2011, PERVASIVE MOB COMPUT, V7, P359, DOI 10.1016/j.pmcj.2011.02.002
   Zhang WS, 2008, SASO 2008: SECOND IEEE INTERNATIONAL CONFERENCE ON SELF-ADAPTIVE AND SELF-ORGANIZING SYSTEMS, PROCEEDINGS, P245, DOI 10.1109/SASO.2008.14
NR 63
TC 10
Z9 10
U1 0
U2 14
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 1
PY 2014
VL 95
SI SI
BP 112
EP 134
DI 10.1016/j.scico.2014.02.018
PN 1
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AS9RF
UT WOS:000344578600007
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Gayo, JEL
   Jeuring, J
   Rodríguez, JMA
AF Labra Gayo, Jose Emilio
   Jeuring, Johan
   Rodriguez, Jose Maria Alvarez
TI Inductive representations of RDF graphs
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Functional programming; RDF; Graph; Haskell; Inductive graphs
AB RDF forms the basis of the semantic web technology stack. It is based on a directed graph model where nodes and edges are identified by URIs. Occasionally, such graphs contain literals or blank nodes. The existential nature of blank nodes complicates the graph representation.
   In this paper we propose a purely functional representation of RDF graphs using a special form of inductive graphs called inductive triple graphs. We employ logical variables to represent blank nodes. This approach can be implemented in any functional programming language such as Haskell and Scala. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Labra Gayo, Jose Emilio] Univ Oviedo, Oviedo 33007, Spain.
   [Jeuring, Johan] Univ Utrecht, NL-3508 TC Utrecht, Netherlands.
   [Jeuring, Johan] Open Univ Netherlands, Utrecht, Netherlands.
   [Rodriguez, Jose Maria Alvarez] SEERC, Thessaloniki 54622, Greece.
C3 University of Oviedo; Utrecht University; Open University Netherlands
RP Gayo, JEL (corresponding author), Univ Oviedo, C Calvo Sotelo S-N, Oviedo 33007, Spain.
EM labra@uniovi.es; j.t.jeuring@uu.nl; jmalvarez@seerc.org
RI Labra Gayo, Jose Emilio/L-9181-2014
OI Labra Gayo, Jose Emilio/0000-0001-8907-5348; ALVAREZ RODRIGUEZ, JOSE
   MARIA/0000-0003-1668-6054
FU Spanish project ROCAS (Reasoning about the Cloud by Applying Semantics)
   [MICINN-12-TIN2011-27871]; International Excellence Campus grant of the
   University of Oviedo
FX This work has been partially funded by the Spanish project
   MICINN-12-TIN2011-27871 ROCAS (Reasoning about the Cloud by Applying
   Semantics) and by the International Excellence Campus grant of the
   University of Oviedo which allowed the first author to spend a research
   visit at Utrecht University.
CR [Anonymous], P 23 ACM SIGPLAN SIG
   Chlipala A, 2008, ACM SIGPLAN NOTICES, V43, P143, DOI 10.1145/1411203.1411226
   Claessen K., 2000, P HASK WORKSH MONTR
   Clark K. L., 1978, Logic and data bases, P293
   Cyganiak R., 2013, W3C WORKING DRAFT
   Dave Becket E.P., 2012, CAROTNERS TURTLE TER
   DURST M, 2005, 3987 IETF
   Erwig M, 1997, ACM SIGPLAN NOTICES, V32, P52, DOI 10.1145/258949.258955
   Erwig M, 2001, J FUNCT PROGRAM, V11, P467, DOI 10.1017/S0956796801004075
   Erwig M., 1997, LECT NOTES COMPUTER, V1467, P123
   Hayes J, 2004, LECT NOTES COMPUT SC, V3298, P47
   HUGHES J, 1989, COMPUT J, V32, P98, DOI 10.1093/comjnl/32.2.98
   Jeffrey A.S.A., 2012, P OFF BEATEN TRACK W
   Klyne G., 2004, W3C recommendation 10
   Labra-Gayo J.E., 2013, 3 INT WORKSH GRAPH S
   Mallea A, 2011, LECT NOTES COMPUT SC, V7031, P421, DOI 10.1007/978-3-642-25073-6_27
   MEIJER E, 1995, LECT NOTES COMPUTER, V925, P228
   Oliveira BCDS, 2012, ACM SIGPLAN NOTICES, V47, P77, DOI 10.1145/2398856.2364541
   Phillips A., 2000, 47 INT ENG TASK FORC
   Reade Chris., 1989, Elements of functional programming
   Seres S., 1999, P HASKELL 99 DEP COM
   [No title captured]
NR 22
TC 2
Z9 2
U1 0
U2 7
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 1
PY 2014
VL 95
SI SI
BP 135
EP 146
DI 10.1016/j.scico.2013.12.011
PN 1
PG 12
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AS9RF
UT WOS:000344578600008
OA Bronze
DA 2024-07-18
ER

PT J
AU Hallerstede, S
   Jastram, M
   Ladenberger, L
AF Hallerstede, Stefan
   Jastram, Michael
   Ladenberger, Lukas
TI A method and tool for tracing requirements into specifications
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Requirements; Specification; Traceability; Formal modelling
ID SYSTEMS
AB The creation of a consistent system description is a challenging problem of requirements engineering. Formal and informal reasoning can greatly contribute to meet this challenge. However, this demands that formal and informal reasoning and the system description are connected in such a way that the reasoning permits drawing conclusions about the system description.
   We describe an incremental approach to requirements modelling and validation that incorporates formal and informal reasoning. Our main contribution is an approach to requirements tracing that delivers the necessary connection that links the reasoning to the system description. Formal refinement is used in order to deal with large and complex system descriptions.
   We discuss tool support for our approach to requirements tracing that combines informal requirements modelling with formal modelling and verification while tracing requirements among each other and into the formal model. (C) 2013 Elsevier By. All rights reserved.
C1 [Hallerstede, Stefan] Aarhus Univ, DK-8000 Aarhus C, Denmark.
   [Jastram, Michael; Ladenberger, Lukas] Univ Dusseldorf, Dusseldorf, Germany.
C3 Aarhus University; Heinrich Heine University Dusseldorf
RP Jastram, M (corresponding author), Univ Dusseldorf, Dusseldorf, Germany.
EM stefan.hallerstede@wanadoo.fr; michael@jastram.de
FU European Commission Information and Communication Technologies FP7
   projects
FX The work in this paper is partly funded by DEPLOY and ADVANCE, both
   European Commission Information and Communication Technologies FP7
   projects. We are grateful for the comments and suggestions of the
   anonymous reviewers that have helped improving the article in many
   places.
CR Abrial Jean-Raymond, 2010, International Journal on Software Tools for Technology Transfer, V12, P447, DOI 10.1007/s10009-010-0145-y
   Abrial J.-R., 1996, B BOOK ASSIGNING PRO
   Abrial J R, 2010, Modeling in Event-B: system and softeng
   [Anonymous], 2003, Software requirements
   Apt K.R., 2009, Texts in Computer Science, DOI 10.1007/978-1-84882-745-5
   Benveniste M, 2011, ELECTRON NOTES THEOR, V280, P3, DOI 10.1016/j.entcs.2011.11.014
   Bjorner D., 1992, International Conference on Software Engineering, P15, DOI 10.1109/ICSE.1992.753486
   Bjorner D, 2008, LECT NOTES COMPUT SC, V5065, P278, DOI 10.1007/978-3-540-68679-8_18
   Borger E., 2003, ABSTRACT STATE MACHI
   Chung L, 2009, LECT NOTES COMPUT SC, V5600, P363, DOI 10.1007/978-3-642-02463-4_19
   Darimont R, 1997, PROC INT CONF SOFTW, P612, DOI 10.1145/253228.253499
   Essamée D, 2007, LECT NOTES COMPUT SC, V4355, P252
   Eunsuk Kang, 2010, Proceedings of the 2010 IEEE 18th International Conference on Requirements Engineering (RE2010), P262, DOI 10.1109/RE.2010.38
   Gmehlich R, 2011, LECT NOTES COMPUT SC, V6991, P195, DOI 10.1007/978-3-642-24559-6_15
   Gotel O. C. Z., 1994, Proceedings of the First International Conference on Requirements Engineering (Cat. No.94TH0613-0), P94, DOI 10.1109/ICRE.1994.292398
   Gunter CA, 2000, IEEE SOFTWARE, V17, P37, DOI 10.1109/52.896248
   Hallerstede Stefan, 2008, Formal Methods for Components and Objects. 7th International Symposium, FMCO 2008. Revised Lectures, P139
   Hoare C. A. R., 1998, Unifying Theories of Programming
   Hood C, 2005, OPTIMIEREN REQUIREME
   IEEE, 1997, 8301998 IEEE
   JACKSON M, 1995, PROC INT CONF SOFTW, P283, DOI 10.1145/225014.225041
   Jackson M., 2001, PROBLEM FRAMES ANAL
   Jackson M, 2012, SOFTW SYST MODEL, V11, P495, DOI 10.1007/s10270-012-0259-7
   Jastram M., 2011, DAGST WORKSH MBEES
   Jastram M., 2011, ECEASST, V46
   Jastram M., 2010, SEISCONF
   Jastram M., 2012, COMM VEH TECHN S
   Jastram M., 2011, 1 TOPC DAYS TOUL
   Jastram M., 2012, THESIS HEINRICH HEIN
   Jastram M, 2010, LECT NOTES COMPUT SC, V6217, P97, DOI 10.1007/978-3-642-15057-9_7
   Jones CB., 1990, SYSTEMATIC SOFTWARE
   Jones CB, 2007, LECT NOTES COMPUT SC, V4700, P364
   Kovitz B.L, 1998, PRACTICAL SOFTWARE R
   Kruchten P.., 2004, RATIONAL UNIFIED PRO
   Lamport L., 2002, SPECIFYING SYSTEMS T
   Leuschel Michael, 2008, International Journal on Software Tools for Technology Transfer, V10, P185, DOI 10.1007/s10009-007-0063-9
   Leuschel M, 2011, FORM ASP COMPUT, V23, P683, DOI 10.1007/s00165-010-0172-1
   Loesch F., 2010, REPORT PILOT DEPLOYM
   PARNAS DL, 1995, SCI COMPUT PROGRAM, V25, P41, DOI 10.1016/0167-6423(95)96871-J
   POHL K, 2007, REQUIREMENTS ENG GRU
   Praxis, 2003, TECHNICAL REPORT
   Rupp C., 2007, Requirements-Engineering und -Management: professionelle, iterative Anforderungsanalyse fur die Praxis
   Tennant N., 2005, The Oxford Handbook of Philosophy of Mathematics, P696
   Hoang TS, 2011, LECT NOTES COMPUT SC, V6991, P456, DOI 10.1007/978-3-642-24559-6_31
   Woodcock J., 1996, Using Z: Specification, Refinement, and Proof
   Yeganefard S., 2011, ECEASST, V46
   Yeganefard S, 2012, IEEE INT C ENG COMP, P39, DOI 10.1109/ICECCS.2012.13
NR 47
TC 11
Z9 12
U1 0
U2 11
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR 2
PY 2014
VL 82
SI SI
BP 2
EP 21
DI 10.1016/j.scico.2013.03.008
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AB5VR
UT WOS:000331857300002
OA hybrid
DA 2024-07-18
ER

PT J
AU Calder, M
   Koliousis, A
   Sevegnani, M
   Sventek, J
AF Calder, Muffy
   Koliousis, Alexandros
   Sevegnani, Michele
   Sventek, Joseph
TI Real-time verification of wireless home networks using bigraphs with
   sharing
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Network management; Verification; Bigraphical reaction systems; Bigraphs
   with sharing; Runtime model generation
AB Home wireless networks are difficult to manage and comprehend because of evolving locality, co-locality, connectivity and interaction. We define formal models of home wireless network infrastructure and policies and investigate how they can be used in a network management system designed to provide user-oriented support. We model spatial and temporal behaviour of network interactions and user-initiated network policies and define an online framework for generation of models from network and user-initiated events. The models are expressed in an extension to Milner's bigraphical reactive systems. Analysis of the models is carried out in real-time by a bespoke bigraph reasoning system based on checking predicates, which is encoded as bigraph matching. Real-time model generation and analysis is implemented on the experimental Homework system router and trialled with synthetic and actual network data. (C) 2013 The Authors. Published by Elsevier B.V. All rights reserved.
C1 [Calder, Muffy; Sevegnani, Michele; Sventek, Joseph] Univ Glasgow, Sch Comp Sci, Glasgow G12 8QQ, Lanark, Scotland.
   [Koliousis, Alexandros] Univ London Imperial Coll Sci Technol & Med, Dept Comp, London SW7 2AZ, England.
C3 University of Glasgow; Imperial College London
RP Calder, M (corresponding author), Univ Glasgow, Sch Comp Sci, Glasgow G12 8QQ, Lanark, Scotland.
EM Muffy.Calder@glasgow.ac.uk
OI Calder, Muffy/0000-0001-5033-7232; Sevegnani,
   Michele/0000-0001-6773-9481
FU Homework Research Project; Engineering and Physical Sciences Research
   Council [EP/F064225/1]; EPSRC [EP/F033206/1, EP/F064276/1, EP/F064225/1]
   Funding Source: UKRI
FX This work is supported by the Homework Research Project, funded by the
   Engineering and Physical Sciences Research Council, under grant
   EP/F064225/1.
CR [Anonymous], ELECT NOTES THEOR CO
   Assmann U., 2012, DAGSTUHL REPORTS, V1, P91
   Bandara A., 2007, ANN C ITA ACITA U MA
   Birkedal L, 2007, ELECTRON NOTES THEOR, V175, P3, DOI 10.1016/j.entcs.2007.04.013
   Calder M, 2015, INNOV SYST SOFTW ENG, V11, P131, DOI 10.1007/s11334-013-0203-1
   Conford G, 2005, LECT NOTES COMPUT SC, V3580, P766
   Eén N, 2004, LECT NOTES COMPUT SC, V2919, P502, DOI 10.1007/978-3-540-24605-3_37
   Krivine J, 2008, ELECTRON NOTES THEOR, V218, P73, DOI 10.1016/j.entcs.2008.10.006
   Milner R., 2009, SPACE MOTION COMMUNI, DOI DOI 10.1017/CBO9780511626661
   Mortier R, 2011, ACM SIGCOMM COMP COM, V41, P464, DOI 10.1145/2043164.2018523
   Sevegnani M., BIGRAPHER
   Sevegnani M., 2012, THESIS U GLASGOW
   Sventek J., 2011, 2011 IFIP/IEEE International Symposium on Integrated Network Management (IM 2011), P1, DOI 10.1109/INM.2011.5990667
   Twidle K., 2013, 5 INT C AUT AUT SYST
NR 14
TC 18
Z9 19
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 1
PY 2014
VL 80
BP 288
EP 310
DI 10.1016/j.scico.2013.08.004
PN B
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 292FH
UT WOS:000329887100004
OA hybrid, Green Accepted
DA 2024-07-18
ER

PT J
AU Zschaler, S
   Demuth, B
   Schmitz, L
AF Zschaler, Steffen
   Demuth, Birgit
   Schmitz, Lothar
TI SALESPOINT: A Java framework for teaching object-oriented software
   development
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Programming education; Object-oriented framework; Business applications;
   Large-class project courses
AB Teaching systematic object-oriented software development to undergraduate students is difficult: Students need to develop a lot of complex skills. These include technical skills in object-oriented software development, but also social skills for example, how to collaborate with other developers as part of a team working towards a large and complex software system. To acquire these skills, students need hands-on development experiences for example, through team-oriented project courses. Designing such project courses is a challenge in itself: They must be both sufficiently challenging and achievable within the limited time available. In our special situation (large numbers of students supervised by small numbers of staff) an important further requirement is scalability: Different projects should be easily comparable while allowing for different tasks for different teams to reduce the risk of plagiarism. The solution that in our experience satisfies all these requirements is to use an application framework for an everyday application domain for example, the business domain.
   Since 1997, we have been using SALESPOINT, a Java-based framework for creating business applications, that has been jointly developed and maintained in Dresden and Munich. In this paper, we briefly recollect the educational background and aims of the courses and present in some detail SALESPoINT (and its most recent revision, SALESPOINT2010): central notions like catalogs and stocks, the functionality it offers to users (application control, data management, and much more), a technical overview of its architecture, an example application built with SALESPOINT, and some lessons learned so far. (C) 2012 Elsevier B.V. All rights reserved.
C1 [Zschaler, Steffen] Kings Coll London, Dept Informat, London, England.
   [Demuth, Birgit] Tech Univ Dresden, Fak Informat, D-01062 Dresden, Germany.
   [Schmitz, Lothar] Univ Bundeswehr Munchen, Fak Informat, Munich, Germany.
C3 University of London; King's College London; Technische Universitat
   Dresden; Bundeswehr University Munich
RP Zschaler, S (corresponding author), Kings Coll London, Dept Informat, London, England.
EM szschaler@acm.org; birgit.demuth@tu-dresden.de; Lothar.Schmitz@unibw.de
RI Zschaler, Steffen/AAC-4911-2020
OI Zschaler, Steffen/0000-0001-9062-6637
CR [Anonymous], 1990, DESIGNING OBJECT ORI
   [Anonymous], 2011, Spring in action
   Apache Foundation, 2011, AP STRUTS
   Bartho A, 2009, INT C PROGRAM COMPRE, P309, DOI 10.1109/ICPC.2009.5090072
   Bauer Christian., 2006, Java Persistence with Hibernate
   Bohrer K.A., 1998, IBM SYSTEMS J, V37
   DeMichiel L., 2008, JSR 000220 ENTERPRIS
   Demuth B., 2002, P 15 C SOFTW ENG ED
   Demuth B., 2001, P WORLD C ED MULT HY
   Froehlich G, 1997, PROC INT CONF SOFTW, P491, DOI 10.1145/253228.253432
   Gambke S., 2000, THESIS U BUNDESWEHR
   Gamma E., 1994, Design patterns: Elements of reusable object-oriented software
   Hoover G.F.J., 1998, CRC HDB OBJECT TECHN
   Kirk D, 2007, EMPIR SOFTW ENG, V12, P243, DOI 10.1007/s10664-006-9027-z
   LeBlanc R., 2004, SOFTWARE ENG 2004 SE
   MATTHEW S, 2005, EXAMINING VALIDITY I
   Normark K., 2000, 8 I INT WORKSH PROGR
   Poppe D., 2001, THESIS U BUNDESWEHR
   Reenskaug Trygve., 2003, MODEL VIEW CONTROLLE
   Reisch C., 2005, WEBPOINT FRAMEWORK W
   RIEHLE D, 2000, THESIS ETH ZURICH
   Rumbaugh J, 1997, UNIFIED MODELING LAN
   Shull F, 2000, IEEE T SOFTWARE ENG, V26, P1101, DOI 10.1109/32.881720
   Wilkinson N. M., 1995, USING CRC CARDS INFO
   Zeid A, 2005, CONF SOFTW ENG EDUC, P51, DOI 10.1109/CSEET.2005.3
   Zullighoven H., 2004, Object-oriented construction handbook: Developing applicationoriented software with the tools & materials approach
NR 26
TC 5
Z9 6
U1 1
U2 50
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 1
PY 2014
VL 79
SI SI
BP 189
EP 203
DI 10.1016/j.scico.2012.04.005
PG 15
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 246RH
UT WOS:000326556300014
OA hybrid
DA 2024-07-18
ER

PT J
AU Bae, K
   Ölveczky, PC
   Feng, TH
   Lee, EA
   Tripakis, S
AF Bae, Kyungmin
   Olveczky, Peter Csaba
   Feng, Thomas Huining
   Lee, Edward A.
   Tripakis, Stavros
TI Verifying hierarchical Ptolemy II discrete-event models using Real-Time
   Maude
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 11th International Conference on Formal Engineering Methods (ICFEM)
CY DEC 09-12, 2009
CL Rio de Janeiro, BRAZIL
SP Pontificia Univ Catolica Rio de Janeiro, Univ York, Inst Mil Engenharia
DE Ptolemy II DE models; Formal semantics; Rewriting logic; Real-Time
   Maude; Model checking; Formal verification
ID REWRITING LOGIC; SEMANTICS; SYSTEMS; SPECIFICATION; FRAMEWORK
AB This paper defines a real-time rewriting logic semantics for a significant subset of Ptolemy II discrete-event models. This is a challenging task, since such models combine a synchronous fixed-point semantics with hierarchical structure, explicit time, and a rich expression language. The code generation features of Ptolemy II have been leveraged to automatically synthesize a Real-Time Maude verification model from a Ptolemy II design model, and to integrate Real-Time Maude verification of the synthesized model into Ptolemy II. This enables a model-engineering process that combines the convenience of Ptolemy II DE modeling and simulation with formal verification in Real-Time Maude. We illustrate such formal verification of Ptolemy II models with three case studies. (C) 2010 Elsevier B.V. All rights reserved.
C1 [Olveczky, Peter Csaba] Univ Oslo, N-0316 Oslo, Norway.
   [Bae, Kyungmin] Univ Illinois, Urbana, IL 61801 USA.
   [Feng, Thomas Huining; Lee, Edward A.; Tripakis, Stavros] Univ Calif Berkeley, Berkeley, CA 94720 USA.
C3 University of Oslo; University of Illinois System; University of
   Illinois Urbana-Champaign; University of California System; University
   of California Berkeley
RP Ölveczky, PC (corresponding author), Univ Oslo, N-0316 Oslo, Norway.
EM peterol@ifi.uio.no
RI Lee, Edward/AAU-4604-2021; Ölveczky, Peter C/B-1797-2008
OI Lee, Edward/0000-0002-5663-0584; Tripakis, Stavros/0000-0002-1777-493X
CR Agrawal A., 2004, ELECTRON NOTES THEOR, V109, P43
   Al-Nayeem A., 2009, P 30 IEEE REAL TIM S
   AlTurki Musab, 2007, Proceedings of the 9th International ACM SIGPLAN Conference on Principles and Practice of Declarative Programming (PPDP'07), P131, DOI 10.1145/1273920.1273938
   AlTurki M, 2009, LECT NOTES COMPUT SC, V5503, P262
   ALUR R, 1992, LECT NOTES COMPUT SC, V600, P74, DOI 10.1007/BFb0031988
   ALUR R, 1995, THEOR COMPUT SCI, V138, P3, DOI 10.1016/0304-3975(94)00202-T
   [Anonymous], 2007, LECT NOTES COMPUTER
   [Anonymous], 2005, EMSOFT 2005
   [Anonymous], P 8 INT WORKSH DISCR
   [Anonymous], 1 INT WORKSH MOD COE
   Bae K., 2009, VERIFYING PTOL UNPUB
   Bae K, 2010, ELECTRON PROC THEOR, P46, DOI 10.4204/EPTCS.36.3
   Bae K, 2009, LECT NOTES COMPUT SC, V5885, P717
   Boronat A, 2010, LECT NOTES COMPUT SC, V6013, P29, DOI 10.1007/978-3-642-12029-9_3
   Bruni R, 2006, THEOR COMPUT SCI, V360, P386, DOI 10.1016/j.tcs.2006.04.012
   Caspi P, 2009, LECT NOTES COMPUT SC, V5469, P46, DOI 10.1007/978-3-642-00602-9_4
   Caspi P., 1987, 14 ACM S POPL
   Cheng C. P., 2008, UCBEECS200841
   Denton T, 2008, LECT NOTES COMPUT SC, V5301, P143, DOI 10.1007/978-3-540-87875-9_10
   Ding H., 2003, P WORDS 03
   Edwards SA, 2003, SCI COMPUT PROGRAM, V48, P21, DOI 10.1016/S0167-6423(02)00096-5
   Eker J, 2003, P IEEE, V91, P127, DOI 10.1109/JPROC.2002.805829
   Farzan A, 2004, LECT NOTES COMPUT SC, V3114, P501
   Fishman George S., 2001, SPRING S OPERAT RES, DOI 10.1007/978-1-4757-3552-9
   Gyapay S, 2003, FUND INFORM, V58, P1
   HAREL D, 1987, SCI COMPUT PROGRAM, V8, P231, DOI 10.1016/0167-6423(87)90035-9
   Henzinger TA, 2008, PHILOS T R SOC A, V366, P3727, DOI 10.1098/rsta.2008.0141
   Henzinger TA, 2007, COMPUTER, V40, P32, DOI 10.1109/MC.2007.364
   Karsai G, 2003, P IEEE, V91, P145, DOI 10.1109/JPROC.2002.805824
   KOYMANS R, 1990, REAL-TIME SYST, V2, P255, DOI 10.1007/BF01995674
   Lee E.A., 2007, Proceedings of the 7th ACM - IEEE international conference on Embedded software. EMSOFT '07, P114
   Lee E. A., 2007, EMSOFT
   Lee EA, 1998, IEEE T COMPUT AID D, V17, P1217, DOI 10.1109/43.736561
   Lee EA, 1999, ANN SOFTW ENG, V7, P25, DOI 10.1023/A:1018998524196
   Lepri D, 2010, ELECTRON PROC THEOR, P117, DOI 10.4204/EPTCS.36.7
   Liu XJ, 2006, LECT NOTES COMPUT SC, V4137, P1
   Liu XJ, 2008, THEOR COMPUT SCI, V409, P110, DOI 10.1016/j.tcs.2008.08.044
   MESEGUER J, 1992, THEOR COMPUT SCI, V96, P73, DOI 10.1016/0304-3975(92)90182-F
   Meseguer J, 1998, LECT NOTES COMPUT SC, V1376, P18
   Meseguer J., 2010, FORMALIZATION CORREC
   Meseguer J, 2007, THEOR COMPUT SCI, V373, P213, DOI 10.1016/j.tcs.2006.12.018
   MISRA J, 1986, COMPUT SURV, V18, P39, DOI 10.1145/6462.6485
   Olveczky P. C., 2007, Higher-Order and Symbolic Computation, V20, P161, DOI 10.1007/s10990-007-9001-5
   Ölveczky PC, 2002, THEOR COMPUT SCI, V285, P359, DOI 10.1016/S0304-3975(01)00363-2
   Ölveczky PC, 2007, ELECTRON NOTES THEOR, V176, P5, DOI 10.1016/j.entcs.2007.06.005
   Ölveczky PC, 2010, LECT NOTES COMPUT SC, V6117, P47, DOI 10.1007/978-3-642-13464-7_5
   Rivera J. E., 2010, LECT NOTES COMPUTER, V6381
   Scaife N., 2004, Proceedings of the 4th ACM International Conference on Embedded Software, EMSOFT '04, P259
   Sztipanovits J, 1997, COMPUTER, V30, P110, DOI 10.1109/2.585163
   Sztipanovits J., 2001, LECT NOTES COMPUTER, V2211
   Tripakis S., 2005, ACM T EMBED COMPUT S, V4, P779, DOI DOI 10.1145/1113830.1113834
   Viry P, 2002, THEOR COMPUT SCI, V285, P487, DOI 10.1016/S0304-3975(01)00366-8
   Zhao Y., 2007, RTAS 07
   Zhou G., 2007, LECT NOTES COMPUTER, V4523
NR 54
TC 18
Z9 19
U1 0
U2 9
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 1
PY 2012
VL 77
IS 12
SI SI
BP 1235
EP 1271
DI 10.1016/j.scico.2010.10.002
PG 37
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 005EH
UT WOS:000308732800003
OA hybrid
DA 2024-07-18
ER

PT J
AU Bettenburg, N
   Shang, WY
   Ibrahim, WM
   Adams, B
   Zou, Y
   Hassan, AE
AF Bettenburg, Nicolas
   Shang, Weiyi
   Ibrahim, Walid M.
   Adams, Bram
   Zou, Ying
   Hassan, Ahmed E.
TI An empirical study on inconsistent changes to code clones at the release
   level
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Software engineering; Maintenance management; Reuse models; Clone
   detection; Maintainability; Software evolution
ID SOFTWARE; TRACKING; CLONING
AB To study the impact of code clones on software quality, researchers typically carry out their studies based on fine-grained analysis of inconsistent changes at the revision level. As a result, they capture much of the chaotic and experimental nature inherent in any on-going software development process. Analyzing highly fluctuating and short-lived clones is likely to exaggerate the ill effects of inconsistent changes on the quality of the released software product, as perceived by the end user. To gain a broader perspective, we perform an empirical study on the effect of inconsistent changes on software quality at the release level. Based on a case study on three open source software systems, we observe that only 1.02%-4.00% of all clone genealogies introduce software defects at the release level, as opposed to the substantially higher percentages reported by previous studies at the revision level. Our findings suggest that clones do not have a significant impact on the post-release quality of the studied systems, and that the developers are able to effectively manage the evolution of cloned code. (C) 2010 Elsevier B.V. All rights reserved.
C1 [Bettenburg, Nicolas; Shang, Weiyi; Ibrahim, Walid M.; Adams, Bram; Zou, Ying; Hassan, Ahmed E.] Queens Univ, Kingston, ON, Canada.
C3 Queens University - Canada
RP Bettenburg, N (corresponding author), Queens Univ, Kingston, ON, Canada.
EM nicbet@cs.queensu.ca; swy@cs.queensu.ca; walid@cs.queensu.ca;
   bram@cs.queensu.ca; ying.zou@queensu.ca; ahmed@cs.queensu.ca
RI Zou, Ying/KLC-9380-2024; Hassan, Ahmed/AAB-7241-2019; Ali,
   Ahmed/HOF-4672-2023; KHALIFA, AHMED khalifa/HKF-2246-2023
OI KHALIFA, AHMED khalifa/0000-0002-2918-7572; Adams,
   Bram/0000-0001-7213-4006
CR Antoniol G, 2002, INFORM SOFTWARE TECH, V44, P755, DOI 10.1016/S0950-5849(02)00123-4
   Aversano L, 2007, CSMR 2007: 11TH EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, PROCEEDINGS, P81
   BAKER BS, 1995, SECOND WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P86, DOI 10.1109/WCRE.1995.514697
   Bakota T, 2007, PROC IEEE INT CONF S, P234
   Barbour Liliane, 2010, Proceedings of the 18th IEEE International Conference on Program Comprehension (ICPC 2010), P76, DOI 10.1109/ICPC.2010.13
   Baxter ID, 1998, PROC IEEE INT CONF S, P368, DOI 10.1109/ICSM.1998.738528
   Bellon S, 2007, IEEE T SOFTWARE ENG, V33, P577, DOI 10.1109/TSE.2007.70725
   Bettenburg N, 2009, WORK CONF REVERSE EN, P85, DOI 10.1109/WCRE.2009.51
   de Wit M, 2009, PROC IEEE INT CONF S, P169, DOI 10.1109/ICSM.2009.5306336
   Duala-Ekoko E, 2007, PROC INT CONF SOFTW, P158
   Duala-Ekoko E, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P843, DOI 10.1145/1368088.1368218
   Ducasse S., 1999, Proceedings IEEE International Conference on Software Maintenance - 1999 (ICSM'99). `Software Maintenance for Business Change' (Cat. No.99CB36360), P109, DOI 10.1109/ICSM.1999.792593
   Gabel M, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P321, DOI 10.1145/1368088.1368132
   Geiger R, 2006, LECT NOTES COMPUT SC, V3922, P411
   Göde N, 2009, IEEE INT WORK C SO, P77, DOI 10.1109/SCAM.2009.17
   Göde N, 2009, EUR CON SFTWR MTNCE, P219, DOI 10.1109/CSMR.2009.20
   Harder J., 2009, PROC IWSC, P17
   Jiang LX, 2007, PROC INT CONF SOFTW, P96
   JOHNSON JH, 1994, INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE, PROCEEDINGS, P120, DOI 10.1109/ICSM.1994.336783
   Juergens E, 2009, PROC INT CONF SOFTW, P485, DOI 10.1109/ICSE.2009.5070547
   Kamiya T, 2002, IEEE T SOFTWARE ENG, V28, P654, DOI 10.1109/TSE.2002.1019480
   Kapser C., 2007, DAGSTUHL SEMINAR P
   Kapser CJ, 2006, J SOFTW MAINT EVOL-R, V18, P61, DOI 10.1002/smr.327
   Kapser C, 2006, WORK CONF REVERSE EN, P19
   Kim Miryung, 2005, ESEC/FSE- 13), P187, DOI [10.1145/1081706.1081737, DOI 10.1145/1081706.1081737]
   Kontogiannis K. A., 1996, Automated Software Engineering, V3, P77, DOI 10.1007/BF00126960
   Koschke R., 2008, SOFTWARE EVOLUTION, P15, DOI DOI 10.1007/978-3-540-76440-3_2
   Koschke R, 2007, DAGSTUHL SEMINAR P, V06301
   Koschke R, 2006, WORK CONF REVERSE EN, P253
   Krinke J, 2001, EIGHTH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P301, DOI 10.1109/WCRE.2001.957835
   Krinke J, 2008, EIGHTH IEEE INTERNATIONAL WORKING CONFERENCE ON SOURCE CODE ANALYSIS AND MANIPULATION, PROCEEDINGS, P57, DOI 10.1109/SCAM.2008.14
   Krinke J, 2007, 14TH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P170, DOI 10.1109/WCRE.2007.7
   Lague B, 1997, INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE, PROCEEDINGS, P314, DOI 10.1109/ICSM.1997.624264
   Liu Chao, 2006, Proc. 12th ACMSIGKDD Int'l Con. on Knowledge Discovery and Data Mining (KDD 06), P872, DOI DOI 10.1145/1150402.1150522
   Lozano A, 2008, PROC IEEE INT CONF S, P227, DOI 10.1109/ICSM.2008.4658071
   Marcus A, 2001, 16TH ANNUAL INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING (ASE 2001), PROCEEDINGS, P107, DOI 10.1109/ASE.2001.989796
   Nguyen TT, 2009, IEEE INT CONF AUTOM, P123, DOI 10.1109/ASE.2009.90
   Rahman Foyzur, 2010, Proceedings of the 2010 7th IEEE Working Conference on Mining Software Repositories (MSR 2010), P72, DOI 10.1109/MSR.2010.5463343
   Roy CK, 2010, J SOFTW MAINT EVOL-R, V22, P165, DOI 10.1002/smr.416
   Roy C. K., 2007, 541 QUEENS U
   Roy CK, 2009, IEEE ICST WORKSHOP, P157, DOI 10.1109/ICSTW.2009.18
   Roy CK, 2008, INT C PROGRAM COMPRE, P153, DOI 10.1109/ICPC.2008.42
   Roy CK, 2009, SCI COMPUT PROGRAM, V74, P470, DOI 10.1016/j.scico.2009.02.007
   Shang W., 2010, ASE'10: 25th IEEE/ACM International Conference on Automated Software Engineering, P275
   Sim J, 2005, PHYS THER, V85, P257
   Thummalapenta S, 2010, EMPIR SOFTW ENG, V15, P1, DOI 10.1007/s10664-009-9108-x
NR 46
TC 29
Z9 34
U1 0
U2 5
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 1
PY 2012
VL 77
IS 6
SI SI
BP 760
EP 776
DI 10.1016/j.scico.2010.11.010
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 931AO
UT WOS:000303186500008
OA Bronze
DA 2024-07-18
ER

PT J
AU Perna, J
   Woodcock, J
AF Perna, Juan
   Woodcock, Jim
TI Mechanised wire-wise verification of Handel-C synthesis
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Handel-C synthesis; Denotational semantics; Correctness; Mechanical
   verification; HOL
AB The compilation of Handel-C programs into net-list descriptions of hardware components has been extensively used in commercial tools but never formally verified. In this paper, we first introduce an extension of the compilation schema that allows the synthesis of the prioritised choice construct. Then we present a variation of the existing semantic model for Handel-C compilation that is amenable to mechanical proof and detailed enough for analysing properties of the hardware generated. We use this model to prove the correctness of the wiring schema used to interconnect the components at the hardware level and propagate control signals among them. Finally, we present the most interesting aspects of the mechanisation of the model and the correctness proofs in the HOL theorem prover. (C) 2010 Elsevier B.V. All rights reserved.
C1 [Perna, Juan; Woodcock, Jim] Univ York, Dept Comp Sci, York YO10 5DD, N Yorkshire, England.
C3 University of York - UK
RP Perna, J (corresponding author), Univ York, Dept Comp Sci, York YO10 5DD, N Yorkshire, England.
EM jiperna@cs.york.ac.uk
OI Woodcock, James/0000-0001-7955-2702
FU EPSRC [EP/E025366/1, EP/H017461/1, EP/G061947/1] Funding Source: UKRI
CR [Anonymous], 1993, CAMBRIDGE TRACTS THE
   [Anonymous], P S COMP AUT
   BOULTON R, 1992, IFIP TRANS A, V10, P129
   Brookes S., SEM CONC, P1
   BROOKES SD, 1985, LECT NOTES COMPUTER, V197
   Butterfield A., 2001, DENOTATIONAL SEMANTI
   Butterfield A, 2007, LECT NOTES COMPUT SC, V4700, P45
   Camilleri J., 1992, REASONING INDUCTIVEL
   *CEL LTD, 2002, 18 AN CEL LTD
   Celoxica Ltd, 2002, DK3 HAND C LANG REF
   Davey B. A., 2002, INTRO LATTICES ORDER, V2nd, DOI DOI 10.1017/CBO9780511809088
   Floyd R.W., 1967, P S APPL MATH, V19, P19
   Gordon M.J.C., 1993, Introduction to HOL: A theorem proving environment for higher order logic
   Hoare C. A. R., 1983, Communications of the ACM, V26, P100, DOI 10.1145/357980.358021
   Hoare C.A.R., 1998, UNIFYING THECRIES PR
   Kernighan B.W., 1988, The C Programming Language
   Lengauer Christian, STATIC DERIVATION CO, P131
   Melham T. F., 1992, P 1991 INT WORKSH HO, P350
   MELHAM TF, 1988, FUSION HARDWARE DESI, P27
   Page I, 1996, J VLSI SIG PROC SYST, V12, P87, DOI 10.1007/BF00936948
   Page I., 1991, FPGAs. International Workshop on Field Programmable Logic and Applications, P271
   Perna J., 2007, YCS2008429 U YORK CO
   Perna Juan Ignacio, 2008, Unifying Theories of Programming. Second International Symposium, UTP 2008. Revised Selected Papers, P142
   Perna JI, 2007, LECT NOTES COMPUT SC, V4789, P266
   Perna JI, 2009, ELECTRON NOTES THEOR, V240, P201, DOI 10.1016/j.entcs.2009.05.053
   Roxas R. E. O., 1994, Higher Order Logic Theorem Proving and Its Applications. 6th International Workshop, HUG '93 Proceedings, P129
NR 26
TC 4
Z9 4
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD APR 1
PY 2012
VL 77
IS 4
SI SI
BP 424
EP 443
DI 10.1016/j.scico.2010.02.007
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 906ER
UT WOS:000301328200002
DA 2024-07-18
ER

PT J
AU Shankar, N
   Subramani, K
AF Shankar, Natarajan
   Subramani, K.
TI A mechanical verification of the stressing algorithm for negative cost
   cycle detection in networks
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Negative cost cycle detection; Graph algorithms; Decision algorithms;
   Formal verification; Interactive theorem proving
AB The negative cost cycle detection (NCCD) problem in weighted directed graphs is a fundamental problems in theoretical computer science with applications in a wide range of domains ranging from maximum flows to image segmentation. From the perspective of program verification, this problem is identical to the problem of checking the satisfiability of a conjunction of difference constraints. There exist a number of approaches in the literature for NCCD with each approach having its own set of advantages. Recently, a greedy, space-efficient algorithm called the stressing algorithm was proposed for this problem. In this paper, we present a novel proof of the Stressing algorithm and its verification using the Prototype Verification System (PVS) theorem prover. This example is part of a larger research program to verify the soundness and completeness of a core set of decision procedures. (C) 2010 Elsevier B.V. All rights reserved.
C1 [Shankar, Natarajan] SRI Int, Comp Sci Lab, Menlo Pk, CA 94025 USA.
   [Subramani, K.] W Virginia Univ, LDCSEE, Morgantown, WV 26506 USA.
C3 SRI International; West Virginia University
RP Shankar, N (corresponding author), SRI Int, Comp Sci Lab, 333 Ravenswood Ave, Menlo Pk, CA 94025 USA.
EM shankar@csl.sri.com; ksmani@csee.wvu.edu
OI Subramani, K./0000-0001-5821-5117; Shankar,
   Natarajan/0000-0002-8652-8871
FU NSF [CSR-EHCS(CPS)-0834810, CNS-0917375]; Air Force Office of Scientific
   Research [FA9550-06-1-0050]
FX This research was supported by NSF Grants CSR-EHCS(CPS)-0834810 and
   CNS-0917375 and by the Air Force Office of Scientific Research under
   grant FA9550-06-1-0050. The views and opinions expressed in this
   document are not necessarily those of the National Science Foundation,
   the Air Force Office of Scientific Research, or any other agency of the
   United States Government. We are grateful to the anonymous reviewers for
   insightful comments and corrections.
CR [Anonymous], LECT NOTES COMPUTER
   Boyer R. S., 1979, COMPUTATIONAL LOGIC
   Chaieb A, 2005, LECT NOTES ARTIF INT, V3835, P367, DOI 10.1007/11591191_26
   Cotton S, 2006, LECT NOTES COMPUT SC, V4121, P170
   Cox I. J., 1996, Proceedings of the 13th International Conference on Pattern Recognition, P557, DOI 10.1109/ICPR.1996.546886
   DECHTER R, 1991, ARTIF INTELL, V49, P61, DOI 10.1016/0004-3702(91)90006-6
   Demetrescu C, 2004, J ACM, V51, P968, DOI 10.1145/1039488.1039492
   Ford J., 2002, Automated Deduction - CADE-18. 18th International Conference on Automated Deduction. Proceedings (Lecture Notes in Artificial Intelligence Vol.2392), P347
   OWRE S, 1995, IEEE T SOFTWARE ENG, V21, P107, DOI 10.1109/32.345827
   Shankar N., 1985, Journal of Automated Reasoning, V1, P407, DOI 10.1007/BF00244278
   Subramani K, 2005, LECT NOTES COMPUT SC, V3738, P320, DOI 10.1007/11561354_27
   Subramani K, 2007, J DISCRET ALGORITHMS, V5, P408, DOI 10.1016/j.jda.2006.12.002
   Thery L., 1998, LECT NOTES ARTIF INT, V1421, P349
NR 13
TC 0
Z9 0
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUL 1
PY 2011
VL 76
IS 7
BP 609
EP 626
DI 10.1016/j.scico.2010.08.002
PG 18
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 750YO
UT WOS:000289584500005
DA 2024-07-18
ER

PT J
AU Bettini, L
   Capecchi, S
   Venneri, B
AF Bettini, Lorenzo
   Capecchi, Sara
   Venneri, Betti
TI Featherweight Java with dynamic and static overloading
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Object-oriented languages; Featherweight Java; Multi-methods; Static
   overloading; Dynamic overloading; Type system
ID OBJECT-ORIENTED LANGUAGES; MULTIMETHODS; DISPATCH
AB We propose FMJ (Featherweight Multi Java), an extension of Featherweight Java with encapsulated multi-methods thus providing dynamic overloading. Multi-methods (collections of overloaded methods associated to the same message, whose selection takes place dynamically instead of statically as in standard overloading) are a useful and flexible mechanism which enhances re-usability and separation of responsibilities. However, many mainstream languages, such as, e.g., Java, do not provide it, resorting to only static overloading.
   The proposed extension is conservative and type safe: both "message-not-understood" and "message-ambiguous" are statically ruled out. Possible ambiguities are checked during type checking only on method invocation expressions, without requiring to inspect all the classes of a program. A static annotation with type information guarantees that in a well-typed program no ambiguity can arise at run-time. This annotation mechanism also permits modeling static overloading in a smooth way.
   Our core language can be used as the formal basis for an actual implementation of dynamic (and static) overloading in Java-like languages. (C) 2009 Elsevier B.V. All rights reserved.
C1 [Bettini, Lorenzo; Capecchi, Sara] Univ Turin, Dipartimento Informat, I-10124 Turin, Italy.
   [Venneri, Betti] Univ Florence, Dipartimento Sistemi & Informat, I-50121 Florence, Italy.
C3 University of Turin; University of Florence
RP Bettini, L (corresponding author), Univ Turin, Dipartimento Informat, I-10124 Turin, Italy.
EM bettini@dsi.unifi.it; capecchi@di.unito.it; venneri@dsi.unifi.it
OI Bettini, Lorenzo/0000-0002-4481-8096; VENNERI,
   BATTISTINA/0000-0001-6458-0305; CAPECCHI, SARA/0000-0001-6157-2932
CR Alexandrescu A., 2001, Modern C++ Design: Generic Programming and Design Patterns Applied
   Allen E., 2006, The Fortress Language Specification
   ANCONA D, 2001, FOOL, P8
   ANDRE P, 1992, P OOPSLA 92, P110
   [Anonymous], 1996, A Theory of Objects
   [Anonymous], ACM COMPUTING SURVEY
   BANCILHON F, 1992, IMPLEMENTING OBJECT
   BETTINI L, 2004, ENTCS, V138
   BETTINI L, 2007, P PPPJ PRINC PRACT P, V272, P83
   Bettini L, 2006, SOFTWARE PRACT EXPER, V36, P581, DOI 10.1002/spe.709
   BEUGNARD A, 2006, SAC 06, P1424
   BEYER D, 2000, IWSM 00, P1
   Bobrow D. G., 1989, LISP and Symbolic Computation, V1, P245, DOI 10.1007/BF01806961
   Boyland J, 1997, ACM SIGPLAN NOTICES, V32, P66, DOI 10.1145/263700.263721
   BRUCE K, 1995, THEOR PRACT OBJ SYST, V1, P217
   Carbonetto P., IMPLEMENTATION MULTI
   CASTAGNA G, 1995, ACM T PROGR LANG SYS, V17, P431, DOI 10.1145/203095.203096
   CASTAGNA G, 1995, THEOR COMPUT SCI, V151, P297, DOI 10.1016/0304-3975(95)00071-4
   Castagna Giuseppe., 1997, Progress in Theoretical Computer Science
   Chambers C, 1995, ACM T PROGR LANG SYS, V17, P805, DOI 10.1145/218570.218571
   CHAMBERS C, 1996, 4 INT WORKSH FDN OBJ, P4
   Clifton C, 2000, ACM SIGPLAN NOTICES, V35, P130, DOI 10.1145/354222.353181
   DEMICHIEL LG, 1987, LECT NOTES COMPUT SC, V276, P151
   Driesen K., 1995, P ACMOOPSLA 95 C, P141
   Dutchyn C, 2001, 6TH USENIX CONFERENCE OF OBJECT-ORIENTED TECHNOLOGIES AND SYSTEMS (COOTS 01), P77
   FORAX R, 2000, INT TECHN OBJ OR LAN
   Gamma E., 1994, Design patterns: Elements of reusable object-oriented software
   GROTHOFF C, 2003, LNCS, V2743
   Igarashi A, 2001, ACM T PROGR LANG SYS, V23, P396, DOI 10.1145/503502.503505
   INGALLS DHH, 1986, P OOPSLA, P347
   Keene S.E., 1989, OBJECT ORIENTED PROG
   Kumar R, 2005, ACM SIGPLAN NOTICES, V40, P18, DOI 10.1145/1071221.1071223
   LEA D, 1992, P USENIX C TECHN C U, P341
   LEAVENS GT, 1998, OOPSLA98, P374
   Lippman StanleyB., 1996, INSIDE C OBJECT MODE
   Meyer B., 1991, EIFFEL LANGUAGE
   MEYER B, 2001, J OBJECT ORIENTED PR, P3
   Millstein T, 2002, INFORM COMPUT, V175, P76, DOI 10.1006/inco.2002.3103
   MUGRIDGE WB, 1991, LECT NOTES COMPUT SC, V512, P307
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   PIRKELBAUER P, 2007, GPCE 07, P123
   Schärli N, 2003, LECT NOTES COMPUT SC, V2743, P248
   SHALIT A, 1997, DYLAN REFERENCE MANU
   SMITH J, 2001, CMM C MULTIMETHODS
   SMITH J, DRAFT PROPOSAL ADDIN
   Stroustrup B., 1994, The Design and Evolution of C++
   VITEK J, 1996, LECT NOTES COMPUTER, V1060, P309
NR 47
TC 7
Z9 7
U1 0
U2 4
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR 1
PY 2009
VL 74
IS 5-6
SI SI
BP 261
EP 278
DI 10.1016/j.scico.2009.01.007
PG 18
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 436CT
UT WOS:000265390900002
DA 2024-07-18
ER

PT J
AU Freitas, L
   Woodcock, J
   Zhang, YC
AF Freitas, Leo
   Woodcock, Jim
   Zhang, Yichi
TI Verifying the CICS File Control API with Z/Eves: An experiment in the
   verified software repository
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Grand challenge in verified software; IBM CICS; Verified software
   repository; Z notation; Z/Eves; File API; Mechanical proof; Theorem
   proving; Verification challenge problems
AB Parts of the CICS transaction processing system were modelled formally in the 1980s in a collaborative project between IBM UK Hursley Park and Oxford University Computing Laboratory. Z was used to capture a precise description of the behaviour of various modules as a means of communicating requirements and design intentions. These descriptions were not mechanically verified in any way: proof tools for Z were not considered mature. and no business case was made for effort in this area. We report a recent experiment ill using the Z/Eves theorem prover to construct a machine-checked analysis of one of the CICS modules: the File Control API. This work was carried Out as part of the international Grand Challenge in Verified Software, and our results are recorded in the Verified Software Repository. We give a brief description of the other modules, and propose them as challenge problems for the verification community. (C) 2008 Elsevier B.V. All rights reserved.
C1 [Freitas, Leo; Woodcock, Jim; Zhang, Yichi] Univ York, Dept Comp Sci, York YO10 5DD, N Yorkshire, England.
C3 University of York - UK
RP Freitas, L (corresponding author), Univ York, Dept Comp Sci, York YO10 5DD, N Yorkshire, England.
EM leo@cs.york.ac.uk; jim@cs.york.ac.uk; yczhang84@googlemail.com
RI Freitas, Leo/G-5733-2012
OI Woodcock, James/0000-0001-7955-2702
FU EPSRC [EP/G061947/1, EP/E025366/1] Funding Source: UKRI
CR [Anonymous], 1992, The Z Notation
   Bicarregui JC, 2006, FORM ASP COMPUT, V18, P143, DOI 10.1007/s00165-005-0079-4
   COLLINS BP, 1991, INST MATH C, V27, P153
   CROXALL S, 1990, 12277 IBM
   Freitas L, 2007, IEEE INT C ENG COMP, P290, DOI 10.1109/ICECCS.2007.45
   Hayes I. J., 1993, SPECIFICATION CASE S
   HAYES IJ, 1987, TECHNICAL MONOGRAPH
   HAYES IJ, APPL FORMAL SPECIFIC
   Hinchey M.G., 1995, Applications of Formal Methods
   HOUSTON I, 1991, LECT NOTES COMPUT SC, V551, P588
   IAIN SC, 1990, 12272 IBM
   *ISO IEC, 135682002 ISOIEC
   Jacky J., 1997, The way of Z: practical programming with formal methods
   Jones C, 2006, COMPUTER, V39, P93, DOI 10.1109/MC.2006.145
   JONES C, 2008, FORMAL ASPECTS COMPU, V20
   KING S, SPECIFYING IBM CICS
   KING S, USE Z RESTRUCTURE IB
   Saaltink M., 1997, ZUM '97: The Z Formal Specification Notation. 10th International Conference of Z Users Proceedings, P72, DOI 10.1007/BFb0027284
   SAALTINK M, 1997, TR97549303D OR CAN
   SAALTINK M, 2003, TR03549305C OR CAN
   SAALTINK M, 1999, TR99549306A OR CAN
   Woodcock J., 1996, Using Z: Specification, Refinement, and Proof
   Woodcock J, 2006, LECT NOTES COMPUT SC, V4281, P15
   Woodcock J, 2006, COMPUTER, V39, P57, DOI 10.1109/MC.2006.340
   WORDSWORTH J, 1990, P 5 ANN Z US M, P285
   2005, VER SOFT THEOR TOOLS
   QUEENS AWARD TECHNOL
NR 27
TC 5
Z9 7
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 1
PY 2009
VL 74
IS 4
BP 197
EP 218
DI 10.1016/j.scico.2008.09.012
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 410ZK
UT WOS:000263616600003
DA 2024-07-18
ER

PT J
AU Flanagan, C
   Freund, SN
AF Flanagan, Cormac
   Freund, Stephen N.
TI Atomizer: A dynamic atomicity checker for multithreaded programs
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE atomicity; dynamic analysis; reduction; concurrency
ID REDUCTION
AB Ensuring the correctness of multithreaded programs is difficult, due to the potential for unexpected interactions between concurrent threads. Much previous work has focused on detecting race conditions, but the absence of race conditions does not by itself prevent undesired interactions between threads.
   A more fundamental noninterference property is atonficity. A method is atomic if its execution is not affected by and does not interfere with concurrently-executing threads. Atomic methods can be understood according to their sequential semantics, which significantly simplifies both formal and informal correctness arguments.
   This paper presents a dynamic analysis for detecting atomicity violations. This analysis combines ideas from both Lipton's theory of reduction and earlier dynamic race detectors. Experience with a prototype checker for multithreaded Java code demonstrates that this approach is effective for detecting errors due to unintended interactions between threads. In particular, our atomicity checker detects errors that would be missed by standard race detectors. Our experimental results also indicate that the majority of methods in our benchmarks are atomic, indicating that atomicity is a standard methodology in multithreaded programming. (C) 2008 Elsevier B.V. All rights reserved.
C1 [Flanagan, Cormac] Univ Calif Santa Cruz, Dept Comp Sci, Santa Cruz, CA 95064 USA.
   [Freund, Stephen N.] Williams Coll, Dept Comp Sci, Williamstown, MA 01267 USA.
C3 University of California System; University of California Santa Cruz;
   Williams College
RP Flanagan, C (corresponding author), Univ Calif Santa Cruz, Dept Comp Sci, Santa Cruz, CA 95064 USA.
EM cormac@cs.ucsc.edu
CR Agarwal R, 2004, LECT NOTES COMPUT SC, V2937, P149
   [Anonymous], LECT NOTES COMPUTER
   [Anonymous], 2000, Programming Language Design and Implementation, DOI [DOI 10.1145/358438.349328, 10.1145/349299.349328]
   [Anonymous], ACM SIGPLAN S PRINC
   [Anonymous], 1989, 35 DIG EQ CORP SYST
   ARTHO C, 2003, 1 INT WORKSH VER VAL
   ATKINSON MP, 1985, ACM T PROGR LANG SYS, V7, P539, DOI 10.1145/4472.4477
   ATKINSON MP, 1981, ACM SIGPLAN NOTICES, V17, P24
   BACK RJR, 1989, LECT NOTES COMPUT SC, V366, P199
   BACON DF, 2001, P ACM C OBJ OR PROGR, P382
   BOYAPATI C, 2001, P ACM C OBJ OR PROGR, P56
   BOYAPATI C, 2002, P 17 ACM SIGPLAN C O, P211
   BURROWS M, 2002, 2002004 COMP SYST RE
   CHAMILLARD AT, 1996, 96084 U MASS DEP COM
   Choi J.-D., 2002, PROGRAMMING LANGUAGE, P258
   Cohen E, 1998, LECT NOTES COMPUT SC, V1466, P317, DOI 10.1007/BFb0055631
   Corbett JC, 1996, IEEE T SOFTWARE ENG, V22, P161, DOI 10.1109/32.489078
   Deng XG, 2002, ICSE 2002: PROCEEDINGS OF THE 24TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P442, DOI 10.1109/ICSE.2002.1007989
   DOEPPNER TW, 1977, P ACM S PRINC PROGR, P155
   DWYER MB, 1994, 94945 U MASS DEP COM
   Eppinger JeffreyL., 1991, Camelot and Avalon: A Distributed Transaction Facility
   Fajstrup L, 1998, LECT NOTES COMPUT SC, V1466, P332, DOI 10.1007/BFb0055632
   Flanagan C, 2005, IEEE T SOFTWARE ENG, V31, P275, DOI 10.1109/TSE.2005.47
   Flanagan C, 2004, LECT NOTES COMPUT SC, V3148, P116
   Flanagan C, 1999, LECT NOTES COMPUT SC, V1576, P91
   Flanagan C, 1999, LECT NOTES COMPUT SC, V1664, P288
   FLANAGAN C, 2005, P TLDI 05, P47
   FLANAGAN C, 2003, P 2003 ACM SIGPLAN I, P1
   FLANAGAN C, 2004, SPIN, P252
   FLANAGAN C, 2001, WORKSH PROGR AN SOFT, P90
   FLANAGAN C, 2002, P ACM SIGPLAN 2002 C, P234
   Flanagan Cormac., 2003, Pro- ceedings of the ACM SIGPLAN 2003 Conference on Programming Language Design and Implementation, PLDI '03, P338
   Freund StephenN., 2004, Journal of Object Technology, V3, P81
   Gosling James, 1996, The Java Language Specification
   GROSSMAN D, 2003, P ACM SIGPLAN INT WO, P13
   HARRIS T, 2003, P 18 ANN ACM SIGPLAN, P388, DOI DOI 10.1145/949305.949340
   HERLIHY MP, 1990, ACM T PROGR LANG SYS, V12, P463, DOI 10.1145/78969.78972
   HOARE CAR, 1974, COMMUN ACM, V17, P549, DOI 10.1145/355620.361161
   *JAV GRAND FOR, 2003, JAV GRAND BENCHM SUI
   KISTLER T, 1998, P 7 INT WORLD WID WE, V30, P259
   Kobayashi N, 1998, ACM T PROGR LANG SYS, V20, P436, DOI 10.1145/276393.278524
   LAMPORT L, 1989, 44 DEC SYST RES CTR
   LIPTON RJ, 1975, COMMUN ACM, V18, P717, DOI 10.1145/361227.361234
   Liskov B., 1987, SOSP 87, P111
   LOMET DB, 1977, LANGUAGE DESIGN RELI, P128
   Manson Jeremy., 2005, Proceedings of the 32Nd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, POPL'05, P378, DOI DOI 10.1145/1040305.1040336
   Misra J., 2001, A Discipline of Multiprogramming
   Papadimitriou C., 1986, Theory of Database Concurrency Control
   Pozniansky E., 2003, Proceedings of the Ninth ACM SIGPLAN Sym- posium on Principles and Practice of Parallel Programming, PPoPP '03, P179, DOI DOI 10.1145/781498.781529
   QADEER S, 2004, POPL, P245
   ROBBY JH, 2004, P INT C VER MOD CHEC, P175
   Sasturkar Amit., 2005, PPOPP 05, P83, DOI DOI 10.1145/1065944.1065956
   Savage S, 1997, ACM T COMPUT SYST, V15, P391, DOI 10.1145/269005.266641
   *STAND PERF EV COR, 2003, SPEC BENCHM
   STERLING N, 1993, PROCEEDINGS OF THE WINTER 1993 USENIX CONFERENCE, P97
   von Praun Christoph., 2003, Proceedings of the ACM SIGPLAN 2003 Conference on Programming Language Design and Implementation (PLDI '03), P115
   VONPRAUN C, 2003, WORKSH FORM TECHN JA
   VONPRAUN C, 2001, P ACM C OBJ OR PROGR, P70
   WANG L, 2003, ELECT NOTES COMPUTER, V89
   Wang LQ, 2006, IEEE T SOFTWARE ENG, V32, P93, DOI 10.1109/TSE.2006.1599419
NR 60
TC 26
Z9 33
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD APR 1
PY 2008
VL 71
IS 2
BP 89
EP 109
DI 10.1016/j.scico.2007.12.001
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 305LX
UT WOS:000256181000001
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Xian, F
   Srisa-An, W
   Jiang, H
AF Xian, Feng
   Srisa-an, Witawas
   Jiang, Hong
TI Garbage collection: Java application servers' Achilles heel
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT International Conference on Principles and Practices of Programming in
   Java
CY 2006
CL Mannheim, GERMANY
DE application servers; throughput degradation; garbage collection;
   performance analysis
AB Java application servers an, gaining popularity as a way for businesses to conduct day-to-day operations. While strong emphasis has been placed on how to obtain peak performance, only a few research efforts have focused on these servers' ability to sustain top performance in spite of the ever-changing demands from users. As a preliminary study, we conducted an experiment to observe the throughput degradation behavior of a widely-used Java application server running a standardized benchmark and found that throughput performance degrades ungracefully. Thus, the goal of this work is three-fold: (i) to identify the primary factors that cause poor throughput degradation, (ii) to investigate how these factors affect throughput degradation, and (iii) to observe how changes in algorithms and policies governing these factors affect throughput degradation. Published by Elsevier B.V.
C1 [Xian, Feng; Srisa-an, Witawas; Jiang, Hong] Univ Nebraska, Lincoln, NE 68588 USA.
C3 University of Nebraska System; University of Nebraska Lincoln
RP Xian, F (corresponding author), Univ Nebraska, 256 Avery Hall, Lincoln, NE 68588 USA.
EM fxian@cse.unl.edu; witty@cse.unl.edu; jiang@cse.unl.edu
RI Srisa-an, Witawas/S-6107-2019
CR [Anonymous], 2000, SPECJBB2000
   [Anonymous], TUNING GARBAGE COLLE
   APPEL AW, 1989, SOFTWARE PRACT EXPER, V19, P171, DOI 10.1002/spe.4380190206
   ARMSTRONG E, HOTSPOT NEW BREED VI
   Bacon D. F., 2001, ECOOP 2001 - Object-Oriented Programming. 15th European Conference. Proceedings (Lecture Notes in Computer Science Vol.2072), P207
   BACON D.F., 1998, PLDI 98, P258
   BACON DF, 2003, P 2003 ACM SIGPLAN C, P81
   BACON DF, 2001, P ACM SIGPLAN C PROG, P92
   Blackburn SM, 2004, PROC INT CONF SOFTW, P137, DOI 10.1109/ICSE.2004.1317436
   BLACKBURN SM, 2001, P ACM SIGPLAN C OBJ, P342
   BLACKBURN SM, 2003, P 18 ANN ACM SIGPLAN, P344
   BLACKBURN SM, 2004, P ACM C MEAS MOD COM, P25
   Blackburn StephenM., 2002, P SIGPLAN 2002 C PRO, P153, DOI DOI 10.1145/512529.512548
   CHRISTOPHER TW, 1984, SOFTWARE PRACT EXPER, V14, P503, DOI 10.1002/spe.4380140602
   Grzegorczyk C, 2007, INT SYM CODE GENER, P325
   GUPTA A, TURBO CHARGING JAVA
   HARRIS TL, 2000, P ACM SIGPLAN INT S, V36, P127
   Hauswirth M., 2004, OOPSLA 04 P 19 ANN A, P251
   HERTZ M, 2002, P 2002 ACM INT C MEA, P140
   HERTZ M, 2005, P ACM SIGPLAN C OBJ, P313
   HIBINO H, 2005, WORKSGH DEP SOFTW TO
   Huang W, 2004, INT SYM PERFORM ANAL, P133
   Ilbo Chosun., 2006, Cyber Crime Behind College Application Server Crash, Onlinearticle
   *JBOSS, JBOSS APPL SERV PROD
   *JBOSS ONL TUT, CONT CONF
   Jones R., 1998, Garbage Collection: Algorithms for automatic Dynamic Memory Management
   Jump Maria., 2004, ACM INT S MEMORY MAN, P152
   LIEBERMAN H, 1983, COMMUN ACM, V26, P419, DOI 10.1145/358141.358147
   MCCARTHY J, 1960, COMMUN ACM, V3, P184, DOI 10.1145/367177.367199
   SHOLLER D, 2002, NET SEEN GAINING STE
   SRISAAN W, 2005, P INT S DISTR OBJ AP, P1065
   *STAND PERF EV COR, SPECWEB2005
   *STAND PERF EV COR, 1998, SPECJVM98 US GUID ON
   *STAND PERF EV COR, 2004, SPECJAPPSERVER2004 U
   Standard Performance Evaluation Corporation, 2005, SPECJBB2005
   Stutz D., 2003, SHARED SOURCE CLI ES
   *SUN MICR, 2005, 5 REAS MOV J2SE 5 PL
   *SUN MICR, WHIT PAP JAV HOTSPOT
   SWOYER S, 2007, IMPRESSIVE GROWTH AH
   WEIZENBAUM J, 1963, COMMUN ACM, V6, P524, DOI 10.1145/367593.367617
   Welsh Matt., 2001, SIGOPS OPER SYST REV, V35, P230
   WILSON PR, 1992, P INT WORKSH MEM MAN, P1
   XIAN F, 2005, COMP ACM SIGPLAN C O, P246
   XIAN F, 2006, COMP ACM SIGPLAN C O, P661
   Xian F, 2007, LECT NOTES COMPUT SC, V4609, P126
   Yang T, 2006, USENIX ASSOCIATION 7TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P103
   Yang Ting., 2004, Proceedings of the 4th international symposium on Memory management, P61
   Zhang Chengliang., 2006, P 2004 ACM SIGPLAN I, P174
   Zhang L, 2004, LECT NOTES COMPUT SC, V3320, P155, DOI 10.1145/997163.997186
   ZHANG L, 2004, INT C PRINC PRACT PR, P83
   2005, NETCRAFT VIDEO IPOD
   [No title captured]
NR 52
TC 8
Z9 10
U1 0
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 1
PY 2008
VL 70
IS 2-3
BP 89
EP 110
DI 10.1016/j.scico.2007.07.008
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 278EJ
UT WOS:000254266600002
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Oliveira, C
   Wermelinger, M
AF Oliveira, Cristovao
   Wermelinger, Michel
TI The COMMUNITY workbench
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE separation of concerns; computation; coordination; distribution;
   mobility; high level design
AB COMMUNITY is a formal approach to Software Architecture with a strict separation of the computation, coordination, and distribution aspects. The approach is based on a parallel design language with state, which facilitates the specification of computations compared to the process calculi used by other formal approaches, and on category theory, which provides an intuitive yet precise graph-based semantics for the configuration of components and connectors. The COMMUNITY Workbench is being developed as a proof of concept of the COMMUNITY framework, providing a graphical integrated development environment to write components, draw configurations, and execute the resulting system. (c) 2007 Elsevier B.V. All rights reserved.
C1 [Oliveira, Cristovao] Univ Nova Lisboa, Dept Informat, P-2829516 Caparica, Portugal.
   [Wermelinger, Michel] Open Univ, Dept Comp, Milton Keynes MK7 6AA, Bucks, England.
C3 Universidade Nova de Lisboa; Open University - UK
RP Oliveira, C (corresponding author), Univ Nova Lisboa, Dept Informat, P-2829516 Caparica, Portugal.
EM co@di.fct.unl.pt
RI Wermelinger, Michel/AAG-5635-2020
OI Wermelinger, Michel/0000-0002-6467-3293
CR Allen R., 1997, ACM Transactions on Software Engineering and Methodology, V6, P213, DOI 10.1145/258077.258078
   Bettini L, 2005, LECT NOTES COMPUT SC, V3465, P29
   Chandy K.M., 1988, PARALLEL PROGRAM DES
   Fiadeiro J.L., 2004, CATEGORIES SOFTWARE
   Francez N., 1996, INTERACTING PROCESSE
   *JAV COMP COMP TM, JAV PARS GEN
   Lopes A, 2003, ACM T SOFTW ENG METH, V12, P64, DOI 10.1145/839268.839272
   LOPES A, 2006, LNCS, V3922, P18
   Lopes Antonia, 2002, P 10 S FDN SOFTW ENG, P41
   Magee J, 1999, INT FED INFO PROC, V12, P35
   OLIVEIRA C, 2005, DISTRIBUTED EXECUTIO
   OLIVEIRA C, 2007, P 6 WORK IFIP IEEE C
   Oliveira C, 2005, ELECTRON NOTES THEOR, V141, P3, DOI 10.1016/j.entcs.2005.06.031
   Wermelinger M, 2002, SCI COMPUT PROGRAM, V44, P133, DOI 10.1016/S0167-6423(02)00036-9
   Wermelinger M., 2003, LNCS, V2793, P190
   *ZER G SOFTW, INST AN
NR 16
TC 0
Z9 0
U1 0
U2 1
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 1
PY 2007
VL 69
IS 1-3
BP 46
EP 55
DI 10.1016/j.scico.2006.09.005
PG 10
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 253CQ
UT WOS:000252496700006
DA 2024-07-18
ER

PT J
AU Zhang, HY
   Bradbury, JS
   Cordy, JR
   Dingel, J
AF Zhang, Hongyu
   Bradbury, Jeremy S.
   Cordy, James R.
   Dingel, Juergen
TI Using source transformation to test and model check implicit-invocation
   systems
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 5th IEEE International Workshop on Source Code Analysis and Manipulation
CY SEP 30-OCT 01, 2005
CL Budapest, HUNGARY
SP IEEE Comp Soc, IEEE, Kings Coll London, RAIN CODE, ITC irst
DE source transformation; domain-specific language; verification; testing;
   model checking; implicit invocation
AB In this paper we present a source transformation-based framework to support uniform testing and model checking of implicit-invocation software systems. The framework includes a new domain-specific programming language, the Implicit-Invocation Language (IIL), explicitly designed for directly expressing implicit-invocation software systems, and a set of formal rule-based source transformation tools that allow automatic generation of both executable and formal verification artifacts. We provide details of these transformation tools, evaluate the framework in practice, and discuss the benefits of formal automatic transformation in this context. Our approach is designed not only to advance the state-of-the-art in validating implicit-invocation systems, but also to further explore the use of automated source transformation as a uniform vehicle to assist in the implementation, validation and verification of programming languages and software systems in general. (c) 2006 Published by Elsevier B.V.
C1 Queens Univ, Sch Comp, Kingston, ON K7L 3N6, Canada.
C3 Queens University - Canada
RP Cordy, JR (corresponding author), Queens Univ, Sch Comp, Kingston, ON K7L 3N6, Canada.
EM zhang@namzak.com; bradbury@cs.queensu.ca; cordy@cs.queensu.ca;
   dingel@cs.queensu.ca
RI Cordy, James R/G-9736-2011; zhang, hong/CAA-1477-2022
OI Bradbury, Jeremy/0000-0002-5204-908X
CR [Anonymous], 1979, Infotech State of the Art Report, Software Testing
   [Anonymous], AGE
   BRADBURY JS, 2003, P 9 EUR SOFTW ENG C, P78
   Carzaniga A, 2001, ACM T COMPUT SYST, V19, P332, DOI 10.1145/380749.380767
   CASSIDY T, 2005, P 5 INT WORKSH LANG, P26
   Corbett J. C., 2000, Proceedings of the 2000 International Conference on Software Engineering. ICSE 2000 the New Millennium, P439, DOI 10.1109/ICSE.2000.870434
   Cordy J.R., 2004, Electron. Notes Theor. Comput. Sci, V110, P3, DOI [DOI 10.1016/J.ENTCS.2004.11.006, 10.1016/j.entcs.2004.11.006, https://doi.org/10.1016/j.entcs.2004.11.006]
   Cordy JR, 2002, INFORM SOFTWARE TECH, V44, P827, DOI 10.1016/S0950-5849(02)00104-0
   Garlan D, 2003, LECT NOTES COMPUT SC, V2648, P166
   Garlan D, 2000, TENTH INTERNATIONAL WORKSHOP ON SOFTWARE SPECIFICATION AND DESIGN, P23, DOI 10.1109/IWSSD.2000.891123
   Havelund K, 2002, LECT NOTES COMPUT SC, V2280, P342
   HOLT R, TURING PLUS REPORT
   HOLT RC, 1988, COMMUN ACM, V31, P1410, DOI 10.1145/53580.53581
   LUCKHAM DC, 1995, IEEE T SOFTWARE ENG, V21, P717, DOI 10.1109/32.464548
   McMillan K.L., GETTING STARTED SMV
   PARR TJ, 1995, SOFTWARE PRACT EXPER, V25, P789, DOI 10.1002/spe.4380250705
   PATTERSON J, 2002, TR0208 IOW STAT U
   Qadeer S., 2004, P ACM SIGPLAN C PROG, P14
   ROBBY MD, 2003, EUR SOFTW ENG C ESEC, P267
   SEGALL B, 1997, P AUUG 97
   STOLLER SD, 2002, 2 WORKSH RUNT VER RV
   SULLIVAN K, 1990, P 4 ACM SIGSOFT S SO, P22
   VANDENBRAND M, ELECT NOTES THEORETI, V44
   Visser Eelco., 2001, REWRITING TECHNIQUES, V2051, P357, DOI DOI 10.1007/3-540-45127-7_27.URL
   ZHANG H, 2004, P INT WORK DISTR EV, P110
   Zhang HY, 2005, FIFTH IEEE INTERNATIONAL WORKSHOP ON SOURCE CODE ANALYSIS AND MANIPULATION, PROCEEDINGS, P87, DOI 10.1109/SCAM.2005.15
NR 26
TC 1
Z9 1
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 15
PY 2006
VL 62
IS 3
BP 209
EP 227
DI 10.1016/j.scico.2006.04.008
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 078HA
UT WOS:000240092100002
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Dall'Osso, A
AF Dall'Osso, A
TI Computer algebra systems as mathematical optimizing compilers
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE computer algebra systems; optimizing compilers; problem-solving
   environments; scientific software development; code synthesis
ID PARTIAL-DIFFERENTIAL-EQUATIONS; CODES
AB The role of computer algebra systems (CASs) is not limited to analyzing and solving mathematical and physical problems. They have also been used as tools in the development process of computer programs, starting from the specification and ending with the coding and testing phases. In this way one can exploit their powerful mathematical capacity during the development phases and, by the other way, take advantage of the speed performance of languages such as FORTRAN or C in the implementation. Among the mathematical features of CASs there are transformations allowing one to optimize the final code instructions. In this paper we show some kind of optimizations that can be done on new or existing algorithms, by extending some techniques that compilers apply currently to optimize the machine code. The results show that the CPU time taken by the optimized code is reduced by a factor that can reach 5. The optimizations are performed with a package built on a well known CAS: Mathematica. (c) 2005 Elsevier B.V. All rights reserved.
RP Dall'Osso, A (corresponding author), 9 Ave Parthenay, F-92400 Courbevoie, France.
EM aldo.dallosso@free.fr
CR Akers RL, 1997, IEEE COMPUT SCI ENG, V4, P32, DOI 10.1109/99.615429
   Akers RL, 1998, MATH COMPUT SIMULAT, V45, P3, DOI 10.1016/S0378-4754(97)00082-7
   Baier R., 1994, PEPM '94. ACM SIGPLAN Workshop on Partial Evaluation and Semantics-Based Program Manipulation, P119
   Cats G, 1996, IEEE COMPUT SCI ENG, V3, P4, DOI 10.1109/99.556505
   Dall'Osso A, 2003, FUTURE GENER COMP SY, V19, P143, DOI 10.1016/S0167-739X(02)00126-7
   FAIGIN KA, 1994, INT J PARALLEL PROG, V22, P553, DOI 10.1007/BF02577778
   GERARD J, 2000, MUPAD TUTORIAL VERSI
   Jones ND, 1996, ACM COMPUT SURV, V28, P480, DOI 10.1145/243439.243447
   Mazúch T, 2001, J COMPUT APPL MATH, V136, P219, DOI 10.1016/S0377-0427(00)00613-0
   MUELLER F, 1992, P SIGPLAN 92 C PROGR, P322
   MUELLER F, 1995, P SIGPLAN 95 C PROGR, P56
   Press W. H., 1996, NUMERICAL RECIPES FO
   REDFERN D, 1999, MAPLE HDB MAPLE V RE
   STRASSEN V, 1969, NUMER MATH, V13, P354, DOI 10.1007/BF02165411
   van Engelen R., 2003, P 10 INT C SUP ICS 1, P86, DOI [10.1145/237578.237589, DOI 10.1145/237578.237589]
   vanEngelen R, 1997, IEEE COMPUT SCI ENG, V4, P22, DOI 10.1109/99.615428
   Wolfram S., 2003, The Mathematica Book
NR 17
TC 5
Z9 5
U1 0
U2 3
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB
PY 2006
VL 59
IS 3
BP 250
EP 273
DI 10.1016/j.scico.2005.06.003
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 000MY
UT WOS:000234467500003
DA 2024-07-18
ER

PT J
AU Cortellessa, V
   Del Gobbo, D
   Shereshevsky, M
   Desharnais, J
   Mili, A
AF Cortellessa, V
   Del Gobbo, D
   Shereshevsky, M
   Desharnais, J
   Mili, A
TI Relational characterizations of system fault tolerance
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE programming calculi; relational mathematics; system fault tolerance;
   fault; error; failure
AB Fault tolerance is the ability of a system to continue delivering its services after faults have caused errors. We have argued, in the past, that complex and/or critical systems are best validated by a wide range of methods, including proving, testing, and fault tolerance; we have also argued that in order to use these methods in concert, we need to cast them in a common framework. In this paper, we present mathematical characterizations of fault tolerance properties, using a relational calculus. (c) 2004 Elsevier B.V. All rights reserved.
C1 Univ Aquila, Dept Informat, I-67010 Coppito, Italy.
   W Virginia Univ, Lane Dept Comp Sci & Elect Engn, Morgantown, WV 26506 USA.
   Univ Laval, Dept Informat & Genie Logiciel, Ste Foy, PQ G1K 7P4, Canada.
   New Jersey Inst Technol, Coll Comp Sci, Newark, NJ 07102 USA.
C3 University of L'Aquila; West Virginia University; Laval University; New
   Jersey Institute of Technology
RP Univ Aquila, Dept Comp Sci, Via Vetoio, I-67010 Coppito, Italy.
EM cortelle@di.univaq.it; diego@csee.wvu.edu; smark@csee.wvu.edu;
   Jules.Desharnais@ift.ulaval.ca; mili@cis.njit.edu
RI Desharnais, Jules/A-4023-2008
OI mili, amira/0000-0003-3002-7303
CR [Anonymous], 1981, SCI PROGRAMMING, DOI DOI 10.1007/978-1-4612-5983-1
   [Anonymous], 1974, Mathematical Theory of Computation
   Avizienis A., 1985, IEEE T SOFTWARE ENG, V11
   BACKHOUSE R, 1990, P WORKSH CONSTR ALG
   BERGHAMMER R, 1989, INFORM PROCESS LETT, V33, P163, DOI 10.1016/0020-0190(89)90197-X
   BERGHAMMER R, 1993, P 38 BAN CTR SEM ALG, V28, P167
   BERGHAMMER R, 1986, TUM18620 U MUENCH
   Birkhoff G., 1967, LATTICE THEORY AM MA
   CORTELLESSA V, 2000, P ISACC 2000 SOFTW R
   Del Gobbo D, 2001, FIFTH IEEE INTERNATIONAL SYMPOSIUM ON REQUIREMENTS ENGINEERING, PROCEEDINGS, P236
   DELGOBBO D, 2001, VALIDATING ONLINE NE
   DESHARNAIS J, 1993, THEOR COMPUT SCI, V114, P247, DOI 10.1016/0304-3975(93)90074-4
   Dijkstra E. W., 1976, A Discipline of Pro-gramming
   FRAPPIER M, 1998, LOGIC J INT INTEREST, V6, P317
   FRAPPIER M, 1995, RELATIONAL BASIS PRO
   HOARE CAR, 1987, COMMUN ACM, V30, P672, DOI 10.1145/27651.27653
   HOARE CAR, 1986, FUNDAMENTAE INFORM 2, V51, P217
   Jipsen P, 1997, ADV COMP SCI, P1
   JONSSON B, 1982, ALGEBR UNIV, V15, P273, DOI 10.1007/BF02483728
   JOSEPH MB, 1987, 12993 RC IBM
   Laprie J.C., 1995, PREDICTABLY DEPENDAB, P1
   Mili A., 1999, 14th IEEE International Conference on Automated Software Engineering, P137, DOI 10.1109/ASE.1999.802168
   Mili Ali., 1994, Computer Program Construction
   Morgan C., 1998, Programming from Specification, VThird
   SCHMIDT G, 1993, EATCSMONOGRAPHS THEO
   SCHMIDT G, 1990, RELATIONEN GRAPHEN
NR 26
TC 0
Z9 0
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAY-JUN
PY 2005
VL 56
IS 3
BP 343
EP 361
DI 10.1016/j.scico.2004.07.003
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 929JH
UT WOS:000229341900004
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Groote, JF
   Willemse, TAC
AF Groote, JF
   Willemse, TAC
TI Model-checking processes with data
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE model checking; verification; process algebra; mu CRL; modal
   mu-calculus; boolean equation systems; infinite state systems
ID SYSTEMS
AB We propose a procedure for automatically verifying properties (expressed in an extension of the modal A-calculus) over processes with data, specified in mu CRL. We first briefly review existing work, such as the theory of mu CRL and we discuss the logic, called first order modal g-calculus in more detail. Then, we introduce the formalism of first order boolean equation systems and focus on several lemmata that are at the basis of the soundness of our decision procedure. We discuss our findings on three non-trivial applications for a prototype implementation of this procedure. The results show that our prototype can deal with quite complex and interesting properties and systems, showing the efficacy of the approach. (c) 2004 Elsevier B.V. All rights reserved.
C1 Eindhoven Univ Technol, Dept Math & Comp Sci, NL-5600 MB Eindhoven, Netherlands.
C3 Eindhoven University of Technology
RP Eindhoven Univ Technol, Dept Math & Comp Sci, POB 513, NL-5600 MB Eindhoven, Netherlands.
EM j.f.groote@tue.nl; t.a.c.willemse@tue.nl
OI Groote, Jan Friso/0000-0003-2196-6587; Willemse, Tim/0000-0003-3049-7962
CR Abdulla PA, 1998, LECT NOTES COMPUT SC, V1427, P305, DOI 10.1007/BFb0028754
   ALUR R, 1995, THEOR COMPUT SCI, V138, P3, DOI 10.1016/0304-3975(94)00202-T
   [Anonymous], LNCS, DOI [10.1007/BFb0032741, DOI 10.1007/BFB0032741]
   [Anonymous], 2001, Handbook of Process Algebra, DOI [DOI 10.1016/B978-044482830-9/50022-9, 10.1016/B978-044482830-9/50022-9]
   [Anonymous], 2002, LNCS, DOI DOI 10.1007/3-540-45657-0
   Baeten J.C.M., 1990, Cambridge Tracts in Theoretical Computer Science
   Blom S, 2001, LECT NOTES COMPUT SC, V2102, P250
   Bouajjani A, 2001, LECT NOTES COMPUT SC, V2126, P335
   BRADFIELD J, 1992, THEOR COMPUT SCI, V96, P157, DOI 10.1016/0304-3975(92)90183-G
   BRYANT RE, 1986, IEEE T COMPUT, V35, P677, DOI 10.1109/TC.1986.1676819
   Bultan T, 1997, LECT NOTES COMPUT SC, V1254, P400
   Groote J.F., 1995, ALGEBRA COMMUNICATIN, P26, DOI DOI 10.1007/978-1-4471-2120-6_2
   Groote JF, 1999, LECT NOTES COMPUT SC, V1548, P74
   Groote JF, 2000, LECT NOTES ARTIF INT, V1955, P161, DOI 10.1007/3-540-44404-1_11
   Groote JF, 2001, J LOGIC ALGEBR PROGR, V48, P39, DOI 10.1016/S1567-8326(01)00005-4
   GROOTE JF, 2004, IN PRESS P CONCUR04
   GROOTE JF, 2001, HDB PROCESS ALGEBRA, P1151
   KOZEN D, 1983, THEOR COMPUT SCI, V27, P333, DOI 10.1016/0304-3975(82)90125-6
   LASSEZ JL, 1982, INFORM PROCESS LETT, V14, P112, DOI 10.1016/0020-0190(82)90065-5
   Mateescu R, 2003, SCI COMPUT PROGRAM, V46, P255, DOI 10.1016/S0167-6423(02)00094-1
   MATEESCU R, 1998, MODEL CHECKING ABSTR
   Milner R., 1989, Communication and concurrency
   Pnueli A., 2002, Computer Aided Verification. 14th International Conference, CAV 2002. Proceedings (Lecture Notes in Computer Science Vol.2404), P107
   Raynal M., 1986, ALGORITHMS MUTUAL EX
   Strichman O., 2002, Computer Aided Verification. 14th International Conference, CAV 2002. Proceedings (Lecture Notes in Computer Science Vol.2404), P209
   Tarski A., 1955, PAC J MATH, V5, P285, DOI DOI 10.2140/PJM.1955.5.285
   Usenko Y. S., 2002, THESIS EINDHOVEN U T
   WILLEMSE T, 2003, THESIS EINDHOVEN U T
   [No title captured]
   [No title captured]
NR 30
TC 30
Z9 31
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAY-JUN
PY 2005
VL 56
IS 3
BP 251
EP 273
DI 10.1016/j.scico.2004.08.002
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 929JH
UT WOS:000229341900001
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Leino, KRM
   Millstein, T
   Saxe, JB
AF Leino, KRM
   Millstein, T
   Saxe, JB
TI Generating error traces from verification-condition counterexamples
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 1st International Symposium on Formal Methods for Components and Objects
CY NOV 05-11, 2002
CL LEIDEN, NETHERLANDS
SP Lorentz Ctr, IST Project Omega, Dutch Inst Programming Res & Algorithm, Royal Netherlands Acad Arts & Sci, Centrum Wiskunde Informat, Leiden Inst Adv Comp Sci
AB A technique for finding errors in computer programs is to translate a given program and its correctness criteria into a logical formula in mathematics and then let an automatic theorem prover check the validity of the formula. This approach gives the tool designer much flexibility in which conditions are to be checked, and the technique can reason about as many aspects of the given program as the underlying theorem prover allows. This paper describes a method for reconstructing, from the theorem prover's mathematical output, error traces that lead to the program errors that the theorem prover discovers. (C) 2004 Elsevier B.V. All rights reserved.
C1 Microsoft Res, Redmond, WA USA.
   Univ Calif Los Angeles, Dept Comp Sci, Los Angeles, CA 90024 USA.
   HP Labs, Palo Alto, CA USA.
C3 Microsoft; University of California System; University of California Los
   Angeles; Hewlett-Packard
RP Microsoft Res, Redmond, WA USA.
EM leino@microsoft.com
CR BACK RJ, 1998, SYSTEMATIC INTRO
   BALL T, 2003, REC 30 ANN ACM S PR, V38
   Burdy L, 2003, LECT NOTES COMPUT SC, V2805, P422
   Clarke. E. M., 1982, LOGICS OF PROGRAMS, P52, DOI [10 . 1007 / BFb0025774, DOI 10.1007/BFB0025774]
   COUSOT P, 1978, REC 5 ANN ACM S PR P, P84
   CRISTIAN F, 1984, IEEE T SOFTWARE ENG, V10, P163, DOI 10.1109/TSE.1984.5010218
   Detlefs D.L., 1998, 159 SRC
   Detlefs David, 2003, HPL2003148 HP LABS
   DIJKSTRA EW, 1976, DISCIPLINE PROGR
   FLANAGAN C, 2002, PLDI ACM
   FLANAGAN C, 2001, REC 28 ANN ACM S PRI, P193
   FLANAGAN C, 1996, PLDI ACM, V31
   Groce A, 2003, LECT NOTES COMPUT SC, V2648, P121
   Holzmann GJ, 1997, IEEE T SOFTWARE ENG, V23, P279, DOI 10.1109/32.588521
   Janssen W, 1999, LECT NOTES COMPUT SC, V1680, P92
   LEINO KRM, 2000, 2000002 SRC
   LEINO KRM, 2004, MSRTR200434
   LEINO KRM, 1995, CSTR9503 TECH REP
   LEINO KRM, 1999, 251 FORM TECH JAV PR
   McMillan K. L., 1993, Symbolic model checking
   MORGAN C, 1988, ACM T PROGR LANG SYS, V10, P403, DOI 10.1145/44501.44503
   MORRIS JM, 1987, SCI COMPUT PROGRAM, V9, P287, DOI 10.1016/0167-6423(87)90011-6
   NELSON G, 1989, ACM T PROGR LANG SYS, V11, P517, DOI 10.1145/69558.69559
   Queille J.-P., 1982, ser. Lecture Notes in Computer Science, P337, DOI [DOI 10.1007/3-540-11494-722, DOI 10.1007/3-540-11494-7_22, 10 . 1007 / 3 - 540 - 11494-7_22]
   Savage Stefan., 1997, SOSP 97, P27, DOI DOI 10.1145/269005.266641
NR 25
TC 25
Z9 29
U1 0
U2 1
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR
PY 2005
VL 55
IS 1-3
BP 209
EP 226
DI 10.1016/j.scico.2004.05.016
PG 18
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 899FQ
UT WOS:000227130700008
DA 2024-07-18
ER

PT J
AU Gleirscher, M
   Sachtleben, R
   Peleska, J
AF Gleirscher, Mario
   Sachtleben, Robert
   Peleska, Jan
TI Qualification of proof assistants, checkers, and generators: Where are
   we and what next?
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Deductive verification; Model checking; Certified compilers;
   Cyber-physical systems; Control software engineering
ID MODEL CHECKING
AB Cyber-physical systems, such as learning robots and other autonomous systems, employ high-integrity software in their safety-critical control. This software is developed using a range of tools, some of which need to be qualified for this purpose according to international standards. In this article, we first evaluate the state of the art of tool qualification for proof assistants, checkers (e.g., model checkers), and generators (e.g., code generators, compilers) by means of a SWOT (Strengths, Weaknesses, Opportunities, Threats) analysis. Our focus is on the qualification of tools in the three mentioned categories. Our objective is to assess under which conditions these tools are already fit or could be made fit for use in the practical engineering and assurance of high-integrity control software. In a second step, we derive a viewpoint and a corresponding range of suggestions for improved tool qualification from the results of our SWOT analysis.2023 Published by Elsevier B.V.
C1 [Gleirscher, Mario; Sachtleben, Robert; Peleska, Jan] Univ Bremen, Bibliothekstr 5, D-28359 Bremen, Germany.
   [Peleska, Jan] Verified Syst Int, Fallturm 1, D-28359 Bremen, Germany.
C3 University of Bremen
RP Gleirscher, M (corresponding author), Univ Bremen, Bibliothekstr 5, D-28359 Bremen, Germany.
EM mario.gleirscher@uni-bremen.de; rob_sac@uni-bremen.de;
   peleska@uni-bremen.de
OI Gleirscher, Mario/0000-0002-9445-6863
FU German Ministry of Economics [20X1908E]
FX Acknowledgements Jan Peleska has been partially funded by the German
   Ministry of Economics, Grant Agreement 20X1908E. We would like to thank
   J?rg Brauer for helpful feedback and highlighting the issue of tool
   suitability as well as Michael Leuschel for his kind suggestions
   concerning EN 50128 -based tool qualification.
CR Abrahamsson O., 2022, LIPICS, V237
   Abrahamsson O, 2020, J LOG ALGEBR METHODS, V112, DOI 10.1016/j.jlamp.2020.100530
   Adams M, 2016, LECT NOTES COMPUT SC, V9807, P20, DOI 10.1007/978-3-319-43144-4_2
   Adams M, 2016, J FORMALIZ REASON, V9, P3
   [Anonymous], 2009, 262628 ISODIS
   [Anonymous], 2006, 61508 IEC 1
   [Anonymous], 1996, Prolog-the Standard: Reference Manual
   [Anonymous], 2003, High Integrity Software: The SPARK Approach to Safety and Security
   [Anonymous], 1996, SAEARP4754
   ANSSI-INRIA, 2021, J LOG ALGEBRAIC METH
   ANSYS Esterel Technologies, 2013, SCADE SUIT KCG 6 4 D
   Atelier B, 2009, USER REFERENCE MANUA
   Barendregt H, 2005, PHILOS T R SOC A, V363, P2351, DOI 10.1098/rsta.2005.1650
   Barrett Clark, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P171, DOI 10.1007/978-3-642-22110-1_14
   Behrmann G, 2004, LECT NOTES COMPUT SC, V3185, P200
   Belanger O.S., 2019, PROC ACM
   Bendisposto J., 2014, F IDE, V149, P16
   Berghofer S, 2000, LECT NOTES COMPUT SC, V1869, P38
   Bertot Y., 2004, INTERACTIVE THEOREM
   Bertot Y., 2020, COQPL 2020 6 INT WOR, P1
   Beyer D, 2016, FSE'16: PROCEEDINGS OF THE 2016 24TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON FOUNDATIONS OF SOFTWARE ENGINEERING, P326, DOI 10.1145/2950290.2950351
   Blanchette JC, 2018, J AUTOM REASONING, V61, P333, DOI 10.1007/s10817-018-9455-7
   Brahmi A., 2018, 9 EUROPEAN C EMBEDDE
   Brauer Jorg, 2012, Testing Software and Systems. 24th IFIP WG 6.1 International Conference (ICTSS 2012). Proceedings, P8, DOI 10.1007/978-3-642-34691-0_3
   Brucker AD, 2019, LECT NOTES COMPUT SC, V11724, P275, DOI 10.1007/978-3-030-30446-1_15
   Cavada R, 2014, LECT NOTES COMPUT SC, V8559, P334, DOI 10.1007/978-3-319-08867-9_22
   CENELEC, 2011, 50128 2011 RAILWAY A
   CENELEC, 2018, EN 50126 1 2018 RAIL
   Champion A, 2016, LECT NOTES COMPUT SC, V9780, P510, DOI 10.1007/978-3-319-41540-6_29
   Chihani Zakaria, 2013, Automated Deduction - CADE-24. 24th International Conference on Automated Deduction. Proceedings: LNCS 7898, P162, DOI 10.1007/978-3-642-38574-2_11
   Chockler H., 2006, International Journal on Software Tools for Technology Transfer, V8, P373, DOI 10.1007/s10009-004-0175-4
   Cofer D, 2015, ACM SIGLOG NEWS, V2
   Cofer D.D., 2015, DAGSTUHL REP, V5, P142
   Colaco J., 2020, 2020 INT C ELECT COM, P1, DOI DOI 10.1109/ICECCE49384.2020.9179263
   de Moura L, 2015, LECT NOTES ARTIF INT, V9195, P378, DOI 10.1007/978-3-319-21401-6_26
   Esparza Javier, 2013, Computer Aided Verification. 25th International Conference, CAV 2013. Proceedings. LNCS 8044, P463, DOI 10.1007/978-3-642-39799-8_31
   Fantechi Alessandro, 2011, Computer Safety, Reliability, and Security. Proceedings 30th International Conference, SAFECOMP 2011, P383, DOI 10.1007/978-3-642-24270-0_28
   Farrell M, 2022, LECT NOTES COMPUT SC, V13216, P96, DOI 10.1007/978-3-030-98464-9_9
   Foster S, 2021, FORM ASP COMPUT, V33, P855, DOI 10.1007/s00165-021-00537-4
   Franca RicardoBedin., 2011, Bringing Theory to Practice: Predictability and Performance in Embedded Systems, volume 18 of OpenAccess Series in Informatics (OASIcs), P59, DOI DOI 10.4230/OASICS.PPES.2011.59
   Garavel H, 2020, LECT NOTES COMPUT SC, V12327, P3, DOI 10.1007/978-3-030-58298-2_1
   Gauthier T, 2019, J SYMB COMPUT, V90, P89, DOI 10.1016/j.jsc.2018.04.005
   Gibson-Robinson T, 2016, INT J SOFTW TOOLS TE, V18, P149, DOI 10.1007/s10009-015-0377-y
   Gleirscher M, 2023, Arxiv, DOI arXiv:2112.12758
   Gleirscher M, 2020, EMPIR SOFTW ENG, V25, P4473, DOI 10.1007/s10664-020-09836-5
   Gleirscher Mario, 2022, arXiv, DOI [10.48550/arXiv.2203.08917, DOI 10.48550/ARXIV.2203.08917]
   Griggio A, 2021, FORM METHOD SYST DES, V57, P178, DOI 10.1007/s10703-021-00369-1
   Harrison J, 2006, LECT NOTES ARTIF INT, V4130, P177
   Hölzl J, 2012, LECT NOTES COMPUT SC, V7214, P347, DOI 10.1007/978-3-642-28756-5_24
   Holzmann GJ, 1997, IEEE T SOFTWARE ENG, V23, P279, DOI 10.1109/32.588521
   Hupel Lars, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P999, DOI 10.1007/978-3-319-89884-1_35
   Hurd J, 2011, LECT NOTES COMPUT SC, V6617, P177, DOI 10.1007/978-3-642-20398-5_14
   Ibrahim M., 2021, SOFTWARE ENG SE SATE, V2814, P1
   KASTNER D, 2018, ERTS2 2018 9 EUR C E, P1
   Kastner Daniel, 2017, SSS 17 SAFETY CRITIC, P163
   Keller C, 2010, LECT NOTES COMPUT SC, V6172, P307, DOI 10.1007/978-3-642-14052-5_22
   Klein G, 2018, COMMUN ACM, V61, P68, DOI 10.1145/3230627
   Klein G, 2009, SOSP'09: PROCEEDINGS OF THE TWENTY-SECOND ACM SIGOPS SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P207
   Kumar R, 2016, J AUTOM REASONING, V56, P221, DOI 10.1007/s10817-015-9357-x
   Kwiatkowska Marta, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P585, DOI 10.1007/978-3-642-22110-1_47
   Lawford M, 2016, LECT NOTES COMPUT SC, V9971, P1, DOI 10.1007/978-3-319-48869-1_1
   Leuschel M, 2003, LECT NOTES COMPUT SC, V2805, P855
   Leuschel M., 2022, COMMUNICATION
   Mebsout A, 2016, PROCEEDINGS OF THE 2016 16TH CONFERENCE ON FORMAL METHODS IN COMPUTER-AIDED DESIGN (FMCAD 2016), P117, DOI 10.1109/FMCAD.2016.7886669
   Monniaux D, 2022, LECT NOTES COMPUT SC, V13240, P204, DOI 10.1007/978-3-030-99336-8_8
   Myreen M.O., 2021, INTERACTIVE THEOREM, V193
   Necula GC, 1998, ACM SIGPLAN NOTICES, V33, P333, DOI 10.1145/277652.277752
   Nipkow T., 2002, ISABELLE HOL PROOF A, DOI DOI 10.1007/3-540-45949-9
   Nipkow T, 2021, LECT NOTES ARTIF INT, V12699, P93, DOI 10.1007/978-3-030-79876-5_6
   OWRE S, 1992, LECT NOTES ARTIF INT, V607, P748
   Parillaud C, 2019, LECT NOTES COMPUT SC, V11495, P215, DOI 10.1007/978-3-030-18744-6_14
   Piercy N., 1989, Mark. Intell. Plan., V7, P5, DOI DOI 10.1108/EUM0000000001042
   Platzer A., 2022, TUTORIAL
   Pnueli A., 1998, International Journal on Software Tools for Technology Transfer, V2, P192, DOI 10.1007/s100090050027
   Pnueli A, 1999, LECT NOTES COMPUT SC, V1710, P231
   R. S.-E. WG-71, 2003, RSEWG71
   Ringer T, 2020, Arxiv, DOI arXiv:2003.06458
   Schimpf A, 2009, LECT NOTES COMPUT SC, V5674, P424, DOI 10.1007/978-3-642-03359-9_29
   Sozeau M, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371076
   Stump A, 2013, FORM METHOD SYST DES, V42, P91, DOI 10.1007/s10703-012-0163-3
   Sutcliffe G, 2017, J AUTOM REASONING, V59, P483, DOI 10.1007/s10817-017-9407-7
   Taft S. Tucker, 2016, ACM SIGAda Ada Letters, V36, P54, DOI 10.1145/3092893.3092903
   VanderLeest SH, 2018, IEEE AERO EL SYS MAG, V33, P16, DOI 10.1109/MAES.2018.160217
   Wagner Lucas, 2017, NASA Formal Methods. 9th International Symposium, NFM 2017. Proceedings: LNCS 10227, P404, DOI 10.1007/978-3-319-57288-8_29
   Wagner L. G., 2017, NASACR2017219371
   Webster M, 2014, J AEROSP INFORM SYST, V11, P258, DOI 10.2514/1.I010096
   Wenzel M., 2021, ISABELLEISAR REFEREN
   Wiedijk F, 2012, ELECTRON NOTES THEOR, V285, P85, DOI 10.1016/j.entcs.2012.06.008
   Wimmer Simon, 2020, Tools and Algorithms for the Construction and Analysis of Systems. 26th International Conference, TACAS 2020. Held as Part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2020. Proceedings. Lecture Notes in Computer Science (LNCS 12078), P425, DOI 10.1007/978-3-030-45190-5_24
   Wimmer S, 2020, LECT NOTES COMPUT SC, V12288, P58, DOI 10.1007/978-3-030-57628-8_4
   Wimmer S, 2019, LECT NOTES COMPUT SC, V11750, P236, DOI 10.1007/978-3-030-29662-9_14
   Wimmer S, 2018, LECT NOTES COMPUT SC, V10805, P61, DOI 10.1007/978-3-319-89960-2_4
   Wong W, 1999, FORM METHOD SYST DES, V14, P193, DOI 10.1023/A:1008643803725
   Yang XJ, 2011, ACM SIGPLAN NOTICES, V46, P283, DOI 10.1145/1993316.1993532
   Yuan SH, 2022, LECT NOTES COMPUT SC, V13372, P293, DOI 10.1007/978-3-031-13188-2_15
NR 95
TC 2
Z9 2
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR
PY 2023
VL 226
AR 102930
DI 10.1016/j.scico.2023.102930
EA FEB 2023
PG 11
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 9L8MY
UT WOS:000941799800001
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Gu, R
   Jensen, PG
   Seceleanu, C
   Enoiu, E
   Lundqvist, K
AF Gu, Rong
   Jensen, Peter G.
   Seceleanu, Cristina
   Enoiu, Eduard
   Lundqvist, Kristina
TI Correctness-guaranteed strategy synthesis and compression for
   multi-agent autonomous systems
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Planning; Multi-agent autonomous systems; Timed games; Reinforcement
   learning; Strategy compression
ID ALGORITHMS; TIME
AB Planning is a critical function of multi-agent autonomous systems, which includes path finding and task scheduling. Exhaustive search-based methods such as model checking and algorithmic game theory can solve simple instances of multi-agent planning. However, these methods suffer from state-space explosion when the number of agents is large. Learning-based methods can alleviate this problem, but lack a guarantee of correctness of the results. In this paper, we introduce MoCReL, a new version of our previously proposed method that combines model checking with reinforcement learning in solving the planning problem. The approach takes advantage of reinforcement learning to synthesize path plans and task schedules for large numbers of autonomous agents, and of model checking to verify the correctness of the synthesized strategies. Further, MoCReL can compress large strategies into smaller ones that have down to 0.05% of the original sizes, while preserving their correctness, which we show in this paper. MoCReL is integrated into a new version of UPPAAL STRATEGO that supports calling external libraries when running learning and verification of timed games models.(c) 2022 The Author(s). Published by Elsevier B.V. This is an open access article under the CC BY license (http://creativecommons.org/licenses/by/4.0/).
C1 [Gu, Rong; Seceleanu, Cristina; Enoiu, Eduard; Lundqvist, Kristina] Malardalen Univ, Vasteras, Sweden.
   [Jensen, Peter G.] Aalborg Univ, Aalborg, Denmark.
C3 Malardalen University; Aalborg University
RP Gu, R (corresponding author), Malardalen Univ, Vasteras, Sweden.
EM rong.gu@mdu.se; pgj@cs.aau.dk; cristina.seceleanu@mdu.se;
   eduard.paul.enoiu@mdu.se; kristina.lundqvist@mdu.se
RI ; Enoiu, Eduard/N-6496-2015
OI Seceleanu, Cristina/0000-0003-2870-2680; Gu, Rong/0000-0003-0570-6005;
   Jensen, Peter Gjol/0000-0002-9320-9991; Enoiu,
   Eduard/0000-0003-2416-4205
FU Swedish Knowledge Foundation via the profile DPAC-Dependable Platform
   for Autonomous Systems and Control;  [20150022];  [20190038]
FX We acknowledge the support of the Swedish Knowledge Foundation via the
   profile DPAC-Dependable Platform for Autonomous Systems and Control,
   grant nr: 20150022, and via the synergy ACICS - Assured Cloud Platforms
   for Industrial Cyber-Physical Systems, grant nr. 20190038.
CR Abdeddaïm Y, 2006, THEOR COMPUT SCI, V354, P272, DOI 10.1016/j.tcs.2005.11.018
   ALUR R, 1994, THEOR COMPUT SCI, V126, P183, DOI 10.1016/0304-3975(94)90010-8
   Alur R, 2016, LECT NOTES COMPUT SC, V9780, P251, DOI 10.1007/978-3-319-41540-6_14
   Andersen M.S., 2004, IFAC Proceedings Volumes, V37, P597
   Ashok Pranav, 2021, Tools and Algorithms for the Construction and Analysis of Systems. 27th International Conference, TACAS 2021. Held as Part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2021. Proceedings. Lecture Notes in Computer Science (LNCS 12652), P326, DOI 10.1007/978-3-030-72013-1_17
   Ashok P., 2020, P 23 INT C HYBR SYST, P1
   Atyabi A, 2018, ANNU REV CONTROL, V46, P196, DOI 10.1016/j.arcontrol.2018.07.002
   Baier C, 2008, PRINCIPLES OF MODEL CHECKING, P1
   Basile D., 2020, INT C FORM TECHN DIS
   Behjati R, 2010, LECT NOTES COMPUT SC, V5961, P292
   Behrmann G, 2005, LECT NOTES COMPUT SC, V3829, P81
   Behrmann G, 2007, LECT NOTES COMPUT SC, V4590, P121
   Bengtsson J, 2004, LECT NOTES COMPUT SC, V3098, P87, DOI 10.1007/978-3-540-27755-2_3
   Bersani M.M., 2020, FORM ASP COMPUT
   Bouton M., 2019, arXiv
   Bouton M, 2017, IEEE INT VEH SYM, P825, DOI 10.1109/IVS.2017.7995818
   Cassez F, 2005, LECT NOTES COMPUT SC, V3653, P66, DOI 10.1007/11539452_9
   Chandler PR, 1998, P AMER CONTR CONF, P394, DOI 10.1109/ACC.1998.694698
   Cormen T.H., 2009, INTRO ALGORITHMS
   David A., 2015, TACAS 2015
   David A, 2012, Arxiv, DOI arXiv:1208.3856
   David A, 2014, LECT NOTES COMPUT SC, V8837, P129, DOI 10.1007/978-3-319-11936-6_10
   Frank J., 2008, INT C MACHINE LEARNI, P336
   Gleirscher M, 2022, SCI COMPUT PROGRAM, V218, DOI 10.1016/j.scico.2022.102809
   GLYNN PW, 1989, MANAGE SCI, V35, P1367, DOI 10.1287/mnsc.35.11.1367
   Gu R., 2019, 35 ACMSIGAPP S APPL
   Gu R., 2020, 25 INT C FORM METH I, P73
   Gu R, 2022, INT J SOFTW TOOLS TE, V24, P395, DOI 10.1007/s10009-022-00657-z
   Hanna JP, 2021, MACH LEARN, V110, P1267, DOI 10.1007/s10994-020-05938-9
   Jaeger M, 2019, LECT NOTES COMPUT SC, V11781, P81, DOI 10.1007/978-3-030-31784-3_5
   Jegourel C, 2016, LECT NOTES COMPUT SC, V9984, P163, DOI 10.1007/978-3-319-47677-3_11
   Jothimurugan K., 2021, ADV NEURAL INF PROCE, V34
   Julian K.D., 2019, 2019 IEEE/AIAA 38th Digital Avionics Systems Conference (DASC), P1
   Julian KD, 2016, IEEEAAIA DIGIT AVION
   Julian KD, 2019, J GUID CONTROL DYNAM, V42, P598, DOI 10.2514/1.G003724
   Kempf JF, 2013, LECT NOTES COMPUT SC, V7795, P385, DOI 10.1007/978-3-642-36742-7_27
   Kretinsky J, 2021, Arxiv, DOI arXiv:2105.14894
   Larsen K. G., 1997, International Journal on Software Tools for Technology Transfer, V1, P134, DOI 10.1007/s100090050010
   Larsen K.G., 2018, LNCS, P113, DOI DOI 10.1007/978-3-030-23703-56
   LaValle SM, 2001, ALGORITHMIC AND COMPUTATIONAL ROBOTICS: NEW DIRECTIONS, P293
   Morio J, 2014, SIMUL MODEL PRACT TH, V49, P287, DOI 10.1016/j.simpat.2014.10.007
   Oliveira E, 1999, ROBOT AUTON SYST, V27, P91, DOI 10.1016/S0921-8890(98)00085-2
   Piterman N, 2006, LECT NOTES COMPUT SC, V3855, P364
   Rabin S., 2000, Game programming gems, chapter a* aesthetic optimizations
   Shyalika C., 2020, SN Computer Science, V1, P306, DOI DOI 10.1007/S42979-020-00326-5
   Sutton RS, 2018, ADAPT COMPUT MACH LE, P1
   Tomita T, 2017, ACTA INFORM, V54, P655, DOI 10.1007/s00236-016-0280-3
   Watkins C. J. C. H., 1989, Learning from Delayed Rewards
   Zhang W, 1996, ADV NEUR IN, V8, P1024
NR 49
TC 1
Z9 1
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 1
PY 2022
VL 224
AR 102894
DI 10.1016/j.scico.2022.102894
EA OCT 2022
PG 25
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 5X7HQ
UT WOS:000878770800001
OA Green Published, hybrid
DA 2024-07-18
ER

PT J
AU Chondamrongkul, N
   Sun, J
   Warren, I
AF Chondamrongkul, Nacha
   Sun, Jing
   Warren, Ian
TI Formal security analysis for software architecture design: An expressive
   framework to emerging architectural styles
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Software architecture; Security analysis; Ontology Web language; Model
   checking; Security Scenarios
AB Analysing security in the architecture design of modern software systems is a challenging task. Emerging technologies utilised in building software systems may pose security threats, so software engineers need to consider both the structure and behaviour of architectural styles that employ these supporting technologies. This paper presents an automated approach to security analysis that helps to identify security characteristics at the architectural level. Key techniques used by our approach include the use of metrics, vulnerability identification and attack scenarios. Our modelling is expressive in defining architectural styles and security characteristics. Our analysis approach gives insightful results that allow software engineers to trace through the design to find parts of the system that may be impacted by attacks. We have developed an analysis tool that allows user to seamlessly model the software architecture design and analyse security. The evaluation has been conducted to assess the accuracy and performance of our approach. The results show that our analysis approach performs reasonably well to analyse the security in the architectural design. (C) 2021 Elsevier B.V. All rights reserved.
C1 [Chondamrongkul, Nacha] Mae Fah Luang Univ, Sch Informat Technol, Chiang Rai, Thailand.
   [Sun, Jing; Warren, Ian] Univ Auckland, Sch Comp Sci, Auckland, New Zealand.
C3 Mae Fah Luang University; University of Auckland
RP Chondamrongkul, N (corresponding author), Mae Fah Luang Univ, Sch Informat Technol, Chiang Rai, Thailand.
EM nacha.cho@mfu.ac.th; jing.sun@auckland.ac.nz; i.warren@auckland.ac.nz
RI Chondamrongkul, Nacha/AAV-6954-2021
CR Almorsy M, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P662, DOI 10.1109/ICSE.2013.6606612
   [Anonymous], 2017, SOCK SHOP
   [Anonymous], 2003, Eclipse Modeling Framework
   Antoniou G, 2003, IN HAND I S, P67
   Asik T, 2017, 2017 IEEE/ACIS 15TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING RESEARCH, MANAGEMENT AND APPLICATIONS (SERA), P283, DOI 10.1109/SERA.2017.7965739
   Baier C, 2008, PRINCIPLES OF MODEL CHECKING, P1
   Berger Bernhard J., 2016, Engineering Secure Software and Systems. 8th International Symposium, ESSoS 2016. Proceedings: LNCS 9639, P56, DOI 10.1007/978-3-319-30806-7_4
   Bragagnolo S, 2018, 2018 IEEE 1ST INTERNATIONAL WORKSHOP ON BLOCKCHAIN ORIENTED SOFTWARE ENGINEERING (IWBOSE), P9, DOI 10.1109/IWBOSE.2018.8327566
   Bunke M, 2011, LECT NOTES COMPUT SC, V6542, P156, DOI 10.1007/978-3-642-19125-1_12
   Chaieb Marwa, 2019, Information Systems. 15th European, Mediterranean, and Middle Eastern Conference (EMCIS 2018). Proceedings. Lecture Notes in Business Information Processing (LNBIP 341), P16, DOI 10.1007/978-3-030-11395-7_2
   Chondamrongkul N, 2020, 32 INT C SOFTW ENG K, P532
   Chondamrongkul N., 2019, 31TH INT C SEKE, P187
   Chondamrongkul N., 2018, 30 INT C SEKE, P25
   Chondamrongkul N, 2020, 2020 IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ARCHITECTURE COMPANION (ICSA-C 2020), P79, DOI 10.1109/ICSA-C50368.2020.00024
   Christudas B, 2019, AXON CQRS ARCHITECTU, P337
   Di Francesco P, 2019, J SYST SOFTWARE, V150, P77, DOI 10.1016/j.jss.2019.01.001
   Dragoni N., 2017, PRESENT ULTERIOR SOF, P195, DOI DOI 10.1007/978-3-319-67425-4_12
   Gennari J., 2012, Measuring Attack Surface in Software Architecture
   Gerking C, 2019, 2019 IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ARCHITECTURE (ICSA), P61, DOI 10.1109/ICSA.2019.00015
   Glimm B, 2014, J AUTOM REASONING, V53, P245, DOI 10.1007/s10817-014-9305-1
   Granchelli G, 2017, 2017 IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ARCHITECTURE WORKSHOPS (ICSAW), P46, DOI 10.1109/ICSAW.2017.48
   Grunske L, 2008, J SYST SOFTWARE, V81, P1327, DOI 10.1016/j.jss.2007.11.716
   Heinrich R, 2017, ICPE'17: COMPANION OF THE 2017 ACM/SPEC INTERNATIONAL CONFERENCE ON PERFORMANCE ENGINEERING, P223, DOI 10.1145/3053600.3053653
   HOARE CAR, 1978, COMMUN ACM, V21, P666, DOI 10.1145/359576.359585
   Jovanovic D, SOLC VERIFY MODULAR
   Kang H, 2016, INT CONF CLOUD ENG, P202, DOI 10.1109/IC2E.2016.26
   KRUCHTEN PB, 1995, IEEE SOFTWARE, V12, P42, DOI 10.1109/52.469759
   Lloyd W, 2018, INT CONF CLOUD ENG, P159, DOI 10.1109/IC2E.2018.00039
   Luu L, 2016, CCS'16: PROCEEDINGS OF THE 2016 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P254, DOI 10.1145/2976749.2978309
   McGraw G., 2006, Software security: building security in
   Millett S., 2015, Patterns, Principles, and Practices of DomainDriven Design
   Nadareishvili I., 2016, Microservice Architecture: Aligning Principles, Practices, and Culture
   Nehme A, 2019, IT PROF, V21, P42, DOI 10.1109/MITP.2018.2876987
   Nkomo P, 2019, LECT NOTES COMPUT SC, V11623, P573, DOI 10.1007/978-3-030-24308-1_46
   O'Connor M, 2007, LECT NOTES COMPUT SC, V4824, P155
   Richards M, 2015, Software Architecture Patterns
   Saad M., Exploring the Attack Surface of Blockchain: A Systematic Overview
   Sakimura N., Openid connect core 1.0 incorporating errata set 1
   Savchenko DI, 2015, 2015 8TH INTERNATIONAL CONVENTION ON INFORMATION AND COMMUNICATION TECHNOLOGY, ELECTRONICS AND MICROELECTRONICS (MIPRO), P235, DOI 10.1109/MIPRO.2015.7160271
   Seifert D, 2016, COMPUTERS, V5, DOI 10.3390/computers5040027
   Sun J, 2009, THIRD INTERNATIONAL SYMPOSIUM ON THEORETICAL ASPECTS OF SOFTWARE ENGINEERING, PROCEEDINGS, P127, DOI 10.1109/TASE.2009.32
   Sun YQ, 2015, INT CONF CLOUD COMP, P50, DOI 10.1109/CloudCom.2015.93
   Taibi D, 2018, CLOSER: PROCEEDINGS OF THE 8TH INTERNATIONAL CONFERENCE ON CLOUD COMPUTING AND SERVICES SCIENCE, P221, DOI 10.5220/0006798302210232
   Taspolatoglu E, 2016, 2016 13TH WORKING IEEE/IFIP CONFERENCE ON SOFTWARE ARCHITECTURE (WICSA), P281, DOI 10.1109/WICSA.2016.55
   Torkura KA, 2017, PROCEEDINGS OF THE 10TH INTERNATIONAL CONFERENCE ON UTILITY AND CLOUD COMPUTING (UCC' 17), P171, DOI 10.1145/3147213.3147229
   Vanciu R, 2013, IEEE INT CONF AUTOM, P334, DOI 10.1109/ASE.2013.6693092
   Xu X., 2019, BLOCKCHAIN SOFTWARE, P83
   Xu X., 2019, CASE STUDY SECUREVOT, P257, DOI [10.1007/978-3-030-03035-313, DOI 10.1007/978-3-030-03035-313]
   Xu XW, 2018, EUROPLOP 2018: PROCEEDINGS OF THE 23RD EUROPEAN CONFERENCE ON PATTERN LANGUAGES OF PROGRAMS, DOI [10.3897/phytokeys.96.23142, 10.1145/3282308.3282312]
   Xu XW, 2016, 2016 13TH WORKING IEEE/IFIP CONFERENCE ON SOFTWARE ARCHITECTURE (WICSA), P182, DOI 10.1109/WICSA.2016.21
   Xu Xiwei, 2019, EXAMPLE USE CASES, P61
   Xu XL, 2019, CILVR SER LAT VAR, P239
   Yarygina T., 2018, 2018 IEEE S SERV OR
   Yu DJ, 2019, CONCURR COMP-PRACT E, V31, DOI 10.1002/cpe.4436
   Yu W. D., 2012, Proceedings of the 2012 IEEE 36th IEEE Annual Computer Software and Applications Conference Workshops (COMPSACW), P565, DOI 10.1109/COMPSACW.2012.104
   Zhou E, 2018, INT CONF NEW TECHNOL
NR 56
TC 4
Z9 4
U1 0
U2 22
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 1
PY 2021
VL 206
AR 102631
DI 10.1016/j.scico.2021.102631
EA MAR 2021
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA RI2XD
UT WOS:000636771400005
DA 2024-07-18
ER

PT J
AU Azzeh, M
   Nassif, AB
   Attili, IB
AF Azzeh, Mohammad
   Nassif, Ali Bou
   Attili, Imtinan Basem
TI Predicting software effort from use case points: A systematic review
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Review
DE Systematic literature review; Use case points; Effort estimation
AB Context: Predicting software project effort from Use Case Points (UCP) method is increasingly used among researchers and practitioners. However, unlike other effort estimation domains, this area of interest has not been systematically reviewed.
   Aims: There is a need for a systemic literature review to provide directions and supports for this research area of effort estimation. Specifically, the objective of this study is twofold: 1) to classify UCP effort estimation papers based on four criteria: contribution type, research approach, dataset type and techniques used with UCP; and 2) to analyze these paper from different views: estimation accuracy, favorable estimation context and impact of combined techniques on the accuracy of UCP.
   Method: We used the systematic literature review methodology proposed by Kitchenham and Charters. This includes searching for the most relevant papers, selecting quality papers, extracting data and drawing results.
   Result: The authors of UCP research paper, are generally not aware of previous published results and conclusions in the field of UCP effort estimation. There is a lack of UCP related publications in the top software engineering journals. This makes a conclusion that such papers are not useful for the community. Furthermore, most articles used small numbers of projects which cannot support generalizing the conclusion in most cases.
   Conclusions: There are multiple research directions for UCP method that have not been examined so far such as validating the algebraic construction of UCP based on industrial data. Also, there is a need for standard automated tools that govern the process of translating use case diagram into its corresponding UCP metrics. Although there is an increase interest among researchers to collect industrial data and build effort prediction models based on machine learning methods, the quality of data is still subject to debate. (C) 2020 Elsevier B.V. All rights reserved.
C1 [Azzeh, Mohammad] Appl Sci Private Univ, Dept Software Engn, POB 166, Amman, Jordan.
   [Nassif, Ali Bou] Univ Sharjah, Dept Comp Engn, Sharjah, U Arab Emirates.
   [Attili, Imtinan Basem] Univ Sharjah, Dept Elect Engn, Sharjah, U Arab Emirates.
C3 University of Sharjah; University of Sharjah
RP Azzeh, M (corresponding author), Appl Sci Private Univ, Dept Software Engn, POB 166, Amman, Jordan.
EM m.y.azzeh@asu.edu.jo; anassif@sharjah.ac.ae; iattili@sharjah.ac.ae
RI Azzeh, Mohammad/G-5472-2017
OI Azzeh, Mohammad/0000-0002-0323-6452
FU Applied Science Private University, Amman, Jordan; University of Sharjah
FX Mohammad Azzeh is grateful to the Applied Science Private University,
   Amman, Jordan, for the financial support granted to cover the
   publication fee of this research article.; Ali Bou Nassif and Imtinan
   Attili would like to thank the University of Sharjah for supporting this
   research.
CR Abdurachman Edi, 2017, 2017 IEEE INT C CYB
   Acharya A.A., 2011, COST ESTIMATION DIST, DOI DOI 10.1007/978-3-642-18440-6_20
   Ahmed A.H, 2013, P 2013 INT C COMP EL
   Ajitha S., 2010, 2010 5th International Conference on Industrial and Information Systems (ICIIS 2010), P372, DOI 10.1109/ICIINFS.2010.5578675
   Alves L.M, 2013, PROC FRONT EDUC CONF, DOI 10.1109/FIE.2013.6684796
   Alves R., 2013, P 5 ACM SIGCHI S ENG, P287, DOI [10.1145/2494603.2480300, DOI 10.1145/2494603.2480300]
   Anda B, 2002, LECT NOTES COMPUT SC, V2559, P383
   Anda B., 2002, EMPIRICAL ASSESSMENT, P8
   Ani Z.C, 2013, MALAYS SCI INT LAHOR, V25, P1111
   [Anonymous], 2005, COMP 20 ANN ACM SIGP
   Arumugam C, 2013, INT J SOFTW ENG KNOW, V23, P289, DOI 10.1142/S0218194013500083
   Ayyildiz T.E, 2013, AWER P INF TECHNOL C, V04, P257
   Azzeh M., 2019, P 17 IEEE INT C MACH
   Azzeh M, 2018, J SOFTW-EVOL PROC, V30, DOI 10.1002/smr.2110
   Azzeh M, 2018, IET SOFTW, V12, P19, DOI 10.1049/iet-sen.2016.0322
   Azzeh M, 2017, J SOFTW-EVOL PROC, V29, DOI 10.1002/smr.1882
   Azzeh M, 2016, APPL SOFT COMPUT, V49, P981, DOI 10.1016/j.asoc.2016.05.008
   Azzeh M, 2015, 2015 IEEE 14TH INTERNATIONAL CONFERENCE ON MACHINE LEARNING AND APPLICATIONS (ICMLA), P1268, DOI 10.1109/ICMLA.2015.105
   Azzeh M, 2013, INT CONF COMP SCI, P214, DOI 10.1109/CSIT.2013.6588782
   Badri M, 2017, INNOV SYST SOFTW ENG, V13, P143, DOI 10.1007/s11334-016-0285-7
   Boehm B., 2018, 2018 IEEE ACM 10 INT
   Braz M.R., 2004, P INT C TOOLS ART IN
   Braz MR, 2006, P INT COMP SOFTW APP, P221
   Britto R, 2014, ACM INT C P SERIES
   Clemmons R.K., 2006, J DEF SOFTW ENG, V19
   Diev S., 2006, Software Engineering Notes, ACM, V31, P1
   Dragan B., 2015, 23 TEL FOR TELF TELF
   Effendi A, 2019, PROCEDIA COMPUT SCI, V157, P691, DOI 10.1016/j.procs.2019.08.215
   Engels G., 2008, REVISED USE CASE POI
   Gaol F.L., 2018, 2017 IEEE INT C CYB
   Gencel C., 2006, SOFTWARE MEASUREMENT, P121
   Hadi W., 2012, 2012 INT C TECHN E S
   Ho D., 2011, 3 INT C INT COMP INT
   Nhung HLTK, 2019, ADV INTELL SYST COMP, V1046, P484, DOI 10.1007/978-3-030-30329-7_44
   Hove S.E., 2005, 2005 INT S EMP SOFT
   Idri A, 2015, INFORM SOFTWARE TECH, V58, P206, DOI 10.1016/j.infsof.2014.07.013
   Iraji M.S., 2012, INT J INTELLIGENT SY, V4, P14, DOI [DOI 10.5815/IJISA.2012.06.02, 10.5815/ijisa.2012.06.02]
   Ji N., 2011, 7 INT C WIR COMM NET
   Jorgensen M, 2007, IEEE T SOFTWARE ENG, V33, P33, DOI 10.1109/TSE.2007.256943
   Karami M., 2011, 2011 5 MAL C SOFTW E
   Karner G., 1993, Resource Estimation for Objectory Projects
   Khatri SK, 2016, INT CONF RELI INFO, P123, DOI 10.1109/ICRITO.2016.7784938
   Kim R.Y.C., 2016, 2016 INT C PLATF TEC
   Kitchenham B., 2007, 23 EBSE, DOI DOI 10.1145/1134285.1134500
   Kitchenham B, 2009, INFORM SOFTWARE TECH, V51, P7, DOI 10.1016/j.infsof.2008.09.009
   Kosala R., P 2016 INT C COMP CO
   Kusumoto S, 2004, 10TH INTERNATIONAL SYMPOSIUM ON SOFTWARE METRICS, PROCEEDINGS, P292, DOI 10.1109/METRIC.2004.1357913
   Lee J., 2011, IEEE INT C FUZZ SYST
   MacDonell S, 2010, IEEE T SOFTWARE ENG, V36, P676, DOI 10.1109/TSE.2010.28
   Mahmood Y, 2020, J SOFTW-EVOL PROC, V32, DOI 10.1002/smr.2245
   Mohagheghi P, 2005, PROC INT CONF SOFTW, P303
   Nagar C., 2013, INT J COMPUT APPL, V61, P975
   Nassif A.B., 2011, 2011 IEEE 23 INT C T
   Nassif A.B., 2011, Proc. International Conference on Computer and Software Modeling, P117
   Nassif A.B., 2010, Journal of Global Research in Computer Science, V1, P12
   Nassif A.B., 2010, INT C EMERGING TREND, P5
   Nassif A.B., P 13 ACIS INT C SOFT
   Nassif AB, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE COMPANION 2014), P612, DOI 10.1145/2591062.2591141
   Nassif AB, 2012, 2012 11TH INTERNATIONAL CONFERENCE ON MACHINE LEARNING AND APPLICATIONS (ICMLA 2012), VOL 2, P42, DOI 10.1109/ICMLA.2012.138
   Nassif AB, 2012, 2012 11TH INTERNATIONAL CONFERENCE ON MACHINE LEARNING AND APPLICATIONS (ICMLA 2012), VOL 2, P301, DOI 10.1109/ICMLA.2012.155
   Nassif AB, 2013, J SYST SOFTWARE, V86, P144, DOI 10.1016/j.jss.2012.07.050
   Nawrocki J., 2010, FDN COMPUT DECISION, V35
   Nunes N.J., 2011, IEEE Software
   Ochodek M, 2011, INFORM SOFTWARE TECH, V53, P885, DOI 10.1016/j.infsof.2011.02.004
   Ochodek M, 2011, INFORM SOFTWARE TECH, V53, P200, DOI 10.1016/j.infsof.2010.10.005
   Pantoni R. Palucci, 2008, INFOCOMP J COMPUT SC, V7
   Parvez A.W.M.M., P 2013 INT C INF TEC
   Periyasamy K, 2009, COST ESTIMATION USIN, DOI DOI 10.1109/CISE.2009.5364515
   Prokopova Z, 2017, ADV INTELL SYST, V575, P479, DOI 10.1007/978-3-319-57141-6_51
   PutraFerza A, P 2016 INT C INF COM
   Robiolo G., 2010, ACM INT C P SERIES
   Robiolo G, 2008, INNOV SYST SOFTW ENG, V4, P31, DOI 10.1007/s11334-007-0043-y
   Robiolo G, 2009, INT SYMP EMP SOFTWAR, P423
   Saroha M, 2015, INT C COMP COMM AUT
   Satapathy S.M., 2014, ARXIV PREPRINT ARXIV, P1
   Satapathy SM, 2016, IET SOFTW, V10, P10, DOI 10.1049/iet-sen.2014.0122
   Shameli-Sendi A., 2018, 2018 IEEE 16 INT C S
   Silhavy R, 2018, INFORM SOFTWARE TECH, V97, P1, DOI 10.1016/j.infsof.2017.12.009
   Silhavy R, 2017, J SYST SOFTWARE, V125, P1, DOI 10.1016/j.jss.2016.11.029
   Sjoberg D.I.K., 2001, LECT NOTES COMPUTER
   Vilain P, 2010, P 24 BRAZ S SOFTW EN
   Wang F., 2009, INT C COMP INT SOFTW
   Wen JF, 2012, INFORM SOFTWARE TECH, V54, P41, DOI 10.1016/j.infsof.2011.09.002
   Xie Y, 2015, LECT NOTES ELECT ENG
NR 84
TC 17
Z9 18
U1 2
U2 13
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD APR 1
PY 2021
VL 204
AR 102596
DI 10.1016/j.scico.2020.102596
EA JAN 2021
PG 26
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA QH9AO
UT WOS:000618565200001
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Foster, S
   Baxter, J
   Cavalcanti, A
   Woodcock, J
   Zeyda, F
AF Foster, Simon
   Baxter, James
   Cavalcanti, Ana
   Woodcock, Jim
   Zeyda, Frank
TI Unifying semantic foundations for automated verification tools in
   Isabelle/UTP
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 15th International Conference on Formal Aspects of Component Software
   (FACS)
CY OCT 10-12, 2018
CL Pohang, SOUTH KOREA
DE Theorem proving; Lenses; Unifying theories of programming; Hoare logic;
   Isabelle/HOL
ID TUTORIAL INTRODUCTION; MODEL; LOGIC
AB The growing complexity and diversity of models used for engineering dependable systems implies that a variety of formal methods, across differing abstractions, paradigms, and presentations, must be integrated. Such an integration requires unified semantic foundations for the various notations, and co-ordination of a variety of automated verification tools. The contribution of this paper is Isabelle/UTP, an implementation of Hoare and He's Unifying Theories of Programming, a framework for unification of formal semantics. Isabelle/UTP permits the mechanisation of computational theories for diverse paradigms, and their use in constructing formalised semantics. These can be further applied in the development of verification tools, harnessing Isabelle's proof automation facilities. Several layers of mathematical foundations are developed, including lenses to model variables and state spaces as algebraic objects, alphabetised predicates and relations to model programs, algebraic and axiomatic semantics, proof tools for Hoare logic and refinement calculus, and UTP theories to encode computational paradigms. (C) 2020 Elsevier B.V. All rights reserved.
C1 [Foster, Simon; Baxter, James; Cavalcanti, Ana; Woodcock, Jim; Zeyda, Frank] Univ York, Dept Comp Sci, Deramore Lane, York YO10 5GH, N Yorkshire, England.
C3 University of York - UK
RP Foster, S (corresponding author), Univ York, Dept Comp Sci, Deramore Lane, York YO10 5GH, N Yorkshire, England.
EM simon.foster@york.ac.uk; james.baxter@york.ac.uk;
   ana.cavalcanti@york.ac.uk; jim.woodcock@york.ac.uk
RI Foster, Simon/AAP-7392-2021
OI Foster, Simon/0000-0002-9889-9514; Baxter, James/0000-0001-6083-9607;
   Woodcock, James/0000-0001-7955-2702; Zeyda, Frank/0009-0009-4251-4740;
   Cavalcanti, Ana Lucia Caneca/0000-0002-0831-1976
FU EPSRC [EP/S001190/1, EP/M025756/1, EP/R025479/1]; Royal Academy of
   Engineering [CiET1717\45]; EPSRC [EP/M025756/1, EP/H017461/1,
   EP/R025479/1, EP/S001190/1] Funding Source: UKRI
FX We would like thank Prof. Burkhart Wolff for his invaluable feedback on
   our work, and for first pointing us in the direction of lenses as a
   possible research direction. We also thank the anonymous reviewers of
   our paper, whose thorough and constructive comments on our work have
   greatly enhanced its quality. This work is funded by the EPSRC projects
   CyPhyAssure16(Grant EP/S001190/1), RoboCalc17(Grant EP/M025756/1),
   RoboTest (EP/R025479/1), and the Royal Academy of Engineering (Grant
   CiET1717\45).
CR AARTS C, 1995, INFORM PROCESS LETT, V53, P131, DOI 10.1016/0020-0190(94)00195-5
   Abrial J.-R., 1996, B BOOK ASSIGNING PRO
   Alkassar E, 2008, LECT NOTES COMPUT SC, V5295, P209, DOI 10.1007/978-3-540-87873-5_18
   [Anonymous], 2019, LCP ISABELLE 2019
   [Anonymous], 2006, UTP 2006
   [Anonymous], 1994, P 6 REF WORKSH
   [Anonymous], 2007, LICS
   Armstrong A, 2016, FORM ASP COMPUT, V28, P265, DOI 10.1007/s00165-015-0343-1
   Back R.-J., 1998, Refinement Calculus
   Back R. J. R., 1990, Formal Aspects of Computing, V2, P247, DOI 10.1007/BF01888227
   Back RJ, 2005, FORM ASP COMPUT, V17, P69, DOI 10.1007/s00165-004-0060-7
   Ballarin C., 2018, TECHNICAL REPORT
   Ballarin C, 2006, LECT NOTES ARTIF INT, V4108, P31
   BANCILHON F, 1981, ACM T DATABASE SYST, V6, P557, DOI 10.1145/319628.319634
   Barnett M., 2005, LNCS
   Blanchette JC, 2011, LECT NOTES ARTIF INT, V6989, P12, DOI 10.1007/978-3-642-24364-6_2
   Blanchette JC, 2010, LECT NOTES COMPUT SC, V6172, P131, DOI 10.1007/978-3-642-14052-5_11
   BOULTON R, 1992, IFIP TRANS A, V10, P129
   Bresciani Riccardo, 2012, Integrated Formal Methods. Proceedings 9th International Conference, IFM 2012, P191, DOI 10.1007/978-3-642-30729-4_14
   Broy M, 1999, LECT NOTES COMPUT SC, V1641, P44
   Butterfield A., 2012, LNCS, P124
   Butterfield A, 2010, LECT NOTES COMPUT SC, V6445, P137, DOI 10.1007/978-3-642-16690-7_6
   Cavalcanti A, 2006, LECT NOTES COMPUT SC, V3167, P220
   Colvin RJ, 2017, FORM ASP COMPUT, V29, P853, DOI 10.1007/s00165-017-0416-4
   DIJKSTRA EW, 1975, COMMUN ACM, V18, P453, DOI [10.1145/360933.360975, 10.1145/390016.808417]
   Dongol B., 2019, LNCS, V11825, P192
   Dongol B, 2015, LECT NOTES COMPUT SC, V9129, P137, DOI 10.1007/978-3-319-19797-5_7
   Feliachi A., 2015, INT J SOFTW INF, V9, P122
   Feliachi A, 2012, LECT NOTES COMPUT SC, V7152, P243, DOI 10.1007/978-3-642-27705-4_20
   Feliachi A, 2010, LECT NOTES COMPUT SC, V6445, P188, DOI 10.1007/978-3-642-16690-7_9
   Filliatre J-C, 2013, LNCS, V7792
   Fischer S, 2015, LECT NOTES COMPUT SC, V9129, P215, DOI 10.1007/978-3-319-19797-5_10
   Foster J., 2009, THESIS
   Foster JN, 2007, ACM T PROGR LANG SYS, V29, DOI [10.1145/1232420.1232424, 10.1145/1047659.1040325]
   Foster Simon, 2015, Unifying Theories of Programming 5th International Symposium, UTP 2014. Revised Selected Papers: LNCS 8963, P21, DOI 10.1007/978-3-319-14806-9_2
   Foster S., 2020, LNCS, V12062
   Foster S., 2016, LNCS, V10134, P44
   Foster S., 2019, LNCS, V11885, P130
   Foster S., 2018, LNCS, V11222
   Foster S., 2018, LNCS, V11194
   Foster S., 2018, OPTICS ISABELLE HOL
   Foster S., 2019, ARCH FORMAL PROOFS
   Foster S, 2020, LECT NOTES COMPUT SC, V12062, P169, DOI 10.1007/978-3-030-43520-2_11
   Foster S, 2020, THEOR COMPUT SCI, V802, P105, DOI 10.1016/j.tcs.2019.09.017
   Foster S, 2018, INFORM PROCESS LETT, V135, P47, DOI 10.1016/j.ipl.2018.02.017
   Foster S, 2016, LECT NOTES COMPUT SC, V9965, P295, DOI 10.1007/978-3-319-46750-4_17
   Galloway A.J., 1997, P INFORSID INFORSID
   Gomes V.B.F., 2016, LNCS, V9995
   Gordon M. J., 1989, CURRENT TRENDS HARDW, P387, DOI [DOI 10.1007/978-1-4612-3658-0_10, DOI 10.1007/978-1-4612-3658-010]
   Gordon M, 2010, REFLECTIONS ON THE WORK OF C A R HOARE, P101, DOI 10.1007/978-1-84882-912-1_5
   Hehner E.C.R., 1993, A Practical Theory of Programming
   HEHNER ECR, 1990, SCI COMPUT PROGRAM, V14, P133, DOI 10.1016/0167-6423(90)90018-9
   HEHNER ECR, 1988, ACTA INFORM, V25, P1, DOI 10.1007/BF00268842
   HEHNER ECR, 1984, COMMUN ACM, V27, P134, DOI 10.1145/69610.357988
   Henkin L., 1971, Cylindric Algebras. Part I
   Hoare C. A. R., 1998, Unifying Theories of Programming
   Hoare C.A.R., 1994, TECHNICAL REPORT
   HOARE CAR, 1987, COMMUN ACM, V30, P672, DOI 10.1145/27651.27653
   HOARE CAR, 1969, COMMUN ACM, V12, P576, DOI 10.1145/363235.363259
   HOARE CAR, 1984, PHILOS T R SOC A, V312, P475, DOI 10.1098/rsta.1984.0071
   Hofmann M, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P371, DOI 10.1145/1926385.1926428
   Huffman B, 2013, LECT NOTES COMPUT SC, V8307, P131, DOI 10.1007/978-3-319-03545-1_9
   Jifeng H., 1994, CLASSICAL MIND ESSAY, P171
   Morgan C., 1996, PROGRAMMING SPECIFIC
   Nipkow Tobias, 2014, Concrete Semantics with Isabelle/HOL
   Nuka G, 2006, LECT NOTES COMPUT SC, V4010, P217
   Oliveira M, 2006, LECT NOTES COMPUT SC, V4010, P123
   Oliveira M, 2009, FORM ASP COMPUT, V21, P3, DOI 10.1007/s00165-007-0052-5
   Paige R. F., 1997, LECT NOTES COMPUTER, V1313, P473
   Pickering M., 2017, Art, Science, and Engineering of Programming, V1, P2
   Platzer A, 2008, J AUTOM REASONING, V41, P143, DOI 10.1007/s10817-008-9103-8
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Schirmer N, 2009, ELECTRON NOTES THEOR, V254, P161, DOI 10.1016/j.entcs.2009.09.065
   Sherif A, 2010, FORM ASP COMPUT, V22, P153, DOI 10.1007/s00165-009-0119-6
   Spivey M., 1989, Z NOTATION REFERENCE
   TARSKI A, 1941, J SYMBOLIC LOGIC, V6, P73, DOI DOI 10.2307/2268577
   Tuong F, 2019, ELECTRON P THEOR COM, P13, DOI 10.4204/EPTCS.310.3
   Woodcock J, 2004, LECT NOTES COMPUT SC, V2999, P40
   Zeyda F., 2016, LNCS, V10134, P155
   Zeyda F, 2012, SCI COMPUT PROGRAM, V77, P444, DOI 10.1016/j.scico.2010.02.010
NR 80
TC 11
Z9 11
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29a, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 1
PY 2020
VL 197
AR 102510
DI 10.1016/j.scico.2020.102510
PG 35
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA NS6CO
UT WOS:000572347300004
OA Green Accepted, Green Submitted
DA 2024-07-18
ER

PT J
AU Silva, E
   Batista, T
   Oquendo, F
AF Silva, Eduardo
   Batista, Thais
   Oquendo, Flavio
TI On the verification of mission-related properties in software-intensive
   systems-of-systems architectural design
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Systems-of-systems; Mission modeling; Formal verification; Software
   architecture
AB One of the prominent domains of nowadays software engineering concerns on building and maintaining the so-called system-of-systems (SoS). The activity of integrating independent, potentially heterogeneous, and distributed systems has become remarkable. Designing SoS that consists on integrating independent and behaviorally unknown systems involves several difficulties, specially due to the inner dynamism that hovers SoS. Aiming to support the development of such kind of systems, mission models allows stakeholders to set objectives and resources for SoS, complementing the traditional requirements approach. In a mission model, designers specify the missions of the system and what the system is capable of doing to achieve them. On the other hand, one of the most desired feature of any modeling language is the possibility of formally verifying described properties. Enabling the stakeholders to check the degree of compliance of a model to a given set of properties fosters quality and simplifies the development process by shifting the problem resolution to the design level. The difficulties of SoS modeling also reflect on the verification processes: traditional verification methods were shown noneffective. In this context, this work proposes a method to verify SoS models based on mission-related properties, using the mission modeling language mKAOS and the DynBLTL formalism. Our proposal can be applied to any modeling language, although we exemplify using SosADL, an architectural description language for the SoS context. (C) 2020 Elsevier B.V. All rights reserved.
C1 [Silva, Eduardo; Batista, Thais] Univ Fed Rio Grande do Norte, Natal, RN, Brazil.
   [Silva, Eduardo; Oquendo, Flavio] Univ South Brittany, UMR CNRS, IRISA, Lorient, France.
C3 Universidade Federal do Rio Grande do Norte; Centre National de la
   Recherche Scientifique (CNRS)
RP Silva, E (corresponding author), Univ Fed Rio Grande do Norte, Natal, RN, Brazil.; Silva, E (corresponding author), Univ South Brittany, UMR CNRS, IRISA, Lorient, France.
EM eduafsilva@gmail.com; thaisbatista@gmail.com; flavio.oquendo@irisa.fr
RI Batista, Thais/L-3935-2013; Silva, Eduardo/KUC-8055-2024; Oquendo,
   Flavio/A-2870-2010
OI Batista, Thais/0000-0003-3558-1450; Silva, Eduardo/0000-0003-1395-2978;
   Oquendo, Flavio/0000-0003-4171-2445; Silva, Eduardo/0000-0002-7361-8413
FU INES 2.0 FACEPE [APQ-0399-1.03/17]; CAPES [88887.136410/2017-00]; CNPq
   [465614/2014-0]
FX This research was partially funded by INES 2.0 FACEPE, grant
   APQ-0399-1.03/17, CAPES grant 88887.136410/2017-00, and CNPq grant
   465614/2014-0.
CR Alarte J, 2014, ELECTRON PROC THEOR, P2, DOI 10.4204/EPTCS.163.2
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], 2011, Journal of the Brazilian Computer Society, DOI [10.1007/s13173-011-0029-3, DOI 10.1007/S13173-011-0029-3]
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   Clarke. E. M., 1982, LOGICS OF PROGRAMS, P52, DOI [10 . 1007 / BFb0025774, DOI 10.1007/BFB0025774]
   Clarke EM, 1999, MODEL CHECKING, P1
   Dams D., 1994, Computer Aided Verification. 6th International Conference, CAV '94. Proceedings, P455
   Danilo GZ, 2009, ONLINE ENGINEERING, P1
   Fitzgerald J, 2012, IFIP ADV INF COMM TE, V380, P53
   Giesecke S, 2007, ADV ENG INFORM, V21, P169, DOI 10.1016/j.aei.2006.11.002
   Grimm S, 2018, EURASIP J AUDIO SPEE, DOI 10.1186/s13636-018-0130-z
   Hoare C. A. R., 1998, Unifying Theories of Programming
   Holzmann G. J., 2002, Software Engineering Notes, V27, P81, DOI 10.1145/605466.605479
   Honour E, 2013, ELECTRON PROC THEOR, P2, DOI 10.4204/EPTCS.133.1
   Legay A, 2014, 2014 THEORETICAL ASPECTS OF SOFTWARE ENGINEERING CONFERENCE (TASE), P139, DOI 10.1109/TASE.2014.20
   Legay A, 2010, LECT NOTES COMPUT SC, V6418, P122, DOI 10.1007/978-3-642-16612-9_11
   Leite Jair, 2013, Software Architecture. 7th European Conference, ECSA 2013. Proceedings: LNCS 7584, P106, DOI 10.1007/978-3-642-39031-9_9
   Lim J, 2012, IEEE INT SYMP ELEC, P199, DOI 10.1109/ISEMC.2012.6351784
   Maier M., 1998, SYST ENG, V1, P267, DOI [DOI 10.1002/(SICI)1520-6858(1998)1:43.0.CO;2-D, 10.1002/(SICI)1520-6858(1998)1:4lt;267::AID-SYS3gt;3.0.CO;2-D, DOI 10.1002/(SICI)1520-6858(1998)1:4LT;267::AID-SYS3GT;3.0.CO;2-D, DOI 10.1002/(SICI)1520-6858(1998)1:4<267::AID-SYS3>3.0.CO;2-D]
   Metropolis N., 1987, The Beginning of the Monte Carlo Method
   Neto Valdemar Vicente Graciano, 2017, Journal of the Brazilian Computer Society, V23, DOI 10.1186/s13173-017-0062-y
   Oquendo F, 2018, 2018 13TH ANNUAL CONFERENCE ON SYSTEM OF SYSTEMS ENGINEERING (SOSE), P417, DOI 10.1109/SYSOSE.2018.8428727
   Oquendo F, 2016, IEEE INT C ENG COMP, P13, DOI [10.1109/ICECCS.2016.35, 10.1109/ICECCS.2016.012]
   Quilbeuf J, 2016, LECT NOTES COMPUT SC, V9952, P806, DOI 10.1007/978-3-319-47166-2_56
   Sahin Ferat., 2007, System of Systems Engineering, P1
   Sendall S, 2003, IEEE SOFTWARE, V20, P42, DOI 10.1109/MS.2003.1231150
   Silva E, 2015, 2015 10th System of Systems Engineering Conference (SoSE), P346, DOI 10.1109/SYSOSE.2015.7151951
   Tsai JJP, 2000, ANN SOFTW ENG, V10, P207, DOI 10.1023/A:1018960305057
   WALD A, 1945, ANN MATH STAT, V16, P117, DOI 10.1214/aoms/1177731118
NR 37
TC 3
Z9 3
U1 0
U2 6
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29a, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 15
PY 2020
VL 192
AR 102425
DI 10.1016/j.scico.2020.102425
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA LG6EM
UT WOS:000528191700001
OA Bronze
DA 2024-07-18
ER

PT J
AU Sakaguchi, K
AF Sakaguchi, Kazuhiko
TI Program extraction for mutable arrays
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 20th Brazilian Symposium on Formal Methods (SBMF)
CY NOV 29-DEC 01, 2017
CL Fed Univ Pernambuco, CIn, Recife, BRAZIL
SP CAPES, CNPq, FACEPE
HO Fed Univ Pernambuco, CIn
DE Interactive theorem proving; Formally verified software; The Coq proof
   assistant; Program extraction; Program transformation and optimization
ID LOGIC; STATE
AB We present a lightweight method to represent, verify, and extract efficient programs involving mutable arrays in the Coq proof assistant. Our method mainly consists of a library for handling mutable arrays and an improved extraction plugin. Our library provides a monadic domain specific language for modeling computations involving mutable arrays, a simple reasoning method based on the Ssreflect extension and the Mathematical Components library, and an extraction method to efficient OCamI programs using in-place updates. Our extraction plugin improves the performance of our extracted programs, or more appropriately, through the application of simple program transformations for purely functional programs, it reduces both construction and destruction costs of inductive and coinductive objects and function call costs. As concrete applications for our method, we provide efficient implementations, correctness proofs, and benchmarks of the union-find data structure and the quicksort algorithm. (C) 2019 Elsevier B.V. All rights reserved.
C1 [Sakaguchi, Kazuhiko] Univ Tsukuba, Tennodai 1-1-1, Tsukuba, Ibaraki, Japan.
C3 University of Tsukuba
RP Sakaguchi, K (corresponding author), Univ Tsukuba, Tennodai 1-1-1, Tsukuba, Ibaraki, Japan.
EM sakaguchi@logic.cs.tsukuba.ac.jp
RI Sakaguchi, Kazuhiko/AAF-1652-2021
OI Sakaguchi, Kazuhiko/0000-0003-1855-5189
FU JSPS-CNRS bilateral program "FoRmal tools for IoT sEcurity" [PRC2199];
   JSPS Research Fellowships for Young Scientists; JSPS KAKENHI [17J01683];
   Grants-in-Aid for Scientific Research [17J01683] Funding Source: KAKEN
FX We thank Yves Bertot, Yukiyoshi Kameyama, Laurent Thery, and the
   anonymous referees of the conference and journal versions of this work
   for carefully reading the manuscript, for their valuable comments, and
   for pointing out several problems in the presentation. We also thank all
   the participants of the JSPS-CNRS bilateral program "FoRmal tools for
   IoT sEcurity" (PRC2199) for fruitful discussions. This work was
   supported by JSPS Research Fellowships for Young Scientists and JSPS
   KAKENHI Grant Number 17J01683.
CR Anand A, 2018, LECT NOTES COMPUT SC, V10895, P20, DOI 10.1007/978-3-319-94821-8_2
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], THESIS
   Besson F, 2007, LECT NOTES COMPUT SC, V4502, P48
   Brady E, 2013, ACM SIGPLAN NOTICES, V48, P133, DOI [10.1145/2500365.2500581, 10.1145/2544174.2500581]
   Bulwahn L, 2008, LECT NOTES COMPUT SC, V5170, P134, DOI 10.1007/978-3-540-71067-7_14
   Charguéraud A, 2019, J AUTOM REASONING, V62, P331, DOI 10.1007/s10817-017-9431-7
   Chargueraud A, 2011, ICFP 11 - PROCEEDINGS OF THE 2011 ACM SIGPLAN: INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P418
   Chlipala A, 2009, ICFP'09: PROCEEDINGS OF THE 2009 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P79
   Corbineau P, 2007, LECT NOTES COMPUT SC, V4502, P78
   Garillot F, 2009, LECT NOTES COMPUT SC, V5674, P327, DOI 10.1007/978-3-642-03359-9_23
   Gonthier G., 2008, NOT AMS, V55, P1382
   Gonthier G, 2013, LECT NOTES COMPUT SC, V7998, P163, DOI 10.1007/978-3-642-39634-2_14
   Jung R, 2015, ACM SIGPLAN NOTICES, V50, P637, DOI [10.1145/2676726.2676980, 10.1145/2775051.2676980]
   Katsumata S, 2013, INFORM COMPUT, V222, P228, DOI 10.1016/j.ic.2012.10.014
   Kumar R, 2018, LECT NOTES COMPUT SC, V10895, P362, DOI 10.1007/978-3-319-94821-8_21
   LAUNCHBURY J, 1994, SIGPLAN NOTICES, V29, P24, DOI 10.1145/773473.178246
   Leroy X, 2009, J AUTOM REASONING, V43, P363, DOI 10.1007/s10817-009-9155-4
   Leroy Xavier, 2018, OCAML SYSTEM RELEASE
   Letouzey P, 2002, LECT NOTES COMPUT SC, V2646, P200
   Letouzey P, 2008, LECT NOTES COMPUT SC, V5028, P359, DOI 10.1007/978-3-540-69407-6_39
   Ley-Wild R, 2013, ACM SIGPLAN NOTICES, V48, P561, DOI 10.1145/2480359.2429134
   Lin CK, 2006, ACM SIGPLAN NOTICES, V41, P274, DOI 10.1145/1160074.1159840
   Mahboubi A., 2018, MATH COMPONENTS
   Mahboubi A, 2013, LECT NOTES COMPUT SC, V7998, P19, DOI 10.1007/978-3-642-39634-2_5
   Mullen Eric., 2018, P 7 ACM SIGPLAN INT, P172, DOI 10.1145/3167089
   Nanevski A, 2008, J FUNCT PROGRAM, V18, P865, DOI 10.1017/S0956796808006953
   Nanevski A, 2008, ICFP'08: PROCEEDINGS OF THE 2008 SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P229
   NELSON G, 1980, J ACM, V27, P356, DOI 10.1145/322186.322198
   Nieuwenhuis R, 2005, LECT NOTES COMPUT SC, V3467, P453
   O'Hearn P., 2001, Computer Science Logic. 15th International Workshop, CSL 2001 10th Annual Conference of the EACSL. Proceedings (Lecture Notes in Computer Science Vol.2142), P1
   Paulin-Mohring Christine., 1989, P 16 ACM SIGPLAN S P, P89
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Sakaguchi K, 2018, LECT NOTES COMPUT SC, V10818, P51, DOI 10.1007/978-3-319-90686-7_4
   Sergey I, 2015, ACM SIGPLAN NOTICES, V50, P77, DOI [10.1145/2813885.2737964, 10.1145/2737924.2737964]
   Swamy N, 2016, ACM SIGPLAN NOTICES, V51, P256, DOI 10.1145/2914770.2837655
   Swierstra W, 2009, LECT NOTES COMPUT SC, V5674, P440, DOI 10.1007/978-3-642-03359-9_30
   TARJAN RE, 1984, J ACM, V31, P245, DOI 10.1145/62.2160
   TARJAN RE, 1975, J ACM, V22, P215, DOI 10.1145/321879.321884
   The Coq Development Team, 2019, COQ PROOF ASS REF MA
   Wadler P., 1995, Advanced Functional Programming. First International Spring School on Advanced Functional Programming Techniques. Tutorial Text, P24
NR 44
TC 1
Z9 1
U1 1
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29a, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 1
PY 2020
VL 191
AR 102372
DI 10.1016/j.scico.2019.102372
PG 27
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA KW9NS
UT WOS:000521511000009
OA Bronze
DA 2024-07-18
ER

PT J
AU Zhu, CY
   Butler, M
   Cirstea, C
AF Zhu, Chenyang
   Butler, Michael
   Cirstea, Corina
TI Formalizing hierarchical scheduling for refinement of real-time systems
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Event-B; Refinement; Timing; Concurrency; Hierarchical scheduling
AB The Event-B formalism offers a stepwise development approach for managing complexity in system design. However, the existing work that extends Event-B models with discrete timing properties inadequately represents the communication and competition between concurrent tasks in concurrent systems. In this paper, we present the semantics of the parameterized real-time trigger-response properties of Event-8 models based on timing invariants. We show a method of syntactically encoding parameterized real-time trigger-response properties in Event-B machines. To capture the concurrency between tasks, we distinguish end-to-end timing properties and scheduler-based timing properties from the perspective of different system design phases. We model end-to-end timing properties as parameterized timing properties and scheduler-based timing properties as unparameterized timing properties. A nondeterministic queue-based scheduling framework is proposed to replace end-to-end timing properties with scheduler-based timing properties. Additional gluing invariants are provided for this refinement. To demonstrate the usability of the framework, we formalize a two-level hierarchical scheduling system with local resource sharing managed by a time-division multiplexing global scheduler and two alternative local schedulers refined by the nondeterministic queue-based scheduling policy. Models are proved using the Rodin tool. (C) 2020 Elsevier B.V. All rights reserved.
EM cz4g16@soton.ac.uk
OI Cirstea, Corina/0000-0003-3165-5678; Zhu, Chenyang/0000-0002-2145-0559
FU China Scholarship Council (CSC) [201708060147]
FX Our sincere thanks go to anonymous reviewers who provided helpful
   suggestions to improve the quality of the paper. This work is supported
   in part by the scholarship from China Scholarship Council (CSC) under
   the Grant CSC NO. 201708060147.
CR ABADI M, 1994, ACM T PROGR LANG SYS, V16, P1543, DOI 10.1145/186025.186058
   Abrial J R, 2010, Modeling in Event-B: system and softeng
   ALUR R, 1994, THEOR COMPUT SCI, V126, P183, DOI 10.1016/0304-3975(94)90010-8
   Alur R, 2015, PRINCIPLES OF CYBER-PHYSICAL SYSTEMS, P1
   [Anonymous], 2005, B BOOK ASSIGNING PRO
   BACK RJR, 1990, LECT NOTES COMPUT SC, V430, P67
   BACK RJR, 1988, ACM T PROGR LANG SYS, V10, P513, DOI 10.1145/48022.48023
   Banach R, 2015, SCI COMPUT PROGRAM, V105, P92, DOI 10.1016/j.scico.2015.02.003
   Butler M., 2013, MASTERING SYSTEM ANA
   Butler M., 2016, MODELLING REFINING H
   Butler M., 2002, APPROACH MODELLING R
   Butler M, 2009, NATO SCI PEAC SECUR, V22, P131, DOI 10.3233/978-1-58603-976-9-131
   Chenyang Zhu, 2018, Abstract State Machines, Alloy, B, TLA, VDM, and Z. 6th International Conference, ABZ 2018. Proceedings: LNCS 10817, P219, DOI 10.1007/978-3-319-91271-4_15
   Clarke EM, 1996, ACM COMPUT SURV, V28, P626, DOI 10.1145/242223.242257
   Dierks H, 2007, LECT NOTES COMPUT SC, V4763, P114
   Dijkstra E. W., 1978, Programming methodology. A collection of articles by members of IFIP WG2.3, P166
   Hehua Zhang, 2010, 2010 IEEE Proceedings of 34th Annual Computer Software and Applications Conference (COMPSAC 2010), P425, DOI 10.1109/COMPSAC.2010.50
   Jastram M., 2014, RODIN USERS HDB COVE
   Kopetz H, 2011, Real-Time Systems: Design Principles for Distributed Embedded Applications, P307
   Lamport L., 2002, SPECIFYING SYSTEMS T
   Larsen K. G., 1997, International Journal on Software Tools for Technology Transfer, V1, P134, DOI 10.1007/s100090050010
   Lynch N, 1996, INFORM COMPUT, V128, P1, DOI 10.1006/inco.1996.0060
   Regehr J.D., 2001, Using hierarchical scheduling to support soft real-time applications in general-purpose operating systems
   Rehm J., 2010, International Journal on Software Tools for Technology Transfer, V12, P39, DOI 10.1007/s10009-009-0130-5
   Sarshogh M.R., 2011, SPECIFICATION REFINE
   Sekerinski Emil, 2013, Theoretical Aspects of Computing - ICTAC 2013. 10th International Colloquium. Proceedings: LNCS 8049, P319, DOI 10.1007/978-3-642-39718-9_19
   Sekerinski E., 2009, DAGST SEM REF BAS ME
   Sulskus G, 2016, PROCEEDINGS OF 2016 IEEE 17TH INTERNATIONAL CONFERENCE ON INFORMATION REUSE AND INTEGRATION (IEEE IRI), P118, DOI 10.1109/IRI.2016.23
   Sulskus G, 2015, LECT NOTES COMPUT SC, V9392, P292, DOI 10.1007/978-3-319-24644-4_20
   Hoang TS, 2013, SOFTW SYST MODEL, V12, P229, DOI 10.1007/s10270-010-0183-7
   Yu Y, 1999, LECT NOTES COMPUT SC, V1703, P54
   Zhu C., 2019, FORMALIZING HIERARCH
   Zhu C., 2019, 13 INT S THEOR ASP S
   Zhu CY, 2018, PROCEEDINGS 2018 12TH INTERNATIONAL SYMPOSIUM ON THEORETICAL ASPECTS OF SOFTWARE ENGINEERING (TASE 2018), P150, DOI 10.1109/TASE.2018.00028
NR 34
TC 2
Z9 3
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD APR 1
PY 2020
VL 189
AR 102390
DI 10.1016/j.scico.2020.102390
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA KN9XE
UT WOS:000515199800002
OA Bronze, Green Accepted
DA 2024-07-18
ER

PT J
AU Zhang, YL
   Zhang, M
   Pu, GG
AF Zhang, Yueling
   Zhang, Min
   Pu, Geguang
TI Optimizing backbone filtering
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 12th International Symposium on Theoretical Aspects of Software
   Engineering (TASE)
CY AUG, 2018
CL Guangzhou, PEOPLES R CHINA
DE Satisnability; Backbone computing; Algorithms
ID COMPUTING BACKBONES
AB In propositional formulas, literals are assigned to True or False in each assignment. Backbone literals are always assigned to True in every satisfiable assignment (model) of the given formula. Backbone literals are keys to improve the performance of SAT testing and SAT-based applications, such as model checking and program analysis. In this paper, we propose an optimized approach that combines COV, WHIT and 2LEN strategies to improve backbone computing. We have implemented it in EDUCIBone. COV and 2LEN are used for finding backbone literals, WHIT is used for finding non -backbone literals. COV uses the fact that for a backbone literal 1, there must exist at least one clause 0 in every model v of the given formula 4) such that for every other literal I' in 0, the assignment of I' is False in v. WHIT is based on the fact that for a literal I, and a model v of the given formula D, if for every clause. Phi that has I, there always exists another 1' also in di such that the assignment of l' is True, then Phi is a non-backbone literal. For a literal I, the naive way to decide if 1 is a backbone literal is to check the satisfiability of I A 1 and I A Phi). 2LEN finds a set of unique free literals F1 for 1, such that the satisfiability of I A 4) and A l' A Phi are the same. Experiments show that checking the satisfiability of refi A I' A' is faster than checking the satisfiability of I A 4) when the backbone computing time of the given formula is less than 3000 seconds. We deactivate 2LEN strategy when the formula has been computed for more than 3000 seconds. We evaluate the performance of EDUCIBone on formulas from industrial tracks in SAT Competitions from 2011 to 2017. Performance comparisons are conducted among EDUCIBone, DUCIBone and minibones-cb100. Results show that EDUCIBone solves the most formulas. For the formulas that are commonly solved by the three tools, EDUCIBone is the fastest in computing backbone literals from the formulas. We also analyze the efficiency of COV, WHIT and 2LEN strategies separately with detailed experiments. Results show that every strategy contributes to the performance of EDUCIBone, and they are all applied to various kinds of formulas. (C) 2019 Elsevier B.V. All rights reserved.
C1 [Zhang, Yueling; Zhang, Min; Pu, Geguang] East China Normal Univ, Dept Software Engn, Shanghai 200062, Peoples R China.
   [Zhang, Min] Shanghai Key Lab Trustworthy Comp, Shanghai 200062, Peoples R China.
   [Pu, Geguang] Natl Trusted Embedded Software Engn Technol Res C, Shanghai 200062, Peoples R China.
C3 East China Normal University
RP Zhang, YL; Zhang, M; Pu, GG (corresponding author), East China Normal Univ, Dept Software Engn, Shanghai 200062, Peoples R China.; Zhang, M (corresponding author), Shanghai Key Lab Trustworthy Comp, Shanghai 200062, Peoples R China.; Pu, GG (corresponding author), Natl Trusted Embedded Software Engn Technol Res C, Shanghai 200062, Peoples R China.
EM ylzhang@sei.ecnu.edu.cn; mzhang@sei.ecnu.edu.cn; ggpu@sei.ecnu.edu.cn
RI Zhang, yueling/HZH-7176-2023
FU NSFC Projects [61572197, 61632005, 61672012]; MOST NKTSP Project
   [2015BAG19B02]; STCSM Project [16DZ1100600]
FX Yueling Zhang is partially supported by the NSFC Projects (Nos. 61572197
   and 61632005). Min Zhang is partially supported by the NSFC Project (No.
   61672012). Geguang Pu is partially supported by the MOST NKTSP Project
   (No. 2015BAG19B02) and the STCSM Project (No. 16DZ1100600).
CR Berg J, 2017, ARTIF INTELL, V244, P110, DOI 10.1016/j.artint.2015.07.001
   Climer S, 2002, EIGHTEENTH NATIONAL CONFERENCE ON ARTIFICIAL INTELLIGENCE (AAAI-02)/FOURTEENTH INNOVATIVE APPLICATIONS OF ARTIFICIAL INTELLIGENCE CONFERENCE (IAAI-02), PROCEEDINGS, P707
   Culberson J, 2001, THEOR COMPUT SCI, V265, P227, DOI 10.1016/S0304-3975(01)00164-5
   Dubois Olivier., 2001, IJCAI, V1, P248
   Eén N, 2004, LECT NOTES COMPUT SC, V2919, P502, DOI 10.1007/978-3-540-24605-3_37
   Janota M., 2010, THESIS
   Janota M, 2015, AI COMMUN, V28, P161, DOI 10.3233/AIC-140640
   Kaiser A., 2001, DETECTING INADMISSIB
   Kilby P., 2005, AAAI, P1368
   Li Jianwen, 2017, THEORETICAL ASPECTS
   Marques-Silva J, 2010, FRONT ARTIF INTEL AP, V215, P15, DOI 10.3233/978-1-60750-606-5-15
   MONTANARI A, 2007, ARXIV07091667
   Selman B., 1993, Cliques, coloring, and satisfiability, V26, P521, DOI DOI 10.1090/DIMACS/026
   Velev M.N., 2000, LNCS, V1855, P296, DOI [10.1007/10722167_24, DOI 10.1007/10722167_24]
   Yu B, 2003, IEEE IJCNN, P1179
   Zhang WX, 2005, 19TH INTERNATIONAL JOINT CONFERENCE ON ARTIFICIAL INTELLIGENCE (IJCAI-05), P343
   Zhu C. S., 2011, 2011 Formal Methods in Computer-Aided Design (FMCAD), P63
   Zhu CSC, 2011, INT HIGH LEVEL DESIG, P84, DOI 10.1109/HLDVT.2011.6113981
NR 18
TC 2
Z9 2
U1 0
U2 5
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 15
PY 2020
VL 187
AR 102374
DI 10.1016/j.scico.2019.102374
PG 15
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA KM2YN
UT WOS:000513988800010
OA Bronze
DA 2024-07-18
ER

PT J
AU Lima, C
   Cezar, J
   Leobas, GV
   Rohou, E
   Pereira, FMQ
AF Lima, Caio
   Cezar, Junio
   Leobas, Guilherme Vieira
   Rohou, Erven
   Quintao Pereira, Fernando Magno
TI Guided just-in-time specialization
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Code specialization; Just-in-time compilation; Program annotation;
   Performance; JavaScript
ID JAVASCRIPT; SEMANTICS; LANGUAGE
AB JavaScript's portability across a vast ecosystem of browsers makes it today a core building block of the web. Yet, building efficient systems in JavaScript is still challenging. Because this language is so dynamic, JavaScript programs provide little information that just-in-time compilers can use to carry out safe optimizations. Motivated by this observation, we propose to guide the JIT compiler in the task of code specialization. To this end, we have augmented the language with an annotation that indicates which function call sites are likely to benefit from specialization. To support the automatic annotation of programs, we have introduced a novel static analysis that identifies profitable specialization points. We have implemented our ideas in JavaScriptCore, the built-in JavaScript engine for WebKit. The addition of guided specialization to this engine required us to change it in several non-trivial ways, which we describe in this paper. Such changes let us observe speedups of up to 1.7x on programs present in synthetic benchmarks. (C) 2019 Elsevier B.V. All rights reserved.
C1 [Lima, Caio; Cezar, Junio; Leobas, Guilherme Vieira; Quintao Pereira, Fernando Magno] Ave Antonio Carlos 6627, Belo Horizonte, MG, Brazil.
   [Rohou, Erven] Univ Rennes, Inria, CNRS, IRISA, Rennes, France.
C3 Universite de Rennes; Inria; Centre National de la Recherche
   Scientifique (CNRS)
RP Lima, C; Pereira, FMQ (corresponding author), Ave Antonio Carlos 6627, Belo Horizonte, MG, Brazil.
EM caiolima@dcc.ufmg.br; junio.cezar@dcc.ufmg.br; guihermel@dcc.ufmg.br;
   erven.rohou@inria.fr; jfernando@dcc.ufmg.br
RI Pereira, Fernando/HNR-7786-2023
OI Rohou, Erven/0000-0002-8060-8360
FU FAPEMIG [APQ-03832-14]; CNPq [406377/2018-9]; CAPES
FX This project was funded by grants from FAPEMIG (Grant APQ-03832-14
   "Cooperation FAPs-INRIA-CNRS"), CNPq (Grant 406377/2018-9) and CAPES. We
   thank the referees for the time and expertise they have put into
   reviewing our work. Their suggestions have greatly improved our paper.
CR Adams K, 2014, ACM SIGPLAN NOTICES, V49, P777, DOI [10.1145/2714064.2660199, 10.1145/2660193.2660199]
   [Anonymous], [No title captured]
   [Anonymous], 2013, PEMBUATAN BIODIESEL
   [Anonymous], [No title captured]
   [Anonymous], 1993, Partial Evaluation and Automatic Program Generation
   [Anonymous], 2006, COMPILERS PRINCIPLES
   Appel A.W., 2002, MODERN COMPILER IMPL, V2nd
   Auler R, 2014, LECT NOTES COMPUT SC, V8409, P218
   Azevedo A., 1999, Proceedings of the ACM 1999 Java Grande Conference, P142, DOI 10.1145/304065.304115
   BALL T, 1993, SIGPLAN NOTICES, V28, P300, DOI 10.1145/173262.155119
   Chandross M, 2009, PROCEEDINGS OF THE STLE/ASME INTERNATIONAL JOINT TRIBOLOGY CONFERENCE 2008, P71, DOI 10.1145/1508293.1508304
   Chang Mason., 2011, Proc. Dynamic Languages Symposium, P13
   CYTRON R, 1991, ACM T PROGR LANG SYS, V13, P451, DOI 10.1145/115372.115320
   DENNING DE, 1977, COMMUN ACM, V20, P504, DOI 10.1145/359636.359712
   Deutsch PeterL., 1984, Proceedings of the 11th ACM SIGACT-SIGPLAN symposium on Principles of Programming Languages, POPL '84, P297, DOI [10.1145/800017.800542, DOI 10.1145/800017.800542]
   Dewsbury R., 2007, Google web toolkit applications
   Doeraene S, 2016, SCALA'16: PROCEEDINGS OF THE 2016 7TH ACM SIGPLAN SYMPOSIUM ON SCALA, P85, DOI 10.1145/2998392.2998404
   Eich B, 2005, ACM SIGPLAN NOTICES, V40, P129, DOI 10.1145/1090189.1086382
   Gal A, 2009, ACM SIGPLAN NOTICES, V44, P465, DOI 10.1145/1543135.1542528
   George L, 1996, ACM T PROGR LANG SYS, V18, P300, DOI 10.1145/229542.229546
   Grant B, 1997, ACM SIGPLAN NOTICES, V32, P163, DOI 10.1145/258994.259016
   Hackett B, 2012, ACM SIGPLAN NOTICES, V47, P239, DOI 10.1145/2345156.2254094
   HILL GW, 1970, COMMUN ACM, V13, P617, DOI 10.1145/355598.362775
   HOLZLE U, 1991, LECT NOTES COMPUT SC, V512, P21, DOI 10.1007/BFb0057013
   Humer C, 2015, ACM SIGPLAN NOTICES, V50, P123, DOI 10.1145/2658761.2658776
   Jensen SH, 2009, LECT NOTES COMPUT SC, V5673, P238, DOI 10.1007/978-3-642-03237-0_17
   Krintz C, 2003, INT SYM CODE GENER, P69, DOI 10.1109/CGO.2003.1191534
   Krintz C, 2001, ACM SIGPLAN NOTICES, V36, P156, DOI 10.1145/381694.378831
   Maffeis S, 2008, LECT NOTES COMPUT SC, V5356, P307
   Mendonça G, 2017, ACM T ARCHIT CODE OP, V14, DOI 10.1145/3084540
   Nirkhe V., 1992, Conference Record of the Nineteenth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P269, DOI 10.1145/143165.143223
   Park D, 2015, ACM SIGPLAN NOTICES, V50, P346, DOI [10.1145/2813885.2737991, 10.1145/2737924.2737991]
   Pominville P., 2000, CASCON 00, P8
   Richards G, 2010, ACM SIGPLAN NOTICES, V45, P1, DOI 10.1145/1809028.1806598
   Sagiv M, 1996, THEOR COMPUT SCI, V167, P131, DOI 10.1016/0304-3975(96)00072-2
   Shali A, 2011, OOPSLA 11: PROCEEDINGS OF THE 2011 ACM INTERNATIONAL CONFERENCE ON OBJECT ORIENTED PROGRAMMING SYSTEMS LANGUAGES AND APPLICATIONS, P375
   Sol R, 2011, LECT NOTES COMPUT SC, V6601, P2, DOI 10.1007/978-3-642-19861-8_2
   Campos VHS, 2016, PROCEEDINGS OF THE 25TH INTERNATIONAL CONFERENCE ON COMPILER CONSTRUCTION (CC 2016), P163, DOI 10.1145/2892208.2892225
   Wrthinger T., 2013, P 2013 ACM INT S NEW, P187, DOI [10.1145/2509578.2509581, DOI 10.1145/2509578.2509581]
   Würthinger T, 2017, ACM SIGPLAN NOTICES, V52, P662, DOI [10.1145/3062341.3062381, 10.1145/3140587.3062381]
   Youfeng Wu, 1994, Proceedings of the 27th Annual International Symposium on Microarchitecture. MICRO 27, P1, DOI 10.1109/MICRO.1994.717399
   Zakai A., 2011, Proceedings of the ACM international conference companion on object oriented programming systems languages and applications companion, P301, DOI DOI 10.1145/2048147.2048224
NR 42
TC 1
Z9 1
U1 1
U2 15
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29a, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 1
PY 2020
VL 185
AR 102318
DI 10.1016/j.scico.2019.102318
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA JR6VU
UT WOS:000499761400002
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Laneve, C
AF Laneve, Cosimo
TI A lightweight deadlock analysis for programs with threads and reentrant
   locks
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Deadlock analysis; Threads and reentrant locks; Lams; Circularities;
   Static semantics
AB Deadlock analysis of multi-threaded programs with reentrant locks is complex because these programs may have infinitely many states. We define a simple calculus featuring recursion, threads and synchronizations that guarantee exclusive access to objects. We detect deadlocks by associating an abstract model to programs - the extended lam model - and we define an algorithm for verifying that a problematic object dependency (e.g. a circularity) between threads will not be manifested.
   The analysis is lightweight because the deadlock detection problem is fully reduced to the corresponding one in lams (without using other models). In fact, the technique is intended to be an effective tool for the deadlock analysis of programming languages by defining ad-hoc extraction processes. We demonstrate this effectivity by applying our analysis to a core calculus featuring shared objects, threads and Java-like synchronization primitives. We also discuss a prototype verifier, called JaDA, that covers several features of Java and deliver initial assessments of the tool. (C) 2019 Elsevier B.V. All rights reserved.
C1 [Laneve, Cosimo] Univ Bologna, Dept Comp Sci & Engn, INRIA Focus, Bologna, Italy.
C3 University of Bologna
RP Laneve, C (corresponding author), Univ Bologna, Dept Comp Sci & Engn, INRIA Focus, Bologna, Italy.
EM cosimo.laneve@unibo.it
OI Laneve, Cosimo/0000-0002-0052-4061
CR Abadi M, 2006, ACM T PROGR LANG SYS, V28, P207, DOI 10.1145/1119479.1119480
   [Anonymous], 1980, LNCS
   Atkey Robert, 2015, ELECT COMMUN ECEASST, V72
   Bensalem S, 2006, LECT NOTES COMPUT SC, V3875, P208
   Boyapati C, 2002, ACM SIGPLAN NOTICES, V37, P211, DOI 10.1145/583854.582440
   Davey B. A., 2002, INTRO LATTICES ORDER, V2nd, DOI DOI 10.1017/CBO9780511809088
   Eslamimehr M, 2014, 22ND ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (FSE 2014), P353, DOI 10.1145/2635868.2635918
   Flanagan C, 2003, ACM SIGPLAN NOTICES, V38, P338, DOI 10.1145/780822.781169
   Flores-Montoya AE, 2013, LECT NOTES COMPUT SC, V7892, P273
   Garcia A.M., 2017, THESIS
   Garcia A, 2017, RIV PUBL SER AUTOMAT, P169
   Giachino Elena, 2014, CONCUR 2014 - Concurrency Theory. 25th International Conference, CONCUR 2014. Proceedings: LNCS 8704, P63, DOI 10.1007/978-3-662-44584-6_6
   Giachino Elena, 2014, Formal Methods for Executable Software Models. 14th International School on Formal Methods for the Design of Computer, Communication, and Software Systems, SFM 2014. Advanced Lectures: LNCS 8483, P26, DOI 10.1007/978-3-319-07317-0_2
   Giachino E, 2016, SOFTW SYST MODEL, V15, P1013, DOI 10.1007/s10270-014-0444-y
   Johnsen E.B., 2011, Lecture Notes in Computer Science, V6957, P142, DOI [10.1007/978- 3- 642-25271-6 8, DOI 10.1007/978-3-642-25271-6]
   Jones N. D., 1977, Theoretical Computer Science, V4, P277, DOI 10.1016/0304-3975(77)90014-7
   Kobayashi N, 2006, LECT NOTES COMPUT SC, V4137, P233
   Kobayashi N, 2017, INFORM COMPUT, V252, P48, DOI 10.1016/j.ic.2016.03.004
   Laneve C., 2019, DEADLOCK ANAL WAIT N
   Laneve C, 2018, LECT NOTES COMPUT SC, V10951, P608, DOI 10.1007/978-3-319-95582-7_36
   Laneve Cosimo, 2017, LECT NOTES COMPUTER, P37
   MILNER R, 1992, INFORM COMPUT, V100, P1, DOI [10.1016/0890-5401(92)90008-4, 10.1016/0890-5401(92)90009-5]
   Naik M, 2009, PROC INT CONF SOFTW, P386, DOI 10.1109/ICSE.2009.5070538
   Odersky M., 2004, Tech. Rep. IC/2004/64
   Reisig W., 2012, Petri nets: an introduction, V4
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Suenaga K, 2008, LECT NOTES COMPUT SC, V5356, P155
   Vasconcelos V., 2009, PRE P WORKSH PROGR L, V17, P95
NR 28
TC 3
Z9 4
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUL 15
PY 2019
VL 181
BP 64
EP 81
DI 10.1016/j.scico.2019.06.002
PG 18
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA IW0MB
UT WOS:000484654900004
OA Green Published, Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Timm, N
   Gruner, S
AF Timm, Nils
   Gruner, Stefan
TI Three-valued bounded model checking with cause-guided abstraction
   refinement
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Three-valued abstraction; Bounded model checking; Cause-guided
   abstraction refinement; Concurrent software systems; Fairness
AB We present a technique for verifying concurrent software systems via SAT-based three valued bounded model checking. It is based on a direct transfer of the system to be analysed and a temporal logic property into a propositional logic formula that encodes the corresponding model checking problem. In our approach we first employ three-valued abstraction which gives us an abstract system defined over predicates with the possible truth values true, false and unknown. The state space of the abstract system is then logically encoded. The verification result of the encoded three-valued model checking problem can be obtained via two satisfiability checks, one for an over-approximation of the encoding and one for an under-approximation. True and false results can be immediately transferred to the system under consideration.
   In case of an unknown result, the current abstraction is too imprecise for a definite outcome. In order to achieve the necessary precision, we have developed a novel cause-guided abstraction refinement procedure. An unknown result always entails a truth assignment that only satisfies the over-approximation, but not the under-approximation. We determine the propositional logic clauses of the under-approximation that are not satisfied under the assignment. These clauses contain unknown as a constant. Each unknown is associated with a cause of uncertainty that refers to missing predicates that are required for a definite model checking result. Our procedure adds these predicates to the abstraction and constructs the encoding corresponding to the refined model checking problem. The procedure is iteratively applied until a definite result can be obtained.
   We have integrated our novel refinement approach into a SAT-based three-valued bounded model checker. In an experimental evaluation, we show that our approach allows to automatically and quickly reach the right level of abstraction for solving software verification tasks. (C) 2019 Elsevier B.V. All rights reserved.
C1 [Timm, Nils; Gruner, Stefan] Univ Pretoria, Dept Comp Sci, Pretoria, South Africa.
C3 University of Pretoria
RP Timm, N (corresponding author), Univ Pretoria, Dept Comp Sci, Pretoria, South Africa.
EM ntimm@cs.up.ac.za; sg@cs.up.ac.za
OI Timm, Nils/0000-0002-9656-3240
CR [Anonymous], 2010, J SATISFIABIL BOOLEA, DOI DOI 10.3233/SAT190075
   [Anonymous], 2012, LECT NOTES COMPUT SC
   Beer A, 2015, LECT NOTES COMPUT SC, V9232, P203, DOI 10.1007/978-3-319-23404-5_14
   Biere A, 2009, FRONT ARTIF INTEL AP, V185, P457, DOI 10.3233/978-1-58603-929-5-457
   Bruns G., 1999, Computer Aided Verification. 11th International Conference, CAV'99. Proceedings (Lecture Notes in Computer Science Vol.1633), P274
   BURCH JR, 1992, INFORM COMPUT, V98, P142, DOI 10.1016/0890-5401(92)90017-A
   Cimatti A., 2000, Int. J. Softw. Tools for Technol. Transf. (STTT), V2, P410, DOI [DOI 10.1007/S100090050046, 10.1007/s100090050046]
   Clarke EdmundM., 2000, Proceedings of the International Conference on Computer Aided Veri cation (CAV), P154, DOI 10.1007/1072216715
   Conserva MS, 2016, LECT NOTES COMPUT SC, V10009, P279, DOI 10.1007/978-3-319-47846-3_18
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   DIJKSTRA EW, 1965, COMMUN ACM, V8, P569, DOI 10.1145/365559.365617
   Een N., 2003, ELECT NOTES THEORETI, V89, P543, DOI 10.1016/s1571-0661(05)82542-3
   Fitting M., 1994, Fundamenta Informaticae, V20, P113
   Grumberg O., 2009, INT CONFERENCEAUTOMA, P21
   GUPTA A, 2005, ABSTRACTION REFINEME, P112
   Halpern JY, 2005, BRIT J PHILOS SCI, V56, P843, DOI 10.1093/bjps/axi147
   Ivancic F, 2005, LECT NOTES COMPUT SC, V3576, P301
   Kroening Daniel, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P557, DOI 10.1007/978-3-642-22110-1_44
   Kroening D., 2014, CBMC-C bounded model checker, P389, DOI DOI 10.1007/978-3-642-54862-8_26
   Kroening D, 2006, ELECTRON NOTES THEOR, V144, P79, DOI 10.1016/j.entcs.2005.07.021
   Merz S, 2008, MONOGR THEOR COMPUT, P401, DOI 10.1007/978-3-540-74107-7_8
   Methni  A., 2015, SPECIFYING VERIFYING, P206
   Nadel A, 2014, LECT NOTES COMPUT SC, V8561, P206, DOI 10.1007/978-3-319-09284-3_16
   RABINOVITZ I, 2005, CAV, V3576, P82
   Ramos R, 2009, LECT NOTES COMPUT SC, V5850, P140, DOI 10.1007/978-3-642-05089-3_10
   Schrieb J, 2009, LECT NOTES COMPUT SC, V5850, P106, DOI 10.1007/978-3-642-05089-3_8
   Shoham S, 2008, INFORM COMPUT, V206, P1313, DOI 10.1016/j.ic.2008.07.004
   Timm  N., THESIS
   Timm  N., 2016, BOUNDED MODEL CHECKE, P199
   Timm  N., 2018, TECH REP
   Timm N, 2017, LECT NOTES COMPUT SC, V10522, P244, DOI 10.1007/978-3-319-68972-2_16
   Timm N, 2010, LECT NOTES COMPUT SC, V6447, P534, DOI 10.1007/978-3-642-16901-4_35
   Wehrheim H, 2008, LECT NOTES COMPUT SC, V5160, P380, DOI 10.1007/978-3-540-85762-4_26
   Wu C. Y., 2013, 2013 INT C INF SCI A, P1
NR 34
TC 3
Z9 3
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD APR 15
PY 2019
VL 175
BP 37
EP 62
DI 10.1016/j.scico.2019.02.002
PG 26
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA HQ5AF
UT WOS:000462421700004
OA Green Submitted, hybrid
DA 2024-07-18
ER

PT J
AU Deutschbein, C
   Fleming, T
   Burns, A
   Baruah, S
AF Deutschbein, Calvin
   Fleming, Tom
   Burns, Alan
   Baruah, Sanjoy
TI Multi-core cyclic executives for safety-critical systems
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Multiprocessor scheduling; Cyclic executives; Linear program (LP);
   Approximation algorithm
ID ALGORITHM
AB In a cyclic executive, a series of pre-determined frames are executed in sequence; once the series is complete the sequence is repeated. Within each frame individual units of computation are executed, again in a pre-specified sequence. Although they suffer from a number of limitations, cyclic executives have the advantage of being fully deterministic, and may be implemented with very low runtime overhead; as a consequence of these advantages, run-time schedulers in highly safety-critical real-time systems have historically been implemented as cyclic executives.
   Industrial applications of the cyclic executive framework are currently primarily restricted to uniprocessor platforms; in this paper, we consider the implementation of cyclic executives upon multi-core platforms. We present a Linear Programming (LP) based formulation of the problem of constructing cyclic executives upon multiprocessors for a particular kind of recurrent real-time workload - collections of implicit-deadline periodic tasks. We describe techniques for solving the LP formulation under different kinds of restrictions in order to obtain preemptive and non-preemptive cyclic executives. Our algorithms for constructing preemptive cyclic executives have running time polynomial in the size of the cyclic executive. We present an exact algorithm for constructing non-preemptive cyclic executives that has worst-case running time exponential in the size of the cyclic executive; however, state-of-the-art LP solvers appear to often be able to construct fairly large cyclic executives in a reasonable amount of time. We also present an approximation algorithm for constructing non-preemptive cyclic executives that does run in polynomial time, and evaluate the effectiveness of this approximation algorithm both theoretically via the speedup factor metric, and experimentally via experiments on synthetically generated workloads. We additionally identify a particular restricted kind of workload that is quite commonly found in practice, for which non-preemptive cyclic executives can be constructed more efficiently than in the general case. (C) 2018 Elsevier B.V. All rights reserved.
C1 [Deutschbein, Calvin] Univ N Carolina, Chapel Hill, NC 27515 USA.
   [Fleming, Tom; Burns, Alan] Univ York, York, N Yorkshire, England.
   [Baruah, Sanjoy] Washington Univ, St Louis, MO 63130 USA.
C3 University of North Carolina; University of North Carolina Chapel Hill;
   University of York - UK; Washington University (WUSTL)
RP Baruah, S (corresponding author), Washington Univ, St Louis, MO 63130 USA.
EM cd@cs.unc.edu; tdf506@york.ac.uk; alan.burns@york.ac.uk;
   baruah@wustl.edu
RI Burns, Alan/AAF-2700-2019
OI Deutschbein, Calvin/0000-0003-1354-7200
FU NSF [CNS 1409175, CPS 1446631]; AFOSR [FA9550-14-1-0161]; ARO
   [W911NF-14-1-0499]
FX This research has been supported in parts by NSF grants CNS 1409175 and
   CPS 1446631, AFOSR grant FA9550-14-1-0161, and ARO grant
   W911NF-14-1-0499.
CR Andre J.-M., 1996, International Symposium on On-board Real-time Software ISOBRTS (ESA SP-375), P241
   [Anonymous], 1962, FLOWS NETWORKS
   Baker T. P., 1989, Real-Time Systems, V1, P7, DOI 10.1007/BF02341919
   Baker T. P., 1988, Proceedings. Real-Time Systems Symposium (IEEE Cat. No.88CH2618-7), P120, DOI 10.1109/REAL.1988.51108
   Baruah SK, 1996, ALGORITHMICA, V15, P600, DOI 10.1007/BF01940883
   Bini E, 2005, REAL-TIME SYST, V30, P129, DOI 10.1007/s11241-005-0507-9
   Burns  A., 2015, P 2015 27 EUROMICRO
   Cormen T.H., 2009, INTRO ALGORITHMS
   Epstein L, 2011, INT J PROD ECON, V133, P586, DOI 10.1016/j.ijpe.2011.04.024
   Fleming  T., 2013, P INT WORKSH MIX CRI
   Fleming T, 2016, PROCEEDINGS OF THE 24TH INTERNATIONAL CONFERENCE ON REAL-TIME NETWORKS AND SYSTEMS PROCEEDINGS (RTNS 2016), P277, DOI 10.1145/2997465.2997492
   Ford LR., 1956, CAN J MATH, V8, P399, DOI [10.4153/CJM-1956-045-5, DOI 10.4153/CJM-1956-045-5.12R]
   HORN WA, 1974, NAV RES LOG, V21, P177, DOI 10.1002/nav.3800210113
   I. Gurobi Optimization, 2016, GUROBI OPTIMIZER REF
   KARMARKAR N, 1984, COMBINATORICA, V4, P373, DOI 10.1007/BF02579150
   Karp Richard M, 1972, COMPLEXITY COMPUTER, P85, DOI DOI 10.1007/978-1-4684-2001-2_9
   KHACHIIAN LG, 1979, DOKL AKAD NAUK SSSR+, V244, P1093
   LENSTRA JK, 1990, MATH PROGRAM, V46, P259, DOI 10.1007/BF01585745
   Liu J.W.S., 2000, REAL-TIME SYST
   MCNAUGHTON R, 1959, MANAGE SCI, V6, P1, DOI 10.1287/mnsc.6.1.1
   Pop P, 1999, HARDW SOFTW CODES, P178, DOI 10.1109/HSC.1999.777428
   Ravn AndersP., 2010, Proceedings of the 8th International Workshop on Java Technologies for Real-Time and Embedded Systems. JTRES'10, P63, DOI DOI 10.1145/1850771.1850779
   SCHILD Klaus., 1998, P 13 ACM S APPL COMP, P29
   Stigge  M., 2013, P C ORG CEL A BURNS, P133
   Stigge  M., 2014, THESIS
   ULLMAN JD, 1975, J COMPUT SYST SCI, V10, P384, DOI 10.1016/S0022-0000(75)80008-0
   Yepez  J., 2006, P IEEE INT WORKSH FA
NR 27
TC 2
Z9 2
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR 1
PY 2019
VL 172
BP 102
EP 116
DI 10.1016/j.scico.2018.11.004
PG 15
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA HK8HC
UT WOS:000458229000005
OA Green Accepted, Bronze
DA 2024-07-18
ER

PT J
AU Hammad, M
   Yue, T
   Wang, S
   Ali, S
   Nygård, JF
AF Hammad, Muhammad
   Yue, Tao
   Wang, Shuai
   Ali, Shaukat
   Nygard, Jan F.
TI IOCL: An interactive tool for specifying, validating and evaluating OCL
   constraints
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE OCL constraints; Interactive tool; UML models
AB The Object Constraint Language (OCL) is commonly used for specifying additional constraints on models, in addition, to the ones enforced by the semantics of the models. However, a lot of practitioners and even researchers are reluctant in using OCL to some extent due to the lack of sufficient familiarity with OCL. To facilitate practitioners and researchers in specifying OCL constraints, we designed and developed a web-based tool called interactive OCL (iOCL) for interactively specifying constraints on a given model. The core idea behind iOCL is to present and display only relevant details (e.g., operations) of OCL to users at a given step of constraint specification process, in addition to helping modelers with its syntax. We evaluated iOCL using a real-world case study from Cancer Registry of Norway and the results showed that iOCL can significantly reduce the time required to. specify OCL constraints and decrease the possibility of making syntactic errors during the specification process. Thus, we conclude that iOCL can facilitate the process of OCL constraint specification. Interested users can try iOCL at: http://iocl.zen-tools.com/. (C) 2017 Elsevier B.V. All rights reserved.
C1 [Hammad, Muhammad; Yue, Tao; Wang, Shuai; Ali, Shaukat] Simula Res Lab, Oslo, Norway.
   [Yue, Tao] Univ Oslo, Oslo, Norway.
   [Nygard, Jan F.] Canc Registry Norway, Oslo, Norway.
C3 University of Oslo; University of Oslo
RP Yue, T (corresponding author), Simula Res Lab, Oslo, Norway.; Yue, T (corresponding author), Univ Oslo, Oslo, Norway.
EM hammad@simula.no; tao@simula.no; shuai@simula.no; shaukat@simula.no;
   Jan.Nygard@kreftregisteret.no
RI Nygård, Jan F/JLM-8879-2023; yue, tao/H-6783-2013
OI Nygård, Jan F/0000-0001-9655-7003; Yue, Tao/0000-0003-3262-5577
FU MBE-CR - RFF Hovedstaden [239063]; Zen-Configurator project
   [240024/F20]; EU [645463]; MBT4CPS [240013/070]; RCN; COST Action [CM
   5140]; H2020 - Industrial Leadership [645463] Funding Source: H2020 -
   Industrial Leadership
FX This work was supported by the MBE-CR (No. 239063) project funded by the
   RFF Hovedstaden. Tao Yue and Shaukat Ali are also supported by the
   Zen-Configurator 240024/F20 project, the EU Horizon 2020 project U-Test
   645463 (Testing Cyber-Physical Systems under Uncertainty), the MBT4CPS
   240013/070 project and the RCN funded Certus BFI. Shuai Wang is also
   supported by the RCN funded Certus SFI and COST Action CM 5140
   (ImAppNIO).
CR Ali S., PILOT EXPT ASSESS IN
   Ali S, 2013, IEEE T SOFTWARE ENG, V39, P1376, DOI 10.1109/TSE.2013.17
   Hammad M., 2016, ACM IEEE 19 INT C MO, P24
   Iqbal MZ, 2015, SOFTW SYST MODEL, V14, P1367, DOI 10.1007/s10270-014-0405-5
   Lu H, 2016, IEEE INT CONF SOFTW, P57, DOI 10.1109/ICST.2016.17
   Lu H, 2016, INFORM SOFTWARE TECH, V72, P68, DOI 10.1016/j.infsof.2015.12.004
   Petre M, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P722, DOI 10.1109/ICSE.2013.6606618
   Wang S, 2016, LECT NOTES COMPUT SC, V9764, P191, DOI 10.1007/978-3-319-42061-5_12
   Wang S, 2016, EMPIR SOFTW ENG, V21, P1586, DOI 10.1007/s10664-014-9345-5
NR 9
TC 5
Z9 5
U1 0
U2 1
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 1
PY 2017
VL 149
SI SI
BP 3
EP 8
DI 10.1016/j.scico.2017.07.006
PG 6
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA FL0GP
UT WOS:000413889900002
OA Bronze
DA 2024-07-18
ER

PT J
AU Alqahtani, SS
   Eghan, EE
   Rilling, J
AF Alqahtani, Sultan S.
   Eghan, Ellis E.
   Rilling, Juergen
TI Tracing known security vulnerabilities in software repositories - A
   Semantic Web enabled modeling approach
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Semantic knowledge modelling; Semantic web; Software security
   vulnerabilities; Software traceability; Impact analysis
ID ONTOLOGY
AB The introduction of the Internet has revolutionized not only our society but also transformed the software industry, with knowledge and information sharing becoming a central part of software development processes. The resulting globalization of the software industry has not only increased software reuse, but also introduced new challenges. Among the challenges, arising from the knowledge sharing is Information Security, which has emerged to become a major threat to the software development community, since not only source code but also its vulnerabilities are shared across project boundaries. Developers are unaware of such security vulnerabilities in their projects, often until a vulnerability is either exploited by attackers or made publicly available by independent security advisory databases. In this research, we present a modeling approach, which takes advantage of Semantic Web technologies, to establish traceability links between security advisory repositories and other software repositories. More specifically, we establish a unified ontological representation, which supports bi-directional traceability links between knowledge captured in software build repositories and specialized vulnerability database. These repositories can be considered trusted information silos that are typically not directly linked to other resources, such as source code repositories containing the reported instances of these problems. The novelty of our approach is that it allows us to overcome some of these traditional information silos and transform them into information hubs, which promote sharing of knowledge across repository boundaries. We conducted several experiments to illustrate the applicability of our approach by tracing existing vulnerabilities to projects which might directly or indirectly be affected by vulnerabilities inherited from other projects and libraries. (C) 2016 Elsevier B.V. All rights reserved.
EM s_alqaht@encs.concordia.ca; e_eghan@encs.concordia.ca;
   juergen.rilling@concordia.ca
OI Eghan, Ellis E./0000-0003-0186-9173; Saud, Sultan/0000-0001-9399-1971
CR Aasman J., 2006, ALLEGRO GRAPH RDF TR
   [Anonymous], 2003, KYBERNETES
   [Anonymous], 2008, MAVEN DEFINITIVE GUI
   [Anonymous], 2009, OWL 2 WEB ONT LANG D
   [Anonymous], 2014, WORKING C MINING SOF, DOI [10.1145/2597073.2597123, DOI 10.1145/2597073.2597123]
   [Anonymous], 2000, P C FUTURE SOFTWARE, DOI DOI 10.1145/336512.336559
   Baader R, 2005, LECT NOTES ARTIF INT, V2605, P228
   Ballim Y., 1991, ARTIFICIAL BELIEVERS
   Berners-Lee T, 2001, SCI AM, V284, P34, DOI 10.1038/scientificamerican0501-34
   Bizer A., 2004, P 3 INT SEM WEB C
   Bollacker K., 2008, P 2008 ACM SIGMOD IN, P1247, DOI 10.1145/1376616.1376746
   Cadariu M, 2015, 2015 22ND INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER), P516, DOI 10.1109/SANER.2015.7081868
   Chabot S, 2010, J WEB LIBRARIANSH, V4, P97, DOI 10.1080/19322900903565408
   Coppolino L, 2009, LECT NOTES COMPUT SC, V5860, P192, DOI 10.1007/978-3-642-10265-3_18
   DEVANBU P, 1991, COMMUN ACM, V34, P34, DOI 10.1145/103167.103172
   diaeresis>tze Hinrich Schu<spacing, 2008, INTRO INFORM RETRIEV, V39
   Dolstra E, 2008, ACM SIGPLAN NOTICES, V43, P367, DOI 10.1145/1411203.1411255
   Gegick Michael, 2010, Proceedings of the 2010 7th IEEE Working Conference on Mining Software Repositories (MSR 2010), P11, DOI 10.1109/MSR.2010.5463340
   Gerth J., 2015, P 10 ANN CYB INF SEC, P1, DOI DOI 10.1145/2746266.2746278
   Happel H., 2006, SEKE, P349
   Herzog A, 2007, INT J INF SECUR PRIV, V1, P1, DOI 10.4018/jisp.2007100101
   Hovemeyer D, 2004, ACM SIGPLAN NOTICES, V39, P92, DOI 10.1145/1052883.1052895
   Jeremy Long S.S., 2015, OWASP DEPENDENCY CHE
   JONES C, 1994, IEEE SOFTWARE, V11, P17, DOI 10.1109/52.329397
   Joshi A, 2013, IEEE INT C SEMANT CO, P252, DOI 10.1109/ICSC.2013.50
   Khadilkar V., 2010, SEMATIC WEB IMPLEMEN
   Kiefer C., 2007, 4 INT WORK MIN SOFTW
   Lal R., 2013, INFORM EXTRACTION CY
   Laurini R, 2007, STUD COMPUT INTELL, V61, P27
   Lee T.B., WORKFLOWONTOLOGY
   Marcio K.M. de O., 2003, J UNIVERS COMPUT SCI, V9, P641
   Martin B, 2010, IEEE INT C SOL DIEL
   Mendes Pablo N, 2011, P 7 INT C SEM SYST, P1, DOI [DOI 10.1145/2063518.2063519, 10.1145/2063518.2063519]
   Mileva YM, 2009, IWPSE-EVOL 09: ERCIM WORKSHOP ON SOFTWARE EVOLUTION (EVOL) AND INTERNATIONAL WORKSHOP ON PRINCIPLES OF SOFTWARE EVOLUTION (IWPSE), P57
   Mitropoulos D., 2012, 2012 16th Panhellenic Conference on Informatics (PCI 2012), P117, DOI 10.1109/PCi.2012.15
   More S., 2012, 2012 IEEE CS Security and Privacy Workshops (SPW 2012), P75, DOI 10.1109/SPW.2012.26
   Mulwad V., 2011, 2011 IEEE/WIC/ACM International Joint Conferences on Web Intelligence (WI) and Intelligent Agent Technologies, P257, DOI 10.1109/WI-IAT.2011.26
   Neuhaus S, 2007, CCS'07: PROCEEDINGS OF THE 14TH ACM CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P529
   Noy NF, 2004, SIGMOD REC, V33, P65, DOI 10.1145/1041410.1041421
   Oliveto Rocco, 2007, 2007 IEEE International Conference on Software Maintenance, P485, DOI 10.1109/ICSM.2007.4362664
   Osuna E, 1997, NEURAL NETWORKS FOR SIGNAL PROCESSING VII, P276, DOI 10.1109/NNSP.1997.622408
   Otero-Cerdeira L, 2015, EXPERT SYST APPL, V42, P949, DOI 10.1016/j.eswa.2014.08.032
   Pletea D., 2014, 11 WORKING C MSR, P348, DOI [10.1145/2597073.2597117, DOI 10.1145/2597073.2597117]
   Ruiz F, 2004, INT J SOFTW ENG KNOW, V14, P323, DOI 10.1142/S0218194004001646
   Rutar N, 2004, 15TH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P245, DOI 10.1109/ISSRE.2004.1
   Saini V., 2014, P 11 WORK C MIN SOFT, P416, DOI DOI 10.1145/2597073.2597134
   Studer R, 1998, DATA KNOWL ENG, V25, P161, DOI 10.1016/S0169-023X(97)00056-6
   SUCHANEK Fabian M., 2007, 16 INT WORLD WID WEB, V16, P697, DOI DOI 10.1145/1242572.1242667
   Syed Z.S., 2008, WIKITOLOGY USING WIK
   Undercoffer J, 2003, LECT NOTES COMPUT SC, V2820, P113
   Undercoffer J., 2004, Proceedings of the IJCAI Workshop on Ontologies and Distributed Systems, P47
   Vermesan P., 2013, OVIDIU FRIESS INTERN
   Vorobiev A., 2006, 2 INT C SEM KNOWL GR
   Williams J., 2012, The unfortunate reality of insecure libraries, P1
   Würsch M, 2012, COMPUTING, V94, P857, DOI 10.1007/s00607-012-0204-1
   Yang Q, 2006, INT J INF TECH DECIS, V5, P597, DOI 10.1142/S0219622006002258
NR 56
TC 24
Z9 26
U1 1
U2 22
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 1
PY 2016
VL 121
SI SI
BP 153
EP 175
DI 10.1016/j.scico.2016.01.005
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DH6YU
UT WOS:000372938800009
OA Bronze
DA 2024-07-18
ER

PT J
AU Gaboardi, M
   Péchoux, R
AF Gaboardi, Marco
   Pechoux, Romain
TI On bounding space usage of streams using interpretation analysis
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT Foundational Practical Aspects Resource Analysis (FOPARA)
CY MAY 19, 2011
CL Madrid, SPAIN
DE Stream programs; Interpretations; Program space usage; Lazy languages;
   Implicit computational complexity
ID LAMBDA-CALCULUS; PRODUCTIVITY; DEFINITIONS; TERMINATION
AB Interpretation methods are important tools in implicit computational complexity. They have been proved particularly useful to statically analyze and to limit the complexity of programs. However, most of these studies have been so far applied in the context of term rewriting systems over finite data.
   In this paper, we show how interpretations can also be used to study properties of lazy first-order functional programs over streams. In particular, we provide some interpretation criteria useful to ensure two kinds of stream properties: space upper bounds and input/output upper bounds. Our space upper bounds criteria ensure global and local upper bounds on the size of each output stream element expressed in terms of the maximal size of the input stream elements. The input/output upper bounds criteria consider instead the relations between the number of elements read from the input stream and the number of elements produced on the output stream.
   This contribution can be seen as a first step in the development of a methodology aiming at using interpretation properties to ensure space safety properties of programs working on streams. (C) 2015 Elsevier BM. All rights reserved.
C1 [Gaboardi, Marco] Harvard Univ, Cambridge, MA 02138 USA.
   [Gaboardi, Marco] Univ Dundee, Dundee DD1 4HN, Scotland.
   [Pechoux, Romain] Univ Lorraine, INRIA Project Carte, Loria, UMR 7503, Nancy, France.
C3 Harvard University; University of Dundee; Universite de Lorraine
RP Péchoux, R (corresponding author), Univ Lorraine, INRIA Project Carte, Loria, UMR 7503, Nancy, France.
EM m.gaboardi@dundee.ac.uk; pechoux@loria.fr
RI Gaboardi, Marco/JPX-6816-2023
OI Pechoux, Romain/0000-0003-0601-5425
FU European Community's Seventh Framework Programme (FP7) [272487]; project
   "ELICA" [ANR-14-CE25-0005]; project MIUR-PRIN'07 "CONCERTO"; project
   INRIA Associated Team "CRISTAL"
FX Work partially supported by the projects ANR-14-CE25-0005 "ELICA",
   MIUR-PRIN'07 "CONCERTO" and INRIA Associated Team "CRISTAL".; The
   research leading to these results has received funding from the European
   Community's Seventh Framework Programme (FP7/2007-2013) under grant
   agreement no 272487.
CR ABRAMSKY S, 1993, INFORM COMPUT, V105, P159, DOI 10.1006/inco.1993.1044
   Amadio R., 2005, FUNDAM INFORM, V65
   [Anonymous], 2012, LIPICS, DOI [10.4230/LIPICS.CSL.2012.62, DOI 10.4230/LIPICS.CSL.2012.62]
   Ariola Z. M., 1997, J FUNCTIONAL PROGRAM, V7, P265
   Bird R., 1988, INTRO FUNCTIONAL PRO
   Bonfante G, 2001, J FUNCT PROGRAM, V11, P33, DOI 10.1017/S0956796800003877
   Bonfante G., 2005, LCC2005
   Bonfante G., 2001, LECT NOTES COMPUT SC, V2244
   Bonfante G., 2011, THEOR COMPUT SCI
   Burrell M.J., 2009, 10 INT WORKSH LOG CO
   Cook S., 1989, Proceedings of the Twenty First Annual ACM Symposium on Theory of Computing, P107, DOI 10.1145/73007.73017
   Coquand T., 1993, LECT NOTES COMPUTER, P62, DOI DOI 10.1007/3-540-58085-9
   Cousot Patrick, 1977, P 4 ACM S PRINC PROG, P238, DOI [10.1145/512950.512973, DOI 10.1145/512950.512973]
   DIJKSTRA EW, 1980, EWD749
   Endrullis J, 2007, LECT NOTES COMPUT SC, V4639, P274
   Feree H., 2010, ISAAC 10, P291
   FRANKAU S, 2003, P IEEE HICSS 36
   Gaboardi M, 2010, LECT NOTES COMPUT SC, V6324, P51
   Gaboardi M, 2009, LECT NOTES COMPUT SC, V5771, P271, DOI 10.1007/978-3-642-04027-6_21
   Gordon A., 1999, THEOR COMPUT SCI, V228
   Henderson Peter, 1976, P 3 ACM SIGACT SIGPL, P95, DOI DOI 10.1145/800168.811543
   Hughes J., 1996, P ACM POPL 96, P410
   Kennaway J., 1989, LNCS, V488, P1
   Kennaway JR, 1997, THEOR COMPUT SCI, V175, P93, DOI 10.1016/S0304-3975(96)00171-5
   Korp M, 2009, LECT NOTES COMPUT SC, V5595, P295, DOI 10.1007/978-3-642-02348-4_21
   Lankford DallasS., 1979, PROVING TERM REWRITI
   Launchbury John., 1993, Proceedings of the 20th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages. POPL'93. New York, NY, P144, DOI DOI 10.1145/158511.158618
   Leivant D., 1995, Logic and Computational Complexity. International Workshop LCC '94. Selected Papers, P177
   Lucas S, 2005, RAIRO-THEOR INF APPL, V39, P547, DOI 10.1051/ita:2005029
   Manna Z., 1970, 3RD P HAW INT C SYST, P789
   Marion JY, 2009, ACM T COMPUT LOG, V10, DOI 10.1145/1555746.1555751
   Ong C.-H.L., 1992, ICALP, P487
   Péchoux R, 2013, THEOR COMPUT SCI, V467, P30, DOI 10.1016/j.tcs.2012.11.003
   Pitts A., 1997, SEMANTICS LOGICS COM
   Ramyaa R., 2012, EPTCS, V75, P1
   Ramyaa R, 2011, ELECTRON NOTES THEOR, V276, P247, DOI 10.1016/j.entcs.2011.09.025
   Shkaravska O., 2009, ICISR09003 RADB U NI
   SIJTSMA BA, 1989, ACM T PROGR LANG SYS, V11, P633, DOI 10.1145/69558.69563
   Stephens R, 1997, ACTA INFORM, V34, P491, DOI 10.1007/s002360050095
   Weihrauch K., 1997, LNCS, V1337, P185
NR 40
TC 1
Z9 1
U1 0
U2 1
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 1
PY 2015
VL 111
SI SI
BP 395
EP 425
DI 10.1016/j.scico.2015.05.004
PN 3
PG 31
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA DB5LY
UT WOS:000368556800003
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Baranov, E
   Bliudze, S
AF Baranov, Eduard
   Bliudze, Simon
TI Offer semantics: Achieving compositionality, flattening and full
   expressiveness for the glue operators in BIP
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Component-based design; BIP; Glue operators; Interaction model; Priority
   model; Compositionality; Flattening; Modularity; Algebra of connectors;
   Connector synthesis
ID COMPONENT MODEL; CONNECTORS; ALGEBRA; REO
AB Based on a concise but comprehensive overview of some fundamental properties required from component-based frameworks, namely compositionality, incrementality, flattening, modularity and expressiveness, we review three modifications of the semantics of glue operators in the Behaviour-Interaction-Priority (BIP) framework. We provide theoretical results and examples illustrating the degree to which the three semantics meet these requirements. In particular, we show that the most recent semantics, based on the offer predicate is the only one that satisfies all of them.
   The classical and offer semantics are not comparable: there are systems that can be assembled in the classical semantics, but not in the offer one. We present a strict Characterisation of the behaviour hierarchy determining the conditions, under which systems in the classical semantics can be transposed into the offer semantics: directly, with minor modifications, by introducing a new type of synchronisation or cannot be transposed at all.
   The offer semantics allows us to extend the algebras, which are used to model glue operators in BIP, to encompass priorities. This extension uses the Algebra of Causal Interaction Trees, T(P), as a pivot: existing transformations automatically provide the extensions for the Algebra of Connectors. We,then extend the axiomatisation of T(P), since the equivalence induced by the new operational semantics is weaker than that induced by the interaction semantics. This extension leads to canonical normal forms for all structures and to a simplification of the algorithm for the synthesis of connectors from Boolean coordination constraints. (C) 2015 Elsevier B.V. All rights reserved.
C1 [Baranov, Eduard; Bliudze, Simon] Ecole Polytech Fed Lausanne, Rigorous Syst Design Lab, Stn 14, CH-1015 Lausanne, Switzerland.
C3 Swiss Federal Institutes of Technology Domain; Ecole Polytechnique
   Federale de Lausanne
RP Baranov, E (corresponding author), Ecole Polytech Fed Lausanne, Rigorous Syst Design Lab, Stn 14, CH-1015 Lausanne, Switzerland.
EM Eduard.Baranov@epfl.ch; Simon.Bliudze@epfl.ch
RI Bliudze, Simon/ABD-8558-2021
OI Bliudze, Simon/0000-0002-7900-5271; Baranov, Eduard/0000-0002-7357-705X
CR [Anonymous], 1989, PRENTICE HALL INT SE
   [Anonymous], 1981, Lecture Notes in Computer Science, DOI [10.1007/BFb0017309, DOI 10.1007/BFB0017309]
   [Anonymous], P 10 INT C EMB SOFTW
   Arbab F, 2005, LECT NOTES COMPUT SC, V3454, P236
   Arbab F, 2008, LECT NOTES COMPUT SC, V5282, P114, DOI 10.1007/978-3-540-87891-9_8
   Baier C, 2006, SCI COMPUT PROGRAM, V61, P75, DOI 10.1016/j.scico.2005.10.008
   Baranov E, 2013, ELECTRON P THEOR COM, P20, DOI 10.4204/EPTCS.131.3
   Basu A, 2006, I C SOFTW ENG FORM M, P3
   Bliudze Simon, 2011, Software Composition. Proceedings of the 10th International Conference, SC 2011, P51, DOI 10.1007/978-3-642-22045-6_4
   Bliudze S., 2012, EPTCS, V104, P48
   Bliudze S, 2008, LECT NOTES COMPUT SC, V5201, P508, DOI 10.1007/978-3-540-85361-9_39
   Bliudze S, 2008, IEEE T COMPUT, V57, P1315, DOI 10.1109/TC.2008.26
   Bliudze S, 2010, FORM METHOD SYST DES, V36, P167, DOI 10.1007/s10703-010-0091-z
   Bliudze Simon., 2007, Proceedings of the 7th ACM/IEEE International Conference on Embedded Software, EMSOFT '07, P11, DOI DOI 10.1145/1289927.1289935
   BLOOM B, 1989, THESIS MIT
   Bonsangue M, 2012, SCI COMPUT PROGRAM, V77, P685, DOI 10.1016/j.scico.2011.01.006
   Bozga Marius, 2012, Software Composition. Proceedings 11th International Conference, SC 2012, P1, DOI 10.1007/978-3-642-30564-1_1
   Bozga M, 2009, INT SYM IND EMBED, P152, DOI 10.1109/SIES.2009.5196211
   Bruneton E, 2006, SOFTWARE PRACT EXPER, V36, P1257, DOI 10.1002/spe.767
   Bruni Roberto, 2012, Perspectives of System Informatics. 8th International Ershov Informatics Conference, PSI 2011. Revised Selected Papers, P19, DOI 10.1007/978-3-642-29709-0_2
   Bruni R, 2006, THEOR COMPUT SCI, V366, P98, DOI 10.1016/j.tcs.2006.07.005
   Bures T, 2006, FOURTH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING RESEARCH, MANAGEMENT AND APPLICATIONS, PROCEEDINGS, P40, DOI 10.1109/SERA.2006.62
   Clarke D, 2006, ELECTRON NOTES THEOR, V154, P101, DOI 10.1016/j.entcs.2005.12.035
   Clarke D, 2009, ELECTRON NOTES THEOR, V229, P43, DOI 10.1016/j.entcs.2009.06.028
   Eker J, 2003, P IEEE, V91, P127, DOI 10.1109/JPROC.2002.805829
   Gössler G, 2003, LECT NOTES COMPUT SC, V3188, P314
   Hoare C., 1985, Prentice-Hall International Series in Computer Science
   Honda K, 1998, LECT NOTES COMPUT SC, V1381, P122, DOI 10.1007/BFb0053567
   Inverardi P, 2001, 16TH ANNUAL INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING (ASE 2001), PROCEEDINGS, P174, DOI 10.1109/ASE.2001.989803
   Jongmans SSTQ, 2011, LECT NOTES COMPUT SC, V6721, P31, DOI 10.1007/978-3-642-21464-6_3
   Liu ZM, 2010, LECT NOTES COMPUT SC, V5961, P62
   MILNER R, 1992, LECT NOTES COMPUT SC, V623, P685
   Plotkin G.D., 1981, FN19 DAIMI U AARH
   Pneuli A., 1990, Proceedings. 31st Annual Symposium on Foundations of Computer Science (Cat. No.90CH2925-6), P746, DOI 10.1109/FSCS.1990.89597
   Rutten JJMM, 2000, THEOR COMPUT SCI, V249, P3, DOI 10.1016/S0304-3975(00)00056-6
   Sifakis J, 2005, SEFM 2005: THIRD IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING AND FORMAL METHODS, PROCEEDINGS, P293
   Sobocinski P, 2009, ELECTRON PROC THEOR, P87, DOI 10.4204/EPTCS.12.6
   van Ommering R, 2000, COMPUTER, V33, P78, DOI 10.1109/2.825699
NR 38
TC 3
Z9 3
U1 0
U2 8
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 1
PY 2015
VL 109
BP 2
EP 35
DI 10.1016/j.scico.2015.05.011
PG 34
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CN5LD
UT WOS:000358469900002
OA Green Published, Green Submitted
DA 2024-07-18
ER

PT J
AU Midtgaard, J
   Dimovski, AS
   Brabrand, C
   Wasowski, A
AF Midtgaard, Jan
   Dimovski, Aleksandar S.
   Brabrand, Claus
   Wasowski, Andrzej
TI Systematic derivation of correct variability-aware program analyses
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Software Product Lines; Software variability; Verification; Static
   analysis; Abstract interpretation
AB A recent line of work lifts particular verification and analysis methods to Software Product Lines (SPL). In an effort to generalize such case-by-case approaches, we develop a systematic methodology for lifting single-program analyses to SPLs using abstract interpretation. Abstract interpretation is a classical framework for deriving static analyses in a compositional, step-by-step manner. We show how to take an analysis expressed as an abstract interpretation and lift each of the abstract interpretation steps to a family of programs (SPL). This includes schemes for lifting domain types, and combinators for lifting analyses and Galois connections. We prove that for analyses developed using our method, the soundness of lifting follows by construction. The resulting variational abstract interpretation is a conceptual framework for understanding, deriving, and validating static analyses for SPLs. Then we show how to derive the corresponding variational dataflow equations for an example static analysis, a constant propagation analysis. We also describe how to approximate variability by applying variability-aware abstractions to SPL analysis. Finally, we discuss how to efficiently implement our method and present some evaluation results. (C) 2015 Elsevier B.V. All rights reserved.
C1 [Midtgaard, Jan] Tech Univ Denmark, DTU Compute, DK-2800 Lyngby, Denmark.
   [Dimovski, Aleksandar S.; Brabrand, Claus; Wasowski, Andrzej] IT Univ Copenhagen, DK-2300 Copenhagen S, Denmark.
C3 Technical University of Denmark; IT University Copenhagen
RP Brabrand, C (corresponding author), IT Univ Copenhagen, DK-2300 Copenhagen S, Denmark.
EM brabrand@itu.dk
RI Dimovski, Aleksandar/ABC-8474-2021; Midtgaard, Jan/P-1007-2018;
   Dimovski, Aleksandar/V-8590-2019
OI Midtgaard, Jan/0000-0002-6506-5468; Dimovski,
   Aleksandar/0000-0002-3601-2631; Wasowski, Andrzej/0000-0003-0532-2685
FU Danish Council for Independent Research under the Sapere Aude scheme,
   project VARIETE [0602-02327B]
FX Supported by The Danish Council for Independent Research (grant no.
   0602-02327B) under the Sapere Aude scheme, project VARIETE.
CR [Anonymous], COLT PROJ OP SOURC L
   [Anonymous], 1999, NATO ASI SERIES F
   [Anonymous], 2012, ACM SIGOPS OPER SYST, DOI [DOI 10.1145/2094091.2094095, 10.1145/2039239.2039242]
   [Anonymous], 2013, P INT C GEN PROGR CO
   [Anonymous], 2000, Generative programming: methods, tools, and applications
   Apel S., 2011, ASE 11
   Apel S, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P482, DOI 10.1109/ICSE.2013.6606594
   Apel S, 2010, AUTOMAT SOFTW ENG, V17, P251, DOI 10.1007/s10515-010-0066-8
   Batory D, 2005, LECT NOTES COMPUT SC, V3714, P7
   Bodden E, 2013, ACM SIGPLAN NOTICES, V48, P355, DOI 10.1145/2499370.2491976
   Brabrand C, 2013, LECT NOTES COMPUT SC, V7800, P73, DOI 10.1007/978-3-642-36964-3_3
   Chen S, 2014, LECT NOTES COMPUT SC, V8616, P39, DOI 10.1007/978-3-662-44371-2_3
   Choi W, 2011, ACM SIGPLAN NOTICES, V46, P81, DOI 10.1145/1925844.1926397
   Classen A, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P321, DOI 10.1145/1985793.1985838
   Cousot P., 1997, Conference Record of POPL '97: The 24th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P316, DOI 10.1145/263699.263744
   Cousot P., 2000, Conference Record of POPL'00: 27th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages. Papers Presented at the Symposium, P12, DOI 10.1145/325694.325699
   COUSOT P, 1992, J LOGIC PROGRAM, V13, P103, DOI 10.1016/0743-1066(92)90030-7
   Cousot P., 1999, Automated Software Engineering, V6, P69, DOI 10.1023/A:1008649901864
   Cousot P., 1979, 6 ACM S PRINCIPLES P, P269, DOI DOI 10.1145/567752.567778
   Czarnecki K., 2006, GPCE, P211
   Czarnecki Krzysztof., 2012, P 6 INT WORKSHOP VAR, P173, DOI DOI 10.1145/2110147.2110167
   Erwig M, 2011, ACM T SOFTW ENG METH, V21, DOI 10.1145/2063239.2063245
   Garrido A, 2005, PROC IEEE INT CONF S, P379
   Garrido A, 2003, 18TH IEEE INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING, PROCEEDINGS, P323, DOI 10.1109/ASE.2003.1240330
   Gruler A, 2008, LECT NOTES COMPUT SC, V5051, P113, DOI 10.1007/978-3-540-68863-1_8
   Guilbaud D., 2001, WAPATV 01 ICSE 01 TO
   Kästner C, 2012, ACM T SOFTW ENG METH, V21, DOI 10.1145/2211616.2211617
   Kästner C, 2011, ACM SIGPLAN NOTICES, V46, P805, DOI 10.1145/2076021.2048128
   Kang K. C., 1990, Technical Report
   Kastner Christian, 2008, 2008 23rd IEEE/ACM International Conference on Automated Software Engineering, P258, DOI 10.1109/ASE.2008.36
   Kastner C., 2010, THESIS U MAGDEBURG G
   Kastner C., 2012, Proc. of FOSD'12, P1
   Midtgaard J., 2014, TR2014170 IT U COP
   Midtgaard J., 2011, LNCS, V7460, P352
   Midtgaard J., 2014, Proceedings of the 13th International Conference on Modularity, P181, DOI DOI 10.1145/2577080.2577091
   Midtgaard J, 2008, LECT NOTES COMPUT SC, V5079, P347
   Nielson F., 1999, Principles of Program Analysis
   Northrop L., 2001, SOFTWARE PRODUCT LIN
   Post Hendrik, 2008, 2008 23rd IEEE/ACM International Conference on Automated Software Engineering, P347, DOI 10.1109/ASE.2008.45
   Reps T., 1995, Conference Record of POPL'95: 22nd ACM SIGPLAN-SIGACT Symposium Principles of Programming Languages, P49, DOI 10.1145/199448.199462
   Sagiv M., 2007, CLASS NOTES PROGRAM
   Sergey Ilya, 2012, Mathematics of Program Construction. Proceedings 11th International Conference, MPC 2012, P132, DOI 10.1007/978-3-642-31113-0_8
   Tartler R, 2011, EUROSYS 11: PROCEEDINGS OF THE EUROSYS 2011 CONFERENCE, P47
   Thaker Sahil., 2007, P 6 INT C GENERATIVE, P95
   Thales F., 2012, PROP COMM VAR LANG C
   Thüm T, 2014, ACM COMPUT SURV, V47, DOI 10.1145/2580950
   Vallee-Rai R., 1999, Proceedings of the 1999 Conference of the Centre for Advanced Studies on Collaborative Research, CASCON'99, page, P13
   Winskel G., 1993, FDN COMPUTING SERIES
NR 48
TC 35
Z9 36
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUL 1
PY 2015
VL 105
BP 145
EP 170
DI 10.1016/j.scico.2015.04.005
PG 26
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CK4MT
UT WOS:000356198600008
DA 2024-07-18
ER

PT J
AU Salvaneschi, G
   Ghezzi, C
   Pradella, M
AF Salvaneschi, Guido
   Ghezzi, Carlo
   Pradella, Matteo
TI ContextErlang: A language for distributed context-aware self-adaptive
   applications
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Context-oriented programming; Context; Self-adaptive software;
   Concurrency; Distribution
ID SEMANTICS
AB Self-adaptive software modifies its behavior at run time to satisfy changing requirements in a dynamic environment. Context-oriented programming (COP) has been recently proposed as a specialized programming paradigm for context-aware and adaptive systems. COP mostly focuses on run time adaptation of the application's behavior by supporting modular descriptions of behavioral variations. However, self-adaptive applications must satisfy additional requirements, such as distribution and concurrency, support for unforeseen changes and enforcement of correct behavior in the presence of dynamic change. Addressing these issues at the language level requires a holistic design that covers all aspects and takes into account the possibly cumbersome interaction of those features, for example concurrency and dynamic change.
   We present CONTEXTERLANG, a COP programming language in which adaptive abstractions are seamlessly integrated with distribution and concurrency. We define CONTEXTERLANG's formal semantics, validated through an executable prototype, and we show how it supports formal proofs that the language design ensures satisfaction of certain safety requirements. We provide empirical evidence that CONTEXTERLANG is an effective solution through case studies and a performance assessment. We also show how the same design principles that lead to the development of CONTEXTERLANG can be followed to systematically design contextual extensions of other languages. A concrete example is presented concerning CONTEXTSCALA. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Salvaneschi, Guido] Tech Univ Darmstadt, Software Technol Grp, D-64289 Darmstadt, Germany.
   [Ghezzi, Carlo; Pradella, Matteo] Politecn Milan, DEIB, DEEPSE Grp, I-20133 Milan, Italy.
C3 Technical University of Darmstadt; Polytechnic University of Milan
RP Salvaneschi, G (corresponding author), Tech Univ Darmstadt, Software Technol Grp, Hsch Str 10, D-64289 Darmstadt, Germany.
EM salvaneschi@st.informatik.tu-darmstadt.de; carlo.ghezzi@polimi.it;
   matteo.pradella@polimi.it
RI Pradella, Matteo/ABF-5509-2020
OI Pradella, Matteo/0000-0003-3039-1084; Salvaneschi,
   Guido/0000-0002-9324-8894
FU European Community's IDEAS-ERC Programme [227977]; German Federal
   Ministry of Education and Research (Bundesministerium fur Bildung und
   Forschung, BMBF) [01IC12S01V]; European Research Council (ERC) [227977]
   Funding Source: European Research Council (ERC)
FX This research has been partially funded by the European Community's
   IDEAS-ERC Programme, Project 227977 (SMSCom) and by the German Federal
   Ministry of Education and Research (Bundesministerium fur Bildung und
   Forschung, BMBF) under grant No. 01IC12S01V (Sinnodium).
CR [Anonymous], 2007, LECT NOTES COMPUTER
   [Anonymous], 2003, The Spin Model Checker: Primer and Reference Manual
   Appeltauer Malte, 2011, Information and Media Technologies, V6, P399
   Appeltauer M., 2010, LNCS, V6144
   Appeltauer M., 2010, COP 10
   Appeltauer Malte, 2009, P 1 ACM INT WORKSHOP, P1, DOI DOI 10.1145/1562112.1562118
   Batory D, 2003, PROC INT CONF SOFTW, P187, DOI 10.1109/ICSE.2003.1201199
   BRACHA G, 1990, SIGPLAN NOTICES, V25, P303, DOI 10.1145/97946.97982
   Bruneton E, 2006, SOFTWARE PRACT EXPER, V36, P1257, DOI 10.1002/spe.767
   Clarke Dave, 2009, INT WORKSH CONT OR P, DOI 10.1145/1562112.1562122
   Costanza P., 2007, SAC 07
   Costanza P., 2005, P 2005 S DYN LANG DL
   Costanza P., 2008, P 12 INT C SOFTW PRO, P9
   de Boer FS, 2007, LECT NOTES COMPUT SC, V4421, P316
   Ducasse S, 2006, ACM T PROGR LANG SYS, V28, P331, DOI 10.1145/1119479.1119483
   EKER S, 2002, ELECT NOTES THEORETI, V71
   FELLEISEN M, 1992, THEOR COMPUT SCI, V103, P235, DOI 10.1016/0304-3975(92)90014-7
   Felleisen M., 2009, Semantics Engineering with PLT Redex
   Flatt Matthew., 1999, FORMAL SYNTAX SEMANT, V1523, P241, DOI [10.1007/3-540-48737-9_7, DOI 10.1007/3-540-48737-9_7]
   Garlan D, 2004, COMPUTER, V37, P46, DOI 10.1109/MC.2004.175
   Gasiunas Vaidas, 2011, P 10 INT C ASP OR SO, P227, DOI 10.1145/1960275.1960303
   Ghezzi C., 2010, P 2 INT WORKSH CONT
   Ghezzi C., 2010, SEAMS
   Gonzalez S., 2007, P DYN LANG S, P77
   Gonzalez S., 2010, LECT NOTES COMPUTER
   HAUPT M, 2004, LNCS, V3263
   Hirschfeld R., 2011, Proceedings of the 10th International Workshop on Foundations of Aspect-Oriented Languages, FOAL'11, page, P19, DOI DOI 10.1145/1960510.1960515
   Hirschfeld R, 2008, J OBJECT TECHNOL, V7, P125, DOI 10.5381/jot.2008.7.3.a4
   Igarashi A., ACM T PROGRAMMING LA, P132
   Igarashi A., 2012, P WORKSH FDN OBJ OR
   Kephart JO, 2003, COMPUTER, V36, P41, DOI 10.1109/MC.2003.1160055
   Kiczales G., 2001, ECOOP 2001 - Object-Oriented Programming. 15th European Conference. Proceedings (Lecture Notes in Computer Science Vol.2072), P327
   Kramer J, 2007, FOSE 2007: FUTURE OF SOFTWARE ENGINEERING, P259, DOI 10.1109/FOSE.2007.19
   Lincke J, 2011, SCI COMPUT PROGRAM, V76, P1194, DOI 10.1016/j.scico.2010.11.013
   Logan M., 2010, Erlang and OTP in Action
   McKinley PK, 2004, COMPUTER, V37, P56, DOI 10.1109/MC.2004.48
   Notkin D., 1993, LNCS, V742
   Oreizy P, 1998, PROC INT CONF SOFTW, P177, DOI 10.1109/ICSE.1998.671114
   Ostermann K, 2002, LECT NOTES COMPUT SC, V2374, P89
   Pawlak R., 2004, JAC ASPECT BASED DIS
   Pawlak Renaud., 2001, LECT NOTES COMPUTER, V2192, P1, DOI DOI 10.1007/3-540-45429-2_1
   POPOVICI A, 2002, P 1 INT C ASP OR SOF
   POPOVICI A., 2002, P 1 INT C ASPECT ORI, P141
   Popovici Andrei., 2003, AOSD 03, P100
   Pradel M., 2008, INT C SOFTW DAT TECH
   Rajan H, 2008, LECT NOTES COMPUT SC, V5142, P155, DOI 10.1007/978-3-540-70592-5_8
   Salehie M, 2009, ACM T AUTON ADAP SYS, V4, DOI 10.1145/1516533.1516538
   Salvaneschi G., 2011, COP 11
   Salvaneschi G, 2013, ACM T AUTON ADAP SYS, V8, DOI 10.1145/2491465.2491466
   Salvaneschi G, 2012, J SYST SOFTWARE, V85, P1801, DOI 10.1016/j.jss.2012.03.024
   Salvaneschi Guido, 2012, AOSD 12 P 11 ANN INT, P191, DOI [10.1145/2162049.2162072, DOI 10.1145/2162049.2162072]
   Salvaneschi Guido, 2011, CORR
   Schäfer J, 2010, LECT NOTES COMPUT SC, V6183, P275, DOI 10.1007/978-3-642-14107-2_13
   Schippers H., INT WORKSH CONT OR P
   Schippers H, 2008, ACM SIGPLAN NOTICES, V43, P525, DOI 10.1145/1449955.1449806
   Serbanuta TF, 2010, LECT NOTES COMPUT SC, V6381, P104, DOI 10.1007/978-3-642-16310-4_8
   Serbanuta TF, 2009, INFORM COMPUT, V207, P305, DOI 10.1016/j.ic.2008.03.026
   Smaragdakis Y., 1998, ECOOP'98 - Object-Oriented Programming. 12th European Conference. Proceedings, P550, DOI 10.1007/BFb0054107
   Smith R. B., 1996, Theory and Practice of Object Systems, V2, P161, DOI 10.1002/(SICI)1096-9942(1996)2:3<161::AID-TAPO3>3.0.CO;2-Z
   Steimann F, 2000, DATA KNOWL ENG, V35, P83, DOI 10.1016/S0169-023X(00)00023-9
   Taylor RN, 2009, 2009 JOINT WORKING IEEE/IFIP CONFERENCE ON SOFTWARE ARCHITECTURE AND EUROPEAN CONFERENCE ON SOFTWARE ARCHITECTURE, P171, DOI 10.1109/WICSA.2009.5290803
   Tetsuo K., P 10 INT C ASP OR SO
NR 62
TC 12
Z9 12
U1 0
U2 4
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAY 1
PY 2015
VL 102
BP 20
EP 43
DI 10.1016/j.scico.2014.11.016
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CE7UO
UT WOS:000352047500002
OA Green Accepted, Bronze
DA 2024-07-18
ER

PT J
AU Lozes, É
   Villard, J
AF Lozes, Etienne
   Villard, Jules
TI Shared contract-obedient channels
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Program verification; Message passing; Linear channels; Separation logic
ID SEPARATION; COMMUNICATION; PROGRESS
AB Recent advances in the formal verification of message-passing programs are based on proving that programs correctly implement a given protocol. Many existing verification techniques for message-passing programs assume that at most one thread may attempt to send or receive on a channel endpoint at any given point in time, and expressly forbid endpoint sharing. Approaches that do allow such sharing often do not prove that channels obey their protocols. In this paper, we identify two principles that can guarantee obedience to a communication protocol even in the presence of endpoint sharing. Firstly, threads may concurrently use an endpoint in any way that does not advance the state of the protocol. Secondly, threads may compete for receiving on an endpoint provided that the successful reception of the message grants them ownership of that endpoint retrospectively. We develop a program logic based on separation logic that unifies these principles and allows fine-grained reasoning about endpoint-sharing programs. We demonstrate its applicability on a number of examples. The program logic is shown sound against an operational semantics of programs, and proved programs are guaranteed to follow the given protocols and to be free of data races, memory leaks, and communication errors. (C) 2014 Published by Elsevier B.V.
C1 [Lozes, Etienne] Univ Kassel, Kassel, Germany.
   [Villard, Jules] UCL, London WC1E 6BT, England.
C3 Universitat Kassel; University of London; University College London
RP Lozes, É (corresponding author), Univ Kassel, Kassel, Germany.
OI Villard, Jules/0000-0001-8637-0712
FU EPSRC [EP/H008373/2, EP/K008528/1] Funding Source: UKRI
CR Android Open Source Project fetched, 2013, ANDR OP SOURC PROJ
   Bettini L, 2008, LECT NOTES COMPUT SC, V5201, P418, DOI 10.1007/978-3-540-85361-9_33
   Bono V, 2012, LOG METH COMPUT SCI, V8, DOI 10.2168/LMCS-8(1:17)2012
   Bono V, 2011, LECT NOTES COMPUT SC, V6602, P57, DOI 10.1007/978-3-642-19718-5_4
   Bornat R, 2005, ACM SIGPLAN NOTICES, V40, P259, DOI 10.1145/1047659.1040327
   Boyland J, 2003, LECT NOTES COMPUT SC, V2694, P55
   BRAND D, 1983, J ACM, V30, P323, DOI 10.1145/322374.322380
   Brookes S, 2004, LECT NOTES COMPUT SC, V3170, P16
   Calcagno C, 2007, IEEE S LOG, P366, DOI 10.1109/LICS.2007.30
   Deniélou PM, 2012, LECT NOTES COMPUT SC, V7211, P194, DOI 10.1007/978-3-642-28869-2_10
   Deniélou PM, 2011, ACM SIGPLAN NOTICES, V46, P435, DOI 10.1145/1925844.1926435
   Dockins R, 2009, LECT NOTES COMPUT SC, V5904, P161, DOI 10.1007/978-3-642-10672-9_13
   Fahndrich M., 2006, Operating Systems Review, V40, P177, DOI 10.1145/1218063.1217953
   Francalanza A., 2011, ARXIV11065128 CORR
   Giunti M, 2011, ELECTRON P THEOR COM, P96
   Giunti M, 2010, LECT NOTES COMPUT SC, V6269, P432, DOI 10.1007/978-3-642-15375-4_30
   Gotsman A, 2007, LECT NOTES COMPUT SC, V4807, P19
   GOUDA MG, 1984, INFORM CONTROL, V63, P200, DOI 10.1016/S0019-9958(84)80014-5
   Hobor A, 2011, LECT NOTES COMPUT SC, V6602, P276, DOI 10.1007/978-3-642-19718-5_15
   Honda K, 1998, LECT NOTES COMPUT SC, V1381, P122, DOI 10.1007/BFb0053567
   Hu R, 2008, LECT NOTES COMPUT SC, V5142, P516, DOI 10.1007/978-3-540-70592-5_22
   Hunt Galen C., 2007, Operating Systems Review, V41, P37, DOI 10.1145/1243418.1243424
   Kobayashi N, 1998, ACM T PROGR LANG SYS, V20, P436, DOI 10.1145/276393.278524
   Leino KRM, 2010, LECT NOTES COMPUT SC, V6012, P407, DOI 10.1007/978-3-642-11957-6_22
   Lozes E., 2011, LECT NOTES COMPUTER, V7176, P2, DOI [10.1007/978-3-642-29834, DOI 10.1007/978-3-642-29834]
   Lozes É, 2012, ELECTRON P THEOR COM, P17, DOI 10.4204/EPTCS.104.3
   Merro M., 2000, THESIS ECOLE MINES P
   O'Hearn PW, 2004, LECT NOTES COMPUT SC, V3170, P49
   Raza M, 2009, LOG METH COMPUT SCI, V5, DOI 10.2168/LMCS-5(2:4)2009
   Takeuchi K., 1994, Parallel Architectures and Languages Europe'94, V817, P398, DOI [DOI 10.1007/3-540-58184-7_118, 10.1007/3540581847118]
   Turon A. J., 2011, ARXIV11050966 CORR
   Villard J., 2011, THESIS ECOLE NORMALE
   Villard J, 2009, LECT NOTES COMPUT SC, V5904, P194, DOI 10.1007/978-3-642-10672-9_15
NR 33
TC 2
Z9 2
U1 0
U2 0
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR 15
PY 2015
VL 100
BP 28
EP 60
DI 10.1016/j.scico.2014.09.008
PG 33
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CB6IS
UT WOS:000349731300003
OA Green Published
DA 2024-07-18
ER

PT J
AU Di Giusto, C
   Pérez, JA
AF Di Giusto, Cinzia
   Perez, Jorge A.
TI Disciplined structured communications with disciplined runtime
   adaptation
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Types for structured communications; Session types; Process calculi;
   Runtime adaptation; Adaptable processes
ID LANGUAGE PRIMITIVES; SESSION TYPES; CALCULUS; ACCESS
AB Session types offer a powerful type-theoretic foundation for the analysis of structured communications, as commonly found in service-oriented systems. They are defined upon core programming calculi which offer only limited support for expressing requirements related to runtime adaptation. This is unfortunate, as service-oriented systems are increasingly being deployed upon highly dynamic infrastructures in which such requirements are central concerns. In previous work, we developed a process calculi framework of adaptable processes, in which concurrent processes can be replaced, suspended, or discarded at runtime. In this paper, we propose a session type discipline for a calculus with adaptable processes. Our typed framework offers a simple alternative for integrating runtime adaptation mechanisms in the modeling and analysis of structured communications. We show that well-typed processes enjoy safety and consistency properties: while the former property ensures the absence of communication errors at runtime, the latter guarantees that active session behavior is never disrupted by adaptation actions. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Di Giusto, Cinzia] Univ Evry Val dEssonne, Lab IBISC, Evry, France.
   [Perez, Jorge A.] FCT Univ Nova Lisboa, CITI, Lisbon, Portugal.
   [Perez, Jorge A.] FCT Univ Nova Lisboa, Dept Informat, Lisbon, Portugal.
   [Perez, Jorge A.] Univ Groningen, Johann Bernoulli Inst Math & Comp Sci, NL-9700 AB Groningen, Netherlands.
C3 Universite Paris Saclay; Universidade Nova de Lisboa; Universidade Nova
   de Lisboa; University of Groningen
RP Pérez, JA (corresponding author), Univ Evry Val dEssonne, Lab IBISC, Evry, France.
RI Pérez, Jorge/G-1629-2011
OI Pérez, Jorge/0000-0002-1452-6180
FU French project ANR BLANC [0307 01 - SYNBIOTIC]; Portuguese Foundation
   for Science and Technology (FCT) [SFRH/BPD/84067/2012]; CITI; Fundação
   para a Ciência e a Tecnologia [SFRH/BPD/84067/2012] Funding Source: FCT
FX We thank the anonymous reviewers for their detailed remarks. Most of
   this research was carried out when the second author was a postdoctoral
   fellow at CITI - Departamento de Informatica, FCT - Universidade Nova de
   Lisboa, Portugal. This work was partially supported by the French
   project ANR BLANC 0307 01 - SYNBIOTIC, as well as by the Portuguese
   Foundation for Science and Technology (FCT) grants SFRH/BPD/84067/2012
   and CITI.
CR Anderson G., 2012, LECT NOTES COMPUTER, V7705, P207, DOI DOI 10.1007/978-3-642-35182-2_
   Bravetti M., 2012, LOG METH COMPUT SCI, V8, P1
   Bravetti M., 2014, LECT NOTES COMPUTER, V8368
   Brogi A, 2004, LECT NOTES COMPUT SC, V3116, P42
   Bruni R, 2012, LECT NOTES COMPUT SC, V7212, P240, DOI 10.1007/978-3-642-28872-2_17
   Bugliesi M, 2004, ACM T PROGR LANG SYS, V26, P57, DOI 10.1145/963778.963781
   Capecchi S, 2010, LECT NOTES COMPUT SC, V6269, P237, DOI 10.1007/978-3-642-15375-4_17
   Carbone M, 2008, LECT NOTES COMPUT SC, V5201, P402, DOI 10.1007/978-3-540-85361-9_32
   Carbone M, 2007, LECT NOTES COMPUT SC, V4421, P2
   Carbone M, 2010, ELECTRON P THEOR COM, P13, DOI 10.4204/EPTCS.38.4
   Coppo M., 2014, PDP 14 IN PRESS
   Dezani-Ciancaglini M, 2008, LECT NOTES COMPUT SC, V4912, P257
   Dezani-Ciancaglini M, 2010, LECT NOTES COMPUT SC, V6194, P1, DOI 10.1007/978-3-642-14458-5_1
   Di Giusto C, 2013, SAC, P1913, DOI DOI 10.1145/2480362.2480716
   Ferreira C, 2011, LECT NOTES COMPUT SC, V6582, P302, DOI 10.1007/978-3-642-20401-2_14
   Garralda P., 2006, PPDP 2006. Proceedings of the Eighth ACM SIGPLAN Symposium on Principles and Practice of Declarative Programming, P61, DOI 10.1145/1140335.1140344
   Gay S, 2005, ACTA INFORM, V42, P191, DOI 10.1007/s00236-005-0177-z
   Henriksen AS, 2013, LECT NOTES COMPUT SC, V7789, P124, DOI 10.1007/978-3-642-39088-3_8
   Honda K, 1998, LECT NOTES COMPUT SC, V1381, P122, DOI 10.1007/BFb0053567
   Honda K, 2008, ACM SIGPLAN NOTICES, V43, P273, DOI 10.1145/1328897.1328472
   Honda Kohei., 1993, CONCUR'93, 4th International Conference on Concurrency Theory, Hildesheim, Germany, August 23-26, 1993, V715, P509, DOI DOI 10.1007/3-540-57208-2_
   Kouzapas D, 2011, LECT NOTES COMPUT SC, V6722, P228, DOI 10.1007/978-3-642-21461-5_15
   Lenglet S, 2011, INFORM COMPUT, V209, P1390, DOI 10.1016/j.ic.2011.08.002
   MILNER R, 1992, INFORM COMPUT, V100, P1, DOI [10.1016/0890-5401(92)90008-4, 10.1016/0890-5401(92)90009-5]
   Mostrous D, 2007, LECT NOTES COMPUT SC, V4583, P321
   Sangiorgi D., 1992, PhD thesis
   Stoyle G, 2007, ACM T PROGR LANG SYS, V29, DOI 10.1145/1255450.1255455
   Vallecillo A., 2003, FOCLASA, P439
   Yoshida N, 2007, ELECTRON NOTES THEOR, V171, P73, DOI 10.1016/j.entcs.2007.02.056
NR 29
TC 8
Z9 8
U1 0
U2 5
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 1
PY 2015
VL 97
SI SI
BP 235
EP 265
DI 10.1016/j.scico.2014.04.017
PN 2
PG 31
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AU6PS
UT WOS:000345725200004
OA Green Published
DA 2024-07-18
ER

PT J
AU Kogtenkov, A
   Meyer, B
   Velder, S
AF Kogtenkov, Alexander
   Meyer, Bertrand
   Velder, Sergey
TI Alias calculus, change calculus and frame inference
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Verification; Alias analysis; Frame inference; Object-oriented; Static
   analysis
ID POINTER ANALYSIS
AB Alias analysis, which determines whether two expressions in a program may reference to the same object, has many potential applications in program construction and verification. We have developed a theory for alias analysis, the "alias calculus", implemented its application to an object-oriented language, and integrated the result into a modern IDE. The calculus has a higher level of precision than many existing alias analysis techniques. One of the principal applications is to allow automatic change analysis, which leads to inferring "modifies" clauses, providing a significant advance towards addressing the Frame Problem. Experiments were able to infer the "modifies" clauses of an existing formally specified library. Other applications, in particular to concurrent programming, also appear possible.
   The article presents the calculus, the application to frame inference including experimental results, and other projected applications. The ongoing work includes building more efficient model capturing aliasing properties and soundness proof for its essential elements. (C) 2013 Published by Elsevier B.V.
C1 [Kogtenkov, Alexander; Meyer, Bertrand] Eiffel Software, Goleta, CA 93117 USA.
   [Meyer, Bertrand] ETH, Chair Software Engn, CH-8092 Zurich, Switzerland.
   [Kogtenkov, Alexander; Meyer, Bertrand; Velder, Sergey] NRU ITMO, Software Engn Lab, St Petersburg, Russia.
C3 Swiss Federal Institutes of Technology Domain; ETH Zurich; ITMO
   University
RP Meyer, B (corresponding author), Eiffel Software, 5949 Hollister Ave, Goleta, CA 93117 USA.
EM alexk@eiffel.com; Bertrand.Meyer@inf.ethz.ch; velder@rain.ifmo.ru
RI Kogtenkov, Alexander/D-7271-2014
OI Kogtenkov, Alexander/0000-0003-4873-8306
FU Mail.ru group
FX On the occasion of Paul Klint's 65th birthday we are delighted to
   acknowledge his seminal contributions to programming theory and
   practice. This work was carried out in the ITMO Software Engineering and
   Verification Laboratory, as part of a "megagrant" funded by the Mail.ru
   group. We are grateful to the anonymous referees for excellent comments
   which led to a considerable improvement of the article.
CR [Anonymous], ISSTA
   Flanagan C, 2002, ACM SIGPLAN NOTICES, V37, P234, DOI 10.1145/543552.512558
   Godefroid P, 2010, ACM SIGPLAN NOTICES, V45, P43, DOI 10.1145/1707801.1706307
   Gorbovitski M, 2010, ACM SIGPLAN NOTICES, V45, P27, DOI 10.1145/1899661.1869635
   Hardekopf B, 2011, INT SYM CODE GENER, P289, DOI 10.1109/CGO.2011.5764696
   Hind M, 2001, ACM SIGPLAN NOTICES, P54
   Kassios IT, 2006, LECT NOTES COMPUT SC, V4085, P268
   Lenherr T., 2008, THESIS I COMPUTERSYS
   Lhoták O, 2011, ACM SIGPLAN NOTICES, V46, P3, DOI 10.1145/1925844.1926389
   Meyer B., 2012, NEGATIVE VARIABLES E
   Meyer B., 2011, INT J SOFTW INF, V5, P77
   Meyer B, 2010, J OBJECT TECHNOL, V9, P37, DOI 10.5381/jot.2010.9.2.c5
   Meyer B, 2009, COMPUTER, V42, P46, DOI 10.1109/MC.2009.296
   Nasre R, 2010, LECT NOTES COMPUT SC, V6337, P422, DOI 10.1007/978-3-642-15769-1_26
   Nordio M, 2009, LECT NOTES BUS INF P, V33, P195
   Polikarpova N, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P262, DOI 10.1109/ICSE.2013.6606572
   Polikarpova N, 2009, ISSTA 2009: INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, P93
   Rakamaric Zvonimir, 2008, 2008 23rd IEEE/ACM International Conference on Automated Software Engineering, P89, DOI 10.1109/ASE.2008.19
   Robert Valentin, 2012, Certified Programs and Proofs. Second International Conference (CPP 2012). Proceedings, P11, DOI 10.1007/978-3-642-35308-6_5
   Sagiv M, 2002, ACM T PROGR LANG SYS, V24, P217, DOI 10.1145/514188.514190
   Salcianu A, 2005, LECT NOTES COMPUT SC, V3385, P199
   Taghdiri M., 2006, P 14 ACM SIGSOFT INT, P276
   Wies T., 2006, WORKSH HEAP ABSTR VE
NR 23
TC 6
Z9 7
U1 0
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 1
PY 2015
VL 97
SI SI
BP 163
EP 172
DI 10.1016/j.scico.2013.11.006
PN 1
PG 10
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AU6PR
UT WOS:000345725100027
OA Bronze
DA 2024-07-18
ER

PT J
AU Kanso, B
   Taha, S
AF Kanso, Bilal
   Taha, Safouan
TI Specification of temporal properties with OCL
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE OCL; Temporal patterns; Eclipse/MDT; Model-driven engineering; Formal
   methods
ID PATTERNS; SYSTEMS
AB The Object Constraint language (OCL) is widely used to express static constraints on models and object-oriented systems. However, the notion of dynamic constraints, controlling the system behavior over time, has not been natively supported. Such dynamic constraints are necessary to handle temporal and real-time properties of systems. In this paper, we first add a temporal layer to the OCL language, based syntactically on Dwyer et al.'s specification patterns. We enrich it with formal scenario-based semantics and integrate it into the current Eclipse OCL plug-in. Second, we translate, with a compositional approach, OCL temporal properties into finite-state automata and we connect our framework to automatic test generators. This way, we create a bridge linking model driven engineering and usual formal methods. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Kanso, Bilal; Taha, Safouan] SUPELEC Syst Sci E3S, Dept Comp Sci, F-91192 Gif Sur Yvette, France.
C3 Universite Paris Saclay
RP Taha, S (corresponding author), SUPELEC Syst Sci E3S, Dept Comp Sci, 3 Rue Joliot Curie, F-91192 Gif Sur Yvette, France.
EM bilal.kanso@supelec.fr; safouan.taha@supelec.fr
FU French ANR TASCCC project [ANR-09-SEGI-014]; Motorola Solutions
   Foundation
FX This work was funded by the French ANR TASCCC project (ANR-09-SEGI-014)
   [2] and the Motorola Solutions Foundation [3].
CR [Anonymous], OBJ CONSTR LANG
   Baier C., 2008, REPRESENTATION MIND
   Bradfield J, 2002, LECT NOTES COMPUT SC, V2306, P203
   Calegari D., 2008, FDL IEEE, P167
   Castillos K.C., 2013, 10 INT C INT FORM ME
   Castillos KC, 2011, LECT NOTES COMPUT SC, V7019, P32, DOI 10.1007/978-3-642-24580-0_4
   Cengarle M., 2002, LNCS, V2391, P389
   Conrad S, 2001, UNIFIED MODELING LAN, P151
   Dadeau F., 2013, ICST TEST TOOL TRACK
   Distefano D, 2000, INT FED INFO PROC, V49, P305
   Dwyer M. B., 1999, Proceedings of the 1999 International Conference on Software Engineering (IEEE Cat. No.99CB37002), P411, DOI 10.1109/ICSE.1999.841031
   Flake S., 2003, SOFTW SYST MODEL, V2, P164
   Gaston C, 2006, LECT NOTES COMPUT SC, V3964, P1
   Jard C., 2002, WORLD C INT DES PROC
   Kanso B., 2012, LNCS
   Kim M, 2004, FORM METHOD SYST DES, V24, P129, DOI 10.1023/B:FORM.0000017719.43755.7c
   Konrad S, 2005, PROC INT CONF SOFTW, P372
   Ledru Y, 2004, LECT NOTES COMPUT SC, V2984, P281
   Mondragon O., 2003, Electronic Notes in Theoretical Computer Science, V89, DOI 10.1016/S1571-0661(04)81043-0
   Mondragón OA, 2004, INT J SOFTW ENG KNOW, V14, P21, DOI 10.1142/S0218194004001567
   Mullins J, 2007, LECT NOTES COMPUT SC, V4468, P59
   Object Management Group (OMG), 2009, UML PROF MOD AN REAL
   Pnueli Amir., 1977, P 18 ANN S FDN COMPU, P46, DOI DOI 10.1109/SFCS.1977.32
   Ramakrishna Y.S., 1993, THESIS U CALIFORNIA
   Ramakrishnan S., 1999, 21 INT C SOFTW ENG I, P16
   Richters M, 2002, LECT NOTES COMPUT SC, V2263, P42
   Salamah S., 2007, VERIFICATION AUTOMAT, P341
   Smith RL, 2002, ICSE 2002: PROCEEDINGS OF THE 24TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P11, DOI 10.1109/ICSE.2002.1007952
   Tretmans J, 1996, COMPUT NETWORKS ISDN, V29, P49, DOI 10.1016/S0169-7552(96)00017-7
   Tsay Y.K., GRAPHICAL TOOL OMEGA
   Ziemann P., 2003, LNCS, V2890, P617
NR 31
TC 6
Z9 7
U1 0
U2 1
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 15
PY 2014
VL 96
BP 527
EP 551
DI 10.1016/j.scico.2014.02.029
PN 4
PG 25
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AT8KC
UT WOS:000345181300008
OA Bronze
DA 2024-07-18
ER

PT J
AU Paige, RF
   Kolovos, DS
   Polack, FAC
AF Paige, Richard F.
   Kolovos, Dimitrios S.
   Polack, Fiona A. C.
TI A tutorial on metamodelling for grammar researchers
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Metamodelling; Models; Grammars; Bridges; Unification
ID TEXTUAL SYNTAX
AB A metamodel has been defined as: a model of a model; a definition of a language; a description of abstract syntax; and a description of a domain. Because of these varied definitions, it is difficult to explain why metamodels are constructed, what can be done with them, and how they are built. This tutorial introduces the key concepts, terminology and philosophy behind metamodelling, focusing on its use for language engineering, and expressed in a way that is intended to be accessible to researchers who may be more familiar with the use of traditional context-free grammar techniques. We highlight the main differences between metamodelling and grammar-based approaches, describe how to map metamodelling concepts and techniques to grammar concepts and techniques, and highlight some of the strengths and weaknesses of metamodelling via a set of small, but realistic examples. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Paige, Richard F.; Kolovos, Dimitrios S.; Polack, Fiona A. C.] Univ York, Dept Comp Sci, York YO10 5GH, N Yorkshire, England.
C3 University of York - UK
RP Paige, RF (corresponding author), Univ York, Dept Comp Sci, Deramore Lane, York YO10 5GH, N Yorkshire, England.
EM richard.paige@york.ac.uk; dimitris.kolovos@york.ac.uk;
   fiona.polack@york.ac.uk
RI Kolovos, Dimitrios/L-9830-2014
OI Kolovos, Dimitris/0000-0002-1724-6563
CR [Anonymous], 1996, 149771996 ISOIEC
   [Anonymous], 1997, Object-oriented software construction
   [Anonymous], 2005, 15909 ISOIEC
   Atkinson C, 2003, IEEE SOFTWARE, V20, P36, DOI 10.1109/MS.2003.1231149
   Bezivin J., 2005, SOFTWARE SYSTEM MODE, V4, P171, DOI DOI 10.1007/S10270-005-0079-0
   Bézivin J, 2006, LECT NOTES COMPUT SC, V4066, P346
   Bezivin Jean, 2004, WCRE, P4
   Clark T., 2004, APPL METAMODELLING F
   DELARA J, 2010, TOOLS, V6141, P1
   Djuric D, 2006, J OBJECT TECHNOL, V5, P125, DOI 10.5381/jot.2006.5.8.a4
   Droop Alistair, 2011, COSMOS WORKSH, V79-111
   Gargantini Angelo, 2006, CTITSERIES WP
   Goldschmidt T, 2008, LECT NOTES COMPUT SC, V5095, P169, DOI 10.1007/978-3-540-69100-6_12
   Heidenreich F, 2009, LECT NOTES COMPUT SC, V5562, P114, DOI 10.1007/978-3-642-02674-4_9
   Hillah Lom Messan, 2009, WORKSH TUT PRACT US
   Holt R., 1987, The Turing programming language: design and definition
   Jackson M., 1995, SOFTWARE REQUIREMENT
   Klint P, 2005, ACM T SOFTW ENG METH, V14, P331, DOI 10.1145/1072997.1073000
   Kolovos DS, 2010, LECT NOTES COMPUT SC, V6394, P211
   Kolovos Dimitrios S., 2012, ECMFA, P118
   Object Management Group, 2011, UN MOD LANG UML 2 4
   Object Management Group, 2004, HUM US TEXT NOT HUTN
   Object Management Group, 2011, DIAGR DEF V1 0 FTF S
   Object Management Group, 2009, UN MOD LANG UML 2 2
   Object Management Group, 2005, PROP MDA FDN MOD 200
   Object Management Group, 2006, MET OBJ FAC 2 0 COR
   Paige Richard F., 2012, P SOFTWARE LANGUAGE, P64
   Paige Richard F., 2007, ACM T SOFTW ENG METH, V16
   Polack FAC, 2012, MODELLING PHYS WORLD
   van den Bos J, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P671, DOI 10.1145/1985793.1985887
   Zaytsev V, 2012, PROGRAMMING LANGUAGE, P1910, DOI DOI 10.1145/2245276.2232090
NR 31
TC 29
Z9 31
U1 0
U2 1
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 15
PY 2014
VL 96
BP 396
EP 416
DI 10.1016/j.scico.2014.05.007
PN 4
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AT8KC
UT WOS:000345181300002
OA Bronze
DA 2024-07-18
ER

PT J
AU Braberman, V
   Garbervetsky, D
   Hym, S
   Yovine, S
AF Braberman, Victor
   Garbervetsky, Diego
   Hym, Samuel
   Yovine, Sergio
TI Summary-based inference of quantitative bounds of live heap objects
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Resource consumption; Quantitative analysis; Heap memory requirements
ID POINTER
AB This article presents a symbolic static analysis for computing parametric upper bounds of the number of simultaneously live objects of sequential Java-like programs. Inferring the peak amount of irreclaimable objects is the cornerstone for analyzing potential heap-memory consumption of stand-alone applications or libraries. The analysis builds method-level summaries quantifying the peak number of live objects and the number of escaping objects. Summaries are built by resorting to summaries of their callees. The usability, scalability and precision of the technique is validated by successfully predicting the object heap usage of a medium-size, real-life application which is significantly larger than other previously reported case-studies. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Braberman, Victor; Garbervetsky, Diego; Yovine, Sergio] UBA, FCEyN, Dept Computat, Buenos Aires, DF, Argentina.
   [Braberman, Victor; Garbervetsky, Diego; Yovine, Sergio] Consejo Nacl Invest Cient & Tecn, RA-1033 Buenos Aires, DF, Argentina.
   [Hym, Samuel] Univ Lille 1, LIFL, F-59655 Villeneuve Dascq, France.
   [Hym, Samuel] CNRS, F-75700 Paris, France.
C3 University of Buenos Aires; Consejo Nacional de Investigaciones
   Cientificas y Tecnicas (CONICET); Universite de Lille; Centre National
   de la Recherche Scientifique (CNRS)
RP Garbervetsky, D (corresponding author), UBA, FCEyN, Dept Computat, Buenos Aires, DF, Argentina.
EM vbraber@dc.uba.ar; diegog@dc.uba.ar; samuel.hym@univ-lille1.fr;
   syovine@dc.uba.ar
OI Yovine, Sergio/0000-0002-2737-4382; Garbervetsky,
   Diego/0000-0003-4180-7196
FU UBACYT [W0813, F075]; CONICET PIP [11220110100596CO]; ANPCYT
   [PICT-2012-0724]; MINCYT-BMWF [AU/10/19]; INRIA Associated Team ANCOME;
   LIA INFINIS; European Union Seventh Framework Programme [295261]; ANPCYT
   PICT [2011-1774];  [FRIC10/02-QUATRIX]
FX Thanks to S. Verdoolaege for helping us with the ISCC calculator and to
   M. Rouaux, M. Grunberg and G. Krasny for participating in the
   development of the tool. This work has been partially supported by the
   projects UBACYT W0813, UBACYT F075, CONICET PIP 11220110100596CO, ANPCYT
   PICT-2012-0724, ANPCYT PICT 2011-1774, FRIC10/02-QUATRIX, MINCYT-BMWF
   AU/10/19, INRIA Associated Team ANCOME, LIA INFINIS and the European
   Union Seventh Framework Programme under grant agreement No. 295261
   (MEALS).
CR Albert E, 2008, LECT NOTES COMPUT SC, V5382, P113, DOI 10.1007/978-3-540-92188-2_5
   Albert E, 2013, SCI COMPUT PROGRAM, V78, P1427, DOI 10.1016/j.scico.2012.10.008
   Albert E, 2011, J AUTOM REASONING, V46, P161, DOI 10.1007/s10817-010-9174-1
   Albert E, 2010, ACM SIGPLAN NOTICES, V45, P121
   Albert Elvira, 2012, INCREMENTAL RESOURCE, P25
   Albert Elvira, LIVE HEAP SPACE ANAL, P129
   [Anonymous], IWACO
   [Anonymous], 2000, The mathematica book
   Beringer L, 2005, LECT NOTES COMPUT SC, V3452, P347
   Blanc R, 2010, LECT NOTES ARTIF INT, V6355, P103, DOI 10.1007/978-3-642-17511-4_7
   Braberman V, 2006, J OBJECT TECHNOL, V5, P31, DOI 10.5381/jot.2006.5.5.a2
   Braberman Victor A., PARAMETRIC PREDICTIO, P141
   Cachera D, 2012, LECT NOTES COMPUT SC, V7460, P58, DOI 10.1007/978-3-642-33125-1_7
   Cahoon B, 2001, 2001 INTERNATIONAL CONFERENCE ON PARALLEL ARCHITECTURES AND COMPILATION TECHNIQUES, PROCEEDINGS, P280, DOI 10.1109/PACT.2001.953309
   Chin Wei-Ngan, ANAL MEMORY RESOURCE, P151
   Clauss P, 2009, IEEE T VLSI SYST, V17, P983, DOI 10.1109/TVLSI.2008.2002049
   Cook B., 2009, Proceedings of the 2009 9th International Conference Formal Methods in Computer-Aided Design (FMCAD), P205, DOI 10.1109/FMCAD.2009.5351120
   Courbot A, 2010, ACM T EMBED COMPUT S, V9, DOI 10.1145/1698772.1698779
   CYTRON R, 1989, CONFERENCE RECORD OF THE SIXTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P25, DOI 10.1145/75277.75280
   Ernst MD, 2007, SCI COMPUT PROGRAM, V69, P35, DOI 10.1016/j.scico.2007.01.015
   Garbervetsky D, 2011, CONCURR COMP-PRACT E, V23, P1665, DOI 10.1002/cpe.1656
   Garbervetsky Diego, 2007, THESIS U BUENOS AIRE
   Gulwani S, 2010, ACM SIGPLAN NOTICES, V45, P292, DOI 10.1145/1809028.1806630
   Gulwani S, 2009, ACM SIGPLAN NOTICES, V44, P375, DOI 10.1145/1543135.1542518
   Havelund K., 2000, Int. J. Softw. Tools Technol. Transfer, V2, P366, DOI [DOI 10.1007/S100090050043, 10.1007/s100090050043]
   Hoffmann J, 2011, ACM SIGPLAN NOTICES, V46, P357, DOI 10.1145/1925844.1926427
   Hofmann M, 2006, LECT NOTES COMPUT SC, V3924, P22
   Hofmann M, 2003, ACM SIGPLAN NOTICES, V38, P185, DOI 10.1145/640128.604148
   Hofmann M, 2013, LECT NOTES COMPUT SC, V7792, P593, DOI 10.1007/978-3-642-37036-6_32
   Hofmann M, 2009, LECT NOTES COMPUT SC, V5771, P317, DOI 10.1007/978-3-642-04027-6_24
   Jones Richard E., 2008, P 7 INT S MEM MAN IS
   Kolodner Hillel, 2009, P 8 INT S MEM MAN IS
   Nimmer J. W., 2001, Electronic Notes in Theoretical Computer Science, V55, DOI 10.1016/S1571-0661(04)00256-7
   Salagnac Guillaume, 2007, RTCSA, P73
   Salcianu A, 2001, ACM SIGPLAN NOTICES, V36, P12, DOI 10.1145/568014.379553
   Sun Microsystems, 2000, J2ME BUILD BLOCKS MO
   Nguyen T, 2012, PROC INT CONF SOFTW, P683, DOI 10.1109/ICSE.2012.6227149
   Unnikrishnan Leena, PARAMETRIC HEAP USAG, P139
   Verdoolaege S, 2010, LECT NOTES COMPUT SC, V6327, P299, DOI 10.1007/978-3-642-15582-6_49
   Vivien F, 2001, ACM SIGPLAN NOTICES, V36, P35, DOI 10.1145/381694.378804
NR 40
TC 3
Z9 3
U1 0
U2 6
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 15
PY 2014
VL 92
SI SI
BP 56
EP 84
DI 10.1016/j.scico.2013.11.036
PN A
PG 29
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AK7GY
UT WOS:000338597900004
OA Green Published
DA 2024-07-18
ER

PT J
AU Martín-SanJosé, JF
   Juan, MC
   Gil-Gómez, JA
   Rando, N
AF Martin-SanJose, Juan-Fernando
   Juan, M. -Carmen
   Gil-Gomez, Jose-A.
   Rando, Noemi
TI Flexible learning itinerary vs. linear learning itinerary
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Computer-based learning; Flexible learning itinerary; Natural user
   interfaces; Frontal projection; Kinect
ID GAMES; EDUCATION; ACCEPTANCE; CONTEXTS; DESIGN
AB The latest video game and entertainment technology and other technologies are facilitating the development of new and powerful e-Learning systems. In this paper, we present a computer-based game for learning about five historical ages. The objective of the game is to reinforce the events that mark the transition from one historical age to another and the order of the historical ages. Our game incorporates natural human-computer interaction based on video game technology, Frontal Projection, and personalized learning. For personalized learning, a Flexible Learning Itinerary has been included, where the children can decide how to direct the flow of their own learning process. For comparison, a Linear Learning Itinerary has also been included, where the children follow a determined learning flow. A study to compare the two different learning itineraries was carried out. Twenty nine children from 8 to 9 years old participated in the study. The analysis of the pre-tests and the post-tests determined that children learned the contents of a game about historical ages. The results show that there were no statistically significant differences between the two learning itineraries. Therefore, our study reveals the potential of computer-based learning games as a tool in the learning process for both flexible and linear itineraries. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Martin-SanJose, Juan-Fernando; Juan, M. -Carmen; Gil-Gomez, Jose-A.] Univ Politecn Valencia, Inst Univ Automat & Informat Ind, Valencia 46022, Spain.
   [Rando, Noemi] Ibi, AIJU, Alicante, Spain.
C3 Universitat Politecnica de Valencia
RP Juan, MC (corresponding author), Univ Politecn Valencia, Inst Univ Automat & Informat Ind, C Camino Vera S-N, Valencia 46022, Spain.
EM mcarmen@dsic.upv.es
RI Gil-Gómez, José-Antonio/H-9756-2015; Juan, M.-Carmen/I-3585-2015
OI Gil-Gómez, José-Antonio/0000-0001-9954-2480; Martin San Jose, Juan
   Fernando/0000-0002-3247-6156; Juan, M.-Carmen/0000-0002-8764-1470
FU Spanish APRENDRA project [TIN2009-14319-C02-01]
FX This work was funded by the Spanish APRENDRA project
   (TIN2009-14319-C02-01).
CR Albert D., 2001, Bulletin of the Graduate School of Education, Hiroshima University, Part I (Learning and Curriculum Development), V50, P25, DOI DOI 10.15027/18093
   Annetta LA, 2009, COMPUT EDUC, V53, P74, DOI 10.1016/j.compedu.2008.12.020
   [Anonymous], 2010, P 23 ANN ACM S USER, DOI DOI 10.1145/1866029.1866075
   [Anonymous], J UNIVERS COMPUT SCI
   [Anonymous], EDUTAINMENT EXPLORIN
   Arbaugh JB., 2002, J HIGH TECHNOLOGY MA, V13, P203, DOI DOI 10.1016/S1047-8310(02)00049-4
   Beale IL, 2007, J ADOLESCENT HEALTH, V41, P263, DOI 10.1016/j.jadohealth.2007.04.006
   Beck J., 2004, GOT GAM NEW GAM GEN
   Bonanno P., 2005, Educational Psychology, V25, P13, DOI [DOI 10.1080/0144341042000294877, 10.1080/0144341042000294877]
   Bourgonjon J, 2013, COMPUT EDUC, V67, P21, DOI 10.1016/j.compedu.2013.02.010
   Brusilovsky P, 1998, COMPUT NETWORKS ISDN, V30, P291, DOI 10.1016/S0169-7552(98)00082-8
   Brusilovsky P., 1996, WebNet96 - World Conference of the Web Society. Proceedings, P64
   Brusilovsky P, 2001, USER MODEL USER-ADAP, V11, P87, DOI 10.1023/A:1011143116306
   Brusilovsky P., 1996, LECT NOTES COMPUTER, V1086, P169
   Connolly TM, 2012, COMPUT EDUC, V59, P661, DOI 10.1016/j.compedu.2012.03.004
   Csikszentmihalyi M., 2008, FLOW PSYCHOL OPTIMAL
   de Bra P., 1998, New Review of Hypermedia and Multimedia, V4, P115, DOI 10.1080/13614569808914698
   Dietz P., 2001, 01UIST. Proceedings of the 14th Annual ACM Symposium on User Interface Software and Technology, P219, DOI 10.1145/502348.502389
   Do-Lenh Son., 2009, Proceedings of the Conference on Human Computer Interaction, P149, DOI [10.5555/1671011.1671028, DOI 10.5555/1671011.1671028]
   Durkin K, 2002, J APPL DEV PSYCHOL, V23, P373, DOI 10.1016/S0193-3973(02)00124-7
   Ebner M, 2007, COMPUT EDUC, V49, P873, DOI 10.1016/j.compedu.2005.11.026
   Esenther A, 2005, LECT NOTES COMPUT SC, V3814, P315, DOI 10.1007/11590323_42
   Facer K, 2004, J COMPUT ASSIST LEAR, V20, P399, DOI 10.1111/j.1365-2729.2004.00105.x
   Furió D, 2013, COMPUT EDUC, V64, P24, DOI 10.1016/j.compedu.2012.12.015
   Furió D, 2013, COMPUT EDUC, V64, P1, DOI 10.1016/j.compedu.2012.12.001
   Garris R., 2002, INTERDISCIPLINARY J, V33, P43
   Girard C, 2013, J COMPUT ASSIST LEAR, V29, P207, DOI 10.1111/j.1365-2729.2012.00489.x
   GRABINGER S, 1996, HYPERMEDIA LEARNING
   Guillén-Nieto V, 2012, COMPUT EDUC, V58, P435, DOI 10.1016/j.compedu.2011.07.015
   Hatch A., 2011, CONNECTING COMPUTER, P176
   Heeter C., 2005, P 2005 C DES US EXP
   Hongchi Shi, 2002, Proceedings of the First International Joint Conference on Autonomous Agents and Multiagent Systems, P847
   Hornecker E, 2008, CSCW: 2008 ACM CONFERENCE ON COMPUTER SUPPORTED COOPERATIVE WORK, CONFERENCE PROCEEDINGS, P167
   Hunicke R., 2004, Proc. AAAI Wksp. Challenges in Game AI, V4, P1722
   Jones A, 1999, INTERACT COMPUT, V11, P499, DOI 10.1016/S0953-5438(98)00064-2
   Jorda Sergi, 2006, ACM SIGGRAPH 2006 SK, DOI [10.1145/1179849.1179963, DOI 10.1145/1179849.1179963]
   Kagan J., 1970, Carmichael's Manual of Child Psychology, P1273
   Kharrufa Ahmed., 2010, ACM_International_Conference_on_Interactive_Tabletops_and_Surfaces, ITS '10, P197, DOI DOI 10.1145/1936652.1936689
   Kobourov SG, 2005, LECT NOTES COMPUT SC, V3585, P986, DOI 10.1007/11555261_86
   Kubicki S, 2013, SIMUL MODEL PRACT TH, V31, P116, DOI 10.1016/j.simpat.2012.10.012
   LECLERCQ D, 1993, NATO ADV SCI INST SE, V112, P31
   Leclercq D., 1989, P 6 INT C TECHN ED I, P268
   Mansor E.I., 2009, Proceedings of the 8th International Conference on Interaction Design and Children, P70, DOI DOI 10.1145/1551788.1551801EVENT-PLACE
   Marco Javier., 2009, Proceedings of the 23rd British HCI Group Annual Conference on People and Computers: Celebrating People and Technology, P103
   Mayer IS, 2004, FUTURES, V36, P311, DOI 10.1016/S0016-3287(03)00159-9
   Mayes JT, 1999, INTERACT COMPUT, V11, P485, DOI 10.1016/S0953-5438(98)00065-4
   Mumtaz S, 2001, COMPUT EDUC, V36, P347, DOI 10.1016/S0360-1315(01)00023-9
   Papastergiou M, 2009, COMPUT EDUC, V52, P1, DOI 10.1016/j.compedu.2008.06.004
   PASK G, 1976, BRIT J EDUC PSYCHOL, V46, P128, DOI 10.1111/j.2044-8279.1976.tb02305.x
   Piper AM, 2009, CHI2009: PROCEEDINGS OF THE 27TH ANNUAL CHI CONFERENCE ON HUMAN FACTORS IN COMPUTING SYSTEMS, VOLS 1-4, P1227
   Pontual T., 2009, Proceedings of the 9th International Conference on Computer Supported Collaborative Learning (CSCL'09), V1, P325
   Prensky M., 2007, DIGITAL GAME BASED L
   REIGELUTH CM, 1992, ETR&D-EDUC TECH RES, V40, P80, DOI 10.1007/BF02296844
   Reigeluth CM, 1999, INSTRUCTIONAL-DESIGN THEORIES AND MODELS, VOL II, P425
   Rick J., 2009, Children in Technological Enviroments, V19, P320, DOI DOI 10.7721/CHILYOUTENVI.19.1.0320
   Rosas R, 2003, COMPUT EDUC, V40, P71, DOI 10.1016/S0360-1315(02)00099-4
   Selim HM, 2007, COMPUT EDUC, V49, P396, DOI 10.1016/j.compedu.2005.09.004
   Smeaton AF, 2006, FIRST IEEE INTERNATIONAL WORKSHOP ON HORIZONTAL INTERACTIVE HUMAN-COMPUTER SYSTEMS, P149
   Stockley D., 2013, E LEARNING DEFINITIO
   Strijbos JW, 2004, COMPUT EDUC, V42, P403, DOI 10.1016/j.compedu.2003.10.004
   Suh S, 2010, J COMPUT ASSIST LEAR, V26, P370, DOI 10.1111/j.1365-2729.2010.00353.x
   Sun PC, 2008, COMPUT EDUC, V50, P1183, DOI 10.1016/j.compedu.2006.11.007
   Tapscott D., 1998, GROWING DIGITAL RISE
   Taran CN, 2005, 5th IEEE International Conference on Advanced Learning Technologies, Proceedings, P617, DOI 10.1109/ICALT.2005.206
   Villalta M, 2011, COMPUT EDUC, V57, P2039, DOI 10.1016/j.compedu.2011.05.003
   Virvou M, 2005, EDUC TECHNOL SOC, V8, P54
   Von Glasersfeld E., 1984, The invented reality, P16
   Weber G., 1997, 6 INT C USER MODELIN, P289, DOI DOI 10.1007/978-3-7091-2670-7_30
   Winn Brian M, 2009, Handbook of research on effective electronic gaming in education, P1010, DOI DOI 10.4018/978-1-59904-808-6.CH058
   WITKIN HA, 1977, PSYCHOL BULL, V84, P661, DOI 10.1037/0033-2909.84.4.661
NR 70
TC 8
Z9 10
U1 0
U2 28
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD AUG 1
PY 2014
VL 88
SI SI
BP 3
EP 21
DI 10.1016/j.scico.2013.12.009
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Social Science Citation Index (SSCI)
SC Computer Science
GA AH9QM
UT WOS:000336476900002
OA Green Published, hybrid
DA 2024-07-18
ER

PT J
AU Guttmann, W
AF Guttmann, Walter
TI Algebras for correctness of sequential computations
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Axiomatic program semantics; Conway semirings; Hoare calculus;
   Multirelations; Preconditions
ID UNIFYING THEORIES; KLEENE ALGEBRAS; NONDETERMINISM; REFINEMENT;
   ITERATION; AXIOMS
AB Previous work gives algebras for uniformly describing correctness statements and calculi in various relational and matrix-based computation models. These models support a single kind of non-determinism, which is either angelic, demonic or erratic with respect to the infinite executions of a computation. Other models, notably isotone predicate transformers or up-closed multirelations, offer both angelic and demonic choice with respect to finite executions. We propose algebras for a theory of correctness which covers these multirelational models in addition to relational and matrix-based models. Existing algebraic descriptions, in particular general refinement algebras and monotonic Boolean transformers, are instances of our theory. Our new description includes a precondition operation that instantiates to both modal diamond and modal box operators. We verify all results in Isabelle, heavily using its automated theorem provers. We integrate our theories with the Isabelle theory of monotonic Boolean transformers making our results applicable to that setting. (C) 2013 Elsevier B.V. All rights reserved.
C1 Univ Canterbury, Dept Comp Sci & Software Engn, Christchurch, New Zealand.
C3 University of Canterbury
RP Guttmann, W (corresponding author), Univ Canterbury, Dept Comp Sci & Software Engn, Christchurch, New Zealand.
EM walter.guttmann@canterbury.ac.nz
OI Guttmann, Walter/0000-0003-2969-1688
CR Apt K.R., 2009, Texts in Computer Science, DOI 10.1007/978-1-84882-745-5
   Back R.-J., 1998, Refinement Calculus
   BACK RJR, 1990, ACTA INFORM, V27, P583, DOI 10.1007/BF00259469
   BACK RJR, 1995, INFORM PROCESS LETT, V53, P165, DOI 10.1016/0020-0190(94)00206-E
   BACK RJR, 1992, THEOR COMPUT SCI, V100, P365, DOI 10.1016/0304-3975(92)90309-4
   Blanchette JC, 2010, LECT NOTES COMPUT SC, V6172, P131, DOI 10.1007/978-3-642-14052-5_11
   BLOOM SL, 1993, J COMPUT SYST SCI, V46, P381, DOI 10.1016/0022-0000(93)90010-T
   BLOOM SL, 1993, EATCS MONOGRAPHS THE
   Cavalcanti A, 2006, FORM ASP COMPUT, V18, P288, DOI 10.1007/s00165-006-0001-8
   CHANDRA AK, 1981, J ACM, V28, P114, DOI 10.1145/322234.322243
   Cohen E, 2000, LECT NOTES COMPUT SC, V1837, P45
   Conway J.H., 1971, Regular Algebra and Finite Machines
   Davey B. A., 2002, INTRO LATTICES ORDER, V2nd, DOI DOI 10.1017/CBO9780511809088
   Desharnais J, 2008, LECT NOTES COMPUT SC, V5140, P330
   Desharnais J, 2006, ACM T COMPUT LOG, V7, P798, DOI 10.1145/1183278.1183285
   Desharnais J, 2011, SCI COMPUT PROGRAM, V76, P181, DOI 10.1016/j.scico.2010.05.007
   Dijkstra E. W., 1976, A Discipline of Pro-gramming
   Guttmann Walter, 2012, Relational and Algebraic Methods in Computer Science. Proceedings 13th International Conference, RAMiCS 2012, P17, DOI 10.1007/978-3-642-33314-9_2
   Guttmann Walter, 2012, Mathematics of Program Construction. Proceedings 11th International Conference, MPC 2012, P198, DOI 10.1007/978-3-642-31113-0_11
   Guttmann W, 2013, SCI COMPUT PROGRAM, V78, P2064, DOI 10.1016/j.scico.2012.07.009
   Guttmann W, 2012, ACTA INFORM, V49, P343, DOI 10.1007/s00236-012-0162-2
   Guttmann W, 2011, LECT NOTES COMPUT SC, V6991, P617, DOI 10.1007/978-3-642-24559-6_41
   Guttmann W, 2010, LECT NOTES COMPUT SC, V6120, P157, DOI 10.1007/978-3-642-13321-3_11
   Guttmann W, 2009, LECT NOTES COMPUT SC, V5827, P150, DOI 10.1007/978-3-642-04639-1_11
   Hayes IJ, 2010, LECT NOTES COMPUT SC, V6120, P178, DOI 10.1007/978-3-642-13321-3_12
   Hesselink W.H., 2004, MULTIRELATIONS ARE P
   Hoare C. A. R., 1998, Unifying Theories of Programming
   HOARE CAR, 1985, Z MATH LOGIK, V31, P173, DOI 10.1002/malq.19850310905
   HOARE CAR, 1987, COMMUN ACM, V30, P672, DOI 10.1145/27651.27653
   HOARE CAR, 1969, COMMUN ACM, V12, P576, DOI 10.1145/363235.363259
   Huntington EV, 1933, T AM MATH SOC, V35, P274, DOI 10.2307/1989325
   Jackson M, 2009, INT J ALGEBR COMPUT, V19, P937, DOI 10.1142/S0218196709005354
   KOZEN D, 1994, INFORM COMPUT, V110, P366, DOI 10.1006/inco.1994.1037
   Kozen Dexter, 2000, ACM Trans. Comput. Log., V1, P60, DOI DOI 10.1145/343369.343378
   Martin CE, 2007, SCI COMPUT PROGRAM, V65, P140, DOI 10.1016/j.scico.2006.01.007
   McIver AK, 2005, LECT NOTES ARTIF INT, V3835, P534, DOI 10.1007/11591191_37
   McIver A, 2011, LECT NOTES COMPUT SC, V6663, P264, DOI 10.1007/978-3-642-21070-9_20
   Meertens L, 1979, ACM 79, P33
   Möller B, 2007, SCI COMPUT PROGRAM, V65, P195, DOI 10.1016/j.scico.2006.01.010
   Möller B, 2006, LECT NOTES COMPUT SC, V3929, P200
   Möller B, 2006, THEOR COMPUT SCI, V351, P221, DOI 10.1016/j.tcs.2005.09.069
   MORGAN C, 1988, ACM T PROGR LANG SYS, V10, P403, DOI 10.1145/44501.44503
   MORRIS JM, 1987, SCI COMPUT PROGRAM, V9, P287, DOI 10.1016/0167-6423(87)90011-6
   Nishizawa K, 2009, LECT NOTES COMPUT SC, V5827, P276, DOI 10.1007/978-3-642-04639-1_19
   Preoteasa V, 2011, LECT NOTES COMPUT SC, V7021, P140, DOI 10.1007/978-3-642-25032-3_10
   Rewitzky I, 2003, LECT NOTES COMPUT SC, V2929, P256
   Rewitzky I, 2006, LECT NOTES COMPUT SC, V4136, P311
   von Wright J, 2004, SCI COMPUT PROGRAM, V51, P23, DOI 10.1016/j.scico.2003.09.002
NR 48
TC 5
Z9 5
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 1
PY 2014
VL 85
SI SI
BP 224
EP 240
DI 10.1016/j.scico.2013.08.008
PN B
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CC8KX
UT WOS:000350618700007
OA hybrid
DA 2024-07-18
ER

PT J
AU Alpuente, M
   Ballis, D
   Romero, D
AF Alpuente, Maria
   Ballis, Demis
   Romero, Daniel
TI A rewriting logic approach to the formal specification and verification
   of web applications
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Web verification; Rewrite theory; Model checking; LTLR
ID TEMPORAL LOGIC; MODEL; CONSTRUCTION
AB This paper develops a Rewriting Logic framework for the automatic specification and verification of Web applications that considers the critical aspects of concurrent Web interactions, browser navigation features (e.g., forward/back-ward navigation, page refresh, and new window/tab opening), and Web script evaluation. By encompassing the main features of the most popular Web scripting languages (e.g., PHP, ASP, and Java Servlets), our scripting language is powerful enough to model the dynamics of complex Web applications, where the interactions among Web servers and Web browsers are formalized through a landmark communicating protocol that abstracts HTTP. We provide a detailed characterization of browser actions via rewrite rules and show how our models can be naturally model-checked by using the Linear Temporal Logic of Rewriting (LTLR), which is a Linear Temporal Logic that is specifically designed for model-checking rewrite theories. The framework has been completely implemented in Maude, and we report on some successful experiments that we conducted using the Maude LTLR model-checker. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Alpuente, Maria; Romero, Daniel] Univ Politecn Valencia, DSIC ELP, E-46071 Valencia, Spain.
   [Ballis, Demis] Univ Udine, Dipartimento Matemat & Informat, I-33100 Udine, Italy.
C3 Universitat Politecnica de Valencia; University of Udine
RP Romero, D (corresponding author), Univ Politecn Valencia, DSIC ELP, Camino Vera S-N,Apdo 22012, E-46071 Valencia, Spain.
EM alpuente@dsic.upv.es; demis@dimi.uniud.it; dromero@dsic.upv.es
RI ALPUENTE, MARÍA/E-1899-2012
OI ALPUENTE, MARÍA/0000-0002-9268-1178
FU EU (FEDER); Spanish MEC project [TIN2010-21062-C02-02]; Generalitat
   Valenciana [PROMETE02011/052]; European Union Seventh Framework
   Programme (FP7) [246016]; FPI-MEC grant [BES-2008-004860]
FX This work has been partially supported by the EU (FEDER) and the Spanish
   MEC project ref. TIN2010-21062-C02-02, and by Generalitat Valenciana
   ref. PROMETE02011/052. This work was carried out during the tenure by
   Demis Ballis of an ERCIM "Alain Bensoussan" Postdoctoral Fellowship. The
   research leading to these results has received funding from the European
   Union Seventh Framework Programme (FP7/2007-2013) under grant agreement
   no 246016. Daniel Romero was partially supported by FPI-MEC grant
   BES-2008-004860.
CR Alpuente Maria, 2012, FM 2012: Formal Methods. Proceedings of the 18th International Symposium, P28, DOI 10.1007/978-3-642-32759-9_5
   Alpuente M., 2011, ARXIV E PRINTS
   Alpuente M., 2012, SCI COMPUTE IN PRESS
   Alpuente M, 2011, ELECTRON PROC THEOR, P66, DOI 10.4204/EPTCS.61.5
   Alpuente M, 2012, LECT NOTES COMPUT SC, V7180, P62, DOI 10.1007/978-3-642-28717-6_8
   Alpuente M, 2011, LECT NOTES ARTIF INT, V6803, P34, DOI 10.1007/978-3-642-22438-6_5
   Alpuente M, 2010, LECT NOTES COMPUT SC, V6252, P341
   Alpuente M, 2009, LECT NOTES COMPUT SC, V5850, P790, DOI 10.1007/978-3-642-05089-3_50
   [Anonymous], 1992, TEMPORAL LOGIC REACT, DOI DOI 10.1007/978-1-4612-0931-7
   [Anonymous], 2007, LECT NOTES COMPUTER
   Bae K., 2008, ELECT NOTES THEORETI
   Bae K, 2010, LECT NOTES COMPUT SC, V6381, P208, DOI 10.1007/978-3-642-16310-4_14
   Bordin M, 2007, LECT NOTES COMPUT SC, V4498, P114
   Clarke Edmund M., 1983, C RECORD 10 ANN ACM, P117, DOI [DOI 10.1145/567067.567080, 10.1145/567067]
   de Alfaro L, 2001, LECT NOTES COMPUT SC, V2102, P337
   Donini FM, 2006, ELECTRON NOTES THEOR, V151, P19, DOI 10.1016/j.entcs.2005.07.034
   Dwyer M. B., 1999, Proceedings of the 1999 International Conference on Software Engineering (IEEE Cat. No.99CB37002), P411, DOI 10.1109/ICSE.1999.841031
   Eker Steven., 2004, ELECTRON NOTES THEOR, V71, P162, DOI [DOI 10.1016/S1571-0661(05)82534-4, 10.1016/S1571-0661(05)82534-4]
   Fielding R. T, 2002, ACM Transactions on Internet Technology (TOIT), V2, P115, DOI [DOI 10.1145/514183.514185, 10.1145/514183.514185]
   Graunke P, 2003, LECT NOTES COMPUT SC, V2618, P238
   Han M., 2006, 6 INT C WEB ENG ICWE, P329
   Haydar May, 2008, 2008 8th International Conference on Web Engineering (ICWE), P240, DOI 10.1109/ICWE.2008.38
   Holzmann Gerard J., 2003, The SPIN Model Checker
   Homma K, 2011, IEICE T INF SYST, VE94D, P989, DOI 10.1587/transinf.E94.D.989
   HUTH M, 2004, LOGIC COMPUTER SCI
   JOUANNAUD JP, 1983, LECT NOTES COMPUT SC, V154, P361
   Konrad S, 2005, PROC INT CONF SOFTW, P372
   Martí-Oliet N, 2002, THEOR COMPUT SCI, V285, P121, DOI 10.1016/S0304-3975(01)00357-7
   MESEGUER J, 1992, THEOR COMPUT SCI, V96, P73, DOI 10.1016/0304-3975(92)90182-F
   Meseguer J, 2008, THEOR COMPUT SCI, V403, P239, DOI 10.1016/j.tcs.2008.04.040
   Meseguer J, 2008, LECT NOTES COMPUT SC, V5065, P354, DOI 10.1007/978-3-540-68679-8_22
   Message R, 2008, ELECTRON NOTES THEOR, V200, P119, DOI 10.1016/j.entcs.2008.04.096
   Miao HK, 2007, IEEE INT C ENG COMP, P47, DOI 10.1109/ICECCS.2007.30
   Nicola R.D., 1990, LITP Spring School on Theoretical Computer Science, P407
   Open Web Application Security Project, 2007, TOP 10 SEC FLAWS
   Poernomo I, 2010, LECT NOTES COMPUT SC, V6447, P56, DOI 10.1007/978-3-642-16901-4_6
   Queinnec C., 2004, Higher-Order and Symbolic Computation, V17, P277, DOI 10.1007/s10990-004-4866-z
   Terese, 2003, Term Rewriting Systems
   Viry P, 2002, THEOR COMPUT SCI, V285, P487, DOI 10.1016/S0304-3975(01)00366-8
NR 39
TC 8
Z9 8
U1 0
U2 7
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 15
PY 2014
VL 81
SI SI
BP 79
EP 107
DI 10.1016/j.scico.2013.07.014
PG 29
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AB0JS
UT WOS:000331478600004
OA hybrid, Green Published
DA 2024-07-18
ER

PT J
AU Marinho, FG
   Andrade, RMC
   Werner, C
   Viana, W
   Maia, MEF
   Rocha, LS
   Teixeira, E
   Ferreira, JB
   Dantas, VLL
   Lima, F
   Aguiar, S
AF Marinho, Fabiana G.
   Andrade, Rossana M. C.
   Werner, Claudia
   Viana, Windson
   Maia, Marcio E. F.
   Rocha, Lincoln S.
   Teixeira, Eldanae
   Ferreira Filho, Joao B.
   Dantas, Valeria L. L.
   Lima, Fabricio
   Aguiar, Saulo
TI MobiLine: A Nested Software Product Line for the domain of mobile and
   context-aware applications
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Context-awareness; Mobility; Software product line
ID VARIABILITY; MIDDLEWARE; SUPPORT; MODELS
AB Mobile devices are multipurpose and multi-sensor equipments supporting applications able to adapt their behavior according to changes in the user's context (device, location, time, etc.). Meanwhile, the development of mobile and context-aware software is not a simple task, mostly due to the peculiar characteristics of these devices. Although several solutions have been proposed to facilitate their development, reuse is not systematically used throughout the software development life-cycle. In this paper, we discuss an approach for the development of mobile and context-aware software using the Software Product Line (SPL) paradigm. Furthermore, a Nested SPL for the domain of mobile and context-aware applications is presented, lessons learned in the SPL development are discussed and a product for a context-aware visit guide is shown. (C) 2012 Elsevier B.V. All rights reserved.
C1 [Marinho, Fabiana G.; Andrade, Rossana M. C.; Viana, Windson; Maia, Marcio E. F.; Rocha, Lincoln S.; Ferreira Filho, Joao B.; Dantas, Valeria L. L.; Lima, Fabricio; Aguiar, Saulo] Fed Univ Cearca UFC, Comp Sci Dept DC, Grp Comp Networks Software Engn & Syst GREat, BR-60455760 Fortaleza, Ceara, Brazil.
   [Werner, Claudia; Teixeira, Eldanae] Univ Fed Rio de Janeiro, Software Reuse Grp, Syst Engn & Comp Sci Program COPPE, BR-21945970 Rio De Janeiro, RJ, Brazil.
C3 Universidade Federal do Rio de Janeiro
RP Marinho, FG (corresponding author), Fed Univ Cearca UFC, Comp Sci Dept DC, Grp Comp Networks Software Engn & Syst GREat, Campus Pici,Bloco 910, BR-60455760 Fortaleza, Ceara, Brazil.
EM fabiana@great.ufc.br; rossana@great.ufc.br; werner@cos.ufrj.br;
   windson@great.ufc.br; marcio@great.ufc.br; lincoln@great.ufc.br;
   danny@cos.ufrj.br; bosco@great.ufc.br; valerialelli@great.ufc.br;
   fcofabricio@great.ufc.br; sauloaguiar@great.ufc.br
RI Andrade, Rossana M C/K-1790-2015; Werner, Claudia/JZE-5245-2024; DE
   CARVALHO, WINDSON VIANA/E-8998-2015
OI DE CARVALHO, WINDSON VIANA/0000-0002-8627-0823; Rocha,
   Lincoln/0000-0001-5402-8744; Lima Werner, Claudia
   Maria/0000-0002-4231-9621; Maria de Castro Andrade,
   Rossana/0000-0002-0186-2994
FU CNPq [MCT/CNPq 15/2007 - Universal, 484523/2007-4]
FX This work is a result of MobiLine project supported by CNPq (MCT/CNPq
   15/2007 - Universal) under grant number 484523/2007-4.
CR [Anonymous], 3 BRAZ S SOFTW COMP
   [Anonymous], MOB SOFTW PROD LIN D
   [Anonymous], P INT WORKSH SENS AP
   [Anonymous], VAMOS
   [Anonymous], 5 INT WORKSH DYN SOF
   [Anonymous], 2007, SOFTWARE PRODUCT LIN
   [Anonymous], P 10 INT C HUM COMP
   [Anonymous], P 21 BRAZ S SOFTW EN
   [Anonymous], 2000, Generative programming: methods, tools, and applications
   Baldauf M, 2007, INT J AD HOC UBIQ CO, V2, P263, DOI 10.1504/IJAHUC.2007.014070
   Baus J., 2005, Map-based Mobile Services, P193, DOI DOI 10.1007/3-540-26982-7_13
   Bosch J., 2002, Software Product Lines. Second International Conference, SPLC 2. Proceedings (Lecture Notes in Computer Science Vol. 2370), P257
   Bronsted J, 2010, IEEE PERVAS COMPUT, V9, P62, DOI 10.1109/MPRV.2010.11
   Bühne S, 2005, 13TH IEEE INTERNATIONAL CONFERENCE ON REQUIREMENTS ENGINEERING, PROCEEDINGS, P41, DOI 10.1109/RE.2005.45
   CARRIERO N, 1989, COMMUN ACM, V32, P444, DOI 10.1145/63334.63337
   Carton Andrew, 2007, First International Workshop on Software Engineering for Pervasive Computing Applications, Systems, and Environments (SEPCASE '07), DOI 10.1109/SEPCASE.2007.3
   Cetina C, 2009, COMPUTER, V42, P37, DOI 10.1109/MC.2009.309
   Deelstra S, 2005, J SYST SOFTWARE, V74, P173, DOI 10.1016/j.jss.2003.11.012
   Dey AK, 2001, PERS UBIQUIT COMPUT, V5, P4, DOI 10.1007/s007790170019
   Erl T, 2005, SERVICE ORIENTED ARC
   Fernandes Paula, 2008, SPLC WORKSH LER INT, P3
   Fortier A, 2010, J SYST SOFTWARE, V83, P915, DOI 10.1016/j.jss.2009.11.002
   Frakes W. B., 1994, IEEE Software, V11, P14, DOI 10.1109/52.311045
   Freyne Jill, 2009, 2009 International Conference on Computational Science and Engineering (CSE), P1021, DOI 10.1109/CSE.2009.348
   Grimm R, 2004, ACM T COMPUT SYST, V22, P421, DOI 10.1145/1035582.1035584
   Grun Christoph, 2008, 7th International Conference on Mobile Business (ICMB 2008), P171, DOI 10.1109/ICMB.2008.28
   Gu T, 2005, J NETW COMPUT APPL, V28, P1, DOI 10.1016/j.jnca.2004.06.002
   Hartmann H, 2008, SPLC 2008: 12TH INTERNATIONAL SOFTWARE PRODUCT LINE CONFERENCE, PROCEEDINGS, P12, DOI 10.1109/SPLC.2008.15
   Henricksen K, 2006, PERVASIVE MOB COMPUT, V2, P37, DOI 10.1016/j.pmcj.2005.07.003
   Kang Kyo C, 1990, Technical Report
   Kon F, 2000, LECT NOTES COMPUT SC, V1795, P121
   Krueger CW, 2006, COMMUN ACM, V49, P37, DOI 10.1145/1183236.1183262
   Lee J, 2006, SPLC 2006: 10TH INTERNATIONAL SOFTWARE PRODUCT LINE CONFERENCE, PROCEEDINGS, P131
   Lee J, 2006, COMMUN ACM, V49, P55, DOI 10.1145/1183236.1183266
   Dantas VLL, 2009, 2009 24TH INTERNATIONAL SYMPOSIUM ON COMPUTER AND INFORMATION SCIENCES, P553
   Maia MEF, 2009, INTERNATIONAL CONFERENCE ON PERVASIVE SERVICES (ICPS 2009), P93
   Morin B, 2008, LECT NOTES COMPUT SC, V5301, P782, DOI 10.1007/978-3-540-87875-9_54
   Parra Carlos., 2009, Proceedings of the 13th International Software Product Line Conference, SPLC'09, P131
   Preuveneers D, 2007, APPLIED COMPUTING 2007, VOL 1 AND 2, P1165, DOI 10.1145/1244002.1244255
   Reiser MO, 2007, REQUIR ENG, V12, P57, DOI 10.1007/s00766-007-0046-0
   Roman M., 2002, IEEE Pervasive Computing, V1, P74, DOI 10.1109/MPRV.2002.1158281
   Simos M. A., 1995, SIGSOFT Software Engineering Notes, P196, DOI 10.1145/223427.211845
   van der Hoek A, 2004, SCI COMPUT PROGRAM, V53, P285, DOI 10.1016/j.scico.2003.04.003
   Viana W, 2008, J SYST SOFTWARE, V81, P382, DOI 10.1016/j.jss.2007.04.045
   Viana W, 2011, MULTIMED TOOLS APPL, V53, P391, DOI 10.1007/s11042-010-0502-6
   WEISER M, 1991, SCI AM, V265, P94, DOI 10.1038/scientificamerican0991-94
   Zheng D, 2007, LECT NOTES COMPUT SC, V4847, P161
   Zipf A, 2006, COMPUT ENVIRON URBAN, V30, P784, DOI 10.1016/j.compenvurbsys.2006.02.005
NR 48
TC 17
Z9 20
U1 0
U2 6
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 1
PY 2013
VL 78
IS 12
BP 2381
EP 2398
DI 10.1016/j.scico.2012.04.009
PG 18
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 234SL
UT WOS:000325664500007
OA hybrid
DA 2024-07-18
ER

PT J
AU Brauer, J
   King, A
   Kowalewski, S
AF Brauer, Joerg
   King, Andy
   Kowalewski, Stefan
TI Abstract interpretation of microcontroller code: Intervals meet
   congruences
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Embedded systems; Binary code; Abstract interpretation; Linear
   congruences; Intervals
ID STATE-SPACE REDUCTION; CONTROL FLOW; MODEL CHECKING; VARIABLES;
   FRAMEWORK; ANALYZERS; SOFTWARE; SYSTEM
AB Bitwise instructions, loops and indirect data access present challenges to the verification of microcontroller programs. In particular, since registers are often memory mapped, it is necessary to show that an indirect store operation does not accidentally mutate a register. To prove this and related properties, this article advocates using the domain of bitwise linear congruences in conjunction with intervals to derive accurate range information. The paper argues that these two domains complement one another when reasoning about microcontroller code. The paper also explains how SAT solving, which applied with dichotomic search, can be used to recover branching conditions from binary code which, in turn, further improves interval analysis. (C) 2012 Elsevier B.V. All rights reserved.
C1 [Brauer, Joerg; Kowalewski, Stefan] Rhein Westfal TH Aachen, Embedded Software Lab, Aachen, Germany.
   [King, Andy] Portcullis Comp Secur Ltd, Pinner, England.
   [Brauer, Joerg] Verified Syst Int GmbH, Bremen, Germany.
C3 RWTH Aachen University
RP Brauer, J (corresponding author), Rhein Westfal TH Aachen, Embedded Software Lab, Aachen, Germany.
EM brauer@embedded.rwth-aachen.de; a.m.king@kent.ac.uk;
   kowalewski@embedded.rwth-aachen.de
FU DFG [1298]; DFG Cluster of Excellence on Ultra-high Speed Information
   and Communication; German Research Foundation [DFG EXC 89]; Royal
   Society [TG092357, IF081178]; Royal Society [IF081178] Funding Source:
   Royal Society
FX JB was supported, in part, by the DFG research training group 1298
   Algorithmic Synthesis of Reactive and Discrete-Continuous Systems.
   Furthermore, the work of JB and SK was supported, in part, by the DFG
   Cluster of Excellence on Ultra-high Speed Information and Communication,
   German Research Foundation grant DFG EXC 89. AK was funded, in part, by
   a Royal Society travel grant, reference TG092357, and a Royal Society
   Industrial Fellowship, reference IF081178. The authors want to thank Edd
   Barrett, Sebastian Biallas, Chris Coppins, Bastian Schlich, Harald
   Sondergaard and Axel Simon for interesting discussions.
CR [Anonymous], 2001, MODEL CHECKING
   Atmel Corporation, 2010, 8 BIT AVR INSTR SET
   Bagnara R, 2007, LECT NOTES COMPUT SC, V4407, P219, DOI 10.1007/978-3-540-71410-1_16
   Baier C, 2008, PRINCIPLES OF MODEL CHECKING, P1
   Balakrishnan G, 2005, LECT NOTES COMPUT SC, V3576, P158
   Balakrishnan G., 2005, Verified Software: Theories, Tools, Experiments. First IFIP TC 2/WG 2.3 Conference, VSTTE 2005. (Lecture Notes in Computer Science vol. 4171), P202
   Balakrishnan G., 2007, THESIS U WISCONSIN M
   Balakrishnan G, 2010, ACM T PROGR LANG SYS, V32, DOI 10.1145/1749608.1749612
   Ball T., 2012, LECT NOTES COMPUTER, V4590, P491
   Bardin Sebastien, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P165, DOI 10.1007/978-3-642-22110-1_13
   Bardin S, 2011, LECT NOTES COMPUT SC, V6538, P54, DOI 10.1007/978-3-642-18275-4_6
   Barrett E, 2010, ELECTRON NOTES THEOR, V267, P17, DOI 10.1016/j.entcs.2010.09.003
   Biallas S., 2012, LECT NOTES COMPUTER
   Bozga M, 1999, LECT NOTES COMPUT SC, V1694, P164
   Brauer Jorg, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P191, DOI 10.1007/978-3-642-22110-1_17
   Brauer J., 2010, SOFTWARE COMPILERS E
   Brauer J, 2011, LECT NOTES COMPUT SC, V6602, P97, DOI 10.1007/978-3-642-19718-5_6
   Brauer J, 2010, LECT NOTES COMPUT SC, V6337, P167, DOI 10.1007/978-3-642-15769-1_11
   Brauer J, 2010, LECT NOTES COMPUT SC, V6371, P82, DOI 10.1007/978-3-642-15898-8_6
   Brumley David, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P463, DOI 10.1007/978-3-642-22110-1_37
   Codish M, 2008, THEOR PRACT LOG PROG, V8, P121, DOI 10.1017/S1471068407003146
   Corbett J.C., 2000, ICSE, P762
   Cousot P, 2005, LECT NOTES COMPUT SC, V3444, P21
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Cousot P, 2009, FORM METHOD SYST DES, V35, P229, DOI 10.1007/s10703-009-0089-6
   Cousot Patrick, 1978, P 5 ACM SIGACT SIGPL, p84S96, DOI DOI 10.1145/512760.512770
   Das M, 2002, ACM SIGPLAN NOTICES, V37, P57, DOI 10.1145/543552.512538
   Debray S., 1998, Conference Record of POPL '98: 25th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P12, DOI 10.1145/268946.268948
   Eide Eric, 2008, EMSOFT '08: Proceedings of the 8th ACM International Conference on Embedded Software, P255, DOI DOI 10.1145/1450058.1450093
   Elder M, 2011, LECT NOTES COMPUT SC, V6887, P198, DOI 10.1007/978-3-642-23702-7_17
   Engler D, 2000, USENIX ASSOCIATION PROCEEDINGS OF THE FOURTH SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P1
   Flexeder A, 2010, LECT NOTES COMPUT SC, V6461, P188, DOI 10.1007/978-3-642-17164-2_14
   GODEFROID P, 1991, LECT NOTES COMPUT SC, V531, P176, DOI 10.1007/BFb0023731
   Gopan D, 2005, ACM SIGPLAN NOTICES, V40, P338, DOI 10.1145/1047659.1040333
   GRANGER P, 1991, LECT NOTES COMPUT SC, V493, P169
   GRANGER P, 1989, INT J COMPUT MATH, V30, P165, DOI 10.1080/00207168908803778
   Gulavani B.S., 2006, P FSE ACM, P117, DOI DOI 10.1145/1181775.1181790
   Gulwani S, 2008, ACM SIGPLAN NOTICES, V43, P235, DOI 10.1145/1328897.1328468
   Havelund K., 2000, Int. J. Softw. Tools Technol. Transfer, V2, P366, DOI [DOI 10.1007/S100090050043, 10.1007/s100090050043]
   Huuck R, 2008, LECT NOTES COMPUT SC, V5311, P216, DOI 10.1007/978-3-540-88387-6_17
   KARR M, 1976, ACTA INFORM, V6, P133, DOI 10.1007/BF00268497
   Kinder J, 2009, LECT NOTES COMPUT SC, V5403, P214, DOI 10.1007/978-3-540-93900-9_19
   King A., 2010, LNCS, V5944, P281
   King A, 2008, LECT NOTES COMPUT SC, V5123, P281
   Kroening D, 2008, TEXTS THEOR COMPUT S, P1
   Kroening D, 2008, LECT NOTES COMPUT SC, V5311, P111, DOI 10.1007/978-3-540-88387-6_10
   Laviron V, 2009, LECT NOTES COMPUT SC, V5403, P229, DOI 10.1007/978-3-540-93900-9_20
   Le Berre D., 2010, SAT4J BRINGING POWER
   Lim J, 2008, LECT NOTES COMPUT SC, V4959, P36
   Monniaux D, 2010, LOG METH COMPUT SCI, V6, DOI 10.2168/LMCS
   Monniaux D, 2010, LECT NOTES COMPUT SC, V6174, P585, DOI 10.1007/978-3-642-14295-6_51
   Monniaux D, 2009, ACM SIGPLAN NOTICES, V44, P140, DOI 10.1145/1594834.1480899
   Müller-Olm M, 2007, ACM T PROGR LANG SYS, V29, DOI 10.1145/1275497.1275504
   Müller-Olm M, 2005, LECT NOTES COMPUT SC, V3444, P46
   PLAISTED DA, 1986, J SYMB COMPUT, V2, P293, DOI 10.1016/S0747-7171(86)80028-1
   Regehr J, 2004, ACM SIGPLAN NOTICES, V39, P133, DOI 10.1145/1037187.1024410
   Regehr J, 2003, LECT NOTES COMPUT SC, V2855, P306
   Reinbacher T., 2011, 2011 International Conference on Embedded Software (EMSOFT 2011), P117
   Reps T, 2004, LECT NOTES COMPUT SC, V2937, P252
   Reps T., 1995, Conference Record of POPL'95: 22nd ACM SIGPLAN-SIGACT Symposium Principles of Programming Languages, P49, DOI 10.1145/199448.199462
   Reps T, 2008, LECT NOTES COMPUT SC, V4959, P16
   Robby, 2006, TAIC PART - TESTING: ACADEMIC & INDUSTRIAL CONFERENCE - PRACTICE AND RESEARCH TECHNIQUES, PROCEEDINGS, P3
   Sankaranarayanan S, 2004, LECT NOTES COMPUT SC, V3148, P53
   Schlich Bastian, 2009, International Journal on Software Tools for Technology Transfer, V11, P187, DOI 10.1007/s10009-009-0106-5
   Schlich B., 2009, HARDWARE SOFTWARE VE, P5, DOI DOI 10.1007/978-3-642-19237-1_
   Schlich B, 2011, SCI COMPUT PROGRAM, V76, P100, DOI 10.1016/j.scico.2010.03.006
   Schlich B, 2010, ACM T EMBED COMPUT S, V9, DOI 10.1145/1721695.1721702
   Sepp A., 2011, 2011 18th Working Conference on Reverse Engineering, P357, DOI 10.1109/WCRE.2011.50
   Simon Axel, 2010, Higher-Order and Symbolic Computation, V23, P87, DOI 10.1007/s10990-010-9062-8
   Simon A, 2008, LECT NOTES COMPUT SC, V5079, P315
   Simon A, 2007, LECT NOTES COMPUT SC, V4634, P121
   Song D, 2008, LECT NOTES COMPUT SC, V5352, P1, DOI 10.1007/978-3-540-89862-7_1
   Thakur A, 2010, LECT NOTES COMPUT SC, V6174, P288, DOI 10.1007/978-3-642-14295-6_27
   Tseitin G.S., 1983, STUDIES CONSTRUCTI 2, P466, DOI DOI 10.1007/978-3-642-81955-128
   Valmari A., 1998, Lectures on Petri Nets I: Basic Models. Advances in Petri Nets, P429
   Weissenbacher G, 2010, THESIS OXFORD U
   Yang XJ, 2011, ACM SIGPLAN NOTICES, V46, P283, DOI 10.1145/1993316.1993532
NR 77
TC 3
Z9 3
U1 0
U2 4
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUL 1
PY 2013
VL 78
IS 7
BP 862
EP 883
DI 10.1016/j.scico.2012.06.001
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 164PJ
UT WOS:000320421700007
OA Bronze, Green Accepted, Green Submitted
DA 2024-07-18
ER

PT J
AU Kleijn, J
   Koutny, M
AF Kleijn, Jetty
   Koutny, Maciej
TI Step coverability algorithms for communicating systems
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Petri nets; Step coverability tree; Maximal concurrency; Communicating
   components; Determinism
ID PETRI NETS; ISSUES
AB Coverability (of states) is an important, useful notion for the behavioural analysis of distributed dynamic systems. For systems like Petri nets, the classical Karp-Miller coverability tree construction is the basis for algorithms to decide questions related to the capacity of local states. We consider a modification of this construction which would allow one to deal with dynamic behaviour consisting of concurrent steps rather than single occurrences of transitions. This leads to an action-based extension of the notion of coverability, viewing bandwidth as a resource. However, when certain constraints are imposed on the steps, systems may exhibit non-monotonic behaviour. In those cases, new criteria for the termination of the step coverability tree construction are needed. We investigate a general class of Petri nets modelling systems that consist of components communicating through shared buffers and that operate under a maximally concurrent step semantics. Based on the description of their behaviour, we derive a correctly terminating step coverability tree construction for these Petri nets. (c) 2010 Elsevier B.V. All rights reserved.
C1 [Kleijn, Jetty] Leiden Univ, LIACS, NL-2300 RA Leiden, Netherlands.
   [Koutny, Maciej] Newcastle Univ, Sch Comp Sci, Newcastle Upon Tyne NE1 7RU, Tyne & Wear, England.
C3 Leiden University; Leiden University - Excl LUMC; Newcastle University -
   UK
RP Kleijn, J (corresponding author), Leiden Univ, LIACS, POB 9512, NL-2300 RA Leiden, Netherlands.
EM kleijn@liacs.nl; maciej.koutny@ncl.ac.uk
FU RAEEPSRC DAVAC; EPSRC VERDAD; NSFC [60910004]; EPSRC [EP/G037809/1]
   Funding Source: UKRI
FX This research was partially supported by the RAE&EPSRC DAVAC and EPSRC
   VERDAD projects, and NSFC Grant 60910004.
CR BURKHARD HD, 1983, LECT NOTES COMPUT SC, V148, P86
   Busi N, 2002, THEOR COMPUT SCI, V275, P127, DOI 10.1016/S0304-3975(01)00127-X
   Carloni LP, 2006, FORM METHOD SYST DES, V28, P93, DOI 10.1007/s10703-006-7842-x
   Commoner F., 1971, Journal of Computer and System Sciences, V5, P511, DOI 10.1016/S0022-0000(71)80013-2
   Darondeau P, 2008, LECT NOTES COMPUT SC, V5201, P310, DOI 10.1007/978-3-540-85361-9_26
   Desel Jorg., 1998, PLACETRANSITION PETR, P122, DOI [10.1007/3-540-65306-615, DOI 10.1007/3-540-65306-615]
   Ghamarian AH, 2006, PROCEEDINGS OF FORMAL METHODS IN COMPUTER AIDED DESIGN, P68
   Ghamarian A. H., 2006, P 6 INT C APPL CONC, P25, DOI [DOI 10.1109/ACSD.2006.33, 10.1109/ACSD]
   Hack M., 1975, 59 MIT PROJ MAC
   Karp R. M., 1969, J COMPUT SYST SCI, V3, P147, DOI DOI 10.1016/S0022-0000(69)80011-5
   Kleijn J., 2008, PERSPECTIVES CONCURR, P264
   Kleijn J, 2010, LECT NOTES COMPUT SC, V5961, P178
   Klein Jetty, 2006, Journal of Automata, Languages and Combinatorics, V11, P321
   Krepska E, 2008, LECT N BIOINFORMAT, V5054, P48, DOI 10.1007/978-3-540-68413-8_4
   Paun G., 2002, MEMBRANE COMPUTING I
   Peterson J.L., 1981, Petri Net Theory and the Modeling of Systems
   Reisig W., 1998, Lecture Notes in Computer Science, V1491
   Valmari A., 1998, Lectures on Petri Nets I: Basic Models. Advances in Petri Nets, P429
   Wimmel H., 2007, THESIS C VONOSSIETZK
   YOELI M, 1987, ADV PETRI NETS, P605
   [No title captured]
NR 21
TC 0
Z9 0
U1 0
U2 1
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUL 1
PY 2012
VL 77
IS 7-8
SI SI
BP 955
EP 967
DI 10.1016/j.scico.2010.11.003
PG 13
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 944DU
UT WOS:000304179400011
OA Bronze
DA 2024-07-18
ER

PT J
AU Bonsangue, M
   Clarke, D
   Silva, A
AF Bonsangue, Marcello
   Clarke, Dave
   Silva, Alexandra
TI A model of context-dependent component connectors
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Coordination; Context dependency; Component connector; Reo
ID COORDINATION MODEL; REO; AUTOMATA; ALGEBRA
AB Recent approaches to component-based software engineering employ coordinating connectors to compose components into software systems. For maximum flexibility and reuse such connectors can themselves be composed, resulting in an expressive calculus of connectors whose semantics encompasses complex combinations of synchronisation, mutual exclusion, non-deterministic choice and state-dependent behaviour.
   To increase the expressiveness of connectors, notions of context-dependent behaviour have been proposed. Context dependency can be used can express the priority of one behaviour over another and the inhibition of actions due to changing context. The notion of context we consider in this paper is given by the pending activities on the ports of a connector. Context-dependent behaviour occurs whenever the choices available to a connector change non-monotonically as its context changes.
   Capturing context-dependent behaviour in formal models is non-trivial, as it is unclear how to propagate context information through composition. In this paper we present an intuitive automata-based formal model of context-dependent connectors, and argue that it is superior to previous attempts at such a model for the coordination language Reo. (C) 2011 Elsevier B.V. All rights reserved.
C1 [Clarke, Dave] Katholieke Univ Leuven, Dept Comp Sci, Louvain, Belgium.
   [Bonsangue, Marcello] Leiden Univ, LIACS, NL-2300 RA Leiden, Netherlands.
C3 KU Leuven; Leiden University; Leiden University - Excl LUMC
RP Clarke, D (corresponding author), Katholieke Univ Leuven, Dept Comp Sci, Louvain, Belgium.
EM dave.clarke@cs.kuleuven.be
OI Bonsangue, Marcello/0000-0003-3746-3618
CR Arbab F, 2005, SCI COMPUT PROGRAM, V55, P3, DOI 10.1016/j.scico.2004.05.010
   Arbab F, 2004, MATH STRUCT COMP SCI, V14, P329, DOI 10.1017/S0960129504004153
   Arbab F, 2003, LECT NOTES COMPUT SC, V2755, P34
   ARBAB F, 1993, CONCURRENCY-PRACT EX, V5, P23, DOI 10.1002/cpe.4330050103
   Arbab F, 2009, LECT NOTES COMPUT SC, V5486, P37, DOI 10.1007/978-3-642-03429-9_4
   Arbab F, 2009, LECT NOTES COMPUT SC, V5521, P268, DOI 10.1007/978-3-642-02053-7_14
   Baier C, 2006, SCI COMPUT PROGRAM, V61, P75, DOI 10.1016/j.scico.2005.10.008
   Barbosa MA, 2009, SCI COMPUT PROGRAM, V74, P671, DOI 10.1016/j.scico.2008.09.019
   Barbosa MA, 2007, ELECTRON NOTES THEOR, V183, P89, DOI 10.1016/j.entcs.2007.01.063
   Bliudze S, 2008, IEEE T COMPUT, V57, P1315, DOI 10.1109/TC.2008.26
   Bonsangue M, 2009, LECT NOTES COMPUT SC, V5521, P184, DOI 10.1007/978-3-642-02053-7_10
   Bruni R, 2006, THEOR COMPUT SCI, V366, P98, DOI 10.1016/j.tcs.2006.07.005
   Clarke D, 2007, SCI COMPUT PROGRAM, V66, P205, DOI 10.1016/j.scico.2007.01.009
   Clarke D, 2009, ELECTRON NOTES THEOR, V229, P43, DOI 10.1016/j.entcs.2009.06.028
   Corradini A., 2009, LECT NOTES COMPUTER, V5486
   Costa David, 2010, THESIS VRIJ U AMSTER
   DEBOER FS, 1993, MIT PS LOG, P315
   Fiadeiro JL, 2003, LECT NOTES COMPUT SC, V3188, P177
   Field John, 2009, LECT NOTES COMPUTER, V5521
   Fournet C, 2002, LECT NOTES COMPUT SC, V2395, P268
   GELERNTER D, 1985, ACM T PROGR LANG SYS, V7, P80, DOI 10.1145/2363.2433
   Izadi M, 2008, LECT NOTES COMPUT SC, V5160, P156, DOI 10.1007/978-3-540-85762-4_11
   Izadi M, 2008, SEFM 2008: SIXTH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING AND FORMAL METHODS, PROCEEDINGS, P303, DOI 10.1109/SEFM.2008.24
   Khosravi R, 2008, LECT NOTES COMPUT SC, V5052, P169, DOI 10.1007/978-3-540-68265-3_11
   Koehler C., 2009, P SAC 2009, P1369, DOI DOI 10.1145/1529282.1529587
   Koehler C, 2009, LECT NOTES COMPUT SC, V5486, P221, DOI 10.1007/978-3-642-03429-9_15
   Kozen D., 2003, Matematica Contemporanea, V24, P117
   Kozen Dexter, 2008, COALGEBRAIC THEORY K
   Lee B, 1998, 1998 INTERNATIONAL CONFERENCE ON APPLICATION OF CONCURRENCY TO SYSTEM DESIGN, PROCEEDINGS, P34, DOI 10.1109/CSD.1998.657537
   Liu XJ, 2001, IEEE SYMPOSIA ON HUMAN-CENTRIC COMPUTING LANGUAGES AND ENVIRONMENTS, PROCEEDINGS, P50
   Maraikar Z, 2008, LECT NOTES COMPUT SC, V5364, P70, DOI 10.1007/978-3-540-89652-4_9
   Misra Jayadev, 2006, J SOFTW SYST MOD MAY
   Mousavi MR, 2006, ELECTRON NOTES THEOR, V154, P83, DOI 10.1016/j.entcs.2005.12.034
   NIERSTRASZ O, 1999, IFIP C P, V139
   Rutten J, 2000, P WODES 2000 KLUW, P31
   SCHOLTEN JVG, 2007, THESIS LEIDEN U
   Shaw M., 1996, SOFTWARE ARCHITECTUR
   Szyperski C., 2002, Component Software: Beyond Object-Oriented Programming
   Vogler W., 1992, MODULAR CONSTRUCTION
NR 39
TC 8
Z9 10
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 1
PY 2012
VL 77
IS 6
SI SI
BP 685
EP 706
DI 10.1016/j.scico.2011.01.006
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 931AO
UT WOS:000303186500003
OA Bronze, Green Published
DA 2024-07-18
ER

PT J
AU Ritson, CG
   Sampson, AT
   Barnes, FRM
AF Ritson, Carl G.
   Sampson, Adam T.
   Barnes, Frederick R. M.
TI Multicore scheduling for lightweight communicating processes
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Concurrency; Multicore; Process-oriented; Scheduling
AB Process-oriented programming is a design methodology in which software applications are constructed from communicating concurrent processes. A typical process-oriented design involves the composition of a large number of small isolated component processes. These concurrent components allow for the scalable parallel execution of the resulting application on both shared-memory and distributed-memory architectures. In this paper we present a runtime designed to support process-oriented programming by providing lightweight processes and communication primitives. The runtime's scheduler, implemented using lock-free algorithms, automatically executes concurrent components in parallel on multicore systems. Heuristics dynamically group processes into cache-affine work units based on communication patterns. Work units are then distributed via wait-free work-stealing. Initial performance analysis shows that, using the algorithms presented in this paper, process-oriented software can execute with an efficiency approaching that of optimised sequential and coarse-grain threaded designs. (C) 2011 Elsevier B.V. All rights reserved.
C1 [Ritson, Carl G.; Sampson, Adam T.; Barnes, Frederick R. M.] Univ Kent, Sch Comp, Canterbury, Kent, England.
C3 University of Kent
RP Ritson, CG (corresponding author), Univ Kent, Sch Comp, Canterbury, Kent, England.
EM cgr@kent.ac.ul; ats@offog.org; frmb@kent.ac.uk
OI Ritson, Carl/0000-0002-9265-8816
FU EPSRC [EP/D061822/1]; EPSRC [EP/D061822/1, EP/E049419/1] Funding Source:
   UKRI
FX We thank Richard Jones for his feedback on this research. We would also
   like to thank the anonymous referees for their detailed comments. This
   work was funded by EPSRC grant EP/D061822/1.
CR ACHARYA A, 1992, IEEE T PARALL DISTR, V3, P477, DOI 10.1109/71.149965
   Amdahl G. M., 1967, P SPRING JOINT COMP, P483, DOI DOI 10.1145/1465482.1465560
   Andrews P.S., 2008, P 11 INT C ART LIF
   [Anonymous], 1999, Communicating and Mobile Systems: The Calculus
   [Anonymous], 1994, The SPARC Architecture Manual, Version 9
   [Anonymous], INT THREAD BUILD BLO
   [Anonymous], 2008, OPENMP APPL PROGRAM
   Armstrong Joe, 1996, Concurrent Programming in Erlang
   ATHAS WC, 1988, COMPUTER, V21, P9, DOI 10.1109/2.73
   ATTIYA H, 1994, J ACM, V41, P725, DOI 10.1145/179812.179902
   Barnes F.R.M., 2006, FRAMEWORK LIGHTWEIGH
   Barnes F.R.M., 2003, THESIS U KENT
   Barron I.M., 1983, MINIMICR W 83 SAN FR, V2, P1
   Blumofe RD, 1999, J ACM, V46, P720, DOI 10.1145/324133.324234
   BLUMOFE RD, 1995, SIGPLAN NOTICES, V30, P207
   Debattista K., 2003, IEE Proceedings-Software, V150, P137, DOI 10.1049/ip-sen:20030127
   Felber Pascal., 2007, TRANSACT
   Fluet Matthew., 2007, Proceedings of the 2007 Workshop on Declarative Aspects of Multicore Programming, DAMP '07, P37
   Foster I, 1996, ACM T PROGR LANG SYS, V18, P454, DOI 10.1145/233561.233565
   Fraser K, 2007, ACM T COMPUT SYST, V25, pA1, DOI 10.1145/1233307.1233309
   Geist A., 1994, PARALLEL VIRTUAL MAC
   Gordon MI, 2006, ACM SIGPLAN NOTICES, V41, P151, DOI 10.1145/1168919.1168877
   Gropp W., 1994, USING MPI PORTABLE P
   Harris Tim., 2005, Proceedings of the 2005 ACM SIGPLAN Workshop on Haskell, Haskell '05, P49
   HERLIHY M, 1993, ACM T PROGR LANG SYS, V15, P745, DOI 10.1145/161468.161469
   HERLIHY M, 1991, ACM T PROGR LANG SYS, V13, P124, DOI 10.1145/114005.102808
   HEWITT C, 1977, ARTIF INTELL, V8, P323, DOI 10.1016/0004-3702(77)90033-9
   Hill M. D., 1995, Digest of Papers. COMPCON '95. Technologies for the Information Superhighway (Cat. No.95CH35737), P327, DOI 10.1109/CMPCON.1995.512404
   HOARE CAR, 1978, COMMUN ACM, V21, P666, DOI 10.1145/359576.359585
   INMOS Limited, 1993, 72TRN24001 INMOS LTD
   Jacobsen CL, 2004, CONCUR SYST ENGN SER, V62, P99
   Kaieda A, 2001, CONCURR COMP-PRACT E, V13, P141, DOI 10.1002/cpe.551
   Kudlur M, 2008, ACM SIGPLAN NOTICES, V43, P114, DOI 10.1145/1379022.1375596
   Lea Doug, 2000, JAVA, P36
   Lu H., 1995, P 1995 ACMIEEE C SUP
   MAY D, 1983, SIGPLAN NOTICES, V18, P69, DOI 10.1145/948176.948183
   May M., 1993, Networks, Routers Transputers
   Odersky M., 2009, THEORETICAL COMPUTER, V410
   Pettersson M., 2002, FUNCTIONAL LOGIC PRO, P228
   Pierce B. C., 1995, Theory and Practice of Parallel Programming. International Workshop TPPP '94. Proceedings, P187, DOI 10.1007/BFb0026570
   Pierce BC, 2000, FOUNDAT COMPUT, P455
   Reppy JohnH., 1999, CONCURRENT PROGRAMMI
   Reynolds CW., 1987, SIGGRAPH Comput. Graph., V21, P25, DOI [10.1145/37402.37406, DOI 10.1145/37402.37406]
   Ritson C.G., 2009, CONCURRENT SYSTEMS E, V67, P145
   Ritson CG, 2007, CONCUR SYST ENGN SER, V65, P249
   Roscoe A.W., 2005, THEORY PRACTICE CONC
   Savage S, 1997, ACM T COMPUT SYST, V15, P391, DOI 10.1145/269005.266641
   Schweigler M, 2006, THESIS U KENT CANTER
   Sodan AC, 2005, HPCS 2005: 19th International Symposium on High Performance Computing Systems and Applications, Proceedings, P131
   Vella K., 1998, THESIS U KENT
   VONEICKEN T, 1992, ACM COMP AR, V20, P256, DOI 10.1145/146628.140382
   WELCH P, 1993, TRANSPUT OCCAM ENG S, V36, P981
   Welch P.H., 2001, P INT C PAR DISTR PR, V1, P20
   Welch P, 2005, CONCUR SYST ENGN SER, V63, P289
   Welch PH, 2005, LECT NOTES COMPUT SC, V3525, P175
NR 55
TC 2
Z9 5
U1 0
U2 8
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 1
PY 2012
VL 77
IS 6
SI SI
BP 727
EP 740
DI 10.1016/j.scico.2011.04.006
PG 14
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 931AO
UT WOS:000303186500005
OA Green Submitted, Green Accepted
DA 2024-07-18
ER

PT J
AU Ryssel, U
   Ploennigs, J
   Kabitzsch, K
AF Ryssel, Uwe
   Ploennigs, Joern
   Kabitzsch, Klaus
TI Automatic library migration for the generation of hardware-in-the-loop
   models
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Generative programming; Function-block-based design; Library migration;
   Structural comparison
AB Embedded systems are widely used in several applications nowadays. As they integrate hard- and software elements, their functionality and reliability are often tested by hardware-in-the-loop methods, in which the system under test runs in a simulated environment. Due to the rising complexity of the embedded functions, performance limitations and practicability reasons, the simulations are often specialized to test specific aspects of the embedded system and develop a high diversity by themselves. This diversity is difficult to manage for a user and results in erroneously selected test components and compatibility problems in the test configuration. This paper presents a generative programming approach that handles the diversity of test libraries. Compatibility issues are explicitly evaluated by a new interface concept. Furthermore, a novel model analyzer facilitates the efficient application in practice by migrating existing libraries. The approach is evaluated for an example from the automotive domain using MATLAB/Simulink. (C) 2010 Elsevier B.V. All rights reserved.
C1 [Ryssel, Uwe; Ploennigs, Joern; Kabitzsch, Klaus] Tech Univ Dresden, Dept Comp Sci, Inst Appl Comp Sci, Dresden, Germany.
C3 Technische Universitat Dresden
RP Ryssel, U (corresponding author), Tech Univ Dresden, Dept Comp Sci, Inst Appl Comp Sci, Dresden, Germany.
EM uwe.ryssel@tu-dresden.de; joern.ploennigs@tu-dresden.de;
   klaus.kabitzsch@tu-dresden.de
OI Ploennigs, Joern/0000-0002-6320-8891
CR [Anonymous], IEEE INT WORKSH FACT
   [Anonymous], 2000, Generative programming: methods, tools, and applications
   Biggerstaff T. J., 1994, Proceedings. Third International Conference on Software Reuse: Advances in Software Reusability (Cat. No.94TH06940), P102, DOI 10.1109/ICSR.1994.365806
   Chen YPP, 2006, INFORM SCIENCES, V176, P2771, DOI 10.1016/j.ins.2005.11.015
   Czarnecki K, 2002, LECT NOTES COMPUT SC, V2487, P156
   Czarnecki K, 2000, LECT NOTES COMPUT SC, V1766, P25
   Dalal S. R., 1999, Proceedings of the 1999 International Conference on Software Engineering (IEEE Cat. No.99CB37002), P285, DOI 10.1109/ICSE.1999.841019
   Diedrich C, 2004, ISA T, V43, P123, DOI 10.1016/S0019-0578(07)60025-1
   Doshi P, 2009, J WEB SEMANT, V7, P90, DOI 10.1016/j.websem.2008.12.001
   Draheim D, 2005, ACM SIGPLAN NOTICES, V40, P29, DOI 10.1145/1089851.1089857
   Dziobek C., 2008, MATHWORKS VIRT AUT C
   Fahndrich M., 2006, GPCE 06 P 5 INT C GE, P275, DOI DOI 10.1145/1173706.1173748
   FLOYD RW, 1962, COMMUN ACM, V5, P345, DOI 10.1145/367766.368168
   Jain AK, 1999, ACM COMPUT SURV, V31, P264, DOI 10.1145/331499.331504
   Jia Liu, 2006, 28th International Conference on Software Engineering Proceedings, P112
   Kastner Christian, 2009, P INT C GEN PROGR CO, P157, DOI DOI 10.1145/1621607.1621632
   Kelter U., 2005, SOFTWARE ENG, P105
   Kendall IR, 1999, CONTROL ENG PRACT, V7, P1343, DOI 10.1016/S0967-0661(99)00103-3
   Lee KC, 2004, IEEE IND ELEC, P2137
   Levenshtein V. I., 1966, SOV PHYS DOKL, V10, P707
   McMurran R., 2006, The Institution of Engineering and Technology Hybrid Vehicle Conference 2006, P201
   Melnik S, 2002, PROC INT CONF DATA, P117, DOI 10.1109/ICDE.2002.994702
   Nayak R, 2007, KNOWL-BASED SYST, V20, P336, DOI 10.1016/j.knosys.2006.08.006
   Reorda M.S., 2006, 12 IEEE INT S ON LIN, P229
   Ryssel U., 2007, 1 WORKSH AUT PROGR G
   Schlee M., 2004, Proceedings of the Working Conference on Advanced Visual Interfaces, AVI '04, P403
   Schmidt M., 2007, SE GI TAG SOFTW ENG
   Svahnberg M, 2002, LECT NOTES COMPUT SC, V2290, P143
   Trujillo Salvador., 2006, GPCE 06 P 5 INT C GE, P191
   Utting M., 2006, Practical Model-Based Testing
   Varró G, 2006, ELECTRON NOTES THEOR, V152, P191, DOI 10.1016/j.entcs.2005.10.025
   *W3C, EXT MARK LANG XML
   Wang HJ, 2009, ADV ENG INFORM, V23, P1, DOI 10.1016/j.aei.2008.05.005
   Wenzel S., 2006, 1 INT WORKSH PATT DE
   Yoshimura K., 2006, P 6 ACM IEEE INT C E, P63
NR 35
TC 15
Z9 15
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 1
PY 2012
VL 77
IS 2
SI SI
BP 83
EP 95
DI 10.1016/j.scico.2010.06.005
PG 13
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 867OX
UT WOS:000298464800002
OA Bronze
DA 2024-07-18
ER

PT J
AU Laval, J
   Denier, S
   Ducasse, S
   Falleri, JR
AF Laval, Jannik
   Denier, Simon
   Ducasse, Stephane
   Falleri, Jean-Remy
TI Supporting simultaneous versions for software evolution assessment
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Impact analysis; Change simulation; Simultaneous version; Software
   evolution
ID CHANGE IMPACT; MODEL
AB When reengineering software systems, maintainers should be able to assess and compare multiple change scenarios for a given goal, so as to choose the most pertinent one. Because they implicitly consider one single working copy, revision control systems do not scale up well to perform simultaneous analyses of multiple versions of systems. We designed Orion, an interactive prototyping tool for reengineering, to simulate changes and compare their impact on multiple versions of software source code models. Our approach offers an interactive simulation of changes, reuses existing assessment tools, and has the ability to hold multiple and branching versions simultaneously in memory. Specifically, we devise an infrastructure which optimizes memory usage of multiple versions for large models. This infrastructure uses an extension of the FAMIX source code meta-model but it is not limited to source code analysis tools since it can be applied to models in general. In this paper, we validate our approach by running benchmarks on memory usage and computation time of model queries on large models. Our benchmarks show that the Orion approach scales up well in terms of memory usage, while the current implementation could be optimized to lower its computation time. We also report on two large case studies on which we applied Orion. (C) 2010 Elsevier B.V. All rights reserved.
C1 [Laval, Jannik; Denier, Simon; Ducasse, Stephane; Falleri, Jean-Remy] INRIA Lille Nord Europe, RMoD Team, Lille, France.
RP Laval, J (corresponding author), INRIA Lille Nord Europe, RMoD Team, Lille, France.
EM jannik.laval@inria.fr
OI Laval, Jannik/0000-0002-7155-5762; Falleri,
   Jean-Remy/0000-0002-8284-7218; Ducasse, Stephane/0000-0001-6070-6599
CR Abdeen H, 2009, WORK CONF REVERSE EN, P103, DOI 10.1109/WCRE.2009.13
   Abdi MK, 2006, EUROMICRO CONF PROC, P310, DOI 10.1109/EUROMICRO.2006.20
   Abdi M.K., 2009, P LMO 09
   Antoniol G., 1999, Proceedings Sixth International Software Metrics Symposium (Cat. No.PR00403), P250, DOI 10.1109/METRIC.1999.809746
   Bohner S. A., 1996, SOFTWARE CHANGE IMPA
   Buckley J, 2005, J SOFTW MAINT EVOL-R, V17, P309, DOI 10.1002/smr.319
   Cai Y., 2007, 5 INT WORKSHOP SOFTW, P3
   Chaumun MA, 2002, SCI COMPUT PROGRAM, V45, P155, DOI 10.1016/S0167-6423(02)00058-8
   CHIKOFSKY EJ, 1990, IEEE SOFTWARE, V7, P13, DOI 10.1109/52.43044
   Demeyer S., 2001, FAMIX 2 1 FAMOOS INF
   Denker Marcus., 2007, ICDL '07, P25
   Dig D, 2007, PROC INT CONF SOFTW, P427
   Ducasse S, 2009, SOFTW SYST MODEL, V8, P5, DOI 10.1007/s10270-008-0081-4
   Easterbrook Steve, 2008, SELECTING EMPIRICAL
   Ebraert P., 2009, THESIS VRIJE U BRUSS
   Girba T., 2005, THESIS U BERN BERN
   Han J, 1997, EIGHTH IEEE INTERNATIONAL WORKSHOP ON SOFTWARE TECHNOLOGY AND ENGINEERING PRACTICE INCORPORATING COMPUTER AIDED SOFTWARE ENGINEERING, PROCEEDINGS, P172, DOI 10.1109/STEP.1997.615479
   JOHNSON RE, 1988, SIGPLAN NOTICES, V23, P18, DOI 10.1145/62084.62086
   KUNG D, 1994, INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE, PROCEEDINGS, P202, DOI 10.1109/ICSM.1994.336774
   Laval J., 2009, P ESUG INT WORKSH SM
   Laval Jannik, 2009, WCRE 09
   Lee M.L., 1998, THESIS G MASON U FAI
   Li LF, 1996, PROCEEDINGS OF INTERNATIONAL WORKSHOP ON CSCW IN DESIGN, P171, DOI 10.1109/ICSM.1996.565004
   MADHAVJI NH, 1992, IEEE T SOFTWARE ENG, V18, P380, DOI 10.1109/32.135771
   Mens T, 2004, IEEE T SOFTWARE ENG, V30, P126, DOI 10.1109/TSE.2004.1265817
   Mens T, 2006, ELECTRON NOTES THEOR, V152, P125, DOI 10.1016/j.entcs.2005.10.021
   Morrisett J.Gregory., 1993, SIPL '93, P73
   Nguyen TN, 2005, PROC INT CONF SOFTW, P215
   Nguyen TN, 2005, PROC IEEE INT CONF S, P577
   Nierstrasz O., 2005, ACM SIGSOFT SOFTWARE, V30, P1, DOI [DOI 10.1145/1095430, 10.1145/1095430.1081707, DOI 10.1145/1095430.1081707]
   Perry DE., 2000, P C FUT SOFTW ENG, P345, DOI DOI 10.1145/336512.336586
   Ren XX, 2004, ACM SIGPLAN NOTICES, V39, P432, DOI 10.1145/1035292.1029012
   ROBBES R, 2008, THESIS U LUGANO SWIT
   Ryder BG, 2001, ACM SIGPLAN NOTICES, P46
   Tarjan R., 1972, SIAM Journal on Computing, V1, P146, DOI 10.1137/0201010
   WARTH A, 2008, RN2008001 VIEWP RES
NR 36
TC 9
Z9 9
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 1
PY 2011
VL 76
IS 12
SI SI
BP 1177
EP 1193
DI 10.1016/j.scico.2010.11.014
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 793FX
UT WOS:000292806900008
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Schneider, S
   Treharne, H
AF Schneider, Steve
   Treharne, Helen
TI Changing system interfaces consistently: A new refinement strategy for
   CSP∥B
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 7th International Conference on Integrated Formal Methods
CY FEB 16-19, 2009
CL Dusseldorf, GERMANY
DE Action refinement; Interface refinement; CSP parallel to B; Integrating
   formal methods
AB This paper is concerned with event refinement in the context of CSP parallel to B. Our motivation to include this notion within the CSP parallel to B framework is the desire to increase flexibility in the refinement process. This approach provides the ability to change the events of CSP processes and B machines when refining a system. Notions of refinement based on traces and on traces/divergences allow abstract events to be refined by sequences of concrete events. A complementary notion of refinement between B machines is also proposed, yielding compositionality results for refinement of CSP parallel to B controlled components. The paper also introduces a notion of I/O refinement into our event refinement framework. (C) 2010 Elsevier B.V. All rights reserved.
C1 [Schneider, Steve; Treharne, Helen] Univ Surrey, Dept Comp, Guildford GU2 7XH, Surrey, England.
C3 University of Surrey
RP Schneider, S (corresponding author), Univ Surrey, Dept Comp, Guildford GU2 7XH, Surrey, England.
EM s.schneider@surrey.ac.uk
OI Treharne, Helen/0000-0003-1835-4803; Schneider,
   Steve/0000-0001-8365-6993
CR Abrial J.-R., 1996, B BOOK ASSIGNING PRO
   Abrial J.-R., 2010, MODELLING EVENT B SY
   ABRIAL JR, 2009, MECH PRESS CONTROLLE
   [Anonymous], 1992, ACTION REFINEMENT PR
   BACK RJR, 1989, DISTRIB COMPUT, V3, P73, DOI 10.1007/BF01558665
   Banach R, 2007, SCI COMPUT PROGRAM, V67, P301, DOI 10.1016/j.scico.2007.04.002
   Bergstra J.A., 2001, HDB PROCESS ALGEBRA
   Butler M., 2000, Formal Aspects of Computing, V12, P182, DOI 10.1007/PL00003930
   BUTLER M, 2008, COMMUNICATION    SEP
   Butler M, 2009, LECT NOTES COMPUT SC, V5423, P20
   COLIN S, 2008, LNCS, V5596, P103
   Colin S, 2008, LECT NOTES COMPUT SC, V5140, P139, DOI 10.1007/978-3-540-79980-1_11
   Colin S, 2009, ELECTRON NOTES THEOR, V203, P23, DOI 10.1016/j.entcs.2009.03.024
   DAVIES J, 1994, FORM ASP COMPUT, V5, P530
   Derrick J, 2003, LECT NOTES COMPUT SC, V2651, P127
   Derrick J, 1999, LECT NOTES COMPUT SC, V1709, P1477
   Derrick J., 2001, FACIT, VSecond
   Dijkstra E. W., 1976, A Discipline of Pro-gramming
   Hoare CAR., 1985, Communicating Sequential Processes
   MORGAN CC, 1990, BEAUTY OUR BUSINESS, P319
   Roscoe A.W., 1998, THEORY PRACTICE CONC
   Schneider B., 2001, LONELYLAND
   Schneider S, 2005, FORM ASP COMPUT, V17, P390, DOI 10.1007/s00165-005-0076-7
   Schneider S., 1999, Concurrent and Real Time Systems: The CSP Approach, V1st
   SCHNEIDER S, 2008, FUTURETECH DEMONSTRA
   Schneider S, 2009, LECT NOTES COMPUT SC, V5423, P103
NR 26
TC 3
Z9 3
U1 0
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 1
PY 2011
VL 76
IS 10
SI SI
BP 837
EP 860
DI 10.1016/j.scico.2010.08.001
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 785MK
UT WOS:000292232900002
OA Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Apel, S
   Lengauer, C
   Möller, B
   Kästner, C
AF Apel, Sven
   Lengauer, Christian
   Moeller, Bernhard
   Kaestner, Christian
TI An algebraic foundation for automatic feature-based program synthesis
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Feature-oriented software development; Automatic feature-based program
   synthesis; Architectural metaprogramming; Feature structure tree;
   Feature composition; Superimposition; Quantification; Weaving; Feature
   algebra; Quark model
ID MODEL; MAINTENANCE; REFINEMENT; CALCULUS
AB Feature-Oriented Software Development provides a multitude of formalisms, methods, languages, and tools for building variable, customizable, and extensible software. Along different lines of research, different notions of a feature have been developed. Although these notions have similar goals, no common basis for evaluation, comparison, and integration exists. We present a feature algebra that captures the key ideas of feature orientation and that provides a common ground for current and future research in this field, on which also alternative options can be explored. Furthermore, our algebraic framework is meant to serve as a basis for the development of the technology of automatic feature-based program synthesis and architectural metaprogramming. (C) 2010 Elsevier B.V. All rights reserved.
C1 [Apel, Sven; Lengauer, Christian] Univ Passau, Dept Math & Informat, Passau, Germany.
   [Moeller, Bernhard] Univ Augsburg, Inst Comp Sci, D-8900 Augsburg, Germany.
   [Kaestner, Christian] Univ Magdeburg, Sch Comp Sci, D-39106 Magdeburg, Germany.
C3 University of Passau; University of Augsburg; Otto von Guericke
   University
RP Apel, S (corresponding author), Univ Passau, Dept Math & Informat, Passau, Germany.
EM apel@uni-passau.de; lengauer@uni-passau.de;
   moeller@informatik.uni-augsburg.de; kaestner@iti.cs.uni-magdeburg.de
OI Kastner, Christian/0000-0002-4450-4572; Apel, Sven/0000-0003-3687-2233
FU German Research Foundation (DFG) [AP 206/2-1, MO 690/7-1]
FX We thank Don Batory, Tony Hoare, Peter Hofner and the anonymous AMAST'
   08 and SCP reviewers for helpful comments. The work has been funded in
   part by the German Research Foundation (DFG), project numbers AP 206/2-1
   and MO 690/7-1.
CR Achermann F, 2005, THEOR COMPUT SCI, V331, P367, DOI 10.1016/j.tcs.2004.09.022
   Alves V., 2006, Proceedings of the 5th international conference on Generative Programming and Component Engineering, P201, DOI [10.1145/1173706, DOI 10.1145/1173706]
   Anfurrutia FI, 2007, LECT NOTES COMPUT SC, V4607, P473
   [Anonymous], 1998, P 25 ACM SIGPLAN SIG, DOI DOI 10.1145/268946.268961
   [Anonymous], 2000, Generative programming: methods, tools, and applications
   Apel S, 2005, LECT NOTES COMPUT SC, V3676, P125
   APEL S, 2010, ACM T PROGRAMMING LA
   APEL S, 2007, MIP0712 U PASS DEP I
   Apel S, 2008, IEEE T SOFTWARE ENG, V34, P162, DOI 10.1109/TSE.2007.70770
   Apel S, 2007, J OBJECT TECHNOL, V6, P13, DOI 10.5381/jot.2007.6.9.a1
   Apel S, 2008, LECT NOTES COMPUT SC, V5140, P36
   Apel S, 2009, J OBJECT TECHNOL, V8, P49, DOI 10.5381/jot.2009.8.5.c5
   Apel S, 2009, PROC INT CONF SOFTW, P221, DOI 10.1109/ICSE.2009.5070523
   Apel S, 2008, GPCE'08: PROCEEDINGS OF THE ACM SIGPLAN SEVENTH INTERNATIONAL CONFERENCE ON GENERATIVE PROGRAMMING AND COMPONENT ENGINEERING, P161
   Apel S, 2008, GPCE'08: PROCEEDINGS OF THE ACM SIGPLAN SEVENTH INTERNATIONAL CONFERENCE ON GENERATIVE PROGRAMMING AND COMPONENT ENGINEERING, P101
   ARACIC I, 2006, T ASPECT ORIENTED SO, V3880, P135
   Batory Don, 2007, POPL 2007. The 34th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P135, DOI 10.1145/1190216.1190238
   Batory D, 2004, IEEE T SOFTWARE ENG, V30, P355, DOI 10.1109/TSE.2004.23
   Batory D, 2007, LECT NOTES COMPUT SC, V4420, P156
   BAXTER ID, 1992, COMMUN ACM, V35, P73, DOI 10.1145/129852.129859
   BERGEL A, 2005, P INT C OBJ OR PROGR, P177
   Biggerstaff TJ, 1998, ANN SOFTW ENG, V5, P169, DOI 10.1023/A:1018924407841
   Böcker S, 2000, J ALGORITHMS, V37, P522, DOI 10.1006/jagm.2000.1116
   BODDEN E, 2006, P INT NET OBJECTDAYS, P49
   Bosch J, 1999, INFORM SOFTWARE TECH, V41, P257, DOI 10.1016/S0950-5849(99)00007-5
   BOUGE L, 1988, P INT S PRINC PROGR, P240
   Boxleitner S, 2009, LECT NOTES COMPUT SC, V5634, P45, DOI 10.1007/978-3-642-02655-3_5
   Bravenboer M, 2004, ACM SIGPLAN NOTICES, V39, P365, DOI 10.1145/1035292.1029007
   CHANDY M, 1986, ACM T PROGR LANG SYS, V8, P326, DOI 10.1145/5956.5958
   Clarke D., 2007, P INT C ASP OR SOFTW, P121
   Filman RobertE., 2005, ASPECT ORIENTED SOFT, P21
   FINDLER RB, 1998, P 3 ACM SIGPLAN INT, P94
   Fowler M., 2018, Refactoring: Improving the Design of Existing Code
   HARRISON W, 1993, SIGPLAN NOTICES, V28, P411, DOI 10.1145/167962.165932
   Harrison W, 2006, LECT NOTES COMPUT SC, V4089, P194
   Hebisch U., 1998, Semirings
   Höfner P, 2006, LECT NOTES COMPUT SC, V4085, P300
   Höfner P, 2011, SOFTW SYST MODEL, V10, P161, DOI 10.1007/s10270-009-0127-2
   HUTCHINS D, 2006, P INT C OBJ OR PROGR, P1
   Jagadeesan R, 2003, LECT NOTES COMPUT SC, V2743, P54
   Kästner C, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P311, DOI 10.1145/1368088.1368131
   KANG K., 1990, CMUSEI90TR21 SEI
   Kastner Christian., 2009, Proceedings of the 13th International Software Product Line Conference, P181, DOI DOI 10.1145/1753235.1753261
   Kiczales G., 1991, The Art of the Metaobject Protocol
   Kiczales Gregor, 2001, LNCS, V2072, P327, DOI DOI 10.1007/3-540-45337-718
   Kuhlemann M., 2009, Proceedings of the 8th International Conference on Generative Programming and Component Engineering, Denver, Colorado, P177, DOI [10.1145/1621607.1621634, DOI 10.1145/1621607.1621634]
   Lammel Ralf., 2003, P ASPECT ORIENTED SO, P168, DOI [10.1145/643603.643621, DOI 10.1145/643603.643621]
   Lieberherr K, 2004, ACM T PROGR LANG SYS, V26, P370, DOI 10.1145/973097.973102
   Ligatti J, 2006, SCI COMPUT PROGRAM, V63, P240, DOI 10.1016/j.scico.2006.01.004
   LIU J, 2006, P INT C SOFTW ENG IC, P112
   Lopez-Herrejon Roberto., 2006, Proceedings of the 2006 ACM SIGPLAN symposium on Partial evaluation and semantics-based program manipulation (New York, NY, USA), PEPM '06, P68
   Masuhara H, 2003, LECT NOTES COMPUT SC, V2743, P2
   McDirmid S, 2001, ACM SIGPLAN NOTICES, V36, P211, DOI 10.1145/504311.504298
   MCDIRMID S, 2003, P INT C ASP OR SOFTW, P70
   Mezini M., 2003, P 2 INT C ASPECT ORI, P90
   MEZINI M, 2004, P INT S FDN SOFTW EN, P127
   Odersky M, 2003, LECT NOTES COMPUT SC, V2743, P201
   OSSHER H, 1992, P INT C OBJ OR PROGR, P25
   Prehofer C, 1997, LECT NOTES COMPUT SC, V1241, P419
   RAMALINGAM G, 1991, P INT C ALG METH SOF, P547
   RAMALINGAM G, 1991, LNCS, V494, P137
   REENSKAUG T, 1992, J OBJECT-ORIENT PROG, V5, P27
   Seco JC, 2000, LECT NOTES COMPUT SC, V1850, P108
   Smaragdakis Y, 2002, ACM T SOFTW ENG METH, V11, P215, DOI 10.1145/505145.505148
   SPINCZYK O, 2005, SOFTWARE DEV J, V1, P68
   Tarr P., 1999, Proceedings of the 1999 International Conference on Software Engineering (IEEE Cat. No.99CB37002), P107, DOI 10.1109/ICSE.1999.841000
   Thaker Sahil., 2007, P 6 INT C GENERATIVE, P95
   Trujillo S., 2007, P 6 INT C GEN PROGR, P105
   Trujillo S, 2007, PROC INT CONF SOFTW, P44
   Tucker D.B., 2003, P 2 INT C ASPECT ORI, P158
   VanHilst Michael., 1996, P 11 ACM SIGPLAN C O, P359
   Walker D, 2003, ACM SIGPLAN NOTICES, V38, P127, DOI 10.1145/944746.944718
   Zenger M, 2002, LECT NOTES COMPUT SC, V2374, P470
   [No title captured]
   [No title captured]
NR 75
TC 16
Z9 17
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 1
PY 2010
VL 75
IS 11
SI SI
BP 1022
EP 1047
DI 10.1016/j.scico.2010.02.001
PG 26
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 641MD
UT WOS:000281129600006
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Héam, PC
   Kouchnarenko, O
   Voinot, J
AF Heam, Pierre-Cyrille
   Kouchnarenko, Olga
   Voinot, Jerome
TI Component simulation-based substitutivity managing QoS and composition
   issues
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 5th International Workshop on Formal Aspects of Component Software
   (FACS)
CY SEP 10-12, 2008
CL Malaga, SPAIN
DE Substitutivity; Component; Simulation; Weighted automata; Quality of
   service
ID SUBSTITUTABILITY; VERIFICATION; SUPPORT
AB Several scientific bottlenecks have been identified in existing component-based approaches. Among them, we focus on the identification of a relevant abstraction for the component expression and verification of properties like substitutivity: when is it possible to formally accept or reject the substitution of a component in a composition? This paper suggests integer weighted automata to tackle this problem when considering a new factor - Quality of Service (QoS). Four notions of simulation-based substitutivity managing QoS aspects are proposed, and related complexity issues on integer weighted automata are investigated. Furthermore, the paper defines composition operators: sequential, strict-sequential and parallel compositions, bringing path costs into the analysis. New results on the compatibility of proposed substitutivity notions w.r.t. sequential and parallel composition operators are established. (C) 2010 Elsevier B.V. All rights reserved.
C1 [Heam, Pierre-Cyrille; Kouchnarenko, Olga; Voinot, Jerome] Univ Franche Comte, INRIA CASSIS & LIFC, F-25030 Besancon, France.
   [Heam, Pierre-Cyrille] ENS Cachan, LSV CNRS INRIA, F-94235 Cachan, France.
C3 Universite de Franche-Comte; Universite Paris Saclay
RP Kouchnarenko, O (corresponding author), Univ Franche Comte, INRIA CASSIS & LIFC, 16 Route Gray, F-25030 Besancon, France.
EM pcheam@lsv.ens-cachan.fr; okouchnarenko@lifc.univ-fcomte.fr;
   jvoinot@lifc.univ-fcomte.fr
RI Kouchnarenko, Olga/AFY-4564-2022
OI Kouchnarenko, Olga/0000-0003-1482-9015
CR Aho A., 1974, DESIGN ANAL COMPUTER, P395
   [Anonymous], 1980, CALCULUS COMMUNICATI, DOI DOI 10.1007/3-540-10235-3
   [Anonymous], 1981, Lecture Notes in Computer Science, DOI [10.1007/BFb0017309, DOI 10.1007/BFB0017309]
   Baligand F., 2007, ICSOC, P422
   BALL T, 2006, LECT NOTES COMPUTER, V4144
   Barros T, 2009, ANN TELECOMMUN, V64, P25, DOI 10.1007/s12243-008-0069-7
   Becker Koziolek., 2007, P 6 INT WORKSHOP SOF, P54
   Berstel Jr Jean, 1988, Rational Series and Their Languages, EATCS Monographs on Theoretical Computer Science
   Beyer D, 2007, 2007 IEEE INTERNATIONAL CONFERENCE ON WEB SERVICES, PROCEEDINGS, P831
   Beyer Dirk., 2005, 15 WORLD WIDE WEB C, P148
   Boehm B.W., 1978, Characteristics of Software Quality
   Bouyer P, 2007, FORM METHOD SYST DES, V31, P135, DOI 10.1007/s10703-007-0035-4
   BRADA P, 2003, THESIS CHARLES U PRA
   Brada P, 2006, EUROMICRO CONF PROC, P38, DOI 10.1109/EUROMICRO.2006.50
   Bruneton E, 2006, SOFTWARE PRACT EXPER, V36, P1257, DOI 10.1002/spe.767
   Buchholz P., 2003, Journal of Automata, Languages and Combinatorics, V8, P187
   Buchsbaum AL, 2001, ALGORITHMICA, V30, P503, DOI 10.1007/s00453-001-0026-6
   Cerná I, 2007, ELECTRON NOTES THEOR, V182, P39, DOI 10.1016/j.entcs.2006.09.030
   Chaki S, 2008, FORM METHOD SYST DES, V32, P235, DOI 10.1007/s10703-008-0053-x
   CHOUALI S, 2007, REQUIREMENTS DESCRIP
   Chouali S, 2006, ELECTRON NOTES THEOR, V160, P157, DOI 10.1016/j.entcs.2006.05.021
   Culik Karel., 1999, J UNIVERS COMPUT SCI, V5, P227
   DAMBROGRIO A, 2006, ICWS 06 CHIC IL US
   Dehnert J, 2004, INT J COOP INF SYST, V13, P289, DOI 10.1142/S0218843004000973
   ERMEL E, 2004, NETWORKING 2004
   Evans N, 2007, FORM ASP COMPUT, V19, P277, DOI 10.1007/s00165-007-0034-7
   FILIPE JK, 2007, ELECT NOTES THEORETI, V175, P135
   Fioukov AV, 2002, EUROMICRO CONF PROC, P33, DOI 10.1109/EURMIC.2002.1046130
   Foster H., 2007, Test and Analysis of Web Services, P87, DOI DOI 10.1007/978-3-540-72912-9_4
   Gaubert S., 1995, IEEE T AUTOMATIC CON, V40
   Gerede CE, 2008, THEOR COMPUT SCI, V409, P417, DOI 10.1016/j.tcs.2008.08.040
   Glinz M, 2007, INT REQUIR ENG CONF, P21, DOI 10.1109/RE.2007.45
   Grassi V, 2008, LECT NOTES COMPUT SC, V5153, P327
   HALLBERG J, 2003, 10 INT C TEL ICT 200
   HASHIGUCHI K, 2002, INT J ALGEBRA COMPUT, V12
   HEAM PC, 2008, INT WORKSH FORM ASP
   Héam PC, 2007, WET ICE 2007: 16TH IEEE INTERNATIONAL WORKSHOPS ON ENABLING TECHNOLOGIES: INFRASTRUCTURE FOR COLLABORATIVE ENTERPRISES, PROCEEDINGS, P333
   HENNESSY M, 1985, J ACM, V32, P137, DOI 10.1145/2455.2460
   JURIC MB, 2005, HANDS ON INTRO BPE 2
   Katritzke F, 2004, THEOR COMPUT SCI, V313, P133, DOI 10.1016/j.tcs.2003.10.011
   Klimann I, 2004, THEOR COMPUT SCI, V327, P349, DOI 10.1016/j.tcs.2004.02.049
   KROB D, 1994, INT J ALGEBRA COMPUT, V4
   LOHMANN N, 2009, INT J BUSINESS PROCE, V4, P60, DOI DOI 10.1504/IJBPIM.2009.026986
   Lohmann N, 2007, LECT NOTES COMPUT SC, V4546, P321
   Ludwig H., 2003, WEB SERVICE LEVEL AG
   Mateescu R, 2008, LECT NOTES BUS INF P, V10, P179
   McCall J. A., 1977, PRELIMINARY HDB SOFT
   Mohri M, 2002, COMPUT SPEECH LANG, V16, P69, DOI 10.1006/csla.2001.0184
   MOHRI M, 2005, WEIGHTED AUTOMATA TE
   Moschoyiannis S, 2005, ELECTRON NOTES THEOR, V141, P199, DOI 10.1016/j.entcs.2005.04.035
   Navas JF, 2009, SINTER 09, P41
   ORR RJ, 2000, C HUM FACT COMP SYST
   Polakovic J, 2007, LECT NOTES COMPUT SC, V4608, P242
   Reussner RH, 2005, LECT NOTES COMPUT SC, V3442, P80, DOI 10.1007/978-3-540-31984-9_7
   Reussner RH, 2003, FUTURE GENER COMP SY, V19, P627, DOI 10.1016/S0167-739X(02)00173-5
   ROYO JA, 2005, S UB COMP AMB INT GR, P471
   SAWA Z, 2001, SOFSEM, P326
   Sawa Z., 2005, COMPUTERS ARTIFICIAL, V24
   SCHMIDT HW, 2007, LNCS, V4608
   SCUTURICI M, 2006, IEEE INT C PERV SERV
   Stahl C, 2009, DATA KNOWL ENG, V68, P819, DOI 10.1016/j.datak.2009.02.012
   TERBEEK MH, 2007, ANN MATH COMPUTING T, V5, P1
   Tian M., 2005, QOS INTEGRATION WEB
   Van der Aalst WMP, 1998, J CIRCUIT SYST COMP, V8, P21, DOI 10.1142/S0218126698000043
   van Glabbeek R., 2001, HDB PROCESS ALGEBRA
   WEBER A, 1991, THEOR COMPUT SCI, V88, P325, DOI 10.1016/0304-3975(91)90381-B
   Weber A., 1994, THEORETICAL COMPUTER, V134
   Wu XL, 2007, LECT NOTES COMPUT SC, V4761, P446
NR 68
TC 2
Z9 2
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 1
PY 2010
VL 75
IS 10
SI SI
BP 898
EP 917
DI 10.1016/j.scico.2010.02.004
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 638SZ
UT WOS:000280917600006
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Bennett, J
   Cooper, K
   Dai, LR
AF Bennett, Jeannette
   Cooper, Kendra
   Dai, Lirong
TI Aspect-oriented model-driven skeleton code generation: A graph-based
   transformation approach
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Model-driven development; Aspect-oriented; Automated code generation;
   Software design; Visual modeling; AspectJ
AB Model-driven code generation has been investigated in traditional and object-oriented design paradigms; significant progress has been made. It offers many advantages including the rapid development of high quality code. Errors are reduced and the consistency between the design and the code is retained, in comparison with a purely manual approach. Here, a model-driven code generation approach based on graph transformations for aspect-oriented development is proposed. The approach has two main transformation activities. The first activity transforms a visual (graphical) model of the design into a formal, text-based notation that can be readily processed. The graphical model is created by the software designer and uses a UML profile for aspect-oriented software (i.e., FDAF) to represent aspects and their components. XML is the target notation for this step; the transformation uses the XML meta-model to ensure that the output complies with the language. The second activity transforms the XML model into AspectJ source code. The transformation uses the AspectJ meta-model to ensure the output complies with the language. The transformations from the extended UML model to XML and from XML to AspectJ code are fully automated. The transformation algorithms are based on graph transformations; tool support has been developed. Key technical issues in the approach are discussed, including performance, the amount of code generated, correctness, and adaptability, in addition to a comparison of the proposal with existing alternative approaches. The approach has been validated on three example systems: a banking system, classroom scheduling system, and an insurance system. The banking system example is presented in the paper. (C) 2009 Elsevier B.V. All rights reserved.
C1 [Bennett, Jeannette; Cooper, Kendra] Univ Texas Dallas, Richardson, TX 75083 USA.
   [Dai, Lirong] Seattle Univ, Seattle, WA USA.
C3 University of Texas System; University of Texas Dallas; Seattle
   University
RP Cooper, K (corresponding author), Univ Texas Dallas, 2601 N Floyd Rd, Richardson, TX 75083 USA.
EM jeanstep@alum.mit.edu; kcooper@utdallas.edu; daia@seattleu.edu
CR Abowd G. D., 1999, Proceedings of the 1999 International Conference on Software Engineering (IEEE Cat. No.99CB37002), P75, DOI 10.1109/ICSE.1999.840997
   AGRAWAL A, 2003, ISIS03403 VAND U
   AGRAWAL A, 2002, WORKSH GEN TECHN CON
   Akehurst D., 2002, "UML" 2002 - Unified Modeling Language. Model Engineering, Concepts, and Tools. 5th International Conference. Proceedings (Lecture Notes in Computer Science Vol.2460), P243
   ALHALABI F, 2006, IEEE INT C INF COMM, P3216
   [Anonymous], METAEDIT
   [Anonymous], WORKSH GEN TECHN CON
   [Anonymous], Java Metadata Interface 1.0. Sun Microsystems
   [Anonymous], 2006, P 14 ACM SIGSOFT INT
   [Anonymous], 2003, Jamda
   ARCHIBALD C, 2004, CLASSROOM SCHEDULER
   Bell D., 2003, Uml basics: An introduction to the unified modeling language
   Bennett J. D., 2007, THESIS U TEXAS DALLA
   Buckl C, 2007, ARES 2007: SECOND INTERNATIONAL CONFERENCE ON AVAILABILITY, RELIABILITY AND SECURITY, PROCEEDINGS, P580
   Caplat G, 2005, IEEE SOFTWARE, V22, P44, DOI 10.1109/MS.2005.45
   *COMP CORP, OPTIMALJ
   COYLER A, 2005, ECLIPSE ASPECTJ ASPE
   Czarnecki K, 2006, IBM SYST J, V45, P621, DOI 10.1147/sj.453.0621
   Dai L., 2005, THESIS U TEXAS DALLA
   Dai LR, 2007, SCI COMPUT PROGRAM, V66, P87, DOI 10.1016/j.scico.2006.10.010
   Dai LR, 2006, SCI COMPUT PROGRAM, V61, P58, DOI 10.1016/j.scico.2005.11.006
   Dai LR, 2006, INT J SOFTW ENG KNOW, V16, P347, DOI 10.1142/S0218194006002835
   DUDDY K, 2004, TRANSFORMATION KNOWL
   *ECL FDN, 2007, ASPECTJ PROJ
   EVERMANN J, 2007, WORKSH AOM 07 VANC C, P21
   GARSHOL L, 2002, DEFINITIVE XML APPL
   HAN Y, 2004, IAITR20043 U BONN
   *IBM, 2008, RAT ROS IBM SOFTW
   Jouault F, 2006, LECT NOTES COMPUT SC, V4037, P171
   Jung E., 2005, 2005 IEEE/RSJ International Conference on Intelligent Robots and Systems, P2839, DOI 10.1109/IROS.2005.1545465
   Kuske S., 2002, Integrated Formal Methods. Third International Conference, IFM 2002. Proceedings (Lecture Notes in Computer Science Vol.2335), P11
   KUSTER J, 2004, P WORKSH OCL MOD DRI
   KUSTER J, 2004, UML WORKSH MOD ENG
   Kuster J.M., 2006, Software and Systems Modeling, V5, P233, DOI [10.1007/s10270-006-0018-8, DOI 10.1007/S10270-006-0018-8]
   LAWLEY M, 2005, P MOD TRANSF PRACT W
   Long Q, 2005, 2005 Australian Software Engineering Conference, Proceedings, P23
   Mellor SJ., 2002, EXECUTABLE UML FDN M
   MENS T, 2005, INT SUMMER SCH GENER, P219
   Mens T, 2006, ELECTRON NOTES THEOR, V152, P125, DOI 10.1016/j.entcs.2005.10.021
   Miles Russell., 2004, ASPECTJ COOKBOOK
   Narayanan Anantha, 2008, INT WORKSH GRAPH MOD, P45
   OMG, 2006, MET OBJ FAC MOF 2 0
   Rauchwerger Y, 2005, LECT NOTES COMPUT SC, V3530, P210
   Schurr A., 1995, Proceedings. 11th IEEE International Symposium on Visual Languages (Cat. No.95TB8105), P326, DOI 10.1109/VL.1995.520826
   Sprinkle J, 2003, ECBS 2003: 10TH IEEE INTERNATIONAL CONFERENCE AND WORKSHOP ON THE ENGINEERING OF COMPUTER-BASED SYSTEMS, PROCEEDINGS, P159
   Stein D., 2002, P AOM UML WORKSH AOS
   Taentzer G, 2003, LECT NOTES COMPUT SC, V3062, P446
   Taentzer G., 2005, Model transformation by graph transformation: A comparative study
   Varró D, 2004, LECT NOTES COMPUT SC, V3273, P290
   Varró G, 2005, 2005 IEEE SYMPOSIUM ON VISUAL LANGUAGE AND HUMAN-CENTRIC COMPUTING, PROCEEDINGS, P79, DOI 10.1109/VLHCC.2005.23
   Vranic V., 2001, Generative and Component-Based Software Engineering. Third International Conference, GCSE 2001. Proceedings (Lecture Notes in Computer Science Vol.2186), P48
   Wai Ming Ho, 1999, 14th IEEE International Conference on Automated Software Engineering, P275, DOI 10.1109/ASE.1999.802320
   *WORLD WID WORLD C, 2006, EXT MARK LANG XML 1
   2009, FORMAL DESIGN ANAL F
NR 54
TC 11
Z9 12
U1 0
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD AUG 1
PY 2010
VL 75
IS 8
SI SI
BP 689
EP 725
DI 10.1016/j.scico.2009.05.005
PG 37
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 620YD
UT WOS:000279538200003
OA Bronze
DA 2024-07-18
ER

PT J
AU Van Wyk, E
   Bodin, D
   Gao, JM
   Krishnan, L
AF Van Wyk, Eric
   Bodin, Derek
   Gao, Jimin
   Krishnan, Lijesh
TI Silver: An extensible attribute grammar system
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 7th Workshop on Language Descriptions, Tools and Application
CY MAR 25, 2007
CL Braga, PORTUGAL
SP ACM SIGPLAN
DE Extensible languages; Extensible compilers; Attribute grammars;
   Forwarding; Silver attribute grammar system
ID MODULARITY
AB Attribute grammar specification languages, like many domain-specific languages, offer significant advantages to their users, such as high-level declarative constructs and domain-specific analyses. Despite these advantages, attribute grammars are often not adopted to the degree that their proponents envision. One practical obstacle to their adoption is a perceived lack of both domain-specific and general purpose language features needed to address the many different aspects of a problem. Here we describe Silver, an extensible attribute grammar specification system, and show how it can be extended with general purpose features such as pattern matching and domain-specific features such as collection attributes and constructs for supporting data-flow analysis of imperative programs. The result is an attribute grammar specification language with a rich set of language features. Silver is implemented in itself by a Silver attribute grammar and utilizes forwarding to implement the extensions in a cost-effective manner. (C) 2009 Elsevier B.V. All rights reserved.
C1 [Van Wyk, Eric; Bodin, Derek; Gao, Jimin; Krishnan, Lijesh] Univ Minnesota, Dept Comp Sci & Engn, Minneapolis, MN 55455 USA.
C3 University of Minnesota System; University of Minnesota Twin Cities
RP Van Wyk, E (corresponding author), Univ Minnesota, Dept Comp Sci & Engn, Minneapolis, MN 55455 USA.
EM evw@cs.umn.edu
CR Adams S. R., 1993, THESIS U SOUTHAMPTON
   [Anonymous], 1991, POPL 91, DOI DOI 10.1145/99583.99607
   BAARS A, UTRECHT U AG SYSTEM
   Baker Jason., 2002, PLDI 02, P270
   Batory D, 1998, FIFTH INTERNATIONAL CONFERENCE ON SOFTWARE REUSE - PROCEEDINGS, P143, DOI 10.1109/ICSR.1998.685739
   Boyland JT, 2005, J ACM, V52, P627, DOI 10.1145/1082036.1082042
   Bravenboer M, 2004, ACM SIGPLAN NOTICES, V39, P365, DOI 10.1145/1035292.1029007
   CHEATHAM TE, 1966, AFIPS C P, V29, P623
   Cimatti A., 1999, Computer Aided Verification. 11th International Conference, CAV'99. Proceedings (Lecture Notes in Computer Science Vol.1633), P495
   Cooper KeithD., 2004, Engineering a Compiler
   Eisenberg AndrewD., 2007, PROC INT C ASPECT OR, P73, DOI DOI 10.1145/1218563.1218573
   Ekman T, 2004, LECT NOTES COMPUT SC, V3086, P144
   EKMAN T, 2006, THESIS LUND U LUND
   Ekman T., 2007, Proceedings of the 22nd annual ACM SIGPLAN conference on Object-oriented programming systems and applications, P1, DOI [10.1145/1297027.1297029, DOI 10.1145/1297027.1297029]
   Farrow R., 1986, ACM SIGPLAN NOTICES, V21
   FARROW R, 1992, 19 ANN ACM SIGACT SI, P223
   Ford Bryan., 2004, 31 ACM SIGPLAN SIGAC, P111, DOI DOI 10.1145/964001.964011
   GANZINGER H, 1984, SIGPLAN NOTICES, V19, P157, DOI 10.1145/502949.502890
   GANZINGER H, 1983, SCI COMPUT PROGRAM, V3, P223, DOI 10.1016/0167-6423(83)90021-7
   Gao JM, 2007, LECT NOTES COMPUT SC, V4422, P102
   GRAY RW, 1992, COMMUN ACM, V35, P121, DOI 10.1145/129630.129637
   Grimm R, 2006, ACM SIGPLAN NOTICES, V41, P38, DOI 10.1145/1133981.1133987
   Harald VogtS., 1990, ACM Conference on Programming Language Design and Implementation, P131
   HEDIN G, 1989, P EUR C OBJ OR PROGR
   Hudak P., 1996, ACM COMPUTING SURVEY, V28
   Johnson StephenC., 1975, YACC YET ANOTHER COM, V32
   KASTENS U, 1994, ACTA INFORM, V31, P601, DOI 10.1007/BF01177548
   Knuth D. E., 1968, Mathematical Systems Theory, V2, P127, DOI 10.1007/BF01692511
   Kohlbecker Eugene., 1986, P 1986 ACM C LISP FU, P151
   Kuiper M, 1998, LECT NOTES COMPUT SC, V1383, P298
   LACEY D, 2002, P 29 ACM S PRINC PRO, P283
   LACEY D, 2001, LECT NOTES COMPUTER, V2027, P52
   LEAVENWORTH BM, 1966, COMMUN ACM, V9, P790, DOI 10.1145/365876.365879
   Leijen D, 2000, ACM SIGPLAN NOTICES, V35, P109, DOI 10.1145/331963.331977
   MAGNUSSON E, 2007, THESIS LUND U LUND
   Mernik M, 2005, ACM COMPUT SURV, V37, P316, DOI 10.1145/1118890.1118892
   Mernik M., 2000, Informatica, V24, P319
   Saraiva J., 1999, P 2 WORKSHOP ATTRIBU, P185
   Schmidt D. A., 1998, Conference Record of POPL '98: 25th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P38, DOI 10.1145/268946.268950
   SCHWERDGEGER A, 2009, P ACM SIGPLAN C PROG
   Simonyi C, 2006, ACM SIGPLAN NOTICES, V41, P451, DOI 10.1145/1167515.1167511
   STEFFEN B, 1991, LECT NOTES COMPUT SC, V526, P346
   van den Brand M., 1996, Algebraic Methodology and Software Technology. 5th International Conference, AMAST '96. Proceedings, P9, DOI 10.1007/BFb0014303
   van Deursen A, 2000, ACM SIGPLAN NOTICES, V35, P26, DOI 10.1145/352029.352035
   Van Wyk E, 2002, LECT NOTES COMPUT SC, V2304, P128
   Van Wyk E., 2006, P INT WORKSH COMP OP
   Van Wyk E, 2007, INT C GEN PROGR COMP
   Van Wyk E, 2007, LECT NOTES COMPUT SC, V4609, P575
   VANWYK E, 2006, P LCSD 2006 LIBR CEN
   Visser E, 2003, LECT NOTES COMPUT SC, V3016, P216
   Weise D., 1993, ACM SIGPLAN Notices, V28
NR 51
TC 84
Z9 89
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 1
PY 2010
VL 75
IS 1-2
SI SI
BP 39
EP 54
DI 10.1016/j.scico.2009.07.004
PG 16
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 539CK
UT WOS:000273230800004
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Klüppelholz, S
   Baier, C
AF Klueppelholz, Sascha
   Baier, Christel
TI Symbolic model checking for channel-based component connectors
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 5th International Workshop on the Foundations of Coordination Languages
   and Software Architectures (FOCLASA'06)
CY AUG 31, 2006
CL Bonn, GERMANY
DE Constraint automata; Model checking; Branching time logic; Data streams;
   Binary decision diagrams; Reo
ID LOGIC
AB This paper introduces a temporal logic framework to reason about the coordination mechanisms and data flow of exogenous coordination models. We take a CTL-like branching time logic, augmented with regular expressions that specify the observable I/O-operations, as a starting point. The paper provides the syntax and semantics of our logic and introduces the corresponding model checking algorithm. The second part of the paper reports an implementation that relies on a symbolic representation of the coordination network and the connected components by means of binary decision diagrams. A couple of examples are given to illustrate the efficiency of the model checking techniques and their implementation. (C) 2009 Elsevier B.V. All rights reserved.
C1 [Klueppelholz, Sascha; Baier, Christel] Tech Univ Dresden, Inst Theoret Informat, Dresden, Germany.
C3 Technische Universitat Dresden
RP Klüppelholz, S (corresponding author), Tech Univ Dresden, Inst Theoret Informat, Dresden, Germany.
EM klueppei@tcs.inf.tu-dresden.de; baier@tcs.inf.tu-dresden.de
OI Kluppelholz, Sascha/0000-0003-1724-2586
CR [Anonymous], 2007, Logic synthesis and verification algorithms
   [Anonymous], ACM SIGECOM EXCHANGE
   [Anonymous], MATH STRUCTURES COMP
   Arbab F, 2003, LECT NOTES COMPUT SC, V2755, P34
   Arbab F, 2003, LECT NOTES COMPUT SC, V2852, P33
   ARBAB F, 2004, P SEFM 04
   Arbab F, 2007, SOFTW SYST MODEL, V6, P59, DOI 10.1007/s10270-006-0009-9
   Baier C, 2006, SCI COMPUT PROGRAM, V61, P75, DOI 10.1016/j.scico.2005.10.008
   BRYANT RE, 1986, IEEE T COMPUTERS, V35
   CLARKE D, 2006, LNCS, V159, P61
   Clarke D, 2006, LECT NOTES COMPUT SC, V4313, P9, DOI 10.1007/11925040_2
   CLARKE EM, 1986, ACM T PROGR LANG SYS, V8, P244, DOI 10.1145/5397.5399
   Clarke EM, 1999, MODEL CHECKING, P1
   DEBOER FS, 2003, LNCS, V2852
   Diakov N., 2004, P INT WORKSH WEB SER, P13
   Emerson E.A., 1985, PROC 12 ACM S PRINCI, P84
   FISCHER MJ, 1979, J COMPUT SYST SCI, V18, P194, DOI 10.1016/0022-0000(79)90046-1
   McMillan K. L., 1993, Symbolic model checking
   Ossowski Jorn, 2008, International Journal on Software Tools for Technology Transfer, V10, P425, DOI 10.1007/s10009-008-0069-y
   VARDI MY, 1986, P 1 S LOG COMP SCI C, P322
   Wegener I., 2000, BRANCHING PROGRAMS B
NR 21
TC 8
Z9 8
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUL 1
PY 2009
VL 74
IS 9
SI SI
BP 688
EP 701
DI 10.1016/j.scico.2008.09.020
PG 14
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 462TT
UT WOS:000267380200003
DA 2024-07-18
ER

PT J
AU Cepa, V
   Mezini, M
AF Cepa, Vasian
   Mezini, Mira
TI Language support for model-driven software development
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT Workshop on Model Driven Architecture - Foundations and Applications
CY JUN 26-27, 2003
CL Univ Twente, Enschede, NETHERLANDS
HO Univ Twente
DE MDA; Attribute programming; Transformations
ID JAVA
AB This paper is about language technology for facilitating model-driven software development. We argue that two features are important for this purpose: (a) support for explicit meta-representation of programs as an AST-like structure (AST stands for abstract syntax tree) accessible in a programmatic way before and beyond the compilation, and (b) support for user-defined annotations of program elements. That is, we argue for language platforms organized around a Generalized Annotated AST, or GAAST languages for short. We outline the problems with a model-driven development process based on languages without such a support and show how GAAST language technology addresses these problems. (C) 2008 Published by Elsevier B.V.
C1 [Cepa, Vasian; Mezini, Mira] Tech Univ Darmstadt, Software Technol Grp, Dept Comp Sci, Darmstadt, Germany.
C3 Technical University of Darmstadt
RP Cepa, V (corresponding author), Tech Univ Darmstadt, Software Technol Grp, Dept Comp Sci, Darmstadt, Germany.
EM cepa@informatik.tu-darmstadt.de; mezini@informatik.tu-darmstadt.de
CR [Anonymous], 2011, XML PATH LANGUAGE XP
   [Anonymous], Mobile Information Device Profile 2.0 (JSR-118)
   [Anonymous], OMG unified modeling language specification
   ASSmann Uwe., 2003, INVASIVE SOFTWARE CO
   ATKINSON C, 4 INT C UN MOD LANG
   Bachrach J, 2001, ACM SIGPLAN NOTICES, V36, P31, DOI 10.1145/504311.504285
   CALNAN PW, THESIS WORCESTER POL
   Chiba S, 2000, LECT NOTES COMPUT SC, V1850, P313
   CHIBA S, 1995, SIGPLAN NOTICES, V30, P285, DOI 10.1145/217839.217868
   Frankel D.S., 2003, Model Driven Architecture: Applying MDA to Enterprise Computing
   Goldberg A., 1989, Smalltalk-80 : The Language
   HALLOWAY S, 2002, COMPONENT DEV JAVA P
   HAROLD RE, 1997, JAVABEANS
   HOWES T, MODEL DRIVEN ARCHITE
   *JAV, JAV REFL API
   *JAV, JAV 2 ENT ED J2EE SP
   KNUTH D, P C ATTR GRAMM THEIR
   Liberty J., 2001, Programming C#
   Monson-Haefel R., 2000, ENTERPRISE JAVABEANS
   Newkirk J, 2002, IEEE SOFTWARE, V19, P18, DOI 10.1109/MS.2002.1032846
   OMG, OMG MET OBJ FAC MOF
   *OMG, OMG HUM US TEXT NOT
   PAAKKI J, 1995, ACM COMPUT SURV, V27, P196, DOI 10.1145/210376.197409
   Pichler R, 2003, SOFTWARE PRACT EXPER, V33, P957, DOI 10.1002/spe.534
   POLLACK M, CODE GENERATION USIN
   Prosise J., 2002, PROGRAMMING MICROSOF
   SKONNARD A, 2001, ESSENTIAL XML QUICK
   STEEL JR, THESIS U QUEENSLAND
   TAHA W, ACM SIGPLAN NOTICES, V32
   ZDERADICKA I, CS CODEDOM PARSER
   [No title captured]
   JSR 175 METADATA FAC
NR 32
TC 1
Z9 1
U1 0
U2 1
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 1
PY 2008
VL 73
IS 1
SI SI
BP 13
EP 25
DI 10.1016/j.scico.2008.05.003
PG 13
WC Computer Science, Software Engineering
WE Conference Proceedings Citation Index - Science (CPCI-S); Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 357ZH
UT WOS:000259885400003
OA Bronze
DA 2024-07-18
ER

PT J
AU Ekman, T
   Hedin, G
AF Ekman, Torjoern
   Hedin, Goerel
TI The JastAdd system - modular extensible compiler construction
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE compiler construction; extensible languages; modular implementation
ID ATTRIBUTE GRAMMARS; JAVA
AB The JastAdd system enables modular specifications of extensible compiler tools and languages. Java has been extended with the Rewritable Circular Reference Attributed Grammars formalism that supports modularization and extensibility through several synergistic mechanisms. Object-orientation and static aspect-oriented programming are combined with declarative attributes and context-dependent rewrites to allow highly modular specifications. The techniques have been verified by implementing a full Java 1.4 compiler with modular extensions for non-null types and Java 5 features. (c) 2007 Elsevier B.V. All rights reserved.
C1 [Ekman, Torjoern; Hedin, Goerel] Lund Univ, Dept Comp Sci, S-22100 Lund, Sweden.
C3 Lund University
RP Ekman, T (corresponding author), Univ Oxford, Comp Lab, Wolfson Bldg,Parks Rd, Oxford OX1 3QD, England.
EM torbjorn@cs.ith.se; gorel@cs.lth.se
CR [Anonymous], 1996, Ph.D. Dissertation
   [Anonymous], 1971, Math. Syst. Theory, DOI DOI 10.1007/BF01702865
   AUGUSTEIJN L, 2006, ELEGANT HOMEPAGE
   Boyland JT, 2005, J ACM, V52, P627, DOI 10.1145/1082036.1082042
   Clifton C, 2000, ACM SIGPLAN NOTICES, V35, P130, DOI 10.1145/354222.353181
   Ekman T, 2004, LECT NOTES COMPUT SC, V3086, P144
   EKMAN T, 2006, THESIS LUND U SWEDEN
   Ekman T, 2006, LECT NOTES COMPUT SC, V4143, P422
   Fahndrick M., 2003, P 18 ACM SIGPLAN C O, P302, DOI DOI 10.1145/949305.949332
   FARROW R, 1986, P SIGPLAN S COMP CON, P85
   *GRAMMATECH, 2006, SYNTH GEN
   GROSCH J, 2006, COCKTAIL COMPILER CO
   Hedin G., 2000, Informatica, V24, P301
   Hedin G, 2003, SCI COMPUT PROGRAM, V47, P37, DOI 10.1016/S0167-6423(02)00109-0
   HEDIN G, 1989, 3 EUR C OBJ OR PROGR, P329
   JAMES R, 2006, TXL SOURCE TRANSFORM
   KASTENS U, 1994, ACTA INFORM, V31, P601, DOI 10.1007/BF01177548
   Kiczales Gregor, 2001, LNCS, V2072, P327, DOI DOI 10.1007/3-540-45337-718
   KOSKIMIES K, 1991, P ATTRIBUTE GRAMMARS, P297
   KUIPER M, 2006, LRC PURELY FUNCTIONA
   LENIC M, 2006, LISA HOMEPAGE
   MAGNUSSON E, 2003, ELECT NOTES THEORETI, V82
   MYERS A, POLYGLOT COMPILER FR
   Nilsson A., 2004, Nordic Journal of Computing, V11, P213
   Nystrom N, 2003, LECT NOTES COMPUT SC, V2622, P138
   Olmos K, 2005, LECT NOTES COMPUT SC, V3443, P204, DOI 10.1007/978-3-540-31985-6_14
   PARIGOT D, 2006, SMARTTOOLS SOFTWARE
   PoetzschHeffter A, 1997, ACTA INFORM, V34, P737, DOI 10.1007/s002360050105
   SARAIVA J, 1999, THESIS UTRECHT U NET
   SLOANE A, 2006, ELI TRANSLATOR CONST
   SWIERSTRA D, 2006, UAG UTRECHT ATTRIBUT
   Van Wyk E, 2002, LECT NOTES COMPUT SC, V2304, P128
   VANDENBRAND M, 2006, ASF SDF METAENVIRONM
   VISSER E, 2006, STRATEGO STRATEGIES
   Vogt Harald, 1989, PLDI, P131, DOI 10.1145/73141.74830
   2006, JACKS COMPILER TEST
NR 36
TC 93
Z9 101
U1 0
U2 1
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 1
PY 2007
VL 69
IS 1-3
BP 14
EP 26
DI 10.1016/j.scico.2007.02.003
PG 13
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 253CQ
UT WOS:000252496700003
DA 2024-07-18
ER

PT J
AU Brabrand, C
   Schwartzbach, MI
AF Brabrand, Claus
   Schwartzbach, Michael I.
TI The metafront system: Safe and extensible parsing and transformation
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 3rd Workshop on Language Descriptions, Tools and Applications (LDTA '03)
CY APR 06, 2003
CL Warsaw, POLAND
DE parsing; transformation; language extensibility; context-free grammars
AB We present the metafrent too] for specifying flexible, safe, and efficient syntactic transformations between languages defined by context-free grammars. The transformations are guaranteed to terminate and to map grammatically legal input to grammatically legal output.
   We rely on a novel parser algorithm that is designed to support gradual extensions of a grammar by allowing productions to remain in a natural style and by statically reporting ambiguities and errors in terms of individual productions as they are being added.
   Our tool may be used as a parser generator in which the resulting parser automatically supports a flexible, safe, and efficient macro processor, or as an extensible lightweight compiler generator for domain-specific languages. We show substantial examples of both kinds. (c) 2007 Elsevier B.V. All rights reserved.
C1 Aarhus Univ, Dept Comp Sci, BRICS DAIMI, DK-8000 Aarhus C, Denmark.
C3 Aarhus University
RP Brabrand, C (corresponding author), Aarhus Univ, Dept Comp Sci, BRICS DAIMI, DK-8000 Aarhus C, Denmark.
EM brabrand@brics.dk; mis@brics.dk
CR AUGUSTEIJN L, 1990, LNCS, V461
   BOROVANSKY P, 1998, 2 INTL WORKSH REWR L, V15
   BRABRAND C, 2002, ACM T INTERNET TECHN, V2
   Brabrand Claus, 2002, P ACM SIGPLAN WORKSH
   CARELLI L, 1994, EXTENSIBLE SYNTAX LE, V121
   Cordy J R., 2004, Proc. LDTA 2004, ACM 4th International Workshop on Language Descriptions, P1
   de Jonge M, 2002, PROC IEEE INT CONF S, P550, DOI 10.1109/ICSM.2002.1167816
   GRAY RW, 1992, COMMUN ACM, V35, P121, DOI 10.1145/129630.129637
   LAMMEL R, 2000, P WGP 2000, P46
   Mernik M., 2000, Informatica, V24, P319
   SANKAR S, 2002, JAVACC JAVA GRAMMAR
   SIMON A, 2003, ACM T PROGR LANG SYS, V25, P814
   TERENCE J, 1995, ANTLR PREDICATED LL, V25, P789
   TERENCE J, 1994, OVERVIEW SORCERER SI
   van den Brand M. G. J., 2001, P COMP CONSTR 2001 S
   Van Wyk E, 2002, LECT NOTES COMPUT SC, V2304, P128
   VANDENBRAND MGJ, 2002, P COMP CONTR 2002 S
   VISSER E, 2001, STRATEGO LANGUAGE PR, P357
   [No title captured]
NR 19
TC 7
Z9 7
U1 0
U2 2
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD AUG 1
PY 2007
VL 68
IS 1
BP 2
EP 20
DI 10.1016/j.scico.2005.06.007
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 206LT
UT WOS:000249185700002
DA 2024-07-18
ER

PT J
AU Erwig, M
   Ren, DL
AF Erwig, Martin
   Ren, Deling
TI An update calculus for expressing type-safe program updates
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE program transformation; meta programming; type safety; refactoring;
   software evolution
AB The dominant share of software development costs is spent on software maintenance, particularly the process of updating programs in response to changing requirements. Currently, such program changes tend to be performed using text editors, an unreliable method that often causes many errors. In addition to syntax and type errors, logical errors can be easily introduced since text editors cannot guarantee that changes are performed consistently over the whole program. All these errors can cause a correct and perfectly running program to become instantly unusable. It is not surprising that this situation exists because the "text-editor method" reveals a low-level view of programs that fails to reflect the structure of programs. We address this problem by pursuing a programming-language-based approach to program updates. To this end we discuss in this paper the design and requirements of an update language for expressing update programs. We identify as the essential part of any update language a scope update that performs coordinated update of the definition and all uses of a symbol. As the underlying basis for update languages, we define an update calculus for updating lambda calculus programs. We develop a type system for the update calculus that infers the possible type changes that can be caused by an update program. We demonstrate that type-safe update programs that fulfill certain structural constraints preserve the type correctness of lambda terms. The update calculus can serve as a basis for higher-level update languages, such as for Haskell or Java. (c) 2007 Elsevier B.V. All rights reserved.
C1 Oregon State Univ, Sch EECS, Corvallis, OR 97331 USA.
C3 Oregon State University
RP Erwig, M (corresponding author), Oregon State Univ, Sch EECS, Corvallis, OR 97331 USA.
EM erwig@eecs.oregonstate.edu
CR *ACM, 2001, COMMUNICATIONS ACM, V44
   Alkhatib G., 1992, Journal of Software Maintenance: Research and Practice, V4, P83, DOI 10.1002/smr.4360040203
   [Anonymous], 1980, To H. B. Curry: Essays on Combinatory Logic, -calculus and Formalism
   [Anonymous], 2014, Software engineering: a practitioner's approach
   Bauer Martin., 1997, Resistance to new technology: nuclear power, information technology and biotechnology
   Bergmans L, 2001, COMMUN ACM, V44, P51, DOI 10.1145/383845.383857
   BERNHARD P, 1993, CAN J INFORM LIB SCI, V18, P1
   BJORNER N, 1999, WORKSH LOG FRAM MET
   BOROVANSKY B, 1996, WORKSH REWR LOG APPL
   Borovansky P., 2001, International Journal of Foundations of Computer Science, V12, P69, DOI 10.1142/S0129054101000412
   BORRAS P, 1988, 3 ACM SIGSOFT S SOFT, P14
   BOULDIN B, 1989, AGENTS CHANGE MANAGI
   Elrad T, 2001, COMMUN ACM, V44, P33, DOI 10.1145/383845.383854
   Erwig M, 2003, LECT NOTES COMPUT SC, V2618, P269
   Erwig M, 2001, 16TH ANNUAL INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING (ASE 2001), PROCEEDINGS, P400, DOI 10.1109/ASE.2001.989838
   ERWIG M, 2002, 3 ACM SIGPLAN WORKSH, P67
   Fowler M., 2018, Refactoring: Improving the Design of Existing Code
   HANNA M, 1993, MAINTENANCE BURDEN, P53
   HORWITZ S, 1989, ACM T PROGR LANG SYS, V11, P345, DOI 10.1145/65979.65980
   Kiczales G, 2001, COMMUN ACM, V44, P59, DOI 10.1145/383845.383858
   Klint P, 2005, ACM T SOFTW ENG METH, V14, P331, DOI 10.1145/1072997.1073000
   Klint P., 1993, ACM Transactions on Software Engineering and Methodology, V2, P176, DOI 10.1145/151257.151260
   Lämmel R, 2004, J LOGIC ALGEBR PROGR, V60-1, P141, DOI 10.1016/j.jlap.2004.03.006
   Lämmel R, 2003, LECT NOTES COMPUT SC, V2562, P357
   Lämmel R, 2003, ACM SIGPLAN NOTICES, V38, P26, DOI 10.1145/640136.604179
   LAMMEL R, 2002, LNCS, V2257, P137
   LAMMEL R, 2004, ACM SIGPLAN INT C FU, P244
   LEHMAN MM, 1985, PROGR EVOLUTION
   Lientz B P., 1980, Software Maintenance Management
   MAGNUSSON L, 1994, LECT NOTES COMPUTER, V806, P213
   Martin-Lof Per, 1979, 6 INT C LOG METH PHI, P153
   Ossher H, 2001, COMMUN ACM, V44, P43, DOI 10.1145/383845.383856
   PFENNING F, 2001, HDB AUTOMATED REASON, pCH21
   Prechelt L, 1998, IEEE T SOFTWARE ENG, V24, P302, DOI 10.1109/32.677186
   REPS T, 1991, SCI COMPUT PROGRAM, V17, P139, DOI 10.1016/0167-6423(91)90039-Z
   Reps T.W., 1989, SYNTHESIZER GENERATO
   RIDEAU L, 1997, 3139 ML INRIA
   ROBERTS D, 1999, REFACTORING IMPROVIN, P309
   Sheard T, 2002, ACM SIGPLAN NOTICES, V37, P60, DOI 10.1145/636517.636528
   SHEARD T, 2001, LECT NOTES COMPUTER, V2196, P2
   Taha W, 2000, THEOR COMPUT SCI, V248, P211, DOI 10.1016/S0304-3975(00)00053-0
   Takang A.A., 1996, Software maintenance: concepts and practice
   Van den Brand MGJ, 2003, ACM T SOFTW ENG METH, V12, P152, DOI 10.1145/941566.941568
   Verhoef C, 2000, EUROMICRO CONF PROC, P32, DOI 10.1109/EURMIC.2000.874614
   VISSER E, 1999, LNCS, V1631, P30
   VISSER E, 1998, 3 ACM INT C FUNCT PR, P13
   VISSER E, ONLINE SURVEY PROGR
   VISSER E, 2000, UUCS200019 U UTRECHT
   Visser E., 2001, LNCS, V2051
   WHITTLE J, 1999, 14 INT C AUT SOFTW E
   WHITTLE J, 1997, 9 S PROGR LANG IMPL, V1292, P389
NR 51
TC 7
Z9 7
U1 0
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUL 1
PY 2007
VL 67
IS 2-3
BP 199
EP 222
DI 10.1016/j.scico.2007.01.003
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 192AW
UT WOS:000248174100003
OA hybrid, Green Submitted
DA 2024-07-18
ER

PT J
AU Verhoef, C
AF Verhoef, C.
TI Quantifying the effects of IT-governance rules
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE IT-governance; IT-governance rules; IT-portfolio analysis; quantitative
   IT-governance; overperfect data; heterogeneous data; overregulation;
   underregulation; managing on time; managing on budget; managing on
   functionality; time compression; time decompression; seasonality effects
ID RELIABILITY
AB Via quantitative analyses of large IT-portfolio databases, we detected unique data patterns pointing to certain IT-governance rules and styles, plus their sometimes nonintuitive and negative side-effects. We grouped the most important patterns in seven categories and highlighted them separately. These patterns relate to the five fundamental parameters for IT-governance: data, control, time, cost and functionality. We revealed patterns of overperfect and heterogeneous data signifying reporting anomalies or ambiguous IT-governance rules, respectively. We also detected patterns of overregulation and underregulation, portending bloated control or no IT-control at all, both with negative side-effects: productivity loss, and too costly IT-development. Uniform management on time, cost or functionality showed clear patterns in the time and cost case, and more diffuse combined patterns for functionality. For these in total seven types of patterns, it was possible to take corrective measures to reduce unwanted side-effects, and/or amplify the intended purpose of the underlying IT-governance rules. These modifications ranged from refinements and additions, to eradications of IT-governance rules. For each of the seven patterns we provided lessons learned and recommendations on how to recognize and remove unwanted effects. Some effects were dangerous, and addressing them led to significant risk reduction and cost savings. (c) 2007 Elsevier B.V. All rights reserved.
C1 Free Univ Amsterdam, Dept Math & Comp Sci, NL-1081 HV Amsterdam, Netherlands.
C3 Vrije Universiteit Amsterdam
RP Verhoef, C (corresponding author), Free Univ Amsterdam, Dept Math & Comp Sci, De Boelelaan 1081A, NL-1081 HV Amsterdam, Netherlands.
EM x@cs.vu.nl
CR Albrecht A.J., 1979, Em Proceedings of the Joint SHARE, GUIDE, and IBM Application Development Symposium, P83
   ALBRECHT AJ, 1983, IEEE T SOFTWARE ENG, V9, P639, DOI 10.1109/TSE.1983.235271
   Amabile TM, 2002, HARVARD BUS REV, V80, P52
   AMABILE TM, 2002, HARVARD BUS REV, V80, P147
   [Anonymous], 1987, Peopleware: Productive Projects and Teams
   [Anonymous], 1972, Numerical Analysis and Computational Theory and Practice
   [Anonymous], 2004, Budget of the United States Government for Fiscal Year
   Augustine N.R., 1979, Defense Systems Management Review, P50
   Boehm BW., 1981, Software Engineering Economics
   Brown S.L., 1998, COMPETING EDGE STRAT
   CAMERON B, 2002, TRANSFORMING IT GOVE
   Champy J., 1995, REENGINEERING MANAGE
   CONOVER WJ, 1980, PROBABILITY MATH STA
   Csikszentmihalyi M., 1991, Flow: The Psychology of Optimal Experience, DOI DOI 10.5465/AMR.1991.4279513
   Dalcher D, 2003, TECHNOL ANAL STRATEG, V15, P403, DOI 10.1080/095373203000136006
   DAVENPORT T, 1995, VOTE IT FEDERALISM C
   DEMARCO T, 1982, YOURDON PRESS COMPUT
   Dreger J.B., 1989, FUNCTION POINT ANAL
   Faust D, 2003, SOFTWARE PRACT EXPER, V33, P933, DOI 10.1002/spe.530
   *FED CIO COUNC, 2002, SUMM 1 PRACT LESS LE
   Garmus David., 2001, AW INFORMAT
   Hammer M., 1993, Reengineering the Corporation -A Manifesto for Business Revolution
   Hamming RW., 1973, Numerical Methods of Scientists and Engineers
   Hampel FrankR., 1986, PROBABILITY MATH STA
   Hogg RV., 2005, Introduction to mathematical statistics
   JONES C, 2000, INFORM TECHNOLOGY SE
   Jones C., 1998, Estimating Software Cost
   Kaplan R.S., 1996, The balanced scorecard: translating strategy into action
   Kazman R, 2001, PROC INT CONF SOFTW, P297, DOI 10.1109/ICSE.2001.919103
   Kazman Rick., 2002, Making Architecture Design Decisions: An Economic Approach
   KEMERER CF, 1993, COMMUN ACM, V36, P85, DOI 10.1145/151220.151230
   KEMERER CF, 1992, IEEE T SOFTWARE ENG, V18, P1011, DOI 10.1109/32.177370
   Kolmogorov A., 1933, Giorn Dell'inst Ital Degli Att, V4, P83, DOI DOI 10.12691/AJAMS-1-1-2
   LISTER T, 2002, BECOMING BETTER ESTI
   LONDEIX B, 1987, COST ESTIMATION SOFT
   *META GROUP, 2002, BUS IT PORTF MAN BAL
   MOSTELLER F, 1977, DATA REDUCTION REGRE
   PUTMAN LH, 1984, P INT SOC PAR ANAL 6, V3, P443
   PUTMAN LH, 1992, YOURDON PRESS COMPUT
   RAINES FD, 1996, MEMORANDUM HEADS EXE
   RIEMER JR, 1997, PROGRAM MANAGER, V26, P50
   Smirnov N., 1939, Recueil Mathematique Mathematicheskii Sbornik, V48, P3, DOI DOI 10.1787/888932596384
   STAPLETON J, 1997, DSDM DYNAMIC SYSTEM
   Stapleton Jennifer., 2003, DSDM: Business focused development
   Tukey J.W., 1977, EXPLORATORY DATA ANA
   *US GEN ACC OFF, 2000, INF TECHN INV MAN FR
   Verhoef C, 2002, SCI COMPUT PROGRAM, V45, P1, DOI 10.1016/S0167-6423(02)00106-5
   VERHOEF C, 2002, GETTING TOP IT
   VERHOEF C, 2005, SCI COMPUTER PROGRAM, V56
   VERHOEF C, 2007, QUANTIFYING SOFTWARE
   WEILL P, 1998, LEVERAGING NEWS INFR
   Weill P., 2004, IT governance: How top performers manage IT decision rights for superior results
   2003, BUDGET US GOVT FISCA
NR 53
TC 24
Z9 28
U1 1
U2 15
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUL 1
PY 2007
VL 67
IS 2-3
BP 247
EP 277
DI 10.1016/j.scico.2007.01.010
PG 31
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 192AW
UT WOS:000248174100005
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Murta, L
   Oliveira, H
   Dantas, C
   Lopes, LG
   Werner, C
AF Murta, Leonardo
   Oliveira, Hamilton
   Dantas, Cristine
   Lopes, Luiz Gustavo
   Werner, Claudia
TI Odyssey-SCM: An integrated software configuration management
   infrastructure for UML models
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE software configuration management; model-driven development; version
   control system; change control system; data mining
AB Model-driven development is becoming a reality. Different CASE tool vendors support this paradigm, allowing developers to define high-level models and helping to transform them into refined models or source code. However, current software configuration management tools use a file-based data model that is barely sufficient to manipulate source code. This file-based data model is not adequate to provide versioning capabilities for software modeling environments, which are strongly focused on analysis and architectural design artifacts. The existence of a versioned repository of high-level artifacts integrated with a customized change control process could help in the development and maintenance of such model-based systems. In this work, we introduce Odyssey-SCM, an integrated software configuration management infrastructure for UML models. This infrastructure is composed of a flexible version control system for fine-grained UML model elements, named Odyssey-VCS, and two complementary components: a customizable change control system tightly integrated with the version control system, and a traceability link detection tool that uses data mining to discover change traces among versioned UML model elements and provides the rationale of change traces, automatically collected from the integrated software configuration management infrastructure. (c) 2006 Elsevier B.V. All rights reserved.
C1 Univ Fed Rio de Janeiro, COPPE, Syst Engn & Comp Sci Program, BR-21945970 Rio De Janeiro, Brazil.
C3 Universidade Federal do Rio de Janeiro
RP Murta, L (corresponding author), Univ Fed Rio de Janeiro, COPPE, Syst Engn & Comp Sci Program, POB 68511, BR-21945970 Rio De Janeiro, Brazil.
EM murta@cos.ufrj.br; hamilton@cos.ufrj.br; cristine@cos.ufrj.br;
   luizgus@cos.ufrj.br; werner@cos.ufrj.br
RI Werner, Claudia/JZE-5245-2024
OI Lima Werner, Claudia Maria/0000-0002-4231-9621
CR Agrawal R., 1994, P INT VLDB C VLDB 94, P487, DOI DOI 10.5555/645920.672836
   [Anonymous], 1992, Proceedings of the 1992 ACM Conference on Computer Supported Cooperative Work (CSCW'92), DOI DOI 10.1145/143457.143468
   BALL T, 1997, WORKSH PROC MOD EMP
   Beydeda S., 2005, MODEL DRIVEN SOFTWAR
   BOGER M, 2000, POSEIDON ULM USER GU
   Booth David., 2004, WEB SERVICES ARCHITE
   CHRISSIS MB, 2003, CMMI GUIDELINES INTE
   Collins-Sussman B., 2004, VERSION CONTROL SUBV
   Conradi R, 1998, ACM COMPUT SURV, V30, P232, DOI 10.1145/280277.280280
   Dantas CR, 2005, Eighth International Workshop on Principles of Software Evolution, Proceedings, P144
   Draheim D, 2003, SIXTH INTERNATIONAL WORKSHOP ON PRINCIPLES OF SOFTWARE EVOLUTION, PROCEEDINGS, P131, DOI 10.1109/IWPSE.2003.1231220
   Eick SG, 2001, IEEE T SOFTWARE ENG, V27, P1, DOI 10.1109/32.895984
   Estublier J., 1998, System Configuration Management. ECOOP'98 SCM-8 Symposium. Proceedings, P75, DOI 10.1007/BFb0053880
   Estublier J, 2005, ACM T SOFTW ENG METH, V14, P383, DOI 10.1145/1101815.1101817
   Estublier J., 2000, Proceedings of the Conference on The Future of Software Engineering - ICSE '00, P279, DOI [DOI 10.1145/336512.336576, 10.1145/336512.336576]
   Fogel K.F., 2001, Open source development with CVS
   Frankel D.S., 2003, Model Driven Architecture: Applying MDA to Enterprise Computing
   Gall H, 1997, INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE, PROCEEDINGS, P160, DOI 10.1109/ICSM.1997.624242
   Goldstein IraP., 1984, INTERACTIVE PROGRAMM, P387
   HABERMANN AN, 1986, IEEE T SOFTWARE ENG, V12, P1117, DOI 10.1109/TSE.1986.6313007
   HASSAN AE, 2003, VISUALIZING SOFTWARE, P41
   *IEEE, 2005, 828 IEEE
   *IEEE, 1987, 1042 IEEE
   *ISO, 1995, 10007 ISO INT ORG ST
   *ISO, 2001, ISOIEC9126 INT ORG S
   Juristo N., 2013, BASICS SOFTWARE ENG
   Kitchenham BA, 2002, IEEE T SOFTWARE ENG, V28, P721, DOI 10.1109/TSE.2002.1027796
   LEON A, 2000, GUIDE SOFTWARE CONFI
   LOPES LGB, 2006, INT C SOFTW REUS TOR
   LORD T, GNU ARCH
   MATULA M, NETBEANS METADATA RE
   NGUYEN TN, 2004, C HYP HYP SANT CRUS, P185
   Ohst D, 2002, PROC IEEE INT CONF S, P521, DOI 10.1109/ICSM.2002.1167813
   OLIVEIRA HLR, 2005, INT WORKSH SOFTW CON, P1, DOI DOI 10.1016/J.SCICO.2006.05.011
   *OMG, MET OBJ FAC MOF SPEC
   *OMG, XML MET INT XML SPEC
   *OMG, 2003, UN MOD LANG UML SPEC
   *OMG, MOF 2 0 VERS DEV LIF
   *OMG, SOFTW PROC ENG MET S
   Pressman R.S., 2005, Software engineering: a Practitioner's Approach
   RENDER H, 1991, INT WORKSH SOFTW CON, P127
   ROCHE T, 2001, ESSENTIAL SOURCESAFE
   Sarma A, 2003, PROC INT CONF SOFTW, P444, DOI 10.1109/ICSE.2003.1201222
   Shirabad JS, 2001, PROC IEEE INT CONF S, P22, DOI 10.1109/ICSM.2001.972708
   *SPARX SYST, ENT ARCH
   VOELCKER J, 1988, IEEE SPECTRUM, V25, P25, DOI 10.1109/6.4571
   Werner C, 2003, PROCEEDINGS OF THE 2003 IEEE INTERNATIONAL CONFERENCE ON INFORMATION REUSE AND INTEGRATION, P61, DOI 10.1109/IRI.2003.1251396
   WHITE BA, 2000, CONFIGURATION MANAGE
   WHITEHEAD EJ, 2000, THESIS U CALIFORNIA
   Wohlin C., 2000, EXPT SOFTWARE ENG IN
   Zimmermann T, 2004, PROC INT CONF SOFTW, P563, DOI 10.1109/ICSE.2004.1317478
NR 51
TC 17
Z9 17
U1 1
U2 4
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD APR 1
PY 2007
VL 65
IS 3
BP 249
EP 274
DI 10.1016/j.scico.2006.05.011
PG 26
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 158MY
UT WOS:000245796800003
OA Bronze
DA 2024-07-18
ER

PT J
AU Voinea, L
   Lukkien, J
   Telea, A
AF Voinea, Lucian
   Lukkien, Johan
   Telea, Alexandru
TI Visual assessment of software evolution
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE SCM data mining; software evolution; software visualization
ID TOOL
AB Configuration management tools have become well and widely accepted by the software industry. Software Configuration Management (SCM) systems hold minute information about the entire evolution of complex software systems and thus represent a good source for process accounting and auditing. However, it is still difficult to use the entire spectrum of information such tools maintain. Currently, significant effort is being done in the direction of mining this kind of software repositories for extracting data to support relevant assessments. In this article we propose a concerted set of visualization tools and techniques for the assessment of software evolution based on the information stored into SCM systems. Firstly, we introduce a generic way to obtain models of source code at different levels of detail and from different perspectives. Secondly, we propose a set of visual representations and techniques to efficiently and effectively depict the evolution of these code models. These techniques target specific questions and assessments, from the detailed code developer perspective to the overview required by system architects and project managers. We detail the concrete implementation of two such code models and corresponding visual representations. The file view describes code change at line level across multiple versions of a single file, or small number of files. The project view shows changes at file level across complete software projects. All our views share the same visual and interactive techniques, enabling users to easily switch among and correlate between them. We implement our visual techniques to quickly and compactly display and navigate the evolution of tens of thousands of artifacts on a single screen. We demonstrate our techniques with several use cases performed on real world, industry-size code bases and outline the concrete findings and ways our visualizations helped in understanding various types of code changes. (c) 2007 Published by Elsevier B.V.
C1 Tech Univ Eindhoven, Dept Comp Sci, NL-5600 MB Eindhoven, Netherlands.
C3 Eindhoven University of Technology
RP Voinea, L (corresponding author), Tech Univ Eindhoven, Dept Comp Sci, POB 513, NL-5600 MB Eindhoven, Netherlands.
EM l.voinea@tue.nl; j.j.lukkien.@tue.nl; alext@win.tue.nl
CR Ball T, 1996, COMPUTER, V29, P33, DOI 10.1109/2.488299
   Ball T., 1997, ICSE WORKSH PROC MOD, V11
   Beck K., 2000, EXTREME PROGRAMMING
   Bieman JM, 2003, PROG COMPREHEN, P44
   BURROWS C, 1999, OVUM EVALUATES CONFI
   Collberg C., 2003, Proceedings of the 2003 ACM symposium on Software visualization-SoftVis '03, P77
   Cormen T.H., 1996, INTRO ALGORITHMS
   EICK SG, 1992, IEEE T SOFTWARE ENG, V18, P957, DOI 10.1109/32.177365
   EIGLSPERGER M, 2003, P SOFTVIS SAN DIEG C, P189
   Erlikh L., 2000, IT Professional, V2, P17, DOI 10.1109/6294.846201
   Fischer M, 2003, PROC IEEE INT CONF S, P23, DOI 10.1109/ICSM.2003.1235403
   Froehlich J, 2004, PROC INT CONF SOFTW, P387, DOI 10.1109/ICSE.2004.1317461
   Gall H, 2003, SIXTH INTERNATIONAL WORKSHOP ON PRINCIPLES OF SOFTWARE EVOLUTION, PROCEEDINGS, P13
   GALL H, ICSM 99, P99
   German Daniel, 2003, P 3 WORKSH OP SOURC
   GIRBA T, THESIS
   Griswold WG, 2001, PROC INT CONF SOFTW, P265, DOI 10.1109/ICSE.2001.919100
   GUTWENGER C, 2003, P 2003 ACM S SOFTW V, P179
   *ITEA ROBOCOP, 2002, ROB OP COMP BAS SOFT
   Jones JA, 2002, ICSE 2002: PROCEEDINGS OF THE 24TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P467, DOI 10.1109/ICSE.2002.1007991
   Lanza M., 2001, Proceedings of the 4th International Workshop on Principles of Software Evolution, P37
   Lommerse G, 2005, INFOVIS 05: IEEE SYMPOSIUM ON INFORMATION VISUALIZATION, PROCEEDINGS, P25
   LOPEZFERNANDEZ L, 2004, INT WORKSH MIN SOFTW
   Mockus A, 2002, ACM T SOFTW ENG METH, V11, P309, DOI 10.1145/567793.567795
   Möller A, 2004, EUROMICRO CONF PROC, P56, DOI 10.1109/EURMIC.2004.1333356
   Ohira M., 2005, Proceedings of International Workshop on Mining Software Repositories, P111
   REISS SP, 2001, ICSE 01
   Seacord R.C., 2003, SEI SERIES SOFTWARE
   Shneiderman B, 1996, IEEE SYMPOSIUM ON VISUAL LANGUAGES, PROCEEDINGS, P336, DOI 10.1109/VL.1996.545307
   Sliwerski J, 2005, P INT WORKSH MIN SOF, P24
   STOREY MA, 2002, P INT C HUM FACT COM, P520
   Telea Alexandru., 2002, Proceedings of the symposium on Data Visualisation 2002, VISSYM '02, P241
   TILLEY SR, 1994, INT J SOFTWARE ENG K
   van Ommering R, 2000, COMPUTER, V33, P78, DOI 10.1109/2.825699
   Van Rysselberghe F, 2004, PROC IEEE INT CONF S, P328, DOI 10.1109/ICSM.2004.1357818
   Van Wijk J. J., 1999, Proceedings 1999 IEEE Symposium on Information Visualization (InfoVis'99), P73, DOI 10.1109/INFVIS.1999.801860
   Voinea L., 2005, Proceedings of the ACM Symposium on Software Visualization, P47, DOI [10.1145/1056018.1056025, DOI 10.1145/1056018.1056025]
   Voinea L., 2005, P IEEE EUR S VIS EUR, P223
   WINTER M, 2002, 2 INT WORKSH COMP LA
   Wu JW, 2004, 7TH INTERNATIONAL WORKSHOP ON PRINCIPLES OF SOFTWARE EVOLUTION, P57, DOI 10.1109/IWPSE.2004.1334769
   Ying ATT, 2004, IEEE T SOFTWARE ENG, V30, P574, DOI 10.1109/TSE.2004.52
   Zimmermann T, 2003, SIXTH INTERNATIONAL WORKSHOP ON PRINCIPLES OF SOFTWARE EVOLUTION, PROCEEDINGS, P73, DOI 10.1109/IWPSE.2003.1231213
   ZIMMERMANN T, 2004, INT WORKSH MIN SOFTW
   Zimmermann T., 2004, P 26 INT C SOFTW ENG, P429
   1996, ARTICUS SYSTEMS ROBU
   [No title captured]
NR 46
TC 10
Z9 10
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD APR 1
PY 2007
VL 65
IS 3
BP 222
EP 248
DI 10.1016/j.scico.2006.05.012
PG 27
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 158MY
UT WOS:000245796800002
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Dutchyn, C
   Tucker, DB
   Krishnamurthi, S
AF Dutchyn, Christopher
   Tucker, David B.
   Krishnamurthi, Shriram
TI Semantics and scoping of aspects in higher-order languages
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT ACM SIGPLAN Conference on Aspect-Oriented Software Development
CY MAR 17-21, 2003
CL Boston, MA
DE scheme; aspect; join point; pointcut; advice; higher-order; CEKS;
   abstract machine
ID MODEL; PROGRAMMERS; AOP
AB Aspect-oriented software design will need to support languages with first-class and higher-order procedures, such as Ruby, Perl, ML and Scheme. These language features present both challenges and benefits for aspects. On the one hand, they force the designer to carefully address issues of scope that do not arise in first-order languages. On the other hand, these distinctions of scope make it possible to define a much richer variety of policies than first-order aspect languages permit.
   In this paper, we describe the subtleties of pointcuts and advice for higher-order languages, particularly Scheme. We then resolve these subtleties by alluding to traditional notions of scope. In particular, programmers can now define both dynamic aspects traditional to AOP and static aspects that can capture common security-control paradigms. We provide an operational semantics, based on an extended CEKS machine, that gives a formal account of dynamic and static aspects. We implement the language as an extension to Scheme. By exploiting two novel features of our Scheme system-continuation marks and language-defining macros-the implementation is lightweight and integrates well into the programmer's toolkit. (c) 2006 Elsevier B.V. All rights reserved.
C1 Univ Saskatchewan, Dept Comp Sci, Saskatoon, SK S7N 1X9, Canada.
   Brown Univ, Dept Comp Sci, Providence, RI 02912 USA.
C3 University of Saskatchewan; Brown University
RP Dutchyn, C (corresponding author), Univ Saskatchewan, Dept Comp Sci, 176 Thorvaldson Bldg,110 Sci Pl, Saskatoon, SK S7N 1X9, Canada.
EM dutchyn@cs.usask.ca
OI Krishnamurthi, Shriram/0000-0001-5184-1975
CR Abelson H., 1998, Higher Order Symbolic Computation, V11, P7, DOI 10.1023/A:1010051815785
   BAUER L, 2002, TR65502 PRINC U
   Bergmans L, 2001, COMMUN ACM, V44, P51, DOI 10.1145/383845.383857
   Clements J, 2004, ACM T PROGR LANG SYS, V26, P1029, DOI 10.1145/1034774.1034778
   Clements J, 2003, LECT NOTES COMPUT SC, V2618, P22
   Clements J, 2001, LECT NOTES COMPUT SC, V2028, P320
   Costa RS, 2003, PESQUI AGROPECU BRAS, V38, P27, DOI 10.1590/S0100-204X2003000100004
   DANTAS DS, 2005, TR71705 PRINC U
   DANTAS DS, 2005, ACM INT C FUNCT PROG
   Douence R., 2001, LECT NOTES COMPUTER, V2192, P170, DOI DOI 10.1007/3-540-45429-2_13
   DUTCHYN C, 2005, ASPECTSCHEME, V2
   DUTCHYN C, 2005, ASPECTSCHEME, V1
   Dybvig R. K., 1993, LISP and Symbolic Computation, V5, P295, DOI 10.1007/BF01806308
   FELLEISEN M, 1992, THEOR COMPUT SCI, V103, P235, DOI 10.1016/0304-3975(92)90014-7
   FILMAN RE, 2001, WORKSH ADV SEP CONC
   Findler RB, 2002, J FUNCT PROGRAM, V12, P159, DOI 10.1017/S0956796801004208
   Flatt M, 2002, ACM SIGPLAN NOTICES, V37, P72, DOI 10.1145/583852.581486
   FLATT M, 1997, TR97280 RIC U
   Gray J, 2001, COMMUN ACM, V44, P87, DOI 10.1145/383845.383864
   HANSON C, 2002, MIT SCHEME REFERENCE
   Kiczales G, 1997, LECT NOTES COMPUT SC, V1241, P220, DOI 10.1007/BFb0053381
   Kiczales Gregor, 2001, LNCS, V2072, P327, DOI DOI 10.1007/3-540-45337-718
   KOHLBECKER EE, 1987, ACM SIGPLAN SIGACT S, P77
   KOHLBECKER EE, 1986, THESIS INDIANA U
   Kohlbecker Eugene., 1986, P 1986 ACM C LISP FU, P151
   LAMMEL R, 2002, ACM WORKSH RUL BAS P
   Lieberherr K, 2001, COMMUN ACM, V44, P39, DOI 10.1145/383845.383855
   Masuhara H, 2003, LECT NOTES COMPUT SC, V2622, P46
   Netinant P, 2001, COMMUN ACM, V44, P83, DOI 10.1145/383845.384200
   Northrop L., 2001, SOFTWARE PRODUCT LIN
   Orleans D., 2002, PROC AOSD 02, P56
   SERENI D, 2003, AOSD, P30, DOI DOI 10.1145/643603.643607
   Sullivan GT, 2001, COMMUN ACM, V44, P95, DOI 10.1145/383845.383865
   TUCKER DB, 2003, ACM C ASP OR SOFTW D, P158
   WALKER D, 2003, ACM INT C FUNCT PROG, P127
   Wand M, 2004, ACM T PROGR LANG SYS, V26, P890, DOI 10.1145/1018203.1018208
NR 36
TC 24
Z9 27
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 15
PY 2006
VL 63
IS 3
SI SI
BP 207
EP 239
DI 10.1016/j.scico.2006.01.003
PG 33
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 110CL
UT WOS:000242355800002
DA 2024-07-18
ER

PT J
AU De Nicola, R
   Gorla, D
   Pugliese, R
AF De Nicola, Rocco
   Gorla, Daniele
   Pugliese, Rosario
TI Confining data and processes in global computing applications
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT International Workshop on Security Issues in Coordination Models,
   Languages, and Systems
CY JUN 28-29, 2003
CL Eindhoven, NETHERLANDS
DE global computing; formal methods; type systems; data secrecy
ID RESOURCE ACCESS; MOBILE
AB A programming notation is introduced that can be used for protecting secrecy and integrity of data in global computing applications. The approach is based on the explicit annotations of data and network nodes. Data are tagged with information about the allowed movements, network nodes are tagged with information about the nodes that can send data and spawn processes to them. The annotations are used to confine movements of data and processes. The approach is illustrated by applying it to three paradigmatic calculi for global computing, namely CKLAIM (a calculus at the basis of CKLAIM), D pi (a distributed version of the pi-calculus) and Mobile Ambients Calculus. For all of these formalisms, it is shown that their semantics guarantees that computations proceed only while respecting confinement constraints. Namely, it is proven that, after successful static type checking, data can reside at and cross only authorised nodes. "Local" formulations of this property where only relevant subnets type check are also presented. Finally, the theory is tested by using it to model secure behaviours of a UNIX-like multiuser system. (c) 2006 Elsevier B.V. All rights reserved.
C1 Univ Roma La Sapienza, Dipartimento Informat, Rome, Italy.
   Univ Florence, Dipartimento Sistemi & Informat, I-50121 Florence, Italy.
C3 Sapienza University Rome; University of Florence
RP Gorla, D (corresponding author), Univ Roma La Sapienza, Dipartimento Informat, Piazzale Aldo Moro 5, Rome, Italy.
EM denicola@dsi.unifi.it; gorla@di.uniroma1.it; pugliese@dsi.unifi.it
RI Pugliese, Rosario/J-3685-2012; Gorla, Daniele/E-5911-2017; De Nicola,
   Rocco/B-8584-2012
OI Pugliese, Rosario/0000-0002-1419-1405; Gorla,
   Daniele/0000-0001-8859-9844; De Nicola, Rocco/0000-0003-4691-7570
CR Braghin C, 2002, COMPUT LANG SYST STR, V28, P101, DOI 10.1016/S0096-0551(02)00009-7
   Bugliesi M., 2001, LNCS, V2215, P38
   Cardelli L, 2002, INFORM COMPUT, V177, P160, DOI 10.1006/inco.2001.3121
   Cardelli L, 2000, THEOR COMPUT SCI, V240, P177, DOI 10.1016/S0304-3975(99)00231-5
   CARDELLI L, 2000, LECT NOTES COMPUTER, V1877, P365
   COPPO M, 2002, ENTCS, V78
   DALZILIO S, 2000, LNCS, V1893, P409
   De Nicola R, 1998, IEEE T SOFTWARE ENG, V24, P315, DOI 10.1109/32.685256
   Degano P, 2000, LECT NOTES COMPUT SC, V1961, P199
   Erlingsson U, 2000, NEW SECURITY PARADIGM WORKSHOP, PROCEEDINGS, P87
   GELERNTER D, 1985, ACM T PROGR LANG SYS, V7, P80, DOI 10.1145/2363.2433
   GIOVANNETTI E, 2004, ENTCS
   Gorla D, 2003, LECT NOTES COMPUT SC, V2719, P119
   GORLA D, 2004, P 19 ANN ACM SIGAPP
   GORLA D, 2003, SEMANTIC THEORY GLOB
   Hansen RR, 1999, LECT NOTES COMPUT SC, V1694, P134
   Hennessy M, 2002, INFORM COMPUT, V173, P82, DOI 10.1006/inco.2001.3089
   Hennessy M, 2000, LECT NOTES COMPUT SC, V1853, P415
   HENNESSY M, 2003, IN PRESS J LOGIC ALG
   Kirli ZD, 2001, P IEEE CSFW, P283, DOI 10.1109/CSFW.2001.930153
   Lhoussaine C, 2004, LECT NOTES COMPUT SC, V2986, P171
   Lhoussaine C, 2003, LECT NOTES COMPUT SC, V2618, P253
   MILNER R, 1992, INFORM COMPUT, V100, P1, DOI [10.1016/0890-5401(92)90008-4, 10.1016/0890-5401(92)90009-5]
   Necula G.C., 1997, 24 ANN S PRINCIPLES, P106
   Nielson F, 1999, LECT NOTES COMPUT SC, V1664, P463
   Schneider FB, 2001, LECT NOTES COMPUT SC, V2000, P86
   Vitek J, 2001, SOFTWARE PRACT EXPER, V31, P507, DOI 10.1002/spe.369
   ZHAO T, 2003, P 18 ANN ACM SIGPLAN, P135
   Zimmer P, 2000, LECT NOTES COMPUT SC, V1784, P375
NR 29
TC 6
Z9 6
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV
PY 2006
VL 63
IS 1
BP 57
EP 87
DI 10.1016/j.scico.2005.07.013
PG 31
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 096DD
UT WOS:000241356300005
OA Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Murakami, M
AF Murakami, M
TI A calculus for concurrent system with higher-order streaming
   communication
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 3rd International Workshop on System Software Architectures (IWSSA 04)
CY JUN, 2004
CL Las Vegas, NV
DE higher-order mu-calculus; concurrency; asynchronous communication;
   streaming
AB This paper presents a formal model of concurrent system that is equipped with capabilities of sending and receiving higher-order terms. That is a modification of the asynchronous higher-order pi-calculus. A new operation, input streaming, is introduced. An input process consists of an input stream and a process P. It can receive a higher-order term t during the execution of P. Input prefix and output process are also modified to represent non-atomic communication. The calculus models computations transferring mobile codes and links on a wide-area network in an asynchronous manner. A labeled transition system (Its) is presented for the operational semantics. Equivalence relations based on the Its are introduced. The equivalences are based on the idea of barbed bisimulation that is suitable for non-atomic/asynchronous communicating systems. (c) 2004 Elsevier B.V. All rights reserved.
C1 Okayama Univ, Grad Sch Nat Sci & Technol, Dept Informat & Commun Syst, Okayama 7000082, Japan.
C3 Okayama University
RP Murakami, M (corresponding author), Okayama Univ, Grad Sch Nat Sci & Technol, Dept Informat & Commun Syst, Okayama 7000082, Japan.
EM murakami@momo.it.okayama-u.ac.jp
CR BALDAMUS M, 1995, TR9521
   BALDAMUS M, 1997, P 7 INT JOINT C THEO
   Milner R., 1989, Communication and concurrency
   MILNER R, 1999, COMMUNICATIN MOBILE
   MURAKAMI M, 2001, P SCI 01, V14, P332
   Sangiorgi D, 1996, INFORM COMPUT, V131, P141, DOI 10.1006/inco.1996.0096
   Sangiorgi D, 1996, THEOR COMPUT SCI, V167, P235, DOI 10.1016/0304-3975(96)00075-8
   SANGIORGI D, 2001, THEORY MOBILE PROCES
   SANGIORGI D, 2001, THEORETICAL COMPUTER, V253, P331
NR 9
TC 0
Z9 0
U1 0
U2 1
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUL
PY 2005
VL 57
IS 1
BP 61
EP 72
DI 10.1016/j.scico.2004.10.005
PG 12
WC Computer Science, Software Engineering
WE Conference Proceedings Citation Index - Science (CPCI-S); Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 935UU
UT WOS:000229809700005
DA 2024-07-18
ER

PT J
AU Rajsbaum, S
   Viso, E
AF Rajsbaum, S
   Viso, E
TI Object-oriented algorithm analysis and design with Java
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT Conference on the Principles and Practice of Programming in Java
CY JUN, 2003
CL Kilkenny, IRELAND
DE algorithms; inheritance; polymorphism; teaching Java; sorting; graph
   algorithms; string matching; network flow
AB This paper presents a new approach to algorithm design and analysis that benefits from the OO characteristics of Java. It consists of first defining the inheritance structure of a collection of algorithms, at different levels of abstraction. Then, correctness proofs and complexity measures are designed for the various levels of abstraction. The goal is to prove as many properties as possible at each abstract level, assuming the implementations of the methods called upon will be correct. Thus, when a more specialized algorithm is derived from a more abstract one, proofs and complexity analysis can be reused, and simply need to be completed by proving that the properties assumed for the concrete methods indeed hold. The approach is illustrated with several inheritance trees: for sorting, graph algorithms, string matching, and network flow. Each tree, at the bottom of the hierarchy, yields well-known algorithms in the respective area. Instead of using pseudo-code to describe these trees, Java is used to make the process more precise and useful, encouraging the design and analysis of algorithms, and also experimentation with new variants. The implementation presented in this paper takes advantage of Java's organization to build the inheritance trees for the classes, and Java's interfaces, collections, comparators, and iterators. (C) 2004 Elsevier B.V. All rights reserved.
C1 Univ Nacl Autonoma Mexico, Inst Matemat, Mexico City 04510, DF, Mexico.
   Univ Nacl Autonoma Mexico, Fac Ciencias, Mexico City 04510, DF, Mexico.
C3 Universidad Nacional Autonoma de Mexico; Universidad Nacional Autonoma
   de Mexico
RP Univ Nacl Autonoma Mexico, Inst Matemat, Ciudad Univ, Mexico City 04510, DF, Mexico.
EM rajsbaum@math.unam.mx; viso@servidor.unam.mx
RI Rajsbaum, Sergio/Y-3963-2018
OI Rajsbaum, Sergio/0000-0002-0009-5287
CR Ahuja R. K., 1993, Network flows: theory, algorithms, and applications
   AMTOFT T, 2001, ABSTRACTION INSTANTI
   [Anonymous], 1996, Structure and interpretation of computer programs
   AVERBUCH A, 1992, J ALGORITHMS, V13, P577, DOI 10.1016/0196-6774(92)90057-J
   Baase S., 2000, COMPUTER ALGORITHMS
   Cormen Thomas H., 2001, INTRO ALGORITHMS
   JAZAYERI M, 2000, LECT NOTES COMPUTER, V1766
   LAMPORT L, 2002, TLAPLUS LANGUAGE TOO
   LAU KK, 1992, COMPUT J, V35, pA1
   MERRITT SM, 1985, COMMUN ACM, V28, P96, DOI 10.1145/2465.214925
   MERRITT SM, 1989, SIGCOM, P116
   Musser D.R., 1996, STL tutorial and reference guide
   MUSSER DR, 1987, P 1987 ANN ACM SIGAD, P216
   MUSSER DR, 1998, FAST GENERIC SEQUENC
   Nguyen D, 2001, SIGCSE BULL, V33, P263, DOI 10.1145/366413.364597
   Preiss BR, 1999, PROCEEDINGS OF THE THIRTIETH SIGCSE TECHNICAL SYMPOSIUM ON COMPUTER SCIENCE EDUCATION, P95, DOI 10.1145/384266.299696
   RAJSBAUM S, 2003, ACM 2 INT C PRINC PR, P79
   RAJSBAUM S, 2002, NOTAS PARA CURSO ANA, V1
   Weiss MA, 1998, DATA STRUCTURES ALGO
NR 19
TC 1
Z9 1
U1 1
U2 5
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN
PY 2005
VL 54
IS 1
BP 25
EP 47
DI 10.1016/j.scico.2004.05.004
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 871MT
UT WOS:000225138500003
OA Bronze
DA 2024-07-18
ER

PT J
AU Kniesel, G
   Koch, H
AF Kniesel, G
   Koch, H
TI Static composition of refactorings
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE refactoring; conditional program transformation; OR-sequence;
   AND-sequence; composition; derivation of precondition; transformation
   description
AB The number of possible refactorings is unlimited, so no toot vendor will ever be able to provide custom refactorings for all specific user needs. Therefore, we propose a new kind of refactoring tools, which allow users to create, edit and compose required refactorings just like any other documents.
   The heart of such a refactoring editor is the ability to compose larger refactorings from existing ones. Computing the precondition of the composite refactoring from the preconditions of the composed refactorings is non-trivial since earlier transformations influence the truth of preconditions of later ones. The ability to calculate these effects without referring to a particular program to which the refactorings should be applied is called program-independent composition. It is the prerequisite for creating composite refactorings that are reusable on arbitrary programs.
   The main contribution of this paper is a formal model for automatic, program-independent composition of conditional program transformations. We show that conditional transformations, including refactorings, can be composed from a limited set of basic operations. Program-independent derivation of a precondition for the composite is based on the notion of "transformation description", which can be seen as a simplified, yet equally powerful, variant of Roberts' "postconditions" (Practical analysis for refactoring, Ph.D. Thesis (1999)).
   Our approach simplifies the implementation of refactoring tools-only the basic operations and the ability for composition must be hard coded in a tool. As a proof of concept, we sketch a transformation framework that implements our approach (jConditioner) and, based on the framework, an experimental refactoring tool (ConTraCT) that includes the editing capabilities that motivated our work. (C) 2004 Elsevier B.V. All rights reserved.
C1 Univ Bonn, Inst Comp Sci 3, D-53117 Bonn, Germany.
C3 University of Bonn
RP Univ Bonn, Inst Comp Sci 3, Romerstr 164, D-53117 Bonn, Germany.
EM gk@cs.uni-bonn.de
CR [Anonymous], 2002, Agile software development
   [Anonymous], 2000, Planning Extreme Programming
   BARDEY U, 2003, ABHANGIGKEITSANALYSE
   Beck Kent, 1999, Extreme Programming Explained: Embrace Change
   BERGSTEIN PI, 1994, THESIS N E U
   BEZIVIN J, 2003, UNPUB ATL TRANSFORMA
   BORBA P, 2003, REFINEMENT ALGEBRA
   BORLAND, JBUILD HOM
   CINNEIDE M, 2000, THESIS TRINITY COLLE
   DAHM M, 1999, B1798 FREIE U BERL I
   DIG D, JAVAREFACTOR PLUGIN
   FLORIJN G, 1997, OBJ OR PROGR 11 EUR, V1241
   Fowler M., 2018, Refactoring: Improving the Design of Existing Code
   GAMMA E, 1995, DESIGN PATTERNS
   GRISWORLD WG, 1991, THESIS U WASHINGTON
   HANNEMANN J, 2001, WORKSH ADV SEP CONC
   KERIEVSKY J, 2003, REFACTORING PATTERNS
   KNIESEL G, 2003, IAITR031
   KOCH H, 2002, THESIS U BONN
   LAMMEL R, 2002, P 3 ACM SIGPLAN WORK
   LUDWIG A, 2000, LNCS, P2177
   MENS T, 1999, THESIS VRIJE U BRUSS
   Opdyke W.F., 1992, Refactoring Object-Oriented Frameworks
   Roberts D.B., 1999, Ph.D. thesis
   Roberts KC, 1997, MICROCIRCULATION-LON, V4, P253, DOI 10.3109/10739689709146788
   SEGUIN C, JREFACTORY HOMEPAGE
   SOARES S, 2002, P OOPSLA 02 OBJ OR P, V37, P174
   TIP F, 2002, RC22662 W0212027 IBM
   TOKUDA LA, 1999, THESIS U TEXAS AUSTI
   VANDEURSEN A, 2001, EXTREME PROGRAMMING
NR 30
TC 41
Z9 45
U1 0
U2 1
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD AUG
PY 2004
VL 52
IS 1-3
BP 9
EP 51
DI 10.1016/j.scico.2004.03.002
PG 43
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 841OS
UT WOS:000222940800002
OA Bronze
DA 2024-07-18
ER

PT J
AU Maraninchi, F
   Rémond, Y
AF Maraninchi, F
   Rémond, Y
TI Mode-Automata:: a new domain-specific construct for the development of
   safe critical systems
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 5th ERCIM International Workshop on Forman Methods for Industrial
   Critical Systems (FMICS)
CY APR 03-04, 2000
CL BERLIN, GERMANY
SP GMD Res Inst Open Communicat Syst
DE real-time systems; safety-critical; regulation systems; running-modes;
   language design and implementation; case-study; production cell
ID LANGUAGE; MACHINES; DESIGN
AB Over the past ten years, the family of synchronous languages (Special Section of the Proc. IEEE 79 (9) (1991)) has been very successful in offering domain-specific, formally defined languages and programming environments for safety-critical systems. Among them, Lustre is well-suited for the development of regulation systems, which are first designed by control engineers, and can then be programmed as block-diagrams. Automatic generation of C code provides the embedded software.
   The success of Lustre showed that it is a good idea to offer domain-specific languages and constructs to reduce the gap between the first design of a system (for instance a control law) and the program written for it. When the structure of the first design has to be encoded into the available constructs of a general-purpose programming language, the interesting information is likely to be lost somewhere on the way from the original design to the actual implementation. This may have consequences on the efficiency of the code produced, or even on the correctness of the design.
   Working with the systems Lustre is well-suited for, we observed that they are often specified informally using the notion of running modes. However, there seemed to exist no language in which the mode-structure of a complex system could be expressed directly. Following the approach of domain-specific languages, we proposed to extend Lustre with a new construct, called mode-automaton, devoted to the description of these running modes of regulation systems.
   In this paper, we define the language of mode-automata and its semantics, give some ideas on the compilation process, illustrate the approach with the example of the production cell, and comment on the benefits of the approach, in general. (C) 2002 Elsevier Science B.V. All rights reserved.
C1 VERIMAG Ctr Equat, F-38610 Gieres, France.
   UJF, Grenoble, France.
C3 Communaute Universite Grenoble Alpes; Institut National Polytechnique de
   Grenoble; Universite Grenoble Alpes (UGA); Centre National de la
   Recherche Scientifique (CNRS); Communaute Universite Grenoble Alpes;
   Universite Grenoble Alpes (UGA)
RP VERIMAG Ctr Equat, 2 Ave Vignate, F-38610 Gieres, France.
EM florence.maraninchi@imag.fr
RI Remond, Yves/G-8954-2011
OI Maraninchi, Florence/0000-0003-0783-9178
CR [Anonymous], LECT NOTES COMPUTER
   Beauvais JR, 1998, 1998 INTERNATIONAL CONFERENCE ON APPLICATION OF CONCURRENCY TO SYSTEM DESIGN, PROCEEDINGS, P52, DOI 10.1109/CSD.1998.657539
   BENVENISTE A, 1991, P IEEE, V79, P1270, DOI 10.1109/5.97297
   BERRY G, 1992, SCI COMPUT PROGRAM, V19, P87, DOI 10.1016/0167-6423(92)90005-V
   BUDDE R, 2001, LANGUAGES COMPILERS, V1985, P19
   *C2A SYNCHRON, 1995, COMM FORM SYNCH LANG
   CASPI P, 1992, THEOR COMPUT SCI, V94, P125, DOI 10.1016/0304-3975(92)90326-B
   Caspi P., 1987, 14 S PRINC PROGR LAN
   FOHLER G, 1992, P 2 INT WORKSH RESP
   GAMMA E, 1995, DESIGN PATTERNS
   Gil JY, 1998, COMPUTER, V31, P118, DOI 10.1109/2.660196
   Girault A, 1999, IEEE T COMPUT AID D, V18, P742, DOI 10.1109/43.766725
   Gurevich Y., 2000, ACM T COMPUT LOG, V1, P77, DOI DOI 10.1145/343369.343384
   HALBWACHS N., 1993, 3 INT C ALG METH SOF
   HALBWACHS N, 1992, IEEE T SOFTWARE ENG
   HAREL D, 1987, SCI COMPUT PROGRAM, V8, P231, DOI 10.1016/0167-6423(87)90035-9
   Jeannet B, 1999, LECT NOTES COMPUT SC, V1694, P39
   KOUNTOURIS A, 1996, P INT WORKSH RT COMP
   MARANINCHI F, 2000, INT C COMP CONSTR BE
   MARANINCHI F, 1998, LECT NOTES COMPUTER, V1381
   Maraninchi F., 1992, LECT NOTES COMPUTER, V630
   Paynter S, 1996, LECT NOTES COMPUT SC, V1135, P90
   PUCHOL C, 1996, CSTR9537 U TEX
   Puschner P, 1998, EUROMICRO, P130, DOI 10.1109/EMWRTS.1998.685077
   RAYMOND P, 1998, 19 IEEE REAL TIM SYS
   Raymond P., 1996, 23 INT C AUT LANG PR
   RUTTEN E, 1995, 7 EUR WORKSH REAL TI
   *SYRF, 1996, LTR22703 SYRF
NR 28
TC 53
Z9 54
U1 0
U2 1
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR
PY 2003
VL 46
IS 3
BP 219
EP 254
AR PII S0167-6423(02)00093-X
DI 10.1016/S0167-6423(02)00093-X
PG 36
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 634AF
UT WOS:000180317300003
DA 2024-07-18
ER

PT J
AU Bonsangue, MM
   Kok, JN
   Zavattaro, G
AF Bonsangue, MM
   Kok, JN
   Zavattaro, G
TI Comparing coordination models and architectures using embeddings
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 3rd International Conference on Coordination Languages and Architectures
CY 1999
CL AMSTERDAM, NETHERLANDS
DE coordination models languages and architectures; data-driven and
   control-driven coordinations; structured operational semantics;
   architectural embeddings
ID LINDA; EXPRESSIVENESS; PRIMITIVES; LANGUAGES; SOFTWARE
AB We refine the notion of embedding in order to obtain a formal tool for the comparison of the relative expressive power of different languages, by taking into account also the intended architectures on which the software components described using those languages are executed. The new notion, called architectural embedding, is suitable for the comparison of different communication mechanisms, and gives rise to a natural notion of implementability. We will use this notion to present equivalence and difference results for several coordination models based on components that communicate either through an unordered broadcast, through an atomic broadcast, or through a synchronous broadcast. (C) 2002 Elsevier Science B.V. All rights reserved.
C1 Univ Bologna, Dept Comp Sci, I-40127 Bologna, Italy.
   CWI, NL-1090 GB Amsterdam, Netherlands.
   Leiden Univ, Leiden Inst Adv Comp Sci, NL-2300 RA Leiden, Netherlands.
C3 University of Bologna; Leiden University - Excl LUMC; Leiden University
RP Univ Bologna, Dept Comp Sci, Mura Anteo Zamboni 7, I-40127 Bologna, Italy.
EM zavattar@cs.unibo.it
OI Bonsangue, Marcello/0000-0003-3746-3618
CR Andreoli J. M., 1991, New Generation Computing, V9, P445, DOI 10.1007/BF03037173
   ANDREOLI JM, 1993, LECT NOTES COMPUTER, V668, P182
   [Anonymous], 1980, CALCULUS COMMUNICATI, DOI DOI 10.1007/3-540-10235-3
   Arbab F, 1998, SOFTWARE PRACT EXPER, V28, P703, DOI 10.1002/(SICI)1097-024X(199807)28:7<703::AID-SPE173>3.0.CO;2-J
   Arbab Farhad., 1998, Bulletin of the Dutch Association for Theoretical Computer Science NVTI, P11
   BOASSON M, 1993, IEEE T AUTOMAT CONTR, V38, P1094, DOI 10.1109/9.231463
   Bonsangue MM, 2000, THEOR COMPUT SCI, V240, P3, DOI 10.1016/S0304-3975(99)00226-1
   Bonsangue MM, 1999, LECT NOTES COMPUT SC, V1594, P150
   BONSANGUE MM, 1998, P 1998 ACM S APPL CO, P159
   BONSANGUE MM, 1999, P SAC 99, P156
   Brogi A, 1999, LECT NOTES COMPUT SC, V1594, P134
   Busi N, 1998, THEOR COMPUT SCI, V192, P167, DOI 10.1016/S0304-3975(97)00149-7
   Busi N, 2000, THEOR COMPUT SCI, V240, P49, DOI 10.1016/S0304-3975(99)00227-3
   Busi N, 2000, INFORM COMPUT, V156, P90, DOI 10.1006/inco.1999.2823
   CARRIERO N, 1989, COMMUN ACM, V32, P444, DOI 10.1145/63334.63337
   DEBOER FS, 1994, INFORM COMPUT, V108, P128, DOI 10.1006/inco.1994.1004
   ENGELS A, 1997, P FORTE 10 PSTV 17, P75
   GELERNTER D, 1992, COMMUN ACM, V35, P96, DOI 10.1145/129630.129635
   MAZURKIEWICZ A, 1987, LECT NOTES COMPUT SC, V255, P279
   Milner R., 1989, Communication and concurrency
   Palamidessi Catuscia., 1997, Proceedings of the 24th ACM SIGPLAN-SIGACT symposium on Principles of programming languages, P256
   Papadopoulos G. A., 1998, ADV COMPUT, V46, P329, DOI [DOI 10.1016/S0065-2458(08)60208-9, 10.1016/S0065-2458(08)60208-9]
   Shaw M., 1996, SOFTWARE ARCHITECTUR
   ZAVATTARO G, 1998, ELECT NOTES THEORETI, V16
   [No title captured]
NR 25
TC 2
Z9 2
U1 0
U2 0
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN-FEB
PY 2003
VL 46
IS 1-2
BP 31
EP 69
AR PII S0167-6423(02)00086-2
DI 10.1016/S0167-6423(02)00086-2
PG 39
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 633UT
UT WOS:000180302700003
DA 2024-07-18
ER

PT J
AU Reynolds, C
   Monahan, R
AF Reynolds, Conor
   Monahan, Rosemary
TI Reasoning about logical systems in the Coq proof assistant
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Coq; Institution theory; Theorem proving
ID UNIVERSAL ALGEBRA; CSP
AB The theory of institutions provides an abstract mathematical framework for specifying logical systems and their semantic relationships. Institutions are based on category theory and have deep roots in a well-developed branch of algebraic specification. However, there are no machine-assisted proofs of correctness for institution-theoretic constructions-chiefly satisfaction conditions for institutions and their (co)morphisms-making them difficult to incorporate into mainstream formal methods. This paper therefore provides the details of our approach to formalizing a fragment of the theory of institutions in the Coq proof assistant. We instantiate this framework with the institutions FOPEQ for first-order predicate logic and EVT for the Event-B specification language, and define some institution-independent constructions, all of which serve as an illustration and evaluation of the overall approach.
C1 [Reynolds, Conor; Monahan, Rosemary] Maynooth Univ, Dept Comp Sci, Maynooth, Ireland.
C3 Maynooth University
RP Reynolds, C (corresponding author), Maynooth Univ, Dept Comp Sci, Maynooth, Ireland.
EM conor.reynolds@mu.ie
OI Reynolds, Conor/0000-0002-6598-5512
FU Irish Research Council [GOIPG/2019/4529]
FX <B>Acknowledgements</B> The authors would like to thank the Irish
   Research Council for funding this research (GOIPG/2019/4529) .
CR Abrial J., 2010, Modeling in event-b-system and software engineering, DOI DOI 10.1017/CBO9781139195881
   Abrial Jean-Raymond, 2010, International Journal on Software Tools for Technology Transfer, V12, P447, DOI 10.1007/s10009-010-0145-y
   Amato G, 2020, Arxiv, DOI arXiv:2007.04840
   Bauer A, 2020, Arxiv, DOI arXiv:2009.05539
   Bertot Y., 2004, TEXT THEORET COMP S
   Burstall R.M., 2005, P ABSTR SOFTW SPEC 1, P292
   Capretta V, 1999, LECT NOTES COMPUT SC, V1690, P131
   Chlipala A., Certified programming with dependent types: a pragmatic introduction to the Coq proof assistant
   Coq Development Team, The Coq proof assistant
   Diaconescu R., Institution theory
   Diaconescu R., 2008, Studies in Universal Logic, V1st, DOI DOI 10.1007/978-3-7643-8708-2
   Farrell M., Event-B in the institutional framework: defining a semantics, modularisation constructs and interoperability for a specification language
   Farrell M, 2021, LOG METH COMPUT SCI, V18, DOI 10.46298/LMCS-18(4:4)2022
   Farrell M, 2017, LECT NOTES COMPUT SC, V10610, P140, DOI 10.1007/978-3-319-68690-5_9
   GOGUEN JA, 1984, LECT NOTES COMPUT SC, V164, P221
   GOGUEN JA, 1992, J ACM, V39, P95, DOI 10.1145/147508.147524
   Gunther E, 2018, ELECTRON NOTES THEOR, V338, P147, DOI 10.1016/j.entcs.2018.10.010
   Knapp A, 2015, LECT NOTES COMPUT SC, V9033, P3, DOI 10.1007/978-3-662-46675-9_1
   Meseguer J., 1989, Logic Colloquium '87, P275, DOI 10.1016/S0049-237X(08)70132-0
   Mossakowski T, 2007, LECT NOTES COMPUT SC, V4424, P519
   Reynolds Conor, 2021, Rigorous State-Based Methods. 8th International Conference, ABZ 2021. Proceedings. Lecture Notes in Computer Science (LNCS 12709), P162, DOI 10.1007/978-3-030-77543-8_17
   Reynolds C, 2022, LECT NOTES COMPUT SC, V13299, P180, DOI 10.1007/978-3-031-10363-6_13
   Riehl E., 2017, ser. Aurora: Dover modern math originals
   Roggenbach M, 2006, THEOR COMPUT SCI, V354, P42, DOI 10.1016/j.tcs.2005.11.007
   Romanovsky A., 2013, Industrial Deployment of System Engineering Methods
   Sannella D., 2012, Foundations of Algebraic Specification and Formal Software Development
   Sozeau M, 2010, LECT NOTES COMPUT SC, V6172, P419, DOI 10.1007/978-3-642-14052-5_29
   UFP (The Univalent Foundations Program), Homotopy type theory: univalent foundations of mathematics
   Wiegley J., Jwiegley/category-theory
NR 29
TC 0
Z9 0
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR
PY 2024
VL 233
AR 103054
DI 10.1016/j.scico.2023.103054
EA NOV 2023
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AA1B7
UT WOS:001115628600001
OA hybrid
DA 2024-07-18
ER

PT J
AU Daniel, G
   Cabot, J
AF Daniel, Gwendal
   Cabot, Jordi
TI Applying model-driven engineering to the domain of chatbots: The Xatkit
   experience
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Chatbots; Commercial; Lessons learned; DSL
AB Chatbots are becoming a common component of many types of software systems. But they are typically developed as a side feature using ad-hoc tools and custom integrations. Moreover, current frameworks are efficient only when designing simple chatbot applications while they still require advanced technical knowledge to define complex interactions and are difficult to evolve along with the company needs. In addition, the deployment of a chatbot application usually requires a deep understanding of the targeted platforms, especially back-end connections, increasing the development and maintenance costs.In this paper, we discuss our experiences building, evolving and distributing the Xatkit framework. Xatkit is a model-based framework built around a Domain-Specific Language to define chatbots (and voicebots and bots in general) in a platform-independent way. Xatkit also comes with a runtime engine that automatically deploys the chatbot application and manages the defined conversation logic over the platforms of choice.Xatkit has significantly evolved since its initial release. This paper focuses on describing the evolution and the reasons (technical and non-technical) that triggered them. We believe our lessons learned can be useful to any other initiative trying to build a successful industrial-level chatbot platform, and in general, any type of model-based solution.
C1 [Daniel, Gwendal] Univ Oberta Catalunya UOC, Avinguda Carl Friedrich Gauss 5, Castelldefels 08860, Spain.
   [Cabot, Jordi] Luxembourg Inst Sci & Technol, 5 Ave Hauts Fourneaux, L-4362 Esch Sur Alzette, Luxembourg.
C3 UOC Universitat Oberta de Catalunya; Luxembourg Institute of Science &
   Technology
RP Cabot, J (corresponding author), Luxembourg Inst Sci & Technol, 5 Ave Hauts Fourneaux, L-4362 Esch Sur Alzette, Luxembourg.
EM jordi.cabot@list.lu
RI Cabot, Jordi/P-7723-2015
OI Cabot, Jordi/0000-0003-2418-2489
CR Acerbis R, 2015, LECT NOTES COMPUT SC, V9114, P605, DOI 10.1007/978-3-319-19890-3_39
   Amazon, Amazon Lex Website
   Baudart G, 2018, PROCEEDINGS OF THE 5TH ACM SIGPLAN INTERNATIONAL WORKSHOP ON REACTIVE AND EVENT-BASED LANGUAGES AND SYSTEMS (REBLS'18), P21, DOI 10.1145/3281278.3281282
   Bertoa MF, 2020, SOFTW SYST MODEL, V19, P1163, DOI 10.1007/s10270-019-00741-0
   Brambilla M, 2009, 2009 IEEE CONGRESS ON SERVICES (SERVICES-1 2009), VOLS 1 AND 2, P562, DOI 10.1109/SERVICES-I.2009.94
   Bucchiarone A, 2020, SOFTW SYST MODEL, V19, P5, DOI 10.1007/s10270-019-00773-6
   Cabot J., 2020, P 23 ACM IEEE INT C
   Cabot J, 2021, 2021 IEEE/ACM THIRD INTERNATIONAL WORKSHOP ON BOTS IN SOFTWARE ENGINEERING (BOTSE 2021), P31, DOI 10.1109/BotSE52550.2021.00014
   Chong F, 2006, MULTITENANT DATA ARC, P14
   Daniel G, 2020, IEEE ACCESS, V8, P15332, DOI 10.1109/ACCESS.2020.2966919
   Daniel G, 2019, LECT NOTES COMPUT SC, V11483, P177, DOI 10.1007/978-3-030-21290-2_12
   Dejanovic I, 2017, KNOWL-BASED SYST, V115, P1, DOI 10.1016/j.knosys.2016.10.023
   Diaz E, 2021, J SYST SOFTWARE, V173, DOI 10.1016/j.jss.2020.110883
   Diaz O, 2010, J SYST SOFTWARE, V83, P1970, DOI 10.1016/j.jss.2010.05.075
   Escalona MJ, 2022, J OBJECT TECHNOL, V21, DOI 10.5381/jot.2022.21.4.a9
   Garrett J. J., 2010, The elements of user experience: user-centered design for the web and beyond
   Giraldo FD, 2018, SOFTWARE QUAL J, V26, P685, DOI 10.1007/s11219-016-9350-6
   Gomez M, 2023, Arxiv, DOI arXiv:2305.11326
   Google, DialogFlow Website
   Gorschek T, 2014, J SYST SOFTWARE, V95, P176, DOI 10.1016/j.jss.2014.03.082
   Hamdani M, 2018, PROCEEDINGS OF THE 2018 2ND INTERNATIONAL CONFERENCE ON MANAGEMENT ENGINEERING, SOFTWARE ENGINEERING AND SERVICE SCIENCES (ICMSS 2018), P134, DOI 10.1145/3180374.3181333
   Hutchinson J, 2014, SCI COMPUT PROGRAM, V89, P144, DOI 10.1016/j.scico.2013.03.017
   IBM, Watson Assistant Website
   Kerly A, 2007, KNOWL-BASED SYST, V20, P177, DOI 10.1016/j.knosys.2006.11.014
   Kim M, 2018, IEEE T SOFTWARE ENG, V44, P1024, DOI 10.1109/TSE.2017.2754374
   Kleppe A., 2008, Software Language Engineering: Creating Domain-Specific Languages using Metamodels
   Klopfenstein LC, 2017, DIS'17: PROCEEDINGS OF THE 2017 ACM CONFERENCE ON DESIGNING INTERACTIVE SYSTEMS, P555, DOI 10.1145/3064663.3064672
   Manning CD, 2014, PROCEEDINGS OF 52ND ANNUAL MEETING OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS: SYSTEM DEMONSTRATIONS, P55, DOI 10.3115/v1/p14-5010
   Mernik M, 2005, ACM COMPUT SURV, V37, P316, DOI 10.1145/1118890.1118892
   Mezhoudi N, 2021, INT J HUM-COMPUT INT, V37, P445, DOI 10.1080/10447318.2020.1824742
   Pérez-Soler S, 2020, LECT NOTES COMPUT SC, V12400, P207, DOI 10.1007/978-3-030-62522-1_15
   Planas E, 2021, SOFTW SYST MODEL, V20, P997, DOI 10.1007/s10270-021-00904-y
   Qasse I, 2021, 2021 IEEE/ACM THIRD INTERNATIONAL WORKSHOP ON BOTS IN SOFTWARE ENGINEERING (BOTSE 2021), P35, DOI 10.1109/BotSE52550.2021.00015
   Rahimi M, 2019, 2019 IEEE 27TH INTERNATIONAL REQUIREMENTS ENGINEERING CONFERENCE WORKSHOPS (REW 2019), P241, DOI 10.1109/REW.2019.00049
   Riccio V, 2020, EMPIR SOFTW ENG, V25, P5193, DOI 10.1007/s10664-020-09881-0
   Shihab E, 2022, IEEE SOFTWARE, V39, P28, DOI 10.1109/MS.2022.3176864
   Shwartz-Ziv R, 2022, INFORM FUSION, V81, P84, DOI 10.1016/j.inffus.2021.11.011
   Tarek A., 2022, PROCEDIA COMPUT SCI, V198, P397, DOI [10.1016/j.procs.2021.12.260, DOI 10.1016/J.PROCS.2021.12.260]
   Thomas NT, 2016, 2016 INTERNATIONAL CONFERENCE ON ADVANCES IN COMPUTING, COMMUNICATIONS AND INFORMATICS (ICACCI), P2740, DOI 10.1109/ICACCI.2016.7732476
   Vallecillo A., 2015, Int. J. Inf. Syst. Softw. Eng. Big Co, V1, P52
   Xu AB, 2017, PROCEEDINGS OF THE 2017 ACM SIGCHI CONFERENCE ON HUMAN FACTORS IN COMPUTING SYSTEMS (CHI'17), P3506, DOI 10.1145/3025453.3025496
   Zhang M, 2018, J SYST SOFTWARE, V144, P573, DOI 10.1016/j.jss.2018.06.075
NR 42
TC 1
Z9 1
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN
PY 2024
VL 232
AR 103032
DI 10.1016/j.scico.2023.103032
EA OCT 2023
PG 14
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA X4UF6
UT WOS:001098410900001
DA 2024-07-18
ER

PT J
AU Kauffman, S
   Zimmermann, M
AF Kauffman, Sean
   Zimmermann, Martin
TI The complexity of evaluating nfer
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Interval logic; Complexity; Runtime verification
ID LOGIC
AB Nfer is a rule-based language for abstracting event streams into a hierarchy of intervals with data. Nfer has multiple implementations and has been applied in the analysis of spacecraft telemetry and autonomous vehicle logs. This work provides the first complexity analysis of nfer evaluation, i.e., the problem of deciding whether a given interval is generated by applying rules. We show that the full nfer language is undecidable and that this depends on both recursion in the rules and an infinite data domain. By restricting either or both of those capabilities, we obtain tight decidability results.We also examine the impact on complexity of exclusive rules and minimality. For the most practical case, which is minimality with finite data, we provide a polynomial-time algorithm.& COPY; 2023 The Author(s). Published by Elsevier B.V. This is an open access article under the CC BY license (http://creativecommons .org /licenses /by /4 .0/).
C1 [Kauffman, Sean; Zimmermann, Martin] Aalborg Univ, Aalborg, Denmark.
C3 Aalborg University
RP Kauffman, S; Zimmermann, M (corresponding author), Aalborg Univ, Aalborg, Denmark.
EM seank@cs.aau.dk; mzi@cs.aau.dk
OI Kauffman, Sean/0000-0001-6341-3898; Zimmermann,
   Martin/0000-0002-8038-2453
FU ERC Advanced Grant LASSO; Villum Foundation Investigator Grant; Digital
   Research Center Denmark
FX This research was partly funded by the ERC Advanced Grant LASSO, the
   Villum Foundation Investigator Grant S4OS and DIREC, Digital Research
   Center Denmark (Secure Internet of things (SIoT) -Risk Analysis in
   Design and Operation) .
CR Aceto L, 2016, ACTA INFORM, V53, P207, DOI 10.1007/s00236-015-0231-4
   ALLEN JF, 1983, COMMUN ACM, V26, P832, DOI 10.1145/182.358434
   Arora S, 2009, COMPUTATIONAL COMPLEXITY: A MODERN APPROACH, P1, DOI 10.1017/CBO9780511804090
   Barringer Howard, 2011, FM 2011: Formal Methods. Proceedings 17th International Symposium on Formal Methods, P57, DOI 10.1007/978-3-642-21437-0_7
   Butler R.W., 2007, ANMLITE LANGUAGE LOG
   Chen JJ, 2000, SIGMOD REC, V29, P379, DOI 10.1145/335191.335432
   Convent L., 2018, LNCS, V11254, P144, DOI [DOI 10.1007/978-3-030-03044-5_10, 10.1007/978-3-030-03044, DOI 10.1007/978-3-030-03044]
   Faymonville P., 2017, arXiv
   Ghallab M, 1998, Technical Report, CVC TR-98-003/DCS TR-1165
   Hallé S, 2016, LECT NOTES COMPUT SC, V10012, P68, DOI 10.1007/978-3-319-46982-9_6
   HALPERN JY, 1991, J ACM, V38, P935, DOI 10.1145/115234.115351
   Havelund K., 2022, GIT REPOSITORY
   Havelund K, 2021, LECT NOTES COMPUT SC, V13085, P66, DOI 10.1007/978-3-030-92124-8_4
   Havelund K, 2015, INT J SOFTW TOOLS TE, V17, P143, DOI 10.1007/s10009-014-0309-2
   KAHN AB, 1962, COMMUN ACM, V5, P558, DOI 10.1145/368996.369025
   Kauffman S., 2021, THESIS U WATERLOO WA
   Kauffman S, 2023, SCI COMPUT PROGRAM, V225, DOI 10.1016/j.scico.2022.102909
   Kauffman S, 2022, LECT NOTES COMPUT SC, V13299, P388, DOI 10.1007/978-3-031-10363-6_26
   Kauffman S, 2021, LECT NOTES COMPUT SC, V13085, P103, DOI 10.1007/978-3-030-92124-8_6
   Kauffman S, 2021, J SYST ARCHITECT, V113, DOI 10.1016/j.sysarc.2020.101876
   Kauffman S, 2018, FORM METHOD SYST DES, V53, P54, DOI 10.1007/s10703-018-0317-z
   Kauffman S, 2016, LECT NOTES COMPUT SC, V9953, P394, DOI 10.1007/978-3-319-47169-3_31
   Kauffman S, 2016, LECT NOTES COMPUT SC, V10012, P235, DOI 10.1007/978-3-319-46982-9_15
   Luckham D, 2008, LECT NOTES COMPUT SC, V5321, P3, DOI 10.1007/978-3-540-88808-6_2
   Mallet F, 2008, INNOV SYST SOFTW ENG, V4, P309, DOI 10.1007/s11334-008-0055-2
   Minsky M., 1967, Computation: finite and infinite machines
   Montanari A, 2010, LEIBNIZ INT PR INFOR, V5, P597, DOI 10.4230/LIPIcs.STACS.2010.2488
   Montanari A, 2010, LECT NOTES COMPUT SC, V6199, P345, DOI 10.1007/978-3-642-14162-1_29
   Narayan A., 2017, INT WORKSH SIL ERR L
   Rosser B, 1941, AM J MATH, V63, P211, DOI 10.2307/2371291
   Suhothayan S., 2011, Proceedings of the 2011 ACM workshop on Gateway computing environments, P43, DOI DOI 10.1145/2110486.2110493
   Tarjan R., 1972, SIAM Journal on Computing, V1, P146, DOI 10.1137/0201010
   Zhang HP, 2014, SIGMOD'14: PROCEEDINGS OF THE 2014 ACM SIGMOD INTERNATIONAL CONFERENCE ON MANAGEMENT OF DATA, P217, DOI 10.1145/2588555.2593671
NR 33
TC 0
Z9 0
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN
PY 2024
VL 231
AR 103012
DI 10.1016/j.scico.2023.103012
EA SEP 2023
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA S7NJ3
UT WOS:001072997700001
OA Green Submitted, hybrid
DA 2024-07-18
ER

PT J
AU Ssanyu, J
   Bainomugisha, E
   Kanagwa, B
AF Ssanyu, Jackline
   Bainomugisha, Engineer
   Kanagwa, Benjamin
TI Teaching language processing with the PAMOJA framework
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Educational tools; Component-based software development; Language
   processing; Parsing algorithms
ID TOOL; COMPILER; MODEL
AB Existing educational tools for language processors have varying capabilities. There is no single tool that covers every aspect of language processors. As a result, there is a possibility that the educator and students will need multiple tools, switching between different specification notations, organization and interpretation of outputs, which could result in a steep learning curve. PAMOJA is a Java-based component framework with a broader scope - it supports construction of grammar-aware applications using the rapid application development style found in modern IDEs such as NetBeans. This paper investigated the possibility of using PAMOJA to develop educational tools for language processing courses. We conducted two major studies. The first study, summarized six design considerations, identified in the literature, for language processor educational tools. Then, we identified three example applications and demonstrated how to construct tools for them using PAMOJA. These include building and visualizing lexical scanners and parsers, as well as constructing a front-end for a software language, using a subset of Java language as an example. The second study evaluated the PAMOJA approach in relation to the identified design considerations, and by analyzing student and educator perceptions. The results seem to demonstrate a positive reception and acceptance, concluding that its application would facilitate the design of language processor teaching tools and learning language processors. (c) 2023 Elsevier B.V. All rights reserved.
C1 [Ssanyu, Jackline; Bainomugisha, Engineer; Kanagwa, Benjamin] Makerere Univ, Dept Comp Sci, POB 7062, Kampala, Uganda.
   [Ssanyu, Jackline] Kyambogo Univ, Dept Comp Sci, POB 1, Kampala, Uganda.
C3 Makerere University
RP Ssanyu, J (corresponding author), Makerere Univ, Dept Comp Sci, POB 7062, Kampala, Uganda.; Ssanyu, J (corresponding author), Kyambogo Univ, Dept Comp Sci, POB 1, Kampala, Uganda.
EM jssanyu@kyu.ac.ug; baino@cis.mak.ac.ug; bkanagwa@cis.mak.ac.ug
CR Aho AlfredV., 1973, THEORY PARSING TRANS, V1
   Almeida-Martinez Francisco J., 2010, 2010 IEEE Education Engineering 2010 - The Future of Global Learning Engineering Education (EDUCON 2010), P1019, DOI 10.1109/EDUCON.2010.5492467
   Almeida-Martinez F.J., 2010, P 15 ANN C INN TECHN
   Almeida-Martínez FJ, 2009, ICALT: 2009 IEEE INTERNATIONAL CONFERENCE ON ADVANCED LEARNING TECHNOLOGIES, P597, DOI 10.1109/ICALT.2009.158
   Almeida-Martinez FJ, 2008, SOFTVIS 2008: PROCEEDINGS OF THE 4TH ACM SYMPOSIUM ON SOFTWARE VISUALIZATION, P209
   Arnaiz-González A, 2018, COMPUT APPL ENG EDUC, V26, P2255, DOI 10.1002/cae.22036
   Arroyo Y, 2021, APPL SCI-BASEL, V11, DOI 10.3390/app11062554
   Bagge A.H., 2014, P 10 EDUCATORSSYMPOS, P1
   Barash M., 2021, DOMAIN SPECIFIC LANG, P293
   Benotti L, 2018, SIGCSE'18: PROCEEDINGS OF THE 49TH ACM TECHNICAL SYMPOSIUM ON COMPUTER SCIENCE EDUCATION, P2, DOI 10.1145/3159450.3159579
   Bovet J, 2008, SOFTWARE PRACT EXPER, V38, P1305, DOI 10.1002/spe.872
   BROWN MH, 1985, IEEE SOFTWARE, V2, P28, DOI 10.1109/MS.1985.229778
   CC2020 Task Force, 2020, Computing Curricula 2020: Paradigms for Global Computing Education, DOI [10.1145/3467967, DOI 10.1145/3467967]
   Chakraborty Pinaki, 2011, ACM Inroads, V2, P59, DOI 10.1145/2038876.2038893
   Costagliola G, 2022, MULTIMED TOOLS APPL, V81, P299, DOI 10.1007/s11042-021-10624-6
   de Jonge M., 2000, P 2 INT S CONSTR SOF, P5
   Debray S., 2002, SIGCSE Bulletin, V34, P341, DOI 10.1145/563517.563473
   del Vado Virseda R., 2020, P 2020 ACM C INN TEC, P552
   Demaille A., 2005, SIGCSE Bulletin, V37, P266, DOI 10.1145/1151954.1067518
   Demaille A, 2008, ITICSE '08: PROCEEDINGS OF THE 13TH ANNUAL CONFERENCE ON INNOVATION AND TECHNOLOGY IN COMPUTER SCIENCE EDUCATION, P68
   Gamma E., 1994, Design patterns: Elements of reusable object-oriented software
   Garmpis A, 2013, COMPUT APPL ENG EDUC, V21, P581, DOI 10.1002/cae.20502
   Golemanov Tzanko, 2020, CompSysTech '20: Proceedings of the 21st International Conference on Computer Systems and Technologies '20, P244, DOI 10.1145/3407982.3407991
   Granic A, 2022, EDUC INF TECHNOL, V27, P9725, DOI 10.1007/s10639-022-10951-7
   Granic A, 2019, BRIT J EDUC TECHNOL, V50, P2572, DOI 10.1111/bjet.12864
   Iung A, 2020, EMPIR SOFTW ENG, V25, P4205, DOI 10.1007/s10664-020-09872-1
   Jovanovic N, 2022, COMPUT APPL ENG EDUC, V30, P275, DOI 10.1002/cae.22456
   Jovanovic N, 2021, COMPUT APPL ENG EDUC, V29, P994, DOI 10.1002/cae.22353
   Kaplan A, 2000, SIGCSE BULL, V32, P11, DOI 10.1145/331795.331801
   Klint P, 2005, ACM T SOFTW ENG METH, V14, P331, DOI 10.1145/1072997.1073000
   Kögel S, 2018, PROC INT CONF SOFTW, P9, DOI 10.1145/3183377.3183388
   Krebs N, 2014, SCI COMPUT PROGRAM, V79, P101, DOI 10.1016/j.scico.2012.03.001
   Kundra D, 2016, IEEE CONF TECHNOL ED, P216, DOI [10.1109/T4E.2016.052, 10.1109/T4E.2016.51]
   Lammel R., 2018, Software Languages: Syntax, Semantics, and Metaprogramming, DOI DOI 10.1007/978-3-319-90800-7
   Lau K.K., 2018, An Introduction To Component-Based Software Developement
   Mernik M, 2003, IEEE T EDUC, V46, P61, DOI 10.1109/TE.2002.808277
   Minas M., 2020, P INT C ADV VIS INT
   Naps T.L., 2002, ACM SIGCSE Bulletin, Volume, V35, P131, DOI DOI 10.1145/960568.782998
   Cardona PAN, 2015, CUAD ACT, P154
   Ortin F, 2022, LECT NOTE NETW SYST, V470, P338, DOI 10.1007/978-3-031-04829-6_30
   Ortin F, 2022, PLOS ONE, V17, DOI 10.1371/journal.pone.0264326
   Pereira CH, 2018, COMPUT APPL ENG EDUC, V26, P1742, DOI 10.1002/cae.21944
   Rodger Susan H., 2009, SIGCSE Bulletin, V41, P403, DOI 10.1145/1539024.1509011
   Rodger S.H., 2006, JFLAP: An Interactive Formal Languages and Automata Package
   Rodríguez-Cerezo D, 2014, 2014 INTERNATIONAL SYMPOSIUM ON COMPUTERS IN EDUCATION (SIIE), P23, DOI 10.1109/SIIE.2014.7017699
   Sangal S, 2018, EDUC INF TECHNOL, V23, P2737, DOI 10.1007/s10639-018-9739-x
   Sondag T, 2010, SIGCSE 10: PROCEEDINGS OF THE 41ST ACM TECHNICAL SYMPOSIUM ON COMPUTER SCIENCE EDUCATION, P12
   Ssanyu J., 2023, PAMOJA GRAMMAR AWARE
   Ssanyu J, 2021, SCI COMPUT PROGRAM, V211, DOI 10.1016/j.scico.2021.102703
   Stamenkovic S., 2021, 25 INT C INF TECHN, P1
   Stamenkovic S, 2020, COMPUT APPL ENG EDUC, V28, P606, DOI 10.1002/cae.22231
   Szyperski C., 2002, Component Software: Beyond Object-Oriented Programming
   Urquiza-Fuentes J., 2011, P 16 ANN JOINT C INN, P203
   Van Den Brand M., 1996, ACM Transactions on Software Engineering and Methodology, V5, P1, DOI 10.1145/226155.226156
   Venkatesh V, 2000, MANAGE SCI, V46, P186, DOI 10.1287/mnsc.46.2.186.11926
   wikipedia, COMP PARS GEN
   yComp, YCOMP VCG VIEW COMP
NR 57
TC 1
Z9 1
U1 1
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUL
PY 2023
VL 229
AR 102959
DI 10.1016/j.scico.2023.102959
EA MAY 2023
PG 28
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA J5QL5
UT WOS:001010161200001
DA 2024-07-18
ER

PT J
AU Giallorenzo, S
   Montesi, F
   Peressotti, M
   Rademacher, F
AF Giallorenzo, Saverio
   Montesi, Fabrizio
   Peressotti, Marco
   Rademacher, Florian
TI LEMMA2Jolie: A tool to generate microservice APIs from domain models
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Microservices; Model-driven engineering; Domain-driven design; LEMMA;
   Jolie
AB We introduce LEMMA2Jolie, a tool for translating domain models of microservice archi-tectures given in LEMMA into concrete APIs of microservices in the Jolie programming language. Our tool combines the state of the art for the design and implementation of microservices: developers can use Domain-Driven Design (DDD) for the construction of the domain models of a microservice architecture, and then automatically transition to a service-oriented programming language that provides native linguistic support for imple-menting the behaviour of each microservice.(c) 2023 Elsevier B.V. All rights reserved.
C1 [Giallorenzo, Saverio] Univ Bologna, Bologna, Italy.
   [Giallorenzo, Saverio] INRIA, Paris, France.
   [Montesi, Fabrizio; Peressotti, Marco] Univ Southern Denmark, Odense, Denmark.
   [Rademacher, Florian] Univ Appl Sci & Arts Dortmund, Dortmund, Germany.
C3 University of Bologna; Inria; University of Southern Denmark
RP Giallorenzo, S (corresponding author), Univ Bologna, Bologna, Italy.; Giallorenzo, S (corresponding author), INRIA, Paris, France.; Montesi, F; Peressotti, M (corresponding author), Univ Southern Denmark, Odense, Denmark.; Rademacher, F (corresponding author), Univ Appl Sci & Arts Dortmund, Dortmund, Germany.
EM saverio.giallorenzo@gmail.com; fmontesi@imada.sdu.dk;
   peressotti@imada.sdu.dk; florian.rademacher@fh-dortmund.de
RI Montesi, Fabrizio/AAE-3306-2022; Giallorenzo, Saverio/M-5713-2018;
   Peressotti, Marco/ABD-8202-2020
OI Montesi, Fabrizio/0000-0003-4666-901X; Giallorenzo,
   Saverio/0000-0002-3658-6395; Peressotti, Marco/0000-0002-0243-0480
FU Independent Research Fund Denmark [0135-00219]
FX Work partially supported by Independent Research Fund Denmark, grant no.
   0135-00219.
CR [Anonymous], 2017, ENG MODELING LANGUAG
   [Anonymous], 2019, BALLERINA LANGUAGE N
   Bass L., 2013, SOFTWARE ARCHITECTUR
   Bogner J, 2019, 2019 IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ARCHITECTURE COMPANION (ICSA-C 2019), P187, DOI 10.1109/ICSA-C.2019.00041
   Butting A, 2018, SPLC'18: PROCEEDINGS OF THE 22ND INTERNATIONAL SYSTEMS AND SOFTWARE PRODUCT LINE CONFERENCE, VOL 1, P65, DOI 10.1145/3233027.3233037
   Carbone M, 2013, ACM SIGPLAN NOTICES, V48, P263, DOI 10.1145/2480359.2429101
   Chandramouli Ramaswamy, 2019, SECURITY STRATEGIES, DOI [/10.6028/NIST, DOI 10.6028/NIST]
   Dalla Preda Mila, 2012, Service-Oriented and Cloud Computing. First European Conference, ESOCC 2012. Proceedings, P48, DOI 10.1007/978-3-642-33427-6_4
   Dalla Preda M, 2017, LOG METH COMPUT SCI, V13, DOI 10.23638/LMCS-13(2:1)2017
   Deantoni J, 2016, 2016 ARCHITECTURE-CENTRIC VIRTUAL INTEGRATION (ACVI), P12, DOI 10.1109/ACVI.2016.9
   Dragoni N., 2017, PRESENT ULTERIOR SOF, P195, DOI DOI 10.1007/978-3-319-67425-4_12
   Erdweg S., 2012, P 12 WORKSH LANG DES, P1, DOI 10.1145/2427048.2427055
   Evans E., 2003, Domain-Driven Design
   Giallorenzo S, 2023, Arxiv, DOI [arXiv:2005.09520, 10.48550/ARXIV.2005.09520]
   Giallorenzo S, 2022, LECT NOTES COMPUT SC, V13271, P223, DOI 10.1007/978-3-031-08143-9_13
   Giallorenzo S, 2018, LECT NOTES COMPUT SC, V11230, P22, DOI 10.1007/978-3-030-02671-4_2
   Giallorenzo Saverio, 2022, LEMMA2JOLIE TOOL GEN
   Giallorenzo Saverio, 2021, COORDINATION MODELS, P276
   Guidi Claudio, 2019, P 2 INT C MICROSERVI
   JHipster, 2022, JHIPSTER DOM LANG JD
   JOHNSON RE, 1988, J OBJECT-ORIENT PROG, V1, P22
   Kapferer S., 2020, P S SUMM SCH SERV OR, P189
   Lano K, 2014, IEEE T SOFTWARE ENG, V40, P1224, DOI 10.1109/TSE.2014.2354344
   Montesi F, 2016, Arxiv, DOI [arXiv:1609.05830, DOI 10.48550/ARXIV.1609.05830]
   Montesi F, 2021, 2021 IEEE INTERNATIONAL CONFERENCE ON SERVICES COMPUTING (SCC 2021), P364, DOI 10.1109/SCC53864.2021.00050
   Montesi F, 2018, 33RD ANNUAL ACM SYMPOSIUM ON APPLIED COMPUTING, P1733, DOI 10.1145/3167132.3167427
   Montesi Fabrizio, 2013, Choreographic Programming
   Montesi Fabrizio, 2022, IN PRESS
   Montesi Fabrizio, 2014, Web Services Foundations, P81, DOI [DOI 10.1007/978-1-4614-7518-7_4, 10.1007/978-1-4614-7518-7_4, 10.1007/978-1-4614-7518-7\_4]
   Newman S., 2015, BUILDING MICROSERVIC
   OMG, 2017, UN MOD LANG OMG UML
   Preda Mila Dalla, 2012, 2012 5 IEEE INT C SE, P1
   Rademacher Florian, 2020, Enterprise, Business-Process and Information Systems Modeling. 21st International Conference, BPMDS 2020, 25th International Conference, EMMSAD 2020. Held at CAiSE 2020. Proceedings. Lecture Notes in Business Information Processing (LNBIP 387), P311, DOI 10.1007/978-3-030-49418-6_21
   Rademacher F, 2022, LECT NOTES COMPUT SC, V13365, P257, DOI 10.1007/978-3-031-15116-3_12
   Rademacher F, 2020, MICROSERVICES: SCIENCE AND ENGINEERING, P147, DOI 10.1007/978-3-030-31646-4_7
   Rademacher Florian, 2022, LEMMA MODEL PROCESSI
   Rademacher Florian, 2022, ECLIPSE PLUGIN LEMMA
   Schermann G, 2016, LECT NOTES COMPUT SC, V9586, P36, DOI 10.1007/978-3-662-50539-7_4
   Selic B, 2003, IEEE SOFTWARE, V20, P19, DOI 10.1109/MS.2003.1231146
   Soldani J, 2018, J SYST SOFTWARE, V146, P215, DOI 10.1016/j.jss.2018.09.082
   Sorgalla Jonas, 2021, SN COMPUT SCI, V2, P459
   Steinberg D., 2008, EMF: Eclipse Modeling Framework, Vsecond
   Terzic B, 2018, ENTERP INF SYST-UK, V12, P1034, DOI 10.1080/17517575.2018.1460766
   Wizenty Philip, 2022, 4 INT C MICR MICR 20
   Zimmermann Olaf, 2022, Patterns for API Design: Simplifying Integration with Loosely Coupled Message Exchanges
NR 45
TC 0
Z9 0
U1 2
U2 4
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN
PY 2023
VL 228
AR 102956
DI 10.1016/j.scico.2023.102956
EA APR 2023
PG 11
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA G4NA8
UT WOS:000988930000001
DA 2024-07-18
ER

PT J
AU Khatri, Y
   Singh, SK
AF Khatri, Yogita
   Singh, Sandeep Kumar
TI An effective software cross-project fault prediction model for quality
   improvement
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Software quality; Feature selection; Instance selection; Cross-project
   fault prediction; Effort-based performance measures; Non-effort-based
   performance measures
ID FEATURE-SELECTION METHOD; DEFECT PREDICTION; METRICS; CLASSIFICATION;
   OPTIMIZATION; VALIDATION
AB As a quality assurance activity, cross-project fault prediction (CPFP) involves building a model for predicting the faults in a specific software project (aka target project) facing the shortage of within-project training data, leveraging cross-projects data. However, the quality of training data decides the success of a CPFP model. Existing CPFP approaches mainly focused on instance selection with minimal attention to feature selection. Further, the validation of their models has been performed through non-effort-based performance measures (NEPMs) only, considering the availability of unlimited inspection resources, which is impractical. Addressing these problems, we propose a Hybrid Training Data Selection (HTDS) approach combining feature selection along with instance selection for building a proficient and pragmatic CPFP model by validating its effectiveness in terms of effort-based performance measures (EPMs) along with the NEPMs to confirm its practical applicability. The empirical results on 62 datasets manifested the potency of the proposed approach over all the compared approaches in terms of NEPMs and EPMs collectively. Thus, our proposed HTDS approach results in a more productive and practical CPFP model that can empower practitioners to produce quality software at a lesser cost.(c) 2022 Elsevier B.V. All rights reserved.
C1 [Khatri, Yogita; Singh, Sandeep Kumar] Jaypee Inst Informat Technol, Dept Comp Sci Engn & Informat Technol, Noida, India.
C3 Jaypee Institute of Information Technology (JIIT)
RP Khatri, Y (corresponding author), Jaypee Inst Informat Technol, Dept Comp Sci Engn & Informat Technol, Noida, India.
EM 19403019@mail.jiit.ac.in; sandeepk.singh@jiit.ac.in
RI SINGH, SANDEEP/ABI-3719-2020; Khatri, Yogita/W-1528-2018
OI Khatri, Yogita/0000-0001-8789-5932
CR Ali A, 2021, AUTOMAT SOFTW ENG, V28, DOI 10.1007/s10515-021-00289-8
   Amasaki S, 2015, PROCEEDINGS 41ST EUROMICRO CONFERENCE ON SOFTWARE ENGINEERING AND ADVANCED APPLICATIONS SEAA 2015, P96, DOI 10.1109/SEAA.2015.25
   [Anonymous], 2007, PROMISE 07, DOI DOI 10.1109/PROMISE.2007.10
   Ansari G, 2019, ARAB J SCI ENG, V44, P9191, DOI 10.1007/s13369-019-04064-6
   Arar ÖF, 2015, APPL SOFT COMPUT, V33, P263, DOI 10.1016/j.asoc.2015.04.045
   Basili VR, 1996, IEEE T SOFTWARE ENG, V22, P751, DOI 10.1109/32.544352
   Briand LC, 2002, IEEE T SOFTWARE ENG, V28, P706, DOI 10.1109/TSE.2002.1019484
   Canfora G, 2015, SOFTW TEST VERIF REL, V25, P426, DOI 10.1002/stvr.1570
   Cervante L, 2012, IEEE C EVOL COMPUTAT
   Chawla NV, 2002, J ARTIF INTELL RES, V16, P321, DOI 10.1613/jair.953
   Chen L, 2015, INFORM SOFTWARE TECH, V62, P67, DOI 10.1016/j.infsof.2015.01.014
   Cheung S.-C., 2011, P 19 ACM SIGSOFT S 1, P15
   COVER TM, 1967, IEEE T INFORM THEORY, V13, P21, DOI 10.1109/TIT.1967.1053964
   D'Ambros M, 2012, EMPIR SOFTW ENG, V17, P531, DOI 10.1007/s10664-011-9173-9
   Demsar J, 2006, J MACH LEARN RES, V7, P1
   Dick S, 2004, FUZZY SET SYST, V145, P81, DOI 10.1016/j.fss.2003.10.006
   Feng Changyong, 2014, Shanghai Arch Psychiatry, V26, P105, DOI 10.3969/j.issn.1002-0829.2014.02.009
   Gao KH, 2011, SOFTWARE PRACT EXPER, V41, P579, DOI 10.1002/spe.1043
   Gyimóthy T, 2005, IEEE T SOFTWARE ENG, V31, P897, DOI 10.1109/TSE.2005.112
   Hall MA, 2003, IEEE T KNOWL DATA EN, V15, P1437, DOI 10.1109/TKDE.2003.1245283
   Hall T, 2012, IEEE T SOFTWARE ENG, V38, P1276, DOI 10.1109/TSE.2011.103
   He P, 2018, MATH PROBL ENG, V2018, DOI 10.1155/2018/2650415
   He P, 2015, INFORM SOFTWARE TECH, V59, P170, DOI 10.1016/j.infsof.2014.11.006
   He ZM, 2012, AUTOMAT SOFTW ENG, V19, P167, DOI 10.1007/s10515-011-0090-3
   Herbold S., 2013, P 9 INT C PREDICTIVE, P1
   Herbold S, 2018, IEEE T SOFTWARE ENG, V44, P811, DOI 10.1109/TSE.2017.2724538
   Herzig K, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 2, P39, DOI 10.1109/ICSE.2015.133
   Hosseini S., 2016, ACM INT C P SER, P1
   Hosseini S, 2018, INFORM SOFTWARE TECH, V95, P296, DOI 10.1016/j.infsof.2017.06.004
   Hosseini S, 2019, IEEE T SOFTWARE ENG, V45, P111, DOI 10.1109/TSE.2017.2770124
   Huang Q, 2019, EMPIR SOFTW ENG, V24, P2823, DOI 10.1007/s10664-018-9661-2
   Jureczko M., 2010, P 6 INT C PREDICTIVE
   Kassab M, 2017, IEEE SOFTWARE, V34, P46, DOI 10.1109/MS.2017.3571582
   Kawata K, 2015, 3RD INTERNATIONAL CONFERENCE ON APPLIED COMPUTING AND INFORMATION TECHNOLOGY (ACIT 2015) 2ND INTERNATIONAL CONFERENCE ON COMPUTATIONAL SCIENCE AND INTELLIGENCE (CSI 2015), P2, DOI 10.1109/ACIT-CSI.2015.104
   Kennedy J, 1997, IEEE SYS MAN CYBERN, P4104, DOI 10.1109/ICSMC.1997.637339
   Khatri Y, 2022, INNOV SYST SOFTW ENG, V18, P263, DOI 10.1007/s11334-020-00380-5
   Khoshgoftaar TM, 2014, INFORM SYST FRONT, V16, P801, DOI 10.1007/s10796-013-9430-0
   Kochhar Pavneet Singh, 2016, 25 INT S SOFTWARE TE, P165, DOI 10.1145/2931037.2931051
   Lessmann S, 2008, IEEE T SOFTWARE ENG, V34, P485, DOI 10.1109/TSE.2008.35
   Liu WS, 2016, IEEE T RELIAB, V65, P38, DOI 10.1109/TR.2015.2461676
   Liu Y, 2010, IEEE T SOFTWARE ENG, V36, P852, DOI 10.1109/TSE.2010.51
   Lu HH, 2012, IEEE INT CONF AUTOM, P314, DOI 10.1145/2351676.2351734
   Ma Y, 2012, INFORM SOFTWARE TECH, V54, P248, DOI 10.1016/j.infsof.2011.09.007
   Menzies T, 2007, IEEE T SOFTWARE ENG, V33, P2, DOI 10.1109/TSE.2007.256941
   Menzies T, 2013, IEEE T SOFTWARE ENG, V39, P822, DOI 10.1109/TSE.2012.83
   Meyer AN, 2014, 22ND ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (FSE 2014), P19, DOI 10.1145/2635868.2635892
   Nam J, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P382, DOI 10.1109/ICSE.2013.6606584
   Ni C, 2022, IEEE T SOFTWARE ENG, V48, P786, DOI 10.1109/TSE.2020.3001739
   Ni C, 2017, J COMPUT SCI TECH-CH, V32, P1090, DOI 10.1007/s11390-017-1785-0
   Parnin C., 2011, P 2011 INT S SOFTWAR, P199, DOI [10.1145/2001420.2001445, DOI 10.1145/2001420.2001445]
   Pelayo L, 2007, NAFIPS 2007 - 2007 ANNUAL MEETING OF THE NORTH AMERICAN FUZZY INFORMATION PROCESSING SOCIETY, P69, DOI 10.1109/NAFIPS.2007.383813
   Peters F, 2013, IEEE WORK CONF MIN S, P409, DOI 10.1109/MSR.2013.6624057
   Qiu SJ, 2018, IET SOFTW, V12, P345, DOI 10.1049/iet-sen.2017.0111
   Romano J, 2006, ANN M FLOR ASS I RES, P1
   Ryu D, 2017, SOFTWARE QUAL J, V25, P235, DOI 10.1007/s11219-015-9287-1
   Satin R.F.P., 2015, PROC 2015 41 LAT AM
   Shivaji S, 2013, IEEE T SOFTWARE ENG, V39, P552, DOI 10.1109/TSE.2012.43
   Subramanyam R, 2003, IEEE T SOFTWARE ENG, V29, P297, DOI 10.1109/TSE.2003.1191795
   Tosun A, 2010, INFORM SOFTWARE TECH, V52, P1242, DOI 10.1016/j.infsof.2010.06.006
   Turabieh H, 2019, EXPERT SYST APPL, V122, P27, DOI 10.1016/j.eswa.2018.12.033
   Turhan B, 2009, EMPIR SOFTW ENG, V14, P540, DOI 10.1007/s10664-008-9103-7
   Wang S, 2013, IEEE T RELIAB, V62, P434, DOI 10.1109/TR.2013.2259203
   Wang TJ, 2016, AUTOMAT SOFTW ENG, V23, P569, DOI 10.1007/s10515-015-0179-1
   Wu F, 2018, IEEE T RELIAB, V67, P581, DOI 10.1109/TR.2018.2804922
   Xu Z, 2018, 2018 25TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION AND REENGINEERING (SANER 2018), P209, DOI 10.1109/SANER.2018.8330210
   Xu Z, 2016, 2016 IEEE 23RD INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER), VOL 1, P370, DOI 10.1109/SANER.2016.34
   Xue B, 2013, IEEE T CYBERNETICS, V43, P1656, DOI 10.1109/TSMCB.2012.2227469
   Yao JX, 2021, INFORM SOFTWARE TECH, V139, DOI 10.1016/j.infsof.2021.106664
   Yu X, 2017, P 29 INT C SOFTW ENG, P392, DOI DOI 10.18293/SEKE2017-043
   Zhou YM, 2018, ACM T SOFTW ENG METH, V27, DOI 10.1145/3183339
   Zimmerman T, 2009, 7TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P91, DOI 10.1145/1595696.1595713
NR 71
TC 1
Z9 1
U1 0
U2 4
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR
PY 2023
VL 226
AR 102918
DI 10.1016/j.scico.2022.102918
EA JAN 2023
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 8L3UX
UT WOS:000923711100001
DA 2024-07-18
ER

PT J
AU Fahrenberg, U
   Legay, A
AF Fahrenberg, Uli
   Legay, Axel
TI Featured games
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Featured transition system; Two-player game; Family-based model checking
ID PAYOFF GAMES; TIME
AB Feature-based analysis of software product lines and family-based model checking have seen rapid development. Many model checking problems can be reduced to two-player games on finite graphs. A prominent example is mu-calculus model checking, which is generally done by translating to parity games, but also many quantitative model-checking problems can be reduced to (quantitative) games.As part of a program to make game-based model checking available for software product lines, we introduce featured reachability games, featured minimum reachability games, featured discounted games, featured energy games, and featured parity games. We show that all these admit optimal featured strategies, which project to optimal strategies for any product, and how to compute winners and values of such games in a family-based manner.(c) 2022 Elsevier B.V. All rights reserved.
C1 [Fahrenberg, Uli] EPITA Res & Dev Lab LRDE, Le Kremlin Bicetre, France.
   [Legay, Axel] Catholic Univ Louvain, Louvain La Neuve, Belgium.
C3 Universite Catholique Louvain
RP Fahrenberg, U (corresponding author), EPITA Res & Dev Lab LRDE, Le Kremlin Bicetre, France.
EM uli@lrde.epita.fr
CR [Anonymous], 2012, TASE
   Apel S, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P482, DOI 10.1109/ICSE.2013.6606594
   Atlee JM, 2015, FME WORKS FORM, P20, DOI 10.1109/FormaliSE.2015.11
   Behrmann G, 2007, LECT NOTES COMPUT SC, V4590, P121
   Beohar H, 2016, J LOG ALGEBR METHODS, V85, P1131, DOI 10.1016/j.jlamp.2016.09.007
   Bouyer P, 2022, LOG METH COMPUT SCI, V18, DOI [10.46298/LMCS-18(1:11)2022, 10.46298/LMCS-18(1]
   Brad~eld Julian, 2018, Handbook of Model Checking, P871, DOI DOI 10.1007/978-3-319-10575-8_26
   Brayton Robert K., 1984, KLUWER INT SERIES EN, V2
   Brihaye T, 2017, ACTA INFORM, V54, P85, DOI 10.1007/s00236-016-0276-z
   Brim L, 2011, FORM METHOD SYST DES, V38, P97, DOI 10.1007/s10703-010-0105-x
   Bunte Olav, 2019, Tools and Algorithms for the Construction and Analysis of Systems. 25th International Conference, TACAS 2019. Held as Part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2019. Proceedings: Lecture Notes in Computer Science (11428), P21, DOI 10.1007/978-3-030-17465-1_2
   Chrszon P, 2018, FORM ASP COMPUT, V30, P45, DOI 10.1007/s00165-017-0432-4
   Classen Andreas, 2012, International Journal on Software Tools for Technology Transfer, V14, P589, DOI 10.1007/s10009-012-0234-1
   Classen A., 2010, ICSE 10, V1, P335, DOI DOI 10.1145/1806799.1806850
   Classen A, 2014, SCI COMPUT PROGRAM, V80, P416, DOI 10.1016/j.scico.2013.09.019
   Classen A, 2013, IEEE T SOFTWARE ENG, V39, P1069, DOI 10.1109/TSE.2012.86
   Classen A, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P321, DOI 10.1145/1985793.1985838
   Cordy Maxime, 2019, From Software Engineering to Formal Methods and Tools, and Back: Essays Dedicated to Stefania Gnesi on the Occasion of Her 65th Birthday. Lecture Notes in Computer Science (LNCS 11865), P285, DOI 10.1007/978-3-030-30985-5_18
   Cordy M, 2014, 22ND ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (FSE 2014), P190, DOI 10.1145/2635868.2635919
   Cordy M, 2013, PROCEEDINGS OF THE 17TH INTERNATIONAL SOFTWARE PRODUCT LINE CONFERENCE CO-LOCATED WORKSHOPS (SPLC'13 WORKSHOPS), P141
   Cordy M, 2012, PROC INT CONF SOFTW, P672, DOI 10.1109/ICSE.2012.6227150
   Cordy Maxime, 2012, BEHAV MODELLING VERI, P66
   Dimovski AS, 2019, LECT NOTES COMPUT SC, V11424, P192, DOI 10.1007/978-3-030-16722-6_11
   Dimovski AS, 2017, LECT NOTES COMPUT SC, V10202, P406, DOI 10.1007/978-3-662-54494-5_24
   Fahrenberg U, 2020, THEOR COMPUT SCI, V847, P134, DOI 10.1016/j.tcs.2020.10.001
   Fahrenberg U, 2019, LECT NOTES COMPUT SC, V11884, P59, DOI 10.1007/978-3-030-32505-3_4
   Fahrenberg U, 2019, INT J SOFTW TOOLS TE, V21, P667, DOI 10.1007/s10009-019-00538-y
   Fahrenberg U, 2017, FME WORKS FORM, P51, DOI 10.1109/FormaliSE.2017.2
   Fahrenberg U, 2011, LEIBNIZ INT PR INFOR, V13, P103, DOI 10.4230/LIPIcs.FSTTCS.2011.103
   Fahrenberg U, 2014, THEOR COMPUT SCI, V538, P54, DOI 10.1016/j.tcs.2013.07.030
   Fahrenberg Uli, 2021, TASE, P167
   Gimbert H, 2005, LECT NOTES COMPUT SC, V3653, P428, DOI 10.1007/11539452_33
   Gimbert H, 2004, LECT NOTES COMPUT SC, V3153, P686
   Gimbert Hugo, 2008, LOGIC AUTOMATA, P331
   Jurdzinski M, 2000, LECT NOTES COMPUT SC, V1770, P290
   Kumar R., 2012, Modeling and Control of Logical Discrete Event Systems
   Lochau M, 2016, J LOG ALGEBR METHODS, V85, P245, DOI 10.1016/j.jlamp.2015.09.004
   Olaechea Rafael, 2016, SPLC, P109
   PETERS HJM, 1987, CWI TRACT, V39
   RAMADGE PJG, 1989, P IEEE, V77, P81, DOI 10.1109/5.21072
   Rodrigues GN, 2015, IEEE HI ASS SYS ENGR, P173, DOI 10.1109/HASE.2015.34
   ter Beek M. H., 2014, SPLC 14, V2, P70, DOI DOI 10.1145/2647908.2655969
   ter Beek M.H., 2015, P 19 INT C SOFTWARE, P11, DOI DOI 10.1145/2791060.2791087
   ter Beek MH, 2020, LECT NOTES COMPUT SC, V12076, P245, DOI 10.1007/978-3-030-45234-6_12
   ter Beek MH, 2020, IEEE T SOFTWARE ENG, V46, P321, DOI 10.1109/TSE.2018.2853726
   ter Beek MH, 2017, LECT NOTES COMPUT SC, V10202, P387, DOI 10.1007/978-3-662-54494-5_23
   Zielonka W, 1998, THEOR COMPUT SCI, V200, P135, DOI 10.1016/S0304-3975(98)00009-7
   Zwick U, 1996, THEOR COMPUT SCI, V158, P343, DOI 10.1016/0304-3975(95)00188-3
NR 48
TC 1
Z9 1
U1 1
U2 4
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 1
PY 2022
VL 223
AR 102874
DI 10.1016/j.scico.2022.102874
EA SEP 2022
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 5K5JW
UT WOS:000869763500001
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Liu, C
   Macedo, N
   Cunha, A
AF Liu, Chong
   Macedo, Nuno
   Cunha, Alcino
TI Merging cloned Alloy models with colorful refactorings
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 23rd Brazilian Symposium on Formal Methods (SBMF)
CY NOV 25-27, 2020
CL ELECTR NETWORK
DE Feature-oriented design; Refactoring; Alloy; Model merging;
   Clone-and-own
AB Likewise to code, clone-and-own is a common way to create variants of a model, to explore the impact of different features while exploring the design of a software system. Previously, we have introduced Colorful Alloy, an extension of the popular Alloy language and toolkit to support feature-oriented design, where model elements can be annotated with feature expressions and further highlighted with different colors to ease understanding. In this paper we propose a catalog of refactoring laws for Colorful Alloy models, and show how they can be used to iteratively merge cloned Alloy models into a single featureannotated colorful model, where the commonalities and differences between the different clones are easily perceived, and more efficient aggregated analyses can be performed. We then show how these refactorings can be composed in an automated merging strategy that can be used to migrate Alloy clones into a Colorful Alloy SPL in a single step. The paper extends a conference version [1] by formalizing the semantics and type system of the improved Colorful Alloy language, allowing the simplification of some rules and the evaluation of their soundness. Additional rules were added to the catalog, and the evaluation extended. The automated merging strategy is also novel.(c) 2022 Elsevier B.V. All rights reserved.
C1 [Liu, Chong; Macedo, Nuno; Cunha, Alcino] INESC TEC, Porto, Portugal.
   [Macedo, Nuno] Univ Porto, Fac Engn, Porto, Portugal.
   [Liu, Chong; Cunha, Alcino] Univ Minho, Braga, Portugal.
C3 INESC TEC; Universidade do Porto; Universidade do Minho
RP Macedo, N (corresponding author), Univ Porto, Fac Engn, Porto, Portugal.
EM nmacedo@fe.up.pt
RI Macedo, Nuno/A-1539-2013; Cunha, Alcino/I-4104-2015; Liu,
   Chong/A-6855-2016
OI Macedo, Nuno/0000-0002-4817-948X; Cunha, Alcino/0000-0002-2714-8027;
   Liu, Chong/0000-0003-1883-0996
FU ERDF - European Regional Development Fund through the Operational
   Programme for Competitiveness and Internationalisation - COMPETE 2020
   Programme through the Operational Programme for Com-petitiveness and
   Internationalisation - COMPETE 2020 Programme; National Funds through
   the Portuguese funding agency; FCT - Fundacao para a Ciencia e a
   Tecnologia [PTDC/CCI-INF/29583/2017, POCI-01-0145-FEDER-029583];
   Fundação para a Ciência e a Tecnologia [PTDC/CCI-INF/29583/2017] Funding
   Source: FCT
FX This work is financed by the ERDF - European Regional Development Fund
   through the Operational Programme for Competitiveness and
   Internationalisation - COMPETE 2020 Programme and by National Funds
   through the Portuguese funding agency, FCT - Fundacao para a Ciencia e a
   Tecnologia within project PTDC/CCI-INF/29583/2017 -
   POCI-01-0145-FEDER-029583.
CR Abrial Jean-Raymond, 2010, International Journal on Software Tools for Technology Transfer, V12, P447, DOI 10.1007/s10009-010-0145-y
   Alves V., 2006, Proceedings of the 5th international conference on Generative Programming and Component Engineering, P201, DOI [10.1145/1173706, DOI 10.1145/1173706]
   [Anonymous], 2016, Feature-Oriented Software Product Lines
   Apel S., 2011, 2011 26th IEEE/ACM International Conference on Automated Software Engineering, P372, DOI 10.1109/ASE.2011.6100075
   Apel Sven, 2010, Proceedings of the 2010 IEEE 21st International Symposium on Software Reliability Engineering (ISSRE 2010), P161, DOI 10.1109/ISSRE.2010.11
   Assunçao WKG, 2017, EMPIR SOFTW ENG, V22, P2972, DOI 10.1007/s10664-017-9499-z
   Borba P, 2004, SCI COMPUT PROGRAM, V52, P53, DOI 10.1016/j.scico.2004.03.003
   Borba P, 2012, THEOR COMPUT SCI, V455, P2, DOI 10.1016/j.tcs.2012.01.031
   Boubakir M, 2016, LECT NOTE NETW SYST, P327, DOI 10.1007/978-3-319-33410-3_23
   Chong Liu, 2020, Formal Methods: Foundations and Applications. 23rd Brazilian Symposium, SBMF 2020. Proceedings. Lecture Notes in Computer Science (LNCS 12475), P173, DOI 10.1007/978-3-030-63882-5_11
   Chong Liu, 2019, Dependable Software Engineering. Theories, Tools, and Applications. 5th International Symposium, SETTA 2019. Proceedings. Lecture Notes in Computer Science (LNCS 11951), P38, DOI 10.1007/978-3-030-35540-1_3
   Classen Andreas, 2012, International Journal on Software Tools for Technology Transfer, V14, P589, DOI 10.1007/s10009-012-0234-1
   Czarnecki K., 2006, GPCE, P211
   Erwig M, 2011, ACM T SOFTW ENG METH, V21, DOI 10.1145/2063239.2063245
   Fenske W, 2017, 2017 IEEE 24TH INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER), P316, DOI 10.1109/SANER.2017.7884632
   Fowler Martin, 1999, REFACTORING
   Gheyi R., 2004, ELECT NOTES THEORET, V95, P227, DOI DOI 10.1016/J.ENTCS.2004.04.014
   Gheyi R., 2007, THESIS U FEDERAL PER
   Gheyi R, 2011, J UNIVERS COMPUT SCI, V17, P684
   Gheyi Rohit., 2006, 1st Alloy workshop, P71
   Jackson D, 2012, SOFTWARE ABSTRACTIONS: LOGIC, LANGUAGE, AND ANALYSIS, P1
   Kästner C, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P311, DOI 10.1145/1368088.1368131
   Klatt B, 2014, PROC IEEE INT CONF S, P496, DOI 10.1109/ICSME.2014.81
   Koschke R, 2009, SOFTWARE QUAL J, V17, P331, DOI 10.1007/s11219-009-9077-8
   Krueger CW, 2002, LECT NOTES COMPUT SC, V2290, P282
   KUHLEMANN M, 2009, ICSR, V5791, P106
   Liebig J, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 1, P380, DOI 10.1109/ICSE.2015.57
   Lima C, 2018, SPLC'18: PROCEEDINGS OF THE 22ND INTERNATIONAL SYSTEMS AND SOFTWARE PRODUCT LINE CONFERENCE, VOL 1, P289, DOI 10.1145/3233027.3236398
   Linsbauer L, 2017, SOFTW SYST MODEL, V16, P1179, DOI 10.1007/s10270-015-0512-y
   Markovic S, 2008, SOFTW SYST MODEL, V7, P25, DOI 10.1007/s10270-007-0056-x
   Martinez J., 2012, P INT SOFTW PROD LIN, P196, DOI DOI 10.1145/2364412.2364445
   McComb T, 2008, LECT NOTES COMPUT SC, V5051, P170, DOI 10.1007/978-3-540-68863-1_11
   Nipkow T., 2002, ISABELLE HOL PROOF A, DOI DOI 10.1007/3-540-45949-9
   Opdyke W. F., 1992, Refactoring object-oriented frameworks
   Plath M, 2001, SCI COMPUT PROGRAM, V41, P53, DOI 10.1016/S0167-6423(00)00018-6
   Post Hendrik, 2008, 2008 23rd IEEE/ACM International Conference on Automated Software Engineering, P347, DOI 10.1109/ASE.2008.45
   Rubin J, 2012, LECT NOTES COMPUT SC, V7212, P285, DOI 10.1007/978-3-642-28872-2_20
   Rubin Julia., 2013, P 2013 9 JOINT M FDN, P301, DOI DOI 10.1145/2491411.2491446
   Schlie A., 2020, VAMOS
   Schulze S., 2012, VAMOS, P73
   Schulze S., 2013, P 12 ASPECT ORIENTED, P73
   Shahir Hamed Yaghoubi, 2012, Abstract State Machines, Alloy, B, VDM, and Z. Proceedings Third International Conference, ABZ 2012, P345, DOI 10.1007/978-3-642-30885-7_28
   Stepney S., 2002, ELECTRON NOTES THEOR, V70, P50
   Tanhaei M, 2016, INFORM SOFTWARE TECH, V80, P138, DOI 10.1016/j.infsof.2016.08.011
   Valente MT, 2012, IEEE T SOFTWARE ENG, V38, P737, DOI 10.1109/TSE.2011.57
NR 45
TC 0
Z9 0
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD AUG 1
PY 2022
VL 220
AR 102829
DI 10.1016/j.scico.2022.102829
EA JUN 2022
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 2A8XZ
UT WOS:000809779900002
OA Green Submitted, hybrid
DA 2024-07-18
ER

PT J
AU Kristiansen, L
AF Kristiansen, Lars
TI Reversible computing and implicit computational complexity
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Reversible computing; Invertible programming languages; Implicit
   computational complexity; Complexity classes; Turing machines
ID LOGSPACE
AB We argue that there is a link between implicit computational complexity theory and reversible computation. We introduce inherently reversible programming languages which capture the complexity classes ETImE and p. Furthermore, we discuss and analyze higher order versions of our reversible programming languages. (c) 2021 The Author(s). Published by Elsevier B.V. This is an open access article under the CC BY license (http://creativecommons.org/licenses/by/4.0/).
C1 [Kristiansen, Lars] Univ Oslo, Dept Informat, Oslo, Norway.
   [Kristiansen, Lars] Univ Oslo, Dept Math, Oslo, Norway.
C3 University of Oslo; University of Oslo
RP Kristiansen, L (corresponding author), Univ Oslo, Dept Informat, Oslo, Norway.; Kristiansen, L (corresponding author), Univ Oslo, Dept Math, Oslo, Norway.
EM larsk@math.uio.no
CR [Anonymous], 1999, Classical Recursion Theory
   [Anonymous], 1984, SUBRECURSION FUNCTIO
   [Anonymous], 1992, Computational Complexity, DOI [10.1007/bf01201998., DOI 10.1007/BF01201998]
   Arora S, 2009, COMPUTATIONAL COMPLEXITY: A MODERN APPROACH, P1, DOI 10.1017/CBO9780511804090
   Axelsen HB, 2011, LECT NOTES COMPUT SC, V6604, P42, DOI 10.1007/978-3-642-19805-2_4
   Dal Lago Ugo, 2011, LECT NOTES COMPUTER, P89, DOI [10.1007/978-3-642-31485-8_3, DOI 10.1007/978-3-642-31485-8_3]
   Jones ND, 1999, THEOR COMPUT SCI, V228, P151, DOI 10.1016/S0304-3975(98)00357-0
   Jones ND, 2001, J FUNCT PROGRAM, V11, P55, DOI 10.1017/S0956796800003889
   Jones NeilD., 1997, COMPUTABILITY COMPLE
   Kop C, 2017, LOG METH COMPUT SCI, V13, DOI 10.23638/LMCS-13(3:8)2017
   Kristiansen L., 2005, Nordic Journal of Computing, V12, P89
   Kristiansen L, 2005, COMPUT COMPLEX, V14, P72, DOI 10.1007/s00037-005-0191-0
   Kristiansen L, 2004, THEOR COMPUT SCI, V318, P139, DOI 10.1016/j.tcs.2003.10.016
   Kristiansen L, 2003, INFORM PROCESS LETT, V88, P213, DOI 10.1016/j.ipl.2003.08.010
   Kristiansen L, 2020, LECT NOTES COMPUT SC, V12227, P111, DOI 10.1007/978-3-030-52482-1_6
   Kristiansen L, 2012, J LOGIC COMPUT, V22, P281, DOI 10.1093/logcom/exq009
   Leivant D., 1993, Conference Record of the Twentieth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P325, DOI 10.1145/158511.158659
   Leivant D., 1991, P 6 ANN IEEE S LOG C, P39
   Matos AB, 2003, THEOR COMPUT SCI, V290, P2063, DOI 10.1016/S0304-3975(02)00486-3
   Matos AB, 2020, LECT NOTES COMPUT SC, V12227, P128, DOI 10.1007/978-3-030-52482-1_7
   Meyer A., 1967, P 22 NATL ACM C, P465, DOI DOI 10.1145/800196.806014
   Paolini L, 2020, THEOR COMPUT SCI, V813, P218, DOI 10.1016/j.tcs.2019.11.029
   Paolini L, 2018, NEW GENERAT COMPUT, V36, P233, DOI 10.1007/s00354-018-0039-1
   Pechoux R., 2020, IMPLICIT COMPUTATION
   Sipser M., 2013, Introduction to the theory of computation, V3
   Yokoyama T, 2016, THEOR COMPUT SCI, V611, P87, DOI 10.1016/j.tcs.2015.07.046
NR 26
TC 2
Z9 2
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 1
PY 2022
VL 213
AR 102723
DI 10.1016/j.scico.2021.102723
EA SEP 2021
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA WK4MQ
UT WOS:000709701700003
OA Green Published, hybrid
DA 2024-07-18
ER

PT J
AU Terven, JR
   Córdova-Esparza, DM
AF Terven, Juan R.
   Cordova-Esparza, Diana M.
TI KinZ an Azure Kinect toolkit for Python and Matlab
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Azure Kinect; Python; Matlab
ID RECOGNITION
AB This paper introduces KinZ, an Azure Kinect toolkit for Python and Matlab. This toolkit encapsulates the Azure Kinect's main functionality in an easy-to-use class with high-level methods. This software is written mostly in C/C++ with a pybind interface for Python and Mex functions for Matlab. It provides access to color, depth, infrared cameras, a mapping between cameras, colored point clouds, IMU sensor data, body tracking with 32 body joints plus 32 hand keypoints. We showed that KinZ applications could run in real-time at 1080p resolution, with the benefit of a high-level language reducing the learning curve and allowing a significant decrease in development time for prototyping and research. (C) 2021 The Author(s). Published by Elsevier B.V.
C1 [Terven, Juan R.] AiFi Inc, 2388 Walsh Av, Santa Clara, CA 95051 USA.
   [Cordova-Esparza, Diana M.] Univ Autonoma Queretaro, Fac Informat, Av Ciencias S-N,Campus Juriquilla, Queretaro 76230, Mexico.
C3 Universidad Autonoma de Queretaro
RP Terven, JR (corresponding author), AiFi Inc, 2388 Walsh Av, Santa Clara, CA 95051 USA.
EM jrterven@gmail.com; diana_mce@hotmail.com
RI Cordova, Diana/GQZ-7591-2022; Terven, Juan Ramon/IAN-0006-2023
OI Cordova, Diana/0000-0002-5657-7752; 
CR Adikari SB, 2020, ADV HUM-COMPUT INTER, V2020, DOI 10.1155/2020/1314598
   Apriaskar E, 2020, J PHYS CONF SER, V1444, DOI 10.1088/1742-6596/1444/1/012030
   ARUN KS, 1987, IEEE T PATTERN ANAL, V9, P699, DOI 10.1109/TPAMI.1987.4767965
   Blake H., 2020, ALL MONEY WORLD COUL
   Capece N, 2018, LECT NOTES COMPUT SC, V10851, P623, DOI 10.1007/978-3-319-95282-6_44
   Chuyu Wang, 2018, Proceedings of the ACM on Interactive, Mobile, Wearable and Ubiquitous Technologies, V2, DOI [10.1145/3191773, 10.1145/3214288]
   Clark RA, 2019, GAIT POSTURE, V68, P193, DOI 10.1016/j.gaitpost.2018.11.029
   Dajime PF, 2020, COMPUT BIOL MED, V125, DOI 10.1016/j.compbiomed.2020.104021
   Duque DA, 2019, ROBOT CIM-INT MANUF, V57, P292, DOI 10.1016/j.rcim.2018.12.007
   Heng Zhang, 2020, ICIAI 2020: Proceedings of the 2020 the 4th International Conference on Innovation in Artificial Intelligence, P42, DOI 10.1145/3390557.3394301
   Kim W.S., 2018, Medicine, V97
   Kingma D. P., 2014, arXiv
   Li JW, 2016, CHIN CONTR CONF, P6324, DOI 10.1109/ChiCC.2016.7554350
   Lv Q, 2017, CHIN CONT DECIS CONF, P3319, DOI 10.1109/CCDC.2017.7979079
   Naeemabadi M, 2019, IEEE SENS J, V19, P171, DOI 10.1109/JSEN.2018.2876624
   Nehra Shalini, 2020, Indo - Taiwan 2nd International Conference on Computing, Analytics and Networks (Indo-Taiwan ICAN 2020). Proceedings, P58, DOI 10.1109/Indo-TaiwanICAN48429.2020.9181359
   Niu JW, 2020, SENSORS-BASEL, V20, DOI 10.3390/s20041119
   Russel K., 2013, PEOPLE ARE WORRIED M
   Saini R, 2018, NEUROCOMPUTING, V311, P99, DOI 10.1016/j.neucom.2018.05.042
   Silverstein E, 2018, J APPL CLIN MED PHYS, V19, P193, DOI 10.1002/acm2.12318
   Su YX, 2020, IEEE T INSTRUM MEAS, V69, P6436, DOI 10.1109/TIM.2020.2968756
   Sun K, 2019, PROC CVPR IEEE, P5686, DOI 10.1109/CVPR.2019.00584
   Terven JR, 2016, SCI COMPUT PROGRAM, V130, P97, DOI 10.1016/j.scico.2016.05.009
   Tsai CY, 2018, IEEE ACCESS, V6, P28859, DOI 10.1109/ACCESS.2018.2808225
   Vitali A, 2018, VIRTUAL PHYS PROTOTY, V13, P131, DOI 10.1080/17452759.2018.1474082
   Yang S, 2020, SMART ASSISTED LIVIN, P23
NR 26
TC 4
Z9 4
U1 4
U2 18
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 1
PY 2021
VL 211
AR 102702
DI 10.1016/j.scico.2021.102702
EA JUL 2021
PG 16
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA TY1NH
UT WOS:000683550800002
OA hybrid
DA 2024-07-18
ER

PT J
AU L'Yvonnet, T
   De Maria, E
   Moisan, S
   Rigault, JP
AF L'Yvonnet, Thibaud
   De Maria, Elisabetta
   Moisan, Sabine
   Rigault, Jean-Paul
TI Probabilistic model checking for human activity recognition in medical
   serious games
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Activity description; Probabilistic model; Model checking; Serious
   games; Bio-medicine
AB Human activity recognition plays an important role especially in medical applications. This paper proposes a formal approach to model such activities, taking into account possible variations in human behavior. Starting from an activity description enriched with event occurrence probabilities, we translate it into a corresponding formal model based on discrete-time Markov chains (DTMCs). We use the PRISM framework and its model checking facilities to express and check interesting temporal logic properties concerning the dynamic evolution of activities. We illustrate our approach with the models of several serious games used by clinicians to monitor Alzheimer patients. We expect that such a modeling approach could provide new indications for interpreting patient performances. This paper addresses the definition of patient's models for three serious games and the suitability of this approach to check behavioral properties of medical interest. Indeed, this is a mandatory first step before clinical studies with patients playing these games. Our goal is to provide a new tool for doctors to evaluate patients. (C) 2021 Elsevier B.V. All rights reserved.
C1 [L'Yvonnet, Thibaud; Moisan, Sabine; Rigault, Jean-Paul] Univ Cote dAzur, INRIA, Sophia Antipolis, France.
   [De Maria, Elisabetta] Univ Cote dAzur, I3S, CNRS, Sophia Antipolis, France.
C3 Inria; Universite Cote d'Azur; Universite Cote d'Azur; Centre National
   de la Recherche Scientifique (CNRS)
RP L'Yvonnet, T (corresponding author), Univ Cote dAzur, INRIA, Sophia Antipolis, France.
EM thibaud.lyvonnet@inria.fr; edemaria@i3s.unice.fr;
   sabine.moisan@inria.fr; jean-paul.rigault@inria.fr
FU French Provence-Alpes-Cote d'Azur region [13678]
FX This work is part of the PhD. of Thibaud L'Yvonnet. We thank the French
   Provence-Alpes-Cote d'Azur region for the financial support (grant n.
   13678). We also thank our medical partners from the CoBTeK (Cognition
   Behavior Technology) laboratory of Universite Cote d'Azur for our
   fruitful interactions all along the different stages of this work.
CR Ahouandjinou A. S. R. M., 2015, Pattern Recognition and Image Analysis, V25, P389, DOI 10.1134/S1054661815030025
   Alur R, 1999, FORM METHOD SYST DES, V15, P7, DOI 10.1023/A:1008739929481
   [Anonymous], 2012, HDB SOFT COMPUTING V
   [Anonymous], 2014, FORM VER MOD HUM MAC
   Antoni ST, 2016, INT J COMPUT ASS RAD, V11, P2085, DOI 10.1007/s11548-016-1423-2
   Atkinson S. D., 2010, 2nd International Conference on Trendz in Information Sciences & Computing (TISC 2010), P94, DOI 10.1109/TISC.2010.5714615
   Ayub MS, 2017, LECT NOTES COMPUT SC, V10466, P1, DOI 10.1007/978-3-319-66176-6_1
   Behrmann G, 2004, LECT NOTES COMPUT SC, V3185, P200
   Bolton ML, 2012, INT J HUM-COMPUT ST, V70, P888, DOI 10.1016/j.ijhcs.2012.05.010
   Bonfanti S, 2018, J SOFTW-EVOL PROC, V30, DOI 10.1002/smr.1943
   Buttussi F, 2013, INT J MED INFORM, V82, P798, DOI 10.1016/j.ijmedinf.2013.05.007
   Chamasemani Fereshteh Falah, 2013, International Journal of Information Technology and Computer Science, V5, P87, DOI 10.5815/ijitcs.2013.07.11
   Chittaro Luca, 2012, Persuasive Technology. Design for Health and Safety. Proceedings 7th International Conference, PERSUASIVE 2012, P43, DOI 10.1007/978-3-642-31037-9_4
   De Maria E., 2020, COMMUN COMPUT PHYS, V1165, P106, DOI [10.1007/978-3-030-46902-3_7, DOI 10.1007/978-3-030-46902-3_7]
   Dehnert C, 2017, LECT NOTES COMPUT SC, V10427, P592, DOI 10.1007/978-3-319-63390-9_31
   Dehnert C, 2015, LECT NOTES COMPUT SC, V9206, P214, DOI 10.1007/978-3-319-21690-4_13
   Du XZ, 2017, IEEE WINT CONF APPL, P953, DOI 10.1109/WACV.2017.111
   Eckner JT, 2012, PSYCHOL ASSESSMENT, V24, P249, DOI 10.1037/a0025042
   Fleming TM, 2017, FRONT PSYCHIATRY, V7, DOI 10.3389/fpsyt.2016.00215
   Groot P, 2009, ARTIF INTELL MED, V46, P19, DOI 10.1016/j.artmed.2008.07.007
   Hahn EM, 2019, LECT NOTES COMPUT SC, V11429, P69, DOI 10.1007/978-3-030-17502-3_5
   Hansen N, 2006, STUD FUZZ SOFT COMP, V192, P75
   Hansson H., 1994, Formal Aspects of Computing, V6, P512, DOI 10.1007/BF01211866
   Hassan M, 2012, IEEE INT CONF NETWOR, P64, DOI 10.1109/ICON.2012.6506535
   Huntley JD, 2017, INT J GERIATR PSYCH, V32, P860, DOI 10.1002/gps.4537
   Jalal A, 2017, INT J INTERACT MULTI, V4, P54, DOI 10.9781/ijimai.2017.447
   Kim E, 2010, IEEE PERVAS COMPUT, V9, P48, DOI 10.1109/MPRV.2010.7
   König A, 2015, J ALZHEIMERS DIS, V44, P675, DOI 10.3233/JAD-141767
   Kwiatkowska Marta, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P585, DOI 10.1007/978-3-642-22110-1_47
   Kwiatkowska M, 2007, LECT NOTES COMPUT SC, V4486, P220
   Magherini T, 2013, IEEE T HUM-MACH SYST, V43, P509, DOI 10.1109/TSMC.2013.2283661
   Mashkoor A, 2018, 2018 IEEE INTERNATIONAL CONFERENCE ON SOFTWARE QUALITY, RELIABILITY AND SECURITY (QRS 2018), P75, DOI 10.1109/QRS.2018.00021
   Nyolt Martin, 2015, 7th International Conference on Agents and Artificial Intelligence (ICAART 2015). Proceedings, P497
   Peled D.A., 1999, MODEL CHECKING, P314
   Robert P, 2020, J MED INTERNET RES, V22, DOI 10.2196/17167
   Sun J, 2009, LECT NOTES COMPUT SC, V5643, P709, DOI 10.1007/978-3-642-02658-4_59
   Tran M.K. Phan, 2015, 4 INT C GAM LEARN AL, P286
   Ujjwal U., 2018, 15 INT C ADV VID SIG, P1
   Votruba KL, 2016, J GERIATR PSYCH NEUR, V29, P126, DOI 10.1177/0891988716629858
   Vrigkas M, 2015, FRONT ROBOT AI, DOI 10.3389/frobt.2015.00028
   Weerachai S, 2010, INTERNATIONAL CONFERENCE ON CONTROL, AUTOMATION AND SYSTEMS (ICCAS 2010), P1687
   Zhang HB, 2019, SENSORS-BASEL, V19, DOI 10.3390/s19051005
NR 42
TC 3
Z9 3
U1 0
U2 5
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 1
PY 2021
VL 206
AR 102629
DI 10.1016/j.scico.2021.102629
EA MAR 2021
PG 32
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA RI2XD
UT WOS:000636771400003
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Changizi, B
   Kokash, N
   Arbab, F
   Makhnist, L
AF Changizi, Behnaz
   Kokash, Natallia
   Arbab, Farhad
   Makhnist, Leonid
TI Compositional workflow modeling with priority constraints
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 8th International Conference on the Fundamentals of Software Engineering
   (FSEN)
CY MAY 01-03, 2019
CL Tehran, IRAN
DE Workflow modeling; Formal semantics; Priority; Constraints; Coordination
ID BUSINESS PROCESS MANAGEMENT; CHANNEL-BASED COORDINATION; CONNECTOR
   COLORING I; REO; SYNCHRONIZATION; FRAMEWORK; SEMANTICS
AB Priority is an important concept in Business Process Management (BPM), useful in the context of workflow patterns such as, e.g., cancelable and compensable tasks within business transactions. Unfortunately, the presence of priority in workflows makes them difficult to be analyzed formally by automated validation and verification tools. In the past, we demonstrated that the Reo coordination language can be successfully used for modeling, automatic validation and model checking of process models. In this paper, we propose a constraint-based approach to formalize priority in Reo. We introduce special channels to initiate, propagate, and block priority flows, define their semantics as constraints, and model priority propagation as a Constraint Satisfaction Problem (CSP). The semantic extension we propose in this paper enables workflow analysis in presence of priority constraints. (C) 2020 Published by Elsevier B.V.
C1 [Changizi, Behnaz] Leiden Inst Adv Comp Sci, Niels Bohrweg 1, Leiden, Netherlands.
   [Kokash, Natallia] RUDN Univ, Peoples Friendship Univ Russia, 6 Miklukho Maklaya St, Moscow 117198, Russia.
   [Arbab, Farhad] Ctr Wiskunde & Informat, Sci Pk 123, Amsterdam, Netherlands.
   [Makhnist, Leonid] Brest State Tech Univ, Dept Higher Math, Moskovskaya 267, Brest 224017, BELARUS.
C3 Leiden University; Peoples Friendship University of Russia; Brest State
   Technical University
RP Changizi, B (corresponding author), Leiden Inst Adv Comp Sci, Niels Bohrweg 1, Leiden, Netherlands.
EM behnaz.changizi@gmail.com; kokosh-nv@rudn.ru; farhad.arbab@cwi.nl;
   hm@bstu.bu
RI Makhnist, Leonid/GPC-7971-2022; Kokash, Natallia/S-6307-2019
OI Makhnist, Leonid/0000-0001-9676-5726; Kokash,
   Natallia/0000-0003-3639-1245
FU RUDN University Program 5-100; RFBR [12-34-56789]
FX The publication has been prepared with the support of the "RUDN
   University Program 5-100" and funded by RFBR according to the research
   projects No. 12-34-56789 and No. 12-34-56789 (recipient: Natallia
   Kokash, formal semantics).
CR [Anonymous], 2008, EXTENSIBLE COORDINAT
   [Anonymous], 2013, Business process management, DOI DOI 10.1007/978-3-642-33143-5
   [Anonymous], 2008, REDUCE PORTABLE GEN
   [Anonymous], 2001, LECT NOTES COMPUTER
   [Anonymous], 2006, Business Process Execution Language for Web Services BPEL and BPEL4WS
   [Anonymous], 2020, CONSTREOFY TOOL GENE
   Arbab F, 2004, MATH STRUCT COMP SCI, V14, P329, DOI 10.1017/S0960129504004153
   Arbab F, 2011, LECT NOTES COMPUT SC, V7000, P169, DOI 10.1007/978-3-642-24933-4_9
   Arbab F, 2008, COMM COM INF SC, V17, P108
   Baier C, 2006, SCI COMPUT PROGRAM, V61, P75, DOI 10.1016/j.scico.2005.10.008
   Barták R, 2010, KNOWL ENG REV, V25, P249, DOI 10.1017/S0269888910000202
   Bause F, 1997, LECT NOTES COMPUT SC, V1248, P215
   BEST E, 1992, THEOR COMPUT SCI, V96, P175, DOI 10.1016/0304-3975(92)90184-H
   Bonsangue M, 2012, SCI COMPUT PROGRAM, V77, P685, DOI 10.1016/j.scico.2011.01.006
   Bravetti M, 2004, LECT NOTES COMPUT SC, V2949, P55
   Bruni R, 2005, ACM SIGPLAN NOTICES, V40, P209, DOI 10.1145/1047659.1040323
   Busi N, 2005, LECT NOTES COMPUT SC, V3454, P204
   Butler M, 2005, LECT NOTES COMPUT SC, V3525, P133
   Changizi B., 2019, LNCS, V11761, P194
   Changizi B., 2012, P INT C SOFTW ENG AD, P530
   Changizi B., 2010, P INT WORKSH FORM EN, P147
   Clarke D, 2007, SCI COMPUT PROGRAM, V66, P205, DOI 10.1016/j.scico.2007.01.009
   Clarke D, 2006, ELECTRON NOTES THEOR, V154, P101, DOI 10.1016/j.entcs.2005.12.035
   Clarke D, 2011, SCI COMPUT PROGRAM, V76, P681, DOI 10.1016/j.scico.2010.05.004
   CLEAVELAND R, 1990, INFORM COMPUT, V87, P58, DOI 10.1016/0890-5401(90)90059-Q
   Cleaveland R, 2007, INFORM COMPUT, V205, P1426, DOI 10.1016/j.ic.2007.05.001
   Delzanno G, 2005, LECT NOTES COMPUT SC, V3580, P1239
   Dijkman R., 2011, Business Process Model and Notation
   Gabbrielli M, 2013, INFORM COMPUT, V228, P62, DOI 10.1016/j.ic.2013.05.001
   Glorian G., 2019, P 2018 XCSP3 COMP, P85
   Groefsema H., 2013, 3 INT S BUS MOD SOFT, V1, P198
   Havey Michael., 2005, ESSENTIAL BUSINESS P
   Jongmans Sung-Shik T. Q., 2012, Service-Oriented and Cloud Computing. First European Conference, ESOCC 2012. Proceedings, P1, DOI 10.1007/978-3-642-33427-6_1
   Jongmans SSTQ, 2012, SCI ANN COMPUT SCI, V22, P201, DOI 10.7561/SACS.2012.1.201
   Kappé T, 2016, ELECTRON P THEOR COM, P21, DOI 10.4204/EPTCS.232.6
   Klaudel H, 2000, LECT NOTES COMPUT SC, V1945, P318
   Kokash N, 2013, IEEE T SERV COMPUT, V6, P186, DOI 10.1109/TSC.2011.46
   Kokash N, 2012, FORM ASP COMPUT, V24, P187, DOI 10.1007/s00165-011-0191-6
   Kokash N, 2010, LECT NOTES COMPUT SC, V6447, P106, DOI 10.1007/978-3-642-16901-4_9
   Kopp O, 2009, ENTERP MODELLING INF, V4, P3
   Lomazova IA, 2016, FUND INFORM, V143, P101, DOI 10.3233/FI-2016-1306
   Lu RP, 2007, LECT NOTES COMPUT SC, V4439, P82
   Meng S, 2007, APPLIED COMPUTING 2007, VOL 1 AND 2, P346, DOI 10.1145/1244002.1244085
   Mongiello M, 2006, JOINT MEETING OF THE FOURTH WORKSHOP ON MODEL-BASED DEVELOPMENT OF COMPUTER-BASED SYSTEMS AND THIRD INTERNATIONAL WORKSHOP ON MODEL-BASED METHODOLOGIES FOR PERVASIVE AND EMBEDDED SOFTWARE, PROCEEDINGS, P144
   Mutarraf U, 2018, ADV MECH ENG, V10, DOI 10.1177/1687814018808170
   Padberg J, 2015, LECT NOTES COMPUT SC, V9151, P104, DOI 10.1007/978-3-319-21145-9_7
   Pourvatan B, 2012, SCI COMPUT PROGRAM, V77, P848, DOI 10.1016/j.scico.2011.04.001
   Pugliese R, 2009, LECT NOTES COMPUT SC, V5556, P558, DOI 10.1007/978-3-642-02930-1_46
   Reisig W., 2013, Understanding Petri Nets-Modeling Techniques, Analysis Methods, Case Studies
   Russell N, 2016, INF SYST S, P1
   Schumm D, 2010, LECT NOTES COMPUT SC, V6385s, P325, DOI 10.1007/978-3-642-16985-4_29
   Stursberg O, 2017, IEEE T AUTOM SCI ENG, V14, P785, DOI 10.1109/TASE.2017.2669893
   Tasharofi S, 2008, LECT NOTES COMPUT SC, V4937, P108
   Valero V, 2012, SCI COMPUT PROGRAM, V77, P290, DOI 10.1016/j.scico.2011.05.002
   van der Aalst W., 2008, BPM REPORTS
   van der Aalst W., 2002, PB560 DAIMI U AARH
   van der Aalst WMP, 2005, INFORM SYST, V30, P245, DOI 10.1016/j.is.2004.02.002
   van der Aalst WMP, 2004, LECT NOTES COMPUT SC, V3098, P1
   van der Aalst WMP, 2003, LECT NOTES COMPUT SC, V2678, P1
NR 59
TC 0
Z9 0
U1 0
U2 4
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR 1
PY 2021
VL 203
AR 102578
DI 10.1016/j.scico.2020.102578
PG 16
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA PQ7UT
UT WOS:000606750500003
OA Green Published
DA 2024-07-18
ER

PT J
AU Banach, R
AF Banach, Richard
TI Automated urban train control with hybrid Event-B: 'Tackling' the rugby
   club problem
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 6th International ABZ Conference on ASM, Alloy, B, TLA, VDM, Z (ABZ)
CY JUN 05-08, 2018
CL Southampton, ENGLAND
DE Automated train control; Formal system development; Hybrid Event-B;
   Newtonian mechanics
ID LANDING GEAR SYSTEM; MODEL; SPECIFICATION
AB Normally, the passengers on urban rail systems remain fairly stationary, allowing for a relatively straightforward approach to controlling the dynamics of the system, based on the total rest mass of the train and passengers. However, when a mischievous rugby club board an empty train and then run and jump-stop during the braking process, they can disrupt the automatic mechanisms for aligning train and platform doors. This is the Rugby Club Problem for automated urban train control. A simple scenario of this kind is modelled in Hybrid Event-B, and sufficient conditions are derived for the prevention of the overshoot caused by the jump-stop. The challenges of making the model more realistic are discussed, and a strategy for dealing with the Rugby Club Problem, when it cannot be prevented, is contemplated. (C) 2020 Elsevier B.V. All rights reserved.
C1 [Banach, Richard] Univ Manchester, Dept Comp Sci, Oxford Rd, Manchester M13 9PL, Lancs, England.
C3 University of Manchester
RP Banach, R (corresponding author), Univ Manchester, Dept Comp Sci, Oxford Rd, Manchester M13 9PL, Lancs, England.
EM richard.banach@manchester.ac.uk
OI Banach, Richard/0000-0002-0243-9434
CR Abrial Jean-Raymond, 2010, International Journal on Software Tools for Technology Transfer, V12, P447, DOI 10.1007/s10009-010-0145-y
   Abrial J.-R., 1996, B BOOK ASSIGNING PRO
   Abrial J R, 2010, Modeling in Event-B: system and softeng
   ALUR R, 1994, THEOR COMPUT SCI, V126, P183, DOI 10.1016/0304-3975(94)90010-8
   Alur R., 2015, PRINCIPLES CYBERPHYS
   [Anonymous], CORE HYBRID EVENT B
   [Anonymous], INT J SOFTW TOOLS TE
   [Anonymous], P IEEE TASE14
   [Anonymous], 1993, Hybrid Systems, DOI [DOI 10.1007/3-540-57318-6_30, DOI 10.1007/3-540, DOI 10.1007/3-540-57318-6, 10.1007/3-540-57318-6_30]
   [Anonymous], DISTRIBUTION THEORY
   [Anonymous], 2011, TRUSTW CYB STRAT PLA
   [Anonymous], 2002, LNCS
   [Anonymous], TUM19903
   [Anonymous], TOPOLOGICAL VECTOR S
   [Anonymous], 2018, HDB ORDINARY DIFFERE
   [Anonymous], 2016, From Action Systems to Distributed Systems-the Refinement Approach, DOI DOI 10.1201/B20053-5
   [Anonymous], 2017, LANGEVIN EQUATION
   [Anonymous], 2007, TOPOLOGICAL VECTOR S
   [Anonymous], 1996, HYBRID I O AUTOMATA
   [Anonymous], ANAL MECH
   [Anonymous], LNCS
   APT KR, 1981, ACM T PROGR LANG SYS, V3, P431, DOI 10.1145/357146.357150
   Asarin E., 2002, Computer Aided Verification. 14th International Conference, CAV 2002. Proceedings (Lecture Notes in Computer Science Vol.2404), P365
   Back R.-J., 1998, Refinement Calculus
   Back RJ, 2000, LECT NOTES COMPUT SC, V1926, P202
   Banach Richard, 2018, Abstract State Machines, Alloy, B, TLA, VDM, and Z. 6th International Conference, ABZ 2018. Proceedings: LNCS 10817, P171, DOI 10.1007/978-3-319-91271-4_12
   Banach Richard, 2013, Theoretical Aspects of Computing - ICTAC 2013. 10th International Colloquium. Proceedings: LNCS 8049, P76, DOI 10.1007/978-3-642-39718-9_5
   Banach Richard, 2013, Theories of Programming and Formal Methods. Essays Dedicated to Jifeng He on the Occasion of His 70th Birthday. LNCS 8051, P37, DOI 10.1007/978-3-642-39698-4_3
   Banach R., 2018, MODELS CONCEPTS THEO, V34, P177
   Banach R, 2017, INT J SOFTW TOOLS TE, V19, P205, DOI 10.1007/s10009-015-0409-7
   Banach R, 2016, 2016 10TH INTERNATIONAL SYMPOSIUM ON THEORETICAL ASPECTS OF SOFTWARE ENGINEERING (TASE), P65, DOI 10.1109/TASE.2016.16
   Banach R, 2016, LECT NOTES COMPUT SC, V9675, P376, DOI 10.1007/978-3-319-33600-8_32
   Banach R, 2015, ACSIS-ANN COMPUT SCI, V5, P731, DOI 10.15439/2015F132
   Banach R, 2015, SCI COMPUT PROGRAM, V105, P92, DOI 10.1016/j.scico.2015.02.003
   Bender K, 2002, LECT NOTES CONTR INF, V279, P37
   Bloch A., 2015, Nonholonomic mechanics and control, V2nd ed.
   Carloni LP, 2006, FOUND TRENDS ELECTRO, V1, P1, DOI 10.1561/1000000001
   Cimatti A, 2009, LECT NOTES COMPUT SC, V5643, P188, DOI 10.1007/978-3-642-02658-4_17
   Dai LY, 2017, J SYMB COMPUT, V80, P62, DOI 10.1016/j.jsc.2016.07.010
   Dijkstra E. W., 1976, A Discipline of Pro-gramming
   Egyed A, 2018, COMM COM INF SC, V929, P113, DOI 10.1007/978-3-030-02852-7_10
   Frehse G, 2005, LECT NOTES COMPUT SC, V3414, P258
   Frehse G., 2011, COMPUTER AIDED VERIF, P379, DOI [DOI 10.1007/978-3-642-22110-1, 10.1007/978-3-642-22110-1_30]
   Friesen V, 1998, LECT NOTES COMPUT SC, V1493, P328, DOI 10.1007/BFb0056042
   Geisberger E., 2015, Living in a networked world: Integrated research agenda Cyber-Physical Systems (agendaCPS)
   Goldstein H., 2001, CLASSICAL MECH, V3rd
   Grimmett G., 2001, Probability and random processes, V3rd edn
   Grosu R, 1998, LECT NOTES COMPUT SC, V1486, P75, DOI 10.1007/BFb0055338
   Haddad W. M., 2008, Nonlinear Dynamical Systems and Control: A Lyapunov-Based Approach
   Hairer E., 1993, SOLVING ORDINARY DIF
   Henzinger TA, 1996, IEEE S LOG, P278, DOI 10.1109/LICS.1996.561342
   Henzinger TA, 1997, LECT NOTES COMPUT SC, V1254, P460, DOI 10.1007/s100090050008
   Hinrichsen D., 2005, Mathematical systems theory, DOI DOI 10.1007/B137541
   HOARE CAR, 1969, COMMUN ACM, V12, P576, DOI 10.1145/363235.363259
   Jifeng H., 1994, CLASSICAL MIND ESSAY, P171
   Kesten Y, 2000, ACTA INFORM, V36, P837, DOI 10.1007/s002360050177
   Kloeden PE., 1992, STOCHASTIC DIFFERENT
   Krob Marchal, 2013, PROC CSDM 13, P97
   Lee EdwardA., 2015, INTRO EMBEDDED SYSTE, VSecond
   Liu J, 2010, LECT NOTES COMPUT SC, V6461, P1, DOI [10.1109/PCSPA.2010.9, 10.1007/978-3-642-17164-2_1]
   Liu Y, 2016, NAT REV MATER, V1, DOI 10.1038/natrevmats.2016.42
   Lynch N, 2003, INFORM COMPUT, V185, P105, DOI 10.1016/S0890-5401(03)00067-1
   Manna Z., 1993, Hybrid Systems, P4
   McIver AK, 2004, ABSTRACTION REFINEME
   Oksendal B., 2013, STOCHASTIC DIFFERENT, DOI DOI 10.1007/978-3-662-03185-8
   Papastavridis J. G., 2014, Analytical Mechanics: A Comprehensive Treatise on the Dynamics of Constrained Systems
   Platzer A, 2018, LOGICAL FDN HYBRID S
   Platzer A, 2010, LOGICAL ANALYSIS OF HYBRID SYSTEMS: PROVING THEOREMS FOR COMPLEX DYNAMICS, P335, DOI 10.1007/978-3-642-14509-4_9
   Prajna S, 2004, LECT NOTES COMPUT SC, V2993, P477
   Ptolemaeus C., 2014, System Design, Modeling, and Simulation using Ptolemy II
   Sontag E. D, 1998, Mathematical Control Theory: Deterministic Finite Dimensional Systems, V6
   Su W, 2017, INT J SOFTW TOOLS TE, V19, P141, DOI 10.1007/s10009-015-0400-3
   Su W, 2014, SCI COMPUT PROGRAM, V94, P164, DOI 10.1016/j.scico.2014.04.015
   VanKampen NG, 2007, NORTH-HOLL PERS LIBR, P1
   Wanner Gerhard, 1996, Springer Series in Computational Mathematics, V375, DOI DOI 10.1007/978-3-642-05221-7
   Wolf W, 2009, COMPUTER, V42, P88, DOI 10.1109/MC.2009.81
   Zhan N., 2017, FORMAL VERIFICATION, P71
NR 77
TC 1
Z9 2
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAY 1
PY 2020
VL 190
AR 102404
DI 10.1016/j.scico.2020.102404
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA KR5LR
UT WOS:000517660400003
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Bowles, JMF
   Caminati, MB
AF Bowles, Juliana Mister Filipe
   Caminati, Marco B.
TI Correct composition in the presence of behavioural conflicts and
   dephasing
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Formal methods; SMT solver; Theorem prover; Model composition;
   Optimisation
ID MODEL; REO
AB Scenarios of execution are commonly used to specify partial behaviour and interactions between different objects and components in a system. To avoid overall inconsistency in specifications, various automated methods have emerged in the literature to compose scenario-based models. In recent work, we have shown how the theorem prover Isabelle/HOL can be combined with an SMT solver to detect inconsistencies between sequence diagrams and, only in their absence, generate the behavioural composition. In this paper, we exploit this combination further and present an efficient approach that generates all valid composed traces giving us an equivalent representation of the conflict-free valid composed model. In addition, we show a novel way to prove the correctness of the computed results, and compare this method with the implementation and verification done within Isabelle alone. To reduce the complexity of our technique, we consider priority constraints and a notion of dephased models, i.e., models which start execution at different times. This work has been inspired by a problem from a medical domain where different clinical guidelines for chronic conditions may be applied to the same patient at different points in time. We illustrate the approach with a realistic example from this domain. (C) 2019 Elsevier B.V. All rights reserved.
C1 [Bowles, Juliana Mister Filipe; Caminati, Marco B.] Univ St Andrews, Sch Comp Sci, Jack Cole Bldg, St Andrews KY16 9SX, Fife, Scotland.
C3 University of St Andrews
RP Bowles, JMF (corresponding author), Univ St Andrews, Sch Comp Sci, Jack Cole Bldg, St Andrews KY16 9SX, Fife, Scotland.
EM jkfb@st-andrews.ac.uk; mbc8@st-andrews.ac.uk
RI Caminati, Marco/D-5723-2016
OI Caminati, Marco/0000-0002-4529-5442; Bowles, Juliana/0000-0002-5918-9114
FU EPSRC [EP/M014290/1]; MRC [MR/S003819/1]; Health Data Research UK, an
   initiative - UK Research and Innovation, Department of Health and Social
   Care (England); EPSRC [EP/M014290/1] Funding Source: UKRI; MRC
   [MR/S003819/1] Funding Source: UKRI
FX This research is supported by EPSRC grant EP/M014290/1, MRC grant
   MR/S003819/1 and Health Data Research UK, an initiative funded by UK
   Research and Innovation, Department of Health and Social Care (England)
   and the devolved administrations, and leading medical research
   charities.
CR [Anonymous], [No title captured]
   [Anonymous], 2019, LCP ISABELLE 2019
   [Anonymous], TECH REP
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], 2018, POL GUID REAL PRESCR
   [Anonymous], 2015, P 21 INT C TOOLS ALG
   Araújo J, 2004, 12TH IEEE INTERNATIONAL REQUIREMENTS ENGINEERING CONFERENCE, PROCEEDINGS, P58
   Arbab F, 2004, MATH STRUCT COMP SCI, V14, P329, DOI 10.1017/S0960129504004153
   Baier C, 2006, SCI COMPUT PROGRAM, V61, P75, DOI 10.1016/j.scico.2005.10.008
   Balunovic Mislav, 2018, ADV NEURAL INFORM PR, P10317
   Barrett Clark, 2010, P 8 INT WORKSH SAT M
   Blanchette JC, 2013, J AUTOM REASONING, V51, P109, DOI 10.1007/s10817-013-9278-5
   Blanchette JC, 2013, LECT NOTES COMPUT SC, V7795, P493, DOI 10.1007/978-3-642-36742-7_34
   Böhme S, 2010, LECT NOTES COMPUT SC, V6172, P179, DOI 10.1007/978-3-642-14052-5_14
   Bouyer P, 2006, ELECTRON NOTES THEOR, V158, P3, DOI 10.1016/j.entcs.2006.04.002
   Bowles J, 2015, COMM COM INF SC, V506, P100, DOI 10.1007/978-3-319-25156-1_7
   Bowles JKF, 2007, INT CONF APPL CONCUR, P71, DOI 10.1109/ACSD.2007.39
   Bowles JKF, 2016, ASIA PAC SOFWR ENG, P313, DOI [10.1109/APSEC.2016.051, 10.1109/APSEC.2016.18]
   Bowles Juliana Kuster Filipe, 2015, Formal Methods and Software Engineering. 17th International Conference on Formal Engineering Methods (ICFEM 2015). Proceedings: LNCS 9407, P252, DOI 10.1007/978-3-319-25423-4_16
   Bowles J, 2017, LECT NOTES COMPUT SC, V10487, P233, DOI 10.1007/978-3-319-68034-7_14
   Bowles JKF, 2016, INT CONF APPL CONCUR, P35, DOI 10.1109/ACSD.2016.19
   Bowles JKF, 2006, LECT NOTES COMPUT SC, V4019, P189
   Burer S., 2012, SURVEYS OPERATIONS R, V17, P97, DOI DOI 10.1016/J.SORMS.2012.08.001
   Caminati MarcoB., 2015, Proceedings of the Sixteenth ACM Conference on Economics and Computation, EC'15, P547, DOI [10.1145/2764468.2764511, DOI 10.1145/2764468.2764511]
   D'Ippolito N, 2010, LECT NOTES COMPUT SC, V5977, P160, DOI 10.1007/978-3-642-11811-1_13
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Defen Zhang, 2009, Proceedings of the 2009 Fifth International Joint Conference on INC, IMS and IDC, P1102, DOI 10.1109/NCM.2009.271
   Giannakopoulou Dimitra, 2018, Handbook of Model Checking, P345, DOI DOI 10.1007/978-3-319-10575-8_12
   Harel D., 2003, COME LETS PLAY SCENA, DOI 10.1007/978-3-642-19029-2
   Hemmecke Raymond, 2010, 50 Years of Integer Programming 1958-2008, P561, DOI DOI 10.1007/978-3-540-68279-0_15
   Jackson D, 2012, SOFTWARE ABSTRACTIONS: LOGIC, LANGUAGE, AND ANALYSIS, P1
   Kaufmann P, 2014, LECT NOTES COMPUT SC, V8706, P21, DOI 10.1007/978-3-319-11245-9_2
   Klein Jacques., 2006, AOSD, P27
   Kovalov A, 2016, LECT NOTES COMPUT SC, V9681, P376, DOI 10.1007/978-3-319-33693-0_24
   Küster-Filipe J, 2006, THEOR COMPUT SCI, V351, P203, DOI 10.1016/j.tcs.2005.09.068
   Liang HZ, 2008, LECT NOTES COMPUT SC, V5301, P204, DOI 10.1007/978-3-540-87875-9_15
   NIELSEN M, 1981, THEOR COMPUT SCI, V13, P85, DOI 10.1016/0304-3975(81)90112-2
   Nielsen Mogens, 1995, Handbook of Logic in Computer Science, V4, P1, DOI [10.5555/218623.218630, DOI 10.5555/218623.218630]
   Proenca J., 2013, CCIS, V393, P159, DOI DOI 10.1007/978-3-642-45364-9_14
   Rossi F, 2006, FOUND ARTIF INTELL, P1
   Rubin B, 2008, MIDDLE E FOCUS, P7
   Uchitel S, 2009, IEEE T SOFTWARE ENG, V35, P384, DOI 10.1109/TSE.2008.107
   Whittle J., 2006, P 2006 INT WORKSHOP, P59
   Wilk S, 2017, J BIOMED INFORM, V66, P52, DOI 10.1016/j.jbi.2016.12.002
   WINSKEL G, 1982, LECT NOTES COMPUT SC, V140, P561
NR 49
TC 0
Z9 0
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29a, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 1
PY 2020
VL 185
AR 102323
DI 10.1016/j.scico.2019.102323
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA JR6VU
UT WOS:000499761400005
OA Bronze
DA 2024-07-18
ER

PT J
AU Gkolfi, A
   Din, CC
   Johnsen, EB
   Kristensen, LM
   Steffen, M
   Yu, IC
AF Gkolfi, Anastasia
   Din, Crystal Chang
   Johnsen, Einar Broch
   Kristensen, Lars Michael
   Steffen, Martin
   Yu, Ingrid Chieh
TI Translating active objects into colored Petri nets for communication
   analysis
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Colored Petri nets; Model checking; Semantics; Static analysis;
   Concurrency
ID ACTORS
AB Actor-based languages attract attention for their ability to scale to highly parallel architectures. Active objects combine the asynchronous communication of actors with object-oriented programming by means of asynchronous method calls and synchronization on futures. However, the combination of asynchronous calls and synchronization may introduce communication cycles which lead to a form of communication deadlock and livelock. This paper addresses such communication deadlocks and livelocks for ABS, a formally defined active object language which additionally supports cooperative scheduling to express complex distributed control flow, using first-class futures and explicit process release points. Our approach is based on a translation of the semantics of ABS into colored Petri nets, such that a program and its state correspond to a marking of this net. We prove the soundness of this translation and demonstrate by example how the implementation of this net can be used to analyze ABS programs with respect to communication deadlocks and livelocks. (C) 2019 Elsevier B.V. All rights reserved.
C1 [Gkolfi, Anastasia; Din, Crystal Chang; Johnsen, Einar Broch; Steffen, Martin; Yu, Ingrid Chieh] Univ Oslo, Dept Informat, Oslo, Norway.
   [Kristensen, Lars Michael] Hogskulen Vestlandet, Dept Comp Math & Phys, Bergen, Norway.
C3 University of Oslo
RP Gkolfi, A (corresponding author), Univ Oslo, Dept Informat, Oslo, Norway.
EM natasa@ifi.uio.no; crystald@ifi.uio.no; einarj@ifi.uio.no;
   Lars.Michael.Kristensen@hvl.no; msteffen@ifi.uio.no; ingridcy@ifi.uio.no
OI Din, Crystal Chang/0000-0002-3588-5609
FU Research Council of Norway under the CUMULUS project
FX The work was partially supported by the Research Council of Norway under
   the CUMULUS project.
CR Agha G., 1986, Actors: a model of concurrent computation in distributed systems
   Agha G., 1987, OBJECT ORIENTED CONC, P37
   [Anonymous], 1962, Schriften des IIM
   Armstrong J., 2007, Programming Erlang: Software for a Concurrent World, V1st
   Baldan P, 2015, SCI COMPUT PROGRAM, V109, P96, DOI 10.1016/j.scico.2014.11.019
   Best E., 2001, AN EATCS SERIES
   Bruni R, 2006, LECT NOTES COMPUT SC, V4184, P123
   Busi N., 1995, LNCS, V962, P145
   Caromel D, 2009, INFORM COMPUT, V207, P459, DOI 10.1016/j.ic.2008.12.004
   Caromel Denis, 2005, A Theory of Distributed Objects, DOI DOI 10.1007/B138812
   CHANDY KM, 1983, ACM T COMPUT SYST, V1, P144, DOI 10.1145/357360.357365
   Clarke EM, 1996, FORM METHOD SYST DES, V9, P77, DOI 10.1007/BF00625969
   Cogumbreiro T, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3143359
   de Boer F.S., 2013, LECT NOTES COMPUTER, P110
   De Boer F, 2017, ACM COMPUT SURV, V50, DOI 10.1145/3122848
   de Boer FS, 2007, LECT NOTES COMPUT SC, V4421, P316
   Din CC, 2015, LECT NOTES ARTIF INT, V9195, P517, DOI 10.1007/978-3-319-21401-6_35
   Din CC, 2015, FORM ASP COMPUT, V27, P551, DOI 10.1007/s00165-014-0322-y
   ESPARZA J, 1994, B EATCS, V52, P245
   Flores-Montoya AE, 2013, LECT NOTES COMPUT SC, V7892, P273
   Giachino E, 2016, SOFTW SYST MODEL, V15, P1013, DOI 10.1007/s10270-014-0444-y
   Giachino E, 2011, LECT NOTES COMPUT SC, V6722, P168, DOI 10.1007/978-3-642-21461-5_11
   Gkolfi A, 2017, LECT NOTES COMPUT SC, V10522, P84, DOI 10.1007/978-3-319-68972-2_6
   Haller P, 2009, THEOR COMPUT SCI, V410, P202, DOI 10.1016/j.tcs.2008.09.019
   Henrio Ludovic, 2017, Integrated Formal Methods. 13th International Conference, IFM 2017. Proceedings: LNCS 10510, P195, DOI 10.1007/978-3-319-66845-1_13
   Ichbiah J., 1980, MODULES VISIBILITY A, P153
   JENSEN K, 1987, LECT NOTES COMPUT SC, V254, P248
   JENSEN K, 1991, LECT NOTES COMPUT SC, V483, P342
   Jensen K, 2012, THEOR COMPUT SCI, V429, P169, DOI 10.1016/j.tcs.2011.12.036
   Jensen K, 2009, COLOURED PETRI NETS: MODELLING AND VALIDATION OF CONCURRENT SYSTEMS, P1, DOI 10.1007/b95112
   Johnsen E.B., 2011, Lecture Notes in Computer Science, V6957, P142, DOI [10.1007/978- 3- 642-25271-6 8, DOI 10.1007/978-3-642-25271-6]
   Johnsen EB, 2015, J LOG ALGEBR METHODS, V84, P67, DOI 10.1016/j.jlamp.2014.07.001
   Long B, 2007, CONCURR COMP-PRACT E, V19, P281, DOI 10.1002/cpe.1063
   Mastandrea V., 2016, P 17 IT C THEOR COMP, P257
   MCLENDON WW, 1992, LECT NOTES COMPUT SC, V616, P384
   Mikolajczak B, 1999, COMPUT MATH APPL, V37, P23, DOI 10.1016/S0898-1221(99)00139-X
   MITCHELL B, 2007, STTT, V9, P255
   Nigro L., 2001, Concurrent object-oriented programming and petri nots. Advances in petri nets (Lecture Notes in Computer Science Vol.2001), P493
   Odersky M, 2000, LECT NOTES COMPUT SC, V1782, P1
   Owe O., 2014, 27 NORSK INF NIK HEG
   Pun K. I, 2014, THESIS
   Ratzer AV, 2003, LECT NOTES COMPUT SC, V2679, P450
   Reisig W., 1985, EATCS MONOGRAPHS COM, V4
   Russell NC, 2009, LECT NOTES COMPUT SC, V5800, P1, DOI 10.1007/978-3-642-04856-2_1
   SAMI Y, 1991, LECT NOTES COMPUT SC, V506, P110
NR 45
TC 2
Z9 2
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUL 15
PY 2019
VL 181
BP 1
EP 26
DI 10.1016/j.scico.2019.04.002
PG 26
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA IW0MB
UT WOS:000484654900001
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Alpuim, J
   Swierstra, W
AF Alpuim, Joao
   Swierstra, Wouter
TI Embedding the refinement calculus in Coq
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Refinement calculus; Coq; Predicate transformers; Free monad; Dependent
   types
AB The refinement calculus and type theory are both frameworks that support the specification and verification of programs. This paper presents an embedding of the refinement calculus in the interactive theorem prover Coq, clarifying the relation between the two. As a result, refinement calculations can be performed in Coq, enabling the interactive calculation of formally verified programs from their specification. (C) 2017 Elsevier B.V. All rights reserved.
C1 [Alpuim, Joao] Univ Hong Kong, Hong Kong, Hong Kong, Peoples R China.
   [Swierstra, Wouter] Univ Utrecht, Utrecht, Netherlands.
C3 University of Hong Kong; Utrecht University
RP Alpuim, J (corresponding author), Univ Hong Kong, Hong Kong, Hong Kong, Peoples R China.
EM alpuim@cs.hku.hk; w.s.swierstra@uu.nl
FU London Mathematical Society's Scheme 7 grant [SC7-10/11-04]
FX The second author would like to thank Peter Hancock for his patience in
   explaining the relation between interaction structures and the
   refinement calculus. The second author's visit to Scotland was funded by
   the London Mathematical Society's Scheme 7 grant (SC7-10/11-04).
CR Altenkirch Thorsten, 2009, 24 ANN IEEE S LOG CO
   [Anonymous], 1993, Program Verification: Fundamental Issues in Computer Science, DOI [10.1090/psapm/019/0235771, DOI 10.1090/PSAPM/019/0235771]
   Back J.R., 1998, Refinement Calculus: a Systematic Introduction
   Back R. J. R., 1990, Formal Aspects of Computing, V2, P247, DOI 10.1007/BF01888227
   Back R. J. R., 1989, FORM ASP COMPUT, V2
   Back RJ, 1978, THESIS
   Boulmé S, 2007, LECT NOTES COMPUT SC, V4583, P54
   Butler M., 1997, FORMAL METHODS PACIF
   Chlipala A, 2009, INT C FUNCT PROGR IC
   Conchon S, 2007, ML'07: PROCEEDINGS OF THE 2007 WORKSHOP ON ML, P37
   Dijkstra E. W., 1976, A Discipline of Pro-gramming
   Dongol Brijesh, 2015, LECT NOTES COMPUT SC, V9129
   Hancock P, 2006, ANN PURE APPL LOGIC, V137, P189, DOI 10.1016/j.apal.2005.05.022
   Hancock P., 2000, Computer Science Logic. 14th International Workshop, CSL 2000. Annual Conference of the EACSL. Proceedings (Lecture Notes in Computer Science Vol.1862), P317
   HANCOCK P, 2000, WORKSH SUBT DEP TYP
   HOARE CAR, 1969, COMMUN ACM, V12, P576, DOI 10.1145/363235.363259
   Morgan C, 1990, PROGRAMMING SPECIFIC
   Nanevski A., 2008, INT C FUNCT PROGR IC
   Nanevski Aleksandar, 2008, P 12 ACM SIGPLAN INT
   Swierstra Wouter, 2016, Functional and Logic Programming. 13th International Symposium, FLOPS 2016. Proceedings: LNCS 9613, P29, DOI 10.1007/978-3-319-29604-3_3
   Swierstra W, 2007, HASKELL'07: PROCEEDINGS OF THE ACM SIGPLAN 2007 HASKELL WORKSHOP, P25, DOI 10.1145/1291201.1291206
   Swierstra W, 2009, LECT NOTES COMPUT SC, V5674, P440, DOI 10.1007/978-3-642-03359-9_30
   Swierstra Wouter, 2009, THESIS
NR 23
TC 1
Z9 1
U1 0
U2 4
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 15
PY 2018
VL 164
SI SI
BP 37
EP 48
DI 10.1016/j.scico.2017.04.003
PG 12
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GR5WX
UT WOS:000442713700004
OA hybrid
DA 2024-07-18
ER

PT J
AU Gammaitoni, L
   Kelsen, P
   Ma, Q
AF Gammaitoni, Loic
   Kelsen, Pierre
   Ma, Qin
TI Agile validation of model transformations using compound F-Alloy
   specifications
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Model transformation; Validation; Alloy; Compound model transformations;
   Higher-order transformations
AB Model transformations play a key role in model driven software engineering approaches. Validation of model transformations is crucial for the quality assurance of software systems to be constructed. The relational logic based specification language Alloy and its accompanying tool the Alloy Analyzer have been used in the past to validate properties of model transformations. However Alloy based analysis of transformations suffers from several limitations. On one hand, it is time consuming and does not scale well. On the other hand, the reliance on Alloy, being a formal method, prevents the effective involvement of domain experts in the validation process which is crucial for pinpointing domain pertinent errors. Those limitations are even more severe when it comes to transformations whose input and/or output are themselves transformations (called compound transformations) because they are inherently more complex.
   To tackle the performance and scalability limitations, in previous work, we proposed an Alloy-based Domain Specific Language (DSL), called F-Alloy, that is tailored for model transformation specifications. Instead of pure analysis based validation, F-Alloy speeds up the validation of model transformations by applying a hybrid strategy that combines analysis with interpretation. In this paper, we formalize the notion of "hybrid analysis" and further extended it to also support efficient validation of compound transformations.
   To enable the effective involvement of domain experts in the validation process, we propose in this paper a new approach to model transformation validation, called Visualization -Based Validation (briefly VBV). Following VBV, representative instances of a to-be validated model transformation are automatically generated by hybrid analysis and shown to domain experts for feedback in a visual notation that they are familiar with. We prescribe a process to guide the application of VBV to model transformations and illustrate it with a benchmark model transformation. (C) 2017 Elsevier B.V. All rights reserved.
C1 [Gammaitoni, Loic; Kelsen, Pierre; Ma, Qin] Univ Luxembourg, Luxembourg, Luxembourg.
C3 University of Luxembourg
RP Gammaitoni, L (corresponding author), Univ Luxembourg, Luxembourg, Luxembourg.
EM loic.gammaitoni@uni.lu; pierre.kelsen@uni.lu; qin.ma@uni.lu
RI Ma, Qin/AAI-3810-2021
OI Ma, Qin/0000-0001-8520-8190
CR Anastasakis K., 2007, ModeVVa'07, P47
   Anastasakis K., 2009, A model driven approach for the automated analysis of uml class diagrams
   [Anonymous], 5 INT WORKSH AUT FOR
   Asoudeh N., 2007, ALLOY LANGUAGE DOMAI
   Baresi L, 2006, LECT NOTES COMPUT SC, V4178, P306
   Bézivin J, 2006, LECT NOTES COMPUT SC, V3844, P120
   Dinh-Trong TT, 2006, ISSRE 2006:17TH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P95
   Gammaitoni L., 2014, P 11 MODEVVA WORKSH, V1235, P19
   Gammaitoni L, 2015, P 2015 ACM SIGPLAN I
   Gammaitoni L., 2016, INT C SIM MOD PROGR
   Gammaitoni L, 2016, 2016 10TH INTERNATIONAL SYMPOSIUM ON THEORETICAL ASPECTS OF SOFTWARE ENGINEERING (TASE), P125, DOI 10.1109/TASE.2016.21
   Gammaitoni L, 2015, LECT NOTES COMPUT SC, V9152, P166, DOI 10.1007/978-3-319-21155-8_13
   Gammaitoni L, 2014, LECT NOTES COMPUT SC, V8477, P324, DOI 10.1007/978-3-662-43652-3_33
   Ganov SvetoslavR., 2012, Formal Methods and Software Engineering - 14th International Conference on Formal Engineering Methods, ICFEM 2012, Kyoto, Japan, November 12-16, 2012. Proceedings, P414
   Hochgeschwender N., 2014, INT C SIM MOD PROGR
   Jackson D, 2012, SOFTWARE ABSTRACTIONS: LOGIC, LANGUAGE, AND ANALYSIS, P1
   Khurshid S, 2000, FIFTEENTH IEEE INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING, PROCEEDINGS, P13, DOI 10.1109/ASE.2000.873646
   Lano K, 2015, FORM ASP COMPUT, V27, P193, DOI 10.1007/s00165-014-0313-z
   Marinov D, 2005, LECT NOTES COMPUT SC, V3569, P187
   Mens T, 2006, ELECTRON NOTES THEOR, V152, P125, DOI 10.1016/j.entcs.2005.10.021
   Sullivan K., 2004, Software Engineering Notes, V29, P133, DOI 10.1145/1013886.1007531
   Tisi M, 2009, LECT NOTES COMPUT SC, V5562, P18, DOI 10.1007/978-3-642-02674-4_3
   Uzuncaova E, 2008, LECT NOTES COMPUT SC, V5014, P310, DOI 10.1007/978-3-540-68237-0_22
   van Amstel Marcel F., 2012, Theory and Practice of Model Transformations. Proceedings 5th International Conference, ICMT 2012, P152, DOI 10.1007/978-3-642-30476-7_10
   Zaman A., 2013, TECH REP, P152
NR 25
TC 9
Z9 9
U1 1
U2 7
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 15
PY 2018
VL 162
SI SI
BP 55
EP 75
DI 10.1016/j.scico.2017.07.001
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GJ1UM
UT WOS:000435053400004
OA Green Published
DA 2024-07-18
ER

PT J
AU Benton, N
   Hofmann, M
   Nigam, V
AF Benton, Nick
   Hofmann, Martin
   Nigam, Vivek
TI Effect-dependent transformations for concurrent programs
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Program equivalence; Shared-variable concurrency; Logical relation;
   Denotational semantics
ID SAFE LOCKING
AB We describe a denotational semantics for an abstract effect system for a higher-order, shared-variable concurrent programming language. We prove the soundness of a number of general effect-based program equivalences, including a parallelization equation that specifies sufficient conditions for replacing sequential composition with parallel composition. Effect annotations are relative to abstract locations specified by contracts rather than physical footprints allowing us in particular to show the soundness of some transformations involving fine-grained concurrent data structures, such as Michael-Scott queues, that allow concurrent access to different parts of mutable data structures.
   Our semantics is based on refining a trace-based semantics for first-order programs due to Brookes. By moving from concrete to abstract locations, and adding type refinements that capture the possible side-effects of both expressions and their concurrent environments, we are able to validate many equivalences that do not hold in an unrefined model. The meanings of types are expressed, using a game-based logical relation over sets of traces. Two programs e(1) and e(2) are logically related if one is able to solve a two-player game: for any trace with result value nu(1) in the semantics of e(1) (challenge) that the player presents, the opponent can present an (response) equivalent trace in the semantics of e(2) with a logically related result value nu(2). (C) 2017 Published by Elsevier B.V.
C1 [Benton, Nick] Facebook, London, England.
   [Hofmann, Martin] LMU, Munich, Germany.
   [Nigam, Vivek] Fortiss, Munich, Germany.
C3 Facebook Inc; University of Munich; fortiss
RP Benton, N (corresponding author), Facebook, London, England.
EM nick.benton@gmail.com; hofmann@ifi.lmu.de; vivek.nigam@gmail.com
OI Nigam, Vivek/0000-0003-4089-1218
CR ABADI M, 1991, THEOR COMPUT SCI, V82, P253, DOI 10.1016/0304-3975(91)90224-P
   Abadi M, 2006, ACM T PROGR LANG SYS, V28, P207, DOI 10.1145/1119479.1119480
   Abramsky S., 1994, ONLINE LECT NOTES
   Ahmed A, 2009, ACM SIGPLAN NOTICES, V44, P340, DOI 10.1145/1594834.1480925
   [Anonymous], 1999, TYPE EFFECT SYSTEMS
   Benton Nick, 2016, A List of Successes that can Change the World. Essays Dedicated to Philip Wadler on the Occasion of his 60th Birthday. LNCS 9600, P56, DOI 10.1007/978-3-319-30936-1_3
   Benton N., 2007, 3 ACM WORKSH TYP LAN
   Benton N., ARXIV151002419 CORR
   Benton N, 2006, LECT NOTES COMPUT SC, V4279, P114
   Benton N, 2014, ACM SIGPLAN NOTICES, V49, P619, DOI 10.1145/2535838.2535869
   Benton N, 2009, PPDP'09: PROCEEDINGS OF THE 11TH INTERNATIONAL ACM SIGPLAN SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING, P301, DOI 10.1145/1599410.1599447
   Benton Nick., 1998, P 3 ACM SIGPLAN INT, P129, DOI [10.1145/289423.289435, DOI 10.1145/289423.289435]
   Birkedal L., 1996, P 23 ACM SIGPLAN SIG
   Birkedal Lars, 2012, 26 INT WORKSHOP21ST, V16, P107, DOI [10.4230/LIPIcs.CSL.2012.107, DOI 10.4230/LIPICS.CSL.2012.107]
   Broberg N., 2006, LNCS, V3924
   Brookes S, 1996, INFORM COMPUT, V127, P145, DOI 10.1006/inco.1996.0056
   Coleman JW, 2007, J LOGIC COMPUT, V17, P807, DOI 10.1093/logcom/exm030
   De Nicola R., 1983, P 10 C AUT LANG PROG, V1983, P548
   Flanagan C., 2003, P ACM SIGPLAN C PROG
   Gifford D. K., 1986, LISP FUNCTIONAL PROG
   Jung R, 2015, ACM SIGPLAN NOTICES, V50, P637, DOI [10.1145/2676726.2676980, 10.1145/2775051.2676980]
   Kammar O, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P349
   Krogh-Jespersen M, 2017, ACM SIGPLAN NOTICES, V52, P218, DOI 10.1145/3093333.3009877
   Liang HJ, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P455
   Lynch N, 1996, INFORM COMPUT, V128, P1, DOI 10.1006/inco.1996.0060
   Michael MM, 1998, J PARALLEL DISTR COM, V51, P1, DOI 10.1006/jpdc.1998.1446
   Pessaux F., 1999, P 26 ACM S PRINC PRO
   Plotkin G. D., 1976, SIAM Journal on Computing, V5, P452, DOI 10.1137/0205035
   Thamsborg J, 2011, ICFP 11 - PROCEEDINGS OF THE 2011 ACM SIGPLAN: INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P445
   Tristan Jean-Baptiste, 2010, POPL
   TURON A, 2013, 40 ANN ACM SIGPL, V48, P343, DOI DOI 10.1145/2480359.2429111
   Turon A, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P247, DOI 10.1145/1926385.1926415
NR 32
TC 1
Z9 1
U1 0
U2 1
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD APR 1
PY 2018
VL 155
BP 27
EP 51
DI 10.1016/j.scico.2017.11.001
PG 25
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA FZ1JJ
UT WOS:000427332600003
OA Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Becker, K
   Voss, S
   Schätz, B
AF Becker, Klaus
   Voss, Sebastian
   Schaetz, Bernhard
TI Formal analysis of feature degradation in fault-tolerant automotive
   systems
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Graceful degradation; Fault tolerance; Redundancy; Fail-operational;
   Mixed criticality
ID GRACEFUL DEGRADATION; TASKS
AB Safety critical fault-tolerant embedded systems have to react properly on failures of internal system elements to avoid failure propagation and finally a harmful external failure at the system boundary. Beside failure detection, actions for failure handling are essential to cover safety requirements. Actions reach from enabling fail-silent, fail-safe or fail-operational behavior of system elements, or also hybrids of this in a mixed criticality system design. Graceful degradation can be applied when system resources become insufficient, reducing the set of provided functional features. In this paper, we address mixed criticality and mixed reliability automotive systems. We consider mixed reliability by functional features having different fail-operational requirements. Beside pure fail-operational features, we also consider degradations of functional features, called fail degraded features. We describe a formal system model that contains, i.a., the functional features of a vehicle, possible feature degradations, software components that realize the features, as well as the deployment of software components to execution units. We provide a structural analysis of the level of degradation on system level and feature level, which is required in scenarios of failing execution units and/or software components. Combined with this analysis, we synthesize valid deployments of software components to execution units, incorporating an adequate level of redundancy to meet the fail-operational requirements, if feasible. We apply our approach to a constructed automotive example. (C) 2017 Elsevier B.V. All rights reserved.
C1 [Becker, Klaus; Voss, Sebastian; Schaetz, Bernhard] Fortiss GmbH, Guerickestr 25, D-80805 Munich, Germany.
C3 fortiss
RP Becker, K (corresponding author), Fortiss GmbH, Guerickestr 25, D-80805 Munich, Germany.
EM becker@fortiss.org; voss@fortiss.org
FU German Federal Ministry for Economic Affairs and Energy (BMWi)
   [01ME12009]
FX Parts of this work have been done in relation to the project RACE
   (Robust and Reliant Automotive Computing Environment for Future eCars),
   which was funded by the German Federal Ministry for Economic Affairs and
   Energy (BMWi) under grant no. 01ME12009 in years 2012-2014.
CR [Anonymous], 262629 ISO
   [Anonymous], 262621 ISO
   [Anonymous], ADV MICROSYSTEMS AUT
   AUTOSAR, 2015, AUTOMOTIVE OP SYST A
   Avizienis A, 2004, IEEE T DEPEND SECURE, V1, P11, DOI 10.1109/TDSC.2004.2
   Becker Klaus, 2014, Software Engineering and Formal Methods. 12th International Conference, SEFM 2014. Proceedings: LNCS 8702, P205, DOI 10.1007/978-3-319-10431-7_15
   Becker K., 2015, SPRINGER COMMUNICATI, V596, P139
   Becker K., 2015, 3 WORKSH CRIT AUT AP
   Becker K., 2014, 1 WORKSH ENG DEP SYS
   Becker K, 2015, 2015 IEEE 18TH INTERNATIONAL SYMPOSIUM ON REAL-TIME DISTRIBUTED COMPUTING (ISORC), P110, DOI 10.1109/ISORC.2015.10
   Bjerner N., 2015, 21 INT C TOOLS ALG C
   Bjorner N., 2015, LECT NOTES COMPUTER, V9450
   Bjorner Nikolaj., 2014, SCSS 2014 VOLUME 30, V30, P1, DOI DOI 10.29007/JMXJ
   Blanke M, 2001, P AMER CONTR CONF, P2606, DOI 10.1109/ACC.2001.946264
   Boone B, 2008, SERA 2008: 6TH ACIS INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING RESEARCH, MANAGEMENT AND APPLICATIONS, PROCEEDINGS, P21, DOI 10.1109/SERA.2008.28
   Brinkschulte U., 2009, Organic Computing, P261
   Buckl C., 2014, WORKSH AD REC EMB SY
   Cimatti A, 2011, J ARTIF INTELL RES, V40, P701, DOI 10.1613/jair.3196
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Dinkel M., 2007, WIT 07, P85
   Emberson P., 2009, THESIS
   Emberson P, 2008, REAL TIM SYST SYMP P, P270, DOI 10.1109/RTSS.2008.24
   Eugster PT, 2003, ACM COMPUT SURV, V35, P114, DOI 10.1145/857076.857078
   Feng L, 2008, IEEE DECIS CONTR P, P3737, DOI 10.1109/CDC.2008.4739195
   Glass M, 2009, DES AUT TEST EUROPE, P320
   Hardung B., 2006, THESIS
   Heydarnoori Abbas, 2011, Journal of Software, V6, P1381, DOI 10.4304/jsw.6.8.1381-1394
   Hissam SA, 2002, LECT NOTES COMPUT SC, V2370, P108
   Höfig K, 2015, QOSA'15 PROCEEDINGS OF THE 11TH INTERNATIONAL ACM SIGSOFT CONFERENCE ON QUALITY OF SOFTWARE ARCHITECTURES, P123, DOI 10.1145/2737182.2737191
   ISO, 2011, 262626 ISO
   Kugele S., 2014, 6 INT WORKSH CONSTR, P18
   Kumar R, 2008, IEEE T RELIAB, V57, P650, DOI 10.1109/TR.2008.2006079
   Lau KK, 2007, IEEE T SOFTWARE ENG, V33, P709, DOI 10.1109/TSE.2007.70726
   Liebetrau T., 2012, WHITE PAPER ENERGY S
   Pardo-Castellote G., 2005, INTRO DDS DATA CTR C
   Penha D, 2015, PROCEEDINGS IEEE/IFIP 13TH INTERNATIONAL CONFERENCE ON EMBEDDED AND UBIQUITOUS COMPUTING 2015, P52, DOI 10.1109/EUC.2015.14
   Pinello C, 2008, IEEE T COMPUT AID D, V27, P906, DOI 10.1109/TCAD.2008.917971
   Pohlmann U., 2014, P 2 WORKSH VIEW BAS, P23
   Pop P, 2009, IEEE T VLSI SYST, V17, P389, DOI 10.1109/TVLSI.2008.2003166
   Quigley M, 2009, IEEE INT CONF ROBOT, P3604
   RANDELL B, 1978, COMPUT SURV, V10, P123, DOI 10.1145/356725.356729
   Rossebo JEY, 2006, ADV INFORM SECUR, P107
   Rushby J., 1999, CR1999209347
   Saridakis Titos, 2009, Transactions on Pattern Languages of Programming. I, P67, DOI 10.1007/978-3-642-10832-7_3
   Schomp K., 2014, P 13 ACM WORKSH HOT, P1
   Seebach H, 2010, LECT NOTES COMPUT SC, V6407, P47, DOI 10.1007/978-3-642-16576-4_4
   Shelton C, 2003, LECT NOTES COMPUT SC, V2677, P267
   Shelton C. P., 2003, THESIS
   Shelton CP, 2003, EIGHTH IEEE INTERNATIONAL WORKSHOP ON OBJECT-ORIENTED REAL-TIME DEPENDABLE SYSTEMS, PROCEEDINGS, P156
   Sommer Stephan., 2013, 2013 IEEE INT ELECT, P1
   Sora I, 2003, LECT NOTES COMPUT SC, V2621, P22
   STREICHERT T, 2008, ORGANIC COMPUTING, P241
   Szyperski C., 2002, Component Software: Beyond Object-Oriented Programming
   Taylor Richard N., 2009, Software architecture: foundations, theory, and practice
   TINDELL KW, 1992, REAL-TIME SYST, V4, P145, DOI 10.1007/BF00365407
   Voss S., 2013, ENG COMPUTER BASED S
   Zeller M, 2013, J SYST ARCHITECT, V59, P1067, DOI 10.1016/j.sysarc.2012.11.003
   Zimmer Bastian, 2012, Computer Safety, Reliability, and Security. Proceedings of the 31st International Conference, SAFECOMP 2012, P328, DOI 10.1007/978-3-642-33678-2_28
NR 58
TC 4
Z9 4
U1 0
U2 6
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR 1
PY 2018
VL 154
BP 89
EP 133
DI 10.1016/j.scico.2017.10.007
PG 45
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA FW1RT
UT WOS:000425077800005
DA 2024-07-18
ER

PT J
AU Sohrabi, MK
   Azgomi, H
AF Sohrabi, Mohammad Karim
   Azgomi, Hosseion
TI Parallel set similarity join on big data based on Locality-Sensitive
   Hashing
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Set similarity join; Locality Sensitive Hashing; MapReduce; Similarity;
   Big data
ID EFFICIENT
AB Due to the huge amount of involved data and time-consuming process of join operations, the exact-match joins are rarely used for big data. The most common alternative for exact match joins are similarity joins which find similar pairs of records. Set similarity join (SSJ) is defined as join of very large tables based on similarity of a set of their attributes, which is called join attributes. To operate the similarity join of two large tables based on their join attributes, the similarity of the values of the join attributes is specified using an appropriate similarity function, and then, the values pairs which their similarity is higher than a certain threshold, are selected as candidates for join in case of similarity.
   In this paper, a parallel set similarity join method is introduced using the MapReduce programming model. The proposed method uses Locality Sensitive Hashing (LSH) techniques to decrease the number of required comparisons for calculating the similarity of the sets. The performance of the proposed method has been compared with the best previous similarity join methods on real and synthetic datasets in terms of time. The experimental results show that the proposed Method works faster than the former methods. (C) 2017 Elsevier B.V. All rights reserved.
C1 [Sohrabi, Mohammad Karim; Azgomi, Hosseion] Islamic Azad Univ, Semnan Branch, Dept Comp Engn, Semnan, Iran.
C3 Islamic Azad University
RP Sohrabi, MK (corresponding author), Islamic Azad Univ, Semnan Branch, Dept Comp Engn, Semnan, Iran.
EM Amir_sohraby@aut.ac.ir; hossein.azgomi@gmail.com
RI Azgomi, Hossein/AAN-6764-2021; Sohrabi, Mohammad Karim/AAD-8618-2019
OI Sohrabi, Mohammad Karim/0000-0001-8066-0356; Azgomi,
   Hossein/0000-0001-7974-1845
CR [Anonymous], 2012, SIGMOD
   [Anonymous], 2006, P 32 INT C VER LARG
   Bayardo R. J., 2007, P 16 INT C WORLD WID, P131, DOI [DOI 10.1145/1242572.1242591, 10.1145/1242572.1242591]
   Boinepelli H., 2015, STUDIES IN BIG DATA, P161
   Bouros P, 2012, PROC VLDB ENDOW, V6, P1
   Chen C, 2011, EXPERT SYST APPL, V38, P12388, DOI 10.1016/j.eswa.2011.04.018
   Chen M, 2014, MOBILE NETW APPL, V19, P171, DOI 10.1007/s11036-013-0489-0
   Deng D, 2015, PROC VLDB ENDOW, V9, P360
   Guo ZY, 2013, SIGNAL PROCESS, V93, P2229, DOI 10.1016/j.sigpro.2012.09.006
   Han J, 2012, MOR KAUF D, P1
   Kim C, 2015, INFORM SYST, V49, P52, DOI 10.1016/j.is.2014.11.005
   Kranjc J, 2016, FUTURE GENER COMPUT, V68, P38
   Lämmel R, 2008, SCI COMPUT PROGRAM, V70, P1, DOI 10.1016/j.scico.2007.07.001
   Leskovec J, 2014, MINING OF MASSIVE DATASETS, 2ND EDITION, P1
   Li RQ, 2017, INFORM SCIENCES, V381, P1, DOI 10.1016/j.ins.2016.10.042
   Mann W, 2016, PROC VLDB ENDOW, V9, P636
   Mann Willi., 2014, Proceedings of the 26th GI-Workshop Grundlagen von Datenbanken, Bozen-Bolzano, Italy, October 21st to 24th, 2014, V1313, P89
   Ribeiro LA, 2009, LECT NOTES COMPUT SC, V5739, P88, DOI 10.1007/978-3-642-03973-7_8
   Ribeiro LA, 2011, INFORM SYST, V36, P62, DOI 10.1016/j.is.2010.07.003
   Rong CT, 2013, IEEE T KNOWL DATA EN, V25, P2217, DOI 10.1109/TKDE.2012.195
   Silva YN, 2015, INFORM SYST, V52, P149, DOI 10.1016/j.is.2015.01.008
   Sohrabi MK, 2017, COMPUT HUM BEHAV, V68, P244, DOI 10.1016/j.chb.2016.11.036
   Sohrabi MK, 2016, COMPUT HUM BEHAV, V60, P534, DOI 10.1016/j.chb.2016.02.092
   Sohrabi MK, 2013, KNOWL-BASED SYST, V37, P462, DOI 10.1016/j.knosys.2012.09.005
   Sohrabi MK, 2012, KNOWL-BASED SYST, V33, P41, DOI 10.1016/j.knosys.2012.03.003
   Vernica R., 2010, P 2010 ACM SIGMOD IN, P495, DOI DOI 10.1145/1807167.1807222
   Weis Melanie, 2006, P INT WORKSH INF QUA
   Wu ZY, 2014, NEURAL NETWORKS, V58, P14, DOI 10.1016/j.neunet.2014.05.019
   Xiao C, 2011, ACM T DATABASE SYST, V36, DOI 10.1145/2000824.2000825
   Xiao Chuan., 2008, WWW 08, P131, DOI DOI 10.1145/1367497.1367516
   Zhang WH, 2016, KNOWL-BASED SYST, V97, P40, DOI 10.1016/j.knosys.2016.01.022
   Zhang XH, 2012, OPTIK, V123, P1891, DOI 10.1016/j.ijleo.2012.03.075
   Zhang Y, 2016, PATTERN RECOGN, V59, P302, DOI 10.1016/j.patcog.2015.11.018
   Zhu ZX, 2016, INFORM SCIENCES, V329, P73, DOI 10.1016/j.ins.2015.09.006
NR 34
TC 25
Z9 26
U1 0
U2 17
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 1
PY 2017
VL 145
BP 1
EP 12
DI 10.1016/j.scico.2017.04.006
PG 12
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA EY9KG
UT WOS:000404316900001
DA 2024-07-18
ER

PT J
AU Zhang, Z
   Serwe, W
   Wu, J
   Yoneda, T
   Zheng, H
   Myers, C
AF Zhang, Zhen
   Serwe, Wendelin
   Wu, Jian
   Yoneda, Tomohiro
   Zheng, Hao
   Myers, Chris
TI An improved fault-tolerant routing algorithm for a Network-on-Chip
   derived with formal analysis
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Fault-tolerant routing; Formal methods; Model checking; Network-on-chip;
   Process calculus
ID VERIFICATION; SPECIFICATIONS; ARCHITECTURE; PROTOCOL; MESHES; MODEL
AB A fault-tolerant routing algorithm in Network-on-Chip (NoC) architectures provides adaptivity for on-chip communications. Adding fault-tolerance adaptivity to a routing algorithm increases its design complexity and makes it prone to deadlock and other problems if improperly implemented. Formal verification techniques are needed to check the correctness of the design. This paper describes the discovery of a potential livelock problem through formal analysis on an extension of the link-fault tolerant NoC architecture introduced by Wu et al. In the process of eliminating this problem, an improved routing architecture is derived. The improvement simplifies the routing architecture, enabling successful verification using the CADP verification toolbox. The routing algorithm is proven to have several desirable properties including deadlock and livelock freedom, and tolerance to a single-link-fault. (C) 2016 Elsevier B.V. All rights reserved.
C1 [Zhang, Zhen; Myers, Chris] Univ Utah, Dept Elect & Comp Engn, Salt Lake City, UT 84112 USA.
   [Serwe, Wendelin] Inria, Rocquencourt, France.
   [Serwe, Wendelin] Univ Grenoble Alpes, LIG, F-38000 Grenoble, France.
   [Serwe, Wendelin] CNRS, LIG, F-38000 Grenoble, France.
   [Wu, Jian] Toshiba Amer Elect Components Inc, San Jose, CA USA.
   [Yoneda, Tomohiro] Natl Inst Informat, Tokyo, Japan.
   [Zheng, Hao] Univ S Florida, Dept Comp Sci & Engn, Tampa, FL USA.
C3 Utah System of Higher Education; University of Utah; Inria; Communaute
   Universite Grenoble Alpes; Institut National Polytechnique de Grenoble;
   Universite Grenoble Alpes (UGA); Centre National de la Recherche
   Scientifique (CNRS); Communaute Universite Grenoble Alpes; Institut
   National Polytechnique de Grenoble; Universite Grenoble Alpes (UGA);
   Centre National de la Recherche Scientifique (CNRS); Toshiba
   Corporation; Research Organization of Information & Systems (ROIS);
   National Institute of Informatics (NII) - Japan; State University System
   of Florida; University of South Florida
RP Zhang, Z (corresponding author), Univ Utah, Dept Elect & Comp Engn, Salt Lake City, UT 84112 USA.
EM zhen.zhang@utah.edu; Wendelin.Serwe@inria.tr; bjwujian@gmail.com;
   yoneda@nii.ac.jp; zheng@cse.usf.edu; myers@ece.utah.edu
RI Zhang, Zhen/AAX-2544-2021
OI Zhang, Zhen/0000-0002-8269-9489; /0000-0002-8762-8444
FU National Science Foundation [CNS-0930510, CNS-0930225]; CNRS; RENATER;
   Inria
FX This material is based upon work supported by the National Science
   Foundation under grants CNS-0930510 and CNS-0930225. Any opinions,
   findings, and conclusions or recommendations expressed in this material
   are those of the author(s) and do not necessarily reflect the views of
   the National Science Foundation. Part of this work was performed during
   a visit of the first author at the Inria Grenoble-Rhone-Alpes research
   centre. A subset of the experiments presented in this paper were carried
   out using the Grid'5000 testbed, supported by a scientific interest
   group hosted by Inria and including CNRS, RENATER and several
   Universities as well as other organizations (see
   https://www.grid5000.fi).
CR Alhussien A., 2013, Journal of Integrated Circuits and Systems, V8, P43
   Beigné E, 2005, INT SYMP ASYNCHRON C, P54, DOI 10.1109/ASYNC.2005.10
   Bolotin E, 2004, J SYST ARCHITECT, V50, P105, DOI 10.1016/j.sysarc.2003.07.004
   BOPPANA RV, 1995, IEEE T COMPUT, V44, P848, DOI 10.1109/12.392844
   Borrione D, 2006, INT FED INFO PROC, V200, P85
   Borrione D, 2009, EURASIP J EMBED SYST, DOI 10.1155/2009/548324
   Casado R, 2001, IEEE T PARALL DISTR, V12, P115, DOI 10.1109/71.910868
   Champelovier D., 2015, REFERENCE MANUAL LNT
   Chen KH, 1998, J INF SCI ENG, V14, P765
   Chiu GM, 2000, IEEE T PARALL DISTR, V11, P729, DOI 10.1109/71.877831
   Crouzen P, 2011, LECT NOTES COMPUT SC, V6603, P111, DOI 10.1007/978-3-642-19811-3_9
   Duato J, 1997, IEEE T PARALL DISTR, V8, P790, DOI 10.1109/71.605766
   Fick D, 2009, DES AUT TEST EUROPE, P21
   Garavel H, 2001, INT FED INFO PROC, V69, P377, DOI 10.1007/0-306-47003-9_24
   Garavel H, 2015, ACTA INFORM, V52, P337, DOI 10.1007/s00236-015-0226-1
   Garavel H, 2009, SCI COMPUT PROGRAM, V74, P100, DOI 10.1016/j.scico.2008.09.011
   Glass C. J., 1993, Digest of Papers FTCS-23 The Twenty-Third International Symposium on Fault-Tolerant Computing, P240, DOI 10.1109/FTCS.1993.627327
   Goossens K, 2005, IEEE DES TEST COMPUT, V22, P414, DOI 10.1109/MDT.2005.99
   Graravel H, 2013, SOFTWARE TOOLS TECHN, V15, P89
   Helmy A, 2010, IEEE INT SYMP DESIGN, P221, DOI 10.1109/DDECS.2010.5491781
   Imai M, 2011, INT SYMP ASYNCHRON C, P65, DOI 10.1109/ASYNC.2011.15
   Iugan L.G., ELECT COMMUNICATIONS, V21
   Lee IG, 2005, 7TH INTERNATIONAL CONFERENCE ON ADVANCED COMMUNICATION TECHNOLOGY, VOLS 1 AND 2, PROCEEDINGS, P1180, DOI 10.1109/ICACT.2005.246172
   Mateescu Radu, 2011, Model Checking Software. Proceedings 18th International SPIN Workshop, P2, DOI 10.1007/978-3-642-22306-8_2
   Mateescu R, 2008, LECT NOTES COMPUT SC, V5014, P148, DOI 10.1007/978-3-540-68237-0_12
   Moraes F, 2004, INTEGRATION, V38, P69, DOI 10.1016/j.vlsi.2004.03.003
   Nordbotten NA, 2004, LECT NOTES COMPUT SC, V3222, P341
   Palaniveloo VA, 2011, IEEE COMP SOC ANN, P162, DOI 10.1109/ISVLSI.2011.57
   Salaün G, 2007, INT SYMP ASYNCHRON C, P73
   Schönwald T, 2007, DSD 2007: 10TH EUROMICRO CONFERENCE ON DIGITAL SYSTEM DESIGN ARCHITECTURES, METHODS AND TOOLS, PROCEEDINGS, P527, DOI 10.1109/DSD.2007.4341518
   van Glabbeek R.J., 1989, R8911 CS CWI
   van Glabbeek R, 2009, FUND INFORM, V93, P371, DOI 10.3233/FI-2009-109
   Verbeek F., 2011, Networks on Chip (NoCS), 2011 Fifth IEEE/ACM International Symposium on, P25
   Verbeek F, 2014, IEEE T PARALL DISTR, V25, P1935, DOI 10.1109/TPDS.2013.121
   Verbeek F, 2012, ACM T DES AUTOMAT EL, V17, DOI 10.1145/2071356.2071357
   Verbeek F, 2011, IEEE T PARALL DISTR, V22, P2022, DOI 10.1109/TPDS.2011.60
   Wu J, 2003, IEEE T COMPUT, V52, P1154, DOI 10.1109/TC.2003.1228511
   Wu J., 2011, VIRTUAL WORLDWIDE FO
   Ye TT, 2004, J SYST ARCHITECT, V50, P81, DOI 10.1016/j.sysarc.2003.07.005
   Yean-Ru Chen, 2010, 2010 International Conference on Green Circuits and Systems (ICGCS 2010), P299, DOI 10.1109/ICGCS.2010.5543050
   Zhang Z., 2014, LECT NOTES COMPUT SC, V8718
   Zhou J., 2001, Proceedings of the 15th International Parallel Distributed Processing Symposium (IPDPS-01), San Francisco, CA, April 23-27, 2001, P56
NR 42
TC 8
Z9 11
U1 0
U2 4
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR 1
PY 2016
VL 118
BP 24
EP 39
DI 10.1016/j.scico.2016.01.002
PG 16
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DX8JP
UT WOS:000384634200003
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Le, TTH
   Passerone, R
   Fahrenberg, U
   Legay, A
AF Thi Thieu Hoa Le
   Passerone, Roberto
   Fahrenberg, Uli
   Legay, Axel
TI A tag contract framework for modeling heterogeneous systems
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Contract; Heterogeneity; Tag; Synthesis; Component model
AB Development of distributed systems can be supported effectively by a contract-based methodology as contracts can ensure interoperability of components and adherence to specifications. Such development can become very complex since distributed systems can consist of components which are heterogeneous in terms of computational and interactive model. Several frameworks, both operational and denotational, have been proposed to handle heterogeneity using a variety of approaches. However, the application of those frameworks to contract-based design has not yet been investigated. In this work, we adopt the operational mechanism of tag machines to represent heterogeneous systems and construct a full contract model. We introduce heterogeneous composition, refinement, dominance and compatibility between contracts, altogether enabling a formalized and rigorous design process for heterogeneous systems. Besides, we also develop a method to synthesize or refine the component models so that their composition satisfies a given contract. (C) 2015 Elsevier B.V. All rights reserved.
C1 [Thi Thieu Hoa Le; Passerone, Roberto] Univ Trento, DISI, Trento, Italy.
   [Fahrenberg, Uli; Legay, Axel] INRIA IRISA, Rennes, France.
C3 University of Trento; Universite de Rennes
RP Le, TTH (corresponding author), Univ Trento, DISI, Trento, Italy.
EM lethithieuhoa@gmail.com
RI Passerone, Roberto/B-5272-2015
CR Arbab F, 2003, LECT NOTES COMPUT SC, V2755, P34
   Bauer SS, 2012, LECT NOTES COMPUT SC, V7212, P43, DOI 10.1007/978-3-642-28872-2_3
   Benveniste A., 2005, EMSOFT, P255
   Benveniste A, 2008, ACM T EMBED COMPUT S, V7, DOI 10.1145/1376804.1376811
   Benveniste A, 2008, LECT NOTES COMPUT SC, V5382, P200, DOI 10.1007/978-3-540-92188-2_9
   Benvenuti Luca, 2008, 2008 Forum on Specification, Verification & Design Languages (FDL), P142, DOI 10.1109/FDL.2008.4641436
   Bliudze S, 2008, IEEE T COMPUT, V57, P1315, DOI 10.1109/TC.2008.26
   Chatterjee K, 2007, LECT NOTES COMPUT SC, V4424, P261
   Damm W, 2011, DES AUT TEST EUROPE, P1023
   Davare A, 2013, ACM T EMBED COMPUT S, V12, DOI 10.1145/2435227.2435245
   de Alfaro L., 2001, Software Engineering Notes, V26, P109, DOI 10.1145/503271.503226
   de Roever William P., 1985, P IFIP WORK C ROL AB
   Dey S, 2011, IEEE EMBED SYST LETT, V3, P28, DOI 10.1109/LES.2010.2098846
   Dey S, 2010, IEEE T COMPUT AID D, V29, P1028, DOI 10.1109/TCAD.2010.2049067
   Dijkstra E. W., 1975, LECT NOTES COMPUTER, V46, P111, DOI [10.1007/3-540-07994, DOI 10.1007/3-540-07994]
   Eker J, 2003, P IEEE, V91, P127, DOI 10.1109/JPROC.2002.805829
   Fahrenberg U., 2011, P 14 INT C MOD DRIV, P490
   Guo L., 2014, P INT C HARDW SOFTW, P24
   LAMPORT L, 1990, ACM T PROGR LANG SYS, V12, P396, DOI 10.1145/78969.78970
   LE TTH, 2013, CCIS, V393, P204
   Lee EA, 1998, IEEE T COMPUT AID D, V17, P1217, DOI 10.1109/43.736561
   Lin SW, 2011, IEEE T COMPUT, V60, P734, DOI 10.1109/TC.2010.94
   Liu XJ, 2001, IEEE SYMPOSIA ON HUMAN-CENTRIC COMPUTING LANGUAGES AND ENVIRONMENTS, PROCEEDINGS, P50
   Lopez Martinez Patricia, 2012, Reliable Software Technologies - Ada-Europe 2012. Proceedings 17th Ada-Europe International Conference on Reliable Software Technologies, P89, DOI 10.1007/978-3-642-30598-6_7
   MEYER B, 1992, COMPUTER, V25, P40, DOI 10.1109/2.161279
   Passerone R, 2007, FORM METHOD SYST DES, V31, P1, DOI 10.1007/s10703-006-0024-z
   Raclet JB, 2011, FUND INFORM, V108, P119, DOI 10.3233/FI-2011-416
   Le TTH, 2013, INT CONF APPL CONCUR, P186, DOI 10.1109/ACSD.2013.23
NR 28
TC 4
Z9 4
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN-FEB
PY 2016
VL 115
SI SI
BP 225
EP 246
DI 10.1016/j.scico.2015.06.004
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CZ5DH
UT WOS:000367122200012
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Marcozzi, M
   Vanhoof, W
   Hainaut, JL
AF Marcozzi, Michael
   Vanhoof, Wim
   Hainaut, Jean-Luc
TI Relational symbolic execution of SQL code for unit testing of database
   programs
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Software testing; Symbolic execution; Satisfiability modulo theories
   (SMT); Database; Structured query language (SQL)
ID COVERAGE; SYSTEMS
AB Symbolic execution is a technique enabling the automatic generation of test inputs that exercise a set of execution paths within a code unit to be tested. If the paths cover a sufficient part of the code under test, the test data offer a representative view of the actual behaviour of this code. This notably enables detecting errors and correcting faults. Relational databases are ubiquitous in software, but symbolic execution of code units that manipulate them remains a non-trivial problem, particularly because of the complex structure of such databases and the complex behaviour of SQL statements. Finding errors in such code units is yet critical, as it can avoid corrupting important data. In this work, we define a symbolic execution translating database manipulation code directly into constraints and integrate it with a more traditional symbolic execution of normal program code. The database tables are represented by relational symbols and the SQL statements by relational constraints over these symbols. An algorithm based on these principles is presented for the symbolic execution of simple Java methods that implement transactional use cases by reading and writing in a relational database, the latter subject to data integrity constraints. The algorithm is integrated in a test generation tool and experimented over sample code. The target language for the constraints produced by the tool is the SMT-Lib standard and the used solver is Microsoft Z3. The results show that the proposed approach enables generating meaningful test data, including valid database content, in reasonable time. In particular, the Z3 solver is shown to be more scalable than the Alloy solver, used in our previous work, for solving relational constraints. (C) 2015 Elsevier B.V. All rights reserved.
C1 [Marcozzi, Michael; Vanhoof, Wim; Hainaut, Jean-Luc] Univ Namur, Fac Comp Sci, B-5000 Namur, Belgium.
C3 University of Namur
RP Marcozzi, M (corresponding author), Univ Namur, Fac Comp Sci, Rue Grandgagnage 21, B-5000 Namur, Belgium.
EM michael.marcozzi@unamur.be; wim.vanhoof@unamur.be;
   jean-luc.hainaut@unamur.be
OI Vanhoof, Wim/0000-0003-3769-6294
FU Belgian National Fund for Scientific Research (F.R.S.-FNRS) [FC88490]
FX This work has been funded by the Belgian National Fund for Scientific
   Research (F.R.S.-FNRS) under grant number FC88490. The authors would
   like to thank P.-Y. Schobbens, V. Englebert and G. Perrouin for useful
   discussions, C. Aerts for test hardware availability and the anonymous
   referees for their constructive remarks both on current and earlier
   versions of this paper.
CR Abiteboul S, 1995, FDN DATABASES
   [Anonymous], 2006, P 13 ACM C COMP COMM
   [Anonymous], TESTING COMPUTER SOF
   [Anonymous], 1993, Partial Evaluation and Automatic Program Generation
   [Anonymous], 2007, P INT C DAT ENG, DOI DOI 10.1109/ICDE.2007.367896
   Appelt Dennis, 2014, P 2014 INT S SOFTWAR, P259
   Barrett Clark, 2010, P 8 INT WORKSH SAT M
   Bettini C, 2002, ARTIF INTELL, V140, P107, DOI 10.1016/S0004-3702(02)00223-0
   Binnig C., 2008, P 1 INT WORKSH TEST
   Binnig C., 2006, Proceedings of the 2006 ACM SIGMOD international conference on Management of data, P739, DOI DOI 10.1145/1142473.1142572
   Binnig Carsten, 2007, P ACM SIGMOD INT C M, P341, DOI DOI 10.1145/1247480.1247520
   Bubei R, 2010, LECT NOTES COMPUT SC, V6286, P125
   Burnim Jacob, 2008, 2008 23rd IEEE/ACM International Conference on Automated Software Engineering, P443, DOI 10.1109/ASE.2008.69
   Cadar C, 2005, LECT NOTES COMPUT SC, V3639, P2
   Cadar C., 2008, Proceedings of the 8th USENIX conference on Operating systems design and implementation, OSDI'08, (USA), P209
   Cadar C, 2013, COMMUN ACM, V56, P82, DOI 10.1145/2408776.2408795
   Cadar C, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P1066, DOI 10.1145/1985793.1985995
   Chan M.Y., 1999, Proceedings of the 2nd International Symposium on Cooperative Database Systems for Advanced Applications, P363
   Chays D, 2004, SOFTW TEST VERIF REL, V14, P17, DOI 10.1002/stvr.286
   Chipounov V, 2012, ACM T COMPUT SYST, V30, DOI 10.1145/2110356.2110358
   Connolly T., 2005, INT COMPUTER SCI SER, V1
   COWARD PD, 1988, SOFTWARE ENG J, V3, P229, DOI 10.1049/sej.1988.0029
   DATE C.J., 2003, An Introduction to Database Systems, Veight
   de la Riva C., 2010, AST, P67
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   de Moura L, 2007, LECT NOTES ARTIF INT, V4603, P183
   Deng YT, 2005, PROC INT CONF SOFTW, P78, DOI 10.1145/1062455.1062486
   Dutertre B, 2006, LECT NOTES COMPUT SC, V4144, P81, DOI 10.1007/11817963_11
   Edvardsson Jon., 1999, Proceedings of the 2nd Conference on Computer Science and Engineering, P21
   El Ghazi Aboubakr Achraf, 2011, FM 2011: Formal Methods. Proceedings 17th International Symposium on Formal Methods, P133, DOI 10.1007/978-3-642-21437-0_12
   Emmi M., 2007, Proceedings of the 2007 international symposium on Software testing and analysis, P151
   Fu X, 2010, ELECTRON PROC THEOR, P39, DOI 10.4204/EPTCS.35.4
   Ge YT, 2009, LECT NOTES COMPUT SC, V5643, P306
   Godefroid P, 2005, ACM SIGPLAN NOTICES, V40, P213, DOI 10.1145/1064978.1065036
   Godefroid P., 2012, ACM QUEUE, V10, P20
   Godefroid P, 2011, ACM SIGPLAN NOTICES, V46, P258, DOI 10.1145/1993316.1993529
   Halfond WGJ, 2006, IEEE INT CONF AUTOM, P69
   Halfond William G. J., 2006, P 14 ACM SIGSOFT INT, P175, DOI [10.1145/1181775.1181797, DOI 10.1145/1181775.1181797]
   HOWDEN WE, 1975, IEEE T COMPUT, VC 24, P554, DOI 10.1109/T-C.1975.224259
   ISO, 2011, 90752011 ISO ISOIEC
   Jackson Daniel, 2006, Software abstractions: Logic, language, and analysis
   Jorgensen P., 2008, Software Testing: A Craftsman's Approach, VThird
   Suárez-Cabal MJ, 2009, J UNIVERS COMPUT SCI, V15, P584
   Jovanovic Dejan, 2012, Automated Reasoning. Proceedings 6th International Joint Conference, IJCAR 2012, P339, DOI 10.1007/978-3-642-31365-3_27
   Kapfhammer G. M., 2003, Software Engineering Notes, V28, P98, DOI 10.1145/949952.940086
   Khalek Shadi Abdul, 2008, 2008 23rd IEEE/ACM International Conference on Automated Software Engineering, P238, DOI 10.1109/ASE.2008.34
   KING JC, 1976, COMMUN ACM, V19, P385, DOI 10.1145/360248.360252
   Li C., 2010, P 3 INT WORKSH TEST
   Liang TY, 2014, LECT NOTES COMPUT SC, V8559, P646, DOI 10.1007/978-3-319-08867-9_43
   Lyons N. R., 1977, Data Base, V8, P10, DOI 10.1145/1017601.1017603
   Marcozzi M., 2012, P 5 INT WORKSH TEST, P6
   Marcozzi M, 2013, IEEE INT WORK C SO, P179, DOI 10.1109/SCAM.2013.6648200
   Pan K., 2011, P 26 IEEE ACM INT C
   Pan K, 2014, ACM T SOFTW ENG METH, V23, DOI 10.1145/2491529
   Pan K, 2013, 2013 8TH INTERNATIONAL WORKSHOP ON AUTOMATION OF SOFTWARE TEST (AST), P111, DOI 10.1109/IWAST.2013.6595801
   Pasareanu Corina S., 2009, International Journal on Software Tools for Technology Transfer, V11, P339, DOI 10.1007/s10009-009-0118-1
   Pasareanu Corina S., 2008, P 2008 INT S SOFTW T, P15, DOI [DOI 10.1145/1390630.1390635, DOI 10.1145/1390630]
   Ramler R., 2006, P 2006 INT WORKSHOP, P85, DOI DOI 10.1145/1138929.1138946
   Reuter A, 1992, T PROCESSING CONCEPT
   Robbert M., 1991, SIGSMALL PC NOTES, V17, P29
   Schwartz EJ, 2010, P IEEE S SECUR PRIV, P317, DOI 10.1109/SP.2010.26
   Sen K., 2005, P 10 EUR SOFTW ENG C, V30, P263, DOI DOI 10.1145/1081706.1081750
   Sen K, 2006, LECT NOTES COMPUT SC, V4144, P419
   Su ZD, 2006, ACM SIGPLAN NOTICES, V41, P372, DOI 10.1145/1111320.1111070
   Suarez-Cabal M. J., 2004, Software Engineering Notes, V29, P253, DOI 10.1145/1041685.1029929
   Tillmann N, 2008, LECT NOTES COMPUT SC, V4966, P134
   Tuya J., 2006, P 2 WORKSH MUT AN MU, P1, DOI DOI 10.1109/MUTATION.2006.13
   Tuya J, 2010, SOFTW TEST VERIF REL, V20, P237, DOI 10.1002/stvr.424
   Veanes M, 2010, LECT NOTES ARTIF INT, V6355, P425, DOI 10.1007/978-3-642-17511-4_24
   Veanes M, 2009, LECT NOTES COMPUT SC, V5885, P49, DOI 10.1007/978-3-642-10373-5_3
   Willmor D., 2006, 28th International Conference on Software Engineering Proceedings, P102, DOI 10.1145/1134285.1134301
   Zhang B, 2001, P INT COMP SOFTW APP, P161, DOI 10.1109/CMPSAC.2001.960612
   Zheng Yunhui, 2013, P 9 JOINT M FDN SOFT, P114, DOI [10.1145/2491411.2491456, DOI 10.1145/2491411.2491456]
   Zhou CX, 2009, SECOND INTERNATIONAL CONFERENCE ON SOFTWARE TESTING, VERIFICATION, AND VALIDATION, PROCEEDINGS, P396, DOI 10.1109/ICST.2009.43
   Zhu H, 1997, ACM COMPUT SURV, V29, P366, DOI 10.1145/267580.267590
NR 75
TC 5
Z9 5
U1 2
U2 12
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUL 1
PY 2015
VL 105
BP 44
EP 72
DI 10.1016/j.scico.2015.03.005
PG 29
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CK4MT
UT WOS:000356198600004
OA Bronze
DA 2024-07-18
ER

PT J
AU Khamespanah, E
   Sirjani, M
   Kaviani, ZS
   Khosravi, R
   Izadi, MJ
AF Khamespanah, Ehsan
   Sirjani, Marjan
   Kaviani, Zeynab Sabahi
   Khosravi, Ramtin
   Izadi, Mohammad-Javad
TI Timed Rebeca schedulability and deadlock freedom analysis using bounded
   floating time transition system
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Actor model; Timed Rebeca; Verification; Realtime systems;
   Schedulability and deadlock freedom
ID PARTIAL ORDER REDUCTION; REAL-TIME; MODEL-CHECKING; VERIFICATION;
   SPECIFICATION; SIMULATION; MAUDE
AB Timed Rebeca is an extension of the actor-based modeling language Rebeca that supports timing features. Rebeca is purely actor-based with no shared variables and asynchronous message passing with no explicit receive. Both computation time and network delays can be modeled in Timed Rebeca. In this paper, we propose a new approach for checking schedulability and deadlock freedom of Timed Rebeca models. The key features of Timed Rebeca, asynchrony of actors and absence of shared variables, and the focus on events instead of states in the selected properties, led us to a significant reduction in the state space. In the proposed method, there is no unique time value for each state, instead of that we store the local time of each actor separately. We prove the bisimilarity of the generated transition system, called floating time transition system, and the state space generated from the original semantics of Timed Rebeca. In addition, to avoid state space explosion because of time progress, we define a type of equivalency among states called shift equivalency. The shift equivalence relation between states can be used for Timed Rebeca as the timing features are based on relative values. We developed a tool, and the experimental results show that our approach mitigates the state space explosion problem of the former methods and allows model checking of larger systems. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Khamespanah, Ehsan; Kaviani, Zeynab Sabahi; Khosravi, Ramtin; Izadi, Mohammad-Javad] Univ Tehran, Sch Elect & Comp Engn, Tehran 14174, Iran.
   [Sirjani, Marjan] Reykjavik Univ, Sch Comp Sci, Reykjavik, Iceland.
C3 University of Tehran; Reykjavik University
RP Khamespanah, E (corresponding author), Univ Tehran, Sch Elect & Comp Engn, Tehran 14174, Iran.
EM e.khamespanah@ut.ac.ir; marjan@ru.is; z.sabahi@ece.ut.ac.ir;
   r.khosravi@ut.ac.ir; m.j.izadi@ece.ut.ac.ir
FU project "Timed Asynchronous Reactive Objects in Distributed Systems:
   TARO" of the Icelandic Research Fund [110020021]
FX The work on this paper has been partially supported by the project
   "Timed Asynchronous Reactive Objects in Distributed Systems: TARO" (nr.
   110020021) of the Icelandic Research Fund.
CR Aceto L, 2011, ELECTRON P THEOR COM, P1, DOI 10.4204/EPTCS.58.1
   Agha G.A., 1990, ACTORS-a model of concurrent computation in distributed systems
   ALUR R, 1994, THEOR COMPUT SCI, V126, P183, DOI 10.1016/0304-3975(94)90010-8
   Alur R., 1990, Proceedings. Fifth Annual IEEE Symposium on Logic in Computer Science (90CH2897-7), P414, DOI 10.1109/LICS.1990.113766
   [Anonymous], 1992, TEMPORAL LOGIC REACT, DOI DOI 10.1007/978-1-4612-0931-7
   [Anonymous], P AFIPS 70 FALL P FA, DOI [10.1145/1478462.1478502, DOI 10.1145/1478462.1478502]
   [Anonymous], HOPL
   Baier C, 2008, PRINCIPLES OF MODEL CHECKING, P1
   Behrmann G, 2004, LECT NOTES COMPUT SC, V3185, P200
   Bengtsson J., 1996, Hybrid Systems III. Verification and Control, P232, DOI 10.1007/BFb0020949
   Bengtsson J., 1996, Computer Aided Verification. 8th International Conference, CAV '96. Proceedings, P244
   Bengtsson J, 1998, LECT NOTES COMPUT SC, V1466, P485, DOI 10.1007/BFb0055643
   Bozga M, 1998, LECT NOTES COMPUT SC, V1427, P546, DOI 10.1007/BFb0028779
   Bozga M, 1999, LECT NOTES COMPUT SC, V1703, P125
   Clavel M, 2002, THEOR COMPUT SCI, V285, P187, DOI 10.1016/S0304-3975(01)00359-0
   Daws C, 1995, IEEE REAL TIME, P66, DOI 10.1109/REAL.1995.495197
   Earle Clara Benac, 2012, Formal Techniques for Distributed Systems. Joint 14th IFIP WG 6.1 International Conference, FMOODS 2012 and 32nd IFIP WG 6.1 International Conference, FORTE 2012, P251, DOI 10.1007/978-3-642-30793-5_16
   Fredlund LÅ, 2007, ACM SIGPLAN NOTICES, V42, P125, DOI 10.1145/1291220.1291171
   Håkansson J, 2007, LECT NOTES COMPUT SC, V4763, P211
   HEWITT C, 1972, THESIS MIT CAMBRIDGE
   Ibarra OH, 2001, LECT NOTES COMPUT SC, V2088, P157
   Izadi M.J., 2010, THESIS U TEHRAN IRAN
   Jaghoori M. M., 2006, Applied Computing 2006. 21st Annual ACM Symposium on Applied Computing, P1810, DOI 10.1145/1141277.1141704
   Jaghoori MM, 2010, ACTA INFORM, V47, P33, DOI 10.1007/s00236-009-0111-x
   Jaghoori MM, 2009, J LOGIC ALGEBR PROGR, V78, P402, DOI 10.1016/j.jlap.2009.02.009
   Jaghoori Mohammad Mahdi, 2007, 19 NORD WORKSH PROGR, P16
   Khamespanah E., 2012, P 2 ED PROGR SYST LA, P23
   KOYMANS R, 1990, REAL-TIME SYST, V2, P255, DOI 10.1007/BF01995674
   Kristinsson H., 2012, THESIS REYKJAVIK U I
   Kristinsson Haukur, 2013, AGEREI SPLASH, P25
   Lamport L, 2005, LECT NOTES COMPUT SC, V3725, P162
   Lamport L., 2002, SPECIFYING SYSTEMS T
   Lamport Leslie., 2002, EW10 P 10 WORKSHOP A, P45, DOI DOI 10.1145/1133373.1133382
   Larsen K. G., 1996, Hybrid Systems III. Verification and Control, P575
   Lepri Daniela, 2012, Rewriting Logic and Its Applications. 9th International Workshop, WRLA 2012. Held as a Satellite Event of ETAPS. Revised Selected Papers, P182, DOI 10.1007/978-3-642-34005-5_10
   Lindahl Magnus, 2001, International Journal on Software Tools for Technology Transfer, V3, P353, DOI [10.1007/s100090100048, DOI 10.1007/S100090100048]
   Linderman Lauren, 2012, STRUCTURAL CONTROL H
   Magnusson B., 2012, THESIS REYKJAVIK U I
   Minea M, 1999, LECT NOTES COMPUT SC, V1664, P431
   Ölveczky PC, 2005, ELECTRON NOTES THEOR, V117, P285, DOI 10.1016/j.entcs.2004.06.015
   Olveczky P. C., 2007, Higher-Order and Symbolic Computation, V20, P161, DOI 10.1007/s10990-007-9001-5
   Olveczky P C., 2000, Proceedings of 3rd International Workshop on Rewriting Logic and its Applications (WRLA'00), V36, P361
   Ölveczky PC, 2004, LECT NOTES COMPUT SC, V2984, P354
   Ölveczky PC, 2002, THEOR COMPUT SCI, V285, P359, DOI 10.1016/S0304-3975(01)00363-2
   Razavi N, 2010, ACM T EMBED COMPUT S, V10, DOI 10.1145/1880050.1880055
   REN SP, 1995, SIGPLAN NOTICES, V30, P50, DOI 10.1145/216633.216656
   Reynisson AH, 2014, SCI COMPUT PROGRAM, V89, P41, DOI 10.1016/j.scico.2014.01.008
   Sabahi-Kaviani Zeynab, 2013, COMMUN COMPUT INF SC, V419, P178
   Sabouri Hamideh, 2008, ENTCS
   Sigurdarson Steinar Hugi, 2012, LECT NOTES COMPUTER, V7684, P242
   Sirjani M, 2005, J UNIVERS COMPUT SCI, V11, P1695
   Sirjani M, 2004, FUND INFORM, V63, P385
   Sirjani M, 2011, LECT NOTES COMPUT SC, V7000, P20, DOI 10.1007/978-3-642-24933-4_3
   YI W, 1991, LECT NOTES COMPUT SC, V510, P217
   Yu Y, 1999, LECT NOTES COMPUT SC, V1703, P54
NR 55
TC 25
Z9 26
U1 0
U2 5
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 1
PY 2015
VL 98
SI SI
BP 184
EP 204
DI 10.1016/j.scico.2014.07.005
PN 2
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AY7LF
UT WOS:000347741000005
DA 2024-07-18
ER

PT J
AU Liberman, S
   Lempel, R
AF Liberman, Sonya
   Lempel, Ronny
TI Approximately optimal facet value selection
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Search engines; Multifaceted search; Facet value selection
AB Multifaceted search is a popular interaction paradigm for discovery and mining applications that allows users to digest, analyze and navigate through multidimensional data. A crucial aspect of faceted search applications is selecting the list of facet values to display to the user following each query. We call this the facet value selection problem.
   When refining a query by drilling down into a facet value, documents that are associated with that facet value are promoted in the rankings. We formulate facet value selection as an optimization problem aiming to maximize the rank promotion of certain documents. As the optimization problem is NP-Hard, we propose an approximation algorithm for selecting an approximately optimal set of facet values per query.
   We conducted experiments over hundreds of queries and search results of a large commercial search engine, comparing two flavors of our algorithm to facet value selection algorithms appearing in the literature. The results show that our algorithm significantly outperforms those baseline schemes. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Liberman, Sonya] CONTEXTin, IL-46725 Herzliya Pituach, Israel.
   [Lempel, Ronny] Yahoo Labs, IL-31905 Haifa, Israel.
C3 Yahoo! Inc; Yahoo! Inc Israel
RP Lempel, R (corresponding author), Yahoo Labs, IL-31905 Haifa, Israel.
EM sonya_lib@yahoo.com; rlempel@yahoo-inc.com
CR Anick P., 2003, US Patent, Patent No. 6519586
   Arentz WA, 2004, LECT NOTES COMPUT SC, V3213, P620
   Baeza-Yates Ricardo, 1999, MODERN INFORM RETRIE, V463
   Ben-Yitzhak O., 2008, P INT C WEB SEARCH W, P33, DOI DOI 10.1145/1341531.1341539
   Broder Andrei, 2007, 30th Annual International ACM SIGIR Conference on Research and Development in Information Retrieval, P559, DOI 10.1145/1277741.1277837
   Brusilovsky P, 2001, USER MODEL USER-ADAP, V11, P87, DOI 10.1023/A:1011143116306
   Chakrabarti D., 2009, P 18 INT C WORLD WID, P391, DOI DOI 10.1145/1526709.1526762
   CHERNOFF H, 1954, ANN MATH STAT, V25, P579, DOI 10.1214/aoms/1177728726
   Dakka W., 2006, SIGIR FAC SEARCH WOR, P18
   Dakka W., 2005, CIKM, P768, DOI DOI 10.1145/1099554.1099738
   Debabrata D., 2008, CIKM, P3
   Efthimiadis EN, 1996, ANNU REV INFORM SCI, V31, P121
   Feinstein D., 2006, SIGIR 2006 Workshop on Faceted Search, P23
   Fuhr N, 2008, INFORM RETRIEVAL, V11, P251, DOI 10.1007/s10791-008-9045-0
   Garey M.R., 1979, COMPUTERS INTRACTABI
   Hearst MartiA., 2006, Proc. SIGIR Workshop on Faceted Search, P26
   Kohlschutter Christian, 2006, SIGIR 2006 WORKSH FA, P55
   Koren Jonathan, 2008, P 17 INT C WORLD WID, P477, DOI DOI 10.1145/1367497.1367562
   KRELLENSTEIN MF, 1999, Patent No. 5924090
   KULES WM, 2006, THESIS U MARYLAND CO
   Liberman S., 2012, Proceedings of the 27th Annual ACM Symposium on Applied Computing, P702
   Meredith D.N., 2006, SIGIR2006 WORKSH FAC, P8
   Nemhauser G. L., 1978, Mathematics of Operations Research, V3, P177, DOI 10.1287/moor.3.3.177
   NEMHAUSER GL, 1978, MATH PROGRAM, V14, P265, DOI 10.1007/BF01588971
   Radlinski F., 2008, P ACM C INF KNOWL MA
   Schneiderman B., 2000, P 5 ACM C DIG LIB, P57
   Shen R, 2006, Opening Information Horizons, P1
   Stoica E., 2006, P SIGIR 2006 WORKSH, P13
   Zhang J., 2005, P 2005 NATL C DIGITA, P179, DOI DOI 10.1145/1065226.1065279
NR 29
TC 8
Z9 9
U1 0
U2 5
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 15
PY 2014
VL 94
SI SI
BP 18
EP 31
DI 10.1016/j.scico.2013.07.019
PN 1
PG 14
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AS1JU
UT WOS:000344038400003
OA Bronze
DA 2024-07-18
ER

PT J
AU Zhao, L
   Bruni, R
   Liu, ZM
AF Zhao, Liang
   Bruni, Roberto
   Liu, Zhiming
TI A sound and complete theory of graph transformations for service
   programming with sessions and pipelines
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 7th International Workshop on Formal Aspects of Component Software
   (FACS)
CY OCT 14-16, 2010
CL Guimaraes, PORTUGAL
DE Process calculus; Hierarchical graph; Graph transformation
ID CALCULUS; ALGEBRA
AB Graph transformation techniques, the Double-Pushout (DPO) approach in particular, have been successfully applied in the modeling of concurrent systems. In this area, a research thread has addressed the definition of concurrent semantics for process calculi. In this paper, we propose a theory of graph transformations for service programming with sophisticated features such as sessions and pipelines. Through graph representation of CaSPiS, a recently proposed process calculus, we show how graph transformations can cope with advanced features of service-oriented computing, such as several logical notions of scoping together with the interplay between linking and containment. We first exploit a graph algebra and set up a graph model that supports graph transformations in the DPO approach. Then, we show how to represent CaSPiS processes as hierarchical graphs in the graph model and their behaviors as graph transformation rules. Finally, we provide the soundness and completeness results of these rules with respect to the reduction semantics of CaSPiS. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Zhao, Liang] Xidian Univ, Inst Comp Theory & Technol, Xian 710071, Peoples R China.
   [Bruni, Roberto] Univ Pisa, Dept Comp Sci, I-56127 Pisa, Italy.
   [Liu, Zhiming] Birmingham City Univ, Sch Comp Telecommun & Networks, Software Engn Grp, Birmingham B4 7XG, W Midlands, England.
C3 Xidian University; University of Pisa; Birmingham City University
RP Zhao, L (corresponding author), Xidian Univ, Inst Comp Theory & Technol, 2 South Taibai Rd, Xian 710071, Peoples R China.
EM lzhao@xidian.edu.cn; bruni@di.unipi.it; zhiming.liu@bcu.ac.uk
RI Bruni, Roberto/O-8349-2015; BRUNI, ROBERTO/KBB-9626-2024
CR Baldan P., 1999, HDB GRAPH GRAMMARS C, VIII, P107
   BARENDREGT HP, 1987, LECT NOTES COMPUT SC, V259, P141
   Bistarelli S, 1997, J ACM, V44, P201, DOI 10.1145/256303.256306
   Boreale M, 2006, LECT NOTES COMPUT SC, V4184, P38
   Boreale M, 2008, LECT NOTES COMPUT SC, V5051, P19, DOI 10.1007/978-3-540-68863-1_3
   Bruni Roberto, 2012, Formal Aspects of Component Software. 7th International Workshop, FACS 2010. Revised Selected Papers, P259, DOI 10.1007/978-3-642-27269-1_15
   Bruni R., 2005, P DAGST SEM GRAPH TR, P23
   Bruni R., 2010, P GRAMOT 2010 INT C
   Bruni R, 2008, BULL EUR ASSOC THEOR, P161
   Bruni R, 2010, SCI ANN COMPUT SCI, V20, P53
   Bruni R, 2010, LECT NOTES COMPUT SC, V5765, P59, DOI 10.1007/978-3-642-17322-6_4
   Bruni R, 2010, LECT NOTES COMPUT SC, V6084, P205, DOI 10.1007/978-3-642-15640-3_14
   Bruni R, 2009, LECT NOTES COMPUT SC, V5569, P1
   CASTELLANI I, 1983, LECT NOTES COMPUT SC, V153, P20
   Corradini A, 1999, APPL CATEGOR STRUCT, V7, P299, DOI 10.1023/A:1008647417502
   Corradini A., 1997, HDB GRAPH GRAMMARS C, V1, P163, DOI DOI 10.1142/9789812384720
   Decker G, 2006, LECT NOTES COMPUT SC, V4102, P414
   Ferrari GL, 2006, LECT NOTES COMPUT SC, V4111, P22
   Gadducci F, 2003, LECT NOTES COMPUT SC, V2895, P37
   Grohmann D., GRAPH ALGEBRAS BIGRA
   Habel A., 1996, Fundamenta Informaticae, V26, P287
   Hirsch D, 2005, SEFM 2005: Third IEEE International Conference on Software Engineering and Formal Methods, Proceedings, P425, DOI 10.1109/SEFM.2005.40
   HOARE CAR, 1978, COMMUN ACM, V21, P666, DOI 10.1145/359576.359585
   Jensen OH, 2003, ACM SIGPLAN NOTICES, V38, P38, DOI 10.1145/640128.604135
   Lucchi R, 2007, J LOGIC ALGEBR PROGR, V70, P96, DOI 10.1016/j.jlap.2006.05.007
   Milner R., 2001, CONCUR 2001 - Concurrency Theory. 12th International Conference. Proceedings (Lecture Notes in Computer Science Vol.2154), P16
   Milner R., 1989, Communication and concurrency
   MILNER R, 1992, INFORM COMPUT, V100, P1, DOI [10.1016/0890-5401(92)90008-4, 10.1016/0890-5401(92)90009-5]
   Milner R., 2004, LECT NOTES COMPUT SC, V3098, P161
   Misra J, 2007, SOFTW SYST MODEL, V6, P83, DOI 10.1007/s10270-006-0012-1
   PLUMP D., 1999, HDB GRAPH GRAMMARS C, V2, P3, DOI DOI 10.1142/9789812815149_0001
   Reisig W., 2012, Petri nets: an introduction, V4
NR 32
TC 0
Z9 0
U1 0
U2 6
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 15
PY 2014
VL 94
BP 255
EP 288
DI 10.1016/j.scico.2013.11.029
PN 3
PG 34
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA AS1JY
UT WOS:000344038700002
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Moldaschl, M
   Gansterer, WN
AF Moldaschl, Michael
   Gansterer, Wilfried N.
TI Comparison of eigensolvers for symmetric band matrices
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Symmetric banded eigenvalue problem; Tridiagonalization; Subnormal
   numbers; Denormalized numbers
ID EIGENVECTORS
AB We compare different algorithms for computing eigenvalues and eigenvectors of a symmetric band matrix across a wide range of synthetic test problems. Of particular interest is a comparison of state-of-the-art tridiagonalization-based methods as implemented in LAPACK or PLASMA on the one hand, and the block divide-and-conquer (BD&C) algorithm as well as the block twisted factorization (BTF) method on the other hand. The BD&C algorithm does not require tridiagonalization of the original band matrix at all, and the current version of the BTF method tridiagonalizes the original band matrix only for computing the eigenvalues.
   Avoiding the tridiagonalization process sidesteps the cost of backtransformation of the eigenvectors. Beyond that, we discovered another disadvantage of the backtransformation process for band matrices: In several scenarios, a lot of gradual underflow is observed in the (optional) accumulation of the transformation matrix and in the (obligatory) backtransformation step. According to the IEEE 754 standard for floating-point arithmetic, this implies many operations with subnormal (denormalized) numbers, which causes severe slowdowns compared to the other algorithms without backtransformation of the eigenvectors. We illustrate that in these cases the performance of existing methods from LAPACK and PLASMA reaches a competitive level only if subnormal numbers are disabled (and thus the IEEE standard is violated).
   Overall, our performance studies illustrate that if the problem size is large enough relative to the bandwidth, BD&C tends to achieve the highest performance of all methods if the spectrum to be computed is clustered. For test problems with well separated eigenvalues, the BTF method tends to become the fastest algorithm with growing problem size. (C) 2014 The Authors. Published by Elsevier B.V.
C1 [Moldaschl, Michael; Gansterer, Wilfried N.] Univ Vienna, Fac Comp Sci, Vienna, Austria.
C3 University of Vienna
RP Gansterer, WN (corresponding author), Univ Vienna, Fac Comp Sci, Wahringerstr 29, Vienna, Austria.
EM michael.moldaschl@univie.ac.at; wilfried.gansterer@univie.ac.at
RI Gansterer, Wilfried/AAI-2794-2020
FU Austrian Science Fund FWF (NFN SISE) [S10608]
FX This work was partially supported by the Austrian Science Fund FWF:
   project number S10608 (NFN SISE). We would like to thank the anonymous
   referees for their valuable comments which helped us improving the
   manuscript.
CR Anderson E., 1999, LAPACK USERSGUIDE, Vthird
   CUPPEN JJM, 1981, NUMER MATH, V36, P177, DOI 10.1007/BF01396757
   Demmel JW, 2008, SIAM J SCI COMPUT, V30, P1508, DOI 10.1137/070688778
   Dhillon IS, 2004, LINEAR ALGEBRA APPL, V387, P1, DOI 10.1016/j.laa.2003.12.028
   Dooley Isaac, 2006, P WORKSH OP SYST INT
   Gansterer WN, 2003, SIAM J SCI COMPUT, V25, P65, DOI 10.1137/S1064827501399432
   Gansterer WN, 2002, ACM T MATH SOFTWARE, V28, P45, DOI 10.1145/513001.513004
   GOLDBERG D, 1991, COMPUT SURV, V23, P5, DOI 10.1145/103162.103163
   GU M, 1995, SIAM J MATRIX ANAL A, V16, P172, DOI 10.1137/S0895479892241287
   Haidar A., 2011, P 2011 INT C HIGH PE
   Intel Corporation, 2012, INT 64 IA 32 ARCH OP, VA, P3
   Kahan W., 1996, LECT NOT STAT IEEE S
   König G, 2012, J COMPUT APPL MATH, V236, P3696, DOI 10.1016/j.cam.2011.07.010
   Luszczek P., 2011, Proceedings of the 25th IEEE International Parallel & Distributed Processing Symposium (IPDPS 2011), P944, DOI 10.1109/IPDPS.2011.91
   Parlett BeresfordN., 1997, SYMMETRIC EIGENVALUE
   University of Tennessee Knoxville, 2010, PLASMA US GUID PAR L
   Zuras D., 2008, 7542008 IEEE, V754-2008, P1, DOI [DOI 10.1109/IEEESTD.2008.4610935, DOI 10.1109/IEEESTD.2008.5976968]
NR 17
TC 4
Z9 5
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 15
PY 2014
VL 90
SI SI
BP 55
EP 66
DI 10.1016/j.scico.2014.01.005
PN A
PG 12
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AK4II
UT WOS:000338387700006
PM 26594079
OA Green Published, hybrid
DA 2024-07-18
ER

PT J
AU Schrijvers, T
   Demoen, B
   Triska, M
   Desouter, B
AF Schrijvers, Tom
   Demoen, Bart
   Triska, Markus
   Desouter, Benoit
TI TOR: Modular search with hookable disjunction
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Prolog; Tree search; Heuristics; Modularity
ID PROLOG
AB Horn Clause Programs have a natural exhaustive depth-first procedural semantics. However, for many programs this semantics is ineffective. In order to compute useful solutions, one needs the ability to modify the search method that explores the alternative execution branches.
   TOR, a well-defined hook into Prolog disjunction, provides this ability. It is light-weight thanks to its library approach and efficient because it is based on program transformation. TOR is general enough to mimic search-modifying predicates like ECLiPSe's search/6. Moreover, TOR supports modular composition of search methods and other hooks. The TOR library is already provided and used as an add-on to SWI-Prolog. (c) 2013 Elsevier B.V. All rights reserved.
C1 [Schrijvers, Tom; Desouter, Benoit] Univ Ghent, B-9000 Ghent, Belgium.
   [Demoen, Bart] Katholieke Univ Leuven, B-3001 Louvain, Belgium.
   [Triska, Markus] Vienna Univ Technol, A-1040 Vienna, Austria.
C3 Ghent University; KU Leuven; Technische Universitat Wien
RP Schrijvers, T (corresponding author), Univ Ghent, Krijgslaan 281 S9 WE02, B-9000 Ghent, Belgium.
EM tom.schrijvers@ugent.be; Bart.Demoen@cs.kuleuven.be;
   triska@dbai.tuwien.ac.at; Benoit.Desouter@ugent.be
RI Schrijvers, Tom/A-6696-2016
OI Schrijvers, Tom/0000-0001-8771-5559
CR AGGOUN A, 1990, SPLT 90 8 SEM PROGR, P487
   Carlsson M, 2012, THEOR PRACT LOG PROG, V12, P35, DOI 10.1017/S1471068411000482
   Costa VS, 2012, THEOR PRACT LOG PROG, V12, P5, DOI 10.1017/S1471068411000512
   Diaz D, 2012, THEOR PRACT LOG PROG, V12, P253, DOI 10.1017/S1471068411000470
   Filinski A, 2010, ACM SIGPLAN NOTICES, V45, P483, DOI 10.1145/1707801.1706354
   Harvey WD, 1995, INT JOINT CONF ARTIF, P607
   Hermenegildo MV, 2012, THEOR PRACT LOG PROG, V12, P219, DOI 10.1017/S1471068411000457
   Jones M. P., 1993, YALEUDCSRR1004
   Kiczales G, 1997, LECT NOTES COMPUT SC, V1241, P220, DOI 10.1007/BFb0053381
   Kowalski Robert, 1979, Logic for Problem Solving
   Lohmann W., P 16 INT S LOG BAS P
   Schachte P., P INT C LOG PROGR IC, P3
   Schimpf J, 2012, THEOR PRACT LOG PROG, V12, P127, DOI 10.1017/S1471068411000469
   Schrijvers Tom, 2011, Principles and Practice of Constraint Programming - CP 2011. Proceedings of the 17th International Conference (CP 2011), P774, DOI 10.1007/978-3-642-23786-7_58
   Schrijvers T, 2009, J FUNCT PROGRAM, V19, P663, DOI 10.1017/S0956796809990086
   Schulte C., 2013, GECODE GENERIC CONST
   Simonis H, 2010, LECT NOTES COMPUT SC, V6308, P460, DOI 10.1007/978-3-642-15396-9_37
   Sterling L. S., 1994, The Art of Prolog, V2nd
   Swift T, 2012, THEOR PRACT LOG PROG, V12, P157, DOI 10.1017/S1471068411000500
   Triska M., LECT NOTES COMPUTER, V7294, P307
   Van Hentenryck P., 2005, CONSTRAINT BASED LOC
   Van Hentenryck P, 2006, CONSTRAINTS, V11, P353, DOI 10.1007/s10601-006-9005-5
   Wielemaker J, 2012, THEOR PRACT LOG PROG, V12, P67, DOI 10.1017/S1471068411000494
   Zhou NF, 2012, THEOR PRACT LOG PROG, V12, P189, DOI 10.1017/S1471068411000445
NR 24
TC 8
Z9 8
U1 0
U2 5
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAY 1
PY 2014
VL 84
SI SI
BP 101
EP 120
DI 10.1016/j.scico.2013.05.008
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AE6EZ
UT WOS:000334084700006
OA hybrid, Green Accepted, Green Submitted, Green Published
DA 2024-07-18
ER

PT J
AU Caserta, P
   Zendra, O
AF Caserta, Pierre
   Zendra, Olivier
TI JBInsTrace: A tracer of Java and JRE classes at basic-block granularity
   by dynamically instrumenting bytecode
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Java; Tracing; Dynamic; Bytecode; Instrumentation; Profiling; Program
   analysis
AB Understanding what happens during the runtime of a Java program is difficult. Tracking runtime flow can bring valuable information for program understanding and behavior analysis. Polymorphism, thread concurrency or even simple facts like the number of method invocations and the number of executed bytecodes are valuable information to track, but are difficult to compute outside the Java Virtual Machine (JVM) on running programs. In this paper, we present JBInsTrace, a new tool that instruments and traces Java bytecode. It produces static information about source code and a very fine grained trace of Java software execution, combining them to allow detailed analysis of the runtime. Our tool differs from others because it does not only trace program classes but also IRE classes, and does so at basic block level, without altering the JVM and without statically modifying class files. We explain JBInsTrace design, focused towards efficiency, which results in reasonable performance penalty. (C) 2012 Elsevier B.V. All rights reserved.
C1 [Caserta, Pierre] LORIA Campus Sci, F-54603 Villers Les Nancy, France.
   [Zendra, Olivier] INRIA Nancy Grand Est LORIA, F-54603 Villers Les Nancy, France.
C3 Universite de Lorraine
RP Caserta, P (corresponding author), LORIA Campus Sci, 615 Rue Jardin Bot CS 20101, F-54603 Villers Les Nancy, France.
EM pierre.caserta@loria.fr; olivier.zendra@inria.fr
CR [Anonymous], JAVA DEV J
   Arisholm E, 2004, IEEE T SOFTWARE ENG, V30, P491, DOI 10.1109/TSE.2004.41
   Ball T., 1999, SOFTWARE ENGINEERING
   Binder W., 2007, P 5 INT S PRINC PRAC, DOI DOI 10.1145/1294325.1294344
   Bruneton E., 2007, ASM 3 0 JAV BYTECODE
   Bruneton Eric, 2002, P AD EXT COMP SYST
   Bruneton Eric, 2002, ADAPTABLE EXTENSIBLE, V30
   Caserta P., 2011, P 6 INT WORKSH VIS S, P1
   CHRISTENSEN A., 2003, Static Analysis, P1076
   Cornelissen B, 2009, IEEE T SOFTWARE ENG, V35, P684, DOI 10.1109/TSE.2009.28
   Dahm M., 2002, BYTECODE ENG LIB BCE
   Dahm M., 2001, JAVA INFORMATIONSTAG, V99, P267
   Dufour B, 2003, ACM SIGPLAN NOTICES, V38, P149, DOI 10.1145/949343.949320
   Hirzel M, 2004, LECT NOTES COMPUT SC, V3086, P96
   HOFFMANN B, 2008, CASE STUDY PROGRAM R
   I. Sun Microsystems, 2008, JAV PLATF STAND
   Kuleshov E., 2007, P 6 AOSD
   Kuleshov E., 2007, USING ASM FRAMEWORK
   Lindholm Tim., 1999, JAVA VIRTUAL MACHINE, V2nd
   Mock Markus., 2003, ICSE WORKSHOP WODA 2, P13
   Saric A, 2011, 2011 INTERNATIONAL JOINT CONFERENCE ON NEURAL NETWORKS (IJCNN), P1, DOI 10.1109/IJCNN.2011.6033191
   Shiv K, 2009, LECT NOTES COMPUT SC, V5419, P17
   Sreedhar VC, 2000, ACM SIGPLAN NOTICES, V35, P196, DOI 10.1145/358438.349326
   Sundaresan V, 2000, ACM SIGPLAN NOTICES, V35, P264, DOI 10.1145/354222.353189
   Villazón A, 2009, AOSD'09: 8TH INTERNATIONAL CONFERENCE ON ASPECT-ORIENTED SOFTWARE DEVELOPMENT, P63
   White A., 2002, SERP OP SOURC FRAM M
   Zaidman A., 2006, P 10 EUE C SOFTW MAI
   Zaidman A, 2008, J SOFTW MAINT EVOL-R, V20, P387, DOI 10.1002/smr.370
NR 28
TC 3
Z9 4
U1 1
U2 33
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 1
PY 2014
VL 79
SI SI
BP 116
EP 125
DI 10.1016/j.scico.2012.02.004
PG 10
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 246RH
UT WOS:000326556300009
OA Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Aceto, L
   Fábregas, I
   de Frutos-Escrig, D
   Ingólfsdóttir, A
   Palomino, M
AF Aceto, Luca
   Fabregas, Ignacio
   de Frutos-Escrig, David
   Ingolfsdottir, Anna
   Palomino, Miguel
TI On the specification of modal systems: A comparison of three frameworks
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 4th IPM International Conference on Fundamentals of Software Engineering
   (FSEN)
CY APR 20-22, 2011
CL Tehran, IRAN
SP Inst Studies Fundamental Sci, Sch Comp Sci, ACM SIGSOFT, IFIP WG 2 2, Inst Studies Fundamental Sci
DE Modal transition systems; Simulation semantics; Modal refinement;
   Covariant-contravariant simulation; Partial bisimulation
AB This paper studies the relationships between three notions of behavioural preorder that have been proposed in the literature: refinement over modal transition systems, and the covariant-contravariant simulation and the partial bisimulation preorders over labelled transition systems. It is shown that there are mutual translations between modal transition systems and labelled transition systems that preserve, and reflect, refinement and the covariant-contravariant simulation preorder. The translations are also shown to preserve the modal properties that can be expressed in the logics that characterize those preorders. A translation from labelled transition systems modulo the partial bisimulation preorder into the same model modulo the covariant-contravariant simulation preorder is also offered, together with some evidence that the former model is less expressive than the latter. In order to gain more insight into the relationships between modal transition systems modulo refinement and labelled transition systems modulo the covariant-contravariant simulation preorder, their connections are also phrased and studied in the context of institutions. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Aceto, Luca; Ingolfsdottir, Anna] Reykjavik Univ, Sch Comp Sci, ICE TCS, Reykjavik, Iceland.
   [Fabregas, Ignacio; de Frutos-Escrig, David; Palomino, Miguel] Univ Complutense Madrid, Dept Sistemas Informat & Comp, E-28040 Madrid, Spain.
C3 Reykjavik University; Complutense University of Madrid
RP Fábregas, I (corresponding author), Univ Complutense Madrid, Dept Sistemas Informat & Comp, E-28040 Madrid, Spain.
EM fabregas@fdi.ucm.es
RI ; Fabregas, Ignacio/W-4154-2017
OI Palomino Tarjuelo, Miguel/0000-0002-6725-350X; Frutos-Escrig, David
   de/0000-0002-3870-7744; Fabregas, Ignacio/0000-0002-3045-4180
CR Aceto L., 2012, LNCS, V7141, P268
   Aceto L, 2011, ELECTRON PROC THEOR, P1, DOI 10.4204/EPTCS.64.1
   Aceto L, 2008, BULL EUR ASSOC THEOR, P94
   [Anonymous], WODES
   [Anonymous], 2007, Reactive Systems: Modelling, Specification and Verification
   [Anonymous], 1981, Lecture Notes in Computer Science, DOI [10.1007/BFb0017309, DOI 10.1007/BFB0017309]
   Baeten J., 2010, 201004 SE EINDH U TE
   Baeten J, 2011, ELECTRON P THEOR COM, P36, DOI 10.4204/EPTCS.60.3
   BOUDOL G, 1992, THEOR COMPUT SCI, V106, P3, DOI 10.1016/0304-3975(92)90276-L
   Fábregas I, 2010, LECT NOTES COMPUT SC, V6117, P224, DOI 10.1007/978-3-642-13464-7_18
   Fábregas I, 2009, LECT NOTES COMPUT SC, V5728, P221, DOI 10.1007/978-3-642-03741-2_16
   Fecher H, 2010, LECT NOTES COMPUT SC, V5961, P276
   Feuillade G, 2007, DISCRETE EVENT DYN S, V17, P211, DOI 10.1007/s10626-006-0008-6
   Goguen J., 2002, Formal Aspects of Computing, V13, P274, DOI 10.1007/s001650200013
   GOGUEN JA, 1992, J ACM, V39, P95, DOI 10.1145/147508.147524
   GRAF S, 1986, INFORM CONTROL, V68, P125, DOI 10.1016/S0019-9958(86)80031-6
   Hughes J, 2004, THEOR COMPUT SCI, V327, P71, DOI 10.1016/j.tcs.2004.07.022
   LARSEN KG, 1990, LECT NOTES COMPUT SC, V407, P232
   Larsen U, 1988, Eur J Popul, V3, P203, DOI 10.1109/LICS.1988.5119
   Milner R., 1989, Communication and concurrency
   RAMADGE PJ, 1987, SIAM J CONTROL OPTIM, V25, P206, DOI 10.1137/0325013
   STEFFEN B, 1994, INFORM COMPUT, V110, P149, DOI 10.1006/inco.1994.1028
   WINSKEL G, 1995, HDB LOG COMP SCI, V4, P1
NR 23
TC 5
Z9 6
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 1
PY 2013
VL 78
IS 12
BP 2468
EP 2487
DI 10.1016/j.scico.2013.02.004
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 234SL
UT WOS:000325664500013
OA Green Submitted, hybrid
DA 2024-07-18
ER

EF