FN Clarivate Analytics Web of Science
VR 1.0
PT J
AU Abid, R
   Salaün, G
   De Palma, N
AF Abid, Rim
   Salauen, Gwen
   De Palma, Noel
TI Formal design of dynamic reconfiguration protocol for cloud applications
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Cloud computing; Dynamic reconfiguration; Distributed applications;
   Fault-tolerance; Verification
ID MODEL CHECKING
AB Cloud applications are complex applications composed of a set of interconnected software components running on different virtual machines, hosted on remote physical servers. Deploying and reconfiguring this kind of applications are very complicated tasks especially when one or multiple virtual machines fail when achieving these tasks. Hence, there is a need for protocols that can dynamically reconfigure and manage running distributed applications. In this article, we present a novel protocol, which aims at reconfiguring cloud applications. This protocol is able to ensure communication between virtual machines and resolve dependencies by exchanging messages, (dis)connecting, and starting/stopping components in a specific order. The interaction between machines is assured via a publish subscribe messaging system. Each machine reconfigures itself in a decentralized way. The protocol supports virtual machine failures, and the reconfiguration always terminates successfully even in the presence of a finite number of failures. Due to the high degree of parallelism inherent to these applications, the protocol was specified using the LNT value passing process algebra and verified using the model checking tools available in the CADP toolbox. The use of formal specification languages and tools helped to detect several bugs and to improve the protocol. (C) 2015 Elsevier B.V. All rights reserved.
C1 [Abid, Rim; Salauen, Gwen; De Palma, Noel] Univ Grenoble Alpes, Grenoble, France.
C3 Communaute Universite Grenoble Alpes; Universite Grenoble Alpes (UGA)
RP Abid, R (corresponding author), Univ Grenoble Alpes, Grenoble, France.
EM Rim.Abid@inria.fr; Gwen.Salaun@inria.fr; Noel.Depalma@imag.fr
FU OpenCloudware project - French Fonds National pour la Societe Numerique
   (FSN); Poles Minalogic; Systematic; SCS
FX This work has been supported by the OpenCloudware project (2012-2015),
   which is funded by the French Fonds National pour la Societe Numerique
   (FSN), and is supported by Poles Minalogic, Systematic, and SCS.
CR Abid Rim, 2013, Automated Technology for Verification and Analysis. 11th International Symposium, ATVA 2013. Proceedings: LNCS 8172, P178, DOI 10.1007/978-3-319-02444-8_14
   Allen R, 1998, LECT NOTES COMPUT SC, V1382, P21, DOI 10.1007/BFb0053581
   [Anonymous], P 19 ACM INT S HIGH
   Bertier M, 2002, INTERNATIONAL CONFERENCE ON DEPENDABLE SYSTEMS AND NETWORKS, PROCEEDINGS, P354, DOI 10.1109/DSN.2002.1028920
   Boyer Fabienne, 2011, FM 2011: Formal Methods. Proceedings 17th International Symposium on Formal Methods, P103, DOI 10.1007/978-3-642-21437-0_10
   Boyer F, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P13, DOI 10.1109/ICSE.2013.6606547
   Brogi A, 2014, P CIBSE 14 AM C SOFT, P95
   Cansado A, 2010, ELECTRON NOTES THEOR, V263, P95, DOI 10.1016/j.entcs.2010.05.006
   Catan Michel, 2013, Service-Oriented and Cloud Computing. Second European Conference (ESOCC 2013). Proceedings: LNCS 8135, P1, DOI 10.1007/978-3-642-40651-5_1
   Champelovier D., 2011, Reference Manual of the LOTOS NT to LOTOS Translator-Version 5.4
   de Palma N, 2004, PDPTA '04: PROCEEDINGS OF THE INTERNATIONAL CONFERENCE ON PARALLEL AND DISTRIBUTED PROCESSING TECHNIQUES AND APPLICATIONS, VOLS 1-3, P1440
   Etchevers X., 2011, Proceedings of the 2011 IEEE 4th International Conference on Utility and Cloud Computing (UCC 2011), P170, DOI 10.1109/UCC.2011.32
   Etchevers X., 2011, Proceedings of the 2011 IEEE 4th International Conference on Cloud Computing (CLOUD 2011), P668, DOI 10.1109/CLOUD.2011.65
   Etchevers X., 2014, P SAC 2014, P1331
   Fischer J, 2012, ACM SIGPLAN NOTICES, V47, P263, DOI 10.1145/2345156.2254096
   Garavel H, 2011, LECT NOTES COMPUT SC, V6605, P372, DOI 10.1007/978-3-642-19835-9_33
   Goldsack Patrick, 2009, Operating Systems Review, V43, P16, DOI 10.1145/1496909.1496915
   ISO, 1989, Technical Report 8807
   Kirschnick J, 2012, SOFTWARE PRACT EXPER, V42, P395, DOI 10.1002/spe.1090
   Kramer J., 1998, IEE Proceedings-Software, V145, P146, DOI 10.1049/ip-sen:19982297
   Krause C, 2011, SCI COMPUT PROGRAM, V76, P23, DOI 10.1016/j.scico.2009.10.006
   Lascu T.A., 2013, LNCS, V8348, P254
   Magee J, 1999, INT FED INFO PROC, V12, P35
   Magee J., 1996, Software Engineering Notes, V21, P3, DOI 10.1145/250707.239104
   Mateescu R, 2008, LECT NOTES COMPUT SC, V5014, P148, DOI 10.1007/978-3-540-68237-0_12
   SALAUN G., 2012, P SAC 12, P1278
   Salaün G, 2013, INNOV SYST SOFTW ENG, V9, P105, DOI 10.1007/s11334-013-0204-0
   Salaün G, 2008, SEFM 2008: SIXTH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING AND FORMAL METHODS, PROCEEDINGS, P313, DOI 10.1109/SEFM.2008.42
   Wermelinger M., 2001, Software Engineering Notes, V26, P21, DOI 10.1145/503271.503213
   Zuck L, 2004, COMPUT LANG SYST STR, V30, P139, DOI 10.1016/j.cl.2004.02.006
NR 30
TC 7
Z9 7
U1 0
U2 8
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 15
PY 2016
VL 117
BP 1
EP 16
DI 10.1016/j.scico.2015.12.001
PG 16
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DC8HC
UT WOS:000369459500001
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Gössler, G
   Le Métayer, D
AF Goessler, Gregor
   Le Metayer, Daniel
TI A general framework for blaming in component-based systems
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Causality; Failure; Log; Counterfactual analysis
ID CAUSALITY ANALYSIS; MODELS
AB In component-based safety-critical embedded systems it is crucial to determine the cause(s) of the violation of a safety property, be it to issue a precise alert, to steer the system into a safe state, or to determine liability of component providers. In this paper we present an approach to blame components based on a single execution trace violating a safety property P. The diagnosis relies on counterfactual reasoning ("what would have been the outcome if component C had behaved correctly?") to distinguish component failures that actually contributed to the outcome from failures that had little or no impact on the violation of P. (C) 2015 Elsevier B.V. All rights reserved.
C1 [Goessler, Gregor; Le Metayer, Daniel] INRIA, Rocquencourt, France.
   [Goessler, Gregor] Univ Grenoble Alpes, Grenoble, France.
   [Le Metayer, Daniel] Univ Lyon, Lyon, France.
C3 Inria; Communaute Universite Grenoble Alpes; Universite Grenoble Alpes
   (UGA)
RP Gössler, G (corresponding author), INRIA, Rocquencourt, France.
EM gregor.goessler@inria.fr
CR [Anonymous], BRIT J PHILOS SCI
   [Anonymous], 2014, EMSOFT 14
   [Anonymous], 2011, LECT NOTES COMPUTER
   Beckers S, 2012, FRONT ARTIF INTEL AP, V241, P35, DOI 10.3233/978-1-61499-096-3-35
   Beer I, 2012, FORM METHOD SYST DES, V40, P20, DOI 10.1007/s10703-011-0132-2
   Biswas D., 2011, Proceedings of the 2011 IEEE 13th International Symposium on High-Assurance Systems Engineering (HASE 2011), P368, DOI 10.1109/HASE.2011.51
   Dimoulas C, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P215, DOI 10.1145/1926385.1926410
   Fabre E, 2005, DISCRETE EVENT DYN S, V15, P33, DOI 10.1007/s10626-005-5238-5
   Fey G, 2008, IEEE T COMPUT AID D, V27, P1138, DOI 10.1109/TCAD.2008.923234
   Fidge CJ, 1988, P AUSTR COMP SCI C, V10, P56
   Gössler G, 2014, LECT NOTES COMPUT SC, V8348, P157, DOI 10.1007/978-3-319-07602-7_11
   Gössler G, 2010, LECT NOTES COMPUT SC, V6418, P270, DOI 10.1007/978-3-642-16612-9_21
   Gössler G, 2005, SCI COMPUT PROGRAM, V55, P161, DOI 10.1016/j.scico.2004.05.014
   Groce A., 2006, International Journal on Software Tools for Technology Transfer, V8, P229, DOI 10.1007/s10009-005-0202-0
   HALBWACHS N, 1991, P IEEE, V79, P1305, DOI 10.1109/5.97300
   Hume David, 1748, An Enquiry Concerning Human Understanding
   Jobstmann B, 2012, J COMPUT SYST SCI, V78, P441, DOI 10.1016/j.jcss.2011.05.005
   Jose M, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P437
   Konighofer R., 2011, 2011 Formal Methods in Computer-Aided Design (FMCAD), P91
   Küsters R, 2010, PROCEEDINGS OF THE 17TH ACM CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY (CCS'10), P526, DOI 10.1145/1866307.1866366
   Kuntz Matthias, 2011, Computer Safety, Reliability, and Security. Proceedings 30th International Conference, SAFECOMP 2011, P71, DOI 10.1007/978-3-642-24270-0_6
   Lee EA, 1998, IEEE T COMPUT AID D, V17, P1217, DOI 10.1109/43.736561
   Leitner-Fischer F, 2013, LECT NOTES COMPUT SC, V7737, P248
   Mattern F., 1988, WORKSH PAR DISTR ALG, P215
   REITER R, 1987, ARTIF INTELL, V32, P57, DOI 10.1016/0004-3702(87)90062-2
   SAMPATH M, 1995, IEEE T AUTOMAT CONTR, V40, P1555, DOI 10.1109/9.412626
   Wang S, 2013, LECT NOTES COMPUT SC, V8174, P285, DOI 10.1007/978-3-642-40787-1_17
   Zeller A, 2009, WHY PROGRAMS FAIL: A GUIDE TO SYSTEMATIC DEBUGGING, 2ND EDITION
NR 28
TC 13
Z9 13
U1 0
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 1
PY 2015
VL 113
BP 223
EP 235
DI 10.1016/j.scico.2015.06.010
PN 3
PG 13
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CY2HW
UT WOS:000366230400002
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Wieringa, R
   Daneva, M
AF Wieringa, Roel
   Daneva, Maya
TI Six strategies for generalizing software engineering theories
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Generalization; External validity; Scaling up; Architectural mechanisms;
   Statistical inference
ID EMPIRICAL-RESEARCH; STATISTICS; VALIDATION; CAUSATION; SYSTEM
AB General theories of software engineering must balance between providing full understanding of a single case and providing partial understanding of many cases. In this paper we argue that for theories to be useful in practice, they should give sufficient understanding of a sufficiently large class of cases, without having to be universal or complete. We provide six strategies for developing such theories of the middle range. In lab-to-lab strategies, theories of laboratory phenomena are developed and generalized to other laboratory phenomena. This is a characteristic strategy for basic science. In lab-to-field strategies, theories are developed of artifacts that first operate under idealized laboratory conditions, which are then scaled up until they can operate under uncontrolled field conditions. This is the characteristic strategy for the engineering sciences. In case-based strategies, we generalize about components of real-world cases, that are supposed to exhibit less variation than the cases as a whole. In sample-based strategies, we generalize about the aggregate behavior of samples of cases, which can exhibit patterns not visible at the case level. We discuss three examples of sample-based strategies. Throughout the paper, we use examples of theories and generalization strategies from software engineering to illustrate our analysis. The paper concludes with a discussion of related work and implications for empirical software engineering research. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Wieringa, Roel; Daneva, Maya] Univ Twente, NL-7500 AE Enschede, Netherlands.
C3 University of Twente
RP Wieringa, R (corresponding author), Univ Twente, POB 217, NL-7500 AE Enschede, Netherlands.
EM r.j.wieringa@utwente.nl; m.daneva@utwente.nl
OI Daneva, Maya/0000-0001-7359-8013
CR Anda BCD, 2009, IEEE T SOFTWARE ENG, V35, P407, DOI 10.1109/TSE.2008.89
   [Anonymous], SOCIAL THEORY SOCIAL
   [Anonymous], 2006, INT STUD PHILOS SCI, DOI DOI 10.1080/02698590600640992
   [Anonymous], P 14 ANN SOFTW ENG W
   [Anonymous], J SOFTW MAINT EVOL
   [Anonymous], 2003, Proceedings of the 7th International Conference on Empirical Assessment in Software Engineering
   [Anonymous], 2000, Software Cost Estimation with COCOMO II
   [Anonymous], 2004, SPRINGER TEXTS STAT
   [Anonymous], 2003, Theory and reality: An introduction to the philosophy of science (science and its conceptual foundations series)
   [Anonymous], HIST PHILOS SOCIAL S
   [Anonymous], 1988, SOCIOLOGICAL METHODO, DOI DOI 10.2307/271053
   [Anonymous], 1998, SOCIAL MECH ANAL APP
   [Anonymous], P 2010 ACM IEEE INT
   [Anonymous], 2014, STAKEHOLDER GOAL ANA, DOI DOI 10.1007/978-3-662-43839-8
   [Anonymous], TR1051 IND U INF SYS
   [Anonymous], 1989, EMPIRE CHSNCE PROBAB
   [Anonymous], IEEE T SOFTW ENG
   [Anonymous], 1986, RISE STAT THINKING 1
   Bechtel W., 2010, Discovering Complexity: Decomposition and Localization as Strategies in Scientific Research
   Bechtel W, 2005, STUD HIST PHI PART C, V36, P421, DOI 10.1016/j.shpsc.2005.03.010
   Berk R.A., 1988, Handbook of sociology, P155
   Boon M, 2009, HBK PHILOS SCI, V9, P693, DOI 10.1016/B978-0-444-51667-1.50030-6
   Bunge M, 2004, PHILOS SOC SCI, V34, P182, DOI 10.1177/0048393103262550
   Campbell, 2002, EXPT QUASIEXPERIMENT
   Campbell DT., 1963, EXPT QUASIEXPERIMENT
   Cartwright N., 1983, LAWS PHYS LIE, DOI 10.1093/0198247044.001.0001
   Cartwright N., 1999, The dappled world: A study of the boundaries of science
   Cartwright N., 1989, Natures capacities and their measurement
   Constant EdwardW., 1980, The Origins of the Turbojet Revolution
   COURNAND A, 1976, MINERVA, V14, P79, DOI 10.1007/BF01096215
   Craver CarlF., 2002, The Blackwell Guide to the Philosophy of Science, P55, DOI DOI 10.1002/9780470756614.CH4
   Damian D, 2006, IEEE T SOFTWARE ENG, V32, P433, DOI 10.1109/TSE.2006.61
   Daneva M, 2013, J SYST SOFTWARE, V86, P1333, DOI 10.1016/j.jss.2012.12.046
   Davis A., 1995, 201 Principles of Software Development
   Dejaeger K, 2012, IEEE T SOFTWARE ENG, V38, P375, DOI 10.1109/TSE.2011.55
   Endres A., 2003, A Handbook of Software and Systems Engineering: Empirical Observations, Laws, and Theories
   FENTON N, 1994, IEEE SOFTWARE, V11, P86, DOI 10.1109/52.300094
   Fisher R.A., 1956, Statistical Methods and Scientific Inference
   Freedman D. A., 2007, STATISTICS
   Gellenbeck E. M., 1991, Empirical Studies of Programmers: Fourth Workshop, P65
   Ghaisas S, 2013, IEEE-ACM INT WKSP CO, P37, DOI 10.1109/CESI.2013.6618468
   Giere RonaldN., 2000, A Companion to the Philosophy of Science, P515
   Glennan S, 2002, PHILOS SCI, V69, pS342, DOI 10.1086/341857
   Glennan Stuart S., 1996, Erkenntnis, V44, P49, DOI [DOI 10.1007/BF00172853, 10.1007/BF00172853]
   Goldthorpe JH, 2001, EUR SOCIOL REV, V17, P1, DOI 10.1093/esr/17.1.1
   Gregor S, 2007, J ASSOC INF SYST, V8, P312, DOI 10.17705/1jais.00129
   Gregor S, 2006, MIS QUART, V30, P611
   Hacking I., 1990, TAMING CHANCE, DOI DOI 10.1017/CBO9780511819766
   Hacking Ian., 2001, An Introduction to Probability and Inductive Logic, pXi
   Hannay JE, 2007, IEEE T SOFTWARE ENG, V33, P87, DOI 10.1109/TSE.2007.12
   Hannay JE, 2010, IEEE T SOFTWARE ENG, V36, P61, DOI 10.1109/TSE.2009.41
   Hedstrom P., 1998, SOCIAL MECH ANAL APP
   Hempel CarlG., 1996, Philosophy of Natural Science
   HOLLAND PW, 1986, J AM STAT ASSOC, V81, P945, DOI 10.2307/2289064
   Host M., 2000, Empirical Software Engineering, V5, P201, DOI 10.1023/A:1026586415054
   Huynh T, 2010, EMPIR SOFTW ENG, V15, P556, DOI 10.1007/s10664-010-9131-y
   Illari PM, 2012, EUR J PHILOS SCI, V2, P119, DOI 10.1007/s13194-011-0038-2
   INMAN HF, 1994, AM STAT, V48, P2
   Jorgensen M., 2004, "8th Internation Conference on Empirical Assessment in Software Engineering (EASE 2004)" Workshop - 26th International Conference on Software Engineering, P29, DOI 10.1049/ic:20040396
   KAPLAN A., 1998, The conduct of inquiry: Methodology for Behavorial Science
   Kitchenham BA, 2002, IEEE T SOFTWARE ENG, V28, P721, DOI 10.1109/TSE.2002.1027796
   Kitchenham BA, 2007, IEEE T SOFTWARE ENG, V33, P316, DOI 10.1109/TSE.2007.1101
   Kocaguneli E, 2012, IEEE T SOFTWARE ENG, V38, P1403, DOI 10.1109/TSE.2011.111
   Krein J.L., 2014, SIGSOFT Software Engineering Notes, V39, P31
   Laitenberger O, 2001, IEEE T SOFTWARE ENG, V27, P387, DOI 10.1109/32.922713
   LAYMON R, 1995, PHILOS STUD, V77, P353, DOI 10.1007/BF00989579
   LAYMON R, 1989, SYNTHESE, V81, P353, DOI 10.1007/BF00869321
   Lee AS, 2003, INFORM SYST RES, V14, P221, DOI 10.1287/isre.14.3.221.16560
   Li ZD, 2011, EMPIR SOFTW ENG, V16, P667, DOI 10.1007/s10664-011-9155-y
   Lubars M., 1992, International Conference on Software Engineering, P173, DOI 10.1109/ICSE.1992.753498
   LUBARS M, 1993, PROC INT CONF SOFTW, P255, DOI 10.1109/ICSE.1993.346038
   Machamer P, 2000, PHILOS SCI, V67, P1, DOI 10.1086/392759
   Machamer Peter., 2002, The Blackwell Guide to the Philosophy of Science, P1
   MCMULLIN E, 1985, STUD HIST PHILOS SCI, V16, P247, DOI 10.1016/0039-3681(85)90003-2
   McMullin E., 1984, Scientific Realism
   Mendes E, 2004, 10TH INTERNATIONAL SYMPOSIUM ON SOFTWARE METRICS, PROCEEDINGS, P348, DOI 10.1109/METRIC.2004.1357920
   Menzies T., 2012, The PROMISE Repository of empirical software engineering data
   Merton R.K., 1968, SOCIAL THEORY SOCIAL, P39
   Merton RobertK., 1950, CONTINUITIES SOCIAL
   Mockus A, 2002, ACM T SOFTW ENG METH, V11, P309, DOI 10.1145/567793.567795
   Mockus A., 2000, Proceedings of the 2000 International Conference on Software Engineering. ICSE 2000 the New Millennium, P263, DOI 10.1109/ICSE.2000.870417
   Nagel E., 1961, The structure of science
   NEHLIG A, 1992, BRAIN RES REV, V17, P139, DOI 10.1016/0165-0173(92)90012-B
   Nola R., 2007, Theories of Scientific Method: an Introduction
   Parascandola M, 2001, J EPIDEMIOL COMMUN H, V55, P905, DOI 10.1136/jech.55.12.905
   POTTS C, 1993, IEEE SOFTWARE, V10, P19, DOI 10.1109/52.232392
   Prechelt L, 2002, IEEE T SOFTWARE ENG, V28, P595, DOI 10.1109/TSE.2002.1010061
   Robinson WS, 1951, AM SOCIOL REV, V16, P812, DOI 10.2307/2087508
   Sabherwal R., 2003, Information and Organization, V13, P153, DOI 10.1016/S1471-7727(02)00026-X
   Seddon PB, 2012, EUR J INFORM SYST, V21, P6, DOI 10.1057/ejis.2011.9
   Sedgwick P, 2011, BRIT MED J, V343, DOI 10.1136/bmj.d7453
   Sjoberg D. I. K., 2008, Guide to Advanced Empirical Software Engineering, P312
   Sjoberg DIK, 2005, IEEE T SOFTWARE ENG, V31, P733, DOI 10.1109/TSE.2005.97
   Svahnberg M, 2008, ESEM'08: PROCEEDINGS OF THE 2008 ACM-IEEE INTERNATIONAL SYMPOSIUM ON EMPIRICAL SOFTWARE ENGINEERING AND MEASUREMENT, P288
   Tacq J, 2007, POL SOCIOL REV, P187
   Thagard P., 2000, EXPLANATION COGNITIO, P255
   vanStrien PJ, 1997, THEOR PSYCHOL, V7, P683, DOI 10.1177/0959354397075006
   Vincenti WalterG., 1990, What Engineers Know and How They Know It Analytical Studies from Aeronautical History
   West SG, 2014, HANDBOOK OF RESEARCH METHODS IN SOCIAL AND PERSONALITY PSYCHOLOGY, SECOND EDITION, P49
   Wieringa R, 2014, J SYST SOFTWARE, V95, P19, DOI 10.1016/j.jss.2013.11.1097
   Wieringa R, 2011, INT SYMP EMP SOFTWAR, P295, DOI 10.1109/ESEM.2011.38
   Wieringa R, 2010, LECT NOTES COMPUT SC, V6105, P61, DOI 10.1007/978-3-642-13335-0_5
   Woodward J., 2005, Making things happen: A theory of causal explanation
   Woodward James, 2016, The Stanford Encyclopedia of Philosophy
   Yin R.K., 2011, Qualitative research from start to finish
   Zelkowitz MV, 1997, INFORM SOFTWARE TECH, V39, P735, DOI 10.1016/S0950-5849(97)00025-6
   Znaniecki F., 1968, METHOD SOCIOLOGY
NR 107
TC 105
Z9 110
U1 0
U2 6
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD APR 1
PY 2015
VL 101
BP 136
EP 152
DI 10.1016/j.scico.2014.11.013
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Social Science Citation Index (SSCI)
SC Computer Science
GA CC6XZ
UT WOS:000350513600009
OA Bronze, Green Published
DA 2024-07-18
ER

PT J
AU Pino, LF
   Aristizábal, A
   Bonchi, F
   Valencia, F
AF Pino, Luis F.
   Aristizabal, Andres
   Bonchi, Filippo
   Valencia, Frank
TI Weak CCP bisimilarity with strong procedures
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Concurrent constraint programming; Weak bisimilarity; Partition
   refinement
ID SEMANTICS; SYSTEMS
AB Concurrent constraint programming (CCP) is a well-established model for concurrency that singles out the fundamental aspects of asynchronous systems whose agents (or processes) evolve by posting and querying (partial) information in a global medium. Bisimilarity is a standard behavioral equivalence in concurrency theory. However, only recently a well-behaved notion of bisimilarity for CCP, and a CCP partition refinement algorithm for deciding the strong version of this equivalence have been proposed. Weak bisimilarity is a central behavioral equivalence in process calculi and it is obtained from the strong case by taking into account only the actions that are observable in the system. Typically, the standard partition refinement can also be used for deciding weak bisimilarity simply by using Milner's reduction from weak to strong bisimilarity; a technique referred to as saturation. In this paper we demonstrate that, because of its involved labeled transitions, the above-mentioned saturation technique does not work for CCP. We give an alternative reduction from weak CCP bisimilarity to the strong one that allows us to use the CCP partition refinement algorithm for deciding this equivalence. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Pino, Luis F.] Ecole Polytech, INRIA DGA, LIX, F-91128 Palaiseau, France.
   [Pino, Luis F.] Ecole Polytech, UMR X CNRS 7161, F-91128 Palaiseau, France.
   [Aristizabal, Andres] Pontificia Univ Javeriana Cali, Cali, Colombia.
   [Bonchi, Filippo] Univ Lyon, ENS Lyon, LIP, UMR CNRS ENS Lyon UCBL INRIA 5668, F-69364 Lyon, France.
   [Valencia, Frank] Ecole Polytech, CNRS, F-91128 Palaiseau, France.
   [Valencia, Frank] Ecole Polytech, LIX, UMR X CNRS 7161, F-91128 Palaiseau, France.
C3 Institut Polytechnique de Paris; Ecole Polytechnique; Institut
   Polytechnique de Paris; Ecole Polytechnique; Pontificia Universidad
   Javeriana; Ecole Normale Superieure de Lyon (ENS de LYON); Institut
   Polytechnique de Paris; Ecole Polytechnique; Centre National de la
   Recherche Scientifique (CNRS); Institut Polytechnique de Paris; Ecole
   Polytechnique
RP Pino, LF (corresponding author), Ecole Polytech, INRIA DGA, LIX, F-91128 Palaiseau, France.
EM luis.pino@lix.polytechnique.fr; aaaristizabal@javerianacali.edu.co;
   filippo.bonchi@ens-lyon.fr; frank.valencia@lix.polytechnique.fr
RI Bonchi, Filippo/E-7955-2018
OI Bonchi, Filippo/0000-0002-3433-723X; Pino, Luis/0000-0003-4475-7470
FU French Defense procurement agency (DGA);  [ANR-09-BLAN-0345 CPP];  [ANR
   12IS02001 PACE];  [ANR-09-BLAN-0169-01 PANDA]
FX This work has been partially supported by the projects ANR-09-BLAN-0345
   CPP, ANR 12IS02001 PACE and ANR-09-BLAN-0169-01 PANDA; and by the French
   Defense procurement agency (DGA) with a PhD grant.
CR [Anonymous], 1980, CALCULUS COMMUNICATI, DOI DOI 10.1007/3-540-10235-3
   [Anonymous], 1983, PROCS 2 ANN ACM S PR, DOI [10.1145/800221.806724, DOI 10.1145/800221.806724]
   Aristizabal A., 2012, 27 ANN ACM S APPL CO, P88
   Aristizábal A, 2012, ELECTRON P THEOR COM, P2, DOI 10.4204/EPTCS.104.2
   Aristizábal A, 2011, LECT NOTES COMPUT SC, V6604, P138, DOI 10.1007/978-3-642-19805-2_10
   Baldan P, 2007, THEOR COMPUT SCI, V389, P446, DOI 10.1016/j.tcs.2007.09.004
   Bonchi F, 2006, IEEE S LOG, P69, DOI 10.1109/LICS.2006.46
   Bonchi F, 2009, LECT NOTES COMPUT SC, V5504, P272
   Bonchi F, 2009, LECT NOTES COMPUT SC, V5502, P267, DOI 10.1007/978-3-642-00590-9_20
   Bruni R, 2005, LECT NOTES COMPUT SC, V3653, P293, DOI 10.1007/11539452_24
   Bruni R, 2011, LECT NOTES COMPUT SC, V6901, P312, DOI 10.1007/978-3-642-23217-6_21
   DEBOER FS, 1995, THEOR COMPUT SCI, V151, P37, DOI 10.1016/0304-3975(95)00047-Z
   FERNANDEZ JC, 1990, SCI COMPUT PROGRAM, V13, P219, DOI 10.1016/0167-6423(90)90071-K
   Ferrari G, 1998, LECT NOTES COMPUT SC, V1427, P511, DOI 10.1007/BFb0028772
   Gadducci F, 2000, FOUNDAT COMPUT, P133
   Jensen O. H., 2006, THESIS U CAMBRIDGE
   Knight S, 2012, LECT NOTES COMPUT SC, V7454, P317, DOI 10.1007/978-3-642-32940-1_23
   Lanese I, 2011, INFORM COMPUT, V209, P198, DOI 10.1016/j.ic.2010.10.001
   Leifer J.J., 2000, LECT NOTES COMPUTER, V1877, P243
   Leifer JJ, 2006, MATH STRUCT COMP SCI, V16, P989, DOI 10.1017/S0960129506005664
   Mendler N. P., 1995, Nordic Journal of Computing, V2, P181
   MILNER R, 1992, LECT NOTES COMPUT SC, V623, P685
   Monk J., 1971, CYLINDRIC ALGEBRAS 1
   PAIGE R, 1987, SIAM J COMPUT, V16, P973, DOI 10.1137/0216062
   Sangiorgi D., 2012, Advanced Topics in Bisimulation and Coinduction
   SARASWAT VA, 1990, CONFERENCE RECORD OF THE SEVENTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P232, DOI 10.1145/96709.96733
   Saraswat Vijay A., 1991, P 18 ACM SIGPLANSIGA, P333, DOI DOI 10.1145/99583.99627
   Sewell P, 2002, THEOR COMPUT SCI, V274, P183, DOI 10.1016/S0304-3975(00)00309-1
   Sobocinski Pawel, 2012, Coalgebraic Methods in Computer Science. 11th International Workshop, CMCS 2012 Colocated with ETAPS 2012. Revised Selected Papers, P40, DOI 10.1007/978-3-642-32784-1_3
   Sobocinski P, 2010, LECT NOTES COMPUT SC, V6269, P554, DOI 10.1007/978-3-642-15375-4_38
   Victor B., 1994, CAV 94, P428, DOI DOI 10.1007/3-540-58179-0_73
NR 31
TC 1
Z9 1
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR 15
PY 2015
VL 100
BP 84
EP 104
DI 10.1016/j.scico.2014.09.007
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CB6IS
UT WOS:000349731300005
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Rooney, S
AF Rooney, Sean
TI Scheduling intense applications most 'surprising' first
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Data streams; Programming models; Scheduling; Sketching
AB Certain streaming applications are required to perform sophisticated analytics within bounded time on arriving streams of data. Such applications have the interesting characteristic that the total amount of work that could be performed is unbounded. We show how recent results from algorithmic theory are useful in scheduling such applications as they allow the efficient creation of synopses of unprocessed data. These synopses can then be used to schedule the processing of the stream. In particular, we describe a preliminary implementation of a scheduler that optimizes the information rate available to applications by estimating the entropy of arriving streams. We describe the theory underlying such a scheduler and motivate how existing programming models can be extended to accommodate it by outlining a basic but functional implementation in the Java programming language. (C) 2013 Elsevier B.V. All rights reserved.
C1 IBM Res Zurich, CH-8803 Ruschlikon, Switzerland.
C3 International Business Machines (IBM)
RP Rooney, S (corresponding author), IBM Res Zurich, CH-8803 Ruschlikon, Switzerland.
CR Alon N., 1996, Proceedings of the Twenty-Eighth Annual ACM Symposium on the Theory of Computing, P20, DOI 10.1145/237814.237823
   Alpern B, 2000, IBM SYST J, V39, P211, DOI 10.1147/sj.391.0211
   Amini Lisa., 2006, ICDCS 06, P71
   Amini Lisa., 2006, Proceedings of the 4th inter- national workshop on Data mining standards, services and platforms, DMSSP '06, P27
   [Anonymous], FDN TRENDS THEOR COM
   [Anonymous], P HIGH PERF COMP SIM
   Armstrong Joe, 1996, Concurrent Programming in Erlang
   Babcock B., 2002, P 21 ACM SIGMOD SIGA, P1, DOI [DOI 10.1145/543613.543615, 10.1145/543613]
   Bollella Greg., 2000, REAL TIME SPECIFICAT
   Chakrabarti A, 2007, PROCEEDINGS OF THE EIGHTEENTH ANNUAL ACM-SIAM SYMPOSIUM ON DISCRETE ALGORITHMS, P328
   Charles P, 2005, ACM SIGPLAN NOTICES, V40, P519, DOI 10.1145/1103845.1094852
   Frossard P., 2006, P IEEE ICASSP
   Ganguly S., 2008, P 2 INT WORKSH SCAL, P23
   Ghandour WJ, 2010, PACT 2010: PROCEEDINGS OF THE NINETEENTH INTERNATIONAL CONFERENCE ON PARALLEL ARCHITECTURES AND COMPILATION TECHNIQUES, P431, DOI 10.1145/1854273.1854327
   HELLERSTEIN JM, 2000, IEEE DATA ENG B, V23
   Lauer H.C., 1979, OPER SYST REV, P3
   Michael M. M., 1996, Proceedings of the Fifteenth Annual ACM Symposium on Principles of Distributed Computing, P267, DOI 10.1145/248052.248106
   Misra J., 1982, SCI COMPUT PROGRAM, V12, P449
   Odersky Martin, 2006, TECHNICAL REPORT
   WHANG KY, 1990, ACM T DATABASE SYST, V15, P208, DOI 10.1145/78922.78925
NR 20
TC 0
Z9 0
U1 0
U2 1
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 1
PY 2015
VL 97
BP 309
EP 319
DI 10.1016/j.scico.2013.09.001
PN 3
PG 11
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AW8YN
UT WOS:000346545300003
DA 2024-07-18
ER

PT J
AU Zagarese, Q
   Canfora, G
   Zimeo, E
   Alshabani, I
   Pellegrino, L
   Alshabani, A
   Baude, F
AF Zagarese, Quirino
   Canfora, Gerardo
   Zimeo, Eugenio
   Alshabani, Iyad
   Pellegrino, Laurent
   Alshabani, Amjad
   Baude, Francoise
TI Improving data-intensive EDA performance with annotation-driven laziness
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Web-services; SOA; EDA; Publish-subscribe; Data-intensive applications
AB Event-driven programming in large scale environments is becoming a common requirement of modern distributed applications. It introduces some beneficial effects such as real-time state updates and replications, which enable new kinds of applications and efficient architectural solutions. However, these benefits could be compromised if the adopted infrastructure were not designed to ensure efficient delivery of events and related data. This paper presents an architectural model, a middleware (WS-Link) and annotation-based mechanisms to ensure high performance in delivering events carrying large attachments. We transparently decouple event notification from related data to avoid useless data-transfers. This way, while event notifications are routed in a conventional manner through an event service, data are directly and transparently transferred from publishers to subscribers. The theoretical analysis shows that we can reduce the average event delivery time by half, compared to a conventional approach requiring the full mediation of the event service. The experimental analysis confirms that the proposed approach outperforms the conventional one (both for throughput and delivery time) even though the middleware overhead, introduced by the specific adopted model, slightly reduces the expected benefits. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Zagarese, Quirino; Canfora, Gerardo; Zimeo, Eugenio] Univ Sannio, Dept Engn, Benevento, Italy.
   [Alshabani, Iyad; Pellegrino, Laurent; Alshabani, Amjad; Baude, Francoise] Univ Nice Sophia Antipolis, INRIA, CNRS I3S, Nice, France.
C3 University of Sannio; Universite Cote d'Azur; Centre National de la
   Recherche Scientifique (CNRS); Inria
RP Zagarese, Q (corresponding author), Univ Sannio, Dept Engn, Benevento, Italy.
EM quirino.zagarese@unisannio.it; gerardo.canfora@unisannio.it;
   eugenio.zimeo@unisannio.it; iyad.alshabani@inria.fr;
   laurent.pellegrino@inria.fr; amjad.alshabani@inria.fr;
   francoise.baude@unice.fr
OI Canfora, Gerardo/0000-0003-0049-1279
FU Province of Benevento, EU FP7 STREP project PLAY [258659 PLAY]; French
   ANR project SocEDA [10-SEGI-013]; CNRS; RENATER
FX This work is supported by Province of Benevento, EU FP7 STREP project
   PLAY (258659 PLAY) and French ANR project SocEDA (10-SEGI-013).;
   Experiments presented in this paper were carried out using the Grid'5000
   experimental testbed, being developed under the INRIA ALADDIN
   development action with support from CNRS, RENATER and several
   Universities as well as other funding bodies (see
   https://www.grid5000.fr).
CR [Anonymous], 1998, RESOURCE DESCRIPTION
   [Anonymous], ACTIVEMQ ACTION MANN
   Baldoni R., 2010, DECISION SCI, V35, P77
   Banker K., 2011, DOCUMENT DATABASE MO
   Bloch J., 2004, 175 JSR
   Diot C, 2000, IEEE NETWORK, V14, P78, DOI 10.1109/65.819174
   Erl T., 2009, DESIGN PATTERNS
   Erl T, 2005, SERVICE ORIENTED ARC
   Eugster PT, 2003, ACM COMPUT SURV, V35, P114, DOI 10.1145/857076.857078
   Facca Federico M., 2008, 2008 Second IEEE International Conference on Semantic Computing (ICSC), P498, DOI 10.1109/ICSC.2008.44
   Filali Imen, 2011, Transactions on Large-Scale Data- and Knowledge-Centered Systems III. Special Issue on Data and Knowledge in Grid and P2P Systems., P20, DOI 10.1007/978-3-642-23074-5_2
   Ghalsasi S.Y., 2009, P 2 INT C INT SCI IN, P1441
   Hohpe G., 2012, Enterprise Integration Patterns: Designing, Building, and Deploying Messaging Solutions, V15
   IBSEN C, 2010, CAMEL ACTION
   Kowalewski B, 2008, LECT NOTES COMPUT SC, V5103, P358, DOI 10.1007/978-3-540-69389-5_41
   Lee CA, 2006, FUTURE GENERATION GRIDS, P3, DOI 10.1007/978-0-387-29445-2_1
   Lee C, 2008, LECT NOTES COMPUT SC, V5287, P102
   Mastouri MA, 2007, INT J COMPUT SCI NET, V7, P313
   Mitchell J.D., 2008, MIT LINCOLN LAB J, V16, P413
   Overbeek S, 2012, SERV ORIENTED COMPUT, V6, P167, DOI 10.1007/s11761-011-0100-0
   Pardo-Castellote G, 2003, 23RD INTERNATIONAL CONFERENCE ON DISTRIBUTED COMPUTING SYSTEMS WORKSHOPS, P200
   Pellegrino L., 2013, P 6 INT C DAT MAN CL
   Prud'Hommeaux E, 2008, SPARQL QUER IN PRESS
   Richardson C., 2006, ACM Queue, V4, P36, DOI 10.1145/1142031.1142045
   Ryll M, 2008, INT FED INFO PROC, V260, P359
   Sengupta A., 2010, SIGSOFT SOFTW ENG NO, V35, P1
   Shalloway Alan., 2004, Design Patterns Explained: A New Perspective on Object-Oriented Design
   Silva-Lepe I, 2006, ICWS 2006: IEEE International Conference on Web Services, Proceedings, P111
   Skjervold Espen, 2010, 2010 IEEE International Conference on Web Services (ICWS), P660, DOI 10.1109/ICWS.2010.78
   Tanenbaum A.S., 2006, DISTRIBUTED SYSTEMS
   Taylor Hugh., 2009, EVENT DRIVEN ARCHITE, V1st
   Wams JMS, 2010, ELECTRON P THEOR COM, P1, DOI 10.4204/EPTCS.30.1
   Zagarese Q., 2012, Proceedings of the 2012 IEEE 19th International Conference on Web Services (ICWS), P480, DOI 10.1109/ICWS.2012.30
   Zagarese Q., 2011, SOCA, P1
   Zagarese Q., 2013, SAC, P1907
NR 35
TC 1
Z9 2
U1 0
U2 3
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 1
PY 2015
VL 97
SI SI
BP 266
EP 279
DI 10.1016/j.scico.2014.03.007
PN 2
PG 14
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AU6PS
UT WOS:000345725200005
DA 2024-07-18
ER

PT J
AU Reis, LVS
   Bigonha, RS
   Di Iorio, VO
   Amorim, LES
AF Reis, Leonardo V. S.
   Bigonha, Roberto S.
   Di Iorio, Vladimir O.
   Amorim, Luis Eduardo S.
TI The formalization and implementation of Adaptable Parsing Expression
   Grammars
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Extensible languages; Adaptable grammars; PEG
ID LANGUAGE; RECOGNITION; SEMANTICS; PURE
AB The term "extensible language" is especially used when a language allows the extension of its own concrete syntax and the definition of the semantics of new constructs. Most popular tools designed for automatic generation of syntactic analysers do not offer any adequate resources for the specification of extensible languages. When used in the implementation of features like syntax macro definitions, these tools usually impose severe restrictions. For example, it may be required that macro definitions and their use reside in different files; or it may be impossible to perform the syntax analysis in one single pass. We claim that one of the main reasons for these limitations is the lack of appropriate formal models for the definition of the syntax of extensible languages. This paper presents the design and formal definition of Adaptable Parsing Expression Grammars, an extension to the Parsing Expression Grammar (PEG) model that allows the manipulation of its own production rules during the analysis of an input string. The proposed model compares favourably with similar approaches for the definition of the syntax of extensible languages. An implementation of the model is also presented, simulating the behaviour of pacicrat parsers. Among the challenges for this implementation is the use of attributes and on the fly modifications on the production rules at parse time, features not present in standard PEG. This approach has been used on the definition of a real extensible language, and initial performance tests suggest that the model may work well in practice. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Reis, Leonardo V. S.] Univ Fed Ouro Preto, Dept Comp & Sistemas, Ouro Preto, Brazil.
   [Bigonha, Roberto S.] Univ Fed Minas Gerais, Dept Ciencia Comp, Belo Horizonte, MG, Brazil.
   [Di Iorio, Vladimir O.; Amorim, Luis Eduardo S.] Univ Fed Vicosa, Dept Informat, Vicosa, MG, Brazil.
C3 Universidade Federal de Ouro Preto; Universidade Federal de Minas
   Gerais; Universidade Federal de Vicosa
RP Reis, LVS (corresponding author), Univ Fed Ouro Preto, Dept Comp & Sistemas, Ouro Preto, Brazil.
EM leo@decsi.ufop.br; bigonha@dcc.ufmg.br; vladimir@dpi.ufv.br;
   luis.amorim@ufv.br
OI Reis, Leonardo/0000-0002-1167-5332
CR Allen E., 2009, INT WORKSH FDN OBJ O
   Allen Eric., 2007, The Fortress Language Specification
   [Anonymous], 2002, THESIS MIT
   Becket R, 2008, LECT NOTES COMPUT SC, V4902, P182
   Boullier P., 1994, RR2322 INRIA PROJ CH
   Bravenboer M, 2008, SCI COMPUT PROGRAM, V72, P52, DOI 10.1016/j.scico.2007.11.003
   BURSHTEYN B, 1990, SIGPLAN NOTICES, V25, P45, DOI 10.1145/122193.122196
   BURSHTEYN B, 1992, SIGPLAN NOTICES, V27, P42, DOI 10.1145/130722.130724
   CABASINO S, 1992, SIGPLAN NOTICES, V27, P39, DOI 10.1145/141018.141037
   CHRISTIANSEN H, 1990, SIGPLAN NOTICES, V25, P35, DOI 10.1145/101356.101357
   Christiansen H., 1987, SYNTAX SEMANTICS EXT
   Christiansen H, 2009, LECT NOTES COMPUT SC, V5517, P488, DOI 10.1007/978-3-642-02478-8_61
   Ekman T, 2007, SCI COMPUT PROGRAM, V69, P14, DOI 10.1016/j.scico.2007.02.003
   Erdweg S, 2011, ACM SIGPLAN NOTICES, V46, P391, DOI 10.1145/2076021.2048099
   Ford B, 2004, ACM SIGPLAN NOTICES, V39, P111, DOI 10.1145/982962.964011
   Ford B, 2002, ACM SIGPLAN NOTICES, V37, P36, DOI 10.1145/583852.581483
   Grimm R, 2006, ACM SIGPLAN NOTICES, V41, P38, DOI 10.1145/1133981.1133987
   Jim T, 2010, ACM SIGPLAN NOTICES, V45, P417, DOI 10.1145/1707801.1706347
   Kats LCL, 2010, ACM SIGPLAN NOTICES, V45, P918, DOI 10.1145/1932682.1869535
   Knuth D. E., 1968, Mathematical Systems Theory, V2, P127, DOI 10.1007/BF01692511
   Koster C.H. A., 1971, ALGOL 68 IMPLEMENTAT, P95
   Parr T, 2011, ACM SIGPLAN NOTICES, V46, P425, DOI 10.1145/1993316.1993548
   PARR TJ, 1995, SOFTWARE PRACT EXPER, V25, P789, DOI 10.1002/spe.4380250705
   Redziejowski Roman, 2009, P CS P 2009 WORKSH, P514
   REPS T, 1983, ACM T PROGR LANG SYS, V5, P449, DOI 10.1145/2166.357218
   Ryu Sukyoung., 2009, PPPJ 09, P76, DOI DOI 10.1145/1596655.1596667
   Schwerdfeger A, 2010, LECT NOTES COMPUT SC, V5969, P184
   Schwerdfeger AC, 2009, ACM SIGPLAN NOTICES, V44, P199, DOI 10.1145/1543135.1542499
   SEATON C, 2007, CSTR07005 U BRIST
   Shutt JN, 1998, THESIS WORCHESTER PO
   Sloane AM, 2010, ELECTRON NOTES THEOR, V253, P205, DOI 10.1016/j.entcs.2010.08.043
   Stansifer P., 2011, P 11 WORKSH LANG DES
   ThomasW Reps, 1982, S PRINCIPLES PROGRAM, P169, DOI [10.1145/582153.582172, DOI 10.1145/582153.582172]
   van den Brand MGJ, 2002, LECT NOTES COMPUT SC, V2304, P143
   Van Wyk E, 2008, ELECTRON NOTES THEOR, V203, P103, DOI 10.1016/j.entcs.2008.03.047
   Vieira dos Santos Reis Leonardo Vieira, 2012, Programming Languages. Proceedings of the16th Brazilian Symposium, SBLP 2012, P72, DOI 10.1007/978-3-642-33182-4_7
   Visser E., 1997, P9706 U AMST PROGR R
   Visser Eelco., 1997, Scannerless Generalized-LR Parsing
   WATT DA, 1983, COMPUT J, V26, P142, DOI 10.1093/comjnl/26.2.142
   Wegbreit B., 1970, THESIS
   Zook D, 2004, LECT NOTES COMPUT SC, V3286, P1
NR 41
TC 3
Z9 3
U1 0
U2 6
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 15
PY 2014
VL 96
BP 191
EP 210
DI 10.1016/j.scico.2014.02.020
PN 2
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AT8JY
UT WOS:000345180900003
OA Green Published, Bronze
DA 2024-07-18
ER

PT J
AU Maio, P
   Silva, N
AF Maio, Paulo
   Silva, Nuno
TI An extensible argument-based ontology matching negotiation approach
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Ontology matching; Argumentation; Negotiation; Systems interoperability
ID ACCEPTABILITY
AB Computational systems operating in open, dynamic and decentralized environments are required to share data with previously unknown computational systems. Due to this ill specification and emergent operation the systems are required to share the data's respective schemas and semantics so that the systems can correctly manipulate, understand and reason upon the shared data. The schemas and semantics are typically provided by ontologies using specific semantics provided by the ontology language. Because computational systems adopt different ontologies to describe their domain of discourse, a consistent and compatible communication relies on the ability to reconcile (in run-time) the vocabulary used in their ontologies. Since each computational system might have its own perspective about what are the best correspondences between the adopted ontologies, conflicts can arise. To address such conflicts, computational systems may engage in any kind of negotiation process that is able to lead them to a common and acceptable agreement.
   This paper proposes an argumentation-based approach where the computational entities describe their own arguments according to a commonly agreed argumentation meta-model. In order to support autonomy and conceptual differences, the community argumentation model can be individually extended yet maintaining computational effectiveness. Based on the formal specification, a software development framework is proposed. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Maio, Paulo; Silva, Nuno] Polytech Porto, Sch Engn, GECAD Knowledge Engn & Decis Support Res Grp, P-4200072 Oporto, Portugal.
C3 Instituto Politecnico do Porto
RP Maio, P (corresponding author), Polytech Porto, Sch Engn, GECAD Knowledge Engn & Decis Support Res Grp, Rua Dr Bernardino de Almeida 431, P-4200072 Oporto, Portugal.
EM pam@isep.ipp.pt; nps@isep.ipp.pt
OI Maio, Paulo Alexandre/0000-0003-3887-286X
FU Portuguese project: COALESCE of MCTES-FCT [PTDC/EIA/74417/2006];
   Portuguese project: World Search of FEDER [QREN11495]; Fundação para a
   Ciência e a Tecnologia [PTDC/EIA/74417/2006] Funding Source: FCT
FX This work is partially supported by the Portuguese projects: COALESCE
   (PTDC/EIA/74417/2006) of MCTES-FCT and World Search (QREN11495) of
   FEDER. The authors would like to acknowledge Jorge Santos, Maria Joao
   Viamonte, Jorge Coelho and Besik Dundua for their useful counsels and
   Jane Walker for her revision of the document.
CR Amgoud L, 2008, INT J INTELL SYST, V23, P1062, DOI 10.1002/int.20307
   [Anonymous], 2006, Proceedings of the 15th International Conference on World Wide Web, DOI DOI 10.1145/1135777.1135786
   Baroni P, 2009, ARGUMENTATION IN ARTIFICIAL INTELLIGENCE, P25, DOI 10.1007/978-0-387-98197-0_2
   Bench-Capon TJM, 2003, J LOGIC COMPUT, V13, P429, DOI 10.1093/logcom/13.3.429
   BERNSTEIN A, 2005, TECHNICAL REPORT
   Bratman Michael., 1987, Intention, Plans, and
   Cayrol C, 2005, LECT NOTES COMPUT SC, V3571, P378
   Cayrol C, 2005, LECT NOTES COMPUT SC, V3571, P366
   Cayrol C, 2010, INT J INTELL SYST, V25, P83, DOI 10.1002/int.20389
   Doran P., 2010, 9 INT SEM WEB C ISWC
   DUNG PM, 1995, ARTIF INTELL, V77, P321, DOI 10.1016/0004-3702(94)00041-X
   Ngo D, 2012, LECT NOTES BUS INF P, V107, P79
   Euzenat J., 2007, ONTOLOGY MATCHING, DOI 10.1007/978-3-540-49612-0
   GALE D, 1962, AM MATH MON, V69, P9, DOI 10.2307/2312726
   Gruber ThomasR., 1992, WHAT IS ONTOLOGY
   GRUBER TR, 1993, KNOWL ACQUIS, V5, P199, DOI 10.1006/knac.1993.1008
   Hu W., 2005, Proc. KCAP Workshop on Integrating Ontologies, P43
   Ji Q., 2008, P 12 INT C INF PROC
   Jian N., 2005, PROC K CAP WORKSHOP, P87
   Kalfoglou Y., 2005, CROSI - Capturing Representing and Operationalising Semantic Integration'
   Karacapilidis N, 2001, INFORM SYST, V26, P259, DOI 10.1016/S0306-4379(01)00020-5
   Laera Loredana., 2007, Proceedings of the 6th international joint conference on Autonomous agents and multiagent systems, P228
   LEVENSHT.VI, 1965, DOKL AKAD NAUK SSSR+, V163, P845
   Maio Paulo, 2012, Theory and Applications of Formal Argumentation. First International Workshop, TAFA 2011. Revised Selected Papers, P163, DOI 10.1007/978-3-642-29184-5_11
   Maio P., 2011, Proceedings of the 2011 22nd International Conference on Database and Expert Systems Applications (DEXA 2011), P239, DOI 10.1109/DEXA.2011.37
   Maio P., 2012, THESIS U TRGSOS MONT
   Maio P, 2013, STUD COMPUT INTELL, V435, P161
   Maio P, 2009, KEOD 2009: PROCEEDINGS OF THE INTERNATIONAL CONFERENCE ON KNOWLEDGE ENGINEERING AND ONTOLOGY DEVELOPMENT, P293
   MUNKRES J, 1957, J SOC IND APPL MATH, V5, P32, DOI 10.1137/0105003
   Prakken H, 2010, ARGUM COMPUT, V1, P93, DOI 10.1080/19462160903564592
   Rahm E, 2001, VLDB J, V10, P334, DOI 10.1007/s007780100057
   Rahwan I, 2009, ARGUMENTATION IN ARTIFICIAL INTELLIGENCE, P1, DOI 10.1007/978-0-387-98197-0
   Russell R., 1918, U.S. Patent, Patent No. [1,261,167, 1261167]
   Saruladha K., 2011, International Journal of Computer Application, V34, P14
   Shvaiko P, 2005, LECT NOTES COMPUT SC, V3730, P146
   Silva N., 2005, WORKSH INT ONT 3 INT
   Stoilos G, 2005, LECT NOTES COMPUT SC, V3729, P624, DOI 10.1007/11574620_45
   Verheij B., 2002, ARXIVCS0207067
   Wooldridge M., 2009, An introduction to multiagent systems
NR 39
TC 7
Z9 8
U1 0
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 1
PY 2014
VL 95
SI SI
BP 3
EP 25
DI 10.1016/j.scico.2014.01.011
PN 1
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AS9RF
UT WOS:000344578600002
DA 2024-07-18
ER

PT J
AU Bauer, S
   Hennicker, R
   Legay, A
AF Bauer, Sebastian
   Hennicker, Rolf
   Legay, Axel
TI A meta-theory for component interfaces with contracts on ports
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 9th International Symposium on Formal Aspects of Component Software
   (FACS)
CY SEP 12-14, 2012
CL Mountain View, CA
DE Interface specifications; Contracts; Refinement; Compatibility; Modal
   I/O-transition systems
ID ASSUME-GUARANTEE VERIFICATION; MODEL CHECKING; REFINEMENT; BEHAVIOR
AB We show how the abstract concept of a labeled interface theory can be canonically extended to an abstract framework for component interfaces with ports. The resulting theory satisfies itself the general laws of an interface theory for composition, refinement and communication compatibility. The ports of a component interface represent the interaction points of a component. Each port is equipped with a contract specifying the assumptions on and the guarantees for the environment of a component. We study reliable component interfaces and we provide methodological guidelines how to design reliable interfaces and how to adapt them to changing environments. Two instances of our approach are presented. First, we consider modal component interfaces such that component behaviors and the assume and guarantee behaviors of ports are given in terms of modal I/O-transition systems with weak notions of refinement and compatibility. The second instance uses I/O-predicates as interface specifications. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Bauer, Sebastian; Hennicker, Rolf] Univ Munich, D-81377 Munich, Germany.
   [Legay, Axel] INRIA IRISA Rennes, Rennes, France.
C3 University of Munich; Universite de Rennes
RP Hennicker, R (corresponding author), Univ Munich, Marchioninistr 15, D-81377 Munich, Germany.
EM bauerse@pst.ifi.lmu.de; hennicke@pst.ifi.lmu.de; axel.legay@inria.fr
RI Bauer, Sebastian/HHR-9319-2022
CR Allen R., 1997, ACM Transactions on Software Engineering and Methodology, V6, P213, DOI 10.1145/258077.258078
   [Anonymous], 1997, The Theory and Practice of Concurrency
   [Anonymous], 2001, LNCS, DOI [DOI 10.1007/3-540-45449-7_11, DOI 10.1007/3-540-45449-711]
   Back R.-J., 1999, REFINEMENT CALCULUS
   Basu A, 2011, IEEE SOFTWARE, V28, P41, DOI 10.1109/MS.2011.27
   Bauer SS, 2012, LECT NOTES COMPUT SC, V7212, P43, DOI 10.1007/978-3-642-28872-2_3
   Bauer SS, 2011, THEOR COMPUT SCI, V412, P3101, DOI 10.1016/j.tcs.2011.04.007
   Bauer SS, 2011, ELECTRON PROC THEOR, P1, DOI 10.4204/EPTCS.46.1
   Bauer SS, 2010, LECT NOTES COMPUT SC, V6015, P175, DOI 10.1007/978-3-642-12002-2_15
   Bauer Sebastian S., 2012, THESIS LUDWIG MAXIMI
   Bauer Sebastian S., 2012, LECT NOTES COMPUT SC, V7684, P19
   Bensalem S., 2010, 2010 Formal Methods in Computer-Aided Design (FMCAD 2010), P257
   Bensalem S, 2008, LECT NOTES COMPUT SC, V5311, P64, DOI 10.1007/978-3-540-88387-6_7
   Benveniste A, 2008, LECT NOTES COMPUT SC, V5382, P200, DOI 10.1007/978-3-540-92188-2_9
   Caillaud B, 2011, THEOR COMPUT SCI, V412, P4373, DOI 10.1016/j.tcs.2011.05.010
   Cau A, 1996, ACTA INFORM, V33, P153, DOI 10.1007/s002360050039
   Cobleigh JM, 2003, LECT NOTES COMPUT SC, V2619, P331
   de Alfaro L, 2005, NATO SCI SER II-MATH, V195, P83
   De Alfaro L, 2002, LECT NOTES COMPUT SC, V2491, P108
   de Alfaro L., 2001, Software Engineering Notes, V26, P109, DOI 10.1145/503271.503226
   Dijkstra E. W., 1975, LECT NOTES COMPUTER, V46, P111, DOI [10.1007/3-540-07994, DOI 10.1007/3-540-07994]
   Emmi M, 2008, LECT NOTES COMPUT SC, V5014, P116
   Etessami K, 2007, LECT NOTES COMPUT SC, V4424, P50
   Goessler G, 2009, SEFM 2009: SEVENTH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING AND FORMAL METHODS, P295, DOI 10.1109/SEFM.2009.26
   Haddad S., 2013, LECT NOTES  IN PRESS
   Hennicker R, 2010, ELECTRON NOTES THEOR, V260, P125, DOI 10.1016/j.entcs.2009.12.035
   Hoare C. A. R., 1998, Unifying Theories of Programming
   HUTTEL H, 1989, LECT NOTES COMPUT SC, V363, P163
   JONES CB, 1981, THESIS OXFORD U COMP
   Kwiatkowska M, 2010, LECT NOTES COMPUT SC, V6015, P23, DOI 10.1007/978-3-642-12002-2_3
   LAMPORT L, 1990, ACM T PROGR LANG SYS, V12, P396, DOI 10.1145/78969.78970
   Larsen U, 1988, Eur J Popul, V3, P203, DOI 10.1109/LICS.1988.5119
   Liu ZM, 2004, INT FED INFO PROC, V155, P349
   Meng S, 2012, SCI COMPUT PROGRAM, V77, P799, DOI 10.1016/j.scico.2011.04.002
   MEYER B, 1992, COMPUTER, V25, P40, DOI 10.1109/2.161279
   MISRA J, 1981, IEEE T SOFTWARE ENG, V7, P417, DOI 10.1109/TSE.1981.230844
   Nyman U, 2007, LECT NOTES COMPUT SC, V4421, P64
   Parizek P, 2007, ELECTRON NOTES THEOR, V182, P139, DOI 10.1016/j.entcs.2006.09.036
   Plasil F, 2002, IEEE T SOFTWARE ENG, V28, P1056, DOI 10.1109/TSE.2002.1049404
   Quinton S, 2008, SEFM 2008: SIXTH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING AND FORMAL METHODS, PROCEEDINGS, P377, DOI 10.1109/SEFM.2008.28
   Raclet JB, 2011, FUND INFORM, V108, P119, DOI 10.3233/FI-2011-416
   Xu QW, 1994, LECT NOTES COMPUT SC, V836, P267
NR 42
TC 3
Z9 3
U1 0
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 1
PY 2014
VL 91
SI SI
BP 70
EP 89
DI 10.1016/j.scico.2013.09.013
PN A
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA AK4NL
UT WOS:000338401300004
OA hybrid
DA 2024-07-18
ER

PT J
AU Li, SL
   Tan, G
AF Li, Siliang
   Tan, Gang
TI Exception analysis in the Java Native Interface
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Foreign Function Interface; Java Native Interface; Exception checking;
   Static analysis
ID STATIC ANALYSIS; LANGUAGE; PROPAGATION; CHECKING
AB A Foreign Function Interface (FFI) allows one host programming language to interoperate with another foreign language. It enables efficient software development by permitting developers to assemble components in different languages. One typical FFI is the Java Native Interface (JNI), through which Java programs can invoke native-code components developed in C, C++, or assembly code. Although FFIs bring convenience to software development, interface code developed in FFIs is often error prone because of the lack of safety and security enforcement. This paper introduces a static-analysis framework, Turbojet, which finds exception-related bugs in JNI applications. It finds bugs of inconsistent exception declarations and bugs of mishandling JNI exceptions. Turbojet is carefully engineered to achieve both high efficiency and accuracy. We have applied Turbojet on a set of benchmark programs and identified many errors. We have also implemented a practical Eclipse plug-in based on Turbojet that can be used by JNI programmers to find errors in their code. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Li, Siliang; Tan, Gang] Lehigh Univ, Packard Lab, PC Rossin Coll Engn & Appl Sci, Bethlehem, PA 18015 USA.
C3 Lehigh University
RP Li, SL (corresponding author), Lehigh Univ, Packard Lab, PC Rossin Coll Engn & Appl Sci, 19 Mem Dr West, Bethlehem, PA 18015 USA.
OI Tan, Gang/0000-0001-6109-6091
FU Division of Computing and Communication Foundations; Direct For Computer
   & Info Scie & Enginr [1217710] Funding Source: National Science
   Foundation
CR [Anonymous], 2009, Posix for Java
   [Anonymous], 2004, JNI Binding to FlushSpread and Spread
   [Anonymous], 2009, PYTHON C API REFEREN
   Ashcraft K, 2002, P IEEE S SECUR PRIV, P143, DOI 10.1109/SECPRI.2002.1004368
   Blume M., 2001, Electronic Notes in Theoretical Computer Science, V59, DOI 10.1016/S1571-0661(05)80452-9
   Bosman E, 2011, LECT NOTES COMPUT SC, V6961, P1, DOI 10.1007/978-3-642-23644-0_1
   Bravenboer M, 2009, ISSTA 2009: INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, P1
   Bruntink M., 2006, 28th International Conference on Software Engineering Proceedings, P242, DOI 10.1145/1134285.1134320
   Chakravarty E.M., 2005, HASKELL 98 FOREIGN F
   Chang B.-M., 2001, Proceedings of the 2001 ACM Symposium on Applied Computing, P620
   Chang W, 2008, CCS'08: PROCEEDINGS OF THE 15TH ACM CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P39
   Das M, 2002, ACM SIGPLAN NOTICES, V37, P57, DOI 10.1145/543552.512538
   Elford C., 2010, INTEGRATED DEBUGGER
   Enck W., 2010, USENIX S OP SYST DES
   Fisher Kathleen., 2001, Electronic Notes in Theoretical Computer Science, V59, P3, DOI DOI 10.1016/S1571-0661(05)80450-5
   Furr M, 2006, LECT NOTES COMPUT SC, V3924, P309
   Furr M, 2005, ACM SIGPLAN NOTICES, V40, P62, DOI 10.1145/1064978.1065019
   Hirzel M, 2007, ACM SIGPLAN NOTICES, V42, P19, DOI 10.1145/1297105.1297030
   Jovanovic N, 2006, P IEEE S SECUR PRIV, P258, DOI 10.1109/SP.2006.29
   Kondoh G, 2008, P 2008 INT S SOFTW T, P109
   Lee B, 2010, ACM SIGPLAN NOTICES, V45, P36, DOI 10.1145/1809028.1806601
   Lee B, 2009, ACM SIGPLAN NOTICES, V44, P207, DOI 10.1145/1639949.1640105
   Leroy X, 2006, ACM SIGPLAN NOTICES, V41, P42, DOI 10.1145/1111320.1111042
   Leroy Xavier., 2008, The Objective Caml system
   Li DaFeng Li DaFeng, 2011, China Condiment, P1
   Li SL, 2011, ACM SIGPLAN NOTICES, V46, P345, DOI 10.1145/2076021.2048095
   Li SL, 2009, CCS'09: PROCEEDINGS OF THE 16TH ACM CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P442
   Liang S., 1999, Java native interface: programmers guide and reference, V1
   Livshits VB, 2005, USENIX ASSOCIATION PROCEEDINGS OF THE 14TH USENIX SECURITY SYMPOSIUM, P271
   Malayeri D, 2006, LECT NOTES COMPUT SC, V4119, P200
   Muthukumaran D., 2012, Proceedings of the 2012 ACM conference on Computer and communications security, P145
   Necula GC, 2002, LECT NOTES COMPUT SC, V2304, P213
   Necula GC, 2002, ACM SIGPLAN NOTICES, V37, P128, DOI 10.1145/565816.503286
   Newsome J., 2005, NETWORK DISTRIBUTED
   Nguyen-tuong A., 2005, 20 IFIP INT INFORM S, P372
   Norrish M., 1998, Ph. D. Dissertation
   Prabhu P, 2011, LECT NOTES COMPUT SC, V6813, P583, DOI 10.1007/978-3-642-22655-7_27
   Reps T., 1995, Conference Record of POPL'95: 22nd ACM SIGPLAN-SIGACT Symposium Principles of Programming Languages, P49, DOI 10.1145/199448.199462
   Robillard MP, 2003, ACM T SOFTW ENG METH, V12, P191, DOI 10.1145/941566.941569
   Rubio-González C, 2009, ACM SIGPLAN NOTICES, V44, P270, DOI 10.1145/1543135.1542506
   Saxena P, 2010, P IEEE S SECUR PRIV, P513, DOI 10.1109/SP.2010.38
   Sharir Micha, 1981, PROGRAM FLOW ANAL TH
   Siefers J, 2010, PROCEEDINGS OF THE 17TH ACM CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY (CCS'10), P201, DOI 10.1145/1866307.1866331
   Tan G, 2008, P 17 C SEC S SS 08, P365
   Tan G, 2006, P 2006 IEEE INT S SE, P97
   Tan G, 2007, ACM SIGPLAN NOTICES, V42, P39, DOI 10.1145/1297105.1297031
   Tan G, 2010, LECT NOTES COMPUT SC, V6461, P114, DOI 10.1007/978-3-642-17164-2_9
   Wang XR, 2008, ANN COMPUT SECURITY, P289, DOI 10.1109/ACSAC.2008.37
   WEGMAN MN, 1991, ACM T PROGR LANG SYS, V13, P181, DOI 10.1145/103135.103136
   Weimer W, 2008, ACM T PROGR LANG SYS, V30, DOI 10.1145/1330017.1330019
   Xie YC, 2006, USENIX Association Proceedings of the 15th USENIX Security Symposium, P179
   Xu W, 2006, USENIX ASSOCIATION PROCEEDINGS OF THE 15TH USENIX SECURITY SYMPOSIUM, P121
NR 52
TC 6
Z9 7
U1 0
U2 16
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 1
PY 2014
VL 89
BP 273
EP 297
DI 10.1016/j.scico.2014.01.018
PN C
PG 25
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AJ8CB
UT WOS:000337929200004
OA Bronze
DA 2024-07-18
ER

PT J
AU Panach, JI
   Aquino, N
   Pastor, O
AF Ignacio Panach, Jose
   Aquino, Nathalie
   Pastor, Oscar
TI A proposal for modelling usability in a holistic MDD method
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Model-driven development; Usability; Conceptual model
ID DRIVEN; TRANSFORMATION; REQUIREMENTS; INFORMATION
AB Holistic methods for Model-Driven Development (MDD) aim to model all the system features in a conceptual model. This conceptual model is the input for a model compiler that can generate software systems by means of automatic transformations. However, in general, MDD methods focus on modelling the structure and functionality of systems, relegating the interaction and usability features to manual implementations at the last steps of the software development process. Some usability features are strongly related to the functionality of the system and their inclusion is not so easy. In order to facilitate the inclusion of functional usability features from the first steps of the development process and bring closer MDD methods to the holistic perspective, we propose a Usability Model. The Usability Model gathers conceptual primitives that represent functional usability features in a sufficiently abstract way so that the model can be used with different holistic MDD methods. This paper defines all the primitives that can be used to represent functional usability features. Moreover, we have defined a process to include the Usability Model in any MDD method without affecting its existing conceptual model. The proposal is based on model-to-model and model-to-code transformations. As proof of concept, we have applied our proposal to an existing MDD method called the OO-method and we have measured its efficiency. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Ignacio Panach, Jose] Univ Valencia, Escola Tecn Super Engn, Dept Informat, E-46100 Valencia, Spain.
   [Aquino, Nathalie] Univ Catolica Nuestra Senora Asuncion, Dept Elect & Informat, Asuncion, Paraguay.
   [Aquino, Nathalie; Pastor, Oscar] Univ Politecn Valencia, PROS, Ctr Invest Metodos Prod Software, Valencia 46022, Spain.
C3 University of Valencia; Universidad Catolica Nuestra Senora de la
   Asuncion; Universitat Politecnica de Valencia
RP Panach, JI (corresponding author), Univ Valencia, Escola Tecn Super Engn, Dept Informat, Ave Univ S-N, E-46100 Valencia, Spain.
EM joigpana@uv.es; naquino@pros.upv.es; opastor@pros.upv.es
RI Panach, Jose Ignacio/ABF-2099-2020; Pastor Lopez, Oscar/S-4216-2016;
   Aquino, Nathalie/C-1798-2017
OI Panach, Jose Ignacio/0000-0002-7043-6227; Pastor Lopez,
   Oscar/0000-0002-1320-8471; Aquino, Nathalie/0000-0001-8065-3236
FU MICINN [PROS-Req TIN2010-19130-C02-02]; UV [UV-INV-PRECOMP13-115032];
   GVA [ORCA PROMETEO/2009/015]; ERDF; ITEA2 Call 3 UsiXML [20080026];
   MITYC [TSI-020400-2011-20]
FX This work has been developed with the support of MICINN (PROS-Req
   TIN2010-19130-C02-02), UV (UV-INV-PRECOMP13-115032), GVA (ORCA
   PROMETEO/2009/015), and co-financed with ERDF. We acknowledge the
   support of the ITEA2 Call 3 UsiXML (20080026) and funding by the MITYC
   (TSI-020400-2011-20).
CR Acerbis R, 2007, LECT NOTES COMPUT SC, V4607, P501
   [Anonymous], 2001, 912612001 ISOIEC
   Bass Len, 2012, SEI S SOFTW
   Brajnik G., 2010, IS UML APPROPRIATE I, P6
   Cleland-Huang J, 2005, PROC INT CONF SOFTW, P362
   DAVIS FD, 1993, INT J MAN MACH STUD, V38, P475, DOI 10.1006/imms.1993.1022
   Embley DW, 2011, HANDBOOK OF CONCEPTUAL MODELING: THEORY, PRACTICE AND RESEARCH CHALLENGES, P3
   Escalona MJ, 2008, IEEE T SOFTWARE ENG, V34, P377, DOI 10.1109/TSE.2008.27
   Fernandez A, 2013, J SYST SOFTWARE, V86, P161, DOI 10.1016/j.jss.2012.07.043
   Folmer E, 2004, J SYST SOFTWARE, V70, P61, DOI 10.1016/S0164-1212(02)00159-0
   Frey A.G., 2011, P 3 ACM SIGCHI S ENG, P265
   Gull H., 2010, INT J COMPUTER SCI I, V8, P46
   Panach JI, 2008, LECT NOTES COMPUT SC, V5231, P498, DOI 10.1007/978-3-540-87877-3_36
   Juristo N, 2007, J SYST SOFTWARE, V80, P1506, DOI 10.1016/j.jss.2007.01.006
   Lawrence B, 2001, IEEE SOFTWARE, V18, P62, DOI 10.1109/52.965804
   Limbourg Q, 2004, ENGINEERING ADVANCED WEB APPLICATIONS, P325
   Molina F, 2009, ADV ENG SOFTW, V40, P1306, DOI 10.1016/j.advengsoft.2009.01.018
   Molina P.J., 2002, P COMP AID DES US IN
   Olivé A, 2005, LECT NOTES COMPUT SC, V3520, P1
   Panach J. I., 2011, USER INTERFACE DESCR, P68
   Pastor O., 2007, MODEL DRIVEN ARCHITE
   Luna ER, 2010, J WEB ENG, V9, P132
   Roder H., 2011, P 2 INT WORKSH PATT, P12
   Seffah A, 2009, HUM-COMPUT INT-SPRIN, P1, DOI 10.1007/978-1-84800-907-3_1
   Selic B, 2003, IEEE SOFTWARE, V20, P19, DOI 10.1109/MS.2003.1231146
   Sendall S, 2003, IEEE SOFTWARE, V20, P42, DOI 10.1109/MS.2003.1231150
   Sottet J.-S., 2007, P ENG INT SYST, P22
   Sousa K, 2007, LECT NOTES COMPUT SC, V4849, P112
   Taleb M., 2010, E MINDS INT J HUMAN, V2
   Tao YL, 2007, LECT NOTES ENG COMP, P1066
   Wang X., 2008, IEEE IFIP INT C EMB
NR 31
TC 10
Z9 10
U1 0
U2 6
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 15
PY 2014
VL 86
SI SI
BP 74
EP 88
DI 10.1016/j.scico.2013.06.008
PG 15
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AG7OW
UT WOS:000335608500006
OA Green Published, hybrid
DA 2024-07-18
ER

PT J
AU Sijtema, M
   Belinfante, A
   Stoelinga, MIA
   Marinelli, L
AF Sijtema, M.
   Belinfante, A.
   Stoelinga, M. I. A.
   Marinelli, L.
TI Experiences with formal engineering: Model-based specification,
   implementation and testing of a software bus at Neopost
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Formal methods; Formal engineering; Model-based testing; IOCO; JTorX;
   mCRL2; LTSmin; CADP; evaluator4; MCL; LPS; Ips2torx
ID TOOL
AB We report on the actual industrial use of formal methods during the development of a software bus. During an internship at Neopost Inc., of 14 weeks, we developed the server component of a software bus, called the XBus, using formal methods during the design, validation and testing phase: we modeled our design of the XBus in the process algebra mCRL2, validated the design using the mCRL2-simulator, and fully automatically tested our implementation with the model-based test tool JTorX. This resulted in a well-tested software bus with a maintainable architecture. Writing the model (m(dev)), simulating it, and testing the implementation with JTorX only took 17% of the total development time. Moreover, the errors found with model-based testing would have been hard to find with conventional test methods. Thus, we show that formal engineering can be feasible, beneficial and cost-effective.
   The findings above, reported earlier by us in (Sijtema et al., 2011) [1], were well-received, also in industrially oriented conferences (Ferreira and Romanenko, 2010) [2] and [3]. In this paper, we look back on the case study, and carefully analyze its merits and shortcomings. We reflect on (1) the added benefits of model checking, (2) model completeness and (3) the quality and performance of the test process.
   Thus, in a second phase, after the internship, we model checked the XBus protocol-this was not done in [1] since the Neopost business process required a working implementation after 14 weeks. We used the CADP tool evaluator4 to check the behavioral requirements obtained during the development. Model checking did not uncover errors in model m(dev), but revealed that model m(dev) was neither complete nor optimized: in particular, requirements to the so-called bad weather behavior (exceptions, unexpected inputs, etc.) were missing. Therefore, we created several improved models, checked that we could validate them, and used them to analyze quality and performance of the test process. Model checking was expensive: it took us approx. 4 weeks in total, compared to 3 weeks for the entire model-based testing approach during the internship.
   In the second phase, we analyzed the quality and performance of the test process, where we looked at both code and model coverage. We found that high code coverage (almost 100%) is in most cases obtained within 1000 test steps and 2 minutes, which matches the fact that the faults in the XBus were discovered within a few minutes.
   Summarizing, we firmly believe that the formal engineering approach is cost-effective, and produces high quality software products. Model checking does yield significantly better models, but is also costly. Thus, system developers should trade off higher model quality against higher costs. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Belinfante, A.; Stoelinga, M. I. A.] Univ Twente, Fac Comp Sci, NL-7500 AE Enschede, Netherlands.
   [Sijtema, M.] Systemat Software, The Hague, Netherlands.
   [Marinelli, L.] Neopost, Austin, TX USA.
C3 University of Twente
RP Belinfante, A (corresponding author), Univ Twente, Fac Comp Sci, POB 217, NL-7500 AE Enschede, Netherlands.
EM marten@sytematic.nl; Axel.Belinfante@gmail.com;
   M.I.A.Stoelinga@utwente.nl; l.marinelli@neopost.com
OI Stoelinga, Marielle/0000-0001-6793-8165
FU NWO [Dn 63-257, STW 12238]; EU [PNO 318490, 318003]
FX This research has been partially funded by NWO Dn 63-257 (ROCKS), STW
   12238 (ArRangeer), and EU under grants PNO 318490 (SENSATION) and 318003
   (TREsPASS).
CR [Anonymous], 2011, BITS CHIPS C EMB SYS
   Belinfante A, 2005, LECT NOTES COMPUT SC, V3472, P391
   Belinfante A, 1999, INT FED INFO PROC, V21, P179
   Belinfante A, 2010, LECT NOTES COMPUT SC, V6015, P266, DOI 10.1007/978-3-642-12002-2_21
   Bergstra J.A., 1985, P CWI S MATH COMP SC
   Blom S.C.C., 2009, TRCTIT0930
   Bohnenkamp H.C., 2008, P 7 ACM INT C EMB SO, P227, DOI DOI 10.1145/1450058.1450089
   Briones L. Brandan, 2007, THESIS U TWENTE
   Cofer D.D., 2009, LNCS, V5596
   David A, 2009, SECOND INTERNATIONAL CONFERENCE ON SOFTWARE TESTING, VERIFICATION, AND VALIDATION, PROCEEDINGS, P61, DOI 10.1109/ICST.2009.38
   Ferreira M., 2010, PROGRAMME BOOKLET 16
   Frantzen L, 2006, LECT NOTES COMPUT SC, V4262, P40
   Garavel H., 2001, International Journal on Software Tools for Technology Transfer, V3, P314, DOI 10.1007/s100090100044
   Garavel H, 2007, LECT NOTES COMPUT SC, V4590, P158
   Grieskamp W, 2009, LECT NOTES COMPUT SC, V5826, P97, DOI 10.1007/978-3-642-05031-2_7
   Groote J.F., 2008, P INT WORKSH ADV SOF, p5/1
   Hansen HH, 2010, INNOV SYST SOFTW ENG, V6, P83, DOI 10.1007/s11334-009-0116-1
   Hartman A., 2004, Software Engineering Notes, V29, P129, DOI 10.1145/1013886.1007529
   Hartman A., 2002, TECHNICAL REPORT
   Kowalewski S., 2010, LNCS, V6371
   Larsen K.G., 2004, PERSPECTIVES MODEL B, V04371
   Lynch N.A., 2000, LNCS, V1790
   Mateescu R, 2008, LECT NOTES COMPUT SC, V5014, P148, DOI 10.1007/978-3-540-68237-0_12
   Myers Glenford J., 2011, The Art of Software Testing
   ROOK P, 1986, SOFTWARE ENG J, V1, P7, DOI 10.1049/sej.1986.0003
   Sijtema M, 2011, LECT NOTES COMPUT SC, V6959, P117, DOI 10.1007/978-3-642-24431-5_10
   Timmer M., 2011, NATO SCI PEACE SECUR
   Tretmans Jan, 2008, Formal Methods and Testing. An Outcome of the FORTEST Network. Revised Selected Papers, P1, DOI 10.1007/978-3-540-78917-8_1
   Tretmans J, 1996, SOFTWARE-CONC TOOL, V17, P103
   Tretmans J, 2003, 1 EUR C MOD DRIV SOF, P31
   van der Bijl H.M., 2004, LNCS, V2931, P86
   Veanes Margus, 2008, Formal Methods and Testing. An Outcome of the FORTEST Network. Revised Selected Papers, P39, DOI 10.1007/978-3-540-78917-8_2
NR 32
TC 7
Z9 7
U1 1
U2 18
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 1
PY 2014
VL 80
BP 188
EP 209
DI 10.1016/j.scico.2013.04.009
PN A
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 292FG
UT WOS:000329887000013
OA Green Submitted, Green Published, hybrid
DA 2024-07-18
ER

PT J
AU Bertran, B
   Bruneau, J
   Cassou, D
   Loriant, N
   Balland, E
   Consel, C
AF Bertran, Benjamin
   Bruneau, Julien
   Cassou, Damien
   Loriant, Nicolas
   Balland, Emilie
   Consel, Charles
TI DiaSuite: A tool suite to develop Sense/Compute/Control applications
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Domain-specific design language; Tool-based development methodology;
   Generative programming; Pervasive computing
AB We present DiaSuite, a tool suite that uses a software design approach to drive the development process. DiaSuite focuses on a specific domain, namely Sense/Compute/Control (SCC) applications. It comprises a domain-specific design language, a compiler producing a Java programming framework, a 2D-renderer to simulate an application, and a deployment framework. We have validated our tool suite on a variety of concrete applications in areas including telecommunications, building automation, robotics and avionics. (C) 2012 Elsevier B.V. All rights reserved.
C1 [Bertran, Benjamin; Bruneau, Julien; Cassou, Damien; Balland, Emilie; Consel, Charles] INRIA Bordeaux Sud Ouest, F-33405 Talence, France.
   [Loriant, Nicolas] Univ London Imperial Coll Sci Technol & Med, London SW7 2AZ, England.
C3 Imperial College London
RP Balland, E (corresponding author), INRIA Bordeaux Sud Ouest, 351 Cours Liberat, F-33405 Talence, France.
EM benjamin.bertran@inria.fr; julien.bruneau@inria.fr;
   damien.cassou@inria.fr; nloriant@doc.ic.ac.ik; emilie.balland@inria.fr;
   charles.consel@inria.fr
RI Pettré, Julien/AAB-2590-2022
CR [Anonymous], 2007, The Definitive ANTLR Reference: Building Domain-Specific Languages
   [Anonymous], 2004, WEB SERVICES ARCHITE
   [Anonymous], TECHNICAL REPORT
   [Anonymous], P AUSTR C ROB AUT AC
   [Anonymous], 2006, P INT C DISTR COMP S, DOI DOI 10.1109/ICDCSW.2006.41
   Bertran Benjamin, 2009, ICIN 09
   Bertran Benjamin, 2010, ICC 10
   Brichau J, 2010, SCI COMPUT PROGRAM, V75, P232, DOI 10.1016/j.scico.2009.11.005
   Bruneau Julien, 2010, MOBIQUITOUS 10
   Cassou Damien, 2010, 2010 8th IEEE International Conference on Pervasive Computing and Communications Workshops (PERCOM Workshops), P820, DOI 10.1109/PERCOMW.2010.5470550
   Cassou D, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P431, DOI 10.1145/1985793.1985852
   Cassou Damien, 2011, DSLROB 11
   Cassou Damien, 2011, IEEE T SOFTWARE ENG, V99
   Cassou Damien., 2009, GPCE '09: Proceedings of the 8th International Conference on Generative Programming and Component Engineering, P137
   Chen Guanling., 2002, 4 IEEE WORKSHOP MOBI, P105, DOI DOI 10.1109/MCSA.2002.1017490
   Dey AK, 2001, HUM-COMPUT INTERACT, V16, P97, DOI 10.1207/S15327051HCI16234_02
   Downing T., 1998, JAVA RMI REMOTE METH
   Drey Z, 2009, LECT NOTES COMPUT SC, V5658, P78, DOI 10.1007/978-3-642-03034-5_5
   Ekman Torbjorn., 2007, OOPSLA '07, P773
   Garlan D., 2002, IEEE Pervasive Computing, V1, P22, DOI 10.1109/MPRV.2002.1012334
   Gatti S, 2011, LECT NOTES COMPUT SC, V6603, P217, DOI 10.1007/978-3-642-19811-3_16
   Henricksen K, 2004, SECOND IEEE ANNUAL CONFERENCE ON PERVASIVE COMPUTING AND COMMUNICATIONS, PROCEEDINGS, P77, DOI 10.1109/PERCOM.2004.1276847
   Jakob H, 2011, LECT NOTES COMPUT SC, V6723, P92, DOI 10.1007/978-3-642-21387-8_8
   JOUVE W, 2009, PERCOM 09, P1
   Judd G, 2003, PROCEEDINGS OF THE FIRST IEEE INTERNATIONAL CONFERENCE ON PERVASIVE COMPUTING AND COMMUNICATIONS (PERCOM 2003), P133, DOI 10.1109/PERCOM.2003.1192735
   Khomh F, 2011, J SYST SOFTWARE, V84, P559, DOI 10.1016/j.jss.2010.11.921
   LEI H., 2002, SIGMOBILE Mob. Comput. Commun. Rev, V6, P45, DOI DOI 10.1145/643550.643554
   LUCKHAM DC, 1995, IEEE T SOFTWARE ENG, V21
   Martynova Marina., 2006, Mergers Acquisitions in Europe, P1
   McFadden T, 2005, THIRD IEEE INTERNATIONAL CONFERENCE ON PERVASIVE COMPUTING AND COMMUNICATIONS, PROCEEDINGS, P300, DOI 10.1109/PERCOM.2005.10
   Mercadal J, 2010, ACM SIGPLAN NOTICES, V45, P47, DOI 10.1145/1932682.1869465
   Morla R, 2004, IEEE PERVAS COMPUT, V3, P48, DOI 10.1109/MPRV.2004.1321028
   O'Neill E, 2004, FIRST INTERNATIONAL CONFERENCE ON TESTBEDS AND RESEARCH INFRASTRUCTURES FOR THE DEVELOPMENT OF NETWORKS AND COMMUNITIES, PROCEEDINGS, P60
   Ranganathan A, 2005, Third IEEE International Conference on Pervasive Computing and Communications, Proceedings, P7, DOI 10.1109/PERCOM.2005.26
   Schmidt A, 1999, LECT NOTES COMPUT SC, V1707, P89
   Schmidt DC, 2006, COMPUTER, V39, P25, DOI 10.1109/MC.2006.58
   Schooler E., 2002, 3261 RFC
   Serral E, 2010, PERVASIVE MOB COMPUT, V6, P254, DOI 10.1016/j.pmcj.2009.07.006
   Shaw M., 1995, SIGSOFT Software Engineering Notes, V20, P27, DOI 10.1145/225907.225911
   Sundresh S, 2004, PROC ANNU SIMUL SYMP, P221, DOI 10.1109/SIMSYM.2004.1299486
   Taylor Richard N., 2009, SOFTWARE ARCHITECTUR
   Ubayashi N., 2010, Proceedings of the 32nd ACM/IEEE International Conference on Software Engineering, V1, P75
NR 42
TC 31
Z9 32
U1 0
U2 34
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 1
PY 2014
VL 79
SI SI
BP 39
EP 51
DI 10.1016/j.scico.2012.04.001
PG 13
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 246RH
UT WOS:000326556300004
OA hybrid, Green Submitted
DA 2024-07-18
ER

PT J
AU Cordy, JR
   Roy, CK
AF Cordy, James R.
   Roy, Chanchal K.
TI Tuning research tools for scalability and performance: The NiCad
   experience
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Clone detection; Longest common subsequence; Optimization; NiCad
ID INCREMENTAL CLONE DETECTION; CODE; SOFTWARE; SYSTEM; TREES
AB Clone detection is a research technique for analyzing software systems for similarities, with applications in software understanding, maintenance, evolution, license enforcement and many other issues. The NiCad near-miss clone detection method has been shown to yield highly accurate results in both precision and recall. However, its naive two-step method, involving a parsing first step to identify and normalize code fragments, followed by a text line-based second step using longest common subsequence (LCS) to compare fragments, has proven difficult to migrate to the efficiency and scalability required for large scale research applications. Rather than presenting the NiCad tool itself in detail, this paper focuses on our experience in migrating NiCad from an initial rapid prototype to a practical scalable research tool. The process has increased overall performance by a factor of up to 40 and clone detection speed by a factor of over 400, while reducing memory and processor requirements to fit on a standard laptop. We apply a sequence of four different kinds of performance optimizations and analyze the effect of each optimization in detail. We believe that the lessons of our experience in migrating NiCad from research prototype to production performance may be beneficial to others who are facing a similar problem. (C) 2011 Elsevier B.V. All rights reserved.
C1 [Cordy, James R.] Queens Univ, Sch Comp, Kingston, ON, Canada.
   [Roy, Chanchal K.] Univ Saskatchewan, Dept Comp Sci, Saskatoon, SK S7N 0W0, Canada.
C3 Queens University - Canada; University of Saskatchewan
RP Cordy, JR (corresponding author), Queens Univ, Sch Comp, Kingston, ON, Canada.
EM cordy@cs.queensu.ca
RI Cordy, James R/G-9736-2011
FU Natural Sciences and Engineering Research Council of Canada (NSERC); IBM
   Center for Advanced Studies faculty award
FX This work is supported in part by the Natural Sciences and Engineering
   Research Council of Canada (NSERC), and by an IBM Center for Advanced
   Studies faculty award.
CR [Anonymous], 2010, LONGEST COMMON SUBSE
   Baxter ID, 2002, SCAM 2002: SECOND IEEE INTERNATIONAL WORKSHOP ON SOURCE CODE ANALYSIS MANIPULATION, PROCEEDINGS, P3, DOI 10.1109/SCAM.2002.1134100
   Baxter ID, 1998, PROC IEEE INT CONF S, P368, DOI 10.1109/ICSM.1998.738528
   Bellon S, 2007, IEEE T SOFTWARE ENG, V33, P577, DOI 10.1109/TSE.2007.70725
   Cordin J., 2004, Ecole Nationale des Travaux Publics de l'Etat, p, P1
   Cordy J.R., 2011, NICAD DOWNLOAD PAGE
   Cordy J.R., 2011, ICPC, P217
   Cordy JR, 2006, SCI COMPUT PROGRAM, V61, P190, DOI 10.1016/j.scico.2006.04.002
   Cordy JR, 2011, CONF PROC INT SYMP C, P219, DOI 10.1109/ICPC.2011.26
   Cordy JR, 2011, CONF PROC INT SYMP C, P151, DOI 10.1109/ICPC.2011.25
   Cordy JR, 2003, PROG COMPREHEN, P196
   Cox A, 2003, PROG COMPREHEN, P154
   German DM, 2009, 2009 6TH IEEE INTERNATIONAL WORKING CONFERENCE ON MINING SOFTWARE REPOSITORIES, P81, DOI 10.1109/MSR.2009.5069483
   Göde N, 2009, EUR CON SFTWR MTNCE, P219, DOI 10.1109/CSMR.2009.20
   HIRSCHBERG DS, 1977, J ACM, V24, P664, DOI 10.1145/322033.322044
   Holt R.C., 1988, TECH REP CSRI 214
   Juergens E, 2009, PROC INT CONF SOFTW, P485, DOI 10.1109/ICSE.2009.5070547
   Kamiya T, 2002, IEEE T SOFTWARE ENG, V28, P654, DOI 10.1109/TSE.2002.1019480
   Kapser CJ, 2008, EMPIR SOFTW ENG, V13, P645, DOI 10.1007/s10664-008-9076-6
   Konz N., 2002, ALGORITHM DIFF
   Koschke R, 2006, WORK CONF REVERSE EN, P253
   Li ZM, 2006, IEEE T SOFTWARE ENG, V32, P176, DOI 10.1109/TSE.2006.28
   Mayrand J, 1996, INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE, PROCEEDINGS, P244, DOI 10.1109/ICSM.1996.565012
   Roy CK, 2010, J SOFTW MAINT EVOL-R, V22, P165, DOI 10.1002/smr.416
   Roy CK, 2009, IEEE ICST WORKSHOP, P157, DOI 10.1109/ICSTW.2009.18
   Roy CK, 2008, INT C PROGRAM COMPRE, P172, DOI 10.1109/ICPC.2008.41
   Roy CK, 2008, INT C PROGRAM COMPRE, P153, DOI 10.1109/ICPC.2008.42
   Roy CK, 2009, SCI COMPUT PROGRAM, V74, P470, DOI 10.1016/j.scico.2009.02.007
   Roy ChanchalK., 2010, Proceedings of the 4th International Workshop on Software Clones, IWSC '10, P17
   Walenstein A., 2006, DAGSTUHL SEMINAR PRO, V06301
NR 30
TC 5
Z9 5
U1 0
U2 1
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 1
PY 2014
VL 79
SI SI
BP 158
EP 171
DI 10.1016/j.scico.2011.11.002
PG 14
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 246RH
UT WOS:000326556300012
OA Green Submitted, hybrid
DA 2024-07-18
ER

PT J
AU Guttmann, W
AF Guttmann, Walter
TI Extended designs algebraically
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 10th International Conference on Mathematics of Program Construction
CY JUN, 2010
CL Quebec City, CANADA
SP Ctr Rech Math, Univ Laval
DE Domain operation; Egli-Milner order; Fixpoint; General correctness;
   Program semantics; Recursion; Semiring; While-program
ID GENERAL CORRECTNESS; KLEENE ALGEBRA; PROGRAMS
AB Extended designs distinguish non-terminating and aborting executions of sequential, non-deterministic programs. We show how to treat them algebraically based on techniques we have previously applied to total and general correctness approaches. In particular, we propose modifications to the definition of an extended design which make the theory more clear and simplify calculations, and an approximation order for recursion. We derive explicit formulas for operators on extended designs including non-deterministic choice, sequential composition, while-loops and full recursion. We show how to represent extended designs as designs or prescriptions over an extended state space. The new theory generalises our previous algebraic theory of general correctness by weakening its axioms. It also integrates with partial, total and general correctness into a common foundation which gives a unified semantics of while-programs. Program transformations derived using this semantics are valid in all four correctness approaches. (C) 2012 Elsevier B.V. All rights reserved.
C1 Univ Sheffield, Dept Comp Sci, Sheffield S10 2TN, S Yorkshire, England.
C3 University of Sheffield
RP Guttmann, W (corresponding author), Univ Sheffield, Dept Comp Sci, Sheffield S10 2TN, S Yorkshire, England.
EM walter.guttmann@uni-ulm.de
OI Guttmann, Walter/0000-0003-2969-1688
CR Bakker J.W. de, 1976, AUTOMATA LANGUAGES P, P435
   BERGHAMMER R, 1986, THEOR COMPUT SCI, V43, P123, DOI 10.1016/0304-3975(86)90172-6
   BROY M, 1979, LECT NOTES COMPUTER, V69, P553
   Cohen E, 2000, LECT NOTES COMPUT SC, V1837, P45
   De Carufel JL, 2006, LECT NOTES COMPUT SC, V4136, P120
   Desharnais J, 2006, ACM T COMPUT LOG, V7, P798, DOI 10.1145/1183278.1183285
   Desharnais J, 2011, SCI COMPUT PROGRAM, V76, P181, DOI 10.1016/j.scico.2010.05.007
   Dijkstra E. W., 1976, A Discipline of Pro-gramming
   DOORNBOS H, 1994, IFIP TRANS A, V56, P363
   DUNNE S, 2001, 5 IR WORKSH FORM MET
   Dunne SE, 2010, LECT NOTES COMPUT SC, V5713, P62
   Esik Z, 2005, ANN PURE APPL LOGIC, V133, P173, DOI 10.1016/j.apal.2004.10.008
   Guttmann W, 2011, LECT NOTES COMPUT SC, V6663, P196, DOI 10.1007/978-3-642-21070-9_16
   Guttmann W, 2010, LECT NOTES COMPUT SC, V6445, P207, DOI 10.1007/978-3-642-16690-7_10
   Guttmann W, 2010, LECT NOTES COMPUT SC, V5713, P82
   Guttmann W, 2010, LECT NOTES COMPUT SC, V6120, P157, DOI 10.1007/978-3-642-13321-3_11
   Guttmann W, 2009, LECT NOTES COMPUT SC, V5827, P150, DOI 10.1007/978-3-642-04639-1_11
   Guttmann W, 2010, J LOGIC ALGEBR PROGR, V79, P144, DOI 10.1016/j.jlap.2009.07.002
   Hayes IJ, 2010, LECT NOTES COMPUT SC, V6120, P178, DOI 10.1007/978-3-642-13321-3_12
   HEHNER ECR, 1988, ACTA INFORM, V25, P1, DOI 10.1007/BF00268842
   Hoare C. A. R., 1998, Unifying Theories of Programming
   HOARE CAR, 1969, COMMUN ACM, V12, P576, DOI 10.1145/363235.363259
   JACOBS D, 1985, ACTA INFORM, V22, P67, DOI 10.1007/BF00290146
   KOZEN D, 1994, INFORM COMPUT, V110, P366, DOI 10.1006/inco.1994.1037
   Kozen D, 1997, ACM T PROGR LANG SYS, V19, P427, DOI 10.1145/256167.256195
   Kozen Dexter, 2000, ACM Trans. Comput. Log., V1, P60, DOI DOI 10.1145/343369.343378
   Maddux RD, 1996, THEOR COMPUT SCI, V160, P1, DOI 10.1016/0304-3975(95)00082-8
   Mathieu V, 2006, LECT NOTES COMPUT SC, V3929, P188
   Möller B, 2007, SCI COMPUT PROGRAM, V65, P195, DOI 10.1016/j.scico.2006.01.010
   Möller B, 2006, LECT NOTES COMPUT SC, V4014, P338, DOI 10.1007/11783596_20
   Möller B, 2006, LECT NOTES COMPUT SC, V3929, P200
   Möller B, 2006, THEOR COMPUT SCI, V351, P221, DOI 10.1016/j.tcs.2005.09.069
   NELSON G, 1989, ACM T PROGR LANG SYS, V11, P517, DOI 10.1145/69558.69559
   PARNAS DL, 1983, COMMUN ACM, V26, P572, DOI 10.1145/358161.358168
   Solin K, 2011, J LOGIC ALGEBR PROGR, V80, P362, DOI 10.1016/j.jlap.2011.04.008
   SONDERGAARD H, 1992, COMPUT J, V35, P514, DOI 10.1093/comjnl/35.5.514
   von Wright J, 2004, SCI COMPUT PROGRAM, V51, P23, DOI 10.1016/j.scico.2003.09.002
NR 37
TC 6
Z9 6
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 1
PY 2013
VL 78
IS 11
BP 2064
EP 2085
DI 10.1016/j.scico.2012.07.009
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 220QR
UT WOS:000324602500004
OA hybrid
DA 2024-07-18
ER

PT J
AU Lämmel, R
   Thompson, S
   Kaiser, M
AF Laemmel, Ralf
   Thompson, Simon
   Kaiser, Markus
TI Programming errors in traversal programs over structured data
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Traversal strategies; Traversal programming; Term rewriting; Stratego;
   Strafunski; Generic programming; Scrap your boilerplate; Type systems;
   Static program analysis; Functional programming; XSLT; Haskell
ID TERMINATION ANALYSIS; BOILERPLATE; SCRAP; STRATEGIES; LANGUAGE; HASKELL;
   DESIGN
AB Traversal strategies a la Stratego (also a la Strafunski and 'Scrap Your Boilerplate') provide an exceptionally versatile and uniform means of querying and transforming deeply nested and heterogeneously structured data including terms in functional programming and rewriting, objects in OO programming, and XML documents in XML programming.
   However, the resulting traversal programs are prone to programming errors. We are specifically concerned with errors that go beyond conservative type errors; examples we examine include divergent traversals, prematurely terminated traversals, and traversals with dead code.
   Based on an inventory of possible programming errors we explore options of static typing and static analysis so that some categories of errors can be avoided. This exploration generates suggestions for improvements to strategy libraries as well as their underlying programming languages. Haskell is used for illustrations and specifications with sufficient explanations to make the presentation comprehensible to the non-specialist. The overall ideas are language-agnostic and they are summarized accordingly. (C) 2011 Elsevier B.V. All rights reserved.
C1 [Laemmel, Ralf; Kaiser, Markus] Univ Koblenz Landau, Koblenz, Germany.
   [Thompson, Simon] Univ Kent, Canterbury CT2 7NZ, Kent, England.
C3 University of Koblenz & Landau; University of Kent
RP Lämmel, R (corresponding author), Univ Koblenz Landau, Koblenz, Germany.
EM rlaemmel@gmail.com
RI ; Thompson, Simon/B-8964-2012
OI Lammel, Ralf/0000-0001-9946-4363; Thompson, Simon/0000-0002-2350-301X
CR Abdelmeged A., 2007, COMP 22 ANN ACM SIGP, P825
   Abel A, 2009, SCI COMPUT PROGRAM, V74, P550, DOI 10.1016/j.scico.2008.01.004
   [Anonymous], XSL TRANSF XSLT VERS
   [Anonymous], 2002, SIGPLAN WORKSHOP RUL, DOI [10.1145/570186.570188, DOI 10.1145/570186.570188]
   [Anonymous], 1999, XML path language (XPath) Version 1.0
   Balland E, 2007, LECT NOTES COMPUT SC, V4533, P36
   Balland E, 2008, ELECTRON NOTES THEOR, V219, P97, DOI 10.1016/j.entcs.2008.10.037
   Bierman G, 2005, LECT NOTES COMPUT SC, V3586, P287
   Borovansky P., 2001, INT J FDN COMPUTER S
   Borovansky P., 1998, ENTCS, V15
   Bove A, 2009, LECT NOTES COMPUT SC, V5674, P73, DOI 10.1007/978-3-642-03359-9_6
   Bravenboer M., 2006, PEPM 06, P95
   Cordy JR, 2006, SCI COMPUT PROGRAM, V61, P190, DOI 10.1016/j.scico.2006.04.002
   Cousot P, 1996, ACM COMPUT SURV, V28, P324, DOI 10.1145/234528.234740
   Cousot P, 2004, INT FED INFO PROC, V156, P359
   Crary K, 1999, ACM SIGPLAN NOTICES, V34, P233, DOI 10.1145/317765.317906
   Cunha Alcino., 2007, P 2007 ACM SIGPLAN W, P11, DOI [10.1145/1244381.1244385, DOI 10.1145/1244381.1244385]
   DOLSTRA E, 2001, UUCS200138 I INF COM
   Dong C., 2004, 15 AUSTR DAT C ADC20
   Geneves P., 2010, ICSE 10
   Genevès P, 2007, ACM SIGPLAN NOTICES, V42, P342, DOI 10.1145/1273442.1250773
   Geneves Pierre, 2006, THESIS I NATL POLYTE
   Giesl J, 2006, LECT NOTES COMPUT SC, V4098, P297
   Gnaedig I, 2009, ACM T COMPUT LOG, V10, DOI 10.1145/1462179.1462182
   Hinze R, 2006, LECT NOTES COMPUT SC, V4014, P180, DOI 10.1007/11783596_13
   Hinze R, 2006, LECT NOTES COMPUT SC, V3945, P13
   Hinze Ralf., 2000, Proceedings of the 27th ACM SIGPLAN-SIGACT symposium on Principles of programming languages, POPL '00, P119, DOI [DOI 10.1145/325694.325709, 10.1145/325694.325709]
   Jansson P., 1997, Conference Record of POPL '97: The 24th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P470, DOI 10.1145/263699.263763
   JOHANN P, 2003, UUCS2003050 DEP INF
   Jones SP, 2007, J FUNCT PROGRAM, V17, P1, DOI 10.1017/S0956796806006034
   Kaiser M, 2009, PPDP'09: PROCEEDINGS OF THE 11TH INTERNATIONAL ACM SIGPLAN SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING, P93, DOI 10.1145/1599410.1599423
   Kats LCL, 2009, LECT NOTES COMPUT SC, V5501, P142, DOI 10.1007/978-3-642-00722-4_11
   Kiselyov Oleg, 2004, HASKELL 04, P96, DOI DOI 10.1145/1017472.1017488
   Lämmel R, 2005, ACM SIGPLAN NOTICES, V40, P204, DOI 10.1145/1090189.1086391
   Lämmel R, 2004, ACM SIGPLAN NOTICES, V39, P244, DOI 10.1145/1016848.1016883
   Lämmel R, 2003, LECT NOTES COMPUT SC, V2562, P357
   Lämmel R, 2003, ACM SIGPLAN NOTICES, V38, P26, DOI 10.1145/640136.604179
   Lämmel R, 2003, J LOGIC ALGEBR PROGR, V54, P1, DOI 10.1016/S1567-8326(02)00028-0
   Lammel R., 2002, Practical Aspects of Declarative Languages. 4th International Symposium, PADL 2002. Proceedings (Lecture Notes in Computer Science Vol.2257), P137
   Lammel R., 2002, ESSENCE STR IN PRESS
   Lammel R., 2002, ENTCS, V70, P21
   Lammel R, 2007, ACM SIGPLAN NOTICES, V42, P137, DOI 10.1145/1190215.1190240
   Lammel Ralf., 2003, P ASPECT ORIENTED SO, P168, DOI [10.1145/643603.643621, DOI 10.1145/643603.643621]
   Leijen D, 2008, ACM SIGPLAN NOTICES, V43, P283, DOI 10.1145/1411203.1411245
   Li HQ, 2005, ELECTRON NOTES THEOR, V141, P29, DOI 10.1016/j.entcs.2005.02.053
   Lieberherr K, 2004, ACM T PROGR LANG SYS, V26, P370, DOI 10.1145/973097.973102
   Luttik Bas, 1997, 2 INT WORKSH THEOR P
   Marlow Simon, 2006, P 2006 ACM SIGPLAN W, P96, DOI DOI 10.1145/1159842.1159854
   McBride C, 2004, LECT NOTES COMPUT SC, V3622, P130
   McBride C, 2002, J FUNCT PROGRAM, V12, P375, DOI 10.1017/S0956796802004355
   Mitchell N, 2007, HASKELL'07: PROCEEDINGS OF THE ACM SIGPLAN 2007 HASKELL WORKSHOP, P49, DOI 10.1145/1291201.1291208
   Munkby G., 2006, P 2006 ACM SIGPLAN W, P66
   Nielson F., 2005, PRINCIPLES PROGRAM A
   Nielson H.R., 2007, SEMANTICS APPL
   Oliveira BCDS, 2010, ACM SIGPLAN NOTICES, V45, P341, DOI 10.1145/1932682.1869489
   Palsberg J, 1997, SCI COMPUT PROGRAM, V29, P303, DOI 10.1016/S0167-6423(97)00004-X
   Reig F., 2004, TRENDS FUNCTIONAL PR, P17
   Ren D., 2006, HASKELL 06, P13
   Rodriguez A, 2008, HASKELL'08: PROCEEDINGS OF THE ACM SIGPLAN 2008 HASKELL SYMPOSIUM, P111
   Ryder BG, 2003, ACM SIGPLAN NOTICES, V38, P16, DOI 10.1145/885638.885644
   Sereni D, 2005, LECT NOTES COMPUT SC, V3780, P281
   Shan CC, 2004, ACM SIGPLAN NOTICES, V39, P15, DOI 10.1145/997140.997142
   Shields M, 2001, ACM SIGPLAN NOTICES, V36, P261, DOI 10.1145/373243.360230
   Thiemann P., 2002, ENTCS, V76, P233
   Thiemann R, 2009, LECT NOTES COMPUT SC, V5595, P17, DOI 10.1007/978-3-642-02348-4_2
   Van den Brand MGJ, 2003, ACM T SOFTW ENG METH, V12, P152, DOI 10.1145/941566.941568
   vandenBrand M, 1997, PROCEEDINGS OF THE FOURTH WORKING CONFERENCE ON REVERSE ENGINEERING, P144, DOI 10.1109/WCRE.1997.624585
   Visser E, 2003, LECT NOTES COMPUT SC, V3016, P216
   VISSER E, 1998, ENTCS, V15
   VISSER E, 2000, P 2 WORKSH GEN PROGR, P86
   Visser Eelco, 1998, ICFP 98, P13
   VISSER J, 2003, THESIS U AMSTERDAM A
   W3C, 2007, XQUERY 1 0 XML QUERY
   Winter V.L., 2006, ACM T EMBED COMPUT S, V5, P773
   Winter V, 2006, LECT NOTES COMPUT SC, V4143, P378
   Winter VL, 2005, ELECTRON NOTES THEOR, V124, P149, DOI 10.1016/j.entcs.2004.07.020
   Winter VL, 2004, SCI COMPUT PROGRAM, V52, P165, DOI 10.1016/j.scico.2004.03.006
   Xu DN, 2009, ACM SIGPLAN NOTICES, V44, P41, DOI 10.1145/1594834.1480889
NR 78
TC 5
Z9 5
U1 0
U2 4
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 1
PY 2013
VL 78
IS 10
BP 1770
EP 1808
DI 10.1016/j.scico.2011.11.006
PG 39
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 200RJ
UT WOS:000323086300003
OA Green Submitted, Green Accepted
DA 2024-07-18
ER

PT J
AU Santone, A
   Vaglini, G
   Villani, ML
AF Santone, Antonella
   Vaglini, Gigliola
   Villani, Maria Luisa
TI Incremental construction of systems: An efficient characterization of
   the lacking sub-system
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE CCS; Logic; Formal methods; Tableau
ID HEURISTIC-SEARCH; MODEL CHECKING; SOFTWARE
AB Software engineering research is driven by the aim of making software development more dynamic, flexible and evolvable. Nowadays the emphasis is on the evolution of pre-existing sub-systems and component and service-based development, where often only a part of the system is totally under control of the designer, most components being remotely operated by external vendors. In this context, we tackle the following problem: given the formal specification of the (incomplete) system, say it p, already built, how to characterize collaborators of p to be selected, based on a given communication interface L, so that a given property phi is satisfied. Using properties described by temporal logic formulae and systems by CCS processes, if phi is the formula to be satisfied by the complete system, an efficient and automatic procedure is defined to identify a formula psi such that, for each existing process q satisfying psi, the process (p vertical bar q) \ L satisfies psi Important features of this result are simplicity of the derived property psi, compared to the original one, and scalability of the verification process. Such characteristics are necessary for applying the method to both incremental design and system evolution scenarios where p is already in place, and one needs to understand the specification of the functionality of the new component that should correctly interact with p. Indeed, in general, finding a suitable partner for p is easier than finding a complete system satisfying the global property. Moreover, in this paper it is shown how psi can be used also to select a set of possible candidate processes q through a property-directed and structural heuristic. From the verification point of view, the description of the lacking component through a logic formula guarantees correctness of the integration with p of any process that exhibits a behaviour compliant with the inferred formula. (C) 2012 Elsevier B.V. All rights reserved.
C1 [Santone, Antonella] Univ Sannio, Dipartimento Ingn, Benevento, Italy.
   [Vaglini, Gigliola] Univ Pisa, Dipartimento Ingn Informaz, I-56100 Pisa, Italy.
   [Villani, Maria Luisa] ENEA, Rome, Italy.
C3 University of Sannio; University of Pisa; Italian National Agency New
   Technical Energy & Sustainable Economics Development
RP Santone, A (corresponding author), Univ Sannio, Dipartimento Ingn, Benevento, Italy.
EM santone@unisannio.it; gigliola.vaglini@iet.unipi.it;
   marialuisa.villani@enea.it
RI Villani, Maria Luisa/Q-6112-2016; Villani, Maria Luisa/O-2135-2019
OI Villani, Maria Luisa/0000-0002-7582-806X
CR Aldini A, 2011, J SYST ARCHITECT, V57, P282, DOI 10.1016/j.sysarc.2010.06.005
   ANDERSEN HR, 1995, IEEE S LOG, P398, DOI 10.1109/LICS.1995.523274
   Andrews Tony., 2003, Business process execution language for web services
   Barbuti R, 1999, J COMPUT SYST SCI, V59, P537, DOI 10.1006/jcss.1999.1660
   BOLOGNESI T, 1987, COMPUT NETWORKS ISDN, V14, P25, DOI 10.1016/0169-7552(87)90085-7
   Breugel F., 2006, TECHNICAL REPORT
   Canfora G, 2005, 2005 IEEE INTERNATIONAL CONFERENCE ON WEB SERVICES, VOLS 1 AND 2, PROCEEDINGS, P121
   Clarke E, 2006, LECT NOTES COMPUT SC, V3855, P126
   Clarke Edmund M., 2001, Model Checking
   CLEAVELAND R, 1990, ACTA INFORM, V27, P725, DOI 10.1007/BF00264284
   Colombo M, 2006, LECT NOTES COMPUT SC, V4294, P191
   De Francesco N, 2010, INFORM PROCESS LETT, V110, P99, DOI 10.1016/j.ipl.2009.10.014
   Fu X, 2005, IEEE T SOFTWARE ENG, V31, P1042, DOI 10.1109/TSE.2005.141
   FURIA CA, 2005, 200522 DIP EL INF PO
   Giani A., 2001, P SCI ISAS2001 ORL U
   GIANNAKOPOULOU D, 2002, P 17 IEEE INT C AUT
   Gradara S, 2005, INFORM COMPUT, V202, P191, DOI 10.1016/j.ic.2005.07.004
   Gradara S, 2006, J COMPUT SYST SCI, V72, P1397, DOI 10.1016/j.jcss.2006.03.003
   Gradara S, 2007, ELECTRON NOTES THEOR, V185, P93, DOI 10.1016/j.entcs.2007.05.031
   Huth M., P WORKSHOP DOMAINS, V73, P45
   Inverardi P, 2000, ACM T SOFTW ENG METH, V9, P239, DOI 10.1145/352591.352593
   Inverardi P, 2003, LECT NOTES COMPUT SC, V2804, P92
   Kazhamiakin R., 2006, Proceedings of the 15th international conference on World Wide Web (WWW'06), P267
   Keng Ng, 1996, Automated Software Engineering, V3, P261
   Larsen K. G., 1990, Proceedings. Fifth Annual IEEE Symposium on Logic in Computer Science (90CH2897-7), P108, DOI 10.1109/LICS.1990.113738
   LARSEN KG, 1990, LECT NOTES COMPUT SC, V443, P526
   Lohmann N, 2007, LECT NOTES COMPUT SC, V4714, P271
   Martinelli F, 2008, LECT NOTES COMPUT SC, V4937, P124
   Milner R., 1989, Communication and concurrency
   PARROW J, 1989, THEOR COMPUT SCI, V68, P175, DOI 10.1016/0304-3975(89)90128-X
   Pasareanu C.S., 2006, LNCS, V3925
   Pasareanu CS, 1999, LECT NOTES COMPUT SC, V1680, P168
   Petrenko A., 1998, FORMAL DESCRIPTION T, V135, P231
   Pistore M., 2004, ELECT NOTES THEOR CO, P95, DOI DOI 10.1016/J.ENTCS.2004.05.005
   Qin H., 1991, FORM ASP COMPUT, V3, P284
   Salaün G, 2004, IEEE INTERNATIONAL CONFERENCE ON WEB SERVICES, PROCEEDINGS, P43, DOI 10.1109/ICWS.2004.1314722
   Santone A, 2003, IEEE T SOFTWARE ENG, V29, P510, DOI 10.1109/TSE.2003.1205179
   Santone A, 2003, J AUTOM REASONING, V30, P33, DOI 10.1023/A:1022561505762
   Spanoudakis G, 2010, IEEE T SOFTWARE ENG, V36, P371, DOI 10.1109/TSE.2009.88
   Stirling C., 1989, LECT NOTES COMPUTER, V391
   Web Services Choreography Description Language, WEB SERV CHOR DESCR
   *WSDL, WEB SERV DESCR LANG
NR 42
TC 23
Z9 23
U1 0
U2 4
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 1
PY 2013
VL 78
IS 9
BP 1346
EP 1367
DI 10.1016/j.scico.2012.07.015
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 179QJ
UT WOS:000321536100009
OA hybrid
DA 2024-07-18
ER

PT J
AU Mosser, S
   Blay-Fornarino, M
AF Mosser, Sebastien
   Blay-Fornarino, Mireille
TI "ADORE", a logical meta-model supporting business process evolution
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE SOA; Business processes; Sep. of concerns; Logical composition
AB The Service Oriented Architecture (SOA) paradigm supports the assembly of atomic services to create applications that implement complex business processes. Since "real-life" processes can be very complex, composition mechanisms inspired by the Separation of Concerns paradigm (e.g. features, aspects) are good candidates to support the definition and the upcoming evolutions of large systems. We propose ADORE, "an Activity meta-moDel supOrting oRchestration Evolution" to address this issue. The ADORE meta-model allows process designers to express in the same formalism business processes and fragments of processes. Such fragments define additional activities that aim to be integrated into other processes and adequately support their evolution. The underlying logical foundations of ADORE allow the definition of interference detection rules as logical predicate, as well as the definition of consistency properties on ADORE models. Consequently, the ADORE framework supports process designers while they design and then apply evolutions on large processes, managing the detection of interferences among fragments and ensuring that the composed processes are consistent and do not depend on the order of the composition. (C) 2012 Elsevier BM. All rights reserved.
C1 [Mosser, Sebastien] Univ Lille, LIFL CNRS UMR 8022, Inria Lille Nord Europe, Lille, France.
   [Mosser, Sebastien] SINTEF IKT, Oslo, Norway.
   [Blay-Fornarino, Mireille] Univ Nice, CNRS 13S, UMR 7271, F-06108 Nice 2, France.
C3 Universite de Lille; SINTEF; Centre National de la Recherche
   Scientifique (CNRS); Universite Cote d'Azur
RP Mosser, S (corresponding author), SINTEF IKT, Oslo, Norway.
EM sebastien.mosser@sintef.no; blay@polytech.unice.fr
OI Blay-Fornarino, Mireille/0000-0001-9852-7764; Mosser,
   Sebastien/0000-0001-9769-216X
CR Aksit M, 2009, AOSD'09: 8TH INTERNATIONAL CONFERENCE ON ASPECT-ORIENTED SOFTWARE DEVELOPMENT, P39
   Alférez M, 2011, LECT NOTES COMPUT SC, V6698, P361, DOI 10.1007/978-3-642-21470-7_25
   [Anonymous], 2006, Technical Report
   [Anonymous], 1998, DATA KHOWL ENG, V24, P211, DOI DOI 10.1016/S0169-023X(97)00033-5
   Assmann U., 2003, INVASIVE SOFTWARE CO
   Blanc X, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P511, DOI 10.1145/1368088.1368158
   Cardoso J, 2005, 2005 IEEE International Conference on Web Services, Vols 1 and 2, Proceedings, P803
   Charfi A, 2004, LECT NOTES COMPUT SC, V3250, P168
   Ciraci S, 2011, LECT NOTES COMPUT SC, V6903, P252, DOI 10.1007/978-3-642-23798-0_28
   Ciraci S, 2010, LECT NOTES COMPUT SC, V6210, P321
   Clavreul M., 2011, MODELS 11, P1
   Cormen Thomas H., 2001, INTRO ALGORITHMS
   Courbis C, 2005, PROC INT CONF SOFTW, P69
   Douence Remi., 2006, Proceedings of the 5th International Conference on Generative Programming and Component Engineering, GPCE '06, P79
   Dutra I, 2003, LECT NOTES COMPUT SC, V2790, P509
   ERCIM, 2010, ERCIM WORK GROUP SOF
   Garlan D, 2004, LECT NOTES COMPUT SC, V3047, P200
   Gregory S., 1997, Programming Languages: Implementations, Logics, and Programs. 9th International Symposium, PLILP'97, Including a Special Track on Declarative Programming Languages in Education. Proceedings, P79, DOI 10.1007/BFb0033838
   Heckel R, 2002, LECT NOTES COMPUT SC, V2505, P161
   Heidenreich F, 2011, J OBJECT TECHNOL, V10, DOI 10.5381/jot.2011.10.1.a7
   Hemel Z., 2008, LECT NOTES COMPUTER
   Iverson K. E., 1962, A Programming Language
   Jouault F, 2006, LECT NOTES COMPUT SC, V3844, P128
   Kienzle J., 2009, Crisis management systems
   Kienzle J, 2009, AOSD'09: 8TH INTERNATIONAL CONFERENCE ON ASPECT-ORIENTED SOFTWARE DEVELOPMENT, P87
   Klein J., 2006, P 5 INT C ASP OR SOF
   Klein J, 2007, LECT NOTES COMPUT SC, V4620, P167
   Moreau A, 2009, 2009 FOURTH INTERNATIONAL CONFERENCE ON INTERNET AND WEB APPLICATIONS AND SERVICES, P43, DOI 10.1109/ICIW.2009.15
   Mosser S., 2011, 2011 Proceedings of IEEE International Conference on Services Computing (SCC 2011), P234, DOI 10.1109/SCC.2011.58
   Mosser S., 2010, ASPECT ORIENTED MODE, P1
   Mosser S., 2010, THESIS U NICE SOPHIA
   Mosser S., 2012, 6 INT WORKSH VAR MOD, P10
   Mosser S., 2011, R201105FR MODALIS
   Mosser S., 2011, 10 INT C ASP OR SOFT
   Mosser S, 2008, LECT NOTES COMPUT SC, V5292, P35, DOI 10.1007/978-3-540-88030-1_5
   OASIS, 2007, Web Services Business Process Execution Language Version 2.0
   OMG, 2006, MET OBJ FAC MOF COR
   Rinderle S, 2005, LECT NOTES COMPUT SC, V3649, P252, DOI 10.1007/11538394_17
   STICKEL ME, 1981, J ACM, V28, P423, DOI 10.1145/322261.322262
   van der Aalst WMP, 2002, THEOR COMPUT SCI, V270, P125, DOI 10.1016/S0304-3975(00)00321-2
   Verjus H, 2007, ECOWS 07: PROCEEDING OF THE 5TH IEEE EUROPEAN CONFERENCE ON WEB SERVICES, P245, DOI 10.1109/ECOWS.2007.18
   Weber B, 2005, LECT NOTES ARTIF INT, V3620, P610, DOI 10.1007/11536406_46
   Whittle J, 2009, LECT NOTES COMPUT SC, V5560, P191, DOI 10.1007/978-3-642-03764-1_6
NR 43
TC 3
Z9 3
U1 0
U2 8
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD AUG 1
PY 2013
VL 78
IS 8
BP 1035
EP 1054
DI 10.1016/j.scico.2012.06.009
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 168XV
UT WOS:000320742200005
OA Bronze
DA 2024-07-18
ER

PT J
AU da Mata, LLP
   Pereira, FMQ
   Ferreira, R
AF Padovani da Mata, Leonardo Luiz
   Quintao Pereira, Fernando Magno
   Ferreira, Renato
TI Automatic parallelization of canonical loops
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT Annual Brazilian Symposium on Programming Languages (SBLP)
CY AUG 19-21, 2009
CL Gramado, BRAZIL
SP Catholic Univ Pelotas (UCPel), Comp Dept, Brazilian Comp Soc, CAPES, CNPq, Microsoft, Govt State Rio Grande do Sul
DE Automatic parallelization; Map-reduce; Compiler; Stream-programming
AB This paper presents a compilation technique that performs the automatic parallelization of canonical loops. Canonical loops are a recurring pattern that we have observed in many well known algorithms, such as frequent itemset, K-means and K nearest neighbors. Our compiler translates C code to sequences of stream filters that communicate through a variety of channel types. We analyze code containing canonical loops, separate the data over a cluster of processors and determine suitable communication strategies between these processors. Experiments performed on a cluster of 36 computers show that, for the three algorithms described above, our method produces speed-ups that are almost linear on the number of available processors. These experiments also show that the code automatically generated is competitive when compared to hand tuned programs. (C) 2012 Elsevier B.V. All rights reserved.
C1 [Padovani da Mata, Leonardo Luiz; Quintao Pereira, Fernando Magno; Ferreira, Renato] Univ Fed Minas Gerais, Dept Ciencia Comp, BR-31270010 Belo Horizonte, MG, Brazil.
C3 Universidade Federal de Minas Gerais
RP Pereira, FMQ (corresponding author), Univ Fed Minas Gerais, Dept Ciencia Comp, Av Antonio Carlos 6627, BR-31270010 Belo Horizonte, MG, Brazil.
EM barroca@dcc.ufmg.br; fpereira@dcc.ufmg.br; renato@dcc.ufmg.br
RI InWeb, Inct/J-9839-2013; Pereira, Fernando/HNR-7786-2023
CR Agrawal R., SIGMOD C, P207
   Appel A.W., 2002, MODERN COMPILER IMPL, V2nd
   Armbrust, 2009, UCBEECS200928, V53, P50
   Cole M. I., 1991, RES MONOGRAPH PARALL
   CYTRON R, 1989, CONFERENCE RECORD OF THE SIXTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P25, DOI 10.1145/75277.75280
   Dean J, 2004, USENIX ASSOCIATION PROCEEDINGS OF THE SIXTH SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION (OSDE '04), P137
   do Nascimento LT, 2005, PROC INT CONF PARAL, P638, DOI 10.1109/ICPP.2005.70
   Du W., 2003, P ACM IEEE C SUP SC, P8
   Ferreira R. A., 2005, Proceedings. 17th International Symposium on Computer Architecture and High Performance Computing, P159
   Góes LF, 2005, LECT NOTES COMPUT SC, V3834, P108
   Hall M, 2009, COMMUN ACM, V52, P60, DOI 10.1145/1461928.1461946
   Hofstee HP, 2005, INT S HIGH PERF COMP, P258, DOI 10.1109/HPCA.2005.26
   Johnson T. A., WORKSH LANG COMP PAR, P1
   Kongetira P, 2005, IEEE MICRO, V25, P21, DOI 10.1109/MM.2005.35
   MacQueen J., 1967, P 5 BERK S MATH STAT, P281
   Morihata A, 2009, ACM SIGPLAN NOTICES, V44, P177, DOI 10.1145/1594834.1480905
   Morita K, 2007, ACM SIGPLAN NOTICES, V42, P146, DOI 10.1145/1273442.1250752
   PARR TJ, 1995, SOFTWARE PRACT EXPER, V25, P789, DOI 10.1002/spe.4380250705
   Ryoo S, 2008, PPOPP'08: PROCEEDINGS OF THE 2008 ACM SIGPLAN SYMPOSIUM ON PRINCIPLES AND PRACTICE OF PARALLEL PROGRAMMING, P73, DOI 10.1145/1345206.1345220
   Scaife N, 2005, J FUNCT PROGRAM, V15, P615, DOI 10.1017/S0956796804005489
   Spring JH, 2007, ACM SIGPLAN NOTICES, V42, P211, DOI 10.1145/1297105.1297043
   Steinhaus H, 1956, B ACAD POL SCI, V4, P801
   Witten I., 2002, ACM Sigmod Rec., V31, P76, DOI [10.1145/507338.507355, DOI 10.1145/507338.507355]
NR 23
TC 5
Z9 6
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD AUG 1
PY 2013
VL 78
IS 8
BP 1193
EP 1206
DI 10.1016/j.scico.2012.09.006
PG 14
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 168XV
UT WOS:000320742200014
OA Bronze
DA 2024-07-18
ER

PT J
AU Zeyda, F
   Cavalcanti, A
AF Zeyda, Frank
   Cavalcanti, Ana
TI Mechanical reasoning about families of UTP theories
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Semantic embedding; Theorem proving; Verification; ProofPower; Z; Circus
AB The Unifying Theories of Programming (UTP) of Hoare and He is a general framework in which the semantics of a variety of specification and programming languages can be uniformly defined. In this paper we present a semantic embedding of the UTP into the ProofPower-Z theorem prover; it concisely captures the notion of UTP theory, theory instantiation, and, additionally, type restrictions on the alphabet of UTP predicates. We show how the encoding can be used to reason about UTP theories and their predicates, including models of particular specifications and programs. We support encoding and reasoning about combinations of predicates of various theory instantiations, as typically found in UTP models. Our results go beyond what has already been discussed in the literature in that we support encoding of both theories and programs (or their specifications), and high-level proof tactics. We also create structuring mechanisms that support the incremental construction and reuse of encoded theories, associated laws and proof tactics. (C) 2010 Elsevier B.V. All rights reserved.
C1 [Zeyda, Frank; Cavalcanti, Ana] Univ York, Dept Comp Sci, York YO10 5DD, N Yorkshire, England.
C3 University of York - UK
RP Zeyda, F (corresponding author), Univ York, Dept Comp Sci, York YO10 5DD, N Yorkshire, England.
EM frank.zeyda@cs.york.ac.uk
OI Zeyda, Frank/0009-0009-4251-4740; Cavalcanti, Ana Lucia
   Caneca/0000-0002-0831-1976
FU EPSRC [EP/E025366/1]; EPSRC [EP/E025366/1, EP/H017461/1] Funding Source:
   UKRI
FX Valuable discussions have taken place with Marcel Oliveira regarding his
   original encoding, experience with mechanical proofs, and possible ways
   to overcome the inconsistency issue that was first pointed out by Steve
   Dunne. We would also like to acknowledge EPSRC for funding this work
   under the "Programming from Control Laws" research grant EP/E025366/1.
CR Adams MM, 2005, LECT NOTES COMPUT SC, V3785, P465
   [Anonymous], 1998, Prentice Hall series in computer science
   Butterfield A, 2007, LECT NOTES COMPUT SC, V4591, P75
   Cavalcanti A, 2005, LECT NOTES COMPUT SC, V3582, P253
   Cavalcanti A., 2003, Formal Aspects of Computing, V15, P146, DOI 10.1007/s00165-003-0006-5
   Cavalcanti A., 2004, LNCS, V3167, P220
   Charniak Eugene, 1987, ARTIFICIAL INTELLIGE, V2nd
   Dijkstra E.W., 1976, PRENTICE HALL SERIES
   Freitas L., 2007, SBMF 2007
   Gordon M., 1995, NOTES PVS HOL PERSPE
   Gordon M. J. C., 1988, VLSI Specification, Verification and Synthesis, P73
   Harwood W., 2008, MODEL POINTERS UNIFY
   Hoare C., 1985, Prentice-Hall International Series in Computer Science
   Institut Naitional de Recherche en Informatique et en Automatique (INRIA), COQ PROOF ASS TOOL D
   Mahony B, 2000, IEEE T SOFTWARE ENG, V26, P150, DOI 10.1109/32.841115
   Nuka G, 2004, ELECT NOTES THEORETI, V95, P209
   Nuka G, 2006, LECT NOTES COMPUT SC, V4010, P217
   Oliveira MVM, 2008, ELECTRON NOTES THEOR, V214, P203, DOI 10.1016/j.entcs.2008.06.010
   Oliveira MVM, 2005, FORMAL DERIVATION ST
   OLIVEIRA MVM, 2007, FORMAL ASPECTS COMPU
   Roscoe A.W., 1997, PRENTICE HALL INT SE
   Sherif A, 2002, LECT NOTES COMPUT SC, V2495, P613
   SRI International Computer Science Laboratory, PVS SPEC VER SYST TO
   TARSKI A, 1941, J SYMBOLIC LOGIC, V6, P73, DOI DOI 10.2307/2268577
   Visser E., 1998, Electronic Notes in Theoretical Computer Science, V15, DOI 10.1016/S1571-0661(05)80027-1
   Woodcock J., 1996, PRENTICE HALL INT SE
   Xavier M.A., 2006, SBMF 2006 BRAZILIAN, P105
   Zeyda F., 2008, SBMF 2008, P145
   Zeyda F, 2010, LECT NOTES COMPUT SC, V5713, P218
NR 29
TC 5
Z9 5
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD APR 1
PY 2012
VL 77
IS 4
SI SI
BP 444
EP 479
DI 10.1016/j.scico.2010.02.010
PG 36
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 906ER
UT WOS:000301328200003
OA hybrid
DA 2024-07-18
ER

PT J
AU Meyers, B
   Vangheluwe, H
AF Meyers, Bart
   Vangheluwe, Hans
TI A framework for evolution of modelling languages
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Evolution; Modelling languages; Language engineering; Model-driven
   engineering; Model transformation
ID TOOL
AB In model-driven engineering, evolution is inevitable over the course of the complete life cycle of complex software-intensive systems and more importantly of entire product families. Not only instance models, but also entire modelling languages are subject to change. This is in particular true for domain-specific languages, whose language constructs are tightly coupled to an application domain.
   The most popular approach to evolution in the modelling domain is a manual process, with tedious and error-prone migration of artefacts such as instance models as a result. This paper provides a taxonomy for evolution of modelling languages and discusses the different evolution scenarios for various kinds of modelling artefacts, such as instance models, meta-models, and transformation models. Subsequently, the consequences of evolution and the required remedial actions are decomposed into primitive scenarios such that all possible evolutions can be covered exhaustively. These primitives are then used in a high-level framework for the evolution of modelling languages.
   We suggest that our structured approach enables the design of(semi-)automatic modelling language evolution solutions. (C) 2011 Elsevier B.V. All rights reserved.
C1 [Meyers, Bart; Vangheluwe, Hans] Univ Antwerp, MSDL, B-2020 Antwerp, Belgium.
   [Vangheluwe, Hans] McGill Univ, MSDL, Montreal, PQ H3A 2A7, Canada.
C3 University of Antwerp; McGill University
RP Vangheluwe, H (corresponding author), Univ Antwerp, MSDL, Middelheimlaan 1, B-2020 Antwerp, Belgium.
EM Bart.Meyers@ua.ac.be; Hans.Vangheluwe@ua.ac.be
RI Vangheluwe, Hans/H-9884-2016
OI Vangheluwe, Hans/0000-0003-2079-6643; Meyers, Bart/0000-0001-9566-8297
FU National Science and Engineering Research Council (NSERC) of Canada
FX We would like to thank the reviewers of this paper for their valuable
   comments. We would also like to thank the organisers and the
   participants of the Transformation Tool Contest 2010, Model Migration
   Case Study for the fruitful discussions on the subject of this paper.
   Finally, the participants of the 2008-2010 Bellairs Computer Automated
   Multi-Paradigm modelling workshops are acknowledged for the stimulating
   discussions which have ultimately led to this paper. Partial support of
   this work by a discovery grant of the National Science and Engineering
   Research Council (NSERC) of Canada is gratefully acknowledged.
CR Alanen M, 2003, LECT NOTES COMPUT SC, V2863, P2
   [Anonymous], OBJ CONSTR LANG VERS
   [Anonymous], [No title captured]
   Banerjee J., 1987, SIGMOD Record, V16, P311, DOI 10.1145/38714.38748
   BROOKS FP, 1987, COMPUTER, V20, P10, DOI 10.1109/MC.1987.1663532
   Chen Kai., 2005, P 5 ACM INT C EMBEDD, P35, DOI DOI 10.1145/1086228.1086236
   Cicchetti A, 2008, IEEE INT ENTERP DIST, P222, DOI 10.1109/EDOC.2008.44
   Cicchetti A, 2007, J OBJECT TECHNOL, V6, P165, DOI 10.5381/jot.2007.6.9.a9
   de Lara J, 2002, LECT NOTES COMPUT SC, V2306, P174
   Galvao I, 2007, IEEE INT ENTERP DIST, P313, DOI 10.1109/EDOC.2007.42
   Geiger L, 2006, ELECTRON NOTES THEOR, V148, P173, DOI 10.1016/j.entcs.2005.12.017
   Giese H, 2007, LECT NOTES COMPUT SC, V4364, P252
   GRUSCHKO B, 2007, INT WORKSH MOD DRIV
   Guerra E, 2006, LECT NOTES COMPUT SC, V4178, P351
   Harel D, 2004, COMPUTER, V37, P64, DOI 10.1109/MC.2004.172
   Heckel R, 2002, LECT NOTES COMPUT SC, V2505, P161
   Herrmannsdoerfer M, 2009, LECT NOTES COMPUT SC, V5653, P52, DOI 10.1007/978-3-642-03013-0_4
   Hssler J., 2005, MODELS HUMAN REASONI, P129
   KANG KC, 1990, CMUSEI90TR21 SOFTW E
   Kelly S., 2008, Domain-Specific Modeling
   Klint P, 2005, ACM T SOFTW ENG METH, V14, P331, DOI 10.1145/1072997.1073000
   Kühne T, 2010, LECT NOTES COMPUT SC, V6002, P240
   Kuhne T., 2006, Softw Syst Model, V5, P369, DOI [DOI 10.1007/S10270-006-0017-9, 10.1007/s10270-006-0017-9]
   Lammel R., 2001, FME 2001: Formal Methods for Increasing Software Productivity. International Symposium on Formal Methods Europe. Proceedings (Lecture Notes in Computer Science Vol.2021), P550
   LAMMEL R, 2004, P 1 INT WORKSH SOFTW, P31
   Lammel R., 2001, P 7 INT C REVERSE EN, V155, P113
   Levendovszky T, 2010, LECT NOTES COMPUT SC, V5969, P23
   Lin YH, 2007, EUR J INFORM SYST, V16, P349, DOI 10.1057/palgrave.ejis.3000685
   Mens T., 2008, Software Evolution
   Mens T, 2006, ELECTRON NOTES THEOR, V152, P125, DOI 10.1016/j.entcs.2005.10.021
   Meyers B., 2008, 6 INT FUJABA DAYS, P15
   Minas M., 2006, GENERATING METAMODEL, P1
   Mosterman PJ, 2004, SIMUL-T SOC MOD SIM, V80, P433, DOI 10.1177/0037549704050532
   Muliawan O, 2008, WORK CONF REVERSE EN, P315, DOI 10.1109/WCRE.2008.19
   Object Management Group, 2010, OMG UN MOD LANG INFR
   Object Management Group, 2010, BUS PROC MOD NOT BPM
   Object Management Group, 2009, UN MOD LANG SUP
   Ohst D., 2003, Software Engineering Notes, V28, P227, DOI 10.1145/949952.940102
   Peterson J.L., 1981, Petri Net Theory and the Modeling of Systems
   Pizka M, 2007, TASE 2007: FIRST JOINT IEEE/IFIP SYMPOSIUM ON THEORETICAL ASPECTS OF SOFTWARE ENGINEERING, PROCEEDINGS, P305, DOI 10.1109/TASE.2007.13
   Rahm E, 2006, SIGMOD REC, V35, P30, DOI 10.1145/1228268.1228273
   Richters M, 1999, LECT NOTES COMPUT SC, V1723, P156
   Schmidt DC, 2006, COMPUTER, V39, P25, DOI 10.1109/MC.2006.58
   Schmidt M, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P947
   Schurr Andy., 1995, P 20 WORKSHOP GRAPH, V903, P151
   Sprinkle J, 2004, J VISUAL LANG COMPUT, V15, P291, DOI 10.1016/j.jvlc.2004.01.006
   Su H, 2001, PR GR LAK SYMP VLSI, P103, DOI 10.1109/RIDE.2001.916497
   Terekhov AA, 2000, IEEE SOFTWARE, V17, P111, DOI 10.1109/52.895180
   Vermolen S, 2008, LECT NOTES COMPUT SC, V5301, P630, DOI 10.1007/978-3-540-87875-9_44
   Wachsmuth G, 2007, LECT NOTES COMPUT SC, V4609, P600
   White J, 2009, IEEE SOFTWARE, V26, P47, DOI 10.1109/MS.2009.95
   Whittle J, 2008, LECT NOTES COMPUT SC, V5002, P16
   Wimmer M., 2010, P 2 INT WORKSH MOD T, V711, P65
   Xing Z., 2005, 20 IEEEACM INT C AUT, P54, DOI DOI 10.1145/1101908.1101919
   Xue Li, 1999, Proceedings Technology of Object-Oriented Languages and Systems (Cat. No.PR00393), P362, DOI 10.1109/TOOLS.1999.796507
   Zhang J., 2004, OBJ OR PROGR SYST LA, P121
NR 56
TC 39
Z9 43
U1 0
U2 9
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 1
PY 2011
VL 76
IS 12
SI SI
BP 1223
EP 1246
DI 10.1016/j.scico.2011.01.002
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 793FX
UT WOS:000292806900011
OA Bronze
DA 2024-07-18
ER

PT J
AU Kabanov, J
   Hunger, M
   Raudjärv, R
AF Kabanov, Jevgeni
   Hunger, Michael
   Raudjaerv, Rein
TI On designing safe and flexible embedded DSLs with Java 5
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 6th International Conference on the Principles and Practice of
   Programming in Java (PPPJ 2008)
CY SEP 08-11, 2008
CL Modena, ITALY
AB Although embedded DSLs are widely used in both functional and dynamic languages they are yet to be widely accepted in the Java community. The best available examples are projects like jMock and Hibernate Criteria Query. In this paper we introduce the design of three novel practical embedded DSLs that we designed to showcase the power of Java language and specifically the changes introduced in Java 5. One of those DSLs is fully implemented as an open source project and is gathering momentum in the community. We proceed to discuss the approaches that allow designing safe and flexible DSLs by extracting generic patterns where possible and describing more specific idioms where necessary. It is our goal that this paper would serve as a starting point for someone designing an embedded DSL that takes full advantage of the Java 5 features. (C) 2010 Elsevier B.V. All rights reserved.
C1 [Kabanov, Jevgeni; Raudjaerv, Rein] Univ Tartu, Dept Comp Sci, Tartu, Estonia.
C3 University of Tartu
RP Kabanov, J (corresponding author), Univ Tartu, Dept Comp Sci, Liivi 2, Tartu, Estonia.
EM ekabanov@gmail.com; michael.hunger@jexp.de; reinra@gmail.com
CR AASARU J, 2008, THESIS U TARTU
   [Anonymous], 1999, Programming pearls
   Bauer C., 2005, HIBERNATE ACTION
   BRINGERT B, 2004, P ACM SIGPLAN WORKSH, P108
   BRUNETON E, 2002, ASM CODE MANIPULATIO
   Cuadrado LS, 2007, IEEE SOFTWARE, V24, P48, DOI 10.1109/MS.2007.135
   Fowler Martin, 2005, FluentInterface
   FREEMAN S, 2004, C OBJ OR PROGR SYST, P4
   Gamma E., 1994, Design patterns: Elements of reusable object-oriented software
   Gosling J., 2005, JAVA TM LANGUAGE SPE, V3rd
   Hudak P., 1996, ACM COMPUT SURV, V28, P196, DOI [10.1145/242224.242477, DOI 10.1145/242224.242477]
   KABANOV J, 2008, SQUILL
   Kabanov Jevgeni., 2008, PPPJ'08: Proceedings of the 6th international symposium on Principles and practice of programming in Java, P189
   Lindholm Tim., 1999, JAVA VIRTUAL MACHINE, V2nd
   REYNOLDS J, 1983, INFORM PROCESSING, V83, P1
   van Deursen A, 2000, ACM SIGPLAN NOTICES, V35, P26, DOI 10.1145/352029.352035
NR 16
TC 0
Z9 0
U1 0
U2 4
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 1
PY 2011
VL 76
IS 11
SI SI
BP 970
EP 991
DI 10.1016/j.scico.2010.04.005
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 791ND
UT WOS:000292671000002
OA Bronze
DA 2024-07-18
ER

PT J
AU Ward, M
   Zedan, H
AF Ward, Martin
   Zedan, Hussein
TI Combining dynamic and static slicing for analysing assembler
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Assembler; Slicing; Abstraction; Program transformation; Formal methods;
   Dynamic slicing; Static slicing
AB One of the most challenging tasks a programmer can face is attempting to analyse and understand a legacy assembler system. Many features of assembler make analysis difficult, and these are the same features which make migration from assembler to a high-level language difficult. In this paper we describe some of the methods used in the FermaT transformation system for analysing and migrating assembler systems. One technique we discuss in detail is to combine a simple dynamic slice, computed with virtually no overhead, and a static slice implemented using program transformation technology, to generate very concise high-level descriptions of the sliced code. (C) 2009 Elsevier B.V. All rights reserved.
C1 [Ward, Martin; Zedan, Hussein] De Montfort Univ, Software Technol Res Lab, Leicester LE1 9BH, Leics, England.
C3 De Montfort University
RP Ward, M (corresponding author), De Montfort Univ, Software Technol Res Lab, Leicester LE1 9BH, Leics, England.
EM martin@gkc.org.uk; zedan@dmu.ac.uk
OI Ward, Martin/0000-0001-7127-3311
CR AGRAWAL H, 1990, SIGPLAN NOTICES, V25, P246, DOI 10.1145/93548.93576
   BACK RJR, 1981, ACTA INFORM, V15, P233, DOI 10.1007/BF00289263
   Balzer R.M., 1969, Proceeding of the May 14-16, 1969, spring joint computer conference, AFIPS '69 (Spring), P567, DOI DOI 10.1145/1476793.1476881
   BESZEDAS A, 2002, 18 INT C SOFTW MAINT
   BILARDI G, 1999, STATIC SINGLE ASSIGN, P1
   BINKLEY D, 2004, 4 INT WORKSH SOURC C
   BOHM C, 1966, COMMUN ACM, V9, P366, DOI 10.1145/355592.365646
   Canfora G, 1998, INFORM SOFTWARE TECH, V40, P595, DOI 10.1016/S0950-5849(98)00086-X
   CARTWRIGHT R, 1989, SIGPLAN NOTICES, V24, P13, DOI 10.1145/74818.74820
   DANICIC S, 1999, THESIS LONDON U
   De Lucia A, 2003, SEVENTH EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, PROCEEDINGS, P363, DOI 10.1109/CSMR.2003.1192445
   Dijkstra E. W., 1976, A Discipline of Pro-gramming
   Feldman YA, 1995, 10TH KNOWLEDGE-BASED SOFTWARE ENGINEERING CONFERENCE, PROCEEDINGS, P123, DOI 10.1109/KBSE.1995.490127
   Harman M, 2003, J SYST SOFTWARE, V68, P45, DOI 10.1016/S0164-1212(02)00135-8
   HARMAN M, 2000, 9 IEEE INT C SOFTW M
   Harman M., 1997, 5 IEEE INT WORKSH PR
   HARMAN M, 2001, P ENG WORK C REV ENG
   HORWITZ S, 1990, ACM T PROGR LANG SYS, V12, P26, DOI [10.1145/77606.77608, 10.1145/960116.53994]
   JONES C, 1995, COMPUTER, V28, P87, DOI 10.1109/2.471193
   JONES C, 1998, YEAR 2000 SOFTWARE P
   KOREL B, 1988, INFORM PROCESS LETT, V29, P155, DOI 10.1016/0020-0190(88)90054-3
   LAGARIAS JC, 1985, AM MATH MON, V92, P3, DOI 10.2307/2322189
   Pingali K, 1997, ACM T PROGR LANG SYS, V19, P462, DOI 10.1145/256167.256217
   PRIESTLEY HA, 1994, J SYMB COMPUT, V18, P1, DOI 10.1006/jsco.1994.1035
   Scott J., 2000, Cutter IT Journal, V13, P7
   SNEED H, CHRIS VERHOEF REENGI
   THWAITES B., 1996, MATH GAZ, V80, P35
   Tikir MM, 2005, J SYST SOFTWARE, V78, P146, DOI 10.1016/j.jss.2004.12.021
   TIP F, 1995, THESIS AMSTERDAM
   VENKATESH GA, 1991, SIGPLAN NOTICES, V26, P107, DOI 10.1145/113446.113455
   Ward M, 1996, IEEE T SOFTWARE ENG, V22, P665, DOI 10.1109/32.541437
   Ward M., 1993, Journal of Software Maintenance: Research and Practice, V5, P101, DOI 10.1002/smr.4360050204
   Ward M, 1995, J SOFTW MAINT-RES PR, V7, P443, DOI 10.1002/smr.4360070606
   WARD M, 1989, THESIS OXFORD U
   WARD M, 2009, IEEE TSE IN PRESS
   WARD M, 1999, INT C SOFTW MAINT 30
   WARD M, 2001, IEEE INT WORKSH SOUR
   Ward M, 2008, SOFTWARE PRACT EXPER, V38, P1273, DOI 10.1002/spe.869
   Ward M, 2007, ACM T PROGR LANG SYS, V29, DOI 10.1145/1216374.1216375
   Ward MP, 2005, Ninth European Conference on Software Maintenance and Reengineering, Proceedings, P178, DOI 10.1109/CSMR.2005.19
   Ward MP, 2004, SCI COMPUT PROGRAM, V52, P213, DOI 10.1016/j.scico.2004.03.007
   WARD MP, 1994, SOFTWARE-CONC TOOL, V15, P147
   Ward MP, 2004, PROC IEEE INT CONF S, P157, DOI 10.1109/ICSM.2004.1357800
   WEISER M, 1984, IEEE T SOFTWARE ENG, V10, P352, DOI 10.1109/TSE.1984.5010248
   Weiser MD., 1979, PROGRAM SLICES FORMA
   YANG H., 2003, Successful Evolution of Software Systems
   ZHANG XY, 2002, IEEE INT WORKSH SOUR
NR 47
TC 5
Z9 7
U1 1
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR
PY 2010
VL 75
IS 3
BP 134
EP 175
DI 10.1016/j.scico.2009.11.001
PG 42
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 561LD
UT WOS:000274977800003
DA 2024-07-18
ER

PT J
AU Tanter, É
   Toledo, R
   Pothier, G
   Noyé, J
AF Tanter, Eric
   Toledo, Rodolfo
   Pothier, Guillaume
   Noye, Jacques
TI Flexible metaprogramming and AOP in Java
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT International Workshop on Advanced Software Development Tools and
   Techniques
CY JUL, 2008
CL Paphos, CYPRUS
DE metaprogramming; reflection; aspect-oriented programming; reflex; Java
ID PARTIAL BEHAVIORAL REFLECTION; VERSATILE KERNEL
AB Advanced programming techniques such as metaprogramming and computational reflection, as well as the more recent paradigm of aspect-oriented programming (AOP), serve important objectives of software engineering such as modularization and adaptability. In this tool presentation paper, we briefly overview this area and present Reflex, a portable tool for flexible metaprogramming and AOP in Java.
   Reflex provides both structural and behavioral facilities adopting a uniform model of partial reflection. This allows selective and fine-grained control of where and when reflection occurs. The facilities of Reflex make it easy to experiment with (combinations oo advanced uses of AOP and reflection without reinventing the wheel or being limited to a specific AOP language. (c) 2008 Elsevier B.V. All rights reserved.
C1 [Tanter, Eric; Toledo, Rodolfo; Pothier, Guillaume] Univ Santiago Chile, Comp Sci Dept DCC, PLEIAD Lab, Santiago, Chile.
   [Noye, Jacques] OBASCO Project Team EMN INRIA, Lina Nantes, France.
C3 Universidad de Santiago de Chile; IMT - Institut Mines-Telecom; IMT
   Atlantique
RP Tanter, É (corresponding author), Univ Santiago Chile, Comp Sci Dept DCC, PLEIAD Lab, Santiago, Chile.
EM etanter@dcc.uchile.cl; rtoledo@dcc.uchile.cl; gpothier@dcc.uchile.cl;
   noye@emn.fr
RI Tanter, Éric/A-7955-2008
OI Tanter, Éric/0000-0002-7359-890X
CR [Anonymous], P 5 INT C ASP OR SOF
   Avgustinov P, 2006, LECT NOTES COMPUT SC, V3880, P293
   Blair GS, 2000, INTERNATIONAL SYMPOSIUM ON SOFTWARE ENGINEERING FOR PARALLEL AND DISTRIBUTED SYSTEMS, PROCEEDINGS, P3, DOI 10.1109/PDSE.2000.847845
   Bracha G, 2004, ACM SIGPLAN NOTICES, V39, P331, DOI 10.1145/1035292.1029004
   Bravenboer M, 2004, ACM SIGPLAN NOTICES, V39, P365, DOI 10.1145/1035292.1029007
   CAPRA L, 2001, LNCS, V2192, P126, DOI DOI 10.1007/3-540-45429-2_
   Caromel D, 2004, LECT NOTES COMPUT SC, V3086, P316
   CAROMEL D, 2007, PARALLEL OB IN PRESS
   CHEVERST K, 2000, WORKSH INFR SMART DE
   Chiba S, 2000, LECT NOTES COMPUT SC, V1850, P313
   DIJKSTRA EW, 1968, COMMUN ACM, V11, P341, DOI 10.1145/363095.363143
   DOUENCE R, FILMAN, P201
   FABRY J, 2007, P 2 WORKSH DOM SPEC
   FABRY J, 2006, P 2006 ACM S APPL CO, P1615
   FILMAN R, 2005, ASPECT ORIENTED SOFT
   Gowing B., 1995, Proceeding. Fourth International Workshop on Object-Orientation in Operating Systems (IWOOOS '95) (Cat. No.95TH8120), P52, DOI 10.1109/IWOOS.1995.470579
   Kiczales G, 1997, LECT NOTES COMPUT SC, V1241, P220, DOI 10.1007/BFb0053381
   Kiczales G., 1991, The Art of the Metaobject Protocol
   Kiczales Gregor, 1992, P IMSA 92 WORKSH REF
   Kiczales Gregor, 2001, LNCS, V2072, P327, DOI DOI 10.1007/3-540-45337-718
   Kon F, 2002, COMMUN ACM, V45, P33, DOI 10.1145/508448.508470
   LIEBERHERR KJ, 1994, COMMUN ACM, V37, P94, DOI 10.1145/175290.175303
   LOPES CV, 1997, THESIS NE U
   LOWE W, 2006, LECT NOTES COMPUTER, V4089
   MAES P, 1987, SIGPLAN NOTICES, V22, P147
   McAffer J, 1995, LECT NOTES COMPUT SC, V952, P190
   MCAFFER J, 1996, P REFL 96, P39
   PARNAS DL, 1972, COMMUN ACM, V15, P1053, DOI 10.1145/361598.361623
   Pawlak R, 2004, SOFTWARE PRACT EXPER, V34, P1119, DOI 10.1002/spe.605
   RAO R, 1991, LECT NOTES COMPUT SC, V512, P251
   Redmond B, 2002, LECT NOTES COMPUT SC, V2374, P205
   Rodríguez L, 2004, SCCC 2004: XXIV INTERNATIONAL CONFERENCE OF THE CHILEAN COMPUTER SCIENCE SOCIETY, P48
   Röthlisberger D, 2008, COMPUT LANG SYST STR, V34, P46, DOI 10.1016/j.cl.2007.05.001
   Smith B. C., 1984, P 11 ACM SIGACT SIGP, P23, DOI [DOI 10.1145/800017.800513, 10.1145/800017.800513]
   SMITH BC, 1987, 272 MIT LAB COMP SCI
   STROUD RJ, 1996, ADV OBJECT ORIENTED, P31
   Suvee D., 2003, 2nd International Conference on Aspect-Oriented Software Development, P21
   Tanter É, 2005, LECT NOTES COMPUT SC, V3676, P173
   Tanter É, 2003, ACM SIGPLAN NOTICES, V38, P27, DOI 10.1145/949343.949309
   Tanter É, 2001, SCCC 2001: XXI INTERNATIONAL CONFERENCE OF THE CHILEAN COMPUTER SCIENCE SOCIETY, PROCEEDINGS, P264, DOI 10.1109/SCCC.2001.972656
   TANTER E, LOWE SUDHOLT, P227
   TANTER E, 2004, 1 EUR INT WORKSH ASP
   TANTER E, LOWE SUDHOLT, P98
   TANTER E, 2004, THESIS U NANTES U CH
   TANTER E, 2006, P AOSD WORKSH OP DYN
   Tanter E, 2007, ACM SIGPLAN NOTICES, V42, P27, DOI 10.1145/1241761.1241764
   Tanter É, 2006, LECT NOTES COMPUT SC, V4025, P316
   WATANABE T, 1988, SIGPLAN NOTICES, V23, P306, DOI 10.1145/62084.62111
   Welch I, 2001, 6TH USENIX CONFERENCE OF OBJECT-ORIENTED TECHNOLOGIES AND SYSTEMS (COOTS 01), P119
   YOKOTE Y, 1992, SIGPLAN NOTICES, V27, P414, DOI 10.1145/141937.141970
   2004, ACM SIGPLAN NOTICES, V39
   [No title captured]
NR 52
TC 12
Z9 12
U1 1
U2 6
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 1
PY 2008
VL 72
IS 1-2
BP 22
EP 30
DI 10.1016/j.scico.2007.10.005
PG 9
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 330AX
UT WOS:000257912800003
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Díaz-Agudo, B
   González-Calero, PA
   Recio-García, JA
   Sánchez-Ruiz-Granados, AA
AF Diaz-Agudo, Belen
   Gonzalez-Calero, Pedro A.
   Recio-Garcia, Juan A.
   Sanchez-Ruiz-Granados, Antonio A.
TI Building CBR systems with jCOLIBRI
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE case-based reasoning; problem-solving methods; ontologies
AB Case-based reasoning (CBR) is a paradigm for combining problem solving and learning that has become one of the most successful applied subfields of At in recent years. Now that CBR has become a mature and established technology two necessities have become critical: the availability of tools to build CBR systems, and the accumulated practical experience of applying CBR techniques to real-world problems. In this paper we are presenting jCOLIBRI, an object-oriented framework in Java for building CBR systems, that greatly benefits from the reuse of previously developed CBR systems. (c) 2007 Elsevier B.V. All rights reserved.
C1 [Diaz-Agudo, Belen; Gonzalez-Calero, Pedro A.; Recio-Garcia, Juan A.; Sanchez-Ruiz-Granados, Antonio A.] Univ Complutense Madrid, Fac Informat, Madrid, Spain.
C3 Complutense University of Madrid
RP Díaz-Agudo, B (corresponding author), Univ Complutense Madrid, Fac Informat, Madrid, Spain.
EM belend@sip.ucm.es; pedro@sip.ucm.es; jareciog@fdi.ucm.es;
   antonio.sanchez@fdi.ucm.es
RI Díaz-Agudo, Belén/AAC-5815-2021; Recio-Garcia, Juan A/K-5962-2014;
   Díaz-Agudo, Belén/K-6046-2014; Recio-Garcia, Juan/AAH-3284-2020;
   Gonzalez-Calero, Pedro A./B-2935-2009; Sanchez-Ruiz, Antonio/L-1278-2014
OI Díaz-Agudo, Belén/0000-0003-2818-027X; Recio-Garcia, Juan
   A/0000-0001-8731-6195; Díaz-Agudo, Belén/0000-0003-2818-027X;
   Recio-Garcia, Juan/0000-0001-8731-6195; Gonzalez-Calero, Pedro
   A./0000-0002-9151-5573; Sanchez-Ruiz, Antonio/0000-0003-0034-1254
CR Abasolo C., 2002, LECT NOTES COMPUTER, V2504
   [Anonymous], 1996, CASE BASED REASONING
   [Anonymous], AI COMMUNICATIONS
   [Anonymous], 2000, Data Mining: Practical Machine Learning Tools and Techniques with Java Implementations
   BENJAMINS R, 1998, INT J HUMAN COMPUTER, V49
   BERGMANN R, 1996, 4 GERM WORKSH CAS BA, V55, P120
   BERGMANN R, 1998, INRECA II METHODOLOG
   DIAZAGUDO B, 2002, P 15 INT FLAIRS 02 C
   DIAZAGUDO B, 2000, ADV CASE BASED REASO
   Funk P., 2004, 7 EUR C ECCBR 2004 M, V3155
   GOMEZGAUCHIA H, 2005, LNCS LNAI
   JACZYNSKI M, 1998, P 6 GERM WORKSH CAS
   KOHAVI R, 1996, MACH LEARNING LIB C, P234
   Kolodner J.L., 1993, Case-Based Reasoning
   MAXIMINI K, 2001, LNCS LNAI, P261
   PLAZA E, 2000, LNCS, V1932, P265
   RECIO JA, 2005, P ICCBR 2005
   SCHANK R., 1983, DYNAMIC MEMORY
   SCHUMACHER J, 2002, 1 GERM WORKSH EXP MA
   Watson I., 1998, APPL CASE BASED REAS
NR 20
TC 56
Z9 57
U1 0
U2 6
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 1
PY 2007
VL 69
IS 1-3
BP 68
EP 75
DI 10.1016/j.scico.2007.02.004
PG 8
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 253CQ
UT WOS:000252496700008
DA 2024-07-18
ER

PT J
AU Waddingtona, D
   Yao, B
AF Waddingtona, Daniel
   Yao, Bin
TI High-fidelity C/C++ code transformation
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 5th Workshop on Language Descriptions, Tools and Application (LDTA 05)
CY 2005
CL Edinburgh, SCOTLAND
SP ACM SIGPLAN
DE source transformations high-fidelity preprocessing
AB As software systems become increasingly massive, the advantages of automated transformation tools are clearly evident. These tools allow the machine to both reason about and manipulate high-level source code. They enable off-loading of mundane and laborious programming tasks from human developer to machine, thereby reducing cost and development time frames. Although there has been much work in software transformation, there still exist many hurdles in realizing this technology in a commercial domain. From our own experience, there are two significant problems that must be addressed before transformation technology can be usefully applied in a commercial setting. These are: (1) Avoiding disruption of the style (i.e., layout and commenting) of source code and the introduction of any undesired modifications that can occur as a side effect of the transformation process. (2) Correct automated handling of C preprocessing and the presentation of a semantically correct view of the program during transformation. Many existing automated transformation tools require source to be manually modified so that preprocessing constructs can be parsed. The real semantic of the program remains obscured resulting in the need for complicated analysis during transformation. Many systems also resort to pretty printing to generate transformed programs, which inherently disrupts coding style. In this paper we describe our own C/C++ transformation system, Proteus, that addresses both these issues. It has been tested on millions of lines of commercial CIC++ code and has been shown to meet the stringent criteria laid out by Lucent's own software developers. (C) 2007 Published by Elsevier B.V.
C1 Bell Labs, Lucent Technol, Murray Hill, NJ 07974 USA.
C3 AT&T; Alcatel-Lucent; Lucent Technologies
RP Yao, B (corresponding author), Bell Labs, Lucent Technol, 600 Mt Ave, Murray Hill, NJ 07974 USA.
EM dwadding@atl.lmco.com; byao@dnrc.bell-labs.com
CR [Anonymous], P C COMP CONSTR
   [Anonymous], 2002, P INT WORKSHOP PRINC
   [Anonymous], Programming Language
   Aversano L, 2002, SCAM 2002: SECOND IEEE INTERNATIONAL WORKSHOP ON SOURCE CODE ANALYSIS MANIPULATION, PROCEEDINGS, P83, DOI 10.1109/SCAM.2002.1134108
   Baxter ID, 2001, EIGHTH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P281, DOI 10.1109/WCRE.2001.957833
   BRAND M, 2001, LNCS, V2027, P365
   CORDY JR, 1991, COMPUT LANG, V16, P97, DOI 10.1016/0096-0551(91)90019-6
   Cox A, 2002, PROG COMPREHEN, P229, DOI 10.1109/WPC.2002.1021344
   Garrido A., 2004, ACM SIGPLAN C PROGR
   LUCKHAM DC, 1987, ADA LETT, V7, P94
   Malton A, 2001, PROG COMPREHEN, P127, DOI 10.1109/WPC.2001.921724
   MCCAMANT S, CSD021192 U CAL
   Van de Vanter ML, 2002, INFORM SOFTWARE TECH, V44, P767, DOI 10.1016/S0950-5849(02)00103-9
   van den Brand MGJ, 2000, SOFTWARE PRACT EXPER, V30, P259, DOI 10.1002/(SICI)1097-024X(200003)30:3<259::AID-SPE298>3.0.CO;2-Y
   Van den Brand MGJ., 2000, P 1 INT WORKSH RUL B
   Visser Eelco., 2001, REWRITING TECHNIQUES, V2051, P357, DOI DOI 10.1007/3-540-45127-7_27.URL
   Vittek M, 2003, SEVENTH EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, PROCEEDINGS, P101, DOI 10.1109/CSMR.2003.1192417
NR 17
TC 11
Z9 12
U1 0
U2 5
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 1
PY 2007
VL 68
IS 2
BP 64
EP 78
DI 10.1016/j.scico.2006.04.010
PG 15
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 218PY
UT WOS:000250028600002
DA 2024-07-18
ER

PT J
AU Ogata, K
   Futatsugi, K
AF Ogata, Kazuhiro
   Futatsugi, Kokichi
TI Modeling and verification of real-time systems based on equations
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE algebraic specifications; CafeOBJ; equations; modeling; TOTSs;
   real-time; rewriting; verification
ID FORMAL ANALYSIS
AB We describe timed observational transition systems (TOTSs). TOTSs are written in terms of equations. By regarding equations as left-to-right rewrite rules, rewriting, together with induction and/or case analysis, can be used to verify that timing properties hold for TOTSs. Concretely, CafeOBJ, an algebraic specification language, is used to specify TOTSs and verify that TOTSs have timing properties by writing proofs, or proof scores. Two case studies are used to demonstrate how to model real-time systems based on TOTSs, specify TOTSs in CafeOBJ and verify that TOTSs have timing properties with the CafeOBJ system. (C) 2007 Elsevier B.V. All rights reserved.
C1 Japan Adv Inst Sci & Technol, Grad Sch Informat Sci, Nomi, Ishikawa 9231292, Japan.
   NEC Software Hokuriku Ltd, Haku San, Ishikawa 9202141, Japan.
C3 Japan Advanced Institute of Science & Technology (JAIST)
RP Ogata, K (corresponding author), Japan Adv Inst Sci & Technol, Grad Sch Informat Sci, 1-1 Asahidai, Nomi, Ishikawa 9231292, Japan.
EM ogata@jaist.ac.jp
RI Ogata, Kazuhiro/AAV-1342-2020
OI Ogata, Kazuhiro/0000-0002-4441-3259
CR ABADI M, 1994, ACM T PROGR LANG SYS, V16, P1543, DOI 10.1145/186025.186058
   ALUR R, 1994, THEOR COMPUT SCI, V126, P183, DOI 10.1016/0304-3975(94)90010-8
   Chandy K.M., 1988, PARALLEL PROGRAM DES
   Clavel M, 2002, THEOR COMPUT SCI, V285, P187, DOI 10.1016/S0304-3975(01)00359-0
   Clavel M, 2003, LECT NOTES COMPUT SC, V2706, P76
   Diaconescu R., 1998, AMAST Series in Computing, V6
   Diaconescu R., 2000, J. UCS, V6, P74
   EKER S, 2002, 4 INT WORKSH REWR LO, V71
   Goguen J, 2000, THEOR COMPUT SCI, V245, P55, DOI 10.1016/S0304-3975(99)00275-3
   Goguen J, 2003, THIRD INTERNATIONAL CONFERENCE ON QUALITY SOFTWARE, PROCEEDINGS, P216, DOI 10.1109/QSIC.2003.1319106
   Goguen J., 2000, SOFTWARE ENG OBJ ALG, P3
   GOGUEN J, 2000, SOFTWARE ENGN OBJ
   GOGUEN JA, 1992, THEOR COMPUT SCI, V105, P217, DOI 10.1016/0304-3975(92)90302-V
   GUTTAG JV, 1993, LANGUAGES TOOLS FORM
   HSIANG J, 1983, LECT NOTES COMPUT SC, V154, P331
   Kong WQ, 2005, 12th Asia-Pacific Software Engineering Conference, Proceedings, P59
   LAMPORT L, 1994, ACM T PROGR LANG SYS, V16, P872, DOI 10.1145/177492.177726
   Lowe G., 1996, Tools and Algorithms for the Construction and Analysis of Systems. Second International Workshop, TACAS '96. Proceedings, P147
   Lucanu D, 2004, LECT NOTES COMPUT SC, V2937, P97
   McMillan K. L., 1993, Symbolic model checking
   NAKAGAWA AN, 1999, USERS MANUAL
   Nakano M, 2006, INT CONF QUAL SOFTW, P49
   Ogata K, 2005, INT CON DISTR COMP S, P795, DOI 10.1109/ICDCS.2005.32
   Ogata K, 2004, LECT NOTES COMPUT SC, V3233, P45
   Ogata K, 2003, LECT NOTES COMPUT SC, V2884, P170
   Ogata K, 2004, QSIC 2004: PROCEEDINGS OF THE FOURTH INTERNATIONAL CONFERENCE ON QUALITY SOFTWARE, P50
   Ogata K, 2003, LECT NOTES COMPUT SC, V2609, P441
   Ogata K, 2003, LECT NOTES COMPUT SC, V2575, P238
   Ogata K, 2003, INFORM PROCESS LETT, V86, P57, DOI 10.1016/S0020-0190(02)00480-5
   Ogata K, 2001, 16TH ANNUAL INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING (ASE 2001), PROCEEDINGS, P185, DOI 10.1109/ASE.2001.989804
   OGATA K, 2005, 6 PDCAT, P416
   OLVECZKY PC, 2000, 4 INT WORKSH REWR LO, V36
   SEINO T, 2006, 6 INT WORKSH RUL BAS, P57
NR 33
TC 6
Z9 6
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD APR 30
PY 2007
VL 66
IS 2
BP 162
EP 180
DI 10.1016/j.scico.2006.10.011
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 169OK
UT WOS:000246601300005
DA 2024-07-18
ER

PT J
AU Vela, FLG
   Montes, JLI
   Rodríguez, PP
   Román, MS
   Valverde, BJ
AF Gutierrez Vela, F. L.
   Isla Montes, J. L.
   Paderewski Rodriguez, P.
   Sanchez Roman, M.
   Jimenez Valverde, B.
TI An architecture for access control management in collaborative
   enterprise systems based on organization models
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 5th International Workshop on System/Software Architectures (IWSSA 2006)
CY JUN 27, 2006
CL Las Vegas, NV
DE collaborative system; software architecture; enterprise architecture;
   role-based access control; organization patterns
AB One of the most important characteristics of current enterprise systems is the existence of collaborative processes where different users/subsystems communicate and cooperate in order to carry out common activities. In these processes, shared resources are often used and there are complex relationships between activities and users, so the definition and administration of different security levels (tasks, users, resources, etc.) is necessary.
   In this article, we shall focus on an important dimension related to the security aspect of collaborative systems: access control. We shall use an organization model that considers the necessary elements to represent authorization and access control aspects in enterprise systems. This model is used in a service-oriented architecture (SOA) in order to facilitate the implementation of a service which is responsible for these important functions. Finally, we shall propose the use of a pattern definition language at a conceptual level to facilitate the modelling of the organizational structures of an enterprise system. We shall specify organization patterns that will help us define general models which can be applied in different situations. (C) 2006 Elsevier B.V. All rights reserved.
C1 Univ Granada, Dept Comp Languages & Syst, Granada, Spain.
   Univ Cadiz, Dept Comp Languages & Syst, Cadiz, Spain.
C3 University of Granada; Universidad de Cadiz
RP Vela, FLG (corresponding author), Univ Granada, Dept Comp Languages & Syst, Granada, Spain.
EM fgutierr@ugr.es; joseluis.isla@uca.es; patricia@ugr.es; miguesr@ugr.es;
   beajv@ugr.es
RI Paderewski Rodriguez, Patricia/E-1009-2012; Isla-Montes,
   José-Luis/AAF-8033-2019; Gutierrez Vela, Francisco Luis/C-2433-2012
OI Paderewski Rodriguez, Patricia/0000-0001-6626-9633; Isla-Montes,
   José-Luis/0000-0003-4275-1016; Gutierrez Vela, Francisco
   Luis/0000-0001-6629-7597; Sanchez-Roman, Monica/0000-0002-8734-3262
CR [Anonymous], 1996, Pattern oriented software architecture: a system of patters
   [Anonymous], THESIS U GRANADA
   [Anonymous], 1995, PROFESSIONAL COMPUTI
   ELLIS CA, 1991, COMMUN ACM, V34, P38
   FUXMAN A, 2001, P 2 INT C FORM ONT I, P10
   GARRIDO JL, 2001, LNCS, V2220
   GARRIDO JL, 2005, P ICSE RES PRACTICE, P59
   Goodyear M., 1999, Enterprise System Architectures: Building Client Server and Web Based Systems
   ISLA JL, 2006, HCI RELATED PAPERS I
   ISLA JL, 2005, ACT 10 JORN ING SOFT, P265
   Isla Montes JL, 2006, LECT NOTES COMPUT SC, V3865, P112
   Mintzberg H., 1992, STRUCTURE FIVES DESI
   *MIR TECHN REP, 2003, MICR INTR ACT DIR AP
   Paderewski-Rodríguez P, 2004, J SYST ARCHITECT, V50, P407, DOI 10.1016/j.sysarc.2003.09.012
   Paderewski-Rodríguez P, 2003, COMPUT STAND INTER, V25, P261, DOI 10.1016/S0920-5489(02)00097-1
   Paterno F., 2003, The Handbook of Task Analysis for Human-Computer Interaction, P483
   Sandhu R., 1996, IEEE Computer, V29, P38
   SHEN H, 1992, ACM C COMP SUPP COOP
   TERAI K, 2003, P 5 INT C EL COMM, V50, P473
   TOLONE G, 2004, ACM COMPUT SURV, V37, P29
   van Welie M, 1998, SPRING COMP SCI, P57
NR 21
TC 12
Z9 12
U1 0
U2 8
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD APR 15
PY 2007
VL 66
IS 1
BP 44
EP 59
DI 10.1016/j.scico.2006.10.005
PG 16
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 168GO
UT WOS:000246511500004
DA 2024-07-18
ER

PT J
AU Sterritt, R
   Rouff, CA
   Hinchey, MG
   Rash, JL
   Truszkowski, W
AF Sterritt, Roy
   Rouff, Christopher A.
   Hinchey, Michael G.
   Rash, James L.
   Truszkowski, Walt
TI Next generation system and software architectures - Challenges from
   future NASA exploration missions
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 4th International Workshop on Systems/Software Architectures
CY JUN, 2005
CL Las Vegas, NV
DE self-*; selfware; autonomous systems; autonomic systems; agent
   architectures; multi-agent technology; intelligent systems; spacecraft
AB The four key objective properties of a system that are required of it in order for it to qualify as "autonomic" are now well-accepted-self-configuring, self-healing, self-protecting, and self-optimizing-together with the attribute properties-viz. self-aware, environment-aware, self-monitoring and self-adjusting. This paper describes the need for next generation system software architectures, where components are agents, rather than objects masquerading as agents, and where support is provided for self-* properties (both existing self-chop and emerging self-* properties). These are discussed as exhibited in NASA missions, and in particular with reference to a NASA concept mission, ANTS, which is illustrative of future NASA exploration missions based on the technology of intelligent swarms. (c) 2006 Elsevier B.V. All rights reserved.
C1 Univ Ulster, Sch Comp & Math, Newtownabbey BT37 0QB, Antrim, North Ireland.
   SAiC, Adv Concepts Business Unit, Mclean, VA 22102 USA.
   NASA, Goddard Space Flight Ctr, Informat Syst Div, Code 580, Greenbelt, MD 20771 USA.
C3 Ulster University; Science Applications International Corporation
   (SAIC); National Aeronautics & Space Administration (NASA); NASA Goddard
   Space Flight Center
RP Sterritt, R (corresponding author), Univ Ulster, Sch Comp & Math, Shore Rd, Newtownabbey BT37 0QB, Antrim, North Ireland.
EM r.sterritt@ulster.ac.uk; rouffc@saic.com; Michael.G.Hinchey@nasa.gov;
   James.L.Rash@nasa.gov; Walt.Truszkowski@nasa.gov
RI Rouff, Christopher/AAF-8275-2020
OI Rouff, Christopher/0000-0002-8975-3898; Sterritt,
   Roy/0000-0002-4035-9363
CR BALASUBRAMANIAM D, 2005, P 2005 WORKSH DES EV, P1
   CLARK PE, 2002, P SOL SYST REM SENS
   CURTIS SA, 2000, P INT ASTR FED 51 C
   CURTIS SA, 2003, P IEEE AER C
   Murch R., 2004, Autonomic Computing (On Demand Series)
   ROUFF C, 2004, 2 IEEE INT C SOFTW E
   ROUFF CA, 2006, IN PRESS SOFTWARE TO
   ROUFF CA, 2005, NASA MONOGRAPHS SYST
   Rouff ChristopherA., 2005, A survey of formal methods for intelligent swarms
   SHERWOOD R, 1999, P 3 INT S RED COST G
   Stemtt R., 2002, Proceedings of the 27th Annual IEEFINASA Software Engineering Workshop, P40, DOI DOI 10.1109/SEW.2002.1199448
   Sterritt R, 2005, SERP '05: PROCEEDINGS OF THE 2005 INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING RESEARCH AND PRACTICE, VOLS 1 AND 2, P66
   Sterritt R, 2005, 12TH IEEE INTERNATIONAL CONFERENCE AND WORKSHOPS ON THE ENGINEERING OF COMPUTER-BASED SYSTEMS, PROCEEDINGS, P535, DOI 10.1109/ECBS.2005.22
   Sterritt R, 2005, 12TH IEEE INTERNATIONAL CONFERENCE AND WORKSHOPS ON THE ENGINEERING OF COMPUTER-BASED SYSTEMS, PROCEEDINGS, P506, DOI 10.1109/ECBS.2005.36
   Sterritt R, 2005, 12TH IEEE INTERNATIONAL CONFERENCE AND WORKSHOPS ON THE ENGINEERING OF COMPUTER-BASED SYSTEMS, PROCEEDINGS, P406, DOI 10.1109/ECBS.2005.75
   Sterritt R, 2003, INDIN 2003: IEEE INTERNATIONAL CONFERENCE ON INDUSTRIAL INFORMATICS, PROCEEDINGS, P433, DOI 10.1109/INDIN.2003.1300375
   STERRITT R, 2005, LNAI, V3228
   Swartwout M. A., 1998, ENG DATA SUMMARIES S
   TESAURO G, 2004, 3 INT JOINT C AUT AG, P464
   Truszkowski W, 2004, 11TH IEEE INTERNATIONAL CONFERENCE AND WORKSHOP ON THE ENGINEERING OF COMPUTER-BASED SYSTEMS, PROCEEDINGS, P484, DOI 10.1109/ECBS.2004.1316737
   TRUSZKOWSKI WF, 2006, IN PRESS IEEE T SY C
   TRUSZKOWSKI WF, 2004, IEEE IT PROFESSIONAL, P51
   TRUSZKOWSKI WF, 2006, IN PRESS NASA MONOGR
   WYATT J, 1999, P 5 INT S ART INT RO
   WYATT J, 1998, P 5 INT S AI ROB AUT
NR 25
TC 9
Z9 10
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN
PY 2006
VL 61
IS 1
BP 48
EP 57
DI 10.1016/j.scico.2005.11.005
PG 10
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 043QP
UT WOS:000237616700006
OA hybrid
DA 2024-07-18
ER

PT J
AU Shin, ME
AF Shin, ME
TI Self-healing components in robust software architecture for concurrent
   and distributed systems
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 3rd International Workshop on System/Software Architectures (IWSSA 04)
CY JUN, 2004
CL Las Vegas, NV
AB This paper describes an approach to designing self-healing components for robust, concurrent and distributed software architecture. A self-healing component is able to detect object anomalies inside of the component, reconfigure inter-component and intra-components before and after repairing the sick object, repair it, and then test the healed object. For this, each self-healing component is structured to the layered architecture with two layers, the service layer and the healing layer, which are designed separately from each other. The service layer of a self-healing component provides functional services to other components, whereas the healing layer encapsulates the self-healing mechanism for monitoring objects in the service layer and repairing the sick objects detected. The process of component self-healing includes detection, reconfiguration before and after repairing, repair, and testing. To illustrate this approach, the elevator system is considered. (c) 2004 Elsevier B.V. All rights reserved.
C1 Texas Tech Univ, Dept Comp Sci, Lubbock, TX 79409 USA.
C3 Texas Tech University System; Texas Tech University
RP Texas Tech Univ, Dept Comp Sci, Lubbock, TX 79409 USA.
EM Michael.Shin@coe.ttu.edu
RI Liu, Xuesong/E-9177-2010
CR [Anonymous], 2003, ARCH BLUEPR AUT COMP
   [Anonymous], 1996, Pattern oriented software architecture: a system of patters
   Booch Grady, 1999, UNIFIED MODELING LAN, DOI DOI 10.1007/3-540-40011-7_10
   Dashofy E.M., 2002, WORKSH SELF HEAL SYS
   GARLAN D, 2002, WORKSH ARCH DEP SYST
   GOMAA H, 2002, 8 IEEE INT C ENG COM
   GUERRA PAD, 2002, WORKSH ARCH DEP SYST
   KIM KH, 1997, COMMUNICATION ACM, V40
   KOOPMAN P, 2003, WORKSH SOFTW ARCH DE
   KOPETZ H, 1994, IEEE COMPUTER    JAN, P14
   Oreizy P, 1999, IEEE INTELL SYST APP, V14, P54, DOI 10.1109/5254.769885
   Rumbaugh James, 1999, The unified modeling language reference manual
   RUTHERFORD MJ, 2002, P IFIP ACM WORK C CO, P67
   Shaw M., 1996, SOFTWARE ARCHITECTUR
   SHIN ME, 2003, WORKSH COMP VER UML
   XU J, 1995, DIG PAP INT SYMP FAU, P499, DOI 10.1109/FTCS.1995.466948
NR 16
TC 28
Z9 30
U1 0
U2 4
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUL
PY 2005
VL 57
IS 1
BP 27
EP 44
DI 10.1016/j.scico.2004.10.003
PG 18
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 935UU
UT WOS:000229809700003
DA 2024-07-18
ER

PT J
AU da Silva, LD
   Perkusich, A
AF da Silva, LD
   Perkusich, A
TI Composition of software artifacts modelled using Colored Petri nets
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE component-based software development; Hierarchical Colored Petri nets;
   assume-guarantee reasoning; model checking
AB In this work we introduce a new formal model for software components supporting behavioral interpretability based on temporal logic, Petri nets, model checking, and an assume-guarantee strategy to specify and reason about the composition of concurrent component systems. The formal specification and verification strategies, methods, and techniques presented in this work contribute to the development of more dependable component-based software systems, in a modular way. An approach based on two complementary formalisms, Hierarchical Colored Petri Nets (HCPN) and temporal logic, is introduced. HCPN are used to visualize the structure and model the behavior of software architectures and components, and temporal logic is used to specify the required properties of software architectures and component interfaces. (c) 2004 Elsevier B.V. All rights reserved.
C1 Univ Fed Campina Grande, Dept Elect Engn, BR-58109970 Campina Grande, PB, Brazil.
C3 Universidade Federal de Campina Grande
RP Univ Fed Campina Grande, Dept Elect Engn, CP 10105, BR-58109970 Campina Grande, PB, Brazil.
EM leandro@dee.ufcg.edu.br; perkusic@dee.ufcg.edu.br
RI Silva, Leandro/AAC-1416-2020; Perkusich, Angelo/I-2447-2013; Perkusich,
   Angelo/O-1203-2018
OI Perkusich, Angelo/0000-0002-7377-1258; Dias da Silva,
   Leandro/0000-0003-4352-1466
CR [Anonymous], 2002, ADV COMPUTERS
   Bjorner NS, 2001, THEOR COMPUT SCI, V253, P27, DOI 10.1016/S0304-3975(00)00088-8
   CHENG A, 1997, MODEL CHECKING COLOU
   CHRISTENSEN S, 1996, DESIGN CPN ASK CTI
   Clarke EM, 1999, MODEL CHECKING, P1
   Crnkovic I, 2002, COMMUN ACM, V45, P35, DOI 10.1145/570907.570928
   DASILVA LD, 2003, P 1 INT WORKSH VER V
   GENSSLER T, 2002, P INT C COMP ARCH SY, P19
   He XD, 2004, J SYST SOFTWARE, V71, P11, DOI 10.1016/S0164-1212(02)00087-0
   Jensen K., 1992, COLOURED PETRI NETS
   JENSEN K, 1999, DESIGN CPN 4 0 META
   Jensen K., 1996, COLOURED PETRI NETS, VI.
   LUMPE M, 2003, ESEC 03 WORKSH SPECI, P58
   Nierstrasz O, 2002, LECT NOTES COMPUT SC, V2370, P200
   Northrop L., 2001, SOFTWARE PRODUCT LIN
   PADBERG J, 2000, P INT DES PROC TECHN
   PERKUSICH A, 2003, P IEEE C EM TECHN FA, V2
   Shaw M., 1996, SOFTWARE ARCHITECTUR
   SPECK A, 2002, J APPL MATH COMPUTER, V12, P581
   SZYPERSKI C, 1999, COMPONENT SOFTWARE B
   Ziaei R, 2003, LECT NOTES COMPUT SC, V2830, P324
NR 21
TC 4
Z9 4
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD APR
PY 2005
VL 56
IS 1-2
BP 171
EP 189
DI 10.1016/j.scico.2004.11.011
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 908SR
UT WOS:000227811000011
DA 2024-07-18
ER

PT J
AU van Engelen, R
   Whalley, D
   Yuan, X
AF van Engelen, R
   Whalley, D
   Yuan, X
TI Automatic validation of code-improving transformations on low-level
   program representations
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
AB This paper presents a general approach for automatically validating code-improving transformations on low-level program representations. The approach ensures the correctness of compiler and hand-specified optimizations at the machine instruction level. The method verifies the semantic equivalence of the program representation before and after a transformation to determine the validity of the transformation. To verify that the transformation is semantics preserving, the method derives semantic effects from the instructions that span the execution paths affected by the transformation. The semantics are preserved if the normalized semantic effects are unchanged. A validating compilation system was implemented that is able to validate traditional compiler transformations and more powerful transformations that modify the branch structure of a program. (C) 2004 Elsevier B.V. All rights reserved.
C1 Florida State Univ, Dept Comp Sci, Tallahassee, FL 32306 USA.
C3 State University System of Florida; Florida State University
RP Florida State Univ, Dept Comp Sci, Tallahassee, FL 32306 USA.
EM engelen@cs.fsu.edu
CR [Anonymous], 1990, Predicate Calculus and Program Semantics
   [Anonymous], PLDI 98
   [Anonymous], 1985, Compilers principles, techniques, and tools
   [Anonymous], PROGRAMMING LANGUAGE
   Bachmann O., 1994, ISSAC'94. Proceedings of the International Symposium on Symbolic and Algebraic Computation, P242, DOI 10.1145/190347.190423
   Bening L., 2001, PRINCIPLES VERIFIABL
   BENITEZ ME, 1988, P SIGPLAN 88 C PROGR, P329
   BERGSTRA JA, 1996, LNCS, V1058
   BOYD MR, 1995, J PROGRAM LANG, V3, P69
   BOYD MR, 1993, SIGPLAN NOTICES, V28, P26, DOI 10.1145/173262.155093
   CIMATTI A, 1997, INT C COMP AID VER J, P202
   Dow C.-R., 1992, Proceedings. Supercomputing '92. (Cat. No.92CH3216-9), P194, DOI 10.1109/SUPERC.1992.236694
   DYBJER P, 1986, LECT NOTES COMPUTER, V182, P329
   Guttman J. D., 1995, LISP and Symbolic Computation, V8, P5, DOI 10.1007/BF01128406
   HOARE CAR, 1969, COMMUN ACM, V12, P576, DOI 10.1145/363235.363259
   Jaramillo C, 1998, 1998 INTERNATIONAL CONFERENCE ON PARALLEL ARCHITECTURES AND COMPILATION TECHNIQUES, PROCEEDINGS, P118, DOI 10.1109/PACT.1998.727181
   Moore J. S., 1989, Journal of Automated Reasoning, V5, P461
   MORRIS FL, 1973, P ACM S PRINCIPLES P, P144
   Necula G. C., 2000, SIGPLAN Notices, V35, P83, DOI 10.1145/358438.349314
   Necula G.C., 1997, 24 ANN S PRINCIPLES, P106
   Rinard Martin C., 1999, P FLOC WORKSH RUN TI
   Tarditi D, 1996, ACM SIGPLAN NOTICES, V31, P181, DOI 10.1145/249069.231414
   THATCHER J, 1994, P WORKSH SEM DIR COM, P165
   van Engelen R. A., 2001, Innovative Architecture for Future Generation High-Performance Processors and Systems, P80, DOI 10.1109/IWIA.2001.955200
   VANENGELEN R, 2000, ACM SIGPLAN WORKSH L
   VANENGELEN RA, 1996, 10 ACM INT C SUP, P86
   VANENGELEN RA, 2001, LNCS, V2027, P118
   VNENGELEN R, 2003, P 8 ACM S APPL COMP, P684
   WHALLEY DB, 1994, ACM T PROGR LANG SYS, V16, P1648, DOI 10.1145/186025.186103
   WIELEMAKER J, 1995, SWI PROLOG REFERENCE
   ZHAO WK, 2002, P LCTES C
NR 31
TC 1
Z9 1
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD AUG
PY 2004
VL 52
IS 1-3
BP 257
EP 280
DI 10.1016/j.scico.2004.03.008
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 841OS
UT WOS:000222940800008
OA Bronze
DA 2024-07-18
ER

PT J
AU Kozen, D
AF Kozen, D
TI Some results in dynamic model theory
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE model theory; Kleene algebra; dynamic logic
ID KLEENE ALGEBRA
AB First-order structures over a fixed signature Sigma give rise to a family of trace-based and relational Kleene algebras with tests defined in terms of Tarskian frames. A Tarskian frame is a Kripke frame whose states are valuations of program variables and whose atomic actions are state changes effected by variable assignments x := e, where e is a Sigma-term. The Kleene algebras with tests that arise in this way play a role in dynamic model theory akin to the role played by Lindenbaum algebras in classical first-order model theory. Given a first-order theory T over Sigma, we exhibit a Kripke frame U whose trace algebra Tr-U is universal for the equational theory of Tarskian trace algebras over Sigma satisfying T, although U itself is not Tarskian in general. The corresponding relation algebra Rel(U) is not universal for the equational theory of relation algebras of Tarskian frames, but it is so modulo observational equivalence. (C) 2004 Elsevier B.V. All rights reserved.
C1 Cornell Univ, Dept Comp Sci, Ithaca, NY 14853 USA.
C3 Cornell University
RP Cornell Univ, Dept Comp Sci, Ithaca, NY 14853 USA.
EM kozen@cs.cornell.edu
OI Kozen, Dexter/0000-0002-8007-4725
CR Angus A., 2001, KLEENE ALGEBRA TESTS
   [Anonymous], 1992, Model Theory
   BARTH A, 2002, 20021865 CORN U COMP
   Bell J.L., 1971, MODELS ULTRAPRODUCTS
   HARDIN C, 2002, 20021879 CORN U COMP
   HAREL D, 2000, FOUNDAT COMPUT, P3
   Kaplan D. M., 1969, J COMPUT SYST SCI, V3, P361, DOI 10.1016/S0022-0000(69)80027-9
   KOZEN D, 1994, INFORM COMPUT, V110, P366, DOI 10.1006/inco.1994.1037
   Kozen D, 2001, IEEE S LOG, P259, DOI 10.1109/LICS.2001.932502
   Kozen D, 1997, LECT NOTES COMPUT SC, V1258, P244
   Kozen D, 1997, ACM T PROGR LANG SYS, V19, P427, DOI 10.1145/256167.256195
   Kozen D, 2000, LECT NOTES ARTIF INT, V1861, P568
   Kozen D., 2001, 20011833 CORN U COMP
   KOZEN D, 2000, T COMPUTATIONAL LOGI, V1, P60
   KOZEN D, 2002, 20021881 CORN U COMP
   Pratt V.R., 1980, P 12 S THEOR COMP, P22
NR 16
TC 8
Z9 8
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAY
PY 2004
VL 51
IS 1-2
BP 3
EP 22
DI 10.1016/j.scico.2003.09.004
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 817WR
UT WOS:000221208100002
DA 2024-07-18
ER

PT J
AU Fernandez, JC
   Bozga, M
   Ghirvu, L
AF Fernandez, JC
   Bozga, M
   Ghirvu, L
TI State space reduction based on live variables analysis
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 6th International Symposium on Static Analysis
CY SEP 22-24, 1999
CL VENICE, ITALY
SP EALPS, ALP, CNR, Compulog, Ca Foscari Univ, Padova Univ
DE model checking; state space reduction; bisimulation; asynchronous
   communication; live variables analysis
ID TEST-GENERATION; SYSTEMS; VERIFICATION; PROTOCOL
AB The intrinsic complexity of most protocol specifications in particular, and of asynchronous systems in general, lead us to study combinations of static analysis with classical model-checking techniques as a way to enhance the performances of automated validation tools. In this context, we found that a non-trivial equivalence over the model states can be derived from the information on live variables. This equivalence exploits the unused dead values stored both in process variables and in communication queues and allows to reduce the model with a rather important factor. Furthermore, this reduction comes almost for free and is always possible to directly generate the quotient model without generating the initial one. (C) 2003 Elsevier Science B.V. All rights reserved.
C1 Verimag, Ctr Equat, F-38610 Gieres, France.
   IMAG, LSR, F-38402 St Martin Dheres, France.
C3 Communaute Universite Grenoble Alpes; Institut National Polytechnique de
   Grenoble; Universite Grenoble Alpes (UGA); Centre National de la
   Recherche Scientifique (CNRS)
RP Bozga, M (corresponding author), Verimag, Ctr Equat, 2 Ave Vignate, F-38610 Gieres, France.
CR Abdulla P, 1999, LECT NOTES COMPUT SC, V1579, P208
   Aho A.V., 1986, COMPILERS PRINCIPLES
   [Anonymous], 1980, CALCULUS COMMUNICATI, DOI DOI 10.1007/3-540-10235-3
   [Anonymous], LECT NOTES COMPUTER
   [Anonymous], 1981, Lecture Notes in Computer Science, DOI [10.1007/BFb0017309, DOI 10.1007/BFB0017309]
   Bensalem S, 1998, LECT NOTES COMPUT SC, V1427, P319, DOI 10.1007/BFb0028755
   Bozga M, 2000, SCI COMPUT PROGRAM, V36, P27, DOI 10.1016/S0167-6423(99)00017-9
   Bozga M, 1999, LECT NOTES COMPUT SC, V1708, P307
   Bozga M, 2000, LECT NOTES COMPUT SC, V1785, P235
   COLBY C, 1998, P SIGPLAN C PROGR LA, P345
   DAWS C, 1996, P RTSS 96 WASH DC US
   Fernandez J.-C., 1992, Formal Methods in System Design, V1, P251, DOI 10.1007/BF00121127
   FERNANDEZ JC, 1996, LECT NOTES COMPUTER, V1102, P437
   Godefroid P., 1996, Lecture Notes in Computer Science, V1032
   GRAF S, 2001, LECT NOTES COMPUTER, V2057
   Holzmann G. J., 1991, Design and Validation of Comp. Protocols, V512
   Kurshan R, 1998, LECT NOTES COMPUT SC, V1384, P345, DOI 10.1007/BFb0054182
   MCMILLAN K, 1993, SYMBOLIC CHECKING AP
   Muchnick S., 1997, ADV COMPILER DESIGN
   WEISER M, 1984, IEEE T SOFTWARE ENG, V10, P352, DOI 10.1109/TSE.1984.5010248
   [No title captured]
NR 21
TC 8
Z9 11
U1 0
U2 7
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAY-JUN
PY 2003
VL 47
IS 2-3
BP 203
EP 220
AR PII S0167-6423(02)00133-8
DI 10.1016/S0167-6423(02)00133-8
PG 18
WC Computer Science, Software Engineering
WE Conference Proceedings Citation Index - Science (CPCI-S); Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 664CQ
UT WOS:000182044500006
DA 2024-07-18
ER

PT J
AU Carreira, PJF
   Costa, MEF
AF Carreira, PJF
   Costa, MEF
TI Automatically verifying an object-oriented specification of the
   Steam-Boiler system
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 5th ERCIM International Workshop on Forman Methods for Industrial
   Critical Systems (FMICS)
CY APR 03-04, 2000
CL BERLIN, GERMANY
SP GMD Res Inst Open Communicat Syst
DE automatic verification; code generation; LOTOS; model-checking;
   object-oriented systems; steam-boiler
ID STATE
AB Correctness is a desired property of industrial software systems. Although the employment of formal methods and their verification techniques in embedded real-time systems has started to be a common practice, the same cannot be said about object-oriented software. This paper presents an experiment of a technique for the automated verification of a subset of the object-oriented language OBject LOGic (OBLOG). In our setting, object-oriented models are automatically translated to LOTOS specifications using a programmable rule-based engine included in the Development Environment of the OBLOG language. The resulting specifications are then verified by model-checking using the CADP tool-box. To illustrate the concept we develop and verify an object-oriented specification of a well-known case study-the Steam-Boiler Control System. (C) 2002 Elsevier Science B.V. All rights reserved.
C1 OBLOG Software SA, P-2795023 Lisbon, Portugal.
RP Carreira, PJF (corresponding author), OBLOG Software SA, Al Antonio Sergio 7,1-A, P-2795023 Lisbon, Portugal.
EM pcarreira@oblog.pt; ecosta@oblog.pt
RI Carreira, Paulo/I-8478-2012
OI Carreira, Paulo/0000-0002-2244-9138
CR ABRIAL JR, 1996, LECT NOTES COMPUTER, V1165
   ANDRADE LFA, 1996, P 13 WORLD C INT FED, V50, P113
   [Anonymous], 1986, P 1 S LOG COMP SCI L
   [Anonymous], 1980, CALCULUS COMMUNICATI, DOI DOI 10.1007/3-540-10235-3
   Booch G., 1997, Unified Modeling Language Semantics and Notation Guide 1.0
   CARREIRA PJF, 1999, THESIS U LISBOA
   CLARKE EM, 1986, ACM T PROGR LANG SYS, V8, P244, DOI 10.1145/5397.5399
   CLARKE EM, 1994, ACM T PROGR LANG SYS, V16, P834
   CLARKE EM, 1996, ACM COMPUT SURV, V28, P5
   DENICOLA R, 1990, LECT NOTES COMPUT SC, V469, P407
   DUVAL G, 1996, LECT NOTES COMPUTER, V1165, P203
   Dwyer M. B., 1998, Proceedings of FMSP'98. Second Workshop on Formal Methods in Software Practice, P7, DOI 10.1145/298595.298598
   DWYER MB, 1999, ACM SIGPLAN PART EV
   Ehrig Hartmut., 1985, Fundamentals of algebraic specification, V1
   FERNANDEZ JC, 1996, LECT NOTES COMPUTER, V1102, P437
   Garavel Hubert, 1989, P 2 INT C FORM DESCR, P147
   HAREL D, 1990, IEEE T SOFTWARE ENG, V16, P403, DOI 10.1109/32.54292
   Hoare CAR., 1985, Communicating Sequential Processes
   *ISO IEC, 1988, 8807 ISO IEC
   JANSSEN W, 1998, P 4 INT SPIN WORKSH
   KURSHAN RP, 1990, LECT NOTES COMPUT SC, V430, P414
   Milner Robin., 1989, INT SERIES COMPUTER
   *OBLOG, 1999, OBLOG TECHN INF
   Queille J.-P., 1982, ser. Lecture Notes in Computer Science, P337, DOI [DOI 10.1007/3-540-11494-722, DOI 10.1007/3-540-11494-7_22, 10 . 1007 / 3 - 540 - 11494-7_22]
   SCHMIDT DA, 1998, LECT NOTES COMPUTER, V1165
   WILLIG A, 1996, LECT NOTES COMPUTER, V1165, P473
NR 26
TC 2
Z9 2
U1 0
U2 0
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR
PY 2003
VL 46
IS 3
BP 197
EP 217
AR PII S0167-6423(02)00092-8
DI 10.1016/S0167-6423(02)00092-8
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 634AF
UT WOS:000180317300002
DA 2024-07-18
ER

PT J
AU Mammar, A
   Belguidoum, M
   Hiba, SH
AF Mammar, Amel
   Belguidoum, Meriem
   Hiba, Saddam Hocine
TI A formal approach for the correct deployment of cloud applications
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Cloud computing; Component-based application; EVENT-B; Formal
   verification; Refinement
ID VERIFICATION; SECURITY
AB The deployment of cloud applications is a complex task. It refers to the enablement of SaaS, PaaS or IaaS solutions that may be accessed on demand by end users. It encompasses all the activities from installation to uninstallation, including reconfiguration, etc. To facilitate the deployment of cloud applications, it is essential to design them as component-based applications in order to favor the design by reusing and reducing the development cost. However, assembling components can be a tedious and error-prone task if sufficient precautions are not taken regarding different constraints, dependencies, and conflicts between components. In this paper, we introduce a formal EVENT-B-based approach for the modeling and the verification of component-based applications deployment. Our goal is to build correct by-construction systems that fulfill the different constraints regarding the components, the cloud infrastructure, and the deployment process. Basically, our approach starts with an abstract model describing the main concepts of the system. Then different details are gradually introduced through refinement. For each refinement step, proof obligations are produced to ensure the model's correctness. The obtained formal model consists of a precise specification on which mathematical reasoning can be carried out to prove the correctness of our component-based application model and validate its deployment in a cloud environment by using PROB. The presented approach is illustrated through a case study.
C1 [Mammar, Amel] Inst Polytech Paris, SAMOVAR, Telecom SudParis, F-91120 Palaiseau, France.
   [Belguidoum, Meriem; Hiba, Saddam Hocine] Abdelhamid Mehri Constantine 2, LIRE Lab, Constantine, Algeria.
C3 IMT - Institut Mines-Telecom; Institut Polytechnique de Paris; Telecom
   SudParis
RP Mammar, A (corresponding author), Inst Polytech Paris, SAMOVAR, Telecom SudParis, F-91120 Palaiseau, France.
EM amel.mammar@telecom-sudparis.eu; meriem.belguidoum@univ-constantine2.dz;
   saddam.hiba@univ-constantine2.dz
OI MAMMAR, AMEL/0000-0003-0016-6898
CR Abbassi Imed, 2017, On the Move to Meaningful Internet Systems: OTM 2017 Conferences. Confederated International Conferences CoopIS, C&TC and ODBASE 2017. Proceedings: LNCS 10573, P732, DOI 10.1007/978-3-319-69462-7_46
   Abrial Jean-Raymond, 2010, International Journal on Software Tools for Technology Transfer, V12, P447, DOI 10.1007/s10009-010-0145-y
   Abrial J.-R., 1996, B BOOK ASSIGNING PRO
   Abrial J R, 2010, Modeling in Event-B: system and softeng
   Al-Dhuraibi Y, 2018, IEEE T SERV COMPUT, V11, P430, DOI 10.1109/TSC.2017.2711009
   Armbrust, 2009, UCBEECS200928, V53, P50
   Arshad N, 2007, SOFTWARE QUAL J, V15, P265, DOI 10.1007/s11219-007-9019-2
   Belguidoum M., 2008, Ph.D. thesis
   Belguidoum M, 2007, ELECTRON NOTES THEOR, V182, P17, DOI 10.1016/j.entcs.2006.09.029
   Ben Hafaiedh I, 2021, CLUSTER COMPUT, V24, P2977, DOI 10.1007/s10586-021-03305-4
   Bravetti M, 2020, MICROSERVICES: SCIENCE AND ENGINEERING, P183, DOI 10.1007/978-3-030-31646-4_8
   Champelovier D., 2011, Reference Manual of the LOTOS NT to LOTOS Translator-Version 5.4
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Etchevers X, 2017, SOFTWARE PRACT EXPER, V47, P3, DOI 10.1002/spe.2400
   Fakhfakh F, 2021, J UNIVERS COMPUT SCI, V27, P341, DOI 10.3897/jucs.66455
   Galante G, 2012, INT CONF UTIL CLOUD, P263, DOI 10.1109/UCC.2012.30
   Garavel H, 2011, LECT NOTES COMPUT SC, V6605, P372, DOI 10.1007/978-3-642-19835-9_33
   Graiet M, 2017, FORM ASP COMPUT, V29, P987, DOI 10.1007/s00165-017-0425-3
   Herbst NR, 2013, 10th international conference on autonomic computing (ICAC 13), P23
   Jarraya Y., 2012, 2012 International Conference on Collaboration Technologies and Systems (CTS), P447, DOI 10.1109/CTS.2012.6261089
   Johnsen E.B., 2011, Lecture Notes in Computer Science, V6957, P142, DOI [10.1007/978- 3- 642-25271-6 8, DOI 10.1007/978-3-642-25271-6]
   Kamel O, 2021, COMPUT STAND INTER, V74, DOI 10.1016/j.csi.2020.103483
   Karam Y, 2012, UKSIM EURO SYMP COMP, P67, DOI 10.1109/EMS.2012.17
   Khebbeb K, 2019, COMM COM INF SC, V1085, P64, DOI 10.1007/978-3-030-32213-7_5
   Leuschel M, 2003, LECT NOTES COMPUT SC, V2805, P855
   Leuschel M., 2021, About us
   Li ZP, 2022, IEEE T SERV COMPUT, V15, P308, DOI 10.1109/TSC.2019.2939836
   Mammar A., 2021, S.H.H.: a formal approach for the deployment verification of cloud applications
   Mell P, 2010, COMMUN ACM, V53, P50
   Muniasamy K, 2019, IFAC PAPERSONLINE, V52, P1198, DOI 10.1016/j.ifacol.2019.11.361
   Naskos A, 2016, IEEE CLOUD COMPUT, V3, P26, DOI 10.1109/MCC.2016.108
   Nawaz MS, 2018, INT CONF ADV CLOUD B, P42, DOI 10.1109/CBD.2018.00017
   Perez C., 2018, 5 INT S FORM APPR PA, P1
   Qiu SM, 2022, IEEE T DEPEND SECURE, V19, P1338, DOI 10.1109/TDSC.2020.3022797
   Rivera V, 2017, INT J SOFTW TOOLS TE, V19, P31, DOI 10.1007/s10009-015-0381-2
   Roy S, 2019, IEEE T IND INFORM, V15, P457, DOI 10.1109/TII.2018.2824815
   Sotiriadis S., 2016, IEEE Trans. Serv. Comput. PP, P1
   Souri A, 2018, COMPUT STAND INTER, V58, P1, DOI 10.1016/j.csi.2017.11.007
   Yadav MP, 2022, INT J SYST ASSUR ENG, V13, P2208, DOI 10.1007/s13198-022-01627-z
   Ye L, 2012, IEEE GLOB COMM CONF, P777, DOI 10.1109/GLOCOM.2012.6503207
   Zhang XY, 2019, LECT NOTES COMPUT SC, V11517, P1, DOI 10.1007/978-3-030-23381-5_1
NR 41
TC 0
Z9 0
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN
PY 2024
VL 232
AR 103048
DI 10.1016/j.scico.2023.103048
EA NOV 2023
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA Z4GY7
UT WOS:001111688400001
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Erthal, VM
   de Souza, BP
   dos Santos, PSM
   Travassos, GH
AF Erthal, Vladimir M.
   de Souza, Bruno P.
   dos Santos, Paulo Sergio M.
   Travassos, Guilherme H.
TI Characterization of continuous experimentation in software engineering:
   Expressions, models, and strategies
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Continuous experimentation; Data -driven development; Controlled
   experiments; A; b testing; Evidence -based software engineering
ID CHALLENGES
AB Context: Continuous Experimentation (CE) has become increasingly popular across industry and academic communities. Major software organizations use CE to increase their revenue by adding value to end-users, and researchers are investigating the CE adoption process and usage to expand its success. Given this rapid evolution, observing a shared understanding of CE definitions, processes, and experiment strategies is difficult, potentially jeopardizing new implementations and focused research efforts.Objective: To characterize CE from the perspective of its definitions, processes, and strategies for experimentation available in the technical literature and to evolve the understanding perspectives for "continuous experimentation" and "data-driven development" definitions.Method: To select and analyze sources of information in the technical literature dealing with different aspects of continuous experimentation through a Literature Study using an ad hoc search improved with snowballing (backward and forward). Organize the findings into new perspectives for CE definitions, processes, and experiment strategies.Results: It was possible to identify many different definitions, processes, and experimental strategies used to describe CE in the 72 analyzed empirical papers, making it difficult to decide on their combination to be applied in a real software development project. Therefore, it has been proposed to evolve the CE understanding perspective, to categorize its experiment strategies, and to offer a combined development process for CE combining parts of other processes. Besides, conjectural requirements have been identified, which can contribute to better differentiating requirements and hypotheses in the CE context.Conclusion: Likely, a better understanding of CE is still missing. It can contribute towards organizing a common taxonomy to facilitate the possible choices for the experiment strategies. Therefore, there is space for more investigations on its applicability and value in different categories of software systems, despite all the advancements of CE and its promotion in developing modern software systems.& COPY; 2023 Elsevier B.V. All rights reserved.
C1 [Erthal, Vladimir M.; de Souza, Bruno P.; Travassos, Guilherme H.] Fed Univ Rio De Janeiro UFRJ, PESC, COPPE, Rio De Janeiro, RJ, Brazil.
   [dos Santos, Paulo Sergio M.] Fed Univ State Rio De Janeiro, Dept Appl Informat, Rio De Janeiro, RJ, Brazil.
RP Erthal, VM (corresponding author), Fed Univ Rio De Janeiro UFRJ, PESC, COPPE, Rio De Janeiro, RJ, Brazil.
EM vladimirerthal@cos.ufrj.br; bpsouza@cos.ufrj.br; pasemes@uniriotec.br;
   ght@cos.ufrj.br
RI Travassos, Guilherme H/G-2842-2012
OI Erthal, Vladimir/0000-0002-0637-3479
FU Coordenacao de Aperfeicoamento de Pessoal de Nivel Superior-Brasil
   (CAPES) [001]; CNPq [304234/2018-4]; CNE FAPERJ [E-26/201.170/2021]
FX This work is partially supported by the Coordenacao de Aperfeicoamento
   de Pessoal de Nivel Superior-Brasil (CAPES) - Finance Code 001 and by
   CNPq. Prof. Travassos is a CNPq researcher (Grant 304234/2018-4) and CNE
   FAPERJ (Grant E-26/201.170/2021) .
CR Alfaro-Flores R, 2021, 2021 XLVII LATIN AMERICAN COMPUTING CONFERENCE (CLEI 2021), DOI 10.1109/CLEI53233.2021.9639977
   Ampatzoglou A, 2019, INFORM SOFTWARE TECH, V106, P201, DOI 10.1016/j.infsof.2018.10.006
   [Anonymous], 2013, INT C LEAN ENT SOFTW
   Auer F., 2021, INT C SOFTW QUAL
   Auer F, 2021, INFORM SOFTWARE TECH, V134, DOI 10.1016/j.infsof.2021.106551
   Auer F, 2021, LECT NOTES COMPUT SC, V12607, P445, DOI 10.1007/978-3-030-67731-2_33
   Auer F, 2020, EUROMICRO CONF PROC, P186, DOI 10.1109/SEAA51224.2020.00041
   Auer F, 2018, EUROMICRO CONF PROC, P335, DOI 10.1109/SEAA.2018.00062
   Basili V. R., 1994, Encyclopedia of Software Engineering, V1, P528
   Bosch Jan, 2012, Leveraging Applications of Formal Methods, Verification and Validation. Technologies for Mastering Change. Technologies for Mastering Change. Proceedings of the 5th International Symposium, ISoLA 2012, P19, DOI 10.1007/978-3-642-34026-0_3
   Bosch J., 2012, 2012 JOINT WORK IEEE, P244
   Bosch J., 2012, INT C SOFTW BUS
   Bosch J, 2017, IEEE SOFTWARE, V34, P60, DOI 10.1109/MS.2017.3571569
   Bosch J, 2016, PROCEEDINGS OF 2016 IEEE/ACM 11TH INTERNATIONAL SYMPOSIUM ON SOFTWARE ENGINEERING FOR ADAPTIVE AND SELF-MANAGING SYSTEMS (SEAMS), P28, DOI [10.1109/SEAMS.2016.011, 10.1145/2897053.2897066]
   Bosch-Sijtsema P, 2015, J PROD INNOVAT MANAG, V32, P793, DOI 10.1111/jpim.12233
   Buchert T, 2015, FUTURE GENER COMP SY, V45, P1, DOI 10.1016/j.future.2014.10.007
   Cole R., 2002, TOTAL QUAL MANAGE, V13, P1051, DOI DOI 10.1080/09544120200000001
   Crook T, 2009, KDD-09: 15TH ACM SIGKDD CONFERENCE ON KNOWLEDGE DISCOVERY AND DATA MINING, P1105
   Deng A, 2016, KDD'16: PROCEEDINGS OF THE 22ND ACM SIGKDD INTERNATIONAL CONFERENCE ON KNOWLEDGE DISCOVERY AND DATA MINING, P77, DOI 10.1145/2939672.2939700
   Endres A., 2003, A Handbook of Software and Systems Engineering: Empirical Observations, Laws, and Theories
   Esteller-Cucala M, 2020, J IND ENG MANAG-JIEM, V13, P228, DOI 10.3926/jiem.3042
   Fabijan A, 2020, IEEE SOFTWARE, V37, P60, DOI 10.1109/MS.2018.2875842
   Fabijan A, 2019, 2019 IEEE/ACM 41ST INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING: SOFTWARE ENGINEERING IN PRACTICE (ICSE-SEIP 2019), P1, DOI 10.1109/ICSE-SEIP.2019.00009
   Fabijan A, 2018, J SOFTW-EVOL PROC, V30, DOI 10.1002/smr.2113
   Fabijan A, 2018, EUROMICRO CONF PROC, P68, DOI 10.1109/SEAA.2018.00021
   Fabijan A, 2017, PROC INT CONF SOFTW, P770, DOI 10.1109/ICSE.2017.76
   Fagerholm F, 2017, J SYST SOFTWARE, V123, P292, DOI 10.1016/j.jss.2016.03.034
   Feitelson DG, 2013, IEEE INTERNET COMPUT, V17, P8, DOI 10.1109/MIC.2013.25
   Fitzgerald B, 2017, J SYST SOFTWARE, V123, P176, DOI 10.1016/j.jss.2015.06.063
   Gerostathopoulos I., 2019, 5 RCOSE ACM SIGSOFT
   Gerostathopoulos I., 2018, 2018 IEEE INT C SOFT
   Giaimo F., 2020, EUR C SOFTW ARCH
   Giaimo F., 2017, EUR C SOFTW ARCH
   Giaimo F, 2020, J SYST SOFTWARE, V170, DOI 10.1016/j.jss.2020.110781
   Giaimo F, 2016, PROCEEDINGS OF THE XP2016 SCIENTIFIC WORKSHOPS, DOI 10.1145/2962695.2962709
   Giaimo F, 2019, EUROMICRO CONF PROC, P126, DOI 10.1109/SEAA.2019.00028
   Giaimo F, 2017, 2017 IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ARCHITECTURE (ICSA 2017), P203, DOI 10.1109/ICSA.2017.36
   Gomez-Uribe CA, 2016, ACM TRANS MANAG INF, V6, DOI 10.1145/2843948
   Gupta Somit, 2019, ACM SIGKDD Explorations Newsletter, V21, P20
   Gutbrod M, 2017, LECT NOTES COMPUT SC, V10611, P297, DOI 10.1007/978-3-319-69926-4_21
   Mattos DI, 2023, J SOFTW-EVOL PROC, V35, DOI 10.1002/smr.2390
   Jiang S, 2019, FAT*'19: PROCEEDINGS OF THE 2019 CONFERENCE ON FAIRNESS, ACCOUNTABILITY, AND TRANSPARENCY, P201, DOI 10.1145/3287560.3287565
   Karvonen T., 2015, LECT NOTES BUSINESS
   Kevic K, 2017, 2017 IEEE/ACM 39TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING: SOFTWARE ENGINEERING IN PRACTICE TRACK (ICSE-SEIP 2017), P123, DOI 10.1109/ICSE-SEIP.2017.19
   Kohavi R., 2012, P 18 ACM SIGKDD INT
   Kohavi R, 2014, PROCEEDINGS OF THE 20TH ACM SIGKDD INTERNATIONAL CONFERENCE ON KNOWLEDGE DISCOVERY AND DATA MINING (KDD'14), P1857, DOI 10.1145/2623330.2623341
   Kohavi R, 2013, 19TH ACM SIGKDD INTERNATIONAL CONFERENCE ON KNOWLEDGE DISCOVERY AND DATA MINING (KDD'13), P1168
   Kohavi R, 2007, KDD-2007 PROCEEDINGS OF THE THIRTEENTH ACM SIGKDD INTERNATIONAL CONFERENCE ON KNOWLEDGE DISCOVERY AND DATA MINING, P959
   Kohavi R, 2009, DATA MIN KNOWL DISC, V18, P140, DOI 10.1007/s10618-008-0114-1
   Kuhrmann M., 2017, ESE, V22, P6
   Lindgren E, 2016, INFORM SOFTWARE TECH, V77, P80, DOI 10.1016/j.infsof.2016.04.008
   Lindgren E, 2015, LECT NOTES BUS INF P, V212, P117, DOI 10.1007/978-3-319-18612-2_10
   Liu S., 2019, 2019 45 EUR C SOFTW
   Liu YC, 2021, P INT COMP SOFTW APP, P992, DOI 10.1109/COMPSAC51774.2021.00134
   Mattos D.I., 2019, INT C PROD FOC SOFTW
   Mattos D.I., 2018, INT C PROD FOC SOFTW
   Mattos DI, 2020, EUROMICRO CONF PROC, P101, DOI 10.1109/SEAA51224.2020.00026
   Mattos DI, 2018, LECT NOTES BUS INF P, V314, P277, DOI 10.1007/978-3-319-91602-6_20
   Mattos DI., 2020, P INT C SOFTW SYST P, P95
   Melegati J., 2020, IEEE T SOFTWARE ENG
   Melegati J., 2019, P 2019 27 ACM JOINT
   Melegati J., 2020, INT C AG SOFTW DEV
   Melegati J., 2019, INT C PROD FOC SOFTW
   Melegati J., 2020, INFORM SOFTWARE TECH
   Melegati J, 2020, EUROMICRO CONF PROC, P322, DOI 10.1109/SEAA51224.2020.00060
   Melegati J, 2019, 2019 IEEE/ACM JOINT 4TH INTERNATIONAL WORKSHOP ON RAPID CONTINUOUS SOFTWARE ENGINEERING AND 1ST INTERNATIONAL WORKSHOP ON DATA-DRIVEN DECISIONS, EXPERIMENTATION AND EVOLUTION (RCOSE-DDREE 2019), P16, DOI 10.1109/RCoSE/DDrEE.2019.00011
   Niculescu I., 2021, 2021 IEEE ACM 43 INT
   Olsson H.H., 2013, INT C SOFTW BUS
   Olsson H.H., 2019, INT C PROD FOC SOFTW
   Olsson H.H., 2013, IASTED, P798, DOI DOI 10.2316/P.2013.796-008
   Olsson HH, 2017, LECT NOTES BUS INF P, V304, P179, DOI 10.1007/978-3-319-69191-6_12
   Olsson HH, 2015, LECT NOTES BUS INF P, V210, P154, DOI 10.1007/978-3-319-19593-3_13
   Olsson HH, 2014, EUROMICRO CONF PROC, P9, DOI 10.1109/SEAA.2014.75
   Olsson Helena Holmstrom, 2015, SCI WORKSHOP P XP201, DOI [10.1145/2764979.2764982, DOI 10.1145/2764979.2764982]
   Ries E., 2011, The lean startup: How today's entrepreneurs use continuous innovation to create radically successful businesses
   Rissanen O, 2015, 2015 IEEE/ACM 2ND INTERNATIONAL WORKSHOP ON RAPID CONTINUOUS SOFTWARE ENGINEERING (RCOSE), P12, DOI 10.1109/RCoSE.2015.10
   Ros R., 2020, INT C SOFTW BUS
   Ros R, 2018, EUROMICRO CONF PROC, P353, DOI 10.1109/SEAA.2018.00064
   Ros R, 2018, PROCEEDINGS 2018 IEEE/ACM 4TH INTERNATIONAL WORKSHOP ON RAPID CONTINUOUS SOFTWARE ENGINEERING (RCOSE), P35, DOI 10.1145/3194760.3194766
   Sauvola T., 2015, 2015 41 EUR C SOFTW
   Schermann G, 2016, MIDDLEWARE '16: PROCEEDINGS OF THE 17TH INTERNATIONAL MIDDLEWARE CONFERENCE, DOI 10.1145/2988336.2988348
   Schermann G, 2018, INFORM SOFTWARE TECH, V99, P41, DOI 10.1016/j.infsof.2018.02.010
   Schermann G, 2018, IEEE SOFTWARE, V35, P26, DOI 10.1109/MS.2018.111094748
   Tang Diane, 2010, P 16 C KNOWL DISC DA
   Wohlin C., 2014, INT C EVALUATION ASS, P1
   Xu Y, 2016, KDD'16: PROCEEDINGS OF THE 22ND ACM SIGKDD INTERNATIONAL CONFERENCE ON KNOWLEDGE DISCOVERY AND DATA MINING, P313, DOI [10.1145/2939672.2939703, 10.1007/978-3-319-32025-0_20]
   Yaman S., 2018, 2018 44 EUR C SOFTW
   Yaman S.G., 2016, INT C PROD FOC SOFTW
   Yaman S, 2020, INFORM SOFTWARE TECH, V120, DOI 10.1016/j.infsof.2019.106244
   Yaman S, 2017, INT SYMP EMP SOFTWAR, P199, DOI 10.1109/ESEM.2017.31
NR 90
TC 0
Z9 0
U1 1
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUL
PY 2023
VL 229
AR 102961
DI 10.1016/j.scico.2023.102961
EA MAY 2023
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA J8VQ1
UT WOS:001012351100001
DA 2024-07-18
ER

PT J
AU Li, X
   Liu, L
   Liu, YZ
   Liu, HX
AF Li, Xun
   Liu, Lei
   Liu, Yuzhou
   Liu, Huaxiao
TI A lightweight API recommendation method for App development based on
   multi-objective evolutionary algorithm
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE API recommendation; App development; Multi -objective optimization;
   Evolutionary computation
ID DIVERSITY
AB Context: API is important in daily programming activities during app development, but finding appropriate APIs is time-consuming for developers. To simplify this process, many researchers pay attention to overcoming the task-API knowledge gap using semantic information mined from the large-scale dataset for API recommendation. However, only semantic information is not enough since API descriptions and developers' query may not share similar words, meanwhile, large-scale data mining brings high costs. These limit the efficiency of existing API recommendation methods. Objective: In this work, we aim at proposing a lightweight API recommendation method based on small-scale data with low costs, so that everyone can use it obtain appropriate API knowledge for supporting their development tasks. Method: We model API recommendation as a multi -objective optimization problem by considering both structural and semantic information of APIs, and use the genetic algorithm to gain optimal solutions for overcoming the limitations of the small-scale dataset. Specially, we extract the structural and semantic information of APIs from APK files and API descriptions with graph embedding and NLP techniques respectively. Then, we get the recommended APIs satisfying structural and semantic objectives according to the developers' target functionality with a genetic algorithm. Finally, we give the usage scenarios of our recommendation information and the guideline of our approach to help developers understand and use our method easily. Results and Conclusion: We conduct a series of experiments based on apps in Google Play, API descriptions in Android Tutorial and Q&As in Stack Overflow. The results show that Precision@N of our recommendation can be up to 0.89, MAP@N is up to 0.50, and MRR reaches 0.69, and our method achieves such good performance only utilizing less than 1/10 of the project number of our compared machine learning method with less time and lower device requirement. Besides, we conduct a survey and most of the participants confirm the understandability and usability of our recommended APIs in practice. (c) 2023 Elsevier B.V. All rights reserved.
C1 [Li, Xun; Liu, Lei; Liu, Yuzhou; Liu, Huaxiao] Jilin Univ, Coll Comp Sci & Technol, Changchun 130012, Jilin, Peoples R China.
   [Li, Xun; Liu, Lei; Liu, Yuzhou; Liu, Huaxiao] Jilin Univ, Key Lab Symbol Computat & Knowledge Engn, Minist Educ, Changchun 130012, Jilin, Peoples R China.
C3 Jilin University; Jilin University
RP Liu, YZ (corresponding author), Jilin Univ, Coll Comp Sci & Technol, Changchun 130012, Jilin, Peoples R China.
EM liuyuzhou_jlu@qq.com
RI lei, liu/HTR-5486-2023
FU National Natural Science Foundation of China (NSFC) [62102160]
FX Acknowledgement The work is funded by the National Natural Science
   Foundation of China (NSFC) No. 62102160.
CR Almarimi N, 2019, APPL SOFT COMPUT, V85, DOI 10.1016/j.asoc.2019.105830
   Nguyen AT, 2016, FSE'16: PROCEEDINGS OF THE 2016 24TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON FOUNDATIONS OF SOFTWARE ENGINEERING, P511, DOI 10.1145/2950290.2950333
   [Anonymous], 2019, ANDROGUARD REFERENCE
   [Anonymous], 2022, CODE NODE2VEC
   Azad S, 2017, ACM T SOFTW ENG METH, V25, DOI 10.1145/2990497
   Bangyal Waqas Haider, 2021, APPL SCI-BASEL
   Binkley D, 2013, EMPIR SOFTW ENG, V18, P219, DOI 10.1007/s10664-012-9201-4
   Cai L, 2019, ESEC/FSE'2019: PROCEEDINGS OF THE 2019 27TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P1075, DOI 10.1145/3338906.3341174
   Chen C, 2020, Arxiv, DOI arXiv:2010.07514
   Chen S, 2019, PROC INT CONF SOFTW, P596, DOI 10.1109/ICSE.2019.00070
   FLEISS JL, 1971, PSYCHOL BULL, V76, P378, DOI 10.1037/h0031619
   Fowkes J, 2016, FSE'16: PROCEEDINGS OF THE 2016 24TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON FOUNDATIONS OF SOFTWARE ENGINEERING, P254, DOI 10.1145/2950290.2950319
   Gao S, 2019, 2019 IEEE 26TH INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION AND REENGINEERING (SANER), P411, DOI 10.1109/saner.2019.8667994
   Grover A, 2016, KDD'16: PROCEEDINGS OF THE 22ND ACM SIGKDD INTERNATIONAL CONFERENCE ON KNOWLEDGE DISCOVERY AND DATA MINING, P855, DOI 10.1145/2939672.2939754
   Gu XD, 2016, FSE'16: PROCEEDINGS OF THE 2016 24TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON FOUNDATIONS OF SOFTWARE ENGINEERING, P631, DOI 10.1145/2950290.2950334
   Halevy A, 2009, IEEE INTELL SYST, V24, P8, DOI 10.1109/MIS.2009.36
   Huang Q, 2018, IEEE INT CONF AUTOM, P293, DOI 10.1145/3238147.3238191
   Krugler Ken, 2013, FINDING SOURCE CODE
   Li K, 2012, INFORM SCIENCES, V182, P220, DOI 10.1016/j.ins.2011.08.027
   Li Xuan, 2016, P 2016 24 ACM SIGSOF
   Ling CY, 2019, J COMPUT SCI TECH-CH, V34, P993, DOI 10.1007/s11390-019-1956-2
   Ling CY, 2021, 2021 IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION AND REENGINEERING (SANER 2021), P36, DOI 10.1109/SANER50967.2021.00013
   Linstead E, 2009, DATA MIN KNOWL DISC, V18, P300, DOI 10.1007/s10618-008-0118-x
   Liu L., 2021, Journal of Software: Evolution and Process, V33
   Liu YZ, 2017, J SYST SOFTWARE, V133, P126, DOI 10.1016/j.jss.2017.08.024
   McDonnell T, 2013, PROC IEEE INT CONF S, P70, DOI 10.1109/ICSM.2013.18
   McMillan C, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P111, DOI 10.1145/1985793.1985809
   Mikolov T., 2013, ADV NEURAL INFORM PR, V26, P3111, DOI DOI 10.5555/2999792.2999959
   Nguyen PT, 2021, IEEE T SOFTWARE ENG, V48, P2417, DOI 10.1109/TSE.2021.3059907
   Pan WF, 2018, FUTURE GENER COMP SY, V87, P267, DOI 10.1016/j.future.2018.04.052
   Perozzi B, 2014, PROCEEDINGS OF THE 20TH ACM SIGKDD INTERNATIONAL CONFERENCE ON KNOWLEDGE DISCOVERY AND DATA MINING (KDD'14), P701, DOI 10.1145/2623330.2623732
   Ponzanelli L, 2014, PROC IEEE INT CONF S, P577, DOI 10.1109/ICSME.2014.99
   Rahman MM, 2016, 2016 IEEE 23RD INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER), VOL 1, P349, DOI 10.1109/SANER.2016.80
   Ramírez A, 2017, EXPERT SYST APPL, V72, P357, DOI 10.1016/j.eswa.2016.10.047
   Ruan G, 2017, APPL SOFT COMPUT, V58, P631, DOI 10.1016/j.asoc.2017.05.008
   Rubei R, 2020, INFORM SOFTWARE TECH, V127, DOI 10.1016/j.infsof.2020.106367
   Shen Q, 2021, INT C PROGRAM COMPRE, P83, DOI 10.1109/ICPC52881.2021.00017
   Suciu Mihai Alexandru, 2013, EVOCOP
   Nguyen T, 2016, PROC INT CONF SOFTW, P416, DOI 10.1145/2884781.2884873
   Thung F, 2013, IEEE INT CONF AUTOM, P290, DOI 10.1109/ASE.2013.6693088
   Nguyen TD, 2017, PROC INT CONF SOFTW, P438, DOI 10.1109/ICSE.2017.47
   Wang J, 2013, IEEE WORK CONF MIN S, P319, DOI 10.1109/MSR.2013.6624045
   Ye X, 2016, PROC INT CONF SOFTW, P404, DOI 10.1145/2884781.2884862
   Yu Y, 2015, IEEE C EVOL COMPUTAT, P2843, DOI 10.1109/CEC.2015.7257242
   Yuan WZ, 2019, INFORM SOFTWARE TECH, V107, P30, DOI 10.1016/j.infsof.2018.10.010
   Zitzler E., 2001, TIK-Report, V103, P1
NR 46
TC 0
Z9 0
U1 2
U2 22
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR
PY 2023
VL 226
AR 102927
DI 10.1016/j.scico.2023.102927
EA JAN 2023
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 9B7BI
UT WOS:000934888900001
DA 2024-07-18
ER

PT J
AU Neto, JBD
   Moreira, AM
   Vargas-Solar, G
   Musicante, MA
AF de Souza Neto, Joao Batista
   Moreira, Anamaria Martins
   Vargas-Solar, Genoveva
   Musicante, Martin A.
TI A two-level formal model for Big Data processing programs
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Big Data processing; Data flow programming models; Petri nets; Monoid
   algebra
ID PETRI NETS
AB This paper proposes a model for specifying data flow-based parallel data processing programs agnostic of target Big Data processing frameworks. The paper focuses on the formal abstract specification of non-iterative and iterative programs, generalizing the strategies adopted by data flow Big Data processing frameworks. The proposed model relies on Monoid Algebra and Petri Nets to abstract Big Data processing programs in two levels: a higher level representing the program data flow and a lower level representing data transformation operations (e.g., filtering, aggregation, join). We extend the model for data processing programs proposed in [1], for modeling iterative data processing programs. The general specification of these programs implemented by data flow-based parallel programming models is essential given the democratization of iterative and greedy Big Data analytics algorithms. Indeed, these algorithms call for revisiting parallel programming models to express iterations. The paper gives a comparative analysis of the iteration strategies proposed by Apache Spark, DryadLINQ, Apache Beam, and Apache Flink. It discusses how the model achieves to generalize these strategies. (c) 2021 Elsevier B.V. All rights reserved.
C1 [de Souza Neto, Joao Batista; Musicante, Martin A.] Univ Fed Rio Grande do Norte, Dept Informat & Appl Math DIMAp, Natal, RN, Brazil.
   [de Souza Neto, Joao Batista] Fed Ctr Technol Educ Minas Gerais, Dept Informat Management & Design DIGD DV, Divinopolis, Brazil.
   [Moreira, Anamaria Martins] Univ Fed Rio de Janeiro, Inst Comp IC, Rio De Janeiro, Brazil.
   [Vargas-Solar, Genoveva] LIRIS, French Council Sci Res CNRS, Lyon, France.
C3 Universidade Federal do Rio Grande do Norte; Universidade Federal do Rio
   de Janeiro; Institut National des Sciences Appliquees de Lyon - INSA
   Lyon
RP Neto, JBD (corresponding author), Univ Fed Rio Grande do Norte, Dept Informat & Appl Math DIMAp, Natal, RN, Brazil.
EM jbsneto@ppgsc.ufrn.br; anamaria@ic.ufrj.br;
   genoveva.vargas-solar@liris.cnrs.fr; mam@dimap.ufrn.br
RI Solar, Genoveva Vargas/T-8621-2019; Musicante, Martin A./B-3586-2008
OI Solar, Genoveva Vargas/0000-0001-9545-1821; Musicante, Martin
   A./0000-0001-5589-3895; de Souza Neto, Joao Batista/0000-0002-8142-2525;
   Martins Moreira, Anamaria/0000-0002-7707-8469
CR Agrawal H., 1989, Design of mutant operators for the C programming language
   Alexandrov A, 2019, ACM T DATABASE SYST, V44, DOI 10.1145/3281629
   Allen Randy, 2001, Optimizing compilers for modern architectures: a dependencebased approach
   Ammann Paul, 2008, Introduction to software testing, V1st
   Bajaber F, 2016, J GRID COMPUT, V14, P379, DOI 10.1007/s10723-016-9371-1
   Beam A., 2016, APACHE BEAM ADV UNIF
   Brin S, 1998, COMPUT NETWORKS ISDN, V30, P107, DOI 10.1016/S0169-7552(98)00110-X
   BROOKES SD, 1984, J ACM, V31, P560, DOI 10.1145/828.833
   Carbone P., 2015, IEEE DATA ENG B, V36, P28, DOI DOI 10.1109/IC2EW.2016.56
   Chlyah S., 2019, ALGEBRA FIXPOINT OPE
   CHOW TS, 1978, IEEE T SOFTWARE ENG, V4, P178, DOI 10.1109/TSE.1978.231496
   de Souza Neto Joao Batista, 2020, Formal Methods: Foundations and Applications. 23rd Brazilian Symposium, SBMF 2020. Proceedings. Lecture Notes in Computer Science (LNCS 12475), P101, DOI 10.1007/978-3-030-63882-5_7
   de Souza Neto J.B., ARXIV210802589
   Dean J, 2004, USENIX ASSOCIATION PROCEEDINGS OF THE SIXTH SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION (OSDE '04), P137
   Fan Yang, 2010, Proceedings of the 2010 17th IEEE International Conference and Workshops on Engineering of Computer-Based Systems (ECBS 2010), P358, DOI 10.1109/ECBS.2010.50
   Fegaras L., 2019, OPEN J BIG DATA, V5, P35
   Fegaras L, 2017, J FUNCT PROGRAM, V27, DOI 10.1017/S0956796817000193
   Gévay GE, 2021, PROC INT CONF DATA, P1428, DOI 10.1109/ICDE51399.2021.00127
   Hadoop, 2019, AP HAD DOC
   Hidders J, 2005, LECT NOTES COMPUT SC, V3760, P220
   Hidders J, 2008, INFORM SYST, V33, P261, DOI 10.1016/j.is.2007.09.002
   Isard M., 2007, Operating Systems Review, V41, P59, DOI 10.1145/1272998.1273005
   Ivanovs R., 2018, CONCURRENCY GLOSSARY
   Jensen Kurt, 2007, International Journal on Software Tools for Technology Transfer, V9, P213, DOI 10.1007/s10009-007-0038-x
   Jeong E, 2019, PROCEEDINGS OF THE 16TH USENIX SYMPOSIUM ON NETWORKED SYSTEMS DESIGN AND IMPLEMENTATION, P453
   Johnson r.A., 2018, ARXIV181008061
   KAVI KM, 1986, IEEE T COMPUT, V35, P940, DOI 10.1109/TC.1986.1676696
   LEE EA, 1987, IEEE T ACOUST SPEECH, V35, P1334, DOI 10.1109/TASSP.1987.1165275
   Li N, 2009, IEEE ICST WORKSHOP, P220, DOI 10.1109/ICSTW.2009.30
   Marconi F, 2018, LECT NOTES COMPUT SC, V10811, P315, DOI 10.1007/978-3-319-77935-5_22
   MURATA T, 1989, P IEEE, V77, P541, DOI 10.1109/5.24143
   Neto J.B. Souza, 2020, THESIS UFRN NATAL RN
   Ono K, 2011, LECT NOTES COMPUT SC, V7041, P350, DOI 10.1007/978-3-642-24690-6_24
   Petri C. A, 1962, Kommunikation mit Automaten
   Raunak M., 2015, EMPIRICAL STUDY OFF
   Tibshirani Robert, 2009, SPRINGER SERIES STAT, V2
   WHITE LJ, 1991, SOFTWARE PRACT EXPER, V21, P1075, DOI 10.1002/spe.4380211007
   Yu Y., 2008, OSDI, V8, P1
   Yu Y, 2018, EUROSYS '18: PROCEEDINGS OF THE THIRTEENTH EUROSYS CONFERENCE, DOI 10.1145/3190508.3190551
   Yu-Fang Chen, 2017, Networked Systems. 5th International Conference, NETYS 2017. Proceedings: LNCS 10299, P421, DOI 10.1007/978-3-319-59647-1_31
   Zaharia Matei, 2012, Proceedings of the 9th USENIX Conference on Networked Systems Design and Implementation, NSDI'12, P1, DOI DOI 10.1111/J.1095-8649.2005.00662.X
   Zaharia Matei, 2010, 2 USENIX WORKSHOP HO
NR 42
TC 2
Z9 2
U1 0
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR 1
PY 2022
VL 215
AR 102764
DI 10.1016/j.scico.2021.102764
EA DEC 2021
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA YN9RV
UT WOS:000747588600001
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Cledou, G
   Proença, J
   Sputh, BHC
   Verhulst, E
AF Cledou, Guillermina
   Proenca, Jose
   Sputh, Bernhard H. C.
   Verhulst, Eric
TI Hubs for VirtuosoNext: Online verification of real-time coordinators
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 21st IFIP WG 6.1 International Conference on Coordination Models and
   Languages (COORDINATION) Held as Part of the 14th International
   Federated Conference on Distributed Computing Techniques (DisCoTec)
CY JUN 17-21, 2019
CL Kongens Lyngby, DENMARK
SP Int Federat Informat Proc WG 6 1, Tech Univ Denmark, Dept Appl Math & Comp Sci, Nord IoT Hub
DE Coordination; Uppaal; Real-time OS; Compositional semantics
ID REO; AUTOMATA; MODEL
AB VirtuosoNextTM is a distributed real-time operating system (RTOS) featuring a generic programming model dubbed Interacting Entities. This paper focuses on these interactions, implemented as so-called Hubs. Hubs act as synchronisation and communication mechanisms between the application tasks and implement the services provided by the kernel. While the kernel provides the most basic services, each carefully designed, tested and optimised, tasks are limited to this handful of basic hubs, leaving the development of more complex mechanisms up to application specific implementations.
   This work presents a toolset that supports the building of new services compositionally, using notions borrowed from the Reo coordination language, on which the developer can delegate coordination-related duties. This toolset uses a formal compositional semantics for hubs that captures dataflow and time, formalising the behaviour of existing hubs, and allowing the definition of new ones. Furthermore, it enables the analysis and verification of hubs under our automata interpretation, including time-sensitive behaviour via the UPPAAL model checker, usable on http://arcatools .org /hubs. We illustrate the proposed tools and methods by verifying key properties on different interaction scenarios between tasks and a composed hub. (C) 2020 Elsevier B.V. All rights reserved.
C1 [Cledou, Guillermina] Univ Minho, INESC TEC, HASLab, Braga, Portugal.
   [Proenca, Jose] CISTER, ISEP, Porto, Portugal.
   [Sputh, Bernhard H. C.; Verhulst, Eric] Altreonic NV, Aarschot, Belgium.
C3 INESC TEC; Universidade do Minho; Instituto Politecnico do Porto
RP Cledou, G (corresponding author), Univ Minho, INESC TEC, HASLab, Braga, Portugal.; Proença, J (corresponding author), CISTER, ISEP, Porto, Portugal.
EM mgc@inesctec.pt; pro@isep.ipp.pt; bernhard.sputh@altreonic.com;
   bernhard.sputh@altreonic.com
RI Proenca, Jose/K-4256-2016; Cledou, Guillermina/H-4411-2015
OI Proenca, Jose/0000-0003-0971-8919; Cledou,
   Guillermina/0000-0003-0006-6440
FU ERDF -European Regional Development Fund through the Operational
   Programme for Competitiveness and Internationalisation -COMPETE 2020
   Programme; National Funds through the Portuguese funding agency, FCT
   -Fundacao para a Ciencia e a Tecnologia [POCI-01-0145-FEDER-029946];
   FCT/MCTES, within the CISTER Research Unit [UIDB/04234/2020]; Norte
   Portugal Regional Operational Programme (NORTE 2020) under the Portugal
   2020 Partnership Agreement, through ERDF; Operational Competitiveness
   Programme and Internationalization (COMPETE 2020) under the PT2020
   Partnership Agreement, through ERDF; FCT [ECSEL/0016/2019,
   NORTE-01-0145-FEDER-028550, POCI-01-0145-FEDER-029119]; ECSEL Joint
   Undertaking (JU) [876852]; European Union's Horizon 2020 research and
   innovation programme; Fundação para a Ciência e a Tecnologia
   [ECSEL/0016/2019] Funding Source: FCT
FX This work is financed by the ERDF -European Regional Development Fund
   through the Operational Programme for Competitiveness and
   Internationalisation -COMPETE 2020 Programme and by National Funds
   through the Portuguese funding agency, FCT -Fundacao para a Ciencia e a
   Tecnologia, within project POCI-01-0145-FEDER-029946 (DaVinci). This
   work is also partially supported by National Funds through FCT/MCTES,
   within the CISTER Research Unit (UIDB/04234/2020); by the Norte Portugal
   Regional Operational Programme (NORTE 2020) under the Portugal 2020
   Partnership Agreement, through ERDF and also by national funds through
   the FCT, within project NORTE-01-0145-FEDER-028550 (REASSURE); by the
   Operational Competitiveness Programme and Internationalization (COMPETE
   2020) under the PT2020 Partnership Agreement, through ERDF, and by
   national funds through the FCT, within project POCI-01-0145-FEDER-029119
   (PReFECT); and by the FCT within project ECSEL/0016/2019 and the ECSEL
   Joint Undertaking (JU) under grant agreement No. 876852. The JU receives
   support from the European Union's Horizon 2020 research and innovation
   programme and Austria, Czech Republic, Germany, Ireland, Italy,
   Portugal, Spain, Sweden, Turkey.
CR AltreonicNV, OPENCOMRTOS SUIT MAN
   [Anonymous], 2008, Programming in Scala
   Arbab F, 2004, MATH STRUCT COMP SCI, V14, P329, DOI 10.1017/S0960129504004153
   Arbab F, 2007, SOFTW SYST MODEL, V6, P59, DOI 10.1007/s10270-006-0009-9
   Baier C, 2006, SCI COMPUT PROGRAM, V61, P75, DOI 10.1016/j.scico.2005.10.008
   Behrmann G, 2004, LECT NOTES COMPUT SC, V3185, P200
   Bengtsson J, 2004, LECT NOTES COMPUT SC, V3098, P87, DOI 10.1007/978-3-540-27755-2_3
   Carnevali L, 2011, LECT NOTES COMPUT SC, V6652, P118, DOI 10.1007/978-3-642-21338-0_9
   Cledou G., 2020, VERIFICATION REAL TI, DOI [10.5281/zenodo.3818020, DOI 10.5281/ZENODO.3818020]
   Cledou G, 2019, LECT NOTES COMPUT SC, V11533, P250, DOI 10.1007/978-3-030-22397-7_15
   Cledou G, 2017, LECT NOTES COMPUT SC, V10522, P51, DOI 10.1007/978-3-319-68972-2_4
   Cruz R., 2018, LECT NOTES COMPUTER, V11176, P336
   Dietrich C, 2017, ACM T EMBED COMPUT S, V16, DOI 10.1145/2950053
   Dokter K, 2018, ELECTRON P THEOR COM, P121, DOI 10.4204/EPTCS.272.10
   Dokter K, 2016, LECT NOTES COMPUT SC, V9686, P84, DOI 10.1007/978-3-319-39519-7_6
   Ha V, 2004, PROC INT CONF SOFTW, P304, DOI 10.1109/ICSE.2004.1317453
   Jongmans SSTQ, 2017, SCI COMPUT PROGRAM, V146, P50, DOI 10.1016/j.scico.2017.03.006
   Kokash N, 2013, ELECTRON NOTES THEOR, V295, P11, DOI 10.1016/j.entcs.2013.04.004
   Kokash N, 2012, FORM ASP COMPUT, V24, P187, DOI 10.1007/s00165-011-0191-6
   Meng S, 2007, LECT NOTES COMPUT SC, V4468, P301
   Proenca J., 2019, LECT NOTES COMPUTER, V11761, P186
   Verhulst E, 2011, FORMAL DEVELOPMENT OF A NETWORK-CENTRIC RTOS: SOFTWARE ENGINEERING FOR RELIABLE EMBEDDED SYSTEMS, P3, DOI 10.1007/978-1-4419-9736-4
NR 22
TC 1
Z9 1
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR 1
PY 2021
VL 203
AR 102566
DI 10.1016/j.scico.2020.102566
PG 12
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA PQ7UT
UT WOS:000606750500004
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Camps, V
   Combettes, S
   Bouziat, T
AF Camps, Valerie
   Combettes, Stephanie
   Bouziat, Teddy
TI SApHESIA: An agent-based model and a criticality-based heuristic for
   cooperatively coupling SoSs
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE SOS architecting; Cooperative SoS; Cooperative architecting heuristic;
   Criticality; Adaptive multi-agent system
ID SYSTEM
AB Problems to solve nowadays have never been so complex and are continuously increasing in complexity. In this context Systems of Systems (SoS) may be a solution but the study of such systems is far from over. An SoS is a complex system characterized by the particular nature of its components: the latter, which are systems, tend to be managerially and operationally independent as well as geographically distributed. This specific characterization led to re-think research fields of classic systems engineering, such as definition, taxonomy, modeling, architecting, etc. SoS architecting focuses on the way independent components of an SoS can be dynamically structured and can autonomously and efficiently modify their interactions in order to fulfill the goal of the SoS and to cope with the high dynamics of the environment.
   This paper contributes to the multi-agent and SoS research fields by proposing a new generic SoS model called SApHESIA which considers the SoS main characteristics found in the literature and extends the notion of environment and interactions between component systems. It also proposes a new SoS architecting procedure based on the Adaptive Multi-Agent System (AMAS) approach that advocates full cooperation between all the components of the SoS through the concept of criticality. This criticality is a measure, local to each component, expressing its difficulties to reach its local goals. In this procedure, the SoS architecture evolves to self-adapt to the dynamics of the environment in which it is plunged, while considering the respective local goals of its components. An instantiation of SApHESIA to two distinct cases studies from different domains (logistics and exploratory missions) is done to obtain two SoSs. These two SoS are then coupled to form a new SoS at an upper level. Evaluations of these SoSs show that their cooperation make each of them more efficient. (C) 2020 Elsevier B.V. All rights reserved.
C1 [Camps, Valerie; Combettes, Stephanie; Bouziat, Teddy] Univ Toulouse Paul Sabatier, IRIT Lab, Toulouse, France.
C3 Universite de Toulouse; Universite Toulouse III - Paul Sabatier
RP Camps, V; Combettes, S (corresponding author), Univ Toulouse Paul Sabatier, IRIT Lab, Toulouse, France.
EM Valerie.Camps@irit.fr; Stephanie.Combettes@irit.fr;
   teddybouziat@gmail.com
OI Camps, Valerie/0000-0002-4768-2710
CR Acheson P, 2012, PROCEDIA COMPUT SCI, V12, P21, DOI 10.1016/j.procs.2012.09.024
   [Anonymous], 2006, 2006 IEEE SMC INT C
   [Anonymous], 2008, Technical Report
   [Anonymous], 2008, SYSTEM SYSTEMS ENG, DOI DOI 10.1002/9780470403501
   Axelsson J, 2015, 2015 10th System of Systems Engineering Conference (SoSE), P18, DOI 10.1109/SYSOSE.2015.7151918
   AZANI Cyrus, 2008, SYSTEM SYSTEMS ENG I, P21
   Baldwin WC, 2017, IEEE SYST J, V11, P2215, DOI 10.1109/JSYST.2015.2430755
   Baldwin WC, 2009, 2009 IEEE INTERNATIONAL CONFERENCE ON SYSTEM OF SYSTEMS ENGINEERING SOSE 2009, P87
   Bjelkemyr M, 2007, 2007 1ST ANNUAL IEEE SYSTEMS CONFERENCE, P185
   BKCASE Governing Board, 2014, GUIDE SYSTEMS ENG BO, P945
   Bouziat T., 2017, THESIS
   Bouziat T., 2014, JOURNEES FRANCOPHONE, P149
   Bouziat T., 2016, 2 GLOB C ART INT GCA, P214
   Bouziat T, 2018, 2018 IEEE/ACM 6TH INTERNATIONAL WORKSHOP ON SOFTWARE ENGINEERING FOR SYSTEMS-OF-SYSTEMS (SESOS 2018), P8, DOI 10.1145/3194754.3194756
   Camps V., 1998, EUR C ART INT ECAI 9
   Capera D, 2003, TWELFTH IEEE INTERNATIONAL WORKSHOPS ON ENABLING TECHNOLOGIES: INFRASTRUCTURE FOR COLLABORATIVE ENTERPRISES, PROCEEDINGS, P383
   DiMario MJ, 2009, IEEE SYST J, V3, P360, DOI 10.1109/JSYST.2009.2029661
   Esteoule T., 2019, THESIS
   Gorod A, 2008, IEEE SYST J, V2, P484, DOI 10.1109/JSYST.2008.2007163
   Henshaw M., 2013, SYSTEMS SYSTEMS ENG
   Herbst N., 2017, METRICS BENCHMARKS S
   Jamshidi M, 2008, IEEE AERO EL SYS MAG, V23, P4, DOI 10.1109/MAES.2008.4523909
   Maier M., 1998, SYST ENG, V1, P267, DOI [DOI 10.1002/(SICI)1520-6858(1998)1:43.0.CO;2-D, 10.1002/(SICI)1520-6858(1998)1:4lt;267::AID-SYS3gt;3.0.CO;2-D, DOI 10.1002/(SICI)1520-6858(1998)1:4LT;267::AID-SYS3GT;3.0.CO;2-D, DOI 10.1002/(SICI)1520-6858(1998)1:4<267::AID-SYS3>3.0.CO;2-D]
   Nielsen CB, 2015, ACM COMPUT SURV, V48, DOI 10.1145/2794381
   Pape L., 2016, THESIS
   Picard G., 2004, LNCA, V3451, P209
   Selberg SA, 2008, 18 ANN INT S INT COU, V4, P2394, DOI [10.1002/j.2334-5837.2008.tb00863.x.2008, DOI 10.1002/J.2334-5837.2008.TB00863.X.2008]
   Wang R., 2014, INCOSE INT S, V24, P581
NR 28
TC 1
Z9 1
U1 0
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 1
PY 2020
VL 200
AR 102533
DI 10.1016/j.scico.2020.102533
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA NZ8II
UT WOS:000577344900003
OA Green Published, Bronze
DA 2024-07-18
ER

PT J
AU Dhumbumroong, S
   Piromsopa, K
AF Dhumbumroong, Smith
   Piromsopa, Krerk
TI BoundWarden: Thread-enforced spatial memory safety through compile-time
   transformations
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Spatial memory safety; Buffer overflows; Concurrent monitoring;
   Compile-time transformation; Bound checking thread
AB This paper presents BoundWarden, a novel spatial memory safety enforcement approach that utilizes a combination of compile-time transformation and runtime concurrent monitoring techniques. The compiler extension component of BoundWarden transparently instruments source code of C programs with the code that allows the runtime component of BoundWarden to comprehensively detect and prevent buffer overflow and other out-of-bound errors in buffers on the stack, heap, as well as BSS and data segments of memory. To reduce runtime overhead of bound checking, the runtime component of BoundWarden leverages the ubiquity of multi-core processors by offloading most of the work to a dedicated bound checking thread, which is responsible for performing bound checking and managing metadata. To preserve memory layout and maintain compatibility with existing libraries and binaries, BoundWarden stores the base and the bound of buffers in a separated dedicated bound table. Experiments showed that the prototype of BoundWarden is effective at enforcing spatial memory safety by successfully passing all 850 tests of RIPE test suite, and 94% of NIST's SARD test suite 89, while the results from the Olden benchmark suite showed that on average BoundWarden introduced roughly 1.85x overhead, compared to the uninstrumented code. (C) 2020 Elsevier B.V. All rights reserved.
C1 [Dhumbumroong, Smith; Piromsopa, Krerk] Chulalongkorn Univ, Fac Engn, Dept Comp Engn, Bangkok 10330, Thailand.
C3 Chulalongkorn University
RP Piromsopa, K (corresponding author), Chulalongkorn Univ, Fac Engn, Dept Comp Engn, Bangkok 10330, Thailand.
EM smith.dh@student.chula.ac.th; krerk.p@chula.ac.th
RI ; Piromsopa, Krerk/D-8927-2015
OI Dhumbumroong, Smith/0000-0002-7481-3018; Piromsopa,
   Krerk/0000-0002-8190-4444
CR Akritidis P., 2009, 18 USENIX SEC S USEN
   AMD Technology, 2018, AMD TECHN PUBL
   Anderson J, 1972, Technical Report ESD-TR-73-51
   [Anonymous], 1996, PHRACK
   Berger ED, 2006, ACM SIGPLAN NOTICES, V41, P158, DOI 10.1145/1133981.1134000
   Bletsch T., 2011, P 6 ACM S INF COMP C, P30
   Cadar C., 2008, Proceedings of the 8th USENIX conference on Operating systems design and implementation, OSDI'08, (USA), P209
   Checkoway S, 2010, PROCEEDINGS OF THE 17TH ACM CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY (CCS'10), P559, DOI 10.1145/1866307.1866370
   Corporation MITRE, 2019, COMM VULN EXP CVE
   Cowan C, 1998, PROCEEDINGS OF THE SEVENTH USENIX SECURITY SYMPOSIUM, P63
   Cox B, 2006, USENIX Association Proceedings of the 15th USENIX Security Symposium, P105
   Dhawan U, 2015, ACM SIGPLAN NOTICES, V50, P487, DOI [10.1145/694344.2694383, 10.1145/2775054.2694383]
   Dhurjati D., 2006, 28th International Conference on Software Engineering Proceedings, P162, DOI 10.1145/1134285.1134309
   Dhurjati D., 2006, THESIS
   Elliott AS, 2018, 2018 IEEE CYBERSECURITY DEVELOPMENT CONFERENCE (SECDEV 2018), P53, DOI 10.1109/SecDev.2018.00015
   FLATER DW, 1993, SOFTWARE PRACT EXPER, V23, P617, DOI 10.1002/spe.4380230604
   Intel, 2019, INTEL 64 IA 32 ARCH
   Jim T, 2002, USENIX ASSOCIATION PROCEEDINGS OF THE GENERAL TRACK, P275
   Jones Richard WM, 1997, AADEBUG, V97, P13
   Kratkiewicz K., 2006, P WORKSH SOFTW SEC A, V500, P44
   Kwon Albert, 2013, P 2013 ACM SIGSAC C, P721, DOI 10.1145
   Lattner C, 2004, INT SYM CODE GENER, P75, DOI 10.1109/CGO.2004.1281665
   Lattner C., 2005, P 2005 ACM SIGPLAN C
   Tran M, 2011, LECT NOTES COMPUT SC, V6961, P121, DOI 10.1007/978-3-642-23644-0_7
   Nagarakatte S, 2010, ACM SIGPLAN NOTICES, V45, P31
   Nagarakatte S, 2009, PLDI'09 PROCEEDINGS OF THE 2009 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P245, DOI 10.1145/1542476.1542504
   Navas J.A., 2020, CLAM STATIC ANAL BAS
   Necula GC, 2002, ACM SIGPLAN NOTICES, V37, P128, DOI 10.1145/565816.503286
   Nethercote N, 2007, VEE'07: PROCEEDINGS OF THE THIRD INTERNATIONAL CONFERENCE ON VIRTUAL EXECUTION ENVIRONMENTS, P65
   NIST Information Quality Standards, 2019, NIST SOFTW ASS REF D
   Novark G, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P1, DOI 10.1145/1250734.1250736
   Orman H., 2003, IEEE Security & Privacy, V1, P35, DOI 10.1109/MSECP.2003.1236233
   Ozkan Serkan, 2018, CVE DETAILS
   Piromsopa K, 2011, ENG J-THAIL, V15, P31, DOI 10.4186/ej.2011.15.2.31
   Roemer R, 2012, ACM T INFORM SYST SE, V15, DOI 10.1145/2133375.2133377
   ROGERS A, 1995, ACM T PROGR LANG SYS, V17, P233, DOI 10.1145/201059.201065
   Rosenberg E., TEST SUIT 89 TAX BUF
   Ruwase Olatunji, 2004, NDSS, P159
   Saeed A, 2016, PROCEEDINGS OF THE THIRD WORKSHOP ON CRYPTOGRAPHY AND SECURITY IN COMPUTING SYSTEMS (CS2 2016), P31, DOI 10.1145/2858930.2858936
   Salamat B, 2008, CISIS 2008: THE SECOND INTERNATIONAL CONFERENCE ON COMPLEX, INTELLIGENT AND SOFTWARE INTENSIVE SYSTEMS, PROCEEDINGS, P843, DOI 10.1109/CISIS.2008.136
   Salamat B, 2009, EUROSYS'09: PROCEEDINGS OF THE FOURTH EUROSYS CONFERENCE, P33
   Serebryany Konstantin, 2012, P 2012 USENIX ANN TE, DOI [10.5555/2342821.2342849, DOI 10.5555/2342821.2342849]
   Shacham H, 2007, CCS'07: PROCEEDINGS OF THE 14TH ACM CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P552
   STEFFEN JL, 1992, SOFTWARE PRACT EXPER, V22, P305, DOI 10.1002/spe.4380220403
   Szekeres L, 2013, P IEEE S SECUR PRIV, P48, DOI 10.1109/SP.2013.13
   Tian D., 2012, NDSS
   Volckaert S, 2017, PROCEEDINGS OF THE TWELFTH EUROPEAN CONFERENCE ON COMPUTER SYSTEMS (EUROSYS 2017), P270, DOI 10.1145/3064176.3064178
   Volckaert S, 2016, IEEE T DEPEND SECURE, V13, P437, DOI 10.1109/TDSC.2015.2411254
   Wilander J, 2011, 27TH ANNUAL COMPUTER SECURITY APPLICATIONS CONFERENCE (ACSAC 2011), P41
   Zelkowitz M.V., 1976, P 1976 ANN C ACM 76, P391
   Zeng Q, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P367
   Zhou F, 2006, USENIX ASSOCIATION 7TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P45
NR 52
TC 1
Z9 1
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 15
PY 2020
VL 198
AR 102519
DI 10.1016/j.scico.2020.102519
PG 25
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA NS6CK
UT WOS:000572346900001
DA 2024-07-18
ER

PT J
AU Alcocer, JPS
   Antezana, AS
   Santos, G
   Bergel, A
AF Sandoval Alcocer, Juan Pablo
   Antezana, Alejandra Siles
   Santos, Gustavo
   Bergel, Alexandre
TI Improving the success rate of applying the extract method refactoring
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Refactoring; Usability
AB Context: Most modern programming environments support refactorings. Although refactorings are relevant to improve the quality of software source code, they unfortunately suffer from severe usability issues. In particular, the extract method refactoring, one of the most prominent refactorings, has a failure rate of 49% when users attempt to use it.
   Objective: Our main objective is to improve the success rate of applying the extract method refactoring.
   Methods: First, to understand the cause of refactoring failure, we conducted a partial replication of Vakilian's ICSE '14 study about usability issues of refactoring using IntelliJ IDEA. Second, we designed and implemented TOAD, a tool that proposes alternative text selection for source code refactoring for the Pharo programming language. Third, we evaluated TOAD using a controlled experiment against the standard Pharo code refactoring tool. Seven professional software engineers complemented with three undergrad students participated in our experiments.
   Conclusion: The causes we identified of failed extract method refactoring attempts match Vakilian's work. TOAD significantly reduces the number of failed attempts to run the extract method refactoring at a lower cognitive load cost. (C) 2020 Elsevier B.V. All rights reserved.
C1 [Sandoval Alcocer, Juan Pablo; Antezana, Alejandra Siles] Univ Catolica Boliviana San Pablo, Dept Ciencias Exactas & Ingn, Cochabamba, Bolivia.
   [Santos, Gustavo] Univ Tecnol Fed Parana, Apucarana, Brazil.
   [Bergel, Alexandre] Univ Chile, Dept Comp Sci DCC, ISCLab, Santiago, Chile.
C3 Universidade Tecnologica Federal do Parana; Pontificia Universidade
   Catolica do Parana; Universidad de Chile
RP Alcocer, JPS (corresponding author), Univ Catolica Boliviana San Pablo, Dept Ciencias Exactas & Ingn, Cochabamba, Bolivia.
EM sandoval@ucbcba.edu.bo; aesa1@estudiantes.ucbcba.edu.bo;
   abergel@dcc.uchile.cl
RI Sandoval Alcocer, Juan Pablo/CAA-0465-2022; Sandoval Alcocer, Juan
   Pablo/AGK-7291-2022
OI Sandoval Alcocer, Juan Pablo/0000-0002-8335-4351; 
FU Lam Research [4800054170, 4800043946]; FONDECYT [1200067]
FX We are deeply grateful to Lam Research (4800054170 and 4800043946) and
   the FONDECYT project 1200067 for having partially sponsored the work
   presented in this article. We thank Renato Cerro for his help in
   reviewing an early draft of the manuscript.
CR [Anonymous], THESIS
   Antezana A. Siles, 2019, COMP P 41 INT C SOFT
   Fowler M., 1999, Refactoring: Improving the Design of Existing Code
   Ge X, 2012, PROC INT CONF SOFTW, P211, DOI 10.1109/ICSE.2012.6227192
   HART S G, 1988, P139
   Lee YY, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P23, DOI 10.1109/ICSE.2013.6606548
   Maruyama K, 2017, PROC IEEE ACM INT C, P133, DOI 10.1109/ICSE-C.2017.108
   Mkaouer M. W., 2014, P 29 ACM IEEE INT C, P331, DOI [DOI 10.1145/2642937.2642965, 10.1145/2642937.2642965. u r l, DOI 10.1145/2642937.2642965.URL]
   Mongiovi M, 2018, IEEE T SOFTWARE ENG, V44, P429, DOI 10.1109/TSE.2017.2693982
   Murphy-Hill E, 2012, IEEE T SOFTWARE ENG, V38, P5, DOI 10.1109/TSE.2011.41
   MURPHYHILL E, 2008, PROC INT CONF SOFTW, P421
   Negara S, 2013, LECT NOTES COMPUT SC, V7920, P552, DOI 10.1007/978-3-642-39038-8_23
   Opdyke W. F., 1992, Refactoring object-oriented frameworks
   Tsantalis N, 2011, J SYST SOFTWARE, V84, P1757, DOI 10.1016/j.jss.2011.05.016
   Vakilian M, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P1106, DOI 10.1145/2568225.2568282
   Vakilian M, 2012, PROC INT CONF SOFTW, P233, DOI 10.1109/ICSE.2012.6227190
NR 16
TC 6
Z9 6
U1 1
U2 10
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 1
PY 2020
VL 195
AR 102475
DI 10.1016/j.scico.2020.102475
PG 13
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA LR7RO
UT WOS:000535893800006
DA 2024-07-18
ER

PT J
AU de Medeiros, SQ
   Alvez, GD
   Mascarenhas, F
AF de Medeiros, Sergio Queiroz
   Alvez Junior, Gilney de Azevedo
   Mascarenhas, Fabio
TI Automatic syntax error reporting and recovery in parsing expression
   grammars
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Parsing expression grammars; Labeled failures; Error reporting; Error
   recovery
AB Error recovery is an essential feature for a parser that should be plugged in Integrated Development Environments (IDEs), which must build Abstract Syntax Trees (ASTs) even for syntactically invalid programs in order to offer features such as automated refactoring and code completion.
   Parsing Expressions Grammars (PEGS) are a formalism that naturally describes recursive top-down parsers using a restricted form of backtracking. Labeled failures are a conservative extension of PEGs that adds an error reporting mechanism for PEG parsers, and these labels can also be associated with recovery expressions to provide an error recovery mechanism. These expressions can use the full expressivity of PEGs to recover from syntactic errors.
   Manually annotating a large grammar with labels and recovery expressions can be difficult. In this work, we present two approaches, Standard and Unique, to automatically annotate a PEG with labels, and to build their corresponding recovery expressions. The Standard approach annotates a grammar in a way similar to manual annotation, but it may insert labels incorrectly, while the Unique approach is more conservative to annotate a grammar and does not insert labels incorrectly.
   We evaluate both approaches by using them to generate error recovering parsers for four programming languages: Titan, C, Pascal and Java. In our evaluation, the parsers produced using the Standard approach, after a manual intervention to remove the labels incorrectly added, gave an acceptable recovery for at least 70% of the files in each language. By it turn, the acceptable recovery rate of the parsers produced via the Unique approach, without the need of manual intervention, ranged from 41% to 76%. (C) 2019 Elsevier B.V. All rights reserved.
C1 [de Medeiros, Sergio Queiroz] Univ Fed Rio Grande do Norte, Sch Sci & Technol, Natal, RN, Brazil.
   [Alvez Junior, Gilney de Azevedo] Univ Fed Rio Grande do Norte, Inst Digital Metropolis, Natal, RN, Brazil.
   [Mascarenhas, Fabio] Univ Fed Rio de Janeiro, Dept Comp Sci, Rio de Janeiro, Brazil.
C3 Universidade Federal do Rio Grande do Norte; Universidade Federal do Rio
   Grande do Norte; Universidade Federal do Rio de Janeiro
RP de Medeiros, SQ (corresponding author), Univ Fed Rio Grande do Norte, Sch Sci & Technol, Natal, RN, Brazil.
EM sergiomedeiros@ect.ufm.br; gilneyjnr@gmail.com; mascarenhas@ufrj.br
RI Mascarenhas, Fabio/M-5731-2014; Queiroz de Medeiros, Sergio/O-6582-2018
OI Queiroz de Medeiros, Sergio/0000-0002-0759-0926
CR Corchuelo R, 2002, ACM T PROGR LANG SYS, V24, P698, DOI 10.1145/586088.586092
   de Jonge M, 2012, ACM T PROGR LANG SYS, V34, DOI 10.1145/2400676.2400678
   de Medeiros SQ, 2018, J VISUAL LANG COMPUT, V49, P17, DOI 10.1016/j.jvlc.2018.10.003
   de Medeiros Sergio Queiroz, 2018, BRAZILIAN S PROGRAMM, P3
   DEGANO P, 1995, SOFTWARE PRACT EXPER, V25, P657, DOI 10.1002/spe.4380250606
   Doaitse Swierstra S., 1996, Advanced Functional Programming. Second International School. Tutorial Text, P184
   Ford B, 2004, ACM SIGPLAN NOTICES, V39, P111, DOI 10.1145/982962.964011
   Ford B., 2002, THESIS
   Garnock-Jones T., ARXIV180110490
   Grune Dick., 2010, Parsing Techniques: A Practical Guide, V2nd
   ISO Central Secretary, 1991, 71851990E ISOIEC
   Jeffery CL, 2003, ACM T PROGR LANG SYS, V25, P631, DOI 10.1145/937563.937566
   Kernighan B.W., 1988, The C Programming Language
   Lerusalimschy R., 2016, PROGRAMMING LUA, V4th ed.
   Maidl AM, 2016, SCI COMPUT PROGRAM, V132, P129, DOI 10.1016/j.scico.2016.08.004
   Maidl AM, 2013, LECT NOTES COMPUT SC, V8129, P1, DOI 10.1007/978-3-642-40922-6_1
   Mascarenhas F, 2014, SCI COMPUT PROGRAM, V89, P235, DOI 10.1016/j.scico.2014.01.012
   Medeiros S, 2018, 33RD ANNUAL ACM SYMPOSIUM ON APPLIED COMPUTING, P1195, DOI 10.1145/3167132.3167261
   Mizushima Kota, 2010, P 9 ACM SIGPLAN SIGS, P29, DOI [10.1145/1806672, DOI 10.1145/1806672]
   Moss A., ARXIV180808893
   Mossenbock H., 2010, COMPILER GENERATOR C
   Par T., 2013, DEFINITIVE ANTLR 4 R
   Parr T., ANTLR
   Parr T, 2014, ACM SIGPLAN NOTICES, V49, P579, DOI [10.1145/2714064.2660202, 10.1145/2660193.2660202]
   PENNELLO TJ, 1978, PRINCIPLES PROGRAMMI, P241, DOI DOI 10.1145/512760.512786
   Redziejowski R.R., 2017, MOUSE PARSING EXPRES
   Redziejowski RR, 2014, FUND INFORM, V133, P257, DOI 10.3233/FI-2014-1075
   Redziejowski RR, 2009, FUND INFORM, V93, P325, DOI 10.3233/FI-2009-105
   Rtifenacht M., 2016, THESIS
   Swierstra S.D., 2001, Electronic Notes in Theoretical Computer Science, V41, P38, DOI [10.1016/S1571-0661(05)80545-6, DOI 10.1016/S1571-0661(05)80545-6]
   T.T. Developers, 2017, TITAN PROGRAMMING LA
   Wirth N., 1978, ALGORITHMS DATA STRU
NR 32
TC 6
Z9 6
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 15
PY 2020
VL 187
AR 102373
DI 10.1016/j.scico.2019.102373
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA KM2YN
UT WOS:000513988800009
OA Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Mariani, S
AF Mariani, Stefano
TI Coordination in Socio-technical Systems: Where are we now? Where do we
   go next?
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 16th International Workshop on Foundations of Coordination Languages and
   Self-Adaptative Systems (FOCLASA)
CY JUN 26, 2018
CL Toulouse, FRANCE
DE Socio-technical gap; Coordination; Socio-technical systems; Social
   machines; Observation-based coordination
ID DESIGN PATTERNS; COMMUNICATION; ENVIRONMENTS
AB Despite Socio-Technical Systems (STS) have been defined and described long ago, and dedicated software engineering techniques and guidelines have been designed and assessed in different application domains, the issue of coordinating people and software artefacts in these STS has been widely recognised only recently, and gained momentum to generate some promising engineering approaches. In this paper, we aim to shed some light into the current status of the research landscape concerned with engineering coordination within STS. Accordingly, we highlight the main challenges yet to be tackled as stemming from real world problems, present the opportunities to deal with them as arising from different research threads, and delve into a few selected coordination approaches for specific STS application domains. (C) 2019 Elsevier B.V. All rights reserved.
C1 [Mariani, Stefano] Univ Modena & Reggio Emilia, Dept Sci & Methods Engn, Reggio Emilia, Italy.
C3 Universita di Modena e Reggio Emilia
RP Mariani, S (corresponding author), Univ Modena & Reggio Emilia, Dept Sci & Methods Engn, Reggio Emilia, Italy.
EM stefano.mariani@unimore.it
RI Mariani, Stefano/AAA-5314-2019
OI Mariani, Stefano/0000-0001-8921-8150
FU CONNECARE (Personalised Connected Care for Complex Chronic Patients)
   project (EU H2020-RIA) [689802]
FX This work has been partially supported by the CONNECARE (Personalised
   Connected Care for Complex Chronic Patients) project (EU H2020-RIA,
   Contract No. 689802).
CR Ackerman MS, 2000, HUM-COMPUT INTERACT, V15, P179, DOI 10.1207/S15327051HCI1523_5
   ACM US Public Policy Council, 2017, Statement on Algorithmic Transparency and Accountability
   Aldewereld H, 2016, LAW GOV TECHNOL SER, V30, P1, DOI 10.1007/978-3-319-33570-4
   Aldewereld H., 2016, OPERA ALIVE OPERETTA, P173
   Andrighetto G., 2013, Normative Multi-agent Systems
   [Anonymous], 2016, Nature, V537, P449, DOI 10.1038/537449a
   [Anonymous], LECT NOTES COMPUTER
   [Anonymous], 2016, ARXIV160608813
   [Anonymous], 2018, J3016201806 SAE
   [Anonymous], 1991, I I CHANGE EC PERFOR
   [Anonymous], 2019, REP TRAFF COLL INV A
   [Anonymous], P 25 INT C WORLD WID
   [Anonymous], 2007, PROGRAMMING MULTIAGE
   Association for Psychological Science, 2017, SELF DRIV CARS FAC P
   Atzori L, 2012, COMPUT NETW, V56, P3594, DOI 10.1016/j.comnet.2012.07.010
   Babaoglu O, 2006, ACM T AUTON ADAP SYS, V1, P26, DOI 10.1145/1152934.1152937
   Badham R., 2000, SOCIOTECHNICAL THEOR
   Baldoni M, 2019, J DATA SEMANT, V8, P99, DOI 10.1007/s13740-019-00100-8
   Baldoni M, 2018, APPL SCI-BASEL, V8, DOI 10.3390/app8040489
   Baldoni M, 2018, FUND INFORM, V159, P1, DOI 10.3233/FI-2018-1656
   Balke T., 2013, Normative Multi-Agent Systems, Dagstuhl Follow-Ups, V4, P1, DOI [10.4230/DFU.Vol4. 12111.1, DOI 10.4230/DFU.VOL4.12111.1]
   Baxter G, 2011, INTERACT COMPUT, V23, P4, DOI 10.1016/j.intcom.2010.07.003
   BIBU GD, 2019, INT J SCI TECHNOL RE, V8, P37
   Boissier O, 2013, SCI COMPUT PROGRAM, V78, P747, DOI 10.1016/j.scico.2011.10.004
   Bolici F., 2009, SOC CONGR WORKSH
   Bourzac K, 2017, MILLIMETER SCALE COM
   Caminada M.W., 2014, P 2014 INT C AUT AG
   Castelfranchi C, 1998, ARTIF INTELL, V103, P157, DOI 10.1016/S0004-3702(98)00056-3
   Castelfranchi C, 2006, LECT NOTES COMPUT SC, V4140, P98
   Castelfranchi C, 2010, INT J AMBIENT COMPUT, V2, P1, DOI 10.4018/jaci.2010010101
   Castelfranchi C, 2006, HUM FAC ER, P157
   Danaher John, 2016, Philosophy and Technology, V29, P245, DOI [10.1007/s13347-015-0211-1, DOI 10.1007/S13347-015-0211-1]
   De Wolf T, 2007, LECT NOTES ARTIF INT, V4335, P28
   Diakopoulos N, 2016, COMMUN ACM, V59, P56, DOI 10.1145/2844110
   Foundation for Intelligent Physical Agents, 2002, FIP REQ INT PROT SPE
   Grasse P. P., 1959, Insectes Sociaux Paris, V6, P41, DOI 10.1007/BF02223791
   Grootendorst Rob, 2013, FUNDAMENTALS ARGUMEN
   Halsey A., 2017, NTSB SAYS DRIVER FAT
   Hendler J, 2010, ARTIF INTELL, V174, P156, DOI 10.1016/j.artint.2009.11.010
   Holstein T., 2018, CORR
   Hutchins E., 1995, COGNITION WILD
   Jennings NR, 2014, COMMUN ACM, V57, P80, DOI 10.1145/2629559
   Jonge D. d, 2016, ELECT I EI EIDE FRAM, P47
   Koo J, 2015, INT J INTERACT DES M, V9, P269, DOI 10.1007/s12008-014-0227-2
   Lippi M., 2017, IEEE INTERNET THINGS, DOI [10.1109/J10T.2017.2775047, DOI 10.1109/J10T.2017.2775047]
   Lippi M, 2017, INT CON DISTR COMP S, P1949, DOI 10.1109/ICDCS.2017.282
   Fernandez-Marquez JL, 2013, NAT COMPUT, V12, P43, DOI 10.1007/s11047-012-9324-y
   Mamei M, 2003, LECT NOTES ARTIF INT, V2577, P68
   Mariani S, 2016, ARTIF INTELL-FOUND, P1, DOI 10.1007/978-3-319-47109-9
   Mariani S, 2018, LECT NOTES COMPUT SC, V11176, P295, DOI 10.1007/978-3-030-04771-9_22
   Mariani S, 2015, LECT NOTES ARTIF INT, V9336, P102, DOI 10.1007/978-3-319-24309-2_8
   Mariani S, 2013, STUD COMPUT INTELL, V446, P17
   Medsker L, 2017, ALGORITHMIC TRANSPAR
   Nagpal R, 2004, INT CONF PARA PROC, P530
   Nardin LG, 2016, KNOWL ENG REV, V31, P142, DOI 10.1017/S0269888916000023
   Nikolai C, 2009, JASSS-J ARTIF SOC S, V12
   Noriega P., 2015, INT WORKSH COORD ORG
   Omicini A., 2012, GOALS COGNITION ESSA, V20, P543
   ORLIKOWSKI WJ, 1992, ORGAN SCI, V3, P398, DOI 10.1287/orsc.3.3.398
   Pariser E., 2011, FILTER BUBBLE WHAT I
   Park SY, 2012, INT J MED INFORM, V81, P204, DOI 10.1016/j.ijmedinf.2011.12.001
   Parunak HV, 2006, LECT NOTES ARTIF INT, V3830, P163
   Persily N, 2017, J DEMOCR, V28, P63, DOI 10.1353/jod.2017.0025
   Piunti M., 2007, P AISB
   Rahwan I, 2003, KNOWL ENG REV, V18, P343, DOI 10.1017/S0269888904000098
   Ricci A, 2007, LECT NOTES ARTIF INT, V4389, P124
   Schmidt K., 2004, Computer Supported Cooperative Work: The Journal of Collaborative Computing, V13, P349, DOI 10.1007/s10606-004-5059-3
   Serugendo G. D. M, 2003, SELF ORG PARADIGMS A
   Serugendo GD, 2006, INFORM-J COMPUT INFO, V30, P45
   Sierra C., 2004, UPGRADE The European Journal for the Informatics Professional, VV, P33
   Singh Munindar P., 2013, DAGSTUHL FOLLOW UPS, V4, P191, DOI DOI 10.4230/DFU.VOL4.12111.191
   SMITH RG, 1980, IEEE T COMPUT, V29, P1104, DOI 10.1109/TC.1980.1675516
   Suchman L.A., 1987, PLANS SITUATED ACTIO, P49
   Susi T., 2001, Cognitive Systems Research, V2, P273, DOI DOI 10.1016/S1389-0417(01)00053-5
   Trist E.L., 1981, The evolution of sociotechnical systems, V2
   Tummolini L, 2005, LECT NOTES COMPUT SC, V3374, P215
   van Dyke Parunak H., 2002, Proceedings of the First International Joint Conference on Autonomous Agents and Multiagent Systems, P449
   Viroli M, 2009, LECT NOTES COMPUT SC, V5521, P143, DOI 10.1007/978-3-642-02053-7_8
   Welch DBM, 2009, LOST SEX: THE EVOLUTIONARY BIOLOGY OF PARTHENOGENESIS, P259, DOI 10.1007/978-90-481-2770-2_13
   Whitworth B., 2006, Encyclopedia of Human Computer Interaction, P533
   Zambonelli F, 2015, PERVASIVE MOB COMPUT, V17, P236, DOI 10.1016/j.pmcj.2014.12.002
NR 81
TC 2
Z9 4
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 1
PY 2019
VL 184
AR 102317
DI 10.1016/j.scico.2019.102317
PG 15
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Social Science Citation Index (SSCI); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA JM6QO
UT WOS:000496336900004
OA Bronze
DA 2024-07-18
ER

PT J
AU Inoue, H
   Igarashi, A
AF Inoue, Hiroaki
   Igarashi, Atsushi
TI A type system for first-class layers with inheritance, subtyping, and
   swapping
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Context-oriented programming; Dynamic layer composition; First-class
   layers; Layer inheritance; Type systems
ID CORE CALCULUS; JAVA; IMPLEMENTATION; DESIGN
AB Context-Oriented Programming (COP) is a programming paradigm to encourage modularization of context-dependent software. Key features of COP are layers modules to describe context-dependent behavioral variations of a software system and their dynamic activation, which can modify the behavior of multiple objects that have already been instantiated. Typechecking programs written in a COP language is difficult because the activation of a layer can even change objects' interfaces. Inoue et al. have informally discussed how to make JCop, an extension of Java for COP by Appeltauer et al., type-safe. In this article, we formalize a small COP language called ContextFJ(<:) with its operational semantics and type system and show its type soundness. The language models main features of the type-safe version of JCop, including dynamically activated first-class layers, inheritance of layer definitions, layer subtyping, and layer swapping. (C) 2019 Elsevier B.V. All rights reserved.
C1 [Inoue, Hiroaki; Igarashi, Atsushi] Kyoto Univ, Grad Sch Informat, Kyoto, Japan.
C3 Kyoto University
RP Inoue, H; Igarashi, A (corresponding author), Kyoto Univ, Grad Sch Informat, Kyoto, Japan.
EM hinoue@kuis.kyoto-u.ac.jp; igarashi@kuis.kyoto-u.ac.jp
RI Igarashi, Atsushi/AAP-4323-2020
OI Igarashi, Atsushi/0000-0002-5143-9764
FU Kyoto University Design School; MEXT KAKENHI [23220001]
FX We thank Tomoyuki Aotani, Malte Appeltauer, Robert Hirschfeld, and
   Tetsuo Kamina for valuable discussions on the subject. This work was
   supported in part by Kyoto University Design School (Inoue) and MEXT
   KAKENHI Grant Number 23220001 (Igarashi).
CR [Anonymous], 1998, P 25 ACM SIGPLAN SIG, DOI DOI 10.1145/268946.268961
   Aotani T., 2011, P 3 INT WORKSH CONT
   Appeltauer M., 2012, JCOP LANGUAGE SPECIF, V59
   Appeltauer M., 2010, P 2 INT WORKSH CONT, P4
   Appeltauer M, 2013, J OBJECT TECHNOL, V12, DOI 10.5381/jot.2013.12.2.a4
   Bainomugisha Engineer, 2012, ONWARD 2012, P67
   Batory D, 2004, IEEE T SOFTWARE ENG, V30, P355, DOI 10.1109/TSE.2004.23
   Bettini L, 2005, ACTA INFORM, V42, P143, DOI 10.1007/s00236-005-0176-0
   Bettini L, 2013, SCI COMPUT PROGRAM, V78, P907, DOI 10.1016/j.scico.2012.11.003
   Bono V, 1999, LECT NOTES COMPUT SC, V1628, P43
   Burton E, 2015, 30TH ANNUAL ACM SYMPOSIUM ON APPLIED COMPUTING, VOLS I AND II, P1992, DOI 10.1145/2695664.2695938
   Cardozo N, 2015, INFORM SOFTWARE TECH, V58, P71, DOI 10.1016/j.infsof.2014.10.002
   Cardozo N, 2013, 2013 INTERNATIONAL SYMPOSIUM ON THEORETICAL ASPECTS OF SOFTWARE ENGINEERING (TASE), P191, DOI 10.1109/TASE.2013.33
   Chiba S, 2010, ACM SIGPLAN NOTICES, V45, P539, DOI 10.1145/1932682.1869503
   Clifton C, 2006, ACM T PROGR LANG SYS, V28, P517, DOI 10.1145/1133651.1133655
   Costanza P., 2008, P 12 INT C SOFTW PRO, P9
   Damiani F., 2011, P 15 INT SOFTW PROD, V2, P34
   Damiani F, 2018, ACTA INFORM, V55, P269, DOI 10.1007/s00236-017-0293-6
   Degano Pierpaolo, 2014, Software Engineering and Formal Methods. 12th International Conference, SEFM 2014. Proceedings: LNCS 8702, P347, DOI 10.1007/978-3-319-10431-7_28
   Degano P, 2016, IEEE T SOFTWARE ENG, V42, P505, DOI 10.1109/TSE.2015.2496941
   Drossopoulou S, 2002, ACM T PROGR LANG SYS, V24, P153, DOI 10.1145/514952.514955
   Gonzalez S., 2010, INT C SOFTW LANG ENG, P246
   Hallsteinsen S, 2008, COMPUTER, V41, P93, DOI 10.1109/MC.2008.123
   Hirschfeld R., 2011, P FDN ASP OR LANG FO
   Hirschfeld R, 2008, J OBJECT TECHNOL, V7, P125, DOI 10.5381/jot.2008.7.3.a4
   Igarashi A, 2001, ACM T PROGR LANG SYS, V23, P396, DOI 10.1145/503502.503505
   Igarashi A., 2012, P FOOL OCT
   Inoue H, 2015, LECT NOTES COMPUT SC, V9458, P445, DOI 10.1007/978-3-319-26529-2_24
   Inoue Hiroaki, 2014, INT WORKSH CONT OR P, DOI [10.1145/2637066.2637073, DOI 10.1145/2637066.2637073]
   Johnsen EB, 2009, LECT NOTES COMPUT SC, V5850, P596, DOI 10.1007/978-3-642-05089-3_38
   Kamina T, 2004, LECT NOTES COMPUT SC, V3302, P398
   Kamina T., 2011, P 10 INT C ASP OR SO, P253, DOI DOI 10.1145/1960275.1960305
   Kamina T., 2014, P COP 14 UPPS SWED J
   Kamina T., 2015, P 14 INT C MOD MOD 2, P14, DOI [10.1145/2724525.2724570, DOI 10.1145/2724525.2724570]
   Kamina T, 2018, SCI COMPUT PROGRAM, V156, P104, DOI 10.1016/j.scico.2018.01.006
   Kamina Tetsuo, 2016, T MODULARITY COMPOS, V1, P123
   Liquori L, 2008, ACM T PROGR LANG SYS, V30, DOI 10.1145/1330017.1330022
   O'Donoghue T, 2009, LEADERSH LEARN SER, P100
   Prehofer C, 1997, LECT NOTES COMPUT SC, V1241, P419
   Rosenmüller M, 2011, AUTOMAT SOFTW ENG, V18, P163, DOI 10.1007/s10515-011-0080-5
   Schaefer I, 2010, LECT NOTES COMPUT SC, V6287, P77, DOI 10.1007/978-3-642-15579-6_6
   Smith C, 2005, LECT NOTES COMPUT SC, V3586, P453
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
NR 43
TC 0
Z9 0
U1 0
U2 1
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 15
PY 2019
VL 179
BP 54
EP 86
DI 10.1016/j.scico.2019.03.008
PG 33
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA IE2WW
UT WOS:000472246400003
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Avelino, G
   Passos, L
   Hora, A
   Valente, MT
AF Avelino, Guilherme
   Passos, Leonardo
   Hora, Andre
   Valente, Marco Tulio
TI Measuring and analyzing code authorship in 1+118 open source projects
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Code authorship; Linux kernel; Developer networks
AB Code authorship is a key information about large-scale software projects. Among others, it reveals the division of work, key collaborators, and developers' profiles. Seeking to better understand authorship in large and successful open source communities, we take the Linux kernel as our first case study. In total, we analyze authorship across 66 stable releases. Our analysis is centered around the Degree-of-Authorship (DOA) metric, which accounts for first authorship events (file creation), as well as further code changes. Authorship along the Linux kernel evolution reveals that (a) only a small portion of developers (26%) makes significant contributions to the code base; this ratio is almost constant during the Linux kernel evolution; (b) the number of files per author is highly skewed-a small group of top-authors (2%) is responsible for hundreds of files, while most authors (75%) are responsible for at most 10 files: (c) most authors in Linux (76%) are specialists and the relation between specialists and generalists tends to be constant; (d) authors with a high number of co-authorship connections tend to work with authors with fewer connections. Furthermore, we replicate the study in an extended dataset, composed of 118 well-known GitHub projects. We identify that most of the authorship patterns observed in the Linux kernel are also common to other open source projects. (C) 2019 Elsevier B.V. All rights reserved.
C1 [Avelino, Guilherme; Hora, Andre; Valente, Marco Tulio] Fed Univ Minas Gerais UFMG, Belo Horizonte, MG, Brazil.
   [Avelino, Guilherme] Fed Univ Piaui UFPI, Teresina, Brazil.
   [Passos, Leonardo] Univ Waterloo, Waterloo, ON, Canada.
C3 Universidade Federal de Minas Gerais; Universidade Federal do Piaui;
   University of Waterloo
RP Avelino, G (corresponding author), Fed Univ Piaui UFPI, Teresina, Brazil.
EM gaa@ufpi.edu.br
RI Hora, Andre/HTP-0699-2023
OI Hora, Andre/0000-0003-4900-1330; Avelino, Guilherme/0000-0002-8203-0638;
   Valente, Marco Tulio/0000-0002-8180-7548
FU FAPEMIG [PPM-00803-15]; CAPES [88881.131987/2016-01]; CNPq
   [306554/2015-1, 140205/2017-9]
FX This study is supported by grants from FAPEMIG (PPM-00803-15), CAPES
   (88881.131987/2016-01), and CNPq (306554/2015-1 and 140205/2017-9).
CR Albert R, 2002, REV MOD PHYS, V74, P47, DOI 10.1103/RevModPhys.74.47
   [Anonymous], 2004, XP Ser
   Avelino G., 2018, IEEE SOFTWARE, V1, P1
   Avelino Guilherme, 2017, IFIP INT C OPEN SOUR, P151, DOI DOI 10.1007/978-3-319-57735-7_15
   Avelino Guilherme, 2016, Proceedings of IEEE 24th International Conference on Program Comprehension (ICPC), P1
   Baldwin C.Y., 1999, Design Rules: The Power of Modularity
   Barr ET, 2012, LECT NOTES COMPUT SC, V7212, P316, DOI 10.1007/978-3-642-28872-2_22
   Bird C., 2011, P 19 ACM SIGSOFT S 1, P4, DOI DOI 10.1145/2025113.2025119
   Bird Christian, 2008, Proceedings of the 2008 ACM SIGSOFT Symposium on the Foundations of Software Engineering, P24
   Borges H, 2018, J SYST SOFTWARE, V146, P112, DOI 10.1016/j.jss.2018.09.016
   Borges H, 2016, PROC IEEE INT CONF S, P334, DOI 10.1109/ICSME.2016.31
   Bowman I. T., 1999, Proceedings of the 1999 International Conference on Software Engineering (IEEE Cat. No.99CB37002), P555, DOI 10.1109/ICSE.1999.841045
   Chacon S, 2014, PRO GIT, DOI DOI 10.1007/978-1-4842-0076-6
   Coelho J, 2017, ESEC/FSE 2017: PROCEEDINGS OF THE 2017 11TH JOINT MEETING ON FOUNDATIONS OF SOFTWARE ENGINEERING, P186, DOI 10.1145/3106237.3106246
   CONWAY ME, 1968, DATAMATION, V14, P28
   Corbet J., 2015, TECH REP
   Corbet Jonathan, 2005, Linux device drivers, VThird
   Crowston K., 2015, 1 MONDAY, V10
   Fritz T., 2010, P 32 ACMIEEE INT C S, P385
   Fritz T, 2014, ACM T SOFTW ENG METH, V23, DOI 10.1145/2512207
   German D. M., 2015, EMPIR SOFTW ENG, V21, P260
   Gini C., 1921, ECON J, V31, P124, DOI [DOI 10.2307/2223319, 10.2307/2223319]
   Gîrba T, 2005, EIGHTH INTERNATIONAL WORKSHOP ON PRINCIPLES OF SOFTWARE EVOLUTION, PROCEEDINGS, P113, DOI 10.1109/IWPSE.2005.21
   Gousios G, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P345, DOI 10.1145/2568225.2568260
   Grissom R. J., 2005, EFFECT SIZES RES BRO
   Herbsleb JD, 2007, FOSE 2007: FUTURE OF SOFTWARE ENGINEERING, P188, DOI 10.1109/FOSE.2007.11
   Hora A, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P1102, DOI 10.1145/3180155.3180212
   Jermakovics A, 2011, PROCEEDINGS OF THE 4TH INTERNATIONAL WORKSHOP ON COOPERATIVE AND HUMAN ASPECTS OF SOFTWARE ENGINEERING (CHASE'11), P24
   Jiang Y., 2014, 8 INT S EMP SOFTW EN, P1
   Jin X., 2005, P 38 ANN HAWAII INT, p198a
   Joblin M, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 1, P563, DOI 10.1109/ICSE.2015.73
   Kersten Mik, 2006, P 14 ACM SIGSOFT INT, P1
   López-Fernández L, 2006, INT J INF TECHNOL WE, V1, P27, DOI 10.4018/jitwe.2006070103
   Love Robert, 2010, Linux Kernel Development
   Madey G., 2002, P 8 AMERICAS C INFOR, P1806
   McDonald D. W., 2000, CSCW 2000. ACM 2000 Conference on Computer Supported Cooperative Work, P231, DOI 10.1145/358916.358994
   Meneely A., 2008, P 16 ACM SIGSOFT INT, P13, DOI DOI 10.1145/1453101.1453106
   Meneely A, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P281, DOI 10.1145/1985793.1985832
   Minto Shawn, 2007, 4 INT WORKSH MIN SOF, P5
   Mistrík I, 2010, COLLABORATIVE SOFTWARE ENGINEERING, P389, DOI 10.1007/978-3-642-10294-3_19
   Mockus A, 2002, ICSE 2002: PROCEEDINGS OF THE 24TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P503, DOI 10.1109/ICSE.2002.1007994
   Mockus A, 2002, ACM T SOFTW ENG METH, V11, P309, DOI 10.1145/567793.567795
   Murphy GC, 2006, IEEE SOFTWARE, V23, P76, DOI 10.1109/MS.2006.105
   Navarro G, 2001, ACM COMPUT SURV, V33, P31, DOI 10.1145/375360.375365
   Newman MEJ, 2004, P NATL ACAD SCI USA, V101, P5200, DOI 10.1073/pnas.0307545100
   Newman MEJ, 2003, PHYS REV E, V67, DOI 10.1103/PhysRevE.67.026126
   Padhye R., 2014, Proceedings of the 11th Working Conference on Mining Software Repositories, P332, DOI 10.1145/2597073.2597113
   Panichella Sebastiano, 2014, P 22 INT C PROGR COM, P177
   PARNAS DL, 1972, COMMUN ACM, V15, P1053, DOI 10.1145/361598.361623
   Passos L., 2015, P 14 INT C MODULARIT, P81
   Pilato C.M., 2008, VERSION CONTROL SUBV
   Pinzger Martin, 2008, P 16 ACM SIGSOFT INT, P2, DOI DOI 10.1145/1453101.1453105
   Qiaona Hong, 2011, 2011 IEEE 27th International Conference on Software Maintenance, P323, DOI 10.1109/ICSM.2011.6080799
   Rahman F., 2011, Proceeding 33rd Int. Conf. Softw. Eng.-ICSE 11, P491
   Ray B, 2014, 22ND ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (FSE 2014), P155, DOI 10.1145/2635868.2635922
   Robles G, 2009, 2009 6TH IEEE INTERNATIONAL WORKING CONFERENCE ON MINING SOFTWARE REPOSITORIES, P167, DOI 10.1109/MSR.2009.5069497
   Rodriguez-Bustos C., 2012, 2012 9th IEEE Working Conference on Mining Software Repositories (MSR 2012), P36, DOI 10.1109/MSR.2012.6224297
   Schuler D., 2008, P 2008 INT WORKING C, P121
   Sullivan K. J., 2001, Software Engineering Notes, V26, P99, DOI 10.1145/503271.503224
   Tsay J, 2014, 22ND ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (FSE 2014), P144, DOI 10.1145/2635868.2635882
   Vasilescu B, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE COMPANION 2014), P646, DOI 10.1145/2591062.2591091
   Vasilescu B, 2014, PROC IEEE INT CONF S, P401, DOI 10.1109/ICSME.2014.62
   Vasilescu B, 2014, EMPIR SOFTW ENG, V19, P955, DOI 10.1007/s10664-013-9244-1
   Watts DJ, 1998, NATURE, V393, P440, DOI 10.1038/30918
   Yang X, 2014, 22ND ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (FSE 2014), P820, DOI 10.1145/2635868.2661682
   Zhang Wen, 2011, P INT WORKSH PRINC S, P71
NR 66
TC 7
Z9 7
U1 0
U2 8
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAY 1
PY 2019
VL 176
BP 14
EP 32
DI 10.1016/j.scico.2019.03.001
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA HT3VM
UT WOS:000464491300002
OA Bronze
DA 2024-07-18
ER

PT J
AU Muram, FUL
   Tran, H
   Zdun, U
AF Muram, Faiz U. L.
   Tran, Huy
   Zdun, Uwe
TI Supporting automated containment checking of software behavioural models
   using model transformations and model checking
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Containment checking; Model checking; Model transformation; Behaviour
   models; LTL
ID CONSISTENCY; PROOF
AB Models are extensively used in many areas of software engineering to represent the behaviour of software systems at different levels of abstraction. Because of the involvement of different stakeholders in constructing these models and their independent evolution, inconsistencies might occur between the models. It is thus crucial to detect these inconsistencies at early phases of the software development process, and especially as soon as refined models deviate from their abstract counterparts. In this article, we introduce a containment checking approach to verify whether a certain low-level behaviour model, typically created by refining and enhancing a high-level model, still is consistent with the specification provided in its high-level counterpart. We interpret the containment checking problem as a model checking problem, which has not received special treatment in the literature so far. Because the containment checking is based on model checking, it requires both formal consistency constraints and specifications of these models. Unfortunately, creating formal consistency constraints and specifications is currently done manually, and therefore, labour-intensive and error prone. To alleviate this issue, we define and develop a fully automated transformation of behaviour models into formal specifications and properties. The generated formal specifications and properties can directly be used by existing model checkers for detecting any discrepancy between the input models and yield corresponding counterexamples. Moreover, our approach can provide the developers more informative and comprehensive feedback regarding the inconsistency issues, and therefore, help them to efficiently identify and resolve the problems. The evaluation of various scenarios from industrial case studies demonstrates that the proposed approach efficiently translates the behaviour models into formal specifications and properties. (C) 2019 Elsevier B.V. All rights reserved.
C1 [Muram, Faiz U. L.; Tran, Huy; Zdun, Uwe] Univ Vienna, Fac Comp Sci, Software Architecture Res Grp, Vienna, Austria.
   [Muram, Faiz U. L.] Malardalen Univ, Sch Innovat Design & Engn, Vasteras, Sweden.
C3 University of Vienna; Malardalen University
RP Muram, FUL (corresponding author), Malardalen Univ, Sch Innovat Design & Engn, Vasteras, Sweden.
EM faizul.muran@univie.ac.at; huy.tran@univie.ac.at; uwe.zdun@univie.ac.at
RI Zdun, Uwe/AFR-2161-2022; Ul Muram, Faiz/ACC-5113-2022
OI Assouline Dayan, Yehudith/0000-0002-2851-6629
FU Wiener Wissenschafts-, Forschungs-and Technologiefonds (WWTF)
   [ICT12-001]
FX The research leading to the results presented in this article is
   supported by the Wiener Wissenschafts-, Forschungs-and Technologiefonds
   (WWTF), Grant No. ICT12-001.
CR Amálio N, 2004, LECT NOTES COMPUT SC, V3308, P418
   [Anonymous], P WORKSH GRAPH TRANS
   [Anonymous], 1987, TEMPORAL LOGIC SPECI, DOI DOI 10.1007/3-540-51803-7_36
   Arcaini P, 2016, LECT NOTES COMPUT SC, V9763, P253, DOI 10.1007/978-3-319-41591-8_17
   Bae J, 2007, INT J WEB SERV RES, V4, P1, DOI 10.4018/jwsr.2007100101
   Ball T, 2003, ACM SIGPLAN NOTICES, V38, P97, DOI 10.1145/640128.604140
   Becker M, 2012, COMPUT IND, V63, P148, DOI 10.1016/j.compind.2011.11.003
   BURCH JR, 1992, INFORM COMPUT, V98, P142, DOI 10.1016/0890-5401(92)90017-A
   Cavada  R., 2005, NUSMV 2 5 USER MANUA
   Cimatti A., 1999, Computer Aided Verification. 11th International Conference, CAV'99. Proceedings (Lecture Notes in Computer Science Vol.1633), P495
   Clarke E., 1996, Computer Aided Verification. 8th International Conference, CAV '96. Proceedings, P419
   Clarke EM, 1996, ACM COMPUT SURV, V28, P626, DOI 10.1145/242223.242257
   Clarke EM, 1999, MODEL CHECKING, P1
   Dijkman R, 2011, INFORM SYST, V36, P498, DOI 10.1016/j.is.2010.09.006
   Dijkman R, 2009, LECT NOTES COMPUT SC, V5701, P48, DOI 10.1007/978-3-642-03848-8_5
   Dwyer M. B., 1998, Proceedings of FMSP'98. Second Workshop on Formal Methods in Software Practice, P7, DOI 10.1145/298595.298598
   Egyed A, 2002, ACM T SOFTW ENG METH, V11, P449, DOI 10.1145/606612.606616
   Engels G., 2002, J INTEGRATED DESIGN, V6, P2
   Engels G, 2008, LECT NOTES COMPUT SC, V5088, P17
   Eshuis H., 2001, CTIT TECHNICAL REPOR
   Eshuis Hendrik, 2002, THESIS
   Eshuis R, 2002, ICSE 2002: PROCEEDINGS OF THE 24TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P166, DOI 10.1109/ICSE.2002.1007965
   Eshuis R, 2006, ACM T SOFTW ENG METH, V15, P1, DOI 10.1145/1125808.1125809
   Foerster A, 2007, TASE 2007: FIRST JOINT IEEE/IFIP SYMPOSIUM ON THEORETICAL ASPECTS OF SOFTWARE ENGINEERING, PROCEEDINGS, P197, DOI 10.1109/TASE.2007.56
   Graaf B, 2007, FOURTH INTERNATIONAL WORKSHOP ON MODEL-BASED METHODOLOGIES FOR PERVASIVE AND EMBEDDED SOFTWARE, PROCEEDINGS, P115, DOI 10.1109/MOMPES.2007.12
   Guelfi N, 2005, 12TH ASIA-PACIFIC SOFTWARE ENGINEERING CONFERENCE, PROCEEDINGS, P283, DOI 10.1109/APSEC.2005.7
   Harel D., 1996, ACM Transactions on Software Engineering and Methodology, V5, P293, DOI 10.1145/235321.235322
   Heimdahl M. P. E., 2005, Automated Software Engineering, V12, P321, DOI 10.1007/s10515-005-2642-x
   Hongyuan Wang, 2005, International Symposium on Communications and Information Technologies 2005 (IEEE Cat. No.05EX1224), P486
   Tran H, 2012, INFORM SOFTWARE TECH, V54, P531, DOI 10.1016/j.infsof.2012.01.001
   Janssen W, 1999, LECT NOTES COMPUT SC, V1680, P92
   Jin H., 2004, International Journal on Software Tools for Technology Transfer, V6, P102, DOI 10.1007/s10009-004-0146-9
   Knapp A., 2002, Formal Techniques in Real-Time and Fault-Tolerant Systems. 7th International Symposium, FTRTFT 2002. Proceedings (Lecture Notes in Computer Science Vol.2469), P395
   Koehler J, 2002, SIXTH INTERNATIONAL ENTERPRISE DISTRIBUTED OBJECT COMPUTING CONFERENCE, PROCEEDINGS, P96, DOI 10.1109/EDOC.2002.1137700
   Krings S, 2016, LECT NOTES COMPUT SC, V9675, P135, DOI 10.1007/978-3-319-33600-8_8
   Lam VSW, 2008, IET SOFTW, V2, P391, DOI 10.1049/iet-sen:20070045
   Lam Vitus S. W., 2007, Nordic Journal of Computing, V14, P43
   Lam VSW, 2005, LECT NOTES COMPUT SC, V3771, P347
   Lerner BS, 2010, IEEE T SOFTWARE ENG, V36, P162, DOI 10.1109/TSE.2010.1
   Lucas FJ, 2009, INFORM SOFTWARE TECH, V51, P1631, DOI 10.1016/j.infsof.2009.04.009
   Martens A, 2005, 2005 IEEE International Conference on e-Technology, e-Commerce and e-Service, Proceedings, P60, DOI 10.1109/EEE.2005.53
   Milner R., 1989, Communication and concurrency
   Muram F.U., 2015, 13 INT BUS PROC MAN, P515
   Muram FU, 2016, ASIA PAC SOFWR ENG, P73, DOI [10.1109/APSEC.2016.021, 10.1109/APSEC.2016.61]
   MURATA T, 1989, P IEEE, V77, P541, DOI 10.1109/5.24143
   OASIS, 2007, WE SERV BUS PROC EX
   Object Management Group (OMG), 2011, UML 2 4 1 SUP SPEC
   OMG, 2011, BUS PROC MOD NOT
   Pelletier FJ, 2008, LOG J IGPL, V16, P75, DOI 10.1093/jigpal/jzm027
   Pnueli A., 1977, 18th Annual Symposium on Foundations of Computer Science, P46, DOI 10.1109/SFCS.1977.32
   Rozier KY, 2011, COMPUT SCI REV, V5, P163, DOI 10.1016/j.cosrev.2010.06.002
   Schafer T., 2001, Electronic Notes in Theoretical Computer Science, V55, DOI 10.1016/S1571-0661(04)00262-2
   Scheer A. - W., 2002, ARIS GESCHAFTSPROZES
   Spanoudakis G, 2001, HDB SOFTWARE ENG KNO, VI, P329
   Störrle H, 2014, LECT NOTES COMPUT SC, V8767, P518, DOI 10.1007/978-3-319-11653-2_32
   Stumptner M, 2000, LECT NOTES COMPUT SC, V1920, P527
   Tran H., 2010, 2 INT C PERS TECHN, V66, P338
   Tran H, 2011, RELATING SOFTWARE REQUIREMENTS AND ARCHITECTURES, P233, DOI 10.1007/978-3-642-21001-3_14
   Ul Muram F, 2017, PROCEEDINGS OF THE 22ND EUROPEAN CONFERENCE ON PATTERN LANGUAGES OF PROGRAMS (EUROPLOP 2017), DOI 10.1145/3147704.3147736
   Ul Muram F, 2014, ELECTRON PROC THEOR, P93, DOI 10.4204/EPTCS.147.7
   Ul Muram F, 2017, 2017 IEEE INTERNATIONAL CONFERENCE ON SERVICES COMPUTING (SCC), P172, DOI 10.1109/SCC.2017.29
   Ul Muram F, 2017, ACM COMPUT SURV, V50, DOI 10.1145/3037755
   van der Aalst W.M., 2002, MOCA, V2, P105
   van der Aalst WMP, 2006, LECT NOTES COMPUT SC, V4102, P129
   van der Aalst WMP, 2008, ACM T INTERNET TECHN, V8, DOI 10.1145/1361186.1361189
   Van Der Straeten R, 2003, LECT NOTES COMPUT SC, V2863, P326
   van der Straeten  R., 2005, THESIS
   Wasylkowski A, 2009, IEEE INT CONF AUTOM, P295, DOI 10.1109/ASE.2009.30
   Yang D, 2003, ECBS 2003: 10TH IEEE INTERNATIONAL CONFERENCE AND WORKSHOP ON THE ENGINEERING OF COMPUTER-BASED SYSTEMS, PROCEEDINGS, P47
   Yeung WL, 2004, J UNIVERS COMPUT SCI, V10, P1540
NR 70
TC 8
Z9 9
U1 0
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD APR 1
PY 2019
VL 174
BP 38
EP 71
DI 10.1016/j.scico.2019.01.005
PG 34
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA HP2VJ
UT WOS:000461533200002
OA hybrid
DA 2024-07-18
ER

PT J
AU Hocaoglu, MF
AF Hocaoglu, Mehmet F.
TI AdSiF: Agent driven simulation framework paradigm and ontological view
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Agent-driven simulation; Agent Programming; Logic programming; Ontology;
   State-oriented programming
ID INTELLIGENT AGENTS; SYSTEMS; LANGUAGE; EFFICIENT; MOBILE; MODELS
AB AdSiF (Agent driven Simulation Framework) provides a programming environment for modeling, simulation, and programming agents, which fuses agent-based, object-oriented, aspect-oriented, and logic programming into a single paradigm. The power of this paradigm stems from its ontological background and the paradigms it embraces and integrates into a single paradigm called state-oriented programming. AdSiF commits to describe what exists and to model the agent reasoning abilities, which thereby drives model behaviors. Basically, AdSiF provides a knowledgebase and a depth first search mechanism for reasoning. It is possible to model different search mechanism for reasoning but depth first search is a default search mechanism for first order reasoning. The knowledge base consists of facts and predicates. The reasoning mechanism is combined with a dual-world representation, it is defined as an inner representation of a simulated environment, and it is constructed from time-stamped sensory data (or beliefs) obtained from that environment even when these data consist of errors. This mechanism allows the models to make decisions using the historical data of the models and its own states.
   The study provides a novel view to simulation and agent-modeling using a script-based graph programming structuring state-oriented programming with a multi-paradigm approach. The study also enhances simulation modeling and agent programming using logic programming and aspect orientation. It provides a solution framework for continuous and discrete event simulation and allows modelers to use their own simulation time management, event handling, distributed, and real time simulation algorithms. (C) 2018 Elsevier B.V. All rights reserved.
C1 [Hocaoglu, Mehmet F.] Istanbul Medeniyet Univ, Fac Engn & Nat Sci, Goztepe, Turkey.
C3 Istanbul Medeniyet University
RP Hocaoglu, MF (corresponding author), Istanbul Medeniyet Univ, Fac Engn & Nat Sci, Goztepe, Turkey.
EM mfatih.hocaoglu@medeniyet.edu.tr
RI Hocaoglu, Mehmet Fatih/I-2493-2014
OI Hocaoglu, Mehmet Fatih/0000-0001-7428-9351
CR Adelantado M., 2001, P 2001 SIM INT OP WO
   Allen G.F.F., 1994, ACTIONS EVENTS INTER
   [Anonymous], 1976, Theory of modelling and simulation
   [Anonymous], INT J INTELL CONTROL
   [Anonymous], 1995, P 1 INT C MULT SYST
   [Anonymous], 1974, PURE APPL MATH, DOI DOI 10.1016/S0079-8169(08)60880-6
   [Anonymous], 2016, MULTIAGENT SYSTEMS
   BAGRODIA RL, 1994, IEEE T SOFTWARE ENG, V20, P225, DOI 10.1109/32.277572
   Barbati M, 2012, EXPERT SYST APPL, V39, P6020, DOI 10.1016/j.eswa.2011.12.015
   Bhattacharya A.K.M.A., 2006, PARALLEL DISTRIBUTED
   Bonabeau E, 2002, P NATL ACAD SCI USA, V99, P7280, DOI 10.1073/pnas.082080899
   Bordini M.W.R.H., 2007, PROGRAMMING MULTIAGE
   Bruzzone AG, 2005, SIMUL-T SOC MOD SIM, V81, P647, DOI 10.1177/0037549704047602
   Burkhard HD, 2010, FUND INFORM, V102, P49, DOI 10.3233/FI-2010-296
   Celik F, 2016, J COMPUT SCI-NETH, V13, P26, DOI 10.1016/j.jocs.2015.11.012
   Chen CC, 2010, SIMUL-T SOC MOD SIM, V86, P41, DOI 10.1177/0037549709106692
   Coakley M.H., 2006, AGENT DIRECTED SIMUL
   Das S., 2000, SAFE SOUND ARTIFICIA
   FIPA, 2009, FDN INT PHYS AG
   Firby J., 1989, Adaptive execution in complex dynamic domains
   Firby W.F.J., 2000, RAP SYSTEM LANGUAGE
   Fox J, 2003, AI COMMUN, V16, P139
   Guizzardi G, 2013, WINT SIMUL C PROC, P1335, DOI 10.1109/WSC.2013.6721520
   HAREL D, 1987, SCI COMPUT PROGRAM, V8, P231, DOI 10.1016/0167-6423(87)90035-9
   Harman Gilbert, 2018, OBJECT ORIENTED ONTO
   HEWITT C, 1985, BYTE, V10, P223
   Hocaoglu E.a., 2004, C4ISR MODELING SIMUL
   Hocaoglu M.F., 2004, TEMPORAL SYSTEM IDEN
   Hocaoglu M.F., 2013, USMOS 2013 NAT DEF A
   Hocaoglu M.F., 2013, ADSIF DEV GUID
   Hocaoglu M.F., 2014, ASIM 2014 AS1M S SIM
   Hocaoglu M.F., 2017, INT J ADV TECHNOL, V8
   Hocaoglu M.F., 2014, SIMUL NOTES EUR, V24, P95
   Hocaoglu M.F., 2000, SIMULATION PLANNING
   Hocaoglu Mehmet F., 2015, USMOS 2015 NAT DEF A, P451
   Hocaoglu MF, 2018, MOD SIMUL ENG, V2018, DOI 10.1155/2018/7842402
   Javor A., 1997, Proceedings of the 1997 Summer Computer Simulation Conference Simulation and Modeling Technology for the Twenty-First Century, P723
   Jávor A, 1998, P SUMM COMP, P99
   Javor G., 2000, SUMM COMP SIM C, P9
   Jennings N, 1996, IEE REVIEW, V42, P17, DOI 10.1049/ir:19960101
   Junges R, 2012, APPL ARTIF INTELL, V26, P349, DOI 10.1080/08839514.2012.652906
   Kay R., 2003, COMPUTERWORLD, V37
   Kiczales J.I.G., 1997, P EUR C OBJ OR PROGR
   Kim JH, 2001, SIMULATION, V76, P345, DOI 10.1177/003754970107600603
   Komma VR, 2012, INT J SIMUL MODEL, V11, P173, DOI 10.2507/IJSIMM11(4)1.193
   Leblanc R., 2012, SOFTWARE METRICS FUN
   Lieberherr K, 2001, COMMUN ACM, V44, P39, DOI 10.1145/383845.383855
   McCabe F.G., 1992, INT SERIES COMPUTER
   Mendonça NC, 2008, INT J SOFTW ENG KNOW, V18, P242
   Ören T, 2012, EXPERT SYST APPL, V39, P81, DOI 10.1016/j.eswa.2011.06.038
   Oren T., 2005, P I ITSEC INT IND TR
   Pisla DL, 2008, 2008 IEEE INTERNATIONAL CONFERENCE ON AUTOMATION, QUALITY AND TESTING, ROBOTICS (AQTR 2008), THETA 16TH EDITION, VOL II, PROCEEDINGS, P404, DOI 10.1109/AQTR.2008.4588863
   Poole D. L., 2017, Artificial Intelligence: Foundations for Computational Agents, V2nd
   Posse E, 2010, IEEE ACM DIS SIM, P87, DOI 10.1109/DS-RT.2010.19
   Roca D, 2017, I S MOD ANAL SIM COM, P143, DOI 10.1109/MASCOTS.2017.13
   Russel P. N. S., 1995, ARTIFICIAL INTELLIGE
   Sarjoughian HS, 2001, P IEEE, V89, P201, DOI 10.1109/5.910855
   Sarjoughian V. E.H., 2009, SIMUTOOLS 2009
   SHOHAM Y, 1993, ARTIF INTELL, V60, P51, DOI 10.1016/0004-3702(93)90034-9
   Shoham Y., 1990, STANCS901335 STAN U
   Song X, 2017, INT J IND ENG-THEORY, V24, P134
   Sterkin A., 2008, 6 MPOOL WORKSH CYPR
   Travers MD., 1996, PROGRAMMING AGENTS N
   Wagner G, 2011, IEEE INT ENTERP, P385, DOI 10.1109/EDOCW.2011.68
   Wang HD, 2009, 2009 IEEE INTERNATIONAL CONFERENCE ON MECHATRONICS AND AUTOMATION, VOLS 1-7, CONFERENCE PROCEEDINGS, P4229
   WoonSik Kim, 2011, Proceedings of the 2011 13th International Conference on Advanced Communication Technology (ICACT). Smart Service Innovation through Mobile Interactivity, P254
   Yilmaz L, 2006, SIMULAT GAMING, V37, P339, DOI 10.1177/1046878106289089
   Zeigler T.G.K.B.P., 2000, THEORY MODELING SIMU
NR 68
TC 3
Z9 3
U1 0
U2 4
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 1
PY 2018
VL 167
BP 70
EP 90
DI 10.1016/j.scico.2018.07.004
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GZ1NZ
UT WOS:000449136100005
DA 2024-07-18
ER

PT J
AU Gómez-Abajo, P
   Guerra, E
   de Lara, J
   Merayo, MG
AF Gomez-Abajo, Pablo
   Guerra, Esther
   de Lara, Juan
   Merayo, Mercedes G.
TI A tool for domain-independent model mutation
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Model-driven engineering; Domain-specific languages; Model mutation;
   Mutation footprint; Model synthesis
AB Mutation is a systematic technique to create variants of a seed artefact by means of mutation operators. It has many applications in computer science, like software testing, automatic exercise generation and design space exploration. Typically, mutation frameworks are developed ad-hoc by implementing mutation operators and their application strategies from scratch, using general-purpose programming languages. However, this is costly and error-prone.
   To improve this situation, we propose WODEL: a domain-specific language and tool for model-based mutation that is independent of the domain meta-model. WoDELenables the rapid development and application of model mutations. It provides built-in advanced functionalities like automatic generation of seed models, and static and dynamic metrics of operator coverage and applicability. It offers extension points, e.g., to post-process mutants and describe domain-specific equivalence criteria. As an example, we illustrate the usage of WODEL for the mutation of security policies, and present an empirical evaluation of its expressiveness. (C) 2018 Elsevier B.V. All rights reserved.
C1 [Gomez-Abajo, Pablo; Guerra, Esther; de Lara, Juan] Univ Autonoma Madrid, Comp Sci Dept, Modelling & Software Engn Res Grp, Madrid, Spain.
   [Merayo, Mercedes G.] Univ Complutense Madrid, Dept Sistemas Informat & Comp, Madrid, Spain.
C3 Autonomous University of Madrid; Complutense University of Madrid
RP Gómez-Abajo, P (corresponding author), Univ Autonoma Madrid, Comp Sci Dept, Modelling & Software Engn Res Grp, Madrid, Spain.
EM Pablo.GomezA@uam.es; Esther.Guerra@uam.es; Juan.deLara@uam.es;
   mgmerayo@fdi.ucm.es
RI de Lara, Juan/B-5422-2014; Gómez-Abajo, Pablo/S-3860-2016; GARCIA
   MERAYO, MARIA DE LAS MERCEDES/T-4990-2018; Guerra, Esther/B-4977-2014
OI Gómez-Abajo, Pablo/0000-0002-8319-4829; GARCIA MERAYO, MARIA DE LAS
   MERCEDES/0000-0002-4634-4082; Guerra, Esther/0000-0002-2818-2278
FU project FLEXOR (Spanish MINECO) [TIN2014-52129-R]; project DArDOS
   (Spanish MINECO/FEDER) [TIN2015-65845-C3-1-R]; R&D programme of the
   Madrid Region [S2013/ICE-3006]
FX Work partially funded by project FLEXOR (Spanish MINECO,
   TIN2014-52129-R), project DArDOS (Spanish MINECO/FEDER
   TIN2015-65845-C3-1-R) and the R&D programme of the Madrid Region
   (S2013/ICE-3006).
CR Aranega V, 2015, SOFTW TEST VERIF REL, V25, P653, DOI 10.1002/stvr.1532
   Bartel A., 2011, 2011 IEEE Fourth International Conference on Software Testing, Verification and Validation Workshops (ICSTW), P408, DOI 10.1109/ICSTW.2011.24
   DEMILLO RA, 1978, COMPUTER, V11, P34, DOI 10.1109/C-M.1978.218136
   du Bousquet L, 2013, SCI COMPUT PROGRAM, V78, P343, DOI 10.1016/j.scico.2012.07.002
   Estero-Botaro A, 2015, SOFTW TEST VERIF REL, V25, P536, DOI 10.1002/stvr.1528
   Granda MF, 2016, LECT NOTES COMPUT SC, V9694, P325, DOI 10.1007/978-3-319-39696-5_20
   Gómez-Abajo P, 2017, COMPUT LANG SYST STR, V49, P152, DOI 10.1016/j.cl.2016.11.001
   Hegedüs A, 2015, AUTOMAT SOFTW ENG, V22, P399, DOI 10.1007/s10515-014-0163-1
   Henard C, 2014, IEEE ICST WORKSHOP, P399, DOI 10.1109/ICSTW.2014.54
   Hierons RM, 2009, J SYST SOFTWARE, V82, P1804, DOI 10.1016/j.jss.2009.06.030
   Jackson Daniel, 2006, Software abstractions: Logic, language, and analysis
   Kuhlmann Mirco, 2012, Model Driven Engineering Languages and Systems. Proceedings 15th International Conference, MODELS 2012, P415, DOI 10.1007/978-3-642-33666-9_27
   Mouelhiv Tejeddine, 2008, 2008 IEEE International Conference on Software Testing Verification and Validation Workshop (ICSTW), P278, DOI 10.1109/ICSTW.2008.2
   Sadigh D., 2013, AUTOMATING EXERCISE, V2, P8
   Sen S., 2006, 2 WORKSH MUT AN MUT
   Steinberg D, 2009, EMF ECLIPSE MODELING, V2nd
   Strüber D, 2017, LECT NOTES COMPUT SC, V10374, P121, DOI 10.1007/978-3-319-61473-1_9
NR 17
TC 23
Z9 23
U1 0
U2 4
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 1
PY 2018
VL 163
BP 85
EP 92
DI 10.1016/j.scico.2018.01.008
PG 8
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GN0MN
UT WOS:000438662800005
OA Bronze, Green Published
DA 2024-07-18
ER

PT J
AU Kim, D
   Choi, Y
AF Kim, Dongwoo
   Choi, Yunja
TI A two-step approach for pattern-based API-call constraint checking
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE API; Constraint checking; Automotive software; Model checking; OSEK/VDX
ID TEST-GENERATION; VERIFICATION; TYPESTATE
AB An operating system publishes a set of application programming interface (API) functions along with a set of API-call constraints with which programs running on the operating system must comply. Any violation of these constraints may become a source of massive property damage or even human injury when such a program is used for safety-critical systems. A rigorous and targeted verification method is needed to identify such violations, which are frequently subtle and difficult to identify using conventional verification methods.
   As automated tool support for pre-checking constraint violations in the development process, this study presents a two-step approach for checking API-call constraints by using predefined patterns specifically designed for automotive operating systems. A lightweight checking method is designed for quick-and-easy checking of local API-call constraints, which utilizes constraint patterns and the C code model checker CBMC. The global constraint checking method is a heavyweight method, as it requires behavior models of the underlying operating system constructs as well as constraint patterns, but it produces more accurate verification results: it uses the symbolic model checker NuSMV as the backend verification engine. This two-step approach is effective in identifying constraint violations and efficient in reducing false alarms from infeasible execution paths. (C) 2018 Elsevier B.V. All rights reserved.
C1 [Kim, Dongwoo; Choi, Yunja] Kyungpook Natl Univ, Sch Comp Sci & Engn, Daegu, South Korea.
C3 Kyungpook National University
RP Choi, Y (corresponding author), Kyungpook Natl Univ, Sch Comp Sci & Engn, Daegu, South Korea.
EM kdw9242@gmail.com; yuchoi76@knu.ac.kr
FU Basic Science Research Program through the National Research Foundation
   of Korea (NRF) - Ministry of Education [NRF-2016R1D1A3B01011685];
   Next-Generation Information Computing Development Program through the
   National Research Foundation of Korea (NRF) - Ministry of Science, ICT
   [2017M3C4A7068175]
FX This research has been supported by the Basic Science Research Program
   through the National Research Foundation of Korea (NRF), funded by the
   Ministry of Education (NRF-2016R1D1A3B01011685), and by the
   Next-Generation Information Computing Development Program through the
   National Research Foundation of Korea (NRF), funded by the Ministry of
   Science, ICT (No. 2017M3C4A7068175).
CR [Anonymous], 2013, MISRA C 2012 GUIDELI, VMotor Industry Software Reliability Association and Motor Industry Software Reliability Association Staff
   [Anonymous], 2015, 2015 IEEE 8 INT C SO
   [Anonymous], 2001, PROGRAMMING OSEK VDX
   Autili M, 2015, IEEE T SOFTWARE ENG, V41, P620, DOI 10.1109/TSE.2015.2398877
   Ball T., 2006, Operating Systems Review, V40, P73, DOI 10.1145/1218063.1217943
   Ball T., 2010, 2010 Formal Methods in Computer-Aided Design (FMCAD 2010), P35
   Ball T, 2002, ACM SIGPLAN NOTICES, V37, P1, DOI 10.1145/565816.503274
   Béchennec JL, 2006, IEEE INT C EMERG, P641
   Beyer Dirk, 2007, International Journal on Software Tools for Technology Transfer, V9, P505, DOI 10.1007/s10009-007-0044-z
   Brat G., 2000, P WORKSH ADV VER CIT
   Byun T, 2015, 30TH ANNUAL ACM SYMPOSIUM ON APPLIED COMPUTING, VOLS I AND II, P1815, DOI 10.1145/2695664.2695935
   Choi Y, 2018, J SYST SOFTWARE, V137, P563, DOI 10.1016/j.jss.2017.07.040
   Choi YJ, 2017, SOFTW SYST MODEL, V16, P7, DOI 10.1007/s10270-014-0449-6
   박민규, 2015, [KIPS Transactions on Software and Data Engineering, 정보처리학회논문지. 소프트웨어 및 데이터 공학], V4, P1, DOI 10.3745/KTSDE.2015.4.1.1
   Choi Y, 2015, SCI COMPUT PROGRAM, V103, P51, DOI 10.1016/j.scico.2014.10.006
   Choi Y, 2013, LECT NOTES COMPUT SC, V8137, P305, DOI 10.1007/978-3-642-40561-7_21
   Clarke E., 2003, Proceedings 2003. Design Automation Conference (IEEE Cat. No.03CH37451), P368
   Clarke EdmundM., 2000, Proceedings of the International Conference on Computer Aided Veri cation (CAV), P154, DOI 10.1007/1072216715
   Cobleigh JM, 2008, ACM T SOFTW ENG METH, V17, DOI 10.1145/1348250.1348253
   Dimovski AS, 2017, LECT NOTES COMPUT SC, V10202, P406, DOI 10.1007/978-3-662-54494-5_24
   Do T., 2012, Revised Selected Papers, P3
   Dwyer M. B., 1999, Proceedings of the 1999 International Conference on Software Engineering (IEEE Cat. No.99CB37002), P411, DOI 10.1109/ICSE.1999.841031
   Field J, 2005, SCI COMPUT PROGRAM, V58, P57, DOI 10.1016/j.scico.2005.02.004
   Fink SJ, 2008, ACM T SOFTW ENG METH, V17, DOI 10.1145/1348250.1348255
   Gurevich Yuri., 1995, Speci fication and Validation Methods
   Hatcliff J, 2012, ACM COMPUT SURV, V44, DOI 10.1145/2187671.2187678
   Henzinger TA, 2002, ACM SIGPLAN NOTICES, V37, P58, DOI 10.1145/565816.503279
   John D., 1998, P OSEK VDX OP SYST A
   Kang Y, 2016, IEEE INT CONF AUTOM, P472, DOI 10.1145/2970276.2970354
   Kim D, 2016, ASIA PAC SOFWR ENG, P217, DOI [10.1109/APSEC.2016.51, 10.1109/APSEC.2016.039]
   Kim D, 2016, INT CONF IT CONVERGE, P314
   Klein G, 2009, SOSP'09: PROCEEDINGS OF THE TWENTY-SECOND ACM SIGOPS SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P207
   Kohan A., 2017, SOFTW ENG NOTES, V41, P1
   Kroening D, 2003, LECT NOTES COMPUT SC, V2575, P298
   Kuter U, 2015, AAAI CONF ARTIF INTE, P3987
   Lamba Y., 2015, P 8 IND SOFTW ENG C, P10
   Le XBD, 2017, PROCEEDINGS OF THE 26TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS (ISSTA'17), P376, DOI 10.1145/3092703.3098225
   Lin SW, 2015, IEEE INT CONF AUTOM, P65, DOI 10.1109/ASE.2015.33
   Liu S, 2016, IEEE INT C ENG COMP, P219, DOI [10.1109/ICECCS.2016.038, 10.1109/ICECCS.2016.32]
   McAfee Patrick, 2017, 2017 IEEE/ACM 4th International Conference on Mobile Software Engineering and Systems (MOBILESoft). Proceedings, P213, DOI 10.1109/MOBILESoft.2017.35
   Moffett Y, 2013, IEEE T SOFTWARE ENG, V39, P1307, DOI 10.1109/TSE.2013.14
   O'Halloran C, 2013, AUTOMAT SOFTW ENG, V20, P237, DOI 10.1007/s10515-012-0116-5
   OSEK Group, 2005, OSEK VDX OP SYST SPE
   Pnueli A., 1977, 18th Annual Symposium on Foundations of Computer Science, P46, DOI 10.1109/SFCS.1977.32
   Rollini Simone Fulvio, 2012, Computer Aided Verification. Proceedings 24th International Conference, CAV 2012, P193, DOI 10.1007/978-3-642-31424-7_18
   SAHA S., 2013, P 43 INT C DEP SYST P 43 INT C DEP SYST, P1
   Sen K., 2005, P 10 EUR SOFTW ENG C, V30, P263, DOI DOI 10.1145/1081706.1081750
   STROM RE, 1986, IEEE T SOFTWARE ENG, V12, P157, DOI 10.1109/TSE.1986.6312929
   Weiser M., 1981, 5th International Conference on Software Engineering, P439
   Zhang YF, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 1, P643, DOI 10.1109/ICSE.2015.80
NR 50
TC 4
Z9 4
U1 0
U2 7
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 1
PY 2018
VL 163
BP 19
EP 41
DI 10.1016/j.scico.2018.04.001
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GN0MN
UT WOS:000438662800002
DA 2024-07-18
ER

PT J
AU Wang, J
   Jiang, YY
   Xu, C
   Li, QW
   Gu, TX
   Ma, J
   Ma, XX
   Lu, J
AF Wang, Jue
   Jiang, Yanyan
   Xu, Chang
   Li, Qiwei
   Gu, Tianxiao
   Ma, Jun
   Ma, Xiaoxing
   Lu, Jian
TI AATT plus : Effectively manifesting concurrency bugs in Android apps
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Android; Concurrency
AB Smartphones are indispensable in people's daily activities, and smartphone apps tend to be increasingly concurrent due to the wide use of multi-core devices and technologies. Due to this tendency, developers are increasingly unable to tackle the complexity of concurrent apps and to avoid subtle concurrency bugs. To better address this issue, we propose a novel approach to detecting concurrency bugs in Android apps based on the fact that one can generate simultaneous input events and their schedules for an app, which would easily trigger concurrency bugs in an app. We conduct systematic state space exploration to find potentially conflicting resource accesses in an Android app. The app is then automatically pressure-tested by guided event and schedule generation. We implemented our prototype tool named AATT+ and evaluated it with two sets of real-world Android apps. Benchmarking using 15 Android apps with previously known concurrency bugs, AATT+ and existing concurrency-unaware techniques detected 10 and 1 bugs, respectively. Evaluated with another set of 17 popular Android apps, AATT+ detected 11 concurrency bugs and 7 of them were previously unknown, achieving an over 80% higher detection rate than existing concurrency-unaware techniques. (C) 2018 Elsevier B.V. All rights reserved.
C1 [Wang, Jue; Jiang, Yanyan; Xu, Chang; Li, Qiwei; Gu, Tianxiao; Ma, Jun; Ma, Xiaoxing; Lu, Jian] Nanjing Univ, State Key Lab Novel Software Technol, Nanjing, Jiangsu, Peoples R China.
   [Wang, Jue; Jiang, Yanyan; Xu, Chang; Li, Qiwei; Gu, Tianxiao; Ma, Jun; Ma, Xiaoxing; Lu, Jian] Nanjing Univ, Dept Comp Sci & Technol, Nanjing, Jiangsu, Peoples R China.
C3 Nanjing University; Nanjing University
RP Xu, C (corresponding author), Nanjing Univ, Dept Comp Sci & Technol, Nanjing, Jiangsu, Peoples R China.
EM juewang591@gmail.com; jiangyy@outlook.com; changxu@nju.edu.cn;
   liqiwei1992@gmail.com; tianxiao.gu@gmail.com; majun@nju.edu.cn;
   xxm@nju.edu.cn; lj@nju.edu.cn
RI Jiang, Yanyan/ABE-6639-2021; Ma, Xiaoxing/K-4290-2012; Ma,
   Xiaoxing/X-6505-2018
OI Ma, Xiaoxing/0000-0001-7970-1384; Wang, Jue/0000-0001-9866-2624
FU National Key RD Program [2017YFB1001801]; National Natural Science
   Foundation of China [61690204, 61472174]; Collaborative Innovation
   Center of Novel Software Technology and Industrialization, Jiangsu,
   China
FX This work was supported in part by National Key R&D Program (Grant
   #2017YFB1001801), National Natural Science Foundation (Grants #61690204,
   #61472174) of China. The authors would also like to thank the support of
   the Collaborative Innovation Center of Novel Software Technology and
   Industrialization, Jiangsu, China.
CR Amalfitano D, 2015, IEEE SOFTWARE, V32, P53, DOI 10.1109/MS.2014.55
   [Anonymous], 2014, PLDI
   [Anonymous], ASPLOS
   [Anonymous], INT J SOFTW INFORM
   Azim T., 2013, OOPSLA
   Baek Y.-M., 2016, ASE
   Banerjee A., 2014, FSE
   Bielik P., 2015, OOPSLA
   Bouajjani A., 2017, ESOP
   Herlihy M. P., 1987, POPL
   Hsiao Chun-Hung, 2014, PLDI
   Hu Y., 2016, ISSTA
   Jensen C. S., 2015, OOPSLA
   Jeon J., 2012, CSTR5013
   Li Q., 2016, APSEC
   Li QW, 2017, SCI CHINA INFORM SCI, V60, DOI 10.1007/s11432-015-1015-5
   Li X., 2014, APSEC
   Liu Y., 2016, FSE
   Liu Y., 2013, MIDDL DOCT S
   Liu Y., 2013, PERCOM
   Liu Y., 2017, INTERNETWARE
   Liu Y., 2014, ICSE
   Liu YP, 2014, IEEE T SOFTWARE ENG, V40, P911, DOI 10.1109/TSE.2014.2323982
   Machiry A., 2013, FSE
   Mahmood R., 2014, FSE
   Maiya P., 2017, ISSTA
   Maiya Pallavi, 2014, PLDI
   Meng Z., 2015, INTEMETWARE
   Nakajima S., 2015, COMPSAC
   Ozkan B. K., 2015, CAV
   Pradel M., 2012, PLDI
   Sen Koushik., 2008, PLDI
   Tang H., 2016, ASE
   Tarjan R., 1972, SICOMP
   Wang J., 2016, INTERNETWARE
   Wu X., 2016, APSEC
   Yue S., 2017, ICPC
NR 37
TC 8
Z9 10
U1 1
U2 6
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 1
PY 2018
VL 163
BP 1
EP 18
DI 10.1016/j.scico.2018.03.008
PG 18
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GN0MN
UT WOS:000438662800001
OA Bronze
DA 2024-07-18
ER

PT J
AU Dimovski, AS
   Brabrand, C
   Wasowski, A
AF Dimovski, Aleksandar S.
   Brabrand, Claus
   Wasowski, Andrzej
TI Variability abstractions for lifted analyses
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Program families; Static analysis; Abstract interpretation
ID MODEL CHECKING; SYSTEMS
AB Family-based (lifted) static analysis for "highly configurable programs" (program families) is capable of analyzing all variants at once without generating any of them explicitly. It takes as input only the common code base, which encodes all variants of a program family, and produces precise analysis results corresponding to all variants. However, the computational cost of the lifted analysis still depends inherently on the number of variants, which is in the worst case exponential in the number of statically configurable options (features). For a large number of features, the lifted analysis may be too costly or even infeasible. In this work, we introduce variability abstractions defined as Galois connections, which simplify variability away from program families based on #ifdef-s. Then, we use abstract interpretation as a formal method for the calculational-based derivation of abstracted lifted analyses, which are sound by construction.
   Our approach for abstracting lifted analysis is orthogonal to the particular program analysis chosen as a client. While a single program analysis operates on program states and depends on language-specific constructs, the lifted analysis assumes that a single program analysis already exists and lifts its results to all variants of the analyzed program family. Variability abstractions aim to reduce this variability-specific component of the lifted analysis, which handles variability and #ifdef-s. Furthermore, given the "orthogonality" of variability abstractions to the rest of the analysis (its language-specific component), we can implement abstractions as a preprocessor. In particular, given an abstraction we define a syntactic transformation, which translates any program family into an abstracted version of it, such that the analysis of the abstracted program family coincides with the corresponding abstracted analysis of the original program family. We have implemented the proposed approach, and we evaluate its practicality on three Java benchmarks. The evaluation shows that abstractions yield significant performance gains, especially for families with higher variability. (C) 2018 Elsevier B.V. All rights reserved.
C1 [Dimovski, Aleksandar S.] Mother Teresa Univ, 12 Udarna Brigada 2a, Skopje 1000, Macedonia.
   [Dimovski, Aleksandar S.; Brabrand, Claus; Wasowski, Andrzej] IT Univ Copenhagen, Rued Langgaards Vej 7, DK-2300 Copenhagen, Denmark.
C3 IT University Copenhagen
RP Dimovski, AS (corresponding author), Mother Teresa Univ, 12 Udarna Brigada 2a, Skopje 1000, Macedonia.; Dimovski, AS (corresponding author), IT Univ Copenhagen, Rued Langgaards Vej 7, DK-2300 Copenhagen, Denmark.
EM adim@itu.dk
RI Dimovski, Aleksandar/V-8590-2019; Dimovski, Aleksandar/ABC-8474-2021
OI Dimovski, Aleksandar/0000-0002-3601-2631; Wasowski,
   Andrzej/0000-0003-0532-2685
FU Danish Council for Independent Research under a Sapere Aude project,
   VARIETE [0602-02327B]
FX Partially supported by The Danish Council for Independent Research under
   a Sapere Aude project, VARIETE (grant no. 0602-02327B).
CR [Anonymous], COLT PROJ OP SOURC L
   Apel S, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P482, DOI 10.1109/ICSE.2013.6606594
   Batory D, 2005, LECT NOTES COMPUT SC, V3714, P7
   Berger T, 2014, INFORM SOFTWARE TECH, V56, P1520, DOI 10.1016/j.infsof.2014.05.005
   Berger T, 2013, IEEE T SOFTWARE ENG, V39, P1611, DOI 10.1109/TSE.2013.34
   Bodden E, 2013, ACM SIGPLAN NOTICES, V48, P355, DOI 10.1145/2499370.2491976
   Brabrand C, 2013, LECT NOTES COMPUT SC, V7800, P73, DOI 10.1007/978-3-642-36964-3_3
   Chen S, 2012, ACM SIGPLAN NOTICES, V47, P29, DOI 10.1145/2398856.2364535
   Choi J., 2015, 29 EUR C OBJ OR PROG, P2
   Classen Andreas, 2012, International Journal on Software Tools for Technology Transfer, V14, P589, DOI 10.1007/s10009-012-0234-1
   Classen A, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P321, DOI 10.1145/1985793.1985838
   Cousot P, 2002, ACM SIGPLAN NOTICES, V37, P178, DOI 10.1145/565816.503290
   COUSOT P, 1992, J LOGIC PROGRAM, V13, P103, DOI 10.1016/0743-1066(92)90030-7
   Cousot P., 1979, 6 ACM S PRINCIPLES P, P269, DOI DOI 10.1145/567752.567778
   Cousot P, 1999, NATO ASI SERIES F, P1
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Cousot P, 2007, LECT NOTES COMPUT SC, V4435, P272
   Cousot P, 2014, ACM SIGPLAN NOTICES, V49, P3, DOI 10.1145/2535838.2537850
   Dimovski Aleksandar S., 2016, Model-Checking Software. 23rd International Symposium, SPIN 2016, co-located with ETAPS 2016. Proceedings: LNCS 9641, P19, DOI 10.1007/978-3-319-32582-8_2
   Dimovski A. S., 2015, CORR, P1
   Dimovski A. S., 2015, LIPICS, V37, P247
   Dimovski AS, 2017, ELECTRON P THEOR COM, P1, DOI 10.4204/EPTCS.256.1
   Dimovski AS, 2017, LECT NOTES COMPUT SC, V10460, P249, DOI 10.1007/978-3-319-63121-9_13
   Dimovski AS, 2018, THEOR COMPUT SCI, V706, P35, DOI 10.1016/j.tcs.2017.09.029
   Dimovski A, 2017, INT J SOFTW TOOLS TE, V19, P585, DOI 10.1007/s10009-016-0425-2
   Dimovski AS, 2017, LECT NOTES COMPUT SC, V10202, P406, DOI 10.1007/978-3-662-54494-5_24
   Dimovski AS, 2016, LECT NOTES COMPUT SC, V9995, P217, DOI 10.1007/978-3-319-48989-6_14
   Dimovski AS, 2015, LECT NOTES COMPUT SC, V9232, P282, DOI 10.1007/978-3-319-23404-5_18
   Dimovski AS, 2014, THEOR COMPUT SCI, V560, P364, DOI 10.1016/j.tcs.2014.01.016
   Garrido A, 2003, 18TH IEEE INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING, PROCEEDINGS, P323, DOI 10.1109/ASE.2003.1240330
   Gazzillo P, 2012, ACM SIGPLAN NOTICES, V47, P323, DOI 10.1145/2345156.2254103
   Henry J, 2012, ELECTRON NOTES THEOR, V289, P15, DOI 10.1016/j.entcs.2012.11.003
   Nguyen HV, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P907, DOI 10.1145/2568225.2568300
   Iosif-Lazar A. F., 2015, 30 IEEE ACM INT C AU, P597
   Iosif-Lazar A.F., 2017, ART SCI ENG PROGRAM, V1
   Kästner C, 2012, ACM T SOFTW ENG METH, V21, DOI 10.1145/2211616.2211617
   Kästner C, 2011, OOPSLA 11: PROCEEDINGS OF THE 2011 ACM INTERNATIONAL CONFERENCE ON OBJECT ORIENTED PROGRAMMING SYSTEMS LANGUAGES AND APPLICATIONS, P805
   Kästner C, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P311, DOI 10.1145/1368088.1368131
   Kang K, 1990, TECH REP
   Kastner C., 2010, THESIS
   Midtgaard J, 2015, SCI COMPUT PROGRAM, V105, P145, DOI 10.1016/j.scico.2015.04.005
   Nielson F., 1999, Principles of Program Analysis
   Northrop L., 2001, SOFTWARE PRODUCT LIN
   Reps T., 1995, Conference Record of POPL'95: 22nd ACM SIGPLAN-SIGACT Symposium Principles of Programming Languages, P49, DOI 10.1145/199448.199462
   Thüm T, 2014, ACM COMPUT SURV, V47, DOI 10.1145/2580950
   Vallee-Rai R., 1999, Proceedings of the 1999 Conference of the Centre for Advanced Studies on Collaborative Research, CASCON'99, page, P13
   von Rhein A, 2016, J LOG ALGEBR METHODS, V85, P125, DOI 10.1016/j.jlamp.2015.06.007
   Winskel G., 1993, FDN COMPUTING SERIES
NR 48
TC 6
Z9 6
U1 0
U2 2
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUL 1
PY 2018
VL 159
BP 1
EP 27
DI 10.1016/j.scico.2017.12.012
PG 27
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GF2CV
UT WOS:000431746800001
OA Bronze
DA 2024-07-18
ER

PT J
AU Azmy, N
   Merz, S
   Weidenbach, C
AF Azmy, Noran
   Merz, Stephan
   Weidenbach, Christoph
TI A machine-checked correctness proof for Pastry
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Formal verification; Machine-checked proof; Distributed algorithm;
   Peer-to-peer protocol; Distributed hash table
AB Protocols implemented on overlay networks in a peer-to-peer (P2P) setting promise flexibility, performance, and scalability due to the possibility for nodes to join and leave the network while the protocol is running. These protocols must ensure that all nodes maintain a consistent view of the network, in the absence of centralized control, so that requests can be routed to the intended destination. This aspect represents an interesting target for formal verification. In previous work, Lu studied the Pastry algorithm for implementing a distributed hash table (DHT) over a P2P network and identified problems in published versions of the algorithm. He suggested a variant of the algorithm, together with a machine-checked proof in the TLA(+) Proof System (TIAPS), assuming the absence of node failures. We identify and correct problems in Lu's proof that are due to unchecked assumptions concerning modulus arithmetic and underlying data structures. We introduce higher-level abstractions into the specifications and proofs that are intended for improving the degree of automation achieved by the proof backends. These abstractions are instrumental for presenting the first complete formal proof. Finally, we formally prove that an even simpler version of Lu's algorithm, in which the final phase of the join protocol is omitted, is still correct, again assuming that nodes do not fail. (C) 2017 Elsevier B.V. All rights reserved.
C1 [Azmy, Noran; Weidenbach, Christoph] Max Planck Inst Informat, Saarbrucken, Germany.
   [Azmy, Noran; Merz, Stephan] Univ Lorraine, LORIA, Inria, CNRS, Nancy, France.
C3 Max Planck Society; Universite de Lorraine; Centre National de la
   Recherche Scientifique (CNRS); Inria
RP Merz, S (corresponding author), Univ Lorraine, LORIA, Inria, CNRS, Nancy, France.
EM stephan.merz@loria.fr
CR Alima LO, 2003, CCGRID 2003: 3RD IEEE/ACM INTERNATIONAL SYMPOSIUM ON CLUSTER COMPUTING AND THE GRID, PROCEEDINGS, P344, DOI 10.1109/CCGRID.2003.1199386
   [Anonymous], 2006, THESIS
   [Anonymous], 1994, Lecture Notes in Computer Science
   Azmy N, 2016, LECT NOTES COMPUT SC, V9675, P86, DOI 10.1007/978-3-319-33600-8_5
   Bakhshi R., 2007, ENTCS, V181, P49
   Barrett Clark, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P171, DOI 10.1007/978-3-642-22110-1_14
   Bonichon R, 2007, LECT NOTES ARTIF INT, V4790, P151, DOI 10.1007/978-3-540-75560-9_13
   Borgstrom J., 2004, Global Computing. IST/FET International Workshop, GC 2004. Revised Selected Papers (Lecture Notes in Computer Science Vol.3267), P250
   Bouton T, 2009, LECT NOTES ARTIF INT, V5663, P151, DOI 10.1007/978-3-642-02959-2_12
   Cousineau D., 2012, LECT NOTES COMPUTER, V7436, P147, DOI 10.1007/978-3-642-32759-914
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Fletcher GHL, 2005, LECT NOTES ARTIF INT, V3601, P14, DOI 10.1007/11574781_2
   Haeberlen A., 2005, TR05456 CS DEP RIC U
   Lamport L., 2002, SPECIFYING SYSTEMS
   Lu T., 2013, THESIS
   Lu TX, 2015, LECT NOTES COMPUT SC, V9409, P284, DOI 10.1007/978-3-319-25942-0_19
   Lu TX, 2011, LECT NOTES COMPUT SC, V6722, P244, DOI 10.1007/978-3-642-21461-5_16
   Maymounkov P, 2002, LECT NOTES COMPUT SC, V2429, P53
   Ratnasamy S, 2001, ACM SIGCOMM COMP COM, V31, P161, DOI 10.1145/964723.383072
   Rowstron A., 2001, Proceedings of the Middleware 2001, P329, DOI DOI 10.1007/3-540-45518-3_18
   Stoica I, 2001, ACM SIGCOMM COMP COM, V31, P149, DOI 10.1145/964723.383071
   Suda Martin, 2012, Automated Reasoning. Proceedings 6th International Joint Conference, IJCAR 2012, P537, DOI 10.1007/978-3-642-31365-3_42
   Weidenbach C, 2009, LECT NOTES ARTIF INT, V5663, P140, DOI 10.1007/978-3-642-02959-2_10
   Yu Y, 1999, LECT NOTES COMPUT SC, V1703, P54
   Zave P., 2015, COMPUTING RES REPOSI
   Zave P, 2012, ACM SIGCOMM COMP COM, V42, P50, DOI 10.1145/2185376.2185383
NR 26
TC 1
Z9 3
U1 0
U2 1
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 15
PY 2018
VL 158
BP 64
EP 80
DI 10.1016/j.scico.2017.08.003
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GE4CX
UT WOS:000431163000005
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Krings, S
   Leuschel, M
AF Krings, Sebastian
   Leuschel, Michael
TI Proof assisted bounded and unbounded symbolic model checking of software
   and system models
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE B-method; Event-B; Software model; Proof; Symbolic model checking
ID SMT SOLVERS; TLA(+)
AB We have implemented various symbolic model checking algorithms, such as BMC, k-Induction and IC3 for B, Event-B and other modeling languages. The high-level nature of software models accounts for complicated constraints arising in these symbolic analysis techniques. In this article we suggest using static information stemming from proof obligations to simplify occurring constraints. We show how to include proof information in the aforementioned algorithms. Using different benchmarks we compare explicit state to symbolic model checking as well as techniques with and without proof assistance. In particular for models with large branching factor, e.g., due to complicated data values being manipulated, the symbolic techniques fare much better than explicit state model checking. The inclusion of proof information results in further performance improvements. (C) 2017 Elsevier B.V. All rights reserved.
C1 [Krings, Sebastian; Leuschel, Michael] Univ Dusseldorf, Inst Informat, Univ Str 1, D-40225 Dusseldorf, Germany.
C3 Heinrich Heine University Dusseldorf
RP Krings, S (corresponding author), Univ Dusseldorf, Inst Informat, Univ Str 1, D-40225 Dusseldorf, Germany.
EM krings@cs.uni-duesseldorf.de; leuschel@cs.uni-duesseldorf.de
RI Krings, Sebastian/X-1199-2019
OI Krings, Sebastian/0000-0001-6712-9798
CR Abrial Jean-Raymond, 2012, Abstract State Machines, Alloy, B, VDM, and Z. Proceedings Third International Conference, ABZ 2012, P178, DOI 10.1007/978-3-642-30885-7_13
   Abrial Jean-Raymond, 2010, International Journal on Software Tools for Technology Transfer, V12, P447, DOI 10.1007/s10009-010-0145-y
   Abrial J.-R., 1996, B BOOK ASSIGNING PRO
   Abrial J R, 2010, Modeling in Event-B: system and softeng
   [Anonymous], 2012, COMPUTER AIDED VERIF, DOI DOI 10.1007/978-3-642-31424-7_55
   Arkoudas K., 2004, LNCS, V3051, P21
   Atelier B, 2009, USER REFERENCE MANUA
   Barnett M, 2006, LECT NOTES COMPUT SC, V4111, P364
   Bendisposto J, 2016, LECT NOTES COMPUT SC, V9681, P275, DOI 10.1007/978-3-319-33693-0_18
   Bendisposto J, 2009, LECT NOTES COMPUT SC, V5885, P504, DOI 10.1007/978-3-642-10373-5_26
   Biere A, 1999, LECT NOTES COMPUT SC, V1579, P193
   Biere A, 2009, FRONT ARTIF INTEL AP, V185, P457, DOI 10.3233/978-1-58603-929-5-457
   Birgmeier J, 2014, LECT NOTES COMPUT SC, V8559, P831, DOI 10.1007/978-3-319-08867-9_55
   Bobot F., 2011, BOOGIE 2011 1 INT WO, P53
   Boniol F., 2014, CCIS, P1, DOI [10.1007/978-3-319-07512-9_1, DOI 10.1007/978-3-319-07512-9]
   Borger E., 2003, ABSTRACT STATE MACHI
   Bradley AR, 2011, LECT NOTES COMPUT SC, V6538, P70, DOI 10.1007/978-3-642-18275-4_7
   BURCH JR, 1992, INFORM COMPUT, V98, P142, DOI 10.1016/0890-5401(92)90017-A
   Chaudhuri K., ARXIV08111914 CORR
   Chaudhuri K, 2010, LECT NOTES ARTIF INT, V6173, P142
   Cimatti Alessandro, 2012, Computer Aided Verification. Proceedings 24th International Conference, CAV 2012, P277, DOI 10.1007/978-3-642-31424-7_23
   Cimatti A., 2014, P 20 INT C TOOLS ALG, P46
   Clarke E, 2004, LECT NOTES COMPUT SC, V2988, P168, DOI 10.1007/978-3-540-24730-2_15
   Cousineau D., 2012, LECT NOTES COMPUTER, V7436, P147, DOI 10.1007/978-3-642-32759-914
   Cunha A, 2014, LECT NOTES COMPUT SC, V8477, P303, DOI 10.1007/978-3-662-43652-3_29
   Dalvandi M, 2015, LECT NOTES COMPUT SC, V9392, P308, DOI 10.1007/978-3-319-24644-4_21
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Déharbe D, 2014, SCI COMPUT PROGRAM, V94, P130, DOI 10.1016/j.scico.2014.04.012
   Een N., 2011, 2011 Formal Methods in Computer-Aided Design (FMCAD), P125
   Een N., 2003, ELECT NOTES THEORETI, V89, P543, DOI 10.1016/s1571-0661(05)82542-3
   Frias MF, 2007, ACM T SOFTW ENG METH, V17, DOI 10.1145/1314493.1314497
   Frias MF, 2005, PROC INT CONF SOFTW, P442
   Graf S, 1997, LECT NOTES COMPUT SC, V1254, P72
   Hallerstede S, 2011, THEOR PRACT LOG PROG, V11, P767, DOI 10.1017/S1471068411000299
   Hansen D., 2012, LNCS, V7321, P24, DOI 10.1007/978-3-642-30729-43
   Hansen D., 2014, ABZ 2014 CCIS, V433, P66, DOI DOI 10.1007/978-3-319-07512-9
   Hansen D, 2014, LECT NOTES COMPUT SC, V8477, P40, DOI 10.1007/978-3-662-43652-3_4
   Hassan Z, 2013, 2013 FORMAL METHODS IN COMPUTER-AIDED DESIGN (FMCAD), P157
   Iliasov A, 2016, LECT NOTES COMPUT SC, V9675, P275, DOI 10.1007/978-3-319-33600-8_21
   King D. J., 1996, ICL Systems Journal, V11, P106
   Krings S, 2016, LECT NOTES COMPUT SC, V9681, P361, DOI 10.1007/978-3-319-33693-0_23
   Krings S, 2016, LECT NOTES COMPUT SC, V9675, P135, DOI 10.1007/978-3-319-33600-8_8
   Krings S, 2015, LECT NOTES COMPUT SC, V9276, P199, DOI 10.1007/978-3-319-22969-0_15
   Lange T, 2015, PROCEEDINGS OF THE 15TH CONFERENCE ON FORMAL METHODS IN COMPUTER-AIDED DESIGN (FMCAD 2015), P97, DOI 10.1109/FMCAD.2015.7542258
   Lausdahl Kenneth, 2015, TECHNICAL REPORT SER, P1
   Lausdahl Kenneth., 2013, Integrated Formal Methods, volume 7940 of Lecture Notes in Computer Science, V7940, P46, DOI DOI 10.1007/978-3-642-38613-84
   Leuschel M, 2003, LECT NOTES COMPUT SC, V2805, P855
   Leuschel Michael, 2008, International Journal on Software Tools for Technology Transfer, V10, P185, DOI 10.1007/s10009-007-0063-9
   Leuschel M, 2016, LECT NOTES COMPUT SC, V9675, P119, DOI 10.1007/978-3-319-33600-8_7
   Ligot O., P AFADL
   Macedo N., ARXIV160303599 CORR
   Malik P, 2010, LECT NOTES COMPUT SC, V5977, P377, DOI 10.1007/978-3-642-11811-1_28
   Mashkoor A, 2016, LECT NOTES COMPUT SC, V9675, P329, DOI 10.1007/978-3-319-33600-8_29
   Matos PJ, 2009, LECT NOTES COMPUT SC, V5885, P485, DOI 10.1007/978-3-642-10373-5_25
   Mery D, 2013, ACM T EMBED COMPUT S, V12, DOI 10.1145/2406336.2406351
   Merz S, 2016, LECT NOTES COMPUT SC, V9675, P54, DOI 10.1007/978-3-319-33600-8_3
   Merz S, 2012, LECT NOTES COMPUT SC, V7180, P289, DOI 10.1007/978-3-642-28717-6_23
   Muller O., 1995, Proceedings of the Workshop on Tools and Algorithms for the Construction and Analysis of Systems, P1
   Plagge Daniel, 2012, FM 2012: Formal Methods. Proceedings of the 18th International Symposium, P372, DOI 10.1007/978-3-642-32759-9_31
   Plagge D, 2007, LECT NOTES COMPUT SC, V4591, P480
   Pnuelil A., 2001, Tools and Algorithms for the Construction and Analysis of Systems. 7th International Conference, TACAS 2001. Held as Part of the Joint European Conferences on Theory and Practice of Software, ETAPS 2001. Proceedings (Lecture Notes in Computer Science Vol.2031), P82
   Rustan K, 2010, LECT NOTES ARTIF INT, V6355, P348, DOI 10.1007/978-3-642-17511-4_20
   Saaltink M., 1997, ZUM '97: The Z Formal Specification Notation. 10th International Conference of Z Users Proceedings, P72, DOI 10.1007/BFb0027284
   Savary A, 2015, LECT NOTES COMPUT SC, V9276, P132, DOI 10.1007/978-3-319-22969-0_10
   Shankar N., 2000, CONCUR 2000 - Concurrency Theory. 11th International Conference. Proceedings (Lecture Notes in Computer Science Vol.1877), P1
   Sheeran M, 2000, LECT NOTES COMPUT SC, V1954, P108
   Silva R., 2012, FORMAL METHODS COMPO, P122
   Hoang TS, 2016, LECT NOTES COMPUT SC, V9675, P360, DOI 10.1007/978-3-319-33600-8_31
   Tortak E, 2007, LECT NOTES COMPUT SC, V4424, P632
   Vizel Y, 2014, LECT NOTES COMPUT SC, V8559, P260, DOI 10.1007/978-3-319-08867-9_17
   Witulski J., 2014, ELECT P THEORET COMP, V149, P2014
   Yu Y, 1999, LECT NOTES COMPUT SC, V1703, P54
NR 72
TC 8
Z9 8
U1 0
U2 0
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 15
PY 2018
VL 158
BP 41
EP 63
DI 10.1016/j.scico.2017.08.013
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GE4CX
UT WOS:000431163000004
OA hybrid
DA 2024-07-18
ER

PT J
AU Fehrenbach, S
   Cheney, J
AF Fehrenbach, Stefan
   Cheney, James
TI Language-integrated provenance
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Provenance; Language-integrated query
ID MODEL
AB Provenance, or information about the origin or derivation of data, is important for assessing the trustworthiness of data and identifying and correcting mistakes. Most prior implementations of data provenance have involved heavyweight modifications to database systems and little attention has been paid to how the provenance data can be used outside such a system. We present extensions to the Links programming language that build on its support for language-integrated query to support provenance queries by rewriting and normalizing monadic comprehensions and extending the type system to distinguish provenance metadata from normal data. The main contribution of this article is to show that the two most common forms of provenance can be implemented efficiently and used safely as a programming language feature with no changes to the database system. (C) 2017 Elsevier B.V. All rights reserved.
C1 [Fehrenbach, Stefan; Cheney, James] Univ Edinburgh, 10 Crichton St, Edinburgh EH8 9AB, Midlothian, Scotland.
C3 University of Edinburgh
RP Fehrenbach, S; Cheney, J (corresponding author), Univ Edinburgh, 10 Crichton St, Edinburgh EH8 9AB, Midlothian, Scotland.
EM stefan.fehrenbach@ed.ac.uk; jcheney@inf.ed.ac.uk
OI Cheney, James/0000-0002-1307-9286
FU EU [601043]; Google Research Award
FX We would like to James McKinna and several anonymous reviewers for
   comments and helpful suggestions on this work. This work was supported
   by EU FP7 project DIACHRON (grant No. 601043) and by a Google Research
   Award.
CR Amsterdamer Yael, 2011, PODS, P153, DOI DOI 10.1145/1989284.1989302
   [Anonymous], 2006, SIGMOD C
   Benjelloun O, 2008, VLDB J, V17, P243, DOI 10.1007/s00778-007-0080-z
   Bhagwat D, 2005, VLDB J, V14, P373, DOI 10.1007/s00778-005-0156-6
   Buneman P, 2001, LECT NOTES COMPUT SC, V1973, P316
   BUNEMAN P, 1995, THEOR COMPUT SCI, V149, P3, DOI 10.1016/0304-3975(95)00024-Q
   Buneman P, 2008, ACM T DATABASE SYST, V33, DOI 10.1145/1412331.1412340
   Cheney J, 2014, PEPM '14: PROCEEDINGS OF THE ACM SIGPLAN WORKSHOP ON PARTIAL EVALUATION AND PROGRAM MANIPULATION, P15, DOI 10.1145/2543728.2543738
   Cheney J, 2014, PPDP'14: PROCEEDINGS OF THE 16TH INTERNATIONAL SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING, P271, DOI 10.1145/2643135.2643143
   Cheney J, 2014, SIGMOD'14: PROCEEDINGS OF THE 2014 ACM SIGMOD INTERNATIONAL CONFERENCE ON MANAGEMENT OF DATA, P1027, DOI 10.1145/2588555.2612186
   Cheney J, 2011, MATH STRUCT COMP SCI, V21, P1301, DOI 10.1017/S0960129511000211
   Cheney J, 2007, FOUND TRENDS DATABAS, V1, P379, DOI 10.1561/1900000006
   Chlipala A, 2015, ACM SIGPLAN NOTICES, V50, P153, DOI [10.1145/2775051.2677004, 10.1145/2676726.2677004]
   Cooper E, 2007, LECT NOTES COMPUT SC, V4709, P266
   Cooper E, 2009, LECT NOTES COMPUT SC, V5708, P36, DOI 10.1007/978-3-642-03793-1_3
   Corcoran BJ, 2009, ACM SIGMOD/PODS 2009 CONFERENCE, P269
   Cui YW, 2000, ACM T DATABASE SYST, V25, P179, DOI 10.1145/357775.357777
   Fehrenbach S, 2016, PROCEEDINGS OF THE 18TH INTERNATIONAL SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING (PPDP 2016), P214, DOI 10.1145/2967973.2968604
   FELLEISEN M, 1992, THEOR COMPUT SCI, V103, P235, DOI 10.1016/0304-3975(92)90014-7
   Giorgidze George, 2011, Implementation and Application of Functional Languages. 22nd International Symposium, IFL 2010. Revised Selected Papers, P1, DOI 10.1007/978-3-642-24276-2_1
   Giorgidze G., 2013, DDFP, P5
   Glavic Boris, 2013, In Search of Elegance in the Theory and Practice of Computation. Essays Dedicated to Peter Buneman: LNCS 8000, P291, DOI 10.1007/978-3-642-41660-6_16
   Glavic B., 2010, THESIS
   Glavic B, 2009, PROC INT CONF DATA, P174, DOI 10.1109/ICDE.2009.15
   Glavic Boris., 2009, P 12 INT C EXTENDING, P982, DOI DOI 10.1145/1516360.1516472
   Green Todd J., 2007, PODS, DOI DOI 10.1145/1265530.1265535
   Grust T., 2013, DBPL 2013
   Grust T, 2010, PROC VLDB ENDOW, V3, P162, DOI 10.14778/1920841.1920866
   Karvounarakis G., 2010, SIGMOD, P951, DOI DOI 10.1145/1807167.1807269
   Lindley Sam, 2012, TLDI, P91, DOI DOI 10.1145/2103786.2103798
   Ohori A, 2011, ICFP 11 - PROCEEDINGS OF THE 2011 ACM SIGPLAN: INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P307
   Perera R, 2012, ACM SIGPLAN NOTICES, V47, P365, DOI 10.1145/2398856.2364579
   Pialorsi P., 2007, INTRO MICROSOFT LINQ
   Serrano M., 2009, COORDINATION
   Shar LK, 2013, COMPUTER, V46, P69, DOI 10.1109/MC.2012.283
   Suzuki K, 2016, PEPM'16: PROCEEDINGS OF THE 2016 ACM SIGPLAN WORKSHOP ON PARTIAL EVALUATION AND PROGRAM MANIPULATION, P37, DOI 10.1145/2847538.2847542
   Swamy N, 2009, ICFP'09: PROCEEDINGS OF THE 2009 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P329
   Syme D, 2006, ML WORKSH
   Ulrich A, 2015, SIGMOD'15: PROCEEDINGS OF THE 2015 ACM SIGMOD INTERNATIONAL CONFERENCE ON MANAGEMENT OF DATA, P1421, DOI 10.1145/2723372.2735359
   WANG YR, 1990, VERY LARGE DATA BASES, P519
   Wong L, 1996, J COMPUT SYST SCI, V52
NR 41
TC 5
Z9 6
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD APR 1
PY 2018
VL 155
BP 103
EP 145
DI 10.1016/j.scico.2017.08.009
PG 43
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA FZ1JJ
UT WOS:000427332600006
OA Green Submitted, Green Accepted, Bronze
DA 2024-07-18
ER

PT J
AU Cosentino, V
   Izquierdo, JLC
   Cabot, J
AF Cosentino, Valerio
   Canovas Izquierdo, Javier Luis
   Cabot, Jordi
TI GITANA: A software project inspector
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Software project analysis; Software analysis; Mining software
AB The development of software projects entails significant implementation and collaboration activities, typically supported by tools such as issue trackers, code review tools and Version Control Systems. However, these tools only provide a partial view of the project and often lack of advanced querying mechanisms, thus hampering the analysis of the status of the project and endangering the decision making process on the best way to drive the development process. We present GITANA, a software project inspector able to import the activity of the different support tools into a single relational database, thus providing a central point to perform all kinds of cross-cutting analysis on the software project data. Tool website: https://github.com/SOM-Research/gitana. (C) 2017 Elsevier B.V. All rights reserved.
C1 [Cosentino, Valerio; Canovas Izquierdo, Javier Luis; Cabot, Jordi] UOC, Barcelona, Spain.
   [Cabot, Jordi] ICREA, Barcelona, Spain.
C3 ICREA
RP Cosentino, V (corresponding author), UOC, Barcelona, Spain.
EM valcos@bitergia.com
RI Izquierdo, Javier Luis Canovas/E-8940-2016; Izquierdo, Javier Luis
   Canovas/JAO-0822-2023; Cabot, Jordi/P-7723-2015
OI Izquierdo, Javier Luis Canovas/0000-0002-2326-1700; Cabot,
   Jordi/0000-0003-2418-2489
CR Izquierdo JLC, 2017, 2017 ACM/IEEE 20TH INTERNATIONAL CONFERENCE ON MODEL DRIVEN ENGINEERING LANGUAGES AND SYSTEMS (MODELS 2017), P292, DOI 10.1109/MODELS.2017.19
   Cosentino V., 2017, ER, P15
   Cosentino V, 2017, IEEE ACCESS, V5, P7173, DOI 10.1109/ACCESS.2017.2682323
   Cosentino V, 2015, LECT NOTES COMPUT SC, V9381, P329, DOI 10.1007/978-3-319-25264-3_24
   Cosentino V, 2015, 2015 22ND INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER), P499, DOI 10.1109/SANER.2015.7081864
   Gousios G, 2013, IEEE WORK CONF MIN S, P233, DOI 10.1109/MSR.2013.6624034
   Kahani N, 2016, 19TH ACM/IEEE INTERNATIONAL CONFERENCE ON MODEL DRIVEN ENGINEERING LANGUAGES AND SYSTEMS (MODELS'16), P227, DOI 10.1145/2976767.2976773
   Wang Shaowei, 2013, SAC '13 Proceedings of the 28th Annual ACM Symposium on Applied Computing, P1019
NR 8
TC 6
Z9 7
U1 0
U2 1
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 15
PY 2018
VL 153
BP 30
EP 33
DI 10.1016/j.scico.2017.12.002
PG 4
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA FU7YI
UT WOS:000424068300002
OA hybrid
DA 2024-07-18
ER

PT J
AU Papoulias, N
   Denker, M
   Ducasse, S
   Fabresse, L
AF Papoulias, N.
   Denker, M.
   Ducasse, S.
   Fabresse, L.
TI End-user abstractions for meta-control: Reifying the reflectogram
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Reflection; Intercession; Reflectogram; Explicit control
ID REFLECTION
AB Reflective facilities in OO languages are used both for implementing language extensions (such as AOP frameworks) and for supporting new programming tools and methodologies (such as object-centric debugging and message-based profiling). Yet controlling the runtime behavior of these reflective facilities introduces several challenges, such as computational overhead, the possibility of meta-recursion and an unclean separation of concerns between base and meta-level. In this paper we present five dimensions of meta-level control from related literature that try to remedy these problems. These dimensions are namely: temporal and spatial control, placement control, level control and identity control. We then discuss how these dimensions interact with language semantics in class-based OO languages in terms of: scoping, inheritance and first-class entities. We argue that the reification of the descriptive notion of reflectogram can unify the control of meta-level execution in all these five dimensions while expressing properly the underlying language semantics. We present an extended model for the reification of the reflectogram based on our additional analysis and validate our approach through a new prototype implementation that relies on byte-code instrumentation. Finally, we illustrate our approach through a case study on runtime tracing. (C) 2017 Elsevier B.V. All rights reserved.
C1 [Papoulias, N.] IRD France Nord, IRD, UMI 209, UMMISCO, Bondy, France.
   [Papoulias, N.] Univ Paris 06, Sorbonne Univ UPMC, Paris, France.
   [Denker, M.; Ducasse, S.] Inria Lille Nord Europe, RMoD, Lille, France.
   [Fabresse, L.] Mines Telecom Inst, Douai, France.
C3 Cadi Ayyad University of Marrakech; Hanoi University of Science &
   Technology (HUST); Institut de Recherche pour le Developpement (IRD);
   Sorbonne Universite; University Cheikh Anta Diop Dakar; University of
   Yaounde I; Sorbonne Universite; IMT - Institut Mines-Telecom; Universite
   de Lille; IMT Nord Europe
RP Papoulias, N (corresponding author), IRD France Nord, IRD, UMI 209, UMMISCO, Bondy, France.; Papoulias, N (corresponding author), Univ Paris 06, Sorbonne Univ UPMC, Paris, France.
EM npapoylias@gmail.com
RI Fabresse, Luc/AAH-9286-2020
OI Fabresse, Luc/0000-0002-2223-7258; Papoulias, Nick/0000-0002-3649-1097
FU European Smalltalk Users Group
FX The authors would like to thank Prof. Eric Tanter for his valuable
   feedback - on the previous version of this work regarding related
   literature in the context of AOP and for helping us strengthen our
   presentation. We will also like to thank our anonymous reviewers for
   their thorough work and constructive suggestions. This work was
   partially sponsored by the European Smalltalk Users Group:
   http://esug.org.
CR [Anonymous], 1982, THESIS
   Bergel A, 2011, LECT NOTES COMPUT SC, V6813, P533, DOI 10.1007/978-3-642-22655-7_25
   Bracha G, 2004, ACM SIGPLAN NOTICES, V39, P331, DOI 10.1145/1035292.1029004
   Brant J., 1998, ECOOP'98 - Object-Oriented Programming. 12th European Conference. Proceedings, P396, DOI 10.1007/BFb0054101
   Cazzola W, 2003, DISTRIB COMPUT, V16, P287, DOI 10.1007/s00446-003-0094-8
   Cazzola W, 2000, LECT NOTES COMPUT SC, V1964, P1
   Chiba S., 1996, Object Technologies for Advanced Software. Second JSSST International Symposium ISOTAS'96. Proceedings, P157
   Denker M, 2008, LECT NOTES BUS INF P, V11, P218, DOI 10.1007/978-3-540-69824-1_13
   Dittrich K., 1995, LECT NOTES COMPUTER, V985, P1
   FERBER J, 1989, SIGPLAN NOTICES, V24, P317, DOI 10.1145/74878.74910
   Gassanenko M. L., 1998, EUROFORTH 98
   HARRISON W, 1993, SIGPLAN NOTICES, V28, P411, DOI 10.1145/167962.165932
   Hirschfeld R, 2008, J OBJECT TECHNOL, V7, P125, DOI 10.5381/jot.2008.7.3.a4
   Ingalls D., 1997, SIGPLAN Notices, V32, P318, DOI 10.1145/263700.263754
   Kiczales G., 2001, ECOOP 2001 - Object-Oriented Programming. 15th European Conference. Proceedings (Lecture Notes in Computer Science Vol.2072), P327
   Kiczales G., 1991, The Art of the Metaobject Protocol
   MAES P, 1987, SIGPLAN NOTICES, V22, P147
   MAES P, 1988, META LEVEL ARCHITECT, P21
   Marr S, 2015, ACM SIGPLAN NOTICES, V50, P545, DOI [10.1145/2737924.2737963, 10.1145/2813885.2737963]
   Miranda E., 2008, SPEEDING CROQUET SQU
   Mostinckx S, 2009, SOFTWARE PRACT EXPER, V39, P661, DOI 10.1002/spe.909
   Papoulias N, 2015, 30TH ANNUAL ACM SYMPOSIUM ON APPLIED COMPUTING, VOLS I AND II, P1978, DOI 10.1145/2695664.2695883
   Papoulias  N., 2013, THESIS
   Redmond B, 2002, LECT NOTES COMPUT SC, V2374, P205
   Redmond B., 2000, P EUR C OBJ OR PROGR
   Ressia J., 2012, THESIS
   Röthlisberger D, 2008, COMPUT LANG SYST STR, V34, P46, DOI 10.1016/j.cl.2007.05.001
   Röthlisberger D, 2007, LECT NOTES COMPUT SC, V4406, P47
   Tanter É, 2003, ACM SIGPLAN NOTICES, V38, P27, DOI 10.1145/949343.949309
   TANTER E, 2005, LNCS, V3676
   Tanter É, 2014, SCI COMPUT PROGRAM, V80, P311, DOI 10.1016/j.scico.2013.09.002
   Tanter Eric, 2010, P 9 ACM INT C ASP OR, P37, DOI DOI 10.1145/1739230.1739236
   Toledo R., 2010, P 9 ACM INT C ASPECT, P13
   Wand M., 1988, METALEVEL ARCHITECTU, P111
   Zhuang Y., 2013, AOSD 13, P197, DOI 10.1145/2451436.2451460
NR 35
TC 1
Z9 1
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 15
PY 2017
VL 140
BP 2
EP 16
DI 10.1016/j.scico.2016.12.002
PG 15
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA ET4EM
UT WOS:000400232100002
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Müller, R
   Stahl, C
   Vogler, W
AF Mueller, Richard
   Stahl, Christian
   Vogler, Walter
TI Deciding conformance for bounded responsiveness
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Petri nets; Open nets; Conformance; Theory of computation
ID OPERATING GUIDELINES; SERVICES
AB We study open systems modeled as Petri nets with an interface for asynchronous communication with other open systems. As a minimal requirement for successful communication, we investigate bounded responsiveness, which guarantees that an open system and its environment always have the possibility to mutually terminate or to communicate, while the number of pending messages never exceeds a previously known bound. Bounded responsiveness conformance describes when one open system can be safely replaced by another open system. We present a trace-based characterization for conformance and show decidability. We further develop a finite characterization of the infinite set of all conforming open systems to a given open system. We implement the decision algorithm for conformance and evaluate it using industrial-sized open systems. (C) 2016 Elsevier B.V. All rights reserved.
C1 [Mueller, Richard] Humboldt Univ, Inst Informat, Berlin, Germany.
   [Mueller, Richard; Stahl, Christian] Eindhoven Univ Technol, Dept Math & Comp Sci, NL-5600 MB Eindhoven, Netherlands.
   [Vogler, Walter] Univ Augsburg, Inst Informat, Augsburg, Germany.
C3 Humboldt University of Berlin; Eindhoven University of Technology;
   University of Augsburg
RP Müller, R (corresponding author), Eindhoven Univ Technol, Dept Math & Comp Sci, NL-5600 MB Eindhoven, Netherlands.
EM richard.mueller@informatik.hu-berlin.de; c.stahl@tue.nl;
   vogler@informatik.uni-augsburg.de
OI Muller, Richard/0000-0002-5045-2887
CR Acciai L, 2008, THEOR COMPUT SCI, V409, P59, DOI 10.1016/j.tcs.2008.08.017
   Akyildiz IF, 2002, COMPUT NETW, V38, P393, DOI 10.1016/S1389-1286(01)00302-4
   [Anonymous], LECT NOTES COMPUT SC
   Bravetti M, 2008, FUND INFORM, V89, P451
   Brinksma E., 1988, THEORY DERIVATION TE
   Castagna G, 2009, PPDP'09: PROCEEDINGS OF THE 11TH INTERNATIONAL ACM SIGPLAN SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING, P219, DOI 10.1145/1599410.1599437
   Charette RN, 2009, IEEE SPECTRUM, V46, P7, DOI 10.1109/MSPEC.2009.5340234
   Chinosi M, 2012, COMPUT STAND INTER, V34, P124, DOI 10.1016/j.csi.2011.06.002
   de Alfaro L., 2001, Software Engineering Notes, V26, P109, DOI 10.1145/503271.503226
   Desai A, 2013, ACM SIGPLAN NOTICES, V48, P321, DOI 10.1145/2499370.2462184
   Dewender J., 2014, DELAIN TOOL
   Dewender J., 2015, CHLOE TOOL
   Dill David L., 1989, THESIS
   FLOYD RW, 1962, COMMUN ACM, V5, P345, DOI 10.1145/367766.368168
   Gamboni M, 2010, LECT NOTES COMPUT SC, V6084, P135, DOI 10.1007/978-3-642-15640-3_10
   Grimson J, 2000, COMMUN ACM, V43, P49
   Herrero-Pérez D, 2010, IEEE T IND INFORM, V6, P166, DOI 10.1109/TII.2009.2038691
   Jordan Diane., 2007, Web services business process execution language version 2.0. OASIS standard, V11, P11
   Kobayashi N, 2002, INFORM COMPUT, V177, P122, DOI 10.1006/inco.2002.3171
   Lee KW, 2005, COMPUT NETW, V49, P84, DOI 10.1016/j.comnet.2005.04.006
   Lohmann N., 2011, FUNDAM INFORM, V107, P1
   Lohmann N, 2008, LECT NOTES COMPUT SC, V4937, P77
   Lohmann N, 2008, DATA KNOWL ENG, V64, P38, DOI 10.1016/j.datak.2007.06.006
   Lohmann N, 2007, LECT NOTES COMPUT SC, V4546, P321
   Lohmann N, 2009, LECT NOTES COMPUT SC, V5460, P46
   Lynch N. A., 1996, DISTRIBUTED ALGORITH
   Malik R, 2006, INT J FOUND COMPUT S, V17, P797, DOI 10.1142/S012905410600411X
   Mooij AJ, 2011, LECT NOTES COMPUT SC, V6551, P116, DOI 10.1007/978-3-642-19589-1_8
   Mooij AJ, 2010, J LOGIC ALGEBR PROGR, V79, P233, DOI 10.1016/j.jlap.2009.12.001
   Mooij AJ, 2009, LECT NOTES COMPUT SC, V5387, P207, DOI 10.1007/978-3-642-01364-5_13
   Müller R, 2014, INFORM PROCESS LETT, V114, P663, DOI 10.1016/j.ipl.2014.07.010
   Müller R, 2013, LECT NOTES COMPUT SC, V8274, P358, DOI 10.1007/978-3-642-45005-1_25
   Muller R., 2013, LNCS, V7843, P49
   Muller R., 2010, CEUR WORKSHOP P, V643, P130
   Padovani L., 2013, PLACES 2013, P2
   Papazoglou M., 2007, Web Services: Principles and Technology
   Parnjai J., 2013, MAXIS TOOL
   Parnjai J., 2013, THESIS
   Reed JN, 2007, FORM ASP COMPUT, V19, P303, DOI 10.1007/s00165-007-0032-9
   Sipser M., 2006, INTRO THEORY COMPUTA, V2
   Stahl C, 2012, ACTA INFORM, V49, P69, DOI 10.1007/s00236-012-0151-5
   Stahl C, 2009, LECT NOTES COMPUT SC, V5460, P172
   van der Aalst WMP, 2008, LECT NOTES COMPUT SC, V4937, P139
   van der Aalst WMP, 2010, COMPUT J, V53, P90, DOI 10.1093/comjnl/bxn064
   van Glabbeek RJ, 2010, IFIP ADV INF COMM TE, V323, P32
   van Hee KM, 2011, LECT NOTES COMPUT SC, V6551, P131, DOI 10.1007/978-3-642-19589-1_9
   Vogler W., 2012, 2012 12th International Conference on Application of Concurrency to System Design (ACSD), P42, DOI 10.1109/ACSD.2012.10
   Vogler W., 2013, ADV SERVICE ORIENTED, P129
   Vogler W, 2014, ACTA INFORM, V51, P499, DOI 10.1007/s00236-014-0205-y
   Wolf K, 2009, LECT NOTES COMPUT SC, V5460, P152
NR 50
TC 0
Z9 0
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAY 1
PY 2017
VL 138
BP 1
EP 25
DI 10.1016/j.scico.2016.11.003
PG 25
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA EO8WZ
UT WOS:000396972500001
OA hybrid
DA 2024-07-18
ER

PT J
AU Dausend, M
   Raschke, A
AF Dausend, Marcel
   Raschke, Alexander
TI Towards a comprehensive extension of abstract state machines for
   aspect-oriented specification
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Aspect-orientation; Abstract state machines; Semantics
ID SEMANTICS
AB With the paradigm of aspect-orientation, a developer is able to separate the code of so-called cross-cutting concerns from the rest of the program's logic. This possibility is useful for formal specifications, too. For example, security aspects can be separated from the rest of the specification. Those aspect-oriented specifications often can be more easily reused than extensions that are implemented directly into an existing specification. Another use case is the extension of a specification with new functionality or features. Although this would be possible with refinement too, with aspect-orientation it is not necessary to augment the original specification with "extension points" that can be used for refinement. This paper describes the implementation of the aspect-oriented approach in Abstract State Machines. We introduce an aspect language with its syntax and formal semantics. It allows for specifying pointcuts where an original specification is augmented according to an aspect specification. Besides the general overview of this language extension, some ASM specific features of the realization are depicted in detail. The applicability of aspect oriented specification in the context of ASM is demonstrated by means of examples, e.g. implementing a fading aspect into the light control system specification of a former ASM case study. Finally, the paper gives a brief overview about the developed tool that supports the writing of aspect-oriented ASMs. (C) 2016 Elsevier B.V. All rights reserved.
C1 [Dausend, Marcel; Raschke, Alexander] Univ Ulm, Inst Software Engn & Compiler Construct, Ulm, Germany.
C3 Ulm University
RP Dausend, M; Raschke, A (corresponding author), Univ Ulm, Inst Software Engn & Compiler Construct, Ulm, Germany.
EM marcel.dausend@uni-ulm.de; alexander.raschke@uni-ulm.de
CR Agostinho S, 2008, ICEIS 2008: PROCEEDINGS OF THE TENTH INTERNATIONAL CONFERENCE ON ENTERPRISE INFORMATION SYSTEMS, VOL ISAS-2, P129
   [Anonymous], 1997, A Discipline of Programming
   [Anonymous], UN MOD LANG UML SUP
   Avgustinov P, 2007, ACM SIGPLAN NOTICES, V42, P11, DOI 10.1145/1190215.1190221
   Blair L., 1998, TECH REP
   Borger E., 2000, J UNIVERS COMPUT SCI, V6, P597
   Borger E., 2003, ABSTRACT STATE MACHI
   Canditt S., 2002, P 1 AOSD WORKSH ASP, P21
   Clifton C, 2006, SCI COMPUT PROGRAM, V63, P321, DOI 10.1016/j.scico.2006.02.009
   Dausend M., 2011, 201107 ULM U
   Dausend M, 2014, LECT NOTES COMPUT SC, V8477, P174, DOI 10.1007/978-3-662-43652-3_15
   de Boer FS, 2014, LECT NOTES COMPUT SC, V8400, P1, DOI 10.1007/978-3-642-55099-7_1
   Farahbod R., 2009, THESIS
   Gasiunas Vaidas, 2011, P 10 INT C ASP OR SO, P227, DOI 10.1145/1960275.1960303
   Kästner C, 2007, SPLC 2007: 11TH INTERNATIONAL SOFTWARE PRODUCT LINE CONFERENCE, PROCEEDINGS, P223, DOI 10.1109/SPLINE.2007.12
   Kiczales G, 1997, LECT NOTES COMPUT SC, V1241, P220, DOI 10.1007/BFb0053381
   Kohlmeyer J., 2009, THESIS
   Laddad R., 2010, ASPECTJ ACTION ENTER
   Lippert M., 2000, Proceedings of the 2000 International Conference on Software Engineering. ICSE 2000 the New Millennium, P418, DOI 10.1109/ICSE.2000.870432
   Mendhekar A., 1997, TECH REP
   Papapetrou O., 2004, Proceedings of the 2004 ACM Symposium on Applied Computing, P1554
   Queins S., 2000, J UNIVERS COMPUT SCI, V6, P586
   Sarstedt S, 2005, THESIS
   Wand M, 2004, ACM T PROGR LANG SYS, V26, P890, DOI 10.1145/1018203.1018208
NR 24
TC 0
Z9 1
U1 0
U2 1
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 1
PY 2016
VL 131
BP 22
EP 41
DI 10.1016/j.scico.2016.04.007
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA EB8FQ
UT WOS:000387627300003
OA hybrid
DA 2024-07-18
ER

PT J
AU de Graaf, KA
   Liang, P
   Tang, A
   van Vliet, H
AF de Graaf, K. A.
   Liang, P.
   Tang, A.
   van Vliet, H.
TI How organisation of architecture documentation affects architectural
   knowledge retrieval
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Software architecture documentation; Architectural knowledge retrieval;
   Software ontologies; Semantic wiki; Ontology-based documentation
ID SOFTWARE; ONTOLOGY; SUPPORT
AB A common approach to software architecture documentation in industry projects is the use of file-based documents. This approach offers a single-dimensional arrangement of the architectural knowledge. Knowledge retrieval from file-based architecture documentation is efficient if the organisation of knowledge supports the needs of the readers; otherwise it can be difficult. In this paper, we compare the organisation and retrieval of architectural knowledge in a file-based documentation approach and an ontology-based documentation approach. The ontology-based approach offers a multi-dimensional organisation of architectural knowledge by means of a software ontology and semantic wiki, whereas file-based documentation typically uses hierarchical organisation by directory structure and table of content. We conducted case studies in two companies to study the efficiency and effectiveness of retrieving architectural knowledge from the different organisations of knowledge. We found that the use of better knowledge organisation correlates with the efficiency and effectiveness of AK retrieval. Professionals who used the knowledge organisation found this beneficial. (C) 2015 Elsevier B.V. All rights reserved.
C1 [de Graaf, K. A.; van Vliet, H.] Vrije Univ Amsterdam, Amsterdam, Netherlands.
   [Liang, P.] Wuhan Univ, Wuhan 430072, Peoples R China.
   [Tang, A.] Swinburne Univ Technol, Melbourne, Vic, Australia.
C3 Vrije Universiteit Amsterdam; Wuhan University; Swinburne University of
   Technology
RP Liang, P (corresponding author), Wuhan Univ, Wuhan 430072, Peoples R China.
EM kadegraaf@gmail.com; liangp@whu.edu.cn; atang@swin.edu.au; hans@cs.vu.nl
RI peng, liang/HKE-0294-2023; Tang, Antony/C-2459-2009
OI Liang, Peng/0000-0002-2056-5346; Tang, Antony/0000-0002-3574-3977; de
   Graaf, Klaas Andries/0000-0003-3385-9906
FU Dutch "Regeling Kenniswerkers (KWR)" [KWR09164]; Natural Science
   Foundation of China (NSFC) [61170025]
FX The authors wish to thank Rene Laan, Wim Couwenberg, Pieter Verduin,
   Amar Kalloe, and the other good folks at Oce R&D for their support,
   interest to participate in this research, and excellent insights. Also
   thanks to Jonathan Rebel, Ruben Hartog, and Berend van Veenendaal for
   adapting OntoWiki. This research has been partially sponsored by the
   Dutch "Regeling Kenniswerkers (KWR)", project KWR09164, "Stephenson:
   Architecture knowledge sharing practices in software product lines for
   print systems" and by the Natural Science Foundation of China (NSFC)
   project No. 61170025 "KeSRAD: Knowledge-enabled Software Requirements to
   Architecture Documentation".
CR Akerman A, 2006, IBM SYST J, V45, P813, DOI 10.1147/sj.454.0813
   Diaz-Pace JA, 2013, LECT NOTES COMPUT SC, V8216, P104, DOI 10.1007/978-3-642-41366-7_9
   [Anonymous], 2011, ISO/IEC TR 29110-5-1-2, DOI DOI 10.1109/IEEESTD.2011.6129467
   [Anonymous], 2008, A Semantic Web Primer
   [Anonymous], 2011, HT 11 P 22 ACM C HYP, DOI DOI 10.1145/1995966.1995986
   [Anonymous], 2008, GUIDE ADV EMPIRICAL, DOI [10.1007/978-1-84800-044-5_14, DOI 10.1007/978-1-84800-044-5_14]
   Auer S, 2006, LECT NOTES COMPUT SC, V4273, P736
   Babar Muhammad Ali, 2007, Second Workshop on Sharing and Reusing architectural Knowledge Architecture, Rationale, and Design Intent (SHARK/ADI'07: ICSE Workshops 2007), DOI 10.1109/SHARK-ADI.2007.1
   Bass L., 1997, SOFTWARE ARCHITECTUR
   Bass L, 2011, IFIP ADV INF COMM TE, V365, P50
   Buffa M, 2008, J WEB SEMANT, V6, P84, DOI 10.1016/j.websem.2007.11.003
   Burge JE, 2008, J SYST SOFTWARE, V81, P395, DOI 10.1016/j.jss.2007.05.004
   Capilla R., 2006, SOFTW ENG NOTES, V31
   CONKLIN J, 1987, COMPUTER, V20, P17, DOI 10.1109/MC.1987.1663693
   de Boer RC, 2008, J SYST SOFTWARE, V81, P1456, DOI 10.1016/j.jss.2007.12.815
   de Graaf KA, 2014, COMPUT IND, V65, P1053, DOI 10.1016/j.compind.2014.04.006
   de Graaf K. A., 2012, 2012 Joint Working IEEE/IFIP Conference on Software Architecture (WICSA 2012) & European Conference on Software Architecture (ECSA 2012), P121, DOI 10.1109/WICSA-ECSA.212.20
   de Graaf K.A., 2011, WORKSH EXPL SEM ANN, P5
   De Graaf KlaasAndries., 2014, P 2014 ACM S DOCUMEN, P189
   DILLON A, 1990, HUMAN-COMPUTER INTERACTION : INTERACT 90, P587
   Garlan David, 2010, SEI Series in Software Engineering, Vsecond
   Garousi G, 2015, INFORM SOFTWARE TECH, V57, P664, DOI 10.1016/j.infsof.2014.08.003
   GIRILL TR, 1992, INT J MAN MACH STUD, V36, P571, DOI 10.1016/0020-7373(92)90097-5
   GRUBER TR, 1993, KNOWL ACQUIS, V5, P199, DOI 10.1006/knac.1993.1008
   Guo J, 2013, S VIS LANG HUM CEN C, P42, DOI 10.1109/RE.2013.6636704
   Happel H.J., 2008, PRIMIUM, V328
   Hoenderboom B., 2009, TECHNICAL REPORT
   Hofmeister C., 2000, APPL SOFTWARE ARCHIT
   Jansen A, 2006, 5TH WORKING IEEE/IFIP CONFERENCE ON SOFTWARE ARCHITECTURE, PROCEEDINGS, P109
   Jansen A, 2009, J SYST SOFTWARE, V82, P1232, DOI 10.1016/j.jss.2009.04.052
   Javed Muhammad Atif, 2014, 2014 IEEE/IFIP Conference on Software Architecture (WICSA), P215, DOI 10.1109/WICSA.2014.43
   Jedlitschka A., 2008, Guide to advanced empirical software engineering, P201, DOI DOI 10.1007/978-1-84800-044-5_8
   Koning H., 2006, Automated Software Engineering, V13, P201, DOI 10.1007/s10515-006-7736-6
   Kruchten P., 2004, GRON WORKSH SOFTW VA, P54
   Kruchten P, 2009, SOFTWARE ARCHITECTURE KNOWLEDGE MANAGEMENT: THEORY AND PRACTICE, P39, DOI 10.1007/978-3-642-02374-3_3
   Kunze J., 2007, 5013 RFC INT ENG TAS
   Kyaruzi J. K., 1999, 14th IEEE International Conference on Automated Software Engineering, P235, DOI 10.1109/ASE.1999.802279
   Lago P., 2006, ACM SIGSOFT SOFTWARE, V31, P32
   Lenin Babu T., 2007, Second Workshop on Sharing and Reusing architectural Knowledge Architecture, Rationale, and Design Intent (SHARK/ADI'07: ICSE Workshops 2007), DOI 10.1109/SHARK-ADI.2007.5
   Lethbridge TC, 2003, IEEE SOFTWARE, V20, P35, DOI 10.1109/MS.2003.1241364
   López C, 2012, SCI COMPUT PROGRAM, V77, P66, DOI 10.1016/j.scico.2010.06.009
   López C, 2009, J SYST SOFTWARE, V82, P1198, DOI 10.1016/j.jss.2009.03.085
   Nanard J., 1993, Database and Expert Systems Applications. 4th International Conference, DEXA '93 Proceedings, P721
   Parnas DL, 2011, FUTURE OF SOFTWARE ENGINEERING, P125, DOI 10.1007/978-3-642-15187-3_8
   PARNAS DL, 1985, LECT NOTES COMPUT SC, V186, P80
   Rost Dominik, 2013, Software Architecture. 7th European Conference, ECSA 2013. Proceedings: LNCS 7584, P72, DOI 10.1007/978-3-642-39031-9_7
   Rozanski N., 2005, SOFTWARE SYSTEMS ARC
   Schwittek W, 2010, LECT NOTES COMPUT SC, V6285, P457, DOI 10.1007/978-3-642-15114-9_41
   Shahin M., 2011, P 5 EUR C SOFTW ARCH
   Shahin M, 2009, 2009 JOINT WORKING IEEE/IFIP CONFERENCE ON SOFTWARE ARCHITECTURE AND EUROPEAN CONFERENCE ON SOFTWARE ARCHITECTURE, P293, DOI 10.1109/WICSA.2009.5290823
   Singhal A., 2001, IEEE DATA ENG B, V24, P35
   SOLIS C, 2009, WORKSH WIK SOFTW ENG, P36
   Su MT, 2009, IEEE INT CONF AUTOM, P657, DOI 10.1109/ASE.2009.26
   Tamburri D.A., 2010, THESIS VU U AMSTERDA
   Tang A, 2007, J SYST SOFTWARE, V80, P918, DOI 10.1016/j.jss.2006.08.040
   Tang A, 2011, RELATING SOFTWARE REQUIREMENTS AND ARCHITECTURES, P35, DOI 10.1007/978-3-642-21001-3_4
   Tang A, 2011, 2011 9TH WORKING IEEE/IFIP CONFERENCE ON SOFTWARE ARCHITECTURE (WICSA), P252, DOI 10.1109/WICSA.2011.40
   Tarr P., 1999, Proceedings of the 1999 International Conference on Software Engineering (IEEE Cat. No.99CB37002), P107, DOI 10.1109/ICSE.1999.841000
   Thuring M., 1991, Third ACM Conference on Hypertext Proceedings, P161, DOI 10.1145/122974.122991
   van der Ven J.S., 2006, INT C QUAL SOFTW ARC
   van Heesch U, 2012, J SYST SOFTWARE, V85, P795, DOI 10.1016/j.jss.2011.10.017
   van Rijsbergen C. J, 1979, Information Retrieval, V2nd
   WANG W, 1995, INT J HUM-COMPUT ST, V43, P419, DOI 10.1006/ijhc.1995.1052
   Welty C. A., 1999, 14th IEEE International Conference on Automated Software Engineering, P259, DOI 10.1109/ASE.1999.802304
   Zhi JJ, 2015, J SYST SOFTWARE, V99, P175, DOI 10.1016/j.jss.2014.09.042
NR 65
TC 9
Z9 10
U1 0
U2 19
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 1
PY 2016
VL 121
SI SI
BP 75
EP 99
DI 10.1016/j.scico.2015.10.014
PG 25
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DH6YU
UT WOS:000372938800006
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Boulytchev, D
AF Boulytchev, Dmitry
TI Combinators and type-driven transformers in Objective Caml
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Compilers; Functional programming; Datatype-generic programming;
   Combinators; Modularization and code reuse
AB We describe an implementation of LDTA 2011 Tool Challenge tasks in Objective Caml language. Instead of using some dedicated domain-specific tools we utilize typical functional programming machinery such as polymorphic functions, monads and combinators; in addition we extensively use an idiom of type-driven transformers, which can be considered as a form of datatype-generic programming. Our implementation provides a good example of utilization of Objective Caml specific features such as open and implicitly defined types. As a result we provide a highly modular implementation built up of separately compiled components combined in a type-safe manner. (C) 2015 Elsevier B.V. All rights reserved.
C1 [Boulytchev, Dmitry] St Petersburg State Univ, St Petersburg 198504, Russia.
C3 Saint Petersburg State University
RP Boulytchev, D (corresponding author), St Petersburg State Univ, Univ Ski Pr, St Petersburg 198504, Russia.
EM dboulytchev@math.spbu.ru
RI Boulytchev, Dmitry Yu./JFJ-2621-2023; Boulytchev, Dmitry Yu./N-9365-2015
OI Boulytchev, Dmitry Yu./0000-0001-8363-7143
FU Russian Foundation for Basic Research [13-01-00506]
FX The research was supported by Russian Foundation for Basic Research
   grant No. 13-01-00506.
CR [Anonymous], TECHNICAL REPORT
   Doligez D., OCAML SYSTEM RELEASE
   Erik Meijer R.P., 1991, 5 ACM C FUNCT PROGR, P124
   Garrigue J., 2000, WORKSH FDN SOFTW ENG
   Garrigue Jacques, 1998, ML WORKSHOP
   Gibbons J, 2007, LECT NOTES COMPUT SC, V4719, P1
   Hughes J., 1995, Advanced Functional Programming. First International Spring School on Advanced Functional Programming Techniques. Tutorial Text, P53
   JOHNSSON T, 1985, LECT NOTES COMPUT SC, V201, P190
   Kagawa K., 2006, ACM SIGPLAN WORKSH H, P37
   Kiselyov O., POLYMORPHIC VARIANTS
   Rémy D, 2002, LECT NOTES COMPUT SC, V2395, P413
   Wadler P., 1995, Advanced Functional Programming. First International Spring School on Advanced Functional Programming Techniques. Tutorial Text, P24
   Wadler P., 2003, S HON R BIRDS 60 BIR
   Wadler P., EXPRESSION PROBLEM D
   Yallop J, 2007, ML'07: PROCEEDINGS OF THE 2007 WORKSHOP ON ML, P83
NR 15
TC 3
Z9 3
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 15
PY 2015
VL 114
BP 57
EP 73
DI 10.1016/j.scico.2015.07.008
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CZ5DX
UT WOS:000367123800006
DA 2024-07-18
ER

PT J
AU Kaminski, T
   Van Wyk, E
AF Kaminski, Ted
   Van Wyk, Eric
TI A modular specification of Oberon0 using the Silver attribute grammar
   system
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Attribute grammars; Extensible languages; Language composition; Oberon
AB This paper describes an implementation of Oberon0 using the Silver attribute grammar system for the Tool Challenge at the 2011 International Workshop on Language Descriptions, Tools, and Applications. Silver was developed to study how independently-developed language extension specifications can be imported into a host language specification to define a new custom extended language. Thus it contains many features useful in modular language specification, such as forwarding, higher-order attributes, reference/remote attributes, and a simplified form of collection attributes. These are discussed in the context of the Oberon0 specification presented here. (C) 2015 Elsevier B.V. All rights reserved.
C1 [Kaminski, Ted; Van Wyk, Eric] Univ Minnesota, Dept Comp Sci & Engn, Minneapolis, MN 55455 USA.
C3 University of Minnesota System; University of Minnesota Twin Cities
RP Van Wyk, E (corresponding author), Univ Minnesota, Dept Comp Sci & Engn, Minneapolis, MN 55455 USA.
EM evw@umn.edu
CR Aho A.V., 1986, COMPILERS PRINCIPLES
   Boyland JT, 2005, J ACM, V52, P627, DOI 10.1145/1082036.1082042
   Ekman T, 2007, SCI COMPUT PROGRAM, V69, P14, DOI 10.1016/j.scico.2007.02.003
   Gao JM, 2007, LECT NOTES COMPUT SC, V4422, P102
   Hedin G., 2000, Informatica, V24, P301
   JOHNSSON T, 1985, LECT NOTES COMPUT SC, V201, P190
   Kaminski Ted, 2011, REVISED SELECTED PAP, V6940, P263, DOI [10.1007/978-3-642-28830-2_15, DOI 10.1007/978-3-642-28830-2_15]
   Kaminski Ted, 2012, Lecture Notes in Computer Science, V7745, P352, DOI DOI 10.1007/978-3-642-36089-3_20
   KLINT P, 2009, P SOURC COD AN MAN S
   Knuth D. E., 1968, Mathematical Systems Theory, V2, P127, DOI 10.1007/BF01692511
   Magnusson E, 2009, AUTOMAT SOFTW ENG, V16, P291, DOI 10.1007/s10515-009-0046-z
   Mali Yogesh, 2011, Model Checking Software. Proceedings 18th International SPIN Workshop, P108, DOI 10.1007/978-3-642-22306-8_8
   Schwerdfeger A, 2010, LECT NOTES COMPUT SC, V5969, P184
   Schwerdfeger AC, 2009, PLDI'09 PROCEEDINGS OF THE 2009 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P199, DOI 10.1145/1542476.1542499
   Scott E, 2010, ELECTRON NOTES THEOR, V253, P177, DOI 10.1016/j.entcs.2010.08.041
   Sloane AM, 2013, SCI COMPUT PROGRAM, V78, P1752, DOI 10.1016/j.scico.2011.11.005
   Sloane AM, 2011, LECT NOTES COMPUT SC, V6491, P408, DOI 10.1007/978-3-642-18023-1_12
   Swierstra SD, 2009, J FUNCT PROGRAM, V19, P1, DOI 10.1017/S0956796808006990
   van den Brand M, 2015, SCI COMPUT PROGRAM, V114, P1, DOI 10.1016/j.scico.2015.10.015
   Van Wyk E, 2002, LECT NOTES COMPUT SC, V2304, P128
   Van Wyk E, 2007, LECT NOTES COMPUT SC, V4609, P575
   Van Wyk E, 2010, SCI COMPUT PROGRAM, V75, P39, DOI 10.1016/j.scico.2009.07.004
   Van Wyk EricR., 2007, GPCE 07, P63
   Viera M, 2009, ICFP'09: PROCEEDINGS OF THE 2009 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P245
   Viera Marcos, 2012, P 12 WORKSH LANG DES
   VOGT HH, 1989, SIGPLAN NOTICES, V24, P131, DOI 10.1145/74818.74830
   WIRTH N, 1996, COMPILER CONSTRUCTIO
   Zenger M., 2005, P FOOL, V12
NR 28
TC 4
Z9 4
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 15
PY 2015
VL 114
BP 33
EP 44
DI 10.1016/j.scico.2015.10.009
PG 12
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CZ5DX
UT WOS:000367123800004
DA 2024-07-18
ER

PT J
AU Morbé, G
   Scholl, C
AF Morbe, Georges
   Scholl, Christoph
TI Fully symbolic TCTL model checking for complete and incomplete real-time
   systems
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Timed automata; Incomplete real-time systems; Full TCTL model checking
ID VERIFICATION
AB In this paper we present a fully symbolic TCTL model checking algorithm for real-time systems represented in a formal model called finite state machine with time (FSMT), which works on fully symbolic state sets containing both the clock values and the state variables. Our algorithm is able to verify TCTL properties on complete and incomplete FSMTs containing unknown components. For that purpose over-approximations of state sets fulfilling a TCTL property phi for at least one implementation of the unknown components and under-approximations of state sets fulfilling phi for all possible implementations of the unknown components are computed. We present two different methods to convert timed automata to FSMTs. In addition to FSMTs simulating pure interleaving behaviour of timed automata we can produce FSMTs with a parallelized interleaving behaviour which allows parallelism of conflict-free transitions. This can dramatically reduce the number of steps during verification. Our prototype implementation outperforms the state-of-the-art model checkers UPPAAL and RED on complete systems, and on incomplete systems our tool is able to prove interesting properties when parts of the system are unknown. (C) 2015 Elsevier B.V. All rights reserved.
C1 [Morbe, Georges; Scholl, Christoph] Dept Comp Sci, Georges Kohler Allee 51, D-79110 Freiburg, Germany.
RP Morbé, G (corresponding author), Dept Comp Sci, Georges Kohler Allee 51, D-79110 Freiburg, Germany.
EM morbe@informatik.uni-freiburg.de; scholl@informatik.uni-freiburg.de
FU German Research Council (Deutsche Forschungsgemeinschaft - DFG),
   Transregional Collaborative Research Center "Automatic Verification and
   Analysis of Complex Systems" [SFB/TR 14 AVACS]
FX This work was partly supported by the German Research Council (Deutsche
   Forschungsgemeinschaft - DFG) as part of the Transregional Collaborative
   Research Center "Automatic Verification and Analysis of Complex Systems"
   (SFB/TR 14 AVACS, http://www.avacs.org/).
CR ALUR R, 1994, THEOR COMPUT SCI, V126, P183, DOI 10.1016/0304-3975(94)90010-8
   Alur R., 1999, Computer Aided Verification. 11th International Conference, CAV'99. Proceedings (Lecture Notes in Computer Science Vol.1633), P8
   ALUR R, 1993, INFORM COMPUT, V104, P2, DOI 10.1006/inco.1993.1024
   Asarin E, 1998, SYSTEM STRUCTURE AND CONTROL 1998 (SSC'98), VOLS 1 AND 2, P447
   Baier C., 2008, REPRESENTATION MIND
   Behrmann G, 2004, LECT NOTES COMPUT SC, V3185, P200
   Behrmann G. Gerd, UPPAAL TIGA USER MAN
   Behrmann G, 2007, LECT NOTES COMPUT SC, V4590, P121
   Bornot Sebastien., 1997, COMPOS, P103
   Bozzano M, 2005, J AUTOM REASONING, V35, P265, DOI 10.1007/s10817-005-9004-z
   Bruns G., 1999, Computer Aided Verification. 11th International Conference, CAV'99. Proceedings (Lecture Notes in Computer Science Vol.1633), P274
   Chechik M, 2003, ACM T SOFTW ENG METH, V12, P371, DOI 10.1145/990010.990011
   Clarke. E. M., 1982, LOGICS OF PROGRAMS, P52, DOI [10 . 1007 / BFb0025774, DOI 10.1007/BFB0025774]
   Damm W, 2007, LECT NOTES COMPUT SC, V4762, P425
   Damm W, 2012, SCI COMPUT PROGRAM, V77, P1122, DOI 10.1016/j.scico.2011.07.006
   Dutertre B, 2006, LECT NOTES COMPUT SC, V4144, P81, DOI 10.1007/11817963_11
   Ehlers R, 2010, REAL TIM SYST SYMP P, P360, DOI 10.1109/RTSS.2010.36
   Ehlers R, 2010, LECT NOTES COMPUT SC, V6246, P107, DOI 10.1007/978-3-642-15297-9_10
   HENZINGER TA, 1992, PROCEEDINGS OF THE SEVENTH ANNUAL IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P394, DOI 10.1109/LICS.1992.185551
   Huth M, 2001, LECT NOTES COMPUT SC, V2028, P155
   Klotz W., 2002, GRAPH COLORING ALGOR
   Kupferman O, 2001, INFORM COMPUT, V164, P322, DOI 10.1006/inco.2000.2893
   Larsen K. G., 1999, Nordic Journal of Computing, V6, P271
   Larsen K. G., 1990, Proceedings. Fifth Annual IEEE Symposium on Logic in Computer Science (90CH2897-7), P108, DOI 10.1109/LICS.1990.113738
   Larsen K. G., 1997, International Journal on Software Tools for Technology Transfer, V1, P134, DOI 10.1007/s100090050010
   Larsen KG, 1997, REAL TIM SYST SYMP P, P14, DOI 10.1109/REAL.1997.641265
   Larsen U, 1988, Eur J Popul, V3, P203, DOI 10.1109/LICS.1988.5119
   LOOS R, 1993, COMPUT J, V36, P450, DOI 10.1093/comjnl/36.5.450
   Maler O., 1995, STACS 95. 12th Annual Symposium on Theoretical Aspects of Computer Science. Proceedings, P229
   Mazurkiewicz A.W., 1988, LECT NOTES COMPUT SC, V354, P235
   Mishchenko A., 2005, FRAIGs: A Unifying Representation for Logic Synthesis and Verification
   MOLLER J, 1999, COMPUTER SCI LOGIC
   Morbe Georges, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P616, DOI 10.1007/978-3-642-22110-1_50
   Morbe G., 2013, AUTOMATED VERIFICATI, V66
   Nopper T, 2004, LECT NOTES COMPUT SC, V3312, P290
   Nopper T, 2013, IEEE T COMPUT, V62, P1234, DOI 10.1109/TC.2012.53
   Peled D., 1993, Computer Aided Verification. 5th International Conference, CAV '93 Proceedings, P409
   Peter Hans-Jorg, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P649, DOI 10.1007/978-3-642-22110-1_52
   Peter HJ, 2009, REAL TIM SYST SYMP P, P364, DOI 10.1109/RTSS.2009.14
   PIGORSCH F, 2006, FMCAD, P89
   Scholl C, 2009, LECT NOTES COMPUT SC, V5505, P383, DOI 10.1007/978-3-642-00768-2_32
   Seshia SA, 2003, LECT NOTES COMPUT SC, V2725, P154
   Wang F., 2004, International Journal on Software Tools for Technology Transfer, V6, P77, DOI 10.1007/s10009-003-0135-4
   Yorav K, 2004, FORM METHOD SYST DES, V25, P67, DOI 10.1023/B:FORM.0000033963.55470.9e
   Yovine S., 1997, International Journal on Software Tools for Technology Transfer, V1, P123, DOI 10.1007/s100090050009
NR 45
TC 1
Z9 2
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 1
PY 2015
VL 111
SI SI
BP 248
EP 276
DI 10.1016/j.scico.2015.08.002
PN 2
PG 29
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DB5LX
UT WOS:000368556700003
OA Green Submitted, hybrid
DA 2024-07-18
ER

PT J
AU Bae, K
   Krisiloff, J
   Meseguer, J
   Ölveczky, PC
AF Bae, Kyungmin
   Krisiloff, Joshua
   Meseguer, Jose
   Olveczky, Peter Csaba
TI Designing and verifying distributed cyber-physical systems using
   Multirate PALS: An airplane turning control system case study
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 1st International Workshop on Formal-Techniques-for-
   Safety-Critical-Systems (FTSCS 2012)
CY NOV 12, 2012
CL Kyoto, JAPAN
DE Multirate PALS; Cyber-physical systems; Real-Time Maude; Model checking;
   Hybrid systems
ID REAL-TIME; SPECIFICATION; PATTERN
AB Distributed cyber-physical systems (DCPS), such as aeronautics and ground transportation systems, are very hard to design and verify, because of asynchronous communication, network delays, and clock skews. Their model checking verification typically becomes unfeasible due to the huge state space explosion caused by the system's concurrency. The Multirate PALS ("physically asynchronous, logically synchronous") methodology has been proposed to reduce the design and verification of a DCPS to the much simpler task of designing and verifying its underlying synchronous version, where components may operate with different periods. This paper presents a methodology for formally modeling and verifying multirate DCPSs using Multirate PALS. In particular, this methodology explains how to deal with the system's physical environment in Multirate PALS. We illustrate our methodology with a multirate DCPS consisting of an airplane maneuvered by a pilot, who turns the airplane to a specified angle through a distributed control system. Our formal analysis using Real-Time Maude revealed that the original design did not achieve a smooth turning maneuver, and led to a redesign of the system. We then use model checking and Multirate PALS to prove that the redesigned system satisfies the desired correctness properties, whereas model checking the corresponding asynchronous model is unfeasible. This shows that Multirate PALS is not only effective for formal DCPS verification, but can also be used effectively in the DCPS design process. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Bae, Kyungmin; Krisiloff, Joshua; Meseguer, Jose] Univ Illinois, Dept Comp Sci, Urbana, IL 61801 USA.
   [Krisiloff, Joshua] Univ Illinois, Dept Aerosp Engn, Urbana, IL 61801 USA.
   [Olveczky, Peter Csaba] Univ Oslo, Dept Informat, N-0316 Oslo, Norway.
C3 University of Illinois System; University of Illinois Urbana-Champaign;
   University of Illinois System; University of Illinois Urbana-Champaign;
   University of Oslo
RP Bae, K (corresponding author), Univ Illinois, Dept Comp Sci, Urbana, IL 61801 USA.
RI Ölveczky, Peter C/B-1797-2008
FU NSF [CNS 08-34709, CCF 09-05584, CNS 13-19109]; AFOSR
   [FA8750-11-2-0084]; Boeing Corporation [C8088-557395]; Division Of
   Computer and Network Systems; Direct For Computer & Info Scie & Enginr
   [1319109] Funding Source: National Science Foundation
FX We would like to thank the anonymous reviewers for their very careful
   and insightful comments on an earlier version of this paper that has led
   to substantial improvements. This work has been supported in part by NSF
   Grants CNS 08-34709, CCF 09-05584, and CNS 13-19109, the Boeing
   Corporation Grant C8088-557395, and AFOSR Grant FA8750-11-2-0084.
CR Al-Nayeem A, 2012, ACM IEEE INT CONF CY, P65, DOI 10.1109/ICCPS.2012.15
   Al-Nayeem A, 2009, REAL TIM SYST SYMP P, P161, DOI 10.1109/RTSS.2009.50
   AlTurki Musab, 2011, Algebra and Coalgebra in Computer Science. Proceedings 4th International Conference, CALCO 2011, P386, DOI 10.1007/978-3-642-22944-2_28
   Anderson J.D., 2005, INTRO FLIGHT, V5th
   [Anonymous], 2007, LECT NOTES COMPUTER
   Atkinson KE., 2008, An Introduction to Numerical Analysis
   AWERBUCH B, 1985, J ACM, V32, P804, DOI 10.1145/4221.4227
   Bae K., 2012, LNCS, V7684, P1
   Bae K, 2014, LECT NOTES COMPUT SC, V8442, P94, DOI 10.1007/978-3-319-06410-9_7
   Bae K, 2014, SCI COMPUT PROGRAM, V91, P3, DOI 10.1016/j.scico.2013.09.010
   Bae K, 2012, ELECTRON PROC THEOR, P5, DOI 10.4204/EPTCS.105.2
   Bruni R, 2006, THEOR COMPUT SCI, V360, P386, DOI 10.1016/j.tcs.2006.04.012
   Clarke EM, 1999, MODEL CHECKING, P1
   Collinson R.P.G., 1996, Introduction to Avionics
   Fadlisyah Muhammad, 2013, Algebra and Coalgebra in Computer Science. 5th International Conference, CALCO 2013. Proceedings: LNCS 8089, P322, DOI 10.1007/978-3-642-40206-7_25
   Fadlisyah Muhammad, 2012, Rewriting Logic and Its Applications. 9th International Workshop, WRLA 2012. Held as a Satellite Event of ETAPS. Revised Selected Papers, P139, DOI 10.1007/978-3-642-34005-5_8
   Fadlisyah M, 2011, LECT NOTES COMPUT SC, V7041, P415, DOI 10.1007/978-3-642-24690-6_29
   Feiler PH., 2012, Model-based engineering with AADL: An introduction to the SAE architecture analysis design language
   Girault A, 2002, LECT NOTES COMPUT SC, V2491, P266
   KOPETZ H, 1994, COMPUTER, V27, P14, DOI 10.1109/2.248873
   Loos S. M., 2013, P 16 INT C HYBR SYST, P125, DOI DOI 10.1145/2461328.2461350
   Lynch N, 2003, INFORM COMPUT, V185, P105, DOI 10.1016/S0890-5401(03)00067-1
   MESEGUER J, 1992, THEOR COMPUT SCI, V96, P73, DOI 10.1016/0304-3975(92)90182-F
   Meseguer J, 1998, LECT NOTES COMPUT SC, V1376, P18
   Meseguer J, 2006, LECT NOTES COMPUT SC, V3927, P460
   Meseguer J, 2012, THEOR COMPUT SCI, V451, P1, DOI 10.1016/j.tcs.2012.05.040
   Miller S.P., P DASC 09
   Olveczky P. C., 2007, Higher-Order and Symbolic Computation, V20, P161, DOI 10.1007/s10990-007-9001-5
   Ölveczky PC, 2002, THEOR COMPUT SCI, V285, P359, DOI 10.1016/S0304-3975(01)00363-2
   Potop-Butucaru D., 2007, FUNDAM INFORM
   Rushby J, 1999, IEEE T SOFTWARE ENG, V25, P651, DOI 10.1109/32.815324
   Steiner W., 2011, P DASC 11
   TEL G, 1994, IEEE ACM T NETWORK, V2, P66, DOI 10.1109/90.282609
   Tripakis S., 2008, IEEE T COMPUT, V1
NR 34
TC 25
Z9 27
U1 1
U2 22
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 1
PY 2015
VL 103
BP 13
EP 50
DI 10.1016/j.scico.2014.09.011
PG 38
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA CE6QX
UT WOS:000351964100003
OA Bronze
DA 2024-07-18
ER

PT J
AU Stevenson, A
   Cordy, JR
AF Stevenson, Andrew
   Cordy, James R.
TI Parse views with Boolean grammars
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Boolean grammar; Agile parsing; Source transformation
AB We propose an enhancement to current parsing and transformation systems by leveraging the expressive power of Boolean grammars, a generalization of context-free grammars that adds conjunction and negation operators. In addition to naturally expressing a larger class of languages, Boolean grammars capture multiple parse trees of the same document simultaneously and the ability to switch between these parse "views". In particular, source transformation and reengineering tasks can benefit from parse views by recasting the input text into whichever parse is most suitable for the task at hand. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Stevenson, Andrew; Cordy, James R.] Queens Univ, Sch Comp, Kingston, ON K7L 3N6, Canada.
C3 Queens University - Canada
RP Stevenson, A (corresponding author), Queens Univ, Sch Comp, Kingston, ON K7L 3N6, Canada.
EM andrews@cs.queensu.ca; cordy@cs.queensu.ca
RI Cordy, James R/G-9736-2011
CR AHO AV, 1968, J ACM, V15, P647, DOI 10.1145/321479.321488
   Cordy JR, 2006, SCI COMPUT PROGRAM, V61, P190, DOI 10.1016/j.scico.2006.04.002
   Cunha Alcino, 2006, ELECT NOTES THERM CO, V174, P17
   Dassow J, 1990, REGULATED REWRITING
   Dean T. R., 2003, Automated Software Engineering, V10, P311, DOI 10.1023/A:1025801405075
   FLOYD RW, 1962, COMMUN ACM, V5, P483, DOI 10.1145/368834.368898
   GAZDAR G, 1988, NATURAL LANGUAGE PAR, V35, P69
   JOSHI AK, 1975, J COMPUT SYST SCI, V10, P136, DOI 10.1016/S0022-0000(75)80019-5
   Klint P, 2005, ACM T SOFTW ENG METH, V14, P331, DOI 10.1145/1072997.1073000
   Okhotin A, 2004, INFORM COMPUT, V194, P19, DOI 10.1016/j.ic.2004.03.006
   OKHOTIN A, 2005, 11 INT C AUT FORM LA
   Okhotin A., 2002, Proceedings of the 7th International Conference on Implementation and Application of Automata, CIAA'02, P213
   SINTZOFF M, 1967, ANNALES SOC SCIENTIF, P115
   Thurston A. D., 2006, P 2006 C CTR ADV STU P 2006 C CTR ADV STU
   van den Brand J., 2003, ELECT NOTES THEOR CO, V82, P575
   van den Brand M, 1998, PROG COMPREHEN, P108, DOI 10.1109/WPC.1998.693325
NR 16
TC 0
Z9 1
U1 0
U2 0
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 1
PY 2015
VL 97
SI SI
BP 59
EP 63
DI 10.1016/j.scico.2013.11.007
PN 1
PG 5
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AU6PR
UT WOS:000345725100011
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Blom, S
   Huisman, M
   Mihelcic, M
AF Blom, Stefan
   Huisman, Marieke
   Mihelcic, Matej
TI Specification and verification of GPGPU programs
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT Conference on Software Verification and Testing (SVT) Track at the 28th
   ACM Symposium on Applied Computing (ACM SAC)
CY MAR, 2013
CL Coimbra, PORTUGAL
SP ACM
DE Formal verification; Separation logic; Permissions; GPU programming
ID LOGIC
AB Graphics Processing Units (GPUs) are increasingly used for general-purpose applications because of their low price, energy efficiency and enormous computing power. Considering the importance of GPU applications, it is vital that the behaviour of GPU programs can be specified and proven correct formally. This paper presents a logic to verify GPU kernels written in OpenCL, a platform-independent low-level programming language. The logic can be used to prove both data-race-freedom and functional correctness of kernels. The verification is modular, based on ideas from permission-based separation logic. We present the logic and its soundness proof, and then discuss tool support and illustrate its use on a complex example kernel. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Blom, Stefan; Huisman, Marieke; Mihelcic, Matej] Univ Twente, NL-7500 AE Enschede, Netherlands.
C3 University of Twente
RP Blom, S (corresponding author), Univ Twente, POB 217, NL-7500 AE Enschede, Netherlands.
EM s.c.c.blom@utwente.nl; m.huisman@utwente.nl
RI Mihelčić, Matej/AAJ-2725-2020
OI Mihelčić, Matej/0000-0002-1023-8413; Huisman,
   Marieke/0000-0003-4467-072X
CR APT KR, 1981, ACM T PROGR LANG SYS, V3, P431, DOI 10.1145/357146.357150
   Barnett M, 2006, LECT NOTES COMPUT SC, V4111, P364
   Betts A, 2012, ACM SIGPLAN NOTICES, V47, P113, DOI 10.1145/2398857.2384625
   Bornat R, 2005, ACM SIGPLAN NOTICES, V40, P259, DOI 10.1145/1047659.1040327
   Boyland J, 2003, LECT NOTES COMPUT SC, V2694, P55
   Cowan B., 2011, P 6 AUD MOSTL C C IN, P55
   Ferrara P, 2012, LECT NOTES COMPUT SC, V7148, P202, DOI 10.1007/978-3-642-27940-9_14
   Gotsman A, 2007, LECT NOTES COMPUT SC, V4807, P19
   Gregory Kate., 2012, C++ AMP: Accelerated Massive Parallelism with Microsoft Visual C++ . Developer Reference
   Haack C, 2008, LECT NOTES COMPUT SC, V5140, P199
   Haack C, 2008, LECT NOTES COMPUT SC, V5356, P171
   HOARE CAR, 1969, COMMUN ACM, V12, P576, DOI 10.1145/363235.363259
   Hobor A, 2011, LECT NOTES COMPUT SC, V6602, P276, DOI 10.1007/978-3-642-19718-5_15
   Leino KRM, 2009, LECT NOTES COMPUT SC, V5705, P195, DOI 10.1007/978-3-642-03829-7_7
   Li G., 2010, Proceedings of the eighteenth ACM SIGSOFT international symposium on Founda- tions of software engineering, FSE '10, P187
   Mulligan JB, 2012, P S EYE TRACK RES AP, P265
   O'Hearn PW, 2007, THEOR COMPUT SCI, V375, P271, DOI 10.1016/j.tcs.2006.12.035
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Sanders E.K.J., 2010, Cuda by Example: an Introduction to General-Purpose Gpu Programming
   Stone SamuelS., 2008, CF '08: Proc. 5th conference on Computing frontiers, P261
NR 20
TC 25
Z9 26
U1 0
U2 6
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 1
PY 2014
VL 95
BP 376
EP 388
DI 10.1016/j.scico.2014.03.013
PN 3
PG 13
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA AS9RH
UT WOS:000344578800008
OA Green Published, Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Keivanloo, I
   Roy, CK
   Rilling, J
AF Keivanloo, Iman
   Roy, Chanchal K.
   Rilling, Juergen
TI SeByte: Scalable clone and similarity search for bytecode
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Clone detection; Semantic Web; Java bytecode; Clone search; Semantic
   search
ID CODE; QUALITY
AB While source code clone detection is a well-established research area, finding similar code fragments in binary and other intermediate code representations has been not yet that widely studied. In this paper, we introduce SeByte, a bytecode clone detection and search model that applies semantic-enabled token matching. It is developed based on the idea of relaxation on the code fingerprints. This approach separates the input content based on the types of tokens into different dimensions, with each dimension representing the input content from a specific point of view. Following this approach, SeByte compares each dimension separately and independently which we refer to as multi-dimensional comparison in our research. As the similarity search function we use a well-known measure that supports our multi-dimensional comparison heuristic, the Jaccard similarity coefficient. Our preliminary study shows that SeByte can detect clones that are missed by existing approaches due to the differences in the input data and the search algorithm. We then further exploit the model to build a scalable bytecode clone search engine. This extension meets the requirements of a classical search engine including the ranking of result sets. Our evaluation with a large dataset of 500,000 compiled Java classes, which we extracted from the six most recent versions of the Eclipse IDE, showed that our SeByte search is not only scalable but also capable of providing a reliable ranking. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Keivanloo, Iman] Queens Univ, Dept Elect & Comp Engn, Kingston, ON K7L 3N6, Canada.
   [Roy, Chanchal K.] Univ Saskatchewan, Dept Comp Sci, Saskatoon, SK S7N 0W0, Canada.
   [Rilling, Juergen] Concordia Univ, Dept Comp Sci, Montreal, PQ, Canada.
C3 Queens University - Canada; University of Saskatchewan; Concordia
   University - Canada
RP Keivanloo, I (corresponding author), Queens Univ, Dept Elect & Comp Engn, Kingston, ON K7L 3N6, Canada.
CR Al-Batran B, 2011, LECT NOTES COMPUT SC, V6981, P258, DOI 10.1007/978-3-642-24485-8_19
   Al-Omari Farouq, 2012, 19 WORK C REV ENG WC
   [Anonymous], 2010, IEEE INT C SOFTWAREM
   [Anonymous], 20 INT C SOFTW ENG K
   Baker BS, 1998, PROCEEDINGS OF THE USENIX 1998 ANNUAL TECHNICAL CONFERENCE, P179
   Bellon S, 2007, IEEE T SOFTWARE ENG, V33, P577, DOI 10.1109/TSE.2007.70725
   Chaki Sagar., 2011, Proceedings of the 17th ACM SIGKDD in-ternational conference on Knowledge discovery and data mining, P15
   Davis I. J., 2010, Proceedings 17th Working Conference on Reverse Engineering (WCRE 2010), P242, DOI 10.1109/WCRE.2010.35
   Dean J, 2004, USENIX ASSOCIATION PROCEEDINGS OF THE SIXTH SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION (OSDE '04), P137
   Guha R.V., 2003, Proceedings of the 12th international conference on World Wide Web, P700, DOI DOI 10.1145/775152.775250
   Hemel A., 2011, P 8 WORK C MIN SOFTW, P63
   Higo Y, 2009, WORK CONF REVERSE EN, P315, DOI 10.1109/WCRE.2009.39
   Jaccard P., 1901, B SOCIT VAUDOISE SCI, V37, P547, DOI [10.5169/seals-266440, DOI 10.5169/SEALS-266440]
   Juergens E., 2010, P 4 INTERNATIONALWOR, P1
   Juricic V., 2011, 2011 33rd International Conference on Information Technology Interfaces, P597
   Kamiya T, 2002, IEEE T SOFTWARE ENG, V28, P654, DOI 10.1109/TSE.2002.1019480
   Keivanloo I., 2012, 6 INT WORKSH SOFTW C
   Keivanloo I., 2012, 9 WORK C MIN SOFTW R
   Keivanloo I., 2012, 20 IEEE INT C PROGR
   Koschke R, 2006, WORK CONF REVERSE EN, P253
   Lavoie Thierry., 2011, P 5 INT WORKSHOP SOF, P34
   Lee M.-W., 2010, Proceedings of the Eighteenth ACM SIGSOFT International Symposium on Foundations of Software Engineering, FSE '10, P167
   Manning Christopher D., 2008, INTRO INFORM RETRIEV
   Mayrand J, 1996, INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE, PROCEEDINGS, P244, DOI 10.1109/ICSM.1996.565012
   Patenaude JF, 1999, PROG COMPREHEN, P49, DOI 10.1109/WPC.1999.777743
   Quillan M.R., 1967, BEHAV SCI, V12
   Roy CK, 2008, INT C PROGRAM COMPRE, P172, DOI 10.1109/ICPC.2008.41
   Roy CK, 2009, SCI COMPUT PROGRAM, V74, P470, DOI 10.1016/j.scico.2009.02.007
   Sæbjornsen A, 2009, ISSTA 2009: INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, P117
   Santone A., 2011, PROC 5 INT WORKSHOP, P73
   Selim G. M. K., 2010, Proceedings 17th Working Conference on Reverse Engineering (WCRE 2010), P227, DOI 10.1109/WCRE.2010.33
   Uddin M. S., 2011, 2011 18th Working Conference on Reverse Engineering, P13, DOI 10.1109/WCRE.2011.12
   Urbani J, 2010, LECT NOTES COMPUT SC, V6088, P213, DOI 10.1007/978-3-642-13486-9_15
   Walenstein A., 2003, 2 INT WORKSH DET SOF
   Yoshioka S., 2011, P ISSRE, P3
NR 35
TC 19
Z9 21
U1 0
U2 9
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 1
PY 2014
VL 95
SI SI
BP 426
EP 444
DI 10.1016/j.scico.2013.10.006
PN 4
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AS9RI
UT WOS:000344578900004
DA 2024-07-18
ER

PT J
AU Mondal, M
   Roy, CK
   Schneider, KA
AF Mondal, Manishankar
   Roy, Chanchal K.
   Schneider, Kevin A.
TI An insight into the dispersion of changes in cloned and non-cloned code:
   A genealogy based empirical study
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Dispersion; Instability; Clones; Software maintenance; Code change
ID NICAD
AB In this paper, we present an in-depth empirical study of a new metric, change dispersion, that measures the extent changes are scattered throughout the code of a software system. Intuitively, highly dispersed changes, the changes that are scattered throughout many software entities (such as files, classes, methods, and variables), should require more maintenance effort than the changes that only affect a few entities. In our research we investigate change dispersion on the code-base of a number of subject systems as a whole, and separately on each system's cloned and non-cloned code. Our central objective is to determine whether cloned code negatively affects software evolution and maintenance. The granularity of our focus is at the method level.
   Our experimental results on 16 open source subject systems written in four different programming languages (Java, C, C#, and Python) involving two clone detection tools (CCFinderX and NiCad) and considering three major types of clones (Type I: exact, Type 2: dissimilar naming, and Type 3: some dissimilar code) suggests that change dispersion has a positive and statistically significant correlation with the change-proneness (or instability) of source code. Cloned code, especially in Java and C systems, often exhibits a higher change dispersion than non-cloned code. Also, changes to Type 3 clones are more dispersed compared to changes to Type 1 and Type 2 clones. According to our analysis, a primary cause of high change dispersion in cloned code is that clones from the same clone class often require corresponding changes to ensure they remain consistent. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Mondal, Manishankar; Roy, Chanchal K.; Schneider, Kevin A.] Univ Saskatchewan, Saskatoon, SK S7N 0W0, Canada.
C3 University of Saskatchewan
RP Mondal, M (corresponding author), Univ Saskatchewan, Saskatoon, SK S7N 0W0, Canada.
EM mshankar.mondal@usask.ca; chanchal.roy@usask.ca;
   kevin.schneider@usask.ca
RI Schneider, Kevin/KQV-5113-2024
OI Schneider, Kevin/0000-0003-1113-1754
CR [Anonymous], 2010, P JOINT ERCIM WORKSH
   Aversano L, 2007, CSMR 2007: 11TH EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, PROCEEDINGS, P81
   Bruntink M, 2005, IEEE T SOFTWARE ENG, V31, P804, DOI 10.1109/TSE.2005.114
   Cordy JR, 2011, CONF PROC INT SYMP C, P219, DOI 10.1109/ICPC.2011.26
   Göde N, 2011, EUR CON SFTWR MTNCE, P65, DOI 10.1109/CSMR.2011.11
   Göde N, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P311, DOI 10.1145/1985793.1985836
   Harder Jan, 2013, Journal of Software: Evolution and Process, V25, P1063, DOI 10.1002/smr.1551
   Hassan AE, 2009, PROC INT CONF SOFTW, P78, DOI 10.1109/ICSE.2009.5070510
   Juergens E, 2009, PROC INT CONF SOFTW, P485, DOI 10.1109/ICSE.2009.5070547
   Kapser CJ, 2008, EMPIR SOFTW ENG, V13, P645, DOI 10.1007/s10664-008-9076-6
   Kim Miryung, 2005, ESEC/FSE- 13), P187, DOI [10.1145/1081706.1081737, DOI 10.1145/1081706.1081737]
   Krinke J., 2011, P 5 INT WORKSHOP SOF, P28
   Krinke J, 2008, EIGHTH IEEE INTERNATIONAL WORKING CONFERENCE ON SOURCE CODE ANALYSIS AND MANIPULATION, PROCEEDINGS, P57, DOI 10.1109/SCAM.2008.14
   Krinke J, 2007, 14TH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P170, DOI 10.1109/WCRE.2007.7
   Lozano A., 2007, PROC 4 INT WORKSHOP, P18, DOI DOI 10.1109/MSR.2007.8
   Lozano A., 2010, IWSC, V10, P65, DOI [10.1145/1808901.1808910, DOI 10.1145/1808901.1808910]
   Lozano A, 2008, PROC IEEE INT CONF S, P227, DOI 10.1109/ICSM.2008.4658071
   Mondal M., 2012, 2012 Proceedings of the 6th International Workshop on Software Clones (IWSC 2012), P29, DOI 10.1109/IWSC.2012.6227863
   Mondal M., 2012, P ACM S APPL COMPUTI, P1227, DOI DOI 10.1145/2245276.2231969
   Mondal M, 2012, APPL COMPUT REV, V12, P20, DOI 10.1145/2387358.2387360
   Mondal M, 2011, CONF PROC INT SYMP C, P242, DOI 10.1109/ICPC.2011.14
   Roy C. K., 2008, P 15 WORK C REV ENG, P81
   Roy CK, 2009, IEEE ICST WORKSHOP, P157, DOI 10.1109/ICSTW.2009.18
   Roy CK, 2008, INT C PROGRAM COMPRE, P172, DOI 10.1109/ICPC.2008.41
   Roy CK, 2008, INT C PROGRAM COMPRE, P153, DOI 10.1109/ICPC.2008.42
   Roy CK, 2009, SCI COMPUT PROGRAM, V74, P470, DOI 10.1016/j.scico.2009.02.007
   Saha R. K., 2011, 2011 IEEE 27th International Conference on Software Maintenance, P293, DOI 10.1109/ICSM.2011.6080796
   Saha RK, 2010, IEEE INT WORK C SO, P87, DOI 10.1109/SCAM.2010.32
   Thummalapenta S, 2010, EMPIR SOFTW ENG, V15, P1, DOI 10.1007/s10664-009-9108-x
NR 29
TC 10
Z9 11
U1 0
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 1
PY 2014
VL 95
SI SI
BP 445
EP 468
DI 10.1016/j.scico.2013.11.027
PN 4
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AS9RI
UT WOS:000344578900005
OA hybrid, Green Submitted
DA 2024-07-18
ER

PT J
AU Wang, HH
   Damljanovic, D
   Sun, J
AF Wang, Hai H.
   Damljanovic, Danica
   Sun, Jing
TI An automated tool for semantic accessing to formal software models
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Semantic Web; Ontology; Formal method; Software engineering
AB Many software engineers have found that it is difficult to understand, incorporate and use different formal models consistently in the process of software developments, especially for large and complex software systems. This is mainly due to the complex mathematical nature of the formal methods and the lack of tool support. It is highly desirable to have software models and their related software artefacts systematically connected and used collaboratively, rather than in isolation. The success of the Semantic Web, as the next generation of Web technology, can have profound impact on the environment for formal software development. It allows both the software engineers and machines to understand the content of formal models and supports more effective software design in terms of understanding, sharing and reusing in a distributed manner. To realise the full potential of the Semantic Web in formal software development, effectively creating proper semantic metadata for formal software models and their related software artefacts is crucial. This paper proposed a framework that allows users to interconnect the knowledge about formal software models and other related documents using the semantic technology. We first propose a methodology with tool support is proposed to automatically derive ontological metadata from formal software models and semantically describe them. We then develop a Semantic Web environment for representing and sharing formal Z/OZ models. A method with prototype tool is presented to enhance semantic query to software models and other artefacts. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Wang, Hai H.] Aston Univ, Sch Engn & Appl Sci, Birmingham B4 7ET, W Midlands, England.
   [Damljanovic, Danica] Univ Sheffield, Dept Comp Sci, Sheffield S10 2TN, S Yorkshire, England.
   [Sun, Jing] Univ Auckland, Dept Comp Sci, Auckland 1, New Zealand.
C3 Aston University; University of Sheffield; University of Auckland
RP Wang, HH (corresponding author), Aston Univ, Sch Engn & Appl Sci, Birmingham B4 7ET, W Midlands, England.
EM h.wang10@aston.ac.uk; D.Damljanovic@dcs.shef.ac.uk;
   j.sun@cs.auckland.ac.nz
OI Wang, Hai/0000-0002-4192-5363; Sun, Jing/0000-0002-1979-6622
CR Amardeilh F., 2009, D122 TAO
   Ardis M., 1989, FORMAL METHODS SOFTW
   Bangor A, 2008, INT J HUM-COMPUT INT, V24, P574, DOI 10.1080/10447310802205776
   Berardini TZ, 2010, NUCLEIC ACIDS RES, V38, pD331, DOI 10.1093/nar/gkp1018
   Bontcheva K., 2007, D31 TAO
   Bowen JP, 1998, LECT NOTES COMPUT SC, V1493, P66, DOI 10.1007/BFb0056026
   Brickley D., 2004, RESOURCE DESCRIPTION
   Broekstra J., 2003, Proc. SWAD-Europe Workshop on Semantic Web Storage and Retrieval, P13
   Ciancarini P, 1998, LECT NOTES COMPUT SC, V1493, P81, DOI 10.1007/BFb0056027
   Ciccarese Paolo, 2011, J Biomed Semantics, V2 Suppl 2, pS4, DOI 10.1186/2041-1480-2-S2-S4
   Cimiano P, 2005, LECT NOTES COMPUT SC, V3513, P227
   Cunningham Hamish, DEV LANGUAGE PROCESS
   Damljanovic D., 2008, 6 LANG RES EV C LREC
   Danica Damljanovic, 2009, D64 TAO
   Duke R., 2000, FORMAL OBJECT ORIENT
   Faure D., 2000, P 1 WORKSH ONT LEARN
   FERNANDEZLOPEZ M, 2002, SURVEY METHODOLOGIES
   Futatsugi K, 1997, FIRST IEEE INTERNATIONAL CONFERENCE ON FORMAL ENGINEERING METHODS, PROCEEDINGS, P170, DOI 10.1109/ICFEM.1997.630424
   Gómez-Pérez A, 2004, KNOWL ENG REV, V19, P187, DOI [10.1017/S0269888905000251, 10.1017/s0269888905000251]
   Grcar M., 2008, D222 TAO ONT LEARN S
   GRUBER TR, 1993, KNOWL ACQUIS, V5, P199, DOI 10.1006/knac.1993.1008
   Hayes I. J., 1993, SPECIFICATION CASE S
   Jin Song Dong, 2002, FME 2002: Formal Methods-Getting IT Right. International Symposium of Formal Methods Europe (Lecture Notes in Computer Science Volume 2391), P587
   JONES D, METHODOLOGIES ONTOLO
   Kiryakov A, 2005, LECT NOTES COMPUT SC, V3807, P182
   Lassila Ora, 1998, W3C Recommendation
   Lee B.T., SEMANTIC WEB
   Lozano-Tello A, 2004, J DATABASE MANAGE, V15, P1, DOI 10.4018/jdm.2004040101
   Maedche A, 2002, LECT NOTES ARTIF INT, V2473, P251
   Porzel R, 2004, P ECAI 2004 WORKSH O
   Smith G., 1995, Formal Aspects of Computing, V7, P289, DOI 10.1007/BF01211075
   Smith G., 2000, ADV FORMAL METHODS
   Smith M., 2007, HUMAN INTERFACE 2, V2007, P309
   Spivey J. M., 1989, INT SERIES COMPUTER
   Sun J, 2002, ANN SOFTW ENG, V13, P329, DOI 10.1023/A:1016513914276
   Sun J., 2001, Proceedings of the 10th international conference on World Wide Web, P725
   Swartout B., 1996, 10 WORKSH KNOWL AQC
   Tablan V., 2008, P 5 EUR SEM WEB C ES
   Velardi P., 2005, ONTOLOGY LEARNING TE
   Wang HH, 2012, SEMANT WEB, V3, P157, DOI 10.3233/SW-2011-0039
   Woodcock J., 1996, SPECIFICATION REFINE
NR 41
TC 2
Z9 2
U1 0
U2 6
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 1
PY 2014
VL 95
SI SI
BP 93
EP 111
DI 10.1016/j.scico.2014.02.027
PN 1
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AS9RF
UT WOS:000344578600006
DA 2024-07-18
ER

PT J
AU Tamura, G
   Casallas, R
   Cleve, A
   Duchien, L
AF Tamura, Gabriel
   Casallas, Rubby
   Cleve, Anthony
   Duchien, Laurence
TI QoS contract preservation through dynamic reconfiguration: A formal
   semantics approach
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 7th International Workshop on Formal Aspects of Component Software
   (FACS)
CY OCT 14-16, 2010
CL Guimaraes, PORTUGAL
DE Quality-of-Service (QoS) software contracts; Reliable dynamic software
   reconfiguration; Self-adaptive software properties; QoS contract
   semantics; Design patterns at runtime
ID ADAPTIVE SYSTEMS; SERVICES; QUALITY
AB The increasing pervasiveness of computing services in everyday life, combined with the dynamic nature of their execution contexts, constitutes a major challenge in guaranteeing the expected quality of such services at runtime. Quality of Service (QoS) contracts have been proposed to specify expected quality levels (QoS levels) on different context conditions, with different enforcing mechanisms. In this paper we present a definition for QoS contracts as a high-level policy for governing the behavior of software systems that self-adapt at runtime in response to context changes. To realize this contract definition, we specify its formal semantics and implement it in a software framework able to execute and reconfigure software applications, in order to maintain fulfilled their associated QoS contracts. The contribution of this paper is threefold. First, we extend typed-attributed graph transformation systems and finite-state machines, and use them as denotations to specify the semantics of QoS contracts. Second, this semantics makes it possible to systematically exploit design patterns at runtime by dynamically deploying them in the managed software application. Third, our semantics guarantees self-adaptive properties such as reliability and robustness in the contract satisfaction. Finally, we evaluate the applicability of our semantics implementation by integrating and executing it in FRASCATI, a multi-scale component-based middleware, in three case studies. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Tamura, Gabriel; Duchien, Laurence] Univ Lille 1, LIFL CNRS UMR 8022, ADAM Team Project, INRIA Lille Nord Europe, Lille, France.
   [Tamura, Gabriel; Casallas, Rubby] Univ Los Andes, TICSw Grp, Bogota, Colombia.
   [Tamura, Gabriel] Icesi Univ, ICT Dept, Cali 122135, Colombia.
   [Cleve, Anthony] Univ Namur, PReCISE Res Ctr, Namur, Belgium.
C3 Universite de Lille; Universidad de los Andes (Colombia); Universidad
   ICESI; University of Namur
RP Tamura, G (corresponding author), Univ Lille 1, LIFL CNRS UMR 8022, INRIA Lille Nord Europe, Lille, France.
EM gabriel.tamura@inria.fr; rcasalla@uniandes.edu.co; acl@info.fundp.ac.be;
   laurence.duchien@inria.fr
OI Tamura, Gabriel/0000-0001-5191-1347; Casallas, Rubby/0000-0002-8857-3609
CR [Anonymous], 1972, THEORY PARSING TRANS
   [Anonymous], 1992, Semantics of programming languages: structures and techniques
   [Anonymous], P 1 INT WORKSH QUAL
   Barbacci M., 1995, CMUSEI95TR021
   Bass L., 2013, SOFTWARE ARCHITECTUR
   Becker S, 2008, LECT NOTES COMPUT SC, V4909, P43, DOI 10.1007/978-3-540-68947-8_7
   Beugnard A, 1999, COMPUTER, V32, P38, DOI 10.1109/2.774917
   Braga C, 2009, ELECTRON NOTES THEOR, V203, P103, DOI 10.1016/j.entcs.2009.03.029
   Bruneton E, 2006, SOFTWARE PRACT EXPER, V36, P1257, DOI 10.1002/spe.767
   Bucchiarone A, 2009, 2009 JOINT WORKING IEEE/IFIP CONFERENCE ON SOFTWARE ARCHITECTURE AND EUROPEAN CONFERENCE ON SOFTWARE ARCHITECTURE, P181, DOI 10.1109/WICSA.2009.5290804
   Buschmann F., 2007, PATTERN ORIENTED SOF, V5
   Cansado A, 2010, ELECTRON NOTES THEOR, V263, P95, DOI 10.1016/j.entcs.2010.05.006
   Chang H, 2007, ECBS 2007: 14TH ANNUAL IEEE INTERNATIONAL CONFERENCE AND WORKSHOPS ON THE ENGINEERING OF COMPUTER-BASED SYSTEMS, PROCEEDINGS, P83
   Cheng BHC, 2009, LECT NOTES COMPUT SC, V5525, P1, DOI 10.1007/978-3-642-02161-9_1
   Cheng S.-W., 2006, INT WORKSH SELF AD S, P2, DOI DOI 10.1145/1137677.1137679
   Clements P, 2009, IEEE SOFTWARE, V26, P70, DOI 10.1109/MS.2009.83
   Collet P, 2005, LECT NOTES COMPUT SC, V3489, P187
   Colombo M, 2006, LECT NOTES COMPUT SC, V4294, P191
   Comuzzi M, 2009, ACM T WEB, V3, DOI 10.1145/1541822.1541825
   de Lemos R., 2013, Lecture Notes in Computer Science, V7475, P1, DOI DOI 10.1007/978-3-642-35813-5_1
   Delaval G, 2010, LECT NOTES COMPUT SC, V6092, P93, DOI 10.1007/978-3-642-13238-4_6
   Dougherty C., 2009, CMUSEI2009TR010 CERT
   Ehrig H, 2004, LECT NOTES COMPUT SC, V3256, P161
   Ehrig H., 2009, FUNDAMENTALS ALGEBRA
   Ehrig H, 2010, LECT NOTES COMPUT SC, V6013, P139, DOI 10.1007/978-3-642-12029-9_10
   El Haddad J, 2010, IEEE T SERV COMPUT, V3, P73, DOI 10.1109/TSC.2010.5
   Fiadeiro JL, 2010, LECT NOTES COMPUT SC, V6285, P70, DOI 10.1007/978-3-642-15114-9_8
   Floyd R.W., 1967, P S APPL MATH, V19, P19
   Frolund S, 1998, PROCEEDINGS OF THE FOURTH USENIX CONFERENCE ON OBJECT-ORIENTED TECHNOLOGIES AND SYSTEMS, P1
   Goldsby HJ, 2008, LECT NOTES COMPUT SC, V5301, P568, DOI 10.1007/978-3-540-87875-9_40
   HAREL D, 1988, COMMUN ACM, V31, P514, DOI 10.1145/42411.42414
   HAREL D, 1987, SCI COMPUT PROGRAM, V8, P231, DOI 10.1016/0167-6423(87)90035-9
   Heckel R, 2002, LECT NOTES COMPUT SC, V2505, P161
   Heineman GeorgeT., 2001, COMPONENT BASED SOFT
   Hellerstein Joseph, 2009, IEEE Transactions on Network and Service Management, V6, P206, DOI 10.1109/TNSM.2009.04.090401
   Hnetynka P, 2006, LECT NOTES COMPUT SC, V4063, P352
   HOARE CAR, 1969, COMMUN ACM, V12, P576, DOI 10.1145/363235.363259
   Hopcroft J. E., 2006, INTRO AUTOMATA THEOR
   Jae Yoo Lee, 2009, 2009 7th ACIS International Conference on Software Engineering Research, Management and Applications (SERA 2009), P261, DOI 10.1109/SERA.2009.43
   Keller A., 2003, Journal of Network and Systems Management, V11, P57, DOI 10.1023/A:1022445108617
   Kephart JO, 2003, COMPUTER, V36, P41, DOI 10.1109/MC.2003.1160055
   Kircher Michael., 2004, Pattern-Oriented Software Architecture: Patterns for Resource Management
   Krakowiak S., 2009, Middleware Architecture with Patterns and Frameworks
   Kruchten P, 2006, IEEE SOFTWARE, V23, P22, DOI 10.1109/MS.2006.59
   Léger M, 2010, LECT NOTES COMPUT SC, V6092, P74, DOI 10.1007/978-3-642-13238-4_5
   MATTSON T. G., 2004, Patterns for parallel programming
   MEYER B, 1992, COMPUTER, V25, P40, DOI 10.1109/2.161279
   Ramachandran Jay., 2002, DESIGNING SECURITY A
   Seinturier L, 2009, 2009 IEEE INTERNATIONAL CONFERENCE ON SERVICES COMPUTING, P268, DOI 10.1109/SCC.2009.27
   Shaw M., 1996, SOFTWARE ARCHITECTUR
   Sykes Daniel., 2010, Proceedings of the 2010 ACM Symposium on Applied Computing, SAC '10, P431, DOI DOI 10.1145/1774088.1774180
   Szyperski C., 2002, COMPONENT SOFTWARE, V2nd
   Taentzer G, 2003, LECT NOTES COMPUT SC, V3062, P446
   Tamura G., 2012, THESIS U LILLE 1
   Tamura G., 2011, LECT NOTES COMPUT SC, V6921, P34
   Tran VX, 2009, INT CON ADV INFO NET, P379, DOI 10.1109/AINA.2009.43
   Villegas Norha M., 2011, 2011 ICSE S SOFTW EN, P80
   Zeng LZ, 2004, IEEE T SOFTWARE ENG, V30, P311, DOI 10.1109/TSE.2004.11
   Zeng WJ, 2004, IEEE IMAGE PROC, P565
NR 59
TC 6
Z9 7
U1 0
U2 6
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 15
PY 2014
VL 94
BP 307
EP 332
DI 10.1016/j.scico.2013.12.003
PN 3
PG 26
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA AS1JY
UT WOS:000344038700004
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Brambilla, M
   Fraternali, P
AF Brambilla, Marco
   Fraternali, Piero
TI Large-scale Model-Driven Engineering of web user interaction: The WebML
   and WebRatio experience
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Model-Driven Engineering; Code generation; BPM; IFML; Software
   engineering
AB This paper reports the experience of WebRatio, a company focusing on Model-Driven Engineering (MDE) tools (WebRatio and WebRatio BPM) and services since 2001. The adopted MDE approach is based on the transformation of models expressed in a Domain Specific Language called WebML (Web Modeling Language) into running applications, with the unique feature of creating not only the back-end data and business logic but also the Web/RIA front-end, without posing any limitation on the graphical and interaction quality of the user interface. WebRatio has been applied in many industrial projects, some of which have delivered large-scale enterprise applications, generated and maintained completely through MDE practices over the years. In this paper we present the lessons learned within this experience, describe some success stories and show some quantitative information and evaluation on the usage of the approach. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Brambilla, Marco; Fraternali, Piero] Politecn Milan, Dipartimento Elettron Informaz & Bioingn, I-20133 Milan, Italy.
C3 Polytechnic University of Milan
RP Brambilla, M (corresponding author), Politecn Milan, Dipartimento Elettron Informaz & Bioingn, Via Ponzio 34-5, I-20133 Milan, Italy.
EM marco.brambilla@polimi.it
RI Brambilla, Marco/M-4748-2015
OI Brambilla, Marco/0000-0002-8753-2434
CR Acerbis R, 2008, LECT NOTES BUS INF P, V11, P392
   Acerbis R, 2007, LECT NOTES COMPUT SC, V4607, P539
   Brambilla Marco, 2002, SEBD ITALIAN NATL C, P73
   Ceri S, 2000, COMPUT NETW, V33, P137, DOI 10.1016/S1389-1286(00)00040-2
   Ceri S., 2003, Designing data-intensive Web applications
   Fraternali Piero, 2006, P INT C IND MARK PUR
   Fraternali Piero, 2010, TWEB, V4
   Iseger Martijn, 2010, DOMAIN SPECIFIC MODE
   Kelly S, 2009, IEEE SOFTWARE, V26, P22, DOI 10.1109/MS.2009.109
   Selic B, 2003, IEEE SOFTWARE, V20, P19, DOI 10.1109/MS.2003.1231146
NR 10
TC 27
Z9 29
U1 0
U2 8
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 1
PY 2014
VL 89
SI SI
BP 71
EP 87
DI 10.1016/j.scico.2013.03.010
PN B
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AJ8CA
UT WOS:000337929100002
DA 2024-07-18
ER

PT J
AU Albert, E
   Genaim, S
   Gómez-Zamalloa, M
AF Albert, Elvira
   Genaim, Samir
   Gomez-Zamalloa, Miguel
TI Heap space analysis for garbage collected languages
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Static analysis; Live heap space analysis; Peak memory consumption;
   Low-level languages; Java bytecode; Garbage collection
ID COST-ANALYSIS; INFERENCE
AB Accurately predicting the dynamic memory consumption (or heap space) of programs can be critical during software development. It is well-known that garbage collection (GC) complicates such problem. The peak heap consumption of a program is the maximum size of the data on the heap during its execution, i.e., the minimum amount of heap space needed to safely run the program. Existing heap space analyses either do not take deallocation into account or adopt specific models of garbage collectors which do not necessarily correspond to the actual memory usage. This paper presents a novel static analysis for garbage-collected imperative languages that infers accurate upper bounds on the peak heap usage, including exponential, logarithmic and polynomial bounds. A unique characteristic of the analysis is that it is parametric on the notion of object lifetime, i.e., on when objects become collectible. (C) 2012 Elsevier B.V. All rights reserved.
C1 [Albert, Elvira; Genaim, Samir; Gomez-Zamalloa, Miguel] Univ Complutense Madrid, DSIC, E-28040 Madrid, Spain.
C3 Complutense University of Madrid
RP Genaim, S (corresponding author), Univ Complutense Madrid, DSIC, E-28040 Madrid, Spain.
EM elvira@sip.ucm.es; genaim@gmail.com; mzamalloa@fdi.ucm.es
OI Genaim, Samir/0000-0002-7176-1881; GOMEZ-ZAMALLOA GIL,
   MIGUEL/0000-0003-1557-689X
FU Information & Communication Technologies program of the European
   Commission, Future and Emerging Technologies (FET) [ICT-231620 HATS];
   Spanish Ministry of Science and Innovation (MICINN) [TIN-2008-05624,
   PRI-AIBDE-2011-0900]; Madrid Regional Government [S2009TIC-1465
   PROMETIDOS-CM];  [UCM-BSCH-GR35/10-A-910502]
FX This work was funded in part by the Information & Communication
   Technologies program of the European Commission, Future and Emerging
   Technologies (FET), under the ICT-231620 HATS project, by the Spanish
   Ministry of Science and Innovation (MICINN) under the TIN-2008-05624 and
   PRI-AIBDE-2011-0900 projects, by UCM-BSCH-GR35/10-A-910502 grant and by
   the Madrid Regional Government under the S2009TIC-1465 PROMETIDOS-CM
   project.
CR Albert E, 2007, LECT NOTES COMPUT SC, V4421, P157
   Albert E, 2008, LECT NOTES COMPUT SC, V5382, P113, DOI 10.1007/978-3-540-92188-2_5
   Albert E, 2012, THEOR COMPUT SCI, V413, P142, DOI 10.1016/j.tcs.2011.07.009
   Albert E, 2010, LECT NOTES COMPUT SC, V6337, P100, DOI 10.1007/978-3-642-15769-1_7
   Albert E, 2011, J AUTOM REASONING, V46, P161, DOI 10.1007/s10817-010-9174-1
   Albert E, 2010, ACM SIGPLAN NOTICES, V45, P121
   Albert E, 2009, ISMM'09: PROCEEDINGS OF THE 2009 ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON MEMORY MANAGEMENT, P129
   Albert E, 2007, ISMM'07: PROCEEDINGS OF THE 2007 INTERNATIONAL SYMPOSIUM ON MEMORY MANAGEMENT, P105
   [Anonymous], ISMM
   [Anonymous], 1993, Partial Evaluation and Automatic Program Generation
   Blanchet B., 1999, 14 ANN ACM SIGPLAN C
   Cahoon B., 2001, INT C PAR ARCH COMP
   Cherem S., 2004, INT S MEMORY MANAGEM, P85, DOI DOI 10.1145/1029873.1029884
   Chin W.-N., 2008, ISMM
   Chin WN, 2005, LECT NOTES COMPUT SC, V3672, P70
   Cousot Patrick., 1978, POPL
   Craig SJ, 2003, LECT NOTES COMPUT SC, V2890, P148
   DEUTSCH A, 1994, SIGPLAN NOTICES, V29, P230, DOI 10.1145/773473.178263
   Gulwani S, 2009, ACM SIGPLAN NOTICES, V44, P127, DOI 10.1145/1594834.1480898
   Hoffmann J, 2010, LECT NOTES COMPUT SC, V6012, P287, DOI 10.1007/978-3-642-11957-6_16
   Hofmann M., 2009, P CSL 09
   Hofmann M., 2003, 30 S PRINC PROGR LAN
   Lehner H, 2007, ELECTRON NOTES THEOR, V190, P35, DOI 10.1016/j.entcs.2007.02.059
   Leuschel M, 2002, THEOR PRACT LOG PROG, V2, P461, DOI 10.1017/S147106840200145X
   LINDHOLM T, 1996, JAVA VIRTUAL MACHINE
   Logozzo Francesco, 2007, LNCS, V4349
   Milanova A, 2005, ACM T SOFTW ENG METH, V14, P1, DOI 10.1145/1044834.1044835
   Miné A, 2006, ACM SIGPLAN NOTICES, V41, P54, DOI 10.1145/1134650.1134659
   Otto C, 2010, LEIBNIZ INT PR INFOR, V6, P259, DOI 10.4230/LIPIcs.RTA.2010.259
   PARK YG, 1992, SIGPLAN NOTICES, V27, P116, DOI 10.1145/143103.143125
   Shaham R., 2002, P WORKSH MEM SYST PE, P171
   Spoto F, 2010, ACM T PROGR LANG SYS, V32, DOI 10.1145/1709093.1709095
   Tofte M, 1997, INFORM COMPUT, V132, P109, DOI 10.1006/inco.1996.2613
   Unnikrishnan L, 2003, LECT NOTES COMPUT SC, V2575, P70
   Unnikrishnaw L, 2001, ACM SIGPLAN NOTICES, V36, P102, DOI 10.1145/384196.384212
   Vallee-Rai R., 1999, CASCON 1999, P125
   Wegbreit B., 1975, COMMUNICATIONS ACM, V18
   Whaley J, 2004, ACM SIGPLAN NOTICES, V39, P131, DOI 10.1145/996893.996859
   Wilhelm R, 2008, ACM T EMBED COMPUT S, V7, DOI 10.1145/1347375.1347389
NR 39
TC 8
Z9 8
U1 0
U2 9
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 1
PY 2013
VL 78
IS 9
BP 1427
EP 1448
DI 10.1016/j.scico.2012.10.008
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 179QJ
UT WOS:000321536100012
OA Bronze
DA 2024-07-18
ER

PT J
AU Eugster, P
AF Eugster, Patrick
TI Safe uniform proxies for Java
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Proxy; Object; Java; Byte-code; Transformation; Safety
AB The proxy abstraction has a long-lasting tradition in object-oriented programming. From design patterns to inherent programming language support, and from remote method invocations to simple forms of behavioral reflection, incarnations as well as applications of proxies are innumerable.
   Since version 1.3, Java has supported the concept of a dynamic proxy. Such an object conforms to a set of types specified by the program and can be used wherever an expression of any of these types is expected, yet it reifies invocations performed on it. This ability has allowed dynamic proxies to be used to implement paradigms such as behavioral reflection, structural conformance, or multi-methods. Alas, these proxies are only available "for interfaces". The case of creating dynamic proxies for a set of types including a class has not been addressed, meaning that it is currently not possible to create a dynamic proxy that conforms to an application-defined class type. This weakness strongly limits any application of dynamic proxies beyond the inherent limitations of proxies, which have motivated deeper programming language support for features such as behavioral reflection.
   In this paper, we unfold the current support for dynamic proxies in Java, assessing it in the light of a set of generic criteria for proxy implementations. We present an approach to supporting dynamic proxies "for classes", consisting in transformations performed on classes at load-time, including a generic scheme for enforcing encapsulation upon field accesses. These transformations seamlessly extend the scope of the current support for dynamic proxies from the programmer's perspective. We argue for the safety of our transformations, and discuss the precise benefits and costs of our extension in terms of the criteria introduced through an implementation of future method invocations balancing safety and transparency. (C) 2012 Elsevier B.V. All rights reserved.
C1 Purdue Univ, Dept Comp Sci, W Lafayette, IN 47906 USA.
C3 Purdue University System; Purdue University
RP Eugster, P (corresponding author), Purdue Univ, Dept Comp Sci, W Lafayette, IN 47906 USA.
EM peugster@cs.purdue.edu
CR Agesen O., OOPSLA 97
   Alpern B, 2005, IBM SYST J, V44, P399, DOI 10.1147/sj.442.0399
   Apache Jakarta, BYT COD ENG LIB BCEL
   ASM, OBJ WEB OP SOURC MID
   Bacon D., 2002, ISCOPE 2002
   Boss J, JBOSS 3 0
   Buhr PA, 2000, IEEE T SOFTWARE ENG, V26, P820, DOI 10.1109/32.877844
   Caromel D, 1998, CONCURRENCY-PRACT EX, V10, P1043, DOI 10.1002/(SICI)1096-9128(199809/11)10:11/13<1043::AID-CPE413>3.0.CO;2-6
   Caromel D., 2001, ECOOP 2001
   Caromel D., POPL 04
   CHIBA S, 2000, ECOOP 2000
   Dony C., 2006, CHAPTER EXCEPTION HA, P141
   Eliasson A, IMPLEMENT DESIGN CON
   Eugster P, 2006, OOPSLA 2006
   Eugster PT, 2005, CONCURR COMP-PRACT E, V17, P1053, DOI 10.1002/cpe.842
   Flatt Matthew., 1999, FORMAL SYNTAX SEMANT, V1523, P241, DOI [10.1007/3-540-48737-9_7, DOI 10.1007/3-540-48737-9_7]
   Gamma E., 1994, Design patterns: Elements of reusable object-oriented software
   Golm M., P 2 ACM INT C MET AR
   GONG L., 1999, INSIDE JAVA 2 PLATFO
   HERLIHY MP, 1990, ACM T PROGR LANG SYS, V12, P463, DOI 10.1145/78969.78972
   Igarashi A, 2001, ACM T PROGR LANG SYS, V23, P396, DOI 10.1145/503502.503505
   Kalixia, 2003, JADVISE
   Keen A.W., EUROPAR 02
   Kegel H., 2008, ICSE
   Keller R., ECOOP 98, V98
   KICZALES G, ECOOP 97
   KICZALES J, 1991, ART METAOBJECT PROTO
   Kienzle J., 2002, ECOOP 2002
   Liebermann H., OOPSLA 86
   Lindholm Tim., 1999, JAVA VIRTUAL MACHINE, V2nd
   McGachey P., 2009, BYTECODE 2009
   McGachey P., 2009, GPCE 2009
   MEYER B, 1992, COMPUTER, V25, P40, DOI 10.1109/2.161279
   Mostinckx S, 2006, LECT NOTES COMPUT SC, V4119, P141
   Oracle, JAV COR REFL API SPE
   Oracle, JAV PLATF 1 5 API SP
   Pratikakis P., 2004, OOPSLA
   Rivard F, REFLECTION 96
   Shapiro M, ICDCS 86
   Spring Source, SPRING FRAM
   Steimann F., 2007, J OBJECT TECHNOLOGY, V6
   Steimann F, 2005, J OBJECT TECHNOL, V4, P75, DOI 10.5381/jot.2005.4.5.a1
   Takada T., 1987, Object-Oriented Concurrent Programming, Computer Systems Series, P55
   Tatsubori M., 2001, ECOOP 2001
   Thai T., 2001, NET FRAMEWORK ESSENT
   Tilevich E., 2002, ECOOP 2002
   Tilevich E, 2009, ACM T SOFTW ENG METH, V19, DOI 10.1145/1555392.1555394
   Welc A., 2004, ECOOP 2004
   WELC A, 2005, OOPSLA
   Welch I., COOTS 01
   Welch I., REFLECTION 99
NR 51
TC 0
Z9 0
U1 0
U2 8
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 1
PY 2013
VL 78
IS 9
BP 1490
EP 1520
DI 10.1016/j.scico.2012.10.012
PG 31
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 179QJ
UT WOS:000321536100015
OA hybrid
DA 2024-07-18
ER

PT J
AU Kwiatkowski, LM
   Verhoef, C
AF Kwiatkowski, L. M.
   Verhoef, C.
TI Recovering management information from source code
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE IT-portfolio management; Management information; Source code analysis;
   Lexical analysis; Latent Semantic Indexing LSI; Source code comments;
   Compilers; Obsolete language constructs; Volatility; Vendor locks;
   Legacy systems; Operational risk; Technology risk; Risk mitigation; Cost
   control; Market value; Scenario analysis; IT assets; IT metrics;
   Automated data extraction; Information retrieval; Cobol; Case study
ID SOFTWARE; ARCHITECTURE; MAINTENANCE; COMPLEXITY; ISSUES; SYSTEM; COBOL
AB IT has become a production means for many organizations and an important element of business strategy. Even though its effective management is a must, reality shows that this area still remains in its infancy. IT management relies profoundly on relevant information which enables risk mitigation or cost control. However, the needed information is either missing or its gathering boils down to daunting tasks. We propose an approach to recovery of management information from the essence of IT; the software's source code. In this paper we show how to employ source code analysis techniques and recover management information. In our approach we exploit the potential of the concealed data which resides in the source code statements, source comments, and also compiler listings. We show how to depart from the raw sources, extract data, organize it, and eventually utilize so that the bit level data provides IT executives with support at the portfolio level. Our approach is pragmatic as we rely on real management questions, best practices in software engineering, and also IT market specifics. We enable, for instance, an assessment of the IT-portfolio market value, support for carrying out what-if scenarios, or identification and evaluation of the hidden risks for IT-portfolio maintainability. The study is based on a real-life IT-portfolio which supports business functions of an organization operating in the financial sector. The IT-portfolio comprises Cobol applications run on a mainframe with the total number of lines of code amounting to over 18 million. The approach we propose is suited for facilitation within a large organization. It provides for a fact-based support for strategic decision making at the portfolio level. (C) 2012 Elsevier B.V. All rights reserved.
C1 [Kwiatkowski, L. M.; Verhoef, C.] Vrije Univ Amsterdam, Dept Comp Sci, NL-1081 HV Amsterdam, Netherlands.
C3 Vrije Universiteit Amsterdam
RP Kwiatkowski, LM (corresponding author), Vrije Univ Amsterdam, Dept Comp Sci, Boelelaan 1081A, NL-1081 HV Amsterdam, Netherlands.
EM lukasz@cs.vu.nl; x@cs.vu.nl
FU Dutch Joint Academic and Commercial Quality Research & Development
   (Jacquard) program on Software Engineering Research [638.004.405,
   638.003.611]
FX This research received partial support by the Dutch Joint Academic and
   Commercial Quality Research & Development (Jacquard) program on Software
   Engineering Research under contract 638.004.405 EQUITY: Exploring
   Quantifiable Information Technology Yields and under contract
   638.003.611 Symbiosis: Synergy of managing business-IT-alignment,
   IT-sourcing and off-shoring success in society. Furthermore, we would
   like to thank a number of organizations that will remain anonymous for
   kindly sharing their code and data with us. Also, we are grateful to our
   colleagues Steven Klusener and Rob Peters for useful insights. Moreover,
   we thank Capers Jones and the anonymous reviewers for commenting on this
   article.
CR ADAMO DA, 2007, IEEE EQUITY 2007
   ALBRECHT AJ, 1979, JOINT SHARE GUIDE IB, P83
   [Anonymous], 1995, The Capability Maturity Model: Guidelines for Improving the Software Process
   [Anonymous], 2012, E HDB STAT METHODS
   [Anonymous], 2000, ADDISON WESLEY INFOR
   [Anonymous], PROGRAMMING LANGUAGE
   [Anonymous], 2005, ARCHITECTURAL BLUEPR
   Anquetil N, 1999, J SOFTW MAINT-RES PR, V11, P201, DOI 10.1002/(SICI)1096-908X(199905/06)11:3<201::AID-SMR192>3.0.CO;2-1
   Arranga E, 2000, IEEE SOFTWARE, V17, P70
   Berry MW, 1995, SIAM REV, V37, P573, DOI 10.1137/1037127
   Bisbal J, 1999, IEEE SOFTWARE, V16, P103, DOI 10.1109/52.795108
   Bloem J., 2006, MAKING IT GOVERNANCE
   Boehm B.W., 2000, International Conference on Software Engineering. Proceedings of the Conference on The Future of Software Engineering, P319
   *CAN SOFTW, CANAM COMPOSER OVERV
   Cheung Y., 1999, Benchmarking: An International Journal, V6, P269, DOI DOI 10.1108/14635779910288532
   De Lucia A, 2004, PROC IEEE INT CONF S, P306, DOI 10.1109/ICSM.2004.1357816
   DEERWESTER S, 1990, J AM SOC INFORM SCI, V41, P391, DOI 10.1002/(SICI)1097-4571(199009)41:6<391::AID-ASI1>3.0.CO;2-9
   DEKKERS C, 2000, USING BACKFIRING TO
   DEMARCO T, 1982, YOURDON COMPUTING SE
   DENNIS S, FP LITE AN ALTERNATI
   DEURSEN A, 1998, TECHNICAL REPORT
   Dibbern J., 2004, Data Base for Advances in Information Systems, V35, P6, DOI 10.1145/1035233.1035236
   DREGER JB, 1989, FUNCTION POINT ANALY
   Dumais S., 1992, ENHANCING PERFORMANC
   DUMAIS ST, 1991, BEHAV RES METH INS C, V23, P229, DOI 10.3758/BF03203370
   DUMAIS ST, 1992, SIGIR 92 : PROCEEDINGS OF THE FIFTEENTH ANNUAL INTERNATIONAL ACM SIGIR CONFERENCE ON RESEARCH AND DEVELOPMENT IN INFORMATION RETRIEVAL, P233
   DUTTA S, 2007, RECOGNIZING THE TRUE
   EBBERS M, 2006, INTRODUCTION TO THE
   *ECUBE SYSTEMS LLC, COOL GEN HISTORY
   Eveleens JL, 2009, SCI COMPUT PROGRAM, V74, P934, DOI 10.1016/j.scico.2009.09.005
   Eveleens JL, 2010, IEEE SOFTWARE, V27, P30, DOI 10.1109/MS.2009.154
   Everitt B.S., 2006, HDB STAT ANAL USING
   Faust D, 2003, SOFTWARE PRACT EXPER, V33, P933, DOI 10.1002/spe.530
   Fenton NE, 1999, J SYST SOFTWARE, V47, P149, DOI 10.1016/S0164-1212(99)00035-7
   FOCUS M, 2009, NO RESPECT SURVEY SH
   Garmus David., 2001, AW INFORMAT
   *GARTN INC, 2009, GARTNER SAYS WORLDWI
   Garvey P., 2000, PROBABILITY METHODS
   Girba T, 2004, PROC IEEE INT CONF S, P40, DOI 10.1109/ICSM.2004.1357788
   *GNU, 2010, TECHNICAL REPORT
   Grady R.B., 1987, SOFTWARE METRICS EST, V1
   GRAVES TL, 1999, PREDICTING FAULT INC, pR20
   *HARV BUS REV AN S, UNLOCKING THE VALUE
   *HEWL PACK, HP 3000 MANUALS HP C
   HINZ S, 2009, MYSQL REFERENCE MANU
   *IBM, 1997, COBOL ON THE ZOS OS3, P390
   *IFPUG, 1999, TECHNICAL REPORT
   *ISO IEC, 2002, ISO IEC 1989 2002 E
   JONES C, 1994, COMPUTER, V27, P98, DOI 10.1109/2.312055
   JONES C, 1998, THE YEAR 2000 SOFTWA
   JONES C, 1996, PATTERNS OF SOFTWARE
   KAHM L, BUILDING AN EARLY WA
   KAMPSTRA P, RELIABILITY OF FUNCT
   Kaplan R.S., 1996, The balanced scorecard: translating strategy into action
   Kawaguchi S, 2006, J SYST SOFTWARE, V79, P939, DOI 10.1016/j.jss.2005.06.044
   KEMERER CF, 1993, COMMUN ACM, V36, P85, DOI 10.1145/151220.151230
   Kersten B., 2003, Cutter IT Journal, V16, P27
   KIRKPATRICK TA, 2000, RESEARCH CIOS SPEAK, V1
   Klint P, 2002, DATA KNOWL ENG, V41, P141, DOI 10.1016/S0169-023X(02)00038-1
   KLINT P, 1998, PROCEEDINGS OF THE I, P1
   Klusener AS, 2005, SCI COMPUT PROGRAM, V54, P143, DOI 10.1016/j.scico.2004.03.012
   Klusener AS, 2004, SOFTWARE QUAL J, V12, P297, DOI 10.1023/B:SQJO.0000039790.04885.13
   KRIKHAAR RL, 1999, THESIS
   Kuhn A, 2007, INFORM SOFTWARE TECH, V49, P230, DOI 10.1016/j.infsof.2006.10.017
   KULK E, 2009, THESIS
   Kulk GP, 2008, SCI COMPUT PROGRAM, V72, P136, DOI 10.1016/j.scico.2008.04.003
   KWIATKOWSKI L, REDUCING OPERATIONAL
   KWIATKOWSKI LM, 2005, THESIS
   Lämmel R, 2001, IEEE SOFTWARE, V18, P78, DOI 10.1109/52.965809
   Lammel Ralf, 2002, TECHNICAL REPORT
   Maletic JI, 2000, PROC INT C TOOLS ART, P46, DOI 10.1109/TAI.2000.889845
   *MATA GROUP, 2002, TECHNICAL REPORT
   *MATHWORKS INC, 2010, MATLAB TECHNICAL REP
   McCabe T. J., 1976, IEEE Transactions on Software Engineering, VSE-2, P308, DOI 10.1109/TSE.1976.233837
   MCCABE TJ, 1989, COMMUN ACM, V32, P1415, DOI 10.1145/76380.76382
   MOSTELLER F, 1977, DATA REDUCTION AND R
   MULLER H, 1994, THE 62ND CONGRESS OF, V26, P41
   *NIST SEMATECH, 2012, E HANDBOOK OF STATIS
   OBRIEN L, 2002, TECHNICAL REPORT CMU
   Peters RJ, 2008, SCI COMPUT PROGRAM, V71, P17, DOI 10.1016/j.scico.2007.11.001
   PITTS DR, 1997, CROSSTALK J DEFENSE
   PORTER PH, 2001, THESIS
   RUBIN H, 2002, TECHNICAL REPORT
   Salton G., 1987, Technical report
   Schricker D, 2000, IEEE SOFTWARE, V17, P48, DOI 10.1109/52.841606
   Sellink A, 1999, PROG COMPREHEN, P38, DOI 10.1109/WPC.1999.777742
   Sellink A, 2002, SCI COMPUT PROGRAM, V45, P193, DOI 10.1016/S0167-6423(02)00061-8
   SELLINK A, 1999, ICSM99 PROCEEDINGS O, P245
   SELLINK A, 1997, TECHNICAL REPORT
   SELLINK A, 2000, CSMR 00 P C SOFTW MA, P161
   SHEPPERD M, 1988, SOFTWARE ENG J, V3, P30, DOI 10.1049/sej.1988.0003
   Sneed HM, 2003, PROC IEEE INT CONF S, P190, DOI 10.1109/ICSM.2003.1235421
   *SOFTMAINT, FAST FOR COOL GEN EL
   *SOFTW ENG I, 1997, HANDBOOK CMU SEI 97
   *SRDI, 2000, COBOL 85 LANGUAGE RE
   *STERL SOFTW INC, COMPANY ADDS NEW FEA
   Stoermer C, 2003, 10TH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P46, DOI 10.1109/WCRE.2003.1287236
   Stoermer C, 2002, NINTH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P151, DOI 10.1109/WCRE.2002.1173073
   STOERMER C, 2003, TECHNICAL REPORT CMU
   STRASSMANN P, 1997, WILL BIG SPENDING ON
   Terekhov AA, 2000, IEEE SOFTWARE, V17, P111, DOI 10.1109/52.895180
   *TSG SOFTW, CA TELON
   Tukey J.W., 1977, EXPLORATORY DATA ANA, V2
   van den Brand M., 1996, SOFSEM '96: Theory and Practice of Informatics. 23rd Seminar on Current Trends in Theory and Practice of Informatics. Proceedings, P235, DOI 10.1007/BFb0037407
   van den Brand M., 1998, ELECT NOTES THEORETI, V15, P218
   Van den Brand M.G.J., 1997, ACM SIGSOFT SOFTWARE, V22, P57
   van Deursen A, 1999, LECT NOTES COMPUT SC, V1577, P1
   VANDERSPEK P, 2007, COMPLEMENTING SOFTWA
   VANGEET J, 2007, THIRD INTERNATIONAL
   VEERMAN N, 2007, THESIS
   Veerman N, 2006, SCI COMPUT PROGRAM, V62, P287, DOI 10.1016/j.scico.2006.04.006
   Veerman N, 2006, SOFTWARE PRACT EXPER, V36, P1605, DOI 10.1002/spe.745
   VENABLES WN, 2010, TECHNICAL REPORT
   Verhoef C, 2007, SCI COMPUT PROGRAM, V67, P247, DOI 10.1016/j.scico.2007.01.010
   Verhoef C, 2005, SCI COMPUT PROGRAM, V56, P315, DOI 10.1016/j.scico.2004.08.004
   Verhoef C, 2005, SCI COMPUT PROGRAM, V56, P275, DOI 10.1016/j.scico.2004.08.003
   Verhoef C, 2000, ANN SOFTW ENG, V9, P315, DOI 10.1023/A:1018941228255
   Verhoef C, 2003, THIRD IEEE INTERNATIONAL WORKSHOP ON SOURCE CODE ANALYSIS AND MANIPULATION - PROCEEDINGS, P77, DOI 10.1109/SCAM.2003.1238033
   Verhoef C, 2002, SCI COMPUT PROGRAM, V45, P1, DOI 10.1016/S0167-6423(02)00106-5
   Wall L., 1991, PROGRAMMING PERL
   Wall Larry., 1996, PROGRAMMING PERL, Vsecond
   Wild F., 2005, P 9 INT COMP ASS ASS, P485
NR 122
TC 3
Z9 4
U1 1
U2 20
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 1
PY 2013
VL 78
IS 9
BP 1368
EP 1406
DI 10.1016/j.scico.2012.07.016
PG 39
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 179QJ
UT WOS:000321536100010
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Sutton, A
   Maletic, JI
AF Sutton, Andrew
   Maletic, Jonathan I.
TI Emulating C++0x concepts
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE C plus; Concepts; Generic libraries
ID GENERIC LIBRARIES; SUPPORT
AB A library for the emulation of C++0x concepts developed using the emerging C++11 programming language is presented. The library integrates existing techniques for concept checking and template metaprogramming to provide a uniform interface to defining and using concepts. The purpose of this work is to establish a concrete foundation for experimentation of design techniques for concepts and to motivate and evaluate language design. The viability of the approach is demonstrated by applying it to characterize a number of previously identified usability problems with concepts in the proposed C++0x language. In particular, issues related to the use of explicit and automatic concepts in generic library design from the perspective of this experiment are examined. Issues related to concept refinement, default implementations of requirements, and the generation of error messages are also discussed. (C) 2012 Elsevier B.V. All rights reserved.
C1 [Sutton, Andrew; Maletic, Jonathan I.] Kent State Univ, Dept Comp Sci, Kent, OH 44242 USA.
C3 University System of Ohio; Kent State University; Kent State University
   Kent; Kent State University Salem
RP Sutton, A (corresponding author), Kent State Univ, Dept Comp Sci, Kent, OH 44242 USA.
EM asutton@cs.tamu.edu; jmaletic@kent.edu
CR Abrahams D., 2005, C DEPTH SERIES
   Alexandrescu A., 2000, GENERICPROGRAMMING M
   Alexandrescu A., 2001, MODERN C DESIGN GENE
   [Anonymous], C REPORT
   Austern MatthewH., 1998, Generic programming and the STL: Using and extending the C++ Standard Template Library
   Becker P., 2009, 1 ISOIEC JTC
   Coplien J.O., 1995, C++ REP, V7, P24
   David V, 2009, IEEE INT WORK C SO, P147, DOI 10.1109/SCAM.2009.26
   Dos Reis G, 2006, ACM SIGPLAN NOTICES, V41, P295, DOI 10.1145/1111320.1111064
   Garcia R, 2003, ACM SIGPLAN NOTICES, V38, P115, DOI 10.1145/949343.949317
   Gregor D., 2009, CONCEPTGCC
   Gregor D, 2006, ACM SIGPLAN NOTICES, V41, P291, DOI 10.1145/1167515.1167499
   Järvi J, 2003, LECT NOTES COMPUT SC, V2830, P228
   McNamara B., 2000, 1 WORKSH C TEMPL MET, V10, P12
   MUSSER DR, 1994, SOFTWARE PRACT EXPER, V24, P623, DOI 10.1002/spe.4380240703
   Siek J, 2005, LECT NOTES COMPUT SC, V3676, P405
   Siek J., 2000, 1 WORKSH C TEMPL PRO, P12
   Siek J., 2005, 1 ISOIEC JTC
   Stepanov Alexander, 2009, ELEMENTS PROGRAMMING
   Stroustrup B., 2009, 1 ISOIEC JTC
   STROUSTRUP B, 2005, 1 ISOIEC JTC
   Stroustrup B., 2009, DOBBS           0722
   Stroustrup B., 1994, The Design and Evolution of C++
   Veldhuizen T., 1995, C++ Report, V7, P26
   Zólyomi I, 2004, LECT NOTES COMPUT SC, V3286, P266
NR 25
TC 1
Z9 2
U1 0
U2 3
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 1
PY 2013
VL 78
IS 9
BP 1449
EP 1469
DI 10.1016/j.scico.2012.10.009
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 179QJ
UT WOS:000321536100013
OA hybrid
DA 2024-07-18
ER

PT J
AU Meng, S
   Arbab, F
   Aichernig, BK
   Astefanoaei, L
   de Boer, FS
   Rutten, J
AF Meng, Sun
   Arbab, Farhad
   Aichernig, Bernhard K.
   Astefanoaei, Lacramioara
   de Boer, Frank S.
   Rutten, Jan
TI Connectors as designs: Modeling, refinement and test case generation
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Connector; Reo circuits; Timed data sequence; Design; Refinement; Test
   case generation
ID SEMANTICS; REO
AB Over the past years, the need for high-confidence coordination mechanisms has intensified as new technologies have appeared for the development of service-oriented applications, making formalization of coordination mechanisms critical. Unifying Theories of Programming (UTP) provide a formal semantic foundation not only for programming languages but also for various expressive specification languages. A key concept in UTP is design: the familiar pre/post-condition pair that describes a contract. In this paper we use UTP to formalize Reo connectors, whereby connectors are interpreted as designs in UTP. This model can be used as a semantic foundation for proving properties of connectors, such as equivalence and refinement relations between connectors. Furthermore, it can be used as a reference document for developing tool support for Reo, such as test case generators. A fault-based method to generate test cases for component connectors from specifications is also provided in this paper. For connectors, faults are caused by possible errors during the development process, such as wrongly used channels, missing or redundant subcircuits, or circuits with wrongly constructed topology. We give test cases and connectors a unifying formal semantics by using the notion of design in UTP, and generate test cases by solving constraints obtained from a specification and a faulty implementation. A prototype serves to demonstrate the automatization of the approach. (c) 2011 Elsevier B.V. All rights reserved.
C1 [Meng, Sun] Peking Univ, Sch Math Sci, LMAM, Beijing 100871, Peoples R China.
   [Meng, Sun; Arbab, Farhad; Astefanoaei, Lacramioara; de Boer, Frank S.; Rutten, Jan] CWI, NL-1009 AB Amsterdam, Netherlands.
   [Aichernig, Bernhard K.] Graz Univ Technol, Inst Software Technol, A-8010 Graz, Austria.
C3 Peking University; Graz University of Technology
RP Meng, S (corresponding author), Peking Univ, Sch Math Sci, LMAM, Beijing 100871, Peoples R China.
EM sunmeng@math.pku.edu.cn; Farhad.Arbab@cwi.nl; aichernig@ist.tugraz.at;
   L.Astefanoaei@cwi.nl; F.S.de.Boer@cwi.nl; Jan.Rutten@cwi.nl
OI Aichernig, Bernhard/0000-0002-3484-5584
FU GLANCE of the Dutch National Organization for Scientific Research (NWO)
   [600.643.000.05N12]; DFG-NWO
FX The authors are indebted to our colleagues, especially Milad Niqui and
   Christel Baier for helpful discussions, and Jifeng He for the
   constructive comments on an earlier version of the paper which helped to
   simplify the model and improved this paper. The work reported in this
   paper is supported by a grant from the GLANCE funding program of the
   Dutch National Organization for Scientific Research (NWO), through
   project CooPer (600.643.000.05N12), and the DFG-NWO-project SYANCO.
CR Abrial J.-R., 1996, B BOOK ASSIGNING PRO
   Aichernig B. K., 2003, Formal Aspects of Computing, V15, P280, DOI 10.1007/s00165-003-0011-8
   Aichernig BK, 2009, THIRD INTERNATIONAL SYMPOSIUM ON THEORETICAL ASPECTS OF SOFTWARE ENGINEERING, PROCEEDINGS, P147, DOI 10.1109/TASE.2009.14
   Aichernig BK, 2009, FORM ASP COMPUT, V21, P33, DOI 10.1007/s00165-008-0083-6
   Aichernig BK, 2005, QSIC 2005: FIFTH INTERNATIONAL CONFERENCE ON QUALITY SOFTWARE, PROCEEDINGS, P64
   Arbab F, 2004, MATH STRUCT COMP SCI, V14, P329, DOI 10.1017/S0960129504004153
   Arbab F, 2004, PROCEEDINGS OF THE SECOND INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING AND FORMAL METHODS, P198, DOI 10.1109/SEFM.2004.1347521
   Arbab F, 2003, LECT NOTES COMPUT SC, V2755, P34
   Back R.-J., 1998, Refinement Calculus
   Baier C, 2005, J UNIVERS COMPUT SCI, V11, P1718
   Baier C, 2006, SCI COMPUT PROGRAM, V61, P75, DOI 10.1016/j.scico.2005.10.008
   Balland E., 2006, ELECT COMMUNICATIONS, V3
   Clarke D, 2007, SCI COMPUT PROGRAM, V66, P205, DOI 10.1016/j.scico.2007.01.009
   Clavel M, 2002, THEOR COMPUT SCI, V285, P187, DOI 10.1016/S0304-3975(01)00359-0
   DENICOLA R, 1984, THEOR COMPUT SCI, V34, P83, DOI 10.1016/0304-3975(84)90113-0
   Dick J., 1993, FME'93: Industrial-Strength Formal Methods. First International Symposium of Formal Methods Europe Proceedings, P268, DOI 10.1007/BFb0024651
   du Bousquet L., 1999, 14th IEEE International Conference on Automated Software Engineering, P208, DOI 10.1109/ASE.1999.802255
   Fernandez JC, 1997, SCI COMPUT PROGRAM, V29, P123, DOI 10.1016/S0167-6423(96)00032-9
   Guyon J., 2004, ELECT NOTES THEORETI, V107, P33
   HAMLET RG, 1977, IEEE T SOFTWARE ENG, V3, P279, DOI 10.1109/TSE.1977.231145
   He JF, 2006, THEOR COMPUT SCI, V365, P109, DOI 10.1016/j.tcs.2006.07.034
   Hoare C. A. R., 1998, Unifying Theories of Programming
   Hoare CAR., 1985, Communicating Sequential Processes
   Jones CB., 1990, SYSTEMATIC SOFTWARE
   Kirchner C, 2008, LECT NOTES COMPUT SC, V5196, P275, DOI 10.1007/978-3-540-88282-4_26
   Meng S, 2009, ELECTRON NOTES THEOR, V255, P119, DOI 10.1016/j.entcs.2009.10.028
   Meseguer J, 2004, LECT NOTES ARTIF INT, V3097, P1
   Meudec C, 2001, SOFTW TEST VERIF REL, V11, P81, DOI 10.1002/stvr.225
   *OBJ MAN GROUP, 2007, UN MOD LANG SUP VERS
   Oliveira M, 2007, ELECTRON NOTES THEOR, V187, P107, DOI 10.1016/j.entcs.2006.08.047
   Papazoglou MP, 2003, COMMUN ACM, V46, P25, DOI 10.1145/944217.944233
   Peleska J., 1996, FME '96: Industrial Benefit and Advances in Formal Methods. Third International Symposium of Formal Methods Europe. Proceedings, P538
   Petrenko A., 2001, Modeling and verification of parallel processes, P196
   Qin SC, 2003, LECT NOTES COMPUT SC, V2805, P321
   *RAISE LANG GROUP, 1992, RAISE SPEC LANG
   Rusu V, 2000, LECT NOTES COMPUT SC, V1945, P338
   Sherif A, 2002, LECT NOTES COMPUT SC, V2495, P613
   Tretmans J, 1996, SOFTWARE-CONC TOOL, V17, P103
   Tretmans J, 1999, LECT NOTES COMPUT SC, V1664, P46
   Wong W. E., 2001, ADV DATABASE SYSTEMS
NR 40
TC 14
Z9 14
U1 0
U2 14
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUL 1
PY 2012
VL 77
IS 7-8
SI SI
BP 799
EP 822
DI 10.1016/j.scico.2011.04.002
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 944DU
UT WOS:000304179400003
OA Bronze
DA 2024-07-18
ER

PT J
AU Jovic, M
   Hauswirth, M
AF Jovic, Milan
   Hauswirth, Matthias
TI Listener latency profiling: Measuring the perceptible performance of
   interactive Java applications
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 6th International Conference on the Principles and Practice of
   Programming in Java (PPPJ 2008)
CY SEP 08-11, 2008
CL Modena, ITALY
DE Event-based applications; Listeners; Latency; Profiling
AB When developers need to improve the performance of their applications, they usually use one of the many existing profilers. These profilers generally capture a profile that represents the execution time spent in each method. The developer can thus focus her optimization efforts on the methods that consume the most time. In this paper we argue that this type of profile is insufficient for tuning interactive applications. Interactive applications respond to user events, such as mouse clicks and key presses. The perceived performance of interactive applications is directly related to the response time of the program.
   In this paper we present listener latency profiling, a profiling approach with two distinctive characteristics. First, we call it latency profiling because it helps developers to find long latency operations. Second, we call it listener profiling because it abstracts away from method-level profiles to compute the latency of the various listeners. This allows a developer to reason about performance with respect to listeners, also called observers, the high level abstraction at the core of any interactive Java application.
   We present our listener latency profiling approach, describe LiLa, our implementation, validate it on a set of microbenchmarks, and evaluate it on a complex real-world interactive application. We then perform case studies where we use LiLa to tune the perceptible performance of two interactive applications, and we show that LiLa is able to pinpoint performance problems even if their causes are embedded in the largest interactive Java application we are aware of. (C) 2010 Elsevier B.V. All rights reserved.
C1 [Jovic, Milan; Hauswirth, Matthias] Univ Lugano, Fac Informat, Lugano, Switzerland.
C3 Universita della Svizzera Italiana
RP Jovic, M (corresponding author), Univ Lugano, Fac Informat, Lugano, Switzerland.
EM jovicm@lu.unisi.ch; Matthias.Hauswirth@unisi.ch
CR Cantrill BM, 2004, USENIX ASSOCIATION PROCEEDINGS OF THE GENERAL TRACK 2004 USENIX ANNUAL TECHNICAL CONFERENCE, P15
   Ceaparu I., 2004, INT J HUMAN COMPUTER, V7
   Dabrowski J.R., 2001, P SIGCHI C HUMAN FAC, P317
   *ECL FDN, 2009, ECL PROJ
   *ECL FDN, 2005, PERFORMANCESTATS API
   Endo Y, 1996, PROCEEDINGS OF THE SECOND SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION (OSDI '96), P185, DOI 10.1145/248155.238775
   ENDO Y, 2000, SIGMETRICS 00, P240
   FLAUTNER K, 2000, ASPLOS 9, P129
   Kiczales Gregor., 2001, Proceedings of the 15th European Conference on Object-Oriented Programming, P327
   MACKENZIE IS, 1993, HUMAN FACTORS IN COMPUTING SYSTEMS, P488
   MCAFFER J., 2005, ECLIPSE RICH CLIENT
   Northover S., 2004, Swt: the standard widget toolkit, V1
   *OBJECTWEB, ASM
   Pearce DJ, 2007, SOFTWARE PRACT EXPER, V37, P747, DOI 10.1002/spe.788
   Richardson T, 1998, IEEE INTERNET COMPUT, V2, P33, DOI 10.1109/4236.656066
   Shneiderman B., 1986, DESIGNING USER INTER
   SHNEIDERMAN B, 1984, ACM COMPUTING SURVEY, V16
   Walrath Kathy., 2004, The JFC Swing Tutorial: A Guide to Constructing GUIs, VSecond
   ZELDOVICH N, 2005, ATEC 05, P189
NR 19
TC 7
Z9 8
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 1
PY 2011
VL 76
IS 11
SI SI
BP 1054
EP 1072
DI 10.1016/j.scico.2010.04.009
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 791ND
UT WOS:000292671000006
OA Bronze
DA 2024-07-18
ER

PT J
AU Carette, J
   Kucera, M
AF Carette, Jacques
   Kucera, Michael
TI Partial evaluation of Maple
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT Workshop on Partial Evaluation and Program Manipulation
CY JAN 15-16, 2007
CL Nice, FRANCE
DE Maple; Symbolic computation; Partial evaluation; Residual theorems
AB Having been convinced of the potential benefits of partial evaluation, we wanted to apply these techniques to code written in Maple, our Computer Algebra System of choice. Maple is a very large language, with a number of non-standard features. When we tried to implement a partial evaluator for it, we ran into a number of difficulties for which we could find no solution in the literature. Undaunted, we persevered and ultimately implemented a working partial evaluator with which we were able to very successfully conduct our experiments, first on small codes, and now on actual routines taken from Maple's own library. Here, we document the techniques we had to invent or adapt to achieve these results. (C) 2010 Elsevier B.V. All rights reserved.
C1 [Carette, Jacques] McMaster Univ, Hamilton, ON L8S 4K1, Canada.
C3 McMaster University
RP Carette, J (corresponding author), McMaster Univ, 1280 Main St W, Hamilton, ON L8S 4K1, Canada.
EM carette@mcmaster.ca; mikekucera@gmail.com
OI Carette, Jacques/0000-0001-8993-9804
CR ALBERT E, 2002, J FUNCTIONAL LOGIC P, DOI DOI 10.1017/S147106840200145X
   ANAND C, 2004, MAPL SUMM WORKSH
   ANAND CK, 2005, MAPL C 2005 P MAPL, P198
   Andersen L. O., 1993, Proceedings of the ACM SIGPLAN Symposium on Partial Evaluation and Semantics-Based Program Manipulation. PEPM'93, P47, DOI 10.1145/154630.154636
   ANDERSEN LO, 1992, LECT NOTES COMPUT SC, V641, P251
   ANDERSEN LO, 1992, C PROGRAM SPECIALIZA
   [Anonymous], 1993, Partial Evaluation and Automatic Program Generation
   [Anonymous], 1998, Modern Compiler Implementation in C
   Ballarin C., 2004, SIGSAM Bulletin, V38, P33, DOI 10.1145/1041791.1041793
   Carette J, 2005, LECT NOTES COMPUT SC, V3676, P256
   Carette J., 2007, ACM SIGPLAN 2007 WOR, P41
   Carette J, 2006, SCI COMPUT PROGRAM, V62, P3, DOI 10.1016/j.scico.2005.10.012
   Christensen NH, 2004, ACM T PROGR LANG SYS, V26, P191, DOI 10.1145/963778.963784
   Elphick D, 2003, LECT NOTES COMPUT SC, V2830, P344
   FORREST S, 2007, THESIS MCMASTER U
   GRUNTZ D, 1994, COMMUN COMPUT PHYS, V28, P3
   KUCERA M, 2006, THESIS MCMASTER U
   Leuschel M, 2002, THEOR PRACT LOG PROG, V2, P461, DOI 10.1017/S147106840200145X
   LO S, 2006, MAPL C 2006 P, P179
   MONAGAN MB, 2005, MAPLE 10 ADV PROGRAM
   MUSSER DR, 1989, LECT NOTES COMPUT SC, V358, P13
   RANISE S, 2006, ELECT NOTES THEORETI
   SCHREYE DD, 2000, J LOGIC PROGRAM, V43, P265
   Sorensen M. H., 1996, Journal of Functional Programming, V6, P811, DOI 10.1017/S0956796800002008
   STOUTEMEYER DR, 1991, NOTIECES AMS, P701
   Sumii E., 2001, Higher-Order and Symbolic Computation, V14, P101, DOI 10.1023/A:1012984529382
   SUMII E, 2000, COMPUTER SOFTWARE, V17, P38
   THIEMANN P, 2000, PGG SYSTEM USER MANU
   THIEMANN P, 1996, P INT C FUNCT PROGR, P180
   Thiemann Peter, 1999, PARTIAL EVALUATION H
NR 30
TC 2
Z9 2
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 1
PY 2011
VL 76
IS 6
SI SI
BP 469
EP 491
DI 10.1016/j.scico.2010.12.001
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 792EC
UT WOS:000292722300002
DA 2024-07-18
ER

PT J
AU Chen, K
   Weng, SC
   Wang, M
   Khoo, SC
   Chen, CH
AF Chen, Kung
   Weng, Shu-Chun
   Wang, Meng
   Khoo, Siau-Cheng
   Chen, Chung-Hsin
TI Type-directed weaving of aspects for polymorphically typed functional
   languages
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Aspect-oriented programming; Type-scoped advice; Static weaving;
   Polymorphically typed functional language
AB Incorporating aspect-oriented paradigm to a polymorphically typed functional language enables the declaration of type-scoped advice, in which the effect of an aspect can be harnessed by introducing possibly polymorphic type constraints to the aspect. The amalgamation of aspect orientation and functional programming enables quick behavioral adaption of functions, clear separation of concerns and expressive type-directed programming. However, proper static weaving of aspects in polymorphic languages with a type-erasure semantics remains a challenge. In this paper, we describe a type-directed static weaving strategy, as well as its implementation, that supports static type inference and static weaving of programs written in an aspect-oriented polymorphically typed functional language, AspectFun. We show examples of type-scoped advice, identify the challenges faced with compile-time weaving in the presence of type-scoped advice, and demonstrate how various advanced aspect features can be handled by our techniques. Finally, we prove the correctness of the static weaving strategy with respect to the operational semantics of AspectFun. (C) 2010 Elsevier B.V. All rights reserved.
C1 [Khoo, Siau-Cheng] Natl Univ Singapore, Singapore 117548, Singapore.
   [Chen, Kung; Chen, Chung-Hsin] Natl Chengchi Univ, Taipei, Taiwan.
   [Weng, Shu-Chun] Natl Taiwan Univ, Taipei, Taiwan.
   [Wang, Meng] Univ Oxford, Oxford OX1 2JD, England.
C3 National University of Singapore; National Chengchi University; National
   Taiwan University; University of Oxford
RP Khoo, SC (corresponding author), Natl Univ Singapore, Singapore 117548, Singapore.
EM khoosc@comp.nus.edu.sg
OI Wang, Meng/0000-0001-7780-630X; CHEN, KUNG/0000-0002-5480-3226
FU National University of Singapore [R-252-000-252-112]; National Science
   Council, Taiwan, ROC [NSC 97-2221-E-004-001-MY3]
FX The authors would like to thank the anonymous referees for valuable
   suggestions on how to improve a previous version of this paper. This
   research is partially supported by the National University of Singapore
   under research grant "R-252-000-252-112", and by the National Science
   Council, Taiwan, ROC under grant number "NSC 97-2221-E-004-001-MY3".
CR [Anonymous], 1992, 19th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, DOI DOI 10.1145/143165.143169
   [Anonymous], 1989, FPCA 1989, DOI DOI 10.1145/99370.99404
   CHEN K, 2009, PEDM 09, P189
   Chen K, 2007, LECT NOTES COMPUT SC, V4634, P34
   Cheney J., 2002, P 2002 ACM SIGPLAN W, P90, DOI DOI 10.1145/581690.581698
   Dantas DanielS., 2005, P 10 ACM SIGPLAN INT
   DANTAS DS, 2007, ACM T PROGRAMMING LA
   Hinze R, 2009, SCI COMPUT PROGRAM, V74, P590, DOI 10.1016/j.scico.2007.10.006
   Jagadeesan R, 2006, SCI COMPUT PROGRAM, V63, P267, DOI 10.1016/j.scico.2006.02.008
   JONES MP, 1992, THESIS OXFORD U
   JONES MP, 1999, EXPLORING DESIGN SPA
   Kiczales G, 1997, LECT NOTES COMPUT SC, V1241, P220, DOI 10.1007/BFb0053381
   Lämmel R, 2003, ACM SIGPLAN NOTICES, V38, P26, DOI 10.1145/640136.604179
   LAMMEL R, 2005, P ACM SIGPLAN INT C, P204, DOI DOI 10.1145/1086365.1086391
   LEWIS JR, 2000, S PRINC PROGR LANG, P108
   MASUHARA H, 2005, P INT C FUNCT PROGR, P320
   WADLER P, 1989, 16 ANN ACM S PRINC P, P60
   Wand M, 2004, ACM T PROGR LANG SYS, V26, P890, DOI 10.1145/1018203.1018208
   WANG M, 2009, P ACM SIGPLAN WORKSH
   WANG M, 2006, PEPM 06
   Wang QX, 2006, MITOCHONDRION, V6, P37, DOI 10.1016/j.mito.2005.11.002
   Washburn Geoffrey., 2006, Proceedings of the 2006 ACM SIGPLAN workshop on Generic programming, P33
   WEIRICH S, 2000, P 5 ACM SIGPLAN INT, P58
NR 23
TC 0
Z9 0
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 1
PY 2010
VL 75
IS 11
SI SI
BP 1048
EP 1076
DI 10.1016/j.scico.2010.04.001
PG 29
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 641MD
UT WOS:000281129600007
OA Green Submitted, hybrid, Green Published, Green Accepted
DA 2024-07-18
ER

PT J
AU Aktug, I
   Naliuka, K
AF Aktug, Irem
   Naliuka, Katsiaryna
TI ConSpec - A formal language for policy specification
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Policy language; Security enforcement mechanisms; Runtime monitoring;
   Security frameworks
AB The paper presents ConSpec, an automata-based policy specification language. The language trades off clean semantics to language expressiveness: a formal semantics for the language is provided as security automata. ConSpec specifications can be used at different stages of the application lifecycle, rendering possible the formalization of various Policy enforcement techniques. (C) 2008 Elsevier B.V. All rights reserved.
C1 [Aktug, Irem] Royal Inst Technol, S-10044 Stockholm, Sweden.
   [Naliuka, Katsiaryna] Univ Trento, Trento, Italy.
C3 Royal Institute of Technology; University of Trento
RP Aktug, I (corresponding author), Royal Inst Technol, Osquars Backe 2, S-10044 Stockholm, Sweden.
EM irem@nada.kth.se
FU S3MS
FX Partially supported by S3MS project (http://s3ms.org).
CR Aktug I, 2008, LECT NOTES COMPUT SC, V5014, P262, DOI 10.1007/978-3-540-68237-0_19
   BAUER L, 2005, P ACM SIGPLAN C PROG, P305
   BAUER L, 2008, ACM T SOFTW IN PRESS
   Courcoubetis C., 1992, Formal Methods in System Design, V1, P275, DOI 10.1007/BF00121128
   DRAGONI N, 2007, EUR PKI WOR IN PRESS
   ERLINGSSON U, 2004, THESIS CORNELL U
   Hamlen KW, 2006, ACM T PROGR LANG SYS, V28, P175, DOI 10.1145/1111596.1111601
   HAVELUND K, 2004, INT J SOFTW TOOLS TE, P158
   Holzmann G.J., 1997, SOFTW ENG, V23, P279
   Hopcroft J.E., 1969, Math. Syst. Theory, V3, P119
   HUNT HB, 1977, J ACM, V24, P387, DOI 10.1145/322017.322020
   Kesten Y., 1993, Computer Aided Verification. 5th International Conference, CAV '93 Proceedings, P97
   Ligatti J., 2005, J. Inf. Secur., V4, P2, DOI [10.1007/s10207-004-0046-8, DOI 10.1007/S10207-004-0046-8]
   MASSACCI F, 2007, P 12 NORD WORKSH SEC
   Necula G.C., 1997, 24 ANN S PRINCIPLES, P106
   Schneider H P, 2000, Climacteric, V3, P50, DOI 10.3109/13697130009167599
   SEKAR R, 2003, MODEL CARRYING CODE
   VANOVERBERGHE D, 2008, P 10 IFIP INT C FORM, P240
   Zobel A., 2006, BUSINESS CASE SECURI
NR 19
TC 26
Z9 33
U1 0
U2 4
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 1
PY 2008
VL 74
IS 1-2
SI SI
BP 2
EP 12
DI 10.1016/j.scico.2008.09.004
PG 11
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 386PX
UT WOS:000261896200002
DA 2024-07-18
ER

PT J
AU Clarke, D
   Costa, D
   Arbab, F
AF Clarke, Dave
   Costa, David
   Arbab, Farhad
TI Connector colouring I: Synchronisation and context dependency
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 4th International Workshop on the Foundations of Coordination Languages
   and Software Architectures (FOCLASA'05)
CY AUG 27, 2005
CL San Francisco, CA
DE coordination; distributed computing; composition; Reo
ID MODEL
AB Reo is a coordination model based on circuit-like connectors which coordinate components through the interplay of data flow, synchronisation and mutual exclusion, state, and context-dependent behaviour. This paper proposes a scheme based on connector colouring for determining the behaviour of a Reo connector by resolving its context dependent synchronisation and mutual exclusion constraints. Colouring a Reo connector in a specific state with given boundary conditions (I/O requests) provides a means to determine the routing alternatives for data flow. Our scheme has the advantage over previous models in that it is simpler to implement and that it models Reo connectors more closely in terms of their envisaged semantics than existing formal models. (c) 2007 Elsevier B.V. All rights reserved.
C1 CWI, NL-1090 GB Amsterdam, Netherlands.
RP Clarke, D (corresponding author), CWI, POB 94079, NL-1090 GB Amsterdam, Netherlands.
EM dave@cwi.nl; costa@cwi.nl; farhad@cwi.nl
CR APPEL K, 1976, B AM MATH SOC, V82, P711, DOI 10.1090/S0002-9904-1976-14122-5
   Arbab F, 2005, SCI COMPUT PROGRAM, V55, P3, DOI 10.1016/j.scico.2004.05.010
   Arbab F, 2004, MATH STRUCT COMP SCI, V14, P329, DOI 10.1017/S0960129504004153
   Arbab F, 2003, LECT NOTES COMPUT SC, V2755, P34
   ARBAB F, 2004, ELECT NOTES THEORETI, V97, P25
   ARBAB F, 2002, COMPSAC 02 IEEE COMP, P667
   BANATRE JP, 1990, SCI COMPUT PROGRAM, V15, P55, DOI 10.1016/0167-6423(90)90044-E
   Berry G, 2000, FOUNDAT COMPUT, P425
   Bonsangue MM, 2000, THEOR COMPUT SCI, V240, P3, DOI 10.1016/S0304-3975(99)00226-1
   Bruni R, 2005, LECT NOTES COMPUT SC, V3629, P98
   CLARKE D, 2006, REOLITE IMPLEMENTATI
   Cruz JC, 1999, LECT NOTES COMPUT SC, V1594, P355
   DIAKOV N, 2006, P 3 INT WORKSH COORD
   EVERAARS C, 2006, SENE0601
   Gadducci F, 2000, FOUNDAT COMPUT, P133
   GELERNTER D, 1985, ACM T PROGR LANG SYS, V7, P80, DOI 10.1145/2363.2433
   Jensen K., 1997, MONOGRAPHS THEORETIC, V1-3
   Lanese I, 2005, LECT NOTES COMPUT SC, V3454, P220
   LEE EA, 2005, CAUSALITY INTERFACES
   Lynch N. A., 1996, DISTRIBUTED ALGORITH
   Mehta N. R., 2000, Proceedings of the 2000 International Conference on Software Engineering. ICSE 2000 the New Millennium, P178, DOI 10.1109/ICSE.2000.870409
   MILNER R, 1983, THEOR COMPUT SCI, V25, P267, DOI 10.1016/0304-3975(83)90114-7
   Papadopoulos G. A., 1998, ADV COMPUT, V46, P329, DOI [DOI 10.1016/S0065-2458(08)60208-9, 10.1016/S0065-2458(08)60208-9]
   SNIR M, 1998, COMPLETER REFERENCE, V1
   Stefanescu G., 2000, DISCRETE MATH & THEO
   WRIGHT G, 1995, ICP IP ILLUSTRATED, V2
NR 26
TC 51
Z9 53
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAY 15
PY 2007
VL 66
IS 3
BP 205
EP 225
DI 10.1016/j.scico.2007.01.009
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 183OI
UT WOS:000247581700003
OA Green Accepted
DA 2024-07-18
ER

PT J
AU Durán, F
   Meseguer, J
AF Duran, Francisco
   Meseguer, Jose
TI Maude's module algebra
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE structured theories; institutions; module algebra; reflection; Maude;
   rewriting logic; membership equational logic; parameterization
ID CONDITIONAL REWRITING LOGIC; SPECIFICATION; INSTITUTIONS; MODEL
AB The reflective capabilities of rewriting logic and their efficient implementation in the Maude language can be exploited to endow a reflective language like Maude with a module algebra in which structured theories can be combined and transformed by means of a rich collection of module operations. We have followed this approach and have used the specification of such a module algebra as its implementation, including a user interface and an execution environment for it. The high level at which the specification of the module algebra has been given makes this approach particularly attractive when compared to conventional implementations, because of its shorter development time and the greater flexibility, maintainability, and extensibility that it affords. We explain the general principles of the reflective design of the module algebra and its categorical foundations, based on the institution theoretic notion of structured theory and morphisms and colimits for such theories. Based on such foundations, we then explain the categorical semantics of Maude's parameterized theories, modules and views and their instantiation, and the reflective algebraic specification of the different module and view operations. (C) 2006 Elsevier B.V. All rights reserved.
C1 Univ Malaga, Dpto Lenguajes & Ciencias Computac, E-29071 Malaga, Spain.
   Univ Illinois, Dept Comp Sci, Urbana, IL 61801 USA.
C3 Universidad de Malaga; University of Illinois System; University of
   Illinois Urbana-Champaign
RP Durán, F (corresponding author), Univ Malaga, Dpto Lenguajes & Ciencias Computac, E-29071 Malaga, Spain.
EM duran@lcc.uma.es; meseguer@cs.uiuc.edu
RI Durán, Francisco/JXL-7273-2024; Duran, Francisco/A-5373-2011
OI Duran, Francisco/0000-0001-5864-8094
CR [Anonymous], CAFE IND STRENGTH AL
   Basin D., 2004, ACM Transactions on Computational Logic, V5, P528, DOI 10.1145/1013560.1013566
   BERGSTRA J, 1980, 7 C AUT LANG PROGR, V81, P76
   BERGSTRA JA, 1990, J ACM, V37, P335, DOI 10.1145/77600.77621
   BERT D, 1986, LECT NOTES COMPUT SC, V213, P119
   Bidoit M., 2004, LECT NOTES COMPUTER, V2900
   BIDOIT M, 1991, LECT NOTES COMPUTER, V501
   Bouhoula A, 2000, THEOR COMPUT SCI, V236, P35, DOI 10.1016/S0304-3975(99)00206-6
   Bruni R, 2003, LECT NOTES COMPUT SC, V2719, P252
   BURSTALL RM, 1980, LECTURE NOTES COMPUT, V86, P292, DOI DOI 10.1007/3-540-10007-5_41
   Burstall Rod., 1994, CLASSICAL MIND ESSAY, P75
   CHALUB F, 2006, P 6 INT WORKSH REWR
   Clavel M, 2002, THEOR COMPUT SCI, V285, P187, DOI 10.1016/S0304-3975(01)00359-0
   Clavel M, 2002, THEOR COMPUT SCI, V285, P245, DOI 10.1016/S0304-3975(01)00360-7
   Clavel M, 1999, LECT NOTES COMPUT SC, V1709, P1684
   CLAVEL M, 2006, IN PRESS J U COMPUTE
   CLAVEL M, POLYTYPIC PROGRAMMIN, P339
   CLAVEL M, 2000, CSLI LECT NOTES
   CLAVEL M, 2006, MAUDE 22
   CLAVEL M, 1996, P REFL 96, P263
   CoFI (The Common Framework Initiative), 2004, LECT NOT COMP SCI, V2960
   Diaconescu R, 2002, THEOR COMPUT SCI, V285, P289, DOI 10.1016/S0304-3975(01)00361-9
   DIACONESCU R, 1998, AMAST SERIES COMP
   DIACONESCU R, 1991, P WORKSH LOG FRAM, P83
   Durán F, 2003, THEOR COMPUT SCI, V309, P357, DOI 10.1016/S0304-3975(03)00312-8
   Durán F, 2000, LECT NOTES COMPUT SC, V1816, P422
   DURAN F, PARAMETERIZED THEORI, P319
   DURAN F, ITI20005
   DURAN F, 1999, THESIS U MALAGA
   DURAN F, 2006, IN PRESS PROVING OPE
   DURAN F, 2000, ITI20007 U MAL
   DURAN F, 1998, ELECT NOTES THEORETI, V15, P185
   Duran F., 1999, ELECT NOTES THEORETI, V29, P71
   Duran Francisco, 2004, ACM SIGPLAN 2004 S P, P147
   EHRICH HD, 1981, LECTURE NOTES COMPUT, V112, P1
   EHRIG H, 1985, FUNDAMENTALS ALGEBRA
   Ehrig H., 1990, Fundamentals of algebraic specification 2: module specifications and constraints
   FUTATSUGI K, 1994, P KUNM INT CASE S KU
   FUTATSUGI K, 2000, P 3 INT WORKSH REWR, V36
   FUTATSUGI K, 1997, 1 INT C FORM ENG MET
   GOGOLLA M, 1995, RECENT TRENDS DATA T, V906, P499
   Goguen J, 2000, THEOR COMPUT SCI, V245, P55, DOI 10.1016/S0304-3975(99)00275-3
   Goguen J, 2004, LECT NOTES COMPUT SC, V2635, P96
   GOGUEN J, 1990, PROCEEDINGS
   GOGUEN J, 2000, SOFTWARE ENGN OBJ
   GOGUEN JA, 1992, J ACM, V39, P95, DOI 10.1145/147508.147524
   GOGUEN JA, 1991, TOPOLOGY AND CATEGORY THEORY IN COMPUTER SCIENCE, P357
   Guttag J.V., 1993, Texts and Monographs in Computer Science
   Hendrix J, 2006, LECT NOTES ARTIF INT, V4130, P151
   JANSSON P, 1996, P 2 INT SUMM SCH ADV, V1129, P68
   Jansson P., 1997, POPL 1997, P470
   Martí-Oliet N, 2005, ELECTRON NOTES THEOR, V117, P417, DOI 10.1016/j.entcs.2004.06.020
   MARTIOLIET N, 2002, REWRITING LOGIC LOGI, V9, P1
   Meseguer J, 2002, LECT NOTES COMPUT SC, V2380, P572
   MESEGUER J, 1992, THEOR COMPUT SCI, V96, P73, DOI 10.1016/0304-3975(92)90182-F
   Meseguer J, 1998, LECT NOTES COMPUT SC, V1376, P18
   Meseguer J., 1993, Research Directions in Concurrent Object-Oriented Programming, P314
   MESEGUER J, 1989, LOGIC C, V87, P275
   Meseguer Jose., 1999, Computational Logic
   Mossakowski T., 2006, HETS USER GUIDE
   Olveczky P.C., 2000, THESIS U BERGEN
   OLVECZKY PC, 2001, THEORETICAL COMPUTER
   OREJAS F, 1999, ALGEBRAIC FDN SYSTEM
   Rees DLL, 2003, SCI COMPUT PROGRAM, V49, P47, DOI 10.1016/j.scico.2003.04.001
   REICHEL H, 1980, LECT NOTES COMPUT SC, V88, P504
   SANNELLA D, 1988, INFORM COMPUT, V76, P165, DOI 10.1016/0890-5401(88)90008-9
   Schubert H., 1972, CATEGORIES
   SRINIVAS Y, 1997, P IFIP TC2 WORK C AL
   Srinivas Y. V., 1995, Mathematics of Program Construction. Third International Conference, MPC '95 Proceedings, P399
NR 69
TC 21
Z9 23
U1 0
U2 3
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD APR 30
PY 2007
VL 66
IS 2
BP 125
EP 153
DI 10.1016/j.scico.2006.07.002
PG 29
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 169OK
UT WOS:000246601300003
DA 2024-07-18
ER

PT J
AU Garrido, JL
   Noguera, M
   González, M
   Hurtado, MV
   Rodríguez, ML
AF Garrido, Jose Luis
   Noguera, Manuel
   Gonzalez, Miguel
   Hurtado, Maria V.
   Rodriguez, Maria L.
TI Definition and use of Computation Independent Models in an MDA-based
   groupware development process
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 5th International Workshop on System/Software Architectures (IWSSA 2006)
CY JUN 27, 2006
CL Las Vegas, NV
DE CSCW; groupware development process; MDA; ontology; OWL; UML; enterprise
   modeling; software models
AB Groupware systems allow users to be part of a shared environment in order to carry out groupwork. Members of a group belong to organizations in which each one fulfils general and specific enterprise objectives. This paper presents a proposal, from the perspective of the CSCW (Computer-Supported Cooperative Work) systems, for modelling enterprise organization and developing groupware applications. This research work focuses on two specific models for the proposal: a conceptual domain model formalized through a domain ontology, and a system model built using a UML-based notation. The second stems from the first and each provides a Computation Independent View (CIV) with different objectives. Respectively, they allow a common vocabulary for knowledge sharing to be established, and organization functional requirements to be specified, particularly those concerning communication, coordination and collaboration. Furthermore, these models are part of a concrete MDA-based development process of groupware applications that is also introduced. (C) 2006 Elsevier B.V. All rights reserved.
C1 Univ Granada, Dept Software Engn, ETSII, E-18071 Granada, Spain.
   Autonomous Univ Madrid, EPS, E-28049 Madrid, Spain.
C3 University of Granada; Autonomous University of Madrid
RP Garrido, JL (corresponding author), Univ Granada, Dept Software Engn, ETSII, C Saucedo Aranda S-N, E-18071 Granada, Spain.
EM jgarrido@ugr.es; mnoguera@ugr.es; miguel.gonzalez@uam.es;
   mhurtado@ugr.es; mlra@ugr.es
RI Noguera, Manuel/A-7073-2008; Hurtado Torres, Maria
   Visitacion/C-2398-2012; Rodriguez Almendros, Maria Luisa/C-7430-2012;
   Garrido, Jose Luis/C-2410-2012
OI Noguera, Manuel/0000-0003-0503-6451; Hurtado Torres, Maria
   Visitacion/0000-0001-6345-6062; Rodriguez Almendros, Maria
   Luisa/0000-0002-7648-6380; Garrido, Jose Luis/0000-0001-7004-1957
CR AAGEDAL J, 2004, 2 EUR WORKSH MDA TEC
   ABULLAH MS, 2004, P MOD DRIV ARCH FOUN, P202
   Almelda JP, 2003, SEVENTH IEEE INTERNATIONAL ENTERPRISE DISTRIBUTED OBJECT COMPUTING CONFERENCE, PROCEEDINGS, P112, DOI 10.1109/EDOC.2003.1233842
   Andrade LF, 2002, INFORM SYST, V27, P411, DOI 10.1016/S0306-4379(02)00013-3
   [Anonymous], 1995, 107461234 ISO IEC
   Baader F., 2003, DESCRIPTION LOGIC HD
   BELANGOUR A, 2002, PLATFORM INDEPENDENC
   Bendraou R, 2005, LECT NOTES COMPUT SC, V3748, P59
   Bloomfield T, 2005, LECT NOTES COMPUT SC, V3748, P9
   CARRIERO N, 1989, COMMUN ACM, V32, P444, DOI 10.1145/63334.63337
   Castro J, 2002, INFORM SYST, V27, P365, DOI 10.1016/S0306-4379(02)00012-1
   Chen HM, 2005, SCI COMPUT PROGRAM, V57, P5, DOI 10.1016/j.scico.2004.10.002
   Chung L, 1999, INT FED INFO PROC, V12, P545
   DJURIC D, 2004, COMPUTER SCI INFORM, V1, P91
   EICHBERG M, 2002, WORKSH GEN TECHN CON
   ELLIS CA, 1991, COMMUN ACM, V34, P38
   Evermann J, 2005, IEEE T SOFTWARE ENG, V31, P21, DOI 10.1109/TSE.2005.15
   FALLSIDE DC, 2001, W3C             0502
   Fox M.S., 1997, P INT C ENT INT MOD
   Garrido JL, 2002, LECT NOTES COMPUT SC, V2545, P16
   GARRIDO JL, 2005, REQUIREMENTS ENG COO, pCH14
   GARRIDO JL, 2003, LSI20032 U GRAN DEP
   GARRIDO JL, 2005, P 4 INT WORKSH SYST
   Green P, 2007, DATA KNOWL ENG, V62, P274, DOI 10.1016/j.datak.2006.08.004
   Greenberg S., 1991, COMPUTER SUPPORTED C
   Gruninger M., 2000, Computational & Mathematical Organization Theory, V6, P381, DOI 10.1023/A:1009610430261
   Guarino N, 1998, FR ART INT, V46, P3
   HOFMEISTER C, 1999, P 1 IFIP WORK C SOFT
   Jung JY, 2006, COMPUT IND ENG, V51, P321, DOI 10.1016/j.cie.2006.02.011
   KLYNE G, 2004, W3C RECOMMENDAT 0210
   Knublauch H, 2004, LECT NOTES COMPUT SC, V3298, P229
   Lera I, 2006, SCI COMPUT PROGRAM, V61, P27, DOI 10.1016/j.scico.2005.11.003
   MACAULAY A, 1996, REQUIREMENTS ENG
   MACIEL R, 2005, 19 BRAZ S SOFTW ENG
   NOY N, 2005, DEFINING NARY R 0907
   *OBJ MAN GROUP, 2004, FORMAL040205 OBJ MAN
   *OBJ MAN GROUP, DOCUMENT050801 OBJ M
   *OBJ MAN GROUP, OMG030601 OMG
   *OBJ MAN GROUP, FORMAL20020403 OMG
   *OBJ MAN GROUP, 2003, PTC030802 OBJ MAN GR, P455
   *OBJ MAN GROUP, 2005, FORMAL050106 SPEM OB
   *OBJ MAN GROUP OMG, 2002, PTC020205 OBJ MAN GR
   POHL K, 1999, P 5 INT C ADV INF SY, P275
   SHAW M, 1995, LECT NOTES COMPUTER, V1000
   Smith Kendall A, 2004, Med Immunol, V3, P3, DOI 10.1186/1476-9433-3-3
   TURNER CR, 1999, J SYSTEMS SOFTWARE, V49
NR 46
TC 24
Z9 27
U1 0
U2 19
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD APR 15
PY 2007
VL 66
IS 1
BP 25
EP 43
DI 10.1016/j.scico.2006.10.008
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 168GO
UT WOS:000246511500003
DA 2024-07-18
ER

PT J
AU Filliâtre, JC
AF Filliatre, Jean-Christophe
TI Formal proof of a program:: Find
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE formal methods; imperative programs; hoare logic; Coq proof assistant
AB In 1971, C.A.R. Hoare gave the proof of correctness and termination of a rather complex algorithm, in a paper entitled Prooj of a program: Find. It is a handmade proof, where the program is given together with its formal specification and where each step is fully justified by mathematical reasoning. We present here a formal proof of the same program in the system Cool, using the recent tactic of the system developed to establish the total correctness of imperative programs. We follow Hoare's paper as closely as possible, keeping the same program and the same specification. We show that we get exactly the same proof obligations, which are proved in a straightforward way, following the original paper. We also explain how more informal aspects of Hoare's proof are formalized in the system Coq. This demonstrates the adequacy of the system Coq in the process of certifying imperative programs. (c) 2006 Elsevier B.V. All rights reserved.
C1 Univ Paris 11, CNRS, LRI, F-91405 Orsay, France.
C3 Centre National de la Recherche Scientifique (CNRS); Universite Paris
   Saclay
RP Filliâtre, JC (corresponding author), Univ Paris 11, CNRS, LRI, F-91405 Orsay, France.
EM filliatr@lri.fr
CR COQUAND T, 1988, INFORM COMPUT, V76, P95, DOI 10.1016/0890-5401(88)90005-3
   DONZEAUGOUGE V, 1999, COMMUNICATION
   Filliatre J. C., 1999, THEOREM PROVING HIGH
   Filliâtre JC, 2003, J FUNCT PROGRAM, V13, P709, DOI 10.1017/S095679680200446X
   FILLIATRE JC, 1999, THESIS U PARIS SUD
   Filliatre Jean-Christophe, 1998, LECT NOTES COMPUTER, V1657
   GIMENEZ E, 1999, COMMUNICATION
   Hoare C. A. R., 1989, Essays in Computing Science
   Hoare C.A.R., 1961, Communications of the ACM, V4, P321, DOI [DOI 10.1145/366622.366647, DOI 10.1145/366622.366644]
   HOARE CAR, 1969, COMMUN ACM, V12, P576, DOI 10.1145/363235.363259
   HOARE CAR, 1971, COMMUN ACM, V14, P39, DOI 10.1145/362452.362489
   HOARE CAR, 1971, COMMUN ACM, V14, P59
   HOARE CAR, 1969, COMMUN ACM, V12, P583
   Paulin-Mohring C, 1989, 16 ANN ACM S PRINC P
   PUGH W, 1992, COMMUN ACM, V35, P102, DOI 10.1145/135226.135233
NR 15
TC 3
Z9 4
U1 0
U2 0
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 1
PY 2007
VL 64
IS 3
BP 332
EP 340
DI 10.1016/j.scico.2006.10.002
PG 9
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 122SH
UT WOS:000243246500005
DA 2024-07-18
ER

PT J
AU Thompson, S
   Mycroft, A
AF Thompson, Sarah
   Mycroft, Alan
TI Abstract interpretation of combinational asynchronous circuits
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 11th International Static Analysis Symposium (SAS 2004)
CY AUG 26-28, 2004
CL Verona, ITALY
DE abstract interpretation; asynchronous circuits; transitional logics;
   multi-value logics; achronous analysis
AB A technique, based upon abstract interpretation, is presented that allows general gate-level combinational asynchronous circuits with uncertain delay characteristics to be reasoned about. Our approach is particularly suited to the simulation and model checking of circuits where the identification of possible glitch states (static and dynamic hazards) is required.
   We present a concrete model based upon signals represented as (possibly non-deterministic) functions from absolute dense time to the Booleans, and a hierarchy of achronous abstractions linked by Galois connections, each model offering varying tradeoffs between accuracy and complexity. Many of these abstract domains resemble extended, multi-value logics: transitional logics that include extra values representing transitions as well as steady states, and static/clean logics that include the values S and C representing `unknown but fixed for all time' and `can never glitch' respectively.
   Our framework captures several pre-existing analyses as particular instances in the hierarchy of abstractions. (c) 2006 Elsevier B.V. All rights reserved.
C1 Univ Cambridge, Comp Lab, Cambridge CB3 0FD, England.
C3 University of Cambridge
RP Thompson, S (corresponding author), Univ Cambridge, Comp Lab, William Gates Bldg,JJ Thompson Ave, Cambridge CB3 0FD, England.
EM sarah@findatlantis.com
OI Mycroft, Alan/0000-0001-7013-8572
CR Brzozowski J, 2005, RAIRO-THEOR INF APPL, V39, P67, DOI 10.1051/ita:2005004
   Brzozowski J, 2003, FORM METHOD SYST DES, V23, P223, DOI 10.1023/A:1026218512171
   Burch JR, 1992, P INT C COMP DES ICC, P270
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   CUNNINGHAM PA, 2002, THESIS U CAMBRIDGE
   GAUBATZ DA, 1991, THESIS U CAMBRIDGE
   Giacobazzi R, 2003, LECT NOTES COMPUT SC, V2575, P146
   Giacobazzi R, 1997, LECT NOTES COMPUT SC, V1256, P771
   Giacobazzi R, 2000, J ACM, V47, P361, DOI 10.1145/333979.333989
   GIACOBAZZI R, 1997, LECT NOTES COMPUTER, V1349, P231
   Hymans C, 2002, LECT NOTES COMPUT SC, V2477, P444
   Jones N. D., 1980, 21st Annual Symposium on Foundations of Computer Science, P185, DOI 10.1109/SFCS.1980.16
   KAM JB, 1977, ACTA INFORM, V7, P305, DOI 10.1007/BF00290339
   Kildall Gary A., 1973, Proceedings of the 1st Annual ACM SIGACT-SIGPLAN Symposium on Principles of Programming Languages. POPL'73, P194
   Kung D., 1992, P INT C COMP AID DES, P631
   MORELLI G, 2003, ELECT DESIGN NE 0925, P37
   Mycroft A., 1993, Proceedings of the ACM SIGPLAN Symposium on Partial Evaluation and Semantics-Based Program Manipulation. PEPM'93, P179, DOI 10.1145/154630.154648
   THOMPSON S, 2004, 15 UK AS FOR CAMBR
   [No title captured]
NR 19
TC 3
Z9 4
U1 0
U2 1
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 1
PY 2007
VL 64
IS 1
BP 166
EP 183
DI 10.1016/j.scico.2006.03.007
PG 18
WC Computer Science, Software Engineering
WE Conference Proceedings Citation Index - Science (CPCI-S); Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 118ES
UT WOS:000242925700009
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Debbabi, M
   Gherbi, A
   Mourad, A
   Yahyaoui, H
AF Debbabi, M
   Gherbi, A
   Mourad, A
   Yahyaoui, H
TI A selective dynamic compiler for embedded Java virtual machines
   targeting ARM processors
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT Academic Emergency Medicine Consensus Conference on Ethical Conduct of
   Resuscitation Research
CY MAY 21, 2005
CL New York, NY
DE J2ME; CLDC; embedded devices; virtual machine; Java acceleration;
   selective dynamic compilation; KVM; ARM architecture
AB This paper presents a new selective dynamic compilation technique targeting ARM 16/32-bit embedded system processors. This compiler is built inside the J2ME/CLDC (Java 2 Micro Edition for Connected Limited Device Configuration) platform [Sun MicroSystems, Java 2 Platform, Micro Edition, Version 1.0 Connected, Limited Device Configuration, Specification, Technical Report, Sun Microsystems, CA, USA, May 2000]. The primary objective of this work is to elaborate an efficient, lightweight and low-footprint accelerated Java virtual machine ready to be executed on embedded machines. This is achieved by implementing a selective ARM dynamic compiler called Armed E-Bunny into Sun's Kilobyte Virtual Machine (KVM) [Sun MicroSystems, KVM porting guide, Technical Report, Sun MicroSystems, CA, USA, September 2001]. In this paper we present the motivations, the architecture, the design and the implementation of Armed E-Bunny. The modified KVM is ported on a handheld PDA that is powered with embedded Linux and is tested using standard J2ME benchmarks. The experimental results demonstrate that a speed-up of 360% over the last version of Sun's KVM is accomplished with a footprint that does not exceed 119 KB. An important result of this paper is also the proposition of an acceleration technique that leverages Armed E-Bunny by establishing a synergy between efficient interpretation and selective dynamic compilation. The main traits of this technique are: a one-pass compilation by code reuse, an efficient threaded interpretation and a fast switching mechanism between the interpreted and compiled modes. (c) 2005 Elsevier B.V. All rights reserved.
C1 Concordia Univ, Comp Secur Lab, Concordia Inst Informat Syst Engn, Engn & Comp Sci Fac, Montreal, PQ, Canada.
C3 Concordia University - Canada
RP Concordia Univ, Comp Secur Lab, Concordia Inst Informat Syst Engn, Engn & Comp Sci Fac, Montreal, PQ, Canada.
EM debbabi@ciise.concordia.ca
RI Yahyaoui, Hamdi/AAQ-5857-2020; Mourad, Azzam/A-7204-2008
OI Yahyaoui, Hamdi/0000-0003-1134-1233; Mourad, Azzam/0000-0001-9434-5322;
   Gherbi, Abdelouahed/0000-0001-9117-5743; Debbabi,
   Mourad/0000-0003-3015-3043
CR Alpern B, 2000, IBM SYST J, V39, P211, DOI 10.1147/sj.391.0211
   *ARM LIM, 2001, ARM DEV SIUT ASS GUI
   *ARM LIM, 2001, ARM7TDMI DAT SHEET
   AZEVEDO A, 1999, ACM JAV GRAND C, P142
   Cierniak Michal., 2000, PROCEEEDINGS ACM SIG, P13
   Debbabi Mourad., 2004, PPPJ '04, P100
   ERTL M, 1993, EUROFORTH 93 C P
   Gagnon E, 2003, LECT NOTES COMPUT SC, V2622, P170
   Gosling James, 1996, The Java Language Specification
   Hsieh CHA, 1996, PROCEEDINGS OF THE 29TH ANNUAL IEEE/ACM INTERNATIONAL SYMPOSIUM ON MICROARCHITECTURE - MICRO-29, P90, DOI 10.1109/MICRO.1996.566453
   LINDHOLM T, 1996, JAVA VIRTUAL MACHINE
   Majercik SM, 1998, FIFTEENTH NATIONAL CONFERENCE ON ARTIFICIAL INTELLIGENCE (AAAI-98) AND TENTH CONFERENCE ON INNOVATIVE APPLICATIONS OF ARTIFICAL INTELLIGENCE (IAAI-98) - PROCEEDINGS, P954
   Manjunath G, 2000, ACM SIGPLAN NOTICES, V35, P44, DOI 10.1145/346443.346451
   MUIR A, ZUCOTTO EMBEDDING KV
   NAZOMI, 2003, BOOSTING PERFORMANCE
   Paleczny M, 2001, USENIX ASSOCIATION PROCEEDINGS JAVA(TM) VIRTUAL MACHINE RESEARCH AND TECHNOLOGY SYMPOSIUM, P1
   Piumarta I., 1998, PLDI 98, P291
   Radhakrishnan R, 2001, IEEE T COMPUT, V50, P131, DOI 10.1109/12.908989
   Shaylor N, 2002, USENIX ASSOCIATION PROCEEDINGS OF THE 2ND JAVA(TM) VIRTUAL MACHINE RESEARCH AND TECHNOLOGY SYMPOSIUM, P119
   Suganuma T, 2000, IBM SYST J, V39, P175, DOI 10.1147/sj.391.0175
   *SUN MICR, 1999, JAVA HOTSP PERF ENG
   *SUN MICR, 2001, KVM PORT GUID
   *SUN MICR, 2002, CLDC HOTSP IMPL VIRT
   *SUN MICR, 2000, JAVA 2 PLATF MICR ED
   Yang Byung-Sun., 1999, IEEE PACT, P128
NR 25
TC 2
Z9 3
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN
PY 2006
VL 59
IS 1-2
BP 38
EP 63
DI 10.1016/j.scico.2005.03.008
PG 26
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 993HZ
UT WOS:000233946500004
DA 2024-07-18
ER

PT J
AU Yu, DC
   Hamid, NA
   Shao, Z
AF Yu, DC
   Hamid, NA
   Shao, Z
TI Building certified libraries for PCC: dynamic storage allocation
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 12th European Symposium on Programming (ESOP 2003)
CY APR 05-13, 2003
CL Warsaw, POLAND
DE proof-carrying code; certifying compilation; dynamic storage allocation;
   assembly programming
AB Proof-carrying code (PCC) allows a code producer to provide to a host a program along with its formal safety proof The proof attests to a certain safety policy enforced by the code, and can be mechanically checked by the host. While this language-based approach to code certification is very general in principle, existing PCC systems have only focused on programs whose safety proofs can be automatically generated. As a result, many low-level system libraries (e.g., memory management) have not yet been handled. In this paper, we explore a complementary approach in which general properties and program correctness are semi-automatically certified. In particular, we introduce a low-level language, CAP, for building certified programs and present a certified library for dynamic storage allocation. (C) 2004 Elsevier B.V. All rights reserved.
C1 Yale Univ, Dept Comp Sci, New Haven, CT 06520 USA.
C3 Yale University
RP Yale Univ, Dept Comp Sci, POB 2158, New Haven, CT 06520 USA.
EM yu@cs.yale.edu; hamid-nadeem@cs.yale.edu; shao@cs.yale.edu
OI Shao, Zhong/0000-0001-8184-7649
CR [Anonymous], PLDI 98
   [Anonymous], P 17 ANN IEEE S LOG
   Appel AW, 2001, IEEE S LOG, P247, DOI 10.1109/LICS.2001.932501
   APPEL AW, 2001, CSTR63601 PRINC U DE
   COLBY C, 2000, P 2000 ACM C PROG LA, P95
   COQUAND T, 1988, INFORM COMPUT, V76, P95, DOI 10.1016/0890-5401(88)90005-3
   Filliâtre JC, 2003, J FUNCT PROGRAM, V13, P709, DOI 10.1017/S095679680200446X
   FILLIATRE JC, 2002, WHY CERTIFICATION TO
   *FLINT PROJ, 2002, COQ IMPL CERT DYN ST
   HOARE CAR, 1969, COMMUN ACM, V12, P576, DOI 10.1145/363235.363259
   HOARE CAR, 1971, COMMUN ACM, V14, P39, DOI 10.1145/362452.362489
   HOWARD WA, 1980, FHB CURRY ESSAYS COM
   Kernighan B.W., 1988, The C Programming Language
   KUNTH DE, 1973, ART COMPUTING PROGRA, V1
   Morrisett G., 1998, POPL 98, P85, DOI DOI 10.1145/268946.268954
   Necula G, 1998, THESIS CARNEGIE MELL
   Necula G.C., 1997, 24 ANN S PRINCIPLES, P106
   Necula GC, 1996, PROCEEDINGS OF THE SECOND SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION (OSDI '96), P229, DOI 10.1145/248155.238781
   PAULMOHRING C, 1993, LECT NOTES COMPUTER, V664
   REYNOLDS JC, 2000, LECT REASONING SHARE
   The Coq Development Team, 2001, COQ PROOF ASS REF MA
   Wilson P. R., 1995, P INT WORKSH MEM MAN
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
NR 23
TC 26
Z9 36
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR
PY 2004
VL 50
IS 1-3
BP 101
EP 127
DI 10.1016/j.scico.2004.01.003
PG 27
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 804AH
UT WOS:000220271100006
OA Green Published
DA 2024-07-18
ER

PT J
AU Doh, KG
   Mosses, PD
AF Doh, KG
   Mosses, PD
TI Composing programming languages by combining action-semantics modules
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT Workshop on Language Descriptions, Tools and Applications
CY 2001
CL GENOA, ITALY
DE action semantics; modularity; ASF plus SDF
AB This article demonstrates a method for composing a programming language by combining action-semantics modules. Each module is defined separately, and then a programming-language module is defined by combining existing modules. This method enables the language designer to gradually develop a language by defining, selecting and combining suitable modules. The resulting modular structure is substantially different from that previously employed in action-semantic descriptions.
   It also discusses how to resolve the conflicts that may arise when combining modules, and indicates some advantages that action semantics has over other approaches in this respect. (C) 2002 Elsevier Science B.V. All rights reserved.
C1 Hanyang Univ, Dept Comp Sci & Engn, Ansan, South Korea.
   Univ Aarhus, BRICS, Aarhus, Denmark.
   Univ Aarhus, Dept Comp Sci, Aarhus, Denmark.
C3 Hanyang University; Aarhus University; Aarhus University
RP Doh, KG (corresponding author), Hanyang Univ, Dept Comp Sci & Engn, Ansan, South Korea.
RI Mosses, Peter/A-8206-2019
OI Mosses, Peter/0000-0002-5826-7520
CR [Anonymous], 1986, Denotational Semantics: A Methodology for Language Development
   CARTWRIGHT R, 1994, LNCS, V789, P244
   GUREVICH Y, 1995, SPECIFICATION VALIDA
   Heering J, 2000, ACM SIGPLAN NOTICES, V35, P39, DOI 10.1145/351159.351173
   Hoare C. A. R., 1989, Essays in Computing Science
   HOARE CAR, 1973, POPL 73 P 1 ACM S PR
   Kutter P.W., 1997, J UCS, V3, P416
   LASSEN SB, 2000, INTRO AN2 PROPOSED N, P19
   LIANG S, 1996, LECT NOTES COMPUTER, V1058, P219
   MENEZES L, 2001, SBLP 2001
   MOGGI E, 1990, ECSLFCS90113 U ED CO
   Mosses P. D., 1999, Mathematical Foundations of Computer Science 1999. 24th International Symposium, MFCS'99. Proceedings (Lecture Notes in Computer Science Vol.1672), P70
   Mosses PD, 1996, LECT NOTES COMPUT SC, V1113, P37
   MOSSES PD, 1999, RS9956 BRICS U AARH
   MOSSES PD, 1992, CAMBRIDGE TRACTS THE, V26
   MOSSES PD, 1993, PASCAL ACTION SEMANT
   Mosses PeterD., 1996, A Tutorial on Action Semantics
   PLOTKIN GD, 1981, LECT NOTES DAIMI FN1
   Schmidt D.A., 1994, STRUCTURE TYPED PROG
   Stoy Joseph E., 1977, DENOTATIONAL SEMANTI
   TENNYSON SA, 1977, ORTHOP CLIN N AM, V8, P97
   van Deursen A., 1996, AMAST SERIES COMPUTI, V5
   VANDENBRAND MGJ, 2001, LECT NOTES COMPUTER, V2027, P365
   VANDEURSEN A, 1996, LNCS, V1101, P579
   Wansbrough K, 1997, PROCEEDINGS OF THE CONFERENCE ON DOMAIN-SPECIFIC LANGUAGES, P157
   Watt D, 1991, PROGRAMMING LANGUAGE
   WATT DA, 1997, STANDARD ML ACTION S
   WATT DA, 1999, AS 99 2 INT WORKSH A, P155
NR 28
TC 31
Z9 33
U1 1
U2 2
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD APR
PY 2003
VL 47
IS 1
BP 3
EP 36
AR PII S0167-6423(02)00107-7
DI 10.1016/S0167-6423(02)00107-7
PG 34
WC Computer Science, Software Engineering
WE Conference Proceedings Citation Index - Science (CPCI-S); Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 644ED
UT WOS:000180904200002
DA 2024-07-18
ER

PT J
AU Ji, WJ
   Bo, LL
   Yuan, YC
   Sun, XB
AF Ji, Wangjie
   Bo, Lili
   Yuan, Yanchi
   Sun, Xiaobing
TI <i>TDFix:</i> A lightweight tool for fixing deadlocks based on templates
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Deadlock; Fixing; Template; AST
AB Deadlock is notoriously difficult to detect and fix correctly. Existing approaches aim at fixing deadlocks under the premise of having known the deadlock and the buggy code involved in the deadlock, which leads to a certain gap from the practical multithreaded software development. In this paper, we describe the design and implementation of TDFix, which can detect, localize, and fix deadlocks in Java programs based on the pre-defined deadlock fixing templates. TDFix locates the buggy code by searching for the destination node in the AST of a program and modifying the node information based on the templates. Experimental results show that TDFix can successfully fix 176 out of 198 deadlocks in at most 90 seconds for each large Java project, indicating its effectiveness and efficiency.
C1 [Ji, Wangjie; Bo, Lili; Yuan, Yanchi; Sun, Xiaobing] Yangzhou Univ, Sch Informat Engn, Yangzhou, Peoples R China.
C3 Yangzhou University
RP Bo, LL (corresponding author), Yangzhou Univ, Sch Informat Engn, Yangzhou, Peoples R China.
EM lilibo@yzu.edu.cn
FU National Natural Science Foundation of China [62002309]; China
   Scholarship Council Foundation [202209300005]
FX <B>Acknowledgements</B> This work is supported by the National Natural
   Science Foundation of China (No. 62002309) ; the China Scholarship
   Council Foundation (No. 202209300005) .
CR Cai Y, 2016, PROC INT CONF SOFTW, P1109, DOI 10.1145/2884781.2884819
   Huang J, 2016, PROC INT CONF SOFTW, P1097, DOI 10.1145/2884781.2884811
NR 2
TC 1
Z9 1
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR
PY 2024
VL 233
AR 103073
DI 10.1016/j.scico.2023.103073
EA DEC 2023
PG 5
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA EX9J3
UT WOS:001142347300001
DA 2024-07-18
ER

PT J
AU Bucchiarone, A
   Savary-Leblanc, M
   Le Pallec, X
   Bruel, JM
   Cicchetti, A
   Cabot, J
   Gérard, S
AF Bucchiarone, Antonio
   Savary-Leblanc, Maxime
   Le Pallec, Xavier
   Bruel, Jean-Michel
   Cicchetti, Antonio
   Cabot, Jordi
   Gerard, Sebastien
TI Gamifying model-based engineering: The PapyGame tool
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Model-based engineering; Education; Training; Gamification; Papyrus
ID GAMIFICATION
AB Modeling is an essential and challenging activity in any engineering environment, and it requires some hard-to-train skills such as abstraction and communication. This makes it difficult for educators to teach or train their students, co-workers, or users. The audience of this paper is both educators and learners who struggle with modeling. To address this challenge, we present PapyGame, a gamified version of a robust modeling environment (Papyrus) that aims to improve the learner's motivation, make the learning process an enjoyable experience, and boost learning outcomes. Gamification is the exploitation of gaming mechanisms for serious purposes, such as promoting behavioral changes, soliciting participation and engagement in activities, and more. The paper presents PapyGame's functionalities, architectures, illustrative scenarios, and its potential impact on both educators and learners. & COPY; 2023 Elsevier B.V. All rights reserved.
C1 [Bucchiarone, Antonio] Fdn Bruno Kessler, Via Sommar 18, Trento, Italy.
   [Savary-Leblanc, Maxime; Le Pallec, Xavier] Univ Lille, CNRS, Cent Lille, IRCICA,UMR CRIStAL 9189, F-59000 Lille, France.
   [Bruel, Jean-Michel] Univ Toulouse, IRIT, Toulouse, France.
   [Cicchetti, Antonio] Malardalen Univ, IDT, Vasteras, Sweden.
   [Cabot, Jordi] Luxembourg Inst Sci & Technol, Esch Sur Alzette, Luxembourg.
   [Gerard, Sebastien] Univ Paris Saclay, CEA, List, F-91120 Palaiseau, France.
C3 Fondazione Bruno Kessler; Universite de Lille; Centrale Lille; Centre
   National de la Recherche Scientifique (CNRS); Universite Federale
   Toulouse Midi-Pyrenees (ComUE); Universite de Toulouse; Institut
   National Polytechnique de Toulouse; Universite Toulouse III - Paul
   Sabatier; Malardalen University; Luxembourg Institute of Science &
   Technology; Universite Paris Cite; CEA; Universite Paris Saclay
RP Bucchiarone, A (corresponding author), Fdn Bruno Kessler, Via Sommar 18, Trento, Italy.
EM bucchiarone@fbk.eu
RI Bucchiarone, Antonio/K-3128-2016
OI Bucchiarone, Antonio/0000-0003-1154-1382
CR Bucchiarone A, 2023, SOFTW SYST MODEL, V22, P1369, DOI 10.1007/s10270-023-01091-8
   Bucchiarone A, 2020, SOFTW SYST MODEL, V19, P5, DOI 10.1007/s10270-019-00773-6
   Bucchiarone A, 2019, 2019 ACM/IEEE 22ND INTERNATIONAL CONFERENCE ON MODEL DRIVEN ENGINEERING LANGUAGES AND SYSTEMS COMPANION (MODELS-C 2019), P753, DOI 10.1109/MODELS-C.2019.00117
   Cabot J, 2022, SOFTW SYST MODEL, P1
   Cabot J, 2016, LECT NOTES COMPUT SC, V9975, P207, DOI 10.1007/978-3-319-47717-6_18
   Cosentino V., 2017, ER, P15
   De Smedt J, 2016, LECT NOTES BUS INF P, V256, P432, DOI 10.1007/978-3-319-42887-1_35
   Dicheva Darina, 2019, SIGCSE '19: Proceedings of the 50th ACM Technical Symposium on Computer Science Education, DOI 10.1145/3287324.3293726
   Hallifax S, 2019, LECT NOTES COMPUT SC, V11722, P294, DOI 10.1007/978-3-030-29736-7_22
   Herzig Philipp, 2013, Theory, Practice, and Applications of Rules on the Web. 7th International Symposium, RuleML 2013. Proceedings. LNCS 8035, P129, DOI 10.1007/978-3-642-39617-5_14
   Jagust T, 2018, COMPUT EDUC, V125, P444, DOI 10.1016/j.compedu.2018.06.022
   Jurgelaitis M, 2019, COMPUT APPL ENG EDUC, V27, P332, DOI 10.1002/cae.22077
   Jurgelaitis M, 2018, BALT J MOD COMPUT, V6, P119, DOI 10.22364/bjmc.2018.6.2.03
   Koivisto J, 2019, INT J INFORM MANAGE, V45, P191, DOI 10.1016/j.ijinfomgt.2018.10.013
   Legaki NZ, 2019, PROCEEDINGS OF THE 52ND ANNUAL HAWAII INTERNATIONAL CONFERENCE ON SYSTEM SCIENCES, P1813
   Morschheuser B, 2019, J MANAGE INQUIRY, V28, P145, DOI 10.1177/1056492618790921
   Oberhauser R, 2021, LECT NOTES BUS INF P, V422, P40, DOI 10.1007/978-3-030-79976-2_3
   Pflanzl N., 2016, P 7 INT WORKSHOP ENT, V1701, P17
   Planas E, 2020, COMPUT STAND INTER, V67, DOI 10.1016/j.csi.2019.103363
   Sedrakyan G, 2012, LECT NOTES BUS INF P, V113, P435
   Souza MRD, 2018, INFORM SOFTWARE TECH, V95, P201, DOI 10.1016/j.infsof.2017.09.014
   Tantan O.C., 2017, 11 MEDITERRANEAN C I
   Weber T, 2019, 2019 ACM/IEEE 22ND INTERNATIONAL CONFERENCE ON MODEL DRIVEN ENGINEERING LANGUAGES AND SYSTEMS COMPANION (MODELS-C 2019), P228, DOI 10.1109/MODELS-C.2019.00037
   Whittle J, 2017, SOFTW SYST MODEL, V16, P313, DOI 10.1007/s10270-015-0487-8
   Yigitbas E., 2022, J SOFTW SYST MODEL
   Yigitbas E, 2022, ACM/IEEE 25TH INTERNATIONAL CONFERENCE ON MODEL DRIVEN ENGINEERING LANGUAGES AND SYSTEMS, MODELS 2022 COMPANION, P27, DOI 10.1145/3550356.3559088
NR 26
TC 0
Z9 0
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD AUG
PY 2023
VL 230
AR 102974
DI 10.1016/j.scico.2023.102974
EA JUN 2023
PG 7
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA Q2OA1
UT WOS:001055948500001
DA 2024-07-18
ER

PT J
AU Gautier, T
   Le Guernic, P
   Talpin, JP
   Besnard, L
AF Gautier, Thierry
   Le Guernic, Paul
   Talpin, Jean-Pierre
   Besnard, Loic
TI The polychronous model of computation and Kahn process networks
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Synchronous languages; Semantics of programming languages; Formal
   methods; Synchrony and asynchrony; Kahn process networks
ID IMPLEMENTATION; SYNCHRONY; PROGRAMS; CLOCKS
AB In 1974, Gilles Khan defined a seminal semantic model for asynchronous dataflow programming that would then be called as the eponymous Kahn process networks (KPN) and instantiated in as many models of the so-called DPN hierarchy as domain-specific fields of information processing from digital signal processing to hybrid cyber-physical systems. Among these, synchronous programming models have had an important impact in the specific domain of embedded software design. In this paper, we consider an instance of what seems to be one of the many synchronous models of computation: polychrony, initiated by the dataflow language Signal and its multi-clock (i.e. polychronous) model of computation and, later on, CCSL (clock constraints specification language). We provide an in-depth study of its semantic relationship with respect to the original definition of KPNs and hint toward the idea of polychrony as a methodology to locally synchronize (abstractions of) globally asynchronous processes. In particular, we formally define the property, referred to as "polyendochrony", that allows one to consider a given desynchronized network of synchronous Signal processes (a GALS architecture) as the implementation of a corresponding KPN model (an asynchronous network of Khandeterministic functions). For this class of networks, we formalize the Signal program analysis and transformations that define synchronous clusters of Signal processes of guaranteed deterministic behavior in an asynchronous network, that is, without synchronizing communications in the entire network. This definition yields a new strategy of multithreaded code generation that is available in the open-source Polychrony toolset of the Signal language and blurs the limits between the asynchronous and polychronous models of computation.
C1 [Gautier, Thierry; Le Guernic, Paul; Talpin, Jean-Pierre] IRISA, Inna, Campus Beaulieu, F-35042 Rennes, France.
   [Besnard, Loic] IRISA, CNRS, Campus Beaulieu, F-35042 Rennes, France.
C3 Universite de Rennes; Centre National de la Recherche Scientifique
   (CNRS); Universite de Rennes
RP Talpin, JP (corresponding author), IRISA, Inna, Campus Beaulieu, F-35042 Rennes, France.
EM Jean-Pierre.Talpin@inria.fr
CR AMAGBEGNON P, 1995, SIGPLAN NOTICES, V30, P163, DOI 10.1145/223428.207134
   Amagbegnon T.P., 1994, RR2290 INRIA
   [Anonymous], 1995, THESIS U CALIFORNIA
   Benveniste A, 2002, LECT NOTES COMPUT SC, V2491, P252
   BENVENISTE A, 1991, P IEEE, V79, P1270, DOI 10.1109/5.97297
   Benveniste A, 2003, P IEEE, V91, P64, DOI 10.1109/JPROC.2002.805826
   Benveniste A, 2000, INFORM COMPUT, V163, P125, DOI [10.1006/inco.2000.9999, 10.1006/inco.2000.2898]
   BERGSTRA JA, 1985, LECT NOTES COMPUT SC, V197, P76
   BERGSTRA JA, 1984, INFORM CONTROL, V60, P109, DOI 10.1016/S0019-9958(84)80025-X
   Berry G, 2000, FORM METHOD SYST DES, V17, P135, DOI 10.1023/A:1008796718837
   Besnard L., 2020, SIGNAL V4 INRIA VERS
   Besnard L., 1992, THESIS U RENNES 1 FR
   Besnard L, 2010, SYNTHESIS OF EMBEDDED SOFTWARE: FRAMEWORKS AND METHODOLOGIES FOR CORRECTNESS BY CONSTRUCTION, P1, DOI 10.1007/978-1-4419-6400-7_1
   BROCK JD, 1981, LECT NOTES COMPUT SC, V107, P252
   Buck J. T., 1993, ICASSP-93. 1993 IEEE International Conference on Acoustics, Speech, and Signal Processing (Cat. No.92CH3252-4), P429, DOI 10.1109/ICASSP.1993.319147
   Carloni L. P., 1999, Computer Aided Verification. 11th International Conference, CAV'99. Proceedings (Lecture Notes in Computer Science Vol.1633), P123
   Caspi P., 1995, EURO-PAR '95 Parallel Processing. First International EURO-PAR Conference. Proceedings, P15
   Caspi P, 2009, LECT NOTES COMPUT SC, V5469, P46, DOI 10.1007/978-3-642-00602-9_4
   Caspi P, 1996, ACM SIGPLAN NOTICES, V31, P226, DOI 10.1145/232629.232651
   CASPI P, 1992, THEOR COMPUT SCI, V94, P125, DOI 10.1016/0304-3975(92)90326-B
   Cohen A, 2006, ACM SIGPLAN NOTICES, V41, P180, DOI 10.1145/1111320.1111054
   Cohen A, 2008, LECT NOTES COMPUT SC, V5356, P237
   de Kock EA, 2000, DES AUT CON, P402
   Gamatie A, 2010, DESIGNING EMBEDDED SYSTEMS WITH THE SIGNAL PROGRAMMING LANGUAGE, P1, DOI 10.1007/978-1-4419-0941-1
   Geilen M, 2003, LECT NOTES COMPUT SC, V2618, P319
   Geilen M, 2010, HANDBOOK OF SIGNAL PROCESSING SYSTEMS, P967, DOI 10.1007/978-1-4419-6345-1_34
   Glouche Y, 2010, SYNTHESIS OF EMBEDDED SOFTWARE: FRAMEWORKS AND METHODOLOGIES FOR CORRECTNESS BY CONSTRUCTION, P147, DOI 10.1007/978-1-4419-6400-7_5
   Goel M., 1998, M9869 UCBERL U CAL E
   HALBWACHS N, 1991, P IEEE, V79, P1305, DOI 10.1109/5.97300
   Hoare CAR., 1985, Communicating Sequential Processes
   Hylands C., 2003, Overview of the Ptolemy Project
   KAHN G., 1974, SEMANTICS SIMPLE LAN, P471
   Le Guernic P, 2003, J CIRCUIT SYST COMP, V12, P261, DOI 10.1142/S0218126603000763
   Lee EA, 1998, IEEE T COMPUT AID D, V17, P1217, DOI 10.1109/43.736561
   LEE EA, 1987, IEEE T COMPUT, V36, P24, DOI 10.1109/TC.1987.5009446
   LEE EA, 1995, P IEEE, V83, P773, DOI 10.1109/5.381846
   LEGUERNIC P, 1991, P IEEE, V79, P1321, DOI 10.1109/5.97301
   LEGUERNIC P, 1991, ADV TOPICS DATA FLOW, P413
   Liu XJ, 2008, THEOR COMPUT SCI, V409, P110, DOI 10.1016/j.tcs.2008.08.044
   MILNER R, 1992, INFORM COMPUT, V100, P1, DOI [10.1016/0890-5401(92)90008-4, 10.1016/0890-5401(92)90009-5]
   MILNER R, 1983, THEOR COMPUT SCI, V25, P267, DOI 10.1016/0304-3975(83)90114-7
   Milner R., 1980, A calculus of communicating systems
   Ouy J., 2008, THESIS U RENNES 1 FR
   Panangaden P., 1995, Foundations of Software Technology and Theoretical Computer Science. 15th Conference. Proceedings, P124
   PANANGADEN P, 1992, INFORM COMPUT, V98, P99, DOI 10.1016/0890-5401(92)90043-F
   Potop-Butucaru D, 2007, FUND INFORM, V78, P131
   Potop-Butucaru D, 2006, FORM METHOD SYST DES, V28, P111, DOI 10.1007/s10703-006-7844-8
   Potop-Butucaru D, 2009, NINTH INTERNATIONAL CONFERENCE ON APPLICATION OF CONCURRENCY TO SYSTEM DESIGN, PROCEEDINGS, P42, DOI 10.1109/ACSD.2009.23
   Ptolemaeus C., 2014, System Design, Modeling, and Simulation using Ptolemy II
   Stevens R.S., 1997, M9784 UCBERL U CAL E
   Talpin J., 2005, 5 ACM INT C EMBEDDED, P282
   Talpin JP, 2014, SCI COMPUT PROGRAM, V96, P377, DOI 10.1016/j.scico.2014.04.009
   Talpin JP, 2012, SCI COMPUT PROGRAM, V77, P113, DOI 10.1016/j.scico.2010.06.006
   Wadler Philip., 1984, LFP 84 P 1984 ACM S, P45, DOI DOI 10.1145/800055.802020
   Yang ZB, 2021, SCI COMPUT PROGRAM, V207, DOI 10.1016/j.scico.2021.102644
   Yang ZB, 2016, FRONT COMPUT SCI-CHI, V10, P37, DOI 10.1007/s11704-015-4364-y
NR 56
TC 1
Z9 1
U1 2
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN
PY 2023
VL 228
AR 102958
DI 10.1016/j.scico.2023.102958
EA MAY 2023
PG 28
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA I3CL0
UT WOS:001001592000001
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Wang, C
   Jiang, JW
   Daneva, M
   van Sinderen, M
AF Wang, Chong
   Jiang, Jingwen
   Daneva, Maya
   van Sinderen, Marten
TI CoolTeD: A tool for co-labeling and visual analysis of textual dataset
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Data labeling; Collaborative labeling; Textual data; Data visualization;
   Requirements engineering
ID TECHNOLOGY
AB High-quality labeled textual data are reported as an important type of research data in data-driven requirements engineering (RE), especially in automatic mining and analysis of massive textual data produced by software systems. Several tools have been designed to facilitate manual labeling of textual data at different levels of granularity. However, these tools neither aim to provide visualized statistics and analysis of labeled textual data, nor support collaboration among the coders to reduce the time cost in manual labeling and enhance the quality of labeling results. Besides, these tools seldom explicitly serve RE researchers. In this paper, we developed a Web-based labeling tool named CoolTeD (available at http://williamsriver.cn) for collaborative labeling of the textual datasets for RE purposes. Specifically, CoolTeD can be used to: (1) label textual data with the tag category based on ISO 25010 or other user-defined tag categories in a collaborative way; (2) review the labeling results with different confidence levels and contradictory labels, (3) identify contradictory labels and disagreements online; (4) automatically calculate the Cohen's Kappa coefficient of multiple coders, and (5) visualize the labeling results. The tool demo is available at https://youtu .be /KTVrLLenvLE.(c) 2023 Elsevier B.V. All rights reserved.
C1 [Wang, Chong; Jiang, Jingwen] Wuhan Univ, Sch Comp Sci, Wuhan 430072, Peoples R China.
   [Wang, Chong; Daneva, Maya; van Sinderen, Marten] Univ Twente, SCS Grp, NL-7500 AE Enschede, Netherlands.
C3 Wuhan University; University of Twente
RP Wang, C (corresponding author), Wuhan Univ, Sch Comp Sci, Wuhan 430072, Peoples R China.; Wang, C (corresponding author), Univ Twente, SCS Grp, NL-7500 AE Enschede, Netherlands.
EM cwang@whu.edu.cn
RI Jiang, Jing wen/AAP-5996-2021; Wang, Chong/IAN-4220-2023
OI WANG, Chong/0000-0003-4576-5392
FU National Natural Science Foundation of China [61702378, 61972292,
   61832014]
FX Acknowledgements This work is supported by the National Natural Science
   Foundation of China under Grant Nos. 61702378, 61972292, and 61832014.
CR [Anonymous], 2011, 25010 ISOIEC
   [Anonymous], 2019, P 31 INT C SOFTWARE, P398
   Lin S, 2019, PROCEEDINGS OF THE 57TH ANNUAL MEETING OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS: SYSTEM DEMONSTRATIONS, (ACL 2019), P99
   Lu Mengmeng., 2017, P 21 INT C EVALUATIO, P344, DOI [10.1145/3084226.3084241, DOI 10.1145/3084226.3084241]
   Maalej W, 2016, REQUIR ENG, V21, P311, DOI 10.1007/s00766-016-0251-9
   McHugh ML, 2012, BIOCHEM MEDICA, V22, P276, DOI 10.11613/bm.2012.031
   Stubbs Amber., 2011, Proceedings of the 5th Linguistic Annotation Workshop, P129
   Tannier X, 2012, LREC 2012 - EIGHTH INTERNATIONAL CONFERENCE ON LANGUAGE RESOURCES AND EVALUATION, P316
   Venkatesh V, 2003, MIS QUART, V27, P425, DOI 10.2307/30036540
   Wang C, 2022, EUR CON SFTWR MTNCE, P613, DOI 10.1109/SANER53432.2022.00078
   Wang C, 2019, 2019 IEEE 27TH INTERNATIONAL REQUIREMENTS ENGINEERING CONFERENCE WORKSHOPS (REW 2019), P207, DOI 10.1109/REW.2019.00042
   Wang C, 2019, J SOFTW-EVOL PROC, V31, DOI 10.1002/smr.2199
   Wang C, 2018, PROCEEDINGS OF THE 12TH ACM/IEEE INTERNATIONAL SYMPOSIUM ON EMPIRICAL SOFTWARE ENGINEERING AND MEASUREMENT (ESEM 2018), DOI 10.1145/3239235.3267428
   Wieringa R, 2014, J SYST SOFTWARE, V95, P19, DOI 10.1016/j.jss.2013.11.1097
   Yang H., 2015, INT C SOFTW ENG KNOW, P7
NR 15
TC 0
Z9 0
U1 0
U2 4
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD APR
PY 2023
VL 227
AR 102940
DI 10.1016/j.scico.2023.102940
EA MAR 2023
PG 10
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA A0HA2
UT WOS:000952011100001
OA Green Published
DA 2024-07-18
ER

PT J
AU Birchler, C
   Ganz, N
   Khatiri, S
   Gambi, A
   Panichella, S
AF Birchler, Christian
   Ganz, Nicolas
   Khatiri, Sajad
   Gambi, Alessio
   Panichella, Sebastiano
TI Cost-effective simulation-based test selection in self-driving cars
   software
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Self -driving cars; Software simulation; Regression testing; Test case
   selection; Continuous integration
AB Simulation environments are essential for the continuous development of complex cyberphysical systems such as self-driving cars (SDCs). Previous results on simulation-based testing for SDCs have shown that many automatically generated tests do not strongly contribute to the identification of SDC faults, hence do not contribute towards increasing the quality of SDCs. Because running such "uninformative " tests generally leads to a waste of computational resources and a drastic increase in the testing cost of SDCs, testers should avoid them. However, identifying "uninformative " tests before running them remains an open challenge. Hence, this paper proposes SDC-Scissor, a framework that leverages Machine Learning (ML) to identify SDC tests that are unlikely to detect faults in the SDC software under test, thus enabling testers to skip their execution and drastically increase the cost-effectiveness of simulation-based testing of SDCs software. Our evaluation concerning the usage of six ML models on two large datasets characterized by 22'652 tests showed that SDC-Scissor achieved a classification F1-score up to 96%. Moreover, our results show that SDC-Scissor outperformed a randomized baseline in identifying more failing tests per time unit. Webpage & Video: https://github .com /ChristianBirchler /sdc -scissor (c) 2023 The Authors. Published by Elsevier B.V. This is an open access article under the CC BY license (http://creativecommons .org /licenses /by /4 .0/).
C1 [Birchler, Christian; Ganz, Nicolas; Khatiri, Sajad; Panichella, Sebastiano] Zurich Univ Appl Sci, Zurich, Switzerland.
   [Khatiri, Sajad] Software Inst USI Lugano, Lugano, Switzerland.
   [Gambi, Alessio] Univ Passau, Passau, Germany.
C3 Zurich University of Applied Sciences; University of Passau
RP Birchler, C (corresponding author), Zurich Univ Appl Sci, Zurich, Switzerland.
EM birchler.chr@gmail.com
RI Khatiri, Sajad/HNC-2406-2023
OI Khatiri, Sajad/0000-0003-0354-9747; Erni, Nicolas/0000-0002-4165-0275;
   Birchler, Christian/0000-0003-3987-0276; Panichella,
   Sebastiano/0000-0003-4120-626X
FU Horizon 2020 (EU Commission) [957254-COSMOS]; DFG project STUNT (DFG)
   [FR 2955/4-1]
FX We gratefully acknowledge the Horizon 2020 (EU Commission) support for
   the project COSMOS (DevOps for Complex Cyber-physical Systems) , Project
   No. 957254-COSMOS) and the DFG project STUNT (DFG Grant Agreement n. FR
   2955/4-1) .
CR Afzal A, 2021, IEEE INT CONF SOFTW, P263, DOI 10.1109/ICST49551.2021.00036
   Afzal A, 2020, IEEE INT CONF SOFTW, P96, DOI 10.1109/ICST46399.2020.00020
   Alcon M, 2021, 2021 24TH EUROMICRO CONFERENCE ON DIGITAL SYSTEM DESIGN (DSD 2021), P426, DOI 10.1109/DSD53832.2021.00071
   Baheti R., 2011, Impact Control Technol, V12, P161, DOI DOI 10.1145/1795194.1795205
   Ben Abdessalem R, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P1016, DOI 10.1145/3180155.3180160
   Birchler C., 2022, ACM Trans. Softw. Eng. Methodol. (TOSEM)
   Birchler C, 2022, EUR CON SFTWR MTNCE, P164, DOI 10.1109/SANER53432.2022.00030
   Bojarczuk K., 2021, ESEM 21 ACM IEEE INT
   Canfora G, 2013, 2013 IEEE SIXTH INTERNATIONAL CONFERENCE ON SOFTWARE TESTING, VERIFICATION AND VALIDATION (ICST 2013), P252, DOI 10.1109/ICST.2013.38
   Caruana R, 2006, P 23 INT C MACH LEAR, V148, P161, DOI DOI 10.1145/1143844.1143865
   Castellano E, 2021, 2021 IEEE/ACM 14TH INTERNATIONAL WORKSHOP ON SEARCH-BASED SOFTWARE TESTING (SBST 2021), P36, DOI 10.1109/SBST52555.2021.00016
   Cleland-Huang J, 2018, INT REQUIR ENG CONF, P262, DOI 10.1109/RE.2018.00034
   Di Nucci D, 2020, IEEE T SOFTWARE ENG, V46, P674, DOI 10.1109/TSE.2018.2868082
   Di Sorbo A, 2016, FSE'16: PROCEEDINGS OF THE 2016 24TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON FOUNDATIONS OF SOFTWARE ENGINEERING, P499, DOI 10.1145/2950290.2950299
   Dosovitskiy A., 2017, P 1 ANN C ROB LEARN, P1, DOI DOI 10.48550/ARXIV.1711.03938
   Gambi A, 2019, ESEC/FSE'2019: PROCEEDINGS OF THE 2019 27TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P257, DOI 10.1145/3338906.3338942
   Gambi A, 2019, 2019 IEEE/ACM 41ST INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING: COMPANION PROCEEDINGS (ICSE-COMPANION 2019), P27, DOI 10.1109/ICSE-Companion.2019.00030
   Gerstenberger C, 2015, STAT METHOD APPL-GER, V24, P569, DOI 10.1007/s10260-015-0315-x
   Grano G, 2021, IEEE T SOFTWARE ENG, V47, P2332, DOI 10.1109/TSE.2019.2946773
   Ho TK, 1998, IEEE T PATTERN ANAL, V20, P832, DOI 10.1109/34.709601
   Huang ZQ, 2021, SENSORS-BASEL, V21, DOI 10.3390/s21196340
   Ingrand F, 2019, 2019 THIRD IEEE INTERNATIONAL CONFERENCE ON ROBOTIC COMPUTING (IRC 2019), P321, DOI 10.1109/IRC.2019.00059
   Kalra N, 2016, TRANSPORT RES A-POL, V94, P182, DOI 10.1016/j.tra.2016.09.010
   Ke GL, 2017, ADV NEUR IN, V30
   Kim J, 2019, IEEE ICST WORKSHOP, P148, DOI 10.1109/ICSTW.2019.00043
   Martinez-Taboada F., 2020, PLOS ONE
   Nguyen V, 2021, THIRD IEEE INTERNATIONAL CONFERENCE ON ARTIFICIAL INTELLIGENCE TESTING (AITEST 2021), P128, DOI 10.1109/AITEST52744.2021.00033
   Panichella S, 2021, 2021 IEEE/ACM 14TH INTERNATIONAL WORKSHOP ON SEARCH-BASED SOFTWARE TESTING (SBST 2021), P20, DOI 10.1109/SBST52555.2021.00011
   Panichella S, 2015, PROC IEEE INT CONF S, P281, DOI 10.1109/ICSM.2015.7332474
   Piazzoni A, 2021, THIRD IEEE INTERNATIONAL CONFERENCE ON ARTIFICIAL INTELLIGENCE TESTING (AITEST 2021), P143, DOI 10.1109/AITEST52744.2021.00035
   Roy D, 2021, PROCEEDINGS OF THE 2021 DESIGN, AUTOMATION & TEST IN EUROPE CONFERENCE & EXHIBITION (DATE 2021), P1893, DOI 10.23919/DATE51398.2021.9474012
   SAFAVIAN SR, 1991, IEEE T SYST MAN CYB, V21, P660, DOI 10.1109/21.97458
   Sammut C., 2010, ENCY MACHINE LEARNIN, P631, DOI [10.1007/978-0-387-30164-8, DOI 10.1007/978-0-387-30164-8]
   Smith SC, 2021, IEEE INT C INT ROBOT, P6546, DOI 10.1109/IROS51168.2021.9636336
   Sorbo A.D., 2022, ACM T SOFTW ENG METH
   Suthaharan S, 2016, INTEGR SER INFORM SY, V36, P207
   Timperley CS, 2018, IEEE INT CONF SOFTW, P331, DOI 10.1109/ICST.2018.00040
   Trautsch A, 2020, PROC IEEE INT CONF S, P127, DOI 10.1109/ICSME46990.2020.00022
   Wang DH, 2021, PROCEEDINGS OF THE 29TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE '21), P20, DOI 10.1145/3468264.3468559
   Wotawa F., 2021, CEUR WORKSHOP PROC, V2808
   Yoo S, 2010, J SYST SOFTWARE, V83, P689, DOI 10.1016/j.jss.2009.11.706
   Zampetti F, 2022, J SYST SOFTWARE, V192, DOI 10.1016/j.jss.2022.111425
NR 42
TC 5
Z9 6
U1 2
U2 6
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR
PY 2023
VL 226
AR 102926
DI 10.1016/j.scico.2023.102926
EA JAN 2023
PG 12
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 8R6JR
UT WOS:000927999700001
OA Green Published, Green Submitted, hybrid
DA 2024-07-18
ER

PT J
AU Ali, MR
   Lamo, Y
   Pun, VKI
AF Ali, Muhammad Rizwan
   Lamo, Yngve
   Pun, Violet Ka, I
TI Cost analysis for a resource sensitive workflow modelling language
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 23rd International Conference on Coordination Models and Languages
   (COORDINATION)
CY JUN 14-18, 2021
CL ELECTR NETWORK
DE Cross -organisational workflows; Resource planning; Formal modelling;
   Static analysis
AB Workflow analysis usually requires domain-specific knowledge from the domain experts, making it a relatively manual process. In addition, workflows often cross organisational boundaries. As a result, minor local modifications in the workflow of a collaborative partner may be propagated to other concurrently running tasks of the workflow, which is difficult for the domain experts to recognise since they only have a limited (local) view of the workflow. Therefore, changes in cross-organisational workflows may result in significant adverse impacts. This paper presents a resource-sensitive formal modelling language, RPL, which has explicit notions of task dependencies, qualitative assessment of resources, time advancement and method execution deadlines. The language allows the workflow analysers to estimate the effect of changes in collaborative workflows with respect to cost in terms of execution time. This paper proposes a static analysis to compute the worst execution time of a cross-organisational workflow modelled in RPL by defining a compositional function that translates an RPL program to a set of cost equations.(c) 2022 The Author(s). Published by Elsevier B.V. This is an open access article under the CC BY license (http://creativecommons.org/licenses/by/4.0/).
C1 [Ali, Muhammad Rizwan; Lamo, Yngve; Pun, Violet Ka, I] Western Norway Univ Appl Sci, Bergen, Norway.
C3 Western Norway University of Applied Sciences
RP Ali, MR; Pun, VKI (corresponding author), Western Norway Univ Appl Sci, Bergen, Norway.
EM mral@hvl.no; Yngve.Lamo@hvl.no; Violet.Ka.I.Pun@hvl.no
FU Research Council of Norway;  [326249]
FX This work is part of the CroFlow project: Enabling Highly Automated
   Cross-Organisational Workflow Planning, funded by the Research Council
   of Norway (grant no. 326249) .
CR AGHA G, 1985, LECT NOTES COMPUT SC, V206, P19
   Albert E, 2015, LECT NOTES COMPUT SC, V9291, P275, DOI 10.1007/978-3-662-48288-9_16
   Albert E, 2012, THEOR COMPUT SCI, V413, P142, DOI 10.1016/j.tcs.2011.07.009
   Albert E, 2011, J AUTOM REASONING, V46, P161, DOI 10.1007/s10817-010-9174-1
   Ali M.R., 2021, ADV MODEL DATA ENG D, P251
   Ali MR, 2021, LECT NOTES COMPUT SC, V13130, P104, DOI 10.1007/978-3-030-92137-8_7
   [Anonymous], 2003, THESIS UPPSALA U
   Behrmann Gerd, 2006, Uppaal 4.0
   Ben Hassen Mariam, 2018, International Journal of Strategic Information Technology and Applications, V9, P41, DOI 10.4018/IJSITA.2018010103
   Bog A., 2006, TOOL SIMULATION PI C
   Bouchbout K., 2011, P 2 15 E EUR C ADV D, V789, P45
   Chinosi M, 2012, COMPUT STAND INTER, V34, P124, DOI 10.1016/j.csi.2011.06.002
   DIJKMAN RM, 2007, FORMAL SEMANTICS AUT
   Din CC, 2015, LECT NOTES ARTIF INT, V9195, P517, DOI 10.1007/978-3-319-21401-6_35
   Dourish P., 2001, GROUP'01. Proceedings of the 2001 International ACM SIGGROUP Conference on Supporting Group Work, P52, DOI 10.1145/500286.500297
   Dumas Marlon., 2001, ≪ UML≫ 2001-The Unified Modeling Language. Modeling Languages, Concepts, P76, DOI 10.1007/3-540-45441-17
   Flores-Montoya Antonio, 2014, Programming Languages and Systems. 12th Asian Symposium (APLAS 2014), Proceedings: LNCS 8858, P275, DOI 10.1007/978-3-319-12736-1_15
   Giachino E, 2016, LECT NOTES COMPUT SC, V9539, P199, DOI 10.1007/978-3-319-28934-2_11
   Gronau N., 2012, MODELING ANAL KNOWLE, P195
   Guizzardi R. S., 2007, P 2 BRAZ WORKSH ONT
   Gustavsson A., 2010, 10 INT WORKSHOP WORS, P101
   Haider A.A., 2013, INT J FUTURE COMPUT, V2
   Hoffmann J, 2015, LECT NOTES COMPUT SC, V9032, P132, DOI 10.1007/978-3-662-46669-8_6
   Jensen K, 1997, LECT NOTES COMPUT SC, V1217, P203, DOI 10.1007/BFb0035389
   Jensen K, 2009, COLOURED PETRI NETS: MODELLING AND VALIDATION OF CONCURRENT SYSTEMS, P1, DOI 10.1007/b95112
   Jie Meng, 2006, International Journal of Business Process Integration and Management, V1, P101, DOI 10.1504/IJBPIM.2006.010024
   Johnsen E.B., 2011, Lecture Notes in Computer Science, V6957, P142, DOI [10.1007/978- 3- 642-25271-6 8, DOI 10.1007/978-3-642-25271-6]
   Jost W., 2002, ARIS TOOLSET, P15
   Laneve C, 2019, J LOG ALGEBR METHODS, V105, P1, DOI 10.1016/j.jlamp.2019.02.007
   Ould M.A., 1995, BUSINESS PROCESSES M
   Ouyang C, 2006, ICWS 2006: IEEE INTERNATIONAL CONFERENCE ON WEB SERVICES, PROCEEDINGS, P285
   Puhlmann R, 2005, LECT NOTES COMPUT SC, V3649, P153, DOI 10.1007/11538394_11
   Sundmark D., 2008, THESIS MALARDALEN U
   Ter Hofstede A.H.M., 2009, Modern Business Process Automation: YAWL and Its Support Environment
   van der Aalst W, 2000, INFORM MANAGE, V37, P67, DOI 10.1016/S0378-7206(99)00038-5
   van der Aalst WMP, 2005, INFORM SYST, V30, P245, DOI 10.1016/j.is.2004.02.002
   Van der Aalst WMP, 1998, J CIRCUIT SYST COMP, V8, P21, DOI 10.1142/S0218126698000043
   Wagner K., 2006, BUSINESS PROCESS DES, P117
   Woitsch R, 2005, J UNIVERS COMPUT SCI, V11, P565
   Xu LD, 2009, SYST RES BEHAV SCI, V26, P367, DOI 10.1002/sres.978
NR 40
TC 1
Z9 1
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN
PY 2023
VL 225
SI SI
AR 102896
DI 10.1016/j.scico.2022.102896
EA NOV 2022
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 7T5ZH
UT WOS:000911523700003
OA hybrid
DA 2024-07-18
ER

PT J
AU Eliott, HP
   Berger, M
AF Eliott, Harold Pancho
   Berger, Martin
TI A program logic for fresh name generation
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Programming language; Lambda -calculus; Fresh name generation; Program
   logic; Program verification
AB We present a program logic for Pitts and Stark???s v-calculus, an extension of the call-byvalue simply-typed A-calculus with a mechanism for the generation of fresh names. Names can be compared for equality and inequality, producing programs with subtle observable properties. Hidden names produced by interactions between generation and abstraction are captured logically with a second-order quantifier over type contexts. We illustrate usage of the logic through reasoning about well-known difficult cases from the literature. ?? 2022 The Authors. Published by Elsevier B.V. This is an open access article under the CC BY-NC-ND license (http://creativecommons.org/licenses/by-nc-nd/4.0/).
C1 [Eliott, Harold Pancho; Berger, Martin] Univ Sussex, Dept Informat, Brighton, E Sussex, England.
   [Berger, Martin] Huawei 2012 Labs, Turing Core, London, England.
C3 University of Sussex
RP Eliott, HP (corresponding author), Univ Sussex, Dept Informat, Brighton, E Sussex, England.
EM panchoeliott@gmail.com; contact@martinfriedrichberger.net
OI Berger, Martin/0000-0003-3239-5812
CR [Anonymous], 1994, 363 U CAMBR COMP LAB
   [Anonymous], 1987, Introduction to Mathematical Logic
   Benton Nick, 2008, MSRTR2008129
   Berger M., 2017, PROC ECOOP
   Berger M, 2015, LOG METH COMPUT SCI, V11, DOI 10.2168/LMCS-11(1:5)2015
   BLACKBURN P., 1999, LOG J IGPL, V7, P27
   Dreyer D, 2010, ACM SIGPLAN NOTICES, V45, P143, DOI 10.1145/1932681.1863566
   Eliott H.P.G., 2021, PROC FSEN, P76
   Eliott H.P.G., 2022, THESIS U SUSSEX
   Fernandez Maribel., 2004, PPDP 04, P108, DOI DOI 10.1145/1013963.1013978
   Gabbay M. J., 2002, Formal Aspects of Computing, V13, P341, DOI 10.1007/s001650200016
   Honda K., 2000, Mathematical Structures in Computer Science, V10, P617, DOI 10.1017/S0960129599002947
   Honda K., 2004, P 6 ACM SIGPLAN INT, P191, DOI [10.1145/1013963.1013985, DOI 10.1145/1013963.1013985]
   MILNER R, 1992, INFORM COMPUT, V100, P1, DOI [10.1016/0890-5401(92)90008-4, 10.1016/0890-5401(92)90009-5]
   Odersky M., 1994, Conference Record of POPL '94: 21st ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P48, DOI 10.1145/174675.175187
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Pitts AM, 2013, CAM T THEOR, V57, P1, DOI 10.1017/CBO9781139084673
   Pitts A. M., 1993, Mathematical Foundations of Computer Science 1993. 18th International Symposium, MFCS '93 Proceedings, P122
   Pitts AM, 2003, INFORM COMPUT, V186, P165, DOI 10.1016/S0890-5401(03)00138-X
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Tzevelekos N, 2012, COMPUT LANG SYST STR, V38, P181, DOI 10.1016/j.cl.2012.02.002
   Urban C, 2005, LECT NOTES ARTIF INT, V3632, P38
   Yoshida N, 2008, LOG METH COMPUT SCI, V4, DOI 10.2168/LMCS-4(4:2)2008
NR 23
TC 0
Z9 0
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 1
PY 2022
VL 223
AR 102860
DI 10.1016/j.scico.2022.102860
EA SEP 2022
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 4V5MH
UT WOS:000859520500002
OA Green Submitted, hybrid, Green Accepted
DA 2024-07-18
ER

PT J
AU De Stefano, M
   Iannone, E
   Pecorelli, F
   Tamburri, DA
AF De Stefano, Manuel
   Iannone, Emanuele
   Pecorelli, Fabiano
   Tamburri, Damian Andrew
TI Impacts of software community patterns on process and product: An
   empirical study
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Community patterns; Community smells; Empirical studies
ID CYCLOMATIC COMPLEXITY; COORDINATION; INSIGHTS; CAUTION; METRICS; SMELLS;
   GUIDE
AB Software engineering projects are now more than ever a community effort. In the recent past, researchers have shown that their success not only depends on source code quality, but also on other aspects like the balance of power distance, culture, and global engineering practices, and more. In such a scenario, understanding the characteristics of the community around a project and foresee possible problems may be the key to develop successful systems. In this paper, we focus on this research problem and propose an exploratory study on the relation between community patterns, i.e.,recurrent mixes of organizational or social structure types, and aspects related to the quality of software products and processes by mining open-source software repositories hosted on GITHuB. We first exploit association rule mining to discover frequent relations between community pattern and community smells, i.e.,sub-optimal patterns across the organizational structure of a software development community that may be precursors of some form of social debt. Further on, we use statistical analyses to understand their impact on software maintainability and on the community engagement, in terms of contributions and issues. Our findings show that different organizational patterns are connected to different forms of socio-technical problems; further on, specific combinations are set in equally specific contextual conditions. Findings support two possible conclusions: (1) practitioners should put in place specific preventive actions aimed at avoiding the emergence of community smells and (2) such actions should be drawn according to the contextual conditions of the organization and the project. (C) 2021 Elsevier B.V. All rights reserved.
C1 [De Stefano, Manuel; Iannone, Emanuele; Pecorelli, Fabiano] Univ Salerno, SeSa Lab, Salerno, Italy.
   [Tamburri, Damian Andrew] Eindhoven Univ Technol, JADE Lab, Jheronimus Acad Data Sci, Eindhoven, Netherlands.
C3 University of Salerno; Eindhoven University of Technology
RP De Stefano, M (corresponding author), Univ Salerno, SeSa Lab, Salerno, Italy.
EM madestefano@unisa.it; eiannone@unisa.it; fpecorelli@unisa.it;
   d.a.tamburri@tue.nl
RI De Stefano, Manuel/GRO-2842-2022; Iannone, Emanuele/ABK-1299-2022;
   Tamburri, Damian Andrew/AAJ-2507-2021; Pecorelli, Fabiano/HKO-8789-2023
OI De Stefano, Manuel/0000-0001-6038-4171; Iannone,
   Emanuele/0000-0001-7489-9969; Tamburri, Damian
   Andrew/0000-0003-1230-8961; Pecorelli, Fabiano/0000-0003-2446-4291
FU European Commission [825480, 825040]
FX This work is supported by the European Commission grant no. 825480
   (SODALITE H2020) and no. 825040 (RADON H2020). We thank all members of
   the SODALITE and RADON consortia for their inputs and feedback to the
   development of this paper. Furthermore, we thank the editor and
   anonymous reviewers for the invaluable feedback over this paper.
CR Agrawal R., 1993, SIGMOD Record, V22, P207, DOI 10.1145/170036.170072
   ALBA RD, 1973, J MATH SOCIOL, V3, P113, DOI 10.1080/0022250X.1973.9989826
   Albino V., 1998, International Journal of Project Management, V16, P9, DOI DOI 10.1016/S0263-7863(97)00007-0
   Almarimi N, 2020, INT CONF GLOBAL SOFT, P43, DOI 10.1145/3372787.3390439
   [Anonymous], 2005, 1 MONDAY, DOI DOI 10.5210/FM.V10I2.1207
   [Anonymous], 1994, P INT C VERY LARGE D
   [Anonymous], 2011, SIGSOFT SOFTW ENG NO
   Baron DP, 1992, J ECON MANAGE STRAT, V1, P237, DOI 10.1111/j.1430-9134.1992.00237.x
   Bird Christian, 2009, 2009 20th International Symposium on Software Reliability Engineering (ISSRE 2009), P109, DOI 10.1109/ISSRE.2009.17
   Bloodgood JM, 2003, J MANAGE STUD, V40, P1761, DOI 10.1111/1467-6486.00399
   Borges H, 2016, PROC IEEE INT CONF S, P334, DOI 10.1109/ICSME.2016.31
   Cataldo M, 2008, ESEM'08: PROCEEDINGS OF THE 2008 ACM-IEEE INTERNATIONAL SYMPOSIUM ON EMPIRICAL SOFTWARE ENGINEERING AND MEASUREMENT, P2
   Catolino G., SECRET LIFE SOFTWARE
   Catolino G, 2020, 2020 IEEE/ACM 42ND INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING: SOFTWARE ENGINEERING IN SOCIETY (ICSE-SEIS 2021), P25, DOI 10.1145/3377815.3381380
   Catolino G, 2020, IEEE SOFTWARE, V37, P10, DOI 10.1109/MS.2019.2944594
   Catolino G, 2019, 2019 IEEE/ACM 41ST INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING: SOFTWARE ENGINEERING IN SOCIETY (ICSE-SEIS 2019), P11, DOI 10.1109/ICSE-SEIS.2019.00010
   CHIDAMBER SR, 1994, IEEE T SOFTWARE ENG, V20, P476, DOI 10.1109/32.295895
   COLEMAN D, 1994, COMPUTER, V27, P44, DOI 10.1109/2.303623
   Counsell S, 2015, PROCEEDINGS 41ST EUROMICRO CONFERENCE ON SOFTWARE ENGINEERING AND ADVANCED APPLICATIONS SEAA 2015, P84, DOI 10.1109/SEAA.2015.41
   Cross R, 2005, HARVARD BUS REV, V83, P124
   Crowston K, 2017, J INTERNET SERV APPL, V8, DOI 10.1186/s13174-017-0061-4
   De Stefano M., IMPACTS SOFTWARE COM, P2021, DOI [10.6084/m9.figshare.13140182.v2, DOI 10.6084/M9.FIGSHARE.13140182.V2]
   De Stefano M., 2020, ICSE 20 42 INT C SOF, P703, DOI DOI 10.1145/3387940.3392204
   Falessi D, 2017, INT SYMP EMP SOFTWAR, P151, DOI 10.1109/ESEM.2017.22
   Fisher RA, 1922, J R STAT SOC, V85, P87, DOI 10.2307/2340521
   Gallagher S., 2006, JANUS HEAD, V9, P1
   Ganpati A., 2012, COMP STUDY MAINTAINA
   Giatsidis C, 2013, KNOWL INF SYST, V35, P311, DOI 10.1007/s10115-012-0539-0
   Giatsidis C, 2011, 2011 INTERNATIONAL CONFERENCE ON ADVANCES IN SOCIAL NETWORKS ANALYSIS AND MINING (ASONAM 2011), P87, DOI 10.1109/ASONAM.2011.65
   GILL GK, 1991, IEEE T SOFTWARE ENG, V17, P1284, DOI 10.1109/32.106988
   Grinter RE, 1999, P 1999 ACM INT C SUP, P306, DOI DOI 10.1145/320297.320333
   Halekoh U, 2006, J STAT SOFTW, V15, P1, DOI 10.18637/jss.v015.i02
   Halstead M. H., 1977, ELEMENTS SOFTWARE SC
   Heitlager I, 2007, QUATIC 2007: 6TH INTERNATIONAL CONFERENCE ON THE QUALITY OF INFORMATION AND COMMUNICATIONS TECHNOLOGY, PROCEEDINGS, P30, DOI 10.1109/QUATIC.2007.8
   Henderson-Sellers B., 1994, Software Quality and Productivity, P328
   Herbsleb JD, 1999, IEEE SOFTWARE, V16, P63, DOI 10.1109/52.795103
   Hislop D., 2004, ORG CRITICAL INTRO
   Ito K., 2016, P 5 AS C PATT LANG P
   Jansen S, 2014, INFORM SOFTWARE TECH, V56, P1508, DOI 10.1016/j.infsof.2014.04.006
   Jarvenpaa SL, 1999, ORGAN SCI, V10, P791, DOI 10.1287/orsc.10.6.791
   Joblin M, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 1, P563, DOI 10.1109/ICSE.2015.73
   Kalliamvakou E, 2016, EMPIR SOFTW ENG, V21, P2035, DOI 10.1007/s10664-015-9393-5
   Kwan I, 2011, IEEE T SOFTWARE ENG, V37, P307, DOI 10.1109/TSE.2011.29
   Martini A, 2017, 2017 IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ARCHITECTURE WORKSHOPS (ICSAW), P179, DOI 10.1109/ICSAW.2017.42
   McCabe T. J., 1976, IEEE Transactions on Software Engineering, VSE-2, P308, DOI 10.1109/TSE.1976.233837
   Meneely A, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P281, DOI 10.1145/1985793.1985832
   Morrison CM, 2003, PERCEPT MOTOR SKILL, V97, P80, DOI 10.2466/PMS.97.5.80-82
   Nagappan N, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P521, DOI 10.1145/1368088.1368160
   Nakakoji K., 2003, INT WORKSH PRINC SOF
   NELDER JA, 1972, J R STAT SOC SER A-G, V135, P370, DOI 10.2307/2344614
   Nordio M., 2011, Proceedings of the 2011 6th IEEE International Conference on Global Software Engineering (ICGSE 2011), P176, DOI 10.1109/ICGSE.2011.22
   O'Brien RM, 2007, QUAL QUANT, V41, P673, DOI 10.1007/s11135-006-9018-6
   Olsson J., 2009, 3 EUROPEAN COMPETITI
   OMAN P, 1994, J SYST SOFTWARE, V24, P251, DOI 10.1016/0164-1212(94)90067-1
   Oomes A. H. J., 2004, P INT WORKSHOP INFOR
   Palomba F, 2021, IEEE T SOFTWARE ENG, V47, P108, DOI 10.1109/TSE.2018.2883603
   Palomba F, 2018, INFORM SOFTWARE TECH, V99, P1, DOI 10.1016/j.infsof.2018.02.004
   Palomba F, 2016, PROC IEEE INT CONF S, P245, DOI 10.1109/ICSME.2016.27
   Palomba F, 2015, IEEE T SOFTWARE ENG, V41, P462, DOI 10.1109/TSE.2014.2372760
   Persson A, 2006, LECT NOTES ARTIF INT, V4333, P243
   Ruikar Kirti, 2009, Construction Innovation, V9, P434, DOI 10.1108/14714170910995967
   SHAPIRO SS, 1965, BIOMETRIKA, V52, P591, DOI 10.1093/biomet/52.3-4.591
   SHEPPERD M, 1988, SOFTWARE ENG J, V3, P30, DOI 10.1049/sej.1988.0003
   Spearman C, 2010, INT J EPIDEMIOL, V39, P1137, DOI 10.1093/ije/dyq191
   Stirna J, 2009, LECT NOTES BUS INF P, V29, P407
   Tamburri DA, 2021, IEEE T SOFTWARE ENG, V47, P630, DOI 10.1109/TSE.2019.2901490
   Tamburri DA, 2019, EMPIR SOFTW ENG, V24, P1369, DOI 10.1007/s10664-018-9659-9
   Tamburri DA, 2016, IEEE SOFTWARE, V33, P70, DOI 10.1109/MS.2016.144
   Tamburri DA, 2015, J INTERNET SERV APPL, V6, DOI 10.1186/s13174-015-0024-6
   Tamburri DA, 2015, 2015 12TH WORKING IEEE/IFIP CONFERENCE ON SOFTWARE ARCHITECTURE (WICSA), P61, DOI 10.1109/WICSA.2015.16
   Tamburri DA, 2013, 2013 6TH INTERNATIONAL WORKSHOP ON COOPERATIVE AND HUMAN ASPECTS OF SOFTWARE ENGINEERING (CHASE), P93, DOI 10.1109/CHASE.2013.6614739
   Tamburri DA, 2013, ACM COMPUT SURV, V46, DOI 10.1145/2522968.2522971
   Tourani P, 2017, 2017 IEEE 24TH INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER), P24, DOI 10.1109/SANER.2017.7884606
   Tseitlin A, 2013, COMMUN ACM, V56, P40, DOI 10.1145/2492007.2492022
   Welker K., 2001, J DEF SOFTW ENG NONE
   Zich J, 2008, INTERNET MATH, V5, P227, DOI 10.1080/15427951.2008.10129165
   Zimmermann T, 2005, IEEE T SOFTWARE ENG, V31, P429, DOI 10.1109/TSE.2005.72
NR 77
TC 6
Z9 6
U1 0
U2 8
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 1
PY 2022
VL 214
AR 102731
DI 10.1016/j.scico.2021.102731
EA OCT 2021
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Social Science Citation Index (SSCI)
SC Computer Science
GA XA8ZO
UT WOS:000720929000003
DA 2024-07-18
ER

PT J
AU Cai, CH
   Sun, J
   Dobbie, G
AF Cai, Cheng-Hao
   Sun, Jing
   Dobbie, Gillian
TI B model quality assessments on automated reachability repair with
   ISO/IEC 25010
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Reachability repair; B-method; Model quality; Model repair
ID LIFE-CYCLE PROCESSES; SOFTWARE; CHECKING; SECURITY
AB In software engineering, formal methods are often used to specify and verify design models of software products. Whether design models are consistent with required properties can significantly impact the quality of final software products. In this work, we study B model quality measurements based on the ISO/IEC 25010 standard. These measurements are formulated as domain-independent formulae and computed by model checking. Moreover, we study how to enable machines to automatically solve unreachable goals in B models. We suggest to use constraint solvers and semantic learners to discover state transitions to the goals. To demonstrate the effectiveness of the model repair technique, a set of experiments are conducted based on the model quality measurements. The results demonstrate that the model repair technique can solve unreachable goals while preserving the quality of models. (C) 2021 Elsevier B.V. All rights reserved.
C1 [Cai, Cheng-Hao; Sun, Jing; Dobbie, Gillian] Univ Auckland, Sch Comp Sci, 38 Princes St, Auckland 1142, New Zealand.
C3 University of Auckland
RP Cai, CH (corresponding author), Univ Auckland, Sch Comp Sci, 38 Princes St, Auckland 1142, New Zealand.
EM chenghao.cai@auckland.ac.nz; jing.sun@auckland.ac.nz;
   g.dobbie@auckland.ac.nz
OI Cai, Cheng-Hao/0000-0001-6815-9091
CR Abrial J.-R., 1996, B BOOK ASSIGNING PRO
   Aguirre A.F., 2017, DESIGN USER EXPERIEN
   Alrajeh D, 2015, COMMUN ACM, V58, P65, DOI 10.1145/2658986
   [Anonymous], 2012, 14143 ISO IEC
   [Anonymous], 2011, ISO/IEC 25010:2011
   [Anonymous], 2015, 16350 ISO IEC
   [Anonymous], 2006, 14764 ISO IEC
   [Anonymous], 2017, 19770 ISO IEC
   [Anonymous], 2015, 23026 ISO IEC IEEE
   [Anonymous], 2021, ISOIEC 5055
   [Anonymous], 2019, 16326 ISO IEC IEEE
   [Anonymous], 2021, 16085 ISO IEC IEEE
   [Anonymous], 2013, Information Security, Cybersecurity and Privacy Protection
   [Anonymous], 2020, P24641 IEEE ISO IEC
   [Anonymous], 2019, 15026 ISO IEC IEEE
   [Anonymous], 2001, MODEL CHECKING
   Areias C, 2014, 2014 IEEE INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING WORKSHOPS (ISSREW), P491, DOI 10.1109/ISSREW.2014.54
   Attasena V, 2017, VLDB J, V26, P657, DOI 10.1007/s00778-017-0470-9
   Aydan U, 2017, COMPUT STAND INTER, V54, P129, DOI 10.1016/j.csi.2016.11.014
   BURCH JR, 1992, INFORM COMPUT, V98, P142, DOI 10.1016/0890-5401(92)90017-A
   Cai CH, 2020, 2020 INTERNATIONAL SYMPOSIUM ON THEORETICAL ASPECTS OF SOFTWARE ENGINEERING (TASE 2020), P169, DOI 10.1109/TASE49443.2020.00031
   Cai CH, 2019, ASIA PAC SOFWR ENG, P260, DOI 10.1109/APSEC48747.2019.00043
   Cai CH, 2019, AUTOMAT SOFTW ENG, V26, P653, DOI 10.1007/s10515-019-00264-4
   Candea George, 2010, P 1 ACM S CLOUD COMP, P155, DOI DOI 10.1145/1807128.1807153
   Chatzieleftheriou George, 2012, NASA Formal Methods. Proceedings of the 4th International Symposium, NFM 2012, P341, DOI 10.1007/978-3-642-28891-3_32
   Cire AA, 2013, OPER RES, V61, P1411, DOI 10.1287/opre.2013.1221
   Clarke. E. M., 1982, LOGICS OF PROGRAMS, P52, DOI [10 . 1007 / BFb0025774, DOI 10.1007/BFB0025774]
   COALLIER F, 1994, IEEE SOFTWARE, V11, P98, DOI 10.1109/52.251221
   COLEMAN D, 1994, COMPUTER, V27, P44, DOI 10.1109/2.303623
   Cotroneo D, 2013, IEEE SECUR PRIV, V11, P38, DOI 10.1109/MSP.2013.54
   Denney E, 2013, 2013 IEEE INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING WORKSHOPS (ISSREW), P375, DOI 10.1109/ISSREW.2013.6688924
   Dias Neto A. C., 2007, P ACM INT WORKSH EMP, P31
   Dugalic B., 2012, BCI LOCAL
   El Emam K, 2000, IEEE T SOFTWARE ENG, V26, P541, DOI 10.1109/32.852742
   Flener P, 2008, ARTIF INTELL REV, V29, P45, DOI 10.1007/s10462-009-9108-7
   Friginal J, 2011, 2011 IEEE 17TH PACIFIC RIM INTERNATIONAL SYMPOSIUM ON DEPENDABLE COMPUTING (PRDC), P28, DOI 10.1109/PRDC.2011.13
   Gazzola L, 2019, IEEE T SOFTWARE ENG, V45, P34, DOI 10.1109/TSE.2017.2755013
   Guerra PT, 2010, LECT NOTES ARTIF INT, V6433, P153
   Harel D, 2014, LECT NOTES COMPUT SC, V8780, P1, DOI 10.1007/978-3-662-44871-7_1
   Huth Michael, 2004, Logic in Computer Science: Modelling and reasoning about systems
   Idri A, 2013, ASIA PAC SOFWR ENG, P1, DOI 10.1109/APSEC.2013.12
   Jeron T., 1999, COMPUTER AIDED VERIF
   Kitzelmann E, 2010, LECT NOTES COMPUT SC, V5812, P50
   Le Goues C, 2012, IEEE T SOFTWARE ENG, V38, P54, DOI 10.1109/TSE.2011.104
   Leuschel Michael, 2008, International Journal on Software Tools for Technology Transfer, V10, P185, DOI 10.1007/s10009-007-0063-9
   MANNA Z, 1992, IEEE T SOFTWARE ENG, V18, P674, DOI 10.1109/32.153379
   Mayr A., 2012, Proceedings of the 2012 IEEE 23rd International Symposium on Software Reliability Engineering (ISSRE), P281, DOI 10.1109/ISSRE.2012.4
   Méry D, 2010, LECT NOTES COMPUT SC, V6416, P312, DOI 10.1007/978-3-642-16561-0_31
   Mesquida AL, 2015, COMPUT SECUR, V48, P19, DOI 10.1016/j.cose.2014.09.003
   Mohagheghi P, 2009, INFORM SOFTWARE TECH, V51, P1646, DOI 10.1016/j.infsof.2009.04.004
   Morris J, 2001, COMPUTER, V34, P30, DOI 10.1109/2.947086
   Nasrabadi N.M, 2007, Pattern recognition and machine learning, V16
   Nipkow T., ISABELLE HOL A PROOF
   O'Connor RV, 2012, COMM COM INF SC, V301, P330
   Pnueli A., 1977, 18th Annual Symposium on Foundations of Computer Science, P46, DOI 10.1109/SFCS.1977.32
   Ramos AL, 2012, IEEE T SYST MAN CY C, V42, P101, DOI 10.1109/TSMCC.2011.2106495
   Schmidt J, 2018, LECT NOTES COMPUT SC, V11023, P346, DOI 10.1007/978-3-319-98938-9_20
   Schmidt J, 2016, LECT NOTES COMPUT SC, V9675, P303, DOI 10.1007/978-3-319-33600-8_25
   Tin Kam Ho, 1995, Proceedings of the Third International Conference on Document Analysis and Recognition, P278, DOI 10.1109/ICDAR.1995.598994
   Zhang Y, 2008, J ARTIF INTELL RES, V31, P113, DOI 10.1613/jair.2420
NR 60
TC 0
Z9 0
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 1
PY 2022
VL 214
AR 102732
DI 10.1016/j.scico.2021.102732
EA OCT 2021
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA XA8ZO
UT WOS:000720929000002
DA 2024-07-18
ER

PT J
AU Busi, M
   Degano, P
   Galletta, L
AF Busi, Matteo
   Degano, Pierpaolo
   Galletta, Letterio
TI Mechanical incrementalization of typing algorithms
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Type systems; Incremental typing; Program analysis
AB The ever-growing size of programs and their continuous evolution require building fast and efficient analyzers. Here we focus on the static ones, in particular on type systems, for both checking and inference. Just as programs change by incrementally changing or inserting pieces of code, called diffs, also type systems should be incremental and re-type the diffs, only.
   An algorithmic schema is proposed that mechanically derives an incremental version of existing, standard typing algorithms. Ours is a grey-box approach: just the shape of the typing rules, that of the types and some domain-specific knowledge are needed to instantiate our schema. Here, we present the foundations of our approach and the conditions for its correctness. Our schema is applied to derive four incremental typing and inference algorithms for languages in different programming paradigms. We implemented an OCaml module that inputs a type system and outputs its incrementalized version. Experimental results show that our approach is effective, and prove its usage beneficial. (C) 2021 Elsevier B.V. All rights reserved.
C1 [Busi, Matteo; Degano, Pierpaolo] Univ Pisa, Dept Comp Sci, Pisa, Italy.
   [Degano, Pierpaolo; Galletta, Letterio] IMT Sch Adv Studies Lucca, Lucca, Italy.
C3 University of Pisa; IMT School for Advanced Studies Lucca
RP Busi, M; Degano, P (corresponding author), Univ Pisa, Dept Comp Sci, Pisa, Italy.; Degano, P; Galletta, L (corresponding author), IMT Sch Adv Studies Lucca, Lucca, Italy.
EM matteo.busi@di.unipi.it; pierpaolo.degano@unipi.it;
   letterio.galletta@imtlucca.it
RI Busi, Matteo/IAM-3336-2023
OI GALLETTA, LETTERIO/0000-0003-0351-9169; Busi, Matteo/0000-0002-5557-8139
FU Department of Computer Science of the University of Pisa; MIUR [PRIN
   2017FTXR7S]
FX Matteo Busi has been partially supported by the research grant on
   Incremental type systems for secure compilation from the Department of
   Computer Science of the University of Pisa. Pierpaolo Degano and
   Letterio Galletta have been partially supported by the MIUR project PRIN
   2017FTXR7S IT MATTERS (Methods and Tools for Trustworthy Smart Systems)
   .
CR Abadi M, 1999, INFORM COMPUT, V148, P1, DOI 10.1006/inco.1998.2740
   Abadi M, 1999, J ACM, V46, P749, DOI 10.1145/324133.324266
   ADITYA S, 1991, LECT NOTES COMPUT SC, V523, P379
   Arzt S, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P288, DOI 10.1145/2568225.2568243
   Busi M., 2019, FDN SECURITY PROTOCO, P54
   Busi M, 2019, LECT NOTES COMPUT SC, V11460, P106, DOI 10.1007/978-3-030-20652-9_7
   Calcagno C, 2015, LECT NOTES COMPUT SC, V9058, P3, DOI 10.1007/978-3-319-17524-9_1
   Ceri S., 1989, IEEE Transactions on Knowledge and Data Engineering, V1, P146, DOI 10.1109/69.43410
   Cimini M, 2016, ACM SIGPLAN NOTICES, V51, P443, DOI 10.1145/2914770.2837632
   Cooper K.D., 1983, THESIS RICE U HOUSTO
   Erdweg S, 2015, ACM SIGPLAN NOTICES, V50, P880, DOI [10.1145/2814270.2814277, 10.1145/2858965.2814277]
   Felleisen M., 2009, Semantics Engineering with PLT Redex
   FELTY A, 1988, LECT NOTES COMPUT SC, V310, P754, DOI 10.1007/BFb0012882
   Ghodssi V., 1983, THESIS
   Grewe S., 2015, 2015 ACM INT S NEW I, P137
   Harman M, 2018, IEEE INT WORK C SO, P1, DOI 10.1109/SCAM.2018.00009
   Johnson-acsadi G, 1986, Popul Bull UN, P44, DOI 10.1145/512644.512649
   KANELLAKIS PC, 1989, CONFERENCE RECORD OF THE SIXTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P105, DOI 10.1145/75277.75286
   Lambert G. L. T., 1983, C REC 10 ANN ACM S P, P265, DOI [10.1145/567067.567092, DOI 10.1145/567067.567092]
   Lauterburg S, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P291, DOI 10.1145/1368088.1368128
   Leino KRM, 2015, LECT NOTES COMPUT SC, V9206, P380, DOI 10.1007/978-3-319-21690-4_22
   Leroy X, 2000, ACM T PROGR LANG SYS, V22, P340, DOI 10.1145/349214.349230
   Löh A, 2010, FUND INFORM, V102, P177, DOI 10.3233/FI-2010-304
   Marino D., 2009, P 2009 ACM SIGPLAN I, P39, DOI DOI 10.1145/1481861.1481868
   Miao W., 2010, P INT C GEN PROGR CO, P167
   Mudduluru R, 2014, LECT NOTES COMPUT SC, V8411, P125
   Myers AC, 2006, J COMPUT SECUR, V14, P157, DOI 10.3233/JCS-2006-14203
   Nichols L, 2019, SOAP'19: PROCEEDINGS OF THE 8TH ACM SIGPLAN INTERNATIONAL WORKSHOP ON STATE OF THE ART IN PROGRAM ANALYSIS, P2, DOI 10.1145/3315568.3329964
   OHearn Peter, 2017, FINDING INTERPROCEDU
   Pacak A, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428195
   Pennino F., 2020, THESIS
   Pierce B., 2005, ADV TOPICS TYPES PRO
   Qiu R, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 1, P632, DOI 10.1109/ICSE.2015.79
   Ramanathan Murali Krishna, 2013, P 9 JOINT M EUR SOFT, DOI DOI 10.1145/2491411.2501854
   Rosu G, 2010, J LOGIC ALGEBR PROGR, V79, P397, DOI 10.1016/j.jlap.2010.03.012
   RYDER BG, 1988, ACM T PROGR LANG SYS, V10, P1, DOI 10.1145/42192.42193
   Seidl Helmut, 2020, From Lambda Calculus to Cybersecurity Through Program Analysis: Essays Dedicated to Chris Hankin on the Occasion of His Retirement. Lecture Notes in Computer Science (LNCS 12065), P132, DOI 10.1007/978-3-030-41103-9_5
   Sumii Eijiro, 2005, FDPE WORKSH FUNCT DE, P27, DOI [10.1145/1085114.1085122, DOI 10.1145/1085114.1085122]
   Szabó T, 2016, IEEE INT CONF AUTOM, P320, DOI 10.1145/2970276.2970298
   Wachsmuth GH, 2013, LECT NOTES COMPUT SC, V8225, P260, DOI 10.1007/978-3-319-02654-1_15
   Yang GW, 2014, ACM T SOFTW ENG METH, V24, DOI 10.1145/2629536
   Yang GW, 2009, PROC IEEE INT CONF S, P115, DOI 10.1109/ICSM.2009.5306334
   Yur J.-S., 1999, Proceedings of the 1999 International Conference on Software Engineering (IEEE Cat. No.99CB37002), P442, DOI 10.1109/ICSE.1999.841034
NR 43
TC 0
Z9 0
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD AUG 1
PY 2021
VL 208
AR 102657
DI 10.1016/j.scico.2021.102657
EA APR 2021
PG 40
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA SF6EZ
UT WOS:000652847700009
DA 2024-07-18
ER

PT J
AU Kammüller, F
   Kerber, M
AF Kammueller, Florian
   Kerber, Manfred
TI Applying the Isabelle Insider framework to airplane security
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Airplane safety and security; Insider threats; Interactive theorem
   proving; Security policies; Verification
AB Avionics is one of the fields in which verification methods have been pioneered and brought about a new level of reliability to systems used in safety-critical environments. Tragedies, like the 2015 insider attack on a German airplane, in which all 150 people on board died, show that safety and security crucially depend not only on the well-functioning of systems but also on the way humans interact with the systems. Policies are a way to describe how humans should behave in their interactions with technical systems. Formal reasoning about such policies requires integrating the human factor into the verification process. In this paper, we report on our work on using logical modelling and analysis of infrastructure models and policies with actors to scrutinize security policies in the presence of insiders. An insider is a user of a system who behaves like an attacker abusing privileges thereby bypassing security controls. We model insider attacks on airplanes in the Isabelle Insider framework. This application motivates the use of an extension of the framework with Kripke structures and the temporal logic CU to enable reasoning on dynamic system states. Furthermore, we illustrate that Isabelle modelling and invariant reasoning reveal subtle security assumptions. This results in a methodology for the development of policies that satisfy stated properties. To contrast our approach to model checking, we provide an additional comparative analysis. (C) 2021 Elsevier B.V. All rights reserved.
C1 [Kammueller, Florian] Middlesex Univ London, London, England.
   [Kammueller, Florian] Tech Univ Berlin, Berlin, Germany.
   [Kerber, Manfred] Univ Birmingham, Birmingham, W Midlands, England.
C3 Middlesex University; Technical University of Berlin; University of
   Birmingham
RP Kammüller, F (corresponding author), Middlesex Univ London, London, England.; Kammüller, F (corresponding author), Tech Univ Berlin, Berlin, Germany.
EM f.kammueller@mdx.ac.uk; M.Kerber@cs.bham.uk
CR [Anonymous], 2002, NTR
   [Anonymous], 2012, CERT GUIDE INSIDER T
   [Anonymous], 2018, The Star
   Axelrad ET, 2013, IEEE CS SECURITY AND PRIVACY WORKSHOPS (SPW 2013), P82, DOI 10.1109/SPW.2013.35
   Bishop M., 2014, P 3 IEEE WORKSH RES
   Bishop M, 2017, PROCEEDINGS OF THE 50TH ANNUAL HAWAII INTERNATIONAL CONFERENCE ON SYSTEM SCIENCES, P2637
   Carreno V, 2004, ISSTA 04
   CHIST-ERA, 2016, SUCC SEC ACC INT THI
   Clarke EM, 1999, MODEL CHECKING, P1
   DOLEV D, 1983, IEEE T INFORM THEORY, V29, P198, DOI 10.1109/TIT.1983.1056650
   Glasser J, 2013, IEEE CS SECURITY AND PRIVACY WORKSHOPS (SPW 2013), P98, DOI 10.1109/SPW.2013.37
   Gollmann D, 2008, COMPUTER SECURITY
   Greitzer F. L., 2014, P 3 IEEE WORKSH RES
   Kamali M, 2017, SCI COMPUT PROGRAM, V148, P88, DOI 10.1016/j.scico.2017.05.006
   Kammuller F., 2014, IEEE SEC PRIV WORKSH
   Kammuller F, 2015, LNSC
   Kammuller F., 1999, LNCS, V1690
   Kammuller F., 2013, IEEE SEC PRIV WORKSH
   Kammuller F., 2016, LECT NOTES COMPUTER
   Kammuller F, 2016, LNCS, V9963
   Kammuller F, 2000, LNAI, V1831
   Kammuller F., 2020, ISABELLEINSIDER INSI
   Kammuller F., 2017, PROC INT C APPL HUM, P106
   Kammuller F, 2020, ARXIV200108983
   Kammuller F., 2016, IEEE SEC PRIV WORKSH
   Kammüller F, 2017, IEEE SYST J, V11, P534, DOI 10.1109/JSYST.2015.2453215
   Kean T.H, 2004, COMPLETE 9 11 COMMIS
   Kerber M., 2020, NUSMV FORMALISATION
   Khan M.O., 2012, MODEL BASED VERIFICA
   Lüttgen G, 1999, LECT NOTES COMPUT SC, V1680, P120
   Moy Y, 2013, IEEE SOFTWARE, V30, P50, DOI 10.1109/MS.2013.43
   Munoz C., 2006, LNSC, V4157
   Nurse J.R.C., 2014, IEEE SEC PRIV WORKSH
   O'Halloran C, 2013, AUTOMAT SOFTW ENG, V20, P237, DOI 10.1007/s10515-012-0116-5
   Oheimb D. v., 2008, 26 C INT COUNC AER S, P1
   Paulson LC, 1997, P IEEE CSFW, P70, DOI 10.1109/CSFW.1997.596788
   Primiero G, 2014, STAST 14 IEEE 2014 C
   Sebastiani R., 2020, NUSMV NEW SYMBOLIC M
NR 38
TC 2
Z9 3
U1 1
U2 7
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 1
PY 2021
VL 206
AR 102623
DI 10.1016/j.scico.2021.102623
EA FEB 2021
PG 33
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA RI2XD
UT WOS:000636771400008
OA Green Accepted, Green Submitted
DA 2024-07-18
ER

PT J
AU Bodeveix, JP
   Dieumegard, A
   Filali, M
AF Bodeveix, Jean-Paul
   Dieumegard, Arnaud
   Filali, Mamoun
TI Event-B formalization of a variability-aware component model patterns
   framework
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 15th International Conference on Formal Aspects of Component Software
   (FACS)
CY OCT 10-12, 2018
CL Pohang, SOUTH KOREA
DE Design patterns; Formal refinement; Variability; System engineering;
   Critical systems
ID PROOF
AB In the domain of model-driven engineering, patterns have emerged as a ubiquitous structuring mechanism. Patterns are used for instance at the requirement analysis level, during system design, and during the deployment and code generation phases.
   We focus on formalizing the operational semantics of pattern application on component-based system designs. More precisely, our ultimate goal is to provide a semantic framework to support the use of patterns for the production of correct-by-construction architectures, i.e., the structural (static) correctness of the architectures obtained through the formal application of patterns. To that end, we propose an Event-B framework for patterns specification, instantiation and application. This model is built incrementally through horizontal refinements which introduce components, ports, and connectors. Patterns with variability are defined, instantiated and can be applied to user models. We show that these operations preserve the structural properties of hierarchical component models. (C) 2020 Elsevier B.V. All rights reserved.
C1 [Bodeveix, Jean-Paul] UPS, 118 Route Narbonne, F-31062 Toulouse, France.
   [Bodeveix, Jean-Paul; Filali, Mamoun] IRIT, 118 Route Narbonne, F-31062 Toulouse, France.
   [Dieumegard, Arnaud] Off Natl Etud & Rech Aerosp, 2 Ave Edouard Belin, F-31055 Toulouse, France.
   [Dieumegard, Arnaud] IRT St Exupery, 3 Rue Tarfaya, F-31400 Toulouse, France.
   [Filali, Mamoun] CNRS, 118 Route Narbonne, F-31062 Toulouse, France.
C3 Universite de Toulouse; Universite Toulouse III - Paul Sabatier;
   Universite de Toulouse; Universite Toulouse III - Paul Sabatier;
   National Office for Aerospace Studies & Research (ONERA); Centre
   National de la Recherche Scientifique (CNRS)
RP Bodeveix, JP (corresponding author), UPS, 118 Route Narbonne, F-31062 Toulouse, France.; Bodeveix, JP (corresponding author), IRIT, 118 Route Narbonne, F-31062 Toulouse, France.
EM jean-paul.bodeveix@irit.fr; arnaud.dieumegard@enseeiht.fr;
   mamoun.filali@irit.fr
CR Abdulla PA, 2006, LECT NOTES COMPUT SC, V4313, P115, DOI 10.1007/11925040_8
   Abrial Jean-Raymond, 2010, International Journal on Software Tools for Technology Transfer, V12, P447, DOI 10.1007/s10009-010-0145-y
   Abrial J.-R., 1996, B BOOK ASSIGNING PRO
   Abrial J R, 2010, Modeling in Event-B: system and softeng
   Alencar P. S. C., 1996, FME '96: Industrial Benefit and Advances in Formal Methods. Third International Symposium of Formal Methods Europe. Proceedings, P576
   Arbab F, 2004, MATH STRUCT COMP SCI, V14, P329, DOI 10.1017/S0960129504004153
   Armoush Ashraf, 2010, THESIS
   Bart Antoine Requet, 2008, STAT MACH B Z 1 INT, P345
   Basu A, 2011, IEEE SOFTWARE, V28, P41, DOI 10.1109/MS.2011.27
   Blazy S, 2009, J AUTOM REASONING, V43, P263, DOI 10.1007/s10817-009-9148-3
   Bodeveix Jean-Paul, 2018, LECT NOTES COMPUTER, V11222, P54
   Bodeveix Jean-Paul, 2018, 9 EUR C EMB REAL SOF
   Carson R.S., 2015, INCOSE INT S, V25, P54
   Coplien J., 1996, SIGS Management Briefings Series
   Czarnecki K., 2005, INT WORKSH SOFTW FAC, P16
   Damchoom K, 2008, LECT NOTES COMPUT SC, V5256, P25, DOI 10.1007/978-3-540-88194-0_5
   Degueule Thomas, 2015, TOOLING SUPPORT VARI, P361, DOI DOI 10.1145/2791060.2791097
   Denney E, 2017, 2017 ACM/IEEE 20TH INTERNATIONAL CONFERENCE ON MODEL DRIVEN ENGINEERING LANGUAGES AND SYSTEMS (MODELS 2017), P156, DOI 10.1109/MODELS.2017.27
   Denney Ewen W., 2015, ARCEDAATN21418 NASA
   Dong J, 2007, J SYST SOFTWARE, V80, P1755, DOI 10.1016/j.jss.2007.03.005
   Dwyer M. B., 1999, Proceedings of the 1999 International Conference on Software Engineering (IEEE Cat. No.99CB37002), P411, DOI 10.1109/ICSE.1999.841031
   Feiler Peter H., 2012, MODEL BASED ENG AADL
   Hallerstede S, 2008, LECT NOTES COMPUT SC, V5238, P125
   Heinkel Ulrich, 2000, VHDL REFERENCE PRACT
   Iliasov A, 2010, LECT NOTES COMPUT SC, V6286, P70
   Kang Kyo, 1990, CMUSEI90TR021 SOFTW
   Lamport L., 2002, SPECIFYING SYSTEMS T
   Le Noir Jerome, 2016, SOFTW PROD LIN C SPL
   Marmsoler D, 2017, ELECTRON P THEOR COM, P16, DOI 10.4204/EPTCS.245.2
   Marmsoler Diego, 2018, LECT NOTES COMPUTER, V11222, P279
   Mery D., 2011, P 2 S INF COMM TECHN, P179, DOI DOI 10.1145/2069216.2069252
   Milner R., 1989, Communication and concurrency
   Morin B, 2009, LECT NOTES COMPUT SC, V5795, P690, DOI 10.1007/978-3-642-04425-0_56
   OMG, 2012, TECHNICAL REPORT
   Pnueli A, 1998, LECT NOTES COMPUT SC, V1384, P151, DOI 10.1007/BFb0054170
   Preschern Christopher, 2015, P 18 EUR C PATT LANG
   Prudhomme Charles, 2017, 6241 TASCLS2N CNRS U
   Quinton Clement., 2013, P 17 INT SOFTWARE PR, P162
   Rumbaugh J., 2004, UNIFIED MODELING LAN, V2nd
   Sango Marc, 2016, COMPLEX SYSTEMS DESI, P239
   Siala B, 2017, EUROMICRO WORKSHOP P, P287, DOI 10.1109/PDP.2017.72
   Hoang TS, 2013, SOFTW SYST MODEL, V12, P229, DOI 10.1007/s10270-010-0183-7
   Voirin Jean-Luc, 2017, MODEL BASED SYSTEM A
   Vujovic V, 2014, IEEE INT CONF INTELL, P233, DOI 10.1109/INES.2014.6909375
   Wenzel M, 2008, LECT NOTES COMPUT SC, V5170, P33, DOI 10.1007/978-3-540-71067-7_7
NR 45
TC 2
Z9 2
U1 0
U2 4
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 1
PY 2020
VL 199
AR 102511
DI 10.1016/j.scico.2020.102511
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA NZ8IA
UT WOS:000577344100001
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Choi, K
   Cheney, J
   Fowler, S
   Lindley, S
AF Choi, Kwanghoon
   Cheney, James
   Fowler, Simon
   Lindley, Sam
TI A polymorphic RPC calculus
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 22nd Brazilian Symposium on Formal Methods (SBMF)
CY NOV 25-29, 2019
CL Sao Paulo, BRAZIL
SP Brazilian Comp Soc
DE Multi-tier programming; Location polymorphism; Remote procedure call;
   Client-server model
AB The RPC calculus is a simple semantic foundation for multi-tier programming languages such as Links in which located functions can be written for the client-server model. Subsequently, the typed RPC calculus is designed to capture the location information of functions by types and to drive location type-directed slicing compilations. However, the use of locations is currently limited to monomorphic ones, which is one of the gaps to overcome to put into practice the theory of RPC calculi for client-server model.
   This paper proposes a polymorphic RPC calculus to allow programmers to write succinct multi-tier programs using polymorphic location constructs. Then the polymorphic multitier programs can be automatically translated into programs only containing location constants amenable to the existing slicing compilation methods. We formulate a type system for the polymorphic RPC calculus, and prove its type soundness. Also, we design a monomorphization translation together with proofs on its type and semantic correctness for the translation. (C) 2020 Elsevier B.V. All rights reserved.
C1 [Choi, Kwanghoon] Chonnam Natl Univ, Gwangju, South Korea.
   [Cheney, James; Fowler, Simon; Lindley, Sam] Univ Edinburgh, Edinburgh, Midlothian, Scotland.
   [Cheney, James] Alan Turing Inst, London, England.
   [Lindley, Sam] Imperial Coll, London, England.
C3 Chonnam National University; University of Edinburgh; Imperial College
   London
RP Choi, K (corresponding author), Chonnam Natl Univ, Gwangju, South Korea.
EM kwanghoon.choi@jnu.ac.kr
RI 최, 광훈/JQW-9376-2023
OI Lindley, Sam/0000-0002-1360-4714
FU National Research Foundation of Korea grant from MSIP
   [2017R1A2B4005138]; National Research Foundation of Korea grant from MOE
   [2019R1I1A3A01058608]; ERC Consolidator Grant Skye [682315]; ISCF
   Metrology Fellowship - UK government's Department for Business, Energy
   and Industrial Strategy (BEIS); EPSRC [EP/K034413/1]; EPSRC
   [EP/K034413/1] Funding Source: UKRI
FX This research was supported by the National Research Foundation of Korea
   grants from MSIP (No. 2017R1A2B4005138) and MOE(No.
   2019R1I1A3A01058608).r This work was supported by ERC Consolidator Grant
   Skye (grant number 682315) and by an ISCF Metrology Fellowship grant
   provided by the UK government's Department for Business, Energy and
   Industrial Strategy (BEIS).r This work was supported by EPSRC Programme
   Grant "From Data Types to Session Types-A Basis for Concurrency and
   Distribution" (EP/K034413/1).
CR Balat V., 2006, P 2006 WORKSHOP ML M, P84, DOI [10.1145/1159876.1159889, DOI 10.1145/1159876.1159889]
   Cheney J., 2003, Technical Report
   Chlipala A, 2015, ACM SIGPLAN NOTICES, V50, P153, DOI [10.1145/2775051.2677004, 10.1145/2676726.2677004]
   Choi K, 2019, J FUNCT PROGRAM, V29, DOI 10.1017/S0956796819000029
   Cooper E, 2007, LECT NOTES COMPUT SC, V4709, P266
   Cooper EEK, 2009, PPDP'09: PROCEEDINGS OF THE 11TH INTERNATIONAL ACM SIGPLAN SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING, P231, DOI 10.1145/1599410.1599439
   Dunfield J, 2013, ACM SIGPLAN NOTICES, V48, P429, DOI 10.1145/2544174.2500582
   Fowler S, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290341
   Gay S, 1999, LECT NOTES COMPUT SC, V1576, P74
   Harper R., 1995, Conference Record of POPL'95: 22nd ACM SIGPLAN-SIGACT Symposium Principles of Programming Languages, P130, DOI 10.1145/199448.199475
   Hillerstrom D., 2017, 2 INT C FORMAL STRUC, p18:1
   Lindley Sam, 2012, TLDI, P91, DOI DOI 10.1145/2103786.2103798
   MILNER R, 1978, J COMPUT SYST SCI, V17, P348, DOI 10.1016/0022-0000(78)90014-4
   Murphy T, 2004, IEEE S LOG, P286, DOI 10.1109/LICS.2004.1319623
   Murphy T, 2008, LECT NOTES COMPUT SC, V4912, P108
   Murphy VII T., 2008, THESIS
   Neubauer M, 2005, ACM SIGPLAN NOTICES, V40, P221, DOI 10.1145/1047659.1040324
   Neubauer M., 2007, THESIS
   Radanne G., 2017, THESIS
   Radanne G, 2018, COMPANION PROCEEDINGS OF THE WORLD WIDE WEB CONFERENCE 2018 (WWW 2018), P681, DOI 10.1145/3184558.3185953
   Reynders Bob, 2014, ONWARD, V2014, P55
   Serrano A, 2018, ACM SIGPLAN NOTICES, V53, P783, DOI [10.1145/3192366.3192389, 10.1145/3296979.3192389]
   Serrano M, 2016, ACM SIGPLAN NOTICES, V51, P180, DOI 10.1145/3022670.2951916
   Serrano M, 2012, COMMUN ACM, V55, P53, DOI 10.1145/2240236.2240253
   Serrano Manuel, 2006, PROCEEEDINGS 21 ANN, P975, DOI [10.1145/1176617.1176756, DOI 10.1145/1176617.1176756]
   Weisenburger P, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276499
   Wells J.B., 1993, TYPABILITY TYPE CHEC
   Xi HW, 2003, ACM SIGPLAN NOTICES, V38, P224, DOI 10.1145/640128.604150
NR 28
TC 4
Z9 4
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 1
PY 2020
VL 197
AR 102499
DI 10.1016/j.scico.2020.102499
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA NS6CO
UT WOS:000572347300008
OA Green Submitted, Green Accepted
DA 2024-07-18
ER

PT J
AU Toro, M
   Tanter, É
AF Toro, Matias
   Tanter, Eric
TI Abstracting gradual references
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT European Conference on Object-Oriented Programming (ECOOP)
CY NOV 15-17, 2020
CL ELECTR NETWORK
DE Gradual typing; Mutable references; Abstract interpretation
AB Gradual typing is an effective approach to integrate static and dynamic typing, which supports the smooth transition between both extremes via the imprecision of type annotations. Gradual typing has been applied in many scenarios such as objects, subtyping, effects, ownership, typestates, information-flow typing, parametric polymorphism, etc. In particular, the combination of gradual typing and mutable references has been explored by different authors, giving rise to four different semantics-invariant, guarded, monotonic and permissive references. These semantics were specially crafted to reflect different design decisions with respect to precision and efficiency tradeoffs. Since then, progress has been made in the formulation of methodologies to systematically derive gradual counterparts of statically-typed languages, but these have not been applied to study mutable references.
   In this article, we explore how the Abstracting Gradual Typing (AGT) methodology, which has been shown to be effective in a variety of settings, applies to mutable references. Starting from a standard statically-typed language with references, we systematically derive with AGT a novel gradual language, called lambda((REF) over tilde). We establish the properties of lambda((REF) over tilde); in particular, it is the first gradual language with mutable references that is proven to satisfy the gradual guarantee. We then compare lambda((REF) over tilde) with the main four existing approaches to gradual references, and show that the application of AGT does justify one of the proposed semantics: we formally prove that the treatment of references in lambda((REF) over tilde) corresponds to the guarded semantics, by presenting a bisimilation with the coercion semantics of Herman et al. In the process, we uncover that any direct application of AGT yields a gradual language that is not space-efficient. We consequently adjust the dynamic semantics of lambda((REF) over tilde) to recover space efficiency. We then show how to extend lambda((REF) over tilde) to support both monotonic and permissive references as well. Finally, we provide the first proof of the dynamic gradual guarantee for monotonic references. As a result, this paper sheds further light on the design space of gradual languages with mutable references and contributes to deepening the understanding of the AGT methodology. (C) 2020 Elsevier B.V. All rights reserved.
C1 [Toro, Matias; Tanter, Eric] Univ Chile, Comp Sci Dept DCC, PLEIAD Lab, Santiago, Chile.
C3 Universidad de Chile
RP Toro, M; Tanter, É (corresponding author), Univ Chile, Comp Sci Dept DCC, PLEIAD Lab, Santiago, Chile.
EM mtoro@dcc.uchile.cl; etanter@dcc.uchile.cl
RI Tanter, Eric/A-7955-2008
OI Tanter, Eric/0000-0002-7359-890X; Toro, Matias/0000-0002-5315-0198
FU FONDECYT Projects [1190058, 3200583]
FX This work is partially funded by FONDECYT Projects 1190058 and 3200583.
CR Ahmed A, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110283
   Ahmed A, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P201, DOI 10.1145/1926385.1926409
   [Anonymous], 1980, To H. B. Curry: Essays on Combinatory Logic, -calculus and Formalism
   [Anonymous], 2019, J IMMUNOTHER CANC S1
   [Anonymous], 2015, ACM SIGPLAN NOTICES, DOI DOI 10.1145/2814270.2814315
   [Anonymous], 2015, LEIBNIZ INT P INFORM, DOI DOI 10.4230/LIPICS.SNAPL.2015.274
   Bader J, 2018, LECT NOTES COMPUT SC, V10747, P25, DOI 10.1007/978-3-319-73721-8_2
   Schwerter FB, 2014, ICFP'14: PROCEEDINGS OF THE 2014 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P283, DOI 10.1145/2628136.2628149
   Bonnaire-Sergeant Ambrose, TYPED CLOJURE OPTION
   Bracha G., 2004, WORKSH REV DYN LANG
   Castagna Giuseppe, 2017, ICFP
   Church A., 1940, J. Symbolic Logic, V5, P56, DOI [10.2307/2266170, DOI 10.2307/2266170]
   Cimini M, 2017, ACM SIGPLAN NOTICES, V52, P789, DOI 10.1145/3093333.3009863
   Cimini M, 2016, ACM SIGPLAN NOTICES, V51, P443, DOI 10.1145/2914770.2837632
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Dart Team, 2013, DART PROGR LANG SPEC
   Disney T., 2011, THE STOP
   Felleisen M., 2009, Semantics Engineering with PLT Redex
   Fennell L, 2013, P IEEE CSFW, P224, DOI 10.1109/CSF.2013.22
   Fennell Luminous, 2016, P 30 EUR C OBJ OR PR, V56, p9:1
   Garcia R, 2016, ACM SIGPLAN NOTICES, V51, P429, DOI 10.1145/2914770.2837670
   Garcia R, 2014, ACM T PROGR LANG SYS, V36, DOI 10.1145/2629609
   Greenman Ben, 2018, P ACM PROGR LANG, V2, DOI DOI 10.1145/3236766
   HENGLEIN F, 1994, SCI COMPUT PROGRAM, V22, P197, DOI 10.1016/0167-6423(94)00004-2
   Herman David, 2010, Higher-Order and Symbolic Computation, V23, P59, DOI 10.1007/s10990-011-9066-z
   Igarashi Atsushi, 2017, ICFP
   Igarashi Yuu, 2017, ICFP 2017
   Ina L, 2011, OOPSLA 11: PROCEEDINGS OF THE 2011 ACM INTERNATIONAL CONFERENCE ON OBJECT ORIENTED PROGRAMMING SYSTEMS LANGUAGES AND APPLICATIONS, P609
   Jafery KA, 2017, ACM SIGPLAN NOTICES, V52, P804, DOI 10.1145/3093333.3009865
   Lehmann N, 2017, ACM SIGPLAN NOTICES, V52, P775, DOI 10.1145/3093333.3009856
   New MS, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371114
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA
   Schwerter FB, 2016, J FUNCT PROGRAM, V26, P1, DOI 10.1017/S0956796816000162
   Sergey I, 2012, LECT NOTES COMPUT SC, V7211, P579, DOI 10.1007/978-3-642-28869-2_29
   Siek J, 2007, LECT NOTES COMPUT SC, V4609, P2
   Siek Jeremy, 2006, WORKSHOP SCHEME FUNC, P81
   Siek JG, 2015, LECT NOTES COMPUT SC, V9032, P432, DOI 10.1007/978-3-662-46669-8_18
   Siek JG, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P365, DOI 10.1145/1706299.1706342
   Thiemann P, 2014, LECT NOTES COMPUT SC, V8410, P47
   Toro M, 2018, ACM T PROGR LANG SYS, V40, DOI 10.1145/3229061
   Toro M, 2017, LECT NOTES COMPUT SC, V10422, P382, DOI 10.1007/978-3-319-66706-5_19
   Vazou Niki, 2018, P ACM PROGR LANG OOP, V2
   Vitousek MM, 2015, ACM SIGPLAN NOTICES, V50, P45, DOI 10.1145/2661088.2661101
   Wolff R, 2011, LECT NOTES COMPUT SC, V6813, P459, DOI 10.1007/978-3-642-22655-7_22
   Xie Ningning, 2018, LECT NOTES COMPUTER, V10801, P3
NR 45
TC 10
Z9 10
U1 0
U2 4
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 1
PY 2020
VL 197
AR 102496
DI 10.1016/j.scico.2020.102496
PG 65
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA NS6CO
UT WOS:000572347300010
DA 2024-07-18
ER

PT J
AU Tran, HV
   Hung, PN
   Nguyen, VH
   Aoki, T
AF Hoang-Viet Tran
   Pham Ngoc Hung
   Viet-Ha Nguyen
   Aoki, Toshiaki
TI A framework for assume-guarantee regression verification of evolving
   software
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Assume-guarantee reasoning; Model checking; Implicit learning;
   Component-based software evolution; Local weakest assumption
ID COMPOSITIONAL VERIFICATION; ASSUMPTION GENERATION
AB This paper presents a framework for verifying evolving component-based software using assume-guarantee logic. The goal is to improve CDNF-based assumption generation method by having local weakest assumptions that can be used more effectively when verifying component-based software in the context of software evolution. For this purpose, we improve the technique for responding to membership queries when generating candidate assumptions. This technique is then integrated into a proposed backtracking algorithm to generate local weakest assumptions. These assumptions are effectively used in rechecking the evolving software by reducing time required for assumption regeneration within the proposed framework. The proposed framework can be applied to verify software that is continually evolving. An implemented tool and experimental results are presented to demonstrate the effectiveness and usefulness of the framework. (C) 2020 Elsevier B.V. All rights reserved.
C1 [Hoang-Viet Tran; Pham Ngoc Hung; Viet-Ha Nguyen] Vietnam Natl Univ, Univ Engn & Technol, E3 Bldg,144 Xuan Thuy St, Hanoi, Vietnam.
   [Aoki, Toshiaki] Japan Adv Inst Sci & Technol, Nomi 9231292, Japan.
C3 Vietnam National University Hanoi; Japan Advanced Institute of Science &
   Technology (JAIST)
RP Hung, PN (corresponding author), Vietnam Natl Univ, Univ Engn & Technol, E3 Bldg,144 Xuan Thuy St, Hanoi, Vietnam.
EM 15028003@vnu.edu.vn; hungpn@vnu.edu.vn; hanv@vnu.edu.vn;
   toshiaki@jaist.ac.jp
RI ; Tran, Hoang-Viet/E-7315-2019
OI Aoki, Toshiaki/0000-0002-1209-6375; Tran, Hoang-Viet/0000-0002-9314-0947
FU Vietnam's National Foundation for Science and Technology
   Development(NAFOSTED) [102.03-2015.25]
FX This work is supported by the Vietnam's National Foundation for Science
   and Technology Development(NAFOSTED) under grant number 102.03-2015.25.
CR Abd Elkader K, 2018, FORM ASP COMPUT, V30, P571, DOI 10.1007/s00165-017-0436-0
   Abd Elkader K, 2016, LECT NOTES COMPUT SC, V9779, P329, DOI 10.1007/978-3-319-41528-4_18
   Alur R, 1999, THEOR COMPUT SCI, V211, P253, DOI 10.1016/S0304-3975(97)00173-4
   ANGLUIN D, 1987, INFORM COMPUT, V75, P87, DOI 10.1016/0890-5401(87)90052-6
   [Anonymous], 1984, Logics and Models of Concurrent Systems (NATO ASI Series, DOI [DOI 10.1007/978-3-642-82453-1_5, 10.1007/978-3-642-82453-1\5]
   [Anonymous], P 1 INT WORKSH DES A
   [Anonymous], 2012, LNCS, DOI DOI 10.1007/978-3-642-35746-6_1
   [Anonymous], IEICE T
   [Anonymous], 1999, Concurrency-state models and Java programs
   Barringer H., 2003, P 2 WORKSHOP SPECIFI, P14
   BERARD B., 2010, SYSTEMS SOFTWARE VER
   Bouchekir R, 2018, LECT NOTES COMPUT SC, V11181, P200, DOI 10.1007/978-3-030-00359-3_13
   Bouchekir R, 2018, INNOV SYST SOFTW ENG, V14, P229, DOI 10.1007/s11334-018-0316-7
   BSHOUTY NH, 1995, INFORM COMPUT, V123, P146, DOI 10.1006/inco.1995.1164
   Chaki S, 2008, FORM METHOD SYST DES, V32, P235, DOI 10.1007/s10703-008-0053-x
   Chaki S, 2007, LECT NOTES COMPUT SC, V4424, P276
   Chen Ying-Chun, 2009, Bulletin of Taichung District Agricultural Improvement Station, P31
   Chen YF, 2010, LECT NOTES COMPUT SC, V6174, P511, DOI 10.1007/978-3-642-14295-6_44
   Clarke. E. M., 1982, LOGICS OF PROGRAMS, P52, DOI [10 . 1007 / BFb0025774, DOI 10.1007/BFB0025774]
   CLARKE EM, 1989, FOURTH ANNUAL SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P353
   Clarke EM, 1999, MODEL CHECKING, P1
   Cobleigh JM, 2003, LECT NOTES COMPUT SC, V2619, P331
   DIJKSTRA EW, 1975, COMMUN ACM, V18, P453, DOI [10.1145/360933.360975, 10.1145/390016.808417]
   Duffy DavidA., 1991, PRINCIPLES AUTOMATED
   Farzan A, 2008, LECT NOTES COMPUT SC, V4963, P2, DOI 10.1007/978-3-540-78800-3_2
   Groce A, 2002, LECT NOTES COMPUT SC, V2280, P357
   GRUMBERG O, 1994, ACM T PROGR LANG SYS, V16, P843, DOI 10.1145/177492.177725
   Gupta A, 2008, FORM METHOD SYST DES, V32, P285, DOI 10.1007/s10703-008-0050-0
   He F, 2016, LECT NOTES COMPUT SC, V9779, P310, DOI 10.1007/978-3-319-41528-4_17
   He F, 2016, ACM T SOFTW ENG METH, V25, DOI 10.1145/2907943
   HENZINGER TA, 1994, INFORM COMPUT, V112, P273, DOI 10.1006/inco.1994.1060
   Henzinger TA, 1998, LECT NOTES COMPUT SC, V1427, P440, DOI 10.1007/BFb0028765
   HOARE CAR, 1969, COMMUN ACM, V12, P576, DOI 10.1145/363235.363259
   Hung PCK, 2012, WEB SERVICE COMPOSITION AND NEW FRAMEWORKS IN DESIGNING SEMANTICS: INNOVATIONS, P1, DOI 10.4018/978-1-4666-1942-5
   Hung PN, 2009, LECT NOTES COMPUT SC, V5684, P277, DOI 10.1007/978-3-642-03466-4_18
   Hung PN, 2008, ASIA PAC SOFWR ENG, P479, DOI 10.1109/APSEC.2008.51
   Kapur D., 1996, Automated Deduction - Cade-13. 13th International Conference on Automated Deduction. Proceedings, P538
   Kaufmann Matt., 2004, SPANISH ROYAL ACAD S, V98, P181
   Kun Ji, 2013, Automated Technology for Verification and Analysis. 11th International Symposium, ATVA 2013. Proceedings: LNCS 8172, P474, DOI 10.1007/978-3-319-02444-8_38
   Le C.-L., 2017, IMPLEMENTATION ASSUM, P549
   Lin SW, 2015, IEEE INT CONF AUTOM, P65, DOI 10.1109/ASE.2015.33
   Lin SW, 2014, IEEE T SOFTWARE ENG, V40, P137, DOI 10.1109/TSE.2013.57
   Lin SW, 2011, LECT NOTES COMPUT SC, V6996, P463, DOI 10.1007/978-3-642-24372-1_35
   Menghi C, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE COMPANION 2014), P670, DOI 10.1145/2591062.2591090
   Nam WH, 2008, FORM METHOD SYST DES, V32, P207, DOI 10.1007/s10703-008-0055-8
   Hung PN, 2009, IWPSE-EVOL 09: ERCIM WORKSHOP ON SOFTWARE EVOLUTION (EVOL) AND INTERNATIONAL WORKSHOP ON PRINCIPLES OF SOFTWARE EVOLUTION (IWPSE), P109
   Poizat P, 2006, J UNIVERS COMPUT SCI, V12, P1741
   Queille JP, 2008, LECT NOTES COMPUT SC, V5000, P216
   Rivest R. L., 1989, Proceedings of the Twenty First Annual ACM Symposium on Theory of Computing, P411, DOI 10.1145/73007.73047
   Sinha N, 2007, LECT NOTES COMPUT SC, V4590, P39
   Sipser M., 1996, Introduction to the Theory of Computation, V1
   Vale T, 2016, J SYST SOFTWARE, V111, P128, DOI 10.1016/j.jss.2015.09.019
   Wijs A, 2017, LECT NOTES COMPUT SC, V10426, P570, DOI 10.1007/978-3-319-63387-9_28
   Zhou M, 2013, COMPUT IND, V64, P1022, DOI 10.1016/j.compind.2013.07.003
NR 54
TC 0
Z9 0
U1 0
U2 4
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUL 1
PY 2020
VL 193
AR 102439
DI 10.1016/j.scico.2020.102439
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA LG6EP
UT WOS:000528192000002
OA Bronze
DA 2024-07-18
ER

PT J
AU Castiglioni, V
   Chatzikokolakis, K
   Palamidessi, C
AF Castiglioni, Valentina
   Chatzikokolakis, Konstantinos
   Palamidessi, Catuscia
TI A logical characterization of differential privacy
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 15th International Conference on Formal Aspects of Component Software
   (FACS)
CY OCT 10-12, 2018
CL Pohang, SOUTH KOREA
DE Differential privacy; Metric semantics; Logical characterization;
   Nondeterministic probabilistic processes; Labeled Markov chains
ID FORMAL VERIFICATION; METRICS; BISIMULATION; SEMANTICS; SYSTEMS
AB Differential privacy is a formal definition of privacy ensuring that sensitive information relative to individuals cannot be inferred by querying a database. In this paper, we exploit a modeling of this framework via labeled Markov Chains (LMCs) to provide a logical characterization of differential privacy: we consider a probabilistic variant of the Hennessy-Milner logic and we define a syntactic distance on formulae in it measuring their syntactic disparities. Then, we define a trace distance on LMCs in terms of the syntactic distance between the sets of formulae satisfied by them. We prove that such distance corresponds to the level of privacy of the LMCs. Moreover, we use the distance on formulae to define a real-valued semantics for them, from which we obtain a logical characterization of weak anonymity: the level of anonymity is measured in terms of the formulae distinguishing the considered LMCs. Then, we focus on bisimulation semantics on nondeterministic probabilistic processes and we provide a logical characterization of generalized bisimulation metrics, namely those defined via the generalized Kantorovich lifting. Our characterization is based on the notion of mimicking formula of a process and the syntactic distance on formulae, where the former captures the observable behavior of the corresponding process and allows us to characterize bisimilarity. We show that the generalized bisimulation distance on processes is equal to the syntactic distance on their mimicking formulae. Moreover, we use the distance on mimicking formulae to obtain bounds on differential privacy. (C) 2020 Elsevier B.V. All rights reserved.
C1 [Castiglioni, Valentina; Palamidessi, Catuscia] INRIA Saclay, Ile De France, France.
   [Castiglioni, Valentina] Reykjavik Univ, Menntavegur 1, IS-101 Reykjavik, Iceland.
   [Chatzikokolakis, Konstantinos] CNRS, Paris, France.
   [Chatzikokolakis, Konstantinos; Palamidessi, Catuscia] LIX Ecole Polytech, Palaiseau, France.
C3 Reykjavik University; Centre National de la Recherche Scientifique
   (CNRS)
RP Castiglioni, V (corresponding author), Reykjavik Univ, Menntavegur 1, IS-101 Reykjavik, Iceland.
EM vale.castiglioni@gmail.com
RI Palamidessi, Catuscia/ABA-2935-2020; Castiglioni,
   Valentina/AAY-4582-2020
OI Palamidessi, Catuscia/0000-0003-4597-7002; Castiglioni,
   Valentina/0000-0002-8112-6523
FU ANR [16-CE25-0011 REPAS]; European Research Council (ERC) under the
   European Union's Horizon 2020 research and innovation programme
   [835294]; project 'Open Problems in the Equational Logic of Processes'
   (OPEL) of the Icelandic Research Fund [196050-051]; European Research
   Council (ERC) [835294] Funding Source: European Research Council (ERC)
FX This paper has been partially funded by the ANR project 16-CE25-0011
   REPAS, 'Reliable and Privacy-Aware Software Systems via Bisimulation
   Metrics' (2016). The work of Catuscia Palamidessi has been funded by the
   European Research Council (ERC) under the European Union's Horizon 2020
   research and innovation programme, Grant agreement nr. 835294.; The work
   of Valentina Castiglioni has been partially supported by the project
   'Open Problems in the Equational Logic of Processes' (OPEL) of the
   Icelandic Research Fund (grant nr. 196050-051).
CR Aceto L, 2012, MATH STRUCT COMP SCI, V22, P125, DOI 10.1017/S0960129511000375
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   Bacci G, 2015, LECT NOTES COMPUT SC, V9399, P349, DOI 10.1007/978-3-319-25150-9_21
   Baier Christel, 1998, THESIS
   Barthe G, 2016, PROCEEDINGS OF THE 31ST ANNUAL ACM-IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE (LICS 2016), P749, DOI 10.1145/2933575.2934554
   Barthe G, 2014, P IEEE CSFW, P411, DOI 10.1109/CSF.2014.36
   Bernardo M, 2014, LOG METH COMPUT SCI, V10, DOI 10.2168/LMCS-10(1:16)2014
   Bloom B., 2004, ACM Transactions on Computational Logic, V5, P26, DOI 10.1145/963927.963929
   Castiglioni Valentina, 2018, Formal Aspects of Component Software. 15th International Conference (FACS 2018). Proceedings: Lecture Notes in Computer Science (LNCS 11222), P75, DOI 10.1007/978-3-030-02146-7_4
   Castiglioni V, 2020, THEOR COMPUT SCI, V813, P20, DOI 10.1016/j.tcs.2019.09.019
   Castiglioni V, 2019, INFORM COMPUT, V268, DOI 10.1016/j.ic.2019.06.001
   Castiglioni V, 2018, ELECTRON P THEOR COM, P19, DOI 10.4204/EPTCS.276.4
   Castiglioni V, 2017, ELECTRON P THEOR COM, P39, DOI 10.4204/EPTCS.250.4
   Castiglioni V, 2016, ELECTRON P THEOR COM, P44, DOI 10.4204/EPTCS.227.4
   Chatzikokolakis Konstantinos, 2014, CONCUR 2014 - Concurrency Theory. 25th International Conference, CONCUR 2014. Proceedings: LNCS 8704, P32, DOI 10.1007/978-3-662-44584-6_4
   Chatzikokolakis Konstantinos, 2013, Privacy Enhancing Technologies.13th International Symposium, PETS 2013. Proceedings: LNCS 7981, P82, DOI 10.1007/978-3-642-39077-7_5
   Chaum D., 1988, Journal of Cryptology, V1, P65, DOI 10.1007/BF00206326
   Daca P., 2016, LEIBNIZ INT P INFORM, V59
   de Alfaro L, 2003, LECT NOTES COMPUT SC, V2719, P1022
   de Alfaro L, 2009, IEEE T SOFTWARE ENG, V35, P258, DOI 10.1109/TSE.2008.106
   De Alfaro L, 2008, LOG METH COMPUT SCI, V4, DOI 10.2168/LMCS-4(3:7)2008
   Deng YX, 2007, ELECTRON NOTES THEOR, V180, P55, DOI 10.1016/j.entcs.2005.05.047
   Deng YX, 2006, ELECTRON NOTES THEOR, V153, P79, DOI 10.1016/j.entcs.2005.10.033
   Deng YX, 2010, LECT NOTES COMPUT SC, V6397, P278, DOI 10.1007/978-3-642-16242-8_20
   Deng Yuxin, 2011, ABS11034577 CORR
   Desharnais J, 2004, THEOR COMPUT SCI, V318, P323, DOI 10.1016/j.tcs.2003.09.013
   Desharnais J, 2003, INFORM COMPUT, V184, P160, DOI 10.1016/S0890-5401(03)00051-8
   Desharnais J, 2002, IEEE S LOG, P413, DOI 10.1109/LICS.2002.1029849
   Dong J., 2019, ABS190502383 CORR
   Du WJ, 2016, LECT NOTES COMPUT SC, V9984, P67, DOI 10.1007/978-3-319-47677-3_5
   Duchi JC, 2013, ANN IEEE SYMP FOUND, P429, DOI 10.1109/FOCS.2013.53
   Dwork C, 2006, LECT NOTES COMPUT SC, V4052, P1
   Erlingsson U, 2014, CCS'14: PROCEEDINGS OF THE 21ST ACM CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P1054, DOI 10.1145/2660267.2660348
   Gaboardi M, 2013, ACM SIGPLAN NOTICES, V48, P357, DOI 10.1145/2480359.2429113
   Ghosh A, 2009, ACM S THEORY COMPUT, P351
   GIACALONE A, 1990, PROGRAMMING CONCEPTS AND METHODS, P443
   Goguen J. A., 1984, Proceedings of the 1984 Symposium on Security and Privacy, P75
   GRAF S, 1986, INFORM CONTROL, V68, P125, DOI 10.1016/S0019-9958(86)80031-6
   Hansson H., 1994, Formal Aspects of Computing, V6, P512, DOI 10.1007/BF01211866
   HENNESSY M, 1985, J ACM, V32, P137, DOI 10.1145/2455.2460
   Hermanns H, 2011, INFORM COMPUT, V209, P154, DOI 10.1016/j.ic.2010.11.024
   KELLER RM, 1976, COMMUN ACM, V19, P371, DOI 10.1145/360248.360251
   Kwiatkowska M, 1996, LECT NOTES COMPUT SC, V1113, P419
   LARSEN KG, 1990, THEOR COMPUT SCI, V72, P265, DOI 10.1016/0304-3975(90)90038-J
   LARSEN KG, 1991, INFORM COMPUT, V94, P1, DOI 10.1016/0890-5401(91)90030-6
   Machanavajjhala A, 2008, PROC INT CONF DATA, P277, DOI 10.1109/ICDE.2008.4497436
   Mironov I, 2017, P IEEE CSFW, P263, DOI 10.1109/CSF.2017.11
   Narayanan A, 2009, P IEEE S SECUR PRIV, P173, DOI 10.1109/SP.2009.22
   Reed J, 2010, ACM SIGPLAN NOTICES, V45, P157, DOI 10.1145/1932681.1863568
   Sack J, 2012, LECT NOTES COMPUT SC, V7148, P396, DOI 10.1007/978-3-642-27940-9_26
   Segala R., 1995, THESIS
   Song L, 2007, USIC 2007: PROCEEDINGS OF THE SEVENTH INTERNATIONAL CONFERENCE ON QUALITY SOFTWARE, P50
   Tschantz MC, 2011, ELECTRON NOTES THEOR, V276, P61, DOI 10.1016/j.entcs.2011.09.015
   van Breugel F, 2005, THEOR COMPUT SCI, V331, P115, DOI 10.1016/j.tcs.2004.09.035
   van Breugel F, 2012, INFORM PROCESS LETT, V112, P715, DOI 10.1016/j.ipl.2012.06.019
   Vaserstein L. N., 1969, PROBL PEREDACHI INF, V5, P64
   Xu LL, 2014, LECT NOTES COMPUT SC, V8461, P199, DOI 10.1007/978-3-662-43613-4_13
NR 59
TC 3
Z9 3
U1 0
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29a, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR 1
PY 2020
VL 188
AR 102388
DI 10.1016/j.scico.2019.102388
PG 29
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA KM3JO
UT WOS:000514017500002
OA Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Moser, G
   Schneckenreither, M
AF Moser, Georg
   Schneckenreither, Manuel
TI Automated amortised resource analysis for term rewrite systems
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Analysis of algorithms; Amortised complexity; Functional programming;
   Types; Automation
ID TERMINATION
AB In this paper we establish an automated amortised resource analysis for term rewrite systems. The method is presented in an inference system akin to a type-and-effect system and gives rise to polynomial bounds on the innermost runtime complexity of the analysed term rewrite system. Our analysis does not restrict the input rewrite system in any way so that rewrite systems may serve as abstractions of first-order, eagerly evaluated functional programs over user-defined inductive data-types. This facilitates integration in a general framework for resource analysis of programs. In particular, we have implemented the method and integrated it into our analysis tool TCT. Furthermore, we have coupled the established analysis with a complexity reflecting transformation from pure OCaml programs. This extends the provided analysis to a fully automated resource analysis of realistic functional programs. (C) 2019 Elsevier B.V. All rights reserved.
C1 [Moser, Georg] Univ Innsbruck, Dept Comp Sci, Innsbruck, Austria.
   [Schneckenreither, Manuel] Univ Innsbruck, Dept Informat Syst Prod & Logist Management, Innsbruck, Austria.
C3 University of Innsbruck; University of Innsbruck
RP Schneckenreither, M (corresponding author), Univ Innsbruck, Dept Informat Syst Prod & Logist Management, Innsbruck, Austria.
EM georg.moser@uibk.ac.at; manuel.schneckenreither@uibk.ac.at
RI Schneckenreither, Manuel THE DATA IS NOT CORRECT, RECENTLY UPDATED.
   PLEASE SEE GOOGLE SCHOLAR OR RESEARCH GATE./E-7676-2019; Moser,
   Georg/GSJ-3089-2022
OI Schneckenreither, Manuel THE DATA IS NOT CORRECT, RECENTLY UPDATED.
   PLEASE SEE GOOGLE SCHOLAR OR RESEARCH GATE./0000-0002-4812-4665; Moser,
   Georg/0000-0001-9240-6128
CR [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], 1999, PURELY FUNCTIONAL DA
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   Arts T, 2000, THEOR COMPUT SCI, V236, P133, DOI 10.1016/S0304-3975(99)00207-8
   Avanzini M, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110287
   Avanzini M, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P152, DOI 10.1145/2784731.2784753
   Avanzini M, 2016, LECT NOTES COMPUT SC, V9636, P407, DOI 10.1007/978-3-662-49674-9_24
   Baader Franz, 1998, TERM REWRITING ALL
   Barrett C., 2017, TECH REP
   Farkas J, 1902, J REINE ANGEW MATH, V124, P1
   Flores-Montoya A, 2016, LECT NOTES COMPUT SC, V9995, P254, DOI 10.1007/978-3-319-48989-6_16
   FREDERIKSEN CC, 2002, D470 DIKU
   Giesl J, 2017, J AUTOM REASONING, V58, P3, DOI 10.1007/s10817-016-9388-y
   Hirokawa N, 2008, LECT NOTES ARTIF INT, V5195, P364, DOI 10.1007/978-3-540-71070-7_32
   Hoffmann Jan, 2012, Computer Aided Verification. Proceedings 24th International Conference, CAV 2012, P781, DOI 10.1007/978-3-642-31424-7_64
   Hoffmann J, 2011, THESIS
   Hoffmann J, 2017, ACM SIGPLAN NOTICES, V52, P359, DOI 10.1145/3093333.3009842
   Hoffmann J, 2012, ACM T PROGR LANG SYS, V34, DOI 10.1145/2362389.2362393
   Hofmann Martin, 2014, Rewriting and Typed Lambda Calculi. Joint International Conference, RTA-TLCA 2014, Held as Part of the Vienna Summer of Logic, VSL 2014. Proceedings: LNCS 8560, P272, DOI 10.1007/978-3-319-08918-8_19
   Hofmann M., 2015, 13 INT C TYP LAMBD C, V38, P241
   Moser G., 2008, PROC IARCS, P304, DOI [10.4230/LIPIcs.FSTTCS.2008.1762, DOI 10.4230/LIPICS.FSTTCS.2008.1762]
   Moser G, 2018, LECT NOTES COMPUT SC, V10818, P214, DOI 10.1007/978-3-319-90686-7_14
   Naaf M, 2017, LECT NOTES ARTIF INT, V10483, P132, DOI 10.1007/978-3-319-66167-4_8
   Nipkow T, 2015, LECT NOTES COMPUT SC, V9236, P310, DOI 10.1007/978-3-319-22102-1_21
   Sinn M., 2016, LNI, V252, P101
   Sleator DanielDominic., 1983, P 15 ANN ACM S THEOR, P235, DOI DOI 10.1145/800061.808752
   TARJAN RE, 1985, SIAM J ALGEBRA DISCR, V6, P306, DOI 10.1137/0606031
   Thiemann R., 2007, THESIS
NR 33
TC 6
Z9 6
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29a, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 1
PY 2020
VL 185
AR 102306
DI 10.1016/j.scico.2019.102306
PG 18
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA JR6VU
UT WOS:000499761400003
OA Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Bijo, S
   Johnsen, EB
   Pun, KI
   Tarifa, SLT
AF Bijo, Shiji
   Johnsen, Einar Broch
   Pun, Ka, I
   Tarifa, S. Lizeth Tapia
TI A formal model of data access for multicore architectures with
   multilevel caches
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Data access; Cache memory; Multicore memory systems; Formal models;
   Operational semantics
ID VERIFICATION
AB The performance of software running on parallel or distributed architectures can be severely affected by the location of data. In shared memory multicore architectures, data movement between caches and main memory is driven by data accesses from tasks executing in parallel on different cores and by a protocol to ensure cache coherence. This paper integrates cache coherence in a formal model of data access, to capture such data movement from an application perspective. We develop an executable model which captures cache coherent data movement between different cache levels and main memory, for software described by task-level data access patterns. The proposed model is generic in the number of cache levels and cores, and abstracts from the concrete communication medium. We show that the model guarantees expected correctness properties for cache coherence, in particular data consistency. This paper further presents a proof-of-concept implementation of the proposed model in rewriting logic, which allows different choices for the underlying hardware architecture of dynamically created parallel data access patterns to be specified and compared at the modelling level. (C) 2019 Elsevier B.V. All rights reserved.
C1 [Bijo, Shiji; Johnsen, Einar Broch; Pun, Ka, I; Tarifa, S. Lizeth Tapia] Univ Oslo, Oslo, Norway.
   [Pun, Ka, I] Western Norway Univ Appl Sci, Haugesund, Norway.
C3 University of Oslo; Western Norway University of Applied Sciences
RP Pun, KI (corresponding author), Univ Oslo, Oslo, Norway.; Pun, KI (corresponding author), Western Norway Univ Appl Sci, Haugesund, Norway.
EM shijib@ifi.uio.no; einarj@ifi.uio.no; Violet.Ka.I.Pun@hvl.no;
   sltarifa@ifi.uio.no
OI Tapia Tarifa, Silvia Lizeth/0000-0001-9948-2748
FU EU [FP7-612985]; ADAPt: Exploiting Abstract Data-Access Patterns for
   Better Data Locality in Parallel Processing [FRINATEK-274515]
FX The EU project FP7-612985 UpScale: From Inherent Concurrency to Massive
   Parallelism through Type-based Optimizations (www.upscale-project.eu),
   the SIRIUS Centre for Scalable Data Access (www.sirius-labs.no) and the
   FRINATEK-274515 ADAPt: Exploiting Abstract Data-Access Patterns for
   Better Data Locality in Parallel Processing
   (https://www.mn.uio.no/ifi/english/research/projects/adapt/).
CR Adhianto L, 2010, CONCURR COMP-PRACT E, V22, P685, DOI 10.1002/cpe.1553
   Adve SV, 1996, COMPUTER, V29, P66, DOI 10.1109/2.546611
   [Anonymous], 2013, COMPUTER ORG DESIGN
   [Anonymous], 2011, A Primer on Memory Consistency and Cache Coherence, Morgan \\
   [Anonymous], 2007, LECT NOTES COMPUTER
   [Anonymous], LIPICS
   [Anonymous], P 8 WORKSH 6 WORKSH
   [Anonymous], UNDERGRADUATE TOPICS
   [Anonymous], P 17 INT WORKSH SOFT
   [Anonymous], LECT NOTES COMPUTER
   [Anonymous], P 31 ANN ACM S APPL
   [Anonymous], P INT WORKSH PERF AN
   Bezirgiannis N, 2019, LECT NOTES COMPUT SC, V11424, P332, DOI 10.1007/978-3-030-16722-6_20
   Bijo Shiji, 2018, Leveraging Applications of Formal Methods, Verification and Validation. Modeling. 8th International Symposium, ISoLA 2018. Proceedings: Lecture Notes in Computer Science (LNCS 11244), P448, DOI 10.1007/978-3-030-03418-4_26
   Bijo S, 2017, LECT NOTES COMPUT SC, V10487, P58, DOI 10.1007/978-3-319-68034-7_4
   Bijo S, 2016, LECT NOTES COMPUT SC, V9942, P47, DOI 10.1007/978-3-319-44802-2_3
   Binkert Nathan, 2011, Computer Architecture News, V39, P1, DOI 10.1145/2024716.2024718
   Burckhardt S, 2008, LECT NOTES COMPUT SC, V5123, P107
   Carlson M, 2011, HIST COMMUN, P52
   Crary K, 2015, ACM SIGPLAN NOTICES, V50, P623, DOI [10.1145/2775051.2676984, 10.1145/2676726.2676984]
   Culler D., 1997, PARALLEL COMPUTER AR
   Delzanno G, 2003, FORM METHOD SYST DES, V23, P257, DOI 10.1023/A:1026276129010
   DILL DL, 1992, 1992 IEEE INTERNATIONAL CONFERENCE ON COMPUTER DESIGN : VLSI IN COMPUTERS & PROCESSORS, P522, DOI 10.1109/ICCD.1992.276232
   DILL DL, 1993, RESEARCH ON INTEGRATED SYSTEMS, P38
   Dongol Brijesh, 2013, Theoretical Aspects of Computing - ICTAC 2013. 10th International Colloquium. Proceedings: LNCS 8049, P177, DOI 10.1007/978-3-642-39718-9_11
   Fang X., 2003, Proceedings of the 17th Annual International Conference on Supercomputing, ICS '03
   Hennessy John L, 2011, Computer Architecture: A Quantitative Approach
   Henrio L, 2018, PROCEEDINGS 2018 INTERNATIONAL CONFERENCE ON HIGH PERFORMANCE COMPUTING & SIMULATION (HPCS), P716, DOI 10.1109/HPCS.2018.00117
   Jagadeesan R, 2010, LECT NOTES COMPUT SC, V6012, P307, DOI 10.1007/978-3-642-11957-6_17
   Johnsen E.B., 2011, Lecture Notes in Computer Science, V6957, P142, DOI [10.1007/978- 3- 642-25271-6 8, DOI 10.1007/978-3-642-25271-6]
   LAMPORT L, 1979, IEEE T COMPUT, V28, P690, DOI 10.1109/TC.1979.1675439
   Li Y, 2009, REAL TIM SYST SYMP P, P57, DOI [10.1109/RTSS.2009.32, 10.1109/ICTM.2009.5412893]
   Mador-Haim Sela, 2012, Computer Aided Verification. Proceedings 24th International Conference, CAV 2012, P495, DOI 10.1007/978-3-642-31424-7_36
   Martin MM., 2005, SIGARCH COMPUT ARCHI, V33, P92, DOI [DOI 10.1145/1105734.1105747, 10.1145/1105734.1105747]
   Martin Oscar, 2014, Specification, Algebra, and Software. Essays Dedicated to Kokichi Futatsugi: LNCS 8373, P129, DOI 10.1007/978-3-642-54624-2_7
   MESEGUER J, 1992, THEOR COMPUT SCI, V96, P73, DOI 10.1016/0304-3975(92)90182-F
   Miller JM, 2009, IEEE VEHICLE POWER, P4, DOI 10.1109/VPPC.2009.5289879
   Pang J, 2007, J LOGIC ALGEBR PROGR, V71, P1, DOI 10.1016/j.jlap.2006.08.007
   Plotkin GD, 2004, J LOGIC ALGEBR PROGR, V60-1, P17, DOI 10.1016/j.jlap.2004.03.002
   Pong F, 1997, ACM COMPUT SURV, V29, P82, DOI 10.1145/248621.248624
   Ramírez S, 2015, COMPUT COLOMB CONF, P9, DOI 10.1109/ColumbianCC.2015.7333399
   Sarkar S, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P175
   Sewell P, 2010, COMMUN ACM, V53, P89, DOI 10.1145/1785414.1785443
   Solihin Y., 2015, Fundamentals of parallel multicore architecture, V1st
NR 44
TC 3
Z9 3
U1 0
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 15
PY 2019
VL 179
BP 24
EP 53
DI 10.1016/j.scico.2019.04.003
PG 30
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA IE2WW
UT WOS:000472246400002
OA Bronze
DA 2024-07-18
ER

PT J
AU Silva, JD
   Dantas, ABD
   de Carvalho, FH
AF Silva, Jefferson de Carvalho
   de Oliveira Dantas, Allberson Bruno
   de Carvalho Junior, Francisco Heron
TI A Scientific Workflow Management System for orchestration of parallel
   components in a cloud of large-scale parallel processing services
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 20th Brazilian Symposium on Programing Languages (SBLP)
CY SEP 22-23, 2016
CL Maringa, BRAZIL
DE Scientific workflows; Software components; High performance computing;
   Cloud computing; Parallel computing
ID PERFORMANCE; MODEL; ARCHITECTURE; MAPREDUCE
AB HPC Shelf is a proposal of a cloud computing platform for development, deployment and execution of component-based HPC applications with large-scale parallel processing requirements. Through components, it addresses the challenge of dealing with heterogeneous software and hardware resources in a large-scale HPC infrastructure comprising multiple parallel computing platforms. This paper introduces SAFe, a framework for deriving applications in HPC Shelf. It makes the role of a Scientific Workflow Management System (SWfMS) through which applications may deploy and monitor the execution of large-scale parallel computing systems built of components. (C) 2018 Elsevier B.V. All rights reserved.
C1 [Silva, Jefferson de Carvalho; de Oliveira Dantas, Allberson Bruno; de Carvalho Junior, Francisco Heron] Univ Fed Ceara, Ciencia Comp, Fortaleza, Ceara, Brazil.
C3 Universidade Federal do Ceara
RP de Carvalho, FH (corresponding author), Univ Fed Ceara, Ciencia Comp, Fortaleza, Ceara, Brazil.
EM jeffersonc@lia.ufc.br; allberson@lia.ufc.br; heron@lia.ufc.br
RI Carvalho, Francisco/AAR-9865-2021
OI Carvalho, Francisco/0000-0003-2286-2376; de Carvalho Silva,
   Jefferson/0000-0002-0066-7951
FU National Science Foundation [ACI-1440620]; National Aeronautics and
   Space Administration's Earth Science Technology Office [NCC5-626]; CNPq
   [486021/2011-4]
FX This research made use of Montage. It is funded by the National Science
   Foundation under Grant Number ACI-1440620, and was previously funded by
   the National Aeronautics and Space Administration's Earth Science
   Technology Office, Computation Technologies Project, under Cooperative
   Agreement Number NCC5-626 between NASA and the California Institute of
   Technology. We also want to thank CNPq 486021/2011-4 (Apoio a Projetos
   de Pesquisa / Universal 14/2011).
CR Allan BA, 2002, CONCURR COMP-PRACT E, V14, P323, DOI 10.1002/cpe.651
   Amedro B, 2010, COMPUT COMMUN NETW S, P163, DOI 10.1007/978-1-84996-241-4_10
   [Anonymous], 1994, International Journal of Supercomputer Applications and High Performance Computing, V8, P169
   [Anonymous], 2007, Workflows for E-Science: Scientific Workflows for Grids
   [Anonymous], 2008, The political economy of land tenure in Ethiopia, School of International Relations
   Antonopoulos N., 2011, COMPUTER COMMUNICATI
   Armstrong R, 2006, CONCURR COMP-PRACT E, V18, P215, DOI 10.1002/cpe.911
   Armstrong R., 1999, 8 IEEE INT S HIGH PE
   Baude F, 2009, ANN TELECOMMUN, V64, P5, DOI 10.1007/s12243-008-0068-8
   Bell G, 2006, COMPUTER, V39, P110, DOI 10.1109/MC.2006.29
   Bertran F., 2005, 19 IEEE INT PAR DIST
   Bertrand F, 2004, NINTH INTERNATIONAL WORKSHOP ON HIGH-LEVEL PARALLEL PROGRAMMING MODELS AND SUPPORTIVE ENVIRONMENTS, PROCEEDINGS, P80, DOI 10.1109/HIPS.2004.1299193
   Blair G, 2009, ANN TELECOMMUN, V64, P1, DOI 10.1007/s12243-009-0086-1
   Bouziane HL, 2010, PARALLEL COMPUT, V36, P86, DOI 10.1016/j.parco.2009.12.012
   Bruneton E., 2002, EUR C OBJ OR PROGR E
   Callahan S. P., 2006, P 2006 ACM SIGMOD IN, P745, DOI [10.1145/1142473.1142574, DOI 10.1145/1142473.1142574]
   Carvalho FH, 2007, CONCURR COMP-PRACT E, V19, P697, DOI 10.1002/cpe.1121
   Church P., 2012, Proceedings of the 2012 IEEE 19th International Conference on Web Services (ICWS), P692, DOI 10.1109/ICWS.2012.119
   Cole M, 2004, PARALLEL COMPUT, V30, P389, DOI 10.1016/j.parco.2004.12.002
   Damevski K., 2007, P 2007 S COMP FRAM T, P131
   de Carvalho FH., 2005, INFORMATION, V8, P621
   de Carvalho FH, 2016, SCI COMPUT PROGRAM, V132, P96, DOI 10.1016/j.scico.2016.07.005
   de Carvalho FH, 2013, J PARALLEL DISTR COM, V73, P557, DOI 10.1016/j.jpdc.2012.12.007
   de Carvalho-Junior FH, 2007, INT SYM COMP ARCHIT, P237, DOI 10.1109/SBAC-PAD.2007.34
   de Carvalho FH, 2008, ELECTRON NOTES THEOR, V195, P113, DOI 10.1016/j.entcs.2007.08.029
   Dantas ABD, 2017, LECT NOTES COMPUT SC, V10487, P198, DOI 10.1007/978-3-319-68034-7_12
   Dantas ABD, 2017, CLOSER: PROCEEDINGS OF THE 7TH INTERNATIONAL CONFERENCE ON CLOUD COMPUTING AND SERVICES SCIENCE, P201, DOI 10.5220/0006306802290240
   Dean J, 2004, USENIX ASSOCIATION PROCEEDINGS OF THE SIXTH SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION (OSDE '04), P137
   Deelman E., 2005, Scientific Programming, V13, P219
   Dennis A., 2001, P 7 INT EUR 2001 C, P835
   Dimond R, 2011, P S COMP ARITHM, P191, DOI 10.1109/ARITH.2011.34
   Duran A., 2012, 2012 International Conference on High Performance Computing & Simulation (HPCS 2012), P365, DOI 10.1109/HPCSim.2012.6266938
   ECMA International, 2006, 335 ECMA INT
   Fan Z., 2004, SC 04, P47, DOI [DOI 10.1109/SC.2004.26, 10.1109/SC.2004.26]
   Forum C., 2009, P200907231 SAND NAT
   Gregor D, 2008, PPOPP'08: PROCEEDINGS OF THE 2008 ACM SIGPLAN SYMPOSIUM ON PRINCIPLES AND PRACTICE OF PARALLEL PROGRAMMING, P133, DOI 10.1145/1345206.1345228
   Heron de Carvalho-Junior Francisco, 2010, Proceedings 2010 11th IEEE/ACM International Conference on Grid Computing (GRID 2010), P339, DOI 10.1109/GRID.2010.5698007
   Jacob JC, 2009, INT J COMPUT SCI ENG, V4, P73, DOI 10.1504/IJCSE.2009.026999
   Jacob R, 2005, INT J HIGH PERFORM C, V19, P293, DOI 10.1177/1094342005056116
   Keahey K, 1997, SIXTH IEEE INTERNATIONAL SYMPOSIUM ON HIGH PERFORMANCE DISTRIBUTED COMPUTING, PROCEEDINGS, P31, DOI 10.1109/HPDC.1997.622360
   Laudon J, 2007, INT J PARALLEL PROG, V35, P299, DOI 10.1007/s10766-007-0033-6
   Li R, 2016, INT J PARALLEL PROG, V44, P832, DOI 10.1007/s10766-015-0395-0
   Ludäscher B, 2006, CONCURR COMP-PRACT E, V18, P1039, DOI 10.1002/cpe.994
   Medeiros V., 2012, P 8 IEEE INT C ESCIE
   Mell P, 2010, COMMUN ACM, V53, P50
   Mittal S, 2015, ACM COMPUT SURV, V48, DOI 10.1145/2856125
   Moore B., 2004, Eclipse Development using the Graphical Editing Framework i the Eclipse Modeling Framework
   O. M. G. Standard, 2006, 20060103 OMG
   Parashar M., 2009, Advanced Computational Infras-tructures for Parallel and Distributed Adaptive Application
   Peltz C, 2003, COMPUTER, V36, P46, DOI 10.1109/MC.2003.1236471
   Pérez C, 2002, LECT NOTES COMPUT SC, V2536, P88
   Post DE, 2005, PHYS TODAY, V58, P35, DOI 10.1063/1.1881898
   Qin J, 2007, DISTRIBUTED AND PARALLEL SYSTEMS: FROM CLUSTER TO GRID COMPUTING, P191, DOI 10.1007/978-0-387-69858-8_19
   Rehr JJ, 2010, COMPUT SCI ENG, V12, P34, DOI 10.1109/MCSE.2010.70
   Rene C., 2000, Cluster Computing, V3, P255, DOI 10.1023/A:1019096607706
   Sarkar V., 2004, WORKSH PROD PERF HIG, P14
   Sussman A, 2006, ENG COMPUT-GERMANY, V22, P311, DOI 10.1007/s00366-006-0037-7
   Szyperski C., 1999, COMPONENT SOFTWARE O, V2nd
   van der Steen AJ, 2006, CONCURR COMP-PRACT E, V18, P141, DOI 10.1002/cpe.908
   Vecchiola C, 2009, 2009 10TH INTERNATIONAL SYMPOSIUM ON PERVASIVE SYSTEMS, ALGORITHMS, AND NETWORKS (ISPAN 2009), P4, DOI 10.1109/I-SPAN.2009.150
   Vouk M. A., 2011, Proceedings of the 2011 IEEE 13th International Symposium on High-Assurance Systems Engineering (HASE 2011), P73, DOI 10.1109/HASE.2011.58
   Wang A.J. A., 2005, COMPONENT ORIENTED P
   Wolstencroft K, 2013, NUCLEIC ACIDS RES, V41, pW557, DOI 10.1093/nar/gkt328
   Zaspel P., 2011, Proceedings of the 2011 IEEE International Conference on Network/Cloud Computing and Applications (NCCA 2011), P73, DOI 10.1109/NCCA.2011.19
   Zhang K., 2004, P 9 INT WORKSH HIGHL
   Zhang L, 2006, IEEE RAD FREQ INTEGR, P117
NR 66
TC 5
Z9 5
U1 0
U2 13
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR 15
PY 2019
VL 173
BP 95
EP 127
DI 10.1016/j.scico.2018.04.004
PG 33
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA HO3WK
UT WOS:000460853500007
OA Bronze
DA 2024-07-18
ER

PT J
AU De Nicola, R
   Duong, T
   Inverso, O
   Trubiani, C
AF De Nicola, Rocco
   Duong, Tan
   Inverso, Omar
   Trubiani, Catia
TI AErlang: Empowering Erlang with attribute-based communication
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Attribute-based communication; Erlang; Concurrency; Distributed
   programming; Collective adaptive systems; Stable Marriage
ID STABLE MARRIAGE PROBLEM; MODEL; CALCULUS
AB Attribute-based communication provides a novel mechanism to dynamically select groups of communicating entities by relying on predicates over their exposed attributes. This paradigm represents an interesting alternative to broadcasting and one-to-one communication, and has potential applications in modelling and analysing complex open-ended systems. In this paper, we study the impact of attribute-based communication by enriching a concurrency-oriented language, i.e., Erlang, with attribute-based primitives to obtain what we call AErlang. We also study the impact of using different implementation strategies for exchanging messages while evaluating the sending and receiving predicates. To evaluate our proposal, we consider two case studies and analyse them from the point of view of efficiency and scalability. The outcome shows that broadcasting is very inefficient and not suitable to handle large systems and that other implementation strategies, whose choice depends on the specific class of problems under consideration, are definitely preferable. We also use one of the case studies to compare AErlang's implementation with that of pure Erlang and X10. The experiments confirm that the overhead resulting from the new communication primitives is acceptable, and that our prototype successfully preserves Erlang's efficiency and scalability. (C) 2018 Elsevier B.V. All rights reserved.
C1 [De Nicola, Rocco] IMT Inst Adv Studies Lucca, Lucca, Italy.
   [Duong, Tan; Inverso, Omar; Trubiani, Catia] Gran Sasso Sci Inst, Laquila, Italy.
C3 IMT School for Advanced Studies Lucca; Gran Sasso Science Institute
   (GSSI)
RP Trubiani, C (corresponding author), Gran Sasso Sci Inst, Laquila, Italy.
EM rocco.denicola@imtlucca.it; tan.duong@gssi.it; omar.inverso@gssi.it;
   catia.trubiani@gssi.it
RI Trubiani, Catia/AAU-4040-2021; De Nicola, Rocco/B-8584-2012
OI Trubiani, Catia/0000-0002-7675-6942; De Nicola,
   Rocco/0000-0003-4691-7570; Inverso, Omar/0000-0002-9348-1979
CR Abd Alrahman Y, 2018, LECT NOTES COMPUT SC, V10854, P1, DOI 10.1007/978-3-319-92612-4_1
   Abd Alrahman Y, 2016, LECT NOTES COMPUT SC, V9952, P539, DOI 10.1007/978-3-319-47166-2_38
   Abd Alrahman Y, 2016, LECT NOTES COMPUT SC, V9688, P1, DOI 10.1007/978-3-319-39570-8_1
   Abdulkadiroglu A, 2005, AM ECON REV, V95, P368, DOI 10.1257/000282805774669637
   AGHA G, 1993, SIGPLAN NOTICES, V28, P23, DOI 10.1145/173284.155335
   Agha G., 1986, Actors: a model of concurrent computation in distributed systems
   Alrahman Y. A., 2018, P INT S LEV APPL FOR
   Alrahman YA., 2016, ABACUS RUN TIME ENV
   [Anonymous], P ACM INT JOINT C PE
   [Anonymous], LNCS
   Arbab F, 2004, MATH STRUCT COMP SCI, V14, P329, DOI 10.1017/S0960129504004153
   Armstrong J., 2007, Programming Erlang: Software for a Concurrent World, V1st
   Armstrong J, 2010, COMMUN ACM, V53, P68, DOI 10.1145/1810891.1810910
   Birman K. P., 1987, Operating Systems Review, V21, P123, DOI 10.1145/37499.37515
   Blau S, 1999, COMPUT NETW, V31, P559, DOI 10.1016/S0169-7552(98)00282-7
   Cesarini Francesco, 2009, Erlang Programming: A Concurrent Approach to Software Development
   Charles P, 2005, ACM SIGPLAN NOTICES, V40, P519, DOI 10.1145/1103845.1094852
   D'Osualdo E, 2013, LECT NOTES COMPUT SC, V7935, P454, DOI 10.1007/978-3-642-38856-9_24
   De Nicola Rocco, 2017, ModelEd, TestEd, TrustEd - Essays Dedicated to Ed Brinksma on the Occasion of His 60th Birthday. LNCS 10500, P169, DOI 10.1007/978-3-319-68270-9_9
   De Nicola R, 2017, LECT NOTES COMPUT SC, V10319, P21, DOI 10.1007/978-3-319-59746-1_2
   De Nicola R, 2017, LECT NOTES COMPUT SC, V10139, P485, DOI 10.1007/978-3-319-51963-0_38
   De Nicola R, 2014, ACM T AUTON ADAP SYS, V9, DOI 10.1145/2619998
   DeNicola R., 2018, P INT WORKSH FDN COO
   Fernandez Diaz A., 2012, P 11 ACM SIGPLAN WOR, P1
   Fontoura M., 2010, SIGMOD'10, P3
   Fournet C., 1996, Conference Record of POPL '96: The 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P372, DOI 10.1145/237721.237805
   Fredlund LÅ, 2007, ACM SIGPLAN NOTICES, V42, P125, DOI 10.1145/1291220.1291171
   Frolund S., 1994, P EUR C OBJ ORJ PROG, P107
   GALE D, 1962, AM MATH MON, V69, P9, DOI 10.2307/2312726
   Geng HX, 2017, AAMAS'17: PROCEEDINGS OF THE 16TH INTERNATIONAL CONFERENCE ON AUTONOMOUS AGENTS AND MULTIAGENT SYSTEMS, P1550
   Gent IP, 2002, FR ART INT, V77, P141
   Goonatilake Rohitha, 2012, Network and Communication Technologies, V1, P1
   Guo QA, 2010, LECT NOTES COMPUT SC, V6303, P23
   Harrenstein P, 2013, IEEE INTELL SYST, V28, P81, DOI 10.1109/MIS.2013.49
   Hewitt C., 1973, PROC 3 INT JOINT C A, P235, DOI 10.1145/359545.359563
   Hirschfeld R, 2008, J OBJECT TECHNOL, V7, P125, DOI 10.5381/jot.2008.7.3.a4
   Hu ZJ, 2015, NATL SCI REV, V2, P349, DOI 10.1093/nsr/nwv042
   HUGHES J, 1989, COMPUT J, V32, P98, DOI 10.1093/comjnl/32.2.98
   Iwama K., 1999, Automata, Languages and Programming. 26th International Colloquium, ICALP'99. Proceedings (Lecture Notes in Computer Science Vol.1644), P443
   Iwama K, 2008, INTERNATIONAL CONFERENCE ON INFORMATICS EDUCATION AND RESEARCH FOR KNOWLEDGE-CIRCULATING SOCIETY, PROCEEDINGS, P131, DOI 10.1109/ICKS.2008.7
   Király Z, 2013, ALGORITHMS, V6, DOI 10.3390/a6030471
   Krzywicki D, 2015, J COMPUT SCI-NETH, V11, P153, DOI 10.1016/j.jocs.2015.07.003
   Letuchy E., FACEBOOK CHAT
   Liebowitz J., 2005, Electronic Government, V2, P384, DOI 10.1504/EG.2005.008330
   Maggs BM, 2015, ACM SIGCOMM COMP COM, V45, P52, DOI 10.1145/2805789.2805800
   MILNER R, 1992, INFORM COMPUT, V100, P1, DOI [10.1016/0890-5401(92)90008-4, 10.1016/0890-5401(92)90009-5]
   Munera D, 2015, AAAI CONF ARTIF INTE, P1212
   O'Connell A., INSIDE ERLANG RARE P
   Plociniczak H, 2010, LECT NOTES COMPUT SC, V6116, P61, DOI 10.1007/978-3-642-13414-2_5
   Prasad KVS, 1995, SCI COMPUT PROGRAM, V25, P285, DOI 10.1016/0167-6423(95)00017-8
   Qiang Guo, 2011, International Journal on Software Tools for Technology Transfer, V13, P355, DOI 10.1007/s10009-010-0179-1
   Roth AE, 2004, Q J ECON, V119, P457, DOI 10.1162/0033553041382157
   ROTH AE, 1984, J POLIT ECON, V92, P991, DOI 10.1086/261272
   Salvaneschi G, 2015, SCI COMPUT PROGRAM, V102, P20, DOI 10.1016/j.scico.2014.11.016
   Singh Munindar P., 2011, Proceedings of the 10th International Conference on Autonomous Agents and MultiAgent Systems (AAMAS), P491, DOI DOI 10.5555/2031678.2031687
   Stalio S., ARXIV12124658
   Sulzmann M., 2008, ACTORS MULTI HEADED, P315
   Teo CP, 1999, LECT NOTES COMPUT SC, V1610, P429
   Tesfatsion L, 1998, ISU EC REP SER, V44, P1
   Wirsing M., 2015, LECT NOTES COMPUTER, V8998
NR 60
TC 4
Z9 4
U1 0
U2 0
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 15
PY 2018
VL 168
BP 71
EP 93
DI 10.1016/j.scico.2018.08.006
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA HA6JG
UT WOS:000450385200004
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Mauro, J
   Nieke, M
   Seidl, C
   Yu, IC
AF Mauro, Jacopo
   Nieke, Michael
   Seidl, Christoph
   Yu, Ingrid Chieh
TI Context-aware reconfiguration in evolving software product lines
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE SPL; Optimization; Preferences; Context-aware
AB Software Product Lines (SPLs) are a mechanism for large-scale reuse where families of related software systems are represented in terms of commonalities and variabilities, e.g., using Feature Models (FMs). While FMs define all possible configurations of an SPL, when considering dynamic SPLs and environmental conditions, not every possible configuration may be valid in all possible contexts. A change in the environment may, therefore, require the reconfiguration of the SPL.
   With common modeling methodologies, it is not possible to capture the correlation of configuration options, contextual influences, user customizations, and evolution. In this paper, we remedy this problem by first defining a novel framework that allows modeling customizable evolving context-aware SPLs. We then provide a reconfiguration engine that computes how the current configuration needs to be reconfigured when the context is altered, the user preferences changed or the SPL artifacts are evolved and the configuration is adapted to reflect the evolved artifacts. (C) 2018 Elsevier B.V. All rights reserved.
C1 [Mauro, Jacopo] Univ Southern Denmark, Odense, Denmark.
   [Nieke, Michael; Seidl, Christoph] Tech Univ Carolo Wilhelmina Braunschweig, Braunschweig, Germany.
   [Yu, Ingrid Chieh] Univ Oslo, Oslo, Norway.
C3 University of Southern Denmark; Braunschweig University of Technology;
   University of Oslo
RP Mauro, J (corresponding author), Univ Southern Denmark, Odense, Denmark.
EM mauro@imada.sdu.dk
OI Mauro, Jacopo/0000-0002-5285-2868
FU European project HyVar [H2020-644298]; Federal Ministry of Education and
   Research of Germany within the project CrESt [011S16043S]; DFG (German
   Research Foundation) [SPP1593]
FX This work was supported by the European project HyVar (grant agreement
   H2020-644298), by the Federal Ministry of Education and Research of
   Germany within the project CrESt (funding number 011S16043S) and by the
   DFG (German Research Foundation) under the Priority Programme SPP1593:
   Design For Future - Managed Software Evolution.
CR Acher M., 2009, PROC 4 INT WORKSHOP, P10
   Acher M, 2013, LECT NOTES COMPUT SC, V8107, P352, DOI 10.1007/978-3-642-41533-3_22
   Agichtein E., 2006, Proceedings of the Twenty-Ninth Annual International ACM SIGIR Conference on Research and Development in Information Retrieval, P3, DOI 10.1145/1148170.1148175
   Bashari M, 2017, INT J SOFTW ENG KNOW, V27, P191, DOI 10.1142/S0218194017500085
   Batory D, 2005, LECT NOTES COMPUT SC, V3714, P7
   Bechhofer S., 2009, ENCY DATABASE SYSTEM, P2008, DOI DOI 10.1007/978-0-387-39940-9_1073
   Benavides D., 2005, LECT NOTES COMPUT SC, V3520
   Benavides D, 2010, INFORM SYST, V35, P615, DOI 10.1016/j.is.2010.01.001
   Botterweck G., 2010, Proceedings of the 2010 ICSE Workshop on Product Line Approaches in Software Engineering, P24
   Boutilier C, 2004, COMPUT INTELL-US, V20, P137, DOI 10.1111/j.0824-7935.2004.00234.x
   Capilla R, 2016, 2016 IEEE 1ST INTERNATIONAL WORKSHOPS ON FOUNDATIONS AND APPLICATIONS OF SELF* SYSTEMS (FAS*W), P6, DOI 10.1109/FAS-W.2016.16
   Chesta C., 2016, 7 INT S LEV APPL ISO
   Cook S. A., 1971, Proceedings of the 3rd annual ACM symposium on theory of computing, P151
   Costa P.A. da S, 2015, ICEIS
   Darryll Harrison W. G., 2016, CES 2016 VOLKSWAGEN
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   De Moura L, 2011, COMMUN ACM, V54, P69, DOI 10.1145/1995376.1995394
   Domshlak C., ARXIV
   Fernandes P, 2011, J UNIVERS COMPUT SCI, V17, P807
   Gámez N, 2015, IEEE SOFTWARE, V32, P104
   Hartmann Herman, 2008, SPLC
   Kang Kyo C, 1990, Technical Report
   Liang Jia Hui, 2015, P 19 INT C SOFTW PRO, P91, DOI [10.1145/2791060, DOI 10.1145/2791060]
   Maric F, 2009, J AUTOM REASONING, V43, P81, DOI 10.1007/s10817-009-9127-8
   Marinho F.G., VERIFICATION MECH FE, DOI [10.1109/SBCARS.2011.9, DOI 10.1109/SBCARS.2011.9]
   Marinho FG, 2013, SCI COMPUT PROGRAM, V78, P2381, DOI 10.1016/j.scico.2012.04.009
   Mauro J, 2017, 21ST INTERNATIONAL SYSTEM & SOFTWARE PRODUCT LINE CONFERENCE (SPLC 2017), VOL 2, P18, DOI 10.1145/3109729.3109752
   Mauro J, 2016, TENTH INTERNATIONAL WORKSHOP ON VARIABILITY MODELLING OF SOFTWARE-INTENSIVE SYSTEMS (VAMOS 2016), P41, DOI 10.1145/2866614.2866620
   Mendonca M., 2009, P 24 ACM SIGPLAN C C, P761, DOI [10.1145/1639950.1640002, DOI 10.1145/1639950.1640002]
   Mendonca Marcilio, 2009, SPLC' 09, P231
   Murashkin Alexandr, 2013, SPLC
   Neskovic S, 2015, COMPUT SCI INF SYST, V12, P961, DOI 10.2298/CSIS141031035N
   Nethercote N., 2007, LECT NOTES COMPUT SC, V4741
   Nieke M., 2016, USER PROFILES CONTEX, P563
   Nieke M, 2016, TENTH INTERNATIONAL WORKSHOP ON VARIABILITY MODELLING OF SOFTWARE-INTENSIVE SYSTEMS (VAMOS 2016), P73, DOI 10.1145/2866614.2866625
   Nieke M, 2016, LECT NOTES COMPUT SC, V9953, P563, DOI 10.1007/978-3-319-47169-3_44
   Nieke Michael., 2017, P 11 INT WORKSHOP VA, P92, DOI DOI 10.1145/3023956.3023962
   Ochoa L., 2015, P 2015 ACM SIGPLAN I
   Parra C., 2009, P 13 INT SOFTW PROD
   Pfannemüller M, 2017, 2017 IEEE INTERNATIONAL CONFERENCE ON AUTOMATIC COMPUTING (ICAC), P247, DOI 10.1109/ICAC.2017.18
   Pohl K., 2005, SOFTWARE PRODUCT LIN, V10
   Possomp es T., 2013, SEKE, P250
   Reiff-Marganiec S., 2011, P 3 WORKSH FORM ASP, V83, P22
   Rendl A., 2015, LECT NOTES COMPUT SC, V9255
   Robarts S., 2015, VOLKSWAGENS GOLF R T
   Rossi F, 2006, FOUND ARTIF INTELL, P1
   Segura S., 2012, Proceedings of the Sixth International Workshop on Variability Modeling of Software-Intensive Systems, P63, DOI DOI 10.1145/2110147.2110155
   Seidl Christoph., 2014, P 8 INT WORKSHOP VAR, V6, P1, DOI [DOI 10.1145/2556624.2556625, 10.1145/2556624.2556625]
   Thomason R.H., 1999, AI MAG, V20, DOI 10.1609/aimag.v20i2.1456
   Ubayashi N., 2007, P 2007 ACM S APPL CO
   Yoshii K., 2006, ISMIR, V6
   Young S., 2002, P 2002 IEEE INT C DA
NR 52
TC 14
Z9 14
U1 0
U2 9
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 1
PY 2018
VL 163
BP 139
EP 159
DI 10.1016/j.scico.2018.05.002
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GN0MN
UT WOS:000438662800009
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Kurs, J
   Vrany, J
   Ghafari, M
   Lungu, M
   Nierstrasz, O
AF Kurs, Jan
   Vrany, Jan
   Ghafari, Mohammad
   Lungu, Mircea
   Nierstrasz, Oscar
TI Efficient parsing with parser combinators
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Optimizations; Parsing expression grammars; Parser combinators
AB Parser combinators offer a universal and flexible approach to parsing. They follow the structure of an underlying grammar, are modular, well-structured, easy to maintain, and can recognize a large variety of languages including context-sensitive ones. However, these advantages introduce a noticeable performance overhead mainly because the same powerful parsing algorithm is used to recognize even simple languages. Time-wise, parser combinators cannot compete with parsers generated by well-performing parser generators or optimized hand-written code.
   Techniques exist to achieve a linear asymptotic performance of parser combinators, yet there is a significant constant multiplier. The multiplier can be lowered to some degree, but this requires advanced meta-programming techniques, such as staging or macros, that depend heavily on the underlying language technology.
   In this work we present a language-agnostic solution. We optimize the performance of parsing combinators with specializations of parsing strategies. For each combinator, we analyze the language parsed by the combinator and choose the most efficient parsing strategy. By adapting a parsing strategy for different parser combinators we achieve performance comparable to that of hand-written or optimized parsers while preserving the advantages of parsers combinators. (C) 2017 Elsevier B.V. All rights reserved.
C1 [Kurs, Jan; Ghafari, Mohammad; Nierstrasz, Oscar] Univ Bern, Software Composit Grp, Bern, Switzerland.
   [Vrany, Jan] Czech Tech Univ, Software Engn Grp, Prague, Czech Republic.
   [Lungu, Mircea] Univ Groningen, Software Engn & Architecture Grp, Groningen, Netherlands.
C3 University of Bern; Czech Technical University Prague; University of
   Groningen
RP Kurs, J (corresponding author), Univ Bern, Software Composit Grp, Bern, Switzerland.
EM kurs@inf.unibe.ch
OI Nierstrasz, Oscar/0000-0002-9975-9791; Ghafari,
   Mohammad/0000-0002-1986-9668
FU Swiss National Science Foundation (SNSF) [200020-162352]
FX We gratefully acknowledge the financial support of the Swiss National
   Science Foundation for the project "Agile Software Analysis" (SNSF
   project No. 200020-162352, Jan. 1, 2016-Dec. 30, 2018).
CR Abelson H., 1991, MIT ELECT ENG COMPUT
   Adams MD, 2014, ACM SIGPLAN NOTICES, V49, P121, DOI 10.1145/2775050.2633369
   Aho A. V., 1977, ADDISON WESLEY SER C
   Aho A. V., 1972, THEORY PARSING TRANS
   [Anonymous], 4 WORKSH DYN LANG AP
   [Anonymous], 2013, P 4 WORKSH SCAL ACM
   [Anonymous], 1975, 39 BELL LAB
   [Anonymous], 2003, Haskell 98 language and libraries: the revised report
   Backhouse B. C., 1979, SYNTAX PROGRAMMING L
   Beguet Eric, 2014, P 5 ANN SCAL WORKSH, P7
   Black A.P., 2009, PHARO EXAMPLE
   Brant J., SMACC SMALLTALK COMP
   Christiansen H, 2009, LECT NOTES COMPUT SC, V5517, P488, DOI 10.1007/978-3-642-02478-8_61
   CYTRON R, 1991, ACM T PROGR LANG SYS, V13, P451, DOI 10.1145/115372.115320
   Economopoulos G., 2009, 18 INT C CC 2009 HEL, P126
   Economopoulos Giorgios Robert, 2006, THESIS
   Ford B, 2004, ACM SIGPLAN NOTICES, V39, P111, DOI 10.1145/982962.964011
   Ford B, 2002, ACM SIGPLAN NOTICES, V37, P36, DOI 10.1145/583852.581483
   Frost RA, 1996, SCI COMPUT PROGRAM, V27, P263, DOI 10.1016/0167-6423(96)00014-7
   GAMMA E, 1997, PATTERN LANGUAGES PR, V3, P79
   Grune D, 2008, MONOGR COMPUT SCI, P235
   Hindle A, 2008, INT C PROGRAM COMPRE, P133, DOI 10.1109/ICPC.2008.13
   Humer C, 2015, ACM SIGPLAN NOTICES, V50, P123, DOI 10.1145/2658761.2658776
   Hutton Graham, 1996, Monadic Parser Combinators
   ISO, 1996, 14997 ISO
   Johnson StephenC., 1975, YACC YET ANOTHER COM, V32
   Jonnalagedda M, 2014, ACM SIGPLAN NOTICES, V49, P637, DOI [10.1145/2660193.2660241, 10.1145/2714064.2660241]
   Koopman P., 1998, LNCS, V122-138
   Kurs J., 2016, THESIS
   Kurs J., 2014, P INT WORKSH SMALLT
   Kurs J, 2016, PROCEEDINGS OF THE 11TH EDITION OF THE INTERNATIONAL WORKSHOP ON SMALLTALK TECHNOLOGIES, (IWST 2016), DOI 10.1145/2991041.2991042
   Kurs J, 2015, COMPUT LANG SYST STR, V44, P114, DOI 10.1016/j.cl.2015.08.002
   Larcheveque G., 2013, DEEP INTO PHARO
   Lattner C, 2004, INT SYM CODE GENER, P75, DOI 10.1109/CGO.2004.1281665
   Levine John., 2009, FLEX BISON TEXT PROC, V1st
   Mascarenhas R.I. Fabio, 2013, CORR
   Moonen L, 2001, EIGHTH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P13, DOI 10.1109/WCRE.2001.957806
   Moors A., 2008, TECHNICAL REPORT
   Nierstrasz O., 2005, ACM SIGSOFT SOFTWARE, V30, P1, DOI [DOI 10.1145/1095430, 10.1145/1095430.1081707, DOI 10.1145/1095430.1081707]
   Odersky M., 2007, TECHNICAL REPORT
   PARR TJ, 1995, SOFTWARE PRACT EXPER, V25, P789, DOI 10.1002/spe.4380250705
   PENNELLO TJ, 1986, SIGPLAN NOTICES, V21, P145, DOI 10.1145/13310.13326
   Redziejowski RR, 2009, FUND INFORM, V93, P325, DOI 10.3233/FI-2009-105
   Rompf T, 2011, ACM SIGPLAN NOTICES, V46, P127, DOI 10.1145/1942788.1868314
   Scott E, 2006, ACM T PROGR LANG SYS, V28, P577, DOI 10.1145/1146809.1146810
   Taha W, 2003, LECT NOTES COMPUT SC, V3016, P30
   Tomita M, 2012, GEN LR PARSING
   Vieira dos Santos Reis Leonardo Vieira, 2012, Programming Languages. Proceedings of the16th Brazilian Symposium, SBLP 2012, P72, DOI 10.1007/978-3-642-33182-4_7
   Visser E., 1997, P9706 U AMST PROGR R
   Visser Eelco., 1997, Scannerless Generalized-LR Parsing
   Wadler R, 1995, LECT NOTES COMPUT SC, V925
   Wilson PaulR., 1992, Uniprocessor Garbage Collection Techniques
   WIRTH N, 1977, COMMUN ACM, V20, P822, DOI 10.1145/359863.359883
NR 53
TC 2
Z9 2
U1 0
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 1
PY 2018
VL 161
SI SI
BP 57
EP 88
DI 10.1016/j.scico.2017.12.001
PG 32
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GI7ZZ
UT WOS:000434742900005
OA Green Published, Bronze
DA 2024-07-18
ER

PT J
AU Bacchelli, A
   Mocci, A
   Cleve, A
   Lanza, M
AF Bacchelli, Alberto
   Mocci, Andrea
   Cleve, Anthony
   Lanza, Michele
TI Mining structured data in natural language artifacts with island parsing
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Mining software repositories; Unstructured data; Island parsing
ID GRAMMARS
AB Software repositories typically store data composed of structured and unstructured parts. Researchers mine this data to empirically validate research ideas and to support practitioners' activities. Strtictured data (e.g., source code) has a formal syntax and is straightforward to analyze; unstructured data (e.g., documentation) is a mix of natural language, noise, and snippets of structured data, and it is harder to analyze. Especially the structured content (e.g., code snippets) in unstructured data contains valuable information.
   Researchers have proposed several approaches to recognize, extract, and analyze structured data embedded in natural language. We analyze these approaches and investigate their drawbacks. Subsequently, we present two novel methods, based on scannerless generalized LR (SGLR) and Parsing Expression Grammars (PEGs), to address these drawbacks and to mine structured fragments within unstructured data. We validate and compare these approaches on development emails and Stack Overflow posts with JAVA code fragments. Both approaches achieve high precision and recall values, but the PEG-based one achieves better computational performances and simplicity in engineering. (C) 2017 Published by Elsevier B.V.
C1 [Bacchelli, Alberto] Univ Zurich, Dept Informat, Zurich, Switzerland.
   [Mocci, Andrea; Lanza, Michele] USI, REVEAL Software Inst, Lugano, Switzerland.
   [Cleve, Anthony] Univ Namur, Fac Informat, Namur, Belgium.
C3 University of Zurich; Universita della Svizzera Italiana; University of
   Namur
RP Bacchelli, A (corresponding author), Univ Zurich, Dept Informat, Zurich, Switzerland.
EM bacchelli@ifi.uzh.ch; andrea.mocci@usi.ch; anthony.cleve@unamur.be;
   michele.lanza@usi.ch
RI Bacchelli, Alberto/ABG-5379-2020; Mocci, Andrea/AAR-7741-2020; Lanza,
   Michele/JNQ-9470-2023
OI Bacchelli, Alberto/0000-0003-0193-6823; Mocci,
   Andrea/0000-0002-8426-5676; Lanza, Michele/0000-0003-4391-0197
CR [Anonymous], P DYLA 2010 4 WORKSH
   [Anonymous], 2005, P 11 ACM SIGKDD INT
   Bacchelli Alberto, 2010, Proceedings of the 18th IEEE International Conference on Program Comprehension (ICPC 2010), P24, DOI 10.1109/ICPC.2010.47
   Bacchelli A., 2010, Proceedings of the 32nd International Conference on Software Engineering, P375
   Bacchelli A, 2012, PROC INT CONF SOFTW, P375, DOI 10.1109/ICSE.2012.6227177
   Bacchelli A, 2011, EUR CON SFTWR MTNCE, P15, DOI 10.1109/CSMR.2011.6
   Bacchelli A, 2009, WORK CONF REVERSE EN, P205, DOI 10.1109/WCRE.2009.44
   Basten Bas, 2008, LECT NOTES COMPUTER, V5452, P265, DOI [10.1007/978-3-642-00434-6_17, DOI 10.1007/978-3-642-00434-6_17]
   Bettenburg N., 2008, P 2008 INT WORKING C, P27
   Bettenburg N, 2012, EUR CON SFTWR MTNCE, P319, DOI 10.1109/CSMR.2012.39
   Bettenburg N, 2009, PROC IEEE INT CONF S, P539, DOI 10.1109/ICSM.2009.5306383
   Bird C., 2007, 4 INT WORKSHOP MININ, P26
   Cordy JR, 2006, SCI COMPUT PROGRAM, V61, P190, DOI 10.1016/j.scico.2006.04.002
   Dean T. R., 2003, Automated Software Engineering, V10, P311, DOI 10.1023/A:1025801405075
   Dean TR, 2003, CASCON '03, P266
   Dekhtyar A., 2004, P INT WORKSHOP MININ, P22
   EARLEY J, 1970, COMMUN ACM, V13, P94, DOI 10.1145/362007.362035
   Ford B, 2004, ACM SIGPLAN NOTICES, V39, P111, DOI 10.1145/982962.964011
   Ford B, 2002, ACM SIGPLAN NOTICES, V37, P36, DOI 10.1145/583852.581483
   Frost RA, 2008, LECT NOTES COMPUT SC, V4902, P167
   Gleixner T., 2010, ECRTS 2010 22 EUR RE
   Gosling J., 2012, Java Language Specification, V7
   Haiduc S., 2010, 2010 32nd International Conference on Software Engineering (ICSE), P223, DOI 10.1145/1810295.1810335
   Jones KS, 2007, INFORM PROCESS MANAG, V43, P1449, DOI 10.1016/j.ipm.2007.03.009
   Kuhn A, 2007, INFORM SOFTWARE TECH, V49, P230, DOI 10.1016/j.infsof.2006.10.017
   Kurs J, 2015, COMPUT LANG SYST STR, V44, P114, DOI 10.1016/j.cl.2015.08.002
   Manning Christopher D., 2008, INTRO INFORM RETRIEV
   Moonen L, 2001, EIGHTH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P13, DOI 10.1109/WCRE.2001.957806
   Murphy G. C., 1996, ACM Transactions on Software Engineering and Methodology, V5, P262, DOI 10.1145/234426.234441
   Rastkar Sarah, 2010, P 32 ACM IEEE INT C, V1, P505, DOI DOI 10.1145/1806799.1806872
   Reis LVS, 2015, COMPUT LANG SYST STR, V42, P46, DOI 10.1016/j.cl.2015.01.002
   Rigby PC, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P832, DOI 10.1109/ICSE.2013.6606629
   Scott E, 2010, ELECTRON NOTES THEOR, V253, P177, DOI 10.1016/j.entcs.2010.08.041
   Sun Microsystems Inc., 1999, COD CONV JAV PROGR L
   Thurston A.D., 2006, P CASCON 2006 C CTR
   Tomita M., 1985, P 9 INT JOINT C ART, P756
   Treude C, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P804, DOI 10.1145/1985793.1985907
   Triola MF., 2007, ELEMENTARY STAT, VTenth
   van den Brand M. G. J., 2001, Compiler Construction. 10th International Conference, CC 2001. Held as Part of the Joint European Conferences on Theory and Practice of Software, ETAPS 2001. Proceedings (Lecture Notes in Computer Science Vol.2027), P365
   Visser Eelco, 1997, THESIS
   Wu XQ, 2010, COMPUT LANG SYST STR, V36, P16, DOI 10.1016/j.cl.2009.01.002
   Xie Tao, 2006, Proc. MSR, P54
   Zimmermann T, 2010, IEEE T SOFTWARE ENG, V36, P618, DOI 10.1109/TSE.2010.63
NR 43
TC 4
Z9 4
U1 0
U2 18
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 15
PY 2017
VL 150
BP 31
EP 55
DI 10.1016/j.scico.2017.06.009
PG 25
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA FK3IT
UT WOS:000413379500003
OA Bronze
DA 2024-07-18
ER

PT J
AU O'Halloran, C
   Robinson, TG
   Brock, N
AF O'Halloran, Colin
   Robinson, Tom Gibson
   Brock, Neil
TI Verifying cyber attack properties
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Cyber-physical systems; Security; Verification; Validation; Internet of
   things
ID VERIFICATION
AB The heterogeneous, evolving and distributed nature of Cyber-Physical Systems (CPS) means that there is little chance of performing a top down development or anticipating all critical requirements such devices will need to satisfy individually and collectively. This paper describes an approach to verifying system requirements, when they become known, by performing an automated refinement check of its composed components abstracted from the actual implementation. This work was sponsored by the Charles Stark Draper Laboratories under the DARPA HACMS project. The views, opinions, and/or findings expressed are those of the authors and should not be interpreted as representing the official views or policies of the Department of Defense or the U.S. Government (C) 2017 Elsevier B.V. All rights reserved.
C1 [Brock, Neil] Charles Stark Draper Lab, Cambridge, MA USA.
   [O'Halloran, Colin; Robinson, Tom Gibson] Univ Oxford, Dept Comp Sci, Parks Rd, Oxford OX1 3QD, England.
C3 The Charles Stark Draper Laboratory, Inc.; University of Oxford
RP O'Halloran, C (corresponding author), Univ Oxford, Dept Comp Sci, Parks Rd, Oxford OX1 3QD, England.
EM colin.ohalloran@cs.ox.ac.uk
FU Charles Stark Draper Laboratory under DARPA project on High Assurance
   Cyber Military Systems (HACMS) [FA8750-12-2-0247]
FX This work was sponsored by the Charles Stark Draper Laboratory under the
   DARPA project on High Assurance Cyber Military Systems (HACMS) under
   agreement number FA8750-12-2-0247. The views, opinions, and/or findings
   expressed are those of the authors and should not be interpreted as
   representing the official views or policies of the Department of Defense
   or the U.S. Government. The authors are grateful for help with FSG from
   Mark Teasedale of D-RisQ Ltd and Rob Arthan of Lemmal. The authors are
   indebted to the reviewers for vastly improving the paper.
CR Alkassar E, 2010, LECT NOTES COMPUT SC, V6217, P40, DOI 10.1007/978-3-642-15057-9_3
   [Anonymous], 1997, The Theory and Practice of Concurrency
   [Anonymous], COMMUNICATING PROCES
   Bartels Bjorn, 2010, ECEASST, V30
   CARRE B, 1993, FINAL REPORT WORK DE
   David Terry L., 2016, INTEGRATED COMMUNICA
   Delmas D, 2007, LECT NOTES COMPUT SC, V4634, P437
   Feng XY, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P170, DOI 10.1145/1375581.1375603
   Filliatre Jean-Christophe, 2007, COMP AID VER 19 INT
   Fox Anthony, 2012, Interactive Theorem Proving. Proceedings of the Third International Conference, ITP 2012, P338, DOI 10.1007/978-3-642-32347-8_23
   Fu KV, 2013, COMMUN ACM, V56, P35, DOI 10.1145/2508701
   Gibson-Robinson T, 2016, INT J SOFTW TOOLS TE, V18, P149, DOI 10.1007/s10009-015-0377-y
   Gibson-Robinson Thomas, 2017, LNCS
   Grossman Dan, 2005, TYPE SAFE DIALECT C
   Hill M.G., 2001, RISK REDUCTION C COD
   Hoare C. A. R., 1998, Unifying Theories of Programming
   Klein G, 2010, COMMUN ACM, V53, P107, DOI 10.1145/1743546.1743574
   Lazic R, 1999, INTERNATIONAL CONFERENCE ON PARALLEL AND DISTRIBUTED PROCESSING TECHNIQUES AND APPLICATIONS, VOLS I-V, PROCEEDINGS, P319
   Myreen M. O., 2008, THESIS U CAMBRIDGE
   Nepomniaschy V., 2003, ERSH MEM C
   Nicholson A, 2012, COMPUT SECUR, V31, P418, DOI 10.1016/j.cose.2012.02.009
   Norrish Michael, 1999, THESIS U CAMBRIDGE
   O'Halloran C., 2007, QINETIQEMEASDUTR0704
   O'Halloran CM, 2007, SAFETY OF SYSTEMS, P243, DOI 10.1007/978-1-84628-806-7_15
   O'Halloran C, 2013, AUTOMAT SOFTW ENG, V20, P237, DOI 10.1007/s10515-012-0116-5
   O'Halloran C, 2009, LECT NOTES COMPUT SC, V5850, P23, DOI 10.1007/978-3-642-05089-3_3
   O'Halloran Colin, 2015, P 15 INT WORKSH AUT, V72
   Petit J, 2015, IEEE T INTELL TRANSP, V16, P546, DOI 10.1109/TITS.2014.2342271
   Roscoe A.W., 1995, TACAS
   Sadeghi A.-R., 2015, 52 ACM EDAC IEEE DES, P1
   Strecker M., 2005, TECHNICAL REPORT
   Woodcock J., 1996, Using Z: Specification, Refinement, and Proof
   Yang Jean, 2010, SAFE LAST INSTRUCTIO
NR 33
TC 1
Z9 3
U1 0
U2 8
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 15
PY 2017
VL 148
SI SI
BP 3
EP 25
DI 10.1016/j.scico.2017.06.006
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA FJ8ZB
UT WOS:000413056100002
OA Bronze
DA 2024-07-18
ER

PT J
AU Castro, S
   Mens, K
   Moura, P
AF Castro, Sergio
   Mens, Kim
   Moura, Paulo
TI JPC: A library for categorising and applying inter-language conversions
   between Java and Prolog
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 4th International Workshop on Academic Software Development Tools and
   Techniques
CY JUL 01, 2013
CL Montpellier, FRANCE
DE Object-oriented programming; Logic programming; Multi-paradigm
   programming; Java-Prolog language interoperability; Programming
   languages
AB The number of approaches existing to enable a smooth interaction between Java and Prolog programs testifies the growing interest in solutions that combine the strengths of both languages. Most of these approaches provide limited support to allow programmers to customise how Prolog artefacts should be reified in the Java world, or how to reason about Java objects on the Prolog side. This is an error-prone task since often a considerable amount of mappings must be developed and organised. Furthermore, appropriate mappings may depend on the particular context in which a conversion is accomplished. Although some libraries alleviate this problem by providing higher-level abstractions to deal with the complexity of custom conversions between artefacts of the two languages, such libraries are difficult to implement and evolve, because of a lack of appropriate underlying building blocks for encapsulating, categorising and applying Java-Prolog conversion routines. We therefore introduce a new library, JPC, serving as a development tool for both programmers willing to categorise context-dependent conversion constructs in their Java-Prolog systems, and for architects implementing frameworks providing higher-level abstractions for better interoperability between these two languages. (C) 2015 Elsevier B.V. All rights reserved.
C1 [Castro, Sergio; Mens, Kim] Catholic Univ Louvain, ICTEAM, Louvain, Belgium.
   [Moura, Paulo] INESC TEC, Ctr Res Adv Comp Syst, Porto, Portugal.
C3 Universite Catholique Louvain; INESC TEC
RP Mens, K (corresponding author), Catholic Univ Louvain, ICTEAM, Louvain, Belgium.
EM kim.mens@uclouvain.be
RI Moura, Paulo/D-6920-2019
OI Mens, Kim/0000-0003-0303-1630; Moura, Paulo/0000-0001-9792-9104
CR [Anonymous], 2011, Programming in Scala: A Comprehensive Step-by-Step Guide
   [Anonymous], ACM Computing Surveys, DOI [DOI 10.1145/242224.242420, 10.1145/242224.242420]
   [Anonymous], 1997, A Discipline of Programming
   [Anonymous], 1995, 132111 ISOIEC JTC
   Banbara M, 2006, LECT NOTES ARTIF INT, V4369, P1
   Brichau J, 2007, P INT C CHIL COMPUT, P92, DOI 10.1109/SCCC.2007.16
   Calejo M, 2004, LECT NOTES COMPUT SC, V3229, P714, DOI 10.1007/978-3-540-30227-8_64
   Castro Sergio, 2013, Practical Aspects of Declarative Languages. 15th International Symposium, PADL 2013. Proceedings: LNCS 7752, P26, DOI 10.1007/978-3-642-45284-0_3
   Castro S., 2014, AUTOMATIC INTEGRATIO
   Castro S., 2014, JGUM LIGHTWEIGHT CAT
   Castro S., 2014, JPC JAVA PROLOG INTE
   Castro S., 2012, P WORKSH REFL AOP ME, P11
   Castro S., 2014, THESIS
   Castro S., 2014, MAPQUERY QUERYING VI
   Castro S., 2014, JCONVERTER JAVA FRAM
   Castro S., 2014, P 30 INT C LOG PROGR
   Castro S, 2011, SCI COMPUT PROGRAM, V76, P1113, DOI 10.1016/j.scico.2010.09.001
   Costa VS, 2012, THEOR PRACT LOG PROG, V12, P5, DOI 10.1017/S1471068411000512
   Crockford D., 2008, JAVASCRIPT GOOD PART
   De Roover C, 2014, 2014 SOFTWARE EVOLUTION WEEK - IEEE CONFERENCE ON SOFTWARE MAINTENANCE, REENGINEERING, AND REVERSE ENGINEERING (CSMR-WCRE), P429, DOI 10.1109/CSMR-WCRE.2014.6747211
   De Roover Coen, 2011, P 9 INT C PRINCIPLES, P71, DOI [10.1145/2093157.2093168, DOI 10.1145/2093157.2093168]
   Denti E, 2005, SCI COMPUT PROGRAM, V57, P217, DOI 10.1016/j.scico.2005.02.001
   DUCOURNAU R, 1994, SIGPLAN NOTICES, V29, P164, DOI 10.1145/191081.191110
   Fisher Maydene., 2003, JDBC API TUTORIAL RE
   Gamma E., 1994, Design patterns: Elements of reusable object-oriented software
   Google Inc, 2012, GSON 2 2 2 JAV LIB C
   Google Inc, 2013, GUAV 14 0 1 GOOGL CO
   Haemmerlé R, 2006, LECT NOTES COMPUT SC, V4079, P41, DOI 10.1007/11799573_6
   Hermenegildo MV, 2012, THEOR PRACT LOG PROG, V12, P219, DOI 10.1017/S1471068411000457
   Hirschfeld R, 2008, J OBJECT TECHNOL, V7, P125, DOI 10.5381/jot.2008.7.3.a4
   ISO/IEC JTC, 2000, INF TECHN PORGR LANG
   Kawaguchi K., 2009, JAVA ARCHITECTURE XM
   Kniesel Gunter, 2007, P 3 WORKSH LINK ASP
   KNUDSEN JL, 1988, LECT NOTES COMPUT SC, V322, P93
   Masuhara H, 2003, LECT NOTES COMPUT SC, V2743, P2
   Moura Paulo, 2009, Logic Programming. Proceedings 25th International Conference, ICLP 2009, DOI 10.1007/978-3-642-02846-5_3
   Moura P., 2011, LECT NOTES ARTIFICIA, V6547, P52
   Moura P., 2003, THESIS
   Moura P, 2008, LECT NOTES COMPUT SC, V4902, P265
   Moura P, 2009, LECT NOTES COMPUT SC, V5418, P107, DOI 10.1007/978-3-540-92995-6_8
   PARNAS DL, 1972, COMMUN ACM, V15, P1053, DOI 10.1145/361598.361623
   Rho T., 2004, PROLOG DEV TOOLA PRO
   Schrijvers Tom, 2008, Logic Programming. Proceedings 24th International Conference, ICLP 2008, P7, DOI 10.1007/978-3-540-89982-2_2
   SICStus Prolog Jasper, 1998, JASP
   Singleton P., 2004, JPL 3 0 BIDIRECTIONA
   Sterling L., 1994, LOGIC PROGRAMMING
   Swift T, 2012, THEOR PRACT LOG PROG, V12, P157, DOI 10.1017/S1471068411000500
   Taivalsaari A, 1997, J OBJECT-ORIENT PROG, V10, P44
   Tarau P, 2004, LECT NOTES COMPUT SC, V3132, P477, DOI 10.1007/978-3-540-27775-0_46
   Tarau P, 2011, ACM SIGPLAN NOTICES, V46, P129, DOI 10.1145/2076022.1993497
   van den Brand MGJ, 2007, INFORM SOFTWARE TECH, V49, P55, DOI 10.1016/j.infsof.2006.08.009
   van den Brand MGJ, 2000, SOFTWARE PRACT EXPER, V30, P259, DOI 10.1002/(SICI)1097-024X(200003)30:3<259::AID-SPE298>3.0.CO;2-Y
   Vanbrabant Robbie., 2008, Google Guice: Agile Lightweight Dependency Injection Framework
   Weaver J., 2012, APRESSPOD SERIES
   Wielemaker J, 2012, THEOR PRACT LOG PROG, V12, P67, DOI 10.1017/S1471068411000494
   Wuyts R., 2001, THESIS
NR 56
TC 1
Z9 1
U1 0
U2 8
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 1
PY 2017
VL 134
SI SI
BP 75
EP 99
DI 10.1016/j.scico.2015.11.008
PG 25
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA EF1GE
UT WOS:000390072500007
OA Bronze
DA 2024-07-18
ER

PT J
AU Li, Q
   Smith, G
AF Li, Qin
   Smith, Graeme
TI Formal development of multi-agent systems using MAZE
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Formal modelling; Object-Z; Refinement; Multi-agent systems
AB MAZE is an extension of the Object-Z specification language supporting the specification and development of multi-agent systems (MAS). Following recommendations from the agent-oriented software engineering community, it supports three distinct levels of abstraction: (i) the macro level which focusses on the system's overall, global behaviour, independently of how the agents of the system operate and interact, (ii) the meso level which focusses on agent interactions, and (iii) the micro level which focusses on the operation of individual agents. Object-Z's high-level support for component based specification, which is well suited to modelling MAS, is complemented in MAZE with support for action refinement to facilitate the top-down development process from the macro to micro level, and with a number of syntactic conventions aimed at abstractly specifying the low-level mechanisms required for dealing with asynchronous communication and timing constraints at the micro level. The latter are shorthands for existing Object-Z notation and so require no redefinition of Object-Z's semantics. In this paper, we provide an overview of MAZE and illustrate its use on a non-trivial case study: a swarm robotic algorithm for self-assembly. (C) 2016 Elsevier B.V. All rights reserved.
C1 [Li, Qin] East China Normal Univ, Shanghai Key Lab Trustworthy Comp, Putuo Qu, Shanghai Shi, Peoples R China.
   [Smith, Graeme] Univ Queensland, Sch Informat Technol & Elect Engn, Brisbane, Qld 4072, Australia.
C3 East China Normal University; University of Queensland
RP Li, Q (corresponding author), East China Normal Univ, Shanghai Key Lab Trustworthy Comp, Putuo Qu, Shanghai Shi, Peoples R China.
EM qli@sei.ecnu.edu.cn; smith@itee.uq.edu.au
RI Smith, Graeme/F-9960-2014
OI Smith, Graeme/0000-0003-1019-4761; Li, Qin/0000-0001-7476-4079
FU Australian Research Council (ARC) [DP110101211]; National Science
   Foundation of China [NSFC 61402176]
FX This work was supported by Australian Research Council (ARC) Discovery
   Grant DP110101211 and National Science Foundation of China NSFC
   61402176.
CR Abrial Jean-Raymond, 2010, International Journal on Software Tools for Technology Transfer, V12, P447, DOI 10.1007/s10009-010-0145-y
   Abrial J.-R., 2010, MODELLING IN EVENT B
   [Anonymous], 1992, The Z Notation
   [Anonymous], 2007, Self-organization in sensor and actor networks
   Astefánoaei L, 2010, SPECIFICATION AND VERIFICATION OF MULTI-AGENT SYSTEMS, P35, DOI 10.1007/978-1-4419-6984-2_2
   Back RJR, 1994, LECT NOTES COMPUT SC, V836, P367
   CHOU CT, 1990, IEEE T COMMUN, V38, P144, DOI 10.1109/26.47845
   Christensen Anders Lyhne, 2008, Swarm Intelligence, V2, P143, DOI 10.1007/s11721-008-0012-6
   Derrick J., 2014, REFINEMENT Z OBJECT
   Derrick J, 2011, ACM T PROGR LANG SYS, V33, DOI 10.1145/1889997.1890001
   DINVERNO M, 1997, 1 IEEE INT C FORM EN
   Eder S., 2010, 2010 Fourth IEEE International Conference on Self-Adaptive and Self-Organizing Systems Workshop (SASOW), P166, DOI 10.1109/SASOW.2010.35
   Fisher M, 2011, J APPL LOGIC, V9, P223, DOI 10.1016/j.jal.2011.09.004
   Gerla M, 2000, IEEE WCNC, P100, DOI 10.1109/WCNC.2000.904608
   Hilaire V., 2000, Engineering Societies in the Agents World. First International Workshop, ESAW 2000. Revised Papers (Lecture Notes in Artificial Intelligence Vol.1972), P114
   Hindriks KV, 2009, AUTON AGENT MULTI-AG, V19, P4, DOI 10.1007/s10458-008-9065-6
   Jones C, 2003, IEEE INT CONF ROBOT, P721
   Klavins E, 2006, IEEE T AUTOMAT CONTR, V51, P949, DOI 10.1109/TAC.2006.876950
   Laibinis Linas, 2014, Software Engineering and Formal Methods. 12th International Conference, SEFM 2014. Proceedings: LNCS 8702, P363, DOI 10.1007/978-3-319-10431-7_29
   Li Q, 2013, IEEE INT C ENG COMP, P111, DOI 10.1109/ICECCS.2013.24
   Lui W., 2010, LECT NOTES COMPUTER, V6234, P107
   Meyer J.-J.C., 2014, HDB HIST LOGIC, P629
   Rao A. S., 1995, ICMAS-95 Proceedings. First International Conference on Multi-Agent Systems, P312
   Rao AS, 1998, J LOGIC COMPUT, V8, P293, DOI 10.1093/logcom/8.3.293
   Rzevski G., 2014, MANAGING COMPLEXITY
   Smith G., 2012, SOFTW ENG WORKSH SEW
   Smith G, 2014, LECT NOTES COMPUT SC, V8477, P72, DOI 10.1007/978-3-662-43652-3_6
   Smith G, 2009, LECT NOTES COMPUT SC, V5586, P90, DOI 10.1007/978-3-642-02704-8_8
   Smith Graeme., 2000, OBJECT Z SPECIFICATI
   Stoy K, 2007, DISTRIBUTED AUTONOMOUS ROBOTIC SYSTEMS 6, P3, DOI 10.1007/978-4-431-35873-2_1
   Stoy K, 2006, ROBOT AUTON SYST, V54, P135, DOI 10.1016/j.robot.2005.09.017
   Su W, 2011, LECT NOTES COMPUT SC, V6991, P437, DOI 10.1007/978-3-642-24559-6_30
   WOOLDRIDGE M, 1995, KNOWL ENG REV, V10, P115, DOI 10.1017/S0269888900008122
   Wooldridge M., 2009, An introduction to multiagent systems
   Zambonelli F, 2004, AUTON AGENT MULTI-AG, V9, P253, DOI 10.1023/B:AGNT.0000038028.66672.1e
NR 35
TC 1
Z9 1
U1 0
U2 12
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 1
PY 2016
VL 131
BP 126
EP 150
DI 10.1016/j.scico.2016.04.008
PG 25
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA EB8FQ
UT WOS:000387627300009
OA Bronze
DA 2024-07-18
ER

PT J
AU Jongmans, SSTQ
   Arbab, F
AF Jongmans, S. -S. T. Q.
   Arbab, F.
TI Global consensus through local synchronization: A formal basis for
   partially-distributed coordination
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Reo; Port automata; Nonassociative product; Parallel composition;
   Connector implementation
ID CHOREOGRAPHY CONFORMANCE; COMPONENT CONNECTORS; REO CIRCUITS; MODEL;
   SEMANTICS; LANGUAGE; AUTOMATA
AB A promising new application domain for coordination languages is expressing interaction protocols among threads/processes in multicore programs: coordination languages typically provide high-level constructs and abstractions that more easily compose into correct (with respect to a programmer's intentions) protocol specifications than do low-level synchronization constructs (e.g., locks, semaphores, etc.) provided by conventional languages. However, a crucial step toward adoption of coordination languages for multicore programming is the development of compiler technology: programmers must have tools to automatically generate efficient code for high-level protocol specifications.
   In ongoing work, we are developing compilers for a coordination language, Reo, based on that language's automata semantics. As part of the compilation process, our tool computes the product of a number of automata, each of which models a constituent of the protocol to generate code for. This approach ensures that implementations of those automata at run-time reach a consensus about their global behavior in every step. However, this approach has two problems: state space explosion at compile-time and over-sequentialization at run-time. In this paper, we provide a solution by defining a new, local product operator on those automata that avoids these problems. We then identify a sufficiently large class of automata for which using our new product instead of the existing one is semantics-preserving. (C) 2015 Elsevier B.V. All rights reserved.
C1 [Jongmans, S. -S. T. Q.; Arbab, F.] Leiden Univ, NL-2333 CA Leiden, Netherlands.
   [Jongmans, S. -S. T. Q.; Arbab, F.] Ctr Wiskunde & Informat, NL-1098 XG Amsterdam, Netherlands.
C3 Leiden University - Excl LUMC; Leiden University
RP Jongmans, SSTQ (corresponding author), Ctr Wiskunde & Informat, Sci Pk 123, NL-1098 XG Amsterdam, Netherlands.
EM jongmans@cwi.nl; farhad@cwi.nl
CR Anantharaman S, 2005, SEFM 2005: Third IEEE International Conference on Software Engineering and Formal Methods, Proceedings, P435
   Arbab F, 2005, LECT NOTES COMPUT SC, V3454, P236
   Arbab F, 2004, MATH STRUCT COMP SCI, V14, P329, DOI 10.1017/S0960129504004153
   Arbab F, 2011, LECT NOTES COMPUT SC, V7000, P169, DOI 10.1007/978-3-642-24933-4_9
   Atkinson A., 2010, P AUSPDC 2010, P21
   BAETEN JCM, 1987, LECT NOTES COMPUT SC, V287, P153
   Baier C, 2006, LECT NOTES COMPUT SC, V4038, P1
   Baier C, 2006, SCI COMPUT PROGRAM, V61, P75, DOI 10.1016/j.scico.2005.10.008
   Basu A, 2006, I C SOFTW ENG FORM M, P3
   Bengtsson J., 1996, Hybrid Systems III. Verification and Control, P232, DOI 10.1007/BFb0020949
   Berendsen J, 2008, LECT NOTES COMPUT SC, V5215, P233, DOI 10.1007/978-3-540-85778-5_17
   Bergstra JanA., 1989, ALGEBRAIC METHODS TH, V394, P445
   Bjornson R., 1993, THESIS
   Bonakdarpour B, 2012, DISTRIB COMPUT, V25, P383, DOI 10.1007/s00446-012-0168-6
   Bravetti M, 2007, LECT NOTES COMPUT SC, V4829, P34
   Bravetti M, 2009, LECT NOTES COMPUT SC, V5387, P37, DOI 10.1007/978-3-642-01364-5_3
   Carbone M, 2012, ACM T PROGR LANG SYS, V34, DOI 10.1145/2220365.2220367
   Clarke Dave, 2012, Coordination Models and Languages. Proceedings 14th International Conference, COORDINATION 2012, P59, DOI 10.1007/978-3-642-30829-1_5
   Clarke D., 2016, SCI COMPUT PROGRAM, P115
   Clarke D, 2007, SCI COMPUT PROGRAM, V66, P205, DOI 10.1016/j.scico.2007.01.009
   Dokter K., 2015, CORR
   Feng M. D., 1994, Parallel Processing: CONPAR 94 - VAPP VI. Third Joint International Conference on Vector and Parallel Processing Proceedings, P581
   Feng MD, 1996, COMPUT LANG, V22, P205, DOI 10.1016/S0096-0551(96)00016-1
   Fu X, 2004, THEOR COMPUT SCI, V328, P19, DOI 10.1016/j.tcs.2004.07.004
   Fu X., 2005, INT J WEB SERV RES, V2, P68, DOI DOI 10.4018/JWSR.2005100104
   GELERNTER D, 1985, ACM T PROGR LANG SYS, V7, P80, DOI 10.1145/2363.2433
   Honda K, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P273, DOI 10.1145/2827695
   Jongmans S.-S., 2013, FM1303 CWI
   Jongmans SSTQ, 2016, SCI COMPUT PROGRAM, V115, P47, DOI 10.1016/j.scico.2014.02.017
   Jongmans Sung-Shik T. Q., 2012, Service-Oriented and Cloud Computing. First European Conference, ESOCC 2012. Proceedings, P1, DOI 10.1007/978-3-642-33427-6_1
   Jongmans S.-S.T.Q., 2013, CCIS, V393, P174, DOI DOI 10.1007/978-3-642-45364-9_15
   Jongmans SSTQ, 2013, ELECTRON PROC THEOR, P34, DOI 10.4204/EPTCS.109.6
   Jongmans SSTQ, 2012, ELECTRON PROC THEOR, P79, DOI 10.4204/EPTCS.91.6
   Jongmans SSTQ, 2014, WORKS DATA EXEC, P42, DOI 10.1109/DFM.2013.14
   Jongmans SSTQ, 2014, SERV ORIENTED COMPUT, V8, P277, DOI 10.1007/s11761-013-0147-1
   Jongmans SSTQ, 2015, SERV ORIENTED COMPUT, V9, P311, DOI 10.1007/s11761-015-0177-y
   Jongmans SSTQ, 2014, EUROMICRO WORKSHOP P, P697, DOI 10.1109/PDP.2014.19
   Jongmans SSTQ, 2012, SCI ANN COMPUT SCI, V22, P201, DOI 10.7561/SACS.2012.1.201
   Jongmans SSTQ, 2011, LECT NOTES COMPUT SC, V6721, P31, DOI 10.1007/978-3-642-21464-6_3
   Khosravi R, 2008, LECT NOTES COMPUT SC, V5052, P169, DOI 10.1007/978-3-540-68265-3_11
   Kitchin D, 2009, LECT NOTES COMPUT SC, V5522, P1, DOI 10.1007/978-3-642-02138-1_1
   Klin B, 2008, LECT NOTES COMPUT SC, V4962, P428, DOI 10.1007/978-3-540-78499-9_30
   Koehler C., 2009, P SAC 2009, P1369, DOI DOI 10.1145/1529282.1529587
   Kokash N, 2012, FORM ASP COMPUT, V24, P187, DOI 10.1007/s00165-011-0191-6
   Kokash N, 2010, LECT NOTES COMPUT SC, V6447, P106, DOI 10.1007/978-3-642-16901-4_9
   Kuske D, 2003, LECT NOTES COMPUT SC, V2759, P150
   Lodaya K, 2000, THEOR COMPUT SCI, V237, P347, DOI 10.1016/S0304-3975(00)00031-1
   Lynch N. A., 1996, DISTRIBUTED ALGORITH
   Menezes Ronaldo., 2003, Proceedings of the 2003 ACM symposium on Applied computing, SAC'03, P375
   Meng S, 2011, SCI COMPUT PROGRAM, V76, P651, DOI 10.1016/j.scico.2010.03.002
   Meng S, 2007, APPLIED COMPUTING 2007, VOL 1 AND 2, P346, DOI 10.1145/1244002.1244085
   Mousavi MR, 2006, ELECTRON NOTES THEOR, V154, P83, DOI 10.1016/j.entcs.2005.12.034
   Papadopoulos G. A., 1998, ADV COMPUT, V46, P329, DOI [DOI 10.1016/S0065-2458(08)60208-9, 10.1016/S0065-2458(08)60208-9]
   Parr T.J., 2004, P 13 INT C WORLD WID, P224, DOI [DOI 10.1145/988672.988703, 10.1145/988672.988703]
   Pourvatan B., 2012, LNCS, V6921, P237
   Priami C, 1995, COMPUT J, V38, P578, DOI 10.1093/comjnl/38.7.578
   Proenca J., 2012, P 27 ANN ACM S APPL, P1510, DOI DOI 10.1145/2245276.2232017
   Proença J, 2011, ELECTRON PROC THEOR, P65, DOI 10.4204/EPTCS.58.5
   Proenca Jose, 2011, THESIS
   Rowstron A., 1996, Euro-Par '96 Parallel Processing. Second International Euro-Par Conference. Proceedings, P510
   Segala R., 1995, THESIS
   Sirjani M, 2006, LECT NOTES COMPUT SC, V4038, P281
   Sun Meng, 2010, 2010 Fifth International Symposium on Service Oriented System Engineering (SOSE 2010), P121, DOI 10.1109/SOSE.2010.51
   Vrancken JLM, 1997, THEOR COMPUT SCI, V177, P287, DOI 10.1016/S0304-3975(96)00250-2
   Wyckoff P, 1998, IBM SYST J, V37, P454, DOI 10.1147/sj.373.0454
   Yeh W.-J., 1993, THESIS
NR 66
TC 7
Z9 7
U1 0
U2 3
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN-FEB
PY 2016
VL 115
SI SI
BP 199
EP 224
DI 10.1016/j.scico.2015.09.001
PG 26
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CZ5DH
UT WOS:000367122200011
OA Green Published
DA 2024-07-18
ER

PT J
AU Yamada, A
   Kusakari, K
   Sakabe, T
AF Yamada, Akihisa
   Kusakari, Keiichirou
   Sakabe, Toshiki
TI A unified ordering for termination proving
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Term rewriting; Reduction order; Termination
ID TERM; PATH
AB We introduce a reduction order called the weighted path order (WPO) that subsumes many existing reduction orders. WPO compares weights of terms as in the Knuth-Bendix order (KBO), while WPO allows weights to be computed by a wide class of interpretations. We investigate summations, polynomials and maximums for such interpretations. We show that KBO is a restricted case of WPO induced by summations, the polynomial order (POLO) is subsumed by WPO induced by polynomials, and the lexicographic path order (LPO) is a restricted case of WPO induced by maximums. By combining these interpretations, we obtain an instance of WPO that unifies KBO, LPO and POLO. In order to fit WPO in the modern dependency pair framework, we further provide a reduction pair based on WPO and partial statuses. As a reduction pair, WPO also subsumes matrix interpretations. We finally present SMT encodings of our techniques, and demonstrate the significance of our work through experiments. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Yamada, Akihisa; Sakabe, Toshiki] Nagoya Univ, Grad Sch Informat Sci, Nagoya, Aichi 4648601, Japan.
   [Yamada, Akihisa] Natl Inst Adv Ind Sci & Technol, Tokyo, Japan.
   [Kusakari, Keiichirou] Gifu Univ, Fac Engn, Gifu, Japan.
C3 Nagoya University; National Institute of Advanced Industrial Science &
   Technology (AIST); Gifu University
RP Yamada, A (corresponding author), Nagoya Univ, Grad Sch Informat Sci, Nagoya, Aichi 4648601, Japan.
EM akihisa.yamada@aist.go.jp; kusakari@gifu-u.ac.jp;
   sakabe@is.nagoya-u.ac.jp
RI Yamada, Akihisa/AAQ-4545-2020
OI Yamada, Akihisa/0000-0001-8872-2240
FU JSPS KAKENHI [24500012]; Grants-in-Aid for Scientific Research
   [24500012] Funding Source: KAKEN
FX We are grateful to the anonymous reviewers for their careful inspections
   and comments that significantly improved the presentation of this paper.
   We thank Sarah Winkler and Aart Middeldorp for discussions at the early
   stages of this work. We thank Florian Frohn and Jurgen Giesl for their
   helps in experiments with AProVE, and Albert Rubio, Miguel Bofill and
   Cristina Borralleras for their helps in experiments with THOR. This work
   was supported by JSPS KAKENHI #24500012.
CR [Anonymous], 1975, ATP25 U TEX
   [Anonymous], P 10 ACM SIGACT SIGP
   [Anonymous], 1970, Computational Problems in Abstract Algebra, DOI DOI 10.1016/B978-0-08-012975-4.50028-X
   Arts T, 2000, THEOR COMPUT SCI, V236, P133, DOI 10.1016/S0304-3975(99)00207-8
   Baader Franz, 1998, TERM REWRITING ALL
   Ben-Amrami AM, 2008, LECT NOTES COMPUT SC, V4963, P218, DOI 10.1007/978-3-540-78800-3_16
   Bofill M, 2013, J LOGIC COMPUT, V23, P263, DOI 10.1093/logcom/exs027
   Borralleras C, 2000, LECT NOTES ARTIF INT, V1831, P346
   Borralleras C, 2012, J AUTOM REASONING, V48, P107, DOI 10.1007/s10817-010-9196-8
   Codish M, 2006, LECT NOTES ARTIF INT, V4246, P30, DOI 10.1007/11916277_3
   Codish M, 2012, J AUTOM REASONING, V49, P53, DOI 10.1007/s10817-010-9211-0
   DERSHOWITZ N, 1982, THEOR COMPUT SCI, V17, P279, DOI 10.1016/0304-3975(82)90026-3
   DERSHOWITZ N, 1995, THEOR COMPUT SCI, V142, P179, DOI 10.1016/0304-3975(94)00275-4
   Endrullis J, 2008, J AUTOM REASONING, V40, P195, DOI 10.1007/s10817-007-9087-9
   Fuhs C, 2008, LECT NOTES COMPUT SC, V5117, P110, DOI 10.1007/978-3-540-70590-1_8
   Fuhs C, 2007, LECT NOTES COMPUT SC, V4501, P340
   Geser A, 1996, APPL ALGEBR ENG COMM, V7, P469, DOI 10.1007/BF01293264
   Giesl J, 2005, LECT NOTES COMPUT SC, V3717, P216
   Giesl J., 2004, LECT NOTES ARTIF INT, V3452, P75
   Giesl J, 2006, J AUTOM REASONING, V37, P155, DOI 10.1007/s10817-006-9057-7
   Giesl J, 2006, LECT NOTES ARTIF INT, V4130, P281
   Hirokawa N, 2005, INFORM COMPUT, V199, P172, DOI 10.1016/j.ic.2004.10.004
   Hirokawa N, 2013, J AUTOM REASONING, V50, P279, DOI 10.1007/s10817-012-9248-3
   Kamin S., 1980, Tech. rep
   Koprowski A, 2009, ACTA CYBERN, V19, P357
   Korovin K, 2003, LECT NOTES ARTIF INT, V2741, P47
   Korovin K, 2003, INFORM COMPUT, V183, P165, DOI 10.1016/S0890-5401(03)00021-X
   Korp M, 2009, LECT NOTES COMPUT SC, V5595, P295, DOI 10.1007/978-3-642-02348-4_21
   Kovács L, 2011, LECT NOTES ARTIF INT, V6803, P384, DOI 10.1007/978-3-642-22438-6_29
   Kusakari K, 1999, LECT NOTES COMPUT SC, V1702, P47
   Ludwig M, 2007, LECT NOTES ARTIF INT, V4790, P348, DOI 10.1007/978-3-540-75560-9_26
   Manna Z., 1970, Proceedings of the 3rd Hawaii international conference on system sciences, P789
   Middeldorp A, 1997, THEOR COMPUT SCI, V175, P127, DOI 10.1016/S0304-3975(96)00172-7
   STEINBACH J, 1989, LECT NOTES COMPUT SC, V355, P434
   Sternagel C, 2011, LECT NOTES ARTIF INT, V6989, P243, DOI 10.1007/978-3-642-24364-6_17
   Sternagel Christian, 2013, P 13 INT C REWR TECH, V21, P287, DOI DOI 10.4230/LIPICS.RTA.2013287
   TeReSe, 2003, CAMB TRACTS THEOR CO, V55
   Thiemann R., 2012, LIPICS, V15, P339, DOI [DOI 10.4230/LIPICS.RTA.2012.339, 10.4230/LIPIcs.RTA.2012.339]
   TPDB, 2013, TPDB TERMINATION PRO
   Winkler S., 2013, LEIBNIZ INT P INFORM, V21, P335
   Winkler S, 2012, LECT NOTES COMPUT SC, V7180, P420, DOI 10.1007/978-3-642-28717-6_33
   Yamada Akihisa, 2014, Rewriting and Typed Lambda Calculi. Joint International Conference, RTA-TLCA 2014, Held as Part of the Vienna Summer of Logic, VSL 2014. Proceedings: LNCS 8560, P466, DOI 10.1007/978-3-319-08918-8_32
   Yamada A., 2013, P 15 INT S PRINC PRA, P181
   Yamada A., 2013, P 13 INT WORKSH TERM, P74
   Zankl H, 2010, LECT NOTES ARTIF INT, V6355, P481, DOI 10.1007/978-3-642-17511-4_27
   Zankl H, 2009, J AUTOM REASONING, V43, P173, DOI 10.1007/s10817-009-9131-z
   ZANTEMA H, 1994, J SYMB COMPUT, V17, P23, DOI 10.1006/jsco.1994.1003
   Zantema H, 2001, APPL ALGEBR ENG COMM, V12, P3, DOI 10.1007/s002000100061
NR 48
TC 10
Z9 12
U1 0
U2 0
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 1
PY 2015
VL 111
BP 110
EP 134
DI 10.1016/j.scico.2014.07.009
PN 1
PG 25
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DB5MA
UT WOS:000368557000006
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Baldan, P
   Bonchi, F
   Gadducci, F
   Monreale, GV
AF Baldan, Paolo
   Bonchi, Filippo
   Gadducci, Fabio
   Monreale, Giacoma Valentina
TI Modular encoding of synchronous and asynchronous interactions using open
   Petri nets
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Open Petri nets; Asynchronous CCS; CSP; Net encoding of processes;
   Synchronous and asynchronous interaction
ID SEMANTICS; CALCULUS; CCS
AB The paper investigates the relationships between two well-known approaches to the modelling of concurrent and distributed systems, process calculi and Petri nets. A framework for the modular encoding of process calculi into Petri nets is proposed, which is based on a reactive variant of Petri nets. In particular, two exemplary calculi are considered: (asynchronous) CCS and CSP, representing alternative interaction paradigms, namely asynchronous and (broadcast) synchronous communication. The encoding is proved to preserve as well as to reflect the operational semantics. As a consequence, it is well-behaved with respect to the standard behavioural equivalences, a fact that is exploited to perform a "technology transfer" between the two formalisms, in terms of un/decidability results for classical properties such as reachability and deadlock-freedom. The encoding highlights the expressiveness of the proposed reactive variant of nets, as well as paving the way for a fruitful integration of tools and techniques between the visual formalism of nets and the algebraic framework of processes. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Baldan, Paolo] Univ Padua, Dipartimento Matemat, I-35100 Padua, Italy.
   [Bonchi, Filippo] Univ Lyon, ENS Lyon, LIP, UMR 5668,CNRS,UCBL,INRIA, Lyon, France.
   [Gadducci, Fabio; Monreale, Giacoma Valentina] Univ Pisa, Dipartimento Informat, I-56100 Pisa, Italy.
C3 University of Padua; Ecole Normale Superieure de Lyon (ENS de LYON);
   Inria; Centre National de la Recherche Scientifique (CNRS); University
   of Pisa
RP Gadducci, F (corresponding author), Univ Pisa, Dipartimento Informat, I-56100 Pisa, Italy.
EM baldan@math.unipd.it; filippo.bonchi@gmail.com; fabio@di.unipi.it;
   vale@di.unipi.it
RI GADDUCCI, FABIO/HSE-2262-2023; Bonchi, Filippo/E-7955-2018
OI GADDUCCI, FABIO/0000-0003-0690-3051; Bonchi, Filippo/0000-0002-3433-723X
FU EU [FP7-ICT IP 257414 ASCENS]; MIUR PRIN [2010LHT4KM CINA]; ANR
   [121S02001 PACE]
FX Partly supported by EU FP7-ICT IP 257414 ASCENS, MIUR PRIN 2010LHT4KM
   CINA, and ANR 121S02001 PACE.
CR Agerwala Tilak, 1973, P 1 ANN S COMP ARCH, P81, DOI [DOI 10.1145/800123.803973, 10.1145]
   Amadio RM, 1998, THEOR COMPUT SCI, V195, P291, DOI 10.1016/S0304-3975(97)00223-5
   [Anonymous], 1980, LNCS
   [Anonymous], 1992, LNCS, DOI DOI 10.1007/3-540-55767-9
   [Anonymous], 1997, The Theory and Practice of Concurrency
   [Anonymous], 1994, J INF PROCESS CYBERN
   Aranda J, 2009, LECT NOTES COMPUT SC, V5504, P242
   Baldan P, 2005, MATH STRUCT COMP SCI, V15, P1, DOI 10.1017/S0960129504004311
   Baldan P, 2014, LECT NOTES COMPUT SC, V8459, P1, DOI 10.1007/978-3-662-43376-8_1
   Baldan P, 2009, LECT NOTES COMPUT SC, V5710, P99, DOI 10.1007/978-3-642-04081-8_8
   BEST E, 1992, LECT NOTES COMPUT SC, V609, P21
   Bonchi F, 2009, FUND INFORM, V94, P305, DOI 10.3233/FI-2009-133
   Bonchi F, 2008, FUND INFORM, V89, P479
   Boreale M, 1998, LECT NOTES COMPUT SC, V1378, P95, DOI 10.1007/BFb0053544
   Boreale M, 2002, INFORM COMPUT, V172, P139, DOI 10.1006/inco.2001.3080
   Boudol G., 1992, 1702 INRIA
   Bruni R, 2013, LOG METH COMPUT SCI, V9, DOI 10.2168/LMCS-9(3:16)2013
   Buscemi M. G., 2001, Foundations of Software Science and Computation Structures. 4th International Conference, FOSSACS 2001. Held as Part of the Joint European Conferences on Theory and Practice of Software, ETAPS 2001. Proceedings (Lecture Notes in Computer Science Vol.2030), P104
   Busi N, 2004, LECT NOTES COMPUT SC, V3142, P307
   Busi N, 2003, THEOR COMPUT SCI, V298, P529, DOI 10.1016/S0304-3975(02)00867-8
   Busi N, 2008, J LOGIC ALGEBR PROGR, V75, P52, DOI 10.1016/j.jlap.2007.06.003
   Castellani I, 1998, LECT NOTES COMPUT SC, V1530, P90
   De Nicola R, 1998, IEEE T SOFTWARE ENG, V24, P315, DOI 10.1109/32.685256
   DEGANO P, 1988, LECT NOTES COMPUT SC, V340, P85
   Devillers R., 2006, ENTCS, V154.3, P71
   Devillers R, 2008, FORM ASP COMPUT, V20, P429, DOI 10.1007/s00165-008-0079-2
   Ferrari G, 2006, LECT NOTES COMPUT SC, V4294, P453
   Gadducci F, 2011, J LOGIC ALGEBR PROGR, V80, P113, DOI 10.1016/j.jlap.2010.10.002
   GOLTZ U, 1985, LECT NOTES COMPUT SC, V188, P169
   GOLTZ U, 1990, LNCS, V469, P334
   Gorrieri R., 1990, LNCS, V458, P2
   Hirshfeld Y., 1994, Computer Science Logic. 7th Workshop, CSL '93. Selected Papers, P165, DOI 10.1007/BFb0049331
   Hoare CAR., 1985, Communicating Sequential Processes
   HONDA K, 1991, LECT NOTES COMPUT SC, V512, P133
   JANCAR P, 1995, THEOR COMPUT SCI, V148, P281, DOI 10.1016/0304-3975(95)00037-W
   Kindler E, 1997, LECT NOTES COMPUT SC, V1248, P235
   Koutny M, 1994, LECT NOTES COMPUT SC, V836, P210
   Koutny M, 1999, THEOR COMPUT SCI, V211, P1, DOI 10.1016/S0304-3975(97)00180-1
   Llorens M, 2012, ADV ENG SOFTW, V50, P110, DOI 10.1016/j.advengsoft.2012.02.006
   Meyer R, 2009, FUND INFORM, V94, P439, DOI 10.3233/FI-2009-138
   MILNER R, 1992, LECT NOTES COMPUT SC, V623, P685
   Milner R., 2003, SPRINGER LECT NOTES, V3098, P686, DOI DOI 10.1007/978-3-540-27755-2
   Nielsen M., 1995, CONCUR '95: Concurrency Theory. 6th International Conference. Proceedings, P175
   OLDEROG ER, 1987, LECT NOTES COMPUT SC, V266, P196
   Priese L, 1998, THEOR COMPUT SCI, V206, P219, DOI 10.1016/S0304-3975(97)00169-2
   Reisig W., 2013, Understanding Petri Nets-Modeling Techniques, Analysis Methods, Case Studies
   Sassone V, 2005, ELECTRON NOTES THEOR, V127, P107, DOI 10.1016/j.entcs.2005.02.008
   WINSKEL G, 1984, LECT NOTES COMPUT SC, V166, P140
NR 48
TC 10
Z9 10
U1 0
U2 10
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 1
PY 2015
VL 109
BP 96
EP 124
DI 10.1016/j.scico.2014.11.019
PG 29
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CN5LD
UT WOS:000358469900005
OA Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Bae, K
   Meseguer, J
AF Bae, Kyungmin
   Meseguer, Jose
TI Model checking linear temporal logic of rewriting formulas under
   localized fairness
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Model checking; Parameterized fairness; Linear temporal logic of
   rewriting
ID SOFTWARE-VERIFICATION; SYSTEMS; MAUDE; SEMANTICS; EVENTS; LTL
AB This paper presents the linear temporal logic of rewriting (LTLR) model checker under localized fairness assumptions for the Maude system. The linear temporal logic of rewriting extends linear temporal logic (LTL) with spatial action patterns that describe patterns of rewriting events. Since LTLR generalizes and extends various state-based and event-based logics, mixed properties involving both state propositions and actions, such as fairness properties, can be naturally expressed in LTLR. However, often the needed fairness assumptions cannot even be expressed as propositional temporal logic formulas because they are parametric, that is, they correspond to universally quantified temporal logic formulas. Such universal quantification is succinctly captured by the notion of localized fairness; for example, fairness is localized to the object name parameter in object fairness conditions. We summarize the foundations, and present the language design and implementation of the Maude Fair LTLR model checker, developed at the C++ level within the Maude system by extending the existing Maude LTL model checker. Our tool provides not only an efficient LTLR model checking algorithm under parameterized fairness assumptions but also suitable specification languages as part of its user interface. The expressiveness and effectiveness of the Maude Fair LTLR model checker are illustrated by five case studies. This is the first tool we are aware of that can model check temporal logic properties under parameterized fairness assumptions. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Bae, Kyungmin; Meseguer, Jose] Univ Illinois, Dept Comp Sci, Champaign, IL 61820 USA.
C3 University of Illinois System; University of Illinois Urbana-Champaign
RP Bae, K (corresponding author), Univ Illinois, Dept Comp Sci, Champaign, IL 61820 USA.
FU NSF [CNS 09-04749, CCF 09-05584, CNS 13-19109]; AFOSR Grant
   [FA8750-11-2-0084]; Boeing Corporation Grant [C8088-557395]; Division Of
   Computer and Network Systems; Direct For Computer & Info Scie & Enginr
   [1319109] Funding Source: National Science Foundation
FX We thank the anonymous reviewers for their constructive comments that
   helped to improve the paper. This work has been supported in part by NSF
   Grants CNS 09-04749, CCF 09-05584, and CNS 13-19109, AFOSR Grant
   FA8750-11-2-0084, and Boeing Corporation Grant C8088-557395.
CR Abdulla P, 1999, LECT NOTES COMPUT SC, V1579, P208
   Agha G., 1986, Actors: a model of concurrent computation in distributed systems
   [Anonymous], 1992, TEMPORAL LOGIC REACT, DOI DOI 10.1007/978-1-4612-0931-7
   [Anonymous], 2000, Lecture Notes in Computer Science
   [Anonymous], 1986, Fairness
   [Anonymous], LECT NOTES COMPUT SC
   [Anonymous], CAFEOBJ REPORT LANGU
   [Anonymous], 2001, MODEL CHECKING
   Bae K, 2012, ELECTRON NOTES THEOR, V290, P19, DOI 10.1016/j.entcs.2012.11.009
   Bae K, 2010, LECT NOTES COMPUT SC, V6381, P208, DOI 10.1007/978-3-642-16310-4_14
   Baier C, 2008, PRINCIPLES OF MODEL CHECKING, P1
   BLACKBURN P, 2006, HDB MODAL LOGIC, V3
   Borovansky P, 2002, THEOR COMPUT SCI, V285, P155, DOI 10.1016/S0304-3975(01)00358-9
   Bruni R, 2006, THEOR COMPUT SCI, V360, P386, DOI 10.1016/j.tcs.2006.04.012
   Chaki S, 2005, FORM ASP COMPUT, V17, P461, DOI 10.1007/s00165-005-0071-z
   Chaki S, 2005, LECT NOTES COMPUT SC, V3771, P53
   Chaki S, 2004, LECT NOTES COMPUT SC, V2999, P128
   Chandy K.M., 1988, PARALLEL PROGRAM DES
   Clavel M, 2002, THEOR COMPUT SCI, V285, P187, DOI 10.1016/S0304-3975(01)00359-0
   Clavel M., 2007, LECT NOTES COMPUT SC, V4350
   Cohen A, 2010, LECT NOTES COMPUT SC, V6174, P543, DOI 10.1007/978-3-642-14295-6_46
   Couvreur JM, 2005, LECT NOTES COMPUT SC, V3639, P169
   Dams D, 1997, ACM T PROGR LANG SYS, V19, P253, DOI 10.1145/244795.244800
   Dershowitz Nachum, 1990, Handbook of Theoretical Computer Science, Volume B: Formal Models and Semantics, P243, DOI 10.1016/b978-0-444-88074-1.50011-1
   Durán F, 2007, SCI COMPUT PROGRAM, V66, P125, DOI 10.1016/j.scico.2006.07.002
   Durán F, 2010, LECT NOTES COMPUT SC, V6381, P86, DOI 10.1007/978-3-642-16310-4_7
   Duret-Lutz A, 2009, LECT NOTES COMPUT SC, V5799, P213, DOI 10.1007/978-3-642-04761-9_17
   Eker S, 2003, LECT NOTES COMPUT SC, V2648, P230
   Eker Steven., 2004, ELECTRON NOTES THEOR, V71, P162, DOI [DOI 10.1016/S1571-0661(05)82534-4, 10.1016/S1571-0661(05)82534-4]
   Ellison C, 2012, ACM SIGPLAN NOTICES, V47, P533, DOI 10.1145/2103621.2103719
   Escobar S, 2007, LECT NOTES COMPUT SC, V4533, P153
   Fantechi A., 1992, P ERCIM WORKSH THEOR, P3
   Fantechi A, 2008, LECT NOTES COMPUT SC, V4961, P230, DOI 10.1007/978-3-540-78743-3_17
   Fiadeiro J. L., 2000, Recent Trends in Algebraic Development Techniques. 14th International Workshop, WADT'99. Selected Papers (Lecture Notes in Computer Science Vol. 1827), P438
   Gastin P, 2001, LECT NOTES COMPUT SC, V2102, P53
   GNESI S, 2005, 43 ANN IT C AICA UD
   Groote JF, 2009, CH CRC COMP SCI SER, P99
   HENNESSY M, 1985, J ACM, V32, P137, DOI 10.1145/2455.2460
   Holzmann G., 1996, Proceedings of the 2nd International SPIN Workshop on Model Checking of Software, P23
   Holzmann GJ, 2004, The SPIN model checker: primer and reference manual, V1003
   Honzinger M. R., 1996, Algorithm Theory - SWAT '96. 5th Scandinavian Workshop on Algorithm Theory. Proceedings, P16
   Huth M, 2001, LECT NOTES COMPUT SC, V2028, P155
   Kesten Y, 2006, FORM METHOD SYST DES, V28, P57, DOI 10.1007/s10703-006-4342-y
   Kindler E, 1998, LECT NOTES COMPUT SC, V1420, P365
   KOZEN D, 1983, THEOR COMPUT SCI, V27, P333, DOI 10.1016/0304-3975(82)90125-6
   Kramer J., 2002, IEEE T SOFTWARE ENG, V16, P1293
   Kyungmin Bae, 2012, Rewriting Logic and Its Applications. 9th International Workshop, WRLA 2012. Held as a Satellite Event of ETAPS. Revised Selected Papers, P99, DOI 10.1007/978-3-642-34005-5_6
   Kyungmin Bae, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P132, DOI 10.1007/978-3-642-22110-1_11
   Lamport L., 1994, ACM T PROGR LANG SYS, V16, P872
   Latvala T., 2001, Applications and Theory of Petri Nets 2001. 22nd International Conference, ICATPN 2001. Proceedings (Lecture Notes in Computer Science Vol.2075), P242
   Martí-Oliet N, 2005, J LOGIC COMPUT, V15, P317, DOI 10.1093/logcom/exi015
   Meseguer J, 2005, LECT NOTES COMPUT SC, V3467, P250
   Meseguer J., 1996, CONCUR '96: Concurrency Theory. 7th International Conference. Proceedings, P331
   MESEGUER J, 1992, THEOR COMPUT SCI, V96, P73, DOI 10.1016/0304-3975(92)90182-F
   Meseguer J, 1998, LECT NOTES COMPUT SC, V1376, P18
   Meseguer J., 2007, UIUCDCSR20072815 U I
   Meseguer J, 2008, THEOR COMPUT SCI, V403, P239, DOI 10.1016/j.tcs.2008.04.040
   Meseguer J, 2008, LECT NOTES COMPUT SC, V5065, P354, DOI 10.1007/978-3-540-68679-8_22
   Meseguer J, 2007, THEOR COMPUT SCI, V373, P213, DOI 10.1016/j.tcs.2006.12.018
   Meseguer J, 2012, J LOGIC ALGEBR PROGR, V81, P721, DOI 10.1016/j.jlap.2012.06.003
   Misra J., 2001, A Discipline of Multiprogramming
   Nicola R.D., 1990, LECT NOTES COMPUTER, V469, P407
   Olveczky P. C., 2007, Higher-Order and Symbolic Computation, V20, P161, DOI 10.1007/s10990-007-9001-5
   Rocha Camilo, 2011, Algebra and Coalgebra in Computer Science. Proceedings 4th International Conference, CALCO 2011, P314, DOI 10.1007/978-3-642-22944-2_22
   Rocha C., 2012, THESIS U ILLINOIS UR
   Sen K, 2005, LECT NOTES COMPUT SC, V3576, P266
   Somenzi F., 2000, ser. Lecture Notes in Computer Science, V1855, P248, DOI DOI 10.1007/10722167_21
   Sun J, 2009, LECT NOTES COMPUT SC, V5643, P709, DOI 10.1007/978-3-642-02658-4_59
   Tel G., 2000, Introduction to Distributed Algorithms, V2nd
   ter Beek MH, 2008, LECT NOTES COMPUT SC, V4916, P133
   Vardi MY, 2007, LECT NOTES COMPUT SC, V4349, P137
   Viry P, 2002, THEOR COMPUT SCI, V285, P487, DOI 10.1016/S0304-3975(01)00366-8
   Völzer H, 2005, LECT NOTES COMPUT SC, V3653, P458, DOI 10.1007/11539452_35
   Younes HLS, 2006, INFORM COMPUT, V204, P1368, DOI 10.1016/j.ic.2006.05.002
NR 74
TC 26
Z9 27
U1 0
U2 5
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR 7
PY 2015
VL 99
BP 193
EP 234
DI 10.1016/j.scico.2014.02.006
PG 42
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CA5PI
UT WOS:000348959900007
DA 2024-07-18
ER

PT J
AU Majster-Cederbaum, M
   Semmelrock, N
AF Majster-Cederbaum, Mila
   Semmelrock, Nils
TI A basis for compositionally ensuring safety properties and its
   connection to relational algebraic operators
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Cooperating systems; Compositional verification; System properties;
   Database theory
ID DEADLOCK-FREEDOM; COMPONENT; SYSTEMS
AB In this paper we report about an approach to establish safety properties of cooperating systems in polynomial time, the state space of which can be exponentially large in the number of cooperating subsystems. It consists of constructing a family of so-called inducers of a system and the reduction of these by an operator we call Edge-Match. Furthermore, we draw a connection between our approach and the theory of relational databases. Aside from pointing out an interesting connection between these fields we use this connection to apply results from the theory of relational databases to our approach. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Majster-Cederbaum, Mila; Semmelrock, Nils] Informat Univ Mannheim, Inst Comp Sci & Business, Mannheim, Germany.
RP Semmelrock, N (corresponding author), Informat Univ Mannheim, Inst Comp Sci & Business, Mannheim, Germany.
EM mcb@informatik.uni-mannheim.de; nils.semmelrock@gmx.net
CR [Anonymous], 1991, International Conference on Very Large Scale Integration
   [Anonymous], 1983, The theory of relational databases
   Attie PC, 2005, LECT NOTES COMPUT SC, V3385, P465
   Baier C, 2008, PRINCIPLES OF MODEL CHECKING, P1
   BEERI C, 1983, J ACM, V30, P479, DOI 10.1145/2402.322389
   Bensalem S, 2008, LECT NOTES COMPUT SC, V5311, P64, DOI 10.1007/978-3-540-88387-6_7
   Bernholtz O., 1994, LECT NOTES COMPUTER, P142
   Bonakdarpour B, 2011, SYM REL DIST SYST, P265, DOI 10.1109/SRDS.2011.39
   BRYANT RE, 1986, IEEE T COMPUT, V35, P677, DOI 10.1109/TC.1986.1676819
   CHENG A, 1995, THEOR COMPUT SCI, V147, P117, DOI 10.1016/0304-3975(94)00231-7
   Godefroid P., 1992, P 3 INT WORKSH COMP, P332
   Gössler G, 2005, SCI COMPUT PROGRAM, V55, P161, DOI 10.1016/j.scico.2004.05.014
   Graham H., 1980, UNIVERSAL RELATION
   HEGNER SJ, 1991, LECT NOTES COMPUT SC, V495, P243
   Kim YC, 1996, IEEE T SYST MAN CY B, V26, P599, DOI 10.1109/3477.517034
   Kupferman O, 2000, J ACM, V47, P312, DOI 10.1145/333979.333987
   Kupferman O., 1995, THESIS ISRAEL I TECH
   Lambertz Christian, 2012, Fundamentals of Software Engineering. 4th IPM International Conference, FSEN 2011. Revised Selected Papers, P64, DOI 10.1007/978-3-642-29320-7_5
   Lang F, 2006, LECT NOTES COMPUT SC, V4229, P159
   LEE TT, 1988, IEEE T SOFTWARE ENG, V14, P184, DOI 10.1109/32.4637
   Majster-Cederbaum M, 2008, P 8 ACM INT C EMB SO, P199, DOI DOI 10.1145/1450058.1450085
   Majster-Cederbaum M, 2008, LECT NOTES COMPUT SC, V5160, P216, DOI 10.1007/978-3-540-85762-4_15
   Majster-Cederbaum M, 2007, LECT NOTES COMPUT SC, V4362, P888
   Majster-Cederbaum M, 2010, ELECTRON NOTES THEOR, V263, P197, DOI 10.1016/j.entcs.2010.05.012
   Majster-Cederbaum M, 2008, ELECTRON NOTES THEOR, V215, P57, DOI 10.1016/j.entcs.2008.06.021
   Majster-Cederbaum M, 2009, LECT NOTES COMPUT SC, V5797, P189, DOI 10.1007/978-3-642-04420-5_18
   Moerkotte G., 2006, VLDB, P930
   Pnueli A., 1979, Semantics of Concurrent Computations, P1, DOI 10.1007/BFb0022460
   Semmelrock N., 2013, THESIS U MANNHEIM
   Vardi MY, 1998, THIRTEENTH ANNUAL IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, PROCEEDINGS, P394, DOI 10.1109/LICS.1998.705674
   Yannakakis M., 1981, Proceedings of the Seventh International Conference on Very Large Data Bases, P82
   Yu C. T., 1979, Proceedings of COMPSAC the IEEE Computer Society's Third International Computer Software and Applications Conference, P306
NR 32
TC 0
Z9 0
U1 1
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 1
PY 2015
VL 98
BP 516
EP 530
DI 10.1016/j.scico.2014.07.006
PN 4
PG 15
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AY7LJ
UT WOS:000347741400004
OA Bronze
DA 2024-07-18
ER

PT J
AU Parízek, P
   Lhoták, O
AF Parizek, Pavel
   Lhotak, Ondrej
TI Model checking of concurrent programs with static analysis of field
   accesses
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Software model checking; Concurrency; Field accesses; Immutability;
   Static analysis
ID POINTS-TO ANALYSIS; DEPENDENCE; REDUCTION; EFFICIENT
AB Systematic exploration of all possible thread interleavings is a popular approach to detect errors in multi-threaded programs. A common strategy is to use a partial order reduction technique and perform a non-deterministic thread scheduling choice only when the next instruction to be executed may possibly read or modify the global state. However, some verification frameworks and software model checkers, including Java Pathfinder (JPF), construct the program state space on-the-fly during traversal. The partial order reduction technique built into such a tool can use only the information available in the current state to determine whether the execution of a given instruction is globally-relevant. For example, the reduction technique has to make a thread choice at every field access on a heap object reachable from multiple threads, even in the case of fields that are really accessed only by a single thread during program execution, because it does not have any information about what may happen in the future after a particular state. These conservative decisions cause many redundant thread choices.
   We propose static analyses that identify globally-relevant field accesses more precisely. For each program state, the analyses give information about field accesses that may occur in the future after the given state. The state space traversal algorithm can use this information to soundly avoid creating unnecessary thread choices, and thus to reduce the number of thread interleavings that must be explored to cover all distinct behaviors of the given program. We implemented the proposed analyses using WALA and integrated them with JPF. Results of experiments on several Java programs show that the static analyses greatly improve the performance and scalability of JPF. In particular, it is now possible to check more complex programs than before in reasonable time. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Parizek, Pavel] Charles Univ Prague, Dept Distributed & Dependable Syst, CR-11636 Prague 1, Czech Republic.
   [Lhotak, Ondrej] Univ Waterloo, David R Cheriton Sch Comp Sci, Waterloo, ON N2L 3G1, Canada.
C3 University of Waterloo
RP Parízek, P (corresponding author), Charles Univ Prague, Dept Distributed & Dependable Syst, CR-11636 Prague 1, Czech Republic.
EM parizek@d3s.mff.cuni.cz; olhotak@uwaterloo.ca
RI Parizek, Pavel/I-8943-2017
OI Parizek, Pavel/0000-0003-0714-7446
FU Grant Agency of the Czech Republic [13-12121P]; Natural Sciences and
   Engineering Research Council of Canada [RGPIN-327241-2009,
   RGPAS-380440-2009]
FX This work was partially supported by the Grant Agency of the Czech
   Republic project 13-12121P, and partially supported by the Natural
   Sciences and Engineering Research Council of Canada grants
   RGPIN-327241-2009 and RGPAS-380440-2009. We would also like to thank Jan
   Vitek and Tomas Kalibera for suggesting the idea that we realized in the
   field access analysis, and Peter Mehlitz for his timely help with
   configuring and extending Java Pathfinder.
CR Adamek J., 2006, COMPONENT RELIABILIT
   Agarwal R., 2005, ASE, P233
   Andersen L. O., 1994, Ph.D. thesis
   [Anonymous], 1996, LNCS, DOI DOI 10.1007/3-540-60761-7
   Artzi Shay., 2007, Proc. ASE, P104
   Brat G, 2001, 16TH ANNUAL INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING (ASE 2001), PROCEEDINGS, P262, DOI 10.1109/ASE.2001.989812
   Bruneton E, 2006, SOFTWARE PRACT EXPER, V36, P1257, DOI 10.1002/spe.767
   Bulej L, 2008, LECT NOTES COMPUT SC, V5153, P357
   Chen J., 2007, Proceedings of International Conference on Automated Software Engineering, P313
   Cherem Sigmund., 2006, ISMM 06 P 2006 INT S, P138
   Choi JD, 2002, ACM SIGPLAN NOTICES, V37, P258, DOI 10.1145/543552.512560
   Clarke Edmund M., 2001, Model Checking
   de Brugh NHMA, 2009, LECT NOTES COMPUT SC, V5505, P170, DOI 10.1007/978-3-642-00768-2_15
   Dwyer MB, 2004, FORM METHOD SYST DES, V25, P199, DOI 10.1023/B:FORM.0000040028.49845.67
   Engler D., 2003, Operating Systems Review, V37, P237, DOI 10.1145/1165389.945468
   Flanagan C, 2005, ACM SIGPLAN NOTICES, V40, P110, DOI 10.1145/1047659.1040315
   Gueta G, 2007, LECT NOTES COMPUT SC, V4595, P95
   Guyer SZ, 2006, ACM SIGPLAN NOTICES, V41, P364, DOI 10.1145/1133981.1134024
   Kahlon V, 2009, LECT NOTES COMPUT SC, V5505, P124, DOI 10.1007/978-3-642-00768-2_12
   Kalibera Tomas., 2009, Proceedings of the 7th International Workshop on Java Technologies for Real-Time and Embedded Systems, P41, DOI DOI 10.1145/1620405.1620412
   Krinke J, 1998, ACM SIGPLAN NOTICES, V33, P35, DOI 10.1145/277633.277638
   Lhoták O, 2003, LECT NOTES COMPUT SC, V2622, P153
   Liang DL, 1998, PROC IEEE INT CONF S, P358, DOI 10.1109/ICSM.1998.738527
   Milanova A, 2005, ACM T SOFTW ENG METH, V14, P1, DOI 10.1145/1044834.1044835
   Muchnick S., 1997, ADV COMPILER DESIGN
   Musuvathi M., 2008, Proceedings of the 8th USENIX conference on Operating systems design and implementation, OSDI'08, P267
   Naeem NA, 2011, LECT NOTES COMPUT SC, V6601, P82, DOI 10.1007/978-3-642-19861-8_6
   Naik M, 2007, ACM SIGPLAN NOTICES, V42, P327, DOI 10.1145/1190215.1190265
   Naik M, 2006, ACM SIGPLAN NOTICES, V41, P308, DOI 10.1145/1133981.1134018
   Naik M, 2009, PROC INT CONF SOFTW, P386, DOI 10.1109/ICSE.2009.5070538
   Nguyen VY, 2009, LECT NOTES COMPUT SC, V5505, P201, DOI 10.1007/978-3-642-00768-2_20
   Nystrom EM, 2004, LECT NOTES COMPUT SC, V3148, P165
   Parizek P., 2011, 2011 26th IEEE/ACM International Conference on Automated Software Engineering, P93, DOI 10.1109/ASE.2011.6100154
   Qadeer S., 2004, JOINT CAV ISSTA SPEC
   Ranganath V.P., 2006, THESIS KANSAS STATE
   Ranganath VP, 2004, LECT NOTES COMPUT SC, V2985, P39
   Rountev A, 2004, PROC IEEE INT CONF S, P82, DOI 10.1109/ICSM.2004.1357793
   Ruf E, 2000, ACM SIGPLAN NOTICES, V35, P208, DOI 10.1145/358438.349327
   Salcianu A, 2005, LECT NOTES COMPUT SC, V3385, P199
   Sridharan M, 2005, ACM SIGPLAN NOTICES, V40, P59, DOI 10.1145/1103845.1094817
   Sridharan M, 2006, ACM SIGPLAN NOTICES, V41, P387, DOI 10.1145/1133981.1134027
   Stoller S. D., 2002, International Journal on Software Tools for Technology Transfer, V4, P71, DOI 10.1007/s10009-002-0077-2
   Unkel C, 2008, ACM SIGPLAN NOTICES, V43, P183, DOI 10.1145/1328897.1328463
   Yang Y, 2008, LECT NOTES COMPUT SC, V5156, P288, DOI 10.1007/978-3-540-85114-1_20
   Zhang WL, 2007, J SOFTW MAINT EVOL-R, V19, P231, DOI 10.1002/smr.351
NR 45
TC 3
Z9 3
U1 0
U2 6
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 1
PY 2015
VL 98
BP 735
EP 763
DI 10.1016/j.scico.2014.10.008
PN 4
PG 29
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AY7LJ
UT WOS:000347741400012
OA hybrid
DA 2024-07-18
ER

PT J
AU Peck, MM
   Bouraqadi, N
   Fabresse, L
   Denker, M
   Teruel, C
AF Peck, Mariano Martinez
   Bouraqadi, Noury
   Fabresse, Luc
   Denker, Marcus
   Teruel, Camille
TI Ghost: A uniform and general-purpose proxy implementation
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Object-oriented programming and design; Message passing control; Proxy;
   Interception; Smalltalk
ID DESIGN PRINCIPLES; DYNAMIC PROXIES; MEMORY; JAVA
AB A proxy object is a surrogate or placeholder that controls access to another target object. Proxy objects are a widely used solution for different scenarios such as remote method invocation, future objects, behavioral reflection, object databases, inter-language communications and bindings, access control, lazy or parallel evaluation, security, among others.
   Most proxy implementations support proxies for regular objects but are unable to create proxies for objects with an important role in the runtime infrastructure such as classes or methods. Proxies can be complex to install, they can have a significant overhead, they can be limited to certain kind of classes, etc. Moreover, proxy implementations are often not stratified and there is no clear separation between proxies (the objects intercepting messages) and handlers (the objects handling interceptions).
   In this paper, we present Ghost: a uniform and general-purpose proxy implementation for the Pharo programming language. Ghost provides low memory consuming proxies for regular objects as well as for classes and methods.
   When a proxy takes the place of a class, it intercepts both the messages received by the class and the lookup of methods for messages received by its instances. Similarly, if a proxy takes the place of a method, then the method execution is intercepted too.(C) 2014 Elsevier B.V. All rights reserved.
C1 [Peck, Mariano Martinez; Denker, Marcus; Teruel, Camille] Univ Lille 1, Inria Lille Nord Europe, RMoD Project Team, F-59655 Villeneuve Dascq, France.
   [Peck, Mariano Martinez; Bouraqadi, Noury; Fabresse, Luc] Mines Telecom Inst, Mines Douai, France.
C3 Universite de Lille
RP Denker, M (corresponding author), Univ Lille 1, Inria Lille Nord Europe, RMoD Project Team, F-59655 Villeneuve Dascq, France.
EM marianopeck@gmail.com; noury.bouraqadi@mines-douai.fr;
   luc.fabresse@mines-douai.fr; marcus.denker@inria.fr;
   camille.teruel@inria.fr
RI Fabresse, Luc/AAH-9286-2020
OI Fabresse, Luc/0000-0002-2223-7258; Ducasse,
   Stephane/0000-0001-6070-6599; Bouraqadi, Noury/0000-0001-6459-4934
FU Ministry of Higher Education and Research, Nord-Pas de Calais Regional
   Council; FEDER through the 'Contrat de Projets Etat Region (CPER)';
   Cutter ANR project [ANR-10-BLAN-0219]; MEALS Marie Curie Actions program
   FP7 [295261]; Agence Nationale de la Recherche (ANR) [ANR-10-BLAN-0219]
   Funding Source: Agence Nationale de la Recherche (ANR)
FX This work was supported by Ministry of Higher Education and Research,
   Nord-Pas de Calais Regional Council, FEDER through the 'Contrat de
   Projets Etat Region (CPER) 2007-2013', the Cutter ANR project,
   ANR-10-BLAN-0219 and the MEALS Marie Curie Actions program
   FP7-PEOPLE-2011-IRSES MEALS (no. 295261).
CR Arnaud Jean-Baptiste, 2010, P 48 INT C OBJ MOD C
   Austin TH, 2011, ACM SIGPLAN NOTICES, V46, P921, DOI 10.1145/2076021.2048136
   Barrett T, 2003, DR DOBBS J, V28, P18
   Barrett Tom, 2003, DR DOBBS J SOFTW TOO, V28, P20
   Barrett Tom, 2003, DR DOBBS J SOFTW TOO, V28, P22
   Barrett Tom, 2003, DR DOBBS J SOFTW TOO, V28, P24
   Barrett Tom, 2003, DR DOBBS J SOFTW TOO, V28, P26
   BENNETT JK, 1987, SIGPLAN NOTICES, V22, P318, DOI 10.1145/38807.38836
   Black A.P., 2009, PHARO EXAMPLE
   Bond MD, 2008, ACM SIGPLAN NOTICES, V43, P109, DOI 10.1145/1449955.1449774
   Bracha G, 2004, ACM SIGPLAN NOTICES, V39, P331, DOI 10.1145/1035292.1029004
   Brant J., 1998, ECOOP'98 - Object-Oriented Programming. 12th European Conference. Proceedings, P396, DOI 10.1007/BFb0054101
   Carr R. W., 1981, Operating Systems Review, V15, P87, DOI 10.1145/1067627.806596
   Chu Wesley W., 1972, P AFIPS FJCC, P597, DOI DOI 10.1145/1479992.1480077
   Denning Peter J., 1970, ACM Computing Surveys, V2, P153, DOI DOI 10.1145/356571.356573
   Dias M, 2014, SOFTWARE PRACT EXPER, V44, P433, DOI 10.1002/spe.2136
   Ducasse S, 1999, J OBJECT-ORIENT PROG, V12, P39
   Eugster P, 2006, ACM SIGPLAN NOTICES, V41, P139, DOI 10.1145/1167515.1167485
   Gamma E., 1993, ECOOP '93 - Object-Oriented Programming. 7th European Conference Proceedings, P406
   Hassoun Y, 2005, SOFTWARE PRACT EXPER, V35, P75, DOI 10.1002/spe.629
   KAEHLER T, 1986, SIGPLAN NOTICES, V21, P87, DOI 10.1145/960112.28707
   Kiczales G, 1997, LECT NOTES COMPUT SC, V1241, P220, DOI 10.1007/BFb0053381
   Kiczales G., 1991, The Art of the Metaobject Protocol
   Koster R, 2000, LECT NOTES COMPUT SC, V1890, P202
   Lieberman Henry, 1986, OBJECT ORIENTED SYST
   Lipton Paul, 1999, JAVA PROXIES DATABAS
   MCCULLOUGH PL, 1987, SIGPLAN NOTICES, V22, P331, DOI 10.1145/38807.38837
   Miranda Eliot, 2011, P VMIL 2011
   Oracle, JAV DYN PROX JAV PLA
   PASCOE GA, 1986, SIGPLAN NOTICES, V21, P341, DOI 10.1145/960112.28731
   Peck MM, 2013, J OBJECT TECHNOL, V12, DOI 10.5381/jot.2013.12.1.a2
   Peck Mariano Martinez, 2011, J COMPUT LANGUAGES S, V38, P1
   Peck Mariano Martinez, 2012, THESIS U LILLE
   Peck Mariano Martinez, 2011, P ESUG INT WORKSH SM
   Peck Mariano Martinez, 2011, P SMALLT 2011 INT WO
   Pratikakis P, 2004, ACM SIGPLAN NOTICES, V39, P206, DOI 10.1145/1035292.1028994
   Santos Nuno, 2002, FRAMEWORK SMART PROX
   Shapiro M., 1986, 6th International Conference on Distributed Computing Systems Proceedings (Cat. No. 86CH2293-9), P198
   Thai T., 2001, NET FRAMEWORK ESSENT
   Van Cutsem T, 2013, LECT NOTES COMPUT SC, V7920, P154, DOI 10.1007/978-3-642-39038-8_7
   Van Cutsem T, 2010, ACM SIGPLAN NOTICES, V45, P59, DOI 10.1145/1899661.1869638
   Wang NB, 2001, 6TH USENIX CONFERENCE OF OBJECT-ORIENTED TECHNOLOGIES AND SYSTEMS (COOTS 01), P103
   Welch Ian, 1999, DALANG REFLECTIVE EX
NR 43
TC 6
Z9 6
U1 0
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 1
PY 2015
VL 98
SI SI
BP 339
EP 359
DI 10.1016/j.scico.2014.05.015
PN 3
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AY7LH
UT WOS:000347741200003
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Fraikin, B
   Frappier, M
   St-Denis, R
AF Fraikin, Benoit
   Frappier, Marc
   St-Denis, Richard
TI Supervisory control theory with ALLOY
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE ALLOY; Supervisory control theory; SAT solver; KODKOD
ID STATE-FEEDBACK-CONTROL; HIERARCHICAL CONTROL; DISCRETE; SUBLANGUAGE
AB Scientific literature reveals that the symbolic representation techniques underlying some formal methods are useful in verifying properties or synthesizing parts of large discrete event systems. They involve, however, encoding complex schemata and fine-tuning heuristic parameters in order to translate specific problems into efficient BDD- or SAT-based representations. This approach may be too costly when the main goal is to explore a theory, use simulation to understand its underlying concepts and computation procedures, and conduct experiments by applying them to problems in different fields as the theory evolves over time. To achieve this goal, this paper investigates the use of ALLOY in modeling and prototyping varying fragments of the supervisory control theory, including the verification of nontrivial properties such as controllability, normality and observational equivalence. It also shows how to apply abstract models for synthesizing optimal supervisors and reports on an experiment suggesting that ALLOY can be used to synthesize supervisors for concrete systems using hierarchical decomposition. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Fraikin, Benoit; Frappier, Marc; St-Denis, Richard] Univ Sherbrooke, Dept Informat, Sherbrooke, PQ J1K 2R1, Canada.
C3 University of Sherbrooke
RP St-Denis, R (corresponding author), Univ Sherbrooke, Dept Informat, Sherbrooke, PQ J1K 2R1, Canada.
EM Benoit.Fraikin@USherbrooke.ca; Marc.Frappier@USherbrooke.ca;
   Richard.St-Denis@USherbrooke.ca
RI St.Denis, Richard D/C-8997-2012
OI St-Denis, Richard/0000-0002-4099-7445
FU Natural Sciences and Engineering Research Council of Canada (NSERC)
FX The research described in this paper was supported in part by the
   Natural Sciences and Engineering Research Council of Canada (NSERC).
CR Akesson K, 2006, WODES 2006: EIGHTH INTERNATIONAL WORKSHOP ON DISCRETE EVENT SYSTEMS, PROCEEDINGS, P384
   [Anonymous], 1981, SCI PROGRAMMING, DOI DOI 10.1007/978-1-4612-5983-1
   BARBEAU M, 1995, IEEE T AUTOMAT CONTR, V40, P699, DOI 10.1109/9.376106
   Behnke R, 1998, LECT NOTES COMPUT SC, V1382, P318, DOI 10.1007/BFb0053599
   Bertoli P, 2010, ARTIF INTELL, V174, P316, DOI 10.1016/j.artint.2009.12.002
   Beyer D., 2006, 28th International Conference on Software Engineering Proceedings, P807, DOI 10.1145/1134285.1134420
   Bherer H, 2009, DISCRETE EVENT DYN S, V19, P213, DOI 10.1007/s10626-008-0040-9
   Cao YZ, 2007, IEEE T SYST MAN CY B, V37, P410, DOI 10.1109/TSMCB.2006.883429
   Cassandras C. G., 2008, INTRO TODISCRETE EVE
   Chakib H, 2011, IEEE T AUTOMAT CONTR, V56, P2608, DOI 10.1109/TAC.2011.2128730
   CHUNG SL, 1992, IEEE T AUTOMAT CONTR, V37, P1921, DOI 10.1109/9.182478
   Claessen K, 2009, DISCRETE EVENT DYN S, V19, P495, DOI 10.1007/s10626-009-0081-8
   Cote Daniel, 2012, Formal Aspects of Component Software. 7th International Workshop, FACS 2010. Revised Selected Papers, P163, DOI 10.1007/978-3-642-27269-1_10
   Côté D, 2013, IEEE T CONTR SYST T, V21, P1570, DOI 10.1109/TCST.2012.2209178
   Côté D, 2011, LECT NOTES COMPUT SC, V6959, P52, DOI 10.1007/978-3-642-24431-5_6
   De Giacomo G, 2013, ARTIF INTELL, V196, P106, DOI 10.1016/j.artint.2012.12.001
   Dewar Robert, 2013, LINEAR OPERATORS COM, P39
   Dragert C., 2008, SIGSOFT '08/FSE-16, P146
   Feng L, 2006, WODES 2006: EIGHTH INTERNATIONAL WORKSHOP ON DISCRETE EVENT SYSTEMS, PROCEEDINGS, P388
   Fraikin Benoit, 2012, Abstract State Machines, Alloy, B, VDM, and Z. Proceedings Third International Conference, ABZ 2012, P94, DOI 10.1007/978-3-642-30885-7_7
   HAREL D, 1987, SCI COMPUT PROGRAM, V8, P231, DOI 10.1016/0167-6423(87)90035-9
   Hill RC, 2010, AUTOMATICA, V46, P1152, DOI 10.1016/j.automatica.2010.04.002
   Hopcroft J.E., 1979, Introduction to Automata Theory, Languages, and Computation
   Jackson D, 2012, SOFTWARE ABSTRACTIONS: LOGIC, LANGUAGE, AND ANALYSIS, P1
   Kabanza F, 1997, ARTIF INTELL, V95, P67, DOI 10.1016/S0004-3702(97)00031-3
   KUMAR R, 1993, IEEE T AUTOMAT CONTR, V38, P232, DOI 10.1109/9.250512
   Kumar R., 1995, MODELING CONTROL LOG
   Kumar R, 2007, IEEE T AUTOMAT CONTR, V52, P1783, DOI 10.1109/TAC.2007.906158
   Leuschel M, 2003, LECT NOTES COMPUT SC, V2805, P855
   MA C, 2005, LECT NOTES CONTROL I, V317
   Milner R., 1989, Communication and concurrency
   Miremadi S, 2012, IEEE T CONTR SYST T, V20, P1421, DOI 10.1109/TCST.2011.2167150
   Montaghami Vajih, 2012, Abstract State Machines, Alloy, B, VDM, and Z. Proceedings Third International Conference, ABZ 2012, P122, DOI 10.1007/978-3-642-30885-7_9
   Nazeem A, 2011, IEEE T AUTOMAT CONTR, V56, P1818, DOI 10.1109/TAC.2010.2095612
   Plagge Daniel, 2012, FM 2012: Formal Methods. Proceedings of the 18th International Symposium, P372, DOI 10.1007/978-3-642-32759-9_31
   RAMADGE PJ, 1987, SIAM J CONTROL OPTIM, V25, P1202, DOI 10.1137/0325066
   RAMADGE PJG, 1989, P IEEE, V77, P81, DOI 10.1109/5.21072
   Schmidt K, 2008, IEEE T AUTOMAT CONTR, V53, P2252, DOI 10.1109/TAC.2008.2006817
   Su R, 2010, IEEE T AUTOMAT CONTR, V55, P1627, DOI 10.1109/TAC.2010.2042342
   Takai S, 1997, INT J CONTROL, V67, P553, DOI 10.1080/002071797224072
   Takai S, 1998, INT J CONTROL, V70, P541, DOI 10.1080/002071798222190
   TAKAI S, 1995, IEEE T AUTOMAT CONTR, V40, P1950, DOI 10.1109/9.471222
   Tortak E, 2007, LECT NOTES COMPUT SC, V4424, P632
   Wong KC, 1996, DISCRETE EVENT DYN S, V6, P241, DOI 10.1007/BF01797154
   Wong KC, 2004, DISCRETE EVENT DYN S, V14, P55, DOI 10.1023/B:DISC.0000005010.55515.27
   Wonham W.M., 2013, 1636F1637S ECE U TOR
   WONHAM WM, 1987, SIAM J CONTROL OPTIM, V25, P637, DOI 10.1137/0325036
NR 47
TC 5
Z9 5
U1 1
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 15
PY 2014
VL 94
SI SI
BP 217
EP 237
DI 10.1016/j.scico.2014.04.016
PN 2
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AS1JW
UT WOS:000344038500009
OA Bronze
DA 2024-07-18
ER

PT J
AU Brosig, F
   Huber, N
   Kounev, S
AF Brosig, Fabian
   Huber, Nikolaus
   Kounev, Samuel
TI Architecture-level software performance abstractions for online,
   performance prediction
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Online performance prediction; Architecture-level performance
   meta-model; Parameter and context dependencies
ID COMPONENT-BASED SYSTEMS; DESIGN; MODEL
AB Modern service-oriented enterprise systems have increasingly complex and dynamic loosely-coupled architectures that often exhibit poor performance and resource efficiency and have high operating costs. This is due to the inability to predict at run-time the effect of workload changes on performance-relevant application-level dependencies and adapt the system configuration accordingly. Architecture-level performance models provide a powerful tool for performance prediction, however, current approaches to modeling the context of software components are not suitable for use at run-time. In this paper, we analyze typical online performance prediction scenarios and propose a performance metamodel for (i) expressing and resolving parameter and context dependencies, (ii) modeling service abstractions at different levels of granularity and (iii) modeling the deployment of software components in complex resource landscapes. The presented meta-model is a subset of the Descartes Meta-Model (DMM) for online performance prediction, specifically designed for use in online scenarios. We motivate and validate our approach in the context of realistic and representative online performance prediction scenarios based on the SPECjEnterprise2010 standard benchmark. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Brosig, Fabian; Huber, Nikolaus; Kounev, Samuel] Karlsruhe Inst Technol, D-76021 Karlsruhe, Germany.
C3 Helmholtz Association; Karlsruhe Institute of Technology
RP Brosig, F (corresponding author), Karlsruhe Inst Technol, Fasanengarten 5, D-76021 Karlsruhe, Germany.
EM fabian.brosig@kit.edu
FU German Research Foundation (DFG) [KO 34456-1]
FX This work was funded by the German Research Foundation (DFG) under grant
   No. KO 34456-1.
CR [Anonymous], P 8 INT ACM SIGSOFT
   [Anonymous], 2011, SPECJENTERPRISE2010
   [Anonymous], 2010, P 18 ACM SIGSOFT INT
   [Anonymous], PERFORMANCE EVALUATI
   Balsamo S, 2004, IEEE T SOFTWARE ENG, V30, P295, DOI 10.1109/TSE.2004.9
   Becker S, 2009, J SYST SOFTWARE, V82, P3, DOI 10.1016/j.jss.2008.03.066
   Bertolino A, 2004, LECT NOTES COMPUT SC, V3054, P233
   Bondarev E., EUROMICRO, P40
   Brosig F., 26 INT C AUT SOFTW E
   Brosig F., 2012, P 15 ACM SIGSOFT INT
   Eskenazi E., P 7 INT S COMP BAS S
   Gilmore S, 2005, LECT NOTES COMPUT SC, V3670, P200
   Grassi V, 2007, J SYST SOFTWARE, V80, P528, DOI 10.1016/j.jss.2006.07.023
   Hamlet D, 2009, ACM T SOFTW ENG METH, V18, DOI 10.1145/1525880.1525885
   Huber Nikolaus, 2011, Proceedings of the 1st International Conference on Cloud Computing and Services Science. CLOSER 2011, P563
   Huber N., 9 IEEE INT C E BUS E
   Jung G., DISTR COMP SYST ICDC, P62
   Kounev S, 2012, TECHNICAL REPORT
   Kounev S., 2010, P 7 IEEE INT C SERV
   Kounev S, 2006, IEEE T SOFTWARE ENG, V32, P486, DOI 10.1109/TSE.2006.69
   Li J, 2009, CLOUD: 2009 ICSE WORKSHOP ON SOFTWARE ENGINEERING CHALLENGES OF CLOUD COMPUTING, P15, DOI 10.1109/CLOUD.2009.5071528
   Menascé DA, 2000, IEEE T SOFTWARE ENG, V26, P1066, DOI 10.1109/32.881718
   Nou R., 2009, J SYSTEMS SOFTWARE, V82
   Object Management Group (OMG), 2005, UML SPT UML PROF SCH
   *OMG, 2006, UML PROF MOD AN REAL
   Pacifici G., 2008, PERFORMANCE EVALUATI
   Padala P, 2009, EUROSYS'09: PROCEEDINGS OF THE FOURTH EUROSYS CONFERENCE, P13
   PETRIU DB, 2007, SOFTWARE SYSTEMS MOD, V6
   Sitaraman M., 2001, Software Engineering Notes, V26, P3, DOI 10.1145/379377.375223
   Smith C.U., 2005, P 5 INT WORKSHOP SOF, P87
   Xiuping Wu, 2004, Software Engineering Notes, V29, P290, DOI 10.1145/974043.974089
NR 31
TC 20
Z9 22
U1 1
U2 16
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 15
PY 2014
VL 90
BP 71
EP 92
DI 10.1016/j.scico.2013.06.004
PN B
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AK4IK
UT WOS:000338387900002
DA 2024-07-18
ER

PT J
AU Bruguera, JD
AF Bruguera, Javier D.
TI Optimizing the representation of intervals
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Interval arithmetic; Interval representation; Floating-point
   representation
AB A representation of intervals is proposed that, instead of both endpoints, uses the lower endpoint and the width of the interval. This proposed representation is more efficient since both endpoints have many corresponding bits that are equal. Consequently, the width of the interval can be represented with a smaller number of bits than an endpoint, resulting in a better utilization of the number of bits available. Considering the case in which the total number of bits is the same as for the traditional representation (say, two double-precision floating-point numbers) we determine the number of bits of the lower endpoint and of the width so that the rounding error is minimized. The use of this combination of bits would result in a variable representation, which is difficult to implement. Alternatively, it is possible to use a fixed partition that gives good results for a variety of applications.
   The proposed representation is evaluated for several computations. Using a total number of 128 bits to represent the interval we conclude that it produces intervals that are substantially narrower than those obtained with the traditional representation.
   Alternative implementations of the calculation of the width are proposed. The interval widths produced are shown to be very similar, so that the choice of the alternative can be made by considerations such as area and delay. (C) 2013 Elsevier B.V. All rights reserved.
C1 Univ Santiago de Compostela, Ctr Invest Tecnoloxias Informac CITIUS, Santiago De Compostela 15782, Spain.
C3 Universidade de Santiago de Compostela
RP Bruguera, JD (corresponding author), Univ Santiago de Compostela, Ctr Invest Tecnoloxias Informac CITIUS, Campus Vida, Santiago De Compostela 15782, Spain.
EM jd.bruguera@usc.es
FU Ministry of Science and Innovation of Spain - European Regional
   Development Fund (ERDF/FEDER) [TIN2010-17541]; Xunta de Galicia
   [CN2012/151]
FX This work is supported in part by Ministry of Science and Innovation of
   Spain, co-funded by the European Regional Development Fund (ERDF/FEDER),
   under contract TIN2010-17541, and by the Xunta de Galicia under contract
   CN2012/151.
CR AKKAS A, 2001, THESIS LEHIGH U
   Amaricai A, 2008, IEEE INT CONF ASAP, P19, DOI 10.1109/ASAP.2008.4580148
   [Anonymous], P SPIE C ADV SIGNAL
   [Anonymous], 1996, Accuracy and Stability of Numerical Algorithms
   [Anonymous], 1999, Developments in Reliable Computing, DOI DOI 10.1007/978-94-017-1247-7
   [Anonymous], SCI COMPUTING AUTOMA
   [Anonymous], 1995, C++ Toolbox for Verified Computing I, Basic Numerical Problems
   [Anonymous], QUALITE CALCULS ORDI
   [Anonymous], THESIS LEHIGH U
   [Anonymous], SCI COMPUTING VALIDA
   [Anonymous], BIT NUMERICAL MATH
   [Anonymous], THESIS U TEXAS AUSTI
   [Anonymous], SCI COMPUTING RESULT
   [Anonymous], MAPL 9 01
   BIVINS RL, 1977, IEEE T COMPUT, V26, P639, DOI 10.1109/TC.1977.1674896
   Chesneaux J.-M., 1994, Numerical Algorithms, V7, P129, DOI 10.1007/BF02140678
   Hickey T, 2001, J ACM, V48, P1038, DOI 10.1145/502102.502106
   Kearfott R.B., 1996, Applications of interval computations
   Langlois P, 2001, BIT, V41, P515, DOI 10.1023/A:1021919329342
   MAY RM, 1976, NATURE, V261, P459, DOI 10.1038/261459a0
   Schulte M. J., 1995, Proceedings. The International Conference on Application Specific Array Processors (Cat. No.95TB8098), P104, DOI 10.1109/ASAP.1995.522910
   Schulte MJ, 1996, APPL OPTIMIZAT, V3, P381
   Sofroniou M, 2005, J LOGIC ALGEBR PROGR, V64, P113, DOI 10.1016/j.jlap.2004.07.007
   Vignes J, 2004, NUMER ALGORITHMS, V37, P377, DOI 10.1023/B:NUMA.0000049483.75679.ce
   VIGNES J, 1988, MATH COMPUT SIMULAT, V30, P481, DOI 10.1016/0378-4754(88)90070-5
NR 25
TC 3
Z9 3
U1 0
U2 5
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 15
PY 2014
VL 90
SI SI
BP 21
EP 33
DI 10.1016/j.scico.2013.06.002
PN A
PG 13
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AK4II
UT WOS:000338387700003
OA Bronze
DA 2024-07-18
ER

PT J
AU Horne, R
   Sassone, V
AF Horne, Ross
   Sassone, Vladimiro
TI A verified algebra for read-write Linked Data
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 10th International Workshop on the Foundation of Coordination Languages
   and Software Architectures (FOCLASA)
CT 10th International Workshop on the Foundation of Coordination Languages
   and Software Architectures (FOCLASA)
CY SEP 10-10, 2011
CY SEP 10-10, 2011
CL Aachen, GERMANY
CL Aachen, GERMANY
DE Operational semantics; Bisimulation; Linked Data
ID KLEENE ALGEBRA; WEB; LOGIC; PROVENANCE; CALCULUS; MODEL
AB The aim of this work is to verify an algebra for high level languages for reading and writing Linked Data. Linked Data is raw data published on the Web and interlinked using a collection of standards. The main innovation is simply to use dereferenceable URIs as global identifiers in data, rather than a key local to a dataset This introduces significant challenges for managing data that is pulled from distributed sources over the Web. An algebra is an essential contribution to this application domain, for rewriting programs that read and write Linked Data.
   To verify the algebra, a syntax, operational semantics and proof technique are introduced. The syntax provides an abstract representation for a high level language that concisely captures queries and updates over Linked Data. The behaviour of the language is defined using a concise operational semantics. The natural notion of behavioural equivalence, contextual equivalence, is shown to coincide with the bisimulation proof technique. Bisimulation is used to verify that the algebra preserves the operational semantics, hence rewrites of programs using the algebra do not change their operational meaning. A novel combination of techniques is used to establish the correctness of the proof technique itself. (C) 2013 Published by Elsevier B.V.
C1 [Horne, Ross; Sassone, Vladimiro] Univ Southampton, Southampton SO9 5NH, Hants, England.
   [Horne, Ross] Kazakh British Tech Univ, Fac Informat Technol, Alma Ata, Kazakhstan.
C3 University of Southampton; Kazakh British Technical University
RP Horne, R (corresponding author), Kazakh British Tech Univ, Fac Informat Technol, Alma Ata, Kazakhstan.
EM ross.horne@gmail.com; vs@ecs.soton.ac.uk
OI Horne, Ross/0000-0003-0162-1901
FU EPSRC [EP/K003968/1] Funding Source: UKRI
CR Abouzeid A., 2009, PROC VLDB ENDOW, V2, P922, DOI [10.14778/1687627.1687731, DOI 10.14778/1687627.1687731]
   ABRAMSKY S, 1994, THEOR COMPUT SCI, V135, P5, DOI 10.1016/0304-3975(94)00103-0
   Abramsky S., 1993, Mathematical Structures in Computer Science, V3, P161, DOI 10.1017/S0960129500000189
   Alan Jeffrey, 2011, CEUR WORKSH P, P521
   [Anonymous], 1992, TEMPORAL LOGIC REACT, DOI DOI 10.1007/978-1-4612-0931-7
   [Anonymous], 2004, XML Schema Part 2: Datatypes
   [Anonymous], 1989, LECT NOTES COMPUT SC
   Backus J., 1959, IFIP Congress, P125
   BELLIN G, 1994, THEOR COMPUT SCI, V135, P11, DOI 10.1016/0304-3975(94)00104-9
   BERGSTRA JA, 1984, INFORM CONTROL, V60, P109, DOI 10.1016/S0019-9958(84)80025-X
   Berners-Lee T, 2006, INT J SEMANT WEB INF, V4, P1, DOI DOI 10.4018/JSWIS.2009081901
   Berners-Lee T, 2008, THEOR PRACT LOG PROG, V8, P249, DOI 10.1017/S1471068407003213
   Bistarelli S, 1997, J ACM, V44, P201, DOI 10.1145/256303.256306
   Bizer C, 2009, J WEB SEMANT, V7, P154, DOI 10.1016/j.websem.2009.07.002
   Bizer C, 2009, IEEE INTELL SYST, V24, P87, DOI 10.1109/MIS.2009.102
   Bugliesi M, 2005, INFORM COMPUT, V202, P39, DOI 10.1016/j.ic.2005.06.002
   Caires L, 2010, LECT NOTES COMPUT SC, V6269, P222, DOI 10.1007/978-3-642-15375-4_16
   Carroll JJ, 2005, J WEB SEMANT, V3, P247, DOI 10.1016/j.websem.2005.09.001
   Ciobanu G, 2012, ELECTRON P THEOR COM, P31, DOI 10.4204/EPTCS.91.3
   Conway J.H., 1971, Regular Algebra and Finite Machines
   Dean J, 2004, USENIX ASSOCIATION PROCEEDINGS OF THE SIXTH SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION (OSDE '04), P137
   Dezani-Ciancaglini M, 2012, THEOR COMPUT SCI, V464, P113, DOI 10.1016/j.tcs.2012.06.020
   Fielding R. T, 2002, ACM Transactions on Internet Technology (TOIT), V2, P115, DOI [DOI 10.1145/514183.514185, 10.1145/514183.514185]
   GALLIER J, 1993, THEOR COMPUT SCI, V110, P249, DOI 10.1016/0304-3975(93)90011-H
   GALLIER J, 1991, PR2RR9 DIG EQ CORP
   Gearon Paul, 2013, SPARQL 1 1 UPDATE RE
   Gentzen G, 1935, MATH Z, V39, P176, DOI 10.1007/BF01201353
   GIRARD JY, 1987, THEOR COMPUT SCI, V50, P1, DOI 10.1016/0304-3975(87)90045-4
   Green Todd J., 2007, PODS, DOI DOI 10.1145/1265530.1265535
   Guglielmi A, 2007, ACM T COMPUT LOG, V8, DOI 10.1145/1182613.1182614
   Harris S, 2013, SPARQL 1.1 Query Language
   Hartig O, 2009, LECT NOTES COMPUT SC, V5823, P293, DOI 10.1007/978-3-642-04930-9_19
   Hausenblas M, 2009, IEEE INTERNET COMPUT, V13, P68, DOI 10.1109/MIC.2009.79
   HEATH Tom, 2011, SYNTHESIS LECTURES S
   Hoare T, 2011, J LOGIC ALGEBR PROGR, V80, P266, DOI 10.1016/j.jlap.2011.04.005
   HODAS JS, 1994, INFORM COMPUT, V110, P327, DOI 10.1006/inco.1994.1036
   Horne R.J., 2011, THESIS U SOUTHAMPTON
   Horne R, 2011, ELECTRON PROC THEOR, P20, DOI 10.4204/EPTCS.58.2
   Horne Ross, 2011, LNCS, V7185, P242
   Klyne G, 2004, Resource description framework (RDF): Concepts and abstract syntax
   KOBAYASHI N, 1993, MIT PS LOG, P279
   KOZEN D, 1990, LECT NOTES COMPUT SC, V452, P26, DOI 10.1007/BFb0029594
   Kozen D, 1997, ACM T PROGR LANG SYS, V19, P427, DOI 10.1145/256167.256195
   Mallea A, 2011, LECT NOTES COMPUT SC, V7031, P421, DOI 10.1007/978-3-642-25073-6_27
   Merro M, 2005, J ACM, V52, P961, DOI 10.1145/1101821.1101825
   Merro M, 2002, ACM SIGPLAN NOTICES, V37, P71, DOI 10.1145/565816.503280
   MESEGUER J, 1992, THEOR COMPUT SCI, V96, P73, DOI 10.1016/0304-3975(92)90182-F
   MILNER R, 1992, LECT NOTES COMPUT SC, V623, P685
   MILNER R, 1992, INFORM COMPUT, V100, P1, DOI [10.1016/0890-5401(92)90008-4, 10.1016/0890-5401(92)90009-5]
   Milner Robin., 1993, LOGIC ALGEBRA SPECIF
   Moortgat M., 1996, Journal of Logic, Language and Information, V5, P349, DOI 10.1007/BF00159344
   Pérez J, 2006, LECT NOTES COMPUT SC, V4273, P30
   Plotkin Gordon D., 1981, FN19 DAIMI AARHUS U
   Pratt V., 2000, Mathematical Structures in Computer Science, V10, P525, DOI 10.1017/S0960129500003169
   Quilitz B, 2008, LECT NOTES COMPUT SC, V5021, P524
   Sangiorgi D, 1996, INFORM COMPUT, V131, P141, DOI 10.1006/inco.1996.0096
   Seaborne A, 2007, SPARQL UPDATE LANGUA
   Shadbolt N, 2012, IEEE INTELL SYST, V27, P16, DOI 10.1109/MIS.2012.23
   Stutz P, 2010, LECT NOTES COMPUT SC, V6496, P764, DOI 10.1007/978-3-642-17746-0_48
   Urbani J, 2009, LECT NOTES COMPUT SC, V5823, P634, DOI 10.1007/978-3-642-04930-9_40
   [No title captured]
NR 61
TC 4
Z9 4
U1 0
U2 7
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 1
PY 2014
VL 89
SI SI
BP 2
EP 22
DI 10.1016/j.scico.2013.07.005
PN A
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA AJ8BX
UT WOS:000337928800002
OA Green Accepted
DA 2024-07-18
ER

PT J
AU Mascarenhas, F
   Medeiros, S
   Ierusalimschy, R
AF Mascarenhas, Fabio
   Medeiros, Sergio
   Ierusalimschy, Roberto
TI On the relation between context-free grammars and parsing expression
   grammars
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Context-free grammars; Parsing expression grammars; LL(1); LL(k);
   Natural semantics
ID PARSER GENERATOR; FOUNDATION; ANTLR
AB Context-Free Grammars (CFGs) and Parsing Expression Grammars (PEGs) have several similarities and a few differences in both their syntax and semantics, but they are usually presented through formalisms that hinder a proper comparison. In this paper we present a new formalism for CFGs that highlights the similarities and differences between them. The new formalism borrows from PEGs the use of parsing expressions and the recognition-based semantics. We show how one way of removing non-determinism from this formalism yields a formalism with the semantics of PEGs. We also prove, based on these new formalisms, how LL(1) grammars define the same language whether interpreted as CFGs or as PEGs, and also show how strong-LL(k), right-linear, and LL-regular grammars have simple language-preserving translations from CFGs to PEGs. Once these classes of CFGs can be automatically translated to equivalent PEGs, we can reuse classic top-down grammars in PEG-based tools. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Mascarenhas, Fabio] Univ Fed Rio de Janeiro, Dept Comp Sci, Rio de Janeiro, Brazil.
   [Medeiros, Sergio] Univ Fed Rio Grande do Norte, Sch Sci & Technol, Natal, RN, Brazil.
   [Ierusalimschy, Roberto] Pontificia Univ Catolica Rio de Janeiro, Dept Comp Sci, Rio de Janeiro, Brazil.
C3 Universidade Federal do Rio de Janeiro; Universidade Federal do Rio
   Grande do Norte; Pontificia Universidade Catolica do Rio de Janeiro
RP Mascarenhas, F (corresponding author), Univ Fed Rio de Janeiro, Dept Comp Sci, Rio de Janeiro, Brazil.
EM fabiom@dcc.ufrj.br; sergiomedeiros@ect.ufrn.br; roberto@inf.puc-rio.br
RI Mascarenhas, Fabio/M-5731-2014; Queiroz de Medeiros, Sergio/O-6582-2018
OI Mascarenhas, Fabio/0000-0002-2970-7160; Queiroz de Medeiros,
   Sergio/0000-0002-0759-0926
CR [Anonymous], 1972, THEORY PARSING TRANS
   [Anonymous], 1979, INTRO AUTOMATA THEOR
   BIRMAN A, 1973, INFORM CONTROL, V23, P1, DOI 10.1016/S0019-9958(73)90851-6
   Clark C.F., 2005, MESSAGE COMP COMPILE
   de Medeiros S.Q., 2010, THESIS PUC RIO
   DEREMER FL, 1971, COMMUN ACM, V14, P453, DOI 10.1145/362619.362625
   Ford B, 2004, ACM SIGPLAN NOTICES, V39, P111, DOI 10.1145/982962.964011
   GRUNE D, 1991, PARSING TECHNIQUES P
   Jarzabek S., 1975, Information Processing Letters, V4, P31, DOI 10.1016/0020-0190(75)90009-5
   Johnstone A, 2011, LECT NOTES COMPUT SC, V6563, P42, DOI 10.1007/978-3-642-19440-5_4
   Kahn G., 1987, P S THEOR ASP COMP S, P22
   Knuth D. E., 1971, Acta Informatica, V1, P79, DOI 10.1007/BF00289517
   KNUTH DE, 1965, INFORM CONTROL, V8, P607, DOI 10.1016/S0019-9958(65)90426-2
   Medeiros Sergio, 2012, Programming Languages. Proceedings of the16th Brazilian Symposium, SBLP 2012, P27, DOI 10.1007/978-3-642-33182-4_4
   NIJHOLT A, 1982, RAIRO-INF THEOR APPL, V16, P387
   NIJHOLT A, 1980, INT J COMPUT MATH, V8, P303, DOI 10.1080/00207168008803216
   Parr T.J., 1994, P 5 INT C COMP CONST, P263
   Parr T, 2011, ACM SIGPLAN NOTICES, V46, P425, DOI 10.1145/1993316.1993548
   PARR TJ, 1995, SOFTWARE PRACT EXPER, V25, P789, DOI 10.1002/spe.4380250705
   Redziejowski RR, 2008, FUND INFORM, V85, P441
   Redziejowski RR, 2013, FUND INFORM, V128, P177, DOI 10.3233/FI-2013-940
   Redziejowski RR, 2009, FUND INFORM, V93, P325, DOI 10.3233/FI-2009-105
   Schmitz S., 2006, 13SRR200632FR U NIC
   Scott E, 2007, ACTA INFORM, V44, P427, DOI 10.1007/s00236-007-0054-z
   Scott E, 2013, SCI COMPUT PROGRAM, V78, P1828, DOI 10.1016/j.scico.2012.03.005
   Scott E, 2010, ELECTRON NOTES THEOR, V253, P177, DOI 10.1016/j.entcs.2010.08.041
   Tomita M., 1988, P 26 ANN M ASS COMP, P249
   Winskel G., 1993, The Formal Semantics of Programming Languages
NR 28
TC 11
Z9 11
U1 1
U2 6
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 1
PY 2014
VL 89
BP 235
EP 250
DI 10.1016/j.scico.2014.01.012
PN C
PG 16
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AJ8CB
UT WOS:000337929200002
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Fouh, E
   Karavirta, V
   Breakiron, DA
   Hamouda, S
   Hall, S
   Naps, TL
   Shaffer, CA
AF Fouh, Eric
   Karavirta, Ville
   Breakiron, Daniel A.
   Hamouda, Sally
   Hall, Simin
   Naps, Thomas L.
   Shaffer, Clifford A.
TI Design and architecture of an interactive eTextbook - The OpenDSA system
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE eLearning; eTextbook; Automated assessment; Algorithm visualization;
   Data structures and algorithms
AB The OpenDSA Project seeks to provide complete instructional materials for data structures and algorithms (DSA) courses. Our vision for a highly interactive eTextbook involves the use of many algorithm visualizations (AVs) and a wide range of interactive exercises with automated assessment. To realize this vision we require a mix of third-party and custom software components that make up a client/server-based web application. The massive amount content development required compels us to adopt an appropriate mix of open-source practices that will encourage broad contribution to the project. In this paper we describe the OpenDSA system architecture and the design goals that led to the present version of the system. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Fouh, Eric; Breakiron, Daniel A.; Hamouda, Sally; Shaffer, Clifford A.] Virginia Tech, Dept Comp Sci, Blacksburg, VA 24061 USA.
   [Karavirta, Ville] Aalto Univ, Sch Sci, Dept Comp Sci & Engn, Helsinki, Finland.
   [Hall, Simin] Virginia Tech, Dept Mech Engn, Blacksburg, VA 24061 USA.
   [Naps, Thomas L.] Univ Wisconsin, Dept Comp Sci, Oshkosh, WI 54901 USA.
C3 Virginia Polytechnic Institute & State University; Aalto University;
   Virginia Polytechnic Institute & State University; University of
   Wisconsin System
RP Shaffer, CA (corresponding author), Virginia Tech, Dept Comp Sci, Blacksburg, VA 24061 USA.
EM efouh@vt.edu; ville@villekaravirta.com; breakid@vt.edu; sallyh84@vt.edu;
   thall57@vt.edu; naps@uwosh.edu; shaffer@vt.edu
RI Fouh, Eric/AAM-4541-2020; Karavirta, Ville/E-8317-2012
OI Hamouda, Sally/0000-0003-2299-7983; Breakiron,
   Daniel/0000-0001-8097-2472
FU NSF [DUE-1139861, IIS-1258471]; Direct For Education and Human
   Resources; Division Of Undergraduate Education [1139861] Funding Source:
   National Science Foundation
FX This work was supported in part by NSF grants DUE-1139861 and
   IIS-1258471.
CR Andrade H, 2009, THEOR PRACT, V48, P12, DOI 10.1080/00405840802577544
   Breakiron D., 2013, THESIS VIRGINIA TECH
   Fenwick J., 2013, The changing face of computing: Proceedings of the 44th ACM Technical Symposium on Computer Science Education (SIGCSE'13), March 6-9, P135, DOI [DOI 10.1145/2445196.2445241, 10.1145/2445196.2445241]
   Fielding R. T, 2002, ACM Transactions on Internet Technology (TOIT), V2, P115, DOI [DOI 10.1145/514183.514185, 10.1145/514183.514185]
   Fouh E, 2012, COMPUT SCH, V29, P95, DOI 10.1080/07380569.2012.651422
   Furcy D., 2009, J COMPUT SCI COLL, V25, P32
   Guo Philip J., 2013, P 44 ACM TECHN S COM, P579
   Hall S., 2013, P ASEE ANN C ATL GA
   Haverbeke M., 2011, CodeMirror (Version 2.x)
   Hundhausen CD, 2002, J VISUAL LANG COMPUT, V13, P259, DOI 10.1006/S1045-926X(02)00028-9
   Karavirta V., 2013, 13 IEEE INT C ADV LE
   Karavirta V., 2013, P 5 ANN FINN BAL SEA, P95
   Karavirta V, 2013, 2013 LEARNING AND TEACHING IN COMPUTING AND ENGINEERING (LATICE 2013), P62, DOI 10.1109/LaTiCE.2013.35
   Karavirta Ville., 2013, Proceedings of the 18th ACM conference on Innovation and technology in computer science education, P159, DOI DOI 10.1145/2462476.2462487
   Kehoe C, 2001, INT J HUM-COMPUT ST, V54, P265, DOI 10.1006/ijhc.2000.0409
   Khan Academy, 2012, EX INF
   Korhonen A., 2003, TRAKLA2
   Malmi L., 2004, Informatics in Education, V3, P267
   McMillan J.H., 2008, ED HORIZONS, V87, P40
   Miller BradleyN., 2012, P 17 ACM ANN C INNOV, P150, DOI DOI 10.1145/2325296.2325335
   Naps T.L., 2002, ACM SIGCSE Bulletin, Volume, V35, P131, DOI DOI 10.1145/960568.782998
   Pritchard David., 2013, Proceedings of the 44th Technical Symposium on Computer Science Education, SIGCSE '13, P591, DOI [10.1145/2445196.2445370, DOI 10.1145/2445196.2445370]
   Robling G., 2006, SIGCSE Bulletin, V38, P166, DOI 10.1145/1189136.1189184
   Ross RJ, 2002, LECT NOTES COMPUT SC, V2269, P269
   Ross RJ, 2008, ITICSE '08: PROCEEDINGS OF THE 13TH ANNUAL CONFERENCE ON INNOVATION AND TECHNOLOGY IN COMPUTER SCIENCE EDUCATION, P133
   Rössling G, 2001, SIGCSE BULL, V33, P70, DOI 10.1145/366413.364541
   Shaffer C.A., 2010, ACM Trans. Comput. Educ., V10, P1, DOI DOI 10.1145/1821996.1821997
   Shaffer CA, 2011, SIGCSE 11: PROCEEDINGS OF THE 42ND ACM TECHNICAL SYMPOSIUM ON COMPUTER SCIENCE EDUCATION, P129
   Shaffer CliffordA., 2011, KOLI CALLING, P112, DOI 10.1145/2094131.2094154
   Shaffer CliffordA., 2011, Proceedings of the 6th Program Visualization Workshop, PVW '11, P97
   The CS2008 Review Taskforce The Joint Taskforce of the ACM and IEEE Computer Society, 2001, COMP SCI CURR 2008 I
   Urquiza-Fuentes J., 2009, ACM T COMPUT EDUC
NR 32
TC 27
Z9 29
U1 0
U2 20
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD AUG 1
PY 2014
VL 88
SI SI
BP 22
EP 40
DI 10.1016/j.scico.2013.11.040
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AH9QM
UT WOS:000336476900003
OA hybrid
DA 2024-07-18
ER

PT J
AU Johnstone, A
   Scott, E
   van den Brand, M
AF Johnstone, Adrian
   Scott, Elizabeth
   van den Brand, Mark
TI Modular grammar specification
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Context free grammar; Modularity; Whitespace processing
ID INCREMENTAL GENERATION
AB We establish a semantics for building grammars from a modularised specification in which modules are able to delete productions from imported nonterminals. Modules have import lists of nonterminals; some or all of an imported nonterminal's productions may be suppressed at import time. There are two basic import mechanisms which (a) reference or (b) clone an imported nonterminaPs productions. One of our goals is to allow a precise answer to the question: 'what character level language does this grammar generate' in the face of difficult issues such as the mutual embedding of languages that have different whitespace and commenting conventions. Our technique is to automatically generate a character level grammar from grammars written at token level in the conventional way; the grammar is constructed from modules each of which may have its own whitespace convention. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Johnstone, Adrian; Scott, Elizabeth] Univ London, Dept Comp Sci, Egham, Surrey, England.
   [van den Brand, Mark] Eindhoven Univ Technol Math & Comp Sci, NL-5612 AZ Eindhoven, Netherlands.
C3 University of London; Royal Holloway University London; Eindhoven
   University of Technology
RP Johnstone, A (corresponding author), Univ London, Dept Comp Sci, Egham, Surrey, England.
EM e.scott@rhul.ac.uk; a.johnstone@rhul.ac.uk; m.g.j.v.d.brand@tue.nl
OI van den Brand, Mark/0000-0003-3529-6182
FU UK EPSRC [EP/I032509/1]; EPSRC [EP/I032509/1] Funding Source: UKRI
FX This work was partially funded under UK EPSRC grant EP/I032509/1
   PLanCompS: Programming Language Components and Specifications. We are
   grateful for the helpful suggestions of the anonymous reviewers and
   further comments from Ana-Maria Farcasi, Robert Walsh, Joseph Reddington
   and the editors.
CR Aho A.V., 1972, PARSING SERIES AUTOM, V1
   Andersen J., 2013, SCI COMPUT IN PRESS
   Andersen J, 2010, ELECTRON NOTES THEOR, V253, P19, DOI 10.1016/j.entcs.2010.08.029
   [Anonymous], 2007, The Definitive ANTLR Reference: Building Domain-Specific Languages
   Bravenboer M, 2009, LECT NOTES COMPUT SC, V5452, P74, DOI 10.1007/978-3-642-00434-6_6
   Bravenboer Martin., 2006, OOPSLA 06, P209, DOI DOI 10.1145/1167473
   Cordy JR, 2006, SCI COMPUT PROGRAM, V61, P190, DOI 10.1016/j.scico.2006.04.002
   de Jonge M., 1997, P9718 U AMST
   Ekman T, 2007, SCI COMPUT PROGRAM, V69, P14, DOI 10.1016/j.scico.2007.02.003
   Ford B, 2004, ACM SIGPLAN NOTICES, V39, P111, DOI 10.1145/982962.964011
   Grimm R, 2006, ACM SIGPLAN NOTICES, V41, P38, DOI 10.1145/1133981.1133987
   HEERING J, 1990, IEEE T SOFTWARE ENG, V16, P1344, DOI 10.1109/32.62443
   HEERING J, 1989, SIGPLAN NOTICES, V24, P43, DOI 10.1145/71605.71607
   HORSPOOL RN, 1990, COMPUT LANG, V15, P205, DOI 10.1016/0096-0551(90)90021-G
   Johnstone A., 2011, ACM DIGITAL LIB
   Klint P, 2005, ACM T SOFTW ENG METH, V14, P331, DOI 10.1145/1072997.1073000
   Parr T., ANTLR4 GRAMMAR STRUC
   Parr T, 2011, ACM SIGPLAN NOTICES, V46, P425, DOI 10.1145/1993316.1993548
   Schwerdfeger AC, 2009, ACM SIGPLAN NOTICES, V44, P199, DOI 10.1145/1543135.1542499
   Scott E., 2012, SCI COMPUT IN PRESS
   Scott E, 2010, ELECTRON NOTES THEOR, V253, P177, DOI 10.1016/j.entcs.2010.08.041
   Van den Brand MGJ, 2002, ACM T PROGR LANG SYS, V24, P334, DOI 10.1145/567097.567099
   Van Wyk E, 2010, SCI COMPUT PROGRAM, V75, P39, DOI 10.1016/j.scico.2009.07.004
   Visser Eelco, 1997, Syntax Definition for Language Prototyping
NR 24
TC 9
Z9 9
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUL 1
PY 2014
VL 87
BP 23
EP 43
DI 10.1016/j.scico.2013.09.012
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AH3GP
UT WOS:000336012000003
OA hybrid
DA 2024-07-18
ER

PT J
AU Tanter, É
   Figueroa, I
   Tabareáu, N
AF Tanter, Eric
   Figueroa, Ismael
   Tabareau, Nicolas
TI Execution levels for aspect-oriented programming: Design, semantics,
   implementations and applications
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Aspect-oriented programming; Meta-programming; Infinite regression;
   Execution levels
AB In aspect-oriented programming (AOP) languages, advice evaluation is usually considered as part of the base program evaluation. This is also the case for certain pointcuts, such as if pointcuts in AspectJ, or simply all pointcuts in higher-order aspect languages like AspectScheme. While viewing aspects as part of base level computation clearly distinguishes AOP from reflection, it also comes at a price: because aspects observe base level computation, evaluating pointcuts and advice at the base level can trigger infinite regression. To avoid these pitfalls, aspect languages propose ad-hoc mechanisms, which increase the complexity for programmers while being insufficient in many cases. After shedding light on the many facets of the issue, this paper proposes to clarify the situation by introducing levels of execution in the programming language, thereby allowing aspects to observe and run at specific, possibly different, levels. We adopt a defensive default that avoids infinite regression, and gives advanced programmers the means to override this default using level-shifting operators. We then study execution levels both in practice and in theory. First, we study the relevance of the issues addressed by execution levels in existing aspect-oriented programs. We then formalize the semantics of execution levels and prove that the default semantics is indeed free of a certain form of infinite regression, which we call aspect loops. Finally, we report on existing implementations of execution levels for aspect-oriented extensions of Scheme, JavaScript and Java, discussing their implementation techniques and current applications. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Tanter, Eric; Figueroa, Ismael] Univ Chile, Dept Comp Sci DCC, PLEIAD Lab, Santiago, Chile.
   [Figueroa, Ismael; Tabareau, Nicolas] INRIA, Nantes, France.
C3 Universidad de Chile; Inria
RP Tanter, É (corresponding author), Univ Chile, Dept Comp Sci DCC, PLEIAD Lab, Santiago, Chile.
EM etanter@dcc.uchile.cl; ifiguero@dcc.uchile.cl; nicolas.tabareau@inria.fr
RI Figueroa, Ismael/O-6048-2017; Figueroa, Ismael/JCD-9073-2023
OI Figueroa, Ismael/0000-0003-3661-4963; tabareau,
   nicolas/0000-0003-3366-2273
FU FONDECYT [1110051]; CONICYT Chile Doctoral Scholarship; Inria Associate
   Team RAPIDS; Inria Associate Team REAL
FX Earlier versions of the main matter of this article appeared in the
   informal proceedings of the Scheme and Functional Programming Workshop
   2009 [48], and in the Proceedings of the 9th International Conference on
   Aspect-Oriented Software Development [49]. Additional content on
   exception handling appears in the Proceedings of the Foundations of
   Aspect Languages Workshop 2011 [24]. Accompanying material and notes are
   available online: http://pleiad.cl/research/scope/levels. Eric Tanter is
   partially funded by FONDECYT Project 1110051. Ismael Figueroa is funded
   by a CONICYT Chile Doctoral Scholarship. This work was partially funded
   by the Inria Associate Teams RAPIDS and REAL.
CR [Anonymous], 2010, P 9 ACM INT C ASP OR
   [Anonymous], 2011, P 10 ACM INT C ASP O
   [Anonymous], P 1984 ACM S LISP FU
   [Anonymous], 2008, P 7 ACM INT C ASP OR
   Aracic I, 2006, LECT NOTES COMPUT SC, V3880, P135
   AspectJ Team, 2003, ASPECTJ PROGR GUID
   Avgustinov P, 2006, LECT NOTES COMPUT SC, V3880, P293
   Bodden E, 2006, LECT NOTES INFORM, P49
   Bodden E., 2008, ISSTA 08, P155
   Bodden Eric, 2013, ACM T SOFTW ENG METH
   Chiba S., 1996, Object Technologies for Advanced Software. Second JSSST International Symposium ISOTAS'96. Proceedings, P157
   Clifton C, 2006, SCI COMPUT PROGRAM, V63, P321, DOI 10.1016/j.scico.2006.02.009
   Coelho Roberta., 2008, PLOP 08, P1
   Dantas DS, 2008, ACM T PROGR LANG SYS, V30, DOI 10.1145/1353445.1353448
   Danvy O., 1988, Proceedings of the 1988 ACM Conference on LISP and Functional Programming, P327, DOI 10.1145/62678.62725
   Denker Marcus, 2008, LECT NOTES BUS INF P
   Dutchyn C, 2006, SCI COMPUT PROGRAM, V63, P207, DOI 10.1016/j.scico.2006.01.003
   Dutchyn Christopher, 2006, THESIS U BRIT COLUMB
   Felleisen M., 2009, Semantics Engineering with PLT Redex
   Figueroa I., 2013, Proceedings of the 12th Workshop on Foundations of Aspect- Oriented Languages, P1, DOI [10.1145/2451598.2451600, DOI 10.1145/2451598.2451600]
   Figueroa Ismael, 2011, P 10 WORKSH FDN ASP, P7
   Findler RB, 2002, ACM SIGPLAN NOTICES, V37, P48, DOI 10.1145/583852.581484
   Khatchadourian R, 2009, IEEE INT CONF AUTOM, P575, DOI 10.1109/ASE.2009.37
   Kiczales G., 1991, The Art of the Metaobject Protocol
   Kiczales Gregor, 2009, COMMUNICATION
   Kiczales Gregor, 1992, P IMSA 92 WORKSH REF
   Kiczales Gregor, 2001, LNCS, V2072, P327, DOI DOI 10.1007/3-540-45337-718
   Kinzle Jorg, 2013, P 12 INT C ASP OR SO
   Laddad R., 2003, ASPECTJ ACTION PRACT
   Leger P, 2013, SCI COMPUT PROGRAM, V78, P1538, DOI 10.1016/j.scico.2012.11.005
   Masuhara H, 2003, LECT NOTES COMPUT SC, V2622, P46
   Rajan H, 2005, PROC INT CONF SOFTW, P59
   Rinard M., 2004, Software Engineering Notes, V29, P147, DOI 10.1145/1041685.1029917
   Robillard M. P., 2000, Software Engineering Notes, V25, P2, DOI 10.1145/357474.355046
   Scholliers Christophe, 2013, SCI COMPUT PROGRAM, DOI DOI 10.1016/J.SCIC0.2013.09.005
   SMITH BC, 1982, 272 MIT LAB COMP SCI
   Steimann F, 2010, ACM T SOFTW ENG METH, V20, DOI 10.1145/1767751.1767752
   Tabareau Nicolas, 2012, P 11 INT C ASP OR SO
   Tanter E, 2010, P 9 ACM SIGPLAN INT, P113
   Tanter É, 2010, SCI COMPUT PROGRAM, V75, P1235, DOI 10.1016/j.scico.2010.06.011
   Tanter É, 2009, ACM SIGPLAN NOTICES, V44, P3, DOI 10.1145/1837513.1640137
   Tanter É, 2008, J UNIVERS COMPUT SCI, V14, P3498
   Tanter Eric, 2012, P 11 WORKSH FDN ASP, P3
   Tanter Eric, 2009, SCHEM FUNCT PROGR WO
   Tanter Eric, 2010, AOSD 2010, P37
   Toledo R, 2012, IEEE T SOFTWARE ENG, V38, P101, DOI 10.1109/TSE.2011.6
   Toledo R, 2011, IEEE SOFTWARE, V28, P76, DOI 10.1109/MS.2010.154
   Villazón A, 2011, SCI COMPUT PROGRAM, V76, P1015, DOI 10.1016/j.scico.2010.04.007
   Wand M, 2004, ACM T PROGR LANG SYS, V26, P890, DOI 10.1145/1018203.1018208
   Wand M., 1988, LISP and Symbolic Computation, V1, P11, DOI 10.1007/BF01806174
   ZIMMERMANN C, 1996, ADV OBJECT ORIENTED
NR 51
TC 10
Z9 13
U1 0
U2 2
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 1
PY 2014
VL 80
BP 311
EP 342
DI 10.1016/j.scico.2013.09.002
PN B
PG 32
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 292FH
UT WOS:000329887100005
OA Bronze
DA 2024-07-18
ER

PT J
AU Mateescu, R
   Serwe, W
AF Mateescu, Radu
   Serwe, Wendelin
TI Model checking and performance evaluation with CADP illustrated on
   shared-memory mutual exclusion protocols
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Functional verification; Interactive Markov Chain; LOTOS NT;
   mu-calculus; Process algebra; Steady-state simulation
ID CONCURRENT PROGRAMMING CONTROL; PROPOSITIONAL DYNAMIC LOGIC; ALGORITHMS;
   MULTIPROCESSORS; VERIFICATION; LANGUAGE; SYSTEMS
AB Mutual exclusion protocols are an essential building block of concurrent shared-memory systems: indeed, such a protocol is required whenever a shared resource has to be protected against concurrent non-atomic accesses. Hence, many variants of mutual exclusion protocols exist, such as Peterson's or Dekker's well-known protocols. Although the functional correctness of these protocols has been studied extensively, relatively little attention has been paid to their non-functional aspects, such as their performance in the long run. In this paper, we report on experiments with the CADP toolbox for model checking and performance evaluation of mutual exclusion protocols using Interactive Markov Chains. Steady-state analysis provides an additional criterion for comparing protocols, which complements the verification of their functional properties. We also carefully re-examined the functional properties of these protocols, whose accurate formulation as temporal logic formulas in the action-based setting turns out to be quite involved. (C) 2012 Elsevier B.V. All rights reserved.
C1 [Mateescu, Radu; Serwe, Wendelin] INRIA Grenoble Rhone Alpes VASY LIG, F-38334 Saint Ismier, France.
RP Serwe, W (corresponding author), INRIA Grenoble Rhone Alpes VASY LIG, Inovallee,655,Av Europe, F-38334 Saint Ismier, France.
EM radu.mateescu@inria.fr; wendelin.serwe@inria.fr
CR Anderson JH, 2003, DISTRIB COMPUT, V16, P75, DOI 10.1007/s00446-003-0088-6
   Anderson JH, 2000, LECT NOTES COMPUT SC, V1914, P29
   Anderson T. E., 1990, IEEE Transactions on Parallel and Distributed Systems, V1, P6, DOI 10.1109/71.80120
   [Anonymous], 1996, GRADUATE TEXTS MATH
   [Anonymous], 2002, LECT NOTES COMPUTER
   Bar-David Y, 2003, LECT NOTES COMPUT SC, V2848, P136
   Botincan M., 2005, Journal of Computing and Information Technology - CIT, V13, P313, DOI 10.2498/cit.2005.04.09
   Burns James., 1980, P 18 ANN ALLERTON C, P833
   Champelovier D., 2011, Reference Manual of the LOTOS NT to LOTOS Translator-Version 5.4
   Chehaibar G., 2009, P 2009 IEEE INT WORK
   Clarke Edmund M., 2001, Model Checking
   Coste N, 2010, LECT NOTES COMPUT SC, V6416, P128, DOI 10.1007/978-3-642-16561-0_18
   Craig T. S., 1993, 930202 U WASH DEP CO
   DAM M, 1994, THEOR COMPUT SCI, V126, P77, DOI 10.1016/0304-3975(94)90269-0
   Delzanno G, 1999, LECT NOTES COMPUT SC, V1579, P223
   DIJKSTRA EW, 1965, COMMUN ACM, V8, P569, DOI 10.1145/365559.365617
   Dijkstra EW, 1968, COOPERATING SEQUENTI, P43
   Emerson E. A., 1986, Proceedings of the Symposium on Logic in Computer Science (Cat. No.86CH2321-8), P267
   FISCHER MJ, 1979, J COMPUT SYST SCI, V18, P194, DOI 10.1016/0022-0000(79)90046-1
   Garavel H, 2001, INT FED INFO PROC, V69, P377, DOI 10.1007/0-306-47003-9_24
   Garavel H, 1998, LECT NOTES COMPUT SC, V1384, P68
   Garavel H., 1998, P 3 INT WORKSH FORM, P187
   GARAVEL H, 2002, LNCS, V2391, P410
   Garavel H, 2011, LECT NOTES COMPUT SC, V6605, P372, DOI 10.1007/978-3-642-19835-9_33
   Herlihy M., 2008, ART MULTIPROCESSOR P
   Hermanns H, 2003, LECT NOTES COMPUT SC, V2619, P425
   HERMANNS H, 1999, LECT NOTES COMPUTER, V1601, P244
   HERMANNS H, 2001, LNCS, V2154, P59
   ISO/IEC, 2001, 154372001 ISOIEC INF
   Jensen HE, 1998, LECT NOTES COMPUT SC, V1384, P409, DOI 10.1007/BFb0054186
   KESSELS JLW, 1982, ACTA INFORM, V17, P135, DOI 10.1007/BF00288966
   KNUTH DE, 1966, COMMUN ACM, V9, P321, DOI 10.1145/355592.365595
   Krimm J.-P., 1997, LECT NOTES COMPUTER, V1217
   LAMPORT L, 1987, ACM T COMPUT SYST, V5, P1, DOI 10.1145/7351.7352
   Magnusson P., 1994, Proceedings Eighth International Parallel Processing Symposium (Cat. No.94TH0652-8), P165, DOI 10.1109/IPPS.1994.288305
   Manna Z., 1991, TOOLS RULES PRACTICI, P125
   Manna Z., 1992, The temporal logic of reactive and concurrent systems: specifications, V1
   MATEESCU R, 2006, SPRINGER INT J SOFTW, V8, P37
   Mateescu R, 2008, LECT NOTES COMPUT SC, V5014, P148, DOI 10.1007/978-3-540-68237-0_12
   Mateescu R, 2010, LECT NOTES COMPUT SC, V6371, P180, DOI 10.1007/978-3-642-15898-8_12
   MELLORCRUMMEY JM, 1991, ACM T COMPUT SYST, V9, P21, DOI 10.1145/103727.103729
   Nicola R.D., 1990, LECT NOTES COMPUTER, V469, P407
   Papamarcos M.S., 1984, P 11 INT S COMP ARCH
   PETERSON GL, 1981, INFORM PROCESS LETT, V12, P115, DOI 10.1016/0020-0190(81)90106-X
   Puterman M.L., 2008, Markov Decision Processes: Discrete Stochastic Dynamic Programming. Wiley Series in Probability and Statistics
   Raynal M., 1984, ALGORITHMIQUE PARALL
   STREETT RS, 1982, INFORM CONTROL, V54, P121, DOI 10.1016/S0019-9958(82)91258-X
   Taubenfeld G, 2004, LECT NOTES COMPUT SC, V3274, P56
   Taubenfeld Gadi, 2006, SYNCHRONIZATION ALGO
   Wolper P., 1982, TRANSLATION FU UNPUB
   YANG JH, 1995, DISTRIB COMPUT, V9, P51, DOI 10.1007/BF01784242
   Zhang L, 2010, LECT NOTES COMPUT SC, V6015, P53, DOI 10.1007/978-3-642-12002-2_5
   Zhang XD, 1996, IEEE PARALL DISTRIB, V4, P25, DOI 10.1109/88.481663
   [No title captured]
NR 54
TC 7
Z9 9
U1 0
U2 7
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUL 1
PY 2013
VL 78
IS 7
BP 843
EP 861
DI 10.1016/j.scico.2012.01.003
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 164PJ
UT WOS:000320421700006
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Boissier, O
   Bordini, RH
   Hübner, JF
   Ricci, A
   Santi, A
AF Boissier, Olivier
   Bordini, Rafael H.
   Huebner, Jomi F.
   Ricci, Alessandro
   Santi, Andrea
TI Multi-agent oriented programming with JaCaMo
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Multi-agent oriented programming; Autonomous agents; Shared
   environments; Agent organisations
ID AGENTS; ARTIFACTS
AB This paper brings together agent oriented programming, organisation oriented programming and environment oriented programming, all of which are programming paradigms that emerged out of research in the area of multi-agent systems. In putting together a programming model and concrete platform called JaCaMo which integrates important results and technologies in all those research directions, we show in this paper, with the combined paradigm, that we prefer to call "multi-agent oriented programming", the full potential of multi-agent systems as a programming paradigm. JaCaMo builds upon three existing platforms: Jason for programming autonomous agents, MOISE for programming agent organisations, and CArtAgO for programming shared environments. This paper also includes a simple example that illustrates the approach and discusses some real-world applications that have been or are being developed with JaCaMo. (C) 2011 Elsevier B.V. All rights reserved.
C1 [Boissier, Olivier] Ecole Mines, ISCOD LSTI, F-42024 St Etienne, France.
   [Bordini, Rafael H.] Univ Fed Rio Grande do Sul, INF UFRGS, BR-91501970 Porto Alegre, RS, Brazil.
   [Huebner, Jomi F.] Univ Fed Santa Catarina, DAS UFSC, BR-88040900 Florianopolis, SC, Brazil.
   [Ricci, Alessandro; Santi, Andrea] Alma Mater Studiorum Univ Bologna, DEIS, I-47521 Cesena, FC, Italy.
C3 Universidade Federal do Rio Grande do Sul; Universidade Federal de Santa
   Catarina (UFSC); University of Bologna
RP Boissier, O (corresponding author), Ecole Mines, ISCOD LSTI, 158 Cours Fauriel, F-42024 St Etienne, France.
EM Olivier.Boissier@emse.fr; r.bordini@inf.ufrgs.br; jomi@das.ufsc.br;
   a.ricci@unibo.it; a.santi@unibo.it
RI Ricci, Alessandro/AFQ-1187-2022; Bordini, Rafael/G-4919-2012; Hubner,
   Jomi Fred/AAL-6184-2021
OI Ricci, Alessandro/0000-0002-9222-5092; Bordini,
   Rafael/0000-0001-8688-9901; Hubner, Jomi Fred/0000-0001-9355-822X;
   BOISSIER, Olivier/0000-0002-2956-0533
FU CMIRA Programme of the Rhone-Alpes Region; CNPq [307924/2009-2,
   307350/2009-6, 478780/2009-5]
FX Part of this work was funded by the CMIRA Programme of the Rhone-Alpes
   Region. Support was also given by CNPq (grants 307924/2009-2,
   307350/2009-6, 478780/2009-5).
CR [Anonymous], 2007, WILEY SERIES AGENT T
   Beydoun G, 2009, IEEE T SOFTWARE ENG, V35, P841, DOI 10.1109/TSE.2009.34
   Boella G, 2008, AUTON AGENT MULTI-AG, V17, P1, DOI 10.1007/s10458-008-9047-8
   Boissier O, 2007, LECT NOTES ARTIF INT, V4457, P86
   Bordini R., 2009, MULTIAGENT PROGRAMMI, V2
   Bordini R. H., 2005, MULTIAGENT PROGRAMMI, V1
   Bromuri S, 2008, LECT NOTES ARTIF INT, V5049, P115
   Dastani M, 2008, KRAMAS 08 P
   Demazeau Y., 1995, 1 EUROPEAN C COGNITI, P117
   Esteva M., 2004, Third International Joint Conference on Autonomous Agents and Multiagent Systems, V1, P236, DOI DOI 10.1109/AAMAS.2004.10060
   Ferber J, 1998, INTERNATIONAL CONFERENCE ON MULTI-AGENT SYSTEMS, PROCEEDINGS, P128, DOI 10.1109/ICMAS.1998.699041
   Fisher M, 2007, COMPUT INTELL-US, V23, P61, DOI 10.1111/j.1467-8640.2007.00295.x
   Gutknecht O, 2001, LECT NOTES ARTIF INT, V1887, P48
   Hubner Jomi F., 2007, International Journal of Agent-Oriented Software Engineering, V1, P370, DOI 10.1504/IJAOSE.2007.016266
   Hübner JF, 2010, LECT NOTES ARTIF INT, V6245, P117, DOI 10.1007/978-3-642-14977-1_11
   Hübner J, 2010, AUTON AGENT MULTI-AG, V20, P369, DOI 10.1007/s10458-009-9084-y
   Huhns M. N., 2001, Agent-Oriented Software Engineering. First International Workshop, AOSE 2000. Revised Papers (Lecture Notes in Computer Science Vol.1957), P29
   Kameas A, 2010, IEEE ENABL TECHNOL, P1, DOI 10.1109/WETICE.2010.58
   Omicini A, 2004, P 3 INT JOINT C AUT, V1, P286, DOI DOI 10.1109/AAIVIAS2004.10070
   Omicini A, 2008, AUTON AGENT MULTI-AG, V17, P432, DOI 10.1007/s10458-008-9053-x
   Persson C., 2011, IEEE WIC ACM INT C I
   Piunti  M., 2009, IEEE WIC ACM INT C W
   Poutakidis D, 2003, LECT NOTES ARTIF INT, V2871, P628
   PYNADATH D.V., 1999, INTELLIGENT AGENTS 6, P233, DOI DOI 10.1007/10719619
   Pynadath DV, 2003, AUTON AGENT MULTI-AG, V7, P71, DOI 10.1023/A:1024176820874
   Rao A. S., 1996, Agents Breaking Away. 7th European Workshop on Modelling Autonomous Agents in a Multi-Agent World, MAAMAW '96 Proceedings, P42, DOI 10.1007/BFb0031845
   Ricci A., 2010, P PROGR MULT SYST PR
   Ricci A, 2011, AUTON AGENT MULTI-AG, V23, P158, DOI 10.1007/s10458-010-9140-7
   Searle John., 1997, CONSTRUCTION SOCIAL
   SHOHAM Y, 1993, ARTIF INTELL, V60, P51, DOI 10.1016/0004-3702(93)90034-9
   Sichman V., 2010, AGENT ORG MODELS ARC
   Singh MP, 1998, COMPUTER, V31, P40, DOI 10.1109/2.735849
   Sorici A., 2011, THESIS U POLITEHNICA
   Sterling LS, 2009, ART OF AGENT-ORIENTED MODELING, P1, DOI 10.1080/17482960903207997
   Stratulat T., 2009, P 8 INT C AUT AG MUL, P813
   Toledo C.M., 2011, P PROMAS 2011 HELD A
   Urovi V., 2010, LECT NOTES COMPUTER, P268
   Van Riemsdijk MB, 2006, P 5 INT JOINT C AUTO, P1271, DOI [10.1145/1160633.1160864, DOI 10.1145/1160633.1160864]
   WEYNS D, 2007, AUTONOMOUS AGENTS MU, V14
   Weyns D, 2007, AUTON AGENT MULTI-AG, V14, P5, DOI 10.1007/s10458-006-0012-0
NR 40
TC 202
Z9 211
U1 0
U2 10
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 1
PY 2013
VL 78
IS 6
BP 747
EP 761
DI 10.1016/j.scico.2011.10.004
PG 15
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 133JJ
UT WOS:000318134400011
OA Bronze
DA 2024-07-18
ER

PT J
AU Bai, LE
   Eyiyurekli, M
   Lelkes, PI
   Breen, DE
AF Bai, Linge
   Eyiyurekli, Manolya
   Lelkes, Peter I.
   Breen, David E.
TI Self-organized sorting of heterotypic agents via a chemotaxis paradigm
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Chemotaxis; Self-organization; Sorting; Agents; Swarm robotics
ID DIFFERENTIAL ADHESION; CELL; SIMULATION; TISSUES; SYSTEM; MODEL
AB Cell sorting is a fundamental phenomenon in morphogenesis, a process that leads to shape formation in living organisms. The sorting of heterotypic cell populations is produced by a variety of inter-cellular actions, e.g. differential chemotactic response, adhesion, rigidity, and motility. Via a process called chemotaxis, living cells respond to chemicals released by other cells into the environment. Inspired by the biological phenomena of chemotaxis and cell sorting in heterotypic cell aggregates, we propose a chemotaxis-based algorithm that sorts self-organizing heterotypic agents. In our algorithm, two types of agents are initially randomly placed in a toroidal environment. Agents emit a chemical signal and interact with nearby agents. Given the appropriate parameters, the two kinds of agents self-organize into a complex aggregate consisting of a single group of one type of agent surrounded by agents of the second type. This paper describes the chemotaxis-based sorting algorithm, the behaviors of our self-organizing heterotypic agents, evaluation of the final aggregates and parametric studies of the algorithm. (C) 2012 Elsevier B.V. All rights reserved.
C1 [Bai, Linge; Eyiyurekli, Manolya; Breen, David E.] Drexel Univ, Coll Engn, Dept Comp Sci, Philadelphia, PA 19104 USA.
   [Bai, Linge; Breen, David E.] Max Planck Inst Phys Komplexer Syst, Biol Phys Dept, Dresden, Germany.
   [Lelkes, Peter I.] Drexel Univ, Sch Biomed Engn Sci & Hlth Syst, Philadelphia, PA 19104 USA.
C3 Drexel University; Max Planck Society; Drexel University
RP Bai, LE (corresponding author), Drexel Univ, Coll Engn, Dept Comp Sci, Philadelphia, PA 19104 USA.
EM lb353@cs.drexel.edu
RI Lelkes, Peter I/S-1751-2019; Bai, Linge/D-5566-2015; Lelkes,
   Peter/HGA-2907-2022
OI Bai, Linge/0000-0003-1977-6741; 
FU NSF [CCF-0636323, IIS-0845415]; NASA [NNJ04HC81G, NCC9-130,
   NAG97-HEDS-02]; Max Planck Institute; Direct For Computer & Info Scie &
   Enginr; Div Of Information & Intelligent Systems [0845415] Funding
   Source: National Science Foundation
FX This research was funded by NSF grants CCF-0636323 and IIS-0845415, NASA
   Contracts NNJ04HC81G, NCC9-130 and NAG97-HEDS-02, and Max Planck
   Institute Visiting Scientist Fellowships for DB and LB.
CR Alberts B., 2003, Essential Cell Biology
   [Anonymous], 2000, Dev. Biol
   Bai Linge, 2008, Journal of Graphics Tools, V13, P53
   Bai L., 2008, THESIS DREXEL U PHIL
   Bai LG, 2008, SASO 2008: SECOND IEEE INTERNATIONAL CONFERENCE ON SELF-ADAPTIVE AND SELF-ORGANIZING SYSTEMS, PROCEEDINGS, P445, DOI 10.1109/SASO.2008.54
   Balch T, 1998, IEEE T ROBOTIC AUTOM, V14, P926, DOI 10.1109/70.736776
   Beal J, 2010, LECT NOTES COMPUT SC, V6234, P179, DOI 10.1007/978-3-642-15461-4_16
   Belmonte JM, 2008, PHYS REV LETT, V100, DOI 10.1103/PhysRevLett.100.248702
   Brodland G. W., 2004, Applied Mechanics Review, V57, P47, DOI 10.1115/1.1583758
   Crank J., 1975, MATH DIFFUSION, V2nd
   Czirok A, 1997, J PHYS A-MATH GEN, V30, P1375, DOI 10.1088/0305-4470/30/5/009
   Desai JP, 2001, IEEE T ROBOTIC AUTOM, V17, P905, DOI 10.1109/70.976023
   Doursat R., 2008, Organic Computing, P167, DOI DOI 10.1007/978-3-540-77657-4_8
   Eggenberger P, 1997, FROM ANIM ANIMAT, P205
   Eisenbach E., 2004, Chemotaxis
   Eyiyurekli M, 2008, BIOSYSTEMS, V93, P226, DOI 10.1016/j.biosystems.2008.05.005
   Eyiyurekli M, 2007, LECT NOTES ARTIF INT, V4648, P1034
   FARRELL BE, 1990, CELL MOTIL CYTOSKEL, V16, P279, DOI 10.1002/cm.970160407
   Fleischer K., 1994, Artificial life III (Vol. XVII of the SFI studies in the science of complexity), VXVII, P389
   Fleischer KW., 1996, Proc. Artificial Life V, P389
   Foty RA, 1996, DEVELOPMENT, V122, P1611
   Glazier J.A., 1995, Interplay of Genetic and Physical Processes in the Development of Biological Form, P54
   GLAZIER JA, 1993, PHYS REV E, V47, P2128, DOI 10.1103/PhysRevE.47.2128
   GRANER F, 1992, PHYS REV LETT, V69, P2013, DOI 10.1103/PhysRevLett.69.2013
   Hogeweg P, 2002, BIOSYSTEMS, V64, P97, DOI 10.1016/S0303-2647(01)00178-2
   Hogeweg P, 2000, J THEOR BIOL, V203, P317, DOI 10.1006/jtbi.2000.1087
   Hotz P.E., 2003, On Growth, Form and Computers, P302
   Hsieh MYA, 2006, IEEE INT CONF ROBOT, P2442
   Jabbarzadeh E, 2005, J THEOR BIOL, V235, P221, DOI 10.1016/j.jtbi.2005.01.005
   Kumar M, 2008, P AMER CONTR CONF, P117, DOI 10.1109/ACC.2008.4586477
   METROPOLIS N, 1953, J CHEM PHYS, V21, P1087, DOI 10.1063/1.1699114
   MOMBACH JCM, 1995, PHYS REV LETT, V75, P2244, DOI 10.1103/PhysRevLett.75.2244
   Nagpal R., 2002, Proceedings of the First International Joint Conference on Autonomous Agents and Multiagent Systems, P418
   Nagpal R., 2003, PROC AAAI SPRING S C, P173
   Peifer M, 1998, NATURE, V395, P324, DOI 10.1038/26345
   SAVINELL JM, 1989, BIOPROCESS ENG, V4, P231, DOI 10.1007/BF00369177
   Serini G, 2003, EMBO J, V22, P1771, DOI 10.1093/emboj/cdg176
   STEINBERG MS, 1963, SCIENCE, V141, P401, DOI 10.1126/science.141.3579.401
   STEINBERG MS, 1994, P NATL ACAD SCI USA, V91, P206, DOI 10.1073/pnas.91.1.206
   Steinberg MS, 1996, DEV BIOL, V180, P377, DOI 10.1006/dbio.1996.0312
   VICSEK T, 1995, PHYS REV LETT, V75, P1226, DOI 10.1103/PhysRevLett.75.1226
   Voss-Böhme A, 2010, J THEOR BIOL, V263, P419, DOI 10.1016/j.jtbi.2009.12.011
   Werfel J, 2006, IEEE INTELL SYST, V21, P20, DOI 10.1109/MIS.2006.25
NR 43
TC 10
Z9 12
U1 0
U2 5
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAY 1
PY 2013
VL 78
IS 5
BP 594
EP 611
DI 10.1016/j.scico.2012.10.007
PG 18
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 125MS
UT WOS:000317544500013
DA 2024-07-18
ER

PT J
AU Bertrand, N
   Legay, A
   Pinchinat, S
   Raclet, JB
AF Bertrand, Nathalie
   Legay, Axel
   Pinchinat, Sophie
   Raclet, Jean-Baptiste
TI Modal event-clock specifications for timed component-based design
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 11th International Conference on Formal Engineering Methods (ICFEM)
CY DEC 09-12, 2009
CL Rio de Janeiro, BRAZIL
SP Pontificia Univ Catolica Rio de Janeiro, Univ York, Inst Mil Engenharia
DE Component-based systems; Interface-based design; Timed modal
   specification; Conjunction; Product; Quotient
ID REFINEMENT; CHECKING; GAMES
AB Modal specifications are classic, convenient, and expressive mathematical objects to represent interfaces of component-based systems. However, time is a crucial aspect of systems for practical applications, e.g. in the area of embedded systems. And yet, only few results exist on the design of timed component-based systems. In this paper, we propose a timed extension of modal specifications, together with fundamental operations (conjunction, product, and quotient) that enable reasoning in a compositional way about timed system. The specifications are given as modal event-clock automata, where clock resets are easy to handle. We develop an entire theory that promotes efficient incremental design techniques. (C) 2011 Elsevier B.V. All rights reserved.
C1 [Raclet, Jean-Baptiste] CNRS, IRIT, F-31062 Toulouse, France.
   [Bertrand, Nathalie; Legay, Axel; Pinchinat, Sophie] Campus Univ Beaulieu, IRISA INRIA Rennes Bretagne Atlantique, F-35042 Rennes, France.
C3 Centre National de la Recherche Scientifique (CNRS); Universite Federale
   Toulouse Midi-Pyrenees (ComUE); Universite de Toulouse; Institut
   National Polytechnique de Toulouse; Universite Toulouse III - Paul
   Sabatier; Universite de Rennes
RP Raclet, JB (corresponding author), CNRS, IRIT, 118 Route Narbonne, F-31062 Toulouse, France.
EM nathalie.bertrand@inria.fr; axel.legay@inria.fr;
   sophie.pinchinat@irisa.fr; raclet@irit.fr
OI Bertrand, Nathalie/0000-0002-9957-5394
CR ALUR R, 1994, THEOR COMPUT SCI, V126, P183, DOI 10.1016/0304-3975(94)90010-8
   Alur R, 2002, J ACM, V49, P672, DOI 10.1145/585265.585270
   Alur R, 1998, LECT NOTES COMPUT SC, V1466, P163, DOI 10.1007/BFb0055622
   Alur R, 1999, THEOR COMPUT SCI, V211, P253, DOI 10.1016/S0304-3975(97)00173-4
   Andrade L. F., 2001, P 38 INT C TECHN OBJ, P182
   [Anonymous], 1989, CWI Q.
   Antonik A., B EUROPEAN ASS THEOR, V1
   Arnold A, 2003, THEOR COMPUT SCI, V303, P7, DOI 10.1016/S0304-3975(02)00442-5
   ARNOLD A, 1980, THEOR COMPUT SCI, V11, P181, DOI 10.1016/0304-3975(80)90045-6
   Behrmann G, 2007, LECT NOTES COMPUT SC, V4590, P121
   Bertrand N, 2009, LECT NOTES COMPUT SC, V5885, P679, DOI 10.1007/978-3-642-10373-5_35
   Bertrand N, 2009, LECT NOTES COMPUT SC, V5457, P152, DOI 10.1007/978-3-642-00982-2_13
   Bhaduri P, 2005, LECT NOTES COMPUT SC, V3707, P338
   Bouyer P., 2009, QUALITATIVE QUANTITA, V7
   Bulychev P, 2009, LECT NOTES COMPUT SC, V5813, P73, DOI 10.1007/978-3-642-04368-0_8
   Cattani GL, 2005, MATH STRUCT COMP SCI, V15, P553, DOI 10.1017/S0960129505004718
   Cattani GL, 2003, THEOR COMPUT SCI, V300, P47, DOI 10.1016/S0304-3975(01)00209-2
   Cerans K., 1993, Computer Aided Verification. 5th International Conference, CAV '93 Proceedings, P253
   Chakrabarti A., 2002, Computer Aided Verification. 14th International Conference, CAV 2002. Proceedings (Lecture Notes in Computer Science Vol.2404), P414
   Davey B. A., 2002, INTRO LATTICES ORDER, V2nd, DOI DOI 10.1017/CBO9780511809088
   David A, 2010, HSSC 10: PROCEEDINGS OF THE 13TH ACM INTERNATIONAL CONFERENCE ON HYBRID SYSTEMS: COMPUTATION AND CONTROL, P91
   De Alfaro L, 2002, LECT NOTES COMPUT SC, V2491, P108
   de Alfaro L., 2001, Software Engineering Notes, V26, P109, DOI 10.1145/503271.503226
   Doyen L., 2008, Proc. ACM IEEE Int. Conf. Embedded Software, P79, DOI DOI 10.1145/1450058.1450070
   Feuillade G, 2007, DISCRETE EVENT DYN S, V17, P211, DOI 10.1007/s10626-006-0008-6
   Fiadeiro J. L., 1995, SIGSOFT Software Engineering Notes, V20, P72, DOI 10.1145/222132.222141
   Gössler G, 2005, SCI COMPUT PROGRAM, V55, P161, DOI 10.1016/j.scico.2004.05.014
   HENZINGER TA, 1994, INFORM COMPUT, V111, P193, DOI 10.1006/inco.1994.1045
   Henzinger TA, 2007, COMPUTER, V40, P32, DOI 10.1109/MC.2007.364
   Henzinger TA, 2006, LECT NOTES COMPUT SC, V4085, P1
   HOARE CAR, 1978, COMMUN ACM, V21, P666, DOI 10.1145/359576.359585
   JONSSON B, 1991, P INT JOINT C THEOR, P381
   Kaynar D.K., 2010, SYNTHESIS LECT COMP
   Larsen K.G., 1995, LECT NOTES COMPUT SC, V1019, P17, DOI DOI 10.1007/3-540-60630-0_2
   LARSEN KG, 1990, LECT NOTES COMPUT SC, V407, P232
   Larsen KG, 2007, LECT NOTES COMPUT SC, V4703, P105
   Larsen U, 1988, Eur J Popul, V3, P203, DOI 10.1109/LICS.1988.5119
   Nyman U, 2007, LECT NOTES COMPUT SC, V4421, P64
   Raclet J.B, 2007, THESIS U RENNES 1
   RACLET JB, 2009, P 9 ACM IEEE INT C E
   Raclet JB, 2008, ELECTRON NOTES THEOR, V215, P93, DOI 10.1016/j.entcs.2008.06.023
   Raclet JB, 2009, NINTH INTERNATIONAL CONFERENCE ON APPLICATION OF CONCURRENCY TO SYSTEM DESIGN, PROCEEDINGS, P119, DOI 10.1109/ACSD.2009.22
NR 42
TC 8
Z9 9
U1 0
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 1
PY 2012
VL 77
IS 12
SI SI
BP 1212
EP 1234
DI 10.1016/j.scico.2011.01.007
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 005EH
UT WOS:000308732800002
OA Green Submitted
DA 2024-07-18
ER

PT J
AU da Costa, US
   Moreira, AM
   Musicante, MA
   Neto, PAS
AF da Costa, Umberto Souza
   Moreira, Anamaria Martins
   Musicante, Martin A.
   Souza Neto, Placid A.
TI JCML: A specification language for the runtime verification of Java Card
   programs
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE JML; Java Card; JCML; Runtime verification
ID MONDEX; CHECKING
AB Java Card is a version of Java developed to run on devices with severe storage and processing restrictions. The applets that run on these devices are frequently intended for use in critical, highly distributed, mobile conditions. They are required to be portable and safe. Often, the requirements of the application impose the use of dynamic, on-card verifications, but most of the research developed to improve the safety of Java Card applets concentrates on static verification methods. This work presents a runtime verification approach based on Design by Contract to improve the safety of Java Card applications. To this end, we propose JCML (Java Card Modelling Language) a specification language derived from JML (Java Modelling Language) and its implementation: a compiler that generates runtime verification code. We also present some experiments and quality indicators. This paper extends previous published work from the authors with a more complete and precise definition of the JCML language and new experiments and results. (C) 2010 Elsevier B.V. All rights reserved.
C1 [Souza Neto, Placid A.] DIETInf Inst Fed Rio Grande Norte, BR-5901500 Natal, RN, Brazil.
   [da Costa, Umberto Souza; Moreira, Anamaria Martins; Musicante, Martin A.; Souza Neto, Placid A.] DIMAp Univ Fed Rio Grande Norte, Natal, RN, Brazil.
C3 Instituto Federal do Rio Grande do Norte; Universidade Federal do Rio
   Grande do Norte
RP Neto, PAS (corresponding author), DIETInf Inst Fed Rio Grande Norte, Caixa Postal 1559, BR-5901500 Natal, RN, Brazil.
EM umberto@dimap.ufrn.br; anamaria@dimap.ufrn.br; mam@dimap.ufrn.br;
   placido.neto@ifriledu.br
RI Ines, INCT/J-9550-2013; Musicante, Martin A./B-3586-2008
OI Musicante, Martin A./0000-0001-5589-3895
CR Abrial J.-R., 1996, B BOOK ASSIGNING PRO
   [Anonymous], 2007, COQ PROOF ASS REF MA
   [Anonymous], 2008, JML Reference Manual
   Artho C, 2005, ELECTRON NOTES THEOR, V131, P3, DOI 10.1016/j.entcs.2005.01.018
   Artho Cyrille, 2001, THESIS
   Aydal Emine G., 2008, ECEASST, VECEASST, P9
   Beckert B, 2007, LECT NOTES ARTIF INT, V4603, P379
   Beckert Bernhard., 2007, LNCS, V4334
   Bhorkar A., 2000, 0008 IOW STAT U DEP
   Chalin P, 2008, LECT NOTES COMPUT SC, V5014, P246, DOI 10.1007/978-3-540-68237-0_18
   Chen Z., 2000, JAVA CARD TECHNOLOGY
   Cheon Yoonsik, 2003, Ph.D. Dissertation
   Costa Umberto S., 2008, BRAZ S FORM METH SBM
   da Costa US, 2009, ELECTRON NOTES THEOR, V240, P61, DOI 10.1016/j.entcs.2009.05.045
   Ernst MichaelD., 2004, P ACM SIGPLAN SIGSOF, P35
   Filliatre J.-C., 2003, 8623 LRI CNRS UMR
   Freitas L, 2008, FORM ASP COMPUT, V20, P117, DOI 10.1007/s00165-007-0059-y
   GAMMA E, 1995, DESIGN PATTERNS
   George C, 2008, FORM ASP COMPUT, V20, P101, DOI 10.1007/s00165-007-0054-3
   Jones C, 2008, FORM ASP COMPUT, V20, P1, DOI 10.1007/s00165-007-0064-1
   Jones Cliff, 2006, IEEE COMPUTER MAGAZI
   Jurgensen T. M., 2002, SMART CARDS DEV TOOL
   Leavens G.T., 2009, DESIGN CONT IN PRESS
   Leavens GT, 2007, FORM ASP COMPUT, V19, P159, DOI 10.1007/s00165-007-0026-7
   Leavens Gary T., 2007, ASE, P573
   Leino K.R.M., 2000, ESC JAVA USERS MANUA
   Leino KRM, 2004, LECT NOTES COMPUT SC, V3086, P491
   Marché C, 2004, J LOGIC ALGEBR PROGR, V58, P89, DOI 10.1016/j.jlap.2003.07.006
   MEYER B, 1992, COMPUTER, V25, P40, DOI 10.1109/2.161279
   Meyer B., 2000, OBJECT ORIENTED SOFT, V2nd
   Nimmer Jeremy W., 2001, STATIC VERIFICATION
   Ortiz E., 2005, INTRO JAVA CARD
   Rebêlo H, 2008, APPLIED COMPUTING 2008, VOLS 1-3, P228
   Schmitt PH, 2007, SEFM 2007: FIFTH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING AND FORMAL METHODS, PROCEEDINGS, P47, DOI 10.1109/SEFM.2007.30
   Smaragdakis Y, 2007, LECT NOTES COMPUT SC, V4454, P1
   Souza Neto Placido A., 2007, THESIS U FED RIO GRA
   SUN Microsystems, 2005, API SPEC JAV CARD PL
   Tonin I., 2007, Verifying the Mondex case study. The KeY approach
   van den Berg J., 2001, Tools and Algorithms for the Construction and Analysis of Systems. 7th International Conference, TACAS 2001. Held as Part of the Joint European Conferences on Theory and Practice of Software, ETAPS 2001. Proceedings (Lecture Notes in Computer Science Vol.2031), P299
   Woodcock J, 2006, LECT NOTES COMPUT SC, V4281, P15
   Woodcock Jim, 1996, SERIES COMPUTER SCI
NR 41
TC 1
Z9 1
U1 0
U2 8
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD APR 1
PY 2012
VL 77
IS 4
SI SI
BP 533
EP 550
DI 10.1016/j.scico.2010.03.003
PG 18
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 906ER
UT WOS:000301328200007
OA Bronze, Green Published
DA 2024-07-18
ER

PT J
AU Di Cosmo, R
   Di Ruscio, D
   Pelliccione, P
   Pierantonio, A
   Zacchiroli, S
AF Di Cosmo, Roberto
   Di Ruscio, Davide
   Pelliccione, Patrizio
   Pierantonio, Alfonso
   Zacchiroli, Stefano
TI Supporting software evolution in component-based FOSS systems
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE System's upgrade; FOSS systems; Open source project; Model-driven
   engineering (MDE); Configuration management
AB FOSS (Free and Open Source Software) systems present interesting challenges in system evolution. On one hand, most FOSS systems are based on very fine-grained units of software deployment - called packages - which promote system evolution; on the other hand, FOSS systems are among the largest software systems known and require sophisticated static and dynamic conditions to be verified, in order to successfully deploy upgrades on users' machines. The slightest error in one of these conditions can turn a routine upgrade into a system administrator's nightmare.
   In this paper we introduce a model-based approach to support the upgrade of FOSS systems. The approach promotes the simulation of upgrades to predict failures before affecting the real system. Both fine-grained static aspects (e.g. configuration incoherences) and dynamic aspects (e.g. the execution of configuration scripts) are taken into account, improving over the state of the art of upgrade planners. The effectiveness of the approach is validated by instantiating the approach to widely-used FOSS distributions. (C) 2010 Elsevier B.V. All rights reserved.
C1 [Di Ruscio, Davide; Pelliccione, Patrizio; Pierantonio, Alfonso] Univ Aquila, Dipartimento Informat, I-67100 Laquila, Italy.
   [Di Cosmo, Roberto; Zacchiroli, Stefano] Univ Paris Diderot, PPS, UMR 7126, Paris, France.
C3 University of L'Aquila; Universite Paris Cite
RP Pelliccione, P (corresponding author), Univ Aquila, Dipartimento Informat, I-67100 Laquila, Italy.
EM roberto@dicosmo.org; davide.diruscio@univaq.it;
   patrizio.pelliccione@univaq.it; alfonso.pierantonio@univaq.it;
   zack@pps.jussieu.fr
RI Pelliccione, Patrizio/Q-5118-2019; Di Ruscio, Davide/AAG-4674-2020;
   Pelliccione, Patrizio/A-4105-2008
OI Pelliccione, Patrizio/0000-0002-5438-2281; Di Ruscio,
   Davide/0000-0002-5077-6793; Pelliccione, Patrizio/0000-0002-5438-2281;
   Zacchiroli, Stefano/0000-0002-4576-136X; Pierantonio,
   Alfonso/0000-0002-5231-3952
FU European Community [FP7/2007-2013, 214898]
FX This work is partly supported by they European Community's 7th Framework
   Programme (FP7/2007-2013), http://www.mancoosi.org MANCOOSI project,
   grant agreement n. 214898.
CR Anderson Paul., 2000, P 4 ANN LINUX SHOWCA, V4, P42
   [Anonymous], 2001, CATHEDRAL BAZAAR
   Bezivin J., 2005, SOFTWARE SYSTEM MODE, V4, P171, DOI DOI 10.1007/S10270-005-0079-0
   Brown AW, 1998, IEEE SOFTWARE, V15, P37, DOI 10.1109/52.714622
   BURGESS M, 1995, COMPUT SYST, V8, P309
   Izquierdo JLC, 2009, LECT NOTES COMPUT SC, V5562, P82, DOI 10.1007/978-3-642-02674-4_7
   Childs S., 2008, LISA, P175
   Cicchetti A, 2007, J OBJECT TECHNOL, V6, P165, DOI 10.5381/jot.2007.6.9.a9
   Cicchetti A, 2010, COMM COM INF SC, V69, P262
   Cosmo R. D., 2008, P 1 INT WORKSH HOT T, P1
   Crameri Olivier, 2007, Operating Systems Review, V41, P221, DOI 10.1145/1323293.1294283
   D'Souza DesmondF., 1999, OBJECTS COMPONENTS F
   Delaet T, 2007, USENIX ASSOCIATION PROCEEDING OF THE 21ST LARGE INSTALLATION SYSTEMS ADMINISTRATION CONFERENCE, P261
   Desai N, 2006, LISA 06: USENIX ASSOCIATION PROCEEDINGS OF THE 20TH LARGE INSTALLATION SYSTEM ADMINISTRATION CONFERENCE, P215
   Di Cosmo Roberto, 2008, METAMODEL DESCRIBING, P1
   Di Ruscio D., 2010, INSTANTIATION METAMO
   Di Ruscio D., 2009, 1 VERSION DSL BASED
   Di Ruscio D, 2009, IWOCE 2009: INTERNATIONAL WORKSHOP ON OPEN COMPONENT ECOSYSTEM, P11
   Dolstra E, 2008, ICFP'08: PROCEEDINGS OF THE 2008 SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P367
   Efftinge S., 2006, MODELS 07
   Gonzalez-Barahona JM, 2009, EMPIR SOFTW ENG, V14, P262, DOI 10.1007/s10664-008-9100-x
   Johnson M.K., 2005, P LIN S
   Kanies L, 2003, USENIX ASSOCIATION PROCEEDINGS OF THE SEVENTEENTH LARGE INSTALLATION SYSTEMS ADMINISTRATION CONFERENCE, P115
   Kanies Luke., 2006, USENIX ASS NEWSLETTE, V31, P19
   Lehman M. M., 2000, IEE Proceedings-Software, V147, P249, DOI 10.1049/ip-sen:20000922
   Lehman M. M., 1985, Program Evolution: Processes of Software Change
   Mancinelli F, 2006, IEEE INT CONF AUTOM, P199
   Mazurak K, 2007, PLAS'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN WORKSHOP ON PROGRAMMING LANGUAGES AND ANALYSIS FOR SECURITY, P105, DOI 10.1145/1255329.1255347
   McQueen R., 2005, THESIS U CAMBRIDGE
   Mens T., 2008, Software Evolution
   MENS T, 2005, IWPSE 05
   Naur P., 1968, SOFTW ENG C SPONS NA, P231
   Reus T, 2006, LECT NOTES COMPUT SC, V4066, P213
   Treinen R, 2009, IWOCE 2009: INTERNATIONAL WORKSHOP ON OPEN COMPONENT ECOSYSTEM, P31
   Xie YC, 2006, USENIX Association Proceedings of the 15th USENIX Security Symposium, P179
NR 35
TC 20
Z9 20
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 1
PY 2011
VL 76
IS 12
SI SI
BP 1144
EP 1160
DI 10.1016/j.scico.2010.11.001
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 793FX
UT WOS:000292806900006
OA Bronze
DA 2024-07-18
ER

PT J
AU Colvin, RJ
   Hayes, IJ
AF Colvin, Robert J.
   Hayes, Ian J.
TI A semantics for Behavior Trees using CSP with specification commands
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 7th International Conference on Integrated Formal Methods
CY FEB 16-19, 2009
CL Dusseldorf, GERMANY
DE Structural operational semantics; Communicating Sequential Processes
   (CSP); Hierarchical state; Specification commands; Process algebras;
   Behavior Trees; Requirements modelling
ID PROCESS ALGEBRA; VERIFICATION; VALIDATION; TOOL
AB In this paper we give a formal definition of the requirements translation language Behavior Trees. This language has been used with success in industry to systematically translate large, complex, and often erroneous requirements documents into a structured model of the system. It contains a mixture of state-based manipulations, synchronisation, message passing, and parallel, conditional, and iterative control structures. The formal semantics of a Behavior Tree is given via a translation to a version of Hoare's process algebra CSP, extended with state-based constructs such as guards and updates, and a message passing facility similar to that used in publish/subscribe protocols. We first provide the extension of CSP and its operational semantics, which preserves the meaning of the original CSP operators, and then the Behavior Tree notation and its translation into the extended version of CSP. (C) 2010 Elsevier B.V. All rights reserved.
C1 [Colvin, Robert J.; Hayes, Ian J.] Univ Queensland, Brisbane, Qld 4072, Australia.
C3 University of Queensland
RP Colvin, RJ (corresponding author), Univ Queensland, Brisbane, Qld 4072, Australia.
EM robert@itee.uq.edu.au
RI Colvin, Robert/N-6686-2019; Colvin, Robert/C-7985-2009
OI Colvin, Robert/0000-0002-2149-675X; Hayes, Ian/0000-0003-3649-392X
CR [Anonymous], 1992, The Z Notation
   Armando A, 2005, LECT NOTES COMPUT SC, V3576, P281
   Baeten JCM, 1997, THEOR COMPUT SCI, V177, P381, DOI 10.1016/S0304-3975(96)00253-8
   BAETEN JCM, 1988, INFORM COMPUT, V78, P205, DOI 10.1016/0890-5401(88)90027-2
   Butler M, 2005, LECT NOTES COMPUT SC, V3582, P221
   BUTLER MJ, 1992, THESIS OXFORD U
   Cardelli L, 1998, LECT NOTES COMPUT SC, V1378, P140, DOI 10.1007/BFb0053547
   CHEVALIER Y, 2004, SAPS, P193
   Colvin R., 2007, ACCSTR0701 ARC CTR C
   Colvin R, 2007, LECT NOTES COMPUT SC, V4591, P156
   Colvin R, 2008, J SYST SOFTWARE, V81, P2163, DOI 10.1016/j.jss.2008.04.035
   Colvin R, 2009, LECT NOTES COMPUT SC, V5423, P118
   Dromey R.G., 2005, TICKIT J, V4Q05, P3
   Dromey R G., 2006, Mathematical Frameworks for Component Software: Models for Analysis and Synthesis, P156
   Dromey RG, 2003, I C SOFTW ENG FORM M, P2, DOI 10.1109/SEFM.2003.1236202
   Eugster PT, 2003, ACM COMPUT SURV, V35, P114, DOI 10.1145/857076.857078
   Fischer C., 1999, IFM'99. Proceedings of the 1st International Conference on Integrated Formal Methods, P315
   Formal Systems (Europe) Ltd, 1999, FAIL DIV REF FDR2 US
   Grunske L, 2008, J VISUAL LANG COMPUT, V19, P343, DOI 10.1016/j.jvlc.2007.11.003
   GUREVICH Y, 1990, LECT NOTES COMPUT SC, V440, P176
   Hoare C. A. R., 1998, Unifying Theories of Programming
   Hoare CAR., 1985, Communicating Sequential Processes
   Jones CB., 1990, SYSTEMATIC SOFTWARE
   Larsen K. G., 1991, Journal of Logic and Computation, V1, P761, DOI 10.1093/logcom/1.6.761
   Leuschel M, 2008, LECT NOTES COMPUT SC, V5256, P278, DOI 10.1007/978-3-540-88194-0_18
   Milner R, 1982, CALCULUS COMMUNICATI
   Morgan Carroll, 1994, Programming from specifications
   PAPACOSTANTINOU P, 2008, 19 AUSTR SOFTW ENG C, P61
   Plotkin GD, 2004, J LOGIC ALGEBR PROGR, V60-1, P17, DOI 10.1016/j.jlap.2004.03.002
   POWELL D, 2007, AUSTR SOFTW ENG C
   Roscoe AW, 2008, LECT NOTES COMPUT SC, V5160, P23, DOI 10.1007/978-3-540-85762-4_3
   Roscoe A.W., 1998, THEORY PRACTICE CONC
   RUMBAUGH JAMES., 1998, UNIFIED MODELING LAN
   Schneider S, 2005, FORM ASP COMPUT, V17, P390, DOI 10.1007/s00165-005-0076-7
   Schneider S, 2000, Concurrent and real-time systems
   Smith C, 2004, 19TH INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING, PROCEEDINGS, P398, DOI 10.1109/ASE.2004.1342775
   SMITH G, 1997, LNCS, V1313, P62
   Sun J, 2009, THIRD INTERNATIONAL SYMPOSIUM ON THEORETICAL ASPECTS OF SOFTWARE ENGINEERING, PROCEEDINGS, P127, DOI 10.1109/TASE.2009.32
   Sun J, 2009, LECT NOTES COMPUT SC, V5643, P709, DOI 10.1007/978-3-642-02658-4_59
   Wen L, 2007, LECT NOTES COMPUT SC, V4674, P122
   Winter K, 2004, LECT NOTES COMPUT SC, V2999, P148
   Winter Kirsten, 2010, Proceedings of the 2010 8th IEEE International Conference on Software Engineering and Formal Methods (SEFM 2010), P41, DOI 10.1109/SEFM.2010.13
   WOODCOCK J, 2002, LECT NOTES COMPUTER, V2272, P184, DOI DOI 10.1007/3-540-45648-1_
NR 43
TC 17
Z9 18
U1 0
U2 8
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 1
PY 2011
VL 76
IS 10
SI SI
BP 891
EP 914
DI 10.1016/j.scico.2010.11.007
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 785MK
UT WOS:000292232900005
OA hybrid
DA 2024-07-18
ER

PT J
AU Lutteroth, C
   Draheim, D
   Weber, G
AF Lutteroth, Christof
   Draheim, Dirk
   Weber, Gerald
TI A type system for reflective program generators
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Type safety; Generic programming; Reflection; Model-based generation
AB We describe a type system for a generative mechanism that generalizes the concept of generic types by combining it with a controlled form of reflection. This mechanism makes many code generation tasks possible for which generic types alone would be insufficient. The power of code generation features are carefully balanced with their safety, which enables us to perform static type checks on generator code. This leads to a generalized notion of type safety for generators. (C) 2010 Elsevier B.V. All rights reserved.
C1 [Lutteroth, Christof; Weber, Gerald] Univ Auckland, Dept Comp Sci, Auckland 1020, New Zealand.
   [Draheim, Dirk] Univ Innsbruck, Cent Informat Technol Serv, A-6020 Innsbruck, Austria.
C3 University of Auckland; University of Innsbruck
RP Weber, G (corresponding author), Univ Auckland, Dept Comp Sci, 38 Princes St, Auckland 1020, New Zealand.
EM lutteroth@cs.auckland.ac.nz; draheim@acm.org; gerald@cs.auckland.ac.nz
OI Draheim, Dirk/0000-0003-3376-7489; Lutteroth,
   Christof/0000-0003-0634-7569
CR Aho A V., 1986, Compiler: Principles, Techniques and Tools
   [Anonymous], 2000, Generative programming: methods, tools, and applications
   ATTARDI G, 2001, LNCS, V2192
   ATTARDI G, 2001, LNCS, V2186
   Augustsson L., 1998, Proceedings of the third ACM SIGPLAN international conference on Functional programming, ICFP '98, P239
   BRACHA G, 2001, ADDING GENE IN PRESS
   BRACHA G, 1998, OOPSLA 98
   CALCAGNO C, 2003, LECT NOTES COMPUTER, V2830
   CARDELLI L, 1997, HDB COMPUTER SCI ENG, P2208
   CHIBA S, 1995, OOPSLA 95
   DRAHEIM D, 2004, B0402 FREIE U BERL I
   DRAHEIM D, ACM SIGPLAN NOT, V40
   DRAHEIM D, 2005, P CHINZ 2005 6 INT C
   DRAHEIM D, 2004, FORM ORIENTED ANAL N
   DRAHEIM D, 2003, P 4 INT C SOFTW ENG
   DRAHEIM D, 2005, P ICITA 2005 3 INT C
   FAHNDRICH M, 2006, GPCE 06
   FROST RA, 1994, SIGPLAN NOTICES, V29, P23, DOI 10.1145/181761.181764
   GABRIEL RG, 1993, OBJECT ORIENTED PROG
   Gamma E., 1994, Design patterns: Elements of reusable object-oriented software
   Glück R, 1999, LECT NOTES COMPUT SC, V1706, P326
   HINZE R, 2003, LNCS, V2793
   Huang SS, 2005, LECT NOTES COMPUT SC, V3676, P309
   HUANG SS, 2007, AOSD 07
   HUANG SS, 2008, PLDI 08
   KAY M, 2005, XSL TRANSFORMATIONS
   KICZALES G, 2001, LNCS, V2072
   Kiczales G., 1991, The Art of the Metaobject Protocol
   KOHLBECKER E, 1986, LFP 86
   Leroy Xavier., 2004, OBJECTIVE CAML SYSTE
   LUTTEROTH C, 2006, TEAA 06
   MCNAMARA B, 2000, P 1 WORKSH C TEMPL P
   MICHIE D, 1968, NATURE, V218, P19, DOI 10.1038/218019a0
   NEVEROV G, 2004, LNCS, V3286
   NIZHEGORODOV D, 2000, P ECOOP 2000 WORKSH
   NIZHEGORODOV D, 2002, P ECOOP 02 WORKSH GE
   Norvig P., 1991, Computational Linguistics, V17, P91
   *OBJ MAN GROUP, 2005, MOF 2 0 XMI MAPP SPE
   *OBJ MAN GROUP, 2005, MET FAC MOF 2 0 QUER
   PAIGE R, 1982, ACM T PROGR LANG SYS, V4, P402, DOI 10.1145/357172.357177
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   SHEARD T, 2001, SAIG 01
   SMITH BC, 1984, POPL 84
   SMITH DR, 2004, LNCS, V3286
   STEMPLE D, TYPE SAFE LINGUISTIC
   Taha W, 2000, THEOR COMPUT SCI, V248, P211, DOI 10.1016/S0304-3975(00)00053-0
   TAHA W, 1997, PEPM 97
   VONDINCKLAGE D, 2003, LNCS, V2830
   ZOLYOMI I, 2004, LNCS, V3286
   [No title captured]
NR 50
TC 1
Z9 1
U1 0
U2 3
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAY 1
PY 2011
VL 76
IS 5
SI SI
BP 392
EP 422
DI 10.1016/j.scico.2010.12.002
PG 31
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 748JN
UT WOS:000289387000004
OA Bronze
DA 2024-07-18
ER

PT J
AU Järvi, J
   Freeman, J
AF Jarvi, Jaakko
   Freeman, John
TI C++ lambda expressions and closures
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 23rd Annual ACM Symposium on Applied Computing
CY MAR 16-20, 2008
CL Fortaleza, BRAZIL
SP ACM SIGAC, Univ Fortaleza, Federal Univ Ceara
DE C plus; Closures; Lambda expressions
ID LIBRARY
AB A style of programming that uses higher-order functions has become common in C++, following the introduction of the Standard Template Library (STL) into the standard library. In addition to their utility as arguments to STL algorithms, function parameters are useful as callbacks on GUI events, defining tasks to be executed in a thread, and so forth. C++'s mechanisms for defining functions or function objects are, however, rather verbose, and they often force the function's definition to be placed far from its use. As a result, C++ frustrates programmers in taking full advantage of its own standard libraries. The effective use of modern C++ libraries calls for a concise mechanism for defining small one-off functions in the language, a need that can be fulfilled with lambda expressions.
   This paper describes a design and implementation of language support for lambda expressions in C++. C++'s compilation model, where activation records are maintained in a stack, and the lack of automatic object lifetime management make safe lambda functions and closures challenging: if a closure outlives its scope of definition, references stored in a closure dangle. Our design is careful to balance between conciseness of syntax and explicit annotations to guarantee safety. The presented design is included in the draft specification of the forthcoming major revision of the ISO C++ standard, dubbed C++0x. In rewriting typical C++ programs to take advantage of lambda functions, we observed clear benefits, such as reduced code size and improved clarity. (C) 2009 Elsevier B.V. All rights reserved.
C1 [Jarvi, Jaakko] Texas A&M Univ, Dept Comp Sci, College Stn, TX 77843 USA.
C3 Texas A&M University System; Texas A&M University College Station
RP Järvi, J (corresponding author), Texas A&M Univ, Dept Comp Sci, TAMU 3112, College Stn, TX 77843 USA.
EM jarvi@cs.tamu.edu; jfreeman@cs.tamu.edu
CR [Anonymous], 1999, ECMAScript Language Specification
   Becker P., 2008, N2798080308 ISOIEC J
   BRACHA G, CLOSURES JAVA PROGRA
   Breuel T. M., 1988, USENIX Proceedings. C++ Conference, P293
   DEGUZMAN J, 2002, PHOENIX V1 2 1
   DIMOV P, 2001, BOOST BIND LIB
   *ECMA INT, 2006, ECMA367
   Goldberg A., 1983, Smalltalk 80: The Language and Its Implementation
   Gosling J., 2005, Java Language Specification, Vthird
   GREGOR D, 2001, BOOST FUNCTION
   GREGOR D, 2008, N2676080186 ISOIEC J
   Gregor D., 2006, OOPSLA '06, P291, DOI DOI 10.1145/1167473.1167499
   GREGOR D, 2007, SAC 07, P1101
   *ISO IEC JTC1, 2003, N1487030070 ISO IEC
   Järvi J, 2003, SOFTWARE PRACT EXPER, V33, P259, DOI 10.1002/spe.504
   Järvi J, 2000, LECT NOTES COMPUT SC, V1799, P165
   JARVI J, 2006, N1984060054 ISOIEC J
   JARVI J, 2008, N2658080168 ISOIEC J
   JARVI J, 2002, BOOST LAMBDA LIB
   *LYX TEAM, 2008, LYX DOC PROC VERS 1
   Mcnamara B, 2004, J FUNCT PROGRAM, V14, P429, DOI 10.1017/S0956796803004969
   MERRILL J, 2008, N2541080051 ISOIEC J
   *MICR CORP, 2006, C VERS 3 0 SPEC
   *PYTH SOFTW FDN, 2005, PYTH 2 4 1 DOC
   SAMKO V, 2006, N1958060028 ISOIEC J
   SKALLER JM, 1993, N0295930088 ISOIEC J
   Stepanov A., 1994, HPL9434R1
   STRIEGNITZ J, 2000, 1 WORKSH C TEMPL PRO
   SUTTER H, 2008, TRIP REPORT
   Veldhuizen T., 1995, C++ Report, V7, P26
   WILLCOCK J, 2006, N1968060038 ISOIEC J
   C 0X LANGUAGE SUPPOR
NR 32
TC 9
Z9 9
U1 0
U2 4
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 1
PY 2010
VL 75
IS 9
SI SI
BP 762
EP 772
DI 10.1016/j.scico.2009.04.003
PG 11
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 627NG
UT WOS:000280045900002
DA 2024-07-18
ER

PT J
AU Pirkelbauer, P
   Solodkyy, Y
   Stroustrup, B
AF Pirkelbauer, Peter
   Solodkyy, Yuriy
   Stroustrup, Bjarne
TI Design and evaluation of C plus plus open multi-methods
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 6th International Conference on Generative Programming and Component
   Engineering
CY OCT 01-03, 2007
CL Salzburg, AUSTRIA
SP ACM SIGPLAN, ACM SIGSOFT
DE Multi-methods; Open-methods; Multiple dispatch; Binary method problem;
   Augmenting method problem; Object-oriented programming; Generic
   programming; C plus
AB Multiple dispatch - the selection of a function to be invoked based on the dynamic type of two or more arguments - is a solution to several classical problems in object-oriented programming. Open multi-methods generalize multiple dispatch towards open-class extensions, which improve separation of concerns and provisions for retroactive design. We present the rationale, design, implementation, performance, programming guidelines, and experiences of working with a language feature, called open multi-methods, for C++. Our open multi-methods support both repeated and virtual inheritance. Our call resolution rules generalize both virtual function dispatch and overload resolution semantics. After using all information from argument types, these rules can resolve further ambiguities by using covariant return types. Care was taken to integrate open multi-methods with existing C++ language features and rules. We describe a model implementation and compare its performance and space requirements to existing open multi-method extensions and work-around techniques for C++. Compared to these techniques, our approach is simpler to use, catches more user mistakes, and resolves more ambiguities through link-time analysis, is comparable in memory usage, and runs significantly faster. In particular, the runtime cost of calling an open multi-method is constant and less than the cost of a double dispatch (two virtual function calls). Finally, we provide a sketch of a design for open multi-methods in the presence of dynamic loading and linking of libraries. (C) 2009 Elsevier B.V. All rights reserved.
C1 [Pirkelbauer, Peter; Solodkyy, Yuriy; Stroustrup, Bjarne] Texas A&M Univ, College Stn, TX 77843 USA.
C3 Texas A&M University System; Texas A&M University College Station
RP Pirkelbauer, P (corresponding author), Texas A&M Univ, TAMU 3112, College Stn, TX 77843 USA.
EM peter.pirkelbauer@tamu.edu; yuriys@cs.tamu.edu; bs@cs.tamu.edu
RI Pirkelbauer, Peter/AAQ-2582-2020
OI Pirkelbauer, Peter/0000-0003-4185-5008
CR AGRAWAL R, 1991, OOPSLA 91
   Alexandrescu A., 2001, Modern C++ Design: Generic Programming and Design Patterns Applied
   ALLEN E, 2007, SAC 07
   Allen Eric., 2008, FORTRESS LANGUAGE SP
   AMIEL E, 1994, OOPSLA 94
   [Anonymous], 1973, Simula BEGIN
   [Anonymous], 2000, The C++ Programming Language
   Arnold K., 2005, The Java programming language
   Austern MatthewH., 1998, Generic programming and the STL: Using and extending the C++ Standard Template Library
   Becker P., 2006, C STANDARD LIB EXTEN
   BECKER P, 2009, N2857 C STAND COMM
   Bettini L, 2006, SOFTWARE PRACT EXPER, V36, P581, DOI 10.1002/spe.709
   Bonniot D., 2008, The Nice User's Manual
   BOURDEV L, 2006, WORKSH LIB CENTR SOF
   BOYLAND J, 1997, OOPSLA 97
   Bruce K., 1995, Theory and Practice of Object Systems, V1, P221
   CHAMBERS C, 1992, ECOOP 92
   CHAMBERS C, 1999, OOPSLA 99
   CHAMBERS C, 2004, CECIL LANGUAGE SPECI
   Chambers Craig., 2006, The Diesel Language, specification and rationale
   CLIFTON C, 2000, OOPSLA 00
   Clifton C, 2006, ACM T PROGR LANG SYS, V28, P517, DOI 10.1145/1133651.1133655
   Cormen Thomas H., 2001, INTRO ALGORITHMS
   *ED DES GROUP, 2008, C FRON END
   Flynn C.B., 1999, Reconciling Encapsulation and Dynamic Dispatch via Accessory Functions
   FOOTE B, P EUR C OBJ OR PROGR
   FROST C, 2006, 2006 INT WORKSH FDN
   Gamma Erich, 1995, DESIGN PATTERNS ELEM
   Gibbs M, 2006, SOFTWARE PRACT EXPER, V36, P139, DOI 10.1002/spe.686
   Goldberg A., 1983, Smalltalk 80: The Language and Its Implementation
   GREGOR D, 2006, OOPSLA 06
   GREIF G, 2002, CHINESE DISPAT UNPUB
   *INT STAND ORG, 1994, 1091811994 ISOIEC
   *ISO IEC, 1998, 14882 ISOIEC
   JARVI J, 2006, PLDI 06
   Liskov B., 1987, Oopsla '87
   Lockheed Martin, 2005, JOINT STRIKE FIGHTER
   Meyer B., 1992, Eiffel: The Language
   Millstein T, 2002, INFORM COMPUT, V175, P76, DOI 10.1006/inco.2002.3103
   MILLSTEIN T, 2003, OOPSLA 03
   MILLSTEIN TD, 1999, LNCS, V1628
   MUSCHEVICI R, 2008, OOPSLA 08
   PANIZZI E, MULTIMETHODS SEPARAT
   PIRKELBAUER P, SCI COMPUTE IN PRESS
   Rossum G.V., 2003, Python language reference manual
   SCHORDAN M, 2003, LNCS, V2789
   Shalit A., 1996, The Dylan reference manual: the definitive guide to the new object-oriented dynamic language
   Smith Julian., 2003, Draft proposal for adding Multimethods to C++
   SNYDER A, 1986, OOPSLA 86
   Steele Jr GL, 1990, COMMON LISP LANGUAGE
   STROUSTRUP B, 1994, DESIGN EVOLUTION C A
   STROUSTRUP B, 2005, LNCS, V4339
   Thomas David., 2000, Programming Ruby: the pragmatic programmer's guide
   VISSER J, 2001, OOPSLA 01
   WASSERRAB D, 2006, OOPSLA 01
   WONNACOTT D, 2001, COOTS 01
   WOSS A, 2003, LNCS, V2789
   2001, ITANIUM C ABI TECH R
NR 58
TC 3
Z9 5
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUL 1
PY 2010
VL 75
IS 7
SI SI
BP 638
EP 667
DI 10.1016/j.scico.2009.06.002
PG 30
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 603YE
UT WOS:000278243200009
DA 2024-07-18
ER

PT J
AU Jackson, S
   Devanbu, P
   Ma, KL
AF Jackson, Stoney
   Devanbu, Premkumar
   Ma, Kwan-Liu
TI Stable, flexible, peephole pretty-printing
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT International Workshop on Advanced Software Development Tools and
   Techniques
CY JUL, 2008
CL Paphos, CYPRUS
DE pretty printer; software visualiation; development environment;
   experimental software
AB Programmers working on large software systems are faced with an extremely complex, information-rich environment. To help navigate through this, modern development environments allow flexible, multi-window browsing and exploration of the source code. Our focus in this paper is on pretty-printing algorithms that can display source code in useful, appealing ways in a variety of styles. Our algorithm isflexible, stable, and peepholeefficient. It is flexible in that it is capable of screen -op timi zed layouts that support source code visualization techniques such as fisheye views. The algorithm is peephole-efficient, in that it performs work proportional to the size of the visible window and not the size of the entire file. Finally, the algorithm is stable, in that the rendered view is identical to that which would be produced by formatting the entire file. This work has 2 benefits. First, it enables rendering of source codes in multiple fonts and font sizes at interactive speeds. Second, it also allows the use of powerful (but algorithmically more complex) visualization techniques (such as fish-eye views), again, at interactive speeds.
   We have built a pretty-printing plug-in for Eclipse that allows the use of sophisticated formatting techniques, including such features as multiple fonts and fish-eye views. Our incremental algorithm enables this plug-in to produce readable layouts (without ugly linewrapping) within a wide range of window sizes, at interactive speeds. (c) 2008 Elsevier B.V. All rights reserved.
C1 [Jackson, Stoney] Western New England Coll, Dept Comp Sci & Informat Technol, Springfield, MA 01119 USA.
   [Devanbu, Premkumar; Ma, Kwan-Liu] Univ Calif Davis, Dept Comp Sci, Davis, CA 95616 USA.
C3 Western New England University; University of California System;
   University of California Davis
RP Jackson, S (corresponding author), Western New England Coll, Dept Comp Sci & Informat Technol, 1215 Wilbraham Rd, Springfield, MA 01119 USA.
EM hjackson@wnec.edu; devanbu@cs.ucdavis.edu; ma@cs.ucdavis.edu
RI /AAZ-7265-2020
OI Devanbu, Prem/0000-0002-4346-5276
CR [Anonymous], J PROGRAMMING LANGUA
   BADROS GJ, 2000, COMPUTER NETWORKS, V33
   BAECKER R, 1986, CHI
   BAECKER R, 1988, ICSE
   BALL T, 1996, COMPUTER, V29
   BATES RM, 1981, SIGPLAN NOTICES, V18
   BLASCHEK G, 1989, SOFTWARE PRACTICE EX, V19
   BORRAS P, 1989, SIGPLAN NOTICES, V24
   CHEN P, 1986, LECT NOTES COMPUTER, V236
   CHEN P, 1988, P ACM C DOC PROC SYS
   CHITIL O, 2001, SIGPLAN NOTICES, V24
   COCKBURN A, 2001, INFORM SOFTWARE TECH, V43
   COLLBERG CS, 2000, IEEE INT S VIS LANG
   CORBI TA, 1989, IBM SYSTEMS J, V28
   COUTAZ J, 1984, CMUCS84167
   DEJONGE M, 2001, COSET
   DEJONGE M, 2002, ICSM
   FURNAS GW, 1986, CHI
   HABERMANN A, 1986, IEEE T SOFTWARE ENG
   HUGHES J, 1995, ADV FUNCTIONAL PROGR, V925
   *INRIA, 1994, INRIA CENT PROJ
   JOKINEN MO, 1989, SOFTWARE PRACTICE EX, V19
   KAHL W, 1999, PADL WORKSH PRACTICA
   LEAVENS GT, 1984, SIGPLAN NOTICES, V19
   LIENTZ B, 1978, COMMUNICATIONS ACM, V21
   MIARA RJ, 1983, CACM, V26
   MIKELSONS M, 1981, SIGPLAN NOTICES, V16
   NGUYEN D, 2000, SIGCSE TECHN S COMP
   OPPEN DC, 1980, TOPLAS, V2
   PUGH WW, TR87808 CORN U
   RAYMOND DR, 1992, COMPUTER, V25
   Reps T.W., 1989, SYNTHESIZER GENERATO
   RUCKERT M, 1997, ACM SIGPLAN NOTICES, V32
   SMITH SR, 1984, INT J MAN MACHINE ST, V20
   SWIERSTRA SD, 1998, DESIGN IMPLEMENTATIO
   VANDENBRAND M, 1996, TOSEM
   Wadler Philip, 2003, FUN PROGRAMMING
   WATERS RC, 1983, TOPLAS, V5
NR 38
TC 3
Z9 5
U1 0
U2 1
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 1
PY 2008
VL 72
IS 1-2
BP 40
EP 51
DI 10.1016/j.scico.2007.11.002
PG 12
WC Computer Science, Software Engineering
WE Conference Proceedings Citation Index - Science (CPCI-S); Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 330AX
UT WOS:000257912800005
DA 2024-07-18
ER

PT J
AU Quitadamo, R
   Cabri, G
   Leonardi, L
AF Quitadamo, Raffaele
   Cabri, Giacomo
   Leonardi, Letizia
TI Mobile JikesRVM: A framework to support transparent Java thread
   migration
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT International Conference on Principles and Practices of Programming in
   Java
CY 2006
CL Mannheim, GERMANY
DE Java virtual machine; thread migration; code mobility; JikesRVM;
   distributed applications
AB Today's complex applications must face the distribution of data and code among different network nodes. Computation in distributed contexts is demanding increasingly powerful languages and execution environments, able to provide programmers with appropriate abstractions and tools. Java is a wide-spread language that allows developers to build complex software, even distributed, but it cannot handle the migration of computations (i.e. threads), due to intrinsic limitations of many traditional JVMs. After analyzing the approaches in the literature, this paper presents our thread migration framework (called Mobile JikesRVM), implemented on top of the IBM Jikes Research Virtual Machine (RVM): exploiting some of the innovative techniques in the JikesRVM, we implemented an extension of its scheduler that allows applications to easily capture the state of a running thread and makes it possible to restore it elsewhere (i.e. on a different hardware architecture or operating system), but still with a version of the framework installed). Our thread serialization mechanism provides support for both proactive and reactive migration, available also for multi-threaded Java applications, and tools to deal with the problems of resource relocation management. With respect to previous approaches, we implemented Mobile JikesRVM without recompiling its JVM (Java Virtual Machine) source code, but simply extending JikesRVM functionalities with a full Java package to be imported when thread migration is needed. (C) 2007 Elsevier B.V. All rights reserved.
C1 [Quitadamo, Raffaele; Cabri, Giacomo; Leonardi, Letizia] Univ Modena & Reggio Emilia, Dipartimento Ingn Informat, I-41100 Modena, Italy.
C3 Universita di Modena e Reggio Emilia
RP Quitadamo, R (corresponding author), Univ Modena & Reggio Emilia, Dipartimento Ingn Informat, Via Vignolese 905, I-41100 Modena, Italy.
EM quitadamo.raffaele@unimore.it; cabri.giacomo@unimore.it;
   leonardi.letizia@unimore.it
RI Cabri, Giacomo/M-6723-2015; Leonardi, Letizia/L-9722-2015
OI Cabri, Giacomo/0000-0002-4942-2453; Leonardi,
   Letizia/0000-0003-4035-8560
CR ACHARYA A., 1996, 2 INT WORKSH MOB OBJ
   ALPERN B., 1999, ACM SIGPLAN C OBJ OR
   ALPERN B, 2000, IBM SYSTEM J, V39
   [Anonymous], P 25 ANN JOINT C IEE
   ARNOLD M, 2000, ACM SIGPLAN C OBJ OR, P15
   Balachandran A, 2005, MOBILE NETW APPL, V10, P265, DOI 10.1007/s11036-005-6421-5
   Bouchenak S, 2002, 4662 INRIA
   BOUCHENAK S, 2004, SOFTWARE PRACTICE EX, V34
   BOUCHENAK S, 2003, 2 ACM INT C PRINC PR
   BURKE G., 1999, ACM JAV GRAND C JUN
   CABRI G, 2000, P 2 INT C EXH PRACT
   CHAMBERS C, 1992, STANCS921420 STANF U
   FINK S, 2003, INT S COD GEN OPT SA
   FUGGETTA A, 1998, IEEE T SOFTWARE ENG, V24
   FUNFROCKEN S, 1998, 2 INT WORKSH MOB AG
   Illmann T., 2001, P 5 INT C MOB AG ATL
   Lindholm Tim., 2013, The Java Virtual Machine Specification, Java SE, V7
   PARKA D., 2006, P INT C PRINC PRACT
   QUITADAMO R, 2006, P ACM S APPL COMP SA
   SAKAMOTO T, 2000, 4 INT S MOB AG 2000
   SEKIGUCHI T, 1999, 3 INT C COORD MOD LA
   SOMAN S, 2006, INT C PROGR LANG COM
   SUEZAWA T, 2000, ACM JAV GRAND 2000 C, P2000
   SUN MICROSYSTEMS, IMPR SER PERF EXT
   SURI N, 2000, WORKSH MOB OBJ SYST
   Tanenbaum A.S., 2001, Distributed Systems: Principles and Paradigms, V1st
   TRUYEN E., 2000, 4 INT S MOB AG 2000
   WANG X, 2001, THESIS OHIO STATE U
   ZHU W, IEEE 4 INT C CLUST C
NR 29
TC 2
Z9 2
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 1
PY 2008
VL 70
IS 2-3
BP 221
EP 240
DI 10.1016/j.scico.2007.07.009
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 278EJ
UT WOS:000254266600009
DA 2024-07-18
ER

PT J
AU Fong, PWL
AF Fong, Philip W. L.
TI Reasoning about safety properties in a JVM-like environment
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Java virtual machine; type-based protection mechanism; formal
   verification; safety; access control; stack invariant; confinement
ID JAVA; SYSTEM; MACHINE
AB Type-based protection mechanisms in a JVM-like environment must be administrated by the code consumer at the bytecode level. Unfortunately, formulating a sound static type system for the full JVM bytecode language can be a daunting task. It is therefore counter-productive for the designer of a bytecode-level type system to address the full complexity of the VM environment in the early stage of design.
   In this work, a lightweight modelling tool, Featherweight JVM, is proposed to facilitate the early evaluation of bytecode-level, type-based protection mechanisms and, specifically, their ability to enforce security-motivated stack invariants and confinement properties. Rather than modelling the execution of a specific bytecode stream, Featherweight JVM is a nondeterministic event model that captures all the possible access event sequences that may be generated by a JVM-like environment when well-typed bytecode programs are executed. The effect of deploying a type-based protection mechanism can be modelled by a safety policy that constrains the event sequences produced by the VM model. To evaluate the effectiveness of the protection mechanism, security theorems in the form of state invariants can then be proved in the policy-guarded VM model.
   To demonstrate the utility of the proposed approach, Vitek et al.'s Confined Types has been formulated as a safety policy for the Featherweight JVM, and a corresponding confinement theorem has been established. To reduce class loading overhead, a capability-based reformulation of Confined Types is then studied, and is shown to preserve the confinement theorem. This paper thus provides first evidence on the utility of Featherweight JVM in providing early feedback to the designer of type-based protection mechanisms for JVM-like environments. (c) 2007 Elsevier B.V. All rights reserved.
C1 Univ Regina, Dept Comp Sci, Regina, SK S4S 0A2, Canada.
C3 University of Regina
RP Fong, PWL (corresponding author), Univ Regina, Dept Comp Sci, Regina, SK S4S 0A2, Canada.
EM pwlfong@cs.uregina.ca
OI Fong, Philip/0000-0002-7974-3653
CR [Anonymous], 2000, Computer-Aided Reasoning: An Approach
   [Anonymous], 2001, Java and the Java Virtual Machine: Definition, Verification, Validation
   Banerjee A, 2005, J FUNCT PROGRAM, V15, P131, DOI 10.1017/S0956796804005453
   BANERJEE A, 2003, P 16 IEEE COMP SEC F
   BANERJEE A, 2002, P 15 IEEE COMP SEC F
   BARTHE G, 2005, P TLDI 05, P103
   Bauer L., 2002, P WORKSH FDN COMP SE
   Bierman G. M., 2003, Technical Report UCAMCL-TR-563
   Boyland J, 2001, SOFTWARE PRACT EXPER, V31, P533, DOI 10.1002/spe.370
   BOYLAND J, 2001, P 2001 EUR C OBJ OR, P2
   Clements J, 2004, ACM T PROGR LANG SYS, V26, P1029, DOI 10.1145/1034774.1034778
   CRARY K, 1999, P 26 ACM SIGPLAN SIG, P262
   *ECMA, 2005, ECMA334
   Fournet C, 2003, ACM T PROGR LANG SYS, V25, P360, DOI 10.1145/641909.641912
   Freund SN, 1999, ACM T PROGR LANG SYS, V21, P1196, DOI 10.1145/330643.330646
   Freund SN, 2003, J AUTOM REASONING, V30, P271, DOI 10.1023/A:1025011624925
   Gosling J., 2005, Java Language Specification, Vthird
   GROTHOFF C, 2001, P 16 ACM SIGPLAN C O, P241
   Hamlen KW, 2006, ACM T PROGR LANG SYS, V28, P175, DOI 10.1145/1111596.1111601
   Hartel PH, 2001, ACM COMPUT SURV, V33, P517, DOI 10.1145/503112.503115
   HIGUCHI T, 2003, P ACM INT C FUNCT PR, P227
   Igarashi A, 2001, ACM T PROGR LANG SYS, V23, P396, DOI 10.1145/503502.503505
   Klein G, 2001, CONCURR COMP-PRACT E, V13, P1133, DOI 10.1002/cpe.597
   Ligatti J., 2005, P 10 EUR S RES COMP
   Ligatti J., 2005, J. Inf. Secur., V4, P2, DOI [10.1007/s10207-004-0046-8, DOI 10.1007/S10207-004-0046-8]
   Lindholm Tim., 1999, JAVA VIRTUAL MACHINE, V2nd
   Liu HB, 2005, SCI COMPUT PROGRAM, V57, P253, DOI 10.1016/j.scico.2004.07.004
   Moore JS, 2002, ACM T PROGR LANG SYS, V24, P193, DOI 10.1145/514188.514189
   Moore JS, 2001, USENIX ASSOCIATION PROCEEDINGS JAVA(TM) VIRTUAL MACHINE RESEARCH AND TECHNOLOGY SYMPOSIUM, P91
   MOORE JS, 2001, ECOOP 01 WORKSH FORM
   Morrisett G, 1999, ACM T PROGR LANG SYS, V21, P527, DOI 10.1145/319301.319345
   Necula G.C., 1997, 24 ANN S PRINCIPLES, P106
   NIPKOW T, 2003, J AUTOMATED REASONIN, V30
   NIPKOW T, 2001, P 4 INT C FDN SOFTW
   PHILIP WL, 2005, P 3 ANN C PRIV SEC T
   PHILIP WL, 2004, P 19 ACM SIGPLAN C O, P404
   PHILIP WL, 2004, P 2004 IEEE S SEC PR, P43
   PHILIP WL, 2006, LNCS, V4189, P127
   Pottier F, 2005, ACM T PROGR LANG SYS, V27, P344, DOI 10.1145/1057387.1057392
   Qian ZY, 2000, ACM T PROGR LANG SYS, V22, P638, DOI 10.1145/363911.363915
   Schneider F. B., 2000, ACM Transactions on Information and Systems Security, V3, P30, DOI 10.1145/353323.353382
   Skalka Christian., 2005, International Journal on Information Security, V4, P87, DOI [10.1007/s10207-004-0049-5, DOI 10.1007/S10207-004-0049-5]
   Stata R, 1999, ACM T PROGR LANG SYS, V21, P90, DOI 10.1145/314602.314606
   Vitek J, 2001, SOFTWARE PRACT EXPER, V31, P507, DOI 10.1002/spe.369
   VONOHEIMB D, 2002, P 2002 INT S FORM ME, P89
   Zhao T, 2006, J FUNCT PROGRAM, V16, P83, DOI 10.1017/S0956796805005691
   Zhao T, 2005, 18TH IEEE COMPUTER SECURITY FOUNDATIONS WORKSHOP, PROCEEDINGS, P197
   ZHAO T, 2003, P 18 ANN ACM SIGPLAN, P135
NR 48
TC 0
Z9 1
U1 0
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUL 1
PY 2007
VL 67
IS 2-3
BP 278
EP 300
DI 10.1016/j.scico.2007.04.001
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 192AW
UT WOS:000248174100006
OA Green Published
DA 2024-07-18
ER

PT J
AU Shin, ME
   Goma, H
AF Shin, Michael E.
   Goma, Hassan
TI Software requirements and architecture modeling for evolving non-secure
   applications into secure applications
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 5th International Workshop on System/Software Architectures (IWSSA 2006)
CY JUN 27, 2006
CL Las Vegas, NV
DE evolution; security; application system; software requirements; software
   architecture
AB This paper describes an approach to modeling the evolution of non-secure applications into secure applications in terms of the software requirements model and software architecture model. The requirements for security services are captured separately from application requirements, and the security services are encapsulated in connectors in the software architecture, separately from the components providing functional services. The enterprise architecture is described in terms of use case models, static models, and dynamic models. The software architecture is described in terms of components and connectors, which can be deployed to distributed configurations. By separating application concerns from security concerns, the evolution from a lion-secure application to a secure application can be achieved with less impact on the application. An electronic commerce system is described to illustrate the approach. (C) 2006 Elsevier B.V. All rights reserved.
C1 Texas Tech Univ, Dept Comp Sci, Lubbock, TX 79409 USA.
   George Mason Univ, Dept Informat & Software Engn, Fairfax, VA 22030 USA.
C3 Texas Tech University System; Texas Tech University; George Mason
   University
RP Shin, ME (corresponding author), Texas Tech Univ, Dept Comp Sci, Lubbock, TX 79409 USA.
EM Michael.Shin@ttu.edu; hgomaa@gmu.edu
CR Alexander I, 2003, IEEE SOFTWARE, V20, P58, DOI 10.1109/MS.2003.1159030
   [Anonymous], 1996, Pattern oriented software architecture: a system of patters
   [Anonymous], 2005, ADDISON WESLEY OBJEC
   BIDAN C, 1997, P 2 INT C COORD LANG, P64
   Deng Y, 2003, IEEE T KNOWL DATA EN, V15, P1099, DOI 10.1109/TKDE.2003.1232267
   Ford W., 1997, SECURE ELECT COMMERC
   Gomaa H., 2001, Software Engineering Notes, V26, P69, DOI 10.1145/379377.375252
   Gomaa H., 2004, 9 IEEE INT C ENG COM
   Gomaa H., 2000, DESIGNING CONCURRENT
   Gomaa H., 2005, DESIGNING SOFTWARE P
   GOMAA H, 2002, 8 IEEE INT C ENG COM
   *IBM, 2005, ROS REAL TIM
   JURJENS J, 2002, UML 2002
   Kristensen L. M., 1998, International Journal on Software Tools for Technology Transfer, V2, P98, DOI 10.1007/s100090050021
   LODDERSTEDT T, 2002, 5 INT C UN MOD LANG
   McDermott J., 1999, Proceedings 15th Annual Computer Security Applications Conference (ACSAC'99), P55, DOI 10.1109/CSAC.1999.816013
   Moffett J.D., 2004, CORE SECURITY REQUIR
   PETTIT R, 2006, P INT C SOFTW ENG MA
   PFEEGER CP, 2002, SECURITY COMPUTING
   REN J, 2005, SOFTWARE ENG SECURE, V30
   Rumbaugh J., 2004, UNIFIED MODELING LAN, V2nd
   Sandhu RS, 1996, COMPUTER, V29, P38, DOI 10.1109/2.485845
   Shaw M., 1996, SOFTWARE ARCHITECTUR
   Shin ME, 2005, INT J SOFTW ENG KNOW, V15, P35, DOI 10.1142/S0218194005001896
   SHIN ME, 2002, THESIS G MASON U FAI
   Sindre G, 2005, REQUIR ENG, V10, P34, DOI 10.1007/s00766-004-0194-4
   Sommerville I., 2004, Software Engineering
   SRIVATANAKUL T, 2004, YCS2004375 U YORK
NR 28
TC 17
Z9 18
U1 0
U2 7
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD APR 15
PY 2007
VL 66
IS 1
BP 60
EP 70
DI 10.1016/j.scico.2006.10.009
PG 11
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 168GO
UT WOS:000246511500005
OA hybrid
DA 2024-07-18
ER

PT J
AU Clifton, C
   Leavens, GT
AF Clifton, Curtis
   Leavens, Gary T.
TI MiniMAO<sub>1</sub>:: An imperative core language for studying
   aspect-oriented reasoning
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE aspect-oriented programming; MiniMAO calculus; formal semantics
AB This paper describes MiniMAO(1), a core aspect-oriented language. Unlike previous aspect-oriented calculi and core languages, MiniMAO(1) allows around advice to change the target object of an advised operation before proceeding. MiniMAO(1) accurately models the ways AspectJ allows changing the target object, e.g., at call join points. Practical uses for changing the target object using advice include proxies and other wrapper objects.
   MiniMAO(1) was designed to serve as a core language for studying modular specification and verification in the aspect-oriented paradigm. To this end MiniMAO(1)
   center dot has an imperative, reference-based semantics,
   center dot models the control-flow effects of changing target object bindings with advice, and
   center dot has a safe static type system.
   The first two features make MiniMAO(1) suitable for the study of aspect-oriented mechanisms, such as those found in AspectJ. These features are important for studying the interaction of aspect-oriented language features with modular specification and verification. A statically type-safe language is also important for such research. AspectJ does not have a safe static type system. To achieve static type safety MiniMAO(1) uses a slightly different form of proceed and advice binding than in AspectJ. These changes are sufficient for static type safety, but we do not claim that they are necessary; a less restrictive type system might suffice.
   This paper gives an operational semantics, type system, and proof of soundness for MiniMAO(1). (c) 2006 Elsevier B.V. All rights reserved.
C1 Rose Hulman Inst Technol, Dept Comp Sci & Software Engn, Terre Haute, IN 47803 USA.
   Iowa State Univ, Dept Comp Sci, Ames, IA 50010 USA.
C3 Rose Hulman Institute Technology; Iowa State University
RP Clifton, C (corresponding author), Rose Hulman Inst Technol, Dept Comp Sci & Software Engn, 5500 Wabash Ave, Terre Haute, IN 47803 USA.
EM cclifton@cs.iastate.edu
CR Abadi M., 1996, MONOGRAPHS COMPUTER
   ALDRICH J, 2004, FOAL 2004 P FDN ASP, P7
   [Anonymous], 1981, Technical Report DAIMI FN-19
   Bruns G., 2004, PROC CONCUR 04, P209
   CARDELLI L, 2003, LECT NOTES COMP SCI, V2743
   CLIFTON C, 2004, FOAL 2004 P FDN ASP
   CLIFTON C, 2005, THESIS IOWA STATE U
   CLIFTON C, 2005, FOAL 2005 P FDN ASP, P51
   Dantas DS, 2006, ACM SIGPLAN NOTICES, V41, P383, DOI 10.1145/1111320.1111071
   Douence R., 2001, LECT NOTES COMPUTER, V2192, P170, DOI DOI 10.1007/3-540-45429-2_13
   FELLEISEN M, 1992, THEOR COMPUT SCI, V103, P235, DOI 10.1016/0304-3975(92)90014-7
   Flatt Matthew., 1999, FORMAL SYNTAX SEMANT, V1523, P241, DOI [10.1007/3-540-48737-9_7, DOI 10.1007/3-540-48737-9_7]
   Igarashi A, 1999, ACM SIGPLAN NOTICES, V34, P132, DOI 10.1145/320385.320395
   Jagadeesan R, 2003, LECT NOTES COMPUT SC, V2743, P54
   JAGADEESAN R, 2004, TYPED CALCULUS ASPEC
   Kiczales G, 1997, LECT NOTES COMPUT SC, V1241, P220, DOI 10.1007/BFb0053381
   Kiczales Gregor, 2001, LNCS, V2072, P327, DOI DOI 10.1007/3-540-45337-718
   Masuhara H, 2003, LECT NOTES COMPUT SC, V2743, P2
   Walker D, 2003, ACM SIGPLAN NOTICES, V38, P127, DOI 10.1145/944746.944718
   Wand M, 2004, ACM T PROGR LANG SYS, V26, P890, DOI 10.1145/1018203.1018208
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
NR 21
TC 21
Z9 25
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 15
PY 2006
VL 63
IS 3
SI SI
BP 321
EP 374
DI 10.1016/j.scico.2006.02.009
PG 54
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 110CL
UT WOS:000242355800006
DA 2024-07-18
ER

PT J
AU Charpentier, M
AF Charpentier, M
TI Composing invariants
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 12th International Symposium of Formal Methods Europe
CY SEP 08-14, 2003
CL PISA, ITALY
SP Formal Methods Europe, CoLogNET, Microsoft, Telelogic, Metaframe, ISTI CNR, ERCIM, Epson, Data Port
DE reactive and concurrent systems; formal specification; temporal logic;
   compositional verification; invariants; software components
ID TRANSFORMERS
AB We explore the question of the composition of invariance specifications in a context of concurrent and reactive systems. Depending on how compositionality is stated and how invariants are defined, invariance specifications may or may not be compositional. This article first examines two classic forms of invariants and their compositional properties. After pointing out what we see as deficiencies of these two kinds of invariants, two new forms are defined and shown to have useful compositional properties that the more classic forms do not enjoy. The last form, in particular, is shown to be well suited to situations where none of the other three is adapted. (c) 2005 Elsevier B.V. All rights reserved.
C1 Univ New Hampshire, Dept Comp Sci, Durham, NH 03824 USA.
C3 University System Of New Hampshire; University of New Hampshire
RP Univ New Hampshire, Dept Comp Sci, Durham, NH 03824 USA.
EM charpov@cs.unh.edu
CR ABADI M, 1993, ACM T PROGR LANG SYS, V15, P73, DOI 10.1145/151646.151649
   ABADI M, 1995, ACM T PROGR LANG SYS, V17, P507, DOI 10.1145/203095.201069
   [Anonymous], 1992, TEMPORAL LOGIC REACT, DOI DOI 10.1007/978-1-4612-0931-7
   Bjorner N, 1997, THEOR COMPUT SCI, V173, P49, DOI 10.1016/S0304-3975(96)00191-0
   Chandy K.M., 1988, PARALLEL PROGRAM DES
   CHANDY KM, 1995, SCI COMPUT PROGRAM, V24, P129, DOI 10.1016/0167-6423(94)00033-B
   Chandy KM, 2002, FORM METHOD SYST DES, V20, P7, DOI 10.1023/A:1012952311559
   CHANDY KM, 2000, REASONING PROGRAM CO
   Charpentier M, 2004, ACTA INFORM, V40, P265, DOI 10.1007/s00236-003-0130-y
   Charpentier M, 2002, LECT NOTES COMPUT SC, V2306, P1
   CHARPENTIER M, 1999, LECT NOTES COMPUTER, V1586, P1215
   Cohen E, 2003, MG COMP SCI, P57
   COHEN E, 1992, THESIS U TEXAS AUSTI
   COLLETTE P, 1954, THESIS U CATHOLIQUE
   de Roever W. P., 1998, LECT NOTES COMPUTER, V1536
   de Roever Willem-Paul, 2001, Concurrency Verification: Introduction to Compositional and Noncompositional Proof Methods
   Dijkstra EdsgerW., 1990, TEXTS MONOGRAPHS COM
   Fiadeiro J. L., 1995, Theory and Formal Methods of Computing 94. Proceedings of the Second Imperial College Workshop, P235
   Finkbeiner B, 1998, LECT NOTES COMPUT SC, V1536, P239, DOI 10.1007/3-540-49213-5_9
   Hoare C. A. R., 1990, PARBASE-90 International Conference on Databases, Parallel Architectures and Their Applications (Cat. No.90CH2728-4), P304, DOI 10.1109/PARBSE.1990.77155
   Hoare C. A. R., 1998, Unifying Theories of Programming
   Hoare C.A.R., 1984, Communicating Sequential Processes
   Jonsson B, 1996, THEOR COMPUT SCI, V167, P47, DOI 10.1016/0304-3975(96)00069-2
   LAMPORT L, 1994, ACM T PROGR LANG SYS, V16, P872, DOI 10.1145/177492.177726
   Lamport L, 1998, LECT NOTES COMPUT SC, V1536, P402
   Leino K.R.M., 2000, ESC JAVA USERS MANUA
   Meier D, 2000, THEOR COMPUT SCI, V243, P339, DOI 10.1016/S0304-3975(98)00233-3
   Misra J., 1995, Journal of Computer and Software Engineering, V3, P239
   Misra J., 1995, Journal of Computer and Software Engineering, V3, P273
   MISRA J, 1990, NOTES UNITY
   Misra J., 2001, A Discipline of Multiprogramming
   MULLER P, 2001, LNCS, V2262
   OWICKI S, 1976, ACTA INFORM, V6, P319, DOI 10.1007/BF00268134
   Pnueli A., 2001, LNCS, V2031, P82
   Sanders B. A., 1991, Formal Aspects of Computing, V3, P189, DOI 10.1007/BF01898402
   UDINK RT, 1995, THESIS UTRECHT U
   Xu Qiwen., 1997, Formal Aspects of Computing, V9, P149
NR 37
TC 2
Z9 2
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAY
PY 2006
VL 60
IS 3
BP 221
EP 243
DI 10.1016/j.scico.2005.08.001
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 037QA
UT WOS:000237160600001
OA Bronze
DA 2024-07-18
ER

PT J
AU Núñez, M
   Rodríguez, I
   Rubio, F
AF Núñez, M
   Rodríguez, I
   Rubio, F
TI Formal specification of multi-agent e-barter systems
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE e-barter; formal methods; process algebras; Pareto optimum
ID GAME-THEORY
AB An e-barter multi-agent system consists of a set of agents that exchange goods. These agents may perform multilateral exchanges involving several goods. In particular, money can be one of these goods. Each agent is endowed with a utility function indicating the preferences of the respective user. In order to improve the performance, these barter systems are structured in a hierarchical form. Initially agents are grouped, according to localities, into local markets. Once a local market gets completed, that is, no more exchanges are possible, the local market itself becomes a new agent. The preferences of this agent, given by a new utility function, represent the individual preferences of its former customer agents. Then, local markets exchange goods in a higher order market until it gets completed. The process is iterated, in a bottom-up fashion, until the global market embracing all the agents in the system gets completed as well.
   We provide a formal language, based on classical process algebras, for specifying and analyzing e-barter systems. We also study properties of e-barter systems represented in our notation. In particular, we show that the final distribution of goods in a hierarchical e-barter system is a Pareto optimum. In other words, we will be able to prove that economic efficiency is not lost by considering our hierarchical structure instead of a single market. (c) 2005 Elsevier B.V. All rights reserved.
C1 Univ Complutense Madrid, Fac Informat, Dept Sistemas Informat & Programac, E-28040 Madrid, Spain.
C3 Complutense University of Madrid
RP Univ Complutense Madrid, Fac Informat, Dept Sistemas Informat & Programac, E-28040 Madrid, Spain.
EM mn@sip.ucm.es; isrodrig@sip.ucm.es; fernando@sip.ucm.es
RI Rodriguez, Ismael/C-7812-2019; Rubio, Fernando/H-6334-2015; Núñez,
   Manuel/B-6889-2008; Rodriguez, Ismael/H-4657-2015
OI Rubio, Fernando/0000-0002-8969-6002; Núñez, Manuel/0000-0001-9808-6401;
   Rodriguez, Ismael/0000-0002-7748-7780
CR Bacchus F., 1995, Uncertainty in Artificial Intelligence. Proceedings of the Eleventh Conference (1995), P3
   BAETEN JCM, 1990, CAMBRIDGE TRACTS COM, V18
   Bergstra J.A., 2001, HDB PROCESS ALGEBRA
   CAVALLI A, 2004, 19 ACM S APPL COMP S, P795
   Cheng J. Q., 1998, Computational Economics, V12, P1, DOI 10.1023/A:1008654125853
   Doyle J., 2002, AAAI WORKSH PREF AI, P33
   Eymann T., 2001, LNCS, V2232, P63
   GROOTE JF, 1993, THEOR COMPUT SCI, V118, P263, DOI 10.1016/0304-3975(93)90111-6
   Guttman RH, 1998, KNOWL ENG REV, V13, P147, DOI 10.1017/S0269888998002082
   Hoare CAR., 1985, Communicating Sequential Processes
   Kraus S, 1997, ARTIF INTELL, V94, P79, DOI 10.1016/S0004-3702(97)00025-8
   KUROSE JF, 1989, IEEE T COMPUT, V38, P705, DOI 10.1109/12.24272
   Lang J, 2002, AUTON AGENT MULTI-AG, V5, P329, DOI 10.1023/A:1015508524218
   Lomuscio A. R., 2001, LECT NOTES ARTIF INT, P19
   López N, 2002, LECT NOTES COMPUT SC, V2346, P217
   LOPEZ N, 2003, 18 ACM S APPL COMP S, P587
   Mas-Colell A., 1995, MICROECONOMIC THEORY, V1
   Milner R., 1989, Communication and concurrency
   Núñez M, 2001, INT FED INFO PROC, V69, P169
   Núñez M, 2002, LECT NOTES COMPUT SC, V2529, P1
   NUNEZ R, 2001, COMMUNICATION CONCUR, P169
   Parkes DC, 2000, SEVENTEENTH NATIONAL CONFERENCE ON ARTIFICIAL INTELLIGENCE (AAAI-2001) / TWELFTH INNOVATIVE APPLICATIONS OF ARTIFICIAL INTELLIGENCE CONFERENCE (IAAI-2000), P74
   Parsons S, 2002, AUTON AGENT MULTI-AG, V5, P243, DOI 10.1023/A:1015575522401
   Rasmusson L, 1999, KNOWL ENG REV, V14, P143, DOI 10.1017/S026988899914205X
   Sandholm T., 1998, Cooperative Information Agents II. Learning, Mobility and Electronic Commerce for Information Discovery on the Internet. Second International Workshop, CIA'98. Proceedings, P113, DOI 10.1007/BFb0053679
   Shen Q., 2002, AAAI WORKSH PREF AI, P39
   Stirling WC, 2002, AUTON AGENT MULTI-AG, V5, P305, DOI 10.1023/A:1015556407380
   Tennenholtz M, 2002, LECT NOTES ARTIF INT, V2403, P49, DOI 10.1007/3-540-45634-1_4
   Varian H, 1995, USENIX WORKSH EL COM
   WOOLDRIDGE M, 1995, INTELLIGENT AGENTS T, V10, P115
   [No title captured]
NR 31
TC 11
Z9 11
U1 0
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD AUG
PY 2005
VL 57
IS 2
BP 187
EP 216
DI 10.1016/j.scico.2005.01.002
PG 30
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 949PY
UT WOS:000230801800003
DA 2024-07-18
ER

PT J
AU Roubtsova, E
   Roubtsov, S
AF Roubtsova, E
   Roubtsov, S
TI Behavioural inheritance in the UML to model software product lines
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE software product line; architectural design; behavioural inheritance;
   UML
AB Traditional product line approaches struggle with complexity and weak evolution support. We propose an evolutionary software product line modelling approach based on controllable inheritance of product line members specifications. Instead of a predefined product line architecture we use hierarchies of implemented product specifications plus correctness control of product model transformations. The approach is supported by an appropriate tool prototype. (C) 2004 Elsevier B.V. All rights reserved.
C1 Eindhoven Univ Technol, NL-5600 MB Eindhoven, Netherlands.
   VTT Elect, FIN-95071 Oulu, Finland.
C3 Eindhoven University of Technology; VTT Technical Research Center
   Finland
RP Eindhoven Univ Technol, POB 513,Den Dolech 2, NL-5600 MB Eindhoven, Netherlands.
EM E.Roubtsova@tue.nl; S.Roubtsov@tue.nl
RI Roubtsova, Ella Evguenievna/AAX-9330-2021
OI Roubtsova, Ella Evguenievna/0000-0002-4067-3088
CR [Anonymous], 1990, Process Algebra
   Basten T, 2001, J LOGIC ALGEBR PROGR, V47, P47, DOI 10.1016/S1567-8326(00)00004-7
   BECKER M, 2003, P ISR ASS THEOR LING, P19
   BOSCH J, 2002, 2 SOFTW PROD LIN C S, P257
   BOSCH J, 2000, DESIGN REUSE SOFTWAR
   Boschma JH, 2001, P SOC PHOTO-OPT INS, V4571, P45, DOI 10.1117/12.444168
   Cheesman J., 2001, UML Components A Simple Process for Specifying Component Based Software
   CLEMENTS P, 2000, SOFTWARE PRODUCT LIN
   D'Souza DesmondF., 1999, OBJECTS COMPONENTS F
   Dobrica L., 2000, STRATEGY ANAL PRODUC
   DONOHOE P, 2000, SOFTWARE PRODUCT LIN
   Eixelsberger W, 1998, PROC INT CONF SOFTW, P508, DOI 10.1109/ICSE.1998.671617
   GEPPERT B, 2002, INT WORKSH REQ ENG P, P1
   Goodrich M.T., 2002, ALGORITHM DESIGN FDN
   IHME T, 1999, LECT NOTES COMPUTER, V1743, P119
   Jonkers H, 2001, WORKING IEEE/IFIP CONFERENCE ON SOFTWARE ARCHITECTURE, PROCEEDINGS, P113, DOI 10.1109/WICSA.2001.948418
   *OBJ MAN GROUP, 2003, MOD DRIV ARCH GUID
   *OBJ MAN GROUP, 1999, UML SPEC VERS 1 3
   ROUBTSOV SA, 2003, WORKSH SOFTW VAR MAN, P62
   ROUBTSOV SA, 2003, P INT WORKSH EV LARG, P13
   ROUBTSOVA E, 2003, INT WORKSH FORM METH, V80, P139
   ROUBTSOVA E, 2001, LECT NOTES COMPUTER, V2185, P457
   ROUBTSOVA E, 2003, ELECT NOTES THEORETI, V72
   Svahnberg M, 1999, J SOFTW MAINT-RES PR, V11, P391, DOI 10.1002/(SICI)1096-908X(199911/12)11:6<391::AID-SMR199>3.0.CO;2-8
   Szyperski C., 2002, COMPONENT SOFTWARE, V2nd
   van Gurp J, 2002, J SYST SOFTWARE, V61, P105, DOI 10.1016/S0164-1212(01)00152-2
   van Ommering R, 2002, LECT NOTES COMPUT SC, V2290, P51
   van Ommering R, 2000, COMPUTER, V33, P78, DOI 10.1109/2.825699
   VANOMMERING R, 2002, 2 SOFTW PROD LIN C S, P328
   ZHAO L, 2000, P 33 INT C SYST SCI, P313
   [No title captured]
NR 31
TC 1
Z9 1
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC
PY 2004
VL 53
IS 3
BP 409
EP 434
DI 10.1016/j.scico.2003.04.008
PG 26
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 863UY
UT WOS:000224590100008
OA Bronze
DA 2024-07-18
ER

PT J
AU van der Hoek, A
AF van der Hoek, A
TI Design-time product line architectures for any-time variability
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
AB Most solutions for introducing variability in a software system are singular: they support one particular point in the software life cycle at which variability can be resolved to select a specific instance of the system. The presence of significantly increased and dissimilar levels of variability in today's software systems requires a flexible approach that supports selection of a system instance at any point in the life cycle-from statically at design time to dynamically at run time. This paper introduces our approach to supporting any-time variability, an approach based on the ubiquitous use of a product line architecture as the organizing abstraction throughout the lifetime of a software system. The product line architecture specifies the variabilities in a system, both in terms of space (captured as explicit variation points) and time (captured as explicit versions of architectural elements). A system instance can be selected at any point in time by providing a set of desired features, expressed as name-value pairs, to an automated selector tool. We introduce our overall approach, discuss our representation and tools for expressing and managing variability, and demonstrate their use with three representative examples of any-time variability. (C) 2004 Elsevier B.V. All rights reserved.
C1 Univ Calif Irvine, Dept Informat, Donald Bren Sch Informat & Comp Sci, Irvine, CA 92697 USA.
C3 University of California System; University of California Irvine
RP Univ Calif Irvine, Dept Informat, Donald Bren Sch Informat & Comp Sci, Irvine, CA 92697 USA.
EM andre@ics.uci.edu
CR Atkinson Colin., 2002, COMPONENT BASED PROD
   Bailey E., 1997, MAXIMUM RPM
   BEUCHE D, 2003, P WORKSH SOFTW VAR M, P72
   Bosch J., 2000, Design and Use of Software Architectures: Adopting and Evolving a Product-Line Approach
   BURROWS C, 1998, OVUM EVALUATES CONFI
   Cardone R., 2002, 1 INT C ASPECT ORIEN, P76
   Clements P., 2002, Software product lines
   Conradi R, 1998, ACM COMPUT SURV, V30, P232, DOI 10.1145/280277.280280
   Dashofy EM, 2002, ICSE 2002: PROCEEDINGS OF THE 24TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P266, DOI 10.1109/ICSE.2002.1007974
   Dashofy Eric M, 2002, P 1 WORKSH SELF HEAL, P21
   DOLSTRA E, 2003, P WORKSH SOFTW VAR M, P119
   GARD M, 2003, INT C SOFTW MAINT 20, P358
   Hall R. S., 1999, Proceedings of the 1999 International Conference on Software Engineering (IEEE Cat. No.99CB37002), P174, DOI 10.1109/ICSE.1999.841007
   HEIMBIGNER DM, 1999, P 5 IEEE INT C ENG C
   Kang K. C., 1990, Technical Report
   Kiselev I., 2002, ASPECT ORIENTED PROG
   Krueger C. W., 2002, Software Product Lines. Second International Conference, SPLC 2. Proceedings (Lecture Notes in Computer Science Vol. 2370), P37
   Medvidovic N., 1999, Proceedings of the 1999 International Conference on Software Engineering (IEEE Cat. No.99CB37002), P44, DOI 10.1109/ICSE.1999.840994
   Northrop LM, 2001, PROC INT CONF SOFTW, P667, DOI 10.1109/ICSE.2001.919150
   PERRY DE, 1998, P 2 INT WORKSH DEV E
   Shaw M., 1996, SOFTWARE ARCHITECTUR
   SPECK A, 2002, P 6 INT C INT DES PR
   SVAHNBERG M, 2002, TAXONOMY VARIABILITY
   Turner CR, 1999, J SYST SOFTWARE, V49, P3, DOI 10.1016/S0164-1212(99)00062-X
   van Gurp J, 2001, WORKING IEEE/IFIP CONFERENCE ON SOFTWARE ARCHITECTURE, PROCEEDINGS, P45, DOI 10.1109/WICSA.2001.948406
   van Ommering R, 2002, ICSE 2002: PROCEEDINGS OF THE 24TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P255, DOI 10.1109/ICSE.2002.1007973
   van Ommering R, 2000, COMPUTER, V33, P78, DOI 10.1109/2.825699
   VANDERHOEK A, 2001, P 8 EUR SOFTW ENG C, P1
   VANDERWESTHUIZE.C, 2002, 3 WORK IEEE IFIP C S, P95
   VANGURP J, 2003, P WORKSH SOFTW VAR M
NR 30
TC 27
Z9 31
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC
PY 2004
VL 53
IS 3
BP 285
EP 304
DI 10.1016/j.scico.2003.04.003
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 863UY
UT WOS:000224590100003
DA 2024-07-18
ER

PT J
AU von Wright, J
AF von Wright, J
TI Towards a refinement algebra
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Kleene algebra; refinement; predicate transformers; iteration
ID KLEENE ALGEBRA; CALCULUS; TESTS
AB Kleene algebra with tests (KAT) has proved to be useful for reasoning about programs in a partial correctness framework. We describe demonic refinement algebra (DRA), a variation of KAT for total correctness and illustrate its modelling and reasoning power with a number of applications and examples. (C) 2004 Elsevier B.V. All rights reserved.
C1 Abo Akad Univ, FIN-20520 Turku, Finland.
   Turku Ctr Comp Sci, FIN-20520 Turku, Finland.
C3 Abo Akademi University
RP Abo Akad Univ, Lemminkaisenkatu 14, FIN-20520 Turku, Finland.
EM jwright@abo.fi
CR AARTS C, 1995, INFORM PROCESS LETT, V53, P131, DOI 10.1016/0020-0190(94)00195-5
   [Anonymous], 1981, SCI PROGRAMMING, DOI DOI 10.1007/978-1-4612-5983-1
   Back R.-J., 2000, Formal Aspects of Computing, V12, P313, DOI 10.1007/s001650070008
   Back R.-J., 1998, Refinement Calculus
   Back R.J.R., 1980, Mathematical Center Tracts, V131
   BACK RJ, 1991, STRUCT PROGRAM, V12, P17
   BACK RJ, 1989, PARLE C PAR ARCH LAN
   Back RJR, 1999, ACTA INFORM, V36, P295, DOI 10.1007/s002360050163
   BACKHOUSE RC, 1975, J I MATH APPL, V15, P161
   Bergstra JA, 2001, THEOR COMPUT SCI, V269, P203, DOI 10.1016/S0304-3975(00)00413-8
   CHEN W, 1986, 8903 CS U GRON DEP M
   COHEN E, 1994, UNPUB HYPOTHESES KLE
   COHEN E, 2000, LECT NOTES COMPUTER, V1837
   de Bakker Jaco., 1980, Mathematical Theory of Program Correctness
   Dijkstra E. W., 1976, A Discipline of Pro-gramming
   Dijkstra RM, 2000, SCI COMPUT PROGRAM, V37, P3, DOI 10.1016/S0167-6423(99)00021-0
   Gardiner P. H. B., 1993, Formal Aspects of Computing, V5, P367, DOI 10.1007/BF01212407
   Hayes I, 2002, SCI COMPUT PROGRAM, V43, P161, DOI 10.1016/S0167-6423(02)00024-2
   Kozen D, 1997, ACM T PROGR LANG SYS, V19, P427, DOI 10.1145/256167.256195
   Kozen D, 2000, LECT NOTES ARTIF INT, V1861, P568
   Kozen Dexter, 2000, ACM Trans. Comput. Log., V1, P60, DOI DOI 10.1145/343369.343378
   MANASSE MS, 1984, 1127184090909TM AT T
   Morgan Carroll, 1994, Programming from specifications
   VANDESNEPSCHEUT JL, 1993, CSTR9319 CALTECH
   VONWRIGHT J, 1991, INFORM PROCESS LETT, V37, P95, DOI 10.1016/0020-0190(91)90141-4
   VONWRIGHT J, 2002, LECT NOTES COMPUTER, V2386
NR 26
TC 71
Z9 71
U1 0
U2 1
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAY
PY 2004
VL 51
IS 1-2
BP 23
EP 45
DI 10.1016/j.scico.2003.09.002
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 817WR
UT WOS:000221208100003
DA 2024-07-18
ER

PT J
AU Monniaux, D
AF Monniaux, D
TI Abstracting cryptographic protocols with tree automata
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 6th International Symposium on Static Analysis
CY SEP 22-24, 1999
CL VENICE, ITALY
SP EALPS, ALP, CNR, Compulog, Ca Foscari Univ, Padova Univ
AB Cryptographic protocols have so far been analyzed for the most part by means of testing (which does not yield proofs of secrecy) and theorem proving (costly). We propose a new approach, based on abstract interpretation and using regular tree languages. The abstraction we use seems fine-grained enough to be able to certify some protocols. Both the concrete and abstract semantics of the protocol description language and implementation issues are discussed in the paper. (C) 2003 Elsevier Science B.V. All rights reserved.
C1 Ecole Normale Super, Lab Informat, F-75230 Paris 5, France.
   SRI Int, Comp Sci Lab, Menlo Pk, CA 94025 USA.
C3 Universite PSL; Ecole Normale Superieure (ENS); SRI International
RP Ecole Normale Super, Lab Informat, 45 Rue Ulm, F-75230 Paris 5, France.
EM david.monniaux@ens.fr
CR Abadi M, 1997, LECT NOTES COMPUT SC, V1243, P59
   Abadi M, 1999, J ACM, V46, P749, DOI 10.1145/324133.324266
   Abadi M., 1991, Proceedings of the Tenth Annual ACM Symposium on Principles of Distributed Computing, P201, DOI 10.1145/112600.112618
   ABADI M, 2001, LECT NOTES COMPUTER
   ABADI M, 1997, 14 S THEOR ASP COMP
   ABADI M, 1998, 149 COMP SYST RES CT
   AIKEN A, 1992, PROCEEDINGS OF THE SEVENTH ANNUAL IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P329, DOI 10.1109/LICS.1992.185545
   AMADIO R, 2000, 3915 INRIA
   [Anonymous], 1995, POETICA
   [Anonymous], 1996, LNCS
   [Anonymous], 1991, P 23 ANN ACM S THEOR
   BURROWS M, 1989, 39 DIG EQ CORP SYST
   CERVESATO I, 1999, P 12 COMP SEC FDN WO
   Clarke EM, 1999, MODEL CHECKING, P1
   Comon H., TREE AUTOMATA TECHNI
   COUSOT P, 1992, J LOGIC PROGRAM, V13, P103, DOI 10.1016/0743-1066(92)90030-7
   COUSOT P, 1978, THESIS U SCI MEDICAL
   CRAIGEN D, 1996, TR96550805 ORA
   FAHNDRICH M, 1998, BANE ANAL PROGRAMMER
   GENET T, 1998, LECT NOTES COMPUTER, V1379
   GENET T, 2000, LECT NOTES ARTIFICIA, V1831
   GOUBAULTLARRECQ J, 2000, LECT NOTES COMPUTER, V1800
   HANLEY S, DNA OVERVIEW DISCUSS
   JOUANNAUD JP, 1990, HDB THEORETICAL COMP, VB
   Kindred D, 1996, PROCEEDINGS OF THE SECOND USENIX WORKSHOP ON ELECTRONIC COMMERCE, P41
   KLARLUND N, 1998, MONA VERSION 1 3 USE
   LI G, 1990, THESIS U CAMBRIDGE C
   LI G, 1995, 5 INT WORK C DEP COM
   LI G, 1990, IEEE S RES SEC PRIV, P234
   LOWE G, 1998, 11 COMP SEC FDN WORK
   Marrero W, 1997, CMUSCS97139
   MAUBORGNE L, 2000, THESIS ECOLE POLYTEC
   MEADOWS C, 1996, J LOGIC PROGRAMMING, V26
   MILLEN JK, CAPSL COMMON AUTHENT
   MILLEN JK, 1990, P 1984 S SEC PRIV SS, P134
   MONNIAUX D, 1999, 12 COMP SEC FDN WORK
   MONNIAUX D, 1999, LECT NOTES COMPUTER, V1694
   Schneier B., 2015, APPL CRYPTOGRAPHY, VSecond
   Schumann J, 1997, LECT NOTES ARTIF INT, V1249, P87
   Song DXD, 1999, P IEEE CSFW, P192, DOI 10.1109/CSFW.1999.779773
   SYVERSON P, 1993, 1ST P ACM C COMP COM, P97
   SYVERSON P, 1999, ELECT NOTES THEORET, V20
   SYVERSON PF, 1994, 1994 IEEE COMPUTER SOCIETY SYMPOSIUM ON RESEARCH IN SECURITY AND PRIVACY, PROCEEDINGS, P14
NR 43
TC 12
Z9 13
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAY-JUN
PY 2003
VL 47
IS 2-3
BP 177
EP 202
AR PII S0167-6423(02)00132-6
DI 10.1016/S0167-6423(02)00132-6
PG 26
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 664CQ
UT WOS:000182044500005
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Krijnen, JOG
   Chakravarty, MMT
   Keller, G
   Swierstra, W
AF Krijnen, Jacco O. G.
   Chakravarty, Manuel M. T.
   Keller, Gabriele
   Swierstra, Wouter
TI Translation certification for smart contracts
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Compiler correctness; Translation validation; Certified compilation;
   Smart contracts
ID IMPLEMENTATION
AB Compiler correctness is an old problem, but with the emergence of smart contracts on blockchains that problem presents itself in a new light. Smart contracts are self-contained pieces of software that control (valuable) assets in an adversarial environment; once committed to the blockchain, these smart contracts cannot be modified. Smart contracts are typically developed in a high-level contract language and compiled to low-level virtual machine code before being committed to the blockchain. For a smart contract user to trust a given piece of low-level code on the blockchain, they must convince themselves that (a) they are in possession of the matching source code and (b) that the compiler has correctly translated the source code to the given low-level code. Classic approaches to compiler correctness tackle the second point. We argue that translation certification also squarely addresses the first. We describe the proof architecture of a translation certification framework and demonstrate how we can model the compilation pipeline as a sequence of translation relations. We give a detailed account of such relations for most passes of the Plutus Tx compiler, which we formalised in Coq. This approach facilitates a modular verification methodology and is robust in the face of an evolving compiler implementation.
C1 [Krijnen, Jacco O. G.; Keller, Gabriele; Swierstra, Wouter] Univ Utrecht, Heidelberglaan 8, NL-3584 CS Utrecht, Netherlands.
   [Chakravarty, Manuel M. T.] IOG Singapore Pte Ltd, 4 Battery Rd,25-01 Bank China Bldg, Singapore, Singapore.
C3 Utrecht University
RP Krijnen, JOG (corresponding author), Univ Utrecht, Heidelberglaan 8, NL-3584 CS Utrecht, Netherlands.
EM j.o.g.krijnen@uu.nl; manuel.chakravarty@iohk.io; g.k.keller@uu.nl;
   w.s.swierstra@uu.nl
FU IOG; NWO [ENPPS.LIFT.019.032]
FX This work was jointly funded by IOG and NWO in the project on A
   certifying compiler for smart contracts (ENPPS.LIFT.019.032) .
   Furthermore, we would like to thank Michael Peyton Jones for his
   feedback and Joris Dral for his contributions in the Coq implementation.
CR Abadi M., 1993, Types for the Scott numerals
   Ahmed A, 2006, LECT NOTES COMPUT SC, V3924, P69
   Anand A., 2017, 3 INT WORKSHOP COQ P
   Annenkov D, 2020, CPP '20: PROCEEDINGS OF THE 9TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS, P215, DOI 10.1145/3372885.3373829
   [Anonymous], 1981, GI-11. Jahrestagung
   Atzei N, 2017, LECT NOTES COMPUT SC, V10204, P164, DOI 10.1007/978-3-662-54455-6_8
   Barras B., 1997, Ph.D. thesis
   Barthe G, 2014, ACM SIGPLAN NOTICES, V49, P193, DOI 10.1145/2535838.2535847
   Bernardo Bruno, 2020, Formal Methods. FM 2019 International Workshops. Revised Selected Papers. Lecture Notes in Computer Science (LNCS 12232), P368, DOI 10.1007/978-3-030-54994-7_28
   Bertot Yves, 2013, Interactive theorem proving and program development: Coq'Art: the calculus of inductive constructions
   Bhargavan K, 2016, PROCEEDINGS OF THE 2016 ACM WORKSHOP ON PROGRAMMING LANGUAGES AND ANALYSIS FOR SECURITY (PLAS'16), P91, DOI 10.1145/2993600.2993611
   Breitner J, 2018, PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES, DOI 10.1145/3236784
   Buterin V., 2016, CRITICAL UPDATE Re: DAO Vulnerability
   Chapman J., 2019, LNCS, V1825
   Dral J., 2022, Master's thesis
   GHC Team, GHC 9.0 user manual
   Gonthier Georges, 2009, Ph.D. Dissertation
   IOHK, The Plutus platform and Marlowe 1.0.0 documentation
   Jones MP, 2019, LECT NOTES COMPUT SC, V11825, P414, DOI 10.1007/978-3-030-33636-3_15
   Kanabar H., 2023, P ACM PROGR LANG 7 P, P952
   Krijnen Jacco O. G., 2022, Functional and Logic Programming: 16th International Symposium, FLOPS 2022, Proceedings. Lecture Notes in Computer Science (13215), P94, DOI 10.1007/978-3-030-99461-7_6
   Kumar R, 2014, ACM SIGPLAN NOTICES, V49, P179, DOI 10.1145/2535838.2535841
   Leroy X., 2016, ERTS 2016 EMBEDDED R
   Li J.M., 2021, P ACM PROGR LANG 5 I, P1
   LYNCH N, 1995, INFORM COMPUT, V121, P214, DOI 10.1006/inco.1995.1134
   Necula G. C., 1997, Conference Record of POPL '97: The 24th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P106, DOI 10.1145/263699.263712
   Necula GC, 2004, ACM SIGPLAN NOTICES, V39, P612, DOI 10.1145/989393.989454
   Nishida Y, 2022, NEW GENERAT COMPUT, V40, P507, DOI 10.1007/s00354-022-00167-1
   O'connor L, 2021, J FUNCT PROGRAM, V31, DOI 10.1017/S095679682100023X
   Paraskevopoulou Z, 2022, PROCEEDINGS OF THE 43RD ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '22), P966, DOI 10.1145/3519939.3523707
   Park D., 2020, LNCS, V2224
   Pnueli A, 1998, LECT NOTES COMPUT SC, V1384, P151, DOI 10.1007/BFb0054170
   Sewell P, 2007, ICFP'07 PROCEEDINGS OF THE 2007 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P1
   Sozeau M, 2020, J AUTOM REASONING, V64, P947, DOI 10.1007/s10817-019-09540-0
   Spector-Zabusky A., 2018, P 7 ACM SIGPLAN INT, P14, DOI [10.1145/3167092, DOI 10.1145/3167092]
   Sulzmann M, 2007, PROCEEDINGS OF THE TLDI 2007: 2007 ACM SIGPLAN INTERNATIONAL WORKSHOP ON TYPES IN LANGUAGES DESIGN AND IMPLEMENTATION, P53, DOI 10.1145/1190315.1190324
   Weirich S, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110275
NR 37
TC 0
Z9 0
U1 2
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR
PY 2024
VL 233
AR 103051
DI 10.1016/j.scico.2023.103051
EA NOV 2023
PG 25
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CG6L8
UT WOS:001124139500001
OA Green Submitted, hybrid, Green Published
DA 2024-07-18
ER

PT J
AU Fernandes, HR
   Gomes, GF
   de Oliveira, ACP
   Campos, SVA
AF Fernandes, Herbert Rausch
   Gomes, Giovanni Freitas
   de Oliveira, Antonio Carlos Pinheiro
   Campos, Sergio Vale Aguiar
TI Stochastic formal model of PI3K/mTOR pathway in Alzheimer's disease for
   drug repurposing: An evaluation of rapamycin, LY294002, and NVP-BEZ235
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Statistical model checking; Alzheimer disease; Systems biology; mTOR
ID CHECKING; TARGET
AB Alzheimer's disease is the most common form of dementia characterized by the gradual loss of memory and cognition of patients. There is no drug capable of curing or preventing the disease, being the discovery of an efficient treatment for the disease is of vital importance. An approach that can contribute to this purpose of reducing time and costs of new discoveries is drug repositioning and in silico techniques. Statistical Model Checking is a formal verification technique that can aid in analyzing protein and drugs interactions and test pharmacological strategies, contributing to drug discovery and repurposing. In this work, we present a stochastic formal model that allows us to test different drugs, or combination of drugs, that target the PI3K/mTOR pathway and to evaluate the effect on tau protein and A beta peptide, which are two important components that contribute to the progression of Alzheimer's disease. We have analyzed the effect of rapamycin, LY294002, and NVP-BEZ235 on those proteins. Our results have shown that rapamycin has the potential to slow down one of the biological processes that cause neuronal death. Moreover, we have identified the ideal dose of rapamycin to obtain such results. However, our findings have unveiled that LY294002 and NVP-BEZ235 can increase tau phosphorylation in all scenarios tested. This is an alert to the scientific community, as this deleterious effect can be caused by other PI3K inhibitor drugs used to treat different diseases. These results suggest the inhibition of some proteins of the pathway can trigger an unexpected pathology. Besides that, rapamycin has not reduced this side effect when administered together with LY294002. The proposed methodology has been able to model both the disease and drug interactions. We have analyzed three drugs and our model is flexible to test other drugs and pharmacological strategies and efficient to analyze the properties of the model generating new insights.(c) 2023 Elsevier B.V. All rights reserved.
C1 [Fernandes, Herbert Rausch] CEFET MG, Dept Computat & Civil Engn, Varginha, Brazil.
   [Fernandes, Herbert Rausch; Campos, Sergio Vale Aguiar] Univ Fed Minas Gerais, Dept Comp Sci, Belo Horizonte, Brazil.
   [Gomes, Giovanni Freitas; de Oliveira, Antonio Carlos Pinheiro] Univ Fed Minas Gerais, Dept Pharmacol, Belo Horizonte, Brazil.
C3 Universidade Federal de Minas Gerais; Universidade Federal de Minas
   Gerais
RP Fernandes, HR (corresponding author), CEFET MG, Dept Computat & Civil Engn, Varginha, Brazil.
EM hrausch@cefetmg.br
RI de Oliveira, Antonio CP/F-1661-2013
FU Fundacao de Amparo a Pesquisa de Minas Gerais - FAPEMIG; Conselho
   Nacional de Desenvolvimento Cientifico e Tecnologico - CNPq; Coordenacao
   de Aperfeicoamento de Pessoal de Nivel Superior - CAPES
FX The authors would like to thank Fundacao de Amparo a Pesquisa de Minas
   Gerais - FAPEMIG, Conselho Nacional de Desenvolvimento Cientifico e
   Tecnologico - CNPq, and Coordenacao de Aperfeicoamento de Pessoal de
   Nivel Superior - CAPES for partially funding this research.
CR Agha G, 2018, ACM T MODEL COMPUT S, V28, DOI 10.1145/3158668
   ALUR R, 1994, THEOR COMPUT SCI, V126, P183, DOI 10.1016/0304-3975(94)90010-8
   Bulychev P, 2012, LECT NOTES COMPUT SC, V7180, P168, DOI 10.1007/978-3-642-28717-6_15
   Butcher EC, 2004, NAT BIOTECHNOL, V22, P1253, DOI 10.1038/nbt1017
   Campos S, 1997, SCI COMPUT PROGRAM, V29, P79, DOI 10.1016/S0167-6423(96)00030-5
   CAMPOS S, 1994, REAL TIM SYST SYMP P, P266, DOI 10.1109/REAL.1994.342709
   Clarke EM, 1999, MODEL CHECKING, P1
   David A, 2015, INT J SOFTW TOOLS TE, V17, P351, DOI [10.1007/s10009-014-0361-y, 10.1007/s10009-014-0323-4]
   Dorvash M, 2019, J THEOR BIOL, V483, DOI 10.1016/j.jtbi.2019.109992
   Duraes F, 2018, PHARMACEUTICALS-BASE, V11, DOI 10.3390/ph11020044
   Ferreira B., 2016, P IEEE S COMPUTERS C, P669
   Goltsov A, 2017, EUR J PHARM SCI, V97, P170, DOI 10.1016/j.ejps.2016.11.008
   Gong HJ, 2011, AIP CONF PROC, V1371, P234, DOI 10.1063/1.3596647
   Hao WR, 2016, BMC SYST BIOL, V10, DOI 10.1186/s12918-016-0348-2
   Hautojrvi P., 1979, Experimentation in software engineering, V1ST, DOI [10.1007/978-3-642-81316-0, 10.1007/978-3-642-29044-2., DOI 10.1007/978-3-642-29044-2]
   Hillmer RA, 2015, PLOS PATHOG, V11, DOI 10.1371/journal.ppat.1004786
   Konur S, 2012, ROBOT AUTON SYST, V60, P199, DOI 10.1016/j.robot.2011.10.005
   Kubota H, 2012, MOL CELL, V46, P820, DOI 10.1016/j.molcel.2012.04.018
   Kwiatkowska M, 2007, LECT NOTES COMPUT SC, V4486, P220
   Liu TJ, 2009, MOL CANCER THER, V8, P2204, DOI 10.1158/1535-7163.MCT-09-0160
   Liu YD, 2013, NEUROCHEM INT, V62, P458, DOI 10.1016/j.neuint.2013.01.014
   Llorens-Martín M, 2014, FRONT MOL NEUROSCI, V7, DOI 10.3389/fnmol.2014.00046
   Monacelli F, 2017, J ALZHEIMERS DIS, V55, P1295, DOI 10.3233/JAD-160840
   Ozcelik S, 2013, PLOS ONE, V8, DOI 10.1371/journal.pone.0062459
   Patel AN, 2012, EXPERT REV MOL MED, V14, DOI 10.1017/S1462399411002134
   Pezze PD, 2012, SCI SIGNAL, V5, DOI 10.1126/scisignal.2002469
   Proctor CJ, 2010, MOL NEURODEGENER, V5, DOI 10.1186/1750-1326-5-7
   Bellozi PMQ, 2019, FRONT PHARMACOL, V10, DOI 10.3389/fphar.2019.01345
   Bellozi PMQ, 2016, SCI REP-UK, V6, DOI 10.1038/srep25226
   Rausch Fernandes Herbert, 2020, Formal Methods: Foundations and Applications. 23rd Brazilian Symposium, SBMF 2020. Proceedings. Lecture Notes in Computer Science (LNCS 12475), P64, DOI 10.1007/978-3-030-63882-5_5
   Saxton RA, 2017, CELL, V168, P960, DOI [10.1016/j.cell.2017.03.035, 10.1016/j.cell.2017.02.004]
   Spilman P, 2010, PLOS ONE, V5, DOI 10.1371/journal.pone.0009979
   Sulaimanov N, 2017, WIRES SYST BIOL MED, V9, DOI 10.1002/wsbm.1379
   Tripathi S, 2017, SCI REP-UK, V7, P1, DOI [10.1038/srep43056, 10.26700/shuri.2017.04.7.1.1, 10.1038/s41598-017-04995-w]
   Ullah M, 2011, STOCHASTIC APPROACHES FOR SYSTEMS BIOLOGY, P1, DOI 10.1007/978-1-4614-0478-1
   Varusai TM, 2018, SCI REP-UK, V8, DOI 10.1038/s41598-017-18400-z
   Vilallonga G, 2021, IEEE ACM T COMPUT BI, V18, P2816, DOI 10.1109/TCBB.2020.3028776
   Wang Q., 2016, Ph.D. thesis
   Wolkenhauer O, 2014, FRONT PHYSIOL, V5, DOI 10.3389/fphys.2014.00021
   Younes H.L.S., 2004, Ph.D. thesis
   Zhang LJ, 2017, MED SCI MONITOR, V23, P801, DOI 10.12659/MSM.898679
   Zuliani P, 2015, INT J SOFTW TOOLS TE, V17, P527, DOI 10.1007/s10009-014-0343-0
NR 42
TC 0
Z9 0
U1 1
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN
PY 2024
VL 232
AR 103028
DI 10.1016/j.scico.2023.103028
EA OCT 2023
PG 14
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA Y1HH0
UT WOS:001102842600001
DA 2024-07-18
ER

PT J
AU van den Berg, B
   Schrijvers, T
   Mckinna, J
   Vandenbroucke, A
AF van den Berg, Birthe
   Schrijvers, Tom
   Mckinna, James
   Vandenbroucke, Alexander
TI Forward- or reverse-mode automatic differentiation: What's the
   difference?
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Automatic differentiation; Cayley representation; Semimodules; Nagata
   idealization; Kronecker
AB Automatic differentiation (AD) has been a topic of interest for researchers in many disciplines, with increased popularity since its application to machine learning and neural networks. Although many researchers appreciate and know how to apply AD, it remains a challenge to truly understand the underlying processes. From an algebraic point of view, however, AD appears surprisingly natural: it originates from the differentiation laws. In this work we use Algebra of Programming techniques to reason about different AD variants, leveraging Haskell to illustrate our observations. Our findings stem from three fundamental algebraic abstractions: (1) the notion of semimodule, (2) Nagata's construction of the 'idealization of a module', and (3) Kronecker's delta function, that together allow us to write a single-line abstract definition of AD. From this single-line definition, and by instantiating our algebraic structures in various ways, we derive different AD variants, that have the same extensional behaviour, but different intensional properties, mainly in terms of (asymptotic) computational complexity. We show the different variants equivalent by means of Kronecker isomorphisms, a further elaboration of our Haskell infrastructure which guarantees correctness by construction. With this framework in place, this paper seeks to make AD variants more comprehensible, taking an algebraic perspective on the matter.& COPY; 2023 The Author(s). Published by Elsevier B.V. This is an open access article under the CC BY license (http://creativecommons .org /licenses /by /4 .0/).
C1 [van den Berg, Birthe; Schrijvers, Tom] Katholieke Univ Leuven, Celestijnenlaan 200A, Leuven, Belgium.
   [Mckinna, James] Heriot Watt Univ, Earl Mountbatten Bldg G52, Edinburgh EH14 4AS, Scotland.
   [Vandenbroucke, Alexander] Stand Chartered, 1 Basinghall Ave, London EC2V 5DD, England.
C3 KU Leuven; Heriot Watt University
RP van den Berg, B (corresponding author), Katholieke Univ Leuven, Celestijnenlaan 200A, Leuven, Belgium.
EM birthe.vandenberg@kuleuven.be; tom.schrijvers@kuleuven.be;
   j.mckinna@hw.ac.uk; alexander.vandenbroucke@sc.com
OI van den Berg, Birthe/0000-0002-0088-9546; Schrijvers,
   Tom/0000-0001-8771-5559
FU KU Leuven's BOF [C14/20/079]; Flemish Fund for Scientific Research (FWO)
   [G0A9423N]
FX This work has been funded by KU Leuven's BOF grant number C14/20/079,
   and by the Flemish Fund for Scientific Research (FWO) grant number
   G0A9423N. The third author would like to thank Bernhard Rybolowicz for
   background insight into Nagata's construction.
CR Abadi M, 2016, Arxiv, DOI [arXiv:1605.08695, DOI 10.48550/ARXIV.1605.08695]
   Anderson DD, 2009, J COMMUT ALGEBR, V1, P3, DOI 10.1216/JCA-2009-1-1-3
   [Anonymous], 1871, Proc London Math Soc, DOI [DOI 10.1112/PLMS/S1-4.1.381, 10.1112/plms/s1-4.1.381]
   Atiyah M. F., 1969, INTRO COMMUTATIVE AL
   Baydin AG, 2018, J MACH LEARN RES, V18
   Bird R., 2014, THINKING FUNCTIONALL
   Bird Richard, 1997, Algebra of Programming
   Boisseau G, 2018, PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES, DOI 10.1145/3236779
   Clark K.L., 1977, Inf. Process., V77
   Elliott C., 2009, 200901 LAMBDAPIX
   Elliott C, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3473583
   Elliott C, 2018, PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES, DOI 10.1145/3236765
   Elliott CM, 2009, ICFP'09: PROCEEDINGS OF THE 2009 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P191
   Elsman M, 2022, ELECTRON P THEOR COM, P1, DOI 10.4204/EPTCS.360.1
   Gibbons J, 2014, ACM SIGPLAN NOTICES, V49, P339, DOI 10.1145/2628136.2628138
   Gill A., 1993, FPCA '93. Conference on Functional Programming Languages and Computer Architecture, P223, DOI 10.1145/165180.165214
   Gill A, 2009, J FUNCT PROGRAM, V19, P227, DOI 10.1017/S0956796809007175
   Golan J.S., 1999, SEMIMODULES SEMIRING, P149
   Griewank A., 2003, Acta Numerica, V12, P321, DOI 10.1017/S0962492902000132
   Hinze Ralf, 2012, Mathematics of Program Construction. Proceedings 11th International Conference, MPC 2012, P324, DOI 10.1007/978-3-642-31113-0_16
   Hinze R, 2008, ICFP'08: PROCEEDINGS OF THE 2008 SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P189
   Hoare C. A. R., 1972, Acta Informatica, V1, P271, DOI 10.1007/BF00289507
   Hoffmann PHW, 2016, NUMER ALGORITHMS, V72, P775, DOI 10.1007/s11075-015-0067-6
   HUGHES RJM, 1986, INFORM PROCESS LETT, V22, P141, DOI 10.1016/0020-0190(86)90059-1
   Huot M, 2022, LOG METH COMPUT SCI, V18, DOI 10.46298/LMCS-18(1:41)2022
   Huot M, 2020, LECT NOTES COMPUT SC, V12077, P319, DOI 10.1007/978-3-030-45231-5_17
   Hutton G., 1999, Journal of Functional Programming, V9, P355, DOI 10.1017/S0956796899003500
   Hutton G., 2016, PROGRAMMING HASKELL
   Jansson P., 2022, TEXTS COMPUTING, V24
   Karczmarczuk J., 1998, P 3 ACM SIGPLAN INT, P195, DOI [10.1145/289423.289442, DOI 10.1145/289423.289442]
   Kmett E., 2021, AD AUTOMATIC DIFFERE
   Krawiec F, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498710
   Manzyuk O, 2019, J FUNCT PROGRAM, V29, DOI 10.1017/S095679681900008X
   MEIJER E, 1991, LECT NOTES COMPUT SC, V523, P124
   Meijer E., 1992, THESIS KATHOLIEKE U
   Nagata M., 1962, Interscience Tracts in Pure and Applied Mathematics, V13
   PEARLMUTTER BA, 1994, NEURAL COMPUT, V6, P147, DOI 10.1162/neco.1994.6.1.147
   Pearlmutter BA, 2008, ACM T PROGR LANG SYS, V30, DOI 10.1145/1330017.1330018
   Reynolds J. C., 1983, Information Processing 83. Proceedings of the IFIP 9th World Computer Congress, P513
   Shaikhha A, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3527333
   Smeding TJ, 2024, Arxiv, DOI arXiv:2207.03418
   Szirmay-Kalos L., 2020, PERIOD POLYTECH ELEC, V65, P1, DOI DOI 10.3311/PPEE.16341
   von zur Gathen J., 2013, Modern computer algebra, Vthird, DOI [10.1017/CBO9781139856065, DOI 10.1017/CBO9781139856065]
   WADLER P, 1989, CONFERENCE RECORD OF THE SIXTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P60, DOI 10.1145/75277.75283
   Wadler P., 1989, FPCA 89 P 4 INT C FU, P347
   Wang F, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341700
   WENGERT RE, 1964, COMMUN ACM, V7, P463, DOI 10.1145/355586.364791
NR 47
TC 1
Z9 1
U1 2
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN
PY 2024
VL 231
AR 103010
DI 10.1016/j.scico.2023.103010
EA AUG 2023
PG 28
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA S4XS8
UT WOS:001071219400001
OA Green Accepted, Green Submitted, hybrid
DA 2024-07-18
ER

PT J
AU Moseler, O
   Diehl, S
AF Moseler, Oliver
   Diehl, Stephan
TI The CodeSparks Framework - Augmenting Source Code with Glyph-based
   Visualizations
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Software framework; Visualization; Program analysis; Software
   maintenance; Source code augmentation
ID VIEWS
AB The daily work of a software developer typically includes source-code-related tasks, such as testing, debugging, refactoring and optimizing. They can be facilitated by the use of software metrics, which are mainly available through external analysis tools. In this work, we present the CodeSparks framework, a Java API for IDE plugin development, that aims to facilitate the integration of software analysis tools into the IDE such that their results are displayed as glyph-based visualizations in the source code. In particular, it enables to combine multiple visualizations, each of which can represent different metrics simultaneously. We present the architecture of the framework and the underlying design goals. A total of thirteen plugins realized by different developers using the CodeSparks framework are presented to demonstrate the versatility of the framework. We conducted focus group interviews to investigate how the developers experienced the implementation of their plugins. Based on the plugins, deliberate design decisions and the interview results, we discuss to what extent we achieved our design goals. We found that the framework is largely independent of the target programming-language and that it supports the development of plugins for a wide range of source-code-related tasks while hiding most of the details of the underlying plugin development API. & COPY; 2023 Elsevier B.V. All rights reserved.
C1 [Moseler, Oliver; Diehl, Stephan] Univ Trier, Software Engn Grp, Trier, Germany.
C3 Universitat Trier
RP Moseler, O (corresponding author), Univ Trier, Software Engn Grp, Trier, Germany.
EM olivermoseler@gmail.com; diehl@acm.org
OI Moseler, Oliver/0000-0003-3118-4968
CR Ahmad RW, 2017, INT J COMMUN SYST, V30, DOI 10.1002/dac.3234
   Alaboudi A, 2021, Arxiv, DOI arXiv:2105.02162
   Ayres P., 2005, The Cambridge Handbook of Multimedia Learning, P135, DOI [DOI 10.1017/CBO9781139547369.011, 10.1017/cbo9780511816819.009, DOI 10.1017/CBO9780511816819.009]
   Bain M, 2023, Arxiv, DOI arXiv:2303.00747
   Baltes S, 2014, 22ND ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (FSE 2014), P743, DOI 10.1145/2635868.2661672
   Baltes S, 2015, INT SYMP EMP SOFTWAR, P225, DOI 10.1109/ESEM.2015.7321208
   Beck F., 2013, 2013 1 IEEE WORKING, P1
   Beck F, 2013, CONF PROC INT SYMP C, P63, DOI 10.1109/ICPC.2013.6613834
   Berg T., 2020, THESIS U TRIER GERMA
   Biegel B, 2015, PROC IEEE INT CONF S, P581, DOI 10.1109/ICSM.2015.7332518
   Borgo R., 2013, EUROGRAPHICS STARS, P39, DOI DOI 10.2312/CONF/EG2013/STARS/039-063
   Carbonnelle P., 2022, PYPL TOP IDE IND
   Chacon S., PRO GIT
   Charisius P., 2022, MASTERS
   Coppa E, 2012, ACM SIGPLAN NOTICES, V47, P89, DOI 10.1145/2345156.2254076
   Cornelissen B, 2009, IEEE T SOFTWARE ENG, V35, P684, DOI 10.1109/TSE.2009.28
   Di Nucci D, 2017, PROC IEEE ACM INT C, P3, DOI 10.1109/ICSE-C.2017.18
   dos Santos S, 2004, COMPUT GRAPH-UK, V28, P311, DOI 10.1016/j.cag.2004.03.013
   Eclipse.org, 2001, ECL ORG CONS
   Escobar R, 2022, IEEE INT WORK VIS SO, P167, DOI 10.1109/VISSOFT55257.2022.00026
   Falessi D, 2018, EMPIR SOFTW ENG, V23, P452, DOI 10.1007/s10664-017-9523-3
   Gao X, 2017, INT CON DISTR COMP S, P492, DOI 10.1109/ICDCS.2017.218
   Henning M, 2009, COMMUN ACM, V52, P46, DOI 10.1145/1506409.1506424
   Hoffswell J, 2018, PROCEEDINGS OF THE 2018 CHI CONFERENCE ON HUMAN FACTORS IN COMPUTING SYSTEMS (CHI 2018), DOI 10.1145/3173574.3174106
   Le HA, 2019, MOBILE NETW APPL, V24, P124, DOI 10.1007/s11036-018-1138-4
   Hove SE, 2005, 2005 11TH INTERNATIONAL SYMPOSIUM ON SOFTWARE METRICS (METRICS), P201
   JetBrains s.r.o, 2023, ACTIONS
   JetBrains s.r.o, 2023, PLUG CONF FIL
   JetBrains s.r.o, 2023, EX
   JetBrains s.r.o, 2023, PROGR STRUCT INT PSI
   JetBrains s.r.o, 2023, CORP OV
   Jung L., 2020, MASTERS
   Kontio J., 2008, Guide to Advanced Empirical Software Engineering, P93, DOI [DOI 10.1007/978-1-84800-044-5_4, 10.1007/978-1-84800-044-54, DOI 10.1007/978-1-84800-044-54]
   Kreber L., 2020, THESIS U TRIER GERMA
   Kreber L, 2022, IEEE INT WORK VIS SO, P87, DOI 10.1109/VISSOFT55257.2022.00017
   Kurbatova Z, 2021, 2021 36TH IEEE/ACM INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING WORKSHOPS (ASEW 2021), P14, DOI 10.1109/ASEW52652.2021.00016
   Kurbatova Z, 2021, 2021 36TH IEEE/ACM INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING ASE 2021, P1276, DOI 10.1109/ASE51524.2021.9678646
   Lanza M., 2007, OBJECT ORIENTED METR, P14
   Layman Lucas, 2013, 2013 ACM / IEEE International Symposium on Empirical Software Engineering and Measurement (ESEM), P383, DOI 10.1109/ESEM.2013.43
   LIEBERHERR KJ, 1989, SIGPLAN NOTICES, V24, P67, DOI 10.1145/66083.66089
   Lintem R., 2003, SoftVis'03: Proceedings of the 2003 ACM symposium on Software visualization, DOI DOI 10.1145/774833.774840
   Liu YP, 2016, FSE'16: PROCEEDINGS OF THE 2016 24TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON FOUNDATIONS OF SOFTWARE ENGINEERING, P396, DOI 10.1145/2950290.2950297
   Manotas I, 2016, PROC INT CONF SOFTW, P237, DOI 10.1145/2884781.2884810
   McCabe Jr T., 2008, SOFTWARE QUALITY MET
   Moseler Oliver, 2021, VINCI 2021: The 14th International Symposium on Visual Information Communication and Interaction, DOI 10.1145/3481549.3481566
   Moseler O., 2023, ZENODO, DOI [/10.5281/zenodo.7953509, DOI 10.5281/ZENODO.7953509]
   Moseler O., 2023, CODESPARKS FRAMEWORK
   Moseler O., 2023, CODESPARKS DEMO PLUG
   Moseler O, 2022, J VISUAL-JAPAN, V25, P1267, DOI 10.1007/s12650-022-00843-w
   Oracle, 1999, COD CONV JAV PROGR L
   Oracle, 2018, JVM TM TOOL INT 11 0
   PMD Source Code Analyzer, 2023, PMD JAV API 6 29
   Rampin R., 2021, J. Open Source Softw., V6, DOI [DOI 10.21105/JOSS.03522, 10.21105/joss.03522]
   Rao N.R., 2016, ICTCS, P14
   Rayside D., 2001, P 2001 C CTR ADV STU, P14
   Röthlisberger D, 2012, IEEE T SOFTWARE ENG, V38, P579, DOI 10.1109/TSE.2011.42
   Röthlisberger D, 2009, PROC IEEE INT CONF S, P253, DOI 10.1109/ICSM.2009.5306302
   Saifullah CMK, 2021, PROC IEEE ACM INT C, P73, DOI 10.1109/ICSE-Companion52605.2021.00039
   Alcocer JPS, 2019, 2019 SEVENTH IEEE WORKING CONFERENCE ON SOFTWARE VISUALIZATION (VISSOFT), P28, DOI 10.1109/VISSOFT.2019.00012
   Schuler A, 2022, Arxiv, DOI [arXiv:2205.03120, 10.48550/ARXIV.2205.03120, DOI 10.48550/ARXIV.2205.03120]
   Seaman CB, 1999, IEEE T SOFTWARE ENG, V25, P557, DOI 10.1109/32.799955
   Shneiderman B, 1996, IEEE SYMPOSIUM ON VISUAL LANGUAGES, PROCEEDINGS, P336, DOI 10.1109/VL.1996.545307
   Snyk Limited, 2021, JVM EC REP 2021
   Storey MA, 2001, PROG COMPREHEN, P111, DOI 10.1109/WPC.2001.921719
   Sulír M, 2018, J VISUAL LANG COMPUT, V49, P46, DOI 10.1016/j.jvlc.2018.10.001
   Tufte ER, 1997, Beautiful Evidence
   Ungar D, 1997, COMMUN ACM, V40, P38, DOI 10.1145/248448.248457
   van Rossum G., 2013, PEP 8 STYLE GUIDE PY
   von Mayrhauser A, 1999, PROG COMPREHEN, P170, DOI 10.1109/WPC.1999.777756
   von Mayrhauser A., 1997, Empirical Studies of Programmers: Seventh Workshop. Papers presented at the Seventh Workshop on Empirical Studies of Programmers, P157, DOI 10.1145/266399.266414
   Wang X, 2022, PROC IEEE ACM INT C, P125, DOI [10.1109/ICSE-Companion55297.2022.9793737, 10.1145/3510454.3516836]
   Winter J, 2019, ESEC/FSE'2019: PROCEEDINGS OF THE 2019 27TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P420, DOI 10.1145/3338906.3338926
   Xie C, 2019, INT C PROGRAM COMPRE, P130, DOI 10.1109/ICPC.2019.00028
   Zaparanuks D, 2012, ACM SIGPLAN NOTICES, V47, P67, DOI 10.1145/2345156.2254074
NR 74
TC 0
Z9 0
U1 4
U2 4
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD AUG
PY 2023
VL 230
AR 102998
DI 10.1016/j.scico.2023.102998
EA JUL 2023
PG 32
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA Q9VB7
UT WOS:001060910800001
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Slivka, J
   Luburic, N
   Prokic, S
   Grujic, KG
   Kovacevic, A
   Sladic, G
   Vidakovic, D
AF Slivka, Jelena
   Luburic, Nikola
   Prokic, Simona
   Grujic, Katarina-Glorija
   Kovacevic, Aleksandar
   Sladic, Goran
   Vidakovic, Dragan
TI Towards a systematic approach to manual annotation of code smells
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Novel dataset; Manual annotation; Code smells; Software quality
ID MACHINE LEARNING TECHNIQUES
AB Code smells are structures in code that may indicate maintainability issues. They are challenging to define, and software engineers detect them differently. Mitigation of this problem could be an AI code smell detector. However, to develop it, we need a standardized benchmark dataset. Existing datasets suffer from (1) annotation subjectivity, (2) lack of ground-truth consensus among annotators, and (3) reproducibility issues. This paper aims to develop a systematic manual code smell annotation procedure that addresses these issues. We tailored the prescriptive natural language processing annotation methodology to code smell detection: (1) we cross-validate annotations to mitigate subjectivity, (2) we develop clear annotation guidelines to reach the ground-truth consensus, and (3) we follow literature recommendations for reproducibility and open-source our tools and dataset. We extracted the annotation guidelines from existing empirical code smell research. The annotators refined the guidelines and their understanding of the task through proof-of -concept annotation encompassing retrospective discussion and disagreement resolution and then performed full annotation. We confirmed that the ground-truth consensus was reached by measuring annotation consistency.Our contributions are the proposed annotation procedure, a novel code smell dataset of open-source C# projects, the annotators' experience report, and the open-sourced supporting tool.& COPY; 2023 Elsevier B.V. All rights reserved.
C1 [Slivka, Jelena; Luburic, Nikola; Prokic, Simona; Grujic, Katarina-Glorija; Kovacevic, Aleksandar; Sladic, Goran; Vidakovic, Dragan] Univ Novi Sad, Fac Tech Sci, Dept Comp & Control Engn, Novi Sad, Serbia.
C3 University of Novi Sad
RP Slivka, J (corresponding author), Univ Novi Sad, Fac Tech Sci, Dept Comp & Control Engn, Novi Sad, Serbia.
EM slivkaje@uns.ac.rs; nikola.luburic@uns.ac.rs; simona.prokic@uns.ac.rs;
   katarina.glorija@uns.ac.rs; kocha78@uns.ac.rs; sladicg@uns.ac.rs;
   vdragan@uns.ac.rs
OI Prokic, Simona/0000-0002-2852-9219
FU Science Fund of the Republic of Serbia [6521051]; AI-Clean CaDET;
   Ministry of Science, Technological Development and Innovation
   [451-03-47/2023-01/200156]
FX This research was supported by the Science Fund of the Republic of
   Serbia, Grant No. 6521051, AI-Clean CaDET and the Ministry of Science,
   Technological Development and Innovation through project no.
   451-03-47/2023-01/200156 "Innovative scientific and artistic research
   from the FTS (activity) domain." Our funders had no involvement in the
   study design, collection, analysis, and interpretation of the data,
   writing of the report, or the decision to submit the article for
   publication.
CR AbuHassan A, 2021, J SOFTW-EVOL PROC, V33, DOI 10.1002/smr.2320
   Al-Shaaby A, 2020, ARAB J SCI ENG, V45, P2341, DOI 10.1007/s13369-019-04311-w
   Aniche M., 2015, Tech. Rep.
   [Anonymous], 2017, Machine Learning Yearning
   Azeem MI, 2019, INFORM SOFTWARE TECH, V108, P115, DOI 10.1016/j.infsof.2018.12.009
   Barbez A, 2019, PROC IEEE INT CONF S, P114, DOI 10.1109/ICSME.2019.00021
   Campbell GA, 2018, 2018 IEEE/ACM INTERNATIONAL CONFERENCE ON TECHNICAL DEBT (TECHDEBT), P57, DOI 10.1145/3194164.3194186
   Caram FL, 2019, INT J SOFTW ENG KNOW, V29, P285, DOI 10.1142/S021819401950013X
   Davani AM, 2022, T ASSOC COMPUT LING, V10, P92, DOI 10.1162/tacl_a_00449
   Di Nucci D, 2018, 2018 25TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION AND REENGINEERING (SANER 2018), P612, DOI 10.1109/SANER.2018.8330266
   Fontana FA, 2016, EMPIR SOFTW ENG, V21, P1143, DOI 10.1007/s10664-015-9378-4
   Fontana FA, 2017, KNOWL-BASED SYST, V128, P43, DOI 10.1016/j.knosys.2017.04.014
   Fontana FA, 2016, 2016 IEEE 23RD INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER), VOL 1, P609, DOI 10.1109/SANER.2016.84
   Fowler M., 2018, Refactoring: Improving the Design of Existing Code
   French A., 2008, MULTIVARIATE ANAL VA
   Grujie K., MACHINE LEARNING APP
   Hadj-Kacem M., 2019, INT C NEURAL INFORM
   Hayes AF, 2007, COMMUN METHODS MEAS, V1, P77, DOI 10.1080/19312450709336664
   Hozano M, 2018, INFORM SOFTWARE TECH, V93, P130, DOI 10.1016/j.infsof.2017.09.002
   Ide N., 2017, Handbook Of Linguistic Annotation, V1
   Kirk HR, 2023, Arxiv, DOI arXiv:2303.04222
   Koco n J., 2021, INF PROCESS MANAG, V58
   Kovacevic A., 2022, PREPRINT, DOI [10.36227/techrxiv.19682754, DOI 10.36227/TECHRXIV.19682754]
   Kovacevic A, 2022, EXPERT SYST APPL, V204, DOI 10.1016/j.eswa.2022.117607
   Lacerda G, 2020, J SYST SOFTWARE, V167, DOI 10.1016/j.jss.2020.110610
   Lavitas L., 2021, NEURIPS 2021 WORKSHO
   Lenarduzzi V, 2019, 15TH INTERNATIONAL CONFERENCE ON PREDICTIVE MODELS AND DATA ANALYTICS IN SOFTWARE ENGINEERING (PROMISE'19), P2, DOI 10.1145/3345629.3345630
   Lewowski T, 2022, Code Smells Detection Using Artificial Intelligence Techniques: A Business-Driven Systematic Review, V3, P285, DOI DOI 10.1007/978-3-030-77916-0_12
   Lewowski T, 2022, INFORM SOFTWARE TECH, V144, DOI 10.1016/j.infsof.2021.106783
   Lewowski T, 2020, STUD COMPUT INTELL, V851, P1, DOI 10.1007/978-3-030-26574-8_1
   Liu H, 2018, IEEE INT CONF AUTOM, P385, DOI 10.1145/3238147.3238166
   Luburic Nikola, 2022, Zenodo, DOI 10.5281/ZENODO.6520056
   Madeyski Lech, 2020, EASE2020. Proceedings of the Evaluation and Assessment in Software Engineering, P342, DOI 10.1145/3383219.3383264
   Madeyski L, 2023, INFORM SOFTWARE TECH, V155, DOI 10.1016/j.infsof.2022.107112
   Mäntylä MV, 2006, EMPIR SOFTW ENG, V11, P395, DOI 10.1007/s10664-006-9002-8
   Mäntylä MV, 2004, PROC IEEE INT CONF S, P399, DOI 10.1109/ICSM.2004.1357825
   Martin R. C., 2002, AGILE SOFTWARE DEV P
   Martin Robert C, 2009, Clean Code: a Handbook of Agile Software Craftsmanship
   Mayvan BB, 2020, J SOFTW-EVOL PROC, V32, DOI 10.1002/smr.2255
   Menshawy R, 2021, INT MOBILE INTELLIGE
   Moha N., 2009, IEEE T SOFTWARE ENG
   Oliveira R, 2020, INFORM SOFTWARE TECH, V120, DOI 10.1016/j.infsof.2019.106242
   Oortwijn Y., 2021, P WORKSHOP HUMAN EVA
   Padilha J, 2014, LECT NOTES COMPUT SC, V8484, P656, DOI 10.1007/978-3-319-07881-6_44
   Palomba F, 2018, IEEE T SOFTWARE ENG, V44, P977, DOI 10.1109/TSE.2017.2752171
   Palomba F, 2018, EMPIR SOFTW ENG, V23, P1188, DOI 10.1007/s10664-017-9535-z
   Palomba F, 2018, INFORM SOFTWARE TECH, V99, P1, DOI 10.1016/j.infsof.2018.02.004
   Palomba F, 2015, 12TH WORKING CONFERENCE ON MINING SOFTWARE REPOSITORIES (MSR 2015), P482, DOI 10.1109/MSR.2015.69
   Palomba F, 2015, IEEE T SOFTWARE ENG, V41, P462, DOI 10.1109/TSE.2014.2372760
   Palomba F, 2014, PROC IEEE INT CONF S, P101, DOI 10.1109/ICSME.2014.32
   Pecorelli F, 2020, IEEE WORK CONF MIN S, P220, DOI 10.1145/3379597.3387457
   Prokic S., 2023, 2023 46th MIPRO ICT and Electronics Convention (MIPRO), P1664, DOI 10.23919/MIPRO57284.2023.10159875
   Pustejovsky J., 2012, Natural Language Annotation For Machine Learning: A guide to Corpus-Building For Applications
   Rasool G, 2017, ARAB J SCI ENG, V42, P483, DOI 10.1007/s13369-016-2238-8
   Roh Y, 2021, IEEE T KNOWL DATA EN, V33, P1328, DOI 10.1109/TKDE.2019.2946162
   Rottger P., 2022, P 2022 C N AM CHAPTE
   Sae-Lim N, 2018, IEICE T INF SYST, VE101D, P1733, DOI 10.1587/transinf.2017KBP0006
   Santos Jose Amancio M., 2017, Journal of Software Engineering Research and Development, V5, DOI 10.1186/s40411-017-0042-0
   Santos JAM, 2015, 30TH ANNUAL ACM SYMPOSIUM ON APPLIED COMPUTING, VOLS I AND II, P1472, DOI 10.1145/2695664.2695682
   Schubert J., 2010, Proceedings of the 13th International Conference on Information Fusion (FUSION 2010)
   Seabold S., 2010, 9 PYTH SCI C, P57, DOI [DOI 10.25080/MAJORA-92BF1922-011, 10.25080/MAJORA-92BF1922-011]
   Seaman CB, 1999, IEEE T SOFTWARE ENG, V25, P557, DOI 10.1109/32.799955
   Sharma T, 2021, IEEE WORK CONF MIN S, P590, DOI 10.1109/MSR52588.2021.00080
   Sharma T, 2018, J SYST SOFTWARE, V138, P158, DOI 10.1016/j.jss.2017.12.034
   Sladie G., 2021, 44 INT CONVENTION IN
   Tahir A, 2020, INFORM SOFTWARE TECH, V125, DOI 10.1016/j.infsof.2020.106333
   Taibi D, 2017, INFORM SOFTWARE TECH, V92, P223, DOI 10.1016/j.infsof.2017.08.008
   Tempero E, 2010, ASIA PAC SOFWR ENG, P336, DOI 10.1109/APSEC.2010.46
   Tom E, 2013, J SYST SOFTWARE, V86, P1498, DOI 10.1016/j.jss.2012.12.052
   Tu JZ, 2020, KNOWL INF SYST, V62, P1341, DOI 10.1007/s10115-019-01386-7
   Vidgen B, 2021, 2021 CONFERENCE OF THE NORTH AMERICAN CHAPTER OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS: HUMAN LANGUAGE TECHNOLOGIES (NAACL-HLT 2021), P2289
   Vidgen B, 2021, 59TH ANNUAL MEETING OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS AND THE 11TH INTERNATIONAL JOINT CONFERENCE ON NATURAL LANGUAGE PROCESSING, VOL 1 (ACL-IJCNLP 2021), P1667
   Walter B, 2018, J SYST SOFTWARE, V144, P1, DOI 10.1016/j.jss.2018.05.057
   Wohlin C., 2014, INT C EVALUATION ASS, P1
   Yamashita A, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P682, DOI 10.1109/ICSE.2013.6606614
NR 75
TC 2
Z9 2
U1 4
U2 4
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD AUG
PY 2023
VL 230
AR 102999
DI 10.1016/j.scico.2023.102999
EA JUL 2023
PG 25
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA O9WB2
UT WOS:001047236600001
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Bernárdez, B
   Panach, JI
   Parejo, JA
   Durán, A
   Juristo, N
   Ruiz-Cortés, A
AF Bernardez, Beatriz
   Panach, Jose Ignacio
   Parejo, Jose A.
   Duran, Amador
   Juristo, Natalia
   Ruiz-Cortes, Antonio
TI An empirical study to evaluate the impact of mindfulness on helpdesk
   employees
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Mindfulness; KPI; Industry experiment; Human factors; Helpdesk; MAAS
ID WORKING-MEMORY CAPACITY; AWARENESS SCALE MAAS; STRESS REDUCTION;
   DISPOSITIONAL MINDFULNESS; HIGHER-EDUCATION; BENEFITS; PERFORMANCE;
   MEDITATION; ATTENTION; STUDENTS
AB Purpose: Mindfulness is a meditation technique whose main goal involves maintaining a calm mind and training attention by focusing only on a single thing (the support) at a time; this support is usually the practitioner's breathing. The practice of mindfulness aims to improve concentration and attention, which has proven useful in knowledge -intensive and stressful work environments like technological companies. This article aims to find empirical evidence on the positive effect of the practice of mindfulness on a sample of 56 helpdesk employees working for a consulting and information technology company (Accenture) with respect to: i) their attention awareness; ii) a set of key performance indicators (KPIs); and iii) the perceived benefits of mindfulness. Method: Of the 56 recruited employees, 29 worked as managers, and 27 worked as agents answering phone calls to solve software issues of the main information system of the Andalusian Health Service, a public organization with more than 115,000 employees. Mindfulness (the treatment) was applied to 26 subjects, while the other 30 subjects were the control group. For all subjects, their attention awareness was measured using the MAAS scale. Results: Both helpdesk managers and agents significantly improved their attention awareness with respect to the control group. Regarding organizational KPIs, in general, no evidence of significant differences between groups was detected, apart from the fact that the number of phone calls answered was significantly lower in the mindfulness group, probably due to a longer call duration caused by a deliberate better attention to the customer, but without degrading any other KPI. With respect to the perceived benefits of the treatment, the questionnaires show relevant improvements perceived by most employees after practicing mindfulness.Conclusions: We confirm that mindfulness improves attention awareness and benefits the working and personal life of helpdesk employees. However, further research is needed to identify a clear impact on productivity. & COPY; 2023 The Authors. Published by Elsevier B.V. This is an open access article under the CC BY-NC-ND license (http://creativecommons .org /licenses /by-nc -nd /4 .0/).
C1 [Bernardez, Beatriz; Parejo, Jose A.; Duran, Amador; Ruiz-Cortes, Antonio] Univ Seville, I3US Inst, Seville, Spain.
   [Bernardez, Beatriz; Parejo, Jose A.; Duran, Amador; Ruiz-Cortes, Antonio] Univ Seville, SCORE Lab, Seville, Spain.
   [Panach, Jose Ignacio] Univ Valencia, ETSE, Valencia, Spain.
   [Juristo, Natalia] Univ Politecn Madrid, Madrid, Spain.
C3 University of Sevilla; University of Sevilla; University of Valencia;
   Universidad Politecnica de Madrid
RP Bernárdez, B (corresponding author), Univ Seville, I3US Inst, Seville, Spain.; Bernárdez, B (corresponding author), Univ Seville, SCORE Lab, Seville, Spain.
EM beat@us.es
RI Durán, Amador/O-4248-2014
OI Durán, Amador/0000-0003-3630-5511; Bernardez Jimenez,
   Beatriz/0000-0002-9390-3772
FU MCIN/AEI [PID2021-126227NB-C21, PID2021-126227NB-C22, US-1381595]; ERDF
   a way of making Europe; Junta de Andalucia/ERDF, UE [FPU19/00666, PYC20
   RE 084 US, P18-FR-2895, US -1264651]; Universidad de Sevilla; University
   of California; Generalitat Valenciana GEN [CIAICO/2022/229]; Spanish
   Ministry of Science and Innovation; FEDER in the project SREC
   [PID2021-123824OB-I00, PGC2018-097265-B-I00]
FX We would like to thank the Accenture employees that participated in the
   study for the attitude that they showed towards mindfulness practice and
   their willingness to fill out the questionnaires, and Accenture's
   management for making the necessary provisions for everything that we
   needed, including rooms, talks and mindfulness sessions, within the
   company's busy work schedules.This work has been partially supported by
   grants PID2021-126227NB-C21, PID2021-126227NB-C22 funded by
   MCIN/AEI/10.13039/501100011033 and "ERDF a way of making Europe"; PYC20
   RE 084 US, EKIPMENT-PLUS (P18-FR-2895), US -1264651, MEMENTO
   (US-1381595) funded by Junta de Andalucia/ERDF, UE; FPU19/00666 funded
   by MCIN/AEI/10.13039/501100011033 and by "ESF Investing in your future";
   and Universidad de Sevilla under the 2021 Grants for the Exchange
   Mobility of Professors, Researchers, and PhD Students between the
   Universidad de Sevilla and the University of California. Moreover, we
   thank the support of the Generalitat Valenciana GENI (CIAICO/2022/229)
   and the Spanish Ministry of Science and Innovation co-financed by FEDER
   in the project SREC (PID2021-123824OB-I00) and PGC2018-097265-B-I00.
CR Al-Hawari F, 2021, J KING SAUD UNIV-COM, V33, P702, DOI 10.1016/j.jksuci.2019.04.001
   Babenko Oksana, 2019, Med Sci (Basel), V7, DOI 10.3390/medsci7020029
   Baer RA, 2012, J CLIN PSYCHOL, V68, P755, DOI 10.1002/jclp.21865
   Bernardez B., 2014, P 8 ACMIEEE INT S EM, P17
   Bernardez Beatriz, 2021, Zenodo, DOI 10.5281/ZENODO.5607551
   Bernárdez B, 2022, IEEE T SOFTWARE ENG, V48, P432, DOI 10.1109/TSE.2020.2991699
   Bernárdez B, 2018, J SYST SOFTWARE, V136, P153, DOI 10.1016/j.jss.2016.06.104
   Best Paul, 2022, J Technol Behav Sci, V7, P100, DOI 10.1007/s41347-021-00214-6
   Black DS, 2012, ASSESSMENT, V19, P42, DOI 10.1177/1073191111415365
   Brewer JA, 2011, P NATL ACAD SCI USA, V108, P20254, DOI 10.1073/pnas.1112029108
   Brisbon NM, 2017, MINDFULNESS, V8, P379, DOI 10.1007/s12671-016-0607-8
   Brown KW, 2003, J PERS SOC PSYCHOL, V84, P822, DOI 10.1037/0022-3514.84.4.822
   Campbell DT., 1963, EXPT QUASIEXPERIMENT
   Cardeña E, 2015, MINDFULNESS, V6, P1082, DOI 10.1007/s12671-014-0357-4
   Carmody J, 2008, J BEHAV MED, V31, P23, DOI 10.1007/s10865-007-9130-7
   Clark CM, 2013, J BUS TECH COMMUN, V27, P123, DOI 10.1177/1050651912468887
   COHEN J, 1973, EDUC PSYCHOL MEAS, V33, P107, DOI 10.1177/001316447303300111
   Costa Mark R., 2020, HCI International 2020 - Late Breaking Papers. Cognition, Learning and Games. 22nd HCI International Conference, HCII 2020. Proceedings. Lecture Notes in Computer Science (LNCS 12425), P176, DOI 10.1007/978-3-030-60128-7_14
   Creswell J. W., 2013, RES DESIGN QUALITATI
   Damen KHB, 2018, LECT NOTES COMPUT SC, V11112, P241, DOI 10.1007/978-3-319-99426-0_24
   Davidson RJ, 2021, PSYCHOSOM MED, V83, P665, DOI 10.1097/PSY.0000000000000960
   Davidson RJ, 2003, PSYCHOSOM MED, V65, P564, DOI 10.1097/01.PSY.0000077505.67574.E3
   Davis DM, 2011, PSYCHOTHERAPY, V48, P198, DOI 10.1037/a0022062
   de Bruin EI, 2015, MINDFULNESS, V6, P1137, DOI 10.1007/s12671-014-0364-5
   den Heijer P, 2017, LECT NOTES BUS INF P, V283, P103, DOI 10.1007/978-3-319-57633-6_7
   Denecke K., 2020, IEEE T EMERG TOP COM, P1
   Dybå T, 2006, INFORM SOFTWARE TECH, V48, P745, DOI 10.1016/j.infsof.2005.08.009
   Everson K., 2015, SAPS SOLD SELF AWARE
   García-Magariño I, 2017, EXPERT SYST APPL, V84, P49, DOI 10.1016/j.eswa.2017.05.011
   Germer C., 2013, MINDFULNESS PSYCHOTH, V2nd
   Gilmartin H, 2017, AM J MED, V130, DOI 10.1016/j.amjmed.2017.05.041
   Gliner JA, 2009, RESEARCH METHODS IN APPLIED SETTTINGS: AN INTEGRATED APPROACH TO DESIGN AND ANALYSIS, 2ND EDITION, P1
   González LM, 2005, DECIS SUPPORT SYST, V40, P389, DOI 10.1016/j.dss.2004.04.013
   Good DJ, 2016, J MANAGE, V42, P114, DOI 10.1177/0149206315617003
   Grissom R.J., 2010, EFFECT SIZE
   Grossman P, 2004, J PSYCHOSOM RES, V57, P35, DOI 10.1016/S0022-3999(03)00573-7
   Grover SL, 2017, STRESS HEALTH, V33, P426, DOI 10.1002/smi.2726
   Hülsheger UR, 2013, J APPL PSYCHOL, V98, P310, DOI 10.1037/a0031313
   Hwang YS, 2017, TEACH TEACH EDUC, V64, P26, DOI 10.1016/j.tate.2017.01.015
   Institute for Organizational Mindfulness, 2021, ASS SCI BAS PERF FOC
   Jha AP, 2010, EMOTION, V10, P54, DOI 10.1037/a0018438
   Johnson CJ, 2014, MINDFULNESS, V5, P552, DOI 10.1007/s12671-013-0210-1
   Juristo N., 2013, BASICS SOFTWARE ENG
   Kabat-Zinn J., 1994, WHEREVER YOU GO THER
   Kabat-Zinn J., 2012, MINDFULNESS BEGINNER
   Kapleau R.P., 2013, 3 PILLARS ZEN
   Karlin D.S., 2018, STRATEGIC HR REV, V17, P76
   Kelly C, 2012, OK GOOGLE TAKE DEEP
   Kersemaekers W, 2018, FRONT PSYCHOL, V9, DOI 10.3389/fpsyg.2018.00195
   Khan IA, 2011, COGN TECHNOL WORK, V13, P245, DOI 10.1007/s10111-010-0164-1
   Kumar A., 2020, P 53 HAWAII INT C SY
   Langer E.J., 1989, MINDFULNESS
   Lee Z., 2001, Proceedings of the 34th Annual Hawaii International Conference on System Sciences
   Malinowski P, 2015, MINDFULNESS, V6, P1250, DOI 10.1007/s12671-015-0388-5
   McCoy J.M., 2005, HDB WORK STRESS, P219, DOI [DOI 10.4135/9781412975995.N9, 10.4135/9781412975995.n9]
   Mennitto S, 2021, J PSYCHOSOM OBST GYN, V42, P313, DOI 10.1080/0167482X.2020.1761320
   Meyers L.S., 2006, APPL MULTIVARIATE RE, P677
   Min S., 2020, 26 ACM S VIRTUAL REA
   Morales-Urrutia EK, 2021, IEEE ACCESS, V9, P6642, DOI 10.1109/ACCESS.2021.3049187
   Mrazek MD, 2013, PSYCHOL SCI, V24, P776, DOI 10.1177/0956797612459659
   Niksirat KS, 2017, PROCEEDINGS OF THE 2017 ACM SIGCHI CONFERENCE ON HUMAN FACTORS IN COMPUTING SYSTEMS (CHI'17), P2672, DOI 10.1145/3025453.3025914
   Penzenstadler B, 2022, EMPIR SOFTW ENG, V27, DOI 10.1007/s10664-022-10148-z
   Puddicombe A., 2011, GET SOME HEADSPACE
   Ramsburg JT, 2014, MINDFULNESS, V5, P431, DOI 10.1007/s12671-013-0199-5
   Robbins N.B., 2011, 2011 JOINT STAT M, V1
   Robles MM, 2012, BUS PROF COMMUN Q, V75, P453, DOI 10.1177/1080569912460400
   Roca P, 2019, PLOS ONE, V14, DOI 10.1371/journal.pone.0219793
   Roquet CD, 2018, CHI 2018: EXTENDED ABSTRACTS OF THE 2018 CHI CONFERENCE ON HUMAN FACTORS IN COMPUTING SYSTEMS, DOI 10.1145/3170427.3188616
   Schneider TR, 2013, PERS INDIV DIFFER, V55, P909, DOI 10.1016/j.paid.2013.07.460
   Schultz PP, 2015, MINDFULNESS, V6, P971, DOI 10.1007/s12671-014-0338-7
   Search Inside Yourself leadership institute, 2021, SEARCH INSIDE YOURSE
   Sedlmeier P, 2018, MINDFULNESS, V9, P371, DOI 10.1007/s12671-017-0780-4
   Seligman M. E. P., 2011, Flourish: A visionary new understanding of happiness and wellbeing, DOI DOI 10.5860/CHOICE.48-7217
   Shachtman N, 2013, WIRED MAG
   Shallcross AJ, 2019, CURR OPIN PSYCHOL, V28, P37, DOI 10.1016/j.copsyc.2018.10.005
   Shapiro SL, 2011, TEACH COLL REC, V113, P493
   Shapiro SL, 1998, J BEHAV MED, V21, P581, DOI 10.1023/A:1018700829825
   Shonin E, 2014, INT J MENT HEALTH AD, V12, P806, DOI 10.1007/s11469-014-9513-2
   Simon V., 2013, Aware and Awake
   Sliwinski J., 2018, DESIGN EVALUATION SM
   Tang YY, 2017, FRONT SYST NEUROSCI, V11, DOI 10.3389/fnsys.2017.00006
   Terzimehic N., 2019, P 2019 CHI C HUMAN F, V19
   Vago DR, 2012, FRONT HUM NEUROSCI, V6, DOI 10.3389/fnhum.2012.00296
   Van Dam NT, 2018, PERSPECT PSYCHOL SCI, V13, P36, DOI 10.1177/1745691617709589
   van Emmerik AAP, 2018, MINDFULNESS, V9, P187, DOI 10.1007/s12671-017-0761-7
   Van Solingen R., 2002, ENCY SOFTWARE ENG
   Vonderlin R, 2020, MINDFULNESS, V11, P1579, DOI 10.1007/s12671-020-01328-3
   West R.B., 2000, UPDATE, V137, P3
   Wohlin C., 2012, Experimentation in Software Engineering
   Yildirim C, 2020, 2020 IEEE INTERNATIONAL CONFERENCE ON ARTIFICIAL INTELLIGENCE AND VIRTUAL REALITY (AIVR 2020), P158, DOI 10.1109/AIVR50618.2020.00035
   Zhu B, 2017, PROCEEDINGS OF THE 2017 ACM SIGCHI CONFERENCE ON HUMAN FACTORS IN COMPUTING SYSTEMS (CHI'17), P2685, DOI 10.1145/3025453.3025590
NR 91
TC 0
Z9 0
U1 2
U2 5
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD AUG
PY 2023
VL 230
AR 102977
DI 10.1016/j.scico.2023.102977
EA JUN 2023
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA N2QL7
UT WOS:001035519700001
OA Green Published, hybrid, Green Submitted
DA 2024-07-18
ER

PT J
AU Sasano, I
   Choi, K
AF Sasano, Isao
   Choi, Kwanghoon
TI A text-based syntax completion method using LR parsing and its
   evaluation
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Syntax completion; LR parsing; Sentential forms; Reduction; Integrated
   development environments
AB This paper presents a text-based syntax completion method that uses an LR parser. We propose formal definitions of candidate text to be completed based on the sentential forms. Moreover, we design basic algorithms for computing candidate texts through reductions in the LR parsing. This is unlike most existing methods, wherein the definition of candidates that are intended to be generated are given informally. In addition, this is unlike grammar transformation approaches that use LR parsers and is a currently burdensome task. The proposed method allows LR parsers to be adopted without modification and a syntax completion system to be built without incurring efforts. For practical purposes, we extended the basic algorithms using a new definition of refined candidates and a new strategy. The extended algorithms can compute more useful candidates for realistic programming language grammars than those of existing ones; Further, we implemented the algorithms on an Emacs server to demonstrate the feasibility of their application. We evaluated the extended algorithm with three real-world programming languages, Small Basic, C, and Haskell. The extended algorithm computes half of all candidates in less than or equal to 0.2 seconds and 89.2% in approximately one second in the evaluation while computing the remaining candidates took a long time. We discuss its evaluation in detail.& COPY; 2023 Elsevier B.V. All rights reserved.
C1 [Sasano, Isao] Shibaura Inst Technol, Dept Comp Sci & Engn, 3-7-5 Toyosu,Koto Ku, Tokyo 1358548, Japan.
   [Choi, Kwanghoon] Chonnam Natl Univ, Dept Software Engn, 77 Yongbong Ro, Gwangju 61186, South Korea.
C3 Shibaura Institute of Technology; Chonnam National University
RP Choi, K (corresponding author), Chonnam Natl Univ, Dept Software Engn, 77 Yongbong Ro, Gwangju 61186, South Korea.
EM kwanghoon.choi@jnu.ac.kr
RI 최, 광훈/JQW-9376-2023
OI Choi, Kwanghoon/0000-0003-3519-3650
FU JSPS KAKENHI [20K11752]; NRF of Korea - MoE [2019R1I1A3A01058608]
FX We would like to thank the anonymous reviewers of PEPM 2021 and Science
   of Computer Programming for their many helpful comments. This work was
   partially supported by JSPS KAKENHI under Grant Number 20K11752 and by
   NRF of Korea funded by the MoE No. 2019R1I1A3A01058608.
CR Aho A.V., 1986, COMPILERS PRINCIPLES
   [Anonymous], HASK PROGR LANG
   [Anonymous], C11 PROGR LANG
   [Anonymous], BUILD AUT ED BAS ANT
   [Anonymous], GITHUB COP YOUR AI P
   [Anonymous], MICROSOFT SMALL BASI
   [Anonymous], About us
   [Anonymous], JETBR MPS
   [Anonymous], 1974, 2nd Colloquium on Automata, Languages and Programming (ICALP'74), volume 14 of Lecture Notes in Computer Science, DOI [DOI 10.1007/978-3-662-21545-618, DOI 10.1007/3-540-06841-4_65]
   [Anonymous], LANG SERV PROT
   [Anonymous], POLYRPC PROGR LANG
   Augustsson L., 2005, DJINN
   Bour Frederic, 2018, P ACM PROGR LANG, p103: 1, DOI [10.1145/3236798, DOI 10.1145/3236798]
   Bravenboer M, 2009, LECT NOTES COMPUT SC, V5452, P74, DOI 10.1007/978-3-642-00434-6_6
   Bruch M, 2009, 7TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P213, DOI 10.1145/1595696.1595728
   BRZOZOWSKI JA, 1964, J ACM, V11, P481, DOI 10.1145/321239.321249
   Choi K., 2021, TYPED SLICING COMPIL
   Choi K, 2020, SCI COMPUT PROGRAM, V197, DOI 10.1016/j.scico.2020.102499
   Choi K, 2019, J FUNCT PROGRAM, V29, DOI 10.1017/S0956796819000029
   de Jonge M, 2012, ACM T PROGR LANG SYS, V34, DOI 10.1145/2400676.2400678
   Amorim LED, 2016, PROCEEDINGS OF THE 2016 ACM SIGPLAN INTERNATIONAL CONFERENCE ON SOFTWARE LANGUAGE ENGINEERING (SLE'16), P163, DOI 10.1145/2997364.2997374
   Dean TR, 2002, SCAM 2002: SECOND IEEE INTERNATIONAL WORKSHOP ON SOURCE CODE ANALYSIS MANIPULATION, PROCEEDINGS, P93, DOI 10.1109/SCAM.2002.1134109
   Denise A, 2000, TRENDS MATH, P113
   Donzeau-Gouge V., 1980, RR0026 INRIA
   Gvero T., 2011, EPFLREPORT170040
   Han S, 2009, IEEE INT CONF AUTOM, P332, DOI 10.1109/ASE.2009.64
   Hashimoto H, 1998, LECT NOTES COMPUT SC, V1538, P206
   Jeuring J., 2006, P 2006 ACM SIGPLAN W, P23
   Jin XH, 2018, IEEE WORK CONF MIN S, P70, DOI 10.1145/3196398.3196474
   Jourdan JH, 2017, ACM T PROGR LANG SYS, V39, DOI 10.1145/3064848
   Katayama Susumu, 2005, Trends Function. Program., V6, P111
   Kilpatrick S, 2014, ACM SIGPLAN NOTICES, V49, P19, DOI 10.1145/2535838.2535884
   Klint P, 2005, ACM T SOFTW ENG METH, V14, P331, DOI 10.1145/1072997.1073000
   Knuth D. E., 1968, Mathematical Systems Theory, V2, P127, DOI 10.1007/BF01692511
   Koopman P, 2007, TR FUNCT PROGRAM, V7, P35
   Kuiper M, 1998, LECT NOTES COMPUT SC, V1383, P298
   Kwanghoon Choi, 2018, KIISE Transactions on Computing Practices, V24, P649, DOI 10.5626/KTCP.2018.24.12.649
   Li J, 2018, PROCEEDINGS OF THE TWENTY-SEVENTH INTERNATIONAL JOINT CONFERENCE ON ARTIFICIAL INTELLIGENCE, P4159
   Mainland GB, 2007, HASKELL'07: PROCEEDINGS OF THE ACM SIGPLAN 2007 HASKELL WORKSHOP, P73
   McKenzie B., 1997, 1097 TRCOSC U CANT
   McPeak S, 2004, LECT NOTES COMPUT SC, V2985, P73
   Might M, 2011, ICFP 11 - PROCEEDINGS OF THE 2011 ACM SIGPLAN: INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P189
   Parr T, 2011, ACM SIGPLAN NOTICES, V46, P425, DOI 10.1145/1993316.1993548
   Pelsmaeker D.A.A., 33 EUR C OBJ OR PROG, V134
   Pelsmaeker DAA, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3527329
   Perelman D, 2012, ACM SIGPLAN NOTICES, V47, P275, DOI 10.1145/2345156.2254098
   Proksch S, 2018, IEEE WORK CONF MIN S, P62, DOI 10.1145/3196398.3196400
   REKERS J, 1991, SIGPLAN NOTICES, V26, P59, DOI 10.1145/122501.122505
   REPS T, 1984, SIGPLAN NOTICES, V19, P42, DOI 10.1145/390011.808247
   Rittri M., 1989, Proceedings of the Fourth International Conference on Functional Programming Languages and Computer Architecture, FPCA'89, P174
   Robbes Romain, 2008, 2008 23rd IEEE/ACM International Conference on Automated Software Engineering, P317, DOI 10.1109/ASE.2008.42
   Runciman C., 1989, Proceedings of the fourth international conference on Functional programming languages and computer architecture, P166
   Saraiva J, 2002, LECT NOTES COMPUT SC, V2487, P268
   Sasano I., 2014, P 8 INT C BIOINSPIRE, P231
   Sasano I., 2013, HIGH ORDER SYMB COMP, V25, P127, DOI [/10.1007/s10990-013-9095-x, DOI 10.1007/S10990-013-9095-X]
   Sasano I, 2021, PEPM '21: PROCEEDINGS OF THE 2021 ACM SIGPLAN WORKSHOP ON PARTIAL EVALUATION AND PROGRAM MANIPULATION, P32, DOI 10.1145/3441296.3441395
   Sasano I, 2020, PROCEEDINGS OF THE 2020 ACM SIGPLAN WORKSHOP ON PARTIAL EVALUATION AND PROGRAM MANIPULATION (PEPM '20), P38, DOI 10.1145/3372884.3373158
   Schwerdfeger A, 2010, LECT NOTES COMPUT SC, V5969, P184
   Schwerdfeger AC, 2009, ACM SIGPLAN NOTICES, V44, P199, DOI 10.1145/1543135.1542499
   Sheard T, 2002, ACM SIGPLAN NOTICES, V37, P60, DOI 10.1145/636517.636528
   Sijm Maarten P., 2019, P COMPANION 2019 ACM, P54, DOI [10.1145/3359061.3361085, DOI 10.1145/3359061.3361085]
   Steimann F, 2017, SLE'17: PROCEEDINGS OF THE 10TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON SOFTWARE LANGUAGE ENGINEERING, P79, DOI 10.1145/3136014.3136034
   TAECK LIM JIN, 2020, [Journal of KIISE, 정보과학회논문지], V47, P52, DOI 10.5626/JOK.2020.47.1.52
   Tomita Masaru., 1985, EFFICIENT PARSING NA
   Voelter M, 2013, AUTOMAT SOFTW ENG, V20, P339, DOI 10.1007/s10515-013-0120-4
   VOGT HH, 1989, SIGPLAN NOTICES, V24, P131, DOI 10.1145/74818.74830
   Wagner TA, 1998, ACM T PROGR LANG SYS, V20, P980, DOI 10.1145/293677.293678
   Yang YX, 2019, INT J SOFTW ENG KNOW, V29, P1801, DOI 10.1142/S0218194019400229
NR 68
TC 0
Z9 0
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN
PY 2023
VL 228
AR 102957
DI 10.1016/j.scico.2023.102957
EA MAY 2023
PG 28
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA J9LN7
UT WOS:001012769700001
DA 2024-07-18
ER

PT J
AU Dvorák, O
   Pergl, R
AF Dvorak, Ondrej
   Pergl, Robert
TI Tackling rapid technology changes by applying enterprise engineering
   theories
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE ADA; Component-based systems; Enterprise engineering; Technology
   acceleration; Evolvability
ID SYSTEMS; LIMITS
AB Moore's law states that the number of transistors on a chip will double every two years. A similar force appears to drive the progress of information technology (IT). IT companies tend to struggle to keep up with the latest technological developments, and software solutions are becoming increasingly outdated. The ability for software to change easily is defined as evolvability.
   One of the major fields researching evolvability is enterprise engineering (EE). The EE research paradigm applies theories from other fields to the evolvability of organisations. We argue that such theories can be applied to software engineering (SE) as well, which can contribute to the construction of software with a clear separation of dynamically changing technologies based on a relatively stable description of functions required for a specific user.
   EE theories introduce notions of function, construction, and affordance. We reify these concepts in terms of SE. Based on this reification, we propose affordance-driven assembling (ADA) as a software design approach that can aid in the construction of more evolvable software solutions. We exemplify the implementation of ADA in a case study on a commercial system and measure its effectiveness in terms of the impact of changes, as defined by the normalised systems theory. (C) 2021 Elsevier B.V. All rights reserved.
C1 [Dvorak, Ondrej; Pergl, Robert] Czech Tech Univ, Fac Informat Technol, Prague, Czech Republic.
C3 Czech Technical University Prague
RP Dvorák, O (corresponding author), Czech Tech Univ, Fac Informat Technol, Prague, Czech Republic.
EM ondrej.dvorak@fit.cvut.cz; robert.pergl@fit.cvut.cz
RI Pergl, Robert/AAK-9159-2021
OI Pergl, Robert/0000-0003-2980-4400
CR Alija N., 2017, International Journal of Advanced Research in Computer Science and Software Engineering, V7, P15, DOI [DOI 10.23956/IJARCSSE/V7I2/01207, 10.23956/ijarcsse/V7I2/01207]
   [Anonymous], 2000, Software Cost Estimation with COCOMO II
   [Anonymous], 2004, XP Ser
   [Anonymous], 2003, Modernizing Legacy Systems: Software Technologies, Engineering Processes,and Business Practices
   [Anonymous], 1977, Treatise on Basic Philosophy. Ontology I: The Furniture of the World
   Atkinson C, 2003, IEEE SOFTWARE, V20, P36, DOI 10.1109/MS.2003.1231149
   Atkinson C, 2010, COMM COM INF SC, V69, P206
   Barbier F, 2003, IEEE T SOFTWARE ENG, V29, P459, DOI 10.1109/TSE.2003.1199074
   BENNETT K, 1995, IEEE SOFTWARE, V12, P19, DOI 10.1109/52.363157
   Bisbal J, 1999, IEEE SOFTWARE, V16, P103, DOI 10.1109/52.795108
   Blin F, 2016, LANG STUD SCI ENGINE, V2, P41, DOI 10.1075/lsse.2.03bli
   Booch G ., 2017, ADDISON WESLEY OBJEC, V2nd
   Bunge M.A., 1979, Treatise on basic philosophy: Ontology ii: A world of systems
   Carlsson SA, 2011, INF SYST E-BUS MANAG, V9, P109, DOI 10.1007/s10257-010-0140-6
   Clemmons E ., 2018, JAVASCRIPT FATIGUE
   Cohn Mike., 2004, User Stories Applied: For Agile Software Development
   Cook S., 2000, Software Evolution and Software Evolvability
   Cox B.J., 1986, OBJECT ORIENTED PROG
   Crotty James, 2017, Applied Computing and Informatics, V13, P175, DOI 10.1016/j.aci.2016.12.001
   Davies J, 2015, SCI COMPUT PROGRAM, V103, P88, DOI 10.1016/j.scico.2014.11.004
   De Bruyn P, 2018, BUS INFORM SYST ENG+, V60, P55, DOI 10.1007/s12599-017-0510-4
   Dietz J., 2015, TRFIT1501
   Dietz J., 2020, The DEMO Methodology, P261, DOI DOI 10.1007/978-3-030-38854-612
   Dietz J.L. G., 2006, ENTERPRISE ONTOLOGY
   Dietz JLG, 2014, THEORIES ENTERPRISE
   Dietz M. H, 2020, ENTERPRISE ONTOLOGY, V1st
   Dor T ., 2016, WHAT IS JAVASCRIPT F
   Dvorak O., 2015, 17 IEEE C BUS INF WO, P9
   Dvorak O., 2018, ENT ENG WORK C, P39
   Fiala J., 2015, Proceedings of 4th International Conference on Advanced in Computing and Emerging E-Learning Technology, P34
   Ford Neal., 2017, BUILDING EVOLUTIONAR
   Gemino A, 2009, J DATABASE MANAGE, V20, P1, DOI 10.4018/jdm.2009010101
   GmbH C ., 2020, CORIMA TREASURY MANA
   Guizzardi G., 2008, CIbSE, P127
   Hevner R., 2007, Scandinavian Journal of Information Systems, V19, P4
   Kelly S., 2000, Proceedings of the International Workshop on Model Engineering, P1
   Kleppe A.G., 2003, MDA Explained; The Model Driven Architecture: Practice and Promise
   Kurzweil R, 2004, ALAN TURING: LIFE AND LEGACY OF A GREAT THINKER, P381
   Kurzweil R., 2010, SINGULARITY IS NEAR
   Mannaert H., 2009, Normalized Systems Re-creating Information Technology Based on Laws for Software Evolvability
   Mannaert H., 2016, Normalized Systems Theory, From Foundations for Evolvable Software Towards a General Theory for Evolvable Design
   Mannaert H, 2012, SOFTWARE PRACT EXPER, V42, P89, DOI 10.1002/spe.1051
   Mannaert H, 2011, SCI COMPUT PROGRAM, V76, P1210, DOI 10.1016/j.scico.2010.11.009
   Mares V ., 2019, THESIS CZECH TU
   Mathiassen L, 2006, EUR J INFORM SYST, V15, P116, DOI 10.1057/palgrave.ejis.3000610
   Mitsa T, 2003, ENG MED BIOL SOC ANN, P203
   NSX,, 2020, NSX NORM SYST
   Nuseibeh B., 2000, P C FUTURE SOFTWARE, P35, DOI [10.1145/336512.336523, DOI 10.1145/336512.336523]
   O. Dvo.rak,, 2013, PROJECTIONAL EDITOR
   Oorts G, 2014, P ANN HICSS, P4760, DOI 10.1109/HICSS.2014.585
   Pergl R ., 2018, THESIS CZECH TU
   Rayner M., 2005, OMG UNIFIED MODELING, P710
   Simon H.A., 1996, The Sciences of the Artificial, V3rd ed
   Specifications O., 2015, SEMANTICS BUSINESS V
   Srinivas M., 2016, International Journal of Electrical and Computer Engineering, V6, P292, DOI DOI 10.11591/IJECE.V6I1.8367
   Svensson C, 2002, COMPUT IND, V49, P77, DOI 10.1016/S0166-3615(02)00060-X
   Szyperski C., 2002, COMPONENT SOFTWARE, V2nd
   Taivalsaari A, 1996, ACM COMPUT SURV, V28, P438, DOI 10.1145/243439.243441
   Tresurer D ., 2020, TREASURER
   Tun TT, 2009, SOFTWARE PRACT EXPER, V39, P973, DOI 10.1002/spe.923
   Vanimuf E ., 2016, EVOLVABLE ACCOUNTING
   Vincent R, 2018, TECHNICAL REPORT TEC
   Waszkowski R, 2019, IFAC PAPERSONLINE, V52, P376, DOI 10.1016/j.ifacol.2019.10.060
   Wittern E, 2016, 13TH WORKING CONFERENCE ON MINING SOFTWARE REPOSITORIES (MSR 2016), P351, DOI [10.1145/2901739.2901743, 10.1109/MSR.2016.043]
   Yu LG, 2006, SECOND INTERNATIONAL IEEE WORKSHOP ON SOFTWARE EVOLVABILITY, PROCEEDINGS, P82, DOI 10.1109/SOFTWARE-EVOLVABILITY.2006.11
   Zipkin P, 2001, MIT SLOAN MANAGE REV, V42, P81
NR 66
TC 1
Z9 1
U1 0
U2 4
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR 1
PY 2022
VL 215
AR 102747
DI 10.1016/j.scico.2021.102747
EA NOV 2021
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA YN9RV
UT WOS:000747588600002
DA 2024-07-18
ER

PT J
AU de Brugière, TG
   Baboulin, M
   Valiron, B
   Martiel, S
   Allouche, C
AF de Brugiere, Timothee Goubault
   Baboulin, Marc
   Valiron, Benoit
   Martiel, Simon
   Allouche, Cyril
TI Decoding techniques applied to the compilation of CNOT circuits for NISQ
   architectures
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Quantum circuit synthesis; CNOT circuits; Syndrome decoding; Reversible
   computation; Noisy intermediate scaled quantum computers (NISQ)
ID QUANTUM; OPTIMIZATION
AB Current proposals for quantum compilers require the synthesis and optimization of linear reversible circuits and among them CNOT circuits. Since these circuits represent a significant part of the cost of running an entire quantum circuit, we aim at reducing their size. In this paper we present a new algorithm for the synthesis of CNOT circuits based on the solution of the syndrome decoding problem. Our method addresses the case of ideal hardware with an all-to-all qubit connectivity and the case of near-term quantum devices with restricted connectivity. For both cases, we present benchmarks showing that our algorithm outperforms existing algorithms. (C) 2021 Elsevier B.V. All rights reserved.
C1 [de Brugiere, Timothee Goubault; Baboulin, Marc] Univ Paris Saclay, Lab Rech Informat, Orsay, France.
   [Valiron, Benoit] Ecole Cent Supelec, Lab Rech Informat, Orsay, France.
   [de Brugiere, Timothee Goubault; Martiel, Simon; Allouche, Cyril] Atos Quantum Lab, Les Clayes Sous Bois, France.
C3 Universite Paris Saclay; Universite Paris Cite; Universite Paris Saclay
RP de Brugière, TG (corresponding author), Univ Paris Saclay, Lab Rech Informat, Orsay, France.
EM timothee.goubault@lri.fr; marc.baboulin@lri.fr; benoit.valiron@lri.fr;
   simon.martiel@atos.net; cyril.allouche@atos.net
OI Martiel, Simon/0000-0001-5624-2955; ALLOUCHE, Cyril/0000-0002-9699-4219;
   Valiron, Benoit/0000-0002-1008-5605
FU French National Research Agency (ANR) [ANR-17-CE25-0009-02]; DGE of the
   French Ministry of Industry [P163746-484124]; Agence Nationale de la
   Recherche (ANR) [ANR-17-CE25-0009] Funding Source: Agence Nationale de
   la Recherche (ANR)
FX This work was supported in part by the French National Research Agency
   (ANR) under the research project SoftQPRO ANR-17-CE25-0009-02, and by
   the DGE of the French Ministry of Industry under the research project
   PIA-GDN/QuantEx P163746-484124. We thank Bertrand Marchand for comments
   on the manuscript.
CR Amy M, 2019, QUANTUM SCI TECHNOL, V4, DOI 10.1088/2058-9565/aad8ca
   Amy M, 2014, IEEE T COMPUT AID D, V33, P1476, DOI 10.1109/TCAD.2014.2341953
   [Anonymous], MATRIX COMPUTATIONS
   Arora S, 1997, J COMPUT SYST SCI, V54, P317, DOI 10.1006/jcss.1997.1472
   BERLEKAMP ER, 1978, IEEE T INFORM THEORY, V24, P384, DOI 10.1109/TIT.1978.1055873
   Bernstein DJ, 2010, LECT NOTES COMPUT SC, V6061, P73, DOI 10.1007/978-3-642-12929-2_6
   Campbell ET, 2017, NATURE, V549, P172, DOI 10.1038/nature23460
   Campbell ET, 2012, PHYS REV X, V2, DOI 10.1103/PhysRevX.2.041021
   Childs A. M., 2019, 14 C THEOR QUANT COM
   Cowtan A., 2019, 14 C THEORY QUANTUM
   de Brugière TG, 2020, LECT NOTES COMPUT SC, V12227, P189, DOI 10.1007/978-3-030-52482-1_11
   Garey M.R., 1979, COMPUTERS INTRACTABI
   Gottesman D., 1997, THESIS
   Haghparast M, 2010, INT J QUANTUM INF, V8, P1219, DOI 10.1142/S021974991000671X
   Henriet L, 2020, QUANTUM-AUSTRIA, V4, DOI 10.22331/q-2020-09-21-327
   Heyfron LE, 2019, QUANTUM SCI TECHNOL, V4, DOI 10.1088/2058-9565/aad604
   Kachigar G, 2017, LECT NOTES COMPUT SC, V10346, P69, DOI 10.1007/978-3-319-59879-6_5
   Kirshanova E, 2018, LECT NOTES COMPUT SC, V10786, P507, DOI 10.1007/978-3-319-79063-3_24
   Kissinger A., 2020, ELECTRON P THEOR COM, V318, P229, DOI [DOI 10.4204/EPTCS.318.14, 10.4204/EPTCS.318.14]
   Kissinger A, 2020, PHYS REV A, V102, DOI 10.1103/PhysRevA.102.022406
   Kissinger A, 2020, QUANTUM INF COMPUT, V20, P581
   KORF RE, 1990, ARTIF INTELL, V42, P189, DOI 10.1016/0004-3702(90)90054-4
   Li GS, 2019, TWENTY-FOURTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS (ASPLOS XXIV), P1001, DOI 10.1145/3297858.3304023
   Maslov D, 2016, QUANTUM INF COMPUT, V16, P1096
   Nash B, 2020, QUANTUM SCI TECHNOL, V5, DOI 10.1088/2058-9565/ab79b1
   Patel KN, 2008, QUANTUM INF COMPUT, V8, P282
   Pedram M, 2016, IEEE CIRC SYST MAG, V16, P62, DOI 10.1109/MCAS.2016.2549950
   PRANGE E, 1962, IRE T INFORM THEOR, V8, pS5
   Preskill J, 2018, QUANTUM-AUSTRIA, V2, DOI 10.22331/q-2018-08-06-79
   Vardy Alexander, 1997, P 20 9 ANN ACM S THE, P92, DOI 10.1145/258533.258559
   Wille R, 2016, ASIA S PACIF DES AUT, P292, DOI 10.1109/ASPDAC.2016.7428026
NR 31
TC 3
Z9 3
U1 1
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 1
PY 2022
VL 214
AR 102726
DI 10.1016/j.scico.2021.102726
EA OCT 2021
PG 18
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA XA8ZO
UT WOS:000720929000009
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Pascual, R
   Le Gall, P
   Arnould, A
   Belhaouari, H
AF Pascual, Romain
   Le Gall, Pascale
   Arnould, Agnes
   Belhaouari, Hakim
TI Topological consistency preservation with graph transformation schemes
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE DPO graph transformation; Rule schemes; Combinatorial maps; Consistency
   preservation; Topology-based geometric modeling
ID REPRESENTATION; GENERATION; GRAMMARS; SYSTEMS
AB Topology-based geometric modeling tackles the issue of representing objects with data structures that encode the topological subdivision of modeled objects in vertices, edges, faces, and volumes. Such subdivisions can be represented with graphs labeled by dimensions on arcs, while modeling operations used to edit the objects can be formalized as graph transformations.
   Among the existing topological models, we consider generalized and oriented maps, defined as constrained labeled graphs, to ensure the well-formedness of the represented objects. Since a modeling operation should provide a correct object when applied to a correct object, graph transformations are provided with conditions to ensure the model consistency.
   Our approach exploits the firmly established framework of DPO graph transformations to implement modeling operations. We enrich standard DPO graph transformations with a product construction to ease the operation design, enabling generic modeling operations as rule schemes. We lift conditions from DPO rules to this enriched framework, ensuring the preservation of the topological consistency via static analysis of syntactic conditions on rule schemes. (C) 2021 Elsevier B.V. All rights reserved.
C1 [Pascual, Romain; Le Gall, Pascale] Univ Paris Saclay, Lab Math Interact Comp Sci MICS, CentraleSupelec, Paris, France.
   [Arnould, Agnes; Belhaouari, Hakim] Univ Poitiers, Lab XLIM UMR CNRS 7252, Poitiers, France.
C3 Universite Paris Cite; Universite Paris Saclay; Universite de Poitiers
RP Pascual, R (corresponding author), Univ Paris Saclay, Lab Math Interact Comp Sci MICS, CentraleSupelec, Paris, France.
EM romain.pascual@centralesupelec.fr
OI Pascual, Romain/0000-0003-1282-1933; Le Gall,
   Pascale/0000-0002-8955-6835
CR [Anonymous], 1999, Handbook of graph grammars and computing by graph transformation
   [Anonymous], 1993, Texts and Monographs in Computer Science
   [Anonymous], 2015, Fundamentals of Computer Graphics
   [Anonymous], 1997, Handbook of Graph Grammars and Computing by Graph Transformation, DOI [DOI 10.1142/9789812384720_, 10.1142/9789812384720_0001, DOI 10.1142/9789812384720_0001]
   Backes P, 2015, LECT NOTES COMPUT SC, V8931, P135
   Baran I, 2007, ACM T GRAPHIC, V26, DOI [10.1145/1239451.1239523, 10.1145/1276377.1276467]
   Baresi L, 2004, LECT NOTES COMPUT SC, V3256, P431
   Bauderon M, 1995, LECT NOTES COMPUT SC, V1017, P101
   Bauer J, 2007, LECT NOTES COMPUT SC, V4634, P249
   Becker Basil, 2011, Theory and Practice of Model Transformations. Proceedings of the 4th International Conference, ICMT 2011, P123, DOI 10.1007/978-3-642-21732-6_9
   Becker Basil., 2006, Proceeding of the 28th international conference on Software engineering - ICSE '06, P72
   Belhaouari H, 2014, LECT NOTES COMPUT SC, V8571, P269
   Bellet Thomas, 2010, Proceedings of the Shape Modeling International (SMI 2010), P100, DOI 10.1109/SMI.2010.31
   Bellet T., 2011, 6 INT WORKSH COMP TE, V48, P20
   Bellet T, 2017, LECT NOTES COMPUT SC, V10373, P36, DOI 10.1007/978-3-319-61470-0_3
   Ben Salah F., 2017, J WSCG, V25, P39
   Biermann E, 2012, SOFTW SYST MODEL, V11, P227, DOI 10.1007/s10270-011-0199-7
   BOEHM P, 1987, J COMPUT SYST SCI, V34, P377, DOI 10.1016/0022-0000(87)90030-4
   Bohl E, 2015, VISUAL COMPUT, V31, P819, DOI 10.1007/s00371-015-1108-9
   Bommes D, 2013, COMPUT GRAPH FORUM, V32, P51, DOI 10.1111/cgf.12014
   Bourquat P, 2020, PROCEEDINGS OF THE 15TH INTERNATIONAL JOINT CONFERENCE ON COMPUTER VISION, IMAGING AND COMPUTER GRAPHICS THEORY AND APPLICATIONS, VOL 1: GRAPP, P125, DOI 10.5220/0008965701250136
   Campagna S., 1998, J GRAPHICS TOOLS, V3, P1, DOI DOI 10.1080/10867651.1998.10487494
   Cardot A., 2019, Computer-Aided Design and Applications, V16, P985
   Ceiss R, 2006, LECT NOTES COMPUT SC, V4178, P383
   Corradini A., 1996, Fundamenta Informaticae, V26, P241
   Corradini A, 2006, LECT NOTES COMPUT SC, V4178, P30
   Corradini A, 2020, THEOR COMPUT SCI, V802, P19, DOI 10.1016/j.tcs.2019.06.004
   Corradini A, 2019, LECT NOTES COMPUT SC, V11425, P169, DOI 10.1007/978-3-030-17127-8_10
   Corradini A, 2019, J LOG ALGEBR METHODS, V103, P213, DOI 10.1016/j.jlamp.2018.12.003
   Damiand G, 2014, Combinatorial maps: efficient data structures for computer graphics and image processing
   Damiand G, 2020, PATTERN RECOGN LETT, V129, P48, DOI 10.1016/j.patrec.2019.11.009
   Dehlinger C, 2014, COMP GEOM-THEOR APPL, V47, P869, DOI 10.1016/j.comgeo.2014.04.007
   Dijkstra E. W., 1976, A Discipline of Pro-gramming
   Dufourd JF, 2009, J AUTOM REASONING, V43, P19, DOI 10.1007/s10817-009-9117-x
   Dyck J, 2015, LECT NOTES COMPUT SC, V9151, P237, DOI 10.1007/978-3-319-21145-9_15
   Ebert J, 2014, SOFTW SYST MODEL, V13, P301, DOI 10.1007/s10270-012-0250-3
   Ehrig H, 2004, LECT NOTES COMPUT SC, V3256, P144
   EHRIG H, 1991, LECT NOTES COMPUT SC, V532, P269, DOI 10.1007/BFb0017395
   EHRIG H, 1991, LECT NOTES COMPUT SC, V532, P24, DOI 10.1007/BFb0017375
   EHRIG H, 1980, THEOR COMPUT SCI, V11, P247, DOI 10.1016/0304-3975(80)90016-X
   Ehrig H., 1986, THE BOOK OF L, P87, DOI DOI 10.1007/978-3-642-95486-37
   Ehrig H., 2006, FUNDAMENTALS ALGEBRA, P21
   Ehrig H, 2014, MATH STRUCT COMP SCI, V24, DOI 10.1017/S0960129512000357
   Ehrig Hartmut, 1979, Graph-Grammars and Their Application to Computer Science and Biology, P1, DOI [10.1007/BFb0025714, DOI 10.1007/BFB0025714]
   Gauthier V., 2019, THESIS POITIERS
   GYSSENS M, 1994, IEEE T KNOWL DATA EN, V6, P572, DOI 10.1109/69.298174
   Habel A, 2002, LECT NOTES COMPUT SC, V2505, P135
   Habel A., 2001, Mathematical Structures in Computer Science, V11, P637, DOI 10.1017/S0960129501003425
   Habel A., 1996, Fundamenta Informaticae, V26, P287
   Habel A, 2009, MATH STRUCT COMP SCI, V19, P245, DOI 10.1017/S0960129508007202
   Haeusler M, 2019, SOFTW SYST MODEL, V18, P3487, DOI 10.1007/s10270-019-00725-0
   Heckel R, 2002, LECT NOTES COMPUT SC, V2505, P161
   HOARE CAR, 1969, COMMUN ACM, V12, P576, DOI 10.1145/363235.363259
   Horna S, 2009, COMPUT AIDED DESIGN, V41, P13, DOI 10.1016/j.cad.2008.11.006
   Ikehata S, 2015, IEEE I CONF COMP VIS, P1323, DOI 10.1109/ICCV.2015.156
   Konig Barbara, 2018, GRAPH TRANSFORMATION, V10800, P83, DOI [DOI 10.1007/978-3-319-75396-65, 10.1007/978-3-319-75396-65]
   Kosiol Jens, 2019, Recent Trends in Algebraic Development Techniques. 24th IFIP WG 1.3 International Workshop, WADT 2018. Revised Selected Papers: Lecture Notes in Computer Science (LNCS 11563), P139, DOI 10.1007/978-3-030-23220-7_8
   Kraemer P., 2014, P 22 INT MESHING ROU, P485
   Kraemer P, 2009, VISUAL COMPUT, V25, P149, DOI 10.1007/s00371-008-0211-6
   Lack S, 2004, LECT NOTES COMPUT SC, V2987, P273
   Lambers L., 2018, Lecture Notes in Computer Science, V10800, P124
   Lando S.K., 2004, ENCY MATH SCI, P7
   LIENHARDT P, 1991, COMPUT AIDED DESIGN, V23, P59, DOI 10.1016/0010-4485(91)90082-8
   LIENHARDT P, 1989, PROCEEDINGS OF THE FIFTH ANNUAL SYMPOSIUM ON COMPUTATIONAL GEOMETRY, P228, DOI 10.1145/73833.73859
   LOWE M, 1993, TERM GRAPH REWRITING, P185
   Minas M., 1995, Proceedings. 11th IEEE International Symposium on Visual Languages (Cat. No.95TB8105), P203, DOI 10.1109/VL.1995.520810
   Navarro M, 2021, J LOG ALGEBR METHODS, V118, DOI 10.1016/j.jlamp.2020.100616
   Nickel U., 2000, Proceedings of the 2000 International Conference on Software Engineering. ICSE 2000 the New Millennium, P742, DOI 10.1109/ICSE.2000.870485
   Paulus CJ, 2015, VISUAL COMPUT, V31, P831, DOI 10.1007/s00371-015-1123-x
   Perrin M, 2013, IFP ENERG NOUV PUBL, P1
   Plump D, 2009, LECT NOTES COMPUT SC, V5725, P99, DOI 10.1007/978-3-642-03564-7_6
   Poskitt CM, 2012, FUND INFORM, V118, P135, DOI 10.3233/FI-2012-708
   Poudret M., 2007, INT C LANG AUT THEOR, P497
   Poudret M, 2008, LECT NOTES COMPUT SC, V5214, P147, DOI 10.1007/978-3-540-87405-8_11
   Rensink A, 2003, LECT NOTES COMPUT SC, V3062, P479
   Rensink A, 2004, LECT NOTES COMPUT SC, V3256, P319
   Rensink A., 2009, ECEASST, V18, DOI [10.14279/tuj.eceasst.18.260, DOI 10.14279/TUJ.ECEASST.18.260]
   Rensink A., 2010, P 4 INT WORKSH GRAPH, P55
   Bolívar MPR, 2015, PUB ADMIN INF TECH, V8, P1, DOI 10.1007/978-3-319-03167-5_1
   Schneider HJ, 2005, LECT NOTES COMPUT SC, V3393, P134
   Schurr A., 1995, Software Engineering - ESEC '95. 5th European Software Engineering Conference. Proceedings, P219
   Steenken D, 2011, LECT NOTES COMPUT SC, V7021, P92, DOI 10.1007/978-3-642-25032-3_7
   Taentzer G, 2003, LECT NOTES COMPUT SC, V3062, P446
   Taentzer G., 1994, Graph Transformations in Computer Science. International Workshop Proceedings, P380
   Untereiner L, 2015, COMPUT GRAPH FORUM, V34, P155, DOI 10.1111/cgf.12667
   Vigna S, 2003, GUIDED TOUR TOPOS GR
   Vilgertshofer S, 2017, ADV ENG INFORM, V33, P502, DOI 10.1016/j.aei.2017.07.003
   VINCE A, 1983, J COMB THEORY B, V34, P1, DOI 10.1016/0095-8956(83)90002-3
   WEILER K, 1985, IEEE COMPUT GRAPH, V5, P21, DOI 10.1109/MCG.1985.276271
   Wu J., 2014, EUROGRAPHICS 2014 ST, P1
   Yongzhi Ong, 2012, Proceedings of the 2012 IEEE International Conference on Bioinformatics and Biomedicine Workshops (BIBMW), P1, DOI 10.1109/BIBMW.2012.6470293
   YOU KC, 1979, IEEE T SYST MAN CYB, V9, P334, DOI 10.1109/TSMC.1979.4310222
NR 92
TC 1
Z9 1
U1 2
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 1
PY 2022
VL 214
AR 102728
DI 10.1016/j.scico.2021.102728
EA OCT 2021
PG 50
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA XA8ZO
UT WOS:000720929000005
OA Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Yang, ZB
   Yuan, SH
   Bodeveix, JP
   Filali, M
   Wang, TX
   Zhou, Y
AF Yang, Zhibin
   Yuan, Shenghao
   Bodeveix, Jean-Paul
   Filali, Mamoun
   Wang, Tiexin
   Zhou, Yong
TI Multi-task Ada code generation from synchronous dataflow programs on
   multi-core: Approach and industrial study
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Safety-critical systems; Synchronous dataflow language; Multi-task code
   generation; Ada; Multi core
AB The growing trend to use multi-core processors to get more performance is increasingly present in safety-critical systems. Synchronous dataflow programming is naturally well-suited to parallel execution, thanks to the fact that all data dependencies are always explicit. MiniSIGNAL is a multi-task code generation tool for the synchronous dataflow language SIGNAL. The existing MiniSIGNAL code generation strategies mainly consider coarse-grained parallelism based on Ada multi-task model. However, when we applied it to industrial case studies, this code generation scheme has revealed inefficient: architecture aspects of the target platform have to be taken into account to achieve fine-grained parallelism. To generate more efficient target code from industrial cases, this paper presents a new multi-task code generation method for MiniSIGNAL. Starting at the level of synchronous clocked guarded actions (S-CGA) which is an intermediate language for the compilation process of MiniSIGNAL, the transformation consists of two parts: at the platform-independent level, transforming the S-CGA representation to an abstract multi-task structure (called Virtual Multi-Tasks, VMT); at the platform-dependent level, adopting the thread pool pattern concurrent JobQueue to support fine-grained parallel Ada code generation from the VMT structure. Moreover, the formal syntax and the operational semantics of VMT are mechanized in the proof assistant Coq. Finally, the effectiveness of our approach is illustrated by an application of the real-world Guidance, Navigation and Control system. (C) 2021 Elsevier B.V. All rights reserved.
C1 [Yang, Zhibin; Yuan, Shenghao; Wang, Tiexin; Zhou, Yong] Nanjing Univ Aeronaut & Astronaut, Coll Comp Sci & Technol, Nanjing, Peoples R China.
   [Bodeveix, Jean-Paul; Filali, Mamoun] Univ Toulouse, UPS, CNRS, IRIT, Toulouse, France.
C3 Nanjing University of Aeronautics & Astronautics; Centre National de la
   Recherche Scientifique (CNRS); Universite de Toulouse; Universite
   Toulouse III - Paul Sabatier; Universite Federale Toulouse Midi-Pyrenees
   (ComUE); Institut National Polytechnique de Toulouse
RP Yang, ZB (corresponding author), Nanjing Univ Aeronaut & Astronaut, Coll Comp Sci & Technol, Nanjing, Peoples R China.
EM yangzhibin168@163.com; shyuan@nuaa.edu.cn; bodeveix@irit.fr;
   filali@irit.fr; tiexin.wang@nuaa.edu.cn; zhouyong@nuaa.edu.cn
RI Yuan, Shenghao/KVB-9352-2024
OI Yuan, Shenghao/0000-0002-8467-5827; wang, tiexin/0000-0002-5432-3812
FU National Natural Science Foundation of China [62072233, 61502231];
   Aviation Science Fund of China [201919052002]; Fundamental Research
   Funds for the Central Universities [NP2017205]
FX Supported by the National Natural Science Foundation of China (62072233,
   61502231) , Aviation Science Fund of China (201919052002) , and The
   Fundamental Research Funds for the Central Universities (NP2017205) .
CR A. Group, 2019, REFERENCE MANUAL
   [Anonymous], LIBRARY
   Baudisch D., 2014, BICC, P169
   Baudisch D., 2010, METHODEN BESCHREIBUN, P11
   Baudisch D, 2010, DES AUT TEST EUROPE, P949
   Benveniste A, 2012, IEEE DECIS CONTR P, P7252, DOI 10.1109/CDC.2012.6426437
   Besnard L., 2009, RES REPORT
   BOUSSINOT F, 1991, P IEEE, V79, P1293, DOI 10.1109/5.97299
   Brandt J, 2014, DES AUTOM EMBED SYST, V18, P63, DOI 10.1007/s10617-012-9087-9
   C.C.A.S.T. FAA, 2016, CAST32
   Chase David, 2005, P 17 ANN ACM S PAR A, P21, DOI DOI 10.1145/1073970.1073974
   Colaco Jean-Louis, 2018, 2018 Forum on Specification & Design Languages (FDL), P5, DOI 10.1109/FDL.2018.8524052
   Colaco Jean-Louis, 2017, 2017 INT S THEOR ASP, DOI [10.1109/tase.2017.8285623, DOI 10.1109/TASE.2017.8285623, 10.1109/TASE.2017.8285623]
   Feiler P.H., PEARSON SCHWEIZ AG
   Ferrell T.K., DIGITAL AVIONICS HDB
   Gamatie A, 2010, DESIGNING EMBEDDED SYSTEMS WITH THE SIGNAL PROGRAMMING LANGUAGE, P1, DOI 10.1007/978-1-4419-0941-1
   Gérard L, 2012, ACM SIGPLAN NOTICES, V47, P51, DOI [10.1145/2345141.1967685, 10.1145/2345141.2248426]
   Graillat A, 2018, DES AUT TEST EUROPE, P1139, DOI 10.23919/DATE.2018.8342182
   HALBWACHS N, 1991, P IEEE, V79, P1305, DOI 10.1109/5.97300
   Halbwachs Nicolas., 2019, LUSTRE V6 REFERENCE
   Hu K, 2015, SIMUL MODEL PRACT TH, V51, P69, DOI 10.1016/j.simpat.2014.10.010
   Imam S, 2015, LECT NOTES COMPUT SC, V9233, P222, DOI 10.1007/978-3-662-48096-0_18
   Jain T, 2017, IEEE SYM PARA DISTR, P229, DOI 10.1109/IPDPSW.2017.50
   Jose BA, 2009, ELECTRON NOTES THEOR, V238, P57, DOI 10.1016/j.entcs.2008.01.006
   Le Guernic P, 2003, J CIRCUIT SYST COMP, V12, P261, DOI 10.1142/S0218126603000763
   LEGUERNIC P, 1991, P IEEE, V79, P1321, DOI 10.1109/5.97301
   Li X, 2006, ACM SIGPLAN NOTICES, V41, P303, DOI 10.1145/1168918.1168896
   Li ZM, 2017, J SYST ARCHITECT, V74, P30, DOI 10.1016/j.sysarc.2016.12.003
   Pagetti C, 2011, DISCRETE EVENT DYN S, V21, P307, DOI 10.1007/s10626-011-0107-x
   Potop-Butucaru D, 2004, FOURTH INTERNATIONAL CONFERENCE ON APPLICATION OF CONCURRENCY TO SYSTEM DESIGN, PROCEEDINGS, P67, DOI 10.1109/CSD.2004.1309117
   Puffitsch W, 2013, IEEE REAL TIME, P293, DOI 10.1109/RTAS.2013.6531101
   Rosetta P, 2018, CASE REP OPHTHALMOL, V2018, DOI 10.1155/2018/4856019
   Royuela S, 2020, J SYST ARCHITECT, V105, DOI 10.1016/j.sysarc.2019.101702
   Souyris J., 2018, EMBEDDED REAL TIME S, P1
   Talpin JP, 2014, SCI COMPUT PROGRAM, V96, P377, DOI 10.1016/j.scico.2014.04.009
   Yang ZB, 2019, FRONT COMPUT SCI-CHI, V13, P715, DOI 10.1007/s11704-017-6485-y
   Yang ZB, 2016, FRONT COMPUT SCI-CHI, V10, P37, DOI 10.1007/s11704-015-4364-y
   Yang ZB, 2013, FRONT COMPUT SCI-CHI, V7, P673, DOI 10.1007/s11704-013-3908-2
   Yip E, 2016, 2016 IEEE 10TH INTERNATIONAL SYMPOSIUM ON EMBEDDED MULTICORE/MANY-CORE SYSTEMS-ON-CHIP (MCSOC), P297, DOI 10.1109/MCSoC.2016.13
   Yuan S., 2011, Proceedings of the 2011 14th Euromicro Conference on Digital System Design. Architectures, Methods and Tools. (DSD 2011), P727, DOI 10.1109/DSD.2011.97
   Yuan S., 2019, COMMUN COMPUT PHYS, V1165, P57
   Yuan S., 2012, RES REPORT
NR 42
TC 3
Z9 3
U1 2
U2 8
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUL 1
PY 2021
VL 207
AR 102644
DI 10.1016/j.scico.2021.102644
EA MAR 2021
PG 27
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA RQ5SW
UT WOS:000642479600003
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Ravelo-Méndez, W
   Escobar-Velásquez, C
   Linares-Vásquez, M
AF Ravelo-Mendez, William
   Escobar-Velasquez, Camilo
   Linares-Vasquez, Mario
TI Kraken: A framework for enabling multi-device interaction-based testing
   of Android apps
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Testing; Android; Signaling
AB Nowadays mobile applications that require the interaction and collaboration of two or more users simultaneously are becoming more and more frequent, that is why to ensure high quality of these products, testers are adopting test automation techniques that can optimize their quality assurance process. In previous work we presented Kraken, a publicly available cross-device testing tool that enables a tester to write, run, and validate test scenarios that involve the interaction of two or more devices using APKs as input along with test scripts wrote using the Gherkin syntax. In this paper, we will extend on Kraken previous and new functionalities such as random GUI events, fake string generation and state XML snapshots of a displayed view. (C) 2021 Elsevier B.V. All rights reserved.
C1 [Ravelo-Mendez, William; Escobar-Velasquez, Camilo; Linares-Vasquez, Mario] Univ Los Andes, Bogota, Colombia.
C3 Universidad de los Andes (Colombia)
RP Ravelo-Méndez, W (corresponding author), Univ Los Andes, Bogota, Colombia.
EM wr.ravelo@uniandes.edu.co; ca.escobar2434@uniandes.edu.co;
   m.linaresv@uniandes.edu.co
RI Escobar-Velásquez, Camilo/JVD-5595-2023
OI Escobar-Velásquez, Camilo/0000-0001-8414-9301; Ravelo Mendez,
   William/0000-0002-2427-4968
FU Google Latin American Research Award 2018-2021
FX Escobar-Velasquez and Linares-Vasquez are partially supported by a
   Google Latin American Research Award 2018-2021.
CR [Anonymous], 2019, ANDROID ESPRESSO
   [Anonymous], 2019, ANDROID UIAPPLICATIO
   [Anonymous], 2019, ANDROID UI AUTOMATOR
   Calabash, 2019, CALABASH ANDROID
   Choudhary SR, 2015, IEEE INT CONF AUTOM, P429, DOI 10.1109/ASE.2015.89
   Chow B.J.A., 2015, OCTOPUS RESCUE FASCI
   Jia Y, 2016, P ISSTA 16
   Linares-Vásquez M, 2017, PROC IEEE INT CONF S, P399, DOI 10.1109/ICSME.2017.27
   Linares-Vásquez M, 2015, 12TH WORKING CONFERENCE ON MINING SOFTWARE REPOSITORIES (MSR 2015), P111, DOI 10.1109/MSR.2015.18
   Wynne A.H.M., 2012, CUCUMBER JAVA BOOK, P4
NR 10
TC 1
Z9 2
U1 0
U2 9
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 1
PY 2021
VL 206
AR 102627
DI 10.1016/j.scico.2021.102627
EA MAR 2021
PG 10
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA RI2XD
UT WOS:000636771400006
DA 2024-07-18
ER

PT J
AU Ancona, D
   Dagnino, F
   Rot, J
   Zucca, E
AF Ancona, Davide
   Dagnino, Francesco
   Rot, Jurriaan
   Zucca, Elena
TI A big step from finite to infinite computations
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT European Conference on Object-Oriented Programming (ECOOP)
CY NOV 15-17, 2020
CL ELECTR NETWORK
DE Operational semantics; Infinite behavior; Coinduction
ID OPERATIONAL SEMANTICS; LOGIC
AB We provide a construction that, given a big-step semantics describing finite computations and their observations, extends it to include infinite computations as well. The basic idea is that the finite behavior uniquely determines the infinite behavior once observations and their composition operators are fixed. Technically, the construction relies on the framework of inference systems with corules. The effectiveness and scope of the approach are illustrated by several examples. The correctness is formally justified by proving that, starting from a big-step semantics equivalent to a reference small-step semantics, this equivalence is preserved by the construction. (C) 2020 Elsevier B.V. All rights reserved.
C1 [Ancona, Davide; Dagnino, Francesco; Zucca, Elena] Univ Genoa, DIBRIS, Genoa, Italy.
   [Rot, Jurriaan] Radboud Univ Nijmegen, Nijmegen, Netherlands.
C3 University of Genoa; Radboud University Nijmegen
RP Zucca, E (corresponding author), Univ Genoa, DIBRIS, Genoa, Italy.
EM davide.ancona@unige.it; francesco.dagnino@dibris.unige.it;
   jrot@cs.ru.nl; elena.zucca@unige.it
RI ; Ancona, Davide/U-6156-2018
OI Dagnino, Francesco/0000-0003-3599-3535; ZUCCA,
   ELENA/0000-0002-6833-6470; Ancona, Davide/0000-0002-6297-2011
CR Abel A, 2014, ELECTRON P THEOR COM, P51, DOI 10.4204/EPTCS.153.4
   Aczel P., 1977, HDB MATH LOGIC, P739
   Amin N, 2017, ACM SIGPLAN NOTICES, V52, P666, DOI 10.1145/3093333.3009866
   Ancona D., 2017, PACMPL 1 OOPSLA, V1
   Ancona D., 2014, FTFJP 14 FORMAL TECH
   Ancona D., 2018, LIPICS, V109
   Ancona D, 2017, ELECTRON P THEOR COM, P1, DOI 10.4204/EPTCS.258.1
   Ancona D, 2017, LECT NOTES COMPUT SC, V10201, P29, DOI 10.1007/978-3-662-54434-1_2
   Ancona D, 2015, FUND INFORM, V140, P221, DOI 10.3233/FI-2015-1252
   Capretta V, 2005, LOG METH COMPUT SCI, V1, DOI 10.2168/LMCS-1(2:1)2005
   Chapman J, 2019, MATH STRUCT COMP SCI, V29, P67, DOI 10.1017/S0960129517000184
   Charguéraud A, 2013, LECT NOTES COMPUT SC, V7792, P41, DOI 10.1007/978-3-642-37036-6_3
   Ciccone L., 2019, THESIS
   Cousot P., 1992, Conference Record of the Nineteenth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P83, DOI 10.1145/143165.143184
   Dagnino F., 2020, LECT NOTES COMPUTER, V12075, P169
   Dagnino F, 2019, LOG METH COMPUT SCI, V15, DOI 10.23638/LMCS-15(1:26)2019
   Danielsson NA, 2012, ACM SIGPLAN NOTICES, V47, P127, DOI 10.1145/2398856.2364546
   Danielsson NA, 2010, ICFP 2010: PROCEEDINGS OF THE 2010 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P285
   Hur CK, 2013, ACM SIGPLAN NOTICES, V48, P193, DOI 10.1145/2480359.2429093
   Leroy X, 2009, INFORM COMPUT, V207, P284, DOI 10.1016/j.ic.2007.12.004
   Marino D., 2009, P 2009 ACM SIGPLAN I, P39, DOI DOI 10.1145/1481861.1481868
   Markowsky G., 1976, Algebra Universalis, V6, P53, DOI [DOI 10.1007/BF02485815, 10.1007/BF02485815]
   McBride C, 2015, LECT NOTES COMPUT SC, V9129, P257, DOI 10.1007/978-3-319-19797-5_13
   Nakata K, 2010, ELECTRON PROC THEOR, P57, DOI 10.4204/EPTCS.32.5
   Nakata K, 2010, LECT NOTES COMPUT SC, V6012, P488, DOI 10.1007/978-3-642-11957-6_26
   Nakata K, 2009, LECT NOTES COMPUT SC, V5674, P375, DOI 10.1007/978-3-642-03359-9_26
   Owens S, 2016, LECT NOTES COMPUT SC, V9632, P589, DOI 10.1007/978-3-662-49498-1_23
   PERRIN D, 2004, PURE APPL MATH SERIE, V141
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Piróg M, 2014, ELECTRON NOTES THEOR, V308, P273, DOI 10.1016/j.entcs.2014.10.015
   Poulsen CB, 2017, J LOG ALGEBR METHODS, V88, P174, DOI 10.1016/j.jlamp.2016.05.001
   Pous D., 2012, CAMBRIDGE TRACTS THE, P233
   Pous D, 2016, PROCEEDINGS OF THE 31ST ANNUAL ACM-IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE (LICS 2016), P307, DOI 10.1145/2933575.2934564
   Reynolds John C., 1972, ACM 72, V2, P717, DOI DOI 10.1023/A:1010027404223
   Simon L, 2007, LECT NOTES COMPUT SC, V4596, P472
   Tate R, 2013, ACM SIGPLAN NOTICES, V48, P15, DOI 10.1145/2480359.2429074
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
   Xia LY, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371119
NR 38
TC 2
Z9 2
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29a, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 1
PY 2020
VL 197
AR 102492
DI 10.1016/j.scico.2020.102492
PG 28
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA NS6CO
UT WOS:000572347300009
OA Green Submitted, Green Published
DA 2024-07-18
ER

PT J
AU Gadea, A
   Gunther, E
   Pagano, M
AF Gadea, Alejandro
   Gunther, Emmanuel
   Pagano, Miguel
TI Mechanization of coherence and adequacy: Being extrinsic extended to
   subtyping
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 21st Brazilian Symposium on Programming Languages (SBLP) as Part of 8th
   Brazilian Conference on Software (CBSoft)
CY SEP 21-22, 2017
CL Fortaleza, BRAZIL
SP Google, Mob Telecom
DE Computational adequacy; Coherence of semantics; Mechanization of
   semantics
ID SEMANTICS
AB Operational and denotational are two common approaches to specify the semantics of programming languages: the former is more suitable for expressing a particular evaluation strategy and the latter is more abstract. If there are both an operational and a denotational semantics for a programming language, one expects that the operational semantics be adequate with respect to the denotational one (this ensures that a program whose denotational semantics is some mathematical function computes that function). Moreover, there are two styles of denotational semantics for typed languages: the extrinsic one gives a denotation for any expression (even if ill-typed), while in the intrinsic only well-typed expressions are meaningful.
   In this paper we mechanize in Coq a typed, call-by-value language by specifying its operational semantics and giving intrinsic and extrinsic denotational semantics, both using domain theory. We also prove that the denotational semantics are equivalent; this is interesting because it leads to a direct proof of coherence for the intrinsic semantics. Finally, we prove the adequacy of the operational semantics with respect to the denotational semantics. As far as we know, this is the first mechanization of Reynolds' bracketing theorem and also the use of biorthogonality with extrinsic semantics instead of intrinsic semantics. We also show that the methodology is modular by extending those results for a larger language with more types (Booleans and products) and subtyping. (C) 2020 Elsevier B.V. All rights reserved.
C1 [Gadea, Alejandro; Gunther, Emmanuel] Univ Nacl Cordoba, CONICET, Cordoba, Argentina.
   [Gadea, Alejandro; Gunther, Emmanuel; Pagano, Miguel] Univ Nacl Cordoba, FAMAF, Cordoba, Argentina.
C3 National University of Cordoba; National University of Cordoba
RP Gadea, A (corresponding author), Univ Nacl Cordoba, CONICET, Cordoba, Argentina.; Gadea, A (corresponding author), Univ Nacl Cordoba, FAMAF, Cordoba, Argentina.
EM gadea@famaf.unc.edu.ar; gunther@famaf.unc.edu.ar;
   pagano@famaf.unc.edu.ar
CR [Anonymous], 1994, Handbook of logic in computer science
   Benton N., 2010, REALIZABILITY COMPOS, V06
   Benton N, 2012, J AUTOM REASONING, V49, P141, DOI 10.1007/s10817-011-9219-0
   Benton N, 2009, LECT NOTES COMPUT SC, V5674, P115, DOI 10.1007/978-3-642-03359-9_10
   Benton N, 2009, ACM SIGPLAN NOTICES, V44, P97, DOI 10.1145/1631687.1596567
   Berger U, 2010, J UNIVERS COMPUT SCI, V16, P2535
   Biernacki D, 2018, LOG METH COMPUT SCI, V14, DOI 10.23638/LMCS-14(1:11)2018
   Birkedal L, 2005, IEEE S LOG, P260
   Birkedal L, 2006, LOG METH COMPUT SCI, V2, DOI 10.2168/LMCS-2(5:1)2006
   Danvy O, 2009, LECT NOTES COMPUT SC, V5832, P66, DOI 10.1007/978-3-642-04652-0_3
   Delaware B, 2013, ACM SIGPLAN NOTICES, V48, P207, DOI 10.1145/2480359.2429094
   Dockins Robert, 2014, Interactive Theorem Proving. 5th International Conference, ITP 2014, Held as Part of the Vienna Summer of Logic, VSL 2014. Proceedings: LNCS 8558, P209, DOI 10.1007/978-3-319-08970-6_14
   Fridlender D., 2017, IFL 2017
   Gadea A., 2019, THESIS
   Gadea A, 2017, PROCEEDINGS OF THE 21ST BRAZILIAN SYMPOSIUM ON PROGRAMMING LANGUAGES (SBLP 2017), DOI 10.1145/3125374.3125378
   Jung R, 2015, ACM SIGPLAN NOTICES, V50, P637, DOI [10.1145/2676726.2676980, 10.1145/2775051.2676980]
   Krogh-Jespersen M, 2017, ACM SIGPLAN NOTICES, V52, P218, DOI 10.1145/3093333.3009877
   Melliès PA, 2015, ACM SIGPLAN NOTICES, V50, P3, DOI 10.1145/2775051.2676970
   Pitts A. M., 2000, Mathematical Structures in Computer Science, V10, P321, DOI 10.1017/S0960129500003066
   Pitts A.M., 2010, DAGST SEM P, V10351
   Plotkin GD, 2004, J LOGIC ALGEBR PROGR, V60-1, P17, DOI 10.1016/j.jlap.2004.03.002
   Raffa M.E. Soldevila, 2015, FORMALIZACION SEMANT
   Reynolds J.C., 2000, RES SERIES BRICS, VRS-00-32
   Reynolds JC, 2003, MG COMP SCI, P309
   Reynolds JohnC., 1997, ALGOLLIKE LANGUAGES, V1, P173, DOI DOI 10.1007/978-1-4612-4118-8_9
   Rodriguez L., 2017, THESIS
   Rodríguez L, 2016, ELECTRON NOTES THEOR, V323, P197, DOI 10.1016/j.entcs.2016.06.013
   Scott D., 1976, SIAM Journal on Computing, V5, P522, DOI 10.1137/0205037
   Scott D., 1971, PRG6
   Scott D.S., 1970, PRG2
   SMYTH MB, 1982, SIAM J COMPUT, V11, P761, DOI 10.1137/0211062
   Soldevila M, 2017, ACM SIGPLAN NOTICES, V52, P75, DOI 10.1145/3170472.3133848
   Wieczorek Pawel, 2018, P 7 ACM SIGPLAN INT, P266, DOI DOI 10.1145/3167091
NR 33
TC 0
Z9 0
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29a, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 1
PY 2020
VL 197
AR 102512
DI 10.1016/j.scico.2020.102512
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA NS6CO
UT WOS:000572347300002
DA 2024-07-18
ER

PT J
AU Arruda, F
   Barros, F
   Sampaio, A
AF Arruda, Filipe
   Barros, Flavia
   Sampaio, Augusto
TI Automation and consistency analysis of test cases written in natural
   language: An industrial context
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 19th Brazilian Symposium on Formal Methods (SBMF)
CY NOV 23-25, 2016
CL Natal, BRAZIL
DE Test automation; Controlled natural language; Alloy; Test case
   consistency
ID TEST-GENERATION
AB We present here a novel test automation strategy that receives as input a freestyle natural language (NL) test case (consisting of a sequence of test steps) and produces executable test scripts. This strategy relies on a database of previously automated seed test steps, available for reuse. New steps are automated via a capturing process by a tester, without requiring any programming knowledge. Automated tests can be executed by a replay facility. We discuss the reuse improvement, implementation effort, and user feedback regarding the industrial applicability and usability of our capture & replay tool. We then show that restricting the input textual description to obey a proposed Controlled NL (CNL) brings significant advantages: (1) reuse improvement; (2) the possibility of integration with a test generation framework; and (3) definition of consistency notions for test actions and test action sequences, that ensure, respectively, well-formedness of each action and a proper configuration to safely execute a sequence of actions. We formalize these consistency notions in Alloy and use the Alloy Analyzer to carry out the consistency check; the scalability of the analysis is assessed via an evaluation considering a repository with real test cases; the practical context of our work is mobile device testing, involving a partnership with Motorola Mobility, a Lenovo company. (C) 2019 Elsevier B.V. All rights reserved.
C1 [Arruda, Filipe; Barros, Flavia; Sampaio, Augusto] Univ Fed Pernambuco, Ctr Informat, BR-50670901 Recife, PE, Brazil.
C3 Universidade Federal de Pernambuco
RP Arruda, F (corresponding author), Univ Fed Pernambuco, Ctr Informat, BR-50670901 Recife, PE, Brazil.
EM fmca@cin.ufpe.br; fab@cin.ufpe.br; acas@cin.ufpe.br
OI Arruda, Filipe/0009-0008-1111-9142
FU Motorola Mobility, a Lenovo company
FX We thank Motorola Mobility, a Lenovo company, for the long-term
   partnership and for the financial support that has allowed the
   applicability of research results on test case generation and automation
   in an industrial context.
CR [Anonymous], 1990, SYSTEMATIC SOFTWARE
   [Anonymous], 2012, CUCUMBER BOOK BEHAV
   Arruda F., 2016, P 28 INT C SOFTW ENG
   Barros F.A., 2011, SEKE 2011 P 23 INT C, P250
   Basili V. R., 1994, Encyclopedia of Software Engineering, V1, P528
   Bernstein A, 2006, LECT NOTES COMPUT SC, V4273, P144
   Bertolino A, 2007, FOSE 2007: FUTURE OF SOFTWARE ENGINEERING, P85, DOI 10.1109/FOSE.2007.25
   Carvalho G, 2014, SCI COMPUT PROGRAM, V95, P275, DOI 10.1016/j.scico.2014.06.007
   Chandra R., 2014, MSRTR201444
   Dimitrova V, 2008, LECT NOTES COMPUT SC, V5318, P1, DOI 10.1007/978-3-540-88564-1_1
   Dustin E., 1999, AUTOMATED SOFTWARE T
   Ferreira F., 2010, TOOLS SESSION CBSOFT
   Fillmore CJ, 1968, UNIVERSALS LINGUISTI
   Ford B, 2004, ACM SIGPLAN NOTICES, V39, P111, DOI 10.1145/982962.964011
   Fraser Bruce, 1996, Pragmatics, V6, P167, DOI DOI 10.1075/PRAG.6.2.03FRA
   Gamma E., 1994, Design patterns: Elements of reusable object-oriented software
   Gomez L, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P72, DOI 10.1109/ICSE.2013.6606553
   Grechanik M, 2009, PROC INT CONF SOFTW, P408, DOI 10.1109/ICSE.2009.5070540
   Grieskamp W, 2006, LECT NOTES COMPUT SC, V4262, P1
   Hallett C, 2007, COMPUT LINGUIST, V33, P105, DOI 10.1162/coli.2007.33.1.105
   Jackson D, 2002, ACM T SOFTW ENG METH, V11, P256, DOI 10.1145/505145.505149
   Jackson D, 2012, SOFTWARE ABSTRACTIONS: LOGIC, LANGUAGE, AND ANALYSIS, P1
   Kuhn T, 2013, J LOGIC LANG INFORM, V22, P33, DOI 10.1007/s10849-012-9167-z
   Leijen D., 2002, PARSEC DIRECT STYLE
   Leotta M, 2013, WORK CONF REVERSE EN, P272, DOI 10.1109/WCRE.2013.6671302
   Machado P, 2010, LECT NOTES COMPUT SC, V6153, P59
   MILLER GA, 1995, COMMUN ACM, V38, P39, DOI 10.1145/219717.219748
   MINSKY M., 1974, FRAMEWORK REPRESENTI
   Nogueira S, 2014, FORM ASP COMPUT, V26, P441, DOI 10.1007/s00165-012-0258-z
   OSTRAND TJ, 1988, COMMUN ACM, V31, P676, DOI 10.1145/62959.62964
   Pilone Dan., 2005, UML 20 NUTSHELL
   Richters M., 1998, Conceptual Modeling - ER'98. 17th International Conference on Conceptual Modeling. Proceedings, P449
   Sampaio Augusto, 2016, Formal Methods: Foundations and Applications. 19th Brazilian Symposium, SBMF 2016. Proceedings: LNCS 10090, P21, DOI 10.1007/978-3-319-49815-7_2
   Sampaio A, 2014, SOFTW TEST VERIF REL, V24, P289, DOI 10.1002/stvr.1498
   Sampaio A, 2009, LECT NOTES COMPUT SC, V5885, P20, DOI 10.1007/978-3-642-10373-5_2
   Schneider B., 2001, LONELYLAND
   Spivey J.M., 1992, THE Z NOTATION
   Tretmans J, 1996, SOFTWARE-CONC TOOL, V17, P103
   Wang CH, 2015, 2015 10TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE 2015) PROCEEDINGS, P942, DOI 10.1145/2786805.2803187
   Wong E, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 1, P620, DOI 10.1109/ICSE.2015.78
   Woodcock J., 1996, Using Z: Specification, Refinement, and Proof
   Yue Tao, 2015, P 2015 INT S SOFTWAR, P397
NR 42
TC 0
Z9 0
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD APR 1
PY 2020
VL 189
AR 102377
DI 10.1016/j.scico.2019.102377
PG 29
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA KN9XE
UT WOS:000515199800001
OA Bronze
DA 2024-07-18
ER

PT J
AU Segura, AM
   de Lara, J
AF Mora Segura, Angel
   de Lara, Juan
TI EXTREMO: An Eclipse plugin for modelling and meta-modelling assistance
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Model-driven Engineering; Modelling process; Language Engineering;
   Modelling assistance
AB Modelling is a core activity in software development paradigms like Model-driven Engineering (MDE). Therefore, the quality of (meta-)models is crucial for the success of software projects. However, many times, modelling becomes a purely manual activity, which does not take advantage of information embedded in heterogeneous information sources, such as XML documents, ontologies, or other models and meta-models.
   In order to improve this situation, we present EXTREMO, an Eclipse plugin aimed at gathering the information stored in heterogeneous sources in a common data model, to facilitate the reuse of information chunks in the model being built. The tool covers the steps needed to incorporate this knowledge within an external modelling tool, supporting the uniform query of the heterogeneous sources and the evaluation of constraints. Flexibility of the main features (e.g., supported data formats, queries) is achieved by means of extensible mechanisms. To illustrate the usefulness of EXTREMO, we describe a practical case study in the financial domain and evaluate its performance and scalability. (C) 2019 Elsevier B.V. All rights reserved.
C1 [Mora Segura, Angel; de Lara, Juan] Univ Autonoma Madrid, Modelling & Software Engn Res Grp, Madrid, Spain.
C3 Autonomous University of Madrid
RP Segura, AM (corresponding author), Univ Autonoma Madrid, Modelling & Software Engn Res Grp, Madrid, Spain.
EM Angel.MoraS@uam.es; Juan.deLara@uam.es
RI Mora-Segura, Angel/F-3864-2019; de Lara, Juan/B-5422-2014
OI Mora-Segura, Angel/0000-0003-4318-499X; de Lara,
   Juan/0000-0001-9425-6362
FU Ministry of Education of Spain (FPU grant) [FPU13/02698]; Spanish
   Ministry of Science [RTI2018-095255-B-I00]; R&D programme of the Madrid
   Region [S2018/TCS-4314]
FX We would like to thank the reviewers for their valuable comments. This
   work was partially supported by the Ministry of Education of Spain (FPU
   grant FPU13/02698), the Spanish Ministry of Science
   (RTI2018-095255-B-I00), and the R&D programme of the Madrid Region
   (S2018/TCS-4314).
CR Angel MS, 2018, COMPUT LANG SYST STR, V53, P90, DOI 10.1016/j.cl.2018.02.002
   Atkinson C, 2011, LECT NOTES COMPUT SC, V6563, P266, DOI 10.1007/978-3-642-19440-5_16
   Benelallam A, 2014, LECT NOTES COMPUT SC, V8569, P230
   Brambilla M., 2017, Model-Driven Software Engineering in Practice, Second Edition, ser. Synthesis Lectures on Software Engineering, VSecond
   Ceh I, 2011, COMPUT SCI INF SYST, V8, P317, DOI 10.2298/CSIS101231019C
   Di Rocco Juri., 2014, MiSE at ICSE, P55, DOI DOI 10.1145/2593770.2593774
   Dyck A, 2014, PROCEEDINGS OF THE 2014 2ND INTERNATIONAL CONFERENCE ON MODEL-DRIVEN ENGINEERING AND SOFTWARE DEVELOPMENT (MODELSWARD 2014), P282
   Kang K.C., 1990, CMUSEI90TR021
   López-Fernández JJ, 2015, SOFTW SYST MODEL, V14, P1323, DOI 10.1007/s10270-013-0392-y
   Lucrédio D, 2012, SOFTW SYST MODEL, V11, P183, DOI 10.1007/s10270-010-0167-7
   Mengerink JGM., 2017, IWSM MENSURA, P116, DOI [10.1145/3143434.3143442, DOI 10.1145/3143434.3143442]
   Mens Kim., 2014, Recommendation Systems in Software Engineering, P93
   MURATA T, 1989, P IEEE, V77, P541, DOI 10.1109/5.24143
   Neubauer P., 2015, 2015 ACM SIGPLAN INT, P71, DOI DOI 10.1145/2814251.2814267
   Pescador A, 2015, 2015 ACM/IEEE 18TH INTERNATIONAL CONFERENCE ON MODEL DRIVEN ENGINEERING LANGUAGES AND SYSTEMS (MODELS), P166, DOI 10.1109/MODELS.2015.7338247
   Sen S, 2010, SIMUL-T SOC MOD SIM, V86, P109, DOI 10.1177/0037549709340530
   Steinberg D., 2008, EMF: Eclipse Modeling Framework, Vsecond
NR 17
TC 11
Z9 11
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUL 1
PY 2019
VL 180
BP 71
EP 80
DI 10.1016/j.scico.2019.05.003
PG 10
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA IR8XM
UT WOS:000481724800005
OA Green Accepted, Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Barbanera, F
   Lanese, I
   de'Liguoro, U
AF Barbanera, Franco
   Lanese, Ivan
   de'Liguoro, Ugo
TI A theory of retractable and speculative contracts
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Behavioral contracts; Backtracking; Speculative execution; Compliance;
   Reversible computing
ID SESSION; REVERSIBILITY
AB Behavioral contracts are abstract descriptions of expected communication patterns followed by either clients or servers during their interaction. Behavioral contracts come naturally equipped with a notion of compliance: when a client and a server follow compliant contracts, their interaction is guaranteed to progress or successfully complete. We study two extensions of behavioral contracts, retractable contracts dealing with backtracking and speculative contracts dealing with speculative execution. We show that the two extensions give rise to the same notion of compliance. As a consequence, they also give rise to the same subcontract relation, which determines when one server can be replaced by another preserving compliance. Moreover, compliance and subcontract relation are both decidable in quadratic time. Finally, we study the relationship between retractable contracts and calculi for reversible computing. (C) 2018 Elsevier B.V. All rights reserved.
C1 [Barbanera, Franco] Univ Catania, Dipartimento Matemat & Informat, Catania, Italy.
   [Lanese, Ivan] Univ Bologna, INRIA, Dipartimento Informat Sci & Ingn, Bologna, Italy.
   [de'Liguoro, Ugo] Univ Torino, Dipartimento Informat, Turin, Italy.
C3 University of Catania; University of Bologna; University of Turin
RP Lanese, I (corresponding author), Univ Bologna, INRIA, Dipartimento Informat Sci & Ingn, Bologna, Italy.
EM barba@dmi.unict.it; ivan.lanese@gmail.com; ugo.deliguoro@unito.it
RI Lanese, Ivan/HNP-9572-2023
OI Lanese, Ivan/0000-0003-2527-9995
FU COST Action [IC1405, EUTYPES CA-15123]; University of Catania; Project
   FORMS 2015 of University of Turin
FX This work was partially supported by the COST Action IC1405 on
   "Reversible computation - extending horizons of computing". The first
   and third authors were partially supported also by the COST Action
   EUTYPES CA-15123 and, respectively, Project "Chance" of the University
   of Catania and Project FORMS 2015 of University of Turin. The second
   author is member of the INdAM Research group GNCS. We thank Mariangiola
   Dezani-Ciancaglini for interesting discussions and helpful suggestions.
   We also thank the anonymous reviewers for their useful comments and
   remarks.
CR Avizienis A, 2004, IEEE T DEPEND SECURE, V1, P11, DOI 10.1109/TDSC.2004.2
   BAETEN JCM, 1989, THEOR COMPUT SCI, V67, P283, DOI 10.1016/0304-3975(89)90006-6
   Barbanera F, 2017, ELECTRON P THEOR COM, P17, DOI 10.4204/EPTCS.261.5
   Barbanera F, 2017, LOG METH COMPUT SCI, V13, DOI 10.23638/LMCS-13(3:15)2017
   Barbanera F, 2017, LECT NOTES COMPUT SC, V10319, P119, DOI 10.1007/978-3-319-59746-1_7
   Barbanera F, 2016, ELECTRON P THEOR COM, P61, DOI 10.4204/EPTCS.203.5
   Barbanera F, 2016, FORM ASP COMPUT, V28, P697, DOI 10.1007/s00165-016-0358-2
   Barbanera F, 2014, ELECTRON PROC THEOR, P35, DOI 10.4204/EPTCS.162.5
   Barbanera F, 2015, MATH STRUCT COMP SCI, V25, P1339, DOI 10.1017/S096012951400005X
   Barbanera Franco, 2010, PPDP, P155, DOI DOI 10.1145/1836089.1836109
   Bartoletti M, 2015, LECT NOTES COMPUT SC, V9039, P161, DOI 10.1007/978-3-319-19195-9_11
   Bernardi G, 2016, LOG METH COMPUT SCI, V12, DOI 10.2168/LMCS-12(2:10)2016
   Bernardi G, 2016, MATH STRUCT COMP SCI, V26, P510, DOI 10.1017/S0960129514000243
   BOUDOL G, 1993, THEOR COMPUT SCI, V114, P31, DOI 10.1016/0304-3975(93)90152-J
   Carbone M, 2008, LECT NOTES COMPUT SC, V5201, P402, DOI 10.1007/978-3-540-85361-9_32
   Carothers CD, 1999, THIRTEENTH WORKSHOP ON PARALLEL AND DISTRIBUTED SIMULATION - PROCEEDINGS, P126, DOI [10.1109/PADS.1999.766169, 10.1145/347823.347828]
   Carpineti S, 2006, LECT NOTES COMPUT SC, V4184, P148
   Castagna G, 2009, ACM T PROGR LANG SYS, V31, DOI 10.1145/1538917.1538920
   Castellani I., 2017, LIPICS, V85
   Danos V, 2004, LECT NOTES COMPUT SC, V3170, P292
   de Vries E, 2010, LECT NOTES COMPUT SC, V6269, P569, DOI 10.1007/978-3-642-15375-4_39
   Dezani-Ciancaglini M, 2016, ELECTRON P THEOR COM, P60, DOI 10.4204/EPTCS.222.5
   Gapeyev V, 2002, J FUNCT PROGRAM, V12, P511, DOI 10.1017/S0956796802004318
   Garcia A., ABS170904152 CORR
   HELSGAUN K, 1995, SOFTWARE PRACT EXPER, V25, P905, DOI 10.1002/spe.4380250805
   Hoare CAR., 1985, Communicating Sequential Processes
   Honda K, 1998, LNCS, V1381, P22, DOI DOI 10.1007/BFB0053567
   Honda K, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P273, DOI 10.1145/2827695
   Hüttel H, 2016, ACM COMPUT SURV, V49, DOI 10.1145/2873052
   Lanese I., B EATCS, V114
   Lanese I, 2016, THEOR COMPUT SCI, V625, P25, DOI 10.1016/j.tcs.2016.02.019
   Lanese I, 2013, LECT NOTES COMPUT SC, V7792, P370, DOI 10.1007/978-3-642-37036-6_21
   Laneve C, 2007, LECT NOTES COMPUT SC, V4703, P212
   LAVILLE A, 1991, J SYMB COMPUT, V11, P321, DOI 10.1016/S0747-7171(08)80109-5
   Lintao Zhang, 2002, Computer Aided Verification. 14th International Conference, CAV 2002. Proceedings (Lecture Notes in Computer Science Vol.2404), P17
   Mezzina CA, 2017, PROCEEDINGS OF THE 19TH INTERNATIONAL SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING (PPDP 2017), P127, DOI 10.1145/3131851.3131864
   Mezzina CA, 2017, J LOG ALGEBR METHODS, V90, P2, DOI 10.1016/j.jlamp.2017.03.003
   Mousavi M, 2006, LECT NOTES COMPUT SC, V4337, P333
   Mousavi M, 2009, INFORM COMPUT, V207, P85, DOI 10.1016/j.ic.2007.11.008
   Padovani L, 2010, THEOR COMPUT SCI, V411, P3328, DOI 10.1016/j.tcs.2010.05.002
   Phillips I, 2007, J LOGIC ALGEBR PROGR, V73, P70, DOI 10.1016/j.jlap.2006.11.002
   Prabhu P, 2010, PLDI '10: PROCEEDINGS OF THE 2010 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P50, DOI 10.1145/1806596.1806603
   Preda MD, 2011, LECT NOTES COMPUT SC, V7084, P590, DOI 10.1007/978-3-642-25535-9_45
   Quiñones CG, 2005, ACM SIGPLAN NOTICES, V40, P269, DOI 10.1145/1064978.1065043
   Tiezzi F, 2014, ELECTRON PROC THEOR, P17, DOI 10.4204/EPTCS.155.3
   Tiezzi F, 2015, J LOG ALGEBR METHODS, V84, P684, DOI 10.1016/j.jlamp.2015.03.004
   Xu L, 2008, J ARTIF INTELL RES, V32, P565, DOI 10.1613/jair.2490
NR 47
TC 2
Z9 2
U1 0
U2 1
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 1
PY 2018
VL 167
BP 25
EP 50
DI 10.1016/j.scico.2018.06.005
PG 26
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GZ1NZ
UT WOS:000449136100003
OA Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Casadei, R
   Aldini, A
   Viroli, M
AF Casadei, Roberto
   Aldini, Alessandro
   Viroli, Mirko
TI Towards attack-resistant Aggregate Computing using trust mechanisms
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Aggregate Computing; Computational fields; Collaborative P2P systems;
   Security; Trust
ID WIRELESS SENSOR NETWORKS; AD-HOC NETWORKS; MANAGEMENT; SYSTEMS; MOBILE;
   FRAMEWORK
AB Recent trends such as the Internet of Things and pervasive computing demand for novel engineering approaches able to support the specification and scalable runtime execution of adaptive behaviour for large collections of interacting devices. Aggregate Computing is one such approach, formally founded in the field calculus, which enables programming of device aggregates by a global stance, through functional composition of self-organisation patterns that is turned automatically into repetitive local computations and gossip-like interactions. However, the logically decentralised and open nature of such algorithms and systems presumes a fundamental cooperation of the devices involved: an error in a device or a focused attack may significantly compromise the computation outcome and hence the algorithms built on top. For this reason, in this paper, we move the first steps towards attack-resistant aggregate computations. We propose trust as a framework to detect, ponder or isolate voluntary/involuntary misbehaviours, with the goal of mitigating the influence on the overall computation. On top of this, we consider recommendations in order to provide more reactivity and stability through the sharing of individual perceptions. To better understand the fragility of aggregate systems in face of attacks and investigate the extent of the mitigation afforded by the adoption of trust mechanisms, we consider the paradigmatic case of the gradient algorithm. Experiments are carried out to analyse the sensitivity of the adopted trust framework to malevolent actions and to study the impact of different factors on the error committed by trust-based gradients under attack. Finally, in a case study of the spatial channel algorithm, it is shown how the protection afforded by attack-resistant gradients can be effectively propagated to higher-level building blocks. (C) 2018 Elsevier B.V. All rights reserved.
C1 [Casadei, Roberto; Viroli, Mirko] Alma Mater Studiorum Univ Bologna, Bologna, Italy.
   [Aldini, Alessandro] Univ Urbino Carlo Bo, Urbino, Italy.
C3 University of Bologna; University of Urbino
RP Casadei, R (corresponding author), Alma Mater Studiorum Univ Bologna, Bologna, Italy.
EM roby.casadei@unibo.it
RI Casadei, Roberto/I-5410-2017
OI Casadei, Roberto/0000-0001-9149-949X; Aldini,
   Alessandro/0000-0002-7250-5011; Viroli, Mirko/0000-0003-2702-5702
CR Aldini A, 2018, ACM T MODEL COMPUT S, V28, DOI 10.1145/3155337
   Aldini A, 2015, SECUR COMMUN NETW, V8, P2933, DOI 10.1002/sec.1220
   [Anonymous], FED CONF COMPUT SCI
   [Anonymous], 2004, INPROCEEDINGS ACM
   [Anonymous], 2004, WORKSHOP DATA MANAGE, DOI DOI 10.1145/1052199.1052213
   [Anonymous], P ACM INT JOINT C PE
   [Anonymous], LECT NOTES COMPUTER
   Audrito G., 2017, SELF ADAPTIVE SELF O
   Audrito G, 2016, 2016 IEEE 1ST INTERNATIONAL WORKSHOPS ON FOUNDATIONS AND APPLICATIONS OF SELF* SYSTEMS (FAS*W), P192, DOI 10.1109/FAS-W.2016.50
   Bachrach J, 2010, NEURAL COMPUT APPL, V19, P825, DOI 10.1007/s00521-010-0382-8
   Beal J, 2006, IEEE INTELL SYST, V21, P10, DOI 10.1109/MIS.2006.29
   Beal J., ARXIV12025509
   Beal J, 2015, COMPUTER, V48, P22, DOI 10.1109/MC.2015.261
   BUCHEGGER S, 2004, 2 WORKSH EC PEER PEE
   Casadei R., 2016, 1 WORKSHOP PROGRAMMI, P5, DOI DOI 10.1145/2957319.2
   Casadei R., 2017, INT C SOFTW ENG FORM, P507
   Cho JH, 2011, IEEE COMMUN SURV TUT, V13, P562, DOI 10.1109/SURV.2011.092110.00088
   Coore Daniel, 1999, THESIS
   Damiani F, 2016, SCI COMPUT PROGRAM, V117, P17, DOI 10.1016/j.scico.2015.11.005
   Damiani F, 2015, LECT NOTES COMPUT SC, V9039, P113, DOI 10.1007/978-3-319-19195-9_8
   Dean J, 2008, COMMUN ACM, V51, P107, DOI 10.1145/1327452.1327492
   Ganeriwal S, 2008, ACM T SENSOR NETWORK, V4, DOI 10.1145/1362542.1362546
   Giavitto J.-L., 2002, 722002 U EVRY
   Mármol FG, 2009, COMPUT SECUR, V28, P545, DOI 10.1016/j.cose.2009.05.005
   Han GJ, 2014, J COMPUT SYST SCI, V80, P602, DOI 10.1016/j.jcss.2013.06.014
   Huang JW, 2010, IEEE INTERNET COMPUT, V14, P38, DOI 10.1109/MIC.2010.83
   Josang A, 2001, INT J UNCERTAIN FUZZ, V9, P279, DOI 10.1016/S0218-4885(01)00083-1
   Josang A., 2002, 15 BLED C EL COMM
   Koutrouli E, 2006, LECT NOTES COMPUT SC, V4083, P152
   Li J, 2008, IEEE COMMUN MAG, V46, P108, DOI 10.1109/MCOM.2008.4481349
   Li Z, 2012, IEEE T MOBILE COMPUT, V11, P1287, DOI 10.1109/TMC.2011.151
   Fernandez-Marquez JL, 2013, NAT COMPUT, V12, P43, DOI 10.1007/s11047-012-9324-y
   MADDEN SR, 2002, WORKSH MOB COMP SYST
   Malewicz Grzegorz, 2010, P ACM SIGMOD INT C M, P135, DOI [DOI 10.1145/1807167.1807184, 10.1145/1807167.1807184]
   Mamei M, 2009, ACM T SOFTW ENG METH, V18, DOI 10.1145/1538942.1538945
   Mousa H, 2015, COMPUT NETW, V90, P49, DOI 10.1016/j.comnet.2015.07.011
   Nagpal R., 2001, Programmable Self-Assembly: Constructing Global Shape Using Biologically-Inspired Local Interactions and Origami Mathematics
   Ni Y, 2005, ACM SIGPLAN NOTICES, V40, P249, DOI 10.1145/1064978.1065040
   Packer HS, 2015, COMPUT SOC SCI, P159, DOI 10.1007/978-3-319-08681-1_8
   Perrig A, 2002, WIREL NETW, V8, P521, DOI 10.1023/A:1016598314198
   Pianini D, 2013, J SIMUL, V7, P202, DOI 10.1057/jos.2012.27
   Priayoheswari B, 2016, PROCEEDINGS OF THE INTERNATIONAL CONFERENCE ON INFORMATICS AND ANALYTICS (ICIA' 16), DOI 10.1145/2980258.2980413
   Tarable Alberto, 2015, 2015 IEEE Conference on Computer Communications (INFOCOM). Proceedings, P2821, DOI 10.1109/INFOCOM.2015.7218675
   Trcek D, 2009, MATH COMPUT MODEL, V49, P226, DOI 10.1016/j.mcm.2008.05.005
   Villari M, 2016, IEEE CLOUD COMPUT, V3, P76, DOI 10.1109/MCC.2016.124
   Viroli Mirko, 2018, Coordination Models and Languages. 20th IFIP WG 6.1 International Conference, COORDINATION 2018. Held as Part of the 13th International Federated Conference on Distributed Computing Techniques, DisCoTec 2018. Proceedings: LNCS 10852, P252, DOI 10.1007/978-3-319-92408-3_12
   Viroli M., 2013, COMMUN COMPUT PHYS, V393, P114, DOI 10.1007/978-3-642-45364-9
   Viroli M., 2005, AAMAS
   Viroli M, 2015, INT CONF SELF SELF, P81, DOI 10.1109/SASO.2015.16
   Viroli M, 2016, UBICOMP'16 ADJUNCT: PROCEEDINGS OF THE 2016 ACM INTERNATIONAL JOINT CONFERENCE ON PERVASIVE AND UBIQUITOUS COMPUTING, P1321, DOI 10.1145/2968219.2979129
   Viroli M, 2018, ACM T MODEL COMPUT S, V28, DOI 10.1145/3177774
   Whitehouse Kamin, 2004, P 2 INT C MOB SYST A
   Yaich R., 2012, P 27 ANN ACM S APPL, P2022, DOI [10.1145/2245276.2232112, DOI 10.1145/2245276.2232112]
   Yu YL, 2012, J NETW COMPUT APPL, V35, P867, DOI 10.1016/j.jnca.2011.03.005
   Zhang Y., 2007, J. Netw. Secur., V5, P73
NR 55
TC 19
Z9 19
U1 0
U2 4
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 1
PY 2018
VL 167
BP 114
EP 137
DI 10.1016/j.scico.2018.07.006
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GZ1NZ
UT WOS:000449136100007
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Du, DH
   Huang, P
   Jiang, KQ
   Mallet, F
AF Du, Dehui
   Huang, Ping
   Jiang, Kaiqiang
   Mallet, Frederic
TI pCSSL: A stochastic extension to MARTE/CCSL for modeling uncertainty in
   Cyber Physical Systems
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Cyber-Physical Systems; MARTE; pCCSL; Stochastic hybrid automata;
   Energy-aware building; Statistical model checking
ID FRAMEWORK; CHECKING; FOCUS; TIME
AB Cyber-Physical Systems (CPSs) are networks of heterogeneous embedded systems immersed within a physical environment, thus combining discrete and continuous processes. As for any complex systems, the global system behavior is difficult to predict, in an analytical way, from the individual behaviors of its parts. A global analysis can only be done through a holistic process, via simulation for instance, requiring precise models of the parts and of their interactions. While the subsystems are usually expected to be fully deterministic, their interactions with the uncertain environment can be difficult to characterize precisely. We propose an approach to characterize the environment and its interactions through stochastic properties, while the discrete part remains fully determined. The novelty of our work is that we explore a more standard-based approach relying on SysML/MARTE. CCSL and logical clocks are used to identify synchronization points in the various heterogeneous UML diagrams. A CCSL specification expresses a set of possible behaviors. Refinement is performed by adding new constraints and thus reducing the set of possible behaviors. The classical MARTE/CCSL-based process explores the remaining solutions through simulation by applying a simulation policy. To help exploring the solution state-space, we propose a stochastic extension of CCSL, called pCCSL, to characterize the likelihood of different configurations to occur. Then, we use Statistical Model Checking to explore alternative solutions and drive the refinement process. We illustrate our proposition by modeling an energy-aware building, with different control strategies and occupant energy usage models. We explore the impact on the energy footprint of the different variants and control strategies. (C) 2018 Elsevier B.V. All rights reserved.
C1 [Du, Dehui; Huang, Ping; Jiang, Kaiqiang] East China Normal Univ, Shanghai Key Lab Trustworthy Comp, Shanghai, Peoples R China.
   [Mallet, Frederic] Univ Cote Azur, CNRS, INRIA, I3S, Nice, France.
   [Mallet, Frederic] INRIA, Sophia Antipolis Mediterranee, Rocquencourt, France.
C3 East China Normal University; Inria; Universite Cote d'Azur; Centre
   National de la Recherche Scientifique (CNRS); Inria
RP Mallet, F (corresponding author), Univ Cote Azur, CNRS, INRIA, I3S, Nice, France.
EM dhdu@sei.ecnu.edu.cn; Frederic.Mallet@unice.fr
RI Mallet, Frederic/HKW-6782-2023; Mallet, Frédéric/H-3942-2011
OI Mallet, Frédéric/0000-0002-9088-9821
FU NSFC [61472140, 61532019]; China HGJ Project [2017ZX01038102-002];
   French PIA Clarity
FX This work is partially supported by NSFC under Grant Nos. 61472140,
   61532019 and China HGJ Project No. 2017ZX01038102-002. It is also
   supported by the French PIA Clarity.
CR [Anonymous], CEUR WORKSH P
   [Anonymous], ERTS
   [Anonymous], 2014, 2014 24 INT WORKSHOP, DOI DOI 10.1109/PATMOS.2014.6951890
   [Anonymous], 1996, HYBRID SYSTEMS 4
   [Anonymous], SUSTAIN INTERNET ICT
   [Anonymous], 2009, 6925 INRIA
   [Anonymous], P QAPL ELECT P THEOR
   [Anonymous], 2015, P INT WORKSHOP MANAG
   [Anonymous], 2016, INT WORKSH FORM ASP
   [Anonymous], HDB AIR COND SYST DE
   Arnold A., 1999, Fundamenta Informaticae, V40, P109
   Benveniste A, 2003, P IEEE, V91, P64, DOI 10.1109/JPROC.2002.805826
   Bernardi S, 2011, SOFTW SYST MODEL, V10, P313, DOI 10.1007/s10270-009-0128-1
   Bohlender D, 2014, LECT NOTES COMPUT SC, V8803, P177, DOI 10.1007/978-3-662-45231-8_13
   Boudjadar AJ, 2014, 2014 THEORETICAL ASPECTS OF SOFTWARE ENGINEERING CONFERENCE (TASE), P126, DOI 10.1109/TASE.2014.27
   Boutekkouk F, 2009, J OBJECT TECHNOL, V8, P135, DOI 10.5381/jot.2009.8.1.a1
   Brosig F, 2015, IEEE T SOFTWARE ENG, V41, P157, DOI 10.1109/TSE.2014.2362755
   David Alexandre, 2012, Leveraging Applications of Formal Methods, Verification and Validation. Applications and Case Studies. Proceedings of the 5th International Symposium, ISoLA 2012, P293, DOI 10.1007/978-3-642-34032-1_28
   David Alexandre, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P349, DOI 10.1007/978-3-642-22110-1_27
   David A, 2015, INT J SOFTW TOOLS TE, V17, P351, DOI [10.1007/s10009-014-0361-y, 10.1007/s10009-014-0323-4]
   David A, 2012, SCI CHINA INFORM SCI, V55, P2694, DOI 10.1007/s11432-012-4742-0
   David A, 2011, LECT NOTES COMPUT SC, V6919, P80, DOI 10.1007/978-3-642-24310-3_7
   DeAntoni J, 2012, LECT NOTES COMPUT SC, V7304, P34, DOI 10.1007/978-3-642-30561-0_4
   Demathieu S, 2008, ISORC 2008: 11TH IEEE SYMPOSIUM ON OBJECT/COMPONENT/SERVICE-ORIENTED REAL-TIME DISTRIBUTED COMPUTING - PROCEEDINGS, P50
   Deshpande Akash., 1995, Hybrid Systems, P138
   Espinoza H, 2006, LECT NOTES COMPUT SC, V3844, P79
   Fang HX, 2014, INT J SOFTW TOOLS TE, V16, P339, DOI 10.1007/s10009-014-0318-1
   Fehnker A, 2004, LECT NOTES COMPUT SC, V2993, P326
   Gu F, 2016, DES AUT TEST EUROPE, P780
   Iqbal Muhammad Zohaib, 2012, Model Driven Engineering Languages and Systems. Proceedings 15th International Conference, MODELS 2012, P642, DOI 10.1007/978-3-642-33666-9_41
   Jiang ZH, 2012, LECT NOTES COMPUT SC, V7214, P188, DOI 10.1007/978-3-642-28756-5_14
   LAMPORT L, 1978, COMMUN ACM, V21, P558, DOI 10.1145/359545.359563
   Larsen MEV, 2015, 2015 ACM/IEEE 18TH INTERNATIONAL CONFERENCE ON MODEL DRIVEN ENGINEERING LANGUAGES AND SYSTEMS (MODELS), P186, DOI 10.1109/MODELS.2015.7338249
   Lee EA, 1998, IEEE T COMPUT AID D, V17, P1217, DOI 10.1109/43.736561
   Lee EA, 2008, ISORC 2008: 11TH IEEE SYMPOSIUM ON OBJECT/COMPONENT/SERVICE-ORIENTED REAL-TIME DISTRIBUTED COMPUTING - PROCEEDINGS, P363, DOI 10.1109/ISORC.2008.25
   Lee EA, 2015, SENSORS-BASEL, V15, P4837, DOI 10.3390/s150304837
   Legay A, 2010, LECT NOTES COMPUT SC, V6418, P122, DOI 10.1007/978-3-642-16612-9_11
   Liu J, 2013, FRONT COMPUT SCI-CHI, V7, P95, DOI 10.1007/s11704-012-1301-1
   Liu ZW, 2012, IEEE INT C ENG COMP, P137, DOI 10.1109/ICECCS.2012.36
   Mallet F., 2015, Formal Modeling and Verification of Cyber-Physical Systems, P26, DOI [10.1007/978-3-658-09994-72, DOI 10.1007/978-3-658-09994-72]
   Mallet F, 2015, SCI COMPUT PROGRAM, V106, P78, DOI 10.1016/j.scico.2015.03.001
   Ptolemaeus C., 2014, System Design, Modeling, and Simulation using Ptolemy II
   Selic B., 2013, Modeling and analysis of real-time and embedded systems with UML and MARTE: Developing cyber-physical systems
   Sen K, 2004, LECT NOTES COMPUT SC, V3114, P202
   Suryadevara J, 2013, LECT NOTES COMPUT SC, V8137, P1, DOI 10.1007/978-3-642-40561-7_1
   Tribastone, 2008, P 7 INT WORKSHOP SOF, P67
   van Glabbeek R, 2016, DISTRIB COMPUT, V29, P279, DOI 10.1007/s00446-015-0262-7
   Younes HLS, 2006, INFORM COMPUT, V204, P1368, DOI 10.1016/j.ic.2006.05.002
   Zou J, 2009, 15TH IEEE REAL-TIME AND EMBEDDED TECHNOLOGY AND APPLICATION SYMPOSIUM: RTAS 2009, PROCEEDINGS, P77, DOI 10.1109/RTAS.2009.39
NR 49
TC 17
Z9 21
U1 0
U2 16
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 15
PY 2018
VL 166
BP 71
EP 88
DI 10.1016/j.scico.2018.05.005
PG 18
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GV5OO
UT WOS:000446152000004
OA Bronze
DA 2024-07-18
ER

PT J
AU Song, J
   Jee, E
   Bae, DH
AF Song, Jiyoung
   Jee, Eunkyoung
   Bae, Doo-Hwan
TI FBDTester 2.0: Automated test sequence generation for FBD programs with
   internal memory states
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Function block diagram; Automated test sequence generation; Structural
   testing; SMT solver
ID FUNCTION BLOCK DIAGRAMS; VERIFICATION; VALIDATION; SIMULINK
AB As Function Block Diagram (FBD) programs are used to implement safety-critical systems such as nuclear reactor protection systems, it is crucial to generate effective test cases. FBD programs are running on programmable logic controllers (PLCs) that execute the programs repeatedly within a particular scan time. Among the elements of FBD programs, function blocks and feedback variables save the inputs or outputs of the previous scan cycle into internal memories. The data stored in the internal memory are used to operate the function blocks of the next scan cycle. Researchers have recently developed an automated test generation technique aiming to satisfy several structural test coverage criteria for FBD programs. Among them, Jee et al.'s approach has an advantage of generating tests from FBD programs without requiring any intermediate models. However, test sequence generation for FBD programs with internal memory states was not fully automated in Jee et al.'s approach. This paper extends Jee et al.'s work by generating test sequences from FBD programs with internal memory states in a fully automated manner. The key technique involves explicitly unwinding FBD programs and solving the test requirements using an SMT solver. We conduct experiments on increasing the coverage of test requirements by unwinding cycles and evaluating the effectiveness of the test set using mutation analysis with several subject programs, including a real-world reactor protection system. The experimental results show that the proposed approach is able to generate effective test sequences for FBD programs. To demonstrate the efficiency of the proposed approach, we compared the test sequence generation time required for our approach with those for other approaches. The comparison results show that even excluding the generation time of test models of other approaches, the proposed approach increased the time-efficiency by more than 11 times. (C) 2018 Elsevier B.V. All rights reserved.
C1 [Song, Jiyoung; Jee, Eunkyoung; Bae, Doo-Hwan] Korea Adv Inst Sci & Technol, 291 Daehak Ro, Daejeon 34141, South Korea.
C3 Korea Advanced Institute of Science & Technology (KAIST)
RP Jee, E (corresponding author), Korea Adv Inst Sci & Technol, 291 Daehak Ro, Daejeon 34141, South Korea.
EM jysong@se.kaist.ac.kr; ekjee@se.kaist.ac.kr; bae@se.kaist.ac.kr
RI Bae, Doo-Hwan/C-1538-2011
FU Basic Science Research Program through the National Research Foundation
   of Korea (NRF) - Ministry of Education [NRF-2016R1A6A3A11931209];
   Next-Generation Information Computing Development Program through the
   NRF - Ministry of Science and ICT (MSIT) [NRF-2017M3C4A7066212];
   Institute for Information & communications Technology Promotion (IITP) -
   Korea government (MSIT) [2015-0-00250]
FX This research was partly supported by Basic Science Research Program
   through the National Research Foundation of Korea (NRF) funded by the
   Ministry of Education (NRF-2016R1A6A3A11931209), Next-Generation
   Information Computing Development Program through the NRF funded by the
   Ministry of Science and ICT (MSIT) (NRF-2017M3C4A7066212), and Institute
   for Information & communications Technology Promotion (IITP) grant
   funded by the Korea government (MSIT) (No. 2015-0-00250, (SW Star Lab)
   Software R&D for Model-based Analysis and Verification of Higher-order
   Large Complex System).
CR Acharyulu PVS, 2015, SAFETY SCI, V77, P133, DOI 10.1016/j.ssci.2015.03.017
   [Anonymous], IEEE T SOFTW ENG
   [Anonymous], 19 IFAC WORLD C
   [Anonymous], NUCL ENG TECHNOL
   [Anonymous], 2015 IEEE 8 INT C SO
   [Anonymous], RPSSDS23101 DOOS HEA
   [Anonymous], REQUIREMENTS PROGRAM
   [Anonymous], PEERJ PREPRINTS
   [Anonymous], P 2013 IEEE 18 C EM, DOI DOI 10.1109/ETFA.2013.6647997
   [Anonymous], 2000, DISCRETE EVENT SYSTE
   [Anonymous], 2014, INT J SOFTW TOOLS TE
   [Anonymous], INT STAND PROGR CONT
   [Anonymous], 2007, WORKSH DOM SPEC APPR
   [Anonymous], KNICSRPSSTR141
   Baresi L, 2000, IEEE SYS MAN CYBERN, P2437, DOI 10.1109/ICSMC.2000.884357
   Brillout A, 2010, LECT NOTES COMPUT SC, V6286, P208
   Colin S, 2004, SOFTW TEST VERIF REL, V14, P213, DOI 10.1002/stvr.300
   Donghwan Shin, 2012, Model Driven Engineering Languages and Systems. Proceedings 15th International Conference, MODELS 2012, P465, DOI 10.1007/978-3-642-33666-9_30
   Dutertre B, 2006, TOOL PAPER
   Enoiu EP, 2013, IEEE ICST WORKSHOP, P158, DOI 10.1109/ICSTW.2013.27
   Godefroid Patrice., 2011, Proc. ISSTA, P23, DOI [10.1145/2001420.2001424, DOI 10.1145/2001420.2001424]
   Goknil A., 2015, Proceedings of the 2015 International Symposium on Software Testing and Analysis, P385
   Guan Jing., 2015, 2015 IEEE Eighth International Conference on Software Testing, Verification and Validation Workshops (ICSTW), P1
   He NN, 2011, DES AUT CON, P224
   Jee E, 2005, LECT NOTES COMPUT SC, V3688, P67
   Jee E, 2014, SOFTW TEST VERIF REL, V24, P608, DOI 10.1002/stvr.1548
   Jee E, 2009, INFORM SOFTWARE TECH, V51, P1131, DOI 10.1016/j.infsof.2009.01.003
   Khan A, 2017, IEEE INT CON AUTO SC, P648, DOI 10.1109/COASE.2017.8256176
   Lahtinen J, 2014, 2014 9TH INTERNATIONAL CONFERENCE ON THE QUALITY OF INFORMATION AND COMMUNICATIONS TECHNOLOGY (QUATIC), P216, DOI 10.1109/QUATIC.2014.15
   Mancini Toni, 2013, Computer Aided Verification. 25th International Conference, CAV 2013. Proceedings. LNCS 8044, P296, DOI 10.1007/978-3-642-39799-8_21
   Mani P, 2016, 2016 INTERNATIONAL CONFERENCE ON INFORMATION COMMUNICATION AND EMBEDDED SYSTEMS (ICICES)
   Mohalik S, 2014, SOFTW TEST VERIF REL, V24, P155, DOI 10.1002/stvr.1489
   Newell J, 2018, J AUTOM REASONING, V60, P63, DOI 10.1007/s10817-017-9415-7
   Richter S, 2003, NUCL PLANT J, V21, P36
   Song J, 2016, ASIA PAC SOFWR ENG, P305, DOI [10.1109/APSEC.2016.050, 10.1109/APSEC.2016.42]
   Tekaya M, 2015, ADV INTELL SYST, V365, P495, DOI 10.1007/978-3-319-19216-1_47
   Tseng WH, 2013, INFORM SOFTWARE TECH, V55, P344, DOI 10.1016/j.infsof.2012.08.016
   Ulewicz S, 2018, CONTROL ENG PRACT, V73, P171, DOI 10.1016/j.conengprac.2018.01.010
   Utting M, 2012, SOFTW TEST VERIF REL, V22, P297, DOI 10.1002/stvr.456
   Wu YC, 2014, INFORM SOFTWARE TECH, V56, P1360, DOI 10.1016/j.infsof.2014.04.016
   Xiao XS, 2013, IEEE INT CONF AUTOM, P246, DOI 10.1109/ASE.2013.6693084
NR 41
TC 7
Z9 9
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 1
PY 2018
VL 163
BP 115
EP 137
DI 10.1016/j.scico.2018.04.005
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GN0MN
UT WOS:000438662800007
OA hybrid
DA 2024-07-18
ER

PT J
AU Garcia, A
   Laneve, C
   Lienhardt, M
AF Garcia, Abel
   Laneve, Cosimo
   Lienhardt, Michael
TI Static analysis of cloud elasticity
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Resource consumption analysis; Cloud computing; Behavioural type system;
   Subject reduction; Concurrent programming
ID HEAP-SPACE ANALYSIS; COST-ANALYSIS; COMPUTATIONAL-COMPLEXITY; INFERENCE;
   PROGRAMS
AB We propose a static analysis technique that computes upper bounds of virtual machine usages in a concurrent language with explicit acquire and release operations of virtual machines. In our language it is possible to delegate other (ad-hoc or third party) concurrent code to release virtual machines (by passing them as arguments of invocations). Our technique is modular and consists of (i) a type system associating programs with behavioural types that record relevant information for resource usage (creations, releases, and concurrent operations), (ii) a translation function that takes behavioural types and returns cost equations, and (iii) an automatic off-the-shelf solver for the cost equations. A soundness proof of the type system establishes the correctness of our technique with respect to the cost equations. We have experimentally evaluated our technique using a cost analysis solver and we report some results. (C) 2017 Elsevier B.V. All rights reserved.
C1 [Garcia, Abel; Laneve, Cosimo] Univ Bologna INRIA Focus, Dept Comp Sci & Engn, Bologna, Italy.
   [Lienhardt, Michael] Univ Torino, Comp Sci Dept, Turin, Italy.
C3 University of Bologna; University of Turin
RP Laneve, C (corresponding author), Univ Bologna INRIA Focus, Dept Comp Sci & Engn, Bologna, Italy.
EM abel.garcia2@unibo.it; cosimo.laneve@unibo.it;
   michael.lienhardt@di.unito.it
OI Laneve, Cosimo/0000-0002-0052-4061
CR Albert E., 2015, LECT NOTES COMPUTER, P85
   Albert E, 2008, LECT NOTES COMPUT SC, V5079, P221
   Albert E, 2015, SOFTW TEST VERIF REL, V25, P218, DOI 10.1002/stvr.1569
   Albert E, 2014, LECT NOTES COMPUT SC, V8723, P18, DOI 10.1007/978-3-319-10936-7_2
   Albert E, 2012, THEOR COMPUT SCI, V413, P142, DOI 10.1016/j.tcs.2011.07.009
   Albert E, 2010, ACM SIGPLAN NOTICES, V45, P121
   [Anonymous], LNCS
   Batik R., 2006, LECT NOTES COMPUTER, V4339, P152
   BERMAN L, 1980, THEOR COMPUT SCI, V11, P71, DOI 10.1016/0304-3975(80)90037-7
   Carbonneaux Q, 2015, ACM SIGPLAN NOTICES, V50, P467, DOI [10.1145/2813885.2737955, 10.1145/2737924.2737955]
   Chin WN, 2005, LECT NOTES COMPUT SC, V3672, P70
   Alonso-Blas DE, 2012, LECT NOTES COMPUT SC, V7460, P405, DOI 10.1007/978-3-642-33125-1_27
   Flores-Montoya Antonio, 2014, Programming Languages and Systems. 12th Asian Symposium (APLAS 2014), Proceedings: LNCS 8858, P275, DOI 10.1007/978-3-319-12736-1_15
   Garcia A., 2015, STATIC ANAL RESOURCE
   Garcia A, 2015, PROCEEDINGS OF THE 17TH INTERNATIONAL SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING (PPDP 2015), P125, DOI 10.1145/2790449.2790524
   Giachino Elena, 2016, Theory and Practice of Formal Methods. Essays Dedicated to Frank de Boer on the Occasion of His 60th Birthday. LNCS 9660, P211, DOI 10.1007/978-3-319-30734-3_15
   Giachino E, 2016, SOFTW SYST MODEL, V15, P1013, DOI 10.1007/s10270-014-0444-y
   Gulwani S, 2009, ACM SIGPLAN NOTICES, V44, P127, DOI 10.1145/1594834.1480898
   Hoffmann J., AUTOMATIC STATIS COS
   Hoffmann J, 2012, ACM T PROGR LANG SYS, V34, DOI 10.1145/2362389.2362393
   Hoffmann J, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P357, DOI 10.1145/1926385.1926427
   Hofmann M, 2006, LECT NOTES COMPUT SC, V3924, P22
   Hofmann M, 2003, ACM SIGPLAN NOTICES, V38, P185, DOI 10.1145/640128.604148
   Hofmann M, 2009, LECT NOTES COMPUT SC, V5771, P317, DOI 10.1007/978-3-642-04027-6_24
   Johnsen E.B., 2011, Lecture Notes in Computer Science, V6957, P142, DOI [10.1007/978- 3- 642-25271-6 8, DOI 10.1007/978-3-642-25271-6]
   Mathew S., 2014, Overview of Amazon Web Services
   TARJAN RE, 1985, SIAM J ALGEBRA DISCR, V6, P306, DOI 10.1137/0606031
   WEGBREIT B, 1975, COMMUN ACM, V18, P528, DOI 10.1145/361002.361016
NR 28
TC 4
Z9 4
U1 0
U2 10
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 1
PY 2017
VL 147
BP 27
EP 53
DI 10.1016/j.scico.2017.03.008
PG 27
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA FG3CK
UT WOS:000410014200003
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Kirbas, S
   Hall, T
   Sen, A
AF Kirbas, Serkan
   Hall, Tracy
   Sen, Alper
TI Evolutionary coupling measurement: Making sense of the current chaos
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Evolutionary coupling; Measurement; Measurement theory
AB Objective: The aim of this research is to evaluate the measurement of evolutionary coupling (EC) in software artefacts from a measurement theory perspective.
   Background: Evolutionary coupling (EC) can be defined as the implicit relationship between two or more software artefacts which are frequently changed together. Previous studies on EC show that EC measures which are based on software change history information play an important role in measuring software quality and predicting defects. The many previous EC measures published are disparate and no comprehensive evaluation of the current EC measures exists. Therefore it is hard for researchers and practitioners to compare, choose and use EC measures.
   Methods: We define 19 evaluation criteria based on the principles of measurement theory and metrology. We evaluate previously published EC measures by applying these criteria.
   Results: Our evaluation results revealed that current EC measurement has the particular weaknesses around establishing sound empirical relation systems, defining detailed and standardised measurement procedures as well as scale type and mathematical validation.
   Conclusions: We provide information about the quality of existing EC measures and measurement methods. The results suggest that there is more work to be done to put EC measurement on a firm footing that will enable the reliable measurement of EC and the accurate replication of EC measurement. (C) 2016 Elsevier B.V. All rights reserved.
C1 [Kirbas, Serkan; Hall, Tracy] Brunel Univ London, Dept Comp Sci, London, England.
   [Kirbas, Serkan; Sen, Alper] Bogazici Univ, Dept Comp Engn, Istanbul, Turkey.
C3 Brunel University; Bogazici University
RP Kirbas, S (corresponding author), Bogazici Univ, Dept Comp Engn, Istanbul, Turkey.
EM Serkan.Kirbas@boun.edu.tr; Tracy.Hall@brunel.ac.uk;
   Alper.Sen@boun.edu.tr
RI Sen, Alper/A-7868-2009
OI Hall, Tracy/0000-0002-2728-9014; KIRBAS, Serkan/0000-0002-9918-2822
FU Scientific and Technological Research Council of Turkey (TUBITAK)
   [B.14.2.TBT.0.06.01-214-115535]; Bogazici University Research Fund
   [7223]; Turkish Academy of Sciences; Engineering and Physical Sciences
   Research Council (EPSRC) of the UK [EP/L011751/1]; EPSRC [EP/L011751/1]
   Funding Source: UKRI
FX We would like to thank the Scientific and Technological Research Council
   of Turkey (TUBITAK) for its financial support
   (B.14.2.TBT.0.06.01-214-115535). This research was supported in part by
   Bogazici University Research Fund (7223) and the Turkish Academy of
   Sciences and by Engineering and Physical Sciences Research Council
   (EPSRC) of the UK (EP/L011751/1).
CR Abran A., 2010, Software metrics and software metrology
   Adams B., 2010, P 32 ACMIEEE INT C S, P305
   Alali A, 2013, IEEE WORK CONF MIN S, P169, DOI 10.1109/MSR.2013.6624024
   [Anonymous], 2014, SOFTWARE METRICS RIG, DOI DOI 10.1201/B17461
   Ball T., 1997, ICSE WORKSH PROC MOD
   BASILI VR, 1984, IEEE T SOFTWARE ENG, V10, P728, DOI 10.1109/TSE.1984.5010301
   Beyer D., 2005, TECH REP
   Beyer D, 2006, WORK CONF REVERSE EN, P199
   Breu S, 2006, IEEE INT CONF AUTOM, P221
   Briand LC, 1996, IEEE T SOFTWARE ENG, V22, P68, DOI 10.1109/32.481535
   Cataldo M, 2009, IEEE T SOFTWARE ENG, V35, P864, DOI 10.1109/TSE.2009.42
   Cheikhi L., 2014, INT J STW ENG APPL, V8
   Colaco Methanias  Jr., 2009, Proceedings of the 2009 23rd Brazilian Symposium on Software Engineering. SBES 2009, P54, DOI 10.1109/SBES.2009.8
   D'Ambros M, 2009, WORK CONF REVERSE EN, P135, DOI 10.1109/WCRE.2009.19
   Eaddy M, 2008, IEEE T SOFTWARE ENG, V34, P497, DOI 10.1109/TSE.2008.36
   Ericsson M, 2013, ASIA PAC SOFWR ENG, P55, DOI 10.1109/APSEC.2013.112
   Fenton N.E., 1991, Software Testing, Verification and Reliability, V1, P27, DOI DOI 10.1002/STVR.4370010204
   Gall H, 2003, SIXTH INTERNATIONAL WORKSHOP ON PRINCIPLES OF SOFTWARE EVOLUTION, PROCEEDINGS, P13
   Gall H, 1998, PROC IEEE INT CONF S, P190, DOI 10.1109/ICSM.1998.738508
   Graves TL, 2000, IEEE T SOFTWARE ENG, V26, P653, DOI 10.1109/32.859533
   International Standards Organisation (ISO), 2007, 15939 ISO IEC
   International Standards Organisation (ISO), 2006, 14764 ISO IEC
   Kagdi H., 2007, P 4 INT WORKSH MIN S, P17
   Kagdi H., 2006, P 2006 INT WORKSH MI, P47, DOI [DOI 10.1145/1137983.1137996, 10.1145/1137983.1137996]
   Kirbas S., 2014, P 8 ACM IEEE INT S E
   Kirbas S., 2014, P 8 TURK NAT SOFTW E
   Kitchenham B., 2007, Guidelines for performing systematic literature reviews in software engineering
   Kitchenham B, 2010, J SYST SOFTWARE, V83, P37, DOI 10.1016/j.jss.2009.06.041
   Knab P., 2006, P 2006 INT WORKSHOP, P119
   Kouroshfar E, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P1450, DOI 10.1109/ICSE.2013.6606741
   Madeyski L, 2015, SOFTWARE QUAL J, V23, P393, DOI 10.1007/s11219-014-9241-7
   Mondal M, 2014, 2014 SOFTWARE EVOLUTION WEEK - IEEE CONFERENCE ON SOFTWARE MAINTENANCE, REENGINEERING, AND REVERSE ENGINEERING (CSMR-WCRE), P358, DOI 10.1109/CSMR-WCRE.2014.6747194
   Pinzger Martin., 2005, SOFTVIS 05, P67
   Pirklbauer Guenter, 2010, Proceedings of the Seventh International Conference on Information Technology: New Generations (ITNG 2010), P956, DOI 10.1109/ITNG.2010.100
   Roberts F.S., 1985, MEASUREMENT THEORY
   Steff M., 2012, 2012 9th IEEE Working Conference on Mining Software Repositories (MSR 2012), P213, DOI 10.1109/MSR.2012.6224283
   Tantithamthavorn C, 2013, 2013 14TH ACIS INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, ARTIFICIAL INTELLIGENCE, NETWORKING AND PARALLEL/DISTRIBUTED COMPUTING (SNPD 2013), P543, DOI 10.1109/SNPD.2013.92
   Ying ATT, 2004, IEEE T SOFTWARE ENG, V30, P574, DOI 10.1109/TSE.2004.52
   Zhou Y, 2008, WORK CONF REVERSE EN, P27, DOI 10.1109/WCRE.2008.39
   Zimmermann T, 2005, IEEE T SOFTWARE ENG, V31, P429, DOI 10.1109/TSE.2005.72
   Zuse Horst., 1997, A Framework of Software Measurement
NR 41
TC 8
Z9 8
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 15
PY 2017
VL 135
SI SI
BP 4
EP 19
DI 10.1016/j.scico.2016.10.003
PG 16
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA EJ5OM
UT WOS:000393267600002
OA hybrid
DA 2024-07-18
ER

PT J
AU Campusano, M
   Fabry, J
AF Campusano, Miguel
   Fabry, Johan
TI Live Robot Programming: The language, its implementation, and robot API
   independence
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Live Programming; Nested state machines; Robot
AB Typically, development of robot behavior entails writing the code, deploying it on a simulator or robot and running it in a test setting. If this feedback reveals errors, the programmer mentally needs to map the error in behavior back to the source code that caused it before being able to fix it. This process suffers from a long cognitive distance between the code and the resulting behavior, which slows down development and can make experimentation with different behaviors prohibitively expensive. In contrast, Live Programming tightens the feedback loop, minimizing the cognitive distance. As a result, programmers benefit from an immediate connection with the program that they are making thanks to an immediate, 'live' feedback on program behavior. This allows for extremely rapid creation, or variation, of robot behavior and for dramatically increased debugging speed. To enable such Live Robot Programming, in this article we discuss LRP; our language that provides for live programming of nested state machines. We detail the design of the language and show its features, give an overview of the interpreter and how it enables the liveness properties of the language, and illustrate its independence from specific robot APIs. (C) 2016 Elsevier B.V. All rights reserved.
C1 [Campusano, Miguel; Fabry, Johan] Univ Chile, Comp Sci Dept DCC, PLEIAD & RyCh Labs, Beauchef 851, Santiago, Chile.
C3 Universidad de Chile
RP Campusano, M (corresponding author), Univ Chile, Comp Sci Dept DCC, PLEIAD & RyCh Labs, Beauchef 851, Santiago, Chile.
EM mcampusa@dcc.uchile.cl; jfabry@dcc.uchile.cl
RI Campusano, Miguel/AAX-1343-2020
OI Campusano, Miguel/0000-0002-7894-6635
FU CONICYT-PCHA/Doctorado Nacional [2015-21151534]
FX Miguel Campusano is funded by CONICYT-PCHA/Doctorado
   Nacional/2015-21151534.
CR [Anonymous], ROS TOP DOC
   [Anonymous], B HUMAN TEAM REPORT
   [Anonymous], LEGO MINDSTORMS education EV3 core set
   Apple Inc., INTR SWIFT
   Bragagnolo S., 2014, PHAROS ROS CLIENT PH
   Fabry J, 2014, LECT NOTES ARTIF INT, V8864, P445, DOI 10.1007/978-3-319-12027-0_36
   Gostai, GOST STUD ED HIER FI
   HANCOCK CM, 2003, THESIS
   Kodowa Inc, LIGHT TABL NEXT GEN
   Laval J., 2014, 140616 MIN TEL I
   Lim J., 2014, J PROF COMMUN, V3, P165
   Loetzsch M, 2006, 2006 IEEE/RSJ INTERNATIONAL CONFERENCE ON INTELLIGENT ROBOTS AND SYSTEMS, VOLS 1-12, P5124, DOI 10.1109/IROS.2006.282605
   McDirmid S., 2013, P 2013 ACM INT S NEW, P53, DOI DOI 10.1145/2509578.2509585
   McDirmid S, 2007, OOPSLA: 22ND INTERNATIONAL CONFERENCE ON OBJECT-ORIENTED PROGRAMMING, SYSTEMS, LANGUAGES, AND APPLICATIONS, PROCEEDINGS, P623
   Niemüller T, 2010, LECT NOTES ARTIF INT, V5949, P240, DOI 10.1007/978-3-642-11876-0_21
   Oney Stephen, 2014, P 27 ANN ACM S US IN, P263
   Quigley M, 2009, IEEE INT CONF ROBOT, P3604
   Rofer T., 2015, B HUMAN TEAM DESCRIP
   Swift B, 2013, 2013 1ST INTERNATIONAL WORKSHOP ON LIVE PROGRAMMING (LIVE), P27, DOI 10.1109/LIVE.2013.6617345
   Tanimoto S. L., 1990, Journal of Visual Languages and Computing, V1, P127, DOI 10.1016/S1045-926X(05)80012-6
   Topalidou-Kyniazopoulou A., 2013, LNCS, V7500, P225, DOI DOI 10.1007/978-3-642-39250-4_21
   Ungar D., 1987, SELF POWER SIMPLICIT, V22
   Victor B., COMMUNICATION
NR 23
TC 14
Z9 16
U1 0
U2 8
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 1
PY 2017
VL 133
BP 1
EP 19
DI 10.1016/j.scico.2016.06.002
PN 1
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA EE2CJ
UT WOS:000389391000001
OA hybrid
DA 2024-07-18
ER

PT J
AU García-Holgado, A
   García-Peñalvo, FJ
AF Garcia-Holgado, Alicia
   Jose Garcia-Penalvo, Francisco
TI Architectural pattern to improve the definition and implementation of
   eLearning ecosystems
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE eLearning ecosystems; Information systems; Architectural pattern;
   Software engineering; Open Source software
ID LEARNING MANAGEMENT-SYSTEMS; RECOGNITION; METHODOLOGY
AB Knowledge management within companies and institutions is one of the main problems when defining and developing new solutions to improve information systems. Currently, information systems have evolved into technological ecosystems that are a set of different components related to each other through information flows in a physical environment that supports these flows, where users are part of the ecosystem. Particularly, during the last several years, the Open Source software has been used to develop these technological solutions. The aim of this paper is to formalize an architectural pattern to support the right description and implementation of eLearning ecosystems. The theoretical basis has been provided in previous works by using a comparative analysis of the Strengths, Weaknesses, Opportunities and Threats of several real case studies developed in different contexts. The problems detected through the previous analysis have been modelled using the Business Process Model and Notation. Next, the pattern has been formalized with the Service oriented architecture Modelling Language. Finally, the pattern has been tested in a real context, namely, an institutional development for the Spanish Public Administration, which has demonstrated that the pattern works properly. As a result, we have obtained a set of Business Process Model and Notation diagrams that provide a high abstraction level for the main detected problems in eLearning ecosystems. We have also obtained an architectural pattern composed of several layers and a set of external elements that provides a solution to these problems. (C) 2016 Elsevier B.V. All rights reserved.
C1 [Garcia-Holgado, Alicia; Jose Garcia-Penalvo, Francisco] Univ Salamanca, Res Inst Educ Sci, GRIAL Res Grp, Salamanca, Spain.
C3 University of Salamanca
RP García-Holgado, A (corresponding author), Univ Salamanca, Res Inst Educ Sci, GRIAL Res Grp, Salamanca, Spain.
EM aliciagh@usal.es; fgarcia@usal.es
RI García-Holgado, Alicia/I-1713-2014; GARCÍA-PEÑALVO, Francisco
   José/D-5445-2013
OI García-Holgado, Alicia/0000-0001-9663-1103; GARCÍA-PEÑALVO, Francisco
   José/0000-0001-9987-5584
CR *AB GROUP, 2004, ABCS ERP EX PRIM
   Alavi M., 1999, COMMUNICATION ASS IN, V1, P7, DOI DOI 10.17705/1CAIS.00107
   Alspaugh T.A., 2009, P INT WORKSH SOFTW E
   Ameller D, 2015, INFORM SOFTWARE TECH, V62, P42, DOI 10.1016/j.infsof.2015.02.006
   [Anonymous], 2008, COLECCION FUNDACION
   [Anonymous], 1996, Pattern oriented software architecture: a system of patters
   [Anonymous], 2014, P 2 INT C TECHN EC E
   [Anonymous], 1999, 1 INT WORKSH ENT MAN
   Arsanjani A., 2004, IBM Dev. Works, V1, P15
   Buyya R, 2009, FUTURE GENER COMP SY, V25, P599, DOI 10.1016/j.future.2008.12.001
   Chen SY, 2014, APPL MECH MATER, V651-653, P1821, DOI 10.4028/www.scientific.net/AMM.651-653.1821
   Conde MA, 2015, INT J ENG EDUC, V31, P884
   Conde MA, 2014, COMPUT HUM BEHAV, V31, P517, DOI 10.1016/j.chb.2013.05.023
   Costa P.D., 2005, P 2 INT WORKSH UB CO
   Dong B, 2009, ICALT: 2009 IEEE INTERNATIONAL CONFERENCE ON ADVANCED LEARNING TECHNOLOGIES, P125, DOI 10.1109/ICALT.2009.21
   Elvesaeter B., 2011, MODEL DRIVEN SERVICE
   Essex D.E., 2009, PM NETW, V23, P64
   European Commission, 2009, EUR UN PUBL LIC EUPL
   European Commission Directorate-General for Informatics (DIGIT), 2011, STRAT INT US OSS EC
   Fowler M., 1997, ANAL PATTERNS REUSAB
   Gamma E., 1994, Design patterns: Elements of reusable object-oriented software
   Garcia-Holgado A., 2013, ANALISIS INTEGRACION
   Garcia-Holgado A., 2011, GRIAL 2 0 PROPUESTA
   García-Holgado A, 2015, THIRD INTERNATIONAL CONFERENCE ON TECHNOLOGICAL ECOSYSTEMS FOR ENHANCING MULTICULTURALITY, PROCEEDINGS TEEM'15, P695, DOI 10.1145/2808580.2808686
   García-Holgado A, 2015, THIRD INTERNATIONAL CONFERENCE ON TECHNOLOGICAL ECOSYSTEMS FOR ENHANCING MULTICULTURALITY, PROCEEDINGS TEEM'15, P189, DOI 10.1145/2808580.2808609
   García-Holgado A, 2013, FIRST INTERNATIONAL CONFERENCE ON TECHNOLOGICAL ECOSYSTEM FOR ENHANCING MULTICULTURALITY (TEEM'13), P565, DOI 10.1145/2536536.2536623
   García-Holgado A, 2014, 2014 INTERNATIONAL SYMPOSIUM ON COMPUTERS IN EDUCATION (SIIE), P93, DOI 10.1109/SIIE.2014.7017711
   Garcia-Penalvo F. J., 2012, REV IBEROAMERICANA I, P85
   Garcia-Penalvo F. J., 2013, P 2 GLOB INN KNOWL A
   Garcia-Penalvo F. J., 2012, 2012 INT S COMPUTERS, P1
   García-Peñalvo FJ, 2014, J BUS RES, V67, P686, DOI 10.1016/j.jbusres.2013.11.028
   García-Peñalvo FJ, 2013, J UNIVERS COMPUT SCI, V19, P1661
   García-Peñalvo FJ, 2012, BEHAV INFORM TECHNOL, V31, P753, DOI 10.1080/0144929X.2012.661548
   García-Peñalvo FJ, 2011, J UNIVERS COMPUT SCI, V17, P1222
   Governor J., 2012, WEB 2 0 ARCHITECTURE, P1
   Heiser J., 2009, WHAT YOU NEED KNOW C
   Hill T, 1997, LONG RANGE PLANN, V30, P46, DOI 10.1016/S0024-6301(96)00095-7
   Huang Y., 2003, ELECTRON COMMER R A, V2, P15
   Jelenic D., 2011, MAN KNOWL LEARN INT
   Jimenez-Domingo Ennque, 2011, Journal of Research and Practice on Information Technology, V43, P227
   García-Peñalvo FJ, 2014, FUTURE GENER COMP SY, V32, P282, DOI 10.1016/j.future.2013.08.004
   Langefors B., 1977, Information Systems, V2, P207, DOI 10.1016/0306-4379(77)90009-6
   Laudon JP., 2006, Essentials of business information systems
   Lawton G, 2008, COMPUTER, V41, P13, DOI 10.1109/MC.2008.185
   Lenk A, 2009, CLOUD: 2009 ICSE WORKSHOP ON SOFTWARE ENGINEERING CHALLENGES OF CLOUD COMPUTING, P23, DOI 10.1109/CLOUD.2009.5071529
   Luyckx F., 2010, ARIS BPM BLOG
   Marrero S., 2005, EUROPEAN U INFORM SY
   Nonaka I., 1995, The Knowledge-Creating Company How Japanese Companies Create the Dynamics of Information, DOI DOI 10.1016/0024-6301(96)81509-3
   O'reilly T, 2007, COMMUN STRAT, V97, P253
   Open Source Initiative, 2008, OP SOURC DEF
   Orueta J.L., 2008, COLECCION FUNDACION
   Papazoglou MP, 2007, COMPUTER, V40, P38, DOI 10.1109/MC.2007.400
   Posner Ernst., 1972, Archives in the Ancient World
   Quintas P, 1997, LONG RANGE PLANN, V30, P385, DOI 10.1016/S0024-6301(97)90252-1
   Rubio E., 2004, EUROPEAN U INFORM SY
   Stallman R, 1986, GNU EMACS MANUAL
   Subashini S, 2011, J NETW COMPUT APPL, V34, P1, DOI 10.1016/j.jnca.2010.07.006
   Tochtermann K., 2003, Metainformatics. International Symposium, MIS 2002. Revised Papers (Lecture Notes in Comput. Sci. Vol.2641), P29
   Trejo Pulido A., 2011, CENATIC
   Uden L, 2007, I C DIGIT ECOSYST TE, P273
   Vaquero LM, 2009, ACM SIGCOMM COMP COM, V39, P50, DOI 10.1145/1496091.1496100
   Vigder M., 2001, COMPONENT BASED SOFT, P527
   Weiss Aaron., 2007, networker, V11
   Wickert A., 2001, Journal of Knowledge Management, V5, P329, DOI 10.1108/13673270110411751
   Yin-Li Zhang, 2010, 2010 International Conference on Apperceiving Computing and Intelligence Analysis (ICACIA 2010), P112, DOI 10.1109/ICACIA.2010.5709863
   Yu J, 2008, IEEE INTERNET COMPUT, V12, P44, DOI 10.1109/MIC.2008.114
NR 66
TC 30
Z9 31
U1 0
U2 22
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 1
PY 2016
VL 129
SI SI
BP 20
EP 34
DI 10.1016/j.scico.2016.03.010
PG 15
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DW0CM
UT WOS:000383308500003
DA 2024-07-18
ER

PT J
AU Camara, J
   Lopes, A
   Garlan, D
   Schmerl, B
AF Camara, Javier
   Lopes, Antonia
   Garlan, David
   Schmerl, Bradley
TI Adaptation impact and environment models for architecture-based
   self-adaptive systems
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 11th International Symposium on Formal Aspects of Component Software
   (FACS) Colocated with the 11th International Conference on Integrated
   Formal Methods (IFM)
CY SEP 10-12, 2014
CL Bertinoro, ITALY
DE Self-adaptive systems; Impact model; Environment model; Uncertainty;
   Variability
ID VERIFICATION
AB Self-adaptive systems have the ability to adapt their behavior to dynamic operating conditions. In reaction to changes in the environment, these systems determine the appropriate corrective actions based in part on information about which action will have the best impact on the system. Existing models used to describe the impact of adaptations are either unable to capture the underlying uncertainty and variability of such dynamic environments, or are not compositional and described at a level of abstraction too low to scale in terms of specification effort required for non-trivial systems. In this paper, we address these shortcomings by describing an approach to the specification of impact models based on architectural system descriptions, which at the same time allows us to represent both variability and uncertainty in the outcome of adaptations, hence improving the selection of the best corrective action. The core of our approach is a language equipped with a formal semantics defined in terms of Discrete Time Markov Chains that enables us to describe both the impact of adaptation tactics, as well as the assumptions about the environment. To validate our approach, we show how employing our language can improve the accuracy of predictions used for decision-making in the Rainbow framework for architecture-based self-adaptation. (C) 2016 Elsevier B.V. All rights reserved.
C1 [Camara, Javier; Garlan, David; Schmerl, Bradley] Carnegie Mellon Univ, Inst Software Res, Pittsburgh, PA 15213 USA.
   [Lopes, Antonia] Univ Lisbon, Fac Sci, Dept Informat, P-1699 Lisbon, Portugal.
C3 Carnegie Mellon University; Universidade de Lisboa
RP Camara, J (corresponding author), Carnegie Mellon Univ, Inst Software Res, Pittsburgh, PA 15213 USA.
EM jcmoreno@cs.cmu.edu
RI Camara, Javier/ABF-1534-2021; Lopes, Antonia/M-1755-2015
OI Lopes, Antonia/0000-0003-0688-3521; Schmerl, Bradley/0000-0001-7828-622X
CR Alur R, 2002, J ACM, V49, P672, DOI 10.1145/585265.585270
   [Anonymous], 1998, Cambridge Series in Statistical and Probabilistic Mathematics
   Bianco A., 1995, Foundations of Software Technology and Theoretical Computer Science. 15th Conference. Proceedings, P499
   Boudali H, 2008, I C DEPEND SYS NETWO, P512, DOI 10.1109/DSN.2008.4630122
   Calinescu R, 2012, COMMUN ACM, V55, P69, DOI 10.1145/2330667.2330686
   Calinescu R, 2009, PROC INT CONF SOFTW, P100, DOI 10.1109/ICSE.2009.5070512
   Camara J., 2015, LNCS, V7795, P1
   Chen TL, 2013, FORM METHOD SYST DES, V43, P61, DOI 10.1007/s10703-013-0183-7
   Chen T, 2013, LECT NOTES COMPUT SC, V7795, P185, DOI 10.1007/978-3-642-36742-7_13
   Cheng SW, 2012, J SYST SOFTWARE, V85, P2860, DOI 10.1016/j.jss.2012.02.060
   Cheng SW, 2009, 2009 ICSE WORKSHOP ON SOFTWARE ENGINEERING FOR ADAPTIVE AND SELF-MANAGING SYSTEMS, P132, DOI 10.1109/SEAMS.2009.5069082
   Cheng SW, 2009, PROC INT CONF SOFTW, P435, DOI 10.1109/ICSE-COMPANION.2009.5071049
   Chiulli R.M., 1999, Quantitative Analysis: An Introduction
   David Alexandre, 2015, Tools and Algorithms for the Construction and Analysis of Systems. 21st International Conference, TACAS 2015, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2015. Proceedings: LNCS 9035, P206, DOI 10.1007/978-3-662-46681-0_16
   Esfahani N., 2010, SOFTWARE ENG SELF AD, P214
   Filieri A., 2011, 2011 26th IEEE/ACM International Conference on Automated Software Engineering, P283, DOI 10.1109/ASE.2011.6100064
   Forejt V, 2011, LECT NOTES COMPUT SC, V6659, P53, DOI 10.1007/978-3-642-21455-4_3
   Garlan D, 2004, COMPUTER, V37, P46, DOI 10.1109/MC.2004.175
   Garlan D., 1997, P CASCON, V97, P169
   Hartmanns A., 2012, FDL, P44
   Ingersoll J. E, 1987, ROWMAN LITTLEFIELD S
   Klein C, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P700, DOI 10.1145/2568225.2568227
   Kwiatkowska Marta, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P585, DOI 10.1007/978-3-642-22110-1_47
   Leitner P, 2013, IEEE T SERV COMPUT, V6, P239, DOI 10.1109/TSC.2011.53
   Rosa L, 2013, IEEE T SOFTWARE ENG, V39, P403, DOI 10.1109/TSE.2012.29
   Sheng-Wen Cheng, 2002, Software Architecture. Systems Design, Development and Maintenance. IFIP 17th World Computer Congress - TC2 Stream/ 3rd Working IEEE/IFIP Conference on Software Architecture, P45
   Sykes D, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P63, DOI 10.1109/ICSE.2013.6606552
   [No title captured]
NR 28
TC 22
Z9 25
U1 0
U2 11
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 1
PY 2016
VL 127
SI SI
BP 50
EP 75
DI 10.1016/j.scico.2015.12.006
PG 26
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA DQ5ZA
UT WOS:000379282600004
OA hybrid
DA 2024-07-18
ER

PT J
AU Mokni, A
   Urtado, C
   Vauttier, S
   Huchard, M
   Zhang, HXYL
AF Mokni, Abderrahman
   Urtado, Christelle
   Vauttier, Sylvain
   Huchard, Marianne
   Zhang, Huaxi Yulin
TI A formal approach for managing component-based architecture evolution
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 11th International Symposium on Formal Aspects of Component Software
   (FACS) Colocated with the 11th International Conference on Integrated
   Formal Methods (IFM)
CY SEP 10-12, 2014
CL Bertinoro, ITALY
DE Architecture evolution; Architecture analysis; Evolution rules; Formal
   models; MDE
ID MODEL CHECKING; MISMATCH; REUSE
AB Software architectures are subject to several types of change during the software lifecycle (e.g. adding requirements, correcting bugs, enhancing performance). The variety of these changes makes architecture evolution management complex because all architecture descriptions must remain consistent after change. To do so, whatever part of the architectural description they affect, the effects of change have to be propagated to the other parts. The goal of this paper is to provide support for evolving component-based architectures at multiple abstraction levels. Architecture descriptions follow an architectural model named Dedal, the three description levels of which correspond to the three main development steps - specification, implementation and deployment. This paper formalizes an evolution management model that generates evolution plans according to a given architecture change request, thus preserving consistency of architecture descriptions and coherence between them. The approach is implemented as an Eclipse-based tool and validated with three evolution scenarios of a Home Automation Software example. (C) 2016 Elsevier B.V. All rights reserved.
C1 [Mokni, Abderrahman; Urtado, Christelle; Vauttier, Sylvain] Ecole Natl Super Mines Ales, LGI2P, Nimes, France.
   [Huchard, Marianne] CNRS, LIRMM, Montpellier, France.
   [Huchard, Marianne] Univ Montpellier, Montpellier, France.
   [Zhang, Huaxi Yulin] Univ Picardie Jules Verne, Lab MIS, Amiens, France.
C3 IMT - Institut Mines-Telecom; IMT Mines Ales; Centre National de la
   Recherche Scientifique (CNRS); Universite Paul-Valery; Universite
   Perpignan Via Domitia; Universite de Montpellier; Universite de
   Montpellier; Universite de Picardie Jules Verne (UPJV)
RP Mokni, A; Urtado, C; Vauttier, S (corresponding author), Ecole Natl Super Mines Ales, LGI2P, Nimes, France.
EM Abderrahman.Mokni@mines-ales.fr; Christelle.Urtado@mines-ales.fr;
   Sylvain.Vauttier@mines-ales.fr; Marianne.Huchard@lirmm.fr;
   yulin.zhang@u-picardie.fr
RI Urtado, Christelle/ABG-6732-2020; Vauttier, Sylvain/AAJ-1570-2021
OI Urtado, Christelle/0000-0002-6711-8455; Vauttier,
   Sylvain/0000-0002-5812-1230; Huchard, Marianne/0000-0002-6309-7503
CR Abrial J.-R., 1996, B BOOK ASSIGNING PRO
   [Anonymous], B TOOLK US MAN
   [Anonymous], 1992, The Z Notation
   Atelier B, CLEARSY
   Barnes JM, 2013, IEEE INT CONF AUTOM, P213, DOI 10.1109/ASE.2013.6693081
   Barnes JM, 2014, SOFTW SYST MODEL, V13, P649, DOI 10.1007/s10270-012-0301-9
   Behm P, 1999, LECT NOTES COMPUT SC, V1708, P369
   Bertot Y., 2004, TEXT THEORET COMP S
   Breivold HP, 2012, INFORM SOFTWARE TECH, V54, P16, DOI 10.1016/j.infsof.2011.06.002
   Cansell D, 2003, COMPUT INFORM, V22, P221
   Cansell D., 2002, ZB 2002: Formal Specification and Development in Z and B. 2nd International Conference of B and Z Users. Proceedings (Lecture Notes in Computer Science Vol.2272), P22
   COULSON G, 2004, IASTED C SOFTW ENG A, P684
   Crnkovic I, 2011, IEEE T SOFTWARE ENG, V37, P593, DOI 10.1109/TSE.2010.83
   de Silva L, 2012, J SYST SOFTWARE, V85, P132, DOI 10.1016/j.jss.2011.07.036
   Delahaye D, 2014, LECT NOTES COMPUT SC, V8477, P290, DOI 10.1007/978-3-662-43652-3_26
   Derrick J, 2011, FORM ASP COMPUT, V23, P43, DOI 10.1007/s00165-009-0126-7
   GARLAN D, 1995, IEEE SOFTWARE, V12, P17, DOI 10.1109/52.469757
   Garlan D., 1997, P 1997 C CTR ADV STU
   Garlan D, 2009, IEEE SOFTWARE, V26, P66, DOI 10.1109/MS.2009.86
   Ghallab M, 1998, Technical Report, CVC TR-98-003/DCS TR-1165
   Hansen K.M., 2010, Proceedings of the 2010 ACM Symposium on Applied Computing (SAC), Sierre, Switzerland, March 22-26, 2010, P2257
   Ingstrup M, 2009, 2009 JOINT WORKING IEEE/IFIP CONFERENCE ON SOFTWARE ARCHITECTURE AND EUROPEAN CONFERENCE ON SOFTWARE ARCHITECTURE, P337, DOI 10.1109/WICSA.2009.5290670
   Jackson D, 2002, ACM T SOFTW ENG METH, V11, P256, DOI 10.1145/505145.505149
   Jackson Daniel, 2006, Software abstractions: Logic, language, and analysis
   Jones CB., 1990, SYSTEMATIC SOFTWARE
   Joolia A., 2005, P 5 WORK IEEE IFIP C, P131
   Keznikl J, 2014, SOFTW SYST MODEL, V13, P843, DOI 10.1007/s10270-012-0274-8
   Le Goaer Olivier, 2008, 2008 IEEE 32nd International Computer Software and Applications Conference (COMPSAC), P311, DOI 10.1109/COMPSAC.2008.104
   Ledru Y, 2011, LECT NOTES BUS INF P, V83, P592
   Leuschel Michael, 2008, International Journal on Software Tools for Technology Transfer, V10, P185, DOI 10.1007/s10009-007-0063-9
   Leuschel M, 2011, LECT NOTES COMPUT SC, V6527, P1, DOI 10.1007/978-3-642-19829-8_1
   Macedo N, 2013, IEEE INT CONF AUTOM, P694, DOI 10.1109/ASE.2013.6693135
   Magee J., 1996, Software Engineering Notes, V21, P3, DOI 10.1145/250707.239104
   Medvidovic N., 1999, Proceedings of the 1999 International Conference on Software Engineering (IEEE Cat. No.99CB37002), P44, DOI 10.1109/ICSE.1999.840994
   Mens T., 2008, Software Evolution
   Mokni A., 2015, P 27 INT C SOFTWARE, P297, DOI 10.18293/SEKE2015- 172
   Mokni A., 2014, Revised Selected Papers, V11, P127
   Mokni A., 2014, P 9 ICSEA NIC FRANC, P416
   Montaghami Vajih, 2012, Abstract State Machines, Alloy, B, VDM, and Z. Proceedings Third International Conference, ABZ 2012, P122, DOI 10.1007/978-3-642-30885-7_9
   Norell U, 2009, LECT NOTES COMPUT SC, V5832, P230, DOI 10.1007/978-3-642-04652-0_5
   OCL, OCL 2 3 1 SPECIFICAT
   OMG, MOF 2 0 QUER VIEW TR
   Oquendo F, 2004, LECT NOTES COMPUT SC, V3047, P257
   Oquendo F., 2004, ACM SIGSOFT SOFTWARE, V29, P1, DOI DOI 10.1145/986710.986728
   Perry D. E., 1992, SIGSOFT Software Engineering Notes, V17, P40, DOI 10.1145/141874.141884
   Sanchez A, 2012, FORMAL ASPECTS COMPO, P313
   Sanchez A, 2015, SCI COMPUT PROGRAM, V98, P764, DOI 10.1016/j.scico.2014.02.026
   Schmidt DC, 2006, COMPUTER, V39, P25, DOI 10.1109/MC.2006.58
   Smith G, 2005, LECT NOTES COMPUT SC, V3455, P85
   Svenningsson J, 2013, TRENDS FUNCTIONAL PR, V7829, P21, DOI [10.1007/978-3-642-40447-4_2, DOI 10.1007/978-3-642-40447-42]
   Tamzalit D., 2006, Proceedings of the 2006 International Conference on Software Engineering Research and Practice and Conference on Programming Languages and Compilers SERP'06, P336
   Taylor Richard N., 2009, Software architecture: foundations, theory, and practice
   TAYLOR RN, 1995, PROC INT CONF SOFTW, P295, DOI 10.1145/225014.225042
   Tortak E, 2007, LECT NOTES COMPUT SC, V4424, P632
   UML, UML 2 5 SPECIFICATIO
   Utting M., JAZA USER MANUAL TUT
   Vliet H. V., 2008, SOFTWARE ENG PRINCIP
   Zhang HX, 2010, LECT NOTES COMPUT SC, V6285, P295, DOI 10.1007/978-3-642-15114-9_22
   Zhang HY., 2012, SIGPLAN NOTICES, V48, P70
NR 59
TC 10
Z9 11
U1 0
U2 11
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 1
PY 2016
VL 127
SI SI
BP 24
EP 49
DI 10.1016/j.scico.2016.03.003
PG 26
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA DQ5ZA
UT WOS:000379282600003
OA Green Published, Bronze
DA 2024-07-18
ER

PT J
AU Scott, E
   Johnstone, A
AF Scott, Elizabeth
   Johnstone, Adrian
TI Structuring the GLL parsing algorithm for performance
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Context Free Parsing; GLL parsing; Parsing performance
AB GLL (Generalised LL) parsing algorithms provide a sequentialisation of recursive-descent style parsing that yields efficient, compiled parsers which admit any context free grammar, including left recursive and non-left-factored rules. The resulting parsers retain the 'recursively decent' property that the structure of the parser closely follows the structure of the grammar; as such it is feasible to debug grammars by tracing the corresponding GLL parser using a conventional code debugger.
   In this paper we develop two variants of the GLL algorithm called FGLL and RGLL which respectively support (i) efficient parsing of factorised grammars and (ii) parsing using a reduced set of descriptors. Both techniques yield significant speed up on programming language grammars compared to the base GLL algorithm. We also discuss the ordering of descriptor processing and its effects on performance. (C) 2016 Elsevier B.V. All rights reserved.
EM a.johnstone@rhul.ac.uk
FU EPSRC [EP/I032509/1] Funding Source: UKRI
CR [Anonymous], GEN LR PARSING
   [Anonymous], PURE FUNCTIONAL PROG
   [Anonymous], 1986, Efficient parsing for natural language
   [Anonymous], COMMUNICATION
   [Anonymous], THESIS
   [Anonymous], SOURCE CODE ANAL MAN
   EARLEY J, 1970, COMMUN ACM, V13, P94, DOI 10.1145/362007.362035
   Johnstone A, 2011, LECT NOTES COMPUT SC, V6563, P306, DOI 10.1007/978-3-642-19440-5_20
   Johnstone A, 2011, LECT NOTES COMPUT SC, V6563, P42, DOI 10.1007/978-3-642-19440-5_4
   Knuth D. E., 1971, Acta Informatica, V1, P79, DOI 10.1007/BF00289517
   Cardona PAN, 2015, CUAD ACT, P154
   Scott E, 2007, ACTA INFORM, V44, P427, DOI 10.1007/s00236-007-0054-z
   Scott E, 2006, ACM T PROGR LANG SYS, V28, P577, DOI 10.1145/1146809.1146810
   Scott E, 2013, SCI COMPUT PROGRAM, V78, P1828, DOI 10.1016/j.scico.2012.03.005
   Scott E, 2010, ELECTRON NOTES THEOR, V253, P177, DOI 10.1016/j.entcs.2010.08.041
   Van den Brand MGJ, 2002, ACM T PROGR LANG SYS, V24, P334, DOI 10.1145/567097.567099
NR 16
TC 10
Z9 10
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 1
PY 2016
VL 125
BP 1
EP 22
DI 10.1016/j.scico.2016.04.003
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DO5OF
UT WOS:000377831700001
DA 2024-07-18
ER

PT J
AU Brogi, A
   Soldani, J
AF Brogi, Antonio
   Soldani, Jacopo
TI Finding available services in TOSCA-compliant clouds
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Service matching; Software adaptation; Cloud applications; TOSCA
ID DISCOVERY
AB The OASIS TOSCA specification aims at enhancing the portability of cloud applications by defining a language to describe and manage them across heterogeneous clouds. A service template is defined as an orchestration of typed nodes, which can be instantiated by matching other service templates. In this paper, we define and implement the notions of exact and plug-in matching between TOSCA service templates and node types. We then define two other types of matching (flexible and white-box), each permitting to ignore larger sets of non-relevant syntactic differences when type-checking service templates with respect to node types. The paper also describes how a service template S that plug-in, flexibly, or white-box matches a node type N can be suitably adapted so as to exactly match N. (C) 2015 Elsevier B.V. All rights reserved.
C1 [Brogi, Antonio; Soldani, Jacopo] Univ Pisa, Dept Comp Sci, I-56100 Pisa, Italy.
C3 University of Pisa
RP Soldani, J (corresponding author), Univ Pisa, Dept Comp Sci, I-56100 Pisa, Italy.
RI Soldani, Jacopo/O-5057-2019; Brogi, Antonio/HLQ-2040-2023
OI Soldani, Jacopo/0000-0002-2435-3543; Brogi, Antonio/0000-0003-2048-2468
FU  [EU-FP7-ICT-610531 SeaClouds]
FX This work was partly supported by project EU-FP7-ICT-610531 SeaClouds.
CR Alur R, 1998, LECT NOTES COMPUT SC, V1466, P163, DOI 10.1007/BFb0055622
   Becker S, 2006, LECT NOTES COMPUT SC, V3938, P193
   Ben Mokhtar S, 2008, J SYST SOFTWARE, V81, P785, DOI 10.1016/j.jss.2007.07.030
   Binz T., 2013, 11 INT C SERV OR COM
   Binz Tobias, 2013, COMMUNICATION
   Bonchi F, 2009, FUND INFORM, V94, P305, DOI 10.3233/FI-2009-133
   Bracciali A, 2005, J SYST SOFTWARE, V74, P45, DOI 10.1016/j.jss.2003.05.007
   Brogi Antonio, 2007, International Journal of Business Process Integration and Management, V2, P9, DOI 10.1504/IJBPIM.2007.014100
   Brogi A., 2013, Adv. in Serv.-Oriented and Cloud Comput, P218
   Brogi A, 2015, CEUR WORKSHOP P, P191
   Brogi A., 2014, LECT NOTES INFORM LN, P235
   Brogi A, 2007, INT J WEB SERV RES, V4, P1, DOI 10.4018/jwsr.2007070101
   Brogi A, 2015, LECT NOTES COMPUT SC, V9306, P19, DOI 10.1007/978-3-319-24072-5_2
   Brogi A, 2014, LECT NOTES COMPUT SC, V8745, P171, DOI 10.1007/978-3-662-44879-3_13
   Corrales JC, 2006, LECT NOTES COMPUT SC, V4275, P237
   de Alfaro L., 2001, Software Engineering Notes, V26, P109, DOI 10.1145/503271.503226
   Di Martino B, 2011, LECT NOTES COMPUT SC, V6586, P571, DOI 10.1007/978-3-642-21878-1_70
   Eliassen F, 1998, MIDDLEWARE'98: IFIP INTERNATIONAL CONFERENCE ON DISTRIBUTED SYSTEMS PLATFORMS AND OPEN DISTRIBUTED PROCESSING, P305
   Eshuis R, 2007, ECOWS 07: PROCEEDING OF THE 5TH IEEE EUROPEAN CONFERENCE ON WEB SERVICES, P171, DOI 10.1109/ECOWS.2007.22
   Gamma E., 1994, Design patterns: Elements of reusable object-oriented software
   Guillén J, 2013, J SYST SOFTWARE, V86, P2294, DOI 10.1016/j.jss.2012.12.033
   Hamdaqa Mohammad, 2011, P 1 INT C CLOUD COMP, V1372
   Klusch M, 2009, J WEB SEMANT, V7, P121, DOI 10.1016/j.websem.2008.10.001
   Kongdenfha W, 2009, IEEE T SERV COMPUT, V2, P94, DOI 10.1109/TSC.2009.12
   Mahdikhani Farzad, 2008, 2008 IEEE International Symposium on Service-Oriented System Engineering, P239, DOI 10.1109/SOSE.2008.39
   Martinez-Gil J, 2012, J UNIVERS COMPUT SCI, V18, P194
   Newcomer E., 2005, UNDERSTANDING SOA WE
   OASIS, 2013, TOSCA XML SCHEM DEF
   OASIS, 2013, Topology and Orchestration Specification for Cloud Applications Version 1.0 OASIS Standard
   OSULLIVAN D, 2003, P 3 ACM INT WORKSH D, P17
   Petcu D, 2013, FUTURE GENER COMP SY, V29, P1417, DOI 10.1016/j.future.2012.01.009
   Sangiorgi Davide, 2011, Introduction to bisimulation and coinduction
   Tran V., 2011, Proceedings of the 2nd International Workshop on Software Engineering for Cloud Computing, P22, DOI [10.1145/1985500.1985505, DOI 10.1145/1985500.1985505]
   WEISS A.C.S., 2012, THESIS
   Xie Xiong, 2005, 1 INT C SEM KNOWL GR, P103
NR 35
TC 17
Z9 17
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN-FEB
PY 2016
VL 115
SI SI
BP 177
EP 198
DI 10.1016/j.scico.2015.09.004
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CZ5DH
UT WOS:000367122200010
OA hybrid, Green Submitted
DA 2024-07-18
ER

PT J
AU Jongmans, SSTQ
   Clarke, D
   Proença, J
AF Jongmans, S. -S. T. Q.
   Clarke, D.
   Proenca, J.
TI A procedure for splitting data-aware processes and its application to
   coordination
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Process algebra; Coordination; mCRL2; Reo
ID CHOREOGRAPHY CONFORMANCE; VERIFICATION; DECOMPOSITION; MODEL; REO
AB We present a procedure for splitting processes in a process algebra with multiactions and data (the untimed subset of the specification language mCRL2). This splitting procedure cuts a process into two processes along a set of actions A: roughly, one of these processes contains no actions from A, while the other process contains only actions from A. We state and prove a theorem asserting that the parallel composition of these two processes is provably equal from a set of axioms (sound and complete with respect to strong bisimilarity) to the original process under some appropriate notion of synchronization.
   We apply our splitting procedure to the process algebraic semantics of the coordination language Reo: using this procedure and its related theorem, we formally establish the soundness of splitting Reo connectors along the boundaries of their (a)synchronous regions in implementations of Reo. Such splitting can significantly improve the performance of connectors as shown elsewhere. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Jongmans, S. -S. T. Q.] Ctr Wiskunde & Informat, NL-1098 XG Amsterdam, Netherlands.
   [Clarke, D.; Proenca, J.] Katholieke Univ Leuven, B-3001 Heverlee, Belgium.
C3 KU Leuven
RP Jongmans, SSTQ (corresponding author), Ctr Wiskunde & Informat, Sci Pk 123, NL-1098 XG Amsterdam, Netherlands.
EM jongmans@cwi.nl; dave.clarke@cs.kuleuven.be; jose.proenca@cs.kuleuven.be
RI Proenca, Jose/K-4256-2016
OI Proenca, Jose/0000-0003-0971-8919
FU EU [FP7-231620]
FX This research is partly funded by the EU project FP7-231620 HATS: Highly
   Adaptable and Trustworthy Software Using Formal Models
   (http://www.hats-project.eu/).
CR Aceto L, 2005, LOG METH COMPUT SCI, V1, DOI 10.2168/LMCS-1(1:3)2005
   Arbab F, 2005, LECT NOTES COMPUT SC, V3454, P236
   Arbab F, 2004, MATH STRUCT COMP SCI, V14, P329, DOI 10.1017/S0960129504004153
   Arbab F, 2011, LECT NOTES COMPUT SC, V7000, P169, DOI 10.1007/978-3-642-24933-4_9
   Baier C, 2006, SCI COMPUT PROGRAM, V61, P75, DOI 10.1016/j.scico.2005.10.008
   Beohar H, 2010, ELECTRON PROC THEOR, P99
   BERGSTRA JA, 1984, INFORM CONTROL, V60, P109, DOI 10.1016/S0019-9958(84)80025-X
   BERGSTRA JA, 1986, LECT NOTES COMPUT SC, V215, P9
   Bravetti M, 2007, LECT NOTES COMPUT SC, V4829, P34
   Bravetti M, 2009, LECT NOTES COMPUT SC, V5387, P37, DOI 10.1007/978-3-642-01364-5_3
   Carbone M, 2012, ACM T PROGR LANG SYS, V34, DOI 10.1145/2220365.2220367
   Christensen Soren, 1993, THESIS
   Clarke Dave, 2012, Coordination Models and Languages. Proceedings 14th International Conference, COORDINATION 2012, P59, DOI 10.1007/978-3-642-30829-1_5
   Clarke D, 2008, FUND INFORM, V82, P361
   Clarke D, 2007, SCI COMPUT PROGRAM, V66, P205, DOI 10.1016/j.scico.2007.01.009
   Dreier J, 2013, LECT NOTES COMPUT SC, V7794, P50, DOI 10.1007/978-3-642-37075-5_4
   Fischer C., 1996, CONCUR '96: Concurrency Theory. 7th International Conference. Proceedings, P735
   Fu X, 2004, THEOR COMPUT SCI, V328, P19, DOI 10.1016/j.tcs.2004.07.004
   Fu X., 2005, INT J WEB SERV RES, V2, P68, DOI DOI 10.4018/JWSR.2005100104
   Groote Jan Friso, 1992, LNCS, V630, P62
   Groote Jan Friso, 2010, MODELLING ANAL COMMU
   Groote Jan Friso, 2007, METHODS MODELLING SO, P1
   Honda K, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P273, DOI 10.1145/2827695
   Jongmans Sung-Shik T. Q., 2012, Service-Oriented and Cloud Computing. First European Conference, ESOCC 2012. Proceedings, P1, DOI 10.1007/978-3-642-33427-6_1
   Jongmans Sung-Shik, 2013, P FOCLASA
   Jongmans Sung-Shik, 2014, TECHNICAL REPORT
   Jongmans SSTQ, 2013, ELECTRON PROC THEOR, P34, DOI 10.4204/EPTCS.109.6
   Jongmans SSTQ, 2012, ELECTRON PROC THEOR, P79, DOI 10.4204/EPTCS.91.6
   Jongmans SSTQ, 2012, SCI ANN COMPUT SCI, V22, P201, DOI 10.7561/SACS.2012.1.201
   Jongmans SSTQ, 2011, LECT NOTES COMPUT SC, V6721, P31, DOI 10.1007/978-3-642-21464-6_3
   Koehler C., 2009, P SAC 2009, P1369, DOI DOI 10.1145/1529282.1529587
   Kokash N., 2010, Proceedings of the 2010 8th IEEE International Conference on Software Engineering and Formal Methods (SEFM 2010), P125, DOI 10.1109/SEFM.2010.26
   Kokash N., 2010, P 2010 ACM S APPL CO, P2406, DOI DOI 10.1145/1774088.1774590
   Kokash N, 2012, FORM ASP COMPUT, V24, P187, DOI 10.1007/s00165-011-0191-6
   Kokash N, 2010, LECT NOTES COMPUT SC, V6286, P21
   Kucera A, 2000, THEOR COMPUT SCI, V242, P71, DOI 10.1016/S0304-3975(98)00201-1
   Lanese I, 2011, INFORM COMPUT, V209, P198, DOI 10.1016/j.ic.2010.10.001
   Luttik B, 2005, THEOR COMPUT SCI, V335, P147, DOI 10.1016/j.tcs.2004.11.019
   Luttik Bas, 2012, Theoretical Computer Science. Proceedings of the 7th IFIP TC 1/WG 2.2 International Conference, TCS 2012, P250, DOI 10.1007/978-3-642-33475-7_18
   MILNER R, 1993, THEOR COMPUT SCI, V107, P357, DOI 10.1016/0304-3975(93)90176-T
   Moller Faron, 1989, THESIS
   Pourvatan Bahman, 2012, Formal Aspects of Component Software. 7th International Workshop, FACS 2010. Revised Selected Papers, P237, DOI 10.1007/978-3-642-27269-1_14
   Proenca J., 2012, P 27 ANN ACM S APPL, P1510, DOI DOI 10.1145/2245276.2232017
   Proença J, 2011, ELECTRON PROC THEOR, P65, DOI 10.4204/EPTCS.58.5
   Proenca Jose, 2011, THESIS
   Udding Jan Tijmen, 1984, THESIS
   Usenko Yaroslav, 2004, THESIS
NR 47
TC 5
Z9 5
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN-FEB
PY 2016
VL 115
SI SI
BP 47
EP 78
DI 10.1016/j.scico.2014.02.017
PG 32
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CZ5DH
UT WOS:000367122200004
OA Green Published, Green Accepted, Green Submitted
DA 2024-07-18
ER

PT J
AU de Boer, FS
   Bonsangue, MM
   Rot, JC
AF de Boer, F. S.
   Bonsangue, M. M.
   Rot, J. C.
TI It is pointless to point in bounded heaps
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 5th IPM International Conference Fundamentals Software Engineering FSEN
   2013
CY APR 24-26, 2013
CL Tehran, IRAN
DE Heap structures; Pushdown system; Object-oriented program semantics
ID RECURSIVE-PROGRAMS; PUSHDOWN-AUTOMATA; MODEL-CHECKING
AB In this paper we introduce a new symbolic semantics for a class of recursive programs which feature dynamic creation and unbounded allocation of objects. We use a symbolic representation of the program state in terms of equations to model the semantics of a program as a pushdown system with a finite set of control states and a finite stack alphabet. Our main technical result is a rigorous proof of the equivalence between the concrete and the symbolic semantics.
   Adding pointer fields gives rise to a Turing complete language. However, under the assumption that the number of reachable objects in the visible heap is bounded in all the computations of a program with pointers, we show how to construct a program without pointers that simulates it. Consequently, in the context of bounded visible heaps, programs with pointers are no more expressive than programs without them. We conclude by extending programs with a dynamic deallocation statement, an operation that affects all aliases of a deallocated object. We show how to extend the concrete and the symbolic semantics so to retain the previous equivalence result. (C) 2015 Elsevier B.V. All rights reserved.
C1 [de Boer, F. S.; Bonsangue, M. M.; Rot, J. C.] Ctr Wiskunde & Informat, Amsterdam, Netherlands.
   [de Boer, F. S.; Bonsangue, M. M.; Rot, J. C.] LIACS, Leiden, Netherlands.
RP Rot, JC (corresponding author), LIACS, Leiden, Netherlands.
EM F.S.de.Boer@cwi.nl; M.M.Bonsangue@liacs.leidenuniv.nl;
   J.C.Rot@liacs.leidenuniv.nl
OI Bonsangue, Marcello/0000-0003-3746-3618
FU Netherlands Organisation for Scientific Research (NWO), CoRE project
   [612.063.920]
FX The research of this author has been funded by the Netherlands
   Organisation for Scientific Research (NWO), CoRE project, dossier
   number: 612.063.920.
CR Abdulla PA, 2013, LECT NOTES COMPUT SC, V8161, P199, DOI 10.1007/978-3-642-40213-5_13
   Abdulla PA, 2012, IEEE S LOG, P35, DOI 10.1109/LICS.2012.15
   Asavoae IM, 2015, SCI COMPUT PROGRAM, V100, P61, DOI 10.1016/j.scico.2014.09.009
   Bouajjani A, 1997, LECT NOTES COMPUT SC, V1243, P135
   Bouajjani A., 2007, LECT NOTES COMPUTER, V4590
   Corbett J. C., 2000, Proceedings of the 2000 International Conference on Software Engineering. ICSE 2000 the New Millennium, P439, DOI 10.1109/ICSE.2000.870434
   Demartini C, 1999, SOFTWARE PRACT EXPER, V29, P577, DOI 10.1002/(SICI)1097-024X(199906)29:7<577::AID-SPE246>3.0.CO;2-V
   Distefano D, 2004, LECT NOTES COMPUT SC, V3328, P250
   Distefano D, 2002, INT FED INFO PROC, V96, P435
   Esparza J, 2001, LECT NOTES COMPUT SC, V2102, P324
   Havelund K., 2000, International Journal on Software Tools for Technology Transfer (STTT), V2, P366, DOI [10.1007/s100090050043., DOI 10.1007/S100090050043]
   Minsky M., 1967, Computation: finite and infinite machines
   Montanari U, 2005, LECT NOTES COMPUT SC, V3465, P1
   Park DYW, 2000, FIFTEENTH IEEE INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING, PROCEEDINGS, P253, DOI 10.1109/ASE.2000.873671
   Rot J, 2012, ELECTRON P THEOR COM, P99, DOI 10.4204/EPTCS.104.9
   Rot J, 2013, LECT NOTES COMPUT SC, V8161, P1, DOI 10.1007/978-3-642-40213-5_1
NR 16
TC 0
Z9 0
U1 0
U2 0
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 15
PY 2015
VL 112
BP 102
EP 118
DI 10.1016/j.scico.2015.06.007
PN 1
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA CW3HB
UT WOS:000364881500006
OA hybrid
DA 2024-07-18
ER

PT J
AU Dongol, B
   Derrick, J
AF Dongol, Brijesh
   Derrick, John
TI Interval-based data refinement: A uniform approach to true concurrency
   in discrete and real-time systems
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Refinement; Interval-based reasoning; True concurrency; Discrete time
   systems; Real-time systems
AB The majority of modern systems exhibit sophisticated concurrent behaviour, where several system components observe and modify the state with fine-grained atomicity. Many systems also exhibit truly concurrent behaviour, where multiple events may occur simultaneously. Data refinement, a correctness criterion to compare an abstract and a concrete implementation, normally admits interleaved models of execution only. In this paper, we present a method of data refinement using a framework that allows one to view a component's evolution over an interval of time, simplifying reasoning about true concurrency. By modifying the type of an interval, our theory may be specialised to cover data refinement of both discrete and real-time systems. We develop a sound interval-based forward simulation rule that enables decomposition of data refinement proofs, and apply this rule to verify data refinement for two examples: a simple concurrent program and a more in-depth real-time controller. (C) 2015 Elsevier B.V. All rights reserved.
C1 [Dongol, Brijesh] Brunel Univ London, Dept Comp Sci, London, England.
   [Derrick, John] Univ Sheffield, Dept Comp Sci, Sheffield S10 2TN, S Yorkshire, England.
C3 Brunel University; University of Sheffield
RP Dongol, B (corresponding author), Brunel Univ London, Dept Comp Sci, London, England.
EM Brijesh.Dongol@brunel.ac.uk
RI Dongol, Brijesh/ABB-2935-2020
OI Dongol, Brijesh/0000-0003-0446-3507; Derrick, John/0000-0002-6631-8914
FU EPSRC [EP/J003727/1]; EPSRC [EP/M017044/1, EP/J003727/1] Funding Source:
   UKRI
FX This work is sponsored by EPSRC Grant EP/J003727/1. We are indebted to
   our anonymous reviewers from this journal as well as those from REFINE
   13 for their comments on the workshop version of this paper.
CR ABADI M, 1995, ACM T PROGR LANG SYS, V17, P507, DOI 10.1145/203095.201069
   ALLEN JF, 1983, COMMUN ACM, V26, P832, DOI 10.1145/182.358434
   Alur R, 2005, LECT NOTES COMPUT SC, V3414, P70
   [Anonymous], 1994, LECT NOTES COMPUTER, DOI DOI 10.1007/BFB0030556
   Back RJR, 1994, LECT NOTES COMPUT SC, V836, P367
   Bäumler S, 2011, FORM ASP COMPUT, V23, P91, DOI 10.1007/s00165-009-0130-y
   Baldan P, 2010, LECT NOTES COMPUT SC, V6269, P147, DOI 10.1007/978-3-642-15375-4_11
   Balser Michael, 1998, FM TRENDS, V1641, P330, DOI [10.1007/3-540-48257-1_23, DOI 10.1007/3-540-48257-1_23]
   Broy M, 2001, THEOR COMPUT SCI, V253, P3, DOI 10.1016/S0304-3975(00)00087-6
   Burns A, 2006, STRUCTURE FOR DEPENDABILITY: COMPUTER-BASED SYSTEMS FROM AN INTERDISCIPLINARY PERSPECTIVE, P74, DOI 10.1007/1-84628-111-3_4
   Burns A, 2010, REAL-TIME SYST, V45, P106, DOI 10.1007/s11241-010-9094-5
   de Roever W.P., 1998, CAMBRIDGE TRACTS THE, V46
   de Roever Willem-Paul, 2001, Concurrency Verification: Introduction to Compositional and Noncompositional Proof Methods
   De Wulf M, 2008, FORM METHOD SYST DES, V33, P45, DOI 10.1007/s10703-008-0056-7
   Derrick J., 2003, Formal Aspects of Computing, V15, P182, DOI 10.1007/s00165-003-0007-4
   Derrick J, 2009, ELECTRON NOTES THEOR, V259, P21, DOI 10.1016/j.entcs.2009.12.015
   Dongol Brijesh, 2013, Theoretical Aspects of Computing - ICTAC 2013. 10th International Colloquium. Proceedings: LNCS 8049, P177, DOI 10.1007/978-3-642-39718-9_11
   Dongol Brijesh, 2012, Relational and Algebraic Methods in Computer Science. Proceedings 13th International Conference, RAMiCS 2012, P50, DOI 10.1007/978-3-642-33314-9_4
   Dongol B., 2012, ELECT COMMUN EASST, V53
   Dongol B., 2013, REFINE, P15
   Dongol B., 2015, MPCIN PRESS
   Dongol B, 2014, SCI COMPUT PROGRAM, V85, P137, DOI 10.1016/j.scico.2013.08.009
   Dongol B, 2013, SCI COMPUT PROGRAM, V78, P2047, DOI 10.1016/j.scico.2012.07.008
   Dongol B, 2010, LECT NOTES COMPUT SC, V6120, P119, DOI 10.1007/978-3-642-13321-3_9
   Dongol Brijesh, 2013, ELECT COMMUN EUR ASS, V66, DOI [10.14279/tuj.eceasst.66.889, DOI 10.14279/TUJ.ECEASST.66.889]
   Feijen W.H.J., 1999, METHOD MULTIPROGRAMM
   Fidge C., 1993, FME'93: Industrial-Strength Formal Methods. First International Symposium of Formal Methods Europe Proceedings, P314, DOI 10.1007/BFb0024654
   Fidge C., 1996, FME '96: Industrial Benefit and Advances in Formal Methods. Third International Symposium of Formal Methods Europe. Proceedings, P327
   Garay P., 1996, PUMP APPL DESK BOOK
   Gupta V, 1997, LECT NOTES COMPUT SC, V1201, P331, DOI 10.1007/BFb0014736
   Gurovic D, 2000, IEEE SYS MAN CYBERN, P3098, DOI 10.1109/ICSMC.2000.884474
   Hayes I.J., 2013, COMPUT J
   HEHNER ECR, 1990, SCI COMPUT PROGRAM, V14, P133, DOI 10.1016/0167-6423(90)90018-9
   Jones CB, 2008, LECT NOTES COMPUT SC, V5238, P360
   Kwiatkowska Marta, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P585, DOI 10.1007/978-3-642-22110-1_47
   Lamport L., 2002, SPECIFYING SYSTEMS T
   Liu ZM, 2001, THEOR COMPUT SCI, V253, P119, DOI 10.1016/S0304-3975(00)00091-8
   Majster-Cederbaum M, 2003, ACTA INFORM, V39, P531, DOI 10.1007/s00236-003-0117-8
   Majster-Cederbaum M, 2001, IEEE INT C ENG COMP, P58, DOI 10.1109/ICECCS.2001.930164
   Morgan Carroll, 1994, Programming from specifications
   Moszkowski BC, 2000, IEEE S LOG, P241
   Murphy D., 1992, FTRTFTS, P529
   Olderog Ernst-Rudiger., 2008, REAL TIME SYSTEMS FO
   Pedersen G.K.M., 2008, P GEN EV COMP C ATL, P1611
   Pelavin R.N., 1987, MODEL CONCURRENT ACT, P246
   Platzer A, 2008, LECT NOTES ARTIF INT, V5195, P171, DOI 10.1007/978-3-540-71070-7_15
   Schellhorn G., 2011, 18 INT S TEMPORAL RE, P99
   Scholefield D., 1993, Mathematical Foundations of Computer Science 1993. 18th International Symposium, MFCS '93 Proceedings, P693
   Tosic P., 2004, Proceedings. 18th International Parallel and Distributed Processing Symposium
   Zhou C., 2004, EATCS: Monographs in Theoretical Computer Science
NR 50
TC 1
Z9 1
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 1
PY 2015
VL 111
SI SI
BP 214
EP 247
DI 10.1016/j.scico.2015.05.005
PN 2
PG 34
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DB5LX
UT WOS:000368556700002
OA Green Submitted, Green Published, Bronze
DA 2024-07-18
ER

PT J
AU Oliveira, N
   Barbosa, LS
AF Oliveira, Nuno
   Barbosa, Luis S.
TI Reasoning about software reconfigurations: The behavioural and
   structural perspectives
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 28th ACM Symposium on Applied Computing (SAC) on Programming Languages
   Track
CY MAR 18-22, 2013
CL Coimbra, PORTUGAL
SP ACM, ACM Special Interest Grp Appl Comp
DE Software reconfiguration; Software architecture; Coordination; Reo
ID REO; ARCHITECTURES; COORDINATION; COMPONENTS; MODEL
AB Software connectors encapsulate interaction patterns between services in complex, distributed service-oriented applications. Such patterns encode the interconnection between the architectural elements in a system, which is not necessarily fixed, but often evolves dynamically. This may happen in response to faults, degrading levels of QoS, new enforced requirements or the re-assessment of contextual conditions. To be able to characterise and reason about such changes became a major issue in the project of trustworthy software. This paper discusses what reconfiguration means within coordination-based models of software design. In these models computation and interaction are kept separate: components and services interact anonymously through specific connectors encoding the coordination protocols. In such a setting, of which Reo is a paradigmatic illustration, the paper introduces a model for connector reconfigurations, from both a structural and a behavioural perspective. (C) 2015 Elsevier B.V. All rights reserved.
C1 [Oliveira, Nuno; Barbosa, Luis S.] Univ Minho, HASLab, INESC TEC, Braga, Portugal.
C3 Universidade do Minho; INESC TEC
RP Oliveira, N (corresponding author), Univ Minho, HASLab, INESC TEC, Braga, Portugal.
EM nunooliveira@di.uminho.pt
RI Soares Barbosa, Luis/N-7086-2013
OI Soares Barbosa, Luis/0000-0002-5037-2588
CR [Anonymous], 2000, Log. J. IGPL
   Arbab F, 2004, MATH STRUCT COMP SCI, V14, P329, DOI 10.1017/S0960129504004153
   Arbab F, 2003, LECT NOTES COMPUT SC, V2852, P33
   Arbab F, 2002, LECT NOTES COMPUT SC, V2315, P22
   Arbab F, 2009, LECT NOTES COMPUT SC, V5521, P268, DOI 10.1007/978-3-642-02053-7_14
   Areces C., 2002, Automated Deduction - CADE-18. 18th International Conference on Automated Deduction. Proceedings (Lecture Notes in Artificial Intelligence Vol.2392), P156
   Baier C, 2006, SCI COMPUT PROGRAM, V61, P75, DOI 10.1016/j.scico.2005.10.008
   Baier C, 2009, LECT NOTES COMPUT SC, V5521, P247, DOI 10.1007/978-3-642-02053-7_13
   Basu A, 2006, I C SOFTW ENG FORM M, P3
   Basu A, 2011, IEEE SOFTWARE, V28, P41, DOI 10.1109/MS.2011.27
   Bonsangue M, 2012, SCI COMPUT PROGRAM, V77, P685, DOI 10.1016/j.scico.2011.01.006
   Bonsangue M, 2009, LECT NOTES COMPUT SC, V5521, P184, DOI 10.1007/978-3-642-02053-7_10
   Brauner T, 2010, APPL LOGIC SERIES
   Bravetti Mario, 2012, Leveraging Applications of Formal Methods, Verification and Validation. Technologies for Mastering Change. Technologies for Mastering Change. Proceedings of the 5th International Symposium, ISoLA 2012, P269, DOI 10.1007/978-3-642-34026-0_20
   Bravetti M., 2012, LOG METH COMPUT SCI, V8, P1
   Bruni R, 2008, ELECTRON NOTES THEOR, V213, P39, DOI 10.1016/j.entcs.2008.04.073
   Clarke D., 2005, RESONING CONNECTOR R
   Clarke D, 2008, FUND INFORM, V82, P361
   Clarke D, 2006, ELECTRON NOTES THEOR, V154, P101, DOI 10.1016/j.entcs.2005.12.035
   Corradini A., 1997, HDB GRAPH GRAMMARS C, V1, P163, DOI DOI 10.1142/9789812384720
   Costa D., 2010, THESIS VRIJE U AMSTE
   Ehrig H., 1973, 14th Annual Symposium on Switching Automata Theory, P167, DOI 10.1109/SWAT.1973.11
   Gomaa H, 2004, FOURTH WORKING IEEE/IFIP CONFERENCE ON SOFTWARE ARCHITECTURE (WICSA 2004), PROCEEDINGS, P79, DOI 10.1109/WICSA.2004.1310692
   Hirsch D, 1999, INT FED INFO PROC, V12, P127
   Hnetynka P, 2006, LECT NOTES COMPUT SC, V4063, P352
   Jongmans SSTQ, 2012, SCI ANN COMPUT SCI, V22, P201, DOI 10.7561/SACS.2012.1.201
   Koehler C, 2008, ELECTRON NOTES THEOR, V194, P77, DOI 10.1016/j.entcs.2008.03.100
   KOZEN D, 1983, THEOR COMPUT SCI, V27, P333, DOI 10.1016/0304-3975(82)90125-6
   Krause C., 2011, THESIS LEIDEN U AMST
   Krause C, 2011, SCI COMPUT PROGRAM, V76, P23, DOI 10.1016/j.scico.2009.10.006
   Malohlava M., 2008, P MEMICS 2008 ZNOJM, P1
   Oliveira Nuno., 2013, Proceedings of the 28th Annual ACM Symposium on Applied Computing, SAC'13, P1885
   Oliveira Nuno., 2013, Web Services and Formal Methods, volume 7843 of Lecture Notes in Computer Science, V7843, P134
   Oreizy P, 1998, PROC INT CONF SOFTW, P177, DOI 10.1109/ICSE.1998.671114
   Plump D., 2011, ELECT P THEORETICAL, V82, P1
   Plump D, 2009, LECT NOTES COMPUT SC, V5725, P99, DOI 10.1007/978-3-642-03564-7_6
   Poskitt C.M., 2013, ELECT COMMUN EASST, V61, P1
   Ramirez A.J., 2010, P 2010WORKSHOP SOFTW, P49
   Seinturier L, 2012, SOFTWARE PRACT EXPER, V42, P559, DOI 10.1002/spe.1077
   Wermelinger M, 1999, LECT NOTES COMPUT SC, V1687, P393, DOI 10.1145/318774.319256
NR 40
TC 0
Z9 0
U1 0
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 15
PY 2015
VL 110
BP 78
EP 103
DI 10.1016/j.scico.2015.05.013
PG 26
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA CR3VX
UT WOS:000361262300005
OA Green Published, Bronze
DA 2024-07-18
ER

PT J
AU Leger, P
   Tanter, É
   Fukuda, H
AF Leger, Paul
   Tanter, Eric
   Fukuda, Hiroaki
TI An expressive stateful aspect language
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Aspect-oriented programming; Stateful aspects; ESA; Typed racket;
   JavaScript
ID IMPLEMENTATION; DESIGN
AB Stateful aspects can react to the trace of a program execution; they can support modular implementations of several crosscutting concerns like error detection, security, event handling, and debugging. However, most proposed stateful aspect languages have specifically been tailored to address a particular concern. Indeed, most of these languages differ in their pattern languages and semantics. As a consequence, developers need to tweak aspect definitions in contortive ways or create new specialized stateful aspect languages altogether if their specific needs are not supported. In this paper, we describe ESA, an expressive stateful aspect language, in which the pattern language is Turing-complete and patterns themselves are reusable, composable first-class values. In addition, the core semantic elements of every aspect in ESA are open to customization. We describe ESA in a typed functional language. We use this description to develop a concrete and practical implementation of ESA for JavaScript. With this implementation, we illustrate the expressiveness of ESA in action with examples of diverse scenarios and expressing semantics of existing stateful aspect languages. (C) 2015 Elsevier B.V. All rights reserved.
C1 [Leger, Paul] Univ Catolica Norte, Escuela Ciencias Empresariales, Antofagasta, Chile.
   [Tanter, Eric] Univ Chile, Dept Comp Sci, PLEIAD Lab, Santiago, Chile.
   [Fukuda, Hiroaki] Shibaura Inst Technol, Tokyo, Japan.
C3 Universidad Catolica del Norte; Universidad de Chile; Shibaura Institute
   of Technology
RP Leger, P (corresponding author), Univ Catolica Norte, Escuela Ciencias Empresariales, Antofagasta, Chile.
EM pleger@ucn.cl
RI Tanter, Éric/A-7955-2008; Leger, Paul/Q-6174-2017
OI Tanter, Éric/0000-0002-7359-890X; Leger, Paul/0000-0003-0969-5139
FU Grants-in-Aid for Scientific Research [26330089] Funding Source: KAKEN
CR Allan C, 2005, ACM SIGPLAN NOTICES, V40, P345, DOI 10.1145/1103845.1094839
   [Anonymous], PROFESSIONAL COMPUTI
   [Anonymous], 1966, THEORY SELF REPRODUC
   Avgustinov P, 2006, LECT NOTES COMPUT SC, V3880, P293
   Avgustinov P, 2007, ACM SIGPLAN NOTICES, V42, P589, DOI 10.1145/1297105.1297070
   Bancilhon F., 1986, PODS 86, P1
   Bodden E., 2010, P 9 WORKSH FDN ASP O, P31
   Bodden E., 2012, COMMUNICATION
   Bodden E., 2010, RUNTIME VERIFICATION, P74
   Bodden E, 2009, AOSD'09: 8TH INTERNATIONAL CONFERENCE ON ASPECT-ORIENTED SOFTWARE DEVELOPMENT, P3
   Book R.V., 1993, TEXTS MONOGRAPHS COM, pviii+189
   Chen F., 2003, RUNTIME VERIFICATION, P108, DOI DOI 10.1016/S1571-0661
   Chen F, 2007, ACM SIGPLAN NOTICES, V42, P569, DOI 10.1145/1297105.1297069
   Daniel Luis., 2006, AOSD 06, P51
   Darlington K., 2000, ESSENCE COMPUTING SE
   Douence R., 2001, LECT NOTES COMPUTER, V2192, P170, DOI DOI 10.1007/3-540-45429-2_13
   Douence Remi, 2005, Aspect-Oriented Software Development, P201
   Eugster P, 2009, LECT NOTES COMPUT SC, V5653, P570, DOI 10.1007/978-3-642-03013-0_26
   FORGY CL, 1982, ARTIF INTELL, V19, P17, DOI 10.1016/0004-3702(82)90020-0
   Goldsmith S, 2005, ACM SIGPLAN NOTICES, V40, P385, DOI 10.1145/1103845.1094841
   Herzeel C., 2007, P 2007 INT LISP C IL, P1
   Holzer A., 2011, P 10 INT C ASP OR SO, P241
   Kiczales G., 2001, ECOOP 2001 - Object-Oriented Programming. 15th European Conference. Proceedings (Lecture Notes in Computer Science Vol.2072), P327
   Kiczales G, 1997, PROC INT CONF SOFTW, P481, DOI 10.1145/253228.253431
   KICZALES G, 1996, SPECIAL ISSUES OBJEC
   Leger P., 2010, P 9 WORKSH FDN ASP O, P25
   Leger P., 2012, PROC 11 WORKSHOP FOU, P27
   Leger P., 2010, P 14 BRAZ S PROGR LA, P123
   Leger P, 2013, SCI COMPUT PROGRAM, V78, P1538, DOI 10.1016/j.scico.2012.11.005
   Malakuti S., 2011, THESIS U TWENTE ENSC
   Malakuti S., 2013, REACT EV MOD WORKSH
   Malakuti S., 2012, P 27 ANN ACM S APPL, P1850
   Malakuti S, 2014, LECT NOTES COMPUT SC, V8400, P27, DOI 10.1007/978-3-642-55099-7_2
   Martin M, 2005, ACM SIGPLAN NOTICES, V40, P365, DOI 10.1145/1103845.1094840
   Masuhara H, 2003, LECT NOTES COMPUT SC, V2622, P46
   Meredith Patrick, 2012, International Journal on Software Tools for Technology Transfer, V14, P249, DOI 10.1007/s10009-011-0198-6
   Meredith PO, 2012, THESIS U ILLINOIS UR
   Navarro LDB, 2008, LECT NOTES COMPUT SC, V5346, P183, DOI 10.1007/978-3-540-89856-6_10
   Ostermann K, 2005, LECT NOTES COMPUT SC, V3586, P214
   PARNAS DL, 1972, COMMUN ACM, V15, P1053, DOI 10.1145/361598.361623
   Parzonka M., 2013, THESIS TU DARMSTADT
   Postel J., 1985, 959 REQ COMM, V959
   Sussman G.J., 1976, 349 MIT AI LAB, P1
   Tanter Eric, 2008, 7 INT C ASP OR SOFTW, P168, DOI [10.1145/1353482.1353503, DOI 10.1145/1353482.1353503]
   Tobin-Hochstadt S, 2008, ACM SIGPLAN NOTICES, V43, P395, DOI 10.1145/1328897.1328486
   Toledo R., 2010, P 9 ACM INT C ASPECT, P13
   van Deursen A, 2000, ACM SIGPLAN NOTICES, V35, P26, DOI 10.1145/352029.352035
   Walker R. J., 2004, Software Engineering Notes, V29, P159, DOI 10.1145/1041685.1029918
NR 48
TC 9
Z9 9
U1 0
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAY 1
PY 2015
VL 102
BP 108
EP 141
DI 10.1016/j.scico.2015.02.001
PG 34
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CE7UO
UT WOS:000352047500006
OA Bronze
DA 2024-07-18
ER

PT J
AU Le Goc, Y
   Donzé, A
AF Le Goc, Yannick
   Donze, Alexandre
TI EVL: A framework for multi-methods in C plus
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Multi-methods; Multiple dispatch; Runtime type information;
   Object-oriented programming; C plus
ID MULTIPLE DISPATCH
AB Multi-methods are functions whose calls at runtime are resolved depending on the dynamic types of more than one argument. They are useful for common programming problems. However, while many languages provide different mechanisms to implement them in one way or another, there is still, to the best of our knowledge, no library or language feature that handles them in a general and flexible way. In this paper, we present the EVL (Extended Virtual function Library) framework which provides a set of classes in C++ aiming at solving this problem.
   The EVL framework provides a generalization of virtual function dispatch through the number of dimensions and the selection of the function to invoke using a so-called Function Comparison Operator. Our library provides both symmetric and asymmetric dispatch algorithms that can be refined by the programmer to include criteria other than class inheritance. For instance, the EVL framework provides multi-methods with predicate dispatch by defining a dedicated FCO based not only on the dynamic types of the arguments but also on their values. This flexibility greatly helps to resolve ambiguities without having to define new functions. Our multi-methods also unify dispatch tables and caching by introducing cache strategies for which the implementation is a balance between memory and speed.
   To define multi-methods in C++, we implement a non-intrusive reflection library providing fast dynamic casting and supporting dynamic class loading. Our multi-methods are policy-based class templates that support virtual but not repeated inheritance. They check the type compatibility of functions at compile-time, preserve type-safety and resolve function calls at runtime by invoking the cache or updating it by computing the selected function for the requested tuple of types. By default, our multi-methods handle dispatch errors at runtime by throwing exceptions but an error-code strategy can be set up by defining a dedicated policy class. Performance of our multi-methods is comparable with that of standard virtual functions when configured with fast cache. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Le Goc, Yannick] Inst Laue Langevin, F-38042 Grenoble 9, France.
   [Donze, Alexandre] Univ Calif Berkeley, Dept EECS, Berkeley, CA 94720 USA.
C3 Institut Laue-Langevin (ILL); University of California System;
   University of California Berkeley
RP Donzé, A (corresponding author), Univ Calif Berkeley, Dept EECS, Cory Hall 545S, Berkeley, CA 94720 USA.
EM yannick.legoc@ill.eu; alexandre.donze@eecs.berkeley.edu
CR Alexandrescu A., 2001, Modern C++ Design: Generic Programming and Design Patterns Applied
   Amiel E., 1996, ECOOP '96 - Object-Oriented Programming. 10th European Conference. Proceedings, P167, DOI 10.1007/BFb0053061
   Arnold K., 2000, The Java Programming Language, V3rd ed
   Berris D.M., 2012, N3340120030 ISOIEC J
   Bettini L, 2005, ELECTRON NOTES THEOR, V138, P59, DOI 10.1016/j.entcs.2005.09.011
   Bruce K., 1995, S OBJ OR PROGR SYST, P227
   CHAMBERS C, 1992, LECT NOTES COMPUT SC, V615, P33, DOI 10.1007/BFb0053029
   CHAMBERS C, 1995, CECIL LANGUAGE SPECI
   Clifton C, 2000, ACM SIGPLAN NOTICES, V35, P130, DOI 10.1145/354222.353181
   Devadithya T., 2007, P 2007 SPRING SIMULA, V2, P435
   Dujardin E, 1998, ACM T PROGR LANG SYS, V20, P116, DOI 10.1145/271510.271521
   Ernst M., 1998, ECOOP'98 - Object-Oriented Programming. 12th European Conference. Proceedings, P186, DOI 10.1007/BFb0054092
   Forax R, 2004, IEEE T SOFTWARE ENG, V30, P1055, DOI 10.1109/TSE.2004.90
   Gamma E., 1994, Design patterns: Elements of reusable object-oriented software
   Gibbs M, 2006, SOFTWARE PRACT EXPER, V36, P139, DOI 10.1002/spe.686
   KAREDLA R, 1994, COMPUTER, V27, P38, DOI 10.1109/2.268884
   Margaritis A., 2004, AGM LIBREFLECTION RE
   Muschevici R, 2008, ACM SIGPLAN NOTICES, V43, P563, DOI 10.1145/1449955.1449808
   Pirkelbauer P, 2010, SCI COMPUT PROGRAM, V75, P773, DOI 10.1016/j.scico.2009.04.002
   Pirkelbauer P, 2010, SCI COMPUT PROGRAM, V75, P638, DOI 10.1016/j.scico.2009.06.002
   Roiser S., 2006, BOOST LIB PROPOSAL R
   Schmidt H.W., 1991, OBJECT ORIENTED PROG
   Shalit A., 1996, COMMON LISP LANGUAGE
   Smith Julian., 2003, Draft proposal for adding Multimethods to C++
   Solodkyy Yuriy, 2012, SIGPLAN Notices, V47, P963
   Steele Jr Guy L., 1990, COMMON LISP LANGUAGE
   Stroustrup Bjarne, 2013, The C++ programming language
   Van Rossum G, 2003, Python Language Reference Manual
NR 28
TC 1
Z9 2
U1 0
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 1
PY 2015
VL 98
BP 531
EP 550
DI 10.1016/j.scico.2014.08.003
PN 4
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AY7LJ
UT WOS:000347741400005
DA 2024-07-18
ER

PT J
AU Marek, L
   Zheng, Y
   Ansaloni, D
   Bulej, L
   Sarimbekov, A
   Binder, W
   Tuma, P
AF Marek, Lukas
   Zheng, Yudi
   Ansaloni, Danilo
   Bulej, Lubomir
   Sarimbekov, Aibek
   Binder, Walter
   Tuma, Petr
TI Introduction to dynamic program analysis with DiSL
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Dynamic program analysis; Bytecode instrumentation; Aspect-oriented
   programming; Domain-specific languages; Java Virtual Machine
AB Dynamic program analysis (DPA) tools assist in many software engineering and development tasks, such as profiling, program comprehension, and performance model construction and calibration. On the Java platform, many DPA tools are implemented either using aspect-oriented programming (AOP), or rely on bytecode instrumentation to modify the base program code. The pointcut/advice model found in AOP enables rapid tool development, but does not allow expressing certain instrumentations due to limitations of mainstream AOP languages-developers thus use bytecode manipulation to gain more expressiveness and performance. However, while the existing bytecode manipulation libraries handle some low-level details, they still make tool development tedious and error-prone. Targeting this issue, we provide the first complete presentation of DiSL, an open-source instrumentation framework that reconciles the conciseness of the AOP pointcut/advice model and the expressiveness and performance achievable with bytecode manipulation libraries. Specifically, we extend our previous work to provide an overview of the DiSL architecture, advanced features, and the programming model. We also include case studies illustrating successful deployment of DiSL-based DPA tools. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Zheng, Yudi; Ansaloni, Danilo; Bulej, Lubomir; Sarimbekov, Aibek; Binder, Walter] Univ Lugano, Lugano, Switzerland.
   [Marek, Lukas; Tuma, Petr] Charles Univ Prague, CR-11636 Prague 1, Czech Republic.
C3 Universita della Svizzera Italiana; Charles University Prague
RP Bulej, L (corresponding author), Univ Lugano, Lugano, Switzerland.
EM lukas.marek@d3s.mff.cuni.cz; yudi.zheng@usi.ch; danilo.ansaloni@usi.ch;
   lubomir.bulej@usi.ch; aibek.sarimbekov@usi.ch; walter.binder@usi.ch;
   petr.tuma@d3s.mff.cuni.cz
RI Bulej, Lubomír/G-3045-2014; Marek, Lukas/AAF-3206-2019; Tuma,
   Petr/A-3094-2009
OI Bulej, Lubomír/0000-0002-4573-6084; Marek, Lukas/0000-0001-5473-8930;
   Tuma, Petr/0000-0002-7035-2322; Binder, Walter/0000-0002-2477-2182
FU Swiss National Science Foundation [CRSII2_136225]; European Commission
   (Seventh Framework Programme) [287746, 257414]; Czech Science Foundation
   [GACR P202/10/J042]; Sino-Swiss Science and Technology Cooperation
   (SSSTC) [IP04-092010]; Swiss National Science Foundation (SNF)
   [CRSII2_136225] Funding Source: Swiss National Science Foundation (SNF)
FX The research presented in this paper has been supported by the Swiss
   National Science Foundation (project CRSII2_136225), by the European
   Commission (Seventh Framework Programme projects 287746 and 257414), by
   the Czech Science Foundation (project GACR P202/10/J042), and by the
   Sino-Swiss Science and Technology Cooperation (SSSTC) Institutional
   Partnership (project IP04-092010).
CR Achenbach M, 2010, LECT NOTES COMPUT SC, V6418, P153, DOI 10.1007/978-3-642-16612-9_13
   Ammons G, 1997, ACM SIGPLAN NOTICES, V32, P85, DOI 10.1145/258916.258924
   [Anonymous], P 3 INT C ASP OR SOF
   [Anonymous], 2012, LNCS, DOI DOI 10.1007/978-3-642-35182-2
   Aotani Tomoyuki., 2007, AOSD 07, P161
   Artzi S, 2008, LECT NOTES COMPUT SC, V5142, P542, DOI 10.1007/978-3-540-70592-5_23
   Avgustinov P., 2005, ASPECT ORIENTED SYST, P87
   Balsamo S, 2004, IEEE T SOFTWARE ENG, V30, P295, DOI 10.1109/TSE.2004.9
   Binder W., 2009, P 3 WORKSH VIRT MACH, P1
   Binder W, 2011, CONCURR COMP-PRACT E, V23, P1749, DOI 10.1002/cpe.1760
   Binder W, 2009, SOFTWARE PRACT EXPER, V39, P47, DOI 10.1002/spe.890
   Binder Walter., 2011, Proceedings of the sixth annual workshop on Domain-specific aspect languages, P9
   Blackburn SM, 2006, ACM SIGPLAN NOTICES, V41, P169, DOI 10.1145/1167515.1167488
   Bodden E, 2010, IEEE T SOFTWARE ENG, V36, P509, DOI 10.1109/TSE.2010.25
   Chen F, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P221, DOI 10.1145/1368088.1368119
   Chiba S, 2000, LECT NOTES COMPUT SC, V1850, P313
   Eaddy M, 2007, LECT NOTES COMPUT SC, V4829, P200
   Flann C., 2010, Addressing global change: a new agenda for botanic gardens. Fourth Global Botanic Gardens Congress, Dublin, Irish Republic, 13-18 June 2010, P1, DOI 10.1145/1806672.1806674
   France R, 2004, IEE P-SOFTW, V151, P173, DOI 10.1049/ip-sen:20040920
   IBM, 2012, DYN LOAD TIM INSTR L
   IBM, 2012, WATS LIB AN WALA
   Jovic M, 2011, ACM SIGPLAN NOTICES, V46, P155, DOI 10.1145/2076021.2048081
   Kiczales G, 1997, LECT NOTES COMPUT SC, V1241, P220, DOI 10.1007/BFb0053381
   Klose K, 2007, LECT NOTES COMPUT SC, V4354, P320
   Lieberherr K., 2003, P 2 INT C ASP OR SOF, P40
   Marek Lukas, 2012, AOSD, P239, DOI [10.1145/2162049.2162077, DOI 10.1145/2162049.2162077]
   Moret P, 2011, P INT C ASP OR SOFTW, P129, DOI DOI 10.1145/1960275.1960292
   Pearce DJ, 2007, SOFTWARE PRACT EXPER, V37, P747, DOI 10.1002/spe.788
   Röthlisberger D, 2012, IEEE T SOFTWARE ENG, V38, P579, DOI 10.1109/TSE.2011.42
   Sarimbekov A, 2013, P 11 ACM SIGPLAN SIG, P9
   Sarimbekov A, 2013, IEEE AUS SOFT ENGR, P11, DOI 10.1109/ASWEC.2013.12
   Sarimbekov A, 2014, SCI COMPUT PROGRAM, V79, P146, DOI 10.1016/j.scico.2011.11.003
   Schauerhuber A., 2007, TECHNICAL REPORT
   Sewe A, 2012, ACM SIGPLAN NOTICES, V47, P97, DOI 10.1145/2426642.2259010
   Simmonds D, 2005, NINTH IEEE INTERNATIONAL EDOC ENTERPRISE COMPUTING CONFERENCE, PROCEEDINGS, P119, DOI 10.1109/EDOC.2005.5
   Vallée-Rai R, 2000, LECT NOTES COMPUT SC, V1781, P18
   Xu GQ, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P151, DOI 10.1145/1368088.1368110
   Zheng YD, 2012, LECT NOTES COMPUT SC, V7304, P353, DOI 10.1007/978-3-642-30561-0_24
NR 38
TC 4
Z9 4
U1 0
U2 5
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 1
PY 2015
VL 98
BP 100
EP 115
DI 10.1016/j.scico.2014.01.003
PN 1
PG 16
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AY7LA
UT WOS:000347740500006
OA Bronze
DA 2024-07-18
ER

PT J
AU Lämmel, R
AF Laemmel, Ralf
TI Software chrestomathies
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Program chrestomathy; Software chrestomathy; Programming languages;
   Software engineering; Understanding software
AB A software chrestomathy is a collection of software systems ('contributions') meant to be useful in learning about or gaining insight into programming and software engineering. We describe the essential and potential characteristics of such collections. Eventually, we compile a research agenda on software chrestomathies. (C) 2013 Published by Elsevier B.V.
C1 Univ Koblenz Landau, Landau, Germany.
C3 University of Koblenz & Landau
RP Lämmel, R (corresponding author), Univ Koblenz Landau, Landau, Germany.
OI Lammel, Ralf/0000-0001-9946-4363
CR Alexe B, 2008, PROC VLDB ENDOW, V1, P230, DOI 10.14778/1453856.1453886
   Brunnow R.-E., 2008, CHRESTOMATHY CLASSIC
   Cleophas L, 2010, SCI COMPUT PROGRAM, V75, P1095, DOI 10.1016/j.scico.2010.04.012
   Collins, 2003, COLL ENGL DICT COMPL
   Di Ruscio Davide, 2013, Theory and Practice of Model Transformations. 6th International Conference, ICMT 2013. Proceedings: LNCS 7909, P60, DOI 10.1007/978-3-642-38883-5_9
   Farlex Inc, 2012, FARL CLIP COLL BAS W
   Farlex Inc, 2013, FREE DICT
   Favre Jean-Marie, 2012, Model Driven Engineering Languages and Systems. Proceedings 15th International Conference, MODELS 2012, P151, DOI 10.1007/978-3-642-33666-9_11
   Favre JM, 2012, LECT NOTES COMPUT SC, V7304, P58, DOI 10.1007/978-3-642-30561-0_6
   Harcourt H.M., 2009, The American heritage dictionary of the English Language, V4th
   K Dictionaries Ltd, 2005, RAND HOUS KERN WEBST
   Kazai G, 2013, INFORM RETRIEVAL, V16, P138, DOI 10.1007/s10791-012-9205-0
   LAYTON Bentley., 2004, Coptic Gnostic. Chrestomathy: A Selected of Coptic Texts with Grammatical Analysis and Glossary
   Li YY, 2011, EDUC TECHNOL SOC, V14, P49
   Martin FG, 2012, COMMUN ACM, V55, P26, DOI 10.1145/2240236.2240246
   Mencken H., 1949, CHRESTOMATHY
   Mende T, 2008, CSMR 2008: 12TH EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, P163
   Mercer S., 1921, ASSYRIAN GRAMMAR CHR
   Merriam-Webster Inc, 2011, MERR WEBST COLL DICT
   Oracle Corporation, 2013, JAV BLUEPRINTS GUID
   Robilliard PN, 1999, COMMUN ACM, V42, P87, DOI 10.1145/291469.291476
   Rodriguez A, 2008, HASKELL'08: PROCEEDINGS OF THE ACM SIGPLAN 2008 HASKELL SYMPOSIUM, P111
   Ruehr F., 2001, EVOLUTION HASKELL PR
   Schade O., 2013, 99 BOTTLES BEER
   Spyns P, 2008, APPL ONTOL, V3, P13, DOI 10.3233/AO-2008-0047
   The Gale Group Inc., 2008, OL ISMS
   The Gale Group Inc., 2008, DICT COLL NOUNS GROU
   Weirich J., 2013, OO EXAMPLE CODE
   Weiss E. H., 2002, ACM Journal of Computer Documentation, V26, P3, DOI 10.1145/584731.584733
   Wilson G., 2009, BEAUTIFUL CODE LEADI
NR 30
TC 1
Z9 1
U1 0
U2 0
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 1
PY 2015
VL 97
SI SI
BP 98
EP 104
DI 10.1016/j.scico.2013.11.014
PN 1
PG 7
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AU6PR
UT WOS:000345725100018
DA 2024-07-18
ER

PT J
AU Urma, RG
   Mycroft, A
AF Urma, Raoul-Gabriel
   Mycroft, Alan
TI Source-code queries with graph databases-with application to programming
   language usage and evolution
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Programming language evolution; Source-code queries and DSLs; Graph
   databases
AB Program querying and analysis tools are of growing importance, and occur in two main variants. Firstly there are source-code query languages which help software engineers to explore a system, or to find code in need of refactoring as coding standards evolve. These also enable language designers to understand the practical uses of language features and idioms over a software corpus. Secondly there are program analysis tools in the style of Coverity which perform deeper program analysis searching for bugs as well as checking adherence to coding standards such as MISRA.
   The former class are typically implemented on top of relational or deductive databases and make ad-hoc trade-offs between scalability and the amount of source-code detail held-with consequent limitations on the expressiveness of queries. The latter class are more commercially driven and involve more ad-hoc queries over program representations, nonetheless similar pressures encourage user-visible domain-specific languages to specify analyses.
   We argue that a graph data model and associated query language provides a unifying conceptual model and gives efficient scalable implementation even when storing full source-code detail. It also supports overlays allowing a query DSL to pose queries at a mixture of syntax-tree, type, control-flow-graph or data-flow levels.
   We describe a prototype source-code query system built on top of Neo4j using its Cypher graph query language; experiments show it scales to multi-million-line programs while also storing full source-code detail. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Urma, Raoul-Gabriel; Mycroft, Alan] Univ Cambridge, Comp Lab, Cambridge CB2 1TN, England.
C3 University of Cambridge
RP Urma, RG (corresponding author), Univ Cambridge, Comp Lab, Cambridge CB2 1TN, England.
EM raoul.urma@cl.cam.ac.uk; alan.mycroft@cl.cam.ac.uk
OI Mycroft, Alan/0000-0001-7013-8572
FU Qualcomm PhD studentship
FX We thank Alex Buckley, Joel Borggren-Franck, Jonathan Gibbons and
   Steffen Losch for helpful comments. We are grateful to the anonymous
   referees for their comments, particularly for pointing out Nagl's volume
   on the IPSEN project [19]. This work was supported by a Qualcomm PhD
   studentship.
CR Angles R, 2008, ACM COMPUT SURV, V40, DOI 10.1145/1322432.1322433
   [Anonymous], 2012, P ACM 4 ANN WORKSH E
   Balaban I, 2005, ACM SIGPLAN NOTICES, V40, P265, DOI 10.1145/1103845.1094832
   Bottoni P., 2003, Electronic Notes in Theoretical Computer Science, V72, P59
   Breu S., 2006, 21 IEEE ACM INT C AU
   Cohen T., 2006, OOPSLA
   de Roover C., 2011, PPPJ
   Gil J., 2010, ECOOP
   Hajiyev E, 2006, LECT NOTES COMPUT SC, V4067, P2
   JANZEN D, 2003, AOSD
   Mens T, 2005, J SOFTW MAINT EVOL-R, V17, P247, DOI 10.1002/smr.316
   Mens T, 2007, SOFTW SYST MODEL, V6, P269, DOI 10.1007/s10270-006-0044-6
   Nagl M., 1996, LECT NOTES COMPUT SC, V1170
   Stone A, 2009, INFORM SOFTWARE TECH, V51, P1440, DOI 10.1016/j.infsof.2009.04.014
   Tempero E, 2010, ASIA PAC SOFWR ENG, P336, DOI 10.1109/APSEC.2010.46
   Urma R.-G., 2012, ORACLE JAVA MAG  MAY
   Vicknair C., 2010, P 48 ANN SE REG C, P42
   Zloof MosheM., 1975, VLDB 75, P1
NR 18
TC 18
Z9 22
U1 0
U2 11
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 1
PY 2015
VL 97
SI SI
BP 127
EP 134
DI 10.1016/j.scico.2013.11.010
PN 1
PG 8
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AU6PR
UT WOS:000345725100022
OA Green Submitted, Bronze, Green Accepted
DA 2024-07-18
ER

PT J
AU van Eijck, J
   van der Storm, T
AF van Eijck, Jan
   van der Storm, Tijs
TI Understanding information update in questionnaires
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Domain-specific languages; Questionnaires; Semantics; Epistemic logic
AB Questionnaires are an important medium for collecting information in diverse areas of society (scientific surveys, tax filing, auditing guidance, etc.). We are interested in a domain-specific language (DSL) to automatically generate questionnaire software from declarative specifications. This note describes an important aspect of the semantics of such a DSL: what goes on when users fill out a form? The formalism is based on the epistemic notion of information update and has a wide range of applications. It provides a formal interpretation for query forms, and for the process of answering such forms. The attractiveness of the approach is in the fact that asking questions, providing partial answers to questions, and providing full answers to questions, are all modeled by the same mechanism of constraining a range of possibilities. (C) 2013 Published by Elsevier B.V.
C1 [van Eijck, Jan; van der Storm, Tijs] CWI, NL-1009 AB Amsterdam, Netherlands.
RP van Eijck, J (corresponding author), CWI, NL-1009 AB Amsterdam, Netherlands.
EM jve@cwi.nl; storm@cwi.nl
RI van der Storm, Tijs/HGB-8960-2022
CR Allen W, 2012, ACM SIGPLAN NOTICES, V47, P81, DOI 10.1145/2430532.2364518
   Centraal Bureau voor de Statistiek (CBS), 2012, BRANDW 2011 APP C D
   Elsas P. J., 1992, DEXA 92. Database and Expert Systems Applications. Proceedings of the International Conference, P512
   Fagin R, 1995, Reasoning about knowledge
   Gawande Atul, 2009, The Checklist Manifesto: How to Get Things Right
   Hintikka J., 1962, Knowledge and Belief: An Introduction to the Logic of the Two Notions
   Klint P, 2011, LECT NOTES COMPUT SC, V6491, P222, DOI 10.1007/978-3-642-18023-1_6
   Klint P, 2009, IEEE INT WORK C SO, P168, DOI 10.1109/SCAM.2009.28
   van der Ploeg A, 2013, ACM SIGPLAN NOTICES, V48, P117, DOI 10.1145/2503778.2503783
   van der Storm T., 2011, SEN1111 CWI
   van Deursen A., 2002, DOMAIN SPECIFIC LANG, V28, P53
NR 11
TC 0
Z9 0
U1 1
U2 5
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 1
PY 2015
VL 97
SI SI
BP 69
EP 74
DI 10.1016/j.scico.2013.11.042
PN 1
PG 6
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AU6PR
UT WOS:000345725100013
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Cunha, J
   Mendes, J
   Saraiva, J
   Visser, J
AF Cunha, Jacome
   Mendes, Jorge
   Saraiva, Joao
   Visser, Joost
TI Model-based programming environments for spreadsheets
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Spreadsheets; Model-driven engineering; Model-driven spreadsheets;
   Empirical validation
AB Spreadsheets can be seen as a flexible programming environment. However, they lack some of the concepts of regular programming languages, such as structured data types. This can lead the user to edit the spreadsheet in a wrong way and perhaps cause corrupt or redundant data.
   We devised a method for extraction of a relational model from a spreadsheet and the subsequent embedding of the model back into the spreadsheet to create a model-based spreadsheet programming environment. The extraction algorithm is specific for spreadsheets since it considers particularities such as layout and column arrangement. The extracted model is used to generate formulas and visual elements that are then embedded in the spreadsheet helping the user to edit data in a correct way. We present preliminary experimental results from applying our approach to a sample of spreadsheets from the EUSES Spreadsheet Corpus.
   Finally, we conduct the first systematic empirical study to assess the effectiveness and efficiency of this approach. A set of spreadsheet end users worked with two different model-based spreadsheets, and we present and analyze here the results achieved. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Cunha, Jacome; Mendes, Jorge; Saraiva, Joao] Univ Minho, HASLab INESC TEC, P-4719 Braga, Portugal.
   [Visser, Joost] Radboud Univ Nijmegen, NL-6525 ED Nijmegen, Netherlands.
   [Visser, Joost] Software Improvement Grp, Amsterdam, Netherlands.
   [Cunha, Jacome; Mendes, Jorge] Inst Politecn Porto, ESTGF, CIICESI, Oporto, Portugal.
C3 INESC TEC; Universidade do Minho; Radboud University Nijmegen; Instituto
   Politecnico do Porto
RP Cunha, J (corresponding author), Univ Minho, HASLab INESC TEC, P-4719 Braga, Portugal.
EM jacome@di.uminho.pt; jorgemendes@di.uminho.pt; jas@di.uminho.pt;
   j.visser@sig.eu
RI Visser, Joost/AAD-9423-2019; Saraiva, João/L-6113-2015; Cunha,
   Jacome/A-1213-2013
OI Saraiva, João/0000-0002-5686-7151; Mendes, Jorge/0000-0002-7977-9453;
   Visser, Joost/0000-0003-0158-3095; Cunha, Jacome/0000-0002-4713-3834
FU ERDF European Regional Development Fund through the COMPETE Programme
   (operational programme for competitiveness); National Funds through the
   FCT Fundacao para a Ciencia e a Tecnologia (Portuguese Foundation for
   Science and Technology) [FCOMP-01-0124-FEDER-010048]; FCT
   [SFRH/BPD/73358/2010]; Fundação para a Ciência e a Tecnologia
   [SFRH/BPD/73358/2010] Funding Source: FCT
FX This work is funded by ERDF European Regional Development Fund through
   the COMPETE Programme (operational programme for competitiveness) and by
   National Funds through the FCT Fundacao para a Ciencia e a Tecnologia
   (Portuguese Foundation for Science and Technology) within project
   FCOMP-01-0124-FEDER-010048. The first author is supported by the FCT
   grant SFRH/BPD/73358/2010.
CR Abraham R., 2006, 28th International Conference on Software Engineering Proceedings, P182, DOI 10.1145/1134285.1134312
   Abraham R, 2004, 2004 IEEE SYMPOSIUM ON VISUAL LANGUAGES AND HUMAN CENTRIC COMPUTING: PROCEEDINGS, P165, DOI 10.1109/VLHCC.2004.29
   Abraham R., 2006, PPDP 2006. Proceedings of the Eighth ACM SIGPLAN Symposium on Principles and Practice of Declarative Programming, P73, DOI 10.1145/1140335.1140346
   Abraham R, 2007, J VISUAL LANG COMPUT, V18, P71, DOI 10.1016/j.jvlc.2006.06.001
   Alhajj R, 2003, INFORM SYST, V28, P597, DOI 10.1016/S0306-4379(02)00042-X
   [Anonymous], ICSE 12
   [Anonymous], 1983, The theory of relational databases
   Beckwith Laura, 2011, End-User Development. Proceedings Third International Symposium, IS-EUD 2011, P282, DOI 10.1007/978-3-642-21530-8_27
   Beeri C., 1977, P ACM SIGMOD INT C M, P47, DOI DOI 10.1145/509404.509414
   Chambers C, 2010, J VISUAL LANG COMPUT, V21, P249, DOI 10.1016/j.jvlc.2010.08.004
   Cheng T, 2012, LECT NOTES COMPUT SC, V7460, P94, DOI 10.1007/978-3-642-33125-1_9
   CODD EF, 1970, COMMUN ACM, V13, P377, DOI 10.1145/357980.358007
   Connolly T., 2002, Database Systems: A Practical Approach to Design
   Cunha Jacome, 2012, Theory and Practice of Model Transformations. Proceedings 5th International Conference, ICMT 2012, P105, DOI 10.1007/978-3-642-30476-7_7
   Cunha Jacome, 2012, Programming Languages. Proceedings of the16th Brazilian Symposium, SBLP 2012, P117, DOI 10.1007/978-3-642-33182-4_10
   Cunha Jacome, 2012, Proceedings 2012 First International Workshop on User Evaluation for Software Engineering Researchers (USER 2012), P25, DOI 10.1109/USER.2012.6226577
   Cunha Jacome, 2010, Proceedings 2010 IEEE Symposium on Visual Languages and Human-Centric Computing (VL/HCC 2010), P93, DOI 10.1109/VLHCC.2010.22
   Cunha J., 2011, THESIS U MINHO
   Cunha J, 2012, S VIS LANG HUM CEN C, P19, DOI 10.1109/VLHCC.2012.6344473
   Cunha J, 2011, LECT NOTES COMPUT SC, V6603, P186, DOI 10.1007/978-3-642-19811-3_14
   Cunha J, 2009, S VIS LANG HUM CEN C, P233, DOI 10.1109/VLHCC.2009.5295255
   Cunha Jacome., 2009, PEPM, P179
   Date C.J., 1995, An Introduction to Database Systems
   Engels Gregor., 2005, ASE 05 P 20 IEEEACM, P124
   Erwig Martin., 2002, PADL 02 P 4 INT S PR, P173
   Fisher Marc., 2005, P 1 WORKSHOP END USE, P47
   Hermans F, 2012, PROC INT CONF SOFTW, P441, DOI 10.1109/ICSE.2012.6227171
   Hofer B, 2013, LECT NOTES COMPUT SC, V7793, P68, DOI 10.1007/978-3-642-37057-1_6
   Holzner S., 2004, Eclipse
   Jones SP, 2003, J FUNCT PROGRAM, V13, pVII
   Kuiper M, 1998, LECT NOTES COMPUT SC, V1383, P298
   Perry DE., 2000, P C FUT SOFTW ENG, P345, DOI DOI 10.1145/336512.336586
   Powell StephenG., 2003, ART MODELING SPREADS
   REPS T, 1984, SIGPLAN NOTICES, V19, P42, DOI 10.1145/390011.808247
   Saraiva J, 2003, LECT NOTES COMPUT SC, V2830, P307
   Saraiva J., 2004, INT WORKSH FDN SPREA
   Ullman J.D., 1997, 1 COURSE DATABASE SY
   van den Brand M, 1999, LECT NOTES COMPUT SC, V1575, P198
NR 38
TC 11
Z9 11
U1 0
U2 3
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 15
PY 2014
VL 96
BP 254
EP 275
DI 10.1016/j.scico.2014.02.002
PN 2
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AT8JY
UT WOS:000345180900006
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Hoare, T
   van Staden, S
AF Hoare, Tony
   van Staden, Stephan
TI The laws of programming unify process calculi
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Algebra of programming; Hoare logic; Process calculi; Operational
   semantics; Event model
AB We survey the well-known algebraic laws of sequential programming, and propose some less familiar laws for concurrent programming. On the basis of these laws, we derive the rules of a number of classical programming and process calculi, for example, those due to Hoare, Milner, and Kahn. The algebraic laws are simpler than each of the calculi derived from it, and they are stronger than all the calculi put together. Conversely, most of the laws are derivable from one or more of the calculi. This suggests that the laws are useful as a presentation of program semantics, and correspond to a widely held common understanding of the meaning of programs. For further evidence, Appendix A describes a realistic and generic model of program behaviour, which has been proved to satisfy the laws. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Hoare, Tony] Microsoft Res, Cambridge, England.
   [van Staden, Stephan] Swiss Fed Inst Technol, Zurich, Switzerland.
C3 Microsoft; Swiss Federal Institutes of Technology Domain; ETH Zurich
RP van Staden, S (corresponding author), Swiss Fed Inst Technol, Zurich, Switzerland.
EM Stephan.vanStaden@inf.ethz.ch
FU ETH Research Grant [ETH-15 10-1]
FX For useful comments and suggestions we are grateful to Thomas
   Dinsdale-Young, Sophia Drossopoulou, Peter O'Hearn, Rasmus Petersen,
   Andreas Podelski, Vlad Scherbina, Georg Struth, Jim Woodcock, and to the
   referees of this paper and its MPC version. We are grateful also to
   other attendants at the meeting of IFIP WG 2.3, held in Winchester,
   18-23 September 2011; also the Separation logic Workshop held in Queen
   Mary University, London, 5-6 October 2011. Van Staden was supported by
   ETH Research Grant ETH-15 10-1.
CR [Anonymous], SEMANTICS APPL FORMA
   [Anonymous], 1980, CALCULUS COMMUNICATI, DOI DOI 10.1007/3-540-10235-3
   [Anonymous], 2012, ACM QUEUE, DOI DOI 10.1145/2090147.2094081
   [Anonymous], 1987, LNCS
   Back Ralph-Johan, 1998, GRADUATE TEXTS COMPU
   Dijkstra E. W., 1976, A Discipline of Pro-gramming
   DINSDALEYOUNG T, 2013, P 40 ANN ACM SIGPLAN, V48, P287, DOI DOI 10.1145/2480359.2429104
   Fokkink W., 2007, Introduction to Process Algebra
   GISCHER JL, 1988, THEOR COMPUT SCI, V61, P199, DOI 10.1016/0304-3975(88)90124-7
   Hoare CART, 2009, LECT NOTES COMPUT SC, V5710, P399, DOI 10.1007/978-3-642-04081-8_27
   HOARE CAR, 1987, COMMUN ACM, V30, P672, DOI 10.1145/27651.27653
   HOARE CAR, 1969, COMMUN ACM, V12, P576, DOI 10.1145/363235.363259
   Hoare Tony, 2012, Mathematics of Program Construction. Proceedings 11th International Conference, MPC 2012, P7, DOI 10.1007/978-3-642-31113-0_2
   Hoare T., 2011, P 2010 MARKETOBERDOR
   Hoare T, 2012, FORM ASP COMPUT, V24, P423, DOI 10.1007/s00165-012-0249-0
   Jones CB, 1981, TECHNICAL MONOGRAPH, V25
   Kleene S., 1956, AUTOMATA STUDIES, P3
   KOZEN D, 1994, INFORM COMPUT, V110, P366, DOI 10.1006/inco.1994.1037
   Kozen Dexter, 2000, ACM Trans. Comput. Log., V1, P60, DOI DOI 10.1145/343369.343378
   Morgan Carroll, 1994, Programming from specifications
   O'Hearn PW, 2004, LECT NOTES COMPUT SC, V3170, P49
   Plotkin C.D., 1981, FN19 DAIMI AARH U CO
   TARSKI A, 1941, J SYMBOLIC LOGIC, V6, P73, DOI DOI 10.2307/2268577
   van Staden S, 2013, LECT NOTES COMPUTER, V7681, P88
   Wehrman I, 2009, INFORM PROCESS LETT, V109, P1001, DOI 10.1016/j.ipl.2009.06.003
NR 25
TC 6
Z9 7
U1 0
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 1
PY 2014
VL 85
SI SI
BP 102
EP 114
DI 10.1016/j.scico.2013.08.012
PN B
PG 13
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CC8KX
UT WOS:000350618700002
OA hybrid
DA 2024-07-18
ER

PT J
AU Rimsa, A
   d'Amorim, M
   Pereira, FMQ
   Bigonha, RS
AF Rimsa, Andrei
   d'Amorim, Marcelo
   Quintao Pereira, Fernando Magno
   Bigonha, Roberto S.
TI Efficient static checker for tainted variable attacks
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 14th Brazilian Symposium on Programming Languages (SBLP)
CY SEP 27-29, 2010
CL Salvador, BRAZIL
DE Tainted flow analysis; Security vulnerability; Static analysis
ID PRECISE ANALYSIS; WEB
AB Tainted flow attacks originate from program inputs maliciously crafted to exploit software vulnerabilities. These attacks are common in server-side scripting languages, such as PHP. In 1997, Orbaek and Palsberg formalized the problem of detecting these exploits as an instance of type-checking, and gave an O(V-3) algorithm to solve it, where V is the number of program variables. A similar algorithm was, ten years later, implemented on the Pixy tool. In this paper we give an O(V-2) solution to the same problem. Our solution uses Bodik et al.'s extended Static Single Assignment (e-SSA) program representation. The e-SSA form can be efficiently computed and it enables us to solve the problem via a sparse dataflow analysis. Using the same infrastructure, we compared a state-of-the-art dataflow solution with our technique. Both approaches have detected 36 vulnerabilities in well known PHP programs. Our results show that our approach tends to outperform the dataflow algorithm for larger inputs. We have reported the new bugs that we found, and an implementation of our algorithm is publicly available at https://github.com/rimsa/tainted-phc.git. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Rimsa, Andrei; Quintao Pereira, Fernando Magno; Bigonha, Roberto S.] Univ Fed Minas Gerais, BR-31270010 Belo Horizonte, MG, Brazil.
   [d'Amorim, Marcelo] Univ Fed Pernambuco, BR-50740560 Recife, PE, Brazil.
C3 Universidade Federal de Minas Gerais; Universidade Federal de Pernambuco
RP Pereira, FMQ (corresponding author), Univ Fed Minas Gerais, Av Antonio Carlos 6627, BR-31270010 Belo Horizonte, MG, Brazil.
EM rimsa@live.com; damorim@cin.ufpe.br; fernando@dcc.ufmg.br;
   bigonha@dcc.ufmg.br
RI Pereira, Fernando/HNR-7786-2023; d'Amorim, Marcelo/D-1703-2017
OI d'Amorim, Marcelo/0000-0002-1323-8769
CR Ananian Scott C., 1999, THESIS MIT
   [Anonymous], 2005, INPROCEEDINGS 20 IEE
   [Anonymous], 2011, P 2011 INT S SOFTW T, DOI DOI 10.1145/2001420.2001442
   [Anonymous], TECHNICAL REPORT
   [Anonymous], 2006, COMPILERS PRINCIPLES
   Appel A.W., 2002, MODERN COMPILER IMPL, V2nd
   BIGGAR P, 2009, THESIS TRINITY COLL
   Biggar Paul., 2009, P 2009 ACM S APPL CO, P1916, DOI DOI 10.1145/1529282.1529709
   Bodik R, 2000, ACM SIGPLAN NOTICES, V35, P321, DOI 10.1145/358438.349342
   Bojinov H., 2005, CCS, P420
   Choi Jong-Deok, 1991, P 18 ACM SIGPLANSIGA, P55, DOI DOI 10.1145/99583.99594
   Chow F., 1996, Compiler Construction. 6th International Conference, CC'96. Proceedings, P253
   Christensen AS, 2003, LECT NOTES COMPUT SC, V2694, P1
   CYTRON R, 1991, ACM T PROGR LANG SYS, V13, P451, DOI 10.1145/115372.115320
   DENNING DE, 1977, COMMUN ACM, V20, P504, DOI 10.1145/359636.359712
   erbnk P., 1997, J FUNCT PROGRAM, V7, P557, DOI DOI 10.1017/S0956796897002906
   FERRANTE J, 1987, ACM T PROGR LANG SYS, V9, P319, DOI 10.1145/24039.24041
   Foster JS, 2002, ACM SIGPLAN NOTICES, V37, P1, DOI 10.1145/543552.512531
   Hammer C., 2006, ISSSE, P1
   Hammer C., 2009, THESIS
   Hammer C, 2009, INT J INF SECUR, V8, P399, DOI 10.1007/s10207-009-0086-1
   Huang Y.-W., 2004, P 13 INT C WORLD WID, P40, DOI [10.1145/988672.988679, DOI 10.1145/988672.988679]
   Jovanovic N., 2006, PLAS 2006. Proceedings of the 2006 Programming Languages and Analysis for Security Workshop, P27, DOI 10.1145/1134744.1134751
   Jovanovic N, 2006, P IEEE S SECUR PRIV, P258, DOI 10.1109/SP.2006.29
   Lengauer T., 1979, ACM T PROGR LANG SYS, V1, P121, DOI 10.1145/357062.357071
   Myers AC, 2000, ACM T SOFTW ENG METH, V9, P410, DOI 10.1145/363516.363526
   PALSBERG J, 1995, INFORM COMPUT, V123, P198, DOI 10.1006/inco.1995.1168
   Pioli A., 1999, TECHNICAL REPORT, P99
   Pistoia M, 2005, LECT NOTES COMPUT SC, V3586, P362
   Reps T., 1995, Conference Record of POPL'95: 22nd ACM SIGPLAN-SIGACT Symposium Principles of Programming Languages, P49, DOI 10.1145/199448.199462
   RIMSA A, 2010, THESIS FEDERAL U MIN
   Rimsa A.A., 2010, SBLP, P1
   Sabelfeld A, 2003, IEEE J SEL AREA COMM, V21, P5, DOI 10.1109/JSAC.2002.806121
   Scott D, 2003, IEEE T KNOWL DATA EN, V15, P771, DOI 10.1109/TKDE.2003.1208998
   SINGER J, 2006, THESIS U CAMBRIDGE
   Smith G., 1998, Conference Record of POPL '98: 25th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P355, DOI 10.1145/268946.268975
   Sridharan M, 2007, ACM SIGPLAN NOTICES, V42, P112, DOI 10.1145/1273442.1250748
   Sridharan M, 2011, ACM SIGPLAN NOTICES, V46, P1053, DOI 10.1145/2076021.2048145
   Tripp O, 2009, ACM SIGPLAN NOTICES, V44, P87, DOI 10.1145/1543135.1542486
   Wassermann G, 2007, ACM SIGPLAN NOTICES, V42, P32, DOI 10.1145/1273442.1250739
   Weiser M., 1981, 5th International Conference on Software Engineering, P439
   Xie YC, 2006, USENIX Association Proceedings of the 15th USENIX Security Symposium, P179
NR 42
TC 5
Z9 6
U1 0
U2 7
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 1
PY 2014
VL 80
BP 91
EP 105
DI 10.1016/j.scico.2013.03.012
PN A
PG 15
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 292FG
UT WOS:000329887000007
OA hybrid
DA 2024-07-18
ER

PT J
AU Catala, A
   Pons, P
   Jaen, J
   Mocholi, JA
   Navarro, E
AF Catala, Alejandro
   Pons, Patricia
   Jaen, Javier
   Mocholi, Jose A.
   Navarro, Elena
TI A meta-model for dataflow-based rules in smart environments: Evaluating
   user comprehension and performance
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Ambient intelligence; Customization; Dataflow; Visual language; Rule;
   Event based; Non-expert programmer; Smart home
ID AMBIENT INTELLIGENCE; FRAMEWORK; LANGUAGES; SERVICES; CONTEXT
AB A considerable part of the behavior in smart environments relies on event-driven and rule specification. Rules are the mechanism most often used to enable user customization of the environment. However, the expressiveness of the rules available to users in editing and other tools is usually either limited or the available rule editing interfaces are not designed for end-users with low skills in programming. This means we have to look for interaction techniques and new ways to define user customization rules. This paper describes a generic and flexible meta-model to support expressive rules enhanced with data flow expressions that will graphically support the definition of rules without writing code. An empirical study was conducted on the ease of understanding of the visual data flow expressions, which are the key elements in our rule proposal. The visual dataflow language was compared to its corresponding textual version in terms of comprehension and ease of learning by teenagers in exercises involving calculations, modifications, writing and detecting equivalences in expressions in both languages. Although the subjects had some previous experience in editing mathematical expressions on spreadsheets, the study found their performance with visual dataflows to be significantly better in calculation and modification exercises. This makes our dataflow approach a promising mechanism for expressing user-customized reactive behavior in Ambient Intelligence (AmI) environments. The performance of the rule matching processor was validated by means of two stress tests to ensure that the meta-model approach adopted would be able to scale up with the number of types and instances in the space. (C) 2012 Elsevier B.V. All rights reserved.
C1 [Catala, Alejandro; Pons, Patricia; Jaen, Javier; Mocholi, Jose A.] Univ Politecn Valencia, Dept Sistemas Informat & Computac, Grp ISSI, Valencia 46022, Spain.
   [Navarro, Elena] Univ Castilla La Mancha, Dept Sistemas Informat, Grp LouiSE, Albacete 02071, Spain.
C3 Universitat Politecnica de Valencia; Universidad de Castilla-La Mancha
RP Catala, A (corresponding author), Univ Politecn Valencia, Dept Sistemas Informat & Computac, Grp ISSI, Camino Vera S-N, Valencia 46022, Spain.
EM acatala@dsic.upv.es; ppons@dsic.upv.es; fjaen@dsic.upv.es;
   jmocholi@dsic.upv.es; enavarro@dsi.uclm.es
RI Navarro, Elena/I-7452-2013; Pons, Patricia/AAA-1951-2020; Catala,
   Alejandro/ABE-6981-2021; Agues, Jose Antonio Mocholi/L-4076-2017
OI Navarro, Elena/0000-0001-9496-6890; Pons, Patricia/0000-0002-6407-4960;
   Catala, Alejandro/0000-0002-3677-672X; Jaen, Javier/0000-0002-8815-9643
FU Spanish Ministry of Education [TSI2010-20488]; Ministry of Education of
   Spain [AP2006-00181]
FX This work received financial support from the Spanish Ministry of
   Education under the National Strategic Program of Research and Project
   TSI2010-20488. Our thanks also go to the high school "Collegi Parroquial
   D. Jose Lluch - Alboraya", especially to the teachers and students that
   participated in the empirical study reported in this paper. A. Catala is
   supported by an FPU fellowship from the Ministry of Education of Spain
   with reference AP2006-00181.
CR Becker C, 2004, SECOND IEEE ANNUAL CONFERENCE ON PERVASIVE COMPUTING AND COMMUNICATIONS, PROCEEDINGS, P67, DOI 10.1109/PERCOM.2004.1276846
   Beckmann C., 2003, UBICOMP, V2003, P167
   Bonin D, 2011, ADV INTEL SOFT COMPU, V92, P213
   Bravo J, 2006, J UNIVERS COMPUT SCI, V12, P270
   Chen YW, 2011, EXPERT SYST APPL, V38, P12845, DOI 10.1016/j.eswa.2011.04.077
   Dey A.K., 2004, P SIGCHI C HUM FACT, P33, DOI DOI 10.1145/985692.985697
   Fuentes L, 2006, J UNIVERS COMPUT SCI, V12, P236
   Fuentes L, 2010, J UNIVERS COMPUT SCI, V16, P1592
   Gámez N, 2011, PERS UBIQUIT COMPUT, V15, P329, DOI 10.1007/s00779-010-0354-0
   García-Herranz M, 2010, J UNIVERS COMPUT SCI, V16, P1633
   Giner P, 2009, ADV SOFT COMP, V51, P1
   Good Judith, 2010, Proceedings 2010 IEEE Symposium on Visual Languages and Human-Centric Computing (VL/HCC 2010), P67, DOI 10.1109/VLHCC.2010.18
   Hervás R, 2010, J UNIVERS COMPUT SCI, V16, P1539
   Jaén J, 2011, APPL SOFT COMPUT, V11, P111, DOI 10.1016/j.asoc.2009.11.002
   Jouault F, 2008, SCI COMPUT PROGRAM, V72, P31, DOI 10.1016/j.scico.2007.08.002
   Kelleher C, 2005, ACM COMPUT SURV, V37, P83, DOI 10.1145/1089733.1089734
   Krathwohl D., 2000, TAXONOMY LEARNING TE
   Kurtev I., 2002, INT FED C DOA ODBASE
   Lézoray JB, 2011, PERS UBIQUIT COMPUT, V15, P353, DOI 10.1007/s00779-010-0356-y
   Li Yang, 2004, P 17 ANN ACM S USER, P217
   López-de-Ipiña D, 2006, J UNIVERS COMPUT SCI, V12, P297
   Lopez-de-Ipina D., 2001, IEEE DISTRIBUTED SYS, V2, P7
   Norman D.A., 1999, INVISIBLE COMPUTER
   Pane JF, 2001, INT J HUM-COMPUT ST, V54, P237, DOI 10.1006/ijhc.2000.0410
   Picón A, 2012, EXPERT SYST APPL, V39, P647, DOI 10.1016/j.eswa.2011.07.056
   Pons P., 2011, ACT JORN ING SOFTW B, P989
   Remagnino P, 2005, IEEE T SYST MAN CY A, V35, P1, DOI 10.1109/TSMCA.2004.838456
   Rodríguez M, 2011, APPL SOFT COMPUT, V11, P733, DOI 10.1016/j.asoc.2009.12.035
   Shadbolt N, 2003, IEEE INTELL SYST, V18, P2, DOI 10.1109/MIS.2003.1200718
   Sohn T., 2003, EXTENDED ABSTRACTS 2, P974
   Uhm Y, 2011, EXPERT SYST APPL, V38, P13291, DOI 10.1016/j.eswa.2011.04.150
   Uribarren A, 2008, SASOW 2008: SECOND IEEE INTERNATIONAL CONFERENCE ON SELF-ADAPTIVE AND SELF-ORGANIZING SYSTEMS WORKSHOPS, PROCEEDINGS, P162, DOI 10.1109/SASOW.2008.36
   Uribarren A., 2006, P INTERSENSE 06 ACM
   van Kasteren T, 2008, PROCEEDINGS OF THE 10TH INTERNATIONAL CONFERENCE ON UBIQUITOUS COMPUTING (UBICOMP 2008), P1, DOI 10.1145/1409635.1409637
   Weis T, 2007, IEEE PERVAS COMPUT, V6, P76, DOI 10.1109/MPRV.2007.41
   Weis T, 2006, PERCOM 2006: FOURTH ANNUAL IEEE INTERNATIONAL CONFERENCE ON PERVASIVE COMPUTING AND COMMUNICATIONS, PROCEEDINGS, P239
   WEISER M, 1991, SCI AM, V265, P94, DOI 10.1038/scientificamerican0991-94
   Whitley KN, 2006, INT J HUM-COMPUT ST, V64, P281, DOI 10.1016/j.ijhcs.2005.06.005
   Wing JM, 2006, COMMUN ACM, V49, P33, DOI 10.1145/1118178.1118215
   Yang J, 2011, J COMPUT SCI TECH-CH, V26, P239, DOI 10.1007/s11390-011-9430-9
   Zhang T., 2004, 2 INT C SMART HOM HL
NR 41
TC 4
Z9 4
U1 0
U2 15
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 1
PY 2013
VL 78
IS 10
BP 1930
EP 1950
DI 10.1016/j.scico.2012.06.010
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 200RJ
UT WOS:000323086300011
DA 2024-07-18
ER

PT J
AU Atoofian, E
   Baniasadi, A
   Coady, Y
AF Atoofian, Ehsan
   Baniasadi, Amirali
   Coady, Yvonne
TI ARV-ALA: Improving performance of software transactional memory through
   adaptive read and write policies
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Transactional memory; Read validation; Lock acquisition; Time-based
   transactional memory
AB Software transactional memory (STM) is a promising paradigm which simplifies concurrent programming for chip multiprocessors. Although the implementations of STMs are simple and efficient, they display inconsistent performance: different design decisions lead to systems performing best under different circumstances, often by a large margin.
   In this paper, we investigate transactional read and write policies in time-based STMs. Existing transactional read and write policies follow a static approach and use one policy across all applications. However, no single universal policy offers optimal performance across all applications. We propose adaptive read validation (ARV) and adaptive lock acquisition (ALA) policies for time-based STMs. Our solutions adjust transactional read and write policies dynamically and according to workloads' behavior. ARV and ALA are history-based techniques and exploit transaction's behavior in the past to adjust transactional read and write policies in the future. ARV and ALA not only vary read validation and lock acquisition policies across applications, but also adjust the two policies across different phases of an application. ARV and ALA are simple to implement, require no application-specific information, and are transparent to programmers. We evaluate our adaptive techniques using Stamp v0.9.10 benchmark suite. The evaluation reveals that ARV and ALA are highly effective and improve performance significantly. Crown Copyright (C) 2012 Published by Elsevier B.V. All rights reserved.
C1 [Atoofian, Ehsan] Lakehead Univ, Dept Elect Engn, Thunder Bay, ON P7B 5E1, Canada.
   [Baniasadi, Amirali] Univ Victoria, Dept Elect & Comp Engn, Victoria, BC, Canada.
   [Coady, Yvonne] Univ Victoria, Dept Comp Sci, Victoria, BC, Canada.
C3 Lakehead University; University of Victoria; University of Victoria
RP Atoofian, E (corresponding author), Lakehead Univ, Dept Elect Engn, Thunder Bay, ON P7B 5E1, Canada.
EM eatoofia@lakeheadu.ca; amirali@ece.uvic.ca; ycoady@cs.uvic.ca
FU Natural Sciences and Engineering Research Council of Canada; Lakehead
   University
FX This work was supported by the Natural Sciences and Engineering Research
   Council of Canada and Lakehead University Start-up Fund.
CR Ansari Mohammad, 2008, P 13 ACM SIGPLAN S P
   Blundell C, 2007, CONF PROC INT SYMP C, P24, DOI 10.1145/1273440.1250667
   Bobba J, 2008, CONF PROC INT SYMP C, P127, DOI 10.1109/ISCA.2008.24
   Chi Cao Minh, P INT S COMP ARCH JU
   Culler D., 1998, Parallel Computer Architecture: A Hardware/software Approach
   Damron P, 2006, P 12 INT C ARCH SUPP
   Dice D, 2006, LECT NOTES COMPUT SC, V4167, P194
   Fraser K., 2004, UCAM-CL-TR-579
   Harris T, 2003, ACM SIGPLAN NOTICES, V38, P388, DOI 10.1145/949343.949340
   Herlihy M, 2003, P 22 ANN S PRINCIPLE, P92
   Herlihy M., 1993, P 20 ANN INT S COMP
   HERLIHY MP, 1990, ACM T PROGR LANG SYS, V12, P463, DOI 10.1145/78969.78972
   Lipasti MH, 1996, ACM SIGPLAN NOTICES, V31, P138, DOI 10.1145/248209.237173
   MARATHE V, 2005, P 19 INT S DISTR COM
   Marathe V.J, 2004, P 7 WORKSH LANG COMP
   Marathe VirendraJ., 2006, 1 ACM SIGPLAN WORKSH
   Riegel T., 2006, 1 ACM SIGPLAN WORKSH
   Saha B., 2006, Proceedings of the 2006 ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming PPoPP'06, P187, DOI 10.1145/1122971.1123001
   Shavit N., 1995, Proceedings of the Fourteenth Annual ACM Symposium on Principles of Distributed Computing, P204, DOI 10.1145/224964.224987
   SPEAR M, 2006, P 20 INT S DISTR COM
   Stone J. M., 1993, IEEE Parallel & Distributed Technology: Systems & Applications, V1, P58, DOI 10.1109/88.260295
   YEH TY, 1992, P 19 ANN INT S COMP
   Yoo RM, 2008, SPAA'08: PROCEEDINGS OF THE TWENTIETH ANNUAL SYMPOSIUM ON PARALLELISM IN ALGORITHMS AND ARCHITECTURES, P169
NR 23
TC 0
Z9 0
U1 0
U2 5
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 1
PY 2013
VL 78
IS 9
BP 1559
EP 1571
DI 10.1016/j.scico.2012.11.007
PG 13
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 179QJ
UT WOS:000321536100018
OA hybrid
DA 2024-07-18
ER

PT J
AU Martínez, M
   Pardo, A
AF Martinez, Monica
   Pardo, Alberto
TI A shortcut fusion approach to accumulations
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT Annual Brazilian Symposium on Programming Languages (SBLP)
CY AUG 19-21, 2009
CL Gramado, BRAZIL
SP Catholic Univ Pelotas (UCPel), Comp Dept, Brazilian Comp Soc, CAPES, CNPq, Microsoft, Govt State Rio Grande do Sul
DE Shortcut fusion; Accumulations; Functional programming
AB In functional programming it is common to write programs as compositions of other simpler functions. This makes it possible to take advantage of the well-known benefits of modular programming. However, in many cases, the resulting programs have efficiency problems caused by the generation of data structures that are solely used for communication between the functions that take part in the compositions. Many of those intermediate structures can be eliminated by an appropriate combination of the codes of the involved functions using a technique called program fusion. In this work, we propose a program fusion technique for accumulations, which are recursive functions that use additional parameters, called accumulators, for keeping intermediate results. Accumulations are known to be difficult to be fused because of the presence of the accumulators and the fact that results are usually computed in those parameters. Our technique is based on a shortcut fusion approach which turns out to be effective in the case of accumulations. We present benchmarks that illustrate the impact of shortcut fusion on accumulations. (C) 2012 Elsevier B.V. All rights reserved.
C1 [Martinez, Monica; Pardo, Alberto] Univ Republica, Fac Ingn, Inst Computac, Montevideo, Uruguay.
C3 Universidad de la Republica, Uruguay
RP Pardo, A (corresponding author), Univ Republica, Fac Ingn, Inst Computac, Montevideo, Uruguay.
EM mmartine@fing.edu.uy; pardo@fing.edu.uy
CR [Anonymous], 1994, Handbook of logic in computer science
   Bird R., 1998, INTRO FUNCTIONAL PRO, V2nd
   BURSTALL RM, 1977, J ACM, V24, P44, DOI 10.1145/321992.321996
   Chitil O, 1999, ACM SIGPLAN NOTICES, V34, P249, DOI 10.1145/317765.317907
   Chitil O., 2000, THESIS RWTH AACHEN
   Gibbons J, 2002, LECT NOTES COMPUT SC, V2297, P149
   Gibbons J, 2000, SCI COMPUT PROGRAM, V37, P37, DOI 10.1016/S0167-6423(99)00022-2
   Gill A., 1993, P C FUNCT PROGR LANG, P223, DOI DOI 10.1145/165180.165214
   Hu ZJ, 1999, NEW GENERAT COMPUT, V17, P153, DOI 10.1007/BF03037434
   Johann P, 2004, ACM SIGPLAN NOTICES, V39, P99, DOI 10.1145/982962.964010
   Jones S.P., J FUNCTIONAL PROGRAM, V13
   Katsumata SY, 2008, J FUNCT PROGRAM, V18, P781, DOI 10.1017/S095679680800693X
   Launchbury J., 1995, Conference Record of FPCA '95. SIGPLAN-SIGARCH-WG2.8. Conference on Functional Programming Languages and Computer Architecture, P314, DOI 10.1145/224164.224223
   NISHIMURA S, 2004, P 2004 ACM SIGPLAN S, P101
   Ohori A, 2007, ACM SIGPLAN NOTICES, V42, P143, DOI 10.1145/1190215.1190241
   Pardo A, 2003, INT FED INFO PROC, V115, P49
   Runciman C., 1996, Advanced Functional Programming. Second International School. Tutorial Text, P159
   Svenningsson J, 2002, ACM SIGPLAN NOTICES, V37, P124, DOI 10.1145/583852.581491
   Takano A., 1995, INT C FUNCT PROGR LA, P306
   Voigtlander J., 2004, Higher-Order and Symbolic Computation, V17, P129, DOI 10.1023/B:LISP.0000029450.36668.cb
   Voigtländer J, 2004, J FUNCT PROGRAM, V14, P317, DOI 10.1017/S0956796803004933
   WADLER P, 1989, INT C FUNCT PROGR CO, P347
NR 22
TC 1
Z9 2
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD AUG 1
PY 2013
VL 78
IS 8
BP 1121
EP 1136
DI 10.1016/j.scico.2012.09.002
PG 16
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 168XV
UT WOS:000320742200010
DA 2024-07-18
ER

PT J
AU Würthinger, T
   Wimmer, C
   Stadler, L
AF Wuerthinger, Thomas
   Wimmer, Christian
   Stadler, Lukas
TI Unrestricted and safe dynamic code evolution for Java
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Java; Virtual machine; Class hierarchy; Run-time evolution; Dynamic
   software updating; Safe dynamic updates
ID PROGRAM
AB Dynamic code evolution is a technique to update a program while it is running. In an object-oriented language such as Java, this can be seen as replacing a set of classes by new versions. We modified an existing high-performance virtual machine to allow arbitrary changes to the definition of loaded classes. Besides adding and deleting fields and methods, we also allow any kind of changes to the class and interface hierarchy. Our approach focuses on increasing developer productivity during debugging, but can also be applied for updating of long-running applications. Changes can be applied at any point at which a Java program can be suspended.
   Our virtual machine is able to continue execution of old changed or deleted methods and also to access deleted static fields. A dynamic verification of the current state of the program ensures type safety of complex class hierarchy changes. However, the programmer still has to ensure that the semantics of the modified program are correct and that the new program version can start running from the state left behind by the old program version.
   The evaluation section shows that our modifications to the virtual machine have no negative performance impact on normal program execution. The in-place instance update algorithm is in many cases faster than a full garbage collection. Standard Java development environments automatically use the code evolution features of our modified virtual machine, so no additional tools are required. (C) 2011 Elsevier B.V. All rights reserved.
C1 [Wuerthinger, Thomas; Stadler, Lukas] Johannes Kepler Univ Linz, Christian Doppler Lab Automated Software Engn, Inst Syst Software, Linz, Austria.
   [Wimmer, Christian] Univ Calif Irvine, Dept Comp Sci, Irvine, CA USA.
C3 Johannes Kepler University Linz; University of California System;
   University of California Irvine
RP Würthinger, T (corresponding author), Johannes Kepler Univ Linz, Christian Doppler Lab Automated Software Engn, Inst Syst Software, Linz, Austria.
EM wuerthinger@ssw.jku.at; cwimmer@uci.edu; stadler@ssw.jku.at
FU Oracle
FX This work was supported by Oracle.
CR Andersson J., 2000, WORKSH SOFTW ENG WEA
   [Anonymous], P WORKSH ENG COMPL O
   Atkinson M., 1996, P ECOOP WORKSH OBJ O
   Bialek R, 2004, 24TH INTERNATIONAL CONFERENCE ON DISTRIBUTED COMPUTING SYSTEMS WORKSHOPS, PROCEEDINGS, P326, DOI 10.1109/ICDCSW.2004.1284050
   Bierman G., 2003, P INT WORKSH UN SOFT
   Blackburn SM, 2006, ACM SIGPLAN NOTICES, V41, P169, DOI 10.1145/1167515.1167488
   CASAIS E, 1995, OBJECT ORIENTED SOFT, P201
   Chiba S., 2003, P WORKSH ADV STAT OF
   CLAMEN SM, 1992, CMUCS92133
   COOK RP, 1983, SIGPLAN NOTICES, V18, P201, DOI 10.1145/1006142.1006188
   Dmitriev M., 1999, 1st ECOOP Workshop on ObjectOriented Databases, P25
   DMITRIEV M, 2001, THESIS U GLASGOW
   Duggan D, 2001, ACM SIGPLAN NOTICES, V36, P62, DOI 10.1145/507669.507645
   Ebraert P., 2006, P INT ERCIM WORKSH S
   Ebraert P., 2005, P RAM SE 05 ECOOP 05, P41
   Fabry R. S., 1976, 2nd International Conference on Software Engineering, P470
   FRIEDER O, 1991, J SYST SOFTWARE, V14, P111, DOI 10.1016/0164-1212(91)90096-O
   Gabriel RichardP., 1991, COMMUN ACM, V34, P29
   Gosling J., 2005, Java Language Specification, Vthird
   Gregersen A. R., 2009, P WORKSH AOP MET SOF, P1
   Gupta D., 1993, Digest of Papers FTCS-23 The Twenty-Third International Symposium on Fault-Tolerant Computing, P30, DOI 10.1109/FTCS.1993.627305
   GUPTA D, 1993, SOFTWARE PRACT EXPER, V23, P949, DOI 10.1002/spe.4380230903
   Gupta D, 1996, IEEE T SOFTWARE ENG, V22, P120, DOI 10.1109/32.485222
   Gustavsson J., 2004, P INT WORKSH UN SOFT
   Gustavsson J., 2003, P INT C SOFTW MAINT
   Hicks M, 2005, ACM T PROGR LANG SYS, V27, P1049, DOI 10.1145/381694.378798
   Hjalmtysson G, 1998, PROCEEDINGS OF THE USENIX 1998 ANNUAL TECHNICAL CONFERENCE, P65
   HOLZLE U, 1992, SIGPLAN NOTICES, V27, P32, DOI 10.1145/143103.143114
   Jones R.E., 1996, Garbage Collection: Algorithms for Automatic Dynamic Memory Management
   Ketfi A., 2002, Proceedings ASE 2002. 17th IEEE International Conference on Automated Software Engineering, DOI 10.1109/ASE.2002.1115042
   Kotzmann T, 2008, ACM T ARCHIT CODE OP, V5, DOI 10.1145/1369396.1370017
   KRAMER J, 1990, IEEE T SOFTWARE ENG, V16, P1293, DOI 10.1109/32.60317
   Kramer J, 1998, FOURTH INTERNATIONAL CONFERENCE ON CONFIGURABLE DISTRIBUTED SYSTEMS, PROCEEDINGS, P91, DOI 10.1109/CDS.1998.675762
   Lindholm Tim., 1999, JAVA VIRTUAL MACHINE, V2nd
   Malabarba S, 2000, LECT NOTES COMPUT SC, V1850, P337
   NEAMTIU I, 2006, P ACM SIGPLAN C PROG
   Oracle Corporation, 2011, JAV DEB WIR PROT JDW
   Oracle Corporation, 2011, TOP 25 RFES REQ ENH
   Oracle Corporation, 2011, DA VINC MACH PROJ
   Oracle Corporation, 2011, OPENJDK
   Orso A, 2002, PROC IEEE INT CONF S, P649, DOI 10.1109/ICSM.2002.1167829
   Paleczny M, 2001, USENIX ASSOCIATION PROCEEDINGS JAVA(TM) VIRTUAL MACHINE RESEARCH AND TECHNOLOGY SYMPOSIUM, P1
   Pukall M., 2007, P WORKSH REFL AOP ME
   Pukall M, 2008, ASIA PAC SOFWR ENG, P85, DOI 10.1109/APSEC.2008.66
   Redmond B, 2002, LECT NOTES COMPUT SC, V2374, P205
   SEGAL ME, 1993, IEEE SOFTWARE, V10, P53, DOI 10.1109/52.199735
   Steele Jr Guy L., 1990, COMMON LISP LANGUAGE
   Stoyle G, 2007, ACM T PROGR LANG SYS, V29, DOI 10.1145/1255450.1255455
   Subramanian S, 2009, ACM SIGPLAN NOTICES, V44, P1, DOI 10.1145/1543135.1542478
   UNGAR D, 1984, SIGPLAN NOTICES, V19, P157
   Vandewoude Y, 2006, PROC IEEE INT CONF S, P73
   Villazón A, 2010, ACM SIGPLAN NOTICES, V45, P95, DOI 10.1145/1837852.1621622
   Wurthinger T., 2010, P INT C GEN PROGR CO, P123, DOI DOI 10.1145/1868294.1868312
   Wurthinger T., 2010, P WORKSH REFL AOP ME, p[5, 1], DOI [10.1145/1890683.1890688, DOI 10.1145/1890683.1890688]
   Wurthinger Thomas., 2010, P 8 INT C PRINC PRAC, P10, DOI [DOI 10.1145/1852761.1852764, 10.1145/1852761.1852764]
NR 55
TC 13
Z9 13
U1 0
U2 12
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAY 1
PY 2013
VL 78
IS 5
BP 481
EP 498
DI 10.1016/j.scico.2011.06.005
PG 18
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 125MS
UT WOS:000317544500005
OA hybrid
DA 2024-07-18
ER

PT J
AU Duque, R
   Rodríguez, ML
   Hurtado, MV
   Bravo, C
   Rodríguez-Domínguez, C
AF Duque, Rafael
   Luisa Rodriguez, Maria
   Visitacion Hurtado, Maria
   Bravo, Crescencio
   Rodriguez-Dominguez, Carlos
TI Integration of collaboration and interaction analysis mechanisms in a
   concern-based architecture for groupware systems
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Collaboration and interaction analysis; CSCW; Groupware; Software
   architectures
ID AD-HOC; MODELS
AB Collaboration and interaction analysis allows for the characterization and study of the collaborative work performed by the users of a groupware system. The results of the analyzed processes allow problems in users' collaborative work and shortcomings in the functionalities of the groupware system to be identified. Therefore, automating collaboration and interaction analysis enables users' work to be assessed and groupware system support and behavior to be improved. This article proposes a concern-based architecture to be used by groupware developers as a guide to the integration of analysis subsystems into groupware systems. This architecture was followed to design the COLLECE groupware system, which supports collaborative programming practices and integrates an analysis subsystem that assesses different aspects of the work carried out by the programmers and adapts the functionality of the system under specific conditions. (C) 2010 Elsevier B.V. All rights reserved.
C1 [Duque, Rafael; Bravo, Crescencio] Univ Castilla La Mancha, Dept Tecnol & Sistemas Informac, E-13071 Ciudad Real, Spain.
   [Luisa Rodriguez, Maria; Visitacion Hurtado, Maria; Rodriguez-Dominguez, Carlos] Univ Granada, Dept Lenguajes & Sistemas Informat, ETSIIT, E-18071 Granada, Spain.
C3 Universidad de Castilla-La Mancha; University of Granada
RP Duque, R (corresponding author), Univ Castilla La Mancha, Dept Tecnol & Sistemas Informac, EST Paseo Univ 4, E-13071 Ciudad Real, Spain.
EM Rafael.Duque@uclm.es; mlra@ugr.es; mhurtado@ugr.es;
   Crescencio.Bravo@uclm.es; carlosrodriguez@ugr.es
RI Hurtado Torres, Maria Visitacion/C-2398-2012; Duque,
   Rafael/IUN-2429-2023; Duque, Rafael/AAF-6005-2020; Duque,
   Rafael/I-4015-2013; Domínguez, Carlos Rodríguez/N-1220-2014; Rodriguez
   Almendros, Maria Luisa/C-7430-2012; Bravo Santos, Crescencio/S-3921-2018
OI Hurtado Torres, Maria Visitacion/0000-0001-6345-6062; Duque,
   Rafael/0000-0001-8636-3213; Domínguez, Carlos
   Rodríguez/0000-0001-5626-3115; Rodriguez Almendros, Maria
   Luisa/0000-0002-7648-6380; Bravo Santos, Crescencio/0000-0003-4380-1193
FU Spanish MCYT [TIN2007-60199, TIN2008-05995/TSI]; Junta de Comunidades de
   Castilla - La Mancha (Spain), Consejeria de Educacion y Ciencia
   [PAC07-0020-5702, PCI08-0069-7887]
FX This research has been partially supported by R + D projects of the
   Spanish MCYT under projects TIN2007-60199 and TIN2008-05995/TSI. This
   research has been partially supported by the Junta de Comunidades de
   Castilla - La Mancha (Spain), Consejeria de Educacion y Ciencia, under
   Projects PAC07-0020-5702 and PCI08-0069-7887.
CR [Anonymous], P COMP SUPP COLL LEA
   [Anonymous], 2007, 42010 ISOIEC
   [Anonymous], 610121990 IEEE
   BEAUDOUINLAFON M, 1999, TRENDS SOFTWARE, V7
   BILLESKOV K, 2004, SCANDINAVIAN J INFOR, V16, P145
   Bratitsis T, 2006, LECT NOTES COMPUT SC, V4154, P54
   Bravo C, 2006, HCI RELATED PAPERS OF INTERACCION 2004, P289, DOI 10.1007/1-4020-4205-1_24
   Bravo C, 2008, INT J HUM-COMPUT ST, V66, P812, DOI 10.1016/j.ijhcs.2008.08.003
   Cheng L.-T., 2003, P 2003 OOPSLA WORKSH, P45, DOI [10.1145/965660.965670, DOI 10.1145/965660.965670]
   CLEMENTS LB, 1999, 4 PRODUCT LINE PRACT
   COOK C, 2005, P ACSC2005 28 AUSTR, P267
   DEWAN P, 1999, COMPUTER SUPPORTED C
   Dumas M, 2005, PROCESS-AWARE INFORMATION SYSTEMS: BRIDGING PEOPLE AND SOFTWARE THROUGH PROCESS TECHNOLOGY, P3
   Duque R, 2009, INT J EMERG TECHNOL, V4, P53, DOI 10.3991/ijet.v4s1.736
   DUQUE R, 2008, P 3 INT C SOFTW ENG, P270
   DUQUE R, 2010, THESIS U CASTILLA LA
   Duque R, 2008, J UNIVERS COMPUT SCI, V14, P1463
   Dustdar S, 2004, DISTRIB PARALLEL DAT, V15, P45, DOI 10.1023/B:DAPD.0000009431.20250.56
   ELLIS CA, 1991, COMMUN ACM, V34, P38
   Gaaloul W, 2005, 2005 SYMPOSIUM ON APPLICATIONS AND THE INTERNET WORKSHOPS, PROCEEDINGS, P226, DOI 10.1109/SAINTW.2005.1620017
   GARRIDO JL, 2005, REQUIREMENTS ENG SOC, P226
   Garrido JL, 2007, SCI COMPUT PROGRAM, V66, P25, DOI 10.1016/j.scico.2006.10.008
   GEYER L, 2002, LNCS, V2379, P1
   Grudin J., 1988, P 1988 ACM C COMP SU, P85, DOI DOI 10.1145/62266.62273
   HALVERSON CA, 2004, P ACM C COMP SUPP CO, P304
   Hammori M, 2006, DATA KNOWL ENG, V56, P41, DOI 10.1016/j.datak.2005.02.006
   HARRER A, 2008, LECT NOTES COMPUTER, V5091, P715
   HRUBY P, 1999, P 1 WORKSH MULT SEP, V1, P1
   *JAZZ FDN, 2009, JAZZ INT ARCH
   Johansen R., 1991, LEADING BUSINESS TEA
   KAZMAN R, 1994, PROC INT CONF SOFTW, P81, DOI 10.1109/ICSE.1994.296768
   Komlodi A, 2008, INTERACT COMPUT, V20, P184, DOI 10.1016/j.intcom.2007.10.003
   Laurillau Y., 2002, P ACM C COMPUTER SUP, P236
   MARJANOVIC O, 2007, P IEEE INT COLLABORA, P12
   MARTINEZMONES A, 2008, P 8 IEEE INT C ADV L, P539
   MAY N, 2005, P 6 AUSTR WORKSH SOF, P13
   Muhlenbrock M., 1998, INT J ARTIFICIAL INT, V9, P256
   Neyem A, 2008, J UNIVERS COMPUT SCI, V14, P88
   Phillips W.Greg., 1999, Architectures for synchronous groupware
   PHILLIPS WG, 2005, LECT NOTES COMPUTER, P137
   Redondo M. A., 2002, Adaptive Hypermedia and Adaptive Web-Based Systems. Second International Conference, AH 2002. Proceedings (Lecture Notes in Computer Science Vol.2347), P560
   Roseman M., 1996, ACM T COMPUT-HUM INT, V3, P66, DOI DOI 10.1145/226159.226162
   Slagter R, 2001, CRIWG 2001: SEVENTH INTERNATIONAL WORKSHOP ON GROUPWARE, PROCEEDINGS, P68, DOI 10.1109/CRIWG.2001.951771
   Soller A., 2005, INT J ARTIFICIAL INT, V15, P261
   SOUSA G, 2004, P COMP AID DES US IN, V1, P1
   *SUN MICR, 2009, JAV SHAR DAT TOOLK
   Torres D, 2007, LECT NOTES COMPUT SC, V4715, P143, DOI 10.1007/978-3-540-74812-0_11
   van der Aalst W, 2004, IEEE T KNOWL DATA EN, V16, P1128, DOI 10.1109/TKDE.2004.47
   van der Aalst WMP, 2003, DATA KNOWL ENG, V47, P237, DOI 10.1016/S0169-023X(03)00066-1
   Vergidis K, 2008, IEEE T SYST MAN CY C, V38, P69, DOI 10.1109/TSMCC.2007.905812
   Wu J, 2008, LECT NOTES COMPUT SC, V4940, P339
NR 51
TC 13
Z9 14
U1 0
U2 16
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 1
PY 2012
VL 77
IS 1
SI SI
BP 29
EP 45
DI 10.1016/j.scico.2010.05.003
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 834JQ
UT WOS:000295956000003
OA Bronze
DA 2024-07-18
ER

PT J
AU Schellhorn, G
AF Schellhorn, Gerhard
TI Completeness of fair ASM refinement
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 13th Refinement Workshop
CY MAY 27, 2008
CL Turku, FINLAND
SP British Comp Soc (BCS)
DE Refinement; Completeness; Abstract state machines; IO automata;
   Abadi-Lamport; Fairness
ID LOGICAL OPERATIONAL SEMANTICS; SIMULATIONS
AB ASM refinements are verified using generalized forward simulations which allow us to refine m abstract operations to n concrete operations with arbitrary m and n. One main difference from data refinement is that ASM refinement considers infinite runs and termination. Since backward simulation does not preserve termination in general, the standard technique of adding history information to the concrete level is not applicable to get a completeness proof. The power set construction also adds infinite runs and is therefore not applicable either. This paper shows that a completeness proof is nevertheless possible by adding infinite prophecy information, effectively moving nondeterminism to the initial state. Adding such prophecy information can be done not only on the semantic level, but also by a simple syntactic transformation that removes the choose construct of ASMs. The completeness proof is also translated to a completeness proof for IO automata. Finally, the proof is extended to deal with supplementary predicates, that specify fairness and liveness assumptions, by transferring a related result of Wim Hesselink for refinements that use the Abadi-Lamport setting. (C) 2009 Elsevier B.V. All rights reserved.
C1 Univ Augsburg, Lehrstuhl Softwaretech & Programmiersprachen, D-86135 Augsburg, Germany.
C3 University of Augsburg
RP Schellhorn, G (corresponding author), Univ Augsburg, Lehrstuhl Softwaretech & Programmiersprachen, D-86135 Augsburg, Germany.
EM schellhorn@informatik.uni-augsburg.de
CR ABADI M, 1991, THEOR COMPUT SCI, V82, P253, DOI 10.1016/0304-3975(91)90224-P
   ABRIAL JR, 2006, FUNDAMENTA INFORM, V21
   Back RJR, 1994, LECT NOTES COMPUT SC, V836, P367
   BALSER M, 2005, THESIS U AUGSBURG AU
   BALSER M, 2008, P 7 INT WORKSH IMPL
   BAUMLER S, 2008, CEUR WORKSH P, V372
   Bolton C., 1999, IFM'99. Proceedings of the 1st International Conference on Integrated Formal Methods, P273
   Borger E., 2003, Formal Aspects of Computing, V15, P237, DOI 10.1007/s00165-003-0012-7
   BORGER E, 1990, LECT NOTES COMPUT SC, V452, P1
   Borger E., 1995, LOGIC PROGRAMMING FO, P20
   BORGER E, 1990, LNCS, V440, P36
   Borger E., 2003, ABSTRACT STATE MACHI
   deBakker J., 1980, INT SERIES COMPUTER
   DEROEVER WP, 1998, CAMBRIDGE TRACTS THE, V47
   Derrick J, 2003, LECT NOTES COMPUT SC, V2651, P127
   DERRICK J, 2001, FDN ADV APPL
   DERRICK J, 1997, LECT NOTES COMPUTER, V1212, P369
   DIJKSTRA EW, 1976, DISCIPLINE PROGRAMMI, pCH14
   Griffioen D, 1998, LECT NOTES COMPUT SC, V1427, P332, DOI 10.1007/BFb0028756
   Gurevich Yuri., 1995, Speci fication and Validation Methods
   HAREL D, 2000, FOUNDAT COMPUT, P3
   Hesselink W. H., 2005, ACM Transactions on Computational Logic, V6, P175, DOI 10.1145/1042038.1042044
   Hesselink WH, 2006, ACTA INFORM, V42, P583, DOI 10.1007/s00236-006-0007-y
   Hesselink WH, 2002, LECT NOTES COMPUT SC, V2386, P117
   HESSELINK WH, 1992, CAMBRIDGE TRACTS THE, V27
   Hesselink WH, 2008, INFORM COMPUT, V206, P108, DOI 10.1016/j.ic.2007.10.003
   JONSSON B, 1991, LNCS, V527, P346
   LYNCH N, 1995, INFORM COMPUT, V121, P214, DOI 10.1006/inco.1995.1134
   Maddux RD, 1996, THEOR COMPUT SCI, V160, P1, DOI 10.1016/0304-3975(95)00082-8
   Nipkow T, 2002, LECT NOTES COMPUT SC, V2471, P103
   Reif W, 1998, APPL LOG SER, V9, P13
   Schellhorn G, 2005, THEOR COMPUT SCI, V336, P403, DOI 10.1016/j.tcs.2004.11.013
   Schellhorn G, 2001, J UNIVERS COMPUT SCI, V7, P952
   Schellhorn G, 1998, APPL LOG SER, V10, P165
   SCHELLHORN G, 2008, LNCS, V5115
   SCHELLHORN G, 1999, THESIS U ULM FACULTA
   Schellhorn G., 1997, J UNIVERS COMPUT SCI, V3, P377
   Schellhorn G, 2008, J UNIVERS COMPUT SCI, V14, P1929
   SISTLA AP, 1991, INFORM PROCESS LETT, V39, P45, DOI 10.1016/0020-0190(91)90061-L
   SMYTH MB, 1978, J COMPUT SYST SCI, V16, P23, DOI 10.1016/0022-0000(78)90048-X
   Spivey J.M., 1992, PRENTICE HALL INT SE
   Stärk RF, 2001, J UNIVERS COMPUT SCI, V7, P980
   Woodcock J., 1996, PRENTICE HALL INT SE
NR 43
TC 5
Z9 5
U1 1
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 1
PY 2011
VL 76
IS 9
SI SI
BP 756
EP 773
DI 10.1016/j.scico.2009.10.004
PG 18
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 765IY
UT WOS:000290700100003
DA 2024-07-18
ER

PT J
AU Andova, S
   Groenewegen, LPJ
   de Vink, EP
AF Andova, S.
   Groenewegen, L. P. J.
   de Vink, E. P.
TI Dynamic consistency in process algebra: From Paradigm to ACP
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Branching bisimulation; Collaboration; Dynamic consistency; Dynamic
   constraint; Paradigm; Process algebra; Verification
ID COORDINATION; MODELS
AB The coordination modelling language Paradigm addresses collaboration between components in terms of dynamic constraints. Within a Paradigm model, component dynamics are consistently specified at various levels of abstraction. The operational semantics of Paradigm is given. For a large, general subclass of Paradigm models a translation into process algebra is provided. Once expressed in process algebra, relying on a correctness result, Paradigm models are amenable to process algebraic reasoning and to verification via the mCRL2 toolset. Examples of a scheduling problem illustrate the approach. (C) 2010 Elsevier B.V. All rights reserved.
C1 [Andova, S.; de Vink, E. P.] Eindhoven Univ Technol, Dept Math & Comp Sci, Formal Methods Grp, Eindhoven, Netherlands.
   [Groenewegen, L. P. J.] Leiden Univ, FaST Grp, Leiden Inst Adv Comp Sci, NL-2300 RA Leiden, Netherlands.
C3 Eindhoven University of Technology; Leiden University; Leiden University
   - Excl LUMC
RP Andova, S (corresponding author), Eindhoven Univ Technol, Dept Math & Comp Sci, Formal Methods Grp, Eindhoven, Netherlands.
EM s.andova@tue.nl
CR Allen R., 1997, ACM Transactions on Software Engineering and Methodology, V6, P213, DOI 10.1145/258077.258078
   Andova S, 2009, ELECTRON NOTES THEOR, V255, P23, DOI 10.1016/j.entcs.2009.10.023
   ANDOVA S, 2008, P BENEVOL 2008, P18
   Andova S, 2009, LECT NOTES COMPUT SC, V5835, P255, DOI 10.1007/978-3-642-10248-6_11
   [Anonymous], 2001, Specification and Development of Interactive Systems: FOCUS on Streams, Interfaces, and Refinement
   [Anonymous], 2001, HDB PROCESS ALGEBRA, DOI DOI 10.1016/B978-044482830-9/50019-9
   [Anonymous], 1985, EATCS Monographs on Theoretical Computer Science
   [Anonymous], 2000, Introduction to Process Algebra
   Arbab F, 2004, MATH STRUCT COMP SCI, V14, P329, DOI 10.1017/S0960129504004153
   ARBAB F, 1996, LECT NOTES COMPUT SC, V1061, P34
   Baeten J.C., 2010, Process Algebra: Equational Theories of Communicating Processes, VVolume 50
   Barros T, 2005, LECT NOTES COMPUT SC, V3639, P154
   Bergstra J.A., 2001, HDB PROCESS ALGEBRA
   Bradfield J, 2007, STUD LOGIC PRACT REA, V3, P721
   BROY M, 2007, ACM T SOFTW ENG METH, P16
   CARRIERO N, 1989, COMMUN ACM, V32, P444, DOI 10.1145/63334.63337
   Ciancarini P, 1996, ACM COMPUT SURV, V28, P300, DOI 10.1145/234528.234732
   DENICOLA R, 1995, J ACM, V42, P458, DOI 10.1145/201019.201032
   ENGELS G, 1994, SOFTWARE PROCESS MOD, P71
   ENGELS G, 2000, COOP INFORMAT SYST, P307
   Groenewegen L, 2005, LECT NOTES COMPUT SC, V3454, P94
   Groenewegen L, 2002, LECT NOTES COMPUT SC, V2315, P191
   Groenewegen L. P. J., 2008, 0829 CSR TU EINDH
   Groenewegen L, 2006, LECT NOTES COMPUT SC, V4038, P97
   Groote Jan Friso., 2007, METHODS MODELLING SO
   GROOTE JF, 2001, HDB PROCESS ALGEBRA, P1151
   KOKASH N, 2010, P SAC 2010 SIERR MAR, P2399
   Milner R, 1990, HDB THEORETICAL COMP, P1201, DOI [10.1007/3-540-10235-3., DOI 10.1007/3-540-10235-3]
   Möller M, 2008, FORM ASP COMPUT, V20, P161, DOI 10.1007/s00165-007-0042-7
   Pérez-Toledano MA, 2008, J UNIVERS COMPUT SCI, V14, P2212
   Rodrigues NF, 2005, ELECTRON NOTES THEOR, V130, P151, DOI 10.1016/j.entcs.2005.03.009
   Roscoe A.W., 1998, THEORY PRACTICE CONC
   STAFLEU J, 2009, 0916 LIACS LEID U
   STAM AW, 2009, THESIS LEID U
   STEEN MR, 1987, P INT AUT SYST N HOL, P562
   ter Beek MH, 2001, ECSCW 2001: PROCEEDINGS OF THE SEVENTH EUROPEAN CONFERENCE ON COMPUTER SUPPORTED COOPERATIVE WORK, P59
   van Glabbeek R.J., 1993, Lecture Notes in Computer Science, V715, P66, DOI [10.1007/3-540-57208-26, DOI 10.1007/3-540-57208-26]
   VanGlabbeek RJ, 1996, J ACM, V43, P555, DOI 10.1145/233551.233556
NR 38
TC 4
Z9 5
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD AUG 1
PY 2011
VL 76
IS 8
SI SI
BP 711
EP 735
DI 10.1016/j.scico.2010.04.011
PG 25
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 766JL
UT WOS:000290778300006
OA Green Submitted, hybrid
DA 2024-07-18
ER

PT J
AU Ducournau, R
   Privat, J
AF Ducournau, Roland
   Privat, Jean
TI Metamodeling semantics of multiple inheritance
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Object-oriented programming; Multiple inheritance; Metamodeling;
   Redefinition; Linearization; Open-world assumption; Static typing;
   Virtual types
ID NOTION; IMPLEMENTATION; ALGORITHMS; MECHANISM
AB Inheritance provides object-oriented programming with much of its great reusability power. When inheritance is single, its specifications are simple and everybody roughly agrees on them. In contrast, multiple inheritance yields ambiguities that have prompted long-standing debates, and no two languages agree on its specifications. In this paper, we present a semantics of multiple inheritance based on metamodeling. A metamodel is proposed which distinguishes the "identity" of properties from their "values" or "implementations". It yields a clear separation between syntactic and semantic conflicts. The former can be solved in any language at the expense of a common syntactic construct, namely full name qualification. However, semantic conflicts require a programmer's decision, and the programming language must help the programmer to some extent. This paper surveys the approach based on linearizations, which has been studied in depth, and proposes some extensions. As it turns out that only static typing takes full advantage of the metamodel, the interaction between multiple inheritance and static typing is also considered, especially in the context of virtual types. The solutions proposed by the various languages with multiple inheritance are compared with the metamodel results. Throughout the paper, difficulties encountered under the open-world assumption are stressed. (C) 2010 Elsevier B.V. All rights reserved.
C1 [Ducournau, Roland] LIRMM CNRS, F-34000 Montpellier, France.
   [Ducournau, Roland] Univ Montpellier 2, F-34000 Montpellier, France.
   [Privat, Jean] Univ Quebec Montreal, Dep Informat, Montreal, PQ H2X 3Y7, Canada.
C3 Centre National de la Recherche Scientifique (CNRS); Universite
   Paul-Valery; Universite Perpignan Via Domitia; Universite de
   Montpellier; Universite de Montpellier; University of Quebec; University
   of Quebec Montreal
RP Ducournau, R (corresponding author), LIRMM CNRS, 161 Rue Ada, F-34000 Montpellier, France.
EM ducour@lirmm.fr; privat.jean@uqam.ca
CR Abadi M., 1996, MONOGRAPHS COMPUTER
   Allen Eric., 2008, FORTRESS LANGUAGE SP
   ANCONA D, 2001, 8 INT WORKSH FDN OBJ
   [Anonymous], 2003, 148822003 ISOIEC
   [Anonymous], 1973, Simula BEGIN
   [Anonymous], 1997, Object-oriented software construction
   [Anonymous], 1973, SORTING SEARCHING
   [Anonymous], 2000, The C++ Programming Language
   [Anonymous], 1967, Mathematical logic
   [Anonymous], 1998, P 25 ACM SIGPLAN SIG, DOI DOI 10.1145/268946.268961
   Arnold M, 2005, P IEEE, V93, P449, DOI 10.1109/JPROC.2004.840305
   Baader F., 2003, DESCRIPTION LOGIC HD
   Baker H. G., 1991, ACM OOPS MESSENGER, V2, P4
   Bancilhon F., 1992, Building an object-oriented database system: the story of O2
   BARNES J, 1995, PROGRAMMING ADA 95
   Barrett K, 1996, ACM SIGPLAN NOTICES, V31, P69, DOI 10.1145/236338.236343
   BOBROW DG, 1986, SIGPLAN NOTICES, V21, P17, DOI 10.1145/960112.28700
   BORNING A, 1982, P AAAI 82, P234
   BRACHA G, 1990, SIGPLAN NOTICES, V25, P303, DOI 10.1145/97946.97982
   Bruce K. B., 1998, ECOOP'98 - Object-Oriented Programming. 12th European Conference. Proceedings, P523, DOI 10.1007/BFb0054106
   Buttner F., 2004, OCL MODEL DRIVEN ENG, P1
   CARDELLI L, 1988, INFORM COMPUT, V76, P138, DOI 10.1016/0890-5401(88)90007-7
   Cardelli L., 2004, COMPUTER SCI ENG HDB
   CARGILL T, 1993, C REPORT, V5, P19
   Cargill T. A., 1991, Computing Systems, V4, P69
   CARRE B, 1990, SIGPLAN NOTICES, V25, P312, DOI 10.1145/97946.97983
   CASTAGNA G, 1997, OBJECT ORIENTED PROG
   CHIBA S, 1998, P ACM OOPSLA WORKSH
   Clifton C, 2006, ACM T PROGR LANG SYS, V28, P517, DOI 10.1145/1133651.1133655
   COINTE P, 1987, SIGPLAN NOTICES, V22, P156, DOI 10.1145/38807.38822
   Compagnoni A. B., 1996, Mathematical Structures in Computer Science, V6, P469
   COOK WR, 1990, CONFERENCE RECORD OF THE SEVENTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P125, DOI 10.1145/96709.96721
   Ducasse S, 2006, ACM T PROGR LANG SYS, V28, P331, DOI 10.1145/1119479.1119483
   DUCOURNAU R, 1987, LECT NOTES COMPUT SC, V276, P243
   DUCOURNAU R, 1992, SIGPLAN NOTICES, V27, P16
   DUCOURNAU R, 1994, SIGPLAN NOTICES, V29, P164, DOI 10.1145/191081.191110
   Ducournau R., 1995, Technique et Science Informatiques, V14, P309
   DUCOURNAU R, 1991, INHERITANCE HIERARCH, P223
   DUCOURNAU R, 2002, LECT NOTES COMPUTER, V2426, P3
   DUCOURNAU R, 1991, YET ANOTHER FRAME BA
   DUCOURNAU R, 2007, LIRMM07021 U MONTP 2, V2
   Ducournau R, 2011, ACM COMPUT SURV, V43, DOI 10.1145/1922649.1922655
   Ducournau R, 2008, ACM T PROGR LANG SYS, V30, DOI 10.1145/1391956.1391960
   Ducournau R, 2009, ACM SIGPLAN NOTICES, V44, P41, DOI 10.1145/1639949.1640093
   DUGERDIL P, 1991, INHERITANCE HIERARCH, P245
   Ernst E., 2002, Nordic Journal of Computing, V9, P191
   Ernst E, 1999, LECT NOTES COMPUT SC, V1628, P67
   Ernst E, 2003, LECT NOTES COMPUT SC, V2743, P303
   Flanagan D.Y. Matsumoto., 2008, The Ruby Programming Language
   Forman I, 1999, PUTTING METACLASSES
   Gamma Erich., 2003, CONTRIBUTING ECLIPSE
   GOLDBERG A, 1983, SMALLTALK LANGUAGE I
   Goldberg DS, 2004, ACM SIGPLAN NOTICES, V39, P116, DOI 10.1145/1035292.1028987
   Grand M., 1997, JAVA LANGUAGE REFERE, Vsecond
   HARBINSON SP, 1992, MODULA 3
   HICKEY J, 2006, INTRO OBJECTIVE CAML
   HORTY J, 1994, NONMONOTONIC REASONI, V2
   Hovemeyer D, 2004, ACM SIGPLAN NOTICES, V39, P92, DOI 10.1145/1052883.1052895
   Huchard M, 2000, JOOP, V13, P6
   HUCHARD M, 1991, P EUROOP 91 SEP
   Igarashi A, 1999, LECT NOTES COMPUT SC, V1628, P161
   *ILOG, 1996, POW CLASS REF MAN VE
   Kiczales G., 1991, The Art of the Metaobject Protocol
   KNUDSEN JL, 1988, LECT NOTES COMPUT SC, V322, P93
   KROGDAHL S, 1985, BIT, V25, P318, DOI 10.1007/BF01934377
   KUSMIEREK J, 2007, JOT, V10
   Lalande A., 1926, VOCABULAIRE TECHNIQU
   LISKOV BH, 1994, ACM T PROGR LANG SYS, V16, P1811, DOI 10.1145/197320.197383
   Madsen O. Lehrmann, 1993, Object Oriented Programming in the BETA Programming Language
   MADSEN OL, 1989, SIGPLAN NOTICES, V24, P397, DOI 10.1145/74878.74919
   MALAYERI D, 2009, CZ MULTIPLE INHERITA, P21
   MASINI G, 1991, OBJECT ORIENTED LANG
   Meyer B., 1992, Eiffel: The Language
   *MICR CORP, 2001, C LANG SPEC V0 28
   MOON DA, 1986, SIGPLAN NOTICES, V21, P1, DOI 10.1145/960112.28698
   Mossenbock H., 1993, OBJECT ORIENTED PROG
   Nierstrasz O, 2006, J OBJECT TECHNOL, V5, P129, DOI 10.5381/jot.2006.5.4.a4
   Nystrom N, 2006, ACM SIGPLAN NOTICES, V41, P21, DOI 10.1145/1167515.1167476
   Odersky M., 2008, PROGRAMMING SCALA CO
   Odersky Martin., 1997, P 24 ACM S PRINCIPLE, P146
   *OMG, 2004, UN MOD LANG 2 0 SUP
   PUGH W, 1990, SIGPLAN NOTICES, V25, P85, DOI 10.1145/93548.93556
   Rayside D, 2001, PROC INT CONF SOFTW, P113, DOI 10.1109/ICSE.2001.919086
   Rayside D, 2000, ACM SIGPLAN NOTICES, V35, P337, DOI 10.1145/354222.353194
   RAYSIDE D, 2000, ECOOP 2000 WORKSH OB
   REYNOLDS JC, 1996, ALGOL LIKE LANGUAGES
   Sakkinen M., 1992, Computing Systems, V5, P69
   SHALIT A, 1997, DYLAN REFERENCE MANU
   SHAN YP, 1993, SIGPLAN NOTICES, V28, P360
   SHANG DL, 1996, ARE COWS ANIMALS
   Smaragdakis Y, 2002, ACM T SOFTW ENG METH, V11, P215, DOI 10.1145/505145.505148
   SNYDER J, 1991, INHERITANCE HIERARCH, P153
   Steele Jr Guy L., 1990, COMMON LISP LANGUAGE
   Stefik M., 1985, AI MAG, V6, P40, DOI DOI 10.1609/AIMAG.V6I4.508
   Taft S. T., 2006, LNCS, V4348
   Taivalsaari A, 1996, ACM COMPUT SURV, V28, P438, DOI 10.1145/243439.243441
   Thorup KK, 1999, LECT NOTES COMPUT SC, V1628, P186
   TORGERSEN M, 1998, EL P 5 WORKSH FDN OB
   TOURETZKY DS, 1986, MATH INHERITANCE
   Ungar D., 1991, LISP and Symbolic Computation, V4, P223, DOI 10.1007/BF01806107
   Van Rossum G, 2003, Python Language Reference Manual
   VanHilst M, 1996, ACM SIGPLAN NOTICES, V31, P359, DOI 10.1145/236338.236375
   VIEGA J, 1998, CS9803 U VIRG
   Waldo J., 1991, Computing Systems, V4, P157
   WEINREB D, 1980, 602 MIT AI LAB
   WIRTH N, 1988, SOFTWARE PRACT EXPER, V18, P671, DOI 10.1002/spe.4380180707
   Zibin Y, 2003, ACM SIGPLAN NOTICES, V38, P126, DOI 10.1145/640128.604143
NR 107
TC 8
Z9 8
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUL 1
PY 2011
VL 76
IS 7
BP 555
EP 586
DI 10.1016/j.scico.2010.10.006
PG 32
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 750YO
UT WOS:000289584500003
OA Green Accepted
DA 2024-07-18
ER

PT J
AU Rodrigues, NF
   Barbosa, LS
AF Rodrigues, Nuno F.
   Barbosa, Luis S.
TI Slicing for architectural analysis
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 5th International Workshop on Formal Aspects of Component Software
   (FACS)
CY SEP 10-12, 2008
CL Malaga, SPAIN
DE Program analysis; Architectural recovery; Coordination
AB Current software development often relies on non-trivial coordination logic for combining autonomous services, eventually running on different platforms. As a rule, however, such a coordination layer is strongly woven within the application at source code level. Therefore, its precise identification becomes a major methodological (and technical) problem and a challenge to any program understanding or refactoring process.
   The approach introduced in this paper resorts to slicing techniques to extract coordination data from source code. Such data are captured in a specific dependency graph structure from which a coordination model can be recovered either in the form of an ORC specification or as a collection of code fragments corresponding to the identification of typical coordination patterns in the system. Tool support is also discussed. (C) 2010 Elsevier B.V. All rights reserved.
C1 [Rodrigues, Nuno F.; Barbosa, Luis S.] Univ Minho, DI CCTC, Braga, Portugal.
C3 Universidade do Minho
RP Rodrigues, NF (corresponding author), Univ Minho, DI CCTC, Braga, Portugal.
EM nfr@di.uminho.pt; lsb@di.uminho.pt
RI Rodrigues, Nuno Miguel Feixa/AGN-6656-2022; Soares Barbosa,
   Luis/N-7086-2013
OI Rodrigues, Nuno Miguel Feixa/0000-0003-4884-0984; Soares Barbosa,
   Luis/0000-0002-5037-2588
CR AGRAWAL H, 1993, SOFTWARE PRACT EXPER, V23, P589, DOI 10.1002/spe.4380230603
   AlTurki Musab, 2007, Proceedings of the 9th International ACM SIGPLAN Conference on Principles and Practice of Declarative Programming (PPDP'07), P131, DOI 10.1145/1273920.1273938
   [Anonymous], P ACM SIGPLAN 1988 C
   [Anonymous], COMMON LANGUAGE INFR
   Arbab Farhad., 1998, B DUTCH ASS THEORETI
   CANFORA G, 1994, J SOFTW MAINT-RES PR, V6, P53, DOI 10.1002/smr.4360060202
   CANFORA G, 1994, INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE, PROCEEDINGS, P424, DOI 10.1109/ICSM.1994.336752
   Cimitile A, 1996, J SOFTW MAINT-RES PR, V8, P145, DOI 10.1002/(SICI)1096-908X(199605)8:3<145::AID-SMR127>3.0.CO;2-9
   Cook WR, 2006, LECT NOTES COMPUT SC, V4038, P82
   DELUCIA A, 1996, WPC 96 P 4 INT WORKS, P9
   DINKLEY D, 1995, ACM T SOFTW ENG METH, V4, P3
   FERRANTE J, 1987, ACM T PROGR LANG SYS, V9, P319, DOI 10.1145/24039.24041
   Harman M, 2001, PROC IEEE INT CONF S, P138, DOI 10.1109/ICSM.2001.972724
   Hierons R.M., 1999, J SOFTW TEST VERIFIC, V9, P233, DOI 10.1002/(SICI)1099-1689(199912)9:43.0.CO;2-3
   HOARE T, 2004, TREE SEMANTICS ORCHE
   HORWITZ S, 1989, ACM T PROGR LANG SYS, V11, P345, DOI 10.1145/65979.65980
   JEANMARC DLM, 1996, COORDINATION PROGRAM
   Kitchin D, 2006, LECT NOTES COMPUT SC, V4137, P477
   Krinke J., 2003, Software Engineering Notes, V28, P178, DOI 10.1145/949952.940096
   Larsen L, 1996, PROC INT CONF SOFTW, P495, DOI 10.1109/ICSE.1996.493444
   Liang DL, 1998, PROC IEEE INT CONF S, P358, DOI 10.1109/ICSM.1998.738527
   MISRA J, 2006, J SOFTW SYST MODEL
   NANDA MG, 2000, ISSTA 00, P180
   OTTENSTEIN KJ, 1984, SIGPLAN NOTICES, V19, P177, DOI 10.1145/390011.808263
   Ranganath VP, 2007, ACM T PROGR LANG SYS, V29, DOI 10.1145/1275497.1275502
   RODRIGUES NF, 2008, SCAM 08
   RODRIGUES NF, 2009, THESIS U MINHO
   Schmechtig S, 2006, NEW ELECTRON, V39, P31
   SIMPSON D, 1993, ACM FORTRAN FORUM, V12, P26
   Tonella P, 1997, PROC INT CONF SOFTW, P433, DOI 10.1145/253228.253371
   Van der Aalst WMP, 2003, DISTRIB PARALLEL DAT, V14, P5, DOI 10.1023/A:1022883727209
   Weiser MD., 1979, PROGRAM SLICES FORMA
   Woo JW, 2004, INT J PARALLEL PROG, V32, P39, DOI 10.1023/B:IJPP.0000015564.82048.f3
   Zhao J., 1998, PROC INT COMPUT S WO, P162
NR 34
TC 2
Z9 2
U1 0
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 1
PY 2010
VL 75
IS 10
SI SI
BP 828
EP 847
DI 10.1016/j.scico.2010.02.002
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 638SZ
UT WOS:000280917600003
OA hybrid, Green Submitted
DA 2024-07-18
ER

PT J
AU Culpepper, R
   Felleisen, M
AF Culpepper, Ryan
   Felleisen, Matthias
TI Debugging hygienic macros
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 6th International Conference on Generative Programming and Component
   Engineering
CY OCT 01-03, 2007
CL Salzburg, AUSTRIA
SP ACM SIGPLAN, ACM SIGSOFT
DE Macros; Debugging; Syntactic abstraction; Scheme
AB Over the past two decades, Scheme macros have evolved into a powerful API for the compiler front end. Like Lisp macros, their predecessors, Scheme macros expand source programs into a small core language; unlike Lisp systems, Scheme macro expanders preserve lexical scoping, and advanced Scheme macro systems handle other important properties such as source location. Using such macros, Scheme programmers now routinely develop the ultimate abstraction; embedded domain-specific programming languages.
   Unfortunately, a typical Scheme programming environment provides little support for macro development. This lack makes it difficult for programmers to debug their macros and for novices to study the behavior of macros. In response, we have developed a stepping debugger specialized to the concerns of macro expansion. This debugger presents the macro expansion process as a linear rewriting sequence of annotated terms; it graphically illustrates the binding structure of the program as expansion reveals it; and it adapts to the programmer's level of abstraction, hiding details of syntactic forms that the programmer considers built-in. (C) 2009 Elsevier B.V. All rights reserved.
C1 [Culpepper, Ryan; Felleisen, Matthias] Northeastern Univ, Coll Comp & Informat Sci, Boston, MA 02115 USA.
C3 Northeastern University
RP Culpepper, R (corresponding author), Northeastern Univ, Coll Comp & Informat Sci, Boston, MA 02115 USA.
EM ryanc@ccs.neu.edu
CR [Anonymous], REVISED REPORT ALGOR
   Barzilay Eli., SWINDLE
   BOVE A, 1992, ACM S LISP FUNCT PRO, P278
   Clements J, 2001, LECT NOTES COMPUT SC, V2028, P320
   CLINGER W, 1991, ACM SIGPLAN SIGACT S, P155
   CULPEPPER R, 2005, INT C GEN PROGR COMP, P373
   Dybvig R. K., 1993, LISP and Symbolic Computation, V5, P295, DOI 10.1007/BF01806308
   EGNER S, 2005, WORKSH SCHEM FUNCT P, P13
   FELLEISEN M, 1991, SCI COMPUT PROGRAM, V17, P35, DOI 10.1016/0167-6423(91)90036-W
   FELLEISEN M, 1985, 182 IND U
   Findler RB, 2002, J FUNCT PROGRAM, V12, P159, DOI 10.1017/S0956796801004208
   FINDLER RB, 2002, ACM INT C FUNCT PROG, P48
   Flatt M, 2002, ACM SIGPLAN NOTICES, V37, P72, DOI 10.1145/583852.581486
   FLATT M, 2006, PLTTR20061V352
   FLATT M, 1999, FORMAL SYNTAX SEMANT, V1523, P241
   FLATT M, 1998, ACM SIGPLAN C PROGR, P236
   Flatt M, 2006, LECT NOTES COMPUT SC, V4279, P270
   Friedman D. P., 2005, REASONED SCHEMER
   GASBICHLER M, 2006, THESIS E KARLS U TUB
   HERMAN D, 2004, ACM SIGPLAN INT C FU, P16
   Hudak P., 1996, ACM COMPUT SURV, V28, P196, DOI [10.1145/242224.242477, DOI 10.1145/242224.242477]
   KOHLBECKER EE, 1987, ACM SIGPLAN SIGACT S, P77
   Kohlbecker Eugene., 1986, P 1986 ACM C LISP FU, P151
   Lieberman H., 1984, ACM S LISP FUNCTIONA, P247, DOI DOI 10.1145/800055.802041
   Owens Scott., 2004, SCHEME 04, P41
   *PLT SCHEM INC, 2006, PLTTR20064V352
   Sarkar D, 2005, J FUNCT PROGRAM, V15, P653, DOI 10.1017/S0956796805005605
   SHIVERS O, 2005, ACM SIGPLAN INT C FU, P2
   Sitaram Dorai., PROGRAMMING SCHELOG
   STEELE GL, 1978, 474 MIT ART INT LAB
   Steele Jr Guy L., 1990, COMMON LISP LANGUAGE
   TOBINHOCHSTADT S, 2008, ACM, P395, DOI DOI 10.1145/1328438.1328486
   Tolmach A., 1995, Journal of Functional Programming, V5, P155, DOI 10.1017/S0956796800001313
   WADDELL O, 1999, ACM SIGPLAN SIGACT S, P203
   Wand M., 1998, LISP SYMBOLIC COMPUT, V10, P189, DOI DOI 10.1023/A:1007720632734
   WRIGHT A, 1995, PATTERN MATCHI UNPUB
NR 36
TC 7
Z9 9
U1 0
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUL 1
PY 2010
VL 75
IS 7
SI SI
BP 496
EP 515
DI 10.1016/j.scico.2009.06.001
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 603YE
UT WOS:000278243200003
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Dalton, AR
   Wahba, SK
   Dandamudi, S
   Hallstrom, JO
AF Dalton, Andrew R.
   Wahba, Sally K.
   Dandamudi, Sravanthi
   Hallstrom, Jason O.
TI Visualizing the runtime behavior of embedded network systems: A toolkit
   for TinyOS
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 16th IEEE International Conference on Program Comprehension
CY JUN 10-13, 2008
CL Amsterdam, NETHERLANDS
SP IEEE Comp Soc, IEEE Comp Soc TCSE
DE Embedded network systems; Sensor networks; TinyOS; NesC; Program
   visualization; Program comprehension; Dynamic analysis; Static analysis
ID SEQUENCE DIAGRAMS
AB TinyOS is an effective platform for developing lightweight embedded network applications. But the platform's lean programming model and power-efficient operation come at a price: TinyOS applications are notoriously difficult to construct, debug, and maintain. The development difficulties stem largely from a programming model founded on events and deferred execution. In short, the model introduces non-determinism in the execution ordering of primitive actions - an issue exacerbated by the fact that embedded network systems are inherently distributed and reactive. The resulting set of possible execution sequences for a given system is typically large and can swamp developers' unaided ability to reason about program behavior.
   In this paper, we present a visualization toolkit for TinyOS 2.0 to aid in program comprehension. The goal is to assist developers in reasoning about the computation forest underlying a system under test and the particular branches chosen during each run. The toolkit supports comprehension activities involving both local and distributed runtime behavior.The constituent components include (i) a full-featured static analysis and instrumentation library, (ii) a selection-based probe insertion system, (iii) a lightweight event recording service, (iv) a trace extraction and reconstruction tool, and (v) three visualization front-ends. We demonstrate the utility of the toolkit using both standard and custom system examples and present an analysis of the toolkit's resource usage and performance characteristics. (C) 2009 Elsevier B.V. All rights reserved.
C1 [Wahba, Sally K.; Dandamudi, Sravanthi; Hallstrom, Jason O.] Clemson Univ, Sch Comp, Clemson, SC 29634 USA.
   [Dalton, Andrew R.] Western Carolina Univ, Dept Math & Comp Sci, Cullowhee, NC 28723 USA.
C3 Clemson University; University of North Carolina; Western Carolina
   University
RP Hallstrom, JO (corresponding author), Clemson Univ, Sch Comp, 301 McAdams Hall, Clemson, SC 29634 USA.
EM adalton@email.wcu.edu; sallyw@cs.clemson.edu; sdandam@cs.clemson.edu;
   jasonoh@cs.clemson.edu
FU Division Of Computer and Network Systems; Direct For Computer & Info
   Scie & Enginr [0745846] Funding Source: National Science Foundation
CR Arora A, 2005, 11th IEEE International Conference on Embedded and Real-Time Computing Systems and Applications, Proceedings, P102, DOI 10.1109/RTCSA.2005.47
   AYLWARD R, 2006, 6 INT C NEW INT MUS, P134
   BALZER M, 2005, ACM 2005 S SOFTW VIS, P165
   Briand LC, 2006, IEEE T SOFTWARE ENG, V32, P642, DOI 10.1109/TSE.2006.96
   Comella CL, 2006, NAT CLIN PRACT NEURO, V2, P20, DOI 10.1038/ncpneuro0073
   Cornelissen B, 2007, INT C PROGRAM COMPRE, P49
   Cornelissen B, 2007, CSMR 2007: 11TH EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, PROCEEDINGS, P213
   DALTON A, 2007, 3 INT C TESTB RES IN
   DALTON A, 2008, 17 INT C COMP COMM N
   Dalton AR, 2008, INT C PROGRAM COMPRE, P43, DOI 10.1109/ICPC.2008.22
   Dalton AR, 2009, J SYST SOFTWARE, V82, P1057, DOI 10.1016/j.jss.2009.01.011
   Dalton AR, 2009, INT J DISTRIB SENS N, V5, P105, DOI 10.1080/15501320701863403
   DEPAUW W, 1993, 8 C OBJ OR PROGR SYS, P326
   EDWARDS J, 2004, 19 ANN ACM C OBJ OR, P84
   EICK SG, 1992, IEEE T SOFTWARE ENG, V18, P957, DOI 10.1109/32.177365
   Gamma E., 1994, Design patterns: Elements of reusable object-oriented software
   Gay D, 2003, ACM SIGPLAN NOTICES, V38, P1, DOI 10.1145/780822.781133
   Hamou-Lhadj A, 2005, PROG COMPREHEN, P157, DOI 10.1109/WPC.2005.30
   HAMOULHADJ A, 2005, 1 INT WORKSH PROGR C, P38
   Hill J., 2000, Proc. 9 th International Conference on Architectural Support for Programming Languages and Operating Systems, P93, DOI DOI 10.1145/356989.356998
   Holten D, 2006, IEEE T VIS COMPUT GR, V12, P741, DOI 10.1109/TVCG.2006.147
   Hu W, 2005, 2005 FOURTH INTERNATIONAL SYMPOSIUM ON INFORMATION PROCESSING IN SENSOR NETWORKS, P503
   Jones J. A., 2004, Information Visualization, V3, P173, DOI 10.1057/palgrave.ivs.9500077
   KLEYN M, 1988, 3 C OBJ OR PROGR SYS, P191
   Krunic V, 2007, MOBISYS '07: PROCEEDINGS OF THE FIFTH INTERNATIONAL CONFERENCE ON MOBILE SYSTEMS, APPLICATIONS, AND SERVICES, P43
   Labowitz M, 2006, IPSN 2006: THE FIFTH INTERNATIONAL CONFERENCE ON INFORMATION PROCESSING IN SENSOR NETWORKS, P483
   LAMPORT L, 1978, COMMUN ACM, V21, P558, DOI 10.1145/359545.359563
   LANGE D, 1995, USENIX C OBJ OR TECH
   LEVIS P, 2006, TINYOS PROGRAMMING M
   Levis Philip, 2005, TKN05007 TU BERL TEL
   LI J, 2002, HPL200225R1 IM SYST
   LIENHARD A, 2006, 2 INT WORKSH PROGR C, P39
   LIENHARD A, 2007, 3 INT WORKSH PROGR C, P11
   MALLOY B, 2005, 2005 ACM S SOFTW VIS, P105
   MCCARTNEY W, 2006, 4 INT C EMB NETW SEN, P167
   MCCARTNEY W, 2006, 4 INT C EMB NETW SEN, P387
   Moe J, 2001, PROG COMPREHEN, P60, DOI 10.1109/WPC.2001.921714
   Moteiv Corporation, 2006, TMOT SKY DAT
   Nagel WE, 1996, SUPERCOMPUTER, V12, P69
   Oechsle R, 2002, LECT NOTES COMPUT SC, V2269, P176
   Orso A, 2004, PROC INT CONF SOFTW, P699, DOI 10.1109/ICSE.2004.1317495
   PFEIFFER J, 2006, 5 INT C ASP OR SOFTW, P146
   Ramanathan N., 2006, FINAL FRONTIER EMBED
   Ramanathan N., 2005, Proceedings of the 3rd international conference on Embedded networked sensor systems, P255, DOI DOI 10.1145/1098918.1098946
   Regehr J., 2005, ACM T EMBED COMPUT S, V4, P751, DOI DOI 10.1145/1113830.1113833
   REISS S, 2005, 2005 ACM S SOFTW VIS, P115
   REISS SP, 2003, 2003 ACM S SOFTW VIS, P57
   SALLAI J, 2005, TINYDT TINYOS PLUGIN
   SCHULER R, 2006, TINYOS PLUGIN ECLIPS
   SHNEIDERMAN B, 1992, ACM T GRAPHIC, V11, P92, DOI 10.1145/102377.115768
   Simon Gyula., 2004, SENSYS 04, P1, DOI [DOI 10.1145/1031495.1031497, 10.1145/1031495.1031497]
   Snir M., 1998, MPI-The Complete Reference
   Tolle G, 2005, Proceedings of the Second European Workshop on Wireless Sensor Networks, P121, DOI 10.1109/EWSN.2005.1462004
   TOLLIVER J, 2006, 5 INT C INF PROC SEN
   Topol B, 1998, CONCURRENCY-PRACT EX, V10, P1197, DOI 10.1002/(SICI)1096-9128(19981210)10:14<1197::AID-CPE364>3.0.CO;2-O
   *UC BERK, 2009, TINYOS TUT LESS, V2
   *UC BERK, 2004, TINYOS COMM FOR OP S
   Voinea L, 2007, SCI COMPUT PROGRAM, V65, P222, DOI 10.1016/j.scico.2006.05.012
   Voinea L, 2007, COMPUT GRAPH-UK, V31, P410, DOI 10.1016/j.cag.2007.01.031
   Werner-Allen G, 2006, IEEE INTERNET COMPUT, V10, P18, DOI 10.1109/MIC.2006.26
   Whitehouse K, 2006, IPSN 2006: THE FIFTH INTERNATIONAL CONFERENCE ON INFORMATION PROCESSING IN SENSOR NETWORKS, P416
   WU C, 2000, 2000 ACM IEEE C SUP, P10
NR 62
TC 3
Z9 4
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAY 1
PY 2009
VL 74
IS 7
SI SI
BP 446
EP 469
DI 10.1016/j.scico.2009.02.004
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 447XG
UT WOS:000266224700005
DA 2024-07-18
ER

PT J
AU Gokhale, A
   Balasubramanian, K
   Krishna, AS
   Balasubramanian, J
   Edwards, G
   Deng, G
   Turkay, E
   Parsons, J
   Schmidt, DC
AF Gokhale, Aniruddha
   Balasubramanian, Krishnakumar
   Krishna, Arvind S.
   Balasubramanian, Jaiganesh
   Edwards, George
   Deng, Gan
   Turkay, Emre
   Parsons, Jeffrey
   Schmidt, Douglas C.
TI Model driven middleware: A new paradigm for developing distributed
   real-time and embedded systems
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT Workshop on Model Driven Architecture - Foundations and Applications
CY JUN 26-27, 2003
CL Univ Twente, Enschede, NETHERLANDS
HO Univ Twente
DE MDM: Model driven middleware; CCM: CORBA component model; D&C:
   Deployment and configuration
ID INTEGRATED DEVELOPMENT
AB Distributed real-time and embedded (DRE) systems have become critical in domains such as avionics (e.g., flight mission computers), telecommunications (e.g., wireless phone services), tele-medicine (e.g., robotic surgery), and defense applications (e.g., total ship computing environments). These types of system are increasingly interconnected via wireless and wireline networks to form systems of systems. A challenging requirement for these DRE systems involves supporting a diverse set of quality of service (QoS) properties, such as predictable latency/jitter, throughput guarantees, scalability, 24x7 availability, dependability, and security that must be satisfied simultaneously in real-time. Although increasing portions of DRE systems are based on QpS-enabled commercial-off-the-shelf (COTS) hardware and software components, the complexity of managing long lifecycles (often similar to 15-30 years) remains a key challenge for DRE developers and system integrators. For example, substantial time and effort is spent retrofitting DRE applications when the underlying COTS technology infrastructure changes.
   This paper provides two contributions that help improve the development, validation, and integration of DRE systems throughout their lifecycles. First, we illustrate the challenges in creating and deploying QoS-enabled component middleware-based DRE applications and describe our approach to resolving these challenges based on a new software paradigm called Model Driven Middleware (MDM), which combines model-based software development techniques with QoS-enabled component middleware to address key challenges faced by developers of DRE systems - particularly composition, integration, and assured QoS for end-to-end operations. Second. we describe the structure and functionality of CoSMIC (Component Synthesis using Model Integrated Computing), which is an MDM toolsuite that addresses key DRE application and middleware lifecycle challenges, including partitioning the components to use distributed resources effectively, validating software configurations, assuring multiple simultaneous QoS properties in real-time, and safeguarding against rapidly changing technology. (C) 2008 Elsevier B.V. All rights reserved.
C1 [Gokhale, Aniruddha; Balasubramanian, Krishnakumar; Krishna, Arvind S.; Balasubramanian, Jaiganesh; Edwards, George; Deng, Gan; Turkay, Emre; Parsons, Jeffrey; Schmidt, Douglas C.] Vanderbilt Univ, Inst Software Integrated Syst, Nashville, TN 37235 USA.
C3 Vanderbilt University
RP Gokhale, A (corresponding author), Vanderbilt Univ, Inst Software Integrated Syst, Campus Box 1829,Stn B, Nashville, TN 37235 USA.
EM a.gokhale@vanderbilt.edu
RI Edwards, George/HGB-4007-2022; Parsons, Jeffrey/AAF-3380-2020
OI Gokhale, Aniruddha/0000-0002-7706-7102
CR ALLEN P, COMPONENT DEV STRATE, V12
   [Anonymous], 2001, XML SCHEMA 1
   [Anonymous], XML SCHEMA 2
   *AUSTR RAILW, 2003, SUCC STOR OBB
   Balasubramanian K, 2005, RTAS 2005: 11th IEEE Real Time and Embedded Technology and Applications Symposium, Proceedings, P190
   BATORY D, 1994, IEEE SOFTWARE, V11, P89, DOI 10.1109/52.311067
   BAXTER I, 2001, SEMANTIC DESIGNS
   Bondavalli A, 1999, 2ND IEEE INTERNATIONAL SYMPOSIUM ON OBJECT-ORIENTED REAL-TIME DISTRIBUTED COMPUTING (ISORC'99), PROCEEDINGS, P139, DOI 10.1109/ISORC.1999.776367
   CROSS JK, 2001, P OOPSLA 2001 WORKSH
   Edwards G, 2004, LECT NOTES COMPUT SC, V3286, P337
   GOKHALE S, 2002, WORKSH ARCH DEP SYST
   Gokhale SS, 2004, P REL MAINT S, P195, DOI 10.1109/RAMS.2004.1285447
   Gokhale SS, 2002, 13TH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P64, DOI 10.1109/ISSRE.2002.1173214
   Gray J, 2003, LECT NOTES COMPUT SC, V2830, P151
   Gray J, 2001, COMMUN ACM, V44, P87, DOI 10.1145/383845.383864
   Gray J., 2007, CRC HDB DYNAMIC SYST
   Gray Jeff., 2004, ASPECT ORIENTED SOFT, P681
   HARRISON TH, 1997, P OOPSLA 97, P184
   Hatcliff J, 2003, PROC INT CONF SOFTW, P160, DOI 10.1109/ICSE.2003.1201197
   Karsai G, 2003, P IEEE, V91, P145, DOI 10.1109/JPROC.2002.805824
   Krishna AS, 2005, RTAS 2005: 11th IEEE Real Time and Embedded Technology and Applications Symposium, Proceedings, P180
   KRISHNA AS, 2004, MIDDLEWARE COMMUNICA, P413
   *L MART AER, 2003, L MART MDA SUCC SOTR
   Lédeczi A, 2001, COMPUTER, V34, P44, DOI 10.1109/2.963443
   Lee TMC, 1999, ACTA PSYCHIAT SCAND, V99, P315, DOI 10.1111/j.1600-0447.1999.tb07236.x
   Neema S, 2002, LECT NOTES COMPUT SC, V2487, P236
   O'Ryan C, 2002, COMPUT SYST SCI ENG, V17, P115
   *OBJ MAN GROUP, 2003, PTC031014 OMG
   *OBJ MAN GROUP, 2001, MOD DRIV ARCH MDA VE
   Object Management Group Inc. (OMG), 2006, DEPL CONF COMP BAS D
   Ogata K., 1997, Instrumentation and Controls Series, V3rd ed.
   Rajkumar R, 1998, REAL TIM SYST SYMP P, P296, DOI 10.1109/REAL.1998.739755
   Schmidt D.C., 2001, CROSSTALK J DEFENSE, P10
   Schmidt DouglasC., 2002, IEEE Distributed Systems Online, V3
   Sharp DC, 2000, KLUWER INT SER ENG C, V576, P353
   SHARP DC, 1999, P 18 IEEE AIAA DIG A
   SHARP DC, 2003, P WORKSH MOD DRIV EM
   Sztipanovits J, 1997, COMPUTER, V30, P110, DOI 10.1109/2.585163
   TURKAY E, 2004, P 42 ACM SE REG C HU, P166
   Wang N., 2004, Middleware for Communications, P131
NR 40
TC 25
Z9 27
U1 1
U2 10
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 1
PY 2008
VL 73
IS 1
SI SI
BP 39
EP 58
DI 10.1016/j.scico.2008.05.005
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 357ZH
UT WOS:000259885400005
DA 2024-07-18
ER

PT J
AU Acciai, L
   Boreale, M
AF Acciai, Lucia
   Boreale, Michele
TI XPi: A typed process calculus for XML messaging
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Pi-calculus; XML-messaging; pattern-matching; type systems
ID LANGUAGE
AB We present XPi, a core calculus for XML messaging. XPi features asynchronous communication, pattern matching, name and code mobility, integration of static and dynamic typing. In XPi, a type system disciplines XML message handling at the level of channels, patterns, and processes. A run-time safety theorem ensures that in well-typed systems no service will ever receive documents it cannot understand, and that the offered services will be consistent with the declared channel capacities. An inference system is introduced, which is proved to be in full agreement with type checking. A notion of barbed equivalence is defined that takes into account information about service interfaces. Flexibility and expressiveness of this calculus are illustrated by a number of examples, some concerning description and discovery of web services. (C) 2008 Elsevier B.V. All rights reserved.
C1 [Acciai, Lucia; Boreale, Michele] Univ Florence, Dipartimento Sistemi & Informat, I-50121 Florence, Italy.
C3 University of Florence
RP Acciai, L (corresponding author), Univ Florence, Dipartimento Sistemi & Informat, I-50121 Florence, Italy.
EM lacciai@dsi.unifi.it; boreale@dsi.unifi.it
OI Boreale, Michele/0000-0002-1972-7491
CR Abadi M, 1999, INFORM COMPUT, V148, P1, DOI 10.1006/inco.1998.2740
   AMADIO R, 1997, LNCS, V1119, P147
   Andrews Tony., 2003, Business process execution language for web services
   [Anonymous], 2007, Web Services Description Language (WSDL) Version 2.0
   BENZAKEN V, 2003, P 8 ACM SIGPLAN INT, P51
   BIERMAN GM, 2003, 577 U CAMBR COMP LAB
   Boreale M, 1998, THIRTEENTH ANNUAL IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, PROCEEDINGS, P165, DOI 10.1109/LICS.1998.705653
   Boreale M, 1998, THEOR COMPUT SCI, V195, P205, DOI 10.1016/S0304-3975(97)00220-X
   Brown AL, 2005, LECT NOTES COMPUT SC, V3670, P18
   Cardelli L, 2004, MATH STRUCT COMP SCI, V14, P285, DOI 10.1017/S0960129504004141
   Cardelli L, 2000, THEOR COMPUT SCI, V240, P177, DOI 10.1016/S0304-3975(99)00231-5
   Carpineti S, 2006, LECT NOTES COMPUT SC, V4184, P148
   Carpineti S, 2006, LECT NOTES COMPUT SC, V3924, P197
   Castagna G, 2005, IEEE S LOG, P92
   Castagna G, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P261, DOI 10.1145/1328438.1328471
   Dezani-Ciancaglini M, 2007, LECT NOTES COMPUT SC, V4661, P263
   Emmerich W., 2007, Software Engineering Notes, V32, P21, DOI 10.1145/1226816.1226829
   FALLSIDE DC, 2001, XML SCHEMA
   Gardner P, 2004, LECT NOTES COMPUT SC, V2921, P130
   Hosoya H, 2003, J FUNCT PROGRAM, V13, P961, DOI 10.1017/S0956796802004410
   Hosoya Haruo, 2003, ACM T INTERNET TECHN, V3, DOI DOI 10.1145/767193.767195
   Lucchi R, 2007, J LOGIC ALGEBR PROGR, V70, P96, DOI 10.1016/j.jlap.2006.05.007
   Meredith LG, 2003, COMMUN ACM, V46, P41, DOI 10.1145/944217.944236
   Merro M, 2000, LECT NOTES COMPUT SC, V1784, P238
   MILNER R, 1992, INFORM COMPUT, V100, P1, DOI [10.1016/0890-5401(92)90008-4, 10.1016/0890-5401(92)90009-5]
   MILNER R, 1992, INFORM COMPUT, V100, P41, DOI 10.1016/0890-5401(92)90009-5
   MILNER R, 1991, ECSLFCS91180 ED U DE
   Pierce B., 1996, Mathematical Structures in Computer Science, V6, P409
   Sangiorgi D, 1999, THEOR COMPUT SCI, V221, P457, DOI 10.1016/S0304-3975(99)00040-7
   Sangiorgi D., 1992, LNCS, V630
   SANGIORGI D, 1996, INFORM COMPUTATION, V131
   SANGIORGI D, 1992, LNCS, V623, P685
   STEINKE S, 1995, NETWORK SOLUTIONS MA, V10
NR 33
TC 3
Z9 3
U1 1
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD APR 1
PY 2008
VL 71
IS 2
BP 110
EP 143
DI 10.1016/j.scico.2008.02.001
PG 34
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 305LX
UT WOS:000256181000002
OA Bronze
DA 2024-07-18
ER

PT J
AU Fernandes, T
   Desharnais, J
AF Fernandes, Therrezinha
   Desharnais, Jules
TI Describing data flow analysis techniques with Kleene algebra
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 7th International Conference on Mathematics of Program Construction
CY JUL 12-14, 2004
CL Stirling, SCOTLAND
SP Cornell Univ, Univ Stirling, Formal Aspects Comp Sci, Specialist Grp
DE static intraprocedural data flow analysis; 'gen/kill' analyses; Kleene
   algebra with tests; matrices over a Kleene algebra; data flow graphs;
   labelled transition systems
AB Static program analysis consists of compile-time techniques for determining properties of programs without actually running them. Using Kleene algebra, we formalize four instances of a general class of static intraprocedural data flow analyses known as 'gen/kill' analyses. This formalization exhibits the dualities between the four analyses in a clear and concise manner. We provide two equivalent sets of equations characterizing the four analyses for two different representations of programs, one in which the statements label the nodes of a control flow graph and one in which the statements label the transitions. We formally describe how the data flow equations for the two representations are related. We also prove the soundness of the KA based approach with respect to the standard approach. (c) 2006 Elsevier B.V. All rights reserved.
C1 Univ Laval, Dept Informat & Genie Logiciel, Quebec City, PQ G1K 7P4, Canada.
C3 Laval University
RP Desharnais, J (corresponding author), Univ Laval, Dept Informat & Genie Logiciel, Quebec City, PQ G1K 7P4, Canada.
EM Therrezinha.Fernandes@ift.ulaval.ca; Jules.Desharnais@ift.ulaval.ca
RI Desharnais, Jules/A-4023-2008
CR Aho A.V., 1986, COMPILERS PRINCIPLES
   [Anonymous], PRINCIPLES COMPILERS
   BARTH A, 2002, 20021865 CORN U COMP
   BERGERON J, 2001, 1 S REQ ENG INF SEC
   Clarke. E. M., 1982, LOGICS OF PROGRAMS, P52, DOI [10 . 1007 / BFb0025774, DOI 10.1007/BFB0025774]
   Conway J.H., 1971, Regular Algebra and Finite Machines
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Desharnais J, 2003, LECT NOTES COMPUT SC, V3051, P8
   DESHARNAIS J, 2004, D86135 U LAV DEP INF
   DESHARNIAS J, 2003, D86135 U AUGSB IN IN
   Fischer C.N., 1988, CRAFTING COMPILER
   KAM JB, 1977, ACTA INFORM, V7, P305, DOI 10.1007/BF00290339
   Kildall Gary A., 1973, Proceedings of the 1st Annual ACM SIGACT-SIGPLAN Symposium on Principles of Programming Languages. POPL'73, P194
   KOT L, 2004, 20041971 CORN U COMP
   Kot L, 2005, ELECTRON NOTES THEOR, V141, P221, DOI 10.1016/j.entcs.2005.02.028
   KOZEN D, 1994, INFORM COMPUT, V110, P366, DOI 10.1006/inco.1994.1037
   Kozen D, 1997, ACM T PROGR LANG SYS, V19, P427, DOI 10.1145/256167.256195
   Kozen D, 2000, LECT NOTES ARTIF INT, V1861, P568
   KOZEN D, 1998, 981669 CORN U COMP S
   KOZEN D, 2003, 20031915 CORN U DEP
   LO RW, 1995, COMPUT SECUR, V14, P541, DOI 10.1016/0167-4048(95)00012-W
   MOONEN L, 1996, THESIS U AMSTERDAM
   Ng Kan Ching, 1984, Ph.D. thesis
   NG KC, 1977, NOT AM MATH SOC, V24, pA29
   Nielson F., 1999, Principles of Program Analysis
   OVERSTREET CM, 1994, TR9409 OLD DOM U COM
   Schmidt G, 1997, ADV COMP SCI, P39
   SCHMIT G, 1993, EATCS MONOGRAPHS COM
   Schneider F. B., 2000, ACM Transactions on Information and Systems Security, V3, P30, DOI 10.1145/353323.353382
   [No title captured]
NR 30
TC 3
Z9 4
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR 15
PY 2007
VL 65
IS 2
SI SI
BP 173
EP 194
DI 10.1016/j.scico.2006.01.009
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 144YK
UT WOS:000244832300006
DA 2024-07-18
ER

PT J
AU Amtoft, T
   Banerjee, A
AF Amtoft, Torben
   Banerjee, Anindya
TI A logic for information flow analysis with an application to forward
   slicing of simple imperative programs
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 11th International Static Analysis Symposium (SAS 2004)
CY AUG 26-28, 2004
CL Verona, ITALY
DE abstract interpretation; denotational semantics; frame rule; Hoare
   logic; information flow analysis; program slicing; strongest
   postcondition
AB We specify an information flow analysis for a simple imperative language, using a Hoare-like logic. The logic facilitates static checking of a larger class of programs than can be checked by extant type-based approaches in which a program is deemed insecure when it contains an insecure subprogram. The logic is based on an abstract interpretation of a "prelude" semantics which makes independence between program variables explicit. Unlike other, more precise, approaches based on Hoare logics, our approach does not require a theorem prover to generate invariants. We demonstrate the modularity of our approach by showing that a frame rule holds in our logic. Finally, we show how our logic can be applied to a program transformation, namely, forward slicing: given a derivation of a program in the logic, with the information that variable l is independent of variable h, the slicing transformation systematically creates the forward l-slice of the program: the slice contains all the commands independent of h. We show that the slicing transformation is semantics preserving. (c) 2006 Elsevier B.V. All rights reserved.
C1 Kansas State Univ, Dept Comp & Informat Sci, Manhattan, KS 66506 USA.
C3 Kansas State University
RP Amtoft, T (corresponding author), Kansas State Univ, Dept Comp & Informat Sci, Manhattan, KS 66506 USA.
EM tamtoft@cis.ksu.edu; ab@cis.ksu.edu
CR ABADI M, 1999, ACM S PRINC PROGR LA, P147
   Amtoft T, 2006, ACM SIGPLAN NOTICES, V41, P91, DOI 10.1145/1111320.1111046
   Amtoft T, 2004, LECT NOTES COMPUT SC, V3148, P100
   AMTOFT T, 2004, 20043 CIS TR KANS ST
   Andrews G. R., 1980, ACM Transactions on Programming Languages and Systems, V2, P56, DOI 10.1145/357084.357088
   Banerjee A, 2005, J FUNCT PROGRAM, V15, P131, DOI 10.1017/S0956796804005453
   Barthe G, 2004, P IEEE CSFW, P100, DOI 10.1109/CSFW.2004.1310735
   BELL DE, 1973, MTR2547 MITRE CORP
   Clark D, 2002, COMPUT LANG SYST STR, V28, P3, DOI 10.1016/S0096-0551(02)00006-1
   Cohen E. S., 1978, Foundations of Secure Computation, P297
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   DARVAS A, 2003, 200401 CHALM U TECHN
   DENNING DE, 1977, COMMUN ACM, V20, P504, DOI 10.1145/359636.359712
   erbnk P., 1997, J FUNCT PROGRAM, V7, P557, DOI DOI 10.1017/S0956796897002906
   Giacobazzi R, 2004, ACM SIGPLAN NOTICES, V39, P186, DOI 10.1145/982962.964017
   Goguen J. A., 1982, Proceedings of the 1982 Symposium on Security and Privacy, P11
   HEINTZE N, 1998, ACM S PRINC PROGR LA, P365
   Hunt S, 2006, ACM SIGPLAN NOTICES, V41, P79, DOI 10.1145/1111320.1111045
   HUNT S, 1991, SIGPLAN NOTICES, V26, P154, DOI 10.1145/115866.115881
   Ishtiaq S, 2001, ACM SIGPLAN NOTICES, V36, P14, DOI 10.1145/373243.375719
   Joshi R, 2000, SCI COMPUT PROGRAM, V37, P113, DOI 10.1016/S0167-6423(99)00024-6
   McCullough D., 1987, Proceedings of the 1987 IEEE Symposium on Security and Privacy (Cat. No.87CH2416-6), P161
   Nielson F., 1999, Principles of Program Analysis
   O'Hearn PW., 2001, Local reasoning about programs that alter data structures, volume 2142 of LNCS, V2142, P1
   OHEARN P, 2004, ACM S PRINC PROGR LA, P268
   Pottier F, 2003, ACM T PROGR LANG SYS, V25, P117, DOI 10.1145/596980.596983
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Sabelfeld A, 2004, LECT NOTES COMPUT SC, V3233, P174
   Sabelfeld A, 2003, IEEE J SEL AREA COMM, V21, P5, DOI 10.1109/JSAC.2002.806121
   Sabelfeld A., 2001, Higher-Order and Symbolic Computation, V14, P59, DOI 10.1023/A:1011553200337
   Schmidt DA, 2002, LECT NOTES COMPUT SC, V2566, P245
   Volpano D., 1997, TAPSOFT '97: Theory and Practice of Software Development. 7th International Joint Conference CAAP/FASE. Proceedings, P607, DOI 10.1007/BFb0030629
   Volpano D., 1996, Journal of Computer Security, V4, P167
   [No title captured]
NR 34
TC 21
Z9 24
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 1
PY 2007
VL 64
IS 1
BP 3
EP 28
DI 10.1016/j.scico.2006.03.002
PG 26
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 118ES
UT WOS:000242925700002
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Rodríguez-Carbonell, E
   Kapur, D
AF Rodriguez-Carbonell, E.
   Kapur, D.
TI Automatic generation of polynomial invariants of bounded degree using
   abstract interpretation
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 11th International Static Analysis Symposium (SAS 2004)
CY AUG 26-28, 2004
CL Verona, ITALY
DE abstract interpretation; invariant; ideal of polynomials; Grobner basis
ID PROGRAM; VERIFICATION; DERIVATION
AB A method for generating polynomial invariants of imperative programs is presented using the abstract interpretation framework. It is shown that for programs with polynomial assignments, an invariant consisting of a conjunction of polynomial equalities can be automatically generated for each program point. The proposed approach takes into account tests in conditional statements as well as in loops, insofar as they can be abstracted into polynomial equalities and disequalities. The semantics of each program statement is given as a transformation on polynomial ideals. Merging of execution paths is defined as the intersection of the polynomial ideals associated with each path. For loop junctions, a family of widening operators based on selecting polynomials up to a certain degree is proposed. The presented method has been implemented and successfully tried on many programs. Heuristics employed in the implementation to improve its efficiency are discussed, and tables providing details about its performance are included. (c) 2006 Elsevier B.V. All rights reserved.
C1 Tech Univ Catalonia, Software Dept, ES-08034 Barcelona, Spain.
   Univ New Mexico, Dept Comp Sci, Albuquerque, NM 87131 USA.
C3 Universitat Politecnica de Catalunya; University of New Mexico
RP Rodríguez-Carbonell, E (corresponding author), Tech Univ Catalonia, Software Dept, Jordi Girona,1-3, ES-08034 Barcelona, Spain.
EM erodri@lsi.upc.edu; kapur@cs.unm.edu
RI Carbonell, Enric Rodríguez/H-5301-2015
OI Rodriguez-Carbonell, Enric/0000-0003-1061-3954
CR [Anonymous], 1974, Mathematical Theory of Computation
   [Anonymous], 1969, Seminumerical algorithms
   Bardet M., 2004, P INT C POL SYST SOL, P71
   BOURDONCLE F, 1993, LECT NOTES COMPUTER, V735, P128
   BRESSOUD DM, 1989, FACTORIZATION PRIMAL
   CHADHA R, 1993, J SYMB COMPUT, V15, P705, DOI 10.1016/S0747-7171(06)80010-6
   Clarisó R, 2005, LECT NOTES COMPUT SC, V3536, P188
   COHEN E, 1990, PROGRAMMING 1990S
   Cousot P., 1977, C RECORD 1977 ACM S, P238
   COUSOT P, **DROPPED REF**
   COUSOT P, 1977, P 1977 S ART INT PRO, P1
   Cousot Patrick, 1976, P 2 INT S PROGRAMMIN
   Davenport J.H., 1988, COMPUTER ALGEBRA SYS
   Delzanno G, 2003, FORM METHOD SYST DES, V23, P257, DOI 10.1023/A:1026276129010
   Dijkstra E. W., 1976, A Discipline of Pro-gramming
   FREIRE P, 2002, P FREIRE CREATIONS
   GIACOBAZZI R, 2004, LECT NOTES COMPUTER, V3148
   Grayson D., Macaulay 2, a software system for research in algebraic geometry
   Kaldewaij A., 1990, Programming: The Derivation of Algorithms
   KAPUR D, 1988, ARTIF INTELL, V37, P61, DOI 10.1016/0004-3702(88)90050-1
   Kapur D., 1985, P 9 INT JOINT C ARTI, V2, P1146
   KAPUR D, 2003, P 10 INT C APPL COMP
   KARR M, 1976, ACTA INFORM, V6, P133, DOI 10.1007/BF00268497
   Little J., 1992, Ideals, varieties, and algorithms. An introduction to computational algebraic geometry and commutative algebra
   Müller-Olm M, 2004, LECT NOTES COMPUT SC, V3142, P1016
   Müller-Olm M, 2004, INFORM PROCESS LETT, V91, P233, DOI 10.1016/j.ipl.2004.05.004
   MULLEROLM M, 2004, POPL, P330
   Rodríguez-Carbonell E, 2005, LECT NOTES COMPUT SC, V3407, P325
   RODRIGUEZCARBON.E, 2004, P INT S SYMB ALG COM, P266
   Sankaranarayanan S, 2004, POPL, P318
   SHELBURNE BJ, ZUSES Z3 SQUARE ROOT
   WEGBREIT B, 1974, COMMUN ACM, V17, P102, DOI 10.1145/360827.360850
   [No title captured]
NR 33
TC 55
Z9 61
U1 0
U2 2
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 1
PY 2007
VL 64
IS 1
BP 54
EP 75
DI 10.1016/j.scico.2006.03.003
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 118ES
UT WOS:000242925700004
OA Bronze
DA 2024-07-18
ER

PT J
AU Carlstrom, BD
   Chung, J
   Chafi, H
   McDonald, A
   Minh, CC
   Hammond, L
   Kozyrakis, C
   Olukotun, K
AF Carlstrom, Brian D.
   Chung, JaeWoong
   Chafi, Hassan
   McDonald, Austen
   Minh, Chi Cao
   Hammond, Lance
   Kozyrakis, Christos
   Olukotun, Kunle
TI Executing Java programs with transactional memory
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT OOPSLA Workshop on Synchronization and Concurrent in Object-Oriented
   Languages
CY 2005
CL San Diego, CA
DE transactions; feedback optimization; multiprocessor architecture
AB Parallel programming is difficult due to the complexity of dealing with conventional lock-based synchronization. To simplify parallel programming, there have been a number of proposals to support transactions directly in hardware and eliminate locks completely. Although hardware support for transactions has the potential to completely change the way parallel programs are written, initially transactions will be used to execute existing parallel programs. In this paper we investigate the implications of using transactions to execute existing parallel Java programs. Our results show that transactions can be used to support all aspects of Java multithreaded programs, and once Java virtual machine issues have been addressed, the conversion of a lock-based application into transactions is largely straightforward. The performance that these converted applications achieve is equal to or sometimes better than the original lock-based implementation. (c) 2006 Elsevier B.V. All rights reserved.
C1 Stanford Univ, Comp Syst Lab, Stanford, CA 94305 USA.
C3 Stanford University
RP Carlstrom, BD (corresponding author), Stanford Univ, Comp Syst Lab, 353 Serra Mall,Gates 458, Stanford, CA 94305 USA.
EM bdc@stanford.edu
OI Olukotun, Kunle/0000-0002-8779-0636
CR Adve SV, 1996, COMPUTER, V29, P66, DOI 10.1109/2.546611
   Agarwal V, 2000, PROCEEDING OF THE 27TH INTERNATIONAL SYMPOSIUM ON COMPUTER ARCHITECTURE, P248, DOI [10.1109/ISCA.2000.854395, 10.1145/342001.339691]
   Allen E., 2005, FORTRESS LANGUAGE SP
   Alpern B, 2000, IBM SYST J, V39, P211, DOI 10.1147/sj.391.0211
   Ananian CS, 2005, INT S HIGH PERF COMP, P316, DOI 10.1109/HPCA.2005.41
   [Anonymous], OOPSLA
   [Anonymous], 2005, OOPSLA
   BLUNDELL C, 2005, WORKSH DUPL DEC DEB
   *BROADC CORP, 2002, BROADC BCM1250 MULT
   Campione M., 2000, JAVA TUTORIAL, V3rd
   CARLSTROM BD, 2006, PLDI 06 P 2006 ACM S
   Chen MK, 2003, CONF PROC INT SYMP C, P434, DOI 10.1109/ISCA.2003.1207020
   FLANAGAN C, 2005, WORKSH T SYSTEMS
   Garzarán MJ, 2003, NINTH INTERNATIONAL SYMPOSIUM ON HIGH-PERFORMANCE COMPUTER ARCHITECTURE, PROCEEDINGS, P191, DOI 10.1109/HPCA.2003.1183537
   Hammond L, 2004, CONF PROC INT SYMP C, P102
   Hammond L, 2000, IEEE MICRO, V20, P71, DOI 10.1109/40.848474
   HAMMOND L, 2004, ASPLOS 11, P1
   Harris Tim., 2005, PPoPP '05: Proceedings of the tenth ACM SIGPLAN symposium on Principles and practice of parallel programming, P48, DOI DOI 10.1145/1065944.1065952
   Herlihy M, 2003, P 22 ANN S PRINCIPLE, P92
   HERLIHY M., 1993, P 20 ANN INT S COMPU, P289, DOI DOI 10.1145/165123.165164.URL
   *IBM CORP, 1994, SC23246502 IBM CORP
   *JSR, 2004, 133 JSR
   KALLA R, 2003, HOT CHIPS 15 S STANF
   KAPIL S, 2003, HOT CHIPS 15 S PAL A
   Knight Tom., 1986, LFP 86, P105
   Kongetira P, 2005, IEEE MICRO, V25, P21, DOI 10.1109/MM.2005.35
   Krishnan V, 1999, IEEE T COMPUT, V48, P866, DOI 10.1109/12.795218
   LEA D, 2004, PACKAGE UTIL CONCURR
   Liang S., 1999, Java native interface: programmers guide and reference, V1
   Martinez J.F., 2002, ASPLOS X, P18
   McDonald A, 2005, PACT 2005: 14TH INTERNATIONAL CONFERENCE ON PARALLEL ARCHITECTURES AND COMPILATION TECHNIQUES, P63
   MCDONALD A, 2006, P 33 INT S COMP ARCH
   MOSS E, 2005, OOPSLA 2005 WORKSH S
   Moss J.E., 1985, NESTED T APPROACH RE
   PRABHU MK, 2003, P PRINC PRACT PAR PR, P1
   Pugh W, 2000, CONCURRENCY-PRACT EX, V12, P445, DOI 10.1002/1096-9128(200005)12:6<445::AID-CPE484>3.0.CO;2-A
   Rajwar R, 2005, CONF PROC INT SYMP C, P494, DOI 10.1109/ISCA.2005.54
   Rajwar R, 2001, INT SYMP MICROARCH, P294, DOI 10.1109/MICRO.2001.991127
   RAJWAR R, 2002, ASPLOS 10, P5
   Sandén B, 2004, COMPUTER, V37, P20, DOI 10.1109/MC.2004.1297297
   Shavit N., 1995, Proceedings of the Fourteenth Annual ACM Symposium on Principles of Distributed Computing, P204, DOI 10.1145/224964.224987
   SOHI GS, 1995, ACM COMP AR, P414, DOI 10.1109/ISCA.1995.524580
   *SPEC, 2000, SPECJBB2000 BENCHM
   Steffan JG, 1998, 1998 FOURTH INTERNATIONAL SYMPOSIUM ON HIGH-PERFORMANCE COMPUTER ARCHITECTURE, PROCEEDINGS, P2, DOI 10.1109/HPCA.1998.650541
   Vitek J, 2004, LECT NOTES COMPUT SC, V2986, P249
   WALL DW, 1991, SIGPLAN NOTICES, V26, P176, DOI 10.1145/106973.106991
   Welc A, 2004, LECT NOTES COMPUT SC, V3086, P519
NR 47
TC 8
Z9 12
U1 1
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 1
PY 2006
VL 63
IS 2
BP 111
EP 129
DI 10.1016/j.scico.2006.05.006
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 103XT
UT WOS:000241921200002
OA Bronze
DA 2024-07-18
ER

PT J
AU Mudiam, SV
   Gannod, GC
   Lindquist, TE
AF Mudiam, SV
   Gannod, GC
   Lindquist, TE
TI Synthesizing and integrating legacy components as services using
   adapters
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE service-oriented computing; software architecture; re-engineering
AB Legacy applications are prime candidates for software reuse: they have been relied upon for several years and often have a strong organizational commitment. Migrating existing legacy applications is a very natural requirement when moving to and adopting a new technology. A service-based development paradigm is one in which components are viewed as services. In this model, services interact and can be providers or consumers of data and behavior. This paper describes an architecture-based approach for the synthesis of services from legacy components and their subsequent integration with service-requesting client applications. (c) 2005 Elsevier B.V. All rights reserved.
C1 Arizona State Univ, Polytech, Div Comp Studies, Mesa, AZ 85212 USA.
   Arizona State Univ, Dept Comp Sci & Engn, Tempe, AZ 85287 USA.
C3 Arizona State University; Arizona State University; Arizona State
   University-Tempe
RP Arizona State Univ, Polytech, Div Comp Studies, 7001 E Williams Field Rd,Sutton Hall Suite 140M, Mesa, AZ 85212 USA.
EM gannod@asu.edu
CR ALLEN R, 1997, ACM T SOFTWARE ENG M
   CHIKOFSKY EJ, 1990, IEEE SOFTWARE, V7, P13, DOI 10.1109/52.43044
   EDWARDS WK, 1999, CORE JINI
   Fremantle P, 2002, COMMUN ACM, V45, P77, DOI 10.1145/570907.570935
   Gamma E., 1994, Design patterns: Elements of reusable object-oriented software
   Gannod GC, 2000, SEVENTH WORKING CONFERENCE ON REVERSE ENGINEERING - PROCEEDINGS, P128, DOI 10.1109/WCRE.2000.891460
   GARLAN D, 1997, P CASCON 97 TOR ONT, P169
   JAEGER MC, 2005, 1 INT C INT ENT SOFT
   LUCKHAM DC, 1995, IEEE T SOFTWARE ENG, V21, P717, DOI 10.1109/32.464548
   Meyer B, 2001, COMPUTER, V34, P92, DOI 10.1109/2.940017
   *OWL SERV COAL, 2003, OWL S SEM MARK WEB S
   Shaw M., 1996, SOFTWARE ARCHITECTUR
   Stal M, 2002, COMMUN ACM, V45, P71, DOI 10.1145/570907.570934
   Timm JTE, 2005, 2005 IEEE International Conference on Web Services, Vols 1 and 2, Proceedings, P313
   Wohlstadter E, 2001, PROC INT CONF SOFTW, P243, DOI 10.1109/ICSE.2001.919098
NR 15
TC 2
Z9 2
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD APR
PY 2006
VL 60
IS 2
BP 134
EP 148
DI 10.1016/j.scico.2005.10.002
PG 15
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 019VA
UT WOS:000235863600003
OA Bronze
DA 2024-07-18
ER

PT J
AU Allen, EE
   Cartwright, R
AF Allen, EE
   Cartwright, R
TI Safe instantiation in Generic Java
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT Academic Emergency Medicine Consensus Conference on Ethical Conduct of
   Resuscitation Research
CY MAY 21, 2005
CL New York, NY
DE Generic Java; mixins; type-checking; generics; type systems
AB This paper introduces the "Safe Instantiation Principle", a new design criterion for evaluating extensions of Java that support generic types. The paper initially focuses on the GJ and NextGen formulations of Generic Java and the implications of safe instantiation for both approaches. Then it applies the safe instantiation principle to the problem of adding mixins to Java as generic types. Finally, it shows that the hygienic formulation of mixins is the only way to maintain safe instantiation and type soundness in Java with mixins and to prevent the introduction of insidious bugs with no clearly defined point of blame. (c) 2005 Elsevier B.V. All rights reserved.
C1 Rice Univ, Houston, TX 77005 USA.
C3 Rice University
EM eric.allen@sun.com; cork@rice.edu
OI Allen, Eric/0000-0003-3685-6524
CR AGESEN O, 1997, OOPLSA 1997
   ALLEN E, 2003, OOPSLA 2003      OCT
   Allen Eric, 2002, IFIP WG2 1 WORK C GE
   Allen Eric, 2002, PRINCIPLES PRACTICE
   ANCONA D, 2000, LNCS
   Bloch J., COMMUNICATION
   BRACHA G, 1998, OOPSLA 1998      OCT
   Bracha Gilad., GENERICS JAVA PROGRA
   BYOUS J, 1998, OOPSLA 98        OCT
   FLATT M, 1999, FORMAL SYNTAX SEMANT, V1523
   HSIA JI, 2005, SIGCSE 05, P327
   Tyma P, 1998, COMMUN ACM, V41, P38, DOI 10.1145/276609.276617
NR 12
TC 8
Z9 9
U1 0
U2 4
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN
PY 2006
VL 59
IS 1-2
BP 26
EP 37
DI 10.1016/j.scico.2005.07.003
PG 12
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 993HZ
UT WOS:000233946500003
DA 2024-07-18
ER

PT J
AU Field, J
   Goyal, D
   Ramalingam, G
   Yahav, E
AF Field, J
   Goyal, D
   Ramalingam, G
   Yahav, E
TI Typestate verification: Abstraction techniques and complexity results
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 10th International Static Analysis Symposium (SAS 2003)
CY JUN 11-13, 2003
CL SAN DIEGO, CA
SP ACM
DE typestate verification; computational complexity; pointer analysis;
   alias analysis
ID SOFTWARE
AB We consider the problem of typestate verification for shallow programs; i.e., programs where pointers from program variables to heap-allocated objects are allowed, but where heap-allocated objects may not themselves contain pointers. We prove a number of results relating the complexity of verification to the nature of the finite state machine used to specify the property. Some properties are shown to be intractable, but others which appear to be quite similar admit polynomial-time verification algorithms. Our results serve to provide insight into the inherent complexity of important classes of verification problems. In addition, the program abstractions used for the polynomial-time verification algorithms may be of independent interest. (c) 2005 Elsevier B.V. All rights reserved.
C1 IBM Corp, Thomas J Watson Res Ctr, Yorktown Hts, NY 10598 USA.
   Tel Aviv Univ, Sch Comp Sci, IL-69978 Tel Aviv, Israel.
C3 International Business Machines (IBM); Tel Aviv University
RP IBM Corp, Thomas J Watson Res Ctr, POB 704, Yorktown Hts, NY 10598 USA.
EM jfield@watson.ibm.com; dgoyal@calypto.com; rama@watson.ibm.com;
   yahave@post.tau.ac.il
CR [Anonymous], 2001, P ACM SIGPLAN 2001 C, DOI DOI 10.1145/378795.378846
   [Anonymous], LNCS
   [Anonymous], 1992, ACM LETT PROGRAM LAN
   [Anonymous], 1991, Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages
   ASHCRAFT K, 2002, P IEEE S SEC PRIV MA
   CLARKE E, 2000, CAV00 JUL
   Clarke EM, 1999, MODEL CHECKING, P1
   CORBETT J, 2000, EXTRACTING FINITE ST, P439
   Das Manuvir., 2002, PLDI, P57, DOI DOI 10.1145/512529.512538
   DELINE R, 2002, P ACM C PROGR LANG D, P13
   DeLine Robert., 2001, Proceedings of the ACM SIGPLAN 2001 conference on Programming language design and implementation, P59, DOI DOI 10.1145/381694.378811
   DIJKSTRA EW, 1976, DISCIPLINE PROGRAMIN
   FIELD J, 2002, RC22673 IBM
   FLANAGAN C, 2002, P ACM SIGPLAN 2002 C, P234
   Foster J. S., 2002, SIGPLAN Notices, V37, P1, DOI 10.1145/543552.512531
   Giacobazzi R, 2000, J ACM, V47, P361, DOI 10.1145/333979.333989
   Graf S, 1997, LECT NOTES COMPUT SC, V1254, P72
   HENZINGER TA, 2002, S PRINC PROGR LANG, P58
   KUNCAK V, 2002, P ACM S PRINC PROGR
   MUTH R, 2000, P ACM S PRINC PROGR, P67
   Naumovich G, 1997, PROC INT CONF SOFTW, P594, DOI 10.1145/253228.253489
   NIELSON F, 2001, PRINCIPLES PROGRAM A
   Ramalingam G, 2002, ACM SIGPLAN NOTICES, V37, P83, DOI 10.1145/543552.512540
   RAMALINGAM G, 1994, ACM T PROGR LANG SYS, V16, P1467, DOI 10.1145/186025.186041
   Reps ThomasW., 1995, P ACM S PRINCIPLES P, P49
   STROM RE, 1986, IEEE T SOFTWARE ENG, V12, P157, DOI 10.1109/TSE.1986.6312929
   STROM RE, 1993, IEEE T SOFTWARE ENG, V19, P478, DOI 10.1109/32.232013
   YAHAV E, 2004, P ACM SIGPLAN 2004 C, P25, DOI DOI 10.1145/996841.996846
NR 28
TC 7
Z9 8
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT
PY 2005
VL 58
IS 1-2
BP 57
EP 82
DI 10.1016/j.scico.2005.02.004
PG 26
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 968PY
UT WOS:000232175700004
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Porter, R
   Coplien, JO
   Winn, T
AF Porter, R
   Coplien, JO
   Winn, T
TI Sequences as a basis for pattern language composition
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE sequence; HOPP; idioms; AOP; aspects; telecommunications
AB Pattern languages have begun to appear and mature as a presentation of the structures and processes that support the building of complex software systems. A pattern language describes how to compose structures in a particular domain such as telecommunications, client-server architecture, or object-oriented programming, to achieve system-level architectures that are greater than the sum of their parts. A problem lurks on the horizon: How do you compose patterns from multiple domains-from multiple pattern languages-in a single system? For example, today there is nothing other than an ad hoc approach to combining the pattern languages for telecommunications and for object-oriented design to build object-oriented telecommunications systems from the respective pattern languages. To understand the solution to this dilemma, it pays to examine sequences: an important aspect of pattern application that is often overlooked. Sequences are the loci of concern about interleaving patterns, whether from a single pattern language or multiple pattern languages. Sequences are critical because pattern languages represent long-term archives of the rhythms of critical, recurring sequences. (c) 2004 Elsevier B.V. All rights reserved.
C1 Flinders Univ S Australia, Sch Informat & Engn, Adelaide, SA 5001, Australia.
   Care Of N Cent Coll, Free Univ Brussels, Naperville, IL 60540 USA.
C3 Flinders University South Australia
RP Porter, R (corresponding author), Flinders Univ S Australia, Sch Informat & Engn, POB 2100, Adelaide, SA 5001, Australia.
EM ron.porter@infoeng.flinders.edu.au
CR Adams Michael., 1998, The Patterns Handbook: Techniques, Strategies, and Applications, P189
   Alexander C., 2002, The nature of order
   ALEXANDER C, 1993, FORESHADOWING 21 CEN
   Alexander C., 1975, The Oregon Experiment
   Alexander C., 1964, Notes on the Synthesis of Form
   ALEXANDER C, 1997, NATURE ORDER BOOK 2, P299
   Alexander C., 1979, The Timeless Way of Building
   [Anonymous], 1977, PATTERN LANGUAGE TOW
   [Anonymous], P 6 EUR C PATT LANG
   BERGMANS L, 2001, COMMUN ACM, V44, P5157
   COPLIEN J, 2000, PATTERNS LANGUAGES P, V4, P167
   COPLIEN J, 2001, P 3 INT S GEN COMP B
   COPLIEN J, 2000, LECT NOTES COMPUTER, V2177, P37
   Coplien J.O., 1999, Multi-Paradigm Design for C++
   COPLIEN JO, 2000, THESIS VRIJE U BRUSS
   GRENANDER U, 1996, ELEMENTS PATTERN THE, P81
   Grinter R., 1998, Proceedings of Computer-Supported Cooperative Work, P393
   Hall EdwardT., 1983, DANCE LIFE OTHER DIM
   HARRISON N, 2003, ORG PATTERNS AGILE S
   MESZAROS G, 1996, PATTERN LANGUAGES PR, V2
   2003, HOOP PATTERN LANGUAG
NR 21
TC 7
Z9 8
U1 0
U2 1
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD APR
PY 2005
VL 56
IS 1-2
BP 231
EP 249
DI 10.1016/j.scico.2004.11.014
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 908SR
UT WOS:000227811000014
DA 2024-07-18
ER

PT J
AU Vincenzi, AMR
   Maldonado, JC
   Wong, WE
   Delamaro, ME
AF Vincenzi, AMR
   Maldonado, JC
   Wong, WE
   Delamaro, ME
TI Coverage testing of Java programs and components
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Java program testing; Java component testing; Java bytecode; structural
   testing; control-flow testing; data-flow testing
AB Although software testing is a crucial activity in the software development process, only recently have more sound and consistent testing tools become available for testing Java programs and their components. These tools support mostly functional and control-flow based structural criteria. In this paper we explore control-flow and data-flow based coverage criteria to support the testing of Java programs and/or components. We also describe a testing tool, named JaBUTi, which can be used by both the component developer and the component user to test Java-based components and/or systems. To achieve this goal, the tool works at the bytecode level such that no source code is required during the testing activity. We illustrate these ideas and concepts with an example extracted from the literature. (c) 2004 Elsevier B.V. All rights reserved.
C1 Univ Sao Paulo, Inst Ciencias Matemat & Computacao, BR-13560 Sao Carlos, SP, Brazil.
   Univ Texas, Dept Comp Sci, Richardson, TX 75080 USA.
   Ctr Univ Euripides Marilia, BR-17525901 Marilia, SP, Brazil.
C3 Universidade de Sao Paulo; University of Texas System; University of
   Texas Dallas
RP Univ Sao Paulo, Inst Ciencias Matemat & Computacao, Av Trab Sao Carlense 400,Cx Postal 668, BR-13560 Sao Carlos, SP, Brazil.
EM jcmaldon@icmc.usp.br
RI Maldonado, José Carlos/E-9290-2011; Vincenzi, Auri Marcelo
   Rizzo/D-8465-2013; Delamaro, Marcio/D-5180-2011
OI Vincenzi, Auri Marcelo Rizzo/0000-0001-5902-1672; Delamaro,
   Marcio/0000-0001-7535-5891
CR AGRWAL H, 1994, SIGPLAN SIGACT S PRI, P25
   [Anonymous], 2 ACM SIGSOFT S FDN
   [Anonymous], 17 INT C TECHN OBJ O
   Beizer Boris, 1995, Black-box testing: techniques for functional testing of software and systems
   BEYDEDA S, 2001, 1 AICCSA ACS IEEE IN, P328
   BINNS A, 1996, INTR 96 NY C NEW YOR
   Boujarwah AS, 2000, INFORM SOFTWARE TECH, V42, P765, DOI 10.1016/S0950-5849(00)00119-1
   Bundell GA, 2000, INTERNATIONAL CONFERENCE ON SOFTWARE METHODS AND TOOLS, PROCEEDING, P137, DOI 10.1109/SWMT.2000.890429
   CHAMBERS C, 1999, WORKSH LANG COMP PAR
   CHEN MH, 1999, 10 INT S SOFTW REL E, P73
   CORPORATION P, AUTOMATIC JAVA SOFTW
   CORPORATION P, USING DESIGN CONTRAC
   ECK K, 2002, JUNIT COOKBOOK
   EDGE T, GLASS JAR TOOLKIT
   Edwards SH, 2001, SOFTW TEST VERIF REL, V11, P97, DOI 10.1002/stvr.224
   EDWARDS SH, 2001, 1 WORKSH SPEC VER CO, P14
   HARROLD MJ, 1999, 1 WORKSH TEST DISTR
   Horgan J., 1991, INT S SOFTWARE TESTI, P87, DOI 10.1145/120807.120815
   MALDONADO JC, 1991, THESIS DCA FEE UNICA
   Myers Glenford J., 2011, The Art of Software Testing
   Orso A, 2001, PROC IEEE INT CONF S, P716, DOI 10.1109/ICSM.2001.972790
   OSTRAND TJ, 1991, S SOFTW TEST AN VER, P74
   PIWOWARSKI P, 1993, PROC INT CONF SOFTW, P287, DOI 10.1109/ICSE.1993.346035
   RAPPS S, 1985, IEEE T SOFTWARE ENG, V11, P367, DOI 10.1109/TSE.1985.232226
   RESEARCH S, USERS GUIDE TCAT JAV
   SOUNDARAJAN N, 2001, OOPSALA 01 WORKSH SP, P4
   SOUTER AL, 2000, 9 INT S SOFTW TEST A, P49
   Szyperski C., 2002, COMPONENT SOFTWARE, V2nd
   VILELA PRS, 1997, 10 INT SOFTW QUAL WE, P1
   VINCENZI AMR, 2003, 2 UK SOFTW TEST WORK, P21
   VINCENZI MR, 2003, 17 SBES BRAS S SOFTW, P79
   Wang YX, 1999, PROCEEDINGS OF THE THIRD EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, P186, DOI 10.1109/CSMR.1999.756697
   WONG WE, 1994, 5 IEEE INT S SOFTW R, P20
   Zhao JJ, 2000, P INT COMP SOFTW APP, V24, P486, DOI 10.1109/CMPSAC.2000.884771
   MAN MACHINE SYSTEMS
NR 35
TC 21
Z9 22
U1 1
U2 8
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD APR
PY 2005
VL 56
IS 1-2
BP 211
EP 230
DI 10.1016/j.scico.2004.11.013
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 908SR
UT WOS:000227811000013
OA Bronze
DA 2024-07-18
ER

PT J
AU Damm, W
   Josko, B
   Pnueli, A
   Votintseva, A
AF Damm, W
   Josko, B
   Pnueli, A
   Votintseva, A
TI A discrete-time UML semantics for concurrency and communication in
   safety-critical applications
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 1st International Symposium on Formal Methods for Components and Objects
CY NOV 05-11, 2002
CL LEIDEN, NETHERLANDS
SP Lorentz Ctr, IST Project Omega, Dutch Inst Programming Res & Algorithm, Royal Netherlands Acad Arts & Sci, Centrum Wiskunde Informat, Leiden Inst Adv Comp Sci
AB We define a subset krtUML of UML which is rich enough to express such modelling entities of UML, used in real-time applications, as active objects, dynamic object creation and destruction, dynamically changing communication topologies, combinations of synchronous and asynchronous communication, and shared memory usage through object attributes. We define a formal interleaving semantics for this kernel language by associating with each model M E krtUML a symbolic transition system STS(M). We briefly outline how to compile models of industrial systems making use of generalisation hierarchies, weak and strong aggregation, and hierarchical state-machines into krtUML. The main aim of the paper is to provide an executable semantics for krtUML suitable for the formal verification of temporal model properties with existing model-checking tools. (C) 2004 Published by Elsevier B.V.
C1 OFFIS, Oldenburg, Germany.
   Weizmann Inst Sci, IL-76100 Rehovot, Israel.
C3 Weizmann Institute of Science
RP Damm, W (corresponding author), OFFIS, Oldenburg, Germany.
EM damm@offis.de; josko@offis.de; amir@wisdom.weizmann.ac.il;
   votintseva@offis.de
CR ALVAREZ JM, 2001, P UML 2001
   [Anonymous], UNIFIED MODELING LAN
   [Anonymous], IEEE COMPUT
   [Anonymous], 1991, The Temporal Logic of Reactive and Concurrent Systems
   Börger E, 2000, LECT NOTES COMPUT SC, V1816, P293
   BORGER E, 2000, LNCS, V1912, P223
   CLARK T, 2000, FEASABILITY STUDY RE
   CLARK T, 2001, P FASE 2001, P17
   Clark T., 2001, P WORKSH LANG DESCR
   COMPTON K, 2000, DYNAMIC BEHAV UML MO, P25
   DAMM W, 2003, LNCS, V2852
   DAMM W, 2003, FORMAL SEMANTICS UML
   ENGELS G, 2000, P 3 INT C UML 2000 O
   EVANS AS, 1998, 2 N FORM METH WORKSH
   GRAF S, 2003, SEMANTICS TIMES EXTE
   HUSSMANN H, 2002, P 6 WORLD C INT DES
   *ILOG INC, 2002, RHAPS
   Kim SK, 1999, LECT NOTES COMPUT SC, V1723, P83
   KLEPPE A, 2001, UNIFICATION STATIC D
   KWON G, 2000, P 3 INT C UML 2000 O
   Lilius J., 1999, VUML TOOL VERIFYING
   MEYER B, 1998, EIFFEL LANGUAGE
   OBER I, 2001, THESIS I NATL POLYTE
   *OBJ MAN GROUP, 2002, UML 1 4 ACT SEM FIN
   *OBJ MAN GROUP, 2003, UML PROF SCHED PERF
   *OBJ MAN GROUP, 2003, UN MOD LANG SUP V2 0
   OVERGAARD G, 1998, UML 1998
   OVERGAARD G, 2000, P DEF PREC SEM UML
   OVERGAARD G, 2000, LNCS, V1783
   *RAT SOFTW CORP, 2003, RAT ROS FAM
   REGGIO G, 2001, FASE 2001
   REGGIO G, 2000, FEAS 2000
   RICHTERS M, 1998, LNCS, V1507, P449
   *TEL AB, 2003, TEL TAU
NR 34
TC 27
Z9 27
U1 0
U2 0
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR
PY 2005
VL 55
IS 1-3
BP 81
EP 115
DI 10.1016/j.scico.2004.05.012
PG 35
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 899FQ
UT WOS:000227130700004
DA 2024-07-18
ER

PT J
AU Pedreschi, D
   Ruggieri, S
AF Pedreschi, D
   Ruggieri, S
TI On logic programs that always succeed
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
ID TERMINATION
AB We introduce a generalized definition of SLD-resolution admitting restrictions on atom and/or clause selectability. Instances of these restrictions include delay declarations, input-consuming unification and guarded clauses.
   In the context of such a generalization of SLD-resolution, we offer a theoretical framework to reason about programs and queries such that all derivations are successful. We provide a characterization of those programs and queries which allows to reuse existing methods from the literature on termination and verification of Prolog programs. (C) 2003 Elsevier B.V. All rights reserved.
C1 Univ Pisa, Dipartimento Informat, I-156125 Pisa, Italy.
C3 University of Pisa
RP Univ Pisa, Dipartimento Informat, Via F Buonarroti 2, I-156125 Pisa, Italy.
EM ruggieri@di.unipi.it
RI Ruggieri, Serena/K-2294-2016
OI PEDRESCHI, DINO/0000-0003-4801-3225
CR [Anonymous], 1994, The Godel Programming Language
   Apt K. R., 1994, Formal Aspects of Computing, V6, P743, DOI 10.1007/BF01213601
   Apt K. R., 1997, From Logic Programming to Prolog
   Apt KR, 1995, LECT NOTES COMPUT SC, V936, P66
   APT KR, 1993, INFORM COMPUT, V106, P109, DOI 10.1006/inco.1993.1051
   APT KR, 1993, LECT NOTES COMPUTER, V711, P1
   BEZEM M, 1993, J LOGIC PROGRAM, V15, P79, DOI 10.1016/0743-1066(93)90014-8
   Bossi A, 2002, THEOR PRACT LOG PROG, V2, P125, DOI 10.1017/S1471068401001326
   Bossi A, 1999, LECT NOTES COMPUT SC, V1559, P219, DOI 10.1007/3-540-48958-4_12
   BOSSI A, 1997, LECT NOTES COMPUTER, V1463, P28
   BOSSI A, 2001, LECT NOTES COMPUTER, V2028
   BRONSARD TK, 1992, P JOINT INT C S LOG, P321
   Dart Philip W., 1992, TYPES LOGIC PROGRAMM, P157
   De Schreye D, 1994, J LOGIC PROGRAM, V20, P199, DOI 10.1016/0743-1066(94)90027-2
   Debray S, 1997, LOGIC PROGRAMM, P48
   Dijkstra E. W., 1976, A Discipline of Pro-gramming
   DRABENT W, 1988, THEOR COMPUT SCI, V59, P133, DOI 10.1016/0304-3975(88)90099-0
   KUNEN K, 1989, J LOGIC PROGRAM, V7, P978
   MAHER MJ, 1987, P 4 INT C LOG PROGR, P858
   Pedreschi D, 2002, THEOR PRACT LOG PROG, V2, P369, DOI 10.1017/S1471068402001400
   Pedreschi D, 1999, LOGIC PROGRAMM, P350
   RUGGIERI S, 1999, THESIS U PISA
   SHAPIRO E, 1989, COMPUT SURV, V21, P412, DOI 10.1145/72551.72555
   Smaus JG, 2001, THEOR PRACT LOG PROG, V1, P447, DOI 10.1017/S1471068401001107
   Smaus JG, 1999, LOGIC PROGRAMM, P335
   *SWED I COMP SCI I, 2003, SICSTUS PROL US MAN
NR 26
TC 1
Z9 1
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD AUG-SEP
PY 2003
VL 48
IS 2-3
BP 163
EP 196
DI 10.1016/S0167-6423(03)00023-6
PG 34
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 719YB
UT WOS:000185231700004
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Vitek, J
   Bryce, C
   Oriol, M
AF Vitek, J
   Bryce, C
   Oriol, M
TI Coordinating processes with secure spaces
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 3rd International Conference on Coordination Languages and Architectures
CY 1999
CL AMSTERDAM, NETHERLANDS
DE coordination languages; Linda; security; access control
AB The Linda shared space model and its derivatives provide great flexibility for building parallel and distributed applications composed of independent processes. However, the shared space model does not provide protection against untrustworthy processes. Linda processes communicate by reading and writing messages in a globally visible data space, so a malicious process can launch any number of security attacks. This paper presents the design of a new coordination model which extends Linda with fine-grained access control. The semantics of the model is presented in the context of a process calculus. A prototype of our model, called SECOS, has been implemented in JAVA. (C) 2002 Published by Elsevier Science B.V.
C1 Purdue Univ, Dept Comp Sci, CERIAS, W Lafayette, IN 47907 USA.
   Univ Geneva, Object Syst Grp, Geneva, Switzerland.
C3 Purdue University System; Purdue University; University of Geneva
RP Purdue Univ, Dept Comp Sci, CERIAS, W Lafayette, IN 47907 USA.
EM jv@cs.purdue.edu; bryce@cui.unige.ch; oriol@cui.unige.ch
RI Vitek, Jan/J-9051-2014
OI Bryce, Ciaran/0000-0001-5963-6829
CR Abadi M., 1997, P 4 ACM C COMP COMM
   Amadio R., 1996, LNCS, V1119, P147
   [Anonymous], 1999, JavaSpaces Principles, Patterns, and Practice
   Boudol Gerard., 1992, Tech. Rep. 1702
   BRYCE C, 1999, P 1 INT S AG SYST AP, P176
   Busi N, 1998, THEOR COMPUT SCI, V192, P167, DOI 10.1016/S0304-3975(97)00149-7
   CARRIERO N, 1995, LECT NOTES COMPUTER, V924, P66
   CIANCARINI P, 1997, LECT NOTES COMPUTER, V1222
   CIANCARINI P, 1997, P ESEC WORKSH MOB NE
   DAMI L, 1996, OBJECT APPL
   De Nicola R, 1998, IEEE T SOFTWARE ENG, V24, P315, DOI 10.1109/32.685256
   DENICOLA R, 1996, LECT NOTES COMPUT SC, V1061, P160
   GELERNTER D, 1985, ACM T PROGR LANG SYS, V7, P80, DOI 10.1145/2363.2433
   GELERNTER D, 1989, LECT NOTES COMPUTER, V365
   GIFFORD DK, 1982, COMMUN ACM, V25, P274, DOI 10.1145/358468.358493
   HONDA K, 1992, LECT NOTES COMPUT SC, V612, P21
   HUPFER S, 1990, YALEUDCSR766 RR
   JELLINGHAUS R, 1990, ACM SIGPLAN NOTICES, V25
   MATSOUKA S, 1988, P ACM OBJ OR PROGR S
   MINSKY N, 2001, J APPL ARTIF INTELL, V15
   Picco G. P., 1999, Proceedings of the 1999 International Conference on Software Engineering (IEEE Cat. No.99CB37002), P368, DOI 10.1109/ICSE.1999.841027
   PICCO GP, 1998, WUCS9821
   PINAKIS J, 1992, P 15 AUSTR COMP SCI, P731
   POLZE A, 1993, P TECHN OBJ OR LANG
   Tolksdorf R, 1998, SCI COMPUT PROGRAM, V31, P359, DOI 10.1016/S0167-6423(97)00027-0
   TOLKSDORF R, 1993, 19937 TU BERL
   TOLKSDORF R, 1997, IEEE WORKSH EN TECHN
NR 27
TC 24
Z9 28
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN-FEB
PY 2003
VL 46
IS 1-2
BP 163
EP 193
AR PII S0167-6423(02)00090-4
DI 10.1016/S0167-6423(02)00090-4
PG 31
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 633UT
UT WOS:000180302700007
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Giner-Miguelez, J
   Gómez, A
   Cabot, J
AF Giner-Miguelez, Joan
   Gomez, Abel
   Cabot, Jordi
TI DescribeML: A dataset description tool for machine learning
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Datasets; Machine learning; Model-driven engineering; Fairness;
   Domain-specific languages
AB Datasets are essential for training and evaluating machine learning models. However, they are also the root cause of many undesirable model behaviors, such as biased predictions. To address this issue, the machine learning community is proposing as a best practice the adoption of common guidelines for describing datasets. However, these guidelines are based on natural language descriptions of the dataset, hampering the automatic computation and analysis of such descriptions. To overcome this situation, we present DescribeML, a language engineering tool to precisely describe machine learning datasets in terms of their composition, provenance, and social concerns in a structured format. The tool is implemented as a Visual Studio Code extension.(c) 2023 The Author(s). Published by Elsevier B.V. This is an open access article under the CC BY-NC-ND license (http://creativecommons .org /licenses /by-nc -nd /4 .0/).
C1 [Giner-Miguelez, Joan; Gomez, Abel] Univ Oberta Catalunya UOC, Internet Interdisciplinary Inst, Barcelona, Spain.
   [Cabot, Jordi] Luxembourg Inst Sci & Technol LIST, Esch Sur Alzette, Luxembourg.
C3 UOC Universitat Oberta de Catalunya; Luxembourg Institute of Science &
   Technology
RP Giner-Miguelez, J (corresponding author), Univ Oberta Catalunya UOC, Internet Interdisciplinary Inst, Barcelona, Spain.
EM jginermi@uoc.edu
RI Giner-Miguelez, Joan/JHT-5185-2023; Gómez, Abel/J-8652-2012
OI Giner-Miguelez, Joan/0000-0003-2335-6977; Gómez,
   Abel/0000-0003-1344-8472
CR Bender Emily M., 2018, Transactions of the Association for Computational Linguistics, V6, P587, DOI [10.1162/tacl_a_00041, DOI 10.1162/TACLA00041]
   Gebru T, 2021, COMMUN ACM, V64, P86, DOI 10.1145/3458723
   Giner-Miguelez J, 2023, J COMPUT LANG, V76, DOI 10.1016/j.cola.2023.101209
   Heger Amy K., 2022, Proceedings of the ACM on Human-Computer Interaction, DOI 10.1145/3555760
   Holland Sarah, 2020, Data Protection and Privacy, V3, P1, DOI DOI 10.5040/9781509932771.CH-001
   Paullada A, 2021, PATTERNS, V2, DOI 10.1016/j.patter.2021.100336
NR 6
TC 1
Z9 1
U1 3
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN
PY 2024
VL 231
AR 103030
DI 10.1016/j.scico.2023.103030
EA OCT 2023
PG 5
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA X7DE6
UT WOS:001100005300001
OA hybrid
DA 2024-07-18
ER

PT J
AU Timm, N
   Botha, J
   Jordaan, S
AF Timm, Nils
   Botha, Josua
   Jordaan, Steven
TI Max-SAT-based synthesis of optimal and Nash equilibrium strategies for
   multi-agent systems
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Bounded model checking; Multi -agent systems; Strategy synthesis; Max
   -SAT -based optimisation; Nash equilibrium
ID MODEL CHECKING; SATISFIABILITY; ALLOCATION
AB We present techniques for verifying strategic abilities of multi-agent systems via SAT-based and Max-SAT-based bounded model checking. In our approach we focus on systems of agents that pursue goals with regard to the allocation of shared resources. One of the problems to be solved is to determine whether a coalition of agents has a joint strategy that guarantees the achievement of all resource goals, irrespective of how the opposing agents in the system act. Our approach does not only decide whether such a winning strategy exists, but also synthesises the strategy.Winning strategies are particularly useful in the presence of an opposition because they guarantee that each agent of the coalition will achieve its individual goal, no matter how the opposition behaves. However, for the grand coalition consisting of all agents in the system, following a winning strategy may involve an inefficient use of resources. A winning strategy will only ensure that each agent will reach its goal at some time. But in practical resource allocation problems it may be of additional importance that once-off resource goals will be achieved as early as possible or that repetitive goals will be achieved as frequent as possible. We present an extended technique that synthesises strategies that are collectively optimal with regard to such quantitative performance criteria.A collectively optimal strategy allows to optimise the overall system performance but it may favour certain agents over others. In competitive scenarios a Nash equilibrium strategy may be a more adequate solution. It guarantees that no agent can improve its individual performance by unilaterally deviating from the strategy. We developed an algorithm that initially generates a collectively optimal strategy and then iteratively alternates this strategy until the strategy becomes a Nash equilibrium or a cycle of non-equilibrium strategies is detected.Our approach is based on a propositional logic encoding of strategy synthesis problems. We reduce the synthesis of winning strategies to the Boolean satisfiability problem and the synthesis of optimal and Nash equilibrium strategies to the maximum satisfiability problem. Hence, efficient SAT-and Max-SAT solvers can be employed to solve the encoded strategy synthesis problems.(c) 2023 The Author(s). Published by Elsevier B.V. This is an open access article under the CC BY license (http://creativecommons .org /licenses /by /4 .0/).
C1 [Timm, Nils; Botha, Josua; Jordaan, Steven] Univ Pretoria, Dept Comp Sci, Pretoria, South Africa.
C3 University of Pretoria
RP Timm, N (corresponding author), Univ Pretoria, Dept Comp Sci, Pretoria, South Africa.
EM ntimm@cs.up.ac.za
CR Almagor S, 2018, PROCEEDINGS OF THE TWENTY-SEVENTH INTERNATIONAL JOINT CONFERENCE ON ARTIFICIAL INTELLIGENCE, P35
   Alur R, 2002, J ACM, V49, P672, DOI 10.1145/585265.585270
   Alur R, 1998, LECT NOTES COMPUT SC, V1427, P521, DOI 10.1007/BFb0028774
   [Anonymous], 2004, P 3 INT JOINT C AUTO
   Bacchus F., 2022, DEP COMPUTER SCI S B
   Baier C, 2008, PRINCIPLES OF MODEL CHECKING, P1
   Biere A, 2009, FRONT ARTIF INTEL AP, V185, P457, DOI 10.3233/978-1-58603-929-5-457
   Bulling N, 2022, AUTON AGENT MULTI-AG, V36, DOI 10.1007/s10458-021-09531-9
   Chang F., 2010, 2010 IEEE 3rd International Conference on Cloud Computing (CLOUD 2010), P418, DOI 10.1109/CLOUD.2010.38
   Cimatti A., 2000, Int. J. Softw. Tools for Technol. Transf. (STTT), V2, P410, DOI [DOI 10.1007/S100090050046, 10.1007/s100090050046]
   Cohen M, 2009, 21ST INTERNATIONAL JOINT CONFERENCE ON ARTIFICIAL INTELLIGENCE (IJCAI-09), PROCEEDINGS, P721
   De Masellis R, 2019, LECT NOTES ARTIF INT, V11450, P30, DOI 10.1007/978-3-030-14174-5_3
   Dimitrova R, 2020, ACTA INFORM, V57, P107, DOI 10.1007/s00236-019-00348-4
   Fazekas K., 2020, DEP COMPUTER SCI R B
   Finkbeiner B, 2018, LECT NOTES COMPUT SC, V10981, P144, DOI 10.1007/978-3-319-96145-3_8
   Fisman D, 2010, LECT NOTES COMPUT SC, V6015, P190, DOI 10.1007/978-3-642-12002-2_16
   Gutierrez J, 2019, PROCEEDINGS OF THE TWENTY-EIGHTH INTERNATIONAL JOINT CONFERENCE ON ARTIFICIAL INTELLIGENCE, P329
   Gutierrez J, 2021, ACTA INFORM, V58, P585, DOI 10.1007/s00236-020-00385-4
   Gutierrez J, 2017, PROCEEDINGS OF THE TWENTY-SIXTH INTERNATIONAL JOINT CONFERENCE ON ARTIFICIAL INTELLIGENCE, P1067
   Gutierrez J, 2017, ARTIF INTELL-AMST, V248, P123, DOI 10.1016/j.artint.2017.04.003
   HANSEN P, 1990, COMPUTING, V44, P279, DOI 10.1007/BF02241270
   Jamroga W, 2020, J ARTIF INTELL RES, V68, P817
   Kroening Daniel, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P557, DOI 10.1007/978-3-642-22110-1_44
   KUROSE JF, 1989, IEEE T COMPUT, V38, P705, DOI 10.1109/12.24272
   Li W, 2014, J PARALLEL DISTR COM, V74, P1775, DOI 10.1016/j.jpdc.2013.09.012
   Liao Xiaojuan, 2014, THESIS KYUSHU U
   Lomuscio A, 2007, ARTIF INTELL, V171, P1011, DOI 10.1016/j.artint.2007.05.005
   Lomuscio A, 2017, INT J SOFTW TOOLS TE, V19, P9, DOI 10.1007/s10009-015-0378-x
   Luo XY, 2006, LECT NOTES COMPUT SC, V4304, P69
   Martins R., 2020, MAXSAT EVAL, V2021, P24
   Mukherjee A, 2019, IEEE ACCESS, V7, P131163, DOI 10.1109/ACCESS.2019.2940821
   NASH JF, 1950, P NATL ACAD SCI USA, V36, P48, DOI 10.1073/pnas.36.1.48
   Pilecki J, 2017, J LOGIC COMPUT, V27, P1871, DOI 10.1093/logcom/exw032
   Raimondi F., 2007, J APPL LOGIC, V5, P235, DOI DOI 10.1016/J.JAL.2005.12.010
   Schewe S, 2008, LECT NOTES COMPUT SC, V5126, P373, DOI 10.1007/978-3-540-70583-3_31
   Semsar-Kazerooni E, 2009, AUTOMATICA, V45, P2205, DOI 10.1016/j.automatica.2009.06.006
   Timm N, 2021, LECT NOTES COMPUT SC, V13130, P53, DOI 10.1007/978-3-030-92137-8_4
   Timm N, 2020, SCI COMPUT PROGRAM, V200, DOI 10.1016/j.scico.2020.102532
   Wooldridge M, 2016, AAAI CONF ARTIF INTE, P4184
NR 39
TC 1
Z9 1
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN
PY 2023
VL 228
AR 102946
DI 10.1016/j.scico.2023.102946
EA APR 2023
PG 28
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA E1WC0
UT WOS:000973511500001
OA Green Published, hybrid
DA 2024-07-18
ER

PT J
AU Bianchini, R
   Dagnino, F
AF Bianchini, Riccardo
   Dagnino, Francesco
TI QuERYAGT: Asynchronous global types in co-logic programming
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 23rd International Conference on Coordination Models and Languages
   (COORDINATION)
CY JUN 14-18, 2021
CL ELECTR NETWORK
DE Global types; Multiparty sessions; Prolog; Coinduction
AB Global types are at the core of communication-based programming. They allow a high-level specification of protocols involving many participants and enforce good safety and liveness properties, such as deadlock freedom, and the absence of locked participants and orphan messages. The present software provides an implementation in co-logic programming of a novel formalism of global types for sessions with asynchronous communications, where we use coinduction to properly handle the coinductive syntax of global types and processes. It also offers a simple query language to write sessions and global types, providing primitives for type checking. (c) 2022 Elsevier B.V. All rights reserved.
C1 [Bianchini, Riccardo; Dagnino, Francesco] Univ Genoa, DIBRIS, Genoa, Italy.
C3 University of Genoa
RP Bianchini, R (corresponding author), Univ Genoa, DIBRIS, Genoa, Italy.
EM riccardo.bianchini@edu.unige.it; francesco.dagnino@dibris.unige.it
FU MUR [PRIN 2020TL3X8X]
FX The authors would like to thank the anonymous referees who provided
   useful and detailed comments on a previous version of the paper. This
   work was partially funded by the MUR project ?T -LADIES? (PRIN
   2020TL3X8X) .
CR Ancona D, 2015, FUND INFORM, V140, P221, DOI 10.3233/FI-2015-1252
   Bianchini Riccardo, 2021, Coordination Models and Languages. 23rd IFIP WG 6.1 International Conference, COORDINATION 2021 Held as Part of the 16th International Federated Conference on Distributed Computing Techniques, DisCoTec 2021. Proceedings. Lecture Notes in Computer Science (LNCS 12717), P134, DOI 10.1007/978-3-030-78142-2_9
   Bravetti M, 2017, INFORM COMPUT, V256, P300, DOI 10.1016/j.ic.2017.07.010
   Castellani I, 2023, Arxiv, DOI [arXiv:2102.00865, 10.48550/ARXIV.2102.00865, DOI 10.48550/ARXIV.2102.00865]
   Dagnino Francesco, 2021, Coordination Models and Languages. 23rd IFIP WG 6.1 International Conference, COORDINATION 2021 Held as Part of the 16th International Federated Conference on Distributed Computing Techniques, DisCoTec 2021. Proceedings. Lecture Notes in Computer Science (LNCS 12717), P41, DOI 10.1007/978-3-030-78142-2_3
   Gay S, 2017, RIV PUBL SER AUTOMAT, pXV
   Honda K, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P273, DOI 10.1145/2827695
   Honda K, 2016, J ACM, V63, DOI 10.1145/2827695
   Kouzapas D, 2016, PROCEEDINGS OF THE 18TH INTERNATIONAL SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING (PPDP 2016), P146, DOI 10.1145/2967973.2968595
   Lange J, 2017, LECT NOTES COMPUT SC, V10203, P441, DOI 10.1007/978-3-662-54458-7_26
   Neykova R, 2013, LECT NOTES COMPUT SC, V8174, P358, DOI 10.1007/978-3-642-40787-1_25
   Parr T., 2013, The Definitive ANTLR 4 Reference
   Simon L, 2006, LECT NOTES COMPUT SC, V4079, P330, DOI 10.1007/11799573_25
   Simon Luke, 2006, Ph. D. Dissertation
   Wielemaker J, 2012, THEOR PRACT LOG PROG, V12, P67, DOI 10.1017/S1471068411000494
   Yoshida N., 2014, Trustworthy Global Computing. Ed. by, V8358, P22, DOI [10.1007/978-3-319-05119-2_3, DOI 10.1007/978-3-319-05119-2, 10.1007/978-3-319-05119-2]
NR 16
TC 0
Z9 0
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN
PY 2023
VL 225
SI SI
AR 102895
DI 10.1016/j.scico.2022.102895
EA NOV 2022
PG 5
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 7T5ZH
UT WOS:000911523700006
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Ceresa, MA
   Jaskelioff, MJ
AF Ceresa, Martin A.
   Jaskelioff, Mauro J.
TI Effectful improvement theory
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Relational cost analysis; Functional programming optimization;
   Improvement theory; Algebraic effect
ID OPERATIONAL SEMANTICS; NOTIONS
AB Optimizing programs is hard. Not only one must preserve semantics, but one also needs to ensure that an optimization truly makes the program better. The first part, preserving program semantics, has been, and still is, the subject of much research. We follow a line of work that starts with Morris' observational equivalence, continues with Abramsky's applicative bisimilarity and Howe's method, and concludes in a recent abstract formalization of applicative bisimilarity in the presence of algebraic effects by Dal Lago, Gavazzo and Levy. The second part, ensuring that an optimization truly makes the program better, is a path less traveled, with the improvement theory of Sands being the most prominent example. In this work, we connect these two parts by obtaining an abstract theory of improvements based on effectful applicative bisimilarity that extends Sands' notion of improvement to effectful languages.(c) 2022 Elsevier B.V. All rights reserved.
C1 [Ceresa, Martin A.; Jaskelioff, Mauro J.] Univ Nacl Rosario, Ave Pellegrini 250, RA-2000 Rosario, Santa Fe, Argentina.
   [Ceresa, Martin A.; Jaskelioff, Mauro J.] Consejo Nacl Invest Cient & Tecn, CIFASIS, Blvd 27 Febrero 210 Bis, RA-2000 Rosario, Santa Fe, Argentina.
C3 National University of Rosario; Consejo Nacional de Investigaciones
   Cientificas y Tecnicas (CONICET)
RP Ceresa, MA (corresponding author), Univ Nacl Rosario, Ave Pellegrini 250, RA-2000 Rosario, Santa Fe, Argentina.
EM mceresa@fceia.unr.edu.ar; jaskelioff@cifasis-conicet.gov.ar
OI Ceresa, Martin/0000-0003-4691-5831
FU Consejo Nacional de Investigaciones Cientificas y Tecnicas (CONICET);
   Agencia Nacional de Promocion Cientifica y Tecnica [PICT 2016-0464]
FX This work was funded by the Consejo Nacional de Investigaciones
   Cientificas y Tecnicas (CONICET) , and Agencia Nacional de Promocion
   Cientifica y Tecnica (PICT 2016-0464) . We would like to thank the
   anonymous reviewers for they thoughtful reviews. Their helpful insights
   and observations helped us to correct and greatly improve this article.
CR Abramsky S., 1990, LAZY LAMBDA CALCULUS, P65
   Atkey R, 2009, J FUNCT PROGRAM, V19, P335, DOI 10.1017/S095679680900728X
   Çiçek E, 2017, ACM SIGPLAN NOTICES, V52, P316, DOI 10.1145/3093333.3009858
   Dal Lago U, 2017, P 32 ANN ACM IEEE S, P1
   Dal Lago U, 2019, LECT NOTES COMPUT SC, V11423, P263, DOI 10.1007/978-3-030-17184-1_10
   Dal Lago U, 2013, ACM SIGPLAN NOTICES, V48, P167, DOI 10.1145/2480359.2429090
   Dal Lago U, 2012, RAIRO-THEOR INF APPL, V46, P413, DOI 10.1051/ita/2012012
   Dal Lago U, 2011, IEEE S LOG, P133, DOI 10.1109/LICS.2011.22
   Danielsson NA, 2012, ACM SIGPLAN NOTICES, V47, P127, DOI 10.1145/2398856.2364546
   Davey B. A., 2002, INTRO LATTICES ORDER, V2nd, DOI DOI 10.1017/CBO9780511809088
   FELLEISEN M, 1991, SCI COMPUT PROGRAM, V17, P35, DOI 10.1016/0167-6423(91)90036-W
   FELLEISEN M, 1992, THEOR COMPUT SCI, V103, P235, DOI 10.1016/0304-3975(92)90014-7
   GOGUEN JA, 1977, J ACM, V24, P68, DOI 10.1145/321992.321997
   Gustavsson J, 1999, 3 INT WORKSH HIGH OR
   Hackett J, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341718
   Hoffmann J, 2015, LECT NOTES COMPUT SC, V9032, P132, DOI 10.1007/978-3-662-46669-8_6
   Hoffmann J, 2012, ACM T PROGR LANG SYS, V34, DOI 10.1145/2362389.2362393
   HOWE DJ, 1989, FOURTH ANNUAL SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P198
   Howe DJ, 1996, INFORM COMPUT, V124, P103, DOI 10.1006/inco.1996.0008
   Jaskelioff M, 2010, THEOR COMPUT SCI, V411, P4441, DOI 10.1016/j.tcs.2010.09.011
   Jaskelioff M, 2009, LECT NOTES COMPUT SC, V5502, P64, DOI 10.1007/978-3-642-00590-9_6
   Koutavas V, 2011, ELECTRON NOTES THEOR, V276, P215, DOI 10.1016/j.entcs.2011.09.023
   Lassen Soren B, 1998, ELECTRON NOTES THEOR, V10, P246, DOI DOI 10.1016/S1571-0661(05)80704-2
   Levy PB, 2006, ELECTRON NOTES THEOR, V164, P85, DOI 10.1016/j.entcs.2006.06.006
   Liang Sheng, 1995, P 22 ACM SIGPLAN SIG, P333, DOI DOI 10.1145/199448.199528
   Lüth C, 2002, ACM SIGPLAN NOTICES, V37, P133, DOI 10.1145/583852.581492
   MacLane S, 2013, GRADUATE TEXTS MATH
   Madiot J.M, 2014, BISIMULATIONS UP TO, DOI [10.1007 /978 -3 -662 -44584 -6 _8, DOI 10.1007/978-3-662-44584-6_8]
   Manes E.G, 1986, ALGEBRAIC APPROACHES, DOI [/10. 1007 /978 -1 -4612 -4962 -7, DOI 10.1007/978-1-4612-4962-7]
   MOGGI E, 1991, INFORM COMPUT, V93, P55, DOI 10.1016/0890-5401(91)90052-4
   Moran A, 2003, SCI COMPUT PROGRAM, V46, P99, DOI 10.1016/S0167-6423(02)00088-6
   Moran A., 1999, Conference Record of POPL '99. 26th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P43, DOI 10.1145/292540.292547
   Morris James Hiram, 1968, Ph.D. thesis
   Plotkin Gordon D., 2001, Lecture Notes in Computer Science, V2030, P1, DOI [10.1007/3-540-45315-6_1, DOI 10.1007/3-540-45315-6_1]
   Pous D, 2019, FORM ASP COMPUT, V31, P733, DOI 10.1007/s00165-019-00497-w
   Ramsey N, 2002, ACM SIGPLAN NOTICES, V37, P154, DOI 10.1145/565816.503288
   Sands D., 1997, Conference Record of POPL '97: The 24th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P428, DOI 10.1145/263699.263760
   Sands D, 1999, IMPROVEMENT THEORY I, P275
   SANDS D, 1991, P 4 GLASG WORKSH FUN, P298, DOI DOI 10.1007/978-1-4471-3196-024
   Schmidt-Schauss M, 2015, PROCEEDINGS OF THE 17TH INTERNATIONAL SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING (PPDP 2015), P220, DOI 10.1145/2790449.2790512
   SONDERGAARD H, 1992, COMPUT J, V35, P514, DOI 10.1093/comjnl/35.5.514
   STRASSEN V, 1965, ANN MATH STAT, V36, P423, DOI 10.1214/aoms/1177700153
   Streicher Thomas., 2006, Domain-theoretic foundations of functional programming
NR 43
TC 0
Z9 0
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAY 1
PY 2022
VL 217
AR 102792
DI 10.1016/j.scico.2022.102792
EA MAR 2022
PG 31
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 0D6NG
UT WOS:000776109200001
DA 2024-07-18
ER

PT J
AU Hesselink, WH
AF Hesselink, Wim H.
TI Trylock, a case for temporal logic and eternity variables
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 7th International Conference on Rigorous State-Based Methods (ABZ)
CY MAY 27-29, 2020
CL Ulm, GERMANY
DE Concurrency; CTL; LTL; Prophecy variables; Simulation
ID REFINEMENT
AB An example is given of a software algorithm that implements its specification in linear time temporal logic (LTL), but not in branching time temporal logic (CTL). In LTL, a prophecy of future behaviour is needed to prove the simulation. Eternity variables are used for this purpose. The final phase of the proof is a refinement mapping in which two threads exchange roles.
   The example is a software implementation of trylock in a variation of the fast mutual exclusion algorithm of Lamport (1987). It has been used fruitfully for the construction of software algorithms for high performance mutual exclusion. (C) 2021 The Author(s). Published by Elsevier B.V.
EM w.h.hesselink@rug.nl
OI Hesselink, Wim/0000-0002-1413-4320
CR ABADI M, 1991, THEOR COMPUT SCI, V82, P253, DOI 10.1016/0304-3975(91)90224-P
   [Anonymous], 2001, LECT NOTES COMPUTER
   Chandy K.M., 1988, PARALLEL PROGRAM DES
   Clarke. E. M., 1982, LOGICS OF PROGRAMS, P52, DOI [10 . 1007 / BFb0025774, DOI 10.1007/BFB0025774]
   DIJKSTRA EW, 1965, COMMUN ACM, V8, P569, DOI 10.1145/365559.365617
   Hesselink W. H., 2005, ACM Transactions on Computational Logic, V6, P175, DOI 10.1145/1042038.1042044
   Hesselink W.H, 2020, PVS PROOF SCRIPTS TR
   Hesselink WH, 2004, SCI COMPUT PROGRAM, V51, P47, DOI 10.1016/j.scico.2003.06.001
   Hesselink WH, 2008, INFORM COMPUT, V206, P108, DOI 10.1016/j.ic.2007.10.003
   Hesselink WH, 2007, ACTA INFORM, V44, P123, DOI 10.1007/s00236-007-0044-1
   Hesselink WH, 2021, FORM ASP COMPUT, V33, P185, DOI 10.1007/s00165-020-00528-x
   Hesselink WH, 2018, CONCURR COMP-PRACT E, V30, DOI 10.1002/cpe.4183
   Hesselink WH, 2011, SCI COMPUT PROGRAM, V76, P739, DOI 10.1016/j.scico.2009.09.006
   LAMPORT L, 1987, ACM T COMPUT SYST, V5, P1, DOI 10.1145/7351.7352
   Lamport L, 1997, THEOR COMPUT SCI, V179, P333, DOI 10.1016/S0304-3975(96)00153-3
   LYNCH N, 1995, INFORM COMPUT, V121, P214, DOI 10.1006/inco.1995.1134
   Misra J., 2001, A Discipline of Multiprogramming
   Nain S, 2007, LECT NOTES COMPUT SC, V4762, P19
   Owre S., 2020, PVS VERSION 7 1 SYST
NR 19
TC 1
Z9 1
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD APR 1
PY 2022
VL 216
AR 102767
DI 10.1016/j.scico.2021.102767
EA JAN 2022
PG 12
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA ZG5YX
UT WOS:000760335200005
OA hybrid, Green Published
DA 2024-07-18
ER

PT J
AU Clarisó, R
   Cabot, J
AF Clariso, Robert
   Cabot, Jordi
TI User-driven diverse scenario exploration in model finders
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Model-driven engineering; Verification and validation; Testing;
   Clustering; Diversity
ID OCL; ALGORITHMS; VALIDATION
AB Model finders can build instances of declarative specifications that satisfy a set of correctness constraints. Some model finders ensure some degree of diversity among the instances they compute. Nevertheless, each model finder uses its own definition of diversity, that may or may not match designer intent. In this paper, we propose a procedure that enables designers to capture the desired notion of diversity they are looking for. Using a simple domain-specific language, they can specify what elements in the specification are relevant when comparing the differences between two instances. This information can then be used to make any model finder diversity-aware while using it as a black box. As a proof of concept, this approach has been implemented on top of the Alloy Analyzer. (c) 2021 The Author(s). Published by Elsevier B.V. This is an open access article under the CC BY license (http://creativecommons.org/licenses/by/4.0/).
C1 [Clariso, Robert; Cabot, Jordi] Univ Oberta Catalunya UOC, Barcelona, Spain.
   [Cabot, Jordi] ICREA, Barcelona, Spain.
C3 UOC Universitat Oberta de Catalunya; ICREA
RP Clarisó, R (corresponding author), Univ Oberta Catalunya UOC, Barcelona, Spain.
EM rclariso@uoc.edu
RI Cabot, Jordi/P-7723-2015; Clariso, Robert/B-5450-2009
OI Clariso, Robert/0000-0001-9639-0186
FU H2020 ECSEL Joint Undertaking Project MegaM@Rt2 [737494]; H2020 ECSEL
   Joint Undertaking Project AIDOaRt [101007350]; H2020 ECSEL Joint
   Undertaking Project TRANSACT [101007260]; Spanish Ministry of Economy
   and Competitiveness through the project ODA [TIN2016-75944-R]; Agencia
   Estatal de Investigacion through the project LOCOSS
   [PID2020-114615RB-I00]
FX This work was partially funded by the H2020 ECSEL Joint Undertaking
   Projects MegaM@Rt2 (grant number 737494) , AIDOaRt (grant agreement
   number 101007350) and TRANSACT (grant number 101007260) ; the Spanish
   Ministry of Economy and Competitiveness through the project ODA
   (TIN2016-75944-R) and the Agencia Estatal de Investigacion through the
   project LOCOSS (PID2020-114615RB-I00) . We would like to thank the
   anonymous reviewers for their comments, which have greatly improved the
   paper.
CR Aggarwal CC, 2010, ADV DATABASE SYST, V40, P275, DOI 10.1007/978-1-4419-6045-0_9
   Ali S, 2013, IEEE T SOFTWARE ENG, V39, P1376, DOI 10.1109/TSE.2013.17
   Angles R, 2017, ACM COMPUT SURV, V50, DOI 10.1145/3104031
   [Anonymous], 2005, B BOOK ASSIGNING PRO
   Azurat A., 2002, UUCS2002007 I INF CO
   Babur Ö, 2017, LECT NOTES COMPUT SC, V10139, P510, DOI 10.1007/978-3-319-51963-0_40
   Babur Ö, 2016, PROCEEDINGS OF THE 4TH INTERNATIONAL CONFERENCE ON MODEL-DRIVEN ENGINEERING AND SOFTWARE DEVELOPMENT (MODELSWARD 2016), P361
   Babur Ö, 2016, IEEE INT CONF AUTOM, P888, DOI 10.1145/2970276.2975938
   Babur Ö, 2016, LECT NOTES COMPUT SC, V9764, P3, DOI 10.1007/978-3-319-42061-5_1
   Balasubramanian D., 2007, ELECT COMMUN EASST, V1
   Basciani F, 2016, LECT NOTES COMPUT SC, V9694, P342, DOI 10.1007/978-3-319-39696-5_21
   Batot E, 2016, 19TH ACM/IEEE INTERNATIONAL CONFERENCE ON MODEL DRIVEN ENGINEERING LANGUAGES AND SYSTEMS (MODELS'16), P374, DOI 10.1145/2976767.2976785
   Brucker AD, 2008, LECT NOTES COMPUT SC, V4961, P97, DOI 10.1007/978-3-540-78743-3_8
   Cabot J, 2014, J SYST SOFTWARE, V93, P1, DOI 10.1016/j.jss.2014.03.023
   Cabot Jordi, 2012, Formal Methods for Model-Driven Engineering. 12th International School of Formal Methods for the Design of Computer, Communication and Software Systems (SFM 2012). Advanced Lectures, P58, DOI 10.1007/978-3-642-30982-3_3
   Clariso Robert, 2020, Rigorous State-Based Methods. 7th International Conference, ABZ 2020. Proceedings. Lecture Notes in Computer Science (LNCS 12071), P27, DOI 10.1007/978-3-030-48077-6_3
   Clavel M, 2006, LECT NOTES COMPUT SC, V4019, P368
   Cunha A, 2014, LECT NOTES COMPUT SC, V8411, P17
   Dania C, 2016, 19TH ACM/IEEE INTERNATIONAL CONFERENCE ON MODEL DRIVEN ENGINEERING LANGUAGES AND SYSTEMS (MODELS'16), P65, DOI 10.1145/2976767.2976774
   de Vries Gerben K. D., 2013, Machine Learning and Knowledge Discovery in Databases. European Conference, ECML PKDD 2013. Proceedings: LNCS 8188, P606, DOI 10.1007/978-3-642-40988-2_39
   Dutra R, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P549, DOI 10.1145/3180155.3180248
   Ferdjoukh A., 2017, ICSEA INT C SOFTW EN
   Ferdjoukh A., 2016, SEKE SOFTWARE ENG KN, P105
   Ferdjoukh A, 2018, INT J ADV SOFTW, V11, P131
   Galinier F., 2016, META METAHEURISTICS, P171
   Geng Li, 2012, Statistical Analysis and Data Mining, V5, P265, DOI 10.1002/sam.11153
   Ghosh S, 2018, COMPUT SCI REV, V27, P88, DOI 10.1016/j.cosrev.2017.11.002
   Gomez Juan Jose Cadavid, 2012, 2012 IEEE Fifth International Conference on Software Testing, Verification and Validation (ICST 2012), P131, DOI 10.1109/ICST.2012.93
   González CA, 2014, INFORM SOFTWARE TECH, V56, P821, DOI 10.1016/j.infsof.2014.03.003
   Hao Wu, 2017, Integrated Formal Methods. 13th International Conference, IFM 2017. Proceedings: LNCS 10510, P348, DOI 10.1007/978-3-319-66845-1_23
   Hilken F, 2018, SOFTW SYST MODEL, V17, P885, DOI 10.1007/s10270-016-0568-3
   Jackson Daniel, 2006, Software abstractions: Logic, language, and analysis
   Jackson E.K, 2013, P INT C EMB SOFTW EM, P1, DOI [10.1109/EMPSOFT.2013.6658589, DOI 10.1109/EMPSOFT.2013.6658589]
   Kuhlmann M, 2011, LECT NOTES COMPUT SC, V6705, P290, DOI 10.1007/978-3-642-21952-8_21
   Leuschel M, 2005, LECT NOTES COMPUT SC, V3455, P6
   Leuschel Michael, 2008, International Journal on Software Tools for Technology Transfer, V10, P185, DOI 10.1007/s10009-007-0063-9
   Montaghami V, 2017, LECT NOTES COMPUT SC, V10202, P22, DOI 10.1007/978-3-662-54494-5_2
   Mougenot A, 2009, LECT NOTES COMPUT SC, V5562, P130, DOI 10.1007/978-3-642-02674-4_10
   Murtagh F, 2012, WIRES DATA MIN KNOWL, V2, P86, DOI 10.1002/widm.53
   Nadel A, 2011, LECT NOTES COMPUT SC, V6695, P287
   Narayanan A, 2016, IEEE IJCNN, P4701, DOI 10.1109/IJCNN.2016.7727817
   Nelson T, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P232, DOI 10.1109/ICSE.2013.6606569
   Petre M, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P722, DOI 10.1109/ICSE.2013.6606618
   Plazar Q, 2019, IEEE INT CONF SOFTW, P240, DOI 10.1109/ICST.2019.00032
   ROUSSEEUW PJ, 1987, J COMPUT APPL MATH, V20, P53, DOI 10.1016/0377-0427(87)90125-7
   Rull G, 2015, SOFTW SYST MODEL, V14, P953, DOI 10.1007/s10270-013-0350-8
   Semerath O., 2020, P 23 ACMIEEE INT C M, P187
   Semeráth O, 2020, INT J SOFTW TOOLS TE, V22, P57, DOI 10.1007/s10009-019-00530-6
   Semeráth O, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P969, DOI 10.1145/3180155.3180186
   Semeráth O, 2018, LECT NOTES COMPUT SC, V10802, P227, DOI 10.1007/978-3-319-89363-1_13
   Shervashidze N, 2011, J MACH LEARN RES, V12, P2539
   Shervashidze Nino, 2009, P INT C ART INT STAT, P488
   Siglidis G, 2020, J MACH LEARN RES, V21
   Soltana G., 2020, ARXIV190200397, V29
   Soltana G, 2017, IEEE INT CONF AUTOM, P872, DOI 10.1109/ASE.2017.8115698
   Sugiyama M, 2018, BIOINFORMATICS, V34, P530, DOI 10.1093/bioinformatics/btx602
   Szárnyas G, 2016, 19TH ACM/IEEE INTERNATIONAL CONFERENCE ON MODEL DRIVEN ENGINEERING LANGUAGES AND SYSTEMS (MODELS'16), P87, DOI 10.1145/2976767.2976786
   Tortak E, 2007, LECT NOTES COMPUT SC, V4424, P632
   Vadlamudi SG, 2016, AAAI CONF ARTIF INTE, P776
   Varro D., 2018, Graph Transformation, Specifications, and Nets, P285
   Varró D, 2007, SCI COMPUT PROGRAM, V68, P214, DOI 10.1016/j.scico.2007.05.004
   Vishwanathan SVN, 2010, J MACH LEARN RES, V11, P1201
   Wu H, 2016, INT J INF SYST MODEL, V7, P23, DOI 10.4018/IJISMD.2016070102
   Xu R, 2005, IEEE T NEURAL NETWOR, V16, P645, DOI 10.1109/TNN.2005.845141
NR 64
TC 1
Z9 1
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR 1
PY 2022
VL 215
AR 102745
DI 10.1016/j.scico.2021.102745
EA NOV 2021
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA YN9RV
UT WOS:000747588600008
OA hybrid, Green Published
DA 2024-07-18
ER

PT J
AU Xue, MQ
   Oliveira, BCDS
AF Xue, Mingqi
   Oliveira, Bruno C. D. S.
TI A dependently typed calculus with polymorphic subtyping
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Type systems; Dependent types; Subtyping; Polymorphism
ID PURE TYPE SYSTEMS; UNIFICATION
AB A polymorphic subtyping relation, which relates more general types to more specific ones, is at the core of many modern functional languages. As those languages start moving towards dependently typed programming a natural question is how can polymorphic subtyping be adapted to such settings.
   This paper presents the dependent implicitly polymorphic calculus (lambda(for all)(I)): a simple dependently typed calculus with polymorphic subtyping. The subtyping relation in lambda(for all)(I) generalizes the well-known polymorphic subtyping relation by Odersky and L-I(for all) (1996). Because lambda(for all)(I) is dependently typed, integrating subtyping in the calculus is non-trivial. To overcome many of the issues arising from integrating subtyping with dependent types, the calculus employs unified subtyping, which is a technique that unifies typing and subtyping into a single relation. Moreover, lambda(for all)(I) employs explicit casts instead of a conversion rule, allowing unrestricted recursion to be naturally supported. We prove various non-trivial results, including type soundness and transitivity of unified subtyping. lambda(for all)(I) and all corresponding proofs are mechanized in the Coq theorem prover. (C) 2021 Elsevier B.V. All rights reserved.
C1 [Xue, Mingqi; Oliveira, Bruno C. D. S.] Univ Hong Kong, Hong Kong, Peoples R China.
C3 University of Hong Kong
RP Xue, MQ (corresponding author), Univ Hong Kong, Hong Kong, Peoples R China.
EM mqxue@cs.hku.hk; bruno@cs.hku.hk
RI dos Santos Oliveira, Bruno Cesar/I-7977-2013
FU Hong Kong Research Grant Council [17209519, 17209520]
FX We are grateful to anonymous reviewers that helped improving the
   presentation of our work. This work has been sponsored by Hong Kong
   Research Grant Council projects number 17209519 and 17209520.
CR Abel A, 2011, LECT NOTES COMPUT SC, V6690, P10, DOI 10.1007/978-3-642-21691-6_5
   Accattoli B, 2016, LECT NOTES COMPUT SC, V10017, P206, DOI 10.1007/978-3-319-47958-3_12
   Altenkirch T, 2010, LECT NOTES COMPUT SC, V6009, P40, DOI 10.1007/978-3-642-12251-4_5
   Amin N., 2012, FOOL
   Amin N, 2014, ACM SIGPLAN NOTICES, V49, P233, DOI [10.1145/2660193.2660216, 10.1145/2714064.2660216]
   [Anonymous], 2007, PRACTICAL PROGRAMMIN
   [Anonymous], 2005, P GT2005 ASME TURB E
   Aspinall D, 1996, IEEE S LOG, P86, DOI 10.1109/LICS.1996.561307
   Augustsson L, 1999, ACM SIGPLAN NOTICES, V34, P239, DOI 10.1145/291251.289451
   Barendregt H., 1991, Journal of Functional Programming, V1, P125
   Barras B, 2008, LECT NOTES COMPUT SC, V4962, P365, DOI 10.1007/978-3-540-78499-9_26
   BELO JF, 2011, EUR S PROGR, P18
   Brady E, 2013, J FUNCT PROGRAM, V23, P552, DOI 10.1017/S095679681300018X
   Casinghino C, 2014, ACM SIGPLAN NOTICES, V49, P33, DOI 10.1145/2535838.2535883
   Castagna G, 2001, INFORM COMPUT, V168, P1, DOI 10.1006/inco.2000.3008
   Chen G., 2003, SIGPLAN Notices, V38, P150, DOI 10.1145/640128.604145
   Chiusano P., 2015, UNISON
   Cockx J, 2016, ACM SIGPLAN NOTICES, V51, P270, DOI 10.1145/3022670.2951917
   COQUAND T, 1988, INFORM COMPUT, V76, P95, DOI 10.1016/0890-5401(88)90005-3
   Damas L., 1982, POPL 82
   Dunfield J., 2013, COMPLETE EASY BIDIRE
   Dunfield J., 2013, ICFP 13
   Dunfield J., 2019, POPL 19
   Eisenberg R., 2016, THESIS
   FLANAGAN C, 2006, POPL, P245
   Freeman P., 2017, PURESCRIPT
   Gang Chen, 1997, Mathematical Foundations of Computer Science 1997. 22nd International Symposium, MFCS'97 Proceedings, P189, DOI 10.1007/BFb0029962
   GOLDFARB WD, 1981, THEOR COMPUT SCI, V13, P225, DOI 10.1016/0304-3975(81)90040-2
   Greenberg M, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P353, DOI 10.1145/1706299.1706341
   Gundry A., 2013, TUTORIAL IMPLEMENTAT
   Gundry Adam, 2013, THESIS
   HINZE R, 2006, INT S FUNCT LOG PROG, P208
   Hinze Ralf, 2003, TR20031901 CORN U
   Hongwei Xi, 2003, SIGPLAN Notices, V38, P224, DOI 10.1145/640128.604150
   Hutchins DS, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P287, DOI 10.1145/1706299.1706334
   Jeffery A, 2019, SCALA'19: PROCEEDINGS OF THE 10TH ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON SCALA, P1, DOI 10.1145/3337932.3338811
   Jones SP, 2007, J FUNCT PROGRAM, V17, P1, DOI 10.1017/S0956796806006034
   KAES S, 1988, LECT NOTES COMPUT SC, V300, P131
   Kimmell G., 2012, PROGRAMMING LANGUAGE, P15
   Kiss C, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341706
   Le Botlan D, 2003, ACM SIGPLAN NOTICES, V38, P27, DOI 10.1145/944746.944709
   Leijen D, 2008, ICFP'08: PROCEEDINGS OF THE 2008 SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P283
   Mar tin-Lof P., 1998, Oxford Logic Guides, P127
   Miller D., 1991, Logic Programming. Proceedings of the Eighth International Conference, P255
   Miller D., 1991, Journal of Logic and Computation, V1, P497, DOI 10.1093/logcom/1.4.497
   MILNER R, 1978, J COMPUT SYST SCI, V17, P348, DOI 10.1016/0022-0000(78)90014-4
   Miquel A, 2001, LECT NOTES COMPUT SC, V2044, P344
   Mogensen T. AE., 1992, Journal of Functional Programming, V2, P345, DOI 10.1017/S0956796800000423
   Odersky M., 1996, POPL 96
   Pierce B, 1997, THEOR COMPUT SCI, V176, P235, DOI 10.1016/S0304-3975(96)00096-5
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Reed Jason., 2009, P 4 INT WORKSHOP LOG, P49
   Rodriguez Serrano Tomas, 2018, Alimentaria, P18
   ROMPF T, 2016, OOPSLA 16, P624
   Sacerdoti Coen C., 2004, THESIS
   Sekiyama T, 2017, ACM T PROGR LANG SYS, V39, DOI 10.1145/2994594
   SJOBERG V, 2012, 4 WORKSH MATH STRUCT, P112
   Sjöberg V, 2015, ACM SIGPLAN NOTICES, V50, P369, DOI 10.1145/2676726.2676974
   Stump A., 2008, PLPV 09, P49
   Sussman G. J., 1998, Higher-Order and Symbolic Computation, V11, P405, DOI 10.1023/A:1010035624696
   Tiuryn J, 1996, IEEE S LOG, P74, DOI 10.1109/LICS.1996.561306
   van Doorn Floris., 2013, P 8 ACM SIGPLAN INT, P25, DOI DOI 10.1145/2503887.2503890
   Vytiniotis D., 2008, ICFP 08
   WADLER P, 1989, CONFERENCE RECORD OF THE SIXTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P60, DOI 10.1145/75277.75283
   Weirich S., 2017, ICFP 17
   Weirich S, 2013, ACM SIGPLAN NOTICES, V48, P275, DOI [10.1145/2544174.2500599, 10.1145/2500365.2500599]
   Wells JB, 1999, ANN PURE APPL LOGIC, V98, P111, DOI 10.1016/S0168-0072(98)00047-5
   Xie N., 2020, POPL 20
   Yang Y., 2017, OOPSLA 17
   Yang YP, 2019, J FUNCT PROGRAM, V29, DOI 10.1017/S0956796819000108
   Yang YP, 2016, LECT NOTES COMPUT SC, V10017, P251, DOI 10.1007/978-3-319-47958-3_14
   Zhao JP, 2019, INT GEOSCI REMOTE SE, P10019, DOI [10.1109/IGARSS.2019.8900150, 10.1109/igarss.2019.8900150]
   Ziliani B, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P179, DOI 10.1145/2784731.2784751
   Zwanenburg J, 1999, LECT NOTES COMPUT SC, V1581, P381
NR 74
TC 0
Z9 0
U1 1
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD AUG 1
PY 2021
VL 208
AR 102655
DI 10.1016/j.scico.2021.102655
EA APR 2021
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA SF6EZ
UT WOS:000652847700001
DA 2024-07-18
ER

PT J
AU Pérez-Vereda, A
   Canal, C
   Pimentel, E
AF Perez-Vereda, Alejandro
   Canal, Carlos
   Pimentel, Ernesto
TI Modelling digital avatars: A tuple space approach
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Digital Avatars; Digital avatar; Virtual profile; Internet of Things;
   IoT; Linda; Multiple tuple spaces
ID CONTEXT-AWARE; MOBILE; COORDINATION; CHALLENGES; NETWORKING; INTERNET;
   PEOPLE; THINGS; IOT
AB The development of the Internet of Things (IoT) came with the manufacturing of a huge amount of smart things equipped with sensors for making them aware of their environment, and with network connection for allowing remote interaction with them. However, most smart things still lack enough autonomy and context-awareness, hindering them from being people-friendly and actually useful for their users' everyday tasks. IoT devices should take advantage of their sensors and smartness to react automatically to the needs of their users and to provide seamless interactions with them. Within this field, the authors work on the design of Digital Avatars, a mobile computing framework for dynamically programming interactions among smart devices. The framework is based on the virtual profile of the user, which is inferred, stored, and shared by their smartphone. The profile provides a personalized context for running scripts which interact with IoT devices. This way, smartphones become a digital avatar of the user, capable of acting as a personal and seamless interface with their IoT environment. In this work, we present a formalization of Digital Avatars by means of a Linda-based approach with multiple shared tuple spaces. By means of a case study, we show how properties of the systems can be proved, and we briefly describe an implementation of both the Digital Avatars framework and the case study. (C) 2020 Elsevier B.V. All rights reserved.
C1 [Perez-Vereda, Alejandro; Canal, Carlos; Pimentel, Ernesto] Univ Malaga, ITIS Software, Malaga, Spain.
C3 Universidad de Malaga
RP Pérez-Vereda, A (corresponding author), Univ Malaga, ITIS Software, Malaga, Spain.
EM apvereda@uma.es; carloscanal@uma.es; epimentel@uma.es
RI Pimentel, Ernesto/AAC-3810-2019; Canal, Carlos/H-4782-2015
OI Pimentel, Ernesto/0000-0002-7125-8434; Perez-Vereda,
   Alejandro/0000-0002-0195-0062; Canal, Carlos/0000-0002-8002-0372
FU Spanish Government [PGC2018-094905-B-I00]; Junta de
   Andalucia/ATech/FEDER [UMA18-FEDERJA-180]
FX This work has been funded under grants PGC2018-094905-B-I00 (Spanish
   Government) and UMA18-FEDERJA-180 (Junta de Andalucia/ATech/FEDER).
CR Bandera D, 2019, IEEE SYMP COMP COMMU, P1171, DOI 10.1109/iscc47284.2019.8969584
   Berners-Lee T., SOLID
   Brogi A, 2003, SCI COMPUT PROGRAM, V46, P71, DOI 10.1016/S0167-6423(02)00087-4
   Busi N., 1997, Electronic Notes in Theoretical Computer Science, V7, DOI 10.1016/S1571-0661(05)80467-0
   CARRIERO N, 1989, COMMUN ACM, V32, P444, DOI 10.1145/63334.63337
   Clavel M, 2007, All About Maude: A High-Performance Logical Framework
   De Nicola R, 1998, IEEE T SOFTWARE ENG, V24, P315, DOI 10.1109/32.685256
   Durán F, 2020, J LOG ALGEBR METHODS, V110, DOI 10.1016/j.jlamp.2019.100497
   GELERNTER D, 1992, COMMUN ACM, V35, P96, DOI 10.1145/129630.129635
   Gronli TM, 2014, PERS UBIQUIT COMPUT, V18, P883, DOI 10.1007/s00779-013-0698-3
   Gubbi J, 2013, FUTURE GENER COMP SY, V29, P1645, DOI 10.1016/j.future.2013.01.010
   Guillén J, 2014, IEEE SOFTWARE, V31, P48, DOI 10.1109/MS.2013.140
   Guinard D, 2011, ARCHITECTING THE INTERNET OF THINGS, P97
   Makitalo Niko., 2012, Proceedings of the 11th International Conference on Mobile and Ubiquitous Multimedia, P10
   Makris P, 2013, IEEE COMMUN SURV TUT, V15, P362, DOI 10.1109/SURV.2012.040912.00180
   Menezes R., 2004, ELECTRON NOTES THEOR, V97, P97
   Nicola Rocco, 2015, Software Engineering for Collective Autonomic Systems. The ASCENS Approach: LNCS 8998, P3, DOI 10.1007/978-3-319-16310-9_1
   Pérez-Vereda A, 2020, LECT NOTES COMPUT SC, V12226, P236, DOI 10.1007/978-3-030-57506-9_18
   Pérez-Vereda A, 2019, 2019 IEEE SMARTWORLD, UBIQUITOUS INTELLIGENCE & COMPUTING, ADVANCED & TRUSTED COMPUTING, SCALABLE COMPUTING & COMMUNICATIONS, CLOUD & BIG DATA COMPUTING, INTERNET OF PEOPLE AND SMART CITY INNOVATION (SMARTWORLD/SCALCOM/UIC/ATC/CBDCOM/IOP/SCI 2019), P1789, DOI 10.1109/SmartWorld-UIC-ATC-SCALCOM-IOP-SCI.2019.00317
   Pérez-Vereda A, 2018, LECT NOTES COMPUT SC, V11153, P49, DOI 10.1007/978-3-030-03056-8_5
   Picco G. P., 1999, Proceedings of the 1999 International Conference on Software Engineering (IEEE Cat. No.99CB37002), P368, DOI 10.1109/ICSE.1999.841027
   Raento M, 2009, SOCIOL METHOD RES, V37, P426, DOI 10.1177/0049124108330005
   Silva JS, 2017, IEEE COMMUN MAG, V55, P18
   Taivalsaari A, 2017, IEEE SOFTWARE, V34, P72, DOI 10.1109/MS.2017.26
   Wang YF, 2014, WIREL NETW, V20, P1295, DOI 10.1007/s11276-013-0677-7
   Yang WS, 2013, J SYST SOFTWARE, V86, P12, DOI 10.1016/j.jss.2012.06.041
   Zeng D, 2007, IEEE INTELL SYST, V22, P20, DOI 10.1109/MIS.2007.4338490
NR 27
TC 3
Z9 3
U1 0
U2 10
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR 1
PY 2021
VL 203
AR 102583
DI 10.1016/j.scico.2020.102583
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA PQ7UT
UT WOS:000606750500005
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Mehrotra, G
   Berry, DM
AF Mehrotra, Gaurav
   Berry, Daniel M.
TI How to benefit from newbies' domain ignorance in software development
   projects
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 21st IFIP WG 6.1 International Conference on Coordination Models and
   Languages (COORDINATION) Held as Part of the 14th International
   Federated Conference on Distributed Computing Techniques (DisCoTec)
CY JUN 17-21, 2019
CL Kongens Lyngby, DENMARK
SP Int Federat Informat Proc WG 6 1, Tech Univ Denmark, Dept Appl Math & Comp Sci, Nord IoT Hub
DE Assigned software engineering tasks; Creative out-of-the-box-thinking
   ideas; Domain awareness; New hires; Successful immigration to a new
   project
AB A big problem in a computer-based systems (CBSs) development organization is how to improve the immigration of a newbie (a new hire to the organization or a mover within the organization) into a CBS development project of the organization that is already in progress. The newbie, who is ignorant of the domain of the CBS, must be brought to the same awareness of the domain that the project veterans have (1) without becoming a drain on his or her mentor and (2) while becoming useful to the project as soon as possible. Based on other work that shows that some CBS development activities benefit from the out-of-the-box thinking of a domain ignorant, it is hypothesized that a newbie who starts his or her immigration with CBS development activities requiring or enhanced by domain ignorance has a more successful immigration than a newbie who starts with other activities. The current paper reports a two-part empirical test of the hypothesis. First, a survey was conducted among CBS development managers of varying experience to determine what CBS development activities they thought were helped by domain ignorance. Second, transcripts from fourteen interviews of domain-ignorant immigrants to new CBS development projects at one large company were examined to determine if the activities performed by those with the most successful immigrations were activities that are considered by CBS development managers to be helped by domain ignorance. In the end, there is some modest support for the hypothesis, despite all the opportunities for the data to show a different conclusion because of the existence of many other factors that influence immigration success. Following a discussion of the threats to the validity of the result, the paper concludes with recommendations for tasks to assign to newbies to improve their immigrations, recommendations for project staffing in general, and recommendations for future research. (C) 2020 Elsevier B.V. All rights reserved.
C1 [Mehrotra, Gaurav; Berry, Daniel M.] Univ Waterloo, Cheriton Sch Comp Sci, Waterloo, ON N2L 3G1, Canada.
C3 University of Waterloo
RP Berry, DM (corresponding author), Univ Waterloo, Cheriton Sch Comp Sci, Waterloo, ON N2L 3G1, Canada.
EM gaurav.iiita@gmail.com; dberry@uwaterloo.ca
FU Canadian NSERC-Scotia Bank Industrial Research Chair
   [NSERC-IRCPJ365473-05]; Canadian NSERC grant [NSERC-RGPIN227055]
FX The authors thank Jo Atlee, Chrysanne DiMarco, and Mike Godfrey for
   their comments on the thesis on which the current paper is based. They
   thank also and particularly Barthelemy Dagenais, Harold Ossher, Rachel
   K. E. Bellamy, Martin P. Robillard, Jacqueline P. de Vries, and their
   anonymous subjects for agreeing to share the data obtained from their
   research for comparison purposes. They thank Mei Nagappan for his
   comments on an earlier draft of the current paper. Each author's work
   was supported in part by a Canadian NSERC-Scotia Bank Industrial
   Research Chair NSERC-IRCPJ365473-05. Daniel Berry's work was supported
   in part also by a Canadian NSERC grant NSERC-RGPIN227055.
CR ALRAWAS A, 1996, P 1 WESTM C PROF AW, P47
   [Anonymous], 1987, Peopleware: Productive Projects and Teams
   [Anonymous], 2011, REAL WORLD RES
   [Anonymous], 1993, IEEE INT S REQ ENG I
   [Anonymous], 2012, SOFTWARE ENG STACK E
   [Anonymous], 2018, CODEMENTOR 7 BEST PR
   Arkley P, 2005, 13th IEEE International Conference on Requirements Engineering, Proceedings, P385, DOI 10.1109/RE.2005.49
   Begel A, 2008, SIGCSE'08: PROCEEDINGS OF THE 39TH ACM TECHNICAL SYMPOSIUM ON COMPUTER SCIENCE EDUCATION, P226, DOI 10.1145/1352322.1352218
   Begel Andrew, 2008, P 4 INT WORKSH COMP, P3, DOI [DOI 10.1145/RESEARCH(ICER'1404520.1404522, 10.1145/Research(ICER'1404520.1404522]
   BELADY LA, 1976, IBM SYST J, V15, P225, DOI 10.1147/sj.153.0225
   Berlin L., 1992, HPL92142 SOFTW TECHN
   Berlin L. M., 1993, Consultants and apprentices: observations about learning and collaborative problem solving, DOI 10.1145/143457.143471
   Berry DM, 2016, 2016 IEEE INTERNATIONAL CONFERENCE ON SOFTWARE SCIENCE, TECHNOLOGY AND ENGINEERING (SWSTE 2016), P37, DOI 10.1109/SWSTE.2016.14
   BERRY DM, 1995, J SYST SOFTWARE, V28, P179, DOI 10.1016/0164-1212(94)00054-Q
   Berry DM, 2004, LECT NOTES COMPUT SC, V2941, P50
   Brooks Jr, 1975, MYTHICAL MAN MONTH E
   Buchan J, 2019, INT SYMP EMP SOFTWAR, P306
   Buchan J, 2009, ASIA PAC SOFWR ENG, P93, DOI 10.1109/APSEC.2009.47
   Camacho Jose Jairo, 2013, International Journal of Soft Computing and Software Engineering, V3, P219, DOI 10.7321/jscse.v3.n3.33
   Carver JC, 2008, IEEE T SOFTWARE ENG, V34, P800, DOI 10.1109/TSE.2008.49
   Codementor, 2017, HERES YOU SHOULD ONB
   CURTIS B, 1988, COMMUN ACM, V31, P1268, DOI 10.1145/50087.50089
   Dagenais B., 2010, Proc. of the ICSE 10, P275, DOI DOI 10.1145/1806799.1806842
   Damian D, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P442, DOI 10.1109/ICSE.2013.6606590
   Firestein S., 2013, IGNORANCE COURSE
   Fischer G., 1999, Creativity and Cognition. Proceedings of the Third Creativity and Cognition Conference, P116, DOI 10.1145/317561.317582
   Friedrich W.R., 2007, Interdisciplinary Journal of Information, Knowledge, and Management, V2, P179, DOI DOI 10.28945/108
   Gregory Peggy, 2020, Agile Processes in Software Engineering and Extreme Programming. 21st International Conference on Agile Software Development, XP 2020. Proceedings. Lecture Notes in Business Information Processing (LNBIP 383), P20, DOI 10.1007/978-3-030-49392-9_2
   Hadar I, 2014, REQUIR ENG, V19, P143, DOI 10.1007/s00766-012-0163-2
   Halabuda P., PROJECT ONBOARDING 4
   Halstead Susanne, 2012, Product-Focused Software Process Improvement. Proceedings 13th International Conference (PROFES 2012), P248, DOI 10.1007/978-3-642-31063-8_19
   Henninger S., 1995, SIGSOFT Software Engineering Notes, P186, DOI 10.1145/223427.211844
   Hughson G., 2016, IGNORANCE ISNT BLISS
   JONES GR, 1986, ACAD MANAGE J, V29, P262, DOI 10.5465/256188
   Ko AJ, 2007, PROC INT CONF SOFTW, P344
   Kristensson P, 2004, J PROD INNOVAT MANAG, V21, P4, DOI 10.1111/j.0737-6782.2004.00050.x
   Kumar M., 2009, P CONSEG 09 INT C SO, P87
   Latif M., 2018, INT J ADV COMPUTER R, V3, P54
   Linsey JS, 2010, J MECH DESIGN, V132, DOI 10.1115/1.4001110
   Lu RQ, 2002, J COMPUT SCI TECHNOL, V17, P535, DOI 10.1007/BF02948822
   Luchins AS, 1950, J GEN PSYCHOL, V42, P279, DOI 10.1080/00221309.1950.9920160
   Luchins AS, 1942, PSYCHOL MONOGR, V54, P1
   Maalej W, 2014, INT REQUIR ENG CONF, P364, DOI 10.1109/RE.2014.6912287
   Mattheij J., 2013, DOMAIN KNOWLEDGE LAC
   Mayr H.C., 2001, REUSING DOMAIN KNOWL
   Mehrotra G., 2011, ROLE DOMAIN IGNORANC
   Mehrotra G., 2012, ROLE DOMAIN IGNORANC
   Newcombe RG, 1998, STAT MED, V17, P857, DOI 10.1002/(SICI)1097-0258(19980430)17:8<857::AID-SIM777>3.0.CO;2-E
   Newcombe RG, 1998, STAT MED, V17, P873, DOI 10.1002/(SICI)1097-0258(19980430)17:8<873::AID-SIM779>3.0.CO;2-I
   Niknafs A, 2017, EMPIR SOFTW ENG, V22, P80, DOI 10.1007/s10664-015-9416-2
   Panichella S, 2015, PROC IEEE INT CONF S, P586, DOI 10.1109/ICSM.2015.7332519
   Park S, 2009, LECT NOTES BUS INF P, V31, P23
   Pascal Blaise., 1966, Pensees
   Pham R, 2014, 22ND ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (FSE 2014), P803, DOI 10.1145/2635868.2666604
   Pham R, 2015, 7TH INTERNATIONAL WORKSHOP ON SOCIAL SOFTWARE ENGINEERING (SSE 2015), P1, DOI 10.1145/2804381.2804382
   Pinggera J, 2010, LECT NOTES COMPUT SC, V6412, P445, DOI 10.1007/978-3-642-16373-9_33
   POTTS C, 1993, IEEE SOFTWARE, V10, P19, DOI 10.1109/52.232392
   R Foundation, The R Project for statistical computing
   Ramirez III C., KEEP CALM TRANSITION
   Randell B., 1969, SOFTWARE ENG TECHIQU
   Rugaber S, 2000, ANN SOFTW ENG, V9, P143, DOI 10.1023/A:1018976708691
   Rus I, 2002, IEEE SOFTWARE, V19, P26, DOI 10.1109/MS.2002.1003450
   Rus I., 2001, Knowledge Management in Software Engineering A State-of-the-Art-Report, Data
   SCHEIN EH, 1971, J APPL BEHAV SCI, V7, P401, DOI 10.1177/002188637100700401
   Schwartz MA, 2008, J CELL SCI, V121, P1771, DOI 10.1242/jcs.033340
   SHAFT TM, 1995, INFORM SYST RES, V6, P286, DOI 10.1287/isre.6.3.286
   SHARP H, 1991, BEHAV INFORM TECHNOL, V10, P383, DOI 10.1080/01449299108924298
   Sim SE, 1998, PROC INT CONF SOFTW, P361, DOI 10.1109/ICSE.1998.671389
   Singh V., 2012, P ACM 2012 C COMPUTE, P215, DOI DOI 10.1145/2141512.2141581
   Steinmacher I, 2015, PROCEEDINGS OF THE 2015 ACM INTERNATIONAL CONFERENCE ON COMPUTER-SUPPORTED COOPERATIVE WORK AND SOCIAL COMPUTING (CSCW'15), P1379, DOI 10.1145/2675133.2675215
   SUTCLIFFE AG, 1993, IFIP TRANS A, V30, P99
   Sviridov S., 2019, EFFECTIVE PROJECT ON
   Teller S., 2012, PROGRAMMERS ARE OPTI
   Viswanathan V, 2011, INT CONF ENG DES, V7, P309
   von Krogh G, 2003, RES POLICY, V32, P1217, DOI 10.1016/S0048-7333(03)00050-7
NR 75
TC 2
Z9 2
U1 0
U2 6
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD APR 1
PY 2021
VL 204
AR 102593
DI 10.1016/j.scico.2020.102593
EA JAN 2021
PG 30
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Social Science Citation Index (SSCI); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA QH9AO
UT WOS:000618565200005
DA 2024-07-18
ER

PT J
AU Freitas, L
   Scott, WE
   Degenaar, P
AF Freitas, Leo
   Scott, William E., III
   Degenaar, Patrick
TI Medicine-by-wire: Practical considerations on formal techniques for
   dependable medical systems
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 21st Brazilian Symposium on Formal Methods (SBMF)
CY NOV 26-30, 2018
CL Salvador, BRAZIL
DE Medical devices; Automation; Formal methods; Certification
ID DESIGN
AB We see the future of medicine as highly automated. Improvement in care-provision will be achieved by both increased clinician efficiency, as well as new computing assisted treatments and diagnoses. In other safety-critical industries, such as avionics and automotive, certification is dependability-driven. In contrast, medical certification is clinical-trial driven, which we argue will become increasingly problematic with increasing medical device and software complexity. By dependability, we mean the dictionary notion: reliable and trustworthy. Thus, failures are either avoided by design, or are accountable to a measured extent. This touches upon the verification (intent) versus validation (outcome) problem. Even though correctness does not imply safety, we do believe from our experiences that, the process of striving for correctness (verification) done right does shed light on safety; on whether the requirements/assumptions were addressed as intended (validation).
   Medical device trials can lead to adequate assurances of safety, as defined by the local regulatory burden. Nevertheless, the nature of such complex systems means that certain errors may not be detected by trials and so additional efforts to reduce errors is needed. Our intent is, at least for software, to explore the contrast between approaches: correctness-by-construction versus correct-by-trial. Additionally, these levels of safety and effectiveness of systems vary across regulatory domains in different countries. A key challenge is how to achieve a successful interaction between verification tasks using formal methods and system development tasks within engineering teams without prior knowledge of formal techniques.
   This paper describes a pragmatic process for the application of formal techniques, which is illustrated for three medical devices during pre-clinical development prior to certification. That means, the techniques are not only applied to realistic systems, but are also taken up by development teams themselves (i.e. cannot be entirely formal expert driven). We demonstrate differences in applying formalisms at the start, midpoint and final development stages. In particular, we describe the underlying socio-technical challenges and how we developed mitigation methods for each exemplar case. This paper is not about a general technique for medical automation, as we do not believe this is practical/possible given the varied/dynamic nature of medical problems. (C) 2020 The Author(s). Published by Elsevier B.V.
C1 [Freitas, Leo] Newcastle Univ, Sch Comp, Newcastle Upon Tyne NE1 7RU, Tyne & Wear, England.
   [Scott, William E., III] Newcastle Univ, NHSBT Newcastle Blood Donor Ctr, Inst Cellular Med, Transplant Regenerat Med Facil, Holland Dr, Newcastle Upon Tyne NE2 4NQ, Tyne & Wear, England.
   [Degenaar, Patrick] Newcastle Univ, Sch Engn, Elect & Elect Engn, Newcastle Upon Tyne, Tyne & Wear, England.
C3 Newcastle University - UK; Newcastle University - UK; Newcastle
   University - UK
RP Freitas, L (corresponding author), Newcastle Univ, Sch Comp, Newcastle Upon Tyne NE1 7RU, Tyne & Wear, England.
EM leo.freitas@newcastle.ac.uk
RI Freitas, Leo/G-5733-2012
OI Scott, William/0000-0003-1515-0514
FU EPSRC STRATA platform grant [EP/N023641/1]; MRC Proximity to Discovery
   [MC_PC_17198]; Wellcome [096975/Z/11/Z]; EPSRC [102037/Z/13/Z];
   Newcastle University School of Computing and Engineering; Translational
   and Clinical Research Institute; Newcastle NHS blood and transplant
   centre (NHSBT); Wellcome Trust [096975/Z/11/Z] Funding Source: Wellcome
   Trust; EPSRC [EP/N023641/1] Funding Source: UKRI; MRC [MC_PC_17198]
   Funding Source: UKRI
FX This work is partially sponsored by EPSRC STRATA platform grant
   EP/N023641/1, MRC Proximity to Discovery (MC_PC_17198) Grant, Wellcome
   096975/Z/11/Z, and EPSRC: 102037/Z/13/Z.; Authors are grateful for the
   support from their corresponding institutes at Newcastle University
   School of Computing and Engineering, Translational and Clinical Research
   Institute and Newcastle NHS blood and transplant centre (NHSBT). We are
   also grateful for the considerable discussion and interaction with team
   members from: Newcastle Hospitals Regional Medical Physics; and CANDO
   and POLAR engineering teams. We are also grateful to the Blood and
   Transplant Research Unit (BTRU) in Organ Donation and Transplantation at
   the University of Cambridge in collaboration with Newcastle University
   and in partnership with NHSBT.
CR Amoore John N, 2014, J Med Eng, V2014, P314138, DOI 10.1155/2014/314138
   [Anonymous], 2017, GEOBOSQUES
   [Anonymous], 2005, 2RDU00001
   Arcaini P, 2018, SCI COMPUT PROGRAM, V158, P148, DOI 10.1016/j.scico.2017.07.003
   Bonfanti S, 2018, J SOFTW-EVOL PROC, V30, DOI 10.1002/smr.1943
   BSI, 2011, 62304 BSI EN
   Campos JC, 2014, INT J HUM-COMPUT ST, V72, P284, DOI 10.1016/j.ijhcs.2013.10.005
   Carlton J., 2012, ESCHER VERIFICATION, P155
   Cook B, 2018, LECT NOTES COMPUT SC, V10981, P38, DOI 10.1007/978-3-319-96145-3_3
   Copper D., 2008, SP1229811 ALTR PRAX
   Crocker D., 2014, ADA LETT, V34, P5, DOI [10.1145/2692956.2663179, DOI 10.1145/2692956.2663179]
   Dehkhoda F, 2015, IEEE SENSOR, P1965
   Food and Drug Administration (FDA), 2015, CLASS 2 DEV REC ACCU
   Freitas L., 2013, CSTR1398 NEWC U
   Freitas L., 2014, FORMAL METHODS
   Ginty J., 2015, THESIS
   Gurses Ayse P., 2014, MED DEVICES WILD
   Harrison M., 2015, TR1485 NEWC U SCH CO
   Harrison MD, 2019, SCI COMPUT PROGRAM, V175, P17, DOI 10.1016/j.scico.2019.02.003
   Hegemann P, 2013, EMBO MOL MED, V5, P173, DOI 10.1002/emmm.201202387
   HEVNER AR, 1993, IBM SYST J, V32, P232, DOI 10.1147/sj.322.0232
   Hopcroft PJ, 2005, ELECTRON NOTES THEOR, V128, P127, DOI 10.1016/j.entcs.2005.04.008
   Iseri E, 2017, J NEURAL ENG, V14, DOI 10.1088/1741-2552/aa60b3
   Kassian V., 2014, THESIS
   Klein G, 2010, COMMUN ACM, V53, P107, DOI 10.1145/1743546.1743574
   Lin L, 1998, J CLIN MONITOR COMP, V14, P253, DOI 10.1023/A:1009928203196
   Macedo HD, 2008, LECT NOTES COMPUT SC, V5014, P181, DOI 10.1007/978-3-540-68237-0_14
   Marco K., 2018, THESIS
   Martinkute E., 2016, THESIS
   Masci P, 2014, OpenAccess series in informatics, schloss DagstuhlLeibniz-Zentrum fur informatik GMBH, P1, DOI DOI 10.4230/OASICS.MCPS.2014.1
   Mazda F., 1993, Telecommunications Engineer's Reference Book
   MISRA Ltd, 2013, MISRA C 2012 GUID US
   MISRA Ltd, 2008, MISRA C 2008 GUID US
   Naur P., 1972, BIT (Nordisk Tidskrift for Informationsbehandling), V12, P347, DOI 10.1007/BF01932307
   Nordhoff S., 2011, TECH REP
   O'Hearn P, 2018, LICS'18: PROCEEDINGS OF THE 33RD ANNUAL ACM/IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P13, DOI 10.1145/3209108.3209109
   O'Neill S, 2020, TRANSPLANTATION, V104, P1813, DOI 10.1097/TP.0000000000003106
   Osaiweran A., 2010, TECH REP
   Osaiweran A, 2014, EMPIR SOFTW ENG, V19, P1169, DOI 10.1007/s10664-013-9251-2
   P.S. Authority, 2007, PATIENT SAF ADVIS, V4
   Pollitt A., 2018, THESIS
   Simm J., 2019, THESIS
   Hoang TS, 2018, SCI COMPUT PROGRAM, V158, P122, DOI 10.1016/j.scico.2017.11.002
   Thimbleby H, 2013, 2013 IEEE INTERNATIONAL CONFERENCE ON HEALTHCARE INFORMATICS (ICHI 2013), P1, DOI 10.1109/ICHI.2013.91
   Topol E., 2019, TECH REP
   Travis G., 2019, IEEE Spectrum
   Tsai TP, 2015, PROCEEDINGS OF THE 2018 6TH INTERNATIONAL CONFERENCE ON INFORMATION AND EDUCATION TECHNOLOGY (ICIET 2018), P1, DOI [10.1145/3178158.3178161, 10.1109/BioCAS.2015.7348388]
   U.D. of Health H. Services, 2002, UCM085281 US HLTH H
   Van den Bos J, 2011, HEALTH AFFAIR, V30, P596, DOI 10.1377/hlthaff.2011.0084
   Vogel D.A., 2010, MED DEVICE SOFTWARE
   Woodcock J, 2009, ACM COMPUT SURV, V41, DOI 10.1145/1592434.1592436
   Wooding B., 2019, THESIS
   Zhao HB, 2018, IEEE T CIRCUITS-I, V65, P2431, DOI 10.1109/TCSI.2018.2792219
NR 53
TC 1
Z9 1
U1 0
U2 6
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29a, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 1
PY 2020
VL 200
AR 102545
DI 10.1016/j.scico.2020.102545
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA NZ8II
UT WOS:000577344900006
OA Green Published, hybrid
DA 2024-07-18
ER

PT J
AU Tasos, A
   Franco, J
   Drossopoulou, S
   Wrigstad, T
   Eisenbach, S
AF Tasos, Alexandros
   Franco, Juliana
   Drossopoulou, Sophia
   Wrigstad, Tobias
   Eisenbach, Susan
TI Reshape your layouts, not your programs: A safe language extension for
   better cache locality
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT European Conference on Object-Oriented Programming (ECOOP)
CY NOV 15-17, 2020
CL ELECTR NETWORK
DE Type systems; Cache utilisation; Data representation; Memory safety
ID ALLOCATION; JAVA
AB The vast divide between the speed of CPU and RAM means that effective use of CPU caches is often a prerequisite for high performance on modern architectures. Hence, developers need to consider how to place data in memory so as to exploit spatial locality and achieve high memory bandwidth. Such manual memory optimisations are common in unmanaged languages (e.g. C, C++), but they sacrifice readability, maintainability, memory safety, and object abstraction. In managed languages, such as Java and C#, where the runtime abstracts away the memory from the developer, such optimisations are almost impossible.
   We present a language extension called SHAPES, which aims to offer developers more fine-grained control over the placement of data, without sacrificing memory safety or object abstraction. In SHAPES, programmers group related objects into pools, and specify how objects are laid out in these pools. Classes and types are annotated by pool parameters, which allow placement aspects to be changed orthogonally to the code that operates on the objects in the pool. These design decisions disentangle business logic and memory concerns.
   We give a formal model of SHAPES, present its type and memory safety model, and present its translation to a low-level language. We argue why we expect this translation to be efficient in terms of runtime representation of objects and access to their fields. We argue that SHAPES can be incorporated into existing managed and unmanaged language runtimes and fit well with garbage collection. (C) 2020 Elsevier B.V. All rights reserved.
C1 [Tasos, Alexandros; Drossopoulou, Sophia; Eisenbach, Susan] Imperial Coll London, London, England.
   [Franco, Juliana; Drossopoulou, Sophia] Microsoft Res, Cambridge, England.
   [Wrigstad, Tobias] Uppsala Univ, Uppsala, Sweden.
C3 Imperial College London; Microsoft; Uppsala University
RP Tasos, A (corresponding author), Imperial Coll London, London, England.
EM at1917@ic.ac.uk; juliana.franco@microsoft.com; scd@doc.ic.ac.uk;
   tobias.wrigstad@it.uu.se; sue@doc.ic.ac.uk
OI Wrigstad, Tobias/0000-0002-4269-5408
FU EPSRC Centre for Doctoral Training in High Performance Embedded and
   Distributed Systems (HiPEDS) Grant [EP/L016796/1]
FX Supported by an EPSRC Centre for Doctoral Training in High Performance
   Embedded and Distributed Systems (HiPEDS) Grant (Reference
   EP/L016796/1).
CR [Anonymous], 2012, MICROARCHITECTURE IN
   Bocchino RL, 2009, ACM SIGPLAN NOTICES, V44, P97, DOI 10.1145/1639949.1640097
   Calder B, 1998, ACM SIGPLAN NOTICES, V33, P139, DOI 10.1145/291006.291036
   Clarke D, 2013, LEARNER PERSP STUD, P13
   Clebsch S., 2015, P 5 INT WORKSHOP PRO, P1, DOI DOI 10.1145/2824815.2824816
   Dieckmann S, 1999, LECT NOTES COMPUT SC, V1628, P92
   Forslund D. W., 1990, USENIX C++ Conference, P177
   Franco J., 2016, INT WORKSH AL CAP OW
   Franco J., 2018, FORMAL TECHNIQUES JA
   Franco J, 2017, PROCEEDINGS OF THE 2017 ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON NEW IDEAS, NEW PARADIGMS, AND REFLECTIONS ON PROGRAMMING AND SOFTWARE (ONWARD!'17), P148, DOI 10.1145/3133850.3133861
   Franco J, 2016, ELECTRON P THEOR COM, P109, DOI 10.4204/EPTCS.203.9
   Giles M. B., 2011, Performance Evaluation Review, V38, P9, DOI 10.1145/1964218.1964221
   Gosling J., 2014, JAVA SE
   Grossman D, 2002, ACM SIGPLAN NOTICES, V37, P282, DOI 10.1145/543552.512563
   Henry D., 2005, MD5MESH MD5ANIM FILE
   Homann H, 2018, COMPUT PHYS COMMUN, V224, P325, DOI 10.1016/j.cpc.2017.11.015
   Huang X., 2004, OOPSLA
   I. ISO, 2012, 148822011 ISO IEC, V27, P59
   Igarashi A, 2001, ACM T PROGR LANG SYS, V23, P396, DOI 10.1145/503502.503505
   Jaber N, 2017, CC'17: PROCEEDINGS OF THE 26TH INTERNATIONAL CONFERENCE ON COMPILER CONSTRUCTION, P109, DOI 10.1145/3033019.3033030
   Keasler J., 2008, TALC: A Simple C Language Extension For Improved Performance and Code Maintainability
   Klabnik S., 2018, The Rust Programming Language
   Kornblith S., 2015, JULIA STRUCTS ARRAYS
   Lattner C, 2005, ACM SIGPLAN NOTICES, V40, P129, DOI 10.1145/1064978.1065027
   Lattner C, 2004, INT SYM CODE GENER, P75, DOI 10.1109/CGO.2004.1281665
   Lattner C., 2003, TECH REP
   LeiSSa R., 2014, Proceedings of the 2014 Workshop on Programming models for SIMD/Vector processing, P17, DOI DOI 10.1145/2568058.2568062
   Matthiesen T, 2015, CAMB MIDDLE E STUD, V46, P197
   NAGEL K, 1992, J PHYS I, V2, P2221, DOI 10.1051/jp1:1992277
   Panda PR, 2001, ISSS'01: 14TH INTERNATIONAL SYMPOSIUM ON SYSTEM SYNTHESIS, P101, DOI 10.1109/ISSS.2001.957921
   Petersen L, 2003, ACM SIGPLAN NOTICES, V38, P172, DOI 10.1145/640128.604147
   Pharr Matt., 2012, INNOVATIVE PARALLEL, P1
   Potanin A., 2004, ACM C OBJ OR PROGR L
   Saraswat V., 2012, X10 LANGUAGE SPECIFI
   Sharma K, 2015, LECT NOTES COMPUT SC, V9233, P250, DOI 10.1007/978-3-662-48096-0_20
   Springer M., 2019, 33 EUR C OBJ OR PROG, V134
   Springer M., 2018, P 2018 4 WORKSH PROG, P6
   Springer M., 2018, P 5 ACM SIGPLAN INT, P50, DOI [10.1145/3219753.3219760, DOI 10.1145/3219753.3219760]
   Strzodka R., 2011, GPU COMPUTING GEMS J, P429
   Tasos A., 2018, P 13 WORKSH IMPL COM, P23
   TORRELLAS J, 1994, IEEE T COMPUT, V43, P651, DOI 10.1109/12.286299
   Ureche V, 2015, ACM SIGPLAN NOTICES, V50, P801, DOI [10.1145/2814270.2814271, 10.1145/2858965.2814271]
   Wrigstad T, 2009, LECT NOTES COMPUT SC, V5653, P445, DOI 10.1007/978-3-642-03013-0_21
NR 43
TC 1
Z9 1
U1 0
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29a, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 1
PY 2020
VL 197
AR 102481
DI 10.1016/j.scico.2020.102481
PG 57
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA NS6CO
UT WOS:000572347300003
DA 2024-07-18
ER

PT J
AU Almeida, AA
   Ayala-Rincón, M
AF Almeida, Ariane Alves
   Ayala-Rincon, Mauricio
TI Formalizing the dependency pair criterion for innermost termination
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 22nd Brazilian Symposium on Formal Methods (SBMF)
CY NOV 25-29, 2019
CL Sao Paulo, BRAZIL
SP Brazilian Comp Soc
DE Automating termination; Termination of rewriting systems; Dependency
   pairs; Innermost reduction
ID SIZE-CHANGE PRINCIPLE; VERIFICATION
AB Rewriting is a framework for reasoning about functional programming. The dependency pair criterion is a well-known mechanism to analyze termination of term rewriting systems. Functional specifications with an operational semantics based on evaluation are related, in the rewriting framework, to the innermost reduction relation. This paper presents a PVS formalization of the dependency pair criterion for the innermost reduction relation: a term rewriting system is innermost terminating if and only if it is terminating by the dependency pair criterion. The paper also discusses the application of this criterion to check termination of functional specifications. (C) 2020 Elsevier B.V. All rights reserved.
C1 [Almeida, Ariane Alves; Ayala-Rincon, Mauricio] Univ Brasilia, Dept Comp Sci, Brasilia, DF, Brazil.
   [Ayala-Rincon, Mauricio] Univ Brasilia, Dept Math, Brasilia, DF, Brazil.
C3 Universidade de Brasilia; Universidade de Brasilia
RP Almeida, AA (corresponding author), Univ Brasilia, Dept Comp Sci, Brasilia, DF, Brazil.; Ayala-Rincón, M (corresponding author), Univ Brasilia, Dept Math, Brasilia, DF, Brazil.
EM arianealvesalmeida@gmail.com; ayala@unb.br
RI Ayala-Rincon, Mauricio/T-1283-2019; Ayala-Rincón, Mauricio/C-3432-2015
OI Ayala-Rincón, Mauricio/0000-0003-0089-3905
FU FAPDF [193001369/2016]; CAPES; CNPq [307672/2017-4]
FX Work supported by FAPDF grant 193001369/2016.; Funded by CAPES with a
   PhD scholarship.; Partially funded by CNPq research grant number
   307672/2017-4.
CR Alarcón B, 2009, ELECTRON NOTES THEOR, V248, P3, DOI 10.1016/j.entcs.2009.07.055
   Alarcón B, 2010, INFORM COMPUT, V208, P922, DOI 10.1016/j.ic.2010.03.003
   Almeida A.A., 2019, CORR
   [Anonymous], 1949, C HIGH SPEED AUT CAL
   Arts T, 2000, THEOR COMPUT SCI, V236, P133, DOI 10.1016/S0304-3975(99)00207-8
   Arts T., 1996, Trees in Algebra and Programming - CAAP '96. 21st International Colloquium. Proceedings, P196
   Arts T., 1997, TAPSOFT '97: Theory and Practice of Software Development. 7th International Joint Conference CAAP/FASE. Proceedings, P261, DOI 10.1007/BFb0030602
   Arts T, 1998, LECT NOTES COMPUT SC, V1379, P226
   Avelar A.B., 2014, THESIS
   Baader Franz, 1998, TERM REWRITING ALL
   Blanqui F, 2011, MATH STRUCT COMP SCI, V21, P827, DOI 10.1017/S0960129511000120
   Contejean E, 2007, LECT NOTES ARTIF INT, V4720, P148
   Ramos TMF, 2018, LECT NOTES COMPUT SC, V10944, P196, DOI 10.1007/978-3-662-57669-4_11
   Galdino AL, 2010, J AUTOM REASONING, V45, P301, DOI 10.1007/s10817-010-9165-2
   Giesl J, 2005, LECT NOTES COMPUT SC, V3452, P301
   Lee CS, 2001, ACM SIGPLAN NOTICES, V36, P81, DOI 10.1145/373243.360210
   Galdino AL, 2008, J FORMALIZ REASON, V1, P39
   Manolios P, 2006, LECT NOTES COMPUT SC, V4144, P401, DOI 10.1007/11817963_36
   Rocha-Oliveira AC, 2017, J AUTOM REASONING, V58, P231, DOI 10.1007/s10817-016-9376-2
   Sternagel C., 2010, THESIS
   Sternagel C, 2010, LECT NOTES COMPUT SC, V6247, P514, DOI 10.1007/978-3-642-15205-4_39
   Thiemann R, 2005, APPL ALGEBR ENG COMM, V16, P229, DOI 10.1007/s00200-005-0179-7
   Thiemann R, 2003, LECT NOTES COMPUT SC, V2706, P264
   Thiemann R, 2009, LECT NOTES COMPUT SC, V5674, P452, DOI 10.1007/978-3-642-03359-9_31
   Turing AM, 1937, P LOND MATH SOC, V42, P230, DOI 10.1112/plms/s2-42.1.230
NR 25
TC 2
Z9 2
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 1
PY 2020
VL 195
AR 102474
DI 10.1016/j.scico.2020.102474
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA LR7RO
UT WOS:000535893800005
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Azadbakht, K
   de Boer, FS
   Bezirgiannis, N
   de Vink, E
AF Azadbakht, Keyvan
   de Boer, Frank S.
   Bezirgiannis, Nikolaos
   de Vink, Erik
TI A formal actor-based model for streaming the future
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Future; Streaming; Cooperative scheduling; Active objects; Social
   networks
AB Asynchronous Actor-based programming has gained increasing attention as a model of concurrency and distribution. The Abstract Behavioral Specification (ABS) language is an actor-based programming language that has been developed for both the modeling and formal analysis of distributed systems. In ABS, actors are modeled as concurrent objects that communicate by asynchronous method calls. Return values are also communicated asynchronously via return statements and so-called futures.
   Many modern distributed software applications require a form of continuous interaction between their components which consists of streaming data from a server to its clients. In this paper, we extend the ABS language in order to support the streaming of data. We introduce the notion of "future-based data streams" by augmenting the syntax, type system, and operational semantics of ABS. As a proof of concept, we further discuss a prototype implementation for supporting future-based data streams on top of ABS, and discuss the impact of the use of these data streams in ABS on the performance in the implementation of a distributed application for the generation of social networks. (C) 2019 Elsevier B.V. All rights reserved.
C1 [Azadbakht, Keyvan; de Boer, Frank S.; Bezirgiannis, Nikolaos] Ctr Wiskunde & Informat, Amsterdam, Netherlands.
   [Azadbakht, Keyvan] Leiden Univ, Leiden, Netherlands.
   [de Vink, Erik] Eindhoven Univ Technol, Eindhoven, Netherlands.
C3 Leiden University - Excl LUMC; Leiden University; Eindhoven University
   of Technology
RP Azadbakht, K (corresponding author), Ctr Wiskunde & Informat, Amsterdam, Netherlands.
EM k.azadbakht@cwi.nl; frank.s.de.boer@cwi.nl; n.bezirgiannis@cwi.nl;
   evink@win.tue.nl
CR [Anonymous], 1985, TECHNICAL REPORT
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   Armstrong J., 1993, Concurrent programming in ERLANG
   Azadbakht Keyvan, 2017, Formal Techniques for Distributed Objects, Components and Systems. 37th IFIP WG 6.1 International Conference, FORTE 2017, held as part of the 12th International Federated Conference on Distributed Computing Techniques, DisCoTec 2017. Proceedings: LNCS 10321, P67, DOI 10.1007/978-3-319-60225-7_5
   Azadbakht K., 2016, P 31 ANN ACM S APPL, P1244
   Azadbakht K, 2018, LECT NOTES COMPUT SC, V10951, P39, DOI 10.1007/978-3-319-95582-7_3
   Azadbakht K, 2017, LECT NOTES COMPUT SC, V10139, P103, DOI 10.1007/978-3-319-51963-0_9
   Bader DA, 2006, PROC INT CONF PARAL, P539, DOI 10.1109/ICPP.2006.57
   Barabási AL, 1999, SCIENCE, V286, P509, DOI 10.1126/science.286.5439.509
   Bezirgiannis Nikolaos, 2016, SOFSEM 2016 : Theory and Practice of Computer Science. 42nd International Conference on Current Trends in Theory and Practice of Computer Science. Proceedings: LNCS 9587, P433, DOI 10.1007/978-3-662-49192-8_35
   de Boer FS, 2007, LECT NOTES COMPUT SC, V4421, P316
   Epstein J, 2011, ACM SIGPLAN NOTICES, V46, P118, DOI 10.1145/2096148.2034690
   Eugster PT, 2003, ACM COMPUT SURV, V35, P114, DOI 10.1145/857076.857078
   GELERNTER D, 1985, ACM T PROGR LANG SYS, V7, P80, DOI 10.1145/2363.2433
   Giachino E, 2016, SOFTW SYST MODEL, V15, P1013, DOI 10.1007/s10270-014-0444-y
   Johnsen E.B., 2011, Lecture Notes in Computer Science, V6957, P142, DOI [10.1007/978- 3- 642-25271-6 8, DOI 10.1007/978-3-642-25271-6]
   Kumar R, 2000, ANN IEEE SYMP FOUND, P57, DOI 10.1109/SFCS.2000.892065
   Leskovec Jurij, 2008, Dynamics of Large Networks
   LI K, 1989, ACM T COMPUT SYST, V7, P321, DOI 10.1145/75104.75105
   Ming-Chit Tam, 1990, Operating Systems Review, V24, P40, DOI 10.1145/382244.382831
   Plotkin GD, 2004, J LOGIC ALGEBR PROGR, V60-1, P17, DOI 10.1016/j.jlap.2004.03.002
   Sirjani M, 2007, LECT NOTES COMPUT SC, V4709, P102
NR 24
TC 1
Z9 1
U1 0
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29a, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 1
PY 2020
VL 186
AR 102341
DI 10.1016/j.scico.2019.102341
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA JU4MS
UT WOS:000501652300001
OA Green Published, Bronze
DA 2024-07-18
ER

PT J
AU Jia, JD
   Yang, XY
   Zhang, R
   Liu, X
AF Jia, Jingdong
   Yang, Xiaoying
   Zhang, Rong
   Liu, Xi
TI Understanding software developers' cognition in agile requirements
   engineering
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Agile requirements engineering; User story; Cognitive representation
   style; Cognitive interaction pattern
ID INTERACTION PATTERNS; PERSONALITY; PERFORMANCE; STYLE; COLLABORATION;
   STRATEGIES; ABILITY; MODELS; TEAMS
AB During agile requirements engineering, developers need to assimilate and transform the original requirements information into system functions in the form of user stories. Obviously, this is a challenging cognition-based process, in which developers' cognition plays a key role. However, prior research has not explored developers' cognition during the process. The purpose of this study is to investigate and understand developers' cognitive representation styles and interaction patterns in agile requirements. A classification of developers' cognitive representation styles and interaction patterns was first proposed based on literature review. Then, an empirical research was conducted in a capstone software engineering course. Students were playing the role of developers and engaging in agile software development during this course, so their conversation about splitting and defining user stories was recorded and analyzed to examine developers' cognition via a content analysis method. The results show that, even when facing requirements analysis, developers tend to exhibit a technology-oriented cognitive representation style. Additionally, developers have more cognitive difficulty in determining activity and granularity than the role and business value of a user story. Developers also exhibit a preference for cognitive interaction pattern; assertion, comment, and two question-patterns are the major four patterns in our paper rather than information sharing, which was considered a major pattern in previous research. This paper contributes to our understanding of developers' cognition, further predicting and guiding developers' behaviors toward achieving good quality requirements analysis. (C) 2019 Elsevier B.V. All rights reserved.
C1 [Jia, Jingdong; Yang, Xiaoying; Liu, Xi] Beihang Univ, Sch Software, Beijing 100083, Peoples R China.
   [Zhang, Rong] Tencent Technol Shenzhen Co Ltd, Tencent Bldg, Shenzhen 518057, Peoples R China.
C3 Beihang University; Tencent
RP Jia, JD (corresponding author), Beihang Univ, Sch Software, Beijing 100083, Peoples R China.
EM jiajingdong@buaa.edu.cn
CR Abbas J., 2016, J. Softw. Eng. Appl., V9, P63, DOI [10.4236/jsea.2016.93005, DOI 10.4236/JSEA.2016.93005]
   Abdullah N., 2011, ... on Agile Requirements, P1, DOI DOI 10.1145/2068783.2068784
   Agarwal R., 1996, Journal of Management Information Systems, V13, P137
   Ahimbisibwe A, 2015, J ENTERP INF MANAG, V28, P7, DOI 10.1108/JEIM-08-2013-0060
   Ali N, 2017, REQUIR ENG, V22, P191, DOI 10.1007/s00766-015-0240-4
   Andrews JJ, 2017, J EDUC MEAS, V54, P54, DOI 10.1111/jedm.12132
   [Anonymous], J DESIGN RES
   Beck CW, 2016, CORP COMMUN, V21, P333, DOI 10.1108/CCIJ-07-2014-0048
   Belk M, 2015, INT J HUM-COMPUT ST, V84, P1, DOI 10.1016/j.ijhcs.2015.07.002
   Blomkvist JK, 2015, CHI 2015: PROCEEDINGS OF THE 33RD ANNUAL CHI CONFERENCE ON HUMAN FACTORS IN COMPUTING SYSTEMS, P1875, DOI 10.1145/2702123.2702366
   Browne GJ, 2002, INFORM MANAGE-AMSTER, V39, P625, DOI 10.1016/S0378-7206(02)00014-9
   Capretz LF, 2010, IT PROF, V12, P6, DOI 10.1109/MITP.2010.33
   Chentouf Z, 2014, J SOFTW ENG, V7, P530
   Choi KS, 2008, INFORM SOFTWARE TECH, V50, P1114, DOI 10.1016/j.infsof.2007.11.002
   Cohn Mike., 2004, User Stories Applied: For Agile Software Development
   de Vries RE, 2006, COMMUN RES, V33, P115, DOI 10.1177/0093650205285366
   Delvaux E, 2015, SMALL GR RES, V46, P300, DOI 10.1177/1046496415576411
   Devine DJ, 2001, SMALL GR RES, V32, P507, DOI 10.1177/104649640103200501
   Dimitrijevic S, 2015, INFORM SOFTWARE TECH, V57, P352, DOI 10.1016/j.infsof.2014.05.012
   Dinsmore DL, 2016, J EXP EDUC, V84, P213, DOI 10.1080/00220973.2014.979126
   Ehrlich Kate, 2012, Proceedings of the ACM 2012 Conference on Computer Supported Cooperative Work, CSCW '12, P945
   Enns HG, 2006, COMMUN ACM, V49, P105, DOI 10.1145/1121949.1121956
   Estrada RD, 2015, RES NURS HEALTH, V38, P278, DOI 10.1002/nur.21660
   Falessi D, 2018, EMPIR SOFTW ENG, V23, P452, DOI 10.1007/s10664-017-9523-3
   Figl K, 2016, REQUIR ENG, V21, P63, DOI 10.1007/s00766-014-0210-2
   Foehrenbach S., 2016, P 2016 CHI C EXT ABS, P973
   Ford N, 2005, J AM SOC INF SCI TEC, V56, P741, DOI 10.1002/asi.20168
   Gibbs W. J., 2006, Journal of Computing in Higher Education, V18, P30, DOI 10.1007/BF03032723
   Hadar I, 2013, SCI COMPUT PROGRAM, V78, P1407, DOI 10.1016/j.scico.2012.10.006
   Hannay JE, 2017, REQUIR ENG, V22, P289, DOI 10.1007/s00766-016-0244-8
   Hansen MichaelE., 2012, Proceedings of the ACM International Symposium on New Ideas, New Paradigms, and Reflections on Programming and Software, P27
   Hodkinson CS, 2014, EDUC TRAIN, V56, P430, DOI 10.1108/ET-04-2013-0057
   Hogan K., 1999, Research in Science Education, V29, P457, DOI DOI 10.1007/BF02461590
   Hornbak Kasper, 2011, Foundations and Trends in Human-Computer Interaction, V5, P299, DOI 10.1561/1100000043
   Huang FQ, 2014, SCI COMPUT PROGRAM, V89, P350, DOI 10.1016/j.scico.2014.03.004
   Hudson W., 2013, Interactions, V20, P50, DOI [10.1145/2517668, DOI 10.1145/2517668]
   Inayat I, 2015, COMPUT HUM BEHAV, V51, P1367, DOI 10.1016/j.chb.2014.10.040
   Inayat I, 2015, COMPUT HUM BEHAV, V51, P915, DOI 10.1016/j.chb.2014.10.046
   Jo I, 2017, J COMPUT ASSIST LEAR, V33, P106, DOI 10.1111/jcal.12168
   Junaidy D. W., 2013, ICORD 13, P223
   Kafetsios K, 2005, THEOR PSYCHOL, V15, P639, DOI 10.1177/0959354305057267
   Keefe RSE, 2004, SCHIZOPHR RES, V68, P283, DOI 10.1016/j.schres.2003.09.011
   King J, 2017, ASIA PAC EDUC REV, V18, P489, DOI 10.1007/s12564-017-9503-8
   Kitchenham BA, 2002, IEEE T SOFTWARE ENG, V28, P721, DOI 10.1109/TSE.2002.1027796
   Kovitz B., 2003, Requirements Engineering, V8, P135, DOI 10.1007/s00766-002-0162-9
   Lenberg P, 2015, J SYST SOFTWARE, V107, P15, DOI 10.1016/j.jss.2015.04.084
   Licorish SA, 2014, INFORM SOFTWARE TECH, V56, P1578, DOI 10.1016/j.infsof.2014.02.004
   Licorish Sherlock A., 2013, P C EV ASS SOFTW ENG, P228
   Lin JY, 2014, ASIAPAC SIGN INFO PR
   Lin PC, 2014, INTERNET HIGH EDUC, V22, P51, DOI 10.1016/j.iheduc.2014.05.001
   Ling C, 2009, INT J HUM-COMPUT ST, V67, P382, DOI 10.1016/j.ijhcs.2008.11.002
   Liskin O, 2014, LNBIP, V179, P110, DOI [10.1007/978-3-319-06862-6_8, DOI 10.1007/978-3-319-06862-6]
   Losada B, 2013, SCI COMPUT PROGRAM, V78, P2268, DOI 10.1016/j.scico.2012.07.022
   Lucassen G, 2017, REQUIR ENG, V22, P339, DOI 10.1007/s00766-017-0270-1
   Lucassen G, 2016, REQUIR ENG, V21, P383, DOI 10.1007/s00766-016-0250-x
   Lugli L, 2017, COMPUT HUM BEHAV, V66, P191, DOI 10.1016/j.chb.2016.09.038
   Mahnic V, 2012, J SYST SOFTWARE, V85, P2086, DOI 10.1016/j.jss.2012.04.005
   Mangalaraj G, 2014, MIS QUART, V38, P249, DOI 10.25300/MISQ/2014/38.1.12
   Manyangara A., 2010, Proceeding of the Third Symposium on Information Interaction in Context, V45, DOI DOI 10.1145/1840784.1840793
   Mayer RE, 2003, J EDUC PSYCHOL, V95, P833, DOI 10.1037/0022-0663.95.4.833
   Nicolae Irina-Emilia, 2015, Symbiotic Interaction. 4th International Workshop, Symbiotic 2015. Proceedings: LNCS 9359, P126, DOI 10.1007/978-3-319-24917-9_13
   Nori R, 2006, AM J PSYCHOL, V119, P67, DOI 10.2307/20445319
   Pitts MG, 2007, INFORM SYST J, V17, P89, DOI 10.1111/j.1365-2575.2006.00240.x
   Ramesh B, 2010, INFORM SYST J, V20, P449, DOI 10.1111/j.1365-2575.2007.00259.x
   Runeson P, 2009, EMPIR SOFTW ENG, V14, P131, DOI 10.1007/s10664-008-9102-8
   Salman I, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 1, P666, DOI 10.1109/ICSE.2015.82
   Santos V, 2015, EMPIR SOFTW ENG, V20, P1006, DOI 10.1007/s10664-014-9307-y
   Shaochun X., 2005, P 2005 INT S EMP SOF
   Sjoberg DIK, 2005, IEEE T SOFTWARE ENG, V31, P733, DOI 10.1109/TSE.2005.97
   Stoyanov S, 2017, EVAL PROGRAM PLANN, V60, P238, DOI 10.1016/j.evalprogplan.2016.08.015
   Tripathy M., 2018, IUP Journal of Soft Skills, V12, P48
   Trkman M, 2016, INFORM SOFTWARE TECH, V71, P58, DOI 10.1016/j.infsof.2015.10.006
   Varela P, 2017, FOOD RES INT, V99, P693, DOI 10.1016/j.foodres.2017.06.021
   vonMayrhauser A, 1996, IEEE T SOFTWARE ENG, V22, P424, DOI 10.1109/32.508315
   Walle T, 2009, INT SYMP EMP SOFTWAR, P203, DOI 10.1109/ESEM.2009.5315996
   Wang ZJ, 2017, BRIT J EDUC TECHNOL, V48, P683, DOI 10.1111/bjet.12433
   Welsh JC, 2018, PSYCHOL SPORT EXERC, V36, P197, DOI 10.1016/j.psychsport.2018.03.003
   Wisco BE, 2009, CLIN PSYCHOL REV, V29, P382, DOI 10.1016/j.cpr.2009.03.003
   Wittman B., 2015, P 46 ACM TECHN S COM, P447
   Xu JF, 2018, TESOL QUART, V52, P198, DOI 10.1002/tesq.398
   Yang CL, 2014, CHIN MANAG STUD, V8, P6, DOI 10.1108/CMS-09-2011-0079
   Yu SL, 2015, REV ESP LINGUIST APL, V28, P618, DOI 10.1075/resla.28.2.10yu
   2009, J SYST SOFTW, V82, P1540, DOI DOI 10.1016/J.JSS.2009.04.038
   2016, J SYST SOFTW, V117, P645, DOI DOI 10.1016/J.JSS.2015.10.024
   2011, INT J AVIAT PSYCHOL, V21, P85, DOI DOI 10.1080/10508414.2011.537561
   1999, IEEE T SOFTWARE ENG, V25, P526, DOI DOI 10.1109/32.799950
NR 86
TC 10
Z9 11
U1 2
U2 30
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 1
PY 2019
VL 178
BP 1
EP 19
DI 10.1016/j.scico.2019.03.005
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Social Science Citation Index (SSCI)
SC Computer Science
GA HY3GT
UT WOS:000468012000001
OA Bronze
DA 2024-07-18
ER

PT J
AU Rocha, RCO
   Góes, LFW
   Pereira, FMQ
AF Rocha, Rodrigo C. O.
   Goes, Luis F. W.
   Pereira, Fernando M. Q.
TI Automatic parallelization of recursive functions with rewriting rules
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 20th Brazilian Symposium on Programing Languages (SBLP)
CY SEP 22-23, 2016
CL Maringa, BRAZIL
DE Recursive functions; Parallel computing; Functional programming;
   Algebraic framework; Abstract algebra
ID PROGRAMS
AB Functional programming languages, since their early days, have been regarded as the holy grail of parallelism. And, in fact, the absence of race conditions, coupled with algorithmic skeletons such as map and reduce, have given developers the opportunity to write many different techniques aimed at the automatic parallelization of programs. However, there are many functional programs that are still difficult to parallelize. This difficulty stems from many factors, including the complex syntax of recursive functions. This paper provides new equipment to deal with this problem. Such instrument consists of an insight, plus a code transformation that is enabled by this insight Concerning the first contribution, we demonstrate that many recursive functions can be rewritten as a combination of associative operations. We group such functions into two categories, which involve monoid and semiring operations. Each of these categories admits a parallel implementation. To demonstrate the effectiveness of this idea, we have implemented an automatic code rewriting tool for Haskell, and have used it to convert six well-known recursive functions to algorithms that run in parallel. Our tool is totally automatic, and it is able to deliver non-trivial speedups upon the sequential version of the programs that it receives. In particular, the automatically generated parallel code delivers good scalability when varying the number of threads or the input size. (C) 2018 Elsevier B.V. All rights reserved.
C1 [Rocha, Rodrigo C. O.] Univ Edinburgh, Edinburgh, Midlothian, Scotland.
   [Goes, Luis F. W.] Pontificia Univ Catolica Minas Gerais, Belo Horizonte, MG, Brazil.
   [Pereira, Fernando M. Q.] Univ Fed Minas Gerais, Belo Horizonte, MG, Brazil.
C3 University of Edinburgh; Pontificia Universidade Catolica de Minas
   Gerais; Universidade Federal de Minas Gerais
RP Rocha, RCO (corresponding author), Univ Edinburgh, Edinburgh, Midlothian, Scotland.; Pereira, FMQ (corresponding author), Univ Fed Minas Gerais, Belo Horizonte, MG, Brazil.
EM r.rocha@ed.ac.uk; lfwgoes@pucminas.br; fernando@dcc.ufmg.br
RI Rocha, Rodrigo/HNC-0305-2023; Góes, Luís Fabrício Wanderley/Q-2503-2018;
   Pereira, Fernando/HNR-7786-2023
OI Góes, Luís Fabrício Wanderley/0000-0003-1801-9917; Caetano de Oliveira
   Rocha, Rodrigo/0000-0002-6317-3908
FU UK Engineering and Physical Sciences Research Council (EPSRC)
   [EP/L01503X/1]; Institute for Computing Systems Architecture (ICSA) in
   the School of Informatics at the University of Edinburgh; CAPES; FAPEMIG
   [APQ-03832-14]; CNPq [202896/2017-0]
FX This work was partially supported by the UK Engineering and Physical
   Sciences Research Council (EPSRC) under grants EP/L01503X/1 for the
   University of Edinburgh, School of Informatics, Centre for Doctoral
   Training in Pervasive Parallelism, and also by the Institute for
   Computing Systems Architecture (ICSA) in the School of Informatics at
   the University of Edinburgh. Fernando Pereira and Luis Fabricio W. Goes
   are supported by grants from CAPES, FAPEMIG (APQ-03832-14) and CNPq
   (202896/2017-0).
CR [Anonymous], PLDI07 P 2007 ACM
   [Anonymous], 2003, Parallel Processing Letters, DOI DOI 10.1142/S0129626403001380_EPRINT:HTTPS://DOI.ORG/10.1142/S0129626403001380
   [Anonymous], P 2012 INT WORKSH AC
   [Anonymous], MATH ITS APPL
   Balland E, 2007, LECT NOTES COMPUT SC, V4533, P36
   Berthold J, 2009, INT CONF PARA PROC, P386, DOI 10.1109/ICPPW.2009.10
   Bondhugula U, 2008, LECT NOTES COMPUT SC, V4959, P132
   Bondhugula U, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P101, DOI 10.1145/1375581.1375595
   Brown C, 2014, INT J PARALLEL PROG, V42, P564, DOI 10.1007/s10766-013-0266-5
   CARRIERO N, 1989, COMMUN ACM, V32, P444, DOI 10.1145/63334.63337
   Chen M.C., 1986, POPL, P131
   Cole M. I., 1995, Parallel Processing Letters, V5, P191, DOI 10.1142/S0129626495000175
   Collins Alexander., 2014, Proceedings of ACM SIGPLAN International Workshop on Libraries, Languages, p8:8, DOI DOI 10.1145/2627373.2627375
   Dean J, 2004, USENIX ASSOCIATION PROCEEDINGS OF THE SIXTH SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION (OSDE '04), P137
   Feautrier P., 1996, Data Parallel Programming Model. Foundations, HPF Realization, and Scientific Applications, P79
   Ferreira BM, 2015, LECT NOTES COMPUT SC, V9325, P44, DOI 10.1007/978-3-319-24012-1_4
   FISHER AL, 1994, SIGPLAN NOTICES, V29, P135, DOI 10.1145/773473.178255
   GILL AJ, 1994, IFIP TRANS A, V51, P581
   Golan J.S., 2010, SEMIRINGS THEIR APPL, DOI [10.1007/978-94-015-9333-5, DOI 10.1007/978-94-015-9333-5]
   Govindarajan R., 2013, P 2013 IEEEACM INT S, P1
   Hu ZJ, 1997, ACM T PROGR LANG SYS, V19, P444, DOI 10.1145/256167.256201
   Jones S.P., 2001, HASK WORKSH, V1, P203
   KOGGE PM, 1973, IEEE T COMPUT, VC-22, P786, DOI 10.1109/TC.1973.5009159
   Liu Y, 2011, LECT NOTES COMPUT SC, V6853, P39, DOI 10.1007/978-3-642-23397-5_5
   Marlow S, 2011, ACM SIGPLAN NOTICES, V46, P71, DOI 10.1145/2096148.2034685
   Marlow S, 2010, ACM SIGPLAN NOTICES, V45, P91, DOI 10.1145/2088456.1863535
   Marlow S, 2009, ICFP'09: PROCEEDINGS OF THE 2009 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P65
   Marlow S, 2008, ISMM'08: PROCEEDINGS OF THE 2008 INTERNATIONAL SYMPOSIUM ON MEMORY MANAGEMENT, P11
   Mendonça G, 2017, ACM T ARCHIT CODE OP, V14, DOI 10.1145/3084540
   Mendonca Gleison, 2016, P 2016 SBAC PAD 16 I, P1
   Misailovic S, 2013, ACM T EMBED COMPUT S, V12, DOI 10.1145/2465787.2465790
   Morais Ferreira Bruno, 2012, Programming Languages. Proceedings of the16th Brazilian Symposium, SBLP 2012, P87, DOI 10.1007/978-3-642-33182-4_8
   Morihata A, 2010, LECT NOTES COMPUT SC, V6009, P321, DOI 10.1007/978-3-642-12251-4_23
   Morihata A, 2009, ACM SIGPLAN NOTICES, V44, P177, DOI 10.1145/1594834.1480905
   da Mata LLP, 2013, SCI COMPUT PROGRAM, V78, P1193, DOI 10.1016/j.scico.2012.09.006
   Remmelg T., 2016, Proceedings of the 9th Annual Workshop on General Purpose Processing using Graphics Processing Unit, P22
   Rocha RCO, 2016, LECT NOTES COMPUT SC, V9889, P140, DOI 10.1007/978-3-319-45279-1_10
   Rotman J. J., 2003, Advanced Modern Algebra
   Sato S, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P470
   Steuwer M, 2017, INT SYM CODE GENER, P74, DOI 10.1109/CGO.2017.7863730
   Steuwer M, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P205, DOI 10.1145/2784731.2784754
   Trifunovic K, 2009, INT CONFER PARA, P327, DOI 10.1109/PACT.2009.18
   WADLER P, 1990, THEOR COMPUT SCI, V73, P231, DOI 10.1016/0304-3975(90)90147-A
   Wang Z, 2014, ACM T ARCHIT CODE OP, V11, DOI 10.1145/2579561
   Zou Yun., 2012, Proceedings of the Tenth International Symposium on Code Generation and Optimization, CGO'12, P74, DOI 10.1145/2259016.2259027
NR 45
TC 2
Z9 2
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR 15
PY 2019
VL 173
BP 128
EP 152
DI 10.1016/j.scico.2018.01.004
PG 25
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA HO3WK
UT WOS:000460853500008
OA hybrid
DA 2024-07-18
ER

PT J
AU Giannini, P
   Richter, T
   Servetto, M
   Zucca, E
AF Giannini, Paola
   Richter, Tim
   Servetto, Marco
   Zucca, Elena
TI Tracing sharing in an imperative pure calculus
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Imperative calculi; Sharing; Type and effect systems
ID UNIQUENESS; CAPABILITIES; IMMUTABILITY
AB We introduce a type and effect system, for an imperative object calculus, which infers sharing possibly introduced by the evaluation of an expression, represented as an equivalence relation among its free variables. This direct representation of sharing effects at the syntactic level allows us to express in a natural way, and to generalize, widely-used notions in literature, notably uniqueness and borrowing. Moreover, the calculus is pure in the sense that reduction is defined on language terms only, since they directly encode store. The advantage of this non-standard execution model with respect to a behaviorally equivalent standard model using a global auxiliary structure is that reachability relations among references are partly encoded by scoping. (C) 2018 Elsevier B.V. All rights reserved.
C1 [Giannini, Paola] Univ Piemonte Orientate, Vercelli, Italy.
   [Richter, Tim] Univ Potsdam, Potsdam, Germany.
   [Servetto, Marco] Victoria Univ Wellington, Wellington, New Zealand.
   [Zucca, Elena] Univ Genoa, Genoa, Italy.
C3 University of Eastern Piedmont Amedeo Avogadro; University of Potsdam;
   Victoria University Wellington; University of Genoa
RP Giannini, P (corresponding author), Univ Piemonte Orientate, Vercelli, Italy.
EM giannini@di.unipmn.it; tim@cs.uni-potsdam.de;
   marco.servetto@ecs.vuw.ac.nz; elena.zucca@unige.it
OI Giannini, Paola/0000-0003-2239-9529; ZUCCA, ELENA/0000-0002-6833-6470;
   Richter, Tim/0000-0002-8892-283X
FU Universita del Piemonte Orientate
FX This original research has the financial support of the Universita del
   Piemonte Orientate.
CR Adve V. S., 2009, ACM SIGPLAN C OBJ OR, P97
   Almeida PS, 1997, LECT NOTES COMPUT SC, V1241, P32, DOI 10.1007/BFb0053373
   Ancona D, 2001, ACM SIGPLAN NOTICES, V36, P16, DOI 10.1145/504311.504284
   [Anonymous], 1999, Communicating and Mobile Systems: The Calculus
   Ariola Z. M., 1997, Journal of Functional Programming, V7, P265, DOI 10.1017/S0956796897002724
   Boyland J, 2001, SOFTWARE PRACT EXPER, V31, P533, DOI 10.1002/spe.370
   Boyland JT, 2010, ACM T PROGR LANG SYS, V32, DOI 10.1145/1749608.1749611
   Capriccioli A, 2016, ELECTRON NOTES THEOR, V322, P87, DOI 10.1016/j.entcs.2016.03.007
   Castegren  E., 2017, LIPICS, V74
   Castegren  E., 2016, LIPICS, V56
   Clarke Dave, 2013, Aliasing in Object-Oriented Programming. Types, Analysis and Verification: LNCS 7850, P15, DOI 10.1007/978-3-642-36946-9_3
   Clarke D, 2003, LECT NOTES COMPUT SC, V2743, P176
   Clebsch S., 2015, P 5 INT WORKSHOP PRO, P1, DOI DOI 10.1145/2824815.2824816
   De A, 2012, LECT NOTES COMPUT SC, V7313, P665, DOI 10.1007/978-3-642-31057-7_29
   Dietl W, 2007, LECT NOTES COMPUT SC, V4609, P28
   Giannini  P., 2017, FTFJP 17 FORMAL TECH
   Giannini  P., 2017, OOPS 17 OBJECT ORIEN, P1513, DOI DOI 10.1145/3019612
   Giannini P., 2016, ICTCS 16 ITALIAN C T, V1720, P62
   Giannini P, 2018, 33RD ANNUAL ACM SYMPOSIUM ON APPLIED COMPUTING, P1038, DOI 10.1145/3167132.3167245
   Gordon CS, 2012, ACM SIGPLAN NOTICES, V47, P21, DOI 10.1145/2398857.2384619
   Haller P, 2016, ACM SIGPLAN NOTICES, V51, P272, DOI 10.1145/3022671.2984042
   Haller P, 2010, LECT NOTES COMPUT SC, V6183, P354
   HOGG J, 1991, SIGPLAN NOTICES, V26, P271
   Igarashi A, 2001, ACM T PROGR LANG SYS, V23, P396, DOI 10.1145/503502.503505
   Maraist J., 1998, Journal of Functional Programming, V8, P275, DOI 10.1017/S0956796898003037
   Müller P, 2007, OOPSLA: 22ND INTERNATIONAL CONFERENCE ON OBJECT-ORIENTED PROGRAMMING, SYSTEMS, LANGUAGES, AND APPLICATIONS, PROCEEDINGS, P461
   Naden K, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P557
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Servetto  M., FTFIP 13 FORMAL TECH
   Servetto M, 2015, LECT NOTES COMPUT SC, V9458, P208, DOI 10.1007/978-3-319-26529-2_12
   Servetto M, 2013, LECT NOTES COMPUT SC, V7920, P205, DOI 10.1007/978-3-642-39038-8_9
   Servetto Marco, 2013, WODET 2014 WORKSH DE
   Steensgaard B., 1996, Compiler Construction. 6th International Conference, CC'96. Proceedings, P136
   Turon A, 2017, ACM SIGPLAN NOTICES, V52, P2, DOI 10.1145/3093333.3011999
   Zibin Y, 2010, ACM SIGPLAN NOTICES, V45, P598, DOI 10.1145/1932682.1869509
NR 35
TC 3
Z9 3
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR 1
PY 2019
VL 172
BP 180
EP 202
DI 10.1016/j.scico.2018.11.007
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA HK8HC
UT WOS:000458229000009
OA Bronze
DA 2024-07-18
ER

PT J
AU Kyriakakis, P
   Chatzigeorgiou, A
   Ampatzoglou, A
   Xinogalos, S
AF Kyriakakis, Panos
   Chatzigeorgiou, Alexander
   Ampatzoglou, Apostolos
   Xinogalos, Stelios
TI Exploring the frequency and change proneness of dynamic feature pattern
   instances in PHP applications
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE PHP; Software maintenance; Method invocation; Object instantiation;
   Change proneness
AB Although numerous technologies are available for developing web applications, PHP holds the lions' share of web content today. PHP offers several features that enable developers to easily produce dynamically extendible code, forming an entire ecosystem of standard as well as more 'exotic' opportunities that can be exploited. One reason that drives developers to rely on the dynamic features of a scripting language is to enable effortless functionality extensions. The aim of this work is twofold: initially, we (a) provide an overview of all possible dynamically extendible code patterns (i.e., either through method invocation, or object instantiation) and (b) investigate their frequency by mining the code base of ten milestone PHP projects to identify the subset of patterns that developers actually use. Next, in order to investigate whether the expected flexibility of these patterns stands in practice, we examine if code chunks that instantiate them are more stable than other parts of the code. In particular, we study whether methods that employ dynamic invocation and instantiation patterns are less change prone than the other methods. The findings imply that although a small subset of all the theoretically feasible patterns is actually put to use, the code that is developed upon such patterns is less change prone. (C) 2018 Elsevier B.V. All rights reserved.
C1 [Kyriakakis, Panos; Chatzigeorgiou, Alexander; Ampatzoglou, Apostolos; Xinogalos, Stelios] Univ Macedonia, Dept Appl Informat, Thessaloniki, Greece.
C3 University of Macedonia
RP Chatzigeorgiou, A (corresponding author), Univ Macedonia, Dept Appl Informat, Thessaloniki, Greece.
EM panos@salix.gr; achat@uom.gr; apostolos.ampatzoglou@gmail.com;
   stelios@uom.gr
RI Xinogalos, Stelios/AAB-8216-2022; Ampatzoglou, Apostolos/AAC-3632-2020;
   Chatzigeorgiou, Alexandros/AAL-6077-2021
OI Xinogalos, Stelios/0000-0002-9148-7779; 
CR Amanatidis T, 2016, INFORM SOFTWARE TECH, V72, P48, DOI 10.1016/j.infsof.2015.11.009
   [Anonymous], 1992, TR9296 UMIACS
   [Anonymous], 2008, Practical API design: Confessions of a Java framework architect
   [Anonymous], 2010, P JOINT ERCIM WORKSH
   Eshkevari L, 2015, 2015 22ND INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER), P63, DOI 10.1109/SANER.2015.7081816
   Hauzar D., 2015, LEIBNIZ INT P INFORM, V37, P689, DOI [10.4230/LIPIcs.ECOOP.2015.689, DOI 10.4230/LIPICS.ECOOP.2015.689]
   Hills M., 2013, Proceedings of ISSTA 2013, P325, DOI DOI 10.1145/2483760.2483786
   Hills M, 2015, IEEE INT CONF AUTOM, P563, DOI 10.1109/ASE.2015.72
   Hills M, 2015, 2015 22ND INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER), P525, DOI 10.1109/SANER.2015.7081870
   Joglekar A.M., 2003, Statistical methods for six sigma in RD and manufacturing
   Jovanovic N, 2006, P IEEE S SECUR PRIV, P258, DOI 10.1109/SP.2006.29
   Kneuss E., 2010, Proceedings of the Eighteenth ACM SIGSOFT International Symposium on Foundations of Software Engineering, FSE '10, P373
   Krinke J, 2008, EIGHTH IEEE INTERNATIONAL WORKING CONFERENCE ON SOURCE CODE ANALYSIS AND MANIPULATION, PROCEEDINGS, P57, DOI 10.1109/SCAM.2008.14
   Kyriakakis P, 2016, 20TH PAN-HELLENIC CONFERENCE ON INFORMATICS (PCI 2016), DOI 10.1145/3003733.3003777
   MARTIN RC, 2000, MORE C GEMS, P97
   NACHAR N, 2008, TUTOR QUANT METHODS, V4, P13, DOI DOI 10.20982/TQMP.04.1P013
   Navarro G, 2001, ACM COMPUT SURV, V33, P31, DOI 10.1145/375360.375365
   Razali N. M., 2011, J. Stat. Model. and Anal., V2, P21, DOI DOI 10.1515/BILE-2015-0008
   Roy CK, 2008, INT C PROGRAM COMPRE, P172, DOI 10.1109/ICPC.2008.41
   Son S., 2011, P ACM SIGPLAN 6 WORK, DOI [10.1145/2166956.2166964, DOI 10.1145/2166956.2166964]
   Tsantalis N, 2011, EUR CON SFTWR MTNCE, P25, DOI 10.1109/CSMR.2011.7
   van der Hoek HE, 2015, PROCEEDINGS OF THE 2015 ACM SIGPLAN WORKSHOP ON PARTIAL EVALUATION AND PROGRAM MANIPULATION (PEPM'15), P9, DOI 10.1145/2678015.2682535
   Wang B, 2015, Soc. Sci. Res, P134
   Yamamoto T, 2005, LECT NOTES COMPUT SC, V3547, P530
NR 24
TC 3
Z9 3
U1 0
U2 7
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 15
PY 2019
VL 171
BP 1
EP 20
DI 10.1016/j.scico.2018.10.004
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA HI9CQ
UT WOS:000456753300001
OA Bronze
DA 2024-07-18
ER

PT J
AU Bernardi, G
   Francalanza, A
AF Bernardi, Giovanni
   Francalanza, Adrian
TI Full-abstraction for client testing preorders
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Behavioural equivalences; Full-abstraction; Foundations of web-services
AB Client testing preorders relate tests (clients) instead of processes (servers), and are usually defined using either must testing or a compliance relation. Existing characterisations of these preorders are unsatisfactory for they rely on the notion of usable clients which, in turn, are defined using an existential quantification over the servers that ensure client satisfaction. In this paper we characterise the set of usable clients wrt must testing for finite-branching LTSs, and give a sound and complete decision procedure for it. We also provide novel coinductive characterisations of the client preorders due to must and compliance, which we use to show that these preorders are decidable, thus positively answering the question opened in [5,3]. (C) 2018 Elsevier B.V. All rights reserved.
C1 [Bernardi, Giovanni] Univ Paris Diderot, IRIF, Paris, France.
   [Francalanza, Adrian] Univ Malta, Msida, Malta.
C3 Universite Paris Cite; University of Malta
RP Bernardi, G (corresponding author), Univ Paris Diderot, IRIF, Paris, France.
EM gio@irif.fr; adrian.francalanza@um.edu.mt
OI Francalanza, Adrian/0000-0003-3829-7391
FU COST Action STSMs [IC1201-130216-067787, IC1201-170214-038253]; EU FP7
   ADVENT project; RANNIS THEOFOMON project [163406-051]
FX This research was supported by the COST Action STSMs
   IC1201-130216-067787 and IC1201-170214-038253. The first author was
   supported by the EU FP7 ADVENT project. The second author is partly
   supported by the RANNIS THEOFOMON project 163406-051. The authors
   acknowledge the Dagstuhl seminar 17051 and thank L. Aceto, M. Bravetti,
   A. Gorla, M. Hennessy, C. Spaccasassi and anonymous reviewers for their
   help and suggestions.
CR Andersen J. R., 2015, ICTAC
   Barbanera F., 2010, PPDP
   Bernardi G., 2013, BEAT2
   Bernardi G., 2013, THESIS
   Bernardi G., 2016, MATH STRUCT COMPUT S, V26, P3
   Bernardi G, 2016, LOG METH COMPUT SCI, V12, DOI 10.2168/LMCS-12(2:10)2016
   Bernardi G, 2015, LOG METH COMPUT SCI, V11, DOI 10.2168/LMCS-11(2:1)2015
   Bernardi Giovanni, 2017, COORDINATION
   Bravetti M., 2008, FUNDAM INFORM, V89
   Castagna G, 2009, ACM T PROGR LANG SYS, V31, DOI 10.1145/1538917.1538920
   Cerone A., 2010, EXPRESS
   Clarke E. M., 2003, VERIFICATION THEORY
   Cormen T. H., 2009, Introduction to Algorithms, VSecond
   DENICOLA R, 1984, THEOR COMPUT SCI, V34, P83, DOI 10.1016/0304-3975(84)90113-0
   Francalanza A., 2017, CONCUR, V85
   Francalanza A, 2016, LECT NOTES COMPUT SC, V9634, P145, DOI 10.1007/978-3-662-49630-5_9
   Gay S.J., 2005, ACTA INFORM, V42
   Gorrieri R., 2015, INTRO CONCURRENCY TH
   Hennessy M., 1988, An algebraic theory of processes
   Knuth DE, 1997, ART COMPUTER PROGRAM, V2, P145
   KOnig D., 1927, ACTA LITTER SCI SZEG, V3
   Laneve C., 2007, CONCUR
   Luo Q., 2014, FSE
   Marinescu P., 2014, ISSTA
   Martens A., 2005, FASE
   Memon A. M., 2013, ICSE
   Milner R., 1989, Communication and concurrency
   Mooij A. J., 2010, J LOG ALGEBRAIC PROG, V79
   Padovani L., 2016, MATH STRUCT COMPUT S, V26
   Padovani L, 2010, THEOR COMPUT SCI, V411, P3328, DOI 10.1016/j.tcs.2010.05.002
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Rensink A., 2007, INF COMPUT, V205
   Spaccasassi C., 2015, THESIS
   Weinberg D., 2009, WS FM
   Winskel G., 1993, The Formal Semantics of Programming Languages
NR 35
TC 2
Z9 2
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 15
PY 2018
VL 168
BP 94
EP 117
DI 10.1016/j.scico.2018.08.004
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA HA6JG
UT WOS:000450385200005
OA Bronze
DA 2024-07-18
ER

PT J
AU Tempero, E
   Ralph, P
AF Tempero, Ewan
   Ralph, Paul
TI A framework for defining coupling metrics
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Dependency; Coupling; Software metrics; Formal model
AB Many metrics have been proposed to measure coupling the degree of association between modules in a system. They have often been described in different ways, hindering comparison and research. Their definitions are often incomplete regarding language features in some languages, meaning that different tool developers may implement the same metric differently. This complicates comparing results from studies that use different tools. This paper therefore aims to define coupling metrics consistently and unambiguously. The paper describes a model of coupling that uses the reification of the concept of dependency as its fundamental unit. Based on this model, it defines a framework for defining coupling metrics. It shows how to define several well-known coupling metrics in the framework, and how defining different metrics based on the same model facilitates direct comparisons. It discusses how the framework resolves issues due to incomplete metric definitions, such as different language features. This formal framework is sufficiently simple that it can be implemented in such a way as to provide multiple metrics. (C) 2018 Elsevier By. All rights reserved.
EM e.tempero@auckland.ac.nz
RI Ralph, D. Paul/H-4322-2019; Tempero, Ewan/D-2621-2009
OI Ralph, D. Paul/0000-0002-7411-0857; 
CR [Anonymous], 2003, ALAN APT SERIES
   [Anonymous], 2010, THESIS
   [Anonymous], APSEC 10
   Arisholm E, 2004, IEEE T SOFTWARE ENG, V30, P491, DOI 10.1109/TSE.2004.41
   Berard E.V., 1993, ESSAYS OBJECT ORIENT, V1
   Briand L, 1997, PROC INT CONF SOFTW, P412, DOI 10.1145/253228.253367
   Briand LC, 1999, IEEE T SOFTWARE ENG, V25, P91, DOI 10.1109/32.748920
   CHIDAMBER SR, 1994, IEEE T SOFTWARE ENG, V20, P476, DOI 10.1109/32.295895
   CHIDAMBER SR, 1991, SIGPLAN NOTICES, V26, P197
   CRONBACH LJ, 1955, PSYCHOL BULL, V52, P281, DOI 10.1037/h0040957
   CURTIS B, 1992, COMMUN ACM, V35, P75, DOI 10.1145/130994.130998
   DEMILLO RA, 1979, COMMUN ACM, V22, P271, DOI 10.1145/359104.359106
   Fenton N. E., 1998, Software metrics: a rigorous and practical approach
   HENRY S, 1981, IEEE T SOFTWARE ENG, V7, P510, DOI 10.1109/TSE.1981.231113
   KITCHENHAM B, 1995, IEEE T SOFTWARE ENG, V21, P929, DOI 10.1109/32.489070
   Lee YS., 1995, Proc. International Conference on Software Quality, Maribor, P81
   LI W, 1993, J SYST SOFTWARE, V23, P111, DOI 10.1016/0164-1212(93)90077-B
   Martin R. C., 1995, OBJECT ORIENTED DESI
   Ralph Paul, 2018, 22 INT C EV ASS SOFT
   Rudiger Lincke., 2008, International Symposium on Software Testing and Analysis, P131, DOI 10.1145/1390630.1390648
   Spinellis D, 2005, IEEE SOFTWARE, V22, P9, DOI 10.1109/MS.2005.111
   STEVENS WP, 1974, IBM SYST J, V13, P115, DOI 10.1147/sj.132.0115
   Tempero Ewan, 2016, 2016 23 AS PAC SOFTW
   Yang HY, 2007, 2007 AUSTRALIAN SOFTWARE ENGINEERING CONFERENCE, PROCEEDINGS, P319, DOI 10.1109/ASWEC.2007.28
   Yourdon Edward, 1979, CONSTANTINE STRUCTUR
NR 25
TC 5
Z9 5
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 15
PY 2018
VL 166
BP 214
EP 230
DI 10.1016/j.scico.2018.02.004
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GV5OO
UT WOS:000446152000010
OA Bronze
DA 2024-07-18
ER

PT J
AU Araújo, RF
   Albuquerque, HE
   de Bessa, LV
   Cordeiro, LC
   Chaves, JE
AF Araujo, Rodrigo F.
   Albuquerque, Higo E.
   de Bessa, Iury V.
   Cordeiro, Lucas C.
   Chaves Filho, Joao E.
TI Counterexample guided inductive optimization based on satisfiability
   modulo theories
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Satisfiability Modulo Theories (SMT); Model checking; Global
   optimization; Non-convex optimization
ID PATTERN SEARCH; SMT
AB This paper describes three variants of a counterexample guided inductive optimization (CEGIO) approach based on Satisfiability Modulo Theories (SMT) solvers. In particular, CEGIO relies on iterative executions to constrain a verification procedure, in order to perform inductive generalization, based on counterexamples extracted from SMT solvers. CEGIO is able to successfully optimize a wide range of functions, including non-linear and non-convex optimization problems based on SMT solvers, in which data provided by counterexamples are employed to guide the verification engine, thus reducing the optimization domain. The present algorithms are evaluated using a large set of benchmarks typically employed for evaluating optimization techniques. Experimental results show the efficiency and effectiveness of the proposed algorithms, which find the optimal solution in all evaluated benchmarks, while traditional techniques are usually trapped by local minima. (C) 2017 Elsevier B.V. All rights reserved.
C1 [Araujo, Rodrigo F.] Univ Fed Minas Gerais, Grad Program Elect Engn, Ave Antonio Carlos 6627, BR-31270901 Belo Horizonte, MG, Brazil.
   [Albuquerque, Higo E.; de Bessa, Iury V.; Chaves Filho, Joao E.] Univ Fed Amazonas, Dept Elect, Ave Gen Rodrigo Octavio,6200 Coroado 1, BR-69077000 Manaus, Amazonas, Brazil.
   [Cordeiro, Lucas C.] Univ Oxford, Dept Comp Sci, Wolfson Bldg,Parks Rd, Oxford OX1 3QD, England.
C3 Universidade Federal de Minas Gerais; Universidade Federal de Amazonas;
   University of Oxford
RP Araújo, RF (corresponding author), Univ Fed Minas Gerais, Grad Program Elect Engn, Ave Antonio Carlos 6627, BR-31270901 Belo Horizonte, MG, Brazil.; de Bessa, LV (corresponding author), Univ Fed Amazonas, Dept Elect, Ave Gen Rodrigo Octavio,6200 Coroado 1, BR-69077000 Manaus, Amazonas, Brazil.; Cordeiro, LC (corresponding author), Univ Oxford, Dept Comp Sci, Wolfson Bldg,Parks Rd, Oxford OX1 3QD, England.
EM iurybessa@ufam.edu.br
RI Cordeiro, Lucas Carvalho/AAQ-9258-2021; Cordeiro, Lucas/IVV-3044-2023;
   Araújo, Rodrigo Farias/Q-8345-2019; Bessa, Iury/V-6714-2017
OI Cordeiro, Lucas Carvalho/0000-0002-6235-4272; Araújo, Rodrigo
   Farias/0000-0002-9234-3507; Bessa, Iury/0000-0002-6603-3476
FU Fundacao de Amparo a Pesquisa do Estado do Amazonas (FAPEAM), Brazil;
   Brazilian National Research Council (CNPq); Coordination for the
   Improvement of Higher Education Personnel (CAPES); FAPEAM
   [062.00719/2016 (EDITAL N. 015/2014 - PAPAC)]
FX The authors thank the financial support of Fundacao de Amparo a Pesquisa
   do Estado do Amazonas (FAPEAM), Brazil, the Brazilian National Research
   Council (CNPq), and the Coordination for the Improvement of Higher
   Education Personnel (CAPES). This research project was supported by
   FAPEAM 062.00719/2016 (EDITAL N. 015/2014 - PAPAC).
CR Abreu Renato B., 2016, Journal of the Brazilian Computer Society, V22, DOI 10.1186/s13173-016-0041-8
   Alberto P, 2004, SIAM J OPTIMIZ, V14, P1216, DOI 10.1137/S1052623400377955
   Alur R, 2015, NATO SCI PEAC SECUR, V40, P1, DOI 10.3233/978-1-61499-495-4-1
   [Anonymous], 2000, NONCON OPTIM ITS APP, DOI 10.1007/978-1-4757-4949-6
   [Anonymous], RELIABLE REPRODUCIBL
   [Anonymous], J TECHNOL ED
   [Anonymous], 2005, PRACTICAL MATH OPTIM
   [Anonymous], CORR
   [Anonymous], 1987, SIMULATED ANNEALING
   [Anonymous], SBESC
   [Anonymous], MATLAB OPT TOOLB US
   [Anonymous], 2007, NUMERICAL RECIPES AR
   [Anonymous], TECH REP
   [Anonymous], 2007 10 DES AUT TEST
   [Anonymous], P 20 ACM INT C HYBR
   [Anonymous], SERIES DECISION CONT
   [Anonymous], IEEE STAND BIN FLOAT
   [Anonymous], 1989, Global optimization
   [Anonymous], CONDITIONS GLOBAL OP
   [Anonymous], 2011, Particle Swarm Optimization: Theory, Techniques and Applications
   [Anonymous], OPTIMIZATION OPERATI
   [Anonymous], 2015, P 21 INT C TOOLS ALG
   [Anonymous], BIT VECTOR OPTIMIZAT
   Araújo R, 2016, BRAZ SYM COMPUT SYST, P1, DOI [10.1109/SBESC.2016.010, 10.1109/SBESC.2016.14]
   Baier C, 2008, PRINCIPLES OF MODEL CHECKING, P1
   Barrett C, 2009, FRONT ARTIF INTEL AP, V185, P825, DOI 10.3233/978-1-58603-929-5-825
   Bartholomew-Biggs M, 2008, SEQUENTIAL QUADRATIC, P1, DOI 10.1007/978-0-387-78723-77
   Bessa I, 2014, BRAZ SYM COMPUT SYST, P49, DOI 10.1109/SBESC.2014.14
   Bessa IV, 2016, DES AUTOM EMBED SYST, V20, P95, DOI 10.1007/s10617-016-9173-5
   Beyer Dirk, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P184, DOI 10.1007/978-3-642-22110-1_16
   Biere A, 2009, FRONT ARTIF INTEL AP, V185, P457, DOI 10.3233/978-1-58603-929-5-457
   Boyd S., 2004, CONVEX OPTIMIZATION
   Brummayer R, 2009, LECT NOTES COMPUT SC, V5505, P174, DOI 10.1007/978-3-642-00768-2_16
   Byrd RH, 2000, MATH PROGRAM, V89, P149, DOI 10.1007/PL00011391
   Cavazzuti M., 2012, Optimization methods: from theory to design scientific and technological aspects in mechanics
   Cimatti A, 2013, LECT NOTES COMPUT SC, V7795, P93
   Clarke EM, 1999, MODEL CHECKING, P1
   Cordeiro L, 2012, IEEE T SOFTWARE ENG, V38, P957, DOI 10.1109/TSE.2011.59
   Cotton S., 2011, 2011 6th IEEE International Symposium on Industrial Embedded Systems (SIES), P9, DOI 10.1109/SIES.2011.5953650
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Deb K., 2004, Optimization for engineering design: algorithms and examples
   Dorigo M, 2006, IEEE COMPUT INTELL M, V1, P28, DOI 10.1109/MCI.2006.329691
   Eldib H, 2014, IEEE T COMPUT AID D, V33, P1611, DOI 10.1109/TCAD.2014.2341931
   Estrada GG, 2003, LECT NOTES COMPUT SC, V2606, P410
   FINDLER NV, 1987, MATH COMPUT SIMULAT, V29, P41, DOI 10.1016/0378-4754(87)90065-6
   Gadelha M, 2017, INT J SOFTW TOOLS TE, V19, P97, DOI 10.1007/s10009-015-0407-9
   GALPERIN EA, 1991, COMPUT MATH APPL, V21, P1, DOI 10.1016/0898-1221(91)90155-W
   Gao S., 2013, dReal: An SMT Solver for Nonlinear Theories over the Reals, P208, DOI DOI 10.1007/978-3-642-38574-2_14
   Goldberg David E, 1989, GENETIC ALGORITHMS S
   Hu J., 2012, A Survey of Some Model-Based Methods for Global Optimization, P157, DOI [10.1007/978-0-8176-8337-5_10, DOI 10.1007/978-0-8176-8337-5_10]
   Jamil Momin, 2013, International Journal of Mathematical Modelling and Numerical Optimisation, V4, P150
   Jones DR, 2001, J GLOBAL OPTIM, V21, P345, DOI 10.1023/A:1012771025575
   Kowalski MarekA., 1995, Selected topics in approximation and computation
   Kroening Daniel., 2014, CBMC - C Bounded Model Checker, P389
   Li L., 2015, SELECTED APPL CONVEX
   Li Y, 2014, ACM SIGPLAN NOTICES, V49, P607, DOI 10.1145/2535838.2535857
   Marti K., 2005, STOCHASTIC OPTIMIZAT
   Morse J., 2014, TACAS, V8413, P405
   Nieuwenhuis R, 2006, LECT NOTES COMPUT SC, V4121, P156
   Pavlinovic Z, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P412, DOI 10.1145/2784731.2784765
   Pereira P., 2016, P SAC, P1648, DOI [10.1145/2851613.2851830, DOI 10.1145/2851613.2851830]
   Rocha H, 2015, BRAZ SYM COMPUT SYST, P90, DOI 10.1109/SBESC.2015.24
   Rocha W, 2017, LECT NOTES COMPUT SC, V10206, P360, DOI 10.1007/978-3-662-54580-5_23
   Scholz D., 2011, DETERMINISTIC GLOBAL
   Sebastiani R., 2015, Tools and Algorithms for the Construction and Analysis of Systems. 21st International Conference, TACAS 2015, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2015. Proceedings: LNCS 9035, P335, DOI 10.1007/978-3-662-46681-0_27
   Sebastiani R, 2015, LECT NOTES COMPUT SC, V9206, P447, DOI 10.1007/978-3-319-21690-4_27
   Sebastiani R, 2015, ACM T COMPUT LOG, V16, DOI 10.1145/2699915
   Shoham Y, 2008, COMMUN ACM, V51, P74, DOI 10.1145/1378704.1378721
   Shoukry Y, 2016, IEEE DECIS CONTR P, P6683, DOI 10.1109/CDC.2016.7799298
   Teich J, 2012, P IEEE, V100, P1411, DOI 10.1109/JPROC.2011.2182009
   Trindade A, 2015, BRAZ SYM COMPUT SYST, P102, DOI 10.1109/SBESC.2015.26
   Trindade AB, 2016, DES AUTOM EMBED SYST, V20, P1, DOI 10.1007/s10617-015-9163-z
NR 72
TC 3
Z9 3
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 1
PY 2018
VL 165
SI SI
BP 3
EP 23
DI 10.1016/j.scico.2017.10.004
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GV3KH
UT WOS:000445992300002
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Kamina, T
   Aotani, T
   Masuhara, H
   Igarashi, A
AF Kamina, Tetsuo
   Aotani, Tomoyuki
   Masuhara, Hidehiko
   Igarashi, Atsushi
TI Method safety mechanism for asynchronous layer deactivation
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Context-oriented programming; Layer-introduced base method; ContextFJ;
   ServalCJ
ID CONTEXT; JAVA
AB Context-oriented programming (COP) enhances the modularity of context-dependent behavior in context-aware systems, as it provides modules to implement context-dependent behavior (layers) and composes them dynamically in a disciplined manner (layer activation). We propose a COP language that enables layers to define base methods, while the layers can be asynchronously activated and deactivated. Base methods in layers enhance modularity because they extend the interface of classes without modifying original class definitions. However, calling such a method defined in a layer is problematic as the layer may be inactive when the method is called. We address this problem by introducing a method lookup mechanism that uses the static scope of method invocation for COP; i.e., in addition to currently activated layers, the layer where the method invocation is written, as well as the layers on which that layer depends, are searched during method lookup. We formalize this mechanism as a small calculus referred to as ContextFJ and prove its type soundness. We implement this mechanism in ServalCJ, a COP language that supports asynchronous, as well as synchronous, layer activation. (C) 2018 Elsevier B.V. All rights reserved.
C1 [Kamina, Tetsuo] Ritsumeikan Univ, Kyoto, Japan.
   [Aotani, Tomoyuki; Masuhara, Hidehiko] Tokyo Inst Technol, Tokyo, Japan.
   [Igarashi, Atsushi] Kyoto Univ, Kyoto, Japan.
C3 Ritsumeikan University; Tokyo Institute of Technology; Kyoto University
RP Kamina, T (corresponding author), Ritsumeikan Univ, Kyoto, Japan.
EM kamina@acm.org; aotani@c.titech.ac.jp; masuhara@acm.org;
   igarashi@kuis.kyoto-u.ac.jp
RI Igarashi, Atsushi/AAP-4323-2020
OI Igarashi, Atsushi/0000-0002-5143-9764; Aotani,
   Tomoyuki/0000-0003-4538-0230
FU JSPS KAKENHI [25330078]; Grants-in-Aid for Scientific Research
   [25330078, 16K16033, 17K00115] Funding Source: KAKEN
FX This work was supported by JSPS KAKENHI Grant Number 25330078.
CR Appeltauer Malte, 2011, Computer Software, V28, P272
   Appeltauer M., 2009, COP 09
   Appeltauer M, 2010, LECT NOTES COMPUT SC, V6144, P50, DOI 10.1007/978-3-642-14046-4_4
   Avgustinov P., 2005, ASPECT ORIENTED SYST, P87
   Bainomugisha Engineer, 2012, ONWARD 2012, P67
   Bracha G, 2010, LECT NOTES COMPUT SC, V6183, P405, DOI 10.1007/978-3-642-14107-2_20
   COSTANZA P, 2005, DLS 05, P1
   Costanza P., 2008, 2 INT WORKSH DYN SOF
   Desmet B., 2007, VAMOS 07
   González S, 2011, LECT NOTES COMPUT SC, V6563, P246, DOI 10.1007/978-3-642-19440-5_15
   González S, 2008, J UNIVERS COMPUT SCI, V14, P3307
   Hirschfeld R, 2008, J OBJECT TECHNOL, V7, P125, DOI 10.5381/jot.2008.7.3.a4
   Igarashi A, 2001, ACM T PROGR LANG SYS, V23, P396, DOI 10.1145/503502.503505
   Igarashi A., 2012, FOOL 12
   Inoue H., 2014, COP 14
   Inoue H., 2015, APLAS 15
   Kamina T, 2004, LECT NOTES COMPUT SC, V3302, P398
   Kamina T., 2015, COP 15
   Kamina T., 2013, IPSJ T PROGRAM, V6, P1
   Kamina T., 2015, MODULARITY 15, P14
   Kamina T., 2011, P 10 INT C ASP OR SO, P253, DOI DOI 10.1145/1960275.1960305
   Kamina T., 2014, COP 14
   Kamina Tetsuo, P 12 WORKSH FDN ASP, P7
   Kiczales G., 2001, ECOOP 2001 - Object-Oriented Programming. 15th European Conference. Proceedings (Lecture Notes in Computer Science Vol.2072), P327
   Lincke J, 2011, SCI COMPUT PROGRAM, V76, P1194, DOI 10.1016/j.scico.2010.11.013
   Lowis M., 2007, Proceedings of the 2007 International Conference on Dynamic Languages: In Conjunction with the 15th International Smalltalk Joint Conference, P143, DOI DOI 10.1145/1352678.1352688
   Salvaneschi G., 2012, AOSD 12
NR 27
TC 3
Z9 3
U1 0
U2 2
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAY 1
PY 2018
VL 156
BP 104
EP 120
DI 10.1016/j.scico.2018.01.006
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GA7AE
UT WOS:000428486100006
DA 2024-07-18
ER

PT J
AU Meseguer, J
AF Meseguer, Jose
TI Variant-based satisfiability in initial algebras
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Finite variant property (FVP); Constructor variant; Constructor unifier;
   Folding variant narrowing; Satisfiability in initial algebras
ID DECISION PROCEDURES; AUTOMATIC DECIDABILITY; EQUATIONAL FORMULAS;
   UNIFICATION; MODULO; COMBINATIONS; TERMINATION; COMPLEXITY; SAT
AB Although different satisfiability decision procedures can be combined by algorithms such as those of Nelson-Oppen or Shostak, current tools typically can only support a finite number of theories to use in such combinations. To make SMT solving more widely applicable one needs theory-generic satisfiability algorithms allowing a potentially infinite number of decidable theories to be user-definable, instead of needing to be built in by tool implementers. This work studies how folding variant narrowing, a generic unification algorithm that offers good extensibility in unification theory, can be extended to a generic variant-based satisfiability algorithm for the initial algebras of user-specified input theories when such theories satisfy Comon and Delaune's finite variant property (FVP) and some extra conditions. Several, increasingly larger infinite classes of theories whose initial algebras enjoy decidable variant-based satisfiability are identified and illustrated with examples. A method based on descent maps to bring other theories into these classes and to improve the generic algorithm's efficiency is also proposed. (C) 2017 Published by Elsevier B.V.
C1 [Meseguer, Jose] Univ Illinois, Dept Comp Sci, 1304 W Springfield Ave, Urbana, IL 61801 USA.
C3 University of Illinois System; University of Illinois Urbana-Champaign
RP Meseguer, J (corresponding author), Univ Illinois, Dept Comp Sci, 1304 W Springfield Ave, Urbana, IL 61801 USA.
EM meseguer@illinois.edu
FU NSF [CNS 13-19109]
FX I thank the organizers of FTSCS 2015 for inviting me to present these
   ideas in Paris, and the FTSCS participants for their interest and very
   helpful comments. I thank the anonymous referees for their careful and
   constructive criticism and their very helpful suggestions that have
   resulted in a substantially improved final version. I thank Andrew
   Cholewa, Steven Eker, Santiago Escobar, Ralf Sasse, and Carolyn Talcott
   for their contributions to the development of the theory and Maude
   implementation of folding variant narrowing, and Stephen Skeirik and
   Raul Gutierrez for their help in advancing the algorithms and
   implementations for variant-based satisfiability. I have learned much
   about satisfiability from Maria-Paola Bonacina, Vijay Ganesh and Cesare
   Tinelli along many conversations; I am most grateful to them for their
   kind enlightenment. I also thank the following persons for their very
   helpful comments on earlier drafts: Maria-Paola Bonacina, Santiago
   Escobar, Dorel Lucanu, Peter Olveczky, Vlad Rusu, Ralf Sasse, Natarajan
   Shankar, and Cesare Tinelli. The pioneering work of Hubert Comon-Lundh
   about compact theories [30], and that of him with Stephanie Delaune
   about the finite variant property [32], have both been important sources
   of inspiration for the ideas presented here. This work has been
   partially supported by NSF Grant CNS 13-19109.
CR Alpuente M, 2011, LOG J IGPL, V19, P731, DOI 10.1093/jigpal/jzq009
   Alpuente M, 2009, THEOR COMPUT SCI, V410, P4608, DOI 10.1016/j.tcs.2009.07.037
   [Anonymous], 1987, LECT NOTES COMPUT SC
   [Anonymous], 1979, 4 WORKSHOP AUTOMATED
   [Anonymous], 2007, Journal on Satisfiability, Boolean Modeling and Computation
   Aoto T, 2014, PPDP'14: PROCEEDINGS OF THE 16TH INTERNATIONAL SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING, P237, DOI 10.1145/2643135.2643156
   Armando A, 2003, INFORM COMPUT, V183, P140, DOI 10.1016/S0890-5401(03)00020-8
   Armando A, 2000, LECT NOTES ARTIF INT, V1809, P97
   Armando A, 2009, ACM T COMPUT LOG, V10, DOI 10.1145/1459010.1459014
   Audemard G., 2002, Automated Deduction - CADE-18. 18th International Conference on Automated Deduction. Proceedings (Lecture Notes in Artificial Intelligence Vol.2392), P195
   Baader F, 1996, J SYMB COMPUT, V21, P211, DOI 10.1006/jsco.1996.0009
   BAADER F, 1995, THEOR COMPUT SCI, V142, P229, DOI 10.1016/0304-3975(94)00277-0
   Baader F., 1999, LECT NOTES COMPUT SC, V2002, P104
   Bae K, 2014, LECT NOTES COMPUT SC, V8663, P113, DOI 10.1007/978-3-319-12904-4_6
   Barrett C. W., 2002, Computer Aided Verification. 14th International Conference, CAV 2002. Proceedings (Lecture Notes in Computer Science Vol.2404), P236
   Barrett Clark., 2014, Handbook of Model Checking
   Basin D, 2001, J ACM, V48, P70, DOI 10.1145/363647.363681
   BLOOM SL, 1983, SIAM J COMPUT, V12, P677, DOI 10.1137/0212047
   Bobot F., 2008, P JOINT WORKSH 6 INT, P1, DOI DOI 10.1145/1512464.1512466
   Bonacina MP, 2008, J LOGIC COMPUT, V18, P77, DOI 10.1093/logcom/exm055
   Bouchard C, 2013, LECT NOTES COMPUT SC, V8152, P327, DOI 10.1007/978-3-642-40885-4_23
   BOUDET A, 1993, J SYMB COMPUT, V16, P597, DOI 10.1006/jsco.1993.1066
   Bradley A. R., 2007, The Calculus of Computation
   Bryant R. E., 2002, Computer Aided Verification. 14th International Conference, CAV 2002. Proceedings (Lecture Notes in Computer Science Vol.2404), P78
   Chadha R, 2012, LECT NOTES COMPUT SC, V7211, P108, DOI 10.1007/978-3-642-28869-2_6
   Cholewa A., 2014, TECH REP
   Ciobaca S., 2011, THESIS
   Clavel M., 2007, LECT NOTES COMPUT SC, V4350
   Cohen P. J., 1966, Set Theory and the Continuum Hypothesis
   COMON H, 1993, THEOR COMPUT SCI, V118, P167, DOI 10.1016/0304-3975(93)90108-6
   COMON H, 1989, J SYMB COMPUT, V7, P371, DOI 10.1016/S0747-7171(89)80017-3
   COMON H, 1994, INFORM COMPUT, V112, P167, DOI 10.1006/inco.1994.1056
   Comon H., 2007, TREE AUTOMATA TECHNI
   Comon-Lundh H, 2005, LECT NOTES COMPUT SC, V3467, P294
   Deepak Kapur, 1992, Journal of Automated Reasoning, V9, P261, DOI 10.1007/BF00245463
   DEMOURA L, 2002, P 5 INT S THEOR APPL
   Dershowitz Nachum, 1990, Handbook of Theoretical Computer Science, Volume B: Formal Models and Semantics, P243, DOI 10.1016/b978-0-444-88074-1.50011-1
   Dovier A., 1998, Fundamenta Informaticae, V36, P201
   Dovier A, 2008, ACM T COMPUT LOG, V9, DOI 10.1145/1352582.1352583
   Dross C, 2016, J AUTOM REASONING, V56, P387, DOI 10.1007/s10817-015-9352-2
   Durán F, 2016, LECT NOTES ARTIF INT, V9706, P183, DOI 10.1007/978-3-319-40229-1_13
   Echenim M, 2012, J AUTOM REASONING, V48, P293, DOI 10.1007/s10817-010-9200-3
   EHRIG H, 1985, FUNDAMENTALS ALGEBRA
   Eker S, 2011, LECT NOTES COMPUT SC, V7000, P299, DOI 10.1007/978-3-642-24933-4_15
   Erbatur Serdar, 2013, Automated Deduction - CADE-24. 24th International Conference on Automated Deduction. Proceedings: LNCS 7898, P231, DOI 10.1007/978-3-642-38574-2_16
   Escobar S, 2012, J LOGIC ALGEBR PROGR, V81, P898, DOI 10.1016/j.jlap.2012.01.002
   Escobar S, 2009, LECT NOTES COMPUT SC, V5705, P1, DOI 10.1007/978-3-642-03829-7_1
   Escobar S, 2010, LECT NOTES COMPUT SC, V6381, P52, DOI 10.1007/978-3-642-16310-4_5
   Falke Stephan, 2012, Automated Reasoning. Proceedings 6th International Joint Conference, IJCAR 2012, P241, DOI 10.1007/978-3-642-31365-3_20
   Filliâtre JC, 2001, LECT NOTES COMPUT SC, V2102, P246
   Flanagan C, 2003, LECT NOTES COMPUT SC, V2725, P355
   GALLIER JH, 1989, THEOR COMPUT SCI, V67, P203, DOI 10.1016/0304-3975(89)90004-2
   Ganzinger H., 2002, Automated Deduction - CADE-18. 18th International Conference on Automated Deduction. Proceedings (Lecture Notes in Artificial Intelligence Vol.2392), P332
   Giesl J, 2003, LECT NOTES ARTIF INT, V2741, P17
   Giesl J., 2001, Automated Reasoning. First International Joint Conference, IJCAR 2001. Proceedings (Lecture Notes in Artificial Intelligence Vol.2083), P469
   GOGUEN JA, 1992, THEOR COMPUT SCI, V105, P217, DOI 10.1016/0304-3975(92)90302-V
   GOGUEN JA, 1992, J ACM, V39, P95, DOI 10.1145/147508.147524
   González-Burgueño A, 2014, LECT NOTES COMPUT SC, V8893, P111, DOI 10.1007/978-3-319-14054-4_8
   Gramlich B, 2012, THEOR COMPUT SCI, V464, P3, DOI 10.1016/j.tcs.2012.09.008
   GUESSARIAN I, 1987, SIAM J COMPUT, V16, P332, DOI 10.1137/0216025
   Gutierrez R., 2017, TECH REP
   Hendrix J, 2005, LECT NOTES COMPUT SC, V3467, P165
   Hendrix J, 2006, LECT NOTES ARTIF INT, V4130, P151
   Hendrix J, 2012, ELECTRON NOTES THEOR, V290, P37, DOI 10.1016/j.entcs.2012.11.010
   Hullot Jean-Marie., 1980, CADE, volume 87 of Lecture Notes in Computer Science, V87, P318
   JOUANNAUD JP, 1986, SIAM J COMPUT, V15, P1155, DOI 10.1137/0215084
   JOUANNAUD JP, 1983, LECT NOTES COMPUT SC, V154, P361
   Kapur D., 2004, TRCS200544 U NEW MEX
   Kirchner H, 2005, LECT NOTES COMPUT SC, V3722, P594
   Krstic S, 2007, LECT NOTES COMPUT SC, V4424, P602
   Lynch C, 2002, IEEE S LOG, P7, DOI 10.1109/LICS.2002.1029813
   Lynch C, 2007, LECT NOTES ARTIF INT, V4603, P328
   Maher M. J., 1988, Proceedings of the Third Annual Symposium on Logic in Computer Science (Cat. No.88CH2608-8), P348, DOI 10.1109/LICS.1988.5132
   MESEGUER J, 1993, INFORM COMPUT, V103, P114, DOI 10.1006/inco.1993.1016
   Meseguer J, 1998, LECT NOTES COMPUT SC, V1376, P18
   Meseguer J, 2016, P FTSCS 2015, V596, P1
   Meseguer J, 2017, THEOR COMPUT SCI, V672, P1, DOI 10.1016/j.tcs.2016.12.026
   Meseguer J, 2015, LECT NOTES COMPUT SC, V9527, P36, DOI 10.1007/978-3-319-27436-2_3
   Meseguer J, 2009, LECT NOTES COMPUT SC, V5700, P43
   NELSON G, 1980, J ACM, V27, P356, DOI 10.1145/322186.322198
   Nelson G., 1979, ACM Transactions on Programming Languages and Systems, V1, P245, DOI 10.1145/357073.357079
   Nieuwenhuis R, 2006, J ACM, V53, P937, DOI 10.1145/1217856.1217859
   OPPEN DC, 1980, THEOR COMPUT SCI, V12, P291, DOI 10.1016/0304-3975(80)90059-6
   Schmidt B, 2012, P IEEE CSFW, P78, DOI 10.1109/CSF.2012.25
   SHOSTAK RE, 1984, J ACM, V31, P1, DOI 10.1145/2422.322411
   Skeirik S., 2016, TECH REP
   Skeirik S., 2017, TECH REP
   Skeirik S, 2016, LECT NOTES COMPUT SC, V9942, P167, DOI 10.1007/978-3-319-44802-2_10
   SLAGLE JR, 1974, J ACM, V21, P622, DOI 10.1145/321850.321859
   Snyder W.:., 1991, PROOF THEORY GEN UNI
   Stump A, 2001, IEEE S LOG, P29, DOI 10.1109/LICS.2001.932480
   Tarski A., 1953, UNDECIDABLE THEORIES
   Tinelli C, 2004, LECT NOTES COMPUT SC, V3229, P641, DOI 10.1007/978-3-540-30227-8_53
   TOYAMA Y, 1987, INFORM PROCESS LETT, V25, P141, DOI 10.1016/0020-0190(87)90122-0
   Tushkanova E, 2015, SCI COMPUT PROGRAM, V99, P3, DOI 10.1016/j.scico.2014.02.005
   Yang F, 2014, PPDP'14: PROCEEDINGS OF THE 16TH INTERNATIONAL SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING, P123, DOI 10.1145/2643135.2643154
NR 96
TC 29
Z9 29
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR 1
PY 2018
VL 154
BP 3
EP 41
DI 10.1016/j.scico.2017.09.001
PG 39
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA FW1RT
UT WOS:000425077800002
OA hybrid
DA 2024-07-18
ER

PT J
AU Radke, H
   Arendt, T
   Becker, JS
   Habel, A
   Taentzer, G
AF Radke, Hendrik
   Arendt, Thorsten
   Becker, Jan Steffen
   Habel, Annegret
   Taentzer, Gabriele
TI Translating essential OCL invariants to nested graph constraints for
   generating instances of meta-models
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Meta modeling; Essential OCL; Graph constraints; Instance generation
ID TRANSFORMATION
AB Domain-specific modeling languages (DSMLs) are usually defined by meta-modeling using the Object Constraint Language (OCL) for specifying invariants. This approach is purely declarative in the sense that instance construction is not supported. In contrast, grammar-based language definition incorporates the stepwise construction of instances by applying production rules. Since the underlying structure of models are generally graphs, graph grammars are well suited to define modeling languages. Establishing a formal relation between meta-modeling and graph grammars opens up the possibility to integrate techniques of both fields. This integration can be advantageously used for optimizing DSML definition. We follow an approach where a meta-model is translated to a type graph with a set of nested graph constraints. While previous meta-model translations neglected OCL constraints, we focus on the translation of Essential OCL invariants to nested graph constraints in this paper. We show that a model satisfies an Essential OCL invariant iff its corresponding instance graph satisfies the corresponding nested graph constraint. In addition, nested graph constraints can be translated to application conditions of graph transformation rules. Composing both translations, an instance-generating graph grammar can be equipped with application conditions such that it generates instances of the original meta-model only. (C) 2017 The Authors. Published by Elsevier B.V.
C1 [Arendt, Thorsten] UPI Innovat Forderung GmbH, Bad Vibel, Germany.
   [Radke, Hendrik; Becker, Jan Steffen; Habel, Annegret] Carl von Ossietzky Univ Oldenburg, Oldenburg, Germany.
   [Taentzer, Gabriele] Philipps Univ Marburg, Marburg, Germany.
C3 Carl von Ossietzky Universitat Oldenburg; Philipps University Marburg
RP Radke, H (corresponding author), Carl von Ossietzky Univ Oldenburg, Oldenburg, Germany.
EM radke@informatik.uni-oldenburg.de; thorsten.arendt@gfft-ev.de;
   jan.steffen.becker@informatik.uni-oldenburg.de;
   habel@informatik.uni-oldenburg.de; taentzer@informatik.uni-marburg.de
FU German Research Foundation (DFG) [HA 2936/4-1, TA 294/13-1]
FX This work is partly supported by the German Research Foundation (DFG),
   Grants HA 2936/4-1 and TA 294/13-1 (Meta modeling and graph grammars:
   integration of two paradigms for the definition of visual modeling
   languages).
CR Anastasakis K, 2010, SOFTW SYST MODEL, V9, P69, DOI 10.1007/s10270-008-0110-3
   [Anonymous], THESIS
   [Anonymous], 1985, EATCS MONOGRAPHS THE
   [Anonymous], 2006, MONOGRAPHS THEORETIC
   Arendt T, 2014, LECT NOTES COMPUT SC, V8571, P97
   Arendt T, 2010, LECT NOTES COMPUT SC, V6394, P121
   Bardohl M., 1999, Handbook of graph grammars and computing by graph transformation, V2, P105
   Beckert Bernhard, 2002, DIKU TECHNICAL REPOR, P113
   Bergmann G, 2014, LECT NOTES COMPUT SC, V8767, P670, DOI 10.1007/978-3-319-11653-2_41
   Cabot Jordi, 2012, Formal Methods for Model-Driven Engineering. 12th International School of Formal Methods for the Design of Computer, Communication and Software Systems (SFM 2012). Advanced Lectures, P58, DOI 10.1007/978-3-642-30982-3_3
   Cabot  Jordi, 2007, P 22 IEEE ACM INT C, P547, DOI DOI 10.1145/1321631.1321737
   Cadavid JJ, 2015, COMPUT LANG SYST STR, V41, P42, DOI 10.1016/j.cl.2015.02.002
   Ceiss R, 2006, LECT NOTES COMPUT SC, V4178, P383
   de Lara J, 2007, THEOR COMPUT SCI, V376, P139, DOI 10.1016/j.tcs.2007.02.001
   Ehrig K, 2009, SOFTW SYST MODEL, V8, P479, DOI 10.1007/s10270-008-0095-y
   Fowler M., 2018, Refactoring: Improving the Design of Existing Code
   Gogolla M., 2009, SOSYM, V4, P386
   Habel A, 2009, MATH STRUCT COMP SCI, V19, P245, DOI 10.1017/S0960129508007202
   Jackson D., 2012, ALLOY ANAL WEBSITE
   Kastenberg H, 2006, LECT NOTES COMPUT SC, V3925, P299
   Kehrer T., 2016, ICMT 2016
   Kehrer T, 2013, IEEE INT CONF AUTOM, P191, DOI 10.1109/ASE.2013.6693079
   Kuhlmann Mirco, 2012, Model Driven Engineering Languages and Systems. Proceedings 15th International Conference, MODELS 2012, P415, DOI 10.1007/978-3-642-33666-9_27
   Lambers L, 2014, LECT NOTES COMPUT SC, V8571, P17
   Lano K., 2014, CEUR WORKSHOP P, V1325, P26
   Object Management Group (OMG), UN MOD LANG
   OMG, MET OBJ FAC
   OMG, OBJ CONSTR LANG
   Orejas F, 2011, J SYMB COMPUT, V46, P294, DOI 10.1016/j.jsc.2010.09.009
   Pennemann K. H., 2009, THESIS
   Radke H., 2016, TRANSLATING ESSENTIA
   Radke H, 2016, THESIS
   Radke H, 2015, LECT NOTES COMPUT SC, V9151, P155, DOI 10.1007/978-3-319-21145-9_10
   Reimann J., 2012, Proceedings of the 12th Workshop on OCL and Textual Modelling, P7
   REISIG W, 1985, THEOR COMPUT SCI, V41, P185, DOI 10.1016/0304-3975(85)90070-2
   Rensink A, 2004, LECT NOTES COMPUT SC, V3256, P319
   Richa E., 2014, AMT 2014 WORKSH P, P34
   Richa E, 2015, LECT NOTES COMPUT SC, V9152, P183, DOI 10.1007/978-3-319-21155-8_14
   Schurr A., 2001, ELECT NOTES THEORETI, V44, P93
   Taentzer G, 2003, LECT NOTES COMPUT SC, V3062, P446
   Wachsmuth G, 2007, LECT NOTES COMPUT SC, V4609, P600
NR 41
TC 14
Z9 14
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 15
PY 2018
VL 152
BP 38
EP 62
DI 10.1016/j.scico.2017.08.006
PG 25
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA FR3OJ
UT WOS:000418975700002
OA hybrid
DA 2024-07-18
ER

PT J
AU Codescu, M
   Mossakowski, T
   Sannella, D
   Tarlecki, A
AF Codescu, Mihai
   Mossakowski, Till
   Sannella, Donald
   Tarlecki, Andrzej
TI Specification refinements: Calculi, tools, and applications
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Algebraic specifications; Refinement; Architectural specifications;
   Consistency
ID ALGEBRAIC SPECIFICATIONS; FORMAL DEVELOPMENT; PROGRAMS
AB We propose and study a framework for systematic development of software systems (or models) from their formal specifications. We introduce a language for formal development by refinement and decomposition, as an extension to CASL. We complement it with a notion of refinement tree and present proof calculi for checking correctness of refinements as well as their consistency. Both calculi have been implemented in the Heterogeneous Tool Set (HETs), and have been integrated with other tools like model finders and conservativity checkers. (C) 2017 Elsevier B.V. All rights reserved.
C1 [Codescu, Mihai] Free Univ Bozen Bolzano, Bolzano, Italy.
   [Mossakowski, Till] Otto von Guericke Univ, Fac Comp Sci, Magdeburg, Germany.
   [Sannella, Donald] Univ Edinburgh, Lab Fdn Comp Sci, Edinburgh, Midlothian, Scotland.
   [Tarlecki, Andrzej] Univ Warsaw, Inst Informat, Warsaw, Poland.
C3 Free University of Bozen-Bolzano; Otto von Guericke University;
   University of Edinburgh; University of Warsaw
RP Codescu, M (corresponding author), Free Univ Bozen Bolzano, Bolzano, Italy.
EM Mihai.Codescu@unibz.it; till@iks.cs.ovgu.de; dts@inf.ed.ac.uk;
   tarlecki@mimuw.edu.pl
OI Mossakowski, Till/0000-0002-8938-5204; Sannella,
   Donald/0000-0003-4520-8924; Codescu, Mihai/0000-0002-7702-8955;
   Tarlecki, Andrzej/0000-0002-7788-2991
FU German Research Council (DFG) "Logic Atlas and Integration (LATIN)"
   [Mo-971/2]; (Polish) National Science Centre [2013/11/B/ST6/01381]
FX We are grateful to the anonymous reviewers for their careful reading of
   the paper and suggesting a number of improvements. This work has been
   partially supported by the German Research Council (DFG) under grant
   Mo-971/2 "Logic Atlas and Integration (LATIN)" (MC, TM) and by the
   (Polish) National Science Centre, grant 2013/11/B/ST6/01381 (AT).
CR ABRIAL JR, 1996, LECT NOTES COMPUTER, V1165
   Adamek J., 1990, Abstract and Concrete Categories
   Astesiano Egidio., 1999, ALGEBRAIC FDN SYSTEM
   Baumgartner P., 2004, ELECT NOTES THEORETI, P191
   Benzmüller C, 2008, LECT NOTES ARTIF INT, V5195, P162, DOI 10.1007/978-3-540-71070-7_14
   Bidoit M., 2002, Formal Aspects of Computing, V13, P252, DOI 10.1007/s001650200012
   Bidoit M, 2002, LECT NOTES COMPUT SC, V2420, P1
   Bidoit M., 1999, Algebraic Foundations of Systems Specification, P385
   Bidoit M., 2004, LNCS
   Bidoit M, 2008, MATH STRUCT COMP SCI, V18, P325, DOI 10.1017/S0960129507006536
   Borzyszkowski T, 2002, THEOR COMPUT SCI, V286, P197, DOI 10.1016/S0304-3975(01)00317-6
   Brunet T., 2003, THESIS
   Codescu Mihai, 2011, Algebra and Coalgebra in Computer Science. Proceedings 4th International Conference, CALCO 2011, P145, DOI 10.1007/978-3-642-22944-2_11
   Codescu M., 2011, LECT NOTES COMPUTER, V7137, P98
   Codescu M., 2013, LECT NOTES COMPUTER, V8089, P315
   CoFI, 2009, COMM FRAM IN ALG SPE
   Diaconescu R, 2002, APPL CATEGOR STRUCT, V10, P383, DOI 10.1023/A:1016330812768
   Diaconescu R., 1993, Logical Environments, P83
   Diaconescu R., 2008, Institution-Independent Model Theory
   Ehrig H., 1985, AN EATCS SERIES, V6
   FITZGERALD JS, 1990, LECT NOTES COMPUT SC, V428, P189
   Goguen J, 2004, LECT NOTES COMPUT SC, V2635, P96
   Goguen J., 2002, Formal Aspects of Computing, V13, P274, DOI 10.1007/s001650200013
   GOGUEN JA, 1992, J ACM, V39, P95, DOI 10.1145/147508.147524
   Hoare C. A. R., 1972, Acta Informatica, V1, P271, DOI 10.1007/BF00289507
   Hoffman Ph, 1905, THESIS
   Kutz O, 2011, P AAAI C ARTIFICIAL, V25, P227
   Milner Robin, 1971, IJCAI, P481
   Mossakowski T, 2006, J LOGIC ALGEBR PROGR, V67, P114, DOI 10.1016/j.jlap.2005.09.005
   Mossakowski T, 2005, LECT NOTES COMPUT SC, V3423, P162
   Mossakowski T, 2002, LECT NOTES COMPUT SC, V2420, P593
   Mossakowski T., 2001, Fundamental Approaches to Software Engineering. 4th International Conference, FASE 2001. Held as Part of the Joint European Conferences on Theory and Practice of Software, ETAPS 2001. Proceedings (Lecture Notes in Computer Science Vol.2029), P269
   Mossakowski T., 2015, STUDIES UNIVERSAL LO, P489, DOI [DOI 10.1007/978-3-319-15368-1_21, DOI 10.1007/978-3-319-15368-121]
   Mossakowski T., 1998, 2 FUNCTIONAL PROGRAM
   Mossakowski T., 2005, THESIS
   MOSSAKOWSKI T, 2000, LECT NOTES COMPUTER, V1827, P252
   Mossakowski T, 2007, LECT NOTES COMPUT SC, V4424, P519
   Mosses P, 2004, LNCS
   Nipkow T., 2002, ISABELLE HOL PROOF A, DOI DOI 10.1007/3-540-45949-9
   Rabe F., J LOGIC COMPUT
   Riazanov A, 2002, AI COMMUN, V15, P91
   Roggenbach M, 2001, LECT NOTES COMPUT SC, V2267, P305
   SANNELLA D, 1992, ACTA INFORM, V29, P689, DOI 10.1007/BF01191893
   SANNELLA D, 1988, ACTA INFORM, V25, P233, DOI 10.1007/BF02737104
   Sannella D, 2012, EATCS MONOGRAPHS THE
   Schroder L., 2001, LNCS, V2029, P253
   Smith DouglasR., 1999, Electronic Notes in Theoretical Computer Science, V29, P275, DOI DOI 10.1016/S1571-0661(05)80320-2
   Weber T, 2005, ELECTRON NOTES THEOR, V125, P103, DOI 10.1016/j.entcs.2004.10.027
   Weidenbach C., 2002, Automated Deduction - CADE-18. 18th International Conference on Automated Deduction. Proceedings (Lecture Notes in Artificial Intelligence Vol.2392), P275
   WIRTH N, 1971, COMMUN ACM, V14, P221, DOI 10.1145/362575.362577
NR 50
TC 0
Z9 0
U1 0
U2 1
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 15
PY 2017
VL 144
BP 1
EP 49
DI 10.1016/j.scico.2017.04.005
PG 49
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA EX3JM
UT WOS:000403128400001
OA Green Accepted, Bronze
DA 2024-07-18
ER

PT J
AU Soleimanifard, S
   Gurov, D
AF Soleimanifard, Siavash
   Gurov, Dilian
TI Algorithmic verification of procedural programs in the presence of code
   variability
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 11th International Symposium on Formal Aspects of Component Software
   (FACS) Colocated with the 11th International Conference on Integrated
   Formal Methods (IFM)
CY SEP 10-12, 2014
CL Bertinoro, ITALY
DE Compositional verification; Model checking; Maximal models
ID CHECKING
AB We present a generic framework for verifying temporal safety properties of procedural programs that are dynamically or statically configured by replacing, adapting, or adding new components. To deal with such a variability of a program, we require programmers to provide local specifications for its variable components, and verify the global properties by replacing these specifications with maximal models. Our framework is a generalization of a previously developed framework that fully abstracts from program data. In this work, we recapture program data and thus significantly increase the range of properties that can be verified. Our framework is generic by being parametric on the set of observed program events and their semantics. We separate program structure from the behaviour it induces to facilitate independent component specification and verification. To exemplify the use of the framework, we develop three concrete instantiations; in particular, we derive a compositional verification technique for programs written in a procedural language with pointers as the only datatype. (C) 2015 Elsevier B.V. All rights reserved.
C1 [Soleimanifard, Siavash; Gurov, Dilian] KTH Royal Inst Technol, Stockholm, Sweden.
C3 Royal Institute of Technology
RP Soleimanifard, S; Gurov, D (corresponding author), KTH Royal Inst Technol, Stockholm, Sweden.
EM siavashs@csc.kth.se; dilian@csc.kth.se
RI Gurov, Dilian/ITU-2606-2023
OI Gurov, Dilian/0000-0002-0074-8786
CR Alur R, 2005, ACM T PROGR LANG SYS, V27, P786, DOI 10.1145/1075382.1075387
   Alur R, 2004, LECT NOTES COMPUT SC, V2988, P467
   Alur R, 2007, IEEE S LOG, P151, DOI 10.1109/LICS.2007.19
   Alur R, 2006, LECT NOTES COMPUT SC, V4144, P329, DOI 10.1007/11817963_31
   Alur R, 2010, LECT NOTES COMPUT SC, V5944, P45, DOI 10.1007/978-3-642-11319-2_7
   Amighi A., 2015, INT J SOFTW IN PRESS
   ANDERSEN HR, 1995, IEEE S LOG, P398, DOI 10.1109/LICS.1995.523274
   Arnold A., 2001, Studies in Logic and the foundations of Mathematics, V146
   Ball T., 2001, Tools and Algorithms for the Construction and Analysis of Systems. 7th International Conference, TACAS 2001. Held as Part of the Joint European Conferences on Theory and Practice of Software, ETAPS 2001. Proceedings (Lecture Notes in Computer Science Vol.2031), P268
   Ball T, 2002, ACM SIGPLAN NOTICES, V37, P1, DOI 10.1145/565816.503274
   Ball T, 2000, LECT NOTES COMPUT SC, V1885, P113
   BALL T, 2000, MSRTR200014
   Bekic H., 1967, TECHNICAL REPORT
   Bierhoff K, 2009, LECT NOTES COMPUT SC, V5653, P195, DOI 10.1007/978-3-642-03013-0_10
   Cleaveland R., 1990, INT S PROT SPEC TEST, P287
   Cook B., 2005, SYMBOLIC MODEL CHECK
   Das M, 2002, ACM SIGPLAN NOTICES, V37, P57, DOI 10.1145/543552.512538
   Gomes PD, 2014, LECT NOTES COMPUT SC, V8411, P215
   GRUMBERG O, 1994, ACM T PROGR LANG SYS, V16, P843, DOI 10.1145/177492.177725
   Gurov D, 2008, INFORM COMPUT, V206, P840, DOI 10.1016/j.ic.2008.03.003
   Gurov D, 2013, THEOR COMPUT SCI, V480, P69, DOI 10.1016/j.tcs.2013.02.006
   HENNESSY M, 1985, J ACM, V32, P137, DOI 10.1145/2455.2460
   Huisman M, 2011, LECT NOTES COMPUT SC, V6528, P107
   Huisman M, 2008, LECT NOTES COMPUT SC, V5256, P147, DOI 10.1007/978-3-540-88194-0_11
   Kiefer S., MOPED MODEL CHECKER
   KOZEN D, 1983, THEOR COMPUT SCI, V27, P333, DOI 10.1016/0304-3975(82)90125-6
   Kupferman O, 2000, ACM T PROGR LANG SYS, V22, P87, DOI 10.1145/345099.345104
   LARSEN KG, 1990, LECT NOTES COMPUT SC, V407, P232
   MULLER P, 2002, LECT NOTES COMPUTER, V2262
   Podelski A, 2005, LECT NOTES COMPUT SC, V3672, P268
   Rot J., 2010, INF PREPR FORM VER O
   Rot J, 2013, LECT NOTES COMPUT SC, V8161, P1, DOI 10.1007/978-3-642-40213-5_1
   Soleimanifard S., 2014, FORMAL ASPECTS COMPO, V8997, P327
   Soleimanifard S, 2015, SOFTW SYST MODEL, V14, P83, DOI 10.1007/s10270-013-0321-0
   Tarski A., 1955, PAC J MATH, V5, P285, DOI DOI 10.2140/PJM.1955.5.285
NR 35
TC 1
Z9 1
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 1
PY 2016
VL 127
SI SI
BP 76
EP 102
DI 10.1016/j.scico.2015.08.010
PG 27
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA DQ5ZA
UT WOS:000379282600005
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Moraes, A
   Andrade, WL
   Machado, PDL
AF Moraes, Alan
   Andrade, Wilkerson L.
   Machado, Patricia D. L.
TI A family of test selection criteria for Timed Input-Output Symbolic
   Transition System models
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 17th Brazilian Symposium on Formal Methods (SBMF) as part of 5th
   Brazilian Conference on Software - Theory and Practice (CBSoft)
CY SEP 29-OCT 01, 2014
CL Maceio, BRAZIL
SP Univ Fed Alagoas, Brazilian Natl Inst Sci & Technol Software Engn, CAPES, CNPq, Google Inc
DE Software testing; Model-based testing; Test selection criteria; Test
   adequacy criteria; Real-time systems
AB Test selection criteria can be applied to select, from a test suite, cost-effective subsets that are both cheaper to execute and as effective at detecting faults as the original suite. However, the choice of a test selection criterion is not straightforward for real-time systems, because most criteria presented in literature are for untimed systems and there is a lack of studies that investigate their cost-effectiveness when compared to specific criteria for real-time systems. In this paper, we investigate the cost-effectiveness of test selection criteria in test suite reduction for model-based testing of real-time systems, in particular for Timed Input-Output Symbolic Transition Systems (TIOSTS) models. First, we defined 18 test selection criteria for TIOSTS models and formalized a hierarchy of criteria partially ordered by strict inclusion. The defined criteria include transition-based criteria, data-flow oriented criteria and real-time systems criteria. Second, we evaluated the cost-effectiveness of the criteria in an experiment. In the empirical study, we used a TIOSTS specification of a burglar alarm system, an implementation that simulated the system, and faults seeded into the implementation by using mutation testing. Results showed that, despite being a criterion for untimed systems, ALL-TRANSITION-PAIRS was the most cost-effective criterion for test case selection in model-based testing of real-time systems. We conclude that more cost-effective criteria that explore time-related features of models of real-time systems are still needed. (C) 2016 Elsevier B.V. All rights reserved.
C1 [Moraes, Alan] Univ Fed Paraiba, Informat Ctr, BR-58059900 Joao Pessoa, PB, Brazil.
   [Moraes, Alan; Andrade, Wilkerson L.; Machado, Patricia D. L.] Univ Fed Campina Grande, Software Practices Lab, Campina Grande, PB, Brazil.
C3 Universidade Federal da Paraiba; Universidade Federal de Campina Grande
RP Moraes, A (corresponding author), Univ Fed Paraiba, Informat Ctr, BR-58059900 Joao Pessoa, PB, Brazil.
EM alan@ci.ufpb.br; wilkerson@computacao.ufcg.edu.br;
   patricia@computacao.ufcg.edu.br
RI Machado, Patricia/B-5346-2009
OI Machado, Patricia/0000-0002-0661-0067; L. Andrade,
   Wilkerson/0000-0003-0656-6139
CR Almeida DR, 2015, LECT NOTES COMPUT SC, V8941, P48, DOI [10.1007/978-3-319-15075-8_4, 10.1007/978-3-319-15075-8-4]
   ALUR R, 1994, THEOR COMPUT SCI, V126, P183, DOI 10.1016/0304-3975(94)90010-8
   Andrade W. L., 2011, 2011 IEEE Fourth International Conference on Software Testing, Verification and Validation Workshops (ICSTW), P9, DOI 10.1109/ICSTW.2011.82
   Andrade W.L., 2012, CBSOFT, V4, P31
   Andrade WL, 2013, IEEE T SOFTWARE ENG, V39, P1216, DOI 10.1109/TSE.2013.13
   Andrews JH, 2006, IEEE T SOFTWARE ENG, V32, P608, DOI 10.1109/TSE.2006.83
   [Anonymous], 2013, DESIGN ANAL EXPT
   Barrett C, 2007, LECT NOTES COMPUT SC, V4590, P298
   Briand LC, 2004, PROC INT CONF SOFTW, P86, DOI 10.1109/ICSE.2004.1317431
   Cartaxo EG, 2011, SOFTW TEST VERIF REL, V21, P75, DOI 10.1002/stvr.413
   de Araujo J.D.S., 2012, P 6 BRAZ WORKSH SYST, P63
   En-Nouaary A, 2007, INT J WEB INF SYST, V3, P279, DOI 10.1108/17440080710848080
   Harrold M. J., 1993, ACM Transactions on Software Engineering and Methodology, V2, P270, DOI 10.1145/152388.152391
   Hessel A., 2007, THESIS
   Holt NE, 2014, INFORM SOFTWARE TECH, V56, P890, DOI 10.1016/j.infsof.2014.02.011
   Jeannet B, 2005, LECT NOTES COMPUT SC, V3440, P349
   Krichen M, 2009, FORM METHOD SYST DES, V34, P238, DOI 10.1007/s10703-009-0065-1
   Laplante P.A., 2012, Real-Time Systems Design and Analysis
   Ma YS, 2005, SOFTW TEST VERIF REL, V15, P97, DOI 10.1002/stvr.308
   Peleska J, 2013, ELECTRON P THEOR COM, P3, DOI 10.4204/EPTCS.111.1
   Pretschner A., 2004, INT J SOFTW TOOLS TE, V5, P140, DOI DOI 10.1007/S10009-003-0128-3
   RAPPS S, 1985, IEEE T SOFTWARE ENG, V11, P367, DOI 10.1109/TSE.1985.232226
   Rothermel G., 1999, Proceedings IEEE International Conference on Software Maintenance - 1999 (ICSM'99). `Software Maintenance for Business Change' (Cat. No.99CB36360), P179, DOI 10.1109/ICSM.1999.792604
   Rusu V, 2000, LECT NOTES COMPUT SC, V1945, P338
   Tretmans J, 1999, LECT NOTES COMPUT SC, V1664, P46
   Utting M., 2007, PRACTICAL MODEL BASE
   Vargha A, 2000, J EDUC BEHAV STAT, V25, P101, DOI 10.3102/10769986025002101
   Wilcox RR, 2010, FUNDAMENTAL OF MODERN STATISTICAL METHODS: SUBSTANTIALLY IMPROVING POWER AND ACCURACY, SECOND EDITION, P1, DOI 10.1007/978-1-4419-5525-8
   Wohlin C., 2012, Experimentation in Software Engineering
NR 29
TC 6
Z9 7
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 15
PY 2016
VL 126
SI SI
BP 52
EP 72
DI 10.1016/j.scico.2016.05.004
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA DP4IP
UT WOS:000378459900004
OA Bronze
DA 2024-07-18
ER

PT J
AU Amato, G
   Scozzari, F
   Seidl, H
   Apinis, K
   Vojdani, V
AF Amato, Gianluca
   Scozzari, Francesca
   Seidl, Helmut
   Apinis, Kalmer
   Vojdani, Vesal
TI Efficiently intertwining widening and narrowing
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Static program analysis; Fixpoint iteration; Constraint solving;
   Widening and narrowing; Termination
ID ABSTRACT DOMAIN; STATIC ANALYSIS; SYSTEMS; SOLVER
AB Accelerated fixpoint iteration by means of widening and narrowing is the method of choice for solving systems of equations over domains with infinite ascending chains. The strict separation into an ascending widening and a descending narrowing phase, however, may unnecessarily give up precision that cannot be recovered later. It is also unsuitable for equation systems with infinitely many unknowns - where local solving must be used.
   As a remedy, we present a novel operator (sic) that combines a given widening operator del with a given narrowing operator Delta. We present adapted versions of round-robin and worklist iteration as well as local and side-effecting solving algorithms for the combined operator (sic). We prove that the resulting solvers always return sound results and are guaranteed to terminate for monotonic systems whenever only finitely many unknowns are encountered. (C) 2015 Elsevier B.V. All rights reserved.
C1 [Amato, Gianluca; Scozzari, Francesca] Univ G dAnnunzio, Pescara, Italy.
   [Seidl, Helmut] Tech Univ Munich, D-80290 Munich, Germany.
   [Apinis, Kalmer; Vojdani, Vesal] Univ Tartu, Tartu, Estonia.
C3 G d'Annunzio University of Chieti-Pescara; Technical University of
   Munich; University of Tartu
RP Seidl, H (corresponding author), Tech Univ Munich, D-80290 Munich, Germany.
EM gamato@unich.it; fscozzari@unich.it; seidl@in.tum.de;
   kalmer.apinis@ut.ee; vesal.vojdani@ut.ee
RI Amato, Gianluca/AAI-9505-2020; Vojdani, Vesal/GXF-9786-2022; Scozzari,
   Francesca/KCL-0390-2024
OI Amato, Gianluca/0000-0002-6214-5198; Vojdani, Vesal/0000-0003-4336-7980;
   Scozzari, Francesca/0000-0002-2105-4855
FU ARTEMIS JU [269335]; German Science Foundation (DFG) [OpIAT SE
   551/13-2]; Estonian Research Council [IUT2-1]
FX This work was partially supported by the ARTEMIS JU under grant
   agreement no 269335 (MBAT) and from the German Science Foundation (DFG)
   project OpIAT SE 551/13-2. This work was funded by institutional
   research grant IUT2-1 from the Estonian Research Council.
CR Amato G, 2012, ELECTRON NOTES THEOR, V287, P17, DOI 10.1016/j.entcs.2012.09.003
   Amato G, 2013, LECT NOTES COMPUT SC, V7935, P25, DOI 10.1007/978-3-642-38856-9_4
   Apinis K., 2012, LNCS, V7705, P157, DOI DOI 10.1007/978-3-642-35182-2_12
   Apinis K, 2013, ACM SIGPLAN NOTICES, V48, P377, DOI 10.1145/2499370.2462190
   Blanchet B, 2003, ACM SIGPLAN NOTICES, V38, P196, DOI 10.1145/780822.781153
   Bourdoncle F., 1993, Formal Methods in Programming and Their Applications International Conference Proceedings, P128, DOI 10.1007/BFb0039704
   BOURDONCLE F, 1990, LECT NOTES COMPUT SC, V456, P307
   Bourdoncle F., 1992, Journal of Functional Programming, V2, P407, DOI 10.1017/S0956796800000496
   Carl S, 2011, FIXED POINT THEORY IN ORDERED SETS AND APPLICATIONS: FROM DIFFERENTIAL AND INTEGRAL EQUATIONS TO GAME THEORY, P1, DOI 10.1007/978-1-4419-7585-0
   Cortesi A, 2011, COMPUT LANG SYST STR, V37, P24, DOI 10.1016/j.cl.2010.09.001
   Costan A, 2005, LECT NOTES COMPUT SC, V3576, P462
   Cousot P., 1992, Journal of Logic and Computation, V2, P511, DOI 10.1093/logcom/2.4.511
   Cousot P., 1981, Program flow analysis. Theory and applications, P303
   COUSOT P, 1992, LNCS, V631, P269
   COUSOT P, 1977, FORMAL DESCRIPTIONS, P237
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Cousot P, 2007, LECT NOTES COMPUT SC, V4435, P272
   Cousot P, 2015, LECT NOTES COMPUT SC, V8931, P19
   Cousot Patrick, 1976, P 2 INT S PROGRAMMIN
   Cousot Patrick, 1978, P 5 ACM SIGACT SIGPL, p84S96, DOI DOI 10.1145/512760.512770
   Fecht C, 1999, SCI COMPUT PROGRAM, V35, P137, DOI 10.1016/S0167-6423(99)00009-X
   Gawlitza TM, 2011, ACM T PROGR LANG SYS, V33, DOI 10.1145/1961204.1961207
   Ghorbal K, 2009, LECT NOTES COMPUT SC, V5643, P627, DOI 10.1007/978-3-642-02658-4_47
   Gonnord L, 2006, LECT NOTES COMPUT SC, V4134, P144
   Gopan D, 2006, LECT NOTES COMPUT SC, V4144, P452, DOI 10.1007/11817963_41
   Gopani D, 2007, LECT NOTES COMPUT SC, V4634, P349
   Goubault E, 2012, LECT NOTES COMPUT SC, V7460, P24, DOI 10.1007/978-3-642-33125-1_5
   Gulavani BS, 2008, LECT NOTES COMPUT SC, V4963, P443, DOI 10.1007/978-3-540-78800-3_33
   Gulwani S, 2009, PLDI'09 PROCEEDINGS OF THE 2009 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P375, DOI 10.1145/1542476.1542518
   Gustafsson Jan., 2010, WCET2010, P137
   Halbwachs N, 2012, LECT NOTES COMPUT SC, V7460, P198, DOI 10.1007/978-3-642-33125-1_15
   Henry J, 2012, ELECTRON NOTES THEOR, V289, P15, DOI 10.1016/j.entcs.2012.11.003
   Henry J, 2012, LECT NOTES COMPUT SC, V7460, P283, DOI 10.1007/978-3-642-33125-1_20
   Hofmann M, 2010, LECT NOTES COMPUT SC, V6337, P340, DOI 10.1007/978-3-642-15769-1_21
   Hofmann M, 2010, LECT NOTES COMPUT SC, V6199, P199, DOI 10.1007/978-3-642-14162-1_17
   Jeannet B, 2009, LECT NOTES COMPUT SC, V5643, P661, DOI 10.1007/978-3-642-02658-4_52
   le Charlier Baudouin, 1992, 9222 U NAM I COMP SC
   Monniaux D, 2012, ELECTRON NOTES THEOR, V288, P61, DOI 10.1016/j.entcs.2012.10.008
   Monniaux D, 2011, LECT NOTES COMPUT SC, V6887, P369, DOI 10.1007/978-3-642-23702-7_27
   Necula GC, 2002, LECT NOTES COMPUT SC, V2304, P213
   Seidl H., 2003, Proceedings of the Estonian Academy of Sciences. Physics, Mathematics, V52, P413
   Sharma Rahul, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P703, DOI 10.1007/978-3-642-22110-1_57
   Simon A, 2006, LECT NOTES COMPUT SC, V4279, P166
   Vergauwen B., 1994, Static Analysis. First International Static Analysis Symposium, SAS '94 Proceedings, P314
   Vojdani V., 2009, Annales Univ. Sci. Budapest., P1
NR 45
TC 20
Z9 23
U1 0
U2 4
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAY 1
PY 2016
VL 120
BP 1
EP 24
DI 10.1016/j.scico.2015.12.005
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DH3NJ
UT WOS:000372693400001
OA Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Hartmanns, A
   Hermanns, H
AF Hartmanns, Arnd
   Hermanns, Holger
TI In the quantitative automata zoo
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 5th IPM International Conference on Fundamentals of Software Engineering
   (FSEN)
CY APR 24-26, 2013
CL Tehran, IRAN
SP IFIP WG 2 2, Inst Res Fundamental Sci, Sch Comp Sci, ACM SIGSOFT
DE Quantitative verification; Markov decision processes; Timed automata;
   Hybrid automata; Compositional modelling
ID SYMBOLIC MODEL CHECKING; REAL-TIME SYSTEMS; BOUNDED REACHABILITY;
   PERFORMANCE ANALYSIS; SAFETY VERIFICATION; STOCHASTIC GAMES; HYBRID
   SYSTEMS; SYNCHRONIZATION; DEPENDABILITY; ABSTRACTION
AB Quantitative model checking and performance evaluation deal with the analysis of complex systems that must not only satisfy correctness requirements, but also meet performance and reliability goals. Models of such systems therefore need to represent the necessary quantitative information about probabilistic decisions, real-time phenomena, or continuous dynamics. At the same time, nondeterminism needs to be properly captured as in classical verification, so as to enable abstraction and compositional modelling. These aspects span a large spectrum of automata-based quantitative models which have been studied in the verification and performance evaluation literature. In this paper, we embark on a guided tour through this zoo of quantitative models. Starting from the basic formalisms of labelled transition systems and also Markov chains, we look at how timed and hybrid automata add real-time aspects as well as continuous dynamics, and we study extensions that provide for behaviour governed by discrete and continuous probability distributions. For each of the automata models, we outline its definition, provide a small illustrative example, summarise its expressive power, and survey available formal analysis techniques as well as selected practical applications. (C) 2015 Elsevier B.V. All rights reserved.
C1 [Hartmanns, Arnd; Hermanns, Holger] Univ Saarland, Comp Sci, D-66123 Saarbrucken, Germany.
C3 Saarland University
RP Hartmanns, A (corresponding author), Univ Saarland, Comp Sci, D-66123 Saarbrucken, Germany.
EM arnd@cs.uni-saarland.de; hermanns@cs.uni-saarland.de
OI Hartmanns, Arnd/0000-0003-3268-8674; Hermanns,
   Holger/0000-0002-2766-9615
FU EU Seventh Framework Programme [295261, 318490]; DFG [SFB/TR 14 AVACS];
   CAS-SAFEA International Partnership Program for Creative Research Teams;
   CDZ project CAP [GZ 1023]
FX This work is supported by the EU Seventh Framework Programme under grant
   agreements 295261 (MEALS) and 318490 (SENSATION), by the DFG as part of
   SFB/TR 14 AVACS, by the CAS-SAFEA International Partnership Program for
   Creative Research Teams, and by the CDZ project CAP (GZ 1023).
CR Abate A, 2011, IEEE T AUTOMAT CONTR, V56, P2688, DOI 10.1109/TAC.2011.2160595
   Abate A, 2008, AUTOMATICA, V44, P2724, DOI 10.1016/j.automatica.2008.03.027
   ALUR R, 1994, THEOR COMPUT SCI, V126, P183, DOI 10.1016/0304-3975(94)90010-8
   ALUR R, 1993, INFORM COMPUT, V104, P2, DOI 10.1006/inco.1993.1024
   Alur R, 1996, J ACM, V43, P116, DOI 10.1145/227595.227602
   Alur R, 2004, THEOR COMPUT SCI, V318, P297, DOI 10.1016/j.tcs.2003.10.038
   ALUR R, 1995, THEOR COMPUT SCI, V138, P3, DOI 10.1016/0304-3975(94)00202-T
   [Anonymous], 9 INT C QUANT EV SYS
   [Anonymous], 2012, ECEASST
   [Anonymous], LECT NOTES COMPUTER
   [Anonymous], 2009, VERIFICATION CONTROL
   [Anonymous], LECT NOTES COMPUTER
   [Anonymous], 1980, CALCULUS COMMUNICATI, DOI DOI 10.1007/3-540-10235-3
   [Anonymous], LECT NOTES COMPUTER
   [Anonymous], 2000, Proceedings of the 11th International Conference on Concurrency Theory, CONCUR 00
   [Anonymous], FORM METHOD SYST DES
   [Anonymous], 1990, LICS, DOI DOI 10.1109/LICS.1990.113767
   [Anonymous], 17 INT C HYBR SYST C
   [Anonymous], 2002, LECT NOTES COMPUTER
   [Anonymous], 1999, PROBMIV 98 1 INT WOR
   [Anonymous], LECT NOTES COMPUTER
   [Anonymous], 1970, MATH SCI ENG
   [Anonymous], 2006, LECT NOTES CONTR INF
   [Anonymous], LECT NOTES COMPUTER
   [Anonymous], LECT NOTES COMPUTER
   [Anonymous], NATO SCI PEACE SEC D
   [Anonymous], LECT NOTES COMPUTER
   [Anonymous], 1997, COMPUTER CONTROLLED
   [Anonymous], LECT NOTES COMPUTER
   [Anonymous], LECT NOTES COMPUTER
   [Anonymous], ELECT COMMUN EASST
   [Anonymous], 2014, PROC HSCC
   [Anonymous], THESIS
   AstrOm KJ., 1994, ADAPTIVE CONTROL
   Aziz A, 1996, LNCS, P269, DOI [DOI 10.1007/3-540-61474-5_75, 10.1007/3-540-61474-5_75, DOI 10.1007/3-540-61474-5]
   Baeten JCM, 2005, THEOR COMPUT SCI, V335, P131, DOI 10.1016/j.tcs.2004.07.036
   Baier C, 2008, PRINCIPLES OF MODEL CHECKING, P1
   Baier C, 2003, IEEE T SOFTWARE ENG, V29, P524, DOI 10.1109/TSE.2003.1205180
   Baier C, 2006, ELECTRON NOTES THEOR, V153, P97, DOI 10.1016/j.entcs.2005.10.034
   Ball T, 2001, ACM SIGPLAN NOTICES, V36, P203, DOI 10.1145/381694.378846
   Basu A, 2010, LECT NOTES COMPUT SC, V6117, P32, DOI 10.1007/978-3-642-13464-7_4
   Behrmann G, 2004, LECT NOTES COMPUT SC, V3185, P200
   Behrmann G., 2001, Hybrid Systems: Computation and Control. 4th International Workshop, HSCC 2001. Proceedings (Lecture Notes in Computer Science Vol.2034), P147
   Berendsen J., 2010, Proceedings of the 2010 Seventh International Conference on the Quantitative Evaluation of Systems (QEST 2010), P273, DOI 10.1109/QEST.2010.41
   Berendsen J, 2009, LECT NOTES COMPUT SC, V5532, P128, DOI 10.1007/978-3-642-02017-9_16
   Bernardo M, 2013, INFORM COMPUT, V225, P29, DOI 10.1016/j.ic.2013.02.004
   Biere A, 1999, LECT NOTES COMPUT SC, V1579, P193
   Blom H.A., 2006, Lecture notes in control and information sciences
   Blom S., 2002, Computer Aided Verification. 14th International Conference, CAV 2002. Proceedings (Lecture Notes in Computer Science Vol.2404), P596
   Böde E, 2009, IEEE T SOFTWARE ENG, V35, P274, DOI 10.1109/TSE.2008.102
   Bohnenkamp H, 2005, I C DEPEND SYS NETWO, P704, DOI 10.1109/DSN.2005.20
   Bohnenkamp H, 2006, IEEE T SOFTWARE ENG, V32, P812, DOI 10.1109/TSE.2006.104
   BOLOGNESI T, 1987, COMPUT NETWORKS ISDN, V14, P25, DOI 10.1016/0169-7552(87)90085-7
   Bortolussi L, 2015, ELECTRON NOTES THEOR, V310, P27, DOI 10.1016/j.entcs.2014.12.011
   Bortolussi L, 2013, PERFORM EVALUATION, V70, P317, DOI 10.1016/j.peva.2013.01.001
   Boudali H, 2010, IEEE T DEPEND SECURE, V7, P128, DOI 10.1109/TDSC.2009.45
   Bouyer P, 2011, COMMUN ACM, V54, P78, DOI 10.1145/1995376.1995396
   Boyer Benoit, 2013, Quantitative Evaluation of Systems. 10th International Conference, QEST 2013. Proceedings: LNCS 8054, P160, DOI 10.1007/978-3-642-40196-1_12
   Bozga M, 1998, LECT NOTES COMPUT SC, V1427, P546, DOI 10.1007/BFb0028779
   Bozga M., 1997, International Journal on Software Tools for Technology Transfer, V1, P166, DOI 10.1007/s100090050012
   Bozzano M, 2014, RELIAB ENG SYST SAFE, V132, P20, DOI 10.1016/j.ress.2014.07.003
   Bozzano M, 2011, COMPUT J, V54, P754, DOI 10.1093/comjnl/bxq024
   Bujorianu ML, 2004, IEEE DECIS CONTR P, P1872, DOI 10.1109/CDC.2004.1430320
   Cassandras C. G., 2006, STOCHASTIC HYBRID SY
   Cimatti A., 2000, Int. J. Softw. Tools for Technol. Transf. (STTT), V2, P410, DOI [DOI 10.1007/S100090050046, 10.1007/s100090050046]
   Ciocchetta F, 2008, ELECTRON NOTES THEOR, V194, P103, DOI 10.1016/j.entcs.2007.12.008
   Clarke E, 2003, J ACM, V50, P752, DOI 10.1145/876638.876643
   Coste N, 2010, LECT NOTES COMPUT SC, V6416, P128, DOI 10.1007/978-3-642-16561-0_18
   Coste N, 2009, LECT NOTES COMPUT SC, V5643, P204, DOI 10.1007/978-3-642-02658-4_18
   D'Argenio P. R., 2001, Process Algebra and Probabilistic Methods. Performance Modelling and Verification. Joint International Workshop, PAPM-PROBMIV 2001. Proceedings (Lecture Notes in Computer Science Vol.2165), P39
   D'Argenio PR, 2012, MATH STRUCT COMP SCI, V22, P43, DOI 10.1017/S0960129511000454
   DArgenio PR, 1997, LECT NOTES COMPUT SC, V1217, P416, DOI 10.1007/BFb0035403
   DAVIS MHA, 1984, J ROY STAT SOC B MET, V46, P353
   Desharnais J, 2002, INFORM COMPUT, V179, P163, DOI 10.1006/inco.2001.2962
   Ding J, 2013, AUTOMATICA, V49, P2665, DOI 10.1016/j.automatica.2013.05.025
   Eisentraut Christian, 2013, Application and Theory of Petri Nets and Concurrency. 34th International Conference, PETRI NETS 2013. Proceedings: LNCS 7927, P90, DOI 10.1007/978-3-642-38697-8_6
   Eisentraut C, 2010, LECT NOTES COMPUT SC, V6269, P21, DOI 10.1007/978-3-642-15375-4_3
   Eisentraut C, 2010, IEEE S LOG, P342, DOI 10.1109/LICS.2010.41
   EMERSON EA, 1982, SCI COMPUT PROGRAM, V2, P241, DOI 10.1016/0167-6423(83)90017-5
   Esteve MA, 2012, PROC INT CONF SOFTW, P1022, DOI 10.1109/ICSE.2012.6227118
   Forejt V, 2011, LECT NOTES COMPUT SC, V6659, P53, DOI 10.1007/978-3-642-21455-4_3
   Fränzle M, 2008, LECT NOTES COMPUT SC, V4981, P172
   Fränzle M, 2011, HSCC 11: PROCEEDINGS OF THE 14TH INTERNATIONAL CONFERENCE ON HYBRID SYSTEMS: COMPUTATION AND CONTROL, P43
   Fränzle M, 2010, J LOGIC ALGEBR PROGR, V79, P436, DOI 10.1016/j.jlap.2010.07.003
   Frehse G, 2005, LECT NOTES COMPUT SC, V3414, P258
   Frehse G., 2011, COMPUTER AIDED VERIF, P379, DOI [DOI 10.1007/978-3-642-22110-1, 10.1007/978-3-642-22110-1_30]
   Garavel Hubert, 2013, International Journal on Software Tools for Technology Transfer, V15, P89, DOI 10.1007/s10009-012-0244-z
   Ghosh R., 2001, Hybrid Systems: Computation and Control. 4th International Workshop, HSCC 2001. Proceedings (Lecture Notes in Computer Science Vol.2034), P232
   Gibson-Robinson T., 2014, Lecture Notes in Computer Science, V8413, P187
   Girard A, 2011, EUR J CONTROL, V17, P568, DOI 10.3166/EJC.17.568-578
   Girard A, 2010, IEEE T AUTOMAT CONTR, V55, P116, DOI 10.1109/TAC.2009.2034922
   Godefroid P., 1996, Lecture Notes in Computer Science, V1032
   Gross C, 2007, LECT NOTES COMPUT SC, V4878, P174
   Guck Dennis, 2013, Quantitative Evaluation of Systems. 10th International Conference, QEST 2013. Proceedings: LNCS 8054, P55, DOI 10.1007/978-3-642-40196-1_5
   Guck Dennis, 2012, NASA Formal Methods. Proceedings of the 4th International Symposium, NFM 2012, P8, DOI 10.1007/978-3-642-28891-3_4
   Hahn EM, 2013, FORM METHOD SYST DES, V43, P191, DOI 10.1007/s10703-012-0167-z
   Hartmanns Arnd, 2012, Leveraging Applications of Formal Methods, Verification and Validation. Technologies for Mastering Change. Technologies for Mastering Change. Proceedings of the 5th International Symposium, ISoLA 2012, P420, DOI 10.1007/978-3-642-34026-0_31
   Hartmanns A, 2015, INT J SOFTW TOOLS TE, V17, P429, DOI 10.1007/s10009-014-0349-7
   Hartmanns A, 2012, WINT SIMUL C PROC
   Hartmanns A, 2009, INT CONF QUANT EVAL, P187, DOI 10.1109/QEST.2009.41
   Hartmanns Arnd, 2014, LNCS, V8413, P593
   Hatefi H, 2013, LECT NOTES COMPUT SC, V8161, P250, DOI 10.1007/978-3-642-40213-5_16
   Henriques D., 2012, 2012 Ninth International Conference on Quantitative Evaluation of Systems (QEST 2012), P84, DOI 10.1109/QEST.2012.19
   HENZINGER TA, 1994, INFORM COMPUT, V111, P193, DOI 10.1006/inco.1994.1045
   Henzinger TA, 1996, IEEE S LOG, P278, DOI 10.1109/LICS.1996.561342
   Henzinger TA, 1997, LECT NOTES COMPUT SC, V1254, P460, DOI 10.1007/s100090050008
   Henzinger T, 2011, INT J FOUND COMPUT S, V22, P823, DOI 10.1142/S0129054111008441
   Hérault T, 2004, LECT NOTES COMPUT SC, V2937, P73
   Hermanns Holger, 2009, Proceedings of Formal Methods for Components and Objects. 8th International Symposium (FMCO 2009). Revised Selected Papers, P311, DOI 10.1007/978-3-642-17071-3_16
   Hermanns H, 2000, PERFORM EVALUATION, V39, P5, DOI 10.1016/S0166-5316(99)00056-5
   Hermanns H, 2013, IT-INF TECHNOL, V55, P45, DOI 10.1524/itit.2013.0006
   Hespanha JP, 2014, ANNU REV CONTROL, V38, P155, DOI 10.1016/j.arcontrol.2014.09.001
   Hespanha JP, 2005, LECT NOTES COMPUT SC, V3414, P322
   Hillston J., 1996, A Compositional Approach to Performance Modelling
   Hoare CAR., 1985, Communicating Sequential Processes
   Holzmann GJ, 2004, The SPIN model checker: primer and reference manual, V1003
   Hu JH, 2000, LECT NOTES COMPUT SC, V1790, P160
   Julius AA, 2009, IEEE T AUTOMAT CONTR, V54, P1193, DOI 10.1109/TAC.2009.2019791
   Julius AA, 2009, SYST CONTROL LETT, V58, P94, DOI 10.1016/j.sysconle.2008.09.001
   Kant Gijs, 2015, Tools and Algorithms for the Construction and Analysis of Systems. 21st International Conference, TACAS 2015, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2015. Proceedings: LNCS 9035, P692, DOI 10.1007/978-3-662-46681-0_61
   Katoen JP, 2011, PERFORM EVALUATION, V68, P90, DOI 10.1016/j.peva.2010.04.001
   Kocsis L, 2006, LECT NOTES COMPUT SC, V4212, P282, DOI 10.1007/11871842_29
   Kwiatkowsa M., 2012, 2012 Ninth International Conference on Quantitative Evaluation of Systems (QEST 2012), P203, DOI 10.1109/QEST.2012.14
   Kwiatkowska M., 2003, Formal Aspects of Computing, V14, P295, DOI 10.1007/s001650300007
   Kwiatkowska M., 2000, CONCUR 2000 - Concurrency Theory. 11th International Conference. Proceedings (Lecture Notes in Computer Science Vol.1877), P123
   Kwiatkowska M, 2002, THEOR COMPUT SCI, V282, P101, DOI 10.1016/S0304-3975(01)00046-9
   Kwiatkowska M, 2007, INFORM COMPUT, V205, P1027, DOI 10.1016/j.ic.2007.01.004
   Kwiatkowska M, 2006, FORM METHOD SYST DES, V29, P33, DOI 10.1007/s10703-006-0005-2
   Kwiatkowska M, 2009, LECT NOTES COMPUT SC, V5813, P212, DOI 10.1007/978-3-642-04368-0_17
   Legay A, 2015, LECT NOTES COMPUT SC, V8938, P350, DOI 10.1007/978-3-319-15201-1_23
   Legay A, 2010, LECT NOTES COMPUT SC, V6418, P122, DOI 10.1007/978-3-642-16612-9_11
   Mader Angelika, 2010, International Journal on Software Tools for Technology Transfer, V12, P305, DOI 10.1007/s10009-009-0129-y
   Maler O, 2004, LECT NOTES COMPUT SC, V3253, P152, DOI 10.1007/978-3-540-30206-3_12
   Mitra S, 2003, LECT NOTES COMPUT SC, V2623, P343
   Park P, 2014, IEEE T INTELL TRANSP, V15, P615, DOI 10.1109/TITS.2013.2285116
   Peled D., 1994, Computer Aided Verification. 6th International Conference, CAV '94. Proceedings, P377
   Pnueli A., 1977, 18th Annual Symposium on Foundations of Computer Science, P46, DOI 10.1109/SFCS.1977.32
   Puterman ML., 2014, MARKOV DECISION PROC, DOI DOI 10.1002/9780470316887
   Ratschan S, 2007, ACM T EMBED COMPUT S, V6, DOI 10.1145/1210268.1210276
   Segala R., 1995, THESIS
   Simons D. P. L., 2001, International Journal on Software Tools for Technology Transfer, V3, P469, DOI 10.1007/s100090100059
   Sproston J, 2000, LECT NOTES COMPUT SC, V1926, P31
   Stewart W.J., 1994, Introduction to the Numerical Solution of Markov Chains
   Stoelinga M., 1999, Formal Methods for Real-Time and Probabilistic Systems. 5th International AMAST Workshop, ARTS'99. Proceedings, P53
   Strubbe S, 2005, LECT NOTES COMPUT SC, V3414, P623
   Tabuada P, 2008, IEEE T AUTOMAT CONTR, V53, P1406, DOI 10.1109/TAC.2008.925824
   Teige T, 2011, NONLINEAR ANAL-HYBRI, V5, P343, DOI 10.1016/j.nahs.2010.04.009
   Timmer Mark, 2013, Formal Modeling and Analysis of Timed Systems. Proceedings of 11th International Conference (FORMATS 2013): LNCS 8053, P243, DOI 10.1007/978-3-642-40229-6_17
   Timmer M, 2011, LECT NOTES COMPUT SC, V6605, P311, DOI 10.1007/978-3-642-19835-9_29
   VALMARI A, 1991, LECT NOTES COMPUT SC, V531, P156, DOI 10.1007/BFb0023729
   Yang T, 2013, IEEE DECIS CONTR P, P7065, DOI 10.1109/CDC.2013.6761009
   Yue HD, 2011, LECT NOTES COMPUT SC, V6869, P197, DOI 10.1007/978-3-642-22875-9_18
   Zadeh Soudjani Sadegh Esmaeil, 2015, Tools and Algorithms for the Construction and Analysis of Systems. 21st International Conference, TACAS 2015, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2015. Proceedings: LNCS 9035, P272, DOI 10.1007/978-3-662-46681-0_23
   Zamani M., 2014, Hybrid Systems: Computation and Control, P41
   Zamani M, 2014, IEEE DECIS CONTR P, P3395, DOI 10.1109/CDC.2014.7039915
   Zamani M, 2014, IEEE T AUTOMAT CONTR, V59, P3135, DOI 10.1109/TAC.2014.2351652
   Zamani M, 2014, SYST CONTROL LETT, V69, P38, DOI 10.1016/j.sysconle.2014.04.003
   Zhang LJ, 2012, EUR J CONTROL, V18, P572, DOI 10.3166/EJC.18.572-587
   Zhang L, 2010, LECT NOTES COMPUT SC, V6015, P53, DOI 10.1007/978-3-642-12002-2_5
   Zuliani P, 2013, FORM METHOD SYST DES, V43, P338, DOI 10.1007/s10703-013-0195-3
NR 160
TC 9
Z9 9
U1 0
U2 8
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 15
PY 2015
VL 112
BP 3
EP 23
DI 10.1016/j.scico.2015.08.009
PN 1
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA CW3HB
UT WOS:000364881500002
DA 2024-07-18
ER

PT J
AU Matsuda, K
   Wang, M
AF Matsuda, Kazutaka
   Wang, Meng
TI "Bidirectionalization for free" for monomorphic transformations
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Bidirectional transformation; Free theorem; Type class; Haskell
ID UPDATE SEMANTICS; VIEWS
AB A bidirectional transformation is a pair of mappings between source and view data objects, one in each direction. When the view is modified, the source is updated accordingly with respect to some laws. Over the years, a lot of effort has been made to offer better language support for programming such transformations. In particular, a technique known as bidirectionalization is able to analyze and transform unidirectional programs written in general purpose languages, and "bidirectionalize" them.
   Among others, an approach termed semantic bidirectionalization proposed by Voigtlander stands out in terms of user-friendliness. A unidirectional program can be written using arbitrary language constructs, as long as the function it represents is polymorphic and the language constructs respect parametricity. The free theorems that follow from the polymorphic type of the program allow a kind of forensic examination of the transformation, determining its effect without examining its implementation. This is convenient, as the programmer is not restricted to using a particular syntax; but it does require the transformation to be polymorphic.
   In this paper, we lift this polymorphism requirement to improve the applicability of semantic bidirectionalization. Concretely, we provide a type class PackM gamma alpha mu, which intuitively reads "a concrete datatype gamma is abstracted to a type alpha, and the 'observations' made by a transformation on values of type gamma are recorded by a monad mu". With PackM, we turn monomorphic transformations into polymorphic ones that are ready to be bidirectionalized. We demonstrate our technique with case studies of typical applications of bidirectional transformation, namely text processing. XML query and graph transformation, which were commonly considered beyond semantic bidirectionalization because of their monomorphic nature. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Matsuda, Kazutaka] Univ Tokyo, Grad Sch Informat Sci & Technol, Bunkyo Ku, 7-3-1 Hongo, Tokyo 1130033, Japan.
   [Wang, Meng] Chalmers Univ Technol, Comp Sci & Engn, S-41296 Gothenburg, Sweden.
C3 University of Tokyo; Chalmers University of Technology
RP Matsuda, K (corresponding author), Univ Tokyo, Grad Sch Informat Sci & Technol, Bunkyo Ku, 7-3-1 Hongo, Tokyo 1130033, Japan.
EM kztk@is.s.u-tokyo.ac.jp; wmeng@chalmers.se
OI Wang, Meng/0000-0001-7780-630X
FU JSPS KAKENHI [24700020]; Grand-Challenging Project on the "Linguistic
   Foundation for Bidirectional Model Transformation" of the National
   Institute of Informatics; Swedish Foundation for Strategic Research
   (SSF), project RAWFP [RIT 10-0087]; Grants-in-Aid for Scientific
   Research [24700020] Funding Source: KAKEN
FX This work was partially supported by JSPS KAKENHI Grant Number 24700020,
   the Grand-Challenging Project on the "Linguistic Foundation for
   Bidirectional Model Transformation" of the National Institute of
   Informatics, and Swedish Foundation for Strategic Research (SSF) RIT
   10-0087, project RAWFP.
CR Abiteboul S., 1997, International Journal on Digital Libraries, V1, P68, DOI 10.1007/s007990050001
   [Anonymous], 1989, FPCA 1989, DOI DOI 10.1145/99370.99404
   Asada Kazuyuki., 2013, PPDP, P73
   BANCILHON F, 1981, ACM T DATABASE SYST, V6, P557, DOI 10.1145/319628.319634
   Bernardy JP, 2012, J FUNCT PROGRAM, V22, P107, DOI 10.1017/S0956796812000056
   Bird R.S., 2013, UNDERSTANDING IDIOMA, P25
   Bohannon A, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P407, DOI 10.1145/1328438.1328487
   Buneman P, 2000, VLDB J, V9, P76, DOI 10.1007/s007780050084
   CONSENS MP, 1990, PROCEEDINGS OF THE NINTH ACM SIGACT-SIGMOD-SIGART SYMPOSIUM ON PRINCIPLES OF DATABASE SYSTEMS, P404, DOI 10.1145/298514.298591
   Czarnecki K, 2009, LECT NOTES COMPUT SC, V5563, P260, DOI 10.1007/978-3-642-02408-5_19
   DAYAL U, 1982, ACM T DATABASE SYST, V7, P381, DOI 10.1145/319732.319740
   Erwig M, 2001, J FUNCT PROGRAM, V11, P467, DOI 10.1017/S0956796801004075
   Erwig M., 1992, LNCS, V657, P277
   Fegaras L, 2010, PROC INT CONF DATA, P309, DOI 10.1109/ICDE.2010.5447896
   Foster JN, 2007, ACM T PROGR LANG SYS, V29, DOI [10.1145/1232420.1232424, 10.1145/1047659.1040325]
   Foster JN, 2008, ICFP'08: PROCEEDINGS OF THE 2008 SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P383
   Foster N., 2010, LECT NOTES COMPUTER, V7470, P1, DOI DOI 10.1007/978-3-642-32202-0_1
   GOTTLOB G, 1988, ACM T DATABASE SYST, V13, P486, DOI 10.1145/49346.50068
   HEGNER SJ, 1990, LECT NOTES COMPUT SC, V470, P422
   Hegner SJ, 2004, ANN MATH ARTIF INTEL, V40, P63, DOI 10.1023/A:1026158013113
   Hidaka S, 2013, ACM SIGPLAN NOTICES, V48, P305, DOI [10.1145/2500365.2500608, 10.1145/2544174.2500608]
   Hidaka S, 2010, ICFP 2010: PROCEEDINGS OF THE 2010 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P205
   Hu Zhenjiang., 2004, PARTIAL EVALUATION P, P178
   Inaba K, 2011, PPDP 11 - PROCEEDINGS OF THE 2011 SYMPOSIUM ON PRINCIPLES AND PRACTICES OF DECLARATIVE PROGRAMMING, P17
   Johnson M., 2012, ELECT COMMUN EASST, V49
   Johnsson T., 1998, J FUNCT PROGRAM, V8, P323
   KELLER AM, 1987, ACM T DATABASE SYST, V12, P521, DOI 10.1145/27629.214296
   King D. J., 1995, Conference Record of POPL'95: 22nd ACM SIGPLAN-SIGACT Symposium Principles of Programming Languages, P344, DOI 10.1145/199448.199530
   Matsuda K., 2013, P 15 S PRINCIPLES PR, V13, P297, DOI [10.1145/2505879.2505888, DOI 10.1145/2505879.2505888]
   Matsuda K, 2007, ICFP'07 PROCEEDINGS OF THE 2007 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P47
   Mcbride C, 2008, J FUNCT PROGRAM, V18, P1, DOI 10.1017/S0956796807006326
   Mu SC, 2004, LECT NOTES COMPUT SC, V3302, P2
   Oliveira BCDS, 2012, ACM SIGPLAN NOTICES, V47, P77, DOI 10.1145/2398856.2364541
   Rajkumar Raghu, 2013, ECEASST, V57, DOI [10.14279/tuj.eceasst.57.879, DOI 10.14279/TUJ.ECEASST.57.879]
   Reynolds J. C., 1983, Information Processing 83. Proceedings of the IFIP 9th World Computer Congress, P513
   Voigtländer J, 2013, J FUNCT PROGRAM, V23, P515, DOI 10.1017/S0956796813000130
   Voigtländer J, 2009, ACM SIGPLAN NOTICES, V44, P165, DOI 10.1145/1594834.1480904
   Voigtlander J., 2010, P 15 ACM SIGPLAN INT, P181
   Voigtlander J., 2009, ICFP, P173
   Vytiniotis D, 2010, J FUNCT PROGRAM, V20, P175, DOI 10.1017/S0956796810000079
   Wallace M, 1999, ACM SIGPLAN NOTICES, V34, P148, DOI 10.1145/317765.317794
   Wang M, 2014, PEPM '14: PROCEEDINGS OF THE ACM SIGPLAN WORKSHOP ON PARTIAL EVALUATION AND PROGRAM MANIPULATION, P51, DOI 10.1145/2543728.2543729
   Wang M, 2013, SCI COMPUT PROGRAM, V78, P2216, DOI 10.1016/j.scico.2012.07.014
   Wang M, 2011, ICFP 11 - PROCEEDINGS OF THE 2011 ACM SIGPLAN: INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P392
   Wang M, 2010, LECT NOTES COMPUT SC, V6120, P397, DOI 10.1007/978-3-642-13321-3_22
NR 45
TC 10
Z9 10
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 1
PY 2015
VL 111
BP 79
EP 109
DI 10.1016/j.scico.2014.07.008
PN 1
PG 31
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DB5MA
UT WOS:000368557000005
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Choi, Y
   Park, M
   Byun, T
   Kim, D
AF Choi, Yunja
   Park, Mingyu
   Byun, Taejoon
   Kim, Dongwoo
TI Efficient safety checking for automotive operating systems using
   property-based slicing and constraint-based environment generation
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 1st International Workshop on Formal-Techniques-for-
   Safety-Critical-Systems (FTSCS 2012)
CY NOV 12, 2012
CL Kyoto, JAPAN
DE Safety; Slicing; Model checking; Testing; Automotive OS
ID MODEL CHECKING; SOFTWARE; VERIFICATION
AB An automotive operating system is a safety-critical system that has a critical impact on the safety of road vehicles. Safety verification is a must in each stage of software development in such a system, but most existing work focuses on specification-level or model-level safety verification. This work proposes a collaborative approach using model checking and testing for the efficient safety checking of an automotive operating system. Efficiency is achieved through property-based slicing, which reduces the complexity of verification, and guided test sequence generation, which limits the input space to a set of representative test sequences selected from legal as well as illegal input spaces. Comprehensiveness is achieved by formally specifying external constraints using constraint automata from which guided test sequences are selected. The approach is implemented as a prototype tool set applied to the verification of an open source automotive operating system based on the OSEK/VDX international standard. The approach revealed several safety issues that could not be identified by existing approaches. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Choi, Yunja; Park, Mingyu; Byun, Taejoon; Kim, Dongwoo] Kyungpook Natl Univ, Sch Comp Sci & Engn, Daegu, South Korea.
C3 Kyungpook National University
RP Choi, Y (corresponding author), Kyungpook Natl Univ, Sch Comp Sci & Engn, Daegu, South Korea.
EM yuchoi76@knu.ac.kr; pqrk8805@gmail.com; bntejn@gmail.com;
   kdw9242@gmail.com
FU National Research Foundation of Korea - Korean Government
   [NRF-2012S1A2A1A01031160]; MSIP (Ministry of Science, ICT and Future
   Planning), Korea, under the ITRC (Information Technology Research
   Center) support program [NIPA-2013-H0301-13-5004]
FX This work was supported by the National Research Foundation of Korea
   Grant funded by the Korean Government (NRF-2012S1A2A1A01031160) and the
   MSIP (Ministry of Science, ICT and Future Planning), Korea, under the
   ITRC (Information Technology Research Center) support program
   (NIPA-2013-H0301-13-5004) supervised by the NIPA (National IT Industry
   Promotion Agency).
CR Acharya M, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P746, DOI 10.1145/1985793.1985898
   [Anonymous], 2008, 26262 ISO CD
   [Anonymous], 1993, Proceedings of the 3rd International Conference on Algebraic Methodology and Software Technology (AMAST'93)
   Béchennec JL, 2006, IEEE INT C EMERG, P641
   Binkley D, 1998, INFORM SOFTWARE TECH, V40, P583, DOI 10.1016/S0950-5849(98)00085-8
   Broy M., 2006, 28th International Conference on Software Engineering Proceedings, P33, DOI 10.1145/1134285.1134292
   Chebaro O., 2012, P SAC ACM, P1284, DOI DOI 10.1145/2245276.2231980
   Chen J, 2011, ASIA PAC SOFWR ENG, P274, DOI 10.1109/APSEC.2011.26
   Choi Y, 2013, LECT NOTES COMPUT SC, V8137, P305, DOI 10.1007/978-3-642-40561-7_21
   Choi Y, 2014, SOFTW TEST VERIF REL, V24, P38, DOI 10.1002/stvr.1482
   Chowdhuryl NS, 2013, INT J SECUR APPL, V7, P121
   Clarke E, 2004, LECT NOTES COMPUT SC, V2988, P168, DOI 10.1007/978-3-540-24730-2_15
   CLARKE EM, 1986, ACM T PROGR LANG SYS, V8, P244, DOI 10.1145/5397.5399
   Clarke EM, 1999, MODEL CHECKING, P1
   Cobleigh JM, 2008, ACM T SOFTW ENG METH, V17, DOI 10.1145/1348250.1348253
   Dwyer M. B., 1998, Software Engineering Notes, V23, P189, DOI 10.1145/291252.288307
   GALLAGHER KB, 1991, IEEE T SOFTWARE ENG, V17, P751, DOI 10.1109/32.83912
   Giannakopoulou D, 2002, ASE 2002: 17TH IEEE INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING, P3, DOI 10.1109/ASE.2002.1114984
   Gupta A, 2008, FORM METHOD SYST DES, V32, P285, DOI 10.1007/s10703-008-0050-0
   Gupta R., 1992, Conference on Software Maintenance 1992 (Cat.No.92CH3206-0), P299, DOI 10.1109/ICSM.1992.242531
   Hatcliff J., 2000, Higher-Order and Symbolic Computation, V13, P315, DOI 10.1023/A:1026599015809
   He NN, 2007, PR IEEE COMP DESIGN, P19, DOI 10.1109/ICCD.2007.4601875
   Heimdahl MPE, 1997, LECT NOTES COMPUT SC, V1301, P450, DOI 10.1145/267896.267926
   Henzinger TA, 2002, ACM SIGPLAN NOTICES, V37, P58, DOI 10.1145/565816.503279
   Hierons R, 2002, SOFTW TEST VERIF REL, V12, P23, DOI 10.1002/stvr.232
   Holzmann GJ, 2002, IEEE T SOFTWARE ENG, V28, P364, DOI 10.1109/TSE.2002.995426
   Holzmann GJ, 2004, The SPIN model checker: primer and reference manual, V1003
   Ioustinova N, 2002, APSEC 2002: NINTH ASIA PACIFIC SOFTWARE ENGINEERING CONFERENCE, P227, DOI 10.1109/APSEC.2002.1182992
   Mössinger J, 2010, IEEE SOFTWARE, V27, P92, DOI 10.1109/MS.2010.55
   Nam WH, 2008, FORM METHOD SYST DES, V32, P207, DOI 10.1007/s10703-008-0055-8
   Parizek P, 2007, EUROMICRO CONF PROC, P75
   Park M, 2012, ELECTRON P THEOR COM, P69, DOI 10.4204/EPTCS.105.6
   Penix J, 2005, FORM METHOD SYST DES, V26, P103, DOI 10.1007/s10703-005-1490-4
   Shi JQ, 2012, IEEE INT C ENG COMP, P293, DOI 10.1109/ICECCS.2012.27
   Tip F., 1994, CSR9438 CTR MATH COM
   Tkachuk O, 2003, 18TH IEEE INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING, PROCEEDINGS, P116, DOI 10.1109/ASE.2003.1240300
   WEISER M, 1984, IEEE T SOFTWARE ENG, V10, P352, DOI 10.1109/TSE.1984.5010248
   Yanhong Huang, 2011, Proceedings of the 2011 IEEE 5th International Symposium on Theoretical Aspects of Software Engineering (TASE 2011), P142, DOI 10.1109/TASE.2011.11
   Yatake K, 2010, LECT NOTES COMPUT SC, V6349, P58
NR 39
TC 9
Z9 11
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 1
PY 2015
VL 103
BP 51
EP 70
DI 10.1016/j.scico.2014.10.006
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA CE6QX
UT WOS:000351964100004
OA Bronze
DA 2024-07-18
ER

PT J
AU Erbas, C
   Erbas, BC
AF Erbas, Cengiz
   Erbas, Bahar Celikkol
TI Modules and transactions: Building blocks for a theory of software
   engineering
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Transaction costs; Top-down governance; Bottom-up governance; Module
   decomposition; Module construction
ID TOP-DOWN; SYSTEMS
AB This article leverages the findings of the transaction cost economics field, and proposes a simple theory and associated vocabulary to serve as a foundation for a unified theory of software engineering. The theory characterizes software engineering as a set of transactions organized under a spectrum of three governance structures (top-down, bottom-up and reuse), and explains the strengths and weaknesses of these governance structures in relation to asset specificity and uncertainty. It takes into account the recursive nature of the notions in software engineering, and applies uniformly to various contexts at different levels of granularity. It sheds light both on the technical and on the human aspects of software engineering through a unified explanatory framework, without requiring a need to assemble different approaches to address each. The theory not only explains some of the propositions given in the software engineering literature but also reveals the boundaries of their applicability. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Erbas, Cengiz] ASELSAN Inc, Ankara, Turkey.
   [Erbas, Bahar Celikkol] TOBB Univ Econ & Technol, Dept Econ, Ankara, Turkey.
C3 Aselsan; TOBB Ekonomi ve Teknoloji University
RP Erbas, C (corresponding author), ASELSAN Inc, Ankara, Turkey.
EM cerbas@aselsan.com.tr
RI Erbas, Bahar/AAB-2996-2019
OI Erbas, Bahar/0000-0001-6126-2125
CR [Anonymous], 1990, 610121990 IEEE
   Bagheri B., 2013, INT C SOFTW ENG ICSE
   Baldwin CY., 2000, DESIGN RULES, DOI DOI 10.7551/MITPRESS/2366.001.0001
   Boehm B., 2003, BALANCING AGILITY DI
   BOEHM BW, 1988, COMPUTER, V21, P61, DOI 10.1145/12944.12948
   Boehm BW., 2000, SOFTWARE COST ESTIMA, VII
   Brooks Frederick P., 1995, The mythical man-month
   Cashin P. M., 1981, 5th International Conference on Software Engineering, P136
   Crnkovic I, 2011, IEEE SOFTWARE, V28, P22, DOI 10.1109/MS.2011.62
   Dawkins Richard., 1999, EXTENDED PHENOTYPE
   Elliott Sim S., 1999, Proceedings IEEE International Conference on Software Maintenance - 1999 (ICSM'99). `Software Maintenance for Business Change' (Cat. No.99CB36360), P381, DOI 10.1109/ICSM.1999.792636
   Erbas B.C., 2005, INTEGRATED DESIGN PR
   Erbas C, 2013, 2013 2ND SEMAT WORKSHOP ON A GENERAL THEORY OF SOFTWARE ENGINEERING (GTSE), P15, DOI 10.1109/GTSE.2013.6613864
   Erbas C, 2009, 2009 ICSE WORKSHOP ON SOFTWARE DEVELOPMENT GOVERNANCE, P15, DOI 10.1109/SDG.2009.5071331
   Fowler M., 2001, Software Development, V9, P28
   Halstead M. H., 1977, ELEMENTS SOFTWARE SC
   Jacobson I., 2009, DOBBS J         0806
   Jacobson I., 2013, The Essence of Software Engineering: Applying the SEMAT Kernel
   Jacobson I., 2012, ASE 12 GERM ESS SEPT
   Johnson P., 2012, IEEE Software, V29, P94, DOI 10.1109/MS.2012.127
   Johnson P., 2007, INT C SOFTW ENG ADV
   Johnson P., 2013, ACM SIGSOFT SOFTW EN, V38, P47, DOI DOI 10.1145/2507288.2529923
   Jorgensen M, 2004, INFORM SOFTWARE TECH, V46, P3, DOI 10.1016/S0950-5349(03)00093-4
   Kreps D.M., 1990, COURSE MICROECONOMIC
   Kuhn T. S., 1962, STRUCTURE SCI REVOLU
   Li D, 2009, P INT COMP SOFTW APP, P53, DOI 10.1109/COMPSAC.2009.17
   Lichtenstein Y., 2004, ACM COMMUN, V47
   Marschak J., 1972, Economic theory of teams
   Meyer R., 1989, Structured Programming, V10, P19
   Mili A., 2000, Proceedings of the 2000 International Conference on Software Engineering. ICSE 2000 the New Millennium, P157, DOI 10.1109/ICSE.2000.870407
   MILI H, 1995, IEEE T SOFTWARE ENG, V21, P528, DOI 10.1109/32.391379
   Mills H. D., 1976, IEEE Transactions on Software Engineering, VSE-2, P265, DOI 10.1109/TSE.1976.233831
   Nejad H.S., 2013, ANN REL MAINT S, P1
   O'Leary DE, 1998, IEEE INTELL SYST APP, V13, P2, DOI 10.1109/5254.671082
   Papazoglou M., 2006, E-business: Organizational and technical foundations
   PARNAS DL, 1972, COMMUN ACM, V15, P1053, DOI 10.1145/361598.361623
   Pint E.M., 1997, MR865AF RAND
   Pizka M., 2004, IEEE 7 INT WORKSH PR, P1
   Popper K., 2005, The logic of scientific discovery
   Ralph P., 2013, 2 SEMAT WORKSH GEN T
   Simon H. A, 1947, Administrative behavior: A study of decision-making processes in administrative organization
   Smolander K., 2013, 2 SEMAT WORKSH GEN T
   Tarr P., 2008, 1 WORKSH SOFTW DEV G
   THOMAS M, 1994, IEEE SOFTWARE, V11, P12, DOI 10.1109/52.300121
   Waldo J., 2006, ON SYSTEM DESIGN
   Weber Steve, 2004, The Success of Open Source, DOI DOI 10.4159/9780674044999
   Williamson O.E., 1985, EC I CAPITALISM
   Williamson OE, 2002, J ECON PERSPECT, V16, P171, DOI 10.1257/089533002760278776
   Williamson QE, 2000, J ECON LIT, V38, P595
   Yamaura T., 1999, Proceedings. Twenty-Third Annual International Computer Software and Applications Conference (Cat. No.99CB37032), P322, DOI 10.1109/CMPSAC.1999.812729
NR 50
TC 5
Z9 6
U1 0
U2 20
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD APR 1
PY 2015
VL 101
BP 6
EP 20
DI 10.1016/j.scico.2014.11.006
PG 15
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CC6XZ
UT WOS:000350513600002
OA hybrid
DA 2024-07-18
ER

PT J
AU Asavoae, IM
   de Boer, F
   Bonsangue, MM
   Lucanu, D
   Rot, J
AF Asavoae, I. M.
   de Boer, F.
   Bonsangue, M. M.
   Lucanu, D.
   Rot, J.
TI Model checking recursive programs interacting via the heap
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Heap manipulation; Pushdown system; Object-oriented program semantics;
   Model checking
ID VERIFICATION; AUTOMATA
AB Almost all modern imperative programming languages include operations for dynamically manipulating the heap, for example by allocating and deallocating objects, and by updating reference fields. In the presence of recursive procedures and local variables, the interactions of a program with the heap can become rather complex, as an unbounded number of objects can be allocated either on the call stack using local variables, or, anonymously, on the heap using reference fields. As such, a static analysis for recursive programs with dynamic manipulation of the heap is, in general, undecidable.
   In this paper we study the verification of recursive programs with unbounded allocation of objects, in a simple imperative language with heap manipulation. We present a semantics for this language which is improved w.r.t. heap allocation, using an abstraction that is precise (i.e., bisimilar with the standard/concrete semantics). For any program with a bounded visible heap, meaning that the number of objects reachable from variables at any point of execution is bounded, this abstraction is a finitary representation of its behaviour, even though an unbounded number of objects can appear in the state. As a consequence, for such programs model checking is decidable. Finally, we introduce a specification language for heap-properties, and we discuss model checking of heap invariant properties against heap-manipulating programs. (C) 2014 Published by Elsevier B.V.
C1 [de Boer, F.; Bonsangue, M. M.; Rot, J.] Leiden Inst Adv Comp Sci, Leiden, Netherlands.
   [Asavoae, I. M.; Lucanu, D.] Alexandru Ioan Cuza Univ, Fac Comp Sci, Iasi, Romania.
   [de Boer, F.; Bonsangue, M. M.; Rot, J.] Ctr Wiskunde & Informat, Amsterdam, Netherlands.
C3 Leiden University; Alexandru Ioan Cuza University
RP Asavoae, IM (corresponding author), Alexandru Ioan Cuza Univ, Fac Comp Sci, Iasi, Romania.
EM mariuca.asavoae@info.uaic.ro; frb@cwi.nl; marcello@liacs.nl;
   dlucanu@info.uaic.ro; jrot@liacs.nl
RI Lucanu, Dorel/C-3626-2012
OI Lucanu, Dorel/0000-0001-8097-040X; Bonsangue,
   Marcello/0000-0003-3746-3618
FU Netherlands Organisation for Scientific Research (NWO) [612.063.920]
FX The research of this author has been funded by the Netherlands
   Organisation for Scientific Research (NWO), CORE project, dossier
   number: 612.063.920.
CR [Anonymous], 2003, Adv. Comput., DOI 10.1016/S0065-2458(03)58003-2
   [Anonymous], 2007, LNCS
   Asavoae I.M., 2013, LNCS, V7841, P59
   Baier C, 2008, PRINCIPLES OF MODEL CHECKING, P1
   Berdine J, 2004, LECT NOTES COMPUT SC, V3328, P97
   Bonsangue M, 2011, LECT NOTES COMPUT SC, V6527, P226, DOI 10.1007/978-3-642-19829-8_15
   Bouajjani A, 1997, LECT NOTES COMPUT SC, V1243, P135
   Bouajjani A, 2007, LECT NOTES COMPUT SC, V4590, P207
   BRZOZOWSKI JA, 1964, J ACM, V11, P481, DOI 10.1145/321239.321249
   Ciancia V, 2010, INFORM COMPUT, V208, P1349, DOI 10.1016/j.ic.2009.10.007
   Coquand Thierry, 2011, Certified Programs and Proofs. Proceedings First International Conference, CPP 2011, P119
   Corbett J. C., 2000, Proceedings of the 2000 International Conference on Software Engineering. ICSE 2000 the New Millennium, P439, DOI 10.1109/ICSE.2000.870434
   Dam M, 1996, INFORM COMPUT, V129, P35, DOI 10.1006/inco.1996.0072
   de Boer Frank, 2012, Automated Reasoning. Proceedings 6th International Joint Conference, IJCAR 2012, P149, DOI 10.1007/978-3-642-31365-3_14
   Demartini C, 1999, SOFTWARE PRACT EXPER, V29, P577, DOI 10.1002/(SICI)1097-024X(199906)29:7<577::AID-SPE246>3.0.CO;2-V
   Distefano D, 2004, LECT NOTES COMPUT SC, V3328, P250
   Distefano D, 2006, LECT NOTES COMPUT SC, V3920, P287
   Esparza J, 2001, LECT NOTES COMPUT SC, V2102, P324
   Finkel A., 1997, Electronic Notes in Theoretical Computer Science, V9, DOI 10.1016/S1571-0661(05)80426-8
   Finkel A, 2009, LECT NOTES ARTIF INT, V5489, P56, DOI 10.1007/978-3-642-03092-5_6
   Havelund K., 2000, Int. J. Softw. Tools Technol. Transfer, V2, P366, DOI [DOI 10.1007/S100090050043, 10.1007/s100090050043]
   Kidd N., 2009, WPDS C LIB WEIGHTED
   Kozen D, 1997, ACM T PROGR LANG SYS, V19, P427, DOI 10.1145/256167.256195
   Labbe S., 2009, PRDC 10, P77, DOI DOI 10.1109/PRDC.2010.19
   Madhusudan P, 2011, ACM SIGPLAN NOTICES, V46, P611, DOI 10.1145/1925844.1926455
   Meseguer J, 2003, NATO SC S SS III C S, V191, P133
   Montanari U, 2005, THEOR COMPUT SCI, V340, P539, DOI 10.1016/j.tcs.2005.03.014
   Park DYW, 2000, FIFTEENTH IEEE INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING, PROCEEDINGS, P253, DOI 10.1109/ASE.2000.873671
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Rinetzky N, 2005, ACM SIGPLAN NOTICES, V40, P296, DOI 10.1145/1047659.1040330
   Rosu G, 2012, ACM SIGPLAN NOTICES, V47, P555, DOI 10.1145/2398857.2384656
   Rot J, 2012, ELECTRON P THEOR COM, P99, DOI 10.4204/EPTCS.104.9
   Rot J, 2013, LECT NOTES COMPUT SC, V8161, P1, DOI 10.1007/978-3-642-40213-5_1
   Schwoon S, 2002, PhD thesis
   Sen K., 2003, WORKSHOP RUNTIME VER, P162, DOI [10.1016/S1571-0661(04)81051-X, DOI 10.1016/S1571-0661(04)81051-X]
NR 35
TC 2
Z9 2
U1 0
U2 5
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR 15
PY 2015
VL 100
BP 61
EP 83
DI 10.1016/j.scico.2014.09.009
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CB6IS
UT WOS:000349731300004
DA 2024-07-18
ER

PT J
AU Van Cutsem, T
   Miller, MS
AF Van Cutsem, Tom
   Miller, Mark S.
TI Robust trait composition for Javascript
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Traits; ixins; Javascript; ECMAScript 5
AB We introduce traits. is, a small, portable trait composition library for Javascript. Traits are a more robust alternative to multiple inheritance and enable object composition and reuse. traits, is is motivated by two goals: first, it is an experiment in using and extending Javascript's recently added meta-level object description format. By reusing this standard description format, traits. j s can be made more interoperable with similar libraries, and even with built-in primitives. Second, traits. is makes it convenient to create "high-integrity" objects whose integrity cannot be violated by clients, an important property when web content is composed from mutually suspicious scripts. We describe the design of traits. j s and provide an operational semantics for TRAITS-JS, a minimal calculus that models the core functionality of the library. (C) 2012 Elsevier B.V.All rights reserved.
C1 [Van Cutsem, Tom] Vrije Univ Brussel, Software Languages Lab, Brussels, Belgium.
   [Miller, Mark S.] Google, Mountain View, CA USA.
C3 Vrije Universiteit Brussel; Google Incorporated
RP Van Cutsem, T (corresponding author), Vrije Univ Brussel, Software Languages Lab, Brussels, Belgium.
EM tvcutsem@vub.ac.be
FU FWO; Google
FX Tom Van Cutsem is a Postdoctoral Fellow of the Research Foundation,
   Flanders (FWO). Part of this work was carried out while the first author
   was on a Visiting Faculty appointment at Google, sponsored by Google and
   a travel grant from the FWO.
CR Bergel A., 2007, J COMPUTER LANGUAGES, V34, P83
   BRACHA G, 1990, SIGPLAN NOTICES, V25, P303, DOI 10.1145/97946.97982
   Crockford D., 2008, JAVASCRIPT GOOD PART
   Ducasse S, 2006, ACM T PROGR LANG SYS, V28, P331, DOI 10.1145/1119479.1119483
   ECMA International, 2009, ECMA262
   FELLEISEN M, 1992, THEOR COMPUT SCI, V103, P235, DOI 10.1016/0304-3975(92)90014-7
   FISHER K, 2003, TR200313 U CHIC DEP
   Flatt M., AAPLAS 06
   Guha A, 2010, LECT NOTES COMPUT SC, V6183, P126, DOI 10.1007/978-3-642-14107-2_7
   Liquori L, 2008, ACM T PROGR LANG SYS, V30, DOI 10.1145/1330017.1330022
   Maloney J. H., 1995, Eighth Annual Symposium on User Interface Software and Technology. UIST '95. Proceedings of the ACM Symposium on User Interface Software and Technology, P21, DOI 10.1145/215585.215636
   Reppy J., P EUR C OBJ OR PROGR
   Schäfer J, 2010, LECT NOTES COMPUT SC, V6183, P275, DOI 10.1007/978-3-642-14107-2_13
   Schärli N, 2003, LECT NOTES COMPUT SC, V2743, P248
   Smith C., P ECOOP 2005
   SNYDER A, 1986, SIGPLAN NOTICES, V21, P38, DOI 10.1145/960112.28702
   Van Cutsem T., 2011, P ACM INT WORKSH PRO, P1, DOI [10.1145/2093328.2093330, DOI 10.1145/2093328.2093330]
   Van Cutsem T, 2009, LECT NOTES COMPUT SC, V5653, P220, DOI 10.1007/978-3-642-03013-0_11
NR 18
TC 0
Z9 0
U1 0
U2 5
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 1
PY 2015
VL 98
SI SI
BP 422
EP 438
DI 10.1016/j.scico.2012.11.001
PN 3
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AY7LH
UT WOS:000347741200008
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Zaytsev, V
AF Zaytsev, Vadim
TI Grammar Zoo: A corpus of experimental grammarware
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Grammarware engineering; Grammar recovery; Experimental infrastructure;
   Curated corpus
ID TRANSFORMATIONS; DISCIPLINE; SYNTAX; DSL
AB In this paper we describe composition of a corpus of grammars in a broad sense in order to enable reuse of knowledge accumulated in the field of grammarware engineering. The Grammar Zoo displays the results of grammar hunting for big grammars of mainstream languages, as well as collecting grammars of smaller DSLs and extracting grammatical knowledge from other places. It is already operational and publicly supplies its users with grammars that have been recovered from different sources of grammar knowledge, varying from official language standards to community-created wiki pages.
   We summarise recent achievements in the discipline of grammarware engineering, that made the creation of such a corpus possible. We also describe in detail the technology that is used to build and extend such a corpus. The current contents of the Grammar Zoo are listed, as well as some possible future uses for them. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Zaytsev, Vadim] CWI, Software Anal & Transformat Team SWAT, Amsterdam, Netherlands.
   [Zaytsev, Vadim] Univ Amsterdam, NL-1012 WX Amsterdam, Netherlands.
C3 University of Amsterdam
RP Zaytsev, V (corresponding author), CWI, Software Anal & Transformat Team SWAT, Amsterdam, Netherlands.
EM vadim@grammarware.net
RI Zaytsev, Vadim/E-6712-2011
OI Zaytsev, Vadim/0000-0001-7764-4224
CR [Anonymous], 2007, The Definitive ANTLR Reference: Building Domain-Specific Languages
   [Anonymous], PART WORKSH PREPR 2
   [Anonymous], 149771996E ISOIEC
   Barendregt H., 1991, Journal of Functional Programming, V1, P125
   Basili VR, 1999, IEEE T SOFTWARE ENG, V25, P456, DOI 10.1109/32.799939
   Baxter ID, 2004, PROC INT CONF SOFTW, P625, DOI 10.1109/ICSE.2004.1317484
   Bezivin J., 2004, OOPSLA GPCE WORKSH B
   Bosworth R., 2006, SYNTAX SPECIFICATION
   Brandes, 2001, Graph Drawing - 9th International Symposium, GD 2001 Vienna Austria, P501
   Cabot J., 2003, ATLANTECORE METAMODE
   Cervelle Julien, 2009, Proceedings of the 2009 International Multiconference on Computer Science and Information Technology (IMCSIT), P651, DOI 10.1109/IMCSIT.2009.5352768
   Chomsky N., 1959, INFORM CONTR, V2, P137, DOI [10.1016/S0019-9958(59)90362-6, DOI 10.1016/S0019-9958(59)90362-6]
   Chomsky Noam, 2002, SYNTACTIC STRUCTURES
   Cicchetti Antonio, 2011, 2 INT WORKSH MOD COM, P16
   Clark J., ELAX NG SPECIFICATIO
   Copeland Tom., 2007, GENERATING PARSERS J
   Cordy J.R., 2003, TXL WORLD GRAMMARS
   Coste Francois, 1997, WORKSH GRAMM INF AUT, P9
   Crepinsek M, 2005, ACM SIGPLAN NOTICES, V40, P39, DOI 10.1145/1064165.1064172
   Czarnecki K, 2009, LECT NOTES COMPUT SC, V5563, P260, DOI 10.1007/978-3-642-02408-5_19
   Dean TR, 2002, SCAM 2002: SECOND IEEE INTERNATIONAL WORKSHOP ON SOURCE CODE ANALYSIS MANIPULATION, PROCEEDINGS, P93, DOI 10.1109/SCAM.2002.1134109
   Do HS, 2005, EMPIR SOFTW ENG, V10, P405, DOI 10.1007/s10664-005-3861-2
   *ECL, 2008, ECL MOD FRAM PROJ EM
   Erwig M., 2012, P 4 INT C SOFTW LANG, P243
   Favre Jean-Marie, 2012, Model Driven Engineering Languages and Systems. Proceedings 15th International Conference, MODELS 2012, P151, DOI 10.1007/978-3-642-33666-9_11
   Fischer Bernd, 2012, Software Language Engineering. 4th International Conference, SLE 2011. Revised Selected Papers, P324, DOI 10.1007/978-3-642-28830-2_18
   Fogus M., 2010, JOY CLOJURE MANNING
   Foster JN, 2007, ACM T PROGR LANG SYS, V29, DOI [10.1145/1232420.1232424, 10.1145/1047659.1040325]
   France RB, 2012, PROC INT CONF SOFTW, P1471, DOI 10.1109/ICSE.2012.6227059
   Gagnon EM, 1998, TOOLS 26 - TECHNOLOGY OF OBJECT-ORIENTED LANGUAGES - PROCEEDINGS, P140, DOI 10.1109/TOOLS.1998.711009
   Gao S., W3C XML SCHEMA DEF 1
   Gil J, 2005, ACM SIGPLAN NOTICES, V40, P97, DOI 10.1145/1103845.1094819
   Gosling J., 2005, Java Language Specification, Vthird
   Gosling J., 2000, The Java Language Specification
   Gosling James, 1996, The Java Language Specification
   Halstead M. H., 1977, ELEMENTS SOFTWARE SC
   HEERING J, 1989, SIGPLAN NOTICES, V24, P43, DOI 10.1145/71605.71607
   Heidenreich F, 2009, LECT NOTES COMPUT SC, V5562, P114, DOI 10.1007/978-3-642-02674-4_9
   Herrmannsdoerfer M, 2011, LECT NOTES COMPUT SC, V6563, P163, DOI 10.1007/978-3-642-19440-5_10
   Herrmannsdoerfer M, 2011, LECT NOTES COMPUT SC, V6563, P62, DOI 10.1007/978-3-642-19440-5_5
   Hoare C.A.R., 1973, HINTS PROGRAMMING LA
   Hutchinson J, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P471, DOI 10.1145/1985793.1985858
   I.B.M. Library, 1987, SX26 3721 05 VS COBO
   Johnson Stephen C., 1975, 32 AT T BELL LAB
   Johnstone A, 2010, INNOV SYST SOFTW ENG, V6, P145, DOI 10.1007/s11334-009-0111-6
   Jouault F., 2006, 5 INT C GEN PROGR CO, P249, DOI DOI 10.1145/1173706.1173744
   Jouault F, 2006, LECT NOTES COMPUT SC, V4037, P171
   Kelemenova A., 1981, P MATH FDN COMPUTER, P347
   Kleene S., 1956, AUTOMATA STUDIES, P3
   Klint P, 2005, ACM T SOFTW ENG METH, V14, P331, DOI 10.1145/1072997.1073000
   Klint P, 2011, LECT NOTES COMPUT SC, V6491, P222, DOI 10.1007/978-3-642-18023-1_6
   Klusener S., 2005, JTC1SC22 ISOIEC
   Kort J., 2002, ELECT NOTES THEOR CO, V3, P117
   Kort J., 2003, GRAMMAR DEPLOYMENT K
   Lämmel R, 2011, SOFTWARE QUAL J, V19, P333, DOI 10.1007/s11219-010-9116-5
   Lämmel R, 2009, LECT NOTES COMPUT SC, V5423, P246
   Lammel R., 2001, FME 2001: Formal Methods for Increasing Software Productivity. International Symposium on Formal Methods Europe. Proceedings (Lecture Notes in Computer Science Vol.2021), P550
   Lämmel R, 2001, SOFTWARE PRACT EXPER, V31, P1395, DOI 10.1002/spe.423
   Lämmel R, 2001, IEEE SOFTWARE, V18, P78, DOI 10.1109/52.965809
   Lammel R., 2001, ELECT NOTES THEOR CO, V2, P9
   Lammel R., 1999, BROWSABLE GRAMMARS
   Lämmel R, 2006, LECT NOTES COMPUT SC, V3964, P19
   Lammel Ralf, 2013, CEUR WORKSHOP P, P36
   Lämmel RL, 2005, ELECTRON NOTES THEOR, V137, P43, DOI 10.1016/j.entcs.2005.07.004
   Levine John., 2009, FLEX BISON
   Lungu M, 2014, SCI COMPUT PROGRAM, V79, P204, DOI 10.1016/j.scico.2012.04.007
   Manuel P.I., 1996, THESIS U AMSTERDAM N
   Mernik M, 2005, ACM COMPUT SURV, V37, P316, DOI 10.1145/1118890.1118892
   Microsoft Corporation, MICR COD NAM M MOD L
   Murata M., 2013, RELAX NG SCHEMAS
   NIERSTRASZ O, 2007, P C SOFTW MAINT REEN, P275
   Object Management Group, 2006, MET FAC MOF COR SPEC
   Okhotin A, 2004, INFORM COMPUT, V194, P19, DOI 10.1016/j.ic.2004.03.006
   Parr T., 2008, ANTLR V3 ANOTHER TOO
   Parr T., 2003, ANTLR GRAMMAR LIST
   Pereira FernandoC. N., 1986, Readings in natural language processing, P101
   Pickard LM, 1998, INFORM SOFTWARE TECH, V40, P811, DOI 10.1016/S0950-5849(98)00101-3
   Power JE, 2004, J SOFTW MAINT EVOL-R, V16, P405, DOI 10.1002/smr.293
   Purdom P., 1972, BIT (Nordisk Tidskrift for Informationsbehandling), V12, P366, DOI 10.1007/BF01932308
   Sellink A., 2000, Proceedings of the Fourth European Conference on Software Maintenance and Reengineering, P151, DOI 10.1109/CSMR.2000.827323
   Sellink A., 1999, Proceedings IEEE International Conference on Software Maintenance - 1999 (ICSM'99). `Software Maintenance for Business Change' (Cat. No.99CB36360), P245, DOI 10.1109/ICSM.1999.792622
   Sloane AM, 2013, SCI COMPUT PROGRAM, V78, P1752, DOI 10.1016/j.scico.2011.11.005
   Stevenson A, 2014, SCI COMPUT PROGRAM, V96, P444, DOI 10.1016/j.scico.2014.05.008
   Tempero E, 2010, ASIA PAC SOFWR ENG, P336, DOI 10.1109/APSEC.2010.46
   Tratt L, 2008, LECT NOTES COMPUT SC, V5235, P425, DOI 10.1007/978-3-540-88643-3_11
   van den Brand MGJ, 2002, LECT NOTES COMPUT SC, V2304, P143
   van der Graaf M., 1997, THESIS U AMSTERDAM N
   VanDenBrand M., 1997, P 2 INT C THEOR PRAC, P6, DOI [10.5555/2227706.2227712, DOI 10.5555/2227706.2227712]
   VANWIJNGAARDEN A, 1963, ANNUAL REVIEW AUTOMA, V3, P17
   Visser Eelco, 1997, Syntax Definition for Language Prototyping
   VOLTER M., 2013, DSL ENG DESIGNING IM
   Wachsmuth G, 2007, LECT NOTES COMPUT SC, V4609, P600
   WIRTH N, 1977, COMMUN ACM, V20, P822, DOI 10.1145/359863.359883
   Wirth Niklaus., 1974, IFIP Congress, P386
   Wohlin C., 2000, EXPT SOFTWARE ENG IN
   Zaytsev V., 2012, POSTPR 12 INT WORKSH
   Zaytsev V., 2014, J OBJECT TE IN PRESS
   Zaytsev V., 2008, SOFTWARE LANGUAGE PR
   Zaytsev V, 2012, PROGRAMMING LANGUAGE, P1910, DOI DOI 10.1145/2245276.2232090
   Zaytsev V., 2014, 9 WORKSH MOD EV ME 1
   Zaytsev V., 2014, ELECT COMMUN EASST, V65
   Zaytsev V., 2011, ARXIV11074661 CORR, P1
   Zaytsev V., 2012, ELECT COMMUN EASST, V49
   Zaytsev V. V., 2010, THESIS VRIJE U
   Zaytsev V, 2013, LECT NOTES COMPUT SC, V8225, P117, DOI 10.1007/978-3-319-02654-1_7
   Zaytsev V, 2011, LECT NOTES COMPUT SC, V6563, P206, DOI 10.1007/978-3-642-19440-5_13
   Zaytsev Vadim, 2012, POSTPR 6 INT WORKSH, P61
   Zaytsey V., 2012, ARXIV12124446 CORR, P1
   [No title captured]
NR 109
TC 3
Z9 4
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 1
PY 2015
VL 98
BP 28
EP 51
DI 10.1016/j.scico.2014.07.010
PN 1
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AY7LA
UT WOS:000347740500003
DA 2024-07-18
ER

PT J
AU Etemaadi, R
   Chaudron, MRV
AF Etemaadi, Ramin
   Chaudron, Michel R. V.
TI New degrees of freedom in metaheuristic optimization of component-based
   systems architecture: Architecture topology and load balancing
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Degree of Freedom (DoF); Software architecture design optimization;
   Software architecture topology; Evolutionary Multiobjective Optimization
   (EMO); Component-Based Software Engineering (CBSE)
ID ALGORITHM
AB Today's complex systems require software architects to address a large number of quality attributes. These quality attributes can be in contradiction with each other. In practice, software architects manually try to come up with a set of different architectural designs and then try to identify the most suitable one. This is a time-consuming and error-prone process. Also, this process may lead the architect to suboptimal designs. To tackle this problem, metaheuristic approaches for automating architecture design have been proposed by researchers.
   Metaheuristic approaches, such as genetic algorithms (GA), use degrees of freedom to automatically generate new alternative solutions. In this paper, we present two novel degrees of freedom for the optimization of system architectures. These two degrees of freedom: (i) the topology of the hardware platform, and (ii) load balancing of software components, can improve the results of the optimization algorithm. Our approach is implemented as part of the AQOSA (Automated Quality-driven Optimization of Software Architectures) framework. The AQOSA framework aids architects by automatically synthesizing optimal solutions by using multi-objective evolutionary algorithms and it reports the trade-offs between multiple quality properties as output. We analyze the effectiveness of our proposed degrees of freedom, by running a computationally-intensive optimization experiment using an industrial case study from automotive domain. The results show that two new degrees of freedom, (i) architecture topology and (ii) load balancing, help the evolutionary algorithm to find better solutions by enlarging the search space. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Etemaadi, Ramin; Chaudron, Michel R. V.] Leiden Univ, LIACS, NL-2333 CA Leiden, Netherlands.
   [Chaudron, Michel R. V.] Chalmers & Gothenburg Univ, Joint Dept Comp Sci & Engn, S-41756 Gothenburg, Sweden.
C3 Leiden University - Excl LUMC; Leiden University
RP Etemaadi, R (corresponding author), Leiden Univ, LIACS, Niels Bohrweg 1, NL-2333 CA Leiden, Netherlands.
EM etemaadi@liacs.nl; chaudron@chalmers.se
CR Aleti A, 2009, MOMPES: 2009 ICSE WORKSHOP ON MODEL-BASED METHODOLOGIES FOR PERVASIVE AND EMBEDDED SOFTWARE, P61, DOI 10.1109/MOMPES.2009.5069138
   Axelsson J, 2009, 2009 JOINT WORKING IEEE/IFIP CONFERENCE ON SOFTWARE ARCHITECTURE AND EUROPEAN CONFERENCE ON SOFTWARE ARCHITECTURE, P101, DOI 10.1109/WICSA.2009.5290796
   Barbacci M., 1995, CMUSEI95TR021
   Becker S, 2009, J SYST SOFTWARE, V82, P3, DOI 10.1016/j.jss.2008.03.066
   Blum C, 2003, ACM COMPUT SURV, V35, P268, DOI 10.1145/937503.937505
   Deb K, 2002, IEEE T EVOLUT COMPUT, V6, P182, DOI 10.1109/4235.996017
   Eclipse open source community and Eclipse Foundation, 2013, ECLIPSE MODELING FRA
   Emmerich M, 2005, LECT NOTES COMPUT SC, V3410, P62
   Etemaadi R., 2013, 201301 LEID U LEID I
   Etemaadi R, 2013, J SYST SOFTWARE, V86, P2559, DOI 10.1016/j.jss.2013.05.109
   Etemaadi R, 2012, EUROMICRO CONF PROC, P63, DOI 10.1109/SEAA.2012.38
   Feiler P.H., 2006, The Architecture Analysis Design Language (AADL): An Introduction
   Forster Marc, 2010, Proceedings of the 2010 IEEE 21st International Symposium on Software Reliability Engineering (ISSRE 2010), P51, DOI 10.1109/ISSRE.2010.47
   Gonzalez-Huerta J., 2011, THESIS UPV SPAIN
   Hegedus Abel, 2011, 2011 26th IEEE/ACM International Conference on Automated Software Engineering, P173, DOI 10.1109/ASE.2011.6100051
   Hudak J.J., 2007, CMUSEI20047TR014
   Latif-Shabgahi G, 2003, MICROPROCESS MICROSY, V27, P303, DOI 10.1016/S0141-9331(03)00040-1
   Li R, 2011, IEEE C EVOL COMPUTAT, P432
   Lukasiewycz M, 2011, GECCO-2011: PROCEEDINGS OF THE 13TH ANNUAL GENETIC AND EVOLUTIONARY COMPUTATION CONFERENCE, P1723
   Martens A., 2010, P 1 JOINT WOSP SIPEW, P105, DOI [DOI 10.1145/1712605.1712624, 10.1145]
   Meedeniya I, 2010, LECT NOTES COMPUT SC, V6093, P52, DOI 10.1007/978-3-642-13821-8_6
   Wandeler E., 2006, International Journal on Software Tools for Technology Transfer, V8, P649, DOI 10.1007/s10009-006-0019-5
   Ykman-Couvreur C, 2011, IET COMPUT DIGIT TEC, V5, P123, DOI 10.1049/iet-cdt.2010.0030
   Younis A, 2010, ENG OPTIMIZ, V42, P691, DOI 10.1080/03052150903386674
   Zitzler E., 2002, TECHNICAL REPORT
NR 25
TC 5
Z9 7
U1 0
U2 11
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 1
PY 2015
VL 97
BP 366
EP 380
DI 10.1016/j.scico.2014.06.012
PN 3
PG 15
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AW8YN
UT WOS:000346545300008
OA Bronze
DA 2024-07-18
ER

PT J
AU Tang, XL
   Järvi, J
AF Tang, Xiaolong
   Jaervi, Jaakko
TI Axioms as generic rewrite rules in C plus plus with concepts
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE C plus; Concepts; Rewriting; High-level optimizations
ID COMPILER; C++
AB Compilers are typically hardwired to attempt many optimizations only on expressions that involve particular built-in types. Ideally, however, an optimizing compiler would recognize a rewrite opportunity for user-defined types as well, whenever the operands of an expression satisfy the algebraic properties that justify the rewrite. This paper applies the principles and techniques of generic programming and the "concepts" language feature, that was proposed to C++, to approximate this ideal. Concretely, a concept defines the signature and algebraic laws of a class of types. We attach rewrite rules to a concept, and by doing this make them applicable to the entire class of types that the concept defines. The annotation burden to a programmer is small-we take the-existing-declarations that a type models a particular concept as the annotation that enables generic rewrites. To apply generic rewrite rules, we instantiate them to type-specific rules. We use data flow information from the compiler's existing analyses to determine when these rules can be applied, and show how to interleave their application with function inlining to find more rewrite opportunities. Our prototype is implemented as an extension of the ConceptGCC compiler; our experiments show the approach is effective in eliminating abstraction penalties. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Tang, Xiaolong; Jaervi, Jaakko] Texas A&M Univ, College Stn, TX 77843 USA.
C3 Texas A&M University System; Texas A&M University College Station
RP Tang, XL (corresponding author), Texas A&M Univ, College Stn, TX 77843 USA.
EM x.long@infobeyonds.com; jarvi@cse.tamu.edu
CR Bagge O.S., 2003, ELECT NOTES THEOR CO, V86
   Boyle J.M., 1996, P DURH TRANSF WORKSH
   CHIBA S, 1995, SIGPLAN NOTICES, V30, P285, DOI 10.1145/217839.217868
   Cox Chris., 2009, C++ performance benchmarks
   Dehnert JamesC., 1998, Generic Programming, volume 1766 of Lecture Notes in Computer Science, V1766, P1
   EDELSOHN DJ, 1994, PROCEEDINGS OF THE SCALABLE HIGH-PERFORMANCE COMPUTING CONFERENCE, P381, DOI 10.1109/SHPCC.1994.296668
   Falconer H, 2007, LECT NOTES COMPUT SC, V4420, P218
   Gottschling P., 2008, N260080160 INF TECHN
   Gregor D., 2008, N2773080823 INF TECH
   Gregor D., 2008, N2621080131
   Gregor D, 2006, ACM SIGPLAN NOTICES, V41, P291, DOI 10.1145/1167515.1167499
   Gregor Douglas., 2009, ConceptGCC: Concept extensions for C++
   Guyer SZ, 2005, P IEEE, V93, P342, DOI 10.1109/JPROC.2004.840489
   Lerner S, 2003, ACM SIGPLAN NOTICES, V38, P220, DOI 10.1145/780822.781156
   Merrill Jason., 2003, Proceedings of the GCC Developers Summit May 25-27, 2003, Ottawa, Ontario Canada, P171
   Olmos K, 2005, LECT NOTES COMPUT SC, V3443, P204, DOI 10.1007/978-3-540-31985-6_14
   Peyton-Jones S., 2001, PLAYING RULES REWRIT
   Plauger P.J., 1997, C C USERS J, V15, P8
   Quinlan D., 2000, Parallel Processing Letters, V10, P215, DOI 10.1016/S0129-6264(00)00021-4
   Robison A.D., 2001, JAVA GRANDE, P1
   Ryder BG, 2001, ACM T PROGR LANG SYS, V23, P105, DOI 10.1145/383043.381532
   Schupp S, 2001, FIRST IEEE INTERNATIONAL WORKSHOP ON SOURCE CODE ANALYSIS AND MANIPULATION, PROCEEDINGS, P109, DOI 10.1109/SCAM.2001.972672
   Tang X., 2007, P 2007 S LIB CENTR S, P97
   Veldhuizen T. L., 1998, P SIAM WORKSH OBJ OR
   Visser Eelco., 2001, REWRITING TECHNIQUES, V2051, P357, DOI DOI 10.1007/3-540-45127-7_27.URL
   Williams JL, 2009, PROCEEDINGS OF THE 4TH FRONTIERS IN BIOMEDICAL DEVICES CONFERENCE AND EXPOSITION - 2009, P5, DOI 10.1145/1621607.1621611
NR 26
TC 0
Z9 0
U1 1
U2 2
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 1
PY 2015
VL 97
BP 320
EP 330
DI 10.1016/j.scico.2014.05.006
PN 3
PG 11
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AW8YN
UT WOS:000346545300004
OA Bronze
DA 2024-07-18
ER

PT J
AU Pham, TT
   Défago, X
   Huynh, QT
AF Thanh-Trung Pham
   Defago, Xavier
   Quyet-Thang Huynh
TI Reliability prediction for component-based software systems: Dealing
   with concurrent and propagating errors
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Reliability modeling and prediction; Component-based software systems;
   Error propagation; Software fault tolerance mechanisms; Concurrently
   present errors
AB One of the most important quality attributes of a software system beyond its functional attributes is its reliability. Techniques for predicting reliability of a software system based on the design models can help software architects in evaluating the impact of their design decisions on the system reliability. This can help to make the system more reliable and avoid costs for fixing the implementation. However, existing reliability prediction approaches for component-based software systems are limited in their applicability because they either neglect or do not support modeling explicitly several factors which influence the system reliability: (i) error propagation, (ii) software fault tolerance mechanisms, and (iii) concurrently present errors. In this paper, we present a reliability modeling and prediction approach for component-based software systems that considers explicitly these reliability-relevant factors. Our approach offers a reliability modeling schema whose models are automatically transformed by our reliability prediction tool into Markov models for reliability predictions and sensitivity anajyses. We evaluate our approach in two case studies with reliability predictions and sensitivity analyses. Via these two case studies, we demonstrate its applicability in supporting design decisions. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Thanh-Trung Pham; Defago, Xavier] Japan Adv Inst Sci & Technol JAIST, Sch Informat Sci, Nomi, Ishikawa, Japan.
   [Quyet-Thang Huynh] Hanoi Univ Sci & Technol, Sch Informat & Commun Technol, Hanoi, Vietnam.
C3 Japan Advanced Institute of Science & Technology (JAIST); Hanoi
   University of Science & Technology (HUST)
RP Pham, TT (corresponding author), Japan Adv Inst Sci & Technol JAIST, Sch Informat Sci, Nomi, Ishikawa, Japan.
EM thanhtrung.pham@jaist.ac.jp; defago@jaist.ac.jp;
   thanghq@soict.hut.edu.vn
RI Défago, Xavier/P-5295-2015; Thang, Huynh Quyet/U-1826-2019
OI Défago, Xavier/0000-0002-2377-205X; Thang, Huynh
   Quyet/0000-0002-0788-6380
FU 322 FIVE-JAIST (Vietnam-Japan) program; JSPS KAKENHI Grant [23500060];
   Grants-in-Aid for Scientific Research [23500060] Funding Source: KAKEN
FX This work was supported by 322 FIVE-JAIST (Vietnam-Japan) program and
   JSPS KAKENHI Grant Number 23500060. We are grateful to Francois Bonnet
   for his invaluable comments that greatly helped improve this manuscript.
CR Abdelmoez W, 2004, 10TH INTERNATIONAL SYMPOSIUM ON SOFTWARE METRICS, PROCEEDINGS, P384, DOI 10.1109/METRIC.2004.1357923
   [Anonymous], 1996, HDB SOFTWARE RELIABI
   [Anonymous], 2008, OMG UN MOD LANG OMG
   Avizienis A, 2004, IEEE T DEPEND SECURE, V1, P11, DOI 10.1109/TDSC.2004.2
   Bernardi S, 2011, SOFTW SYST MODEL, V10, P313, DOI 10.1007/s10270-009-0128-1
   Brosch F, 2012, IEEE T SOFTWARE ENG, V38, P1319, DOI 10.1109/TSE.2011.94
   Cheung L, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P111, DOI 10.1145/1368088.1368104
   CHEUNG RC, 1980, IEEE T SOFTWARE ENG, V6, P118, DOI 10.1109/TSE.1980.234477
   Cortellessa V., 2002, P 3 INT WORKSHOP SOF, P302
   Cortellessa V, 2007, LECT NOTES COMPUT SC, V4608, P140
   Dugan J., 1995, SOFTWARE FAULT TOLER, P109
   Filieri A, 2010, LECT NOTES COMPUT SC, V6092, P1, DOI 10.1007/978-3-642-13238-4_1
   Galster Matthias., 2011, P JOINT ACM SIGSOFT
   Gokhale SS, 1997, PACIFIC RIM INTERNATIONAL SYMPOSIUM ON FAULT-TOLERANT SYSTEMS, PROCEEDINGS, P167, DOI 10.1109/PRFTS.1997.640143
   Gokhale SS, 2007, IEEE T DEPEND SECURE, V4, P32, DOI 10.1109/TDSC.2007.4
   Goseva-Popstojanova K, 2003, IEEE T SOFTWARE ENG, V29, P946, DOI 10.1109/TSE.2003.1237174
   Goseva-Popstojanova K, 2003, COMPUT MATH APPL, V46, P1023, DOI [10.1016/S0898-1221(03)90116-7, 10.1016/S0898-1221(03)00307-9]
   Grassi V, 2005, LECT NOTES COMPUT SC, V3549, P279
   Hamill M, 2009, IEEE T SOFTWARE ENG, V35, P484, DOI 10.1109/TSE.2009.3
   Hiller M, 2004, IEEE T COMPUT, V53, P512, DOI 10.1109/TC.2004.1275294
   Immonen A, 2008, SOFTW SYST MODEL, V7, P49, DOI 10.1007/s10270-006-0040-x
   KANOUN K, 1993, IEEE T RELIAB, V42, P205, DOI 10.1109/24.229488
   Lipton MW, 2008, SPRINGER SER RELIAB, P309, DOI 10.1007/978-1-84800-113-8_15
   Mohamed A, 2008, INT CONF QUAL SOFTW, P402, DOI 10.1109/QSIC.2008.46
   Popic P, 2005, 16th IEEE International Symposium on Software Reliability Engineering, Proceedings, P53, DOI 10.1109/ISSRE.2005.18
   Pullum L.L., 2001, ART H COMP SCI LIBR
   Reussner RH, 2003, J SYST SOFTWARE, V66, P241, DOI 10.1016/S0164-1212(02)00080-8
   Reussner RH, 2003, FUTURE GENER COMP SY, V19, P627, DOI 10.1016/S0167-739X(02)00173-5
   Rodrigues G, 2005, LECT NOTES COMPUT SC, V3442, P111, DOI 10.1007/978-3-540-31984-9_9
   Sato N, 2007, P IEEE I C SERV COMP, P114
   Sharma VS, 2006, ISSRE 2006:17TH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P299
   Sharma VS, 2007, J SYST SOFTWARE, V80, P493, DOI 10.1016/j.jss.2006.07.021
   Thanh-Trung Pham, 2013, 2013 International Conference on Availability, Reliability and Security (ARES), P11, DOI 10.1109/ARES.2013.8
   Pham TT, 2012, INT CONF QUAL SOFTW, P106, DOI 10.1109/QSIC.2012.20
   Trivedi K.S., 2001, Probability and statistics with reliability, queueing, and computer science applications, V2nd
   Wang WL, 2006, J SYST SOFTWARE, V79, P132, DOI 10.1016/j.jss.2005.09.004
   Whittaker J. A., 1993, ACM Transactions on Software Engineering and Methodology, V2, P93, DOI 10.1145/151299.151326
   Yacoub S, 2004, IEEE T RELIAB, V53, P465, DOI 10.1109/TR.2004.838034
   Zheng Zibin., 2010, P 32 ACMIEEE INT C S, V1, P35, DOI DOI 10.1145/1806799.1806809
   2014, RELIABILITY MODELING
NR 40
TC 14
Z9 15
U1 0
U2 20
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 1
PY 2015
VL 97
SI SI
BP 426
EP 457
DI 10.1016/j.scico.2014.03.016
PN 4
PG 32
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AW8YO
UT WOS:000346545400004
OA Bronze
DA 2024-07-18
ER

PT J
AU Van Ryseghem, B
   Ducasse, S
   Fabry, J
AF Van Ryseghem, Benjamin
   Ducasse, Stephane
   Fabry, Johan
TI Seamless composition and reuse of customizable user interfaces with Spec
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Smalltalk; Ui; UlBuilder; Widgets; MVC
AB Implementing UIs is often a tedious task. To address this, UI Builders have been proposed to support the description of widgets, their location, and their logic. A missing aspect of UI Builders is however the ability to reuse and compose widget logic. In our experience, this leads to a significant amount of duplication in UI code. To address this issue, we built Spec: a UlBuilder for Pharo with a focus on reuse. With Spec, widget properties are defined declaratively and attached to specific classes known as composable classes. A composable class defines its own widget description as well as the model-widget bridge and widget interaction logic. This paper presents Spec, showing how it enables seamless reuse of widgets and how these can be customized. After presenting Spec and its implementation, we discuss how its use in Pharo 2.0 has cut in half the amount of lines of code of six of its tools, mostly through reuse. This shows that Spec meets its goals of allowing reuse and composition of widget logic. (C) 2013 Elsevier B.V. All rights
C1 [Van Ryseghem, Benjamin; Ducasse, Stephane] Inria Lille Nord Europe, RMoD, Lille, France.
   [Fabry, Johan] Univ Chile, Comp Sci Dept DCC, PLEIAD Lab, Santiago, Chile.
C3 Universidad de Chile
RP Van Ryseghem, B (corresponding author), Inria Lille Nord Europe, RMoD, Lille, France.
EM benjamin.vanryseghem@gmail.com; stephane.ducasse@inria.fr;
   jfabry@dcc.uchile.cl
OI Ducasse, Stephane/0000-0001-6070-6599; Fabry, Johan/0000-0002-7533-9354
CR Alles M, 2006, AGILE 2006, Proceedings, P276, DOI 10.1109/AGILE.2006.43
   Alpert ShermanR., 1998, DESIGN PATTERNS SMAL
   Bunge P., 2009, THESIS FAKULTAT U BE
   de Groot R., 2005, THESIS UTRECHT U
   Eclipse Technology, 2011, WIND US GUID TECH RE
   Greer D., Interactive Application Architecture Patterns
   HOWARD TG, 1995, SMALLTALK DEV GUIDE
   KRASNER GE, 1988, J OBJECT-ORIENT PROG, V1, P41
   Parcplace systems, 1989, OBJ REF GUID SMALLT
   Potel M., 1996, MVP MODEL VIEW PRESE
   Reenskaug T., 1979, MODELS VIEWS CONTROL
   Reenskaug Trygve., 2003, MODEL VIEW CONTROLLE
   Tomek I., 2000, JOY SMALLTALK
   Van Ryseghem B., 2012, P INT WORKSH SMALLT
   Van Ryseghem B., 2012, SPEC TECHN REP TECH
NR 15
TC 3
Z9 3
U1 0
U2 12
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 15
PY 2014
VL 96
SI SI
BP 34
EP 51
DI 10.1016/j.scico.2013.11.035
PN 1
PG 18
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AT8JX
UT WOS:000345180800004
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Book, M
   Buss, M
   Gruhn, V
AF Book, Matthias
   Buss, Marco
   Gruhn, Volker
TI Process-aware continuation management in web applications
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Web engineering; Navigation; Continuations
AB Web applications are subject to an interaction challenge not found in other user interfaces: In addition to the widgets that web pages are built of, browsers provide further navigation features such as the Back and Forward buttons that are beyond the developer's control. Continuations have been suggested as a means to cope with the arbitrary navigation patterns that users may perform using these features. While an elegant solution in theory, continuations can incur a significant memory load in practice, and may offer more navigation options than business requirements mandate. We therefore propose a dialog control logic that augments the continuation approach with strategies for automatic elimination of continuations that will likely not be needed anymore, or whose invocation shall be prevented due to business requirements. This way, we aim to realize the benefits that continuations can provide to web applications, while ameliorating the drawbacks that they exhibit in practice. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Book, Matthias; Gruhn, Volker] Univ Duisburg Essen, Paluno Ruhr Inst Software Technol, D-45127 Essen, Germany.
   [Buss, Marco] OPITZ CONSULTING Deutschland GmbH, D-12437 Berlin, Germany.
C3 University of Duisburg Essen
RP Book, M (corresponding author), Univ Duisburg Essen, Paluno Ruhr Inst Software Technol, Gerlingstr 16, D-45127 Essen, Germany.
EM matthias.book@paluno.uni-due.de; marco.buss@opitz-consulting.com;
   volker.gruhn@paluno.uni-due.de
RI Book, Matthias/Z-6218-2019
OI Book, Matthias/0000-0003-2472-5201
CR [Anonymous], ACM INTERACTIONS
   BARESI L, 2002, P 14 INT C SOFTW ENG, P585
   Book M, 2004, 19TH INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING, PROCEEDINGS, P100, DOI 10.1109/ASE.2004.1342728
   Book M., 2006, P 6 INT C WEB ENG IC, P209
   Book M., 2009, THESIS U LEIPZIG GER
   Book M, 2007, INFORM SYST FRONT, V9, P137, DOI 10.1007/s10796-007-9028-5
   Book M, 2009, J WEB ENG, V8, P48
   CATLEDGE LD, 1995, COMPUT NETWORKS ISDN, V27, P1065, DOI 10.1016/0169-7552(95)00043-7
   Ducasse S., P 12 INT SMALLT C IS, P231
   Herder Eelco., 2005, LWA, P32
   Hughes J, 2000, SCI COMPUT PROGRAM, V37, P67, DOI 10.1016/S0167-6423(99)00023-4
   Licata DR, 2004, 19TH INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING, PROCEEDINGS, P164, DOI 10.1109/ASE.2004.1342734
   Queinnec C, 2000, ACM SIGPLAN NOTICES, V35, P23, DOI 10.1145/357766.351243
NR 13
TC 0
Z9 0
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 15
PY 2014
VL 94
SI SI
BP 3
EP 17
DI 10.1016/j.scico.2013.07.015
PN 1
PG 15
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AS1JU
UT WOS:000344038400002
OA hybrid
DA 2024-07-18
ER

PT J
AU Su, W
   Abrial, JR
   Zhu, HB
AF Su, Wen
   Abrial, Jean-Raymond
   Zhu, Huibiao
TI Formalizing hybrid systems with Event-B and the Rodin Platform
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Event-B; Hybrid systems; Simulink stateflow; Action Systems
ID INVARIANTS
AB This paper contains the development of hybrid systems with Event-B and the Rodin Platform. It follows the seminal approach introduced at the turn of the century in Action Systems. Many examples that have been entirely proved with the Rodin Platform illustrate our approach. We propose to complement the Event-B/Rodin Platform approach with the usage of Matlab, either to simulate examples with some correct as well as incorrect set of parameters, or to use the analytical power of Matlab to complement the usage of Event-B. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Su, Wen] Shanghai Univ, Sch Comp Engn & Sci, Shanghai, Peoples R China.
   [Zhu, Huibiao] E China Normal Univ, Shanghai Key Lab Trustworthy Comp, Shanghai 200062, Peoples R China.
C3 Shanghai University; East China Normal University
RP Zhu, HB (corresponding author), E China Normal Univ, Shanghai Key Lab Trustworthy Comp, Shanghai 200062, Peoples R China.
EM wsu@shu.edu.cn; jrabrial@neuf.fr; hbzhu@sei.ecnu.edu.cn
FU Open Project of Shanghai Key Laboratory of Trustworthy Computing
   [07dz22304201303]; Danish National Research Foundation; National Natural
   Science Foundation of China [61361136002, 61321064]; National High
   Technology Research and Development Program of China [2012AA011205];
   Shanghai STCSM Project [12511504205]; Shanghai Knowledge Service
   Platform Project [ZF1213]; Shanghai Minhang Talent Project
FX Wen Su was supported in part by the Open Project of Shanghai Key
   Laboratory of Trustworthy Computing (No. 07dz22304201303). Huibiao Zhu
   was partly supported by the Danish National Research Foundation and the
   National Natural Science Foundation of China (Grant No. 61361136002) for
   the Danish Chinese Center for Cyber Physical Systems. And, also he was
   supported by National High Technology Research and Development Program
   of China (No. 2012AA011205), National Natural Science Foundation of
   China (No. 61321064), Shanghai STCSM Project (No. 12511504205), Shanghai
   Knowledge Service Platform Project (No. ZF1213) and Shanghai Minhang
   Talent Project.
CR ABADI M, 1992, LECT NOTES COMPUT SC, V600, P1, DOI 10.1007/BFb0031985
   Abrial J.-R., 1996, B BOOK ASSIGNING PRO
   Abrial J R, 2010, Modeling in Event-B: system and softeng
   Alur R, 2005, LECT NOTES COMPUT SC, V3414, P70
   Alur R., 2011, 2011 International Conference on Embedded Software (EMSOFT 2011), P273
   ALUR R, 1995, THEOR COMPUT SCI, V138, P3, DOI 10.1016/0304-3975(94)00202-T
   [Anonymous], 2010, LOGICAL ANAL HYBRID
   Back RJ, 2002, APSEC 2002: NINTH ASIA PACIFIC SOFTWARE ENGINEERING CONFERENCE, P147, DOI 10.1109/APSEC.2002.1182984
   Back RJ, 2000, LECT NOTES COMPUT SC, V1926, P202
   BACK RJR, 1988, ACM T PROGR LANG SYS, V10, P513, DOI 10.1145/48022.48023
   Butler Michael, 2013, Theories of Programming and Formal Methods. Essays Dedicated to Jifeng He on the Occasion of His 70th Birthday. LNCS 8051, P67, DOI 10.1007/978-3-642-39698-4_5
   Cellier F. E., 2006, Continuous System Simulation
   Chaochen Z., 1995, International Hybrid Systems Workshop, P511
   CORBETT JC, 1994, REAL TIM SYST SYMP P, P132, DOI 10.1109/REAL.1994.342723
   Goebel R, 2009, IEEE CONTR SYST MAG, V29, P28, DOI 10.1109/MCS.2008.931718
   Goodwin GC, 2001, CONTROL SYSTEM DESIGN, pXXIII
   Henzinger TA, 1996, IEEE S LOG, P278, DOI 10.1109/LICS.1996.561342
   Jiang Liu, 2011, 2011 International Conference on Embedded Software (EMSOFT 2011), P97
   Jifeng H., 1994, CLASSICAL MIND ESSAY, P171
   Lamport Leslie, 1992, PROC INT HYBRID SYST, V736, P77, DOI [10.1007/3-540-57318-6_25, DOI 10.1007/3-540-57318-625]
   Maler O, 2008, LECT NOTES COMPUT SC, V4800, P475, DOI 10.1007/978-3-540-78127-1_26
   Platzer A, 2009, LECT NOTES COMPUT SC, V5850, P547, DOI 10.1007/978-3-642-05089-3_35
   Pnueli A., 1994, Formal Techniques in Real-Time and Fault-Tolerant Systems. Third International Symposium Proceedings. ProCoS, P77
   Prajna S, 2006, AUTOMATICA, V42, P117, DOI 10.1016/j.automatica.2005.08.007
   Ratschan S, 2007, ACM T EMBED COMPUT S, V6, DOI 10.1145/1210268.1210276
   Rodríguez-Carbonell E, 2005, LECT NOTES COMPUT SC, V3414, P590
   Rönkkö M, 2003, THEOR COMPUT SCI, V290, P937, DOI 10.1016/S0304-3975(02)00547-9
   Rounds WC, 2004, LECT NOTES COMPUT SC, V2993, P508
   Sankaranarayanan S, 2004, LECT NOTES COMPUT SC, V2993, P539
   Su W., 2012, ICFEM, P230
   Su W, 2011, LECT NOTES COMPUT SC, V6991, P437, DOI 10.1007/978-3-642-24559-6_30
NR 31
TC 31
Z9 31
U1 0
U2 12
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 15
PY 2014
VL 94
SI SI
BP 164
EP 202
DI 10.1016/j.scico.2014.04.015
PN 2
PG 39
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AS1JW
UT WOS:000344038500007
DA 2024-07-18
ER

PT J
AU Cachera, D
   Jensen, T
   Jobin, A
   Kirchner, F
AF Cachera, David
   Jensen, Thomas
   Jobin, Arnaud
   Kirchner, Florent
TI Inference of polynomial invariants for imperative programs: A farewell
   to Grobner bases
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Polynomial invariants; Static analysis; Abstract interpretation
ID GENERATION
AB The article presents a static analysis for computing polynomial invariants for imperative programs. The analysis is derived from an abstract interpretation of a backwards semantics, and computes preconditions for equalities of the form g = 0 to hold at the end of execution. A distinguishing feature of the technique is that it computes polynomial loop invariants without resorting to Grobner base computations. The analysis uses remainder computations over parameterized polynomials in order to handle conditionals and loops efficiently. The algorithm can analyze and find a large majority of loop invariants reported previously in the literature, and executes significantly faster than implementations using Grobner bases. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Cachera, David; Jobin, Arnaud] ENS Cachan, Antenne Bretagne, Bruz, France.
   [Cachera, David; Jensen, Thomas; Jobin, Arnaud] IRISA, Rennes, France.
   [Jensen, Thomas] Inria Rennes, Bretagne Atlantique, Rennes, France.
   [Kirchner, Florent] CEA, LIST, Gif Sur Yvette, France.
C3 Universite Paris Saclay; Universite de Rennes; Universite Paris Saclay;
   CEA
RP Cachera, D (corresponding author), ENS Cachan, Antenne Bretagne, Bruz, France.
EM david.cachera@irisa.fr; thomas.jensen@irisa.fr; arnaud.jobin@irisa.fr;
   florent.kirchner@cea.fr
FU ANR Decert [ANR-08-EMER-0005]; Region Bretagne CertLogs projects; Agence
   Nationale de la Recherche (ANR) [ANR-08-EMER-0005] Funding Source:
   Agence Nationale de la Recherche (ANR)
FX This work was partly supported by the ANR Decert (ANR Decert number:
   ANR-08-EMER-0005) and the Region Bretagne CertLogs projects.
CR [Anonymous], 1974, Mathematical Theory of Computation
   [Anonymous], 2000, LNCS, V2297, P89
   Besson F, 2010, LECT NOTES COMPUT SC, V6084, P253, DOI 10.1007/978-3-642-15640-3_17
   Cachera D, 2012, LECT NOTES COMPUT SC, V7460, P58, DOI 10.1007/978-3-642-33125-1_7
   Cachera David, 2011, RR7627 INRIA
   Colón MA, 2003, LECT NOTES COMPUT SC, V2725, P420
   Colón MA, 2007, SCI COMPUT PROGRAM, V64, P76, DOI 10.1016/j.scico.2006.03.004
   COUSOT P, 1992, LNCS, V631, P269
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Cousot Patrick, 1978, P 5 ACM SIGACT SIGPL, p84S96, DOI DOI 10.1145/512760.512770
   Cox D., 2007, IDEALS VARIETIES ALG, DOI DOI 10.1007/978-0-387-35651-8
   Delzanno G, 2003, FORM METHOD SYST DES, V23, P257, DOI 10.1023/A:1026276129010
   Dijkstra E. W., 1976, A Discipline of Pro-gramming
   KARR M, 1976, ACTA INFORM, V6, P133, DOI 10.1007/BF00268497
   Kovacs Laura, 2009, LNCS, V5947
   MAYR E, 1989, LECT NOTES COMPUT SC, V349, P400
   Müller-Olm M, 2006, LECT NOTES COMPUT SC, V3884, P50
   Müller-Olm M, 2004, INFORM PROCESS LETT, V91, P233, DOI 10.1016/j.ipl.2004.05.004
   MULLEROLM M, 2002, SAS, V2477, P4
   Petter M, 2004, THESIS TU MUNCHEN
   Petter Michael, 2005, INFERRING POLYNOMIAL
   Rebiha R, 2008, LECT NOTES COMPUT SC, V5160, P425, DOI 10.1007/978-3-540-85762-4_29
   Rodríguez-Carbonell E, 2007, SCI COMPUT PROGRAM, V64, P54, DOI 10.1016/j.scico.2006.03.003
   Rodríguez-Carbonell E, 2007, J SYMB COMPUT, V42, P443, DOI 10.1016/j.jsc.2007.01.002
   Rodriguez-Carbonell E., SOME PROGRAMS NEED P
   Sankaranarayanan S, 2004, ACM SIGPLAN NOTICES, V39, P318, DOI 10.1145/982962.964028
NR 26
TC 12
Z9 13
U1 0
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 1
PY 2014
VL 93
SI SI
BP 89
EP 109
DI 10.1016/j.scico.2014.02.028
PN B
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CC8KR
UT WOS:000350618100002
OA Bronze
DA 2024-07-18
ER

PT J
AU Reynisson, AH
   Sirjani, M
   Aceto, L
   Cimini, M
   Jafari, A
   Ingolfsdottir, A
   Sigurdarson, SH
AF Reynisson, Arni Hermann
   Sirjani, Marjan
   Aceto, Luca
   Cimini, Matteo
   Jafari, Ali
   Ingolfsdottir, Anna
   Sigurdarson, Steinar Hugi
TI Modelling and simulation of asynchronous real-time systems using Timed
   Rebeca
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 10th International Workshop on the Foundation of Coordination Languages
   and Software Architectures (FOCLASA)
CT 10th International Workshop on the Foundation of Coordination Languages
   and Software Architectures (FOCLASA)
CY SEP 10-10, 2011
CY SEP 10-10, 2011
CL Aachen, GERMANY
CL Aachen, GERMANY
DE Concurrent system; Timing constraints; Distributed systems; Actor
   modelling; Analysis
ID SPECIFICATION; VERIFICATION
AB In this paper we propose Timed Rebeca as an extension of the Rebeca language that can be used to model distributed and asynchronous systems with timing constraints. Timed Rebeca restricts the modeller to a pure asynchronous actor-based paradigm, where the structure of the model represents the service oriented architecture, while the computational model matches the network infrastructure. The modeller can specify both computational and network delay, and assign deadlines for serving a request. We provide the formal semantics of the language using Structural Operational Semantics, and show its expressiveness by means of examples. We developed a tool for automated translation from Timed Rebeca to the Erlang language, which provides a first implementation of Timed Rebeca. We can use the tool to set the parameters of Timed Rebeca models, which represent the environment and component variables, and use McErlang to run multiple simulations for different settings. The results of the simulations can then be employed to select the most appropriate values for the parameters in the model. Simulation is shown to be an effective analysis support, specially where model checking faces almost immediate state explosion in an asynchronous setting. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Reynisson, Arni Hermann; Sirjani, Marjan; Aceto, Luca; Cimini, Matteo; Jafari, Ali; Ingolfsdottir, Anna; Sigurdarson, Steinar Hugi] Reykjavik Univ, Sch Comp Sci, Reykjavik, Iceland.
C3 Reykjavik University
RP Sirjani, M (corresponding author), Reykjavik Univ, Sch Comp Sci, Reykjavik, Iceland.
FU New Developments in Operational Semantics of the Icelandic Research Fund
   [080039021]; Meta-theory of Algebraic Process Theories of the Icelandic
   Research Fund [100014021]; Timed Asynchronous Reactive Objects in
   Distributed Systems: TARO of the Icelandic Research Fund [110020021]
FX The work on this paper has been partially supported by the projects "New
   Developments in Operational Semantics" (No. 080039021), "Meta-theory of
   Algebraic Process Theories" (No. 100014021) and "Timed Asynchronous
   Reactive Objects in Distributed Systems: TARO" (No. 110020021) of the
   Icelandic Research Fund.
CR Aceto L, 2011, ELECTRON P THEOR COM, P1, DOI 10.4204/EPTCS.58.1
   Agha G., 1990, ACTORS-A Model of Concurrent Computation in Distributed Systems, Artificial Intelligence
   ALUR R, 1994, THEOR COMPUT SCI, V126, P183, DOI 10.1016/0304-3975(94)90010-8
   [Anonymous], 1991, SIMULATION MODELING
   [Anonymous], 2003, WORKSH EC PEER PEER
   [Anonymous], 1981, Technical Report DAIMI FN-19
   Baker H.G., 1978, ACTOR SYSTEMS REAL T
   Bjork J, 2010, ELECTRON PROC THEOR, P67, DOI 10.4204/EPTCS.36.4
   Buss AH, 1996, 1996 WINTER SIMULATION CONFERENCE PROCEEDINGS, P153, DOI 10.1145/256562.256597
   Clavel M, 2002, THEOR COMPUT SCI, V285, P187, DOI 10.1016/S0304-3975(01)00359-0
   de Boer F, 2010, LECT NOTES COMPUT SC, V5961, P212
   Fredlund LÅ, 2007, ACM SIGPLAN NOTICES, V42, P125, DOI 10.1145/1291220.1291171
   HEWITT C, 1972, THESIS MIT CAMBRIDGE
   Hewitt C, 2007, LECT NOTES ARTIF INT, V4386, P293
   Izadi M.J., 2010, THESIS U TEHRAN IRAN
   Jafari A, 2008, PROCEEDINGS OF THE 2008 14TH IEEE INTERNATIONAL CONFERENCE ON PARALLEL AND DISTRIBUTED SYSTEMS, P344, DOI 10.1109/ICPADS.2008.118
   JAGHOORI MM, 2007, P NORD WORKSH PROGR
   Jaghoori MM, 2010, ACTA INFORM, V47, P33, DOI 10.1007/s00236-009-0111-x
   Jaghoori MM, 2009, J LOGIC ALGEBR PROGR, V78, P402, DOI 10.1016/j.jlap.2009.02.009
   KAHN G, 1987, LECT NOTES COMPUT SC, V247, P22
   Khamespanah E., 2012, P 2 ED PROGR SYST LA, P23
   Kristinsson H., 2012, THESIS REYKJAVIK U I
   Larsen K. G., 1997, International Journal on Software Tools for Technology Transfer, V1, P134, DOI 10.1007/s100090050010
   Magnusson B., 2012, THESIS REYKJAVIK U I
   Nielsen B., 1996, P 4 INT WORKSH PAR D
   Nigro L., 2001, Concurrent object-oriented programming and petri nots. Advances in petri nets (Lecture Notes in Computer Science Vol.2001), P493
   Ölveczky PC, 2004, LECT NOTES COMPUT SC, V2984, P354
   Ölveczky PC, 2002, THEOR COMPUT SCI, V285, P359, DOI 10.1016/S0304-3975(01)00363-2
   REN SP, 1995, SIGPLAN NOTICES, V30, P50, DOI 10.1145/216633.216656
   Satoh I, 1995, LECT NOTES COMPUT SC, V952, P331
   Sirjani M, 2005, J UNIVERS COMPUT SCI, V11, P1054
   Sirjani M, 2004, FUND INFORM, V63, P385
   Sirjani M, 2011, LECT NOTES COMPUT SC, V7000, P20, DOI 10.1007/978-3-642-24933-4_3
   Svensson H, 2010, ERLANG 2010: PROCEEDINGS OF THE 2010 ACM SIGPLAN, ERLANG WORKSHOP, P23
   Tanenbaum AS., 2007, DISTRIBUTED SYSTEMS
   YI W, 1991, LECT NOTES COMPUT SC, V510, P217
NR 36
TC 31
Z9 32
U1 0
U2 8
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 1
PY 2014
VL 89
SI SI
BP 41
EP 68
DI 10.1016/j.scico.2014.01.008
PN A
PG 28
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA AJ8BX
UT WOS:000337928800004
DA 2024-07-18
ER

PT J
AU Moon, YJ
   Silva, A
   Krause, C
   Arbab, F
AF Moon, Young-Joo
   Silva, Alexandra
   Krause, Christian
   Arbab, Farhad
TI A compositional model to reason about end-to-end QoS in Stochastic Reo
   connectors
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Coordination language; Reo; Continuous-ime Markov Chains; Quality of
   service; Compositional semantic model
ID INTERACTIVE MARKOV-CHAINS; COMPONENT CONNECTORS; AUTOMATA NETWORKS;
   SYSTEMS; COORDINATION
AB In this paper, we present a compositional semantics for the channel-based coordination language Reo that enables the analysis of quality of service (QoS) properties of service compositions. For this purpose, we annotate Reo channels with stochastic delay rates and explicitly model data-arrival rates at the boundary of a connector, to capture its interaction with the services that comprise its environment. We propose Stochastic Reo Automata as an extension of Reo automata, in order to compositionally derive a QoS-aware semantics for Reo. We further present a translation of Stochastic Reo Automata to Continuous-Time Markov Chains (CTMCs). This translation enables us to use third-party CTMC verification tools to do an end-to-end performance analysis of service compositions. In addition, we discuss to what extent Interactive Markov Chains (IMCs) can serve as an alternative semantic model for Stochastic Reo. We show that the semantics of Stochastic Reo cannot be specified compositionally using the product operator provided by IMCs. (C) 2011 Elsevier B.V. All rights reserved.
C1 [Moon, Young-Joo] INRIA, Bordeaux, France.
   [Silva, Alexandra; Arbab, Farhad] CWI, NL-1009 AB Amsterdam, Netherlands.
   [Krause, Christian] HPI, Potsdam, Germany.
   [Silva, Alexandra] Radboud Univ Nijmegen, NL-6525 ED Nijmegen, Netherlands.
   [Silva, Alexandra] Univ Minho, INESC TEC, HASLab, Braga, Portugal.
C3 Inria; University of Potsdam; Radboud University Nijmegen; Universidade
   do Minho; INESC TEC
RP Moon, YJ (corresponding author), INRIA, Bordeaux, France.
EM young-joo.moon@inria.fr; alexandra@cs.ru.nl;
   christian.krause@hpi.uni-potsdam.de; farhad@cwi.nl
FU Fundacao para a Ciencia e a Tecnologia, Portugal [SFRH/BPD/71956/2010];
   Fundação para a Ciência e a Tecnologia [SFRH/BPD/71956/2010] Funding
   Source: FCT
FX We would like to thank the referees for the many constructive comments,
   which greatly helped us improving the paper. The second author was
   partially supported by Fundacao para a Ciencia e a Tecnologia, Portugal,
   under grant number SFRH/BPD/71956/2010.
CR [Anonymous], 2002, LECT NOTES COMPUTER
   Arbab F, 2004, MATH STRUCT COMP SCI, V14, P329, DOI 10.1017/S0960129504004153
   Arbab F, 2009, LECT NOTES COMPUT SC, V5521, P268, DOI 10.1007/978-3-642-02053-7_14
   Baier C, 2006, LECT NOTES COMPUT SC, V4038, P1
   Baier C, 2006, SCI COMPUT PROGRAM, V61, P75, DOI 10.1016/j.scico.2005.10.008
   Bernardo M, 1998, THEOR COMPUT SCI, V202, P1, DOI 10.1016/S0304-3975(97)00127-8
   Bernardo M., 1996, LECT NOTES COMPUTER, V1119, P315
   Bonsangue M., SCI COMPUTE IN PRESS, DOI [10.1016/j.scico.2011.01.006, DOI 10.1016/J.SCIC0.2011.01.006]
   Boudali H, 2008, I C DEPEND SYS NETWO, P512, DOI 10.1109/DSN.2008.4630122
   Boudali H, 2007, LECT NOTES COMPUT SC, V4762, P441
   Boudali H, 2010, IEEE T DEPEND SECURE, V7, P128, DOI 10.1109/TDSC.2009.45
   Boudali H, 2007, I C DEPEND SYS NETWO, P708, DOI 10.1109/DSN.2007.37
   Bozzano M., 2009, MEMOCODE 09, P121
   Bozzano M, 2009, LECT NOTES COMPUT SC, V5775, P173, DOI 10.1007/978-3-642-04468-7_15
   Calzarossa M., 2002, LECT NOTES COMPUTER, V2459
   Fernandes P, 1998, J ACM, V45, P381, DOI 10.1145/278298.278303
   GARAVEL H, 2002, LNCS, V2391, P410
   Garavel H, 2007, LECT NOTES COMPUT SC, V4590, P158
   Haverkort B.R., 2001, Performability modelling: techniques and tools
   Hermanns H, 2010, LECT NOTES COMPUT SC, V6286, P311
   Hillston J., 1996, A Compositional Approach to Performance Modelling
   Hinton A, 2006, LECT NOTES COMPUT SC, V3920, P441
   Kanters O., 2010, THESIS VRIJE U AMSTE
   Krause C, 2011, SCI COMPUT PROGRAM, V76, P23, DOI 10.1016/j.scico.2009.10.006
   Moon YJ, 2010, ELECTRON PROC THEOR, P93, DOI 10.4204/EPTCS.30.7
   Neuts MF., 1981, Matrix-Geometric Solutions in Stochastic Models
   O'Cinneide C.A., 1990, COMM STAT STOCHASTIC, V6, P1
   Sahner R., 1996, PERFORMANCE RELIABIL
   Stewart W.J., 1994, Introduction to the Numerical Solution of Markov Chains
   STEWART WJ, 1995, EUR J OPER RES, V86, P503, DOI 10.1016/0377-2217(94)00075-N
   Younes HLS, 2004, PROCEEDING OF THE NINETEENTH NATIONAL CONFERENCE ON ARTIFICIAL INTELLIGENCE AND THE SIXTEENTH CONFERENCE ON INNOVATIVE APPLICATIONS OF ARTIFICIAL INTELLIGENCE, P742
NR 31
TC 4
Z9 5
U1 0
U2 4
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 1
PY 2014
VL 80
BP 3
EP 24
DI 10.1016/j.scico.2011.11.007
PN A
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 292FG
UT WOS:000329887000002
OA Green Submitted, Green Published
DA 2024-07-18
ER

PT J
AU Reinbacher, T
   Brauer, J
   Horauer, M
   Steininger, A
   Kowalewski, S
AF Reinbacher, Thomas
   Brauer, Joerg
   Horauer, Martin
   Steininger, Andreas
   Kowalewski, Stefan
TI Runtime verification of microcontroller binary code
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Runtime verification; Past time LTL; Embedded real-time systems
ID TEMPORAL LOGIC; TIME; SOFTWARE; CHECKING; FRAMEWORK; EFFICIENT; BUGS;
   TOOL; MOP
AB Runtime verification bridges the gap between formal verification and testing by providing techniques and tools that connect executions of a software to its specification without trying to prove the absence of errors. This article presents a framework for runtime verification of microcontroller binary code, which provides the above mentioned link in a non-intrusive fashion: the framework neither requires code instrumentation nor does it affect the execution of the analyzed program. This is achieved using a dedicated hardware unit that runs on a field programmable gate array in parallel to the analyzed microcontroller program. Different instances of this framework are discussed, with varying degrees of expressiveness of the supported specification languages and complexity in the hardware design. These instances range from invariant checkers for a restricted class of linear template constraints to a programmable processor that supports past-time linear temporal logic with timing constraints. (C) 2012 Elsevier B.V. All rights reserved.
C1 [Reinbacher, Thomas; Steininger, Andreas] Vienna Univ Technol, Embedded Comp Syst Grp, Vienna, Austria.
   [Brauer, Joerg] Verified Syst Int GmbH, Bremen, Germany.
   [Brauer, Joerg; Kowalewski, Stefan] Rhein Westfal TH Aachen, Embedded Software Lab, Aachen, Germany.
   [Horauer, Martin] Univ Appl Sci Tech Wien, Dept Embedded Syst, Vienna, Austria.
C3 Technische Universitat Wien; RWTH Aachen University; Technische
   Universitat Wien
RP Reinbacher, T (corresponding author), Vienna Univ Technol, Embedded Comp Syst Grp, Vienna, Austria.
EM treinbacher@ecs.tuwien.ac.at
RI Steininger, Andreas/AAS-8589-2020
OI Steininger, Andreas/0000-0002-3847-1647
FU FIT-IT project CEVTES [825891]; DFG Cluster of Excellence on Ultra-high
   Speed Information and Communication; German Research Foundation [DFG EXC
   89]; DFG [1298]
FX The work of Thomas Reinbacher and Andreas Steininger has been supported
   within the FIT-IT project CEVTES managed by the Austrian Research Agency
   FFG under grant 825891. The work of Jorg Brauer and Stefan Kowalewski
   has been, in part, supported by the DFG Cluster of Excellence on
   Ultra-high Speed Information and Communication, German Research
   Foundation grant DFG EXC 89, and by the DFG research training group 1298
   Algorithmic Synthesis of Reactive and Discrete Continuous Systems. The
   authors want to thank Sebastian Biallas, Matthias Rigger, Johannes
   Geist, Patrick Moosbrugger, Tobias Muller and Daniel Schachinger for
   fruitful discussions in this line of scientific inquiry.
CR Alur R., 1990, Proceedings. Fifth Annual IEEE Symposium on Logic in Computer Science (90CH2897-7), P390, DOI 10.1109/LICS.1990.113764
   ALUR R, 1990, LECT NOTES COMPUT SC, V443, P322, DOI 10.1007/BFb0032042
   [Anonymous], 1992, TEMPORAL LOGIC REACT, DOI DOI 10.1007/978-1-4612-0931-7
   [Anonymous], 2007, MSRTR200799
   [Anonymous], 2006, P 13 ACM C COMPUTER
   [Anonymous], 2008, P 28 IARCS C FDN SOF, DOI [DOI 10.4230/LIPICS.FSTTCS.2008.1740, 10.4230/LIPIcs.FSTTCS.2008.1740]
   Austin TM, 1999, INT SYMP MICROARCH, P196, DOI 10.1109/MICRO.1999.809458
   Balakrishnan G., 2005, Verified Software: Theories, Tools, Experiments. First IFIP TC 2/WG 2.3 Conference, VSTTE 2005. (Lecture Notes in Computer Science vol. 4171), P202
   Balakrishnan G, 2010, ACM T PROGR LANG SYS, V32, DOI 10.1145/1749608.1749612
   Ball T, 2002, ACM SIGPLAN NOTICES, V37, P1, DOI 10.1145/565816.503274
   Ball T, 2011, COMMUN ACM, V54, P68, DOI 10.1145/1965724.1965743
   Ball T, 2010, LECT NOTES COMPUT SC, V6174, P119, DOI 10.1007/978-3-642-14295-6_11
   Bardin Sebastien, 2008, 2008 First IEEE International Conference on Software Testing, Verification and Validation (ICST '08), P22, DOI 10.1109/ICST.2008.8
   Bardin S, 2011, LECT NOTES COMPUT SC, V6538, P54, DOI 10.1007/978-3-642-18275-4_6
   Bardin S, 2011, SOFTW TEST VERIF REL, V21, P29, DOI 10.1002/stvr.423
   Barringer H., 2004, LECT NOTES COMPUTER, V55, P277
   Basin D., 2012, LNCS, V7186, P260, DOI [10.1007/978-3-642-29860-8_20, DOI 10.1007/978-3-642-29860-8_20, 10.1007/978-3-642-29860-8, DOI 10.1007/978-3-642-29860-8]
   Bauer A, 2006, 2006 AUSTRALIAN SOFTWARE ENGINEERING CONFERENCE, PROCEEDINGS, P243
   Bauer A, 2011, ACM T SOFTW ENG METH, V20, DOI 10.1145/2000799.2000800
   Belinfante A., 2005, LNCS, V3472, P67
   Bensalem S, 2005, ELECTRON NOTES THEOR, V113, P23, DOI 10.1016/j.entcs.2004.01.036
   Bessey A, 2010, COMMUN ACM, V53, P66, DOI 10.1145/1646353.1646374
   Beyer Dirk, 2007, International Journal on Software Tools for Technology Transfer, V9, P505, DOI 10.1007/s10009-007-0044-z
   Bonakdarpour Borzoo, 2011, FM 2011: Formal Methods. Proceedings 17th International Symposium on Formal Methods, P88, DOI 10.1007/978-3-642-21437-0_9
   Brorkens M., 2002, Electr. Notes Theor. Comput. Sci., V70, P21
   BUTLER RW, 1993, IEEE T SOFTWARE ENG, V19, P3, DOI 10.1109/32.210303
   Chen F, 2005, LECT NOTES COMPUT SC, V3440, P546
   Chen F., 2003, 3 INT WORKSH RUNT VE, P106
   Chen F, 2007, ACM SIGPLAN NOTICES, V42, P569, DOI 10.1145/1297105.1297069
   Chen F, 2006, ELECTRON NOTES THEOR, V144, P3, DOI 10.1016/j.entcs.2006.02.002
   Chenard J.-S., 2011, THESIS MCGILL U
   Colin S, 2005, LECT NOTES COMPUT SC, V3472, P525
   Colombo C, 2009, LECT NOTES COMPUT SC, V5813, P103, DOI 10.1007/978-3-642-04368-0_10
   Corbett J.C., 2000, ICSE, P762
   Cousot P, 2005, LECT NOTES COMPUT SC, V3444, P21
   Cousot P, 2009, FORM METHOD SYST DES, V35, P229, DOI 10.1007/s10703-009-0089-6
   d'Amorim M., 2005, ACM SIGSOFT SOFTWARE, V30, P1
   D'Angelo B, 2005, 12TH INTERNATIONAL SYMPOSIUM ON TEMPORAL REPRESENTATION AND REASONING, PROCEEDINGS, P166, DOI 10.1109/TIME.2005.26
   Das M, 2002, ACM SIGPLAN NOTICES, V37, P57, DOI 10.1145/543552.512538
   Drechsler R., 2003, ISCAS, V4, pIV
   Druilhe A., 2010, 7 INT TOP M NUCL PLA, P1316
   Drusinsky D, 2003, LECT NOTES COMPUT SC, V2725, P114
   Drusinsky D, 2000, LECT NOTES COMPUT SC, V1885, P323
   Eide Eric, 2008, EMSOFT '08: Proceedings of the 8th ACM International Conference on Embedded Software, P255, DOI DOI 10.1145/1450058.1450093
   Eisner C, 2003, LECT NOTES COMPUT SC, V2725, P27
   Emerson E. A., 1990, Handbook of Theoretical Computer Science, VB, P995, DOI [10.1016/b978-0-444-88074-1.50021-4, DOI 10.1016/B978-0-444-88074-1.50021-4]
   Engler D, 2000, USENIX ASSOCIATION PROCEEDINGS OF THE FOURTH SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P1
   Fehnker A, 2008, EIGHTH IEEE INTERNATIONAL WORKING CONFERENCE ON SOURCE CODE ANALYSIS AND MANIPULATION, PROCEEDINGS, P15, DOI 10.1109/SCAM.2008.15
   Fehnker A, 2009, LECT NOTES COMPUT SC, V5404, P267
   Finkbeiner B, 2004, FORM METHOD SYST DES, V24, P101, DOI 10.1023/B:FORM.0000017718.28096.48
   Fischmeister S, 2010, IEEE T IND INFORM, V6, P652, DOI 10.1109/TII.2010.2068304
   Fischmeister S, 2010, ACM SIGPLAN NOTICES, V45, P133, DOI 10.1145/1755951.1755908
   Flexeder A, 2010, LECT NOTES COMPUT SC, V6461, P188, DOI 10.1007/978-3-642-17164-2_14
   Havelund K., 2004, International Journal on Software Tools for Technology Transfer, V6, P158, DOI 10.1007/s10009-003-0117-6
   Havelund K, 2004, FORM METHOD SYST DES, V24, P189, DOI 10.1023/B:FORM.0000017721.39909.4b
   Havelund K, 2002, LECT NOTES COMPUT SC, V2280, P342
   Havelund K, 2008, LECT NOTES COMPUT SC, V5047, P7, DOI 10.1007/978-3-540-68524-1_3
   Havelund Klaus, 2005, LNCS, V4171, P374, DOI [DOI 10.1007/978-3-540-69149-5, 10.1007/978-3-540-69149-540, DOI 10.1007/978-3-540-69149-540]
   Hessel Anders, 2008, Formal Methods and Testing. An Outcome of the FORTEST Network. Revised Selected Papers, P77, DOI 10.1007/978-3-540-78917-8_3
   Hoare CAR, 2003, IEEE ANN HIST COMPUT, V25, P14, DOI 10.1109/MAHC.2003.1203056
   Howe JM, 2009, LECT NOTES COMPUT SC, V5799, P306, DOI 10.1007/978-3-642-04761-9_23
   Huuck R, 2008, LECT NOTES COMPUT SC, V5311, P216, DOI 10.1007/978-3-540-88387-6_17
   Intel Cooperation, 1994, 272383002 INT CORP
   Kim M, 1999, PROCEEDINGS OF THE 11TH EUROMICRO CONFERENCE ON REAL-TIME SYSTEMS, P114, DOI 10.1109/EMRTS.1999.777457
   Kim M, 2004, FORM METHOD SYST DES, V24, P129, DOI 10.1023/B:FORM.0000017719.43755.7c
   Kinder J, 2009, LECT NOTES COMPUT SC, V5403, P214, DOI 10.1007/978-3-540-93900-9_19
   Klein G, 2010, COMMUN ACM, V53, P107, DOI 10.1145/1743546.1743574
   KOGGE PM, 1973, IEEE T COMPUT, VC-22, P786, DOI 10.1109/TC.1973.5009159
   Kopetz Hermann., 2011, Real-Time Systems
   Kristoffersen K. J., 2003, Electronic Notes in Theoretical Computer Science, V89, DOI 10.1016/S1571-0661(04)81050-8
   Kroening D, 2008, TEXTS THEOR COMPUT S, P1
   Krüger IH, 2007, LECT NOTES COMPUT SC, V4839, P63
   Laroussinie F, 2002, IEEE S LOG, P383, DOI 10.1109/LICS.2002.1029846
   Larsen K.G., 2005, Proceedings of the 5th ACM international conference on Embedded software, P299, DOI DOI 10.1145/1086228.1086283
   Lee I, 1999, INTERNATIONAL CONFERENCE ON PARALLEL AND DISTRIBUTED PROCESSING TECHNIQUES AND APPLICATIONS, VOLS I-V, PROCEEDINGS, P279
   Leroy X, 2006, ACM SIGPLAN NOTICES, V41, P42, DOI 10.1145/1111320.1111042
   Leroy X, 2009, J AUTOM REASONING, V43, P363, DOI 10.1007/s10817-009-9155-4
   Lichtenstein O., 1985, Logics of Programs. Proceedings, P196
   Lindig C., 2005, AADEBUG, P3
   Maler O, 2005, LECT NOTES COMPUT SC, V3829, P2
   MAY D, 1989, LECT NOTES COMPUT SC, V375, P48
   McCarthy J., 1967, CORRECTNESS COMPILER
   Nethercote N, 2007, ACM SIGPLAN NOTICES, V42, P89, DOI 10.1145/1273442.1250746
   Nethercote N, 2007, VEE'07: PROCEEDINGS OF THE THIRD INTERNATIONAL CONFERENCE ON VIRTUAL EXECUTION ENVIRONMENTS, P65
   Nickovic D, 2007, LECT NOTES COMPUT SC, V4763, P304
   PARR TJ, 1995, SOFTWARE PRACT EXPER, V25, P789, DOI 10.1002/spe.4380250705
   Pellizzoni R., 2009, EMBEDDED SOFTWARE EM, P235, DOI [10.1145/1629335.1629367, DOI 10.1145/1629335.1629367]
   Pellizzoni R, 2008, REAL TIM SYST SYMP P, P481, DOI 10.1109/RTSS.2008.43
   Pike L., 2011, Proceedings of the Second International Conference on Runtime Verification (RV 2011), P310
   Pike L, 2010, LECT NOTES COMPUT SC, V6418, P345, DOI 10.1007/978-3-642-16612-9_26
   PLCopen, 2006, SAF SOFTW TECHN SP 1
   Pnueli A, 1998, LECT NOTES COMPUT SC, V1384, P151, DOI 10.1007/BFb0054170
   Reinbacher T., 2012, 2012 IEEE/ASME 8th International Conference on Mechatronic and Embedded Systems and Applications (MESA), P224, DOI 10.1109/MESA.2012.6275566
   Reinbacher T., 2011, 2011 International Conference on Embedded Software (EMSOFT 2011), P117
   Reinbacher T., 2011, MESA, P3
   Reinbacher T., 2011, LECT NOTES COMPUTER, V7186, P239
   Reinbacher T, 2011, LECT NOTES COMPUT SC, V6959, P37, DOI 10.1007/978-3-642-24431-5_5
   Rosu G., 2005, Automated Software Engineering, V12, P151, DOI 10.1007/s10515-005-6205-y
   Rushby J, 2009, SEFM 2009: SEVENTH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING AND FORMAL METHODS, P3, DOI 10.1109/SEFM.2009.39
   Sammapun U, 2005, 11TH IEEE INTERNATIONAL CONFERENCE ON EMBEDDED AND REAL-TIME COMPUTING SYSTEMS AND APPLICATIONS, PROCEEDINGS, P147, DOI 10.1109/RTCSA.2005.84
   Schlich B, 2010, ACM T EMBED COMPUT S, V9, DOI 10.1145/1721695.1721702
   Schumann J, 2010, LECT NOTES COMPUT SC, V6418, P399, DOI 10.1007/978-3-642-16612-9_30
   Sen K., 2003, Software Engineering Notes, V28, P337, DOI 10.1145/949952.940116
   Shimizu K, 2000, LECT NOTES COMPUT SC, V1954, P335
   Shobaki M.E., 2002, RTCSA
   Tripakis S., 2002, Formal Techniques in Real-Time and Fault-Tolerant Systems. 7th International Symposium, FTRTFT 2002. Proceedings (Lecture Notes in Computer Science Vol.2469), P205
   TSAI JJP, 1990, IEEE T SOFTWARE ENG, V16, P897, DOI 10.1109/32.57626
   Yang XJ, 2011, ACM SIGPLAN NOTICES, V46, P283, DOI 10.1145/1993316.1993532
   Zhou WC, 2009, LECT NOTES COMPUT SC, V5779, P184, DOI 10.1007/978-3-642-04694-0_13
NR 109
TC 3
Z9 5
U1 0
U2 17
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 1
PY 2014
VL 80
BP 109
EP 129
DI 10.1016/j.scico.2012.10.015
PN A
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 292FG
UT WOS:000329887000009
OA hybrid
DA 2024-07-18
ER

PT J
AU Fabry, J
   Kellens, A
   Denier, S
   Ducasse, S
AF Fabry, Johan
   Kellens, Andy
   Denier, Simon
   Ducasse, Stephane
TI AspectMaps: Extending Moose to visualize AOP software
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Aspect-oriented programming; Visualization; Moose
ID ORIENTED SOFTWARE; TOOL
AB When using aspect-oriented programming the application implicitly invokes the functionality contained in the aspects. Consequently program comprehension of such a software is more intricate. To alleviate this difficulty we developed the AspectMaps visualization and tool. AspectMaps extends the Moose program comprehension and reverse engineering platform with support for aspects, and is implemented using facilities provided by Moose. In this paper we present the AspectMaps tool, and show how it can be used by performing an exploration of a fairly large aspect-oriented application. We then show how we extended the FAMIX meta-model family that underpins Moose to also provide support for aspects. This extension is called ASPIX, and thanks to this enhancement Moose can now also treat aspect-oriented software. Finally, we report on our experiences using some of the tools in Moose; Mondrian to implement the visualization, and Glamour to build the user interface. We discuss how we were able to implement a sizable visualization tool using them and how we were able to deal with some of their limitations.
   Note: This paper uses colors extensively. Please use a color version to better understand the ideas presented here. (C) 2012 Elsevier B.V. All rights reserved.
C1 [Fabry, Johan] Univ Chile, PLEIAD Lab, Comp Sci Dept DCC, Santiago, Chile.
   [Kellens, Andy] Vrije Univ Brussel, Software Languages Lab, Brussels, Belgium.
   [Denier, Simon; Ducasse, Stephane] INRIA Lille Nord Europe, RMoD Team, Lille, France.
C3 Universidad de Chile; Vrije Universiteit Brussel
RP Fabry, J (corresponding author), Univ Chile, PLEIAD Lab, Comp Sci Dept DCC, Santiago, Chile.
EM jfabry@dcc.uchile.cl
OI Ducasse, Stephane/0000-0001-6070-6599; Fabry, Johan/0000-0002-7533-9354
FU IAP Programme of the Belgian State; INRIA Equipe Associee PLOMO;
   FONDECYT [1090083]
FX We wish to thank Eric Tanter, Jacques Noye, Alexandre Bergel, Awais
   Rashid, Thomas Cleenewerck, Kris De Schutter, Kim Mens, and Andrew
   Eisenberg for their invaluable feedback when discussing early versions
   of AspectMaps. Thanks also go to Andrew Eisenberg for helping us
   understand the AJDT crosscutting model and Alexandre Bergel for helping
   out with Mondrian. We are grateful to Theo D'Hondt for supporting this
   research. This research is partially supported by the IAP Programme of
   the Belgian State and the INRIA Equipe Associee PLOMO. Johan Fabry
   author is partially funded by FONDECYT project 1090083.
CR Balint M, 2006, INT C PROGRAM COMPRE, P56, DOI 10.1109/ICPC.2006.25
   Bunge P., 2009, THESIS U BERN
   Coelho W., 2006, AOSD '06: Proceedings of the 5th international conference on Aspect-oriented software development, P158
   Colyer A., 2004, Eclipse aspectj: aspect-oriented programming with aspectj and the eclipse aspectj development tools
   Ducasse S, 2006, ACM T PROGR LANG SYS, V28, P331, DOI 10.1145/1119479.1119483
   Ducasse S, 2003, J SOFTW MAINT EVOL-R, V15, P345, DOI 10.1002/smr.279
   Ducasse S, 2006, 10TH EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, PROCEEDINGS, P35
   Ducasse S, 2009, SOFTW SYST MODEL, V8, P5, DOI 10.1007/s10270-008-0081-4
   EICK SG, 1992, IEEE T SOFTWARE ENG, V18, P957, DOI 10.1109/32.177365
   Fabry J, 2011, CONF PROC INT SYMP C, P121, DOI 10.1109/ICPC.2011.11
   Gomez Veronica Uquillas, 2010, Proceedings 17th Working Conference on Reverse Engineering (WCRE 2010), P55, DOI 10.1109/WCRE.2010.15
   Griswold WG, 2001, PROC INT CONF SOFTW, P265, DOI 10.1109/ICSE.2001.919100
   Horie M, 2007, J OBJECT TECHNOL, V6, P341, DOI 10.5381/jot.2007.6.9.a17
   Kellens A, 2006, LECT NOTES COMPUT SC, V4067, P501
   Kiczales G., 2001, ECOOP 2001 - Object-Oriented Programming. 15th European Conference. Proceedings (Lecture Notes in Computer Science Vol.2072), P327
   Koppen C., 2004, EUR INT WORKSH ASP S
   Kuhn A., 2008, WORKSH MOD RUNT, P57
   Lanza M, 2003, IEEE T SOFTWARE ENG, V29, P782, DOI 10.1109/TSE.2003.1232284
   Laval J, 2009, WORK CONF REVERSE EN, P113, DOI 10.1109/WCRE.2009.11
   Lienhard A, 2007, 4TH IEEE INTERNATIONAL WORKSHOP ON VISUALIZING SOFTWARE FOR UNDERSTANDING AND ANALYSIS, PROCEEDINGS, P67, DOI 10.1109/VISSOF.2007.4290702
   Meyer M., 2006, Proceedings of the 2006 ACM symposium on Software visualization, P135, DOI DOI 10.1145/1148493.1148513
   Pfeiffer J.H., 2006, AOSD '06: Proceedings of the 5th international conference on Aspectoriented software development, P146
   Rinard M., 2004, 12 INT S FDN SOFTW E
   Tarr P., 1999, Proceedings of the 1999 International Conference on Software Engineering (IEEE Cat. No.99CB37002), P107, DOI 10.1109/ICSE.1999.841000
   Tichelaar S, 2000, INTERNATIONAL SYMPOSIUM ON PRINCIPLES OF SOFTWARE EVOLUTION, PROCEEDINGS, P154, DOI 10.1109/ISPSE.2000.913233
   vanDeursen A., 2005, WORKSH LINK ASP TECH
   Zhang D., 2009, IEEE 17 INT C PROGR, P6069
NR 27
TC 2
Z9 2
U1 0
U2 5
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 1
PY 2014
VL 79
SI SI
BP 6
EP 22
DI 10.1016/j.scico.2012.02.007
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 246RH
UT WOS:000326556300002
OA Green Published, Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Kuhrmann, M
   Kalus, G
   Then, M
AF Kuhrmann, Marco
   Kalus, Georg
   Then, Manuel
TI The <i>Process Enactment Tool Framework</i>-Transformation of software
   process models to prepare enactment
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Development process models; Process model mapping; Enactment; Project
   initialization support
AB Rich development process models contain information about structures for project organization and also for concrete outcomes of a project. However, rich processes are hard to implement. They often contain hundreds of pages of documentation. Development teams tend to be skeptical about rich processes in fear of additional effort, risking the benefits of rich tool support for enactment. Process enactment is a challenging task. There is no common methodology to quickly "implement" a development process in a tool or a set of tools. Often specialized tools are used to provide assistance during the project and it is the project manager's task to consolidate the information with the rest of the team.
   The Process Enactment Tool Framework (PET) is a software tool that supports the transformation of a given formal development process into a format that project tools can work with. PET is an instrument to import processes based on a metamodel and provide exports for a specific project environment. PET takes an input software development process model and transforms it into an intermediate format that serves as the basis for a second transformation step into data formats of tools such as office suites or comprehensive ALM platforms. In this paper we present the tool framework and show how metamodel-based processes can be transformed into an environment that is ready to use for a project team. We show how PET is applied for the German V-Modell XT and for SPEM-based processes to generate, e.g., process templates for the Team Foundation Server or work product document templates. (C) 2012 Elsevier B.V. All rights reserved.
C1 [Kuhrmann, Marco; Kalus, Georg; Then, Manuel] Tech Univ Munich, Fac Informat Software & Syst Engn, Boltzmannstr 3, D-85748 Garching, Germany.
C3 Technical University of Munich
RP Kuhrmann, M (corresponding author), Tech Univ Munich, Fac Informat Software & Syst Engn, Boltzmannstr 3, D-85748 Garching, Germany.
EM kuhrmann@in.tum.de; kalus@in.tum.de; then@in.tum.de
OI Kuhrmann, Marco/0000-0001-6101-8931
CR Amelunxen C., 2006, MOD DRIV ARCH FDN AP
   [Anonymous], THESIS
   [Anonymous], IEEE T SOFTWARE ENG
   [Anonymous], 2004, The rational unified process: an introduction
   [Anonymous], THESIS
   [Anonymous], 2007, 1 ISOIEC JTC
   [Anonymous], 2019, Business Process Management: Concepts, Languages, Architectures
   Balduino R., 2007, INTRO OPENUP UPEN UN
   Beck K., 2003, Extreme Programming
   Becker S., 2005, SOFTWARE SYSTEMS MOD, V4
   ben Ahmed Boulila N., 2005, THESIS
   Bendraou R., 2007, P 14 AS PAC SOFTW EN
   Bergner K., 2009, TECH REP
   Bergner K., 2010, P INT C SOFTW PROC I
   Brinkkemper S., 1996, INFORM SOFTWARE TECH
   BRINKKEMPER S, 1999, INFORM SYSTEMS, V24
   Cass A.G., 2000, INT C SOFTW ENG ICSE
   Cervera M., 2010, P INT C SOFTW PROC I
   Cugola G., 1998, SOFTWARE PROCESS IMP
   Davis R., 2010, ARIS DESIGN PLATFORM
   Deiters W., 1994, INT J SOFTWARE ENG K
   Eclipse Foundation, 2010, ECL PROC FRAM EPF
   Friedrich J., 2011, INT C SOFTW SYST PRO
   Friedrich J., 2009, DAS V MODELL XT
   Heller M., 2004, P 2 INT WORKSH APPL
   Henderson-Sellers B, 2006, INFORM SYSTEMS TECHN
   Kazman R., 2004, CMUSEI2004TR011
   Konigs A., 2006, P SEGRAVIS SCH FDN V
   Krishna S., 2011, IBM RATIONAL TEAM CO
   Kuhrmann M., 2010, P SPLASH WORKSH FLEX
   Kuhrmann M., 2009, TOOL SUPPORT SOFTWAR
   Kuhrmann M., 2008, WORKSH SUPP DISTR TE
   Kuhrmann M., 2008, P IASTED INT C SOFTW
   Kuhrmann M., 2010, P 3 INT WORKSH AC SO
   Kuhrmann M., 2010, TUMUI005
   Mendez Fernandez D., 2011, P 15 INT C EV ASS SO
   Mendez Fernandez D., 2011, INFORM SOFTWARE TECH
   Microsoft Corporation, 2007, TEAM DEV VIS STUD TE
   Munch J., 2004, J SYSTEMS SOFTWARE
   Object Management Group, 2008, TECH REP
   OMG, 2010, TECH REP
   Osterweil L.J., 2005, INT SOFTW PROC WORKS
   Pedeira O., 2007, ACM SIGSOFT SOFTWARE, V32
   Rausch A., 2011, INT C SOFTW SYST PRO
   Rombach D, 2005, LECT NOTES COMPUT SC, V3840, P83
   Sangwan R., 2006, Global software development handbook
   Schwaber Ken., 2004, Agile Project Management With Scrum (Developer Best Practices)
   Suisse Confederation, 2011, HERMES METH
   Ternite T., 2009, P 35 EUROMICRO C SOF
   Ternite T., 2009, TUMI0905
   Watts H., 2002, ANN SOFTWARE ENG
   Webb J., 2007, ESSENTIAL SHAREPOINT
NR 52
TC 6
Z9 6
U1 0
U2 8
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 1
PY 2014
VL 79
SI SI
BP 172
EP 188
DI 10.1016/j.scico.2012.03.007
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 246RH
UT WOS:000326556300013
OA hybrid
DA 2024-07-18
ER

PT J
AU Andersen, J
   Brabrand, C
   Christiansen, DR
AF Andersen, Jacob
   Brabrand, Claus
   Christiansen, David Raymond
TI Banana Algebra: Compositional syntactic language extension
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Languages; Transformation; Syntactic extension; Macros; Context-free
   grammars; Catamorphisms; Bananas; Algebra
AB We propose an algebra of languages and transformations as a means of compositional syntactic language extension. The algebra provides a layer of high-level abstractions built on top of languages (captured by context-free grammars) and transformations (captured by constructive catamorphisms).
   The algebra is self-contained in that any term of the algebra specifying a transformation can be reduced to a constant catamorphism, before the transformation is run. Thus, the algebra comes "for free" without sacrificing the strong safety and efficiency properties of constructive catamorphisms.
   The entire algebra as presented in the paper is implemented as the Banana Algebra Tool which may be used to syntactically extend languages in an incremental and modular fashion via algebraic composition of previously defined languages and transformations. We demonstrate and evaluate the tool via several kinds of extensions. (C) 2012 Elsevier B.V. All rights reserved.
C1 [Andersen, Jacob] Alexandra Inst, DK-8200 Aarhus N, Denmark.
   [Brabrand, Claus; Christiansen, David Raymond] IT Univ Copenhagen, DK-2300 Copenhagen S, Denmark.
C3 IT University Copenhagen
RP Brabrand, C (corresponding author), IT Univ Copenhagen, Rued Langgards Vej 7, DK-2300 Copenhagen S, Denmark.
EM jacob.andersen@alexandra.dk; brabrand@itu.dk; drc@itu.dk
CR Bawden A., 1988, Proceedings of the 1988 ACM Conference on LISP and Functional Programming, P86, DOI 10.1145/62678.62687
   BOROVANSKY PI, 1998, 2 INT WORKSH REWR LO, V15
   BRABRAND C., 2002, ACM T INTERNET TECHN, V2, P79
   Brabrand C., 2008, LNCS, V33
   Brabrand C, 2007, SCI COMPUT PROGRAM, V68, P2, DOI 10.1016/j.scico.2005.06.007
   Brabrand C, 2010, SCI COMPUT PROGRAM, V75, P176, DOI 10.1016/j.scico.2009.11.002
   Brabrand Claus, 2002, P ACM SIGPLAN WORKSH
   Bravenboer M, 2008, SCI COMPUT PROGRAM, V72, P52, DOI 10.1016/j.scico.2007.11.003
   Cardelli L., 1994, 121 SRC
   Clavel M, 2002, THEOR COMPUT SCI, V285, P187, DOI 10.1016/S0304-3975(01)00359-0
   Cordy J R., 2004, Proc. LDTA 2004, ACM 4th International Workshop on Language Descriptions, P1
   de Jonge M, 2002, PROC IEEE INT CONF S, P550, DOI 10.1109/ICSM.2002.1167816
   Fernandes JP, 2007, HASKELL'07: PROCEEDINGS OF THE ACM SIGPLAN 2007 HASKELL WORKSHOP, P95
   GRAY RW, 1992, COMMUN ACM, V35, P121, DOI 10.1145/129630.129637
   Hedin Gorel, 2001, ELECT NOTES THEORETI, V44
   Heering J., 2001, P COMP CONSTR 2001
   Hopcroft J.E., 1979, Introduction to Automata Theory, Languages, and Computation
   Kieburtz R. B., 1995, Advanced Functional Programming. First International Spring School on Advanced Functional Programming Techniques. Tutorial Text, P267
   Kohlbecker Eugene., 1986, P 1986 ACM C LISP FU, P151
   LAMMEL R, 2000, P WGP 2000, P46
   MEIJER E, 1991, LECT NOTES COMPUT SC, V523, P124
   Scott E, 2010, ELECTRON NOTES THEOR, V253, P177, DOI 10.1016/j.entcs.2010.08.041
   Sperber M., 2009, J. Funct. Program, V19, P1
   Swierstra SD, 1999, LECT NOTES COMPUT SC, V1608, P150
   van Deursen A., 1994, CSR9401 CTR WISK INF
   Van Wyk E, 2008, ELECTRON NOTES THEOR, V203, P103, DOI 10.1016/j.entcs.2008.03.047
   Voigtländer J, 2008, LECT NOTES COMPUT SC, V4989, P163
   WADLER P, 1990, THEORETICAL COMPUTER, V73, P344
   WEISE D, 1993, SIGPLAN NOTICES, V28, P156, DOI 10.1145/173262.155105
NR 29
TC 2
Z9 2
U1 0
U2 2
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 1
PY 2013
VL 78
IS 10
BP 1845
EP 1870
DI 10.1016/j.scico.2012.11.004
PG 26
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 200RJ
UT WOS:000323086300006
OA hybrid
DA 2024-07-18
ER

PT J
AU Hesselink, WH
AF Hesselink, Wirn H.
TI Complete assertional proof rules for progress under weak and strong
   fairness
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE UNITY; Temporal logic; Weak fairness; Strong fairness; Proof rules
ID DERIVATION; REFINEMENT; LOGIC
AB The UNITY rules for leads-to, based on totality of the commands and weak fairness, are generalized to specifications with nontotal commands and impartiality. The rules and the corresponding predicate transformers are proved to be sound and complete by elementary means. These results are subsequently extended to specifications where the liveness property also contains a finite number of strong fairness assumptions. This is illustrated by means of a proof of starvation freedom for the standard implementation of mutual exclusion by plain semaphores, with strong fairness for the P operations. (C) 2012 Elsevier B.V. All rights reserved.
C1 Univ Groningen, Dept Comp Sci, NL-9700 AK Groningen, Netherlands.
C3 University of Groningen
RP Hesselink, WH (corresponding author), Univ Groningen, Dept Comp Sci, POB 407, NL-9700 AK Groningen, Netherlands.
EM w.h.hesselink@rug.nl
OI Hesselink, Wim/0000-0002-1413-4320
CR ABADI M, 1991, THEOR COMPUT SCI, V82, P253, DOI 10.1016/0304-3975(91)90224-P
   [Anonymous], 1986, Fairness
   Chandy K.M., 1988, PARALLEL PROGRAM DES
   Collette P, 1997, THEOR COMPUT SCI, V183, P253, DOI 10.1016/S0304-3975(96)00327-1
   Dijkstra E.W., DIJKSTRA ARCH
   Dijkstra E. W., 1976, A Discipline of Pro-gramming
   DIJKSTRA EW, 1975, COMMUN ACM, V18, P453, DOI [10.1145/360933.360975, 10.1145/390016.808417]
   DIJKSTRA EW, 1968, COMMUN ACM, V11, P341, DOI 10.1145/363095.363143
   Dijkstra R. M., 1995, Formal Aspects of Computing, V7, P353, DOI 10.1007/BF01211214
   Dijkstra RM, 2000, SCI COMPUT PROGRAM, V37, P3, DOI 10.1016/S0167-6423(99)00021-0
   Dongol B., 2009, THESIS U QUEENSLAND
   Dongol B, 2010, LECT NOTES COMPUT SC, V6120, P119, DOI 10.1007/978-3-642-13321-3_9
   Gerth R., 1989, Proceedings of Fifth International Workshop on Software Specification and Design (Cat. No.89CH2717-7), P11, DOI 10.1145/75199.75202
   Gumm H.P., 1996, TECHNICAL REPORT
   Hesselink W.H., 2012, PVS PROOF SCRIPT COM
   Hesselink WH, 2013, FORM ASP COMPUT, V25, P947, DOI 10.1007/s00165-011-0219-y
   Hesselink WH, 2011, SCI COMPUT PROGRAM, V76, P739, DOI 10.1016/j.scico.2009.09.006
   Jutla C. S., 1989, Proceedings of the Eighth Annual ACM Symposium on Principles of Distributed Computing, P249, DOI 10.1145/72981.72999
   Knapp E, 1994, LECT NOTES COMPUT SC, V880, P378
   Knapp E., 1992, THESIS U TEXAS AUSTI
   Lamport L., 1983, Information Processing 83. Proceedings of the IFIP 9th World Computer Congress, P657
   LAMPORT L, 1994, ACM T PROGR LANG SYS, V16, P872, DOI 10.1145/177492.177726
   LAMPORT L, 1977, IEEE T SOFTWARE ENG, V3, P125, DOI 10.1109/TSE.1977.229904
   Lehmann D., 1981, Automata, Languages and Programming. Eighth Colloquium, P264
   Manna Z., 1983, P S PRINCIPLES PROGR, P141, DOI [10.1145/567067.567082, DOI 10.1145/567067.567082]
   Misra J., 1992, REASON STRONG FAIRNE
   Misra J., 2001, A Discipline of Multiprogramming
   Morgan C., 1987, INFORM PROCESS LETT, P243
   OWICKI S, 1976, ACTA INFORM, V6, P319, DOI 10.1007/BF00268134
   Owre S., 2001, PVS VERSION 2 4 SYST
   Sanders B. A., 1991, Formal Aspects of Computing, V3, P189, DOI 10.1007/BF01898402
   TSAY YK, 1995, ACM T PROGR LANG SYS, V17, P16, DOI 10.1145/200994.200997
NR 32
TC 2
Z9 3
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 1
PY 2013
VL 78
IS 9
BP 1521
EP 1537
DI 10.1016/j.scico.2012.10.013
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 179QJ
UT WOS:000321536100016
OA Bronze
DA 2024-07-18
ER

PT J
AU Mraihi, O
   Louhichi, A
   Jilani, LL
   Desharnais, J
   Mili, A
AF Mraihi, Olfa
   Louhichi, Asma
   Jilani, Lamia Labed
   Desharnais, Jules
   Mili, Ali
TI Invariant assertions, invariant relations, and invariant functions
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Invariant assertions; Invariant functions; Invariant relations; Loop
   invariants; Program analysis; Program verification; While loops; Loop
   functions
ID LOOP INVARIANTS; PROGRAMS; CHECKING
AB Invariant assertions play an important role in the analysis and documentation of while loops of imperative programs. Invariant functions and invariant relations are alternative analysis tools that are distinct from invariant assertions but are related to them. In this paper we discuss these three concepts and analyze their relationships. The study of invariant functions and invariant relations is interesting not only because it provides alternative means to analyze loops, but also because it gives us insights into the structure of invariant assertions, hence it may help us enhance techniques for generating invariant assertions. (C) 2012 Elsevier B.V. All rights reserved.
C1 Inst Super Gest, Tunis, Tunisia.
   Fac Sci Tunis, El Manar, Tunisia.
   Univ Laval, Quebec City, PQ, Canada.
   [Mili, Ali] NJIT, Newark, NJ USA.
C3 Universite de Tunis; Universite de Tunis-El-Manar; Faculte des Sciences
   de Tunis (FST); Laval University; New Jersey Institute of Technology
RP Mili, A (corresponding author), NJIT, Newark, NJ USA.
EM olfa.mraihi@yahoo.fr; louhichiasma@yahoo.fr; lamia.labed@isg.rnu.tn;
   Jules.Desharnais@ift.ulaval.ca; mili@cis.njit.edu
RI Desharnais, Jules/A-4023-2008
OI mili, amira/0000-0003-3002-7303
CR [Anonymous], P COMP AID VER INF S
   [Anonymous], 1981, SCI PROGRAMMING, DOI DOI 10.1007/978-1-4612-5983-1
   [Anonymous], 1993, Program Verification: Fundamental Issues in Computer Science, DOI [10.1090/psapm/019/0235771, DOI 10.1090/PSAPM/019/0235771]
   [Anonymous], P ICTAC INT C THEOR
   [Anonymous], P 1 C MATH FDN COMP
   [Anonymous], INFORM CONTROL
   [Anonymous], 2007, 1 INT WORKSH INV GEN
   [Anonymous], 1998, International Series in Computer Sciences
   [Anonymous], 1974, Mathematical Theory of Computation
   [Anonymous], P ACM S SYMB ALG COM
   [Anonymous], 2004, P ACM SIGPLAN PRINCI
   [Anonymous], 2004, J RELAT METHODS COMP
   [Anonymous], P 11 INT S SYMB NUM
   [Anonymous], ADV SYMBOLIC ANAL CO
   [Anonymous], P 4 ACM S PRINC PROG
   [Anonymous], P 6 INT S SYMB NUM A
   [Anonymous], P 34 ANN S PRINC PRO
   [Anonymous], DEM AL
   [Anonymous], 2008, Technical Report
   [Anonymous], 2007, Technical report
   [Anonymous], P 11 WORK C REV ENG
   [Anonymous], 2010, RELATIONAL MATH
   [Anonymous], P 1 INT WORKSH INV G
   [Anonymous], 2010, P WORKSH INV GEN WIN
   [Anonymous], P VER EV COMP COMM S
   [Anonymous], SCI COMPUTER PROGRAM
   [Anonymous], P 19 ANN S LOG COMP
   [Anonymous], P 2009 ACM SIGPLAN C
   [Anonymous], P P 1997 S ART INT P
   [Anonymous], TRHASLAB32011 ISNEC
   [Anonymous], P 5 INT C GEN PROGR
   [Anonymous], 2010, P WORKSH INV GEN WIN
   [Anonymous], COMMUNICATIONS ACM
   [Anonymous], P WORKSH INV GEN WIN
   Bird Richard, 1997, Algebra of Programming
   Boudriga N., 1992, Formal Aspects of Computing, V4, P544, DOI 10.1007/BF01211474
   Bradley AR, 2005, LECT NOTES COMPUT SC, V3653, P488, DOI 10.1007/11539452_37
   Carette J, 2007, FUND INFORM, V80, P125
   Colón MA, 2003, LECT NOTES COMPUT SC, V2725, P420
   Cook B, 2008, LECT NOTES COMPUT SC, V5123, P328
   Cook B, 2006, ACM SIGPLAN NOTICES, V41, P415, DOI 10.1145/1133981.1134029
   Cousot Patrick, 1978, P 5 ACM SIGACT SIGPL, p84S96, DOI DOI 10.1145/512760.512770
   Dijkstra E. W., 1976, A Discipline of Pro-gramming
   Doornbos H, 1997, THEOR COMPUT SCI, V179, P103, DOI 10.1016/S0304-3975(96)00154-5
   Fu JC, 2008, IEEE HI ASS SYS ENGR, P333, DOI 10.1109/HASE.2008.36
   Furia CA, 2010, LECT NOTES COMPUT SC, V6300, P277, DOI 10.1007/978-3-642-15025-8_15
   Gulwani S, 2008, ACM SIGPLAN NOTICES, V43, P281, DOI 10.1145/1379022.1375616
   Harris WR, 2010, LECT NOTES COMPUT SC, V6337, P304, DOI 10.1007/978-3-642-15769-1_19
   Henzinger Th. A., 2008, P LPAR08 INT C LOG P
   HOARE CAR, 1969, COMMUN ACM, V12, P576, DOI 10.1145/363235.363259
   Hoder K, 2010, LECT NOTES ARTIF INT, V6173, P188
   JAOUA A, 1991, THEOR COMPUT SCI, V79, P323, DOI 10.1016/0304-3975(91)90335-Y
   Kovács L, 2009, LECT NOTES COMPUT SC, V5503, P470
   Kroening D, 2008, LECT NOTES COMPUT SC, V5311, P111, DOI 10.1007/978-3-540-88387-6_10
   Maclean E., 2010, P WORKSH INV GEN WIN
   MAZURKIEWICZ A, 1972, B ACAD POL SCI SMAP, V20, P793
   Mili A, 2009, SCI COMPUT PROGRAM, V74, P989, DOI 10.1016/j.scico.2009.09.009
   Mili Ali., 1985, Acta Informatica
   Oliveira JN, 2006, LECT NOTES COMPUT SC, V4085, P236
   Oliveira JN, 2009, LECT NOTES COMPUT SC, V5520, P195, DOI 10.1007/978-3-642-03153-3_5
   RIGUET J, 1950, CR HEBD ACAD SCI, V230, P1999
   Rodriguez-Carbonell E., 2004, Theoretical Aspects of Computing - ICTAC 2004. First International Colloquium. Revised Selected Papers (Lecture Notes in Computer Science Vol.3407), P325
   Velroyen H, 2008, LECT NOTES COMPUT SC, V4966, P154
NR 63
TC 13
Z9 13
U1 2
U2 7
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 1
PY 2013
VL 78
IS 9
BP 1212
EP 1239
PG 28
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 179QJ
UT WOS:000321536100003
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Yang, F
   Hankin, C
   Nielson, F
   Nielson, HR
AF Yang, Fan
   Hankin, Chris
   Nielson, Flemming
   Nielson, Hanne Riis
TI Predictive access control for distributed computation
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Coordination languages; Security policies; Aspect-oriented programming;
   Program analysis; Tuple spaces
ID COORDINATION; SECURITY; LANGUAGE; SYSTEMS; KERNEL; LOGIC
AB We show how to use aspect-oriented programming to separate security and trust issues from the logical design of mobile, distributed systems. The main challenge is how to enforce various types of security policies, in particular predictive access control policies - policies based on the future behavior of a program. A novel feature of our approach is that we can define policies concerning secondary use of data. (C) 2012 Elsevier B.V. All rights reserved.
C1 [Yang, Fan; Nielson, Flemming; Nielson, Hanne Riis] Tech Univ Denmark, DTU Informat, DK-2800 Lyngby, Denmark.
   [Hankin, Chris] Univ London Imperial Coll Sci Technol & Med, Dept Comp, London, England.
   [Hankin, Chris] Univ London Imperial Coll Sci Technol & Med, Inst Secur Sci & Technol, London, England.
C3 Technical University of Denmark; Imperial College London; Imperial
   College London
RP Yang, F (corresponding author), Tech Univ Denmark, DTU Informat, Richard Petersens Plads Bldg 321, DK-2800 Lyngby, Denmark.
EM yangfan0356@gmail.com; clh@imperial.ac.uk; nielson@imm.dtu.dk;
   riis@imm.dtu.dk
OI Nielson, Hanne Riis/0000-0002-2484-5580; Nielson,
   Flemming/0000-0001-7362-6176; Hankin, Chris/0000-0001-9149-8577
FU MT-LAB, a VKR Centre of Excellence; Danish Strategic Research Council
   [2106-06-0028]; EPSRC [EP/H000321/1] Funding Source: UKRI
FX This project was partially funded by MT-LAB, a VKR Centre of Excellence,
   and the Danish Strategic Research Council (project 2106-06-0028)
   "Aspects of Security for Citizens".
CR [Anonymous], P 16 INT C SOFTW ENG
   [Anonymous], FUN HAS JUST BEGUN
   [Anonymous], LANGUAGE SPECIFYING
   [Anonymous], ELECT NOTES THEORETI
   [Anonymous], THESIS
   [Anonymous], ASPECT ORIENTED SOFT
   [Anonymous], THESIS ADVISER MORRI
   [Anonymous], P 1 WORKSH ASP OR MI
   [Anonymous], P 3 INT C ASP OR SOF
   [Anonymous], P 20 ANN ACM SIGPLAN
   [Anonymous], RR5882 INRIA
   [Anonymous], 2000, P INT SCH FDN SEC AN
   [Anonymous], KEYNOTE TRUST MANAGE
   [Anonymous], CORRABS12014262
   Aotani Tomoyuki., 2007, AOSD 07, P161
   Aracic I, 2006, LECT NOTES COMPUT SC, V3880, P135
   Bauer L, 2005, ACM SIGPLAN NOTICES, V40, P305, DOI 10.1145/1064978.1065047
   Becker MY, 2004, P IEEE CSFW, P139, DOI 10.1109/CSFW.2004.1310738
   Bertino E., 1998, ACM T INFORM SYST SE, V1, P26
   Bettini L, 2002, SOFTWARE PRACT EXPER, V32, P1365, DOI 10.1002/spe.486
   Bettini L, 1998, SEVENTH IEEE INTERNATIONAL WORKSHOPS ON ENABLING TECHNOLOGIES: INFRASTRUCTURE FOR COLLABORATIVE ENTERPRISES (WET ICE '98), P110, DOI 10.1109/ENABL.1998.725680
   Bonatti P, 2005, SIXTH IEEE INTERNATIONAL WORKSHOP ON POLICIES FOR DISTRIBUTED SYSTEMS AND NETWORKS, PROCEEDINGS, P14, DOI 10.1109/POLICY.2005.13
   Busi N, 2000, INFORM COMPUT, V156, P90, DOI 10.1006/inco.1999.2823
   Capizzi S, 2004, LECT NOTES COMPUT SC, V2949, P105
   Charfi A, 2004, LECT NOTES COMPUT SC, V3250, P168
   Chen F, 2005, LECT NOTES COMPUT SC, V3440, P546
   Colman A, 2005, LECT NOTES COMPUT SC, V3454, P63
   Cuppens F, 2006, FIRST INTERNATIONAL CONFERENCE ON AVAILABILITY, RELIABILITY AND SECURITY, PROCEEDINGS, P229, DOI 10.1109/ARES.2006.36
   De Nicola R, 1998, IEEE T SOFTWARE ENG, V24, P315, DOI 10.1109/32.685256
   De Nicola R, 2000, THEOR COMPUT SCI, V240, P215, DOI 10.1016/S0304-3975(99)00232-7
   De Nicola R, 2008, LECT NOTES COMPUT SC, V5052, P100, DOI 10.1007/978-3-540-68265-3_7
   de Oliveira AS, 2007, FMSE'07: PROCEEDINGS OF THE 2007 ACM WORKSHOP ON FORMAL METHODS IN SECURITY ENGINEERING, P71
   De Win B, 2001, INT FED INFO PROC, V78, P125
   DeTreville J, 2002, P IEEE S SECUR PRIV, P105, DOI 10.1109/SECPRI.2002.1004365
   Duma C, 2007, EIGHTH IEEE INTERNATIONAL WORKSHOP ON POLICIES FOR DISTRIBUTED SYSTEMS AND NETWORKS - PROCEEDINGS, P109, DOI 10.1109/POLICY.2007.39
   Erlingsson U, 2000, P IEEE S SECUR PRIV, P246, DOI 10.1109/SECPRI.2000.848461
   Erlingsson U, 2000, NEW SECURITY PARADIGM WORKSHOP, PROCEEDINGS, P87
   Evans D, 1999, P IEEE S SECUR PRIV, P32, DOI 10.1109/SECPRI.1999.766716
   Focardi R, 2006, SCI COMPUT PROGRAM, V63, P3, DOI 10.1016/j.scico.2005.07.011
   GELERNTER D, 1985, ACM T PROGR LANG SYS, V7, P80, DOI 10.1145/2363.2433
   Georg G, 2002, IEEE INT C ENG COMP, P117, DOI 10.1109/ICECCS.2002.1181504
   Gollmann D., 1999, COMPUTER SECURITY
   Gorrieri R, 2006, FUND INFORM, V73, P479
   Hamlen KW, 2008, PLAS'08: PROCEEDINGS OF THE ACM SIGPLAN THIRD WORKSHOP ON PROGRAMMING LANGUAGES AND ANALYSIS FOR SECURITY, P11, DOI 10.1145/1375696.1375699
   Hankin C, 2008, LECT NOTES COMPUT SC, V5052, P153, DOI 10.1007/978-3-540-68265-3_10
   Hankin C, 2010, LECT NOTES COMPUT SC, V6084, P348, DOI 10.1007/978-3-642-15640-3_23
   Hankin C, 2009, PROCEEDINGS OF THE 22ND IEEE COMPUTER SECURITY FOUNDATIONS SYMPOSIUM, P234, DOI 10.1109/CSF.2009.8
   Hansen RR, 2008, ARES 2008: PROCEEDINGS OF THE THIRD INTERNATIONAL CONFERENCE ON AVAILABILITY, SECURITY AND RELIABILITY, P1104, DOI 10.1109/ARES.2008.162
   Hansen RR, 2006, FIRST INTERNATIONAL CONFERENCE ON AVAILABILITY, RELIABILITY AND SECURITY, PROCEEDINGS, P174, DOI 10.1109/ARES.2006.115
   Kagal L, 2003, LECT NOTES COMPUT SC, V2870, P402
   Kiczales G, 1997, LECT NOTES COMPUT SC, V1241, P220, DOI 10.1007/BFb0053381
   Kiczales G., 2001, ECOOP 2001 - Object-Oriented Programming. 15th European Conference. Proceedings (Lecture Notes in Computer Science Vol.2072), P327
   Lagaisse B, 2006, LECT NOTES COMPUT SC, V4290, P42
   Masuhara H, 2003, LECT NOTES COMPUT SC, V2895, P105
   Nielson F., 2005, PRINCIPLES PROGRAM A
   Nishizawa M., 2004, PROC 3 INT C AOSD LA, P7, DOI DOI 10.1145/976270.976274
   Pawlak R, 2004, SOFTWARE PRACT EXPER, V34, P1119, DOI 10.1002/spe.605
   Phung Phu H., 2008, 2008 IEEE 32nd International Computer Software and Applications Conference (COMPSAC), P1076, DOI 10.1109/COMPSAC.2008.149
   Ramachandran R., 2006, P 5 WORKSHOP ASPECTS, P1
   Sadat-Mohtasham S.Hossein., 2009, GPCE 09 P 8 INT C GE, P35
   Safran C, 2007, J AM MED INFORM ASSN, V14, P1, DOI 10.1197/jamia.M2273
   Schneider F. B., 2000, ACM Transactions on Information and Systems Security, V3, P30, DOI 10.1145/353323.353382
   Schneider FB, 2001, LECT NOTES COMPUT SC, V2000, P86
   Tanter É, 2006, LECT NOTES COMPUT SC, V4025, P316
   Terepeta Michal, 2012, Coordination Models and Languages. Proceedings 14th International Conference, COORDINATION 2012, P137, DOI 10.1007/978-3-642-30829-1_10
   Truyen E., 2008, Proceedings of the 7th International Conference on Aspect-Oriented Software Development, P120, DOI DOI 10.1145/1353482.1353497
   Vitek J, 2003, SCI COMPUT PROGRAM, V46, P163, DOI 10.1016/S0167-6423(02)00090-4
   Yang F, 2011, LECT NOTES COMPUT SC, V6721, P202, DOI 10.1007/978-3-642-21464-6_14
NR 68
TC 2
Z9 3
U1 1
U2 11
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 1
PY 2013
VL 78
IS 9
BP 1264
EP 1277
DI 10.1016/j.scico.2012.05.008
PG 14
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 179QJ
UT WOS:000321536100005
OA hybrid
DA 2024-07-18
ER

PT J
AU Saito, C
   Igarashi, A
AF Saito, Chieri
   Igarashi, Atsushi
TI Matching <i>MyType</i> to subtyping
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Binary methods; Dynamic dispatch; Exact types; MyType; Subtyping
AB The notion of MyType has been proposed to promote type-safe reuse of binary methods and recently extended to mutually recursive definitions. It is well known, however, that MyType does not match with subtyping well. In current type systems, type safety is guaranteed at the expense of subtyping, and hence dynamic dispatch. In this article, we propose two mechanisms, namely, nonheritable methods and exact statements to remedy the mismatch between MyType and subtyping. We rigorously prove their safety by modeling them in a small calculus. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Saito, Chieri; Igarashi, Atsushi] Kyoto Univ, Kyoto 6068501, Japan.
C3 Kyoto University
RP Igarashi, A (corresponding author), Kyoto Univ, Kyoto 6068501, Japan.
EM saito@kuis.kyoto-u.ac.jp; igarashi@kuis.kyoto-u.ac.jp
RI Igarashi, Atsushi/AAP-4323-2020
OI Igarashi, Atsushi/0000-0002-5143-9764
FU MEXT of Japan [18200001, 18700026]; Grants-in-Aid for Scientific
   Research [18200001, 18700026] Funding Source: KAKEN
FX Comments from anonymous reviewers help improve the presentation of the
   present article. We would like to thank members of the Kumiki project
   for fruitful discussions on this subject. This work was supported in
   part by Grant-in-Aid for Scientific Research No. 18200001 and
   Grant-in-Aid for Young Scientists (B) No. 18700026 from MEXT of Japan.
   Saito was a research fellow of the Japan Society for the Promotion of
   Science for Young Scientists.
CR Abadi M., 1998, A Theory of Objects
   Bracha G, 1998, ACM SIGPLAN NOTICES, V33, P183, DOI 10.1145/286942.286957
   Bruce K., 1995, Theory and Practice of Object Systems, V1, P221
   Bruce K. B., 1994, Journal of Functional Programming, V4, P127, DOI 10.1017/S0956796800001039
   Bruce KB, 1997, LECT NOTES COMPUT SC, V1241, P104, DOI 10.1007/BFb0053376
   Canning Peter, 1989, C FUNCT PROGR LANG C, P273, DOI [10.1145/99370.99392, DOI 10.1145/99370.99392]
   Clarke D., 2007, P INT C ASP OR SOFTW, P121
   Ernst E, 2003, LECT NOTES COMPUT SC, V2743, P303
   ERNST E, 2001, LNCS, V2072, P00303
   GAMMA E, 1995, DESIGN PATTERNS
   Igarashi A, 2001, ACM T PROGR LANG SYS, V23, P396, DOI 10.1145/503502.503505
   Igarashi A, 2006, ACM T PROGR LANG SYS, V28, P795, DOI 10.1145/1152649.1152650
   Madsen O. Lehrmann, 1993, Object Oriented Programming in the BETA Programming Language
   Nystrom N, 2004, ACM SIGPLAN NOTICES, V39, P99, DOI 10.1145/1035292.1028986
   Nystrom N, 2006, ACM SIGPLAN NOTICES, V41, P21, DOI 10.1145/1167515.1167476
   Odersky M, 2005, ACM SIGPLAN NOTICES, V40, P41, DOI 10.1145/1103845.1094815
   Odersky M, 2003, LECT NOTES COMPUT SC, V2743, P201
   Saito C, 2008, J FUNCT PROGRAM, V18, P285, DOI 10.1017/S0956796807006405
   Saito C, 2008, J OBJECT TECHNOL, V7, P67, DOI 10.5381/jot.2008.7.5.a3
   Saito C, 2009, ACM SIGPLAN NOTICES, V44, P263, DOI 10.1145/1639949.1640109
   Torgersen M, 2004, LECT NOTES COMPUT SC, V3086, P123
   Torgersen M., 2004, J OBJECT TECHNOLOGY, V3, P97
   Wadler Philip., 1998, DISCUSSION JAVA GENE
   Winter M, 2006, FUND INFORM, V71, P477
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
NR 35
TC 1
Z9 1
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUL 1
PY 2013
VL 78
IS 7
BP 933
EP 952
DI 10.1016/j.scico.2012.12.010
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 164PJ
UT WOS:000320421700011
OA Bronze
DA 2024-07-18
ER

PT J
AU Barnat, J
   Brim, L
   Rockai, P
AF Barnat, Jiri
   Brim, Lubos
   Rockai, Petr
TI On-the-fly parallel model checking algorithm that is optimal for
   verification of weak LTL properties
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 11th International Conference on Formal Engineering Methods (ICFEM)
CY DEC 09-12, 2009
CL Rio de Janeiro, BRAZIL
SP Pontificia Univ Catolica Rio de Janeiro, Univ York, Inst Mil Engenharia
DE Explicit model checking; Parallel; On-the-fly; Partial order reduction
ID DIVINE
AB One of the most important open problems of parallel LTL model checking is to design an on-the-fly scalable parallel algorithm with linear time complexity. Such an algorithm would provide the same optimality we have in sequential LTL model checking. In this paper we give a partial solution to the problem: we propose an algorithm that has the required properties for a very rich subset of LTL properties, namely those expressible by weak Buchi automata. In addition to the previous version of the paper (Barnat et al., 2009) [1], we demonstrate how our new algorithm can be efficiently combined with a particular parallel technique for Partial Order Reduction and report on additional experiments. (C) 2011 Elsevier B.V. All rights reserved.
C1 [Barnat, Jiri; Brim, Lubos; Rockai, Petr] Masaryk Univ, Brno 60200, Czech Republic.
C3 Masaryk University Brno
RP Barnat, J (corresponding author), Masaryk Univ, Bot 68A, Brno 60200, Czech Republic.
EM barnat@fi.muni.cz; brim@fi.muni.cz; xrockai@fi.muni.cz
RI Brim, Luboš/J-3268-2013; Barnat, Jiří/J-3212-2013
OI Brim, Luboš/0000-0001-9393-7545; Rockai, Petr/0000-0002-8484-1063;
   Barnat, Jiri/0000-0003-2044-2861
CR [Anonymous], 1986, P 1 S LOG COMP SCI I
   [Anonymous], DIVINE DISTR VER ENV
   Barnat Jiri, 2010, Proceedings of the 2010 8th IEEE International Conference on Software Engineering and Formal Methods (SEFM 2010), P222, DOI 10.1109/SEFM.2010.35
   Barnat J, 2007, LECT NOTES COMPUT SC, V4590, P281
   Barnat J, 2006, LECT NOTES COMPUT SC, V4144, P278, DOI 10.1007/11817963_26
   Barnat J, 2009, LECT NOTES COMPUT SC, V5885, P407, DOI 10.1007/978-3-642-10373-5_21
   Barnat J, 2008, LECT NOTES COMPUT SC, V5311, P234, DOI 10.1007/978-3-540-88387-6_20
   Bosnacki Dragan, 2009, International Journal on Software Tools for Technology Transfer, V11, P39, DOI 10.1007/s10009-008-0093-y
   Brim L, 2005, ELECTRON NOTES THEOR, V128, P63, DOI 10.1016/j.entcs.2004.10.019
   Brim L, 2004, LECT NOTES COMPUT SC, V3312, P352
   Cerná I, 2003, LECT NOTES COMPUT SC, V2747, P318
   Cerná I, 2003, LECT NOTES COMPUT SC, V2648, P49
   Clarke EM, 1999, MODEL CHECKING, P1
   COURCOUBETIS C, 1991, LECT NOTES COMPUT SC, V531, P233, DOI 10.1007/BFb0023737
   Dwyer M. B., 1998, Proceedings of FMSP'98. Second Workshop on Formal Methods in Software Practice, P7, DOI 10.1145/298595.298598
   Edelkamp S, 2006, LECT NOTES COMPUT SC, V3925, P1
   Edelkamp S., 2004, International Journal on Software Tools for Technology Transfer, V5, P247, DOI 10.1007/s10009-002-0104-3
   Edelkamp S., 2001, Model Checking Software. 8th International SPIN Workshop. Proceedings (Lecture Notes in Computer Science Vol.2057), P57
   Geldenhuys J, 2005, THEOR COMPUT SCI, V345, P60, DOI 10.1016/j.tcs.2005.07.004
   GODEFROID P, 1994, INFORM COMPUT, V110, P305, DOI 10.1006/inco.1994.1035
   Hammer M, 2005, LECT NOTES COMPUT SC, V3440, P191
   Holzmann GJ, 2007, IEEE T SOFTWARE ENG, V33, P659, DOI 10.1109/TSE.2007.70724
   KAHN AB, 1962, COMMUN ACM, V5, P558, DOI 10.1145/368996.369025
   Kaivola R, 2009, LECT NOTES COMPUT SC, V5643, P414, DOI 10.1007/978-3-642-02658-4_32
   Kurshan R, 1998, LECT NOTES COMPUT SC, V1384, P345, DOI 10.1007/BFb0054182
   LERDA F, 1999, LNCS, V1680
   Pelánek R, 2007, LECT NOTES COMPUT SC, V4595, P263
   Peled D, 1998, LECT NOTES COMPUT SC, V1427, P17, DOI 10.1007/BFb0028727
   Peled D., 1993, Proceedings of the 5th International Conference on Computer Aided Verification, V697, P409
   Rockai P., 2009, THESIS MASARYK U
   Schwoon S, 2005, LECT NOTES COMPUT SC, V3440, P174
   Tarjan R., 1972, SIAM Journal on Computing, V1, P146, DOI 10.1137/0201010
   Vardi MY, 2007, LECT NOTES COMPUT SC, V4349, P137
NR 33
TC 5
Z9 6
U1 0
U2 18
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 1
PY 2012
VL 77
IS 12
SI SI
BP 1272
EP 1288
DI 10.1016/j.scico.2011.03.001
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 005EH
UT WOS:000308732800004
OA hybrid
DA 2024-07-18
ER

PT J
AU Kemper, S
AF Kemper, S.
TI SAT-based verification for timed component connectors
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Timed constraint automata; Abstraction refinement; Model checking; SAT;
   Component-based software engineering
ID BOUNDED MODEL CHECKING; ABSTRACTION REFINEMENT
AB Component-based software construction relies on suitable models underlying components, and in particular the coordinators which orchestrate component behaviour. Verifying correctness and safety of such systems amounts to model checking the underlying system model. The model checking techniques not only need to be correct (since system sizes increase), but also scalable and efficient.
   In this paper, we present a SAT-based approach for bounded model checking of Timed Constraint Automata, which permits true concurrency in the timed orchestration of components. We present an embedding of bounded model checking into propositional logic with linear arithmetic. We define a product that is linear in the size of the system, and in this way overcome the state explosion problem to deal with larger systems. To further improve model checking performance, we show how to embed our approach into an extension of counterexample guided abstraction refinement with Craig interpolants. (c) 2011 Elsevier B.V. All rights reserved.
C1 Ctr Wiskunde Informat, Amsterdam, Netherlands.
RP Kemper, S (corresponding author), Ctr Wiskunde Informat, Amsterdam, Netherlands.
EM s.kemper@cwi.nl
FU Dutch BSIK/BRICKS
FX Part of this research has been funded by the Dutch BSIK/BRICKS project.
CR Alur R., 1999, Computer Aided Verification. 11th International Conference, CAV'99. Proceedings (Lecture Notes in Computer Science Vol.1633), P8
   [Anonymous], 2000, Introduction to Process Algebra
   Arbab F, 2004, MATH STRUCT COMP SCI, V14, P329, DOI 10.1017/S0960129504004153
   ARBAB F, 2004, ELECT NOTES THEORETI, V97, P25
   Arbab F, 2007, SOFTW SYST MODEL, V6, P59, DOI 10.1007/s10270-006-0009-9
   Arbab Farhad., 1998, Bulletin of the Dutch Association for Theoretical Computer Science NVTI, P11
   Audemard G, 2002, LECT NOTES COMPUT SC, V2529, P243
   Baeten J.C. M., 2002, MONO THEOR COMP SCI
   Baeten JCM, 2005, THEOR COMPUT SCI, V335, P131, DOI 10.1016/j.tcs.2004.07.036
   Berry G, 2000, FOUNDAT COMPUT, P425
   Biere A, 2003, ADV COMPUT, V58, P117
   Bonsangue M, 2009, LECT NOTES COMPUT SC, V5521, P184, DOI 10.1007/978-3-642-02053-7_10
   CARDELLI L, 1982, LECT NOTES COMPUT SC, V140, P94
   Clarke E, 2003, J ACM, V50, P752, DOI 10.1145/876638.876643
   Clarke E, 2001, FORM METHOD SYST DES, V19, P7, DOI 10.1023/A:1011276507260
   Costa D., 2010, THESIS VRIJE U AMSTE
   Hahnle R., 1993, Methodologies for Intelligent Systems. 7th International Symposium, ISMIS '93 Proceedings, P49
   Henzinger TA, 2004, ACM SIGPLAN NOTICES, V39, P232, DOI 10.1145/982962.964021
   Jhala R, 2005, LECT NOTES COMPUT SC, V3576, P39
   Kemper S, 2009, ELECTRON NOTES THEOR, V255, P103, DOI 10.1016/j.entcs.2009.10.027
   Kemper S, 2007, ELECTRON NOTES THEOR, V182, P107, DOI 10.1016/j.entcs.2006.09.034
   Larsen K. G., 1987, Automata, Languages and Programming. 14th International Colloquium Proceedings, P126
   McMillan KL, 2004, LECT NOTES COMPUT SC, V2988, P16
   Milner R., 1989, Communication and concurrency
   MILNER R, 1983, THEOR COMPUT SCI, V25, P267, DOI 10.1016/0304-3975(83)90114-7
   Moskewicz MW, 2001, DES AUT CON, P530, DOI 10.1109/DAC.2001.935565
   Pratt Vaughn, 1991, P 18 ACM SIGPLANSIGA, P311, DOI DOI 10.1145/99583.99625
   REED GM, 1988, THEOR COMPUT SCI, V58, P249, DOI 10.1016/0304-3975(88)90030-8
   Tripakis S., 1999, Formal Methods for Real-Time and Probabilistic Systems. 5th International AMAST Workshop, ARTS'99. Proceedings, P299
   YI W, 1991, LECT NOTES COMPUT SC, V510, P217
NR 30
TC 7
Z9 7
U1 0
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUL 1
PY 2012
VL 77
IS 7-8
SI SI
BP 779
EP 798
DI 10.1016/j.scico.2011.02.003
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 944DU
UT WOS:000304179400002
OA Bronze, Green Published
DA 2024-07-18
ER

PT J
AU Ruhroth, T
   Wehrheim, H
AF Ruhroth, Thomas
   Wehrheim, Heike
TI Model evolution and refinement
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Evolution; Refinement; Formal methods; Object-Z; Refactoring
ID BEHAVIORAL SUBTYPING RELATIONS
AB Software changes during its lifetime. Likewise, software models change during their design time, e.g. by removing, adding or changing operations and classes. This is referred to as model evolution. In a refinement-based approach to software design, we moreover do not deal with a single but with a chain of models (viz, formal specifications), related via refinement. Changes thus need to be consistently made to all specifications in the chain so as to keep the refinement structure.
   In this paper, we develop co-evolutions of models in the context of the formal method Object-Z. More specifically, given a particular evolution of a specification we show how to construct a corresponding evolution for its refinements such that the refinement relationship is kept. A chain of models can thus be systematically and consistently evolved, while maintaining the given refinement structure. (C) 2011 Elsevier B.V. All rights reserved.
C1 [Ruhroth, Thomas; Wehrheim, Heike] Univ Paderborn, Inst Informat, D-33098 Paderborn, Germany.
C3 University of Paderborn
RP Wehrheim, H (corresponding author), Univ Paderborn, Inst Informat, D-33098 Paderborn, Germany.
EM Thomas.Ruhroth@uni-paderborn.de; wehrheim@upb.de
CR Banach R, 1999, LECT NOTES COMPUT SC, V1709, P1864
   Briand LC, 2009, INFORM SOFTWARE TECH, V51, P512, DOI 10.1016/j.infsof.2008.06.002
   Cazzola W, 2007, APPLIED COMPUTING 2007, VOL 1 AND 2, P1275, DOI 10.1145/1244002.1244278
   Davies J., 1996, Using Z: Specification, Refinement and Proof
   de Roever Willem-Paul, 1998, Data Refinement Model-Oriented Proof methods and their Comparison
   Derrick J, 1999, INFORM SOFTWARE TECH, V41, P917, DOI 10.1016/S0950-5849(99)00044-0
   Derrick J., 2001, BOITEN REFINEMENT Z
   Engels G., 2002, "UML" 2002 - Unified Modeling Language. Model Engineering, Concepts, and Tools. 5th International Conference. Proceedings (Lecture Notes in Computer Science Vol.2460), P212
   Fischer C, 2000, LECT NOTES COMPUT SC, V1816, P469
   Fowler M., 2004, REFACTORING IMPROVIN
   Fu Z, 2008, TASE 2008: SECOND IFIP/IEEE INTERNATIONAL SYMPOSIUM ON THEORETICAL ASPECTS OF SOFTWARE ENGINEERING, PROCEEDINGS, P281, DOI 10.1109/TASE.2008.20
   Giese H, 2009, SOFTW SYST MODEL, V8, P21, DOI 10.1007/s10270-008-0089-9
   Groves L, 2000, SEVENTH ASIA-PACIFIC SOFTWARE ENGINEERING CONFERENCE, PROCEEDINGS, P274, DOI 10.1109/APSEC.2000.896709
   Henkel J, 2005, PROC INT CONF SOFTW, P274
   Kosiuczenko P, 2009, SOFTW SYST MODEL, V8, P165, DOI 10.1007/s10270-007-0068-6
   Krishna A., 2004, COEVOLUTION COMPLEME, P159
   LISKOV BH, 1994, ACM T PROGR LANG SYS, V16, P1811, DOI 10.1145/197320.197383
   Liu SY, 1997, THIRD IEEE INTERNATIONAL CONFERENCE ON ENGINEERING OF COMPLEX COMPUTER SYSTEMS, PROCEEDINGS, P142, DOI 10.1109/ICECCS.1997.622305
   McComb T, 2004, 2004 AUSTRALIAN SOFTWARE ENGINEERING CONFERENCE, PROCEEDINGS, P77, DOI 10.1109/ASWEC.2004.1290460
   McComb T, 2004, LECT NOTES COMPUT SC, V2984, P69
   McComb T, 2008, LECT NOTES COMPUT SC, V5051, P170, DOI 10.1007/978-3-540-68863-1_11
   McComb T, 2006, LECT NOTES COMPUT SC, V4085, P205
   Mens T, 2006, LECT NOTES COMPUT SC, V4199, P200
   Olsen T., 2002, INT C SOFTW ENG APPL
   POPPLETON M, 2006, SOFTWARE EVOLUTION F, P313
   Poppleton M., 2003, RCS 03
   Ruhroth T., 2006, NWPT NORD WORKSH PRO
   Ruhroth T, 2007, LECT NOTES COMPUT SC, V4468, P236
   Ruhroth T, 2009, LECT NOTES COMPUT SC, V5885, P620, DOI 10.1007/978-3-642-10373-5_32
   Smith Graeme., 2000, OBJECT Z SPECIFICATI
   Spivey J.M., 1992, PRENTICE HALL INT SE
   Vadera S., 1995, Formal Aspects of Computing, V7, P183, DOI 10.1007/BF01211605
   Van Der Straeten R, 2007, SOFTW SYST MODEL, V6, P139, DOI 10.1007/s10270-006-0025-9
   Wehrheim H, 2003, FORM METHOD SYST DES, V23, P143, DOI 10.1023/A:1024764232069
NR 34
TC 4
Z9 4
U1 0
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR 1
PY 2012
VL 77
IS 3
BP 270
EP 289
DI 10.1016/j.scico.2011.04.007
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 898NB
UT WOS:000300748000008
OA Bronze
DA 2024-07-18
ER

PT J
AU Häubl, C
   Wimmer, C
   Mössenböck, H
AF Haeubl, Christian
   Wimmer, Christian
   Moessenboeck, Hanspeter
TI Compact and efficient strings for Java
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Java; String; Optimization; Performance
ID DESIGN
AB In several Java VMs, strings consist of two separate objects: metadata such as the string length are stored in the actual string object, while the string characters are stored in a character array. This separation causes an unnecessary overhead. Each string method must access both objects, which leads to a bad cache behavior and reduces the execution speed.
   We propose to merge the character array with the string's metadata object at run time. This results in a new layout of strings with better cache performance, fewer field accesses, and less memory overhead. We implemented this optimization for Sun Microsystems' Java HotSpot (TM) VM, so that the optimization is performed automatically at run time and requires no actions on the part of the programmer. The original class String is transformed into the optimized version and the bytecodes of all methods that allocate string objects are rewritten. All these transformations are performed by the Java HotSpot (TM) VM when a class is loaded. Therefore, the time overhead of the transformations is negligible.
   Benchmarks show an improved performance as well as a reduction of the memory usage. The performance of the SPECjbb2005 benchmark increases by 8%, and the average used memory after a full garbage collection is reduced by 19%. The peak performance of SPECjvm98 is improved by 8% on average, with a maximum speedup of 62%. (C) 2010 Elsevier B.V. All rights reserved.
C1 [Haeubl, Christian; Wimmer, Christian; Moessenboeck, Hanspeter] Johannes Kepler Univ Linz, Inst Syst Software, Christian Doppler Lab Automated Software Engn, Linz, Austria.
C3 Johannes Kepler University Linz
RP Häubl, C (corresponding author), Johannes Kepler Univ Linz, Inst Syst Software, Christian Doppler Lab Automated Software Engn, Linz, Austria.
EM haeubl@ssw.jku.at; wimmer@ssw.jku.at; moessenboeck@ssw.jku.at
RI Mössenböck, Hanspeter/C-6203-2013
OI Mössenböck, Hanspeter/0000-0001-7706-7308
CR ANANIAN CS, 2003, P 2003 C LANG COMP T, P59, DOI DOI 10.1145/780732.780741
   [Anonymous], PLDI 00
   Blackburn Stephen M., 2006, P 21 ANN ACM SIGPLAN, DOI [10.1145/1167473.1167488, DOI 10.1145/1167473.1167488, DOI 10.1145/1167515.1167488, 10.1145/1167515.1167488]
   Boldi P, 2005, SCI COMPUT PROGRAM, V54, P3, DOI 10.1016/j.scico.2004.05.003
   CASEY K, 2005, OPTIMIZATIONS JAVA I
   Chen G, 2003, ACM SIGPLAN NOTICES, V38, P282, DOI 10.1145/949343.949330
   CHEN G, 2005, P 1 ACM USENIX INT C, P68, DOI DOI 10.1145/1064979.1064990
   CYTRON R, 1991, ACM T PROGR LANG SYS, V13, P451, DOI 10.1145/115372.115320
   Gosling J., 2005, Java Language Specification, Vthird
   GRIESEMER R, 2000, SCH N WIRTH ART SIMP, P133
   Haubl Christian, 2008, P 6 INT S PRINC PRAC, P105, DOI [10.1145/1411732.1411747, DOI 10.1145/1411732.1411747]
   Kotzmann T, 2008, ACM T ARCHIT CODE OP, V5, DOI 10.1145/1369396.1370017
   LARSEN S, 2007, WHATS HOT BEA JROCKI
   Lindholm Tim., 1999, JAVA VIRTUAL MACHINE, V2nd
   Paleczny M, 2001, USENIX ASSOCIATION PROCEEDINGS JAVA(TM) VIRTUAL MACHINE RESEARCH AND TECHNOLOGY SYMPOSIUM, P1
   RUSSELL K, 2006, P ACM SIGPLAN C OBJ, P263, DOI DOI 10.1145/1167515.1167496
   Shuf Y, 2002, ACM SIGPLAN NOTICES, V37, P13, DOI 10.1145/583854.582422
   Shuf Yefim., 2002, Proceedings of the 29th ACM SIGPLAN-SIGACT symposium on Principles of programming languages, POPL '02, P295, DOI DOI 10.1145/503272.503300
   *STAND PERF EV COR, 1998, SPECJVM98 BENCHM
   *STAND PERF EV COR, 2008, SPECJVM2008 BENCHM
   Standard Performance Evaluation Corporation, 2005, SPECJBB2005 BENCHM
   *SUN MICR INC, 2007, JAV PLATF
   Tian Y. H., 2006, Proceedings of the 2006 International Conference on Software Engineering Research and Practice and Conference on Programming Languages and Compilers SERP'06, P945
   Vallee-Rai R., 1999, CASCON 1999, P125
   WIMMER C, 2007, P ACM USENIX INT C V, P12, DOI DOI 10.1145/1254810.1254813
   Wimmer C, 2008, INT SYM CODE GENER, P14
   Wimmer Christian., 2005, P ACMUSENIX INT C VI, P132
   ZILLES C, 2007, P INT S MEM MAN, P55, DOI DOI 10.1145/1296907.1296916
NR 28
TC 1
Z9 1
U1 0
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 1
PY 2010
VL 75
IS 11
SI SI
BP 1077
EP 1094
DI 10.1016/j.scico.2010.04.010
PG 18
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 641MD
UT WOS:000281129600008
DA 2024-07-18
ER

PT J
AU Mili, A
   Aharon, S
   Nadkarni, C
AF Mili, Ali
   Aharon, Shir
   Nadkarni, Chaitanya
TI Mathematics for reasoning about loop functions
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Functional extraction; Loop function; Sub-goal induction theorem; Mills'
   theorem
AB The criticality of modern software applications, the pervasiveness of malicious code concerns, the emergence of third-party software development, and the preponderance of program inspection as a quality assurance method all place a great premium on the ability to analyze programs and derive their function in all circumstances of use and all its functional detail. For C-like programming languages, one of the most challenging tasks in this endeavor is the derivation of loop functions. In this paper, we outline the premises of our approach to this problem, present some mathematical results, and discuss how these results can be used as a basis for building an automated tool that derives the function of while loops tinder some conditions. (C) 2009 Elsevier B.V. All rights reserved.
C1 [Mili, Ali; Aharon, Shir; Nadkarni, Chaitanya] New Jersey Inst Technol, Coll Comp Sci, Newark, NJ 07102 USA.
C3 New Jersey Institute of Technology
RP Mili, A (corresponding author), New Jersey Inst Technol, Coll Comp Sci, Newark, NJ 07102 USA.
EM mili@cis.njit.edu
OI mili, amira/0000-0003-3002-7303
CR [Anonymous], 1981, SCI PROGRAMMING, DOI DOI 10.1007/978-1-4612-5983-1
   [Anonymous], 2007, 1 INT WORKSH INV GEN
   [Anonymous], 1998, International Series in Computer Sciences
   [Anonymous], P ACM S SYMB ALG COM
   [Anonymous], 2004, P ACM SIGPLAN PRINCI
   [Anonymous], ADV SYMBOLIC ANAL CO
   [Anonymous], P 4 ACM S PRINC PROG
   [Anonymous], P 11 WORK C REV ENG
   [Anonymous], P 19 ANN S LOG COMP
   [Anonymous], P 5 INT C GEN PROGR
   [Anonymous], COMMUNICATIONS ACM
   Back RJR, 1999, ACTA INFORM, V36, P295, DOI 10.1007/s002360050163
   Banerjee U., 1993, Loop Transformations for Restructuring Compilers: The Foundations
   Boudriga N., 1992, Formal Aspects of Computing, V4, P544, DOI 10.1007/BF01211474
   CARBONNELL ER, 2004, LECT NOTES COMPUTER, V3407, P325
   Colón MA, 2003, LECT NOTES COMPUT SC, V2725, P420
   COUSOT P, **DROPPED REF**
   Dijkstra E. W., 1976, A Discipline of Pro-gramming
   DUNLOP DD, 1984, IEEE T SOFTWARE ENG, V10, P275, DOI 10.1109/TSE.1984.5010236
   Ernst M.D., 2006, DAIKON SYSTEM DYNAMI
   HOARE CAR, 1969, COMMUN ACM, V12, P576, DOI 10.1145/363235.363259
   Jebelean T., 2007, 1 INT WORKSH INV GEN
   KARR M, 1976, ACTA INFORM, V6, P133, DOI 10.1007/BF00268497
   KOVACS L, 2005, P COMP AID VER INF S, P16
   MANNA Z, 1974, MATH THEORY COMPLITA
   MARLOWE TJ, 1990, ACTA INFORM, V28, P121, DOI 10.1007/BF01237234
   Mili Ali., 1985, Acta Informatica
   MORRIS JH, 1977, CURRENT TRENDS PROGR, V2, pCH8
   SCHOLZ B, 2003, ADV SYMBOLIC ANAL OF
   Sharir Micha, 1981, PROGRAM FLOW ANAL TH
   TARSKI A, 1941, J SYMBOLIC LOGIC, V6
   Tarski A., 1955, PAC J MATH, V5, P285, DOI DOI 10.2140/PJM.1955.5.285
NR 32
TC 9
Z9 9
U1 0
U2 0
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV
PY 2009
VL 74
IS 11-12
BP 989
EP 1020
DI 10.1016/j.scico.2009.09.009
PG 32
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 533IX
UT WOS:000272818200004
DA 2024-07-18
ER

PT J
AU Danvy, O
   Millikin, K
AF Danvy, Olivier
   Millikin, Kevin
TI Refunctionalization at work
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 8th International Conference on Mathematics of Program Construction
CY JUL 03-05, 2006
CL Kuressaare, ESTONIA
SP Estonian Minist Educ & Res, Natl Ctr Excellence Programme
DE Defunctionalization; Refunctionalization; Abstract machines;
   Continuations; Continuation-passing style (CPS); Shunting-yard algorithm
ID FUNCTIONAL CORRESPONDENCE; EVALUATORS; OPERATOR; BACK
AB We present the left inverse of Reynolds' defunctionalization and we show its relevance to programming and to programming languages. We propose two methods to transform a program that is almost in defunctionalized form into one that is actually in defunctionalized form, and we illustrate them with a recognizer for Dyck words and with Dijkstra's shunting-yard algorithm. (C) 2009 Elsevier B.V. All rights reserved.
C1 [Danvy, Olivier; Millikin, Kevin] Aarhus Univ, Dept Comp Sci, DK-8200 Aarhus N, Denmark.
C3 Aarhus University
RP Danvy, O (corresponding author), Aarhus Univ, Dept Comp Sci, Aabogade 34, DK-8200 Aarhus N, Denmark.
EM danvy@brics.dk; kmillikin@brics.dk
CR Ager Mads Sig, 2003, Proceedings of the 5th ACM SIGPLAN International Conference on Principles and Practice of Declaritive Programming, P8, DOI DOI 10.1145/888251.888254
   Ager MS, 2005, THEOR COMPUT SCI, V342, P149, DOI 10.1016/j.tcs.2005.06.008
   Ager MS, 2004, INFORM PROCESS LETT, V90, P223, DOI 10.1016/j.ipl.2004.02.012
   AGER MS, 2006, THESIS U AARHUS
   Banerjee Anindya, 2001, Lecture Notes in Computer Science, V2215, P420, DOI [DOI 10.1007/3-540-45500-0_21, 10.1007/3-540-45500-0_21]
   Bell JM, 1997, ACM SIGPLAN NOTICES, V32, P25, DOI 10.1145/258949.258953
   Biernacka M, 2007, THEOR COMPUT SCI, V375, P76, DOI 10.1016/j.tcs.2006.12.028
   Biernacka M, 2005, LOG METH COMPUT SCI, V1, DOI 10.2168/LMCS-1(2:5)2005
   Biernacka M, 2008, ACM T COMPUT LOG, V9, DOI 10.1145/1297658.1297664
   Biernacki D, 2006, SCI COMPUT PROGRAM, V60, P274, DOI 10.1016/j.scico.2006.01.002
   Biernacki D, 2003, LECT NOTES COMPUT SC, V3018, P143
   BIERNACKI D, ACM T PROGR IN PRESS
   BIERNACKI D, 2005, THESIS U AARHUS
   BONDORF A, 1990, 9017 DIKU COP COMP S
   BOQUIST U, 1999, THESIS CHALMERS U TE
   Burge WilliamH., 1975, RECURSIVE PROGRAMMIN
   Cejtin H, 2000, LECT NOTES COMPUT SC, V1782, P56
   Clements J, 2004, ACM T PROGR LANG SYS, V26, P1029, DOI 10.1145/1034774.1034778
   Clinger W. D., 1985, Algebraic Methods in Semantics, P237
   Consel C., 1993, Proceedings of the ACM SIGPLAN Symposium on Partial Evaluation and Semantics-Based Program Manipulation. PEPM'93, P145, DOI 10.1145/154630.154645
   Cregut Pierre, 2007, Higher-Order and Symbolic Computation, V20, P209, DOI 10.1007/s10990-007-9015-z
   CURIEN PL, 1993, PROGR THEORETICAL CO
   Danvy O, 2005, FUND INFORM, V66, P397
   Danvy O, 2005, LECT NOTES COMPUT SC, V3474, P52
   DANVY O, 1994, SCI COMPUT PROGRAM, V22, P183, DOI 10.1016/0167-6423(94)00003-4
   DANVY O, 1990, PROCEEDINGS OF THE 1990 ACM CONFERENCE ON LISP AND FUNCTIONAL PROGRAMMING, P151, DOI 10.1145/91556.91622
   DANVY O, 1999, ELECT NOTES THEOR CO, V26, P21
   DANVY O, 2004, J FUNCT LOGIC PROGRA
   DANVY O, 2004, PREL VERS P 2 INT WK
   DANVY O, 1992, P 1992 ACM C LISP FU, V5, P299
   Danvy O., 2006, THESIS U AARHUS
   Danvy O, 2008, LOG METH COMPUT SCI, V4, DOI 10.2168/LMCS-4(4:12)2008
   Danvy Olivier., 1992, MATH STRUCT COMP SCI, V2, P361, DOI DOI 10.1017/S0960129500001535
   Danvy Olivier, 2001, Proceedings of the 3rd ACM SIGPLAN International Conference on Principles and Practice of Declarative Programming. PPDP'01, P162, DOI DOI 10.1145/773184.773202
   DIJKSTRA DW, 1968, 215 EWD
   DIJKSTRA EW, 1968, COMMUN ACM, V11, P147, DOI 10.1145/362929.362947
   DIJKSTRA EW, 1993, 1166 EWD
   DUTCHYN CJ, 2007, ACM INT C P SERIES, V206, P45
   FELLEISEN M, 1987, COMPUT LANG, V12, P197, DOI 10.1016/0096-0551(87)90022-1
   FELLEISEN M, 1988, 15TH ANN ACM S PRINC, P180
   Felleisen Matthias, 1986, P IFIP TC 2WG22 WORK
   Filliâtre JC, 2003, J FUNCT PROGRAM, V13, P945, DOI 10.1017/S0956796803004763
   FLOYD RW, 1963, J ACM, V10, P316, DOI 10.1145/321172.321179
   GRAUNKE PT, 2004, AUTOMAT SOFTW ENG, V11, P337
   Grégoire B, 2002, ACM SIGPLAN NOTICES, V37, P235, DOI 10.1145/583852.581501
   Harper R., 1999, Journal of Functional Programming, V9, P463, DOI 10.1017/S0956796899003378
   HENDERSON P, 1976, 3RD ACM S PRINC PROG, P95
   HUGHES RJM, 1986, INFORM PROCESS LETT, V22, P141, DOI 10.1016/0020-0190(86)90059-1
   JOHNSSON T, 1985, LECT NOTES COMPUT SC, V201, P190
   KLUGE WE, 2005, TEXTS THEORETICAL CO
   LESCANNE P, 1994, 21 ANN ACM S PRINC P, P60
   MCCARTHY J, 1977, SIGART NEWSLETTER, V61
   MIDTGAARD J, 2007, THESIS U AARHUS
   MILLIKIN K, 2007, THESIS U AARHUS
   MUNK J, 2007, THESIS U AARHUS
   NIELSEN LR, 2000, RS0047 BRICS U AARH
   Plotkin G. D., 1975, Theoretical Computer Science, V1, P125, DOI 10.1016/0304-3975(75)90017-1
   Pottier F., 2006, Higher-Order and Symbolic Computation, V19, P125, DOI 10.1007/s10990-006-8611-7
   Reynolds J. C., 1998, Higher-Order and Symbolic Computation, V11, P355, DOI 10.1023/A:1010075320153
   Reynolds J. C., 1998, Higher-Order and Symbolic Computation, V11, P363, DOI 10.1023/A:1010027404223
   Reynolds J. C., 1993, LISP and Symbolic Computation, V6, P233, DOI 10.1007/BF01019459
   Reynolds J.C., 1998, Theories of Programming Languages
   Schmidt David A., 2007, Higher-Order and Symbolic Computation, V20, P333, DOI 10.1007/sl0990-007-9017-x
   Schmidt David A., 2007, Higher-Order and Symbolic Computation, V20, P319, DOI 10.1007/s10990-007-9012-2
   Schmidt DA, 1980, LECT NOTES COMPUTER, P415, DOI [10.1007/3-540-10250-732, DOI 10.1007/3-540-10250-732]
   SHIVERS O, 1991, CMUCS91145 SCH COMP
   STEELE GL, 1978, AITR474 MIT ART INT
   Tolmach A., 1998, Journal of Functional Programming, V8, P367, DOI 10.1017/S0956796898003086
   Wadsworth C.P., 1980, HB CURRY ESSAYS COMB, P215
   WARREN D. H. D., 1982, MACH INTELL, V10, P441
   Yi K, 2006, J FUNCT PROGRAM, V16, P663, DOI 10.1017/S0956796806006149
NR 71
TC 24
Z9 27
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 1
PY 2009
VL 74
IS 8
SI SI
BP 534
EP 549
DI 10.1016/j.scico.2007.10.007
PG 16
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 454GZ
UT WOS:000266671700003
DA 2024-07-18
ER

PT J
AU Hindle, A
   Godfrey, MW
   Holt, RC
AF Hindle, Abram
   Godfrey, Michael W.
   Holt, Richard C.
TI Reading beside the lines: Using indentation to rank revisions by
   complexity
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 16th IEEE International Conference on Program Comprehension
CY JUN 10-13, 2008
CL Amsterdam, NETHERLANDS
SP IEEE Comp Soc, IEEE Comp Soc TCSE
DE Indentation; Complexity; McCabe; Halstead; Metrics
ID SOFTWARE METRICS; MAINTAINABILITY; STYLE
AB Maintainers Often face the daunting task of wading through a collection of both new and old revisions, trying to ferret out those that warrant detailed inspection. Perhaps the Most Obvious Way to rank revisions is by lines of code (LOC); this technique has the advantage of being both simple and fast. However, most revisions are quite small, and so we would like a way of distinguishing between simple and complex changes of equal size. Classical complexity metrics, such as Halstead's and McCabe's, could be used but they are hard to apply to code fragments of different programming languages. We propose a language-indepenclent approach to ranking revisions based on the indentation of their code fragments. We use the statistical moments of indentation as a lightweight and revision/diff friendly metric to proxy classical complexity metrics. We found that ranking revisions by the variance and summation of indentation was very similar to ranking revisions by traditional complexity measures since these measures correlate with both Halstead and McCabe complexity: this was evaluated against the CVS histories of 278 active and popular SourceForge projects. Thus, we conclude that measuring indentation alone can serve as a cheap and accurate proxy for computing the code complexity of revisions. (C) 2009 Elsevier B.V. All rights reserved.
C1 [Hindle, Abram; Godfrey, Michael W.; Holt, Richard C.] Univ Waterloo, Software Architecture Grp, Waterloo, ON N2L 3G1, Canada.
C3 University of Waterloo
RP Hindle, A (corresponding author), Univ Waterloo, Software Architecture Grp, Waterloo, ON N2L 3G1, Canada.
EM ahindle@cs.uwaterloo.ca; migod@cs.uwaterloo.ca; holt@cs.uwaterloo.ca
RI Godfrey, Michael W/A-1068-2008
CR BERRY RE, 1985, COMMUN ACM, V28, P80, DOI 10.1145/2465.2469
   Chen X, 2004, IEEE T INFORM THEORY, V50, P1545, DOI 10.1109/TIT.2004.830793
   COLEMAN D, 1994, COMPUTER, V27, P44, DOI 10.1109/2.303623
   Conway D, 2005, PERL BEST PRACTICES
   FINDLER RB, 2007, PLTTR20073V371
   GERMAN DM, 2005, P 11 INT SOFTW METR
   GONG H, 1985, SIGMETRICS PERFORM E, V13, P14
   GORLA N, 1990, IEEE T SOFTWARE ENG, V16, P223, DOI 10.1109/32.44385
   Halstead M.H., 1977, OPERATING PROGRAMMIN
   Harrison R, 1998, IEEE T SOFTWARE ENG, V24, P491, DOI 10.1109/32.689404
   Herraiz I., 2007, Proceedings of the International Workshop on Mining Software Repositories, P21
   HINDLE A, 2008, 8 IEEE INT WORK C SO
   HINDLE A, 2008, P ICPC 2008
   Mathis R. F., 1975, SIGPLAN Notices, V10, P33, DOI 10.1145/987278.987282
   McCabe T. J., 1976, IEEE Transactions on Software Engineering, VSE-2, P308, DOI 10.1109/TSE.1976.233837
   MIARA RJ, 1983, COMMUN ACM, V26, P861, DOI 10.1145/182.358437
   MUNSON J, 1989, SOFTW ENG 1989 11 IN, P245
   *NIST SEMATECH, 2008, NIST SEMATECH E HDB
   OMAN P, 1994, J SYST SOFTWARE, V24, P251, DOI 10.1016/0164-1212(94)90067-1
   OMAN PW, 1990, COMMUN ACM, V33, P506, DOI 10.1145/78607.78611
   Power R, 2003, COMPUT LINGUIST, V29, P211, DOI 10.1162/089120103322145315
NR 21
TC 5
Z9 5
U1 0
U2 2
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAY 1
PY 2009
VL 74
IS 7
SI SI
BP 414
EP 429
DI 10.1016/j.scico.2009.02.005
PG 16
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 447XG
UT WOS:000266224700003
DA 2024-07-18
ER

PT J
AU Maurer, WD
AF Maurer, Ward Douglas
TI Partially defined computer instructions and guards
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE computer instructions; computer expressions; guards; partially defined
   functions
AB We here extend our earlier work on the theory of computer instructions to consider instructions which are only partially defined. For every such instruction, we assume that it is defined whenever a certain Boolean expression is true; we refer to such a Boolean expression as a guard, following Dijkstra. This is a special case of a more general function on the set of states of a computer, representing an expression in a programming language. Many constructs for instructions now generalize to partially defined instructions; in particular, we define the notion of conditional input and output regions, as well as the relevant region of a more general expression. Fundamental theorems about instructions generalize to theorems about guards and about partially defined instructions. We also define the parallel execution of such instructions, which is useful in validating a generalized instruction commutativity criterion. (c) 2008 Elsevier B.V. All rights reserved.
C1 George Washington Univ, Dept Comp Sci, Washington, DC 20052 USA.
C3 George Washington University
RP Maurer, WD (corresponding author), George Washington Univ, Dept Comp Sci, Washington, DC 20052 USA.
EM maurer@gwu.edu
CR DIJKSTRA EW, 1975, COMMUN ACM, V18, P453, DOI [10.1145/360933.360975, 10.1145/390016.808417]
   Hopcroft JE., 2008, Introduction to automata theory, languages, and computation
   Maurer WD, 2006, SCI COMPUT PROGRAM, V60, P244, DOI 10.1016/j.scico.2005.09.001
NR 3
TC 2
Z9 2
U1 0
U2 10
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD AUG 1
PY 2008
VL 72
IS 3
BP 220
EP 239
DI 10.1016/j.scico.2008.06.001
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 349KB
UT WOS:000259278600004
DA 2024-07-18
ER

PT J
AU Kraft, NA
   Malloy, BA
   Power, JF
AF Kraft, Nicholas A.
   Malloy, Brian A.
   Power, James F.
TI A tool chain for reverse engineering C++ applications
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE reverse engineering; graph-based tools; GXL; pipe-filter architecture;
   software metrics
AB We describe a tool chain that enables experimentation and study of real C++ applications. Our tool chain enables reverse engineering and program analysis by exploiting gcc, and thus accepts any C++ application that can be analysed by the C++ parser and front end of gcc. Our current test suite consists of large, open-source applications with diverse problem domains, including language processing and gaming. Our tool chain is designed using a GXL-based pipe-filter architecture; therefore, the individual applications and libraries that constitute our tool chain each provide a point of access. The preferred point of access is the g4api Application Programming Interface (API), which is located at the end of the chain. g4api provides access to information about the C++ program under study, including information about declarations, such as classes (including template instantiations); namespaces; functions; and variables, statements and some expressions. Access to the information is via either a pointer to the global namespace, or a list interface. (c) 2007 Elsevier B.V. All rights reserved.
C1 [Kraft, Nicholas A.; Malloy, Brian A.] Univ Alabama, Dept Comp Sci, Tuscaloosa, AL 35487 USA.
   [Power, James F.] Natl Univ Ireland, Dept Comp Sci, Maynooth, Kildare, Ireland.
C3 University of Alabama System; University of Alabama Tuscaloosa; Maynooth
   University
RP Kraft, NA (corresponding author), Univ Alabama, Dept Comp Sci, Tuscaloosa, AL 35487 USA.
EM nkraft@cs.ua.edu
OI Power, James/0000-0002-6770-3910
CR [Anonymous], 2003, C TEMPLATES TURING C
   Antoniol G, 2004, SOFTWARE QUAL J, V12, P383, DOI 10.1023/B:SQJO.0000039794.29432.7e
   ANTONIOL G, 2003, P 3 INT WORKSH SOURC
   *BELL CAN INC, 2000, DATRIX ABSTR SEM GRA
   BODIN F, 1994, 2 ANN OBJ OR NUM C O, P122
   BRIAN A, 2005, IEEE S VIS LANG HUM
   BRIAN A, 2005, ACM S SOFT VIS MAY
   CHIDAMBER SR, 1994, IEEE T SOFTWARE ENG, V20, P476, DOI 10.1109/32.295895
   Clarke PJ, 2006, INT J SOFTW ENG KNOW, V16, P585, DOI 10.1142/S0218194006002884
   DAS M, 2000, P ACM SIGPLAN C PROG, P35
   DEAN TR, 2001, WORK C REV ENG OCT
   Do H, 2004, 2004 INTERNATIONAL SYMPOSIUM ON EMPIRICAL SOFTWARE ENGINEERING, PROCEEDINGS, P60
   EBERT J, 2001, INTEROPERABILITY REE
   Ferenc R, 2002, PROC IEEE INT CONF S, P172, DOI 10.1109/ICSM.2002.1167764
   GAMMA E, 1995, DESIGN PATTERNS
   GSCHWIND T, 2004, P 11 WORK C REV ENG
   Hennessy M, 2003, PROG COMPREHEN, P298
   HOIPKEMIER BN, 2006, P 18 INT C SOFTW ENG
   HOLT R, 2003, GXL GRAPH EXCHANGE L
   Holt RC, 2000, SEVENTH WORKING CONFERENCE ON REVERSE ENGINEERING - PROCEEDINGS, P162, DOI 10.1109/WCRE.2000.891463
   *IBM JIK PROJ, JIK VERS 1 22
   *ISO IEC JTC, 1998, ASC X3
   JAMIESON AC, 2005, INT AC C FUT GAM DES
   *KEYST PROJ, KEYST VERS 0 2 3
   *KITW INC, 2005, GCC XML
   KNAPEN G, 1999, 7 INT WORKSH PROGR C
   Koppler R, 1997, SOFTWARE PRACT EXPER, V27, P637, DOI 10.1002/(SICI)1097-024X(199706)27:6<637::AID-SPE99>3.0.CO;2-3
   KRAFT NA, 2006, REVERSE ENG INFRASTR
   KRAFT NA, 2005, TRANSFORMATION TECHN
   KRAFT NA, 2005, P 12 WORK C REV ENG
   Kraft NA, 2007, INFORM SOFTWARE TECH, V49, P292, DOI 10.1016/j.infsof.2006.10.014
   Kunert A., 2008, ACM SIGSOFT SOFTWARE, V211, P111
   LANTINGA S, 2005, SIMPLE DIRECTMEDIA L
   LILLEY J, 1997, DESIGN THEORY OPERAT
   Malloy BA, 2003, ISSRE 2003: 14TH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P353, DOI 10.1109/ISSRE.2003.1251057
   Malloy BA, 2003, DR DOBBS J, V28, P54
   Malloy BA, 2003, SOFTWARE PRACT EXPER, V33, P19, DOI 10.1002/spe.493
   MERRILL J, 2003, GCC DEV SUMMIT, P171
   Murphy G. C., 1998, ACM Transactions on Software Engineering and Methodology, V7, P158, DOI 10.1145/279310.279314
   NORMAN E, 1998, SOFTWARE METRICS RIG
   Power JF, 2002, NINTH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P190, DOI 10.1109/WCRE.2002.1173077
   Power JF, 2000, 37TH INTERNATIONAL CONFERENCE ON TECHNOLOGY OF OBJECT-ORIENTED LANGUAGES AND SYSTEMS, PROCEEDINGS, P57
   REISS SP, 1995, EXPERIENCES WRITING
   ROSKIND JA, 1989, YACC ABLE C 2 1 GRAM
   *SOURC NAV TEAM, 2005, SOURC NAV IDE
   VANHEESCH D, DOXYGEN VERSION 1 3
   Wu J, 2004, PROG COMPREHEN, P241, DOI 10.1109/WPC.2004.1311067
NR 47
TC 7
Z9 8
U1 1
U2 4
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 1
PY 2007
VL 69
IS 1-3
BP 3
EP 13
DI 10.1016/j.scico.2007.01.012
PG 11
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 253CQ
UT WOS:000252496700002
OA Bronze, Green Accepted
DA 2024-07-18
ER

PT J
AU Sagonas, K
   Wilhelmsson, J
AF Sagonas, Konstantinos
   Wilhelmsson, Jesper
TI Efficient memory management for concurrent programs that use message
   passing
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE incremental and real-time garbage collection; thread-local heaps;
   message analysis; concurrent languages; mutator utilization; erlang
AB We present an efficient memory management scheme for concurrent programming languages where communication occurs by using message passing with copying semantics. The runtime system is built around process-local heaps, which frees the memory manager from redundant synchronization in a multi-threaded implementation and allows the memory reclamation of process-local heaps to be a private business and to often take place without ever triggering garbage collection. The allocator is guided by a static analysis which speculatively allocates data possibly used as messages in a shared memory area. To respect the (soft) real-time requirements of the language, we develop and present in detail a generational, incremental garbage collection scheme tailored to the characteristics of this runtime system. The incremental collector imposes no overhead on the mutator, requires no costly barrier mechanisms, has a relatively small space overhead, and can be scheduled on the basis of either a time or a work quantum. We have implemented these schemes in the context of an industrial-strength implementation of a concurrent functional language used to develop large-scale, highly concurrent, telecommunication applications. Our measurements across a range of applications indicate that the incremental collector imposes only very small overhead on the total runtime and can achieve very short pause times (1 ms or less) while being able to sustain a high degree of mutator utilization. (c) 2006 Elsevier B.V. All rights reserved.
C1 Uppsala Univ, Dept Informat Technol, Uppsala, Sweden.
C3 Uppsala University
RP Wilhelmsson, J (corresponding author), Uppsala Univ, Dept Informat Technol, Uppsala, Sweden.
EM kostis@it.uu.se; jesperw@it.uu.se
RI Sagonas, Konstantinos/IZD-8641-2023
OI Sagonas, Konstantinos/0000-0001-9657-0179
CR [Anonymous], 2002, P 3 INT S MEM MAN BE, DOI [DOI 10.1145/512429.512439, 10.1145/512429.512439]
   [Anonymous], 1998, HTTPERF TOOL MEASURI, DOI DOI 10.1145/306225.306235
   Armstrong J, 1995, LECT NOTES COMPUT SC, V986, P313
   Armstrong Joe, 1996, Concurrent Programming in Erlang
   BACON DF, 2003, P 30 ACM SIGPLAN SIG, P285
   BROOKS RA, 1984, P 1984 ACM S LISP FU, P256
   Carlsson R, 2003, LECT NOTES COMPUT SC, V2694, P73
   CHEADLE AM, 2004, P 4 ACM SIGPLAN INT, P163
   CHENEY CJ, 1970, COMMUN ACM, V13, P677, DOI 10.1145/362790.362798
   Cheng P, 1998, ACM SIGPLAN NOTICES, V33, P162, DOI 10.1145/277652.277718
   CHENG P, 2001, P ACM SIGPLAN C PROG, P125, DOI DOI 10.1145/378795.378823
   DETLEFS D, 2002, P ISMM 2002 ACM SIGP
   Doligez D., 1993, Conference Record of the Twentieth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P113, DOI 10.1145/158511.158611
   FEELEY M, 1998, P ISMM 98 ACM SIGPLA, P1
   HUELSBERGEN L, 1993, P 4 ACM SIGPLAN S PR, P73
   JOHANSSON E, 2002, P ISMM 2002 ACM SIGP, P88
   Jones R, 2005, Fifth IEEE International Workshop on Source Code Analysis and Manipulation, Proceedings, P129, DOI 10.1109/SCAM.2005.1
   Jones R.E., 1996, Garbage Collection: Algorithms for Automatic Dynamic Memory Management
   Nettles Scott, 1993, P 34 ACM SIGPLAN C P, DOI [10.1145/155090.155111, DOI 10.1145/155090.155111]
   PETTERSSON M, LINUX PERFORMANCE MO
   RUF E, 2000, P C PROGR LANG DES I, P208
   Steensgaard B., 2000, P 2 INT S MEMORY MAN, P18
   Stein L., 1999, WRITING APACHE MODUL
NR 23
TC 2
Z9 4
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 1
PY 2006
VL 62
IS 2
BP 98
EP 121
DI 10.1016/j.scico.2006.02.006
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 075VM
UT WOS:000239913600002
DA 2024-07-18
ER

PT J
AU Mitchell, A
   Power, JF
AF Mitchell, A
   Power, JF
TI A study of the influence of coverage on the relationship between static
   and dynamic coupling metrics
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT Academic Emergency Medicine Consensus Conference on Ethical Conduct of
   Resuscitation Research
CY MAY 21, 2005
CL New York, NY
DE software engineering; software metrics; coupling; coverage; regression
   analysis
AB This paper examines the relationship between the static coupling between objects (CBO) metric and some of its dynamic counterparts. The dimensions of the relationship for Java programs are investigated, and the influence of instruction coverage on this relationship is measured. An empirical evaluation of 14 Java programs taken from the SPEC JVM98 and the Jolden benchmark suites is conducted using the static CBO metric, six dynamic metrics and instruction coverage data. The results presented here confirm preliminary studies indicating the independence of static and dynamic coupling metrics, but point to a strong influence of coverage on the relationship. Based on this, this paper suggests that dynamic coupling metrics might be better interpreted in the context of coverage measures, rather than as stand-alone software metrics. (c) 2005 Elsevier B.V. All rights reserved.
C1 Natl Univ Ireland, Dept Comp Sci, Maynooth, Kildare, Ireland.
C3 Maynooth University
RP Natl Univ Ireland, Dept Comp Sci, Maynooth, Kildare, Ireland.
EM ainem@cs.nuim.ie; jpower@cs.nuim.ie
OI Power, James/0000-0002-6770-3910
CR Alexander RT, 2004, J UNIVERS COMPUT SCI, V10, P391
   [Anonymous], P 3 INT S PRINC PRAC
   Arisholm E, 2004, IEEE T SOFTWARE ENG, V30, P491, DOI 10.1109/TSE.2004.41
   Basili VR, 1996, IEEE T SOFTWARE ENG, V22, P751, DOI 10.1109/32.544352
   BINDER R, 1999, TESTING OBJECT SYSTE
   Briand LC, 2002, IEEE T SOFTWARE ENG, V28, P1106, DOI 10.1109/TSE.2002.1158285
   Briand LC, 1999, IEEE T SOFTWARE ENG, V25, P91, DOI 10.1109/32.748920
   Cahoon B, 2001, 2001 INTERNATIONAL CONFERENCE ON PARALLEL ARCHITECTURES AND COMPILATION TECHNIQUES, PROCEEDINGS, P280, DOI 10.1109/PACT.2001.953309
   CHIDAMBER SR, 1991, OOPSLA 91 CONFERENCE PROCEEDINGS : OBJECT-ORIENTED PROGRAMMING SYSTEMS, LANGUAGES, AND APPLICATIONS, P197, DOI 10.1145/118014.117970
   CHIDAMBER SR, 1994, IEEE T SOFTWARE ENG, V20, P476, DOI 10.1109/32.295895
   Coad P., 1991, OBJECT ORIENTED ANAL, V2
   DAHM M, 2004, BYTE CODE ENG LIB BC
   DUFOUR B, 2003, C OBJ OR PROGR SYST, P149
   EDER J, 1993, 293 U LINZ DEP INF S
   ERTL MA, 2003, C PROGR LANG DES IMP, P278
   Freund R., 1998, REGRESSION ANAL STAT
   HOWELLS C, GRETEL OPEN SOURCE R
   ISHIZAKI K, 2003, C OBJ OR PROGR LANG, P187
   Jolliffe I. T., 2002, PRINCIPAL COMPONENT
   Malaiya YK, 2002, IEEE T RELIAB, V51, P420, DOI 10.1109/TR.2002.804489
   Mitchell A., 2005, P 2005 ACM S APPL CO, P1456
   MITCHELL A, 2004, WINT INT S INF COMM, P1
   Mitchell Aine, 2003, 7 ECOOP WORKSH QUANT, P1
   MYERG G, 1979, ART SOFTWARE TESTIN
   *SPEC, 1998, SPEC REL SPEC JVM98
   STEVENS WP, 1974, IBM SYST J, V13, P115, DOI 10.1147/sj.132.0115
   *SUN MICR INC, JAV PLATF DEB ARCH J
   Umemori F, 2003, THIRD IEEE INTERNATIONAL WORKSHOP ON SOURCE CODE ANALYSIS AND MANIPULATION - PROCEEDINGS, P108, DOI 10.1109/SCAM.2003.1238037
   VONPRAUN C, 2003, C PROGR LANG DES IMP, P115
   Wilkie FG, 2000, J SYST SOFTWARE, V52, P157, DOI 10.1016/S0164-1212(99)00142-9
   YACOUB S, 1999, 5 INT SOFTW METR S B, P50
NR 31
TC 13
Z9 14
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN
PY 2006
VL 59
IS 1-2
BP 4
EP 25
DI 10.1016/j.scico.2005.07.002
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 993HZ
UT WOS:000233946500002
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Gross, HG
   Melideo, A
   Sillitti, A
AF Gross, HG
   Melideo, A
   Sillitti, A
TI Self-certification and trust in component procurement
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE built-in contract testing; component brokerage; CLARiFi
AB Component-based software engineering is typically perceived as application development in which existing individual software components are assembled and integrated in order to make up the final product. The main recent technological advances in this field therefore mainly focus on the integration step. This encompasses the syntactic and semantic mapping between components, the development of component wrappers and adapters, and the validation of all pair-wise component interactions. Additionally, prior to integration, components have to be located on a component market place, evaluated for their fitness for the purpose, and selected according to non-functional requirements. These activities are typically referred to as component procurement. Component brokerage platforms provide the support for these early phases of component assembly, and they are indispensable for strengthening the software component market. Although such platforms are a good at the provision of components, they are not so good at their certification.
   This article proposes the combination of two contrasting technologies, component brokerage at one end of the component technology spectrum, and built-in contract testing at its other end, that combined, may alleviate the efforts involved in component certification. This is achieved through the access mechanisms that built-in contract testing provides for components, and additional tester components through which customers can themselves assess the quality of a candidate component that is coming from a broker. Every such extended component is added to the certification according to well-defined standards, that are provided by a third party on behalf of the supplier.
C1 Delft Univ Technol, Fac Elect Engn Math & Comp Sci, EEMCS, Dept Software Technol,ST, NL-2628 CD Delft, Netherlands.
   Engn Ingn Informat SpA, R&D Lab, Rome, Italy.
   Free Univ Bolzano, Fac Comp Sci, I-39100 Bolzano, Italy.
C3 Delft University of Technology; Free University of Bozen-Bolzano
RP Gross, HG (corresponding author), Delft Univ Technol, Fac Elect Engn Math & Comp Sci, EEMCS, Dept Software Technol,ST, Mekelweg 4, NL-2628 CD Delft, Netherlands.
EM h.g.gross@ewi.tudelft.nl; melideo@eng.it; sillitti@umbz.it
CR [Anonymous], 1997, Object-oriented software construction
   APPERLY H, 2001, COMPONENT BASED SOFT
   Atkinson Colin., 2002, COMPONENT BASED PROD
   BOEGH J, 1999, SOFTWARE QUALITY PRO, V1
   Clark J, 2004, J SYST SOFTWARE, V73, P323, DOI 10.1016/j.jss.2003.09.019
   Gross H. - G., 2003, BUSINESS COMPONENT B
   GROSS HG, 2003, COMPONENT INTEGRATIO
   GROSS HG, 2002, 03002E FRAUNH I EXPT
   GROSS HG, 2002, 07302E FRAUNH I EXPT
   HENNINGER S, 1997, ACM T SOFTWARE ENG M, V6
   HENNINGER S, 1994, IEEE SOFTWARE, V11
   PRDONZANI P, 2000, STRATEGIC SOFTWARE P
   Prieto-Diaz R., 1987, IEEE SOFTWARE, V4
   SILLITTI A, 2003, INT C ENT INFORMATIO
   Succi G., 2002, International Journal of Computers & Applications, V24, P20
   SXYPERSKI C, 2002, COMPONENT SOFTWARE B
   2000, 145983 ISO
   1991, 9126 ISO
NR 18
TC 13
Z9 13
U1 0
U2 1
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD APR
PY 2005
VL 56
IS 1-2
BP 141
EP 156
DI 10.1016/j.scico.2004.11.009
PG 16
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 908SR
UT WOS:000227811000009
DA 2024-07-18
ER

PT J
AU Kantorowitz, E
   Lyakas, A
AF Kantorowitz, E
   Lyakas, A
TI Use-case components for interactive information systems
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE component; specification-oriented; specification-oriented component; use
   case; information system; user interface; world wide web; web
AB Specification-oriented components (SOC's) are designed to facilitate the implementation of a system directly from its specifications. An earlier study has shown cases in which SOC's enabled information systems to be implemented with considerably less code than when implemented with components designed by a typical object-oriented approach. This study goes a further step by considering the essence of an information system to be the flow and processing of data. The components based on this abstraction attempt to hide code that is not implementing data flow or data processing. Based on this approach, an experimental framework called WebSI has been developed. WebSI components hide the code for the construction of the user interface (UI), the database access code and the Web-related code. WebSI was designed to facilitate the manual translation of English language use-case specifications into Java code. WebSI enabled the construction of information systems with a modest amount of code. The similarity between the WebSI-based Java code and the English language use-case specifications facilitated verifying that the code implements the specifications correctly. The automatically produced UI's were relatively easy to learn and to use. The modification of WebSI-based legacy code was facilitated by the high level of the code and its use-case structure, but remained a labor-intensive task. (c) 2004 Elsevier B.V. All rights reserved.
C1 Technion Israel Inst Technol, Dept Comp Sci, IL-32000 Haifa, Israel.
C3 Technion Israel Institute of Technology
RP Technion Israel Inst Technol, Dept Comp Sci, IL-32000 Haifa, Israel.
EM kantor@cs.technion.ac.il; lyakasal@cs.technion.ac.il
CR [Anonymous], 1992, Object Oriented Software Engineering: A Use Case Driven Approach
   Calvary G, 2003, INTERACT COMPUT, V15, P289, DOI 10.1016/S0953-5438(03)00010-9
   GILROY S, 2004, EHCI DSVIS 04
   GRUDIN J, 1989, COMMUN ACM, V32, P1164, DOI 10.1145/67933.67934
   HAREL D, 1987, SCI COMPUT PROGRAM, V8, P231, DOI 10.1016/0167-6423(87)90035-9
   Harel D, 2003, SOFTWARE SYSTEM MODE, V2, P82, DOI [10.1007/s10270-002-0015-5, DOI 10.1007/S10270-002-0015-5]
   Jacobson Ivar., 1999, AW OBJ TECHNOL S
   Kantorowitz E, 1997, SOFTWARE PRACT EXPER, V27, P173, DOI 10.1002/(SICI)1097-024X(199702)27:2<173::AID-SPE77>3.0.CO;2-O
   KANTOROWITZ E, 1989, COMMUN ACM, V32, P1352, DOI 10.1145/68814.68820
   KANTOROWITZ E, 2003, SWSTE 03 IEEE INT C
   KANTOROWITZ E, 2002, WORKSH OBJ OR INF SY, V2426
   KANTOROWITZ E, 2003, ECOOP 2003, V11
   Lorenz DH, 2001, PROC INT CONF SOFTW, P253, DOI 10.1109/ICSE.2001.919099
   Paternò F, 2003, INTERACT COMPUT, V15, P349, DOI 10.1016/S0953-5438(03)00013-4
   Paterno Fabio., 1994, COMPUT GRAPH FORUM, V13, P195
   RAMBAUGH J, 1999, UNIFIED MODELING LAN
NR 16
TC 2
Z9 3
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD APR
PY 2005
VL 56
IS 1-2
BP 5
EP 21
DI 10.1016/j.scico.2004.11.002
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 908SR
UT WOS:000227811000002
DA 2024-07-18
ER

PT J
AU Watson, BW
AF Watson, BW
TI A new algorithm for the construction of minimal acyclic DFAs
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE minimal acyclic deterministic finite automata; incremental algorithm;
   recursive algorithm; algorithmics
ID INCREMENTAL CONSTRUCTION
AB We present a semi-incremental algorithm for constructing minimal acyclic deterministic finite automata. Such automata are useful for storing sets of words for spell-checking, among other applications. The algorithm is semi-incremental because it maintains the automaton in nearly minimal condition and requires a final minimization step after the last word has been added (during construction).
   The algorithm derivation proceeds formally (with correctness arguments) from two separate algorithms, one for minimization and one for adding words to acyclic automata. The algorithms are derived in such a way as to be combinable, yielding a semi-incremental one. In practice, the algorithm is both easy to implement and displays good running time performance. (C) 2003 Elsevier B.V. All rights reserved.
C1 Univ Pretoria, Dept Comp Sci, ZA-0002 Pretoria, South Africa.
C3 University of Pretoria
RP Univ Pretoria, Dept Comp Sci, ZA-0002 Pretoria, South Africa.
EM bwatson@cs.up.ac.za
CR Aho A., 1988, Compilers - Principles, Techniques and Tools
   [Anonymous], 1991, THESIS I BLAISE PASC
   [Anonymous], 1999, MODERN INFORM RETRIE
   [Anonymous], 1997, ACM SIGACT NEWS
   Brzozowski J.A., 1962, Microwave Research Institute Symposia Series, V12, P529
   Brzozowski J.A., 1962, PhD thesis
   Carrasco RC, 2002, COMPUT LINGUIST, V28, P207, DOI 10.1162/089120102760173652
   CIURA M, 1999, EXPT STUDY FINITE AU
   Crochemore M., 1994, TEXT ALGORITHMS
   Daciuk J, 2000, COMPUT LINGUIST, V26, P3, DOI 10.1162/089120100561601
   Daciuk J., 1998, Proceedings of the International Workshop on Finite State Methods in Natural Language Processing, P48
   DACIUK J, 1998, THESIS TU GDANSK POL
   Dijkstra E. W., 1976, A Discipline of Pro-gramming
   GONNET GH, 1991, HDB ALGORITHMS DATA
   GRANA J, 2001, P 6 C IMPL APPL AUT, P116
   GRIES D, 1980, SCI COMPUTER PROGRAM
   HOLZMANN GJ, 1998, SOFTWARE TOOLS TECHN, V3, P1
   Hopcroft J.E., 1979, Introduction to Automata Theory, Languages, and Computation
   Jurafsky D., 2000, Speech and language processing: An introduction to natural language processing, computational linguistics, and speech recognition
   MIHOV S, 1999, THESIS BULGARIAN ACA
   Mihov Stoyan., 1999, Direct building of minimal automaton for given list
   PARK KH, 1994, INT J COMPUT MATH, V54, P155, DOI 10.1080/00207169408804348
   Pevzner P.A., 2000, COMPUTATIONAL MOL BI
   REVUZ D, 1992, THEOR COMPUT SCI, V92, P181, DOI 10.1016/0304-3975(92)90142-3
   REVUZ D, 2000, PREPROCEEDINGS CIAA, P226
   Sgarbas K. N., 1995, International Journal on Artificial Intelligence Tools (Architectures, Languages, Algorithms), V4, P369, DOI 10.1142/S0218213095000188
   Watson B. W., 2001, South African Computer Journal, P12
   WATSON BW, 2000, J UNIVERSAL COMPUT S, V8, P2
   WATSON BW, 2001, P 2 INT WORKSH FIN S
   WATSON BW, 1998, LECT NOTES COMPUTER, V1660, P91
   WATSON BW, 2002, GRAMMARS AUTOMATA ST
NR 31
TC 10
Z9 18
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD AUG-SEP
PY 2003
VL 48
IS 2-3
BP 81
EP 97
DI 10.1016/S0167-6423(03)00012-1
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 719YB
UT WOS:000185231700001
OA Bronze
DA 2024-07-18
ER

PT J
AU Aldrich, J
   Sirer, EG
   Chambers, C
   Eggers, SJ
AF Aldrich, J
   Sirer, EG
   Chambers, C
   Eggers, SJ
TI Comprehensive synchronization elimination for Java
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 6th International Symposium on Static Analysis
CY SEP 22-24, 1999
CL VENICE, ITALY
SP EALPS, ALP, CNR, Compulog, Ca Foscari Univ, Padova Univ
AB In this paper, we describe three novel analyses for eliminating unnecessary synchronization that remove over 70% of dynamic synchronization operations on the majority of our 15 benchmarks and improve the bottom-line performance of three by 37-53%. Our whole-program analyses attack three frequent forms of unnecessary synchronization: thread-local synchronization, reentrant synchronization, and enclosed lock synchronization. We motivate the design of our analyses with a study of the kinds of unnecessary synchronization found in a suite of single- and multi-threaded benchmarks of different sizes and drawn from a variety of domains. We analyze the performance of our optimizations in terms of dynamic operations removed and run-time speedup. We also show that our analyses may enable the use of simpler synchronization models than the model found in Java, at little or no additional cost in execution time. The synchronization optimizations, we describe enable programmers to design efficient, reusable and maintainable libraries and systems in Java without cumbersome manual code restructuring. (C) 2003 Elsevier Science B.V. All rights reserved.
C1 Univ Washington, Dept Comp Sci & Engn, Seattle, WA 98195 USA.
   Cornell Univ, Dept Comp Sci, Ithaca, NY 14853 USA.
C3 University of Washington; University of Washington Seattle; Cornell
   University
RP Aldrich, J (corresponding author), Univ Washington, Dept Comp Sci & Engn, Box 352350, Seattle, WA 98195 USA.
OI Aldrich, Jonathan/0000-0003-0631-5591
CR AGESEN O, 1999, P 14 C OBJ OR PROGR
   ALDRICH J, 1999, P 6 INT STAT AN S SE
   BACON D, 1998, P SIGPLAN 98 C PROGR
   BLANCHET B, 1999, P 14 C OBJ OR PROGR
   BOGDA J, 1999, P 14 C OBJ OR PROGR
   CHOI JD, 1999, P 14 C OBJ OR PROGR
   CORBETT J, 1998, P INT S SOFTW TEST A
   DEAN J, 1996, P 11 C OBJ OR PROGR
   Detlefs D.L., 1998, 159 SRC
   Diniz PC, 1998, J PARALLEL DISTR COM, V49, P218, DOI 10.1006/jpdc.1998.1441
   FITZGERALD R, 1998, MARMOT OPTIMIZING OP
   Gosling James, 1996, The Java Language Specification
   GROVE D, 1997, P 12 C OBJ OR PROGR
   HEYDON A, 1999, PERF LIM JAV COR LIB
   JEREMIASSEN TE, 1994, INT C PAR ARCH COMP
   KRALL A, 1998, ACM 1998 WORKSH JAV
   LAMPSON BW, 1980, COMMUN ACM, V23, P105, DOI 10.1145/358818.358824
   MCALLESTER D, 1999, P 6 INT STAT AN S SE
   NAUMOVICH G, 1999, P 7 EUR SOFTW ENG C
   ONODERA T, 1999, P 14 C OBJ OR PROGR
   PLEVYAK J, 1995, P 22 ACM SIGPLAN SIG
   Plevyak J., 1996, THESIS U ILLINOIS UR
   PUGH W, 1999, P JAV FRAND C JUN
   RUF E, 2000, P SIGPLAN 2000 C PRO
   RUGINA R, 1999, P SIGPLAN 1999 C PRO
   SHIVERS O, 1988, P SIGPALN 1988 C PRO
   SINGHAL S, 1997, BUILDING HIGH PERFOR
   SIRER EG, 1999, P 17 ACM S OP SYST P
   WHALEY J, 1999, P 14 C OBJ OR PROGR
   [No title captured]
NR 30
TC 5
Z9 9
U1 0
U2 0
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAY-JUN
PY 2003
VL 47
IS 2-3
BP 91
EP 120
AR PII S0167-6423(02)00129-6
DI 10.1016/S0167-6423(02)00129-6
PG 30
WC Computer Science, Software Engineering
WE Conference Proceedings Citation Index - Science (CPCI-S); Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 664CQ
UT WOS:000182044500002
DA 2024-07-18
ER

PT J
AU Nielson, F
   Hansen, RR
   Nielson, HR
AF Nielson, F
   Hansen, RR
   Nielson, HR
TI Abstract interpretation of mobile ambients
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 6th International Symposium on Static Analysis
CY SEP 22-24, 1999
CL VENICE, ITALY
SP EALPS, ALP, CNR, Compulog, Ca Foscari Univ, Padova Univ
AB We show,how abstract interpretation can be expressed in a constraint-based formalism that is becoming increasingly popular for the analysis of functional and object-oriented languages. This is illustrated by developing analyses for the ambient calculus.
   The first step of the development constructs an analysis for counting occurrences of processes inside other processes; we show that the analysis is semantically correct and that the set of acceptable solutions constitutes a Moore family. The second step considers a previously developed control flow analysis and shows how to induce it from the counting analysis; we show that its properties can be derived from those of the counting analysis using general results about abstract interpretation for constraint-based analyses. (C) 2003 Elsevier Science B.V. All rights reserved.
C1 Aarhus Univ, Dept Comp Sci, DK-8000 Aarhus, Denmark.
C3 Aarhus University
RP Hansen, RR (corresponding author), Aarhus Univ, Dept Comp Sci, Ny Munkegade,Bldg 540, DK-8000 Aarhus, Denmark.
OI Hansen, Rene Rydhof/0000-0002-5688-6432; Nielson, Hanne
   Riis/0000-0002-2484-5580; Nielson, Flemming/0000-0001-7362-6176
CR Bodei C, 1998, LECT NOTES COMPUT SC, V1466, P84, DOI 10.1007/BFb0055617
   Bodei C, 1999, LECT NOTES COMPUT SC, V1578, P120
   CARDELI L, 1999, ANN ACM S PRINC PROG, P79
   Cardelli L, 1998, LECT NOTES COMPUT SC, V1378, P140, DOI 10.1007/BFb0053547
   Hansen RR, 1999, LECT NOTES COMPUT SC, V1694, P134
   LI GN, 1999, INSIDE JAVA 2 PLATFO
   Nielson F, 2000, LECT NOTES COMPUT SC, V1782, P305
   Nielson F, 1999, LECT NOTES COMPUT SC, V1664, P463
   NIELSON F, LECT NOTES COMPUTER
   NIELSON F, 1999, PRINCIPLES PROGRAM A
   NIELSON HR, 2000, ANN ACM S PRINC PROG, P142
   Venet A, 1998, LECT NOTES COMPUT SC, V1503, P152
   VENET A, 1997, LECT NOTES COMPUTER, V1192, P51
   [No title captured]
NR 14
TC 13
Z9 16
U1 0
U2 0
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAY-JUN
PY 2003
VL 47
IS 2-3
BP 145
EP 175
AR PII S0167-6423(02)00131-4
DI 10.1016/S0167-6423(02)00131-4
PG 31
WC Computer Science, Software Engineering
WE Conference Proceedings Citation Index - Science (CPCI-S); Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 664CQ
UT WOS:000182044500004
DA 2024-07-18
ER

PT J
AU Kuipers, T
   Visser, J
AF Kuipers, T
   Visser, J
TI Object-oriented tree traversal with JJForester
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT Workshop on Language Descriptions, Tools and Applications
CY 2001
CL GENOA, ITALY
ID SOFTWARE; RENOVATION
AB We want to use the advanced language processing technology available in the ASF+SDF in combination with general purpose programming languages. In particular, we want to combine the syntax definition formalism (SDF) and the associated components that support generalized LR parsing, with the object-oriented language Java. To this end, we implemented JJForester, a tool that generates class structures from SDF grammar definitions. The generated class structures implement a number of design patterns to facilitate construction and traversal of parse trees represented by object structures. In a detailed case study, we demonstrate how program analyses and transformations for languages of non-trivial size can be constructed with JJForester. (C) 2002 Elsevier Science B.V. All rights reserved.
C1 Software Improvement Grp, NL-1098 VA Amsterdam, Netherlands.
   CWI, Detp SEN, NL-1090 GB Amsterdam, Netherlands.
RP Kuipers, T (corresponding author), Software Improvement Grp, Kruislaan 419, NL-1098 VA Amsterdam, Netherlands.
RI Visser, Joost/AAD-9423-2019
OI Visser, Joost/0000-0003-0158-3095
CR [Anonymous], LECT NOTES COMPUTER
   ATTALI I, 2002, P WORKSH LANG DESCR
   BAETEN JCM, 1995, HDB LOG COMP SCI, V4, P149
   Bergstra JA, 1998, SCI COMPUT PROGRAM, V31, P205, DOI 10.1016/S0167-6423(97)00021-X
   BERGSTRA JA, 1994, P9408 U AMST PROGR R
   BERGSTRA JA, 1989, ACM PRESS FRONTIER S, pCH1
   DEJONGE M, 2000, UNPUB XT BUNDLE PROG
   DEJONGE M, 2000, IN PRESS LECT NOTES
   Gamma Erich., 1994, DESIGN PATTERNS
   HEERING J, 1989, SIGPLAN NOTICES, V24, P43, DOI 10.1145/71605.71607
   Klint P., 1993, ACM Transactions on Software Engineering and Methodology, V2, P176, DOI 10.1145/151257.151260
   KORT J, 2000, 9 INT WORKSH FUNCT L
   LAMMEL R, 2002, LECT NOTES COMPUTER, V2257
   Lammel R., 2000, WORKSH GEN PROGR PON
   PALSBERG J, 1995, ACM T PROGR LANG SYS, V17, P264, DOI 10.1145/201059.201066
   REKERS J, 1992, THESIS U AMSTERDAM
   Tomita Masaru., 1985, EFFICIENT PARSING NA
   van den Brand M, 1998, PROG COMPREHEN, P108, DOI 10.1109/WPC.1998.693325
   van den Brand MGJ, 2000, SOFTWARE PRACT EXPER, V30, P259, DOI 10.1002/(SICI)1097-024X(200003)30:3<259::AID-SPE298>3.0.CO;2-Y
   van Deursen A, 1999, LECT NOTES COMPUT SC, V1577, P1
   van Deursen A., 1996, AMAST SERIES COMPUTI, V5
   VANDEN MGJ, 2001, SENR0121 CWI
   VANDENBRAND MGJ, 1996, LECT NOTES COMPUTER, V1101, P9
   VANDENBRAND MGJ, 2000, UNPUB ASF PLUS SDF M
   VANDEURSEN A, 1999, P INT C SOFTW MAINT
   Visser E, 1999, ACM SIGPLAN NOTICES, V34, P13, DOI 10.1145/291251.289425
   VISSER E, ONLINE SURVEY PROGRA
   VISSER E, 2001, OOPSLA 2001 C P OBJ
   Visser Eelco, 1997, Syntax Definition for Language Prototyping
   Wang DC, 1997, PROCEEDINGS OF THE CONFERENCE ON DOMAIN-SPECIFIC LANGUAGES, P213
NR 30
TC 6
Z9 7
U1 0
U2 0
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD APR
PY 2003
VL 47
IS 1
BP 59
EP 87
AR PII S0167-6423(02)00108-9
DI 10.1016/S0167-6423(02)00108-9
PG 29
WC Computer Science, Software Engineering
WE Conference Proceedings Citation Index - Science (CPCI-S); Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 644ED
UT WOS:000180904200004
DA 2024-07-18
ER

PT J
AU Klikovits, S
   Castellano, E
   Cetinkaya, A
   Arcaini, P
AF Klikovits, Stefan
   Castellano, Ezequiel
   Cetinkaya, Ahmet
   Arcaini, Paolo
TI Frenetic-lib: An extensible framework for search-based generation of
   road structures for ADS testing
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Frenetic; Search-based testing; Road representation; Genetic algorithm;
   Simulation-based testing
AB Being capable of identifying significant safety shortcomings, search-based methods are a core tool for testing automated driving system (ADS) technologies. In this domain, Frenetic has proven to be a popular and very effective tool, searching and identifying diverse sets of roads that point out potentially faulty ADS behaviour. This paper presents Frenetic-lib, a Python library that captures Frenetic's novel combination of road representation and genetic algorithm, and makes it generally available in a customisable way. Next to the capacity to integrate additional ADS simulators, Frenetic-lib further creates new research opportunities on search-based road testing, novel road representations and mutation operators. & COPY; 2023 Elsevier B.V. All rights reserved.
C1 [Klikovits, Stefan] Johannes Kepler Univ Linz, Linz, Austria.
   [Castellano, Ezequiel; Arcaini, Paolo] Natl Inst Informat, Tokyo, Japan.
   [Cetinkaya, Ahmet] Shibaura Inst Technol, Tokyo, Japan.
C3 Johannes Kepler University Linz; Research Organization of Information &
   Systems (ROIS); National Institute of Informatics (NII) - Japan;
   Shibaura Institute of Technology
RP Klikovits, S (corresponding author), Johannes Kepler Univ Linz, Linz, Austria.
EM stefan.klikovits@jku.at; ecastellano@nii.ac.jp; ahmet@shibaura-it.ac.jp;
   arcaini@nii.ac.jp
RI Arcaini, Paolo/J-3616-2017
OI Arcaini, Paolo/0000-0002-6253-4062; Klikovits,
   Stefan/0000-0003-4212-7029
FU ERATO HASUO Metamathematics for Systems Design Project [JPMJER1603];
   Japan Science and Technology Agency (JST) [10.13039/501100009024,
   23K03913]; Japan Society for the Promotion of Science (JSPS)
   [JPMJMI20B8]; Japan Society for the Promotion of Science (JSPS) KAKENHI
   [20K23334, 20K14771]
FX Stefan Klikovits and Paolo Arcaini were supported by the ERATO HASUO
   Metamathematics for Systems Design Project JPMJER1603 ; funding
   reference number 10.13039/501100009024 Japan Science and Technology
   Agency (JST) . Stefan Klikovits was also supported by Japan Society for
   the Promotion of Science (JSPS) Grant -in -Aid for Research Activity
   Start-up No 20K23334 . Ahmet Cetinkaya is supported by Japan Society for
   the Promotion of Science (JSPS) KAKENHI Grant Numbers 20K14771 and
   23K03913 . Paolo Arcaini is also supported by Engineerable AI Project
   (No. JPMJMI20B8) , Japan Science and Technology Agency (JST) .
CR Arcaini P, 2023, 2023 IEEE/ACM INTERNATIONAL WORKSHOP ON SEARCH-BASED AND FUZZ TESTING, SBFT, P41, DOI 10.1109/SBFT59156.2023.00008
   Birchler C, 2022, EUR CON SFTWR MTNCE, P164, DOI 10.1109/SANER53432.2022.00030
   Castellano E, 2022, 15TH SEARCH-BASED SOFTWARE TESTING WORKSHOP (SBST 2022), P47, DOI 10.1145/3526072.3527532
   Castellano E, 2021, IEEE INT C S Q R S, P167, DOI 10.1109/QRS54544.2021.00028
   Castellano E, 2021, 2021 IEEE/ACM 14TH INTERNATIONAL WORKSHOP ON SEARCH-BASED SOFTWARE TESTING (SBST 2021), P36, DOI 10.1109/SBST52555.2021.00016
   Catmull E, 1974, inCom-puter Aided Geometric Design, P317, DOI [DOI 10.1016/B978-0-12-079050-0.50020-5, 10.1016/B978-0-12-079050-0.50020-5]
   Ferdous R, 2022, 15TH SEARCH-BASED SOFTWARE TESTING WORKSHOP (SBST 2022), P51, DOI 10.1145/3526072.3527534
   Gallier J., 2000, Curves and Surfaces in Geometric Modeling
   Gambi A, 2022, 15TH SEARCH-BASED SOFTWARE TESTING WORKSHOP (SBST 2022), P25, DOI 10.1145/3526072.3527538
   Gambi A, 2019, PROCEEDINGS OF THE 28TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS (ISSTA '19), P318, DOI 10.1145/3293882.3330566
   Gambi A, 2019, 2019 IEEE/ACM 41ST INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING: COMPANION PROCEEDINGS (ICSE-COMPANION 2019), P27, DOI 10.1109/ICSE-Companion.2019.00030
   Humeniuk D, 2022, 15TH SEARCH-BASED SOFTWARE TESTING WORKSHOP (SBST 2022), P43, DOI 10.1145/3526072.3527531
   Humeniuk D, 2022, INFORM SOFTWARE TECH, V149, DOI 10.1016/j.infsof.2022.106936
   Humeniuk D, 2021, 2021 IEEE/ACM 14TH INTERNATIONAL WORKSHOP ON SEARCH-BASED SOFTWARE TESTING (SBST 2021), P42, DOI 10.1109/SBST52555.2021.00019
   Klampfl L, 2024, J SOFTW-EVOL PROC, V36, DOI 10.1002/smr.2520
   Kobayashi S., 2019, Differential Geometry of Curves and Surfaces
   Mitchell M., 1999, INTRO GENETIC ALGORI, DOI DOI 10.1016/S0898-1221(96)90227-8
   Moghadam MH, 2022, Arxiv, DOI [arXiv:2203.12026, 10.48550/ARXIV.2203.12026]
   Moghadam MH, 2021, 2021 IEEE/ACM 14TH INTERNATIONAL WORKSHOP ON SEARCH-BASED SOFTWARE TESTING (SBST 2021), P40, DOI 10.1109/SBST52555.2021.00018
   Panichella S, 2021, 2021 IEEE/ACM 14TH INTERNATIONAL WORKSHOP ON SEARCH-BASED SOFTWARE TESTING (SBST 2021), P20, DOI 10.1109/SBST52555.2021.00011
   Peltomäki J, 2022, 15TH SEARCH-BASED SOFTWARE TESTING WORKSHOP (SBST 2022), P53, DOI 10.1145/3526072.3527535
   Starace LLL, 2022, 15TH SEARCH-BASED SOFTWARE TESTING WORKSHOP (SBST 2022), P49, DOI 10.1145/3526072.3527533
   Yan SY, 2022, 15TH SEARCH-BASED SOFTWARE TESTING WORKSHOP (SBST 2022), P41, DOI 10.1145/3526072.3527530
   Zhao D, 2017, Arxiv, DOI arXiv:1707.04792
NR 24
TC 0
Z9 0
U1 2
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD AUG
PY 2023
VL 230
AR 102996
DI 10.1016/j.scico.2023.102996
EA JUL 2023
PG 8
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA P0CY0
UT WOS:001047416300001
DA 2024-07-18
ER

PT J
AU Zhao, X
   Gray, J
AF Zhao, Xin
   Gray, Jeff
TI Towards a metrics suite for the complexity analysis of LabVIEW systems
   models
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Software metrics; Complexity analysis; Software quality; Systems models;
   LabVIEW
ID CYCLOMATIC COMPLEXITY; WEYUKER PROPERTY-9; IEC 61131-3; SMELL BAD;
   SOFTWARE; APPLICABILITY; IMPACT
AB LabVIEW is a popular commercial modeling tool that is often used in systems engineering. LabVIEW also includes a special programming language developed for engineers to help them support the automation of computer-aided systems. Although LabVIEW is widely used in various fields (e.g., industrial design, academic research, and engineering education), there has not been much attention given to the systems models built in LabVIEW (e.g., support for analyzing the complexity of systems models). Our previous work in surveying engineers who use LabVIEW suggests that systems engineers are deeply concerned about the complexity of the LabVIEW systems models that they create. To address the need for additional support in understanding the complexity of LabVIEW systems models, we introduce in this paper a metrics suite to assist end-users in characterizing the complexities of LabVIEW systems models from different aspects. We theoretically validated the metrics using Weyuker's validation. In addition, our metric suite was applied to 10 LabVIEW models mined from GitHub to empirically evaluate their suitability to support the description of systems model complexities. Our research is one of the first efforts to address the complexity analysis of LabVIEW systems models through a software metrics approach.(c) 2023 Elsevier B.V. All rights reserved.
C1 [Zhao, Xin] Seattle Univ, Dept Comp Sci, Seattle, WA 98122 USA.
   [Gray, Jeff] Univ Alabama, Dept Comp Sci, Tuscaloosa, AL USA.
C3 Seattle University; University of Alabama System; University of Alabama
   Tuscaloosa
RP Zhao, X (corresponding author), Seattle Univ, Dept Comp Sci, Seattle, WA 98122 USA.
EM xzhao1@seattleu.edu; gray@cs.ua.edu
OI Zhao, Xin/0000-0002-6076-0832; Gray, Jeff/0000-0003-0082-6753
CR Abebe Mesfin., 2014, INT J SOFTWARE ENG I, V8, P299, DOI [10.14257/ijseia.2014.8.6.24, DOI 10.14257/IJSEIA.2014.8.6.24]
   AbuHassan A, 2019, SOFTW SYST MODEL, V18, P557, DOI 10.1007/s10270-016-0573-6
   Adewumi A, 2019, COMPUTERS, V8, DOI 10.3390/computers8030054
   Aggarwal KK, 2007, J OBJECT TECHNOL, V6, P121, DOI 10.5381/jot.2007.6.1.a4
   Al Qutaish R.E., 2005, International Workshop on Software Measurement, P337
   Arendt Thorsten., 2010, P 9 BELGIUM NETHERLA, P1
   BAKER BS, 1992, COMPUTING SCIENCE AND STATISTICS : VOL 24, P49
   Bloom J., 2015, 5 REASONS YOU MUST M
   BROOKS FP, 1987, COMPUTER, V20, P10, DOI 10.1109/MC.1987.1663532
   Card DavidN., 1990, MEASURING SOFTWARE D
   Catal C, 2012, ACTA POLYTECH HUNG, V9, P193
   Chambers C, 2015, J VISUAL LANG COMPUT, V28, P176, DOI 10.1016/j.jvlc.2015.01.002
   Chambers C, 2015, J VISUAL LANG COMPUT, V26, P1, DOI 10.1016/j.jvlc.2014.10.017
   Chambers C, 2013, S VIS LANG HUM CEN C, P159, DOI 10.1109/VLHCC.2013.6645261
   Chang Z, 2018, GLOBECOM 2017 2017 I, P1
   CHIDAMBER SR, 1991, OOPSLA 91 CONFERENCE PROCEEDINGS : OBJECT-ORIENTED PROGRAMMING SYSTEMS, LANGUAGES, AND APPLICATIONS, P197, DOI 10.1145/118014.117970
   CHIDAMBER SR, 1994, IEEE T SOFTWARE ENG, V20, P476, DOI 10.1109/32.295895
   Chowdhury S, 2022, EMPIR SOFTW ENG, V27, DOI 10.1007/s10664-022-10193-8
   CURTIS B, 1979, IEEE T SOFTWARE ENG, V5, P96, DOI 10.1109/TSE.1979.234165
   Danphitsanuphan P., 2012, 2012 SPRING C ENG TE, P1, DOI 10.1109/SCET.2012.6342082
   Debray SK, 2000, ACM T PROGR LANG SYS, V22, P378, DOI 10.1145/349214.349233
   Dhavachelvan P, 2008, ICIT 2008: PROCEEDINGS OF THE 11TH INTERNATIONAL CONFERENCE ON INFORMATION TECHNOLOGY, P248, DOI 10.1109/ICIT.2008.59
   Falcon J., 2017, ACM IEEE 20 INT C MO
   FENTON N, 1994, IEEE T SOFTWARE ENG, V20, P199, DOI 10.1109/32.268921
   Fenton N. E., 1998, Software metrics: a rigorous and practical approach
   Fischer J, 2021, IEEE ROBOT AUTOM LET, V6, P5784, DOI 10.1109/LRA.2021.3084886
   Fowler M., 2018, Refactoring: Improving the Design of Existing Code
   Fu FL, 2007, LECT NOTES COMPUT SC, V4558, P720
   Gaffney Jr J.E., 1981, P ACM 81 C, P126
   Galitz W. O., 2007, The essential guide to user interface design: An introduction to gui design principles and techniques, V3rd ed.
   Garousi V, 2020, ACM T COMPUT EDUC, V20, DOI 10.1145/3360497
   Gil Y, 2017, EMPIR SOFTW ENG, V22, P2585, DOI 10.1007/s10664-017-9513-5
   Gsellmann P, 2018, IEEE INT C EMERG, P1047, DOI 10.1109/ETFA.2018.8502464
   Halstead M. H., 1977, ELEMENTS SOFTWARE SC
   Hariprasad T., 2017, 2017 International Conference on Trends in Electronics and Informatics (ICEI). Proceedings, P1109, DOI 10.1109/ICOEI.2017.8300883
   HENRY S, 1981, IEEE T SOFTWARE ENG, V7, P510, DOI 10.1109/TSE.1981.231113
   HENRY S, 1989, SOFTWARE PRACT EXPER, V19, P1065, DOI 10.1002/spe.4380191105
   Hirzalla M, 2009, LECT NOTES COMPUT SC, V5472, P41, DOI 10.1007/978-3-642-01247-1_5
   Huntsman S, 2020, Arxiv, DOI arXiv:2003.00944
   Hutcheson MarnieL., 2003, SOFTWARE TESTING FUN
   Khomh F, 2009, WORK CONF REVERSE EN, P75, DOI 10.1109/WCRE.2009.28
   Kim M, 2004, 2004 INTERNATIONAL SYMPOSIUM ON EMPIRICAL SOFTWARE ENGINEERING, PROCEEDINGS, P83
   Kumar L, 2016, INT WORKS EMERG TREN, P15, DOI [10.1145/2897695.2897699, 10.1109/WETSoM.2016.011]
   Li W, 1998, J SYST SOFTWARE, V44, P155, DOI 10.1016/S0164-1212(98)10052-3
   Liu HH, 2018, P INT COMP SOFTW APP, P756, DOI 10.1109/COMPSAC.2018.10332
   Madi Ayman., 2013, INT J SOFTWARE ENG I, V7, P67
   Manjula C, 2019, CLUSTER COMPUT, V22, pS9847, DOI 10.1007/s10586-018-1696-z
   McCabe T. J., 1976, IEEE Transactions on Software Engineering, VSE-2, P308, DOI 10.1109/TSE.1976.233837
   Meneely A, 2012, ACM T SOFTW ENG METH, V21, DOI 10.1145/2377656.2377661
   Michura J, 2005, ITCC 2005: INTERNATIONAL CONFERENCE ON INFORMATION TECHNOLOGY: CODING AND COMPUTING, VOL 2, P404, DOI 10.1109/ITCC.2005.193
   Misra S, 2018, IEEE ACCESS, V6, P8782, DOI 10.1109/ACCESS.2018.2791344
   Misra S, 2012, LECT NOTES COMPUT SC, V7336, P234, DOI 10.1007/978-3-642-31128-4_17
   Mladenova T., 2020, 2020 INT C AUT INF I, P1
   Mshelia YU, 2019, 2019 19TH INTERNATIONAL CONFERENCE ON COMPUTATIONAL SCIENCE AND ITS APPLICATIONS (ICCSA 2019), P52, DOI 10.1109/ICCSA.2019.000-4
   Müller SC, 2016, PROC INT CONF SOFTW, P452, DOI 10.1145/2884781.2884803
   Mukherjee Soumyabrata., 2013, INT J ADV RES COMPUT, V2, P2620
   Muslija A, 2020, PROCEEDINGS OF THE 35TH ANNUAL ACM SYMPOSIUM ON APPLIED COMPUTING (SAC'20), P1556, DOI 10.1145/3341105.3373914
   Muslija Adnan., PREPRINT, DOI DOI 10.7287/PEERJ.PREPRINTS.27312V1
   Nunez-Varela AS, 2017, J SYST SOFTWARE, V128, P164, DOI 10.1016/j.jss.2017.03.044
   Ogheneovo E., 2014, J Comput Commun, V2, P1, DOI [DOI 10.4236/JCC.2014.214001, 10.4236/jcc.2014.214001]
   Olszewska M, 2016, ACM PROCEEDINGS OF THE 10TH EUROPEAN CONFERENCE ON SOFTWARE ARCHITECTURE WORKSHOPS (ECSA-W), DOI 10.1145/2993412.3004853
   Palomba F, 2014, PROC IEEE INT CONF S, P101, DOI 10.1109/ICSME.2014.32
   Pawade D, 2016, 2016 6TH INTERNATIONAL CONFERENCE - CLOUD SYSTEM AND BIG DATA ENGINEERING (CONFLUENCE), P630, DOI 10.1109/CONFLUENCE.2016.7508195
   Peitek N, 2021, PROC INT CONF SOFTW, P524, DOI 10.1109/ICSE43902.2021.00056
   Petersen K, 2011, INFORM SOFTWARE TECH, V53, P317, DOI 10.1016/j.infsof.2010.12.001
   Pfleeger SL, 1997, IEEE SOFTWARE, V14, P33, DOI 10.1109/52.582973
   Polancic G, 2017, COMPUT STAND INTER, V51, P104, DOI 10.1016/j.csi.2016.12.003
   Popoola Saheed., 2020, J OBJECT TECHNOL, V20, P1
   Power JE, 2004, J SOFTW MAINT EVOL-R, V16, P405, DOI 10.1002/smr.293
   Rani A., 2014, International Journal for Technological Research in Engineering, V1, P1211
   Riegler A, 2018, INTERACT COMPUT, V30, P207, DOI 10.1093/iwc/iwy008
   Rilling J, 2003, PROG COMPREHEN, P115
   Roy G, 2001, IEEE T SOFTWARE ENG, V27, P381, DOI 10.1109/32.917526
   Samli R., 2020, APPL APPROACHES OBJE, P166
   Santos JAM, 2018, J SYST SOFTWARE, V144, P450, DOI 10.1016/j.jss.2018.07.035
   Shao JQ, 2003, CAN J ELECT COMPUT E, V28, P69, DOI 10.1109/CJECE.2003.1532511
   Sharma N, 2006, IEEE T SOFTWARE ENG, V32, P209, DOI 10.1109/TSE.2006.21
   Sharma T, 2018, J SYST SOFTWARE, V138, P158, DOI 10.1016/j.jss.2017.12.034
   SHEPPERD M, 1988, SOFTWARE ENG J, V3, P30, DOI 10.1049/sej.1988.0003
   Shull F, 2008, GUIDE ADV EMPIRICAL
   Squires Alice., 2012, INT COUNCIL SYSTEMS, V22, P1967
   Srinivasan K.P., 2014, INT J SOFTWARE ENG A, V5, P87, DOI [10.5121/ijsea.2014.5606, DOI 10.5121/IJSEA.2014.5606]
   Steinberg D., 2008, EMF: Eclipse Modeling Framework, Vsecond
   Strauss A.L., 1990, BASICS QUALITATIVE R
   Stroud RO, 2019, IEEE SYST J, V13, P2166, DOI 10.1109/JSYST.2019.2897592
   Tasner Tadej., 2012, ANN FACULTY ENG HUNE, V10, P389
   Tegarden D.P., 1992, P 25 HAWAII INT C SY, V4, P359
   Thomas JohnC., 2008, HUMAN COMPUTER INTER, P498
   Tufano M, 2017, IEEE T SOFTWARE ENG, V43, P1063, DOI 10.1109/TSE.2017.2653105
   Vasa Rajesh., 2003, P 7 WORKSHOP QUANTIT, P1
   Wadge W. W., 1985, Lucid, the Dataflow Programming Language
   Wallace D., 1996, Special Publication (NIST SP)
   Wang Yingxu., 2003, BRAIN MIND, V4, P151, DOI DOI 10.1023/A:1025401527570
   WEYUKER EJ, 1988, IEEE T SOFTWARE ENG, V14, P1357, DOI 10.1109/32.6178
   Yu S., 2010, 2010 2 IEEE INT C IN, P352, DOI [10.1109/ICIME.2010.5477581, DOI 10.1109/ICIME.2010.5477581]
   Zaman S., 2012, 2012 9th IEEE Working Conference on Mining Software Repositories (MSR 2012), P199, DOI 10.1109/MSR.2012.6224281
   Zaman S., 2011, Proceedings of the 8th working conference on mining software repositories, P93, DOI [10.1145/1985441.1985457, DOI 10.1145/1985441.1985457]
   Zhang HY, 2010, J SYST SOFTWARE, V83, P803, DOI 10.1016/j.jss.2009.11.735
   Zhang L, 2002, IEEE T SOFTWARE ENG, V28, P526, DOI 10.1109/TSE.2002.1000454
   Zhao X, 2021, 2021 IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION AND REENGINEERING (SANER 2021), P177, DOI 10.1109/SANER50967.2021.00025
   Zhao X, 2019, 2019 ACM/IEEE 22ND INTERNATIONAL CONFERENCE ON MODEL DRIVEN ENGINEERING LANGUAGES AND SYSTEMS COMPANION (MODELS-C 2019), P304, DOI 10.1109/MODELS-C.2019.00047
   ZUSE H, 1989, SIGPLAN NOTICES, V24, P23, DOI 10.1145/70470.70473
   ZUSE H, 1992, SOFTWARE QUAL J, V1, P225, DOI 10.1007/BF01885772
NR 103
TC 1
Z9 1
U1 30
U2 45
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD APR
PY 2023
VL 227
AR 102931
DI 10.1016/j.scico.2023.102931
EA MAR 2023
PG 26
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA H0LC6
UT WOS:000992954500001
DA 2024-07-18
ER

PT J
AU Liu, BC
   Zhang, L
   Jiang, J
   Wang, L
AF Liu, Baochuan
   Zhang, Li
   Jiang, Jing
   Wang, Liang
TI A method for identifying references between projects in GitHub
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE References identification; Redirected project; GitHub
ID SOFTWARE ECOSYSTEMS; BEHAVIOR
AB In open source software platforms, software projects do not usually develop in isolation, and they depend on each other and develop together. It is important to identify references between projects in software development activities, which may help projects identify cross-project bugs or attract new contributors from related projects. In this paper, we propose a method IREL to Identify References between projects by Extracting Links. We first extract links from descriptions and comments on issues, pull requests, and commits with three matching patterns. Then we identify changes in project names and replace the original project names with their new project names. Finally, we identify references between projects by selecting links with different source projects and target projects. We evaluate the performance based on datasets with 20,347,228 projects. Our method IREL obtains 934,322 references, 26.461 times as many as the method Reference Coupling and 16.483 times as many as the method Issue Units. Project PageRank scores based on references identified by our method IREL are more correlated with the number of stars of projects. Our method supports researchers to identify references better. (C) 2022 Elsevier B.V. All rights reserved.
C1 [Liu, Baochuan; Zhang, Li; Jiang, Jing] Beihang Univ, State Key Lab Software Dev Environm, Beijing, Peoples R China.
   [Wang, Liang] Nanjing Univ, State Key Lab Novel Software Technol, Jiangsu, Peoples R China.
C3 Beihang University; Nanjing University
RP Jiang, J (corresponding author), Beihang Univ, State Key Lab Software Dev Environm, Beijing, Peoples R China.
EM liubc@buaa.edu.cn; lily@buaa.edu.cn; jiangjing@buaa.edu.cn;
   wl@nju.edu.cn
RI Wang, Jingjing/B-7476-2016
OI Wang, Jingjing/0000-0003-3170-8952
FU National Key Research and Development Program of China [2018AAA0102304];
   National Natural Science Foundation of China [62177003]
FX Acknowledgements This work is supported by the National Key Research and
   Development Program of China No. 2018AAA0102304, the National Natural
   Science Foundation of China under Grant No. 62177003.
CR Abdalkareem R, 2017, ESEC/FSE 2017: PROCEEDINGS OF THE 2017 11TH JOINT MEETING ON FOUNDATIONS OF SOFTWARE ENGINEERING, P385, DOI 10.1145/3106237.3106267
   [Anonymous], 2010, Proceedings of the IEEE/ACM international conference on Automated software engineering (ASE'10)
   [Anonymous], 2013, P INT WORKSH SOFTW E
   Bass L, 2015, 2015 IEEE/ACM 3RD INTERNATIONAL WORKSHOP ON RELEASE ENGINEERING, P4, DOI 10.1109/RELENG.2015.11
   Bavota G, 2015, EMPIR SOFTW ENG, V20, P1275, DOI 10.1007/s10664-014-9325-9
   Bavota G, 2013, PROC IEEE INT CONF S, P280, DOI 10.1109/ICSM.2013.39
   Blincoe K, 2019, INFORM SOFTWARE TECH, V110, P174, DOI 10.1016/j.infsof.2019.03.005
   Blincoe K, 2015, 12TH WORKING CONFERENCE ON MINING SOFTWARE REPOSITORIES (MSR 2015), P202, DOI 10.1109/MSR.2015.26
   Blincoe K, 2016, INFORM SOFTWARE TECH, V70, P30, DOI 10.1016/j.infsof.2015.10.002
   Borges H, 2018, J SYST SOFTWARE, V146, P112, DOI 10.1016/j.jss.2018.09.016
   Businge J, 2012, 2012 28TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE (ICSM), P368, DOI 10.1109/ICSM.2012.6405295
   Centola D, 2010, SCIENCE, V329, P1194, DOI 10.1126/science.1185231
   Duan RA, 2020, Arxiv, DOI [arXiv:2002.01139, 10.48550/ARXIV.2002.01139, DOI 10.48550/ARXIV.2002.01139]
   Vu DL, 2020, CCS '20: PROCEEDINGS OF THE 2020 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P2093, DOI 10.1145/3372297.3420015
   Geer D, 2020, LOGIN USENIX MAG, V45, P83
   German DM, 2013, EUR CON SFTWR MTNCE, P243, DOI 10.1109/CSMR.2013.33
   Gousios G, 2013, IEEE WORK CONF MIN S, P233, DOI 10.1109/MSR.2013.6624034
   Hata H, 2019, PROC INT CONF SOFTW, P1211, DOI 10.1109/ICSE.2019.00123
   Herzig K, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P392, DOI 10.1109/ICSE.2013.6606585
   Iansiti M., 2006, ANTITRUST BULL, V51, P77, DOI DOI 10.1177/0003603X0605100104
   Jansen S, 2014, INFORM SOFTWARE TECH, V56, P1508, DOI 10.1016/j.infsof.2014.04.006
   Jiang J, 2019, INFORM SOFTWARE TECH, V105, P150, DOI 10.1016/j.infsof.2018.08.012
   Jiang J, 2013, ACM T WEB, V7, DOI 10.1145/2517040
   Kalliamvakou E., 2014, P 11 WORKING C MININ, P92, DOI DOI 10.1145/2597073.2597074
   Kavaler D, 2019, PROC INT CONF SOFTW, P476, DOI 10.1109/ICSE.2019.00060
   Li LS, 2018, ASIA PAC SOFWR ENG, P386, DOI 10.1109/APSEC.2018.00053
   Ma WWY, 2017, PROC INT CONF SOFTW, P381, DOI 10.1109/ICSE.2017.42
   Ma YX, 2021, EMPIR SOFTW ENG, V26, DOI 10.1007/s10664-020-09905-9
   Maddila C, 2019, ESEC/FSE'2019: PROCEEDINGS OF THE 2019 27TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P874, DOI 10.1145/3338906.3340457
   Manikas K, 2013, J SYST SOFTWARE, V86, P1294, DOI 10.1016/j.jss.2012.12.026
   McDonnell T, 2013, PROC IEEE INT CONF S, P70, DOI 10.1109/ICSM.2013.18
   Ohm Marc, 2020, ARES 2020: Proceedings of the 15th International Conference on Availability, Reliability and Security, DOI 10.1145/3407023.3409183
   Ohm Marc, 2020, Detection of Intrusions and Malware, and Vulnerability Assessment. 17th International Conference, DIMVA 2020. Proceedings. Lecture Notes in Computer Science (LNCS 12223), P23, DOI 10.1007/978-3-030-52683-2_2
   Ossher Joel, 2010, Proceedings of the 2010 7th IEEE Working Conference on Mining Software Repositories (MSR 2010), P130, DOI 10.1109/MSR.2010.5463346
   Raemaekers S, 2012, 2012 28TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE (ICSM), P378, DOI 10.1109/ICSM.2012.6405296
   Santana F. W., 2013, P 5 IWSECO, V987, P7
   Thung F, 2013, EUR CON SFTWR MTNCE, P323, DOI 10.1109/CSMR.2013.41
   Vaidya RK, 2021, Arxiv, DOI arXiv:1903.02613
   Wittern E, 2016, 13TH WORKING CONFERENCE ON MINING SOFTWARE REPOSITORIES (MSR 2016), P351, DOI [10.1145/2901739.2901743, 10.1109/MSR.2016.043]
   Xia X, 2015, PROC IEEE INT CONF S, P261, DOI 10.1109/ICSM.2015.7332472
   Yu Y, 2014, PROC IEEE INT CONF S, P609, DOI 10.1109/ICSME.2014.107
   Zampetti F, 2017, INT C PROGRAM COMPRE, P23, DOI 10.1109/ICPC.2017.30
   Zhang Y, 2020, WORLD WIDE WEB, V23, P1589, DOI 10.1007/s11280-019-00770-1
   Zhang Y, 2018, SOFTWAREMINING '18: PROCEEDINGS OF THE 7TH INTERNATIONAL WORKSHOP ON SOFTWARE MINING, P12, DOI 10.1145/3242887.3242891
NR 44
TC 2
Z9 2
U1 3
U2 5
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 1
PY 2022
VL 222
AR 102858
DI 10.1016/j.scico.2022.102858
EA AUG 2022
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 4N6NR
UT WOS:000854135700002
DA 2024-07-18
ER

PT J
AU Maurel, H
   Vidal, S
   Rezk, T
AF Maurel, Heloise
   Vidal, Santiago
   Rezk, Tamara
TI Statically identifying XSS using deep learning
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 35th European Conference on Object-Oriented Programming (ECOOP)
CY JUL 11-17, 2021
CL ELECTR NETWORK
DE Web security; Deep learning; Web attacks; Cross-site scripting
AB Cross-site Scripting (XSS) is ranked first in the top 25 Most Dangerous Software Weaknesses (2020) of Common Weakness Enumeration (CWE) and places this vulnerability as the most dangerous among programming errors. This work explores static approaches to detect XSS vulnerabilities using neural networks. We compare two different code representations based on Natural Language Processing (NLP) and Programming Language Processing (PLP) and experiment with models based on different neural network architectures for static analysis detection in PHP and Node.js. We train and evaluate the models using synthetic databases. Using the generated PHP and Node.js databases, we compare our results with three well-known static analyzers for PHP code, ProgPilot, Pixy, RIPS, and a known scanner for Node.js, AppScan static mode. Our analyzers using neural networks overperform the results of existing tools in all cases. (C) 2022 Elsevier B.V. All rights reserved.
C1 [Maurel, Heloise; Rezk, Tamara] INDES Project, INRIA, Sophia Antipolis, France.
   [Vidal, Santiago] ISISTAN, CONICET, Campus Univ, Tandil, Argentina.
C3 Inria; Consejo Nacional de Investigaciones Cientificas y Tecnicas
   (CONICET)
RP Vidal, S (corresponding author), ISISTAN, CONICET, Campus Univ, Tandil, Argentina.
EM heloise.maurel@inria.fr; santiago.vidal@isistan.unicen.edu.ar;
   tamara.rezk@inria.fr
FU STICAmSud project [ANR17-CE25-0014-01]; CISC project
   [ANR17-CE25-0014-01]; STICAmSud project [830892]; INRIA Project Lab
   SPAI; European Union [ANR17-CE25-0014-01];  [18STIC-02]
FX This research has been partially supported by the ANR17-CE25-0014-01
   CISC project, STICAmSud project 18STIC-02, the INRIA Project Lab SPAI,
   and the European Union's Horizon 2020 research and innovation program
   under grant agreement No 830892. We thank David Balazarotti and Benjamin
   Gregoire for suggestions related to the preliminary results of this
   work. We thank Thorsten Holz for his help in finding datasets, Manuel
   Serrano for his suggestions on AST representations, and the SAMATE
   project at NIST for providing the initial PHP generator that is the base
   of this study.
CR Abaimov S, 2019, IEEE ACCESS, V7, P128617, DOI 10.1109/ACCESS.2019.2939870
   Allamanis M., 2016, JMLR WORKSH C P, V48
   Alon U, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290353
   [Anonymous], 2010, WDS 10 P CONTR PAP
   [Anonymous], 2011, 20 USENIX SEC S
   [Anonymous], 2018, P INT C LEARNING REP
   [Anonymous], 2009, P NETW DISTR SYST SE
   Balzarotti D, 2008, P IEEE S SECUR PRIV, P387, DOI 10.1109/SP.2008.22
   Boudol G, 2012, ACM T PROGR LANG SYS, V34, DOI 10.1145/2220365.2220369
   Calzavara S, 2019, 2019 4TH IEEE EUROPEAN SYMPOSIUM ON SECURITY AND PRIVACY (EUROS&P), P528, DOI 10.1109/EuroSP.2019.00045
   Chlipala A, 2016, COMMUN ACM, V59, P93, DOI 10.1145/2958736
   Dahse J, 2014, PROCEEDINGS OF THE 23RD USENIX SECURITY SYMPOSIUM, P989
   Doupé A, 2010, LECT NOTES COMPUT SC, V6201, P111, DOI 10.1007/978-3-642-14215-4_7
   Fang Y, 2018, PROCEEDINGS OF 2018 INTERNATIONAL CONFERENCE ON COMPUTING AND ARTIFICIAL INTELLIGENCE (ICCAI 2018), P47, DOI 10.1145/3194452.3194469
   Fournet C, 2011, PROCEEDINGS OF THE 18TH ACM CONFERENCE ON COMPUTER & COMMUNICATIONS SECURITY (CCS 11), P351
   Fragoso Santos Jose, 2015, Trustworthy Global Computing. 10th International Symposium (TGC 2015). Revised Selected Papers: LNCS 9533, P63, DOI 10.1007/978-3-319-28766-9_5
   Grossman Jeremiah., 2007, CROSS SITE SCRIPTING
   Hedin Daniel, 2014, P 29 ANN ACM S APPL, P1663
   Jovanovic N, 2006, P IEEE S SECUR PRIV, P258, DOI 10.1109/SP.2006.29
   Lekies S, 2017, CCS'17: PROCEEDINGS OF THE 2017 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P1709, DOI 10.1145/3133956.3134091
   Li Z., 2018, CORR ARXIV180706756
   Li Z, 2018, 25TH ANNUAL NETWORK AND DISTRIBUTED SYSTEM SECURITY SYMPOSIUM (NDSS 2018), DOI 10.14722/ndss.2018.23158
   Lin GJ, 2020, P IEEE, V108, P1825, DOI 10.1109/JPROC.2020.2993293
   Livshits B, 2013, ACM SIGPLAN NOTICES, V48, P385, DOI 10.1145/2480359.2429115
   Luo Z., 2011, LECT NOTES COMPUTER, V6993
   Maurel H., 2021, GENERATOR DATASETS R
   Melicher W, 2018, 25TH ANNUAL NETWORK AND DISTRIBUTED SYSTEM SECURITY SYMPOSIUM (NDSS 2018), DOI 10.14722/ndss.2018.23309
   Mikolov T., 2013, PROC 1 INT C LEARN R, P1301
   Mokbal FMM, 2019, IEEE ACCESS, V7, P100567, DOI 10.1109/ACCESS.2019.2927417
   Samuel M, 2011, PROCEEDINGS OF THE 18TH ACM CONFERENCE ON COMPUTER & COMMUNICATIONS SECURITY (CCS 11), P587
   Santos JF, 2014, IFIP ADV INF COMM TE, V428, P278
   Saxena P, 2011, PROCEEDINGS OF THE 18TH ACM CONFERENCE ON COMPUTER & COMMUNICATIONS SECURITY (CCS 11), P601
   Schoepe D, 2016, 1ST IEEE EUROPEAN SYMPOSIUM ON SECURITY AND PRIVACY, P15, DOI 10.1109/EuroSP.2016.14
   Shar LK, 2013, INFORM SOFTWARE TECH, V55, P1767, DOI 10.1016/j.infsof.2013.04.002
   She DD, 2020, P IEEE S SECUR PRIV, P1527, DOI 10.1109/SP40000.2020.00022
   Staicu CA, 2018, 25TH ANNUAL NETWORK AND DISTRIBUTED SYSTEM SECURITY SYMPOSIUM (NDSS 2018), DOI 10.14722/ndss.2018.23071
   Wang K, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P121, DOI 10.1145/3385412.3385999
   Zhang XQ, 2020, IEEE ACCESS, V8, P10989, DOI 10.1109/ACCESS.2020.2965184
NR 38
TC 8
Z9 8
U1 1
U2 16
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUL 1
PY 2022
VL 219
AR 102810
DI 10.1016/j.scico.2022.102810
EA MAY 2022
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 1L0VT
UT WOS:000799011900002
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Tang, YM
   Spektor, A
   Khatchadourian, R
   Bagherzadeh, M
AF Tang, Yiming
   Spektor, Allan
   Khatchadourian, Raffi
   Bagherzadeh, Mehdi
TI Automated evolution of feature logging statement levels using Git
   histories and degree of interest
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Logging; Software evolution; Software repository mining; Software
   transformation; Degree of interest
ID SOFTWARE
AB Logging-used for system events and security breaches to describe more informational yet essential aspects of software features-is pervasive. Given the high transactionality of today's software, logging effectiveness can be reduced by information overload. Log levels help alleviate this problem by correlating a priority to logs that can be later filtered. As software evolves, however, levels of logs documenting surrounding feature implementations may also require modification as features once deemed important may have decreased in urgency and vice-versa. We present an automated approach that assists developers in evolving levels of such (feature) logs. The approach, based on mining Git histories and manipulating a degree of interest (DOI) model,1 transforms source code to revitalize feature log levels based on the "interestingness" of the surrounding code. Built upon JGit and Mylyn, the approach is implemented as an Eclipse IDE plug-in and evaluated on 18 Java projects with similar to 3 million lines of code and similar to 4K log statements. Our tool successfully analyzes 99.22% of logging statements, increases log level distributions by similar to 20%, and increases the focus of logs in bug fix contexts similar to 83% of the time. Moreover, pull (patch) requests were integrated into large and popular open-source projects. The results indicate that the approach is promising in assisting developers in evolving feature log levels. Published by Elsevier B.V.
C1 [Tang, Yiming] CUNY Grad Ctr, Dept Comp Sci, 365 5th Ave, New York, NY 10016 USA.
   [Spektor, Allan; Khatchadourian, Raffi] CUNY Hunter Coll, Dept Comp Sci, 695 Pk Ave,Room HN 1008, New York, NY 10065 USA.
   [Bagherzadeh, Mehdi] Oakland Univ, Dept Comp Sci & Engn, Rochester, MI 48309 USA.
C3 City University of New York (CUNY) System; City University of New York
   (CUNY) Graduate School; City University of New York (CUNY) System;
   Hunter College (CUNY); Oakland University
RP Tang, YM (corresponding author), CUNY Grad Ctr, Dept Comp Sci, 365 5th Ave, New York, NY 10016 USA.
EM ytang3@gradcenter.cuny.edu; allan.spektor03@myhunter.cuny.edu;
   raffi.khatchadourian@hunter.cuny.edu; mbagherzadeh@oakland.edu
RI Khatchadourian, Raffi/AAH-2180-2019
OI Khatchadourian, Raffi/0000-0002-7930-0182; TANG,
   YIMING/0000-0003-2378-8972
FU PSC-CUNY Awards - Professional Staff Congress [617930049, 638010051];
   PSC-CUNY Awards - City University of New York [617930049, 638010051]
FX We would particularly like to thank all the developers that offered
   extremely helpful feedback through our pull requests. These include Manu
   Sridharan, Daniel Beck, and David P. Baker. We would also like to thank
   Oren Friedman and Walee Ahmed for their help with experiments and
   infrastructure, respectively, as well as Shigeru Chiba, Hidehiko
   Masuhara, and Iulian Neamtiu for their thoughtful insight and feedback.
   Support for this project was provided by PSC-CUNY Awards #617930049 and
   #638010051, jointly funded by The Professional Staff Congress and The
   City University of New York.
CR Alizadeh Vahid, 2019, 2019 34th IEEE/ACM International Conference on Automated Software Engineering (ASE). Proceedings, P823, DOI 10.1109/ASE.2019.00081
   [Anonymous], 2020, REJUVENATE LOG LEVEL
   [Anonymous], 2020, Automated evolution of feature logging statement levels using Git histories and degree of interest, DOI 10.5281/zenodo.3698983
   [Anonymous], 2020, REINVIGORATE LOGGING
   Apache Software Foundation, 2020, LOG4J LOG4J 2 ARCHIT
   Baker David P., 2019, REJUVENATE LOGGING S
   Baker David P., 2019, REJUVENATE LOG LEVEL
   Baumer Dirk, 2001, INTEGRATING REFACTOR
   Beck Daniel, 2019, REDUCE LOG LEVELS SU
   Bhattacharya P, 2012, PROC INT CONF SOFTW, P419, DOI 10.1109/ICSE.2012.6227173
   Casalnuovo C, 2017, PROCEEDINGS OF THE 26TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS (ISSTA'17), P396, DOI 10.1145/3092703.3098230
   Chang Hung-Fu., 2008, International Working Conference on Mining Software Repositories. MSR'08, P61, DOI DOI 10.1145/1370750.1370766
   Chen BY, 2017, PROC INT CONF SOFTW, P71, DOI 10.1109/ICSE.2017.15
   Davis Sam, 2014, 433030 ADD TASK CONT
   Eclipse Foundation Inc, 2020, JGIT
   Eclipse Foundation Inc, 2020, ECLIPSE IDES
   Eclipse Foundation Inc, 2020, ECLIPSE MYLYN OPEN S
   Fowkes J, 2017, IEEE T SOFTWARE ENG, V43, P1095, DOI 10.1109/TSE.2017.2664836
   Fu Q, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE COMPANION 2014), P24, DOI 10.1145/2591062.2591175
   Gharbi S, 2019, SAC '19: PROCEEDINGS OF THE 34TH ACM/SIGAPP SYMPOSIUM ON APPLIED COMPUTING, P1760, DOI 10.1145/3297280.3297452
   GitHub Inc., 2020, BUILDING APPS GITHUB
   GitHub Inc., 2020, NETWORK DEPENDENTS S
   Haas R, 2020, ACM T SOFTW ENG METH, V29, DOI 10.1145/3368267
   Hassani M, 2018, EMPIR SOFTW ENG, V23, P3248, DOI 10.1007/s10664-018-9603-z
   He PJ, 2018, IEEE INT CONF AUTOM, P178, DOI 10.1145/3238147.3238193
   Kabinna S, 2018, EMPIR SOFTW ENG, V23, P290, DOI 10.1007/s10664-017-9518-0
   Kagdi H, 2007, J SOFTW MAINT EVOL-R, V19, P77, DOI 10.1002/smr.344
   Kersten M, 2005, P 2005 INT C ASP OR, P159, DOI DOI 10.1145/1052898.1052912
   Kersten Mik, 2006, P 14 ACM SIGSOFT INT, P1
   Ketkar A, 2019, PROC INT CONF SOFTW, P1142, DOI 10.1109/ICSE.2019.00117
   Khatchadourian R, 2020, LECT NOTES COMPUT SC, V12076, P97, DOI 10.1007/978-3-030-45234-6_5
   Khatchadourian R, 2019, PROC INT CONF SOFTW, P619, DOI 10.1109/ICSE.2019.00072
   Khatchadourian R, 2017, SCI COMPUT PROGRAM, V150, P56, DOI 10.1016/j.scico.2017.06.011
   Khatchadourian R, 2017, AUTOMAT SOFTW ENG, V24, P757, DOI 10.1007/s10515-016-0208-8
   Khatchadourian R, 2017, PROC INT CONF SOFTW, P82, DOI 10.1109/ICSE.2017.16
   Kiczales G, 1997, LECT NOTES COMPUT SC, V1241, P220, DOI 10.1007/BFb0053381
   Lal Sangeeta, 2017, INT C OP SOURC SYST, P65
   LEAVENS GT, 1990, SIGPLAN NOTICES, V25, P212, DOI 10.1145/97946.97970
   Li H, 2018, EMPIR SOFTW ENG, V23, P2655, DOI 10.1007/s10664-018-9595-8
   Li H, 2017, EMPIR SOFTW ENG, V22, P1684, DOI 10.1007/s10664-016-9456-2
   Li H, 2017, EMPIR SOFTW ENG, V22, P1831, DOI 10.1007/s10664-016-9467-z
   Li SS, 2018, INT C PROGRAM COMPRE, P178, DOI 10.1145/3196321.3196328
   Li ZH, 2019, PROC INT CONF SOFTW, P152, DOI 10.1109/ICSE.2019.00032
   LISKOV BH, 1994, ACM T PROGR LANG SYS, V16, P1811, DOI 10.1145/197320.197383
   McDonald Josh, 2018, JENKINSURL
   Mondal M, 2017, INT C PROGRAM COMPRE, P99, DOI 10.1109/ICPC.2017.31
   Oracle, 2018, JAVAUTILLOGGING JAVA
   Oracle, 2021, CATCH BLOCKS
   Oracle, 2018, LOGGER JAVA SE 10 JD
   QOS.ch SLF4J, 2019, SIMPLE LOGGING FACAD
   QOS.ch SLF4J Manual, 2019, TYPICAL USAGE PATTER
   Ratiu D, 2004, CSMR 2004: EIGHTH EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, PROCEEDINGS, P223
   Rozinat A, 2006, LECT NOTES COMPUT SC, V3812, P163
   Shang WY, 2014, PROC IEEE INT CONF S, P21, DOI 10.1109/ICSME.2014.24
   Stewart Simon, 2019, REJUVENATE LOG LEVEL
   Syer MD, 2013, PROC IEEE INT CONF S, P110, DOI 10.1109/ICSM.2013.22
   Tan J., 2008, WASL, V8, P6, DOI DOI 10.1109/UPEC.2008.4651594
   Tian Y, 2017, ESEC/FSE 2017: PROCEEDINGS OF THE 2017 11TH JOINT MEETING ON FOUNDATIONS OF SOFTWARE ENGINEERING, P752, DOI 10.1145/3106237.3106300
   Tsantalis N, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P483, DOI 10.1145/3180155.3180206
   von Pilgrim Jens, 2014, CREATE CONTEXT GIT D
   Xu W, 2009, SOSP'09: PROCEEDINGS OF THE TWENTY-SECOND ACM SIGOPS SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P117
   Yuan D., 2012, P 2012 USENIX S OP S, P293
   Yuan D, 2012, ACM T COMPUT SYST, V30, DOI 10.1145/2110356.2110360
   Zeng Y, 2019, EMPIR SOFTW ENG, V24, P3394, DOI 10.1007/s10664-019-09687-9
   Zhu JM, 2019, 2019 IEEE/ACM 41ST INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING: SOFTWARE ENGINEERING IN PRACTICE (ICSE-SEIP 2019), P121, DOI 10.1109/ICSE-SEIP.2019.00021
   Zhu JM, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 1, P415, DOI 10.1109/ICSE.2015.60
NR 66
TC 7
Z9 7
U1 0
U2 8
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 1
PY 2022
VL 214
AR 102724
DI 10.1016/j.scico.2021.102724
EA OCT 2021
PG 16
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA XA8ZO
UT WOS:000720929000007
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Edwards, N
   Jongsuebchoke, D
   Storer, T
AF Edwards, Nystrom
   Jongsuebchoke, Dhitiwat
   Storer, Tim
TI Sciit: Embedding issue tracking in source control management
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Distributed issue tracking; Software project management; Global software
   engineering
AB Sciit is a distributed issue tracker. Distributed issue tracking eliminates much of the friction that is otherwise necessitated by separately maintaining source code in a source control management system (SCM) and task information in an issue tracker. Sciit goes beyond the state of the art in distributed issue tracking by treating issues as first class change control items, represented as fragments of text anywhere within the SCM. This approach treats issues as representations of work in progress alongside other project artefacts, allowing much of the metadata about an issue, such as status, affected components and participants to be inferred directly from the state of the SCM, rather than requiring additional maintenance by a developer. (C) 2021 Elsevier B.V. All rights reserved.
C1 [Edwards, Nystrom; Jongsuebchoke, Dhitiwat; Storer, Tim] Univ Glasgow, Sch Comp Sci, Glasgow, Lanark, Scotland.
C3 University of Glasgow
RP Storer, T (corresponding author), Univ Glasgow, Sch Comp Sci, Glasgow, Lanark, Scotland.
EM timothy.storer@glasgow.ac.uk
OI Edwards, Nystrom/0000-0001-9658-2903
CR [Anonymous], 2007, P 22 IEEE ACM INT C, DOI DOI 10.1145/1321631.1321639
   Anvik John, 2006, P 28 INT C SOFTWARE, P361, DOI DOI 10.1145/1134285.1134336
   Aranda J, 2009, PROC INT CONF SOFTW, P298, DOI 10.1109/ICSE.2009.5070530
   Bertram D, 2010, 2010 ACM CONFERENCE ON COMPUTER SUPPORTED COOPERATIVE WORK, P291
   Edwards N, 2019, PROC IEEE INT CONF S, P402, DOI 10.1109/ICSME.2019.00069
   Fowler M., 2020, Patterns for managing source code branches
   Korkala M, 2014, J SYST SOFTWARE, V95, P122, DOI 10.1016/j.jss.2014.03.080
   Triers M., 2015, GITPYTHON DOCUMENTAT
NR 8
TC 0
Z9 0
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 1
PY 2021
VL 206
AR 102628
DI 10.1016/j.scico.2021.102628
EA MAR 2021
PG 14
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA RI2XD
UT WOS:000636771400010
OA Green Accepted
DA 2024-07-18
ER

PT J
AU Nicola, RD
   Duong, T
   Loreti, M
AF Nicola, Rocco De
   Duong, Tan
   Loreti, Michele
TI Provably correct implementation of the <i>AbC</i> calculus
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Process calculi; Formal methods; Distributed computing; Erlang;
   Correctness proofs
ID BROADCAST; SEMANTICS
AB Building open, distributed systems while guaranteeing a specific behaviour is difficult because of the dynamicity of the operating environments and the complexity of the interactions of their components. The AbC calculus provides a novel communication mechanism to select interacting partners based on their runtime capabilities, making it naturally to model complex interactions and adaptive behaviour in such systems. The formal account of this calculus has enabled constructing formally verifiable models and proving their properties. In this paper, we i) propose an implementation of AbC using the Erlang language ii) formalize the operational semantics of our implementation; iii) propose a set of rules that given an AbC specification, automatically generate Erlang executable code; and iv) prove that the proposed translation is correct by establishing a simulation relation between source and target specifications. This enables us to guarantee that any property proved for a given AbC specification is preserved by the corresponding implementation. (C) 2020 The Authors. Published by Elsevier B.V.
C1 [Nicola, Rocco De; Duong, Tan] IMT Sch Adv Studies Lucca, Lucca, Italy.
   [Nicola, Rocco De] CINI Cyber Secur Lab, Rome, Italy.
   [Loreti, Michele] Univ Camerino, Camerino, Italy.
C3 IMT School for Advanced Studies Lucca; University of Camerino
RP Nicola, RD; Duong, T (corresponding author), IMT Sch Adv Studies Lucca, Lucca, Italy.; Nicola, RD (corresponding author), CINI Cyber Secur Lab, Rome, Italy.; Loreti, M (corresponding author), Univ Camerino, Camerino, Italy.
EM tan.duong@imtlucca.it
RI De Nicola, Rocco/B-8584-2012
OI De Nicola, Rocco/0000-0003-4691-7570
FU MIUR [PRIN 2017FTXR7S]
FX This work is partially funded by MIUR project PRIN 2017FTXR7S IT
   MATTERS(Methods and Tools for Trustworthy Smart Systems).
CR Abadi M., 1991, Journal of Functional Programming, V1, P375, DOI 10.1017/S0956796800000186
   Abd Alrahman Yehia, 2018, Leveraging Applications of Formal Methods, Verification and Validation Distributed Systems. 8th International Symposium, ISoLA 2018. Proceedings: Lecture Notes in Computer Science (LNCS 11246), P288, DOI 10.1007/978-3-030-03424-5_19
   Abd Alrahman Y, 2020, SCI COMPUT PROGRAM, V192, DOI 10.1016/j.scico.2020.102428
   Abd Alrahman Y, 2018, LECT NOTES COMPUT SC, V10854, P1, DOI 10.1007/978-3-319-92612-4_1
   Abd Alrahman Y, 2016, LECT NOTES COMPUT SC, V9952, P539, DOI 10.1007/978-3-319-47166-2_38
   Abd Alrahman Y, 2015, 30TH ANNUAL ACM SYMPOSIUM ON APPLIED COMPUTING, VOLS I AND II, P1840, DOI 10.1145/2695664.2695668
   Abd Alrahman Y, 2016, LECT NOTES COMPUT SC, V9688, P1, DOI 10.1007/978-3-319-39570-8_1
   Agha G. A., 1997, Journal of Functional Programming, V7, P1, DOI 10.1017/S095679689700261X
   Alrahman Y. Abd, 2019, INF COMPUT, V268
   Anderson S., 2013, ADAPTIVE COLLECTIVE
   [Anonymous], 1989, PRENTICE HALL INT SE
   Armstrong Joe, 2003, Making reliable distributed systems in the presence of software errors
   Bezirgiannis N, 2019, LECT NOTES COMPUT SC, V11424, P332, DOI 10.1007/978-3-030-16722-6_20
   Bures T, 2020, INT J SOFTW TOOLS TE, V22, P497, DOI 10.1007/s10009-020-00558-z
   Bures Tomas, 2013, P 16 INT ACM SIGS S, P81, DOI [10.1145/2465449.2465462, DOI 10.1145/2465449.2465462]
   Caballero R, 2019, J LOG ALGEBR METHODS, V107, P1, DOI 10.1016/j.jlamp.2019.05.002
   Ciancia V, 2016, LECT NOTES COMPUT SC, V9686, P67, DOI 10.1007/978-3-319-39519-7_5
   De Nicola Rocco, 2020, Leveraging Applications of Formal Methods, Verification and Validation. Engineering Principles. 9th International Symposium on Leveraging Applications of Formal Methods, ISoLA 2020. Proceedings. Lecture Notes in Computer Science (LNCS 12477), P261, DOI 10.1007/978-3-030-61470-6_16
   De Nicola Rocco, 2019, From Software Engineering to Formal Methods and Tools, and Back: Essays Dedicated to Stefania Gnesi on the Occasion of Her 65th Birthday. Lecture Notes in Computer Science (LNCS 11865), P377, DOI 10.1007/978-3-030-30985-5_22
   De Nicola Rocco, 2017, ModelEd, TestEd, TrustEd - Essays Dedicated to Ed Brinksma on the Occasion of His 60th Birthday. LNCS 10500, P169, DOI 10.1007/978-3-319-68270-9_9
   De Nicola R., 2014, ACM T AUTON ADAPT SY, V9, P1
   De Nicola R., 2013, P 10 INT S FORM METH, V7542, P25, DOI DOI 10.1007/978-3-642-35887-6_2
   De Nicola R, 2020, SCI COMPUT PROGRAM, V187, DOI 10.1016/j.scico.2019.102345
   De Nicola R, 2019, LECT NOTES COMPUT SC, V11533, P111, DOI 10.1007/978-3-030-22397-7_7
   De Nicola R, 2017, LECT NOTES COMPUT SC, V10319, P21, DOI 10.1007/978-3-319-59746-1_2
   Défago X, 2004, ACM COMPUT SURV, V36, P372, DOI 10.1145/1041680.1041682
   Eckhardt J, 2015, SCI COMPUT PROGRAM, V99, P24, DOI 10.1016/j.scico.2014.10.001
   Ene C, 1999, LECT NOTES COMPUT SC, V1684, P258
   Ferrari GL, 1996, THEOR COMPUT SCI, V168, P53, DOI 10.1016/S0304-3975(96)00063-1
   Fredlund LÅ, 2007, ACM SIGPLAN NOTICES, V42, P125, DOI 10.1145/1291220.1291171
   Hennicker Rolf, 2014, Specification, Algebra, and Software. Essays Dedicated to Kokichi Futatsugi: LNCS 8373, P359, DOI 10.1007/978-3-642-54624-2_18
   Johnsen E.B., 2011, Lecture Notes in Computer Science, V6957, P142, DOI [10.1007/978- 3- 642-25271-6 8, DOI 10.1007/978-3-642-25271-6]
   Lanese I, 2018, J LOG ALGEBR METHODS, V100, P71, DOI 10.1016/j.jlamp.2018.06.004
   Logan M., 2010, Erlang and OTP in Action
   Loreti M, 2016, LECT NOTES COMPUT SC, V9700, P83, DOI 10.1007/978-3-319-34096-8_4
   Mason IA, 1999, THEOR COMPUT SCI, V220, P409, DOI 10.1016/S0304-3975(99)00009-2
   Nishida N., 2017, LNCS, V10184, P259
   Pironti A, 2010, COMPUT SECUR, V29, P302, DOI 10.1016/j.cose.2009.08.001
   Plotkin G. D., 1981, TECH REP
   Prasad K. V. S., 1993, CONCUR '93. 4th International Conference on Concurrency Theory Proceedings, P173
   Prasad KVS, 1995, SCI COMPUT PROGRAM, V25, P285, DOI 10.1016/0167-6423(95)00017-8
   Salvaneschi G, 2015, SCI COMPUT PROGRAM, V102, P20, DOI 10.1016/j.scico.2014.11.016
   Svensson H, 2010, ERLANG 2010: PROCEEDINGS OF THE 2010 ACM SIGPLAN, ERLANG WORKSHOP, P23
   Svensson H, 2007, ERLANG'07: PROCEEDINGS OF THE 2007 SIGPLAN ERLANG WORKSHOP, P43
NR 44
TC 4
Z9 4
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 1
PY 2021
VL 202
AR 102567
DI 10.1016/j.scico.2020.102567
PG 25
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA PC2SJ
UT WOS:000596856600006
OA Green Published, hybrid
DA 2024-07-18
ER

PT J
AU Chen, S
   Wu, BJ
AF Chen, Sheng
   Wu, Baijun
TI Efficient counter-factual type error debugging
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 13th International Symposium on Theoretical Aspects of Software
   Engineering (TASE)
CY JUL 29-AUG 01, 2019
CL Guilin, PEOPLES R CHINA
SP IEEE Comp Soc, Guangxi Normal Univ, Coll Comp Sci & Informat Technol
DE Efficient type-error debugging; Variational typing; Principal typing
ID INFERENCE
AB Providing effective error messages in response to type errors continues to be a challenge in functional programming. Type error messages often point to bogus error locations or lack sufficient information for removing the type error, making error debugging ineffective. Counter-factual typing (CFT) addressed this problem by generating comprehensive error messages with each message includes a rich set of information. However, this comes with a cost of huge computations, making it too slow for interactive use. In particular, our recent study shows that programmers usually have to go through multiple iterations of updating and recompiling programs to remove a type error. Interestingly, our study also finds that program updates are minor in each iteration during type error debugging. We exploit this fact and develop eCFT, an efficient version of CFT, which doesn't recompute all error fixes from scratch for each updated program but only recomputes error fixes that are changed in response to the update. Our key observation is that minor program changes lead to minor error suggestion changes. eCFT is based on principal typing, a typing scheme more amenable to reuse previous typing results. We have evaluated our approach and found it is about 12.4xfaster than CFT in updating error fixes. (C) 2020 Elsevier B.V. All rights reserved.
C1 [Chen, Sheng; Wu, Baijun] UL Lafayette, CACS, Lafayette, LA 70504 USA.
RP Chen, S (corresponding author), UL Lafayette, CACS, Lafayette, LA 70504 USA.
EM chen@louisiana.edu; bj.wu@louisiana.edu
FU National Science Foundationunder [CCF-1750886]
FX We thank Jurriaan Hage for sharing his collection of student Haskell
   programs with us. This work is partially supported by The National
   Science Foundationunder the grant CCF-1750886.
CR Acar UA, 2009, ACM T PROGR LANG SYS, V32, DOI 10.1145/1596527.1596530
   ADITYA S, 1991, LECT NOTES COMPUT SC, V523, P379
   [Anonymous], 2005, THESIS
   [Anonymous], [No title captured]
   Charguéraud A, 2015, ELECTRON PROC THEOR, P80, DOI 10.4204/EPTCS.198.4
   Chen S., 2014, TECHNICAL REPORT
   Chen S., 2012, ICFP
   Chen S., 2019, EFFICIENT COUNTER FA
   Chen S, 2015, THESIS
   Chen S, 2014, ICFP'14: PROCEEDINGS OF THE 2014 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P39, DOI 10.1145/2628136.2628155
   Chen S, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S095679681700020X
   Chen S, 2016, ACM SIGPLAN NOTICES, V51, P416, DOI 10.1145/2914770.2837665
   Chen S, 2014, S VIS LANG HUM CEN C, P145, DOI 10.1109/VLHCC.2014.6883038
   Chen S, 2014, ACM T PROGR LANG SYS, V36, DOI 10.1145/2518190
   Chen S, 2014, ACM SIGPLAN NOTICES, V49, P583, DOI 10.1145/2535838.2535863
   Chen Y., 2014, ICFP
   Chitil O, 2001, ACM SIGPLAN NOTICES, V36, P193, DOI 10.1145/507669.507659
   Damas L., 1985, THESIS
   Eo H, 2004, NEW GENERAT COMPUT, V22, P1, DOI 10.1007/BF03037279
   Erdweg S, 2015, ACM SIGPLAN NOTICES, V50, P880, DOI [10.1145/2814270.2814277, 10.1145/2858965.2814277]
   Eremondi J, 2019, OPEN COMPUT SCI, V9, P1, DOI 10.1515/comp-2019-0001
   Erwig M, 2011, ACM T SOFTW ENG METH, V21, DOI 10.1145/2063239.2063245
   Haack C, 2003, LECT NOTES COMPUT SC, V2618, P284
   Hage J., 2013, COMMUNICATION
   Hage J, 2007, LECT NOTES COMPUT SC, V4449, P199
   Hage J, 2009, LECT NOTES COMPUT SC, V5452, P35, DOI 10.1007/978-3-642-00434-6_4
   Hasbani JG, 2011, CELLULAR AUTOMATA - SIMPLICITY BEHIND COMPLEXITY, P3
   Jim T., 1996, Conference Record of POPL '96: The 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P42, DOI 10.1145/237721.237728
   Johnson-acsadi G, 1986, Popul Bull UN, P44, DOI 10.1145/512644.512649
   Lerner BS, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P425, DOI 10.1145/1250734.1250783
   Lin C. C., 2010, THESIS
   Liu CY, 2017, AER ADV ENG RES, V120, P1, DOI 10.1109/glocomw.2017.8269175
   Loncaric C, 2016, ACM SIGPLAN NOTICES, V51, P781, DOI 10.1145/3022671.2983994
   McAdam B.J., 2002, THESIS
   Miao W., 2010, GPCE, P167
   Neubauer M, 2003, ACM SIGPLAN NOTICES, V38, P15, DOI 10.1145/944746.944708
   Nieuwenhuis R, 2006, J ACM, V53, P937, DOI 10.1145/1217856.1217859
   Pavlinovic Z, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P412, DOI 10.1145/2784731.2784765
   Pavlinovic Z, 2014, ACM SIGPLAN NOTICES, V49, P525, DOI [10.1145/2714064.2660230, 10.1145/2660193.2660230]
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   ROBINSON JA, 1965, J ACM, V12, P23, DOI 10.1145/321250.321253
   Scaffidi C., 2012, C-J CARBON RES, V28, P220
   Schilling Thomas, 2012, Trends in Functional Programming. 12th International Symposium, TFP 2011. Revised Selected Papers, P1, DOI 10.1007/978-3-642-32037-8_1
   Seidel EL, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3138818
   Seidel EL, 2016, ACM SIGPLAN NOTICES, V51, P228, DOI 10.1145/3022670.2951915
   Shao Z., 1993, POPL, P439
   Tip F, 2001, ACM T SOFTW ENG METH, V10, P5, DOI 10.1145/366378.366379
   Tirronen V, 2015, J FUNCT PROGRAM, V25, DOI 10.1017/S0956796815000179
   Tsushima K., 2014, PPL PPL 2014
   van Keeken P., 2006, THESIS
   Wand Mitchell, 1986, POPL, P38, DOI [DOI 10.1145/512644.512648, 10.1145/512644.512648]
   Wells JB, 2002, LECT NOTES COMPUT SC, V2380, P913
   Yang J, 2000, TRENDS IN FUNCTIONAL PROGRAMMING, P58
   Zhang DF, 2015, ACM SIGPLAN NOTICES, V50, P12, DOI [10.1145/2813885.2738009, 10.1145/2737924.2738009]
   Zhang DF, 2014, ACM SIGPLAN NOTICES, V49, P569, DOI 10.1145/2535838.2535870
NR 55
TC 0
Z9 0
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29a, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 1
PY 2020
VL 200
AR 102544
DI 10.1016/j.scico.2020.102544
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA NZ8II
UT WOS:000577344900005
OA Bronze
DA 2024-07-18
ER

PT J
AU Valloud, A
AF Valloud, Andres
TI Linked weak reference arrays: Ahybrid approach to efficient bulk
   finalization
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Smalltalk; GemStone/S; Finalization; Ephemeron; Weak reference
AB The present work describes a challenging, real-life finalization scenario that applies combined scalability and resource utilization pressure. Neither weak reference arrays nor ephemerons satisfactorily address the performance-critical demands, hence addressing these existing limitations requires a new strategy. This paper puts forward a hybrid weak arrayed container with properties from both weak reference arrays and ephemerons. The approach relies on a memory manager allowing dynamic slot reference strength. (C) 2020 Elsevier B.V. All rights reserved.
EM public.andres.valloud@gmail.com
CR [Anonymous], 2012, The Garbage Collection Handbook
   Deutsch PeterL., 1984, Proceedings of the 11th ACM SIGACT-SIGPLAN symposium on Principles of Programming Languages, POPL '84, P297, DOI [10.1145/800017.800542, DOI 10.1145/800017.800542]
   Hayes B, 1997, ACM SIGPLAN NOTICES, V32, P176, DOI 10.1145/263700.263733
   McClure M., ESUG 2017 C MAR SLOV
   Valloud A., SMALLT 2010 C SUBS U
   Valloud A, 2015, INTERNATIONAL WORKSHOP ON SMALLTALK TECHNOLOGIES 2015, DOI 10.1145/2811237.2811238
NR 6
TC 0
Z9 0
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 15
PY 2020
VL 196
AR 102479
DI 10.1016/j.scico.2020.102479
PG 12
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA LY6WG
UT WOS:000540668900004
DA 2024-07-18
ER

PT J
AU Kokke, W
   Siek, JG
   Wadler, P
AF Kokke, Wen
   Siek, Jeremy G.
   Wadler, Philip
TI Programming language foundations in Agda
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 21st Brazilian Symposium on Formal Methods (SBMF)
CY NOV 26-30, 2018
CL Salvador, BRAZIL
DE Agda; Coq; Lambda calculus; Dependent types
AB One of the leading textbooks for formal methods is Software Foundations (SF), written by Benjamin Pierce in collaboration with others, and based on Coq. After five years using SF in the classroom, we came to the conclusion that Coq is not the best vehicle for this purpose, as too much of the course needs to focus on learning tactics for proof derivation, to the cost of learning programming language theory. Accordingly, we have written a new textbook, Programming Language Foundations in Agda (PLFA). PLFA covers much of the same ground as SF, although it is not a slavish imitation.
   What did we learn from writing PLFA? First, that it is possible. One might expect that without proof tactics that the proofs become too long, but in fact proofs in PLFA are about the same length as those in SF. Proofs in Coq require an interactive environment to be understood, while proofs in Agda can be read on the page. Second, that constructive proofs of preservation and progress give immediate rise to a prototype evaluator. This fact is obvious in retrospect but it is not exploited in SF (which instead provides a separate normalise tactic) nor can we find it in the literature. Third, that using extrinsically-typed terms is far less perspicuous than using intrinsically-typed terms. SF uses the former presentation, while PLFA presents both; the former uses about 1.6 as many lines of Agda code as the latter, roughly the golden ratio. (C) 2020 Elsevier B.V. All rights reserved.
C1 [Kokke, Wen; Wadler, Philip] Univ Edinburgh, 10 Crichton St, Edinburgh EH8 9AB, Midlothian, Scotland.
   [Siek, Jeremy G.] Indiana Univ, 700 N Woodlawn Ave, Bloomington, IN 47408 USA.
C3 University of Edinburgh; Indiana University System; Indiana University
   Bloomington
RP Wadler, P (corresponding author), Univ Edinburgh, 10 Crichton St, Edinburgh EH8 9AB, Midlothian, Scotland.
EM wen.kokke@ed.ac.uk; jsiek@indiana.edu; wadler@inf.ed.ac.uk
RI Siek, Jeremy Graham/ABG-8845-2020
OI Siek, Jeremy/0000-0002-9894-4856
FU EPSRC Programme [EP/K034413/1]; EPSRC [EP/K034413/1] Funding Source:
   UKRI
FX For inventing ideas on which PLFA is based, and for hand-holding, many
   thanks to Conor McBride, James McKinna, Ulf Norell, and Andreas Abel.
   For showing how much more compact it is to use intrinsically-typed
   terms, thanks to David Darais. For inspiring our work by writing SF,
   thanks to Benjamin Pierce and his coauthors. For comments on a draft of
   this paper, an extra thank you to James McKinna, Ulf Norell, Andreas
   Abel, and Benjamin Pierce. This research was supported by EPSRC
   Programme Grant EP/K034413/1.
CR Abadi M., 1991, Journal of Functional Programming, V1, P375, DOI 10.1017/S0956796800000186
   Allais G, 2017, PROCEEDINGS OF THE 6TH ACM SIGPLAN CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS, CPP'17, P195, DOI 10.1145/3018610.3018613
   Altenkirch T, 1999, LECT NOTES COMPUT SC, V1683, P453
   Aydemir BE, 2005, LECT NOTES COMPUT SC, V3603, P50
   BARENDREGT H, 1983, J SYMBOLIC LOGIC, V48, P931, DOI 10.2307/2273659
   Barendregt H., 1984, LAMBDA CALCULUS STUD, V103
   Berger U., 1993, Typed Lambda Calculi and Applications. International Conference. TLCA '93, P91, DOI 10.1007/BFb0037100
   Bove A., 2001, Theorem Proving in Higher Order Logics. 14th International Conference, TPHOLs 2001. Proceedings (Lecture Notes in Computer Science Vol.2152), P121
   Bove A, 2009, LECT NOTES COMPUT SC, V5674, P73, DOI 10.1007/978-3-642-03359-9_6
   Capretta V, 2005, LOG METH COMPUT SCI, V1, DOI 10.2168/LMCS-1(2:1)2005
   Chapman James Maitland, 2009, THESIS
   Dagand P.-E., 2015, 26 JOURN FRANC LANG
   Danas Natasha, 2017, Software Engineering and Formal Methods. 15th International Conference, SEFM 2017. Proceedings: Lecture Notes in Computer Society (LNCS 10469), P168, DOI 10.1007/978-3-319-66197-1_11
   ENGELER E, 1981, ALGEBRA UNIV, V13, P389, DOI 10.1007/BF02483849
   Felleisen M., 2009, Semantics Engineering with PLT Redex
   Goallier G, 2008, LECT NOTES ARTIF INT, V5081, P333
   Goguen H., 1997, TECH REP
   Gonthier G, 2013, LECT NOTES COMPUT SC, V7998, P163, DOI 10.1007/978-3-642-39634-2_14
   Hales T, 2017, FORUM MATH PI, V5, DOI 10.1017/fmp.2017.1
   Harper R, 2016, Practical Foundations for Programming Languages
   Huet Gerard, 1997, COQ PROOF ASSISTANT, V178
   Kastner Daniel, 2017, SSS 17 SAFETY CRITIC, P163
   Kidney D.O., 2019, AUTOMATICALLY EFFICI
   Kiselyov O., 2009, FORMALIZING LA UNPUB
   Klein G, 2009, SOSP'09: PROCEEDINGS OF THE TWENTY-SECOND ACM SIGOPS SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P207
   Kokke P, 2015, LECT NOTES COMPUT SC, V9129, P276, DOI 10.1007/978-3-319-19797-5_14
   Leroy X, 2009, COMMUN ACM, V52, P107, DOI 10.1145/1538788.1538814
   McBride C, 2015, LECT NOTES COMPUT SC, V9129, P257, DOI 10.1007/978-3-319-19797-5_13
   McBride Conor, 2005, Type-Preserving Renaming and Substitution
   O'Connor L, 2016, ACM SIGPLAN NOTICES, V51, P89, DOI 10.1145/3022670.2951940
   Owens S, 2016, LECT NOTES COMPUT SC, V9632, P589, DOI 10.1007/978-3-662-49498-1_23
   Pfenning F., 1992, CMUCS92186
   Pierce B. C., 2010, Software Foundations
   Pierce BC, 2009, ICFP'09: PROCEEDINGS OF THE 2009 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P121
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Plotkin G. D., 1977, Theoretical Computer Science, V5, P223, DOI 10.1016/0304-3975(77)90044-5
   PLOTKIN GD, 1993, THEOR COMPUT SCI, V121, P351, DOI 10.1016/0304-3975(93)90094-A
   Reynolds JC, 2003, MG COMP SCI, P309
   Rosu G, 2010, J LOGIC ALGEBR PROGR, V79, P397, DOI 10.1016/j.jlap.2010.03.012
   Schäfer S, 2015, LECT NOTES COMPUT SC, V9236, P359, DOI 10.1007/978-3-319-22102-1_24
   Scott D., 1976, SIAM Journal on Computing, V5, P522, DOI 10.1137/0205037
   Stump A., 2016, VERIFIED FUNCTIONAL
   Wadler P., 2018, LECT NOTES COMPUTER, V11254
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
NR 44
TC 4
Z9 5
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD AUG 1
PY 2020
VL 194
AR 102440
DI 10.1016/j.scico.2020.102440
PG 15
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA LG6ET
UT WOS:000528192400001
OA Green Accepted, Green Submitted
DA 2024-07-18
ER

PT J
AU Pelliccione, P
   Knauss, E
   Ågren, SM
   Heldal, R
   Bergenhem, C
   Vinel, A
   Brunnegård, O
AF Pelliccione, Patrizio
   Knauss, Eric
   Agren, S. Magnus
   Heldal, Rogardt
   Bergenhem, Carl
   Vinel, Alexey
   Brunnegard, Oliver
TI Beyond connected cars: A systems of systems perspective
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 16th International Workshop on Foundations of Coordination Languages and
   Self-Adaptative Systems (FOCLASA)
CY JUN 26, 2018
CL Toulouse, FRANCE
DE Software engineering; Systems of systems; Automotive; Architecture
   framework; Software architecture
ID ARCHITECTURE; TAXONOMY
AB The automotive domain is rapidly changing in the last years. Among the different challenges OEMs (i.e. the vehicle manufacturers) are facing, vehicles are evolving into systems of systems. In fact, over the last years vehicles have evolved from disconnected and "blind" systems to systems that are (i) able to sense the surrounding environment and (ii) connected with other vehicles, the city, pedestrians, cyclists, etc. Future transportation systems can be seen as a System of Systems (SoS). In an SoS, constituent systems, i.e. the units that compose an SoS, can act as standalone systems, but their cooperation enables new emerging and promising scenarios. While this trend creates new opportunities, it also poses a risk to compromise key qualities such as safety, security, and privacy.
   In this paper we focus on the automotive domain and we investigate how to engineer and architect cars in order to build them as constituents of future transportation systems. Our contribution is an architectural viewpoint for System of Systems, which we demonstrate based on an automotive example. Moreover, we contribute a functional reference architecture for cars as constituents of an SoS. This reference architecture can be considered as an imprinting for the implementations that would be devised in specific projects and contexts. We also point out the necessity for a collaboration among different OEMs and with other relevant stakeholders, such as road authorities and smart cities, to properly engineer systems of systems composed of cars, trucks, roads, pedestrians, etc. This work is realized in the context of two Swedish projects coordinated by Volvo Cars and involving some universities and research centers in Sweden and many suppliers of the OEM, including Autoliv, Arccore, Combitech, Cybercom, Knowit, Prevas, AF-Technology, Semcom, and Qamcom. (C) 2020 Elsevier B.V. All rights reserved.
C1 [Pelliccione, Patrizio] Univ Aquila, DISIM, Laquila, Italy.
   [Pelliccione, Patrizio; Knauss, Eric; Agren, S. Magnus; Heldal, Rogardt] Chalmers Gothenburg Univ, Gothenburg, Sweden.
   [Heldal, Rogardt; Vinel, Alexey] Western Norway Univ Appl Sci, Bergen, Norway.
   [Bergenhem, Carl] Qamcom Res & Technol AB, Gothenburg, Sweden.
   [Vinel, Alexey] Halmstad Univ, Halmstad, Sweden.
   [Brunnegard, Oliver] Veoneer Sweden AB, Vargarda, Sweden.
C3 University of L'Aquila; Western Norway University of Applied Sciences;
   Qamcom Research & Technology; Halmstad University
RP Pelliccione, P (corresponding author), Univ Aquila, DISIM, Laquila, Italy.
EM patrizio.pelliccione@univaq.it; eric.knauss@gu.se;
   magnus.agren@chalmers.se; heldal@chalmers.se; carl.bergenhem@qamcom.se;
   alexey.vinel@hvl.no; oliver.brunnegard@veoneer.com
RI bergenhem, carl/AAQ-7804-2020; Pelliccione, Patrizio/Q-5118-2019
OI bergenhem, carl/0000-0002-6903-0756; Pelliccione,
   Patrizio/0000-0002-5438-2281; Knauss, Eric/0000-0002-6631-872X
FU VINNOVA-project NGEA; VINNOVA-project NGEA step 2; Centre of EXcellence
   on Connected, Geo-Localized and Cybersecure Vehicle (EX-Emerge) -
   Italian Government [70/2017]
FX This work was supported by the VINNOVA-projects NGEA and NGEA step 2. We
   would like to acknowledge all the partners of the project that made
   possible to achieve the results described in this paper. In particular,
   we would like to acknowledge the co-authors of the previous publication
   that are not contributing in this extended version, namely, Avenir
   Kobetski, Tony Larsson, Maytheewat Aramrattan, Tobias Aderum, Goran
   Jonsson, and Anders Thorsen. One of the authors (Patrizio Pelliccione)
   also acknowledges financial support from Centre of EXcellence on
   Connected, Geo-Localized and Cybersecure Vehicle (EX-Emerge), funded by
   Italian Government under CIPE resolution n. 70/2017 (Aug. 7, 2017).
CR [Anonymous], [No title captured]
   [Anonymous], IEEE SOFTW
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], 2012, 3026373 ETSI EN
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], 2018, 26262 ISO
   [Anonymous], 2011, ISO/IEC JTC 1/SC 7, DOI DOI 10.1007/BF01077867
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], 2006, P 7 USENIX S OP SYST
   [Anonymous], [No title captured]
   Avizienis A, 2004, IEEE T DEPEND SECURE, V1, P11, DOI 10.1109/TDSC.2004.2
   Axelsson J, 2019, 2019 14TH ANNUAL CONFERENCE SYSTEM OF SYSTEMS ENGINEERING (SOSE), P113, DOI [10.1109/sysose.2019.8753887, 10.1109/SYSOSE.2019.8753887]
   Behere S, 2016, INFORM SOFTWARE TECH, V73, P136, DOI 10.1016/j.infsof.2015.12.008
   Bell D. E., 1976, MTR2997 MITRE CORP
   Benza M., 2012, 2012 7th International Conference on System of Systems Engineering (SoSE 2012). Proceedings, P223, DOI 10.1109/SYSoSE.2012.6384180
   Bergenhem C., 2012, P 19 ITS WORLD C 22
   Bergenhem C, 2015, IEEE INT C INTELL TR, P1989, DOI 10.1109/ITSC.2015.322
   Bijlsma T, 2017, IEEE INT VEH SYM, P1819, DOI 10.1109/IVS.2017.7995970
   Boardman J, 2006, PROCEEDINGS OF THE 2006 IEEE/SMC INTERNATIONAL CONFERENCE ON SYSTEM OF SYSTEMS ENGINEERING, P118
   Boeira F, 2017, IEEE VEHIC NETW CONF, P53, DOI 10.1109/VNC.2017.8275641
   Broy M, 2009, COMPUTER, V42, P98, DOI 10.1109/MC.2009.413
   Cheng BHC, 2009, LECT NOTES COMPUT SC, V5525, P1, DOI 10.1007/978-3-642-02161-9_1
   Dahmann JS, 2008, 2008 2ND ANNUAL IEEE SYSTEMS CONFERENCE, P133
   De Lemos Rogerio, 2013, SOFTWARE ENG SELF AD, P1
   De Wolf T, 2005, FRONT ARTIF INTEL AP, V135, P18
   Delgado N, 2004, IEEE T SOFTWARE ENG, V30, P859, DOI 10.1109/TSE.2004.91
   Eliasson U, 2015, 2015 12TH WORKING IEEE/IFIP CONFERENCE ON SOFTWARE ARCHITECTURE (WICSA), P115, DOI 10.1109/WICSA.2015.18
   ETSI Intelligent Transport Systems (ITS), 2014, ETSI EN 302 637-2
   Fitzgerald J., 2014, FDN MODEL BASED ENG, P1
   Günther HJ, 2015, 2015 14TH INTERNATIONAL CONFERENCE ON ITS TELECOMMUNICATIONS (ITST), P1, DOI 10.1109/ITST.2015.7377190
   Heldal R, 2016, 19TH ACM/IEEE INTERNATIONAL CONFERENCE ON MODEL DRIVEN ENGINEERING LANGUAGES AND SYSTEMS (MODELS'16), P216, DOI 10.1145/2976767.2976808
   ISO/IEC/IEEE, 2017, 247652017 ISOIECIEEE
   Jaradat Raed M., 2014, International Journal of System of Systems Engineering, V5, P193, DOI 10.1504/IJSSE.2014.065750
   Johansson R, 2017, AUTOMATED DRIVING: SAFER AND MORE EFFICIENT FUTURE DRIVING, P547, DOI 10.1007/978-3-319-31895-0_25
   Leucker M, 2009, J LOGIC ALGEBR PROGR, V78, P293, DOI 10.1016/j.jlap.2008.08.004
   Leveson NG, 2011, ENG SYST, P1
   Liang KY, 2016, IEEE T INTELL TRANSP, V17, P1051, DOI 10.1109/TITS.2015.2492243
   Lyamin N, 2019, IEEE COMMUN LETT, V23, P442, DOI 10.1109/LCOMM.2019.2894767
   Maier M., 1998, SYST ENG, V1, P267, DOI [DOI 10.1002/(SICI)1520-6858(1998)1:43.0.CO;2-D, 10.1002/(SICI)1520-6858(1998)1:4lt;267::AID-SYS3gt;3.0.CO;2-D, DOI 10.1002/(SICI)1520-6858(1998)1:4LT;267::AID-SYS3GT;3.0.CO;2-D, DOI 10.1002/(SICI)1520-6858(1998)1:4<267::AID-SYS3>3.0.CO;2-D]
   Malavolta I, 2013, IEEE T SOFTWARE ENG, V39, P869, DOI 10.1109/TSE.2012.74
   Myers Andrew C, 2001, Jif: Java information flow. Software release
   Nielsen CB, 2015, ACM COMPUT SURV, V48, DOI 10.1145/2794381
   Nilsson J., 2013, SAE TECHNICAL PAPER
   Nord RL, 2014, LECT NOTES BUS INF P, V199, P43
   Pelliccione P, 2016, SOFTWARE-INTENSIVE SYSTEMS-OF-SYSTEMS SYMPOSIUM (SISOS@ECSA), DOI 10.1145/3175731.3175733
   Pelliccione P, 2017, J SYST ARCHITECT, V77, P83, DOI 10.1016/j.sysarc.2017.02.005
   Rasmussen J, 1997, SAFETY SCI, V27, P183, DOI 10.1016/S0925-7535(97)00052-0
   Russo A, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P280, DOI 10.1145/2784731.2784756
   Sabelfeld A, 2003, IEEE J SEL AREA COMM, V21, P5, DOI 10.1109/JSAC.2002.806121
   Salehie M, 2009, ACM T AUTON ADAP SYS, V4, DOI 10.1145/1516533.1516538
   Samad T., 2011, The Impact of Control Technology, P175
   Sanders JW, 2012, FORM ASP COMPUT, V24, P45, DOI 10.1007/s00165-011-0190-7
   Shoup Donald, 2011, The high cost of free parking
   Strigini L., 2012, Resilience assessment and evaluation of computing systems, P3, DOI [10.1007/978-3-642-29032-9_1, DOI 10.1007/978-3-642-29032-9_1]
   Uhlemann E, 2018, IEEE VEH TECHNOL MAG, V13, P14, DOI 10.1109/MVT.2017.2781539
   Uzcátegui RA, 2009, IEEE COMMUN MAG, V47, P126, DOI 10.1109/MCOM.2009.4939288
   Vinel A, 2018, IEEE COMMUN LETT, V22, P1600, DOI 10.1109/LCOMM.2018.2835484
   Vinel A, 2015, IEEE COMMUN MAG, V53, P192, DOI 10.1109/MCOM.2015.7180527
   Vinkhuyzen E., 2016, ETHNOGRAPHIC PRAXIS, P522, DOI [10.1111/1559-8918.2016.01108, DOI 10.1111/1559-8918.2016.01108]
   WHO, 2015, Global status report on road safety 2015
   Wohlrab R, 2019, P IEEE INT C SOFTW A
   Wohlrab R, 2019, J SOFTW-EVOL PROC, V31, DOI 10.1002/smr.2166
   Wohlrab R, 2018, PROCEEDINGS OF THE 2018 INTERNATIONAL CONFERENCE ON SOFTWARE AND SYSTEM PROCESS (ICSSP 2018), P31, DOI 10.1145/3202710.3203155
   Yip Alexander., 2009, EuroSys
   You GR, 2014, PROCEEDINGS OF THE 2014 9TH INTERNATIONAL CONFERENCE ON SYSTEM OF SYSTEMS ENGINEERING (SOSE 2014), P13, DOI 10.1109/SYSOSE.2014.6892456
   Zambonelli F, 2004, AUTON AGENT MULTI-AG, V9, P253, DOI 10.1023/B:AGNT.0000038028.66672.1e
   Zhang PC, 2018, INFORM SOFTWARE TECH, V98, P5, DOI 10.1016/j.infsof.2018.01.014
   Zyskind G, 2015, 2015 IEEE SECURITY AND PRIVACY WORKSHOPS (SPW), P180, DOI 10.1109/SPW.2015.27
NR 75
TC 15
Z9 15
U1 1
U2 21
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29a, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 1
PY 2020
VL 191
AR 102414
DI 10.1016/j.scico.2020.102414
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA KW9NS
UT WOS:000521511000004
DA 2024-07-18
ER

PT J
AU Krings, S
   Leuschel, M
   Schmidt, J
   Schneider, D
   Frappier, M
AF Krings, Sebastian
   Leuschel, Michael
   Schmidt, Joshua
   Schneider, David
   Frappier, Marc
TI Translating Alloy and extensions to classical B
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 6th International ABZ Conference on ASM, Alloy, B, TLA, VDM, Z (ABZ)
CY JUN 05-08, 2018
CL Southampton, ENGLAND
DE Alloy B; Specification languages; Constraint solving; Translation;
   Language semantics
ID MODEL; PROB; SMT
AB In this article, we introduce a denotational translation of the specification language Alloy to classical B. Our translation closely follows the Alloy grammar. Each construct is translated into a semantically equivalent component of the B language. In addition to basic Alloy constructs, our approach supports integers, sequences and orderings. The translation is fully automated and our implementation can be used in PRoB. We evaluate the usefulness by applying AtelierB and PRoB to translated models, showing benefits for proof and constraint solving with integers and higher-order quantification. (C) 2019 Elsevier B.V. All rights reserved.
C1 [Krings, Sebastian; Leuschel, Michael; Schmidt, Joshua; Schneider, David] Univ Dusseldorf, Inst Informat, Univ Str 1, D-40225 Dusseldorf, Germany.
   [Frappier, Marc] Univ Sherbrooke, Sherbrooke, PQ, Canada.
C3 Heinrich Heine University Dusseldorf; University of Sherbrooke
RP Krings, S (corresponding author), Univ Dusseldorf, Inst Informat, Univ Str 1, D-40225 Dusseldorf, Germany.
EM sebastian.krings@hhu.de; michael.leuschel@hhu.de; joshua.schmidt@hhu.de;
   david.schneider@hhu.de; marc.frappier@usherbrooke.ca
RI Krings, Sebastian/X-1199-2019
OI Krings, Sebastian/0000-0001-6712-9798; Schmidt,
   Joshua/0000-0001-8842-2993
CR Abrial J.-R., 1996, B BOOK ASSIGNING PRO
   [Anonymous], 1997, ART COMPUTER PROGRAM
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], 1984, AUTOMATED REASONING
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   BOUTE RT, 1992, ACM T PROGR LANG SYS, V14, P127, DOI 10.1145/128861.128862
   Carlsson M., 1997, Programming Languages: Implementations, Logics, and Programs. 9th International Symposium, PLILP'97, Including a Special Track on Declarative Programming Languages in Education. Proceedings, P191, DOI 10.1007/BFb0033845
   Cunha A, 2014, LECT NOTES COMPUT SC, V8477, P303, DOI 10.1007/978-3-662-43652-3_29
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Frias MF, 2007, ACM T SOFTW ENG METH, V17, DOI 10.1145/1314493.1314497
   Frias MF, 2005, PROC INT CONF SOFTW, P442
   Hansen D., 2012, LNCS, V7321, P24, DOI 10.1007/978-3-642-30729-43
   Iliasov A, 2010, LECT NOTES COMPUT SC, V6286, P70
   Jackson D, 2002, ACM T SOFTW ENG METH, V11, P256, DOI 10.1145/505145.505149
   Jackson D, 2012, SOFTWARE ABSTRACTIONS: LOGIC, LANGUAGE, AND ANALYSIS, P1
   Jaffar J., 1987, Logic Programming. Proceedings of the Fourth International Conference, P196
   Krings Sebastian, 2018, Abstract State Machines, Alloy, B, TLA, VDM, and Z. 6th International Conference, ABZ 2018. Proceedings: LNCS 10817, P71, DOI 10.1007/978-3-319-91271-4_6
   Krings S, 2018, LECT NOTES COMPUT SC, V10702, P63, DOI 10.1007/978-3-319-73305-0_5
   Leuschel M, 2003, LECT NOTES COMPUT SC, V2805, P855
   Leuschel Michael, 2008, International Journal on Software Tools for Technology Transfer, V10, P185, DOI 10.1007/s10009-007-0063-9
   Leuschel M., 2014, FORMAL METHODS APPL, P427, DOI 10.1002/9781119002727.ch14
   Leuschel M, 2014, LECT NOTES COMPUT SC, V8477, P101, DOI 10.1007/978-3-662-43652-3_8
   Macedo N, 2016, FSE'16: PROCEEDINGS OF THE 2016 24TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON FOUNDATIONS OF SOFTWARE ENGINEERING, P373, DOI 10.1145/2950290.2950318
   Malik P, 2010, LECT NOTES COMPUT SC, V5977, P377, DOI 10.1007/978-3-642-11811-1_28
   Matos PJ, 2008, LECT NOTES COMPUT SC, V5238, P346
   Meng BL, 2017, LECT NOTES ARTIF INT, V10395, P148, DOI 10.1007/978-3-319-63046-5_10
   Mikhailov L., 2002, ZB 2002: Formal Specification and Development in Z and B. 2nd International Conference of B and Z Users. Proceedings (Lecture Notes in Computer Science Vol.2272), P140
   Milicevic A, 2014, SCI COMPUT PROGRAM, V94, P203, DOI 10.1016/j.scico.2014.05.009
   Near JP, 2010, LECT NOTES COMPUT SC, V5977, P118, DOI 10.1007/978-3-642-11811-1_10
   Plagge Daniel, 2012, FM 2012: Formal Methods. Proceedings of the 18th International Symposium, P372, DOI 10.1007/978-3-642-32759-9_31
   Plagge D, 2007, LECT NOTES COMPUT SC, V4591, P480
   Requet A, 2008, LECT NOTES COMPUT SC, V5238, P345
   Torlak E, 2013, MATH STRUCT COMP SCI, V23, P915, DOI 10.1017/S0960129512000291
   Tortak E, 2007, LECT NOTES COMPUT SC, V4424, P632
   Ulbrich M, 2012, LECT NOTES COMPUT SC, V7214, P422, DOI 10.1007/978-3-642-28756-5_29
NR 42
TC 1
Z9 1
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29a, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR 1
PY 2020
VL 188
AR 102378
DI 10.1016/j.scico.2019.102378
PG 25
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA KM3JO
UT WOS:000514017500003
OA hybrid
DA 2024-07-18
ER

PT J
AU Zhang, D
   Bosnacki, D
   van den Brand, M
   Huizing, C
   Jacobs, B
   Kuiper, R
   Wijs, A
AF Zhang, Dan
   Bosnacki, Dragan
   van den Brand, Mark
   Huizing, Cornelis
   Jacobs, Bart
   Kuiper, Ruurd
   Wijs, Anton
TI Dependency safety for Java - Implementing and testing failboxes
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Exception handling; Concurrency; Failboxes; Java
AB Exception mechanisms help to ensure that a program satisfies the important robustness criterion of dependency safety: if an operation fails in an execution sequence, any code depending on the successful completion of this operation should also fail in a controlled way. However, the exception handling mechanisms available in languages like Java do not provide a structured way to achieve dependency safety. The language extension failbox provides dependency safety in a compositional manner. Asynchronous exceptions occurring inside the failbox code are a serious challenge in achieving dependency safety. In this article we present a Java implementation which deals with this challenge by developing failboxes incrementally, through four increasingly robust iterations. For each incremental implementation step we analyze the vulnerabilities and argue the remedies in the next implementation. We also present a testing approach to investigate whether the vulnerabilities are realistic and the remedies proposed are effective. This testing approach enables us to generate asynchronous exceptions in a controlled manner for concurrent programs and the tests are repeatable in that they give the same results for runs that may differ in scheduling, even on different platforms. (C) 2019 Published by Elsevier B.V.
C1 [Zhang, Dan; Bosnacki, Dragan; van den Brand, Mark; Huizing, Cornelis; Kuiper, Ruurd; Wijs, Anton] Eindhoven Univ Technol, NL-5600 MB Eindhoven, Netherlands.
   [Zhang, Dan] Univ Twente, NL-7500 AE Enschede, Netherlands.
   [Jacobs, Bart] Katholieke Univ Leuven, B-3001 Leuven, Belgium.
C3 Eindhoven University of Technology; University of Twente; KU Leuven
RP Wijs, A (corresponding author), Eindhoven Univ Technol, NL-5600 MB Eindhoven, Netherlands.
EM a.j.wijs@tue.nl
RI Wijs, Anton/A-9694-2019; Jacobs, Bart/B-1271-2014
OI Wijs, Anton/0000-0002-2071-9624; Jacobs, Bart/0000-0002-3605-249X; van
   den Brand, Mark/0000-0003-3529-6182
FU China Scholarship Council (CSC) [201306280006]
FX This work was sponsored by the China Scholarship Council (CSC), Grant
   number 201306280006.
CR [Anonymous], 2010, P ISR 2010 41 INT S
   Armstrong Joe, 2003, Making reliable distributed systems in the presence of software errors
   Bagherzadeh Mehdi., 2013, Proceedings of the 12th Annual International Conference on Aspect-oriented Software Development, AOSD '13, P185
   Bosnacki D., 2016, PPPJ VIRTUAL MACHINE
   Bosnacki D., 2015, LNCS, V9539, P141
   Cabral B, 2009, LAT-AM SYMP DEP COMP, P73, DOI 10.1109/LADC.2009.15
   de Putter Sander, 2018, Formal Aspects of Component Software. 15th International Conference (FACS 2018). Proceedings: Lecture Notes in Computer Science (LNCS 11222), P288, DOI 10.1007/978-3-030-02146-7_15
   de Putter S, 2018, FORM ASP COMPUT, V30, P3, DOI 10.1007/s00165-017-0437-z
   Felber Pascal, 2015, Transactional Memory. Foundations, Algorithms, Tools, And Applications. COST Action Euro-TM IC1001. LNCS: 8913, P245
   Gosling J., 2015, JAVA LANGUAGE SPECIF
   Guerraoui R, 2008, PPOPP'08: PROCEEDINGS OF THE 2008 ACM SIGPLAN SYMPOSIUM ON PRINCIPLES AND PRACTICE OF PARALLEL PROGRAMMING, P175, DOI 10.1145/1345206.1345233
   Harris T, 2005, SCI COMPUT PROGRAM, V58, P325, DOI 10.1016/j.scico.2005.03.005
   Harris Tim., 2005, PPoPP '05: Proceedings of the tenth ACM SIGPLAN symposium on Principles and practice of parallel programming, P48, DOI DOI 10.1145/1065944.1065952
   Harris Tim., 2010, Synthesis Lectures on Computer Architecture, V2nd
   Herlihy M, 2003, P 22 ANN S PRINCIPLE, P92
   Herlihy M., 1993, INT S COMPUTER ARCHI, DOI DOI 10.1145/165123.165164
   Jacobs B., 2015, CW REPORTS, V680
   Jacobs B., 2015, FTFJP
   Jacobs B, 2007, SEFM 2007: FIFTH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING AND FORMAL METHODS, PROCEEDINGS, P113, DOI 10.1109/SEFM.2007.32
   Jacobs B, 2009, LECT NOTES COMPUT SC, V5653, P470, DOI 10.1007/978-3-642-03013-0_22
   Jagannath Vilas., 2011, FDN SOFTWARE ENG FSE, P223
   Lagorio G, 2011, J OBJECT TECHNOL, V10, DOI 10.5381/jot.2011.10.1.a1
   Rebelo H., 2011, FTIJP
   Shavit N., 1995, Proceedings of the Fourteenth Annual ACM Symposium on Principles of Distributed Computing, P204, DOI 10.1145/224964.224987
   Shinnar A., 2004, MSRTR2004140
   Tasharofi S., 2011, TECH REP
   Toub S., 2005, MSDN MAGAZINE
   Wijs A, 2019, LECT NOTES COMPUT SC, V11724, P410, DOI 10.1007/978-3-030-30446-1_22
   Wijs A, 2014, LECT NOTES COMPUT SC, V8430, P258, DOI 10.1007/978-3-319-06200-6_21
   Wijs A, 2013, LECT NOTES COMPUT SC, V7795, P565, DOI 10.1007/978-3-642-36742-7_41
   Zhang D., 2014, AMT MODELS, P64
NR 31
TC 0
Z9 0
U1 0
U2 7
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 1
PY 2019
VL 184
AR 102316
DI 10.1016/j.scico.2019.102316
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA JM6QO
UT WOS:000496336900003
OA Green Accepted, Green Published, Bronze
DA 2024-07-18
ER

PT J
AU Miyazawa, A
   Cavalcanti, A
   Wellings, A
AF Miyazawa, Alvaro
   Cavalcanti, Ana
   Wellings, Andy
TI <i>SCJ</i>-<i>Circus</i>: Specification and refinement of
   Safety-Critical Java programs
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 18th Brazilian Symposium on Formal Methods (SBMF) as part of 6th
   Brazilian Conference on Software - Theory and Practice (CBSoft)
CY SEP 21-22, 2015-2018
CL Belo Horizonte, BRAZIL
DE SCJ; Missions; Process algebra; Semantics; Refinement
AB Safety-Critical Java (SCJ) is a version of Java for real-time, embedded, safety-critical applications. It supports certification via abstractions that enforce a particular program architecture, with controlled concurrency and memory models. SCJ is an Open Group standard, with a reference implementation, but little support for reasoning. Here, we present SCJ-Circus, a refinement notation for specification and verification of low-level models of SCJ programs. SCJ-Circus is part of the Circus family of state-rich process algebras: it includes the Circus constructs for modelling of sequential and concurrent behaviour based on Z and CSP, and the real-time and object-oriented extensions of Circus, in addition to the SCJ abstractions. We present the syntax of SCJ-Circus and its semantics, defined by mapping SCJ-Circus constructs to those of Circus. We also detail a refinement strategy that takes a Circus design that adheres to a multiprocessor cyclic executive pattern and produces an SCJ program design, described in SCJ-Circus. Finally, we show how this refinement strategy can be extended for more complex program architectures. (C) 2019 Elsevier B.V. All rights reserved.
C1 [Miyazawa, Alvaro; Cavalcanti, Ana; Wellings, Andy] Univ York, Dept Comp Sci, York, N Yorkshire, England.
C3 University of York - UK
RP Miyazawa, A (corresponding author), Univ York, Dept Comp Sci, York, N Yorkshire, England.
EM Alvaro.Miyazawa@york.ac.uk; Ana.Cavalcanti@york.ac.uk;
   Andy.Wellings@york.ac.uk
RI Miyazawa, Alvaro/M-7118-2019
OI Miyazawa, Alvaro/0000-0003-2233-9091; Cavalcanti, Ana Lucia
   Caneca/0000-0002-0831-1976
FU EPSRC [EP/H017461/1]; EPSRC [EP/H017461/1, EP/M025756/1] Funding Source:
   UKRI
FX This work is funded by the EPSRC grant EP/H017461/1. No new primary data
   was created during this study.
CR [Anonymous], 2006, THESIS
   Antonino P, 2014, LECT NOTES COMPUT SC, V8442, P62, DOI 10.1007/978-3-319-06410-9_5
   Burdy L., 2005, International Journal on Software Tools for Technology Transfer, V7, P212, DOI 10.1007/s10009-004-0167-4
   Burns A., 1999, Ada Letters, V19, P49
   Cavalcanti A., 2005, SOFTW SYST MODEL, V4, P277, DOI DOI 10.1007/S10270-005-0085-2
   Cavalcanti A, 2013, REAL-TIME SYST, V49, P614, DOI 10.1007/s11241-013-9182-4
   Cavalcanti A, 2011, FORM ASP COMPUT, V23, P465, DOI 10.1007/s00165-010-0170-3
   Dijkstra E. W., 1976, A Discipline of Pro-gramming
   Foster Simon, 2015, Unifying Theories of Programming 5th International Symposium, UTP 2014. Revised Selected Papers: LNCS 8963, P21, DOI 10.1007/978-3-319-14806-9_2
   Gibson-Robinson T., 2014, Lecture Notes in Computer Science, V8413, P187
   Haddad G., 2010, P 8 INT WORKSHOP JAV, P155
   Hoare C. A. R., 1998, Unifying Theories of Programming
   Kalibera T., 2010, P 8 INT WORKSH JAV T, P164, DOI [10.1145/1850771.1850794, DOI 10.1145/1850771.1850794]
   Locke D., 2013, JSR302 OP GROUP
   Luckcuck M, 2016, LECT NOTES COMPUT SC, V9681, P226, DOI 10.1007/978-3-319-33693-0_15
   Marriott C, 2014, LECT NOTES COMPUT SC, V8442, P465, DOI 10.1007/978-3-319-06410-9_32
   Miyazawa A., 2015, P 17 INT WORKSH REF, P71
   Miyazawa A., 2016, SCJ CIRCUS REPORT SP
   Miyazawa A, 2014, LECT NOTES COMPUT SC, V8739, P155, DOI 10.1007/978-3-319-10181-1_10
   Miyazawa A, 2014, FORM ASP COMPUT, V26, P367, DOI 10.1007/s00165-013-0291-6
   Miyazawa A, 2013, LECT NOTES COMPUT SC, V8144, P249, DOI 10.1007/978-3-642-41202-8_17
   Miyazawa A, 2012, SCI COMPUT PROGRAM, V77, P1151, DOI 10.1016/j.scico.2011.07.007
   Nipkow Tobias, 2002, ISABELLE HOL PROOF A
   Roscoe AW, 2010, TEXTS COMPUT SCI, P3, DOI 10.1007/978-1-84882-258-0_1
   Singh NK, 2012, PROCEEDINGS OF THE 10TH INTERNATIONAL WORKSHOP ON JAVA TECHNOLOGIES FOR REAL-TIME AND EMBEDDED SYSTEMS, P62
   Tang Daniel., 2010, Proceeding of the International Workshop on Java Technologies for Real-Time and Embedded Systems, JTRES '10, P148, DOI DOI 10.1145/1850771.1850792
   Tofte M, 1997, INFORM COMPUT, V132, P109, DOI 10.1006/inco.1996.2613
   Wei K., 2013, LNCS, V7681, P68, DOI [10.1007/978-3-642-35705-3, DOI 10.1007/978-3-642-35705-3]
   Wellings A., 2004, CONCURRENT REAL TIME
   Wellings Andy., 2013, Proceedings of the 11th International Workshop on Java Technologies for Real-Time and Embedded Systems. JTRES'13, P48, DOI DOI 10.1145/2512989.2512991
   Woodcock J., 1996, Using Z: Specification, Refinement, and Proof
   Woodcock J. C. P., 2009, LNCS, P202
   Zegarra ET, 2016, 15TH IEEE INTERNATIONAL SYMPOSIUM ON NETWORK COMPUTING AND APPLICATIONS (IEEE NCA 2016), P93, DOI 10.1109/NCA.2016.7778600
   Zeyda F., 2012, TECH REP
   Zeyda F, 2015, FORM ASP COMPUT, V27, P423, DOI 10.1007/s00165-014-0317-8
   Zeyda F, 2014, COMPUT J, V57, P1046, DOI 10.1093/comjnl/bxt060
NR 36
TC 0
Z9 0
U1 1
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUL 15
PY 2019
VL 181
BP 140
EP 176
DI 10.1016/j.scico.2019.01.002
PG 37
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA IW0MB
UT WOS:000484654900008
OA Bronze, Green Accepted
DA 2024-07-18
ER

PT J
AU Molina, F
   Cornejo, C
   Degiovanni, R
   Regis, G
   Castro, PF
   Aguirre, N
   Frias, MF
AF Molina, Facundo
   Cornejo, Cesar
   Degiovanni, Renzo
   Regis, German
   Castro, Pablo F.
   Aguirre, Nazareno
   Frias, Marcelo F.
TI An evolutionary approach to translating operational specifications into
   declarative specifications
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Program specification; Program analysis; Relational logic; Evolutionary
   algorithms
AB Various tools for program analysis, including run-time assertion checkers and static analyzers such as verification and test generation tools, require formal specifications of the programs being analyzed. Moreover, many of these tools and techniques require such specifications to be written in a particular style, or follow certain patterns, in order to obtain an acceptable performance from the corresponding analyses. Thus, having a formal specification sometimes is not enough for using a particular technique, since such specification may not be provided in the right formalism. In this paper, we deal with this problem in the increasingly common case of having an operational specification, while for analysis reasons requiring a declarative specification. We propose an evolutionary approach to translate an operational specification written in a sequential programming language, into a declarative specification, in relational logic. We perform experiments on a benchmark of data structure implementations, for which operational invariants are available, and show that our evolutionary computation based approach to translating specifications achieves very good precision in this context, and produces declarative specifications that are more amenable to analyses that demand specifications in this style. This is assessed in two contexts: bounded verification of data structure invariant preservation, and instance enumeration using symbolic execution aided by tight bounds. (C) 2019 Elsevier B.V. All rights reserved.
C1 [Molina, Facundo; Cornejo, Cesar; Regis, German; Castro, Pablo F.; Aguirre, Nazareno] Univ Rio Cuarto, Dept Comp Sci, FCEFQyN, Rio Cuarto, Argentina.
   [Molina, Facundo; Cornejo, Cesar; Castro, Pablo F.; Aguirre, Nazareno; Frias, Marcelo F.] Natl Council Sci & Tech Res CONICET, Buenos Aires, DF, Argentina.
   [Degiovanni, Renzo] Univ Luxembourg, SnT, Luxembourg, Luxembourg.
   [Frias, Marcelo F.] Buenos Aires Inst Technol, Dept Software Engn, Buenos Aires, DF, Argentina.
C3 Universidad Nacional Rio Cuarto; Consejo Nacional de Investigaciones
   Cientificas y Tecnicas (CONICET); University of Luxembourg
RP Molina, F (corresponding author), Univ Rio Cuarto, Dept Comp Sci, FCEFQyN, Rio Cuarto, Argentina.; Molina, F (corresponding author), Natl Council Sci & Tech Res CONICET, Buenos Aires, DF, Argentina.
EM fmolina@dc.exa.unrc.edu.ar; ccornejo@dc.exa.unrc.edu.ar;
   renzo.degiovanni@uni.lu; gregis@dc.exa.unrc.edu.ar;
   pcastro@dc.exa.unrc.edu.ar; naguirre@dc.exa.unrc.edu.ar;
   mfrias@itba.edu.ar
RI Degiovanni, Renzo/KUF-0926-2024
OI Molina, Facundo/0000-0002-2441-1555; Degiovanni,
   Renzo/0000-0003-1611-3969
FU Argentina's National Agency for Scientific and Technological Promotion
   (ANPCyT) [2015-0586, 2016-1384, 2017-1979, 2017-2622]; Agence Nationale
   de la Recherche (France) [INTERJANR/18/12632675/SATOCROSS]
FX Renzo Degiovanni is on leave from the Departments of Computer Science
   and Mathematics, University of Rio Cuarto, Argentina. This work was
   partially supported by Argentina's National Agency for Scientific and
   Technological Promotion (ANPCyT) through grants 2015-0586, 2016-1384,
   2017-1979, 2017-2622; and by the Agence Nationale de la Recherche
   (France) INTERJANR/18/12632675/SATOCROSS project.
CR [Anonymous], P 29 INT C SOFTW ENG
   [Anonymous], 1996, GENETIC ALGORITHMS D, DOI DOI 10.1007/978-3-662-03315-9_4
   Artzi S., 2010, P 19 INT S SOFTW TES
   Berdine J., 2005, P 3 AS C PROGRMM LAN
   Bicarregui J., 2000, P VDM 2000 2 VDM WOR
   Boyapati C., 2002, P 2002 ACM SIGSOFT I
   Burdy L, 2005, INT J SOFTW TOOLS TE, V7
   Celik A., 2017, PACMPL 1 OOPSLA, V1
   Cranen S, 2011, THEOR COMPUT SCI, V412, P3129, DOI 10.1016/j.tcs.2011.02.034
   Demasi Ramiro, 2013, LNCS
   Dennis G., 2006, P ACM SIGSOFT INT S
   Dolby Julian, 2007, P 6 JOINT M EUR SOFT
   Ernst MD, 2007, SCI COMPUT PROGRAM, V69, P35, DOI 10.1016/j.scico.2007.01.015
   Galeotti J. P., 2013, IEEE T SOFTW ENG, V39
   Galeotti J. P., 2010, P 19 INT S SOFTW TES
   Galeotti Juan P., 2015, P INT C SOFTW ENG IC
   Galeotti Juan P., 2015, IEEE T SOFTW ENG, V41
   Geldenhuys J., 2013, LNCS, V7871
   Ghezzi C., 2003, FUNDAMENTALS SOFTWAR
   Goldberg D. E., 1989, GENETIC ALGORITHMS S
   Gopinath D., 2011, LNCS
   Gordon CS, 2017, ACM T PROGR LANG SYS, V39, DOI 10.1145/3064850
   Jackson D., 2000, P 2000 ACM SIGSOFT I
   Jackson Daniel, 2006, Software abstractions: Logic, language, and analysis
   Jones JA, 2002, ICSE 2002: PROCEEDINGS OF THE 24TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P467, DOI 10.1109/ICSE.2002.1007991
   Khalek S., 2011, ASE 2011
   Khurshid S., 2004, AUTOM SOFTW ENG, V11
   KHURSHID S, 2003, LNCS, V2619
   Klein Uri, 2012, LNCS
   Kroening D., 2014, LNCS, V8413
   Liskov B., 2000, PROGRAM DEV JAVA ABS
   Long Fan, 2015, P 10 JOINT M FDN SOF
   Luo Q., 2014, LNCS
   Molina F., 2018, P 11 INT WORKSH SEAR
   Molina F., 2016, LNCS
   Pasareanu Corina S., 2008, FORM METHODS SYST DE, V32
   Pei Y., 2014, IEEE T SOFTW ENG, V40
   Pervaiz Aman, 2007, P 11 C TOOLS ALG CON
   Ponzio P., 2016, P INT S FDN SOFTW EN
   Rosner N., 2015, IEEE T SOFTW ENG
   Russell S., 2016, Artificial intelligence a modern approach
   Samanta Roopsha, 2011, LNCS
   Senni V., 2012, LNCS
   Shchekotykhin K., 2016, P 25 INT JOINT C ART
   Sugihara K., 1997, P 3 JOINT C INF SCI, P172
   Uchitel Sebastian, 2009, IEEE T SOFTW ENG, V35
   Visser W., 2004, P ACM SIGSOFT INT S
   Xie Y., 2005, P 17 INT C COMP AID
NR 48
TC 1
Z9 1
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUL 15
PY 2019
VL 181
BP 47
EP 63
DI 10.1016/j.scico.2019.05.006
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA IW0MB
UT WOS:000484654900003
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Yang, C
   Liang, P
   Avgeriou, P
AF Yang, Chen
   Liang, Peng
   Avgeriou, Paris
TI Evaluation of a process for architectural assumption management in
   software development
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Software architecture; Architectural assumption; Management process;
   Case study
ID VERIFICATION; MODEL
AB Context: Architectural assumption management is critical to the success of software development projects. In this paper, we propose an Architectural Assumption Management (AAM) process, comprised of four MM activities: Architectural Assumption Making, Description, Evaluation, and Maintenance.
   Objective: Evaluating the MM process in architectural assumption management, regarding the ease of understanding and the effort of conducting the AAM process, as well as the effectiveness of using the AAM process to make architectural assumptions explicit and to identify and reduce invalid architectural assumptions.
   Method: An explanatory study with 88 first-year master students in software engineering, and an exploratory study with five practitioners from five companies.
   Results: (1) the ease of understanding the MM process is moderate for first-year master students but easy for practitioners; (2) the effort of conducting the MM process is moderate for first-year master students; (3) Making and Evaluation took the students more time than Description and Maintenance; (4) the practitioners considered Evaluation as the most time consuming activity; (5) the MM process can help to make architectural assumptions explicit and to identify and reduce invalid architectural assumptions in projects. The majority of the students and practitioners agreed that Architectural Assumption Evaluation is the most helpful activity for all these three aspects. For other activities, there are different opinions about their helpfulness; and (6) there are various factors identified that can impact the aforementioned results. Being aware of and properly adjusting these factors can facilitate the application of the MM process in projects.
   Conclusions: The AAM process aims at systematically managing architectural assumptions in software development. The results of the case studies provide preliminary empirical evidence for the evaluation of the MM process. (C) 2018 Elsevier B.V. All rights reserved.
C1 [Yang, Chen; Liang, Peng] Wuhan Univ, Sch Comp Sci, State Key Lab Software Engn, Wuhan 430072, Hubei, Peoples R China.
   [Yang, Chen; Avgeriou, Paris] Univ Groningen, Dept Math & Comp Sci, Nijenborgh 9, NL-9747 AG Groningen, Netherlands.
   [Yang, Chen] IBO Technol Shenzhen Co Ltd, Shenzhen 518057, Peoples R China.
C3 Wuhan University; University of Groningen
RP Liang, P (corresponding author), Wuhan Univ, Sch Comp Sci, State Key Lab Software Engn, Wuhan 430072, Hubei, Peoples R China.
EM liangp@whu.edu.cn
RI peng, liang/HKE-0294-2023
OI Avgeriou, Paris/0000-0002-7101-0754; Liang, Peng/0000-0002-2056-5346
FU NSFC [61472286]; University of Groningen
FX The authors wish to thank the students who participated in the case
   study during the requirements engineering and software architecture
   course of Autumn Semester 2016 at Wuhan University in China, and the
   practitioners who participated in the focus groups in the Netherlands.
   We would also like to thank Daniel Feitosa for reviewing an earlier
   version of the paper. This work is partially sponsored by the NSFC under
   Grant No. 61472286 and the Ubbo Emmius scholarship program by the
   University of Groningen.
CR Adolph S, 2011, EMPIR SOFTW ENG, V16, P487, DOI 10.1007/s10664-010-9152-6
   [Anonymous], 2003, Proceedings of the 7th International Conference on Empirical Assessment in Software Engineering
   [Anonymous], 2012, CASE STUDY RES SOFTW, DOI DOI 10.1002/9781118181034
   [Anonymous], 2003, Rational Unified Process Made Easy: A Practitioner's Guide to the RUP
   Arthur JD, 2007, 2007 IEEE INTERNATIONAL CONFERENCE ON PERVASIVE SERVICES, P109
   Berander P, 2004, 2004 INTERNATIONAL SYMPOSIUM ON EMPIRICAL SOFTWARE ENGINEERING, PROCEEDINGS, P167
   Boone HN., 2012, J EXT, V50, P1
   Carver JC, 2010, EMPIR SOFTW ENG, V15, P35, DOI 10.1007/s10664-009-9109-9
   Chen Y, 2018, INFORM SOFTWARE TECH, V94, P82, DOI 10.1016/j.infsof.2017.10.003
   de Boer RC, 2007, LECT NOTES COMPUT SC, V4880, P197
   Flanagan C, 2002, LECT NOTES COMPUT SC, V2305, P262
   Galster Matthias, 2012, 16th International Conference on Evaluation & Assessment in Software Engineering (EASE 2012), P146, DOI 10.1049/ic.2012.0018
   Garlan D, 2009, IEEE SOFTWARE, V26, P66, DOI 10.1109/MS.2009.86
   Garlan David, 2010, P FSE SDP WORKSH FUT, P125, DOI [10.1145/1882362.1882389, DOI 10.1145/1882362.1882389]
   Glaser B. G., 1967, DISCOVERY GROUNDED T, DOI 10.1515/9783111660211/html
   Haley CB, 2008, INTERNATIONAL SYMPOSIUM OF INFORMATION TECHNOLOGY 2008, VOLS 1-4, PROCEEDINGS, P2500
   Hesse TM, 2013, 2013 3RD INTERNATIONAL WORKSHOP ON THE TWIN PEAKS OF REQUIREMENTS AND ARCHITECTURE (TWINPEAKS), P22, DOI 10.1109/TwinPeaks-2.2013.6617355
   Hofmeister C, 2007, J SYST SOFTWARE, V80, P106, DOI 10.1016/j.jss.2006.05.024
   Host M., 2000, Empirical Software Engineering, V5, P201, DOI 10.1023/A:1026586415054
   International Organization for Standardization, 2011, ISO/IEC/IEEE 42010:2011 Systems and Software Engineering-Architecture Description
   Jansen A., 2008, THESIS
   Kazman R., 2000, TECHNICAL REPORT
   KNAPP TR, 1990, NURS RES, V39, P121
   Kontio J, 2004, 2004 INTERNATIONAL SYMPOSIUM ON EMPIRICAL SOFTWARE ENGINEERING, PROCEEDINGS, P271
   Kruchten P, 2006, LECT NOTES COMPUT SC, V4214, P43
   Kubickova M., 2011, ARE STUDENTS REAL PE
   Lago P, 2004, LECT NOTES COMPUT SC, V3154, P214
   Lewis GA., 2004, TECHNICAL REPORT
   Li ZY, 2013, INFORM SOFTWARE TECH, V55, P777, DOI 10.1016/j.infsof.2012.11.005
   Nam WH, 2008, FORM METHOD SYST DES, V32, P207, DOI 10.1007/s10703-008-0055-8
   Page V, 2007, BT TECHNOL J, V25, P118, DOI 10.1007/s10550-007-0014-8
   Roeller R, 2006, J SYST SOFTWARE, V79, P552, DOI 10.1016/j.jss.2005.10.017
   Rost Dominik, 2013, Software Architecture. 7th European Conference, ECSA 2013. Proceedings: LNCS 7584, P72, DOI 10.1007/978-3-642-39031-9_7
   Runeson P, 2009, EMPIR SOFTW ENG, V14, P131, DOI 10.1007/s10664-008-9102-8
   Savolainen J, 2001, FIFTH IEEE INTERNATIONAL SYMPOSIUM ON REQUIREMENTS ENGINEERING, PROCEEDINGS, P40
   Seater R, 2007, REQUIR ENG, V12, P77, DOI 10.1007/s00766-007-0048-y
   Shull F, 2008, GUIDE ADV EMPIRICAL
   Sjoberg DIK, 2005, IEEE T SOFTWARE ENG, V31, P733, DOI 10.1109/TSE.2005.97
   Barreto AOS, 2010, QUATIC 2010: SEVENTH INTERNATIONAL CONFERENCE ON THE QUALITY OF INFORMATION AND COMMUNICATIONS TECHNOLOGY, P441, DOI 10.1109/QUATIC.2010.79
   Sommerville I, 2005, IEEE SOFTWARE, V22, P16, DOI 10.1109/MS.2005.13
   Tang A, 2007, J SYST SOFTWARE, V80, P918, DOI 10.1016/j.jss.2006.08.040
   Tang A, 2010, J SYST SOFTWARE, V83, P352, DOI 10.1016/j.jss.2009.08.032
   Tofan Dan, 2013, Software Architecture. 7th European Conference, ECSA 2013. Proceedings: LNCS 7584, P192, DOI 10.1007/978-3-642-39031-9_17
   Tofan D, 2016, INFORM SOFTWARE TECH, V72, P31, DOI 10.1016/j.infsof.2015.12.002
   Turk D, 2005, J DATABASE MANAGE, V16, P62, DOI 10.4018/jdm.2005100104
   van Heesch U, 2013, J SYST SOFTWARE, V86, P1545, DOI 10.1016/j.jss.2013.01.057
   van Heesch U, 2010, LECT NOTES COMPUT SC, V6285, P24, DOI 10.1007/978-3-642-15114-9_5
   Van Landuyt D., 2012, 2012 Joint Working IEEE/IFIP Conference on Software Architecture (WICSA 2012) & European Conference on Software Architecture (ECSA 2012), P329, DOI 10.1109/WICSA-ECSA.212.55
   Van Landuyt D, 2014, LECT NOTES COMPUT SC, V8411, P170
   Van Landuyt D, 2015, 2015 IEEE/ACM 5TH INTERNATIONAL WORKSHOP ON THE TWIN PEAKS OF REQUIREMENTS AND ARCHITECTURE (TWINPEAKS), P9, DOI 10.1109/TwinPeaks.2015.10
   Yang C., IND EVALUATION ARCHI
   Yang C, 2017, LECT NOTES COMPUT SC, V10475, P191, DOI 10.1007/978-3-319-65831-5_14
   Yang C, 2017, J SYST SOFTWARE, V134, P190, DOI 10.1016/j.jss.2017.09.007
   Yang C, 2016, J SYST SOFTWARE, V111, P157, DOI 10.1016/j.jss.2015.09.028
   Yang C, 2016, J SYST SOFTWARE, V113, P362, DOI 10.1016/j.jss.2015.12.016
   Yin R.K., 2011, Qualitative research from start to finish
   Ziv H., 1997, TECHNICAL REPORT
NR 57
TC 4
Z9 4
U1 0
U2 13
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 15
PY 2018
VL 168
BP 38
EP 70
DI 10.1016/j.scico.2018.08.002
PG 33
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA HA6JG
UT WOS:000450385200003
OA Green Published, Bronze
DA 2024-07-18
ER

PT J
AU Bonchi, F
   Brogi, A
   Canciani, A
   Soldani, J
AF Bonchi, Filippo
   Brogi, Antonio
   Canciani, Andrea
   Soldani, Jacopo
TI Simulation-based matching of cloud applications
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Service matching; TOSCA; Reuse; Simulation; Coinduction
ID NET-BASED APPROACH; SERVICES; MANAGEMENT
AB OASIS TOSCA aims at solving the problem of managing complex applications across heterogeneous clouds by providing a standard, vendor-agnostic language to describe them. TOSCA permits defining a cloud application as an orchestration of typed components, which can be instantiated by matching other TOSCA applications.
   In this paper we first present two types of behaviour-aware matching of applications (exact and plug-in) both based on a notion of simulation. We then extend the notion of plug-in matching by relaxing the notion of simulation to permit matching an operation with a sequence of operations. We also present a coinductive procedure to compute such relaxed simulation, and we formally prove the termination, soundness, and completeness of such procedure. (C) 2017 Elsevier B.V. All rights reserved.
C1 [Brogi, Antonio; Canciani, Andrea; Soldani, Jacopo] Univ Pisa, Dept Comp Sci, Pisa, Italy.
   [Bonchi, Filippo] Univ Lyon, UCB Lyon 1, CNRS, ENS Lyon,LIP, Lyon, France.
C3 University of Pisa; Universite Claude Bernard Lyon 1; Centre National de
   la Recherche Scientifique (CNRS); Ecole Normale Superieure de Lyon (ENS
   de LYON)
RP Soldani, J (corresponding author), Univ Pisa, Dept Comp Sci, Pisa, Italy.
EM filippo.bonchi@ens-lyon.fr; brogi@di.unipi.it; canciani@di.unipi.it;
   soldani@di.unipi.it
RI Soldani, Jacopo/O-5057-2019; Bonchi, Filippo/E-7955-2018; Brogi,
   Antonio/HLQ-2040-2023
OI Soldani, Jacopo/0000-0002-2435-3543; Bonchi,
   Filippo/0000-0002-3433-723X; Brogi, Antonio/0000-0003-2048-2468
FU Univ. of Pisa [PRA_2016_64]; LABEX MILYON of Univ. of Lyon, within the
   program Investissements d'Avenir [ANR-10-LABX-0070, ANR-11-IDEX-0007]
FX Work partly supported by the project Through the fog (PRA_2016_64)
   funded by the Univ. of Pisa, and by LABEX MILYON (ANR-10-LABX-0070) of
   Univ. of Lyon, within the program Investissements d'Avenir
   (ANR-11-IDEX-0007) operated by the French National Research Agency
   (ANR).
CR Aceto Luca, 1992, ACTION REFINEMENT PR, V3
   Armbrust M, 2010, COMMUN ACM, V53, P50, DOI 10.1145/1721654.1721672
   Bennaceur A, 2015, IEEE T SOFTWARE ENG, V41, P221, DOI 10.1109/TSE.2014.2364844
   Binz T, 2013, LECT NOTES COMPUT SC, V8274, P692, DOI 10.1007/978-3-642-45005-1_62
   Bonchi F, 2016, 2016 10TH INTERNATIONAL SYMPOSIUM ON THEORETICAL ASPECTS OF SOFTWARE ENGINEERING (TASE), P117, DOI 10.1109/TASE.2016.32
   Bonchi F, 2009, FUND INFORM, V94, P305, DOI 10.3233/FI-2009-133
   Brogi A, 2017, MODELSWARD: PROCEEDINGS OF THE 5TH INTERNATIONAL CONFERENCE ON MODEL-DRIVEN ENGINEERING AND SOFTWARE DEVELOPMENT, P667, DOI 10.5220/0006244006670678
   Brogi A, 2016, LECT NOTES COMPUT SC, V9930, P28, DOI 10.1007/978-3-662-53401-4_2
   Brogi A, 2016, LECT NOTES COMPUT SC, V9846, P219, DOI 10.1007/978-3-319-44482-6_14
   Brogi A, 2016, SCI COMPUT PROGRAM, V115, P177, DOI 10.1016/j.scico.2015.09.004
   Brogi A, 2015, LECT NOTES COMPUT SC, V9306, P19, DOI 10.1007/978-3-319-24072-5_2
   Brogi A, 2014, LECT NOTES COMPUT SC, V8745, P171, DOI 10.1007/978-3-662-44879-3_13
   BROWNE MC, 1988, THEOR COMPUT SCI, V59, P115, DOI 10.1016/0304-3975(88)90098-9
   Cavallaro L, 2009, LECT NOTES COMPUT SC, V5900, P159, DOI 10.1007/978-3-642-10383-4_11
   Davide Sangiorgi, 2011, INTRO BISIMULATION C
   Eshuis R, 2007, ECOWS 07: PROCEEDING OF THE 5TH IEEE EUROPEAN CONFERENCE ON WEB SERVICES, P171, DOI 10.1109/ECOWS.2007.22
   Gorrieri Roberto, 2001, HDB PROCESS ALGEBRA, P1047
   Inverardi P, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P3, DOI 10.1109/ICSE.2013.6606546
   Jacobs B., 1997, B EUR ASS THEOR COMP, V62, P62
   Klusch M, 2009, J WEB SEMANT, V7, P121, DOI 10.1016/j.websem.2008.10.001
   Martins MA, 2014, LOG METH COMPUT SCI, V10, DOI 10.2168/LMCS-10(1:1)2014
   Martins MA, 2009, SEFM 2009: SEVENTH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING AND FORMAL METHODS, P250, DOI 10.1109/SEFM.2009.35
   Motahari Nezhad H.R., 2010, Protocol-aware matching of web service interfaces for adapter development, P731
   OASIS, 2013, Topology and Orchestration Specification for Cloud Applications Version 1.0 OASIS Standard
   Reussner RH, 2004, NET OBJECTDAYS, P155
   Soldani J., 2014, P 4 INT C CLOUD COMP, P758, DOI [10.5220/0004979507580763, DOI 10.5220/0004979507580763]
   Soldani J, 2016, J SYST SOFTWARE, V113, P395, DOI 10.1016/j.jss.2015.12.025
   van Glabbeek R, 2001, ACTA INFORM, V37, P229, DOI 10.1007/s002360000041
   VanGlabbeek RJ, 1996, J ACM, V43, P555, DOI 10.1145/233551.233556
NR 29
TC 7
Z9 7
U1 0
U2 6
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 15
PY 2018
VL 162
SI SI
BP 110
EP 131
DI 10.1016/j.scico.2017.06.001
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GJ1UM
UT WOS:000435053400007
OA Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Behjati, R
   Nejati, S
AF Behjati, Razieh
   Nejati, Shiva
TI Architecture-level configuration of industrial control systems:
   Foundations for an efficient approach
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Model-based configuration; CSP; Backtracking; UML/OCL
ID ALGORITHMS
AB Configuration is a recurring problem in many domains. In an earlier work, we focused on architecture-level configuration of large-scale embedded software systems, in particular industrial control systems, and proposed a methodology that enables engineers to configure products by instantiating a given reference architecture model. Products have to satisfy a number of constraints specified in the reference architecture model. If not, the engineers have to backtrack their configuration decisions to rebuild a configured product that satisfies the constraints. Backtracking configuration decisions makes the configuration process considerably slow. In this paper, we improve our earlier work and propose a backtrack-free configuration mechanism. Specifically, we propose an algorithm that computes an ordering over configuration parameters that, for any cycle-free reference architecture model, yields a consistent configuration without any need to backtrack. We provide formal specification and proofs of termination, correctness, and completeness of our algorithm. We demonstrate the effectiveness of our approach using a simplified industrial case study. Results of our experiments show that our ordering approach eliminates backtracking in practice. It reduces the overall configuration time by reducing both the required number of value assignments, and the time that it takes to complete one configuration iteration. Moreover, we show that the latter has a linear growth with the size of the configuration problem. (C) 2017 Elsevier B.V. All rights reserved.
C1 [Behjati, Razieh] Simula Res Lab, Fornebu, Norway.
   [Nejati, Shiva] Univ Luxembourg, SnT Ctr, Luxembourg, Luxembourg.
C3 University of Luxembourg
RP Behjati, R (corresponding author), Simula Res Lab, Fornebu, Norway.
EM behjati@simula.no
RI Nejati, Shiva/KBT-7650-2024
OI Nejati, Shiva/0000-0002-0281-8231; Behjati, Razieh/0000-0003-3302-2751
FU Research Council of Norway through the ModelFusion Project [NFR 205606];
   EvolvelT project [221751/F20]; Certus SFI project [203461/030]; National
   Research Fund - Luxembourg (Verification and Validation Laboratory)
   [FNR/P10/03]
FX This work is supported by the Research Council of Norway through the
   ModelFusion Project (NFR 205606), the EvolvelT project (221751/F20) and
   the Certus SFI project (203461/030). The second author is funded by the
   National Research Fund - Luxembourg (FNR/P10/03 - Verification and
   Validation Laboratory).
CR [Anonymous], 1968, First-Order Logic
   Armstrong A. A., 1997, AAAI IAAI
   Bayardo R. J., 1996, AAAI
   Behjati R, 2014, ACM T SOFTW ENG METH, V23, DOI 10.1145/2581376
   Behjati R, 2013, INFORM SOFTWARE TECH, V55, P607, DOI 10.1016/j.infsof.2012.09.006
   Behjati Razieh, 2012, MODELS 12
   Behjati Razieh, 2015, FSEN
   Benavides D., 2007, VAMOS
   Benavides D, 2010, INFORM SYST, V35, P615, DOI 10.1016/j.is.2010.01.001
   BRYANT RE, 1986, IEEE T COMPUT, V35, P677, DOI 10.1109/TC.1986.1676819
   Carlsson M., 2010, CoRR
   Carlsson M., 1997, PLILP
   Czarnecki K., 2005, WORKSH SOFTW FACT OO
   Dechter R, 2002, ARTIF INTELL, V136, P147, DOI 10.1016/S0004-3702(02)00120-0
   DECHTER R., 1992, ENCY ARTIFICIAL INTE
   Eames BK, 2010, DES AUTOM EMBED SYST, V14, P43, DOI 10.1007/s10617-009-9049-z
   Fonseca CM, 1995, EVOL COMPUT, V3, P1, DOI 10.1162/evco.1995.3.1.1
   FREUDER EC, 1982, J ACM, V29, P24, DOI 10.1145/322290.322292
   Glover F., 1993, Annals of Operations Research, V41, P3
   Hadzic T., 2004, PETO
   Hentenryck P. V., 1995, SELECTED PAPERS CONS
   Horváth A, 2012, SOFTW SYST MODEL, V11, P385, DOI 10.1007/s10270-010-0185-5
   Janota M., 2010, SOFSEM
   KIRKPATRICK S, 1983, SCIENCE, V220, P671, DOI 10.1126/science.220.4598.671
   Krueger Charles W., 2013, SPLC 13
   Mazo R., 2011, ENASE
   OMG, 2012, OMG Object Constraint Language (OCL), Version 2.3.1
   Pohl K., 2005, SOFTWARE PRODUCT LIN, V10
   Rossi F, 2006, FOUND ARTIF INTELL, P1
   Sayyad Abdel Salam, 2013, ASE 13
   United Nations Educational Scientific and Cultural Organization (UNESCO), 2018, INT TECHN GUID SEX E
   van der Linden F. J., 2007, Software Product Lines in Action: the Best Industrial Practice in Product Line Engineering
   van der Meer E. R, 2006, SAC
   Xiong Y., 2012, ICSE 12
NR 34
TC 0
Z9 0
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD AUG 1
PY 2018
VL 160
SI SI
BP 30
EP 47
DI 10.1016/j.scico.2017.10.001
PG 18
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GG2HS
UT WOS:000432511400003
OA Bronze
DA 2024-07-18
ER

PT J
AU Cabac, L
   Haustermann, M
   Mosteller, D
AF Cabac, Lawrence
   Haustermann, Michael
   Mosteller, David
TI Software development with Petri nets and agents: Approach, frameworks
   and tool set
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE High-level Petri nets; Reference Nets; Integrated Development
   Environment (IDE); Modeling; Multi-agent systems
AB Software development-especially of distributed and concurrent systems-requires sophisticated frameworks and tool support for the individual and collaborative development. We present an approach for the development of such systems, which applies concepts, technologies and techniques from agent and Petri net theory as well as from software engineering. The approach is backed by a set of elaborated frameworks and a powerful tool set.
   The Petri Net-based Agent-Oriented Software Engineering approach (PAOSE) follows the multi-agent paradigm and applies Petri net formalisms as implementation languages. PAOSE is a comprehensive approach that provides techniques, tools, methods, principles and defined processes. PAOSE depends on MULAN (Multi-Agent Nets), which is a conceptual framework for a multi-agent platform based on Petri net models. MULAN is modeled and executed in RENEW (The Reference Net Workshop), which is an extensible modeling and execution environment for Reference Net-based systems and other modeling techniques. The whole framework landscape constitutes a Petri net IDE (Integrated Development Environment) that supports the development and execution of concurrent and distributed multi-agent systems. The Reference Net formalism includes concepts such as net instances (object-orientation), synchronous channels (communication/synchronization) and a seamless Java integration.
   In this contribution we present an overview of the frameworks and the tool sets in the context of the PAOSE approach. We focus in detail on the highlights and the IDE features of RENEW, without which the collaborative development of distributed PAOSE-based software would not be feasible. (C) 2017 Elsevier B.V. All rights reserved.
C1 [Cabac, Lawrence; Haustermann, Michael; Mosteller, David] Univ Hamburg, Fac Math Informat & Nat Sci, Dept Informat, Vogt Kolln Str 30, D-22527 Hamburg, Germany.
C3 University of Hamburg
RP Cabac, L (corresponding author), Univ Hamburg, Fac Math Informat & Nat Sci, Dept Informat, Vogt Kolln Str 30, D-22527 Hamburg, Germany.
EM cabac@informatik.uni-hamburg.de; haustermann@informatik.uni-hamburg.de;
   mosteller@informatik.uni-hamburg.de
CR Betz T., 2011, CEUR WORKSHOP P, V723, P167
   Burkhart J., 2012, CEUR WORKSHOP P, V851, P181
   Cabac L, 2005, LECT NOTES COMPUT SC, V3536, P148
   Cabac L, 2005, LECT NOTES COMPUT SC, V3382, P47
   Cabac L., 2010, AGENT TECHNOLOGY THE, V5
   Cabac L., 2009, P 7 INT WORKSH MOD S, P156
   Cabac L, 2008, LECT NOTES COMPUT SC, V5062, P399, DOI 10.1007/978-3-540-68746-7_26
   Christensen S., 1994, Application and Theory of Petri Nets 1994. 15th International Conference. Proceedings, P159
   Duvigneau M., 2003, Agent-Oriented Software Engineering III. Third International Workshop, AOSE 2002. Revised Papers and Invited Contributions (Lecture Notes in Computer Science Vol.2585), P59
   Duvigneau M., 2010, AGENT TECHNOLOGY THE, V4
   Duvigneau M., 2006, P 13 WORKSH APPL TOO, P85
   Duvigneau M., 2014, SOFTWARE ENG PETRI N, P41
   FIPA, 2002, FIPA SL CONT LANG SP
   FIPA, 2016, FDN INT PHYS AG
   Friedrich M., 2016, CEUR WORKSHOP P, V1591
   Haustermann M., 2014, THESIS U HAMBURG HAM
   Heiner M., 2012, Application and Theory of Petri Nets, Lecture Notes in Computer Science, P398
   Hewelt M., 2011, CEUR WORKSHOP P, V723, P124
   Hicken J., 2016, CEUR WORKSHOP P, V1591, P275
   Jensen K, 2009, COLOURED PETRI NETS: MODELLING AND VALIDATION OF CONCURRENT SYSTEMS, P1, DOI 10.1007/b95112
   Kummer O, 2004, LECT NOTES COMPUT SC, V3099, P484
   Kummer O., 2002, REFEENZNETZE
   KUMMER O, 2003, TOOL DEMONSTRATIONS, P99
   Kummer O., 2016, RENEW USER GUIDE REL
   Kummer O., 2016, REN REF NET WORKSH
   Moldt D., 2017, CEUR WORKSHOP P, V1846
   Mosteller D., 2016, INTEGRATING PETRI NE, P92
   Pommereau F, 2017, LECT NOTES COMPUT SC, V10258, P37, DOI 10.1007/978-3-319-57861-3_4
   Pommereau F, 2015, LECT NOTES COMPUT SC, V9115, P254, DOI 10.1007/978-3-319-19488-2_13
   ROLKE H, 2004, AGENT TECHNOLOGY THE, V2
   Valk R, 1998, LECT NOTES COMPUT SC, V1420, P1
   Vörös A, 2016, LECT NOTES COMPUT SC, V9698, P123, DOI 10.1007/978-3-319-39086-4_9
   Wester-Ebbinghaus M., 2014, MODELING ORG STRUCTU, P62
   Westergaard Michael, 2013, Application and Theory of Petri Nets and Concurrency. 34th International Conference, PETRI NETS 2013. Proceedings: LNCS 7927, P400, DOI 10.1007/978-3-642-38697-8_22
   Wincierz M., TOOL CHAIN TEST DRIV, P197
   Zambonelli F, 2003, ACM T SOFTW ENG METH, V12, P317, DOI 10.1145/958961.958963
NR 36
TC 4
Z9 4
U1 1
U2 17
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 1
PY 2018
VL 157
SI SI
BP 56
EP 70
DI 10.1016/j.scico.2017.12.003
PG 15
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GB9KE
UT WOS:000429391900005
DA 2024-07-18
ER

PT J
AU Vörös, A
   Darvas, D
   Hajdu, A
   Klenik, A
   Marussy, K
   Molnár, V
   Bartha, T
   Majzik, I
AF Voros, Andras
   Darvas, Daniel
   Hajdu, Akos
   Klenik, Attila
   Marussy, Kristof
   Molnar, Vince
   Bartha, Tamas
   Majzik, Istvan
TI Industrial applications of the PetriDotNet modelling and analysis tool
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Petri nets; Modelling; Simulation; Model checking; Stochastic analysis
ID STOCHASTIC PETRI NETS; SATURATION; CHECKING; VERIFICATION; SYSTEMS;
   MARKOV
AB Since their invention, Petri nets have provided modelling and analysis methods to support the design of correct, reliable and robust systems. This motivated our work to develop. PetriDotNet, a Petri net editor and analysis tool. In this paper we overview the supported modelling formalisms and the analysis methods included in PetriDotNet. Next, we present eight different industrial case studies, demonstrating the wide variety of scenarios where Petri nets and PetriDotNet can help the design, development and analysis of industrial systems. Our original goal with PetriDotNet was to provide an educational tool to our students, however our efforts led to a framework being able to serve both academic and industrial needs. (C) 2017 Elsevier B.V. All rights reserved.
C1 [Voros, Andras; Darvas, Daniel; Hajdu, Akos; Klenik, Attila; Marussy, Kristof; Molnar, Vince; Majzik, Istvan] Budapest Univ Technol & Econ, Dept Measurement & Informat Syst, Budapest, Hungary.
   [Voros, Andras; Hajdu, Akos; Molnar, Vince] MTA BME Lendulet Cyber Phys Syst Res Grp, Budapest, Hungary.
   [Bartha, Tamas] Hungarian Acad Sci, Inst Comp Sci & Control, Budapest, Hungary.
C3 Budapest University of Technology & Economics; Budapest University of
   Technology & Economics; Hungarian Academy of Sciences; Hungarian
   Research Network; HUN-REN Institute for Computer Science & Control
RP Vörös, A (corresponding author), Budapest Univ Technol & Econ, Dept Measurement & Informat Syst, Budapest, Hungary.
EM vori@mit.bme.hu; darvas@mit.bme.hu; hajdua@mit.bme.hu;
   klenik@mit.bme.hu; molnarv@mit.bme.hu; tamas.bartha@sztaki.mta.hu;
   majzik@mit.bme.hu
RI Voros, Andras/H-7030-2012; Marussy, Kristóf/AAE-9008-2022; Hajdu,
   Ákos/C-3742-2016; Molnár, Vince/AAV-3754-2021; Majzik,
   Istvan/G-8929-2012; Darvas, Daniel/A-7913-2015
OI Marussy, Kristóf/0000-0002-9135-8256; Molnár, Vince/0000-0002-8204-7595;
   Majzik, Istvan/0000-0002-1184-2882; Darvas, Daniel/0000-0002-4092-1694;
   Hajdu, Akos/0000-0001-8001-8865; Klenik, Attila/0000-0003-2051-2823
FU MTA-BME Lendiilet Research Group on Cyber-Physical Systems; ARTEMIS JU;
   Hungarian National Research, Development and Innovation Fund in the
   frame of the R5-COP [621447]; New National Excellence Program of the
   Ministry of Human Capacities [UNKP-16-2-I]
FX This paper is partially supported by the MTA-BME Lendiilet 2015 Research
   Group on Cyber-Physical Systems and by the ARTEMIS JU and the Hungarian
   National Research, Development and Innovation Fund in the frame of the
   R5-COP (ARTEMIS-2013-1 nr. 621447) and R3-COP projects. Supported by the
   UNKP-16-2-I, New National Excellence Program of the Ministry of Human
   Capacities.
CR Amodeo L, 2008, STUD COMPUT INTELL, V144, P211
   [Anonymous], 1995, Temporal verification of reactive systems-safety
   [Anonymous], 2002, CAV, DOI DOI 10.1007/3-540-45657-0
   [Anonymous], 1982, APPL THEORY PETRI NE, DOI [10.1007/978-3-642-68353-4_47, DOI 10.1007/978-3-642-68353-4_47]
   Bartha T., 2012, Proceedings of the 14th International Conference on Modern Information Technology in the Innovation Processes of the Industrial Enterprises (MITIP 2012). Ed. by, P472
   Bergenthum Robin, 2015, Transactions on Petri Nets and Other Models of Concurrency X (ToPNoC). LNCS 9410, P1, DOI 10.1007/978-3-662-48650-4_1
   Bicchierai I, 2013, IEEE T IND INFORM, V9, P1806, DOI 10.1109/TII.2012.2205399
   Blake J. T., 1988, Performance Evaluation Review, V16, P177, DOI 10.1145/1007771.55616
   Buchholz P, 2000, INFORMS J COMPUT, V12, P203, DOI 10.1287/ijoc.12.3.203.12634
   Buchholz P, 1999, IEEE T SOFTWARE ENG, V25, P166, DOI 10.1109/32.761443
   Cavada Roberto., 2014, The nuXmv Symbolic Model Checker
   Cayir S., 2005, P 4 INT C EL EL ENG
   Ciardo G, 2005, LECT NOTES COMPUT SC, V3725, P146
   Ciardo G, 2003, LECT NOTES COMPUT SC, V2725, P40
   Ciardo G, 2003, LECT NOTES COMPUT SC, V2619, P379
   Ciardo G., 2006, International Journal on Software Tools for Technology Transfer, V8, P4, DOI 10.1007/s10009-005-0188-7
   Ciardo G., 2001, Tools and Algorithms for the Construction and Analysis of Systems. 7th International Conference, TACAS 2001. Held as Part of the Joint European Conferences on Theory and Practice of Software, ETAPS 2001. Proceedings (Lecture Notes in Computer Science Vol.2031), P328
   Ciardo G, 2012, LECT NOTES COMPUT SC, V6900, P51
   Clarke E, 2003, J ACM, V50, P752, DOI 10.1145/876638.876643
   Clarke. E. M., 1982, LOGICS OF PROGRAMS, P52, DOI [10 . 1007 / BFb0025774, DOI 10.1007/BFB0025774]
   Clarke EM, 2008, LECT NOTES COMPUT SC, V5000, P1
   CLARKE EM, 1994, ACM T PROGR LANG SYS, V16, P1512, DOI 10.1145/186025.186051
   Clarke EM, 1997, FORM METHOD SYST DES, V10, P47, DOI 10.1023/A:1008615614281
   Cseh A., 2014, VEZETEKEK VILAGA, VXIX, P14
   Darvas D., 2013, Mesterproba 2013. Konferenciakiadvany, P48
   Darvas D, 2016, ACTA CYBERN, V22, P573, DOI 10.14232/actacyb.22.3.2016.2
   Duret-Lutz A, 2004, IEEE COMPUTER SOCIETY'S 12TH ANNUAL INTERNATIONAL SYMPOSIUM ON MODELING, ANALYSIS, AND SIMULATION OF COMPUTER AND TELECOMMUNICATIONS SYSTEMS - PROCEEDINGS, P76, DOI 10.1109/MASCOT.2004.1348184
   Duret-Lutz A, 2011, LECT NOTES COMPUT SC, V6996, P336, DOI 10.1007/978-3-642-24372-1_24
   EMERSON EA, 1986, J ACM, V33, P151, DOI 10.1145/4904.4999
   Espensen KL, 2008, LECT NOTES COMPUT SC, V5062, P152, DOI 10.1007/978-3-540-68746-7_13
   Fahland D, 2011, DATA KNOWL ENG, V70, P448, DOI 10.1016/j.datak.2011.01.004
   Gaudel Q, 2016, LECT NOTES COMPUT SC, V9698, P196, DOI 10.1007/978-3-319-39086-4_13
   Ghosh R., 2012, THESIS DUKE U
   Gottschalk F., 2008, International Journal on Software Tools for Technology Transfer, V10, P95, DOI 10.1007/s10009-007-0055-9
   Hahn Ernst Moritz, 2011, International Journal on Software Tools for Technology Transfer, V13, P3, DOI 10.1007/s10009-010-0146-x
   Hajdu A, 2014, ACTA CYBERN, V21, P401, DOI 10.14232/actacyb.21.3.2014.8
   Hajdu A, 2015, LECT NOTES COMPUT SC, V9115, P309, DOI 10.1007/978-3-319-19488-2_16
   Hamez A, 2008, LECT NOTES COMPUT SC, V5062, P211, DOI 10.1007/978-3-540-68746-7_16
   Heinemann Z. Toth, 2009, THESIS BUDAPEST U TE
   Hillah L.M., 2009, Petri Net Newsletter, V76, P9
   Holzmann GJ, 1997, DIMACS SERIES DISCRE, V32, P81
   Horváth A, 2014, ADV INTELL SYST, V282, P119, DOI 10.1007/978-3-319-06569-4_9
   ISO/IEC, 2011, 159092 ISOIEC
   Jensen K, 2009, COLOURED PETRI NETS: MODELLING AND VALIDATION OF CONCURRENT SYSTEMS, P1, DOI 10.1007/b95112
   Klenik A., 2015, CONFIGURABLE STOCHAS
   Manyari-Rivera Manuel, 2007, 16th IEEE International Conference on Control Applications. Part of IEEE Multi-conference on Systems and Control, P958
   MARSAN MA, 1990, LECT NOTES COMPUT SC, V424, P1
   Marussy K, 2016, LECT NOTES COMPUT SC, V9698, P281, DOI 10.1007/978-3-319-39086-4_17
   Marussy K, 2016, PROCEEDINGS OF THE 2016 WORKSHOP ON SYMBOLIC AND NUMERICAL METHODS FOR REACHABILITY ANALYSIS (SNR)
   Mendes J. Marco, 2010, 2010 8th IEEE International Conference on Industrial Informatics (INDIN 2010), P578, DOI 10.1109/INDIN.2010.5549677
   Milankovich Akos, 2014, 3rd International Conference on Sensor Networks (SENSORNETS 2014). Proceedings, P289
   Molnar Vince, 2015, Tools and Algorithms for the Construction and Analysis of Systems. 21st International Conference, TACAS 2015, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2015. Proceedings: LNCS 9035, P643, DOI 10.1007/978-3-662-46681-0_58
   Molnár V, 2016, FORM ASP COMPUT, V28, P345, DOI 10.1007/s00165-015-0347-x
   MURATA T, 1989, P IEEE, V77, P541, DOI 10.1109/5.24143
   Németh E, 2009, RELIAB ENG SYST SAFE, V94, P942, DOI 10.1016/j.ress.2008.10.012
   Németh E, 2009, LECT NOTES COMPUT SC, V5596, P199, DOI 10.1007/978-3-642-03240-0_17
   Neuts M. F., 1975, LIBER AMICORUM PROF, P766
   Peterson J.L., 1981, Petri Net Theory and the Modeling of Systems
   Pournelle G. H., 1953, Journal of Mammalogy, V34, P133, DOI 10.1890/0012-9658(2002)083[1421:SDEOLC]2.0.CO;2
   Rail Safety and Standards Board, 2003, GKRT0060 RAIL SAF ST
   REIBMAN A, 1989, EUR J OPER RES, V40, P257, DOI 10.1016/0377-2217(89)90335-4
   Rogge-Solti A, 2013, LECT NOTES COMPUT SC, V8274, P389, DOI 10.1007/978-3-642-45005-1_27
   Saad Yousef., 2003, Iterative Methods for Sparse Linear Systems
   Sebastiani R, 2005, LECT NOTES COMPUT SC, V3576, P350
   Sleijpen GLG, 2010, SIAM J SCI COMPUT, V32, P2687, DOI 10.1137/090752341
   Somenzi F, 2002, LECT NOTES COMPUT SC, V2517, P88
   Stahl C, 2005, ACSD2005: Fifth International Conference on Application of Concurrency to System Design, Proceedings, P234, DOI 10.1109/ACSD.2005.20
   Szpyrka Marcin., 2014, Concurrency, Specification and Programming, CEUR Workshop Proceedings, V1269, P245
   Talcott C., 2005, 3 INT WORKSH COMP ME, V3, P228
   Teruel E, 2003, IEEE T SOFTWARE ENG, V29, P962, DOI 10.1109/TSE.2003.1245298
   Vanit-Anunchai Somsak, 2008, International Journal on Software Tools for Technology Transfer, V10, P29, DOI 10.1007/s10009-007-0050-1
   Vardi MY, 1995, LECT NOTES COMPUTER, P238, DOI DOI 10.1007/3-540-60915-6
   Vörös A, 2016, LECT NOTES COMPUT SC, V9698, P123, DOI 10.1007/978-3-319-39086-4_9
   Vörös A, 2013, P EST ACAD SCI, V62, P59, DOI 10.3176/proc.2013.1.07
   Voros A., 2014, Periodica Polytechnica, Electrical Engineering and Computer Science, V58, P3, DOI DOI 10.3311/PPEE.2080
   Wan JX, 2013, CHINESE J AERONAUT, V26, P363, DOI 10.1016/j.cja.2013.02.014
   Wang C, 2006, FORM METHOD SYST DES, V28, P5, DOI 10.1007/s10703-006-4617-3
   Wimmel H, 2011, LECT NOTES COMPUT SC, V6605, P224, DOI 10.1007/978-3-642-19835-9_19
   Yu Andy, 2009, International Journal on Software Tools for Technology Transfer, V11, P117, DOI 10.1007/s10009-009-0099-0
   Zhang XL, 2011, INT J PROD RES, V49, P3939, DOI 10.1080/00207543.2010.492800
   Zhao Y, 2009, LECT NOTES COMPUT SC, V5799, P368, DOI 10.1007/978-3-642-04761-9_27
   ZURAWSKI R, 1994, IEEE T IND ELECTRON, V41, P567, DOI 10.1109/41.334574
NR 82
TC 4
Z9 5
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 1
PY 2018
VL 157
SI SI
BP 17
EP 40
DI 10.1016/j.scico.2017.09.003
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GB9KE
UT WOS:000429391900003
OA Green Accepted
DA 2024-07-18
ER

PT J
AU Haoues, M
   Sellami, A
   Ben-Abdallah, H
AF Haoues, Mariem
   Sellami, Asma
   Ben-Abdallah, Hanene
TI Functional change impact analysis in use cases: An approach based on
   COSMIC functional size measurement
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Functional change; Impact analysis; Requirements change; COSMIC;
   Functional size measurement; Use case description
AB Context: Because functional changes are inevitable throughout the software life-cycle, it is essential to assess and evaluate whether a Functional Change (FC) can be handled within the estimated project budget and time. Thus, a well-defined change measure and control process is vital for the success of the development project. In fact, the size measurement is widely used for effort and cost estimation. This paper explores the COSMIC Functional Size Measurement (FSM) method to evaluate a FC.
   Objective: The objective of this paper is to assess a FC in terms of COSMIC Function Point units in order to identify changes incurring potential impact on the software development progress. Thus, we suppose that the functional size of a FC is one of the factors that must be taken into consideration to analyze the impact of changes on the development progress. This helps managers in making decisions to answer a FC request.
   Method: The method proposed in this paper analyzes the FC impact in use case diagrams, the de-facto standard for modeling the Functional User Requirements (FUR). It distinguishes between internal and external FC to a use case. It proposes to quantify the FC impact on the functional size of a use case diagram in terms of COSMIC Function Point (CFP) units. In addition, it evaluates the status of a FC according to its functional size. Furthermore, we propose an algorithm for prioritizing changes in the case where more than one functional change is proposed. The algorithm is based on a set of heuristics where the objective is to minimize the effort required to answer the changes. It accounts for the most important factors when prioritizing changes (the functional size of the FC, and the preference of the change requester). These two factors are identified based on an investigation with the international COSMIC community.
   Originality: Several techniques have been used to identify and analyze the impact of a FC during various phases of the software life-cycle. For example, some researches used the colored commit graphs (at the implementation phase), other studies used the consistency rules between UML diagrams (at the design phase), etc. Compared to other approaches focused on impact change analysis, our proposed approach uses the COSMIC-FSM method. Quantifying the functional size of a FC in terms of CFP units allows us to evaluate more realistically the impact of a FC on the software development progress.
   Results: We propose six categories of FC status according to their sizes. Based on the FC status, it is possible to identify the FC impact on the software development progress. The FC status will help not only designers/developers in analyzing the impact of FC on the size of their work products but also managers to decide to accept or forgo a FC and maintain the development schedule. Moreover, the experiment conducted with 30 computer engineering students showed that students' ratings can be approximately evaluated when measuring FUR in terms of CFP units based on the FC status.
   Conclusion: Based on the finding of this study, it is now feasible to identify FC leading to potential impact on the software development progress. More specifically, evaluating FC in the use case diagrams will help in making quick decisions about accepting or rejecting a FC. Regardless of the used software life-cycle process, use cases are popular for specifying the software functionality. In practice, our proposed approach is applicable not only in the software development industry but also in academia. (C) 2016 Elsevier B.V. All rights reserved.
C1 [Haoues, Mariem; Sellami, Asma] Univ Sfax, Mir Cl Lab, Sfax, Tunisia.
   [Ben-Abdallah, Hanene] King Abdulaziz Univ, Jeddah, Saudi Arabia.
C3 Universite de Sfax; King Abdulaziz University
RP Haoues, M (corresponding author), Univ Sfax, Mir Cl Lab, Sfax, Tunisia.
EM mariem_haoues@yahoo.fr; asma.sellami@isimsf.rnu.tn;
   hbenabdallah@kau.edu.sa
RI Sellami, Asma/ITU-5279-2023; Haoues, Mariem/GZK-9841-2022; Ben-Abdallah,
   Hanene/L-1239-2014
OI Ben-Abdallah, Hanene/0000-0001-9215-4661
CR [Anonymous], 2015, C REGISTRATION SYSTE
   [Anonymous], 2015, COSMIC FUNCTIONAL SI
   [Anonymous], 2008, C REGISTRATION SYSTE
   Bano Muneera, 2012, 16th International Conference on Evaluation & Assessment in Software Engineering (EASE 2012), P22, DOI 10.1049/ic.2012.0003
   Briand L.C., ICSM 02, P252
   Dekkers T., 2004, 1 SOFTW MEAS EUR FOR, P63
   Ebert C, 2014, IEEE SOFTWARE, V31, P24, DOI 10.1109/MS.2014.138
   Gomaa H, 2011, SOFTWARE MODELING AND DESIGN: UML, USE CASES, PATTERNS, AND SOFTWARE ARCHITECTURES, P1, DOI 10.1017/CBO9780511779183
   Haoues M., 2016, AICCSA IN PRESS
   Haoues M., 2016, IADIS AC IN PRESS
   Haoues M, 2015, LECT NOTES BUS INF P, V230, P78, DOI 10.1007/978-3-319-24285-9_6
   Ibrahim N., 2009, APSEC 09 WORKSH PEN, P61
   *ISO IEC, 2007, 141431 ISOIEC
   Koppenberg T., 2004, SOFTW MEAS C IWSM ME
   Lim SL, 2011, RELATING SOFTWARE REQUIREMENTS AND ARCHITECTURES, P17, DOI 10.1007/978-3-642-21001-3_3
   Misbhauddin M, 2015, SOFTW SYST MODEL, V14, P813, DOI 10.1007/s10270-013-0333-9
   Object Management Group, 2015, UN MOD LANG V 2 5
   Sellami A., 2016, CASE STUDY SIZING NA
   Sellami A, 2009, 2009 FOURTH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING ADVANCES (ICSEA 2009), P282, DOI 10.1109/ICSEA.2009.96
   Wohlin C., 2000, EXPT SOFTWARE ENG IN
   Yue T., 2010, THESIS
NR 21
TC 5
Z9 5
U1 0
U2 7
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 15
PY 2017
VL 135
SI SI
BP 88
EP 104
DI 10.1016/j.scico.2016.09.005
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA EJ5OM
UT WOS:000393267600006
OA hybrid
DA 2024-07-18
ER

PT J
AU Stuikys, V
   Burbaite, R
   Bespalova, K
   Ziberkas, G
AF Stuikys, Vytautas
   Burbaite, Renata
   Bespalova, Kristina
   Ziberkas, Giedrius
TI Model-driven processes and tools to design robot-based generative
   learning objects for computer science education
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Feature models; Model transformation; Generative learning objects
   (GLOs); GLO design tool; Educational robots
ID CONTEXT; REUSE
AB In this paper, we introduce a methodology to design robot-oriented generative learning objects (GLOs) that are, in fact, heterogeneous meta-programs to teach computer science (CS) topics such as programming. The methodology includes CS learning variability modelling using the feature-based approaches borrowed from the SW engineering domain. Firstly, we define the CS learning domain using the known educational framework TPACK (Technology, Pedagogy And Content Knowledge). By learning variability we mean the attributes of the framework extracted and represented as feature models with multiple values. Therefore, the CS learning variability represents the problem domain. Meta programming is considered as a solution domain. Both are represented by feature models. The GLO design task is formulated as mapping the problem domain model on the solution domain model. Next, we present the design framework to design GLOs manually or semi-automatically. The multi-level separation of concepts, model representation and transformation forms the conceptual background. Its theoretical background includes: (a) a formal definition of feature-based models; (b) a graph-based and set-based definition of meta-programming concepts; (c) transformation rules to support the model mapping; (d) a computational Abstract State Machine model to define the processes and design tool for developing GLOs. We present the architecture and some characteristics of the tool. The tool enables to improve the GLO design process significantly (in terms of time and quality) and to achieve a higher quality and functionality of GLOs themselves (in terms of the parameter space enlargement for reuse and adaptation). We demonstrate the appropriateness of the methodology in the real teaching setting. In this paper, we present the case study that analyses three robot-oriented GLOs as the higher-level specifications. Then, using the meta-language processor, we are able to produce, from the specifications, the concrete robot control programs on demand automatically and to demonstrate teaching algorithms visually by robot's actions. We evaluate the approach from technological and pedagogical perspectives using the known structural metrics. Also, we indicate the merits and demerits of the approach. The main contribution and originality of the paper is the seamless integration of two known technologies (feature modelling and meta-programming) in designing robot-oriented GLOs and their supporting tools. (C) 2016 Elsevier B.V. All rights reserved.
C1 [Stuikys, Vytautas; Burbaite, Renata; Bespalova, Kristina; Ziberkas, Giedrius] Kaunas Univ Technol, Fac Informat, Studentu 50, LT-51368 Kaunas, Lithuania.
C3 Kaunas University of Technology
RP Stuikys, V (corresponding author), Kaunas Univ Technol, Fac Informat, Studentu 50, LT-51368 Kaunas, Lithuania.
EM vytautas.stuikys@ktu.lt; renata.burbaite@ktu.lt;
   kristina.bespalova@ktu.lt; giedrius.ziberkas@ktu.lt
CR Acher M, 2013, SCI COMPUT PROGRAM, V78, P657, DOI 10.1016/j.scico.2012.12.004
   Adamchik V, 2003, ITCC 2003: INTERNATIONAL CONFERENCE ON INFORMATION TECHNOLOGY: COMPUTERS AND COMMUNICATIONS, PROCEEDINGS, P96, DOI 10.1109/ITCC.2003.1197507
   Alharbi A., 2012, Creative Education, V3, P773
   Allen CA, 2010, J OBJECT TECHNOL, V9, P51, DOI 10.5381/jot.2010.9.6.a3
   Anderson N., 2013, P 44 ACM ED, P495, DOI [DOI 10.1145/2445196.2445344, https://doi.org/10.1145/2445196.2445344]
   [Anonymous], TEACHING PROGRAMMING
   [Anonymous], 20 ANN PSYCH PROGR I
   [Anonymous], WCCE
   [Anonymous], P 2006 ASCUE C
   [Anonymous], ICALT
   [Anonymous], INT J ED DEV USING I
   [Anonymous], P SECIII 2002
   [Anonymous], 2004, COMFORT ZONE P 21 AS
   [Anonymous], 1997, Software engineering with reusable components
   [Anonymous], INF TECHNOL
   [Anonymous], DOMAIN ENG METHODOLO
   [Anonymous], 1990, DTIC DOCUMENT
   [Anonymous], 1 INT WORKSH OP TECH
   [Anonymous], P 19 ANN INT INF MAN
   [Anonymous], J ED TECHNOL SOC
   [Anonymous], FLAIRS C
   [Anonymous], ONLINE ED USING LEAR
   [Anonymous], COMPUTING
   [Anonymous], MODEL DRIVEN INSTRUC
   [Anonymous], J DIGIT INF
   [Anonymous], 2015, SMART LEARNING OBJEC
   [Anonymous], GENERATIVE LEARNING
   [Anonymous], 40 FRONT ED C P FRON
   [Anonymous], 2008, ED NEXT
   [Anonymous], FRONT ED C 36 ANN
   [Anonymous], J E LEARN LEARN OBJ
   [Anonymous], P 2007 INT C COMP SY
   [Anonymous], P ASC
   [Anonymous], WORLD C ED MULT HYP
   [Anonymous], WORLD C ED MULT HYP
   [Anonymous], 2009, P IADIS INT C COGN E
   [Anonymous], P COD OP C METH MAT
   [Anonymous], C LACLO
   [Anonymous], 2000, Generative programming: methods, tools, and applications
   [Anonymous], 2002, ASCILITE
   [Anonymous], J STEM ED
   Antonis K, 2011, IEEE T EDUC, V54, P374, DOI 10.1109/TE.2010.2060263
   Apel S, 2009, J OBJECT TECHNOL, V8, P49, DOI 10.5381/jot.2009.8.5.c5
   Ayala G, 2008, FIFTH IEEE INTERNATIONAL CONFERENCE ON WIRELESS, MOBILE AND UBIQUITOUS TECHNOLOGIES IN EDUCATION, PROCEEDINGS, P153, DOI 10.1109/WMUTE.2008.15
   Bagheri E, 2011, SOFTWARE QUAL J, V19, P579, DOI 10.1007/s11219-010-9127-2
   Barker BS, 2007, J RES TECHNOL EDUC, V39, P229, DOI 10.1080/15391523.2007.10782481
   Batory D, 2006, IBM SYST J, V45, P527, DOI 10.1147/sj.453.0527
   Batory Don., 2005, FEATURE MODELS GRAMM
   Beer RD, 1999, COMMUN ACM, V42, P85, DOI 10.1145/303849.303866
   Börger E, 1999, LECT NOTES COMPUT SC, V1641, P1
   Bosch J., 2000, Design and Use of Software Architectures: Adopting and Evolving a Product-Line Approach
   Botturi L., 2006, 6th IEEE International, P1216
   Boyle T, 2004, ITRE 2004: 2nd International Conference Information Technology: Research and Education, Proceedings, P74, DOI 10.1109/ITRE.2004.1393649
   Boyle T, 2012, COMPUT EDUC, V59, P1224, DOI 10.1016/j.compedu.2012.06.007
   Burbaite R, 2013, INT CONF SYST SCI EN, P211, DOI 10.1109/ICSSE.2013.6614661
   Burbaite R, 2014, 2014 INTERNATIONAL SYMPOSIUM ON COMPUTERS IN EDUCATION (SIIE), P139, DOI 10.1109/SIIE.2014.7017719
   Burbaite R, 2014, INT J ENG EDUC, V30, P929
   Capilla R., 2013, SYSTEMS SOFTWARE VAR
   Castillo JF, 2009, CONF SOFTW ENG EDUC, P101, DOI 10.1109/CSEET.2009.21
   Castledine Alanah-Rei, 2011, Design and Technology Education (An International Journal), V16, P19
   Collet Philippe, 2013, Proceedings of the 2013 3rd International Workshop on Comparing Requirements Modeling Approaches (CMA@RE), P13, DOI 10.1109/CMA-RE.2013.6664179
   Coplien J, 1998, IEEE SOFTWARE, V15, P37, DOI 10.1109/52.730836
   Corney M., 2010, Proceedings of the Twelfth Australasian Conference on Computing Education, P63
   Czarnecki K, 2006, IBM SYST J, V45, P621, DOI 10.1147/sj.453.0621
   Damasevicius R, 2009, ICALT: 2009 IEEE INTERNATIONAL CONFERENCE ON ADVANCED LEARNING TECHNOLOGIES, P572, DOI 10.1109/ICALT.2009.30
   Diez David, 2012, Journal of Research and Practice in Information Technology, V44, P331
   Dillon E., 2012, J COMPUTER SCI COLL, V27, P69
   GAJSKI DD, 1983, COMPUTER, V16, P11
   Goldberg D.S., 2012, ITiCSE' 12, P351, DOI DOI 10.1145/2325296.2325377
   Gomes A., 2007, Proceedings of the 2007 international conference on Computer systems and technologiesp, P88
   Gulatee Y., 2011, Innovations in Teaching and Learning in Information and Computer Sciences, V10, P51, DOI [10.11120/ital.2011, DOI 10.11120/ITAL.2011]
   Gunawardena A., 2003, SIGCSE Bulletin, V35, DOI 10.1145/961290.961627
   Hadjerrouit S, 2009, INFORM EDUC, V8, P227
   Halstead M. H., 1977, ELEMENTS SOFTWARE SC
   Harsu Maarit., 2002, SURVEY DOMAIN ENG
   Hazzan O, 2011, GUIDE TO TEACHING COMPUTER SCIENCE: AN ACTIVITY-BASED APPROACH, P1, DOI 10.1007/978-0-85729-443-2
   Houser C, 2002, INTERNATIONAL CONFERENCE ON COMPUTERS IN EDUCATION, VOLS I AND II, PROCEEDINGS, P1149, DOI 10.1109/CIE.2002.1186176
   Jiau HC, 2009, IEEE T EDUC, V52, P555, DOI 10.1109/TE.2008.2010983
   Kim S, 2011, SENSORS-BASEL, V11, P7835, DOI 10.3390/s110807835
   Knobelsdorf M, 2008, ITICSE '08: PROCEEDINGS OF THE 13TH ANNUAL CONFERENCE ON INNOVATION AND TECHNOLOGY IN COMPUTER SCIENCE EDUCATION, P286
   Koehler Matthew J., 2009, Contemporary Issues in Technology and Teacher Education, V9, P60
   Koohang A., 2007, LEARNING OBJECTS INS
   Lau WWF, 2011, COMPUT EDUC, V57, P1202, DOI 10.1016/j.compedu.2011.01.002
   Law KMY, 2010, COMPUT EDUC, V55, P218, DOI 10.1016/j.compedu.2010.01.007
   Lee MC, 2005, 5th IEEE International Conference on Advanced Learning Technologies, Proceedings, P538
   Li-Der Chou, 2011, 2011 11th IEEE International Conference on Advanced Learning Technologies (ICALT 2011), P202, DOI 10.1109/ICALT.2011.65
   Dodero JM, 2007, J INTERACT MEDIA EDU
   Matthews R., 2012, P 10 INT C ADV MOB C, P293, DOI DOI 10.1145/2428955.2429013
   Mauch Elizabeth., 2001, CLEARING HOUSE, V74, P211, DOI DOI 10.1080/00098650109599193
   McGreal R., 2004, Online education using learning objects, DOI 10.4324/9780203416082
   Mendonca M., 2009, P 24 ACM SIGPLAN C C, P761, DOI [10.1145/1639950.1640002, DOI 10.1145/1639950.1640002]
   Milne I., 2002, Education and Information Technologies, V7, P55, DOI 10.1023/A:1015362608943
   Mtebe Joel S., 2012, International Journal of Digital Information and Wireless Communications (IJDIWC), V2, P202
   Narasimhamurthy U, 2009, 2009 INTERNATIONAL WORKSHOP ON TECHNOLOGY FOR EDUCATION (T4E 2009), P114, DOI 10.1109/T4E.2009.5314123
   Parnas D. L., 1976, IEEE Transactions on Software Engineering, VSe-2, P1, DOI 10.1109/TSE.1976.233797
   Pears Arnold, 2007, SIGCSE Bulletin, V39, P204, DOI 10.1145/1345375.1345441
   Robins A., 2003, COMPUT SCI EDUC, V13, P137, DOI [10.1076/csed.13.2.137.14200, DOI 10.1076/CSED.13.2.137.14200]
   Rodríguez-Artacho M, 2004, EDUC TECHNOL SOC, V7, P124
   Rössling G, 2010, ALGORITHMS, V3, P168, DOI 10.3390/a3020168
   Rossano V, 2005, EDUC TECHNOL SOC, V8, P148
   Saeli M, 2011, INFORM EDUC, V10, P73
   Santos A, 2010, ALGORITHMS, V3, P183, DOI 10.3390/a3020183
   Schäfer A, 2013, COMPUT SCI EDUC, V23, P87, DOI 10.1080/08993408.2013.778040
   Schmidt DC, 2006, COMPUTER, V39, P25, DOI 10.1109/MC.2006.58
   Sheard J, 2009, FIFTH INTERNATIONAL COMPUTING EDUCATION RESEARCH WORKSHOP - ICER 2009, P93
   Sheard T., 2001, Semantics, Applications, and Implementation of Program Generation. Second International Workshop, SAIG 2001. Proceedings (Lecture Notes in Computer Science Vol.2196), P2
   Shukla Manshi., 2012, International Journal of Computational Engineering Research, V2, P1554
   STUIKYS V, 2013, METAPROGRAMMING MODE
   Stuikys V, 2007, INF TECHNOL CONTROL, V36, P202
   Stuikys V, 2014, INT SYMP COMP INTELL, P185, DOI 10.1109/CINTI.2014.7028673
   Stuikys V, 2013, INFORM EDUC, V12, P125
   Stuikys V, 2008, INFORM EDUC, V7, P277
   Tanner P, 2014, J INF TECHNOL EDUC-I, V13, P45
   Tuparov G, 2012, PROCD SOC BEHV, V46, P2276, DOI 10.1016/j.sbspro.2012.05.469
   Urquiza-Fuentes J, 2009, ELECTRON NOTES THEOR, V224, P169, DOI 10.1016/j.entcs.2008.12.061
   Benitti FBV, 2012, COMPUT EDUC, V58, P978, DOI 10.1016/j.compedu.2011.10.006
   Vincenti G., 2013, J COMPUTER SCI COLL, V28, P38
   Wiley D.A., 2000, LEARNING OBJECT DESI
   Wirth N., 1978, ALGORITHMS DATA STRU
   Zhang JH, 2009, ICCSSE 2009: PROCEEDINGS OF 2009 4TH INTERNATIONAL CONFERENCE ON COMPUTER SCIENCE & EDUCATION, P1689, DOI 10.1109/ICCSE.2009.5228293
NR 120
TC 11
Z9 14
U1 2
U2 196
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 1
PY 2016
VL 129
SI SI
BP 48
EP 71
DI 10.1016/j.scico.2016.03.009
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Social Science Citation Index (SSCI)
SC Computer Science
GA DW0CM
UT WOS:000383308500005
DA 2024-07-18
ER

PT J
AU Blazy, S
   Bühler, D
   Yakobowski, B
AF Blazy, Sandrine
   Buhler, David
   Yakobowski, Boris
TI Improving static analyses of C programs with conditional predicates
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Static analysis; Abstract interpretation; Dataflow analysis; Path
   sensitivity
AB Static code analysis is increasingly used to guarantee the absence of undesirable behaviors in industrial programs. Designing sound analyses is a continuing trade-off between precision and complexity. Notably, dataflow analyses often perform overly wide approximations when two control-flow paths meet, by merging states from each path. This paper presents a generic abstract interpretation based framework to enhance the precision of such analyses on join points. It relies on predicated domains, that preserve and reuse information valid only inside some branches of the code. Our predicates are derived from conditional statements, and postpone the loss of information. The work has been integrated into Frama-C, a C source code analysis platform. Experiments on real generated code show that our approach scales, and improves significantly the precision of the existing analyses of Frama-C. (C) 2015 Elsevier B.V. All rights reserved.
C1 [Blazy, Sandrine] Univ Rennes, IRISA, Rennes, France.
   [Buhler, David; Yakobowski, Boris] CEA, LIST, Software Reliabil Lab, Rennes, France.
C3 Universite de Rennes; CEA
RP Bühler, D (corresponding author), CEA, LIST, Software Reliabil Lab, Rennes, France.
EM sandrine.blazy@irisa.fi; david.buhler@cea.fr; boris.yakobowski@cea.fr
OI Blazy, Sandrine/0000-0002-0189-0223
FU EU [317753]; Agence Nationale de la Recherche [ANR-14-CE28-0018-03];
   Agence Nationale de la Recherche (ANR) [ANR-14-CE28-0018] Funding
   Source: Agence Nationale de la Recherche (ANR)
FX This work was partially funded by EU FP7 (project STANCE, grant 317753)
   and Agence Nationale de la Recherche (project VECOLIB, grant
   ANR-14-CE28-0018-03).
CR Bagnara R, 2004, LECT NOTES COMPUT SC, V2937, P135
   Baudin P., 2014, ACSL ANSI ISO C SPEC
   Bertrane J., 2010, P AIAA INF AER I A 2, P38
   Beyer Dirk, 2008, 2008 23rd IEEE/ACM International Conference on Automated Software Engineering, P29, DOI 10.1109/ASE.2008.13
   Bourdoncle F., 1993, Formal Methods in Programming and Their Applications International Conference Proceedings, P128, DOI 10.1007/BFb0039704
   BRYANT RE, 1986, IEEE T COMPUT, V35, P677, DOI 10.1109/TC.1986.1676819
   Chen JJ, 2015, LECT NOTES COMPUT SC, V9291, P36, DOI 10.1007/978-3-662-48288-9_3
   Clarke EdmundM., 2000, Proceedings of the International Conference on Computer Aided Veri cation (CAV), P154, DOI 10.1007/1072216715
   Coq Development Team, 2015, Technical report
   Correnson L, 2012, LECT NOTES COMPUT SC, V7437, P108, DOI 10.1007/978-3-642-32469-7_8
   Cortesi A, 2013, ELECTRON PROC THEOR, P325, DOI 10.4204/EPTCS.129.19
   Cousot P., 1992, Journal of Logic and Computation, V2, P511, DOI 10.1093/logcom/2.4.511
   Cousot P., 1979, 6 ACM S PRINCIPLES P, P269, DOI DOI 10.1145/567752.567778
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Cousot P, 2010, LECT NOTES COMPUT SC, V6200, P72, DOI 10.1007/978-3-642-13754-9_5
   Cuoq Pascal, 2012, Software Engineering and Formal Methods. Proceedings of the 10th International Conference, SEFM 2012, P233, DOI 10.1007/978-3-642-33826-7_16
   Cuoq P., FRAMA CS VALUE ANAL
   Das M, 2002, ACM SIGPLAN NOTICES, V37, P57, DOI 10.1145/543552.512538
   FISCHER J, 2005, ESEC FSE 2005, P227
   Giacobazzi R, 1998, SCI COMPUT PROGRAM, V32, P177, DOI 10.1016/S0167-6423(97)00034-8
   Graf S., 1996, Computer Aided Verification. 8th International Conference, CAV '96. Proceedings, P196
   Gurfinkel Arie, 2010, International Journal on Software Tools for Technology Transfer, V12, P409, DOI 10.1007/s10009-010-0162-x
   Gurfinkel A, 2010, LECT NOTES COMPUT SC, V6337, P287, DOI 10.1007/978-3-642-15769-1_18
   Handjieva M, 1998, LECT NOTES COMPUT SC, V1503, P200
   Heizmann Matthias, 2013, Computer Aided Verification. 25th International Conference, CAV 2013. Proceedings. LNCS 8044, P36, DOI 10.1007/978-3-642-39799-8_2
   Jourdan JH, 2015, ACM SIGPLAN NOTICES, V50, P247, DOI [10.1145/2775051.2676966, 10.1145/2676726.2676966]
   Kirchner F, 2015, FORM ASP COMPUT, V27, P573, DOI 10.1007/s00165-014-0326-7
   Mauborgne L, 2005, LECT NOTES COMPUT SC, V3444, P5
   Mihaila B, 2014, LECT NOTES COMPUT SC, V8430, P328, DOI 10.1007/978-3-319-06200-6_28
   Miné A, 2006, LECT NOTES COMPUT SC, V3855, P348
   Nielson F., 2005, PRINCIPLES PROGRAM A
   Popeea C, 2007, LECT NOTES COMPUT SC, V4435, P331
   Sankaranarayanan S, 2006, LECT NOTES COMPUT SC, V3855, P111
   Sankaranarayanan S, 2006, LECT NOTES COMPUT SC, V4134, P3
   Sozeau M, 2008, LECT NOTES COMPUT SC, V5170, P278, DOI 10.1007/978-3-540-71067-7_23
   Urban C, 2014, LECT NOTES COMPUT SC, V8723, P302, DOI 10.1007/978-3-319-10936-7_19
NR 36
TC 0
Z9 1
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR 1
PY 2016
VL 118
BP 77
EP 95
DI 10.1016/j.scico.2015.11.011
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DX8JP
UT WOS:000384634200006
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Sabahi-Kaviani, Z
   Khosravi, R
   Ölveczky, PC
   Khamespanah, E
   Sirjani, M
AF Sabahi-Kaviani, Zeynab
   Khosravi, Ramtin
   Olveczky, Peter Csaba
   Khamespanah, Ehsan
   Sirjani, Marjan
TI Formal semantics and efficient analysis of Timed Rebeca in Real-Time
   Maude
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Real-time actors; Timed Rebeca; Formal semantics; Model checking;
   Real-Time Maude
ID SYSTEMS; MODEL
AB The actor model is a well-established and intuitive model of distributed computation. Timed Rebeca is a timed extension of the actor-based modeling language Rebeca. Although Rebeca is supported by a rich verification toolset, Timed Rebeca has not had an executable formal semantics, and has therefore had limited support for formal analysis. In this paper, we provide a formal semantics for Timed Rebeca in Real-Time Maude. Our semantics exploits the isolation inherent in the actor model: since no actor can access the state variables of other actors, and since actors execute only one message server at a time, the effect of executing a statement is not observable by other actors. We can therefore "group together" a number of statements and execute them in one "atomic" rewrite step; this significantly improves the performance of model checking compared to standard approaches where each action is performed by a rewrite step. We have automated the translation from Timed Rebeca to Real-Time Maude, allowing Timed Rebeca models to be automatically analyzed using Real-Time Maude's reachability analysis tool and LTL and timed CTL model checkers. This enables a formal model-engineering methodology which combines the convenience of intuitive modeling in Timed Rebeca with formal verification in Real-Time Maude. We illustrate this methodology and the performance gained by our new "partial-order-reduction-like" optimized semantics with a number of case studies, including the IEEE 802.11 RTS/CTS collision avoidance protocol for wireless networks. (C) 2015 Elsevier B.V. All rights reserved.
C1 [Sabahi-Kaviani, Zeynab; Khosravi, Ramtin; Khamespanah, Ehsan] Univ Tehran, Sch Elect & Comp Engn, Tehran 14174, Iran.
   [Olveczky, Peter Csaba] Univ Oslo, Dept Informat, N-0316 Oslo, Norway.
   [Sirjani, Marjan] Reykjavik Univ, Sch Comp Sci, Reykjavik, Iceland.
C3 University of Tehran; University of Oslo; Reykjavik University
RP Ölveczky, PC (corresponding author), Univ Oslo, Dept Informat, N-0316 Oslo, Norway.
EM z.sabahi@ece.ut.ac.ir; r.khosravi@ut.ac.ir; peterol@ifi.uio.no;
   e.khamespanah@ece.ut.ac.ir; marjan@ru.is
RI Ölveczky, Peter C/B-1797-2008
FU project "Timed Asynchronous Reactive Objects in Distributed Systems:
   TARO" of Icelandic Research Fund [110020021]
FX We thank the anonymous reviewers for their very insightful comments on
   an earlier version of this paper that has led to substantial
   improvements. The work of the 4th and 5th authors was partly supported
   by the project "Timed Asynchronous Reactive Objects in Distributed
   Systems: TARO" (nr. 110020021) of the Icelandic Research Fund.
CR Aceto L, 2011, ELECTRON P THEOR COM, P1, DOI 10.4204/EPTCS.58.1
   Agha G.A., 1990, ACTORS-a model of concurrent computation in distributed systems
   ALUR R, 1994, THEOR COMPUT SCI, V126, P183, DOI 10.1016/0304-3975(94)90010-8
   [Anonymous], 2007, LECT NOTES COMPUTER
   Blanchette J.C., 2008, THESIS
   Bruni R, 2006, THEOR COMPUT SCI, V360, P386, DOI 10.1016/j.tcs.2006.04.012
   Camp T, 2002, WIREL COMMUN MOB COM, V2, P483, DOI 10.1002/wcm.72
   de Boer F, 2010, LECT NOTES COMPUT SC, V5961, P212
   Earle Clara Benac, 2012, Formal Techniques for Distributed Systems. Joint 14th IFIP WG 6.1 International Conference, FMOODS 2012 and 32nd IFIP WG 6.1 International Conference, FORTE 2012, P251, DOI 10.1007/978-3-642-30793-5_16
   Fredlund LÅ, 2007, ICFP'07 PROCEEDINGS OF THE 2007 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P125
   Grabe I, 2010, LECT NOTES COMPUT SC, V5961, P324
   Hui Ding, 2003, Proceedings. Ninth IEEE International Workshop on Object-Oriented Real-Time Dependable Systems, P171
   Johnsen EB, 2007, SOFTW SYST MODEL, V6, P39, DOI 10.1007/s10270-006-0011-2
   Khamespanah E., 2012, AGERE1 12
   Khosravi Ramtin, 2012, Coordination Models and Languages. Proceedings 14th International Conference, COORDINATION 2012, P74, DOI 10.1007/978-3-642-30829-1_6
   Lepri Daniela, 2013, Algebra and Coalgebra in Computer Science. 5th International Conference, CALCO 2013. Proceedings: LNCS 8089, P334, DOI 10.1007/978-3-642-40206-7_27
   Lepri D, 2015, SCI COMPUT PROGRAM, V99, P128, DOI 10.1016/j.scico.2014.06.006
   MESEGUER J, 1992, THEOR COMPUT SCI, V96, P73, DOI 10.1016/0304-3975(92)90182-F
   Meseguer J, 1998, LECT NOTES COMPUT SC, V1376, P18
   Nigro L., 2001, Concurrent object-oriented programming and petri nots. Advances in petri nets (Lecture Notes in Computer Science Vol.2001), P493
   Olveczky P. C., 2007, Higher-Order and Symbolic Computation, V20, P161, DOI 10.1007/s10990-007-9001-5
   Ölveczky PC, 2002, THEOR COMPUT SCI, V285, P359, DOI 10.1016/S0304-3975(01)00363-2
   Ölveczky PC, 2007, ELECTRON NOTES THEOR, V176, P5, DOI 10.1016/j.entcs.2007.06.005
   Ölveczky PC, 2014, LECT NOTES COMPUT SC, V8663, P42, DOI 10.1007/978-3-319-12904-4_3
   Ölveczky PC, 2011, LECT NOTES COMPUT SC, V7000, P368, DOI 10.1007/978-3-642-24933-4_19
   REN SP, 1995, SIGPLAN NOTICES, V30, P50, DOI 10.1145/216633.216656
   Sabahi-Kaviani Z., 2014, COMMUN COMPUT PHYS, V419, P178
   Sharifi Z., 2013, P PDPTA 13
   Sharifi Z., 2013, Electron. Commun. Eur. Assoc. Softw. Sci. Technol., V66, P1
   Sirjani M, 2004, FUND INFORM, V63, P385
NR 30
TC 3
Z9 3
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 1
PY 2015
VL 113
BP 85
EP 118
DI 10.1016/j.scico.2015.07.003
PN 2
PG 34
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CY2HV
UT WOS:000366230300002
DA 2024-07-18
ER

PT J
AU Bartoletti, M
   Cimoli, T
   Pinna, GM
AF Bartoletti, Massimo
   Cimoli, Tiziana
   Pinna, G. Michele
TI Lending Petri nets
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 5th IPM International Conference on Fundamentals of Software Engineering
   (FSEN)
CY APR 24-26, 2013
CL Tehran, IRAN
SP IFIP WG 2 2, Inst Res Fundamental Sci, Sch Comp Sci, ACM SIGSOFT
DE Petri nets; Contracts; Intuitionistic Logic
ID SEMANTICS; VIEW
AB We study Lending Petri nets, an extension of Petri nets where places may carry a negative number of tokens. This allows for modeling contracts where a participant may promise to give some of her resources under the guarantee that some other resources will eventually be obtained in exchange. We then propose an interpretation of the Horn fragment of Propositional Contract Logic in Lending Petri nets. In particular, we show that provability in the logic corresponds to reachability of certain markings in nets, and that proof traces correspond to "honored" firing sequences in nets. (C) 2015 Elsevier B.V. All rights reserved.
C1 [Bartoletti, Massimo; Cimoli, Tiziana; Pinna, G. Michele] Univ Cagliari, Dipartimento Matemat & Informat, I-09124 Cagliari, Italy.
C3 University of Cagliari
RP Pinna, GM (corresponding author), Univ Cagliari, Dipartimento Matemat & Informat, Via Osped 72, I-09124 Cagliari, Italy.
EM gmpinna@unica.it
OI Bartoletti, Massimo/0000-0003-3796-9774; Cimoli,
   Tiziana/0000-0002-8591-4527; PINNA, GIOVANNI MICHELE/0000-0001-8911-1580
FU Aut. Region of Sardinia, P.I.A. Project "Social Glue" [L.R.7/2007
   CRP-17285]; MIUR PRIN project "Security Horizons"; EU COST Action
   [IC1201]
FX Work partially supported by Aut. Region of Sardinia under grant
   L.R.7/2007 CRP-17285 (TRICS), P.I.A. 2010 Project "Social Glue", by MIUR
   PRIN 2010-11 project "Security Horizons", and by EU COST Action IC1201
   (BETTY).
CR ABADI M, 1993, ACM T PROGR LANG SYS, V15, P706, DOI 10.1145/155183.155225
   ABADI M, 1993, THEOR COMPUT SCI, V114, P3, DOI 10.1016/0304-3975(93)90151-I
   Aghasaryan A, 1998, DISCRETE EVENT DYN S, V8, P203, DOI 10.1023/A:1008241818642
   [Anonymous], 2008, Lecture Notes in Computer Science, DOI DOI 10.1007/978-3-642-00945-7
   Armbrust M, 2010, COMMUN ACM, V53, P50, DOI 10.1145/1721654.1721672
   Baldan P, 2005, MATH STRUCT COMP SCI, V15, P1, DOI 10.1017/S0960129504004311
   Baldan P, 2008, INFORM COMPUT, V206, P869, DOI 10.1016/j.ic.2008.04.002
   Baldan P, 2009, LECT NOTES COMPUT SC, V5710, P99, DOI 10.1007/978-3-642-04081-8_8
   Bartoletti M., 2015, J LOG ALGEB IN PRESS, DOI [http://dx.doi.org/10.1016/j.jlamp.2015.05.001, DOI 10.1016/JJLAMP.2015.05.001]
   BARTOLETTI M, 2012, P PLACES, V109, P13
   Bartoletti M, 2013, LECT NOTES COMPUT SC, V8161, P66, DOI 10.1007/978-3-642-40213-5_5
   Bartoletti M, 2013, ELECTRON P THEOR COM, P5, DOI 10.4204/EPTCS.131.2
   Bartoletti M, 2015, SCI COMPUT PROGRAM, V109, P61, DOI 10.1016/j.scico.2015.01.005
   Bartoletti M, 2015, SCI COMPUT PROGRAM, V109, P36, DOI 10.1016/j.scico.2014.11.015
   Bartoletti M, 2014, FUND INFORM, V134, P219, DOI 10.3233/FI-2014-1101
   Bartoletti M, 2013, LECT NOTES COMPUT SC, V7796, P186, DOI 10.1007/978-3-642-36830-1_10
   Bartoletti M, 2010, IEEE S LOG, P332, DOI 10.1109/LICS.2010.25
   Bocchi L, 2010, LECT NOTES COMPUT SC, V6269, P162, DOI 10.1007/978-3-642-15375-4_12
   Bravetti M, 2007, LECT NOTES COMPUT SC, V4829, P34
   Bravetti M, 2007, LECT NOTES COMPUT SC, V4767, P207
   Bruni R, 2013, LOG METH COMPUT SCI, V9, DOI 10.2168/LMCS-9(3:16)2013
   Castagna G, 2009, ACM T PROGR LANG SYS, V31, DOI 10.1145/1538917.1538920
   Gargi D, 2008, LECT NOTES COMPUT SC, V4962, P216, DOI 10.1007/978-3-540-78499-9_16
   Hildebrandt TT, 2011, ELECTRON PROC THEOR, P59, DOI 10.4204/EPTCS.69.5
   Honda K, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P273, DOI 10.1145/2827695
   Kindler E, 1997, LECT NOTES COMPUT SC, V1248, P235
   MARTIOLIET N, 1991, TOPOLOGY AND CATEGORY THEORY IN COMPUTER SCIENCE, P335
   Prisacariu C, 2012, J LOGIC ALGEBR PROGR, V81, P458, DOI 10.1016/j.jlap.2012.03.003
   Reisig W., 1985, MONOGRAPHS THEORETIC, V4
   STOTTS PD, 1992, INFORM PROCESS LETT, V41, P25, DOI 10.1016/0020-0190(92)90076-8
   van der Aalst WMP, 2010, COMPUT J, V53, P90, DOI 10.1093/comjnl/bxn064
   van Glabbeek RJ, 2005, LECT NOTES COMPUT SC, V3653, P323, DOI 10.1007/11539452_26
   VANGLABBEEK RJ, 1995, IEEE S LOG, P199, DOI 10.1109/LICS.1995.523257
   Yoshida N., 2013, LECT NOTES COMPUTER, V8358, P22, DOI [10.1007/978- 3-319, DOI 10.1007/978-3-319]
NR 34
TC 8
Z9 10
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 15
PY 2015
VL 112
BP 75
EP 101
DI 10.1016/j.scico.2015.05.006
PN 1
PG 27
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA CW3HB
UT WOS:000364881500005
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Lozano, A
   Mens, K
   Kellens, A
AF Lozano, Angela
   Mens, Kim
   Kellens, Andy
TI Usage contracts: Offering immediate feedback on violations of structural
   source-code regularities
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Software development tool support; Structural regularities; Source code
   analysis; Internal domain-specific language; IDE integration
ID DESIGN; FRAMEWORK; EVOLUTION
AB Developers often encode design knowledge through structural regularities such as API usage protocols, coding idioms and naming conventions. As these regularities express how the source code should be structured, they provide vital information for developers using or extending that code. Adherence to such regularities tends to deteriorate over time because they are not documented and checked explicitly. This paper introduces uContracts, an internal DSL to codify and verify such regularities as 'usage contracts'. Our DSL aims at covering most common usage regularities, while still providing a means to express less common ones. Common regularities are identified based on regularities supported by existing approaches to detect bugs or suggest missing code fragments, techniques that mine for structural regularities, as well as on the analysis of an open-source project. We validate our DSL by documenting the structural regularities of an industrial case study, and analyse how useful the information provided by checking these regularities is for the developers of that case study. (C) 2015 Elsevier B.V. All rights reserved.
C1 [Lozano, Angela; Mens, Kim] Catholic Univ Louvain, ICTEAM, Louvain, Belgium.
   [Kellens, Andy] Vrije Univ Brussel, Software Languages Lab, Brussels, Belgium.
C3 Universite Catholique Louvain; Vrije Universiteit Brussel
RP Mens, K (corresponding author), Catholic Univ Louvain, ICTEAM, Louvain, Belgium.
EM angela.lozano@uclouvain.be; kim.mens@uclouvain.be;
   andy.kellens@vub.ac.be
OI Mens, Kim/0000-0003-0303-1630
FU Stadium SBO project - "Flemish agency for Innovation by Science and
   Technology" (IWT Vlaanderen); Belgian FNRS-FRFC project
FX The authors would like to thank Tom Van Cutsem for his comments on an
   earlier draft of this paper. During the writing of this article Angela
   Lozano was funded as a post-doc researcher on a Belgian FNRS-FRFC
   project. Andy Kellens was funded by the Stadium SBO project sponsored by
   the "Flemish agency for Innovation by Science and Technology" (IWT
   Vlaanderen). Kim Mens is professor in computer science at the Louvain
   School of Engineering of the Universite catholique de Louvain (UCL) in
   Belgium.
CR Acharya Mithun, 2007, P 6 JOINT M EUROPEAN, P25, DOI [DOI 10.1145/1287624.1287630, 10.1145/1287624.1287630]
   [Anonymous], 2007, 6th joint meeting of the European Software Engineering Conference and the ACM SIGSOFT Symposium on the Foundations of Software Engineering (ESEC/FSE), DOI DOI 10.1145/1287624.1287632
   Arévalo G, 2010, INFORM SOFTWARE TECH, V52, P1167, DOI 10.1016/j.infsof.2010.05.010
   Bennett K. H., 2000, P C FUT SOFTW ENG, P73
   Brichau J, 2010, SCI COMPUT PROGRAM, V75, P232, DOI 10.1016/j.scico.2009.11.005
   Chang R.-Y., 2007, P 2007 INT S SOFTWAR, P163, DOI DOI 10.1145/1273463.1273486
   Crew RogerF., 1997, PROC C DOMAIN SPECIF, P18
   De Roover Coen, 2011, P 9 INT C PRINCIPLES, P71, DOI [10.1145/2093157.2093168, DOI 10.1145/2093157.2093168]
   Demeyer Serge, 2001, TECHNICAL REPORT
   Dong J, 2006, SOFTWARE PRACT EXPER, V36, P27, DOI 10.1002/spe.681
   Eichberg M, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P391, DOI 10.1145/1368088.1368142
   Feilkas M, 2009, INT C PROGRAM COMPRE, P188, DOI 10.1109/ICPC.2009.5090042
   Flanagan C, 2002, ACM SIGPLAN NOTICES, V37, P234, DOI 10.1145/543552.512558
   Fowler M, 2005, Language workbenches: The killer-app for domain specific languages?
   Gray Jeff., 2008, COMP 23 ACM SIGPLAN, P791
   Gunther S., 2010, P 17 C PATT LANG PRO, V35, P3, DOI 10.1145/2493288.2493291
   Hajiyev E, 2006, LECT NOTES COMPUT SC, V4067, P2
   Hakala M, 2001, WORKING IEEE/IFIP CONFERENCE ON SOFTWARE ARCHITECTURE, PROCEEDINGS, P171, DOI 10.1109/WICSA.2001.948426
   Hou DQ, 2006, IEEE T SOFTWARE ENG, V32, P404, DOI 10.1109/TSE.2006.60
   Hou DQ, 2002, INFORM SYST FRONT, V4, P393, DOI 10.1023/A:1020887726404
   Hovemeyer D, 2004, ACM SIGPLAN NOTICES, V39, P92, DOI 10.1145/1052883.1052895
   Janzen D., 2003, Proceedings of the 2nd Annual Conference on Aspect-Oriented Software Development (AOSD), P178, DOI 10.1145/643603.643622
   JOHNSON S, 1979, UNIX PROGRAMMERS M A, V2
   Knizhnik K., JLINT FIND BUGS JAVA
   Li Zhenmin, 2005, P ACM SIGSOFT SOFTW, P306, DOI DOI 10.1145/1081706.1081755
   Livshits V.B., 2005, ESEC SIGSOFT FSE, P296, DOI [DOI 10.1145/1095430.1081754, DOI 10.1145/1081706.1081754]
   Lozano A., 2010, Proceedings 17th Working Conference on Reverse Engineering (WCRE 2010), P22, DOI 10.1109/WCRE.2010.12
   Mandelin D, 2005, ACM SIGPLAN NOTICES, V40, P48, DOI 10.1145/1064978.1065018
   Matsumura T, 2002, 2002 INTERNATIONAL SYMPOSIUM ON EMPIRICAL SOFTWARE ENGINEERING, PROCEEDINGS, P173, DOI 10.1109/ISESE.2002.1166936
   MATTSSON M, 2000, THESIS U KARLSKRONA
   Mens K, 2005, PROC IEEE INT CONF S, P679
   Mens K, 2006, COMPUT LANG SYST STR, V32, P140, DOI 10.1016/j.cl.2005.09.002
   Mens K, 2002, EXPERT SYST APPL, V23, P405, DOI 10.1016/S0957-4174(02)00076-3
   MEYER B, 1990, COMMUN ACM, V33, P68, DOI 10.1145/83880.84464
   Minsky N. H., 1997, THEORY PRACT OBJECT, V3
   Minsky N. H., 1996, THEORY PRACT OBJECT, V2
   Oliveira TC, 2004, IEEE T SOFTWARE ENG, V30, P145, DOI 10.1109/TSE.2004.1271169
   Podobry S., 2011, USING PREFAST STATIC
   Silva RS, 2011, AOSD 2011 PROCEEDINGS AND COMPANION MATERIAL, P7
   Steyaert P, 1996, ACM SIGPLAN NOTICES, V31, P268, DOI 10.1145/236338.236363
   Terra R, 2009, SOFTWARE PRACT EXPER, V39, P1073, DOI 10.1002/spe.931
   Thummalapenta S, 2009, IEEE INT CONF AUTOM, P283, DOI 10.1109/ASE.2009.72
   Vasudevan P, 2006, FOURTH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING RESEARCH, MANAGEMENT AND APPLICATIONS, PROCEEDINGS, P289, DOI 10.1109/SERA.2006.25
   Verbaere Mathieu., 2007, 22nd ACM SIGPLAN Conference on Object-Oriented Programming, Systems, Languages, and Applications, P880
   Zhong H, 2009, LECT NOTES COMPUT SC, V5653, P318, DOI 10.1007/978-3-642-03013-0_15
NR 45
TC 4
Z9 4
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUL 1
PY 2015
VL 105
BP 73
EP 91
DI 10.1016/j.scico.2015.01.004
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CK4MT
UT WOS:000356198600005
DA 2024-07-18
ER

PT J
AU Lepri, D
   Abrahám, E
   Ölveczky, PC
AF Lepri, Daniela
   Abraham, Erika
   Olveczky, Peter Csaba
TI Sound and complete timed CTL model checking of timed Kripke structures
   and real-time rewrite theories
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Timed Kripke structures; Rewriting logic; Timed CTL; Model checking;
   Real-Time Maude
ID SYSTEMS; VERIFICATION; PROTOCOL; MAUDE; COUNTEREXAMPLES; SPECIFICATION;
   AADL
AB In this paper we show that the satisfaction of timed CTL (TCTL) formulas under the natural continuous semantics for both discrete-time and dense-time timed Kripke structures can be reduced to a model-checking problem in the pointwise semantics for a large class of timed Kripke structures, which includes many discrete-event systems. We then present a TCTL model checking algorithm for the pointwise case. An important consequence of our results is that they together describe a sound and complete TCTL model checking procedure for time-robust real-time rewrite theories also for dense time domains. We have implemented such a TCTL model checker for Real-Time Maude. Our model checker provides for free a sound and complete TCTL model checker for subsets of modeling languages, such as Ptolemy II and (Synchronous) AADL, which have Real-Time Maude analysis integrated into their tool environments. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Lepri, Daniela; Olveczky, Peter Csaba] Univ Oslo, N-0316 Oslo, Norway.
   [Abraham, Erika] Rhein Westfal TH Aachen, Aachen, Germany.
C3 University of Oslo; RWTH Aachen University
RP Lepri, D (corresponding author), Univ Oslo, N-0316 Oslo, Norway.
RI Ölveczky, Peter C/B-1797-2008; Abraham, Erika/G-5259-2012
OI Abraham, Erika/0000-0002-5647-6134
FU Research Council of Norway through the Rhytm project [142808]; DAADppp
   HySmart project
FX We would like to thank the anonymous reviewers for their very insightful
   and useful comments on previous versions of this paper. This work was
   partially supported by the Research Council of Norway through the Rhytm
   project (Grant 142808) and by the DAADppp HySmart project.
CR AlTurki Musab, 2007, Proceedings of the 9th International ACM SIGPLAN Conference on Principles and Practice of Declarative Programming (PPDP'07), P131, DOI 10.1145/1273920.1273938
   ALUR R, 1994, THEOR COMPUT SCI, V126, P183, DOI 10.1016/0304-3975(94)90010-8
   ALUR R, 1994, J ACM, V41, P181, DOI 10.1145/174644.174651
   ALUR R, 1993, INFORM COMPUT, V104, P2, DOI 10.1006/inco.1993.1024
   ALUR R, 1992, LECT NOTES COMPUT SC, V600, P74, DOI 10.1007/BFb0031988
   [Anonymous], 2007, LECT NOTES COMPUTER
   [Anonymous], AMAST SERIES COMPUTI
   Asarin E, 1997, LECT NOTES COMPUT SC, V1201, P346, DOI 10.1007/BFb0014737
   Bae K, 2012, LECT NOTES COMPUT SC, V7212, P59, DOI 10.1007/978-3-642-28872-2_4
   Bae K, 2011, LECT NOTES COMPUT SC, V6991, P651, DOI 10.1007/978-3-642-24559-6_43
   Bae K, 2012, SCI COMPUT PROGRAM, V77, P1235, DOI 10.1016/j.scico.2010.10.002
   Baier C, 2008, PRINCIPLES OF MODEL CHECKING, P1
   Behrmann G, 2004, LECT NOTES COMPUT SC, V3185, P200
   Behrmann G., 1999, Computer Aided Verification. 11th International Conference, CAV'99. Proceedings (Lecture Notes in Computer Science Vol.1633), P341
   Berthomieu B, 2006, INT CONF QUANT EVAL, P123
   Boronat A, 2010, LECT NOTES COMPUT SC, V6013, P29, DOI 10.1007/978-3-642-12029-9_3
   Boucheneb H, 2009, J LOGIC COMPUT, V19, P1509, DOI 10.1093/logcom/exp036
   Bouyer P, 2009, ELECTRON NOTES THEOR, V231, P323, DOI 10.1016/j.entcs.2009.02.044
   Bruni R, 2006, THEOR COMPUT SCI, V360, P386, DOI 10.1016/j.tcs.2006.04.012
   BURCH JR, 1992, INFORM COMPUT, V98, P142, DOI 10.1016/0890-5401(92)90017-A
   CAMPOS S, 1994, REAL TIM SYST SYMP P, P266, DOI 10.1109/REAL.1994.342709
   Campos S.V.A., 1999, ELECT NOTES THEOR CO, V23, P75
   Clarke E, 2002, IEEE S LOG, P19, DOI 10.1109/LICS.2002.1029814
   Clarke. E. M., 1982, LOGICS OF PROGRAMS, P52, DOI [10 . 1007 / BFb0025774, DOI 10.1007/BFB0025774]
   Clarke EM, 1999, MODEL CHECKING, P1
   CLARKE EM, 1995, DES AUT CON, P427
   DILL DL, 1990, LECT NOTES COMPUT SC, V407, P197
   Dutertre B, 2004, LECT NOTES COMPUT SC, V3253, P199
   Eker J, 2003, P IEEE, V91, P127, DOI 10.1109/JPROC.2002.805829
   EMERSON EA, 1992, REAL-TIME SYST, V4, P331, DOI 10.1007/BF00355298
   FREDMAN ML, 1987, J ACM, V34, P596, DOI 10.1145/28869.28874
   Gardey G, 2005, LECT NOTES COMPUT SC, V3576, P418
   GIUA A, 1992, 1992 IEEE INTERNATIONAL CONFERENCE ON SYSTEMS, MAN, AND CYBERNETICS, VOLS 1 AND 2, P974, DOI 10.1109/ICSMC.1992.271666
   Grov Jon, 2014, Specification, Algebra, and Software. Essays Dedicated to Kokichi Futatsugi: LNCS 8373, P494, DOI 10.1007/978-3-642-54624-2_25
   Grov Jon, 2013, Data Management in Cloud, Grid and P2P Systems. 6th International Conference, Globe 2013. Proceedings: LNCS 8059, P26, DOI 10.1007/978-3-642-40053-7_3
   HENZINGER TA, 1992, LECT NOTES COMPUT SC, V623, P545
   Katelman M, 2008, LECT NOTES COMPUT SC, V5051, P150, DOI 10.1007/978-3-540-68863-1_10
   Laroussinie F, 2006, THEOR COMPUT SCI, V353, P249, DOI 10.1016/j.tcs.2005.11.020
   Laroussinie F, 2003, THEOR COMPUT SCI, V297, P297, DOI 10.1016/S0304-3975(02)00644-8
   Lepri Daniela, 2012, Rewriting Logic and Its Applications. 9th International Workshop, WRLA 2012. Held as a Satellite Event of ETAPS. Revised Selected Papers, P182, DOI 10.1007/978-3-642-34005-5_10
   Lepri D, 2010, ELECTRON PROC THEOR, P117, DOI 10.4204/EPTCS.36.7
   Lien E, 2009, SEFM 2009: SEVENTH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING AND FORMAL METHODS, P273, DOI 10.1109/SEFM.2009.11
   Markey N, 2004, INT CONF QUANT EVAL, P330
   MESEGUER J, 1992, THEOR COMPUT SCI, V96, P73, DOI 10.1016/0304-3975(92)90182-F
   Meseguer J, 1998, LECT NOTES COMPUT SC, V1376, P18
   Ölveczky PC, 2006, FORM METHOD SYST DES, V29, P253, DOI 10.1007/s10703-006-0015-0
   Olveczky P. C., 2007, Higher-Order and Symbolic Computation, V20, P161, DOI 10.1007/s10990-007-9001-5
   Ölveczky PC, 2006, LECT NOTES COMPUT SC, V3922, P357
   Ölveczky PC, 2002, THEOR COMPUT SCI, V285, P359, DOI 10.1016/S0304-3975(01)00363-2
   Ölveczky PC, 2008, PROCEEDINGS OF NINTH ACIS INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, ARTIFICIAL INTELLIGENCE, NETWORKING AND PARALLEL/DISTRIBUTED COMPUTING, P241, DOI 10.1109/SNPD.2008.42
   Ölveczky PC, 2007, ELECTRON NOTES THEOR, V176, P5, DOI 10.1016/j.entcs.2007.06.005
   Ölveczky PC, 2008, LECT NOTES COMPUT SC, V4963, P332, DOI 10.1007/978-3-540-78800-3_23
   Ölveczky PC, 2011, LECT NOTES COMPUT SC, V7000, P368, DOI 10.1007/978-3-642-24933-4_19
   Ölveczky PC, 2010, LECT NOTES COMPUT SC, V6117, P47, DOI 10.1007/978-3-642-13464-7_5
   Ölveczky PC, 2009, THEOR COMPUT SCI, V410, P254, DOI 10.1016/j.tcs.2008.09.022
   Riesco A, 2009, ELECTRON NOTES THEOR, V238, P249, DOI 10.1016/j.entcs.2009.05.023
   Rivera JE, 2010, LECT NOTES COMPUT SC, V6381, P174, DOI 10.1007/978-3-642-16310-4_12
   Rote G., 2002, B EATCS, V78, P241
   Sabahi-Kaviani Z., 2014, COMMUN COMPUT PHYS, V419, P178
   Tripakis S, 2001, FORM METHOD SYST DES, V18, P25, DOI 10.1023/A:1008734703554
   Viry P, 2002, THEOR COMPUT SCI, V285, P487, DOI 10.1016/S0304-3975(01)00366-8
   Wang F, 2004, P IEEE, V92, P1283, DOI 10.1109/JPROC.2004.831197
   Wang F., 1993, FME'93: Industrial-Strength Formal Methods. First International Symposium of Formal Methods Europe Proceedings, P632, DOI 10.1007/BFb0024671
   Wang F., 2004, International Journal on Software Tools for Technology Transfer, V6, P77, DOI 10.1007/s10009-003-0135-4
   Wang Farn., 2006, Proceedings of the 2nd International Symposium on Leveraging Applications of Formal Methods, Verification and Validation, ISOLA 06, P341, DOI DOI 10.1109/IS0LA.2006.68
   Wirsing M, 2010, ELECTRON P THEOR COM, P1, DOI 10.4204/EPTCS.36.1
   Yovine S., 1997, International Journal on Software Tools for Technology Transfer, V1, P123, DOI 10.1007/s100090050009
NR 67
TC 9
Z9 9
U1 0
U2 7
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR 7
PY 2015
VL 99
BP 128
EP 192
DI 10.1016/j.scico.2014.06.006
PG 65
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CA5PI
UT WOS:000348959900006
DA 2024-07-18
ER

PT J
AU Kwiatkowski, LM
   Verhoef, C
AF Kwiatkowski, Lukasz M.
   Verhoef, Chris
TI Reducing operational costs through MIPS management
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE IT-portfolio management; Cost reduction; MIPS; Source code analysis; SQL
AB We focus on an approach to reducing the costs of running applications. MIPS, which is a traditional acronym for millions of instructions per second, have evolved to become a measurement of processing power and CPU resource consumption. The need for controlling MIPS attributed costs is indispensable given their significant contribution to operational costs. In this paper we investigate a large mainframe production environment running 246 Cobol applications of an organization operating in the financial sector. We found that the vast majority of the top CPU intensive operations in the production environment involve the use of DB2. We propose approaching portfolio-wide efforts to reduce CPU resource consumption from the source code perspective. Our technique is low-risk, low-cost and involves SQL code improvements of small scale. We show how to analyze a mainframe environment in an industrial setting, and to locate the most promising source code segments for optimizing runtime usage. Our approach relies on the mainframe usage data, facts extracted from source code, and is supported by a real-world SQL tuning project. After applying our technique to a portfolio of Cobol applications running on the mainframe our estimates suggested a possible drop in the attributed monthly CPU usage by as much as 16.8%. The approach we present is suited for facilitation within a mainframe environment of a large organization. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Kwiatkowski, Lukasz M.; Verhoef, Chris] Vrije Univ Amsterdam, Dept Comp Sci, NL-1081 HV Amsterdam, Netherlands.
C3 Vrije Universiteit Amsterdam
RP Kwiatkowski, LM (corresponding author), Vrije Univ Amsterdam, Dept Comp Sci, NL-1081 HV Amsterdam, Netherlands.
EM lukasz.x@cs.vu.nl
FU Dutch Joint Academic and Commercial Quality Research & Development
   (Jacquard) program on Software Engineering Research [638.004.405,
   638.003.611]
FX This research received partial support by the Dutch Joint Academic and
   Commercial Quality Research & Development (Jacquard) program on Software
   Engineering Research via contract 638.004.405 EQUITY: Exploring
   Quantifiable Information Technology Yields and via contract 638.003.611
   Symbiosis: Synergy of managing business-IT-alignment, IT-sourcing and
   off-shoring success in society. We would like to thank the organization
   that will remain anonymous for kindly sharing their source code and
   mainframe usage reports with us. We are also indebted to the employees
   of the IT department for providing us with their support. Patrick
   Bruinsma, from IBM Netherlands, for providing us with comments and
   expertise with regards to mainframe environments. Last but not least, we
   are very grateful to our colleague Rob Peters for meticulously reviewing
   this paper numerous times.
CR Aiken PH, 1998, IBM SYST J, V37, P246, DOI 10.1147/sj.372.0246
   [Anonymous], 2010, GLOB TRAFF CONG IBM
   [Anonymous], TECHNICAL REPORT
   Anquetil N, 1999, J SOFTW MAINT-RES PR, V11, P201, DOI 10.1002/(SICI)1096-908X(199905/06)11:3<201::AID-SMR192>3.0.CO;2-1
   Arranga E, 2000, IEEE SOFTWARE, V17, P70
   Blaha Michael., 2010, Patterns of Data Modeling
   Blaha Michael, 2000, MANAGERS GUIDE DATAB
   Carr NG, 2003, HARVARD BUS REV, V81, P41
   Chris J., 2012, DATABASE DESIGN RELA
   Chris J., 2005, DATABASE DEPTH RELAT
   Computerworld, 2007, MIPS MAN MAINFR ORG
   Compuware, 2008, SAV MON MAINFR HARDW
   DATE C.J., 2012, SQL and Relational Theory, V2
   Davis KH, 2001, EIGHTH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P323, DOI 10.1109/WCRE.2001.957838
   Detienne V., 2001, P ER 2001 P ER 2001, P208
   Ebbers Mike, 2006, INTRO NEW MAINFRAME
   Fagen Scott, OPTIMIZING MAINFRAME
   Ferreira Antonio Jose, PERFORMANCE TUNING S
   Fontecchio Mark, 2008, CA AIMING EASE MAINF
   GANSNER ER, 1993, IEEE T SOFTWARE ENG, V19, P214, DOI 10.1109/32.221135
   Gary Barnett, 2005, FUTURE MAINFRAME
   Guerrera F., 2009, FINANC TIMES
   Hainaut J.-L., 1996, Automated Software Engineering, V3, P9, DOI 10.1007/BF00126958
   Henrard J, 2008, WORK CONF REVERSE EN, P305, DOI 10.1109/WCRE.2008.14
   Henrard Jean, 2007, P 23 INT C SOFTW MAI, P473, DOI DOI 10.1109/ICSM.2007.4362661
   IBM, TECHNICAL REPORT
   IBM, SQL REF, V1
   IBM, 2009, DB2 UN DAT Z OS VERS
   IBM, 2010, V1R120 IBM
   IBM, 2009, TECHNICAL REPORT
   IBM, IBM DB2 EXPR C
   Kazman Rick, 2007, IEEE EQUITY 2007
   Kersten B., 2003, Cutter IT Journal, V16, P27
   Kittlaus H.B., 2009, Software Product Management and Pricing
   Klusener AS, 2005, SCI COMPUT PROGRAM, V54, P143, DOI 10.1016/j.scico.2004.03.012
   Klusener AS, 2004, SOFTWARE QUAL J, V12, P297, DOI 10.1023/B:SQJO.0000039790.04885.13
   Lammel Ralf, 2002, TECHNICAL REPORT
   MacNeil Ted, 2004, DONT BE MISLED MIPS
   MACRO 4, 2009, TRADINGMARKETS   JAN
   Mallet H.A., 1994, 62 C ASS CAN FRANC A, P41
   Moor Ian, INTRO SQL POSTGRESQL
   Oppel A., 2008, SQL; A Beginner's Guide, V3rd
   PREMERLANI WJ, 1994, COMMUN ACM, V37, P42, DOI 10.1145/175290.175293
   Siegmund Lee, 2007, IBM SYST MAG     JAN
   Siegmund Lee, 2006, IBM SYST MAG     NOV
   Thomas H.Cormen., 1990, INTRO ALGORITHMS
   van Deursen A, 1998, PROG COMPREHEN, P90, DOI 10.1109/WPC.1998.693319
   Van Geet Joris, 2007, ECEASST, V8
   VEERMAN N, 2007, THESIS VRIJE U AMSTE
   Veerman N, 2006, SCI COMPUT PROGRAM, V62, P287, DOI 10.1016/j.scico.2006.04.006
   Veerman N, 2006, SOFTWARE PRACT EXPER, V36, P1605, DOI 10.1002/spe.745
   Wall L., 1991, PROGRAMMING PERL
   Wall Larry., 1996, PROGRAMMING PERL, Vsecond
   Zukowski M., 2009, THESIS U AMSTERDAM
NR 54
TC 0
Z9 0
U1 0
U2 11
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 1
PY 2015
VL 98
BP 551
EP 588
DI 10.1016/j.scico.2014.09.001
PN 4
PG 38
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AY7LJ
UT WOS:000347741400006
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Sloane, AM
   Roberts, M
AF Sloane, Anthony M.
   Roberts, Matthew
TI Domain-specific program profiling and its application to attribute
   grammars and term rewriting
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Program profiling; Attribute grammars; Term rewriting; Kiama; Scala
ID JASTADD; RULES
AB We present a method for profiling programs that are written using domain-specific languages. Instead of reporting execution in terms of implementation details as in most existing profilers, our method operates at the level of the problem domain. Program execution generates a stream of events that summarises the execution in terms of domain concepts and operations. The events enable us to construct a hierarchical model of the execution. A flexible reporting system summarises the execution along developerchosen model dimensions. The result is a flexible way for a developer to explore the execution of their program without requiring any knowledge of the domain-specific language implementation.
   These ideas are embodied in a new profiling library called dsprofile that is independent of the problem domain so it has no specific knowledge of the data and operations that are being profiled. We illustrate the utility of dsprofile by using it to profile programs that are written using our Kiama language processing library. Specifically, we instrument Kiama's attribute grammar and term rewriting domain-specific languages to use dsprofile to generate events that report on attribute evaluation and rewrite rule application. Examples of typical language processing tasks show how domain-specific profiling can help to diagnose problems in Kiama-based programs without the developer needing to know anything about how Kiama is implemented. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Sloane, Anthony M.; Roberts, Matthew] Macquarie Univ, Dept Comp, Sydney, NSW 2109, Australia.
C3 Macquarie University
RP Sloane, AM (corresponding author), Macquarie Univ, Dept Comp, Sydney, NSW 2109, Australia.
EM Anthony.Sloane@mq.edu.au; Matthew.Roberts@mq.edu.au
OI Sloane, Anthony/0000-0002-6802-7360; Roberts,
   Matthew/0000-0002-2553-6157
CR [Anonymous], 2010, Programming in Scala
   Baader Franz, 1998, TERM REWRITING ALL
   Balland E, 2007, LECT NOTES COMPUT SC, V4533, P36
   Bergel A, 2011, LECT NOTES COMPUT SC, V6705, P68, DOI 10.1007/978-3-642-21952-8_7
   Bouchou Beatrice, 2011, Database and Expert Systems Applications. Proceedings 22nd International Conference, DEXA 2011, P94, DOI 10.1007/978-3-642-23088-2_7
   Bravenboer M., 2009, DEBUGGING TECHNIQUES
   Burmako E., 2013, P 4 ANN SCAL WORKSH
   Calder B., 1999, J INSTR LEVEL PARALL, V1, p4J
   Clavel M., 2010, MAUDE MANUAL
   Davidson D, 2009, LECT NOTES COMPUT SC, V5789, P216, DOI 10.1007/978-3-642-04444-1_14
   Ekman T, 2007, ACM SIGPLAN NOTICES, V42, P1, DOI 10.1145/1297105.1297029
   Fernandes J.P., 2011, P 20 ACM SIGPLAN WOR, P131
   Graham S. L., 1982, SIGPLAN Notices, V17, P120, DOI 10.1145/872726.806987
   GREGG B., 2011, DTRACE DYNAMIC TRACI
   Han F, 2009, IEEE T PATTERN ANAL, V31, P59, DOI [10.1109/TPAMI.2008.65, 10.1109/TPAMI.2008.55]
   Hedin G., 2000, Informatica, V24, P301
   Hedin G, 2003, SCI COMPUT PROGRAM, V47, P37, DOI 10.1016/S0167-6423(02)00109-0
   JOURDAN M, 1984, LECT NOTES COMPUT SC, V167, P167
   Karim MR, 2011, LECT NOTES COMPUT SC, V6621, P250, DOI 10.1007/978-3-642-20407-4_22
   KASTENS U, 1980, ACTA INFORM, V13, P229, DOI 10.1007/BF00288644
   KASTENS U, 1994, ACTA INFORM, V31, P601, DOI 10.1007/BF01177548
   Kats LCL, 2010, ACM SIGPLAN NOTICES, V45, P444, DOI 10.1145/1932682.1869497
   Lämmel R, 2009, ELECTRON NOTES THEOR, V238, P135, DOI 10.1016/j.entcs.2009.09.045
   Magnusson E, 2007, SCI COMPUT PROGRAM, V68, P21, DOI 10.1016/j.scico.2005.06.005
   Mametjanov A., 2011, P 11 WORKSH LANG DES
   Mernik M, 2005, ACM COMPUT SURV, V37, P316, DOI 10.1145/1118890.1118892
   Meseguer J, 2012, J LOGIC ALGEBR PROGR, V81, P721, DOI 10.1016/j.jlap.2012.06.003
   Nguyen P., 2009, P AUSTR C COMP SCI A, P123
   PAAKKI J, 1995, ACM COMPUT SURV, V27, P196, DOI 10.1145/210376.197409
   Premaratne S, 2013, FORMAL AND PRACTICAL ASPECTS OF DOMAIN-SPECIFIC LANGUAGES: RECENT DEVELOPMENTS, P81, DOI 10.4018/978-1-4666-2092-6.ch004
   Rajagopalan M, 2002, ACM SIGPLAN NOTICES, V37, P106, DOI 10.1145/543552.512543
   Sansom PM, 1997, ACM T PROGR LANG SYS, V19, P334, DOI 10.1145/244795.244802
   SARAIVA J, 1999, THESIS UTRECHT U NET
   Shostak R.E., 2012, FORMAL METHODS SOFTW, P4
   Sloane A.M., 2013, LECT NOTES COMPUT SC, V7745, P24
   Sloane AM, 1999, LECT NOTES COMPUT SC, V1575, P17
   Sloane AM, 2013, SCI COMPUT PROGRAM, V78, P1752, DOI 10.1016/j.scico.2011.11.005
   Sloane AM, 2011, LECT NOTES COMPUT SC, V6491, P408, DOI 10.1007/978-3-642-18023-1_12
   Soderberg E., 2010, P 3 INT C SOFTW LANG, P2
   van den Brand MGJ, 2005, ELECTRON NOTES THEOR, V141, P161, DOI 10.1016/j.entcs.2005.02.056
   Van Wyk E, 2010, SCI COMPUT PROGRAM, V75, P39, DOI 10.1016/j.scico.2009.07.004
   Visser E, 2003, LECT NOTES COMPUT SC, V3016, P216
   Visser E., 2007, GENERATIVE TRANSFORM, P265
   VOGT HH, 1989, SIGPLAN NOTICES, V24, P131, DOI 10.1145/74818.74830
   WIRTH N, 1996, COMPILER CONSTRUCTIO
   Yaghmour K., 2000, LINUX J, V106
NR 46
TC 2
Z9 2
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 15
PY 2014
VL 96
BP 488
EP 510
DI 10.1016/j.scico.2014.02.011
PN 4
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AT8KC
UT WOS:000345181300006
OA Bronze
DA 2024-07-18
ER

PT J
AU Papadakis, M
   Delamaro, M
   Le Traon, Y
AF Papadakis, Mike
   Delamaro, Marcio
   Le Traon, Yves
TI Mitigating the effects of equivalent mutants with mutant classification
   strategies
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT Conference on Software Verification and Testing (SVT) Track at the 28th
   ACM Symposium on Applied Computing (ACM SAC)
CY MAR, 2013
CL Coimbra, PORTUGAL
SP ACM
DE Mutation analysis; Mutants' impact; Equivalent mutants; Mutant
   classification; Mutation testing strategies
ID MUTATION
AB Mutation Testing has been shown to be a powerful technique in detecting software faults. Despite this advantage, in practice there is a need to deal with the equivalent mutants' problem. Automatically detecting equivalent mutants is an undecidable problem. Therefore, identifying equivalent mutants is cumbersome since it requires manual analysis, resulting in unbearable testing cost. To overcome this difficulty, researchers suggested the use of mutant classification, an approach that aims at isolating equivalent mutants automatically. From this perspective, the present paper establishes and empirically assesses possible mutant classification strategies. A conducted study reveals that mutant classification isolates equivalent mutants effectively when low quality test suites are used. However, it turns out that as the test suites evolve, the benefit of this practice is reduced. Thus, mutant classification is only fruitful in improving test suites of low quality and only up to a certain limit. To this end, empirical results show that the proposed strategies provide a cost-effective solution when they consider a small number of live mutants, i.e., 10-12. At this point they kill 92% of all the killable mutants. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Papadakis, Mike; Le Traon, Yves] Univ Luxembourg, Interdisciplinary Ctr Secur Reliabil & Trust SnT, Luxembourg, Luxembourg.
   [Delamaro, Marcio] Univ Sao Paulo, Comp Syst Dept, Sao Carlos, SP, Brazil.
C3 University of Luxembourg; Universidade de Sao Paulo
RP Papadakis, M (corresponding author), Univ Luxembourg, Interdisciplinary Ctr Secur Reliabil & Trust SnT, Luxembourg, Luxembourg.
EM Michail.Papadakis@uni.lu; delamaro@icmc.usp.br; Yves.LeTraon@uni.lu
RI LE TRAON, Yves/T-2911-2019; Delamaro, Marcio/D-5180-2011
OI Delamaro, Marcio/0000-0001-7535-5891; LE TRAON,
   Yves/0000-0002-1045-4861; Papadakis, Mike/0000-0003-1852-2547
CR Adamopoulos K, 2004, LECT NOTES COMPUT SC, V3103, P1338
   Andrews JH, 2005, PROC INT CONF SOFTW, P402, DOI 10.1145/1062455.1062530
   BUDD TA, 1982, ACTA INFORM, V18, P31, DOI 10.1007/BF00625279
   Delamaro M.E., 1996, P C PERFORMABILITY C, P79
   DEMILLO RA, 1978, COMPUTER, V11, P34, DOI 10.1109/C-M.1978.218136
   Do HS, 2005, EMPIR SOFTW ENG, V10, P405, DOI 10.1007/s10664-005-3861-2
   Harder M, 2003, PROC INT CONF SOFTW, P60, DOI 10.1109/ICSE.2003.1201188
   Hierons R.M., 1999, J SOFTW TEST VERIFIC, V9, P233, DOI 10.1002/(SICI)1099-1689(199912)9:43.0.CO;2-3
   HUTCHINS M, 1994, PROC INT CONF SOFTW, P191, DOI 10.1109/ICSE.1994.296778
   Jia Y, 2009, INFORM SOFTWARE TECH, V51, P1379, DOI 10.1016/j.infsof.2009.04.016
   Kintis M., 2012, 2012 IEEE Fifth International Conference on Software Testing, Verification and Validation (ICST 2012), P701, DOI 10.1109/ICST.2012.160
   Kintis M, 2010, ASIA PAC SOFWR ENG, P300, DOI 10.1109/APSEC.2010.42
   Namin AS, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P351, DOI 10.1145/1368088.1368136
   Offut A. J., 1997, Software Testing, Verification and Reliability, V7, P165, DOI 10.1002/(SICI)1099-1689(199709)7:3<165::AID-STVR143>3.0.CO;2-U
   Offutt AJ, 2001, KLUW INT S ADV DATA, V24, P34
   Papadakis Mike, 2010, Proceedings of the IEEE Third International Conference on Software Testing Verification and Validation - Workshops (ICSTW 2010), P90, DOI 10.1109/ICSTW.2010.50
   Papadakis M, 2012, INFORM SOFTWARE TECH, V54, P915, DOI 10.1016/j.infsof.2012.02.004
   Papadakis M, 2011, SOFTWARE QUAL J, V19, P691, DOI 10.1007/s11219-011-9142-y
   Papadakis Mike., 2013, Proceedings of the 28th Annual ACM Symposium on Applied Computing. SAC'13, P1223, DOI DOI 10.1145/2480362.2480592
   Schuler D., 2012, SOFTW TEST VERIF REL
   Schuler D, 2009, ISSTA 2009: INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, P69
   Spafford Eugene, 1989, DESIGN MUTANT OPERAT
   Yoo S, 2013, ACM T SOFTW ENG METH, V22, DOI 10.1145/2491509.2491513
   Yue Jia, 2011, IEEE Transactions on Software Engineering, V37, P649, DOI 10.1109/TSE.2010.62
NR 24
TC 33
Z9 35
U1 0
U2 9
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 1
PY 2014
VL 95
BP 298
EP 319
DI 10.1016/j.scico.2014.05.012
PN 3
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA AS9RH
UT WOS:000344578800003
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Coscia, JLO
   Mateos, C
   Crasso, M
   Zunino, A
AF Ordiales Coscia, Jose Luis
   Mateos, Cristian
   Crasso, Marco
   Zunino, Alejandro
TI Refactoring code-first Web Services for early avoiding WSDL
   anti-patterns: Approach and comprehensive assessment
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Web services; Code-first; WSDL anti-patterns; Service understandability;
   Service retrievability
ID METRICS SUITE
AB Previous research of our own [34] has shown that by avoiding certain bad specification practices, or WSDL anti-patterns, contract-first Web Service descriptions expressed in WSDL can be greatly improved in terms of understandability and retrievability. The former means the capability of a human discoverer to effectively reason about a Web Service functionality just by inspecting its associated WSDL description. The latter means correctly retrieving a relevant Web Service by a syntactic service registry upon a meaningful user's query. However, code-first service construction dominates in the industry due to its simplicity. This paper proposes an approach to avoid WSDL anti-patterns in code-first Web Services. We also evaluate the approach in terms of services understandability and retrievability, deeply discuss the experimental results, and delineate some guidelines to help code-first Web Service developers in dealing with the trade-offs that arise between these two dimensions. Certainly, our approach allows services to be more understandable, due to anti-pattern remotion, and retrievable as measured by classical Information Retrieval metrics. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Ordiales Coscia, Jose Luis; Mateos, Cristian; Crasso, Marco; Zunino, Alejandro] UNICEN Univ, ISISTAN Res Inst, Tandil, Argentina.
RP Mateos, C (corresponding author), UNICEN Univ, ISISTAN Res Inst, Campus Univ,B7001BBO, Tandil, Argentina.
EM jlordiales@gmail.com; cmateos@conicet.gov.ar; mcrasso@gmail.com;
   azunino@conicet.gov.ar
RI Zunino, Alejandro/W-2100-2017
OI Zunino, Alejandro/0000-0002-9537-3541; Mateos,
   Cristian/0000-0001-5761-1898
FU ANPCyT [PAE-PICT 2007-02311, PICT-2012-0045]
FX We thank the anonymous reviewers for their comments and suggestions to
   improve the paper. We also acknowledge the financial support provided by
   ANPCyT through grants PAE-PICT 2007-02311 and PICT-2012-0045.
CR Agichtein E., 2006, Proceedings of the Twenty-Ninth Annual International ACM SIGIR Conference on Research and Development in Information Retrieval, P3, DOI 10.1145/1148170.1148175
   Al Dallal J, 2011, IEEE T SOFTWARE ENG, V37, P788, DOI 10.1109/TSE.2010.97
   Al-Masri E., 2007, P 16 INT C WORLD WID, P1257, DOI DOI 10.1145/1242572.1242795
   [Anonymous], 2010, LUCENE ACTION 2 EDIT
   Baski D, 2011, IET SOFTW, V5, P320, DOI 10.1049/iet-sen.2010.0089
   Beaton J, 2008, 2008 IEEE SYMPOSIUM ON VISUAL LANGUAGES AND HUMAN-CENTRIC COMPUTING, PROCEEDINGS, P193, DOI 10.1109/VLHCC.2008.4639084
   Blake MB, 2008, IEEE INTERNET COMPUT, V12, P62, DOI 10.1109/MIC.2008.112
   Bloch J., 2006, 21 ACM SIGPLAN S OBJ, P506, DOI DOI 10.1145/1176617.1176622
   CHIDAMBER SR, 1994, IEEE T SOFTWARE ENG, V20, P476, DOI 10.1109/32.295895
   Crasso M, 2008, SCI COMPUT PROGRAM, V71, P144, DOI 10.1016/j.scico.2008.02.002
   Crasso M, 2011, INFORM SYST FRONT, V13, P407, DOI 10.1007/s10796-009-9221-9
   Crasso M, 2011, J DATABASE MANAGE, V22, P102, DOI 10.4018/jdm.2011010105
   Crasso M, 2010, IEEE INTERNET COMPUT, V14, P48, DOI 10.1109/MIC.2010.81
   Erl T., 2007, SOA Principles of Service Design
   Fowler M., 2018, Refactoring: Improving the Design of Existing Code
   Huston B, 2001, J SYST SOFTWARE, V58, P261, DOI 10.1016/S0164-1212(01)00043-7
   Korfhage R.R., 1997, INFORM STORAGE RETRI
   Rodriguez JM, 2013, IEEE INTERNET COMPUT, V17, P44, DOI 10.1109/MIC.2011.162
   Rodriguez JM, 2013, J WEB ENG, V12, P131
   Rodriguez JM, 2010, IFIP ADV INF COMM TE, V341, P139
   Rodriguez JM, 2010, SCI COMPUT PROGRAM, V75, P1001, DOI 10.1016/j.scico.2010.01.002
   Mateos C., 2012, SADIO ELECT J INFORM, V11, P31
   Mateos C, 2013, IEEE INTERNET COMPUT, V17, P46, DOI 10.1109/MIC.2013.4
   Milne D, 2013, ARTIF INTELL, V194, P222, DOI 10.1016/j.artint.2012.06.007
   Coscia JLO, 2013, INT J WEB GRID SERV, V9, P107, DOI 10.1504/IJWGS.2013.054108
   Ordiales J.L. Coscia, 2012, CLEI ELECT J, V16
   OW2 Consortium, 2010, EASYWSDL TOOLB
   Papazoglou MP, 2008, INT J COOP INF SYST, V17, P223, DOI 10.1142/S0218843008001816
   Pasley J, 2006, IEEE INTERNET COMPUT, V10, P72, DOI 10.1109/MIC.2006.45
   Ramey J., 2006, CHI 06 EXTENDED ABST, P45
   Rodriguez JM, 2013, MIGRATING LEGACY APPLICATIONS: CHALLENGES IN SERVICE ORIENTED ARCHITECTURE AND CLOUD COMPUTING ENVIRONMENTS, P126, DOI 10.4018/978-1-4666-2488-7.ch006
   Ronen Feldman JS., 2006, TEXT MINING HDB ADV
   SALTON G, 1975, COMMUN ACM, V18, P613, DOI 10.1145/361219.361220
   Sneed HM, 2010, IEEE INT S WEB SYST, P111, DOI 10.1109/WSE.2010.5623580
   Spinellis D, 2005, IEEE SOFTWARE, V22, P9, DOI 10.1109/MS.2005.111
   The Apache Software Foundation, 2005, JAVA2WSDL BUILD WSDL
   Tsui F.F., 2006, Essentials of Software Engineering
NR 37
TC 21
Z9 21
U1 0
U2 7
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 1
PY 2014
VL 89
BP 374
EP 407
DI 10.1016/j.scico.2014.03.015
PN C
PG 34
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AJ8CB
UT WOS:000337929200008
OA Green Published
DA 2024-07-18
ER

PT J
AU Sabouri, H
   Khosravi, R
AF Sabouri, Hamideh
   Khosravi, Ramtin
TI Reducing the verification cost of evolving product families using static
   analysis techniques
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Software product lines; Model checking; Program slicing; Static
   analysis; Reduction techniques
ID SOFTWARE; LINES
AB Software product line engineering enables proactive reuse among a set of related products through explicit modeling of commonalities and differences among them. Software product lines are intended to be used in a long period of time. As a result, they evolve over time, due to the changes in the requirements. Having several individual products in a software family, verification of the entire family may take a considerable effort. In this paper we aim to decrease this cost by reducing the number of verified products using static analysis techniques. Furthermore, to reduce model checking costs after product line evolution, we restrict the number of products that should be re-verified by reusing the previous verification result. All proposed techniques are based on static analysis of the product family model with respect to the property and can be automated. To show the effectiveness of these techniques we apply them on a set of case studies and present the results. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Sabouri, Hamideh; Khosravi, Ramtin] Univ Tehran, Sch Elect & Comp Engn, Tehran, Iran.
   [Khosravi, Ramtin] Sch Comp Sci, Inst Res Fundamental Sci IPM, Tehran, Iran.
C3 University of Tehran
RP Sabouri, H (corresponding author), Univ Tehran, Sch Elect & Comp Engn, Karegar Ave, Tehran, Iran.
EM hamideh.sabouri@gmail.com
FU IPM [CS1390-4-02]
FX This research was in part supported by a grant form IPM (No.
   CS1390-4-02).
CR Agha G., 1986, Actors: a model of concurrent computation in distributed systems
   Asirelli P, 2011, LECT NOTES COMPUT SC, V6722, P44, DOI 10.1007/978-3-642-21461-5_3
   Baier C, 2008, PRINCIPLES OF MODEL CHECKING, P1
   Batory D, 2005, LECT NOTES COMPUT SC, V3714, P7
   Benavides D, 2010, INFORM SYST, V35, P615, DOI 10.1016/j.is.2010.01.001
   Brückner I, 2005, LECT NOTES COMPUT SC, V3785, P360
   Bruns D, 2011, LECT NOTES COMPUT SC, V6528, P61
   Clarke D., 2010, P 9 INT S FORM METH, V6957
   Clarke Edmund M., 2001, Model Checking
   Classen A., 2010, ICSE 10, V1, P335, DOI DOI 10.1145/1806799.1806850
   Classen A, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P321, DOI 10.1145/1985793.1985838
   Dovland J, 2005, IEEE INTERNATIONAL CONFERENCE ON SOFTWARE - SCIENCE, TECHNOLOGY AND ENGINEERING, PROCEEDINGS, P141, DOI 10.1109/SWSTE.2005.24
   Dwyer MB, 2006, LECT NOTES COMPUT SC, V3920, P73
   Ebert C, 2009, COMPUTER, V42, P42, DOI 10.1109/MC.2009.118
   Emerson E. A., 1990, Handbook of Theoretical Computer Science, VB, P995, DOI [10.1016/b978-0-444-88074-1.50021-4, DOI 10.1016/B978-0-444-88074-1.50021-4]
   Fantechi A, 2008, SPLC 2008: 12TH INTERNATIONAL SOFTWARE PRODUCT LINE CONFERENCE, PROCEEDINGS, P193, DOI 10.1109/SPLC.2008.45
   FERRANTE J, 1987, ACM T PROGR LANG SYS, V9, P319, DOI 10.1145/24039.24041
   Gruler A, 2008, LECT NOTES COMPUT SC, V5051, P113, DOI 10.1007/978-3-540-68863-1_8
   Jaghoori MM, 2010, ACTA INFORM, V47, P33, DOI 10.1007/s00236-009-0111-x
   Kästner C, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P311, DOI 10.1145/1368088.1368131
   Kang K. C., 1990, Technical Report
   Kastner C., 2008, P GPCE WORKSH MOD CO
   Kim C.H. P., 2011, Proceedings of the Tenth International Conference on Aspect-oriented Software Development, P57
   Kim CHP, 2010, LECT NOTES COMPUT SC, V6418, P285, DOI 10.1007/978-3-642-16612-9_22
   KRAMER J, 1983, IEE PROC-E, V130, P1, DOI 10.1049/ip-e.1983.0001
   Larsen Kim G., 2007, International Journal on Software Tools for Technology Transfer, V9, P471, DOI 10.1007/s10009-007-0046-x
   Liu J, 2011, AUTOMAT SOFTW ENG, V18, P39, DOI 10.1007/s10515-010-0075-7
   Millett L.I., 2000, International Journal on Software Tools for Technology Transfer (STTT), V2, P343
   Moskewicz MW, 2001, DES AUT CON, P530, DOI 10.1109/DAC.2001.935565
   Muschevici R., 2010, 2 P 14 INT C SOFTW P, P99
   Nyman U, 2007, LECT NOTES COMPUT SC, V4421, P64
   Plath M, 2001, SCI COMPUT PROGRAM, V41, P53, DOI 10.1016/S0167-6423(00)00018-6
   Pohl K., 2005, SOFTWARE PRODUCT LIN, V10
   Rakow A, 2008, LECT NOTES COMPUT SC, V4910, P436
   Rebeca Research Group, AFR INT VER ENV REB
   Sabouri H., 2012, P COMP SOFTW APPL
   Sabouri H., 2011, P 4 INT C FUND SOFTW
   Sabouri H., 2011, P FACS 11
   Sabouri H, 2010, SCI COMPUT PROGRAM, V75, P811, DOI 10.1016/j.scico.2010.02.003
   Sabouri Hamideh, 2010, PROC INT WORKSHOP FO, P113
   Sirjani M, 2004, FUND INFORM, V63, P385
   Svahnberg M, 1999, J SOFTW MAINT-RES PR, V11, P391, DOI 10.1002/(SICI)1096-908X(199911/12)11:6<391::AID-SMR199>3.0.CO;2-8
   Szyperski C., 2002, Component Software: Beyond Object-Oriented Programming
   Weiser M., 1981, 5th International Conference on Software Engineering, P439
NR 44
TC 4
Z9 5
U1 0
U2 6
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD APR 1
PY 2014
VL 83
SI SI
BP 35
EP 55
DI 10.1016/j.scico.2013.06.009
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AE4IK
UT WOS:000333945900003
OA hybrid
DA 2024-07-18
ER

PT J
AU Auer, A
   Dingel, J
   Rudie, K
AF Auer, Anthony
   Dingel, Juergen
   Rudie, Karen
TI Concurrency control generation for dynamic threads using discrete-event
   systems
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Programming techniques; Concurrent programming; Software engineering;
   Design tools and techniques; Petri nets; Discrete-event systems;
   Concurrency control; Autogeneration; Limited lookahead
ID SUPERVISORY CONTROL
AB The application of Discrete-Event Systems (DES) theory to the problem of guaranteeably enforcing concurrency constraints in multithreaded applications has been studied under certain assumptions, namely, the assumption of a static pool of pre-existing instantiated threads, whose creation and termination are not modeled. This work presents an extension of this case to handle dynamically instantiated and terminated threads using a Petri net formalism and an online limited-lookahead state-space search technique. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Auer, Anthony; Dingel, Juergen] Queens Univ, Sch Comp, Kingston, ON K7L 3N6, Canada.
   [Rudie, Karen] Queens Univ, Dept Elect & Comp Engn, Kingston, ON K7L 3N6, Canada.
C3 Queens University - Canada; Queens University - Canada
RP Dingel, J (corresponding author), Queens Univ, Sch Comp, Kingston, ON K7L 3N6, Canada.
EM auer.anthony@gmail.com; dingel@cs.queensu.ca; karen.rudie@queensu.ca
OI Rudie, Karen/0000-0002-8675-334X
CR Alur R, 2002, J ACM, V49, P672, DOI 10.1145/585265.585270
   ANDLER S, 1979, P 6 ACM S PRINC PROG, P216
   [Anonymous], 1981, P STOC, DOI DOI 10.1145/800076.802477
   [Anonymous], 1992, Ph.D. thesis
   [Anonymous], INTRO AUTOMATA THEOR
   [Anonymous], 2007, INTRO DISCRETE EVENT
   [Anonymous], 1976, THESIS MIT
   Auer A, 2009, ANN ALLERTON CONF, P927, DOI 10.1109/ALLERTON.2009.5394896
   Behrmann G., 2007, INT C COMP AID VER C
   BUCHI JR, 1969, T AM MATH SOC, V138, P295, DOI 10.2307/1994916
   Campbell R. H., 1974, Proceedings of an International Symposium om Operating Systems, P89, DOI 10.1007/BFb0029355
   Cheng BHC, 2009, LECT NOTES COMPUT SC, V5525, P1, DOI 10.1007/978-3-642-02161-9_1
   CHUNG SL, 1992, IEEE T AUTOMAT CONTR, V37, P1921, DOI 10.1109/9.182478
   Clarke EM, 1999, MODEL CHECKING, P1
   COURTOIS PJ, 1971, COMMUN ACM, V14, P667, DOI 10.1145/362759.362813
   Dahm W., 2010, APSTTR1001 US AIR FO
   Deng X., 2002, INT C SOFTW ENG ICSE
   Denney E., 2009, 3 IEEE INT C SPAC MI, P19
   Dingel J., 2009, P INT C COMP SCI SOF, P67
   Dragert C., 2008, SIGSOFT '08/FSE-16, P146
   Feng L, 2006, WODES 2006: EIGHTH INTERNATIONAL WORKSHOP ON DISCRETE EVENT SYSTEMS, PROCEEDINGS, P388
   Gallardo MM, 2011, SOFTWARE PRACT EXPER, V41, P1329, DOI 10.1002/spe.1048
   Giannakopoulou D., 2005, Automated Software Engineering, V12, P297, DOI 10.1007/s10515-005-2641-y
   Grigorov L, 2006, DISCRETE EVENT DYN S, V16, P419, DOI 10.1007/s10626-006-0020-x
   Gromyko A., 2006, 8 INT WORKSH DISCR E
   Heymann M., 1994, Discrete Event Dynamic Systems: Theory & Applications, V4, P221, DOI 10.1007/BF01438708
   Holloway LE, 1997, DISCRETE EVENT DYN S, V7, P151, DOI 10.1023/A:1008271916548
   Jessen JJ, 2007, LECT NOTES COMPUT SC, V4763, P227
   Jiang S., 2010, SIAM J CONTROL OPTIM, V44, P2076
   Jobstmann B, 2007, LECT NOTES COMPUT SC, V4590, P258
   Kupferman O, 2001, INFORM COMPUT, V164, P322, DOI 10.1006/inco.2000.2893
   Kupferman O., 2000, 11 INT C CONC THEOR
   Lindstrom G, 2005, LECT NOTES COMPUT SC, V3707, P444
   Mazo M., 2010, 22 INT C COMP AID VE
   Meredith Patrick, 2012, International Journal on Software Tools for Technology Transfer, V14, P249, DOI 10.1007/s10009-011-0198-6
   Morgenstern A., 2005, IEEE C DEC CONTR EUR
   Ostroff J., 1989, 28 IEEE C DEC CONTR
   PETERSON JL, 1977, COMPUT SURV, V9, P223, DOI 10.1145/356698.356702
   Piterman N, 2006, LECT NOTES COMPUT SC, V3855, P364
   Pnueli A., 1989, ACM S PRINC PROGR LA
   RAMADGE PJ, 1987, SIAM J CONTROL OPTIM, V25, P206, DOI 10.1137/0325013
   Rudie K, 2006, WODES 2006: Eighth International Workshop on Discrete Event Systems, Proceedings, P394
   Solar-Lezama A., 2008, ACM SIGPLAN C PROGR
   Tivoli M., 2006, RSTI OBJET J, V12, P77
   Tivoli M, 2008, SCI COMPUT PROGRAM, V71, P181, DOI 10.1016/j.scico.2008.03.001
   Uzam M, 2004, INT J ADV MANUF TECH, V24, P48, DOI 10.1007/s00170-003-1715-x
   Vechev M, 2010, ACM SIGPLAN NOTICES, V45, P327, DOI 10.1145/1707801.1706338
   Wang Y., 2010, INT WORKSH DISCR EV
   Wang Y, 2008, WODES' 08: PROCEEDINGS OF THE 9TH INTERNATIONAL WORKSHOP ON DISCRETE EVENT SYSTEMS, P287, DOI 10.1109/WODES.2008.4605961
   Wang Y, 2009, ACM SIGPLAN NOTICES, V44, P252, DOI 10.1145/1594834.1480913
   Winacott C, 2013, DISCRETE EVENT DYN S, V23, P135, DOI 10.1007/s10626-012-0138-y
   WONGTOI H, 1991, PROCEEDINGS OF THE 30TH IEEE CONFERENCE ON DECISION AND CONTROL, VOLS 1-3, P1527, DOI 10.1109/CDC.1991.261658
   WONHAM WM, 1987, SIAM J CONTROL OPTIM, V25, P637, DOI 10.1137/0325036
NR 53
TC 8
Z9 9
U1 0
U2 10
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR 2
PY 2014
VL 82
SI SI
BP 22
EP 43
DI 10.1016/j.scico.2013.01.007
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AB5VR
UT WOS:000331857300003
DA 2024-07-18
ER

PT J
AU Lantreibecq, E
   Serwe, W
AF Lantreibecq, Etienne
   Serwe, Wendelin
TI Formal analysis of a hardware dynamic task dispatcher with CADP
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Co-simulation; Formal verification; LNT; MCL; Model checking; Process
   calculus; System on chip
ID SYSTEMS
AB The complexity of multiprocessor architectures for mobile multimedia applications renders their validation challenging. In addition, to provide the necessary flexibility, a part of the functionality is realized by software. Thus, a formal model has to take into account both hardware and software. In this article we report on the use of the CADP toolbox for the formal modeling and analysis of the DTD (Dynamic Task Dispatcher), a complex hardware block of an industrial hardware architecture developed by STMicroelectronics. The formal LNT model developed by an industry engineer was appropriate to discuss implementation details with the architect and enabled model-checking temporal properties expressed in MCL, which discovered a possible problem. We investigated the existence of the problem in the architect's C++ model using co-simulation of the C++ and the formal LNT models. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Lantreibecq, Etienne] STMicroelectronics, F-38019 Grenoble, France.
   [Serwe, Wendelin] Inria LIG, F-38334 Saint Ismier, France.
C3 STMicroelectronics
RP Serwe, W (corresponding author), Inria LIG, 55 Av Europe,Inovallee 6, F-38334 Saint Ismier, France.
EM Etienne.Lantreibecq@st.com; Wendelin.Serwe@inria.fr
FU French Ministry of Economics and Industry; Conseil General de l'lsere
   (Minalogic project Multival)
FX This work has been partly funded by the French Ministry of Economics and
   Industry and by the Conseil General de l'lsere (Minalogic project
   Multival, see http://vasy.inria.fr/multival).
CR Belinfante A, 2010, LECT NOTES COMPUT SC, V6015, P266, DOI 10.1007/978-3-642-12002-2_21
   BERNSTEIN AJ, 1966, IEEE TRANS ELECTRON, VEC15, P757, DOI 10.1109/PGEC.1966.264565
   Champelovier D, 2010, REFERENCE MANUAL LOT
   Garavel H, 2006, THEOR COMPUT SCI, V351, P131, DOI 10.1016/j.tcs.2005.09.064
   Garavel Hubert, 2013, International Journal on Software Tools for Technology Transfer, V15, P89, DOI 10.1007/s10009-012-0244-z
   GARAVEL H, 1990, PROTOCOL SPECIFICATION, TESTING, AND VERIFICATION, X, P379
   Garavel H., 2001, International Journal on Software Tools for Technology Transfer, V3, P314, DOI 10.1007/s100090100044
   Garavel H., 1998, P 3 INT WORKSH FORM, P187
   Garavel H, 2009, LECT NOTES COMPUT SC, V5578, P241, DOI 10.1007/978-3-642-02652-2_20
   ISO, 1989, Technical Report 8807
   ISO/IEC, 2001, 154372001 ISOIEC
   Jard C., 2005, International Journal on Software Tools for Technology Transfer, V7, P297, DOI 10.1007/s10009-004-0153-x
   Lantreibecq E, 2011, LECT NOTES COMPUT SC, V6959, P180, DOI 10.1007/978-3-642-24431-5_14
   Mateescu R, 2008, LECT NOTES COMPUT SC, V5014, P148, DOI 10.1007/978-3-540-68237-0_12
   QUEILLE JP, 1983, ACTA INFORM, V19, P195, DOI 10.1007/BF00265555
   STMicroelectronics/CEA, 2010, PLATF 2012 MAN COR P
NR 16
TC 2
Z9 2
U1 0
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 1
PY 2014
VL 80
BP 130
EP 149
DI 10.1016/j.scico.2013.01.003
PN A
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 292FG
UT WOS:000329887000010
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Chilowicz, M
   Duris, É
   Roussel, G
AF Chilowicz, Michel
   Duris, Etienne
   Roussel, Gilles
TI Viewing functions as token sequences to highlight similarities in source
   code
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Source code; Duplication; Clones; Similarity; Factorization; Inlining;
   Outlining; Call graph; Suffix indexation
AB The detection of similarities in source code has applications not only in software re-engineering (to eliminate redundancies) but also in software plagiarism detection. This later can be a challenging problem since more or less extensive edits may have been performed on the original copy: insertion or removal of useless chunks of code, rewriting of expressions, transposition of code, inlining and outlining of functions, etc. In this paper, we propose a new similarity detection technique not only based on token sequence matching but also on the factorization of the function call graphs. The factorization process merges shared chunks (factors) of codes to cope, in particular, with inlining and outlining. The resulting call graph offers a view of the similarities with their nesting relations. It is useful to infer metrics quantifying similarity at a function level. (C) 2012 Elsevier B.V. All rights reserved.
C1 [Chilowicz, Michel; Duris, Etienne; Roussel, Gilles] Univ Paris Est, Lab Informat Gaspard Monge, CNRS, UMR 8049, F-77454 Marne La Vallee 2, France.
C3 Universite Gustave-Eiffel; ESIEE Paris; Centre National de la Recherche
   Scientifique (CNRS); Ecole des Ponts ParisTech
RP Chilowicz, M (corresponding author), Univ Paris Est, Lab Informat Gaspard Monge, CNRS, UMR 8049, 5 Bd Descartes, F-77454 Marne La Vallee 2, France.
EM michel.chilowicz@univ-paris-est.fr; etienne.duris@univ-paris-est.fr;
   gilles.roussel@univ-paris-est.fr
CR Abouelhoda M. I., J DISCRETE ALGORITHM
   [Anonymous], 1973, 14 ANN S SWITCHING A, DOI [DOI 10.1109/SWAT.1973.13, 10.1109/SWAT.1973.13]
   Baker B. S., 1993, Proceedings of the Twenty-Fifth Annual ACM Symposium on the Theory of Computing, P71, DOI 10.1145/167088.167115
   Baxter ID, 1998, PROC IEEE INT CONF S, P368, DOI 10.1109/ICSM.1998.738528
   Bellon S, 2007, IEEE T SOFTWARE ENG, V33, P577, DOI 10.1109/TSE.2007.70725
   BERKMAN O, 1993, SIAM J COMPUT, V22, P221, DOI 10.1137/0222017
   Chilowicz M., 2009, SYNTAX TREE FINGERPR
   Chilowicz M., 2010, THESIS
   Chilowicz M, 2009, ELECTRON NOTES THEOR, V238, P47, DOI 10.1016/j.entcs.2009.09.040
   Chilowicz M, 2009, INT C PROGRAM COMPRE, P243, DOI 10.1109/ICPC.2009.5090050
   Cook S. A., 1971, P 3 ANN ACM S THEOR, P151, DOI [10.1145/800157.805047, DOI 10.1145/800157.805047]
   Cormen Thomas H., 2001, INTRO ALGORITHMS
   Crochemore M., 2002, JEWELS STRINGOLOGY
   Godfrey MW, 2005, IEEE T SOFTWARE ENG, V31, P166, DOI 10.1109/TSE.2005.28
   Gusfield Dan, 1997, Algorithms on Strings, Trees, and Sequences: Computer Science and Computational Biology, DOI DOI 10.1017/CBO9780511574931
   Kamiya T, 2002, IEEE T SOFTWARE ENG, V28, P654, DOI 10.1109/TSE.2002.1019480
   Kasai T., 2001, Combinatorial Pattern Matching. 12th Annual Symposium, CPM 2001. Proceedings (Lecture Notes in Computer Science Vol. 2089), P181
   Krinke J., 2001, P 8 WORK C REV ENG
   Kurtz S, 1999, SOFTWARE PRACT EXPER, V29, P1149, DOI 10.1002/(SICI)1097-024X(199911)29:13<1149::AID-SPE274>3.0.CO;2-O
   Manber U., 1990, SUFFIX ARRAYS NEW ME
   Ottenstein K. J., 1976, ACM SIGCSE Bulletin, V8, P30, DOI [DOI 10.1145/382222.382462, 10.1145/382222.382462]
   Prechelt L., 2000, Journal of Universal Computer Science, V8, P1016
   Roy CK, 2008, INT C PROGRAM COMPRE, P153, DOI 10.1109/ICPC.2008.42
   Schleimer Saul, 2003, P 2003 ACM SIGMOD IN, P76, DOI [10.1145/872757.872770, DOI 10.1145/872757.872770]
   Tairas R., 2006, P 44 ANN SE REG C, P679, DOI 10.1145/1185448.1185597
   Tarjan R., 1972, SIAM Journal on Computing, V1, P146, DOI 10.1137/0201010
   UKKONEN E, 1992, IFIP TRANS A, V12, P484
   Wise M J, 1995, Proc Int Conf Intell Syst Mol Biol, V3, P393
   Wise Michael, 1993, Basser Departement of Computer Science Report
   ZHANG KZ, 1989, SIAM J COMPUT, V18, P1245, DOI 10.1137/0218082
NR 30
TC 5
Z9 5
U1 0
U2 14
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 1
PY 2013
VL 78
IS 10
BP 1871
EP 1891
DI 10.1016/j.scico.2012.11.008
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 200RJ
UT WOS:000323086300007
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Goeminne, M
   Mens, T
AF Goeminne, Mathieu
   Mens, Tom
TI A comparison of identity merge algorithms for software repositories
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Software repository mining; Empirical software engineering; Identity
   merging; Open source; Software evolution; Comparison
ID EVOLUTION
AB Software repository mining research extracts and analyses data originating from multiple software repositories to understand the historical development of software systems, and to propose better ways to evolve such systems in the future. Of particular interest is the study of the activities and interactions between the persons involved in the software development process. The main challenge with such studies lies in the ability to determine the identities (e.g., logins or e-mail accounts) in software repositories that represent the same physical person. To achieve this, different identity merge algorithms have been proposed in the past. This article provides an objective comparison of identity merge algorithms, including some improvements over existing algorithms. The results are validated on a selection of large ongoing open source software projects. (C) 2011 Elsevier B.V. All rights reserved.
C1 [Goeminne, Mathieu; Mens, Tom] Univ Mons, Fac Sci, Inst Informat, B-7000 Mons, Belgium.
C3 University of Mons
RP Goeminne, M (corresponding author), Univ Mons, Fac Sci, Inst Informat, Pl Parc 20, B-7000 Mons, Belgium.
EM mathieu.goeminne@umons.ac.be
RI Mens, Tom/B-6518-2013
OI Mens, Tom/0000-0003-3636-5020
FU FRFC [2.4515.09]; F.R.S-F.N.R.S; ARC [AUWB-08/12-UMH]; Ministere de la
   Communaute francaise - Direction generale de l'Enseignement non
   obligatoire et de la Recherche scientifique, Belgium
FX We thank Bram Adams and Alexander Serebrenik for the stimulating
   discussions and for pointing us to some very useful articles. We thank
   Sylvain Degrandsart and Nadege Thys for cross-checking our reference
   models. This research has been partially supported by FRFC research
   project 2.4515.09 financed by F.R.S-F.N.R.S, and ARC research project
   AUWB-08/12-UMH financed by the Ministere de la Communaute francaise -
   Direction generale de l'Enseignement non obligatoire et de la Recherche
   scientifique, Belgium.
CR [Anonymous], CLEI ELECT J
   [Anonymous], 2008, Software Evolution, DOI [10.1007/978-3-540-76440-311, DOI 10.1007/978-3-540-76440-311]
   Basili V., 2007, LECT NOTES COMPUTER, V4336
   Bird Christian, 2006, INT C SOFTWARE ENG P, P137, DOI DOI 10.1145/1137983.1138016
   Capiluppi A., P 3 WORKSH OP SOURC, P19
   Chen K, 2004, EMPIR SOFTW ENG, V9, P197, DOI 10.1023/B:EMSE.0000027779.70556.d0
   Goeminne M., 2010, 13 INT WORKSH PRINC, P42
   Gutsche J., 2004, EVOLUTION OPEN SOURC
   Hassan AE, 2005, IEEE T SOFTWARE ENG, V31, P426, DOI 10.1109/TSE.2005.70
   Lungu M, 2008, PROC IEEE INT CONF S, P428, DOI 10.1109/ICSM.2008.4658096
   Martinez-Romo J., OPEN SOURCE DEV COMM, V275, P171
   Milev R, 2009, INT FED INFO PROC, V299, P20
   Mockus A, 2002, ACM T SOFTW ENG METH, V11, P309, DOI 10.1145/567793.567795
   Navarro G., 2001, ACM COMPUTING SURVEY, V33
   Nia R., 2010, Proceedings of the 2010 7th IEEE Working Conference on Mining Software Repositories (MSR 2010), P201, DOI 10.1109/MSR.2010.5463342
   Poncin W., 2010, THESIS EINDHOVEN U T
   Poncin W, 2011, EUR CON SFTWR MTNCE, P5, DOI 10.1109/CSMR.2011.5
   ROBLES G, 2005, P INT WORKSH MIN SOF, P106
   Robles G, 2009, 2009 6TH IEEE INTERNATIONAL WORKING CONFERENCE ON MINING SOFTWARE REPOSITORIES, P167, DOI 10.1109/MSR.2009.5069497
   Stephany F., 2009, P IWST 2009 INT WORK, P50
   Stol KJ, 2009, INT FED INFO PROC, V299, P156
   Weiss M, 2006, INT FED INFO PROC, V203, P21
NR 22
TC 40
Z9 44
U1 0
U2 4
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD AUG 1
PY 2013
VL 78
IS 8
BP 971
EP 986
DI 10.1016/j.scico.2011.11.004
PG 16
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 168XV
UT WOS:000320742200002
OA Bronze
DA 2024-07-18
ER

PT J
AU Nardini, E
   Omicini, A
   Viroli, M
AF Nardini, Elena
   Omicini, Andrea
   Viroli, Mirko
TI Semantic tuple centres
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Coordination models; Tuple spaces; Description logics; OWL; Semantic
   tuple centres; TuCSoN; Pellet
ID COORDINATION; WEB
AB In order to address open, distributed, and knowledge-intensive scenarios, we introduce a semantic-oriented extension of the tuple centre coordination model. There, each tuple centre is extended with the ontological description of the coordination domain, expressed by means of the W3C standard OWL Unlike existing approaches in the literature, our coordination model smoothly extends the standard syntactic setting of tuple spaces, allowing tuple centres to encapsulate the semantic representation of the domain of discourse, and to embody semantic coordination policies. In order to test the feasibility of our approach, a prototypical implementation of our model in the TuCSoN infrastructure featuring the Pellet semantic reasoner is described and discussed. (C) 2012 Elsevier B.V. All rights reserved.
C1 [Nardini, Elena; Omicini, Andrea; Viroli, Mirko] Alma Mater Studiorum Univ Bologna, DISI, Bologna, Italy.
C3 University of Bologna
RP Omicini, A (corresponding author), Alma Mater Studiorum Univ Bologna, DISI, Bologna, Italy.
EM elena.nardini@unibo.it; andrea.omicini@unibo.it; mirko.viroli@unibo.it
RI Omicini, Andrea/G-5284-2013
OI Omicini, Andrea/0000-0002-6655-3869; Viroli, Mirko/0000-0003-2702-5702
FU EU-FP7-FET Proactive project SAPERE - Self-aware Pervasive Service
   Ecosystems [256874]
FX This work has been supported by the EU-FP7-FET Proactive project SAPERE
   - Self-aware Pervasive Service Ecosystems, under contract no. 256874.
CR [Anonymous], JINI TECHNOLOGY SERI
   [Anonymous], 2003, Journal of Web Semantics
   Baader F., 2010, DESCRIPTION LOGIC HD, V2nd
   Balzarotti Davide, 2007, Web Intelligence and Agent Systems, V5, P215
   Bobillo F, 2008, IEEE INT CONF FUZZY, P923, DOI 10.1109/FUZZY.2008.4630480
   Bock Jurgen., 2008, CEUR Workshop Proceedings, P350
   Cabri G, 2000, IEEE INTERNET COMPUT, V4, P26, DOI 10.1109/4236.865084
   Denti E., 2001, Practical Aspects of Declarative Languages. Third International Symposium, PADL 2001. Proceedings (Lecture Notes in Computer Science Vol.1990), P184
   DENTI E, 1997, LNCS, V1282, P274
   Fensel D, 2004, LECT NOTES COMPUT SC, V3283, P43
   Ferscha A, 2010, IEEE PERVAS COMPUT, V9, P7, DOI 10.1109/MPRV.2010.13
   Fredriksson M, 2004, MU S ART SOC SIM ORG, P377, DOI 10.1007/1-4020-8058-1_22
   GELERNTER D, 1985, ACM T PROGR LANG SYS, V7, P80, DOI 10.1145/2363.2433
   Haarslev V., 2001, Automated Reasoning. First International Joint Conference, IJCAR 2001. Proceedings (Lecture Notes in Artificial Intelligence Vol.2083), P701
   Julien C, 2006, IEEE T SOFTWARE ENG, V32, P281, DOI 10.1109/TSE.2006.47
   Khushraj D., 2004, 1 ANN INT C MOB UB S, P268
   Mamei M, 2004, SECOND IEEE ANNUAL CONFERENCE ON PERVASIVE COMPUTING AND COMMUNICATIONS, PROCEEDINGS, P263, DOI 10.1109/PERCOM.2004.1276864
   Martín-Recuerda F, 2005, INT FED INFO PROC, V188, P113, DOI 10.1007/0-387-29248-9_7
   Minsky N. H., 1995, Object-Based Models and Languages for Concurrent Systems. ECOOP '94 Workshop on Models and Languages for Coordination of Parallelism and Distribution. Proceedings, P125
   Motik B, 2006, LECT NOTES ARTIF INT, V4246, P227, DOI 10.1007/11916277_16
   Murphy AL, 2006, ACM T SOFTW ENG METH, V15, P279, DOI 10.1145/1151695.1151698
   Nardini E., 2010, CEUR WORKSHOP P, V621, P117
   Nardini E, 2011, APPL COMPUT REV, V11, P43, DOI 10.1145/1964144.1964150
   Nardini E, 2009, 2009 IEEE/WIC/ACM INTERNATIONAL JOINT CONFERENCES ON WEB INTELLIGENCE (WI) AND INTELLIGENT AGENT TECHNOLOGIES (IAT), VOL 3, P501
   Nixon LJB, 2008, KNOWL ENG REV, V23, P181, DOI 10.1017/S0269888907001221
   Omicini A., 1999, Autonomous Agents and Multi-Agent Systems, V2, P251, DOI 10.1023/A:1010060322135
   Omicini A, 2001, SCI COMPUT PROGRAM, V41, P277, DOI 10.1016/S0167-6423(01)00011-9
   Omicini A., 1999, 1999 ACM S APPL COMP, P175
   Omicini A, 2007, ELECTRON NOTES THEOR, V175, P97, DOI 10.1016/j.entcs.2007.03.006
   Omicini A, 2006, LECT NOTES COMPUT SC, V4038, P228
   Omicini A, 2011, KNOWL ENG REV, V26, P53, DOI 10.1017/S026988891000041X
   Pérez J, 2009, ACM T DATABASE SYST, V34, DOI 10.1145/1567274.1567278
   Ricci A, 2003, TWELFTH IEEE INTERNATIONAL WORKSHOPS ON ENABLING TECHNOLOGIES: INFRASTRUCTURE FOR COLLABORATIVE ENTERPRISES, PROCEEDINGS, P365
   Shearer R., 2008, CEUR WORKSHOP P, V432
   Sirin E, 2007, J WEB SEMANT, V5, P51, DOI 10.1016/j.websem.2007.03.004
   Tolksdorf Robert, 2008, Web Intelligence and Agent Systems, V6, P235, DOI 10.3233/WIA-2O08-O139
   Tsarkov D, 2006, LECT NOTES ARTIF INT, V4130, P292
   Wyckoff P, 1998, IBM SYST J, V37, P454, DOI 10.1147/sj.373.0454
   Zambonelli F, 2003, KNOWL ENG REV, V18, P329, DOI 10.1017/S0269888904000104
NR 39
TC 1
Z9 2
U1 0
U2 5
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAY 1
PY 2013
VL 78
IS 5
BP 569
EP 582
DI 10.1016/j.scico.2012.10.004
PG 14
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 125MS
UT WOS:000317544500011
DA 2024-07-18
ER

PT J
AU Cervelle, J
   Forax, R
   Loyauté, G
   Roussel, G
AF Cervelle, Julien
   Forax, Remi
   Loyaute, Gautier
   Roussel, Gilles
TI Banzai plus Tatoo: Using cutting-edge parsers for implementing
   high-performance servers
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Software engineering; Parsing; Protocol; Server; Non-blocking IO
ID LANGUAGE
AB This paper presents how the Tatoo parser generator enables the implementation of Java high-performance servers using the Banzai generic server shell. The performance of these servers relies on the ability of Tatoo to produce push non-blocking parsers with a fixed memory footprint during parsing and on the generic and efficient server architecture of Banzai. This approach reconciles the use of formally defined grammars for protocol parsing and the efficiency of the implementation. We argue that the use of the formal grammars simplifies the implementation of the protocol and we show that an HTTP server built using the Banzai+Tatoo is as efficient as several existing specially tuned high-performance H'TTP servers. (c) 2011 Elsevier B.V. All rights reserved.
C1 [Cervelle, Julien] Univ Paris Est, Lab Algorithm Complexite & Log, F-94010 Creteil, France.
   [Forax, Remi; Loyaute, Gautier; Roussel, Gilles] Univ Paris Est, Lab Informat Gaspard Monge, CNRS UMR 8049, F-77454 Marne La Vallee 2, France.
C3 Universite Paris-Est-Creteil-Val-de-Marne (UPEC); Universite
   Gustave-Eiffel; ESIEE Paris; Centre National de la Recherche
   Scientifique (CNRS); Ecole des Ponts ParisTech
RP Cervelle, J (corresponding author), Univ Paris Est, Lab Algorithm Complexite & Log, F-94010 Creteil, France.
EM julien.cervelle@univ-paris-est.fr; remi.forax@univ-paris-est.fr;
   gautier.loyaute@univ-paris-est.fr; gilles.roussel@univ-paris-est.fr
CR [Anonymous], 2000, Dissertation
   Back G, 2002, LECT NOTES COMPUT SC, V2487, P66
   BEA Tuxedo, TUX WHIT PAP
   Borisov N., 2007, NDSS
   Burgy L, 2007, SYM REL DIST SYST, P149, DOI 10.1109/SRDS.2007.26
   CERVELLE J., 2007, COMPUT SCI INF SYST, V4, P65
   Cervelle Julien., 2006, Proc. Principles and practice of programming in Java (PPPJ), P13
   Crepinsek M, 2010, COMPUT SCI INF SYST, V7, P309, DOI 10.2298/CSIS1002309C
   Crocker D., 1982, 822 RFC
   Douglas M.A.L., 2000, THESIS FLORIDA I TEC
   Fielding R., 1999, Tech. Rep
   Fisher K, 2005, ACM SIGPLAN NOTICES, V40, P295, DOI 10.1145/1064978.1065046
   Gudgin M., SOAP VERSION 1 2
   Harel D., 1985, Logics and Models of Concurrent Systems, VF-13, P477, DOI [DOI 10.1007/978-3-642-82453-1_17, 10.1007/978-3-642-82453-1_17]
   Hu J., 1999, Domain-Specific Application Frameworks, P339
   HURSCH W, 1995, NUCCS9503 NE U COLL
   Jahn S., SERVEEZ
   Johnson StevenC., 1979, UNIX PROGRAMMERS MAN, V2, P353
   Lefkowitz G, 2003, USENIX ASSOCIATION PROCEEDINGS OF THE FREENIX TRACK, P77
   Lowell D. T., 2006, APG ABNF PARSER GENE
   Loyaute G., 2006, P 20 INT PAR DISTR P
   McCann PJ, 2000, ACM SIGCOMM COMP COM, V30, P321, DOI 10.1145/347057.347563
   Mernik M, 2005, ACM COMPUT SURV, V37, P316, DOI 10.1145/1118890.1118892
   Ousterhout J., 1996, P USENIX ANN TECHN C
   Pang R., 2006, IMC, P289
   PARR TJ, 1995, SOFTWARE PRACT EXPER, V25, P789, DOI 10.1002/spe.4380250705
   Peake L, 1997, EIGHTH IEEE INTERNATIONAL WORKSHOP ON SOFTWARE TECHNOLOGY AND ENGINEERING PRACTICE INCORPORATING COMPUTER AIDED SOFTWARE ENGINEERING, PROCEEDINGS, P58, DOI 10.1109/STEP.1997.615464
   Postel J., 1982, 821 RFC
   Schmidt D.C., 2000, ACM COMPUT SURV, V32, P39
   Schwerdfeger AC, 2009, ACM SIGPLAN NOTICES, V44, P199, DOI 10.1145/1543135.1542499
   Welsh M., 2001, Operating Systems Review, V35, P230, DOI 10.1145/502059.502057
   Wilson K, 2005, 2005 ASIA-PACIFIC CONFERENCE ON COMMUNICATIONS (APCC), VOLS 1& 2, P1107, DOI 10.1109/APCC.2005.1554236
   Winer Dave, XML RPC
NR 33
TC 0
Z9 0
U1 1
U2 5
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD AUG 1
PY 2012
VL 77
IS 9
BP 990
EP 1005
DI 10.1016/j.scico.2011.01.005
PG 16
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 967RD
UT WOS:000305924600003
DA 2024-07-18
ER

PT J
AU Hamza, H
   Counsell, S
AF Hamza, H.
   Counsell, S.
TI Region-Based RTSJ Memory Management: State of the art
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE RTSJ memory management; Scoped memory; Immortal memory; Memory regions;
   Real-time Java; Benchmarks; Programming languages
ID SCOPED MEMORY; TIME
AB Developing a real-time system in Java requires awareness of memory behaviour in addition to software functional requirements. The Real-Time Specification for Java (RTSJ) introduces a scoped memory model to avoid garbage collection delays in critical real-time applications which need to meet hard real-time constraints. Scoped memory management has certain advantages over garbage collection in terms of predictability. However, developing a real-time application using scoped memory areas (regions) may suffer from both design and runtime errors. Moreover, from a memory footprint perspective, the inability to determine precisely how many scoped memory areas should be used and which objects or threads should be allocated into these scoped memory areas makes using RTSJ problematic for developing real-time systems. In this paper, a survey of the current approaches to improve scoped memory management and new emerging challenges in RTSJ scoped memory management model are presented. Categorizing those problems and challenges provides a picture of the issues researchers have yet to investigate and to support solutions for an optimal scoped memory model. Current approaches and a set of benchmarks used to evaluate current solutions are presented and new research questions in developing realtime Java systems using a scoped memory model are proposed. (C) 2012 Elsevier B.V. All rights reserved.
C1 [Hamza, H.; Counsell, S.] Brunel Univ, Dept Informat Syst & Comp, Uxbridge UB8 3PH, Middx, England.
C3 Brunel University
RP Counsell, S (corresponding author), Brunel Univ, Dept Informat Syst & Comp, Uxbridge UB8 3PH, Middx, England.
EM hamza.hamza@brunel.ac.uk; steve.counsell@brunel.ac.uk
CR Alrahmawy M., 2009, P 7 INT WORKSH JAV T, P11
   Andreae C, 2007, REAL-TIME SYST, V37, P1, DOI 10.1007/s11241-007-9024-3
   Armbruster A, 2008, ACM T EMBED COMPUT S, V7, DOI 10.1145/1324969.1324974
   Auerbach Joshua., 2007, Proceedings of the 7th ACM IEEE Int'l Conf. on Embedded software, P249, DOI DOI 10.1145/1289927.1289967
   Bacon D. R., 2007, ACM Queue, V5, P40, DOI 10.1145/1217256.1217268
   Baker J, 2006, PROCEEDINGS OF THE 12TH IEEE REAL-TIME AND EMBEDDED TECHNOLOGY AND APPLICATIONS SYMPOSIUM, P384
   BASANTAVAL P, 2006, P 4 INT WORKSH JAV T, P30
   Beebee W.S., 2001, EMSOFT 01, P289
   Begholm T., P 8 INT WORKSH JAV T
   Benowitz EG, 2003, LECT NOTES COMPUT SC, V2889, P497
   Bogholm T., 2009, P 7 INT WORKSH JAV T
   Bollella G., 2000, The Real-Time Specification for Java, P195
   Borg A, 2006, EUROMICRO, P237, DOI 10.1109/ECRTS.2006.21
   Borg A, 2006, INT J EMBED SYST, V2, P166, DOI 10.1504/IJES.2006.014853
   Boyapati C, 2003, ACM SIGPLAN NOTICES, V38, P324, DOI 10.1145/780822.781168
   Brosgol B., 2006, LECT NOTES COMPUT SC, P13
   Bruno EricJ., 2009, Real-Time Java Programming: With Java RTS, V1st
   Chang Y., 2007, COMPUTER SCI
   Cherem S., 2004, INT S MEMORY MANAGEM, P85, DOI DOI 10.1145/1029873.1029884
   Corsaro A, 2004, LECT NOTES COMPUT SC, V3292, P394
   Corsaro A, 2003, ACM SIGPLAN NOTICES, V38, P51, DOI 10.1145/780731.780740
   Corsaro A, 2003, IEEE T PARALL DISTR, V14, P1155, DOI 10.1109/TPDS.2003.1247675
   Corsaro A, 2002, EIGHTH IEEE REAL-TIME AND EMBEDDED TECHNOLOGY AND APPLICATIONS SYMPOSIUM, PROCEEDINGS, P90, DOI 10.1109/RTTAS.2002.1137384
   Deters Morgan., 2002, Proceedings of the 3rd Int'l symposium on Memory management, ISMM'02, P132
   Dibble P., 2002, REAL TIME JAVA PLATF
   Dibble P., 2009, P 7 INT WORKSH JAV T
   Dibble PC, 2008, REAL TIME JAVA PLATF
   Dvorak D, 2004, SEVENTH IEEE INTERNATIONAL SYMPOSIUM ON OBJECT-ORIENTED REAL-TIME DISTRIBUTED COMPUTING, PROCEEDINGS, P15, DOI 10.1109/ISORC.2004.1300324
   Eggermont L.D.J., 2002, EMBEDDED SYSTEMS ROA
   Enery J. M., 2007, P 5 INT WORKSH JAV T, P47
   Etienne J.-P., 2006, P 4 INT WORKSH JAV T, P218
   Ferrari A., 2005, P 2005 OOPSLA WORKSH, P50, DOI [10.1145/1117696, DOI 10.1145/1117696]
   Gamma Erich., 1994, DESIGN PATTERNS
   Garbervetsky D, 2005, ELECTRON NOTES THEOR, V113, P105, DOI 10.1016/j.entcs.2004.01.031
   Garbervetsky Diego., 2009, JTRES 09 P 7 INT WOR, P140
   Guyer SZ, 2004, ACM SIGPLAN NOTICES, V39, P237, DOI 10.1145/1035292.1028996
   Hamza H., 2010, 3 INT C COMP EL ENG, P90
   Henriksson R., 1998, SCHEDULING GARBAGE C
   HENTIES T, 2009, 2 INT WORKSH CERT SA
   Higuera-Toledano MT, 2006, Ninth IEEE International Symposium on Object and Component-Oriented Real-Time Distributed Computing, Proceedings, P419, DOI 10.1109/ISORC.2006.17
   Higuera-Toledano M T., 2008, P 6 INT WORKSH JAV T, P19
   Higuera-Toledano MT, 2008, ISORC 2008: 11TH IEEE SYMPOSIUM ON OBJECT/COMPONENT/SERVICE-ORIENTED REAL-TIME DISTRIBUTED COMPUTING - PROCEEDINGS, P463, DOI 10.1109/ISORC.2008.48
   Jones R, 2007, INT LISP C CAMBR ENG, P115
   Jump M, 2010, SOFTWARE PRACT EXPER, V40, P1, DOI 10.1002/spe.945
   Kalibera T, 2009, REAL TIM SYST SYMP P, P81, DOI 10.1109/RTSS.2009.40
   Kalibera T, 2010, PLPV'10: PROCEEDINGS OF THE 2010 ACM SIGPLAN WORKSHOP ON PROGRAMMING LANGUAGES MEETS PROGRAM VERIFICATION, P57, DOI 10.1145/1707790.1707800
   Kalibera Tomas., 2009, Proceedings of the 7th International Workshop on Java Technologies for Real-Time and Embedded Systems, P41, DOI DOI 10.1145/1620405.1620412
   Kim JS, 2000, PERF E R SI, V28, P264, DOI 10.1145/345063.339422
   Kwon J, 2004, LECT NOTES COMPUT SC, V3292, P333
   Liang S., 1999, Java(TM) Native Interface: Programmer's Guide and Specification
   Magato W., 2005, 2005 48th IEEE International Midwest Symposium on Circuits and Systems (IEEE Cat. No. 05CH37691), P1767
   Maurer S, 2002, IEEE POTENTIALS, V21, P30, DOI 10.1109/45.997974
   Nakhli C., 2006, IMPLEMENTATION COMPI, P1
   Nilsen Kelvin., 2006, JTRES'06: Proceedings of the 4th International Workshop on Java Technologies for Real-time and Embedded Systems, P97
   Otani T.W., 2007, P 5 INT WORKSH JAV T, P135
   Palacz K, 2003, LECT NOTES COMPUT SC, V2743, P378
   Pizlo F, 2004, SEVENTH IEEE INTERNATIONAL SYMPOSIUM ON OBJECT-ORIENTED REAL-TIME DISTRIBUTED COMPUTING, PROCEEDINGS, P101, DOI 10.1109/ISORC.2004.1300335
   Pizlo F, 2008, ISORC 2008: 11TH IEEE SYMPOSIUM ON OBJECT/COMPONENT/SERVICE-ORIENTED REAL-TIME DISTRIBUTED COMPUTING - PROCEEDINGS, P248, DOI 10.1109/ISORC.2008.40
   Pizlo F, 2006, REAL TIM SYST SYMP P, P35, DOI 10.1109/RTSS.2006.9
   Plsek A, 2008, ISORC 2008: 11TH IEEE SYMPOSIUM ON OBJECT/COMPONENT/SERVICE-ORIENTED REAL-TIME DISTRIBUTED COMPUTING - PROCEEDINGS, P281, DOI 10.1109/ISORC.2008.54
   Potanin A., 2005, 3 WORKSH JAV TECHN R
   Raman K, 2005, LECT NOTES COMPUT SC, V3790, P225
   Raman K, 2005, 11th IEEE International Conference on Embedded and Real-Time Computing Systems and Applications, Proceedings, P247, DOI 10.1109/RTCSA.2005.68
   Robertz S.G., 2007, P 5 INT WORKSH JAV T
   Robertz S.G., 2003, FLEXIBLE AUTOMATIC M
   Salagnac G., 2008, THESIS J FOURIER U G
   Salagnac G, 2007, 13TH IEEE INTERNATIONAL CONFERENCE ON EMBEDDED AND REAL-TIME COMPUTING SYSTEMS AND APPLICATIONS, PROCEEDINGS, P73
   Schommer J.F., 2009, P 7 INT WORKSH JAV T, P51
   SIEBERT F, 2006, P 4 INT WORKSH JAV T, P152
   SPEC-Corporation, 1999, JAV SPEC BENCHM TECH
   Tofte M, 1997, INFORM COMPUT, V132, P109, DOI 10.1006/inco.1996.2613
   Wilson PR, 1995, LECT NOTES COMPUT SC, V986, P1
   ZHAO T, 2004, P 25 IEEE INT REAL T
   Zhao T, 2008, SCI COMPUT PROGRAM, V71, P213, DOI 10.1016/j.scico.2008.04.001
NR 74
TC 5
Z9 5
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAY 1
PY 2012
VL 77
IS 5
BP 644
EP 659
DI 10.1016/j.scico.2012.01.002
PG 16
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 917OQ
UT WOS:000302188000005
OA Bronze
DA 2024-07-18
ER

PT J
AU Classen, A
   Boucher, Q
   Heymans, P
AF Classen, Andreas
   Boucher, Quentin
   Heymans, Patrick
TI A text-based approach to feature modelling: Syntax and semantics of TVL
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Feature models; Code; Modelling; Language; Syntax; Semantics; Software
   product lines
AB In the scientific community, feature models are the de-facto standard for representing variability in software product line engineering. This is different from industrial settings where they appear to be used much less frequently. We and other authors found that in a number of cases, they lack concision, naturalness and expressiveness. This is confirmed by industrial experience.
   When modelling variability, an efficient tool for making models intuitive and concise are feature attributes. Yet, the semantics of feature models with attributes is not well understood and most existing notations do not support them at all. Furthermore, the graphical nature of feature models syntax also appears to be a barrier to industrial adoption, both psychological and rational. Existing tool support for graphical feature models is lacking or inadequate, and inferior in many regards to tool support for text-based formats.
   To overcome these shortcomings, we designed TVL, a text-based feature modelling language. In terms of expressiveness. TVL subsumes most existing dialects. The main goal of designing TVL was to provide engineers with a human-readable language with a rich syntax to make modelling easy and models natural, but also with a formal semantics to avoid ambiguity and allow powerful automation. (C) 2010 Elsevier B.V. All rights reserved.
C1 [Classen, Andreas; Boucher, Quentin; Heymans, Patrick] Univ Namur, PReCISE Res Ctr, B-5000 Namur, Belgium.
C3 University of Namur
RP Classen, A (corresponding author), Univ Namur, PReCISE Res Ctr, Rue Grandgagnage 21, B-5000 Namur, Belgium.
EM acs@info.fundp.ac.be; qbo@info.fundp.ac.be; phe@info.fundp.ac.be
FU Walloon Region under the ERDF; NAPLES; IAP; Belgian State; Belgian
   Science Policy; BNB; FNRS
FX We thank our colleagues for their feedback on the language design,
   particularly Ebrahim Abbasi, Arnaud Hubaux, Raphael Michel, Germain
   Saval and Pierre-Yves Schobbens. We also thank Paul Faber who
   implemented most of the TVL Java library and Anthony Cleve for his help
   with the ASF+SDF implementation. This work was partially funded by the
   Walloon Region under the ERDF and the NAPLES project, the IAP Programme,
   Belgian State, Belgian Science Policy under the MoVES project, the BNB
   and the FNRS.
CR Abele A., CVM FRAMEWORK PROTOT, P101
   [Anonymous], 2000, Generative programming: methods, tools, and applications
   [Anonymous], 2000, MODELING LANGUAGES 1
   Antkiewicz M., P OOPSLA 04 ETX WORK
   Batory D., P ICSR 96, P72
   Batory D.S., P SPLC 05, P7
   Benavides D., 2010, P VAMOS 10 ICB RES R, V37
   Benavides D., P VAMOS 07, P129
   Benavides D., P CAISE 05, P491
   Benavides D, 2010, INFORM SYST, V35, P615, DOI 10.1016/j.is.2010.01.001
   Beuche D., SPLC 08, P358
   Boucher Q., INTRO TVL TEXT BASED, P159
   Chen L., P SPLC 09, P81
   Clarke D., P FMSPLE 10
   Classen A., 2010, The TVL Specification"
   Classen A., P VAMOS 09, P51
   Classen A., P FASE 08, P16
   Czarnecki K., VARIABILITY MODELING, P11
   Griss M.L., P ICSR 98, P76
   Heymans P, 2008, IET SOFTW, V2, P281, DOI 10.1049/iet-sen:20070055
   HOLTZ NM, 1988, ENG COMPUT, V3, P183, DOI 10.1007/BF01202140
   Hubaux A., PRELIMINARY REV APPL, P53
   Hubaux A., 2010, 3 INT C SOF IN PRESS
   Kang K. C., 1990, Technical Report
   Kang KC, 1998, ANN SOFTW ENG, V5, P143, DOI 10.1023/A:1018980625587
   Kastner C., P ICSE 09, P311
   Knuth DonaldE., 1971, MATH SYST THEORY, V5, P95
   Mendonca M., 2009, THESIS U WATERLOO
   Mendonca M., P OOPSLA 09, P761
   Mendonca M., P SPLC 09, P231
   Pohl K., 2005, SOFTWARE PRODUCT LIN, V10
   Pratt T. W., 1984, PROGRAMMING LANGUAGE
   Reiser MO, 2009, CORE CONCEPTS COMPOS
   Schobbens P.-Y., P RE 06, P139
   Sinz C., P CP 05, P827
   Tarr P., P ICSE 99, P107
   van Deursen A., 2002, Journal of Computing and Information Technology - CIT, V10, P1, DOI 10.2498/cit.2002.01.01
   VESSEY I, 1991, DECISION SCI, V22, P219, DOI 10.1111/j.1540-5915.1991.tb00344.x
NR 38
TC 91
Z9 100
U1 0
U2 6
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 1
PY 2011
VL 76
IS 12
SI SI
BP 1130
EP 1143
DI 10.1016/j.scico.2010.10.005
PG 14
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 793FX
UT WOS:000292806900005
OA Bronze
DA 2024-07-18
ER

PT J
AU Gil, J
   Lenz, K
AF Gil, Joseph (Yossi)
   Lenz, Keren
TI Simple and safe SQL queries with C plus plus templates
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 6th International Conference on Generative Programming and Component
   Engineering
CY OCT 01-03, 2007
CL Salzburg, AUSTRIA
SP ACM SIGPLAN, ACM SIGSOFT
DE C plus; Template programming; Embedded languages; Domain specific
   languages; Databases; Structural type equivalence; Relational algebra
ID CHECKING
AB Most large software applications rely on an external relational database for storing and managing persistent data. Typically, such applications interact with the database by first constructing strings that represent SQL statements, and then submitting these for execution by the database engine. The fact that these statements are only checked for correctness at runtime is a source for many potential defects, including type and syntax errors and vulnerability to injection attacks.
   The ARARAT system presented here offers a method for dealing with these difficulties by coercing the host C++ compiler to do the necessary checks of the generated strings. A library of templates and preprocessor directives is used to embed in C++ a little language representing an augmented relational algebra formalism. Type checking of this embedded language, carried out by our template library, assures, at compile-time, the correctness and safety of the generated SQL strings. All SQL statements constructed by ARARAT are guaranteed to be syntactically correct, and type safe with respect to the database schema. Moreover, ARARAT statically ensures that the generated statements are immune to all injection attacks.
   The standard techniques of "expression templates" and "compile-time symbolic derivation" for compile-time representation of symbolic structures, are enhanced in our system. We demonstrate the support of a type system and a symbol table lookup of the symbolic structure. A key observation of this work is that type equivalence of instantiated nominally typed generics in C++ (as well as other languages, e.g., JAVA) is structural rather than nominal. This makes it possible to embed the structural type system, characteristic to persistent data management, in the nominal type system of C++.
   For some of its advanced features, ARARAT relies on two small extensions to the standard C++ language: the typeof pseudo operator and the _COUNTER_ preprocessor macro. (C) 2010 Elsevier B.V. All rights reserved.
C1 [Gil, Joseph (Yossi); Lenz, Keren] Technion Israel Inst Technol, Dept Comp Sci, IL-32000 Haifa, Israel.
C3 Technion Israel Institute of Technology
RP Lenz, K (corresponding author), Technion Israel Inst Technol, Dept Comp Sci, IL-32000 Haifa, Israel.
EM yogi@cs.technion.ac.il; lkeren@cs.technion.ac.il
CR Abrahams D., 2004, C DEPTH SERIES
   [Anonymous], 1984, Smalltalk-80: The Interactive Programming Environment
   [Anonymous], C REPORT
   [Anonymous], 2000, Generative programming: methods, tools, and applications
   [Anonymous], 2003, Haskell 98 language and libraries: the revised report
   Atkinson M., 2000, Fully Integrated Data Environments: Persistent Programming Languages, Object Stores, and Programming Environments
   Austern MatthewH., 1998, Generic programming and the STL: Using and extending the C++ Standard Template Library
   BENTLEY J, 1986, COMMUN ACM, V29, P711, DOI 10.1145/6424.315691
   Christensen AS, 2003, LECT NOTES COMPUT SC, V2694, P1
   CODD EF, 1970, COMMUN ACM, V13, P377, DOI 10.1145/357980.358007
   Cook WR, 2005, PROC INT CONF SOFTW, P97
   Copeland G., 1984, SIGMOD Record, V14, P316, DOI 10.1145/971697.602300
   Denney E, 2005, LECT NOTES COMPUT SC, V3676, P17
   Eisenberg A., 1999, SIGMOD Record, V28, P58, DOI 10.1145/344816.344864
   Gil J, 1998, PROCEEDINGS OF THE FOURTH USENIX CONFERENCE ON OBJECT-ORIENTED TECHNOLOGIES AND SYSTEMS, P249
   Gould C, 2004, PROC INT CONF SOFTW, P645, DOI 10.1109/ICSE.2004.1317486
   Groff JamesR., 1999, SQL, the Complete Reference
   Halfond WilliamG. J., 2005, P 20 IEEEACM INT C A, P174, DOI DOI 10.1145/1101908
   Hejlsberg A., 2003, The C# Programming Language
   HOWARD M, 2001, WRITING SECURE CODE
   Järvi J, 2003, SOFTWARE PRACT EXPER, V33, P259, DOI 10.1002/spe.504
   McClure RA, 2005, PROC INT CONF SOFTW, P88
   Meijer Erik, 2006, P ACM SIGMOD INT C M
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Schmidt J. W., 1977, ACM Transactions on Database Systems, V2, P247, DOI 10.1145/320557.320568
   Smith, 2004, APPL DATA STRUCTURES
   Stroustrup B., 1997, The C++ Programming Language
   Stroustrup B., 1994, The Design and Evolution of C++
   Tatsubori M, 2000, LECT NOTES COMPUT SC, V1826, P117
   UMRIGAR ZD, 1994, SIGPLAN NOTICES, V29, P135, DOI 10.1145/185009.185036
   Vandevoorde David, 2002, C++ Templates: The Complete Guide, Portable Documents
   Veldhuizen T., 1995, C++ Report, V7, P26
   Wirth N., 1971, Acta Informatica, V1, P35, DOI 10.1007/BF00264291
   Yao Z, 2005, LECT NOTES COMPUT SC, V3676, P94
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
NR 74
TC 9
Z9 9
U1 0
U2 10
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUL 1
PY 2010
VL 75
IS 7
SI SI
BP 573
EP 595
DI 10.1016/j.scico.2010.01.004
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 603YE
UT WOS:000278243200006
OA Bronze
DA 2024-07-18
ER

PT J
AU Roy, CK
   Cordy, JR
   Koschke, R
AF Roy, Chanchal K.
   Cordy, James R.
   Koschke, Rainer
TI Comparison and evaluation of code clone detection techniques and tools:
   A qualitative approach
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 16th IEEE International Conference on Program Comprehension
CY JUN 10-13, 2008
CL Amsterdam, NETHERLANDS
SP IEEE Comp Soc, IEEE Comp Soc TCSE
DE Software clone; Clone detection; Comparison; Scenario-based evaluation
ID EVOLUTION; PATTERNS; CCFINDER; SYSTEM
AB Over the last decade many techniques and tools for software clone detection have been proposed. In this paper, we provide a qualitative comparison and evaluation of the current state-of-the-art in clone detection techniques and tools, and organize the large amount of information into a coherent conceptual framework. We begin with background concepts, a generic clone detection process and an overall taxonomy of current techniques and tools. We then classify, compare and evaluate the techniques and tools in two different dimensions. First, we classify and compare approaches based on a number of facets, each of which has a set of (possibly overlapping) attributes. Second, we qualitatively evaluate the classified techniques and tools with respect to a taxonomy of editing scenarios designed to model the creation of Type-1, Type-2, Type-3 and Type-4 clones. Finally, we provide examples of how one might use the results of this study to choose the most appropriate clone detection tool or technique in the context of a particular set of goals and constraints. The primary contributions of this paper are: ( 1) a schema for classifying clone detection techniques and tools and a classification of current clone detectors based on this schema, and (2) a taxonomy of editing scenarios that produce different clone types and a qualitative evaluation of current clone detectors based on this taxonomy. (C) 2009 Elsevier B.V. All rights reserved.
C1 [Roy, Chanchal K.; Cordy, James R.] Queens Univ, Sch Comp, Kingston, ON K7L 3N6, Canada.
   [Koschke, Rainer] Univ Bremen, D-2800 Bremen 33, Germany.
C3 Queens University - Canada; University of Bremen
RP Roy, CK (corresponding author), Queens Univ, Sch Comp, Kingston, ON K7L 3N6, Canada.
EM croy@cs.queensu.ca; cordy@cs.queensu.ca;
   koschke@informatik.uni-bremen.de
RI Cordy, James R/G-9736-2011
CR [Anonymous], P DAGST SEM 06301 DU
   [Anonymous], 1991, SOFTWARE-PRACTICE AND EXPERIENCE, DOI DOI 10.1002/SPE.4380210706
   [Anonymous], [No title captured]
   [Anonymous], 2008, PROC CAN C COMP SCI
   Antoniol G, 2001, PROC IEEE INT CONF S, P273, DOI 10.1109/ICSM.2001.972740
   Antoniol G, 2002, INFORM SOFTWARE TECH, V44, P755, DOI 10.1016/S0950-5849(02)00123-4
   Aversano L, 2007, CSMR 2007: 11TH EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, PROCEEDINGS, P81
   Baker BS, 2007, IEEE T SOFTWARE ENG, V33, P608, DOI 10.1109/TSE.2007.70720
   Baker BS, 1998, PROCEEDINGS OF THE USENIX 1998 ANNUAL TECHNICAL CONFERENCE, P179
   BAKER BS, 1995, SECOND WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P86, DOI 10.1109/WCRE.1995.514697
   Baker BS, 2002, J ALGORITHM, V42, P231, DOI 10.1006/jagm.2002.1214
   BAKER BS, 1992, COMPUTING SCIENCE AND STATISTICS : VOL 24, P49
   Baker BS, 1996, J COMPUT SYST SCI, V52, P28, DOI 10.1006/jcss.1996.0003
   Balazinska M., 1999, Proceedings Sixth International Software Metrics Symposium (Cat. No.PR00403), P292, DOI 10.1109/METRIC.1999.809750
   Balint M, 2006, INT C PROGRAM COMPRE, P56, DOI 10.1109/ICPC.2006.25
   BASIT H A, 2007, P 6 JOINT M EUR SOFT, P513, DOI DOI 10.1145/1287624.1287698
   Baxter ID, 2004, PROC INT CONF SOFTW, P625, DOI 10.1109/ICSE.2004.1317484
   Baxter ID, 1998, PROC IEEE INT CONF S, P368, DOI 10.1109/ICSM.1998.738528
   Bellon S., 2002, THESIS U STUTTGART
   Bellon S, 2007, IEEE T SOFTWARE ENG, V33, P577, DOI 10.1109/TSE.2007.70725
   Bruntink M, 2005, IEEE T SOFTWARE ENG, V31, P804, DOI 10.1109/TSE.2005.114
   BULYCHEV P, 2008, SPRING YOUNG RES C S, P4
   BULYCHEV P, CLONEDIGGER RESULTS
   Burd E, 2002, SCAM 2002: SECOND IEEE INTERNATIONAL WORKSHOP ON SOURCE CODE ANALYSIS MANIPULATION, PROCEEDINGS, P36, DOI 10.1109/SCAM.2002.1134103
   Casazza G, 2001, FIRST IEEE INTERNATIONAL WORKSHOP ON SOURCE CODE ANALYSIS AND MANIPULATION, PROCEEDINGS, P90, DOI 10.1109/SCAM.2001.972670
   Church K., 1993, J AM STAT ASSOC, V2, P153, DOI [DOI 10.1080/10618600.1993, 10.2307/1390697, DOI 10.2307/1390697]
   COOPER K, 1999, P ACM SIGPLAN C PROG, P139
   Cordy JR, 2006, SCI COMPUT PROGRAM, V61, P190, DOI 10.1016/j.scico.2006.04.002
   CORDY JR, 2004, P CASCON 2004 14 IBM, P29
   Dagenais M, 1998, P 8 IBM CTR ADV STUD, P192
   Davey N., 1995, International Journal of Applied Software Technology, V1, P219
   De Lucia A, 2005, PROG COMPREHEN, P333, DOI 10.1109/WPC.2005.42
   De Sutter B, 2002, ACM SIGPLAN NOTICES, V37, P275, DOI 10.1145/583854.582445
   Debray SK, 2000, ACM T PROGR LANG SYS, V22, P378, DOI 10.1145/349214.349233
   Deissenboeck F, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P603, DOI 10.1145/1368088.1368172
   Di Lucca G. A, 2001, P 7 IEEE WORKSH EMP, P107
   Di Lucca GA, 2002, P INT COMP SOFTW APP, P481, DOI 10.1109/CMPSAC.2002.1045051
   Ducasse S, 2006, J SOFTW MAINT EVOL-R, V18, P37, DOI 10.1002/smr.317
   Ducasse S., 1999, Proceedings IEEE International Conference on Software Maintenance - 1999 (ICSM'99). `Software Maintenance for Business Change' (Cat. No.99CB36360), P109, DOI 10.1109/ICSM.1999.792593
   Evans WS, 2007, 14TH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P150, DOI 10.1109/WCRE.2007.15
   Falke R, 2008, EMPIR SOFTW ENG, V13, P601, DOI 10.1007/s10664-008-9073-9
   Fowler M., 2000, Refactoring: Improving the Design of Existing Code
   FRASER CW, 1984, P SIGPLAN 84 S COMP, P117
   Gabel M, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P321, DOI 10.1145/1368088.1368132
   Gitchell D., 1999, SIGCSE Bulletin, V31, P266, DOI 10.1145/384266.299783
   GODE N, 2008, THESIS U BREMEN GERM
   Guo J, 2008, WORK CONF REVERSE EN, P91, DOI 10.1109/WCRE.2008.12
   Higo Y, 2002, LECT NOTES COMPUT SC, V2559, P185
   Jablonski Patricia., 2007, P WORKSHOP ECLIPSE T, P16
   Jiang LX, 2007, PROC INT CONF SOFTW, P96
   Johnson J., 1994, Proceedings of Conference of the Centre for Advanced Studies on Collaborative research, (CASCON), P171
   Johnson J. H., 1993, Proceedings CASCON '93, P171
   JOHNSON JH, 1994, INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE, PROCEEDINGS, P120, DOI 10.1109/ICSM.1994.336783
   JUERGENS E, 2009, P 31 INT C IN PRESS, P11
   Juillerat N., 2006, PROC 3 WORKSHOP SOFT, V2006, P63
   Kamiya T, 2002, IEEE T SOFTWARE ENG, V28, P654, DOI 10.1109/TSE.2002.1019480
   Kapser C, 2004, 7TH INTERNATIONAL WORKSHOP ON PRINCIPLES OF SOFTWARE EVOLUTION, P85, DOI 10.1109/IWPSE.2004.1334772
   Kapser CJ, 2008, EMPIR SOFTW ENG, V13, P645, DOI 10.1007/s10664-008-9076-6
   KIENLE HM, 2003, P 2 INT WORKSH DET S, P2
   Kim M, 2004, 2004 INTERNATIONAL SYMPOSIUM ON EMPIRICAL SOFTWARE ENGINEERING, PROCEEDINGS, P83
   Kim Miryung, 2005, ESEC/FSE- 13), P187, DOI [10.1145/1081706.1081737, DOI 10.1145/1081706.1081737]
   Komondoor R, 2001, LECT NOTES COMPUT SC, V2126, P40
   Kontogiannis K, 1997, PROCEEDINGS OF THE FOURTH WORKING CONFERENCE ON REVERSE ENGINEERING, P44, DOI 10.1109/WCRE.1997.624575
   Kontogiannis K. A., 1996, Automated Software Engineering, V3, P77, DOI 10.1007/BF00126960
   Kosaraju SR, 1995, AN S FDN CO, P631, DOI 10.1109/SFCS.1995.492664
   Koschke R, 1998, FIFTH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P241, DOI 10.1109/WCRE.1998.723194
   Koschke R., 2008, SOFTWARE EVOLUTION, P15, DOI DOI 10.1007/978-3-540-76440-3_2
   Koschke R, 2006, WORK CONF REVERSE EN, P253
   Koschke R, 2008, 2008 FRONTIERS OF SOFTWARE MAINTENANCE, P119, DOI 10.1109/FOSM.2008.4659255
   KRAFT N, 2008, P 20 INT C SOFTW ENG, P6
   Krinke J, 2001, EIGHTH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P301, DOI 10.1109/WCRE.2001.957835
   LANDWERTH I, CLONE DETECTIVE
   Lanubile F, 2003, SEVENTH EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, PROCEEDINGS, P379, DOI 10.1109/CSMR.2003.1192447
   LEE S, 2005, P OBJ OR PROGR SYST, P140
   Leitao AM, 2004, SOFTWARE QUAL J, V12, P361, DOI 10.1023/B:SQJO.0000039793.31052.72
   Li H, 2009, P 2009 ACM SIGPLAN W, P169
   Li ZM, 2006, IEEE T SOFTWARE ENG, V32, P176, DOI 10.1109/TSE.2006.28
   Liu Chao, 2006, Proc. 12th ACMSIGKDD Int'l Con. on Knowledge Discovery and Data Mining (KDD 06), P872, DOI DOI 10.1145/1150402.1150522
   LIU H, 2006, P 13 AS PAC SOFTW EN, P269
   Livieri S, 2007, PROC INT CONF SOFTW, P106
   MANBER U, 1994, PROCEEDINGS OF THE WINTER 1994 USENIX CONFERENCE, P1
   Marcus A, 2001, 16TH ANNUAL INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING (ASE 2001), PROCEEDINGS, P107, DOI 10.1109/ASE.2001.989796
   Mayrand J, 1996, INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE, PROCEEDINGS, P244, DOI 10.1109/ICSM.1996.565012
   MCCREIGHT EM, 1976, J ACM, V23, P262, DOI 10.1145/321941.321946
   Merlo E, 2002, P INT COMP SOFTW APP, P421, DOI 10.1109/CMPSAC.2002.1045038
   Merlo E, 2004, PROC IEEE INT CONF S, P412, DOI 10.1109/ICSM.2004.1357826
   Moonen L, 2001, EIGHTH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P13, DOI 10.1109/WCRE.2001.957806
   Nasehi SM, 2007, PROCEEDINGS OF THE IASTED INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P192
   Patenaude JF, 1999, PROG COMPREHEN, P49, DOI 10.1109/WPC.1999.777743
   Rajapakse DC, 2007, PROC INT CONF SOFTW, P116
   Ricca F, 2003, PROG COMPREHEN, P207
   Rieger M., 2005, THESIS U BERN SWITZE
   Roy CK, 2008, WORK CONF REVERSE EN, P81, DOI 10.1109/WCRE.2008.54
   Roy CK, 2008, INT C PROGRAM COMPRE, P153, DOI 10.1109/ICPC.2008.42
   ROY CK, 2009, P 4 INT WORK IN PRES, P10
   ROY CK, 2009, J SOFTWARE MAI UNPUB, P23
   ROY CK, WCRE 08 CLONES
   Roy J. R., 2007, QUEENS SCH COMPUTING, V541, P64
   RYSSELBERGHE F, 2003, P INT WORKSH EV LARG, P12
   SAGER T, 2006, P 2006 INT WORKSH MI, P65
   Synytskyy N, 2003, FIFTH IEEE INTERNATIONAL WORKSHOP ON WEB SITE EVOLUTION THEME: ARCHITECTURE, PROCEEDINGS, P49, DOI 10.1109/WSE.2003.1234008
   Tairas R., 2006, P 44 ANN SE REG C, P679, DOI 10.1145/1185448.1185597
   Ueda Y, 2002, APSEC 2002: NINTH ASIA PACIFIC SOFTWARE ENGINEERING CONFERENCE, P327, DOI 10.1109/APSEC.2002.1183002
   Van Rysselberghe F, 2004, 19TH INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING, PROCEEDINGS, P336, DOI 10.1109/ASE.2004.1342759
   Wahler V, 2004, FOURTH IEEE INTERNATIONAL WORKSHOP ON SOURCE CODE ANALYSIS AND MANIPULATION, PROCEEDINGS, P128
   Wettel R, 2005, SEVENTH INTERNATIONAL SYMPOSIUM ON SYMBOLIC AND NUMERIC ALGORITHMS FOR SCIENTIFIC COMPUTING, PROCEEDINGS, P63
   YAMASHINA T, 2008, NAISTISTR2007011 GRA
   [No title captured]
   TOOL CLONE DETECTIVE
   TOOL DUPMAN
   TOOL SIMSCAN
   PMDS CPD
   TOOL SIMIAN
NR 113
TC 526
Z9 561
U1 0
U2 21
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAY 1
PY 2009
VL 74
IS 7
SI SI
BP 470
EP 495
DI 10.1016/j.scico.2009.02.007
PG 26
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 447XG
UT WOS:000266224700006
OA Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Gitzel, R
   Korthaus, A
   Schader, M
AF Gitzel, Ralf
   Korthaus, Axel
   Schader, Martin
TI Using established Web Engineering knowledge in model-driven approaches
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Model-Driven Development (MDD); Model-Driven Architecture (MDA); Web
   applications; Web design languages; Web application frameworks; code
   generation
AB A lot of research is currently conducted in the field of Model-Driven Development (MDD), especially regarding its applications to specific domains. Another field that enjoys a great amount of popularity is the Web. As a result, one of the domains MDD is applied to quite frequently is that of Web Applications. However, Web Engineering differs significantly from general Software Engineering and a number of well-established non-MDD solutions already exist in that field. This leads to several interesting questions, which have been left unanswered so far. In this paper, we address this shortcoming by analyzing whether the problems encountered in the field of Web Engineering can really be solved with MDD approaches. We also answer the questions whether MDD will be able to solve these problems better and/or cheaper than traditional Web Engineering approaches and whether the current Web MDD propositions live up to this potential. While answering these questions, we will show that there exists a great synergy between the two groups and that the success of MDD in the Web domain will depend on exploiting the strengths of both. (C) 2006 Elsevier B.V. All rights reserved.
C1 Univ Mannheim, Dept Informat Syst, D-6800 Mannheim 1, Germany.
C3 University of Mannheim
RP Gitzel, R (corresponding author), Mannheim Business Sch, L 5,5, D-68131 Mannheim, Germany.
EM ralf_gitzel@hotmail.de; korthaus@wifo3.uni-mannheim.de;
   mscha@wifo3.uni-mannheim.de
RI Korthaus, Axel/A-1471-2011
OI Korthaus, Axel/0000-0002-4150-8607
CR ALBIN ST, 2003, ART SOFTWARE ARCH DE
   [Anonymous], 2 INT WORKSH WEB OR
   ATKINSON C, 2006, INT WORKSH SOFTW MOD
   Baresi L, 2000, LECT NOTES COMPUT SC, V1921, P89
   BARRACUDA, 2002, SURVEYING LANDSCAPE
   BARTA R, 2006, JESSICA OBJECT ORIEN
   Becker SA, 2002, IEEE MULTIMEDIA, V9, P38, DOI 10.1109/MMUL.2002.1041947
   Becker SA, 2001, IEEE SOFTWARE, V18, P54, DOI 10.1109/52.903167
   Beigbeder SM, 2004, LECT NOTES COMPUT SC, V3140, P300
   BEZIVIN J, 2006, HYPE HOPE REALITY IN
   Booch Grady., 2004, MDA J
   Borges J., 1996, Conference Companion on Human Factors in Computing Systems: Common Ground, April 1996, Vancouver, Canada, P277, DOI DOI 10.1145/257089.257320
   CATARCI T, 2001, IEEE MULTIMEDIA, P66
   CERI S, 2000, P WWW9 C AMST
   CHAN Y, 2000, P 2000 C CTR ADV STU
   CLARK J, 2006, XSL TRANSFORMATIONS
   Constantine LL, 2002, IEEE SOFTWARE, V19, P42, DOI 10.1109/52.991331
   COOK S, 2004, DOMAIN SPECIFIC MODE
   COWAN DD, 1995, IEEE T SOFTW ENG, V21
   CZARNECKI K, 2006, 2 OOPSLA WORKSH GEN
   DEITSCH A, 2001, JAVA INTERNATIOLIZAT
   DEMICHIEL LG, 2003, SUN MICROSYSTEMS
   Deshpande Y., 2001, IEEE Multimedia, V8, P82, DOI 10.1109/93.917974
   DETROYER OMF, 1998, P 7 INT WORLD WID WE
   El Kaim W, 2003, LECT NOTES COMPUT SC, V2817, P299
   FILMAN RE, 2004, IEEE INTERNET COMPUT, P4
   Fraternali P, 2000, ACM T INFORM SYST, V18, P323, DOI 10.1145/358108.358110
   FROHLICH P, 2006, META MODELING HYPERM
   GARRETT AJJ, 2006, NEW APPROACH WEB APP
   GARZOTTO F, 1993, ACM T INFORM SYST, V11, P1, DOI 10.1145/151480.151483
   GARZOTTO F, 1996, P HYP 96 WASH, P93
   GARZOTTO F, 1995, COMMUNICATIONS ACM, V38
   Gellersen HW, 1999, IEEE INTERNET COMPUT, V3, P60, DOI 10.1109/4236.747323
   GELLERSEN HW, 1997, 6 INT WWW C SANT CLA, P1429
   Ginige A., 2001, IEEE MULTIMEDIA
   GITZEL R, 2003, 21 IASTED INT MUL C
   GLASS R, 2004, IEEE SOFTWARE
   GLASS R, 2002, PROJECT RETROSPECTIV
   GLASS R, 2004, IEEE SOFTWARE, P111
   Gómez J, 2004, LECT NOTES COMPUT SC, V3140, P611
   GREENFIELD J, 2004, SOFWARE FACTORIES AS
   Halasz F., 1987, Proceedings of the ACM Conference on Human Factors in Computing Systems and Graphics Interface (CHI+GI'87), P45
   HAYWOOD MDA, 2004, NICE IDEA SHAME
   Heckel R, 2003, LECT NOTES COMPUT SC, V2621, P170
   Hofstede G., 2004, Geert Hofstede cultural dimensions
   HOLZSCHLAG M, 2004, COLOR WORLD
   HORTON W, 1995, ACM SIGGRAPH COMPUTE
   Houben GJ, 2003, LECT NOTES COMPUT SC, V2722, P529
   ISAKOWITZ T, 1998, IS9818
   Ivory M, 2002, IEEE INTERNET COMPUT, V6, P56, DOI 10.1109/4236.991444
   IVORY MY, 2001, P SIGCHI01
   KAMM C, 2002, OBJEKTSPEKTRUM
   KEEP C, 1993, ELECT LADYRINTH
   KENT S, 2002, LNCS, V2335, P286, DOI DOI 10.1007/3-540-47884-1
   KOCH N, 1999, 9905 LUDW MAX U MUNC
   KOLAWA A, 2002, BULLETPROFFING WEB A
   KUHNE T, 2003, THEMA FORSCHUNG 1200, P116
   MARCUS A, 2000, P 6 C HUM FACT WEB 2
   MELLOR S, 2002, EXECUTABLE UML FDB M
   Mercay J., 2002, BOOST STRUTS XSLT XM
   Miller J., MDA GUIDE VERSION 10
   Muller PA, 2003, LECT NOTES COMPUT SC, V2863, P220
   Neumann PG, 2004, COMMUN ACM, V47, P112
   NEUWIRTH CM, 2002, IEEE INT COMPUT, P44
   NIELSEN J, 2003, TOP 10 WEB DESIGN MI
   NIELSEN J, 2006, ORIGINAL TOP 10 MIST
   NIELSEN J., 2002, TOP 10 WEB DESIGN MI
   Nielsen Jakob, 2006, Designing Web Usability
   Offutt J, 2002, IEEE SOFTWARE, V19, P25, DOI 10.1109/52.991329
   PAOLINI P, 1999, P IEEE INT C MULT CO
   PUDER A, 2004, P 3 INT S INF COMM T, P8
   ROSSON MB, 2002, USABILITY ENGN SCENA
   Roth E.M., 2002, Encyclopedia of Software Engineering, V2nd, P163, DOI [10.1002/0471028959.sof045, DOI 10.1002/0471028959.SOF045]
   ROTH M, 2003, JAVASERVER PAGES SPE
   SCHMID HA, 2004, IEEE INTERNET COMPUT
   SCHWABE D, 1998, THEOR PRACT OBJ SYST, P4
   Selic B, 2003, IEEE SOFTWARE, V20, P19, DOI 10.1109/MS.2003.1231146
   SELIC B, 2004, UML NICHT SCHWIERIGE
   Shneiderman Ben., 2002, Leonardo's Laptop: Human Needs and the New Computing Technologies
   SMITH RP, 2004, WORKSH MODEL DRIVEN
   Sutcliffe A, 2004, COMMUN ACM, V47, P31, DOI 10.1145/1015864.1015883
   THENG YL, 2003, INFORM MODELING INTE
   TRIGG RH, 1988, ACM T INFORM SYST, V6, P398, DOI 10.1145/58566.59299
   VOLTER M, 2004, MODELLGETRIEBENE SOF, P14
   WANG D, 2004, JAVAMAGAZIN 92004 SO
NR 85
TC 15
Z9 16
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD APR 30
PY 2007
VL 66
IS 2
BP 105
EP 124
DI 10.1016/j.scico.2006.09.001
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 169OK
UT WOS:000246601300002
DA 2024-07-18
ER

PT J
AU Gibbons, J
AF Gibbons, Jeremy
TI Metamorphisms: Streaming representation-changers
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 7th International Conference on Mathematics of Program Construction
CY JUL 12-14, 2004
CL Stirling, SCOTLAND
SP Cornell Univ, Univ Stirling, Formal Aspects Comp Sci, Specialist Grp
DE folds; unfolds; fusion; streaming; online algorithms; data
   representations; conversion
AB Unfolds generate data structures, and folds consume them. A hylomorphism is a fold after an unfold, generating then consuming a virtual data structure. A metamorphism is the opposite composition, an unfold after a fold; typically, it will convert from one data representation to another. In general, metamorphisms are less interesting than hylomorphisms: there is no automatic fusion to deforest the intermediate virtual data structure. However, under certain conditions fusion is possible: some of the work of the unfold can be done before all of the work of the fold is complete. This permits streaming metamorphisms, and among other things allows conversion of infinite data representations. We present a theory of metamorphisms and outline some examples. (c) 2006 Elsevier B.V. All rights reserved.
C1 Univ Oxford, Comp Lab, Oxford OX1 3QD, England.
C3 University of Oxford
RP Gibbons, J (corresponding author), Univ Oxford, Comp Lab, Pks Rd, Oxford OX1 3QD, England.
EM jeremy.gibbons@comlab.ox.ac.uk
OI Gibbons, Jeremy/0000-0002-8426-9917
FU EPSRC [EP/E02128X/1] Funding Source: UKRI
CR [Anonymous], 1990, RES TOPICS FUNCTIONA
   [Anonymous], 2003, Haskell 98 language and libraries: the revised report
   Augusteijn L, 1999, LECT NOTES COMPUT SC, V1608, P1
   BEELER M, 1972, AIM, V239
   BENSON R, 2004, JSR, V173
   Bird R, 2003, LECT NOTES COMPUT SC, V2638, P1
   BIRD R, 1996, OEGE MOOR ALGEBRA PR
   Bird R., 1988, INTRO FUNCTIONAL PRO
   Bird R., 1998, INTRO FUNCTIONAL PRO, V2nd
   BOITEN E, 1991, 9126 U NIJM DEP INF
   Edalat A., 1997, ELECTRON NOTES THEOR, V6, P119, DOI [10.1016/S1571-0661(05)80166-5, DOI 10.1016/S1571-0661(05)80166-5]
   Gamma E., 1994, Design patterns: Elements of reusable object-oriented software
   Gibbons J, 2005, FUND INFORM, V66, P353
   Gibbons J, 2004, LECT NOTES COMPUT SC, V3125, P142
   Gibbons J, 2002, LECT NOTES COMPUT SC, V2297, P149
   Gibbons J., 1998, Mathematics of Program Construction. 4th International Conference, MPC'98. Proceedings, P207, DOI 10.1007/BFb0054292
   Gibbons J, 2000, SCI COMPUT PROGRAM, V37, P37, DOI 10.1016/S0167-6423(99)00022-2
   GIBBONS J, 2006, AM MATH MONTHLY, V113
   GIBBONS J, 1991, TECHNICAL MONOGRAPH
   Gibbons J., 2003, CHAP ORIGAMI PROGRAM, P41
   Gibbons J., INT C FUNCTIONAL PRO, P273, DOI 10.1145/289423.289455
   GOSPER B, 1981, UNPUB CONTINUED FRAC
   HAGINO T, 1987, LECT NOTES COMPUT SC, V283, P140
   HOARE CAR, 1962, COMPUT J, V5, P10, DOI 10.1093/comjnl/5.1.10
   HUGHES J, 1989, COMPUT J, V32, P98, DOI 10.1093/comjnl/32.2.98
   HUGHES J, 2003, INT C FUNCT PROGR, P239
   Hutton G., 1996, Journal of Functional Programming, V6, P181, DOI 10.1017/S0956796800001623
   JACKSON M, 1975, PRINCIPLES PROGRAM D
   Jacobs B, 1995, LECT NOTES COMPUT SC, V936, P245
   JONES SLP, 1984, 1530 INDRA U COLL LO
   Knuth D., 1968, The Art of Computer Programming
   Knuth D. E., 1969, The Art of Computer Programming, Vol. 2, Seminumerical Algorithms, V2
   Lester D, 2001, P S COMP ARITHM, P163, DOI 10.1109/ARITH.2001.930116
   LESTER D, 1991, GALSG FUNCT PROGR WO, P225
   MALCOLM G, 1990, SCI COMPUT PROGRAM, V14, P255, DOI 10.1016/0167-6423(90)90023-7
   Meertens L., 1992, Formal Aspects of Computing, V4, P413, DOI 10.1007/BF01211391
   MEIJER E, 1991, LECT NOTES COMPUT SC, V523, P124
   PARDO A, 2002, GENERIC PROGRAMMING, P49
   POTTS PJ, 1998, THESIS MPERIAL COLL
   RABINOWITZ S, 1995, AM MATH MON, V102, P195, DOI 10.2307/2975006
   Reynolds J. C., 1998, Higher-Order and Symbolic Computation, V11, P363, DOI 10.1023/A:1010027404223
   SULLIVAN L.H., 1896, TALL OFFICE BUILDING
   Swierstra D., 1993, LECT NOTES COMPUTER, V755, P355
   Vene V., 1998, Proceedings of the Estonian Academy of Sciences. Physics, Mathematics, V47, P147
   VUILLEMIN JE, 1990, IEEE T COMPUT, V39, P1087, DOI 10.1109/12.57047
   WADLER P, 1990, THEOR COMPUT SCI, V73, P231, DOI 10.1016/0304-3975(90)90147-A
   WITTEN IH, 1987, COMMUN ACM, V30, P520, DOI 10.1145/214762.214771
NR 47
TC 9
Z9 9
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR 15
PY 2007
VL 65
IS 2
SI SI
BP 108
EP 139
DI 10.1016/j.scico.2006.01.006
PG 32
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 144YK
UT WOS:000244832300003
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Hayes, IJ
AF Hayes, Ian J.
TI Procedures and parameters in the real-time program refinement calculus
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE procedures; parameters; real-time programming; refinement calculus;
   machine independent; platform independent; auxiliary variables;
   auxiliary parameters; deadlines
AB The real-time refinement calculus is a formal method for the systematic derivation of real-time programs from real-time specifications in a style similar to the non-real-time refinement calculi of Back and Morgan. In this paper we extend the real-time refinement calculus with procedures and provide refinement rules for refining real-time specifications to procedure calls. A real-time specification can include constraints on, not only what outputs are produced, but also when they are produced. The derived programs can also include time constraints oil when certain points in the program must be reached; these are expressed in the form of deadline commands. Such programs are machine independent. An important consequence of the approach taken is that, not only are the specifications machine independent, but the whole refinement process is machine independent. To implement the machine independent code on a target machine one has a separate task of showing that the compiled machine code will reach all its deadlines before they expire.
   For real-time programs, externally observable input and output variables are essential. These differ from local variables in that their values are observable over the duration of the execution of the program. Hence procedures require input and output parameter mechanisms that are references to the actual parameters so that changes to external inputs are observable within the procedure and changes to output parameters are externally observable. In addition, we allow value and result parameters. These may be auxiliary parameters, which are used for reasoning about the correctness of real-time programs as well as in the expression of timing deadlines, but do not lead to any code being generated for them by a compiler. (c) 2006 Elsevier B.V. All rights reserved.
C1 Univ Queensland, Sch Informat Technol & Elect Engn, Brisbane, Qld 4072, Australia.
C3 University of Queensland
RP Hayes, IJ (corresponding author), Univ Queensland, Sch Informat Technol & Elect Engn, Brisbane, Qld 4072, Australia.
EM Ian.Hayes@itee.uq.edu.au
OI Hayes, Ian/0000-0003-3649-392X
CR [Anonymous], 1992, The Z Notation
   Back R.-J., 1998, Refinement Calculus
   Barnes J., 1997, High-Integrity Ada: The SPARK Approach
   Burns A, 1998, LECT NOTES COMPUT SC, V1411, P263, DOI 10.1007/BFb0055011
   CHAPMAN R, 1994, ACM WORKSH LANG COMP
   Fidge C., 1999, IEE Proceedings-Software, V146, P104, DOI 10.1049/ip-sen:19990407
   GROVES L, 1996, BCS FACS 7 REF WORKS
   GRUNDON S, 1998, COMPUTER SCI 98, P575
   Hayes I., 2001, IEE Proceedings-Software, V148, P175, DOI 10.1049/ip-sen:20010834
   Hayes I, 2002, SCI COMPUT PROGRAM, V43, P161, DOI 10.1016/S0167-6423(02)00024-2
   Hayes I, 2003, MG COMP SCI, P109
   Hayes I, 2000, SEVENTH ASIA-PACIFIC SOFTWARE ENGINEERING CONFERENCE, PROCEEDINGS, P16, DOI 10.1109/APSEC.2000.896678
   Hayes I, 2000, LECT NOTES COMPUT SC, V1926, P170
   Hayes I. J., 1995, Formal Aspects of Computing, V7, P329, DOI 10.1007/BF01211077
   Hayes I. J., 1993, SPECIFICATION CASE S
   Hayes IJ, 2003, LECT NOTES COMPUT SC, V2885, P1
   Hayes IJ, 2001, ACTA INFORM, V37, P385, DOI 10.1007/PL00013311
   HAYES IJ, 1997, EL WORKSH COMP
   Hehner E.C.R., 1993, A Practical Theory of Programming
   HEHNER ECR, 1989, LECT NOTES COMPUT SC, V375, P36
   Hesselink W. H., 1999, Formal Aspects of Computing, V11, P616, DOI 10.1007/s001659970002
   Hoare C. A. R., 1971, Lecture notes in mathematics CLXXXVIII. Symposium on semantics of algorithmic languages, P102
   Hoare C. A. R., 1989, Essays in Computing Science
   Hooman J, 2000, REAL-TIME SYST, V19, P61, DOI 10.1023/A:1008188323123
   Lermer K., 2003, Formal Aspects of Computing, V15, P319, DOI 10.1007/s00165-003-0019-0
   Lermer K, 2005, THEOR COMPUT SCI, V346, P3, DOI 10.1016/j.tcs.2005.08.003
   LERMER K, 2003, ENTCS, V78, P1
   LIM SS, 1995, IEEE T SOFTWARE ENG, V21, P593, DOI 10.1109/32.392980
   MORGAN C, 1988, SCI COMPUT PROGRAM, V11, P17, DOI 10.1016/0167-6423(88)90062-7
   Morgan C., 1994, On the Refinement Calculus
   Morgan Carroll, 1994, Programming from specifications
   PARK CY, 1993, REAL-TIME SYST, V5, P31, DOI 10.1007/BF01088696
   SHAW AC, 1989, IEEE T SOFTWARE ENG, V15, P875, DOI 10.1109/32.29487
   Staples M., 2000, Formal Aspects of Computing, V12, P372, DOI 10.1007/s001650070010
   Wildman L., 2003, Formal Aspects of Computing, V15, P258, DOI 10.1007/s00165-003-0009-2
NR 35
TC 1
Z9 1
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 1
PY 2007
VL 64
IS 3
BP 286
EP 311
DI 10.1016/j.scico.2006.06.002
PG 26
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 122SH
UT WOS:000243246500003
OA Bronze
DA 2024-07-18
ER

PT J
AU Murakami, M
AF Murakami, Masaki
TI A formal model of concurrent systems based on bipartite directed acyclic
   graph
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 4th International Workshop on Systems/Software Architectures
CY JUN, 2005
CL Las Vegas, NV
DE pi-calculus; concurrency; scope equivalence
AB This paper presents a formal model of concurrent systems to represent scopes of communication channel names precisely. The model presented here is an extension of a multiset rewriting system. A bipartite directed acyclic graph represents a concurrent system consisting of a number of processes and messages. Each process or message corresponds to a source node of the graph. Names used for communication channel in the system are sink nodes. The edges of the graph represent the scopes of the names in the system. The operational semantics of the system is given as a labeled transition system. The model presented here makes it possible to represent local names that their scope are not nested. We define an equivalence relation that two systems are equivalent not only in their behavior but extrusions of scopes of names. (c) 2006 Elsevier B.V. All rights reserved.
C1 Okayama Univ, Grad Sch Nat Sci & Technol, Dept Informat & Commun Syst, Okayama 7000082, Japan.
C3 Okayama University
RP Murakami, M (corresponding author), Okayama Univ, Grad Sch Nat Sci & Technol, Dept Informat & Commun Syst, 3-3-3 Tsushima Naka, Okayama 7000082, Japan.
EM murakami@momo.it.okayama-u.ac.jp
CR BERRY G, 1990, CONFERENCE RECORD OF THE SEVENTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P81, DOI 10.1145/96709.96717
   Fournet Cedric, 1996, P CONCUR 96
   LAFONT Y, 1990, CONFERENCE RECORD OF THE SEVENTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P95, DOI 10.1145/96709.96718
   Milner R., 2001, CONCUR 2001 - Concurrency Theory. 12th International Conference. Proceedings (Lecture Notes in Computer Science Vol.2154), P16
   Milner R., 1999, Communication and Mobile Systems: the -calculus
   Murakami M, 2004, J SYST ARCHITECT, V50, P417, DOI 10.1016/j.sysarc.2003.09.009
   MURAKAMI M, 2005, P INT C SOFTW ENG RE, V1, P80
   MURAKAMI M, 2002, P SCI 02, V11, P343
   ODERSKY M, 2000, LECT NOTES COMPUTER, V1782
   SANGIORGI D, 2001, PIECALCULUS THEORY M
   UEDA K, 2003, P PPL 03 JSSST, P20
NR 11
TC 5
Z9 5
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN
PY 2006
VL 61
IS 1
BP 38
EP 47
DI 10.1016/j.scico.2005.11.004
PG 10
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 043QP
UT WOS:000237616700005
DA 2024-07-18
ER

PT J
AU Shin, ME
   Xu, Y
   Paniagua, F
   An, JH
AF Shin, Michael E.
   Xu, Yan
   Paniagua, Fernando
   An, Jung Hoon
TI Detection of anomalies in software architecture with connectors
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 4th International Workshop on Systems/Software Architectures
CY JUN, 2005
CL Las Vegas, NV
DE anomaly detection; software architecture; connector; component;
   notification message
AB This paper describes an approach to detecting anomalies in a software architectural style that is structured with components and connectors between the components. Each component is designed with tasks (concurrent or active objects), connectors between tasks, and passive objects accessed by tasks. Anomalies in the software architecture are detected twofold by each Component Monitor. which supervises objects in a component, and by a System Monitor, which monitors message communications between components. The monitors encapsulate the specifications of objects being monitored, which are represented using statecharts. The execution of statecharts in the monitors depends on notification messages from connectors between tasks, passive objects accessed by tasks in a component, and connectors between components. (c) 2006 Elsevier B.V. All rights reserved.
C1 Texas Tech Univ, Dept Comp Sci, Lubbock, TX 79409 USA.
C3 Texas Tech University System; Texas Tech University
RP Shin, ME (corresponding author), Texas Tech Univ, Dept Comp Sci, Lubbock, TX 79409 USA.
EM Michael.Shin@ttu.edu; yan.xu@ttu.edu; fernafldo.paniagua@ttu.edu;
   jh.an@ttu.edu
CR [Anonymous], 1996, Pattern oriented software architecture: a system of patters
   Booch Grady, 1999, UNIFIED MODELING LAN, DOI DOI 10.1007/3-540-40011-7_10
   Felber P., 1999, Proceedings of the International Symposium on Distributed Objects and Applications, P132, DOI 10.1109/DOA.1999.794001
   FORUM HP, 2001, PROVIDING OPEN ARCHI
   Garlan David., 2003, ARCHITECTING DEPENDA
   Gomaa H., 2000, DESIGNING CONCURRENT
   GOMAA H, 2001, SSR 01
   GUERRA RPA, 2002, WORSKH ARCH DEP SYST
   Kim KH, 2000, IEEE T KNOWL DATA EN, V12, P145, DOI 10.1109/69.842258
   MILLS K, 2004, P 4 INT WORKSH SOFTW
   Rumbaugh James, 1999, The unified modeling language reference manual
   Shaw M., 1996, SOFTWARE ARCHITECTUR
   Shin ME, 2005, SCI COMPUT PROGRAM, V57, P27, DOI 10.1016/j.scico.2004.10.003
   TORRESPOMALES W, 2000, NASA TM 2000 210616
NR 14
TC 3
Z9 4
U1 1
U2 1
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN
PY 2006
VL 61
IS 1
BP 16
EP 26
DI 10.1016/j.scico.2005.11.002
PG 11
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 043QP
UT WOS:000237616700003
DA 2024-07-18
ER

PT J
AU Assmann, U
AF Assmann, U
TI Architectural styles for active documents
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
AB This paper proposes several novel architectural styles for active documents. Active documents are documents that contain not only data, but also servlets, applets, expressions in spreadsheet languages, and other forms of software. To grasp the different forms of architectures, several novel concepts are defined. Invasive document composition is a type-safe form of template expansion and extension; transconsistency is a form of transclusion for architectures; and staged architectures provide a form of staged programming on the architectural level. With these concepts, it is possible to explain the architectures of many document processing applications for Web and office, and we define the architectural styles of wizard-parametrized, script-parametrized, transconsistent, stream-based, and staged active documents. Finally, we give a hypothesis of active document composition: it consists of four elements, namely, explicit architecture, invasiveness, transconsistency, and staging. On the basis of this hypothesis, many applications in Web engineering and document processing get a common background, and can be compared and simplified. (c) 2004 Elsevier B.V. All rights reserved.
C1 Linkoping Univ, PELAB, RISE, S-58183 Linkoping, Sweden.
   TU Dresden, Fak Informat, Lehrstuhl Softwaretechnol, D-01062 Dresden, Germany.
C3 Linkoping University; RISE Research Institutes of Sweden; Technische
   Universitat Dresden
RP Linkoping Univ, PELAB, RISE, S-58183 Linkoping, Sweden.
EM uweas@ida.liu.se
OI Assmann, Uwe/0000-0002-3513-6448
CR [Anonymous], ACM SIGSOFT SOFTWARE
   ASSMANN U, 2002, COMPONENT DEPLOYMENT
   ASSmann Uwe., 2003, INVASIVE SOFTWARE CO
   *COMM EUR UN, 2000, EL CONTR SPREADSH
   DEMEYER S, 1996, THESIS VRIJE U BRUSS
   DeRemer F., 1976, IEEE Transactions on Software Engineering, VSE-2, P80, DOI 10.1109/TSE.1976.233534
   *EASYCOMP CONS, 2000, HOM PAG EASYCOMP PRO
   ENGELSCHALL R, 2004, WEBSITE METALANGUAGE
   GARLAN D, 1994, ADV SOFTWARE ENG KNO, V1, P1
   GERBER R, 2004, START C MANAGEMENT S
   JONES LG, 1989, ACM T PROGR LANG SYS, V12, P429
   LEHMANN F, 1999, WORKFLOW SYSTEMS
   MADSEN OL, 1994, OBJECT ORIENTED ENV
   MCPHERSON S, 2000, JAVA SERVER PAGES DE
   Nelson T. H., 1987, LITERARY MACHINES
   NELSON TH, 1995, COMMUN ACM, V38, P31, DOI 10.1145/208344.208353
   Sheard T, 1999, LECT NOTES COMPUT SC, V1608, P207
   Siegel J, 1998, COMMUN ACM, V41, P37, DOI 10.1145/286238.286246
   Szyperski Clemens., 1998, Component Software-Beyond Object-Oriented Programming
   VANDERSTADT R, 2001, COORDINATION INTERNE
NR 20
TC 5
Z9 5
U1 0
U2 0
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD APR
PY 2005
VL 56
IS 1-2
BP 79
EP 98
DI 10.1016/j.scico.2004.11.006
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 908SR
UT WOS:000227811000006
DA 2024-07-18
ER

PT J
AU Beuche, D
   Papajewski, H
   Schröder-Preikschat, W
AF Beuche, D
   Papajewski, H
   Schröder-Preikschat, W
TI Variability management with feature models
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE feature modeling; variant management; tool support
AB Variability management in software systems requires adequate tool support to cope with the ever increasing complexity of software systems. The paper presents a tool chain which can be used for variability management within almost all software development processes. The tools presented use extended feature models as the main model for describing variability and commonality, and provide user changeable customization of the software artifacts to be managed. (C) 2004 Elsevier B.V. All rights reserved.
C1 Pure Syst GmbH, D-39106 Magdeburg, Germany.
   Univ Erlangen Nurnberg, D-91058 Erlangen, Germany.
C3 University of Erlangen Nuremberg
RP Pure Syst GmbH, Agnetenstr 14, D-39106 Magdeburg, Germany.
EM danilo.beuche@pure-systems.com; holger.papajewski@pure-systems.com;
   wolfgang.schroeder@informatik.uni-erlangen.de
CR [Anonymous], 2000, Generative programming: methods, tools, and applications
   ASSMANN U, 2002, P COMP DEPL IFIP ACM, V2370, P141
   BATORY D, 1994, P ACM SIGSOFT
   BEUCHE D, 1999, IEEE P ISORC 99
   BEUCHE D, 2002, P INT IFIP TC10 WORK
   GAL A, 2001, OOPSLA 2001 WORKSH A
   GAL A, 2001, P 1 OOPSLA WORKSH LA
   Griss ML, 1998, FIFTH INTERNATIONAL CONFERENCE ON SOFTWARE REUSE - PROCEEDINGS, P76, DOI 10.1109/ICSR.1998.685732
   HABERMANN AN, 1976, COMMUN ACM, V19, P266, DOI 10.1145/360051.360076
   Jarzabek S, 2001, FIFTH IEEE INTERNATIONAL SYMPOSIUM ON REQUIREMENTS ENGINEERING, PROCEEDINGS, P166
   KANG KC, 2002, DOMAIN ORIENTED SYST, P19
   Kang Kyo C, 1990, Technical Report
   Krueger C. W., 2002, Software Product Lines. Second International Conference, SPLC 2. Proceedings (Lecture Notes in Computer Science Vol. 2370), P37
   LOFGREN M, 1994, OBJECT ORIENTED ENV
   NEIGHBORS JM, 1984, IEEE T SOFTWARE ENG, V10, P564, DOI 10.1109/TSE.1984.5010280
   Parnas D. L., 1976, IEEE Transactions on Software Engineering, VSe-2, P1, DOI 10.1109/TSE.1976.233797
   ROEMKE S, 2002, THESIS U MAGDEBURG M
   SIMOS M, 1996, VERSION 2 0 TECHNICA
   STALLMAN R, 1996, GNU MAKE DOCUMENTATI
   VANDEURSEN A, 2002, J COMPUTING INFORMAT, P1
   Weiss D.M., 1999, Software Product-Line Engineering-A Family-Based Software Development Process
NR 21
TC 52
Z9 59
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC
PY 2004
VL 53
IS 3
BP 333
EP 352
DI 10.1016/j.scico.2003.04.005
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 863UY
UT WOS:000224590100005
DA 2024-07-18
ER

PT J
AU Ward, MP
AF Ward, MP
TI Pigs from sausages? - Reengineering from assembler to C via FermaT
   transformations
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
ID FORMAL TRANSFORMATION; PROGRAM-DEVELOPMENT; REFINEMENT
AB Software reengineering has been described as being "about as easy as reconstructing a pig from a sausage" (Comput. Canada 18 (1992) 35). But the development of program transformation theory, as embodied in the FermaT transformation system, has made this miraculous feat into a practical possibility. This paper describes the theory behind the FermaT system and describes a recent migration project in which over 544,000 lines of assembler "sausage" (part of a large embedded system) were transformed into efficient and maintainable structured C code. (C) 2004 Elsevier B.V. All rights reserved.
C1 De Montfort Univ, Software Technol Res Lab, Leicester LE1 9BH, Leics, England.
C3 De Montfort University
RP Ward, MP (corresponding author), De Montfort Univ, Software Technol Res Lab, Leicester LE1 9BH, Leics, England.
EM martin.ward@durham.ac.uk
OI Ward, Martin/0000-0001-7127-3311
CR ABELSON H, 1998, REVISED REPORT ALGOR
   [Anonymous], PROGRAMMING LANGUAGE
   Arnold RobertS., 1993, Software Reengineering
   ARSAC JJ, 1979, COMMUN ACM, V22, P43, DOI 10.1145/359046.359057
   Back R. J. R., 1990, Formal Aspects of Computing, V2, P247, DOI 10.1007/BF01888227
   Bauer FL, 1989, IEEE T SOFTW ENG, V15
   BAXTER ID, 1997, 4 WORK C REV ENG OCT
   Beck Kent, 1999, Extreme Programming Explained: Embrace Change
   BENNETT KH, 1998, INT C SOFTW MAINT
   BURSON S, 1990, 14 ANN INT COMP SOFT
   Dijkstra E. W., 1976, A Discipline of Pro-gramming
   EASTWOOD A, 1992, COMPUTING CANADA, V18, P35
   Gannod GC, 1996, PROCEEDINGS OF THE THIRD WORKING CONFERENCE ON REVERSE ENGINEERING, P249, DOI 10.1109/WCRE.1996.558929
   HALL A, 1990, IEEE SOFTWARE, V7, P11, DOI 10.1109/52.57887
   HOARE CAR, 1987, COMMUN ACM, V30, P672, DOI 10.1145/27651.27653
   Karp C. R., 1964, LANGUAGES EXPRESSION
   KLUSENER S, 2002, ARCHITECTURAL MODIFI
   Knuth D. E., 1974, Computing Surveys, V6, P261, DOI 10.1145/356635.356640
   Lämmel R, 2001, SOFTWARE PRACT EXPER, V31, P1395, DOI 10.1002/spe.423
   Lämmel R, 2001, IEEE SOFTWARE, V18, P78, DOI 10.1109/52.965809
   LANO K, 1995, INFORM SOFTWARE TECH, V37, P303, DOI 10.1016/0950-5849(95)99366-U
   Lano Kevin., 1996, The B Language and Method: A guide to Practical Formal Development
   Morgan C., 1993, REFINEMENT CALCULUS
   Morgan C.C., 1988, TECHNICAL MONOGRAPH
   Morgan Carroll, 1994, Programming from specifications
   MORGAN CC, 1987, IBM J RES DEV, V31
   MORGAN CC, 1988, T PROGR LANG SYST, V10, P403
   Neighbors JamesM., 1989, SOFTWARE REUSABILITY, P295
   NEIGHBORS JM, 1984, IEEE T SOFTW ENG, V10
   PAIGE R, 1996, ACM COMPUT SURV, V28, P170
   PARTSCH H, 1983, COMPUT SURV, V15
   POST E, 1943, AM J MATH
   Spivey J.M., 1992, REFERENCE MANUAL
   Stepney S, 1998, LECT NOTES COMPUT SC, V1493, P284, DOI 10.1007/BFb0056040
   TAYLOR D, 1984, SIGPLAN NOTICES, V19, P48, DOI 10.1145/948363.948369
   Ward M, 1996, IEEE T SOFTWARE ENG, V22, P665, DOI 10.1109/32.541437
   Ward M, 1995, J SOFTW MAINT-RES PR, V7, P443, DOI 10.1002/smr.4360070606
   WARD M, 1989, THESIS OXFORD U
   WARD M, 1990, DERIVATION SORTING A
   Ward M., 2000, 7 WORK C REV ENG BRI
   WARD M, 1989, C SOFTW MAINT MIAM F
   WARD M, 1999, INT C SOFTW MAINT OX
   Ward MP, 1999, COMPUT J, V42, P650, DOI 10.1093/comjnl/42.8.650
   WIRTH N, 1971, COMMUN ACM, V14, P221, DOI 10.1145/362575.362577
   Wordsworth J.B., 1996, SOFTWARE ENG B
   YANG H, 1991, C SOFTW MAINT SORR I
   YANG H., 2003, Successful Evolution of Software Systems
   ZHANG X, 2002, P 15 INT C THEOR PRO
   Zhang X, 2002, LECT NOTES COMPUTER
   ZHANG XY, 2002, IEEE INT WORKSH SOUR
NR 50
TC 18
Z9 19
U1 0
U2 0
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD AUG
PY 2004
VL 52
IS 1-3
BP 213
EP 255
DI 10.1016/j.scico.2004.03.007
PG 43
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 841OS
UT WOS:000222940800007
DA 2024-07-18
ER

PT J
AU Aceto, L
   Achilleos, A
   Attard, DP
   Exibard, L
   Francalanza, A
   Ingólfsdóttir, A
AF Aceto, Luca
   Achilleos, Antonis
   Attard, Duncan Paul
   Exibard, Leo
   Francalanza, Adrian
   Ingolfsdottir, Anna
TI A monitoring tool for linear-time μHML
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Runtime verification; Linear-time properties; Monitor synthesis
AB We present detectEr, a monitoring tool that targets software applications written for Erlang/OTP. The tool runtime checks specifications expressed in a safety fragment of the linear-time modal mu-calculus called MAXHML(D), used to describe properties about the current system execution. Our technical development is founded on previous theoretical results that are lifted to a first-order setting, where systems produce executions containing events that carry data. We overview the main features of detectEr, showing how properties can be flexibly written and synthesised as executable Erlang monitors that can be instrumented with the running system.
C1 [Attard, Duncan Paul; Francalanza, Adrian] Univ Malta, Msida, Malta.
   [Aceto, Luca; Achilleos, Antonis; Attard, Duncan Paul; Exibard, Leo; Ingolfsdottir, Anna] Reykjavik Univ, Reykjavik, Iceland.
   [Aceto, Luca] Gran Sasso Sci Inst, Laquila, Italy.
C3 University of Malta; Reykjavik University; Gran Sasso Science Institute
   (GSSI)
RP Attard, DP (corresponding author), Univ Malta, Msida, Malta.; Attard, DP (corresponding author), Reykjavik Univ, Reykjavik, Iceland.
EM luca@ru.is; antonios@ru.is; duncanatt@gmail.com; leoe@ru.is;
   afra1@um.edu.mt; annai@ru.is
FU Icelandic Research Fund [207055, 778233]; MIUR; EU [778233];  [217987]; 
   [2017FTXR7S]
FX Supported by the doctoral student grant (No: 207055) and the MoVeMnt
   project (No: 217987) of the Icelandic Research Fund, the ENDEAVOUR
   Scholarship Scheme (Group B, national funds), the BehAPI project funded
   by the EU H2020 RISE of the Marie Sklodowska-Curie action (No: 778233),
   and the MIUR project PRIN 2017FTXR7S IT MATTERS.
CR Aceto L, 2022, LECT NOTES COMPUT SC, V13271, P200, DOI 10.1007/978-3-031-08143-9_12
   Aceto L, 2021, LECT NOTES COMPUT SC, V12649, P3, DOI 10.1007/978-3-030-71500-7_1
   Aceto L, 2021, SOFTW SYST MODEL, V20, P335, DOI 10.1007/s10270-020-00860-z
   Aceto L, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290365
   Armstrong J., 2007, Programming Erlang: Software for a Concurrent World, V1st
   Attard D.P., 2022, Detecter
   Basin David A., 2015, LIPIcs, V45, P590, DOI [10.4230/LIPIcs.FSTTCS.2015.590, DOI 10.4230/LIPICS.FSTTCS.2015.590]
   Bauer A, 2016, FORM METHOD SYST DES, V48, P46, DOI [10.1007/978-3-642-32759-9_10, 10.1007/s10703-016-0253-8]
   Bauer A, 2011, ACM T SOFTW ENG METH, V20, DOI 10.1145/2000799.2000800
   Bauer A, 2010, J LOGIC COMPUT, V20, P651, DOI 10.1093/logcom/exn075
   Blackburn P., 2001, Modal Logic, V53
   Bonakdarpour B, 2016, P 27 INT C CONC THEO, P16
   Cesarini Francesco, 2009, Erlang Programming: A Concurrent Approach to Software Development
   Colombo C., 2011, RV, V7186, P370
   Havelund K, 2018, LECT NOTES COMPUT SC, V11237, P90, DOI 10.1007/978-3-030-03769-7_7
   Hoguin L., 2020, Cowboy
   Hoguin L., 2020, Ranch
   KOZEN D, 1983, THEOR COMPUT SCI, V27, P333, DOI 10.1016/0304-3975(82)90125-6
   Le Brun MA, 2021, ERLANG '21: PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL WORKSHOP ON ERLANG, P2, DOI 10.1145/3471871.3472963
   Ongaro D., 2014, 2014 USENIX ANN TECH, P305
   Scheffel Torben, 2014, 2014 Twelfth ACM/IEEE Conference on Formal Methods and Models for Codesign (MEMOCODE), P52, DOI 10.1109/MEMCOD.2014.6961843
   Sen K, 2004, PROC INT CONF SOFTW, P418, DOI 10.1109/ICSE.2004.1317464
   Sen K., 2006, IPDPS
   WOLPER P, 1983, INFORM CONTROL, V56, P72, DOI 10.1016/S0019-9958(83)80051-5
NR 24
TC 0
Z9 0
U1 1
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN
PY 2024
VL 232
AR 103031
DI 10.1016/j.scico.2023.103031
EA OCT 2023
PG 7
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA X6AD3
UT WOS:001099249000001
DA 2024-07-18
ER

PT J
AU Yigitbas, E
   Schmidt, M
   Bucchiarone, A
   Gottschalk, S
   Engels, G
AF Yigitbas, Enes
   Schmidt, Maximilian
   Bucchiarone, Antonio
   Gottschalk, Sebastian
   Engels, Gregor
TI GaMoVR: Gamification-based UML learning environment in virtual reality
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE UML; Immersive learning; Gamification; Virtual reality
AB Over the years, UML has become the de facto modeling language used in conceptual design and systems design leading to its adoption in computer science university courses. To improve learning outcomes, motivation, and fun of students learning about modeling UML and modeling in general, a variety of interactive learning applications has been presented over the years. However, so far, they fail to create immersive environments for the students missing out on drastically increasing engagement with the learning objectives. Hence, we present GaMoVR, a VR-based and gamified learning environment giving students learning about UML modeling an interactive and fun learning experience. Learning outcomes are further improved by utilizing gamification in the form of minigames encapsulating the modeling activity in an engaging and fun way. Furthermore, GaMoVR provides a multiviewpoint modeling environment in which students can explore how a UML class diagram relates to a 3D model instancing the UML-modeled system. (c) 2023 Elsevier B.V. All rights reserved.
C1 [Yigitbas, Enes; Schmidt, Maximilian; Gottschalk, Sebastian; Engels, Gregor] Paderborn Univ, Zukunftsmeile 2, D-33102 Paderborn, Germany.
   [Bucchiarone, Antonio] Fdn Bruno Kessler, Via Sommar 18, Trento, Italy.
C3 University of Paderborn; Fondazione Bruno Kessler
RP Yigitbas, E (corresponding author), Paderborn Univ, Zukunftsmeile 2, D-33102 Paderborn, Germany.
EM enes@mail.upb.de
RI Bucchiarone, Antonio/K-3128-2016
OI Bucchiarone, Antonio/0000-0003-1154-1382
CR Bucchiarone A., 2020, MODELS '20
   Daehli O, 2021, Electron. J. E-Learn.
   Jensen JL, 2015, CBE-LIFE SCI EDUC, V14, DOI 10.1187/cbe.14-08-0129
   Kazhamiakin R, 2021, IEEE T INTELL TRANSP, V22, P2153, DOI 10.1109/TITS.2021.3049792
   Lee J., 2011, Academic Exchange Quarterly, V15, P146
   Mitchell A, 2017, J INF TECHNOL EDUC-I, V16, P21
   Yigitbas E., 2022, MODELS 2022
   Yigitbas E, 2021, 24TH INTERNATIONAL CONFERENCE ON MODEL-DRIVEN ENGINEERING LANGUAGES AND SYSTEMS (MODELS 2021), P261, DOI 10.1109/MODELS50736.2021.00034
NR 8
TC 1
Z9 1
U1 2
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN
PY 2024
VL 231
AR 103029
DI 10.1016/j.scico.2023.103029
EA SEP 2023
PG 5
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA U0WF1
UT WOS:001082089300001
DA 2024-07-18
ER

PT J
AU Ameen, MFA
   Kobayashi, N
   Sato, R
AF Ameen, Mahmudul Faisal Al
   Kobayashi, Naoki
   Sato, Ryosuke
TI Asynchronous unfold/fold transformation for fixpoint logic
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Program transformation; Program verification; Fixpoint logic
AB Various program verification problems for functional programs can be reduced to the validity checking problem for formulas of a fixpoint logic. Recently, Kobayashi et al. have shown that the unfold/fold transformation originally developed for logic programming can be extended and applied to prove the validity of fixpoint logic formulas. In the present paper, we refine their unfold/fold transformation, so that each predicate can be unfolded a different number of times in an asynchronous manner. Inspired by the work of Lee et al. on size change termination, we use a variant of size change graphs to find an appropriate number of unfoldings of each predicate. We have implemented an unfold/fold transformation tool based on the proposed method, and evaluated its effectiveness. (c) 2023 Elsevier B.V. All rights reserved.
EM mahmudulfaisal@gmail.com; koba@is.s.u-tokyo.ac.jp;
   rsato@is.s.u-tokyo.ac.jp
RI Sato, Ryosuke/KCY-8676-2024
OI Sato, Ryosuke/0000-0001-8679-2747
FU JSPS KAKENHI [JP20H05703]
FX We would like to thank anonymous referees for useful comments. This work
   was supported by JSPS KAKENHI Grant Numbers JP20H05703.
CR Alexandre F., 1992, Programming Language Implementation and Logic Programming. 4th International Symposium, PLILP '92. Proceedings, P202, DOI 10.1007/3-540-55844-6_137
   Asada K, 2017, SCI COMPUT PROGRAM, V137, P2, DOI 10.1016/j.scico.2016.02.007
   Bradfield JC, 1999, LECT NOTES COMPUT SC, V1683, P350
   Brotherston J, 2011, J LOGIC COMPUT, V21, P1177, DOI 10.1093/logcom/exq052
   BURSTALL RM, 1977, J ACM, V24, P44, DOI 10.1145/321992.321996
   Charatonik W, 1998, THIRTEENTH ANNUAL IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, PROCEEDINGS, P58, DOI 10.1109/LICS.1998.705643
   De Angelis E, 2022, THEOR PRACT LOG PROG, V22, P974, DOI 10.1017/S1471068421000211
   De Angelis E, 2018, THEOR PRACT LOG PROG, V18, P452, DOI 10.1017/S1471068418000157
   De Angelis E, 2018, THEOR PRACT LOG PROG, V18, P126, DOI 10.1017/S1471068417000497
   De Angelis E, 2016, LECT NOTES COMPUT SC, V9837, P147, DOI 10.1007/978-3-662-53413-7_8
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Faisal al ameen Mahmudul, 2022, Functional and Logic Programming: 16th International Symposium, FLOPS 2022, Proceedings. Lecture Notes in Computer Science (13215), P39, DOI 10.1007/978-3-030-99461-7_3
   Groote JF, 2005, THEOR COMPUT SCI, V343, P332, DOI 10.1016/j.tcs.2005.06.016
   Gupta G, 2007, LECT NOTES COMPUT SC, V4670, P27, DOI 10.1007/978-3-540-74610-2_4
   Hu ZJ, 1997, ACM SIGPLAN NOTICES, V32, P164, DOI 10.1145/258949.258964
   Kobayashi N., 2020, Lecture Notes in Computer Science., V12079
   Kobayashi N, 2019, LECT NOTES COMPUT SC, V11822, P413, DOI 10.1007/978-3-030-32304-2_20
   Kurita T., 2019, Comput. Softw., V36, P261, DOI [/10.11309/jssst.36.2_61, DOI 10.11309/JSSST.36.2_61]
   Lee CS, 2001, ACM SIGPLAN NOTICES, V36, P81, DOI 10.1145/373243.360210
   Leuschel M, 2002, THEOR PRACT LOG PROG, V2, P461, DOI 10.1017/S147106840200145X
   LUBARSKY RS, 1993, J SYMBOLIC LOGIC, V58, P291, DOI 10.2307/2275338
   Pettorossi A, 2000, LECT NOTES ARTIF INT, V1861, P613
   Pettorossi A., 1984, P 1984 ACM C LISP FU, P273, DOI DOI 10.1145/800055.802044
   Pettorossi A., 1989, LOG PROGR P 6 INT C, P539
   PROIETTI M, 1990, LECT NOTES COMPUT SC, V432, P306
   Seki H., 2012, Lecture Notes in Computer Science, V7844, P213
   Seki H., 2011, Lecture Notes in Computer Science, V7225, P205
   Seki H, 2010, LECT NOTES COMPUT SC, V6037, P82, DOI 10.1007/978-3-642-12592-8_7
   Simon L, 2007, LECT NOTES COMPUT SC, V4596, P472
   Tamaki H., 1984, P 2 INT LOG PROGR C, P127
   Unno H, 2017, LECT NOTES COMPUT SC, V10427, P571, DOI 10.1007/978-3-319-63390-9_30
   Wei-Ngan Chin, 1993, Proceedings of the ACM SIGPLAN Symposium on Partial Evaluation and Semantics-Based Program Manipulation. PEPM'93, P119, DOI 10.1145/154630.154643
NR 32
TC 0
Z9 0
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN
PY 2024
VL 231
AR 103014
DI 10.1016/j.scico.2023.103014
EA SEP 2023
PG 25
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA T5PH2
UT WOS:001078501300001
DA 2024-07-18
ER

PT J
AU Singh, RG
   Scholliers, C
AF Singh, Robbert Gurdeep
   Scholliers, Christophe
TI Gaiwan: A size-polymorphic typesystem for GPU programs
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE GPU; Polymorphism; Type system; OpenCL; Unification
AB General-purpose computing on graphics processing units (GPGPU) is increasingly used for number crunching tasks such as analyzing time series data. GPUs are a good fit for these tasks as they can execute many computations in parallel. To leverage this parallelism, the programmer is forced to carefully divide their input data into data blocks that are then distributed over the many GPU cores. The optimal block sizes are unrelated to the programmers goals, instead, they are based on characteristics of the used GPU and the input data. GPGPU programmers must additionally be wary of introducing race conditions in their programs. We believe that GPGPU programmers should be able to express GPU transformations without worrying about splitting data or race conditions. For this, we created Gaiwan, a GPGPU programming language with a size-polymorphic type system that only features data race free operations. Programmers can declare the effects of program steps on the sizes of buffers by using affine functions (e.g. int[2n] -int[n + 1]). From a step sequence, Gaiwan derives a set of constraints on the size and shape of valid inputs. Gaiwan guarantees that the program will run for any input satisfying these constraints. This means that one program may analyze both a hundred data points and millions of data points, as long as the input satisfies the constraints. We prove that our system is sound and show it works with two usage examples. Our benchmarks show that our initial OpenCL-based implementation of Gaiwan scales to handling large programs.& COPY; 2023 Elsevier B.V. All rights reserved.
C1 [Singh, Robbert Gurdeep; Scholliers, Christophe] UGent, Krijgslaan 281-S9, B-9000 Ghent, Belgium.
   [Singh, Robbert Gurdeep] IMEC, Remisebosweg 1, B-3001 Leuven, Belgium.
C3 Ghent University; IMEC
RP Singh, RG (corresponding author), UGent, Krijgslaan 281-S9, B-9000 Ghent, Belgium.
EM Robbert.GurdeepSingh@ugent.be; Christophe.Scholliers@ugent.be
OI Gurdeep Singh, Robbert/0000-0003-4394-0011; Scholliers,
   Christophe/0000-0002-2837-4763
FU Special Research Fund (BOF) of Ghent University [BOF18/DOC/327];
   Research Foundation Flanders (FWO) [G030320N]
FX Robbert Gurdeep Singh received funding from the Special Research Fund
   (BOF) of Ghent University under grant number BOF18/DOC/327. Part of this
   research was funded by Research Foundation Flanders (FWO) with file
   number G030320N. We were gracefully allowed to use the A100 of IMEC vzw
   to run our experiments. We would like to thank Toon Bayens for helping
   us efficiently solve the constraints on buffer sizes.
CR Alur R, 2018, LECT NOTES COMPUT SC, V11002, P107, DOI 10.1007/978-3-319-99725-4_9
   Bell N., 2012, Applications of GPU Computing Series, P359, DOI DOI 10.1016/B978-0-12-385963-1.00026-5
   Carneiro T., 2021, HPCS 2020 18 INT C H, P9
   CHENG J., 2014, Professional CUDA c Programming
   Clifton-Everest R, 2017, ACM SIGPLAN NOTICES, V52, P174, DOI 10.1145/3156695.3122971
   Collins Alexander., 2014, Proceedings of ACM SIGPLAN International Workshop on Libraries, Languages, p8:8, DOI DOI 10.1145/2627373.2627375
   de Muijnck-Hughes J, 2019, ELECTRON P THEOR COM, P47, DOI 10.4204/EPTCS.291.5
   Dean J, 2008, COMMUN ACM, V51, P107, DOI 10.1145/1327452.1327492
   Gaster B., 2011, Heterogeneous Computing with OpenCL, V1st
   He BS, 2008, PACT'08: PROCEEDINGS OF THE SEVENTEENTH INTERNATIONAL CONFERENCE ON PARALLEL ARCHITECTURES AND COMPILATION TECHNIQUES, P260, DOI 10.1145/1454115.1454152
   Henriksen T, 2017, ACM SIGPLAN NOTICES, V52, P556, DOI [10.1145/3140587.3062354, 10.1145/3062341.3062354]
   Hoffmann J, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P357, DOI 10.1145/1926385.1926427
   Hughes J., 1996, Conference Record of POPL '96: The 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P410, DOI 10.1145/237721.240882
   Hutton G., 2016, PROGRAMMING HASKELL
   Kristien M, 2019, ARRAY '2019: PROCEEDINGS OF THE 6TH ACM SIGPLAN INTERNATIONAL WORKSHOP ON LIBRARIES, LANGUAGES AND COMPILERS FOR ARRAY PROGRAMMING, P35, DOI 10.1145/3315454.3329957
   Lift Contributors, 2018, LIFT CONTRIBUTORS
   Madsen FM, 2015, FHPC'15 PROCEEDINGS OF THE 4TH ACM SIGPLAN WORKSHOP ON FUNCTIONAL HIGH-PERFORMANCE COMPUTING, P23, DOI 10.1145/2808091.2808094
   MARTELLI A, 1982, ACM T PROGR LANG SYS, V4, P258, DOI 10.1145/357162.357169
   MCCARTHY J, 1960, COMMUN ACM, V3, P184, DOI 10.1145/367177.367199
   Merino L, 2018, J SYST SOFTWARE, V144, P165, DOI 10.1016/j.jss.2018.06.027
   Mo YJ, 2017, INT CONF UBIQ FUTUR, P240
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Ragan-Kelley J, 2018, COMMUN ACM, V61, P106, DOI 10.1145/3150211
   ROBINSON JA, 1965, J ACM, V12, P23, DOI 10.1145/321250.321253
   Thies W, 2002, LECT NOTES COMPUT SC, V2304, P179
   Udupa A, 2009, INT SYM CODE GENER, P200, DOI 10.1109/CGO.2009.20
   Vasilache N, 2018, Arxiv, DOI arXiv:1802.04730
   Verdoolaege S, 2013, ACM T ARCHIT CODE OP, V9, DOI 10.1145/2400682.2400713
NR 28
TC 0
Z9 0
U1 1
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD AUG
PY 2023
VL 230
AR 102989
DI 10.1016/j.scico.2023.102989
EA JUN 2023
PG 47
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA N0IC9
UT WOS:001033947200001
DA 2024-07-18
ER

PT J
AU Hofmann, T
   Schupp, S
AF Hofmann, Till
   Schupp, Stefan
TI Controlling timed automata against MTL specifications with TACoS
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 23rd International Conference on Coordination Models and Languages
   (COORDINATION)
CY JUN 14-18, 2021
CL ELECTR NETWORK
DE Controller synthesis; Timed automata; Metric temporal logic
AB TACoS is a tool for synthesizing controllers against specifications of undesired behavior with timing constraints. Given a timed automaton and an MTL specification, the tool synthesizes a controller that guarantees that every possible execution of the system satisfies the given specification. TACOS comes with a C++ library with a simple-to-use API and can read from and write to human-readable text input and output. In this paper, we outline the approach of the tool and present two examples in further detail. (c) 2022 Elsevier B.V. All rights reserved.
C1 [Hofmann, Till] Rhein Westfal TH Aachen, Knowledge Based Syst Grp, Aachen, Germany.
   [Schupp, Stefan] TU Wien, Cyber Phys Syst Grp, Vienna, Austria.
C3 RWTH Aachen University; Technische Universitat Wien
RP Hofmann, T (corresponding author), Rhein Westfal TH Aachen, Knowledge Based Syst Grp, Aachen, Germany.
EM hofmann@kbsg.rwth-aachen.de
RI Hofmann, Till/P-2987-2016
FU German Research Council (DFG) [RTG 2236]; DFG [GL-747/23-1 ConTrAkt]; EU
   [952215]
FX This work was funded by the German Research Council (DFG) in the context
   of the research training group UnRAVeL (RTG 2236), DFG grant GL-747/23-1
   ConTrAkt, and the EU ICT-48 2020 project TAILOR (No. 952215).
CR Altisen Karine, 2002, P 2 WORKSH REAL TIM
   Alur R., 1993, Proceedings of the Twenty-Fifth Annual ACM Symposium on the Theory of Computing, P592, DOI 10.1145/167088.167242
   Behrmann G, 2007, LECT NOTES COMPUT SC, V4590, P121
   Bohy Aaron, 2012, Computer Aided Verification. Proceedings 24th International Conference, CAV 2012, P652, DOI 10.1007/978-3-642-31424-7_45
   Bouyer P, 2006, LECT NOTES COMPUT SC, V4137, P450
   Duret-Lutz A, 2016, LECT NOTES COMPUT SC, V9938, P122, DOI 10.1007/978-3-319-46520-3_8
   Ehlers R, 2011, LECT NOTES COMPUT SC, V6605, P272, DOI 10.1007/978-3-642-19835-9_25
   Finkbeiner B, 2012, LECT NOTES COMPUT SC, V7214, P392, DOI 10.1007/978-3-642-28756-5_27
   Hofmann T, 2021, LECT NOTES COMPUT SC, V13085, P372, DOI 10.1007/978-3-030-92124-8_21
   Jacobs S, 2024, Arxiv, DOI arXiv:2206.00251
   Li GY, 2017, SPIN'17: PROCEEDINGS OF THE 24TH ACM SIGSOFT INTERNATIONAL SPIN SYMPOSIUM ON MODEL CHECKING OF SOFTWARE, P102, DOI 10.1145/3092282.3092303
   Meyer PJ, 2018, LECT NOTES COMPUT SC, V10981, P578, DOI 10.1007/978-3-319-96145-3_31
   Ouaknine J, 2005, IEEE S LOG, P188
   Peter Hans-Jorg, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P649, DOI 10.1007/978-3-642-22110-1_52
NR 14
TC 1
Z9 1
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN
PY 2023
VL 225
SI SI
AR 102898
DI 10.1016/j.scico.2022.102898
EA NOV 2022
PG 5
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 7T5ZH
UT WOS:000911523700007
DA 2024-07-18
ER

PT J
AU ter Beek, MH
   Damiani, F
   Lienhardt, M
   Mazzanti, F
   Paolini, L
   Scarso, G
AF ter Beek, Maurice H.
   Damiani, Ferruccio
   Lienhardt, Michael
   Mazzanti, Franco
   Paolini, Luca
   Scarso, Giordano
TI FTS4VMC: A front-end tool for static analysis and family-based model
   checking of FTSs with VMC
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Variability; Static analysis; Model checking; Featured Transition
   Systems; Modal Transition Systems
AB FTS4VMC is a publicly available front-end tool for the static analysis and family-based model checking of a Featured Transition System (FTS). It can detect ambiguities in an FTS, disambiguate an ambiguous FTS, transform an FTS into a Modal Transition System (MTS), and interact with the VMC model checker for family-based verification.(c) 2022 Elsevier B.V. All rights reserved.
C1 [ter Beek, Maurice H.; Mazzanti, Franco] CNR, ISTI, Pisa, Italy.
   [Damiani, Ferruccio; Paolini, Luca; Scarso, Giordano] Univ Turin, Turin, Italy.
   [Lienhardt, Michael] Off Natl Etud & Rech Aerosp, Palaiseau, France.
C3 Consiglio Nazionale delle Ricerche (CNR); Istituto di Scienza e
   Tecnologie dell'Informazione "Alessandro Faedo" (ISTI-CNR); University
   of Turin; Universite Paris Saclay; National Office for Aerospace Studies
   & Research (ONERA)
RP ter Beek, MH (corresponding author), CNR, ISTI, Pisa, Italy.
EM maurice.terbeek@isti.cnr.it; ferruccio.damiani@unito.it;
   michael.lienhardt@onera.fr; franco.mazzanti@isti.cnr.it;
   luca.paolini@unito.it; giordano.scarso@edu.unito.it
RI Paolini, Luca/M-8924-2019; Ferruccio, Damiani/D-2383-2011
OI Paolini, Luca/0000-0002-4126-0170; Ferruccio,
   Damiani/0000-0001-8109-1706
FU Italian MIUR-PRIN 2020TL3X8X project T-LADIES (Type-ful Language
   Adaptation for Dynamic, Interacting and Evolving Systems)
FX Maurice ter Beek and Luca Paolini acknowledge funding from the Italian
   MIUR-PRIN 2020TL3X8X project T-LADIES (Type-ful Language Adaptation for
   Dynamic, Interacting and Evolving Systems) .
CR Benavides D, 2010, INFORM SYST, V35, P615, DOI 10.1016/j.is.2010.01.001
   Classen Andreas, 2012, International Journal on Software Tools for Technology Transfer, V14, P589, DOI 10.1007/s10009-012-0234-1
   Classen A., 2011, THESIS U NAMUR
   Classen A., 2010, ICSE 10, V1, P335, DOI DOI 10.1145/1806799.1806850
   Classen A, 2014, SCI COMPUT PROGRAM, V80, P416, DOI 10.1016/j.scico.2013.09.019
   Classen A, 2013, IEEE T SOFTWARE ENG, V39, P1069, DOI 10.1109/TSE.2012.86
   Cordy Maxime, 2019, From Software Engineering to Formal Methods and Tools, and Back: Essays Dedicated to Stefania Gnesi on the Occasion of Her 65th Birthday. Lecture Notes in Computer Science (LNCS 11865), P285, DOI 10.1007/978-3-030-30985-5_18
   Cordy M, 2013, PROCEEDINGS OF THE 17TH INTERNATIONAL SOFTWARE PRODUCT LINE CONFERENCE CO-LOCATED WORKSHOPS (SPLC'13 WORKSHOPS), P141
   Devroey X, 2014, 8 INT WORKSH VAR MOD, p10:1, DOI [10.1145/2556624.2556635, DOI 10.1145/2556624.2556635]
   Dimovski AS, 2020, INT J SOFTW TOOLS TE, V22, P35, DOI 10.1007/s10009-019-00528-0
   Dimovski A, 2017, INT J SOFTW TOOLS TE, V19, P585, DOI 10.1007/s10009-016-0425-2
   Kretínsky J, 2017, LECT NOTES COMPUT SC, V10460, P36, DOI 10.1007/978-3-319-63121-9_3
   Larsen U, 1988, Eur J Popul, V3, P203, DOI 10.1109/LICS.1988.5119
   ter Beek Maurice H., 2012, FM 2012: Formal Methods. Proceedings of the 18th International Symposium, P450, DOI 10.1007/978-3-642-32759-9_36
   ter Beek M.H., 2019, STATIC ANAL FEATURED, DOI [10.5281/zenodo.2616646, DOI 10.5281/ZENODO.2616646]
   ter Beek M. H., 2014, SPLC 14, V2, P70, DOI DOI 10.1145/2647908.2655969
   ter Beek MH, 2021, SPLC '21: PROCEEDINGS OF THE 25TH ACM INTERNATIONAL SYSTEMS AND SOFTWARE PRODUCT LINE CONFERENCE, VOL A, DOI 10.1145/3461001.3472732
   ter Beek MH, 2020, LECT NOTES COMPUT SC, V12076, P245, DOI 10.1007/978-3-030-45234-6_12
   ter Beek MH, 2021, SPLC '21 - PROCEEDINGS OF THE 25TH ACM INTERNATIONAL SYSTEMS AND SOFTWARE PRODUCT LINE CONFERENCE, VOL B, P24, DOI 10.1145/3461002.3473071
   ter Beek MH, 2022, EMPIR SOFTW ENG, V27, DOI 10.1007/s10664-020-09930-8
   ter Beek MH, 2019, SCI COMPUT PROGRAM, V169, P1, DOI 10.1016/j.scico.2018.09.006
   ter Beek MH, 2017, LECT NOTES COMPUT SC, V10202, P387, DOI 10.1007/978-3-662-54494-5_23
   ter Beek MH, 2016, J LOG ALGEBR METHODS, V85, P287, DOI 10.1016/j.jlamp.2015.11.006
   ter Beek MH, 2015, LECT NOTES COMPUT SC, V9276, P344, DOI 10.1007/978-3-319-22969-0_24
   ter Beek MH, 2019, P 23 INT SYST SOFTW, P39
   Thüm T, 2014, ACM COMPUT SURV, V47, DOI 10.1145/2580950
NR 26
TC 0
Z9 0
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 1
PY 2022
VL 224
AR 102879
DI 10.1016/j.scico.2022.102879
EA OCT 2022
PG 7
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 5M4KB
UT WOS:000871065100002
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Chiapperini, A
   Miculan, M
   Peressotti, M
AF Chiapperini, Alessio
   Miculan, Marino
   Peressotti, Marco
TI Computing (optimal) embeddings of directed bigraphs
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Graph rewriting systems; Bigraphs; Weighted bigraphs; Integer linear
   programming
ID REACTIVE SYSTEMS
AB Bigraphs and bigraphical reactive systems are a well-known meta-model successfully used for formalizing a wide range of models and situations, such as process calculi, service oriented architectures, multi-agent systems, biological systems, etc. A key problem in the theory and the implementations of bigraphs is how to compute embeddings, i.e., structure-preserving mappings of a given bigraph (the pattern or guest) inside another (the target or host).
   In this paper, we present an algorithm for computing embeddings for directed bigraphs, an extension of Milner's bigraphs which take into account the request directions between controls and names. This algorithm solves the embedding problem by means of a reduction to a constraint satisfaction problem. We first prove soundness and completeness of this algorithm; then we present an implementation in jLibBig, a general Java library for manipulating bigraphical reactive systems. The effectiveness of this implementation is shown by several experimental results. Finally, we show that this algorithm can be readily adapted to find the optimal embeddings in a weighted variant of the embedding problem. (C) 2022 The Author(s). Published by Elsevier B.V.
C1 [Chiapperini, Alessio; Miculan, Marino] Univ Udine, DMIF, Udine, Italy.
   [Peressotti, Marco] Univ Southern Denmark, IMADA, Odense, Denmark.
C3 University of Udine; University of Southern Denmark
RP Peressotti, M (corresponding author), Univ Southern Denmark, IMADA, Odense, Denmark.
EM marino.miculan@uniud.it; peressotti@imada.sdu.dk
RI Peressotti, Marco/ABD-8202-2020; Miculan, Marino/AAO-3301-2021
OI Peressotti, Marco/0000-0002-0243-0480; Miculan,
   Marino/0000-0003-0755-3444
FU MIUR PRIN [2017FTXR7S]
FX Supported by Italian MIUR PRIN 2017FTXR7S IT MATTERS(Methods and Tools
   for Trustworthy Smart Systems).
CR [Anonymous], 1999, Communicating and Mobile Systems: The Calculus
   [Anonymous], 2019, PROC FOCLASA
   Archibald B., 2021, LIPICS, V210
   Archibald B, 2020, IEEE INTERNET THINGS, V7, P2955, DOI 10.1109/JIOT.2020.2964026
   Bacci Giorgio, 2014, Trustworthy Global Computing 9th International Symposium, TGC 2014. Revised Selected Papers: LNCS 8902, P17, DOI 10.1007/978-3-662-45917-1_2
   Bacci G, 2009, ELECTRON PROC THEOR, P3, DOI 10.4204/EPTCS.11.1
   Bacci G, 2009, LECT NOTES COMPUT SC, V5728, P413, DOI 10.1007/978-3-642-03741-2_28
   Bundgaard M, 2008, LECT NOTES COMPUT SC, V5052, P83, DOI 10.1007/978-3-540-68265-3_6
   Burco F, 2020, PROCEEDINGS OF THE 35TH ANNUAL ACM SYMPOSIUM ON APPLIED COMPUTING (SAC'20), P173, DOI 10.1145/3341105.3374121
   Calder Muffy, 2012, Integrated Formal Methods. Proceedings 9th International Conference, IFM 2012, P21, DOI 10.1007/978-3-642-30729-4_2
   Calder M, 2014, SCI COMPUT PROGRAM, V80, P288, DOI 10.1016/j.scico.2013.08.004
   Chiapperini A, 2020, Arxiv, DOI arXiv:2003.10209
   Chiapperini Alessio, 2022, Zenodo, DOI 10.5281/ZENODO.6546652
   Chiapperini A, 2020, LECT NOTES COMPUT SC, V12150, P38, DOI 10.1007/978-3-030-51372-6_3
   Damgaard TC, 2012, ELECTRON NOTES THEOR, V284, P55, DOI 10.1016/j.entcs.2012.05.015
   Damgaard TC, 2013, FORM ASP COMPUT, V25, P257, DOI 10.1007/s00165-011-0184-5
   Debois S., 2008, THESIS IT U COPENHAG
   Faithfull A.J., 2013, ELECT COMMUN EASST, V61
   Gassara A, 2019, DISCRETE APPL MATH, V253, P73, DOI 10.1016/j.dam.2018.07.006
   Glenstrup A.J., 2007, IMPLEMENTATION BIGRA, P22
   Grohmann D., 2008, ELECT COMMUN EASST, V10
   Grohmann D, 2007, ELECTRON NOTES THEOR, V173, P121, DOI 10.1016/j.entcs.2007.02.031
   Grohmann D, 2007, LECT NOTES COMPUT SC, V4703, P380
   Grohmann D, 2008, LECT NOTES COMPUT SC, V5214, P487, DOI 10.1007/978-3-540-87405-8_41
   Grzelak D., 2022, BIGRAPH FRAMEWORK FR
   Hojsgaard E., 2011, BIGRAPHICAL LANGUAGE, P85
   Hojsgaard E., 2012, THESIS IT U COPENHAG
   Jensen OH, 2003, ACM SIGPLAN NOTICES, V38, P38, DOI 10.1145/640128.604135
   Khanna S, 2001, SIAM J COMPUT, V30, P1863, DOI 10.1137/S0097539799349948
   Klin B, 2013, INFORM COMPUT, V227, P58, DOI 10.1016/j.ic.2013.04.001
   Krivine J, 2008, ELECTRON NOTES THEOR, V218, P73, DOI 10.1016/j.entcs.2008.10.006
   Mansutti A., 2014, PROC GCM 14, P45
   Mansutti A., 2014, ELECT COMMUN EASST, V71
   Mansutti A, 2014, LECT NOTES COMPUT SC, V8460, P201, DOI 10.1007/978-3-662-43352-2_16
   Miculan M., 2013, UDMI012013 DEP MATH
   Miculan M., 2015, JLIBBIG LIB BIGRAPHI
   Miculan M, 2019, Arxiv, DOI arXiv:1412.1042
   Parrow J, 1998, THIRTEENTH ANNUAL IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, PROCEEDINGS, P176
   Perrone G., 2012, Proceedings of the 27th Annual ACM Symposium on Applied Computing, P1320
   Perrone G, 2011, ELECTRON PROC THEOR, P20, DOI 10.4204/EPTCS.55.2
   Prudhomme Charles, 2017, 6241 TASCLS2N CNRS U
   Sassone V, 2005, IEEE S LOG, P311
   Sevegnani M., 2010, SAT BASED ALGORITHM
   Sevegnani M, 2016, LECT NOTES COMPUT SC, V9780, P494, DOI 10.1007/978-3-319-41540-6_27
   Sevegnani M, 2015, THEOR COMPUT SCI, V577, P43, DOI 10.1016/j.tcs.2015.02.011
   Souad M., 2020, P 2020 INT C ADV ASP, P1
   Tsigkanos C, 2020, IEEE INT CONF AUTOM, P993, DOI 10.1145/3324884.3416579
   Tsigkanos C, 2018, IEEE T DEPEND SECURE, V15, P466, DOI 10.1109/TDSC.2016.2599880
   Tsigkanos C, 2017, ESEC/FSE 2017: PROCEEDINGS OF THE 2017 11TH JOINT MEETING ON FOUNDATIONS OF SOFTWARE ENGINEERING, P38, DOI 10.1145/3106237.3106299
NR 49
TC 0
Z9 0
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 1
PY 2022
VL 221
AR 102842
DI 10.1016/j.scico.2022.102842
PG 31
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 6M8WI
UT WOS:000889143200002
OA hybrid, Green Published
DA 2024-07-18
ER

PT J
AU Manjhi, D
   Chaturvedi, A
AF Manjhi, Devesh
   Chaturvedi, Amrita
TI Reuse estimate and interval prediction using MOGA-NN and RBF-NN in the
   functional paradigm
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Software reuse; Interval prediction; Functional paradigm; Software
   metrics; Neural network
ID MULTIOBJECTIVE GENETIC ALGORITHM; SOFTWARE METRICS; COMPLEXITY; QUALITY
AB Context: Reusability estimation of a software component is beneficial in constructing a library of reusable components. The inherent characteristics of the functional paradigm in principle support reuse better than other paradigms. In this paper, we consider the reusability of functions written in the Haskell programming language, which is a functional programming language.
   Objective: We aim to develop a framework for measuring the reusability of Haskell functions. Given a function, we build a model that can provide a reuse estimate of that function using source code metrics derived solely from that function. This developed model provides a prediction interval for the reuse estimate, which is more useful than a point estimate because of the confidence associated with the prediction. This paper also compares two algorithms used for interval prediction viz. MOGA-NN and RBF-NN.
   Method: We have used the Indegree of a function and probabilities derived from the clustering of functions to construct our reuse estimate. We have used a multiobjective genetic algorithm trained neural network (MOGA-NN) and radial basis function neural nets (RBF-NN) combined with the k-nearest neighbor algorithm for making interval predictions.
   Results: The developed model successfully predicts the reuse estimate of three open-source Haskell packages. Both MOGA-NN and RBF-NN have quite similar performance in terms of Root mean square error values for training and testing data, but RBF-NN dominates in the prediction of the bounds of the reuse estimate.
   Conclusion: We have shown how source code metrics computed from a Haskell function can be used to predict the reuse estimate of a given function. We also conclude that radial basis function neural networks are more accurate in providing a prediction interval for reuse estimate. (C) 2021 Elsevier B.V. All rights reserved.
C1 [Manjhi, Devesh; Chaturvedi, Amrita] IIT BHU, Dept Comp Sci & Engn, Varanasi, Uttar Pradesh, India.
C3 Indian Institute of Technology System (IIT System); Indian Institute of
   Technology BHU Varanasi (IIT BHU Varanasi)
RP Chaturvedi, A (corresponding author), IIT BHU, Dept Comp Sci & Engn, Varanasi, Uttar Pradesh, India.
EM amrita.cse@iitbhu.ac.in
RI Chaturvedi, Amrita/D-7823-2017
CR Abdalkareem R, 2017, INFORM SOFTWARE TECH, V88, P148, DOI 10.1016/j.infsof.2017.04.005
   Acharya J, 2014, HETEROGENEOUS NETWORKS IN LTE-ADVANCED, P1, DOI 10.1002/9781118693964
   Ak R, 2016, IEEE T NEUR NET LEAR, V27, P1734, DOI 10.1109/TNNLS.2015.2418739
   [Anonymous], 1998, SOFTWARE ENG ENG APP
   [Anonymous], 2010, WORLD ACAD SCI ENG T
   [Anonymous], 2012, INT J INF TECHNOL KN
   [Anonymous], 2014, SOFTWARE METRICS RIG, DOI DOI 10.1201/B17461
   Arar ÖF, 2016, EXPERT SYST APPL, V61, P106, DOI 10.1016/j.eswa.2016.05.018
   Arora D, 2011, INT J COMPUT SCI NET, V11, P100
   Barros-Justo JL, 2019, COMPUT STAND INTER, V61, P137, DOI 10.1016/j.csi.2018.06.005
   Bauer P, 2014, 2014 14TH INTERNATIONAL WORKSHOP ON ACOUSTIC SIGNAL ENHANCEMENT (IWAENC), P1, DOI 10.1109/IWAENC.2014.6953304
   Ben-Israel A, 2008, J CLASSIF, V25, P5, DOI 10.1007/s00357-008-9002-z
   Benton M.C., 2016, ARXIV160606704
   Boehm I., HBURG HASKELL BOTTOM
   Boetticher G., 1993, NEURAL NETWORK PARAD
   Borysowich C., DESIGN PRINCIPLES FA
   CALDIERA G, 1991, COMPUTER, V24, P61, DOI 10.1109/2.67210
   Cardelli L., 1996, ACM Computing Surveys - Special Issue: Position Statements on Strategic Sirections in Computing Research, V28, P4, DOI [10.1145/242224.242415, DOI 10.1145/242224.242415]
   CHEN DJ, 1993, J SYST SOFTWARE, V20, P19, DOI 10.1016/0164-1212(93)90046-Z
   Chen K., ETHEREUM ANAL ETHERE
   CHIDAMBER SR, 1994, IEEE T SOFTWARE ENG, V20, P476, DOI 10.1109/32.295895
   Deb K, 2002, IEEE T EVOLUT COMPUT, V6, P182, DOI 10.1109/4235.996017
   Ebert C, 2016, IEEE SOFTWARE, V33, P27, DOI 10.1109/MS.2016.147
   Friedrichs S., PIET PIET INTERPRETE
   Gajda M.J., HOMPLEXITY HASKELL C
   Gansner E.R., GVPR GRAPH PATTERN S
   Guo H., 2018, INT C INT INT SYST A, P202, DOI [10.1007/978-3-030-02804-6_27, DOI 10.1007/978-3-030-02804-6_27]
   Halstead M.H., 1977, OPERATING PROGRAMMIN
   Henderson-Sellers B., 1995, Object-oriented metrics: measures of complexity
   HILL T, 1994, INT J FORECASTING, V10, P5, DOI 10.1016/0169-2070(94)90045-0
   Hudaib A., 2016, COMMUNICATIONS NETWO, V08, P179, DOI [10.4236/cn.2016.83018, DOI 10.4236/CN.2016.83018]
   Hudak Paul., 1992, SIGPLAN NOT, V27, P1, DOI DOI 10.1145/130697.130698
   Jensen MT, 2003, IEEE T EVOLUT COMPUT, V7, P503, DOI 10.1109/TEVC.2003.817234
   Jha M, 2006, 13TH IEEE INTERNATIONAL WORKSHOP ON SOFTWARE TECHNOLOGY AND ENGINEERING PRACTICE, PROCEEDINGS, P102
   Jones S. P., 1996, Conference Record of POPL '96: The 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P295, DOI 10.1145/237721.237794
   Juntao Wang, 2011, 2011 IEEE 3rd International Conference on Communication Software and Networks (ICCSN 2011), P44, DOI 10.1109/ICCSN.2011.6014384
   Khosravi A, 2011, IEEE T NEURAL NETWOR, V22, P1341, DOI 10.1109/TNN.2011.2162110
   Khosravi A, 2011, IEEE T NEURAL NETWOR, V22, P337, DOI 10.1109/TNN.2010.2096824
   Kohonen T., 2012, SELF ORGANIZING MAPS, V30
   Kumar KS, 2017, 2017 INTERNATIONAL CONFERENCE ON TECHNICAL ADVANCEMENTS IN COMPUTERS AND COMMUNICATIONS (ICTACC), P66, DOI 10.1109/ICTACC.2017.26
   Lacchia M., ARGON MEASURE YOUR C
   LEW KS, 1988, IEEE T SOFTWARE ENG, V14, P1645, DOI 10.1109/32.9052
   Li Y, 2017, TRANSPORT RES C-EMER, V77, P306, DOI 10.1016/j.trc.2017.02.005
   LIM WC, 1994, IEEE SOFTWARE, V11, P23, DOI 10.1109/52.311048
   Maggo Surbhi, 2014, International Journal of Information Technology and Computer Science, V6, P1, DOI 10.5815/ijitcs.2014.02.01
   Manjhi D., 2019, 2019 IEEE INT C EL C, P1
   Matsumoto S, 2009, P 6 INT C PRED MOD S, V2010, P1, DOI [10.1155/2010/384371, DOI 10.1155/2010/384371]
   Meena J., 2013, 2 INT C ADV COMP SCI
   Muddu B, 2013, INT WORKS EMERG TREN, P35, DOI 10.1109/WETSoM.2013.6619334
   Munson J., 1996, HDB SOFTWARE RELIABI, P493
   Padhy N, 2018, SMART INNOV SYST TEC, V77, P431, DOI 10.1007/978-981-10-5544-7_42
   Park J, 1991, NEURAL COMPUT, V3, P246, DOI 10.1162/neco.1991.3.2.246
   PRIETODIAZ R, 1987, IEEE SOFTWARE, V4, P6, DOI 10.1109/MS.1987.229789
   ROUSSEEUW PJ, 1987, J COMPUT APPL MATH, V20, P53, DOI 10.1016/0377-0427(87)90125-7
   Rustum R., 2017, 8 INT C URB PLANN AR
   Ryder Chris, 2005, TRENDS FUNCTIONAL PR, P31
   Sawaragi Y., 1985, Theory of Multiobjective Optimization (vol. 176 of Mathematics in Science and Engineering), V176
   Schwenker F, 2001, NEURAL NETWORKS, V14, P439, DOI 10.1016/S0893-6080(01)00027-2
   Seibel Peter., 2009, Coders at Work: Reflections on the Craft of Programming
   Selby R.W., 1989, SOFTWARE REUSABILITY
   Shri Anju, 2010, INT J COMPUT INF ENG, V43, P853, DOI DOI 10.5281/ZENODO.1074887
   Srinivas N., 1994, Evolutionary Computation, V2, P221, DOI 10.1162/evco.1994.2.3.221
   Stasiak A, 2019, ADV INTELL SYST, V830, P175, DOI 10.1007/978-3-319-99617-2_12
   Tseng FH, 2018, IEEE SYST J, V12, P1688, DOI 10.1109/JSYST.2017.2722476
   Tu JV, 1996, J CLIN EPIDEMIOL, V49, P1225, DOI 10.1016/S0895-4356(96)00002-9
   VANDENBERG KG, 1995, INFORM SOFTWARE TECH, V37, P213, DOI 10.1016/0950-5849(95)90813-A
   Wadler P, 1998, FIFTH INTERNATIONAL CONFERENCE ON SOFTWARE REUSE - PROCEEDINGS, P371, DOI 10.1109/ICSR.1998.685772
   Wan C, 2017, IEEE T POWER SYST, V32, P817, DOI 10.1109/TPWRS.2016.2550867
   Zhang R, 2016, J CLEAN PROD, V112, P3361, DOI 10.1016/j.jclepro.2015.09.097
NR 69
TC 2
Z9 2
U1 0
U2 8
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD AUG 1
PY 2021
VL 208
AR 102643
DI 10.1016/j.scico.2021.102643
EA APR 2021
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA SF6EZ
UT WOS:000652847700008
DA 2024-07-18
ER

PT J
AU Akiki, PA
   Akiki, PA
   Bandara, AK
   Yu, YJ
AF Akiki, Pierre A.
   Akiki, Paul A.
   Bandara, Arosha K.
   Yu, Yijun
TI EUD-MARS: End-user development of model-driven adaptive robotics
   software systems
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE End-user development; Model-driven; Adaptive; Robots; Visual languages
   and environments
ID MIDDLEWARE; ARCHITECTURE
AB Empowering end-users to program robots is becoming more significant. Introducing software engineering principles into end-user programming could improve the quality of the developed software applications. For example, model-driven development improves technology independence and adaptive systems act upon changes in their context of use. However, end-users need to apply such principles in a non-daunting manner and without incurring a steep learning curve. This paper presents EUD-MARS that aims to provide end-users with a simple approach for developing model-driven adaptive robotics software. End-users include people like hobbyists and students who are not professional programmers but are interested in programming robots. EUD-MARS supports robots like hobby drones and educational humanoids that are available for end-users. It offers a tool for software developers and another one for end-users. We evaluated EUD-MARS from three perspectives. First, we used EUD-MARS to program different types of robots and assessed its visual programming language against existing design principles. Second, we asked software developers to use EUD-MARS to configure robots and obtained their feedback on strengths and points for improvement. Third, we observed how end-users explain and develop EUD-MARS programs, and obtained their feedback mainly on understandability, ease of programming, and desirability. These evaluations yielded positive indications of EUD-MARS. (C) 2020 Elsevier B.V. All rights reserved.
C1 [Akiki, Pierre A.] Notre Dame Univ Louaize, Dept Comp Sci, Zouk Mosbeh, Lebanon.
   [Akiki, Paul A.; Bandara, Arosha K.; Yu, Yijun] Open Univ, Sch Comp & Commun, Milton Keynes, Bucks, England.
C3 Notre Dame University Lebanon; Open University - UK
RP Akiki, PA (corresponding author), Notre Dame Univ Louaize, Dept Comp Sci, Zouk Mosbeh, Lebanon.
EM pakiki@ndu.edu.lb; paul.akiki@open.ac.uk; arosha.bandara@open.ac.uk;
   yijun.yu@open.ac.uk
RI Bandara, Arosha K./AAB-8229-2021
OI Bandara, Arosha K./0000-0001-8974-0555; Yu, Yijun/0000-0002-7154-8570
FU European Research Council (ERC); EU; Engineering and Physical Sciences
   Research Council (EPSRC)
FX The authors would like to thank the financial support by the European
   Research Council (ERC), EU Horizon 2020, and the Engineering and
   Physical Sciences Research Council (EPSRC) that enabled the
   collaboration. We also acknowledge the eSTEeM project at the School of
   Computing and Communications, Open University, and the National Museum
   of Computing at Bletchley Park for supporting the engagement with
   schoolchildren in the United Kingdom.
CR Akiki PA, 2018, J SYST SOFTWARE, V135, P165, DOI 10.1016/j.jss.2017.10.017
   Akiki PA, 2017, ACM T COMPUT-HUM INT, V24, DOI 10.1145/3057857
   Akiki PA, 2016, IEEE T SOFTWARE ENG, V42, P1118, DOI 10.1109/TSE.2016.2553035
   Akiki PA, 2014, ACM COMPUT SURV, V47, DOI 10.1145/2597999
   Alexandrova S., 2014, ROBOTICS SCI SYSTEMS, P48
   Alexandrova S, 2015, IEEE INT CONF ROBOT, P5537, DOI 10.1109/ICRA.2015.7139973
   Ando N, 2005, 2005 IEEE/RSJ International Conference on Intelligent Robots and Systems, Vols 1-4, P3555, DOI 10.1109/IROS.2005.1545521
   Anis Koubaa., 2015, J SOFTWARE ENG ROBOT, V6, P1
   [Anonymous], 2016 IEEE 21 INT C E
   [Anonymous], 2006, ARCHITECTURAL BLUEPR
   [Anonymous], 2010, J. Softw. Eng. Robot
   [Anonymous], 2016, P INT WORKSHOP DOMAI, DOI DOI 10.1145/3023147.3023151
   Arne N., 2016, SURVEY DOMAIN SPECIF
   Athreya B, 2012, S VIS LANG HUM CEN C, P75, DOI 10.1109/VLHCC.2012.6344486
   Bardaro G, 2018, 2018 IEEE/ACM 1ST INTERNATIONAL WORKSHOP ON ROBOTICS SOFTWARE ENGINEERING (ROSE), P9, DOI 10.1145/3196558.3196560
   Bell M., 2017, LEGO MINDSTORMS EV3
   Benedek J., 2003, Proceedings of Usability Professionals Association, P8
   Bennaceur A, 2018, ACM TRANS CYBER-PHYS, V2, DOI 10.1145/3134843
   Biggs G., 2003, P AUSTR C ROB AUT, P27
   Bischoff R, 2002, IEEE ROMAN 2002, PROCEEDINGS, P482, DOI 10.1109/ROMAN.2002.1045668
   Blanc X., 2007, P 2 NAT WORKSH CONTR
   Bottoni P., 2015, P 11 BIANN C IT SIGC, P86
   Bozhinoski D, 2016, 2016 42ND EUROMICRO CONFERENCE ON SOFTWARE ENGINEERING AND ADVANCED APPLICATIONS (SEAA), P214, DOI 10.1109/SEAA.2016.41
   Bozhinoski D, 2015, IEEE INT CONF AUTOM, P801, DOI 10.1109/ASE.2015.104
   Brugali D, 2010, IEEE ROBOT AUTOM MAG, V17, P100, DOI 10.1109/MRA.2010.935798
   Brugali D, 2009, IEEE ROBOT AUTOM MAG, V16, P84, DOI 10.1109/MRA.2009.934837
   Bruyninckx H, 2001, IEEE INT CONF ROBOT, P2523, DOI 10.1109/ROBOT.2001.933002
   Bruyninckx H., 2013, Proceedings of the 28th Annual ACM Symposium on Applied Computing, P1758, DOI [10.1145/2480362.2480693, DOI 10.1145/2480362.2480693]
   Burnett M, 2004, COMMUN ACM, V47, P53, DOI 10.1145/1015864.1015889
   Burnett M., 2015, P WORKSH END US DEV, V12, P81
   Calvary G, 2003, INTERACT COMPUT, V15, P289, DOI 10.1016/S0953-5438(03)00010-9
   Chishiro H, 2009, PROCEEDINGS OF THE 12TH IEEE INTERNATIONAL SYMPOSIUM ON OBJECT/COMPONENT/SERVICE-ORIENTED REAL-TIME DISTRIBUTED COMPUTING, P161, DOI 10.1109/ISORC.2009.40
   Ciccozzi F, 2016, IEEE ACCESS, V4, P6451, DOI 10.1109/ACCESS.2016.2613642
   Collett TobyHJ., 2005, Proceedings of the Australasian Conference on Robotics and Automation (ACRA 2005), P145
   da Silva AR, 2015, COMPUT LANG SYST STR, V43, P139, DOI 10.1016/j.cl.2015.06.001
   Danado J, 2014, J VISUAL LANG COMPUT, V25, P297, DOI 10.1016/j.jvlc.2014.03.005
   Dann W.P., 2011, Learning to Program with Alice (w/CD ROM)
   Dhouib Saadia, 2012, Simulation, Modeling, and Programming for Autonomous Robots. Proceedings of the Third International Conference, SIMPAR 2012, P149, DOI 10.1007/978-3-642-34327-8_16
   Di Ruscio D, 2014, MORSE STAF, P16
   Di Ruscio D, 2013, LECT NOTES COMPUT SC, V8166, P33, DOI 10.1007/978-3-642-40894-6_3
   Dragule S, 2017, LECT NOTES COMPUT SC, V10479, P45, DOI 10.1007/978-3-319-65948-0_4
   Elkady A, 2012, J ROBOT, V2012, DOI 10.1155/2012/959013
   France R, 2007, FOSE 2007: FUTURE OF SOFTWARE ENGINEERING, P37, DOI 10.1109/FOSE.2007.14
   Garlan D, 2004, COMPUTER, V37, P46, DOI 10.1109/MC.2004.175
   Glas DF, 2016, ACMIEEE INT CONF HUM, P303, DOI 10.1109/HRI.2016.7451766
   Glas DF, 2012, ROBOTICS: SCIENCE AND SYSTEMS VII, P89
   Green TRG, 1996, J VISUAL LANG COMPUT, V7, P131, DOI 10.1006/jvlc.1996.0009
   He YQ, 2008, SCI COLD ARID REG, P59
   Heckel Reiko., 2003, Electronic Notes in Theoretical Computer Science, V82, P33
   Hils D. D., 1992, Journal of Visual Languages and Computing, V3, P69, DOI 10.1016/1045-926X(92)90034-J
   Hoang DD, 2010, LECT NOTES COMPUT SC, V6470, P273, DOI 10.1007/978-3-642-17358-5_19
   Huang J, 2017, ACMIEEE INT CONF HUM, P453, DOI 10.1145/2909824.3020215
   Huang J, 2016, ACMIEEE INT CONF HUM, P295, DOI 10.1109/HRI.2016.7451765
   Huebscher MC, 2008, ACM COMPUT SURV, V40, DOI 10.1145/1380584.1380585
   Humble J, 2003, LECT NOTES COMPUT SC, V2864, P256
   Jackson J, 2007, IEEE ROBOT AUTOM MAG, V14, P82, DOI 10.1109/M-RA.2007.905745
   Jang C, 2010, ETRI J, V32, P646, DOI [10.4218/etrij.101510.0138, 10.4218/etrij.10.1510.0138]
   Jouault F, 2008, SCI COMPUT PROGRAM, V72, P31, DOI 10.1016/j.scico.2007.08.002
   Keppmann F.L., 2015, SALAD ESWC, P10
   Kim SJ, 2018, PROGR IS, P339, DOI 10.1007/978-3-319-64027-3_23
   Ko AJ, 2011, ACM COMPUT SURV, V43, DOI 10.1145/1922649.1922658
   Ko AJ, 2009, IEEE SOFTWARE, V26, P16, DOI 10.1109/MS.2009.129
   Kolovos DS, 2008, LECT NOTES COMPUT SC, V5063, P46, DOI 10.1007/978-3-540-69927-9_4
   Kortuem G, 2013, COMPUTER, V46, P53, DOI 10.1109/MC.2012.390
   Kramer J, 2007, FOSE 2007: FUTURE OF SOFTWARE ENGINEERING, P259, DOI 10.1109/FOSE.2007.19
   Lieberman H, 2006, END USER DEV EMERGIN, P1, DOI DOI 10.1007/1-4020-5386-X_1
   Lin J, 2009, ELE COM ENG, P98
   Lourens T., 2004, Proceedings of the 28th Annual International Computer Software and Applications Conference. COMPSAC 2004, P10, DOI 10.1109/CMPSAC.2004.1342799
   Lourens T, 2011, LECT NOTES COMPUT SC, V6686, P212, DOI 10.1007/978-3-642-21344-1_23
   Makarenko A., 2006, International Conference on Intelligent Robots and Systems, Beijing, China, P163
   Marron Assaf., 2012, Proceedings of the 2nd edition on Programming systems, languages and applications based on actors, agents, and decentralized control abstractions - AGERE!'12, page, P59
   Millner A, 2011, PROCEEDINGS OF IDC 2011: THE 10TH INTERNATIONAL CONFERENCE ON INTERACTION DESIGN AND CHILDREN (IDC2011), P250
   Mohamed N, 2009, INT J COMPUT SCI NET, V9, P139
   Mussa M, 2009, INT CONF QUAL SOFTW, P167, DOI 10.1109/QSIC.2009.30
   Namoshe M, 2008, I C MECH MACH VIS PR, P189, DOI 10.1109/MMVIP.2008.4749531
   Pasternak E, 2017, 2017 IEEE BLOCKS AND BEYOND WORKSHOP (B&B), P21, DOI 10.1109/BLOCKS.2017.8120404
   Pot E., 2009, RO-MAN 2009 - The 18th IEEE International Symposium on Robot and Human Interactive Communication, P46, DOI 10.1109/ROMAN.2009.5326209
   Qichen H., 2014, ARDUBLOCK
   Quigley M, 2009, IEEE INT CONF ROBOT, P3604
   Salehie M, 2009, ACM T AUTON ADAP SYS, V4, DOI 10.1145/1516533.1516538
   Sauppé A, 2014, 32ND ANNUAL ACM CONFERENCE ON HUMAN FACTORS IN COMPUTING SYSTEMS (CHI 2014), P1439, DOI 10.1145/2556288.2557057
   Schlegel C., 2012, ROBOT SYST APPL CONT
   Schlegel C, 2010, LECT NOTES ARTIF INT, V6472, P324, DOI 10.1007/978-3-642-17319-6_31
   Seraj M, 2019, PROCEEDINGS OF ACM INTERACTION DESIGN AND CHILDREN (IDC 2019), P146, DOI 10.1145/3311927.3323157
   Steinberg D., 2008, EMF: Eclipse Modeling Framework, Vsecond
   Stenmark M, 2017, ACMIEEE INT CONF HUM, P463, DOI 10.1145/2909824.3020227
   Thomas U, 2013, IEEE INT CONF ROBOT, P461, DOI 10.1109/ICRA.2013.6630615
   Utz H, 2002, IEEE T ROBOTIC AUTOM, V18, P493, DOI 10.1109/TRA.2002.802930
   van Allen P., NETLAB TOOLKIT
   Weintrop D, 2017, 2017 IEEE BLOCKS AND BEYOND WORKSHOP (B&B), P29, DOI 10.1109/BLOCKS.2017.8120406
   Wenger M, 2016, IEEE INT C EMERG
   Yamashita S, 2017, LECT NOTES COMPUT SC, V10611, P597, DOI 10.1007/978-3-319-69926-4_49
   Zimmermann-Niefield A, 2019, PROCEEDINGS OF ACM INTERACTION DESIGN AND CHILDREN (IDC 2019), P121, DOI 10.1145/3311927.3323139
NR 93
TC 6
Z9 7
U1 0
U2 13
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29a, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 1
PY 2020
VL 200
AR 102534
DI 10.1016/j.scico.2020.102534
PG 36
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA NZ8II
UT WOS:000577344900004
OA Green Accepted
DA 2024-07-18
ER

PT J
AU Basile, D
   ter Beek, MH
   Degano, P
   Legay, A
   Ferrari, GL
   Gnesi, S
   Di Giandomenico, F
AF Basile, Davide
   ter Beek, Maurice H.
   Degano, Pierpaolo
   Legay, Axel
   Ferrari, Gian-Luigi
   Gnesi, Stefania
   Di Giandomenico, Felicita
TI Controller synthesis of service contracts with variability
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Supervisory control theory; Contract automata; Service orchestrations;
   Variability; Behavioural variability
ID SUPERVISORY CONTROL; AUTOMATA; MODELS
AB Service contracts characterise the desired behavioural compliance of a composition of services. Compliance is typically defined by the fulfilment of all service requests through service offers, as dictated by a given Service-Level Agreement (SLA). Contract automata are a recently introduced formalism for specifying and composing service contracts. Based on the notion of synthesis of the most permissive controller from Supervisory Control Theory, a safe orchestration of contract automata can be computed that refines a composition into a compliant one.
   To model more fine-grained SLA and more adaptive service orchestrations, in this paper we endow contract automata with two orthogonal layers of variability: (i) at the structural level, constraints over service requests and offers define different configurations of a contract automaton, depending on which requests and offers are selected or discarded, and (ii) at the behavioural level, service requests of different levels of criticality can be declared, which induces the novel notion of semi-controllability. The synthesis of orchestrations is thus extended to respect both the structural and the behavioural variability constraints. Finally, we show how to efficiently compute the orchestration of all configurations from only a subset of these configurations. A prototypical tool supports the developed theory. (C) 2019 The Authors. Published by Elsevier B.V.
C1 [Basile, Davide; ter Beek, Maurice H.; Gnesi, Stefania; Di Giandomenico, Felicita] ISTI CNR, Pisa, Italy.
   [Degano, Pierpaolo; Ferrari, Gian-Luigi] Univ Pisa, Pisa, Italy.
   [Basile, Davide] Univ Firenze, Florence, Italy.
   [Legay, Axel] Catholic Univ Louvain, Louvain, Belgium.
C3 Consiglio Nazionale delle Ricerche (CNR); Istituto di Scienza e
   Tecnologie dell'Informazione "Alessandro Faedo" (ISTI-CNR); University
   of Pisa; University of Florence; Universite Catholique Louvain
RP Basile, D (corresponding author), Univ Firenze, Florence, Italy.
EM davide.basile@isti.cnr.it
RI Ferrari, Gianluigi/P-6805-2016; Di Giandomenico, Felicita/AAY-7572-2020;
   BASILE, Davide/AAX-1112-2020; Beek, Maurice H ter/N-5563-2015
OI Ferrari, Gianluigi/0000-0001-6688-0934; BASILE,
   Davide/0000-0002-7196-6609; Beek, Maurice H ter/0000-0002-2930-6367;
   FERRARI, GIAN-LUIGI/0000-0003-3548-5514
CR Acciai L, 2013, SCI COMPUT PROGRAM, V78, P248, DOI 10.1016/j.scico.2011.10.007
   Aceto L, 2008, BULL EUR ASSOC THEOR, P94
   [Anonymous], [No title captured]
   [Anonymous], 2011, P 15 INT SOFTW PROD
   [Anonymous], 1951, STUDIES LOGIC FDN MA
   [Anonymous], 1989, CWI Q.
   [Anonymous], [No title captured]
   [Anonymous], 2016, Feature-Oriented Software Product Lines
   [Anonymous], [No title captured]
   Azzopardi S, 2016, ARTIF INTELL LAW, V24, P203, DOI 10.1007/s10506-016-9185-2
   Baresi L, 2012, COMPUTER, V45, P42, DOI 10.1109/MC.2012.289
   Bartoletti M, 2015, LECT NOTES COMPUT SC, V9465, P103, DOI 10.1007/978-3-319-25527-9_9
   Basile D, 2016, J LOG ALGEBR METHODS, V85, P425, DOI 10.1016/j.jlamp.2015.09.011
   Basile D., 2017, P 11 INT WORKSH VAR, P20, DOI DOI 10.1145/3023956.3023965
   Basile D, 2020, INNOV SYST SOFTW ENG, V16, P199, DOI 10.1007/s11334-019-00353-3
   Basile D, 2019, INT J SOFTW TOOLS TE, V21, P679, DOI 10.1007/s10009-019-00533-3
   Basile D, 2018, LECT NOTES COMPUT SC, V11181, P31, DOI 10.1007/978-3-030-00359-3_3
   Basile D, 2019, LECT NOTES COMPUT SC, V11533, P129, DOI 10.1007/978-3-030-22397-7_8
   Basile D, 2016, LOG METH COMPUT SCI, V12, DOI 10.2168/LMCS-12(4:6)2016
   Basile D, 2016, LECT NOTES COMPUT SC, V9688, P62, DOI 10.1007/978-3-319-39570-8_5
   Batory D, 2005, LECT NOTES COMPUT SC, V3714, P7
   Benavides D, 2010, INFORM SYST, V35, P615, DOI 10.1016/j.is.2010.01.001
   Bouguettaya A, 2017, COMMUN ACM, V60, P64, DOI 10.1145/2983528
   Bruni R, 2008, LECT NOTES COMPUT SC, V5052, P67, DOI 10.1007/978-3-540-68265-3_5
   Cassandras ChristosG., 2006, INTRO DISCRETE EVENT
   Castagna G, 2012, LOG METH COMPUT SCI, V8, DOI 10.2168/LMCS-8(1:24)2012
   Castagna G, 2009, ACM T PROGR LANG SYS, V31, DOI 10.1145/1538917.1538920
   Classen A, 2013, IEEE T SOFTWARE ENG, V39, P1069, DOI 10.1109/TSE.2012.86
   Cordy M, 2012, PROC INT CONF SOFTW, P672, DOI 10.1109/ICSE.2012.6227150
   Czarnecki K, 2007, SPLC 2007: 11TH INTERNATIONAL SOFTWARE PRODUCT LINE CONFERENCE, PROCEEDINGS, P23, DOI 10.1109/SPLINE.2007.24
   de Alfaro L., 2001, Software Engineering Notes, V26, P109, DOI 10.1145/503271.503226
   Dezani-Ciancaglini M, 2010, LECT NOTES COMPUT SC, V6194, P1, DOI 10.1007/978-3-642-14458-5_1
   Georgakopoulos D, 2008, COOP INFORM SYST, P1
   Honda K, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P273, DOI 10.1145/2827695
   Hüttel H, 2016, ACM COMPUT SURV, V49, DOI 10.1145/2873052
   Istoan Paul, 2009, Proceedings of the 2009 Ninth IEEE International Conference on Computer and Information Technology. CIT 2009, P193, DOI 10.1109/CIT.2009.54
   Kretínsky J, 2017, LECT NOTES COMPUT SC, V10460, P36, DOI 10.1007/978-3-319-63121-9_3
   Laneve C, 2015, FORM ASP COMPUT, V27, P613, DOI 10.1007/s00165-015-0334-2
   Lee J, 2012, COMPUTER, V45, P49, DOI 10.1109/MC.2012.284
   Lee J, 2010, J SYST SOFTWARE, V83, P1123, DOI 10.1016/j.jss.2010.01.048
   Lee J, 2010, IEEE SOFTWARE, V27, P35, DOI 10.1109/MS.2010.30
   Mannion M., 2002, Software Product Lines. Second International Conference, SPLC 2. Proceedings (Lecture Notes in Computer Science Vol. 2370), P176
   Meinicke J, 2017, MASTERING SOFTWARE V, DOI DOI 10.1007/978-3-319-61443-4
   Michaux J, 2013, J LOGIC ALGEBR PROGR, V82, P282, DOI 10.1016/j.jlap.2013.05.004
   Nyman U, 2007, LECT NOTES COMPUT SC, V4421, P64
   Pohl K., 2005, SOFTWARE PRODUCT LIN, V10
   RAMADGE PJ, 1987, SIAM J CONTROL OPTIM, V25, P206, DOI 10.1137/0325013
   ter Beek M., 2007, P 2 INT C INT WEB AP
   ter Beek MH, 2011, ELECTRON PROC THEOR, P34, DOI 10.4204/EPTCS.61.3
   ter Beek MH, 2016, LECT NOTES COMPUT SC, V9952, P856, DOI 10.1007/978-3-319-47166-2_59
   ter Beek MH, 2016, J LOG ALGEBR METHODS, V85, P287, DOI 10.1016/j.jlamp.2015.11.006
   Wright Von, 1951, Mind, V60, P1, DOI [10.1093/mind/LX.237.1, DOI 10.1093/MIND/LX.237.1]
   Yu Q, 2008, VLDB J, V17, P537, DOI 10.1007/s00778-006-0020-3
NR 53
TC 13
Z9 13
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29a, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 15
PY 2020
VL 187
AR 102344
DI 10.1016/j.scico.2019.102344
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA KM2YN
UT WOS:000513988800001
OA hybrid, Green Published
DA 2024-07-18
ER

PT J
AU Rusu, V
   Grimaud, G
   Hauspie, M
AF Rusu, Vlad
   Grimaud, Gilles
   Hauspie, Michael
TI Proving partial-correctness and invariance properties of
   transition-system models
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 12th International Symposium on Theoretical Aspects of Software
   Engineering (TASE)
CY AUG 29-31, 2018
CL Guangzhou, PEOPLES R CHINA
SP Jinan Univ, Coll Informat Sci, IEEE Comp Soc, Jinan Univ
DE Formal verification; Coinduction; Coq proof assistant; Reachability
   Logic; Hypervisor
AB We propose an approach for proving partial-correctness and invariance properties of transition systems, and illustrate it on a model of a security hypervisor.
   Regarding partial correctness, we generalise the recently introduced formalism of Reachability Logic, currently used as a language-parametric logic for programs, to transition systems. We propose a coinductive proof system for the resulting logic, which can be seen as performing an "infinite symbolic execution" of the transition-system model under verification. We embed the proof system in the Coq proof assistant and formally prove its soundness and completeness.
   The soundness result provides us with a Coq-certified Reachability-Logic prover for transition-system models. The completeness result, although more theoretical in nature, also has a practical value, as it suggests a proof strategy that is able to deal with all valid formulas on a given transition system.
   The complete proof strategy reduces partial correctness to invariance. For the latter we propose an incremental verification technique for dealing with the case-explosion problem that is known to affect it. All these combined techniques were instrumental in enabling us to prove, within reasonable time and effort limits, that the nontrivial algorithm implemented in a simple hypervisor that we designed in earlier work meets its expected functional requirements. (C) 2019 Elsevier B.V. All rights reserved.
C1 [Rusu, Vlad] INRIA, Lille, France.
   [Grimaud, Gilles; Hauspie, Michael] Univ Lille, Lille, France.
C3 Inria; Universite de Lille
RP Rusu, V (corresponding author), INRIA, Lille, France.
EM Vlad.Rusu@inria.fr; Gilles.Grimaud@univ-lille.fr;
   Michael.Hauspie@univ-lille.fr
FU European Celtic-Plus Project [ODSI C2014/2-12]
FX This work was partially funded by the European Celtic-Plus Project ODSI
   C2014/2-12.
CR [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], 1992, TEMPORAL LOGIC REACT, DOI DOI 10.1007/978-1-4612-0931-7
   [Anonymous], [No title captured]
   [Anonymous], 2003, ACM SIGOPS OPERATING
   [Anonymous], [No title captured]
   Blanchard Allan, 2015, Formal Methods for Industrial Critical Systems. 20th International Workshop, FMICS 2015. Proceedings: LNCS 9128, P15, DOI 10.1007/978-3-319-19458-5_2
   Bugnion E, 1997, ACM T COMPUT SYST, V15, P412, DOI [10.1145/265924.265930, 10.1145/269005.266672]
   Chlipala A, 2013, ACM SIGPLAN NOTICES, V48, P391, DOI [10.1145/2544174.2500592, 10.1145/2500365.2500592]
   Ciobâca S, 2018, LECT NOTES ARTIF INT, V10900, P295, DOI 10.1007/978-3-319-94205-6_20
   Cousineau D., 2012, LECT NOTES COMPUTER, V7436, P147, DOI 10.1007/978-3-642-32759-914
   Dam M., 2013, 2013 ACM SIGSAC C CO, P223
   De Giacomo Giuseppe., International Joint Conference on Artificial Intelligence, IJCAI. IJCAI/AAAI, P854, DOI DOI 10.5555/2540128.2540252
   Gimenez E., 1996, THESIS
   Gu RH, 2016, PROCEEDINGS OF OSDI'16: 12TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P653
   HOARE CAR, 1969, COMMUN ACM, V12, P576, DOI 10.1145/363235.363259
   Klein G, 2010, COMMUN ACM, V53, P107, DOI 10.1145/1743546.1743574
   Leinenbach D, 2009, LECT NOTES COMPUT SC, V5850, P806, DOI 10.1007/978-3-642-05089-3_51
   Lucanu D, 2017, J SYMB COMPUT, V80, P125, DOI 10.1016/j.jsc.2016.07.012
   Moore Brandon, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P589, DOI 10.1007/978-3-319-89884-1_21
   Rosu G, 2013, IEEE S LOG, P358, DOI 10.1109/LICS.2013.42
   Rosu G, 2012, ACM SIGPLAN NOTICES, V47, P555, DOI 10.1145/2398857.2384656
   Rosu G, 2012, LECT NOTES COMPUT SC, V7392, P351, DOI 10.1007/978-3-642-31585-5_33
   Rtefanescu Andrei, 2014, Rewriting and Typed Lambda Calculi. Joint International Conference, RTA-TLCA 2014, Held as Part of the Vienna Summer of Logic, VSL 2014. Proceedings: LNCS 8560, P425, DOI 10.1007/978-3-319-08918-8_29
   Rusu V, 2018, PROCEEDINGS 2018 12TH INTERNATIONAL SYMPOSIUM ON THEORETICAL ASPECTS OF SOFTWARE ENGINEERING (TASE 2018), P60, DOI 10.1109/TASE.2018.00016
   Stefanescu A, 2016, ACM SIGPLAN NOTICES, V51, P74, DOI [10.1145/2983990.2984027, 10.1145/3022671.2984027]
   Vasudevan A, 2013, P IEEE S SECUR PRIV, P430, DOI 10.1109/SP.2013.36
NR 27
TC 1
Z9 1
U1 0
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29a, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 1
PY 2020
VL 186
AR 102342
DI 10.1016/j.scico.2019.102342
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA JU4MS
UT WOS:000501652300003
OA Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Kappé, T
   Lion, B
   Arbab, F
   Talcott, C
AF Kappe, Tobias
   Lion, Benjamin
   Arbab, Farhad
   Talcott, Carolyn
TI Soft component automata: Composition, compilation, logic, and
   verification
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Compositionality; Diagnosis; Soft preference; Compilation; Verification
ID CHANNEL-BASED COORDINATION; WEIGHTED AUTOMATA; FAILURE DIAGNOSIS; REO;
   CONNECTORS; MODEL
AB The design of a complex system warrants a compositional methodology, i.e., composing simple components to obtain a system that meaningfully exhibits their collective behavior. We propose an automaton-based paradigm for compositional design of such systems where an action is accompanied by one or more preferences. At run-time, these preferences provide a natural fallback mechanism for the component, while at design-time they can be used to reason about the behavior of the component in an uncertain physical world. Using algebraic structures on preferences and actions, we can compose formal representations of individual components or agents to obtain a representation of the composed system, exhibiting intuitively meaningful behavior.
   We extend linear temporal logic with two unary connectives that reflect the compositional structure of actions, and show that it is decidable whether all behaviors of a given automaton satisfy a formula of this extended logic. We then show how this logic can be used to diagnose undesired behavior by tracing the falsification of a specification back to one or more culpable components. Lastly, we implement a toolchain that compiles our automata to Maude, allowing us to apply the rich model checking capability of Maude to verify agent behavior. (C) 2019 Elsevier B.V. All rights reserved.
C1 [Kappe, Tobias] UCL, London, England.
   [Lion, Benjamin; Arbab, Farhad] Ctr Wiskunde & Informat, Amsterdam, Netherlands.
   [Arbab, Farhad] Leiden Univ, LIACS, Leiden, Netherlands.
   [Talcott, Carolyn] SRI Int, 333 Ravenswood Ave, Menlo Pk, CA 94025 USA.
C3 University of London; University College London; Leiden University;
   Leiden University - Excl LUMC; SRI International
RP Kappé, T (corresponding author), UCL, London, England.
EM tkappe@cs.ucl.ac.uk
OI Kappe, Tobias/0000-0002-6068-880X
FU ONR [N00014-15-1-2202]; ERC Starting Grant ProFoundNet [679127];
   European Research Council (ERC) [679127] Funding Source: European
   Research Council (ERC)
FX The authors would like to thank Vivek Nigam and the anonymous referees
   for their valuable feedback. This work was partially supported by ONR
   grant N00014-15-1-2202 and the ERC Starting Grant ProFoundNet (grant
   code 679127).
CR [Anonymous], 2001, An Automata Theoretic Approach to Branching
   Arbab F, 2004, MATH STRUCT COMP SCI, V14, P329, DOI 10.1017/S0960129504004153
   Arbab F., 2013, P WEB SERV FORM METH, V7843, P118
   Baier C, 2006, SCI COMPUT PROGRAM, V61, P75, DOI 10.1016/j.scico.2005.10.008
   Baier C, 2014, FUND INFORM, V130, P1, DOI 10.3233/FI-2014-980
   Baier C, 2010, LECT NOTES COMPUT SC, V6416, P97, DOI 10.1007/978-3-642-16561-0_15
   Bharadwaj VG, 2003, IEEE 4TH INTERNATIONAL WORKSHOP ON POLICIES FOR DISTRIBUTED SYSTEMS AND NETWORKS, PROCEEDINGS, P111, DOI 10.1109/POLICY.2003.1206965
   Bistarelli S, 1997, J ACM, V44, P201, DOI 10.1145/256303.256306
   Bistarelli S, 1995, INT JOINT CONF ARTIF, P624, DOI 10.1007/978-3-540-68679-8_11
   Bistarelli S., 2004, LNCS, V2962
   Buchi J. R, 1990, Studies in Logic and the Foundations of Mathematics, P425, DOI [10.1007/978-1-4613-8928-6_23, DOI 10.1007/978-1-4613-8928-6_23]
   Casanova P, 2014, 9TH INTERNATIONAL SYMPOSIUM ON SOFTWARE ENGINEERING FOR ADAPTIVE AND SELF-MANAGING SYSTEMS (SEAMS 2014), P75, DOI 10.1145/2593929.2593946
   Clarke D, 2011, SCI COMPUT PROGRAM, V76, P681, DOI 10.1016/j.scico.2010.05.004
   Clavel Manuel, 2007, Lecture Notes in Computer Science, V4350, DOI [10.1007/978-3-540-71999-1, DOI 10.1007/978-3-540-71999-1]
   de Bakker J.W., 1989, LECT NOTES COMPUT SC, V354, P365
   Debouk R, 2000, DISCRETE EVENT DYN S, V10, P33, DOI 10.1023/A:1008335115538
   Dokter Kasper, 2018, Coordination Models and Languages. 20th IFIP WG 6.1 International Conference, COORDINATION 2018. Held as Part of the 13th International Federated Conference on Distributed Computing Techniques, DisCoTec 2018. Proceedings: LNCS 10852, P142, DOI 10.1007/978-3-319-92408-3_6
   Dokter K., 2018, TREO TEXTUAL SYNTAX
   Droste M, 2010, RUSS MATH, V54, P26, DOI 10.3103/S1066369X10010044
   Droste M, 2009, MONOGR THEOR COMPUT, P1, DOI 10.1007/978-3-642-01492-5
   Droste M, 2007, THEOR COMPUT SCI, V380, P69, DOI 10.1016/j.tcs.2007.02.055
   Emerson E. A., 1986, STACS 86. 3rd Annual Symposium on Theoretical Aspects of Computer Science, P21
   EMERSON EA, 1987, SCI COMPUT PROGRAM, V8, P275, DOI 10.1016/0167-6423(87)90036-0
   Gadducci Fabio, 2013, Advances in Artificial Intelligence and Its Applications. 12th Mexican International Conference on Artificial Intelligence, MICAI 2013. Proceedings: LNCS 8265, P68, DOI 10.1007/978-3-642-45114-0_6
   Gossler Gregor, 2015, Trustworthy Global Computing. 10th International Symposium (TGC 2015). Revised Selected Papers: LNCS 9533, P79, DOI 10.1007/978-3-319-28766-9_6
   GOssler G., 2014, P EMB SOFTW EMSOFT
   Hölzl M, 2009, ELECTRON NOTES THEOR, V238, P189, DOI 10.1016/j.entcs.2009.05.020
   Huttel H., 1989, P LOG BOT S LOG FDN, P163
   Jongmans S.S.T., 2015, THESIS
   Jongmans SSTQ, 2017, SCI COMPUT PROGRAM, V146, P50, DOI 10.1016/j.scico.2017.03.006
   Jongmans SSTQ, 2012, SCI ANN COMPUT SCI, V22, P201, DOI 10.7561/SACS.2012.1.201
   Kappe T., 2016, THESIS
   Kappe T., 2017, COMPONENT ORIENTED F
   Kappé T, 2017, LECT NOTES COMPUT SC, V10487, P20, DOI 10.1007/978-3-319-68034-7_2
   Kappé T, 2016, ELECTRON P THEOR COM, P21, DOI 10.4204/EPTCS.232.6
   Kim M., 2018, TECHNICAL REPORT
   Koehler C., 2009, P SAC 2009, P1369, DOI DOI 10.1145/1529282.1529587
   Laurent J, 2018, PROCEEDINGS OF THE TWENTY-SEVENTH INTERNATIONAL JOINT CONFERENCE ON ARTIFICIAL INTELLIGENCE, P1882
   Martí-Oliet N, 2009, ELECTRON NOTES THEOR, V238, P227, DOI 10.1016/j.entcs.2009.05.022
   Mason I.A., 2017, P WORKSH FORM COS CY
   MIYANO S, 1984, THEOR COMPUT SCI, V32, P321, DOI 10.1016/0304-3975(84)90049-5
   Muller D. E., 1988, Proceedings of the Third Annual Symposium on Logic in Computer Science (Cat. No.88CH2608-8), P422, DOI 10.1109/LICS.1988.5139
   Neidig J., 2005, IFAC P, V38, P400
   Proença J, 2011, ELECTRON PROC THEOR, P65, DOI 10.4204/EPTCS.58.5
   REYNOLDS JC, 1970, COMMUN ACM, V13, P308, DOI 10.1145/362349.362364
   Rutten JJMM, 2005, MATH STRUCT COMP SCI, V15, P93, DOI 10.1017/S0960129504004517
   Sampath M, 1996, IEEE T CONTR SYST T, V4, P105, DOI 10.1109/87.486338
   SCHUTZENBERGER MP, 1961, INFORM CONTROL, V4, P245, DOI 10.1016/S0019-9958(61)80020-X
   Talcott Carolyn, 2015, Software, Services and Systems: Essays Dedicated to Martin Wirsing on the Occasion of his Retirement from the Chair of Programming and Software Engineering: LNCS 8950, P273
   Talcott C, 2016, LECT NOTES COMPUT SC, V9700, P1, DOI 10.1007/978-3-319-34096-8_1
   VARDI MY, 1994, INFORM COMPUT, V115, P1, DOI 10.1006/inco.1994.1092
   Vardi MY, 1995, LECT NOTES COMPUTER, P238, DOI DOI 10.1007/3-540-60915-6
NR 52
TC 4
Z9 4
U1 0
U2 4
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 1
PY 2019
VL 183
AR 102300
DI 10.1016/j.scico.2019.08.001
PG 28
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA JF8DA
UT WOS:000491614000001
OA Green Published, Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Nogueira, S
   Araujob, H
   Araujo, R
   Iyoda, J
   Sampaio, A
AF Nogueira, Sidney
   Araujob, Hugo
   Araujo, Renata
   Iyoda, Juliano
   Sampaio, Augusto
TI Test case generation, selection and coverage from natural language
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 18th Brazilian Symposium on Formal Methods (SBMF) as part of 6th
   Brazilian Conference on Software - Theory and Practice (CBSoft)
CY SEP 21-22, 2015-2018
CL Belo Horizonte, BRAZIL
DE Test generation; Natural language; Use case models
ID REQUIREMENTS
AB In Model-based Testing (MBT), test cases are automatically generated from a formal model of the system. A disadvantage of MBT is that developers must deal with formal notations. This limitation is addressed in this paper, where use cases are used to model the system. In previous work, we have proposed an automatic strategy for generating test cases from use cases written in a Controlled Natural Language (CNL), which is an English textual notation with a well-defined grammar. Due to its precise syntax, it can be processed and translated into a formal representation for the purpose of automatic test case generation. This paper extends our previous work by proposing a state-based CNL for describing use case control flows enriched with state and data operations. We translate state-based use case descriptions into CSP processes from which test cases can be automatically generated. In addition, we show how a similar notation can be used to specify test selection via the definition of state-based test purposes, which are also translated into CSP processes. Test generation and selection are mechanised by refinement checking using the CSP tool FDR. Despite the fact that we work at a purely process algebraic level to define a test generation strategy, we are able to address model coverage criteria. Particularly, by using FDR, it is possible to have access to the underlying LTS models; we then implemented algorithms for covering events or transitions, possibly combined with selection using test purposes. We also discuss several ways of improving the efficiency of the test generation strategy. As far as we are aware, this integration between an algebraic approach to test case generation with an operational approach for coverage criteria is an original and promising insight. All steps of the strategy are integrated into a tool that provides a GUI for authoring use cases and test purposes described in the proposed CNL, so the formal CSP notation is completely hidden from the test designer. We illustrate our tool and techniques with a running example and a more elaborate case study taken from an industrial setting. (C) 2019 Elsevier B.V. All rights reserved.
C1 [Nogueira, Sidney] Univ Fed Rural Pernambuco, Dept Comp, Recife, PE, Brazil.
   [Araujob, Hugo; Araujo, Renata; Iyoda, Juliano; Sampaio, Augusto] Univ Fed Pernambuco, Ctr Informat, Recife, PE, Brazil.
   [Araujob, Hugo] Motorola Ind Ltda, Mobile Devices R&D, Sao Paulo, Brazil.
C3 Universidade Federal Rural de Pernambuco (UFRPE); Universidade Federal
   de Pernambuco
RP Nogueira, S (corresponding author), Univ Fed Rural Pernambuco, Dept Comp, Recife, PE, Brazil.; Iyoda, J; Sampaio, A (corresponding author), Univ Fed Pernambuco, Ctr Informat, Recife, PE, Brazil.
EM sidney.nogueira@ufrpe.br; hlsa@cin.ufpe.br; rbsa@cin.ufpe.br;
   jmi@cin.ufpe.br; acas@cin.ufpe.br
RI de Araujo, Renata Mendes/M-1155-2013
OI de Araujo, Renata Mendes/0000-0002-8674-1728; Nogueira,
   Sidney/0000-0002-8817-5029; Iyoda, Juliano Manabu/0000-0001-7137-8287
FU Cln/UFPE-Motorola Cooperation Project on Software Validation and Test
   Case Automation [UFPE/Motorola/FADE-85/2017]; Instituto Nacional de
   Ciencia e Tecnologia para Engenharia de Software (National Institute of
   Science and Technology for Software Engineering) [CNPq/465614/2014-0,
   FACEPE/APQ10388-1.03/14]
FX This work was supported by the Cln/UFPE-Motorola Cooperation Project on
   Software Validation and Test Case Automation (Agreement
   UFPE/Motorola/FADE-85/2017) and by the Instituto Nacional de Ciencia e
   Tecnologia para Engenharia de Software (National Institute of Science
   and Technology for Software Engineering), Grants CNPq/465614/2014-0 and
   FACEPE/APQ10388-1.03/14.
CR Aichernig BK, 2017, INT J SOFTW TOOLS TE, V19, P409, DOI 10.1007/s10009-016-0444-z
   Arruda Filipe, 2016, P INT C SOFTWARE ENG, P420
   Boddu R, 2004, 12TH IEEE INTERNATIONAL REQUIREMENTS ENGINEERING CONFERENCE, PROCEEDINGS, P262
   Brottier E., 2007, P 11 IEEE INT ENT DI
   Carvalho G., 2013, SAC, P1217
   Carvalho G., 2014, INT WORKSHOP FORMAL, P19, DOI DOI 10.1007/978-3-319-05416-2_3
   Carvalho G, 2015, LECT NOTES COMPUT SC, V9276, P283, DOI 10.1007/978-3-319-22969-0_20
   Clarke D, 2002, LECT NOTES COMPUT SC, V2280, P470
   de Santiago VA, 2012, SOFTWARE QUAL J, V20, P77, DOI 10.1007/s11219-011-9155-6
   Drazan J, 2007, LECT NOTES COMPUT SC, V4362, P856
   Ferreira F., 2010, BRAZ C SOFTW THEOR P
   Francescoli G, 2016, SOCIOBIOLOGY OF CAVIOMORPH RODENTS: AN INTEGRATIVE APPROACH, P147
   Freitas L, 2007, ELECTRON NOTES THEOR, V187, P19, DOI 10.1016/j.entcs.2006.08.042
   Gibson-Robinson T., 2014, Lecture Notes in Computer Science, V8413, P187
   Goetze M., 2002, TECH REP
   Hoare CAR., 1985, Communicating Sequential Processes
   Jard C., 2005, International Journal on Software Tools for Technology Transfer, V7, P297, DOI 10.1007/s10009-004-0153-x
   KANELLAKIS PC, 1990, INFORM COMPUT, V86, P43, DOI 10.1016/0890-5401(90)90025-D
   Lee B.-S., 2001, P DOCT WORKSH 5 IEEE
   MacDonell S. G., ARXIV14076099 CORR
   MCAFFER J., 2005, ECLIPSE RICH CLIENT
   MEYER B, 1992, COMPUTER, V25, P40, DOI 10.1109/2.161279
   Nebut C, 2006, IEEE T SOFTWARE ENG, V32, P140, DOI 10.1109/TSE.2006.22
   Nogueira S, 2014, FORM ASP COMPUT, V26, P441, DOI 10.1007/s00165-012-0258-z
   Nogueira Sidney, 2007, 1 BRAZ WORKSH SYST A
   Riebisch M, 2003, LECT NOTES COMPUT SC, V2591, P394
   Roscoe AW, 2010, TEXTS COMPUT SCI, P3, DOI 10.1007/978-1-84882-258-0_1
   Roscoe A.W., 1998, THEORY PRACTICE CONC
   Schwitter R., 1996, CMPLG9603004 CORR
   Selvidge J., 1999, P INT C SOFTW TEST A
   Sinha Avik, 2010, Proceedings of the Third IEEE International Conference on Software Testing, Verification and Validation (ICST 2010), P155, DOI 10.1109/ICST.2010.19
   Somé SS, 2006, INFORM SOFTWARE TECH, V48, P43, DOI 10.1016/j.infsof.2005.02.006
   Somé SS, 2008, APPLIED COMPUTING 2008, VOLS 1-3, P724
   Sun J, 2009, LECT NOTES COMPUT SC, V5643, P709, DOI 10.1007/978-3-642-02658-4_59
   Utting M., 2006, Practical Model-Based Testing
   van Glabbeek R, 2008, LECT NOTES COMPUT SC, V5148, P161, DOI 10.1007/978-3-540-70844-5_17
   Veanes M., 2005, P 10 EUROPEAN SOFTWA, P273, DOI DOI 10.1145/1095430.1081751
   WALTON GH, 1995, SOFTWARE PRACT EXPER, V25, P97, DOI 10.1002/spe.4380250106
   Welch B.B., 2003, PRACTICAL PROGRAMMIN
NR 39
TC 5
Z9 5
U1 1
U2 15
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUL 15
PY 2019
VL 181
BP 84
EP 110
DI 10.1016/j.scico.2019.01.003
PG 27
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA IW0MB
UT WOS:000484654900006
OA hybrid
DA 2024-07-18
ER

PT J
AU Cavalcanti, A
   Sampaio, A
   Miyazawa, A
   Ribeiro, P
   Conserva, M
   Didier, A
   Li, W
   Timmis, J
AF Cavalcanti, Ana
   Sampaio, Augusto
   Miyazawa, Alvaro
   Ribeiro, Pedro
   Conserva Filho, Madiel
   Didier, Andre
   Li, Wei
   Timmis, Jon
TI Verified simulation for robotics
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE State machines; Process algebra; CSP; Semantics; Refinement
ID FINITE-STATE MACHINE; MODEL CHECKING; VERIFICATION; SYSTEMS; SWARM
AB Simulation is a favoured technique for analysis of robotic systems. Currently, however, simulations are programmed in an ad hoc way, for specific simulators, using either proprietary languages or general languages like C or C++. Even when a higher-level language is used, no clear relation between the simulation and a design model is established. We describe a tool-independent notation called RoboSim, designed specifically for modelling of (verified) simulations. We describe the syntax, well-formedness conditions, and semantics of RoboSim. We also show how we can use RoboSim models to check if a simulation is consistent with a functional design written in a UML-like notation akin to those often used by practitioners on an informal basis. We show how to check whether the design enables a feasible scheduling of behaviours in cycles as needed for a simulation, and formalise implicit assumptions routinely made when programming simulations. We develop a running example and three additional case. studies to illustrate RoboSim and the proposed verification techniques. Tool support is also briefly discussed. Our results enable the description of simulations using tool-independent diagrammatic models amenable to verification and automatic generation of code. (C) 2019 Elsevier B.V. All rights reserved.
C1 [Cavalcanti, Ana; Miyazawa, Alvaro; Ribeiro, Pedro] Univ York, Dept Comp Sci, York, N Yorkshire, England.
   [Sampaio, Augusto; Conserva Filho, Madiel; Didier, Andre] Univ Fed Pernambuco, Ctr Informat, Recife, PE, Brazil.
   [Li, Wei; Timmis, Jon] Univ York, Dept Elect Engn, York, N Yorkshire, England.
C3 University of York - UK; Universidade Federal de Pernambuco; University
   of York - UK
RP Cavalcanti, A (corresponding author), Univ York, Dept Comp Sci, York, N Yorkshire, England.; Sampaio, A (corresponding author), Univ Fed Pernambuco, Ctr Informat, Recife, PE, Brazil.
EM Ana.Cavalcanti@york.ac.uk; acas@cin.ufpe.br
RI Miyazawa, Alvaro/M-7118-2019
OI Miyazawa, Alvaro/0000-0003-2233-9091; Cavalcanti, Ana Lucia
   Caneca/0000-0002-0831-1976; Ribeiro, Pedro/0000-0003-4319-4872
FU EPSRC [EP/M025756/1, EP/R025479/1]; Royal Academy of Engineering; INES
   [CNPq/465614/2014-0, FACEPE/APQ10388-1.03/14]; EPSRC [EP/R025479/1,
   EP/M025756/1] Funding Source: UKRI
FX This work is funded by the EPSRC grants EP/M025756/1 and EP/R025479/1,
   by the Royal Academy of Engineering, and by INES, grants
   CNPq/465614/2014-0 and FACEPE/APQ10388-1.03/14. No new primary data was
   created as part of the study reported here. We are grateful to anonymous
   reviewers and James Baxter for detailed comments that helped us improve
   the presentation of our work.
CR Abdellatif T, 2012, ROBOT AUTON SYST, V60, P1563, DOI 10.1016/j.robot.2012.09.005
   Alexandrova S, 2015, IEEE INT CONF ROBOT, P5537, DOI 10.1109/ICRA.2015.7139973
   [Anonymous], 8 INT S ART INT ROB
   [Anonymous], 2014, FUNCT MOCK UP INT MO
   [Anonymous], 2017, PRESENT ULTERIOR SOF, DOI [DOI 10.1007/978-3-319-67425-4_11, 10.1007/978-3-319-67425-4_11]
   [Anonymous], STAT STAT COD 7 US G
   [Anonymous], INT J ADV ROBOT SYST
   [Anonymous], 2018, ARXIV180700048
   Brunner SG, 2016, 2016 IEEE/RSJ INTERNATIONAL CONFERENCE ON INTELLIGENT ROBOTS AND SYSTEMS (IROS 2016), P3283, DOI 10.1109/IROS.2016.7759506
   Cavalcanti A, 2011, FORM ASP COMPUT, V23, P465, DOI 10.1007/s00165-010-0170-3
   Chen JN, 2013, IEEE INT CONF ROBOT, P863, DOI 10.1109/ICRA.2013.6630674
   Desai A, 2017, LECT NOTES COMPUT SC, V10548, P172, DOI 10.1007/978-3-319-67531-2_11
   Dhouib Saadia, 2012, Simulation, Modeling, and Programming for Autonomous Robots. Proceedings of the Third International Conference, SIMPAR 2012, P149, DOI 10.1007/978-3-642-34327-8_16
   Dixon C, 2012, ROBOT AUTON SYST, V60, P1429, DOI 10.1016/j.robot.2012.03.003
   Farrell M, 2018, LECT NOTES COMPUT SC, V11023, P161, DOI 10.1007/978-3-319-98938-9_10
   Foster S, 2016, LECT NOTES COMPUT SC, V9965, P295, DOI 10.1007/978-3-319-46750-4_17
   Foughali M, 2016, LECT NOTES COMPUT SC, V10009, P383, DOI 10.1007/978-3-319-47846-3_24
   Fritzson P., 2004, PRINCIPLES OBJECT OR
   Gerkey BP, 2003, PROCEEDINGS OF THE 11TH INTERNATIONAL CONFERENCE ON ADVANCED ROBOTICS 2003, VOL 1-3, P317
   Gibson-Robinson T., 2014, Lecture Notes in Computer Science, V8413, P187
   Hoare C. A. R., 1998, Unifying Theories of Programming
   Huang J, 2014, LECT NOTES COMPUT SC, V8734, P247, DOI 10.1007/978-3-319-11164-3_20
   Kapellos K, 1999, INT J SYST SCI, V30, P1227, DOI 10.1080/002077299291697
   Klein J., 2003, P 8 INT C ARTIFICIAL, P329
   Klotzbucher M., 2012, Journal of Software Engineering for Robotics, V2, P28
   Li W, 2019, SPR PROC ADV ROBOT, V6, P517, DOI 10.1007/978-3-319-73008-0_36
   Lima Lucas, 2017, Software and Systems Modeling, V16, P875, DOI 10.1007/s10270-015-0492-y
   Luke S, 2005, SIMUL-T SOC MOD SIM, V81, P517, DOI 10.1177/0037549705058073
   Miyazawa A, 2017, IEEE INT C INT ROBOT, P3869, DOI 10.1109/IROS.2017.8206238
   Nordmann A, 2016, Journal of Software Engineering for Robotics, V7, P75
   Oliveira MVM, 2016, FORM ASP COMPUT, V28, P937, DOI 10.1007/s00165-016-0375-1
   Park HW, 2013, IEEE T ROBOT, V29, P331, DOI 10.1109/TRO.2012.2230992
   Pembeci Izzet., 2002, Proceedings of the 4th ACM SIGPLAN International Conference on Principles and Practice of Declarative Programming, PPDP '02, P168
   Pinciroli C, 2012, SWARM INTELL-US, V6, P271, DOI 10.1007/s11721-012-0072-5
   Rabbath CA, 2013, J INTELL ROBOT SYST, V70, P233, DOI 10.1007/s10846-012-9692-7
   Ribeiro Pedro, 2017, Integrated Formal Methods. 13th International Conference, IFM 2017. Proceedings: LNCS 10510, P18, DOI 10.1007/978-3-319-66845-1_2
   Rohmer E, 2013, IEEE INT C INT ROBOT, P1321, DOI 10.1109/IROS.2013.6696520
   Roscoe AW, 2010, TEXTS COMPUT SCI, P3, DOI 10.1007/978-1-84882-258-0_1
   Schneider S, 2000, Concurrent and real-time systems
   Stampfer D., 2016, Journal of Software Engineering for Robotics (JOSER), V7, P3
   Sun J, 2008, COMM COM INF SC, V17, P307
   Tomic T, 2012, IEEE ROBOT AUTOM MAG, V19, P46, DOI 10.1109/MRA.2012.2206473
   Wächter M, 2016, FRONT ROBOT AI, V3, DOI 10.3389/frobt.2016.00033
NR 43
TC 18
Z9 18
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD APR 1
PY 2019
VL 174
BP 1
EP 37
DI 10.1016/j.scico.2019.01.004
PG 37
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA HP2VJ
UT WOS:000461533200001
OA Bronze, Green Accepted
DA 2024-07-18
ER

PT J
AU Gadducci, F
   Melgratti, H
   Roldán, C
AF Gadducci, Fabio
   Melgratti, Hernan
   Roldan, Christian
TI On the semantics and implementation of replicated data types
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Replicated data types; Specification; Implementation correctness
ID SPECIFICATION
AB Replicated data types (Rugs) concern the specification and implementation of data structures handled by replicated data stores, i.e., distributed data stores that maintain copies of the same data item on multiple devices. A distinctive feature of RDTS is that the behaviour of an operation depends on the state of the replica over which it performs, and hence, its result may differ from replica to replica. Abstractly, RDTS are specified in terms of two relations, visibility and arbitration. The former establishes whether an operation observes the effects of the execution of another operation, the latter is a total order on operations used to resolve conflicts between operations executed concurrently over different replicas. Traditionally, an operation of an RDT is specified as a function mapping a visibility and an arbitration into the expected result of the operation. This paper recasts such standard approaches into a denotational framework in which a data type is a function mapping visibility into admissible arbitrations. This characterisation provides a more abstract view of RUTS that (i) highlights some implicit assumptions shared in operational approaches to specification; (ii) accommodates underspecification and refinement; (iii) enables a direct characterisation of the correct implementations of an RDT in terms of a simulation relation between the states of a concrete implementation and of the abstract one determined by the specification.(C) 2018 Published by Elsevier B.V.
C1 [Gadducci, Fabio] Univ Pisa, Dipartimento Informat, Pisa, Italy.
   [Melgratti, Hernan; Roldan, Christian] Univ Buenos Aires, Fac Ciencias Exactas & Nat, Dept Comp, Buenos Aires, DF, Argentina.
   [Melgratti, Hernan] Univ Buenos Aires, CONICET, Inst Invest Ciencias Comp ICC, Buenos Aires, DF, Argentina.
C3 University of Pisa; University of Buenos Aires; University of Buenos
   Aires; Consejo Nacional de Investigaciones Cientificas y Tecnicas
   (CONICET)
RP Roldán, C (corresponding author), Univ Buenos Aires, Fac Ciencias Exactas & Nat, Dept Comp, Buenos Aires, DF, Argentina.
EM fabio.gadducci@unipi.it; hmelgra@dc.uba.ar; croldan@dc.uba.ar
RI GADDUCCI, FABIO/HSE-2262-2023
OI GADDUCCI, FABIO/0000-0003-0690-3051
FU UBACyT [20020130200092BA]; CONICET [PIP 11220130100148CO, 995/15]
FX We thank the anonymous reviewers for their careful reading of our paper
   and their insightful comments. The first author has been partially
   supported by CONICET International Cooperation Grant 995/15. The second
   and third author have been partially supported by UBACyT project
   2014-2017 20020130200092BA and CONICET project PIP 11220130100148CO.
CR Bouajjani A, 2014, ACM SIGPLAN NOTICES, V49, P285, DOI 10.1145/2535838.2535877
   Burckhardt S, 2014, FOUND TRENDS PROGRAM, V1, P2
   Burckhardt S., 2013, MSRTR201339 MICR RES
   Burckhardt S, 2014, ACM SIGPLAN NOTICES, V49, P271, DOI 10.1145/2535838.2535848
   Cerone A., 2015, CONCUR, V42, P58
   EHRICH HD, 1982, J ACM, V29, P206, DOI 10.1145/322290.322303
   Gadducci F, 2017, LECT NOTES COMPUT SC, V10319, P138, DOI 10.1007/978-3-319-59746-1_8
   Gilbert S., 2002, SIGACT News, V33, P51, DOI 10.1145/564585.564601
   Gotsman A, 2016, ACM SIGPLAN NOTICES, V51, P371, DOI 10.1145/2914770.2837625
   Gotsman A, 2015, LECT NOTES COMPUT SC, V9032, P585, DOI 10.1007/978-3-662-46669-8_24
   Guttag J. V., 1976, 2nd International Conference on Software Engineering, P414
   Jagadeesan R, 2015, LECT NOTES COMPUT SC, V9135, P247, DOI 10.1007/978-3-662-47666-6_20
   Shapiro M., 2011, RR7506 IN CTR PAR RO
   Shapiro M, 2011, LECT NOTES COMPUT SC, V6976, P386, DOI 10.1007/978-3-642-24550-3_29
   Sivaramakrishnan KC, 2015, ACM SIGPLAN NOTICES, V50, P413, DOI [10.1145/2813885.2737981, 10.1145/2737924.2737981]
   Terry D. B., 1995, Operating Systems Review, V29, P172, DOI 10.1145/224057.224070
   von Gleissenthall Klaus, 2013, CONCUR 2013 - Concurrency Theory. 24th International Conference, CONCUR 2013. Proceedings: LNCS 8052, P212, DOI 10.1007/978-3-642-40184-8_16
   Wirsing M., 1990, HDB THEORETICAL COMP, VB, P675, DOI [10.1016/B978-0-444-88074-1.50018-4, DOI 10.1016/B978-0-444-88074-1.50018-4]
   Zeller P, 2014, LECT NOTES COMPUT SC, V8461, P33, DOI 10.1007/978-3-662-43613-4_3
NR 19
TC 2
Z9 2
U1 0
U2 1
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 1
PY 2018
VL 167
BP 91
EP 113
DI 10.1016/j.scico.2018.06.003
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GZ1NZ
UT WOS:000449136100006
DA 2024-07-18
ER

PT J
AU McCarthy, J
   Fetscher, B
   New, MS
   Feltey, D
   Findler, RB
AF McCarthy, Jay
   Fetscher, Burke
   New, Max S.
   Feltey, Daniel
   Findler, Robert Bruce
TI A Coq library for internal verification of running-times
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Mechanized proofs; Running-time; Complexity; Coq
AB This paper presents a Coq library that lifts an abstract yet precise notion of running-time into the type of a function. Our library is based on a monad that counts abstract steps. The monad's computational content, however, is simply that of the identity monad so programs written in our monad (that recur on the natural structure of their arguments) extract into idiomatic OCaml code.
   We evaluated the expressiveness of the library by proving that red-black tree insertion and search, merge sort, insertion sort, various Fibonacci number implementations, iterated list insertion, various BigNum operations, and Okasaki's Braun Tree algorithms all have their expected running times. (C) 2017 Elsevier B.V. All rights reserved.
C1 [McCarthy, Jay] Univ Massachusetts Lowell, Lowell, MA 01854 USA.
   [Fetscher, Burke; New, Max S.; Feltey, Daniel; Findler, Robert Bruce] Northwestern Univ, Evanston, IL 60208 USA.
C3 University of Massachusetts System; University of Massachusetts Lowell;
   Northwestern University
RP McCarthy, J (corresponding author), Univ Massachusetts Lowell, Lowell, MA 01854 USA.
EM jay.mccarthy@gmail.com; burke.fetscher@eecs.northwestern.edu;
   max.new@eecs.northwestern.edu; daniel.feltey@eecs.northwestern.edu;
   robby@eecs.northwestern.edu
FU National Science Foundation
FX This material is based upon work supported by the National Science
   Foundation.
CR Albert E, 2013, SCI COMPUT PROGRAM, V78, P1427, DOI 10.1016/j.scico.2012.10.008
   Altenkirch T, 2010, LECT NOTES COMPUT SC, V6014, P297, DOI 10.1007/978-3-642-12032-9_21
   Aspinall David, 2007, J THEOR COMPUT SCI, V389
   Atkey R, 2009, J FUNCT PROGRAM, V19, P335, DOI 10.1017/S095679680900728X
   Braun W., 1983, LOGARITHMIC IMPLEMEN
   Chargueraud A., 2015, P ITP
   Chargueraud Arthur, 2010, THESIS
   Cormen T. H., 2009, Introduction to Algorithms, VSecond
   Crary Karl, 2000, P POPL
   Crosby Scott A., 2003, P USENIX SEC S
   Danielsson Nils Anders, 2008, P POPL
   Danner Norman, 2013, P WORKSH PROGR LANG
   Fillikre Jean-Christophe, 2004, P ESOP
   Gulwani Sumit, 2009, P POPL
   Hoffmann Jan, 2015, P ESOP
   Hofmann Martin, 2003, P POPL
   Hughes John, 1999, P ICFP
   Jost Steffen, 2009, FORMAL METHODS
   McCarthy Jay, 2016, P INT S FUNCT LOG PR
   Montenegro Manuel, 2014, SCI COMPUT PROGRAM, V111
   Okasaki Chris, 1997, J FUNCT PROGRAM, V7
   Rosendahl M., 1989, FPCA 89, P144, DOI DOI 10.1145/99370.99381
   Sozeau Matthieu, 2006, P TYPES
   Swamy Nikhil, 2013, P PLDI
   Swierstra Wouter, 2009, P TPHOLS
   van der Weegen Eelis, 2008, P TYPES
   Xi Hongwei, 1999, P POPL
   Xi Hongwei, 1999, P WORKSH ALG ASP ADV
   Xi Hongwei, 1999, THESIS
NR 29
TC 4
Z9 4
U1 0
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 15
PY 2018
VL 164
SI SI
BP 49
EP 65
DI 10.1016/j.scico.2017.05.001
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GR5WX
UT WOS:000442713700005
OA hybrid
DA 2024-07-18
ER

PT J
AU Martini, A
   Besker, T
   Bosch, J
AF Martini, Antonio
   Besker, Terese
   Bosch, Jan
TI Technical Debt tracking: Current state of practice A survey and multiple
   case study in 15 large organizations
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Technical Debt; Change management; Software process improvement; Survey;
   Multiple case study
AB Large software companies need to support continuous and fast delivery of customer value both in the short and long term. However, this can be hindered if both the evolution and maintenance of existing systems are hampered by Technical Debt. Although a lot of theoretical work on Technical Debt has been produced recently, its practical management lacks empirical studies. In this paper, we investigate the state of practice in several companies to understand what the cost of managing TD is, what tools are used to track TD, and how a tracking process is introduced in practice. We combined two phases: a survey involving 226 respondents from 15 organizations and an in-depth multiple case study in three organizations including 13 interviews and 79 Technical Debt issues. We selected the organizations where Technical Debt was better tracked in order to distill best practices. We found that the development time dedicated to managing Technical Debt is substantial (an average of 25% of the overall development), but mostly not systematic: only a few participants (26%) use a tool, and only 7.2% methodically track Technical Debt. We found that the most used and effective tools are currently backlogs and static analyzers. By studying the approaches in the companies participating in the case study, we report how companies start tracking Technical Debt and what the initial benefits and challenges are. Finally, we propose a Strategic Adoption Model for the introduction of tracking Technical Debt in software organizations. (C) 2018 The Authors. Published by Elsevier B.V.
C1 [Martini, Antonio] CA Technol Strateg, Res Team Barcelona, Cornella De Llobregat, Spain.
   [Martini, Antonio] Univ Oslo, Programming & Software Engn, Oslo, Norway.
   [Besker, Terese; Bosch, Jan] Chalmers Univ Technol, Comp Sci & Engn, Gothenburg, Sweden.
C3 University of Oslo; Chalmers University of Technology
RP Martini, A (corresponding author), CA Technol Strateg, Res Team Barcelona, Cornella De Llobregat, Spain.; Martini, A (corresponding author), Univ Oslo, Programming & Software Engn, Oslo, Norway.
EM antonio.martini@ifi.uio.no; besker@chalmers.se; jan.bosch@chalmers.se
RI Martini, Antonio/AAA-2683-2019
OI Martini, Antonio/0000-0002-0669-8687; Besker, Terese/0000-0002-9811-000X
FU European Union [712949]; Agency for Business Competitiveness of the
   Government of Catalonia
FX We thank the Software Center companies and Matthias Tichy for his
   valuable insights. The research leading to these results has received
   funding from the European Union's Horizon 2020 research and innovation
   programme under the Marie Sklodowska-Curie grant agreement No. 712949
   (TECNIOspring PLUS) and from the Agency for Business Competitiveness of
   the Government of Catalonia.
CR [Anonymous], EUROMICRO C SERIES S
   [Anonymous], P 4 INT WORKSH MAN T
   [Anonymous], ICSE 2013
   [Anonymous], INF SOFTW TECHNOL
   [Anonymous], P ICSME 2017 SHANGH
   Avgeriou P., 2016, DAGSTUHL SEMINAR 161, V6
   Brown Nanette, 2010, P FSE SDP WORKSH FUT, P47
   Cunningham W., 1993, OOPS Messenger, V4, P29
   Ernst NA, 2015, 2015 10TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE 2015) PROCEEDINGS, P50, DOI 10.1145/2786805.2786848
   Flick U., 2009, An Introduction to Qualitative Research, V4th
   Fontana F.A., 2016, Proceedings of the 31st Annual ACM Symposium on Applied Computing, Pisa, Italy, P1347
   Guo YP, 2016, EMPIR SOFTW ENG, V21, P159, DOI 10.1007/s10664-014-9351-7
   Holvitie Johannes, 2014, 2014 Sixth International Workshop on Managing Technical Debt. Proceedings, P35, DOI 10.1109/MTD.2014.8
   Holvitie J, 2013, 2013 4TH INTERNATIONAL WORKSHOP ON MANAGING TECHNICAL DEBT (MTD), P20, DOI 10.1109/MTD.2013.6608674
   Huang Q., 2017, Empirical Software Engineering, P1
   Kazman R, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 2, P179, DOI 10.1109/ICSE.2015.146
   Kruchten P, 2012, IEEE SOFTWARE, V29, P18, DOI 10.1109/MS.2012.167
   Li ZY, 2015, J SYST SOFTWARE, V101, P193, DOI 10.1016/j.jss.2014.12.027
   Martini A., 2017, P XP2017 SCI WORKSHO, P1
   Martini A, 2016, ASIA PAC SOFWR ENG, P161, DOI [10.1109/APSEC.2016.032, 10.1109/APSEC.2016.25]
   Martini A, 2016, 2016 IEEE/ACM 38TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING COMPANION (ICSE-C), P31, DOI 10.1145/2889160.2889224
   Martini A, 2016, 2016 13TH WORKING IEEE/IFIP CONFERENCE ON SOFTWARE ARCHITECTURE (WICSA), P1, DOI 10.1109/WICSA.2016.31
   Martini A, 2015, 2015 12TH WORKING IEEE/IFIP CONFERENCE ON SOFTWARE ARCHITECTURE (WICSA), P1, DOI 10.1109/WICSA.2015.31
   Moitra D., 1998, Software Process Improvement and Practice, V4, P199, DOI 10.1002/(SICI)1099-1670(199812)4:4<199::AID-SPIP107>3.0.CO;2-D
   Runeson P, 2009, EMPIR SOFTW ENG, V14, P131, DOI 10.1007/s10664-008-9102-8
   Seaman C., 2012, Proceedings 2012 Third International Workshop on Managing Technical Debt (MTD 2012), P45, DOI 10.1109/MTD.2012.6225999
   Tamburri DA, 2013, 2013 6TH INTERNATIONAL WORKSHOP ON COOPERATIVE AND HUMAN ASPECTS OF SOFTWARE ENGINEERING (CHASE), P93, DOI 10.1109/CHASE.2013.6614739
   Tom E, 2013, J SYST SOFTWARE, V86, P1498, DOI 10.1016/j.jss.2012.12.052
   Yli-Huumo J, 2016, J SYST SOFTWARE, V120, P195, DOI 10.1016/j.jss.2016.05.018
   Yuepu Guo, 2011, 2011 IEEE 27th International Conference on Software Maintenance, P528, DOI 10.1109/ICSM.2011.6080824
   Zazworka N., 2013, Proceedings of the 17th International Conference on Evaluation and Assessment in Software Engineering, DOI DOI 10.1145/2460999.2461005.ASSOCIATIONFORCOMPUTINGMACHINERY
NR 31
TC 36
Z9 38
U1 0
U2 5
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 1
PY 2018
VL 163
BP 42
EP 61
DI 10.1016/j.scico.2018.03.007
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GN0MN
UT WOS:000438662800003
OA Green Published, hybrid
DA 2024-07-18
ER

PT J
AU Rodrigues, V
   Akesson, B
   Florido, M
   de Sousa, SM
   Pedroso, JP
   Vasconcelos, P
AF Rodrigues, Vitor
   Akesson, Benny
   Florido, Mario
   de Sousa, Simao Melo
   Pedroso, Joao Pedro
   Vasconcelos, Pedro
TI Certifying execution time in multicores
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT Foundational Practical Aspects Resource Analysis (FOPARA)
CY MAY 19, 2011
CL Madrid, SPAIN
DE Abstract interpretation; Abstraction-carrying code; WCET; LP; LR-servers
ID ABSTRACT INTERPRETATION; PREDICTION; LATENCY; SYSTEM
AB This article presents a semantics-based program verification framework for critical embedded real-time systems using the worst-case execution time (WCET) as the safety parameter. The verification algorithm is designed to run on devices with limited computational resources where efficient resource usage is a requirement For this purpose, the framework of abstract-carrying code (ACC) is extended with an additional verification mechanism for linear programming (LP) by applying the certifying properties of duality theory to check the optimality of WCET estimates. Further, the WCET verification approach preserves feasibility and scalability when applied to multicore architectural models.
   The certifying WCET algorithm is targeted to architectural models based on the ARM instruction set and is presented as a particular instantiation of a compositional data-flow framework supported on the theoretic foundations of denotational semantics and abstract interpretation. The data-flow framework has algebraic properties that provide algorithmic transformations to increase verification efficiency, mainly in terms of verification time. The WCET analysis/verification on multicore architectures applies the formalism of latency-rate (LR.) servers, and proves its correctness in the context of abstract interpretation, in order to ease WCET estimation of programs sharing resources. (C) 2015 Elsevier B.V. All rights reserved.
C1 [Rodrigues, Vitor] Rochester Inst Technol, Dept Comp Sci, New York, NY 14623 USA.
   [Akesson, Benny] Czech Tech Univ, Fac Elect Engn, CR-16635 Prague, Czech Republic.
   [Florido, Mario; Pedroso, Joao Pedro; Vasconcelos, Pedro] Univ Porto, Fac Sci, DCC, P-4100 Oporto, Portugal.
   [Florido, Mario; de Sousa, Simao Melo; Vasconcelos, Pedro] Univ Porto, LIACC, P-4100 Oporto, Portugal.
   [de Sousa, Simao Melo] Univ Beira Interior, DI, Covilha, Portugal.
   [Pedroso, Joao Pedro] Univ Porto, INESC TEC, P-4100 Oporto, Portugal.
C3 Rochester Institute of Technology; Czech Technical University Prague;
   Universidade do Porto; Universidade do Porto; Universidade da Beira
   Interior; INESC TEC; Universidade do Porto
RP Rodrigues, V (corresponding author), Rochester Inst Technol, Dept Comp Sci, New York, NY 14623 USA.
EM vgrcs@rit.edu
RI Vasconcelos, Paulo B/A-8772-2008; Pedroso, Joao Pedro/H-4360-2013;
   Akesson, Benny/D-6528-2013; Melo de Sousa, Simao/M-3195-2013; Florido,
   Mario/A-5818-2013
OI Vasconcelos, Paulo B/0000-0002-7132-880X; Pedroso, Joao
   Pedro/0000-0003-1298-7191; Akesson, Benny/0000-0003-2949-2080; Melo de
   Sousa, Simao/0000-0001-9129-4136; Florido, Mario/0000-0002-0574-7555;
   Vasconcelos, Pedro/0000-0002-8387-9772; RODRIGUES,
   Vitor/0000-0002-9498-4068
FU Ministry of Education of the Czech Republic [CZ.1.07/2.3.00/30.0034]
FX Part of the work by the first author was done at the Laboratoire
   d'Informatique Fondamentale d'Orleans (LIFO), University of Orleans,
   France. This work was also supported by the Ministry of Education of the
   Czech Republic under the project "Support for improving R&D teams and
   the development of intersectoral mobility at CTU in Prague" number
   CZ.1.07/2.3.00/30.0034.
CR Akesson B., 2011, DESIGN AUTOMATION IK, P1
   Akesson B, 2008, RTCSA 2008: 14TH IEEE INTERNATIONAL CONFERENCE ON EMBEDDED AND REAL-TIME COMPUTING SYSTEMS AND APPLICATIONS - PROCEEDINGS, P3, DOI 10.1109/RTCSA.2008.21
   Akesson B, 2015, 21ST IEEE REAL-TIME AND EMBEDDED TECHNOLOGY AND APPLICATIONS SYMPOSIUM (RTAS 2015), P161, DOI 10.1109/RTAS.2015.7108439
   Albert E, 2007, LECT NOTES COMPUT SC, V4421, P157
   Albert E, 2006, LECT NOTES ARTIF INT, V4246, P377, DOI 10.1007/11916277_26
   Albert E, 2012, THEOR PRACT LOG PROG, V12, P283, DOI 10.1017/S1471068410000487
   Albert E, 2005, ELECTRON NOTES THEOR, V132, P113, DOI 10.1016/j.entcs.2005.01.032
   [Anonymous], 2014, WORKSH WORST CAS EX, DOI DOI 10.4230/OASICS.WCET.2014.11
   [Anonymous], 1970, ACM SIGPLAN NOTICES, DOI DOI 10.1145/390013.808479
   [Anonymous], 1952, INTRO METAMATHEMATIC
   [Anonymous], OPENACCESS SERIES IN
   [Anonymous], 1999, NATO ASI SERIES F
   [Anonymous], ANG INF
   [Anonymous], 2011, ECRTS 2011
   [Anonymous], 2010, P EMBEDDED REAL TIME
   [Anonymous], 2013, THESIS
   [Anonymous], 2004, LNCS
   [Anonymous], 1987, THEORY RECURSIVE FUN
   [Anonymous], DENOTATIONAL SEMANTI
   [Anonymous], P 20 IEEE REAL TIM T
   [Anonymous], 1985, PROGRAMS DATA OBJECT, DOI DOI 10.1007/3-540-16446-4_11
   [Anonymous], 1989, COQ PROOF ASSISTANT
   Ballabriga C, 2010, LECT NOTES COMPUT SC, V6399, P35, DOI 10.1007/978-3-642-16256-5_6
   Barthe G, 2007, LECT NOTES COMPUT SC, V4661, P10
   Besson F, 2009, LECT NOTES COMPUT SC, V5705, P223, DOI 10.1007/978-3-642-03829-7_8
   Besson F, 2010, LECT NOTES COMPUT SC, V6084, P253, DOI 10.1007/978-3-642-15640-3_17
   Bourdoncle F., 1993, Formal Methods in Programming and Their Applications International Conference Proceedings, P128, DOI 10.1007/BFb0039704
   Cousot P, 2005, LECT NOTES COMPUT SC, V3444, P21
   Cousot P, 2002, THEOR COMPUT SCI, V277, P47, DOI 10.1016/S0304-3975(00)00313-3
   COUSOT P, 1992, J LOGIC PROGRAM, V13, P103, DOI 10.1016/0743-1066(92)90030-7
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Cousot Patrick, 1976, P 2 INT S PROGRAMMIN
   Cousot Patrick, 1978, P 5 ACM SIGACT SIGPL, p84S96, DOI DOI 10.1145/512760.512770
   CRUZ RL, 1991, IEEE T INFORM THEORY, V37, P114, DOI 10.1109/18.61109
   de Michiel M, 2008, RTCSA 2008: 14TH IEEE INTERNATIONAL CONFERENCE ON EMBEDDED AND REAL-TIME COMPUTING SYSTEMS AND APPLICATIONS - PROCEEDINGS, P161, DOI 10.1109/RTCSA.2008.53
   Ermedahl A., 1997, Euro-Par '97 Parallel Processing. Third International Euro-Par Conference. Proceedings, P1298
   Ferdinand C., 1998, Languages, Compilers, and Tools for Embedded Systems. ACM SIGPLAN Workshop LCTES'98. Proceedings, P16, DOI 10.1007/BFb0057777
   Ferdinand C, 2004, INT FED INFO PROC, V156, P377
   Gibbons J., 1999, Journal of Functional Programming, V9, P339, DOI 10.1017/S0956796899003354
   Gustafsson J, 2006, REAL TIM SYST SYMP P, P57, DOI 10.1109/RTSS.2006.12
   Gustafsson Jan., 2010, WCET, V15, P136, DOI DOI 10.4230/OASICS.WCET.2010.136
   Hansson A, 2009, IET COMPUT DIGIT TEC, V3, P398, DOI 10.1049/iet-cdt.2008.0093
   Hoffman A. J., 2010, 50th Years of Integer Programming 1958-2008, P49
   Kildall G. A., 1973, Conference Record of ACM Symposium on Principles of Programming Languages, P194
   Lieberman GJ, 1986, INTRO OPERATIONS RES
   Lisper B, 2014, LECT NOTES COMPUT SC, V8803, P482, DOI 10.1007/978-3-662-45231-8_38
   Lisper Bjorn., 2003, WCET, P99
   Lundqvist T., 1998, Languages, Compilers, and Tools for Embedded Systems. ACM SIGPLAN Workshop LCTES'98. Proceedings, P1, DOI 10.1007/BFb0057776
   Manna Z., 2003, MATH THEORY COMPUTAT
   Martin F, 1998, LECT NOTES COMPUT SC, V1383, P80
   McConnell RM, 2011, COMPUT SCI REV, V5, P119, DOI 10.1016/j.cosrev.2010.09.009
   Morrisett G, 1999, ACM T PROGR LANG SYS, V21, P527, DOI 10.1145/319301.319345
   MUTHUKUMAR K, 1991, LOGIC PROGRAMM, P49
   Necula G. C., 1997, Conference Record of POPL '97: The 24th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P106, DOI 10.1145/263699.263712
   Nemhauser G., 1988, INTEGER COMBINATORIA, DOI DOI 10.1002/9781118627372
   Nielson F., 1999, Principles of Program Analysis
   Nielson H. R., 1986, ESOP 86: European Symposium on Programming. Proceedings, P133
   Puschner PP, 1997, REAL-TIME SYST, V13, P67, DOI 10.1023/A:1007905003094
   Reineke J, 2007, REAL-TIME SYST, V37, P99, DOI 10.1007/s11241-007-9032-3
   Rodrigues Vitor, 2013, Practical Aspects of Declarative Languages. 15th International Symposium, PADL 2013. Proceedings: LNCS 7752, P43, DOI 10.1007/978-3-642-45284-0_4
   Rodrigues Vitor, 2012, Foundational and Practical Aspects of Resource Analysis. Second International Workshop, FOPARA 2011. Revised Selected Papers, P108, DOI 10.1007/978-3-642-32495-6_7
   Rodrigues V, 2011, LECT NOTES COMPUT SC, V6816, P86, DOI 10.1007/978-3-642-22531-4_6
   Schneider J, 1999, ACM SIGPLAN NOTICES, V34, P35, DOI 10.1145/315253.314432
   Seshia SA, 2011, LECT NOTES COMPUT SC, V6605, P388, DOI 10.1007/978-3-642-19835-9_34
   Shah H, 2013, DES AUT TEST EUROPE, P308
   Sriram S., 2000, Embedded Multiprocessors: Scheduling and Synchronization
   Steine M, 2009, PROCEEDINGS OF THE 2009 12TH EUROMICRO CONFERENCE ON DIGITAL SYSTEM DESIGN, ARCHITECTURES, METHODS AND TOOLS, P37, DOI 10.1109/DSD.2009.148
   Stiliadis D, 1998, IEEE ACM T NETWORK, V6, P611, DOI 10.1109/90.731196
   Vallee-Rai R., 1999, Proceedings of the 1999 Conference of the Centre for Advanced Studies on Collaborative Research, CASCON'99, page, P13
   Vink J.P., 2008, Design, Automation and Test in Europe, P200
   Wiggers MaartenH., 2007, 10th Workshop on Software Compilers for Embedded Systems, P11
   Wilhelm R, 2004, LECT NOTES COMPUT SC, V2937, P309
   Wilhelm R, 2008, LECT NOTES COMPUT SC, V5123, P22
   Wilhelm R, 2008, ACM T EMBED COMPUT S, V7, DOI 10.1145/1347375.1347389
   Wu ZP, 2013, REAL TIM SYST SYMP P, P372, DOI 10.1109/RTSS.2013.44
NR 75
TC 3
Z9 4
U1 0
U2 4
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 1
PY 2015
VL 111
SI SI
BP 505
EP 534
DI 10.1016/j.scico.2015.06.006
PN 3
PG 30
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA DB5LY
UT WOS:000368556800007
OA Bronze
DA 2024-07-18
ER

PT J
AU Bartoletti, M
   Lange, J
   Scalas, A
   Zunino, R
AF Bartoletti, Massimo
   Lange, Julien
   Scalas, Alceste
   Zunino, Roberto
TI Choreographies in the wild
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Contracts; Choreographies; Session types
ID CONTRACTS
AB We investigate the use of choreographies in distributed scenarios where, as in the real world, mutually distrusting (and possibly dishonest) participants may be unfaithful to their expected behaviour. In our model, each participant advertises its promised behaviour as a contract. Participants may interact through multiparty sessions, created when their contracts allow to synthesise a choreography. We show that systems of honest participants (which always adhere to their contracts) enjoy progress and session fidelity. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Bartoletti, Massimo; Scalas, Alceste] Univ Cagliari, Dipartimento Matemat & Informat, I-09124 Cagliari, Italy.
   [Lange, Julien] Univ London Imperial Coll Sci Technol & Med, Dept Comp, London SW7 2AZ, England.
   [Zunino, Roberto] Univ Trent, Dipartimento Matemat, I-38100 Trento, Italy.
C3 University of Cagliari; Imperial College London; University of Trento
RP Lange, J (corresponding author), Univ London Imperial Coll Sci Technol & Med, Dept Comp, 180 Queens Gate, London SW7 2AZ, England.
EM j.lange@imperial.ac.uk
OI Scalas, Alceste/0000-0002-1153-6164; Lange, Julien/0000-0001-9697-1378;
   Bartoletti, Massimo/0000-0003-3796-9774
FU Aut. Region of Sardinia [L.R.7/2007 CRP-17285 (TRICS)]; PIA. project
   "Social Glue"; MIUR PRIN project "Security Horizons"; EU COST Action
   [IC1201 (BETTY)]; EPSRC [EP/K034413/1]; EPSRC [EP/K011715/1,
   EP/K034413/1] Funding Source: UKRI
FX Work partially supported by Aut. Region of Sardinia under grant
   L.R.7/2007 CRP-17285 (TRICS) and PIA. 2010 project "Social Glue", MIUR
   PRIN 2010-11 project "Security Horizons", EU COST Action IC1201 (BETTY),
   and EPSRC EP/K034413/1.
CR [Anonymous], 2012, REF ARCH FDN SERV OR
   [Anonymous], 1651, The Leviathan
   Armbrust M, 2010, COMMUN ACM, V53, P50, DOI 10.1145/1721654.1721672
   Bartoletti Massimo, 2014, CONCUR 2014 - Concurrency Theory. 25th International Conference, CONCUR 2014. Proceedings: LNCS 8704, P402, DOI 10.1007/978-3-662-44584-6_28
   Bartoletti Massimo, 2012, Coordination Models and Languages. Proceedings 14th International Conference, COORDINATION 2012, P245, DOI 10.1007/978-3-642-30829-1_17
   Bartoletti M, 2013, LECT NOTES COMPUT SC, V7892, P305
   Bartoletti M, 2012, SCI ANN COMPUT SCI, V22, P5, DOI 10.7561/SACS.2012.1.5
   Bartoletti M, 2011, ELECTRON P THEOR COM, P130, DOI 10.4204/EPTCS.59.11
   Bartoletti M, 2014, LECT NOTES COMPUT SC, V8663, P130, DOI 10.1007/978-3-319-12904-4_7
   Bartoletti M, 2010, IEEE S LOG, P332, DOI 10.1109/LICS.2010.25
   Basu S, 2012, ACM SIGPLAN NOTICES, V47, P191, DOI 10.1145/2103621.2103680
   Bernardi G., TGC 14 IN PRESS
   Bettini L, 2008, LECT NOTES COMPUT SC, V5201, P418, DOI 10.1007/978-3-540-85361-9_33
   Bocchi L, 2013, LECT NOTES COMPUT SC, V7892, P50
   BRAND D, 1983, J ACM, V30, P323, DOI 10.1145/322374.322380
   Bravetti M, 2009, LECT NOTES COMPUT SC, V5474, P1, DOI 10.1007/978-3-642-00945-7_1
   Bravetti M, 2008, FUND INFORM, V89, P451
   Castagna G, 2012, LOG METH COMPUT SCI, V8, DOI 10.2168/LMCS-8(1:24)2012
   Castagna G, 2009, LECT NOTES COMPUT SC, V5710, P211, DOI 10.1007/978-3-642-04081-8_15
   Castagna G, 2009, ACM T PROGR LANG SYS, V31, DOI 10.1145/1538917.1538920
   Chen T.-C., 2012, LNCS, V7173, P25, DOI DOI 10.1007/978-3-642-30065-3_2
   Coppo M, 2013, LECT NOTES COMPUT SC, V7890, P45, DOI 10.1007/978-3-642-38493-6_4
   Deniélou PM, 2013, LECT NOTES COMPUT SC, V7966, P174, DOI 10.1007/978-3-642-39212-2_18
   Deniélou PM, 2012, LECT NOTES COMPUT SC, V7211, P194, DOI 10.1007/978-3-642-28869-2_10
   Fossati L., TGC 14 IN PRESS
   Fu X, 2004, THEOR COMPUT SCI, V328, P19, DOI 10.1016/j.tcs.2004.07.004
   HEDETNIEMI SM, 1988, NETWORKS, V18, P319, DOI 10.1002/net.3230180406
   Honda K, 1998, LECT NOTES COMPUT SC, V1381, P122, DOI 10.1007/BFb0053567
   Honda K, 2008, ACM SIGPLAN NOTICES, V43, P273, DOI 10.1145/1328897.1328472
   Lanese I, 2008, SEFM 2008: SIXTH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING AND FORMAL METHODS, PROCEEDINGS, P323, DOI 10.1109/SEFM.2008.11
   Lange J., 2013, THESIS U LEICESTER
   Lange J., POPL 15 IN PRESS
   Lange J, 2013, ELECTRON P THEOR COM, P52, DOI 10.4204/EPTCS.131.6
   Lange J, 2012, LECT NOTES COMPUT SC, V7454, P225, DOI 10.1007/978-3-642-32940-1_17
   Montesi Fabrizio, 2013, CONCUR 2013 - Concurrency Theory. 24th International Conference, CONCUR 2013. Proceedings: LNCS 8052, P425, DOI 10.1007/978-3-642-40184-8_30
   Padovani L, 2012, MATH STRUCT COMP SCI, V22, P237, DOI 10.1017/S0960129511000405
   Takeuchi K., 1994, Parallel Architectures and Languages Europe'94, V817, P398, DOI [DOI 10.1007/3-540-58184-7_118, 10.1007/3540581847118]
NR 37
TC 7
Z9 7
U1 0
U2 0
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 1
PY 2015
VL 109
BP 36
EP 60
DI 10.1016/j.scico.2014.11.015
PG 25
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CN5LD
UT WOS:000358469900003
OA Green Submitted, Green Accepted, hybrid
DA 2024-07-18
ER

PT J
AU Bartoletti, M
   Cimoli, T
   Di Giamberardino, P
   Zunino, R
AF Bartoletti, Massimo
   Cimoli, Tiziana
   Di Giamberardino, Paolo
   Zunino, Roberto
TI Vicious circles in contracts and in logic
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Contracts; Propositional contract logic; Event structures
ID VIEW
AB Contracts are formal promises on the future interactions of participants, which describe the causal dependencies among their actions. An inherent feature of contracts is that such dependencies may be circular: for instance, a buyer promises to pay for an item if the seller promises to ship it, and vice versa. We establish a bridge between two formal models for contracts, one based on games over event structures, and the other one on Propositional Contract Logic. In particular, we show that winning strategies in the game-theoretic model correspond to proofs in the logic. (C) 2015 Elsevier B.V. All rights reserved.
C1 [Bartoletti, Massimo; Cimoli, Tiziana; Di Giamberardino, Paolo] Univ Cagliari, Dipartimento Matemat & Informat, I-09124 Cagliari, Italy.
   [Zunino, Roberto] Univ Trent, Dipartimento Matemat, I-38100 Trento, Italy.
C3 University of Cagliari; University of Trento
RP Bartoletti, M (corresponding author), Univ Cagliari, Dipartimento Matemat & Informat, Via Osped 72, I-09124 Cagliari, Italy.
EM bart@unica.it
OI Cimoli, Tiziana/0000-0002-8591-4527; Bartoletti,
   Massimo/0000-0003-3796-9774
FU Aut. Region of Sardinia [L.R.7/2007 CRP-17285 (TRICS)]; P.I.A. "Social
   Glue"; MIUR PRIN project "Security Horizons"; EU COST Action
   "Behavioural Types for Reliable Large-Scale Software Systems" (BETTY)
   [IC1201]
FX Work partially supported by Aut. Region of Sardinia under grants
   L.R.7/2007 CRP-17285 (TRICS) and P.I.A. 2010 "Social Glue", by MIUR PRIN
   2010-11 project "Security Horizons", and by EU COST Action IC1201
   "Behavioural Types for Reliable Large-Scale Software Systems" (BETTY).
CR ABADI M, 1993, ACM T PROGR LANG SYS, V15, P73, DOI 10.1145/151646.151649
   ABADI M, 1993, ACM T PROGR LANG SYS, V15, P706, DOI 10.1145/155183.155225
   ABADI M, 1993, THEOR COMPUT SCI, V114, P3, DOI 10.1016/0304-3975(93)90151-I
   Abramsky S., 1999, Proceedings. 14th Symposium on Logic in Computer Science (Cat. No. PR00158), P431, DOI 10.1109/LICS.1999.782638
   [Anonymous], 2008, Lecture Notes in Computer Science, DOI DOI 10.1007/978-3-642-00945-7
   [Anonymous], 1952, INTRO METAMATHEMATIC
   [Anonymous], 2012, REF ARCH FDN SERV OR
   [Anonymous], PROOFS AND TYPES
   Armbrust M, 2010, COMMUN ACM, V53, P50, DOI 10.1145/1721654.1721672
   BARTOLETTI M, 2012, P PLACES, V109, P13
   Bartoletti M, 2013, LECT NOTES COMPUT SC, V8161, P66, DOI 10.1007/978-3-642-40213-5_5
   Bartoletti M, 2012, SCI ANN COMPUT SCI, V22, P5, DOI 10.7561/SACS.2012.1.5
   Bartoletti M, 2014, FUND INFORM, V134, P219, DOI 10.3233/FI-2014-1101
   Bartoletti M, 2013, LECT NOTES COMPUT SC, V7796, P186, DOI 10.1007/978-3-642-36830-1_10
   Bartoletti M, 2010, IEEE S LOG, P332, DOI 10.1109/LICS.2010.25
   Bocchi L, 2010, LECT NOTES COMPUT SC, V6269, P162, DOI 10.1007/978-3-642-15375-4_12
   Bravetti M, 2007, LECT NOTES COMPUT SC, V4767, P207
   Castagna G, 2009, ACM T PROGR LANG SYS, V31, DOI 10.1145/1538917.1538920
   Chen T.-C., 2012, LNCS, V7173, P25, DOI DOI 10.1007/978-3-642-30065-3_2
   Cimoli T., 2013, THESIS U CAGLIARI
   Fleury A., 1994, Mathematical Structures in Computer Science, V4, P273, DOI 10.1017/S0960129500000451
   Gelati J., 2004, Artificial Intelligence and Law, V12, P53, DOI 10.1007/s10506-004-1922-2
   Haas H., 2003, DESIGNING ARCHITECTU
   Hildebrandt TT, 2011, ELECTRON PROC THEOR, P59, DOI 10.4204/EPTCS.69.5
   Honda K, 1998, LNCS, V1381, P22, DOI DOI 10.1007/BFB0053567
   Honda K, 2008, ACM SIGPLAN NOTICES, V43, P273, DOI 10.1145/1328897.1328472
   Honda K, 2011, LECT NOTES COMPUT SC, V6536, P55, DOI 10.1007/978-3-642-19056-8_4
   Honda Kohei., 1993, CONCUR'93, 4th International Conference on Concurrency Theory, Hildesheim, Germany, August 23-26, 1993, V715, P509, DOI DOI 10.1007/3-540-57208-2_
   Lomuscio A, 2011, FUND INFORM, V111, P339, DOI 10.3233/FI-2011-566
   Maier P, 2003, LECT NOTES COMPUT SC, V2620, P343
   Marte-Oliet N., 1991, MATH STRUCTURES COMP, V1, P69
   Prisacariu C, 2012, J LOGIC ALGEBR PROGR, V81, P458, DOI 10.1016/j.jlap.2012.03.003
   Raimondi F., 2008, Proceedings of the 16th ACM SIGSOFT International Symposium on Foundations of software engineering, P170, DOI DOI 10.1145/1453101.1453125
   STOTTS PD, 1992, INFORM PROCESS LETT, V41, P25, DOI 10.1016/0020-0190(92)90076-8
   van der Aalst WMP, 2010, COMPUT J, V53, P90, DOI 10.1093/comjnl/bxn064
   WINSKEL G, 1987, LECT NOTES COMPUT SC, V255, P325
NR 36
TC 4
Z9 4
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 1
PY 2015
VL 109
BP 61
EP 95
DI 10.1016/j.scico.2015.01.005
PG 35
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CN5LD
UT WOS:000358469900004
DA 2024-07-18
ER

PT J
AU Eckhardt, J
   Mühlbauer, T
   Meseguer, J
   Wirsing, M
AF Eckhardt, Jonas
   Muehlbauer, Tobias
   Meseguer, Jose
   Wirsing, Martin
TI Semantics, distributed implementation, and formal analysis of KLAIM
   models in Maude
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Rewriting logic; Distributed system; KLAIM; Formal analysis;
   Correct-by-construction
ID REWRITING LOGIC; EXPRESSIVE POWER; SPECIFICATION; FRAMEWORK; LANGUAGE;
   ORC
AB Emerging distributed systems such as cloud-based services are characterized by computations over different explicit localities, moving code and data, and a high degree of concurrency. KLAIM is a well-established language that can naturally describe such systems. The KLAIM language is process algebra flavored, allows Linda-based asynchronous communication through distributed tuple spaces, and supports explicit localities as well as code and data mobility. In this work we take some first steps in the quest for a correct-by-construction design process for secure and reliable distributed systems. Such a design process is necessary as more and more safety- and security-critical tasks that need to satisfy mission-critical formal requirements are executed in a distributed setting. We use a rewriting-based approach to formally specify and analyze KLAIM specifications of distributed systems. In particular we: (i) specify the reduction semantics of KLAIM in Maude, (ii) extend the Maude-based specification by making messages first-class citizens, and (iii) describe a second extension that allows true distributed execution of Maude-based 'CLAIM specifications. We prove that under appropriate weak fairness assumptions all these specifications are stuttering bisimilar and that large classes of logic temporal formulas, namely all CIL*\X formulas, are preserved. By means of an example we show that our approach allows specifying aspects of a distributed system in a Maude-based KLAIM dialect, verifying these specifications using Maude's LTL model checking capabilities, and then executing the verified specifications in a distributed environment. This marks a first step in the quest for a correct-by-construction design process for secure and reliable distributed systems. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Eckhardt, Jonas; Muehlbauer, Tobias] Tech Univ Munich, D-85748 Garching, Germany.
   [Meseguer, Jose] Univ Illinois, Urbana, IL 61801 USA.
   [Wirsing, Martin] Univ Munich, D-80538 Munich, Germany.
C3 Technical University of Munich; University of Illinois System;
   University of Illinois Urbana-Champaign; University of Munich
RP Eckhardt, J (corresponding author), Tech Univ Munich, Boltzmannstr 3, D-85748 Garching, Germany.
EM eckharjo@in.tum.de; muehlbau@in.tum.de; meseguer@illinois.edu;
   wirsing@lmu.de
FU EU [FP7-257414 ASCENS, FP7-256980 NESSoS]; NSF Grant [CNS13-19109];
   AFOSR Grant [FA8750-11-2-0084]; Google Europe Fellowship in Structured
   Data Analysis; Google Fellowship
FX This work is partially sponsored by the EU-funded projects FP7-257414
   ASCENS and FP7-256980 NESSoS, NSF Grant CNS13-19109, and AFOSR Grant
   FA8750-11-2-0084. Tobias Mailbauer is a recipient of the Google Europe
   Fellowship in Structured Data Analysis, and this research is supported
   in part by this Google Fellowship.
CR Agha G., 1986, Actors: a model of concurrent computation in distributed systems
   Agha G, 2006, ELECTRON NOTES THEOR, V153, P213, DOI 10.1016/j.entcs.2005.10.040
   AlTurki Musab, 2011, Algebra and Coalgebra in Computer Science. Proceedings 4th International Conference, CALCO 2011, P386, DOI 10.1007/978-3-642-22944-2_28
   AlTurki Musab, 2007, Proceedings of the 9th International ACM SIGPLAN Conference on Principles and Practice of Declarative Programming (PPDP'07), P131, DOI 10.1145/1273920.1273938
   AlTurki M., 2011, THESIS U ILLINOIS UR
   AlTurki M, 2010, ELECTRON P THEOR COM, P26, DOI 10.4204/EPTCS.36.2
   AlTurki M, 2008, ELECTRON NOTES THEOR, V200, P25, DOI 10.1016/j.entcs.2008.04.091
   [Anonymous], 1999, Communicating and Mobile Systems: The Calculus
   Bentea L, 2011, LECT NOTES COMPUT SC, V6919, P60, DOI 10.1007/978-3-642-24310-3_6
   Bettini L, 2005, LECT NOTES COMPUT SC, V3465, P29
   Bettini L, 2003, LECT NOTES COMPUT SC, V2874, P88
   Bettini L., 2002, SOFTW PRACT EXP, V32
   Borovansky P, 2002, THEOR COMPUT SCI, V285, P155, DOI 10.1016/S0304-3975(01)00358-9
   Bouhoula A, 2000, THEOR COMPUT SCI, V236, P35, DOI 10.1016/S0304-3975(99)00206-6
   BROWNE MC, 1988, THEOR COMPUT SCI, V59, P115, DOI 10.1016/0304-3975(88)90098-9
   Bruni Roberto, 2012, Rewriting Logic and Its Applications. 9th International Workshop, WRLA 2012. Held as a Satellite Event of ETAPS. Revised Selected Papers, P118, DOI 10.1007/978-3-642-34005-5_7
   Bruni R, 2006, THEOR COMPUT SCI, V360, P386, DOI 10.1016/j.tcs.2006.04.012
   Bruni R, 2012, LECT NOTES COMPUT SC, V7212, P240, DOI 10.1007/978-3-642-28872-2_17
   Calzolai F, 2010, LECT NOTES COMPUT SC, V6116, P122, DOI 10.1007/978-3-642-13414-2_9
   Cardelli L, 1998, LECT NOTES COMPUT SC, V1378, P140, DOI 10.1007/BFb0053547
   CARRIERO N, 1989, COMMUN ACM, V32, P444, DOI 10.1145/63334.63337
   Celestini A., 2013, ACM S APPL COMP, P1363
   Chadha R, 2008, LECT NOTES COMPUT SC, V5051, P39, DOI 10.1007/978-3-540-68863-1_4
   Clarke EM, 1999, MODEL CHECKING, P1
   Clavel M, 2002, THEOR COMPUT SCI, V285, P187, DOI 10.1016/S0304-3975(01)00359-0
   Clavel M., 2007, LECT NOTES COMPUT SC, V4350
   Clavel M., 2008, MAUDE MANUAL VERSION
   De Nicola R, 1998, IEEE T SOFTWARE ENG, V24, P315, DOI 10.1109/32.685256
   De Nicola R, 2006, THEOR COMPUT SCI, V356, P387, DOI 10.1016/j.tcs.2006.02.007
   De Nicola R, 2005, ELECTRON NOTES THEOR, V128, P117, DOI 10.1016/j.entcs.2004.11.032
   Durán F, 2007, ELECTRON NOTES THEOR, V176, P113, DOI 10.1016/j.entcs.2007.06.011
   Eckhardt J., 2011, THESIS LMU MUNICH
   Eckhardt J., 2012, WADT, P143
   Eckhardt J, 2012, LECT NOTES COMPUT SC, V7212, P78, DOI 10.1007/978-3-642-28872-2_6
   Eker Steven., 2004, ELECTRON NOTES THEOR, V71, P162, DOI [DOI 10.1016/S1571-0661(05)82534-4, 10.1016/S1571-0661(05)82534-4]
   Futatsugi K., 1998, AMAST SER
   GELERNTER D, 1985, ACM T PROGR LANG SYS, V7, P80, DOI 10.1145/2363.2433
   Hewitt C., 1977, IFIP C 77, P987
   Hewitt C., 1973, PROC 3 INT JOINT C A, P235, DOI 10.1145/359545.359563
   Hillston J., 1996, A Compositional Approach to Performance Modelling
   HOARE CAR, 1978, COMMUN ACM, V21, P666, DOI 10.1145/359576.359585
   Lamport L., 1983, Information Processing 83. Proceedings of the IFIP 9th World Computer Congress, P657
   Manolios Panagiotis, 2001, Ph.D. thesis
   Martí-Oliet N, 2002, THEOR COMPUT SCI, V285, P121, DOI 10.1016/S0304-3975(01)00357-7
   MESEGUER J, 1992, THEOR COMPUT SCI, V96, P73, DOI 10.1016/0304-3975(92)90182-F
   Meseguer J, 1998, LECT NOTES COMPUT SC, V1376, P18
   Meseguer J, 2014, SCI COMPUT PROGRAM, V83, P3, DOI 10.1016/j.scico.2013.07.004
   Meseguer J, 2012, J LOGIC ALGEBR PROGR, V81, P721, DOI 10.1016/j.jlap.2012.06.003
   Meseguer J, 2010, LECT NOTES COMPUT SC, V6447, P303, DOI 10.1007/978-3-642-16901-4_21
   Meseguer J, 2010, J LOGIC ALGEBR PROGR, V79, P103, DOI 10.1016/j.jlap.2009.07.003
   Milner R., 1989, Communication and concurrency
   Minkiewicz A., 2011, Journal of Software Technology, V14, P4
   Misra J, 2007, SOFTW SYST MODEL, V6, P83, DOI 10.1007/s10270-006-0012-1
   Muhlbauer T., 2011, THESIS LMU MUNICH
   Namjoshi K. S., 1997, Foundations of Software Technology and Theoretical Computer Science. 17th Conference. Proceedings, P284, DOI 10.1007/BFb0058037
   Nicola R., 2013, LECT NOTES COMPUT SC, V7542, P25
   Riesco A, 2009, ELECTRON NOTES THEOR, V238, P249, DOI 10.1016/j.entcs.2009.05.023
   Sen K, 2005, INT CONF QUANT EVAL, P251, DOI 10.1109/QEST.2005.42
   ter Beek M., 2006, P 4 IEEE EUR C WEB S, P287
   Viry P, 2002, THEOR COMPUT SCI, V285, P487, DOI 10.1016/S0304-3975(01)00366-8
   Wirsing Martin, 2012, Rewriting Logic and Its Applications. 9th International Workshop, WRLA 2012. Held as a Satellite Event of ETAPS. Revised Selected Papers, P54, DOI 10.1007/978-3-642-34005-5_4
   Wirsing M, 2006, LECT NOTES COMPUT SC, V4229, P24
NR 62
TC 7
Z9 7
U1 0
U2 7
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR 7
PY 2015
VL 99
BP 24
EP 74
DI 10.1016/j.scico.2014.10.001
PG 51
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CA5PI
UT WOS:000348959900003
OA Bronze
DA 2024-07-18
ER

PT J
AU Bensalem, S
   Bozga, M
   Quilbeuf, J
   Sifakis, J
AF Bensalem, Saddek
   Bozga, Marius
   Quilbeuf, Jean
   Sifakis, Joseph
TI Optimized distributed implementation of multiparty interactions with
   Restriction
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Multiparty interaction; Priority; Observation; Conflict resolution;
   Distributed systems
ID KNOWLEDGE; SYSTEMS; MODEL
AB Using high level coordination primitives allows enhanced expressiveness of component-based frameworks to cope with the inherent complexity of present-day systems designs. Nonetheless, their distributed implementation raises multiple issues, regarding both the correctness and the runtime performance of the final implementation. We propose a novel approach for distributed implementation of multiparty interactions subject to scheduling constraints expressed by priorities. We rely on a new composition operator named Restriction, whose semantics dynamically restricts the set of interactions allowed for execution, depending on the current state. We show that this operator provides a natural encoding for priorities. We provide a knowledge-based optimization that modifies the Restriction operator to avoid superfluous communication in the final implementation. We complete our framework through an enhanced conflict resolution protocol that natively implements Restriction. A prototype implementation allows us to compare performances of different optimizations. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Bensalem, Saddek; Bozga, Marius; Quilbeuf, Jean; Sifakis, Joseph] UJF Grenoble 1, CNRS, VERIMAG UMR 5104, F-38041 Grenoble, France.
   [Sifakis, Joseph] Ecole Polytech Fed Lausanne, RISD Lab, CH-1015 Lausanne, Switzerland.
C3 Communaute Universite Grenoble Alpes; Institut National Polytechnique de
   Grenoble; Universite Grenoble Alpes (UGA); Centre National de la
   Recherche Scientifique (CNRS); Swiss Federal Institutes of Technology
   Domain; Ecole Polytechnique Federale de Lausanne
RP Quilbeuf, J (corresponding author), UJF Grenoble 1, CNRS, VERIMAG UMR 5104, F-38041 Grenoble, France.
EM bensalem@imag.fr; bozga@imag.fr; quilbeuf@fortiss.org; sifakis@imag.fr
FU European Community's Seventh Framework Programme [FP7] [248776 (PRO3D),
   257414 (ASCENS)]; ARTEMIS JU grant [ARTEMIS-2009-1-100230 (SMECY)]
FX This article extends two papers, presented at the AGEREI2012 workshop
   and at the FMOODS/FORTE 2012 conference. The research leading to these
   results has received funding from the European Community's Seventh
   Framework Programme [FP7/2007-2013] under grant agreement No. 248776
   (PRO3D) and No. 257414 (ASCENS) and from ARTEMIS JU grant agreement
   ARTEMIS-2009-1-100230 (SMECY).
CR Abdellatif T., 2010, Proceedings of the tenth ACM international conference on Embedded software, P229
   [Anonymous], 1989, CWI Q.
   [Anonymous], 1995, COMMUNICATION CONCUR
   [Anonymous], P 10 INT C EMB SOFTW
   Arbab F, 2004, MATH STRUCT COMP SCI, V14, P329, DOI 10.1017/S0960129504004153
   BAGRODIA R, 1989, IEEE T SOFTWARE ENG, V15, P1053, DOI 10.1109/32.31364
   Basu A, 2008, LECT NOTES COMPUT SC, V5048, P116, DOI 10.1007/978-3-540-68855-6_8
   Basu A, 2006, I C SOFTW ENG FORM M, P3
   Basu A, 2011, FORM METHOD SYST DES, V39, P229, DOI 10.1007/s10703-011-0128-y
   Ben-Hafaiedh I, 2011, J LOGIC ALGEBR PROGR, V80, P194, DOI 10.1016/j.jlap.2010.10.001
   Bensalem Saddek, 2013, Hardware and Software: Verification and Testing. 8th International Haifa Verification Conference, HVC 2012 Revised Selected Papers. LNCS 7857, P40, DOI 10.1007/978-3-642-39611-3_10
   Bensalem Saddek, 2012, Formal Techniques for Distributed Systems. Joint 14th IFIP WG 6.1 International Conference, FMOODS 2012 and 32nd IFIP WG 6.1 International Conference, FORTE 2012, P118, DOI 10.1007/978-3-642-30793-5_8
   Bensalem S., 2010, 2010 Formal Methods in Computer-Aided Design (FMCAD 2010), P257
   Bensalem S., 2008, ATVA
   Bensalem S., 2012, P 2 ED PROGR SYST LA, P71
   Bensalem S, 2010, LECT NOTES COMPUT SC, V6252, P52
   Bensalem S, 2010, LECT NOTES COMPUT SC, V6200, P26, DOI 10.1007/978-3-642-13754-9_2
   Bensalem S, 2009, LECT NOTES COMPUT SC, V5643, P614, DOI 10.1007/978-3-642-02658-4_45
   Bonakdarpour B., 2011, 2011 International Conference on Embedded Software (EMSOFT 2011), P59
   Bonakdarpour B, 2012, DISTRIB COMPUT, V25, P383, DOI 10.1007/s00446-012-0168-6
   Chandy K.M., 1988, PARALLEL PROGRAM DES
   CHANDY KM, 1984, ACM T PROGR LANG SYS, V6, P632, DOI 10.1145/1780.1804
   Dinges Peter, 2012, Coordination Models and Languages. Proceedings 14th International Conference, COORDINATION 2012, P89, DOI 10.1007/978-3-642-30829-1_7
   Fagin R, 1995, Reasoning about knowledge
   Frolund S., 1993, ECOOP '93 - Object-Oriented Programming. 7th European Conference Proceedings, P346
   Garland S.J., 2000, Foundations of component-based systems, P285
   Georgiou Chryssis, 2009, International Journal on Software Tools for Technology Transfer, V11, P153, DOI 10.1007/s10009-008-0097-7
   GERMAN SM, 1992, LECT NOTES COMPUT SC, V630, P534
   Graf S, 2012, FORM METHOD SYST DES, V40, P263, DOI 10.1007/s10703-011-0138-9
   Gropp W., 1999, Using MPI-2: Advanced Features of the Message Passing Interface, Vsecond
   HALPERN JY, 1989, DISTRIB COMPUT, V3, P159, DOI 10.1007/BF01784885
   HALPERN JY, 1990, J ACM, V37, P549, DOI 10.1145/79147.79161
   Herlihy M., 1993, INT S COMPUTER ARCHI, DOI DOI 10.1145/165123.165164
   Joung YJ, 1998, IEEE T PARALL DISTR, V9, P137, DOI 10.1109/71.663873
   KIRKPATRICK S, 1983, SCIENCE, V220, P671, DOI 10.1126/science.220.4598.671
   KRUCKEBERG F, 1987, LECT NOTES COMPUT SC, V266, P104
   Kumar D., 1990, Proceedings. The 10th International Conference on Distributed Computing Systems (Cat. No.90CH2878-7), P320, DOI 10.1109/ICDCS.1990.89299
   Marron Assaf., 2012, Proceedings of the 2nd edition on Programming systems, languages and applications based on actors, agents, and decentralized control abstractions - AGERE!'12, page, P59
   Parrow J, 1992, INT C CONC THEOR CON, P518
   Pawlak Z, 2007, INFORM SCIENCES, V177, P3, DOI 10.1016/j.ins.2006.06.003
   Pérez JA, 2004, CONCURR COMP-PRACT E, V16, P1173, DOI 10.1002/cpe.903
   Proenca J., 2011, THESIS LEIDEN U
   Proenca J., 2012, P 27 ANN ACM S APPL, P1510, DOI DOI 10.1145/2245276.2232017
   Ricker SL, 2000, IEEE T AUTOMAT CONTR, V45, P1656, DOI 10.1109/9.880616
   TAUBER JA, 2005, THESIS MIT
   Triki A, 2013, LECT NOTES COMPUT SC, V7793, P235, DOI 10.1007/978-3-642-37057-1_18
   Zhou J, 2009, LECT NOTES ARTIF INT, V5589, P152, DOI 10.1007/978-3-642-02962-2_19
NR 47
TC 3
Z9 3
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 1
PY 2015
VL 98
SI SI
BP 293
EP 316
DI 10.1016/j.scico.2014.02.013
PN 2
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AY7LF
UT WOS:000347741000009
OA Green Submitted, Green Published, Bronze
DA 2024-07-18
ER

PT J
AU Ujhelyi, Z
   Bergmann, G
   Hegedüs, A
   Horváth, A
   Izsó, B
   Ráth, I
   Szatmári, Z
   Varró, D
AF Ujhelyi, Zoltan
   Bergmann, Gabor
   Hegedues, Abel
   Horvath, Akos
   Izso, Benedek
   Rath, Istvan
   Szatmari, Zoltan
   Varro, Daniel
TI EMF-INCQUERY: An integrated development environment for live model
   queries
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Live model query; EMF; Integrated development environment
AB As model management platforms are gaining industrial attention, the importance of automated model querying techniques is also increasing. Several important engineering tasks supported by model-based tools - such as well-formedness constraint validation or model transformations - rely on efficiently evaluating model queries. If the models change rapidly or frequently, it is beneficial to provide live and incrementally evaluated queries that automatically propagate model changes to keep query results consistent.
   The current paper reports on the of EMF-INCQUERY framework focusing on new features of its integrated development environment (such as query validation and visualization) and its support for integrating queries to existing applications (e.g. by auto-generated data bindings) built on top of the industry standard Eclipse Modeling Framework (EMF). Our approach is illustrated on a case study integrating well-formedness constraints to the Papyrus UML tool by live model queries of EMF-INCQUERY with negligible additional manual programming effort. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Ujhelyi, Zoltan; Bergmann, Gabor; Hegedues, Abel; Horvath, Akos; Izso, Benedek; Rath, Istvan; Szatmari, Zoltan; Varro, Daniel] Budapest Univ Technol & Econ, Dept Measurement & Informat Syst, H-1117 Budapest, Hungary.
C3 Budapest University of Technology & Economics
RP Ujhelyi, Z (corresponding author), Budapest Univ Technol & Econ, Dept Measurement & Informat Syst, Magyar Tudosok Krt 2, H-1117 Budapest, Hungary.
EM ujhelyiz@mit.bme.hu; bergmann@mit.bme.hu; hegedusa@mit.bme.hu;
   ahorvath@mit.bme.hu; izso@mit.bme.hu; rath@mit.bme.hu;
   szatmari@mit.bme.hu; varro@mit.bme.hu
RI Bergmann, Gábor/Q-6400-2019; Varro, Daniel/AAC-4234-2022; Ujhelyi,
   Zoltán/G-8627-2012; Szatmári, Zoltán/I-6052-2012; Rath,
   Istvan/E-4846-2013; Hegedus, Abel/A-8494-2012
OI Bergmann, Gábor/0000-0002-2556-2582; Varro, Daniel/0000-0002-8790-252X;
   Ujhelyi, Zoltán/0000-0002-2091-6441; Rath, Istvan/0000-0002-5516-696X;
   Horvath, Akos/0000-0003-3545-3694; Perez del Campo,
   Lorenzo/0000-0002-4647-5453; Hegedus, Abel/0000-0002-8940-4348
FU CERTIMOT project [ERC_HU-09-1-2010-0003]; Janos Bolyai Scholarship;
   European Social Fund; National Excellence Program - Elaborating and
   operating an inland student and researcher personal support system
   [TAMOP 4.2.4. A/1-11-1-2012-0001];  [TAMOP - 4.2.2.B-10/1-2010-0009]
FX This work was partially supported by the CERTIMOT project
   (ERC_HU-09-1-2010-0003), by the grant TAMOP - 4.2.2.B-10/1-2010-0009 and
   the Janos Bolyai Scholarship. This research was partially realized in
   the frames of TAMOP 4.2.4. A/1-11-1-2012-0001 "National Excellence
   Program - Elaborating and operating an inland student and researcher
   personal support system". The project was subsidized by the European
   Union and co-financed by the European Social Fund.
CR [Anonymous], 2011, ECEASST
   [Anonymous], P GT VMT 2009 ECEASS
   [Anonymous], 2012, INFOSPHERE DATA ARCH
   [Anonymous], OBJ CONSTR LANG V2 0
   Bergmann Gabor, 2011, 2011 26th IEEE/ACM International Conference on Automated Software Engineering, P580, DOI 10.1109/ASE.2011.6100130
   Bergmann Gabor, 2011, Theory and Practice of Model Transformations. Proceedings of the 4th International Conference, ICMT 2011, P167, DOI 10.1007/978-3-642-21732-6_12
   Bergmann G., GRAMOT 08
   Bergmann G., 2009, ECEASST, V18
   Bergmann G, 2012, LECT NOTES COMPUT SC, V7304, P1, DOI 10.1007/978-3-642-30561-0_1
   Bergmann G, 2010, LECT NOTES COMPUT SC, V6394, P76
   Biermann E., 2008, MoDELS'08
   Bizer C, 2009, INT J SEMANT WEB INF, V5, P1, DOI 10.4018/jswis.2009081901
   Bull I., 2008, THESIS U VICTORIA VI
   Cabot J, 2009, J SYST SOFTWARE, V82, P1459, DOI 10.1016/j.jss.2009.03.009
   DECHTER R, 1987, ARTIF INTELL, V34, P1, DOI 10.1016/0004-3702(87)90002-6
   FORGY CL, 1982, ARTIF INTELL, V19, P17, DOI 10.1016/0004-3702(82)90020-0
   Havre S, 2001, IEEE SYMPOSIUM ON INFORMATION VISUALIZATION 2001, PROCEEDINGS, P105, DOI 10.1109/INFVIS.2001.963287
   Hegedus A., 2012, LECT NOTES COMPUT SC, V7590
   Hu L, 2008, PROC VLDB ENDOW, V1, P1488, DOI 10.14778/1454159.1454209
   Izsó B, 2013, IEEE INT CONF AUTOM, P421, DOI 10.1109/ASE.2013.6693100
   Jouault F, 2010, LECT NOTES COMPUT SC, V6142, P123, DOI 10.1007/978-3-642-13688-7_9
   MySQL workbench database design, 2012, MYSQL WORKB DAT DES
   Rath Istvan, 2012, Modelling Foundations and Applications. Proceedings 8th European Conference, ECMFA 2012, P102, DOI 10.1007/978-3-642-31491-9_10
   Reder Alexander, 2012, Model Driven Engineering Languages and Systems. Proceedings 15th International Conference, MODELS 2012, P202, DOI 10.1007/978-3-642-33666-9_14
   Schmidt M, 2009, PROC INT CONF DATA, P222, DOI 10.1109/ICDE.2009.28
   The Eclipse Project, 2012, ATL MOD TRANSF TECHN
   The Eclipse Project, 2012, EMF VAL FRAM
   The Eclipse Project, 2012, MOD MOD PROJ
   The Eclipse Project, 2012, JFACE DAT BIND
   The Eclipse Project, 2012, EMFT SEARCH
   TPC, 2010, TPC C BENCHM
   Ujhelyi Z., 2012, P 1 WORKSH AN MOD TR
   Varro Gergely, 2012, Theory and Practice of Model Transformations. Proceedings 5th International Conference, ICMT 2012, P224, DOI 10.1007/978-3-642-30476-7_15
NR 33
TC 75
Z9 83
U1 0
U2 4
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 1
PY 2015
VL 98
BP 80
EP 99
DI 10.1016/j.scico.2014.01.004
PN 1
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AY7LA
UT WOS:000347740500005
DA 2024-07-18
ER

PT J
AU Lagadec, L
   Teodorov, C
   Le Lann, JC
   Picard, D
   Fabiani, E
AF Lagadec, Loic
   Teodorov, Ciprian
   Le Lann, Jean-Christophe
   Picard, Damien
   Fabiani, Erwan
TI Model-driven toolset for embedded reconfigurable cores: Flexible
   prototyping and software-like debugging
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Software engineering; Model-driven; Debugging; Reconfigurable computing;
   System-on-Chip
ID ARCHITECTURE; GENERATION; PROCESSOR
AB Improvements in system cost, size, performance, power dissipation, and design turnaround time are the key benefits offered by System-on-Chip designs. However they come at the cost of an increased complexity and long development cycles. Integrating reconfigurable cores offers a way to increase their flexibility and lifespan. However the integration of embedded reconfigurable units poses a number of unique challenges in terms of design-space exploration and system exploitation. Over the last few years, model-driven engineering has become one of the most promising methodologies for tackling such challenging software problems.
   This paper presents Biniou, a model-driven toolset for embedded reconfigurable core modeling. Biniou is a major step ahead of the Madeo framework that was one of the rare non-commercial environments targeting reconfigurable design automation. In Biniou, the design space is broadened with (re-)configuration modeling aspects, and the exploitation tools are enhanced through the use of multi-level simulation and high-level debugging. These advancements are illustrated through a case-study focused on the design-space exploration of a coarse-grained reconfigurable architecture and through an examination of the integration of the debug-specific features into the framework. The main benefits of the presented toolset are: efficient domain-space exploration (validation), software design-kit generation (usability), software-like debug facilities (verification). (C) 2014 Elsevier B.V. All rights reserved.
C1 [Lagadec, Loic; Teodorov, Ciprian; Le Lann, Jean-Christophe; Fabiani, Erwan] CNRS, Lab STICC MOCS, F-6285 Paris, France.
   [Lagadec, Loic; Teodorov, Ciprian; Le Lann, Jean-Christophe] ENSTA Bretagne, Brest, France.
   [Fabiani, Erwan] Univ Bretagne Occidentale, F-29269 Brest, France.
C3 Centre National de la Recherche Scientifique (CNRS); ENSTA Bretagne;
   Universite de Bretagne Occidentale
RP Lagadec, L (corresponding author), CNRS, Lab STICC MOCS, F-6285 Paris, France.
RI Le Lann, Jean-Christophe/ABD-1440-2020
OI lagadec, loic/0000-0003-3778-3144
FU ARDyT project [ANR-11-INSE-15]
FX Part of this research has been supported by the ARDyT project
   (ANR-11-INSE-15).
CR *ACC, 2003, PROP SPEC LANG REF M
   Altera, 2001, DAT SIGNALTAP EMB LO
   [Anonymous], LANGUAGE DRIVEN EXPL
   [Anonymous], 1994, SYNTHESIS OPTIMIZATI, DOI DOI 10.5555/541643
   [Anonymous], XUPV51X110T
   [Anonymous], 2005, RUNTIME BYTECODE TRA
   Ben Hammouda M., 2014, 2014 IEEE INT S CIRC
   Betz J. Rose A. Marquardt., 1999, Architecture and CAD for Deep-Submicron FPGAs
   Betz V., 1997, Field-programmable Logic and Applications. 7th International Workshop, FPL '97. Proceedings, P213
   Betz V., 1997, LECT NOTES COMPUT SC
   CHANDY KM, 1985, ACM T COMPUT SYST, V3, P63, DOI 10.1145/214451.214456
   Company T.T.A., TARG COMP TECHN
   Coole J., 2010, 2010 IEEE/ACM/IFIP International Conference on Hardware/Software Codesign and System Synthesis (CODES+ISSS), P13
   Curreri J, 2011, INT J RECONFIGURABLE, V2011, DOI 10.1155/2011/406857
   DeHon A., 1996, FPGA '96. 1996 ACM Fourth International Symposium on Field-Programmable Gate Arrays, P115, DOI 10.1145/228370.228387
   Edenfeld D, 2004, COMPUTER, V37, P47, DOI 10.1109/MC.2004.1260725
   FAUTH A, 1995, EUR CONF DESIG AUTOM, P503, DOI 10.1109/EDTC.1995.470354
   Ganai MK, 2007, I CONF VLSI DESIGN, P50, DOI 10.1109/VLSID.2007.151
   Goldstein SC, 2000, COMPUTER, V33, P70, DOI 10.1109/2.839324
   Graham P., 2001, Proceedings of the the 9th Annual IEEE Symposium on Field-Programmable Custom Computing Machines, P41
   Hauck S, 1997, 5TH ANNUAL IEEE SYMPOSIUM ON FIELD-PROGRAMMABLE CUSTOM COMPUTING MACHINES, P87, DOI 10.1109/FPGA.1997.624608
   Heysters P.M., 2006, P ERSA, P272
   HOARE CAR, 1978, COMMUN ACM, V21, P666, DOI 10.1145/359576.359585
   Keng B., 2010, Proceedings of the 2010 11th International Workshop on Microprocessor Test and Verification (MTV), P9, DOI 10.1109/MTV.2010.11
   Lagadec L., 2001, Field Programmable Logic and Applications. 11th International Conference, FPL 2001. Proceedings (Lecture Notes in Computer Science Vol.2147), P357
   Lagadec L, 2000, PROC SPIE, V4212, P69, DOI 10.1117/12.402529
   Lagadec L., 2010, 7551 KIT
   Lagadec L., 2011, INT J RECONFIGURABLE, V2011
   Lagadec L., 2000, THESIS
   Lagadec L., 2010, IWST 10, P11
   Lallet J, 2009, PROCEEDINGS OF THE 2009 12TH EUROMICRO CONFERENCE ON DIGITAL SYSTEM DESIGN, ARCHITECTURES, METHODS AND TOOLS, P680, DOI 10.1109/DSD.2009.151
   Leupers R, 1998, DES AUTOM EMBED SYST, V3, P75, DOI 10.1023/A:1008807631619
   Lodi A, 2003, P ACM SIGDA 11 INT S, P21
   Lucent P., 2000, ORCA SER
   Martin E., 1993, IEEE EUR DES AUT C
   Mei BF, 2003, LECT NOTES COMPUT SC, V2778, P61
   Mernik M., 2000, Proceedings of the 33rd Annual Hawaii International Conference on Systems Sciences
   Mesquita D., 2003, Proceedings International Parallel and Distributed Processing Symposium, DOI 10.1109/IPDPS.2003.1213326
   Mishra P, 2005, IEE P-COMPUT DIG T, V152, P285, DOI 10.1049/ip-cdt:20045071
   MISHRA P, 2004, ACM T EMBED COMPUT S, V3, P114
   Mishra P, 2006, ACM T DES AUTOMAT EL, V11, P626, DOI 10.1145/1142980.1142985
   Morin-Allory K., 2006, DES AUT TEST EUR 200, V1, P1
   Obereder H, 2007, P IEEE RAP SYST PROT, P157
   Oddos Y., 2009, 2009 17th IFIP International Conference on Very Large Scale Integration (VLSI-SoC), P83
   Padalia K., 2003, Proceedings of the 2003 ACM/SIGDA 11th International Symposium on Field-Programmable Gate Arrays, P164, DOI [10.1145/611817.611842, DOI 10.1145/611817.611842]
   Parizi H, 2002, LECT NOTES COMPUT SC, V2400, P844
   Paulsson K., 2008, ISVLSI
   Pees S., 1999, Proceedings 1999 Design Automation Conference (Cat. No. 99CH36361), P933, DOI 10.1109/DAC.1999.782231
   Perissakis S, 2009, LECT NOTES ELECTR EN, V40, P217
   Picard D., 2008, RECOSOC08
   Picard D, 2009, INT J RECONFIGURABLE, V2009, DOI 10.1155/2009/162416
   ROSINGER H.-P., 2004, CONNECTING CUSTOMIZE
   Sawhney P., 2011, Proceedings of the 2011 International Symposium on Electronic System Design (ISED 2011), P164, DOI 10.1109/ISED.2011.70
   Schwartz-Narbonne D., 2011, 2011 9th IEEE/ACM International Conference on Formal Methods and Models for Codesign (MEMOCODE 2011), P181, DOI 10.1109/MEMCOD.2011.5970525
   Teodorov C., 2011, PROC 6 INT WORKSHOP, P1
   Teodorov C., 2013, SOFTWARE PRACTICE EX
   Tiwari A., 2003, ASPDAC
   Tomita H, 1999, INT OFFSHORE POLAR E, P109
   Xilinx, 2008, UG029 XIL
   Xilinx, 2004, REV FPGA REAL TIM LO
   Xilinx, 2008, MICR PROC REF GUID
   Xilinx, 2005, VIRTEX FPGA SERIES C
   Zhang T, 2001, DESIGN, AUTOMATION AND TEST IN EUROPE, CONFERENCE AND EXHIBITION 2001, PROCEEDINGS, P40, DOI 10.1109/DATE.2001.914999
NR 63
TC 3
Z9 3
U1 0
U2 9
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 15
PY 2014
VL 96
SI SI
BP 156
EP 174
DI 10.1016/j.scico.2014.02.015
PN 1
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AT8JX
UT WOS:000345180800011
OA Bronze
DA 2024-07-18
ER

PT J
AU Polito, G
   Ducasse, S
   Fabresse, L
   Bouraqadi, N
   van Ryseghem, B
AF Polito, G.
   Ducasse, S.
   Fabresse, L.
   Bouraqadi, N.
   van Ryseghem, B.
TI Bootstrapping reflective systems: The case of Pharo
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Object-oriented programming and design; Bootstrap; Smalltalk; Software
   evolution
ID FACILITIES
AB Bootstrapping is a technique commonly known by its usage in language definition by the introduction of a compiler written in the same language it compiles. This process is important to understand and modify the definition of a given language using the same language, taking benefit of the abstractions and expression power it provides. A bootstrap, then, supports the evolution of a language. However, the infrastructure of reflective systems like Smalltalk includes, in addition to a compiler, an environment with several self-references. A reflective system bootstrap should consider all its infrastructural components. In this paper, we propose a definition of bootstrap for object-oriented reflective systems, we describe the architecture and components it should contain and we analyze the challenges it has to overcome. Finally, we present a reference bootstrap process for a reflective system and Hazelnut, its implementation for bootstrapping the Pharo Smalltalk-inspired system. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Polito, G.; Ducasse, S.; van Ryseghem, B.] Univ Lille 1, Inria Lille Nord Europe, RMoD Project Team, F-59655 Villeneuve Dascq, France.
   [Polito, G.; Fabresse, L.; Bouraqadi, N.] Univ Lille Nord France, Ecole Mines Douai, Lille, France.
C3 Universite de Lille; Universite de Lille
RP Polito, G (corresponding author), Univ Lille 1, Inria Lille Nord Europe, RMoD Project Team, F-59655 Villeneuve Dascq, France.
EM guillermo.polito@mines-douai.fr; stephane.ducasse@inria.fr;
   luc.fabresse@mines-douai.fr; noury.bouraqadi@mines-douai.fr;
   benjamin.van_ryseghem@inria.fr
RI Fabresse, Luc/AAH-9286-2020
OI Fabresse, Luc/0000-0002-2223-7258; Ducasse, Stephane/0000-0001-6070-6599
FU Ministry of Higher Education and Research; FEDER through the Contrat de
   Projets Etat Region (CPER); Nord-Pas de Calais Regional Council
FX This work was supported by Ministry of Higher Education and Research,
   Nord-Pas de Calais Regional Council and FEDER through the Contrat de
   Projets Etat Region (CPER) 2007-2013. We would also like to thank Pavel
   Krivanek and John Maloney for the code they provided and we used to
   extract the specification of the PharoKernel and PharoCandle
   respectively.
CR Black A.P., 2007, Squeak by Example
   Black Andrew P., 2009, PHARO EXAMPLE
   Bracha G, 2004, ACM SIGPLAN NOTICES, V39, P331, DOI 10.1145/1035292.1029004
   Casaccio Gwenael, 2011, P SMALLT 2011 INT WO
   Casaccio Gwenael, 2009, P ESUG INT WORKSH SM, P77
   Chiba S., 1996, Object Technologies for Advanced Software. Second JSSST International Symposium ISOTAS'96. Proceedings, P157
   COINTE P, 1987, SIGPLAN NOTICES, V22, P156, DOI 10.1145/38807.38822
   Denker M, 2007, ELECTRON NOTES THEOR, V166, P81, DOI 10.1016/j.entcs.2006.08.003
   Dias Martin, 2012, J SOFTW PRACT EXP
   Ducasse S, 1999, J OBJECT-ORIENT PROG, V12, P39
   FOOTE B, 1989, SIGPLAN NOTICES, V24, P327, DOI 10.1145/74878.74911
   Gokel Cano, 2010, COMPUTER PROGRAMMING
   Gybels K, 2006, COMPUT LANG SYST STR, V32, P109, DOI 10.1016/j.cl.2005.10.003
   Kiczales Gregor, 1991, ART METAOBJECT PROTO
   LIVSHITS B, 2005, P AS S PROGR LANG SY
   MAES P, 1987, SIGPLAN NOTICES, V22, P147
   Maloney John, MICROSQUEAK
   Rhodes C, 2008, LECT NOTES COMPUT SC, V5146, P74
   Rivard Fred, 1996, REV INFORM INFORM RE
   Scharli Nathanael, 2002, CSE02014 U BERN OGI
   Smith B. C., 1984, P 11 ACM SIGACT SIGP, P23, DOI [DOI 10.1145/800017.800513, 10.1145/800017.800513]
   WUYTS R, 2001, ECOOP 2001 INT WORKS
NR 22
TC 2
Z9 2
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 15
PY 2014
VL 96
SI SI
BP 141
EP 155
DI 10.1016/j.scico.2013.10.008
PN 1
PG 15
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AT8JX
UT WOS:000345180800010
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Heinrich, M
   Lehmann, F
   Grüneberger, FJ
   Gaedke, M
   Springer, T
   Schill, A
AF Heinrich, Matthias
   Lehmann, Franz
   Grueneberger, Franz Josef
   Gaedke, Martin
   Springer, Thomas
   Schill, Alexander
TI Enriching single-user web applications non-invasively with shared
   editing support
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Web applications; Shared editing; Groupware
AB Collaborative real-time applications like Google Docs allow multiple users to edit the very same document simultaneously which supersedes traditional document merging and document locking techniques. However, developing collaborative web applications is a time-consuming and complex endeavor since it requires implementing document synchronization and conflict resolution services. To accelerate the development of collaborative web applications, we present a rapid transformation approach allowing to non-invasively introduce shared editing capabilities into existing single-user web applications. Instead of changing the application's source code, our non-invasive approach leverages a generic collaboration infrastructure that requires only a configuration to provide document synchronization and conflict resolution services. Hence, the effort to incorporate shared editing capabilities is considerably reduced in contrast to conventional approaches where the use of a programing library entails scattered source code changes. Moreover, we report on the results of a user study demonstrating that converted editors are convenient for collaborative work. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Heinrich, Matthias; Lehmann, Franz; Grueneberger, Franz Josef] SAP AG, SAP Res, Dresden, Germany.
   [Gaedke, Martin] Tech Univ Chemnitz, Dept Comp Sci, Chemnitz, Germany.
   [Springer, Thomas; Schill, Alexander] Tech Univ Dresden, Dept Comp Sci, Dresden, Germany.
C3 SAP; Technische Universitat Chemnitz; Technische Universitat Dresden
RP Heinrich, M (corresponding author), SAP AG, SAP Res, Dresden, Germany.
EM matthias.heinrich@sap.com; franz.lehmann@sap.com;
   franz.josef.grueneberger@sap.com; martin.gaedke@cs.tu-chemnitz.de;
   thomas.springer@tu-dresden.de; alexander.schill@tu-dresden.de
RI Springer, Thomas/KGK-4852-2024; Gaedke, Martin/U-5991-2017
OI Gaedke, Martin/0000-0002-6729-2912
FU European Commission [257635]
FX This work was partially supported by funds from the European Commission
   (project OMELETTE, contract number 257635).
CR A.S. Foundation, 2012, AP WAV
   Agustina A, 2008, CSCW: 2008 ACM CONFERENCE ON COMPUTER SUPPORTED COOPERATIVE WORK, CONFERENCE PROCEEDINGS, P5
   [Anonymous], 2013, GOOGLE DOCE ONLINE D
   Bevan N, 1999, J SYST SOFTWARE, V49, P89, DOI 10.1016/S0164-1212(99)00070-9
   Davis Aguido Horatio., 2002, Proceedings of the 2002 ACM Conference on Computer Supported Cooperative Work (CSCW) (New Orleans, LA, USA), P58
   ELLIS CA, 1989, SIGMOD REC, V18, P399, DOI 10.1145/66926.66963
   Fraser N, 2009, DOCENG'09: PROCEEDINGS OF THE 2009 ACM SYMPOSIUM ON DOCUMENT ENGINEERING, P13
   Grishchenko V.S., 2010, INT S WIK
   Heinrich Matthias., 2013, Proceedings of the 22nd international conference on World Wide Web, P551
   Hill J., 2004, Computer Supported Cooperative Work: The Journal of Collaborative Computing, V13, P539, DOI 10.1007/s10606-004-5063-7
   Hors A.L., 2004, Document object model (dom) level 3 core specification
   ISO/IEC, 2001, ISO/IEC 9126-1
   Oster G., 2006, CSCW 06 P 2006 20 AN, P259, DOI DOI 10.1145/1180875.1180916
   Pinelle D., 2003, ACM Transactions on Computer-Human Interaction, V10, P281, DOI 10.1145/966930.966932
   Prakash A., 1994, ACM Transactions on Computer-Human Interaction (TOCHI), V1, P295
   Preguiça N, 2009, INT CON DISTR COMP S, P395, DOI 10.1109/ICDCS.2009.20
   Rickayzen A., 2013, COLLABORATIVE PROCES
   Roseman M., 1996, ACM T COMPUT-HUM INT, V3, P66, DOI DOI 10.1145/226159.226162
   Schepers D., 2011, DOCUMENT OBJECT MODE
   Shen H., 2002, Proceedings of the 2002 ACM conference on Computer supported cooperative work, P77
   Sun C., 2006, ACM Transactions on Computer-Human Interaction, V13, P531, DOI 10.1145/1188816.1188821
   Twidale M., 1994, Transcending Boundaries, CSCW '94. Proceedings of the Conference on Computer Supported Cooperative Work, P441, DOI 10.1145/192844.193066
   Xia S., 2004, Computer Supported Cooperative Work Conference Proceedings, P162, DOI 10.1145/1031607.1031635
NR 23
TC 1
Z9 1
U1 0
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 15
PY 2014
VL 94
SI SI
BP 53
EP 66
DI 10.1016/j.scico.2013.07.017
PN 1
PG 14
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AS1JU
UT WOS:000344038400005
OA hybrid
DA 2024-07-18
ER

PT J
AU Jones, CB
   Lovert, MJ
   Steggles, LJ
AF Jones, Cliff B.
   Lovert, Matthew J.
   Steggles, L. Jason
TI Revising basic theorem proving algorithms to cope with the logic of
   partial functions
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Proof; Theorem proving systems; Partial functions; LPF
AB Partial terms are those that can fail to denote a value; such terms arise frequently in the specification and development of programs. Earlier papers describe and argue for the use of the non-classical "Logic of Partial Functions" (LPF) to facilitate sound and convenient reasoning about such terms. This paper reviews the fundamental theorem proving algorithms - such as resolution - and identifies where they need revision to cope with LPF. Particular care is needed with "refutation" procedures. The modified algorithms are justified with respect to a semantic model. Indications are provided of further work which could lead to efficient support for LPF. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Jones, Cliff B.; Lovert, Matthew J.; Steggles, L. Jason] Newcastle Univ, Sch Comp Sci, Newcastle Upon Tyne NE1 7RU, Tyne & Wear, England.
C3 Newcastle University - UK
RP Jones, CB (corresponding author), Newcastle Univ, Sch Comp Sci, Newcastle Upon Tyne NE1 7RU, Tyne & Wear, England.
EM cliff.jones@ncl.ac.uk; matthew.lovert@ncl.ac.uk; l.j.steggles@ncl.ac.uk
OI Jones, Cliff/0000-0002-0038-6623
FU EPSRC PhD Studentship; EPSRC grant; EPSRC Platform Grant [TrAmS-2]; EU
   IP; EPSRC [EP/E035329/1, EP/H024050/1] Funding Source: UKRI
FX The authors would like to thank Matthias Schmalz, Gordon Plotkin and
   Arnon Avron for helpful discussions on work related to the topic of this
   paper and the anonymous referees who offered valuable clarifying
   comments on an earlier version of this paper. The authors also
   gratefully acknowledge the funding for their research from an EPSRC PhD
   Studentship, the EPSRC grant for AI4FM, the EPSRC Platform Grant TrAmS-2
   and the EU IP funding for DEPLOY (this last supported the contact with
   ETH).
CR [Anonymous], 1952, INTRO METAMATHEMATIC
   [Anonymous], 1969, MACHINE INTELLIGENCE
   [Anonymous], MATHWARE SOFT COMPUT
   [Anonymous], 1983, The Computer Modelling of Mathematical Reasoning
   Avron Arnon, 2001, MULTIPLE VALUED LOGI
   Bachmair L., 2001, HDB AUTOMATED REASON, V1, P19, DOI DOI 10.1016/B978-044450813-3/50004-7
   BARRINGER H, 1984, ACTA INFORM, V21, P251, DOI 10.1007/BF00264250
   Ben-Ari Mordechai, 2012, Mathematical logic for computer science
   Bicarregui JC., 1994, PROOF VDM PRACTITION
   Bicarregui Juan C., 1999, 3 IR WORKSH FORM SOF
   Cheng J. H., 1991, 3rd Refinement Workshop. Proceedings, P51
   Cheng J.H., 1986, THESIS U MANCHESTER
   Cheng J.H., 1990, UMCS9031 MANCH U
   Farmer W. M., 2000, Studia Logica, V66, P59, DOI 10.1023/A:1026744827863
   Farmer William M., 1996, P WORKSH MECH PART F, P27
   FARMER WM, 1990, J SYMBOLIC LOGIC, V55, P1269, DOI 10.2307/2274487
   Fitzgerald J.S., 2007, LOGICS SPECIFICATION, P427
   Gries D, 1995, LECT NOTES COMPUT SC, V1000, P366
   Harrison J, 2009, Handbook of Practical Logic and Automated Reasoning
   Jones C.B., 2011, INT J SOFTW INFORM, V5, P55
   Jones C.B., 2012, LECT NOTES COMPUTER, V7316, P252
   Jones C. B., 1991, MURAL FORMAL DEV SUP
   Jones C.B., 2012, CSTR1314 NEWC U
   JONES CB, 1994, ACTA INFORM, V31, P399, DOI 10.1007/BF01178666
   Jones CB., 1990, SYSTEMATIC SOFTWARE
   Jones C, 2006, ENGLISH PRONUNCIATION IN THE EIGHTEENTH AND NINETEENTH CENTURIES, P3
   Kerber M., 1994, Automated Deduction - CADE-12. 12th International Conference on Automated Deduction. Proceedings, P371
   Lovert M.J., 2010, P 8 OV WORKSH NEWC U, V33-45
   Matthew J., 2013, THESIS NEWCASTLE U
   Mccarthy J., 1967, Correctness of a compiler for arithmetic expressions. pages, P33
   Muller O, 1997, COMPUT J, V40, P640, DOI 10.1093/comjnl/40.10.640
   Owe O., 1985, 89 U OSL I INF
   ROBINSON JA, 1965, J ACM, V12, P23, DOI 10.1145/321250.321253
   Schmalz M., 2012, Ph.D. thesis
   Schmalz M, 2011, LECT NOTES COMPUT SC, V6991, P633, DOI 10.1007/978-3-642-24559-6_42
   Stoy Joseph E., 1977, DENOTATIONAL SEMANTI
   Wos Lawrence., 1964, Proceedings of the October 27-29, 1964, fall joint computer conference, part I, AFIPS '64 (Fall, part I), P615
NR 37
TC 1
Z9 1
U1 0
U2 1
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 15
PY 2014
VL 94
SI SI
BP 238
EP 252
DI 10.1016/j.scico.2013.09.007
PN 2
PG 15
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AS1JW
UT WOS:000344038500010
OA Bronze, Green Published
DA 2024-07-18
ER

PT J
AU Rubanov, V
   Silakov, D
AF Rubanov, Vladimir
   Silakov, Denis
TI Ensuring portability of Linux applications through standardization and
   knowledge base driven analysis
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Linux
AB Problems with portability of applications across various Linux distributions is one of the major sore spots of independent software vendors (ISVs) wishing to support the Linux platform in their products. The source of the problem is that different distributions have different sets of system libraries that vary in the interfaces (APIs) provided. And the critical questions arise for ISVs such as "which distributions my application would run on?" or "what can I specifically do to make my application run on a greater number of distributions?". This article refers to an industry-wide approach to mitigate the problem of Linux platform fragmentation through standardization of common interfaces-the Linux Standard Base (LSB) standard, the leading effort for the "single Linux specification". The article shows how extending this approach with a knowledge base about the composition of real world Linux distributions can enable automatic portability analysis for Linux applications even if they use interfaces outside the scope of the standard. The knowledge base powered Linux Application Checker tool is described that can help answer the above questions by automatically analyzing the target application and confronting collected data about its external dependencies with what various distributions provide. Additionally, Linux Application Checker is an official tool approved by the Linux Foundation for certifying applications for compliance with the LSB standard. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Rubanov, Vladimir; Silakov, Denis] ROSA Co, Russian Linux Verificat Ctr, Moscow, Russia.
RP Silakov, D (corresponding author), ROSA Co, Russian Linux Verificat Ctr, Moscow, Russia.
EM rubanov@rosalab.com; dsilakov@gmail.com
CR [Anonymous], FORMAL METHODS IND S
   [Anonymous], P USENIX 1997 ANN TE
   [Anonymous], TR936 W VIRG U DEP S
   [Anonymous], P LINUX S OTT CAN
   [Anonymous], LONG ROAD 2 0 ROSA B
   [Anonymous], P SYRCOSE 2008 S PET
   [Anonymous], API STANDARDS OPEN S
   [Anonymous], SOFTW MAG
   [Anonymous], P LIN S OTTA CAN
   [Anonymous], P 18 C USENIX SEC S
   [Anonymous], P 3 WORKSH FDN TECHN
   [Anonymous], ICSE 94 P 16 INT C S
   [Anonymous], P 2 INT WORKSH FDN T
   [Anonymous], STAT ANAL DYN UPD CE
   [Anonymous], P SYRCOSE 2009 MOSC
   [Anonymous], FREE OPEN SOURCE SOF
   [Anonymous], LINUX C AU C HOBART
   Ham HK, 2011, COMM COM INF SC, V257, P314
   Jadhav AS, 2009, INFORM SOFTWARE TECH, V51, P555, DOI 10.1016/j.infsof.2008.09.003
   Schmidt A- D, IEEE INT C COMMUNICA, P1
   Silakov D, 2010, LECT NOTES COMPUT SC, V6416, P357, DOI 10.1007/978-3-642-16561-0_34
NR 21
TC 2
Z9 2
U1 8
U2 44
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 1
PY 2014
VL 91
SI SI
BP 234
EP 248
DI 10.1016/j.scico.2014.01.009
PN B
PG 15
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AK4NO
UT WOS:000338401600006
OA hybrid
DA 2024-07-18
ER

PT J
AU Dang, HH
   Möller, B
AF Dang, H. -H.
   Moeller, B.
TI Concurrency and local reasoning under reverse exchange
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE True concurrency; Relational semantics; Hoare logic; Concurrent
   separation logic; Locality
AB Quite a number of aspects of concurrency are reflected by the inequational exchange law (P * Q); (R * S) <= (P ; R) * (Q ; S) between sequential composition; and concurrent composition *. In particular, recent research has shown that, under a certain semantic definition, validity of this law is equivalent to that of the familiar concurrency rule for Hoare triples. Unfortunately, while the law holds in the standard model of concurrent Kleene algebra, its is not true in the relationally based setting of algebraic separation logic. However, we show that under mild conditions the reverse inequation (P ; R) * (Q ; S) <= (P * Q) ; (R * S) still holds there. From this reverse exchange law we derive slightly restricted but still reasonably useful variants of the concurrency rule. Moreover, using a corresponding definition of locality, we obtain also a variant of the frame rule, where * now is interpreted as separating conjunction. These results allow using the relational setting also for modular and concurrency reasoning. Finally, we interpret the results further by discussing several variations of the approach. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Dang, H. -H.; Moeller, B.] Univ Augsburg, Inst Informat, D-86135 Augsburg, Germany.
C3 University of Augsburg
RP Dang, HH (corresponding author), Univ Augsburg, Inst Informat, D-86135 Augsburg, Germany.
EM h.dang@informatik.uni-augsburg.de; moeller@informatik.uni-augsburg.de
FU DFG project AlgSep - Algebraic Calculi for Separation Logic [MO 690/9-1]
FX We are grateful to Tony Hoare for fruitful discussions and comments and
   to Andreas Zelend for valuable remarks. Moreover, we thank all reviewers
   for their comments that helped to significantly improve the presentation
   of this paper. This research was partially funded by the DFG project MO
   690/9-1 AlgSep - Algebraic Calculi for Separation Logic.
CR Brookes S, 2007, THEOR COMPUT SCI, V375, P227, DOI 10.1016/j.tcs.2006.12.034
   Calcagno C, 2007, IEEE S LOG, P366, DOI 10.1109/LICS.2007.30
   Dang HH, 2011, J LOGIC ALGEBR PROGR, V80, P221, DOI 10.1016/j.jlap.2011.04.003
   Dang HH, 2011, LECT NOTES COMPUT SC, V6663, P125, DOI 10.1007/978-3-642-21070-9_11
   Dinsdale-Young T, 2010, LECT NOTES COMPUT SC, V6183, P504, DOI 10.1007/978-3-642-14107-2_24
   Han-Hing Dang, 2012, Mathematics of Program Construction. Proceedings 11th International Conference, MPC 2012, P177, DOI 10.1007/978-3-642-31113-0_10
   Hoare CAR, 2011, LECT NOTES COMPUT SC, V6901, P250, DOI 10.1007/978-3-642-23217-6_17
   Hoare C.-A.-R., 2011, ALGEBRA PROGRAM DESI
   Hoare T, 2011, J LOGIC ALGEBR PROGR, V80, P266, DOI 10.1016/j.jlap.2011.04.005
   Kozen D, 1997, ACM T PROGR LANG SYS, V19, P427, DOI 10.1145/256167.256195
   Möller B, 2007, SCI COMPUT PROGRAM, V65, P195, DOI 10.1016/j.scico.2006.01.010
   O'Hearn P., 2001, Computer Science Logic. 15th International Workshop, CSL 2001 10th Annual Conference of the EACSL. Proceedings (Lecture Notes in Computer Science Vol.2142), P1
   O'Hearn PW, 2007, THEOR COMPUT SCI, V375, P271, DOI 10.1016/j.tcs.2006.12.035
   O'Hearn PW, 2004, ACM SIGPLAN NOTICES, V39, P268, DOI [10.1145/982962.964024, 10.1145/1498926.1498929]
   Plotkin GD, 2004, J LOGIC ALGEBR PROGR, V60-1, P17, DOI 10.1016/j.jlap.2004.03.002
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Vafeiadis V, 2011, ELECTRON NOTES THEOR, V276, P335, DOI 10.1016/j.entcs.2011.09.029
NR 17
TC 4
Z9 4
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 1
PY 2014
VL 85
SI SI
BP 204
EP 223
DI 10.1016/j.scico.2013.07.006
PN B
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CC8KX
UT WOS:000350618700006
OA Green Submitted, hybrid
DA 2024-07-18
ER

PT J
AU Thomas, SW
   Adams, B
   Hassan, AE
   Blostein, D
AF Thomas, Stephen W.
   Adams, Bram
   Hassan, Ahmed E.
   Blostein, Dorothea
TI Studying software evolution using topic models
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Software evolution; Topic model; Latent Dirichlet allocation; Mining
   software repositories
ID CODE; RETRIEVAL; COHESION
AB Topic models are generative probabilistic models which have been applied to information retrieval to automatically organize and provide structure to a text corpus. Topic models discover topics in the corpus, which represent real world concepts by frequently co-occurring words. Recently, researchers found topics to be effective tools for structuring various software artifacts, such as source code, requirements documents, and bug reports. This research also hypothesized that using topics to describe the evolution of software repositories could be useful for maintenance and understanding tasks. However, research has yet to determine whether these automatically discovered topic evolutions describe the evolution of source code in a way that is relevant or meaningful to project stakeholders, and thus it is not clear whether topic models are a suitable tool for this task.
   In this paper, we take a first step towards evaluating topic models in the analysis of software evolution by performing a detailed manual analysis on the source code histories of two well-known and well-documented systems, JHotDraw and jEdit. We define and compute various metrics on the discovered topic evolutions and manually investigate how and why the metrics evolve over time. We find that the large majority (87%-89%) of topic evolutions correspond well with actual code change activities by developers. We are thus encouraged to use topic models as tools for studying the evolution of a software system. (C) 2012 Elsevier B.V. All rights reserved.
C1 [Thomas, Stephen W.; Hassan, Ahmed E.; Blostein, Dorothea] Queens Univ, Sch Comp, SAIL, Kingston, ON K7L 3N6, Canada.
   [Adams, Bram] Ecole Polytech Montreal, Dept Genie Informat & Genie Logiciel GIGL, Lab Maintenance Construct & Intelligence Software, Montreal, PQ, Canada.
C3 Queens University - Canada; Universite de Montreal; Polytechnique
   Montreal
RP Thomas, SW (corresponding author), Queens Univ, Sch Comp, SAIL, 156 Barrie St, Kingston, ON K7L 3N6, Canada.
EM sthomas@es.queensu.ca; bram.adams@polymtl.ca; ahmed@cs.queensu.ca;
   blostein@cs.queensu.ca
RI KHALIFA, AHMED khalifa/HKF-2246-2023; Ali, Ahmed/HOF-4672-2023; Hassan,
   Ahmed/AAB-7241-2019
OI KHALIFA, AHMED khalifa/0000-0002-2918-7572; Adams,
   Bram/0000-0001-7213-4006
CR [Anonymous], 2006, Elements of Information Theory
   [Anonymous], 2010, IEEE INT C SOFTWARE
   [Anonymous], 2007, LATENT SEMANTIC ANAL
   [Anonymous], 2009, TEXT MINING CLASSIFI, DOI [DOI 10.1145/1141844.1143859, DOI 10.1201/9781420059458.CH4]
   [Anonymous], 2010, ASE 10 P IEEE ACM IN, DOI DOI 10.1145/1858996.1859024
   Asuncion HU, 2010, P 32 ACM IEEE INT C, V1, P95, DOI [10.1145/1806799.1806817, DOI 10.1145/1806799.1806817]
   Baldi PF, 2008, ACM SIGPLAN NOTICES, V43, P543, DOI 10.1145/1449955.1449807
   Binkley D, 2006, IEEE T SOFTWARE ENG, V32, P698, DOI 10.1109/TSE.2006.95
   Blei D.M., 2006, INT C MACHINE LEARNI, DOI [DOI 10.1145/1143844.1143859, 10.1145/1143844.1143859]
   Blei DM, 2003, J MACH LEARN RES, V3, P993, DOI 10.1162/jmlr.2003.3.4-5.993
   D'Ambros M, 2012, EMPIR SOFTW ENG, V17, P531, DOI 10.1007/s10664-011-9173-9
   DEERWESTER S, 1990, J AM SOC INFORM SCI, V41, P391, DOI 10.1002/(SICI)1097-4571(199009)41:6<391::AID-ASI1>3.0.CO;2-9
   Fritz T., 2010, Proceedings of the 32nd International Conference on Software Engineering - Volume 1, ICSE '10, V1, P175
   Gethers M, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P1034, DOI 10.1145/1985793.1985988
   Griffiths TL, 2004, P NATL ACAD SCI USA, V101, P5228, DOI 10.1073/pnas.0307752101
   Haiduc S, 2008, INT C PROGRAM COMPRE, P113, DOI 10.1109/ICPC.2008.29
   Hall D. D., 2008, P C EMP METH NAT LAN, DOI DOI 10.3115/1613715.1613763
   Hindle A, 2009, PROC IEEE INT CONF S, P339, DOI 10.1109/ICSM.2009.5306310
   Ihaka R., 1996, J COMPUTATIONAL GRAP, V5, P299, DOI [DOI 10.1080/10618600.1996.10474713, 10.2307/1390807, DOI 10.2307/1390807]
   Kagdi H., 2010, Proceedings 17th Working Conference on Reverse Engineering (WCRE 2010), P119, DOI 10.1109/WCRE.2010.21
   Kamei Y., 2010, Proceedings of the 26th International Conference on Software Maintenance, P1, DOI 10.1109/ICSM.2010.5609530
   Kellens A, 2007, LECT NOTES COMPUT SC, V4640, P143
   Kuhn A, 2007, INFORM SOFTWARE TECH, V49, P230, DOI 10.1016/j.infsof.2006.10.017
   Lanza M., 2001, Proceedings of the 4th International Workshop on Principles of Software Evolution, P37
   Lawrie Dawn, 2010, Proceedings 17th Working Conference on Reverse Engineering (WCRE 2010), P3, DOI 10.1109/WCRE.2010.10
   Linstead E, 2008, SEVENTH INTERNATIONAL CONFERENCE ON MACHINE LEARNING AND APPLICATIONS, PROCEEDINGS, P813, DOI 10.1109/ICMLA.2008.47
   Liu YX, 2009, PROC IEEE INT CONF S, P233, DOI 10.1109/ICSM.2009.5306318
   Longo F, 2008, LECT NOTES COMPUT SC, V5338, P344
   Lukins SK, 2008, WORK CONF REVERSE EN, P155, DOI 10.1109/WCRE.2008.33
   Madani N, 2010, EUR CON SFTWR MTNCE, P68, DOI 10.1109/CSMR.2010.31
   Maletic JI, 2001, PROC INT CONF SOFTW, P103, DOI 10.1109/ICSE.2001.919085
   Marcus A, 2004, 11TH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P214, DOI 10.1109/WCRE.2004.10
   Marcus A, 2003, PROC INT CONF SOFTW, P125, DOI 10.1109/ICSE.2003.1201194
   Maskeri Girish, 2008, 1st India Software Engineering Conference. ISEC 2008, P113
   McCallum A.K., 2002, MALLET MACHINE LEARN
   Mei Qiaozhu., 2005, KDD 05, P198, DOI DOI 10.1145/1081870.1081895
   Nagappan Nachiappan, 2010, Proceedings of the 2010 IEEE 21st International Symposium on Software Reliability Engineering (ISSRE 2010), P309, DOI 10.1109/ISSRE.2010.25
   Oliveto Rocco, 2010, Proceedings of the 18th IEEE International Conference on Program Comprehension (ICPC 2010), P68, DOI 10.1109/ICPC.2010.20
   Oliveto R, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P820, DOI 10.1145/1985793.1985913
   Perry D. E., 1992, SIGSOFT Software Engineering Notes, V17, P40, DOI 10.1145/141874.141884
   Porteous I., 2008, P 14 ACM SIGKDD INT, P569, DOI DOI 10.1145/1401890.1401960
   Poshyvanyk D, 2007, INT C PROGRAM COMPRE, P37
   Poshyvanyk D, 2009, PROC IEEE INT CONF S, P453, DOI 10.1109/ICSM.2009.5306298
   Robillard M.P., ACM T SOFTWARE ENG M, V16
   Savage T, 2010, Proceedings of the 2010 IEEE International Conference on Software Maintenance, ICSM '10, P1, DOI [10.1109/ICSM.2010.5609654, DOI 10.1109/ICSM.2010.5609654]
   Scheaffer R.L., 1994, Probability and Statistics for Engineers, V4th
   SHANNON CE, 1948, BELL SYST TECH J, V27, P623, DOI 10.1002/j.1538-7305.1948.tb00917.x
   Thomas SW, 2010, IEEE INT WORK C SO, P55, DOI 10.1109/SCAM.2010.13
   Thomas SW, 2011, 8 WORK C MIN SOFTW R, P173
   Tian K, 2009, 2009 6TH IEEE INTERNATIONAL WORKING CONFERENCE ON MINING SOFTWARE REPOSITORIES, P163, DOI 10.1109/MSR.2009.5069496
   Ujházi B, 2010, IEEE INT WORK C SO, P33, DOI 10.1109/SCAM.2010.14
   Wallach H.M., 2009, P 26 ANN INT C MACH, P1105, DOI DOI 10.1145/1553374.1553515
   Wang Xuerui., P 12 ACM SIGKDD INT, P424
   Zhai C, 2008, SYNTHESIS LECT HUMAN, V1, P1, DOI [DOI 10.2200/S00158ED1V01Y200811HLT001, 10.2200/S00158ED1V01Y200811HLT001]
NR 54
TC 55
Z9 63
U1 0
U2 26
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 1
PY 2014
VL 80
BP 457
EP 479
DI 10.1016/j.scico.2012.08.003
PN B
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 292FH
UT WOS:000329887100011
OA hybrid
DA 2024-07-18
ER

PT J
AU Reniers, D
   Voinea, L
   Ersoy, O
   Telea, A
AF Reniers, Dennie
   Voinea, Lucian
   Ersoy, Ozan
   Telea, Alexandru
TI The Solid* toolset for software visual analytics of program structure
   and metrics comprehension: From research prototype to product
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Software visualization; Static analysis; Visual tool design
ID VISUALIZATION; SYSTEM; CODE
AB Software visual analytics (SVA) tools combine static program analysis and fact extraction with information visualization to support program comprehension. However, building efficient and effective SVA tools is highly challenging, as it involves extensive software development in program analysis, graphics, information visualization, and interaction. We present a SVA toolset for software maintenance, and detail two of its components which target software structure, metrics and code duplication. We illustrate the toolset's usage for constructing software visualizations with examples in education, research, and industrial contexts. We discuss the design evolution from research prototypes to integrated, scalable, and easy-to-use products, and present several guidelines for the development of efficient and effective SVA solutions. (C) 2012 Elsevier B.V. All rights reserved.
C1 [Reniers, Dennie; Voinea, Lucian] SolidSource BV, Eindhoven, Netherlands.
   [Ersoy, Ozan; Telea, Alexandru] Univ Groningen, Inst Johann Bernoulli, NL-9700 AB Groningen, Netherlands.
C3 University of Groningen
RP Telea, A (corresponding author), Univ Groningen, Inst Johann Bernoulli, NL-9700 AB Groningen, Netherlands.
EM dennie.reniers@solidsource.nl; lucian.voinea@solidsource.nl;
   o.ersoy@rug.nl; a.c.telea@rug.nl
CR AbsInt Inc, 2010, AISEE GRAPH LAYOUT S
   [Anonymous], 2010, ECL CDT FRAM C C
   [Anonymous], 2007, Software Visualization: Visualizing the Structure, Behavior, and Evolution of Software
   Bell Labs, 2007, CSCOPE
   Bessey A, 2010, COMMUN ACM, V53, P66, DOI 10.1145/1646353.1646374
   Boerboom F., 2006, THESIS EINDHOVEN U T
   Charters S., 2003, P 2 IEEE INT WORKSH, P27
   Cook K. A., 2005, Illuminating the path: The research and development agenda for visual analytics
   Corbi T, 1999, IBM SYST J, V28, P294
   de Jong H, 2003, LECT NOTES COMPUT SC, V2852, P220
   EICK SG, 1992, IEEE T SOFTWARE ENG, V18, P957, DOI 10.1109/32.177365
   Ettema M., 2010, DEPENDENCY EVOLUATIO
   Fenton N. E., 1998, Software metrics: a rigorous and practical approach
   Ferenc R, 2002, PROC IEEE INT CONF S, P172, DOI 10.1109/ICSM.2002.1167764
   Gccxml Team, 2011, GCCXML C PARS
   Holt RC, 2000, SEVENTH WORKING CONFERENCE ON REVERSE ENGINEERING - PROCEEDINGS, P162, DOI 10.1109/WCRE.2000.891463
   Holten D, 2006, IEEE T VIS COMPUT GR, V12, P741, DOI 10.1109/TVCG.2006.147
   Hoogendorp H., 2009, P ACM VISSOFT, P137
   Jiang Z., 2006, P APSEC, P130
   Juergens E., 2010, P ICSE, P98
   Kamiya T, 2002, IEEE T SOFTWARE ENG, V28, P654, DOI 10.1109/TSE.2002.1019480
   Kamiya T., 2010, CCFINDER CLONE DETEC
   Kaplan I., 2008, LLNLTR400310
   Kazman R, 1998, FIFTH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P154, DOI 10.1109/WCRE.1998.723185
   KIENLE H, 2006, THESIS U VICTORIA CA
   Kienle H., 2007, P IEEE VISS, P92
   Kienle HM, 2010, SCI COMPUT PROGRAM, V75, P247, DOI 10.1016/j.scico.2009.10.007
   KOffice Team, 2010, KOFFICE SOFTW REP
   Korshunova E., 2006, P WCRE, P297
   Koschke R, 2003, J SOFTW MAINT EVOL-R, V15, P87, DOI 10.1002/smr.270
   Kwakman L., 2010, THESIS U GRONINGEN N
   Lanza M, 2004, 19TH INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING, PROCEEDINGS, P394, DOI 10.1109/ASE.2004.1342773
   Lanza Michele, 2006, Objectoriented metrics in practice: using software metrics to characterize, evaluate, and improve the design of object-oriented systems
   Lienhard A, 2007, 4TH IEEE INTERNATIONAL WORKSHOP ON VISUALIZING SOFTWARE FOR UNDERSTANDING AND ANALYSIS, PROCEEDINGS, P67, DOI 10.1109/VISSOF.2007.4290702
   Lin Y, 2003, 10TH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P196
   Littlefair T., 2007, C C CODE COUNTER
   LLVM Team, 2010, CLANG C C AN HOM PAG
   Lommerse G., 2005, IEEE Symposium on Information Visualization, P24
   Lua Team, 2011, LUA PROGR LANG
   Ludwig A., 2010, RECORDER JAVA ANAL
   Marcus Andrian, 2003, ACM S SOFTWARE VISUA, P27
   McPeak S., 2010, ELSA C STATIC ANAL
   Mens T., 2008, Software Evolution
   Moreta S., 2007, EUROVIS, P11
   Nierstrasz O., 2005, ACM SIGSOFT SOFTWARE, V30, P1, DOI [DOI 10.1145/1095430, 10.1145/1095430.1081707, DOI 10.1145/1095430.1081707]
   NSIS Team, 2012, NSIS INST
   POPPENDIECK M, 2006, LEAN SOFTWARE DEV AG
   Prefuse, 2010, PREF INF VIS TOOLK
   Quinlan D, 2000, P C PAR COMP CPC, P81
   Rao Ramana., 1994, C COMPANION HUMAN FA, P222
   Redgate Inc, 2010, REFL NET API
   Reiss SP, 2005, 3rd IEEE International Workshop on Visualizing Software for Understanding and Analysis, Proceeedings, P59
   Sander G., 1994, International Symposium on Graph Drawing, P194
   SciTools Inc, 2010, UND C C
   Sensalire M., 2010, SVCGRUG102010 U GRON
   Sensalire M., 2009, P IEEE VISS, P156
   Sensalire M, 2008, SOFTVIS 2008: PROCEEDINGS OF THE 4TH ACM SYMPOSIUM ON SOFTWARE VISUALIZATION, P87
   Shneiderman B., 2010, TREEMAPS SPACE CONST
   SolidSource BV, 2010, SOLIDSX SOLIDSDD SOL
   SQLite Team, 2011, SQLITE DAT
   STANDISH TA, 1984, IEEE T SOFTWARE ENG, V10, P494, DOI 10.1109/TSE.1984.5010272
   SVCG, 2010, SOFTW VIS AN
   Team S., 2010, SHARPSVN C LIB
   Telea A., 2004, Journal of Graphics Tools, V9, P23, DOI 10.1080/10867651.2004.10487596
   Telea A, 2010, COMPUT GRAPH FORUM, V29, P843, DOI 10.1111/j.1467-8659.2009.01680.x
   Telea A., 2010, P EUROVAST EUR, P65
   Telea A., 2006, P EUROVIS, P51
   Telea A., 2002, P DAT VIS IEEE VISSY P DAT VIS IEEE VISSY, P67
   Telea A., 2010, IMAGE INPAINTING TOO
   Telea A., 2008, P IEEE CSMR, P153
   Telea A., 2010, SOFTWARE QUALITY ASS
   Telea A, 2011, COMPUTATION STAT, V26, P635, DOI 10.1007/s00180-011-0248-2
   Telea A, 2009, IEEE INT WORK VIS SO, P65, DOI 10.1109/VISSOF.2009.5336417
   Telea A, 2008, SOFTVIS 2008: PROCEEDINGS OF THE 4TH ACM SYMPOSIUM ON SOFTWARE VISUALIZATION, P67
   Telea AC, 2010, IEEE SOFTWARE, V27, P46, DOI 10.1109/MS.2010.115
   Termeer M, 2005, 3RD IEEE INTERNATIONAL WORKSHOP ON VISUALIZING SOFTWARE FOR UNDERSTANDING AND ANALYSIS, PROCEEEDINGS, P21
   Teyseyre AR, 2009, IEEE T VIS COMPUT GR, V15, P87, DOI 10.1109/TVCG.2008.86
   Tichelaar S, 2000, SEVENTH WORKING CONFERENCE ON REVERSE ENGINEERING - PROCEEDINGS, P296, DOI 10.1109/WCRE.2000.891485
   TILLEY SR, 1994, INT J SOFTW ENG KNOW, V4, P501, DOI 10.1142/S0218194094000246
   van den Brand M, 2009, EUR CON SFTWR MTNCE, P331, DOI 10.1109/CSMR.2009.19
   Van den Brand MGJ, 2002, ACM T PROGR LANG SYS, V24, P334, DOI 10.1145/567097.567099
   van Wijk J.J., 2010, MASTERING INFORM AGE, P131
   Vicknair C., 2010, 48 ANN SE REG C NOV, P68
   Voinea L., 2005, Proceedings of the ACM Symposium on Software Visualization, P47, DOI [10.1145/1056018.1056025, DOI 10.1145/1056018.1056025]
   Voinea L, 2009, EMPIR SOFTW ENG, V14, P316, DOI 10.1007/s10664-008-9068-6
   VSG Inc, 2011, OPENINVENTOR TOOLK
   Wettel R, 2008, WORK CONF REVERSE EN, P219, DOI 10.1109/WCRE.2008.55
   Wettel R, 2007, INT C PROGRAM COMPRE, P231
   Wong PC, 2004, IEEE COMPUT GRAPH, V24, P20
   Zhang Kang., 2003, SOFTWARE VISUALIZATI
   [No title captured]
NR 91
TC 25
Z9 29
U1 1
U2 13
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 1
PY 2014
VL 79
SI SI
BP 224
EP 240
DI 10.1016/j.scico.2012.05.002
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 246RH
UT WOS:000326556300016
OA hybrid
DA 2024-07-18
ER

PT J
AU Ying, MS
   Yu, NK
   Feng, Y
   Duan, RY
AF Ying, Mingsheng
   Yu, Nengkun
   Feng, Yuan
   Duan, Runyao
TI t Verification of quantum programs
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Quantum programming; Verification; Sharir-Pnueli-Hart method
ID LOGIC
AB This paper develops verification methodology for quantum programs, and the contribution of the paper is two-fold.
   Sharir, Pnueli and Hart [M. Sharir, A. Pnueli, S. Hart, Verification of probabilistic programs, SIAM Journal of Computing 13 (1984) 292-314] presented a general method for proving properties of probabilistic programs, in which a probabilistic program is modeled by a Markov chain and an assertion on the output distribution is extended to an invariant assertion on all intermediate distributions. Their method is essentially a probabilistic generalization of the classical Floyd inductive assertion method. In this paper, we consider quantum programs modeled by quantum Markov chains which are defined by super-operators. It is shown that the Sharir-Pnueli-Hart method can be elegantly generalized to quantum programs by exploiting the Schrodinger-Heisenberg duality between quantum states and observables. In particular, a completeness theorem for the Sharir-Pnueli-Hart verification method of quantum programs is established.
   As indicated by the completeness theorem, the Sharir-Pnueli-Hart method is in principle effective for verifying all properties of quantum programs that can be expressed in terms of Hermitian operators (observables). But it is not feasible for many practical applications because of the complicated calculation involved in the verification. For the case of finite-dimensional state spaces, we find a method for verification of quantum programs much simpler than the Sharir-Pnueli-Hart method by employing the matrix representation of super-operators and Jordan decomposition of matrices. In particular, this method enables us to compute easily the average running time and to analyze some interesting long-run behaviors of quantum programs in a finite-dimensional state space. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Ying, Mingsheng] Univ Technol Sydney, Ctr Quantum Computat & Intelligent Syst QCIS, Fac Engn & Informat Technol, Sydney, NSW 2007, Australia.
   Tsinghua Univ, Dept Comp Sci & Technol, Tsinghua Natl Lab Informat Sci & Technol, Beijing 100084, Peoples R China.
   Chinese Acad Sci, AMSS UTS Joint Res Lab Quantum Computat, Beijing, Peoples R China.
C3 University of Technology Sydney; Tsinghua University; Chinese Academy of
   Sciences
RP Ying, MS (corresponding author), Univ Technol Sydney, Ctr Quantum Computat & Intelligent Syst QCIS, Fac Engn & Informat Technol, Sydney, NSW 2007, Australia.
EM mying@it.uts.edu.au; NengkunYu@gmail.com
RI Ying, Mingsheng/A-8379-2008; Feng, Yuan/AGN-2907-2022; yu,
   nengkun/HTP-0286-2023
OI Ying, Mingsheng/0000-0003-4847-702X; Feng, Yuan/0000-0002-3097-3896; Yu,
   Nengkun/0000-0003-1188-3032
FU Australian Research Council [DP110103473, FT100100218]; Overseas Team
   Program of Academy of Mathematics and Systems Science, Chinese Academy
   of Sciences; Australian Research Council [FT100100218] Funding Source:
   Australian Research Council
FX The authors are very grateful to the referees for their detailed
   comments which help a lot to improve the presentation of this paper.
   This work was partly supported by the Australian Research Council (Grant
   Nos DP110103473 and FT100100218) and the Overseas Team Program of
   Academy of Mathematics and Systems Science, Chinese Academy of Sciences.
CR Altenkirch T, 2005, IEEE S LOG, P249
   Alur R, 2005, ACM T PROGR LANG SYS, V27, P786, DOI 10.1145/1075382.1075387
   Baltag A, 2006, MATH STRUCT COMP SCI, V16, P491, DOI 10.1017/S0960129506005299
   Baltazar P, 2008, INT J QUANTUM INF, V6, P219, DOI 10.1142/S0219749908003530
   Bettelli S, 2003, EUR PHYS J D, V25, P181, DOI 10.1140/epjd/e2003-00242-2
   Brázdil T, 2005, ANN IEEE SYMP FOUND, P521, DOI 10.1109/SFCS.2005.19
   Brunet O, 2004, INT J QUANTUM INF, V2, P45, DOI 10.1142/S0219749904000067
   Chadha R, 2006, ELECTRON NOTES THEOR, V158, P19, DOI 10.1016/j.entcs.2006.04.003
   Chuang I., 2000, Quantum Information and Quantum Computation
   COURCOUBETIS C, 1995, J ASSOC COMPUT MACH, V42, P857, DOI 10.1145/210332.210339
   D'Hondt E, 2006, MATH STRUCT COMP SCI, V16, P429, DOI 10.1017/S0960129506005251
   de Alfaro L, 1998, THIRTEENTH ANNUAL IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, PROCEEDINGS, P454
   Dowling JP, 2003, PHILOS T R SOC A, V361, P1655, DOI 10.1098/rsta.2003.1227
   Etessami K, 2009, J ACM, V56, DOI 10.1145/1462153.1462154
   Feng Y., ARXIV12052187
   Feng Y, 2007, THEOR COMPUT SCI, V386, P151, DOI 10.1016/j.tcs.2007.06.011
   Gay SJ, 2006, MATH STRUCT COMP SCI, V16, P581, DOI 10.1017/S0960129506005378
   Gudder S, 2008, J MATH PHYS, V49, DOI 10.1063/1.2953952
   Horn R. A., 2012, MATRIX ANAL
   Kashefi E., 2003, ARXIVQUANTPH0306077
   Omer B, 2003, THESIS
   Sanders JW, 2000, LECT NOTES COMPUT SC, V1837, P80
   Selinger P, 2004, MATH STRUCT COMP SCI, V14, P527, DOI 10.1017/S0960129504004256
   Selinger P, 2004, LECT NOTES COMPUT SC, V2998, P1
   SHARIR M, 1984, SIAM J COMPUT, V13, P292, DOI 10.1137/0213021
   Vishwanath A., 2001, P 33 ANN ACM S THEOR, P37, DOI [10.1145/380752.380757., DOI 10.1145/380752.380757]
   Xu FH, 2010, NEW J PHYS, V12, DOI 10.1088/1367-2630/12/11/113026
   Ying M., 2010, Semant. Tech. Quantum Comput, V8, P311
   Ying M.S., ARXIV12094379
   Ying MS, 2007, INFORM PROCESS LETT, V104, P152, DOI 10.1016/j.ipl.2007.06.003
   Ying MS, 2014, ACM T COMPUT LOG, V15, DOI 10.1145/2629680
   Ying MS, 2012, CHINESE SCI BULL, V57, P1903, DOI 10.1007/s11434-012-5147-6
   Ying MS, 2011, ACM T PROGR LANG SYS, V33, DOI 10.1145/2049706.2049708
   Ying MS, 2011, IEEE T SOFTWARE ENG, V37, P466, DOI 10.1109/TSE.2010.94
   Ying MS, 2010, ACTA INFORM, V47, P221, DOI 10.1007/s00236-010-0117-4
   Yu NK, 2012, LECT NOTES COMPUT SC, V7454, P69, DOI 10.1007/978-3-642-32940-1_7
   Zuliani P, 2001, THESIS
NR 37
TC 28
Z9 37
U1 3
U2 37
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 1
PY 2013
VL 78
IS 9
BP 1679
EP 1700
DI 10.1016/j.scico.2013.03.016
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 179QJ
UT WOS:000321536100024
OA Green Submitted, hybrid
DA 2024-07-18
ER

PT J
AU Dam, HK
   Winikoff, M
AF Hoa Khanh Dam
   Winikoff, Michael
TI Towards a next-generation AOSE methodology
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Agent-oriented software engineering; Methodology standardisation
ID MULTIAGENT SYSTEMS; AGENT
AB Numerous methodologies for developing agent-based systems have been proposed in the literature. This proliferation creates a challenge to practitioners who need to select a methodology to adopt. This situation is analogous to that of object-oriented methodologies and notations pre-UML, and we argue that the time is ripe to begin the development of a next generation agent-oriented software engineering (AOSE) methodology, leading ultimately towards a unified AOSE methodology. This paper proposes process and models for a next generation AOSE methodology. Our proposal is based on a comparative analysis of seven prominent AOSE methodologies, which identified strengths, weaknesses, commonalities and differences. (C) 2011 Elsevier B.V. All rights reserved.
C1 [Hoa Khanh Dam] Univ Wollongong, Wollongong, NSW 2522, Australia.
   [Winikoff, Michael] Univ Otago, Dunedin, New Zealand.
C3 University of Wollongong; University of Otago
RP Dam, HK (corresponding author), Univ Wollongong, Wollongong, NSW 2522, Australia.
EM hoa@uow.edu.au; michael.winikoff@otago.ac.nz
RI Dam, Hoa Khanh/C-6058-2014
OI Dam, Hoa Khanh/0000-0003-4246-0526
CR [Anonymous], 2009, HDB RES MULTIAGENT S
   Arcos JL, 2005, ENG APPL ARTIF INTEL, V18, P191, DOI 10.1016/j.engappai.2004.11.019
   Bajec M, 2007, INFORM SOFTWARE TECH, V49, P345, DOI 10.1016/j.infsof.2006.05.007
   Bergenti F, 2004, MU S ART SOC SIM ORG, P19
   Bernon C, 2005, KNOWL ENG REV, V20, P99, DOI 10.1017/S0269888905000421
   Bresciani P, 2004, AUTON AGENT MULTI-AG, V8, P203, DOI 10.1023/B:AGNT.0000018806.20944.ef
   Cernuzzi Luca, 2009, Proceedings of the 11th International Conference on Enterprise Information Systems. ICEIS, P82
   CERNUZZI L, 2002, P AG OR METH WORKSH
   Cervenka R., 2007, AML AGENT MODELING L
   Cossentino M., 2009, RTICARPA0902
   Cossentino M., 2005, AGENT ORIENTED METHO, P79
   Dam HK, 2011, AUTON AGENT MULTI-AG, V23, P384, DOI 10.1007/s10458-010-9163-0
   Dam KH, 2003, LECT NOTES COMPUT SC, V3030, P78
   DeLoach Scott A., 2010, International Journal of Agent-Oriented Software Engineering, V4, P244, DOI 10.1504/IJAOSE.2010.036984
   Deloach SA, 2001, INT J SOFTW ENG KNOW, V11, P231, DOI 10.1142/S0218194001000542
   Dignum V, 2003, LECT NOTES ARTIF INT, V2691, P168
   Dignum Virginia, 2010, International Journal of Agent-Oriented Software Engineering, V4, P224, DOI 10.1504/IJAOSE.2010.036983
   DIGNUM V, 2004, THESIS UTRECHT U
   Fitzgerald B, 2003, COMMUN ACM, V46, P64, DOI 10.1145/641205.641206
   GOMEZSANZ JJ, 2008, 9 INT WORKSH AG OR S, P133
   Henderson-Sellers B, 2010, FRONT ARTIF INTEL AP, V217, P293, DOI 10.3233/978-1-60750-629-4-293
   Henderson-Sellers B, 2010, J UNIVERS COMPUT SCI, V16, P424
   Henderson-Sellers Brian., 2005, AGENT ORIENTED METHO
   Horling B, 2004, KNOWL ENG REV, V19, P281, DOI 10.1017/S0269888905000317
   Hubner Jomi F., 2007, International Journal of Agent-Oriented Software Engineering, V1, P370, DOI 10.1504/IJAOSE.2007.016266
   Khallouf Jason, 2009, International Journal of Agent-Oriented Software Engineering, V3, P88, DOI 10.1504/IJAOSE.2009.022947
   Kitchenham B., 1996, TR9609 U KEEL
   Law D., 1988, METHODS COMP METHODS
   Liu L, 2004, INFORM SYST, V29, P187, DOI 10.1016/S0306-4379(03)00052-8
   Luck M., 2003, AGENT TECHNOLOGY ENA
   Molesini Ambra, 2010, International Journal of Agent-Oriented Software Engineering, V4, P1, DOI 10.1504/IJAOSE.2010.029808
   Munroe S, 2006, KNOWL ENG REV, V21, P345, DOI 10.1017/S0269888906001020
   NGUYEN CD, 2008, 9 INT WORKSH AG OR S, P165
   Padgham L, 2005, ENG APPL ARTIF INTEL, V18, P173, DOI 10.1016/j.engappai.2004.11.018
   Padgham L., 2004, WILEY SERIES AGENT T
   Padgham L., 2008, P 9 INT WORKSH AG OR, P61
   Pavón J, 2003, LECT NOTES ARTIF INT, V2691, P394
   Pavon J., 2005, Agent-oriented Methodologies, P236
   Pechoucek M, 2008, AUTON AGENT MULTI-AG, V17, P397, DOI 10.1007/s10458-008-9050-0
   Picard G., ADELFE METHODOLOGY D, P157
   Rumbaugh J, 1996, J OBJECT-ORIENT PROG, V9, P11
   Schmidt DC, 2006, COMPUTER, V39, P25, DOI 10.1109/MC.2006.58
   Shehory O., 2001, Proceedings of the Fifth International Conference on Autonomous Agents, P624, DOI 10.1145/375735.376473
   Sterling LS, 2009, ART OF AGENT-ORIENTED MODELING, P1, DOI 10.1080/17482960903207997
   Tran Q.N., 2005, AGENT ORIENTEDMETHOD, P341
   Weyns D, 2007, AUTON AGENT MULTI-AG, V14, P5, DOI 10.1007/s10458-006-0012-0
   Wooldridge M, 2000, AUTON AGENT MULTI-AG, V3, P285, DOI 10.1023/A:1010071910869
   Yu E., 1995, MODELING STRATEGIC R
   Zambonelli F, 2003, ACM T SOFTW ENG METH, V12, P317, DOI 10.1145/958961.958963
   Zhang Z, 2007, ENASE 2007: PROCEEDINGS OF THE SECOND INTERNATIONAL CONFERENCE ON EVALUATION OF NOVEL APPROACHES TO SOFTWARE ENGINEERING, P10
NR 50
TC 19
Z9 22
U1 0
U2 10
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 1
PY 2013
VL 78
IS 6
BP 684
EP 694
DI 10.1016/j.scico.2011.12.005
PG 11
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 133JJ
UT WOS:000318134400006
OA Bronze
DA 2024-07-18
ER

PT J
AU Tong, LL
   Lau, FCM
AF Tong, Liangliang
   Lau, Francis C. M.
TI Skew-space garbage collection
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Skew space; Mark compact; Semi space; Garbage collection; Space
   efficiency
ID VIRTUAL MACHINE; PERFORMANCE; JAVA
AB Semispace garbage collectors relocate all the live objects in one step, which is simple and leads to good performance. Compared with mark-compact collectors, however, they need to reserve extra heap space for copying live objects. As much as half of the heap could be reserved as it is possible that all the allocated objects survive. In reality, however, most programs exhibit a high infant mortality, and therefore reserving half the heap is wasteful.
   We have observed that the memory usage of many ordinary programs is relatively stable over the course of their execution. This provides an opportunity for online predictions to dynamically adjust and optimize the reserved space. Consequently, we propose a skew-space garbage collector that reserves space dynamically. This collector is implemented using the MMTk framework of the likes RVM and gives encouraging results against related garbage collection algorithms for the DaCapo and SPECjvm98 benchmarks. (C) 2011 Elsevier B.V. All rights reserved.
C1 [Tong, Liangliang; Lau, Francis C. M.] Univ Hong Kong, Dept Comp Sci, Hong Kong, Hong Kong, Peoples R China.
C3 University of Hong Kong
RP Tong, LL (corresponding author), Univ Hong Kong, Dept Comp Sci, Pokfulam Rd, Hong Kong, Hong Kong, Peoples R China.
EM lltong@cs.hku.hk; fcmlau@cs.hku.hk
RI Lau, Francis/AAN-8816-2020
FU Hong Kong RGC GRF grant [7141/06E]
FX This work is supported in part by a Hong Kong RGC GRF grant (7141/06E).
CR Albert E, 2009, ISMM'09: PROCEEDINGS OF THE 2009 ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON MEMORY MANAGEMENT, P129
   Alpern B, 2005, IBM SYST J, V44, P399, DOI 10.1147/sj.442.0399
   Alpern B, 2000, IBM SYST J, V39, P211, DOI 10.1147/sj.391.0211
   APPEL AW, 1989, SOFTWARE PRACT EXPER, V19, P171, DOI 10.1002/spe.4380190206
   Arnold M, 2000, ACM SIGPLAN NOTICES, V35, P47, DOI 10.1145/354222.353175
   Bacon D.F., 2004, INT C EMB SOFTW, P125
   Bacon DF, 2004, ACM SIGPLAN NOTICES, V39, P50, DOI 10.1145/1035292.1028982
   BARRETT DA, 1995, SIGPLAN NOTICES, V30, P301, DOI 10.1145/223428.207164
   Blackburn SM, 2004, PROC INT CONF SOFTW, P137, DOI 10.1109/ICSE.2004.1317436
   Blackburn SM, 2008, ACM SIGPLAN NOTICES, V43, P22, DOI 10.1145/1379022.1375586
   Blackburn SM, 2006, ACM SIGPLAN NOTICES, V41, P169, DOI 10.1145/1167515.1167488
   Braberman V, 2008, ISMM'08: PROCEEDINGS OF THE 2008 INTERNATIONAL SYMPOSIUM ON MEMORY MANAGEMENT, P141
   CHENEY CJ, 1970, COMMUN ACM, V13, P677, DOI 10.1145/362790.362798
   HADDON BK, 1967, COMPUT J, V10, P162, DOI 10.1093/comjnl/10.2.162
   Jones R., 1997, Garbage Collection: Algorithms for Automatic Dynamic Memory Management
   Jonkers H. B. M., 1979, INFORMATION PROCESSI, V9, P25
   LANG B, 1987, SIGPLAN NOTICES, V22, P253, DOI 10.1145/960114.29677
   LIEBERMAN H, 1983, COMMUN ACM, V26, P419, DOI 10.1145/358141.358147
   MAGACHEY P, 2006, INT S MEM MAN, P17
   MCCARTHY J, 1960, COMMUN ACM, V3, P184, DOI 10.1145/367177.367199
   Sachindran N, 2003, ACM SIGPLAN NOTICES, V38, P326, DOI 10.1145/949343.949335
   SANSOM PM, 1991, P GLASG WORKSH FUNCT
   Tong LL, 2010, LECT NOTES COMPUT SC, V6461, P271, DOI 10.1007/978-3-642-17164-2_19
   Ungar D., 1984, SIGPLAN Notices, V19, P157, DOI 10.1145/390011.808261
   UNGAR D, 1988, SIGPLAN NOTICES, V23, P1, DOI 10.1145/62084.62085
   Velasco J. M., 2004, ECOOP 2004 - Object-Oriented Programming. 18th European Conference. Proceedings (Lecture Notes in Computer Science Vol.3086), P542
   Wilson P. R., 1992, P INT WORKSH MEM MAN, V637, P1
   Yu Z.C.H., 2008, ACM T ARCHIT CODE OP, V4, P232
   ZORN B, 1990, ACM C LISP FUNCT PRO, P87
NR 29
TC 2
Z9 2
U1 1
U2 7
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAY 1
PY 2013
VL 78
IS 5
BP 445
EP 457
DI 10.1016/j.scico.2011.06.003
PG 13
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 125MS
UT WOS:000317544500003
OA Bronze
DA 2024-07-18
ER

PT J
AU Miyazawa, A
   Cavalcanti, A
AF Miyazawa, Alvaro
   Cavalcanti, Ana
TI Refinement-oriented models of Stateflow charts
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Simulink; Circus; Formal semantics; Verification; Tools
ID DIAGRAMS; SYSTEMS; CIRCUS
AB Simulink block diagrams are widely used in industry for specifying control systems, and of particular interest and complexity are Stateflow blocks, which are themselves defined by separate charts. To make formal reasoning about diagrams and charts possible, we need to formalise their semantics; for the formal verification of their implementations, a refinement-based semantics is appropriate. An extensive subset of Simulink has been formalised in a language for refinement, namely, Circus, and here, we propose an approach to cover Stateflow charts. Our models are distinctive in their operational nature, which closely reflects the informal description of the Stateflow (simulation) semantics. We describe, formalise, and automate a strategy to generate our Circus models. The result is a solid foundation for reasoning based on refinement. (c) 2011 Elsevier B.V. All rights reserved.
C1 [Miyazawa, Alvaro; Cavalcanti, Ana] Univ York, Dept Comp Sci, York YO10 5GH, N Yorkshire, England.
C3 University of York - UK
RP Miyazawa, A (corresponding author), Univ York, Dept Comp Sci, York YO10 5GH, N Yorkshire, England.
EM alvarohm@cs.york.ac.uk; Ana.Cavalcanti@cs.york.ac.uk
RI Miyazawa, Alvaro/M-7118-2019
OI Miyazawa, Alvaro/0000-0003-2233-9091; Cavalcanti, Ana Lucia
   Caneca/0000-0002-0831-1976
FU EPSRC grant [EP/E025366/1]; EPSRC [EP/E025366/1, EP/H017461/1] Funding
   Source: UKRI
FX This work is funded by EPSRC grant EP/E025366/1.
CR Adams MM, 2005, LECT NOTES COMPUT SC, V3785, P465
   Alur Rajeev., 2008, EMSOFT 08, P89, DOI [10.1145/1450058.1450071, DOI 10.1145/1450058.1450071]
   [Anonymous], 1992, DO178B
   [Anonymous], SIM
   [Anonymous], 2002, 6150832002 BS EN 1
   [Anonymous], 2005, EMSOFT 2005
   [Anonymous], STAT STAT COD 7 US G
   [Anonymous], 1994, PRENTICE HALL INT SE
   Arthan R, 2000, ICFEM 2000: THIRD INTERNATIONAL CONFERENCE ON FORMAL ENGINEERING METHODS, PROCEEDINGS, P169, DOI 10.1109/ICFEM.2000.873817
   Banphawatthanarak C., 1999, Proceedings of the 1999 IEEE International Symposium on Computer Aided Control System Design (Cat. No.99TH8404), P581, DOI 10.1109/CACSD.1999.808712
   Banphawatthanarak C., 2000, CMUECE2000020
   Caspi P, 2003, ACM SIGPLAN NOTICES, V38, P153, DOI 10.1145/780731.780754
   Cavalcante AM, 2006, PROCEEDINGS OF THE IEEE INTERNATIONAL TELECOMMUNICATIONS SYMPOSIUM, VOLS 1 AND 2, P269
   Cavalcanti A, 2005, LECT NOTES COMPUT SC, V3582, P253
   Cavalcanti A., 2003, Formal Aspects of Computing, V15, P146, DOI 10.1007/s00165-003-0006-5
   Cavalcanti A, 2011, FORM ASP COMPUT, V23, P465, DOI 10.1007/s00165-010-0170-3
   DIJKSTRA EW, 1975, COMMUN ACM, V18, P453, DOI [10.1145/360933.360975, 10.1145/390016.808417]
   Formal Systems (Europe) Ltd, PROC BEH EXPL
   Formal Systems (Europe) Ltd, FAIL DIV REF
   Freitas A, 2006, LECT NOTES COMPUT SC, V4085, P115
   HALBWACHS N, 1991, P IEEE, V79, P1305, DOI 10.1109/5.97300
   Hamon G, 2004, LECT NOTES COMPUT SC, V2984, P229
   HAREL D, 1987, SCI COMPUT PROGRAM, V8, P231, DOI 10.1016/0167-6423(87)90035-9
   Hoare C. A. R., 1998, Unifying Theories of Programming
   Kanade A, 2009, LECT NOTES COMPUT SC, V5643, P430, DOI 10.1007/978-3-642-02658-4_33
   Lublinerman R, 2009, ACM SIGPLAN NOTICES, V44, P78, DOI 10.1145/1594834.1480893
   Malik P, 2005, LECT NOTES COMPUT SC, V3455, P65
   Miyazawa A., 2011, YCS2011461 U YORK
   Miyazawa A., 2010, YCS2010449 U YORK
   Oliveira MVM, 2008, ELECTRON NOTES THEOR, V214, P203, DOI 10.1016/j.entcs.2008.06.010
   Oliveira M, 2006, LECT NOTES COMPUT SC, V4010, P123
   Oliveira M, 2013, FORM ASP COMPUT, V25, P133, DOI 10.1007/s00165-007-0044-5
   Roscoe A.W., 1998, THEORY PRACTICE CONC
   Scaife N., 2004, Proceedings of the 4th ACM International Conference on Embedded Software, EMSOFT '04, P259
   The MathWorks Inc, SIM VER VAL
   The MathWorks Inc, SIM DES VER
   The MathWorks Inc., STAT COD
   The MathWorks Inc., XPC TARG
   The MathWorks Inc., REAL TIM WORKSH
   Tiwari Ashish., 2002, Formal semantics and analysis methods for Simulink Stateflow models
   Toom A., 2008, ERTS 08
   Toyn I, 2005, LECT NOTES COMPUT SC, V3455, P104
   Woodcock J., 1996, Using Z: Specification, Refinement, and Proof
   Xavier M.A., 2006, SBMF 2006 BRAZILIAN, P105
NR 44
TC 11
Z9 11
U1 0
U2 2
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 1
PY 2012
VL 77
IS 10-11
SI SI
BP 1151
EP 1177
DI 10.1016/j.scico.2011.07.007
PG 27
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 980JQ
UT WOS:000306889800007
OA Bronze
DA 2024-07-18
ER

PT J
AU Papanikolaou, N
   Creese, S
   Goldsmith, M
AF Papanikolaou, Nikolaos
   Creese, Sadie
   Goldsmith, Michael
TI Refinement checking for privacy policies
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Privacy policy; Policy refinement; CSP; Model checking
AB This paper presents a framework for analysis and comparison of privacy policies expressed in P3P (Platform for Privacy Preferences). In contrast to existing approaches to policy analysis, which focus on demonstrations of equality or equivalence of policies, our approach makes it possible to check for refinement between policies. We automatically generate a CSP model from a P3P policy, which represents the policy's intended semantics; using the FDR model checker, we then perform various tests (using process refinement) to determine (a) whether a policy is internally consistent, and (b) whether a given policy refines another by permitting similar data collection, processing and sharing practices. Our approach allows for the detection of subtle differences between practices prescribed by different privacy policies, the comparison of relative levels of privacy offered by different policies, and captures the semantics of policies intended in the original P3P standard. The systematic translation of policies to CSP provides a formal means of reasoning about websites' privacy policies, and therefore the practices of various enterprises with regards to personal data. (c) 2011 Elsevier B.V. All rights reserved.
C1 [Papanikolaou, Nikolaos] Hewlett Packard Labs, Cloud & Secur Lab, Bristol BS34 8QZ, Avon, England.
   [Creese, Sadie; Goldsmith, Michael] Univ Warwick, Int Digital Lab, WMG, Coventry CV4 7AL, W Midlands, England.
C3 Hewlett-Packard; University of Warwick
RP Papanikolaou, N (corresponding author), Hewlett Packard Labs, Cloud & Secur Lab, Long Down Ave, Bristol BS34 8QZ, Avon, England.
EM nick.papanikolaou@hp.com; S.Creese@warwick.ac.uk;
   M.H.Goldsmith@warwick.ac.uk
FU EnCoRe project ("Ensuring Consent and Revocation"); UK Technology
   Strategy Board; Engineering and Physical Sciences Research Council;
   Economic and Social Research Council; EPSRC [EP/G002541/2, EP/G002541/1]
   Funding Source: UKRI
FX This work was carried out under the auspices of the EnCoRe project
   ("Ensuring Consent and Revocation"), sponsored by the UK Technology
   Strategy Board, the Engineering and Physical Sciences Research Council
   and the Economic and Social Research Council.
CR Agrafiotis I., 2010, LOGIC CONSENT UNPUB
   Becker M., 2010, MSRTR201032
   Bryans Jery., 2005, Proceedings of the 2005 Workshop on Secure Web Services, P28
   Fisler K, 2005, PROC INT CONF SOFTW, P196
   Formal Systems (Europe) Ltd, 2005, FDR2 US MAN VERS 2 8
   Fournet C, 2007, ACM T PROGR LANG SYS, V29, DOI 10.1145/1275497.1275500
   Gunter C.A., 2005, LECT NOTES COMPUTER, V3424
   Hogben G., 2002, P W3C WORKSH FUT P3P
   Marchiori M., 2006, NOTEP3P1120061113 WO
   May M.J., 2006, COMP SEC FDN WORKSH
   May M.J., 2009, P IEEE INT S POL DIS
   MOFFETT JD, 1993, IEEE J SEL AREA COMM, V11, P1404, DOI 10.1109/49.257932
   Moses T., 2004, PRIVACY POLICY PROFI
   Moses Tim., 2005, EXTENSIBLE ACCESS CO
   Ouaknine J., 2006, ENTCS, V162, P2006
   Roscoe AW, 2010, TEXTS COMPUT SCI, P3, DOI 10.1007/978-1-84882-258-0_1
   Ryan P., 2002, DBSEC, V256, P301
   Stamey JW, 2009, SIGDOC'09: PROCEEDINGS OF THE 27TH ACM INTERNATIONAL CONFERENCE ON DESIGN OF COMMUNICATION, P233
   Walker D., 1999, TYPE SYSTEM EXPRESSI
   YU T, 2004, P ACM WORKSH SEC WEB
   Zhang Nan., 2004, FMSE 04, P56
NR 21
TC 3
Z9 5
U1 0
U2 6
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 1
PY 2012
VL 77
IS 10-11
SI SI
BP 1198
EP 1209
DI 10.1016/j.scico.2011.07.009
PG 12
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 980JQ
UT WOS:000306889800009
OA Bronze
DA 2024-07-18
ER

PT J
AU Wu, C
AF Wu, Chen
TI WSDL term tokenization methods for IR-style Web services discovery
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Web services discovery; Information Retrieval; String tokenization;
   Source code mining; Data engineering
AB The IR-style Web services discovery represents an important approach that applies proven techniques developed in the field of Information Retrieval (IR). Many studies exploited the Web Services Description Language (WSDL) syntax to extract useful service metadata for building indexes. However, a fundamental issue associated with this approach is the WSDL term tokenization. This paper proposes the application of three statistical methods for WSDL term tokenization-MDL, TP, and PPM. With the increasing need for effective IR-style Web services discovery facilities, term tokenization is of fundamental importance for properly indexing WSDL documents. We compare our applied methods with two baseline methods. The experiment suggests the superiority of MDL and PPM methods based on IR evaluation metrics. To the best of our knowledge, our work is the first to systematically investigate the issue of WSDL term tokenization for Web services discovery. Our solution can benefit source coding mining, in which a key step is to tokenize names (i.e. terms) of variables, functions, classes, modules, etc. for semantic analysis. Our methods could also be used for solving Web-related string tokenization problems such as URL analysis and Web scripts comprehension. (C) 2011 Elsevier B.V. All rights reserved.
C1 Univ Western Australia, ICRAR, Nedlands, WA 6009, Australia.
C3 University of Western Australia
RP Wu, C (corresponding author), Univ Western Australia, ICRAR, Nedlands, WA 6009, Australia.
EM chen.wu@uwa.edu.au
CR Al-Masri E., 2008, WORLD WID WEB C BEIJ
   [Anonymous], COMP WEB SERVICE INT
   [Anonymous], 2000, EXTENSIBLE MARKUP LA
   [Anonymous], 1948, BELL SYST TECH J
   [Anonymous], 1989, Stochastic Complexity in Statistical Inquiry
   [Anonymous], 1994, P TREC
   Baeza-Yates R., 2002, P SIGIR WORKSH XML I
   Baeza-Yates Ricardo, 1999, MODERN INFORM RETRIE, V463
   Blake MB, 2008, IEEE INTERNET COMPUT, V12, P62, DOI 10.1109/MIC.2008.112
   Brent MR, 1996, COGNITION, V61, P93, DOI 10.1016/S0010-0277(96)00719-6
   Chang J.-S., 1997, International Journal of Computational Linguistics and Chinese Language Processing
   CHRISTENSEN E, 2007, WEB SERVICES DESCRIP
   CLEARY JG, 1997, COMPUTER J, V40
   Crasso M, 2008, SCI COMPUT PROGRAM, V71, P144, DOI 10.1016/j.scico.2008.02.002
   Crasso M, 2011, J DATABASE MANAGE, V22, P102, DOI 10.4018/jdm.2011010105
   DEERWESTER S, 1990, J AM SOC INFORM SCI, V41, P391, DOI 10.1002/(SICI)1097-4571(199009)41:6<391::AID-ASI1>3.0.CO;2-9
   Egghe L, 2008, INFORM PROCESS MANAG, V44, P856, DOI 10.1016/j.ipm.2007.03.014
   Fellbaum C., 1998, WORDNET ELECT LEXICA, DOI DOI 10.7551/MITPRESS/7287.001.0001
   HOWARD PG, 1993, THESIS BROWN U
   Iman R. L., 1980, COMMUNICATIONS STA A, VA9
   Kifer M., 2004, ISWC 2004 WORKSH SEM
   Klusch M., 2008, Service Matchmaking and Resource Retrieval in the Semantic Web (SMR2 2008), P3
   Kokash N., 2006, LEVERAGING WEB SERVI
   Kraft Leon Gordon, 1949, THESIS
   Lee K.-H., 2007, INT C MULT UB ENG
   Manber Udi., 1990, SODA 90, P319
   Rodriguez JM, 2010, SCI COMPUT PROGRAM, V75, P1001, DOI 10.1016/j.scico.2010.01.002
   MCCREIGHT EM, 1976, J ACM, V23, P262, DOI 10.1145/321941.321946
   Oh S., 2010, WEB TECHNOLOGIES CON
   Platzer C, 2005, 3 IEEE EUR C WEB SER
   Ponte JM, 1998, P 21 ANN INT ACM SIG, P275, DOI DOI 10.1145/290941.291008
   RISSANEN J, 1978, AUTOMATICA, V14, P465, DOI 10.1016/0005-1098(78)90005-5
   Robertson S, 2007, LECT NOTES COMPUT SC, V4425, P40
   Saffran JR, 1996, J MEM LANG, V35, P606, DOI 10.1006/jmla.1996.0032
   Sajjanhar A, 2004, LECT NOTES COMPUT SC, V3007, P665
   Somasundaram T.S., 2006, INT C ADV COMP COMM
   Srinivasan N., 2004, 1 INT WORKSH SEM WEB
   TAO L, 2001, THESIS U MUENCHEN
   Teahan WJ, 2000, COMPUT LINGUIST, V26, P375, DOI 10.1162/089120100561746
   van Rijsbergen C. J, 1979, Information Retrieval, V2nd
   VITERBI AJ, 1967, IEEE T INFORM THEORY, V13, P260, DOI 10.1109/TIT.1967.1054010
   WANG Y, 2003, 4 INT C WEB INF SYST
   WITTEN IH, 1991, IEEE T INFORM THEORY, V37, P1085, DOI 10.1109/18.87000
   Zobel J, 2006, ACM COMPUT SURV, V38, DOI 10.1145/1132956.1132959
NR 44
TC 18
Z9 18
U1 0
U2 7
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR 1
PY 2012
VL 77
IS 3
BP 355
EP 374
DI 10.1016/j.scico.2011.08.001
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Social Science Citation Index (SSCI)
SC Computer Science
GA 898NB
UT WOS:000300748000011
OA Bronze
DA 2024-07-18
ER

PT J
AU Hesselink, WH
   Aravind, AA
AF Hesselink, Wim H.
   Aravind, Alex A.
TI Queue based mutual exclusion with linearly bounded overtaking
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Mutual exclusion; Refinement; Shared memory; Bounded overtaking;
   Verification
ID ALGORITHM
AB The queue based mutual exclusion protocol establishes mutual exclusion for N > 1 threads by means of not necessarily atomic variables. In order to enter the critical section, a competing thread needs to traverse as many levels as there are currently competing threads. Competing threads can be overtaken by other competing threads. It is proved here, however, that every competing thread is overtaken less than N times, and that the overtaking threads were competing when the first one of them exits. (C) 2010 Elsevier B.V. All rights reserved.
C1 [Hesselink, Wim H.] Univ Groningen, Dept Comp Sci, NL-9700 AK Groningen, Netherlands.
   [Aravind, Alex A.] Univ No British Columbia, Comp Sci Program, Prince George, BC V2N 4Z9, Canada.
C3 University of Groningen; University of Northern British Columbia
RP Hesselink, WH (corresponding author), Univ Groningen, Dept Comp Sci, POB 407, NL-9700 AK Groningen, Netherlands.
EM w.h.hesselink@rug.nl; csalex@unbc.ca
OI Hesselink, Wim/0000-0002-1413-4320
CR ABADI M, 1991, THEOR COMPUT SCI, V82, P253, DOI 10.1016/0304-3975(91)90224-P
   Alagarsamy K, 2005, INFORM PROCESS LETT, V96, P36, DOI 10.1016/j.ipl.2005.05.015
   Anderson JH, 2003, DISTRIB COMPUT, V16, P75, DOI 10.1007/s00446-003-0088-6
   Aravind A, 2009, ACTA INFORM, V46, P73, DOI 10.1007/s00236-008-0086-z
   BLOCK K, 1990, INFORM PROCESS LETT, V35, P219, DOI 10.1016/0020-0190(90)90048-3
   Chandy K.M., 1988, PARALLEL PROGRAM DES
   DIJKSTRA EW, 1965, COMMUN ACM, V8, P569, DOI 10.1145/365559.365617
   HESSELINK WH, 2009, PVS PROOF SCRIPTS QU
   Igarashi Y., 1999, Parallel Processing Letters, V9, P475, DOI 10.1142/S012962649900044X
   LAMPORT L, 1974, COMMUN ACM, V17, P453, DOI 10.1145/361082.361093
   MORRIS JM, 1979, INFORM PROCESS LETT, V8, P76, DOI 10.1016/0020-0190(79)90147-9
   OWICKI S, 1976, ACTA INFORM, V6, P319, DOI 10.1007/BF00268134
   Owre S., 2001, PVS VERSION 2 4 SYST
   PETERSON GL, 1981, INFORM PROCESS LETT, V12, P115, DOI 10.1016/0020-0190(81)90106-X
   Raynal M., 1986, ALGORITHMS MUTUAL EX
   Taubenfeld Gadi, 2006, SYNCHRONIZATION ALGO
   UDDING JT, 1986, INFORM PROCESS LETT, V23, P159, DOI 10.1016/0020-0190(86)90117-1
NR 17
TC 0
Z9 0
U1 0
U2 0
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUL 1
PY 2011
VL 76
IS 7
BP 542
EP 554
DI 10.1016/j.scico.2010.11.002
PG 13
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 750YO
UT WOS:000289584500002
OA Green Published
DA 2024-07-18
ER

PT J
AU Cunha, A
   Visser, J
AF Cunha, Alcino
   Visser, Joost
TI Transformation of structure-shy programs with application to XPath
   queries and strategic functions
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT Workshop on Partial Evaluation and Program Manipulation
CY JAN 15-16, 2007
CL Nice, FRANCE
DE Algebraic program transformation; Strategic functional programming; XML
   query languages; Point-free program calculation; Type specialization;
   Type generalization
AB Various programming languages allow the construction of structure-shy programs. Such programs are defined generically for many different datatypes and only specify specific behavior for a few relevant subtypes. Typical examples are XML query languages that allow selection of subdocuments without exhaustively specifying intermediate element tags. Other examples are languages and libraries for polytypic or strategic functional programming and for adaptive object-oriented programming.
   In this paper, we present an algebraic approach to transformation of declarative structure-shy programs, in particular for strategic functions and XML queries. We formulate a rich set of algebraic laws, not just for transformation of structure-shy programs, but also for their conversion into structure-sensitive programs and vice versa. We show how subsets of these laws can be used to construct effective rewrite systems for specialization, generalization, and optimization of structure-shy programs. We present a type-safe encoding of these rewrite systems in Haskell which itself uses strategic functional programming techniques. We discuss the application of these rewrite systems for XPath query optimization and for query migration in the context of schema evolution. (C) 2010 Elsevier B.V. All rights reserved.
C1 [Cunha, Alcino] Univ Minho, DI CCTC, P-4719 Braga, Portugal.
C3 Universidade do Minho
RP Cunha, A (corresponding author), Univ Minho, DI CCTC, P-4719 Braga, Portugal.
EM alcino@di.uminho.pt; j.visser@sig.nl
RI Visser, Joost/AAD-9423-2019; Cunha, Alcino/I-4104-2015
OI Visser, Joost/0000-0003-0158-3095; Cunha, Alcino/0000-0002-2714-8027
CR Alimarine A, 2005, LECT NOTES COMPUT SC, V3350, P203
   Alimarine A, 2004, LECT NOTES COMPUT SC, V3125, P16
   ALVES T, 2008, P 9 INT WORKSH RUL B
   Baars A. I., 2002, SIGPLAN Notices, V37, P157, DOI 10.1145/583852.581494
   BACKUS J, 1978, COMMUN ACM, V21, P613, DOI 10.1145/359576.359579
   Bird Richard, 1997, Algebra of Programming
   CHAKRAVARTY M, 2005, P ICFP 05, P241
   Che DR, 2006, VLDB J, V15, P263, DOI 10.1007/s00778-005-0172-6
   Cheney J., 2002, P 2002 ACM SIGPLAN W, P90, DOI DOI 10.1145/581690.581698
   Cunha A, 2005, FUND INFORM, V66, P315
   CUNHA A, 2008, P 2 WORKSH MATH STRU
   Cunha A, 2007, ELECTRON NOTES THEOR, V174, P17, DOI 10.1016/j.entcs.2006.10.019
   Cunha A, 2006, LECT NOTES COMPUT SC, V4015, P1
   Cunha A, 2006, LECT NOTES COMPUT SC, V4085, P284
   DEVRIES M, 2004, THESIS RIJKSUNIVERSI
   FERREIRA F, 2007, XPTO XPATH PREPROCES
   Gibbons J, 2002, LECT NOTES COMPUT SC, V2297, P149
   Hinze Ralf., 2000, Proceedings of the 27th ACM SIGPLAN-SIGACT symposium on Principles of programming languages, POPL '00, P119, DOI [DOI 10.1145/325694.325709, 10.1145/325694.325709]
   Holdermans S, 2006, LECT NOTES COMPUT SC, V4014, P209, DOI 10.1007/11783596_14
   Jansson P., 1997, POPL 1997, P470
   JONES MP, 1995, LECT NOTES COMPUTER, V925, P97
   JONES SP, 2006, P 11 ACM SIGPLAN INT, P50
   Lämmel R, 2003, LECT NOTES COMPUT SC, V2562, P357
   Lämmel R, 2003, ACM SIGPLAN NOTICES, V38, P26, DOI 10.1145/640136.604179
   LAMMEL R, 2002, LNCS, V2257, P137
   Lammel R., 2003, ESSENCE STRATEGIC PR
   Lammel R., 2003, J LOGIC ALGEBRAIC PR, V54
   Lammel R., 2004, 1 INT WORKSH SOFTW E
   Lämmel R, 2007, CONFERENCE RECORD OF POPL 2007: THE 34TH ACM SIGPLAN SIGACT SYMPOSIUM ON PRINCIPLES OF PROGAMMING LANGUAGES, P137
   Lammel Ralf., 2003, P ASPECT ORIENTED SO, P168, DOI [10.1145/643603.643621, DOI 10.1145/643603.643621]
   Lieberherr K, 2004, ACM T PROGR LANG SYS, V26, P370, DOI 10.1145/973097.973102
   Lieberherr K., 1996, ADAPTIVE OBJECT ORIE
   MAGALHAES JP, 2009, UUCS2009022 UTR U DE
   MEIJER E, 1991, LNCS, V523
   Oliveira JN, 2001, J UNIVERS COMPUT SCI, V7, P754
   Reig F., 2006, TRENDS FUNCTIONAL PR, V5, P17
   SCHRIJVERS T, 2007, P 19 INT S IMPL APPL, P233
   Silva Alexandra, 2006, P 2006 ACM SIGPLAN W, P25, DOI [10.1145/1159842.1159846, DOI 10.1145/1159842.1159846]
   VISSER E, 1998, ENTCS, V15
   Visser Eelco., 2001, REWRITING TECHNIQUES, V2051, P357, DOI DOI 10.1007/3-540-45127-7_27.URL
   Visser J, 2001, ACM SIGPLAN NOTICES, V36, P270, DOI 10.1145/504311.504302
   VISSER J, 2003, THESIS U AMSTERDAM A
   Visser J, 2008, ELECTRON NOTES THEOR, V200, P3, DOI 10.1016/j.entcs.2008.04.090
   *W3C, 2006, XML PATH LANG XPATH
   Wallace M, 1999, ACM SIGPLAN NOTICES, V34, P148, DOI 10.1145/317765.317794
   Weirich Stephanie., 2006, Proceedings o fthe 2006 ACM SIGPLAN workshop on Haskell, P1, DOI DOI 10.1145/1159842.1159844
   World Wide Web Consortium, DOC OBJ MOD
NR 47
TC 0
Z9 1
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 1
PY 2011
VL 76
IS 6
SI SI
BP 516
EP 539
DI 10.1016/j.scico.2010.01.003
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 792EC
UT WOS:000292722300004
OA Green Published, Bronze
DA 2024-07-18
ER

PT J
AU Desharnais, J
   Struth, G
AF Desharnais, Jules
   Struth, Georg
TI Internal axioms for domain semirings
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 9th International Conference on Mathematics of Program Construction
CY JUL 15-18, 2008
CL Marseille, FRANCE
SP Ctr Int Rech Math Luminy, INRIA
DE Semiring; Kleene algebra; Modal semiring; Domain operator; Codomain
   operator; Antidomain operator; Algebra of domain elements; Distributive
   lattice; Boolean algebra; Heyting algebra; Lob's formula; Automated
   theorem proving
ID KLEENE ALGEBRA; THEOREM
AB New axioms for domain operations on semirings and Kleene algebras are proposed. They generalise the relational notion of domain - the set of all states that are related to some other state - to a wide range of models. They are internal since the algebras of state spaces are induced by the domain axioms. They are simpler and conceptually more appealing than previous two-sorted external approaches in which the domain algebra is determined through typing. They lead to a simple and natural algebraic approach to modal logics based on equational reasoning. The axiomatisations have been developed in a new style of computer-enhanced mathematics by automated theorem proving, and the approach itself is suitable for automated systems analysis and verification. This is demonstrated by a fully automated proof of a modal correspondence result for Lab's formula that has applications in termination analysis. (C) 2010 Elsevier B.V. All rights reserved.
C1 [Struth, Georg] Univ Sheffield, Dept Comp Sci, Sheffield S1 4DP, S Yorkshire, England.
   [Desharnais, Jules] Univ Laval, Dept Informat & Genie Logiciel, Quebec City, PQ G1V 0A6, Canada.
C3 University of Sheffield; Laval University
RP Struth, G (corresponding author), Univ Sheffield, Dept Comp Sci, 211 Portobello, Sheffield S1 4DP, S Yorkshire, England.
EM Jules.Desharnais@ift.ulaval.ca; g.struth@dcs.shef.ac.uk
RI Desharnais, Jules/A-4023-2008
CR [Anonymous], 1998, IDEMPOTENCY
   BIRKHOFF G, 1984, C PUBL AM MATH SOC, V25
   BLOK JW, 1989, MEMOIRS AM MATH SOC, V77
   DEGEN W, 2007, LOGIC LOGICAL PHILOS, V15, P305
   Desharnais J., 2006, IFIP TCS2004, P647
   Desharnais J, 2008, LECT NOTES COMPUT SC, V5140, P330
   Desharnais J, 2008, LECT NOTES COMPUT SC, V5133, P360
   Desharnais J, 2006, ACM T COMPUT LOG, V7, P798, DOI 10.1145/1183278.1183285
   Höfner P, 2007, LECT NOTES ARTIF INT, V4603, P279
   Höfner P, 2009, ANN MATH ARTIF INTEL, V55, P35, DOI 10.1007/s10472-009-9151-8
   Jipsen P, 2008, LECT NOTES COMPUT SC, V4988, P234
   Johnstone PT., 1982, Stone Spaces
   Jonsson B., 1951, AM J MATH, V73, P891, DOI 10.2307/2372123
   KOZEN D, 1994, INFORM COMPUT, V110, P366, DOI 10.1006/inco.1994.1037
   Kozen D, 1997, ACM T PROGR LANG SYS, V19, P427, DOI 10.1145/256167.256195
   Leiss H, 2006, J LOGIC ALGEBR PROGR, V66, P185, DOI 10.1016/j.jlap.2005.04.004
   Maier P, 2004, LECT NOTES COMPUT SC, V3210, P295
   McCune W., PROVER9 MACE4
   Möller B, 2006, THEOR COMPUT SCI, V351, P221, DOI 10.1016/j.tcs.2005.09.069
   SIK ZE, 2004, LECT NOTES COMP SCI, V3113, P68
   Sofronie-Stokkermans V, 2007, ANN MATH ARTIF INTEL, V49, P221, DOI 10.1007/s10472-007-9051-8
   STRUTH G, PROOF DATABASE
   Struth G, 2008, ELECTRON NOTES THEOR, V214, P81, DOI 10.1016/j.entcs.2008.06.005
   Sutcliffe G., TPTP PROBLEM LIB AUT
   Sutcliffe G., CADE ATP SYSTEM COMP
   von Wright J, 2004, SCI COMPUT PROGRAM, V51, P23, DOI 10.1016/j.scico.2003.09.002
NR 26
TC 38
Z9 39
U1 0
U2 1
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR 1
PY 2011
VL 76
IS 3
SI SI
BP 181
EP 203
DI 10.1016/j.scico.2010.05.007
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 720GT
UT WOS:000287269500003
DA 2024-07-18
ER

PT J
AU Buss, M
   Brand, D
   Sreedhar, V
   Edwards, SA
AF Buss, Marcio
   Brand, Daniel
   Sreedhar, Vugranam
   Edwards, Stephen A.
TI A novel analysis space for pointer analysis and its application for bug
   finding
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Static analysis; Pointer analysis; Summary-based analysis; Bug-finding
AB The size of today's programs continues to grow, as does the number of bugs they contain. Testing alone is rarely able to flush out all bugs, and many lurk in difficult-to-test corner cases. An important alternative is static analysis, in which correctness properties of a program are checked without running it. While it cannot catch all errors, static analysis can catch many subtle problems that testing would miss.
   We propose a new space of abstractions for pointer analysis an important component of static analysis for C and similar languages. We identify two main components of any abstraction how to model statement order and how to model conditionals, then present a new model of programs that enables us to explore different abstractions in this space. Our assign-fetch graph represents reads and writes to memory instead of traditional points-to relations and leads to concise function summaries that can be used in any context. Its flexibility supports many new analysis techniques with different trade-offs between precision and speed.
   We present the details of our abstraction space, explain where existing algorithms fit, describe a variety of new analysis algorithms based on our assign-fetch graphs, and finally present experimental results that show our flow-aware abstraction for statement ordering both runs faster and produces more precise results than traditional flow-insensitive analysis. (C) 2009 Elsevier B.V. All rights reserved.
C1 [Buss, Marcio; Edwards, Stephen A.] Columbia Univ, Dept Comp Sci, New York, NY 10027 USA.
   [Buss, Marcio; Brand, Daniel] IBM TJ Watson Res Ctr, Yorktown Hts, NY USA.
   [Sreedhar, Vugranam] IBM TJ Watson Res Ctr, Hawthorne, NY USA.
C3 Columbia University; International Business Machines (IBM);
   International Business Machines (IBM)
RP Buss, M (corresponding author), Columbia Univ, Dept Comp Sci, New York, NY 10027 USA.
EM marcio@cs.columbia.edu
RI Edwards, Stephen Anthony/HKP-1916-2023
OI Edwards, Stephen Anthony/0000-0003-2609-4861
CR Andersen L. O., 1994, Ph.D. thesis
   [Anonymous], 1992, Programming Language Design and Implementation (PLDI), DOI DOI 10.1145/143103.143137
   [Anonymous], 1999, P OBJ OR SYST LANG
   [Anonymous], 2009, P 30 ACM SIGPLAN C P
   [Anonymous], 2006, COMPILERS PRINCIPLES
   Banning J.P., 1979, Proceedings of the 6th ACM SIGACT-SIGPLAN symposium on Principles of programming languages, P29, DOI [10.1145/567752.567756., DOI 10.1145/567752.567756]
   BLANCHET B, 1999, P 1999 ACM SIGPLAN C, P20
   Blanchet Bruno, 2003, ACM SIGPLAN NOTICES, P196, DOI DOI 10.1145/780822.781153
   Brand D, 2000, 11TH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P174, DOI 10.1109/ISSRE.2000.885870
   BRAND D, 2003, RC22905 IBM RES DIV
   BRAND D, 2007, P INT C SOFTW MAINT, P44
   Bruns G, 2003, IEEE T SOFTWARE ENG, V29, P883, DOI 10.1109/TSE.2003.1237170
   BURKE M, 1990, ACM T PROGR LANG SYS, V12, P341, DOI 10.1145/78969.78963
   BURKE M, 1995, LECT NOTES COMPUTER, V1473, P234
   BUSS M, 2008, THESIS COLUMBIA U NE
   Buss M, 2008, APPLIED COMPUTING 2008, VOLS 1-3, P234
   CHASE DR, 1990, P SIGPLAN 90 C PROGR, P296
   CHATTERJEE R, 1999, P 26 ACM SIGPLAN SIG, P133
   Cherem S, 2007, LECT NOTES COMPUT SC, V4420, P172
   CHOI JD, 1993, P 20 ACM SIGPLAN SIG, P232
   Clarke EM, 1999, MODEL CHECKING, P1
   Cooper K.D., 1988, P PROGRAMMING LANGUA, P487
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   DAS M, 2000, P ACM SIGPLAN C PROG, P35
   DeLine Robert., 2001, Proceedings of the ACM SIGPLAN 2001 conference on Programming language design and implementation, P59, DOI DOI 10.1145/381694.378811
   EMAMI M, 1994, P ACM SIGPLAN 94 C P, P242
   ENGLER D, 2004, LECT NOTES COMPUTER, V2937
   FLANAGAN C, 2002, P ACM SIGPLAN 2002 C, P234
   Godefroid Patrice., 1997, Proceedings of POPL, P174
   Hardekopf B, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P290, DOI 10.1145/1250734.1250767
   HICKS M, 2004, GM SOFTWARE VENDORS
   Hind M, 1998, LECT NOTES COMPUT SC, V1503, P57
   Hind M, 1999, ACM T PROGR LANG SYS, V21, P848, DOI 10.1145/325478.325519
   Jim T, 2002, USENIX ASSOCIATION PROCEEDINGS OF THE GENERAL TRACK, P275
   Lattner C, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P278, DOI 10.1145/1250734.1250766
   Lockridge Rick., 2000, Will Bugs Scare off Users of New Windows 2000
   Misra SC, 2003, LECT NOTES COMPUT SC, V2667, P724
   Myers G J., 2004, The Art of Software Testing, V2nd ed.
   Nielson F., 1999, Principles of Program Analysis
   Nystrom EM, 2004, LECT NOTES COMPUT SC, V3148, P165
   SAGIV M, 1996, P 23 ACM S PRINC PRO, P16
   Shapiro M., 1997, P 24 ACM SIGPLAN SIG, P1
   SRIDHARAN M, 2006, PLDI 06, P387
   Sridharan Manu, 2005, P 20 ANN ACM SIGPLAN, P59, DOI [DOI 10.1145/1103845.1094817, 10.1145/1094811.1094817, DOI 10.1145/1094811.1094817]
   Steensgaard Bjarne., 1996, POINTS TO ANAL ALMOS, P32
   STOCKS P, 1998, P INT S SOFTW TEST A, P21
   WAGNER D, 2000, P NETW DISTR SYST SE, P3
   Wilhelm R, 2000, LECT NOTES COMPUT SC, V1781, P1
   ZHANG S, 1996, P 4 ACM SIGSOFT S FD, P81
   ZHANG S, 1998, P ACM SIGPLAN WORKSH, P11
NR 50
TC 6
Z9 7
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 1
PY 2010
VL 75
IS 11
SI SI
BP 921
EP 942
DI 10.1016/j.scico.2009.08.002
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 641MD
UT WOS:000281129600002
OA Green Published
DA 2024-07-18
ER

PT J
AU Sabouri, H
   Sirjani, M
AF Sabouri, Hamideh
   Sirjani, Marjan
TI Actor-based slicing techniques for efficient reduction of Rebeca models
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 5th International Workshop on Formal Aspects of Component Software
   (FACS)
CY SEP 10-12, 2008
CL Malaga, SPAIN
DE Slicing; Actor-based languages; Rebeca; Model checking; Verification;
   Reduction
ID VERIFICATION
AB Slicing is a program analysis technique which can be used for reducing the size of the model and avoid state space explosion in model checking. In this work a static slicing technique is proposed for reducing Rebeca models with respect to a property. For applying the actor-based slicing techniques, the Rebeca control flow graph (RCFG) and the Rebeca dependence graph (RDG) are introduced. We propose two different approaches for constructing the RDG, where each approach can be more effective under certain conditions. As the static slicing usually produces large slices, two other slicing-based reduction techniques, step-wise slicing and bounded slicing, are proposed as simple novel ideas. Step-wise slicing first generates slices that overapproximate the behavior of the original model and then refines it, and bounded slicing is based on the semantics of nondeterministic assignments in Rebeca. We also propose a static slicing algorithm for deadlock detection (in absence of any particular property). The efficiency of these techniques is checked by applying them to several case studies which are included in this paper. Similar techniques can be applied on the other actor-based languages. (C) 2010 Elsevier B.V. All rights reserved.
C1 [Sabouri, Hamideh; Sirjani, Marjan] Univ Tehran, Dept Elect & Comp Engn, Tehran, Iran.
   [Sirjani, Marjan] Reykjavik Univ, Sch Comp Sci, Reykjavik, Iceland.
C3 University of Tehran; Reykjavik University
RP Sabouri, H (corresponding author), Univ Tehran, Dept Elect & Comp Engn, Tehran, Iran.
EM sabouri@ece.ut.ac.ir; marjan@ru.is
CR Agha G., 1986, ACTORS MODEL CONCURR
   ALPER S, 2007, IEEE T COMPUT, P511
   Bozga Marius., 1999, WORLD C FORMAL METHO, P307
   Brückner I, 2005, LECT NOTES COMPUT SC, V3785, P360
   CHENG J, 1993, P 1 INT WORKSH AUT A, V749, P223
   Clarke E, 2003, J ACM, V50, P752, DOI 10.1145/876638.876643
   CLARKE E, 1992, 19 ACM POPL, P1512
   Clarke Edmund M., 2001, Model Checking
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Dwyer MB, 2006, LECT NOTES COMPUT SC, V3920, P73
   Emerson E. A., 1990, Handbook of Theoretical Computer Science, VB, P995, DOI [10.1016/b978-0-444-88074-1.50021-4, DOI 10.1016/B978-0-444-88074-1.50021-4]
   FERRANTE J, 1987, ACM T PROGR LANG SYS, V9, P319, DOI 10.1145/24039.24041
   Fischer C., 1997, Formal Methods for Open Object-based Distributed Systems. Vol.2 IFIP TC6 WG6.1 International Workshop on Formal Methods for Open Object-based Distributed Systems (FMOODS '97), P423
   GANAPATHY V, 2002, ELECT NOTES THEORETI, V65
   Graf S, 1997, LECT NOTES COMPUT SC, V1254, P72
   GROOTE JF, P WORKSH
   HATCLIFF J, 1999, HIGHER ORDER SYMBOLI, P315
   HOJJAT H, P 7 INT C APPL CONC
   Hong HS, 2005, FIFTH IEEE INTERNATIONAL WORKSHOP ON SOURCE CODE ANALYSIS AND MANIPULATION, PROCEEDINGS, P25
   HORWITZ S, 1990, ACM T PROGR LANG SYS, P26
   IP C, 1993, INT C COMP HARDW DES, P97
   Jaghoori M. M., 2006, Applied Computing 2006. 21st Annual ACM Symposium on Applied Computing, P1810, DOI 10.1145/1141277.1141704
   Jaghoori MM, 2005, LECT NOTES COMPUT SC, V3816, P494, DOI 10.1007/11604655_56
   Jayaraman G, 2005, LECT NOTES COMPUT SC, V3442, P269, DOI 10.1007/978-3-540-31984-9_20
   Jeffrey D, 2008, J SYST SOFTWARE, V81, P196, DOI 10.1016/j.jss.2007.05.006
   Krinke J., 2003, THESIS U PASSAU
   KRINKE J, 2003, ACM SIGSOFT S FDN SO, P178
   KRINKE J, P 3 IEEE INT WORKSH
   KULKARNI AR, 2003, SCAM, P98
   Li Z, 2009, PROC IEEE INT CONF S, P457, DOI 10.1109/ICSM.2009.5306275
   Millett L.I., 2000, International Journal on Software Tools for Technology Transfer (STTT), V2, P343
   Nanda M., 2000, SLICING CONCURRENT P, P180
   Peled D., 1993, Proceedings of the 5th International Conference on Computer Aided Verification, V697, P409
   QI X, 2006, IJCSNS INT J COMPUTE, P29
   Rakow A, 2008, LECT NOTES COMPUT SC, V4910, P436
   RANGANATH VP, 2007, INT J SOFTW TOOLS TE, P489
   SABOURI H, 2008, P FACS08 ELS ENTCS P
   Sirjani M, 2005, J UNIVERS COMPUT SCI, V11, P1695
   Sirjani M, 2005, J UNIVERS COMPUT SCI, V11, P1054
   Sirjani M, 2004, FUND INFORM, V63, P385
   Sirjani M, 2004, FOURTH INTERNATIONAL CONFERENCE ON APPLICATION OF CONCURRENCY TO SYSTEM DESIGN, PROCEEDINGS, P145, DOI 10.1109/CSD.2004.1309125
   Thrane C, 2008, 2008 ANNUAL IEEE STUDENT PAPER CONFERENCE, P27
   Wehrheim H, 2006, LECT NOTES COMPUT SC, V4260, P514
   Weiser Mark., 1981, Proceedings of the 5th International Conference on Software Engineering, P439
   ZHANG X, 2007, SOFTWARE PRACTICAL E, P935
NR 45
TC 4
Z9 4
U1 0
U2 4
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 1
PY 2010
VL 75
IS 10
SI SI
BP 811
EP 827
DI 10.1016/j.scico.2010.02.003
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 638SZ
UT WOS:000280917600002
DA 2024-07-18
ER

PT J
AU De Nicola, R
   Gorla, D
   Hansen, RR
   Nielson, F
   Nielson, HR
   Probst, CW
   Pugliese, R
AF De Nicola, Rocco
   Gorla, Daniele
   Hansen, Rene Rydhof
   Nielson, Flemming
   Nielson, Hanne Riis
   Probst, Christian W.
   Pugliese, Rosario
TI From Flow Logic to static type systems for coordination languages
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 10th International Conference on Coordination Models and Languages
   (COORDINATION 2008)
CY JUN 04-06, 2008
CL Oslo, NORWAY
DE Global computing; Coordination languages; Formal methods; Flow Logic;
   Type systems
ID ACCESS-CONTROL; SECURITY; EQUIVALENT; CALCULUS; AGENTS
AB Coordination languages are often used to describe open-ended systems. This makes it challenging to develop tools for guaranteeing the security of the coordinated systems and the correctness of their interaction. Successful approaches to this problem have been based on type systems with dynamic checks; therefore, the correctness properties cannot be statically enforced. By contrast, static analysis approaches based on Flow Logic usually guarantee properties statically. In this paper, we show how the insights from the Flow Logic approach can be used to construct a type system for statically ensuring secure access to tuple spaces and safe process migration for an extension of the language KLAIM. (C) 2009 Elsevier B.V. All rights reserved.
C1 [De Nicola, Rocco; Pugliese, Rosario] Univ Florence, Dipartimento Sistemi & Informat, I-50121 Florence, Italy.
   [Gorla, Daniele] Univ Roma La Sapienza, Dipartimento Informat, Rome, Italy.
   [Hansen, Rene Rydhof] Aalborg Univ, Dept Comp Sci, Aalborg, Denmark.
   [Nielson, Flemming; Nielson, Hanne Riis; Probst, Christian W.] Tech Univ Denmark, Lyngby, Denmark.
C3 University of Florence; Sapienza University Rome; Aalborg University;
   Technical University of Denmark
RP Pugliese, R (corresponding author), Univ Florence, Dipartimento Sistemi & Informat, I-50121 Florence, Italy.
EM rocco.denicola@unifi.it; gorla@di.uniroma1.it; rrh@cs.aau.dk;
   nielson@imm.dtu.dk; riis@imm.dtu.dk; probst@imm.dtu.dk;
   pugliese@dsi.unifi.it
RI Pugliese, Rosario/J-3685-2012; GORLA, DANIELE/E-5911-2017
OI Pugliese, Rosario/0000-0002-1419-1405; Nielson, Hanne
   Riis/0000-0002-2484-5580; Probst, Christian W/0000-0001-5089-9155;
   Nielson, Flemming/0000-0001-7362-6176; Hansen, Rene
   Rydhof/0000-0002-5688-6432; De Nicola, Rocco/0000-0003-4691-7570; GORLA,
   DANIELE/0000-0001-8859-9844
CR [Anonymous], 2006, COMPILERS PRINCIPLES
   Bodei C, 2001, INFORM COMPUT, V168, P68, DOI 10.1006/inco.2000.3020
   Bodei C, 2005, J COMPUT SECUR, V13, P347
   Braghin C, 2002, COMPUT LANG SYST STR, V28, P101, DOI 10.1016/S0096-0551(02)00009-7
   Buchholtz M., 2004, INT J INF SECUR, V2, P145, DOI DOI 10.1007/S10207-004-0036-X
   Bugliesi M, 2004, ACM T PROGR LANG SYS, V26, P57, DOI 10.1145/963778.963781
   Cardelli L, 2002, INFORM COMPUT, V177, P160, DOI 10.1006/inco.2001.3121
   CARDELLI L, 2000, LECT NOTES COMPUTER, V1872, P333
   Castagna G, 2005, INFORM COMPUT, V201, P1, DOI 10.1016/j.ic.2004.11.005
   De Nicola R, 1998, IEEE T SOFTWARE ENG, V24, P315, DOI 10.1109/32.685256
   De Nicola R, 2000, THEOR COMPUT SCI, V240, P215, DOI 10.1016/S0304-3975(99)00232-7
   Degano P, 2000, LECT NOTES COMPUT SC, V1961, P199
   GELERNTER D, 1985, ACM T PROGR LANG SYS, V7, P80, DOI 10.1145/2363.2433
   Gorla D, 2004, LECT NOTES COMPUT SC, V2802, P86
   GORLA D, J LOGIC ALG IN PRESS
   Hansen RR, 2006, FIRST INTERNATIONAL CONFERENCE ON AVAILABILITY, RELIABILITY AND SECURITY, PROCEEDINGS, P174, DOI 10.1109/ARES.2006.115
   Heintze N., 1995, Static Analysis. Second International Symposium, SAS'95. Proceedings, P189
   Hennessy M, 2002, INFORM COMPUT, V173, P82, DOI 10.1006/inco.2001.3089
   Laud P, 2006, THEOR COMPUT SCI, V364, P292, DOI 10.1016/j.tcs.2006.08.013
   Levi F, 2003, ACM T PROGR LANG SYS, V25, P1, DOI 10.1145/596980.596981
   Lhoussaine C, 2004, LECT NOTES COMPUT SC, V2986, P171
   Nanz S, 2006, THEOR COMPUT SCI, V367, P203, DOI 10.1016/j.tcs.2006.08.036
   Nielson F, 2004, LECT NOTES COMPUT SC, V2988, P251
   Nielson F., 2002, Nordic Journal of Computing, V9, P335
   Nielson F, 2003, SCI COMPUT PROGRAM, V47, P145, DOI 10.1016/S0167-6423(02)00131-4
   Nielson F, 2002, THEOR COMPUT SCI, V283, P381, DOI 10.1016/S0304-3975(01)00140-2
   Nielson F., 2005, PRINCIPLES PROGRAM A
   Nielson F, 2007, LECT NOTES COMPUT SC, V4444, P293
   Nielson HR, 2004, LECT NOTES ARTIF INT, V2946, P207
   Nielson HR, 2002, LECT NOTES COMPUT SC, V2566, P223
   Palsberg J, 1998, ACM T PROGR LANG SYS, V20, P1251, DOI 10.1145/295656.295662
   PALSBERG J, 1995, ACM T PROGR LANG SYS, V17, P576, DOI 10.1145/210184.210187
   Palsberg J, 2001, J FUNCT PROGRAM, V11, P263, DOI 10.1017/S095679680100394X
   Schneider S, 2000, VERHALTENSTHERAPIE, V10, P101, DOI 10.1159/000030724
   Udzir NI, 2007, SCI COMPUT PROGRAM, V64, P205, DOI 10.1016/j.scico.2006.06.005
NR 35
TC 7
Z9 7
U1 0
U2 8
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 1
PY 2010
VL 75
IS 6
SI SI
BP 376
EP 397
DI 10.1016/j.scico.2009.07.009
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 590MT
UT WOS:000277231300002
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Cimadamore, M
   Viroli, M
AF Cimadamore, Maurizio
   Viroli, Mirko
TI On the reification of Java wildcards
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Generic types; Wildcards; Java; Reification
AB Providing runtime information about generic types - that is, reifying generics - is a challenging problem studied in several research papers in the last years. This problem is not tackled in current version of the Java programming language (Java 6), which consequently suffers from serious safety and coherence problems. The quest for finding effective and efficient solutions to this problem is still open, and is further made more complicated by the new mechanism of wildcards introduced in Java J2SE 5.0: its reification aspects are currently unexplored and pose serious semantics and implementation issues.
   In this paper, we discuss an implementation support for wildcard types in Java. We first analyse the problem from an abstract viewpoint, discussing the issues that have to be faced in order to extend an existing reification technique so as to support wildcards, namely, subtyping, capture conversion and wildcards capture in method calls. Secondly, we present an implementation in the context of the EGO compiler. EGO is an approach for efficiently supporting runtime generics at compile-time: synthetic code is automatically added to the source code by the extended compiler, so as to create generic runtime type information on a by need basis, store it into object instances, and retrieve it when necessary in type-dependent operations. The solution discussed in this paper makes the EGO compiler the first reification approach entirely dealing with the present version of the Java programming language. (C) 2008 Elsevier B.V. All rights reserved.
C1 [Cimadamore, Maurizio; Viroli, Mirko] Univ Bologna DEIS, Alma Mater Studiorum, I-47023 Cesena, Italy.
C3 University of Bologna
RP Viroli, M (corresponding author), Univ Bologna DEIS, Alma Mater Studiorum, Via Venezia 52, I-47023 Cesena, Italy.
EM maurizio.cimadamore@unibo.it; mirko.viroli@unibo.it
OI Viroli, Mirko/0000-0003-2702-5702
CR AGESEN O, 1997, C OBJ OR PROGR SYST
   ALGIC S, 2008, VLDB J INT J VER LAR, V17, P847
   [Anonymous], JAVA LANGUAGE SPECIF
   Cameron Nicholas., 2007, Formal Techniques for Java-like Programs
   CARTWRIGHT C, 1998, C OBJ OR PROGR SYST
   CIMADAMORE M, 2007, P 2007 ACM S APPL CO
   Igarashi A, 2001, ACM T PROGR LANG SYS, V23, P396, DOI 10.1145/503502.503505
   IGARASHI A, 2001, 8 WORKSH FDN OBJ OR
   IGARASHI A, 2002, LNCS, V2347
   Igarashi A, 2006, ACM T PROGR LANG SYS, V28, P795, DOI 10.1145/1152649.1152650
   KAY M, 1995, C OBJ OR PROGR SYST
   KENNEDY A, 2007, FOOL WOOD
   KENNEDY A, 2006, LNCS, V4067
   MEYERS AC, 1997, S PRINC PROGR LANG A
   *MICR, 2003, C LANG SPEC 2 0 TECH
   MITCHELL JC, 1988, ACM T PROGR LANG SYS, V10, P470, DOI 10.1145/44501.45065
   ODERSKY M, 2007, SCALA LANGUAGE SPECI
   ODERSKY M, 1997, CIS97016 U S AUSTR
   ODERSKY M, 1998, C OBJ OR PROGR SYST
   Sasitorn J., 2006, P 2006 ACM S APPL CO
   *SLASHD, SLASHD SIT PREV JAV
   SOLORZANO JH, 1998, C OBJ OR PROGR SYST
   *SUN MICR, 6207386 SUN MICR
   *SUN MICR, 6558545 SUN MICR
   *SUN MICR, 4929881 SUN MICR
   SYME D, 2001, PROGRAMMING LANGUAGE
   THORUP KK, 1999, LNCS, V1628
   TORGERSEN M, 2005, P FOOL 12 ACM SCH IN
   Torgersen M., 2004, J OBJECT TECHNOLOGY, V11, P1
   TORGERSEN M, 2004, LNCS, V1445
   Viroli M, 2000, ACM SIGPLAN NOTICES, V35, P146, DOI 10.1145/354222.353182
   VIROLI M, 2002, DEISLIA00002 LIA U B
   Viroli M, 2005, ELECTRON NOTES THEOR, V138, P95, DOI 10.1016/j.entcs.2005.09.013
   Viroli Mirko, 2003, COMPUTER J, V46
   VOROLI M, 2005, J OBJECT TECHNOLOGY, V4
   YU D, 2004, P 31 ACM SIGPLAN SIG
NR 36
TC 0
Z9 0
U1 1
U2 2
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 1
PY 2008
VL 73
IS 2-3
BP 59
EP 75
DI 10.1016/j.scico.2008.06.005
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 369MW
UT WOS:000260699600001
DA 2024-07-18
ER

PT J
AU Peña, J
   Hinchey, MG
   Resinas, M
   Sterritt, R
   Rash, JL
AF Pena, Joaquin
   Hinchey, Michael G.
   Resinas, Manuel
   Sterritt, Roy
   Rash, James L.
TI Designing and managing evolving systems using a MAS product line
   approach
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 5th International Workshop on System/Software Architectures (IWSSA 2006)
CY JUN 27, 2006
CL Las Vegas, NV
DE multiagent systems product lines; enterprise architecture evolution;
   swarm-based systems
AB We view an evolutionary system as being a software product line. The core architecture is the unchanging part of the system, and each version of the system may be viewed as a product from the product line. Each "product" may be described as the core architecture with some agent-based additions. The result is a multiagent system software product line. We describe an approach to such a software product line-based approach using the MaCMAS agent-oriented methodology. The approach scales to enterprise architectures as a multiagent system is an appropriate means of representing a changing enterprise architecture and the interaction between components in it. In addition, we reduce the gap between the enterprise architecture and the software architecture. (C) 2007 Elsevier B.V. All rights reserved.
C1 Univ Seville, ETSI Informat, Dpto Lenguajes & Sistemas Informat, E-41012 Seville, Spain.
   NASA, Goddard Space Flight Ctr, Informat Syst Div, Greenbelt, MD 20771 USA.
   Univ Ulster, Sch Comp & Math, Fac Engn, Jordanstown BT37 0QB, North Ireland.
C3 University of Sevilla; National Aeronautics & Space Administration
   (NASA); NASA Goddard Space Flight Center; Ulster University
RP Peña, J (corresponding author), Univ Seville, ETSI Informat, Dpto Lenguajes & Sistemas Informat, Avda Reina Mercedes S-N, E-41012 Seville, Spain.
EM joaquinp@us.es; Michael.G.Hinchey@nasa.gov; resinas@us.es;
   r.sterritt@ulster.ac.uk; James.L.Rash@nasa.gov
RI Siles, Joaquin Peña/ABH-8077-2020; Peña, Joaquin/K-8217-2012; Resinas,
   Manuel/B-3063-2008
OI Siles, Joaquin Peña/0000-0001-9216-9695; Resinas,
   Manuel/0000-0003-1575-406X; Hinchey, Mike/0000-0001-5110-561X; Sterritt,
   Roy/0000-0002-4035-9363
CR [Anonymous], 2000, Generative programming: methods, tools, and applications
   Brueckner S.A., 2003, AAMAS '03: Proceedings of the second international joint conference on autonomous agents and multiagent systems, P781
   D'Souza DesmondF., 1999, OBJECTS COMPONENTS F
   Jansen AGJ, 2004, IEE P-SOFTW, V151, P187, DOI 10.1049/ip-sen:20040922
   Kang Kyo, 1990, CMUSEI90TR021 SOFTW
   Kendall EA, 2000, IEEE CONCURR, V8, P34, DOI 10.1109/4434.846192
   LISKOV B, 1993, SIGPLAN NOTICES, V28, P16, DOI 10.1145/167962.165863
   ODELL J, 2003, FIPA FIPA AGENT UML
   Odell JJ, 2003, LECT NOTES COMPUT SC, V2603, P27
   Parunak H. V. D., 2001, Proceedings of the Fifth International Conference on Autonomous Agents, P100, DOI 10.1145/375735.376008
   PENA J, 2005, THESIS USEVILLE
   PENA J, 2002, P 2 INT WORKSH FORM, P79
   Peña J, 2007, LECT NOTES COMPUT SC, V4405, P208
   Peña J, 2006, COMMUN ACM, V49, P82, DOI 10.1145/1183236.1183272
   POHL K, 2005, SOFTWARE PRODUCT SEP
   Reenskaug Trygve., 1996, WORKING OBJECTS OORA
   ROUF C, 2004, P 1 INT S LEV APP FO
   Rouff C. A., 2006, International Journal on Software Tools for Technology Transfer, V8, P587, DOI 10.1007/s10009-006-0027-5
   ROUFF CA, 2005, TM2005212779 NASA GO
   Smaragdakis Y, 2002, ACM T SOFTW ENG METH, V11, P215, DOI 10.1145/505145.505148
   Zambonelli F, 2003, ACM T SOFTW ENG METH, V12, P317, DOI 10.1145/958961.958963
NR 21
TC 9
Z9 9
U1 0
U2 11
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD APR 15
PY 2007
VL 66
IS 1
BP 71
EP 86
DI 10.1016/j.scico.2006.10.007
PG 16
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 168GO
UT WOS:000246511500006
OA Green Published, Green Submitted
DA 2024-07-18
ER

PT J
AU Russello, G
   Chaudron, MRV
   van Steen, M
   Bokharouss, I
AF Russello, Giovanni
   Chaudron, Michel R. V.
   van Steen, Maarten
   Bokharouss, Ibrahim
TI An experimental evaluation of self-managing availability in shared data
   spaces
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 7th International Conference on Coordination Models and Languages
   (COORDINATION 2005)
CY APR 20-23, 2005
CL Univ Namur, Inst Informat, Namur, BELGIUM
HO Univ Namur, Inst Informat
DE shared data spaces; fault tolerances availability; self-management;
   distributed systems
ID COORDINATION
AB With its decoupling of processes in space and time, the shared data space model has proven to be a well-suited solution for developing distributed component-based systems. However, as in many distributed applications, functional and extra-functional aspects are still interwoven in components. In this paper, we address how shared data spaces can support the separation of concerns. In particular, we present a solution that allows developers to merely specify availability requirements for data tuples, while the underlying middleware evaluates various distribution and replication policies in order to select the one that meets these requirements best. Moreover, in our approach, the middleware continuously monitors the behavior of application and system components, and switches to different policies if this would lead to better results. We describe our approach, along with the design of a prototype implementation and its quantitative evaluation. (c) 2006 Published by Elsevier B.V.
C1 Eindhoven Univ Technol, NL-5600 MB Eindhoven, Netherlands.
   Vrije Univ Amsterdam, NL-1081 HV Amsterdam, Netherlands.
C3 Eindhoven University of Technology; Vrije Universiteit Amsterdam
RP Russello, G (corresponding author), Univ London Imperial Coll Sci Technol & Med, Dept Comp, S Kensington Campus,180 Queens Gate, London SW7 2RH, England.
EM russello@doc.ic.ac.uk
OI Chaudron, Michel/0000-0001-7517-6666; van Steen,
   Maarten/0000-0002-5113-2746
CR AHUJA S, 1988, IEEE T COMPUT, V37, P921, DOI 10.1109/12.2244
   [Anonymous], 1999, JavaSpaces Principles, Patterns, and Practice
   BAKKEN DE, 1994, IEEE T PARALLEL DIST
   Busi N, 2004, INT J COOP INF SYST, V13, P63, DOI 10.1142/S0218843004000894
   COUDERC P, 2003, P 36 HAW INT C SYST
   Curino C, 2005, THIRD IEEE INTERNATIONAL CONFERENCE ON PERVASIVE COMPUTING AND COMMUNICATIONS, PROCEEDINGS, P61, DOI 10.1109/PERCOM.2005.48
   GELERNTER D, 1985, ACM T PROGR LANG SYS, V7, P80, DOI 10.1145/2363.2433
   *GIGASPACES, 2005, GIGASPACES ENT APPL
   JEONG K, 1994, 13TH SYMPOSIUM ON RELIABLE DISTRIBUTED SYSTEMS, PROCEEDINGS, P96, DOI 10.1109/RELDIS.1994.336905
   KAASHOEK MF, 1992, IR295 VRIJ U AMST DE
   KAMINSKI D, 1994, THESIS YALE U
   Mamei M, 2005, LECT NOTES COMPUT SC, V3460, P307
   Mamei M, 2004, SECOND IEEE ANNUAL CONFERENCE ON PERVASIVE COMPUTING AND COMMUNICATIONS, PROCEEDINGS, P263, DOI 10.1109/PERCOM.2004.1276864
   Murphy AL, 2001, INT CON DISTR COMP S, P524, DOI 10.1109/ICDSC.2001.918983
   Picco G. P., 1999, Proceedings of the 1999 International Conference on Software Engineering (IEEE Cat. No.99CB37002), P368, DOI 10.1109/ICSE.1999.841027
   Pierre G, 2002, IEEE T COMPUT, V51, P637, DOI 10.1109/TC.2002.1009149
   Rowstron AIT, 2003, SCI COMPUT PROGRAM, V46, P137, DOI 10.1016/S0167-6423(02)00089-8
   Russello G, 2005, LECT NOTES COMPUT SC, V3454, P109
   Russello G, 2004, LECT NOTES COMPUT SC, V3149, P579
   RUSSELLO G, 2004, P INT S DISTR OBJ AP, V3291, P1225
   RUSSELLO G, 2003, P INT C PAR DISTR PR
   SPOOR R, 2004, THESIS EINDHOVEN U T
   Tolksdorf R, 2000, PROCEEDINGS OF THE INTERNATIONAL CONFERENCE ON PARALLEL AND DISTRIBUTED PROCESSING TECHNIQUES AND APPLICATIONS, VOLS I-V, P793
   TOLKSDORF RMR, 2003, P S APPL COMP NEW YO, P375
   TOLKSORF R, 2003, LECT NOTES ARTIF INT, V3701, P49
   Wyckoff P, 1998, IBM SYST J, V37, P454, DOI 10.1147/sj.373.0454
NR 26
TC 6
Z9 7
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 15
PY 2007
VL 64
IS 2
BP 246
EP 262
DI 10.1016/j.scico.2006.06.007
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 121IA
UT WOS:000243150100005
DA 2024-07-18
ER

PT J
AU Johnstone, A
   Scott, E
   Economopoulos, G
AF Johnstone, Adrian
   Scott, Elizabeth
   Economopoulos, Giorgios
TI Evaluating GLR parsing algorithms
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 4th Workshop on Language Descriptions,Tools and Applications (LDTA 04)
CY 2004
CL Barcelona, SPAIN
DE GLR parsing; grammar types; context free languages; LR tables
ID LANGUAGES
AB We describe the behaviour of three variants of GLR parsing: (i) Farshi's original correction to Tomita's non-general algorithm; (ii) the Right Nulled GLR algorithm which provides a more efficient generalisation of Tomita and (iii) the Binary Right Nulled GLR algorithm, on three types of LR table. We present a guide to the parse-time behaviour of these algorithms which illustrates the inefficiencies in conventional Farshi-style GLR parsing. We also describe the tool GTB (Grammar Tool Box) which provides a platform for comparative studies of parsing algorithms; and use GTB to exercise the three GLR algorithms running with LR(0), SLR(1) and LR(1) tables for ANSI-C, ISO-Pascal and IBM VS-COBOL. We give results showing the size of the structures constructed by these parsers and the amount of searching required during the parse, which abstracts their runtime. (c) 2006 Elsevier B.V. All rights reserved.
C1 Univ London, Dept Comp Sci, Egham, Surrey, England.
C3 University of London; Royal Holloway University London
RP Johnstone, A (corresponding author), Univ London, Dept Comp Sci, Egham, Surrey, England.
EM a.johnstone@rhul.ac.uk; e.scott@rhul.ac.uk
CR Aho A.V., 1986, COMPILERS PRINCIPLES
   [Anonymous], GEN LR PARSING
   [Anonymous], 1986, Efficient parsing for natural language
   Aycock J, 1999, LECT NOTES COMPUT SC, V1575, P32
   BREUER PT, 1995, SOFTWARE PRACT EXPER, V25, P1263, DOI 10.1002/spe.4380251106
   Cameron R. D., 1993, ACM Letters on Programming Languages and Systems, V2, P85, DOI 10.1145/176454.176490
   DEREMER FL, 1971, COMMUN ACM, V14, P453, DOI 10.1145/362619.362625
   EARLEY J, 1970, COMMUN ACM, V13, P94, DOI 10.1145/362007.362035
   GRUNE D, 1990, PARSING TECHNIQES PR
   Johnson Stephen C., 1975, 32 AT T BELL LAB
   Johnstone A., 1999, Proceedings IEEE International Conference on Software Maintenance - 1999 (ICSM'99). `Software Maintenance for Business Change' (Cat. No.99CB36360), P316, DOI 10.1109/ICSM.1999.792629
   Johnstone A, 2004, LECT NOTES COMPUT SC, V2985, P89
   Johnstone A, 1998, LECT NOTES COMPUT SC, V1383, P16
   Kernighan B.W., 1988, The C Programming Language
   KLUSENER S, 2003, P INT C SOFTW MAINT
   KNUTH DE, 1965, INFORM CONTROL, V8, P607, DOI 10.1016/S0019-9958(65)90426-2
   Lämmel R, 2001, SOFTWARE PRACT EXPER, V31, P1395, DOI 10.1002/spe.423
   LAMMEL R, 2001, P 1 WORKSH LANG DESC, V44
   Parr T., 1996, Language translation using PCCTS and C++
   REKERS J, 1992, THESIS U AMSTERDAM
   ROBERT G, 2005, THESIS U LONDON
   SANDER G, 1995, VCG VISUALISATION CO
   Scott E, 2005, COMPUT J, V48, P565, DOI 10.1093/comjnl/bxh102
   SCOTT E, 2000, TR0012 U LOND COMP S
   SCOTT E, IN PRESS ACM T PROGR
   SCOTT EA, 2003, TR0306 U LOND COMP S
   Stroustrup B., 1994, The Design and Evolution of C++
   Van den Brand MGJ, 2002, ACM T PROGR LANG SYS, V24, P334, DOI 10.1145/567097.567099
   Visser Eelco, 1997, Syntax Definition for Language Prototyping
   YOUNGER DH, 1967, INFORM CONTROL, V10, P189, DOI 10.1016/S0019-9958(67)80007-X
NR 30
TC 7
Z9 10
U1 0
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD AUG
PY 2006
VL 61
IS 3
BP 228
EP 244
DI 10.1016/j.scico.2006.04.004
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 055UC
UT WOS:000238475000004
DA 2024-07-18
ER

PT J
AU van den Brand, M
   Iversen, J
   Mosses, PD
AF van den Brand, Mark
   Iversen, Jorgen
   Mosses, Peter D.
TI An action environment
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 4th Workshop on Language Descriptions,Tools and Applications (LDTA 04)
CY 2004
CL Barcelona, SPAIN
DE ASF plus SDF; ASDF; action semantics; modularity; reuse; language
   environment
ID PROGRAMMING-LANGUAGES; ACTION-SEMANTICS
AB Some basic programming constructs (e.g., conditional statements) are found in many different programming languages, and can often be included without change when a new language is designed. When writing a semantic description of a language, however, it is usually not possible to reuse parts of previous descriptions without change. This paper introduces a new Action Semantic Description Formalism, ASDF, which has been designed specifically for giving reusable action semantic descriptions of individual language constructs. An initial case study in the use of ASDF has already provided reusable descriptions of all the basic constructs underlying Core ML. The paper also describes the Action Environment, a new environment supporting use and validation of ASDF descriptions. The Action Environment has been implemented on top of the ASF+SDF Meta-Environment, exploiting recent advances in techniques for integration of different formalisms, and inheriting all the main features of the Meta-Environment. (c) 2006 Published by Elsevier B.V.
C1 TUe, Software Engn & Technol, NL-5612 AZ Eindhoven, Netherlands.
   Systemat Software Engn AS, DK-8000 Aarhus C, Denmark.
   Univ Coll Swansea, Dept Comp Sci, Swansea SA2 8PP, W Glam, Wales.
C3 Eindhoven University of Technology; Swansea University
RP van den Brand, M (corresponding author), TUe, Software Engn & Technol, Dolech 2, NL-5612 AZ Eindhoven, Netherlands.
EM m.g.j.v.d.brand@tue.nl; jbiversen@gmail.com; p.d.mosses@swan.ac.uk
RI Mosses, Peter/A-8206-2019
OI Mosses, Peter/0000-0002-5826-7520; van den Brand,
   Mark/0000-0003-3529-6182
CR Anlauff M, 2000, LECT NOTES COMPUT SC, V1755, P40
   Bergstra JA, 1998, SCI COMPUT PROGRAM, V31, P205, DOI 10.1016/S0167-6423(97)00021-X
   BERGSTRA JA, 1989, ACM PRESS FRONTIER S
   BROWN D, 1999, AS 99 U AARH DEPT CO, P43
   CARVILHE C, 2002, AS 2002 U AARH DEPT, P45
   Doh KG, 2003, SCI COMPUT PROGRAM, V47, P3, DOI 10.1016/S0167-6423(02)00107-7
   Heering J, 2000, ACM SIGPLAN NOTICES, V35, P39, DOI 10.1145/351159.351173
   HEERING J, 1989, SIGPLAN NOTICES, V24, P43, DOI 10.1145/71605.71607
   Iversen J, 2005, IEE PROC-SOFTW, V152, P79, DOI 10.1049/ip-sen:20041182
   Kuiper M, 1998, LECT NOTES COMPUT SC, V1383, P298
   LASSEN SB, 2000, AS 2000 3 INT WORKSH, P19
   LIANG S, 1996, LECT NOTES COMPUTER, V1058, P219
   MOSSES PD, 1999, RS9956 BRICS U AARH
   Mosses PD., 1992, CAMBRIDGE TRACTS THE
   MOSSES PD, 2002, ENTCS, V65
   MOURA H, 2002, AS 2002, P1
   Saraiva J., 1999, P 2 WORKSHOP ATTRIBU, P185
   van den Brand M, 2003, LECT NOTES COMPUT SC, V2706, P424
   van den Brand MGJ, 2000, SOFTWARE PRACT EXPER, V30, P259, DOI 10.1002/(SICI)1097-024X(200003)30:3<259::AID-SPE298>3.0.CO;2-Y
   van Deursen A., 1994, THESIS U AMSTERDAM
   van Deursen A., 1996, AMAST SERIES COMPUTI, V5
   VANDENBRAND MGJ, 2001, LECT NOTES COMPUTER, V2027, P365
   VANDENBRAND MGJ, 2004, ENTCS, V110, P149
   WATT DA, 1999, AS 99 2 INT WORKSH A, P155
NR 24
TC 11
Z9 12
U1 0
U2 6
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD AUG
PY 2006
VL 61
IS 3
BP 245
EP 264
DI 10.1016/j.scico.2006.04.005
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 055UC
UT WOS:000238475000005
OA hybrid
DA 2024-07-18
ER

PT J
AU Burgess, M
AF Burgess, M
TI Probabilistic anomaly detection in distributed computer networks
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE machine learning; anomaly detection; data-mining
AB Distributed host-based anomaly detection has not yet proven practical due to the excessive computational overhead during training and detection. This paper considers an efficient algorithm for detecting resource anomalies in event streams with either Poisson or long tailed arrival processes. A form of distributed, lazy evaluation is presented, which uses a model for human-computer interaction based on two-dimensional time and a geometrically declining memory to yield orders of magnitude improvements in memory requirements. A three-tiered probabilistic method of classifying anomalous behaviour is discussed. This leads to a computationally and memory economic means of finding probable faults amongst the symptoms of network and system behaviour. (c) 2005 Elsevier B.V. All rights reserved.
C1 Oslo Univ Coll, N-0254 Oslo, Norway.
C3 Oslo Metropolitan University (OsloMet)
RP Oslo Univ Coll, Cort Adelers Gate 30, N-0254 Oslo, Norway.
EM Mark.Burgess@iu.hio.no
CR Al-Shaer ES, 2003, INT FED INFO PROC, V118, P17, DOI 10.1109/INM.2003.1194157
   [Anonymous], P 4 INT WORKSH SYNTH
   [Anonymous], 1997, Elements of the Theory of Computation
   [Anonymous], 1998, Biological Sequence Analysis: Probabilistic Models of Proteins and Nucleic Acids
   [Anonymous], 1997, Proceedings of the 20th national information systems security conference
   BARFORD P, 2002, SIGNAL ANAL NETWORK
   Begnum K, 2005, MACH LEARN, V58, P217, DOI 10.1007/s10994-005-5827-4
   BEGNUM K, 2003, P VIII IFIP IEEE IM
   Box GE, 1994, TIME SERIES ANAL FOR
   BUNKE H, 1995, IEEE T SYST MAN CYB, V25, P202, DOI 10.1109/21.362950
   Burgess M, 1998, PROCEEDINGS OF THE TWELFTH SYSTEMS ADMINISTRATION CONFERENCE (LISA XII), P283
   Burgess M, 1998, SOFTWARE PRACT EXPER, V28, P1519, DOI 10.1002/(SICI)1097-024X(19981210)28:14<1519::AID-SPE213>3.0.CO;2-N
   Burgess M, 2002, LECT NOTES COMPUT SC, V2506, P169
   Burgess M, 2003, SCI COMPUT PROGRAM, V49, P1, DOI 10.1016/j.scico.2003.08.001
   Burgess M, 2002, ACM T COMPUT SYST, V20, P125, DOI 10.1145/507052.507054
   BURGESS M, 1995, COMPUT SYST, V8, P309
   Burgess M, 2001, INT J MOD PHYS C, V12, P759, DOI 10.1142/S012918310100195X
   Burgess M., 2004, International Journal of Information Security, V3, P70, DOI DOI 10.1007/S10207-004-0044-X
   BURGESS M, 1993, CFENGINE
   BURGESS M, 2004, ANAL NETWORK SYSTEM
   Damianou N., 2000, Ponder: A language for specifying security and management policies for distributed systems
   DENNING DE, 1987, IEEE T SOFTWARE ENG, V13, P222, DOI 10.1109/TSE.1987.232894
   DHAESELEER PD, 1996, 9 IEEE COMPUTER SECU
   Diao YX, 2002, LECT NOTES COMPUT SC, V2506, P42
   Duda R. O., 2001, PATTERN CLASSIFICATI
   Forrest S, 1997, COMMUN ACM, V40, P88, DOI 10.1145/262793.262811
   Forrest S, 1996, P IEEE S SECUR PRIV, P120, DOI 10.1109/SECPRI.1996.502675
   FREEMAN J.A., 1991, Neural Networks: Algorithms, Applications, and Programming Techniques
   Grimmett G., 2001, Probability and random processes, V3rd edn
   HAESELEEER PD, 1996, P 1996 IEEE S COMP S
   HAN SH, 2002, IFIP IEEE 13 INT WOR, P16
   Hofmeyr S. A., 1998, Journal of Computer Security, V6, P151
   HOOGENBOOM P, 1993, PROCEEDINGS OF THE SUMMER 1993 USENIX CONFERENCE, P15
   JAVITZ HS, 1991, P IEEE S SEC PRIV MA
   Kruegel Christopher., 2003, P 10 ACM C COMPUTER, P251
   LANE T, 2000, THESIS PURDUE U
   LELAND WE, 1994, IEEE ACM T NETWORK, V2, P1, DOI 10.1109/90.282603
   MATZINGER P, 1994, ANNU REV IMMUNOL, V12, P991, DOI 10.1146/annurev.iy.12.040194.005015
   McComb W.D., 2003, Renormalization Methods: A Guide for Beginners
   NEUMANN PG, 2000, EXPERIENCE EMERALD, P73
   Oommen BJ, 1998, PATTERN RECOGN, V31, P1159, DOI 10.1016/S0031-3203(97)00124-6
   PAXSON V, 1995, IEEE ACM T NETWORK, V3, P226, DOI 10.1109/90.392383
   PAXSON V, 1998, P 7 SEC S USENIX ASS
   Pearl J., 1988, PROBABILISTIC REASON
   Ranum MJ, 1997, PROCEEDINGS OF THE ELEVENTH SYSTEMS ADMINISTRATION CONFERENCE (LISA XI), P1
   Ripley B.D., 1996, Pattern Recognition and Neural Network, DOI [10.1017/CBO9780511812651, DOI 10.1017/CBO9780511812651]
   Roesch M., Snort, intrusion detection system
   Sato K-I., 1999, Levy Processes and Infinitely Divisible Distributions
   Sekar R., 1999, P WORKSH INTR DET NE
   Seltzer M., 1997, P 6 WORKSH HOT TOP O
   Shannon C. E., 1949, The Mathematical Theory of Communication
   Sloman M., 1994, Journal of Network and Systems Management, V2, P333, DOI 10.1007/BF02283186
   Somayaji A, 2000, USENIX ASSOCIATION PROCEEDINGS OF THE NINTH USENIX SECURITY SYMPOSIUM, P185
   SOMAYAJI A, 1997, NEW SEC PAR WORKSH, P75
   Steinder M, 2004, SCI COMPUT PROGRAM, V53, P165, DOI 10.1016/j.scico.2004.01.010
   STEINDER M, 2002, IFIP IEEE 13 INT WOR, P195
NR 56
TC 21
Z9 27
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR
PY 2006
VL 60
IS 1
BP 1
EP 26
DI 10.1016/j.scico.2005.06.001
PG 26
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 008MV
UT WOS:000235045800001
OA Bronze
DA 2024-07-18
ER

PT J
AU Bagnara, R
   Hill, PM
   Ricci, E
   Zaffanella, E
AF Bagnara, R
   Hill, PM
   Ricci, E
   Zaffanella, E
TI Precise widening operators for convex polyhedra
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 10th International Static Analysis Symposium (SAS 2003)
CY JUN 11-13, 2003
CL SAN DIEGO, CA
SP ACM
DE abstract interpretation; widening operators; convex polyhedra
ID MODEL-CHECKING; SYSTEMS
AB In the context of static analysis via abstract interpretation, convex polyhedra constitute the most used abstract domain among those capturing numerical relational information. Since the domain of convex polyhedra admits infinite ascending chains, it has to be used in conjunction with appropriate mechanisms for enforcing and accelerating the convergence of fixpoint computations. Widening operators provide a simple and general characterization for such mechanisms. For the domain of convex polyhedra, the original widening operator proposed by Cousot and Halbwachs amply deserves the name of standard widening since most analysis and verification tools that employ convex polyhedra also employ that operator. Nonetheless, there is an unfulfilled demand for more precise widening operators. In this paper, after a formal introduction to the standard widening where we clarify some aspects that are often overlooked, we embark on the challenging task of improving on it. We present a framework for the systematic definition of new widening operators that are never less precise than a given widening. The framework is then instantiated on the domain of convex polyhedra so as to obtain a new widening operator that improves on the standard widening by combining several heuristics. A preliminary experimental evaluation has yielded promising results. We also suggest an improvement to the well-known widening delay technique that allows one to gain precision while preserving its overall simplicity. (c) 2005 Elsevier B.V. All rights reserved.
C1 Univ Parma, Dept Math, Parma, Italy.
   Univ Leeds, Sch Comp, Leeds, W Yorkshire, England.
C3 University of Parma; University of Leeds
RP Univ Parma, Dept Math, Parma, Italy.
EM bagnara@cs.unipr.it; hill@comp.leeds.ac.uk; zaffanella@cs.unipr.it
RI Bagnara, Roberto/B-2420-2017
OI Bagnara, Roberto/0000-0002-6163-6278; Zaffanella,
   Enea/0000-0001-6388-2053
CR [Anonymous], LECT NOTES COMPUT SC
   [Anonymous], LNCS
   Bagnara R, 2002, LECT NOTES COMPUT SC, V2477, P213
   Bagnara R, 2003, LECT NOTES COMPUT SC, V2694, P337
   Benoy F, 1997, LECT NOTES COMPUT SC, V1207, P204
   Besson F, 1999, LECT NOTES COMPUT SC, V1694, P51
   BOURDONCLE F, 1993, LECT NOTES COMPUTER, V735, P128
   Bultan T, 1999, ACM T PROGR LANG SYS, V21, P747, DOI 10.1145/325478.325480
   Chernikova N.V., 1965, USSR Comput. Math. Math. Phys, V5, P228, DOI [10.1016/0041-5553(65)90045-5, DOI 10.1016/0041-5553(65)90045-5]
   Chernikova N. V., 1964, USSR COMP MATH MATH, V4, P151
   Chernikova NV, 1968, USSR COMP MATH MATH, V8, P282, DOI DOI 10.1016/0041-5553(68)90115-8
   COLON M, 2001, LNCS, V2031, P67, DOI DOI 10.1007/3-540-45319-96
   Cormen T.H., 1990, Introduction to Algorithms
   Cousot P., 1992, Journal of Logic and Computation, V2, P511, DOI 10.1093/logcom/2.4.511
   Cousot P., 1981, Program flow analysis. Theory and applications, P303
   COUSOT P, **DROPPED REF**
   Cousot Patrick, 1977, P 4 ACM S PRINC PROG, P238, DOI [10.1145/512950.512973, DOI 10.1145/512950.512973]
   Cousot Patrick, 1976, P 2 INT S PROGRAMMIN
   Delzanno G, 1999, LECT NOTES COMPUT SC, V1579, P223
   DERSHOWITZ N, 1979, COMMUN ACM, V22, P465, DOI 10.1145/359138.359142
   Halbwachs N, 1997, FORM METHOD SYST DES, V11, P157, DOI 10.1023/A:1008678014487
   HALBWACHS N, 1993, LNCS, V697, P333, DOI DOI 10.1007/3-540-56922-7_28
   Henzinger TA, 2001, IEEE DECIS CONTR P, P2887, DOI 10.1109/CDC.2001.980714
   Henzinger TA, 1995, LECT NOTES COMPUT SC, V999, P252
   HENZINGER TA, 1997, SOFTWARE TOOLS TECHN, V1, P110
   LEVERGE H, 1992, 635 IRISA
   Mannessier L, 1999, TRANSFUS CLIN BIOL, V6, P174, DOI 10.1016/S1246-7820(99)80022-6
   Motzkin T., 1953, CONTRIBUTIONS THEORY, V2, P51
   PUGH W, 1992, COMMUN ACM, V35, P102, DOI 10.1145/135226.135233
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
NR 38
TC 54
Z9 55
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT
PY 2005
VL 58
IS 1-2
BP 28
EP 56
DI 10.1016/j.scico.2005.02.003
PG 29
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 968PY
UT WOS:000232175700003
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Veerman, N
AF Veerman, N
TI Towards lightweight checks for mass maintenance transformations
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE mass maintenance; transformations; lightweight checks
AB We propose a lightweight, practical approach to check mass maintenance transformations. We present checks for both transformation tools and transformed source code, and illustrate them using examples of real-world transformations. Our approach is not a fully fledged, formal one but provides circumstantial evidence for transformation correctness, and has been applied to the mass maintenance of industrial Cobol systems. (c) 2005 Elsevier B.V. All rights
C1 Free Univ Amsterdam, Dept Comp Sci, NL-1081 HV Amsterdam, Netherlands.
C3 Vrije Universiteit Amsterdam
RP Free Univ Amsterdam, Dept Comp Sci, De Boelelaan 1081A, NL-1081 HV Amsterdam, Netherlands.
EM nveerman@cs.vu.nl
CR [Anonymous], ELECT NOTES THEORETI
   Baeten J.C.M., 1990, Cambridge Tracts in Theoretical Computer Science, V18
   BAETEN JCM, 1995, HDB LOG COMP SCI, V4, P149
   BAUMANN P, 1993, 9339 U ZUR
   Bergstra J.A., 1989, ALGEBRAIC SPECIFICAT, P1
   BOYLE J, 1998, J AUTOMATED SOFTWARE, V5, P321
   DAMASEVICIUS R, 2002, INFORMATION TECHNOLO, V22, P39
   Faust D, 2003, SOFTWARE PRACT EXPER, V33, P933, DOI 10.1002/spe.530
   FERNANDEZ JC, 1996, LECT NOTES COMPUTER, V1102, P437
   FIELDHOUSE J.D., 1999, PROPOSAL PREDICT NOI, P1
   FOKKINNK W, 2000, INTRO PROCESS ALGEBR
   HEERING J, 1989, SIGPLAN NOTICES, V24, P43, DOI 10.1145/71605.71607
   INCE DC, 1987, COMPUT J, V30, P63, DOI 10.1093/comjnl/30.1.63
   Jones C., 1986, PROGRAMMING PRODUCTI
   JONES C, 1998, YEAR 2000 SOFTWARE P
   Klop J.W., 1992, HDB LOGIC COMPUTER S, VII, P1
   Klusener AS, 2005, SCI COMPUT PROGRAM, V54, P143, DOI 10.1016/j.scico.2004.03.012
   KONTOGIANNIS K, 1998, P CASCON98
   Lämmel R, 2001, SOFTWARE PRACT EXPER, V31, P1395, DOI 10.1002/spe.423
   Lämmel R, 2001, IEEE SOFTWARE, V18, P78, DOI 10.1109/52.965809
   LAMMEL R, 2003, DRAFT           1024
   LAMMEL R, 1999, VS COBOL 2 GRAMMAR V
   MAURER P, 2001, IEEE SOFTWARE, P78
   PARTSCH H, 1990, TEXT MONOGRAPHS COMP
   Sellink A, 2002, SCI COMPUT PROGRAM, V45, P193, DOI 10.1016/S0167-6423(02)00061-8
   VANDENBRAND MGJ, 2001, LECT NOTES COMPUTER, V2027, P365
   VanGlabbeek RJ, 1996, J ACM, V43, P555, DOI 10.1145/233551.233556
   Veerman N, 2004, J SOFTW MAINT EVOL-R, V16, P219, DOI 10.1002/smr.295
   Verhoef C, 2000, ANN SOFTW ENG, V9, P315, DOI 10.1023/A:1018941228255
   Ward M. P., 1999, Proceedings IEEE International Conference on Software Maintenance - 1999 (ICSM'99). `Software Maintenance for Business Change' (Cat. No.99CB36360), P67, DOI 10.1109/ICSM.1999.792571
   Ward MP, 2004, SCI COMPUT PROGRAM, V52, P213, DOI 10.1016/j.scico.2004.03.007
   WINTER VL, 1994, PROVING CORRECTNESS
NR 32
TC 6
Z9 6
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD AUG
PY 2005
VL 57
IS 2
BP 129
EP 163
DI 10.1016/j.scico.2005.01.001
PG 35
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 949PY
UT WOS:000230801800001
OA Bronze
DA 2024-07-18
ER

PT J
AU Scheben, U
AF Scheben, U
TI Hierarchical composition of industrial components
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE component; component model; COTS; hierarchical composition; component
   specification; component reengineering; typing of components; services;
   plugs; constraints
AB In this paper we focus on the hierarchical composition of instances of arbitrary industrial component models yielding new (compound) components with specified capabilities and requirements which can themselves be composed to yield higher level components. For this purpose special component inter-faces and component implementations are defined which ensure a smooth integration of industrial components. The component implementations of compound components enable a late binding by referring to enclosed component instances only by their component interfaces. But also explicit bindings between component interfaces and component implementations can be defined. A type system for components is introduced enabling a formal definition of exchangeability and inter-operability of components. Using this type system, tools are able to decide which components may be exchanged by others and which components fit together. They can also support the creation of new components from existing ones by checking a new assembly for consistency. (c) 2004 Elsevier B.V. All rights reserved.
C1 Fernuniv, Lehrstuhl Programmiersyst, D-58097 Hagen, Germany.
C3 Fern University Hagen
RP Scheben, U (corresponding author), Fernuniv, Lehrstuhl Programmiersyst, D-58097 Hagen, Germany.
EM ursula.scheben@fernuni-hagen.de
CR ALDRICH J, 2001, NUCCS0106, P1
   BIRNGRUBER D, 2001, PERSPECTIVE SYSTEM I, V2244
   BIRNGRUBER D, 2000, P WCOP 2000
   BRADA P, 2001, P WCOP 2001
   BROOKSHIER D, 1997, JAVABEANS DEV REF
   CERVANTES H, 2002, SC 2002 WORKSH SOFTW, V65
   DENNINGER S, 2000, ENTERPRISE JAVABEANS
   Eddon G., 1998, Inside Distributed COM
   HEUZEROTH D, 1999, P GCSE 99 YOUNG RES, P30
   LARRSON M, 1999, P SCM 9 WORKSH LNCS, V1675
   Medvidovic N, 2000, IEEE T SOFTWARE ENG, V26, P70, DOI 10.1109/32.825767
   SCHEBEN U, 2003, SC 2003 WORKSH SOFTW, V82
   SCHMIDT H, 2002, 200081 SCH COMP SCI
   Seco JC, 2000, LECT NOTES COMPUT SC, V1850, P108
   Siegel J., 2000, CORBA 3 Fundamentals and Programming
   Speck A., 2002, International Journal of Applied Mathematics and Computer Science, V12, P581
   SREEDHAR V, 2001, ACOEL COMPONENT ORIE
   WEERAWARANA S, 2001, 6 USENIX C OBJ OR TE
   WESTPHAL R, 2002, NET KOMPAKT SPEKTRUM
   Zaremski A., 1995, ACM Transactions on Software Engineering, V6, P333
   ZENGER M, 2002, P EUR C OBJ OR PROGR
NR 21
TC 3
Z9 4
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD APR
PY 2005
VL 56
IS 1-2
BP 117
EP 139
DI 10.1016/j.scico.2004.11.008
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 908SR
UT WOS:000227811000008
DA 2024-07-18
ER

PT J
AU Boldi, P
   Vigna, S
AF Boldi, P
   Vigna, S
TI Mutable strings in Java: design, implementation and lightweight
   text-search algorithms
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT Conference on the Principles and Practice of Programming in Java
CY JUN, 2003
CL Kilkenny, IRELAND
AB The Java string classes, String and StringBuffer, lie at the extremes of a spectrum (immutable, reference based, and mutable, content based). Analogously, available text-search methods on string classes are implemented either as trivial, brute-force double loops, or as very sophisticated and resource-consuming regular-expression search methods. Motivated by our experience in data-intensive text applications, we propose a new string class, MutableString, which tries to get the right balance between extremes in both cases. Mutable strings can be in one of two states, compact and loose, in which they behave more like String and StringBuffer, respectively. Moreover, they support a wide range of sophisticated text-search algorithms with a very low resource usage and set-up time, using a new, very simple randomised data structure (a generalisation of Bloom filters) that stores an approximation from above of a lattice-valued function. Computing the function value requires a constant number of steps, and the error probability can be balanced with space usage. As a result, we obtain practical implementations of Boyer-Moore type algorithms that can be used with very large alphabets, such as Unicode collation elements. The techniques we develop are very general and amenable to a wide range of applications. (C) 2004 Elsevier B.V. All rights reserved.
C1 Univ Milan, Dipartimento Sci Informaz, Milan, Italy.
C3 University of Milan
RP Univ Milan, Dipartimento Sci Informaz, Milan, Italy.
EM boldi@acm.org; vigna@acm.org
RI Vigna, Sebastiano/R-5285-2017
OI Vigna, Sebastiano/0000-0002-3257-651X; BOLDI, PAOLO/0000-0002-8297-6255
CR APOSTOLICO A, 1986, SIAM J COMPUT, V15, P98, DOI 10.1137/0215007
   BARYOSSEF Z, 2002, LECT NOTES COMPUTER, V2483, P00001, DOI DOI 10.1007/3-540-45726-7_1
   BIRKHOFF G, 1970, AMS C PUBLICATIONS, V25
   BLOOM BH, 1970, COMMUN ACM, V13, P422, DOI 10.1145/362686.362692
   Boldi P, 2004, SOFTWARE PRACT EXPER, V34, P711, DOI 10.1002/spe.587
   BOYER RS, 1977, COMMUN ACM, V20, P762, DOI 10.1145/359842.359859
   COLUSSI L, 1994, J ALGORITHM, V16, P163, DOI 10.1006/jagm.1994.1008
   CROCHEMORE M, 1994, ALGORITHMICA, V12, P247, DOI 10.1007/BF01185427
   DAVIS ME, 1995, Patent No. 5440482
   Fan L, 2000, IEEE ACM T NETWORK, V8, P281, DOI 10.1109/90.851975
   FLAJOLET P, 1985, J COMPUT SYST SCI, V31, P182, DOI 10.1016/0022-0000(85)90041-8
   Henzinger MR, 1999, PROCEEDINGS OF THE EIGHTH INTERNATIONAL WORLD WIDE WEB CONFERENCE, P213
   Heydon A, 2000, CONCURRENCY-PRACT EX, V12, P363, DOI 10.1002/1096-9128(200005)12:6<363::AID-CPE479>3.0.CO;2-3
   LECROQ T, 1992, THEOR COMPUT SCI, V92, P119, DOI 10.1016/0304-3975(92)90139-7
   SUNDAY DM, 1990, COMMUN ACM, V33, P132, DOI 10.1145/79173.79184
   WANG T, 2001, 65PERCENT FASTER JAV
NR 16
TC 7
Z9 10
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN
PY 2005
VL 54
IS 1
BP 3
EP 23
DI 10.1016/j.scico.2004.05.003
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 871MT
UT WOS:000225138500002
DA 2024-07-18
ER

PT J
AU Bieg, C
   Diehl, S
AF Bieg, C
   Diehl, S
TI Educational and technical design of a Web-based interactive tutorial on
   programming in Java
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Java; interpreter; programming languages; learning
AB Most of the Java tutorials found on the Web are more or less well reformatted versions of lecture notes or textbooks. As a consequence these tutorials have just as little interactivity and adaptivity as the printed originals. The tutorial JOSH-online presented in this article enables students to learn Java programming step by step, by interactive trial and error. The tutorial not only provides exercises, but encourages students to consolidate and extend their newly acquired knowledge by means of own hypotheses and their experimental verification. In this paper we describe the design of the tutorial, the underlying interpreter and its integration. (C) 2004 Elsevier B.V. All rights reserved.
C1 Univ Saarland, FR Informat 6 2, Saarbrucken, Germany.
C3 Saarland University
RP Univ Saarland, FR Informat 6 2, Saarbrucken, Germany.
EM diehl@acm.org
OI Diehl, Stephan/0000-0002-4287-7447
CR Allen Eric, 2002, P 33 SIGCSE TECHNICA, P137, DOI [10.1145/563340.563395, DOI 10.1145/563340.563395]
   BIEG C, 2003, THESIS U SAARLAND SA
   BLELLOCH G, 2004, INTERACTIVE TUTORIAL
   Blumstengel A., 1998, Entwicklung hypermedialer Lernsysteme
   BULL G, 2002, HDB INFORMATION TECH
   DIEHL S, 2003, 2 INT C PRINC PRACT
   *ELM GROUP, 2004, EP LEARN MOD AD REM
   HILLION S, 2004, DYNAMICJAVA
   Kolb D.A., 2000, EXPERIENTIAL LEARNIN
   NIEMEYER P, 2004, BEANSHELL
   ROBERTS E, 2001, ACM SIGCSE B, V33
NR 11
TC 4
Z9 6
U1 0
U2 1
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT
PY 2004
VL 53
IS 1
BP 25
EP 36
DI 10.1016/j.scico.2004.02.003
PG 12
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 849KT
UT WOS:000223538200003
DA 2024-07-18
ER

PT J
AU Brogi, A
   Jacquet, JM
AF Brogi, A
   Jacquet, JM
TI On the expressiveness of coordination via shared dataspaces
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 3rd International Conference on Coordination Languages and Architectures
CY 1999
CL AMSTERDAM, NETHERLANDS
ID SEMANTICS; LANGUAGE; LINDA
AB A number of different coordination models for specifying inter-process communication and synchronisation rely on a notion of shared dataspace. Many of these models are extensions of the Linda coordination model, which includes operations for adding, deleting and testing the presence/absence of data in a shared dataspace.
   We compare the expressive power of three classes of coordination models based on shared dataspaces. The first class relies on Linda's communication primitives, while a second class relies on the more general notion of multi-set rewriting (e.g., like Bauhaus Linda or Gamma). Finally, we consider a third class of models featuring communication transactions that consist of sequences of Linda-like operations to be executed atomically (e.g., like in Shared Prolog or PoliS). (C) 2002 Elsevier Science B.V. All rights reserved.
C1 Univ Pisa, Dept Comp Sci, I-56100 Pisa, Italy.
   Univ Namur, Dept Comp Sci, Namur, Belgium.
C3 University of Pisa; University of Namur
RP Univ Pisa, Dept Comp Sci, I-56100 Pisa, Italy.
EM brogi@di.unipi.it; jmj@info.fundp.ac.be
RI Brogi, Antonio/HLQ-2040-2023
OI Brogi, Antonio/0000-0003-2048-2468
CR Andreoli J. M., 1991, New Generation Computing, V9, P445, DOI 10.1007/BF03037173
   Banatre J., 1991, COMMUN ACM, V36, P98
   BEST E, 1997, LECT NOTES COMPUTER
   BONSANGUE MM, 1999, P SAC 99, P156
   BROGI A, 1991, ACM T PROGR LANG SYS, V13, P99, DOI 10.1145/114005.102807
   BROGI A, 2000, ELECT NOTES THEORET, V16
   Busi N, 1998, THEOR COMPUT SCI, V192, P167, DOI 10.1016/S0304-3975(97)00149-7
   BUSI N, 1997, ELECT NOTES THEORET, V7
   CARRIERO N, 1989, COMMUN ACM, V32, P444, DOI 10.1145/63334.63337
   CARRIERO N, 1995, LECT NOTES COMPUTER, V924, P66
   CIANCARINI P, 1994, NEW GENERAT COMPUT, V12, P251, DOI 10.1007/BF03037345
   Ciancarini P, 1997, LECT NOTES COMPUT SC, V1222, P213
   CIANCARINI P, 1996, LECT NOTES COMPUTER, V1061
   DEBOER FS, 1994, INFORM COMPUT, V108, P128, DOI 10.1006/inco.1994.1004
   DENICOLA R, 1998, IEEE T SOFTWARE ENG
   FELLEISEN M, 1990, LECT NOTES COMPUT SC, V432, P134
   GARLAN D, 1997, COORDINATION 97 P 2
   GELERNTER D, 1992, COMMUN ACM, V35, P96, DOI 10.1145/129630.129635
   JACQUET JM, 1994, FUTURE GENER COMP SY, V10, P93, DOI 10.1016/0167-739X(94)90053-1
   Jacquet JM, 1996, COMPUT LANG, V22, P51, DOI 10.1016/S0096-0551(96)00007-0
   Papadopoulos G. A., 1998, ADV COMPUT, V46, P329, DOI [DOI 10.1016/S0065-2458(08)60208-9, 10.1016/S0065-2458(08)60208-9]
   ROWSTRON A, 1997, 30 HAW INT C SYST SC, V1, P379
   Saraswat Vijay A., 1993, Concurrent Constraint Programming
   Shapiro E. Y., 1992, P CONCUR 92, P486
   TOLKSDORF R, 1996, LNCS, V1061, P386
   Wegner P, 1997, COMMUN ACM, V40, P80, DOI 10.1145/253769.253801
   ZAVATTARO G, 1998, SENR9827 CWI DEP SOF
   ZAVATTARO G, 2000, ELECT NOTES THEORET, V16
NR 28
TC 14
Z9 14
U1 0
U2 0
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN-FEB
PY 2003
VL 46
IS 1-2
BP 71
EP 98
AR PII S0167-6423(02)00087-4
DI 10.1016/S0167-6423(02)00087-4
PG 28
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 633UT
UT WOS:000180302700004
DA 2024-07-18
ER

PT J
AU Galeano, I
   Merín, M
   González, M
   Cernuzzi, L
AF Galeano, Iris
   Merin, Mauricio
   Gonzalez, Magali
   Cernuzzi, Luca
TI A methodological approach for mobile applications development:
   MethApp4Mob
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Mobile; Software development methodology; Agile; Business
AB The mobile platform has challenged the software development industry, with the consequent need to adapt commonly used methodologies. The study presents MethApp4Mob: a methodological approach based on the traditional technical phases of software development and industrial project experience. It consists of 8 phases: negotiation, planning, design, implementation and alpha testing, beta testing and feedback analysis, promotion, application publication, release and maintenance, and mechanisms to optimize the software development process. MethApp4Mobile tries to keep the balance between a simple and practical approach without losing formality. Validations results encourage its possible application to offer a robust and easy-to-apply methodology in an industrial context. & COPY; 2023 Elsevier B.V. All rights reserved.
C1 [Galeano, Iris; Merin, Mauricio; Gonzalez, Magali; Cernuzzi, Luca] Catholic Univ Nuestra Senora Asunc UC, Dept Elect & Comp Sci Engn, Asuncion, Paraguay.
RP Galeano, I (corresponding author), Catholic Univ Nuestra Senora Asunc UC, Dept Elect & Comp Sci Engn, Asuncion, Paraguay.
EM iris.ariana07@gmail.com
CR Anderson D.J., 2010, Kanban: successful Evolutionary Change for Your Technology Business
   [Anonymous], 1996, Focus groups as qualitative research
   [Anonymous], WHAT IS RELEASE ITER
   Barbour R.S., 2018, Doing focus groups, P1
   Beck K., 2000, EXTREME PROGRAMMING
   Bertram D., 681 CPSC
   Cohn M., 2005, Agile Estimating and Planning
   Cohn Mike., 2004, User Stories Applied: For Agile Software Development
   Dieguez M., 2012, 7 IBERIAN C INFORM S, P1
   discord, ABOUT US
   El-Kassas WS, 2017, AIN SHAMS ENG J, V8, P163, DOI 10.1016/j.asej.2015.08.004
   Ettifouri EH, 2017, 2017 INTERNATIONAL CONFERENCE ON SMART DIGITAL ENVIRONMENT (ICSDE'17), P207, DOI 10.1145/3128128.3128160
   Franke D, 2012, INT CONF QUAL SOFTW, P154, DOI 10.1109/QSIC.2012.49
   Galeano I., 2017, METH4MOB NEGOTIATION
   Galeano I., 2017, FIGSHARE
   Galeano I., METH4MOB REPOSITORY
   Galeano I., 2022, ACTAS 25 CONGRESSO I, P188
   Galeano I., 2016, 2016 35 INT C CHILEA, P1
   Galeano I., 2017, METH4MOB BETA TESTIN
   Guide A., 2021, PROJECT MANAGEMENT B
   Hautojrvi P., 1979, Experimentation in software engineering, V1ST, DOI [10.1007/978-3-642-81316-0, 10.1007/978-3-642-29044-2., DOI 10.1007/978-3-642-29044-2]
   Henry P., 2020, CHAOS 2020 INFINITY
   Heredia A, 2014, J SOFTW-EVOL PROC, V26, P818, DOI 10.1002/smr.1671
   Johnson R., 2015, 7 TIPS IMPROVE MOBIL
   Joorabchi Mona Erfani, 2013, 2013 ACM / IEEE International Symposium on Empirical Software Engineering and Measurement (ESEM), P15, DOI 10.1109/ESEM.2013.9
   Khan M, 2019, 2019 8TH INTERNATIONAL CONFERENCE ON SOFTWARE AND COMPUTER APPLICATIONS (ICSCA 2019), P315, DOI 10.1145/3316615.3316637
   Lee C., 2014, GARTNER SAYS TRADITI
   Lewis J. R., 1991, SIGCHI Bulletin, V23, P78, DOI 10.1145/122672.122692
   Mengjiao Shen, 2012, Proceedings 2012 2nd International Workshop on Software Engineering for Embedded Systems (SEES), P30, DOI 10.1109/SEES.2012.6225488
   Moumane K, 2016, SPRINGERPLUS, V5, DOI 10.1186/s40064-016-2171-z
   Moustakas C., 1990, HEURISTIC RES DESIGN
   Osborne OHagan A., 2014, SOFTWARE DEV PROCESS, V425
   Osman N., 2018, INT J STW ENG APPL, V9, P11, DOI [10.5121/ijsea.2018.9102, DOI 10.5121/IJSEA.2018.9102]
   Picco G.P., 2014, P FUTURE SOFTWARE EN, P13, DOI DOI 10.1145/2593882.2593884
   Pickaso Guia, 2022, US
   PMOInformatica, 2012, PMOINF PLANT SCRUM H
   Reichheld FF, 2003, HARVARD BUS REV, V81, P46
   Rieger C., 2017, BUSINESS APPS MAML M, P1599
   Runeson Per, 2012, Case study research in software engineering: Guidelines and examples
   Ryu YS, 2006, J USABILITY STUD, V2, P39
   Scharff C, 2010, 2010 ICSE WORKSHOP ON COOPERATIVE AND HUMAN ASPECTS OF SOFTWARE ENGINEERING (CHASE 2010), P25
   Schwaber K., 2001, Agile software development with scrum
   Sorensen C, 2005, INT FED INFO PROC, V185, P1
   Stephens R., 2015, BEGINNING SOFTWARE E
   T.C.I.J.S. Software systems engineering, 2006, 147642006 ISOIEC TC
   Teamviewer, US
   Usman Muhammad, 2014, 2014 21st Asia-Pacific Software Engineering Conference (APSEC), P111, DOI 10.1109/APSEC.2014.26
   Usman M., 2014, European Scientific Journal, V10, P293
   Wasserman A.I., 2010, Proceedings of the FSE/SDP Workshop on Future of Software Engineering Research, P397, DOI [DOI 10.1145/1882362.1882443, 10.1145/1882362.1882443]
NR 49
TC 0
Z9 0
U1 2
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD AUG
PY 2023
VL 230
AR 102986
DI 10.1016/j.scico.2023.102986
EA JUN 2023
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA M8RT9
UT WOS:001032840700001
DA 2024-07-18
ER

PT J
AU Chondamrongkul, N
   Sun, J
AF Chondamrongkul, Nacha
   Sun, Jing
TI Software evolutionary architecture: Automated planning for functional
   changes
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Evolution planning; Formal method; Model checking; Functional property;
   Evolutionary architecture
ID CONTINUOUS DELIVERY
AB Software systems often evolve over time due to frequent changes in user requirements. The refactoring of the architectural design due to numerous functional changes significantly impacts the software system. Evolutionary architecture is a design principle that supports the implementation of frequent changes. One key aspect of an evolutionary architecture is the definition of fitness functions to ensure that the changes align with the intended goals. However, planning the incremental evolution of the architectural design remains a challenge. This paper presents an approach to automatically generate evolution plans for refactoring the architectural design in support of new functionalities. Formal modelling has been applied to allow for the verification of functional properties against the design. By utilising the generated evolution plan, we can determine a safe path for evolving the software system with minimal risk of failure. We evaluated the rigour and effectiveness of the evolution plan generated by our approach for six software systems. Our experimental results demonstrate the effectiveness of the proposed approach in generating evolution plans. Additionally, we were able to identify the most suitable planning strategy that minimises system interruptions in the generated evolution plan. & COPY; 2023 Elsevier B.V. All rights reserved.
C1 [Chondamrongkul, Nacha] Mae Fah Luang Univ, Sch Informat Technol, Chiang Rai, Thailand.
   [Sun, Jing] Univ Auckland, Sch Comp Sci, Auckland, New Zealand.
C3 Mae Fah Luang University; University of Auckland
RP Chondamrongkul, N (corresponding author), Mae Fah Luang Univ, Sch Informat Technol, Chiang Rai, Thailand.
EM nacha.cho@mfu.ac.th; jing.sun@auckland.ac.nz
FU Mae Fah Luang University [651A03030]
FX Acknowledgements The authors declare the following financial
   interests/personal relationships which may be considered as potential
   com- peting interests: Nacha Chondamrongkul reports financial support
   was provided by Mae Fah Luang University, grant number: 651A03030.
CR ABOUT US, US
   Acrenwelge, ACR ERS JAV JAV SPRI
   Ahmad A., 2014, FRAMEWORK ARCHITECTU, DOI [10.1145/2578128.2578232, DOI 10.1145/2578128.2578232]
   Alférez GH, 2017, COMPUT ELECTR ENG, V63, P332, DOI 10.1016/j.compeleceng.2017.08.004
   Alshayeb M, 2020, IEEE ACCESS, V8, P62738, DOI 10.1109/ACCESS.2020.2981742
   Antoniou G, 2003, IN HAND I S, P67
   Baabad A, 2020, IEEE ACCESS, V8, P173681, DOI 10.1109/ACCESS.2020.3024671
   Balalaie A, 2018, SOFTWARE PRACT EXPER, V48, P2019, DOI 10.1002/spe.2608
   Barnes JM, 2013, IEEE INT CONF AUTOM, P213, DOI 10.1109/ASE.2013.6693081
   ben Fadhel A, 2012, 2012 28TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE (ICSM), P212, DOI 10.1109/ICSM.2012.6405274
   Brito A, 2020, PROCEEDINGS OF THE 2020 IEEE 27TH INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER '20), P367, DOI [10.1109/SANER48275.2020.9054864, 10.1109/saner48275.2020.9054864]
   Bucchiarone Antonio, 2020, Software Engineering Aspects of Continuous Development and New Paradigms of Software Production and Deployment. Second International Workshop, DEVOPS 2019. Revised Selected Papers. Lecture Notes in Computer Science (LNCS 12055), P15, DOI 10.1007/978-3-030-39306-9_2
   Chen LP, 2017, J SYST SOFTWARE, V128, P72, DOI 10.1016/j.jss.2017.02.013
   Chondamrongkul N., 2019, 31TH INT C SEKE, P187
   Chondamrongkul N., 2018, 30 INT C SEKE, P25
   Chondamrongkul N, 2021, ACM T SOFTW ENG METH, V30, DOI 10.1145/3461011
   Ciraci S, 2011, LECT NOTES COMPUT SC, V6903, P252, DOI 10.1007/978-3-642-23798-0_28
   Cortellessa V, 2021, INFORM SOFTWARE TECH, V135, DOI 10.1016/j.infsof.2021.106568
   Di Francesco P, 2018, 2018 IEEE 15TH INTERNATIONAL CONFERENCE ON SOFTWARE ARCHITECTURE (ICSA), P29, DOI 10.1109/ICSA.2018.00012
   Djibo K, 2020, MODELLING-BASEL, V1, P53, DOI 10.3390/modelling1010004
   Eilertsen AM, 2020, PROC INT CONF SOFTW, P182, DOI 10.1145/3377812.3381395
   Erder M., 2016, CONTINUOUS ARCHITECT, P63
   Eventuate C.R.o., 2022, INTRO MICROSERVICES
   Febbraro N, 2007, AGILE 2007, PROCEEDINGS, P92, DOI 10.1109/AGILE.2007.58
   Ford Neal., 2017, BUILDING EVOLUTIONAR
   Garlan David, 2010, SEI Series in Software Engineering, Vsecond
   Gerard Cedric, 2016, Zenodo, DOI 10.5281/ZENODO.61692
   GEREVINI A., 2005, Plan Constraints and Preferences in PDDL3: The Language of the Fifth International Planning Competition
   Hoff A., 2020, P 24 ACM C SPLC VOLU
   Holmes T, 2018, 21ST ACM/IEEE INTERNATIONAL CONFERENCE ON MODEL DRIVEN ENGINEERING LANGUAGES AND SYSTEMS (MODELS 2018), P268, DOI 10.1145/3239372.3239379
   Horrocks I, 2005, LECT NOTES COMPUT SC, V3709, P5, DOI 10.1007/11564751_2
   HouariZegai, HOUAR HOT WEB APPL B
   Hynninen T, 2018, 2018 41ST INTERNATIONAL CONVENTION ON INFORMATION AND COMMUNICATION TECHNOLOGY, ELECTRONICS AND MICROELECTRONICS (MIPRO), P1449, DOI 10.23919/MIPRO.2018.8400261
   Jackson M, 2019, LECT NOTES COMPUT SC, V11434, P430, DOI 10.1007/978-3-030-17642-6_38
   Li R, 2011, IEEE C EVOL COMPUTAT, P432
   Lin Y, 2016, FSE'16: PROCEEDINGS OF THE 2016 24TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON FOUNDATIONS OF SOFTWARE ENGINEERING, P535, DOI 10.1145/2950290.2950317
   Mangano N, 2015, IEEE T SOFTWARE ENG, V41, P135, DOI 10.1109/TSE.2014.2362924
   Martens A, 2010, LECT NOTES COMPUT SC, V6093, P84, DOI 10.1007/978-3-642-13821-8_8
   Mokni A, 2016, SCI COMPUT PROGRAM, V127, P24, DOI 10.1016/j.scico.2016.03.003
   Nunes L, 2019, LECT NOTES COMPUT SC, V11681, P37, DOI 10.1007/978-3-030-29983-5_3
   Rajlich V., 2014, Proceedings of the Conference on the Future of Software Engineering, P133, DOI [10.1145/2593882.2593893, DOI 10.1145/2593882.2593893]
   Ramírez A, 2018, INFORM SCIENCES, V463, P92, DOI 10.1016/j.ins.2018.06.034
   Rizzi L., 2018, P 2 INT WORKSH REF I, P7
   Shahin M, 2019, EMPIR SOFTW ENG, V24, P1061, DOI 10.1007/s10664-018-9651-4
   Shi L, 2010, ADAPT LEARN OPTIM, V2, P3
   Sindhgatta Renuka, 2010, P 25 ACM INT C COMP, P105, DOI DOI 10.1145/1869542.1869560
   Stal M, 2014, AGILE SOFTWARE ARCHI, P63, DOI [10.1016/B978-0-12-407772-000003-4, DOI 10.1016/B978-0-12-407772-000003-4]
   Sun J, 2009, THIRD INTERNATIONAL SYMPOSIUM ON THEORETICAL ASPECTS OF SOFTWARE ENGINEERING, PROCEEDINGS, P127, DOI 10.1109/TASE.2009.32
   Tanhaei M, 2016, J COMPUT SCI TECH-CH, V31, P951, DOI 10.1007/s11390-016-1674-y
   Tretola G, 2019, J SOFTW-EVOL PROC, V31, DOI 10.1002/smr.2201
   Vukovic M, 2016, IEEE IFIP NETW OPER, P96, DOI 10.1109/NOMS.2016.7502801
   W. inc, 2022, MICR SOCKSH DEM
   Xu XL, 2019, CILVR SER LAT VAR, P239
   Zimmermann O, 2017, COMPUTING, V99, P129, DOI 10.1007/s00607-016-0520-y
NR 54
TC 0
Z9 0
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD AUG
PY 2023
VL 230
AR 102978
DI 10.1016/j.scico.2023.102978
EA JUN 2023
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA N4PC7
UT WOS:001036841100001
DA 2024-07-18
ER

PT J
AU Wu, H
AF Wu, Hao
TI QMaxUSE: A new tool for verifying UML class diagrams and OCL invariants
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Verification; UML&OCL; Query SMT; Unsatisfiable core
AB Formal verification of a UML class diagram annotated with OCL constraints has been a long-standing challenge in Model-driven Engineering. In the past decades, many tools and techniques have been proposed to tackle this challenge. However, they do not scale well and are often unable to locate the conflicts when then number of OCL constraints significantly increases. In this paper, we present a new tool called QMaxUSE. This tool is designed for verifying UML class diagrams annotated with large number of OCL invariants. QMaxUSE is easy to install and deploy. It offers two distinct features. (1) A simple query language that allows users to choose parts of a UML class diagram to be verified. (2) A new procedure that is capable of performing concurrent verification. (c) 2023 The Author(s). Published by Elsevier B.V. This is an open access article under the CC BY license (http://creativecommons .org /licenses /by /4 .0/).
C1 [Wu, Hao] Maynooth Univ, Comp Sci Dept, Maynooth, Ireland.
C3 Maynooth University
RP Wu, H (corresponding author), Maynooth Univ, Comp Sci Dept, Maynooth, Ireland.
EM haowu@cs.nuim.ie
OI Wu, Hao/0000-0001-5010-4746
CR Ali S, 2014, LECT NOTES COMPUT SC, V8769, P223, DOI 10.1007/978-3-319-11743-0_16
   Atkinson C, 2003, IEEE SOFTWARE, V20, P36, DOI 10.1109/MS.2003.1231149
   Balaban M, 2013, ACM T SOFTW ENG METH, V22, DOI 10.1145/2491509.2491518
   Berardi D, 2005, ARTIF INTELL, V168, P70, DOI 10.1016/j.artint.2005.05.003
   Booch G., 2005, The Unified Modeling Language User Guide
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Garry D., 2012, P 12 WORKSHOP OCL TE, P65, DOI DOI 10.1145/2428516.2428529
   Gogolla M, 2018, COMPUT LANG SYST STR, V54, P474, DOI 10.1016/j.cl.2017.10.001
   Hao Wu, 2017, Integrated Formal Methods. 13th International Conference, IFM 2017. Proceedings: LNCS 10510, P348, DOI 10.1007/978-3-319-66845-1_23
   Iqbal Muhammad Zohaib, 2012, Model Driven Engineering Languages and Systems. Proceedings 15th International Conference, MODELS 2012, P642, DOI 10.1007/978-3-642-33666-9_41
   Kuhlmann Mirco, 2012, Modelling Foundations and Applications. Proceedings 8th European Conference, ECMFA 2012, P32, DOI 10.1007/978-3-642-31491-9_5
   Liffiton MH, 2008, J AUTOM REASONING, V40, P1, DOI 10.1007/s10817-007-9084-z
   Maraee A, 2007, LECT NOTES COMPUT SC, V4530, P17
   Queralt A, 2006, LECT NOTES COMPUT SC, V4215, P497
   Queralt A, 2012, DATA KNOWL ENG, V73, P1, DOI 10.1016/j.datak.2011.09.004
   Semeráth O, 2016, LECT NOTES COMPUT SC, V9633, P87, DOI 10.1007/978-3-662-49665-7_6
   Wu H., 2022, 18 EUR C MOD FDN APP
   Wu H, 2022, J OBJECT TECHNOL, V21, DOI 10.5381/jot.2022.21.3.a7
   Wu H, 2021, SOFTW SYST MODEL, V20, P1271, DOI 10.1007/s10270-020-00849-8
   Wu H, 2017, LECT NOTES COMPUT SC, V10376, P179, DOI 10.1007/978-3-319-61482-3_11
   Wu Hao, 2022, 25 INT C FUNDAMENTAL
NR 21
TC 0
Z9 0
U1 3
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN
PY 2023
VL 228
AR 102955
DI 10.1016/j.scico.2023.102955
EA APR 2023
PG 6
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA F8CP1
UT WOS:000984574900001
OA hybrid
DA 2024-07-18
ER

PT J
AU Ferdous, R
   Hung, CK
   Kifetew, F
   Prandi, D
   Susi, A
AF Ferdous, Raihana
   Hung, Chia-kang
   Kifetew, Fitsum
   Prandi, Davide
   Susi, Angelo
TI EvoMBT: Evolutionary model based testing
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Model-based testing; Search-based testing; Game play testing;
   Cyber-physical systems
AB Writing tests for software systems is an important but expensive activity that plays a critical role in the success of the software. This is particularly true in systems where the interaction space is fine grained and in continuous change, as in the case of computer games or cyber-physical systems. In such situations model-based testing offers reasonable testing solutions as it allows to abstract away from details and focus on the relevant aspects from the point of view of testing. In this paper we present our tool EvoMBT that combines model-based testing with search algorithms for the generation of test cases for systems with complex and fine grained interactions. We illustrate the basic principles behind EvoMBT and provide examples along with empirical data from experiments on a self-driving car simulator where EvoMBT is used to produce road configurations that challenge the model responsible for driving the car.(c) 2023 Elsevier B.V. All rights reserved.
C1 [Ferdous, Raihana; Hung, Chia-kang; Kifetew, Fitsum; Prandi, Davide; Susi, Angelo] Fdn Bruno Kessler, Trento, Italy.
C3 Fondazione Bruno Kessler
RP Prandi, D (corresponding author), Fdn Bruno Kessler, Trento, Italy.
EM rferdous@fbk.eu; chung@fbk.eu; kifetew@fbk.eu; prandi@fbk.eu;
   susi@fbk.eu
OI Prandi, Davide/0000-0001-9885-6074; Kifetew, Fitsum
   Meshesha/0000-0003-1860-8666
FU EU H2020 iv4XR project [856716]; H2020 - Industrial Leadership [856716]
   Funding Source: H2020 - Industrial Leadership
FX ~This work is funded by the EU H2020 iv4XR project, grant number 856716.
CR CHENG KT, 1993, ACM IEEE D, P86
   Ferdous R., 2021, LECT NOTES COMPUT SC
   Ferdous R, 2022, 15TH SEARCH-BASED SOFTWARE TESTING WORKSHOP (SBST 2022), P51, DOI 10.1145/3526072.3527534
   Fraser G, 2009, SOFTW TEST VERIF REL, V19, P215, DOI 10.1002/stvr.402
   Gambi A, 2022, 15TH SEARCH-BASED SOFTWARE TESTING WORKSHOP (SBST 2022), P25, DOI 10.1145/3526072.3527538
   Prasetya I. S. W. B, 2020, P 19 INT C AUTONOMOU, P1972
   Riccio V, 2020, PROCEEDINGS OF THE 28TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE '20), P876, DOI 10.1145/3368089.3409730
   Utting M, 2012, SOFTW TEST VERIF REL, V22, P297, DOI 10.1002/stvr.456
NR 8
TC 1
Z9 1
U1 1
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD APR
PY 2023
VL 227
AR 102942
DI 10.1016/j.scico.2023.102942
EA MAR 2023
PG 6
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA A9QY8
UT WOS:000958403600001
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Perkowski, M
AF Perkowski, Marek
TI Inverse problems, constraint satisfaction, reversible logic, invertible
   logic and Grover quantum oracles for practical problems
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Grover's algorithm; Reversible logic; Invertible logic; Oracle;
   Complexity
ID DECOMPOSITION; FACTORIZATION; ALGORITHM; INPUT
AB It is well-known that the "Unsorted Database " quantum algorithm by Grover gives quadratic speedup to several practically important combinatorial and enumerative problems, such as: SAT, Graph Coloring, Maximum Cliques, Traveling Salesman and many others. Recently, quantum programming languages such as QISKIT, QSHARP or Quipper start to be used to design, verify and simulate practical quantum algorithms for important problems in Quantum Machine Learning or optimization. So far, however, no methodologies have been created to program Grover's Oracles for particular classes of problems. In contrast, such methodologies have been already created for classical Constraint Satisfaction Problems (CSP). Invertible Logic was recently introduced by Supriyo Datta and his team. The goal of this paper is to present results of our research towards creating a systematic methodology to solve search problems in Artificial Intelligence, Logic Design and Machine Learning by repeated applications of modified hardware oracles. These oracles can use: (1) classical Boolean logic, (2) quantum logic, or (3) invertible logic. Our methodology to design and exercise all types of general oracles is based on bottom-up synthesis and technology transformations. For CSP problems we apply unified blocks which use various data representations and encodings.
   (c) 2022 Published by Elsevier B.V.
C1 [Perkowski, Marek] Portland State Univ, Dept Elect & Comp Engn, Portland, OR 97207 USA.
C3 Portland State University
RP Perkowski, M (corresponding author), Portland State Univ, Dept Elect & Comp Engn, Portland, OR 97207 USA.
EM mperkows@ee.pdx.edu
CR ACKLEY DH, 1985, COGNITIVE SCI, V9, P147
   Al-Bayaty A., 2022, SIMULATING BOOLEAN Q
   [Anonymous], 2011, QUANTUM COMPUTING GE, DOI DOI 10.1063/PT.3.1442
   Ardakani A, 2017, IEEE T VLSI SYST, V25, P2688, DOI 10.1109/TVLSI.2017.2654298
   Beer K, 2020, NAT COMMUN, V11, DOI 10.1038/s41467-020-14454-2
   Biamonte JD, 2008, PHYS REV A, V77, DOI 10.1103/PhysRevA.77.052331
   Blok MS, 2021, PHYS REV X, V11, DOI 10.1103/PhysRevX.11.021010
   Borders WA, 2019, NATURE, V573, P390, DOI 10.1038/s41586-019-1557-9
   Boyer M, 1998, FORTSCHR PHYS, V46, P493, DOI 10.1002/(SICI)1521-3978(199806)46:4/5<493::AID-PROP493>3.0.CO;2-P
   Brassard G, 1998, LECT NOTES COMPUT SC, V1443, P820, DOI 10.1007/BFb0055105
   Butler J.T., 2013, C REED MULLER S
   Camsari K.Y., 2019, ARXIV181007144V5
   Camsari KY, 2017, PHYS REV X, V7, DOI 10.1103/PhysRevX.7.031014
   Chen AB, 2013, 2013 CACS INTERNATIONAL AUTOMATIC CONTROL CONFERENCE (CACS), P36, DOI 10.1109/CACS.2013.6734103
   Cheng A., 2013, DESIGNING FPGA ORACL
   Chuang I., 2000, Quantum Information and Quantum Computation
   Cross A., 2018, B AM PHYS SOC
   Debashis P, 2018, IEEE MAGN LETT, V9, DOI 10.1109/LMAG.2018.2860547
   Debashis P, 2016, INT EL DEVICES MEET
   Dhawan S, 2011, INT SYM MVL, P176, DOI 10.1109/ISMVL.2011.29
   Gaines B. R., 1969, Advances in Information Systems Science, P37, DOI 10.1007/978-1-4899-5841-9_2
   Gao P, 2022, CMC-COMPUT MATER CON, V70, P4545, DOI 10.32604/cmc.2022.020483
   Gao P, 2020, QUANTUM INF COMPUT, V20, P418
   Gokhale P., 2019, ARXIV190510481V1
   Grover L. K., 1996, Proceedings of the Twenty-Eighth Annual ACM Symposium on the Theory of Computing, P212, DOI 10.1145/237814.237866
   Hinton G.E., 1984, CMUCS84119 CAMEG MEL
   Kiran R.U., 2009, IMPROVED MULTIPLE MI
   Kohavi Z., 1978, Switching and Finite Automata Theory, Vsecond
   Konieczny P.A., 1995, 95E289 EINDH U TECHN
   KORF RE, 1985, ARTIF INTELL, V27, P97, DOI 10.1016/0004-3702(85)90084-0
   Lee B, 2016, 19TH EUROMICRO CONFERENCE ON DIGITAL SYSTEM DESIGN (DSD 2016), P413, DOI 10.1109/DSD.2016.30
   Lee S, 2006, J MULT-VALUED LOG S, V12, P561
   Li Y., QUANTUM ORACLES GRAP, P2022
   Li YW, 2019, QUANTUM INF COMPUT, V19, P35
   Luba T., 1993, Foundations of Computing and Decision Sciences, V18, P241
   Luba T, 1995, VLSI DES, V3, P289, DOI 10.1155/1995/67208
   Mandal SB, 2014, INT SYM MVL, P184, DOI 10.1109/ISMVL.2014.40
   Maslov D., 2004, IMPROVED QUANTUM COS
   Mishchenko A., 2000, C 4 INT WKSP BOOLEAN
   Mishima A, 2001, AIP CONF PROC, V554, P242, DOI 10.1063/1.1363079
   Monaco JV, 2018, IEEE T CIRCUITS-I, V65, P1051, DOI 10.1109/TCSI.2017.2771533
   Onizawa N., 2020, DESIGN FRAMEWORK INV
   Perkowski M, 2002, IEEE MICRO, V22, P52, DOI 10.1109/MM.2002.1013304
   Perkowski M., 1989, PROGR COMPUTER AIDED, V1, P353
   Perkowski M, 2017, C WORKSHOP DESIGN AU
   Pervaiz A. Zeeshan, 2017, ARXIV E PRINTS
   Pervaiz AZ, 2017, SCI REP-UK, V7, DOI 10.1038/s41598-017-11011-8
   Preskill J., 2018, ARXIV180100862V3 QUA
   Rawski M, 2001, J SYST ARCHITECT, V47, P137, DOI 10.1016/S1383-7621(00)00062-X
   Sasao T., 2015, NOTE MULTIPLEVALUED, P1
   Shor PW, 1997, SIAM J COMPUT, V26, P1484, DOI 10.1137/S0036144598347011
   Sivakumar Sharavanakumar, 2020, GROVER ALGORITHM MIN
   Smithson SC, 2019, IEEE T CIRCUITS-I, V66, P2263, DOI 10.1109/TCSI.2018.2889732
   Song N, 1996, IEEE T COMPUT AID D, V15, P385, DOI 10.1109/43.494702
   Sutton B, 2017, SCI REP-UK, V7, DOI 10.1038/srep44370
   Taha MMA, 2018, INT SYM MVL, P215, DOI 10.1109/ISMVL.2018.00045
   Tsai E., 2020, TOWARDS DEV QUANTUM
   Tsai E., 2022, THESIS PORTLAND STAT
   Tsai E, 2020, FACTA UNIV-SER ELECT, V33, P169
   Venkatachalapathy R., 2019, THESIS PSU
   Wang YS, 2011, INT SYM MVL, P294, DOI 10.1109/ISMVL.2011.42
   Whitfield JD, 2012, EPL-EUROPHYS LETT, V99, DOI 10.1209/0295-5075/99/57004
   XIPHERA, XIP800IB TRNG TRUE R
   Zhang W, QUANTUM ALGORITHMS 2, V2022
NR 64
TC 1
Z9 1
U1 3
U2 6
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 1
PY 2022
VL 218
AR 102775
DI 10.1016/j.scico.2022.102775
EA MAR 2022
PG 34
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 1D1JC
UT WOS:000793563300009
DA 2024-07-18
ER

PT J
AU He, WG
   Shi, JQ
   Su, T
   Lu, ZY
   Hao, L
   Huang, YH
AF He, Weigang
   Shi, Jianqi
   Su, Ting
   Lu, Zeyu
   Hao, Li
   Huang, Yanhong
TI Automated test generation for IEC 61131-3 ST programs via dynamic
   symbolic execution
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Test generation; IEC 61131-3 ST; Dynamic symbol execution
AB Programmable logic controllers (PLCs) are essentially domain-specific computers that are widely used in the industrial field. These industrial devices are usually required to be of high reliability, and program bugs can lead to catastrophes. However, there are few automated testing tools for PLC programs. This paper proposes a framework, named STAutoTester, for automatically generating test cases for IEC 61131-3 Structured Text (ST) programs. It adopts Dynamic Symbol Execution (DSE) combined with redundant path pruning to efficiently perform PLC multi-cycle test data generation under different coverage criteria. We have evaluated STAutoTester on 21 programs. The experimental results show that STAutoTester can effectively handle these programs. Compared to SYMPLC, a previous symbolic execution based tool for automatically testing PLC software, we achieved comparable statement coverage with much fewer test cases. Besides, we have achieved greater branch coverage and stricter MC/DC coverage, which were not implemented by SYMPLC. (C) 2021 Elsevier B.V. All rights reserved.
C1 [He, Weigang; Shi, Jianqi; Lu, Zeyu; Hao, Li; Huang, Yanhong] East China Normal Univ, Natl Trusted Embedded Software Engn Technol Res C, Shanghai, Peoples R China.
   [Shi, Jianqi] East China Normal Univ, Hardware Software Codesign Technol & Applicat Eng, Shanghai, Peoples R China.
   [Su, Ting; Huang, Yanhong] East China Normal Univ, Shanghai Key Lab Trustworthy Comp, Shanghai, Peoples R China.
C3 East China Normal University; East China Normal University; East China
   Normal University
RP Shi, JQ (corresponding author), East China Normal Univ, Hardware Software Codesign Technol & Applicat Eng, Shanghai, Peoples R China.
EM jqshi@sei.ecnu.edu.cn
RI Huang, YQ/JOK-7580-2023; huang, yan/GWM-4747-2022
FU Shanghai Science and Technology Committee RisingStar Program
   [18QB1402000]; National Natural Science Foundation of China [61602178,
   61602177]; China HGJ Project [2017ZX01038102002]; National Defense Basic
   Scientific Research Program of China [JCKY2016204B503]
FX This work is partially supported by Shanghai Science and Technology
   Committee RisingStar Program (No. 18QB1402000) , National Natural
   Science Foundation of China (No. 61602178 and No. 61602177) , China HGJ
   Project under Grant (No. 2017ZX01038102002) , and National Defense Basic
   Scientific Research Program of China (No. JCKY2016204B503) .
CR Ammann P, 2003, ISSRE 2003: 14TH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P99, DOI 10.1109/ISSRE.2003.1251034
   Biallas S, 2012, IEEE INT CONF AUTOM, P338, DOI 10.1145/2351676.2351741
   Bohlender D, 2016, INT WORKS DISCRETE, P432, DOI 10.1109/WODES.2016.7497884
   Cadar C., 2008, OSDI, V8, P209, DOI DOI 10.5555/1855741.1855756
   Cheng CH, 2014, LECT NOTES COMPUT SC, V8559, P541, DOI 10.1007/978-3-319-08867-9_36
   Cheng Z, 2017, 2017 INTERNATIONAL CONFERENCE ON SECURITY, PATTERN ANALYSIS, AND CYBERNETICS (SPAC), P296, DOI [10.1145/3183519.3183554, 10.1109/SPAC.2017.8304293]
   Guo SJ, 2017, ESEC/FSE 2017: PROCEEDINGS OF THE 2017 11TH JOINT MEETING ON FOUNDATIONS OF SOFTWARE ENGINEERING, P326, DOI 10.1145/3106237.3106245
   Hao L, 2019, 2019 13TH INTERNATIONAL SYMPOSIUM ON THEORETICAL ASPECTS OF SOFTWARE ENGINEERING (TASE 2019), P200, DOI [10.1109/TASE.2019.00004, 10.1109/TASE.2019.00034]
   International Electrotechnical Commission, 2003, 61131 IEC, V3d
   Markovic F., 2015, THESIS
   Muchnick S., 1997, ADV COMPILER DESIGN
   Sen K., 2005, P 10 EUR SOFTW ENG C, V30, P263, DOI DOI 10.1145/1081706.1081750
   Simon H, 2015, IEEE INT C EMERG
   Simon H, 2018, LECT NOTES COMPUT SC, V11023, P367, DOI 10.1007/978-3-319-98938-9_21
   Su T, 2017, ACM COMPUT SURV, V50, DOI 10.1145/3020266
   Su T, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 1, P654, DOI 10.1109/ICSE.2015.81
   Tiegelkamp M., 1995, IEC 61131 3 PROGRAMM
NR 17
TC 8
Z9 8
U1 1
U2 9
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 1
PY 2021
VL 206
AR 102608
DI 10.1016/j.scico.2021.102608
EA FEB 2021
PG 12
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA RI2XD
UT WOS:000636771400007
DA 2024-07-18
ER

PT J
AU Gao, SQ
   Liu, L
   Liu, YZ
   Liu, HX
   Wang, YH
AF Gao, Shanquan
   Liu, Lei
   Liu, Yuzhou
   Liu, Huaxiao
   Wang, Yihui
TI API recommendation for the development of Android App features based on
   the knowledge mined from App stores
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE API recommendation; App store mining; UI analysis; Reusable knowledge;
   Feature extraction
AB To improve the efficiency, developers tend to use APIs to avoid reinventing wheels in the development of Apps. However, there are thousands of APIs for various purposes, so it is difficult for developers to identify suitable APIs according to the functionalities to be realized. App stores manage millions of products, which embody the experience and wisdom of developers, and they provide valuable data resource for solving this problem. By summarizing the API usage for the same or similar functionalities in Apps, reusable knowledge can be mined for the API recommendation. In this paper, we utilize the data resource in App stores and provide an API recommendation method for the development of Android Apps. Firstly, by using UI elements as the bridge, we establish mapping relationships between functionalities and APIs. Secondly, we build a framework to describe functionalities of Apps in the same category, and utilize relationships between functionalities and APIs to construct the API knowledge for each node in the framework. Thirdly, we identify nodes according to queried features and show the API knowledge to developers by giving recommendation lists. We conducted experiments based on Google Play, and the result shows that our method has a good recommendation performance. (C) 2020 Elsevier B.V. All rights reserved.
C1 [Gao, Shanquan; Liu, Lei; Liu, Yuzhou; Liu, Huaxiao; Wang, Yihui] Jilin Univ, Coll Comp Sci & Technol, Changchun 130012, Peoples R China.
   [Gao, Shanquan; Liu, Lei; Liu, Huaxiao; Wang, Yihui] Minist Educ, Key Lab Symbol Computat & Knowledge Engn, Beijing, Peoples R China.
   [Liu, Yuzhou] Jilin Univ, Coll Elect Sci & Engn, Changchun, Peoples R China.
C3 Jilin University; Jilin University
RP Liu, YZ (corresponding author), Jilin Univ, Coll Comp Sci & Technol, Changchun 130012, Peoples R China.
EM liuyuzhou@jlu.edu.cn
RI lei, liu/HTR-5486-2023
OI Liu, Yuzhou/0000-0003-2765-4074; Wang, yihui/0000-0003-2739-1403
FU National Key Research and Development Program of China [2017YFB1003103];
   Natural Science Research Foundation of Jilin Province of China
   [20190201193JC]
FX The work is funded by National Key Research and Development Program of
   China 2017YFB1003103, Natural Science Research Foundation of Jilin
   Province of China under Grant Nos. 20190201193JC.
CR Aizawa A, 2003, INFORM PROCESS MANAG, V39, P45, DOI 10.1016/S0306-4573(02)00021-3
   [Anonymous], 2015, ICML
   Avdiienko V, 2017, PROC IEEE ACM INT C, P201, DOI 10.1109/ICSE-C.2017.130
   Cai L., 2019, P 2019 27 ACM JOINT
   Chen S, 2019, PROC INT CONF SOFTW, P596, DOI 10.1109/ICSE.2019.00070
   Falotico R, 2015, QUAL QUANT, V49, P463, DOI 10.1007/s11135-014-0003-1
   Hu G., 2014, EUR C COMP SYST
   Huang JJ, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P1036, DOI 10.1145/2568225.2568301
   Li Yuanchun, 2016, UBICOMP 16
   Lin KP, 2018, IEEE T COMPUT SOC SY, V5, P1061, DOI 10.1109/TCSS.2018.2878866
   Liu YZ, 2020, IET SOFTW, V14, P39, DOI 10.1049/iet-sen.2018.5192
   Liu YZ, 2017, J SYST SOFTWARE, V133, P126, DOI 10.1016/j.jss.2017.08.024
   Long L, 2019, WORD2VECTOR
   Loper E, 2002, ETMTNLP 02 P ACL 02, P63, DOI [10.3115/1225403.1225421, DOI 10.3115/1225403.1225421, DOI 10.3115/1118108.1118117]
   Martin W, 2017, IEEE T SOFTWARE ENG, V43, P817, DOI 10.1109/TSE.2016.2630689
   Moran K, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P165, DOI 10.1145/3180155.3180246
   Moran Kevin, 2018, ASE 2018
   Vu PM, 2015, IEEE INT CONF AUTOM, P749, DOI 10.1109/ASE.2015.85
   Rahman MM, 2016, 2016 IEEE 23RD INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER), VOL 1, P349, DOI 10.1109/SANER.2016.80
   ROUSSEEUW PJ, 1987, J COMPUT APPL MATH, V20, P53, DOI 10.1016/0377-0427(87)90125-7
   Sarro F, 2015, INT REQUIR ENG CONF, P76, DOI 10.1109/RE.2015.7320410
   Sheng F, 2019, ACM T SOFTW ENG METH, V28, DOI 10.1145/3295699
   Thung F, 2017, IEEE TETCI, V1, P145, DOI 10.1109/TETCI.2017.2699222
   Thung F, 2013, IEEE INT CONF AUTOM, P290, DOI 10.1109/ASE.2013.6693088
   van Nguyen Thanh, 2016, FSE
   Xi Shengqut., 2019, P 2019 ACM SIGSAC C
   Xu Jin Hua, 2010, INT C INF NETWORKING, pV2 6
   Yu Haibo, 2016, INTERNETWARE 16
   Yuan WZ, 2019, INFORM SOFTWARE TECH, V107, P30, DOI 10.1016/j.infsof.2018.10.010
NR 29
TC 4
Z9 4
U1 3
U2 35
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 1
PY 2021
VL 202
AR 102556
DI 10.1016/j.scico.2020.102556
PG 18
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA PC2SJ
UT WOS:000596856600005
DA 2024-07-18
ER

PT J
AU Gamaza, A
   Ortiz, G
   Boubeta-Puig, J
   Garcia-de-Prado, A
AF Gamaza, Angel
   Ortiz, Guadalupe
   Boubeta-Puig, Juan
   Garcia-de-Prado, Alfonso
TI REST4CEP: RESTful APIs for complex event processing
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE RESTful API; Complex event processing; Event-driven service-oriented
   architecture; Decision-making
ID DECISION-MAKING
AB Complex Event Processing (CEP) is a powerful technology thoroughly used in cutting-edge software architectures to support decision-making in multiple domains. Currently, developing such CEP-enhanced software architectures is not an easy task and there are no general purpose Application Programming Interfaces (APIs) which support programming and software development for CEP-based systems. This paper provides two RESTful APIs which support the management, storage and maintenance of events and patterns of interest both in design time and at runtime. This way, we simplify and speed up the flexible development of any CEP-based software architecture. (C) 2020 Elsevier B.V. All rights reserved.
C1 [Ortiz, Guadalupe; Boubeta-Puig, Juan; Garcia-de-Prado, Alfonso] Univ Cadiz, Sch Engn, UCASE Software Engn Grp, Avda Univ Cadiz 10, Cadiz 11519, Spain.
   [Gamaza, Angel] Univ Cadiz, Sch Engn, Cadiz, Spain.
C3 Universidad de Cadiz; Universidad de Cadiz
RP Ortiz, G (corresponding author), Univ Cadiz, Sch Engn, UCASE Software Engn Grp, Avda Univ Cadiz 10, Cadiz 11519, Spain.
EM guadalupe.ortiz@uca.es
RI Ortiz, Guadalupe/K-8601-2014; Boubeta-Puig, Juan/L-9429-2014;
   Garcia-de-Prado, Alfonso/H-4890-2015
OI Ortiz, Guadalupe/0000-0002-5121-6341; Boubeta-Puig,
   Juan/0000-0002-8989-7509; Garcia-de-Prado, Alfonso/0000-0002-6523-9974
FU Spanish Ministry of Science and Innovation; European Union FEDER Funds
   [RTI2018-093608-B-C33]
FX This work was supported by the Spanish Ministry of Science and
   Innovation and the European Union FEDER Funds [grant number
   RTI2018-093608-B-C33].
CR [Anonymous], 2020, FLINK 1 9 DOC FLINKC
   [Anonymous], 2019, API PERSEO CONTEXT A
   [Anonymous], 2020, ACCESSING DATA JPA
   [Anonymous], 2014, COMPLEX EVENT PROCES
   Boubeta-Puig J, 2015, KNOWL-BASED SYST, V89, P97, DOI 10.1016/j.knosys.2015.06.021
   EsperTech, 2020, ESP
   de Prado AG, 2017, IEEE ACCESS, V5, P4646, DOI 10.1109/ACCESS.2017.2679338
   Garcia-de-Prado A, 2018, J UNIVERS COMPUT SCI, V24, P846
   Garcia-De-Prado A, 2017, EXPERT SYST APPL, V85, P231, DOI 10.1016/j.eswa.2017.05.034
   Inzinger C, 2014, SOFTWARE PRACT EXPER, V44, P805, DOI 10.1002/spe.2254
   Luckham D, 2012, EVENT PROCESSING FOR BUSINESS: ORGANIZING THE REAL-TIME ENTERPRISE, P1
   MuleSoft, 2020, MUL ESB
   Papazoglou M., 2012, WEB INF SYST ENG IEE, P3
   Thomas F.R., 2000, ARCHITECTURAL STYLES
NR 14
TC 0
Z9 0
U1 0
U2 7
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 15
PY 2020
VL 198
AR 102515
DI 10.1016/j.scico.2020.102515
PG 6
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA NS6CK
UT WOS:000572346900005
DA 2024-07-18
ER

PT J
AU Halchin, A
   Ait-Ameur, Y
   Singh, NK
   Ordioni, J
   Feliachi, A
AF Halchin, Alexandra
   Ait-Ameur, Yamine
   Singh, Neeraj Kumar
   Ordioni, Julien
   Feliachi, Abderrahmane
TI Handling B models in the PERF integrated verification framework:
   Formalised and certified embedding
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 13th International Symposium on Theoretical Aspects of Software
   Engineering (TASE)
CY JUL 29-AUG 01, 2019
CL Guilin, PEOPLES R CHINA
SP IEEE Comp Soc, Guangxi Normal Univ, Coll Comp Sci & Informat Technol
DE B method; HLL; Isabelle/HOL; Refinement and proofs; Certification
ID PROGRAMMING LANGUAGE; TRANSLATION VALIDATION; CODE GENERATION;
   SPECIFICATIONS; SIGNAL; JAVA
AB The design of complex systems involves several design models supporting different analysis techniques for validation and verification purposes. These activities lead to the definition of heterogeneous modelling languages and analysis techniques. In this setting, meeting certification standards becomes a key issue in system engineering. Reducing heterogeneity due to the presence of different modelling languages can be addressed by providing an integrated framework in which modelling languages and techniques are formalised. In such a framework, checking the global correctness of heterogeneous models of a complex critical system becomes possible in many cases.
   The work presented in this paper addresses the problem of integrated verification of system design models in the context of transportation systems, in particular railway systems. It has been achieved in context of the B-PERFect project of RATP (Parisian Public Transport Operator and Maintainer) aiming at applying formal verification using the PERF approach on the integrated safety-critical models of embedded software related to railway domain expressed in a single unifying modelling language: HLL.
   This paper addresses the particular case of the B method. It presents a certified translation of B formal models to HLL models. The proposed approach uses Isabelle/HOL as a unified logical framework to describe the formal semantics and to formalise the transformation relation between both modelling languages. The developed Isabelle/HOL models are proved in order to guarantee the correctness of our translation process. Moreover, we have also used weak-bisimulation relation to check the correctness of each translation step. We also show that, when models are translated into this unified modelling language, it becomes possible to handle the verification of properties expressed across different models.
   The overall approach is illustrated through a case study issued from a railway software system: on-board localisation function. Furthermore, it discusses the integrated verification at system level. (C) 2020 Elsevier B.V. All rights reserved.
C1 [Halchin, Alexandra; Ordioni, Julien; Feliachi, Abderrahmane] ING STF QS, RATP, 54 Rue Roger Salengro, F-94724 Fontenay Sous Bois, France.
   [Halchin, Alexandra; Ait-Ameur, Yamine; Singh, Neeraj Kumar] IRIT INPT ENSEEIHT, 2 Rue Charles Camichel, F-31071 Toulouse, France.
C3 Universite de Toulouse; Universite Toulouse III - Paul Sabatier;
   Universite Federale Toulouse Midi-Pyrenees (ComUE); Institut National
   Polytechnique de Toulouse
RP Halchin, A (corresponding author), ING STF QS, RATP, 54 Rue Roger Salengro, F-94724 Fontenay Sous Bois, France.; Halchin, A (corresponding author), IRIT INPT ENSEEIHT, 2 Rue Charles Camichel, F-31071 Toulouse, France.
EM alexandra.halchin@ratp.fr; yamine@enseeiht.fr; nsingh@enseeiht.fr;
   julien.ordioni@ratp.fr; abderrahmane.feliachi@ratp.fr
RI Singh, Neeraj Kumar/AAJ-3674-2021
OI Singh, Neeraj Kumar/0000-0002-7894-3354; Yamine, AIT
   AMEUR/0000-0003-4582-9712
CR Abrial J.-R., 1996, B BOOK ASSIGNING PRO
   Abrial J R, 2010, Modeling in Event-B: system and softeng
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], 2002, THESIS
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], 2015, P 18 INT WORKSH SOFT
   [Anonymous], 1979, LECT NOTES COMPUTER
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], 1999, 147411999 IEEE RAIL, DOI DOI 10.1109/IEEESTD.1999.90611
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   Badeau F, 2005, LECT NOTES COMPUT SC, V3455, P334
   Badeau F., 2004, Technique et Science Informatiques, V23, P879, DOI 10.3166/tsi.23.879-903
   Behm P, 1999, LECT NOTES COMPUT SC, V1708, P369
   Benaissa N, 2016, LECT NOTES COMPUT SC, V9707, P203, DOI 10.1007/978-3-319-33951-1_15
   Berghofer S, 2004, PROCEEDINGS OF THE SECOND INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING AND FORMAL METHODS, P230, DOI 10.1109/SEFM.2004.1347524
   Bert D, 2003, LECT NOTES COMPUT SC, V2805, P94
   BERTOT Y, 2004, COQ ART CALCULUS IND
   Blech JO, 2007, ELECTRON NOTES THEOR, V190, P65, DOI 10.1016/j.entcs.2007.09.008
   Bonichon R, 2015, LECT NOTES COMPUT SC, V8941, P1, DOI [10.1007/978-3-319-15075-8_1, 10.1007/978-3-319-15075-8-1]
   Bourke T, 2017, ACM SIGPLAN NOTICES, V52, P586, DOI [10.1145/3140587.3062358, 10.1145/3062341.3062358]
   BRANDIS MM, 1994, ACM T PROGR LANG SYS, V16, P1684, DOI 10.1145/197320.197331
   Catano Nestor, 2012, P ACM S APPL COMPUTI, P1271
   Chartier P, 1998, LECT NOTES COMPUT SC, V1393, P66
   Dutle AM, 2015, LECT NOTES COMPUT SC, V9154, P92, DOI 10.1007/978-3-319-21215-9_6
   Essame D., 2006, B 2007: Formal Specification and Development in B. 7th International Conference of B Users. Proceedings (Lecture Notes in Computer Science vol.4355), P252
   HALBWACHS N, 1991, P IEEE, V79, P1305, DOI 10.1109/5.97300
   Halbwachs Nicolas., 1994, Algebraic Methodology and Software Technology (AMAST'93), P83, DOI DOI 10.1007/978-1-4471-3227-1_8
   Halchin Alexandra, 2017, Reliability, Safety, and Security of Railway Systems. Modelling, Analysis, Verification, and Certification. Second International Conference, RSSRail 2017. Proceedings LNCS 10598, P160, DOI 10.1007/978-3-319-68499-4_11
   Leroy X, 2009, COMMUN ACM, V52, P107, DOI 10.1145/1538788.1538814
   Mammar A, 2006, INFORM SOFTWARE TECH, V48, P253, DOI 10.1016/j.infsof.2005.05.002
   Mashkoor A, 2017, REQUIR ENG, V22, P433, DOI 10.1007/s00766-016-0246-6
   Méry D, 2010, COMPLEX SYSTEMS DESIGN AND MANAGEMENT, P49, DOI 10.1007/978-3-642-15654-0_3
   Nipkow T, 2000, NATO ADV SCI I F-COM, V175, P117
   Nipkow Tobias, 2002, ISABELLE HOL PROOF A
   Petit-Doche M., 2015, FORMAL METHODS IND C, P1
   Pnueli A, 1999, LECT NOTES COMPUT SC, V1710, P231
   Prasad M. R., 2005, International Journal on Software Tools for Technology Transfer, V7, P156, DOI 10.1007/s10009-004-0183-4
   Ryabtsev M, 2009, LECT NOTES COMPUT SC, V5643, P696, DOI 10.1007/978-3-642-02658-4_57
   Sangiorgi D., 1998, Mathematical Structures in Computer Science, V8, P447, DOI 10.1017/S0960129598002527
   Schneider K, 2001, SECOND INTERNATIONAL CONFERENCE ON APPLICATION OF CONCURRENCY TO SYSTEMS DESIGN, PROCEEDINGS, P143, DOI 10.1109/CSD.2001.981772
   Schneider S, 2015, LECT NOTES COMPUT SC, V9236, P344, DOI 10.1007/978-3-319-22102-1_23
   Servat T., 2006, B 2007: Formal Specification and Development in B. 7th International Conference of B Users. Proceedings (Lecture Notes in Computer Science vol.4355), P274
   Strecker M., 2002, Automated Deduction - CADE-18. 18th International Conference on Automated Deduction. Proceedings (Lecture Notes in Artificial Intelligence Vol.2392), P63
   Tatibouët B, 2003, LECT NOTES COMPUT SC, V2885, P306
   Yang FQ, 2013, ASIA PAC SOFWR ENG, P571, DOI 10.1109/APSEC.2013.83
   Yang ZB, 2013, FRONT COMPUT SCI-CHI, V7, P673, DOI 10.1007/s11704-013-3908-2
NR 57
TC 0
Z9 0
U1 0
U2 4
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29a, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 15
PY 2020
VL 196
AR 102477
DI 10.1016/j.scico.2020.102477
PG 31
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA LY6WG
UT WOS:000540668900002
DA 2024-07-18
ER

PT J
AU Saadatjoo, MA
   Babamir, SM
AF Saadatjoo, Mohammad Ali
   Babamir, Seyed Morteza
TI Test-data generation directed by program path coverage through
   imperialist competitive algorithm
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Structural testing; Path coverage; Test data generation; Evolutionary
   algorithm (EA); Imperialist Competitive Algorithm (ICA); Mutation
   testing; ANOVA; T-test
ID OPTIMIZATION; SELECTION
AB Path coverage testing is an approach to ensure all paths of a program from starting node to terminal node are traversed at least once. Such testing considerably helps reveal program faults. However, disregarding iterated paths in loops, any module of a program with n decisions can have up to 2(n) paths. Therefore, finding adequate test data to cover all or most of such paths throughout a program with numerous modules is an NP-Hard problem because it requires an exhaustive search among all possible data. Another concern is determining the efficiency and adequacy of test data according to the coverage criterion. For the path coverage criterion, a test data set is fully efficient if each item of the set covers a separate program path and is fully adequate if the test data cover all program paths. Providing such test data for a program is a very time-consuming action when the program has high complexity (i.e., many paths). A candidate solution for these problems is using Evolutionary Algorithms (EAs). We use an EA named the Imperialist Competitive Algorithm (ICA) to generate test data and assess its effectiveness based on both path coverage and discovered faults. The focus here is on the EA cost function, because it influences the generation of adequate test data. Considering the nondeterministic nature of the EAs in data reproduction, several experiments are carried out by applying statistical tests, ANOVA and T-test to indicate the significant difference between them in producing efficient test data. (C) 2019 Elsevier B.V. All rights reserved.
C1 [Saadatjoo, Mohammad Ali; Babamir, Seyed Morteza] Univ Kashan, Dept Comp Engn, Kashan, Iran.
C3 University Kashan
RP Babamir, SM (corresponding author), Univ Kashan, Dept Comp Engn, Kashan, Iran.
EM babam@kashanu.ac.ir
RI Babamir, Seyed Morteza/F-5497-2011
OI Babamir, Seyed Morteza/0000-0002-1645-4002
FU University of Kashan [15643]
FX The authors wish to thank the University of Kashan for supporting this
   research by grant No. 15643.
CR Agrawal H., 1989, SERCTR41P PURD U PRO
   Ahmed MA, 2008, COMPUT OPER RES, V35, P3107, DOI 10.1016/j.cor.2007.01.012
   Amirsadri S., 2014, METAHEURISTICS ENG
   Ammann Paul, 2008, Introduction to software testing, V1st
   [Anonymous], 2011, PROCEDIA ENG
   [Anonymous], 2009, ENG STAT
   [Anonymous], 2018, DISCOVERING STAT USI
   Arcuri A, 2017, LECT NOTES COMPUT SC, V10452, P3, DOI 10.1007/978-3-319-66299-2_1
   Arcuri A, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P1, DOI 10.1145/1985793.1985795
   Atashpaz-Gargari E, 2007, IEEE C EVOL COMPUTAT, P4661, DOI 10.1109/CEC.2007.4425083
   Bahrami H, 2010, 2010 12TH INTERNATIONAL CONFERENCE ON COMPUTER MODELLING AND SIMULATION (UKSIM), P98, DOI 10.1109/UKSIM.2010.26
   Baker R, 2013, IEEE T SOFTWARE ENG, V39, P787, DOI 10.1109/TSE.2012.56
   Boyabatli O., 2004, J SYSTEMICS CYBERNET, V4, P78
   Budd T.A., 1981, J COMPUT PROGR TEST, V129
   Chuaychoo N., 2017, J TELECOMMUN ELECT E, V2, P115
   Daran M., 1996, SIGSOFT Software Engineering Notes, V21, P158, DOI [10.1145/229000.226313, 10.1145/226295.226313]
   Delamaro ME, 2014, IEEE ICST WORKSHOP, P171, DOI 10.1109/ICSTW.2014.22
   Deng L, 2013, 2013 IEEE SIXTH INTERNATIONAL CONFERENCE ON SOFTWARE TESTING, VERIFICATION AND VALIDATION (ICST 2013), P84, DOI 10.1109/ICST.2013.20
   Domínguez-Jiménez JJ, 2011, INFORM SOFTWARE TECH, V53, P1108, DOI 10.1016/j.infsof.2011.03.008
   Du Qingfeng, 2011, Proceedings of the 2011 International Conference on Business Management and Electronic Information (BMEI 20111), P175, DOI 10.1109/ICBMEI.2011.5920422
   Fraser G, 2015, EMPIR SOFTW ENG, V20, P611, DOI 10.1007/s10664-013-9288-2
   Fraser G, 2013, IEEE T SOFTWARE ENG, V39, P276, DOI 10.1109/TSE.2012.14
   Ghezzi C., 2002, FUNDAMENTALS PROGRAM
   Gong DW, 2013, FRONT COMPUT SCI-CHI, V7, P822, DOI 10.1007/s11704-013-3024-3
   Harman M, 2010, IEEE T SOFTWARE ENG, V36, P226, DOI 10.1109/TSE.2009.71
   Hogg R. V., 2015, Probability, and statistical inference, V9e
   Hosseini S, 2014, APPL SOFT COMPUT, V24, P1078, DOI 10.1016/j.asoc.2014.08.024
   Hutcheson M.L., 2003, PROGRAM TESTING FUND
   Jatana N, 2016, LECT NOTES COMPUT SC, V9790, P585, DOI 10.1007/978-3-319-42092-9_44
   Jia Y, 2008, TACI PART 2008:TESTING: ACADEMIC AND INDUSTRIAL CONFERENCE PRACTICE AND RESEARCH TECHNIQUES, PROCEEDINGS, P94, DOI 10.1109/TAIC-PART.2008.18
   Jordehi AR, 2013, J EXP THEOR ARTIF IN, V25, P527, DOI 10.1080/0952813X.2013.782348
   Keyvanpour M. R., 2011, J SOFTWARE ENG, V5, P91, DOI DOI 10.3923/JSE.2011.91.101
   Lucas C, 2010, ENERG CONVERS MANAGE, V51, P1407, DOI 10.1016/j.enconman.2010.01.014
   Masud M., 2005, PROC CAN C ELECT COM, P1049
   Mresa E. S., 1999, Software Testing, Verification and Reliability, V9, P205, DOI 10.1002/(SICI)1099-1689(199912)9:4<205::AID-STVR186>3.0.CO;2-X
   Panichella A, 2017, LECT NOTES COMPUT SC, V10452, P83, DOI 10.1007/978-3-319-66299-2_6
   Peeze M., 2007, SOFTWARE TESTING ANA
   Usaola MP, 2010, IEEE SOFTWARE, V27, P80, DOI 10.1109/MS.2010.79
   Rothermel G., 2006, PROGRAM ARTIFACT INF
   Rui Ding, 2012, Proceedings 2012 IEEE Symposium on Electrical & Electronics Engineering (EEESYM 2012), P670, DOI 10.1109/EEESym.2012.6258748
   Saadatjoo M.A., 2018, J AL DATA MIN, V6, P375
   Scalabrino S, 2016, LECT NOTES COMPUT SC, V9962, P64, DOI 10.1007/978-3-319-47106-8_5
   Singh Y., 2011, PROGRAM TESTING
   Singh Y., 2007, PROGRAM ENG
   Souza F.C., 2014, P 11 IESELAW, P1
   Su T, 2017, ACM COMPUT SURV, V50, DOI 10.1145/3020266
   Wang G.-j, 2011, ADV INFORM SCI SERVI, V3, P108
   Wei Y, 2012, LECT NOTES COMPUT SC, V7007, P194
   Yousefikhoshbakht M, 2013, INT J COMPUT MATH, V90, P1495, DOI 10.1080/00207160.2012.758362
NR 49
TC 10
Z9 10
U1 3
U2 5
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 1
PY 2019
VL 184
AR 102304
DI 10.1016/j.scico.2019.102304
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA JM6QO
UT WOS:000496336900001
OA Bronze
DA 2024-07-18
ER

PT J
AU Abbassi, IH
   Khalid, F
   Hasan, O
   Kamboh, AM
AF Abbassi, Imran Hafeez
   Khalid, Faiq
   Hasan, Osman
   Kamboh, Awais Mehmood
TI Using gate-level side channel parameters for formally analyzing
   vulnerabilities in integrated circuits
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Gate level modeling; Formal verification; Hardware Trojan; Model
   checking; Side channel parameters
AB The rising trend of globalization in integrated circuits (ICs) design and fabrication process has increased their vulnerability against malicious intrusions and alterations. Such modifications, also referred as Hardware Trojans (HTs), can lead to highly detrimental consequences like causing an IC to subvert normal operation, leak sensitive information or inducing denial of service (DoS). The vulnerability analysis of ICs against the malicious intrusions with conventional design-time testing and exhaustive simulations is computationally intensive, and it takes substantial resources and time for all-encompassing verification. To overcome these limitations, we propose a formal framework, based on gate-level side channel parameters, for a-priori assessment of IC vulnerability against HTs at the early stages of the design. This work employs formal modeling of the IC behavior in terms of switching power, propagation delay and leakage in order to examine the impact of malicious intrusions. We used the bounded model checker nuXmv, to formally verify and analyze the identified properties, owing to its inherent ability to handle real numbers and its support for analyzing infinite state domains. The vulnerabilities of ICs against HTs, and their effects on the IC nodes are assessed by analyzing linear temporal logic (LTL) properties, which are subsequently rendered into behavioral traces. We demonstrate the effectiveness of our approach on a set of ISCAS benchmarks. (C) 2018 Elsevier B.V. All rights reserved.
C1 [Abbassi, Imran Hafeez; Hasan, Osman; Kamboh, Awais Mehmood] NUST, Sch Elect Engn & Comp Sci, Islamabad 44000, Pakistan.
   [Khalid, Faiq] Vienna Univ Technol TU Wien, Inst Comp Engn, A-1040 Vienna, Austria.
C3 National University of Sciences & Technology - Pakistan; Technische
   Universitat Wien
RP Abbassi, IH (corresponding author), NUST, Sch Elect Engn & Comp Sci, Islamabad 44000, Pakistan.; Khalid, F (corresponding author), Vienna Univ Technol TU Wien, Inst Comp Engn, A-1040 Vienna, Austria.
EM imran.abbasi@seecs.edu.pk; faiq.khalid@tuwien.ac.at;
   osman.hasan@seecs.edu.pk; awais.kamboh@seecs.edu.pk
RI Khalid, Faiq/HKN-2553-2023
OI Khalid, Faiq/0000-0001-6263-674X; Hasan, osman/0000-0003-2562-2669;
   Kamboh, Awais Mehmood/0000-0002-7491-1590
CR Abbasi IH, 2017, COMM COM INF SC, V694, P75, DOI 10.1007/978-3-319-53946-1_5
   Adee S, 2008, IEEE SPECTRUM, V45, P34, DOI 10.1109/MSPEC.2008.4505310
   Agrawal D., 2017, S SEC PRIV, P296
   Anderson M.S, 2008, DSTOTR2220
   [Anonymous], SPECTRE CIRCUIT SIMU
   [Anonymous], 2002, CAV, DOI DOI 10.1007/3-540-45657-0
   [Anonymous], 2018, ISCAS85 C3540 ALU
   Bhasin Shivam, 2015, 2015 IEEE International Symposium on Circuits and Systems (ISCAS). Proceedings, P2021, DOI 10.1109/ISCAS.2015.7169073
   Bhunia S, 2014, P IEEE, V102, P1229, DOI 10.1109/JPROC.2014.2334493
   Biere A, 2009, FRONT ARTIF INTEL AP, V185, P457, DOI 10.3233/978-1-58603-929-5-457
   Butzen P. F., 2006, Leakage current in sub-micrometer CMOS gates, P1
   Cavada R, 2014, LECT NOTES COMPUT SC, V8559, P334, DOI 10.1007/978-3-319-08867-9_22
   Chakraborty RS, 2017, IEEE T EMERG TOP COM, V5, P260, DOI 10.1109/TETC.2017.2654268
   Chakraborty RS, 2009, LECT NOTES COMPUT SC, V5747, P396
   Di Natale G., 2012, DCIS'2012: XVII Conference on Design of Circuits and Integrated Systems, P238
   Drechsler R., 2004, Advanced formal verification
   Du DD, 2010, LECT NOTES COMPUT SC, V6225, P173, DOI 10.1007/978-3-642-15031-9_12
   Force T., 2005, HIGH PERFORMANCE MIC
   Hansen MC, 1999, IEEE DES TEST COMPUT, V16, P72, DOI 10.1109/54.785838
   Hasan S., 2015, inEncyclopediaof Information Science and Technology, V3rd, P7162, DOI DOI 10.4018/978-1-4666-5888-2.CH705
   Hasan S. R., 2016, IEEE ASIAN HARDWAREO, P1, DOI DOI 10.1109/ASIANHOST.2016.7835571
   Ismari D., 2016, P INT C COMPUTER AID, P1
   Karunakaran D. K., 2014, 5 INT C COMP COMM NE, P1, DOI DOI 10.1109/ICCCNT.2014.6963036
   Khalid F, 2018, INTEGRATION, V61, P62, DOI 10.1016/j.vlsi.2017.11.003
   Lang Lin, 2009, Proceedings of the 2009 IEEE/ACM International Conference on Computer-Aided Design (ICCAD 2009), P117
   Lesperance N, 2015, ASIA S PACIF DES AUT, P755, DOI 10.1109/ASPDAC.2015.7059101
   Li M, 2012, DES AUT TEST EUROPE, P1331
   Liu Y, 2017, IEEE T VLSI SYST, V25, P1506, DOI 10.1109/TVLSI.2016.2633348
   Lodhi FK, 2016, IEEE INT SYMP CIRC S, P1702, DOI 10.1109/ISCAS.2016.7538895
   Lodhi F.K., 2015, P NORD CIRC SYST C N, P1
   Lodhi FK, 2016, J ELECTRON TEST, V32, P569, DOI 10.1007/s10836-016-5619-8
   Lodhi FK, 2014, MIDWEST SYMP CIRCUIT, P659, DOI 10.1109/MWSCAS.2014.6908501
   Markovic D, 2010, P IEEE, V98, P237, DOI 10.1109/JPROC.2009.2035453
   Mitra S, 2015, IEEE SPECTRUM, V52, P46, DOI 10.1109/MSPEC.2015.7024511
   Narendra S.G., 2006, LEAKAGE NANOMETER CM
   Nejat A, 2014, MICROPROCESS MICROSY, V38, P246, DOI 10.1016/j.micpro.2014.01.003
   Ngo XT, 2015, 2015 EUROPEAN CONFERENCE ON CIRCUIT THEORY AND DESIGN (ECCTD), P97
   Poschmann Axel Y., 2013, P WORKSH EMB SYST SE, P1
   Potkonjak M, 2009, DES AUT CON, P688
   Qu G, 2014, ICCAD-IEEE ACM INT, P411, DOI 10.1109/ICCAD.2014.7001384
   Rabaey J.M., 2002, Digital Integrated CircuitA Design Perspective, V2nd ed.
   Rathmair Michael, 2013, 2013 IEEE 4th International Conference on Electronics Information and Emergency Communication (ICEIEC), P317, DOI 10.1109/ICEIEC.2013.6835515
   Razavi B., 2001, Design of Analog CMOS Integrated Circuits, V1st
   Saha S, 2015, LECT NOTES COMPUT SC, V9293, P577, DOI 10.1007/978-3-662-48324-4_29
   Srivastava A., 2006, Statistical analysis and optimization for VLSI: timing and power
   Tehranipoor M, 2010, IEEE DES TEST COMPUT, V27, P10, DOI 10.1109/MDT.2010.7
   Wang LW, 2013, INT CONF QUALITY REL, P1164, DOI 10.1109/QR2MSE.2013.6625774
   Wei S, 2011, IEEE T INF FOREN SEC, V6, P1136, DOI 10.1109/TIFS.2011.2157341
   Wei S, 2010, DES AUT CON, P222
   Weste N. H. E., 2011, CIRCUITS SYSTEMS PER
   Wolff F, 2008, DES AUT TEST EUROPE, P1474
   Wu TF, 2016, IEEE T COMPUT AID D, V35, P521, DOI 10.1109/TCAD.2015.2474373
   Xiao K, 2016, ACM T DES AUTOMAT EL, V22, DOI 10.1145/2906147
   Zhang X, 2011, COMM COM INF SC, V243, P67
NR 54
TC 3
Z9 3
U1 0
U2 5
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 15
PY 2019
VL 171
BP 42
EP 66
DI 10.1016/j.scico.2018.11.001
PG 25
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA HI9CQ
UT WOS:000456753300003
OA Bronze
DA 2024-07-18
ER

PT J
AU Brandalero, M
   da Silveira, LA
   Souza, JD
   Beck, ACS
AF Brandalero, Marcelo
   da Silveira, Leonardo Almeida
   Souza, Jeckson Dellagostin
   Schneider Beck, Antonio Carlos
TI Accelerating error-tolerant applications with approximate function reuse
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Function reuse; Approximate computing; Performance
AB Function reuse is a promising approach to accelerate single-threaded applications and exceed the limits of instruction-level parallelism. This approach exploits the observation that certain functions are executed several times with the same inputs, producing the same output repeatedly. Therefore, by saving these results once in a reuse table, it is possible to skip all subsequent calls with the same set of inputs, instead replacing it by a table look-up. However, the table tends to get very large due to the diversity of inputs, impacting negatively on access times, area (in case of hardware implementations) and power. In this work, we combine function reuse with approximation, exploiting the characteristic that some applications are naturally error-tolerant, to collapse similar table entries together - thereby compressing the table and increasing reuse rates. By using benchmarks from the AxBench suite, we show that precise function reuse achieves only very small reuse rates due to the vast diversity of inputs. However, by applying approximation, it is possible to trade less than 10% quality degradation for more than 50% reuse rate. (C) 2017 Elsevier B.V. All rights reserved.
C1 [Brandalero, Marcelo; da Silveira, Leonardo Almeida; Souza, Jeckson Dellagostin; Schneider Beck, Antonio Carlos] Univ Fed Rio Grande do Sul, Inst Informat, Porto Alegre, RS, Brazil.
C3 Universidade Federal do Rio Grande do Sul
RP Brandalero, M (corresponding author), Univ Fed Rio Grande do Sul, Inst Informat, Porto Alegre, RS, Brazil.
EM mbrandalero@inf.ufrgs.br; lasilveira@inf.ufrgs.br; jdsouza@inf.ufrgs.br;
   caco@inf.ufrgs.br
RI Brandalero, Marcelo/U-7980-2019; Beck, Antonio Carlos
   Schneider/AAD-3552-2020
OI Brandalero, Marcelo/0000-0002-0012-7023; Beck, Antonio Carlos
   Schneider/0000-0002-4492-1747
CR [Anonymous], 2001, TECH REP
   [Anonymous], 2011, P DESIGN AUTOMAT TES, DOI DOI 10.1109/DATE.2011.5763154
   Browne S, 2000, INT J HIGH PERFORM C, V14, P189, DOI 10.1177/109434200001400303
   Chakradhar ST, 2010, DES AUT CON, P865
   Chaudhuri S., 2011, P 19 ACM SIGSOFT S 1, P102, DOI DOI 10.1145/2025113.2025131
   Esmaeilzadeh H, 2015, COMMUN ACM, V58, P105, DOI 10.1145/2589750
   Gonzalez A., 1999, Proceedings of the 1999 International Conference on Parallel Processing, P30, DOI 10.1109/ICPP.1999.797385
   Grigorian B, 2015, INT S HIGH PERF COMP, P615, DOI 10.1109/HPCA.2015.7056067
   Gupta V., 2011, 2011 International Symposium on Low Power Electronics and Design (ISLPED 2011), P409, DOI 10.1109/ISLPED.2011.5993675
   Huang JA, 1999, FIFTH INTERNATIONAL SYMPOSIUM ON HIGH-PERFORMANCE COMPUTER ARCHITECTURE, PROCEEDINGS, P106, DOI 10.1109/HPCA.1999.744342
   Kavi K., 2003, P 11 INT C ADV COMP
   Kumar KVS, 2003, ACM SIGPLAN NOTICES, V38, P60, DOI 10.1145/944579.944591
   Lipasti MH, 1996, PROCEEDINGS OF THE 29TH ANNUAL IEEE/ACM INTERNATIONAL SYMPOSIUM ON MICROARCHITECTURE - MICRO-29, P226, DOI 10.1109/MICRO.1996.566464
   Misailovic Sasa, 2010, 32 INT C SOFTW ENG, p25S34, DOI [10.1145/1806799.1806808, DOI 10.1145/1806799.1806808]
   Moreau T, 2015, INT S HIGH PERF COMP, P603, DOI 10.1109/HPCA.2015.7056066
   Olukotun K., 2005, ACM Queue, V3, P26, DOI 10.1145/1095408.1095418
   Ranganathan P, 2000, PROCEEDING OF THE 27TH INTERNATIONAL SYMPOSIUM ON COMPUTER ARCHITECTURE, P214, DOI [10.1145/342001.339685, 10.1109/ISCA.2000.854392]
   Sodani A, 1997, ACM COMP AR, P194, DOI 10.1145/384286.264200
   Suresh A, 2015, ACM T ARCHIT CODE OP, V12, DOI 10.1145/2751559
   Xu Q, 2016, IEEE DES TEST, V33, P8, DOI 10.1109/MDAT.2015.2505723
   Yazdanbakhsh A., 2016, IEEE DES TEST SPECIA, V2016
   Yazdanbakhsh A, 2015, PROCEEDINGS OF THE 48TH ANNUAL IEEE/ACM INTERNATIONAL SYMPOSIUM ON MICROARCHITECTURE (MICRO-48), P482, DOI 10.1145/2830772.2830810
NR 22
TC 3
Z9 4
U1 0
U2 0
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 1
PY 2018
VL 165
SI SI
BP 54
EP 67
DI 10.1016/j.scico.2017.05.003
PG 14
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GV3KH
UT WOS:000445992300005
OA Bronze
DA 2024-07-18
ER

PT J
AU Kedzia, K
   Ptak, W
   Sroka, J
   Kierzek, AM
AF Kedzia, Kamil
   Ptak, Wojtek
   Sroka, Jacek
   Kierzek, Andrzej M.
TI Simulation of multicellular populations with Petri nets and genome scale
   intracellular networks
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Petri net; Genome scale metabolic network; Multicellular population;
   Distributed processing; Large graph processing
ID MYCOBACTERIUM-TUBERCULOSIS; MODEL
AB We present a new distributed architecture allowing simulation of living cells in spatial structures. Each cell is represented with a Quasi-Steady State Petri Net that integrates dynamic regulatory network expressed with a Petri net and Genome Scale Metabolic Network (GSMN) where linear programming is used to explore the steady-state metabolic flux distributions in the whole-cell model.
   The combination of Petri net and GSMN has already been used in simulations of single cells, but we present an extension to the model and an architecture to simulate populations of millions of interacting cells organised in spatial structures which can be used to model tumour growth or formation of tuberculosis lesions. The crucial element of this solution is the ability of cells to communicate by producing and detecting substances such as cytokines and chemokines. This ability is modeled by allowing cells to share tokens in places called communicators.
   To make the simulation of such a huge model possible we use the Spark framework and organise the computation in an agent-based "think like a vertex" fashion as in Pregel-like systems. In the cluster we introduce a special kind of per node caching to speed up computation of the steady-state metabolic flux.
   We demonstrate capabilities of the new architecture by simulating communication of liver cells through FGF19 cytokine during the homeostatic response to cholesterol burst. Our approach can be used for mechanistic modelling of the emergence of multicellular system behaviour from interaction between genome and environment. (C) 2017 Elsevier B.V. All rights reserved.
C1 [Kedzia, Kamil; Ptak, Wojtek; Sroka, Jacek] Univ Warsaw, Inst Informat, Warsaw, Poland.
   [Kierzek, Andrzej M.] Blades Enterprise Ctr, Certara Quantitat Syst Pharmacol, John St, Sheffield S2 4SU, S Yorkshire, England.
C3 University of Warsaw; Certara UK Ltd
RP Sroka, J (corresponding author), Univ Warsaw, Inst Informat, Warsaw, Poland.
EM k.kedzia@mimuw.edu.pl; w.ptak@mimuw.edu.pl; j.sroka@mimuw.edu.pl;
   andrzej.kierzek@certara.com
OI Sroka, Jacek/0000-0002-1714-9667
FU National Science Centre [DEC-2012/07/D/ST6/02492]
FX This research was sponsored by the National Science Centre based on
   decision DEC-2012/07/D/ST6/02492. We are grateful to Microsoft for
   providing us with a computational grant to use the Azure cloud computing
   platform.
CR [Anonymous], 2012, NSDI
   Balbo G., 2001, INTRO STOCHASTIC PET, P84
   Bertens LMF, 2016, NAT COMPUT, V15, P665, DOI 10.1007/s11047-015-9531-4
   Bordbar A, 2014, NAT REV GENET, V15, P107, DOI 10.1038/nrg3643
   Bray D, 1998, NATURE, V393, P85, DOI 10.1038/30018
   David R, 2010, DISCRETE CONTINUOUS, DOI DOI 10.1007/978-3-642-10669-9
   Dean J, 2004, USENIX ASSOCIATION PROCEEDINGS OF THE SIXTH SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION (OSDE '04), P137
   DrugBank, DIN DB00917
   Dufourd C., 1998, RESET NETS DECIDABIL, P103, DOI [10.1007/BFb0055044, DOI 10.1007/BFB0055044]
   Fisher CP, 2013, BIOINFORMATICS, V29, P3181, DOI 10.1093/bioinformatics/btt552
   Gille C, 2010, MOL SYST BIOL, V6, DOI 10.1038/msb.2010.62
   GILLESPIE DT, 1977, J PHYS CHEM-US, V81, P2340, DOI 10.1021/j100540a008
   Gonzalez J.E., 2014, 11 USENIX S OP SYST, P599
   Greenhough A, 2009, CARCINOGENESIS, V30, P377, DOI 10.1093/carcin/bgp014
   Jacobsen A, 2016, PLOS ONE, V11, DOI 10.1371/journal.pone.0155743
   Janowski Sebastian, 2010, In Silico Biology, V10, P27, DOI 10.3233/ISB-2010-0418
   Jensen K, 2009, COLOURED PETRI NETS: MODELLING AND VALIDATION OF CONCURRENT SYSTEMS, P1, DOI 10.1007/b95112
   Klamt S, 2006, BMC BIOINFORMATICS, V7, DOI 10.1186/1471-2105-7-56
   Kleijn J, 2012, THEOR COMPUT SCI, V429, P185, DOI 10.1016/j.tcs.2011.12.038
   Lewis NE, 2012, NAT REV MICROBIOL, V10, P291, DOI 10.1038/nrmicro2737
   Li TG, 2012, J LIPIDS, V2012, DOI 10.1155/2012/754067
   Marino S, 2004, J THEOR BIOL, V227, P463, DOI 10.1016/j.jtbi.2003.11.023
   Merkel D., 2014, Docker: lightweight Linux containers for consistent development and deployment, V2014, DOI DOI 10.5555/2600239.2600241
   Orth JD, 2010, NAT BIOTECHNOL, V28, P245, DOI 10.1038/nbt.1614
   Peterson J.L., 1981, Petri Net Theory and the Modeling of Systems
   Pienaar E, 2016, INFECT IMMUN, V84, P1650, DOI 10.1128/IAI.01438-15
   Ptak W, 2016, LECT NOTES COMPUT SC, V9698, P113, DOI 10.1007/978-3-319-39086-4_8
   Remy E, 2003, BIOINFORMATICS, V19, pII172, DOI 10.1093/bioinformatics/btg1075
   Rohr C, 2010, BIOINFORMATICS, V26, P974, DOI 10.1093/bioinformatics/btq050
   Ruths D, 2008, PLOS COMPUT BIOL, V4, DOI 10.1371/journal.pcbi.1000005
   Sackmann A, 2006, BMC BIOINFORMATICS, V7, DOI 10.1186/1471-2105-7-482
   THIAGARAJAN PS, 1987, LECT NOTES COMPUT SC, V254, P26
   Tyson JJ, 2001, NAT REV MOL CELL BIO, V2, P908, DOI 10.1038/35103078
   VALIANT LG, 1990, COMMUN ACM, V33, P103, DOI 10.1145/79173.79181
   Vogler W., 1998, UNFOLDING FINITE PRE, P501, DOI [10.1007/BFb0055644, DOI 10.1007/BFB0055644]
   Wu HH, 2016, NPJ SYST BIOL APPL, V2, DOI 10.1038/npjsba.2016.32
   ZUBEREK WM, 1991, MICROELECTRON RELIAB, V31, P627, DOI 10.1016/0026-2714(91)90007-T
NR 37
TC 0
Z9 0
U1 0
U2 6
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 1
PY 2018
VL 157
SI SI
BP 3
EP 16
DI 10.1016/j.scico.2017.10.002
PG 14
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GB9KE
UT WOS:000429391900002
OA hybrid
DA 2024-07-18
ER

PT J
AU Berger, U
   James, P
   Lawrence, A
   Roggenbach, M
   Seisenberger, M
AF Berger, Ulrich
   James, Phillip
   Lawrence, Andrew
   Roggenbach, Markus
   Seisenberger, Monika
TI Verification of the European Rail Traffic Management System in Real-Time
   Maude
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Railway signalling; ERTMS/ETCS; Hybrid systems; Real-Time Maude;
   Model-checking
ID MODEL CHECKING; FORMAL METHODS; TRAIN; GENERATION; DOMAIN
AB The European Rail Traffic Management System (ERTMS) is a state-of-the-art train control system designed as a standard for railways across Europe. It generalises traditional discrete interlocking systems to a world in which trains hold on-board equipment for signalling, and trains and interlockings communicate via radio block processors. The ERTMS aims at improving performance and capacity of rail traffic systems without compromising their safety.
   The ERTMS system is of hybrid nature, in contrast to classical railway signalling systems which deal with discrete data only. Consequently, the switch to ERTMS poses a number of research questions to the formal methods community, most prominently: How can safety be guaranteed? In this paper we present the first formal modelling of ERTMS comprising all subsystems participating in its control cycle. We capture what safety means in physical and in logical terms, and we demonstrate that it is feasible to prove safety of ERTMS systems utilising Real-Time Maude model-checking by considering a number of bi-directional track layouts.
   ERTMS is currently being installed in many countries. It will be the main train control standard for the foreseeable future. The concepts presented in this paper offer applicable methods supporting the design of dependable ERTMS systems. We demonstrate model checking to be a viable option in the analysis of large and complex real-time systems. Furthermore, we establish Real-Time Maude as a modelling and verification tool applicable to the railway domain.
   The approach given in this paper is a rigorous one. In order to avoid modelling errors, we follow a systematic approach: First, as a requirement specification, we identify the event-response structures present in the ERTMS. Then, we model these structures in Real-Time Maude in a traceable way, i.e., specification text in Real-Time Maude can be directly mapped to requirements. We explore our models by checking if they have the desired behaviour, and apply systematic model-exploration through error injection - both these steps are carried out using the formal method Real-Time Maude. Finally, we analyse ERTMS by model-checking, thus applying a formal method to the railway domain, and we mathematically prove that our analysis of ERTMS by model-checking is complete, i.e., that it guarantees safety at all times. (C) 2017 Elsevier B.V. All rights reserved.
C1 [Berger, Ulrich; James, Phillip; Roggenbach, Markus; Seisenberger, Monika] Swansea Univ, Swansea, W Glam, Wales.
   [Lawrence, Andrew] Siemens Rail Automat UK, Chippenham, England.
C3 Swansea University
RP Seisenberger, M (corresponding author), Swansea Univ, Swansea, W Glam, Wales.
EM m.seisenberger@swansea.ac.uk
OI Roggenbach, Markus/0000-0002-3819-2787
FU Siemens Rail Automation UK; EPSRC [EP/P5057631]; EPSRC [EP/M022722/1]
   Funding Source: UKRI
FX The authors would like to thank Simon Chadwick, Siemens Rail Automation
   UK, for his continued support and many helpful discussions. We also
   appreciate the useful feedback and advice from Peter Olveczky and Jose
   Meseguer on Real-Time Maude. As usual, Erwin R. Catesbeiana (Jr) was
   keeping us on track. We are also grateful to the three anonymous
   referees for their helpful comments and constructive criticism. Finally,
   the financial support of Siemens Rail Automation UK and EPSRC
   (EP/P5057631) is gratefully acknowledged.
CR Alcatel Alstom, 2006, SYSTEM REQUIREMENTS
   Banci M., 2005, SOFTWARE ENG FORMAL
   Bjorner D, 2004, INT FED INFO PROC, V156, P607
   Chiappini A., 2010, 2010 32nd International Conference on Software Engineering (ICSE), P109, DOI 10.1145/1810295.1810312
   Cimatti Alessandro, 2012, Computer Aided Verification. Proceedings 24th International Conference, CAV 2012, P378, DOI 10.1007/978-3-642-31424-7_29
   Clavel M., 2007, LECT NOTES COMPUT SC, V4350
   Department of Transport, 2007, CM7176
   Eker Steven., 2004, ELECTRON NOTES THEOR, V71, P162, DOI [DOI 10.1016/S1571-0661(05)82534-4, 10.1016/S1571-0661(05)82534-4]
   Fantechi A, 2014, LECT NOTES COMPUT SC, V8368, P167, DOI 10.1007/978-3-319-05032-4_13
   Ferrari A., 2011, FORMS FORMAT 2010, P98
   Haxthausen AE, 2014, INT J SOFTW TOOLS TE, V16, P713, DOI 10.1007/s10009-013-0295-9
   Haxthausen AE, 2011, LECT NOTES COMPUT SC, V6662, P176
   Haxthausen AE, 2014, LECT NOTES COMPUT SC, V8368, P205, DOI 10.1007/978-3-319-05032-4_16
   Haxthausen AE, 2011, FORM ASP COMPUT, V23, P191, DOI 10.1007/s00165-009-0143-6
   Haxthausen AE, 2010, LECT NOTES COMPUT SC, V6028, P141
   Haxthausen AE, 2016, LECT NOTES COMPUT SC, V9707, P160, DOI 10.1007/978-3-319-33951-1_12
   Iliasov A, 2014, LECT NOTES COMPUT SC, V8454, P177
   James Phillip, 2013, NASA Formal Methods. 5th International Symposium, NFM 2013. Proceedings, P435, DOI 10.1007/978-3-642-38088-4_30
   James P, 2016, COMM COM INF SC, V596, P103, DOI 10.1007/978-3-319-29510-7_6
   James P, 2014, INT J SOFTW TOOLS TE, V16, P685, DOI 10.1007/s10009-014-0304-7
   James P, 2014, MATH COMPUT SCI, V8, P11, DOI 10.1007/s11786-014-0174-0
   James P, 2014, SCI COMPUT PROGRAM, V96, P315, DOI 10.1016/j.scico.2014.04.005
   Lawrence A., 2014, FTSCS 14 PREL P
   Macedo HD, 2016, LECT NOTES COMPUT SC, V9953, P279, DOI 10.1007/978-3-319-47169-3_20
   Mirabadi A, 2009, TRANSP PROBL, V4, P103
   Moller F., 2016, TOOL INTERACTION SAF
   Nardone R, 2015, COMM COM INF SC, V476, P93, DOI 10.1007/978-3-319-17581-2_7
   Olveczky P. C., 2007, Higher-Order and Symbolic Computation, V20, P161, DOI 10.1007/s10990-007-9001-5
   Ölveczky PC, 2007, ELECTRON NOTES THEOR, V176, P5, DOI 10.1016/j.entcs.2007.06.005
   Ölveczky PC, 2008, LECT NOTES COMPUT SC, V4963, P332, DOI 10.1007/978-3-540-78800-3_23
   Ölveczky PC, 2009, THEOR COMPUT SCI, V410, P254, DOI 10.1016/j.tcs.2008.09.022
   Platzer A, 2009, LECT NOTES COMPUT SC, V5885, P246, DOI 10.1007/978-3-642-10373-5_13
   Tombs D., 2002, CORE 2002: Cost Efficient Railways through Engineering, P415
   Vu LH, 2015, COMM COM INF SC, V476, P223, DOI 10.1007/978-3-319-17581-2_15
   Winter Kirsten, 2012, Leveraging Applications of Formal Methods, Verification and Validation. Applications and Case Studies. Proceedings of the 5th International Symposium, ISoLA 2012, P246, DOI 10.1007/978-3-642-34032-1_24
   Winter K., 2006, 10 AUSTR WORKSH SAF, V55, P101
   Yan Cao, 2011, 2011 Proceedings of IEEE International Conference on Computer Science and Automation Engineering (CSAE), P511, DOI 10.1109/CSAE.2011.5952519
NR 37
TC 28
Z9 28
U1 0
U2 11
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR 1
PY 2018
VL 154
BP 61
EP 88
DI 10.1016/j.scico.2017.10.011
PG 28
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA FW1RT
UT WOS:000425077800004
OA Bronze, Green Accepted
DA 2024-07-18
ER

PT J
AU Khamespanah, E
   Khosravi, R
   Sirjani, M
AF Khamespanah, Ehsan
   Khosravi, Ramtin
   Sirjani, Marjan
TI An efficient TCTL model checking algorithm and a reduction technique for
   verification of timed actor models
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Actor model; Timed Rebeca; Model checking; TCTL; Durational transition
   graph
AB NP-hard time complexity of model checking algorithms for TCTL properties in dense time is one of the obstacles against using model checking for the analysis of real-time systems. Alternatively, a polynomial time algorithm is suggested for model checking, of discrete time models against TCTL <=,>= properties (i.e. TCTL properties without U-=c modalities). The algorithm performs model checking against a given formula 1 for a state space with V states and E transitions in 0 (V (V + E) . vertical bar Phi vertical bar). In this work, we improve the model checking algorithm of TCTL <=,>= properties, obtaining time complexity of 0 ((V 1g V + E) . vertical bar Phi vertical bar). We tackle the model checking of discrete timed actors as an application of the proposed algorithms. We show how the result of the fine-grained semantics of discrete timed actors can be model checked efficiently against TCTL <=,>= properties using the proposed algorithm. This is illustrated using the timed actor modeling language Timed Rebeca. In addition to introducing a new efficient model checking algorithm, we propose a reduction technique which safely eliminates instantaneous transitions of transition systems (i.e. transition with zero time duration). We show that the reduction can be applied on-the-fly during the generation of the original timed transition system without a significant cost. We demonstrate the effectiveness of the reduction technique via-a' set of case studies selected from various application domains. Besides, while TCTL <=,>= can be model checked in polynomial time, model checking of TCTL properties with U-=c modalities is an NP-complete problem. Using the proposed reduction technique, we provide an efficient algorithm for model checking of complete TCTL properties over the reduced transition systems. (C) 2017 Elsevier B.V. All rights reserved.
C1 [Khamespanah, Ehsan; Khosravi, Ramtin] Univ Tehran, Sch Elect & Comp Engn, Tehran, Iran.
   [Khamespanah, Ehsan; Sirjani, Marjan] Reykjavik Univ, Sch Comp Sci, Reykjavik, Iceland.
   [Sirjani, Marjan] Malardalen Univ, Sch IDT, Vasteras, Sweden.
C3 University of Tehran; Reykjavik University; Malardalen University
RP Khamespanah, E; Khosravi, R (corresponding author), Univ Tehran, Sch Elect & Comp Engn, Tehran, Iran.; Khamespanah, E; Sirjani, M (corresponding author), Reykjavik Univ, Sch Comp Sci, Reykjavik, Iceland.; Sirjani, M (corresponding author), Malardalen Univ, Sch IDT, Vasteras, Sweden.
EM e.khamespanah@ut.ac.ir; r.khosravi@ut.ac.ir; marjan.sirjani@mdh.se
FU Icelandic Research Fund [163205-051]
FX The work on this paper has been supported in part by the project
   "Self-Adaptive Actors: SEADA" (nr. 163205-051) of the Icelandic Research
   Fund.
CR Aceto L, 2011, ELECTRON P THEOR COM, P1, DOI 10.4204/EPTCS.58.1
   Agha G., 1990, ACTORS-A Model of Concurrent Computation in Distributed Systems, Artificial Intelligence
   Agha G., 1987, RES DIRECTIONS OBJEC, P49
   ALUR R, 1994, THEOR COMPUT SCI, V126, P183, DOI 10.1016/0304-3975(94)90010-8
   ALUR R, 1993, INFORM COMPUT, V104, P2, DOI 10.1006/inco.1993.1024
   [Anonymous], 1997, Object-oriented software construction
   Baler C., 2008, PRINCIPLES MODEL CHE
   Bengtsson J., 1996, Hybrid Systems III. Verification and Control, P232, DOI 10.1007/BFb0020949
   Bengtsson J, 1998, LECT NOTES COMPUT SC, V1466, P485, DOI 10.1007/BFb0055643
   CAMPOS S, 1994, REAL TIM SYST SYMP P, P266, DOI 10.1109/REAL.1994.342709
   Campos S. V, 1994, THEORIES EXPERIENCES, P129
   Cormen T. H., 2009, Introduction to Algorithms, VSecond
   de Boer F, 2010, LECT NOTES COMPUT SC, V5961, P212
   de Boer FS, 2012, LECT NOTES COMPUT SC, V7454, P562, DOI 10.1007/978-3-642-32940-1_39
   Dean J, 2004, USENIX ASSOCIATION PROCEEDINGS OF THE SIXTH SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION (OSDE '04), P137
   Earle Clara Benac, 2012, Formal Techniques for Distributed Systems. Joint 14th IFIP WG 6.1 International Conference, FMOODS 2012 and 32nd IFIP WG 6.1 International Conference, FORTE 2012, P251, DOI 10.1007/978-3-642-30793-5_16
   EMERSON EA, 1992, REAL-TIME SYST, V4, P331, DOI 10.1007/BF00355298
   Garey M. R., 1979, Computers and intractability. A guide to the theory of NP-completeness
   Geilen M, 2011, HSCC 11: PROCEEDINGS OF THE 14TH INTERNATIONAL CONFERENCE ON HYBRID SYSTEMS: COMPUTATION AND CONTROL, P23
   HENZINGER TA, 1992, LECT NOTES COMPUT SC, V600, P226, DOI 10.1007/BFb0031995
   HEWITT C, 1972, THESIS MIT CAMBRIDGE
   Jaghoori MM, 2010, ACTA INFORM, V47, P33, DOI 10.1007/s00236-009-0111-x
   Khamespanah Ehsan, 2016, Model-Checking Software. 23rd International Symposium, SPIN 2016, co-located with ETAPS 2016. Proceedings: LNCS 9641, P165, DOI 10.1007/978-3-319-32582-8_11
   Khamespanah E., 2014, P 4 INT WORKSH PROGR, P55
   Khamespanah E., 2015, LECT NOTES COMPUTER
   Khamespanah E., 2012, P 2 ED PROGR SYST LA, P23
   Khamespanah E, 2015, SCI COMPUT PROGRAM, V98, P184, DOI 10.1016/j.scico.2014.07.005
   Laroussinie F, 2006, THEOR COMPUT SCI, V353, P249, DOI 10.1016/j.tcs.2005.11.020
   Laroussinie F, 2004, LECT NOTES COMPUT SC, V3170, P387
   Laroussinie F, 2003, THEOR COMPUT SCI, V297, P297, DOI 10.1016/S0304-3975(02)00644-8
   Linderman LE, 2013, STRUCT CONTROL HLTH, V20, P1007, DOI 10.1002/stc.1514
   Magnusson B., 2012, THESIS
   Mason IA, 1999, THEOR COMPUT SCI, V220, P409, DOI 10.1016/S0304-3975(99)00009-2
   Minea M, 1999, LECT NOTES COMPUT SC, V1664, P431
   Nachman L, 2005, 2005 Fourth International Symposium on Information Processing in Sensor Networks, P437
   Nykänen M, 2002, J ALGORITHMS, V42, P41, DOI 10.1006/jagm.2001.1201
   REN SP, 1995, SIGPLAN NOTICES, V30, P50, DOI 10.1145/216633.216656
   Reynisson AH, 2014, SCI COMPUT PROGRAM, V89, P41, DOI 10.1016/j.scico.2014.01.008
   Sabahi-Kaviani Zeynab, 2013, COMMUN COMPUT INF SC, V419, P178
   Sharifi Z., 2013, ELECT COMMUN EASST, V66
   Sheibanyrad A, 2008, IEEE DES TEST COMPUT, V25, P572, DOI 10.1109/MDT.2008.167
   Sirjani M, 2005, J UNIVERS COMPUT SCI, V11, P1695
   Sirjani M, 2005, J UNIVERS COMPUT SCI, V11, P1054
   Sirjani M, 2004, FUND INFORM, V63, P385
   Sirjani M, 2011, LECT NOTES COMPUT SC, V7000, P20, DOI 10.1007/978-3-642-24933-4_3
   White T., 2012, HADOOP DEFINITIVE GU
NR 46
TC 8
Z9 9
U1 0
U2 6
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 15
PY 2018
VL 153
BP 1
EP 29
DI 10.1016/j.scico.2017.11.004
PG 29
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA FU7YI
UT WOS:000424068300001
OA Bronze
DA 2024-07-18
ER

PT J
AU Castro, T
   Lanna, A
   Alves, V
   Teixeira, L
   Apel, S
   Schobbens, PY
AF Castro, Thiago
   Lanna, Andre
   Alves, Vander
   Teixeira, Leopoldo
   Apel, Sven
   Schobbens, Pierre Yves
TI All roads lead to Rome: Commuting strategies for product-line
   reliability analysis
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Software product lines; Product-line analysis; Reliability analysis;
   Model checking; Verification
ID VARIABILITY; VERIFICATION; TIME
AB Software product line engineering is a means to systematically manage variability and commonality in software systems, enabling the automated synthesis of related programs (products) from a set of reusable assets. However, the number of products in a software product line may grow exponentially with the number of features, so it is practically infeasible to quality-check each of these products in isolation. There is a number of variability-aware approaches to product-line analysis that adapt single-product analysis techniques to cope with variability in an efficient way. Such approaches can be classified along three analysis dimensions (product-based, family-based, and feature-based), but, particularly in the context of reliability analysis, there is no theory comprising both (a) a formal specification of the three dimensions and resulting analysis strategies and (b) proof that such analyses are equivalent to one another. The lack of such a theory hinders formal reasoning on the relationship between the analysis dimensions and derived analysis techniques. We formalize seven approaches to reliability analysis of product lines, including the first instance of a feature-family-product-based analysis in the literature. We prove the formalized analysis strategies to be sound with respect to the probabilistic approach to reliability analysis of a single product. Furthermore, we present a commuting diagram of intermediate analysis steps, which relates different strategies and enables the reuse of soundness proofs between them. (C) 2017 Elsevier B.V. All rights reserved.
C1 [Castro, Thiago; Lanna, Andre; Alves, Vander] Univ Brasilia, Comp Sci Dept, Campus Univ Darcy Ribeiro Edificio CIC ESI, BR-70910900 Brasilia, DF, Brazil.
   [Castro, Thiago] Brazilian Army, Syst Dev Ctr, Setor Mil Urbano, QG Exercito Bloco G 22 Andar, BR-70630901 Brasilia, DF, Brazil.
   [Teixeira, Leopoldo] Univ Fed Pernambuco, Informat Ctr, Av Jornalista Anibal Fernandes S-N,Campus Recife, BR-50740560 Recife, PE, Brazil.
   [Alves, Vander; Apel, Sven] Univ Passau, Dept Informat & Math, Innstr 33, D-94032 Passau, Germany.
   [Schobbens, Pierre Yves] Univ Namur, Fac Comp Sci, Rue Grandgagnage 21, B-5000 Namur, Belgium.
C3 Universidade de Brasilia; Universidade Federal de Pernambuco; University
   of Passau; University of Namur
RP Castro, T (corresponding author), Univ Brasilia, Comp Sci Dept, Campus Univ Darcy Ribeiro Edificio CIC ESI, BR-70910900 Brasilia, DF, Brazil.
EM thiago.mael@aluno.unb.br; andrelanna@unb.br; valves@unb.br;
   lmt@cin.ufpe.br; apel@uni-passau.de; pierre-yves.schobbens@unamur.be
RI Schobbens, Pierre-Yves/H-2333-2011; Teixeira, Leopoldo M/G-5937-2016
OI Schobbens, Pierre-Yves/0000-0001-8677-4485; Teixeira,
   Leopoldo/0000-0002-6154-1666; Mael de Castro,
   Thiago/0000-0001-5758-2097; Alves, Vander/0000-0003-1573-048X; Apel,
   Sven/0000-0003-3687-2233
FU National Institute of Science and Technology for Software Engineering
   (INES)9 - CNPq [465614/2014-0]; FACEPE [APQ-0388-1.03/14,
   APQ-0570-1.03/14]; Science and Technology Department of the Brazilian
   Army; CAPES [BEX 0557-16-1, 3.2-1190844-BRA-HFSTCAPES-E]; CNPq
   [409335/2016-9]; German Research Foundation [AP 206/4, AP 206/6]
FX We thank the anonymous reviewers for the useful suggestions for
   improvement. This work was partially supported by the National Institute
   of Science and Technology for Software Engineering (INES)<SUP>9</SUP>,
   funded by CNPq [grant 465614/2014-0] and FACEPE [grant
   APQ-0388-1.03/14]. Thiago Castro acknowledges support from the Science
   and Technology Department of the Brazilian Army. Vander Alves would like
   to thank for the research grant CAPES ref. BEX 0557-16-1 / Alexander von
   Humboldt ref. 3.2-1190844-BRA-HFSTCAPES-E. Leopoldo Teixeira is
   supported by FACEPE [grant APQ-0570-1.03/14] and CNPq [grant
   409335/2016-9]. Sven Apel is supported by the German Research Foundation
   (AP 206/4 and AP 206/6).
CR [Anonymous], 2016, Feature-Oriented Software Product Lines
   [Anonymous], 2013, SOFTWARE PRODUCT LIN
   [Anonymous], 2007, SOFTWARE PRODUCT LIN
   [Anonymous], 2000, Generative programming: methods, tools, and applications
   Apel S., 2011, 2011 26th IEEE/ACM International Conference on Automated Software Engineering, P372, DOI 10.1109/ASE.2011.6100075
   Apel S, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P482, DOI 10.1109/ICSE.2013.6606594
   Bahar RI, 1997, FORM METHOD SYST DES, V10, P171, DOI 10.1023/A:1008699807402
   Baier C., 2008, REPRESENTATION MIND
   Bodden E, 2013, ACM SIGPLAN NOTICES, V48, P355, DOI 10.1145/2499370.2491976
   Brabrand C, 2013, LECT NOTES COMPUT SC, V7800, P73, DOI 10.1007/978-3-642-36964-3_3
   Chen S, 2014, ACM SIGPLAN NOTICES, V49, P39, DOI 10.1145/2692915.2628155
   Chrszon P, 2016, LECT NOTES COMPUT SC, V9633, P287, DOI 10.1007/978-3-662-49665-7_17
   Clarke. E. M., 1982, LOGICS OF PROGRAMS, P52, DOI [10 . 1007 / BFb0025774, DOI 10.1007/BFB0025774]
   Classen A., 2010, ICSE 10, V1, P335, DOI DOI 10.1145/1806799.1806850
   Classen A, 2014, SCI COMPUT PROGRAM, V80, P416, DOI 10.1016/j.scico.2013.09.019
   Classen A, 2013, IEEE T SOFTWARE ENG, V39, P1069, DOI 10.1109/TSE.2012.86
   Classen A, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P321, DOI 10.1145/1985793.1985838
   Czarnecki K., 2006, GPCE, P211
   Daws C, 2005, LECT NOTES COMPUT SC, V3407, P280
   Domis D., 2015, P 19 INT SOFTW PROD, P225
   Dordowsky F., 2011, Proceedings of the 2011 15th International Software Product Line Conference (SPLC 2011), P241, DOI 10.1109/SPLC.2011.11
   Dubslaff C, 2015, LECT NOTES COMPUT SC, V8989, P180, DOI 10.1007/978-3-662-46734-3_5
   Ghezzi C, 2013, INFORM SOFTWARE TECH, V55, P508, DOI 10.1016/j.infsof.2012.07.017
   Grunske L, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P31, DOI 10.1145/1368088.1368094
   Hahn Ernst Moritz, 2011, International Journal on Software Tools for Technology Transfer, V13, P3, DOI 10.1007/s10009-010-0146-x
   Hahn EM, 2010, LECT NOTES COMPUT SC, V6174, P660, DOI 10.1007/978-3-642-14295-6_56
   Hansson H., 1994, Formal Aspects of Computing, V6, P512, DOI 10.1007/BF01211866
   Heradio R, 2016, INFORM SOFTWARE TECH, V72, P1, DOI 10.1016/j.infsof.2015.11.004
   Kästner C, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P311, DOI 10.1145/1368088.1368131
   Kolesnikov S, 2014, ACM SIGPLAN NOTICES, V49, P115, DOI [10.1145/2637365.2517213, 10.1145/2517208.2517213]
   Kowal M, 2014, LECT NOTES COMPUT SC, V8411, P94
   Kowal M, 2015, IEEE INT CONF AUTOM, P407, DOI 10.1109/ASE.2015.16
   Kwiatkowska Marta, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P585, DOI 10.1007/978-3-642-22110-1_47
   Lanman J, 2013, P 17 INT SOFTW PROD, P244, DOI [10.1145/2491627.2491649, DOI 10.1145/2491627.2491649]
   Li H. C., 2005, Automated Software Engineering, V12, P349, DOI 10.1007/s10515-005-2643-9
   Liu J, 2011, AUTOMAT SOFTW ENG, V18, P39, DOI 10.1007/s10515-010-0075-7
   Meinicke J., 2014, P 18 INT SOFTW PROD, P94, DOI DOI 10.1145/2647908.2655972
   Midtgaard J, 2015, SCI COMPUT PROGRAM, V105, P145, DOI 10.1016/j.scico.2015.04.005
   Northrop L., 2001, SOFTWARE PRODUCT LIN
   Nunes V., 2012, 2012 Sixth Brazilian Symposium on Software Components, Architectures and Reuse (SBCARS 2012), P51, DOI 10.1109/SBCARS.2012.23
   Nunes V., 2013, P INT WORKSH ARCH DE
   Pohl K., 2005, SOFTWARE PRODUCT LIN, V10
   Post Hendrik, 2008, 2008 23rd IEEE/ACM International Conference on Automated Software Engineering, P347, DOI 10.1109/ASE.2008.45
   Rodrigues GN, 2015, IEEE HI ASS SYS ENGR, P173, DOI 10.1109/HASE.2015.34
   Thüm T, 2014, ACM COMPUT SURV, V47, DOI 10.1145/2580950
   Thüm T, 2013, ACM SIGPLAN NOTICES, V48, P11, DOI 10.1145/2480361.2371404
   von Rhein A, 2016, J LOG ALGEBR METHODS, V85, P125, DOI 10.1016/j.jlamp.2015.06.007
   von Rhein Alexander, 2013, P 7 INT WORKSH VAR M, P1
   Walkingshaw E., 2014, P ACM S NEW ID PROGR, P213
   Weiss David M., 2008, 2008 12th International Software Product Line Conference (SPLC), DOI 10.1109/SPLC.2008.56
NR 50
TC 4
Z9 4
U1 0
U2 2
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 15
PY 2018
VL 152
BP 116
EP 160
DI 10.1016/j.scico.2017.10.013
PG 45
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA FR3OJ
UT WOS:000418975700006
DA 2024-07-18
ER

PT J
AU Madeira, A
   Neves, R
   Barbosa, LS
   Martins, MA
AF Madeira, Alexandre
   Neves, Renato
   Barbosa, Luis S.
   Martins, Manuel A.
TI A method for rigorous design of reconfigurable systems
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Software specification; Reconfigurable systems; Hybrid logic
ID STRUCTURED TRANSITION-SYSTEMS; ALGEBRAIC SEMANTICS; MODAL-LOGICS;
   SPECIFICATION; MODEL; LANGUAGE; FOUNDATIONS; CASL; REO
AB Reconfigurability, understood as the ability of a system to behave differently in different modes of operation and commute between them along its lifetime, is a cross-cutting concern in modern Software Engineering. This paper introduces a specification method for reconfigurable software based on a global transition structure to capture the system's reconfiguration space, and a local specification of each operation mode in whatever logic (equational, first-order, partial, fuzzy, probabilistic, etc.) is found expressive enough for handling its requirements.
   In the method these two levels are not only made explicit and juxtaposed, but formally interrelated. The key to achieve such a goal is a systematic process of hybridisation of logics through which the relationship between the local and global levels of a specification becomes internalised in the logic itself. (C) 2016 Elsevier B.V. All rights reserved.
C1 [Madeira, Alexandre; Neves, Renato; Barbosa, Luis S.] INESC TEC, Oporto, Portugal.
   [Madeira, Alexandre; Neves, Renato; Barbosa, Luis S.] Univ Minho, P-4719 Braga, Portugal.
   [Martins, Manuel A.] Univ Aveiro, CIDMA, Aveiro, Portugal.
   [Martins, Manuel A.] Univ Aveiro, Dept Math, Aveiro, Portugal.
C3 INESC TEC; Universidade do Minho; Universidade de Aveiro; Universidade
   de Aveiro
RP Madeira, A (corresponding author), INESC TEC, Oporto, Portugal.; Madeira, A (corresponding author), Univ Minho, P-4719 Braga, Portugal.
EM amadeira@inesctec.pt; lsb@di.uminho.pt
RI Madeira, Alexandre/AAF-4147-2021; Neves, Renato/ABE-5290-2020; Martins,
   Manuel A./A-8821-2010; Soares Barbosa, Luis/N-7086-2013
OI Madeira, Alexandre/0000-0002-0646-2017; Neves,
   Renato/0000-0002-8787-2551; Martins, Manuel A./0000-0002-5109-8066;
   Soares Barbosa, Luis/0000-0002-5037-2588
FU ERDF - European Regional Development Fund through the Operational
   Programme for Competitiveness and Internationalisation - COMPETE
   Programme; National Funds through the Portuguese funding agency, FCT -
   Fundacao para a Ciencia e a Tecnologia [POCI-01-0145-FEDER-016692,
   UID/MAT/04106/2013]; BPD FCT grant [SFRH/BPD/103004/2014]; FCT
   [SFRH/BD/52234/2013]; EU [PIRSESGA-2012-318986]; Fundação para a Ciência
   e a Tecnologia [UID/MAT/04106/2013] Funding Source: FCT
FX This work is financed by the ERDF - European Regional Development Fund
   through the Operational Programme for Competitiveness and
   Internationalisation - COMPETE 2020 Programme and by National Funds
   through the Portuguese funding agency, FCT - Fundacao para a Ciencia e a
   Tecnologia within projects POCI-01-0145-FEDER-016692 and
   UID/MAT/04106/2013. The first author is further supported by the BPD FCT
   grant SFRH/BPD/103004/2014, and R. Neves is sponsored by FCT grant
   SFRH/BD/52234/2013. M.A. Martins is also funded by the EU FP7 Marie
   Curie PIRSESGA-2012-318986 project GeTFun: Generalizing
   Truth-Functionality.
CR Aguirre N, 2002, ASE 2002: 17TH IEEE INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING, P271, DOI 10.1109/ASE.2002.1115028
   AGUSTICULLELL J, 1991, LECT NOTES COMPUT SC, V521, P269
   [Anonymous], 2001, STUDIES LOGIC COMPUT
   [Anonymous], 2010, P INT WORKSH FORM AS
   [Anonymous], 1967, Past, present and future
   [Anonymous], 2007, Reactive Systems: Modelling, Specification and Verification
   [Anonymous], 2000, Log. J. IGPL
   [Anonymous], 1997, Handbook of Graph Grammars and Computing by Graph Transformation
   [Anonymous], 2010, LOGICAL ANAL HYBRID
   [Anonymous], 1993, ENCY MATH APPL, DOI DOI 10.1017/CBO9780511551574
   [Anonymous], 2001, CAMBRIDGE TRACTS THE
   Arbab F, 2004, MATH STRUCT COMP SCI, V14, P329, DOI 10.1017/S0960129504004153
   Areces C, 2001, J LOGIC COMPUT, V11, P657, DOI 10.1093/logcom/11.5.657
   Areces C, 2007, STUD LOGIC PRACT REA, V3, P821
   Arney D, 2007, 2007 JOINT WORKSHOP ON HIGH CONFIDENCE MEDICAL DEVICES, SOFTWARE AND SYSTEMS AND MEDICAL DEVICE PLUG-AND PLAY INTEROPERABILITY, P23, DOI 10.1109/HCMDSS-MDPnP.2007.36
   Astesiano E, 2002, THEOR COMPUT SCI, V286, P153, DOI 10.1016/S0304-3975(01)00368-1
   Baltazar Pedro, 2013, LOG UNIVERS, P1
   Barringer Howard, 2012, FM 2012: Formal Methods. Proceedings of the 18th International Symposium, P68, DOI 10.1007/978-3-642-32759-9_9
   Bauer SS, 2011, THEOR COMPUT SCI, V412, P3101, DOI 10.1016/j.tcs.2011.04.007
   Baumgartner P, 2012, J SYMB COMPUT, V47, P1011, DOI 10.1016/j.jsc.2011.12.031
   Beierle Christoph., 2005, CONDITIONALS INFORM, V3301, P162
   Bidoit M, 2006, J LOGIC ALGEBR PROGR, V67, P3, DOI 10.1016/j.jlap.2005.09.002
   Bidoit M, 2008, LECT NOTES COMPUT SC, V5140, P216
   Bjorner D, 2008, MONOGR THEOR COMPUT, P1
   Blackburn P, 2006, SYNTHESE, V150, P329, DOI 10.1007/s11229-005-5512-y
   Bolander T, 2006, J LOGIC COMPUT, V16, P737, DOI [10.1093/logcom/exl008, 10.1093/logcom/ex1008]
   Borger E., 2003, ABSTRACT STATE MACHI
   Brauner T, 2010, APPL LOGIC SERIES
   Broy M, 2000, LECT NOTES COMPUT SC, V1816, P89
   Bruneton E, 2006, SOFTWARE PRACT EXPER, V36, P1257, DOI 10.1002/spe.767
   Bruni R, 2008, LECT NOTES COMPUT SC, V5065, P37, DOI 10.1007/978-3-540-68679-8_4
   Bruni R, 2008, BULL EUR ASSOC THEOR, P161
   BURSTALL RM, 1980, LECTURE NOTES COMPUT, V86, P292, DOI DOI 10.1007/3-540-10007-5_41
   Burstall Rod., 1994, CLASSICAL MIND ESSAY, P75
   Caleiro C, 2006, LECT NOTES COMPUT SC, V4060, P50, DOI 10.1007/11780274_4
   Castro PF, 2010, LECT NOTES COMPUT SC, V6255, P306, DOI 10.1007/978-3-642-14808-8_21
   Cîrstea C, 2006, J LOGIC ALGEBR PROGR, V67, P87, DOI 10.1016/j.jlap.2005.09.004
   Clarke D, 2008, FUND INFORM, V82, P361
   Classen A, 2013, IEEE T SOFTWARE ENG, V39, P1069, DOI 10.1109/TSE.2012.86
   Coleti Giulianella, 2002, STUDIA LOGICA LIB, V15
   Conforti G, 2007, FUND INFORM, V80, P91
   Corradini A, 2001, THEOR COMPUT SCI, V260, P27, DOI 10.1016/S0304-3975(00)00121-3
   CORRADINI A, 1992, THEOR COMPUT SCI, V103, P51, DOI 10.1016/0304-3975(92)90087-V
   Costa G, 1997, THEOR COMPUT SCI, V173, P513, DOI 10.1016/S0304-3975(96)00165-X
   Di Cosmo Roberto, 2012, Software Engineering and Formal Methods. Proceedings of the 10th International Conference, SEFM 2012, P156, DOI 10.1007/978-3-642-33826-7_11
   Diaconescu R, 2002, THEOR COMPUT SCI, V285, P289, DOI 10.1016/S0304-3975(01)00361-9
   Diaconescu R., 2008, STUDIES UNIVERSAL LO
   Diaconescu R., 2013, J LOG COMPUT
   Diaconescu R, 2016, MATH STRUCT COMP SCI, V26, P745, DOI 10.1017/S0960129514000383
   Diaconescu R, 2011, MATH LOGIC QUART, V57, P194, DOI 10.1002/malq.200910131
   Doberkart Ernst-Erich, 2010, AN EATCS SERIES
   Eijck Jan van, 2002, TECHNICAL REPORT
   Falcone Y, 2011, FORM METHOD SYST DES, V38, P223, DOI 10.1007/s10703-011-0114-4
   Fiadeiro JL, 2013, SOFTW SYST MODEL, V12, P349, DOI 10.1007/s10270-012-0236-1
   Finkel A, 2001, THEOR COMPUT SCI, V256, P63, DOI 10.1016/S0304-3975(00)00102-X
   GIARRATANA V, 1976, LECT NOTES COMPUT SC, V45, P576
   Goguen J, 2000, THEOR COMPUT SCI, V245, P55, DOI 10.1016/S0304-3975(99)00275-3
   GOGUEN JA, 1992, J ACM, V39, P95, DOI 10.1145/147508.147524
   Götzmann D, 2010, ELECTRON NOTES THEOR, V262, P127, DOI 10.1016/j.entcs.2010.04.010
   GUREVICH Y, 1994, IFIP TRANS A, V51, P423
   Habel A., 2001, Mathematical Structures in Computer Science, V11, P637, DOI 10.1017/S0960129501003425
   Haenni R., 2011, SYNTHESE LIB STUDIES, V350
   Hao Xu, 2012, Foundations of Health Informatics Engineering and Systems. First International Symposium, FHIES 2011. Revised Selected Papers, P160, DOI 10.1007/978-3-642-32355-3_10
   Hennicker R, 1999, LECT NOTES COMPUT SC, V1548, P263
   Hoareau Christian., 2008, 22 INT C ADV INFORM, P130
   Hoffmann G, 2009, ELECTRON NOTES THEOR, V231, P3, DOI 10.1016/j.entcs.2009.02.026
   Indrzejczak A, 2007, LOG LOG PHILOS, V16, P147, DOI 10.12775/LLP.2007.006
   Johan van Bentham, 1983, MODAL LOGIC CLASSIC
   Jungclaus R, 1996, ACM T INFORM SYST, V14, P175, DOI 10.1145/226163.226166
   Karsai G, 2010, COMPUTER, V43, P34, DOI 10.1109/MC.2010.135
   Krause C, 2011, SCI COMPUT PROGRAM, V76, P23, DOI 10.1016/j.scico.2009.10.006
   Kupke C, 2011, THEOR COMPUT SCI, V412, P5070, DOI 10.1016/j.tcs.2011.04.023
   Lange Martin, 2009, Journal of Logic, Language and Information, V18, P465, DOI 10.1007/s10849-009-9088-7
   Madeira A., 2013, THESIS
   Madeira A, 2013, ELECTRON PROC THEOR, P84, DOI 10.4204/EPTCS.115.6
   Madeira A, 2013, LECT NOTES COMPUT SC, V8129, P75, DOI 10.1007/978-3-642-40922-6_6
   Madeira A, 2013, 2013 INTERNATIONAL SYMPOSIUM ON THEORETICAL ASPECTS OF SOFTWARE ENGINEERING (TASE), P79, DOI 10.1109/TASE.2013.19
   Madeira A, 2011, LECT NOTES COMPUT SC, V7041, P269, DOI 10.1007/978-3-642-24690-6_19
   Martins Manuel A., 2011, Algebra and Coalgebra in Computer Science. Proceedings 4th International Conference, CALCO 2011, P283, DOI 10.1007/978-3-642-22944-2_20
   Martins MA, 2007, MATH STRUCT COMP SCI, V17, P1075, DOI 10.1017/S0960129507006305
   Masci Paolo, 2013, Computer Safety, Reliability and Security. 32nd International Conference, SAFECOMP 2013. Proceedings: LNCS 8153, P228, DOI 10.1007/978-3-642-40793-2_21
   Mateescu R, 2003, SCI COMPUT PROGRAM, V46, P255, DOI 10.1016/S0167-6423(02)00094-1
   MESEGUER J, 1992, THEOR COMPUT SCI, V96, P73, DOI 10.1016/0304-3975(92)90182-F
   Meseguer J, 2012, J LOGIC ALGEBR PROGR, V81, P721, DOI 10.1016/j.jlap.2012.06.003
   MILNER R, 1992, INFORM COMPUT, V100, P1, DOI [10.1016/0890-5401(92)90008-4, 10.1016/0890-5401(92)90009-5]
   Milner R., 2009, SPACE MOTION COMMUNI, DOI DOI 10.1017/CBO9780511626661
   Mossakowski T, 2003, COMPUT INFORM, V22, P285
   Mossakowski T., 2013, TECHNICAL REPORT
   Mossakowski T, 2007, LECT NOTES COMPUT SC, V4424, P519
   Mossakowski T, 2007, LECT NOTES COMPUT SC, V4409, P92
   Neves Renato, 2013, Algebra and Coalgebra in Computer Science. 5th International Conference, CALCO 2013. Proceedings: LNCS 8089, P340, DOI 10.1007/978-3-642-40206-7_28
   Neves R, 2016, SCI COMPUT PROGRAM, V126, P73, DOI 10.1016/j.scico.2016.03.001
   Neves R, 2015, LECT NOTES COMPUT SC, V8941, P146, DOI 10.1007/978-3-319-15075-8_10
   PASSY S, 1991, INFORM COMPUT, V93, P263, DOI 10.1016/0890-5401(91)90026-X
   REICHEL H, 1986, LECT NOTES COMPUT SC, V240, P390
   Riazanov A, 2002, AI COMMUN, V15, P91
   Sangiorgi D., 2003, PI CALCULUS THEORY M
   Sannella D, 2008, LECT NOTES COMPUT SC, V5065, P593, DOI 10.1007/978-3-540-68679-8_37
   Sannella Donald, 2012, AN EATCS SERIES
   Schroeder L, 2009, THEOR COMPUT SCI, V410, P1217, DOI 10.1016/j.tcs.2008.11.020
   Singh Neeraj Kumar, 2014, 18 MCSCERT
   Sommerville I., 2010, SOFTWARE ENG
   Tamura Gabriel, 2010, LECT NOTES COMPUTER, V6921, P34
   Tarlecki A, 2003, NATO SC S SS III C S, V191, P43
   ten Cate B, 2005, LECT NOTES COMPUT SC, V3634, P339, DOI 10.1007/11538363_24
   van Riemsdijk MB, 2008, LECT NOTES COMPUT SC, V5140, P392
   Weidenbach C, 2009, LECT NOTES ARTIF INT, V5663, P140, DOI 10.1007/978-3-642-02959-2_10
   Wermelinger M, 2002, SCI COMPUT PROGRAM, V44, P133, DOI 10.1016/S0167-6423(02)00036-9
   Yu Z, 2006, IEEE INT CON AUTO SC, P292, DOI 10.1109/COASE.2006.326896
   Zhang Yi, 2011, J Diabetes Sci Technol, V5, P1403
   Zhang Yi, 2010, J Diabetes Sci Technol, V4, P263
   Zhikun Zhao, 2012, Journal of Software, V7, P169, DOI 10.4304/jsw.7.1.169-175
NR 112
TC 8
Z9 8
U1 0
U2 10
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 15
PY 2016
VL 132
BP 50
EP 76
DI 10.1016/j.scico.2016.05.001
PN 1
PG 27
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA EC3YB
UT WOS:000388061900004
OA Bronze, Green Published, Green Submitted
DA 2024-07-18
ER

PT J
AU Maidl, AM
   Mascarenhas, F
   Medeiros, S
   Ierusalimschy, R
AF Maidl, Andre Murbach
   Mascarenhas, Fabio
   Medeiros, Sergio
   Ierusalimschy, Roberto
TI Error reporting in Parsing Expression Grammars
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Parsing; Error reporting; Parsing expression grammars; Packrat parsing;
   Parser combinators
AB Parsing Expression Grammars (PEGs) describe top-down parsers. Unfortunately, the error reporting techniques used in conventional top-down parsers do not directly apply to parsers based on Parsing Expression Grammars (PEGs), so they have to be somehow simulated. While the PEG formalism has no account of semantic actions, actual PEG implementations add them, and we show how to simulate an error-reporting heuristic through these semantic actions.
   We also propose a complementary error reporting strategy that may lead to better error messages: labeled failures. This approach is inspired by exception handling of programming languages, and lets a PEG define different kinds of failure, with each ordered choice operator specifying which kinds it catches. Labeled failures give a way to annotate grammars for better error reporting, to express some of the error reporting strategies used by deterministic parser combinators, and to encode predictive top-down parsing in a PEG. (C) 2016 Elsevier B.V. All rights reserved.
C1 [Maidl, Andre Murbach] PUCPR, Polytech Sch, Curitiba, Parana, Brazil.
   [Mascarenhas, Fabio] Univ Fed Rio de Janeiro, Dept Comp Sci, Rio de Janeiro, Brazil.
   [Medeiros, Sergio] Univ Fed Rio Grande do Norte, Sch Sci & Technol, Natal, RN, Brazil.
   [Ierusalimschy, Roberto] Pontificia Univ Catolica Rio de Janeiro, Dept Comp Sci, Rio de Janeiro, Brazil.
C3 Pontificia Universidade Catolica do Parana; Universidade Federal do Rio
   de Janeiro; Universidade Federal do Rio Grande do Norte; Pontificia
   Universidade Catolica do Rio de Janeiro
RP Mascarenhas, F (corresponding author), Univ Fed Rio de Janeiro, Dept Comp Sci, Rio de Janeiro, Brazil.
EM andre.murbach@pucpr.br; mascarenhas@ufrj.br; sergiomedeiros@ect.ufrn.br;
   roberto@inf.puc-rio.br
RI Mascarenhas, Fabio/M-5731-2014; Queiroz de Medeiros, Sergio/O-6582-2018
OI Queiroz de Medeiros, Sergio/0000-0002-0759-0926
CR [Anonymous], 1992, J FUNCT PROGRAM
   [Anonymous], 2006, COMPILERS PRINCIPLES
   Ford B., 2002, SIGPLAN Notices, V37, P36, DOI 10.1145/583852.581483
   Ford B., 2002, THESIS
   Ford Bryan., 2004, 31 ACM SIGPLAN SIGAC, P111, DOI DOI 10.1145/964001.964011
   Grimm R, 2006, ACM SIGPLAN NOTICES, V41, P38, DOI 10.1145/1133981.1133987
   Grune Dick., 2010, Parsing Techniques: A Practical Guide, V2nd
   Ierusalimschy R, 2013, Programming in Lua, Vthird
   Ierusalimschy R., 2008, LPEG PARSING EXPRESS
   Ierusalimschy R, 2009, SOFTWARE PRACT EXPER, V39, P221, DOI 10.1002/spe.892
   Jeffery CL, 2003, ACM T PROGR LANG SYS, V25, P631, DOI 10.1145/937563.937566
   Leijen D., 2001, TECH REP
   Louden Kenneth C., 1997, Compiler Construction Principles and Practice
   Maidl AndreMurbach., 2014, Proc. Workshop on Dynamic Languages and Applications, P1
   Mascarenhas F, 2014, SCI COMPUT PROGRAM, V89, P235, DOI 10.1016/j.scico.2014.01.012
   Medeiros Sergio, 2012, Programming Languages. Proceedings of the16th Brazilian Symposium, SBLP 2012, P27, DOI 10.1007/978-3-642-33182-4_4
   Medeiros S., 2011, BRAZ S PROGR LANG BRAZ S PROGR LANG
   Medeiros S., 2014, LPEGLABEL EXTENSION
   Mizushima Kota, 2010, P 9 ACM SIGPLAN SIGS, P29, DOI [10.1145/1806672, DOI 10.1145/1806672]
   Par T., 2013, DEFINITIVE ANTLR 4 R
   Parr T, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P425
   Partridge A., 1996, Journal of Functional Programming, V6, P355, DOI 10.1017/S0956796800001714
   Piumarta I., 2007, PEG LEG RECURSIVE DE
   Rojemo N., 1995, TECH REP
   Sant'Anna Francisco, 2013, THESIS
   Spivey M, 2012, J FUNCT PROGRAM, V22, P747, DOI 10.1017/S0956796812000329
   Swierstra SD, 2009, LECT NOTES COMPUT SC, V5520, P252, DOI 10.1007/978-3-642-03153-3_6
   SWIERSTRA SD, 1996, LNCS, V1129, P184
NR 28
TC 7
Z9 7
U1 0
U2 3
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 15
PY 2016
VL 132
BP 129
EP 140
DI 10.1016/j.scico.2016.08.004
PN 1
PG 12
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA EC3YB
UT WOS:000388061900007
OA Bronze, Green Submitted, Green Published
DA 2024-07-18
ER

PT J
AU Blanco, R
   Boldi, P
   Marino, A
AF Blanco, Roi
   Boldi, Paolo
   Marino, Andrea
TI Using graph distances for named-entity linking
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Entity linking; Maximum Capacity Representative Set; Minimum Distance
   Representative
AB Entity-linking is a natural-language-processing task that consists in identifying strings of text that refer to a particular item in some reference knowledge base. When the knowledge base is Wikipedia, the problem is also referred to as wikification (in this case, items are Wikipedia articles). Entity-linking consists conceptually of many different phases: identifying the portions of text that may refer to an entity (sometimes called "entity detection"), determining a set of concepts (candidates) from the knowledge base that may match each such portion, and choosing one candidate for each set; the latter step, known as candidate selection, is the phase on which this paper focuses. One instance of candidate selection can be formalized as an optimization problem on the underlying concept graph, where the quantity to be optimized is the average distance between the selected items. Inspired by this application, we define a new graph problem which is a natural variant of the Maximum Capacity Representative Set. We prove that our problem is NP-hard for general graphs; we propose several heuristics trying to optimize similar easier objective functions; we show experimentally how these approaches perform with respect to some baselines on a real-world dataset. Finally, in the appendix, we show an exact linear time algorithm that works under some more restrictive assumptions. (C) 2015 Elsevier B.V. All rights reserved.
C1 [Blanco, Roi] Yahoo Labs, London, England.
   [Boldi, Paolo; Marino, Andrea] Univ Milan, Dipartimento Informat, I-20122 Milan, Italy.
C3 Yahoo! Inc; Yahoo! Inc England; University of Milan
RP Marino, A (corresponding author), Univ Milan, Dipartimento Informat, I-20122 Milan, Italy.
EM roi@yahoo-inc.com; paolo.boldi@unimi.it; marino@di.unimi.it
RI Marino, Andrea/ABD-7788-2020
OI MARINO, ANDREA/0000-0002-9854-7885; BOLDI, PAOLO/0000-0002-8297-6255
FU EU-FET grant NADINE [GA 288956]
FX The second and third authors were supported by the EU-FET grant NADINE
   (GA 288956).
CR Alhelbawy A, 2014, PROCEEDINGS OF THE 52ND ANNUAL MEETING OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS, VOL 2, P75
   [Anonymous], 2007, AAAI
   [Anonymous], 2005, Proc. Conf. Hum. Lang. Technol. Empir. Methods Nat. Lang. Process, DOI DOI 10.3115/1220575.1220627
   Bavelas A, 1948, APPL ANTHROPOL, V7, pA16
   Bellare Mihir, 1993, ISTCS, P266, DOI [10.1109/ISTCS.1993.253462, DOI 10.1109/ISTCS.1993.253462]
   Blanco R, 2015, P 8 ACM INT C WEB SE, V15
   Blanco R, 2014, ELECTRON P THEOR COM, P30, DOI 10.4204/EPTCS.159.4
   Blanco R, 2012, SIGIR 2012: PROCEEDINGS OF THE 35TH INTERNATIONAL ACM SIGIR CONFERENCE ON RESEARCH AND DEVELOPMENT IN INFORMATION RETRIEVAL, P921, DOI 10.1145/2348283.2348406
   Boldi P, 2014, INTERNET MATH, V10, P222, DOI 10.1080/15427951.2013.865686
   Boldi Paolo, 2004, P 13 INT WORLD WID W, P595, DOI DOI 10.1145/988672.988752
   Borassi M, 2014, LECT NOTES COMPUT SC, V8496, P52, DOI 10.1007/978-3-319-07890-8_5
   Crescenzi P., 1997, Randomization and Approximation Techniques in Computer Science. International Workshop RANDOM '97 Proceedings, P111
   Cuadros Montse, 2008, 1 S SEM SYST TEXT PR, P71, DOI [10.3115/1626481.1626488, DOI 10.3115/1626481.1626488]
   Cucerzan S., 2007, P 2007 JOINT C EMPIR, P708, DOI DOI 10.1145/2187836.2187900
   Fellbaum C., 1998, WORDNET ELECT LEXICA, DOI DOI 10.7551/MITPRESS/7287.001.0001
   Hachey B, 2011, LECT NOTES COMPUT SC, V6997, P213, DOI 10.1007/978-3-642-24434-6_16
   Han XP, 2011, PROCEEDINGS OF THE 34TH INTERNATIONAL ACM SIGIR CONFERENCE ON RESEARCH AND DEVELOPMENT IN INFORMATION RETRIEVAL (SIGIR'11), P765
   Kulkarni S, 2009, KDD-09: 15TH ACM SIGKDD CONFERENCE ON KNOWLEDGE DISCOVERY AND DATA MINING, P457
   Mihalcea Rada, 2007, P 16 ACM C C INF KNO, P233, DOI DOI 10.1145/1321440.1321475.19
   Milne D, 2008, P 17 ACM C INF KNOWL, P509, DOI DOI 10.1145/1458082.1458150
   Navigli R, 2005, IEEE T PATTERN ANAL, V27, P1075, DOI 10.1109/TPAMI.2005.149
   Navigli R, 2007, 20TH INTERNATIONAL JOINT CONFERENCE ON ARTIFICIAL INTELLIGENCE, P1683
   Navigli R, 2010, IEEE T PATTERN ANAL, V32, P678, DOI 10.1109/TPAMI.2009.36
   Navigli R, 2009, ACM COMPUT SURV, V41, DOI 10.1145/1459352.1459355
   Pasca M., 2006, EACL
   Serna M, 2005, THEOR COMPUT SCI, V332, P123, DOI 10.1016/j.tcs.2004.10.014
NR 26
TC 3
Z9 3
U1 0
U2 5
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 15
PY 2016
VL 130
BP 24
EP 36
DI 10.1016/j.scico.2015.10.013
PG 13
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DY1MQ
UT WOS:000384859500003
OA Green Submitted, hybrid
DA 2024-07-18
ER

PT J
AU Markovski, J
AF Markovski, Jasen
TI A process-theoretic approach to supervisory coordination under partial
   observation
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Supervisory control theory; Controllability; Partial bisimulation;
   Partial observability; Process algebra
ID DISCRETE-EVENT SYSTEMS; PROCESS ALGEBRA; BISIMULATION
AB We propose a synthesis-centric model-based engineering framework for safe and nonblocking coordination of distributed components of complex high-tech systems. The framework is based on a process theory geared towards supervisory coordination and control of nondeterministic discrete-event systems under partial observation. Supervisory control theory deals with automated synthesis of provably correct models of supervisory controllers based on formal models of the system components and a formalization of the coordination requirements. Based on the obtained models, code generation can be used to implement the supervisory controllers in software, on a PLC, or an embedded (micro)processor. The proposed theory employs communication actions to distinguish between the different flows of information, i.e., observation of the system behavior and supervision by means of forwarding control signals. In addition, we consider the case of partial observation, where some behavior of the unsupervised system is hidden from the supervisory controller, e.g., due to lack of sensory information or internal inter-component communication. We revisit the notion of partial observation and treat it as a property of the supervisor, instead of conditioning the control requirements, which is a standard approach. By employing a behavior relation termed partial bisimulation, we are able to succinctly and transparently capture the notions of controllability and partial observability. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Markovski, Jasen] Eindhoven Univ Technol, Dept Mech Engn, NL-5600 MB Eindhoven, Netherlands.
C3 Eindhoven University of Technology
RP Markovski, J (corresponding author), Eindhoven Univ Technol, Dept Mech Engn, POB 513, NL-5600 MB Eindhoven, Netherlands.
EM j.markovski@tue.nl
FU Dutch NWO project ProThOS [600.065.120.11N124]
FX Supported by Dutch NWO project ProThOS, no. 600.065.120.11N124.
CR Akesson K, 2006, WODES 2006: EIGHTH INTERNATIONAL WORKSHOP ON DISCRETE EVENT SYSTEMS, PROCEEDINGS, P384
   [Anonymous], 2001, HDB PROCESS ALGEBRA, DOI DOI 10.1016/B978-044482830-9/50019-9
   [Anonymous], 2010, CAMBRIDGE TRACTS THE
   [Anonymous], 2011, COSY
   Baeten JCM, 2011, P AMER CONTR CONF, P4496
   Baeten JCM, 1997, THEOR COMPUT SCI, V177, P381, DOI 10.1016/S0304-3975(96)00253-8
   Baeten J, 2015, SCI COMPUT PROGRAM, V97, P17, DOI 10.1016/j.scico.2013.11.016
   Baeten J, 2011, ELECTRON P THEOR COM, P36, DOI 10.4204/EPTCS.60.3
   Cassandras C., 2004, INTRO DISCRETE EVENT
   CIESLAK R, 1988, IEEE T AUTOMAT CONTR, V33, P249, DOI 10.1109/9.402
   Fabian M, 1996, IEEE DECIS CONTR P, P2213, DOI 10.1109/CDC.1996.572970
   Forschelen STJ, 2012, DISCRETE EVENT DYN S, V22, P511, DOI 10.1007/s10626-012-0130-6
   Fritzson P., 2010, PRINCIPLES OF OBJECT
   Groote JF, 2009, CH CRC COMP SCI SER, P99
   Heymann M, 1998, IEEE T AUTOMAT CONTR, V43, P3, DOI 10.1109/9.654883
   HOARE CAR, 1978, COMMUN ACM, V21, P666, DOI 10.1145/359576.359585
   Komenda J, 2005, DISCRETE EVENT DYN S, V15, P257, DOI 10.1007/s10626-005-2868-6
   Kumar R, 1996, IEEE T AUTOMAT CONTR, V41, P1160, DOI 10.1109/9.533677
   LEVESON NG, 1990, IEEE SOFTWARE, V7, P55, DOI 10.1109/52.60589
   Liefeldt A, 2003, COMP AID CH, V15, P956
   Liefeldt A., 2008, LOGISTIC OPTIMIZATIO, P37
   MA C, 2005, LECT NOTES CONTROL I, V317
   Markendahl J., 2013, IMP Conference 2103, P1
   Markovski Jasen, 2013, 2013 IEEE International Conference on Automation Science and Engineering (CASE), P1075, DOI 10.1109/CoASE.2013.6653906
   Markovski J., 2012, 2012 12th International Conference on Application of Concurrency to System Design (ACSD), P52, DOI 10.1109/ACSD.2012.24
   Markovski Jasen, 2012, Integrated Formal Methods. Proceedings 9th International Conference, IFM 2012, P253, DOI 10.1007/978-3-642-30729-4_18
   Markovski J, 2010, IEEE DECIS CONTR P, P3481, DOI 10.1109/CDC.2010.5717095
   Markovski J., 2010, 10 INT WORKSH DISCR, P300, DOI DOI 10.3182/20100830-3-DE-4013.00048
   Markovski J., 2013, P ICSOFT 20 IN PRESS
   Markovski J., 2013, P ICCA 2013 IEEE, P816
   Markovski J., 2013, P SAC 2013 ACM, P1347
   Markovski J., 2012, ENTCS, V296, P163
   Markovski J, 2012, ELECTRON PROC THEOR, P97, DOI 10.4204/EPTCS.91.7
   Miremadi S, 2008, WODES' 08: PROCEEDINGS OF THE 9TH INTERNATIONAL WORKSHOP ON DISCRETE EVENT SYSTEMS, P193, DOI 10.1109/WODES.2008.4605944
   Mousavi MR, 2005, INFORM COMPUT, V200, P107, DOI 10.1016/j.ic.2005.03.002
   Nakevska J. M. M., 2013, LNCS, V8215, P147
   Overkamp A, 1997, IEEE T AUTOMAT CONTR, V42, P498, DOI 10.1109/9.566659
   RAMADGE PJ, 1987, SIAM J CONTROL OPTIM, V25, P206, DOI 10.1137/0325013
   Rutten J, 2000, P WODES 2000 KLUW, P31
   Schiffelers R. R. H., 2009, ELECT COMM EASST, V21, P1
   Tabuada P, 2006, IEEE T AUTOMAT CONTR, V51, P1862, DOI 10.1109/TAC.2006.886494
   Theunissen R.J. M., 2009, Proceedings of the 10th European control conference. EUCA, P1
   Zhou CY, 2006, IEEE T AUTOMAT CONTR, V51, P754, DOI 10.1109/TAC.2006.875036
NR 43
TC 3
Z9 3
U1 0
U2 4
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN-FEB
PY 2016
VL 115
SI SI
BP 127
EP 145
DI 10.1016/j.scico.2014.07.002
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CZ5DH
UT WOS:000367122200007
OA Bronze
DA 2024-07-18
ER

PT J
AU Lascu, TA
   Mauro, J
   Zavattaro, G
AF Lascu, Tudor A.
   Mauro, Jacopo
   Zavattaro, Gianluigi
TI Automatic deployment of component-based applications
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Cloud applications management; Component configuration; Deployment
   planning
AB In distributed systems like those based on cloud or service-oriented frameworks, applications are typically assembled by deploying and connecting a large number of heterogeneous software components, spanning from fine-grained packages to coarse-grained complex services. Automation techniques and tools have been proposed to ease the deployment process of these complex system. By relying on a formal model of components, we describe a sound and complete algorithm for computing the sequence of actions that permits the deployment of a desired configuration even in the presence of circular dependencies among components. We give a proof for the polynomiality of the devised algorithm and exploit it to develop METIS, a tool for computing deployment plans. The validation of METIS has been performed in two ways: on the one hand, by considering artificial scenarios consisting of a huge number of different components synthesized by following typical configuration patterns and, on the other hand, by exploiting it to deploy real-life installations of a WordPress blogging service. (C) 2015 Elsevier B.V. All rights reserved.
C1 [Lascu, Tudor A.; Mauro, Jacopo; Zavattaro, Gianluigi] Univ Bologna, FoCUS INRIA Res Team, Dept Comp Sci & Engn, I-40126 Bologna, Italy.
C3 University of Bologna
RP Mauro, J (corresponding author), Univ Bologna, FoCUS INRIA Res Team, Dept Comp Sci & Engn, I-40126 Bologna, Italy.
EM lascu@cs.unibo.it; jmauro@cs.unibo.it; zavattar@cs.unibo.it
RI Khusnutdinova, Elza Kamilevna/A-4810-2013; Baranov,
   Vladislav/AAB-4953-2020
OI Baranov, Vladislav/0000-0002-6518-1207; Mauro,
   Jacopo/0000-0002-5285-2868
FU Aeolus project [ANR-2010-SEGI-013-0]; EU project [ENVISAGE FP7-610582]
FX Work partially supported by Aeolus project ANR-2010-SEGI-013-0 and by
   the EU project ENVISAGE FP7-610582.
CR [Anonymous], TOP ORCH SPEC CLOUD
   [Anonymous], LNCS
   Arbab F, 2004, MATH STRUCT COMP SCI, V14, P329, DOI 10.1017/S0960129504004153
   Arshad N, 2007, SOFTWARE QUAL J, V15, P265, DOI 10.1007/s11219-007-9019-2
   Baral C., 2003, KNOWLEDGE REPRESENTA
   Blum AL, 1997, ARTIF INTELL, V90, P281, DOI 10.1016/S0004-3702(96)00047-1
   BURGESS M, 1995, COMPUT SYST, V8, P309
   Di Cosmo Roberto, 2012, Software Engineering and Formal Methods. Proceedings of the 10th International Conference, SEFM 2012, P156, DOI 10.1007/978-3-642-33826-7_11
   Di Cosmo R, 2014, INFORM COMPUT, V239, P100, DOI 10.1016/j.ic.2014.11.002
   Di Cosmo Roberto., 2014, P 29 ACMIEEE INT C A, P211, DOI DOI 10.1145/2642937.2642980
   Di R. Cosmo, 2015, TECHNICAL REPORT
   DMTF (Distributed Management Task Force), OP VIRT FORM SPEC VE
   Etchevers X., 2011, Proceedings of the 2011 IEEE 4th International Conference on Cloud Computing (CLOUD 2011), P668, DOI 10.1109/CLOUD.2011.65
   Fischer J, 2012, ACM SIGPLAN NOTICES, V47, P263, DOI 10.1145/2345156.2254096
   Fox M, 2003, J ARTIF INTELL RES, V20, P61, DOI 10.1613/jair.1129
   Gerevini A., 2002, Preprints of Sixth International Conference on Artificial Intelligence Planning and Scheduling, P281
   Goldsack Patrick, 2009, Operating Systems Review, V43, P16, DOI 10.1145/1496909.1496915
   Hewson J.A., 2011, P 10 INT WORKSH CONS, P73
   Hewson JohnA., 2012, P 26 INT C LARGE INS, P51
   Hoffmann J, 2003, J ARTIF INTELL RES, V20, P291, DOI 10.1613/jair.1144
   Juju, DEVOPS DIST
   Kanies Luke., 2006, USENIX ASS NEWSLETTE, V31, P19
   KAUTZ H, 1992, ECAI 92 - 10TH EUROPEAN CONFERENCE ON ARTIFICIAL INTELLIGENCE : PROCEEDINGS, P359
   Koutsofios E., 1991, Drawing graphs with dot
   Krause C., 2011, THESIS
   Lascu T.A., 2014, THESIS
   Lascu T.A., 2013, LNCS, V8348, P254
   Lascu TA, 2013, PROC INT C TOOLS ART, P213, DOI 10.1109/ICTAI.2013.41
   Liu YD, 2006, ACM SIGPLAN NOTICES, V41, P325, DOI 10.1145/1167515.1167502
   Mirkovic J., DADL DISTRIBUTED APP
   Oliveira Nuno., 2013, Proceedings of the 28th Annual ACM Symposium on Applied Computing, SAC'13, P1885
   Schwartz Baron., 2008, High Performance MySQL, V2nd
NR 32
TC 8
Z9 8
U1 0
U2 4
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 1
PY 2015
VL 113
BP 261
EP 284
DI 10.1016/j.scico.2015.07.006
PN 3
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CY2HW
UT WOS:000366230400004
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Pilbrow, C
   Malik, R
AF Pilbrow, Colin
   Malik, Robi
TI An algorithm for compositional nonblocking verification using special
   events
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Discrete event systems; Finite-state machines; Model checking;
   Compositional verification; Nonblocking
ID SUPERVISORY CONTROL
AB This paper proposes to improve compositional nonblocking verification of discrete event systems through the use of special events. Compositional verification involves abstraction to simplify parts of a system during verification. Normally, this abstraction is based on the set of events not used in the remainder of the system, i.e., in the part of the system not being simplified. Here, it is proposed to exploit more knowledge about the remainder of the system and check how events are being used. Always enabled events, selfloop-only events, failing events, and blocked events are easy to detect and often help with simplification even though they are used in the remainder of the system. Abstraction rules from previous work are generalised, and experimental results demonstrate the applicability of the resulting algorithm to verify several industrial-scale discrete event system models, while achieving better state-space reduction than before. (C) 2015 Elsevier B.V. All rights reserved.
C1 [Pilbrow, Colin; Malik, Robi] Univ Waikato, Dept Comp Sci, Hamilton, New Zealand.
C3 University of Waikato
RP Malik, R (corresponding author), Univ Waikato, Dept Comp Sci, Hamilton, New Zealand.
EM cgp5@students.waikato.ac.nz; robi@waikato.ac.nz
OI Pilbrow, Colin/0000-0001-6320-7269
CR Akesson K, 2006, WODES 2006: EIGHTH INTERNATIONAL WORKSHOP ON DISCRETE EVENT SYSTEMS, PROCEEDINGS, P384
   [Anonymous], [No title captured]
   Baier C, 2008, PRINCIPLES OF MODEL CHECKING, P1
   Bolognesi T., 1987, Protocol Specification, Testing, and Verification, VII. Proceedings of the IFIP WG 6.1 Seventh International Conference, P165
   Brandin B. A., 1994, Proceedings of the Fourth International Conference on Computer Integrated Manufacturing and Automation Technology, P319, DOI 10.1109/CIMAT.1994.389054
   Brandin BA, 2004, IEEE T CONTR SYST T, V12, P387, DOI 10.1109/TCST.2004.824795
   Cassandras C. G., 2008, INTRO TODISCRETE EVE
   CHENG KT, 1993, ACM IEEE D, P86
   Clarke E. M., 1989, Proceedings. Fourth Annual Symposium on Logic in Computer Science (Cat. No.89CH2753-2), P353, DOI 10.1109/LICS.1989.39190
   Dams D., 1994, IFIP WORK C PROGR CO, P573
   DENICOLA R, 1984, THEOR COMPUT SCI, V34, P83, DOI 10.1016/0304-3975(84)90113-0
   ELORANTA J, 1991, BIT, V31, P576, DOI 10.1007/BF01933173
   Feng L, 2009, INT J ADV MANUF TECH, V41, P1152, DOI 10.1007/s00170-008-1555-9
   FERNANDEZ JC, 1990, SCI COMPUT PROGRAM, V13, P219, DOI 10.1016/0167-6423(90)90071-K
   Flordal H, 2009, SIAM J CONTROL OPTIM, V48, P1914, DOI 10.1137/070695526
   Francis R., 2011, 042011 U WAIK DEP CO
   Gohari P, 2000, IEEE T SYST MAN CY B, V30, P643, DOI 10.1109/3477.875441
   Graf S., 1990, LECTURE NOTES COMPUT, V531, P186
   Hinze Annika., 2006, Em ACSC'06: Proceedings of the 29th Australasian Computer Science Conference, paginas, P257
   Hoare CAR., 1985, Communicating Sequential Processes
   Jingang Yi, 2007, Proceedings of the 3rd Annual IEEE Conference on Automation Science and Engineering, P1063
   Leduc R. J, 2002, THESIS
   Lotzbeyer Annette., 1996, TASK DESCRIPTION FLE
   Malik R, 2003, J UNIVERS COMPUT SCI, V9, P138
   Malik R, 2010, 052010 U WAIK DEP CO
   Malik R., 2013, IEEE T AUTOMAT CONTR, V58, P1, DOI DOI 10.1109/TAC.2013.2248255
   Malik R, 2006, INT J FOUND COMPUT S, V17, P797, DOI 10.1142/S012905410600411X
   MILNER R., 1989, SERIES COMPUTER SCI
   Mohajerani S., 2014, P 12 INT WORKSH DISC, P376
   Mohajerani S, 2014, IEEE T AUTOMAT CONTR, V59, P150, DOI 10.1109/TAC.2013.2283109
   NUUTILA E, 1995, MATH COMPUTING ENG S, V74
   Pena PN, 2009, IEEE T AUTOMAT CONTR, V54, P2803, DOI 10.1109/TAC.2009.2031730
   Pilbrow C., 2013, P 2 INT WORKSH FORM, P147
   RAMADGE PJG, 1989, P IEEE, V77, P81, DOI 10.1109/5.21072
   Song R., 2006, THESIS
   Su R, 2010, AUTOMATICA, V46, P968, DOI 10.1016/j.automatica.2010.02.025
   Tarjan R., 1972, SIAM Journal on Computing, V1, P146, DOI 10.1137/0201010
   Valmari A., 1996, Application and Theory of Petri Nets 1996. 17th International Conference. Proceedings, P29
   Ware S, 2013, INT J FOUND COMPUT S, V24, P1183, DOI 10.1142/S0129054113500287
   Ware S, 2012, DISCRETE EVENT DYN S, V22, P451, DOI 10.1007/s10626-012-0133-3
   Yanjun Wen, 2004, Theoretical Aspects of Computing - ICTAC 2004. First International Colloquium. Revised Selected Papers (Lecture Notes in Computer Science Vol.3407), P204
NR 41
TC 9
Z9 9
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 1
PY 2015
VL 113
BP 119
EP 148
DI 10.1016/j.scico.2015.05.010
PN 2
PG 30
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CY2HV
UT WOS:000366230300003
OA Green Accepted, hybrid
DA 2024-07-18
ER

PT J
AU O'Donnell, JT
AF O'Donnell, John T.
TI Extensible sparse functional arrays with circuit parallelism
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Functional array; Sparse array; Extensible array; Functional
   programming; Circuit parallelism
AB A longstanding open question in algorithms and data structures is the time and space complexity of pure functional arrays. Imperative arrays provide update and lookup operations that require constant time in the Random Access Machine (RAM) theoretical model, but it is conjectured that there does not exist a RAM algorithm that achieves the same complexity for functional arrays, unless restrictions are placed on the operations. The main result of this paper is an algorithm that does achieve optimal unit time and space complexity for update and lookup on functional arrays. This algorithm does not run on a RAM, but instead it exploits the massive parallelism inherent in digital circuits. The algorithm also provides unit time operations that support storage management, as well as sparse and extensible arrays. The main idea behind the algorithm is to replace a RAM memory by a tree circuit that is more powerful than the RAM yet has the same asymptotic complexity in time (gate delays) and size (number of components). The algorithm uses an array representation that allows elements to be shared between many arrays with only a small constant factor penalty in space and time. This system exemplifies circuit parallelism, which exploits large numbers of transistors per chip in order to speed up key algorithms. Extensible Sparse Functional Arrays (ESFA) can be used with both functional and imperative programming languages. The system comprises a set of algorithms and a circuit specification, and it has been implemented on a GPGPU. (C) 2015 Elsevier B.V. All rights reserved.
C1 [O'Donnell, John T.] Univ Glasgow, Sch Comp Sci, Glasgow G12 8QQ, Lanark, Scotland.
C3 University of Glasgow
RP O'Donnell, JT (corresponding author), Univ Glasgow, Sch Comp Sci, Glasgow G12 8QQ, Lanark, Scotland.
EM john.odonnell@glasgow.ac.uk
CR Andrews G. R., 1981, 5th International Conference on Software Engineering, P354
   [Anonymous], 1976, Content Addressable Parallel Processors
   [Anonymous], 2012, NVIDIA CUDA C PROGR
   [Anonymous], 1999, PURELY FUNCTIONAL DA
   Bloom G, 2012, EMSOFT '12: PROCEEDINGS OF THE TENTH AMC INTERNATIONAL CONFERENCE ON EMBEDDED SOFTWARE 2012, P133
   Chakravarty Manuel M. T., 2011, P 6 WORKSH DECL ASP, P3
   Firoozshahian A, 2009, CONF PROC INT SYMP C, P406, DOI 10.1145/1555815.1555805
   Jones SP, 2000, LECT NOTES COMPUT SC, V1868, P37
   LANDIN PJ, 1964, COMPUT J, V6, P308, DOI 10.1093/comjnl/6.4.308
   Martinez T. R., 1990, Future Generation Computer Systems, V6, P145, DOI 10.1016/0167-739X(90)90030-H
   O'Donnell J., 2013, LECT NOTES COMPUT SC, V8374
   O'Donnell J., 2002, PARALLEL DISTRIBUTED, P234, DOI [10.1109/IPDPS.2002.1016653, DOI 10.1109/IPDPS.2002.1016653]
   O'Donnell J. T., 1994, Parallel Processing Letters, V4, P329, DOI 10.1142/S0129626494000302
   O'Donnell J. T., 1993, PARLE '93 Parallel Architectures and Languages Europe. 5th International PARLE Conference Proceedings, P68
   O'Donnell J.T., 2014, ESF ARRAYS
   O'Donnell J.T., 2013, P 15 INT S PRINC PRA, P133
   Owens JD, 2007, COMPUT GRAPH FORUM, V26, P80, DOI 10.1111/j.1467-8659.2007.01012.x
   Peyton Jones S. L., 1993, Conference Record of the Twentieth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P71, DOI 10.1145/158511.158524
   St John T., 2012, P 2012 INT WORKSHOP, P115
   TRIOSSI A., 2012, P 14 S PRINC PRACT D, P173
NR 20
TC 0
Z9 0
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 1
PY 2015
VL 111
BP 23
EP 50
DI 10.1016/j.scico.2014.12.005
PN 1
PG 28
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DB5MA
UT WOS:000368557000003
OA Green Accepted
DA 2024-07-18
ER

PT J
AU Mantz, F
   Taentzer, G
   Lamo, Y
   Wolter, U
AF Mantz, Florian
   Taentzer, Gabriele
   Lamo, Yngve
   Wolter, Uwe
TI Co-evolving meta-models and their instance models: A formal approach
   based on graph transformation
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Meta-model evolution; Model migration; Graph transformation
ID DATABASE SCHEMA EVOLUTION; ADAPTATION; TOOLS
AB Model-driven engineering focuses on models as primary artifacts of the software development process, which means programs are mainly generated by model-to-code transformations. In particular, modeling languages tailored to specific domains promise to increase the productivity of software developers and the quality of generated software. Modeling languages, however, evolve over time and therefore, existing models have to be migrated accordingly. The manual migration of models tends to be tedious and error-prone, therefore tools have been developed to (partly) automate this process. Nevertheless, the migration results may not always be well-defined.
   In this article, we provide a formal framework for model migration which is independent of specific modeling approaches. We treat modeling languages, formalized by metamodels, as well as models as graphs and consider their co-evolutions as coupled graph transformations. In the same line, we study the conditions under which model migrations are well-defined. Existing solutions to model migration are either handwritten or default solutions that can hardly be customized. Here, we introduce a high-level specification approach, called model migration schemes, that supports automation and customization. Starting from a meta-model evolution rule, a default migration scheme can be automatically deduced and customized. (C) 2015 Published by Elsevier B.V.
C1 [Mantz, Florian; Taentzer, Gabriele; Lamo, Yngve] Bergen Univ Coll, Dept Comp Engn, Bergen, Norway.
   [Taentzer, Gabriele] Univ Marburg, Dept Math & Informat, D-35032 Marburg, Germany.
   [Wolter, Uwe] Univ Bergen, Dept Informat, N-5020 Bergen, Norway.
C3 Western Norway University of Applied Sciences; Philipps University
   Marburg; University of Bergen
RP Mantz, F (corresponding author), Bergen Univ Coll, Dept Comp Engn, Bergen, Norway.
EM fma@hib.no; taentzer@informatik.uni-marburg.de; yla@hib.no;
   Uwe.Wolter@ii.uib.no
RI Wolter, Uwe Egbert/GPS-4374-2022
OI Wolter, Uwe Egbert/0000-0002-7553-9858
FU Norwegian Research Council (NFR) [194521]
FX This research has been supported by the Norwegian Research Council (NFR
   project 194521, FORMGRID).
CR [Anonymous], 2009, ATLAS TRANSFORMATION
   [Anonymous], 1999, Category Theory for Computing Science
   Arendt T, 2010, LECT NOTES COMPUT SC, V6394, P121
   Atkinson Colin, 2012, Modelling Foundations and Applications. Proceedings 8th European Conference, ECMFA 2012, P194, DOI 10.1007/978-3-642-31491-9_16
   Banerjee J., 1987, SIGMOD Record, V16, P311, DOI 10.1145/38714.38748
   Bernstein PA, 2008, VLDB J, V17, P333, DOI 10.1007/s00778-007-0059-9
   Biermann E, 2012, SOFTW SYST MODEL, V11, P227, DOI 10.1007/s10270-011-0199-7
   BOEHM P, 1987, J COMPUT SYST SCI, V34, P377, DOI 10.1016/0022-0000(87)90030-4
   Cicchetti A, 2008, IEEE INT ENTERP DIST, P222, DOI 10.1109/EDOC.2008.44
   Corradini A, 2006, LECT NOTES COMPUT SC, V4178, P30
   Curino C, 2013, VLDB J, V22, P73, DOI 10.1007/s00778-012-0302-x
   Curino CA, 2010, PROC VLDB ENDOW, V4, P117, DOI 10.14778/1921071.1921078
   Curino CA, 2009, PROC INT CONF DATA, P1523, DOI 10.1109/ICDE.2009.46
   Deutsch Alin., 2003, P 29 INT C VERY LARG, V29, P201
   Ehrig H., 2006, MONO THEOR COMP SCI, DOI 10.1007/3-540-31188-2
   Ehrig H, 2009, BULL EUR ASSOC THEOR, P139
   Fagin R, 2007, ACM T DATABASE SYST, V32, DOI 10.1145/1292609.1292615
   Ferrandina F., 1995, P 21 INT C VER LARG P 21 INT C VER LARG, P170
   Garcés K, 2009, LECT NOTES COMPUT SC, V5562, P34, DOI 10.1007/978-3-642-02674-4_4
   Gruschko B., 2007, P INT WORKSH MOD DRI, P1
   Hassam K, 2011, EUR CON SFTWR MTNCE, P151, DOI 10.1109/CSMR.2011.21
   Hermann F, 2009, LECT NOTES COMPUT SC, V5503, P325
   Herrmannsdoerfer M, 2009, LECT NOTES COMPUT SC, V5653, P52, DOI 10.1007/978-3-642-03013-0_4
   Herrmannsdoerfer M, 2011, LECT NOTES COMPUT SC, V6563, P163, DOI 10.1007/978-3-642-19440-5_10
   Herrmannsdoerfer M, 2010, LECT NOTES COMPUT SC, V6002, P205
   Herrmannsdorfer M., 2011, THESIS TU MUNICH GER
   Kehrer T., 2011, 2011 26th IEEE/ACM International Conference on Automated Software Engineering, P163, DOI 10.1109/ASE.2011.6100050
   Kehrer T., 2013, P ASE 2013 28 IEEE A
   König H, 2011, LECT NOTES COMPUT SC, V7021, P1, DOI 10.1007/978-3-642-25032-3_1
   Krause Christian, 2013, Theory and Practice of Model Transformations. 6th International Conference, ICMT 2013. Proceedings: LNCS 7909, P76, DOI 10.1007/978-3-642-38883-5_10
   Lack S, 2004, LECT NOTES COMPUT SC, V2987, P273
   Lack S, 2006, LECT NOTES COMPUT SC, V4178, P184
   Lamo Y., 2013, 15 INT S PRINCIPLES, P1
   Levendovszky T., 2013, SOFTW SYST MODEL, P1
   Linz Peter., 2006, INTRO FORMAL LANGUAG, V4th
   Lowe M., 2013, TECHNICAL REPORT
   Mantz F., 2012, GCM 2012 SEPT, P47
   Mantz F., 2013, GRAPH TRANSFORMATION, P58
   Mantz F., 2014, THESIS PHILIPPS U MA
   Mantz F., 2010, P NWPT 2010 22 NORD, P52
   Meyers B, 2011, SCI COMPUT PROGRAM, V76, P1223, DOI 10.1016/j.scico.2011.01.002
   Nash A, 2007, ACM T DATABASE SYST, V32, DOI 10.1145/1206049.1206053
   Object Management Group, 2006, MET FAC SPEC
   Object Management Group, 2010, OBJ CONSTR LANG SPEC
   Orejas F., 2010, ELECT COMMUN EASST, V30, P1
   Peters R.J., 2000, LECT NOTES COMPUTER, P142
   Rose LM, 2014, SOFTW SYST MODEL, V13, P323, DOI 10.1007/s10270-012-0245-0
   Rose LM, 2010, LECT NOTES COMPUT SC, V6142, P184, DOI 10.1007/978-3-642-13688-7_13
   Rossini A., 2014, FORM ASP COMPUT, P1
   Rutle A., 2010, THESIS U BERGEN NORW
   Sprinkle J, 2004, J VISUAL LANG COMPUT, V15, P291, DOI 10.1016/j.jvlc.2004.01.006
   Taentzer Gabriele, 2012, Graph Transformations. Proceedings 6th International Conference, ICGT 2012, P326, DOI 10.1007/978-3-642-33654-6_22
   Taentzer G., 1996, THESIS TU BERLIN
   Taentzer G, 2013, LECT NOTES COMPUT SC, V8107, P254, DOI 10.1007/978-3-642-41533-3_16
   van den Brand M, 2011, LECT NOTES COMPUT SC, V6705, P36, DOI 10.1007/978-3-642-21952-8_5
   Vermolen S, 2008, LECT NOTES COMPUT SC, V5301, P630, DOI 10.1007/978-3-540-87875-9_44
   Vermolen Sander D, 2011, INT C SOFTW LANG ENG, P201
   Visser E, 2008, LECT NOTES COMPUT SC, V5235, P291, DOI 10.1007/978-3-540-88643-3_7
   Wachsmuth G, 2007, LECT NOTES COMPUT SC, V4609, P600
   Wagelaar Dennis, 2012, Theory and Practice of Model Transformations. Proceedings 5th International Conference, ICMT 2012, P192, DOI 10.1007/978-3-642-30476-7_13
   Xue Li, 1999, Proceedings Technology of Object-Oriented Languages and Systems (Cat. No.PR00393), P362, DOI 10.1109/TOOLS.1999.796507
   [No title captured]
NR 62
TC 30
Z9 31
U1 0
U2 5
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 15
PY 2015
VL 104
SI SI
BP 2
EP 43
DI 10.1016/j.scico.2015.01.002
PG 42
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CG2BO
UT WOS:000353080100002
OA Bronze
DA 2024-07-18
ER

PT J
AU Huuck, R
AF Huuck, Ralf
TI Technology transfer: Formal analysis, engineering, and business value
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 1st International Workshop on Formal-Techniques-for-
   Safety-Critical-Systems (FTSCS 2012)
CY NOV 12, 2012
CL Kyoto, JAPAN
DE Static analysis; Model checking; SMT solving; Industrial application;
   Experience report
AB In this work we report on our experiences on developing and commercializing Goanna, a source code analyzer for detecting software bugs and security vulnerabilities in C/C++ code. Goanna is based on formal software analysis techniques such as model checking, static analysis and SMT solving. The commercial version of Goanna is currently deployed in a wide range of organizations around the world. Moreover, the underlying technology is licensed to an independent software vendor with tens of thousands of customers, making it possibly one of the largest deployments of automated formal methods technology. This paper explains some of the challenges as well as the positive results that we encountered in the technology transfer process. In particular, we provide some background on the design decisions and techniques to deal with large industrial code bases, we highlight engineering challenges and efforts that are typically outside of a more academic setting, and we address core aspects of the bigger picture for transferring formal techniques into commercial products, namely, the adoption of such technology and the value for purchasing organizations.
   While we provide a particular focus on Goanna and our experience with that underlying technology, we believe that many of those aspects hold true for the wider field of formal analysis and verification technology and its adoption in industry. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Huuck, Ralf] NICTA, Sydney, NSW, Australia.
   [Huuck, Ralf] UNSW, Sch Comp Sci & Engn, Sydney, NSW, Australia.
C3 Australian National University; University of New South Wales Sydney
RP Huuck, R (corresponding author), NICTA, Sydney, NSW, Australia.
EM ralf.huuck@nicta.com.au
FU Australian Government through the Department of Communications;
   Australian Research Council through the ICT Centre of Excellence Program
FX NICTA is funded by the Australian Government through the Department of
   Communications and the Australian Research Council through the ICT
   Centre of Excellence Program. The author also likes to thank the
   anonymous reviewers for their comments on the earlier versions of this
   worked that helped to shape this article.
CR [Anonymous], ENCY DATABASE SYSTEM
   [Anonymous], 2004, MISRAC: 2004-Guidelines for the use of the C language in critical systems
   [Anonymous], PREV C C
   [Anonymous], 2008, The Cert C Secure Coding Standard. Sei
   [Anonymous], 2002, CAV, DOI DOI 10.1007/3-540-45657-0
   [Anonymous], 2002, 6 WORLD C INT DES PR
   [Anonymous], ITD0445263Z BELL LAB
   [Anonymous], 2004, P INT S COD GEN OPT
   Bessey A, 2010, COMMUN ACM, V53, P66, DOI 10.1145/1646353.1646374
   Biallas S, 2013, IEEE INT WORK C SO, P69, DOI 10.1109/SCAM.2013.6648186
   Blanchet B, 2002, LECT NOTES COMPUT SC, V2566, P85
   Brauer J, 2009, ELECTRON NOTES THEOR, V254, P65, DOI 10.1016/j.entcs.2009.09.060
   BRYANT RE, 1986, IEEE T COMPUT, V35, P677, DOI 10.1109/TC.1986.1676819
   Chess B., 2007, Secure programming with static analysis
   Clarke. E. M., 1982, LOGICS OF PROGRAMS, P52, DOI [10 . 1007 / BFb0025774, DOI 10.1007/BFB0025774]
   Cousot P., 1979, 6 ACM S PRINCIPLES P, P269, DOI DOI 10.1145/567752.567778
   D'Silva V, 2008, IEEE T COMPUT AID D, V27, P1165, DOI 10.1109/TCAD.2008.923410
   De Moura L, 2011, COMMUN ACM, V54, P69, DOI 10.1145/1995376.1995394
   Deutsch A., 1995, Proceedings of the ACM SIGPLAN Symposium on Partial Evaluation and Semantics- Based Program Manipulation. PEPM'95, P226, DOI 10.1145/215465.215594
   Engler D, 2000, USENIX ASSOCIATION PROCEEDINGS OF THE FOURTH SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P1
   Fehnker A, 2007, TASE 2007: FIRST JOINT IEEE/IFIP SYMPOSIUM ON THEORETICAL ASPECTS OF SOFTWARE ENGINEERING, PROCEEDINGS, P45, DOI 10.1109/TASE.2007.34
   Fehnker A, 2007, LECT NOTES COMPUT SC, V4346, P297
   Fehnker A, 2010, ELECTRON NOTES THEOR, V266, P17, DOI 10.1016/j.entcs.2010.08.046
   Heizmann Matthias, 2013, Computer Aided Verification. 25th International Conference, CAV 2013. Proceedings. LNCS 8044, P36, DOI 10.1007/978-3-642-39799-8_2
   Jetley Raoul Praful, 2008, Proceedings of the 2008 Workshop on Static Analysis, SAW '08, p22S29, DOI 10.1145/1394504.1394507
   Junker M., 2012, Formal Methods and Software Engineering, P316
   McGraw G, 2011, IEEE SOFTWARE, V28, P9, DOI 10.1109/MS.2011.110
   Queille JP, 2008, LECT NOTES COMPUT SC, V5000, P216
   Schmidt D, 1998, LECT NOTES COMPUT SC, V1503, P351
   Schmidt D. A., 1998, Conference Record of POPL '98: 25th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P38, DOI 10.1145/268946.268950
NR 30
TC 3
Z9 4
U1 0
U2 8
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 1
PY 2015
VL 103
BP 3
EP 12
DI 10.1016/j.scico.2014.11.003
PG 10
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA CE6QX
UT WOS:000351964100002
OA Bronze
DA 2024-07-18
ER

PT J
AU Gatrell, M
   Counsell, S
AF Gatrell, M.
   Counsell, S.
TI The effect of refactoring on change and fault-proneness in commercial C#
   software
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Refactoring; Change-proneness; Fault analysis; Evolution
AB Refactoring is a process for improving the internal characteristics and design of software while preserving its external behaviour. Refactoring has been suggested as a positive influence on the long-term quality and maintainability of software and, as a result, we might expect benefits of a lower future change or fault propensity by refactoring software. Conversely, many studies show a correlation between change and future faults; so application of a refactoring may in itself increase future fault propensity, negating any benefit of the refactoring. In this paper, we determine whether the refactoring process reaps future maintenance benefits and, as a consequence, results in software with a lower propensity for both faults and change. We studied a large, commercial software system over a twelve-month period and identified a set of refactored classes during the middle four months of the study; a bespoke tool was used to detect occurrences of fifteen types of refactoring. We then examined the fault- and change-proneness of the same set of refactored classes in the four months prior to, during, and after the period of refactoring to determine if change or fault activity was reduced either during or after the period of refactoring studied. We also compared these trends with remaining classes in the system that had not been refactored over the same periods. Results revealed that refactored classes experienced a lower change-proneness in the period after refactoring and were significantly less fault-prone during and after the period of refactoring, even when accounting for the effects of change. The study therefore presents concrete evidence of the benefits of refactoring in these two senses. (C) 2015 Elsevier B.V. All rights reserved.
C1 [Gatrell, M.] MarketInvoice, London, England.
   [Counsell, S.] Brunel Univ, Dept Comp Sci, Uxbridge UB8 3PH, Middx, England.
C3 Brunel University
RP Counsell, S (corresponding author), Brunel Univ, Dept Comp Sci, Uxbridge UB8 3PH, Middx, England.
EM steve.counsell@brunel.ac.uk
CR Alshayeb M, 2009, INFORM SOFTWARE TECH, V51, P1319, DOI 10.1016/j.infsof.2009.04.002
   [Anonymous], 2009, PROC INT C METHODS M
   [Anonymous], 2010, Proceedings of the International Conference on Software Maintenance (ICSM)
   Bavota G., 2012, 2012 12th IEEE Working Conference on Source Code Analysis and Manipulation (SCAM 2012), P104, DOI 10.1109/SCAM.2012.20
   Cinnéide MO, 2012, INT SYMP EMP SOFTWAR, P49, DOI 10.1145/2372251.2372260
   Counsell S., 2006, ISESE 06 P 2006 ACMI, P288, DOI DOI 10.1145/1159733.1159777
   Counsell S., 2003, ACM 2 INT C PRINC PR, P3
   Deepak Advani, 2006, Applied Computing 2006. 21st Annual ACM Symposium on Applied Computing, P1713, DOI 10.1145/1141277.1141685
   Demeyer S, 2000, ACM SIGPLAN NOTICES, V35, P166, DOI 10.1145/354222.353183
   Dinh-Trong T, 2004, 10TH INTERNATIONAL SYMPOSIUM ON SOFTWARE METRICS, PROCEEDINGS, P96, DOI 10.1109/METRIC.2004.1357894
   Du Bois B, 2004, 11TH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P144, DOI 10.1109/WCRE.2004.33
   Elish KO, 2009, ASIA PAC SOFWR ENG, P29, DOI 10.1109/APSEC.2009.14
   Field A, 2018, Discovering Statistics Using IBM SPSS Statistics, Vfifth
   Fowler M., 1999, Refactoring: Improving the Design of Existing Code
   Gatrell M, 2009, WORK CONF REVERSE EN, P160, DOI 10.1109/WCRE.2009.31
   Gatrell M., 2009, P EMP ASS SOFTW ENG
   Gatrell M, 2010, J OBJECT TECHNOL, V9, P29, DOI 10.5381/jot.2010.9.5.a2
   Kim M., 2012, P ACM SIGSOFT 20 INT, P1
   Landsberger H.A., 1958, Hawthorne Revisited
   Lee YY, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P23, DOI 10.1109/ICSE.2013.6606548
   Liu H, 2013, IEEE T SOFTWARE ENG, V39, P1112, DOI 10.1109/TSE.2013.4
   Mayer P., 2012, 2012 12th IEEE Working Conference on Source Code Analysis and Manipulation (SCAM 2012), P94, DOI 10.1109/SCAM.2012.11
   Mens T, 2004, IEEE T SOFTWARE ENG, V30, P126, DOI 10.1109/TSE.2004.1265817
   Mens T., REFACTORING EMERGING
   Moschinski S., 2011, THESIS O VONGUERICKE
   Moser R., 2008, 2 IFIP TC2 CENTR E E
   Murphy-Hill E., 2008, ICSE '08, P421
   Murphy-Hill E, 2009, PROC INT CONF SOFTW, P287, DOI 10.1109/ICSE.2009.5070529
   OCINNEIDE M, 1998, P WORKSH FORM TECHN
   Opdyke W. F., 1992, Refactoring object-oriented frameworks
   Ratzinger Jacek, 2007, 2007 First International Symposium on Empirical Software Engineering and Measurement, P354
   Soares G, 2010, IEEE SOFTWARE, V27, P52, DOI 10.1109/MS.2010.63
   Soetens QD, 2010, QUATIC 2010: SEVENTH INTERNATIONAL CONFERENCE ON THE QUALITY OF INFORMATION AND COMMUNICATIONS TECHNOLOGY, P313, DOI 10.1109/QUATIC.2010.58
   Stroggylos K., 2007, P 5 INT WORKSH SOFTW, P10, DOI [10.1109/WOSQ.2007.11, DOI 10.1109/WOSQ.2007.11]
   Tokuda L., 2001, Automated Software Engineering, V8, P89, DOI 10.1023/A:1008715808855
   Tsantalis N, 2005, IEEE T SOFTWARE ENG, V31, P601, DOI 10.1109/TSE.2005.83
   Tsantalis N, 2011, J SYST SOFTWARE, V84, P1757, DOI 10.1016/j.jss.2011.05.016
   Van Deursen A., 2002, PROC 3 INT C EXTREME, P71
   Weissgerber Peter., 2006, Proceedings of the 2006 International Workshop on Mining Software Repositories, MSR '06, P112
   Zhao L, 2006, 2 INT PROMISE WORKSH
NR 40
TC 28
Z9 28
U1 1
U2 6
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAY 1
PY 2015
VL 102
BP 44
EP 56
DI 10.1016/j.scico.2014.12.002
PG 13
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CE7UO
UT WOS:000352047500003
OA hybrid
DA 2024-07-18
ER

PT J
AU Cimatti, A
   Tonetta, S
AF Cimatti, Alessandro
   Tonetta, Stefano
TI Contracts-refinement proof system for component-based embedded systems
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Contract-based design; Temporal logics; Embedded systems; OCRA
ID REQUIREMENTS; VALIDATION; DESIGN; LOGIC
AB Contract-based design is an emerging paradigm for the design of complex systems, where each component is associated with a contract, i.e., a clear description of the expected interaction of the component with its environment. Contracts specify the expected behavior of a component by defining the assumptions that must be satisfied by the environment and the guarantees satisfied by the component in response. The ultimate goal of contract-based design is to allow for compositional reasoning, stepwise refinement, and a principled reuse of components that are already pre-designed, or designed independently.
   In this paper, we present fully formal contract framework based on temporal logic (a preliminary version of this framework has been presented in [1]). The synchronous or asynchronous decomposition of a component into subcomponents is complemented with the corresponding refinement of its contracts. The framework exploits such decomposition to automatically generate a set of proof obligations. Once verified, the conditions allow concluding the correctness of the architecture. This means that the components ensure the guarantee of the system and the system ensures the assumptions of the components. The framework can be instantiated with different temporal logics. The proof system reduces the correctness of contracts refinement to entailment of temporal logic formulas. The tool support relies on an expressive property specification language, conceived for the formalization of embedded system requirements, and on a verification engine based on automated SMT techniques. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Cimatti, Alessandro; Tonetta, Stefano] Fdn Bruno Kessler, Trento, Italy.
C3 Fondazione Bruno Kessler
RP Cimatti, A (corresponding author), Fdn Bruno Kessler, Trento, Italy.
RI Tonetta, Stefano/AAP-3546-2020
OI Cimatti, Alessandro/0000-0002-1315-6990
FU ARTEMIS Joint Undertaking [269265, 295373]; National funding
FX The research leading to these results has received funding from the
   ARTEMIS Joint Undertaking under grant agreements no. 269265 and 295373
   and from National funding.
CR Alur R., 1990, Proceedings. Fifth Annual IEEE Symposium on Logic in Computer Science (90CH2897-7), P390, DOI 10.1109/LICS.1990.113764
   [Anonymous], 2001, LNCS, DOI [DOI 10.1007/3-540-45449-7_11, DOI 10.1007/3-540-45449-711]
   [Anonymous], TIMOBD 11
   [Anonymous], SEAA
   Arnold A., 1999, Fundamenta Informaticae, V40, P109
   Basu A, 2011, IEEE SOFTWARE, V28, P41, DOI 10.1109/MS.2011.27
   Bauer SS, 2012, LECT NOTES COMPUT SC, V7212, P43, DOI 10.1007/978-3-642-28872-2_3
   Benes N, 2009, LECT NOTES COMPUT SC, V5423, P307
   Benveniste A, 2008, LECT NOTES COMPUT SC, V5382, P200, DOI 10.1007/978-3-540-92188-2_9
   Benveniste Albert., 2007, A Generic Model of Contracts for Embedded Systems
   Benveniste Albert., 2012, Research Report RR-8147, P65
   Bozzano M, 2011, COMPUT J, V54, P754, DOI 10.1093/comjnl/bxq024
   Cimatti A., 2014, P 20 INT C TOOLS ALG, P46
   Cimatti A., 2014, CAV IN PRESS
   Cimatti A, 2007, LECT NOTES COMPUT SC, V4590, P532
   Cimatti A, 2013, LECT NOTES COMPUT SC, V7795, P93
   Cimatti A, 2013, IEEE INT CONF AUTOM, P702, DOI 10.1109/ASE.2013.6693137
   Cimatti A, 2012, ACM T SOFTW ENG METH, V21, DOI 10.1145/2377656.2377659
   Cimatti A, 2009, LECT NOTES COMPUT SC, V5643, P188, DOI 10.1007/978-3-642-02658-4_17
   Cofer Darren, 2012, NASA Formal Methods. Proceedings of the 4th International Symposium, NFM 2012, P126, DOI 10.1007/978-3-642-28891-3_13
   Damm W, 2011, DES AUT TEST EUROPE, P1023
   de Roever Willem-Paul, 2001, Concurrency Verification: Introduction to Compositional and Noncompositional Proof Methods
   KOYMANS R, 1990, REAL-TIME SYST, V2, P255, DOI 10.1007/BF01995674
   MEYER B, 1992, COMPUTER, V25, P40, DOI 10.1109/2.161279
   Pnueli A., 1977, 18th Annual Symposium on Foundations of Computer Science, P46, DOI 10.1109/SFCS.1977.32
   Pradella M, 2013, ACM T SOFTW ENG METH, V22, DOI 10.1145/2491509.2491514
   Quinton S, 2008, SEFM 2008: SIXTH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING AND FORMAL METHODS, PROCEEDINGS, P377, DOI 10.1109/SEFM.2008.28
   Raskin JF, 1997, LECT NOTES COMPUT SC, V1201, P33, DOI 10.1007/BFb0014711
   SAE International, 1996, ARP4761: Guidelines And Methods For Conducting The Safety Assessment Process On Civil Airborne Systems And Equipment
   Sangiovanni-Vincentelli A, 2012, EUR J CONTROL, V18, P217, DOI 10.3166/EJC.18.217-238
   Zhang PC, 2010, J SYST SOFTWARE, V83, P371, DOI 10.1016/j.jss.2009.09.013
NR 31
TC 48
Z9 52
U1 0
U2 10
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 1
PY 2015
VL 97
BP 333
EP 348
DI 10.1016/j.scico.2014.06.011
PN 3
PG 16
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AW8YN
UT WOS:000346545300006
OA Bronze
DA 2024-07-18
ER

PT J
AU Gaia, FN
   Ferreira, GCS
   Figueiredo, E
   Maia, MD
AF Gaia, Felipe Nunes
   Sousa Ferreira, Gabriel Coutinho
   Figueiredo, Eduardo
   Maia, Marcelo de Almeida
TI A quantitative and qualitative assessment of aspectual feature modules
   for evolving software product lines
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Software product lines; Feature-oriented programming; Aspect-oriented
   programming; Aspectual feature modules; Variability mechanisms
ID VARIABILITY
AB Feature-Oriented Programming (FOP) and Aspect-Oriented Programming (AOP) are programming techniques based on composition mechanisms, called refinements and aspects, respectively, These techniques are assumed to be good variability mechanisms for implementing Software Product Lines (SPLs). Aspectual Feature Modules (AFM) is an approach that combines advantages of feature modules and aspects to increase concern modularity. Some guidelines on how to integrate these techniques have been established in some studies, but these studies do not focus the analysis on how effectively AFM can preserve the modularity and stability facilitating SPL evolution. The main purpose of this paper is to investigate whether the simultaneous use of aspects and features through the AFM approach facilitates the evolution of SPLs. The quantitative data were collected from two SPLs developed using four different variability mechanisms: (1) feature modules, aspects and aspects refinements of AFM, (2) aspects of aspect-oriented programming (AOP), (3) feature modules of feature-oriented programming (FOP), and (4) conditional compilation (CC) with object-oriented programming. Metrics for change propagation and modularity were calculated and the results support the benefits of the AFM option in a context where the product line has been evolved with addition or modification of crosscutting concerns. However a drawback of this approach is that refactoring components' design requires a higher degree of modifications to the SPL structure. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Gaia, Felipe Nunes; Sousa Ferreira, Gabriel Coutinho; Maia, Marcelo de Almeida] Univ Fed Uberlandia, Uberlandia, MG, Brazil.
   [Figueiredo, Eduardo] Univ Fed Minas Gerais, Belo Horizonte, MG, Brazil.
C3 Universidade Federal de Uberlandia; Universidade Federal de Minas Gerais
RP Gaia, FN (corresponding author), Univ Fed Uberlandia, Uberlandia, MG, Brazil.
EM felipegaia@mestrado.ufu.br; gabriel@mestrado.ufu.br;
   figueiredo@dcc.ufmg.br; marcmaia@facom.ufu.br
RI Gaia, Felipe Nunes/O-7138-2015; Ferreira, Gabriel/GYR-0733-2022; Maia,
   Marcelo/F-3090-2017
OI Ferreira, Gabriel/0000-0002-5368-0156; Maia, Marcelo/0000-0003-3578-1380
FU FAPEMIG [APQ-02376-11, APQ-02532-12, APQ-0286-11]; CNPq [485235/2011-0,
   475519/2012-4]
FX This work was partially supported by FAPEMIG, grants APQ-02376-11,
   APQ-02532-12, APQ-0286-11 and CNPq grants 485235/2011-0 and
   475519/2012-4.
CR Adams B, 2009, AOSD'09: 8TH INTERNATIONAL CONFERENCE ON ASPECT-ORIENTED SOFTWARE DEVELOPMENT, P243
   [Anonymous], 2005, THESIS U BRIT COLUMB
   APEL S, 2006, USE FEATURES ASPECTS
   APEL S, 2006, P ICSE 06 SHANGH CHI
   Apel S, 2008, IEEE T SOFTWARE ENG, V34, P162, DOI 10.1109/TSE.2007.70770
   Babar MA, 2010, IEEE SOFTWARE, V27, P89, DOI 10.1109/MS.2010.77
   Batory D, 2004, IEEE T SOFTWARE ENG, V30, P355, DOI 10.1109/TSE.2004.23
   Batory D, 2004, PROC INT CONF SOFTW, P702, DOI 10.1109/ICSE.2004.1317496
   Batory D, 2005, LECT NOTES COMPUT SC, V3714, P7
   Clements P., 2002, Software product lines
   Dantas F., 2010, 23 BRAZ S SOFTW ENG
   Eaddy M, 2008, IEEE T SOFTWARE ENG, V34, P497, DOI 10.1109/TSE.2008.36
   Ferreira G., 2013, SCI COMPUT PROGRAM
   FIGUEIREDO E, 2008, P EUR C SOFT MAINT R
   Figueiredo E., 2009, 23 BRAZ S SOFTW ENG
   Figueiredo E, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P261, DOI 10.1145/1368088.1368124
   Gamma Erich., 1994, DESIGN PATTERNS
   Garcia A., 2005, AOSD 05, P3
   Godfrey MW, 2008, 2008 FRONTIERS OF SOFTWARE MAINTENANCE, P129, DOI 10.1109/FOSM.2008.4659256
   Greenwood P., 2007, ECOOP BERL
   Hu Y., 2000, P IEEE INT C SOFTW M
   JONES C, 1994, COMPUTER, V27, P98, DOI 10.1109/2.312055
   Kästner C, 2009, J OBJECT TECHNOL, V8, P59
   Kastner C., 2007, INT SPL C
   Lee K, 2000, SPRINGER INT SER ENG, V576, P3
   Lopez-Herrejon RE, 2005, LECT NOTES COMPUT SC, V3586, P169
   Maletic JI, 2008, 2008 FRONTIERS OF SOFTWARE MAINTENANCE, P31, DOI 10.1109/FOSM.2008.4659246
   Mayer T, 1999, SOFTWARE QUAL J, V8, P97, DOI 10.1023/A:1008900825849
   Mens T, 2005, EIGHTH INTERNATIONAL WORKSHOP ON PRINCIPLES OF SOFTWARE EVOLUTION, PROCEEDINGS, P13, DOI 10.1109/IWPSE.2005.7
   Meyer B., 1988, Object-Oriented Software Construction
   Mezini M., 2004, Software Engineering Notes, V29, P127, DOI 10.1145/1041685.1029915
   Monteiro MP, 2013, SOFTWARE PRACT EXPER, V43, P1519, DOI 10.1002/spe.2154
   Murphy GC, 2001, PROC INT CONF SOFTW, P275, DOI 10.1109/ICSE.2001.919101
   Nunes Gaia Felipe, 2012, Programming Languages. Proceedings of the16th Brazilian Symposium, SBLP 2012, P134, DOI 10.1007/978-3-642-33182-4_11
   Pettersson Ulf., 2005, ESECFSE 13, P326
   Prehofer C, 1997, LECT NOTES COMPUT SC, V1241, P419
   Sant'Anna C., 2003, P BRAZILIAN S SOFTWA, P19
   Schaefer I, 2010, LECT NOTES COMPUT SC, V6287, P77, DOI 10.1007/978-3-642-15579-6_6
   Sutton Andrew, 2007, 2007 IEEE International Conference on Software Maintenance, P275, DOI 10.1109/ICSM.2007.4362640
   Svahnberg M, 2005, SOFTWARE PRACT EXPER, V35, P705, DOI 10.1002/spe.652
   Wohlin C., 1999, EXPT SOFTWARE ENG IN
   YAU SS, 1985, IEEE T SOFTWARE ENG, V11, P849, DOI 10.1109/TSE.1985.232544
   [No title captured]
   [No title captured]
   [No title captured]
NR 45
TC 9
Z9 10
U1 0
U2 7
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 15
PY 2014
VL 96
BP 230
EP 253
DI 10.1016/j.scico.2014.03.006
PN 2
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AT8JY
UT WOS:000345180900005
DA 2024-07-18
ER

PT J
AU Cuomo, A
   Santone, A
   Villano, U
AF Cuomo, Antonio
   Santone, Antonella
   Villano, Umberto
TI CD-Form: A clone detector based on formal methods
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Clone detection; Formal methods; CCS
ID MODEL CHECKING; NICAD
AB This paper presents the design and implementation of CD-Form (Clone Detector based on FORmal Methods), a tool targeted at the detection of Type-2 clones in Java code. CD-Form is based on a novel approach for detecting code clones. The methodology adopted performs the analysis on Java bytecode and not on the original Java source. The bytecode is transformed into CCS (Calculus of Communicating Systems) processes, which are successively checked for equivalence. After a thorough description of the methodology used for detecting clones, the design of the tool is presented. The results obtained by evaluating sample Java codes are validated by comparing them to those obtained by a state-of-the-art tool for clone detection. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Cuomo, Antonio; Santone, Antonella; Villano, Umberto] Univ Sannio, Dipartimento Ingn, Sannio, Italy.
C3 University of Sannio
RP Cuomo, A (corresponding author), Univ Sannio, Dipartimento Ingn, Sannio, Italy.
EM antonio.cuomo@unisannio.it; santone@unisannio.it; villano@unisannio.it
CR [Anonymous], 2012, 6 INT WORKSH SOFTW C
   [Anonymous], 2001, MODEL CHECKING
   Baker B., 1998, USENIX ANN TECHN C
   Bellon S, 2007, IEEE T SOFTWARE ENG, V33, P577, DOI 10.1109/TSE.2007.70725
   Berezin S, 1998, LECT NOTES COMPUT SC, V1536, P81, DOI 10.1007/3-540-49213-5_4
   Bruns Glenn., 1997, DISTRIBUTED SYSTEMS
   CLARKE EM, 1994, ACM T PROGR LANG SYS, V16, P1512, DOI 10.1145/186025.186051
   Cleaveland R., 1996, Computer Aided Verification. 8th International Conference, CAV '96. Proceedings, P394
   Cordy J.R., 2011, TUNING RES TOOLS SCA
   Cordy JR, 2011, CONF PROC INT SYMP C, P219, DOI 10.1109/ICPC.2011.26
   Cuomo A., IWSC, P8
   Daly C., 2001, Proceedings of the 2001 joint ACM-ISCOPE conference on Java Grande, P106, DOI [DOI 10.1145/376656.376826, 10.1145/376656, DOI 10.1145/376656]
   Davis Ian J., 2010, INTERNATIONAL WORKSH, P77
   Jha S, 1997, PR IEEE COMP DESIGN, P332, DOI 10.1109/ICCD.1997.628891
   Keivanloo I., IWSC, P36
   Milner R., 1989, PHI SER COMPUT SCI
   Pearl J., 1984, Heuristics: Intelligent Search Strategies for Computer Problem Solving
   Roy CK, 2009, IEEE ICST WORKSHOP, P157, DOI 10.1109/ICSTW.2009.18
   Roy CK, 2008, INT C PROGRAM COMPRE, P172, DOI 10.1109/ICPC.2008.41
   Roy CK, 2009, SCI COMPUT PROGRAM, V74, P470, DOI 10.1016/j.scico.2009.02.007
   Santone Antonella, 2011, Proceedings of the 2011 International Conference on Artificial Intelligence (ICAI 2011). WORLDCOMP'11, P293
   Santone A., 2011, PROC 5 INT WORKSHOP, P73
   Santone A, 2013, SCI COMPUT PROGRAM, V78, P1346, DOI 10.1016/j.scico.2012.07.015
   Santone A, 2012, ACTA INFORM, V49, P313, DOI 10.1007/s00236-012-0161-3
   Selim G. M. K., 2010, Proceedings 17th Working Conference on Reverse Engineering (WCRE 2010), P227, DOI 10.1109/WCRE.2010.33
   Stirling Colin, 1989, P CONC THEOR LANG AR, P2
NR 26
TC 8
Z9 8
U1 0
U2 4
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 1
PY 2014
VL 95
SI SI
BP 390
EP 405
DI 10.1016/j.scico.2013.11.022
PN 4
PG 16
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AS9RI
UT WOS:000344578900002
OA Bronze
DA 2024-07-18
ER

PT J
AU Hogenboom, F
   Vandic, D
   Frasincar, F
   Verheij, A
   Kleijn, A
AF Hogenboom, Frederik
   Vandic, Damir
   Frasincar, Flavius
   Verheij, Arnout
   Kleijn, Allard
TI A query language and ranking algorithm for news items in the Hermes news
   processing framework
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Query languages; News ranking; Ontology-based querying
AB Hermes is a Web-based framework that makes use of many Semantic Web technologies for building personalized news services. Ontologies are employed for knowledge representation, natural language processing techniques are used for semantic text analysis, and semantic query languages enable the specification of the desired information. To accommodate for the need for an intuitive way to create complex queries for news information, we present the Hermes Graphical Query Language (HGQL). The language enables users to create structured queries that use disjunctive, conjunctive, negation, and pattern operators. In addition, this paper presents a ranking algorithm based on the queries made using our graphical query language. Results show that our proposed ranking algorithm significantly outperforms three state-of-the-art ranking algorithms and that users prefer our graphical query language over a text-based alternative. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Hogenboom, Frederik; Vandic, Damir; Frasincar, Flavius; Verheij, Arnout; Kleijn, Allard] Erasmus Univ, NL-3000 DR Rotterdam, Netherlands.
C3 Erasmus University Rotterdam - Excl Erasmus MC; Erasmus University
   Rotterdam
RP Hogenboom, F (corresponding author), Erasmus Univ, POB 1738, NL-3000 DR Rotterdam, Netherlands.
EM fhogenboom@ese.eur.nl; vandic@ese.eur.nl; frasincar@ese.eur.nl;
   308057av@student.eur.nl; 303118ak@student.eur.nl
RI Frasincar, Flavius/AAC-8253-2021; Frasincar, Flavius/D-3171-2011
OI Frasincar, Flavius/0000-0002-8031-758X; 
FU NWO Physical Sciences Free Competition project: Financial Events
   Recognition in News for Algorithmic Trading (FERNAT) [612.001.009];
   Dutch national program COMMIT
FX The authors are partially sponsored by the NWO Physical Sciences Free
   Competition project 612.001.009: Financial Events Recognition in News
   for Algorithmic Trading (FERNAT) and the Dutch national program COMMIT.
CR Aleahmad A, 2007, P IEEE INT S SIGN PR, P1
   ANGELACCIO M, 1990, IEEE T SOFTWARE ENG, V16, P1150, DOI 10.1109/32.60295
   [Anonymous], 2005, Chiba, Japan, Proceedings for the 14th International World Wide Web Conference, DOI DOI 10.1145/1060745.1060766
   [Anonymous], 1983, INTRO MODERN INFORM
   Banerjee S., 2002, Computational Linguistics and Intelligent Text Processing. Third International Conference, CICLing 2002. Proceedings (Lecture Notes in Computer Science Vol.2276), P136
   Berkeley Institute of Design, 2012, PREF INF VIS TOOLK
   Borsje Jethro, 2012, OWL2REFUSE OWL PREFU
   BRILL E, 1992, THIRD CONFERENCE ON APPLIED NATURAL LANGUAGE PROCESSING, P152, DOI 10.3115/974499.974526
   BUCKLEY C, 1995, INFORM PROCESS MANAG, V31, P315, DOI 10.1016/0306-4573(94)00049-9
   Chowdhury G.G., 1998, INTRO MODERN INFORM
   Cunningham H, 2002, 40TH ANNUAL MEETING OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS, PROCEEDINGS OF THE CONFERENCE, P168
   Cunningham H, 2002, COMPUT HUMANITIES, V36, P223, DOI 10.1023/A:1014348124664
   Fadhil A., 2006, OWL EXP DIR OWLED 20
   Fellbaum C., 1998, WORDNET ELECT LEXICA, DOI DOI 10.7551/MITPRESS/7287.001.0001
   Frasincar F., 2011, E-Business Applications for Product Development and Competitive Growth: Emerging Technologies, P261, DOI [10.4018/978-1-60960-132, DOI 10.4018/978-1-60960-132]
   Frasincar F, 2012, BUSINESS INTELLIGENCE APPLICATIONS AND THE WEB: MODELS, SYSTEMS AND TECHNOLOGIES, P102, DOI 10.4018/978-1-61350-038-5.ch005
   Frasincar F, 2009, INT J E-BUS RES, V5, P35, DOI 10.4018/jebr.2009082103
   Harth A., 2006, 15 INT C WORLD WID W, P859, DOI [10.1145/1135777.1135914, DOI 10.1145/1135777.1135914]
   Hiemstra D., 2001, THESIS U TWENTE
   Hogenboom F, 2010, ADV INFORM KNOWL PRO, P87, DOI 10.1007/978-1-84996-074-8_4
   Hynek J., 2002, DOCUMENT CLASSIFICAT
   IJntema W., 2010, ACM INT C P SERIES, V426
   IJntema W, 2012, J WEB SEMANT, V15, P37, DOI 10.1016/j.websem.2012.01.002
   Jensen A., 2008, THESIS TU DENMARK
   Kleine Buning H., 1999, PROPOSITIONAL LOGIC
   LUHN HP, 1957, IBM J RES DEV, V1, P309, DOI 10.1147/rd.14.0309
   Michard A., 1982, Behaviour and Information Technology, V1, P279, DOI 10.1080/01449298208914452
   PAICE CD, 1984, INFORM TECHNOL R & D, V3, P33
   SALTON G, 1973, J DOC, V29, P351, DOI 10.1108/eb026562
   SALTON G, 1988, INFORM PROCESS MANAG, V24, P513, DOI 10.1016/0306-4573(88)90021-0
   SALTON G, 1983, COMMUN ACM, V26, P1022, DOI 10.1145/182.358466
   Schouten Kim, 2010, P 2010 ACM S APPL CO, P854, DOI [10.1145/1774088.1774264, DOI 10.1145/1774088.1774264]
   Singhal A, 1996, INFORM PROCESS MANAG, V32, P619, DOI 10.1016/0306-4573(96)00008-8
   Stojanovic N, 2003, LECT NOTES COMPUT SC, V2870, P500
   Verheij A., 2012, 27 S APPL COMP SAC 2, P672
   Whitesitt J.E., 1995, INTRO BOOLEAN ALGEBR
   Widdows D, 2003, 41ST ANNUAL MEETING OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS, PROCEEDINGS OF THE CONFERENCE, P136
   Zheng L, 2013, EXPERT SYST APPL, V40, P2127, DOI 10.1016/j.eswa.2012.10.029
NR 38
TC 5
Z9 5
U1 0
U2 6
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 15
PY 2014
VL 94
SI SI
BP 32
EP 52
DI 10.1016/j.scico.2013.07.018
PN 1
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AS1JU
UT WOS:000344038400004
OA Bronze
DA 2024-07-18
ER

PT J
AU Miné, A
AF Mine, A.
TI Backward under-approximations in numeric abstract domains to
   automatically infer sufficient program conditions
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Abstract interpretation; Backward analysis; Numeric abstract domains;
   Static analysis; Under-approximation
ID PREDICATE TRANSFORMERS; MODEL CHECKING; CONTRACTS
AB In this article, we discuss the automatic inference of sufficient preconditions by abstract interpretation and sketch the construction of an under-approximating backward analysis. We focus on numeric properties of variables and revisit three classic numeric abstract domains: intervals, octagons, and polyhedra, with new under-approximating backward transfer functions, including the support for non-deterministic expressions, as well as lower widenings to handle loops. We show that effective under-approximation is possible natively in these domains without necessarily resorting to disjunctive completion nor domain complementation. Applications include the derivation of sufficient conditions for a program to never step outside an envelope of safe states, or dually to force it to eventually fail. We built a proof-of-concept prototype implementation and tried it on simple examples. Our construction and our implementation are very preliminary and mostly untried: our hope is to convince the reader that this constitutes a worthy avenue of research. (C) 2013 Elsevier B.V. All rights reserved.
C1 Ecole Normale Super, Dept Informat, F-75230 Paris 05, France.
C3 Universite PSL; Ecole Normale Superieure (ENS)
RP Miné, A (corresponding author), Ecole Normale Super, Dept Informat, 45 Rue Ulm, F-75230 Paris 05, France.
EM mine@di.ens.fr
FU INRIA project "Abstraction"
FX This work is supported by the INRIA project "Abstraction" common to CNRS
   and ENS in France.
CR [Anonymous], 2007, TR20071201 TEL AV U
   [Anonymous], 1978, ANALYSE SEMANTIQUE P
   Armando Alessandro, 2009, International Journal on Software Tools for Technology Transfer, V11, P69, DOI 10.1007/s10009-008-0091-0
   Arnout K, 2003, COMPUTER, V36, P48, DOI 10.1109/MC.2003.1244535
   Bagnara R, 2005, SCI COMPUT PROGRAM, V58, P28, DOI 10.1016/j.scico.2005.02.003
   Bagnara R, 2009, FORM METHOD SYST DES, V35, P279, DOI 10.1007/s10703-009-0073-1
   Bertrane J., 2010, AIAA INF AER AIAA, P1
   BOURDONCLE F, 1993, SIGPLAN NOTICES, V28, P46, DOI 10.1145/173262.155095
   BOURDONCLE F, 1993, LECT NOTES COMPUTER, V735, P128
   Brauer J., 2012, LECT NOTES COMPUT SC, V7226, P54
   Clarke E, 2003, J ACM, V50, P752, DOI 10.1145/876638.876643
   Consot P, 2011, LECT NOTES COMPUT SC, V6538, P150, DOI 10.1007/978-3-642-18275-4_12
   COUSOT P, 1979, PAC J MATH, V82, P43, DOI 10.2140/pjm.1979.82.43
   COUSOT P, 1992, LECT NOTES COMPUT SC, V631, P269, DOI 10.1007/3-540-55844-6_142
   Cousot P., 1979, C REC 6 ANN ACM SIGP, P269
   Cousot P, 2012, ACM SIGPLAN NOTICES, V47, P245, DOI 10.1145/2103621.2103687
   Cousot Patrick, 1977, P 4 ACM S PRINC PROG, P238, DOI [10.1145/512950.512973, DOI 10.1145/512950.512973]
   Cousot Patrick, 1976, P 2 INT S PROGRAMMIN
   Cousot Patrick, 1978, P 5 ACM SIGACT SIGPL, p84S96, DOI DOI 10.1145/512760.512770
   DIJKSTRA EW, 1975, COMMUN ACM, V18, P453, DOI [10.1145/360933.360975, 10.1145/390016.808417]
   Emerson EA, 2008, LECT NOTES COMPUT SC, V5000, P27
   Filliatre Jean-Christophe, 2011, International Journal on Software Tools for Technology Transfer, V13, P397, DOI 10.1007/s10009-011-0211-0
   Flanagan C, 2002, ACM SIGPLAN NOTICES, V37, P234, DOI 10.1145/543552.512558
   Goubault E, 2007, LECT NOTES COMPUT SC, V4634, P137
   Jeannet B, 2009, LECT NOTES COMPUT SC, V5643, P661, DOI 10.1007/978-3-642-02658-4_52
   KING JC, 1976, COMMUN ACM, V19, P385, DOI 10.1145/360248.360252
   Lalire G., 2011, INTERPROC STATIC ANA
   Larsen KG, 1997, REAL TIM SYST SYMP P, P14, DOI 10.1109/REAL.1997.641265
   Masse D., 2002, THESIS ECOLE POLYTEC
   Mine A., 2006, Higher-Order and Symbolic Computation, V19, P31, DOI 10.1007/s10990-006-8609-1
   Miné A, 2006, LECT NOTES COMPUT SC, V3855, P348
   Mine A., 2012, BANAL STATIC ANAL PR
   Miné A, 2012, ELECTRON NOTES THEOR, V287, P89, DOI 10.1016/j.entcs.2012.09.009
   Morris JM, 1997, INFORM PROCESS LETT, V61, P241, DOI 10.1016/S0020-0190(97)00023-9
   Moy Y, 2008, LECT NOTES COMPUT SC, V4905, P188, DOI 10.1007/978-3-540-78163-9_18
   Nguyen Que D., 2010, THESIS ECOLE MINES P
   Popeea C, 2008, PEPM'08: PROCEEDINGS OF THE 2008 ACM SIGPLAN SYMPOSIUM ON PARTIAL EVALUATION AND SEMANTICS-BASED PROGRAM MANIPULATION, P177, DOI 10.1145/1328408.1328434
   Rival X, 2005, LECT NOTES COMPUT SC, V3672, P303
   Schmidt DA, 2004, LECT NOTES COMPUT SC, V3148, P22
   Schmidt DA, 2006, LECT NOTES COMPUT SC, V4134, P127
   Schmidt DA, 2009, ELECTRON NOTES THEOR, V249, P19, DOI 10.1016/j.entcs.2009.07.082
   Tarski A., 1955, PAC J MATH, V5, P235
   Urban C, 2013, LECT NOTES COMPUT SC, V7935, P43, DOI 10.1007/978-3-642-38856-9_5
NR 43
TC 8
Z9 9
U1 0
U2 2
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 1
PY 2014
VL 93
SI SI
BP 154
EP 182
DI 10.1016/j.scico.2013.09.014
PN B
PG 29
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CC8KR
UT WOS:000350618100005
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Rupanov, V
   Buckl, C
   Fiege, L
   Armbruster, M
   Knoll, A
   Spiegelberg, G
AF Rupanov, V.
   Buckl, C.
   Fiege, L.
   Armbruster, M.
   Knoll, A.
   Spiegelberg, G.
TI Employing early model-based safety evaluation to iteratively derive E/E
   architecture design
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Automotive systems; Embedded systems; Model-driven engineering;
   Quantitative safety analysis; ISO 26262
ID PROPAGATION; SYSTEMS
AB ISO 26262 addresses development of safe in-vehicle functions by specifying methods potentially used in the design and development lifecycle. It does not indicate what is sufficient and leaves room for interpretation. Yet the architects of electric/electronic systems need design boundaries to make decisions during architecture evolutionary design without adding a risk of late changes. Correct selection of safety mechanisms from alternatives at early design stages is vital for time-to-market of critical systems. In this paper we present and discuss an iterative architecture design and refinement process that is centered around ISO 26262 requirements and model-based analysis of safety-related metrics. This process simplifies identification of the most sensitive parts of the architecture, selection of the best suitable safety mechanisms to reduce thereby failure rate on the system level and improve the metrics defined by the standard. To support the defined process we present the metamodels that can be integrated with existing DSL (domain-specific language) frameworks to extend them with information supporting further extraction of fault propagation behavior. We provide a framework for architecture model analysis and selection of safety mechanisms. We provide details on the model-based toolset that has been developed to support the proposed analysis and synthesis methods, and demonstrate its application to analysis of a steer-by-wire system model and selection of safety mechanisms for it. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Rupanov, V.; Armbruster, M.] Tech Univ Munich, Inst Informat, D-85748 Garching, Germany.
   [Fiege, L.; Armbruster, M.; Spiegelberg, G.] Siemens AG, Corp Technol, D-81739 Munich, Germany.
   [Buckl, C.] Fortiss GmbH, D-80805 Munich, Germany.
C3 Technical University of Munich; Siemens AG; Siemens Germany; fortiss
RP Rupanov, V (corresponding author), Fortiss GmbH, Guerickestr 25, D-80805 Munich, Germany.
EM vladimir.rupanov@fortiss.org; buckl@fortiss.org;
   ludger.fiege@siemens.com; michael.armbruster@siemens.com;
   knoll@in.tum.de; gernot.spiegelberg@siemens.com
RI Knoll, Alois/AAN-8417-2021
OI Knoll, Alois/0000-0003-4840-076X
FU Siemens AG
FX The work presented in this paper has been partially funded by Siemens
   AG.
CR Adachi M, 2011, SOFTWARE PRACT EXPER, V41, P1303, DOI 10.1002/spe.1044
   [Anonymous], 2010, 22SC3 ISO TC
   [Anonymous], 2010, 65SC65A IEC TC
   [Anonymous], RTCADO178C
   Avizienis A, 2004, IEEE T DEPEND SECURE, V1, P11, DOI 10.1109/TDSC.2004.2
   Borcsok J., 2006, FUNKTIONALE SICHERHE
   Brown AW, 2007, LECT NOTES COMPUT SC, V4758, P237
   Buckl C., 2010, EM TECHN FACT AUT ET, P1, DOI DOI 10.1109/ETFA.2010.5641211
   Buckl C., 2012, P 1 IEEE INT EL VEH
   Dijkstra E.W., 1982, EWD 447: On the role of scientific thought. Selected Writings on Computing: A Personal Perspective, P60, DOI DOI 10.1007/978-1-4612-5695-3
   Dilger E., 1999, US Patent, Patent No. [6 219 604, 6219604]
   Dittel T, 2010, LECT NOTES COMPUT SC, V6351, P97, DOI 10.1007/978-3-642-15651-9_8
   Fenelon P., 1994, ACM SIGAPP Applied Computing Review, V2, P21, DOI DOI 10.1145/381766.381770
   Fowler ME, 2001, ELEPHANT'S FOOT, P3
   Ge XC, 2009, LECT NOTES COMPUT SC, V5775, P215
   Grunske L., 2007, P 11 HIGH ASS SYST E, P283
   Grunske L, 2007, J SYST SOFTWARE, V80, P678, DOI 10.1016/j.jss.2006.08.014
   Heinecke H, 2008, DES AUT TEST EUROPE, P467
   Hillenbrand M, 2010, LECT NOTES COMPUT SC, V6150, P179, DOI 10.1007/978-3-642-13556-9_11
   Isermann R, 2002, IEEE CONTR SYST MAG, V22, P64, DOI 10.1109/MCS.2002.1035218
   Kainz G., 2012, LECT NOTES COMPUTER, V7590
   Kaiser B, 2010, LECT NOTES COMPUT SC, V6351, P452, DOI 10.1007/978-3-642-15651-9_33
   Kaiser Bernhard., 2003, Safety Critical Systems and Software 2003, Eigth Australian Workshop on Safety-Related Programmable Systems, V33, P37
   Lisagor O., 2011, P 9 INT C REL MAINT
   Papadopoulos Y, 2001, RELIAB ENG SYST SAFE, V71, P229, DOI 10.1016/S0951-8320(00)00076-4
   RAUZY A, 2012, P INT JOINT C PSAM 1
   Reichel R, 2011, AT-AUTOM, V59, P583, DOI 10.1524/auto.2011.0949
   Sojer D., 2011, 2011 6th IEEE International Symposium on Industrial Embedded Systems (SIES), P59, DOI 10.1109/SIES.2011.5953680
   Steinberg D., 2008, EMF: Eclipse Modeling Framework, Vsecond
   The Reliability Information Analysis Center (RIAC), 1997, FMD97 FAIL MOD MECH
   Wallace M, 2005, ELECTRON NOTES THEOR, V141, P53, DOI 10.1016/j.entcs.2005.02.051
NR 31
TC 6
Z9 6
U1 0
U2 26
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 15
PY 2014
VL 90
BP 161
EP 179
DI 10.1016/j.scico.2013.10.005
PN B
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AK4IK
UT WOS:000338387900006
OA Green Published, hybrid
DA 2024-07-18
ER

PT J
AU Braude, EJ
AF Braude, Eric J.
TI Weakest preconditions and cumulative subgoal fulfillment
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Correctness; Weakest preconditions; Invariant; Methodology; Subgoals
AB "Cumulative subgoal fulfillment" (CSF) is a method for the construction of correct algorithms. We show how it formalizes and extends work of Dijkstra, Gries, and others to create loops by accumulating loop invariants. CSF's relationship with weakest preconditions is explored. An example of Cohen and Monin is used as illustration. (C) 2014 Elsevier B.V. All rights reserved.
C1 Boston Univ, Metropolitan Coll, Boston, MA 02215 USA.
C3 Boston University
RP Braude, EJ (corresponding author), Boston Univ, Metropolitan Coll, 808 Commonwealth Ave,Suite 250, Boston, MA 02215 USA.
EM ebraude@bu.edu
CR [Anonymous], 2000, THESIS U WASHINGTON
   BOHM C, 1966, COMMUN ACM, V9, P366, DOI 10.1145/355592.365646
   Braude E., 2012, INT J ADV COMPUT MAN, V1-6
   Braude E., 2007, P 11 IASTED INT C SO
   Cohen E., 1990, PROGRAMMING 1990
   Cormen T. H., 2009, Introduction to Algorithms, VSecond
   Dijkstra E. W., 1976, A Discipline of Pro-gramming
   Ernst MD, 2001, IEEE T SOFTWARE ENG, V27, P99, DOI 10.1109/32.908957
   Ernst MD, 2007, SCI COMPUT PROGRAM, V69, P35, DOI 10.1016/j.scico.2007.01.015
   Floyd R.W., 1967, P S APPL MATH, V19, P19
   Frade MJ, 2011, COMPUT SCI REV, V5, P252, DOI 10.1016/j.cosrev.2011.02.002
   GRIES D, 1982, SCI COMPUT PROGRAM, V2, P207, DOI 10.1016/0167-6423(83)90015-1
   Gries D., 1989, SCI PROGRAMMING
   Konstantopoulos D., 2009, 3 IEEE INT WORKSH QU
   Martin R. C., 2002, AGILE SOFTWARE DEV P
   MEYER B, 1992, COMPUTER, V25, P40, DOI 10.1109/2.161279
   Monin J.F., 2003, UNDERSTANDING FORMAL
   Naur P., 1991, COMPUTING HUMAN ACTI
   Naur P, 2007, COMMUN ACM, V50, P85, DOI 10.1145/1188913.1188922
NR 19
TC 1
Z9 1
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 1
PY 2014
VL 89
BP 223
EP 234
DI 10.1016/j.scico.2014.01.010
PN C
PG 12
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AJ8CB
UT WOS:000337929200001
DA 2024-07-18
ER

PT J
AU Heeren, B
   Jeuring, J
AF Heeren, Bastiaan
   Jeuring, Johan
TI Feedback services for stepwise exercises
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Intelligent tutoring systems; Domain reasoners; Feedback services
ID INTELLIGENT TUTORING SYSTEMS
AB Advanced learning environments such as intelligent tutoring systems for algebra, logic, programming, physics, etc. let a student practice with stepwise exercises, and support a student solving such exercises by providing feedback. These environments usually provide various types of feedback, for example about the correctness of a step, common errors, hints about how to proceed, or complete worked-out solutions. Calculating feedback is generally delegated to a dedicated expert knowledge module, also known as a domain reasoner. Existing architectural descriptions of learning environments do not precisely specify the interaction between this module and the rest of the learning system. We propose a design based on the stateless client-server architecture that clearly decouples the expert knowledge module from the learning environment. We describe a set of feedback services that support the inner (interactions within an exercise) and outer (over a collection of exercises) loops of a learning system, and that provide meta-information about a class of exercises, such as solving quadratic equations, or performing Gaussian elimination. The feedback services do not depend on a particular domain and are based on the various feedback types described in the literature.
   The paper analyzes which domain-specific knowledge about an exercise class is needed for implementing the feedback services. Based on this analysis, we developed a framework for implementing domain reasoners that offers generic functionality such as rewriting, simplifying, and comparing terms. We have implemented several domain reasoners in this framework, both for external learning environments and for simple prototypes. The proposed design is evaluated with these implementations, and we reflect on our experience with developing domain reasoners. (C) 2014 Elsevier BM. All rights reserved.
C1 [Heeren, Bastiaan; Jeuring, Johan] Open Univ Nederland, Sch Comp Sci, Heerlen, Netherlands.
   [Jeuring, Johan] Univ Utrecht, Dept Informat & Comp Sci, NL-3508 TC Utrecht, Netherlands.
C3 Open University Netherlands; Utrecht University
RP Heeren, B (corresponding author), Open Univ Nederland, Sch Comp Sci, Heerlen, Netherlands.
EM Bastiaan.Heeren@ou.nl; J.T.Jeuring@uu.nl
CR Alpert S.R., 1999, International Journal of Artificial Intelligence in Education, V10, P183
   Anderson JR, 1995, J LEARN SCI, V4, P167, DOI 10.1207/s15327809jls0402_2
   [Anonymous], P 2 INT C TOOLS TEAC
   [Anonymous], 1997, Handbook of human-computer interaction, DOI DOI 10.1016/B978-044481862-1.50103-5
   [Anonymous], 2000, Dissertation
   [Anonymous], P C ART INT ED
   Beeson M., 1998, COMPUTER HUMAN INTER, P89
   Beeson Michael J., 1990, INT J ARTIF INTELL E, V1, P65
   Bokhove Christian, 2011, THESIS UTRECHT U
   Bradford R, 2009, LECT NOTES COMPUT SC, V5625, P75, DOI 10.1007/978-3-642-02614-0_11
   Brusilovsky P, 2000, LECT NOTES COMPUT SC, V1839, P1
   Brusilovsky P., 2003, International Journal of Artificial Intelligence in Education (IJAIED), V13, P159, DOI [DOI 10.5555/1434845.1434847, 10.5555/1434845.1434847]
   Brusilovsky Peter, 1994, J COMPUT SYST SCI IN, V32
   Caprotti O, 2002, MATH VISUAL, P51
   CAPROTTI O, 1999, OPENMATH STANDARD
   Chaachoua H., 2004, ICME 10
   Cohen AM, 2006, LECT NOTES COMPUT SC, V3863, P330
   Cohen AM, 2003, ALGEBRA, GEOMETRY, AND SOFTWARE SYSTEMS, P289
   Cuypers Hans, 2009, E P 6 IEM WORKSH, P1
   Doorman M., 2009, EARL 2009 SIG20 INV
   European Commission, 2013, OP ED INN TEACH LEAR
   Fielding R. T, 2002, ACM Transactions on Internet Technology (TOIT), V2, P115, DOI [DOI 10.1145/514183.514185, 10.1145/514183.514185]
   Gerdes A., 2012, Proceedings of the 17th ACM annual conference on Innovation and technology in computer science education, P250, DOI DOI 10.1145/2325296.2325356
   Gerdes A, 2008, 7TH EUROPEAN CONFERENCE ON E-LEARNING, VOL 1, P402
   Goguadze G, 2009, FRONT ARTIF INTEL AP, V200, P668, DOI 10.3233/978-1-60750-028-5-668
   Goguadze G, 2009, LECT NOTES COMPUT SC, V5625, P294, DOI 10.1007/978-3-642-02614-0_25
   Goguadze George, 2011, THESIS U SAARLAND GE
   Grabowski Barbara, 2005, P ICL2005 WORKSH INT
   Hastjarjanto T, 2013, 2013 3RD INTERNATIONAL WORKSHOP ON GAMES AND SOFTWARE ENGINEERING: ENGINEERING COMPUTER GAMES TO ENABLE POSITIVE, PROGRESSIVE CHANGE (GAS), P8, DOI 10.1109/GAS.2013.6632583
   Heeren B, 2008, LECT NOTES ARTIF INT, V5144, P430, DOI 10.1007/978-3-540-85110-3_36
   Heeren B, 2011, LECT NOTES ARTIF INT, V6824, P196, DOI 10.1007/978-3-642-22673-1_14
   Heeren B, 2010, LECT NOTES ARTIF INT, V6167, P315, DOI 10.1007/978-3-642-14128-7_27
   Heeren B, 2010, MATH COMPUT SCI, V3, P349, DOI 10.1007/s11786-010-0027-4
   HUDAK P, 1996, ACM COMPUT SURV, V28
   Kodaganallur V., 2005, INT J ARTIFICIAL INT, V15, P117
   Lodder Josje, 2008, 2008 International Conference on Computer Science and Software Engineering (CSSE 2008), P553, DOI 10.1109/CSSE.2008.403
   Lodder J, 2011, LECT NOTES ARTIF INT, V6680, P154, DOI 10.1007/978-3-642-21350-2_18
   Mathematical Sciences Conference Group on Digital Educational Resources, 2005, COR SUBJ TAX MATH SC
   Melis E, 2004, LECT NOTES ARTIF INT, V3070, P91
   Meyer Bertrand., 1991, ADV OBJECT ORIENTEDS, P1
   Mitrovic A, 2007, IEEE INTELL SYST, V22, P38, DOI 10.1109/MIS.2007.74
   Narciss S., 2008, Handbook of research on educational communications and technologies, V3rd
   Nkambou R, 2010, STUD COMPUT INTELL, V308, P1, DOI 10.1007/978-3-642-14363-2
   NWANA HS, 1990, ARTIF INTELL REV, V4, P251, DOI 10.1007/BF00168958
   Patvarczki J, 2008, LECT NOTES COMPUT SC, V5091, P766
   Ritter S, 1998, LECT NOTES COMPUT SC, V1452, P554
   Ritter S., 1996, Journal of Artificial Intelligence in Education, V7, P315
   Sangwin C., 2013, Computer Aided Assessment of Mathematics
   Shute V.J., 1996, HDB RES ED COMMUNICA
   Shute VJ, 2008, REV EDUC RES, V78, P153, DOI 10.3102/0034654307313795
   Sosnovsky S, 2012, LECT NOTES COMPUT SC, V7563, P495, DOI 10.1007/978-3-642-33263-0_49
   Susi T, 2007, HSIKITR07001 U SKOV
   United Nations Educational Scientific and Cultural Organization (UNESCO), 2018, INT TECHN GUID SEX E
   VanLehn K., 2005, INT J ARTIFICIAL INT, V15, P147, DOI DOI 10.1016/J.COMPEDU.2009.06.007
   VanLehn K., 2006, International journal of artificial intelligence in education, V16, P227
   Zinn C, 2006, LECT NOTES COMPUT SC, V4053, P349
   Zinn C, 2011, LECT NOTES ARTIF INT, V7006, P357, DOI 10.1007/978-3-642-24455-1_35
NR 57
TC 19
Z9 21
U1 0
U2 11
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD AUG 1
PY 2014
VL 88
SI SI
BP 110
EP 129
DI 10.1016/j.scico.2014.02.021
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AH9QM
UT WOS:000336476900008
OA Green Submitted, hybrid
DA 2024-07-18
ER

PT J
AU Molina, AI
   Redondo, MA
   Ortega, M
   Lacave, C
AF Molina, Ana I.
   Redondo, Miguel A.
   Ortega, Manuel
   Lacave, Carmen
TI Evaluating a graphical notation for modeling collaborative learning
   activities: A family of experiments
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Educational modeling; CSCL; Notation assessments; Empirical study; Eye
   tracking
ID ENVIRONMENTS; USABILITY; PROTOCOLS; LANGUAGE
AB It is increasingly common to use languages and notations, mainly of a graphical nature, to assist in the design and specification of learning systems. There are several proposals, although few of them support the modeling of collaborative tasks. In this paper, we identify the main features to be considered for modeling this kind of activities and we propose the use of the CIAN notation for this purpose. In this work, we also try to empirically analyze the quality (in particular the understandability) of that notation. To this end, three empirical studies have been conducted. In these experiments we used several sources of information: subjective perception of the designers, their profiles and their performance on a set of understandability exercises, as well as the physical evidence provided by an eye tracker device. The results obtained denote positive perceptions about the use of the CLAN notation for modeling collaborative learning activities. (C) 2014 Elsevier BM. All rights reserved.
C1 [Molina, Ana I.; Redondo, Miguel A.; Ortega, Manuel; Lacave, Carmen] Univ Castilla La Mancha, Escuela Super Informat Ciudad Real, Dept Tecnol & Sistemas Informac, Ciudad Real 13071, Spain.
C3 Universidad de Castilla-La Mancha
RP Molina, AI (corresponding author), Univ Castilla La Mancha, Escuela Super Informat Ciudad Real, Dept Tecnol & Sistemas Informac, Paseo Univ 4, Ciudad Real 13071, Spain.
EM Analsabel.Molina@uclm.es; Miguel.Redondo@uclm.es; Manuel.Ortega@uclm.es;
   Carmen.Lacave@uclm.es
RI Bravo, Jose/F-8861-2015; Lacave, Carmen/AAF-6720-2021; Molina, Ana
   I/M-1392-2014; Lacave Rodero, Carmen/G-4729-2015; Ortega,
   Manuel/F-9191-2015; Redondo, Miguel A./F-7852-2015
OI Bravo, Jose/0000-0001-5752-2406; Lacave, Carmen/0000-0003-2770-8482;
   Molina, Ana I/0000-0002-3449-2539; Lacave Rodero,
   Carmen/0000-0003-2770-8482; Ortega, Manuel/0000-0002-0194-7744; Redondo,
   Miguel A./0000-0001-5809-3412
FU INTEGroup; GITE-LEARN and iColab projects - Regional Government of
   Castilla-La Mancha; EDUCA-Prog project - Ministry of Science and
   Innovation
FX This work has been partially supported by the INTEGroup, GITE-LEARN and
   iColab projects, funded by the Regional Government of Castilla-La
   Mancha, and the EDUCA-Prog project funded by the Ministry of Science and
   Innovation. The authors want to thank all the participants in the
   studies performed for their collaboration.
CR Abrahao S., 2011, INF SCI, V181
   [Anonymous], 2001, 912612001 ISOIEC
   [Anonymous], THESIS U VIENNA AUST
   BASILI VR, 1988, IEEE T SOFTWARE ENG, V14, P758, DOI 10.1109/32.6156
   Basili VR, 1999, IEEE T SOFTWARE ENG, V25, P456, DOI 10.1109/32.799939
   Blackwell A., 2003, HCI MODELS THEORIES, P103, DOI [DOI 10.1016/B978-155860808-5/50005-8, 10.1016/B978-155860808-5/50005-8]
   BOLOGNESI T, 1987, COMPUT NETWORKS ISDN, V14, P25, DOI 10.1016/0169-7552(87)90085-7
   BOOCH G, 1998, UNIFIED MODELING LAN
   Botturi L., 2006, ED TECHNOL RES DEV, V54
   Botturi L., 2008, Handbook of visual languages for instructional design: theories and practices
   Bravo C, 2006, J NETW COMPUT APPL, V29, P321, DOI 10.1016/j.jnca.2005.01.003
   Business Process Management Initiative, 2013, BUS PROC MOD NOT SPE
   Caeiro-Rodriguez M., 2006, 15 INT WORLD WID WEB
   CARLSEN S, 1998, P 3 IFCIS INT C COOP
   Cheng BHC, 2007, FOSE 2007: FUTURE OF SOFTWARE ENGINEERING, P285, DOI 10.1109/FOSE.2007.17
   Ciolkowski M, 2002, P 6 INT C EMP ASS SO, P48
   Collazos CA, 2003, LECT NOTES COMPUT SC, V2806, P356
   Dalziel J., 2003, Proceedings of the 20th Annual Conference of the Australasian Society for Computers in Learning in Tertiary Education (ASCILITE), Adelaide, Australia, P593
   de Vries F, 2006, EDUC TECHNOL SOC, V9, P9
   Derntl M., 2011, P IEEE ICALT 2011
   Derntl M., 2007, THESIS U VIENNA AUST, V96
   Dillenbourg P., 1995, EVOLUTION RES COLLAB
   ELLIS CA, 1991, COMMUN ACM, V34, P38
   Fenton N., 1997, PFLEEGER SOFTWARE ME
   Fischer F, 2007, COMPUT-SUPP COLLAB L, V6, P1, DOI 10.1007/978-0-387-36949-5
   Gallardo J, 2013, J VISUAL LANG COMPUT, V24, P10, DOI 10.1016/j.jvlc.2012.10.006
   GARRIDO JL, 2005, REQUIREMENTS ENG SOC, P226
   Gemino A, 2005, DATA KNOWL ENG, V55, P301, DOI 10.1016/j.datak.2004.12.009
   Genero M, 2005, METRICS FOR SOFTWARE CONCEPTUAL MODELS, P1, DOI 10.1142/9781860946066
   Giraldo W.J., 2008, COMPUTER AIDED DESIG
   Green T. R. G., 1991, Empirical Studies of Programmers: Fourth Workshop, P121
   Green Thomas., 1998, Cognitive dimensions of information artefacts: a tutorial
   Green TRG, 1996, J VISUAL LANG COMPUT, V7, P131, DOI 10.1006/jvlc.1996.0009
   Guan Z., 2006, P SIGCHI C HUM FACT
   Guerra E, 2009, INFORM SOFTWARE TECH, V51, P769, DOI 10.1016/j.infsof.2008.09.005
   Host M., 2000, Empirical Software Engineering, V5, P201, DOI 10.1023/A:1026586415054
   Hyrskykari A, 2008, J EYE MOVEMENT RES, V2
   IMS Global, 2013, IMS LEARN DES SPEC
   Jurado F., 2006, 3 INT C COOP DES VIS
   Karampiperis P., 2007, 17 IEEE INT C ADV LE
   Karsai G., 2009, 9 OOPSLA WORKSH DOM
   Kelly S., 2009, IEEE SOFTW, V26
   Kitchenham BA, 2002, IEEE T SOFTWARE ENG, V28, P721, DOI 10.1109/TSE.2002.1027796
   Kobbe L, 2007, INT J COMP-SUPP COLL, V2, P211, DOI 10.1007/s11412-007-9014-4
   Kolovos D., 2006, 1 ECOOP WORKSH DOM S
   Koper R, 2004, BRIT J EDUC TECHNOL, V35, P537, DOI 10.1111/j.0007-1013.2004.00412.x
   Koper R., 2001, TECHNICAL REPORT
   Koper R., 2005, Learning Design: A Handbook on Modelling and Delivering Networked Education and Training, DOI DOI 10.1007/B138966
   Koschmann T., 1996, CSCL: Theory and Practice of an Emerging Paradigm, P83
   Lacaze X., 2004, WORKSH TEMP ASP WORK
   Laforcade P., 2005, REV STICEF SCI TECHN, V12
   Laforcade P., 2004, THESIS U PAU PAYS AD
   LARKIN JH, 1987, COGNITIVE SCI, V11, P65, DOI 10.1016/S0364-0213(87)80026-5
   Lim Y.-k., 2004, P 3 ANN C TASK MOD D
   Lin LJ, 2011, COMPUT EDUC, V56, P650, DOI 10.1016/j.compedu.2010.10.007
   Maes A, 2007, DATA KNOWL ENG, V63, P701, DOI 10.1016/j.datak.2007.04.008
   Martel C, 2008, INT J LEARN TECHNOL, V3, P368, DOI 10.1504/IJLT.2008.019379
   Martinez-Ortiz I., 2008, LNCS, V5145
   Martinez-Ortiz I., 2009, 6 INT C INF TECHN NE
   Masri K, 2008, J DATABASE MANAGE, V19, P22, DOI 10.4018/jdm.2008070102
   Mayer R.E., 1989, REV ED RES, V59
   MILLER GA, 1956, PSYCHOL REV, V63, P81, DOI 10.1037/h0043158
   Molina A.I., 2009, SCI COMPUT PROGRAM, V74
   Molina A.I., 2008, IEEE INT C ADV LEARN
   Molina AI, 2009, NEW TRENDS ON HUMAN-COMPUTER INTERACTION: RESEARCH, DEVELOPMENT, NEW TOOLS AND METHODS, P75, DOI 10.1007/978-1-84882-352-5_8
   Moody DL, 2005, DATA KNOWL ENG, V55, P243, DOI 10.1016/j.datak.2004.12.005
   MOODY DL, 2009, IEEE T SOFTW ENG, V35
   Mora B, 2011, SOFTWARE QUAL J, V19, P201, DOI 10.1007/s11219-010-9111-x
   Mori G., 2002, IEEE T SOFTW ENG, V28
   Mota D., 2011, 2011 IEEE GLOB ENG E
   Nelson H.J., 2012, SOFTW QUAL J, V20
   Nelson J., 2005, DATA KNOWL ENG, V55
   Nielsen J., 2009, EYETRACKING METHOLDO
   Nielsen J., 2010, TECNICAS EYETRACKING
   OMG, 2006, MOF COR SPEC
   Ozcelik E, 2009, COMPUT EDUC, V53, P445, DOI 10.1016/j.compedu.2009.03.002
   Paivio A., 1986, Mental representations: A dual coding approach
   PAQUETTE G, 2005, LEARNING DESIGN HDB, P161
   Paredes M., 2008, J UNIVERS COMPUT SCI, V14
   Paterno F., 2004, HDB TASK ANAL HCI
   Pinelle D., 2004, THESIS  U SASKATCHEW
   Poole A., 2004, EYE TRACKING HUMAN C
   Rawlings A., 2002, CEN ISSS WS LT LERNI
   Redondo M.A., 2007, COMPUT ED, V48
   Rodriguez M. Caeiro, 2007, J UNIVERS COMPUT SCI, V13
   Rosler A., 2012, USING TOBII MOBILE D
   Rubart J., 2004, J COMPUT APPL TECHNO, V19
   Sampson D. G., 2005, Advanced Technology for Learning, V2, P207, DOI 10.2316/Journal.208.2005.4.208-0863
   Sharif B., 2011, P 6 INT WORKSH TRAC
   Sharif B, 2010, PROC IEEE INT CONF S
   Sousa K, 2012, J VISUAL LANG COMPUT, V23, P195, DOI 10.1016/j.jvlc.2012.04.001
   Tobii, 2009, WHITEPAPER TOBII TEH
   Tobii, 2011, ACCURACY PRECISION
   TRAETTEBERG H, 2002, THESIS NORWEGIAN U S
   van den Haak M, 2003, BEHAV INFORM TECHNOL, V22, P339, DOI 10.1080/0044929031000
   Van der Aalst WMP, 2001, INT J COOP INF SYST, V10, P443, DOI 10.1142/S0218843001000412
   Van Welie M, 2003, HUM FAC ER, P447
   Wertheimer M., 1938, SOURCE BOOK GESTALT, DOI [10.1037/11496-0053, DOI 10.1037/11496-0053, DOI 10.1037/11496-005]
   WINN W, 1993, CONTEMP EDUC PSYCHOL, V18, P162, DOI 10.1006/ceps.1993.1016
   Wohlin C., 2000, EXPT SOFTWARE ENG IN
   Yusuf S., 2007, 15 IEEE INT C PROGR
NR 101
TC 11
Z9 12
U1 0
U2 14
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD AUG 1
PY 2014
VL 88
SI SI
BP 54
EP 81
DI 10.1016/j.scico.2014.02.019
PG 28
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Social Science Citation Index (SSCI)
SC Computer Science
GA AH9QM
UT WOS:000336476900005
OA hybrid
DA 2024-07-18
ER

PT J
AU Mirandola, R
   Potena, P
   Scandurra, P
AF Mirandola, Raffaela
   Potena, Pasqualina
   Scandurra, Patrizia
TI Adaptation space exploration for service-oriented applications
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Service-oriented applications; Software adaptation and evolution;
   Functional/extra-functional requirements; Optimization techniques
ID SOFTWARE; OPTIMIZATION; RELIABILITY; LANGUAGE
AB Service-oriented applications may require adaptation to tackle changing user needs, system intrusions or faults, changing operational environment, resource variability, etc. In order to achieve the right trade off among the functional requirements, software qualities (such as performance and reliability) and the adaptation cost itself, the adaptation decisions should involve the (a priori) evaluation of new alternatives to the current application design. However, the generation and evaluation of design alternatives is often time-consuming, it can be error-prone and can lead to suboptimal design decisions, especially if carried out manually by system maintainers.
   This article proposes an automatic optimization process for adaptation space exploration of service-oriented applications based on trade-offs between functional and extra-functional requirements. The proposed method combines the use of metaheuristic search techniques and functional/extra-functional patterns (i.e., architectural design patterns and tactics). Besides, the proposed methodology relies on the standard Service Component Architecture (SCA) for heterogeneous service assembly and its runtime platforms. As a proof-of-concept, this article provides also an example of instantiation of the process together with an experimentation on a sample application and a numerical evaluation of the scalability of the approach. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Potena, Pasqualina; Scandurra, Patrizia] Univ Bergamo, DIMM, Dalmine, BG, Italy.
   [Mirandola, Raffaela] Politecn Milan, Dip Elettron Informaz & Bioingn, I-20133 Milan, Italy.
C3 University of Bergamo; Polytechnic University of Milan
RP Mirandola, R (corresponding author), Politecn Milan, Dip Elettron Informaz & Bioingn, I-20133 Milan, Italy.
EM raffaela.mirandola@polimi.it; pasqualina.potena@unibg.it;
   patrizia.scandurra@unibg.it
OI SCANDURRA, Patrizia/0000-0002-9209-3624; MIRANDOLA,
   RAFFAELA/0000-0003-3154-2438
FU IDEAS-ERC Project SMScom; Italian PRIN project
FX We would like to thank the anonymous referees for their comments that
   helped to substantially improve the quality of the paper. We also are
   grateful to Vittorio Cortellessa, Fabrizio Marinelli, and Andrea Roli
   for their interesting discussions on metaheuristic search techniques.
   This work has been partially supported by the IDEAS-ERC Project SMScom,
   and by the Italian PRIN project "GenData 2020".
CR [Anonymous], 1996, PATTERN ORIENTED SOF
   [Anonymous], 2000, Generative programming: methods, tools, and applications
   Arcaini P, 2011, SOFTWARE PRACT EXPER, V41, P155, DOI 10.1002/spe.1019
   Arcaini P, 2010, LECT NOTES COMPUT SC, V5977, P61, DOI 10.1007/978-3-642-11811-1_6
   Attiogbé C, 2006, LECT NOTES COMPUT SC, V4089, P18
   Balsamo S, 2004, IEEE T SOFTWARE ENG, V30, P295, DOI 10.1109/TSE.2004.9
   Blum C, 2003, ACM COMPUT SURV, V35, P268, DOI 10.1145/937503.937505
   Boehm BW., 1981, Software Engineering Economics
   Borger E., 2003, ABSTRACT STATE MACHI
   Brugali D, 2011, LECT NOTES COMPUTER, V7253, P331
   Bucchiarone A, 2010, LECT NOTES COMPUT SC, V6275, P467
   Carioni A, 2008, LECT NOTES COMPUT SC, V5238, P71
   Carioni A., 2009, LECT NOTES ELECT ENG, P57
   CENSOR Y, 1977, APPL MATH OPT, V4, P41, DOI 10.1007/BF01442131
   Cortellessa V, 2010, FASE
   Cortellessa V, 2008, COMPUT OPER RES, V35, P3090, DOI 10.1016/j.cor.2007.01.011
   Cortellessa V, 2006, LECT NOTES COMPUT SC, V4344, P66
   Dobrica L, 2002, IEEE T SOFTWARE ENG, V28, P638, DOI 10.1109/TSE.2002.1019479
   Epifani I, 2009, PROC INT CONF SOFTW, P111, DOI 10.1109/ICSE.2009.5070513
   Esfahani N, 2010, LECT NOTES COMPUT SC, V6285, P433, DOI 10.1007/978-3-642-15114-9_38
   FRANKS G, 2006, LAYERED QUEUEING NET
   Gargantini A, 2001, J UNIVERS COMPUT SCI, V7, P1050
   Gargantini A, 2008, J UNIVERS COMPUT SCI, V14, P1949
   Geyik S. C., 2010, 2010 IEEE 7th International Conference on Services Computing (SCC 2010), P242, DOI 10.1109/SCC.2010.26
   Gokhale SS, 2007, IEEE T DEPEND SECURE, V4, P32, DOI 10.1109/TDSC.2007.4
   Gomaa H., 2010, P 2010 ACM S APPL CO, P462
   Grunske L, 2006, ICSE
   Hamlet D, 2001, PROC INT CONF SOFTW, P361, DOI 10.1109/ICSE.2001.919109
   Harman M, 2012, IEEE INT CONF AUTOM, P1, DOI 10.1145/2351676.2351678
   Harrison N., 2008, P RISE EFTS JOINT IN, DOI [10.1145/1479772.1479775, DOI 10.1145/1479772.1479775]
   Harrison NB, 2010, LECT NOTES COMPUT SC, V6420, P97
   Harrison NB, 2010, J SYST SOFTWARE, V83, P1735, DOI 10.1016/j.jss.2010.04.067
   Kazman R., 1994, ICSE-16. 16th International Conference on Software Engineering (Cat. No.94CH3409-0), P81, DOI 10.1109/ICSE.1994.296768
   Kim S, 2009, J SYST SOFTWARE, V82, P1211, DOI 10.1016/j.jss.2009.03.102
   Lécué F, 2009, INT J COOP INF SYST, V18, P1, DOI 10.1142/S0218843009001975
   Marler RT, 2004, STRUCT MULTIDISCIP O, V26, P369, DOI 10.1007/s00158-003-0368-6
   Martens A., 2008, P WCOP 08
   Martens A., 2010, WOSP SIPEW
   Martens A, 2009, ELECTRON NOTES THEOR, V253, P77, DOI 10.1016/j.entcs.2009.09.029
   Marzolla M, 2010, LECT NOTES COMPUT SC, V6148, P102, DOI 10.1007/978-3-642-13568-2_8
   Menasce D.A., 2010, WOSP SIPEW 10, P27
   Mirandola R., 2011, Proceedings of the 2011 IEEE 6th International Symposium on Service Oriented System Engineering (SOSE 2011), P146, DOI 10.1109/SOSE.2011.6139103
   Mirandola R., 2010, P SYNACS 2010 WORKSH
   Mirandola R., OPTIMIZATION PROCESS
   Parsons T, 2005, DSM
   Riccobene E, 2012, EUROMICRO CONF PROC, P125, DOI 10.1109/SEAA.2012.53
   Rosenberg Florian, 2010, 2010 IEEE 7th International Conference on Services Computing (SCC 2010), P97, DOI 10.1109/SCC.2010.58
   Salehie M, 2009, ACM T AUTON ADAP SYS, V4, DOI 10.1145/1516533.1516538
   Seinturier L, 2012, SOFTWARE PRACT EXPER, V42, P559, DOI 10.1002/spe.1077
   Seinturier L, 2009, 2009 IEEE INTERNATIONAL CONFERENCE ON SERVICES COMPUTING, P268, DOI 10.1109/SCC.2009.27
   Vallidevi K., 2010, A2CWIC 10 ACM
   VOAS JM, 1995, IEEE SOFTWARE, V12, P17, DOI 10.1109/52.382180
   Xu J, 2010, PERFORM EVALUATION, V67, P585, DOI 10.1016/j.peva.2009.07.004
NR 53
TC 20
Z9 21
U1 0
U2 6
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 1
PY 2014
VL 80
BP 356
EP 384
DI 10.1016/j.scico.2013.09.017
PN B
PG 29
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 292FH
UT WOS:000329887100007
DA 2024-07-18
ER

PT J
AU Condori-Fernández, N
   Panach, JI
   Baars, AI
   Vos, T
   Pastor, O
AF Condori-Fernandez, Nelly
   Ignacio Panach, Jose
   Iwan Baars, Arthur
   Vos, Tanja
   Pastor, Oscar
TI An empirical approach for evaluating the usability of model-driven tools
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Usability; Model-driven development; Evaluation framework; Emocards
AB MDD tools are very useful to draw conceptual models and to automate code generation. Even though this would bring many benefits, wide adoption of MOD tools is not yet a reality. Various research activities are being undertaken to find why and to provide the required solutions. However, insufficient research has been done on a key factor for the acceptance of MDD tools: usability. With the help of end-users, this paper presents a framework to evaluate the usability of MDD tools. The framework will be used as a basis for a family of experiments to get clear insights into the barriers to usability that prevent MDD tools from being widely adopted in industry. To illustrate the applicability of our framework, we instantiated it for performing a usability evaluation of a tool named INTEGRANOVA. Furthermore, we compared the outcome of the study with another usability evaluation technique based on ergonomic criteria. (C) 2012 Elsevier B.V. All rights reserved.
C1 [Condori-Fernandez, Nelly] Univ Twente, Fac Elect Engn Math & Comp Sci, Informat Syst Grp, NL-7500 AE Enschede, Netherlands.
   [Ignacio Panach, Jose] Univ Valencia, Dept Informat, Escola Tecn Super Engn, E-46100 Valencia, Spain.
   [Iwan Baars, Arthur; Vos, Tanja; Pastor, Oscar] Univ Politecn Valencia, Ctr Invest Metodos Prod Software ProS, Valencia 46022, Spain.
C3 University of Twente; University of Valencia; Universitat Politecnica de
   Valencia
RP Condori-Fernández, N (corresponding author), Univ Twente, Fac Elect Engn Math & Comp Sci, Informat Syst Grp, POB 217, NL-7500 AE Enschede, Netherlands.
EM n.condorifernandez@utwente.nl; jpanach@dsic.upv.es; abaars@pros.upv.es;
   tvos@pros.upv.es; opastor@pros.upv.es
RI Panach, Jose Ignacio/ABF-2099-2020; Pastor Lopez, Oscar/S-4216-2016
OI Panach, Jose Ignacio/0000-0002-7043-6227; Condori Fernandez,
   Nelly/0000-0002-1044-3871; Pastor Lopez, Oscar/0000-0002-1320-8471
FU Intra European Marie Curie Fellowship Grant [50911302 PIEF-2010]; MICINN
   [TIN2008-00555, PROS-Req TIN2010-19130-C02-02]; GVA [ORCA
   PROMETEO/2009/015]; ERDF; ITEA2 Call 3 UsiXML [20080026]; MITYC
   [TSI-020400-2011-20]
FX This work has been developed with the support of the Intra European
   Marie Curie Fellowship Grant 50911302 PIEF-2010, MICINN (TIN2008-00555,
   PROS-Req TIN2010-19130-C02-02), GVA (ORCA PROMETEO/2009/015), and
   co-financed with ERDF. We also acknowledge the support of the ITEA2 Call
   3 UsiXML (20080026) and financed by the MITYC under the project
   TSI-020400-2011-20. Our thanks also to Ignacio Romeu for the video data
   gathering setup.
CR Agarwal A., 2009, CHI 09 HUM FACT COMP, DOI DOI 10.1145/1520340.1520420
   Al-Wabil A., 2009, CURRENT TRENDS INFOR
   Andre TS, 2001, INT J HUM-COMPUT ST, V54, P107, DOI 10.1006/ijhc.2000.0441
   [Anonymous], 2001, 912612001 ISOIEC
   [Anonymous], 1998, ISO 9241-11
   Basili V., 1999, IEEE T SOFTWARE ENG, V25
   Bastien J.M. C., 1993, INRIA, P79
   Desmet P., 2003, Funology, V3, P111, DOI [DOI 10.1007/1-4020-2967-5_12, 10.1007/1-4020-2967-5_12]
   Fiora T.W., 2008, P 9 AUSTR US INT C A
   Kostiainen K., 2007, SEC US STUD METH BES
   Masemola S.S., 2006, P SAICSIT 2006, P187
   Panach J. I., 2011, P C INT PERS ORD, P67
   Pastor O., 2007, MODEL DRIVEN ARCHITE
   Phillips C., 1998, P SOFTW ENG ED PRACT
   Post G, 2001, INFORM SOFTWARE TECH, V43, P509, DOI 10.1016/S0950-5849(01)00163-X
   RUSSELL JA, 1980, J PERS SOC PSYCHOL, V39, P1161, DOI 10.1037/h0077714
   Seffah A., 2001, IEEE S HUM CTR COMP
   Selic B, 2003, IEEE SOFTWARE, V20, P19, DOI 10.1109/MS.2003.1231146
   Senapathi M, 2005, J INF TECHNOL EDUC-R, V4, P61
   Singh Y., 2009, ADV COMP C 2009 IACC, P1644
   Staron M., 2006, P 9 ACM IEEE INT C M, V4199, P57
   United Nations Educational Scientific and Cultural Organization (UNESCO), 2018, INT TECHN GUID SEX E
   Wieringa R.J., 1996, REQUIREMENTS ENG FRA
   Wohlin C., 1999, EXPT SOFTWARE ENG IN
NR 24
TC 12
Z9 15
U1 0
U2 14
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 1
PY 2013
VL 78
IS 11
BP 2245
EP 2258
DI 10.1016/j.scico.2012.07.017
PG 14
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 220QR
UT WOS:000324602500011
OA Green Published
DA 2024-07-18
ER

PT J
AU Vigueras, G
   Orduña, JM
   Lozano, M
   Jégou, Y
AF Vigueras, Guillermo
   Orduna, Juan M.
   Lozano, Miguel
   Jegou, Yvon
TI A scalable multiagent system architecture for interactive applications
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Crowd simulations; Interactive applications; Scalable multiagent system
   architecture
ID SIMULATION
AB Interactive applications like crowd simulations need to properly render the virtual world while simulating the interaction of thousands of agents at the same time. The computational workload generated by these two tasks highly increases with the number of the simulated agents, requiring a scalable design of the multiagent system. In this paper, we present, in an unified manner, a distributed multiagent system architecture that can manage large crowds of autonomous agents at interactive rates while rendering multiple views of the virtual world being simulated. This architecture consists of a distributed multiagent system and a complementary distributed visualization subsystem. We also present a new scalability study of the distributed multiagent system architecture, as well as an application example. The scalability study shows that, since no system bottlenecks are present in the proposed multiagent system architecture, it can efficiently simulate population sizes of different orders of magnitude by simply adding more hardware, provided that the ratio of clients per server is appropriate for the computer platforms acting as servers. On the other hand, the application example shows that these improvements are achieved without affecting the interactivity of the simulation. Therefore, the scalability of the proposed multiagent system architecture is validated for interactive large-scale applications. (C) 2011 Elsevier B.V. All rights reserved.
C1 [Vigueras, Guillermo; Orduna, Juan M.; Lozano, Miguel] Univ Valencia, Dept Informat, E-46100 Burjassot, Valencia, Spain.
   [Jegou, Yvon] INRIA Rennes, Bretagne Atlantic Res Ctr, MYRIADS Project Team, Rennes, France.
C3 University of Valencia; Universite de Rennes
RP Orduña, JM (corresponding author), Univ Valencia, Dept Informat, Av Vicent Andres Estelles S-N, E-46100 Burjassot, Valencia, Spain.
EM guillermo.vigueras@uv.es; juan.orduna@uv.es; miguel.lozano@uv.es;
   yvon.jegou@inria.fr
RI lozano, miguel/B-1201-2017; lozano, miguel/O-1921-2019; Orduña, Juan
   M./AAB-5732-2020; Vigueras, Guillermo/I-1772-2015
OI lozano, miguel/0000-0002-2532-0321; lozano, miguel/0000-0002-2532-0321;
   Orduña, Juan M./0000-0002-2932-0214; Vigueras,
   Guillermo/0000-0003-0162-5267
FU Spanish MICINN [CSD2006-00046, TIN2009-14475-C04-04]; European
   Commission FEDER funds [CSD2006-00046, TIN2009-14475-C04-04]
FX This work has been jointly supported by the Spanish MICINN and the
   European Commission FEDER funds, under grants Consolider-Ingenio 2010
   CSD2006-00046, and TIN2009-14475-C04-04.
CR [Anonymous], 1999, Creating Computer Simulation Systems: an Introduction to the High Level Architecture
   Ashraf G, 2007, LECT NOTES COMPUT SC, V4352, P226
   Bajo J, 2010, INTEGR COMPUT-AID E, V17, P131, DOI 10.3233/ICA-2010-0332
   Bharambe A., 2006, Proceedings of the 3rd conference on Networked Systems Design Implementation - Volume 3, NSDI'06, V3, P12
   Bordini R., 2007, PROGRAMMING MULTIAGE
   Chen D, 2008, FUTURE GENER COMP SY, V24, P658, DOI 10.1016/j.future.2008.01.004
   Chenney Stephen., 2004, Proceedings of the 2004 ACM SIGGRAPH/Euro- graphics symposium on Computer animation, P233, DOI [10.1145/1028523.1028553, DOI 10.1145/1028523.1028553.]
   Courty N., CGI 05, P206
   Dobbyn S, 2005, ACM T GRAPHIC, V24, P933, DOI 10.1145/1073204.1073290
   Duato J., 1997, INTERCONNECTION NETW
   Frank T., INT C PAR COMP, P1
   Grimaldo F, 2008, KNOWL ENG REV, V23, P369, DOI 10.1017/S026988890800009X
   Henderson T., 2003, Proceedings of the ACM SIGCOMM 2003, P141
   Iglesias A, 2005, IEICE T INF SYST, VE88D, P865, DOI 10.1093/ietisy/e88-d.5.865
   París DL, 2009, INTEGR COMPUT-AID E, V16, P283, DOI 10.3233/ICA-2009-0320
   Loscos C, 2003, THEORY AND PRACTICE OF COMPUTER GRAPHICS, PROCEEDINGS, P122
   Lozano M, 2009, J NETW COMPUT APPL, V32, P474, DOI 10.1016/j.jnca.2008.02.011
   Lysenko M, 2008, JASSS-J ARTIF SOC S, V11
   Martinez A.V., 13 INT S DISTR SIM R, P251
   Nakanishi H., 2004, VRST 04, P97
   North M. J., P AG 2005 C GEN SOC
   Pelechano N, 2007, SYMPOSIUM ON COMPUTER ANIMATION 2007: ACM SIGGRAPH/ EUROGRAPHICS SYMPOSIUM PROCEEDINGS, P99
   Perumalla K.S., 2008, Proc. Agent-Directed Simulation Symposium, P116
   Pharr M., 2005, GPU GEMS
   Pinto T, 2009, IEEE POW ENER SOC GE, P3680
   Quinn M.J., P 2 INT C PED EV DYN, P63
   Reynolds C., GAM DEV C 1999, P763
   Reynolds C.W., 2006, SIGGRAPH symposium on Videogames, P113, DOI [DOI 10.1145/1183316.1183333, 10.1145/1183316.1183333]
   Shendarkar A, 2006, PROCEEDINGS OF THE 2006 WINTER SIMULATION CONFERENCE, VOLS 1-5, P545, DOI 10.1109/WSC.2006.323128
   Sims K., 1990, Computer Graphics, V24, P405, DOI 10.1145/97880.97923
   Singhal S., 1999, Networked Virtual Environments
   Tecchia F., P ACM EG GAM TECHN C, P17
   Tecchia F., 2002, COMPUTER GRAPHICS FO, V21
   Vigueras G., 2008, 2008 37th International Conference on Parallel Processing (ICPP), P430, DOI 10.1109/ICPP.2008.20
   Vigueras G, 2010, APPL SOFT COMPUT, V10, P225, DOI 10.1016/j.asoc.2009.07.004
   Vigueras G., 2010, INT C COMP MATH METH, P999
   Vigueras G., 2009, J SUPERCOMPUTING
   Vigueras G, 2010, ADV INTEL SOFT COMPU, V70, P15, DOI 10.1007/978-3-642-12384-9_3
   Xiong H, 2007, VRST 2007: ACM SYMPOSIUM ON VIRTUAL REALITY SOFTWARE AND TECHNOLOGY, PROCEEDINGS, P141
NR 39
TC 4
Z9 4
U1 0
U2 14
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 1
PY 2013
VL 78
IS 6
BP 715
EP 724
DI 10.1016/j.scico.2011.09.002
PG 10
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 133JJ
UT WOS:000318134400009
OA Bronze
DA 2024-07-18
ER

PT J
AU Leung, A
   Lhoták, O
   Lashari, G
AF Leung, Alan
   Lhotak, Ondrej
   Lashari, Ghulam
TI Parallel execution of Java loops on Graphics Processing Units
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Java; GPU; Parallelization
ID GPUS
AB Accelerated graphics cards, or Graphics Processing Units (GPUs), have become ubiquitous in recent years. On the right kinds of problems, GPUs greatly surpass CPUs in terms of raw performance. However, because they are difficult to program, GPUs are used only for a narrow class of special-purpose applications; the raw processing power made available by GPUs is unused most of the time.
   This paper presents an extension to a Java JIT compiler that executes suitable code on the GPU instead of the CPU. Both static and dynamic features are used to decide whether it is feasible and beneficial to off-load a piece of code on the CPU. The paper presents a cost model that balances the speedup available from the CPU against the cost of transferring input and output data between main memory and CPU memory. The cost model is parameterized so that it can be applied to different hardware combinations. The paper also presents ways to overcome several obstacles to parallelization inherent in the design of the Java bytecode language: unstructured control flow, the lack of multi-dimensional arrays, the precise exception semantics, and the proliferation of indirect references. (C) 2011 Elsevier B.V. All rights reserved.
C1 [Leung, Alan; Lhotak, Ondrej; Lashari, Ghulam] Univ Waterloo, DR Cheriton Sch Comp Sci, Waterloo, ON N2L 3G1, Canada.
C3 University of Waterloo
RP Lhoták, O (corresponding author), Univ Waterloo, DR Cheriton Sch Comp Sci, Waterloo, ON N2L 3G1, Canada.
EM olhotak@uwaterloo.ca
CR Allen JohnR., 2002, OPTIMIZING COMPILERS
   Alpern B, 2000, IBM SYST J, V39, P211, DOI 10.1147/sj.391.0211
   [Anonymous], P 7 SIAM C PAR PROC
   Arnold M, 2000, ACM SIGPLAN NOTICES, V35, P47, DOI 10.1145/354222.353175
   Artigas P. V., 2000, Conference Proceedings of the 2000 International Conference on Supercomputing, P1, DOI 10.1145/335231.335232
   Banerjee P., 1994, 1 INT WORKSH PAR PRO, P322
   BIK A. J. C, 2004, SOFTWARE VECTORIZATI
   Bik AJC, 2002, INT J PARALLEL PROG, V30, P65, DOI 10.1023/A:1014230429447
   Bik AJC, 1997, CONCURRENCY-PRACT EX, V9, P579, DOI 10.1002/(SICI)1096-9128(199706)9:6<579::AID-CPE309>3.0.CO;2-G
   Blume William., 1994, Languages and Compilers for Parallel Computing, P141
   Buck I, 2004, ACM T GRAPHIC, V23, P777, DOI 10.1145/1015706.1015800
   Cheong G., 1997, P 2 SUIF COMP WORKSH
   Christopher JF Pickett, 2005, P 6 ACM SIGPLAN SIGS, V31, P59
   Cornwall J. L. T., 2006, P WORKSH PERF OPT HI, P381
   Eichenberger AE, 2005, PACT 2005: 14TH INTERNATIONAL CONFERENCE ON PARALLEL ARCHITECTURES AND COMPILATION TECHNIQUES, P161
   Franchetti F, 2005, P IEEE, V93, P409, DOI 10.1109/JPROC.2004.840491
   Hind M., PLDI 2004
   Jaewook Shin, 2007, 2007 16th International Conference on Parallel Architectures and Compilation Techniques, P280
   Kazi I. H., 2000, Proceedings 14th International Parallel and Distributed Processing Symposium. IPDPS 2000, P559, DOI 10.1109/IPDPS.2000.846035
   Krall A, 2000, INT J PARALLEL PROG, V28, P347, DOI 10.1023/A:1007507005174
   Larsen S, 2000, ACM SIGPLAN NOTICES, V35, P145, DOI 10.1145/358438.349320
   Lee CG, 1998, 31ST ANNUAL ACM/IEEE INTERNATIONAL SYMPOSIUM ON MICROARCHITECTURE, PROCEEDINGS, P25, DOI 10.1109/MICRO.1998.742766
   Leung A., 2009, Proc. of the 7th International Conference on Principles and Prac- tice of Programming in Java, P91, DOI [10. 1145/1596655.1596670, DOI 10.1145/1596655.1596670]
   Lucas P., 2007, THESIS U SAARLANDES
   Moreira JoseE., 2001, JGI 01, P116
   Naishlos D., 2004, P 2004 GCC DEV SUMM, P105
   Naishlos Dorit., 2003, PROC INT C COMPILERS, P2
   Owens JD, 2007, COMPUT GRAPH FORUM, V26, P80, DOI 10.1111/j.1467-8659.2007.01012.x
   Paek Yunheung., 1996, LANGUAGES COMPILERS, P266
   Petit E., SC 06 WORKSH GEN PUR
   Polychronopoulos C. D., 1990, 2 WORKSH LANG COMP P, P423
   Shin J, 2002, 2002 INTERNATIONAL CONFERENCE ON PARALLEL ARCHITECTURES AND COMPILATION TECHNIQUES, PROCEEDINGS, P45, DOI 10.1109/PACT.2002.1106003
   Sreraman N, 2000, INT J PARALLEL PROG, V28, P363, DOI 10.1023/A:1007559022013
   Tarditi D, 2006, ACM SIGPLAN NOTICES, V41, P325, DOI 10.1145/1168918.1168898
   Wolfe M.J., 1995, High Performance Compilers for Parallel Computing
   Zhao Jisheng., 2007, P EURO, P28
   Zhao JS, 2005, PDCAT 2005: SIXTH INTERNATIONAL CONFERENCE ON PARALLEL AND DISTRIBUTED COMPUTING, APPLICATIONS AND TECHNOLOGIES, PROCEEDINGS, P35
   Zima Hans., 1991, SUPERCOMPILERS PARAL
NR 38
TC 2
Z9 2
U1 0
U2 6
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAY 1
PY 2013
VL 78
IS 5
BP 458
EP 480
DI 10.1016/j.scico.2011.06.004
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 125MS
UT WOS:000317544500004
OA Bronze
DA 2024-07-18
ER

PT J
AU Popeea, C
   Chin, WN
AF Popeea, Corneliu
   Chin, Wei-Ngan
TI Dual analysis for proving safety and finding bugs
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Static analysis; Automated verification; Numerical abstract domain;
   False positive
ID PROGRAM ANALYSIS; STATIC CHECKING; LANGUAGE
AB Program bugs remain a major challenge for software developers and various tools have been proposed to help with their localisation and elimination. Most present-day tools are based either on over-approximating techniques that can prove safety but may report false positives, or on under-approximating techniques that can find real bugs but with possible false negatives. In this paper, we propose a dual static analysis that is based only on over-approximation. Its main novelty is to concurrently derive conditions that lead to either success or failure outcomes and thus we provide a comprehensive solution for both proving safety and finding real program bugs. We have proven the soundness of our approach and have implemented a prototype system that is validated by a set of experiments. (C) 2012 Elsevier B.V. All rights reserved.
C1 [Popeea, Corneliu] Max Planck Inst Software Syst MPI SWS, Leipzig, Germany.
   [Chin, Wei-Ngan] Natl Univ Singapore, Singapore 117548, Singapore.
C3 Max Planck Society; National University of Singapore
RP Popeea, C (corresponding author), Max Planck Inst Software Syst MPI SWS, Leipzig, Germany.
EM popeea@model.in.tum.de; chinwn@comp.nus.edu.sg
CR [Anonymous], LECT NOTES COMPUTER
   [Anonymous], P 14 ACM SIGSOFT INT
   [Anonymous], DUAL ANAL PROVING SA
   [Anonymous], THESIS NATL U SINGAP
   [Anonymous], P 14 ACM SIGSOFT INT
   [Anonymous], OMEGA LIB VERSION 1
   [Anonymous], LNCS
   [Anonymous], STTT
   [Anonymous], 2006, P 13 ACM C COMPUTER
   [Anonymous], BUFFER OVERFLOW BENC
   [Anonymous], JAV SCIMARK BENCHM S
   [Anonymous], 1993, P 1992 GLASG WORKSH
   [Anonymous], P ACM SIGPLAN 2008 C
   [Anonymous], LECT NOTES COMPUTER
   Blanchet B, 2003, ACM SIGPLAN NOTICES, V38, P196, DOI 10.1145/780822.781153
   BOURDONCLE F, 1993, SIGPLAN NOTICES, V28, P46, DOI 10.1145/173262.155095
   Clarke E, 2003, TIME-ICTL 2003: 10TH INTERNATIONAL SYMPOSIUM ON TEMPORAL REPRESENTATION AND REASONING AND FOURTH INTERNATIONAL CONFERENCE ON TEMPORAL LOGIC, PROCEEDINGS, P7
   Cousot P, 2002, LECT NOTES COMPUT SC, V2304, P159
   Cousot Patrick, 1977, P 4 ACM S PRINC PROG, P238, DOI [10.1145/512950.512973, DOI 10.1145/512950.512973]
   Cousot Patrick, 1976, P 2 INT S PROGRAMMIN
   Cousot Patrick, 1978, P 5 ACM SIGACT SIGPL, p84S96, DOI DOI 10.1145/512760.512770
   Csallner C, 2005, PROC INT CONF SOFTW, P422
   DIJKSTRA EW, 1975, COMMUN ACM, V18, P453, DOI [10.1145/360933.360975, 10.1145/390016.808417]
   Dillig I, 2008, ACM SIGPLAN NOTICES, V43, P270, DOI 10.1145/1379022.1375615
   Dongarra JJ, 2003, CONCURR COMP-PRACT E, V15, P803, DOI 10.1002/cpe.728
   Flanagan C, 2002, ACM SIGPLAN NOTICES, V37, P234, DOI 10.1145/543552.512558
   Floyd R.W., 1967, P S APPL MATH, V19, P19
   Godefroid P., 2007, SIGPLAN Notices, V42, P47, DOI [10.1145/1190216.1190226, 10.1145/1190215.1190226]
   Godefroid P, 2005, ACM SIGPLAN NOTICES, V40, P213, DOI 10.1145/1064978.1065036
   Godefroid P, 2010, ACM SIGPLAN NOTICES, V45, P43, DOI 10.1145/1707801.1706307
   Godefroid Patrice., 1997, Proceedings of POPL, P174
   Gulwani S, 2008, ACM SIGPLAN NOTICES, V43, P281, DOI 10.1145/1379022.1375616
   Gupta AK, 2008, ACM SIGPLAN NOTICES, V43, P147, DOI 10.1145/1328897.1328459
   Gustavsson J, 2001, LECT NOTES COMPUT SC, V2053, P63
   Hackett Brian., 2006, Proceedings of the 14th ACM SIGSOFT international symposium on Foundations of software engineering, SIGSOFT '06/FSE-14, P69
   Henzinger TA, 2002, ACM SIGPLAN NOTICES, V37, P58, DOI 10.1145/565816.503279
   HOARE CAR, 1969, COMMUN ACM, V12, P576, DOI 10.1145/363235.363259
   Hovemeyer D, 2004, ACM SIGPLAN NOTICES, V39, P92, DOI 10.1145/1052883.1052895
   Klint P, 2009, IEEE INT WORK C SO, P168, DOI 10.1109/SCAM.2009.28
   MARRIOTT K, 1992, J LOGIC PROGRAM, V13, P181, DOI 10.1016/0743-1066(92)90031-W
   Mernik M, 2005, ACM COMPUT SURV, V37, P316, DOI 10.1145/1118890.1118892
   Mine A., 2006, Higher-Order and Symbolic Computation, V19, P31, DOI 10.1007/s10990-006-8609-1
   Necula GC, 2002, LECT NOTES COMPUT SC, V2304, P213
   Nielson F., 1999, Principles of Program Analysis
   Popeea C, 2008, PEPM'08: PROCEEDINGS OF THE 2008 ACM SIGPLAN SYMPOSIUM ON PARTIAL EVALUATION AND SEMANTICS-BASED PROGRAM MANIPULATION, P177, DOI 10.1145/1328408.1328434
   PUGH W, 1992, COMMUN ACM, V35, P102, DOI 10.1145/135226.135233
   Pugh W, 1998, ACM T PROGR LANG SYS, V20, P635, DOI 10.1145/291889.291900
   Rival X, 2005, LECT NOTES COMPUT SC, V3780, P347
   Rival X, 2005, LECT NOTES COMPUT SC, V3672, P303
   Sankaranarayanan S, 2006, LECT NOTES COMPUT SC, V4134, P3
   Suzuki N., 1977, POPL 77, P132
   Venet A, 2004, ACM SIGPLAN NOTICES, V39, P231, DOI 10.1145/996893.996869
   Xie YC, 2005, ACM SIGPLAN NOTICES, V40, P351, DOI 10.1145/1047659.1040334
NR 53
TC 5
Z9 5
U1 0
U2 6
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD APR 1
PY 2013
VL 78
IS 4
BP 390
EP 411
DI 10.1016/j.scico.2012.07.004
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 104GA
UT WOS:000315978700005
OA Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Philips, E
   Van Der Straeten, R
   Jonckers, V
AF Philips, E.
   Van Der Straeten, R.
   Jonckers, V.
TI NOW: Orchestrating services in a nomadic network using a dedicated
   workflow language
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Workflow language; Nomadic network; Service orchestration; AmbientTalk
ID COORDINATION; PATTERNS; SUPPORT; REO
AB Orchestrating services in nomadic or mobile ad hoc networks is not without a challenge, since these environments are built upon volatile connections. Services residing on mobile devices are exposed to (temporary) network failures, which must be considered the rule rather than the exception. This paper proposes a dedicated workflow language built on top of an ambient-oriented programming language that supports dynamic service discovery and communication primitives resilient to network failures. The proposed workflow language, NOW, has support for high level workflow abstractions for control flow, rich network and service failure detection, and failure handling through compensating actions, and dynamic data flow between the services in the environment. By adding this extra layer of abstraction, the application programmer is offered a flexible way to develop applications for nomadic networks. (C) 2011 Elsevier B.V. All rights reserved.
C1 [Philips, E.; Van Der Straeten, R.; Jonckers, V.] Vrije Univ Brussel, Software Languages Lab, Brussels, Belgium.
C3 Vrije Universiteit Brussel
RP Philips, E (corresponding author), Vrije Univ Brussel, Software Languages Lab, Brussels, Belgium.
EM ephilips@vub.ac.be; rvdstrae@vub.ac.be; vejoncke@soft.vub.ac.be
OI Jonckers, Viviane/0000-0001-7724-3412
FU "Institute for the Promotion of Innovation through Science and
   Technology in Flanders" (IWT Vlaanderen)
FX We would like to acknowledge Jorge Vallejos for his invaluable comments
   and suggestions. Eline Philips is funded by a doctoral scholarship of
   the "Institute for the Promotion of Innovation through Science and
   Technology in Flanders" (IWT Vlaanderen).
CR Agha G., 1986, Actors: a model of concurrent computation in distributed systems
   Alonso G, 1996, PROC INT CONF DATA, P574, DOI 10.1109/ICDE.1996.492208
   [Anonymous], IEEE DATA ENG B
   [Anonymous], 2007, Web services business process execution language version 2.0
   Arbab F, 2004, MATH STRUCT COMP SCI, V14, P329, DOI 10.1017/S0960129504004153
   Arbab F, 2008, COMM COM INF SC, V17, P108
   Casati F, 1999, ACM T DATABASE SYST, V24, P405, DOI 10.1145/328939.328996
   Chin B, 2006, LECT NOTES COMPUT SC, V4067, P255
   Chiu D.K.W., ADOME WFMS COOPERATI, P271
   Cook WR, 2006, LECT NOTES COMPUT SC, V4038, P82
   Curbera F, 2007, LECT NOTES COMPUT SC, V4749, P94
   Dedecker Jessie., 2005, OBJECT ORIENTED PROG, P31
   Eder J., 1996, Proceedings First IFCIS International Conference on Cooperative Information Systems, P124, DOI 10.1109/COOPIS.1996.555004
   Hagen C, 1998, INT CON DISTR COMP S, P526, DOI 10.1109/ICDCS.1998.679803
   Haller P, 2006, LECT NOTES COMPUT SC, V4228, P4
   Kitchin D, 2009, LECT NOTES COMPUT SC, V5522, P1, DOI 10.1007/978-3-642-02138-1_1
   Mascolo C, 2002, LECT NOTES COMPUT SC, V2497, P20
   Matsuoka A, 2009, SEMANTICS EXCEPTION
   Mecella M, 2006, INT S COLLAB TECHNOL, P173
   Meng S, 2007, APPLIED COMPUTING 2007, VOL 1 AND 2, P346, DOI 10.1145/1244002.1244085
   Mostinckx S, 2007, LECT NOTES COMPUT SC, V4467, P268
   OMG, 2011, BUS PROC MOD NOT BPM
   Pajunen L, 2007, IEEE INT ENTERP DIST, P279, DOI 10.1109/EDOC.2007.32
   Philips E, 2010, LECT NOTES COMPUT SC, V6116, P31, DOI 10.1007/978-3-642-13414-2_3
   Reuter A., 1995, IEEE DATA ENG B, V18, P4
   Russell N, 2005, LECT NOTES COMPUT SC, V3716, P353
   Russell N., 2006, Workflow Control-Flow Patterns: A Revised View
   Sadiq Shazia., 2004, ADC 04, P207
   Sen R, 2008, LECT NOTES COMPUT SC, V5052, P280, DOI 10.1007/978-3-540-68265-3_18
   Stiphout R., 1997, TECHNICAL REPORT
   Thomas L., 2009, P 10 ACM IFIP USENIX, P14
   Van Cutsem T, 2009, COMPUT LANG SYST STR, V35, P80, DOI 10.1016/j.cl.2008.06.005
   Van Cutsem T, 2007, P INT C CHIL COMPUT, P3, DOI 10.1109/SCCC.2007.12
   van der Aalst WMP, 2005, INFORM SYST, V30, P245, DOI 10.1016/j.is.2004.02.002
NR 34
TC 5
Z9 5
U1 0
U2 8
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 1
PY 2013
VL 78
IS 2
SI SI
BP 168
EP 194
DI 10.1016/j.scico.2011.10.012
PG 27
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 056WS
UT WOS:000312522700003
OA Bronze
DA 2024-07-18
ER

PT J
AU Zambrano, A
   Fabry, J
   Gordillo, S
AF Zambrano, Arturo
   Fabry, Johan
   Gordillo, Silvia
TI Expressing aspectual interactions in requirements engineering:
   Experiences, problems and solutions
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Aspect oriented requirement engineering; Aspect dependences and
   interactions; Industrial case study
ID MODELS
AB Aspect Oriented Requirements Engineering (AORE) provides support for modularizing crosscutting requirements. In the context of an industrial project in the domain of Slot Machines we needed to perform AORE, with a special emphasis on dependencies and interactions among concerns. We were however unable to find any report of large-scale industrial applications of AORE approaches that treat dependencies and interactions. We therefore evaluated two AORE approaches: Theme/Doc and MDSOCRE, to establish their applicability in our setting. In this paper we report on the limitations of both approaches we encountered and propose extensions that allow them to cope with concern interactions. We also show how these extensions provide the needed expressiveness by applying them to our industrial case study. (C) 2012 Elsevier B.V. All rights reserved.
C1 [Zambrano, Arturo; Gordillo, Silvia] Univ Nacl La Plata, Fac Informat, LIFIA, La Plata, Buenos Aires, Argentina.
   [Fabry, Johan] Univ Chile, Dept Comp Sci, PLEIAD Lab, Santiago, Chile.
   [Gordillo, Silvia] CIC, Buenos Aires, DF, Argentina.
C3 National University of La Plata; Universidad de Chile
RP Zambrano, A (corresponding author), Univ Nacl La Plata, Fac Informat, LIFIA, La Plata, Buenos Aires, Argentina.
EM arturo.zambrano@lifia.info.unlp.edu.ar
OI Fabry, Johan/0000-0002-7533-9354
FU FONDECYT [1090083]
FX Johan Fabry is partially funded by the FONDECYT project 1090083. This
   article extends the article "Expressing aspectual interactions in
   requirements engineering: experiences in the slot machine domain"
   (Zambrano et al. 2010 [35]) that appeared in the Proceedings of the 2010
   ACM Symposium on Applied Computing (SAC 2010).
   doi:10.1145/1774088.1774545.
CR Baniassad E, 2006, IEEE SOFTWARE, V23, P61, DOI 10.1109/MS.2006.8
   Baniassad E, 2004, PROC INT CONF SOFTW, P158, DOI 10.1109/ICSE.2004.1317438
   Baniassad Elisa, 2004, WORKSH 3 INT C ASP O
   Bar-On David, 2007, SOFTW SCI TECHN ENG, V0, P116
   BRITO I, 2004, EARLY ASPECTS 2004 A
   Brito IS, 2007, LECT NOTES COMPUT SC, V4620, P144
   Chitchyan R, 2005, WER 2005 8 WORKSH RE, P1
   Chitchyan R, 2009, LECT NOTES COMPUT SC, V5490, P133
   Chitchyan Ruzanna., 2007, AOSD 07, P36
   CHUNG L, 1995, PROC INT CONF SOFTW, P25, DOI 10.1145/225014.225017
   Chung L., 1999, INT SERIES SOFTWARE, V5
   Chung Lawrence, 2009, NONFUNCTIONAL REQUIR, P363
   CLARKE S., 2005, OBJECT TECHNOLOGY SE
   Gaming Laboratories International, 2007, GAM DEV CAS
   Gaming Standard Association, 2008, GAM SERV G2S PROT SP
   Grundy J, 1999, IEEE INTERNATIONAL SYMPOSIUM ON REQUIREMENTS ENGINEERING, PROCEEDINGS, P84, DOI 10.1109/ISRE.1999.777988
   JACOBSON I, 2004, ADDISON WESLEY OBJEC
   Liu J, 2005, FEATURE INTERACTIONS IN TELECOMMUNICATIONS AND SOFTWARE SYSTEMS VIII, P178
   Moreira A, 2005, 13TH IEEE INTERNATIONAL CONFERENCE ON REQUIREMENTS ENGINEERING, PROCEEDINGS, P285, DOI 10.1109/RE.2005.46
   Nevada Gaming Commission, 2008, 8301998 IEEE
   Nevada Gaming Commission, 2008, TECHN STAND GAM DEV
   Niu N, 2009, LECT NOTES COMPUT SC, V5560, P83, DOI 10.1007/978-3-642-03764-1_3
   Ramesh B, 2001, IEEE T SOFTWARE ENG, V27, P58, DOI 10.1109/32.895989
   Rashid A., 2003, AOSD 2003 P 2 INT C, P11
   Rashid A, 2006, LECT NOTES COMPUT SC, V4199, P155
   Sampaio Americo, 2007, 2007 First International Symposium on Empirical Software Engineering and Measurement, P166
   Sampaio A, 2007, LECT NOTES COMPUT SC, V4620, P4
   Sanen Frans, 2006, STUDY INTERACTION IS
   Sommerville I, 1997, ANN SOFTW ENG, V3, P101, DOI 10.1023/A:1018946223345
   Tarr P., 1999, Proceedings of the 1999 International Conference on Software Engineering (IEEE Cat. No.99CB37002), P107, DOI 10.1109/ICSE.1999.841000
   van Lamsweerde A, 2001, FIFTH IEEE INTERNATIONAL SYMPOSIUM ON REQUIREMENTS ENGINEERING, PROCEEDINGS, P249
   Whittle J, 2004, IEE P-SOFTW, V151, P157, DOI 10.1049/ip-sen:20040921
   Whittle J, 2008, LECT NOTES COMPUT SC, V5002, P16
   Yu YJ, 2004, 12TH IEEE INTERNATIONAL REQUIREMENTS ENGINEERING CONFERENCE, PROCEEDINGS, P38
   Zambrano Arturo, 2010, P 2010 ACM S APPL CO, P2161
NR 35
TC 2
Z9 2
U1 0
U2 7
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 1
PY 2012
VL 78
IS 1
BP 65
EP 92
DI 10.1016/j.scico.2011.12.004
PG 28
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 024RD
UT WOS:000310125400005
OA hybrid, Green Published
DA 2024-07-18
ER

PT J
AU Narkawicz, A
   Muñoz, C
   Dowek, G
AF Narkawicz, Anthony
   Munoz, Cesar
   Dowek, Gilles
TI Provably correct conflict prevention bands algorithms
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Formal verification; Theorem proving; Air traffic management
AB In air traffic management, a pairwise conflict is a predicted loss of separation between two aircraft, referred to as the ownship and the intruder. A conflict prevention bands system displays ranges of maneuvers for the ownship that characterize regions in the airspace that are either conflict-free or "don't go" zones that the ownship has to avoid. Errors in the calculation of prevention bands may result in incorrect separation assurance information being displayed to pilots or air traffic controllers. Algorithms that compute conflict prevention bands are surprisingly difficult to formalize and verify. This paper presents a method for the analysis and verification of prevention bands algorithms. The method, which has been implemented in the Prototype Verification System (PVS), is illustrated with a provably correct 3-dimensional (3D) prevention bands algorithm for track angle maneuvers. Published by Elsevier B.V.
C1 [Narkawicz, Anthony; Munoz, Cesar] NASA, Langley Res Ctr, Hampton, VA 23665 USA.
   [Dowek, Gilles] Ecole Polytech, F-91128 Palaiseau, France.
C3 National Aeronautics & Space Administration (NASA); NASA Langley
   Research Center; Institut Polytechnique de Paris; Ecole Polytechnique
RP Muñoz, C (corresponding author), NASA, Langley Res Ctr, Hampton, VA 23665 USA.
EM cesar.a.munoz@nasa.gov
OI Dowek, Gilles/0000-0001-6253-935X
CR Bushnell D., 2009, P IEEE AER C BIG SKY
   Bussink F.J.L., 2005, P 24 DIG AV SYST C D
   Butler R., 2010, P 2 NASA FORM METH S, P34
   HOEKSTRA J, 2000, NLRCR2000227
   Hoekstra J.M., 2001, 9080634328 TU DELFT
   Karr DA, 2004, P AIAA MOD SIM TECHN
   Maddalon J., 2009, P AIAA 9 AV TECHN IN
   Maddalon J., 2009, NASATM2009215768 LAN
   Maddalon J., 2004, NASATP2004213015 LAR
   Narkawicz A., 2010, NASATM2010216706 LAN
   OWRE S, 1992, LECT NOTES ARTIF INT, V607, P748
   Platzer A, 2009, LECT NOTES COMPUT SC, V5850, P547, DOI 10.1007/978-3-642-05089-3_35
   Rudin W., 1976, PRINCIPLES MATH ANAL
   Sweet D.N., 2002, P AIAA MOD SIM TECHN
NR 14
TC 9
Z9 10
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 1
PY 2012
VL 77
IS 10-11
SI SI
BP 1039
EP 1057
DI 10.1016/j.scico.2011.07.002
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 980JQ
UT WOS:000306889800002
OA Bronze
DA 2024-07-18
ER

PT J
AU Gallardo, MM
   Joubert, C
   Merino, P
   Sanán, D
AF Gallardo, M. M.
   Joubert, C.
   Merino, P.
   Sanan, D.
TI A model-extraction approach to verifying concurrent C programs with CADP
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Software model checking; Data flow analysis; Labeled transition system;
   Boolean equation system; CADP verification toolbox
ID DATA-FLOW-ANALYSIS; CHECKING; VERIFICATION; INTEGRATION; TOOLS
AB The development of reliable software for industrial critical systems benefits from the use of formal models and verification tools for detecting and correcting errors as early as possible. Ideally, with a complete model-based methodology, the formal models should be the starting point to obtain the final reliable code and the verification step should be done over the high-level models. However, this is not the case for many projects, especially when integrating existing code. In this paper, we describe an approach to verify concurrent C code by automatically extracting a high-level formal model that is suitable for analysis with existing tools. The basic components of our approach are: (1) a method to construct a labeled transition system from the source code, that takes flow control and interaction among processes into account; (2) a modeling scheme of the behavior that is external to the program, namely the functionality provided by the operating system; (3) the use of demand-driven static analyses to make a further abstraction of the program, thus saving time and memory during its verification. The whole proposal has been implemented as an extension of the CADP toolbox, which already provides a variety of analysis modules for several input languages using labeled transition systems as the core model. The approach taken fits well within the existing architecture of CADP which does not need to be altered to enable C program verification. We illustrate the use of the extended CADP toolbox by considering examples of the VLTS benchmark suite and C implementations of various concurrent programs. Published by Elsevier B.V.
C1 [Joubert, C.] Univ Politecn Valencia, Valencia, Spain.
   [Gallardo, M. M.; Merino, P.; Sanan, D.] Univ Malaga, E-29071 Malaga, Spain.
C3 Universitat Politecnica de Valencia; Universidad de Malaga
RP Joubert, C (corresponding author), Univ Politecn Valencia, Valencia, Spain.
EM gallardo@lcc.uma.es; joubert@dsic.upv.es; pedro@lcc.uma.es;
   sanan@lcc.uma.es
RI Sanan, David/AAA-8320-2020; Gallardo, Maria-del-Mar/JAC-7780-2023;
   Joubert, Christophe/A-2125-2010; Merino-Gomez, Pedro/L-4518-2014;
   Gallardo Melgarejo, Maria del Mar/G-4371-2014
OI Sanan, David/0000-0003-2755-3089; Joubert,
   Christophe/0000-0002-1767-5675; Merino-Gomez, Pedro/0000-0003-2456-4946;
   Gallardo Melgarejo, Maria del Mar/0000-0003-3481-5307
FU Spanish MICINN [TIN2007-68093-C02, TIN2010-21062-C02-02]; FEDER; MICINN
   INNCORPORA-PTQ; Generalitat Valenciana [Emergentes gv/2009/024 (TAAS),
   PROMETEO2011/052]
FX This work has been supported by the Spanish MICINN under grants
   TIN2007-68093-C02, TIN2010-21062-C02-02, FEDER, the MICINN
   INNCORPORA-PTQ program, and the Generalitat Valenciana under grants
   Emergentes gv/2009/024 (TAAS) and PROMETEO2011/052.
CR Alpuente M., 2011, LECT NOTES COMPUTER, V6702
   Alpuente M, 2009, LECT NOTES COMPUT SC, V5596, P215, DOI 10.1007/978-3-642-03240-0_18
   ANDERSEN HR, 1994, THEOR COMPUT SCI, V126, P3, DOI 10.1016/0304-3975(94)90266-6
   [Anonymous], 1997, Verification of Modal Properties Using Boolean Equation Systems
   [Anonymous], 2007, COMPILERS PRINCIPLES
   Ball T, 2001, LECT NOTES COMPUT SC, V2102, P260
   Ball T, 2010, LECT NOTES COMPUT SC, V6174, P119, DOI 10.1007/978-3-642-14295-6_11
   Batt G, 2004, LECT NOTES COMPUT SC, V2989, P158
   Brat G., 2000, P POSTCAV 00 WORKSH
   Brunel J, 2009, ACM SIGPLAN NOTICES, V44, P114, DOI 10.1145/1594834.1480897
   Caravel H., ISO IEC JTC1 SC21 WC
   Cimatti A., 2000, Int. J. Softw. Tools for Technol. Transf. (STTT), V2, P410, DOI [DOI 10.1007/S100090050046, 10.1007/s100090050046]
   Clarke Edmund M., 2001, Model Checking
   Corbet Jonathan, 2005, Linux device drivers, VThird
   de la Cámara P, 2006, LECT NOTES COMPUT SC, V3925, P182
   de la Camara Pedro, 2009, International Journal on Software Tools for Technology Transfer, V11, P359, DOI 10.1007/s10009-009-0112-7
   de la Cámara P, 2007, LECT NOTES COMPUT SC, V4595, P243
   del Mar Gallardo Maria, 2010, Proceedings of the 2010 8th IEEE International Conference on Software Engineering and Formal Methods (SEFM 2010), P211, DOI 10.1109/SEFM.2010.34
   Gallardo MD, 2007, LECT NOTES COMPUT SC, V4595, P268
   Gallardo MD, 2007, SCI COMPUT PROGRAM, V65, P57, DOI 10.1016/j.scico.2006.08.006
   Gallardo MD, 2007, ELECTRON NOTES THEOR, V190, P33, DOI 10.1016/j.entcs.2007.09.006
   Gallardo M. D. M., 2004, International Journal on Software Tools for Technology Transfer, V5, P165, DOI 10.1007/s10009-003-0122-9
   Gallardo M.M., 2007, P 2 INT C SCI TECHN
   Gallardo M.M., 2006, P 2 INT S LEV APPL F, P321
   Gallardo MD, 2009, J AUTOM REASONING, V42, P229, DOI 10.1007/s10817-009-9124-y
   Garavel H, 2006, THEOR COMPUT SCI, V351, P131, DOI 10.1016/j.tcs.2005.09.064
   Garavel H, 1998, LECT NOTES COMPUT SC, V1384, P68
   Garavel H, 2007, LECT NOTES COMPUT SC, V4590, P158
   Hatcliff J., 2001, CONCUR 2001 - Concurrency Theory. 12th International Conference. Proceedings (Lecture Notes in Computer Science Vol.2154), P39
   Henzinger TA, 2005, LECT NOTES COMPUT SC, V3639, P25
   Holzmann G. J., 1999, Proceedings of the 1999 International Conference on Software Engineering (IEEE Cat. No.99CB37002), P597, DOI 10.1109/ICSE.1999.841053
   Holzmann GJ, 2004, LECT NOTES COMPUT SC, V2989, P76
   Holzmann GJ, 1997, IEEE T SOFTWARE ENG, V23, P279, DOI 10.1109/32.588521
   Joubert C, 2006, LECT NOTES COMPUT SC, V3925, P126
   Julliand J, 2007, LECT NOTES COMPUT SC, V4789, P116
   Mateescu R., 2006, International Journal on Software Tools for Technology Transfer, V8, P37, DOI 10.1007/s10009-005-0194-9
   Mateescu R., P 2 INT WORKSH VER M
   Mateescu R, 2008, MEMOCODE'08: SIXTH ACM & IEEE INTERNATIONAL CONFERENCE ON FORMAL METHODS AND MODELS FOR CO-DESIGN, PROCEEDINGS, P73
   Nielson F., 2005, PRINCIPLES PROGRAM A
   Penas JJS, 2003, THIRD INTERNATIONAL CONFERENCE ON APPLICATION OF CONCURRENCY TO SYSTEM DESIGN, PROCEEDINGS, P247, DOI 10.1109/CSD.2003.1207726
   Raynal M., 1984, ALGORITHMIQUE PARALL
   Siegel Stephen F., 2007, Recent Advances in Parallel Virtual Machine and Message Passing Interface. Proceedings 14th European PVM/MPI Users Group Meeting. (Lecture Notes in Computer Science vol. 4757), P13
   STEFFEN B, 1991, LECT NOTES COMPUT SC, V526, P346
   Talpin JP, 1998, FIRST INTERNATIONAL SYMPOSIUM ON OBJECT-ORIENTED REAL-TIME DISTRIBUTED COMPUTING (ISORC '98), P196, DOI 10.1109/ISORC.1998.666789
   VERGAUWEN B, 1992, LECT NOTES COMPUT SC, V581, P322
   Zheng X, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P197, DOI 10.1145/1328438.1328464
NR 46
TC 6
Z9 6
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR 1
PY 2012
VL 77
IS 3
BP 375
EP 392
DI 10.1016/j.scico.2011.10.003
PG 18
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 898NB
UT WOS:000300748000012
OA Bronze
DA 2024-07-18
ER

PT J
AU Olszak, A
   Jorgensen, BN
AF Olszak, Andrzej
   Jorgensen, Bo Norregaard
TI Remodularizing Java programs for improved locality of feature
   implementations in source code
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Features; Remodularization; Feature location; Fragile decomposition
   problem
ID SOFTWARE; COMPREHENSION
AB Explicit traceability between features and source code is known to help programmers to understand and modify programs during maintenance tasks. However, the complex relations between features and their implementations are not evident from the source code of object-oriented Java programs. Consequently, the implementations of individual features are difficult to locate, comprehend, and modify in isolation. In this paper, we present a novel remodularization approach that improves the representation of features in the source code of Java programs. Both forward and reverse restructurings are supported through on-demand bidirectional restructuring between feature-oriented and object-oriented decompositions. The approach includes a feature location phase based on tracing of program execution, a feature representation phase that reallocates classes into a new package structure based on single-feature and multi-feature packages, and an annotation-based reverse transformation of code. Case studies performed on two open-source projects indicate that our approach requires relatively little manual effort and reduces tangling and scattering of feature implementations in the source code. (C) 2010 Elsevier B.V. All rights reserved.
C1 [Olszak, Andrzej; Jorgensen, Bo Norregaard] Univ So Denmark, Maersk Mc Kinney Moller Inst, DK-5230 Odense M, Denmark.
C3 University of Southern Denmark
RP Olszak, A (corresponding author), Univ So Denmark, Maersk Mc Kinney Moller Inst, Campusvej 55, DK-5230 Odense M, Denmark.
EM ao@mmmi.sdu.dk; bnj@mmmi.sdu.dk
RI Jorgensen, Bo Norregaard/O-9785-2018
OI Jorgensen, Bo Norregaard/0000-0001-5678-6602
CR Apel S., 2009, P 1 INT WORKSH FEAT, P27
   Batory D, 2003, PROC INT CONF SOFTW, P187, DOI 10.1109/ICSE.2003.1201199
   Benestad HC, 2010, EMPIR SOFTW ENG, V15, P166, DOI 10.1007/s10664-009-9118-8
   Bennett K. H., 2000, P C FUT SOFTW ENG, P73
   BIGGERSTAFF TJ, 1993, P 15 INT C SOFTW ENG
   BOOCH G, 1986, IEEE T SOFTWARE ENG, V12, P211, DOI 10.1109/TSE.1986.6312937
   Bosch J., 1997, OBJECT ORIENTED FRAM
   Brcina Robert, 2008, 2008 23rd IEEE/ACM International Conference on Automated Software Engineering - Workshops, P72, DOI 10.1109/ASEW.2008.4686323
   Briand L. C., 1998, Empirical Software Engineering, V3, P65, DOI 10.1023/A:1009783721306
   Briand LC, 1996, IEEE T SOFTWARE ENG, V22, P68, DOI 10.1109/32.481535
   Briand LC, 1999, IEEE T SOFTWARE ENG, V25, P91, DOI 10.1109/32.748920
   Chen KR, 2000, PROG COMPREHEN, P241, DOI 10.1109/WPC.2000.852498
   CHIKOFSKY EJ, 1990, IEEE SOFTWARE, V7, P13, DOI 10.1109/52.43044
   Coppit D, 2007, PROC INT CONF SOFTW, P754
   Cornelissen B, 2009, INT C PROGRAM COMPRE, P100, DOI 10.1109/ICPC.2009.5090033
   Eaddy M, 2008, INT C PROGRAM COMPRE, P53, DOI 10.1109/ICPC.2008.39
   Eisenbarth T, 2003, IEEE T SOFTWARE ENG, V29, P210, DOI 10.1109/TSE.2003.1183929
   Eisenberg AD, 2005, PROC IEEE INT CONF S, P337
   Greevy O, 2005, NINTH EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, PROCEEDINGS, P314, DOI 10.1109/CSMR.2005.21
   Greevy O, 2007, CSMR 2007: 11TH EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, PROCEEDINGS, P265
   Janzen D, 2004, LECT NOTES COMPUT SC, V3086, P195
   Jia Liu, 2006, 28th International Conference on Software Engineering Proceedings, P112
   Kästner C, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P311, DOI 10.1145/1368088.1368131
   KORSON T, 1990, COMMUN ACM, V33, P40, DOI 10.1145/83880.84459
   KOSCHKE R., 2005, ASE '05 Proceedings of the 20th IEEE/ACM International Conference on Automated Software Engineering, P86
   KRASNER GE, 1988, J OBJECT-ORIENT PROG, V1, P41
   LETOVSKY S, 1986, IEEE SOFTWARE, V3, P41, DOI 10.1109/MS.1986.233414
   Liu K., 1999, P INT C SOFTW MAINT, P3
   Martin R.C., DESIGN PRINCIPLES DE
   McDirmid S, 2001, ACM SIGPLAN NOTICES, V36, P211, DOI 10.1145/504311.504298
   Mehta A, 2002, ICSE 2002: PROCEEDINGS OF THE 24TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P417, DOI 10.1109/ICSE.2002.1007987
   Murphy GC, 2001, PROC INT CONF SOFTW, P275, DOI 10.1109/ICSE.2001.919101
   Olszak A., INT C PROGR COMPR IC
   Olszak A., 2009, FOSD '09 : Proceedings of the First International Workshop on Feature-Oriented Software Development, P19
   OSSHER H, 2000, ECOOP 2000 WORKSH AS
   PARNAS DL, 1972, COMMUN ACM, V15, P1053, DOI 10.1145/361598.361623
   Praditwong K., 2010, IEEE T SOFTW ENG, V99
   Prehofer C, 1997, LECT NOTES COMPUT SC, V1241, P419
   Rajlich V, 2002, PROG COMPREHEN, P271, DOI 10.1109/WPC.2002.1021348
   Rajlich V., INT C PROGR COMPR IC, P1
   Ratanotayanon S., INT C PROGR COMPR 20
   Ratiu D, 2009, WORK CONF REVERSE EN, P123, DOI 10.1109/WCRE.2009.29
   Revelle M., INT C PROGR COMPR IC
   Rothlisberger D., 2007, P 2007 INT C DYN LAN, P79
   RUGABER S, 1995, SECOND WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P166, DOI 10.1109/WCRE.1995.514705
   Salah M, 2004, PROC IEEE INT CONF S, P72, DOI 10.1109/ICSM.2004.1357792
   Shaft TM, 2006, MIS QUART, V30, P29
   Turner CR, 1999, J SYST SOFTWARE, V49, P3, DOI 10.1016/S0164-1212(99)00062-X
   WILDE N, 1995, J SOFTW MAINT-RES PR, V7, P49, DOI 10.1002/smr.4360070105
   Wilde N., 1992, Conference on Software Maintenance 1992 (Cat.No.92CH3206-0), P200, DOI 10.1109/ICSM.1992.242542
   Wong WE, 1999, ASSET'99: 1999 IEEE SYMPOSIUM ON APPLICATION-SPECIFIC SYSTEMS AND SOFTWARE ENGINEERING & TECHNOLOGY - PROCEEDINGS, P194, DOI 10.1109/ASSET.1999.756769
   [No title captured]
NR 52
TC 8
Z9 9
U1 0
U2 5
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR 1
PY 2012
VL 77
IS 3
BP 131
EP 151
DI 10.1016/j.scico.2010.10.007
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 898NB
UT WOS:000300748000002
OA Green Published, Bronze
DA 2024-07-18
ER

PT J
AU Mannaert, H
   Verelst, J
   Ven, K
AF Mannaert, Herwig
   Verelst, Jan
   Ven, Kris
TI The transformation of requirements into software primitives: Studying
   evolvability based on systems theoretic stability
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Systems theory; Normalized systems; Stability
ID DESIGN INSTABILITY; EVOLUTION
AB Evolvability is widely considered to be a crucial characteristic of software architectures, particularly in the area of information systems. Although many approaches have been proposed for improving evolvability, most indications are that it remains challenging to deliver the required levels of evolvability. In this paper, we present a theoretical approach to how the concept of systems theoretic stability can be applied to the evolvability of software architectures of informal ion systems. We define and formalize the transformation of a set of basic functional requirements into a set of instantiations of software constructs. We define this transformation using both a static and a dynamic perspective. In the latter perspective, we formulate the postulate that information systems should be stable against new requirements. Based on this postulate, we derive a number of design theorems for software implementation. Using this transformation we use theoretical arguments to derive that these theorems contribute to achieving stability. (C) 2010 Elsevier B.V. All rights reserved.
C1 [Mannaert, Herwig; Verelst, Jan; Ven, Kris] Univ Antwerp, Dept Management Informat Syst, B-2000 Antwerp, Belgium.
C3 University of Antwerp
RP Mannaert, H (corresponding author), Univ Antwerp, Dept Management Informat Syst, Prinsstr 13, B-2000 Antwerp, Belgium.
EM herwig.mannaert@ua.ac.be; jan.verelst@ua.ac.be; kris.ven@ua.ac.be
CR Alshayeb M, 2005, J SYST SOFTWARE, V74, P269, DOI 10.1016/j.jss.2004.02.002
   [Anonymous], CSMR 03
   [Anonymous], 2006, C SOFTW MAINT REENG
   BELADY LA, 1976, IBM SYST J, V15, P225, DOI 10.1147/sj.153.0225
   Booch G., 1993, Object-Oriented Analysis and Design with Applications, V2nd ed.
   Denert E., 1991, SOFTWARE ENG
   Eden AH, 2006, IEE P-SOFTW, V153, P113, DOI 10.1049/ip-sen:20050045
   Figueiredo E, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P261, DOI 10.1145/1368088.1368124
   GARLAN D, 1995, IEEE T SOFTWARE ENG, V21, P269
   Godfrey MW, 2000, PROC IEEE INT CONF S, P131, DOI 10.1109/ICSM.2000.883030
   HANEY FM, 1972, AFIPS JOINT COMP C, P173
   JACKSON LB, 1988, DIGITAL FILTERS SIGN
   Kelly D, 2006, IEEE T SOFTWARE ENG, V32, P315, DOI 10.1109/TSE.2006.42
   Lehman M. M., 1985, Program Evolution: Processes of Software Change
   Lehman MM, 1997, FOURTH INTERNATIONAL SOFTWARE METRICS SYMPOSIUM, PROCEEDINGS, P20, DOI 10.1109/METRIC.1997.637156
   Lehman MM, 2001, ANN SOFTW ENG, V11, P15, DOI 10.1023/A:1012535017876
   LEHMAN MM, 1980, P IEEE, V68, P1060, DOI 10.1109/PROC.1980.11805
   LEHMAN MM, 2000, FEAST 2000 WORKSH IM
   Li W, 2000, INFORM SOFTWARE TECH, V42, P373, DOI 10.1016/S0950-5849(99)00088-9
   Mattsson M, 1999, TOOLS, V29, P118, DOI 10.1109/TOOLS.1999.779005
   Myers Glenford J., 1975, Reliable Software through Composite Design
   Olague HM, 2006, J SOFTW MAINT EVOL-R, V18, P237, DOI 10.1002/smr.332
   Oppenheim A.V., 2014, Signals and systems
   ORFALI R, 1998, CLIENT SERVER PROGRA
   PARNAS DL, 1972, COMMUN ACM, V15, P1053, DOI 10.1145/361598.361623
   Roden PL, 2007, SEVENTH IEEE INTERNATIONAL WORKING CONFERENCE ON SOURCE CODE ANALYSIS AND MANIPULATION, PROCEEDINGS, P171, DOI 10.1109/SCAM.2007.29
   Rusovan S., 2005, PERSPECTIVES FREE OP, P107
   Schach SR, 2003, SOFTWARE QUAL J, V11, P211, DOI 10.1023/A:1025114726917
   Soong N., 1977, P ACM ANN C, P163
   Stewart KJ, 2006, STAT SCI, V21, P167, DOI 10.1214/088342306000000141
   Strachey C., 2000, Higher-Order and Symbolic Computation, V13, P11, DOI 10.1023/A:1010000313106
   YAU SS, 1980, IEEE T SOFTWARE ENG, V6, P545, DOI 10.1109/TSE.1980.234503
NR 32
TC 25
Z9 28
U1 0
U2 5
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 1
PY 2011
VL 76
IS 12
SI SI
BP 1210
EP 1222
DI 10.1016/j.scico.2010.11.009
PG 13
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 793FX
UT WOS:000292806900010
DA 2024-07-18
ER

PT J
AU Kienle, HM
   Müller, HA
AF Kienle, Holger M.
   Mueller, Hausi A.
TI Rigi-An environment for software reverse engineering, exploration,
   visualization, and redocumentation
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Reverse engineering; Program comprehension; Tool-building; Tool
   requirements
ID TOOLS
AB The Rigi environment is a mature research tool that provides functionality to reverse engineer software systems. With Rigi large systems can be analyzed, interactively explored, summarized, and documented. This is supported with parsers to extract information from source code, an exchange format to store extracted information, analyses to transform and abstract information, a scripting language and library to automate the process, and a visualization engine to interactively explore and manipulate information in the form of typed, directed, hierarchical graphs. In this Paper we describe Rigi's main components and functionalities, and assess its impact on reverse engineering research. Furthermore, we discuss Rigi's architecture and design decisions that led to a decoupling of major functionalities, and enable tool extensibility, interoperability and end-user programmability. (C) 2009 Elsevier B.V. All rights reserved.
C1 [Kienle, Holger M.; Mueller, Hausi A.] Univ Victoria, Victoria, BC V8W 2Y2, Canada.
C3 University of Victoria
RP Müller, HA (corresponding author), Univ Victoria, Victoria, BC V8W 2Y2, Canada.
EM kienle@cs.uvic.ca; hausi@cs.uvic.ca
OI Muller, Hausi/0000-0002-1004-5830
FU National Sciences and Engineering Research Council (NSERC) of Canada
   [CRDPJ 320529-04, CRDPJ 356154-07]; IBM Corporation and CA Inc.
FX The work on this paper was funded in part by the National Sciences and
   Engineering Research Council (NSERC) of Canada (CRDPJ 320529-04 and
   CRDPJ 356154-07) as well as IBM Corporation and CA Inc. via the CSER
   Consortium.
CR ANDRITSOS P, 2001, 9 IEEE INT WORKSH PR, V9, P157
   Bellay B, 1998, J SOFTW MAINT-RES PR, V10, P305, DOI 10.1002/(SICI)1096-908X(199809/10)10:5<305::AID-SMR175>3.0.CO;2-7
   Beyer D, 2005, IEEE T SOFTWARE ENG, V31, P137, DOI 10.1109/TSE.2005.23
   BREUGELMANS M, TESTQ EXPLORING STRU
   Brito KD, 2008, J UNIVERS COMPUT SCI, V14, P1256
   BUSS E, 1991, C CTR ADV STUD COLL, P55
   CHEN YF, 1990, IEEE T SOFTWARE ENG, V16, P325, DOI 10.1109/32.48940
   CHEN YR, 11 IEEE INT C SOFTW
   Czeranski J, 2000, SEVENTH WORKING CONFERENCE ON REVERSE ENGINEERING - PROCEEDINGS, P197, DOI 10.1109/WCRE.2000.891467
   Czernuszewicz R.S., 2000, PORPHYRIN HDB, V7, P293
   Ducasse S, 2005, IEEE T SOFTWARE ENG, V31, P75, DOI 10.1109/TSE.2005.14
   Ducasse S, 2003, J SOFTW MAINT EVOL-R, V15, P345, DOI 10.1002/smr.279
   DUCASSE S, INT S CONSTR SOFTW E
   Ebert J., 1999, Sixth Working Conference on Reverse Engineering (Cat. No.PR00303), P89, DOI 10.1109/WCRE.1999.806950
   EBERT J, 1998, GUPRO GENERISCHE UMG
   Ebert J., 2002, Electronic Notes in Theoretical Computer Science, V72, P47
   Eichberg M, 2005, PROC IEEE INT CONF S, P315
   Fahmy HM, 2001, 16TH ANNUAL INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING (ASE 2001), PROCEEDINGS, P51, DOI 10.1109/ASE.2001.989790
   Favre JM, 2004, 11TH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P204, DOI 10.1109/WCRE.2004.15
   Favre JM, 2001, PROG COMPREHEN, P233, DOI 10.1109/WPC.2001.921734
   Ferenc R, 2002, PROC IEEE INT CONF S, P172, DOI 10.1109/ICSM.2002.1167764
   Finnigan PJ, 1997, IBM SYST J, V36, P564, DOI 10.1147/sj.364.0564
   Gannod G. C., 1999, Sixth Working Conference on Reverse Engineering (Cat. No.PR00303), P77, DOI 10.1109/WCRE.1999.806949
   Gansner ER, 2000, SOFTWARE PRACT EXPER, V30, P1203, DOI 10.1002/1097-024X(200009)30:11<1203::AID-SPE338>3.0.CO;2-N
   Gorton I, 2005, PROC INT CONF SOFTW, P514
   GRISWOLD WG, 1995, J SYST SOFTWARE, V30, P99, DOI 10.1016/0164-1212(94)00119-8
   HOLT R, TUPLE ATTRIBUTE LANG
   HOLT R, 1999, SOFTWARE LANDSCAPE V
   Holt RC, 2000, SEVENTH WORKING CONFERENCE ON REVERSE ENGINEERING - PROCEEDINGS, P162, DOI 10.1109/WCRE.2000.891463
   JACKSON D, 2000, C FUT SOFTW ENG, P135
   JAHNKE J, 1999, THESIS U PADERBORN G
   Jin D, 2006, INT C PROGRAM COMPRE, P94, DOI 10.1109/ICPC.2006.30
   Kazman R, 1996, IEEE SYMPOSIUM ON INFORMATION VISUALIZATION '96, PROCEEDINGS, P21, DOI 10.1109/INFVIS.1996.559212
   KAZMAN R, CMUSEI2002TR034 SOFT
   KAZMAN R, 1999, J AUTOMATED SOFTWARE, V6, P107, DOI DOI 10.1023/A:1008781513258
   Kienle HM, 2003, FIFTH IEEE INTERNATIONAL WORKSHOP ON WEB SITE EVOLUTION THEME: ARCHITECTURE, PROCEEDINGS, P20, DOI 10.1109/WSE.2003.1234005
   Kienle HM, 2007, 4TH IEEE INTERNATIONAL WORKSHOP ON VISUALIZING SOFTWARE FOR UNDERSTANDING AND ANALYSIS, PROCEEDINGS, P159, DOI 10.1109/VISSOF.2007.4290718
   Knodel J, 2003, 10TH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P186, DOI 10.1109/WCRE.2003.1287249
   Koschke R, 2002, LECT NOTES COMPUT SC, V2269, P138
   Koschke R, 2003, J SOFTW MAINT EVOL-R, V15, P87, DOI 10.1002/smr.270
   Koschke R., 2000, PhD thesis
   KOSCHKE R, 2008, 10 WORKSH SOFTW REEN
   KOSCHKE R, 2 INT WORKSH ADV SOF
   Kullbach B, 1999, PROCEEDINGS OF THE THIRD EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, P42, DOI 10.1109/CSMR.1999.756681
   Lanza M, 2003, IEEE T SOFTWARE ENG, V29, P782, DOI 10.1109/TSE.2003.1232284
   Lanza M, 2003, 7 IEEE EUR C SOFTW M, P1
   Lethbridge T.C., 2004, Electronic Notes in Theoretical Computer Science, V94, P7
   Lungu M, 2006, 10TH EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, PROCEEDINGS, P183
   Martin J, 2000, SEVENTH WORKING CONFERENCE ON REVERSE ENGINEERING - PROCEEDINGS, P207, DOI 10.1109/WCRE.2000.891470
   MARTIN J, 1999, C CTR ADV STUD COLL, P83
   MARTIN J, 2001, 3 INT WORKSH WEB SIT, P126
   Moise DL, 2003, 10TH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P275, DOI 10.1109/WCRE.2003.1287258
   Moise DL, 2004, CSMR 2004: EIGHTH EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, PROCEEDINGS, P85, DOI 10.1109/CSMR.2004.1281409
   Moonen L, 2002, PROG COMPREHEN, P219, DOI 10.1109/WPC.2002.1021343
   Moonen L, 2001, EIGHTH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P13, DOI 10.1109/WCRE.2001.957806
   Muller H. A., 1993, Journal of Software Maintenance: Research and Practice, V5, P181, DOI 10.1002/smr.4360050402
   MULLER HA, 1986, THESIS RICE U HOUSTO
   Murphy G. C., 1996, ACM Transactions on Software Engineering and Methodology, V5, P262, DOI 10.1145/234426.234441
   OBRIEN L, 2001, CMUSEI2001TN015 CARN
   Ousterhout JK, 1998, COMPUTER, V31, P23, DOI 10.1109/2.660187
   PAL C, TECHNIQUE ILLUSTRATI
   Panas T, 2004, PROG COMPREHEN, P52, DOI 10.1109/WPC.2004.1311047
   PARNAS DL, 1979, IEEE T SOFTWARE ENG, V5, P128, DOI 10.1109/TSE.1979.234169
   REISS SP, 1990, IEEE SOFTWARE, V7, P57, DOI 10.1109/52.56450
   Riva C, 2002, SIXTH EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, PROCEEDINGS, P47, DOI 10.1109/CSMR.2002.995789
   Riva C, 2000, SEVENTH WORKING CONFERENCE ON REVERSE ENGINEERING - PROCEEDINGS, P42, DOI 10.1109/WCRE.2000.891451
   RIVA C, 2004, THESIS VIENNA U TECH
   Roubtsov S, 2007, SEVENTH IEEE INTERNATIONAL WORKING CONFERENCE ON SOURCE CODE ANALYSIS AND MANIPULATION, PROCEEDINGS, P155, DOI 10.1109/SCAM.2007.16
   Schäfer T, 2006, IEEE T SOFTWARE ENG, V32, P753, DOI 10.1109/TSE.2006.94
   Storey MA, 2005, PROG COMPREHEN, P181, DOI 10.1109/WPC.2005.38
   STOREY MA, 1998, THESIS SIMON FRASER
   Storey MAD, 1999, J VISUAL LANG COMPUT, V10, P245, DOI 10.1006/jvic.1999.0124
   Storey MAD, 1996, PROCEEDINGS OF THE THIRD WORKING CONFERENCE ON REVERSE ENGINEERING, P31, DOI 10.1109/WCRE.1996.558826
   STOREY MD, 1995, 11 IEEE INT C SOFTW, P275
   Synytskyy N, 2005, PROG COMPREHEN, P176, DOI 10.1109/WPC.2005.11
   Systä T, 2001, SOFTWARE PRACT EXPER, V31, P371, DOI 10.1002/spe.386
   SYSTA T, 2000, 4 EUR C SOFTW MAINT, P199
   SYSTA T, 2000, THESIS U TAMPERE FIN
   Telea A, 2002, PROG COMPREHEN, P3, DOI 10.1109/WPC.2002.1021303
   TELEA A, 2008, 4 ACM S SOFTW VIS SO, P67
   TILLEY SR, 1994, INT J SOFTW ENG KNOW, V4, P501, DOI 10.1142/S0218194094000246
   TILLEY SR, 1994, INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE, PROCEEDINGS, P336
   TILLEY SR, 1995, THESIS U VICTORIA
   TILLEY SR, 1993, 11 ACM INT C SYST DO, P325
   van den Brand M, 2009, EUR CON SFTWR MTNCE, P331, DOI 10.1109/CSMR.2009.19
   WASSERMAN AI, 1987, SIGPLAN NOTICES, V22, P131, DOI 10.1145/390012.24224
   Wermelinger Michel., 2008, MSR '08, P133, DOI 10.1145/1370750.1370783
   WHITNEY M, 1995, C CTR ADV STUD COLL, P262
   WONG K, 1995, IEEE SOFTWARE, V12, P46, DOI 10.1109/52.363166
   Wong K., 1998, The Rigi User's Manual - Version 5.4.4
   WONG K, 1999, THESIS U VICTORIA
   Yu YJ, 2008, WORK CONF REVERSE EN, P329, DOI 10.1109/WCRE.2008.13
   [No title captured]
   [No title captured]
NR 94
TC 33
Z9 39
U1 0
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD APR
PY 2010
VL 75
IS 4
BP 247
EP 263
DI 10.1016/j.scico.2009.10.007
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 580QR
UT WOS:000276464800005
DA 2024-07-18
ER

PT J
AU Eveleens, JL
   Verhoef, C
AF Eveleens, J. L.
   Verhoef, C.
TI Quantifying IT forecast quality
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Forecast; Estimation; Cone of uncertainty; Reference cone;
   Forecast-to-actual ratio; Estimating Quality Factor; IT portfolio
   management
ID SOFTWARE; VOLATILITY; ACCURACY; SIZE; CONE
AB In this article, we show how to quantify the quality of IT forecasts. First, we analyze two metrics previously proposed to analyze IT forecast data-Boehm's cone of uncertainty and DeMarco's Estimating Quality Factor. We show theoretical problems with the cone of uncertainty (for example, that the conical shape of Boehm's cone is not caused by improved estimation, but can also be found when estimation accuracy decreases), and generalize it as a family of distributions that predict IT forecasts on the basis of expected accuracy and predictive bias. With these, we support decision making by providing critical information on IT forecasting quality to IT governors. We illustrate that plotting forecast-to-actual ratios against a predicted distribution reveals potential biases, for instance political, involved with IT forecasting. We illustrate our approach by applying it to four real-world organizations (1824 projects, 12 287 forecasts, 1059+ million Euro). We show that the distribution of forecast to actual ratios vary between organizations in at least three dimensions: in accuracy of estimation, in the tendency of forecasts to converge to the actual over the life of the project, and in systematic bias toward over-and underestimation. Moreover, we illustrate how to use the information to enrich forecast information for decision making. Finally, we point out that systematic biases, if not accounted for, make meaningless often-quoted rates of project success. We Survey benchmarks related to forecasting and propose new benchmarks based on our extensive data. (C) 2009 Elsevier B.V. All rights reserved.
C1 [Eveleens, J. L.; Verhoef, C.] Vrije Univ Amsterdam, Dept Comp Sci, NL-1081 HV Amsterdam, Netherlands.
C3 Vrije Universiteit Amsterdam
RP Eveleens, JL (corresponding author), Vrije Univ Amsterdam, Dept Comp Sci, Boelelaan 1081A, NL-1081 HV Amsterdam, Netherlands.
EM laurenz@few.vu.nl; x@cs.vu.nl
FU Dutch joint Academic and Commercial Quality Research Development
   [638.004.405, 638.003.611]
FX This research received partial support by the Dutch joint Academic and
   Commercial Quality Research & Development acquard) program on Software
   Engineering Research under contract 638.004.405 EQUITY. Exploring
   Quantifiable Information Technology Yields and under contract
   638.003.611 Symbiosis: Synera of managing business-IT-alignment,
   IT-sourcing and off shoring success in society. Furthermore, we like to
   thank a number of organizations that will remain anonymous for kindly
   sharing their forecasting data with us. Also, we are grateful to our
   colleague Rob Peters for meticulously reviewing and commenting this
   article numerous times. Moreover, we thank Steve McConnell, George
   Tillmann, Magne Jorgensen, Brad Appleton, Nicholas Zvegintzov, our
   colleague Sandjai Bhulai and the anonymous reviewers for commenting this
   article. Finally, we are grateful to Todd Little of Landmark Graphics
   Corporation for his comments and providing one of the data sets that is
   used throughout this article.
CR [Anonymous], EXTR CHAOS
   [Anonymous], 1986, Software Engineering Metrics and Models
   [Anonymous], 1999, Concise Oxford English Dictionary, V10th
   [Anonymous], 2008, SOFTWARE ENG PRINCIP
   [Anonymous], SAGE U PAPERS SERIES
   Arkes HR, 2001, INT SER OPER RES MAN, V30, P495
   Armour PG, 2008, COMMUN ACM, V51, P13, DOI 10.1145/1325555.1325558
   AUGUSTINE NR, 1979, DEFENSE SYSTEMS MANA, V2, P50
   BERGERON F, 1992, INFORM MANAGE, V22, P239, DOI 10.1016/0378-7206(92)90026-C
   Boehm B.W., 1995, ANN SOFTWARE ENG, V1
   Boehm B, 2008, COMPUTER, V41, P32, DOI 10.1109/MC.2008.91
   Boehm BW., 1981, Software Engineering Economics
   Briand LC, 1999, P 21 INT C SOFTW ENG, DOI DOI 10.1145/302405.302647
   CANTOR M, 2006, ESTIMATION VARIANCE
   Chatfield C, 2001, INT SER OPER RES MAN, V30, P475
   CLASS R, 2006, COMMUNICATIONS ACM, V49
   Cohn M., 2005, Agile Estimating and Planning
   DAYANG, 2007, LECT NOTES COMPUTER, V4470
   DEMARCO T, 2003, TIMOTHY LISTER WALTZ
   DeMarco T, 1986, CONTROLLING SOFTWARE
   Eveleens JL, 2010, IEEE SOFTWARE, V27, P30, DOI 10.1109/MS.2009.154
   EVELEENS JL, QUANTIFYING IN PRESS
   Fairley D, 2002, IEEE SOFTWARE, V19, P61, DOI 10.1109/MS.2002.1049392
   FELLER W, 1948, ANN MATH STAT, V19, P177, DOI 10.1214/aoms/1177730243
   Fisz M., 1963, PROBABILITY THEORY M
   Flyvbjerg B., 2003, MEGAPROJECTS RISK AN
   Garmus David., 2001, AW INFORMAT
   GLASS R, 2005, IEEE SOFTWARE    MAY, P110
   Green, 2001, PRINCIPLES FORECASTI, P761
   Gryphon S, 2006, IEEE SOFTWARE, V23, P8
   Hartmann D., 2006, COMMUNICATION
   Harvey N., 2001, PRINCIPLES FORECASTI, P59
   JENKINS AM, 1984, INFORM MANAGE, V7, P73, DOI 10.1016/0378-7206(84)90012-0
   JOHNSON J, 2006, WHY WERE PROJECT FAI
   JORGENSEN M, 1995, IEEE T SOFTWARE ENG, V21, P674, DOI 10.1109/32.403791
   Jorgensen M, 2006, INFORM SOFTWARE TECH, V48, P297, DOI 10.1016/j.infsof.2005.07.002
   Jorgensen M, 2005, IEEE SOFTWARE, V22, P57, DOI 10.1109/MS.2005.73
   Jorgensen M, 2004, J SYST SOFTWARE, V70, P37, DOI 10.1016/S0164-1212(02)00156-5
   KAVOUSSANAKIS K, 2001, UKHEC REPORT SOFTWAR
   KEMERER CF, 1987, COMMUN ACM, V30, P416, DOI 10.1145/22899.22906
   Kitchenham B. A., 2001, IEE Proceedings-Software, V148, P81, DOI 10.1049/ip-sen:20010506
   Kulk GP, 2008, SCI COMPUT PROGRAM, V72, P136, DOI 10.1016/j.scico.2008.04.003
   KULK GP, QUANTIFYING IN PRESS
   Laird L., 2006, Software Measurement and Estimation: A Practical Approach
   Laird L. M., 2006, IT Professional, V8, P40, DOI 10.1109/MITP.2006.149
   LARANJEIRA LA, 1990, IEEE T SOFTWARE ENG, V16, P510, DOI 10.1109/32.52774
   LEDERER AL, 1990, MIS QUART, V14, P159, DOI 10.2307/248774
   LISTER T, 2002, BECOMING ESTIMATOR I
   Little T, 2006, IEEE SOFTWARE, V23, P48, DOI 10.1109/MS.2006.82
   Little T, 2005, IEEE SOFTWARE, V22, P28, DOI 10.1109/MS.2005.60
   Lum Karen., 2003, Handbook for Software Cost Estimation
   McConnell S., 2006, Software Estimation: Demystifying the Black Art
   McConnell S., 1996, Rapid Development: Taming Wild Software Schedules
   MUJTABA MS, 1994, ENTERPRISE MODELING
   Myrtveit I, 1999, IEEE T SOFTWARE ENG, V25, P510, DOI 10.1109/32.799947
   PESCIO C, 2007, REALISTIC USEFUL EST
   Phan Dien., 1998, COMPUTERWORLD, V22, P95
   PUTMAN LH, 1992, YOURDON PRESS COMPUT
   Putnam L., 1979, ESTIMATING SOFTWARE
   PUTNAM LH, 1978, IEEE T SOFTWARE ENG, V4, P345, DOI 10.1109/TSE.1978.231521
   PUTNAM LH, 1976, P IEEE COMPCON 76 FA, P138
   Sauer C, 2007, COMMUN ACM, V50, P79, DOI 10.1145/1297797.1297801
   SHELLEY CC, 1993, T INFORM COMMUNICATI, V4
   Shepperd M, 1997, IEEE T SOFTWARE ENG, V23, P736, DOI 10.1109/32.637387
   Sommerville I., 2004, Software Engineering
   *STAND GROUP INT I, 1999, CHAOS REC SUCC
   *STAND GROUP INT I, 1994, CHAOS
   Stensrud E, 2003, EMPIR SOFTW ENG, V8, P139, DOI 10.1023/A:1023010612345
   TOCKEY S, 2005, RETURN SOFTWARE
   Verhoef C, 2007, SCI COMPUT PROGRAM, V67, P247, DOI 10.1016/j.scico.2007.01.010
   VOGELEZANG F, 2007, INT WORKSH SOFTW MEA
   WEINBERG GM, 1974, HUM FACTORS, V16, P70, DOI 10.1177/001872087401600108
   YOURDON, 2006, TEN MOST IMPORTANT I
   Zvegintzov N, 1998, IEEE SOFTWARE, V15, P93, DOI 10.1109/52.663792
NR 74
TC 18
Z9 18
U1 0
U2 8
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV
PY 2009
VL 74
IS 11-12
BP 934
EP 988
DI 10.1016/j.scico.2009.09.005
PG 55
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Social Science Citation Index (SSCI)
SC Computer Science
GA 533IX
UT WOS:000272818200003
OA Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Mäkelä, S
   Leppänen, V
AF Makela, Sami
   Leppanen, Ville
TI Client-based cohesion metrics for Java programs
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Metrics; Cohesion; Refactoring; Design patterns; Java
ID SUITE
AB One purpose of software metrics is to measure the quality of programs. The results can be for example used to predict maintenance costs or improve code quality. An emerging view is that if software metrics are going to be used to improve quality, they must help in finding code that should be refactored. Often refactoring or applying a design pattern is related to the role of the class to be refactored. In client-based metrics, a project gives the class a context. These metrics measure how a class is used by other classes in the context. We present a new client-based metric LCIC (Lack of Coherence in Clients), which analyses if the class being measured has a coherent set of roles in the program. Interfaces represent the roles of classes. If a class does not have a coherent set of roles, it should be refactored, or a new interface should be defined for the class.
   We have implemented a tool for measuring the metric LCIC for Java projects in the Eclipse environment. We calculated LCIC values for classes of several open source projects. We compare these results with results of other related metrics, and inspect the measured classes to find out what kind of refactorings are needed. We also analyse the relation of different design patterns and refactorings to our metric. Our experiments reveal the usefulness of client-based metrics to improve the quality of code. (C) 2009 Elsevier B.V. All rights reserved.
C1 [Makela, Sami; Leppanen, Ville] Univ Turku & TUCS, Dept Informat Technol, Turku 20014, Finland.
C3 University of Turku
RP Mäkelä, S (corresponding author), Univ Turku & TUCS, Dept Informat Technol, Turku 20014, Finland.
EM sajuma@utu.fi; ville.leppanen@it.utu.fi
OI Leppanen, Ville/0000-0001-5296-677X
CR [Anonymous], 1997, Object-oriented software construction
   [Anonymous], PATTERNS JAVA
   [Anonymous], Eclipse Metrics plug-in
   BEYER D, 2006, P 28 INT C SOFTW ENG, P807
   BEYER D, 2006, P 10 INT WORKSH NEW, P1
   BOIS BD, 2003, P INT WORKSH EV LARG, P37
   Briand L. C., 1998, Empirical Software Engineering, V3, P65, DOI 10.1023/A:1009783721306
   Briand L. C., 1993, Proceedings. Conference on Software Maintenance 1993. CSM-93 (Cat. No.93CH3360-5), P88, DOI 10.1109/ICSM.1993.366952
   BRIAND LC, 1994, CSTR3301 U MAR DEP C
   Brown WH., 1998, AntiPatterns: refactoring software, architectures, and projects in crisis
   Chae HS, 2000, SOFTWARE PRACT EXPER, V30, P1405, DOI 10.1002/1097-024X(200010)30:12<1405::AID-SPE330>3.0.CO;2-3
   CHIDAMBER SR, 1994, IEEE T SOFTWARE ENG, V20, P476, DOI 10.1109/32.295895
   CHIDAMBER SR, 1991, SIGPLAN NOTICES, V26, P197
   Constantine LarryL., 1979, Structured Design
   Eichberg M, 2006, 10TH EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, PROCEEDINGS, P111
   Fowler M., 2018, Refactoring: Improving the Design of Existing Code
   Gamma E., 1994, Design patterns: Elements of reusable object-oriented software
   Hajiyev E, 2006, LECT NOTES COMPUT SC, V4067, P2
   Henderson-Sellers B., 1996, Object-Oriented Metrics, measures of complexity
   JAMES M, 1995, ACM SIGSOFT S SOFTW, P259
   Keller R. K., 1999, Proceedings of the 1999 International Conference on Software Engineering (IEEE Cat. No.99CB37002), P226, DOI 10.1109/ICSE.1999.841012
   Lanza Michele, 2006, Objectoriented metrics in practice: using software metrics to characterize, evaluate, and improve the design of object-oriented systems
   MAKELA S, 2007, P 5 INT S PRINC PRAC, P51
   MAKELA S, 2007, COMPSAC 2007, V2, P743
   Martin Michael., 2005, OOPSLA '05: Proceedings of the 20th annual ACM SIGPLAN conference on Object oriented programming systems languages and applications, P365
   OCONNOR A, 2005, ECLIPSE 05, P16
   OTT L, 1993, P IEEE CS INT METR S, P78
   RITTINGER J, 2007, P BTW C DAT BUS TECH, P617
   Simon F, 2001, FIFTH EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, PROCEEDINGS, P30, DOI 10.1109/CSMR.2001.914965
   Streckenbach M, 2004, ACM SIGPLAN NOTICES, V39, P315, DOI 10.1145/1035292.1029003
   Whaley J, 2005, LECT NOTES COMPUT SC, V3780, P97
NR 31
TC 11
Z9 12
U1 1
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR 1
PY 2009
VL 74
IS 5-6
SI SI
BP 355
EP 378
DI 10.1016/j.scico.2009.01.005
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 436CT
UT WOS:000265390900007
DA 2024-07-18
ER

PT J
AU Refsdal, A
   Stolen, K
AF Refsdal, Atle
   Stolen, Ketil
TI Extending UML sequence diagrams to model trust-dependent behavior with
   the aim to support risk analysis
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Trust modeling; Risk analysis; Sequence diagrams
ID METHODOLOGY; LOGIC
AB UML sequence diagrams are intuitively simple and can be understood by most stakeholders, including end-users, decision makers, engineers and other parties involved in a risk analysis. Building on UML sequence diagrams and trying to maintain their intuitive simplicity, we propose a language for modeling systems where the trust considerations of actors play a major role. Trust considerations are integrated with behavioral descriptions in order to facilitate analysis of the trust considerations of the actors, as well as their resulting behavior. We claim that our language allows trust dependent behavior to be described at a level of abstraction suitable for communication between different groups of stakeholders in a risk analysis situation. Furthermore, we argue that the increased expressiveness is required to facilitate the kind of analysis necessary to properly weigh and treat trust dependent risk behavior. (C) 2008 Elsevier B.V. All rights reserved.
C1 [Refsdal, Atle] SINTEF, ICT, N-0314 Oslo, Norway.
   Univ Oslo, Dept Informat, N-0316 Oslo, Norway.
C3 SINTEF; University of Oslo
RP Refsdal, A (corresponding author), SINTEF, ICT, POB 124 Blindern, N-0314 Oslo, Norway.
EM Atle.Refsdal@sintef.no; Ketil.Stolen@sintef.no
FU Research Council of Norway [IKT-2010, 15295/431, 164382/V30]
FX The research on which this paper reports has been carried out within the
   context of the IKT-2010 project SARDAS (15295/431)and the IKT SOS
   project ENFORCE (164382/V30), both funded by the Research Council of
   Norway. Thanks to all the members of the ENFORCE project and the SARDAS
   project for comments on this work.
CR BRAENDELAND G, 2006, P QUAL PROT QOP, P11
   BURROWS M, 1990, ACM T COMPUT SYST, V8, P18, DOI [10.1145/77648.77649, 10.1145/74851.74852]
   den Braber F, 2005, J CASES INF TECHNOL, V7, P110, DOI 10.4018/jcit.2005070107
   Gambetta Diego, 2000, Trust: Making and breaking cooperative relations, V2000, P213, DOI 10.2307/2234217
   Giorgini P, 2004, LECT NOTES COMPUT SC, V2995, P176
   HAUGEN O, 2005, J SOFTWARE SYSTEMS M, V22, P349
   Josang A, 2005, LECT NOTES COMPUT SC, V3477, P93
   Josang A, 2001, INT J UNCERTAIN FUZZ, V9, P279, DOI 10.1016/S0218-4885(01)00083-1
   JOSANG A, 2004, P AUSTR INF SEC WORK, P63
   JOSANG A, 2007, PROBABILISTIC LOGIC, P101
   LYSEMOSE T, 2007, A1209 SINTEF ICT ENF
   *OBJ MAN GROUP, 2006, UML 2 1 SUP SPEC
   Refsdal A, 2005, LECT NOTES COMPUT SC, V3829, P32
   Refsdal A, 2006, LECT NOTES COMPUT SC, V4037, P138
   Runde R. K., 2005, Nordic Journal of Computing, V12, P157
   YANNIS C, 2002, P TEL CAR DEL TICD, P115
NR 16
TC 5
Z9 7
U1 1
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 1
PY 2008
VL 74
IS 1-2
SI SI
BP 34
EP 42
DI 10.1016/j.scico.2008.09.003
PG 9
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 386PX
UT WOS:000261896200005
OA Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Lanotte, R
   Maggiolo-Schettini, A
   Milazzo, P
   Troina, A
AF Lanotte, Ruggero
   Maggiolo-Schettini, Andrea
   Milazzo, Paolo
   Troina, Angelo
TI Design and verification of long-running transactions in a timed
   framework
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Hierarchical timed automata; Long-running transactions; Compensations;
   Model checking
ID WEB; FOUNDATIONS; LANGUAGE; YAWL
AB Long-running transactions consist of tasks which may be executed sequentially and in parallel, may contain subtasks, and may require to be completed before a deadline. These transactions are not atomic and, in case of executions which cannot be completed, a compensation mechanism must be provided.
   In this paper we develop a model of Communicating Hierarchical Timed Automata suitable to describe the mentioned aspects in a framework where also time is taken into account. We develop the patterns for composing long-running transactions sequentially, in parallel or by nesting. The correct compensation of a composed long-running transaction is preserved by these composition patterns.
   The automaton-theoretic approach allows the verification of properties by model checking. As a case study, we model and analyse an example of e-commerce application described in terms of long-running transactions. (C) 2008 Elsevier B.V. All rights reserved.
C1 [Troina, Angelo] Univ Turin, Dipartimento Informat, I-10149 Turin, Italy.
   [Lanotte, Ruggero] Politiche & Informat Univ Insubria, Dipartimento Sci Cultura, I-22100 Como, Italy.
   [Maggiolo-Schettini, Andrea; Milazzo, Paolo] Univ Pisa, Dipartimento Informat, I-56127 Pisa, Italy.
C3 University of Turin; University of Insubria; University of Pisa
RP Troina, A (corresponding author), Univ Turin, Dipartimento Informat, Corso Svizzera 185, I-10149 Turin, Italy.
EM ruggero.lanotte@uninsubria.it; maggiolo@di.unipi.it;
   milazzo@di.unipi.it; troina@di.unito.it
RI Milazzo, Paolo/AAD-3143-2021; Troina, Angelo/H-2985-2012
OI Lanotte, Ruggero/0000-0002-3335-234X
CR ALUR R, 1994, THEORETICAL COMPUTER, V126, P235
   Alur R., 1999, LNCS, V1644, P169
   Amnell T., 2001, P 4 SUMMER SCH MODEL, P99, DOI [10.1007/3- 540-45510- 8_4, DOI 10.1007/3-540-45510-8_4]
   Bocchi L, 2004, LECT NOTES COMPUT SC, V2984, P194
   BOCCHI L, 2006, LECT NOTES COMPUTER, V4037, P124
   Brogi A., 2004, Electronic Notes in Theoretical Computer Science, V105, P73, DOI DOI 10.1016/J.ENTCS.2004.05.007
   Brogi A, 2006, LECT NOTES COMPUT SC, V4184, P107
   BRUNI R, 2005, POPL, P209
   Butler M, 2005, LECT NOTES COMPUT SC, V3525, P133
   Butler M, 2004, LECT NOTES COMPUT SC, V2949, P87
   David A, 2002, LECT NOTES COMPUT SC, V2306, P218
   DAVID A, 2001, BRICS TECHNICAL REPO
   DAVID A, 2003, THESIS DEP INFORM TE
   Garcia-Molina H., 1987, ACM SIGMOD Record, P249, DOI DOI 10.1145/38714.38742
   Hamadi R., 2003, Proceedings of the 14th Australasian database conference, V17, P191
   Houston I, 2003, SOFTWARE PRACT EXPER, V33, P351, DOI 10.1002/spe.512
   Koshkina M., 2004, SIGSOFT Software Engineering Notes, V29, P1, DOI DOI 10.1145/1022494.1022526
   Laneve C, 2005, LECT NOTES COMPUT SC, V3705, P182, DOI 10.1007/11580850_11
   Laneve C, 2005, LECT NOTES COMPUT SC, V3441, P282
   Lanotte R, 2006, LECT NOTES COMPUT SC, V4037, P108
   Lucchi R, 2007, J LOGIC ALGEBR PROGR, V70, P96, DOI 10.1016/j.jlap.2006.05.007
   Mazzara M, 2005, LECT NOTES COMPUT SC, V3454, P1
   PLOTKIN GD, 1981, FM19 DAIMI AARH U
   Pu GG, 2006, ELECTRON NOTES THEOR, V151, P33, DOI 10.1016/j.entcs.2005.07.035
   Pu GG, 2006, LECT NOTES COMPUT SC, V4037, P251
   van der Aalst WMP, 2005, INFORM SYST, V30, P245, DOI 10.1016/j.is.2004.02.002
   Viroli M., 2004, Electronic Notes in Theoretical Computer Science, V105, P51, DOI DOI 10.1016/J.ENTCS.2004.05.008
   Yovine S., 1997, International Journal on Software Tools for Technology Transfer, V1, P123, DOI 10.1007/s100090050009
   ESCI SPECIFICATION V
   BPEL SPECIFICATIONS
NR 30
TC 10
Z9 11
U1 0
U2 4
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 1
PY 2008
VL 73
IS 2-3
BP 76
EP 94
DI 10.1016/j.scico.2008.07.001
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 369MW
UT WOS:000260699600002
DA 2024-07-18
ER

PT J
AU Zhao, T
   Baker, J
   Hunt, J
   Noble, J
   Vitek, J
AF Zhao, Tian
   Baker, Jason
   Hunt, James
   Noble, James
   Vitek, Jan
TI Implicit ownership types for memory management
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE real-time Java; RTSJ; type systems; memory management; ownership types
ID JAVA
AB The Real-time Specification for Java (RTSJ) introduced a range of language features for explicit memory management. While the RTSJ gives programmers fine control over memory use and allows linear allocation and constant-time deallocation, the RTSJ relies upon dynamic runtime checks for safety, making it unsuitable for safety critical applications. We introduce ScopeJ, a statically-typed, multi-threaded, object calculus in which scopes are first class constructs. Scopes reify allocation contexts and provide a safe alternative to automatic memory management. Safety follows from the use of an ownership type system that enforces a topology on run-time patterns of references. ScopeJ's type system is novel in that ownership annotations are implicit. This substantially reduces the burden for developers and increases the likelihood of adoption. The notion of implicit ownership is particularly appealing when combined with pluggable type systems, as one can apply different type constraints to different components of an application depending on the requirements without changing the source language. In related work we have demonstrated the usefulness of our approach in the context of highly-responsive systems and stream processing. Published by Elsevier B.V.
C1 [Zhao, Tian] Univ Wisconsin, Milwaukee, WI 53201 USA.
   [Hunt, James] Alcas GmbH, Karlsruhe, Germany.
   [Noble, James] Victoria Univ, Wellington, New Zealand.
   [Baker, Jason; Vitek, Jan] Purdue Univ, W Lafayette, IN 47907 USA.
C3 University of Wisconsin System; University of Wisconsin Milwaukee;
   Victoria University Wellington; Purdue University System; Purdue
   University
RP Vitek, J (corresponding author), Univ Wisconsin, Milwaukee, WI 53201 USA.
EM tzhao@uwm.edu; jason.baker0@gmail.com; jjh@aicas.com; kjx@mcs.vuw.ac.nz;
   jv@cs.purdue.edu
RI Vitek, Jan/J-9051-2014
OI Noble, James/0000-0001-9036-5692
CR ALDRICH J, 2004, P EUR C OBJ OR PROGR, P1
   ANDREAE C, 2006, P 21 ANN ACM SIGPLAN, P57
   ANDREAE C, 2006, P EUR C OBJ OR PROGR, P124
   Andreae C, 2007, REAL-TIME SYST, V37, P1, DOI 10.1007/s11241-007-9024-3
   [Anonymous], 2007, 302 JSR
   AUERBACH J, 2008, P ACM C LANG COMP TO
   BANERJEE A, 2002, C REC ACM S PRINC PR, P166
   BOKOWSKI B, 1999, P 14 ANN ACM SIGPLAN, P171
   Bollella Greg., 2000, REAL TIME SPECIFICAT
   BOYAPATI C, 2000, P ACM C PROGR LANG D, P324
   BOYLAND J, 2001, P 2001 EUR C OBJ OR, P2
   CHIN WN, 2004, P ACM C PROGR LANG D, P243
   Christiansen Morten V., 1998, SAFE REGION BASED ME
   CLARKE D, 2001, P ACM C OBJ OR PROGR, P53
   Clarke D., 2003, P ACM C OBJ OR PROGR, P374
   Clarke D, 2002, THESIS U NEW S WALES
   CLARKE D, 2002, P ACM C OBJ OR PROGR, P292
   CLARKE DG, 1998, P 13 ACM SIGPLAN C O, P48, DOI DOI 10.1145/286936.286947
   DIETL W, 2007, P EUR C OBJ ORI PROG, P28
   Ernst D., 2005, OOPSLA, P211, DOI [DOI 10.1145/1103845.1094828, 10.1145/1094811.1094828, DOI 10.1145/1094811.1094828]
   GAY D, 2001, P ACM C PROGR LANG D, P70
   GROSSMAN D, 2003, ACM WORKSH TYP LANG, P13
   GROSSMAN D, 2002, P ACM C PROGR LANG D, P282, DOI DOI 10.1145/512529.512563
   Grothoff C, 2007, ACM T PROGR LANG SYS, V29, DOI 10.1145/1286821.1286823
   HALLENBERG N, 2002, P ACM C PROGR LANG D, P141
   HOGG J, 1999, P ACM C OBJ OR PROGR, P271
   Igarashi A, 2001, ACM T PROGR LANG SYS, V23, P396, DOI 10.1145/503502.503505
   NOBLE J, 1998, P 12 EUR C OBJ OR PR, P158
   PALACZ K, 2003, P EUR C OBJ OR PROGR, P378
   Pizlo F, 2004, SEVENTH IEEE INTERNATIONAL SYMPOSIUM ON OBJECT-ORIENTED REAL-TIME DISTRIBUTED COMPUTING, PROCEEDINGS, P101, DOI 10.1109/ISORC.2004.1300335
   Pizlo F, 2006, REAL TIM SYST SYMP P, P35, DOI 10.1109/RTSS.2006.9
   POTANIN A, 2004, P WORKSH FORM TECHN
   POTANIN A, 2006, P ACM C OBJ OR PROGR, P311
   Spring J.H., 2007, Proceedings of the 22nd annual ACM SIGPLAN conference on Object-oriented programming systems and applications, OOPSLA '07, P211, DOI DOI 10.1145/1297027.1297043
   Spring J.H., 2007, Proceedings of the 3rd USENIX International Conf. on Virtual Execution Environments (VEE'07). (San Diego, CA, P191, DOI DOI 10.1145/1254810.1254837
   Swamy N, 2006, SCI COMPUT PROGRAM, V62, P122, DOI 10.1016/j.scico.2006.02.003
   Tofte M, 1997, INFORM COMPUT, V132, P109, DOI 10.1006/inco.1996.2613
   Tofte M., 1994, Conference Record of POPL '94: 21st ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P188, DOI 10.1145/174675.177855
   WRIGSTAD T, 2007, J OBJECT TECHNOLOGY
   YATES BN, 1999, THESIS U OREGON
   YI L, 2006, P EUR C OBJ OR PROGR, P99
   Zhao T, 2006, J FUNCT PROGRAM, V16, P83, DOI 10.1017/S0956796805005691
   Zhao T, 2004, REAL TIM SYST SYMP P, P241, DOI 10.1109/REAL.2004.51
NR 43
TC 12
Z9 14
U1 0
U2 4
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAY 1
PY 2008
VL 71
IS 3
BP 213
EP 241
DI 10.1016/j.scico.2008.04.001
PG 29
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 322VD
UT WOS:000257402500003
OA hybrid
DA 2024-07-18
ER

PT J
AU Banach, R
   Poppleton, M
   Jeske, C
   Stepney, S
AF Banach, R.
   Poppleton, M.
   Jeske, C.
   Stepney, S.
TI Engineering and theoretical underpinnings of retrenchment
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Review
DE refinement; retrenchment; simulation; requirements engineering; model
   evolution; digital redesign; mondex purse
ID PROGRAM-DEVELOPMENT; CLEAN TERMINATION; FAULT-TREES; REFINEMENT;
   SPECIFICATION; PURSE
AB Refinement is reviewed, highlighting in particular the distinction between its use as a specification constructor at a high level, and its use as an implementation mechanism at a low level. Some of its shortcomings as a specification constructor at high levels of abstraction are pointed out, and these are used to motivate the adoption of retrenchment for certain high level development steps. Basic properties of retrenchment are described, including a justification of the operation proof obligation, simple examples, its use in requirements engineering and model evolution, and simulation properties. The interaction of retrenchment with refinement notions of correctness is overviewed, as is a range of other technical issues. Two case study scenarios are presented. One is a simple digital redesign control theory problem, and the other is an overview of the application of retrenchment to the Mondex Purse development. (c) 2007 Elsevier B.V. All rights reserved.
C1 Univ Manchester, Sch Comp Sci, Manchester M13 9PL, Lancs, England.
   Univ Southampton, Sch Elect & Comp Sci, Southampton SO17 1BJ, Hants, England.
   Univ York, Dept Comp Sci, York YO10 5DD, N Yorkshire, England.
C3 University of Manchester; University of Southampton; University of York
   - UK
RP Banach, R (corresponding author), Univ Manchester, Sch Comp Sci, Manchester M13 9PL, Lancs, England.
EM banach@cs.man.ac.uk; mrp@ecs.soton.ac.uk; cj@cs.man.ac.uk;
   susan@cs.york.ac.uk
RI Stepney, Susan/AAF-2138-2020
OI Stepney, Susan/0000-0003-3146-5401
CR ABADI M, 1991, THEOR COMPUT SCI, V82, P253, DOI 10.1016/0304-3975(91)90224-P
   Abrial J-R., 1996, The B Book
   Abrial JR, 2005, LECT NOTES COMPUT SC, V3455, P222
   Abrial JR, 2003, LECT NOTES COMPUT SC, V2805, P51
   ABRIAL JR, 2007, IN PRESS B EVENT
   ALUR R, 1994, THEOR COMPUT SCI, V126, P183, DOI 10.1016/0304-3975(94)90010-8
   ALUR R, 2004, LNCS, V2993
   ALUR R, 1996, LNCS, V1066
   ANDREWS B, 1986, INTRO MATH LOGIC TYP
   [Anonymous], 2001, Specification and Development of Interactive Systems: FOCUS on Streams, Interfaces, and Refinement
   [Anonymous], 1992, TEMPORAL LOGIC REACT, DOI DOI 10.1007/978-1-4612-0931-7
   [Anonymous], 1998, PROGRAM DEV REFINEME
   [Anonymous], 1990, Predicate Calculus and Program Semantics
   [Anonymous], 2001, DISTINGUISHED DISSER
   [Anonymous], 2001, Java and the Java Virtual Machine: Definition, Verification, Validation
   [Anonymous], YCS2004371 U YORK
   [Anonymous], 1993, ENCY MATH APPL, DOI DOI 10.1017/CBO9780511551574
   [Anonymous], 1983, P 2 ANN ACM S PRINCI, DOI [10.1145/800221.806716, DOI 10.1145/800221.806716]
   [Anonymous], 1997, LOGIC STRUCTURE
   Back R.-J., 1998, Refinement Calculus
   Back R. J. R., 1996, Formal Aspects of Computing, V8, P324, DOI 10.1007/BF01214918
   BACK RJR, 1990, LECT NOTES COMPUT SC, V430, P42
   BACK RJR, 1981, J COMPUT SYST SCI, V23, P49, DOI 10.1016/0022-0000(81)90005-2
   BACK RJR, 1988, ACTA INFORM, V25, P593, DOI 10.1007/BF00291051
   BAJARD JC, 2000, P 4 C REAL NUMB COMP
   Banach R, 2005, LECT NOTES COMPUT SC, V3582, P382
   Banach R., 2003, Requirements Engineering, V8, P266, DOI 10.1007/s00766-002-0157-6
   Banach R, 2004, LECT NOTES COMPUT SC, V3219, P210
   Banach R., 1999, Formal Aspects of Computing, V11, P498, DOI 10.1007/s001650050056
   Banach R, 2000, ICFEM 2000: THIRD INTERNATIONAL CONFERENCE ON FORMAL ENGINEERING METHODS, PROCEEDINGS, P143, DOI 10.1109/ICFEM.2000.873814
   Banach R, 2000, ICFEM 2000: THIRD INTERNATIONAL CONFERENCE ON FORMAL ENGINEERING METHODS, PROCEEDINGS, P133, DOI 10.1109/ICFEM.2000.873813
   Banach R, 1998, LECT NOTES COMPUT SC, V1393, P129
   BANACH R, 2004, UNPUB COMPOSITION ME
   BANACH R, 2001, P IEEE MBRE01, P1
   BANACH R, 2002, UNPUB STRONGER COMPO
   BANACH R, 2006, UNPUB RETRENCHMENT S
   BANACH R, 2006, P IEEE NASA SEW3006
   BANACH R, 2006, IN PRESS P IEEE ISOL
   BANACH R, 2000, LNCS, V1878, P304
   BANACH R, 1999, P IFM 99 TAG GALL, P457
   Banach R, 2007, FUND INFORM, V77, P29
   Banach R, 2006, LECT NOTES COMPUT SC, V4166, P127
   BARROCA LM, 1992, COMPUT J, V35, P579, DOI 10.1093/comjnl/35.6.579
   BLIKLE A, 1981, ACTA INFORM, V16, P199, DOI 10.1007/BF00261259
   BOITEN E, 1998, P 3 BCS FACS N FORM
   BOITEN E, 1998, DISCRETE MATH THEOR, P45
   Börger E, 1999, LECT NOTES COMPUT SC, V1641, P1
   BORGER E, 2000, ARCHITECTURE DESIGN, P297
   Borger E., 2003, ABSTRACT STATE MACHI
   BORGER E, 1995, LNCS, V1012, P236
   BORGER E, 1995, SPECIFICATION VALIDA
   BORGER E, 1999, LNCS, V1523, P353
   BRINKSMA E, 1987, PROTOCOL SPECIFICATI, V6, P349
   Brinksma Ed., 1988, PROTOCOL SPECIFICATI, VVIII, P63
   BROY M, 1982, ACTA INFORM, V18, P47, DOI 10.1007/BF00625280
   BROY M, 1986, LNCS, V159, P1
   COLEMAN D, 1979, ACTA INFORM, V11, P195, DOI 10.1007/BF00289066
   Crocker D, 2004, PRACTICAL ELEMENTS OF SAFETY, P19
   de Roever Willem-Paul, 1998, Data Refinement Model-Oriented Proof methods and their Comparison
   de Roever Willem-Paul, 2001, Concurrency Verification: Introduction to Compositional and Noncompositional Proof Methods
   Derrick J., 2003, Formal Aspects of Computing, V15, P182, DOI 10.1007/s00165-003-0007-4
   DERRICK J, 1996, P FORTE 96, P501
   DIBENEDETTO MD, 2001, LNCS, V2034
   Dijkstra E., 1972, Notes on Structured Programming in Structured Programming
   DOORNBOS H, 1994, P PROCOMET94 IFIP, P357
   DUNNE S, 1998, P 3 BCS FACS N FORM
   DUNNE S, 2001, CASE GENERAL CORRECT
   DUNNE SE, 2001, P 5 IR WORKSH FORM M
   EHRIG H, 1994, THEOR COMPUT SCI, V135, P221, DOI 10.1016/0304-3975(94)90110-4
   EHRIG H, 1990, FUNDAMENTALS ALGEBRA, V2
   Ehrig Hartmut., 1985, Fundamentals of algebraic specification, V1
   Fiadeiro JL, 1997, SCI COMPUT PROGRAM, V28, P111, DOI 10.1016/S0167-6423(96)00025-1
   Fitzgerald J., 1998, Modelling Systems: Practical Tools and Techniques for Software Development, V1st
   FLEURIOT J, 442 CAMB U COMP LAB
   FLEURIOT J, 1999, THESIS CAMBRIDGE U C
   FRANCEZ N, 1990, LECT NOTES COMPUT SC, V458, P232
   GOGUEN JA, 1992, THEOR COMPUT SCI, V105, P217, DOI 10.1016/0304-3975(92)90302-V
   Harrison J., 1998, Theorem Proving with the Real Numbers
   HARRISON JR, 1996, THESIS CAMBRIDGE U C
   HARRISON JR, 408 CAMBR U COMP LAB
   Hayes I. J., 1993, SPECIFICATION CASE S
   HAYES IJ, 1995, FORM ASP COMPUT, V7, P430
   Hehner E.C.R., 1993, A Practical Theory of Programming
   HENTZINGER T, 1998, LNCS, V1386
   Hildebrand F.B., 1962, Advanced Calculus for Applications
   Hoare C. A. R., 1972, Acta Informatica, V1, P271, DOI 10.1007/BF00289507
   Hoare C. A. R., 1998, Unifying Theories of Programming
   *ISO, 2005, 15048 ISO
   Jeffreys H., 1956, Methods of Mathematical Physics, V3rd edn
   JESKE C, 2005, THESIS MANCHESTER U
   JESKE C, 2002, LNCS, V2335, P380
   JONES CB, 1983, ACM T PROGR LANG SYS, V5, P596, DOI 10.1145/69575.69577
   Jones CB., 1990, SYSTEMATIC SOFTWARE
   JONES CB, 1990, CASE STUDIES SYSTEMA
   KAMIN S, 1984, LECT NOTES COMPUT SC, V173, P317
   KATZ S, 1993, ACM T PROGR LANG SYS, V15, P337, DOI 10.1145/169701.169682
   KROGH B, 2000, LNCS, V1790
   Kuo BenjaminC., 1992, Digital Control Systems
   LAMPORT L, 1989, COMMUN ACM, V32, P32, DOI 10.1145/63238.63240
   LAMPORT L, 1994, ACM T PROGR LANG SYS, V16, P872, DOI 10.1145/177492.177726
   Lano K., 1996, SPECIFICATION B INTR
   LESTER D, 2003, LNCS, V2991, P259
   LISKOV BH, 1994, ACM T PROGR LANG SYS, V16, P1811, DOI 10.1145/197320.197383
   Liu SY, 1997, THIRD IEEE INTERNATIONAL CONFERENCE ON ENGINEERING OF COMPLEX COMPUTER SYSTEMS, PROCEEDINGS, P142, DOI 10.1109/ICECCS.1997.622305
   MAHONY B, 1992, THESIS QUEENSLAND U
   MALER O, 2003, LNCS, V2623
   MALER O, 1997, LNCS, V1201
   MEYER B, 1988, OBJECT ORIENTED CONS
   MIARKA R, 2000, LECT NOTES COMPUTER, V1878, P286
   MIKHAJLOVA A, 1997, LNCS, V1313, P82
   Morgan Carroll, 1994, Programming from specifications
   Morris J. M., 1998, Formal Aspects of Computing, V10, P76, DOI 10.1007/PL00003927
   MORRIS JM, 1987, SCI COMPUT PROGRAM, V9, P287, DOI 10.1016/0167-6423(87)90011-6
   MORRIS JM, 2000, UNPUB ACM T PROG LAN
   Muñoz C, 2005, LECT NOTES COMPUT SC, V3603, P195
   NEILSON DS, 1990, TECHNICAL MONOGRAPH, V101
   NELSON G, 1989, ACM T PROGR LANG SYS, V11, P517, DOI 10.1145/69558.69559
   Nielsen M., 1989, FORM ASP COMPUT, V1, P85
   OWE O, 1993, FORM ASP COMPUT, V3, P1
   Owe O., 1985, 89 U OSL I INF
   POPPLETON M, 1999, P 14 IEEE INT C AUT, P158
   POPPLETON M, 2002, LECT NOTES COMPUTER, V2272, P42
   POPPLETON MR, 2001, THESIS MANCHESTER U
   POPPLETON MR, 2000, P IWFM00
   *RODIN, 2004, RODIN PROJ RIG OP DE
   SAMBIN G, 1999, LECT NOTES COMPUTER, V1657, P194
   SAMBIN G, 1987, INTUITIONISTIC FORMA, P187
   Schellhorn G, 2001, J UNIVERS COMPUT SCI, V7, P952
   SCHELLHORN G, 1999, THESIS U ULM FAKULTA
   Schneider FredB., 1997, CONCURRENT PROGRAMMI
   SMITH G, 2000, P IEEE ACSCOO AUS CO, V22, P227
   Smith G., 2000, J UNIVERS COMPUT SCI, V6, P704
   SPIVEY JM, 1993, Z NOTATION REFERENCE
   Srinivas Y. V., 1995, Mathematics of Program Construction. Third International Conference, MPC '95 Proceedings, P399
   Stepney S, 1998, LECT NOTES COMPUT SC, V1493, P284, DOI 10.1007/BFb0056040
   STEPNEY S, 2000, PRG126 OXF U COMP LA
   STRULO B, 1996, LNCS, V967, P264
   SWARTOUT W, 1982, COMMUN ACM, V25, P438, DOI 10.1145/358557.358572
   VAANDRAGER FW, 1999, LNCS, V1569
   VANEIJK PHJ, 1989, FORMAL SPECIFICATION
   VONWRIGHT J, 1994, ACTA INFORM, V31, P105, DOI 10.1007/BF01192157
   WALDINGER R, 1998, SPECWARE LANGUAGE MA
   Wehrheim H, 2003, FORM METHOD SYST DES, V23, P143, DOI 10.1023/A:1024764232069
   Weihrauch K., 2000, INTRO COMPUTABLE ANA
   WIRTH N, 1971, COMMUN ACM, V14, P221, DOI 10.1145/362575.362577
   Woodcock J., 1996, Using Z: Specification, Refinement, and Proof
   Wordsworth J.B., 1996, SOFTWARE ENG B
   Workman G Franklin M., 1998, Digital Control of Dynamic Systems
   1991, DTI INFORM TECHNOLGY
NR 149
TC 40
Z9 42
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUL 1
PY 2007
VL 67
IS 2-3
BP 301
EP 329
DI 10.1016/j.scico.2007.04.002
PG 29
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 192AW
UT WOS:000248174100007
OA Green Accepted, Green Submitted
DA 2024-07-18
ER

PT J
AU Schmidt, DA
AF Schmidt, David A.
TI A calculus of logical relations for over- and underapproximating static
   analyses
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 11th International Static Analysis Symposium (SAS 2004)
CY AUG 26-28, 2004
CL Verona, ITALY
DE Galois connections; abstract interpretation; powerdomains;
   underapproximation; state-transition systems; Hennessy-Milner logic
ID ABSTRACT INTERPRETATION; STRONG PRESERVATION; GALOIS CONNECTIONS;
   REFINEMENT; SEMANTICS; SYSTEMS
AB Motivated by Dennis Dams' studies of over- and underapproximation of state-transition systems, we define a logical-relation calculus for Galois-connection building. The calculus lets us define overapproximating Galois connections in terms of lower powersets and underapproximating Galois connections in terms of upper powersets. Using the calculus, we synthesize Dams' most-precise over- and underapproximating transition systems and obtain proofs of their soundness and best precision as corollaries of abstract-interpretation theory. As a bonus, the calculus yields a logic that corresponds to the variant of Hennessy-Milner logic used in Dams' results. Following from a corollary, we have that Dams' most-precise approximations soundly validate most properties that hold true for the corresponding concrete system. These results bind together abstract interpretation and abstract model checking, as intended by Dams. (c) 2006 Elsevier B.V. All rights reserved.
C1 Kansas State Univ, Dept Comp & Informat Sci, Manhattan, KS 66506 USA.
   Ecole Polytech, Palaiseau, France.
C3 Kansas State University; Institut Polytechnique de Paris; Ecole
   Polytechnique
RP Schmidt, DA (corresponding author), Kansas State Univ, Dept Comp & Informat Sci, 234 Nichols Hall, Manhattan, KS 66506 USA.
EM schmidt@cis.ksu.edu
CR ABRAMSKY S, 1991, ANN PURE APPL LOGIC, V51, P1, DOI 10.1016/0168-0072(91)90065-T
   Abramsky S., 1990, Journal of Logic and Computation, V1, P5, DOI 10.1093/logcom/1.1.5
   [Anonymous], 1981, Lecture Notes in Computer Science, DOI [10.1007/BFb0017309, DOI 10.1007/BFB0017309]
   Baader F., 2003, DESCRIPTION LOGIC HD
   BACKHOUSE K, 2002, LNCS, V2386
   BLANCET B, 2002, LNCS, V2566
   BUNEMAN P, 1988, 7 ACM S PRINC DAT SY
   BURN GL, 1986, SCI COMPUT PROGRAM, V7, P249, DOI 10.1016/0167-6423(86)90010-9
   Clarke Edmund M., 2001, Model Checking
   Cousot P., 1992, Journal of Logic and Computation, V2, P511, DOI 10.1093/logcom/2.4.511
   COUSOT P, 1994, P IEEE INT C COMP LA
   Cousot P., 1977, C RECORD 1977 ACM S, P238
   Cousot P., 1979, 6 ACM S PRINCIPLES P, P269, DOI DOI 10.1145/567752.567778
   Dams D, 1997, ACM T PROGR LANG SYS, V19, P253, DOI 10.1145/244795.244800
   DAMS D, 2004, COMMUNICATION
   DAMS D, 1996, THESIS TU EINDHOVEN
   Davey B. A., 2002, INTRO LATTICES ORDER, V2nd, DOI DOI 10.1017/CBO9780511809088
   ERNE M, 1993, ANN NY ACAD SCI, V704, P103, DOI 10.1111/j.1749-6632.1993.tb52513.x
   Giacobazzi R, 2001, LECT NOTES COMPUT SC, V2126, P356
   Giacobazzi R, 2000, J ACM, V47, P361, DOI 10.1145/333979.333989
   GRUMBERG O, 2005, S PRINC PROGR LANG A
   GUNTER CA, 1992, THEOR COMPUT SCI, V103, P311, DOI 10.1016/0304-3975(92)90017-A
   HARTMANIS J, 1964, J INFORMATION CONTRO, V7, P485
   HECHT M, 1977, ANAL COMPUTER PROGRA
   HECKMANN R, 1990, LNCS, P177
   HECKMANN R, 1990, THESIS U SAARBRUCKEN
   HENNESSY M, 1985, J ACM, V32, P137, DOI 10.1145/2455.2460
   Hennessy Matthew, 1979, P 8 S MATH FDN COMP, V74, P108, DOI 10.1007/3-540-09526-8_8
   HUTH M, 2001, LNCS, P155
   Huth MRA, 2004, MATH STRUCT COMP SCI, V14, P469, DOI 10.1017/S0960129504004268
   Jones NeilD., 1995, HDB LOGIC COMPUTER S, V4, P527
   KELB P, 1994, MODEL CHECKING ABSTR
   Loiseaux C., 1995, Formal Methods in System Design, V6, P11, DOI 10.1007/BF01384313
   Milner R., 1989, Communication and concurrency
   MYCROFT A, 1986, LECT NOTES COMPUT SC, V217, P156
   NIELSON F, 1989, THEOR COMPUT SCI, V69, P117, DOI 10.1016/0304-3975(89)90091-1
   NIELSON F, 1999, PRINCIPLES PROGRAM A
   PASAREANU C, 2005, LNCS
   PLOTKIN GD, 1983, LECT NOTES
   Ranzato F, 2005, LECT NOTES COMPUT SC, V3440, P140
   Ranzato F, 2004, LECT NOTES COMPUT SC, V2986, P18
   SAGIV M, 1999, P 28 ACM POPL
   Schmidt D. A., 2002, LNCS, V2566, P246
   Schmidt DA, 2004, LECT NOTES COMPUT SC, V3148, P22
   SHMUELY Z, 1974, PAC J MATH, V54, P209, DOI 10.2140/pjm.1974.54.209
   SMYTH MB, 1978, J COMPUT SYST SCI, V16, P23, DOI 10.1016/0022-0000(78)90048-X
NR 46
TC 15
Z9 16
U1 0
U2 1
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 1
PY 2007
VL 64
IS 1
BP 29
EP 53
DI 10.1016/j.scico.2006.03.008
PG 25
WC Computer Science, Software Engineering
WE Conference Proceedings Citation Index - Science (CPCI-S); Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 118ES
UT WOS:000242925700003
DA 2024-07-18
ER

PT J
AU Clinger, WD
   Rojas, FV
AF Clinger, William D.
   Rojas, Fabio V.
TI Linear combinations of radioactive decay models for generational garbage
   collection
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE garbage collection; radioactive decay model
AB A program's distribution of object lifetimes is one of the factors that determines whether and how much it will benefit from generational garbage collection, and from what kind of generational collector. Linear combinations of radioactive decay models appear adequate for modelling object lifetimes in many programs, especially when the goal is to analyze the relative or theoretical performance of simple generational collectors.
   The boundary between models that favor younger-first generational collectors and models that favor older-first generational collectors is mathematically complex, even for highly idealized collectors. For linear combinations of radioactive decay models, non-generational collection is rarely competitive with idealized generational collection, even at that boundary. (c) 2006 Elsevier B.V. All rights reserved.
C1 Northeastern Univ, Boston, MA 02115 USA.
C3 Northeastern University
RP Clinger, WD (corresponding author), Northeastern Univ, 360 Huntington Ave, Boston, MA 02115 USA.
EM will@ccs.neu.edu; frojas@ccs.neu.edu
CR [Anonymous], 1964, HDB MATH FUNCTIONS F
   BAKER HG, 1993, SIGPLAN NOTICES, V28, P55, DOI 10.1145/152739.152747
   BARRETT DA, 1993, ACM SIGPLAN C PROGR, P187
   BLACKBURN SM, 2002, ACM C PROGR LANG DES, P153
   Clinger WD, 1997, ACM SIGPLAN NOTICES, V32, P97, DOI 10.1145/258916.258925
   CLINGER WD, 1994, ACM LISP POINTERS, V8, P128
   Detlefs David, 2004, P 4 INT S MEM MAN VA, DOI [10.1145/1029873.1029879, DOI 10.1145/1029873.1029879]
   Gabriel Richard P., 1985, Performance and evaluation of LISP systems
   HANSEN LT, 2002, INT C FUNCT PROGR IC, P247
   HANSEN LT, 2000, THESIS NE U
   HANSON DR, 1977, SOFTWARE PRACT EXPER, V7, P179, DOI 10.1002/spe.4380070206
   HAYES B, 1991, ACM SIGPLAN OBJ OR P, P33
   HUDSON RL, 1992, LECT NOTES COMPUT SC, V637, P388
   Jones R.E., 1996, Garbage Collection: Algorithms for Automatic Dynamic Memory Management
   LIEBERMAN H, 1983, COMMUN ACM, V26, P419, DOI 10.1145/358141.358147
   MOON DA, 1984, ACM S LISP FUNCT PRO, P235
   PRINTEZIS T, 2001, JAVA VIRTUAL MACHINE, P171
   SANSOM PM, 1993, C FUNCT PROGR LANG C, P106
   SELIGMANN J, 1995, P 1995 EUR C OBJ OR, P235
   Soman S., 2004, P 4 INT S MEMORY MAN, P49
   *STAND PERF EV COR, SPECJVM98
   Stefanovic D, 1999, ACM SIGPLAN NOTICES, V34, P370, DOI 10.1145/320385.320425
   STEFANOVIC D, INT S MEM MAN OCT 20, P137
   STEFANOVIC D, 1994, ACM C LISP FUNCT PRO, P43
   STEFANOVIC D, 2002, WORKSH MEM SYST PERF, P25
   Stefanovic Darko, 1999, THESIS U MASSACHUSET
   Thomas GeorgeB., 1968, Calculus and Analytical Geometry, V4th
   Ungar D., 1984, SIGPLAN Notices, V19, P157, DOI 10.1145/390011.808261
   WILSON PR, 1992, SPRINGER VERLAG LECT, V637
NR 29
TC 6
Z9 7
U1 1
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 1
PY 2006
VL 62
IS 2
BP 184
EP 203
DI 10.1016/j.scico.2006.02.005
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 075VM
UT WOS:000239913600006
OA Bronze
DA 2024-07-18
ER

PT J
AU Corradini, F
   Inverardi, P
   Wolf, AL
AF Corradini, F
   Inverardi, P
   Wolf, AL
TI On relating functional specifications to architectural specifications: A
   case study
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE software architectures; functional specification; formal methods;
   simulation testbed; verification; validation
AB Software architecture specifications are predominantly concerned with describing the component structure of systems and how the components interact behaviorally. They are increasingly part of standardized software development processes because they represent a system abstraction in which design choices relevant to the correctness of the final system are taken. Therefore, much of software architecture research has concentrated on specification and analysis, whereas little attention has been paid to formally relating architectural specifications to higher levels of specification, such as the system requirements. In this paper we present our progress toward addressing an instance of this problem, namely relating state-based software architecture specifications to high-level functional specifications. Our approach is to use an intermediate specification given in terms of a set of temporal logic properties to bridge the gap between the two levels of specifications. We describe our approach in the context of a particular case study, the AEGIS GeoServer Simulation Testbed system, showing how a compact functional specification of a critical behavioral property of the system can be used to validate three alternative architectural specifications of that system. (c) 2005 Elsevier B.V. All fights reserved.
C1 Univ Camerino, Dipartimento Matemat & Informat, I-62032 Camerino, Italy.
   Univ Aquila, Dipartimento Informat, I-67010 Coppito, Italy.
   Univ Colorado, Dept Comp Sci, Boulder, CO 80309 USA.
C3 University of Camerino; University of L'Aquila; University of Colorado
   System; University of Colorado Boulder
RP Univ Camerino, Dipartimento Matemat & Informat, I-62032 Camerino, Italy.
EM flavio.corradini@unicam.it; inverard@di.univaq.it;
   alexander.wolf@colorado.edu
CR Abowd G. D., 1995, ACM Transactions on Software Engineering and Methodology, V4, P319, DOI 10.1145/226241.226244
   Allen R., 1996, Proceedings of the 8th International Workshop on Software Specification and Design, P6, DOI 10.1109/IWSSD.1996.501142
   Allen R., 1997, ACM Transactions on Software Engineering and Methodology, V6, P213, DOI 10.1145/258077.258078
   [Anonymous], 1990, HDB THEORETICAL COMP
   [Anonymous], 2001, MODEL CHECKING
   Aquilani F, 2001, PERFORM EVALUATION, V45, P147, DOI 10.1016/S0166-5316(01)00035-9
   Bass Len, 2012, SEI S SOFTW
   BERNARDO M, 2003, LECT NOTES COMPUTER, V2804
   BERRY D, 2004, SIGSOFT SOFTWARE ENG, V29
   BERRY G, 1992, THEOR COMPUT SCI, V96, P217, DOI 10.1016/0304-3975(92)90185-I
   CASTRO J, 2001, SIGSOFT SOFTWARE ENG, V26, P49
   Compare D, 1999, SCI COMPUT PROGRAM, V33, P101, DOI 10.1016/S0167-6423(98)00006-9
   EMERSON EA, 1986, J ACM, V33, P151, DOI 10.1145/4904.4999
   GARLAN D, 1995, SOFTWARE ENG NOTES, V20, P63
   Hofmeister C., 2000, APPL SOFTWARE ARCHIT
   Inverardi P, 2000, ACM T SOFTW ENG METH, V9, P239, DOI 10.1145/352591.352593
   INVERARDI P, 1995, IEEE T SOFTWARE ENG, V21, P373, DOI 10.1109/32.385973
   Muccini H, 2004, IEEE T SOFTWARE ENG, V30, P160, DOI 10.1109/TSE.2004.1271170
   Nuseibeh B, 2001, COMPUTER, V34, P115, DOI 10.1109/2.910904
   Stafford J. A., 2001, COMPONENT BASED SOFT, P371
   Stafford JA, 2001, INT J SOFTW ENG KNOW, V11, P431, DOI 10.1142/S021819400100061X
   Uchitel S, 2004, ACM T SOFTW ENG METH, V13, P37, DOI 10.1145/1005561.1005563
   van Lamsweerde A, 2003, LECT NOTES COMPUT SC, V2804, P25
   van Lamsweerde A., 2000, Proceedings of the 2000 International Conference on Software Engineering. ICSE 2000 the New Millennium, P5, DOI 10.1109/ICSE.2000.870392
   Wermelinger M., 1998, IEE Proceedings-Software, V145, P130, DOI 10.1049/ip-sen:19982294
NR 25
TC 7
Z9 7
U1 1
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB
PY 2006
VL 59
IS 3
BP 171
EP 208
DI 10.1016/j.scico.2005.04.003
PG 38
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 000MY
UT WOS:000234467500001
DA 2024-07-18
ER

PT J
AU Lea, D
AF Lea, D
TI The java.util.concurrent synchronizer framework
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT Workshop on Concurrency and Synchronization in Java Programs
CY JUL 25-26, 2004
CL St Johns, CANADA
AB Most synchronizers (locks, barriers, etc.) in the J2SE 5.0 java.util.concurrent package are constructed using a small framework based on class AbstractQueued Synchronizer. This framework provides common mechanics for atomically managing synchronization state, blocking and unblocking threads, and queuing. The paper describes the rationale, design, implementation, usage, and performance of this framework. (c) 2005 Elsevier B.V. All rights reserved.
C1 SUNY Coll Oswego, Oswego, NY 13126 USA.
C3 State University of New York (SUNY) System; State University of New York
   (SUNY) - Oswego
RP SUNY Coll Oswego, Oswego, NY 13126 USA.
EM dl@oswego.edu
CR AGESEN O, 1999, ACM OOPSLA P
   Andrews G. R., 1991, Concurrent Programming: Principles and Practice
   BACON D, 1998, ACM PLDI P
   BUHR P, 1995, ACM COMPUTING SURVEY
   Craig T., 1993, Technical Report. Technical Report TR 93-02-02
   GAMMA E, 1996, DESIGN PATTERNS
   HOLMES D, 1999, THESIS MACQUAIRE U
   LADANMOZES E, 2004, P 18 ANN C DISTR COM
   MAGNUSSEN P, 1994, 8 INT PAR PROC S CAN
   MANSON J, 2005, ACM S PRINC PROGR LA
   MELLORCRUMMEY J, 1991, ACM T COMPUTER S FEB
   SCOTT M, 2001, 8 ACM S PRINC PRACT
   Sun Microsystems, 2002, MULT SOL OP ENV
   ZHANG H, 2004, Patent No. 6691304
NR 14
TC 31
Z9 40
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC
PY 2005
VL 58
IS 3
SI SI
BP 293
EP 309
DI 10.1016/j.scico.2005.03.007
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 986BR
UT WOS:000233424300002
OA Bronze
DA 2024-07-18
ER

PT J
AU Couch, A
   Sun, YZ
AF Couch, A
   Sun, YZ
TI On observed reproducibility in network configuration management
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE network and system administration; configuration management; software
   installation; software package management
AB A rigorous language for discussing the issue of configuration management is currently lacking. To this end, we develop a simple state machine model of configuration management. Observed behaviors comprise the state of a host and configuration processes accomplish state transitions. Using this language, we show that for one host in isolation and for some configuration processes, reproducibility of observed effect for a configuration process is a statically verifiable property of the process. Using configuration processes verified in this manner, we can efficiently identify latent preconditions that affect behavior among a population of hosts. Constructing configuration management tools with statically verifiable observed behaviors thus reduces the lifecycle cost of configuration management. (C) 2004 Elsevier B.V. All rights reserved.
C1 Tufts Univ, Medford, MA 02155 USA.
C3 Tufts University
RP Tufts Univ, Medford, MA 02155 USA.
EM couch@cs.tufts.edu; ysun@cs.tufts.edu
CR Anderson P, 2003, USENIX ASSOCIATION PROCEEDINGS OF THE SEVENTEENTH LARGE INSTALLATION SYSTEMS ADMINISTRATION CONFERENCE, P213
   ANDERSON P, 1994, P LISA SAN DIEG CA U, V8
   [Anonymous], TESTING IT OFF THE S
   [Anonymous], 1979, LAWS FORM
   Arbib MichaelA., 1968, Algebraic Theory of Machines, Languages, and Semigroups : Semiparametric Theory and Missing Data
   Bailey E., 1997, MAXIMUM RPM
   BLANKEDELMAN D, 2000, PERL SYSTEM ADM
   Burgess M, 2002, LECT NOTES COMPUT SC, V2506, P169
   Burgess M, 2003, SCI COMPUT PROGRAM, V49, P1, DOI 10.1016/j.scico.2003.08.001
   Burgess M, 1997, SOFTWARE PRACT EXPER, V27, P1083, DOI 10.1002/(SICI)1097-024X(199709)27:9<1083::AID-SPE126>3.0.CO;2-H
   BURGESS M, 2000, P LISA 14 NEW ORL LA
   BURGESS M, 1998, P LISA 12 BOST MA US
   BURGESS M, 1995, COMPUTING SYSTEMS, V8
   COLYR W, 1992, P LISA 6 LONG BEACH
   CONS L, 2002, P LISA 16 PHIL PA US
   COOPER M, 1992, P LISA 6 LONG BEACH
   Couch A, 2003, USENIX ASSOCIATION PROCEEDINGS OF THE SEVENTEENTH LARGE INSTALLATION SYSTEMS ADMINISTRATION CONFERENCE, P125
   Couch A, 2003, LECT NOTES COMPUT SC, V2867, P28
   COUCH A, 1999, P LISA 13 SEATTL WA
   COUCH A, 1996, P LISA 10 CHIC IL US
   COUCH A, 2000, P LISA 14 NEW ORL LA
   COUCH A, 2001, P LISA 15 SAN DIEG C
   COUCH A, 1997, P LISA 11 SAN DIEG C
   EVARD R, 1997, P LISA 11 SAN DIEG C
   FINKE J, 2000, P LISA 14 NEW ORL LA
   FINKE J, 2003, P LISA 17 SAN DIEG C, P195
   FURLANI JL, 1992, P LISA 6 LONG BEACH
   GALLO F, PENGUIN 3 00
   GOMES GMS, 2002, SEMIGROUPS ALGORITHM
   Grillet P., 1995, SEMIGROUPS INTRO STR
   HALPRIN G, SA BOK SYSTEMS ADM B
   HART J, 2002, P LISA 16 PHIL PA US
   HOLGATE M, 2001, P LISA 15 SAN DIEG C
   Howie J., 1976, An Introduction to Semigroup Theory
   Kanies L, 2003, USENIX ASSOCIATION PROCEEDINGS OF THE SEVENTEENTH LARGE INSTALLATION SYSTEMS ADMINISTRATION CONFERENCE, P115
   KEPHART JO, 2003, IEEE COMPUTER
   KOLSTAD R, SYSADMIN BOOK KNOWLE
   KOONEN T, 1999, TEST PROCESS IMPROVE
   LIBES D, 1994, EXPLORING EXPECT
   Ljapin E.S., 1963, SEMIGROUPS
   LOGAN M, 2002, P LISA 16 PHIL PA US
   MANHEIMER K, 1990, P LISA 4 COL SPRINGS
   MEYER B, 1990, INTRO THEORY PROGRAM, pCH9
   OETIKER T, 2001, P LISA 15 SAN DIEG C
   OSTERLUND R, 2000, P LISA 14 NEW ORL LA
   PATTERSON J, 2002, P LISA 16 PHIL PA US
   ROTH MD, 2003, P LISA 17 SAN DIEG C
   ROUILLARD JP, 1994, P LISA 8 SAN DIEG CA
   SANDNES FE, 2001, P LISA 15 SAN DIEG C
   SAPUNTZAKIS C, 2003, P LISA 17 SAN DIEG C
   TRAUGOTT S, 2002, P LISA 16 PHIL PA US
   TRAUGOTT S, 1998, P LISA 12 BOST MA US
   WANG YM, 2003, P LISA 17 SAN DIEG C
   WONG WC, 1993, P LISA 7 MONT CA USE
NR 54
TC 13
Z9 14
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV
PY 2004
VL 53
IS 2
BP 215
EP 253
DI 10.1016/j.scico.2004.04.002
PG 39
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 858DB
UT WOS:000224169400006
OA Bronze
DA 2024-07-18
ER

PT J
AU Mu, SC
   Bird, R
AF Mu, SC
   Bird, R
TI Theory and applications of inverting functions as folds
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE program derivation; program inversion; fold
ID PROGRAM INVERSION
AB This paper is devoted to the proof, applications, and generalisation of a theorem, due to Bird and de Moor, that gave conditions under which a total function can be expressed as a relational fold. The theorem is illustrated with three problems, all dealing with constructing trees with various properties. It is then generalised to give conditions under which the inverse of a partial function can be expressed as a relational hylomorphism. Its proof makes use of Doornbos and Backhouse's theory on well-foundedness and reductivity. Possible applications of the generalised theorem is discussed. (C) 2004 Elsevier B.V. All rights reserved.
C1 Univ Oxford, Programming Res Grp, Oxford OX1 3QD, England.
C3 University of Oxford
RP Univ Oxford, Programming Res Grp, Wolfson Bldg,Pks Rd, Oxford OX1 3QD, England.
EM richard.bird@comlab.ox.ac.uk
RI Mu, Shin-Cheng/ABA-7746-2020
OI Mu, Shin-Cheng/0000-0002-4755-601X
CR Abramov S, 2000, LECT NOTES COMPUT SC, V1837, P187
   [Anonymous], 1997, INT SERIES COMPUTER
   BACK RJR, 1993, SCI COMPUT PROGRAM, V20, P223, DOI 10.1016/0167-6423(93)90015-H
   BACKHOUSE RC, 1991, P IFIP TC2 WG2 1 WOR, P287
   BACKHOUSE RC, 1992, LECT NOTES COMPUTER, V755, P7
   Bird R, 2002, LECT NOTES COMPUT SC, V2297, P281
   Bird R. S., 1997, Journal of Functional Programming, V7, P441, DOI 10.1017/S0956796897002803
   CHEN W, 1990, SCI COMPUT PROGRAM, V15, P1, DOI 10.1016/0167-6423(90)90042-C
   CHUANG TR, 1993, C FUNCT PROGR LANG C
   Cormen Thomas H., 2001, INTRO ALGORITHMS
   CURTIS S, 1995, THESIS OXFORD U
   de Moor O, 2000, LECT NOTES COMPUT SC, V1816, P371
   DIJKSTRA EW, 1978, EWD671 EINDH U TECHN
   DOOMBOOS H, 1995, LECT NOTES COMPUTER, V947, P242
   DOOMBOS H, 1996, REDUCTIVITY SCI COMP, V26, P217
   DOOMBOS H, 1996, THESIS EINDHOVEN U T
   GIBBONS J, 1993, 71 U AUCKL U AUCKL
   GIBBONS J, 2001, ELECT NOTES THEORETI
   Gries D., 1981, The Science of Programming, DOI [10.1007/978-1-4612-5983-1, DOI 10.1007/978-1-4612-5983-1]
   GRIES D, 1990, FORMAL DEV PROGRAMS, P37
   HARRISON PG, 1992, ACTA INFORM, V29, P211, DOI 10.1007/BF01185679
   HINZE R, 2002, LECT NOTES COMPUTER, V2386
   Hu ZJ, 1996, LECT NOTES COMPUT SC, V1113, P407
   Jansson P, 2002, SCI COMPUT PROGRAM, V43, P35, DOI 10.1016/S0167-6423(01)00020-X
   Jansson P, 1999, LECT NOTES COMPUT SC, V1576, P273
   JANSSON P, 2001, UUCS200134
   KNAPEN E, 1993, THESIS EINDHOVEN U T
   KNUTH DE, 1977, INFORM PROCESS LETT, V6, P1, DOI 10.1016/0020-0190(77)90002-3
   Knuth DE, 1997, ART COMPUTER PROGRAM, V2, P145
   KORF RE, 1981, P 7 INT JOINT C ART, P1007
   Okasaki C., 1995, Journal of Functional Programming, V5, P583, DOI 10.1017/S0956796800001489
   OKASAKI C, 2000, P 2000 ACM SIGPLAN I, P131
   PAREJAFLORES C, 1997, P 1997 ACM SIGPLAN I, P317
   Rewitzky I, 2003, LECT NOTES COMPUT SC, V2929, P256
   ROSS RJ, 1997, FORMAL ASPECTS COMPU, V9, P331
   Schoenmakers B., 1993, Mathematics of Program Construction. Second International Conference. Proceedings, P291
   VANDESNEPSCHEUT JL, 171A JAN
   VONWRIGHT J, 1991, INFORM PROCESS LETT, V37, P95, DOI 10.1016/0020-0190(91)90141-4
NR 38
TC 5
Z9 5
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAY
PY 2004
VL 51
IS 1-2
BP 87
EP 116
DI 10.1016/j.scico.2003.09.003
PG 30
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 817WR
UT WOS:000221208100005
DA 2024-07-18
ER

PT J
AU Watson, BW
   Watson, RE
AF Watson, BW
   Watson, RE
TI A Boyer-Moore-style algorithm for regular expression pattern matching
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE string pattern matching; regular expressions; Boyer-Moore algorithms;
   Commentz-Walter algorithms; algorithm generalizations
AB This paper presents a Boyer-Moore-type algorithm for regular expression pattern matching, answering an open problem posed by Aho in 1980 (Pattern Matching in Strings, Academic Press, New York, 1980, p. 342). The new algorithm handles patterns specified by regular expressions-a generalization of the Boyer-Moore and Commentz-Walter algorithms.
   Like the Boyer-Moore and Commentz-Walter algorithms, the new algorithm makes use of shift functions which can be precomputed and tabulated. The precomputation algorithms are derived, and it is shown that the required shift functions can be precomputed from Commentz-Walter's d(1) and d(2) shift functions.
   In certain cases, the Boyer-Moore (respectively Commentz-Walter) algorithm has greatly outperformed the Knuth-Morris-Pratt (respectively Aho-Corasick) algorithm (as discussed by Watson in his Ph.D. Thesis, Eindhoven University of Technology, September 1995, and in: N. Ziviani, R. Baeza-Yates, K. Guimaracs (Eds.), Proc. Third South American Workshop on String Processing, International Informatics Series, vol. 4, Carleton University Press, Recife, Brazil, 1996, pp. 280-294). In testing, the algorithm presented in this paper also frequently outperforms the regular expression generalization of the Aho-Corasick algorithm. (C) 2003 Elsevier B.V. All rights reserved.
C1 Univ Pretoria, Dept Comp Sci, ZA-0002 Pretoria, South Africa.
   Eindhoven Univ Technol, Dept Comp Sci, NL-5600 MB Eindhoven, Netherlands.
C3 University of Pretoria; Eindhoven University of Technology
RP Watson, BW (corresponding author), Univ Pretoria, Dept Comp Sci, ZA-0002 Pretoria, South Africa.
CR AHO AV, 1975, COMMUN ACM, V18, P333, DOI 10.1145/360825.360855
   AHO AV, 1980, PATTERN MATCHING STR, P325
   AHO AV, 1990, ALGORITHMS FINDING P, VA, P257
   [Anonymous], THESIS EINDHOVEN U T
   BOYER RS, 1977, COMMUN ACM, V20, P62
   COMMENTZWALTER B, 1979, P 6 INT C AUT LANG P, P118
   COMMENTZWALTER B, 1979, 7909007 IBM HEID SCI
   Crochemore M., 1994, TEXT ALGORITHMS
   Dijkstra E. W., 1976, A Discipline of Pro-gramming
   GONNET GH, 1991, HDB ALGORITHMS DATA
   GRIES D, 1980, SCI COMPUTER PROGRAM
   HOPCROFT J, 1979, INTRO AUTOMATAT THEO
   HUME A, 1991, SOFTWARE PRACT EXPER, V21, P1221, DOI 10.1002/spe.4380211105
   Knuth D. E., 1977, SIAM Journal on Computing, V6, P323, DOI 10.1137/0206024
   Watson B., 1992, 27 EINDH U TECHN FAC
   Watson BW, 1996, SCI COMPUT PROGRAM, V27, P85, DOI 10.1016/0167-6423(96)00008-1
   WATSON BW, 1995, 13 EINDH U TECHN FAC
   WATSON BW, 1996, INT INFORMATICS SERI, V4, P280
   WATSON BW, 1993, P COMP SCI NATH 93, P25
NR 19
TC 7
Z9 9
U1 0
U2 1
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD AUG-SEP
PY 2003
VL 48
IS 2-3
BP 99
EP 117
DI 10.1016/S0167-6423(03)00013-3
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 719YB
UT WOS:000185231700002
OA Bronze
DA 2024-07-18
ER

PT J
AU Liu, YHA
   Stoller, SD
AF Liu, YHA
   Stoller, SD
TI Eliminating dead code on recursive data
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 6th International Symposium on Static Analysis
CY SEP 22-24, 1999
CL VENICE, ITALY
SP EALPS, ALP, CNR, Compulog, Ca Foscari Univ, Padova Univ
DE dead-code elimination; recursive data structures; regular-tree grammars;
   constraints; program analysis; slicing
ID DEFORESTATION; CONSTRAINTS; ALGORITHM; EFFICIENT; PROGRAMS
AB This paper describes a powerful method for dead-code analysis and elimination in the presence of recursive data constructions. We describe partially dead recursive data using liveness patterns based on general regular tree grammars extended with the notion of live and dead, and we formulate the analysis as computing liveness patterns at all program points based on constraints constructed from the program and programming language semantics. The analysis yields the most precise program-based grammars that satisfy the constraints. The analysis algorithm takes cubic time in terms of the size of the program in the worst case but is very efficient in practice, as shown by our prototype implementation. The analysis results are used to identify and eliminate dead code. The framework for representing and analyzing properties of recursive data structures using general regular tree grammars applies to other analyses as well. (C) 2003 Elsevier Science B.V. All rights reserved.
C1 SUNY Stony Brook, Dept Comp Sci, Stony Brook, NY 11794 USA.
C3 State University of New York (SUNY) System; State University of New York
   (SUNY) Stony Brook
RP Liu, YHA (corresponding author), SUNY Stony Brook, Dept Comp Sci, Stony Brook, NY 11794 USA.
EM liu@cs.sunysb.edu; stoller@cs.sunysb.edu
CR Aho A.V., 1986, COMPILERS PRINCIPLES
   AIKEN A, 1991, 18 ANN ACM S PRINC P
   [Anonymous], 1992, Semantics of programming languages: structures and techniques
   [Anonymous], 1970, Programming languages and their compilers: Preliminary notes (technical report)
   Arnold Ken., 1996, The Java Programming Language
   BLANCHET B, 1998, 25 ACM SIGACT SIGPLA, P25
   BODIK R, 1997, P ACM SIGPLAN 97 C P, P159, DOI DOI 10.1145/258915.258930
   CHIN WW, 1992, PROCEEDINGS OF THE 20TH ANNUAL NORTH AMERICAN CONFERENCE OF THE INTERNATIONAL BUSINESS SCHOOLS COMPUTER USERS GROUP, P11, DOI 10.1145/141471.141494
   COCKE J, 1977, COMMUN ACM, V20, P850, DOI 10.1145/359863.359888
   COUSOT P, 1995, P 7 ACM C FUNCT PROG, P170
   CYTRON R, 1991, ACM T PROGR LANG SYS, V13, P451, DOI 10.1145/115372.115320
   DENIEL A, 1991, P S PART EV SEM BAS, P142
   DERSHOWITZ N, 1990, SOFTWARE PRACT EXPER, V20, P899, DOI 10.1002/spe.4380200905
   DEUTSCH A, 1997, 24 ANN ACM S PRINC P, P358
   Dybvig R.Kent., 1987, SCHEME PROGRAMMING L
   Fecht C, 1998, LECT NOTES COMPUT SC, V1381, P90, DOI 10.1007/BFb0053565
   Flanagan C, 1999, ACM T PROGR LANG SYS, V21, P370, DOI 10.1145/316686.316703
   *FPCA, 1989, P 4 INT C FUNCT PROG
   Gecseg Ferenc., 1984, TREE AUTOMATA
   Heintze N., 1994, Proceedings of the 1994 ACM Conference on LISP and Functional Programming, P306, DOI 10.1145/182409.182495
   HEINTZE N., 1992, THESIS CARNEGIE MELL
   HEINTZE N, 1992, P JOINT INT C S LOG, P765
   Jones N. D., 1981, Program flow analysis. Theory and applications, P102
   JONES ND, 1979, 6 ANN ACM S PRINC PR, P244
   Jones S.B., 1989, FPCA, P54
   KENNEDY K, 1978, J COMPUT LANG, V3, P163
   Knoop J., 1994, SIGPLAN Notices, V29, P147, DOI 10.1145/773473.178256
   *LFP, 1992, P 1992 ACM C LISP FU
   LIU YA, 1995, SCI COMPUT PROGRAM, V24, P1, DOI 10.1016/0167-6423(94)00031-9
   LIU YA, 2001, P 8 INT STAT AN S, P213
   Liu YHA, 1998, ACM T PROGR LANG SYS, V20, P546, DOI 10.1145/291889.291895
   Liu YHA, 1999, LECT NOTES COMPUT SC, V1576, P288
   Liu YHA, 1998, 1998 INTERNATIONAL CONFERENCE ON COMPUTER LANGUAGES, PROCEEDINGS, P206, DOI 10.1109/ICCL.1998.674171
   Melski D, 2000, THEOR COMPUT SCI, V248, P29, DOI 10.1016/S0304-3975(00)00049-9
   MELSKI D, 1997, P 1997 ACM SIGPLAN S
   Milner R., 1990, The Definition of Standard ML
   MISHRA P, 1985, 12TH P POPL, P7
   MOGENSEN T, 1989, FPCA 1989 P 4 INT C, P12
   Muchnick StevenS., 1981, PROGRAM FLOW ANAL TH
   PAIGE R, 1982, ACM T PROGR LANG SYS, V4, P402, DOI 10.1145/357172.357177
   PARK YG, 1992, P ACM SIGPLAN 92 C P, P116
   PUGH W, 1997, INT C SUP VIENN AUST
   REPS T, 1988, SYNTHESIZER GENERATO
   Sagiv M, 1998, ACM T PROGR LANG SYS, V20, P1, DOI 10.1145/271510.271517
   Scott D. S., 1982, Theoretical Foundations of Programming Methodology. Lecture Notes of an International Summer School, P145
   Seidl H, 1998, SCI COMPUT PROGRAM, V32, P73, DOI 10.1016/S0167-6423(97)00031-2
   SHIVERS O, 1988, P ACM SIGPLAN 88 C P
   Sorensen M. H., 1994, LECT NOTES COMPUTER, V787, P335
   Steele G.L., 1984, Common LISP: The Language, V2nd
   SWEENEY PF, 1998, P ACM SIGPLAN 98 C P, P324
   TIP F, 1995, J PROGRAM LANG, V3, P121
   WADLER P, 1990, THEOR COMPUT SCI, V73, P231, DOI 10.1016/0304-3975(90)90147-A
   WADLER P, 1987, LECT NOTES COMPUT SC, V274, P385
   Wand M, 1998, 1998 INTERNATIONAL CONFERENCE ON COMPUTER LANGUAGES, PROCEEDINGS, P184, DOI 10.1109/ICCL.1998.674169
   WAND M, 1999, 26 ANN ACM S PRINC P, P291
   Wang E., 1992, Proceedings of the 1992 ACM Conference on Lisp and Functional Programming, P216, DOI 10.1145/141471.141544
   WEISER M, 1984, IEEE T SOFTWARE ENG, V10, P352, DOI 10.1109/TSE.1984.5010248
   Winskel G., 1993, The Formal Semantics of Programming Languages
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
NR 64
TC 6
Z9 7
U1 0
U2 0
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAY-JUN
PY 2003
VL 47
IS 2-3
BP 221
EP 242
AR PII S0167-6423(02)00134-X
DI 10.1016/S0167-6423(02)00134-X
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 664CQ
UT WOS:000182044500007
DA 2024-07-18
ER

PT J
AU Jouault, F
   Besnard, V
   Brun, M
   Le Calvar, T
   Chhel, F
   Clavreul, M
   Delatour, J
   Méré, M
   Pasquier, M
   Teodorov, C
AF Jouault, Frederic
   Besnard, Valentin
   Brun, Matthias
   Le Calvar, Theo
   Chhel, Fabien
   Clavreul, Mickael
   Delatour, Jerome
   Mere, Maxime
   Pasquier, Matthias
   Teodorov, Ciprian
TI AnimUML: A practical tool for partial model animation and analysis
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE UML; Model animation; Model verification; Partial models; Teaching
   modeling
AB Each software modeling tool typically supports only a few tasks among model creation, simulation, debugging, analysis, transformation, deployment, and monitoring. Therefore, multiple tools must generally be jointly used. However, few guarantees are generally provided regarding their semantic compatibility. This paper presents AnimUML, a UML modeling tool supporting most modeling tasks, and helping users from early model creation to deployment. Semantic compatibility between tasks is ensured by leveraging a single semantics implementation. AnimUML is successfully used as a framework on which to build research activities. It is also used to teach embedded UML modeling, as well as UML model verification.
C1 [Jouault, Frederic; Brun, Matthias; Chhel, Fabien; Clavreul, Mickael] Univ Angers, LERIA, 2 Bd Lavoisier, F-49000 Angers, France.
   [Jouault, Frederic; Besnard, Valentin; Brun, Matthias; Chhel, Fabien; Clavreul, Mickael; Delatour, Jerome] ESEO, 10 Bd Jeanneteau,CS 90717, F-49107 Angers 2, France.
   [Le Calvar, Theo] IMT Atlantique, UMR CNRS 6004, LS2N, 4 Rue Alfred Kastler,CS 20722, F-44307 Nantes 3, France.
   [Mere, Maxime] STMicroelectronics, 9 Rue Pierre Felix Delarue, F-72100 Le Mans, France.
   [Pasquier, Matthias] Lucio, Chez Sapelem, 4 Rue Ajoncs, F-49070 Beaucouze, France.
   [Teodorov, Ciprian] ENSTA Bretagne, 2 Rue Francois Verny, F-29806 Brest 9, France.
C3 Universite d'Angers; IMT - Institut Mines-Telecom; IMT Atlantique;
   STMicroelectronics; ENSTA Bretagne
RP Jouault, F (corresponding author), Univ Angers, LERIA, 2 Bd Lavoisier, F-49000 Angers, France.; Jouault, F (corresponding author), ESEO, 10 Bd Jeanneteau,CS 90717, F-49107 Angers 2, France.
EM frederic.jouault@eseo.fr; valentin.besnard.49@gmail.com;
   matthias.brun@eseo.fr; valentin.besnard.49@gmail.com;
   fabien.chhel@eseo.fr; mickael.clavreul@eseo.fr; jerome.delatour@eseo.fr;
   maxime.mere@st.com; matthias.pasquier@ertosgener.com;
   ciprian.teodorov@ensta-bretagne.fr
CR Bagherzadeh M, 2019, 2019 ACM/IEEE 22ND INTERNATIONAL CONFERENCE ON MODEL DRIVEN ENGINEERING LANGUAGES AND SYSTEMS COMPANION (MODELS-C 2019), P743, DOI 10.1109/MODELS-C.2019.00115
   Besnard V, 2021, SOFTW SYST MODEL, V20, P1825, DOI 10.1007/s10270-021-00923-9
   Bousse E, 2018, J SYST SOFTWARE, V137, P261, DOI 10.1016/j.jss.2017.11.025
   Duret-Lutz A, 2022, LECT NOTES COMPUT SC, V13372, P174, DOI 10.1007/978-3-031-13188-2_9
   Jouault Frederic, 2022, MODELS '22: Proceedings of the 25th International Conference on Model Driven Engineering Languages and Systems: Companion Proceedings, P889, DOI 10.1145/3550356.3561562
   Jouault F., 2020, P 23 ACM IEEE INT C, P211, DOI DOI 10.1145/3365438.3410967EVENT-PLACE
   Jouault F., 2022, SOFTWARE TECHNOLOGIE
   Jouault F, 2021, 24TH ACM/IEEE INTERNATIONAL CONFERENCE ON MODEL-DRIVEN ENGINEERING LANGUAGES AND SYSTEMS COMPANION (MODELS-C 2021), P616, DOI 10.1109/MODELS-C53483.2021.00094
   Lamport L., 2019, Concurrency: The Works of Leslie Lamport, P277
   Laurent Y., 2013, SAC 13 THE28TH ANN A, P1095, DOI DOI 10.1145/2480362.2480569
   Lewis B, 2003, Computing Research Repository cs.SE/0310016
   Méré M, 2022, PROCEEDINGS OF THE 25TH INTERNATIONAL ACM/IEEE CONFERENCE ON MODEL DRIVEN ENGINEERING LANGUAGES AND SYSTEMS, MODELS 2022, P121, DOI 10.1145/3550355.3552454
   Mere  Maxime, 2022, Zenodo, DOI 10.5281/ZENODO.7152899
   OMG Object Management Group, 2017, UNIFIED MODELING LAN
   Pasquier Matthias, 2023, 2023 ACM/IEEE International Conference on Model Driven Engineering Languages and Systems Companion (MODELS-C), P811, DOI 10.1109/MODELS-C59198.2023.00130
   Pasquier Matthias, 2023, SLE 2023: Proceedings of the 16th ACM SIGPLAN International Conference on Software Language Engineering, P125, DOI 10.1145/3623476.3623526
   Pasquier M., 2020, P 23 ACMIEEE INT C M, P1
   Pasquier M, 2022, PROCEEDINGS OF THE 25TH INTERNATIONAL ACM/IEEE CONFERENCE ON MODEL DRIVEN ENGINEERING LANGUAGES AND SYSTEMS, MODELS 2022, P87, DOI 10.1145/3550355.3552447
   Singh R.G., 2019, Dagstuhl Artifacts Series, V5, P4, DOI [10.4230/DARTS.5.2.4, DOI 10.4230/DARTS.5.2.4]
NR 19
TC 0
Z9 0
U1 2
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN
PY 2024
VL 232
AR 103050
DI 10.1016/j.scico.2023.103050
EA NOV 2023
PG 7
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA Z4GR5
UT WOS:001111681200001
DA 2024-07-18
ER

PT J
AU López, JAH
   Izquierdo, JLC
   Cuadrado, JS
AF Lopez, Jose Antonio Hernandez
   Izquierdo, Javier Luis Canovas
   Cuadrado, Jesus Sanchez
TI ModelSet: A labelled dataset of software models for machine learning
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Dataset; Software models; Model-driven engineering; Machine learning
AB Curated collections of models are essential for the success of Machine Learning (ML) and Data Analytics in Model-Driven Engineering (MDE). However, current datasets are either too small or not properly curated. In this paper, we present MODELSET, a dataset composed of 5,466 Ecore models and 5,120 UML models which have been manually labelled to support ML tasks. We describe the structure of the dataset and explain how to use the associated library to develop ML applications in Python. Finally, we present some applications which can be addressed using MODELSET. Tool Website: https://github .com /modelset & COPY; 2023 The Author(s). Published by Elsevier B.V. This is an open access article under the CC BY-NC-ND license (http://creativecommons .org /licenses /by-nc -nd /4 .0/).
C1 [Lopez, Jose Antonio Hernandez; Cuadrado, Jesus Sanchez] Univ Murcia, Murcia, Spain.
   [Izquierdo, Javier Luis Canovas] IN3 UOC, Barcelona, Spain.
C3 University of Murcia
RP López, JAH; Cuadrado, JS (corresponding author), Univ Murcia, Murcia, Spain.; Izquierdo, JLC (corresponding author), IN3 UOC, Barcelona, Spain.
EM joseantonio.hernandez6@um.es; jcanovasi@uoc.edu; jesusc@um.es
OI Hernandez Lopez, Jose Antonio/0000-0003-2439-2136
FU MCIN/AEI [TED2021-129381B-C22, PID2020-114615RBI00];
   NextGenerationEU/PRTR; ESF Investing in your future; Universidad de
   Murcia;  [RYC-2017-237]
FX Work supported by grant TED2021-129381B-C22 (SATORI project) funded by
   MCIN/AEI/10.13039/501100011033 and NextGenerationEU/PRTR, and by grant
   PID2020-114615RBI00 (LOCOSS project) funded by
   MICIN/AEI/10.13039/501100011033. Jesus Sanchez Cuadrado enjoys a grant
   RYC-2017-237 funded by MCIN/AEI/10.13039/501100011033 and by "ESF
   Investing in your future". Jose Antonio Hernandez Lopez enjoys a FPU
   grant funded by the Universidad de Murcia.
CR Babur Onder, A Labeled Ecore Metamodel Dataset for Domain Clustering
   López JAH, 2021, 24TH INTERNATIONAL CONFERENCE ON MODEL-DRIVEN ENGINEERING LANGUAGES AND SYSTEMS (MODELS 2021), P58, DOI 10.1109/MODELS50736.2021.00015
   López JAH, 2022, SOFTW SYST MODEL, V21, P1715, DOI 10.1007/s10270-021-00960-4
   López JAH, 2022, SOFTW SYST MODEL, V21, P967, DOI 10.1007/s10270-021-00929-3
   Lopez J A. H., 2020, Proc. ACM/IEEE 23rd International Conference on Model Driven Engineering Languages and Systems (MoDELS), P57, DOI DOI 10.1145/3365438.3410947
   Lopez Jose Antonio Hernandez, 2022, INT C MOD DRIV ENG L
   Nguyen PT, 2019, 2019 ACM/IEEE 22ND INTERNATIONAL CONFERENCE ON MODEL DRIVEN ENGINEERING LANGUAGES AND SYSTEMS (MODELS 2019), P272, DOI 10.1109/MODELS.2019.00011
   Nguyen PT, 2021, SOFTW SYST MODEL, V20, P1797, DOI 10.1007/s10270-021-00913-x
   Robles G, 2017, IEEE WORK CONF MIN S, P519, DOI 10.1109/MSR.2017.48
   Weske M., Model Collection of the Business Process Management Academic Initiative
   Weyssow M, 2022, SOFTW SYST MODEL, V21, P1071, DOI 10.1007/s10270-022-00975-5
NR 11
TC 2
Z9 2
U1 1
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN
PY 2024
VL 231
AR 103009
DI 10.1016/j.scico.2023.103009
EA AUG 2023
PG 4
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA S2VV6
UT WOS:001069808600001
OA hybrid
DA 2024-07-18
ER

PT J
AU Smajevic, M
   Ali, SJ
   Bork, D
AF Smajevic, Muhamed
   Ali, Syed Juned
   Bork, Dominik
TI CM2KGcloud-An open web-based platform to transform conceptual models
   into knowledge graphs
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Model transformation; Conceptual modeling; Cloud platform; Knowledge
   graph; Artificial intelligence; Model-driven engineering
AB Semantic processing of conceptual models is a focus of research for several years, bridging the disciplines of knowledge-based systems, conceptual modeling, and model-driven software engineering. With Knowledge Graphs, this research area gained momentum. In this paper, we introduce CM2KGcloud, a generic and extensible Web-based platform for transforming conceptual models into Knowledge Graphs. The platform can work on models created by state-of-the-art metamodeling platforms (e.g., EMF, Papyrus, ADOxx) and transforms models created with them into standardized Knowledge Graph representations like GraphML, RDF, and OWL. CM2KGcloud can be used as a service and can be integrated into software systems by its exposed API.& COPY; 2023 Elsevier B.V. All rights reserved.
C1 [Smajevic, Muhamed; Ali, Syed Juned; Bork, Dominik] TU Wien, Business Informat Grp, Favoritenstr 11, A-1040 Vienna, Austria.
C3 Technische Universitat Wien
RP Bork, D (corresponding author), TU Wien, Business Informat Grp, Favoritenstr 11, A-1040 Vienna, Austria.
EM dominik.bork@tuwien.ac.at
OI Ali, Syed Juned/0000-0003-1221-0278
FU Erasmus+ KA220-HED project Digital Platform Enterprise
   [2021-1-RO01-KA220-HED-000027576]; Austrian Research Promotion Agency
   via the Austrian Competence Center for Digital Production [854187]; TU
   Wien Bibliothek
FX Several people and works have contributed toward CM2KGcloud. We would
   like to thank particularly Simon Hacks and Emanuel Sallinger for the
   valuable collaboration that led to extending the platform for EA Smell
   detection [10] and visualization [9], and the historization of the
   created knowledge graphs [18]. This work has been partially funded
   through the Erasmus+ KA220-HED project Digital Platform Enterprise
   (project no.: 2021-1-RO01-KA220-HED-000027576) and the Austrian Research
   Promotion Agency via the Austrian Competence Center for Digital
   Production (contract no. 854187). The authors acknowledge TU Wien
   Bibliothek for financial support through its Open Access Funding
   Programme.
CR Ali Syed Juned, 2023, Advanced Information Systems Engineering: 35th International Conference, CAiSE 2023, Proceedings. Lecture Notes in Computer Science (13901), P278, DOI 10.1007/978-3-031-34560-9_17
   [Anonymous], 2021, N. Contrib, neovis.js
   [Anonymous], 2013, Handbook of Graph Drawing and Visualization
   Bellomarini L, 2019, PROC INT CONF DATA, P26, DOI 10.1109/ICDE.2019.00011
   Bernasconi A, 2019, LECT NOTES COMPUT SC, V11788, P352, DOI 10.1007/978-3-030-33223-5_29
   Bråtfors R, 2022, LECT NOTES BUS INF P, V456, P51, DOI 10.1007/978-3-031-21488-2_4
   Feltus C, 2021, LECT NOTES COMPUT SC, V13012, P75, DOI 10.1007/978-3-030-88358-4_7
   Fowler M., 2018, Refactoring: Improving the Design of Existing Code
   Glaser PL, 2022, LECT NOTES COMPUT SC, V13585, P57, DOI 10.1007/978-3-031-17604-3_4
   Hacks S, 2019, IEEE INT ENTERP, P9, DOI 10.1109/EDOCW.2019.00016
   Haendler T., 2018, P 13 INT C SOFTW TEC, P413
   Medvedev D, 2021, APPL SCI-BASEL, V11, DOI 10.3390/app11020765
   Mussbacher G, 2020, SOFTW SYST MODEL, V19, P1045, DOI 10.1007/s10270-020-00814-5
   Santana A, 2016, P ANN HICSS, P4566, DOI 10.1109/HICSS.2016.567
   Smajevic M, 2021, LECT NOTES BUS INF P, V432, P48, DOI 10.1007/978-3-030-91279-6_4
   Smajevic M, 2021, 24TH ACM/IEEE INTERNATIONAL CONFERENCE ON MODEL-DRIVEN ENGINEERING LANGUAGES AND SYSTEMS COMPANION (MODELS-C 2021), P611, DOI 10.1109/MODELS-C53483.2021.00093
   Smajevic M, 2021, LECT NOTES COMPUT SC, V13011, P199, DOI 10.1007/978-3-030-89022-3_17
   Suryanarayana G., 2014, Refactoring for Software Design Smells: Managing Technical Debt
NR 18
TC 0
Z9 0
U1 2
U2 8
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN
PY 2024
VL 231
AR 103007
DI 10.1016/j.scico.2023.103007
EA AUG 2023
PG 7
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA S4YH4
UT WOS:001071234000001
DA 2024-07-18
ER

PT J
AU Gómez-Abajo, P
   Guerra, E
   de Lara, J
AF Gomez-Abajo, Pablo
   Guerra, Esther
   de Lara, Juan
TI Wodel-Edu: A tool for the generation and evaluation of diagram-based
   exercises
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Model-driven engineering; Education; Model mutation; Automated
   generation of exercises; MOODLE
AB Creating and grading exercises are recurring tasks within higher education. When these exercises are based on diagrams - like logic circuits, automata or class diagrams - we can represent them as models, and use model-driven engineering techniques for the large-scale generation of quizzes, which can be automatically graded. This way, we propose a domain-independent tool for the generation and automated evaluation of diagram-based exercises called WODEL-EDU. WODEL-EDU is built atop WODEL, an extensible tool for model mutation, and offers seven kinds of diagram exercises. It supports code generation from the exercises for the MOODLE platform, the web, ANDROID and IOS applications. Evaluations from the professor and student perspectives show good results. & COPY; 2023 The Author(s). Published by Elsevier B.V. This is an open access article under the CC BY-NC-ND license (http://creativecommons .org /licenses /by-nc -nd /4 .0/).
C1 [Gomez-Abajo, Pablo; Guerra, Esther; de Lara, Juan] Univ Autonoma Madrid, Comp Sci Dept, Madrid, Spain.
C3 Autonomous University of Madrid
RP Gómez-Abajo, P (corresponding author), Univ Autonoma Madrid, Comp Sci Dept, Madrid, Spain.
EM Pablo.GomezA@uam.es; Esther.Guerra@uam.es; Juan.deLara@uam.es
RI Gómez-Abajo, Pablo/S-3860-2016; de Lara, Juan/B-5422-2014; Guerra,
   Esther/B-4977-2014
OI Gómez-Abajo, Pablo/0000-0002-8319-4829; 
FU Spanish MICINN [PID2021-122270OB-I00, TED2021-129381B-C21]
FX Acknowledgements Special gratitude to Andres Rico-Fernandez and Jaime
   Velazquez Pazos for their help with the W ODEL -E DU implementa-tion,
   building the code generators for the A NDROID and I OS exercises
   applications, respectively, and to all participants in the evaluation.
   Project partially funded by the Spanish MICINN (PID2021-122270OB-I00,
   TED2021-129381B-C21) .
CR Alur Rajeev, 2013, IJCAI, P1976
   Bangor A, 2009, J USABILITY STUD, V4, P114
   Bian Weiyi, 2020, P 23 ACM IEEE INT C, P365, DOI [10.1145/3365438.3410944, DOI 10.1145/3365438.3410944]
   Brambilla M., 2017, Model-Driven Software Engineering in Practice, Second Edition, ser. Synthesis Lectures on Software Engineering, VSecond
   Brooke J, 1996, USABILITY EVALUATION, V189, P4
   Christian M., 2016, ICTCS
   Ferreira K, 2018, WEBMEDIA'18: PROCEEDINGS OF THE 24TH BRAZILIAN SYMPOSIUM ON MULTIMEDIA AND THE WEB, P105, DOI 10.1145/3243082.3267451
   Gomez-Abajo P., 2023, AUTOMATED GENERATION
   Gómez-Abajo P, 2021, 24TH ACM/IEEE INTERNATIONAL CONFERENCE ON MODEL-DRIVEN ENGINEERING LANGUAGES AND SYSTEMS COMPANION (MODELS-C 2021), P601, DOI 10.1109/MODELS-C53483.2021.00091
   Gómez-Abajo P, 2018, SCI COMPUT PROGRAM, V163, P85, DOI 10.1016/j.scico.2018.01.008
   Kuhlmann Mirco, 2012, Model Driven Engineering Languages and Systems. Proceedings 15th International Conference, MODELS 2012, P415, DOI 10.1007/978-3-642-33666-9_27
   Kurbakova Svetlana, 2020, ICEMT 2020: 2020 4th International Conference on Education and Multimedia Technology, P167, DOI 10.1145/3416797.3416838
   Reischmann T, 2019, SAC '19: PROCEEDINGS OF THE 34TH ACM/SIGAPP SYMPOSIUM ON APPLIED COMPUTING, P2435, DOI 10.1145/3297280.3297520
   Ribaudo M., 2019, P 2 ACM SIGSOFT INT, P16
   Sadigh Dorsa., 2013, Proceedings of the Workshop on Embedded and Cyber-Physical Systems Education, WESE '12, p2:1
   Thomas P, 2007, ITICSE 2007: 12TH ANNUAL CONFERENCE ON INNOVATION & TECHNOLOGY IN COMPUTER SCIENCE EDUCATION, P68, DOI 10.1145/1269900.1268806
NR 16
TC 0
Z9 0
U1 1
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD AUG
PY 2023
VL 230
AR 103000
DI 10.1016/j.scico.2023.103000
EA JUL 2023
PG 10
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA P4ZF4
UT WOS:001050754700001
OA Green Published, hybrid
DA 2024-07-18
ER

PT J
AU Fortas, A
   Kerkouche, E
   Chaoui, A
AF Fortas, Abdelouahab
   Kerkouche, Elhillali
   Chaoui, Allaoua
TI Formal verification of IoT applications using rewriting logic: An
   MDE-based approach
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Internet of things; Formal verification; Rewriting logic; Model
   checking; Model driven engineering
ID MODEL; SEMANTICS; INTERNET; SYSTEMS
AB Internet of Things (IoT) systems are complex assemblies of components that collaborate to achieve common goals. These components are based on heterogeneous technologies, and they communicate using various communication protocols. This heterogeneity makes the design and the development of IoT applications a challenging issue. Diverse approaches based on Model-Driven Engineering (MDE) have been proposed to overcome this major issue using suitable modeling languages. ThingML is a promising UML profile for modeling IoT applications that aims to address the challenges of heterogeneity. However, ThingML does not have rigorous semantics, making it unsuitable for formal verification and analysis of system designs. This paper proposes an MDE-based formal approach to define the formal semantics of the ThingML language using rewriting logic and its language Maude. The main advantage of our approach over other approaches lies in the universality and versatility of Maude's mathematical notation, which implements all ThingML concepts and their behavioral aspects in a unified formal logic. The existing Maude language verification tools provide powerful analysis techniques, including simulation and model checking, which enable rigorous analysis and verification of ThingML designs. The contributions of this work include the following: (i) we propose a semantics mapping between ThingML concepts and Maude constructs, (ii) we define and implement an operational semantics for the ThingML action language in the Maude language, and (iii) we develop a tool that enables the automatic transformation of ThingML specifications into Maude. Our approach is illustrated through a case study. (C) 2022 Elsevier B.V. All rights reserved.
C1 [Fortas, Abdelouahab; Kerkouche, Elhillali] Mohamed Seddik Ben Yahia Univ, Dept Comp Sci, Jijel, Algeria.
   [Kerkouche, Elhillali; Chaoui, Allaoua] Univ Constantine 2 Abdelhamid Mehri, Fac IT, Dept Comp Sci & Applicat, MISC Lab, El Khroub, Algeria.
RP Fortas, A (corresponding author), Mohamed Seddik Ben Yahia Univ, Dept Comp Sci, Jijel, Algeria.
EM abdelouahab.fortas@univ-jijel.dz; kerkouche_elhillali@univ-jijel.dz;
   allaoua.chaoui@univ-constantine2.dz
OI FORTAS, ABDELOUAHAB/0000-0002-9794-1696
CR Al-Fuqaha A, 2015, IEEE COMMUN SURV TUT, V17, P2347, DOI 10.1109/COMST.2015.2444095
   [Anonymous], THINGML OPEN SOURCE
   [Anonymous], 1992, Semantics of programming languages: structures and techniques
   [Anonymous], About the action language for foundational UML specification version 1.1
   Berrouyne I, 2019, SAC '19: PROCEEDINGS OF THE 34TH ACM/SIGAPP SYMPOSIUM ON APPLIED COMPUTING, P832, DOI 10.1145/3297280.3297362
   Borgia E, 2014, COMPUT COMMUN, V54, P1, DOI 10.1016/j.comcom.2014.09.008
   Bouhoula A, 2000, THEOR COMPUT SCI, V236, P35, DOI 10.1016/S0304-3975(99)00206-6
   Burgueño L, 2018, IEEE ACCESS, V6, P23222, DOI 10.1109/ACCESS.2018.2831185
   Ciccozzi F, 2017, STUD COMPUT INTELL, V678, P67, DOI 10.1007/978-3-319-48829-5_7
   Ciccozzi F, 2017, IEEE SOFTWARE, V34, P46, DOI 10.1109/MS.2017.1
   Cimatti A., 2002, P INT C COMP AID VER, P359, DOI DOI 10.1007/3-540-45657-0_29
   Clavel M, 2007, All About Maude: A High-Performance Logical Framework
   Costa B, 2020, J SYST SOFTWARE, V169, DOI 10.1016/j.jss.2020.110720
   Costa B, 2016, 2016 IEEE 14TH INTL CONF ON DEPENDABLE, AUTONOMIC AND SECURE COMPUTING, 14TH INTL CONF ON PERVASIVE INTELLIGENCE AND COMPUTING, 2ND INTL CONF ON BIG DATA INTELLIGENCE AND COMPUTING AND CYBER SCIENCE AND TECHNOLOGY CONGRESS (DASC/PICOM/DATACOM/CYBERSC, P392, DOI 10.1109/DASC-PICom-DataCom-CyberSciTec.2016.81
   Cugola G, 2012, ACM COMPUT SURV, V44, DOI 10.1145/2187671.2187677
   David A, 2015, INT J SOFTW TOOLS TE, V17, P397, DOI 10.1007/s10009-014-0361-y
   dos Santos J, 2015, SCI COMPUT PROGRAM, V107, P64, DOI 10.1016/j.scico.2015.04.006
   Durán F, 2020, J LOG ALGEBR METHODS, V110, DOI 10.1016/j.jlamp.2019.100497
   Durán F, 2018, SCI COMPUT PROGRAM, V168, P1, DOI 10.1016/j.scico.2018.08.007
   Eker Steven., 2004, ELECTRON NOTES THEOR, V71, P162, DOI [DOI 10.1016/S1571-0661(05)82534-4, 10.1016/S1571-0661(05)82534-4]
   Harrand N, 2016, 19TH ACM/IEEE INTERNATIONAL CONFERENCE ON MODEL DRIVEN ENGINEERING LANGUAGES AND SYSTEMS (MODELS'16), P125, DOI 10.1145/2976767.2976812
   Ihirwe F., ARXIV
   Kerkouche Elhillali, 2020, International Journal of Computer Aided Engineering and Technology, V12, P237
   Meseguer J, 2000, INT FED INFO PROC, V49, P89
   MESEGUER J, 1992, THEOR COMPUT SCI, V96, P73, DOI 10.1016/0304-3975(92)90182-F
   Meseguer J, 2013, INFORM COMPUT, V231, P38, DOI 10.1016/j.ic.2013.08.004
   Morin B, 2017, IEEE SOFTWARE, V34, P30, DOI 10.1109/MS.2017.11
   Neto V.V.G., 2016, SRC MODELS
   Olveczky P. C., 2007, Higher-Order and Symbolic Computation, V20, P161, DOI 10.1007/s10990-007-9001-5
   Open Mobile Alliance OMA, LIGHTW MACH MACH TEC
   Oquendo F, 2018, LECT NOTES COMPUT SC, V11048, P20, DOI 10.1007/978-3-030-00761-4_2
   Plotkin GD, 2004, J LOGIC ALGEBR PROGR, V60-1, P17, DOI 10.1016/j.jlap.2004.03.002
   Pramudianto F, 2014, 2014 IEEE 11TH INTL CONF ON UBIQUITOUS INTELLIGENCE AND COMPUTING AND 2014 IEEE 11TH INTL CONF ON AUTONOMIC AND TRUSTED COMPUTING AND 2014 IEEE 14TH INTL CONF ON SCALABLE COMPUTING AND COMMUNICATIONS AND ITS ASSOCIATED WORKSHOPS, P1, DOI 10.1109/UIC-ATC-ScalCom.2014.95
   Serbanuta TF, 2009, INFORM COMPUT, V207, P305, DOI 10.1016/j.ic.2008.03.026
   Souri Alireza, 2019, Journal of Service Science Research, V11, P47, DOI 10.1007/s12927-019-0003-8
   Strategyanalytics, GLOB CONN IOT DEV FO
   Thramboulidis K, 2016, COMPUT IND, V82, P259, DOI 10.1016/j.compind.2016.05.010
   Verdejo A, 2006, J LOGIC ALGEBR PROGR, V67, P226, DOI 10.1016/j.jlap.2005.09.008
   Xu SY, 2016, 2016 IEEE INTERNATIONAL CONFERENCE ON SOFTWARE QUALITY, RELIABILITY AND SECURITY (QRS 2016), P274, DOI 10.1109/QRS.2016.39
NR 39
TC 4
Z9 4
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 1
PY 2022
VL 222
AR 102859
DI 10.1016/j.scico.2022.102859
EA AUG 2022
PG 27
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 4N6NR
UT WOS:000854135700005
DA 2024-07-18
ER

PT J
AU Dupont, G
   Ait-Ameur, Y
   Singh, NK
   Pantel, M
AF Dupont, Guillaume
   Ait-Ameur, Yamine
   Singh, Neeraj Kumar
   Pantel, Marc
TI Formally verified architectural patterns of hybrid systems using proof
   and refinement with Event-B
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 7th International Conference on Rigorous State-Based Methods (ABZ)
CY MAY 27-29, 2020
CL Ulm, GERMANY
DE Cyber-Physical Systems; Formal methods; Refinement; Event-B;
   Architecture patterns; Recherche (ANR)
ID VERIFICATION
AB Cyber-Physical Systems (CPSs) are multi-component systems that interact with the real world. Their heterogeneous nature makes them particularly difficult to model and prove. Our work proposes a framework allowing to design complex hybrid systems based on decomposition using formally verified architectural patterns. It relies on a proof and refinement-based, correct-by-construction approach with Event-B. In particular, the generic model developed in our previous work is used as a base for defining different patterns, for modelling different architectures of systems. Three architectural patterns are presented, corresponding to simple, centralised and distributed control: one controller controlling one plant, one controller controlling several plants and several controllers controlling several plants. The progressive development of the proposed patterns and their application to specific hybrid systems allows to prove the required safety properties by introducing invariants, decomposing and balancing the proof effort at every step of the development. An assessment of the proposed architectural patterns is undertaken: different designs of the same case study are used to demonstrate the feasibility, reliability and extensibility of our approach to model and designing different classes of controllers. (c) 2021 Elsevier B.V. All rights reserved.
C1 [Dupont, Guillaume; Ait-Ameur, Yamine; Singh, Neeraj Kumar; Pantel, Marc] Univ Toulouse, CNRS, Toulouse INP, IRIT,UT3, Toulouse, France.
   [Dupont, Guillaume; Ait-Ameur, Yamine; Singh, Neeraj Kumar; Pantel, Marc] Toulouse INP, ENSEEIHT, Toulouse, France.
C3 Universite Federale Toulouse Midi-Pyrenees (ComUE); Universite de
   Toulouse; Institut National Polytechnique de Toulouse; Centre National
   de la Recherche Scientifique (CNRS); Universite Toulouse III - Paul
   Sabatier; Universite Federale Toulouse Midi-Pyrenees (ComUE); Universite
   de Toulouse; Institut National Polytechnique de Toulouse
RP Dupont, G (corresponding author), Univ Toulouse, CNRS, Toulouse INP, IRIT,UT3, Toulouse, France.; Dupont, G (corresponding author), Toulouse INP, ENSEEIHT, Toulouse, France.
EM guillaume.dupont@enseeiht.fr; yamine@enseeiht.fr;
   Neeraj.Singh@enseeiht.fr; Marc.Pantel@enseeiht.fr
RI Singh, Neeraj Kumar/AAJ-3674-2021
OI Singh, Neeraj Kumar/0000-0002-7894-3354; Dupont,
   Guillaume/0000-0002-9185-0515
FU Agence Nationale de la Recherche (ANR) [ANR-17-CE25-0005]; Agence
   Nationale de la Recherche (ANR) [ANR-17-CE25-0005] Funding Source:
   Agence Nationale de la Recherche (ANR)
FX This work was supported by grant ANR-17-CE25-0005 (The DISCONT Project
   https://discont.loria.fr) from the Agence Nationale de la Recherche
   (ANR).
CR Abrial Jean-Raymond, 2010, International Journal on Software Tools for Technology Transfer, V12, P447, DOI 10.1007/s10009-010-0145-y
   Abrial J.-R., 2009, PROPOSALS MATH EXTEN
   Abrial J R, 2010, Modeling in Event-B: system and softeng
   ALUR R, 1995, THEOR COMPUT SCI, V138, P3, DOI 10.1016/0304-3975(94)00202-T
   Aréchiga N, 2012, P AMER CONTR CONF, P3573
   Back RJ, 2000, LECT NOTES COMPUT SC, V1926, P202
   BACK RJR, 1989, DISTRIB COMPUT, V3, P73, DOI 10.1007/BF01558665
   Banach Richard, 2013, Theories of Programming and Formal Methods. Essays Dedicated to Jifeng He on the Occasion of His 70th Birthday. LNCS 8051, P37, DOI 10.1007/978-3-642-39698-4_3
   Banach R., 2015, SCI COMPUT PROGRAM
   Banach R, 2017, SCI COMPUT PROGRAM, V139, P1, DOI 10.1016/j.scico.2016.12.003
   Banach R, 2016, 2016 10TH INTERNATIONAL SYMPOSIUM ON THEORETICAL ASPECTS OF SOFTWARE ENGINEERING (TASE), P65, DOI 10.1109/TASE.2016.16
   Banach R, 2016, LECT NOTES COMPUT SC, V9675, P376, DOI 10.1007/978-3-319-33600-8_32
   Boldo S, 2015, MATH COMPUT SCI, V9, P41, DOI 10.1007/s11786-014-0181-1
   Butler Michael, 2013, Theories of Programming and Formal Methods. Essays Dedicated to Jifeng He on the Occasion of His 70th Birthday. LNCS 8051, P67, DOI 10.1007/978-3-642-39698-4_5
   Dupont Guillaume, 2020, Formal Methods and Software Engineering. 22nd International Conference on Formal Engineering Methods, ICFEM 2020. Proceedings. Lecture Notes in Computer Science (LNCS 12531), P251, DOI 10.1007/978-3-030-63406-3_15
   Dupont G, 2019, 2019 13TH INTERNATIONAL SYMPOSIUM ON THEORETICAL ASPECTS OF SOFTWARE ENGINEERING (TASE 2019), P9, DOI [10.1109/TASE.2019.00009, 10.1109/TASE.2019.00-25]
   Dupont Guillaume, 2018, Abstract State Machines, Alloy, B, TLA, VDM, and Z. 6th International Conference, ABZ 2018. Proceedings: LNCS 10817, P155, DOI 10.1007/978-3-319-91271-4_11
   Dupont G., 2021, THESIS I NATL POLYTE
   Dupont G, 2021, ACM T EMBED COMPUT S, V20, DOI 10.1145/3448270
   Dupont G, 2020, LECT NOTES COMPUT SC, V12546, P82, DOI 10.1007/978-3-030-63461-2_5
   Dupont G, 2018, COMM COM INF SC, V929, P153, DOI 10.1007/978-3-030-02852-7_14
   Dupont Guillaume, 2020, LNCS, V12071, P155
   Herencia-Zapana Heber, 2012, NASA Formal Methods. Proceedings of the 4th International Symposium, NFM 2012, P147, DOI 10.1007/978-3-642-28891-3_15
   Hoare CAR., 1985, Communicating Sequential Processes
   Jifeng H., 1994, A Classical Mind, Essays in Honour of C.A.R. Hoare, P171
   Kouskoulas Y., 2013, PROC 16 INT C HYBRID, P263, DOI [10.1145/2461328.2461369, DOI 10.1145/2461328.2461369]
   Liang Zou, 2014, Verified Software: Theories, Tools, Experiments. 5th International Conference, VSTTE 2013. Revised Selected Papers: LNCS 8164, P262, DOI 10.1007/978-3-642-54108-7_14
   Liu J, 2010, LECT NOTES COMPUT SC, V6461, P1, DOI [10.1109/PCSPA.2010.9, 10.1007/978-3-642-17164-2_1]
   Loos SM, 2016, PROCEEDINGS OF THE 31ST ANNUAL ACM-IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE (LICS 2016), P505, DOI 10.1145/2933575.2934555
   Lunel Simon, 2019, Formal Methods - The Next 30 Years. Third World Congress, FM 2019. Proceedings. Lecture Notes in Computer Science (LNCS 11800), P354, DOI 10.1007/978-3-030-30942-8_22
   Lunel S, 2017, INT CONF APPL CONCUR, P19, DOI 10.1109/ACSD.2017.16
   Meinicke L, 2006, LECT NOTES COMPUT SC, V4014, P316, DOI 10.1007/11783596_19
   Muschevici R, 2011, LECT NOTES COMPUT SC, V7041, P318, DOI 10.1007/978-3-642-24690-6_22
   Platzer A, 2008, J AUTOM REASONING, V41, P143, DOI 10.1007/s10817-008-9103-8
   Platzer A, 2009, LECT NOTES COMPUT SC, V5885, P246, DOI 10.1007/978-3-642-10373-5_13
   Platzer A, 2009, LECT NOTES COMPUT SC, V5850, P547, DOI 10.1007/978-3-642-05089-3_35
   Quesel JD, 2016, INT J SOFTW TOOLS TE, V18, P67, DOI 10.1007/s10009-015-0367-0
   Scherer P.O.J, 2013, DISCRETIZATION DIFFE, P177
   Stankaitis P, 2019, IEEE INT C ENG COMP, P107, DOI 10.1109/ICECCS.2019.00019
   ter Beek MH, 2014, LECT NOTES COMPUT SC, V8802, P368, DOI 10.1007/978-3-662-45234-9_26
   Zhao HJ, 2014, LECT NOTES COMPUT SC, V8442, P733, DOI 10.1007/978-3-319-06410-9_49
NR 41
TC 1
Z9 1
U1 0
U2 4
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD APR 1
PY 2022
VL 216
AR 102765
DI 10.1016/j.scico.2021.102765
EA JAN 2022
PG 31
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA ZG5YX
UT WOS:000760335200006
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Archibald, B
   Calder, M
   Sevegnani, M
   Xu, MW
AF Archibald, Blair
   Calder, Muffy
   Sevegnani, Michele
   Xu, Mengwei
TI Modelling and verifying BDI agents with bigraphs
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE BDI agents; Modelling; Verification; Bigraphs
ID MULTIAGENT SYSTEMS; CHECKING
AB The Belief-Desire-Intention (BDI) architecture is a popular framework for rational agents; existing verification approaches either directly encode simplified (e.g. lacking features like failure recovery) BDI languages into existing verification frameworks (e.g. Promela), or reason about specific BDI language implementations. We take an alternative approach and employ Milner's bigraphs as a modelling framework for a fully featured BDI language, the Conceptual Agent Notation (CAN)-a superset of AgentSpeak featuring declarative goals, concurrency, and failure recovery. We provide an encoding of the syntax and semantics of CAN agents, and give a rigorous proof that the encoding is faithful. Verification is based on the use of mainstream software tools including BigraphER, and a small case study verifying several properties of Unmanned Aerial Vehicles (UAVs) illustrates the framework in action. The executable framework is a foundational step that will enable more advanced reasoning such as plan preference, intention priorities and trade-offs, and interactions with an environment under uncertainty. (C) 2021 Elsevier B.V. All rights reserved.
C1 [Archibald, Blair; Calder, Muffy; Sevegnani, Michele; Xu, Mengwei] Univ Glasgow, Sch Comp Sci, Glasgow, Lanark, Scotland.
C3 University of Glasgow
RP Xu, MW (corresponding author), Univ Glasgow, Sch Comp Sci, Glasgow, Lanark, Scotland.
EM blair.archibald@glasgow.ac.uk; muffy.calder@glasgow.ac.uk;
   michele.sevegnani@glasgow.ac.uk; mengwei.xu@glasgow.ac.uk
OI Archibald, Blair/0000-0003-3699-6658; Xu, Mengwei/0000-0003-4978-3061
FU Engineering and Physical Sciences Research Council [EP/S035362/1,
   EP/N007565/1]; EPSRC [EP/N007565/1] Funding Source: UKRI; SPF
   [EP/S035362/1] Funding Source: UKRI
FX This work is supported by the Engineering and Physical Sciences Research
   Council, under PETRAS SRF grant MAGIC (EP/S035362/1) and S4: Science of
   Sensor Systems Software (EP/N007565/1) .
CR [Anonymous], 2000, Lecture Notes in Computer Science
   [Anonymous], 2014, ADV INTELLIGENT COMP
   Archibald B, 2020, MODELLING VERIFYING, DOI DOI 10.5281/ZENODO.4472541
   Archibald B, 2021, PROBABILISTIC BIGRAP
   Archibald B., 2021, 27 INT C PRINC PRACT
   Archibald B, 2021, ELECTRON P THEOR COM, P167, DOI 10.4204/EPTCS.348.12
   Archibald B, 2021, LECT NOTES COMPUT SC, V13085, P262, DOI 10.1007/978-3-030-92124-8_15
   Archibald B, 2020, LECT NOTES COMPUT SC, V12150, P3, DOI 10.1007/978-3-030-51372-6_1
   Benfield S.S, 2006, P 5 INT JOINT C AUT, P10
   Benford S, 2016, ACM T COMPUT-HUM INT, V23, DOI 10.1145/2882784
   Bianco A., 1995, Foundations of Software Technology and Theoretical Computer Science. 15th Conference. Proceedings, P499
   Bordini R., 2007, PROGRAMMING MULTIAGE
   Bordini R., 2004, PROC 3 INT JOINT C A, P896
   Bordini RH, 2009, J LOGIC COMPUT, V19, P1385, DOI 10.1093/logcom/exp029
   Bordini RH, 2006, AUTON AGENT MULTI-AG, V12, P239, DOI 10.1007/s10458-006-5955-7
   Brat G, 2006, AEROSP CONF PROC, P3155
   Bratman Michael., 1987, Intention, Plans, and
   Bundgaard Mikkel, 2006, P ACM SIGPLAN INT C, P1, DOI [10.1145/1140335.1140336, DOI 10.1145/1140335.1140336]
   Calder M, 2014, FORM ASP COMPUT, V26, P537, DOI 10.1007/s00165-012-0270-3
   Clarke. E. M., 1982, LOGICS OF PROGRAMS, P52, DOI [10 . 1007 / BFb0025774, DOI 10.1007/BFB0025774]
   Clavel M, 2020, MAUDE MANUAL
   Dastani M, 2008, AUTON AGENT MULTI-AG, V16, P214, DOI 10.1007/s10458-008-9036-y
   de Silva L, 2020, AAAI CONF ARTIF INTE, V34, P7119
   Dennis L. A, 2018, J OPEN SOURCE SOFTWA, V3
   Dennis L. A., 2008, P 7 INT JOINT C AUT, P1303
   Dennis L, 2016, ROBOT AUTON SYST, V77, P1, DOI 10.1016/j.robot.2015.11.012
   Dennis LA, 2016, AUTOMAT SOFTW ENG, V23, P305, DOI 10.1007/s10515-014-0168-9
   Dennis LA, 2018, J LOGIC COMPUT, V28, P499, DOI 10.1093/logcom/exv002
   Dennis LA, 2012, AUTOMAT SOFTW ENG, V19, P5, DOI 10.1007/s10515-011-0088-x
   Dennis Louise A., 2017, Technical Report ULCS-17-001
   Dib ATE, 2015, ACSIS-ANN COMPUT SCI, V5, P1717, DOI 10.15439/2015F300
   Eker Steven., 2004, ELECTRON NOTES THEOR, V71, P162, DOI [DOI 10.1016/S1571-0661(05)82534-4, 10.1016/S1571-0661(05)82534-4]
   Emerson E. A., 1990, Handbook of Theoretical Computer Science, VB, P995, DOI [10.1016/b978-0-444-88074-1.50021-4, DOI 10.1016/B978-0-444-88074-1.50021-4]
   GROOTE JF, 1993, THEOR COMPUT SCI, V118, P263, DOI 10.1016/0304-3975(93)90111-6
   Harland J, 2017, AUTON AGENT MULTI-AG, V31, P288, DOI 10.1007/s10458-015-9322-4
   Harland J, 2014, AUTON AGENT MULTI-AG, V28, P682, DOI 10.1007/s10458-013-9238-9
   Hindriks K. V., 1999, Autonomous Agents and Multi-Agent Systems, V2, P357, DOI 10.1023/A:1010084620690
   Holzmann G. J., 1991, DESIGN VALIDATION CO, V512
   Holzmann GJ, 1997, IEEE T SOFTWARE ENG, V23, P279, DOI 10.1109/32.588521
   Izzo P, 2016, IEEE DECIS CONTR P, P4985, DOI 10.1109/CDC.2016.7799031
   Jensen O.H., 2006, MOBILE PROCESSES BIG
   Jongmans S.-S.T., 2011, INT WORKSH PROGR MUL, P133
   Jongmans SSTQ, 2010, LECT NOTES ARTIF INT, V6245, P219, DOI 10.1007/978-3-642-14977-1_17
   Kwiatkowska Marta, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P585, DOI 10.1007/978-3-642-22110-1_47
   Lestingi L, 2020, LECT NOTES COMPUT SC, V12310, P303, DOI 10.1007/978-3-030-58768-0_17
   Logan B, 2017, AAMAS'17: PROCEEDINGS OF THE 16TH INTERNATIONAL CONFERENCE ON AUTONOMOUS AGENTS AND MULTIAGENT SYSTEMS, P768
   Mansutti A, 2014, LECT NOTES COMPUT SC, V8460, P201, DOI 10.1007/978-3-662-43352-2_16
   McArthur SDJ, 2007, IEEE T POWER SYST, V22, P1743, DOI 10.1109/TPWRS.2007.908471
   Meseguer J, 2012, J LOGIC ALGEBR PROGR, V81, P721, DOI 10.1016/j.jlap.2012.06.003
   Milner R, 2006, INFORM COMPUT, V204, P60, DOI 10.1016/j.ic.2005.07.003
   Milner R., 2009, SPACE MOTION COMMUNI, DOI DOI 10.1017/CBO9780511626661
   Milner R, 2008, ELECTRON NOTES THEOR, V209, P5, DOI 10.1016/j.entcs.2008.04.002
   Mosses PD, 2004, J LOGIC ALGEBR PROGR, V60-1, P195, DOI 10.1016/j.jlap.2004.03.008
   Plotkin G. D., 1981, A structural approach to operational semantics
   Rao A. S., 1996, Agents Breaking Away. 7th European Workshop on Modelling Autonomous Agents in a Multi-Agent World, MAAMAW '96 Proceedings, P42, DOI 10.1007/BFb0031845
   Sardina S., 2006, P 5 INT JOINT C AUT, P1001, DOI DOI 10.1145/1160633.1160813
   Sardina S, 2011, AUTON AGENT MULTI-AG, V23, P18, DOI 10.1007/s10458-010-9130-9
   Sevegnani M, 2014, INT WORKSHOP META MO
   Sevegnani M, 2016, LECT NOTES COMPUT SC, V9780, P494, DOI 10.1007/978-3-319-41540-6_27
   Shapiro S., 2002, Proceedings of the First International Joint Conference on Autonomous Agents and Multiagent Systems, P19
   Doan TT, 2014, AAMAS'14: PROCEEDINGS OF THE 2014 INTERNATIONAL CONFERENCE ON AUTONOMOUS AGENTS & MULTIAGENT SYSTEMS, P149
   van Glabbeek RJ, 2004, J LOGIC ALGEBR PROGR, V60-1, P229, DOI 10.1016/j.jlap.2004.03.007
   van Riemsdijk MB, 2007, LECT NOTES ARTIF INT, V4371, P95
   Visser W, 2000, FIFTEENTH IEEE INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING, PROCEEDINGS, P3, DOI 10.1109/ASE.2000.873645
   Winikoff M., 2018, INT WORKSH ENG MULT, P139
   Wooldridge M, 2006, INT J ARTIF INTELL T, V15, P195, DOI 10.1142/S0218213006002631
   Xu MW, 2019, PROC INT C TOOLS ART, P85, DOI 10.1109/ICTAI.2019.00021
NR 67
TC 3
Z9 3
U1 0
U2 9
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR 1
PY 2022
VL 215
AR 102760
DI 10.1016/j.scico.2021.102760
EA DEC 2021
PG 35
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA YN9RV
UT WOS:000747588600005
OA Green Submitted, Green Accepted
DA 2024-07-18
ER

PT J
AU Nakano, K
AF Nakano, Keisuke
TI Time-symmetric Turing machines for computable involutions
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Computable involution; Self-inverse function; Reversible Turing machine;
   Time-symmetric machine; Bidirectional transformation language
ID LANGUAGE
AB A reversible Turing machine is a forward and backward deterministic Turing machine, which has been an expressive model of reversible computation. It is obvious that every reversible Turing machine computes an injective function under a function semantics in which the initial and the final configuration of a run corresponds to an input and an output of the function. Axelsen and Gluck showed the opposite direction that every injective computable function can be computed by a reversible Turing machine. This paper provides a similar result on involutions instead of injective functions. An involution, also called a self inverse function, is a function f that is its own inverse, i.e., f (f (x)) = x holds whenever f (x) is defined. The paper presents a computational model of involution as a variant of Turing machines, called a time-symmetric Turing machine. The computational model is shown to be expressive in the sense that not only does a time-symmetric Turing machine always compute an involution but also every computable involution can be computed by a time-symmetric Turing machine. As any involution is injective (hence reversible), any time-symmetric Turing machine is a reversible Turing machine. Furthermore, the existence of a universal time-symmetric Turing machine is shown under an appropriate redefinition of universality introduced by Axelsen and Gluck for reversible Turing machines. (C) 2021 The Author. Published by Elsevier B.V.
C1 [Nakano, Keisuke] Tohoku Univ, Aoba Ku, 2-1-1 Katahira, Sendai, Miyagi, Japan.
C3 Tohoku University
RP Nakano, K (corresponding author), Tohoku Univ, Aoba Ku, 2-1-1 Katahira, Sendai, Miyagi, Japan.
EM K.Nakano@acm.org
RI Nakano, Keisuke/GNH-5880-2022; Nakano, Keisuke/AIC-9113-2022
OI Nakano, Keisuke/0000-0003-1955-4225; 
FU JSPS KAKENHI [JP17H06099, JP18H04093, JP21K11744]
FX I am grateful to Robert Gluck who has kindly lectured to me about
   reversible Turing machines and their expressive power. I also thank
   Kanae Tsushima for her observation on the involutoriness of
   bidirectional transformation and Mirai Ikebuchi for carefully
   proofreading the manuscript. Furthermore, I want to appreciate anonymous
   reviewers' fruitful comments on a close connection with time-symmetric
   machines. This work was partially supported by JSPS KAKENHI Grant
   Numbers JP17H06099, JP18H04093, and JP21K11744.
CR [Anonymous], 2007, Introduction to Modern Cryptography: Principles and Protocols
   Axelsen HB, 2016, ACTA INFORM, V53, P509, DOI 10.1007/s00236-015-0253-y
   Axelsen HB, 2011, LECT NOTES COMPUT SC, V6604, P42, DOI 10.1007/978-3-642-19805-2_4
   BENNETT CH, 1973, IBM J RES DEV, V17, P525, DOI 10.1147/rd.176.0525
   Foster N., 2010, LECT NOTES COMPUTER, V7470, P1, DOI DOI 10.1007/978-3-642-32202-0_1
   Gajardo A, 2012, J COMPUT SYST SCI, V78, P1115, DOI 10.1016/j.jcss.2012.01.006
   Glück R, 2003, LECT NOTES COMPUT SC, V2895, P246
   Gluck R., 2016, Comput. Softw, V33, p3_108
   Glück R, 2017, IEICE T INF SYST, VE100D, P1026, DOI 10.1587/transinf.2016EDP7274
   Kirkeby M. H., 2019, LOGIC BASED PROGRAM, P243
   Kutrib Martin, 2013, Reversible Computation. 5th International Conference, RC 2013. Proceedings. LNCS 7936, P168, DOI 10.1007/978-3-642-38986-3_14
   LANDAUER R, 1961, IBM J RES DEV, V5, P183, DOI 10.1147/rd.53.0183
   LEWIS HR, 1982, THEOR COMPUT SCI, V19, P161, DOI 10.1016/0304-3975(82)90058-5
   Mu SC, 2004, LECT NOTES COMPUT SC, V3125, P289
   Nakano K., 2021, LIPICS, V202
   Nakano K, 2021, LECT NOTES COMPUT SC, V12805, P185, DOI 10.1007/978-3-030-79837-6_11
   Nakano K, 2020, LECT NOTES COMPUT SC, V12227, P54, DOI 10.1007/978-3-030-52482-1_3
   Sipser M., 2013, Introduction to the theory of computation, V3
   Yokoyama T., 2008, P 5 C COMPUTING FRON, P43, DOI DOI 10.1145/1366230.1366239
   ZAGIER D, 1990, AM MATH MON, V97, P144, DOI 10.2307/2323918
NR 20
TC 2
Z9 2
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR 1
PY 2022
VL 215
AR 102748
DI 10.1016/j.scico.2021.102748
EA NOV 2021
PG 14
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA YN9RV
UT WOS:000747588600009
OA hybrid
DA 2024-07-18
ER

PT J
AU Dimovski, AS
   Apel, S
   Legay, A
AF Dimovski, Aleksandar S.
   Apel, Sven
   Legay, Axel
TI Several lifted abstract domains for static analysis of numerical program
   families
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Static analysis; Abstract interpretation; Software product lines; Lifted
   domains: tuples, decision trees, and BDDs
ID VARIABILITY
AB Lifted (family-based) static analysis based on abstract interpretation is capable of analyzing all variants of a program family (or any other configurable software system), simultaneously, in a single run without generating any of the variants explicitly. The elements of the underlying lifted domain are tuples, which maintain one property per system variant. Still, explicit property enumeration in tuples, one by one for all variants, immediately yields combinatorial explosion. This is particularly apparent in the case of program families that, apart from Boolean features, contain also numerical features with large domains, thus giving rise to astronomical configuration spaces. The key for an efficient lifted analysis is a proper handling of variability-specific constructs of the language (e.g., feature-based runtime tests and #if directives). In this work, we introduce new symbolic representations of the lifted domain that can efficiently analyze program families with numerical features. This makes sharing between property elements corresponding to different variants explicitly possible. In the first approach, elements of the new lifted domain are decision trees, in which decision nodes are labeled with linear constraints defined over numerical features and the leaf nodes belong to an existing single program analysis domain. The lifted domain is parametric in the choice of the domains for representing linear constraints and leaf nodes. Furthermore, we propose another alternative approach for efficient lifted analysis. We encode a program family with numerical features as a family with only Boolean features, and then use a BDD lifted domain to analyze the resulting program family. To illustrate the potential of our representations, we have implemented an experimental lifted static analyzer, called SPLNum2ANALyzER, for inferring invariants of #if-annotated C programs. The tool implements all three approaches for lifted analysis based on abstract interpretation: tuple-based, decision tree-based, and BDD-based. It uses existing numerical abstract domains (e.g., intervals, octagons, polyhedra) from the APRON library as parameters. An empirical evaluation on benchmarks from SV-COMP and BusyBox yields promising results indicating that our tool can be successfully used for analyzing program families with very large configuration spaces. (c) 2021 Elsevier B.V. All rights reserved.
C1 [Dimovski, Aleksandar S.] Mother Teresa Univ, 12 Udarna Brigada 2a, Skopje 1000, North Macedonia.
   [Apel, Sven] Saarland Univ, Campus E1-1, D-66123 Saarbrucken, Germany.
   [Legay, Axel] Catholic Univ Louvain, B-1348 Ottignies, Belgium.
C3 Saarland University; Universite Catholique Louvain
RP Dimovski, AS (corresponding author), Mother Teresa Univ, 12 Udarna Brigada 2a, Skopje 1000, North Macedonia.
EM aleksandar.dimovski@unt.edu.mk
RI Dimovski, Aleksandar/ABC-8474-2021
OI Dimovski, Aleksandar/0000-0002-3601-2631; Apel, Sven/0000-0003-3687-2233
CR Apel S., 2011, 2011 26th IEEE/ACM International Conference on Automated Software Engineering, P372, DOI 10.1109/ASE.2011.6100075
   Apel S, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P482, DOI 10.1109/ICSE.2013.6606594
   Bodden E, 2013, ACM SIGPLAN NOTICES, V48, P355, DOI 10.1145/2499370.2491976
   Brabrand C, 2013, LECT NOTES COMPUT SC, V7800, P73, DOI 10.1007/978-3-642-36964-3_3
   Bradley AR, 2005, LECT NOTES COMPUT SC, V3580, P1349
   BRYANT RE, 1986, IEEE T COMPUT, V35, P677, DOI 10.1109/TC.1986.1676819
   Chang BYE, 2013, ELECTRON P THEOR COM, P161, DOI 10.4204/EPTCS.129.11
   Chen JJ, 2015, LECT NOTES COMPUT SC, V9291, P36, DOI 10.1007/978-3-662-48288-9_3
   Cordy M, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P472, DOI 10.1109/ICSE.2013.6606593
   Cousot P, 1999, NATO ADV SCI I F-COM, V173, P421
   COUSOT P, 1992, LECT NOTES COMPUT SC, V631, P269, DOI 10.1007/3-540-55844-6_142
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Cousot P, 2010, LECT NOTES COMPUT SC, V6200, P72, DOI 10.1007/978-3-642-13754-9_5
   Cousot P, 2009, FORM METHOD SYST DES, V35, P229, DOI 10.1007/s10703-009-0089-6
   Cousot Patrick, 1978, P 5 ACM SIGACT SIGPL, p84S96, DOI DOI 10.1145/512760.512770
   Dimovski A.S., 2020, PRILOZI CONTRIBUTION, V41, P13
   Dimovski A.S., 2021, 35 EUROPEAN C OBJECT, V194, p14:1, DOI [10.4230/LIPIcs.ECOOP.2021.14, DOI 10.4230/LIPICS.ECOOP.2021.14]
   Dimovski A. S., 2015, LIPICS, V37, P247
   Dimovski A.S, 2021, TOOL ARTIFACT SPLNUM
   Dimovski AS, 2021, J COMPUT LANG, V63, DOI 10.1016/j.cola.2021.101032
   Dimovski AS, 2021, LECT NOTES COMPUT SC, V12673, P95, DOI 10.1007/978-3-030-76384-8_7
   Dimovski AS, 2021, LECT NOTES COMPUT SC, V12649, P67, DOI 10.1007/978-3-030-71500-7_4
   Dimovski AS, 2020, THEOR COMPUT SCI, V837, P181, DOI 10.1016/j.tcs.2020.06.011
   Dimovski AS, 2019, PROCEEDINGS OF THE 18TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON GENERATIVE PROGRAMMING: CONCEPTS AND EXPERIENCES (GPCE '19), P102, DOI 10.1145/3357765.3359518
   Dimovski AS, 2020, LECT NOTES COMPUT SC, V12076, P182, DOI 10.1007/978-3-030-45234-6_9
   Dimovski AS, 2020, INT J SOFTW TOOLS TE, V22, P35, DOI 10.1007/s10009-019-00528-0
   Dimovski AS, 2019, FORM ASP COMPUT, V31, P231, DOI 10.1007/s00165-019-00479-y
   Dimovski A, 2017, INT J SOFTW TOOLS TE, V19, P585, DOI 10.1007/s10009-016-0425-2
   Gazzillo P, 2012, ACM SIGPLAN NOTICES, V47, P323, DOI 10.1145/2345156.2254103
   Gurfinkel A, 2010, LECT NOTES COMPUT SC, V6337, P287, DOI 10.1007/978-3-642-15769-1_18
   Henard C, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 1, P517, DOI 10.1109/ICSE.2015.69
   Huth Michael, 2004, Logic in Computer Science: Modelling and reasoning about systems
   Jeannet B, 2009, SEFM 2009: SEVENTH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING AND FORMAL METHODS, P83, DOI 10.1109/SEFM.2009.29
   Jeannet B, 2009, LECT NOTES COMPUT SC, V5643, P661, DOI 10.1007/978-3-642-02658-4_52
   Kastner Christian, 2010, THESIS U MAGDEBURG
   Kildall G. A., 1973, Conference Record of ACM Symposium on Principles of Programming Languages, P194
   Meinicke J, 2016, IEEE INT CONF AUTOM, P483, DOI 10.1145/2970276.2970322
   Midtgaard J, 2015, SCI COMPUT PROGRAM, V105, P145, DOI 10.1016/j.scico.2015.04.005
   Mine A., 2006, Higher-Order and Symbolic Computation, V19, P31, DOI 10.1007/s10990-006-8609-1
   Miné A, 2017, FOUND TRENDS PROGRAM, V4, pI, DOI 10.1561/2500000034
   Munoz D.-J., 2019, P 23 INT SYSTEMS SOF, VA, P289
   Northrop L., 2001, SOFTWARE PRODUCT LIN
   Schrammel P, 2011, LECT NOTES COMPUT SC, V6887, P233, DOI 10.1007/978-3-642-23702-7_19
   Singh G, 2015, ACM SIGPLAN NOTICES, V50, P303, DOI [10.1145/2813885.2738000, 10.1145/2737924.2738000]
   Solar-Lezama Armando, 2013, International Journal on Software Tools for Technology Transfer, V15, P475, DOI 10.1007/s10009-012-0249-7
   Thüm T, 2014, ACM COMPUT SURV, V47, DOI 10.1145/2580950
   Urban Caterina, 2015, Tools and Algorithms for the Construction and Analysis of Systems. 21st International Conference, TACAS 2015, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2015. Proceedings: LNCS 9035, P464, DOI 10.1007/978-3-662-46681-0_46
   Urban C, 2014, LECT NOTES COMPUT SC, V8723, P302, DOI 10.1007/978-3-319-10936-7_19
   Urban Caterina, 2015, THESIS ECOLE NORMALE
   Von Rhein A, 2018, ACM T SOFTW ENG METH, V27, DOI 10.1145/3280986
   von Rhein A, 2016, J LOG ALGEBR METHODS, V85, P125, DOI 10.1016/j.jlamp.2015.06.007
NR 51
TC 5
Z9 6
U1 1
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 1
PY 2022
VL 213
AR 102725
DI 10.1016/j.scico.2021.102725
EA SEP 2021
PG 25
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA WK4MQ
UT WOS:000709701700004
DA 2024-07-18
ER

PT J
AU Ali, A
   Gravino, C
AF Ali, Asad
   Gravino, Carmine
TI Evaluating the impact of feature selection consistency in software
   prediction
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Feature selection consistency; Software efforts estimation; Software
   faults prediction; Empirical study
ID PARTICLE SWARM OPTIMIZATION; MEAN ABSOLUTE ERROR; STATISTICS; ALGORITHM
AB Many empirical software engineering studies have employed feature selection algorithms to exclude the irrelevant and redundant features from the datasets with the aim to improve prediction accuracy achieved with machine learning-based estimation models as well as their generalizability. However, little has been done to investigate how consistently these feature selection algorithms produce features/metrics across different training samples, which is an important point for the interpretation of the trained models. The interpretation of the models largely depends on the features of the analyzed datasets, so it is recommended to evaluate the potential of various feature selection algorithms in terms of how consistently they extract features from the employed datasets. In this study, we consider eight different feature selection algorithms to evaluate how consistently they select features across different folds of k-fold cross-validation as well as when small changes are made in the training data. To provide a stable and generalized conclusion, we investigate data from two different domains, i.e., six datasets from the domain of Software Development Effort Estimation (SDEE) and six datasets from the Software Fault Prediction (SFP) domain. Our results reveal that a feature selection algorithm could produce 20-100% inconsistent features with an SDEE dataset and 18.8-95.3% inconsistent features in the case of an SFP dataset. The analysis also reveals that it is not necessarily true that the most consistent feature selection algorithm results to be the most accurate one (i.e., leads to better prediction accuracy) in the case of SDEE datasets, while with SFP datasets, the analysis highlights that the most consistent feature selection algorithm also results to be the most accurate in predicting faults. (c) 2021 Elsevier B.V. All rights reserved.
C1 [Ali, Asad; Gravino, Carmine] Univ Salerno, Fisciano, SA, Italy.
C3 University of Salerno
RP Ali, A (corresponding author), Univ Salerno, Fisciano, SA, Italy.
EM abasyn.asad@gmail.com
OI Ali, Asad/0000-0001-7465-1090
CR ALBRECHT AJ, 1983, IEEE T SOFTWARE ENG, V9, P639, DOI 10.1109/TSE.1983.235271
   Portilla-Flores EA, 2017, IEEE ACCESS, V5, P25759, DOI 10.1109/ACCESS.2017.2771741
   Ali A., 2019, P EUROMICRO C SOFTWA
   Ali A, 2019, UEEE INT SYM PERS IN, P1615, DOI [10.1109/pimrc.2019.8904367, 10.1109/ccnc.2019.8651812, 10.1109/icomet.2019.8673494]
   Ali A, 2021, SCI COMPUT PROGRAM, V205, DOI 10.1016/j.scico.2021.102621
   [Anonymous], 2007, The promise repository of empirical software engineering data
   [Anonymous], 2008, Proceedings of the 4th international workshop on Predictor models in software engineering, DOI [DOI 10.1145/1370788.1370804, 10.1145/1370788.1370804]
   [Anonymous], 2017, IEEE T SOFTWARE ENG, DOI DOI 10.1109/TSE.2016.2584050
   [Anonymous], 2002, Applied Statistics for Software Managers
   Azzeh M., 2011, Proceedings of the 7th International Conference on Predictive Models in Software Engineering, p6:1, DOI [DOI 10.1145/2020390.2020396, 10.1145/2020390.2020396]
   Baker YS, 2014, INT CONF MACH LEARN, P241, DOI 10.1109/ICMLC.2014.7009123
   BaniMustafa A, 2018, INT CONF COMP SCI, P249, DOI 10.1109/CSIT.2018.8486222
   Benala TR, 2018, SWARM EVOL COMPUT, V38, P158, DOI 10.1016/j.swevo.2017.07.009
   Botchkarev A., 2018, Performance Metrics (Error Measures) in Machine Learning Regression, Forecasting and Prognostics: Properties and Typology, DOI 10.28945/4184
   Briand L. C., 1999, Proceedings of the 1999 International Conference on Software Engineering (IEEE Cat. No.99CB37002), P313, DOI 10.1109/ICSE.1999.841022
   Chaturvedi K.K., 2012, 2012 CSI 6 INT C SOF, P1
   Dalal N, 2005, PROC CVPR IEEE, P886, DOI 10.1109/cvpr.2005.177
   Rodríguez JD, 2010, IEEE T PATTERN ANAL, V32, P569, DOI 10.1109/TPAMI.2009.187
   Doquire Gauthier, 2011, Data Warehousing and Knowledge Discovery. Proceedings 13th International Conference, DaWaK 2011, P330, DOI 10.1007/978-3-642-23544-3_25
   Dorigo M., 2011, Encyclopedia of machine learning, P36, DOI [10.1007/978-0-387-30164-8_22, DOI 10.1007/978-0-387-30164-8]
   Falessi D., 2018, ARXIV180901510
   Fong S, 2018, PROCEEDINGS OF 2018 10TH INTERNATIONAL CONFERENCE ON MACHINE LEARNING AND COMPUTING (ICMLC 2018), P122, DOI 10.1145/3195106.3195167
   Gandomi AH, 2012, COMMUN NONLINEAR SCI, V17, P4831, DOI 10.1016/j.cnsns.2012.05.010
   Ghamisi P, 2015, IEEE GEOSCI REMOTE S, V12, P309, DOI 10.1109/LGRS.2014.2337320
   Ghotra B, 2017, IEEE WORK CONF MIN S, P146, DOI 10.1109/MSR.2017.18
   Gil Y, 2017, EMPIR SOFTW ENG, V22, P2585, DOI 10.1007/s10664-017-9513-5
   Glover F., 1997, TABU SEARCH
   González-Ladrón-de-Guevara F, 2016, J SYST SOFTWARE, V113, P188, DOI 10.1016/j.jss.2015.11.040
   Goyal S., 2019, P ICETIT, P183
   Hall M., 2009, SIGKDD EXPLORATIONS, V11, P10, DOI [10.1145/1656274.1656278, DOI 10.1145/1656274.1656278]
   He P., 2016, ARXIV161209065
   Hosni M., 2017, P 27 INT WORKSH SOFT, P207
   Jiarpakdee J, 2020, EMPIR SOFTW ENG, V25, P3590, DOI 10.1007/s10664-020-09848-1
   Jiarpakdee J, 2016, IEEE INT SYMP SOFTW, P51, DOI 10.1109/ISSREW.2016.30
   Kalousis A, 2007, KNOWL INF SYST, V12, P95, DOI 10.1007/s10115-006-0040-8
   KEMERER CF, 1987, COMMUN ACM, V30, P416, DOI 10.1145/22899.22906
   Keung J, 2013, AUTOMAT SOFTW ENG, V20, P543, DOI 10.1007/s10515-012-0108-5
   Kitchenham B. A., 2001, IEE Proceedings-Software, V148, P81, DOI 10.1049/ip-sen:20010506
   Vinh LT, 2012, APPL INTELL, V37, P100, DOI 10.1007/s10489-011-0315-y
   Langdon WB, 2016, INFORM SOFTWARE TECH, V73, P16, DOI 10.1016/j.infsof.2016.01.003
   Liu Q, 2019, CLUSTER COMPUT, V22, pS6953, DOI 10.1007/s10586-018-1884-x
   Lu HH, 2014, PROC INT SYMP SOFTW, P312, DOI 10.1109/ISSRE.2014.35
   Lu J., 2010, 2010 INT C COMP APPL, V6, pV6
   Mende Thilo., 2010, P 6 INT C PREDICTIVE, P5
   Meneely A., 2010, SOFTWARE METRICS VAL
   Menzies T, 2018, IEEE SOFTWARE, V35, P96, DOI 10.1109/MS.2018.1661323
   Nilsson R, 2007, J MACH LEARN RES, V8, P589
   Nogueira S., 2016, Joint European Conference on Machine Learning and Knowledge Discovery in Databases, P442, DOI [10.1007/978-3-319-46227-1_28, DOI 10.1007/978-3-319-46227-1_28]
   Piotrowski AP, 2020, SWARM EVOL COMPUT, V58, DOI 10.1016/j.swevo.2020.100718
   Qi J, 2020, IEEE SIGNAL PROC LET, V27, P1485, DOI 10.1109/LSP.2020.3016837
   Sachan RK, 2016, PROCEDIA COMPUT SCI, V89, P492, DOI 10.1016/j.procs.2016.06.107
   Sarro F, 2018, ACM T SOFTW ENG METH, V27, DOI 10.1145/3234940
   Shepperd M, 1997, IEEE T SOFTWARE ENG, V23, P736, DOI 10.1109/32.637387
   Shepperd M, 2013, IEEE T SOFTWARE ENG, V39, P1208, DOI 10.1109/TSE.2013.11
   Shepperd M, 2012, INFORM SOFTWARE TECH, V54, P820, DOI 10.1016/j.infsof.2011.12.008
   Shirabad S., 2005, The PROMISE Repository of Software Engineering Databases
   Sigweni B., 2015, Finnish Software Effort Dataset
   Tantithamthavorn C, 2019, IEEE T SOFTWARE ENG, V45, P683, DOI 10.1109/TSE.2018.2794977
   Tóth Z, 2016, LECT NOTES COMPUT SC, V9789, P625, DOI 10.1007/978-3-319-42089-9_44
   Trelea IC, 2003, INFORM PROCESS LETT, V85, P317, DOI 10.1016/S0020-0190(02)00447-7
   Vargha A, 2000, J EDUC BEHAV STAT, V25, P101, DOI 10.3102/10769986025002101
   Wahono RS, 2014, ADV SCI LETT, V20, P239, DOI 10.1166/asl.2014.5283
   Xue B, 2014, APPL SOFT COMPUT, V18, P261, DOI 10.1016/j.asoc.2013.09.018
   Yadav S, 2016, INT CONF ADV COMPU, P78, DOI 10.1109/IACC.2016.25
   Yang P., 2013, Biological Knowledge Discovery Handbook, P333
   Yang XS, 2014, INT J SWARM INTELL R, V5, P1, DOI 10.4018/ijsir.2014040101
   Yanli Liu, 2012, Information Computing and Applications. Proceedings of the Third International Conference, ICICA 2012, P246, DOI 10.1007/978-3-642-34062-8_32
   Yue Jiang, 2009, 2009 20th International Symposium on Software Reliability Engineering (ISSRE 2009), P99, DOI 10.1109/ISSRE.2009.13
   Yun F. H., 2010, China: Effort Estimation Dataset
   Zakrani A., 2018, International Journal of Intelligent Engineering Systems, V11, P300
NR 70
TC 6
Z9 6
U1 0
U2 5
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 1
PY 2022
VL 213
AR 102715
DI 10.1016/j.scico.2021.102715
EA SEP 2021
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA WK4MQ
UT WOS:000709701700002
DA 2024-07-18
ER

PT J
AU van den Bos, P
   Vaandrager, F
AF van den Bos, Petra
   Vaandrager, Frits
TI State identification for labeled transition systems with inputs and
   outputs
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Model-based testing; State identification; Transition systems with
   inputs and outputs; Adaptive distinguishing test
ID MACHINES
AB For Finite State Machines (FSMs) a rich testing theory has been developed to discover aspects of their behavior and ensure their correct functioning. Although this theory has been frequently used, e.g. to check conformance of protocol implementations, its applicability is limited by restrictions of FSMs, in which inputs and outputs alternate, and outputs are determined by the previous input and state. Labeled Transition Systems with inputs and outputs (LTSs), as studied in ioco testing theory, provide a richer framework for testing component oriented systems, but lack the algorithms for test generation from FSM theory.
   In this article, we propose an algorithm for the fundamental problem of state identification during testing of LTSs. Our algorithm is a direct generalization of the well-known algorithm for computing adaptive distinguishing sequences for FSMs proposed by Lee and Yannakakis. Our algorithm has to deal with so-called compatible states, states that cannot be distinguished. Analogous to the result of Lee and Yannakakis, we prove that if an adaptive test exists that distinguishes all pairs of (incompatible) states of an LTS, our algorithm will find one. In practice, such perfect adaptive tests typically do not exist. However, in experiments with an implementation of our algorithm on a collection of (both academic and industrial) benchmarks, we find that that the adaptive tests produced by our algorithm still distinguish at least 99% of the incompatible state pairs. (C) 2021 The Author(s). Published by Elsevier B.V.
C1 [van den Bos, Petra] Univ Twente, Formal Methods & Tools Grp, POB 217, NL-7500 AE Enschede, Netherlands.
   [Vaandrager, Frits] Radboud Univ Nijmegen, Fac Sci, Software Sci Grp, Mailbox 47,POB 9010, NL-6500 GL Nijmegen, Netherlands.
C3 University of Twente; Radboud University Nijmegen
RP van den Bos, P (corresponding author), Univ Twente, Formal Methods & Tools Grp, POB 217, NL-7500 AE Enschede, Netherlands.
EM p.vandenbos@utwente.nl; f.vaandrager@cs.ru.nl
FU Netherlands Organisation of Scientific Research (NWO) [13859,
   639.023.710]
FX This research was funded by the Netherlands Organisation of Scientific
   Research (NWO) under project 13859 (SUpersizing ModelBAsed Testing,
   SUMBAT) and project 639.023.710 (Maximal Reliability of Concurrent and
   Distributed Software, Mercedes) . We would like to thank Jan Tretmans
   and Ramon Janssen for helping with obtaining the case studies, and the
   anonymous reviewers for their valuable suggestions, which helped us to
   improve this article.
CR Alur R., 1995, Proceedings of the Twenty-Seventh Annual ACM Symposium on the Theory of Computing, P363, DOI 10.1145/225058.225161
   Baier C, 2008, PRINCIPLES OF MODEL CHECKING, P1
   Benes N, 2015, 2015 18th International ACM SIGSOFT Symposium on Component-Based Software Engineering (CBSE), P101, DOI 10.1145/2737166.2737175
   Bensalem S, 2008, WODES' 08: PROCEEDINGS OF THE 9TH INTERNATIONAL WORKSHOP ON DISCRETE EVENT SYSTEMS, P225, DOI 10.1109/WODES.2008.4605949
   Bunte O, 2019, LECT NOTES COMPUT SC, V11428, P21, DOI 10.1007/978-3-030-17465-1_2
   Cormen T.H., 2009, INTRO ALGORITHMS
   Dijkstra E. W., 1978, Programming methodology. A collection of articles by members of IFIP WG2.3, P166
   Dorofeeva R, 2010, INFORM SOFTWARE TECH, V52, P1286, DOI 10.1016/j.infsof.2010.07.001
   El-Fakih K, 2019, COMPUT J, V62, P757, DOI 10.1093/comjnl/bxy086
   El-Fakih K, 2018, FORM ASP COMPUT, V30, P319, DOI 10.1007/s00165-017-0450-2
   Fiterau-Brostean P, 2016, LECT NOTES COMPUT SC, V9780, P454, DOI 10.1007/978-3-319-41540-6_25
   Fokkink W. J., 2018, DISTRIBUTED ALGORITH, Vsecond
   Gill A., 1962, Introduction to the Theory of Finite-State Machines
   Groote JF, 2014, MODELING AND ANALYSIS OF COMMUNICATING SYSTEMS, P1
   Hierons RM, 2004, IEEE T COMPUT, V53, P1330, DOI 10.1109/TC.2004.85
   Hooman Jozef, 2019, COMMA TUTORIAL VERSI
   Hughes J, 2016, IEEE INT CONF SOFTW, P135, DOI 10.1109/ICST.2016.37
   Kurtev I, 2017, MODELSWARD: PROCEEDINGS OF THE 5TH INTERNATIONAL CONFERENCE ON MODEL-DRIVEN ENGINEERING AND SOFTWARE DEVELOPMENT, P345, DOI 10.5220/0006133103450352
   Kushik Natalia, 2013, Testing Software and Systems. 25th IFIP WG 6.1 International Conference, ICTSS 2013. Proceedings: LNCS 8254, P33, DOI 10.1007/978-3-642-41707-8_3
   Kushik N, 2016, INT J SOFTW TOOLS TE, V18, P251, DOI 10.1007/s10009-014-0357-7
   Lee D, 1996, P IEEE, V84, P1090, DOI 10.1109/5.533956
   LEE D, 1994, IEEE T COMPUT, V43, P306, DOI 10.1109/12.272431
   Mazala R, 2002, LECT NOTES COMPUT SC, V2500, P23
   Milner R., 1989, Communication and concurrency
   Moerman Joshua, 2019, THESIS RADHOUD U NIJ
   Moore E.F., 1956, Automata studies, P129
   Neider Daniel, 2019, Models, Mindsets, Meta. The What, the How, and the Why Not? Essays Dedicated to Bernhard Steffen on the Occasion of His 60th Birthday. Lecture Notes in Computer Science (LNCS 11200), P390, DOI 10.1007/978-3-030-22348-9_23
   Petrenko A, 2006, LECT NOTES COMPUT SC, V3997, P118
   Petrenko A, 2011, LECT NOTES COMPUT SC, V7019, P162, DOI 10.1007/978-3-642-24580-0_12
   Simao A, 2013, ELECTRON PROC THEOR, P56, DOI 10.4204/EPTCS.141.5
   Smeenk Wouter, 2015, Formal Methods and Software Engineering. 17th International Conference on Formal Engineering Methods (ICFEM 2015). Proceedings: LNCS 9407, P67, DOI 10.1007/978-3-319-25423-4_5
   Smeenk W., 2012, THESIS RADBOUD U NIJ
   Sokolovskii M. N., 1971, Cybernetics, V7, P988
   Strahonja V., 2019, CECIIS P 30 CTR EUR, P247
   Tretmans Jan, 2008, Formal Methods and Testing. An Outcome of the FORTEST Network. Revised Selected Papers, P1, DOI 10.1007/978-3-540-78917-8_1
   van den Bos Petra, 2020, Formal Aspects of Component Software. 16th International Conference, FACS 2019. Proceedings. Lecture Notes in Computer Science (LNCS 12018), P191, DOI 10.1007/978-3-030-40914-2_10
   van den Bos P, 2018, ELECTRON P THEOR COM, P118, DOI 10.4204/EPTCS.277.9
   van den Bos P, 2019, SOFTWARE QUAL J, V27, P563, DOI 10.1007/s11219-018-9422-x
   Willemse TAC, 2007, LECT NOTES COMPUT SC, V4346, P132
   YANNAKAKIS M, 1995, J COMPUT SYST SCI, V50, P209, DOI 10.1006/jcss.1995.1019
NR 40
TC 0
Z9 0
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 1
PY 2021
VL 209
AR 102678
DI 10.1016/j.scico.2021.102678
EA JUN 2021
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA SN6KV
UT WOS:000658397500002
OA Green Published, Green Submitted, hybrid
DA 2024-07-18
ER

PT J
AU Jacquet, JM
   Barkallah, M
AF Jacquet, Jean-Marie
   Barkallah, Manel
TI Anemone: A workbench for the Multi-Bach coordination language
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Coordination languages; Bach; Animation; Verification
ID TIMED COORDINATION; B-MODELS; EXPRESSIVENESS; MIDDLEWARE; TOOL
AB Although many research efforts have been spent on the theory and implementation of data-based coordination languages, not much effort has been devoted to constructing programming environments to analyze and reason over programs written in these languages. This paper proposes a workbench for describing concurrent systems using a Linda-like language, for animating them and for reasoning over them using a reachability logic. (C) 2020 Elsevier B.V. All rights reserved.
C1 [Jacquet, Jean-Marie; Barkallah, Manel] Univ Namur, Fac Comp Sci, Nadi Res Inst, Rue Grandgagnage 21, Namur, Belgium.
C3 University of Namur
RP Jacquet, JM (corresponding author), Univ Namur, Fac Comp Sci, Nadi Res Inst, Rue Grandgagnage 21, Namur, Belgium.
EM jean-marie.jacquet@unamur.be; manel.barkallah@unamur.be
OI Barkallah, Manel/0000-0003-2608-5658; Jacquet,
   Jean-Marie/0000-0001-9531-0519
CR Banville M., 1996, LECT NOTES COMPUTER, V1061, P57
   Bettini Lorenzo, 2019, Models, Languages, and Tools for Concurrent and Distributed Programming: Essays Dedicated to Rocco De Nicola on the Occasion of His 65th Birthday. Lecture Notes in Computer Science (LNCS 11665), P115, DOI 10.1007/978-3-030-21485-2_8
   Bettini L, 2003, LECT NOTES COMPUT SC, V2874, P88
   Bosschere K.D., 1996, COORDINATION LANGUAG, V1061, P142, DOI DOI 10.1007/3-540-61052-9_44
   Brogi A, 2003, SCI COMPUT PROGRAM, V46, P71, DOI 10.1016/S0167-6423(02)00087-4
   Brogi A., 1998, ELECTRONICAL NOTES T, V16, P61
   Calzolai F, 2008, LECT NOTES COMPUT SC, V5100, P54
   CARRIERO N, 1989, COMMUN ACM, V32, P444, DOI 10.1145/63334.63337
   Cerone A., 2018, LECT NOTES COMPUTER, V10729
   Cranen S, 2013, LECT NOTES COMPUT SC, V7795, P199, DOI 10.1007/978-3-642-36742-7_15
   Cremonini M., 1999, LECT NOTES COMPUTER, V1594, P416
   Cruz R, 2018, LECT NOTES COMPUT SC, V11176, P336, DOI 10.1007/978-3-030-04771-9_25
   Darquennes Denis, 2018, Coordination Models and Languages. 20th IFIP WG 6.1 International Conference, COORDINATION 2018. Held as Part of the 13th International Federated Conference on Distributed Computing Techniques, DisCoTec 2018. Proceedings: LNCS 10852, P81, DOI 10.1007/978-3-319-92408-3_4
   Darquennes D., 2013, P EUR C SERV OR CLOU, P189, DOI DOI 10.1007/978-3-642-45364-9_16
   Darquennes D, 2015, ELECTRON PROC THEOR, P36, DOI 10.4204/EPTCS.175.3
   De Nicola R, 2018, LECT NOTES COMPUT SC, V11176, P351, DOI 10.1007/978-3-030-04771-9_26
   De Nicola R, 2018, SCI COMPUT PROGRAM, V168, P71, DOI 10.1016/j.scico.2018.08.006
   Dukielska M, 2010, ITICSE 2010: PROCEEDINGS OF THE 2010 ACM SIGCSE ANNUAL CONFERENCE ON INNOVATION AND TECHNOLOGY IN COMPUTER SCIENCE EDUCATION, P23
   Emerson E. A., 1990, Handbook of Theoretical Computer Science, VB, P995, DOI [10.1016/b978-0-444-88074-1.50021-4, DOI 10.1016/B978-0-444-88074-1.50021-4]
   Fok CL, 2004, LECT NOTES COMPUT SC, V2949, P135
   GELERNTER D, 1992, COMMUN ACM, V35, P96, DOI 10.1145/129630.129635
   Harel D, 2003, LECT NOTES COMPUT SC, V2852, P136
   Harrison MD, 2019, IEEE T SOFTWARE ENG, V45, P802, DOI 10.1109/TSE.2018.2804939
   JACQUET CO, 2019, LECT NOTES COMPUTER, P75
   Jacquet J.-M., 2007, P 1 ERCIM WORKSHOP E, P107
   Jacquet J.-M., 2020, TECH REP
   Jacquet JM, 2016, SCI COMPUT PROGRAM, V115, P149, DOI 10.1016/j.scico.2015.10.011
   Jacquet JM, 2016, SCI COMPUT PROGRAM, V115, P79, DOI 10.1016/j.scico.2015.08.003
   Jacquet JM, 2009, THEOR COMPUT SCI, V410, P221, DOI 10.1016/j.tcs.2008.09.020
   Jacquet JM, 2000, LECT NOTES COMPUT SC, V1906, P81
   Kokash N, 2013, IEEE T SERV COMPUT, V6, P186, DOI 10.1109/TSC.2011.46
   KOZEN D, 1983, THEOR COMPUT SCI, V27, P333, DOI 10.1016/0304-3975(82)90125-6
   Kuhn Eva, 2018, Coordination Models and Languages. 20th IFIP WG 6.1 International Conference, COORDINATION 2018. Held as Part of the 13th International Federated Conference on Distributed Computing Techniques, DisCoTec 2018. Proceedings: LNCS 10852, P200, DOI 10.1007/978-3-319-92408-3_9
   Ladenberger L, 2016, LECT NOTES COMPUT SC, V9763, P403, DOI 10.1007/978-3-319-41591-8_27
   Ladenberger L, 2009, LECT NOTES COMPUT SC, V5825, P202, DOI 10.1007/978-3-642-04570-7_17
   Linden I, 2004, LECT NOTES COMPUT SC, V2949, P232
   Linden I., 2004, ELECTRONICAL NOTES T, V97, P125, DOI [10.1016/j.entcs.2004.04.034, DOI 10.1016/J.ENTCS.2004.04.034]
   Linden I, 2007, ELECTRON NOTES THEOR, V180, P71, DOI 10.1016/j.entcs.2006.10.047
   Mazzara M., 2018, LECT NOTES COMPUTER, V11176
   Méry D, 2010, COMPLEX SYSTEMS DESIGN AND MANAGEMENT, P49, DOI 10.1007/978-3-642-15654-0_3
   Murphy AL, 2006, ACM T SOFTW ENG METH, V15, P279, DOI 10.1145/1151695.1151698
   Papadopoulos G., 1998, SENR9834 CWI
   Proenca Jose, 2011, THESIS
   Servat T, 2007, LECT NOTES COMPUT SC, V4355, P274
   Tolksdorf R., 1996, Coordination Languages and Models. First International Conference COORDINATION '96. Proceedings, P386
   Van HT, 2004, 12TH IEEE INTERNATIONAL REQUIREMENTS ENGINEERING CONFERENCE, PROCEEDINGS, P218
   Westergaard M, 2006, LECT NOTES COMPUT SC, V4024, P431
NR 47
TC 1
Z9 1
U1 1
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 1
PY 2021
VL 202
AR 102579
DI 10.1016/j.scico.2020.102579
PG 10
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA PC2SJ
UT WOS:000596856600007
DA 2024-07-18
ER

PT J
AU López, L
   Manzano, M
   Gómez, C
   Oriol, M
   Farré, C
   Franch, X
   Martínez-Fernández, S
   Vollmer, AM
AF Lopez, L.
   Manzano, M.
   Gomez, C.
   Oriol, M.
   Farre, C.
   Franch, X.
   Martienez-Fernaendez, S.
   Vollmer, A. M.
TI QaSD: A Quality-aware Strategic Dashboard for supporting decision makers
   in Agile Software Development
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Decision-making Dashboard; Software analytics; Agile; Forecasting;
   What-if analysis
AB Software and data analytics solutions support improving development processes and the quality of the software produced in Agile Software Development (ASD). However, decision makers in software teams (e.g., product owner, project manager) are demanding powerful tools providing evidence data that support their strategic decision-making processes. In this paper, we present and provide access to QaSD, a Quality-aware Strategic Dashboard supporting decision makers in ASD. The dashboard allows decision makers to define high-level strategic indicators (e.g., customer satisfaction, process performance) related to software quality and to measure, explore, simulate and forecast the values of those indicators in order to explain and justify their decisions. Moreover, we also provide the results of a conducted evaluation of the dashboard quality in a real environment that evaluated the QaSD as usable, easy to use, with good navigation, and reliable. (C) 2020 Elsevier B.V. All rights reserved.
C1 [Lopez, L.; Manzano, M.; Gomez, C.; Oriol, M.; Farre, C.; Franch, X.; Martienez-Fernaendez, S.] Univ Politecn Cataluna, Barcelona, Spain.
   [Vollmer, A. M.] Fraunhofer Inst Expt Software Engn, Kaiserslautern, Germany.
C3 Universitat Politecnica de Catalunya; Fraunhofer Gesellschaft
RP López, L (corresponding author), Univ Politecn Cataluna, Barcelona, Spain.
EM llopez@essi.upc.edu
RI Franch, Xavier/A-8588-2008; Hakami, Halemah/KCL-5084-2024; López,
   Lidia/HGE-0751-2022; Lopez, Lidia/Q-3925-2019; Martínez-Fernández,
   Silverio/P-5615-2014; Oriol, Marc/ABG-2260-2020
OI Lopez, Lidia/0000-0002-6901-9223; Martínez-Fernández,
   Silverio/0000-0001-9928-133X; Oriol, Marc/0000-0003-1928-7024; Vollmer,
   Anna Maria/0000-0002-3563-8253; Gomez Seoane,
   Cristina/0000-0002-3872-0439
FU Q-Rapids (Quality-Aware Rapid Software Development) project; VISDOM
   (Visual diagnosis for DevOps software development) project; European
   Union [732253]; Research, Development and Innovation cluster programme
   ITEA 3 [17038]
FX This work was supported by Q-Rapids (Quality-Aware Rapid Software
   Development) and VISDOM (Visual diagnosis for DevOps software
   development) projects. Q-Rapids was funded by the European Union's
   Horizon 2020 research and innovation programme under grant agreement n.
   732253. VISDOM is funded by the Research, Development and Innovation
   cluster programme ITEA 3 (project no17038). We thank all members of
   Bittium, ITTI, Nokia, and Softeam who participated in the evaluation of
   the dashboard. We also thank Alexandra Volkova, Aleix Balletbo, Guillem
   Bonet, and Oriol Martinez as main developers.
CR Basili VR, 2014, Aligning Organizations Through Measurement-the GQM+Strategies Approach
   Buse RPL, 2012, PROC INT CONF SOFTW, P987, DOI 10.1109/ICSE.2012.6227122
   Few S., 2006, Information dashboard design: the effective visual communication of data, V1st ed.
   Godfrey MW, 2009, IEEE SOFTWARE, V26, P67, DOI 10.1109/MS.2009.10
   Goel L, 2011, MIS QUART, V35, P749
   Haindl P, 2019, EUROMICRO CONF PROC, P19, DOI 10.1109/SEAA.2019.00012
   Manzano M., 2019, INT WORKSH DAT DRIV
   Manzano M, 2018, PROMISE'18: PROCEEDINGS OF THE 14TH INTERNATIONAL CONFERENCE ON PREDICTIVE MODELS AND DATA ANALYTICS IN SOFTWARE ENGINEERING, P52, DOI 10.1145/3273934.3273940
   Martínez-Fernández S, 2019, IEEE ACCESS, V7, P68219, DOI 10.1109/ACCESS.2019.2917403
   Matthies C., 2019, INT C SOFTW TECHN
   McKinney V, 2002, INFORM SYST RES, V13, P296, DOI 10.1287/isre.13.3.296.76
   Mendes Emilia, 2018, EASE 18, P90
   Partanen J., 2019, 2019 ACM IEEE INT S, P1
   Ram P, 2018, LECT NOTES COMPUT SC, V11271, P272, DOI 10.1007/978-3-030-03673-7_20
   Svensson RB, 2019, LECT NOTES BUS INF P, V355, P69, DOI 10.1007/978-3-030-19034-7_5
   Ulan M, 2018, 2018 SIXTH IEEE WORKING CONFERENCE ON SOFTWARE VISUALIZATION (VISSOFT), P65, DOI 10.1109/VISSOFT.2018.00015
   Venkatesh V, 2008, DECISION SCI, V39, P273, DOI 10.1111/j.1540-5915.2008.00192.x
   VersionOne, 2019, 13 ANN STAT AG SURV
   Xu P, 2008, J MANAGE INFORM SYST, V25, P277, DOI 10.2753/MIS0742-1222250308
   Zhang DM, 2013, IEEE SOFTWARE, V30, P30, DOI 10.1109/MS.2013.94
NR 20
TC 8
Z9 9
U1 1
U2 15
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 1
PY 2021
VL 202
AR 102568
DI 10.1016/j.scico.2020.102568
PG 10
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Social Science Citation Index (SSCI)
SC Computer Science
GA PC2SJ
UT WOS:000596856600008
OA Green Published
DA 2024-07-18
ER

PT J
AU Santos, R
   Rodriguez, N
   Ierusalimschy, R
AF Santos, Renan
   Rodriguez, Noemi
   Ierusalimschy, Roberto
TI Revisiting monitors
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Safe concurrency; Monitors; Shared memory; Type systems; Classic
   concurrency problems
ID SYSTEM; JAVA
AB Most current programming languages do not restrict the use of the concurrency primitives they provide, leaving it to the programmer to detect data races. In this paper, we revisit the monitor model, which guards against data races by guaranteeing that accesses to shared variables occur only inside monitors, and show that this concept can be implemented in a programming language with referential semantics, given appropriate typing rules. We describe the Aria programming language, designed with native monitors according to these rules. Through the discussion of classic concurrency problems, we evaluate the use of Aria monitors for synchronization at different levels of granularity and extend the language with new features to address the limitations of monitors regarding performance and expressiveness. (C) 2020 Elsevier B.V. All rights reserved.
C1 [Santos, Renan; Rodriguez, Noemi; Ierusalimschy, Roberto] Pontificia Univ Catolica Rio de Janeiro, Rua MS Vicente 225, BR-22453900 Rio de Janeiro, RJ, Brazil.
RP Santos, R (corresponding author), Pontificia Univ Catolica Rio de Janeiro, Rua MS Vicente 225, BR-22453900 Rio de Janeiro, RJ, Brazil.
EM rmiranda@inf.puc-rio.br; noemi@inf.puc-rio.br; roberto@inf.puc-rio.br
RI rodriguez, noemi/JOZ-1125-2023
FU Coordenacao de Aperfeicoamento de Pessoal de Nivel Superior - Brasil
   (CAPES) [001]
FX This study was financed in part by the Coordenacao de Aperfeicoamento de
   Pessoal de Nivel Superior - Brasil (CAPES) - Finance Code 001.
CR ABADI M, 2006, ACM T PROGRAM LANG S
   Alexandrescu A., 2010, The D Programming Language
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], 2005, LITTLE BOOK SEMAPHOR
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], 2009, P 24 ACM SIGPLAN C O
   [Anonymous], [No title captured]
   [Anonymous], 1973, Operating System Principles
   [Anonymous], [No title captured]
   [Anonymous], 2017, THESIS
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   Bacon DF, 2000, ACM SIGPLAN NOTICES, V35, P382, DOI 10.1145/354222.353197
   Beckman, 2006, SURVEY METHODS PREVE
   Butenhof David R., 1997, Programming with POSIX threads
   Dolby J, 2012, ACM T PROGR LANG SYS, V34, DOI 10.1145/2160910.2160913
   Flanagan C, 2003, ACM SIGPLAN NOTICES, V38, P338, DOI 10.1145/780822.781169
   HANSEN PB, 1993, SIGPLAN NOTICES, V28, P1, DOI 10.1145/155360.155361
   HOARE CAR, 1974, COMMUN ACM, V17, P549, DOI 10.1145/355620.361161
   Jung R, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158154
   Klabnik S., 2018, The Rust Programming Language
   Lea Doug, 1999, Concurrent Programming in Java. Second Edition: Design Principles and Patterns, V2nd
   Manson J, 2005, ACM SIGPLAN NOTICES, V40, P378, DOI 10.1145/1047659.1040336
   Odersky M., 2008, PROGRAMMING SCALA CO
NR 28
TC 0
Z9 0
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29a, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 15
PY 2020
VL 196
AR 102491
DI 10.1016/j.scico.2020.102491
PG 27
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA LY6WG
UT WOS:000540668900006
DA 2024-07-18
ER

PT J
AU Chaabane, M
   Rodriguez, IB
   Colomo-Palacios, R
   Gaaloul, W
   Jmaiel, M
AF Chaabane, Mariam
   Rodriguez, Ismael Bouassida
   Colomo-Palacios, Ricardo
   Gaaloul, Walid
   Jmaiel, Mohamed
TI A modeling approach for Systems-of-Systems by adapting ISO/IEC/IEEE
   42010 Standard evaluated by Goal-Question-Metric
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE System-of-Systems; Architecture Description Language; Multi-labeled
   graphs; The standard ISO/IEC/IEEE 42010; Goal-Question-Metric
AB Context. Systems-of-Systems (SoS) constitute a new category of complex software systems resulting from the integration of independent heterogeneous systems. Each constituent system has its own purpose and could interact with other systems to achieve a common goal. SoS have specific characteristics, namely operational and managerial independence of constituent systems, geographic distribution, evolutionary development and emergent behaviors. Due to the complexity of SoS, their development demands special attention to their software architecture description.
   Objective. In this work, we aim to elaborate an approach for modeling SoS using an Architecture Description Languages (ADL) adequate with SoS' characteristics. In fact, many researches have addressed the problem of describing the software architecture of SoS. However, there is still a lack of ADL having the expressive power to describe SoS software architectures.
   Method. To address this problem, we proposed an approach based on the standard "ISO/IEC/IEEE 42010: Systems and software engineering- Architecture Description" to describe the software architectures of SoS. Then, we proposed improvements for this standard to be adequate with SoS characteristics. Finally, we conducted a qualitative study based on Goal-Question-Metric (GQM) with a focus group to evaluate the effectiveness of this work.
   Results. While applying our approach in an illustrative case study which is an SoS entitled Smart City, we modeled three viewpoints for our SoS, expressing its specific characteristics; structural viewpoint, behavioral viewpoint and requirement viewpoint. Each one of these viewpoints is illustrated via an architecture model modeled by multi-labeled graphs which represent an intuitive and formal ADL. The use of multi-labeled graphs allowed as to check the conformity of the obtained architecture models with design rules via the Graph Matching and Transformation Engine (GMTE).
   Conclusions. It is concluded that the proposed improvements for the standard are important to express specific characteristics of SoS. Moreover, our proposed formal ADL, entitled multi-labeled graphs, allows us to elaborate different models considering different viewpoints to describe the SoS' architecture. Finally, it is important to investigate larger SoS and to conduct a quantitative study to further evaluate the effectiveness of our approach. (C) 2019 Elsevier B.V. All rights reserved.
C1 [Chaabane, Mariam; Rodriguez, Ismael Bouassida; Jmaiel, Mohamed] Univ Sfax, ReDCAD Lab, Sfax 3038, Tunisia.
   [Rodriguez, Ismael Bouassida; Jmaiel, Mohamed] Ctr Rech Numer Sfax, Sfax 3021, Tunisia.
   [Colomo-Palacios, Ricardo] Ostfold Univ Coll, Dept Comp Sci, BRA Veien 4, N-1783 Halden, Norway.
   [Gaaloul, Walid] Univ Paris Saclay, Telecom SudParis, UMR 5157, Evry, France.
C3 Universite de Sfax; Ecole Nationale dIngenieurs de Sfax (ENIS); Centre
   de Recherche en Numerique de Sfax (CRNS); Universite de Sfax; Ostfold
   University College; Universite Paris Cite; IMT - Institut Mines-Telecom;
   Institut Polytechnique de Paris; Telecom SudParis; Universite Paris
   Saclay
RP Chaabane, M (corresponding author), Univ Sfax, ReDCAD Lab, Sfax 3038, Tunisia.
EM mariam.chaabane@redcad.org
RI Gaaloul, Walid/ABB-1127-2021; Chaabane, Mariam/AAJ-8638-2020
OI Gaaloul, Walid/0000-0003-0451-532X; Bouassida,
   Ismail/0000-0002-5605-7415; Colomo-Palacios, Ricardo/0000-0002-1555-9726
CR [Anonymous], 2011, ISO/IEC TR 29110-5-1-2, DOI DOI 10.1109/IEEESTD.2011.6129467
   [Anonymous], 2008, SYSTEM SYSTEMS ENG, DOI DOI 10.1002/9780470403501
   [Anonymous], 2008, P 18 ANN INT S INT C
   Batista T., 2013, SESOS, P35
   Bhat A., FOCUS GROUP DEFINITI
   Bhat A., Qualitative research: Definition, Types, Methods, and Examples
   Bo Zhou, 2011, Proceedings of the 2011 9th IEEE International Conference on Industrial Informatics (INDIN 2011), P361, DOI 10.1109/INDIN.2011.6034903
   Bryans J, 2013, ANN IEEE SYST CONF, P612, DOI 10.1109/SysCon.2013.6549946
   Cavalcante E, 2015, 2015 12TH WORKING IEEE/IFIP CONFERENCE ON SOFTWARE ARCHITECTURE (WICSA), P31, DOI 10.1109/WICSA.2015.21
   Chaabane M, 2017, P S APPL COMP SAC 17, P1793
   Chaabane M, 2017, I C COMP SYST APPLIC, P879, DOI 10.1109/AICCSA.2017.169
   Dahmann JS, 2008, 2008 2ND ANNUAL IEEE SYSTEMS CONFERENCE, P133
   Faldik O, 2017, ELECTRON P THEOR COM, P1, DOI 10.4204/EPTCS.245.1
   Fielding Roy Thomas, 2000, Architectural styles and the design of network-based software architectures, Patent No. AAI9980887
   Gassara A., 2017, P S APPL COMP, P1787
   Giansanti D, 2012, COMPUTATIONAL MODELLING OF OBJECTS REPRESENTED IN IMAGES: FUNDAMENTALS, METHODS AND APPLICATIONS III, P335
   Guessi M, 2015, THIRD INTERNATIONAL WORKSHOP ON SOFTWARE ENGINEERING FOR SYSTEMS-OF-SYSTEMS SESOS 2015, P12, DOI 10.1109/SESoS.2015.10
   Hachem J.E., 2017, MODEL DRIVEN METHOD
   Hannachi Mohamed Amine, 2013, Graph-Based Representations in Pattern Recognition. 9th IAPR-TC-15 International Workshop, GbRPR 2013. Proceedings, P71, DOI 10.1007/978-3-642-38221-5_8
   Khlif I., 2014, P 2014 EUR C SOFTW A, P30
   LINCOLN B, 2013, LANDSCAPE QUALITATIV, P199
   Maier M., 1998, SYST ENG, V1, P267, DOI [DOI 10.1002/(SICI)1520-6858(1998)1:43.0.CO;2-D, 10.1002/(SICI)1520-6858(1998)1:4lt;267::AID-SYS3gt;3.0.CO;2-D, DOI 10.1002/(SICI)1520-6858(1998)1:4LT;267::AID-SYS3GT;3.0.CO;2-D, DOI 10.1002/(SICI)1520-6858(1998)1:4<267::AID-SYS3>3.0.CO;2-D]
   O. of the Deputy Under Secretary of Defense for Acquisition, 2008, TECH REP
   Oquendo F, 2016, IEEE INT C ENG COMP, P13, DOI [10.1109/ICECCS.2016.35, 10.1109/ICECCS.2016.012]
   Payne R.J., 2010, EVALUATION ARCHITECT
   Petcu V, 2010, 9TH ROEDUNET IEEE INTERNATIONAL CONFERENCE, P208
   Yahya Fara, 2017, Enterprise Security. Second International Workshop, ES 2015. Revised Selected Papers: LNCS 10131, P223, DOI 10.1007/978-3-319-54380-2_10
   2016, SOFTWARE QUALITY ASS, P1
NR 28
TC 11
Z9 11
U1 2
U2 9
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 1
PY 2019
VL 184
AR 102305
DI 10.1016/j.scico.2019.102305
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA JM6QO
UT WOS:000496336900006
OA Bronze
DA 2024-07-18
ER

PT J
AU Peleska, J
   Huang, WL
   Cavalcanti, A
AF Peleska, Jan
   Huang, Wen-ling
   Cavalcanti, Ana
TI Finite complete suites for CSP refinement testing
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Model-based testing; CSP; Traces refinement; Failures refinement;
   Complete test suites
AB In this paper, new contributions for model-based testing using Communicating Sequential Processes (CSP) are presented. For a finite non-terminating CSP process representing the reference model, finite test suites for checking the conformance relations traces and failures refinement are presented, and their completeness (that is, capability to uncover conformity violations) is proven. The fault domains for which complete failure detection can be guaranteed are specified by means of normalised transition graphs representing the failures semantics of finite-state CSP processes. While complete test suites for CSP processes have been previously investigated by several authors, a sufficient condition for their finiteness is presented here for the first time. Moreover, it is shown that the test suites are optimal in two aspects: (a) the maximal length of test traces cannot be further reduced, and (b) the nondeterministic behaviour cannot be tested with smaller or fewer sets of events, without losing the test suite's completeness property. (C) 2019 Elsevier B.V. All rights reserved.
C1 [Peleska, Jan; Huang, Wen-ling] Univ Bremen, Bremen, Germany.
   [Cavalcanti, Ana] Univ York, York, N Yorkshire, England.
C3 University of Bremen; University of York - UK
RP Peleska, J (corresponding author), Univ Bremen, Bremen, Germany.
EM peleska@uni-bremen.de; huang@uni-bremen.de; ana.cavalcanti@york.ac.uk
OI Cavalcanti, Ana Lucia Caneca/0000-0002-0831-1976
FU UK EPSRC [EP/12025134/1]; Royal Academy of Engineering Grant
   [CiET1718\45]; EPSRC [EP/R025134/1, EP/R025479/1, EP/M025756/1] Funding
   Source: UKRI
FX The authors would like to thank Bill Roscoe and Thomas Gibson-Robinson
   for their advice on using the FDR4 model checker and for very helpful
   discussions concerning the potential implications of this paper in the
   field of model checking. We are also grateful to Li-Da Tong from
   National Sun Yat-sen University, Taiwan, for suggesting the
   applicability of Sperner's Theorem in the context of the work presented
   here. Moreover, we thank Adenilso Simao for several helpful suggestions.
   The work of Ana Cavalcanti is funded by the Royal Academy of Engineering
   Grant CiET1718\45 and UK EPSRC Grant EP/12025134/1. We also thank
   anonymous reviewers for useful suggestions.
CR [Anonymous], 1997, The Theory and Practice of Concurrency
   [Anonymous], 1994, A classical mind: essays in honour of C. A. R. Hoare
   Buth B., 1997, Algebraic Methodology and Software Technology. 6th International Conference, AMAST '97. Proceedings, P60, DOI 10.1007/BFb0000463
   Cavalcanti A, 2007, LECT NOTES COMPUT SC, V4789, P151
   Cavalcanti A, 2017, LECT NOTES COMPUT SC, V10533, P21, DOI 10.1007/978-3-319-67549-7_2
   Cavalcanti A, 2015, THEOR COMPUT SCI, V563, P1, DOI 10.1016/j.tcs.2014.08.012
   Cavalcanti A, 2011, ACTA INFORM, V48, P97, DOI 10.1007/s00236-011-0133-z
   CHOW TS, 1978, IEEE T SOFTWARE ENG, V4, P178, DOI 10.1109/TSE.1978.231496
   Dorofeeva R, 2005, LECT NOTES COMPUT SC, V3731, P204
   Gibson-Robinson T., 2014, Lecture Notes in Computer Science, V8413, P187
   Hall A, 2002, IEEE SOFTWARE, V19, P18, DOI 10.1109/52.976937
   Hennessy M., 1988, An algebraic theory of processes
   Hierons RM, 2004, IEEE T COMPUT, V53, P1330, DOI 10.1109/TC.2004.85
   Hoare CAR., 1985, Communicating Sequential Processes
   Huang W, 2017, LECT NOTES
   Huang WL, 2017, FORM ASP COMPUT, V29, P335, DOI 10.1007/s00165-016-0402-2
   Hubner F, 2019, SOFTW SYST MODEL, V18, P423, DOI 10.1007/s10270-017-0595-8
   Lei Shi, 2010, Proceedings of the Third International Joint Conference on Computational Sciences and Optimization (CSO 2010), P64, DOI 10.1109/CSO.2010.240
   LUO G, 1994, IEEE T SOFTWARE ENG, V20, P149, DOI 10.1109/32.265636
   Peleska J., 1996, FME '96: Industrial Benefit and Advances in Formal Methods. Third International Symposium of Formal Methods Europe. Proceedings, P538
   Peleska Jan, 2018, Leveraging Applications of Formal Methods, Verification and Validation. Industrial Practice. 8th International Symposium, ISoLA 2018. Proceedings: Lecture Notes in Computer Science (LNCS 11247), P82, DOI 10.1007/978-3-030-03427-6_11
   Peleska J., 1997, South African Computer Journal, P53
   Peleska J., 2002, P 6 BIENN WORLD C IN
   Peleska J., 2018, 23 IEEE EUROPEAN TES, P1
   Peleska J., 2002, TESTING COMMUNICATIN, P225
   Peleska J, 2016, LECT NOTES COMPUT SC, V9707, P32, DOI 10.1007/978-3-319-33951-1_3
   Petrenko A, 2016, IEEE ICST WORKSHOP, P229, DOI 10.1109/ICSTW.2016.9
   Petrenko A, 2011, LECT NOTES COMPUT SC, V7019, P162, DOI 10.1007/978-3-642-24580-0_12
   Roscoe AW, 2010, TEXTS COMPUT SCI, P3, DOI 10.1007/978-1-84882-258-0_1
   SCHNEIDER S, 1995, INFORM COMPUT, V116, P193, DOI 10.1006/inco.1995.1014
   Shi H., 1999, Proceedings 1999 Pacific Rim International Symposium on Dependable Computing, P135, DOI 10.1109/PRDC.1999.816222
   Simao A, 2012, SOFTW TEST VERIF REL, V22, P435, DOI 10.1002/stvr.452
   Sperner E, 1928, MATH Z, V27, P544, DOI 10.1007/BF01171114
   Springintveld J, 2001, THEOR COMPUT SCI, V254, P225, DOI 10.1016/S0304-3975(99)00134-6
   Tretmans J, 1996, COMPUT NETWORKS ISDN, V29, P49, DOI 10.1016/S0169-7552(96)00017-7
   Vasilevskii M. P., 1973, Cybernetics, V9, P653, DOI 10.1007/BF01068590
NR 36
TC 4
Z9 4
U1 0
U2 4
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 15
PY 2019
VL 179
BP 1
EP 23
DI 10.1016/j.scico.2019.04.004
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA IE2WW
UT WOS:000472246400001
OA hybrid, Green Accepted
DA 2024-07-18
ER

PT J
AU Iannopollo, A
   Tripakis, S
   Sangiovanni-Vincentelli, A
AF Iannopollo, Antonio
   Tripakis, Stavros
   Sangiovanni-Vincentelli, Alberto
TI Constrained synthesis from component libraries
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Counterexample-guided inductive synthesis; Assume-guarantee contracts;
   Component libraries; Linear temporal logic; Platform-based design
AB Synthesis from component libraries is the problem of building a network of components from a given library, such that the network realizes a given specification. This problem is undecidable in general. It becomes decidable if we impose a bound on the number of chosen components. However, the bounded problem remains computationally hard and brute-force approaches do not scale. In this paper, we study scalable methods for solving the problem of bounded synthesis from libraries, proposing a solution based on the Counterexample-Guided Inductive Synthesis paradigm. Although our synthesis algorithm does not assume a specific formalism a priori, we present a parallel implementation which instantiates components defined as Linear Temporal Logic-based Assume/Guarantee Contracts. We show the potential of our approach and evaluate our implementation by applying it to two industrial-relevant case studies. (C) 2018 Elsevier B.V. All rights reserved.
C1 [Iannopollo, Antonio; Sangiovanni-Vincentelli, Alberto] Univ Calif Berkeley, Dept EECS, Berkeley, CA 94720 USA.
   [Tripakis, Stavros] Aalto Univ, Dept Comp Sci, Aalto, Finland.
   [Tripakis, Stavros] Northeastern Univ, CCIS, Boston, MA 02115 USA.
C3 University of California System; University of California Berkeley;
   Aalto University; Northeastern University
RP Iannopollo, A (corresponding author), Univ Calif Berkeley, Dept EECS, Berkeley, CA 94720 USA.
EM antonio@berkeley.edu; stavros.tripakis@gmail.com; alberto@berkeley.edu
FU NSF [CCF-1139138, CNS-1329759, CNS-1801546]; Camozzi Group via the
   iCyPhy consortium; TerraSwarm, one of six centers of STARnet, a
   Semiconductor Research Corporation program - MARCO; TerraSwarm, one of
   six centers of STARnet, a Semiconductor Research Corporation program -
   DARPA; Academy of Finland
FX The authors wish to acknowledge Christos Stergiou, Sanjit Seshia,
   Richard Lin, Rohit Ramesh, and the anonymous reviewers for the useful
   comments. This work has been partially supported by the NSF
   (CCF-1139138, CNS-1329759 and CNS-1801546), by the Camozzi Group via the
   iCyPhy consortium, by TerraSwarm, one of six centers of STARnet, a
   Semiconductor Research Corporation program sponsored by MARCO and DARPA,
   and by the Academy of Finland.
CR Alur Rajeev, 2014, Hardware and Software: Verification and Testing. 10th International Haifa Verification Conference, HVC 2014. Proceedings: LNCS 8855, P75, DOI 10.1007/978-3-319-13338-6_7
   Alur R., 2017, SIGACT News, V48, P55, DOI [DOI 10.1145/3061640.3061652, 10.1145/3061640.3061652]
   Alur R, 2016, HSCC'16: PROCEEDINGS OF THE 19TH INTERNATIONAL CONFERENCE ON HYBRID SYSTEMS: COMPUTATION AND CONTROL, P215, DOI 10.1145/2883817.2883842
   [Anonymous], CORR
   [Anonymous], P 1 ANN ACM S COMP F
   [Anonymous], LECT NOTES COMPUTER
   [Anonymous], FORMAL ASPECTS COMPO
   [Anonymous], 2014, DESIGN AUTOMATION TE
   [Anonymous], 2014, 2014 DES AUT TEST EU
   Benveniste A, 2018, FOUND TRENDS ELECTRO, V12, pI, DOI 10.1561/1000000053
   Benveniste A, 2008, LECT NOTES COMPUT SC, V5382, P200, DOI 10.1007/978-3-540-92188-2_9
   Cavada R, 2014, LECT NOTES COMPUT SC, V8559, P334, DOI 10.1007/978-3-319-08867-9_22
   Clarke EdmundM., 2000, Proceedings of the International Conference on Computer Aided Veri cation (CAV), P154, DOI 10.1007/1072216715
   de Alfaro L., 2001, Software Engineering Notes, V26, P109, DOI 10.1145/503271.503226
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Gulwani S, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P62
   Hanselman D., 2003, BRUSHLESS PERMANENT
   Jha S., 2010, P 32 ACM IEEE INT C, V1, P215, DOI DOI 10.1145/1806799.1806833
   Lustig Y, 2009, LECT NOTES COMPUT SC, V5504, P395
   Moir I., 2008, Aircraft systems: mechanical, electrical and avionics subsystems integration, Vthird
   Nuzzo Pierluigi, 2014, 2014 Twelfth ACM/IEEE Conference on Formal Methods and Models for Codesign (MEMOCODE), P104, DOI 10.1109/MEMCOD.2014.6961848
   Pneuli A., 1990, Proceedings. 31st Annual Symposium on Foundations of Computer Science (Cat. No.90CH2925-6), P746, DOI 10.1109/FSCS.1990.89597
   Pnueli A., 1977, 18th Annual Symposium on Foundations of Computer Science, P46, DOI 10.1109/SFCS.1977.32
   RAMADGE PJ, 1987, SIAM J CONTROL OPTIM, V25, P206, DOI 10.1137/0325013
   Sangiovanni-Vincentelli A, 2007, P IEEE, V95, P467, DOI 10.1109/JPROC.2006.890107
   Sangiovanni-Vincentelli A, 2012, EUR J CONTROL, V18, P217, DOI 10.3166/EJC.18.217-238
   Seshia SA, 2015, P IEEE, V103, P2036, DOI 10.1109/JPROC.2015.2471838
   Shapiro EY., 1983, Algorithmic Program Debugging
   SISTLA AP, 1985, J ACM, V32, P733, DOI 10.1145/3828.3837
   Solar-Lezama A, 2006, ACM SIGPLAN NOTICES, V41, P404, DOI 10.1145/1168917.1168907
   Wongpiromsarn T, 2011, HSCC 11: PROCEEDINGS OF THE 14TH INTERNATIONAL CONFERENCE ON HYBRID SYSTEMS: COMPUTATION AND CONTROL, P313
NR 31
TC 4
Z9 9
U1 0
U2 5
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 15
PY 2019
VL 171
BP 21
EP 41
DI 10.1016/j.scico.2018.10.003
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA HI9CQ
UT WOS:000456753300002
OA hybrid
DA 2024-07-18
ER

PT J
AU Resner, D
   de Araujo, GM
   Fröhlich, AA
AF Resner, Davi
   de Araujo, Gustavo Medeiros
   Frohlich, Antonio Augusto
TI Design and implementation of a cross-layer IoT protocol
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Cross-layer design; Communication protocols; Internet of Things;
   Wireless Sensor Networks
ID NETWORKS
AB Cross-layer communication protocols can significantly improve several aspects of wireless networks, particularly energy consumption and bandwidth. However, they break with the traditional layered architecture that has been so successful for over 30 years. A fully fledged cross-layer stack requires a sophisticated software design to be maintainable and reusable. The Trustful Space-Time Protocol (TSTP) is a cross-layer protocol designed to deliver authenticated, encrypted, timed, and georeferenced messages containing data compliant with the International System of Units (SI) in a resource-efficient way. By integrating shared data from multiple networking services into a single communication infrastructure, TSTP is able to eliminate replication of information across services, achieving small overhead regarding control messages. The complexity of TSTP's features, its broad range - from the application to the Medium Access Control, - and its experimental nature bring diverse requirements beyond those usually considered in most software designs. In this work, we show how we avoided a monolithic implementation of the cross-layer approach with a component-based design, exploring template metaprogramming techniques to adapt and combine basic building blocks. An event-driven architecture that makes use of zero copy buffers and metadata is used to handle crosscutting concerns. We validate the proposed design with an implementation for IEEE 802.15.4 networks and a set of OMNet++ simulations for relevant scenarios, showing that we achieve a light TSTP implementation that is successfully able to save energy and bandwidth while keeping a delivery ratio close to 100%. (C) 2017 Elsevier B.V. All rights reserved.
C1 [Resner, Davi; de Araujo, Gustavo Medeiros; Frohlich, Antonio Augusto] Univ Fed Santa Catarina, Software Hardware Integrat Lab, POB 476, BR-88040900 Florianopolis, SC, Brazil.
C3 Universidade Federal de Santa Catarina (UFSC)
RP Resner, D (corresponding author), Univ Fed Santa Catarina, Software Hardware Integrat Lab, POB 476, BR-88040900 Florianopolis, SC, Brazil.
EM davir@lisha.ufsc.br; gustavo@lisha.ufsc.br; guto@lisha.ufsc.br
RI Fröhlich, Antônio Augusto/K-6728-2012
OI Fröhlich, Antônio Augusto/0000-0002-4063-1339
CR Akhavan M. R., 2011, 18th International Conference on Telecommunications (ICT 2011), P191, DOI 10.1109/CTS.2011.5898916
   [Anonymous], 2015 IEEE 20 C EM TE
   [Anonymous], 2001, APPL ORIENTED OPERAT
   [Anonymous], 2006, P 9 ACM INT S MOD AN, DOI DOI 10.1145/1164717.1164742
   Boulis A., 2017, CASTALIA SIMULATOR W
   Dixon C., 2012, Proceedings of the 9th USENIX conference on Networked Systems Design and Implementation. NSDI'12, P25
   Ferrari F., 2012, 2012 IEEE International Conference on Pervasive Computing and Communications Workshops (PerCom Workshops), P26, DOI 10.1109/PerComW.2012.6197493
   Ferrari F., 2011, Proceedings 2011 10th International Conference on Information Processing in Sensor Networks (IPSN 2010), P73
   Fu B, 2014, IEEE COMMUN SURV TUT, V16, P110, DOI 10.1109/SURV.2013.081313.00231
   Gamma E., 1994, Design patterns: Elements of reusable object-oriented software
   Granjal J, 2015, IEEE COMMUN SURV TUT, V17, P1294, DOI 10.1109/COMST.2015.2388550
   Huang P, 2013, IEEE COMMUN SURV TUT, V15, P101, DOI 10.1109/SURV.2012.040412.00105
   Hulbert A, 2016, 2016 IEEE INTERNATIONAL CONFERENCE ON BIG DATA (BIG DATA), P2664, DOI 10.1109/BigData.2016.7840909
   Levis P., TRICKLE SELF REGULAT
   Liu S, 2007, 2007 4TH ANNUAL IEEE COMMUNICATIONS SOCIETY CONFERENCE ON SENSOR, MESH AND AD-HOC COMMUNICATIONS AND NETWORKS, VOLS 1 AND 2, P11, DOI 10.1109/SAHCN.2007.4292813
   Mendes LDP, 2011, J NETW COMPUT APPL, V34, P523, DOI 10.1016/j.jnca.2010.11.009
   Okazaki Alexandre M., 2012, IEEE SENSORS
   OpenSim, 2017, OMNET PLUS PLUS OBJE
   Patil M, 2012, IEEE INT CONF NETWOR, P86, DOI 10.1109/ICON.2012.6506539
   Resner Davi, 2016, 2016 19th IEEE International Conference on Computational Science and Engineering (CSE), IEEE 14th International Conference on Embedded and Ubiquitous Computing (EUC), and 15th International Symposium on Distributed Computing and Applications for Business Engineering (DCABES). Proceedings, P40, DOI 10.1109/CSE-EUC-DCABES.2016.159
   Resner D, 2016, BRAZ SYM COMPUT SYST, P109, DOI [10.1109/SBESC.2016.29, 10.1109/SBESC.2016.024]
   Resner D, 2015, SENSORNETS: PROCEEDINGS OF THE 4TH INTERNATIONAL CONFERENCE ON SENSOR NETWORKS, P197, DOI 10.5220/0005262701970206
   Resner Davi, 2016, 21 IEEE INT C EM TEC, P1
   Santos TRC, 2005, HPCS 2005: 19TH INTERNATIONAL SYMPOSIUM ON HIGH PERFORMANCE COMPUTING SYSTEMS AND APPLICATIONS, PROCEEDINGS, P58
   Schmid T, 2010, PROCEEDINGS OF THE 9TH ACM/IEEE INTERNATIONAL CONFERENCE ON INFORMATION PROCESSING IN SENSOR NETWORKS, P151, DOI 10.1145/1791212.1791231
   Software/Hardware Integration Lab, 2017, EPOS EMB PAR OP SYST
   Srivastava V, 2005, IEEE COMMUN MAG, V43, P112, DOI 10.1109/MCOM.2005.1561928
   Steiner Rodrigo Vieira, 2013, IEEE WIR COMM NETW C, P884
NR 28
TC 11
Z9 11
U1 0
U2 8
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 1
PY 2018
VL 165
SI SI
BP 24
EP 37
DI 10.1016/j.scico.2017.08.008
PG 14
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GV3KH
UT WOS:000445992300003
OA Bronze
DA 2024-07-18
ER

PT J
AU Pollet, D
   Ducasse, S
AF Pollet, Damien
   Ducasse, Stephane
TI A critical analysis of string APIs: The case of Pharo
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Strings; API; Library; Design; Style
AB Most programming languages, besides C, provide a native abstraction for character strings, but string APIs vary widely in size, expressiveness, and subjective convenience across languages. In Pharo, while at first glance the API of the String class seems rich, it often feels cumbersome in practice; to improve its usability, we faced the challenge of assessing its design. However, we found hardly any guideline about design forces and how they structure the design space, and no comprehensive analysis of the expected string operations and their different variations. In this article, we first analyze the Pharo 4 String library, then contrast it with its Haskell, Java, Python, Ruby, and Rust counterparts. We harvest criteria to describe a string API, and reflect on features and design tensions. This analysis should help language designers in understanding the design space of strings, and will serve as a basis for a future redesign of the string library in Pharo. (C) 2017 Elsevier B.V. All rights reserved.
C1 [Pollet, Damien] INRIA, RMoD, Le Chesnay, France.
   Univ Lille, Lille, France.
C3 Inria; Universite de Lille
RP Pollet, D (corresponding author), INRIA, RMoD, Le Chesnay, France.
EM damien.pollet@inria.fr; stephane.ducasse@inria.fr
CR ANSI, 1998, 3191998 ANSI INCITS
   Beck Kent, 1997, SMALLTALK BEST PRACT
   Bergel A, 2005, COMPUT LANG SYST STR, V31, P107, DOI 10.1016/j.cl.2004.11.002
   Blanchette J., 2008, LITTLE MANUAL API DE
   Bloch J., 2006, 21 ACM SIGPLAN S OBJ, P506, DOI DOI 10.1145/1176617.1176622
   Clifton C, 2000, ACM SIGPLAN NOTICES, V35, P130, DOI 10.1145/354222.353181
   Cwalina K., 2005, Framework design guidelines: Conventions, idioms, and patterns for reusable
   Ducasse S, 2009, IEEE T SOFTWARE ENG, V35, P573, DOI 10.1109/TSE.2009.19
   Griswold R., 1996, ICON PROGRAMMING LAN, VThird
   Hickey R., CLOJURE TRANSDUCERS
   Murer S, 1996, ACM T PROGR LANG SYS, V18, P1, DOI 10.1145/225540.225541
   Piccioni M., 2013, IEEE ACM S EMP SOFTW
   Stylos J., 2006, AWPPIG, P131
   Stylos J, 2007, VL/HCC 2007: IEEE SYMPOSIUM ON VISUAL LANGUAGES AND HUMAN-CENTRIC COMPUTING, PROCEEDINGS, P50, DOI 10.1109/VLHCC.2007.44
   Woolf B, 1998, SOFTW PATT S, P5
NR 15
TC 0
Z9 0
U1 0
U2 0
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 1
PY 2018
VL 161
SI SI
BP 89
EP 104
DI 10.1016/j.scico.2017.11.005
PG 16
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GI7ZZ
UT WOS:000434742900006
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Poncelet, C
   Jacquemard, F
AF Poncelet, Clement
   Jacquemard, Florent
TI Model-based testing for bUilding reliable realtime interactive music
   systems
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Model based testing; Interactive music systems; Timed automata
ID EVENT; TIME
AB The role of an Interactive Music System (IMS) is to accompany musicians during live performances, acting like a real musician. It must react in realtime to audio signals from musicians, according to a timed high-level requirement called mixed score, written in a domain specific language. Such goals imply strong requirements of temporal reliability and robustness to unforeseen errors in input, yet not much addressed by the computer music community.
   We present the application of Model-Based Testing techniques and tools to a state-ofthe-art IMS, including in particular: offline and on-the-fly approaches for the generation of relevant input data for testing (including timing values), with coverage criteria, the computation of the corresponding expected output, according to the semantics of a given mixed score, the black-box execution of the test data on the System Under Test and the production of a verdict. Our method is based on formal models in a dedicated intermediate representation, compiled directly from mixed scores (high-level requirements), and either passed, to the model-checker Uppaal (after conversion to Timed Automata) in the offline approach, or executed by a virtual machine in the online approach. Our fully automatic framework has been applied to real mixed scores used in concerts and the results obtained have permitted to identify bugs in the target IMS. (C) 2016 Elsevier B.V. All rights reserved.
C1 [Poncelet, Clement; Jacquemard, Florent] IRCAM, 1 Pl Igor Stravinsky, F-75004 Paris, France.
   [Poncelet, Clement; Jacquemard, Florent] UPMC Univ Paris 06, Sorbonne Univ, IRCAM CNRS UMR SMTS, Inria, Paris, France.
   [Poncelet, Clement] DGA, French Natl Def, Paris, France.
C3 Inria; Sorbonne Universite
RP Poncelet, C; Jacquemard, F (corresponding author), IRCAM, 1 Pl Igor Stravinsky, F-75004 Paris, France.; Poncelet, C; Jacquemard, F (corresponding author), UPMC Univ Paris 06, Sorbonne Univ, IRCAM CNRS UMR SMTS, Inria, Paris, France.; Poncelet, C (corresponding author), DGA, French Natl Def, Paris, France.
EM clement.poncelet@ircam.fr; florent.jacquemard@inria.fr
FU DGA-MRIS scholarship; project Inedit [ANR-12-CORD-009]
FX This work has been partly supported by a DGA-MRIS scholarship and the
   project Inedit (ANR-12-CORD-009).
CR ALUR R, 1994, THEOR COMPUT SCI, V126, P183, DOI 10.1016/0304-3975(94)90010-8
   ANDERSON DP, 1990, ACM T COMPUT SYST, V8, P56, DOI 10.1145/77648.77652
   [Anonymous], 1992, TEMPORAL LOGIC REACT, DOI DOI 10.1007/978-1-4612-0931-7
   [Anonymous], 2008, NDSS
   [Anonymous], MSRTR201255
   [Anonymous], TESTING REAL TIME SY
   Arias J., 2015, 15 INT C APPL CONC S
   Bazin T., 2016, P JOURN INF MUS
   Berry Gerard., 1996, The Constructive Semantics of Pure Esterel
   Bliudze Simon, 2011, Software Composition. Proceedings of the 10th International Conference, SC 2011, P51, DOI 10.1007/978-3-642-22045-6_4
   Bliudze S, 2008, LECT NOTES COMPUT SC, V5201, P508, DOI 10.1007/978-3-540-85361-9_39
   Bowman H., 1998, Proc. of the 3rd International Workshop on Formal Methods for Industrial Critical Systems, P97
   Colombo C., 2014, P 9 WORKSH MOD BAS T, P14
   Cont A., 2012, P INT COMP MUS C ICM
   Cont A, 2010, IEEE T PATTERN ANAL, V32, P974, DOI 10.1109/TPAMI.2009.106
   Dannenberg R., 1989, MUSIC REPRESENTATION
   Dannenberg RB, 1997, COMPUT MUSIC J, V21, P61, DOI 10.2307/3681014
   Echeveste J., 2015, THESIS
   Echeveste J., 2011, JDEDS, V23, P343
   Fanchon L., 2013, P INT COMP MUS C ICM
   Ghosal A, 2004, LECT NOTES COMPUT SC, V2993, P357
   Henzinger TA, 2003, P IEEE, V91, P84, DOI 10.1109/JPROC.2002.805825
   Hessel Anders, 2008, Formal Methods and Testing. An Outcome of the FORTEST Network. Revised Selected Papers, P77, DOI 10.1007/978-3-540-78917-8_3
   Honing H, 2001, COMPUT MUSIC J, V25, P50, DOI 10.1162/014892601753189538
   Honing H., 2002, TIJDSCHRIFT MUZIEKTH, V7, P227
   Jaffe D.A., 1983, P INT COMP MUS C ICM
   Memon AM, 2007, SOFTW TEST VERIF REL, V17, P137, DOI 10.1002/stvr.364
   Peters N., 2012, 9 SOUND MUS COMP C S
   Poncelet C., 2015, P 30 ACM SIGAPP S AP
   Poncelet Sanchez C., 2014, ICMC SMC
   Ptolemaeus C., 2014, System Design, Modeling, and Simulation using Ptolemy II
   PUCKETTE M, 1991, COMPUT MUSIC J, V15, P68, DOI 10.2307/3680767
   Rowe R., 1993, INTERACTIVE MUSIC SY
NR 33
TC 2
Z9 2
U1 0
U2 4
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 15
PY 2016
VL 132
SI SI
BP 143
EP 172
DI 10.1016/j.scico.2016.08.002
PN 2
PG 30
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA ED3ZB
UT WOS:000388785900002
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Montesi, F
AF Montesi, Fabrizio
TI Process-aware web programming with Jolie
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Business processes; Programming languages; Sessions; Web services
ID CALCULUS
AB We extend the Jolie programming language to capture the native modelling of process aware web information systems, i.e., web information systems based upon the execution of business processes. Our main contribution is to offer a unifying approach for the programming of distributed architectures on the web, which can capture web servers, stateful process execution, and the composition of services via mediation. We discuss applications of this approach through a series of examples that cover, e.g., static content serving, multiparty sessions, and the evolution of web systems. Finally, we present a performance evaluation that includes a comparison of Jolie-based web systems to other frameworks and a measurement of its scalability. (C) 2016 Elsevier B.V. All rights reserved.
C1 [Montesi, Fabrizio] Univ Southern Denmark, Dept Math & Comp Sci, Campusvej 55, DK-5230 Odense M, Denmark.
C3 University of Southern Denmark
RP Montesi, F (corresponding author), Univ Southern Denmark, Dept Math & Comp Sci, Campusvej 55, DK-5230 Odense M, Denmark.
EM fmontesi@imada.sdu.dk
RI Montesi, Fabrizio/AAE-3306-2022
OI Montesi, Fabrizio/0000-0003-4666-901X
FU CRC (Choreographies for Reliable and efficient Communication software)
   from the Danish Council for Independent Research [DFF-4005-00304]
FX The author thanks Claudio Guidi, Saverio Giallorenzo, and the anonymous
   referees for their useful comments. This work was supported by CRC
   (Choreographies for Reliable and efficient Communication software),
   grant no. DFF-4005-00304 from the Danish Council for Independent
   Research.
CR Alonso G., 2004, DAT SYS APP, DOI 10.1007/978-3-662-10876-5_5
   [Anonymous], 2000, ARCHITECTURAL STYLES
   [Anonymous], 2014, Web Services Foundations, DOI [10.1007/978-1-4614-7518-7, DOI 10.1007/978-1-4614-7518-7_2]
   Berry G, 2000, FOUNDAT COMPUT, P425
   Berry G, 2014, LECT NOTES COMPUT SC, V8337, P1, DOI 10.1007/978-3-319-04483-5_1
   Bonetta D, 2012, ACM SIGPLAN NOTICES, V47, P97, DOI 10.1145/2370036.2145829
   Boudol G, 2012, ACM T PROGR LANG SYS, V34, DOI 10.1145/2220365.2220369
   BRABRAND C., 2002, ACM T INTERNET TECHN, V2, P79
   Brambilla M., 2014, Interaction Flow Modeling Language: Model-Driven UI Engineering of Web and Mobile Apps with IFML
   Bravetti M., 2013, WEB SERVICES FORMAL, P48
   Bravetti M., CORR
   Carbone M, 2013, ACM SIGPLAN NOTICES, V48, P263, DOI 10.1145/2480359.2429101
   Chappell D.A., 2004, ENTREPRISE SERVICE B
   Dalla Preda Mila, 2012, Service-Oriented and Cloud Computing. First European Conference, ESOCC 2012. Proceedings, P48, DOI 10.1007/978-3-642-33427-6_4
   Dumas M, 2005, PROCESS-AWARE INFORMATION SYSTEMS: BRIDGING PEOPLE AND SOFTWARE THROUGH PROCESS TECHNOLOGY, P1, DOI 10.1002/0471741442
   Gay SJ, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P299, DOI 10.1145/1706299.1706335
   Gregorio J., 6570 IETF RFC
   Guidi Claudio, 2007, Journal of Software, V2, P1, DOI 10.4304/jsw.2.1.1-13
   Guidi C., 2007, THESIS
   Hirschkoff D, 2012, LECT NOTES COMPUT SC, V7454, P302, DOI 10.1007/978-3-642-32940-1_22
   Honda K, 1998, LNCS, V1381, P22, DOI DOI 10.1007/BFB0053567
   Honda K, 2008, ACM SIGPLAN NOTICES, V43, P273, DOI 10.1145/1328897.1328472
   Honda K, 2011, LECT NOTES COMPUT SC, V6536, P55, DOI 10.1007/978-3-642-19056-8_4
   Hu R, 2010, LECT NOTES COMPUT SC, V6183, P329, DOI 10.1007/978-3-642-14107-2_16
   Lanese I, 2010, LECT NOTES COMPUT SC, V6269, P478, DOI 10.1007/978-3-642-15375-4_33
   Lapadula A, 2007, LECT NOTES COMPUT SC, V4421, P33
   Lucchi R, 2007, J LOGIC ALGEBR PROGR, V70, P96, DOI 10.1016/j.jlap.2006.05.007
   Masinter L., 3986 IETF RFC
   MILNER R, 1992, INFORM COMPUT, V100, P1, DOI [10.1016/0890-5401(92)90008-4, 10.1016/0890-5401(92)90009-5]
   MILNER R, 1992, INFORM COMPUT, V100, P41, DOI 10.1016/0890-5401(92)90009-5
   Montesi Fabrizio, 2013, CONCUR 2013 - Concurrency Theory. 24th International Conference, CONCUR 2013. Proceedings: LNCS 8052, P425, DOI 10.1007/978-3-642-40184-8_30
   Montesi F, 2007, ECOWS 07: PROCEEDING OF THE 5TH IEEE EUROPEAN CONFERENCE ON WEB SERVICES, P13, DOI 10.1109/ECOWS.2007.19
   Montesi F, 2011, LECT NOTES COMPUT SC, V7084, P125, DOI 10.1007/978-3-642-25535-9_9
   Montesi F, 2008, PROCEEDINGS OF THE SIXTH IEEE EUROPEAN CONFERENCE ON WEB SERVICES, P225, DOI 10.1109/ECOWS.2008.20
   Montesi Fabrizio, 2010, THESIS
   Montesi Fabrizio, 2014, Web Services Foundations, P81, DOI [DOI 10.1007/978-1-4614-7518-7_4, 10.1007/978-1-4614-7518-7_4, 10.1007/978-1-4614-7518-7\_4]
   Nicholas D., 1978, LIT BIBLIOMETRICS
   Pautasso C, 2008, LECT NOTES COMPUT SC, V5240, P278, DOI 10.1007/978-3-540-85758-7_21
   Pautasso C, 2011, LECT NOTES COMPUT SC, V7084, P32, DOI 10.1007/978-3-642-25535-9_3
   Pautasso C, 2009, LECT NOTES COMPUT SC, V5634, P142, DOI 10.1007/978-3-642-02655-3_11
   Peterson J.L., 1977, ACM Comput. Surv, V9, P223
   Rossi D, 2008, APPLIED COMPUTING 2008, VOLS 1-3, P2409
   Sangiorgi D., 2001, CALCULUS THEORY MOBI
   Serrano Manuel, 2006, PROCEEEDINGS 21 ANN, P975, DOI [10.1145/1176617.1176756, DOI 10.1145/1176617.1176756]
   van der Aalst WMP, 2005, INFORM SYST, V30, P245, DOI 10.1016/j.is.2004.02.002
   van der Aalst WMP, 1997, LECT NOTES COMPUT SC, V1248, P407
   Van der Aalst WMP, 1998, J CIRCUIT SYST COMP, V8, P21, DOI 10.1142/S0218126698000043
   W3C WS-CDL Working Group, 2004, WEB SERV CHOR DESCR
NR 48
TC 6
Z9 6
U1 0
U2 1
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 15
PY 2016
VL 130
BP 69
EP 96
DI 10.1016/j.scico.2016.05.002
PG 28
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DY1MQ
UT WOS:000384859500005
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Beohar, H
   Varshosaz, M
   Mousavi, MR
AF Beohar, Harsh
   Varshosaz, Mahsa
   Mousavi, Mohammad Reza
TI Basic behavioral models for software product lines: Expressiveness and
   testing pre-orders
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 29th ACM Symposium on Applied Computing
CY MAR 24-28, 2014
CL Gyeongju, SOUTH KOREA
SP ACM, SIGAPP
DE Software product lines; Formal specification; Behavioral specification;
   Labeled transition systems; Featured transition systems; Modal
   transition systems; Calculus of communicating systems (CCS); Product
   line CCS (PL-CCS)
AB In order to provide a rigorous foundation for Software Product Lines (SPLs), several fundamental approaches have been proposed to their formal behavioral modeling. In this paper, we provide a structured overview of those formalisms based on labeled transition systems and compare their expressiveness in terms of the set of products they can specify. Moreover, we define the notion of tests for each of these formalisms and show that our notions of testing precisely capture product derivation, i.e., all valid products will pass the set of test cases of the product line and each invalid product fails at least one test case of the product line. (C) 2015 The Authors. Published by Elsevier B.V.
C1 [Beohar, Harsh; Varshosaz, Mahsa; Mousavi, Mohammad Reza] Halmstad Univ, Sch IT, Ctr Res Embedded Syst CERES, Halmstad, Sweden.
C3 Halmstad University
RP Mousavi, MR (corresponding author), Halmstad Univ, Sch IT, Ctr Res Embedded Syst CERES, Halmstad, Sweden.
EM harsh.beohar@hh.se; mahsa.varshosaz@hh.se; m.r.mousavi@hh.se
RI Mousavi, Mohammad Reza/A-3410-2013
OI Mousavi, Mohammad Reza/0000-0002-4869-6794
CR ABRAMSKY S, 1987, THEOR COMPUT SCI, V53, P225, DOI 10.1016/0304-3975(87)90065-X
   [Anonymous], LECT NOTES COMPUTER
   [Anonymous], 1981, Lecture Notes in Computer Science, DOI [10.1007/BFb0017309, DOI 10.1007/BFB0017309]
   Asirelli Patrizia, 2012, Leveraging Applications of Formal Methods, Verification and Validation. Technologies for Mastering Change. Technologies for Mastering Change. Proceedings of the 5th International Symposium, ISoLA 2012, P146, DOI 10.1007/978-3-642-34026-0_12
   Asirelli Patrizia, 2011, Proceedings of the 2011 15th International Software Product Line Conference (SPLC 2011), P130, DOI 10.1109/SPLC.2011.34
   Asirelli P, 2011, LECT NOTES COMPUT SC, V6722, P44, DOI 10.1007/978-3-642-21461-5_3
   Beohar H., 2014, EPTCS, V141, P44
   Beohar H., 2015, LECT NOTES COMPUTER
   Beohar Harsh, 2014, P 29 ACM S APPL COMP, P1272, DOI [10.1145/2554850.2554949, DOI 10.1145/2554850.2554949]
   Bloom B., 2004, ACM Transactions on Computational Logic, V5, P26, DOI 10.1145/963927.963929
   BOUDOL G, 1992, THEOR COMPUT SCI, V106, P3, DOI 10.1016/0304-3975(92)90276-L
   Classen A, 2010, Modelling with FTS: a Collection of Illustrative Examples
   Classen A., 2010, ICSE 10, V1, P335, DOI DOI 10.1145/1806799.1806850
   Classen A, 2013, IEEE T SOFTWARE ENG, V39, P1069, DOI 10.1109/TSE.2012.86
   Cordy M, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P472, DOI 10.1109/ICSE.2013.6606593
   Czarnecki Krzysztof., 2012, P 6 INT WORKSHOP VAR, P173, DOI DOI 10.1145/2110147.2110167
   DENICOLA R, 1984, THEOR COMPUT SCI, V34, P83, DOI 10.1016/0304-3975(84)90113-0
   Devroey X., 2014, SOFTW PROD LIN C, P86, DOI DOI 10.1145/2647908.2655971
   Devroey X, 2014, LECT NOTES COMPUT SC, V8802, P336, DOI 10.1007/978-3-662-45234-9_24
   Fantechi A, 2008, SPLC 2008: 12TH INTERNATIONAL SOFTWARE PRODUCT LINE CONFERENCE, PROCEEDINGS, P193, DOI 10.1109/SPLC.2008.45
   Fantechi A., 2007, ESEC FSE 07, P521
   Fischbein D., 2006, ROSATEA 06, P39
   Fokkink W, 2012, INFORM COMPUT, V214, P59, DOI 10.1016/j.ic.2011.10.011
   Gruler A, 2008, LECT NOTES COMPUT SC, V5051, P113, DOI 10.1007/978-3-540-68863-1_8
   Kahsai T, 2008, SEFM 2008: SIXTH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING AND FORMAL METHODS, PROCEEDINGS, P149, DOI 10.1109/SEFM.2008.38
   Larsen K. G., 1990, Proceedings. Fifth Annual IEEE Symposium on Logic in Computer Science (90CH2897-7), P108, DOI 10.1109/LICS.1990.113738
   Larsen U, 1988, Eur J Popul, V3, P203, DOI 10.1109/LICS.1988.5119
   Lochau Malte, 2012, Leveraging Applications of Formal Methods, Verification and Validation. Technologies for Mastering Change. Technologies for Mastering Change. Proceedings of the 5th International Symposium, ISoLA 2012, P223, DOI 10.1007/978-3-642-34026-0_17
   Milner R, 1982, CALCULUS COMMUNICATI
   Mishra S., 2006, CONCURRENCY SPECIFIC, P243
   Muschevici R., 2010, 2 P 14 INT C SOFTW P, P99
   Muschevici R, 2011, LECT NOTES COMPUT SC, V7041, P318, DOI 10.1007/978-3-642-24690-6_22
   Nyman U, 2007, LECT NOTES COMPUT SC, V4421, P64
   PHILLIPS I, 1987, THEOR COMPUT SCI, V50, P241, DOI 10.1016/0304-3975(87)90117-4
   Schaefer I., 2012, International Journal on Software Tools for Technology Transfer (STTT), V14, P477, DOI [DOI 10.1007/S10009-012-0253-Y, 10.1007/s10009-012-0253-y]
   Schmid Klaus., 2011, 5 INT WORKSHOP VARIA, P119, DOI [10.1145/1944892.1944907, DOI 10.1145/1944892.1944907]
   Schobbens PY, 2006, RE'06: 14TH IEEE INTERNATIONAL REQUIREMENTS ENGINEERING CONFERENCE, PROCEEDINGS, P139
   Shoham S, 2012, J COMPUT SYST SCI, V78, P414, DOI 10.1016/j.jcss.2011.05.003
   Simao A., 2014, ELECT P THEOR COMPUT, V141, P56, DOI DOI 10.4204/EPTCS.141.5
   Sinnema M, 2007, INFORM SOFTWARE TECH, V49, P717, DOI 10.1016/j.infsof.2006.08.001
   ter Beek M.H., 2014, P 2 FME WORKSHOP FOR, P31, DOI [10.1145/2593489.2593493, DOI 10.1145/2593489.2593493]
   ter Beek MH, 2013, PROCEEDINGS OF THE 17TH INTERNATIONAL SOFTWARE PRODUCT LINE CONFERENCE CO-LOCATED WORKSHOPS (SPLC'13 WORKSHOPS), P10
   Tretmans Jan, 2008, Formal Methods and Testing. An Outcome of the FORTEST Network. Revised Selected Papers, P1, DOI 10.1007/978-3-540-78917-8_1
   Tribastone M, 2014, 18TH INTERNATIONAL SOFTWARE PRODUCT LINE CONFERENCE (SPLC 2014), VOL 1, P82, DOI 10.1145/2648511.2648520
   Volpato M., 2013, P 2013 INT WORKSH JO, P41
NR 45
TC 18
Z9 20
U1 0
U2 4
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUL 1
PY 2016
VL 123
BP 42
EP 60
DI 10.1016/j.scico.2015.06.005
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA DJ7BT
UT WOS:000374367600003
OA hybrid, Green Published
DA 2024-07-18
ER

PT J
AU Johnsen, EB
   Owe, O
   Clarke, D
   Bjork, J
AF Johnsen, Einar Broch
   Owe, Olaf
   Clarke, Dave
   Bjork, Joakim
TI A formal model of service-oriented dynamic object groups
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Object orientation; Object groups; Service orientation; Multithreading;
   Concurrency; Types; Semantics; Type safety
ID DISCOVERY
AB Services are autonomous, self-describing, technology-neutral software units that can be published, discovered, queried, and composed into software applications at runtime. Designing and composing software services to form applications or composite services, require abstractions beyond those found in typical object-oriented programming languages. This paper explores service-oriented abstractions such as service adaptation, discovery, and querying in an object-oriented setting. We develop a formal model of dynamic object-oriented groups which offer services to their environment. These groups fit directly into the object-oriented paradigm in the sense that they can be dynamically created, they have an identity, and they can receive method calls. In contrast to objects, groups are not used for structuring code. A group exports its services through interfaces and relies on objects to implement these services. Objects may join or leave different groups. Groups may dynamically export new interfaces, they support service discovery, and they can be queried at runtime for the interfaces they support. We define an operational semantics and a static type system for this model of dynamic object groups, and show that well-typed programs do not cause method-not-understood errors at runtime. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Johnsen, Einar Broch; Owe, Olaf; Bjork, Joakim] Univ Oslo, N-0316 Oslo, Norway.
   [Clarke, Dave] Uppsala Univ, Uppsala, Sweden.
   [Clarke, Dave] Katholieke Univ Leuven, Leuven, Belgium.
C3 University of Oslo; Uppsala University; KU Leuven
RP Johnsen, EB (corresponding author), Univ Oslo, N-0316 Oslo, Norway.
EM einarj@ifi.uio.no; olaf@ifi.uio.no; dave.clarke@it.uu.se;
   joakimbj@ifi.uio.no
OI Johnsen, Einar Broch/0000-0001-5382-3949; Owe, Olaf/0000-0003-0976-5678
FU EU [FP7-610582, FP7-612985]
FX Partly funded by the EU projects FP7-610582 ENVISAGE: Engineering
   Virtualized Services (http://www.envisage-project.eu) and FP7-612985
   UPSCALE: From Inherent Concurrency to Massive Parallelism through
   Type-based Optimizations (http://www.upscale-project.eu).
CR Agha G., 1993, P 4 ACM S PRINC PRAC, P23
   [Anonymous], 1999, TYPE EFFECT SYSTEMS
   [Anonymous], 2007, LECT NOTES COMPUTER
   Baduel Laurent, 2002, P ACM JAV ISCOPE 200, P28
   Bjork J, 2012, ELECTRON PROC THEOR, P1, DOI 10.4204/EPTCS.91.1
   Caromel Denis, 2005, A Theory of Distributed Objects, DOI DOI 10.1007/B138812
   Chakraborty D, 2002, 2002 4TH INTERNATIONAL WORKSHOP ON MOBILE AND WIRELESS COMMUNICATION NETWORK, P140, DOI 10.1109/MWCN.2002.1045711
   Clarke D, 2010, LECT NOTES COMPUT SC, V5930, P185, DOI 10.1007/978-3-642-11512-7_12
   Cruz JC, 1999, LECT NOTES COMPUT SC, V1594, P355
   de Boer FS, 2007, LECT NOTES COMPUT SC, V4421, P316
   Dedecker J, 2006, LECT NOTES COMPUT SC, V4067, P230
   Fiadeiro JL, 2011, FORM ASP COMPUT, V23, P433, DOI 10.1007/s00165-010-0166-z
   Flanagan C, 2000, ACM SIGPLAN NOTICES, V35, P219, DOI 10.1145/358438.349328
   Gao ZG, 2006, COMPUT NETW, V50, P3165, DOI 10.1016/j.comnet.2005.12.004
   Hasselmeyer P, 2005, LECT NOTES COMPUT SC, V3826, P144
   Igarashi A, 2001, ACM T PROGR LANG SYS, V23, P396, DOI 10.1145/503502.503505
   Johnsen E.B., 2011, Lecture Notes in Computer Science, V6957, P142, DOI [10.1007/978- 3- 642-25271-6 8, DOI 10.1007/978-3-642-25271-6]
   Johnsen EB, 2007, SOFTW SYST MODEL, V6, P39, DOI 10.1007/s10270-006-0011-2
   Kaashoek M. F., 1993, Distributed Systems Engineering, V1, P48, DOI 10.1088/0967-1846/1/1/006
   Lapadula A, 2008, ELECTRON NOTES THEOR, V200, P133, DOI 10.1016/j.entcs.2008.04.097
   Lea D., 1993, OBJECTS IN GROUPS
   Lucassen J. M., 1988, Conference Record of the Fifteenth Annual ACM Symposium on Principles of Programming Languages, P47, DOI 10.1145/73560.73564
   Meling H, 2008, SOFTWARE PRACT EXPER, V38, P885, DOI 10.1002/spe.853
   Oracle Corporation, 2010, SIEB BUS APPL DOC
   Östlund J, 2010, LECT NOTES COMPUT SC, V6141, P97, DOI 10.1007/978-3-642-13953-6_6
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Plotkin GD, 2004, J LOGIC ALGEBR PROGR, V60-1, P17, DOI 10.1016/j.jlap.2004.03.002
   Pucella R, 2002, ACM SIGPLAN NOTICES, V37, P331, DOI 10.1145/583854.582449
   Schäfer J, 2010, LECT NOTES COMPUT SC, V6183, P275, DOI 10.1007/978-3-642-14107-2_13
   Talpin J.-P., 1992, Journal of Functional Programming, V2, P245, DOI 10.1017/S0956796800000393
NR 30
TC 4
Z9 4
U1 0
U2 6
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN-FEB
PY 2016
VL 115
SI SI
BP 3
EP 22
DI 10.1016/j.scico.2014.11.014
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CZ5DH
UT WOS:000367122200002
OA Bronze
DA 2024-07-18
ER

PT J
AU Fors, N
   Hedin, G
AF Fors, Niklas
   Hedin, Gorel
TI A JastAdd implementation of Oberon-0
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE JastAdd; Reference attribute grammars
ID ATTRIBUTE GRAMMARS
AB As a part of the LDTA 2011 Tool Challenge, we implemented a compiler for the language Oberon-0 using the metacompilation tool JastAdd. In this paper, we report on this implementation, and reflect on aspects of it such as ease of use, modularity, and safety. (C) 2015 Elsevier B.V. All rights reserved.
C1 [Fors, Niklas; Hedin, Gorel] Lund Univ, Dept Comp Sci, S-22100 Lund, Sweden.
C3 Lund University
RP Fors, N (corresponding author), Lund Univ, Dept Comp Sci, S-22100 Lund, Sweden.
EM niklas.fors@cs.lth.se; gorel.hedin@cs.lth.se
CR Åkesson J, 2010, SCI COMPUT PROGRAM, V75, P21, DOI 10.1016/j.scico.2009.07.003
   [Anonymous], 1971, Math. Syst. Theory, DOI DOI 10.1007/BF01702865
   Boyland JT, 1998, LECT NOTES COMPUT SC, V1383, P31, DOI 10.1007/BFb0026421
   Bürger C, 2011, LECT NOTES COMPUT SC, V6563, P22, DOI 10.1007/978-3-642-19440-5_3
   Ekman T, 2007, OOPSLA: 22ND INTERNATIONAL CONFERENCE ON OBJECT-ORIENTED PROGRAMMING, SYSTEMS, LANGUAGES, AND APPLICATIONS, PROCEEDINGS, P1
   FARROW R, 1986, P SIGPLAN S COMP CON, P85
   Hedin G., 2000, Informatica, V24, P301
   Hedin G, 2003, SCI COMPUT PROGRAM, V47, P37, DOI 10.1016/S0167-6423(02)00109-0
   Hedin G, 2011, LECT NOTES COMPUT SC, V6491, P166, DOI 10.1007/978-3-642-18023-1_4
   JOURDAN M, 1984, LECT NOTES COMPUT SC, V167, P167
   Kiczales Gregor, 2001, LNCS, V2072, P327, DOI DOI 10.1007/3-540-45337-718
   Knuth D. E., 1968, Mathematical Systems Theory, V2, P127, DOI 10.1007/BF01692511
   Magnusson E, 2007, SCI COMPUT PROGRAM, V68, P21, DOI 10.1016/j.scico.2005.06.005
   Magnusson E, 2009, AUTOMAT SOFTW ENG, V16, P291, DOI 10.1007/s10515-009-0046-z
   Oqvist J., 2013, Proceedings of the 2013 International Conference on Principles and Practices of Programming on the Java Platform: Virtual Machines, Languages, and Tools, P147, DOI DOI 10.1145/2500828.2500843
   Pearce DJ, 2011, LECT NOTES COMPUT SC, V6601, P104, DOI 10.1007/978-3-642-19861-8_7
   Vogt Harald, 1989, PLDI, P131, DOI 10.1145/73141.74830
   WIRTH N, 1996, COMPILER CONSTRUCTIO
NR 18
TC 5
Z9 5
U1 0
U2 0
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 15
PY 2015
VL 114
BP 74
EP 84
DI 10.1016/j.scico.2015.02.002
PG 11
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CZ5DX
UT WOS:000367123800007
OA Bronze
DA 2024-07-18
ER

PT J
AU Schwägerl, F
   Uhrig, S
   Westfechtel, B
AF Schwaegerl, Felix
   Uhrig, Sabrina
   Westfechtel, Bernhard
TI A graph-based algorithm for three-way merging of ordered collections in
   EMF models
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Model-driven software engineering; EMF models; Version control;
   Three-way merging; Graph algorithm
AB In EMF models, ordered collections appear as the values of multi-valued structural features. Traditional, text-based version control systems do not sufficiently support three-way merging of ordered collections inside EMF models since they cannot guarantee a consistent result. The operation three-way merging is defined as follows: based on a common base version b, two alternative versions a(1) and a(2) were developed by copying and modifying the base version. To reconcile these changes, a merged version m is to be created as a common successor of a(1) and a(2). In this paper, we present a graph algorithm to solve the problem of three-way merging of ordered collections in EMF models. Each version of a collection can be represented by means of a linearly ordered graph. To create the merged version, these graphs are combined to a merged collection graph using set formula. To create the merged collection, a generalized topological sort is performed on the merged collection graph. Conflicts occur in case the order of elements cannot be deduced automatically; these conflicts are resolved either interactively or by default rules. We have implemented the merge algorithm in our tool BTMerge, which performs a consistency-preserving three-way merge of versions of EMF models being instances of arbitrary Ecore models. Our implementation relies on an alternative form of representing multiple versions of a collection, namely a versioned collection graph which forms a superimposition of collection versions. The algorithm presented here is purely state-based. Matching and merging of collections are clearly separated sub-problems. Insertions and deletions performed on the elements of the collection are propagated into the merged version in a consistent way. Our algorithm makes only minimal assumptions with regard to the underlying product model and thus may be applied to ordered collections inside plain text or XML files. By taking arbitrary move operations into account, the algorithm considerably goes beyond the functionality of contemporary merge tools which cannot adequately handle move operations. (C) 2015 Elsevier B.V. All rights reserved.
C1 [Schwaegerl, Felix; Uhrig, Sabrina; Westfechtel, Bernhard] Univ Bayreuth, Chair Appl Comp Sci 1, D-95440 Bayreuth, Germany.
C3 University of Bayreuth
RP Schwägerl, F (corresponding author), Univ Bayreuth, Chair Appl Comp Sci 1, Univ Str 30, D-95440 Bayreuth, Germany.
EM felix.schwaegerl@uni-bayreuth.de; sabrina.uhrig@uni-bayreuth.de;
   bernhard.westfechtel@uni-bayreuth.de
CR Alanen M, 2003, LECT NOTES COMPUT SC, V2863, P2
   Altmanninger K, 2010, INT J ENTERP INF SYS, V6, P68, DOI 10.4018/jeis.2010120206
   Altmanninger K, 2009, INT J WEB INF SYST, V5, P271, DOI 10.1108/17440080910983556
   [Anonymous], XML SCHEM
   Brun COdric., 2008, UPGRADE, The European Journal for the Informatics Professional IX, V2, P29
   Brunelière H, 2014, INFORM SOFTWARE TECH, V56, P1012, DOI 10.1016/j.infsof.2014.04.007
   Collins-Sussman B., 2004, VERSION CONTROL SUBV
   Förtsch S, 2007, ICSOFT 2007: PROCEEDINGS OF THE SECOND INTERNATIONAL CONFERENCE ON SOFTWARE AND DATA TECHNOLOGIES, VOL SE, P90
   HECKEL P, 1978, COMMUN ACM, V21, P264, DOI 10.1145/359460.359467
   HUNT JW, 1977, COMMUN ACM, V20, P350, DOI 10.1145/359581.359603
   Kehrer T., 2014, VERSIONING ORDERED M, P2
   Kelter U., 2005, SOFTWARE ENG, P105
   Khanna S, 2007, LECT NOTES COMPUT SC, V4855, P485
   KOEGEL M, 2010, P 1 INT WORKSH MOD C, P21, DOI DOI 10.1145/1826147.1826154
   Lindholm Tancred., 2004, Proceedings of the 2004 ACM Symposium on Document Engineering, Milwaukee, Wisconsin, USA, October 28-30, 2004, P1
   Mehra A., 2005, ASE, P204, DOI DOI 10.1145/1101908.1101940
   Pohl K., 2005, SOFTWARE PRODUCT LIN, V10
   Schwägerl F, 2014, PROCEEDINGS OF THE 2014 2ND INTERNATIONAL CONFERENCE ON MODEL-DRIVEN ENGINEERING AND SOFTWARE DEVELOPMENT (MODELSWARD 2014), P41
   Schwagerl F, 2013, P WORKSH ACADEMICS T
   SEDGEWICK R, 2003, ALGORITHMS JAVA 5
   Stahl T., 2006, Model-driven software development: technology, engineering, management
   STEINBERG D, 2009, THE ECLIPSE SERIES
   Taentzer G, 2014, SOFTW SYST MODEL, V13, P239, DOI 10.1007/s10270-012-0248-x
   TICHY WF, 1985, SOFTWARE PRACT EXPER, V15, P637, DOI 10.1002/spe.4380150703
   TICHY WF, 1984, ACM T COMPUT SYST, V2, P309, DOI 10.1145/357401.357404
   Uhrig Sabrina, 2013, MODELSWARD 2013. 1st International Conference on Model-Driven Engineering and Software Development. Proceedings, P101
   van Duin M, 2010, MACROMOL SYMP, V291-292, P66, DOI 10.1002/masy.201050508
   Vesperman Jennifer., 2006, Essential CVS
   Westfechtel B., 2010, P 1 INT WORKSH MOD C, P31, DOI DOI 10.1145/1826147.1826155
   Westfechtel B, 2014, SOFTW SYST MODEL, V13, P757, DOI 10.1007/s10270-012-0279-3
   Xing Z., 2005, 20 IEEEACM INT C AUT, P54, DOI DOI 10.1145/1101908.1101919
NR 31
TC 12
Z9 13
U1 0
U2 3
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 1
PY 2015
VL 113
SI SI
BP 51
EP 81
DI 10.1016/j.scico.2015.02.008
PN 1
PG 31
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CY2HT
UT WOS:000366230100004
DA 2024-07-18
ER

PT J
AU dos Santos, J
   Braga, C
   Muchaluat-Saade, DC
AF dos Santos, Joel
   Braga, Christiano
   Muchaluat-Saade, Debora C.
TI A rewriting logic semantics for NCL
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT Brazilian Symposium on Formal Methods (SBMF)
CY SEP 29-OCT 03, 2013
CL Brasilia, BRAZIL
DE Multimedia document validation; Multimedia authoring; Rewriting theory;
   Maude; NCL
ID MODEL
AB The Nested Context Language (NCL) is a multimedia authoring language that is part of the standard for digital television in Brazil and in Latin America and the ITU standard for IPTV services. To properly support authors in the development of NCL applications, it is important to provide tools with validation capabilities. The validation of multimedia documents indicates to the author possible inconsistent points in a given document. Thus the author has the possibility of correcting those inconsistencies before making the multimedia document available for the final user. The validation approach presented in this work considers a set of desirable document properties based on related work published in the literature. Since NCL applications may be understood as finite transition systems, standard model-based validation techniques directly apply. This paper discusses a formalization of NCL semantics with rewriting theory. Two theories are given to represent (i) NCL's static semantics and (ii) NCL's dynamic semantics. In the former, NCL structural properties are validated through equational reduction, while in the latter, NCL expected behaviors are validated through searching. (C) 2015 Elsevier B.V. All rights reserved.
C1 [dos Santos, Joel; Muchaluat-Saade, Debora C.] Univ Fed Fluminense, MidiaCom Lab, BR-24220000 Niteroi, RJ, Brazil.
   [dos Santos, Joel; Braga, Christiano; Muchaluat-Saade, Debora C.] Univ Fed Fluminense, Inst Comp, BR-24220000 Niteroi, RJ, Brazil.
C3 Universidade Federal Fluminense; Universidade Federal Fluminense
RP dos Santos, J (corresponding author), Univ Fed Fluminense, Inst Comp, BR-24220000 Niteroi, RJ, Brazil.
EM joel@midiacom.uff.br; cbraga@ic.uff.br; debora@midiacom.uff.br
RI dos Santos, Joel A. F./O-6246-2016; Muchaluat-Saade, Débora
   Christina/E-7794-2014
OI dos Santos, Joel A. F./0000-0001-7234-613X; 
CR [Anonymous], 2011, 1560622011 ABNT NBR
   [Anonymous], 2001, 15938 ISOIEC
   [Anonymous], 2007, LECT NOTES COMPUTER
   [Anonymous], 2008, EXTENSIBLE MARKUP LA
   BARAL C, 1994, J LOGIC PROGRAM, V20, P73, DOI 10.1016/0743-1066(94)90025-6
   Bertino E, 2005, 2005 IEEE International Conference on Multimedia and Expo (ICME), Vols 1 and 2, P578, DOI 10.1109/ICME.2005.1521489
   Blakowski G, 1996, IEEE J SEL AREA COMM, V14, P5, DOI 10.1109/49.481691
   Bossi A., 2007, P ACM MM SEPT, P107
   de Oliveira M., 2001, ACM T INFORM SYST, V19, P52
   dos Santos Joel, 2013, Formal Methods: Foundations and Applications. 16th Brazilian Symposium, SBMF 2013. Proceedings: LNCS 8195, P67, DOI 10.1007/978-3-642-41071-0_6
   dos Santos J.A.F., 2012, SLE DOCT S DRESD GER, P37
   Durán F, 2011, LECT NOTES COMPUT SC, V7000, P329, DOI 10.1007/978-3-642-24933-4_17
   Felix M.F., 2004, THESIS PONTIFICIA U
   Gaggi O, 2011, MULTIMEDIA SYST, V17, P487, DOI 10.1007/s00530-011-0233-1
   Honorato G., 2010, P ACM S APPL COMPUTI, P1946, DOI [10.1145/1774088.1774500, DOI 10.1145/1774088.1774500]
   ISO/IEC, 2005, 92005 ISOIEC
   Junior D. P., 2012, P 18 BRAZ S M ULT WE, P223, DOI 10.1145/2382636.2382685
   Lima G. F., 2013, P 19 BRAZ S MULT WEB
   MESEGUER J, 1992, THEOR COMPUT SCI, V96, P73, DOI 10.1016/0304-3975(92)90182-F
   Meseguer J, 2012, J LOGIC ALGEBR PROGR, V81, P721, DOI 10.1016/j.jlap.2012.06.003
   Muchaluat-Saade D. C., 2002, New Review of Hypermedia and Multimedia, V8, P139, DOI 10.1080/13614560208914739
   NETO J. D., 2011, PROPOSTA PLANO NACL, P1
   PerezLuque MJ, 1996, IEEE J SEL AREA COMM, V14, P36, DOI 10.1109/49.481692
   Santos C. A. S., 1998, Proceedings ACM Multimedia 98, P39, DOI 10.1145/290747.290753
   Santos J.A.F. dos, 2012, THESIS UFF
   Soares L.F.G., 2012, PROGRAMMING NCL3 0 D
   Soares LFG, 2000, MULTIMEDIA SYST, V8, P118, DOI 10.1007/s005300050155
   Susan Elias, 2006, Applied Computing 2006. 21st Annual ACM Symposium on Applied Computing, P1380, DOI 10.1145/1141277.1141596
   Troncy R, 2010, MULTIMED TOOLS APPL, V46, P307, DOI 10.1007/s11042-009-0397-2
   W3C, 2008, Synchronized multimedia integration language (SMIL 3.0)
   [No title captured]
NR 31
TC 5
Z9 5
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP
PY 2015
VL 107
BP 64
EP 92
DI 10.1016/j.scico.2015.04.006
PG 29
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA CM5DZ
UT WOS:000357708300005
DA 2024-07-18
ER

PT J
AU Mallet, F
   de Simone, R
AF Mallet, Frederic
   de Simone, Robert
TI Correctness issues on MARTE/CCSL constraints
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT Dagstuhl Seminar on Architecture-Driven Semantic Analysis of Embedded
   Systems
CY JUL 01-06, 2012
CL GERMANY
DE Logical time; Architecture-driven analysis; UML MARTE; Reachability
   analysis
ID EVENTS
AB The UML Profile for Modeling and Analysis of Real-Time and Embedded systems promises a general modeling framework to design and analyze systems. Lots of works have been published on the modeling capabilities offered by MARTE, much less on available verification techniques. The Clock Constraint Specification Language (CCSL), first introduced as a companion language for MARTE, was devised to offer a formal support to conduct causal and temporal analysis on MARTE models.
   This work relies on a state-based semantics for CCSL to establish correctness properties on MARTE/CCSL specifications. We propose and compare two different techniques to build the state-space of a specification. One is an extension of some previous work and is based on extended finite state machines. It relies on integer linear programming to solve the constraints and reduce the state-space. The other one is based on an intentional representation and uses pure Boolean abstractions but offers no guarantee to terminate when the specification is not safe.
   The approach is illustrated on one simple example where the architecture plays an important role. We describe a process where the logical description of the application is progressively refined to take into account the execution platform through allocation. (C) 2015 Elsevier B.V. All rights reserved.
C1 [Mallet, Frederic] Univ Nice Sophia Antipolis, Nice, France.
   [Mallet, Frederic; de Simone, Robert] INRIA Sophia Antipolis Mediterranee, Valbonne, France.
   [Mallet, Frederic] E China Normal Univ, Inst Software Engn, Shanghai, Peoples R China.
   [Mallet, Frederic; de Simone, Robert] CNRS, Lab I3S, UMR 7271, F-75700 Paris, France.
C3 Universite Cote d'Azur; East China Normal University; Centre National de
   la Recherche Scientifique (CNRS); Universite Cote d'Azur
RP Mallet, F (corresponding author), Univ Nice Sophia Antipolis, Nice, France.
EM Frederic.Mallet@unice.fr
RI Mallet, Frederic/HKW-6782-2023; Mallet, Frédéric/H-3942-2011
OI Mallet, Frédéric/0000-0002-9088-9821
CR André C, 2007, LECT NOTES COMPUT SC, V4735, P559
   [Anonymous], AS55061 SAE
   [Anonymous], 2009, 6925 INRIA
   Arnold A., 1999, Fundamenta Informaticae, V40, P109
   ARNOLD A, 1994, INT SERIES COMPUTER
   Bardin S, 2004, LECT NOTES COMPUT SC, V2988, P576
   Bardin S, 2003, LECT NOTES COMPUT SC, V2725, P118
   BENVENISTE A, 1991, SCI COMPUT PROGRAM, V16, P103, DOI 10.1016/0167-6423(91)90001-E
   Benveniste A, 2003, P IEEE, V91, P64, DOI 10.1109/JPROC.2002.805826
   Benveniste A, 2008, ACM T EMBED COMPUT S, V7, DOI 10.1145/1376804.1376811
   BERRY G, 1985, LECT NOTES COMPUT SC, V197, P389
   Bliudze S, 2008, IEEE T COMPUT, V57, P1315, DOI 10.1109/TC.2008.26
   Caspi P., 1987, Conference Record of the Fourteenth Annual ACM Symposium on Principles of Programming Languages, P178, DOI 10.1145/41625.41641
   Combemale B, 2013, LECT NOTES COMPUT SC, V8225, P365, DOI 10.1007/978-3-319-02654-1_20
   DeAntoni J, 2012, LECT NOTES COMPUT SC, V7304, P34, DOI 10.1007/978-3-642-30561-0_4
   Feller P.H., 2007, CMUSE12007TN010
   Finkel A, 2000, LECT NOTES COMPUT SC, V1770, P346
   Gascon R., 2011, Proceedings of the 2011 Eighteenth International Symposium on Temporal Representation and Reasoning (TIME 2011), P141, DOI 10.1109/TIME.2011.10
   Hopcroft J., 1979, Theoretical Computer Science, V8, P135, DOI 10.1016/0304-3975(79)90041-0
   Huafeng Yu, 2011, 2011 9th IEEE/ACM International Conference on Formal Methods and Models for Codesign (MEMOCODE 2011), P21, DOI 10.1109/MEMCOD.2011.5970507
   JOHNSSON T, 1984, SIGPLAN NOTICES, V19, P58, DOI 10.1145/502949.502880
   LAMPORT L, 1978, COMMUN ACM, V21, P558, DOI 10.1145/359545.359563
   Lee EA, 1998, IEEE T COMPUT AID D, V17, P1217, DOI 10.1109/43.736561
   Mallet F., 2012, 2012 23rd IEEE International Symposium on Rapid System Prototyping (RSP 2012), P86, DOI 10.1109/RSP.2012.6380695
   Mallet F, 2013, P ACM IEEE INT CONF, P157
   OMG, 2009, UML PROF MARTE V1 0
   Suryadevara J, 2013, LECT NOTES COMPUT SC, V8137, P1, DOI 10.1007/978-3-642-40561-7_1
   VALIANT LG, 1975, J COMPUT SYST SCI, V10, P340, DOI 10.1016/S0022-0000(75)80005-5
   Yin L, 2011, 2011 16TH IEEE INTERNATIONAL CONFERENCE ON ENGINEERING OF COMPLEX COMPUTER SYSTEMS (ICECCS), P65, DOI 10.1109/ICECCS.2011.14
NR 29
TC 33
Z9 35
U1 0
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD AUG 1
PY 2015
VL 106
SI SI
BP 78
EP 92
DI 10.1016/j.scico.2015.03.001
PG 15
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA CQ4RF
UT WOS:000360591600005
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Ng, PW
AF Ng, Pan-Wei
TI Integrating software engineering theory and practice using essence: A
   case study
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Software engineering; Theory; Kernel; SEMAT; Essence
ID REQUIREMENTS; SUCCESS; DESIGN
AB Software engineering is complex and success depends on many inter-related factors. Theory Based Software Engineering (TBSE) is about providing a practical way for software teams to understand the relationships and the influence of these factors to thereby adapt the way they work. This paper proposes an approach to TBSE based on Essence, a software engineering kernel distilled by the SEMAT (Software Engineering Method and Theory) initiative. Essence supports TBSE by providing a domain model that is useful for organizing and relating software engineering factors. Essence also helps make recommended practices precise and actionable to software teams. We provide a step-by-step application of our approach on an industrial software process improvement case study. The case study achieved 21% productivity gains and 58% decrease in defects. But more importantly than these results, it demonstrates the value of Essence in supporting TBSE. (C) 2014 Elsevier B.V. All rights reserved.
EM panwei@ivarjacobson.com
CR [Anonymous], ACM SIGSOFT SOFTW EN
   [Anonymous], 1995, MYTHICAL MAN MONTH
   Boehm B., 1995, Annals of Software Engineering, V1, P57, DOI 10.1007/BF02249046
   Boehm B, 2001, IEEE SOFTWARE, V18, P46, DOI 10.1109/52.922725
   Charette RN, 2005, IEEE SPECTRUM, V42, P42, DOI 10.1109/MSPEC.2005.1502528
   Charette Robert N., 2013, IT HICCUPS WEEK COMP
   Chow T, 2008, J SYST SOFTWARE, V81, P961, DOI 10.1016/j.jss.2007.08.020
   Clarke P, 2012, INFORM SOFTWARE TECH, V54, P433, DOI 10.1016/j.infsof.2011.12.003
   CONWAY ME, 1968, DATAMATION, V14, P28
   Davila T, 2000, ACCOUNT ORG SOC, V25, P383, DOI 10.1016/S0361-3682(99)00034-3
   Deming W.Edwards., 2000, The New Economics for Industry, Government, Education
   Dijkstra E W, 1976, DISCIPLINE PROGRAMMI, V1
   Dijkstra E.W., 1982, EWD 447: On the role of scientific thought. Selected Writings on Computing: A Personal Perspective, P60, DOI DOI 10.1007/978-1-4612-5695-3
   Dybå T, 2005, IEEE T SOFTWARE ENG, V31, P410, DOI 10.1109/TSE.2005.53
   Dyba T, 2005, IEEE SOFTWARE, V22, P58, DOI 10.1109/MS.2005.6
   Dybå T, 2012, INT SYMP EMP SOFTWAR, P19, DOI 10.1145/2372251.2372256
   Eaddy M, 2008, IEEE T SOFTWARE ENG, V34, P497, DOI 10.1109/TSE.2008.36
   Glass RL, 2004, COMMUN ACM, V47, P19, DOI 10.1145/986213.986228
   Herbsleb J. D., 1999, Proceedings of the 1999 International Conference on Software Engineering (IEEE Cat. No.99CB37002), P85, DOI 10.1109/ICSE.1999.840998
   Jacobson I., 2013, The Essence of Software Engineering: Applying the SEMAT Kernel
   JACOBSON I, 2004, ADDISON WESLEY OBJEC
   Jacobson I, 2012, COMMUN ACM, V55, P42, DOI 10.1145/2380656.2380670
   Jacobson I, 2012, PROGRAM COMPUT SOFT+, V38, P1, DOI 10.1134/S0361768812010021
   Jacobson Ivar, 2009, DOBBS J         1209
   Jensen, 1977, GROUP ORGAN STUD, V2, P419, DOI [DOI 10.1177/105960117700200404, 10.1177/105960117700200404]
   Johnson P., 2012, IEEE Software, V29, P94, DOI 10.1109/MS.2012.127
   Johnson P., 2013, ACM SIGSOFT SOFTW EN, V38, P47, DOI DOI 10.1145/2507288.2529923
   Jones Capers, 2011, The Economics of Software Quality
   Kitchenham B, 2009, INFORM SOFTWARE TECH, V51, P7, DOI 10.1016/j.infsof.2008.09.009
   Kruchten Philippe, 2007, QUEUE, V5, P1
   KURT L, 1952, FIELD THEORY SOCIAL
   Lawson H.W., 2010, A journey through the systems landscape
   LEHMAN MM, 1980, P IEEE, V68, P1060, DOI 10.1109/PROC.1980.11805
   Lethbridge TC, 2007, FOSE 2007: FUTURE OF SOFTWARE ENGINEERING, P12, DOI 10.1109/FOSE.2007.13
   Madison J, 2010, IEEE SOFTWARE, V27, P41, DOI 10.1109/MS.2010.35
   Ng PW, 2013, 2013 2ND SEMAT WORKSHOP ON A GENERAL THEORY OF SOFTWARE ENGINEERING (GTSE), P51, DOI 10.1109/GTSE.2013.6613871
   Nuseibeh B, 2001, COMPUTER, V34, P115, DOI 10.1109/2.910904
   Object Management Group, ESS KERN LANG SOFTW
   Osterweil L., 1987, Proceedings of the 9th International Conference on Software Engineering (Cat. No.87CH2432-3), P2
   Pan-Wei Ng, 2014, International Journal of Engineering and Technology, V6, P99, DOI 10.7763/IJET.2014.V6.674
   Petersen K, 2009, INT SYMP EMP SOFTWAR, P402
   Reichertz J., 2007, The sage handbook of grounded theory
   Ruparelia N. B., 2010, SIGSOFT Softw. Eng. Notes, V35, P8, DOI DOI 10.1145/1764810.1764814
   Shull F, 2010, IEEE SOFTWARE, V27, P16, DOI 10.1109/MS.2010.152
   Shull F, 2009, IEEE SOFTWARE, V26, P6, DOI 10.1109/MS.2009.145
   Verzuh E., 2011, FAST FORWARD MBA PRO
   Wiegers K.E., 2009, Software Requirements, VSecond
   Zhang C, 2012, IEEE T SOFTWARE ENG, V38, P1213, DOI 10.1109/TSE.2011.79
   Zimmermann T, 2009, INT SYMP EMP SOFTWAR, P436
NR 49
TC 0
Z9 0
U1 1
U2 19
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD APR 1
PY 2015
VL 101
BP 66
EP 78
DI 10.1016/j.scico.2014.11.009
PG 13
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CC6XZ
UT WOS:000350513600005
OA Bronze
DA 2024-07-18
ER

PT J
AU Ashrov, A
   Marron, A
   Weiss, G
   Wiener, G
AF Ashrov, Adiel
   Marron, Assaf
   Weiss, Gera
   Wiener, Guy
TI A use-case for behavioral programming: An architecture in Java Script
   and Blockly for interactive applications with cross-cutting scenarios
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Web application; Smartphone; Visual programmming; Coroutines; HTML5
ID PLAY-OUT; LANGUAGE
AB We combine visual programming using Google Blockly with a single-threaded implementation of behavioral programming (BP) in JavaScript, and propose design patterns for developing reactive systems such as client-side Web applications and smartphone customization applications as collections of independent cross-cutting scenarios that are interwoven at run time. We show that BP principles can be instrumental in addressing common software engineering issues such as separation of graphical representation from logic and the handling of inter-object scenarios. We also show that a BP infrastructure can be implemented with limited run-time resources in a single-threaded environment using coroutines. In addition to expanding the availability of BP capabilities, we hope that this work will contribute to the evolving directions of technologies and design patterns in developing interactive applications. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Ashrov, Adiel; Weiss, Gera] Ben Gurion Univ Negev, IL-84105 Beer Sheva, Israel.
   [Marron, Assaf] Weizmann Inst Sci, IL-76100 Rehovot, Israel.
   [Wiener, Guy] HP Labs, Haifa, Israel.
C3 Ben Gurion University; Weizmann Institute of Science
RP Marron, A (corresponding author), Weizmann Inst Sci, IL-76100 Rehovot, Israel.
EM ashrov@cs.bgu.ac.il; assaf.marron@weizmann.ac.il; geraw@cs.bgu.ac.il;
   guy.wiener@hp.com
RI MARRON, ASSAF/GWQ-4567-2022; Weiss, Gera/F-1549-2012
FU John von Neumann Minerva Center for the Development of Reactive Systems
   at the Weizmann Institute of Science; European Research Council (ERC)
   under the European Community's FP7 Programme; Israeli Science
   Foundation; Lynn and William Frankel Center for Computer Science at
   Ben-Gurion University; reintegration (IRG) grant under the European
   Community's FP7 Programme
FX The research of Assaf Marron and of Guy Wiener was supported in part by
   the John von Neumann Minerva Center for the Development of Reactive
   Systems at the Weizmann Institute of Science, by an Advanced Research
   Grant to David Harel from the European Research Council (ERC) under the
   European Community's FP7 Programme, and by the Israeli Science
   Foundation. The research of Gera Weiss and Adiel Ashrov was supported by
   the Lynn and William Frankel Center for Computer Science at Ben-Gurion
   University, by a reintegration (IRG) grant under the European
   Community's FP7 Programme, and by the Israeli Science Foundation.
CR [Anonymous], 1980, LNCS
   [Anonymous], 2013, ECMASCRIPT STANDARD
   [Anonymous], CAV
   [Anonymous], SESENA
   Armstrong J., 1993, Concurrent programming in ERLANG
   Ben-Ari M., SCRATCH PROJECT DISC
   Berry G, 2000, FOUNDAT COMPUT, P425
   Boyd N., 2007, RHINO JAVASCRIPT JAV
   Damm W, 2001, FORM METHOD SYST DES, V19, P45, DOI 10.1023/A:1011227529550
   Eitan N., 2011, INT C PROGR COMPR IC
   Eitan N., 2011, IEEE INT C TOOL ART
   FENTON J, 1989, SIGPLAN NOTICES, V24, P123, DOI 10.1145/74878.74891
   Gordon M., 2012, 17 ANN C INN TECHN C
   HALBWACHS N, 1991, P IEEE, V79, P1305, DOI 10.1109/5.97300
   Harel D, 2002, LECT NOTES COMPUT SC, V2517, P378
   Harel D., 2011, 2011 International Conference on Embedded Software (EMSOFT 2011), P279
   Harel D., 2003, COME LETS PLAY SCENA, DOI 10.1007/978-3-642-19029-2
   Harel D., 2012, INT C ENG COMPL COMP
   Harel D., 2011, PROC 1 SPLASH WORKSH, P171, DOI DOI 10.1145/2095050
   Harel D, 2007, LECT NOTES COMPUT SC, V4424, P485
   Harel D, 2015, SCI COMPUT PROGRAM, V98, P233, DOI 10.1016/j.scico.2014.03.003
   Harel D, 2012, COMMUN ACM, V55, P90, DOI 10.1145/2209249.2209270
   Harel D, 2012, J COMPUT SYST SCI, V78, P970, DOI 10.1016/j.jcss.2011.08.008
   Harel D, 2010, LECT NOTES COMPUT SC, V6183, P250, DOI 10.1007/978-3-642-14107-2_12
   Henzinger TA, 2003, IEEE CONTR SYST MAG, V23, P50, DOI 10.1109/MCS.2003.1172829
   HOARE CAR, 1978, COMMUN ACM, V21, P666, DOI 10.1145/359576.359585
   HOUSSAIS B, 2002, SYNCHRONOUS PROGRAMM
   Kitchin D, 2009, LECT NOTES COMPUT SC, V5522, P1, DOI 10.1007/978-3-642-02138-1_1
   Knuth D. E., 1997, ART COMPUTER PROGRAM, V1, P193
   Meerbaum-Salant O., 2011, P 16 ANN JOINT C INN, P168, DOI DOI 10.1145/1999747.1999796
   Meyerovich LA, 2009, ACM SIGPLAN NOTICES, V44, P1, DOI 10.1145/1639949.1640091
   MILNER R, 1992, INFORM COMPUT, V100, P1, DOI [10.1016/0890-5401(92)90008-4, 10.1016/0890-5401(92)90009-5]
   MISRA J, 1988, INT SUMMER SCH CONST, P397
   Moenig J, BYOB BUILD YOUR OWN
   Mozilla Foundation, FIREFOX JAVASCRIPT 1
   Resnick M, 2009, COMMUN ACM, V52, P60, DOI 10.1145/1592761.1592779
   Weiss Gera, 2007, P 46 IEEE C DECISION, P4643, DOI [DOI 10.1109/CDC.2007.4434194, /10.1109/cdc.2007.4434194]
NR 37
TC 7
Z9 7
U1 2
U2 27
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 1
PY 2015
VL 98
SI SI
BP 268
EP 292
DI 10.1016/j.scico.2014.01.017
PN 2
PG 25
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AY7LF
UT WOS:000347741000008
OA Bronze
DA 2024-07-18
ER

PT J
AU Clark, T
AF Clark, Tony
TI XPL: A language for modular homogeneous language embedding
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Domain specific languages; Software language engineering; Language
   modules
AB Languages that are used for Software Language Engineering (SLE) offer a range of features that support the construction and deployment of new languages. SLE languages offer features for constructing and processing syntax and defining the semantics of language features. New languages may be embedded within an existing language (internal) or may be stand-alone (external). Modularity is a desirable SLE property for which there is no generally agreed approach. This article analyses the current tools for SLE and identifies the key features that are common. It then proposes a language called XPL that supports these features. XPL is higher-order and allows languages to be constructed and manipulated as first-class elements and therefore can be used to represent a range of approaches to modular language definition. This is validated by using XPL to define the notion of a language module that supports modular language construction and language transformation. (C) 2014 Elsevier B.V. All rights reserved.
C1 Middlesex Univ, Dept Comp Sci, London NW4 4BT, England.
C3 Middlesex University
RP Clark, T (corresponding author), Middlesex Univ, Dept Comp Sci, London NW4 4BT, England.
EM t.n.clark@mdx.ac.uk
OI clark, tony/0000-0003-3167-0739
CR [Anonymous], 2007, The Definitive ANTLR Reference: Building Domain-Specific Languages
   Baker J, 2002, ACM SIGPLAN NOTICES, V37, P270, DOI 10.1145/543552.512562
   Batory D, 2004, IEEE T SOFTWARE ENG, V30, P355, DOI 10.1109/TSE.2004.23
   Berger M, 2010, LECT NOTES ARTIF INT, V6355, P64, DOI 10.1007/978-3-642-17511-4_5
   Brabrand C, 2002, ACM SIGPLAN NOTICES, V37, P31, DOI 10.1145/509799.503035
   Bravenboer M, 2008, LECT NOTES COMPUT SC, V5002, P34
   Bravenboer M, 2008, SCI COMPUT PROGRAM, V72, P52, DOI 10.1016/j.scico.2007.11.003
   Bravenboer M, 2009, LECT NOTES COMPUT SC, V5452, P74, DOI 10.1007/978-3-642-00434-6_6
   Cardelli L, 1993, P 4 INT WORKSH DAT P, P11
   Cazzola W, 2009, DSAL09: DOMAIN-SPECIFIC ASPECT LANGUAGES, P11
   Clark T., 2009, OOPSLA 09 P 24 ACM S, P949
   Clark T, 2010, ELECTRON NOTES THEOR, V253, P75, DOI 10.1016/j.entcs.2010.08.033
   Cordy J.R., 2004, Electron. Notes Theor. Comput. Sci, V110, P3, DOI [DOI 10.1016/J.ENTCS.2004.11.006, 10.1016/j.entcs.2004.11.006, https://doi.org/10.1016/j.entcs.2004.11.006]
   Devriese D, 2011, LECT NOTES COMPUT SC, V6539, P84, DOI 10.1007/978-3-642-18378-2_9
   EARLEY J, 1970, COMMUN ACM, V13, P94, DOI 10.1145/362007.362035
   Eysholdt M., 2010, P ACM INT C COMPANIO, P307, DOI DOI 10.1145/1869542.1869625
   Ford B, 2002, ACM SIGPLAN NOTICES, V37, P36, DOI 10.1145/583852.581483
   Fowler M., 2010, Domain-specific languages
   Gayo J.L., 2002, P 6 BRAZ S PROGR LAN
   Granicz A., 2003, HICSS, P324
   Grimm R, 2006, ACM SIGPLAN NOTICES, V41, P38, DOI 10.1145/1133981.1133987
   Herman D, 2008, LECT NOTES COMPUT SC, V4960, P48
   Hutton G., 1998, Journal of Functional Programming, V8, P437, DOI 10.1017/S0956796898003050
   Hutton G, 1998, J FUNCT PROGRAM, V8, P437, DOI [10.1017/S0956796898003050, DOI 10.1017/S0956796898003050]
   Johnstone A., 2011, P 11 WORKSH LANG DES, P9
   Kats L.C.L., 2010, P ONW 2010 ACM
   Klint P, 2005, ACM T SOFTW ENG METH, V14, P331, DOI 10.1145/1072997.1073000
   Kodaganallur V, 2004, IEEE SOFTWARE, V21, P70, DOI 10.1109/MS.2004.16
   Krahn H, 2008, LECT NOTES BUS INF P, V11, P297
   Labra Gayo J., 2001, ELECT NOTES THEOR CO, V44, P110
   Labra Gayo J., 2002, ELECT NOTES THEOR CO, V64, P220
   LADD DA, 1995, IEEE T SOFTWARE ENG, V21, P894, DOI 10.1109/32.473218
   Lämmel R, 2001, IEEE SOFTWARE, V18, P78, DOI 10.1109/52.965809
   Landin P.J., 2009, COMPUTER, V22, P333
   Mernik M, 2005, ACM COMPUT SURV, V37, P316, DOI 10.1145/1118890.1118892
   Moggi E, 1999, LECT NOTES COMPUT SC, V1576, P193
   Schwerdfeger AC, 2009, ACM SIGPLAN NOTICES, V44, P199, DOI 10.1145/1543135.1542499
   Sheard T., 2002, P HASK WORKSH 2002 A
   Sheng Liang, 1996, Programming Languages and Systems - ESOP '96. 6th European Symposium on Programming. Proceedings, P219
   Sperber M., 2009, J FUNCT PROGRAM, V19, P1, DOI DOI 10.1017/S0956796809990074
   Spinellis D, 2001, J SYST SOFTWARE, V56, P91, DOI 10.1016/S0164-1212(00)00089-3
   Steele GuyL., 2011, Encyclopedia of Parallel Computing, P718, DOI [10.1007/978-0-387-09766-4, DOI 10.1007/978-0-387-09766-4]
   Steele Jr Guy L., 1990, COMMON LISP LANGUAGE
   Tatsubori M, 2000, LECT NOTES COMPUT SC, V1826, P117
   Tomita Masaru., 1985, EFFICIENT PARSING NA
   Van Wyk E, 2010, SCI COMPUT PROGRAM, V75, P39, DOI 10.1016/j.scico.2009.07.004
   Voelter M., 2010, SOFTWARE LANGUAGE EN, V16
   Volter M, 2011, INT SUMMER SCH GENER, V7680, P383
   WARD MP, 1994, SOFTWARE-CONC TOOL, V15, P147
   Wende C, 2010, LECT NOTES COMPUT SC, V5969, P254
NR 50
TC 0
Z9 0
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 1
PY 2015
VL 98
BP 589
EP 616
DI 10.1016/j.scico.2014.08.005
PN 4
PG 28
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AY7LJ
UT WOS:000347741400007
OA Green Accepted, Bronze
DA 2024-07-18
ER

PT J
AU Harel, D
   Kantor, A
   Katz, G
   Marron, A
   Weiss, G
   Wiener, G
AF Harel, David
   Kantor, Amir
   Katz, Guy
   Marron, Assaf
   Weiss, Gera
   Wiener, Guy
TI Towards behavioral programming in distributed architectures
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Behavioral programming; Live sequence charts; Logical execution time;
   Time scales; Synchronization
ID AGENT; SYSTEMS; COMPLEX; DESIGN
AB As part of expanding the implementation and use of the behavioral programming (BP) approach in a variety of languages and configurations, we tackle some of the challenges associated with applying the approach in a truly distributed, decentralized manner, where different modules run on separate machines. BP supports the development of reactive applications from modules that are aligned with the desired and undesired scenarios of system behaviors as described, say, in a requirements document, in an enhancement request, or a field problem report. A key advantage of this approach is that it facilitates incremental development where loosely coupled modules are added as requirements are introduced, and meaningful prototype execution can be carried out from early stages of development. In BP, each behavioral module (called a behavior thread) takes care of a separate facet of the requirements, thus control is conceptually decentralized. However, as the underlying principles of BP call for constant synchronization of, and "consultation" with, all behavior threads, efficient implementation in a physically distributed environment is a significant challenge on the road to broader acceptance of BP as a viable new way to develop systems. We begin by describing an implementation of BP in Erlang, where the coordination protocol is implemented via message passing. We demonstrate through examples how developing distributed systems in Erlang can benefit from BP advantages of incremental development and alignment of the code modules with the requirements. Next, we propose general BP design patterns (not limited to Erlang) for using BP in distributed applications, showing how to design applications using BP without forcing full synchronization among all threads at each step of the execution. This allows modules to run at different time scales and to wait for external input without stalling the entire system. Finally, we propose ways to alter the execution mechanism of BP so that execution can progress without necessarily waiting for the synchronization of all the threads. The enhanced execution algorithm has the potential of accelerating the distributed execution of behavioral programs. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Harel, David; Katz, Guy; Marron, Assaf] Weizmann Inst Sci, IL-76100 Rehovot, Israel.
   [Kantor, Amir] IBM Res, Haifa Lab, Mt Cannel, Israel.
   [Weiss, Gera] Ben Gurion Univ Negev, IL-84105 Beer Sheva, Israel.
   [Wiener, Guy] HP Labs, Haifa, Israel.
C3 Weizmann Institute of Science; Ben Gurion University
RP Marron, A (corresponding author), Weizmann Inst Sci, IL-76100 Rehovot, Israel.
EM david.harel@weizmann.ac.il; amirka@il.ibm.com; guy.katz@weizmann.ac.il;
   assaf.marron@weizmann.ac.il; geraw@cs.bgu.ac.il; guy.wiener@hp.com
RI Weiss, Gera/F-1549-2012; MARRON, ASSAF/GWQ-4567-2022
FU John von Neumann Minerva Center for the Development of Reactive Systems
   at the Weizmann Institute of Science; European Research Council (ERC)
   under the European Community's Seventh Framework Programme (FP7); Lynn
   and William Frankel Center for Computer Science at Ben-Gurion
   University; European Community's FP7 Programme [PIRG07-GA-2010-268310];
   Israel Science Foundation [857/12]
FX The research of the D. Harel, A. Kantor, G. Katz, A. Marron and G.
   Wiener was supported by the John von Neumann Minerva Center for the
   Development of Reactive Systems at the Weizmann Institute of Science, by
   an Advanced Research Grant to Harel from the European Research Council
   (ERC) under the European Community's Seventh Framework Programme
   (FP7/2007-2013) and by the Israel Science Foundation. The research of G.
   Weiss was supported by the Lynn and William Frankel Center for Computer
   Science at Ben-Gurion University, by a reintegration (IRG) grant
   PIRG07-GA-2010-268310 under the European Community's FP7 Programme, and
   by the Israel Science Foundation (grant number 857/12).
CR Abadi M, 2012, IEEE INT CONF AUTOM, P238, DOI 10.1145/2351676.2351711
   Agha G., 1986, Actors: a model of concurrent computation in distributed systems
   [Anonymous], 2010, AXUM PROGRAMMERS GUI
   [Anonymous], 2009, Multi-Agent Programming: Languages, Tools and Applications, DOI DOI 10.1007/978-0-387-89299-34
   [Anonymous], EUR C OBJ OR PROGR E
   [Anonymous], CAV
   [Anonymous], SESENA
   Armstrong J, 2010, COMMUN ACM, V53, P68, DOI 10.1145/1810891.1810910
   Ashrov A, 2015, SCI COMPUT PROGRAM, V98, P268, DOI 10.1016/j.scico.2014.01.017
   Barak D, 2004, LECT NOTES COMPUT SC, V3098, P66, DOI 10.1007/978-3-540-27755-2_2
   Bordini R., 2007, PROGRAMMING MULTIAGE
   Bordini R.H., 2009, Multi-Agent Programming: Languages, Tools and Applications
   Bouabdallah S, 2004, IEEE INT CONF ROBOT, P4393, DOI 10.1109/ROBOT.2004.1302409
   Bouabdallah S., 2007, PhD diss.
   Bouge L., 1988, POPL
   Bratman M. E., 1988, Computational Intelligence, V4, P349, DOI 10.1111/j.1467-8640.1988.tb00284.x
   Cai WT, 1999, THIRTEENTH WORKSHOP ON PARALLEL AND DISTRIBUTED SIMULATION - PROCEEDINGS, P82, DOI 10.1109/PADS.1999.766164
   Damm W, 2001, FORM METHOD SYST DES, V19, P45, DOI 10.1023/A:1011227529550
   Dastani M, 2008, AUTON AGENT MULTI-AG, V16, P214, DOI 10.1007/s10458-008-9036-y
   Di Stefano A, 2005, 2005 IEEE/WIC/ACM INTERNATIONAL CONFERENCE ON INTELLIGENT AGENT TECHNOLOGY, PROCEEDINGS, P679
   Di Stefano A., 2005, ERLANG 05, P62
   Eitan N., 2011, INT C PROGR COMPR IC
   Fuchs E., 2010, FRONTIERS NEURAL CIR
   Fujimoto RM, 1995, 1995 WINTER SIMULATION CONFERENCE PROCEEDINGS, P118
   GAMMA E, 1995, DESIGN PATTERNS
   HAREL D, 1987, SCI COMPUT PROGRAM, V8, P231, DOI 10.1016/0167-6423(87)90035-9
   Harel D., 2011, 2011 International Conference on Embedded Software (EMSOFT 2011), P279
   Harel D., 2003, COME LETS PLAY SCENA, DOI 10.1007/978-3-642-19029-2
   Harel D., 2012, INT C ENG COMPL COMP
   Harel D., 2012, IEEE INT CONF FUZZY
   Harel D, 2012, COMMUN ACM, V55, P90, DOI 10.1145/2209249.2209270
   Harel D, 2010, LECT NOTES COMPUT SC, V6183, P250, DOI 10.1007/978-3-642-14107-2_12
   Harel David, 1996, ACM T SOFTW ENG METH, V5, P4
   Henzinger TA, 2003, IEEE CONTR SYST MAG, V23, P50, DOI 10.1109/MCS.2003.1172829
   Jennings NR, 2001, COMMUN ACM, V44, P35, DOI 10.1145/367211.367250
   Katz Guy, 2013, Logic for Programming, Artificial Intelligence and Reasoning. 19th International Conference, LPAR-19, Proceedings: LNCS 8312, P518, DOI 10.1007/978-3-642-45221-5_35
   Kay A., 2010, TECHNICAL REPORT
   KELLER RM, 1976, COMMUN ACM, V19, P371, DOI 10.1145/360248.360251
   Liberzon D., 2003, SYS CON FDN
   Lygeros J., 1999, INTRO HYBRID SYSTEM
   Marron Assaf., 2012, Proceedings of the 2nd edition on Programming systems, languages and applications based on actors, agents, and decentralized control abstractions - AGERE!'12, page, P59
   Miao W., 2007, GCC
   Rao A., 1991, COMMERCE MODELING RA
   Ricci A, 2008, LECT NOTES ARTIF INT, V5118, P261, DOI 10.1007/978-3-540-85058-8_16
   SHOHAM Y, 1993, ARTIF INTELL, V60, P51, DOI 10.1016/0004-3702(93)90034-9
   [No title captured]
NR 46
TC 9
Z9 9
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 1
PY 2015
VL 98
SI SI
BP 233
EP 267
DI 10.1016/j.scico.2014.03.003
PN 2
PG 35
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AY7LF
UT WOS:000347741000007
OA Bronze
DA 2024-07-18
ER

PT J
AU Heitkötter, H
   Kuchen, H
   Majchrzak, TA
AF Heitkoetter, Henning
   Kuchen, Herbert
   Majchrzak, Tim A.
TI Extending a model-driven cross-platform development approach for
   business apps
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Cross-platform development; Business apps; Model-driven development;
   Device-specific layout; Control structures
AB Due to the heterogeneity of different platforms, it is an expensive endeavor to provide a mobile application (app) for several of them. Cross-platform development approaches can solve this problem. Existing cross-platform approaches have severe limitations and typically work on a low-level of abstraction. Our model-driven cross-platform approach MD2 focuses on the domain of business apps and, hence, reaches a high-level of abstraction while maintaining a platform-specific look and feel. A textual model written in an MVC-based DSL is automatically transformed into native apps for Android and iOS. The present paper focuses on new extensions of MD2, namely device-specific layout, extended control structures, and offline computing. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Heitkoetter, Henning; Kuchen, Herbert; Majchrzak, Tim A.] Univ Munster, Dept Informat Syst, D-48149 Munster, Germany.
C3 University of Munster
RP Kuchen, H (corresponding author), Univ Munster, Dept Informat Syst, Leonardo Campus 3, D-48149 Munster, Germany.
EM heitkoetter@wi.uni-muenster.de; kuchen@wi.uni-muenster.de;
   tima@wi.uni-muenster.de
RI Kuchen, Herbert/H-7693-2018; Majchrzak, Tim A./S-8675-2018
OI Majchrzak, Tim A./0000-0003-2581-9285
CR Akiki P.A., 2013, Proceedings of the 5th ACM SIGCHI symposium on Engineering interactive computing systems, P3
   [Anonymous], LNI
   [Anonymous], 2013, RESPONSIVE WEB DESIG
   Atkins DL, 1999, IEEE T SOFTWARE ENG, V25, P334, DOI 10.1109/32.798323
   Behan M, 2012, LECT NOTES ARTIF INT, V7197, P411, DOI 10.1007/978-3-642-28490-8_43
   Coutaz J, 2010, EICS 2010: PROCEEDINGS OF THE 2010 ACM SIGCHI SYMPOSIUM ON ENGINEERING INTERACTIVE COMPUTING SYSTEMS, P1
   Feeney W. R., 1977, Computer Personnel, V6, P4, DOI 10.1145/382079.382081
   Fowler M., 2011, DOMAIN SPECIFIC LANG
   Gajos KZ, 2010, ARTIF INTELL, V174, P910, DOI 10.1016/j.artint.2010.05.005
   Gamma E., 1994, Design patterns: Elements of reusable object-oriented software
   Heitkötter H, 2013, LECT NOTES COMPUT SC, V7939, P405
   Heitkötter H, 2013, LECT NOTES BUS INF P, V140, P120
   Heitkotter H., 2012, BUSINESS APPS GRUNDL
   Heitkotter Henning, 2013, P 28 ANN ACM S APPL, P526
   Majchrzak Tim A., 2013, WEBIST 2013. 9th International Conference on Web Information Systems and Technologies. Proceedings, P335
   Mejia A., 2012, P CUBE INT INF TECHN, P598
   Spinellis D, 2001, J SYST SOFTWARE, V56, P91, DOI 10.1016/S0164-1212(00)00089-3
   The Eclipse Foundation, 2013, XTEXT
NR 18
TC 23
Z9 27
U1 0
U2 29
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 1
PY 2015
VL 97
SI SI
BP 31
EP 36
DI 10.1016/j.scico.2013.11.013
PN 1
PG 6
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AU6PR
UT WOS:000345725100006
OA Bronze
DA 2024-07-18
ER

PT J
AU Hlopko, M
   Kurs, J
   Vrany, J
   Gittinger, C
AF Hlopko, Marcel
   Kurs, Jan
   Vrany, Jan
   Gittinger, Claus
TI On the integration of Smalltalk and Java
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Language interoperability; Smalltalk; Java
AB After decades of development in programming languages and programming environments, Smalltalk is still one of few environments that provide advanced features and is used in the industry. However, as Java became prevalent, the ability to call a Java code from Smalltalk became important. A traditional approach to integrate the Java and Smalltalk languages is through low-level communication between separate Java and Smalltalk virtual machines. To our best knowledge there is no other project attempting to execute and integrate the Java language directly in the Smalltalk environment. A direct integration allows for a very tight integration of the languages and their objects within a single environment. Yet integration and language interoperability impose challenging issues related to method naming conventions, method overloading, exception handling and thread-locking mechanisms.
   In this paper we describe ways to overcome these challenges and to integrate Java into the Smalltalk environment. We focus on a possibility to call a Java code from Smalltalk using standard Smalltalk idioms while the semantics of both languages remains preserved. We present STX:LIBJAVA an implementation of a Java virtual machine within Smalltalk/X - as a validation of our approach. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Hlopko, Marcel; Vrany, Jan] Czech Tech Univ, Fac Informat Technol, Prague 16000 6, Czech Republic.
   [Kurs, Jan] Univ Bern, Inst Informat, Software Composit Grp, CH-3012 Bern, Switzerland.
   [Vrany, Jan; Gittinger, Claus] eXept Software AG, D-74321 Bietigheim Bissingen, Germany.
C3 Czech Technical University Prague; University of Bern
RP Hlopko, M (corresponding author), Czech Tech Univ, Fac Informat Technol, Thakurova 9, Prague 16000 6, Czech Republic.
EM marcel.hlopko@fit.cvut.cz; kurs@iam.unibe.ch; jan.vrany@fit.cvut.cz;
   cg@exept.de
CR Brichau J., 2009, P INT WORKSH SMALLT, P120, DOI 10 1145/1735935.1735956
   Deupree J., 2008, VISUALAGE INTEGRATIO
   Expecco, 2012, JAV INT LIB 2 1
   Gittinger C., 2005, JAVASCRIPT COMPILER
   Gosling J., 2005, Java Language Specification, Vthird
   Hlopko M., P DAT 2013 WORKSH PI
   Hlopko M., 2012, P INT WORKSH SMALLT
   Ladd J., 2011, SMALLTALK IMPLEMENTA
   Lindholm Tim., 1999, JAVA VIRTUAL MACHINE, V2nd
   Vrany J., 2012, OBJECTS MODELS COMPO, P1
   Vrany J., 2010, THESIS CZECH TU PRAG
NR 11
TC 1
Z9 1
U1 0
U2 7
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 15
PY 2014
VL 96
SI SI
BP 17
EP 33
DI 10.1016/j.scico.2013.10.011
PN 1
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AT8JX
UT WOS:000345180800003
DA 2024-07-18
ER

PT J
AU Stevenson, A
   Cordy, JR
AF Stevenson, Andrew
   Cordy, James R.
TI A survey of grammatical inference in software engineering
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Grammatical inference; Software engineering; Grammar induction
ID CONTEXT-FREE GRAMMARS; POLYNOMIAL-TIME LEARNABILITY; EXTRACTING GRAMMAR;
   STRUCTURAL DATA; LANGUAGES; IDENTIFICATION; ALGORITHM; PROGRAMS;
   AUTOMATA; QUERIES
AB Grammatical inference - used successfully in a variety of fields such as pattern recognition, computational biology and natural language processing - is the process of automatically inferring a grammar by examining the sentences of an unknown language. Software engineering can also benefit from grammatical inference. Unlike these other fields, which use grammars as a convenient tool to model naturally occurring patterns, software engineering treats grammars as first-class objects typically created and maintained for a specific purpose by human designers. We introduce the theory of grammatical inference and review the state of the art as it relates to software engineering. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Stevenson, Andrew; Cordy, James R.] Queens Univ, Sch Comp, Kingston, ON K7L 3N6, Canada.
C3 Queens University - Canada
RP Stevenson, A (corresponding author), Queens Univ, Sch Comp, Kingston, ON K7L 3N6, Canada.
EM andrews@cs.queensu.ca; cordy@cs.queensu.ca
RI Cordy, James R/G-9736-2011
FU Natural Sciences and Engineering Research Council of Canada; Ontario
   Graduate Scholarship program
FX This work was supported in part by the Natural Sciences and Engineering
   Research Council of Canada, and by the Ontario Graduate Scholarship
   program. We would like to thank anonymous referees for their extensive
   and helpful comments for improving this paper.
CR Adriaans PW, 2006, STUD FUZZ SOFT COMP, V194, P187
   Ammons G, 2002, ACM SIGPLAN NOTICES, V37, P4, DOI 10.1145/565816.503275
   ANGLUIN D, 1990, MACH LEARN, V5, P121, DOI 10.1007/BF00116034
   Angluin D., 1988, Machine Learning, V2, P319, DOI 10.1007/BF00116828
   ANGLUIN D, 1981, INFORM CONTROL, V51, P76, DOI 10.1016/S0019-9958(81)90090-5
   ANGLUIN D, 1982, J ACM, V29, P741, DOI 10.1145/322326.322334
   ANGLUIN D, 1987, INFORM COMPUT, V75, P87, DOI 10.1016/0890-5401(87)90052-6
   ANGLUIN D, 1980, INFORM CONTROL, V45, P117, DOI 10.1016/S0019-9958(80)90285-5
   Angluin Dana., 1991, STOC 91, P444
   [Anonymous], 2013, SOFTWARE LANGUAGE EN
   [Anonymous], TECHNICAL REPORT
   [Anonymous], 2012, P INT C GRAMM INF CO
   Ates K, 2006, PROC INT C TOOLS ART, P232
   BIERMANN AW, 1972, IEEE T COMPUT, VC 21, P592, DOI 10.1109/TC.1972.5009015
   Bugalho M, 2005, PATTERN RECOGN, V38, P1457, DOI 10.1016/j.patcog.2004.03.027
   Burago A., 1994, Proceedings of the Seventh Annual ACM Conference on Computational Learning Theory, COLT 94, P140, DOI 10.1145/180139.181075
   Cano A, 2002, LECT NOTES ARTIF INT, V2484, P28
   Cicchello O, 2004, J MACH LEARN RES, V4, P603, DOI 10.1162/153244304773936063
   Clark A, 2008, LECT NOTES ARTIF INT, V5278, P29
   Clark A, 2010, LECT NOTES ARTIF INT, V6339, P24, DOI 10.1007/978-3-642-15488-1_4
   Cleeremans A, 1989, NEURAL COMPUT, V1, P372, DOI 10.1162/neco.1989.1.3.372
   Cook J. E., 1998, ACM Transactions on Software Engineering and Methodology, V7, P215, DOI 10.1145/287000.287001
   Crepinsek M, 2005, ACM SIGPLAN NOTICES, V40, P39, DOI 10.1145/1064165.1064172
   Crepinsek M, 2005, ACM SIGPLAN NOTICES, V40, P29, DOI 10.1145/1064165.1064171
   Crepinsek M, 2010, COMPUT SCI INF SYST, V7, P309, DOI 10.2298/CSIS1002309C
   CRESPIREGHIZZI S, 1973, COMMUN ACM, V16, P83, DOI 10.1145/361952.361958
   CRESPIREGHIZZI S, 1978, J ACM, V25, P571, DOI 10.1145/322092.322098
   Cunha Jacome, 2010, Proceedings 2010 IEEE Symposium on Visual Languages and Human-Centric Computing (VL/HCC 2010), P93, DOI 10.1109/VLHCC.2010.22
   de Jonge M., 2001, Generative and Component-Based Software Engineering. Second International Symposium, GCSE 2000. Revised Papers (Lecture Notes in Computer Science Vol.2177), P85
   de la Higuera C, 2005, PATTERN RECOGN, V38, P1332, DOI 10.1016/j.patcog.2005.01.003
   De la Higuera C, 2000, LECT NOTES COMPUT SC, V1876, P28
   de la Higuera C, 2006, LECT NOTES ARTIF INT, V4201, P32
   Di Penta M, 2005, NINTH EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, PROCEEDINGS, P241, DOI 10.1109/CSMR.2005.52
   Di Penta M, 2008, SOFT COMPUT, V12, P51, DOI 10.1007/s00500-007-0216-5
   Dubey A, 2008, IET SOFTW, V2, P223, DOI 10.1049/iet-sen:20070061
   ELMAN JL, 1990, COGNITIVE SCI, V14, P179, DOI 10.1207/s15516709cog1402_1
   Fowler M., 2010, Domain-specific languages
   FU KS, 1986, IEEE T PATTERN ANAL, V8, P343, DOI 10.1109/TPAMI.1986.4767796
   Furst Luka, 2012, Applications of Graph Transformations with Industrial Relevance. 4th International Symposium, AGTIVE 2011. Revised Selected and Invited Papers, P121, DOI 10.1007/978-3-642-34176-2_12
   Ghosh D., 2010, DSLN ACTION
   GOLD EM, 1978, INFORM CONTROL, V37, P302, DOI 10.1016/S0019-9958(78)90562-4
   GOLD EM, 1967, INFORM CONTROL, V10, P447, DOI 10.1016/S0019-9958(67)91165-5
   Graves A, 2009, IEEE T PATTERN ANAL, V31, P855, DOI 10.1109/TPAMI.2008.137
   Henriques PR, 2003, ITI 2003: PROCEEDINGS OF THE 25TH INTERNATIONAL CONFERENCE ON INFORMATION TECHNOLOGY INTERFACES, P645, DOI 10.1109/ITI.2003.1225416
   Hrncic D, 2012, APPL SOFT COMPUT, V12, P1006, DOI 10.1016/j.asoc.2011.11.024
   Hrncic D, 2011, INF TECHNOL CONTROL, V40, P307, DOI 10.5755/j01.itc.40.4.980
   ISHIZAKA H, 1990, MACH LEARN, V5, P151, DOI 10.1007/BF00116035
   Javed F., 2006, P 18 INT C SOFTWARE, P363
   Javed F., 2005, 4 INT WORKSH SCEN ST
   Javed F, 2008, INFORM SOFTWARE TECH, V50, P948, DOI 10.1016/j.infsof.2007.08.003
   Jones J, 2010, LECT NOTES ARTIF INT, V6339, P80, DOI 10.1007/978-3-642-15488-1_8
   Juille H., 1998, Grammatical Inference. 4th International Colloquium, ICGI-98. Proceedings, P126, DOI 10.1007/BFb0054070
   Kearns Michael J., 1987, P 19 ANN ACM S THEOR, P285, DOI [10.1145/28395.28426, DOI 10.1145/28395.28426]
   Kermorvant C, 2002, LECT NOTES ARTIF INT, V2484, P161
   Klint P, 2005, ACM T SOFTW ENG METH, V14, P331, DOI 10.1145/1072997.1073000
   Knuth D. E., 1968, Mathematical Systems Theory, V2, P127, DOI 10.1007/BF01692511
   Kong J, 2008, PROC INT C TOOLS ART, P133, DOI 10.1109/ICTAI.2008.41
   Lämmel R, 2009, LECT NOTES COMPUT SC, V5423, P246
   Lämmel R, 2001, SOFTWARE PRACT EXPER, V31, P1395, DOI 10.1002/spe.423
   Lang K. J., 1998, Grammatical Inference. 4th International Colloquium, ICGI-98. Proceedings, P1, DOI 10.1007/BFb0054059
   Langley P, 2000, LECT NOTES ARTIF INT, V1810, P220
   Larus JR, 1999, ACM SIGPLAN NOTICES, V34, P259, DOI 10.1145/301631.301678
   Lee Lillian, 1996, TR1296 HARV U
   Levi K, 2002, COMMUN ACM, V45, P45, DOI 10.1145/570907.570930
   Liu Q., 2012, INT J SOFTW INFORM, V6, P201
   Lo D, 2012, J SYST SOFTWARE, V85, P2063, DOI 10.1016/j.jss.2012.04.001
   Memon A.U., 2008, THESIS QUEENS U
   Mernik M, 2005, ACM COMPUT SURV, V37, P316, DOI 10.1145/1118890.1118892
   Mernik M., 2004, Informatica, V28, P245
   Mernik M, 2013, FORMAL AND PRACTICAL ASPECTS OF DOMAIN-SPECIFIC LANGUAGES: RECENT DEVELOPMENTS, P1, DOI 10.4018/978-1-4666-2092-6
   Mernik M, 2009, 2009 XXII INTERNATIONAL SYMPOSIUM ON INFORMATION, COMMUNICATION AND AUTOMATION TECHNOLOGIES, P14
   MING L, 1991, SIAM J COMPUT, V20, P911, DOI 10.1137/0220056
   NevillManning CG, 1997, J ARTIF INTELL RES, V7, P67, DOI 10.1613/jair.374
   NIERSTRASZ O, 2007, 11 EUR C SOFTW MAINT, P275
   Oncina Jose, 1992, Advances in Structural and Syntactic Pattern Recognition, Volume 5 of the Series in Machine Perception and Artificial Intelligence, P99, DOI [10.1142/9789812797919_0007, DOI 10.1142/97898127979190007, DOI 10.1142/9789812797919_0007]
   PITT L, 1988, J ACM, V35, P965, DOI 10.1145/48014.63140
   Raman A.V., 1997, P WORKSH AUT IND GRA, V46, P94
   Reiss SP, 2001, PROC INT CONF SOFTW, P221, DOI 10.1109/ICSE.2001.919096
   Ron D., 1995, THESIS HEBREW U
   Sakakibara Y, 1997, THEOR COMPUT SCI, V185, P15, DOI 10.1016/S0304-3975(97)00014-5
   SAKAKIBARA Y, 1992, INFORM COMPUT, V97, P23, DOI 10.1016/0890-5401(92)90003-X
   SAKAKIBARA Y, 1990, THEOR COMPUT SCI, V76, P223, DOI 10.1016/0304-3975(90)90017-C
   Starkie B, 2002, LECT NOTES ARTIF INT, V2484, P237
   Starkie B., 2001, AI 2001 ADV ARTIFICI, P449
   TRAKHTENBROT B, 1973, FINITE AUTOMATA BEHA
   VALIANT LG, 1984, COMMUN ACM, V27, P1134, DOI 10.1145/1968.1972
   van As HR, 2001, PHOTONIC NETW COMMUN, V3, P5, DOI 10.1023/A:1011467125007
   Vidal Enrique., 1994, Grammatical Inference and Applications, volume 862 of Lecture Notes in Computer Science, V862, P1, DOI DOI 10.1007/3-540-58473-0_131
   Walkinshaw N, 2008, J SOFTW MAINT EVOL-R, V20, P269, DOI 10.1002/smr.373
   YOKOMORI T, 1991, PROCEEDINGS OF THE FOURTH ANNUAL WORKSHOP ON COMPUTATIONAL LEARNING THEORY, P213
   YOKOMORI T, 1995, MACH LEARN, V19, P153, DOI 10.1023/A:1022615325466
NR 91
TC 22
Z9 22
U1 1
U2 9
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 15
PY 2014
VL 96
BP 444
EP 459
DI 10.1016/j.scico.2014.05.008
PN 4
PG 16
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AT8KC
UT WOS:000345181300004
OA Green Submitted, hybrid
DA 2024-07-18
ER

PT J
AU Chen, LQ
   Li, RJ
   Wu, XG
   Wang, J
AF Chen, Liqian
   Li, Renjian
   Wu, Xueguang
   Wang, Ji
TI Static analysis of lists by combining shape and numerical abstractions
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT Conference on Software Verification and Testing (SVT) Track at the 28th
   ACM Symposium on Applied Computing (ACM SAC)
CY MAR, 2013
CL Coimbra, PORTUGAL
SP ACM
DE Static analysis; Abstract interpretation; Lists; Abstract domains; Shape
   analysis
ID LOOP INVARIANT SYNTHESIS; AUTOMATED VERIFICATION; PROGRAMS; SIZE
AB We present an approach in the framework of abstract interpretation to analyze list-manipulating programs by combining shape and numerical abstractions. The analysis automatically divides a list into non-overlapping list segments according to the reachability property of pointer variables to list nodes. The list nodes in each segment are abstracted by a bit-vector wherein each bit corresponds to a pointer variable and indicates whether the nodes can be reached by that pointer variable. Moreover, for each bit-vector, we introduce an auxiliary integer variable, namely a counter variable, to record the number of nodes in the segment abstracted by that bit-vector. On this basis, we leverage the power of numerical abstractions to discover numerical relations among counter variables, so as to infer relational length properties among list segments. Furthermore, we show how our approach works for circular lists. Our approach stands out in its ability to find intricate properties that involve both shape and numerical information, which are important for checking program properties such as memory safety. A prototype is implemented and preliminary experimental results are encouraging. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Chen, Liqian; Li, Renjian; Wu, Xueguang; Wang, Ji] Natl Univ Def Technol, Natl Lab Parallel & Distributed Proc, Changsha 410073, Hunan, Peoples R China.
C3 National University of Defense Technology - China
RP Chen, LQ (corresponding author), Natl Univ Def Technol, Natl Lab Parallel & Distributed Proc, Changsha 410073, Hunan, Peoples R China.
EM lqchen@nudt.edu.cn
RI Yin, Jing/KDO-6274-2024
CR [Anonymous], 1990, Interval Methods for Systems of Equations
   BERDINE J, 2007, LNCS, V4590
   Berdine J, 2006, LECT NOTES COMPUT SC, V4111, P115
   Bouaijani A, 2012, LECT NOTES COMPUT SC, V7148, P1, DOI 10.1007/978-3-642-27940-9_1
   Bouajjani A, 2005, LECT NOTES COMPUT SC, V3440, P13
   Bouajjani A, 2011, FORM METHOD SYST DES, V38, P158, DOI 10.1007/s10703-011-0111-7
   Bouajjani A, 2010, LECT NOTES COMPUT SC, V6174, P72, DOI 10.1007/978-3-642-14295-6_8
   Bozga M, 2007, LECT NOTES COMPUT SC, V4349, P122
   Chang BYE, 2008, ACM SIGPLAN NOTICES, V43, P247, DOI 10.1145/1328897.1328469
   Chen L., 2013, SAC, P1204
   Chin WN, 2012, SCI COMPUT PROGRAM, V77, P1006, DOI 10.1016/j.scico.2010.07.004
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Cousot Patrick, 1976, P 2 INT S PROGRAMMIN
   Distefano D, 2006, LECT NOTES COMPUT SC, V3920, P287
   Dor N, 2000, LECT NOTES COMPUT SC, V1824, P115
   Dudka Kamil, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P372, DOI 10.1007/978-3-642-22110-1_29
   Ferrara Pietro, 2012, Software Engineering and Formal Methods. Proceedings of the 10th International Conference, SEFM 2012, P63, DOI 10.1007/978-3-642-33826-7_5
   Ferrara P, 2014, LECT NOTES COMPUT SC, V8318, P302, DOI 10.1007/978-3-642-54013-4_17
   Gotsman A, 2006, LECT NOTES COMPUT SC, V4134, P240
   Gulwani S, 2007, LECT NOTES COMPUT SC, V4590, P379
   Gulwani S, 2009, ACM SIGPLAN NOTICES, V44, P239, DOI 10.1145/1594834.1480912
   Habermehl Peter, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P424, DOI 10.1007/978-3-642-22110-1_34
   Henzinger TA, 2002, ACM SIGPLAN NOTICES, V37, P58, DOI 10.1145/565816.503279
   Ishtiaq S, 2001, ACM SIGPLAN NOTICES, V36, P14, DOI 10.1145/373243.375719
   Jeannet B, 2009, LECT NOTES COMPUT SC, V5643, P661, DOI 10.1007/978-3-642-02658-4_52
   KARR M, 1976, ACTA INFORM, V6, P133, DOI 10.1007/BF00268497
   Lahiri SK, 2006, ACM SIGPLAN NOTICES, V41, P115, DOI 10.1145/1111320.1111048
   Lalire G., INTERPROC
   Lev-Ami T, 2000, LECT NOTES COMPUT SC, V1824, P280
   Magill S, 2007, LECT NOTES COMPUT SC, V4634, P419
   Magill S, 2010, ACM SIGPLAN NOTICES, V45, P211, DOI 10.1145/1707801.1706326
   Manevich R, 2005, LECT NOTES COMPUT SC, V3385, P181
   Mine A., 2006, Higher-Order and Symbolic Computation, V19, P31, DOI 10.1007/s10990-006-8609-1
   Nguyen HH, 2007, LECT NOTES COMPUT SC, V4349, P251
   Podelski A, 2005, LECT NOTES COMPUT SC, V3672, P268
   Qin SC, 2014, SCI COMPUT PROGRAM, V82, P56, DOI 10.1016/j.scico.2013.03.004
   Qin SC, 2013, J SYMB COMPUT, V50, P386, DOI 10.1016/j.jsc.2012.08.007
   Qin SC, 2010, LECT NOTES COMPUT SC, V6447, P468, DOI 10.1007/978-3-642-16901-4_31
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Sagiv M, 2002, ACM T PROGR LANG SYS, V24, P217, DOI 10.1145/514188.514190
   Shengchao Qin, 2013, Theories of Programming and Formal Methods. Essays Dedicated to Jifeng He on the Occasion of His 70th Birthday. LNCS 8051, P304, DOI 10.1007/978-3-642-39698-4_19
NR 41
TC 0
Z9 0
U1 0
U2 5
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 1
PY 2014
VL 95
BP 320
EP 342
DI 10.1016/j.scico.2014.06.004
PN 3
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA AS9RH
UT WOS:000344578800004
DA 2024-07-18
ER

PT J
AU Ferreira, GCS
   Gaia, FN
   Figueiredo, E
   Maia, MDA
AF Sousa Ferreira, Gabriel Coutinho
   Gaia, Felipe Nunes
   Figueiredo, Eduardo
   Maia, Marcelo de Almeida
TI On the use of feature-oriented programming for evolving software product
   lines - A comparative study
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 15th Brazilian Symposium on Programming Languages (SBLP)
CY SEP 26-30, 2011
CL Sao Paulo, BRAZIL
DE Software product lines; Feature-oriented programming; Variability
   management; Design patterns; Conditional compilation
ID DESIGN STABILITY; VARIABILITY
AB Feature-oriented programming (FOP) is a programming technique based on composition mechanisms, called refinements. It is often assumed that feature-oriented programming is more suitable than other variability mechanisms for implementing Software Product Lines (SPLs). However, there is no empirical evidence to support this claim. In fact, recent research work found out that some composition mechanisms might degenerate the SPL modularity and stability. However, there is no study investigating these properties focusing on the FOP composition mechanisms. This paper presents quantitative and qualitative analysis of how feature modularity and change propagation behave in the context of two evolving SPLs, namely WebStore and MobileMedia. Quantitative data have been collected from the SPLs developed in three different variability mechanisms: FOP refinements, conditional compilation, and object-oriented design patterns. Our results suggest that FOP requires few changes in source code and a balanced number of added modules, providing better support than other techniques for non-intrusive insertions. Therefore, it adheres closer to the Open-Closed principle. Additionally, FOP seems to be more effective tackling modularity degeneration, by avoiding feature tangling and scattering in source code, than conditional compilation and design patterns. These results are based not only on the variability mechanism itself, but also on careful SPL design. However, the aforementioned results are weaker when the design needs to cope with crosscutting and fine-grained features. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Sousa Ferreira, Gabriel Coutinho; Gaia, Felipe Nunes; Maia, Marcelo de Almeida] Univ Fed Uberlandia, Uberlandia, MG, Brazil.
   [Figueiredo, Eduardo] Univ Fed Minas Gerais, Dept Comp Sci, Belo Horizonte, MG, Brazil.
C3 Universidade Federal de Uberlandia; Universidade Federal de Minas Gerais
RP Maia, MDA (corresponding author), Univ Fed Uberlandia, Uberlandia, MG, Brazil.
EM gabriel@mestrado.ufu.br; felipegaia@mestrado.ufu.br;
   figueiredo@dcc.ufmg.br; marcmaia@facom.ufu.br
RI Ferreira, Gabriel/GYR-0733-2022; Gaia, Felipe Nunes/O-7138-2015; Maia,
   Marcelo/F-3090-2017
OI Ferreira, Gabriel/0000-0002-5368-0156; Maia,
   Marcelo/0000-0003-3578-1380; Figueiredo, Eduardo/0000-0002-6004-2718
CR Abran A, 2003, NINTH INTERNATIONAL SOFTWARE METRICS SYMPOSIUM, PROCEEDINGS, P2, DOI 10.1109/METRIC.2003.1232451
   Adams B, 2009, AOSD'09: 8TH INTERNATIONAL CONFERENCE ON ASPECT-ORIENTED SOFTWARE DEVELOPMENT, P243
   Anastasopoulos M., 2001, Software Engineering Notes, V26, P109, DOI 10.1145/379377.375269
   [Anonymous], 2005, THESIS U BRIT COLUMB
   Apel S, 2008, IEEE T SOFTWARE ENG, V34, P162, DOI 10.1109/TSE.2007.70770
   Apel S, 2010, AUTOMAT SOFTW ENG, V17, P251, DOI 10.1007/s10515-010-0066-8
   Apel Sven, 2006, P 5 INT C GENERATIVE, P59
   Babar MA, 2010, IEEE SOFTWARE, V27, P89, DOI 10.1109/MS.2010.77
   Batory D, 2004, IEEE T SOFTWARE ENG, V30, P355, DOI 10.1109/TSE.2004.23
   Batory D, 2004, PROC INT CONF SOFTW, P702, DOI 10.1109/ICSE.2004.1317496
   Batory D, 2002, ACM T SOFTW ENG METH, V11, P191, DOI 10.1145/505145.505147
   Batory D, 2005, LECT NOTES COMPUT SC, V3714, P7
   CARDELLI L, 1985, COMPUT SURV, V17, P471, DOI 10.1145/6041.6042
   Clements P., 2002, Software product lines
   Dantas F., 2010, 2010 Proceedings of 24th Brazilian Symposium on Software Engineering (SBES 2010), P40, DOI 10.1109/SBES.2010.13
   Delaware B, 2009, 7TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P243, DOI 10.1145/1595696.1595733
   Eaddy M., 2007, 1 INT WORKSHOP ASSES, P2, DOI [10.1109/ACOM.2007.4, DOI 10.1109/ACOM.2007.4]
   Figueiredo Eduardo, 2009, Proceedings of the 2009 23rd Brazilian Symposium on Software Engineering. SBES 2009, P83, DOI 10.1109/SBES.2009.14
   Figueiredo E, 2008, CSMR 2008: 12TH EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, P183
   Figueiredo E, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P261, DOI 10.1145/1368088.1368124
   Filho F.C., 2006, INT C FDN SOFTWARE E, P152
   Gamma E., 1994, Design patterns: Elements of reusable object-oriented software
   Godfrey MW, 2008, 2008 FRONTIERS OF SOFTWARE MAINTENANCE, P129, DOI 10.1109/FOSM.2008.4659256
   Greenwood P, 2007, LECT NOTES COMPUT SC, V4609, P176
   Grubb P., 2003, Software Maintenance: Concepts and Practice, V2.
   Hu Y, 2000, PROC IEEE INT CONF S, P196
   JONES C, 1994, COMPUTER, V27, P98, DOI 10.1109/2.312055
   Kästner C, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P311, DOI 10.1145/1368088.1368131
   Kastner Christian, 2008, 2008 23rd IEEE/ACM International Conference on Automated Software Engineering, P258, DOI 10.1109/ASE.2008.36
   Kastner C., 2008, Proc. of GPCE'08, P35
   Kenner A., 2010, P 2 INT WORKSH FEAT, P25, DOI DOI 10.1145/1868688.1868693
   Lee K, 2000, SPRINGER INT SER ENG, V576, P3
   Maletic JI, 2008, 2008 FRONTIERS OF SOFTWARE MAINTENANCE, P31, DOI 10.1109/FOSM.2008.4659246
   Mayer T, 1999, SOFTWARE QUAL J, V8, P97, DOI 10.1023/A:1008900825849
   Mens T, 2005, EIGHTH INTERNATIONAL WORKSHOP ON PRINCIPLES OF SOFTWARE EVOLUTION, PROCEEDINGS, P13, DOI 10.1109/IWPSE.2005.7
   Meyer B., 1988, Object-Oriented Software Construction
   Pettersson Ulf., 2005, ESECFSE 13, P326
   Prehofer C, 1997, LECT NOTES COMPUT SC, V1241, P419
   Ribeiro M, 2009, EUR CON SFTWR MTNCE, P79, DOI 10.1109/CSMR.2009.49
   Sant'Anna C., 2003, P BRAZILIAN S SOFTWA, P19
   Svahnberg M, 2005, SOFTWARE PRACT EXPER, V35, P705, DOI 10.1002/spe.652
   Svahnberg M, 1999, J SOFTW MAINT-RES PR, V11, P391, DOI 10.1002/(SICI)1096-908X(199911/12)11:6<391::AID-SMR199>3.0.CO;2-8
   Thaker Sahil., 2007, P 6 INT C GENERATIVE, P95
   Wohlin C., 2012, Experimentation in Software Engineering
   YAU SS, 1985, IEEE T SOFTWARE ENG, V11, P849, DOI 10.1109/TSE.1985.232544
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
NR 53
TC 13
Z9 13
U1 0
U2 11
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 1
PY 2014
VL 93
SI SI
BP 65
EP 85
DI 10.1016/j.scico.2013.10.010
PN A
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA AO7QS
UT WOS:000341548300005
OA Bronze
DA 2024-07-18
ER

PT J
AU Vasilescu, B
   Serebrenik, A
   Mens, T
   van den Brand, MGJ
   Pek, E
AF Vasilescu, Bogdan
   Serebrenik, Alexander
   Mens, Tom
   van den Brand, Mark G. J.
   Pek, Ekaterina
TI How healthy are software engineering conferences?
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Scientometrics; Software engineering; Conferences; Empirical research
ID COMPUTER-SCIENCE; SCIENTIFIC-CONFERENCES; MULTIPLE COMPARISONS; QUALITY;
   TIME
AB In this article we study the health of software engineering conferences by means of a suite of metrics created for this purpose. The metrics measure stability of the community, openness to new authors, introversion, representativeness of the PC with respect to the authors' community, availability of PC candidates, and scientific prestige. Using this metrics suite, we assess the health of 11 software engineering conferences over a period of more than 10 years. In general, our findings suggest that software engineering conferences are healthy, but we observe important differences between conferences with a wide scope and those with a more narrow scope. We also find that depending on the chosen health metric, some conferences perform better than others. This knowledge may be used by prospective authors to decide in which conferences to publish, and by conference steering committees or PC chairs to assess their selection process. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Vasilescu, Bogdan; Serebrenik, Alexander; van den Brand, Mark G. J.] Eindhoven Univ Technol, NL-5600 MB Eindhoven, Netherlands.
   [Pek, Ekaterina] Univ Koblenz Landau, D-56070 Koblenz, Germany.
   [Mens, Tom] Univ Mons, B-7000 Mons, Belgium.
C3 Eindhoven University of Technology; University of Koblenz & Landau;
   University of Mons
RP Serebrenik, A (corresponding author), Eindhoven Univ Technol, POB 513, NL-5600 MB Eindhoven, Netherlands.
EM b.n.vasilescu@tue.nl; a.serebrenik@tue.nl; tom.mens@umons.ac.be;
   m.g.j.v.d.brand@tue.nl; pek@uni-koblenz.de
RI Serebrenik, Alexander/E-1132-2012; Mens, Tom/B-6518-2013
OI Mens, Tom/0000-0003-3636-5020; van den Brand, Mark/0000-0003-3529-6182;
   Vasilescu, Bogdan/0000-0003-4418-5783; Serebrenik,
   Alexander/0000-0002-1418-0095
FU Dutch Science Foundation (Nederlandse Organisatie vocsr Wetenschappelijk
   Onderzoek, NWO) [NWO 600.065.120.10N235]; F.R.S-FNRS research grant
   [BSS-2012/V 6/5/015]
FX We thank Dave Binkley, Prem Devanbu, Vladimir Filkov, Leon Moonen, David
   Rosenblum and the anonymous reviewers for their very useful feedback on
   earlier versions of this paper. We are grateful to Dr. Frank Konietschke
   for providing us with the implementation of the T procedure. We also
   thank Andrei Jalba and Michel Westenberg for insightful comments on how
   to improve the visualisation. This research has been partially supported
   by research project NWO 600.065.120.10N235 financed by the Dutch Science
   Foundation (Nederlandse Organisatie vocsr Wetenschappelijk Onderzoek,
   NWO), and by F.R.S-FNRS research grant BSS-2012/V 6/5/015 (Fonds de la
   Recherche Scientifique) during the second author's stay at the
   Universite de Mons. None of the funding agencies was involved in the
   study design, in the collection, analysis and interpretation of data, in
   the writing of the report, and in the decision to submit the article for
   publication.
CR [Anonymous], 2010, R LANG ENV STAT COMP
   [Anonymous], 2000, APPL OPTIMIZAT
   [Anonymous], STAT RANKING PROGRAM
   [Anonymous], REFERENCE MANUAL
   [Anonymous], 1973, NONPARAMETRIC STAT M
   [Anonymous], SCIENTOMETRICS
   [Anonymous], COMPUT RES NEWS
   [Anonymous], INTERACT COMPUT
   [Anonymous], EVOLVING SOFTWARE SY
   [Anonymous], COMMUN ACM
   [Anonymous], INBREEDING SOFTWARE
   [Anonymous], 2013, P INT C QUAL SOFTW A
   [Anonymous], CEUR WORKSHOP P
   [Anonymous], 2010, Communications of the ACM
   [Anonymous], 2014, Proceedings of the 17th ACM conference on Computer supported cooperative work social computing
   [Anonymous], JOINT C DIG LIB JCDL
   Antoniol G, 2005, PROC IEEE INT CONF S, P240
   Bird Christian, 2006, P MSR, P137, DOI DOI 10.1145/1137983.1138016
   Bird Christian., 2009, SIAM INT C DATA MINI, P826
   Birman K, 2009, COMMUN ACM, V52, P34, DOI 10.1145/1506409.1506421
   Biryukov M, 2010, LECT NOTES COMPUT SC, V6273, P228, DOI 10.1007/978-3-642-15464-5_24
   Brown BM, 2002, AUST NZ J STAT, V44, P427, DOI 10.1111/1467-842X.00244
   Brunner E, 2000, BIOMETRICAL J, V42, P17, DOI 10.1002/(SICI)1521-4036(200001)42:1<17::AID-BIMJ17>3.0.CO;2-U
   Capiluppi A., 2012, 2012 9th IEEE Working Conference on Mining Software Repositories (MSR 2012), P251, DOI 10.1109/MSR.2012.6224288
   Chen JL, 2010, COMMUN ACM, V53, P79, DOI 10.1145/1743546.1743569
   Cowpertwait PSP, 2009, USE R, P1, DOI 10.1007/978-0-387-88698-5_1
   Crowcroft J, 2009, COMMUN ACM, V52, P27, DOI 10.1145/1435417.1435430
   DUNN OJ, 1961, J AM STAT ASSOC, V56, P52, DOI 10.2307/2282330
   Eckmann M, 2012, SCIENTOMETRICS, V90, P617, DOI 10.1007/s11192-011-0527-2
   Elmacioglu E, 2009, COMMUN ACM, V52, P115, DOI 10.1145/1461928.1461958
   Fortnow L, 2009, COMMUN ACM, V52, P33, DOI 10.1145/1536616.1536631
   Franceschet M, 2011, INFORM PROCESS MANAG, V47, P117, DOI 10.1016/j.ipm.2010.03.003
   Franceschet Massimo., 2010, COMMUNICATIONS ACM C, V53, P129, DOI DOI 10.1145/1859204.1859234
   GABRIEL KR, 1969, ANN MATH STAT, V40, P224, DOI 10.1214/aoms/1177697819
   Gini C., 1921, ECON J, V31, P124, DOI [DOI 10.2307/2223319, 10.2307/2223319]
   Goeminne M, 2013, SCI COMPUT PROGRAM, V78, P971, DOI 10.1016/j.scico.2011.11.004
   Hill MD, 2006, COMMUN ACM, V49, P63, DOI 10.1145/1151030.1151058
   Hirsch JE, 2005, P NATL ACAD SCI USA, V102, P16569, DOI 10.1073/pnas.0507655102
   Howison J, 2011, J ASSOC INF SYST, V12, P767
   Inanc O, 2011, SCIENTOMETRICS, V88, P885, DOI 10.1007/s11192-011-0415-9
   Jagadish HV, 2008, SIGMOD REC, V37, P40, DOI 10.1145/1462571.1462582
   Jaki T, 2013, ARCH TOXICOL, V87, P1901, DOI 10.1007/s00204-013-1065-x
   Javed W, 2010, IEEE T VIS COMPUT GR, V16, P927, DOI 10.1109/TVCG.2010.162
   Khomh F, 2009, WORK CONF REVERSE EN, P75, DOI 10.1109/WCRE.2009.28
   Klamma R, 2009, L N INST COMP SCI SO, V4, P657
   Kleijnen JPC, 2000, INFORM PROCESS MANAG, V36, P551, DOI 10.1016/S0306-4573(99)00076-X
   Konietschke F, 2012, ELECTRON J STAT, V6, P738, DOI 10.1214/12-EJS691
   Kouters E, 2012, 2012 28TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE (ICSM), P592, DOI 10.1109/ICSM.2012.6405329
   Laplante P, 2009, IEEE T PROF COMMUN, V52, P183, DOI 10.1109/TPC.2009.2017989
   Pham MC, 2011, SOC NETW ANAL MIN, V1, P321, DOI 10.1007/s13278-011-0024-x
   Martins WS, 2009, ACM-IEEE J CONF DIG, P193
   Martins WS, 2010, SCIENTOMETRICS, V83, P133, DOI 10.1007/s11192-009-0078-y
   Meyer B, 2009, COMMUN ACM, V52, P31, DOI 10.1145/1498765.1498780
   Mogul JC, 2008, ACM SIGCOMM COMP COM, V38, P93, DOI 10.1145/1384609.1384623
   Ouweneel E, 2012, HUM RELAT, V65, P1129, DOI 10.1177/0018726711429382
   Patterson DA, 2004, COMMUN ACM, V47, P23, DOI 10.1145/1035134.1035153
   Poncin W, 2011, EUR CON SFTWR MTNCE, P5, DOI 10.1109/CSMR.2011.5
   Robles G., 2005, INT C SOFTW ENG P 20, P1, DOI DOI 10.1145/1082983.1083162
   Sakr S, 2012, SCIENTOMETRICS, V91, P173, DOI 10.1007/s11192-011-0530-7
   Sheskin DJ., 2003, HDB PARAMETRIC NONPA, DOI [10.1201/9781420036268, DOI 10.1201/9781420036268]
   Snodgrass R, 2006, SIGMOD REC, V35, P8
   Souto MAM, 2007, LECT NOTES COMPUT SC, V4802, P202
   Vasilescu B., 2013, Empirical Software Engineering, P1
   Vasilescu B, 2013, 2013 ASE/IEEE INTERNATIONAL CONFERENCE ON SOCIAL COMPUTING (SOCIALCOM), P188, DOI 10.1109/SocialCom.2013.35
   Vasilescu B, 2013, IEEE WORK CONF MIN S, P373, DOI 10.1109/MSR.2013.6624051
   Vasilescu B, 2012, PROCEEDINGS OF THE 2012 ASE INTERNATIONAL CONFERENCE ON SOCIAL INFORMATICS (SOCIALINFORMATICS 2012), P332, DOI 10.1109/SocialInformatics.2012.81
   WILCOXON F, 1945, BIOMETRICS BULL, V1, P80, DOI 10.1093/jee/39.2.269
   Zhuang ZM, 2007, ACM-IEEE J CONF DIG, P225, DOI 10.1145/1255175.1255220
   ZIMMERMAN DW, 1992, PERCEPT MOTOR SKILL, V74, P835, DOI 10.2466/PMS.74.3.835-844
   ZIONTS S, 1979, INTERFACES, V9, P94, DOI 10.1287/inte.9.4.94
NR 70
TC 26
Z9 26
U1 0
U2 19
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 1
PY 2014
VL 89
BP 251
EP 272
DI 10.1016/j.scico.2014.01.016
PN C
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AJ8CB
UT WOS:000337929200003
OA hybrid
DA 2024-07-18
ER

PT J
AU Qin, SC
   He, GH
   Luo, CG
   Chin, WN
   Yang, HL
AF Qin, Shengchao
   He, Guanhua
   Luo, Chenguang
   Chin, Wei-Ngan
   Yang, Hongli
TI Automatically refining partial specifications for heap-manipulating
   programs
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Static program analysis; Separation logic; Numerical analysis; Partial
   specification refinement; Semi-automatic software verification;
   Constraint abstraction
ID SHAPE-ANALYSIS; AUTOMATED VERIFICATION; INVARIANT SYNTHESIS; PREDICATE;
   LOGIC; SIZE
AB Automatically verifying heap-manipulating programs is a challenging task, especially when dealing with complex data structures with strong invariants, such as sorted lists and AVL/red-black trees. The verification process can greatly benefit from human assistance through specification annotations, but this process requires intellectual effort from users and is error-prone. In this paper, we propose a new approach to program verification that allows users to provide only partial specification to methods. Our approach will the refine the given annotation into a more complete specification by discovering missing constraints. The discovered constraints may involve both numerical and multi-set properties that could be later confirmed or revised by users. We further augment our approach by requiring partial specification to be given only for primary methods. Specifications for loops and auxiliary methods can then be systematically discovered by our augmented mechanism, with the help of information propagated from the primary methods. Our work is aimed at verifying beyond shape properties, with the eventual goal of analysing full functional properties for pointer-based data structures. Initial experiments have confirmed that we can automatically refine partial specifications with non-trivial constraints, thus making it easier for users to handle specifications with richer properties. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Qin, Shengchao; He, Guanhua; Luo, Chenguang] Univ Teesside, Sch Comp, Middlesbrough, Cleveland, England.
   [Qin, Shengchao] Shenzhen Univ, Coll Comp Sci & Software Engn, Shenzhen, Peoples R China.
   [Qin, Shengchao; Yang, Hongli] Beijing Univ Technol, Coll Comp Sci, Beijing, Peoples R China.
   [Chin, Wei-Ngan] Natl Univ Singapore, Sch Comp, Singapore 117548, Singapore.
C3 University of Teesside; Shenzhen University; Beijing University of
   Technology; National University of Singapore
RP Qin, SC (corresponding author), Univ Teesside, Sch Comp, Middlesbrough, Cleveland, England.
EM s.qin@tees.ac.uk; g.he@tees.ac.uk; chinwn@comp.nus.edu.sg;
   yhl.yang@gmail.com
RI Yang, Hongli/KEJ-5057-2024; Qin, Shengchao/F-4823-2012
OI Qin, Shengchao/0000-0003-3028-8191
FU EPSRC [EP/G042322]; EPSRC [EP/G042322/1, EP/G042322/2] Funding Source:
   UKRI
FX This research was supported in part by EPSRC Project EP/G042322.
CR [Anonymous], 2019, LCP ISABELLE 2019
   Barry R., 2009, FreeRTOS reference manual: API functions and configuration options
   Berdine J, 2007, LECT NOTES COMPUT SC, V4590, P178
   Berdine J, 2006, LECT NOTES COMPUT SC, V4111, P115
   Bouajjani A, 2010, LECT NOTES COMPUT SC, V6174, P72, DOI 10.1007/978-3-642-14295-6_8
   Burdy L., 2005, International Journal on Software Tools for Technology Transfer, V7, P212, DOI 10.1007/s10009-004-0167-4
   Calcagno C, 2011, J ACM, V58, DOI 10.1145/2049697.2049700
   Chang BYE, 2008, ACM SIGPLAN NOTICES, V43, P247, DOI 10.1145/1328897.1328469
   Chang BYE, 2007, LECT NOTES COMPUT SC, V4634, P384
   Chatterjee S, 2007, LECT NOTES COMPUT SC, V4424, P19
   Chin WN, 2007, IEEE INT C ENG COMP, P307, DOI 10.1109/ICECCS.2007.17
   Chin WN, 2012, SCI COMPUT PROGRAM, V77, P1006, DOI 10.1016/j.scico.2010.07.004
   Cook B., 2009, Proceedings of the 2009 9th International Conference Formal Methods in Computer-Aided Design (FMCAD), P205, DOI 10.1109/FMCAD.2009.5351120
   Cousot P., 2002, Computer Aided Verification. 14th International Conference, CAV 2002. Proceedings (Lecture Notes in Computer Science Vol.2404), P37
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Distefano D, 2006, LECT NOTES COMPUT SC, V3920, P287
   Distefano D, 2009, LECT NOTES COMPUT SC, V5825, P1, DOI 10.1007/978-3-642-04570-7_1
   Gotsman A, 2006, LECT NOTES COMPUT SC, V4134, P240
   Gulwani S, 2009, ACM SIGPLAN NOTICES, V44, P239, DOI 10.1145/1594834.1480912
   Guo B, 2007, ACM SIGPLAN NOTICES, V42, P256, DOI 10.1145/1273442.1250764
   Gupta A, 2009, LECT NOTES COMPUT SC, V5643, P634, DOI 10.1007/978-3-642-02658-4_48
   Gupta A, 2009, LECT NOTES COMPUT SC, V5505, P262, DOI 10.1007/978-3-642-00768-2_24
   Gustavsson J, 2001, LECT NOTES COMPUT SC, V2053, P63
   Hackett B, 2005, ACM SIGPLAN NOTICES, V40, P310, DOI 10.1145/1047659.1040331
   Ishtiaq S, 2001, ACM SIGPLAN NOTICES, V36, P14, DOI 10.1145/373243.375719
   Kawaguchi M, 2009, ACM SIGPLAN NOTICES, V44, P304, DOI 10.1145/1543135.1542510
   Kuncak V, 2002, ACM SIGPLAN NOTICES, V37, P17, DOI 10.1145/565816.503276
   KUNCAK V, 2007, THESIS MIT
   Leino KRM, 2010, LECT NOTES COMPUT SC, V6015, P312, DOI 10.1007/978-3-642-12002-2_26
   Magill S, 2007, LECT NOTES COMPUT SC, V4634, P419
   Magill S, 2010, ACM SIGPLAN NOTICES, V45, P211, DOI 10.1145/1707801.1706326
   Moller A, 2001, ACM SIGPLAN NOTICES, V36, P221, DOI 10.1145/381694.378851
   Nguyen HH, 2008, LECT NOTES COMPUT SC, V5123, P355
   Nguyen HH, 2007, LECT NOTES COMPUT SC, V4349, P251
   Popeea C, 2007, LECT NOTES COMPUT SC, V4435, P331
   Qin SC, 2010, LECT NOTES COMPUT SC, V6447, P468, DOI 10.1007/978-3-642-16901-4_31
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Rondon PM, 2008, ACM SIGPLAN NOTICES, V43, P159, DOI 10.1145/1379022.1375602
   Rubio-Sánchez M, 2008, ITICSE '08: PROCEEDINGS OF THE 13TH ANNUAL CONFERENCE ON INNOVATION AND TECHNOLOGY IN COMPUTER SCIENCE EDUCATION, P235
   Rustan K, 2010, LECT NOTES ARTIF INT, V6355, P348, DOI 10.1007/978-3-642-17511-4_20
   Sagiv M, 2002, ACM T PROGR LANG SYS, V24, P217, DOI 10.1145/514188.514190
   Srivastava S, 2009, ACM SIGPLAN NOTICES, V44, P223, DOI 10.1145/1543135.1542501
   Taghdiri M., 2008, THESIS MIT
   Tuan-Hung Pham, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P656, DOI 10.1007/978-3-642-22110-1_53
   Wies T., ABSCS0609104 CORR
   Yang H, 2008, LECT NOTES COMPUT SC, V5123, P385
   Yorsh G, 2006, LECT NOTES COMPUT SC, V3921, P94
NR 47
TC 6
Z9 7
U1 0
U2 5
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR 2
PY 2014
VL 82
SI SI
BP 56
EP 76
DI 10.1016/j.scico.2013.03.004
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AB5VR
UT WOS:000331857300005
OA hybrid
DA 2024-07-18
ER

PT J
AU Karnali, M
   Laibinis, L
   Petre, L
   Sere, K
AF Karnali, Maryam
   Laibinis, Linas
   Petre, Luigia
   Sere, Kaisa
TI Formal development of wireless sensor-actor networks
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Wireless sensor-actor networks (WSANs); Coordination links; Coordination
   recovery; Refinement; Pattern development; Event-B; RODIN tool
ID EVENT-B
AB Wireless sensor-actor networks are a recent development of wireless networks where both ordinary sensor nodes and more sophisticated and powerful nodes, called actors, are present. In this paper we introduce several, increasingly more detailed, formal models for this type of wireless networks. These models formalise a recently introduced algorithm for recovering actor-actor coordination links via the existing sensor infrastructure. We prove via refinement that this recovery is correct and that it terminates in a finite number of steps. In addition, we propose a generalisation of our formal development strategy, which can be reused in the context of a wider class of networks. We elaborate our models within the Event-B formalism, while our proofs are carried out using the RODIN platform - an integrated development framework for Event-B. (C) 2012 Elsevier B.V. All rights reserved.
C1 [Karnali, Maryam; Laibinis, Linas; Petre, Luigia; Sere, Kaisa] Abo Akad Univ, Dept Informat Technol, Turku, Finland.
   [Karnali, Maryam] TUCS, Turku, Finland.
C3 Abo Akademi University
RP Karnali, M (corresponding author), Abo Akad Univ, Dept Informat Technol, Turku, Finland.
EM mkamali@abo.fi
RI Laibinis, Linas/H-1695-2016
OI Laibinis, Linas/0000-0002-1200-0847; Kamali, Maryam/0000-0002-2789-6914
FU Nokia; IST FP7 DEPLOY project
FX M. Kamali's work is partially supported by Nokia. This work is supported
   by IST FP7 DEPLOY project. We would like to kindly thank the reviewers
   for their detailed and pertinent comments on our paper.
CR Abbasi Ameer Ahmed, 2007, 2007 32nd IEEE Conference on Local Computer Networks, P496
   Abrial JR, 2008, LECT NOTES COMPUT SC, V5160, P1, DOI 10.1007/978-3-540-85762-4_1
   Abrial JR, 2007, LECT NOTES COMPUT SC, V4789, P1, DOI 10.1007/978-3-540-76650-6_1
   Abrial J.-R., 2003, Formal Aspects of Computing, V14, P215, DOI 10.1007/s001650300002
   Abrial Jean-Raymond, 2010, International Journal on Software Tools for Technology Transfer, V12, P447, DOI 10.1007/s10009-010-0145-y
   Abrial J.-R., 1996, B BOOK ASSIGNING PRO
   Abrial J.R., 2010, MODELLING EVENT B
   Akkaya Kemal, 2008, International Journal of Sensor Networks, V3, P152, DOI 10.1504/IJSNET.2008.018476
   Akyildiz IF., 2004, AD HOC NETW, V2, P351, DOI [10.1016/j.adhoc.2004.04.003, DOI 10.1016/J.ADHOC.2004.04.003]
   Al-Karaki JN, 2004, IEEE WIREL COMMUN, V11, P6, DOI 10.1109/MWC.2004.1368893
   [Anonymous], 1980, CALCULUS COMMUNICATI, DOI DOI 10.1007/3-540-10235-3
   [Anonymous], 1983, P 2 ANN ACM S PRINCI, DOI [10.1145/800221.806716, DOI 10.1145/800221.806716]
   Attiogbe C., 2009, P 15 IEEE PAC RIM IN
   Attiogbé C, 2008, COMM COM INF SC, V17, P769
   Back R.-J., 1998, Refinement Calculus
   Borger E., 2003, ABSTRACT STATE MACHI
   Butler M., 1996, Formal Methods for Industrial Applications. Specifying and Programming the Steam Boiler Control, P129, DOI 10.1007/BFb0027234
   Butler M, 1997, SPR S DISC MATH, P40
   Butler M, 2009, LECT NOTES COMPUT SC, V5423, P20
   Cansell D, 2006, THEOR COMPUT SCI, V364, P318, DOI 10.1016/j.tcs.2006.08.015
   Cardelli L, 1999, LECT NOTES COMPUTER, V1603, P51
   Dong JS, 2008, LECT NOTES COMPUT SC, V5256, P318, DOI 10.1007/978-3-540-88194-0_20
   Fehnker A, 2007, LECT NOTES COMPUT SC, V4591, P253
   GERHART S, 1994, IEEE SOFTWARE, V11, P32, DOI 10.1109/MS.1994.1279941
   Hoang TS, 2009, SEFM 2009: SEVENTH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING AND FORMAL METHODS, P210, DOI 10.1109/SEFM.2009.17
   Hoang TS, 2009, SCI COMPUT PROGRAM, V74, P879, DOI 10.1016/j.scico.2009.07.006
   HOARE CAR, 1978, COMMUN ACM, V21, P666, DOI 10.1145/359576.359585
   Iliasov Alexei, 2009, Proceedings of Formal Methods for Components and Objects. 8th International Symposium (FMCO 2009). Revised Selected Papers, P70, DOI 10.1007/978-3-642-17071-3_4
   Iliasov A, 2010, LECT NOTES COMPUT SC, V5977, P174, DOI 10.1007/978-3-642-11811-1_14
   Kamali M., 2011, Proceedings of the 2011 14th Euromicro Conference on Digital System Design. Architectures, Methods and Tools. (DSD 2011), P634, DOI 10.1109/DSD.2011.86
   Kamali M., 2012, LECT NOTES COMPUTER, V7141, P236
   Kamali M, 2008, ISSNIP 2008: PROCEEDINGS OF THE 2008 INTERNATIONAL CONFERENCE ON INTELLIGENT SENSORS, SENSOR NETWORKS, AND INFORMATION PROCESSING, P183, DOI 10.1109/ISSNIP.2008.4761984
   Martínez D, 2011, SENSORS-BASEL, V11, P1059, DOI 10.3390/s110101059
   Mclver A., 2006, Leveraging Applications of Formal Methods, Verification and Validation, P263
   Melodia T, 2007, IEEE T MOBILE COMPUT, V6, P1116, DOI 10.1109/TMC.2007.1009
   Morgan C., 1998, Programming from Specification, VThird
   Oliveira M., 2003, Formal Aspects of Computing, V15, P28, DOI 10.1007/s00165-003-0003-8
   Rehm J., 2010, International Journal on Software Tools for Technology Transfer, V12, P39, DOI 10.1007/s10009-009-0130-5
   Rigorous Open Development Environment for Complex Systems (RODIN), IST FP6 STREP PROJ
   Smith Graeme., 2000, OBJECT Z SPECIFICATI
   Spivey J. Michael, 1992, Z NOTATION REFERENCE, V2
NR 41
TC 13
Z9 13
U1 0
U2 11
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 1
PY 2014
VL 80
BP 25
EP 49
DI 10.1016/j.scico.2012.03.002
PN A
PG 25
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 292FG
UT WOS:000329887000003
OA hybrid
DA 2024-07-18
ER

PT J
AU Thüma, T
   Kästner, C
   Benduhn, F
   Meinicke, J
   Saake, G
   Leich, T
AF Thuema, Thomas
   Kaestner, Christian
   Benduhn, Fabian
   Meinicke, Jens
   Saake, Gunter
   Leich, Thomas
TI FeatureIDE: An extensible framework for feature-oriented software
   development
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Feature-oriented software development; Software product lines; Feature
   modeling; Feature-oriented programming; Aspect-oriented programming;
   Delta-oriented programming; Preprocessors; Tool support
ID MODELS
AB FeatureIDE is an open-source framework for feature-oriented software development (FOSD) based on Eclipse. FOSD is a paradigm for the construction, customization, and synthesis of software systems. Code artifacts are mapped to features, and a customized software system can be generated given a selection of features. The set of software systems that can be generated is called a software product line (SPL). FeatureIDE supports several FOSD implementation techniques such as feature-oriented programming, aspect-oriented programming, delta-oriented programming, and preprocessors. All phases of FOSD are supported in FeatureIDE, namely domain analysis, requirements analysis, domain implementation, and software generation. (C) 2012 Elsevier B.V. All rights reserved.
C1 [Thuema, Thomas; Benduhn, Fabian; Meinicke, Jens; Saake, Gunter] Univ Magdeburg, D-39106 Magdeburg, Germany.
   [Kaestner, Christian] Univ Marburg, D-35032 Marburg, Germany.
   [Leich, Thomas] METOP GmbH, Magdeburg, Germany.
C3 Otto von Guericke University; Philipps University Marburg
RP Thüma, T (corresponding author), Univ Magdeburg, D-39106 Magdeburg, Germany.
EM tthuem@ovgu.de
RI Leich, Thomas/N-8106-2017
OI Kastner, Christian/0000-0002-4450-4572
FU METOP GmbH
FX We would like to thank Marko Rosenmuller for comments on an earlier
   draft of this paper. FeatureIDE is supported by the METOP GmbH. We would
   like to thank all current and former contributors: Constanze Adler, Sven
   Apel, Don Batory, Christian Becker, Stephan Besecke, David Broneske, Tom
   Brosch, Alexander Dreiling, Janet Feigenspan, Christoph Giesel, David
   Halm, Sebastian Henneberg, Marcus Kamieth, Stephan Kauschka, Dariusz
   Krolikowski, Maik Lampe, Laura Marnitz, Cyrill Meier, Marcus Leich,
   Melanie Pflaume, Eric Schubert, Hannes Smuracsky, Torsten Stoter,
   Patrick Sulkowski, Patrick Venohr, Jan Wedding, and Fabian Wielgorz.
CR Acher M., 2011, 26 INT S APPL COMP S, P1333
   [Anonymous], 2005, P WORKSHOP ECLIPSE T
   [Anonymous], 2000, Generative programming: methods, tools, and applications
   Antkiewicz M., 2004, Proc. of the Wksp on Eclipse Technology eXchange, P67, DOI DOI 10.1145/1066129.1066143
   Apel S, 2005, LECT NOTES COMPUT SC, V3676, P125
   Apel S., 2007, THESIS U MAGDEBURG G
   Apel S, 2009, J OBJECT TECHNOL, V8, P49, DOI 10.5381/jot.2009.8.5.c5
   Apel S, 2009, PROC INT CONF SOFTW, P221, DOI 10.1109/ICSE.2009.5070523
   Arne HaberHolger Rendel., 2011, Proceedings of the Dagstuhl Workshop on Model-Based Development of Embedded Systems (MBEES'11), P1
   Batory D, 2005, LECT NOTES COMPUT SC, V3714, P7
   Batory D, 2006, LECT NOTES COMPUT SC, V4143, P3
   Benavides D., 2007, PROCEEDING 1 INT WOR, P129
   Berger T., 2010, P INT C AUT SOFTW EN, P73, DOI DOI 10.1145/1858996.1859010
   Big Lever Software Inc, 2010, GEARS SOFTW PROD LIN
   Botterweck G., 2009, P 3 INT WORKSH VAR M, V29, P165
   Boucher Q., 2010, Proceedings of the International Conference on Automated Software Engineering, ASE '10, P333
   Colyer A., 2004, Eclipse aspectj: aspect-oriented programming with aspectj and the eclipse aspectj development tools
   Czarnecki K, 2005, LECT NOTES COMPUT SC, V3676, P422
   GCC Development Team, 2011, C PROC
   Heidenreich F, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P943
   Henneberg S., 2011, THESIS U PASSAU GERM
   Kästner C, 2009, PROC INT CONF SOFTW, P611, DOI 10.1109/ICSE.2009.5070568
   Kästner C, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P311, DOI 10.1145/1368088.1368131
   Kang Kyo C, 1990, Technical Report
   Kastner Christian, 2010, THESIS U MAGDEBURG
   Kiczales G, 1997, LECT NOTES COMPUT SC, V1241, P220, DOI 10.1007/BFb0053381
   Kiczales G., 2001, ECOOP 2001 - Object-Oriented Programming. 15th European Conference. Proceedings (Lecture Notes in Computer Science Vol.2072), P327
   Mendonca M., 2009, THESIS U WATERLOO CA
   Mendonca M., 2009, P 24 ACM SIGPLAN C C, P761, DOI [10.1145/1639950.1640002, DOI 10.1145/1639950.1640002]
   Munge Development Team, 2011, MUNG PURP SIMPL JAV
   Oster S, 2010, LECT NOTES COMPUT SC, V6287, P196, DOI 10.1007/978-3-642-15579-6_14
   Oster Sebastian., 2011, P 5 WORKSHOP VARIABI, DOI [DOI 10.1145/1944892.1944901, 10.1145/1944892.1944901]
   Pleumann J., 2011, ANTENNA ANT TO END S
   Prehofer C, 1997, LECT NOTES COMPUT SC, V1241, P419
   Schaefer I, 2010, LECT NOTES COMPUT SC, V6287, P77, DOI 10.1007/978-3-642-15579-6_6
   Siegmund N, 2008, ASIA PAC SOFWR ENG, P187, DOI 10.1109/APSEC.2008.45
   Thüm T, 2009, PROC INT CONF SOFTW, P254, DOI 10.1109/ICSE.2009.5070526
   Thum T., 2011, Proceedings of the 2011 15th International Software Product Line Conference (SPLC 2011), P191, DOI 10.1109/SPLC.2011.53
   Veer Bart, 2011, The eCos ComponentWriter's Guide. Manual
   Zippel R., 2011, KCONFIG DOCUMENTATIO
   [No title captured]
NR 41
TC 225
Z9 230
U1 0
U2 10
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 1
PY 2014
VL 79
SI SI
BP 70
EP 85
DI 10.1016/j.scico.2012.06.002
PG 16
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 246RH
UT WOS:000326556300006
OA hybrid, Green Submitted
DA 2024-07-18
ER

PT J
AU van der Burg, S
   Dolstra, E
AF van der Burg, Sander
   Dolstra, Eelco
TI Disnix: A toolset for distributed deployment
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Software deployment; Distributed systems; Service-oriented systems
ID SOFTWARE DEPLOYMENT; COMPONENT; RECONFIGURATION
AB The process of deploying a distributed system in a network of machines is often very complex, laborious and time-consuming, while it is hard to guarantee that the system will work as expected and that specific non-functional deployment requirements from the domain are supported. In this paper we describe the Disnix toolset, which provides system administrators or developers with automatic deployment of a distributed system in a network of machines from declarative specifications and offers properties such as complete dependencies, atomic upgrades and rollbacks to make this process efficient and reliable. Disnix has an extensible architecture, allowing the integration of custom modules to make the deployment more convenient and suitable for the domain in which the system is to be used. Disnix has been under development for almost four years and has been applied to several types of distributed systems, including an industrial case study. (C) 2012 Elsevier B.V. All rights reserved.
C1 [van der Burg, Sander; Dolstra, Eelco] Delft Univ Technol, NL-2600 AA Delft, Netherlands.
C3 Delft University of Technology
RP van der Burg, S (corresponding author), Delft Univ Technol, NL-2600 AA Delft, Netherlands.
EM s.vanderburg@tudelft.nl; e.dolstra@tudelft.nl
FU NWO-JACQUARD project [638.001.208]
FX This research is supported by NWO-JACQUARD project 638.001.208, PDS:
   Pull Deployment of Services. We wish to thank the contributors and
   developers of NixOS and SDS2, in particular Merijn de Jonge, who also
   contributed significantly to the development of Disnix.
CR Akkerman A, 2005, LECT NOTES COMPUT SC, V3798, P17
   [Anonymous], 2003, The art of UNIX programming
   Caron E., 2006, RR5886 LAB INF PAR L
   Chen HB, 2007, PROC INT CONF SOFTW, P271
   Chen XJ, 2002, LECT NOTES COMPUT SC, V2370, P82
   Costanza P, 2002, LECT NOTES COMPUT SC, V2370, P125
   de Jonge M, 2007, LECT NOTES COMPUT SC, V4749, P391
   Dolstra E, 2004, PROC INT CONF SOFTW, P583, DOI 10.1109/ICSE.2004.1317480
   DOLSTRA E, 2006, THESIS UTRECHT U NET
   DOLSTRA E, 2008, ICFP 2008
   Dumitras T., 2007, P 3 WORKSH HOT TOP S, P14
   Eilam T, 2006, IEEE COMMUN MAG, V44, P166, DOI 10.1109/MCOM.2006.1607881
   El Maghraoui K, 2006, LECT NOTES COMPUT SC, V4290, P404
   Foster-Johnson E., 2003, RED HAT RPM GUIDE, Vfirst
   Hall R. S., 1999, Proceedings of the 1999 International Conference on Software Engineering (IEEE Cat. No.99CB37002), P174, DOI 10.1109/ICSE.1999.841007
   Konstantinou AV, 2009, THIRD INTERNATIONAL WORKSHOP ON VIRTUALIZATION TECHNOLOGIES IN DISTRIBUTED COMPUTING (VTDC-09), P9
   MaxMind, 2010, GEOIP IP ADDR LOC TE
   Mikic-Rakic M, 2002, LECT NOTES COMPUT SC, V2370, P31
   Papazoglou MP, 2007, COMPUTER, V40, P38, DOI 10.1109/MC.2007.400
   Roussain H, 2005, LECT NOTES COMPUT SC, V3798, P1
   Rutherford MJ, 2002, LECT NOTES COMPUT SC, V2370, P67
   Skeen D., 1987, CONCURRENCY CONTROL, P295
   Sudmann NP, 2002, LECT NOTES COMPUT SC, V2370, P97
   van der Burg S., 2010, 36 EUROMICRO C SOFTW
   van der Burg S., 2011, 6 INT S SOFTW ENG AD
   van der Burg S., 2010, 21 IEEE INT S SOFTW
   van der Burg S., 2008, 1 ACM WORKSH HOT TOP
   von Laszewski G, 2002, LECT NOTES COMPUT SC, V2370, P244
NR 28
TC 4
Z9 4
U1 0
U2 4
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 1
PY 2014
VL 79
SI SI
BP 52
EP 69
DI 10.1016/j.scico.2012.03.006
PG 18
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 246RH
UT WOS:000326556300005
OA hybrid
DA 2024-07-18
ER

PT J
AU Deng, YX
   Hennessy, M
AF Deng, Yuxin
   Hennessy, Matthew
TI Compositional reasoning for weighted Markov decision processes
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 4th IPM International Conference on Fundamentals of Software Engineering
   (FSEN)
CY APR 20-22, 2011
CL Tehran, IRAN
SP Inst Studies Fundamental Sci, Sch Comp Sci, ACM SIGSOFT, IFIP WG 2 2, Inst Studies Fundamental Sci
DE Markov decision processes; Simulation; Testing preorder; Modal logic;
   Compositionality
ID TRANSITION-SYSTEMS; BISIMULATION
AB Weighted Markov decision processes (MDPs) have long been used to model quantitative aspects of systems in the presence of uncertainty. However, much of the literature on such MDPs takes a monolithic approach, by modelling a system as a particular MDP; properties of the system are then inferred by analysis of that particular MDP. In contrast in this paper we develop compositional methods for reasoning about weighted MDPs, as a possible basis for compositional reasoning about their quantitative behaviour. In particular we approach these systems from a process algebraic point of view. For these we define a coinductive simulation-based behavioural preorder which is compositional in the sense that it is preserved by structural operators for constructing weighted MDPs from components.
   For finitary convergent processes, which are finite-state and finitely branching systems without divergence, we provide two characterisations of the behavioural preorder. The first uses a novel quantitative probabilistic logic, while the second is in terms of a novel form of testing, in which benefits are accrued during the execution of tests. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Deng, Yuxin] Shanghai Jiao Tong Univ, Shanghai 200030, Peoples R China.
   [Hennessy, Matthew] Trinity Coll Dublin, Dublin, Ireland.
C3 Shanghai Jiao Tong University; Trinity College Dublin
RP Deng, YX (corresponding author), Shanghai Jiao Tong Univ, Shanghai 200030, Peoples R China.
EM yuxindeng@gmail.com; matthew.hennessy@cs.tcd.ie
RI Deng, Yuxin/AHE-3663-2022
OI Deng, Yuxin/0000-0003-0753-418X
CR [Anonymous], 2001, Handbook of Process Algebra, DOI DOI 10.1016/B978-044482830-9/50029-1
   [Anonymous], 2002, LECT NOTES COMPUTER
   Baier C, 2008, PRINCIPLES OF MODEL CHECKING, P1
   Bernardo M., 2000, CONCUR 2000 - Concurrency Theory. 11th International Conference. Proceedings (Lecture Notes in Computer Science Vol.1877), P305
   Bernardo M, 1997, LECT NOTES COMPUT SC, V1256, P358
   BERNARDO M, 1999, THESIS U BOLOGNA
   Bernardo M, 2011, ELECTRON PROC THEOR, P66, DOI 10.4204/EPTCS.60.5
   Chatterjee K, 2009, LECT NOTES COMPUT SC, V5710, P244, DOI 10.1007/978-3-642-04081-8_17
   Cîrstea C, 2011, COMPUT J, V54, P31, DOI 10.1093/comjnl/bxp004
   CLEAVELAND R, 1991, LECT NOTES COMPUT SC, V531, P364, DOI 10.1007/BFb0023750
   De Nicola R, 2009, LECT NOTES COMPUT SC, V5556, P435, DOI 10.1007/978-3-642-02930-1_36
   Deng YX, 2007, LECT NOTES COMPUT SC, V4421, P363
   Deng YX, 2011, LECT NOTES COMPUT SC, V6756, P307, DOI 10.1007/978-3-642-22012-8_24
   Deng YX, 2009, LECT NOTES COMPUT SC, V5710, P274, DOI 10.1007/978-3-642-04081-8_19
   Deng YX, 2008, LOG METH COMPUT SCI, V4, DOI 10.2168/LMCS-4(4:4)2008
   DENICOLA R, 1984, THEOR COMPUT SCI, V34, P83, DOI 10.1016/0304-3975(84)90113-0
   Desharnais J, 2010, INFORM COMPUT, V208, P203, DOI 10.1016/j.ic.2009.11.002
   Droste M, 2009, MONOGR THEOR COMPUT, P1, DOI 10.1007/978-3-642-01492-5
   Eisentraut C, 2010, IEEE S LOG, P342, DOI 10.1109/LICS.2010.41
   Georgievska S, 2012, FORM ASP COMPUT, V24, P727, DOI 10.1007/s00165-012-0236-5
   HENNESSY M, 1985, J ACM, V32, P137, DOI 10.1145/2455.2460
   Hermanns H, 2011, INFORM COMPUT, V209, P154, DOI 10.1016/j.ic.2010.11.024
   Hillston J., 1996, A Compositional Approach to Performance Modelling
   Kiehn A, 2005, LECT NOTES COMPUT SC, V3731, P320
   KOZEN D, 1983, THEOR COMPUT SCI, V27, P333, DOI 10.1016/0304-3975(82)90125-6
   LARSEN KG, 1991, INFORM COMPUT, V94, P1, DOI 10.1016/0890-5401(91)90030-6
   Lipschutz S., 1965, SCHAUMS OUTLINE THEO
   Lynch N, 2007, SIAM J COMPUT, V37, P977, DOI 10.1137/S0097539704446487
   MATOUSEK J, 2002, GRAD TEXT M, V212, pR5
   Milner R., 1989, Communication and concurrency
   Muller-Olm M., 1998, ELECT NOTES THEOR CO, V18, P159, DOI DOI 10.1016/S1571-0661(05)80257-9
   Philippou A., 2000, CONCUR 2000 - Concurrency Theory. 11th International Conference. Proceedings (Lecture Notes in Computer Science Vol.1877), P334
   Puterman ML., 2014, MARKOV DECISION PROC, DOI DOI 10.1002/9780470316887
   Rutten J., 2004, CRM MONOGRAPH SERIES, V23
   Segala R., 1996, CONCUR '96: Concurrency Theory. 7th International Conference. Proceedings, P299
   Segala R, 1994, LECT NOTES COMPUT SC, V836, P481
   Segala R., 1995, MITLCSTR676 DEP EECS
   Tarski A., 1955, PAC J MATH, V5, P285, DOI DOI 10.2140/PJM.1955.5.285
NR 38
TC 5
Z9 5
U1 0
U2 9
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 1
PY 2013
VL 78
IS 12
BP 2537
EP 2579
DI 10.1016/j.scico.2013.02.009
PG 43
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 234SL
UT WOS:000325664500016
OA Bronze, Green Published
DA 2024-07-18
ER

PT J
AU Hansen, HA
   Schneider, G
   Steffen, M
AF Hansen, Hallstein A.
   Schneider, Gerardo
   Steffen, Martin
TI Reachability analysis of complex planar hybrid systems
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 4th IPM International Conference on Fundamentals of Software Engineering
   (FSEN)
CY APR 20-22, 2011
CL Tehran, IRAN
SP Inst Studies Fundamental Sci, Sch Comp Sci, ACM SIGSOFT, IFIP WG 2 2, Inst Studies Fundamental Sci
DE Hybrid systems; Reachability checking; Safety verification; Non-linear
   systems; Differential inclusions
ID ALGORITHMIC ANALYSIS
AB Hybrid systems are systems that exhibit both discrete and continuous behavior. Reachability, the question of whether a system in one state can reach some other state, is undecidable for hybrid systems in general. In this paper we are concerned with GSPDIs, 2-dimensional systems generalizing SPDIs (planar hybrid systems based on "simple polygonal differential inclusions"), for which reachability have been shown to be decidable. GSPDIs are useful to approximate 2-dimensional control systems, allowing the verification of safety properties of such systems.
   In this paper we present the following two contributions: (i) an optimized algorithm that answers reachability questions for GSPDIs, where all cycles in the reachability graph are accelerated. (ii) An algorithm by which more complex planar hybrid automata are over-approximated by GSPDIs subject to two measures of precision. We prove soundness, completeness, and termination of both algorithms, and discuss their implementation. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Hansen, Hallstein A.] Buskerud Univ Coll, Fac Technol, Kongsberg, Norway.
   [Schneider, Gerardo] Dept Comp Sci & Engn, Chalmers, Sweden.
   [Schneider, Gerardo] Univ Gothenburg, Gothenburg, Sweden.
   [Schneider, Gerardo; Steffen, Martin] Univ Oslo, Dept Informat, N-0316 Oslo, Norway.
C3 University College of Southeast Norway; Chalmers University of
   Technology; University of Gothenburg; University of Oslo
RP Hansen, HA (corresponding author), Buskerud Univ Coll, Fac Technol, Kongsberg, Norway.
EM hallsteinh@hibu.no; gersch@chalmers.se; msteffen@ifi.uio.no
CR ALUR R, 1995, THEOR COMPUT SCI, V138, P3, DOI 10.1016/0304-3975(94)00202-T
   [Anonymous], 2009, GLOBAL OPTIMIZATION
   Asarin E., 2002, CONCUR 2002 - Concurrency Theory. 13th International Conference Proceedings (Lecture Notes in Computer Science Vol.2421), P193
   Asarin E, 2003, LECT NOTES COMPUT SC, V2623, P20
   Asarin E, 2002, LECT NOTES COMPUT SC, V2289, P49
   Asarin E., 2001, Hybrid Systems: Computation and Control. 4th International Workshop, HSCC 2001. Proceedings (Lecture Notes in Computer Science Vol.2034), P89
   Asarin E, 2000, LECT NOTES COMPUT SC, V1790, P20
   Asarin E, 2007, THEOR COMPUT SCI, V379, P231, DOI 10.1016/j.tcs.2007.03.055
   Asarin E, 2007, ACTA INFORM, V43, P451, DOI 10.1007/s00236-006-0035-7
   Cellina A, 1984, DIFFERENTIAL INCLUSI
   Dora J. D., 2001, ISSAC 2001. Proceedings of the 2001 International Symposium on Symbolic and Algebraic Computation, P101, DOI 10.1145/384101.384116
   Dunsheath P, 1927, NATURE, V120, P363, DOI 10.1038/120363a0
   Frehse G, 2005, LECT NOTES COMPUT SC, V3414, P258
   Hansen Hallstein Asheim, 2012, Fundamentals of Software Engineering. 4th IPM International Conference, FSEN 2011. Revised Selected Papers, P206, DOI 10.1007/978-3-642-29320-7_14
   Hansen H. A., GSPEEDI
   Hansen H.A., 2010, SAC SVT 10, P2511
   Hansen H. A., 2009, LNCS, V5684, P336
   Hansen HA, 2011, IEEE INT CONF TRUST, P1146, DOI 10.1109/TrustCom.2011.156
   Henzinger T. A., 1995, Proceedings of the Twenty-Seventh Annual ACM Symposium on the Theory of Computing, P373, DOI 10.1145/225058.225162
   Henzinger TA, 1996, IEEE S LOG, P278, DOI 10.1109/LICS.1996.561342
   Henzinger TA, 1997, LECT NOTES COMPUT SC, V1254, P460, DOI 10.1007/s100090050008
   Henzinger TA, 1998, IEEE T AUTOMAT CONTR, V43, P540, DOI 10.1109/9.664156
   Henzinger TA, 2000, LECT NOTES COMPUT SC, V1790, P130
   Johan Astrom K., 2021, FEEDBACK SYSTEMS INT
   Moore R., 1962, THESIS STANFORD U ST
   Mysore V, 2005, LECT NOTES COMPUT SC, V3821, P261, DOI 10.1007/11590156_21
   Nedialkov N.S., 2006, SCAN 06
   PACE G, 2003, LNCS, V2937, P110
   Pace G., SPEEDI
   Pace G, 2006, LECT NOTES COMPUT SC, V4281, P168
   Pace G, 2006, LECT NOTES COMPUT SC, V4202, P306
   Pace GJ, 2008, LECT NOTES COMPUT SC, V5160, P274, DOI 10.1007/978-3-540-85762-4_19
   Ratschan S, 2006, ACM T COMPUT LOG, V7, P723, DOI 10.1145/1183278.1183282
   Ratschan S, 2007, ACM T EMBED COMPUT S, V6, DOI 10.1145/1210268.1210276
   Schneider G., 2002, THESIS VERIMAG UJF G
   Schneider G, 2008, APPLIED COMPUTING 2008, VOLS 1-3, P327
   Tarjan R., 1972, Enumeration of the elementary circuits of a directed graph
NR 37
TC 2
Z9 3
U1 0
U2 7
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 1
PY 2013
VL 78
IS 12
BP 2511
EP 2536
DI 10.1016/j.scico.2013.02.007
PG 26
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 234SL
UT WOS:000325664500015
OA hybrid, Green Submitted
DA 2024-07-18
ER

PT J
AU Sivaramakrishnan, KC
   Qudeisat, M
   Ziarek, L
   Nagaraj, K
   Eugster, P
AF Sivaramakrishnan, K. C.
   Qudeisat, Mohammad
   Ziarek, Lukasz
   Nagaraj, Karthik
   Eugster, Patrick
TI Efficient sessions
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Batching; Communication; Composition; Java; Multi-party session types;
   Optimization
ID JAVA RMI; PROGRAMS
AB Recently, there has been much interest in multi-party session types (MPSTs) as a means of rigorously specifying protocols for interaction among multiple distributed participants. By capturing distributed interaction as a series of typed interactions, MPSTs allow for the static verification of compliance of corresponding distributed object programs. We observe that explicit control flow information manifested by MPST opens intriguing avenues for performance improvements. In this paper, we present a session type guided performance enhancement framework for distributed object interaction in Java. Our framework combines control flow information from MPSTs with data flow information obtained from corresponding programs. Detailed experimental evaluation of our distributed runtime infrastructure in both Emulab and Amazon's Elastic Compute Cloud (EC2) illustrate benefits of our composable enhancement strategies. (C) 2012 Elsevier B.V. All rights reserved.
C1 [Sivaramakrishnan, K. C.; Qudeisat, Mohammad; Ziarek, Lukasz; Nagaraj, Karthik; Eugster, Patrick] Purdue Univ, W Lafayette, IN 47907 USA.
C3 Purdue University System; Purdue University
RP Sivaramakrishnan, KC (corresponding author), Purdue Univ, W Lafayette, IN 47907 USA.
EM chandras@cs.purdue.edu; mqudeisa@cs.purdue.edu; lziarek@cs.purdue.edu;
   knagara@cs.purdue.edu; peugster@cs.purdue.edu
CR [Anonymous], MICR AZ
   [Anonymous], POLYGLOT EXTENSIBLE
   [Anonymous], JAVAFLOW COMPONENT
   Appel A., 2007, COMPILING CONTINUATI
   Barroso LA, 2003, IEEE MICRO, V23, P22, DOI 10.1109/MM.2003.1196112
   Bejleri A, 2009, ELECTRON NOTES THEOR, V241, P3, DOI 10.1016/j.entcs.2009.06.002
   Bernard S, 2011, EIGHTEENTH-CENT LIFE, V35, P1, DOI 10.1215/00982601-2010-024
   BIRRELL AD, 1984, ACM T COMPUT SYST, V2, P39, DOI 10.1145/2080.357392
   BOGLE P, 1994, SIGPLAN NOTICES, V29, P341, DOI 10.1145/191081.191133
   Bonelli E, 2008, LECT NOTES COMPUT SC, V4912, P240
   Cooper E, 2007, LECT NOTES COMPUT SC, V4709, P266
   Coppo M, 2007, LECT NOTES COMPUT SC, V4468, P1
   Eugster P, 2009, LECT NOTES COMPUT SC, V5653, P570, DOI 10.1007/978-3-642-03013-0_26
   Fahndrich M., 2006, Operating Systems Review, V40, P177, DOI 10.1145/1218063.1217953
   Fowler M., 2002, Patterns of Enterprise Application Architecture
   Gay Simon., 2003, Session types for inter-process communication
   Gay SJ, 2010, ACM SIGPLAN NOTICES, V45, P299, DOI 10.1145/1707801.1706335
   Honda K, 2008, ACM SIGPLAN NOTICES, V43, P273, DOI 10.1145/1328897.1328472
   Honda K, 2011, LECT NOTES COMPUT SC, V6536, P55, DOI 10.1007/978-3-642-19056-8_4
   Hu R, 2008, LECT NOTES COMPUT SC, V5142, P516, DOI 10.1007/978-3-540-70592-5_22
   Ibrahim A, 2009, LECT NOTES COMPUT SC, V5653, P595, DOI 10.1007/978-3-642-03013-0_27
   Maassen J, 2001, ACM T PROGR LANG SYS, V23, P747, DOI 10.1145/506315.506317
   Mostrous D, 2009, LECT NOTES COMPUT SC, V5608, P203, DOI 10.1007/978-3-642-02273-9_16
   Mostrous D, 2009, LECT NOTES COMPUT SC, V5502, P316, DOI 10.1007/978-3-642-00590-9_23
   Neubauer M, 2005, ACM SIGPLAN NOTICES, V40, P221, DOI 10.1145/1047659.1040324
   Neubauer M, 2004, LECT NOTES COMPUT SC, V3057, P56
   *OMG, 2001, COMM OBJ REQ BROK AR
   Song YeeJiun., 2009, 6th USENIX Symposium on Networked Systems Design and Implementation (NSDI 2009), P17
   Sun, 1999, JAV REM METH INV DIS
   Takeuchi K., 1994, Parallel Architectures and Languages Europe'94, V817, P398, DOI [DOI 10.1007/3-540-58184-7_118, 10.1007/3540581847118]
   Tanenbaum A. S., 1988, Research into Networks and Distributed Applications. European Teleinformatics Conference - EUTECO '88, P775
   Vallecillo A, 2006, FUND INFORM, V73, P583
   Wang G, 2010, ADV INTEL SYS RES, V12, P1
   White B, 2002, USENIX ASSOCIATION PROCEEDINGS OF THE FIFTH SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P255, DOI 10.1145/1060289.1060313
   Yeung KC, 2003, LECT NOTES COMPUT SC, V2672, P324
NR 35
TC 4
Z9 4
U1 0
U2 5
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 1
PY 2013
VL 78
IS 2
SI SI
BP 147
EP 167
DI 10.1016/j.scico.2012.03.004
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 056WS
UT WOS:000312522700002
OA Bronze
DA 2024-07-18
ER

PT J
AU Volanschi, N
AF Volanschi, Nic
TI Pattern matching for the masses using custom notations
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Pattern matching; Data notations; Customization
ID LANGUAGE; OBJECTS
AB For many programmers, the notion of "pattern matching" evokes nothing more than regular expressions for matching unstructured text, or technologies such as XPath to match semi-structured data in XML This common perception of pattern matching is partly due to the success of regular expressions and XPath, which are supported in many popular programming languages today, either as standard libraries or as part of the language. But it is also due to the fact that many programmers never used another elegant form of pattern matching-on structured data, i.e., the native data structures of a programming language. This form of matching is common in functional or logic languages used in the research, but unfortunately much less used in the software industry. It is indeed very surprising that none of the popular languages in use today support, in their standard form, a nearly general form of structured data matching, decades after this technology has been discovered and continuously improved.
   This paper shows that programmers do not have to wait for next generation languages to integrate pattern matching, neither need they use non-standard pre-processors, thereby losing some advantages that are most important in an industrial setting: official support, compatibility, standardization, etc. Instead, pattern matching of native data in custom notations can be implemented as a minimalist library in popular object languages. Thus, some of the comfortable existing notations from logic languages can be reused, existing standard notations for structured data such as JSON (JavaScript Object Notation) can be smoothly extended to support pattern matching, and new notations can be designed.
   As in most library implementations of regular expressions, custom notation patterns are simply represented as strings. They can be used in two different modes: interpreted and compiled. This paper presents two open-source implementations of custom matching notations, for Java and JavaScript, exhibiting a reasonable overhead compared to other forms of pattern matching. (C) 2011 Elsevier B.V. All rights reserved.
RP Volanschi, N (corresponding author), 1 Rue Michel Jeunet, F-78300 Poissy, France.
EM nic.volanschi@free.fr
CR Aasa A., 1988, LISP FUNCTIONAL PROG
   Bravenboer M., 2004, OBJECT ORIENTED PROG
   Bravenboer M, 2009, LECT NOTES COMPUT SC, V5452, P74, DOI 10.1007/978-3-642-00434-6_6
   de Rauglaudre D., 2003, CAMLP4 TUTORIAL VERS
   Emir B, 2007, LECT NOTES COMPUT SC, V4609, P273
   Erwig M, 1997, LECT NOTES COMPUT SC, V1268, P21
   Fernandez M., 2006, PLAN 10 JAN 14
   Fisher K, 2005, ACM SIGPLAN NOTICES, V40, P295, DOI 10.1145/1064978.1065046
   Hirzel M, 2008, LECT NOTES COMPUT SC, V4902, P150
   Hutton G., 1992, Journal of Functional Programming, V2, P323, DOI 10.1017/S0956796800000411
   Klint P, 2009, IEEE INT WORK C SO, P168, DOI 10.1109/SCAM.2009.28
   Liu J., 2002, 20021878 CORN U COMP
   Mainland G., 2007, ACM SIGPLAN WORKSH H
   Mandelbaum Y, 2007, ACM SIGPLAN NOTICES, V42, P77, DOI 10.1145/1190215.1190231
   Mauny M., 1989, FUNCTIONAL PROGRAMMI, P360
   Moreau PE, 2003, LECT NOTES COMPUT SC, V2622, P61
   Odersky M., 1997, Conference Record of POPL '97: The 24th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P146, DOI 10.1145/263699.263715
   Okasaki C., 1999, Journal of Functional Programming, V9, P471, DOI 10.1017/S0956796899003494
   PLUMP D., 1999, HDB GRAPH GRAMMARS C, V2, P3, DOI DOI 10.1142/9789812815149_0001
   Rhiger M, 2009, J FUNCT PROGRAM, V19, P145, DOI 10.1017/S0956796808007089
   Rinderknecht C, 2010, SCI COMPUT PROGRAM, V75, P85, DOI 10.1016/j.scico.2009.09.011
   Simonyi C., 2006, OBJECT ORIENTED PROG
   Stein B., 2010, FUNCTIONAL PATTERN M
   Syme D., 2007, INT C FUNCT PROGR IC
   Visser E, 2002, LECT NOTES COMPUT SC, V2487, P299
   Visser J, 2006, J OBJECT TECHNOL, V5, P81, DOI 10.5381/jot.2006.5.8.a2
   Volanschi N., 2010, MYPATTERNS OPEN SOUR
   Wadler P., 1987, PRINCIPLES PROGRAMMI
   Warth A., 2007, S DYN LANG DLS OCT 2
   Warth A., 2006, OBJECT ORIENTED PROG
NR 30
TC 0
Z9 0
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAY 1
PY 2012
VL 77
IS 5
BP 609
EP 635
DI 10.1016/j.scico.2011.12.002
PG 27
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 917OQ
UT WOS:000302188000003
OA Bronze
DA 2024-07-18
ER

PT J
AU Lapadula, A
   Pugliese, R
   Tiezzi, F
AF Lapadula, Alessandro
   Pugliese, Rosario
   Tiezzi, Francesco
TI Using formal methods to develop WS-BPEL applications
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Service-oriented architectures; Web services; Formal methods; WS-BPEL;
   Operational semantics; Compilers
ID MODEL-CHECKING APPROACH; CALCULUS; SEMANTICS
AB In recent years, WS-BPEL has become a de facto standard language for the orchestration of Web services. However, there are still some well-known difficulties that make programming in WS-BPEL a tricky task. In this paper, we first point out major loose points of the WS-BPEL specification by means of many examples, some of which are also exploited to test and compare the behaviour of three of the best-known freely available WS-BPEL engines. We show that, in fact, these engines implement different semantics, which undermines the portability of WS-BPEL programs over different platforms. Then we introduce Blite, a prototypical orchestration language equipped with a formal operational semantics, which is closely inspired by, but simpler than, WS-BPEL. Indeed, Blite is designed around some of WS-BPEL's distinctive features such as partner links, process termination, message correlation, long-running business transactions, and compensation handlers. Finally, we present BliteC, a software tool supporting a rapid and easy development of WS-BPEL applications via the translation of service orchestrations written in Blite into executable WS-BPEL programs. We illustrate our approach by means of a running example borrowed from the official specification of WS-BPEL. (C) 2011 Elsevier B.V. All rights reserved.
C1 [Lapadula, Alessandro; Pugliese, Rosario; Tiezzi, Francesco] Univ Florence, Dipartimento Sistemi & Informat, I-50134 Florence, Italy.
C3 University of Florence
RP Pugliese, R (corresponding author), Univ Florence, Dipartimento Sistemi & Informat, Viale Morgagni 65, I-50134 Florence, Italy.
EM lapadula@dsi.unifi.it; pugliese@dsi.unifi.it; tiezzi@dsi.unifi.it
RI Pugliese, Rosario/J-3685-2012
OI Pugliese, Rosario/0000-0002-1419-1405
FU EU [IST-2005-016004]
FX This work is partially based on two preliminary papers, which appeared
   in [40,22], and has been partially supported by the EU project SENSORIA
   IST-2005-016004.
CR Abouzaid F, 2008, ELECTRON NOTES THEOR, V200, P43, DOI 10.1016/j.entcs.2008.04.092
   [Anonymous], OR JDEVELOPER
   [Anonymous], 2007, OR BPEL PROC MAN
   [Anonymous], 2009, ACTIVEVOS DES
   [Anonymous], 2009, ACTIVEBPEL
   [Anonymous], 2009, ECL BPEL PROJ
   [Anonymous], 2009, INT DES COMM ED
   Apache Software Foundation, 2010, AP SOFTW FDN
   Bauer J, 2008, LECT NOTES COMPUT SC, V5079, P32
   Bettini L, 2005, LECT NOTES COMPUT SC, V3543, P181
   Bettini L, 2008, LECT NOTES COMPUT SC, V5052, P17, DOI 10.1007/978-3-540-68265-3_2
   Bocchi L, 2003, LECT NOTES COMPUT SC, V2884, P124
   Boreale M, 2008, LECT NOTES COMPUT SC, V5051, P19, DOI 10.1007/978-3-540-68863-1_3
   Brown A., 2002, USING SERVICE ORIENT
   Bruni R, 2005, LECT NOTES COMPUT SC, V3653, P383, DOI 10.1007/11539452_30
   Bruni R, 2005, ACM SIGPLAN NOTICES, V40, P209, DOI 10.1145/1047659.1040323
   Butler M, 2004, LECT NOTES COMPUT SC, V2949, P87
   Carpineti S, 2009, SCI COMPUT PROGRAM, V74, P777, DOI 10.1016/j.scico.2009.03.002
   Cesari L, 2010, SAC ACM, P2438
   Christensen E., 2001, W3C
   Clark J., 1999, W3C
   Curbera F, 2002, BUSINESS PROCESS EXE
   Erich GammaRichard Helm., 1994, Design patterns: elements of reusable object-oriented software
   Fantechi A, 2008, LECT NOTES COMPUT SC, V4961, P230, DOI 10.1007/978-3-540-78743-3_17
   Ferrari G, 2006, LECT NOTES COMPUT SC, V4294, P453
   Ferrari G, 2006, LECT NOTES COMPUT SC, V4229, P46
   Gudgin M., 2006, W3C
   Guidi C., 2008, ACSD IEEE, P90
   Guidi C, 2006, LECT NOTES COMPUT SC, V4294, P327
   Hallwyl T., 2010, SAC, P2472
   Java Community Process, 2005, JSR 000208 JAV BUS I
   Laneve C, 2005, LECT NOTES COMPUT SC, V3441, P282
   Lapadula A., 2008, THESIS U STUDI FIREN
   Lapadula A, 2008, LECT NOTES COMPUT SC, V5052, P199, DOI 10.1007/978-3-540-68265-3_13
   Lapadula A, 2007, LECT NOTES COMPUT SC, V4767, P223
   Lapadula A, 2007, LECT NOTES COMPUT SC, V4421, P33
   LEYMANN F., 2001, WEB SERVICES FLOW LA
   Lohmann N, 2008, LECT NOTES COMPUT SC, V4937, P77
   Lucchi R, 2007, J LOGIC ALGEBR PROGR, V70, P96, DOI 10.1016/j.jlap.2006.05.007
   Mayer P, 2008, IEEE INT ENTERP DIST, P203, DOI 10.1109/EDOC.2008.55
   Meredith LG, 2003, COMMUN ACM, V46, P41, DOI 10.1145/944217.944236
   Montesi F, 2007, ECOWS 07: PROCEEDING OF THE 5TH IEEE EUROPEAN CONFERENCE ON WEB SERVICES, P13, DOI 10.1109/ECOWS.2007.19
   Ouyang C., 2005, Formal Semantics and Analysis of Control Flow in WS-BPEL
   Panconi P., 2009, BLITE SE BLIDE
   Prandi D, 2007, LECT NOTES COMPUT SC, V4749, P245
   Qiu ZY, 2005, LECT NOTES COMPUT SC, V3582, P350
   ter Beek M., 2010, LNI, V179, P79
   ter Beek MH, 2011, SCI COMPUT PROGRAM, V76, P119, DOI 10.1016/j.scico.2010.07.002
   Thatte S., 2001, XLANG WEB SERVICES B
   van Breugel F., 2006, Models and Verification of BPEL
   van der Aalst WMP, 2008, INFORM SOFTWARE TECH, V50, P131, DOI 10.1016/j.infsof.2006.11.004
NR 51
TC 10
Z9 10
U1 0
U2 6
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR 1
PY 2012
VL 77
IS 3
BP 189
EP 213
DI 10.1016/j.scico.2011.03.002
PG 25
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 898NB
UT WOS:000300748000005
OA Bronze
DA 2024-07-18
ER

PT J
AU Arbuckle, T
AF Arbuckle, Tom
TI Studying software evolution using artefacts' shared information content
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Software evolution; Software measurement; Information theory; Kolmogorov
   complexity; Similarity metric; Information content; CompLearn
ID NORMALIZED COMPRESSION DISTANCE; METRICS SUITE; COMPLEXITY; SIMILARITY;
   SET; PLAGIARISM; CRITIQUE; PROGRAMS; SIZE
AB In order to study software evolution, it is necessary to measure artefacts representative of project releases. If we consider the process of software evolution to be copying with subsequent modification, then, by analogy, placing emphasis on what remains the same between releases will lead to focusing on similarity between artefacts. At the same time, software artefacts - stored digitally as binary strings - are all information. This paper introduces a new method for measuring software evolution in terms of artefacts' shared information content. A similarity value representing the quantity of information shared between artefact pairs is produced using a calculation based on Kolmogorov complexity. Similarity values for releases are then collated over the software's evolution to form a map quantifying change through lack of similarity. The method has general applicability: it can disregard otherwise salient software features such as programming paradigm, language or application domain because it considers software artefacts purely in terms of the mathematically justified concept of information content. Three open-source projects are analysed to show the method's utility. Preliminary experiments on udev and git verify the measurement of the projects' evolutions. An experiment on ArgoUML validates the measured evolution against experimental data from other studies. (C) 2010 Elsevier B.V. All rights reserved.
C1 Univ Limerick, Limerick, Ireland.
C3 University of Limerick
RP Arbuckle, T (corresponding author), Univ Limerick, Limerick, Ireland.
EM tom.arbuckle@ieee.org
RI Arbuckle, Tom/G-7074-2011
CR Abran A, 2003, NINTH INTERNATIONAL SOFTWARE METRICS SYMPOSIUM, PROCEEDINGS, P2, DOI 10.1109/METRIC.2003.1232451
   Abreu FBE, 1996, PROCEEDINGS OF THE 3RD INTERNATIONAL SOFTWARE METRICS SYMPOSIUM, P90, DOI 10.1109/METRIC.1996.492446
   Aherne FJ, 1998, KYBERNETIKA, V34, P363
   Albrech A., 1979, PROC JOINT SHAREGUID, P83
   Alexander C., 1964, Notes on the Synthesis of Form
   Allen EB, 2007, SOFTWARE QUAL J, V15, P179, DOI 10.1007/s11219-006-9010-3
   Anan M, 2009, J SOFTW MAINT EVOL-R, V21, P1, DOI 10.1002/smr.396
   Andritsos P, 2005, IEEE T SOFTWARE ENG, V31, P150, DOI 10.1109/TSE.2005.25
   [Anonymous], 1989, Kolmogorov Complexity and Its Applications
   [Anonymous], 2000, Software Cost Estimation with COCOMO II
   [Anonymous], 1994, Object-oriented software metrics: a practical guide
   [Anonymous], 2008, Software Evolution, DOI [10.1007/978-3-540-76440-311, DOI 10.1007/978-3-540-76440-311]
   [Anonymous], 1976, ICSE 76
   [Anonymous], 2007, 159392007 ISOIEC
   [Anonymous], 1999, P 10 ANN ACM SIAM S
   Apiwattanapong T, 2004, 19TH INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING, PROCEEDINGS, P2, DOI 10.1109/ASE.2004.1342719
   Apiwattanapong T, 2007, AUTOMAT SOFTW ENG, V14, P3, DOI 10.1007/s10515-006-0002-0
   Arbuckle T., 2007, Proceedings of the 19th International Conference on Software Engineering Knowledge Engineering, P740
   Arbuckle T, 2008, IEEE INT CONF INF VI, P559, DOI 10.1109/IV.2008.58
   Arbuckle T, 2009, IWPSE-EVOL 09: ERCIM WORKSHOP ON SOFTWARE EVOLUTION (EVOL) AND INTERNATIONAL WORKSHOP ON PRINCIPLES OF SOFTWARE EVOLUTION (IWPSE), P129
   Baker BS, 2007, IEEE T SOFTWARE ENG, V33, P608, DOI 10.1109/TSE.2007.70720
   BAKER BS, 1995, SECOND WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P86, DOI 10.1109/WCRE.1995.514697
   BASILI VR, 1983, IEEE T SOFTWARE ENG, V9, P664, DOI 10.1109/TSE.1983.235431
   Bellon S, 2007, IEEE T SOFTWARE ENG, V33, P577, DOI 10.1109/TSE.2007.70725
   Bennett CH, 1998, IEEE T INFORM THEORY, V44, P1407, DOI 10.1109/18.681318
   Bennett K. H., 2000, P C FUT SOFTW ENG, P73
   BERGHEL HL, 1984, SIGPLAN NOTICES, V19, P65, DOI 10.1145/988241.988245
   Bhattacharyya Anil, 1943, B CALCUTTA MATH SOC, V35, P99
   Broder AZ, 1998, COMPRESSION AND COMPLEXITY OF SEQUENCES 1997 - PROCEEDINGS, P21, DOI 10.1109/SEQUEN.1997.666900
   CAMPBELL LL, 1965, IEEE T INFORM THEORY, V11, P112, DOI 10.1109/TIT.1965.1053712
   Canfora G., 2007, Proceedings of the 4th International Work- shop on Mining Software Repositories, MSR 2007, P14
   Canfora G, 2009, PROC INT CONF SOFTW, P595, DOI 10.1109/ICSE.2009.5070564
   Cebrian M, 2005, COMMUN INF SYST, V5, P367
   Cebrián M, 2007, IEEE T INFORM THEORY, V53, P1895, DOI 10.1109/TIT.2007.894669
   Cebrián M, 2009, IEEE T EVOLUT COMPUT, V13, P477, DOI 10.1109/TEVC.2008.2008797
   Cerra D, 2010, IEEE DATA COMPR CONF, P346, DOI 10.1109/DCC.2010.37
   CHAITIN GJ, 1969, J ACM, V16, P145, DOI 10.1145/321495.321506
   Chanon R. N., 1974, Programming Symposium, P9
   Chanon R.N., 1974, THESIS CARNEGIE MELL
   Chapin N., 1989, Proceedings of the Twenty-Second Annual Hawaii International Conference on System Sciences. Vol.II: Software Track (IEEE Cat. No.89TH0243-6), P522, DOI 10.1109/HICSS.1989.48047
   Chen X, 2004, IEEE T INFORM THEORY, V50, P1545, DOI 10.1109/TIT.2004.830793
   CHIDAMBER SR, 1994, IEEE T SOFTWARE ENG, V20, P476, DOI 10.1109/32.295895
   Church K., 1993, J AM STAT ASSOC, V2, P153, DOI [DOI 10.1080/10618600.1993, 10.2307/1390697, DOI 10.2307/1390697]
   CHURCHER NI, 1995, IEEE T SOFTWARE ENG, V21, P263, DOI 10.1109/32.372153
   Cilibrasi R, 2004, COMPUT MUSIC J, V28, P49, DOI 10.1162/0148926042728449
   Cilibrasi R, 2005, IEEE T INFORM THEORY, V51, P1523, DOI 10.1109/TIT.2005.844059
   CILIBRASI R, 2003, COMPLEARN TOOLKIT
   Clark D, 2005, J LOGIC COMPUT, V15, P181, DOI 10.1093/logcom/exi009
   Cook M. L., 1982, SIGSOFT Software Engineering Notes, V7, P41, DOI 10.1145/1005937.1005946
   Cover T.M., 2006, ELEMENTS INFORM
   D'Ambros M, 2006, 10TH EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, PROCEEDINGS, P227
   Donaldson J. L., 1981, SIGCSE Bulletin, V13, P21, DOI 10.1145/953049.800955
   Duala-Ekoko E, 2007, PROC INT CONF SOFTW, P158
   Ducasse S., 1999, Proceedings IEEE International Conference on Software Maintenance - 1999 (ICSM'99). `Software Maintenance for Business Change' (Cat. No.99CB36360), P109, DOI 10.1109/ICSM.1999.792593
   Eisenbarth T, 2003, IEEE T SOFTWARE ENG, V29, P210, DOI 10.1109/TSE.2003.1183929
   Emam KE, 2001, IEEE T SOFTWARE ENG, V27, P630, DOI 10.1109/32.935855
   Evanco WM, 2003, IEEE T SOFTWARE ENG, V29, P670, DOI 10.1109/TSE.2003.1214331
   FENTON N, 1992, SOFTWARE ENG J, V7, P357, DOI 10.1049/sej.1992.0036
   Galas DJ, 2010, IEEE T INFORM THEORY, V56, P667, DOI 10.1109/TIT.2009.2037046
   Gall CS, 2008, IET SOFTW, V2, P17, DOI 10.1049/iet-sen:20070109
   Godfrey MW, 2008, 2008 FRONTIERS OF SOFTWARE MAINTENANCE, P129, DOI 10.1109/FOSM.2008.4659256
   Greevy O, 2005, NINTH EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, PROCEEDINGS, P314, DOI 10.1109/CSMR.2005.21
   Grier S., 1981, SIGCSE Bulletin, V13, P15, DOI 10.1145/953049.800954
   Halstead M. H., 1977, ELEMENTS SOFTWARE SC
   HAMMING RW, 1950, BELL SYST TECH J, V29, P147, DOI 10.1002/j.1538-7305.1950.tb00463.x
   Harman M., FOSE 07, P342
   Harrison R, 1998, IEEE T SOFTWARE ENG, V24, P491, DOI 10.1109/32.689404
   HELLERMAN L, 1972, IEEE T COMPUT, VC 21, P439, DOI 10.1109/T-C.1972.223539
   HENRY S, 1981, IEEE T SOFTWARE ENG, V7, P510, DOI 10.1109/TSE.1981.231113
   Hitz M, 1996, IEEE T SOFTWARE ENG, V22, P267, DOI 10.1109/32.491650
   HORWITZ S, 1990, SIGPLAN NOTICES, V25, P234, DOI 10.1145/93548.93574
   Israeli A, 2010, J SYST SOFTWARE, V83, P485, DOI 10.1016/j.jss.2009.09.042
   Jackson M, 2008, LECT NOTES COMPUT SC, V5316, P1, DOI 10.1007/978-3-540-89762-0_1
   JANKOWITZ HT, 1988, COMPUT J, V31, P1, DOI 10.1093/comjnl/31.1.1
   Johnson J. H., 1993, Proceedings CASCON '93, P171
   JONES C, 1994, COMPUTER, V27, P98, DOI 10.1109/2.312055
   JONES C, 2008, APPL SOFTWARE MEASUR
   Juergens E, 2009, PROC INT CONF SOFTW, P485, DOI 10.1109/ICSE.2009.5070547
   Kagdi H, 2007, J SOFTW MAINT EVOL-R, V19, P77, DOI 10.1002/smr.344
   Kamiya T, 2002, IEEE T SOFTWARE ENG, V28, P654, DOI 10.1109/TSE.2002.1019480
   KARP RM, 1987, IBM J RES DEV, V31, P249, DOI 10.1147/rd.312.0249
   KHOSHGOFTAAR TM, 1994, SOFTWARE QUAL J, V3, P79, DOI 10.1007/BF00213632
   Kirk SR, 2004, J SYST SOFTWARE, V72, P179, DOI 10.1016/S0164-1212(03)00217-6
   Kitchenham BA, 2002, IEEE T SOFTWARE ENG, V28, P721, DOI 10.1109/TSE.2002.1027796
   Kolmogorov A. N., 1968, International Journal of Computer Mathematics, V2, P157, DOI 10.1080/00207166808803030
   Kolovos DS, 2009, 2009 ICSE WORKSHOP ON COMPARISON AND VERSIONING OF SOFTWARE MODELS, P1, DOI 10.1109/CVSM.2009.5071714
   Komondoor R, 2001, LECT NOTES COMPUT SC, V2126, P40
   Kontogiannis K. A., 1996, Automated Software Engineering, V3, P77, DOI 10.1007/BF00126960
   Koroutchev K, 2006, J STAT MECH-THEORY E, DOI 10.1088/1742-5468/2006/10/P10009
   Koschke R., 2006, DAGSTUHL SEMINAR P
   Krinke J, 2001, EIGHTH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P301, DOI 10.1109/WCRE.2001.957835
   Kroah-Hartman G., 2003, UDEV
   KULLBACK S, 1951, ANN MATH STAT, V22, P79, DOI 10.1214/aoms/1177729694
   LaMantia MJ, 2008, SEVENTH WORKING IEEE/IFIP CONFERENCE ON SOFTWARE ARCHITECTURE, PROCEEDINGS, P83, DOI 10.1109/WICSA.2008.49
   Levenshtein V. I., 1966, SOV PHYS DOKL, V10, P707
   Li M, 2004, IEEE T INFORM THEORY, V50, P3250, DOI 10.1109/TIT.2004.838101
   Li M, 2001, BIOINFORMATICS, V17, P149, DOI 10.1093/bioinformatics/17.2.149
   Li M, 2007, INT J FOUND COMPUT S, V18, P669, DOI 10.1142/S0129054107004905
   Li YJ, 2007, IEEE T PATTERN ANAL, V29, P1091, DOI 10.1109/TPAMI.2007.1070
   Li ZM, 2006, IEEE T SOFTWARE ENG, V32, P176, DOI 10.1109/TSE.2006.28
   Long C, 2009, IEEE DATA MINING, P866, DOI 10.1109/ICDM.2009.107
   Lutz R, 2001, J SYST ARCHITECT, V47, P613, DOI 10.1016/S1383-7621(01)00019-4
   Maletic JI, 2008, 2008 FRONTIERS OF SOFTWARE MAINTENANCE, P31, DOI 10.1109/FOSM.2008.4659246
   MANBER U, 1994, PROCEEDINGS OF THE WINTER 1994 USENIX CONFERENCE, P1
   Martin James., 1965, PROGRAMMING REAL TIM
   Mayer T, 1999, TOOLS, V29, P108, DOI 10.1109/TOOLS.1999.779004
   Mayer T, 1999, SOFTWARE QUAL J, V8, P97, DOI 10.1023/A:1008900825849
   McCamant S, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P193, DOI 10.1145/1375581.1375606
   MCILROY MD, 1960, COMMUN ACM, V3, P214, DOI 10.1145/367177.367223
   Mens T, 2005, EIGHTH INTERNATIONAL WORKSHOP ON PRINCIPLES OF SOFTWARE EVOLUTION, PROCEEDINGS, P13, DOI 10.1109/IWPSE.2005.7
   Mens T., 2008, Software Evolution
   Mens T., 2001, P 4 INT WORKSHOP PRI, P83, DOI [DOI 10.1145/602461.602476, 10.1145/602461.602476]
   Myers EW, 1986, ALGORITHMICA, V1, P251, DOI 10.1007/BF01840446
   Nguyen TT, 2009, PROC IEEE INT CONF S, P491, DOI 10.1109/ICSM.2009.5306283
   Nikora AP, 2005, J SOFTW MAINT EVOL-R, V17, P65, DOI 10.1002/smr.303
   Ottenstein K. J., 1976, ACM SIGCSE Bulletin, V8, P30, DOI [DOI 10.1145/382222.382462, 10.1145/382222.382462]
   Perlis A., 1981, SOFTWARE METRICS ANA
   Prechelt L, 2002, J UNIVERS COMPUT SCI, V8, P1016
   Prowell SJ, 2003, IEEE T SOFTWARE ENG, V29, P417, DOI 10.1109/TSE.2003.1199071
   PUTNAM LH, 1978, IEEE T SOFTWARE ENG, V4, P345, DOI 10.1109/TSE.1978.231521
   Robbins J., 1999, ARGOUML
   Roy C.K., 2007, 541 TR QUEENS SCH CO
   Roy CK, 2009, SCI COMPUT PROGRAM, V74, P470, DOI 10.1016/j.scico.2009.02.007
   Rubey R.J., 1968, Proceedings of the ACM National Conference, P671, DOI DOI 10.1145/800186.810631
   Sarkar S, 2007, IEEE T SOFTWARE ENG, V33, P14, DOI 10.1109/TSE.2007.256942
   Schleimer Saul, 2003, P 2003 ACM SIGMOD IN, P76, DOI [10.1145/872757.872770, DOI 10.1145/872757.872770]
   SHANNON CE, 1948, BELL SYST TECH J, V27, P379, DOI 10.1002/j.1538-7305.1948.tb01338.x
   SHANNON CE, 1948, BELL SYST TECH J, V27, P623, DOI 10.1002/j.1538-7305.1948.tb00917.x
   SHEPPERD M, 1994, J SYST SOFTWARE, V26, P197, DOI 10.1016/0164-1212(94)90011-6
   SHEPPERD M, 1988, SOFTWARE ENG J, V3, P30, DOI 10.1049/sej.1988.0003
   SIMON HA, 1961, ECONOMETRICA, V29, P111, DOI 10.2307/1909285
   SOLOMONOFF RJ, 1964, INFORM CONTROL, V7, P224, DOI 10.1016/S0019-9958(64)90131-7
   Speidel U., 2009, P 7 INT C INF COMM S, DOI [10.1109/ICICS.2009.5397536, DOI 10.1109/ICICS.2009.5397536]
   Terwijn SA, 2011, J COMPUT SYST SCI, V77, P738, DOI 10.1016/j.jcss.2010.06.018
   Torres W.R., P 1991 S APPL COMP, P437
   Torvalds L, 2005, Git: Fast version control system
   Treude C., 2007, P EUR SOFTW ENG C FD, P295
   Tzerpos V., 1999, Sixth Working Conference on Reverse Engineering (Cat. No.PR00303), P187, DOI 10.1109/WCRE.1999.806959
   van Emden M.H., 1971, MATHAMATICS CENTRUM, V35
   van Emden M.H., 1969, MACH INTELL, V5, P361
   Wise M. J., 1996, SIGCSE Bulletin, V28, P130, DOI 10.1145/236462.236525
   Xing Z., 2005, 20 IEEEACM INT C AUT, P54, DOI DOI 10.1145/1101908.1101919
   Zaidman Andy, 2008, 2008 First IEEE International Conference on Software Testing, Verification and Validation (ICST '08), P220, DOI 10.1109/ICST.2008.47
   Zhang L, 2007, 2007 INTERNATIONAL CONFERENCE ON INTELLIGENT PERVASIVE COMPUTING, PROCEEDINGS, P431, DOI 10.1109/IPC.2007.10
   Zuse H., 1990, SOFTWARE COMPLEXITY
NR 145
TC 12
Z9 15
U1 0
U2 6
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 1
PY 2011
VL 76
IS 12
SI SI
BP 1078
EP 1097
DI 10.1016/j.scico.2010.11.005
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 793FX
UT WOS:000292806900002
OA Bronze
DA 2024-07-18
ER

PT J
AU Lincke, J
   Appeltauer, M
   Steinert, B
   Hirschfeld, R
AF Lincke, Jens
   Appeltauer, Malte
   Steinert, Bastian
   Hirschfeld, Robert
TI An open implementation for context-oriented layer composition in
   ContextJS
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE ContextJS; Context-oriented programming; Open implementations; Dynamic
   adaptation; Scope
AB Context-oriented programming (COP) provides dedicated support for defining and composing variations to a basic program behavior. A variation, which is defined within a layer, can be de-/activated for the dynamic extent of a code block. While this mechanism allows for control flow-specific scoping, expressing behavior adaptations can demand alternative scopes. For instance, adaptations can depend on dynamic object structure rather than control flow. We present scenarios for behavior adaptation and identify the need for new scoping mechanisms. The increasing number of scoping mechanisms calls for new language abstractions representing them. We suggest to open the implementation of scoping mechanisms so that developers can extend the COP language core according to their specific needs. Our open implementation moves layer composition into objects to be affected and with that closer to the method dispatch to be changed. We discuss the implementation of established COP scoping mechanisms using our approach and present new scoping mechanisms developed for our enhancements to Lively Kernel. (C) 2010 Elsevier B.V. All rights reserved.
C1 [Lincke, Jens; Appeltauer, Malte; Steinert, Bastian; Hirschfeld, Robert] Univ Potsdam, Hasso Plattner Inst, Software Architecture Grp, Potsdam, Germany.
C3 University of Potsdam
RP Lincke, J (corresponding author), Univ Potsdam, Hasso Plattner Inst, Software Architecture Grp, Potsdam, Germany.
EM jens.lincke@hpi.uni-potsdam.de; malte.appeltauer@hpi.uni-potsdam.de;
   bastian.steinert@hpi.uni-potsdam.de;
   robert.hirschfeld@hpi.uni-potsdam.de
CR [Anonymous], 2003, TEST DRIVEN DEV EXAM
   Apel S, 2008, IEEE T SOFTWARE ENG, V34, P162, DOI 10.1109/TSE.2007.70770
   Appeltauer Malte, 2008, Second International Conference on Mobile Ubiquitous Computing, Systems, Services and Technologies 2008, P38, DOI 10.1109/UBICOMM.2008.56
   Appeltauer M., 2010, CONTEXTJ CONTEXT ORI
   Appeltauer M., 2008, Proceedings of INFORMATIK 2008 - Beherrschbare Systeme dank Informatik, P164
   Appeltauer Malte, 2009, P WORKSH CONT OR PRO
   Appeltauer Malte, 2010, LECT NOTES COMPUTER
   Batory D, 2004, IEEE T SOFTWARE ENG, V30, P355, DOI 10.1109/TSE.2004.23
   Batory D, 2004, PROC INT CONF SOFTW, P702, DOI 10.1109/ICSE.2004.1317496
   Bergel A, 2003, LECT NOTES COMPUT SC, V2789, P122
   BRACHA G, 1990, SIGPLAN NOTICES, V25, P303, DOI 10.1145/97946.97982
   Costanza P., 2005, P DYN LANG S DLS 05, P1
   Costanza P, 2006, LECT NOTES COMPUT SC, V4228, P84
   Ducasse S, 2006, ACM T PROGR LANG SYS, V28, P331, DOI 10.1145/1119479.1119483
   *ECMA, 2009, ECMA262
   González S, 2008, J UNIVERS COMPUT SCI, V14, P3307
   Hirschfeld R, 2008, J OBJECT TECHNOL, V7, P125, DOI 10.5381/jot.2008.7.3.a4
   Hirschfeld R, 2008, LECT NOTES COMPUT SC, V5235, P396, DOI 10.1007/978-3-540-88643-3_9
   Hirschfeld Robert, 2010, 25 S APPL COMP LAUS
   Ingalls D, 1997, ACM SIGPLAN NOTICES, V32, P318, DOI 10.1145/263700.263754
   Ingalls Daniel, 2008, LNCS, V5146
   Kamina Tetuso, 2010, COP 10, P1
   Kiczales G, 1996, IEEE SOFTWARE, V13, P8, DOI 10.1109/52.476280
   Kiczales G, 1997, LECT NOTES COMPUT SC, V1241, P220, DOI 10.1007/BFb0053381
   Kiczales Gregor, 1995, OPEN IMPLEMENTATIONS
   Krahn Robert, 2009, WIKISYM 09
   Lincke Jens, 2009, P C CREAT CONN COLL
   Lowis M., 2007, Proceedings of the 2007 International Conference on Dynamic Languages: In Conjunction with the 15th International Smalltalk Joint Conference, P143, DOI DOI 10.1145/1352678.1352688
   Maloney J. H., 1995, Eighth Annual Symposium on User Interface Software and Technology. UIST '95. Proceedings of the ACM Symposium on User Interface Software and Technology, P21, DOI 10.1145/215585.215636
   Maloney John, 2001, SQUEAK OPEN PERSONAL, p39S77
   Ossher Harold, 2000, P S SOFTW ARCH COMP, P293
   Schippers Hans, 2009, P SAC PSC
   Schmidt Gregor, 2008, THESIS H PLATTNER I
   Smith R. B., 1996, Theory and Practice of Object Systems, V2, P161, DOI 10.1002/(SICI)1096-9942(1996)2:3<161::AID-TAPO3>3.0.CO;2-Z
   Smith RB, 1995, LECT NOTES COMPUT SC, V952, P303
   SMITH RB, 1995, SIGPLAN NOTICES, V30, P47, DOI 10.1145/217839.217843
   Tanter É, 2009, ACM SIGPLAN NOTICES, V44, P3, DOI 10.1145/1837513.1640137
   Toledo Rodolfo, 2009, TRDCC200910 U CHIL
   Ungar D., 1991, LISP and Symbolic Computation, V4, P187, DOI 10.1007/BF01806105
NR 39
TC 25
Z9 28
U1 1
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 1
PY 2011
VL 76
IS 12
SI SI
BP 1194
EP 1209
DI 10.1016/j.scico.2010.11.013
PG 16
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 793FX
UT WOS:000292806900009
OA Bronze
DA 2024-07-18
ER

PT J
AU Moller, A
   Schwartzbach, M
AF Moller, Anders
   Schwartzbach, Michael
TI XML graphs in program analysis
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT Workshop on Partial Evaluation and Program Manipulation
CY JAN 15-16, 2007
CL Nice, FRANCE
DE XML programming; XML validity; Type checking
AB XML graphs have shown to be a simple and effective formalism for representing sets of XML documents in program analysis. It has evolved through a six year period with variants tailored for a range of applications. We present a unified definition, outline the key properties including validation of XML graphs against different XML schema languages, and provide a software package that enables others to make use of these ideas. We also survey the use of XML graphs for program analysis with four very different languages: XACT (XML in Java), Java Servlets (Web application programming), XSugar (transformations between XML and non-XML data), and XSLT (stylesheets for transforming XML documents). (C) 2009 Elsevier B.V. All rights reserved.
C1 [Moller, Anders; Schwartzbach, Michael] Aarhus Univ, Dept Comp Sci, DK-8200 Aarhus N, Denmark.
C3 Aarhus University
RP Moller, A (corresponding author), Aarhus Univ, Dept Comp Sci, Aabogade 34, DK-8200 Aarhus N, Denmark.
EM amoeller@cs.au.dk; mis@cs.au.dk
RI Moller, Anders/O-6665-2016
OI Moller, Anders/0000-0003-1333-2314
CR [Anonymous], 2001, The wiki way: Quick collaboration on the web
   Apparao V., 1998, DOCUMENT OBJECT MODE
   AUDEBAUD P, 2000, RR200037 ENS LYON
   Böttger H, 2006, J WEB ENG, V5, P65
   Brabrand C., 2007, LNCS, V4783
   BRABRAND C, 2001, P ACM SIGPLAN SIGSOF, P221
   Brabrand C., 2008, LNCS, V33
   Christensen AS, 2003, LECT NOTES COMPUT SC, V2694, P1
   Christensen AS, 2003, ACM T PROGR LANG SYS, V25, P814, DOI 10.1145/945885.945890
   CHRISTENSEN AS, 2002, PROGR LANG TECHN XML
   CLARK J, 2002, RELAX NG COMPACT SYN
   CLARK J, TRANG
   Clark J., 2001, RELAX NG SPECIFICATI
   Clark J., 1999, XML Path Language
   Clark James, 1999, Xsl transformations (xslt)
   Comon H., 1999, TREE AUTOMATA TECHNI
   DONG C, 2004, P 15 AUSTR DAT C ADC
   FERNANDEZ MF, 2006, XQUERY 1 0 XPATH 2 0
   GUNDERSEN VB, 2005, BIBTEXML
   Hosoya H, 2005, ACM T PROGR LANG SYS, V27, P46, DOI 10.1145/1053468.1053470
   HOSOYA H, 2000, LNCS, V1997
   KAM JB, 1977, ACTA INFORM, V7, P305, DOI 10.1007/BF00290339
   KAWAGUCHI K, RELAX NG CONVERTER
   KEMPA M, 2003, LNI, V26
   Kirkegaard C, 2004, IEEE T SOFTWARE ENG, V30, P181, DOI 10.1109/TSE.2004.1271173
   KIRKEGAARD C, 2006, LNCS, V4134
   KIRKEGAARD C, 2007, DK BRICS SCHEMATOOLS
   KIRKEGAARD C, 2005, PROGR LANG TECHN XML
   KNUTH DE, 1967, INFORM CONTROL, V11, P269, DOI 10.1016/S0019-9958(67)90564-5
   KUULA S, 2006, THESIS U AARHUS
   Maneth Sebastian., 2005, PODS'05, P283, DOI DOI 10.1145/1065167.1065203
   Martens W, 2004, PODS 2004, P23
   MARTENS W, 2003, LNCS, V2572
   Mauborgne L., 2000, Nordic Journal of Computing, V7, P290
   Milo T, 2003, J COMPUT SYST SCI, V66, P66, DOI 10.1016/S0022-0000(02)00030-2
   MOHRI M, 2001, ROBUSTNESS LANGUAGE, pCH9
   Moller A, 2005, LECT NOTES COMPUT SC, V3363, P17
   MOLLER A, 2007, P ACM SIGPLAN WORKSH
   MOLLER A, 2006, RS0616 BRICS
   Moller A, 2007, ACM T PROGR LANG SYS, V29, DOI 10.1145/1255450.1255454
   Murata M., 2005, ACM Transactions on Internet Technology, V5, P660, DOI 10.1145/1111627.1111631
   Nielson F., 1999, Principles of Program Analysis
   Reps T, 1998, INFORM SOFTWARE TECH, V40, P701, DOI 10.1016/S0950-5849(98)00093-7
   Thompson H.S., 2001, Recommendation REC-xmlschema-1-20041028.
   TOZAWA A, 2001, P ACM S DOC ENG DOCE
   Vallee-Rai R., 1999, P IBM CTR ADV STUD C
NR 46
TC 3
Z9 3
U1 0
U2 4
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 1
PY 2011
VL 76
IS 6
SI SI
BP 492
EP 515
DI 10.1016/j.scico.2009.11.007
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 792EC
UT WOS:000292722300003
DA 2024-07-18
ER

EF