FN Clarivate Analytics Web of Science
VR 1.0
PT J
AU Iqbal, M
   Ijaz, M
   Mazhar, T
   Shahzad, T
   Abbas, Q
   Ghadi, Y
   Ahmad, W
   Hamam, H
AF Iqbal, Muhammad
   Ijaz, Muhammad
   Mazhar, Tehseen
   Shahzad, Tariq
   Abbas, Qamar
   Ghadi, YazeedYasin
   Ahmad, Wasim
   Hamam, Habib
TI Exploring issues of story-based effort estimation in Agile Software
   Development (ASD)
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Agile; User story; Effort estimation; Issues and challenges; User story
   effort estimation; Ml; Systematic Literature Review (SLR)
ID FUNCTIONAL SIZE
AB Context: Effort estimation based on user stories plays a pivotal role in agile software development, where accurate predictions of project efforts are vital for success. While various supervised ML tools attempt to estimate effort, the prevalence of estimation errors presents significant challenges, as evidenced by the CHAOS report by the Standish Group, which highlights incorrect estimations contributing to a substantial percentage of failed agile projects. Objectives: This research delves into the domain of user story-based effort estimation in agile software development, aiming to explore the issues arising from inaccurate estimations. The primary goal is to uncover these issues comprehensively and propose potential solutions, thus enhancing the efficacy of the user story-based estimation method. Methods: To achieve the research objectives, a systematic literature review (SLR) is conducted, surveying a wide range of sources to gather insights into issues surrounding user story-based effort estimation. The review encompasses diverse estimation methods, user story attributes, and the array of challenges that can result from inaccurate estimations. Results: The SLR reveals a spectrum of issues undermining the accuracy of user story-based effort estimation. It identifies internal factors like communication, team expertise, and composition as crucial determinants of estimation reliability. Consistency in user stories, technical complexities, and task engineering practices also emerge as significant contributors to estimation inaccuracies. The study underscores the interconnectedness of these issues, emphasizing the need for a standardized protocol to minimize inaccuracies and enhance estimation precision. Conclusion: In light of the findings, it becomes evident that addressing the multi-dimensional factors influencing user story-based effort estimation is imperative for successful agile software development. The study underscores the interplay of various aspects, such as team dynamics, task
C1 [Iqbal, Muhammad; Ijaz, Muhammad] Gomal Univ, Gomal Res Inst Comp GRIC, Fac Comp, Dera Ismail Khan, KP, Pakistan.
   [Mazhar, Tehseen] Virtual Univ Pakistan, Dept Comp Sci, Lahore 55150, Pakistan.
   [Shahzad, Tariq] COMSATS Univ Islamabad, Dept Comp Sci, Sahiwal Campus, Sahiwal 57000, Pakistan.
   [Abbas, Qamar] Int Islamic Univ Islamabad, Dept Comp Sci, ICIT, Islamabad, Pakistan.
   [Ghadi, YazeedYasin] Al Ain Univ, Dept Comp Sci & Software Engn, Abu Dhabi 15322, U Arab Emirates.
   [Ahmad, Wasim] Univ Malakand, Dept Comp Sci & Informat Technol, Chakdara, Pakistan.
   [Hamam, Habib] Univ Moncton, Fac Engn, Moncton, NB E1A 3E9, Canada.
   [Hamam, Habib] Int Inst Technol & Management IITG, Commune Akanda, Libreville 1989, Gabon.
   [Hamam, Habib] Univ Johannesburg, Sch Elect Engn, Dept Elect & Elect Engn Sci, ZA-2006 Johannesburg, South Africa.
   [Hamam, Habib] Hodmas Univ Coll, Taleh Area, Mogadishu, Somalia.
   [Hamam, Habib] Bridges Acad Excellence, Tunis, Tunisia.
C3 Gomal University; Virtual University of Pakistan; COMSATS University
   Islamabad (CUI); International Islamic University, Pakistan; University
   of Malakand; University of Moncton; University of Johannesburg
RP Mazhar, T (corresponding author), Virtual Univ Pakistan, Dept Comp Sci, Lahore 55150, Pakistan.
EM tehseenmazhar719@gmail.com
RI Abbas, Qamar/AAX-1998-2020; Mazhar, TEHSEEN/JED-4787-2023
OI Mazhar, TEHSEEN/0000-0002-4649-2376; Ghadi, Yazeed
   Yasin/0000-0002-7121-495X
CR Abnane I, 2024, J SOFTW-EVOL PROC, V36, DOI 10.1002/smr.2529
   Abnane I, 2021, PROCEEDINGS OF THE 17TH INTERNATIONAL CONFERENCE ON PREDICTIVE MODELS AND DATA ANALYTICS IN SOFTWARE ENGINEERING (PROMISE '21), P1, DOI 10.1145/3475960.3475984
   Abrahamsson Pekka, 2007, 2007 First International Symposium on Empirical Software Engineering and Measurement, P344
   Abrahamsson P, 2011, INT SYMP EMP SOFTWAR, P400, DOI 10.1109/ESEM.2011.58
   Alsaadi B, 2022, ARTIF INTELL REV, V55, P5485, DOI 10.1007/s10462-021-10132-x
   Amna AR, 2022, IEEE ACCESS, V10, P51723, DOI 10.1109/ACCESS.2022.3173745
   Angara J., 2018, International Journal of Electrical & Computer Engineering, P8
   Arora M, 2020, ADV INTELL SYST COMP, V1040, P573, DOI 10.1007/978-981-15-1451-7_59
   Aslam W, 2017, J INF SCI ENG, V33, P1481, DOI 10.6688/JISE.2017.33.6.6
   Azhar D., 2012, Proceedings ofthe 8th International Conference on Predictive Models in Software Engineering, PROMISE, V12, P49, DOI [10.1145/2365324.2365332, DOI 10.1145/2365324.2365332]
   Azzeh M, 2022, SCI COMPUT PROGRAM, V219, DOI 10.1016/j.scico.2022.102819
   Bhalerao S., 2011, P INT C COMP ENG APP, P78
   Bhalerao S., 2009, International Journal of Computer Science and Applications, V6, P85
   Bhavsar K., 2019, Int. J. Eng. Adv. Technol., V9, P4492, DOI [10.35940/ijeat.b4563.129219, DOI 10.35940/IJEAT.B4563.129219]
   Bilgaiyan S., 2017, J. Eng. Sci. Technol. Rev., V10
   Bilgaiyan S., 2017, Journal of Engineering Science & Technology Review, V10
   Bluemke I, 2022, ACM COMPUT SURV, V54, DOI 10.1145/3442694
   Brereton P, 2007, J SYST SOFTWARE, V80, P571, DOI 10.1016/j.jss.2006.07.009
   Britto R, 2020, J SYST SOFTWARE, V169, DOI 10.1016/j.jss.2020.110699
   Britto R, 2015, INT CONF GLOBAL SOFT, P38, DOI 10.1109/ICGSE.2015.10
   Cabral JTHD, 2023, J SYST SOFTWARE, V195, DOI 10.1016/j.jss.2022.111542
   Cabral JTHD, 2021, J SYST SOFTWARE, V175, DOI 10.1016/j.jss.2021.110904
   Cao L, 2022, IEEE ACCESS, V10, P83311, DOI 10.1109/ACCESS.2022.3196923
   Catal C., 2011, SEKE, P331
   Coelho E., 2012, DEVELOPMENT, V3, P7, DOI DOI 10.5120/IJAIS12-450574
   Dantas E, 2018, INT J SOFTW ENG KNOW, V28, P1811, DOI 10.1142/S0218194018400302
   Desharnais J. M., 2011, P 12 INT C PROD FOC, P68
   Dragicevic S, 2017, J SYST SOFTWARE, V127, P109, DOI 10.1016/j.jss.2017.01.027
   Durán M, 2020, PROGRAM COMPUT SOFT+, V46, P569, DOI 10.1134/S0361768820080095
   Fedotovai O, 2013, J INF SCI ENG, V29, P925
   Fernández-Diego M, 2020, IEEE ACCESS, V8, P166768, DOI 10.1109/ACCESS.2020.3021664
   Fu M, 2023, IEEE T SOFTWARE ENG, V49, P611, DOI 10.1109/TSE.2022.3158252
   Garg S., 2015, 2015 INT C IND ENG O, P1
   Gupta N, 2022, CONCURR COMP-PRACT E, V34, DOI 10.1002/cpe.7267
   Hameed S, 2023, INFORM SOFTWARE TECH, V153, DOI 10.1016/j.infsof.2022.107088
   Hamid M, 2020, IEEE ACCESS, V8, P140752, DOI 10.1109/ACCESS.2020.3010968
   Hamouda AED, 2014, 2014 AGILE CONFERENCE (AGILE), P16, DOI 10.1109/AGILE.2014.11
   Haugen NC, 2006, AGILE 2006, PROCEEDINGS, P23, DOI 10.1109/AGILE.2006.16
   Hearty P, 2009, IEEE T SOFTWARE ENG, V35, P124, DOI 10.1109/TSE.2008.76
   Dam HK, 2019, 2019 IEEE/ACM 41ST INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING: NEW IDEAS AND EMERGING RESULTS (ICSE-NIER 2019), P41, DOI 10.1109/ICSE-NIER.2019.00019
   Hussain A, 2021, IET SOFTW, V15, P230, DOI 10.1049/sfw2.12020
   Hussain I, 2013, DATA KNOWL ENG, V85, P2, DOI 10.1016/j.datak.2012.06.005
   Hussain I, 2010, LECT NOTES COMPUT SC, V6177, P80, DOI 10.1007/978-3-642-13881-2_8
   Jadhav A., 2019, Journal of Software: Evolution and Process, Ve2588
   Kang S, 2012, INT J HUM CAP INF TE, V3, P1, DOI 10.4018/jhcitp.2012040101
   Kaur A., 2018, Indonesian J. Electr. Eng. Comput. Sci., V12, P1265
   Kaur A, 2022, J KING SAUD UNIV-COM, V34, P813, DOI 10.1016/j.jksuci.2019.02.010
   Kazman R, 2011, IEEE SOFTWARE, V28, P64, DOI 10.1109/MS.2010.111
   Keaveney S., 2006, ECIS, P183
   Kitchenham B.A., 2015, Evidence-Based Software Engineering and Systematic Reviews, DOI DOI 10.1201/B19467
   Klotins Eriks, 2019, Empirical Software Engineering, V24, P68, DOI 10.1007/s10664-018-9620-y
   Klotins E, 2019, EMPIR SOFTW ENG, V24, P68, DOI 10.1007/s10664-018-9620-y
   Kumar PS, 2020, COMPUT SCI REV, V38, DOI 10.1016/j.cosrev.2020.100288
   Kumar Shailesh, 2019, International Journal of Productivity Management and Assessment Technologies, V7, P41, DOI 10.4018/IJPMAT.2019070103
   Lenarduzzi V, 2015, LECT NOTES BUS INF P, V212, P105, DOI 10.1007/978-3-319-18612-2_9
   López-Martínez J, 2018, CLUSTER COMPUT, V21, P715, DOI 10.1007/s10586-017-0996-z
   Lorko M, 2019, J ECON BEHAV ORGAN, V162, P49, DOI 10.1016/j.jebo.2019.04.014
   Lucassen G, 2016, REQUIR ENG, V21, P383, DOI 10.1007/s00766-016-0250-x
   Lun YZ, 2019, J SYST SOFTWARE, V149, P174, DOI 10.1016/j.jss.2018.12.006
   Mahmood Y, 2022, SOFTWARE PRACT EXPER, V52, P39, DOI 10.1002/spe.3009
   Mahmood Y, 2020, J SOFTW-EVOL PROC, V32, DOI 10.1002/smr.2245
   Mahnic V, 2011, ELEKTRON ELEKTROTECH, P123
   Mahnic V, 2012, J SYST SOFTWARE, V85, P2086, DOI 10.1016/j.jss.2012.04.005
   MAJCHRZAK M., 2016, Central and Eastern European Journal of Management and Economics (CEEJME), P261
   Mallidi R.K., 2021, Int. J. Comput. Appl., V174, P9, DOI [10.5120/ijca2021921014, DOI 10.5120/IJCA2021921014]
   Mateen M. A., 2023, 2023 INT C IT IND TE, P1
   Meiliana, 2023, Procedia Computer Science, V227, P186, DOI 10.1016/j.procs.2023.10.516
   Misra SC, 2009, J SYST SOFTWARE, V82, P1869, DOI 10.1016/j.jss.2009.05.052
   Molokken-Ostvold K, 2007, AGILE 2007, PROCEEDINGS, P72, DOI 10.1109/AGILE.2007.57
   Panda A., 2015, Doctoral dissertation
   Parvez Abu Wahid Md Masud, 2013, 2013 International Conference on Information Technology and Electrical Engineering (ICITEE), P113, DOI 10.1109/ICITEED.2013.6676222
   Phannachitta P, 2020, INFORM SOFTWARE TECH, V125, DOI 10.1016/j.infsof.2020.106330
   Popli R, 2019, ADV INTELL SYST, V731, P63, DOI 10.1007/978-981-10-8848-3_6
   Popli R, 2014, PROCEEDINGS OF THE 2014 INTERNATIONAL CONFERENCE ON RELIABILTY, OPTIMIZATION, & INFORMATION TECHNOLOGY (ICROIT 2014), P57, DOI 10.1109/ICROIT.2014.6798284
   Power K, 2011, LECT NOTES BUS INF P, V77, P60
   Prakash B., 2017, Indonesian Journal of Electrical Engineering and Computer Science, V7, P867, DOI [10.11591/ijeecs.v7.i3.pp867-876, DOI 10.11591/IJEECS.V7.I3.PP867-876]
   Rak K, 2019, J SOFTW-EVOL PROC, V31, DOI 10.1002/smr.2119
   Raslan A.T., 2015, International Journal of Computer Science and Information Security, V13, P37
   Raslan A. T., 2018, IJIES, V11, P205, DOI DOI 10.22266/IJIES2018.0630.22
   Raslan A.T., 2018, Int. J. Intell. Eng. Sys., V11
   Sakhrawi Z, 2022, CLUSTER COMPUT, V25, P2779, DOI 10.1007/s10586-021-03447-5
   Saleh S. M., 2019, 2019 INT C EL COMP C, pS19
   Sande D, 2010, ICEIS 2010: PROCEEDINGS OF THE 12TH INTERNATIONAL CONFERENCE ON ENTERPRISE INFORMATION SYSTEMS, VOL 1: DATABASES AND INFORMATION SYSTEMS INTEGRATION, P66
   Sandeep RC, 2022, LECT NOTES BUS INF P, V438, P136, DOI 10.1007/978-3-030-94238-0_8
   Schmietendorf Andreas., 2008, 5 SOFTW MEAS EUR FOR, P113
   Schweighofer T., 2016, SQAMIA, P73
   Sembhoo A., 2023, A SLR on Deep Learning Models Based on Textual Information For Effort Estimation in Scrum
   Shahpar Z, 2022, SOFTWARE PRACT EXPER, V52, P929, DOI 10.1002/spe.3040
   Shahpar Z, 2021, CONCURR COMP-PRACT E, V33, DOI 10.1002/cpe.6358
   Sharma A, 2020, 2020 5TH IEEE INTERNATIONAL CONFERENCE ON RECENT ADVANCES AND INNOVATIONS IN ENGINEERING (IEEE - ICRAIE-2020), DOI 10.1109/ICRAIE51050.2020.9358309
   Sharma B, 2018, COMM COM INF SC, V799, P380, DOI 10.1007/978-981-10-8527-7_32
   Singal P, 2022, INT J SYST ASSUR ENG, V13, P2413, DOI 10.1007/s13198-022-01652-y
   Singal P, 2020, PROCEDIA COMPUT SCI, V167, P2643, DOI 10.1016/j.procs.2020.03.343
   Sousa A. O., 2023, IEEE Access
   Sree S.R., 2020, A Journey Towards Bio-inspired Techniques in Software Engineering, P141
   Tamrakar R., 2012, Does the use of Fibonacci numbers in Planning Poker affect effort estimates?
   Tawosi V, 2022, INT SYMP EMP SOFTWAR, P183, DOI 10.1145/3544902.3546238
   Tawosi V, 2023, IEEE T SOFTWARE ENG, V49, P2677, DOI 10.1109/TSE.2022.3228739
   Trendowicz A., 2014, Cost Model-COCOMO, V12, P277
   Ungan E, 2014, EUROMICRO CONF PROC, P77, DOI 10.1109/SEAA.2014.83
   Usman M., 2014, PROC INT C PREDICTIV, P82
   Vyas M., 2018, International Journal of Recent Research Aspects, V5
   Ziauddin K. Z. K., 2012, Journal of Expert Systems (JES), V1, P91
   Ziauddin Shahid Kamal Tipu, 2012, Advances in computer science and its applications (ACSA), V2, P314
NR 104
TC 0
Z9 0
U1 4
U2 4
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP
PY 2024
VL 236
AR 103114
DI 10.1016/j.scico.2024.103114
EA APR 2024
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA RF2E1
UT WOS:001226179300001
DA 2024-08-05
ER

PT J
AU Wu, XX
   Gu, YZ
   Lin, LD
   Zheng, W
   Chen, X
AF Wu, Xiaoxue
   Gu, Yizeng
   Lin, Lidan
   Zheng, Wei
   Chen, Xiang
TI <i><bold>IST A</bold> +:</i> Test case generation and optimization for
   intelligent systems based on coverage analysis
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Deep learning testing; Coverage criteria; Test case generation; Test
   case optimization
AB With the increasing use of intelligent systems in various domains such as self -driving cars, robotics, and smart cities, it is crucial to ensure the quality of intelligent systems for their reliable and effective use in various domains. However, testing intelligent systems poses unique challenges due to their complex structure, low efficiency, and the high cost associated with manually collecting a large number of test cases. Hence, it is crucial to design tools that can adequately test intelligent systems while overcoming these obstacles. We propose an intelligent system test tool called ISTA+. This tool implements automatic generation and optimization of test cases based on coverage analysis, resulting in improved test adequacy for intelligent systems. To evaluate the effectiveness of ISTA+, we applied it to two different models (fully -connected DNN and the Rambo model) and two datasets of different data types (i.e., image and text). The evaluation results demonstrate that ISTA+ successfully improves the test dataset quality and ensures comprehensive testing for both text and image data types. center dot Link to source code: https://github .com /wuxiaoxue /ISTAplus center dot Link to video demonstration: https://youtu .be /6CkzMJ0ghq8
C1 [Wu, Xiaoxue] Yangzhou Univ, Sch Informat Engn, Yangzhou, Peoples R China.
   [Gu, Yizeng; Lin, Lidan; Zheng, Wei] Northwestern Polytech Univ, Sch Software, Xian, Peoples R China.
   [Chen, Xiang] Nantong Univ, Sch Informat Sci & Technol, Nantong, Peoples R China.
   [Wu, Xiaoxue] Nanjing Univ Aeronaut & Astronaut, Key Lab Safety Crit Software, Minist Ind & Informat Technol, Nanjing, Peoples R China.
C3 Yangzhou University; Northwestern Polytechnical University; Nantong
   University; Nanjing University of Aeronautics & Astronautics
RP Zheng, W (corresponding author), Northwestern Polytech Univ, Sch Software, Xian, Peoples R China.
EM wzheng@nwpu.edu.cn
FU National Natural Science Foundation of China [62141208]; The 2023 Key
   R&D Program in Shaanxi Province [62202414];  [2023-YBGY-262]
FX This research is supported by the National Natural Science Foundation of
   China (62202414, 62141208) and The 2023 Key R&D Program in Shaanxi
   Province (2023-YBGY-262) .
CR Abadi M, 2016, ACM SIGPLAN NOTICES, V51, P1, DOI [10.1145/2951913.2976746, 10.1145/3022670.2976746]
   Abouelnaga Y, 2016, 2016 INTERNATIONAL CONFERENCE ON COMPUTATIONAL SCIENCE & COMPUTATIONAL INTELLIGENCE (CSCI), P1192, DOI [10.1109/CSCI.2016.224, 10.1109/CSCI.2016.0225]
   Al-Qizwini M, 2017, IEEE INT VEH SYM, P89, DOI 10.1109/IVS.2017.7995703
   [Anonymous], 2016, RAMBO MODEL
   Asuncion Arthur, 2007, UCI machine learning repository
   Bing Han, 2020, Computer Vision - ECCV 2020. 16th European Conference. Proceedings. Lecture Notes in Computer Science (LNCS 12355), P388, DOI 10.1007/978-3-030-58607-2_23
   Cao SC, 2023, Arxiv, DOI arXiv:2304.04233
   Chen Xiang G.Q., 2012, Comput. Sci. Explor., V6, P1057
   Ciresan D, 2012, PROC CVPR IEEE, P3642, DOI 10.1109/CVPR.2012.6248110
   Ciresan Dan C., 2012, P 25 INT C NEURAL IN, DOI 10.5555/2999325.2999452
   Cohen G, 2017, IEEE IJCNN, P2921, DOI 10.1109/IJCNN.2017.7966217
   Giray G, 2021, J SYST SOFTWARE, V180, DOI 10.1016/j.jss.2021.111031
   Hinton G, 2012, IEEE SIGNAL PROC MAG, V29, P82, DOI 10.1109/MSP.2012.2205597
   Kayed M, 2020, PROCEEDINGS OF 2020 INTERNATIONAL CONFERENCE ON INNOVATIVE TRENDS IN COMMUNICATION AND COMPUTER ENGINEERING (ITCE), P238, DOI [10.1109/ITCE48509.2020.9047776, 10.1109/itce48509.2020.9047776]
   Kleeberger Kilian, 2020, Current Robotics Reports, V1, P239, DOI DOI 10.1007/S43154-020-00021-6
   Lade S, 2021, 2021 INTERNATIONAL CONFERENCE ON EMERGING SMART COMPUTING AND INFORMATICS (ESCI), P175, DOI 10.1109/ESCI50559.2021.9396941
   Liu ZX, 2023, Arxiv, DOI arXiv:2305.17047
   Ma L, 2018, IEEE INT CONF AUTOM, P120, DOI 10.1145/3238147.3238202
   Martí E, 2019, IEEE INTEL TRANSP SY, V11, P94, DOI 10.1109/MITS.2019.2907630
   Meier B., 2019, Python GUI Programming Cookbook: Develop Functional and Responsive User Interfaces with tkinter and PyQt5
   Pei KX, 2017, PROCEEDINGS OF THE TWENTY-SIXTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES (SOSP '17), P1, DOI 10.1145/3132747.3132785
   Poeplau S, 2020, PROCEEDINGS OF THE 29TH USENIX SECURITY SYMPOSIUM, P181
   Seokhyun Lee, 2020, ISSTA '20: Proceedings of the 29th ACM SIGSOFT International Symposium on Software Testing and Analysis, P165, DOI 10.1145/3395363.3397346
   Shen X., 2023, IEEE Trans. Image Process.
   Sun YC, 2018, IEEE INT CONF AUTOM, P109, DOI 10.1145/3238147.3238172
   Tao CQ, 2023, INFORM SOFTWARE TECH, V162, DOI 10.1016/j.infsof.2023.107266
   Tian YC, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P303, DOI 10.1145/3180155.3180220
   Trujillo M., 2020, P IEEEACM 42 INT C S
   Wang Q, 2020, INT SYM QUAL ELECT, P1, DOI [10.1109/ISQED48828.2020.9137057, 10.1109/isqed48828.2020.9137057, 10.1109/CVPR42600.2020.01155]
   Wu XX, 2021, IEEE T SOFTWARE ENG, V48, P2541, DOI 10.1109/TSE.2021.3063727
   Wu XX, 2021, INFORM SOFTWARE TECH, V133, DOI 10.1016/j.infsof.2021.106530
   Xie XF, 2019, PROCEEDINGS OF THE 28TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS (ISSTA '19), P146, DOI 10.1145/3293882.3330579
   Yan SA, 2020, PROCEEDINGS OF THE 28TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE '20), P775, DOI 10.1145/3368089.3409671
   Yang YM, 2022, ACM COMPUT SURV, V54, DOI 10.1145/3505243
   You HM, 2023, PROC INT CONF SOFTW, P82, DOI 10.1109/ICSE48619.2023.00019
   Yuan Y.-H., 2023, INT C NEURAL INFORM, P218
   Zhang JM, 2022, IEEE T SOFTWARE ENG, V48, P1, DOI 10.1109/TSE.2019.2962027
   Zheng Z, 2022, IEEE T RELIAB, V71, P579, DOI 10.1109/TR.2022.3145381
   Zheng Z, 2020, IEEE T DEPEND SECURE, V17, P92, DOI 10.1109/TDSC.2017.2753803
   Zhong BT, 2019, ADV ENG INFORM, V40, P46, DOI 10.1016/j.aei.2019.02.009
   Zhou Z., 2023, Appl. Comput. Syst., V32, P1
   Zhu David Yu, 2011, Operating Systems Review, V45, P142, DOI 10.1145/1945023.1945039
   Zou Quan-chen W.R.-p., 2018, J. Tsinghua Univ. (Nat. Sci. Ed.), V58, P1079
NR 43
TC 0
Z9 0
U1 4
U2 4
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAY
PY 2024
VL 234
AR 103078
DI 10.1016/j.scico.2024.103078
EA JAN 2024
PG 11
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA JH1X1
UT WOS:001172193000001
DA 2024-08-05
ER

PT J
AU Costa, PA
   Leitao, J
   Psaras, Y
AF Costa, Pedro Akos
   Leitao, Joao
   Psaras, Yannis
TI IPFS requested content location service
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE IPFS; Web3; Distributed systems
AB This paper introduces the IPFS requested content location service, , a software service to monitor the operation of IPFS from the perspective of the content requested through IPFS gateways. The software is provided as a docker stack that consumes the logs of one or more IPFS gateways, extracts the CID of the requested content and the IP address of the requester, and queries the IPFS network for the providers of the content. The software also matches the IP addresses of the requesters and providers with their geographic location, and stores the results in a database for later analysis. The software has been used in our previous measurement study, published at DAIS'23, that analyzed the operation of IPFS from the perspective of the content requested through gateways.
C1 [Costa, Pedro Akos; Leitao, Joao] NOVALINCS, Lisbon, Portugal.
   [Costa, Pedro Akos; Leitao, Joao] NOVA Univ Lisbon, Lisbon, Portugal.
   [Psaras, Yannis] Protocol Labs, San Francisco, CA USA.
C3 Universidade Nova de Lisboa
RP Costa, PA (corresponding author), NOVALINCS, Lisbon, Portugal.; Costa, PA (corresponding author), NOVA Univ Lisbon, Lisbon, Portugal.
EM pah.costa@campus.fct.unl.pt
FU FCT/MCTES grant [SFRH/BD/144023/2019]
FX This work was partially supported by FCT/MCTES grant
   SFRH/BD/144023/2019.
CR Akos Costa P., 2022, RFM3 | Location of IPFS end users and requested content
   Cortes M., 2022, Ipfs cid hoarder
   Costa Pedro Akos, 2023, Distributed Applications and Interoperable Systems: 23rd IFIP WG 6.1 International Conference, DAIS 2023, Held as Part of the 18th International Federated Conference on Distributed Computing Techniques, DisCoTec 2023, Proceedings. Lecture Notes in Computer Science (13909), P20, DOI 10.1007/978-3-031-35260-7_2
   Costa Pedro Akos, 2023, Zenodo, DOI 10.5281/ZENODO.7850384
   Korpal G., 2022, Tech. rep., DOI [10.36227/techrxiv.19727734.v1, DOI 10.36227/TECHRXIV.19727734.V1]
   MaxMind, 2022, Maxmind-geolite2 free geolocation data
   Maymounkov P, 2002, LECT NOTES COMPUT SC, V2429, P53
   Protocol Labs, 2022, libp2p: a modular network stack
   Trautwein D., 2022, Nebula
   Trautwein D, 2022, SIGCOMM '22: PROCEEDINGS OF THE 2022 ACM SIGCOMM 2022 CONFERENCE, P739, DOI 10.1145/3544216.3544232
   Vinet L, 2011, Arxiv, DOI [arXiv:1011.1669, 10.1007/978-3-540-49834-6, 10.1016/j.lisr.2007.11.003, DOI 10.1016/J.LISR.2007.11.003]
NR 11
TC 0
Z9 0
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC
PY 2024
VL 238
AR 103174
DI 10.1016/j.scico.2024.103174
PG 6
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA ZI6T0
UT WOS:001274712500001
OA hybrid
DA 2024-08-05
ER

PT J
AU Ait, A
   Izquierdo, JLC
   Cabot, J
AF Ait, Adem
   Izquierdo, Javier Luis Canovas
   Cabot, Jordi
TI HFCommunity: An extraction process and relational database to analyze
   Hugging Face Hub data
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Mining software repositories; Data analysis; Hugging Face
AB Social coding platforms such as GITHUB or GITLAB have become the de facto standard for developing Open -Source Software (OSS) projects. With the emergence of Machine Learning (ML), platforms specifically designed for hosting and developing ML -based projects have appeared, being HUGGING FACE HUB (HFH) one of the most popular ones. HFH aims at sharing datasets, pre-trained ML models and the applications built with them. With over 400 K repositories, and growing fast, HFH is becoming a promising source of empirical data on all aspects of ML project development. However, apart from the API provided by the platform, there are no easy-to-use solutions to collect the data, nor prepackaged datasets to explore the different facets of HFH. We present HFCOMMUNITY, an extraction process for HFH data and a relational database to facilitate an empirical analysis on the growing number of ML projects.
C1 [Ait, Adem; Izquierdo, Javier Luis Canovas] IN3 UOC, Barcelona, Spain.
   [Cabot, Jordi] Univ Luxembourg, Luxembourg Inst Sci & Technol, Esch Sur Alzette, Luxembourg.
C3 University of Luxembourg; Luxembourg Institute of Science & Technology
RP Ait, A (corresponding author), IN3 UOC, Barcelona, Spain.
EM aait_mimoune@uoc.edu; jcanovasi@uoc.edu; jordi.cabot@list.lu
RI Ait, Adem/KSL-8915-2024
OI Ait Fonolla, Adem/0000-0002-5334-9041
FU MCIN/AEI [TED2021-130331B-I00]; Luxembourg National Research Fund PEARL
   program;  [16544475]
FX This work is part of the project TED2021-130331B-I00 funded by
   MCIN/AEI/10.13039/501100011033; and BESSER, funded by the Luxembourg
   National Research Fund PEARL program, grant agreement 16544475.
CR Ait A, 2023, Soft Anal Evol Reeng, P728, DOI 10.1109/SANER56733.2023.00080
   Ait A, 2022, IEEE WORK CONF MIN S, P365, DOI 10.1145/3524842.3527941
   Castaño J, 2023, Arxiv, DOI arXiv:2305.11164
   Giner-Miguelez J, 2022, ACM/IEEE 25TH INTERNATIONAL CONFERENCE ON MODEL DRIVEN ENGINEERING LANGUAGES AND SYSTEMS, MODELS 2022 COMPANION, P22, DOI 10.1145/3550356.3559087
   Gonzalez D, 2020, IEEE WORK CONF MIN S, P431, DOI 10.1145/3379597.3387473
   Gousios G, 2013, IEEE WORK CONF MIN S, P233, DOI 10.1109/MSR.2013.6624034
   Jiang WX, 2023, Arxiv, DOI arXiv:2303.02552
   Jobst A, 2022, LECT NOTES COMPUT SC, V13381, P662, DOI 10.1007/978-3-031-10548-7_48
   Rogers E. M., 2003, Diffusion of innovations, V5a, DOI DOI 10.2307/2573300
   Subramanian VN, 2020, PROC INT CONF SOFTW, P116, DOI 10.1145/3377812.3382165
NR 10
TC 0
Z9 0
U1 2
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAY
PY 2024
VL 234
AR 103079
DI 10.1016/j.scico.2024.103079
EA JAN 2024
PG 5
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA HW0Z4
UT WOS:001162440400001
OA hybrid
DA 2024-08-05
ER

PT J
AU Cui, ZQ
   Jin, HC
   Chen, X
   Wang, RC
   Liu, XL
AF Cui, Zhanqi
   Jin, Haochen
   Chen, Xiang
   Wang, Rongcun
   Liu, Xiulei
TI DPFuzz: A fuzz testing tool based on the guidance of defect prediction
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Fuzz testing; Defect prediction; Defect proneness analysis; Code
   features
AB Fuzz testing is an automated testing technique that is recognized for its efficiency and scalability. Despite its advantages, the growing complexity and scale of software has made testing software adequately increasingly challenging. If fuzz testing can prioritize resources for modules with higher defect proneness, it can effectively enhance its defect detection performance. In this paper, we introduce DPFuzz, a tool for prioritizing the resource allocation of fuzz testing. DPFuzz guides fuzz testing by calculating the fitness score, which is based on the coverage of modules with different defect proneness. DPFuzz also demonstrates the practicability of using defect prediction in software quality assurance and has confirmed its excellent defect detection performance through experiments.
C1 [Cui, Zhanqi; Jin, Haochen; Liu, Xiulei] Beijing Informat Sci & Technol Univ, Sch Comp Sci, Beijing, Peoples R China.
   [Chen, Xiang] Nantong Univ, Sch Informat Sci & Technol, Nantong, Peoples R China.
   [Wang, Rongcun] China Univ Min & Technol, Sch Comp Sci & Technol, Xuzhou, Peoples R China.
C3 Beijing Information Science & Technology University; Nantong University;
   China University of Mining & Technology
RP Liu, XL (corresponding author), Beijing Informat Sci & Technol Univ, Sch Comp Sci, Beijing, Peoples R China.
EM czq@bistu.edu.cn; jinhaochen0325@bistu.edu.cn;
   jinhaochen0325@bistu.edu.cn; rcwang@cumt.edu.cn; liuxiulei@bistu.edu.cn
FU Open Foundation of Beijing Institute of Control Engineering
   [LHCESET202307]; Beijing Information Science and Technology University
   "Qin-Xin Talent" Cultivation Project [QXTCP B202406]
FX <B>Acknowledgements</B> This work was supported in part by the Open
   Foundation of Beijing Institute of Control Engineering (LHCESET202307) ,
   and the Beijing Information Science and Technology University "Qin-Xin
   Talent" Cultivation Project (No. QXTCP B202406) .
CR Arcuri A, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P1, DOI 10.1145/1985793.1985795
   Bohme M., 2016, Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security. CCS'16. Vienna, P1032, DOI [DOI 10.1145/2976749.2978428, 10.1145/2976749.2978428]
   Böhme M, 2017, CCS'17: PROCEEDINGS OF THE 2017 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P2329, DOI 10.1145/3133956.3134020
   Fioraldi A., 2020, 14 USENIX WORKSHOP O
   Fukushima T., 2014, P 11 WORK C MIN SOFT, P172, DOI DOI 10.1145/2597073.2597075
   Giray G, 2023, J SYST SOFTWARE, V195, DOI 10.1016/j.jss.2022.111537
   Goyal Jayanti, 2022, Second International Conference on Sustainable Technologies for Computational Intelligence: Proceedings of ICTSCI 2021. Advances in Intelligent Systems and Computing (1235), P233, DOI 10.1007/978-981-16-4641-6_20
   Hall T, 2012, IEEE T SOFTWARE ENG, V38, P1276, DOI 10.1109/TSE.2011.103
   Halstead M.H., 1977, Elements of Software Science (Operating and Programming Systems Series
   Hosseini S, 2019, IEEE T SOFTWARE ENG, V45, P111, DOI 10.1109/TSE.2017.2770124
   Lemieux C, 2018, IEEE INT CONF AUTOM, P475, DOI 10.1145/3238147.3238176
   Lessmann S, 2008, IEEE T SOFTWARE ENG, V34, P485, DOI 10.1109/TSE.2008.35
   McCabe T. J., 1976, IEEE Transactions on Software Engineering, VSE-2, P308, DOI 10.1109/TSE.1976.233837
   MCDONALD M., 2007, PRACTICAL GUIDE DEFE
   MILLER BP, 1990, COMMUN ACM, V33, P32, DOI 10.1145/96267.96279
   Perera A, 2023, IEEE T SOFTWARE ENG, V49, P131, DOI 10.1109/TSE.2022.3147008
   Perera A, 2020, IEEE INT CONF AUTOM, P448, DOI 10.1145/3324884.3416612
   Vargha A, 2000, J EDUC BEHAV STAT, V25, P101, DOI 10.3102/10769986025002101
   Xiao XS, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P611, DOI 10.1145/1985793.1985876
NR 19
TC 0
Z9 0
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC
PY 2024
VL 238
AR 103170
DI 10.1016/j.scico.2024.103170
PG 5
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA ZZ4I7
UT WOS:001279090700001
DA 2024-08-05
ER

PT J
AU Namayala, PP
   Kondo, TS
AF Namayala, Phesto P.
   Kondo, Tabu S.
TI Application of fuzzy Delphi technique to identify analytical lenses for
   determining the preparation of free and open source software projects
   for user experience maturity
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Free and open-source software; User experience; Analytical lenses;
   Maturity; Preparation; Fuzzy delphi method
ID DECISION-MAKING; USABILITY WORK; UX EVALUATION; SYSTEMS; MODEL;
   ADOPTION; INDUSTRY; DESIGN; COOPERATION; PERIPHERY
AB User eXperience (UX) significantly influences the success of free and open source software (FOSS) projects and is measured using UX capability maturity models (UXCMMs). Every organization desires higher levels of UX maturity; however, it requires upfront preparations and process quality control. Harmonizing processes and analytical lenses for determining preparation for UX maturity are still challenging, and studies to create them are limited. The analysis is ad hoc and based on the actors ' will and experiences. This study proposes and validates analytical lenses. Findings show that UX experts agreed that the lenses could be used with a consensus percentage of 81 %, the threshold value (d) = 0.112, and crisp values greater than alpha-cut = 0.5. On validation, 47.57 % of stakeholders agreed, and 52.43 % strongly agreed they were relevant. Results help evaluate the status quo and change culture and policies toward ideal preparation. Two areas are suggested for future research.
C1 [Namayala, Phesto P.] Mbeya Univ Sci & Technol, Dept Informat Syst & Technol, POB 131, Mbeya, Tanzania.
   [Kondo, Tabu S.] Univ Dodoma, Dept Comp Sci & Engn, Dodoma, Tanzania.
RP Namayala, PP (corresponding author), Mbeya Univ Sci & Technol, Dept Informat Syst & Technol, POB 131, Mbeya, Tanzania.
EM phesto.namayala@gmail.com
OI Namayala, Phesto P./0000-0001-9396-376X; Kondo, Tabu
   S./0000-0002-0222-4951
FU College of Informatics and Virtual Education (CIVE) of the University of
   Dodoma (UDOM); College of Information and Communication Technology
   (CoICT) of Mbeya University of Science and Technology (MUST)
FX The authors acknowledge the support from the College of Informatics and
   Virtual Education (CIVE) of the University of Dodoma (UDOM) and the
   College of Information and Communication Technology (CoICT) of Mbeya
   University of Science and Technology (MUST) . Nevertheless, the study
   would like to acknowledge support from other independent reviewers who
   have helped accomplish this work .
CR Abramova V., 2016, Journal of Information Systems Engineering Management, V1, P177, DOI 10.20897/lectito.201633
   Ahoniemi T., 2020, IFIP Advances in Information and Communication Technology, V582, DOI [10.1007/978-3-030-47240-514, DOI 10.1007/978-3-030-47240-514]
   Alghawli ASA, 2022, INT J ADV COMPUT SC, V13, P680
   Allen D, 2011, J AM SOC INF SCI TEC, V62, P2165, DOI 10.1002/asi.21601
   AlMheiri NH, 2018, 2018 FIFTH HCT INFORMATION TECHNOLOGY TRENDS (ITT): EMERGING TECHNOLOGIES FOR ARTIFICIAL INTELLIGENCE, P71, DOI 10.1109/CTIT.2018.8649506
   Alves R, 2014, PROCEEDINGS OF THE NORDICHI'14: THE 8TH NORDIC CONFERENCE ON HUMAN-COMPUTER INTERACTION: FUN, FAST, FOUNDATIONAL, P93, DOI 10.1145/2639189.2641208
   Amrit C, 2010, J INF TECHNOL, V25, P216, DOI 10.1057/jit.2010.7
   Amrollahi Alireza, 2014, International Journal of Open Source Software and Processes, V5, P50, DOI 10.4018/ijossp.2014010103
   Anderson N., 2022, UXR Maturity: move to a more advanced level in your org
   Androutsellis-Theotokis Stephanos, 2010, Foundations and Trends in Technology, Information and Operations Management, V4, P187, DOI 10.1561/0200000026
   [Anonymous], 2019, Desktop operating system market share worldwide, P1
   [Anonymous], 2012, What Is Free Software? Foundation website
   [Anonymous], 2010, Open Source Definition: Version 1.9
   Ardito C, 2014, COMPUTER, V47, P86, DOI 10.1109/MC.2014.355
   Ardito C, 2014, INT J HUM-COMPUT ST, V72, P542, DOI 10.1016/j.ijhcs.2013.10.004
   Babelova Z.G., 2018, Qual. Prod. Improv., V09, P16, DOI [10.30657/qpi.2018.09.02, DOI 10.30657/QPI.2018.09.02]
   Bach P., 2010, Interactions, V17, P70, DOI [10.1145/1744161.1744177, DOI 10.1145/1744161.1744177]
   Bach PM, 2009, INT FED INFO PROC, V299, P237
   Bahamdain SS, 2015, PROCEDIA COMPUT SCI, V56, P459, DOI 10.1016/j.procs.2015.07.236
   Barcellini F, 2014, HUM-COMPUT INTERACT, V29, P205, DOI 10.1080/07370024.2013.812409
   Baum D., 2013, Oracle White Paper
   Benson Tim, 2016, J Innov Health Inform, V23, P488, DOI 10.14236/jhi.v23i2.866
   Berendes S, 2022, RENEW SUST ENERG REV, V159, DOI 10.1016/j.rser.2022.112174
   Bockle M., 2019, Towards a framework for the classification of usability issues, P610, DOI [10.1007/978-3-030-29390-147, DOI 10.1007/978-3-030-29390-147]
   Bodjanova S, 2006, FUZZY SET SYST, V157, P879, DOI 10.1016/j.fss.2005.10.015
   Booker JM, 2004, RELIAB ENG SYST SAFE, V85, P331, DOI [10.1016/j.ress.2004.03.021, 10.1016/j.ress-2004.03.021]
   Bruun A, 2018, NORDICHI'18: PROCEEDINGS OF THE 10TH NORDIC CONFERENCE ON HUMAN-COMPUTER INTERACTION, P352, DOI 10.1145/3240167.3240213
   Budgen D., 2006, 28th International Conference on Software Engineering Proceedings, P1051, DOI 10.1145/1134285.1134500
   Buis EEG, 2023, INFORM SOFTWARE TECH, V154, DOI 10.1016/j.infsof.2022.107086
   Butler S, 2022, J SYST SOFTWARE, V186, DOI 10.1016/j.jss.2021.111152
   Bwalya T., 2019, Zambia J. Library & Inf. Sci. (ZAJLIS), V3, P48
   Cajander A., 2006, P 4 NORD C HUM COMP, V189, P38, DOI [10.1145/1182475.1182480, DOI 10.1145/1182475.1182480]
   Carillo KDA, 2014, P ANN HICSS, P3276, DOI 10.1109/HICSS.2014.406
   Chang PL, 2011, INT J HYDROGEN ENERG, V36, P14172, DOI 10.1016/j.ijhydene.2011.05.045
   Chapman L, 2014, LECT NOTES COMPUT SC, V8520, P12, DOI 10.1007/978-3-319-07638-6_2
   Chen CT, 2000, FUZZY SET SYST, V114, P1, DOI 10.1016/S0165-0114(97)00377-1
   Chen S.-J., 1992, Fuzzy Multiple Attribute Decision Making Methods, P289, DOI DOI 10.1007/978-3-642-46768-4_5
   Cheng CH, 2002, EUR J OPER RES, V142, P174, DOI 10.1016/S0377-2217(01)00280-6
   Cheng JH, 2018, CHI 2018: EXTENDED ABSTRACTS OF THE 2018 CHI CONFERENCE ON HUMAN FACTORS IN COMPUTING SYSTEMS, DOI 10.1145/3170427.3188467
   Chowdhury A., 2023, Strategizing total user experience design for better business outcome, P587, DOI [10.1007/978-981-19-4606-654, DOI 10.1007/978-981-19-4606-654]
   Christian J, 2021, R&D MANAGE, V51, P87, DOI 10.1111/radm.12428
   Chu HC, 2008, EXPERT SYST APPL, V34, P2826, DOI 10.1016/j.eswa.2007.05.034
   Anchahua MC, 2018, 2018 CONGRESO INTERNACIONAL DE INNOVACION Y TENDENCIAS EN INGENIERIA (CONIITI)
   Cohen Y., 2022, How to tell if an organization is ready for a true UX culture?
   Colombo MG, 2014, RES POLICY, V43, P891, DOI 10.1016/j.respol.2013.08.015
   Coral C, 2017, SYSTEMS-BASEL, V5, DOI 10.3390/systems5010020
   Crowston K, 2012, ACM COMPUT SURV, V44, DOI 10.1145/2089125.2089127
   Dana W., 2023, Leveraging AI to Enhance UX Design: Personalization, Predictive Modeling, Natural Language Processing, and Efficiency
   Dhir A, 2013, J UNIVERS COMPUT SCI, V19, P1175
   Dhir S, 2017, STRATEG CHANG, V26, P363, DOI 10.1002/jsc.2137
   Diaz E., 2019, Proposal of usability metrics to evaluate e-commerce websites, P85, DOI [10.1007/978-3-030-23535-26, DOI 10.1007/978-3-030-23535-26]
   Donahole S., 2021, How Artificial Intelligence Is Impacting UX Design
   Eleken, 2024, User experience maturity model. grow to become user-centered company
   Faber Jorge, 2014, Dental Press J. Orthod., V19, P27
   Fard A., 2023, Medium,
   Farooq MS, 2014, PLOS ONE, V9, DOI 10.1371/journal.pone.0088941
   Ferreira J, 2011, SOFTWARE PRACT EXPER, V41, P963, DOI 10.1002/spe.1012
   Franco-Bedoya O, 2017, INFORM SOFTWARE TECH, V91, P160, DOI 10.1016/j.infsof.2017.07.007
   FSF, 2011, Philosophy of the GNU project
   Garcia A, 2019, LECT NOTES BUS INF P, V355, P102, DOI 10.1007/978-3-030-19034-7_7
   Ghasemi A, 2012, INT J ENDOCRINOL MET, V10, P486, DOI 10.5812/ijem.3505
   Ghazi AN, 2019, IEEE ACCESS, V7, P24703, DOI 10.1109/ACCESS.2018.2881041
   Gibbons S., 2023, UX-Stakeholder Engagement 101
   Gibbons S., 2021, Four Factors in UX Maturity
   Gilbert David, 2021, i-com: Journal of Interactive Media, V20, P105, DOI 10.1515/icom-2020-0029
   Goodhue DL, 2012, MIS QUART, V36, P981
   Guerino G.C., 2023, Towards the Ux support to software startups: on the relationship of professional expertise and Ux work in the Brazilian scenario, DOI [10.2139/ssrn.4640064, DOI 10.2139/SSRN.4640064]
   Guo F., 2012, More Than Usability: The Four Elements of User Experience, Part I:: UXmatters
   Habibi A., 2015, Asian Journal of Research in Business Economics and Management, V5, P130, DOI [DOI 10.5958/2249-7307.2015.00036.5, 10.5958/2249-7307.2015.00036.5]
   Hall J., 2014, Usability Themes in Open Source Software
   Hanson N., 2017, UX Maturity Models-A Collection | Natalie Hanson, Nathaliehanson.Com
   Hasan L.A., 2015, P INT C INT INF PROC, P1, DOI [10.1145/2816839.2816861, DOI 10.1145/2816839.2816861]
   Hassenzahl M, 2006, BEHAV INFORM TECHNOL, V25, P91, DOI 10.1080/01449290500330331
   Hassenzahl Marc, 2021, i-com: Journal of Interactive Media, V20, P197, DOI 10.1515/icom-2021-0034
   Hassenzahl M, 2010, SYNTHESIS LECT HUMAN, V3, P1, DOI DOI 10.2200/S00261ED1V01Y201003HCI008
   Hedberg H., 2007, 1 INT WORKSH EM TREN, P2, DOI [10.1109/FLOSS.2007.2, DOI 10.1109/FLOSS.2007.2]
   Hedberg H, 2009, INT FED INFO PROC, V299, P251
   Hertzum M, 2019, INFORM PROCESS MANAG, V56, P624, DOI 10.1016/j.ipm.2019.01.001
   Hokkanen L., 2016, P ACADEMICMINDTREK 2, P59, DOI [10.1145/2994310.2994371, DOI 10.1145/2994310.2994371]
   Rodríguez NH, 2017, IBER CONF INF SYST
   Hussein I., 2012, P SE AS NETW ERG SOC, P1
   Hussein I, 2014, INT CONF USER SCI, P62, DOI 10.1109/IUSER.2014.7002678
   Iivari J, 1998, INFORM SYST RES, V9, P164, DOI 10.1287/isre.9.2.164
   Iivari N, 2010, J ORGAN END USER COM, V22, P40, DOI 10.4018/joeuc.2010070103
   In J, 2017, KOREAN J ANESTHESIOL, V70, P601, DOI 10.4097/kjae.2017.70.6.601
   Inal Y, 2020, J USABILITY STUD, V15, P210
   Inal Y, 2016, PAMUKKALE U J ENG SC, V22, P384, DOI 10.5505/pajes.2015.83792
   Interaction Design Foundation-IxDF, 2024, What is UX Maturity
   ISHIKAWA A, 1993, FUZZY SET SYST, V55, P241, DOI 10.1016/0165-0114(93)90251-C
   ISO/IEC, 2019, Int. Standard, V2, P1
   Isomursu Minna, 2012, Proceedings of the 2012 Agile Conference, P1, DOI 10.1109/Agile.2012.10
   Jiang JY, 2017, SIGIR'17: PROCEEDINGS OF THE 40TH INTERNATIONAL ACM SIGIR CONFERENCE ON RESEARCH AND DEVELOPMENT IN INFORMATION RETRIEVAL, P1173, DOI 10.1145/3077136.3080753
   Johnston K., 2013, International Journal of Education and Development using Information and Communication Technology, V9, P64
   Jokela T, 2006, BEHAV INFORM TECHNOL, V25, P263, DOI 10.1080/01449290500168079
   Jokela T., 2010, Usability maturity models: making your company user-centered. user experience-the magazine of the user experience professionals association.
   Jokonya O., 2013, P 19 AM C INF SYST A, P109
   Kamariotou M., 2018, Int. J. Decis. Support Syst., V3, P53, DOI [DOI 10.1504/IJDSS.2018.10015479, 10.1504/ijdss.2018.10015479]
   Kashfi P, 2019, J SYST SOFTWARE, V154, P37, DOI 10.1016/j.jss.2019.03.066
   Kashfi P, 2017, PEERJ COMPUT SCI, DOI 10.7717/peerj-cs.130
   Kazimierczak M., 2020, Open source software in the European Union, DOI [10.2814/866548, DOI 10.2814/866548]
   Kieffer S., 2016, Proceedings of the 31st Annual ACM Symposium on Applied Computing - SAC'16, P205, DOI [DOI 10.1145/2851613, 10.1145/2851613.2851912]
   Kieffer S, 2020, COMM COM INF SC, V1182, P128, DOI 10.1007/978-3-030-41590-7_6
   Kim Hae-Young, 2013, Restor Dent Endod, V38, P52
   Kitchenham B., 2007, Guidelines for performing systematic literature reviews in software engineering, VVolume 2, DOI [10.1145/1134285.1134500, DOI 10.1145/1134285.1134500]
   Kitchenham B, 2010, INFORM SOFTWARE TECH, V52, P792, DOI 10.1016/j.infsof.2010.03.006
   Klotins E, 2019, EMPIR SOFTW ENG, V24, P68, DOI 10.1007/s10664-018-9620-y
   Komischke T, 2009, LECT NOTES COMPUT SC, V5619, P221, DOI 10.1007/978-3-642-02806-9_26
   Kou YB, 2018, PROCEEDINGS OF THE 2018 ACM INTERNATIONAL CONFERENCE ON SUPPORTING GROUP WORK, GROUP 2018, P322, DOI 10.1145/3148330.3148352
   Kreitzberg C., 2015, UX strategy and strategic UX
   Kurosu M., 2017, Human-Computer Interaction. User Interface Design, Development and Multimodality, V10271, DOI [10.1007/978-3-319-58071-5, DOI 10.1007/978-3-319-58071-5]
   Kuusinen K., 2019, From startup to scaleup: an interview study of the development of user experience work in a data-intensive company, P3, DOI [10.1007/978-3-030-05909-51, DOI 10.1007/978-3-030-05909-51]
   Kuusinen K, 2015, LECT NOTES COMPUT SC, V9298, P27, DOI 10.1007/978-3-319-22698-9_3
   Kuwata Y, 2014, PROCEDIA COMPUT SCI, V35, P1711, DOI 10.1016/j.procs.2014.08.264
   Lacerda TC, 2018, COMPUT STAND INTER, V55, P95, DOI 10.1016/j.csi.2017.06.001
   Lallemand C, 2015, COMPUT HUM BEHAV, V43, P35, DOI 10.1016/j.chb.2014.10.048
   Law E.L.C., 2012, CEUR WORKSHOP P, V922, P58
   Law ELC, 2014, INT J HUM-COMPUT ST, V72, P523, DOI 10.1016/j.ijhcs.2014.03.003
   Lee CS, 2021, AGRICULTURE-BASEL, V11, DOI 10.3390/agriculture11100924
   Llerena L., 2018, P TRENDS E LEARN, Vi, P13, DOI [10.5772/intechopen.74862, DOI 10.5772/INTECHOPEN.74862]
   MacDonald CM, 2022, INT J HUM-COMPUT INT, V38, P1064, DOI 10.1080/10447318.2021.1979811
   MacDonald CM, 2019, PROCEEDINGS OF THE 2019 ACM DESIGNING INTERACTIVE SYSTEMS CONFERENCE (DIS 2019), P187, DOI 10.1145/3.322276.3322346
   Manakandan S K, 2017, Med J Malaysia, V72, P228
   Marois P., 2022, P EUR C INF SYST ECI
   Marsden N, 2018, CHI 2018: EXTENDED ABSTRACTS OF THE 2018 CHI CONFERENCE ON HUMAN FACTORS IN COMPUTING SYSTEMS, DOI 10.1145/3170427.3188501
   Mashapa J., 2013, A Model for Managing User Experience
   Mashapa J, 2013, LECT NOTES COMPUT SC, V8118, P660
   Masson A.L.L., 2017, P CHI C EXT ABSTRACT, P1135, DOI [10.1145/3027063, DOI 10.1145/3027063]
   Mockus A, 2002, ACM T SOFTW ENG METH, V11, P309, DOI 10.1145/567793.567795
   Mockus A., 2000, Proceedings of the 2000 International Conference on Software Engineering. ICSE 2000 the New Millennium, P263, DOI 10.1109/ICSE.2000.870417
   Mohamed Yusoff A.F., 2021, ASIAN J U ED, V17, P292, DOI [10.24191/ajue.v17i1.12625, DOI 10.24191/AJUE.V17I1.12625]
   Molich R., 2021, UX maturity for UX professionals
   Molich R., 2022, User Experience Magazine
   Monteiro E.L., 2020, ISys-Braz. J. Inf. Syst., V13, P110, DOI DOI 10.5753/ISYS.2020.761
   Moran K., 2021, Quantifying UX Improvements: A Case Study
   Mulder I., 2002, Educational Technology Society, V5, P35
   MURRAY TJ, 1985, HUM SYST MANAGE, V5, P76
   MURRY JW, 1995, REV HIGH EDUC, V18, P423, DOI 10.1353/rhe.1995.0008
   Mustapha R., 2021, Psychol. Educ. J., V58, P5681, DOI [10.17762/pae.v58i1.1972, DOI 10.17762/PAE.V58I1.1972]
   Nagle F., 2020, Vulnerabilities in the core preliminary report and census II of open source software
   Nakakoji K., 2002, Evolution patterns of open-source software systems and communities, V76, DOI [10.1145/512035.512055, DOI 10.1145/512035.512055]
   Namayala P, 2023, BEHAV INFORM TECHNOL, V42, P596, DOI 10.1080/0144929X.2022.2032348
   Namayala PP, 2023, INT J HUM-COMPUT INT, DOI 10.1080/10447318.2023.2262270
   Neeman P., 2012, Organizational Challenges for UX Professionals
   Nguyen T., 2020, Improving students' Ux in online learning platform
   Nichols D. M., 2006, Software Process Improvement and Practice, V11, P149, DOI 10.1002/spip.256
   Patiño-Toro ON, 2022, IEEE REV IBEROAM TEC, V17, P185, DOI 10.1109/RITA.2022.3166950
   Okoli C, 2004, INFORM MANAGE-AMSTER, V42, P15, DOI 10.1016/j.im.2003.11.002
   Oreku GS, 2013, 2013 IST-AFRICA CONFERENCE AND EXHIBITION (IST-AFRICA)
   Otchere W., 2022, How Your Organisation Can Prepare For Usability Testing
   Page MJ, 2021, REV ESP CARDIOL, V74, P790, DOI [10.1016/j.rec.2021.07.010, 10.1016/j.recesp.2021.06.016]
   Paré G, 2013, INFORM MANAGE-AMSTER, V50, P207, DOI 10.1016/j.im.2013.03.003
   PAULK MC, 1993, IEEE SOFTWARE, V10, P18, DOI 10.1109/52.219617
   Pavliscak P., 2014, Choosing the Right Metrics For User Experience
   Pernice K., 2021, PM and UX Have Markedly Different Views of Their Job Responsibilities
   Pernice Kara, 2021, 6 LEVELS UX MATURITY
   Petersen K, 2018, IEEE T SOFTWARE ENG, V44, P237, DOI 10.1109/TSE.2017.2677909
   Petrov D., 2018, P 27 INT C INF SYST
   Pettersson I, 2018, PROCEEDINGS OF THE 2018 CHI CONFERENCE ON HUMAN FACTORS IN COMPUTING SYSTEMS (CHI 2018), DOI 10.1145/3173574.3174035
   Pezer M, 2017, 2017 40TH INTERNATIONAL CONVENTION ON INFORMATION AND COMMUNICATION TECHNOLOGY, ELECTRONICS AND MICROELECTRONICS (MIPRO), P882, DOI 10.23919/MIPRO.2017.7973546
   Polit D.F., 2017, Nursing research: Generating and assessing evidence for nursing practice, DOI DOI 10.1016/0030-5073(76)90030-1
   Prasad D., 2013, Int. J. Eng., V3, P2295
   Prete M.I., 2015, Proceedings of the Academy of Marketing Conference-The Magic in Marketing, P1, DOI [10.1145/2815782.2815807, DOI 10.1145/2815782.2815807]
   Pretorius M.C., 2014, P SO AFR I COMP SCI, P166, DOI [10.1145/2664591.2664625, DOI 10.1145/2664591.2664625]
   Primadani L, 2019, Assessing the UX Maturity Stage of Your Organization
   Rajanen M, 2023, COMPUTER, V56, P106, DOI 10.1109/MC.2022.3219634
   Rajanen M, 2013, PROCEEDINGS OF THE 17TH INTERNATIONAL ACADEMIC MINDTREK CONFERENCE, P67
   Rajanen M, 2015, IFIP ADV INF COMM TE, V451, P58, DOI 10.1007/978-3-319-17837-0_6
   Raymond E., 1999, Knowledge, Technology Policy, V12, P23, DOI [10.1007/s12130-999-1026-0, DOI 10.1007/S12130-999-1026-0]
   Raza Arif, 2010, Advances in Software Engineering, DOI 10.1155/2010/517532
   Raza A, 2012, COMPUT HUM BEHAV, V28, P1109, DOI 10.1016/j.chb.2012.01.018
   Sánchez VR, 2020, IEEE ACCESS, V8, P94594, DOI 10.1109/ACCESS.2020.2993248
   Robles G, 2019, IEEE SOFTWARE, V36, P12, DOI 10.1109/MS.2019.2933672
   Rose E.J., 2020, P 38 ACM INT C DES C, P1, DOI [10.1145/3380851.3416774, DOI 10.1145/3380851.3416774]
   Roto V., 2010, User Experience White Paper, P12
   Rukonic L., 2019, LNCS, V11586, P346, DOI [10.1007/978-3-030-23535-226, DOI 10.1007/978-3-030-23535-226]
   Rullani F, 2013, RES POLICY, V42, P941, DOI 10.1016/j.respol.2012.10.008
   Saad J, 2021, INFORM SOFTWARE TECH, V140, DOI 10.1016/j.infsof.2021.106688
   Sakhardande P., 2014, User Experience Magazine, User Experience, The Magazine of the User Experience Professionals Association
   Salminen J, 2024, INFORM TECHNOL MANAG, V25, P173, DOI 10.1007/s10799-022-00373-9
   Salminen J, 2021, EXTENDED ABSTRACTS OF THE 2021 CHI CONFERENCE ON HUMAN FACTORS IN COMPUTING SYSTEMS (CHI'21), DOI 10.1145/3411763.3451763
   Sauro J., 2016, Practical Statistics for User Research, V2nd
   Schmidt R, 2001, J MANAGE INFORM SYST, V17, P5, DOI 10.1080/07421222.2001.11045662
   Schober P, 2018, ANESTH ANALG, V126, P1763, DOI 10.1213/ANE.0000000000002864
   Shekgola M., 2021, J. South Afr. Soc. Arch., V54, P43, DOI [10.4314/jsasa.v54i1.4, DOI 10.4314/JSASA.V54I1.4]
   Silva DG., 2023, J OPEN INNOV TECHNOL, V9, P21, DOI 10.1016/j.joitmc.2023.01.002
   Souley Boukari., 2013, W AFRICAN J IND ACAD, V4, P62
   Spillers F., 2022, UX Maturity models: pros and cons
   Spinellis D, 2019, COMPUTER, V52, P103, DOI 10.1109/MC.2019.2940809
   Spinellis D, 2012, J SYST SOFTWARE, V85, P666, DOI 10.1016/j.jss.2011.09.037
   Srinivasa K.G, 2017, Advances in Computer and Electrical Engineering, V1st
   Steinmacher I, 2017, J INTERNET SERV APPL, V8, DOI 10.1186/s13174-017-0069-9
   Tang CW, 2010, HIGH EDUC, V60, P269, DOI 10.1007/s10734-009-9299-5
   Terry M, 2010, CHI2010: PROCEEDINGS OF THE 28TH ANNUAL CHI CONFERENCE ON HUMAN FACTORS IN COMPUTING SYSTEMS, VOLS 1-4, P999
   Thabane L, 2010, BMC MED RES METHODOL, V10, DOI 10.1186/1471-2288-10-1
   Tsou M.-H., 2011, Free and open source software for GIS education
   Twidale M.B., 2005, Proceedings of Thirty-Eighth Annual Hawaii International Conference on System Sciences, HICSS-38, P198, DOI DOI 10.1109/HICSS.2005.266
   Umm-e-Laila, 2017, PROCEDIA COMPUT SCI, V111, P348, DOI 10.1016/j.procs.2017.06.033
   Vallerand J, 2017, ENTERP INF SYST-UK, V11, P859, DOI 10.1080/17517575.2015.1091951
   Van den Bossche P, 2011, INSTR SCI, V39, P283, DOI 10.1007/s11251-010-9128-3
   Van Tyne S, 2009, LECT NOTES COMPUT SC, V5619, P635, DOI 10.1007/978-3-642-02806-9_74
   Vermeeren A.P., 2010, P 6 NORD C HUM COMP, P521, DOI [DOI 10.1145/1868914.1868973, 10.1145/1868914.1868973]
   Von-Wangenheim C.G.V., 2010, P 10 INT SPICE C SOF
   VonFange M., 2011, The Technology Innovation Management Review
   Wale-Kolade A, 2016, INTERACT COMPUT, V28, P437, DOI 10.1093/iwc/iwv016
   Wallach D., 2017, P LECT NOTES COMPUTE, P507, DOI [10.1007/978-3-319-58634-237, DOI 10.1007/978-3-319-58634-237]
   Wei KN, 2017, INFORM MANAGE-AMSTER, V54, P573, DOI 10.1016/j.im.2016.11.006
   Wohlin C., 2014, P 18 INT C EV ASS SO, P1, DOI [DOI 10.1145/2601248.2601268, 10.1145/2601248.2601268]
   Yang B, 2020, FRONT PSYCHOL, V11, DOI 10.3389/fpsyg.2020.595374
   Yang Q, 2016, DIS 2016: PROCEEDINGS OF THE 2016 ACM CONFERENCE ON DESIGNING INTERACTIVE SYSTEMS, P565
   Yeates N., 2015, The Future of Open Source is a Better User Experience
   Young SWH, 2020, INFORM TECHNOL LIBR, V39, DOI 10.6017/ital.v39i1.11787
   Zarour M, 2017, COGENT ENG, V4, DOI 10.1080/23311916.2017.1421006
   Zhao LY, 2010, J SOFTW MAINT EVOL-R, V22, P653, DOI 10.1002/smr.455
NR 213
TC 0
Z9 0
U1 1
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT
PY 2024
VL 237
AR 103136
DI 10.1016/j.scico.2024.103136
EA MAY 2024
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA TL1G7
UT WOS:001241320700001
DA 2024-08-05
ER

PT J
AU Iannopollo, A
   Incer, I
   Sangiovanni-Vincentelli, AL
AF Iannopollo, Antonio
   Incer, Inigo
   Sangiovanni-Vincentelli, Alberto L.
TI Synthesizing LTL contracts from component libraries using rich
   counterexamples
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Counter-example-guided inductive synthesis; Assume-guarantee contracts;
   Linear temporal logic; Specification decomposition
ID SPECIFICATION; CHALLENGES; DESIGN
AB We provide a method to synthesize an LTL Assume/Guarantee (A/G) specification, or contract, as an interconnection of elements from a library, each of which is also represented by an LTL A/G contract. Our approach, based on counterexample -guided inductive synthesis, leverages an off -the -shelf model checker to reason about infinite -length counterexamples and guarantee correctness. To increase scalability, we also introduce a novel concept of specification decomposition, based on contract projections; we show how it can be used to break down our synthesis problem into several simpler tasks, without reducing the size of the solution space. We test our technique on three industry -relevant case studies.
C1 [Iannopollo, Antonio; Incer, Inigo; Sangiovanni-Vincentelli, Alberto L.] Univ Calif Berkeley, Berkeley, CA 94720 USA.
   [Incer, Inigo] CALTECH, Pasadena, CA USA.
   [Iannopollo, Antonio] Pure Storage Inc, Santa Clara, CA 95054 USA.
C3 University of California System; University of California Berkeley;
   California Institute of Technology
RP Iannopollo, A (corresponding author), Univ Calif Berkeley, Berkeley, CA 94720 USA.; Iannopollo, A (corresponding author), Pure Storage Inc, Santa Clara, CA 95054 USA.
EM antonio@berkeley.edu
OI Incer, Inigo/0000-0001-7933-692X
CR Alur Rajeev, 2014, Hardware and Software: Verification and Testing. 10th International Haifa Verification Conference, HVC 2014. Proceedings: LNCS 8855, P75, DOI 10.1007/978-3-319-13338-6_7
   Alur R., 2017, SIGACT News, V48, P55, DOI [DOI 10.1145/3061640.3061652, 10.1145/3061640.3061652]
   Alur R, 2015, LECT NOTES COMPUT SC, V9207, P395, DOI 10.1007/978-3-319-21668-3_23
   Alur R, 2016, HSCC'16: PROCEEDINGS OF THE 19TH INTERNATIONAL CONFERENCE ON HYBRID SYSTEMS: COMPUTATION AND CONTROL, P215, DOI 10.1145/2883817.2883842
   [Anonymous], 2001, LNCS, DOI [DOI 10.1007/3-540-45449-7_11, DOI 10.1007/3-540-45449-711]
   [Anonymous], 1992, Ph.D. thesis
   Armando A, 2007, 20TH IEEE COMPUTER SECURITY FOUNDATIONS SYMPOSIUM (CSFS20), PROCEEDINGS, P385, DOI 10.1109/CSF.2007.24
   Benveniste A, 2018, FOUND TRENDS ELECTRO, V12, pI, DOI 10.1561/1000000053
   Benveniste A, 2008, LECT NOTES COMPUT SC, V5382, P200, DOI 10.1007/978-3-540-92188-2_9
   Bhatia A, 2010, IEEE INT CONF ROBOT, P2689, DOI 10.1109/ROBOT.2010.5509503
   Bloem R, 2010, LECT NOTES COMPUT SC, V6174, P425, DOI 10.1007/978-3-642-14295-6_37
   BRYANT RE, 1986, IEEE T COMPUT, V35, P677, DOI 10.1109/TC.1986.1676819
   Cavada R, 2014, LECT NOTES COMPUT SC, V8559, P334, DOI 10.1007/978-3-319-08867-9_22
   Cimatti A, 2012, EUROMICRO CONF PROC, P21, DOI 10.1109/SEAA.2012.68
   Clarke E, 2003, TIME-ICTL 2003: 10TH INTERNATIONAL SYMPOSIUM ON TEMPORAL REPRESENTATION AND REASONING AND FOURTH INTERNATIONAL CONFERENCE ON TEMPORAL LOGIC, PROCEEDINGS, P7
   Clarke EM, 1999, MODEL CHECKING, P1
   Cobleigh JM, 2003, LECT NOTES COMPUT SC, V2619, P331
   Dallal E, 2016, IEEE DECIS CONTR P, P5720, DOI 10.1109/CDC.2016.7799148
   Damm W, 2011, DES AUT TEST EUROPE, P1023
   de Alfaro L., 2001, Software Engineering Notes, V26, P109, DOI 10.1145/503271.503226
   Douglass BrucePowel., 2016, AGILE SYSTEMS ENG
   Doyen L., 2008, Proc. ACM IEEE Int. Conf. Embedded Software, P79, DOI DOI 10.1145/1450058.1450070
   Fainekos GE, 2009, AUTOMATICA, V45, P343, DOI 10.1016/j.automatica.2008.08.008
   Filiot E, 2011, FORM METHOD SYST DES, V39, P261, DOI 10.1007/s10703-011-0115-3
   Filiot E, 2009, LECT NOTES COMPUT SC, V5643, P263, DOI 10.1007/978-3-642-02658-4_22
   Filippidis Ioannis, 2016, 2016 IEEE Conference on Control Applications (CCA), P1030, DOI 10.1109/CCA.2016.7587949
   Filippidis I., 2018, Ph.D. thesis
   Filippidis I, 2016, P AMER CONTR CONF, P782, DOI 10.1109/ACC.2016.7525009
   Floyd Robert W., 1967, Mathematical Aspects of Computer Science, V19, P19
   Gastin P, 2001, LECT NOTES COMPUT SC, V2102, P53
   GRUMBERG O, 1994, ACM T PROGR LANG SYS, V16, P843, DOI 10.1145/177492.177725
   Gulwani S, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P62
   Gupta A, 2008, FORM METHOD SYST DES, V32, P285, DOI 10.1007/s10703-008-0050-0
   Henzinger TA, 2000, ICCAD - 2000 : IEEE/ACM INTERNATIONAL CONFERENCE ON COMPUTER AIDED DESIGN, P245, DOI 10.1109/ICCAD.2000.896481
   Henzinger TA, 1998, LECT NOTES COMPUT SC, V1427, P440, DOI 10.1007/BFb0028765
   HOARE CAR, 1969, COMMUN ACM, V12, P576, DOI 10.1145/363235.363259
   Holzmann GerardJ., 2018, Handbook of Model Checking, P153, DOI DOI 10.1007/978-3-319-10575-8_5
   Iannopollo A, 2019, SCI COMPUT PROGRAM, V171, P21, DOI 10.1016/j.scico.2018.10.003
   Iannopollo A, 2018, DES AUT TEST EUROPE, P1574, DOI 10.23919/DATE.2018.8342266
   Iannopollo A, 2014, DES AUT TEST EUROPE
   Incer I., 2022, Ph.D. dissertation
   JHA S., 2010, ICSE '10, DOI DOI 10.1145/1806799.1806833
   Jha S, 2017, ACTA INFORM, V54, P693, DOI 10.1007/s00236-017-0294-5
   Jha S, 2014, ELECTRON P THEOR COM, P84, DOI 10.4204/EPTCS.157.10
   Lamport L., 1983, Information Processing 83. Proceedings of the IFIP 9th World Computer Congress, P657
   Lamport Leslie, 2002, Specifying Systems: the TLA+ Language and Tools for Hardware and Software Engineers
   Lee EA, 1998, IEEE T COMPUT AID D, V17, P1217, DOI 10.1109/43.736561
   Lustig Y, 2009, LECT NOTES COMPUT SC, V5504, P395
   McMillan K., 1999, The SMV language
   MEYER B, 1992, COMPUTER, V25, P40, DOI 10.1109/2.161279
   Michalko R.G., 2006, U.S. Patent, Patent No. [US20060061213A1, 20060061213]
   Nuzzo Pierluigi, 2014, 2014 Twelfth ACM/IEEE Conference on Formal Methods and Models for Codesign (MEMOCODE), P104, DOI 10.1109/MEMCOD.2014.6961848
   Ozay N, 2011, IEEE DECIS CONTR P, P4841, DOI 10.1109/CDC.2011.6161470
   Pinto A, 2017, SYSTEMS ENG, V20, P220, DOI 10.1002/sys.21386
   Piterman N, 2006, LECT NOTES COMPUT SC, V3855, P364
   PNUELI A, 1989, CONFERENCE RECORD OF THE SIXTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P179, DOI 10.1145/75277.75293
   PNUELI A, 1990, ANN IEEE SYMP FOUND, P746
   Pnueli A., 1977, 18th Annual Symposium on Foundations of Computer Science, P46, DOI 10.1109/SFCS.1977.32
   Ramesh R, 2017, PROCEEDINGS SCF 2017: ACM SYMPOSIUM ON COMPUTATIONAL FABRICATION, DOI 10.1145/3083157.3083159
   Romeo II, 2018, Arxiv, DOI arXiv:1812.03923
   Romeo II, 2018, PROCEEDINGS OF THE 2018 16TH ACM/IEEE INTERNATIONAL CONFERENCE ON FORMAL METHODS AND MODELS FOR SYSTEM DESIGN (MEMOCODE), P67
   Sangiovanni-Vincentelli A, 2004, DES AUT CON, P409, DOI 10.1145/996566.996684
   Sangiovanni-Vincentelli A, 2007, P IEEE, V95, P467, DOI 10.1109/JPROC.2006.890107
   Sangiovanni-Vincentelli A, 2012, EUR J CONTROL, V18, P217, DOI 10.3166/EJC.18.217-238
   Seshia SA, 2015, P IEEE, V103, P2036, DOI 10.1109/JPROC.2015.2471838
   Sgroi M., 2002, Platform-based design methodologies for communication networks
   Shapiro EY., 1983, Algorithmic Program Debugging
   SISTLA AP, 1985, J ACM, V32, P733, DOI 10.1145/3828.3837
   Solar-Lezama A, 2006, ACM SIGPLAN NOTICES, V41, P404, DOI 10.1145/1168917.1168907
   Texas Instruments, 2012, Keystone architecture-serial peripheral interface (spi)
   Walden D. D., 2015, Systems Engineering Handbook: A Guide for System Life Cycle Processes and Activities
   Wolper P., 1981, 22nd Annual Symposium on Foundations of Computer Science, P340, DOI 10.1109/SFCS.1981.44
   Wolper P., 1983, 24th Annual Symposium on Foundations of Computer Science, P185, DOI 10.1109/SFCS.1983.51
   Wongpiromsarn Tichakorn., 2010, Automatic Synthesis of Robust Embedded Control Software
NR 74
TC 0
Z9 0
U1 1
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP
PY 2024
VL 236
AR 103116
DI 10.1016/j.scico.2024.103116
EA APR 2024
PG 36
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA PZ9S9
UT WOS:001218023400001
OA hybrid
DA 2024-08-05
ER

PT J
AU Díaz-Muñoz, A
   Rodríguez, M
   Piattini, M
AF Diaz-Munoz, Ana
   Rodriguez, Moises
   Piattini, Mario
TI Implementing an environment for hybrid software evaluation
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Software evaluation environment; Software quality; Quantum software;
   Hybrid systems
AB Quantum computing is a revolutionary paradigm in computer science based on the principles of quantum mechanics. It has the potential to solve problems that are currently unsolvable for classical computing. Applications of quantum computing already span a variety of sectors. Ongoing enhancements to the integrated programming and development environment simplify the creation and optimization of quantum algorithms. Ultimately, the focus on supporting tools represents the starting point towards achieving quantum computing maturity, facilitating its transition from an experimental domain to a practical industry. As quantum software gains ground and relevance in various domains, it is essential to address the evaluation of hybrid systems that combine classical and quantum elements to ensure diverse quality characteristics. However, in the realm of quantum software, models, metrics, and tools are still to be established. The primary contribution of this paper is to present the first technological environment for measuring and evaluating the analyzability of hybrid software. Real -world examples of hybrid software are provided to showcase the functionality of the different tools in the environment, yielding readable and representative results for the evaluator.
C1 [Diaz-Munoz, Ana; Piattini, Mario] Univ Castilla La Mancha, Inst Technol & Informat Syst, Ciudad Real 13071, Spain.
   [Diaz-Munoz, Ana; Piattini, Mario] Univ Castilla La Mancha, Escuela Super Informat, Ciudad Real 13071, Spain.
   [Diaz-Munoz, Ana; Rodriguez, Moises] AQCLab Software Qual, Ciudad Real 13500, Spain.
C3 Universidad de Castilla-La Mancha; Universidad de Castilla-La Mancha
RP Díaz-Muñoz, A (corresponding author), Univ Castilla La Mancha, Inst Technol & Informat Syst, Ciudad Real 13071, Spain.; Díaz-Muñoz, A (corresponding author), Univ Castilla La Mancha, Escuela Super Informat, Ciudad Real 13071, Spain.
EM adiaz@aqclab.es; mario.piattini@uclm.es
RI Piattini, Mario/F-6271-2013
OI Piattini, Mario/0000-0002-7212-8279
FU QSERV: Quantum Service Engineering: Development Quality, Testing &
   Security of Quantum Microservices - Spanish Ministry of Science and
   Innovation [PID2021-124054OB-C32]; ERDF; Q2SM: Quality Quantum Software
   Model - Junta de Comunidades de Castilla-La Mancha [EXPTE:
   13/22/IN/032]; FEDER funds; European Regional Development Fund (ERDF):
   UNION [2022-GRIN-34110]; MESIAS [2022-GRIN-34202]
FX This research was supported by QSERV: Quantum Service Engineering:
   Development Quality, Testing & Security of Quantum Microservices
   (PID2021-124054OB-C32) projects funded by the Spanish Ministry of
   Science and Innovation and ERDF; Q2SM: Quality Quantum Software Model
   (EXPTE: 13/22/IN/032) financed by the Junta de Comunidades de
   Castilla-La Mancha and FEDER funds; and grants for the execution of
   applied research projects, within the framework of the Company 's own
   Research Plan, co-financed by the European Regional Development Fund
   (ERDF): UNION (2022-GRIN-34110) and MESIAS (2022-GRIN-34202).
CR Alvarado-Valiente J., 2023, QUATIC INT C QUAL IN
   [Anonymous], 2023, Sonar Source, SonarQube
   Cruz J.A, 2022, Towards a set of metrics form quantum circuits understandability
   Egger Daniel J., 2020, IEEE Transactions on Quantum Engineering, V1, DOI 10.1109/TQE.2020.3030314
   Gonçales L, 2019, INT C PROGRAM COMPRE, P42, DOI 10.1109/ICPC.2019.00018
   Grover L. K., 1996, Proceedings of the Twenty-Eighth Annual ACM Symposium on the Theory of Computing, P212, DOI 10.1145/237814.237866
   Hevia JL, 2021, IEEE SOFTWARE, V38, P7, DOI 10.1109/MS.2021.3087755
   Hoang T, 2023, Arxiv, DOI arXiv:2307.11305
   Huggins W, 2019, QUANTUM SCI TECHNOL, V4, DOI 10.1088/2058-9565/aaea94
   Kaul M, 2023, P IEEE INT C QUANT C
   Kumar A, 2023, INT J THEOR PHYS, V62, DOI 10.1007/s10773-022-05271-y
   Microsoft, 2023, Computacion cuantica hibrida
   Munoz AD, 2024, J UNIVERS COMPUT SCI, V30, P25, DOI 10.3897/jucs.99348
   Piattini M, 2020, QANSWER QUANTUM SOFT
   Rasool R.U, 2023, Quantum Computing for Healthcare: A Review
   Rodriguez M., 2016, Softw. Qual. Prof. Mag., V18
   Rodríguez M, 2014, ERCIM NEWS, P39
   Shor PW, 1997, SIAM J COMPUT, V26, P1484, DOI 10.1137/S0036144598347011
   SonarSource S.A, 2023, Plugin basics
NR 19
TC 0
Z9 0
U1 3
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP
PY 2024
VL 236
AR 103109
DI 10.1016/j.scico.2024.103109
EA APR 2024
PG 12
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA QT7X0
UT WOS:001223196600001
DA 2024-08-05
ER

PT J
AU Ahmadi, S
   Dongol, B
   Griffin, M
AF Ahmadi, Sharar
   Dongol, Brijesh
   Griffin, Matt
TI Operationally proving memory access violations in Isabelle/HOL
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Formal verification; Operational semantics; Micro controller unit;
   Conformance rules; Isabelle/HOL
ID INTERNET
AB Security -critical applications often rely on memory isolation mechanisms to ensure integrity of critical data (e.g., keys) and program instructions (e.g., implementing an attestation protocol). These include software -based security microvisor S mu V or hardware -based (e.g., TrustLite or SMART) techniques. Here, we must guarantee that during an execution of a program, none of the assembly -level instructions corresponding to the program violate the imposed memory access restrictions. We focus on two security architectures (S mu V and TrustLite). We use Binary Analysis Platform (BAP) to generate assembly -level code in an intermediate language (BIL) for a compiled C program. This is then translated to Isabelle/HOL theories. We develop an operational semantics by defining a collection of transition rules for a subset of BIL (called AIRv2) that is sufficient for our work. We develop an adversary model and define conformance predicates for each assembly -level instruction. A conformance predicate holds iff the associated memory access restriction imposed by the underlying security architecture is satisfied. We generate a set of programs covering all possible cases in which an assembly -level instruction attempts to violate at least one of the conformance predicates. For S mu V, we capture all such violations not only by checking specific lines of the program but also by applying the operational semantics for every machine -state transition. This shows that the memory access restrictions of S mu V is operationally maintained. For TrustLite, we capture all such violations by checking specific lines of the program. Also, we provide an example to show how we can use the operational semantics to capture such violations.
C1 [Ahmadi, Sharar; Dongol, Brijesh; Griffin, Matt] Univ Surrey, Comp Sci Res Ctr, Guildford, England.
C3 University of Surrey
RP Ahmadi, S (corresponding author), Univ Surrey, Comp Sci Res Ctr, Guildford, England.
EM s.ahmadi@surrey.ac.uk; b.dongol@surrey.ac.uk; matt.griffin@surrey.ac.uk
OI Griffin, Matt/0000-0003-2703-0368
FU VeTSS; EPSRC [EP/V038915/1, EP/R025134/2, EP/X037142/1, EP/X015149/1]
FX This work is supported by VeTSS and EPSRC grants EP/V038915/1,
   EP/R025134/2, EP/X037142/1 and EP/X015149/1.
CR Ahmadi Sharar, 2022, FTSCS 2022: Proceedings of the 8th ACM SIGPLAN International Workshop on Formal Techniques for Safety-Critical Systems, P45, DOI 10.1145/3563822.3568010
   Ahmadi Sharar, 2023, Figshare, DOI 10.6084/m9.figshare.24502054.v1
   Ambrosin M, 2020, IEEE COMMUN SURV TUT, V22, P2447, DOI 10.1109/COMST.2020.3008879
   Ammar M, 2020, ACM IEEE INT CONF CY, P247, DOI 10.1109/ICCPS48487.2020.00036
   Ammar M, 2019, IEEE T DEPEND SECURE, V16, P885, DOI 10.1109/TDSC.2019.2928541
   Ankergård SFJJ, 2021, SENSORS-BASEL, V21, DOI 10.3390/s21051598
   Asokan N, 2015, CCS'15: PROCEEDINGS OF THE 22ND ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P964, DOI 10.1145/2810103.2813670
   Beringer L, 2007, 20TH IEEE COMPUTER SECURITY FOUNDATIONS SYMPOSIUM (CSFS20), PROCEEDINGS, P233, DOI 10.1109/CSF.2007.30
   Bormann C., 2014, RFC 7228
   Cheang K., 2019, IACR Cryptol, P310
   Cohen L., 2021, 12 INT C INTERACTIVE, V193, P1
   Dam M., 2013, 2013 ACM SIGSAC C CO, P223
   Daniels W, 2017, MIDDLEWARE'17: PROCEEDINGS OF THE 2017 INTERNATIONAL MIDDLEWARE CONFERENCE (INDUSTRIAL TRACK), P36, DOI 10.1145/3154448.3154454
   Eldefrawy K, 2017, PROCEEDINGS OF THE 10TH ACM CONFERENCE ON SECURITY AND PRIVACY IN WIRELESS AND MOBILE NETWORKS (WISEC 2017), P99, DOI 10.1145/3098243.3098261
   Griffin M, 2021, LECT NOTES COMPUT SC, V13047, P43, DOI 10.1007/978-3-030-90870-6_3
   Higgins F., 2009, Int. J. Adv. Secur, V2, P18
   Klein G, 2009, SOSP'09: PROCEEDINGS OF THE TWENTY-SECOND ACM SIGOPS SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P207
   Koeberl P., 2014, P 9 EUROPEAN C COMPU
   microchip, 2023, Atmega328
   MILLER B., Proceedings of the 1st Annual conference on Research in information technology, P51, DOI 10.1145/2380790.2380805
   Murray Toby, 2012, Certified Programs and Proofs. Second International Conference (CPP 2012). Proceedings, P126, DOI 10.1007/978-3-642-35308-6_12
   Neshenko N, 2019, IEEE COMMUN SURV TUT, V21, P2702, DOI 10.1109/COMST.2019.2910750
   Pollet J., 2010, PROC BLACK HAT US 20
   Richards RJ, 2010, DESIGN AND VERIFICATION OF MICROPROCESSOR SYSTEMS FOR HIGH-ASSURANCE APPLICATIONS, P301, DOI 10.1007/978-1-4419-1539-9_10
   Rushby J. M., 1981, Operating Systems Review, V15, P12, DOI 10.1145/1067627.806586
   Steiner RV, 2016, ACM COMPUT SURV, V49, DOI 10.1145/2988546
NR 26
TC 0
Z9 0
U1 1
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAY
PY 2024
VL 234
AR 103088
DI 10.1016/j.scico.2024.103088
EA FEB 2024
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA KO4Q9
UT WOS:001180898900001
OA hybrid
DA 2024-08-05
ER

PT J
AU Alvarado-Valiente, J
   Romero-Alvarez, J
   Moguel, E
   García-Alonso, J
   Murillo, JM
AF Alvarado-Valiente, Jaime
   Romero-Alvarez, Javier
   Moguel, Enrique
   Garcia-Alonso, Jose
   Murillo, Juan M.
TI Orchestration for quantum services: The power of load balancing across
   multiple service providers
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Quantum computing; Quantum provider; Quantum software engineering;
   Orchestration; Load balancer
ID SOFTWARE; API
AB Quantum computing plays a crucial role in solving complex problems for which classical supercomputers require an impractical amount of time. This emerging paradigm has the potential to revolutionize various fields such as cryptography, chemistry, and finance, making it a highly relevant area of research and development. Major companies such as Google, Amazon, IBM, and Microsoft, along with prestigious research institutions such as Oxford and MIT, are investing significant efforts into advancing this technology. However, the lack of a standardized approach among different providers poses challenges for developers to effectively access and utilize quantum computing resources. In this study, we propose a quantum orchestrator that is designed to facilitate the orchestration and execution of quantum circuits across multiple quantum service providers. The proposed solution aims to simplify the process for developers and facilitate the execution of quantum tasks using resources offered by different providers. The proposal is validated with the implementation of the proposed orchestrator for Amazon Braket and IBM Quantum. It can support both quantum and classical developers in defining, configuring, and executing circuits independently of the selected provider.
C1 [Alvarado-Valiente, Jaime; Romero-Alvarez, Javier; Moguel, Enrique; Garcia-Alonso, Jose; Murillo, Juan M.] Univ Extremadura, Quercus Software Engn Grp, Caceres, Spain.
C3 Universidad de Extremadura
RP Alvarado-Valiente, J; Romero-Alvarez, J (corresponding author), Univ Extremadura, Quercus Software Engn Grp, Caceres, Spain.
EM jaimeav@unex.es
OI Alvarado-Valiente, Jaime/0000-0003-0140-7788
FU European Union "Next GenerationEU/PRTR" by the Ministry of Science,
   Innovation and Universities [PID2021-1240454OB-C31, TED2021-130913B-I00,
   PDC2022-133465-I00]; QSERV: Quantum Service Engineering: Development
   Quality, Testing and Security of Quantum Microservices project - Spanish
   Ministry of Science and Innovation; ERDF; Regional Ministry of Economy,
   Science and Digital Agenda of the Regional Government of Extremadura
   [GR21133]; European Union - European Commission through the Digital
   Europe Program [101083667]; QSALUD project [EXP 00135977/MIG-20201059];
   Center for the Development of Industrial Technology (CDTI); MCIN/AEI
   [PRE2022-102070]; FSE+
FX This work was partially funded by the European Union "Next
   GenerationEU/PRTR" by the Ministry of Science, Innovation and
   Universities (projects PID2021-1240454OB-C31, TED2021-130913B-I00, and
   PDC2022-133465-I00) . It was also supported by QSERV: Quantum Service
   Engineering: Development Quality, Testing and Security of Quantum
   Microservices project funded by the Spanish Ministry of Science and
   Innovation and ERDF; by the Regional Ministry of Economy, Science and
   Digital Agenda of the Regional Government of Extremadura (GR21133) ; and
   by the European Union under Agreement 101083667 of the Project "TECH4E
   -Tech4effiencyEDlH" regarding the Call: DIGITAL-2021-EDlH-01 supported
   by the European Commission through the Digital Europe Program. This
   study was also supported by the QSALUD project (EXP 00135977/MIG
   -20201059) in line with the actions of the Center for the Development of
   Industrial Technology (CDTI) , as well as by grant PRE2022-102070,
   funded by MCIN/AEI/10.13039/501100011033 and by FSE+.
CR Aaronson S, 2005, P ROY SOC A-MATH PHY, V461, P3473, DOI 10.1098/rspa.2005.1546
   Alvarado-Valiente J, 2024, SOFTWARE QUAL J, V32, P53, DOI 10.1007/s11219-023-09633-5
   Aslam S, 2015, 2015 NATIONAL SOFTWARE ENGINEERING CONFERENCE (NSEC), P30, DOI 10.1109/NSEC.2015.7396341
   Brooks M, 2019, NATURE, V574, P19, DOI 10.1038/d41586-019-02936-3
   Cohen Y., 2020, Bull. Am. Phys. Soc., V65
   Dargan J., 2023, 81 quantum computing companies: an ultimate 2023 list, the quantum insider
   Faro I, 2023, 2023 IEEE INTERNATIONAL CONFERENCE ON QUANTUM SOFTWARE, QSW, P1, DOI 10.1109/QSW59989.2023.00011
   Furutanpey A, 2023, 2023 IEEE INTERNATIONAL CONFERENCE ON QUANTUM SOFTWARE, QSW, P88, DOI 10.1109/QSW59989.2023.00021
   Garcia-Alonso J, 2022, IEEE INTERNET COMPUT, V26, P34, DOI 10.1109/MIC.2021.3132688
   Gill SS, 2022, SOFTWARE PRACT EXPER, V52, P66, DOI 10.1002/spe.3039
   Grover L. K., 1996, Proceedings of the Twenty-Eighth Annual ACM Symposium on the Theory of Computing, P212, DOI 10.1145/237814.237866
   Hassija V, 2020, IET QUANTUM COMMUN, V1, P42, DOI 10.1049/iet-qtc.2020.0027
   Humble Jez, 2010, Continuous Delivery: Reliable software releases through Build, Test and Deployment Automation
   Leymann F, 2020, PROCEEDINGS OF THE 10TH INTERNATIONAL CONFERENCE ON CLOUD COMPUTING AND SERVICES SCIENCE (CLOSER), P9, DOI 10.5220/0009819800090024
   Li L, 2016, IEEE T NETW SERV MAN, V13, P154, DOI 10.1109/TNSM.2016.2516946
   Piattini M., 2022, Quantum Software Engineering Landscape and Challenges
   Piattini M, 2021, IT PROF, V23, P62, DOI 10.1109/MITP.2020.3019522
   Romero-Alvarez J, 2024, SOFTWARE PRACT EXPER, V54, P1491, DOI 10.1002/spe.3326
   de Sousa NFS, 2019, COMPUT COMMUN, V142, P69, DOI 10.1016/j.comcom.2019.04.008
   Serrano MA, 2023, ACM COMPUT SURV, V55, DOI 10.1145/3548679
   Shafiq DA, 2022, J KING SAUD UNIV-COM, V34, P3910, DOI 10.1016/j.jksuci.2021.02.007
   Shor PW, 1997, SIAM J COMPUT, V26, P1484, DOI 10.1137/S0036144598347011
   Sim S., 2018, Quantum Phys., P1, DOI [10.48550/arXiv.1810.10576, DOI 10.48550/ARXIV.1810.10576]
   Srinivasan K, 2018, Arxiv, DOI [arXiv:1805.10928, DOI 10.48550/ARXIV.1805.10928]
   Tiwari Ashish, 2022, Proceedings of 3rd International Conference on Machine Learning, Advances in Computing, Renewable Energy and Communication: MARC 2021. Lecture Notes in Electrical Engineering (915), P739, DOI 10.1007/978-981-19-2828-4_66
   Valencia D., 2021, INT C QUAL INF COMM, P225, DOI [10.1007/978-3-030-85347-1_17, DOI 10.1007/978]
   Wen Z, 2017, IEEE INTERNET COMPUT, V21, P16, DOI 10.1109/MIC.2017.36
   Wild K, 2020, IEEE INT ENTERP DIST, P125, DOI 10.1109/EDOC49727.2020.00024
   Zhao J., 2020, arXiv
NR 29
TC 0
Z9 0
U1 1
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT
PY 2024
VL 237
AR 103139
DI 10.1016/j.scico.2024.103139
EA MAY 2024
PG 12
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA TO8N6
UT WOS:001242295700001
OA hybrid
DA 2024-08-05
ER

PT J
AU Arias, J
   Bae, K
   Olarte, C
   Ölveczky, PC
   Petrucci, L
   ROmming, F
AF Arias, Jaime
   Bae, Kyungmin
   Olarte, Carlos
   Oelveczky, Peter Csaba
   Petrucci, Laure
   Romming, Fredrik
TI Symbolic analysis and parameter synthesis for networks of parametric
   timed automata with global variables using Maude and SMT solving
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Timed automata; Rewriting logic; Symbolic analysis; Parameter synthesis;
   SMT
ID REAL-TIME; MODEL CHECKING; REWRITING LOGIC; SPECIFICATION; SEMANTICS
AB This paper presents a rewriting logic "interpreter" for networks of parametric timed automata with global variables (NPTAVs) in Real-Time Maude style. Since explicit-state analysis is not sound and complete for such dense-time systems, we explain how our real-time rewrite theory can be systematically transformed into a rewrite theory that is amenable to symbolic analysis using the integration of Maude with SMT solving. We show that symbolic reachability analysis using Maude-with-SMT of the resulting rewrite theory is sound and complete for the NPTAV reachability problem. We extend and optimize standard Maude-with-SMT reachability analysis with folding and merging of symbolic states, so that the analysis terminates when the symbolic state space of the NPTAV is finite. These procedures rely on a subsumption relation that requires eliminating existentially quantified SMT variables. We have therefore implemented the Fourier-Motzkin quantifier elimination algorithm, thereby making our rewrite theory executable with any SMT solver connected to Maude. We show how we can provide most reachability and parameter synthesis analysis methods provided by Imitator, a state-of-the-art tool for NPTAVs. We compare the performance of our analysis methods with those of Imitator on a wide range of benchmarks, with the expected outcome. The practical contributions are two-fold: providing new analysis methods for NPTAVs-e.g., allowing more general state properties and supporting reachability analysis combined with user-defined execution strategies-not supported by Imitator, and developing symbolic analysis methods for both real-time rewrite theories and rewrite theories in general.
C1 [Arias, Jaime; Olarte, Carlos; Petrucci, Laure] Univ Sorbonne Paris Nord, LIPN, CNRS UMR 7030, Paris, France.
   [Bae, Kyungmin] Pohang Univ Sci & Technol, Pohang, South Korea.
   [Oelveczky, Peter Csaba] Univ Oslo, Oslo, Norway.
   [Romming, Fredrik] Univ Cambridge, Cambridge, England.
C3 Pohang University of Science & Technology (POSTECH); University of Oslo;
   University of Cambridge
RP Olarte, C (corresponding author), Univ Sorbonne Paris Nord, LIPN, CNRS UMR 7030, Paris, France.; Ölveczky, PC (corresponding author), Univ Oslo, Oslo, Norway.
EM olarte@lipn.univ-paris13.fr
FU National Research Foundation of Korea (NRF) - Korea government (MSIT)
   [2021R1A5A1021944, RS-2023-00251577]; NATO Science for Peace and
   Security Programme project SymSafe [G6133]
FX <STRONG> </STRONG>Arias, Olarte, Olveczky, Petrucci, and Romming
   acknowledge support from CNRS INS2I project ESPRiTS and the PHC project
   Aurora AESIR. Bae was supported by the National Research Foundation of
   Korea (NRF) grants funded by the Korea government (MSIT) (No.
   2021R1A5A1021944 and No. RS-2023-00251577) . Bae, Olarte, and Olveczky
   also acknowledge support from the NATO Science for Peace and Security
   Programme project SymSafe (grant number G6133) .
CR AlTurki M, 2009, LECT NOTES COMPUT SC, V5503, P262
   ALUR R, 1994, THEOR COMPUT SCI, V126, P183, DOI 10.1016/0304-3975(94)90010-8
   Alur R., 1993, Proceedings of the Twenty-Fifth Annual ACM Symposium on the Theory of Computing, P592, DOI 10.1145/167088.167242
   Andre Etienne, 2013, Automated Technology for Verification and Analysis. 11th International Symposium, ATVA 2013. Proceedings: LNCS 8172, P381, DOI 10.1007/978-3-319-02444-8_27
   André É, 2021, LECT NOTES COMPUT SC, V12759, P552, DOI 10.1007/978-3-030-81685-8_26
   André E, 2021, LECT NOTES COMPUT SC, V12740, P39, DOI 10.1007/978-3-030-79379-1_3
   André É, 2019, INT J SOFTW TOOLS TE, V21, P203, DOI 10.1007/s10009-017-0467-0
   Arias Jaime, 2022, FTSCS 2022: Proceedings of the 8th ACM SIGPLAN International Workshop on Formal Techniques for Safety-Critical Systems, P3, DOI 10.1145/3563822.3569923
   Arias J., 2023, NPTAV2Maude
   Arias J., 2023, Lecture Notes in Computer Science, V13929
   Arias J, 2023, Arxiv, DOI [arXiv:2303.08929, 10.48550/arXiv.2303.08929, DOI 10.48550/ARXIV.2303.08929]
   Bae K., 2013, LIPICS, V21, P81
   Bae K, 2019, SCI COMPUT PROGRAM, V178, P20, DOI 10.1016/j.scico.2019.03.006
   Bae K, 2015, SCI COMPUT PROGRAM, V103, P13, DOI 10.1016/j.scico.2014.09.011
   Bae K, 2014, LECT NOTES COMPUT SC, V8442, P94, DOI 10.1007/978-3-319-06410-9_7
   Bae K, 2012, LECT NOTES COMPUT SC, V7212, P59, DOI 10.1007/978-3-642-28872-2_4
   Bae K, 2012, SCI COMPUT PROGRAM, V77, P1235, DOI 10.1016/j.scico.2010.10.002
   Beffara E, 2009, Arxiv, DOI arXiv:0907.3123
   Bezdek P, 2016, LECT NOTES COMPUT SC, V9763, P172, DOI 10.1007/978-3-319-41591-8_12
   Bobba R., 2018, ASSURED CLOUD COMPUT, P10
   Borovansky P, 2002, THEOR COMPUT SCI, V285, P155, DOI 10.1016/S0304-3975(01)00358-9
   Broccia G, 2019, INNOV SYST SOFTW ENG, V15, P169, DOI 10.1007/s11334-019-00333-7
   Chevallier R, 2009, FORM METHOD SYST DES, V34, P59, DOI 10.1007/s10703-008-0061-x
   Clarke E. M., 2001, Model checking
   Clavel M., 2022, MAUDE MANUAL VERSION
   Clavel Manuel, 2007, Lecture Notes in Computer Science, V4350, DOI DOI 10.1007/978-3-540-71999-1
   Dantzig G., 2006, SPRINGER SERIES OPER
   David A, 2015, INT J SOFTW TOOLS TE, V17, P397, DOI 10.1007/s10009-014-0361-y
   Fribourg L., 2012, 2012 19th International Symposium on Temporal Representation and Reasoning (TIME), P73, DOI 10.1109/TIME.2012.10
   Grov Jon, 2014, Specification, Algebra, and Software. Essays Dedicated to Kokichi Futatsugi: LNCS 8373, P494, DOI 10.1007/978-3-642-54624-2_25
   Nguyen HG, 2018, IEEE INT C ENG COMP, P1, DOI [10.1109/ICECCS2018.2018.00009, 10.1109/ICOPS35962.2018.9575287]
   Hune T, 2002, J LOGIC ALGEBR PROGR, V52-3, P183, DOI 10.1016/S1567-8326(02)00037-1
   Imbert J.-L., 1993, PRINCIPLES PRACTICE, P117
   IMITATOR, About us
   Jovanovic A, 2015, IEEE T SOFTWARE ENG, V41, P445, DOI 10.1109/TSE.2014.2357445
   Knapik M, 2012, LECT NOTES COMPUT SC, V6900, P141
   Lee J, 2021, LECT NOTES COMPUT SC, V12759, P491, DOI 10.1007/978-3-030-81685-8_23
   Lepri D, 2015, SCI COMPUT PROGRAM, V99, P128, DOI 10.1016/j.scico.2014.06.006
   Lien E, 2009, SEFM 2009: SEVENTH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING AND FORMAL METHODS, P273, DOI 10.1109/SEFM.2009.11
   Lime D, 2009, LECT NOTES COMPUT SC, V5505, P54, DOI 10.1007/978-3-642-00768-2_6
   Liu S, 2016, J LOG ALGEBR METHODS, V85, P34, DOI 10.1016/j.jlamp.2015.05.002
   MESEGUER J, 1992, THEOR COMPUT SCI, V96, P73, DOI 10.1016/0304-3975(92)90182-F
   Meseguer J, 1998, LECT NOTES COMPUT SC, V1376, P18
   Meseguer J, 2020, J LOG ALGEBR METHODS, V110, DOI 10.1016/j.jlamp.2019.100483
   Meseguer J, 2012, THEOR COMPUT SCI, V451, P1, DOI 10.1016/j.tcs.2012.05.040
   Nigam V, 2022, LECT NOTES COMPUT SC, V13252, P212, DOI 10.1007/978-3-031-12441-9_11
   Ölveczky PC, 2006, FORM METHOD SYST DES, V29, P253, DOI 10.1007/s10703-006-0015-0
   Olveczky P. C., 2007, Higher-Order and Symbolic Computation, V20, P161, DOI 10.1007/s10990-007-9001-5
   Ölveczky PC, 2006, LECT NOTES COMPUT SC, V3922, P357
   Ölveczky PC, 2002, THEOR COMPUT SCI, V285, P359, DOI 10.1016/S0304-3975(01)00363-2
   Ölveczky PC, 2007, ELECTRON NOTES THEOR, V176, P5, DOI 10.1016/j.entcs.2007.06.005
   Ölveczky PC, 2008, LECT NOTES COMPUT SC, V4963, P332, DOI 10.1007/978-3-540-78800-3_23
   Ölveczky PC, 2014, LECT NOTES COMPUT SC, V8663, P42, DOI 10.1007/978-3-319-12904-4_3
   Ölveczky PC, 2011, LECT NOTES COMPUT SC, V7000, P368, DOI 10.1007/978-3-642-24933-4_19
   Ölveczky PC, 2010, LECT NOTES COMPUT SC, V6117, P47, DOI 10.1007/978-3-642-13464-7_5
   Ölveczky PC, 2009, THEOR COMPUT SCI, V410, P254, DOI 10.1016/j.tcs.2008.09.022
   Rocha C, 2017, J LOG ALGEBR METHODS, V86, P269, DOI 10.1016/j.jlamp.2016.10.001
   Yu G., 2020, PRELIMINARY P WRLA E, P220
NR 58
TC 0
Z9 0
U1 2
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR
PY 2024
VL 233
AR 103074
DI 10.1016/j.scico.2023.103074
EA JAN 2024
PG 38
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GO6J7
UT WOS:001153647500001
DA 2024-08-05
ER

PT J
AU Shimari, K
   Ishio, T
   Kanda, T
   Inoue, K
AF Shimari, Kazumasa
   Ishio, Takashi
   Kanda, Tetsuya
   Inoue, Katsuro
TI Evaluating the effectiveness of size-limited execution trace with
   near-omniscient debugging
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Dynamic analysis; Logging; Empirical study
AB Debugging is an important task to identify the defects in the software. Especially, logging is an important feature of a software system to record runtime information. Detailed logging allows developers to collect run-time information when they cannot use an interactive debugger, such as continuous integration and web application server cases. However, extensive logging leads to larger execution traces because few instructions can be repeated many times. In our previous work, to record detailed program behavior within limited storage space constraints, we proposed near-omniscient debugging, which is a methodology that records and visualizes an execution trace using fixed size buffers for each observed instruction. In this paper, we evaluate the effectiveness of near-omniscient debugging in recording infected states while reducing the size of execution traces. We conduct experiments on the Defects4J dataset and evaluate the effectiveness based on the completeness, trace size and runtime overhead. The result shows that near-omniscient debugging can completely record infected states for nearly 80 percent of bugs (with a buffer size of 1024 events). The size of execution traces can be reduced by a factor of one thousand for large repetitive executions.
C1 [Shimari, Kazumasa] Nara Inst Sci & Technol, Grad Sch Sci & Technol, Nara, Japan.
   [Ishio, Takashi] Future Univ Hakodate, Sch Syst Informat Sci, Hakodate, Hokkaido, Japan.
   [Kanda, Tetsuya] Notre Dame Seishin Univ, Fac Informat & Data Sci, Okayama, Japan.
   [Inoue, Katsuro] Nanzan Univ, Fac Sci & Technol, Aichi, Japan.
C3 Nara Institute of Science & Technology; Future University Hakodate
RP Shimari, K (corresponding author), Nara Inst Sci & Technol, Grad Sch Sci & Technol, Nara, Japan.
EM k.shimari@is.naist.jp; ishio@fun.ac.jp; kanda@m.ndsu.ac.jp;
   inoue599@nanzan-u.ac.jp
OI Shimari, Kazumasa/0000-0001-8837-5090
FU JSPS KAKENHI [JP19K20239, JP20H05706, JP22K21279, JP23K16862]
FX This work has been supported by JSPS KAKENHI Nos. JP19K20239,
   JP20H05706, JP22K21279, JP23K16862.
CR Chilimbi TM, 2004, ACM SIGPLAN NOTICES, V39, P156, DOI 10.1145/1037187.1024412
   Cornelissen B, 2008, PROC IEEE INT CONF S, P107, DOI 10.1109/ICSM.2008.4658059
   Dunlap GW, 2002, USENIX ASSOCIATION PROCEEDINGS OF THE FIFTH SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P211, DOI 10.1145/1060289.1060309
   Etemadi Khashayar, 2023, IEEE Transactions on Software Engineering, P4988, DOI 10.1109/TSE.2023.3324258
   Hirzel M, 2001, P 4 ACM WORKSH FEEDB
   Honarmand N, 2014, CONF PROC INT SYMP C, P445
   Kabinna S, 2016, 13TH WORKING CONFERENCE ON MINING SOFTWARE REPOSITORIES (MSR 2016), P154, DOI [10.1109/MSR.2016.025, 10.1145/2901739.2901769]
   Kanda T, 2022, INT C PROGRAM COMPRE, P528, DOI 10.1145/3524610.3527877
   Kernighan B.W., 1978, UNIX for Beginners
   Ko AJ, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P301, DOI 10.1145/1368088.1368130
   Lewis B., 2003, CoRR, cs.SE/0310016
   Lienhard A, 2008, LECT NOTES COMPUT SC, V5142, P592, DOI 10.1007/978-3-540-70592-5_25
   Liu TP, 2016, PROC INT CONF SOFTW, P911, DOI 10.1145/2884781.2884784
   O'Callahan R, 2017, 2017 USENIX ANNUAL TECHNICAL CONFERENCE (USENIX ATC '17), P377
   Pluquet F, 2009, OOPSLA 2009, CONFERENCE PROCEEDINGS, P391
   Pothier G, 2007, OOPSLA: 22ND INTERNATIONAL CONFERENCE ON OBJECT-ORIENTED PROGRAMMING, SYSTEMS, LANGUAGES, AND APPLICATIONS, PROCEEDINGS, P535
   Shimari K, 2021, SCI COMPUT PROGRAM, V206, DOI 10.1016/j.scico.2021.102630
   Shimari K, 2019, PROC IEEE INT CONF S, P398, DOI 10.1109/ICSME.2019.00068
   Spinellis Diomidis, 2016, Effective Debugging: 66 Specific Ways to Debug Software and Systems, V1st
   Wang T, 2004, PROC INT CONF SOFTW, P512, DOI 10.1109/ICSE.2004.1317473
   Yuan D, 2012, P 10 USENIX C OP SYS
   Yuan D, 2011, ACM SIGPLAN NOTICES, V46, P3, DOI 10.1145/1961296.1950369
   Zeller A., 2005, Why Programs Fail: A Guide to Systematic Debugging
   Zhang XG, 2004, PROC INT CONF SOFTW, P502, DOI 10.1109/ICSE.2004.1317472
NR 24
TC 0
Z9 0
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP
PY 2024
VL 236
AR 103117
DI 10.1016/j.scico.2024.103117
EA APR 2024
PG 11
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA SI8J3
UT WOS:001233913700001
DA 2024-08-05
ER

PT J
AU Liu, XT
   Liu, SR
   Guo, ZQ
   Zhang, P
   Yang, YB
   Liu, HH
   Lu, HM
   Li, YH
   Chen, L
   Zhou, YM
AF Liu, Xutong
   Liu, Shiran
   Guo, Zhaoqiang
   Zhang, Peng
   Yang, Yibiao
   Liu, Huihui
   Lu, Hongmin
   Li, Yanhui
   Chen, Lin
   Zhou, Yuming
TI Towards a framework for reliable performance evaluation in defect
   prediction
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Defect prediction; Performance evaluation; Prediction models; Software
   quality assurance (SQA)
ID MODELS; NUMBER
AB Enhancing software reliability, dependability, and security requires effective identification and mitigation of defects during early development stages. Software defect prediction (SDP) models have emerged as valuable tools for this purpose. However, there is currently a lack of consensus in evaluating the predictive performance of newly proposed models, which hinders accurate measurement of progress and can lead to misleading conclusions. To tackle this challenge, we present MATTER (a fraMework towArd a consisTenT pErformance compaRison), which aims to provide reliable and consistent performance comparisons for SDP models. MATTER incorporates three key considerations. First, it establishes a global reference point, ONE (glObal baseliNe modEl), which possesses the 3S properties (Simplicity in implementation, Strong predictive ability, and Stable prediction performance), to serve as the baseline for evaluating other models. Second, it proposes using the SQA-effort-aligned threshold setting to ensure fair performance comparisons. Third, it advocates for consistent performance evaluation by adopting a set of core performance indicators that reflect the practical value of prediction models in achieving tangible progress. Through the application of MATTER to the same benchmark data sets, researchers and practitioners can obtain more accurate and meaningful insights into the performance of defect prediction models, thereby facilitating informed decision -making and improving software quality. When evaluating representative SDP models from recent years using MATTER, we surprisingly observed that: none of these models demonstrated a notable enhancement in prediction performance compared to the simple baseline model ONE. In future studies, we strongly recommend the adoption of MATTER to assess the actual usefulness of newly proposed models, promoting reliable scientific progress in defect prediction.
C1 [Liu, Xutong; Liu, Shiran; Guo, Zhaoqiang; Zhang, Peng; Yang, Yibiao; Liu, Huihui; Lu, Hongmin; Li, Yanhui; Chen, Lin; Zhou, Yuming] Nanjing Univ, Natl Key Lab Novel Software Technol, Nanjing 210023, Jiangsu, Peoples R China.
C3 Nanjing University
RP Zhou, YM (corresponding author), Nanjing Univ, Natl Key Lab Novel Software Technol, Nanjing 210023, Jiangsu, Peoples R China.
EM xryu@smail.nju.edu.cn; shiranliu@smail.nju.edu.cn; gzq@smail.nju.edu.cn;
   DZ1833034@smail.nju.edu.cn; yangyibiao@nju.edu.cn; huihuiliu@nju.edu.cn;
   hmlu@nju.edu.cn; yanhuili@nju.edu.cn; lchen@nju.edu.cn;
   zhouyuming@nju.edu.cn
FU National Natural Science Foundation of China [62172205, 62172202,
   62302222, 62072194]
FX We are very grateful to (1) the authors of Bellwether, SC, CLA, and
   KSETE for sharing their implementation code; (2) Herbold, Trautsch, and
   Jens Grabowski for sharing the implementations of CamargoCruz09-NB,
   Amasaki15-NB, and Peters15-NB; and (3) the authors of FCM and EASC for
   providing the detail descriptions on their models. In particular, we
   thank Dr. Ni for illustrating the implementation detail of EASC by
   communication, ensuring the accurate implementation of EASC in our
   study. Last but not least, we want to point out that our purpose is not
   to criticize any existing work but instead to work together as a
   community to get through the severe and urgent challenges in consistent
   defect prediction evaluation we face today. This work is partially
   supported by National Natural Science Foundation of China (62172205,
   62172202, 62302222, 62072194) .
CR Bachmann A., 2010, P FAST SOFTW ENCR WO, P97
   Bal PR, 2023, IEEE T SOFTWARE ENG, V49, P1232, DOI 10.1109/TSE.2022.3173678
   Bommi NS, 2023, P INT COMP SOFTW APP, P1798, DOI 10.1109/COMPSAC57700.2023.00278
   Caglayan B, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 2, P89, DOI 10.1109/ICSE.2015.138
   Canfora G, 2015, SOFTW TEST VERIF REL, V25, P426, DOI 10.1002/stvr.1570
   Çarka J, 2022, EMPIR SOFTW ENG, V27, DOI 10.1007/s10664-022-10186-7
   Chen D, 2018, ESEC/FSE'18: PROCEEDINGS OF THE 2018 26TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P456, DOI 10.1145/3236024.3236050
   Chicco D, 2023, BIODATA MIN, V16, DOI 10.1186/s13040-023-00322-4
   Chicco D, 2021, IEEE ACCESS, V9, P47112, DOI 10.1109/ACCESS.2021.3068614
   Chicco D, 2020, BMC GENOMICS, V21, DOI 10.1186/s12864-019-6413-7
   Cliff N., 1996, ORDINAL METHODS BEHA
   Cruz AEC, 2009, INT SYMP EMP SOFTWAR, P461
   D'Ambros Marco, 2010, Proceedings of the 2010 7th IEEE Working Conference on Mining Software Repositories (MSR 2010), P31, DOI 10.1109/MSR.2010.5463279
   Dong F, 2018, WIRELESS PERS COMMUN, V102, P2261, DOI 10.1007/s11277-017-5069-3
   Feng S, 2021, INFORM SOFTWARE TECH, V129, DOI 10.1016/j.infsof.2020.106432
   Ghotra B, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 1, P789, DOI 10.1109/ICSE.2015.91
   Grissom R. J., 2005, Effect Sizes for Research: A Broad Practical Approach, DOI DOI 10.4324/9781410612915
   Hall T, 2012, IEEE T SOFTWARE ENG, V38, P1276, DOI 10.1109/TSE.2011.103
   He P, 2015, INFORM SOFTWARE TECH, V59, P170, DOI 10.1016/j.infsof.2014.11.006
   Herbold S, 2022, EMPIR SOFTW ENG, V27, DOI 10.1007/s10664-021-10092-4
   Herbold S, 2019, IEEE T SOFTWARE ENG, V45, P632, DOI 10.1109/TSE.2018.2790413
   Herbold S, 2018, IEEE T SOFTWARE ENG, V44, P811, DOI 10.1109/TSE.2017.2724538
   Hosseini S, 2019, IEEE T SOFTWARE ENG, V45, P111, DOI 10.1109/TSE.2017.2770124
   Huang Q, 2019, EMPIR SOFTW ENG, V24, P2823, DOI 10.1007/s10664-018-9661-2
   Huang Q, 2017, PROC IEEE INT CONF S, P159, DOI 10.1109/ICSME.2017.51
   Illes-Seifert T, 2010, INFORM SOFTWARE TECH, V52, P539, DOI 10.1016/j.infsof.2009.11.010
   Jiarpakdee J, 2021, IEEE WORK CONF MIN S, P432, DOI 10.1109/MSR52588.2021.00055
   Jing XY, 2017, IEEE T SOFTWARE ENG, V43, P321, DOI 10.1109/TSE.2016.2597849
   Jingxiu Yao, 2020, EASE2020. Proceedings of the Evaluation and Assessment in Software Engineering, P120, DOI 10.1145/3383219.3383232
   Jureczko M., 2010, P 6 INT C PREDICTIVE, P1, DOI DOI 10.1145/1868328.1868342
   Kapur R, 2020, ACM T SOFTW ENG METH, V29, DOI 10.1145/3384517
   Krishna R, 2019, IEEE T SOFTWARE ENG, V45, P1081, DOI 10.1109/TSE.2018.2821670
   Lavazza L, 2022, EMPIR SOFTW ENG, V27, DOI 10.1007/s10664-022-10199-2
   Lee T, 2016, IEEE T SOFTWARE ENG, V42, P1015, DOI 10.1109/TSE.2016.2550458
   Lessmann S, 2008, IEEE T SOFTWARE ENG, V34, P485, DOI 10.1109/TSE.2008.35
   Li J, 2017, 2017 IEEE INTERNATIONAL CONFERENCE ON SOFTWARE QUALITY, RELIABILITY AND SECURITY (QRS), P318, DOI 10.1109/QRS.2017.42
   Li N, 2020, INFORM SOFTWARE TECH, V122, DOI 10.1016/j.infsof.2020.106287
   Li ZQ, 2023, IEEE T SOFTWARE ENG, V49, P1941, DOI 10.1109/TSE.2022.3204589
   Li ZQ, 2019, IEEE T SOFTWARE ENG, V45, P391, DOI 10.1109/TSE.2017.2780222
   Liu SR, 2023, IEEE T SOFTWARE ENG, V49, P586, DOI 10.1109/TSE.2022.3156787
   Liu X., 2023, MATTER
   Majumder S, 2022, IEEE WORK CONF MIN S, P566, DOI 10.1145/3524842.3527934
   Manjula C, 2019, CLUSTER COMPUT, V22, pS9847, DOI 10.1007/s10586-018-1696-z
   Menzies T., 2011, 2011 26th IEEE/ACM International Conference on Automated Software Engineering, P343, DOI 10.1109/ASE.2011.6100072
   Morasca S, 2020, EMPIR SOFTW ENG, V25, P3977, DOI 10.1007/s10664-020-09861-4
   Moser R, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P181, DOI 10.1145/1368088.1368114
   Moussa R, 2022, INT SYMP EMP SOFTWAR, P159, DOI 10.1145/3544902.3546255
   Moussa R, 2022, PROCEEDINGS OF THE 31ST ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, ISSTA 2022, P101, DOI 10.1145/3533767.3534405
   Nam J, 2015, IEEE INT CONF AUTOM, P452, DOI 10.1109/ASE.2015.56
   Ni C, 2022, IEEE T SOFTWARE ENG, V48, P786, DOI 10.1109/TSE.2020.3001739
   Niedermayr R., 2020, LNI, VP-300, P137
   Ostrand TJ, 2005, IEEE T SOFTWARE ENG, V31, P340, DOI 10.1109/TSE.2005.49
   Panichella A, 2016, GECCO'16: PROCEEDINGS OF THE 2016 GENETIC AND EVOLUTIONARY COMPUTATION CONFERENCE, P1077, DOI 10.1145/2908812.2908938
   Qu Y, 2021, IEEE T SOFTWARE ENG, V47, P348, DOI 10.1109/TSE.2019.2892959
   Rahman F, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P432, DOI 10.1109/ICSE.2013.6606589
   Rana Rakesh, 2014, Proceedings of the 9th International Conference on Software Engineering and Applications ICSOFT-EA 2014, P383
   Romano J., 2006, ANN M FLOR ASS I RES, V177, P34
   Shepperd M, 2013, IEEE T SOFTWARE ENG, V39, P1208, DOI 10.1109/TSE.2013.11
   Song HJ, 2023, EMPIR SOFTW ENG, V28, DOI 10.1007/s10664-023-10371-2
   Song QB, 2006, IEEE T SOFTWARE ENG, V32, P69, DOI 10.1109/TSE.2006.1599417
   Song QB, 2011, IEEE T SOFTWARE ENG, V37, P356, DOI 10.1109/TSE.2010.90
   Staron M, 2009, INFORM SOFTWARE TECH, V51, P721, DOI 10.1016/j.infsof.2008.10.001
   Tantithamthavorn C, 2019, IEEE T SOFTWARE ENG, V45, P683, DOI 10.1109/TSE.2018.2794977
   Tantithamthavorn Chakkrit, 2018, SCOTTKNOTTESD SCOTT
   Tian J., 2005, Software Quality Engineering: Testing, Quality Assurance, and Quantifiable Improvement
   Tong HN, 2021, IEEE T SOFTWARE ENG, V47, P1886, DOI 10.1109/TSE.2019.2939303
   Tu H, 2022, IEEE T SOFTWARE ENG, V48, P278, DOI 10.1109/TSE.2020.2986415
   Turhan B, 2009, EMPIR SOFTW ENG, V14, P540, DOI 10.1007/s10664-008-9103-7
   Wan ZY, 2020, IEEE T SOFTWARE ENG, V46, P1241, DOI 10.1109/TSE.2018.2877678
   Wang S, 2020, IEEE T SOFTWARE ENG, V46, P1267, DOI 10.1109/TSE.2018.2877612
   Watanabe S., 2008, P 4 INT WORKSH PRED, P19, DOI [10.1145/1370788.1370794, DOI 10.1145/1370788.1370794.50A.E.C]
   Wen M, 2020, IEEE T SOFTWARE ENG, V46, P1155, DOI 10.1109/TSE.2018.2876256
   Weyuker EJ, 2008, EMPIR SOFTW ENG, V13, P539, DOI 10.1007/s10664-008-9082-8
   Whigham PA, 2015, ACM T SOFTW ENG METH, V24, DOI 10.1145/2738037
   Wilcoxon F., 1992, Breakthroughs in statistics: methodology and distribution, P196, DOI [DOI 10.2307/3001968, 10.1093/jee/39.2.269, DOI 10.1093/JEE/39.2.269, DOI 10.1007/978-1-4612-4380-916]
   Wu R, 2011, SIGSOFT FSE, P15, DOI DOI 10.1145/2025113.2025120
   Xu Z, 2021, J SYST SOFTWARE, V172, DOI 10.1016/j.jss.2020.110862
   Yang YB, 2016, FSE'16: PROCEEDINGS OF THE 2016 24TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON FOUNDATIONS OF SOFTWARE ENGINEERING, P157, DOI 10.1145/2950290.2950353
   Zeng ZR, 2021, ISSTA '21: PROCEEDINGS OF THE 30TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, P427, DOI 10.1145/3460319.3464819
   Zhang F, 2016, PROC INT CONF SOFTW, P309, DOI 10.1145/2884781.2884839
   Zhang THR, 2022, EMPIR SOFTW ENG, V27, DOI 10.1007/s10664-022-10185-8
   Zhou YM, 2018, ACM T SOFTW ENG METH, V27, DOI 10.1145/3183339
NR 82
TC 0
Z9 0
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC
PY 2024
VL 238
AR 103164
DI 10.1016/j.scico.2024.103164
EA JUN 2024
PG 26
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA XB4Q8
UT WOS:001259214800001
DA 2024-08-05
ER

PT J
AU Sachtleben, R
AF Sachtleben, Robert
TI Unifying frameworks for complete test strategies
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Model-based testing; Complete test methods; Finite state machines;
   Mechanized proofs
ID FINITE-STATE MACHINES
AB The field of model -based testing has witnessed the development of several test strategies on finite state machines. Although these strategies are often related, little effort has been made to explicitly identify patterns shared between them, and their concrete implementations as well as completeness proofs regularly exhibit redundancy. In this paper, we propose an approach for the systematic verification and implementation of strategies for the language -equivalence conformance relation. We present frameworks in the form of higher order functions that implement shared behaviour once and encapsulate diverging behaviour in procedural parameters, thus reducing duplication and improving maintainability and extensibility. We show that this simplifies completeness proofs by proving complete all considered strategies using the same argument. All presented frameworks, proofs, and concrete strategy implementations have been mechanised using the proof assistant Isabelle.
C1 [Sachtleben, Robert] Univ Bremen, Dept Math & Comp Sci, Bibliothekstr 5, D-28359 Bremen, Germany.
C3 University of Bremen
RP Sachtleben, R (corresponding author), Univ Bremen, Dept Math & Comp Sci, Bibliothekstr 5, D-28359 Bremen, Germany.
EM rob_sac@uni-bremen.de
CR Anand S, 2013, J SYST SOFTWARE, V86, P1978, DOI 10.1016/j.jss.2013.02.061
   Bergenthal M, 2022, LECT NOTES COMPUT SC, V13045, P3, DOI 10.1007/978-3-031-04673-5_1
   Bonifacio A, 2017, INFORM SOFTWARE TECH, V92, P95, DOI 10.1016/j.infsof.2017.07.012
   Bonifácio AL, 2017, SOFTW TEST VERIF REL, V27, DOI 10.1002/stvr.1626
   Bonifacio Adilson Luiz, 2014, S APPL COMP SAC 2014, P1287
   CHOW TS, 1978, IEEE T SOFTWARE ENG, V4, P178, DOI 10.1109/TSE.1978.231496
   Dorofeeva R, 2005, LECT NOTES COMPUT SC, V3731, P204
   FUJIWARA S, 1991, IEEE T SOFTWARE ENG, V17, P591, DOI 10.1109/32.87284
   Gleirscher M, 2023, SCI COMPUT PROGRAM, V226, DOI 10.1016/j.scico.2023.102930
   Gleirscher Mario, 2022, arXiv, DOI [10.48550/arXiv.2203.08917, DOI 10.48550/ARXIV.2203.08917]
   Goncalves N, 2021, 2021 IEEE 18TH INTERNATIONAL CONFERENCE ON SOFTWARE ARCHITECTURE COMPANION (ICSA-C), P54, DOI 10.1109/ICSA-C52384.2021.00015
   Haftmann F, 2010, LECT NOTES COMPUT SC, V6009, P103, DOI 10.1007/978-3-642-12251-4_9
   Hierons RM, 2004, IEEE T COMPUT, V53, P1330, DOI 10.1109/TC.2004.85
   Hierons RM, 2019, SCI COMPUT PROGRAM, V177, P1, DOI 10.1016/j.scico.2019.03.004
   Hierons RM, 2008, APPLIED COMPUTING 2008, VOLS 1-3, P682
   Hierons RM, 2017, IEEE T SOFTWARE ENG, V43, P1033, DOI 10.1109/TSE.2017.2652457
   Hopcroft J.E., 1979, Introduction to Automata Theory, Languages, and Computation
   Hordijk Wiebe, 2009, Workshops in Computing
   Huang Wen-ling, 2023, Applicable Formal Methods for Safe Industrial Products: Essays Dedicated to Jan Peleska on the Occasion of His 65th Birthday. Lecture Notes in Computer Science (14165), P49, DOI 10.1007/978-3-031-40132-9_4
   Huang WL, 2017, FORM ASP COMPUT, V29, P335, DOI 10.1007/s00165-016-0402-2
   Hubner F, 2019, SOFTW SYST MODEL, V18, P423, DOI 10.1007/s10270-017-0595-8
   Isabelle Markus Wenzel, 2002, PhD thesis
   Kushik N, 2022, LECT NOTES COMPUT SC, V13045, P55, DOI 10.1007/978-3-031-04673-5_4
   Lammich P, 2013, LECT NOTES COMPUT SC, V7998, P84, DOI 10.1007/978-3-642-39634-2_9
   Liskov B., 1974, SIGPLAN Notices, V9, P50, DOI 10.1145/942572.807045
   Lobry O, 2008, LECT NOTES COMPUT SC, V4954, P149
   Lochbihler A, 2013, LECT NOTES COMPUT SC, V7998, P116, DOI 10.1007/978-3-642-39634-2_11
   LUO G, 1994, IEEE T SOFTWARE ENG, V20, P149, DOI 10.1109/32.265636
   Luo G., 1995, Protocol Test Systems. 7th Workshop. 7th IFIP WG 6.1 International Workshop on Protocol Test Systems, P95
   Peleska Jan, 2018, Leveraging Applications of Formal Methods, Verification and Validation. Industrial Practice. 8th International Symposium, ISoLA 2018. Proceedings: Lecture Notes in Computer Science (LNCS 11247), P82, DOI 10.1007/978-3-030-03427-6_11
   Peleska J, 2018, PROC EUR TEST SYMP
   Peleska Jan, 2021, Test Automation-Foundations and Applications of Model-Based Testing
   Petrenko A., 1996, Testing of Communicating Systems. IFIP TC6 9th International Workshop on Testing of Communicating Systems, P125
   Petrenko A, 2006, LECT NOTES COMPUT SC, V3997, P118
   Petrenko A, 2019, 2019 IEEE 19TH INTERNATIONAL CONFERENCE ON SOFTWARE QUALITY, RELIABILITY AND SECURITY (QRS 2019), P362, DOI 10.1109/QRS.2019.00053
   Petrenko A, 2014, IEEE HI ASS SYS ENGR, P224, DOI 10.1109/HASE.2014.39
   Petrenko A, 2011, LECT NOTES COMPUT SC, V7019, P162, DOI 10.1007/978-3-642-24580-0_12
   Ramada MS, 2019, PROC INT C TOOLS ART, P400, DOI 10.1109/ICTAI.2019.00063
   Sachtleben R, 2022, SOFTW TEST VERIF REL, V32, DOI 10.1002/stvr.1806
   Sachtleben R, 2020, LECT NOTES COMPUT SC, V12543, P236, DOI 10.1007/978-3-030-64881-7_15
   Sachtleben R, 2019, LECT NOTES COMPUT SC, V11812, P176, DOI 10.1007/978-3-030-31280-0_11
   Sachtleben Robert, 2023, Arch. Formal Proofs
   Sachtleben Robert, 2022, An approach for the verification and synthesis of complete test generation algorithms for finite state machines, DOI [10.26092/elib/1665, DOI 10.26092/ELIB/1665]
   Sachtleben Robert, 2022, Arch. Formal Proofs
   Shabaldina N, 2007, LECT NOTES COMPUT SC, V4581, P305
   Simao A, 2012, SOFTW TEST VERIF REL, V22, P435, DOI 10.1002/stvr.452
   Simao A, 2010, COMPUT J, V53, P1508, DOI 10.1093/comjnl/bxp073
   Simao A, 2010, IEEE T COMPUT, V59, P1023, DOI 10.1109/TC.2010.17
   Simao A, 2009, LECT NOTES COMPUT SC, V5826, P129, DOI 10.1007/978-3-642-05031-2_9
   Soucha M, 2020, COMPUT J, V63, P1298, DOI 10.1093/comjnl/bxz056
   Soucha M, 2018, IEEE ICST WORKSHOP, P194, DOI 10.1109/ICSTW.2018.00050
   Soucha Michal, 2019, PhD thesis
   Tretmans Jan, 2008, Formal Methods and Testing. An Outcome of the FORTEST Network. Revised Selected Papers, P1, DOI 10.1007/978-3-540-78917-8_1
   Ural H, 1997, IEEE T COMPUT, V46, P93, DOI 10.1109/12.559807
   Utting Mark, 2005, Verified Software: Theories, Tools, Experiments. First IFIP TC 2/WG 2.3 Conference, VSTTE 2005. (Lecture Notes in Computer Science vol. 4171), P510
   Utting M, 2012, SOFTW TEST VERIF REL, V22, P297, DOI 10.1002/stvr.456
   Vasilevskii M. P., 1973, Cybernetics, V9, P653, DOI 10.1007/BF01068590
   Vinarskii E, 2020, LECT NOTES COMPUT SC, V12543, P289, DOI 10.1007/978-3-030-64881-7_18
   Wenzel M, 2008, LECT NOTES COMPUT SC, V5170, P33, DOI 10.1007/978-3-540-71067-7_7
   Woos D, 2016, PROCEEDINGS OF THE 5TH ACM SIGPLAN CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS (CPP'16), P154, DOI 10.1145/2854065.2854081
NR 60
TC 0
Z9 0
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT
PY 2024
VL 237
AR 103135
DI 10.1016/j.scico.2024.103135
EA APR 2024
PG 25
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA SS9M1
UT WOS:001236554800001
OA hybrid
DA 2024-08-05
ER

PT J
AU Cao, YL
   Chen, ZF
   Zhang, XW
   Li, YH
   Chen, L
   Wang, LZ
AF Cao, Yulu
   Chen, Zhifei
   Zhang, Xiaowei
   Li, Yanhui
   Chen, Lin
   Wang, Linzhang
TI Diagnosis of package installation incompatibility via knowledge base
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Python; Dependency conflict; Compatibility
ID EVOLUTION
AB Python package installation is far from trivial. Users encounter a variety of errors when installing Python libraries, including dependency conflicts and incompatibilities. Existing solutions focus on parsing third -party dependencies but ignore the impact of local settings and user requirements. In this paper, we propose a novel approach, HELP, to help Python users tackle installation errors. We first establish a local knowledge base by extracting the PyPI database and dependency analysis. When the user provides the installation requirements, HELP extracts multiple constraints including user requirements, Python version constraints, and dependency constraints, and models them into SMT expressions. Then HELP solves the installation problem by using the SMT solver. To understand the status of Python version compatibility, we conduct an empirical study on Python version compatibility on 8,502 libraries. The study reveals that 80% of Python libraries do not declare Python version constraints in most versions. We also find that installation errors are strongly related to Python versions. To evaluate HELP, we conduct the experiment on 495 sampled installation failures. The results show that HELP can effectively resolve 263 installation failures, 42% more than the baseline approach. Especially, HELP provides a more comprehensive diagnosis when encountering configuration -related installation failures. Besides, HELP is more efficient than pip at predicting installation failures (30X speedups), which may save much effort if the installation cannot succeed.
C1 [Cao, Yulu; Chen, Zhifei; Zhang, Xiaowei; Li, Yanhui; Chen, Lin; Wang, Linzhang] Nanjing Univ, State Key Lab Novel Software Technol, Nanjing, Jiangsu, Peoples R China.
   [Chen, Zhifei] Nanjing Univ Sci & Technol, Sch Comp Sci & Engn, Nanjing, Jiangsu, Peoples R China.
C3 Nanjing University; Nanjing University of Science & Technology
RP Chen, L (corresponding author), Nanjing Univ, State Key Lab Novel Software Technol, Nanjing, Jiangsu, Peoples R China.
EM lchen@nju.edu.cn
OI Cao, Yulu/0000-0002-6623-1165; Li, Yanhui/0000-0003-2282-7175
FU National Natural Science Foundation of China [62272221, 62172202];
   National Key Research and Development Program of China [2022YFF0712100];
   Natural Science Foundation of Jiangsu Province, China [BK20220937]
FX <B>Acknowledgements</B> This work was supported in part by the National
   Natural Science Foundation of China under Grants 62272221 and 62172202,
   the National Key Research and Development Program of China
   (2022YFF0712100) , and Natural Science Foundation of Jiangsu Province,
   China (BK20220937) .
CR Abate P, 2020, PROCEEDINGS OF THE 2020 IEEE 27TH INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER '20), P547, DOI [10.1109/saner48275.2020.9054837, 10.1109/SANER48275.2020.9054837]
   Abate P, 2012, J SYST SOFTWARE, V85, P2228, DOI 10.1016/j.jss.2012.02.018
   Abdalkareem R, 2020, EMPIR SOFTW ENG, V25, P1168, DOI 10.1007/s10664-019-09792-9
   [Anonymous], 2022, IEEE spectrum's the top programming languages
   [Anonymous], 2022, Requests
   [Anonymous], 2022, Z3 Solver
   Artho C., 2012, 2012 9th IEEE Working Conference on Mining Software Repositories (MSR 2012), P141, DOI 10.1109/MSR.2012.6224274
   Bavota G, 2013, PROC IEEE INT CONF S, P280, DOI 10.1109/ICSM.2013.39
   Bogart C, 2016, FSE'16: PROCEEDINGS OF THE 2016 24TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON FOUNDATIONS OF SOFTWARE ENGINEERING, P109, DOI 10.1145/2950290.2950325
   Bringolf M, 2022, IEEE INT CONF AUTOM, DOI 10.1145/3551349.3560435
   Cao YL, 2023, IEEE T SOFTWARE ENG, V49, P1741, DOI 10.1109/TSE.2022.3191353
   Chen LC, 2020, PROC INT CONF SOFTW, P112, DOI 10.1145/3377811.3380436
   Cheng W, 2022, PROC INT CONF SOFTW, P451, DOI 10.1145/3510003.3510078
   Claes M., 2018, Software Technology: 10 Years of Innovation in IEEE Computer
   Claes M, 2015, 12TH WORKING CONFERENCE ON MINING SOFTWARE REPOSITORIES (MSR 2015), P212, DOI 10.1109/MSR.2015.27
   CLIFF N, 1993, PSYCHOL BULL, V114, P494, DOI 10.1037/0033-2909.114.3.494
   Cogo FR, 2021, IEEE T SOFTWARE ENG, V48, P2208, DOI 10.1109/TSE.2021.3055123
   Cohen J., 1988, Statistical power analysis for the behavioral sciences
   Dann A., UPCY: Safely Updating Outdated Dependencies.
   Decan A, 2019, EMPIR SOFTW ENG, V24, P381, DOI 10.1007/s10664-017-9589-y
   Decan A, 2017, 2017 IEEE 24TH INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER), P2, DOI 10.1109/SANER.2017.7884604
   Decan A, 2016, 2016 IEEE 23RD INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER), VOL 1, P493, DOI 10.1109/SANER.2016.12
   Dietrich Jens, 2019, 2019 IEEE/ACM 16th International Conference on Mining Software Repositories (MSR), P349, DOI 10.1109/MSR.2019.00061
   Dilhara M, 2021, ACM T SOFTW ENG METH, V30, DOI 10.1145/3453478
   Fan G, 2020, P 29 ACM SIGSOFT INT, P463, DOI [10.1145/3395363.3397388, DOI 10.1145/3395363.3397388]
   Golzadeh Mehdi, 2019, ESEC/FSE 2019: Proceedings of the 2019 27th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering, P1226, DOI 10.1145/3338906.3342497
   Harrand N, 2022, J SYST SOFTWARE, V184, DOI 10.1016/j.jss.2021.111134
   Horton E, 2019, 34TH IEEE/ACM INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING (ASE 2019), P477, DOI 10.1109/ASE.2019.00052
   Horton E, 2019, PROC INT CONF SOFTW, P328, DOI 10.1109/ICSE.2019.00047
   Huang KF, 2020, PROCEEDINGS OF THE 28TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE '20), P518, DOI 10.1145/3368089.3409689
   Islam MJ, 2019, ESEC/FSE'2019: PROCEEDINGS OF THE 2019 27TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P510, DOI 10.1145/3338906.3338955
   Islam S, 2023, IEICE T INF SYST, VE106D, P138, DOI 10.1587/transinf.2022MPP0001
   Islam S, 2021, PROC IEEE INT CONF S, P664, DOI 10.1109/ICSME52107.2021.00077
   Jafari AJ, 2022, IEEE T SOFTWARE ENG, V48, P3790, DOI 10.1109/TSE.2021.3106247
   Jia ZY, 2021, PROC INT CONF SOFTW, P86, DOI 10.1109/ICSE43902.2021.00021
   Le Berre D, 2009, IWOCE 2009: INTERNATIONAL WORKSHOP ON OPEN COMPONENT ECOSYSTEM, P21
   Legay D, 2020, PROC IEEE INT CONF S, P682, DOI 10.1109/ICSME46990.2020.00072
   Li ZM, 2022, PROC INT CONF SOFTW, P1545, DOI 10.1145/3510003.3510118
   Liu CW, 2022, PROC INT CONF SOFTW, P672, DOI 10.1145/3510003.3510142
   Mahmud T, 2021, 2021 IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION AND REENGINEERING (SANER 2021), P480, DOI 10.1109/SANER50967.2021.00051
   Maji AK, 2020, PROCEEDINGS OF 2020 IEEE/ACM INTERNATIONAL WORKSHOP ON HPC USER SUPPORT TOOLS (HUST) AND THE WORKSHOP ON PROGRAMMING AND PERFORMANCE VISUALIZATION TOOLS (PROTOOLS), P27, DOI 10.1109/HUSTProtools51951.2020.00011
   Malloy BA, 2019, EMPIR SOFTW ENG, V24, P751, DOI 10.1007/s10664-018-9637-2
   Malloy BA, 2017, INT SYMP EMP SOFTWAR, P314, DOI 10.1109/ESEM.2017.45
   Mukherjee S, 2021, ISSTA '21: PROCEEDINGS OF THE 30TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, P439, DOI 10.1145/3460319.3464797
   Schlosser G, 2004, MODULARITY IN DEVELOPMENT AND EVOLUTION, P519
   Soto-Valero C., 2022, ACM Comput. Surv.
   Soto-Valero C, 2021, PROCEEDINGS OF THE 29TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE '21), P1021, DOI 10.1145/3468264.3468589
   Soto-Valero C, 2021, EMPIR SOFTW ENG, V26, DOI 10.1007/s10664-020-09914-8
   Student, 1921, Biometrika, V13, P263, DOI 10.1093/biomet/13.2-3.263
   Sun X., 2022, 37 IEEEACM INT C AUT, P1
   Thung F, 2013, WORK CONF REVERSE EN, P182, DOI 10.1109/WCRE.2013.6671293
   Tucker C, 2007, PROC INT CONF SOFTW, P178
   Vargas EL, 2020, PROCEEDINGS OF THE 28TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE '20), P245, DOI 10.1145/3368089.3409711
   Vouillon J, 2013, ACM T SOFTW ENG METH, V22, DOI 10.1145/2522920.2522927
   Wang C, 2022, IEEE INT CONF AUTOM, DOI 10.1145/3551349.3560437
   Wang JW, 2020, IEEE INT CONF AUTOM, P138, DOI 10.1145/3324884.3416585
   Wang JW, 2021, PROC INT CONF SOFTW, P1622, DOI 10.1109/ICSE43902.2021.00144
   Wang Y, 2021, IEEE T SOFTWARE ENG, V48, P2295, DOI 10.1109/TSE.2021.3057767
   Wang Y, 2021, PROC INT CONF SOFTW, P99, DOI 10.1109/ICSE43902.2021.00022
   Wang Y, 2020, PROC INT CONF SOFTW, P125, DOI 10.1145/3377811.3380426
   Wang Y, 2019, PROC INT CONF SOFTW, P572, DOI 10.1109/ICSE.2019.00068
   Wang Y, 2018, ESEC/FSE'18: PROCEEDINGS OF THE 2018 26TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P319, DOI 10.1145/3236024.3236056
   Wei LL, 2020, IEEE T SOFTWARE ENG, V46, P1176, DOI 10.1109/TSE.2018.2876439
   Wei LL, 2019, PROC INT CONF SOFTW, P878, DOI 10.1109/ICSE.2019.00094
   WILCOXON F, 1946, J ECON ENTOMOL, V39, P269, DOI 10.1093/jee/39.2.269
   Ye HJ, 2022, PROC INT CONF SOFTW, P1245, DOI 10.1145/3510003.3510127
   Zhao YJ, 2022, PROC INT CONF SOFTW, P2142, DOI 10.1145/3510003.3510128
   Zhu CG, 2023, ACM T SOFTW ENG METH, V32, DOI 10.1145/3582569
NR 68
TC 0
Z9 0
U1 3
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUL
PY 2024
VL 235
AR 103098
DI 10.1016/j.scico.2024.103098
EA MAR 2024
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA OY0Q1
UT WOS:001210723600001
DA 2024-08-05
ER

PT J
AU Osei, SB
   Ma, ZC
   Huang, RB
AF Osei, Samuel Banning
   Ma, Zhongchen
   Huang, Rubing
TI Smart contract vulnerability detection using wide and deep neural
   network
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Smart contract; Vulnerability detection; Reentrancy; Timestamp; Wide and
   deep neural network
AB Smart contracts, integral to blockchain technology, automate agreements without intermediaries, ensuring transparency and security across various sectors. However, the immutable nature of blockchain exposes deployed contracts to potential risks if they contain vulnerabilities. Current approaches, including symbolic execution and graph-based machine learning, aim to ensure smart contract security. However, these methods suffer from limitations such as high false positive rates, heavy reliance on trained data, and over-generalization. The goal of this paper is to investigate the application of Wide and Deep Neural Networks in identifying vulnerabilities within smart contracts. We introduce WIDENNET, a method based on deep neural networks, designed to detect reentrancy and timestamp dependence vulnerabilities in smart contracts. Our approach involves extracting bytecodes from the contracts and converting them into Operational Codes (OPCODES), which are then transformed into distinct vector representations. These vectors are subsequently fed into the neural network to extract both complex and simple patterns for vulnerability detection. Testing on real-world datasets yielded an average accuracy of 83.07% and a precision of 83.13%. Our method offers a potential solution to mitigate vulnerabilities in blockchain applications.
C1 [Osei, Samuel Banning; Ma, Zhongchen] Jiangsu Univ, Sch Comp Sci & Commun Engn, Zhenjiang 212013, Jiangsu, Peoples R China.
   [Huang, Rubing] Macau Univ Sci & Technol, Sch Comp Sci & Engn, Taipa 999078, Macau, Peoples R China.
C3 Jiangsu University; Macau University of Science & Technology
RP Huang, RB (corresponding author), Macau Univ Sci & Technol, Sch Comp Sci & Engn, Taipa 999078, Macau, Peoples R China.
EM rbhuang@must.edu.mo
FU Science and Technology Development Fund of Macau, Macau SAR
   [0021/2023/RIA1, 0046/2021/A]; Faculty Research Grant of Macau
   University of Science and Technology [FRG-22-103-FIE]; Postdoctoral
   Science Foundation of China [2020M68151]; National Natural Science
   Foundation of China [61872167, 61502205]
FX We would like to thank the anonymous reviewers for their many
   constructive comments. This work is supported by the Science and
   Technology Development Fund of Macau, Macau SAR, under Grant Nos.
   0021/2023/RIA1 and 0046/2021/A, and a Faculty Research Grant of Macau
   University of Science and Technology under Grant No. FRG-22-103-FIE.
   This work is also in part supported by the Postdoctoral Science
   Foundation of China, under Grant No. 2020M68151, and the National
   Natural Science Foundation of China, under Grant Nos. 61872167 and
   61502205.
CR Alaskar H., 2020, P INT INT EN NETW CO, P143
   [Anonymous], ConsenSys Diligence, Mythril
   Buda M, 2018, NEURAL NETWORKS, V106, P249, DOI 10.1016/j.neunet.2018.07.011
   Cheng H.-T., 2016, DLRS RECSYS 2016, P7, DOI 10.1145/ 2988450.2988454
   Durieux T, 2020, PROC INT CONF SOFTW, P530, DOI 10.1145/3377811.3380364
   Eshghie M, 2021, PROCEEDINGS OF EVALUATION AND ASSESSMENT IN SOFTWARE ENGINEERING (EASE 2021), P305, DOI 10.1145/3463274.3463348
   Feist J, 2019, 2019 IEEE/ACM 2ND INTERNATIONAL WORKSHOP ON EMERGING TRENDS IN SOFTWARE ENGINEERING FOR BLOCKCHAIN (WETSEB 2019), P8, DOI 10.1109/WETSEB.2019.00008
   Fernando KRM, 2022, IEEE T NEUR NET LEAR, V33, P2940, DOI 10.1109/TNNLS.2020.3047335
   Geron A., 2022, Hands-on Machine Learning with Scikit-Learn, Keras, and TensorFlow
   Guo HF, 2018, Arxiv, DOI arXiv:1804.04950
   Hacken, Most common smart contract attacks
   Halgamuge MN, 2022, MULTIMED TOOLS APPL, V81, P1523, DOI 10.1007/s11042-021-11078-6
   Hwang SJ, 2022, IEEE ACCESS, V10, P32595, DOI 10.1109/ACCESS.2022.3162065
   Jiang F, 2023, ELECTRONICS-SWITZ, V12, DOI 10.3390/electronics12092046
   Tann WJW, 2019, Arxiv, DOI arXiv:1811.06632
   Kado C., 2023, P IEEE INT C PERV CO, P92
   Kaushal R.K., 2021, P 9 INT C REL INF TE, P1
   Lee JS, 2022, J INF SECUR APPL, V65, DOI 10.1016/j.jisa.2022.103117
   Liao JW, 2019, 2019 SIXTH INTERNATIONAL CONFERENCE ON INTERNET OF THINGS: SYSTEMS, MANAGEMENT AND SECURITY (IOTSMS), P458, DOI 10.1109/iotsms48152.2019.8939256
   Little J., 2020, pyevmasm-Ethereum Virtual Machine (EVM) disassembler and assembler
   Liu ZG, 2023, IEEE T KNOWL DATA EN, V35, P1296, DOI 10.1109/TKDE.2021.3095196
   Lutz O, 2021, Arxiv, DOI arXiv:2103.12607
   Luu L, 2016, CCS'16: PROCEEDINGS OF THE 2016 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P254, DOI 10.1145/2976749.2978309
   Ma C, 2023, J CLOUD COMPUT-ADV S, V12, DOI 10.1186/s13677-023-00459-x
   Mense A, 2014, IIWAS2018: THE 20TH INTERNATIONAL CONFERENCE ON INFORMATION INTEGRATION AND WEB-BASED APPLICATIONS & SERVICES, P375, DOI 10.1145/3282373.3282419
   Mikolov T., 2013, Advances in Neural Information Processing Systems, P3111
   Kipf TN, 2017, Arxiv, DOI arXiv:1609.02907
   Natarajan A, 2020, COMPUT CARDIOL CONF, DOI 10.22489/CinC.2020.107
   Oleghe O, 2020, J BIG DATA-GER, V7, DOI 10.1186/s40537-020-00367-w
   Pouyanfar S, 2018, IEEE 1ST CONFERENCE ON MULTIMEDIA INFORMATION PROCESSING AND RETRIEVAL (MIPR 2018), P112, DOI 10.1109/MIPR.2018.00027
   Qian Peng, 2023, WWW '23: Proceedings of the ACM Web Conference 2023, P2220, DOI 10.1145/3543507.3583367
   Qian P, 2020, IEEE ACCESS, V8, P19685, DOI 10.1109/ACCESS.2020.2969429
   Qiu D, 2020, SYMMETRY-BASEL, V12, DOI 10.3390/sym12020225
   SolAR, 2024, Sci. Comput. Program., V232
   Tikhomirov S, 2018, 2018 IEEE/ACM 1ST INTERNATIONAL WORKSHOP ON EMERGING TRENDS IN SOFTWARE ENGINEERING FOR BLOCKCHAIN (WETSEB), P9, DOI 10.1145/3194113.3194115
   Tsankov P, 2018, PROCEEDINGS OF THE 2018 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY (CCS'18), P67, DOI 10.1145/3243734.3243780
   Turjo Manoshi Das, 2021, Scientific Programming, DOI 10.1155/2021/6092792
   Veličkovic P, 2018, Arxiv, DOI arXiv:1710.10903
   Verma G, 2021, 2021 IEEE INTERNATIONAL PARALLEL AND DISTRIBUTED PROCESSING SYMPOSIUM WORKSHOPS (IPDPSW), P858, DOI 10.1109/IPDPSW52791.2021.00128
   Wang XY, 2023, M&SOM-MANUF SERV OP, V25, P2056, DOI 10.1287/msom.2022.1126
   Wang ZF, 2023, Arxiv, DOI arXiv:2303.04477
   Wood G., 2014, Ethereum Project Yellow Paper, V151, P1, DOI DOI 10.1017/CBO9781107415324.004
   Xiao-Bing W., 2021, J. Softw., V6, P1849
   Xu YK, 2022, SEP SCI TECHNOL, V57, P83, DOI 10.1080/01496395.2021.1884879
   Yang HW, 2024, SCI COMPUT PROGRAM, V234, DOI 10.1016/j.scico.2023.103076
   Zhang W, 2019, PROC INT SYMP SOFTW, P456, DOI 10.1109/ISSRE.2019.00052
   Zhao XF, 2017, INT CONF SYST INFORM, P1743, DOI 10.1109/ICSAI.2017.8248566
   Zheng ZB, 2018, IEEE T IND INFORM, V14, P1606, DOI 10.1109/TII.2017.2785963
   Zhuang Y, 2020, PROCEEDINGS OF THE TWENTY-NINTH INTERNATIONAL JOINT CONFERENCE ON ARTIFICIAL INTELLIGENCE, P3283
NR 49
TC 0
Z9 0
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC
PY 2024
VL 238
AR 103172
DI 10.1016/j.scico.2024.103172
EA JUL 2024
PG 11
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA YW2L5
UT WOS:001271455300001
DA 2024-08-05
ER

PT J
AU Hong, JM
   Shim, S
   Park, S
   Kim, TW
   Kim, J
   Lee, JS
   Ryu, S
   Kang, JH
AF Hong, Jaemin
   Shim, Sunghwan
   Park, Sanguk
   Kim, Tae Woo
   Kim, Jungwoo
   Lee, Junsoo
   Ryu, Sukyoung
   Kang, Jeehoon
TI Taming shared mutable states of operating systems in Rust
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Shared mutable state; Operating system; Rust
AB Operating systems (OSs) suffer from pervasive memory bugs. Their primary source is shared mutable states, crucial to low-level control and efficiency. The safety of shared mutable states is not guaranteed by C/C++, in which legacy OSs are typically written. Recently, researchers have adopted Rust into OS development to implement clean-slate OSs with fewer memory bugs. Rust ensures the safety of shared mutable states that follow the "aliasing XOR mutability" discipline via its type system. With the success of Rust in clean-slate OSs, the industry has become interested in rewriting legacy OSs in Rust. However, one of the most significant obstacles to this goal is shared mutable states that are aliased AND mutable (A&M). While they are essential to the performance of legacy OSs, Rust does not guarantee their safety. Instead, programmers have identified A&M states with the same reasoning principle dubbed an A&M pattern and implemented its modular abstraction to facilitate safety reasoning. This paper investigates modular abstractions for A&M patterns in legacy OSs. We present modular abstractions for six A&M patterns in the xv6 OS. Our investigation of Linux and clean-slate Rust OSs shows that the patterns are practical, as all of them are utilized in Linux, and the abstractions are original, as none of them are found in the Rust OSs. Using the abstractions, we implemented xv6(Rust), a complete rewrite of xv6 in Rust. The abstractions incur no run-time overhead compared to xv6 while reducing the reasoning cost of xv6(Rust) to the level of the clean-slate Rust OSs.
C1 [Hong, Jaemin; Shim, Sunghwan; Kim, Tae Woo; Kim, Jungwoo; Lee, Junsoo; Ryu, Sukyoung; Kang, Jeehoon] Korea Adv Inst Sci & Technol, 291 Daehak ro, Daejeon 34141, South Korea.
   [Park, Sanguk] FuriosaAI, 145 Dosan daero, Seoul 06036, South Korea.
C3 Korea Advanced Institute of Science & Technology (KAIST)
RP Hong, JM (corresponding author), Korea Adv Inst Sci & Technol, 291 Daehak ro, Daejeon 34141, South Korea.
EM jaemin.hong@kaist.ac.kr; sunghwan.shim@kaist.ac.kr; efenniht@furiosa.ai;
   taewoo.kim99@kaist.ac.kr; taewoo.kim99@kaist.ac.kr;
   junsoo.lee97@kaist.ac.kr; sryu.cs@kaist.ac.kr; jeehoon.kang@kaist.ac.kr
OI Hong, Jaemin/0000-0003-4067-7369
FU National Research Foundation of Korea (NRF) [2021R1A5A1021944,
   2022R1A2C200366011]; Korea govern-ment (MSIT) [2022-0-00460]; Samsung
   Electronics Co., Ltd. [G01210570]; Samsung Research Funding 8r
   Incubation Center of Samsung Electronics [SRFC-IT2201-06]
FX <B>Acknowledgements</B> This work was supported by National Research
   Foundation of Korea (NRF) [grant numbers 2021R1A5A1021944,
   2022R1A2C200366011] ; Institute for Information 8r Communications
   Technology Promotion (IITP) funded by the Korea govern-ment (MSIT)
   [grant number 2022-0-00460] ; Samsung Electronics Co., Ltd. [grant
   number G01210570] ; and Samsung Research Funding 8r Incubation Center of
   Samsung Electronics [grant number SRFC-IT2201-06] .
CR Alkassar E, 2010, LECT NOTES COMPUT SC, V6217, P40, DOI 10.1007/978-3-642-15057-9_3
   Amanieu d'Antras, 2022, Crate parkinglot
   [Anonymous], 2022, Miri
   [Anonymous], 2022, Struct std::cell::RefCell
   [Anonymous], 2022, Using RCU to protect read-mostly linked lists
   [Anonymous], 2022, Crate reffers
   [Anonymous], 2018, The Rust RFC book, 2585-unsafe-block-in-unsafe-fn
   [Anonymous], 2022, Struct std::rc::Rc
   [Anonymous], 2024, The Rust reference: Lifetime elision
   [Anonymous], 2022, Module std::pin
   [Anonymous], 2022, The Rust programming language
   [Anonymous], 2021, Netstack3-a Fuchsia owned rust based netstack
   [Anonymous], 2011, Std::mutex
   [Anonymous], 2015, The Rust unstable book: threadlocal
   [Anonymous], 2018, IEEE Std 1709-2018 (Revision of IEEE Std 1709-2010), P1, DOI DOI 10.1109/IEEESTD.2018.8423800
   [Anonymous], 2022, Struct std::cell::Cell
   [Anonymous], 2021, Crate rental
   [Anonymous], 2017, The Rust RFC book
   [Anonymous], 2022, Struct std::sync::Mutex
   [Anonymous], 2022, Struct std::sync::Arc
   [Anonymous], 2018, Ubuntu 18.04 LTS (Bionic Beaver)
   [Anonymous], 2011, std::lockguard
   [Anonymous], 2022, Fuchsia guides: Rust
   Arcangeli A, 2003, USENIX ASSOCIATION PROCEEDINGS OF THE FREENIX TRACK, P297
   Astrauskas V, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360573
   Astrauskas V, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428204
   Bai XL, 2020, CCS '20: PROCEEDINGS OF THE 2020 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P1185, DOI 10.1145/3372297.3423357
   Ballesteros J., 2022, Clive
   Barras Bruno, 1997, The Coq proof assistant reference manual: Version 6.1
   Beingessner Alexis Kenneth, 2016, You can't spell trust without Rust
   Bellard F, 2005, USENIX Association Proceedings of the FREENIX/Open Source Track, P41
   Bershad B. N., 1995, Operating Systems Review, V29, P267, DOI 10.1145/224057.224077
   Bonwick J., 1994, P USENIX SUMM 1994 T, P6
   Boos Kevin, 2020, P 14 USENIX C OP SYS
   Bradshaw Kyle, 2021, Google is officially releasing its Fuchsia OS, starting w/ first-gen nest hub
   Chen H., 2011, Proceedings of the Second Asia-Pacific Workshop on Systems, DOI DOI 10.1145/2103799.2103805
   Cox Russ, 2011, Robert Morris, xv6, a simple Unix-like teaching operating system
   Cutler C, 2018, PROCEEDINGS OF THE 13TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P89
   Dang HH, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371102
   dAntras Amanieu, 2021, Crate intrusivecollections
   De Simone Sergio, 2022, Linux 6.1 Officially Adds Support for Rust in the Kernel
   Drepper Ulrich, 2013, ELF handling for thread-local storage
   Duan JH, 2020, 2020 IEEE SECURE DEVELOPMENT (SECDEV 2020), P15, DOI 10.1109/SecDev45635.2020.00018
   Elliott AS, 2018, 2018 IEEE CYBERSECURITY DEVELOPMENT CONFERENCE (SECDEV 2018), P53, DOI 10.1109/SecDev.2018.00015
   Golm M, 2002, USENIX ASSOCIATION PROCEEDINGS OF THE GENERAL TRACK, P45
   Goregaokar Manish, 2017, Fearless concurrency in Firefox Quantum
   Gu RH, 2016, PROCEEDINGS OF OSDI'16: 12TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P653
   Hodge John, 2021, Tifflin experimental kernel
   Hong Jaemin, 2022, xv6, a complete rewrite of xv6 in Rust
   Hunt Galen C., 2007, Operating Systems Review, V41, P37, DOI 10.1145/1243418.1243424
   Isaiah Ayooluwa, 2021, Rewriting the GNU coreutils in Rust
   ISO, 2020, Programming languages-C++, Standard ISO/IEC 14882:2020
   Jayakar Sujay, 2020, Rewriting the heart of our sync engine
   Jones Dave, 2022, Trinity: Linux system call fuzzer
   Jung R, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371109
   Jung R, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158154
   Jung Ralf, 2022, Exclude mutable references to!unpin types from uniqueness guarantees
   Jung Ralf, 2019, Stacked borrows vs self-referential structs
   Kim K, 2020, 27TH ANNUAL NETWORK AND DISTRIBUTED SYSTEM SECURITY SYMPOSIUM (NDSS 2020), DOI 10.14722/ndss.2020.24018
   Kivity A., 2007, Proceedings of the Linux Symposium, V1, P225
   Klein G, 2009, SOSP'09: PROCEEDINGS OF THE TWENTY-SECOND ACM SIGOPS SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P207
   Lankes Stefan, 2020, High Performance Computing. ISC High Performance 2020 International Workshops. Revised Selected Papers. Lecture Notes in Computer Science (LNCS 12321), P331, DOI 10.1007/978-3-030-59851-8_22
   Launchbury J., 1995, LISP and Symbolic Computation, V8, P293, DOI 10.1007/BF01018827
   Lee K, 2019, PLOS'19: PROCEEDINGS OF THE 10TH WORKSHOP ON PROGRAMMING LANGUAGES AND OPERATING SYSTEMS, P16, DOI 10.1145/3365137.3365403
   Levy A, 2017, PROCEEDINGS OF THE TWENTY-SIXTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES (SOSP '17), P234, DOI 10.1145/3132747.3132786
   Lobel Marvin, 2020, Crate owningref
   Machiry A, 2017, PROCEEDINGS OF THE 26TH USENIX SECURITY SYMPOSIUM (USENIX SECURITY '17), P1007
   Maros Joshua, 2022, Crate ouroboros
   Matsakis ND., 2014, Ada Lett, V34, P103, DOI [10.1145/2663171.2663188, DOI 10.1145/2663171.2663188, 10.1145/2692956.2663188]
   McVoy L, 1996, PROCEEDINGS OF THE USENIX 1996 ANNUAL TECHNICAL CONFERENCE, P279
   Narayanan V, 2020, PROCEEDINGS OF THE 14TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION (OSDI '20), P21
   Nelson L, 2017, PROCEEDINGS OF THE TWENTY-SIXTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES (SOSP '17), P252, DOI 10.1145/3132747.3132748
   Nipkow T, 2002, LNCS, V2283, DOI [DOI 10.1007/3-540-45949-9, 10.1007/3-540-45949-9]
   Peters Jim, 2022, Crate qcell
   Picheta Dominik, 2021, Nimkernel
   Printzell Dan, 2019, PowerNex
   Qi ChengXiang, 2023, xv6-rust
   REDELL DD, 1980, COMMUN ACM, V23, P81, DOI 10.1145/358818.358822
   Redis, 2022, about us
   rust -lang, 2022, Behavior considered undefined
   rust -lang, 2022, The Rust standard library
   rust -lang, 2022, Struct std::boxed::Box
   Schumilo S, 2017, PROCEEDINGS OF THE 26TH USENIX SECURITY SYMPOSIUM (USENIX SECURITY '17), P167
   Thomas Gavin, 2019, A proactive approach to more secure code
   Triplett Josh, 2022, Rust for Linux
   van de Nes Mathijs, 2022, Crate spin
   Vander Stoep Jeff, 2021, Rust in the Android platform
   Vyukov Dmitry, 2022, Syzkaller-kernel fuzzer
   XArray, 2022, About us
   Yanovski J, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3473597
NR 90
TC 0
Z9 0
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC
PY 2024
VL 238
AR 103152
DI 10.1016/j.scico.2024.103152
EA JUN 2024
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA WA2Q8
UT WOS:001252087400001
DA 2024-08-05
ER

PT J
AU Kang, BYJ
   Bae, K
AF Kang, Byeongjee
   Bae, Kyungmin
TI Narrowing and heuristic search for symbolic reachability analysis of
   concurrent object-oriented systems
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Symbolic reachability analysis; Rewriting logic; Narrowing; Heuristic
   search
ID STATE-SPACE REDUCTION; PARTIAL ORDER REDUCTION; MODEL CHECKING;
   ALGORITHMS; MAUDE
AB A concurrent system specified as a rewrite theory can be analyzed symbolically using narrowingbased reachability analysis. Narrowing -based approaches have been applied to formally analyze cryptographic protocols and parameterized protocols. However, existing narrowing -based analysis methods, based on a breadth -first -search strategy, cannot deal with generic distributed systems with objects and messages due to the symbolic state -space explosion problem and implicit constraints imposed on object -oriented systems. This paper proposes a heuristic search approach for narrowing -based reachability analysis to guide the search for counterexamples with a small number of objects. As a result, our method can effectively find a counterexample if an error state is reachable. In addition, this paper also shows how to encode implicit object -oriented constraints using order -sorted signatures and equational constraints. We demonstrate the effectiveness of our technique using a nontrivial distributed consensus algorithm.
C1 [Bae, Kyungmin] Pohang Univ Sci & Technol, Pohang, South Korea.
   [Kang, Byeongjee] Carnegie Mellon Univ, Pittsburgh, PA USA.
C3 Pohang University of Science & Technology (POSTECH); Carnegie Mellon
   University
RP Bae, K (corresponding author), Pohang Univ Sci & Technol, Pohang, South Korea.
EM byeongjee@cmu.edu; kmbae@postech.ac.kr
FU National Research Foundation of Korea (NRF) - Korea government (MSIT)
   [NRF-2021R1A5A1021944]; Institute of Information & communications
   Technology Planning & Evaluation (IITP) - Korea government (MSIT)
   [2022-0-00103]
FX This work was partly supported by the National Research Foundation of
   Korea (NRF) grant funded by the Korea government (MSIT)
   (NRF-2021R1A5A1021944) and Institute of Information & communications
   Technology Planning & Evaluation (IITP) grant funded by the Korea
   government (MSIT) (No. 2022-0-00103) .
CR Alba E, 2007, LECT NOTES COMPUT SC, V4739, P523
   Bae K., 2013, LIPICS, V21, P81
   Bae K, 2019, SCI COMPUT PROGRAM, V178, P20, DOI 10.1016/j.scico.2019.03.006
   Bae K, 2017, LECT NOTES COMPUT SC, V10487, P78, DOI 10.1007/978-3-319-68034-7_5
   Bae K, 2014, LECT NOTES COMPUT SC, V8663, P113, DOI 10.1007/978-3-319-12904-4_6
   Bae K, 2015, SCI COMPUT PROGRAM, V103, P13, DOI 10.1016/j.scico.2014.09.011
   Bae K, 2012, ELECTRON PROC THEOR, P5, DOI 10.4204/EPTCS.105.2
   Bae K, 2012, SCI COMPUT PROGRAM, V77, P1235, DOI 10.1016/j.scico.2010.10.002
   Basin David, 2017, ACM SIGLOG News, V4, P19, DOI 10.1145/3157831.3157835
   Bobba R., 2018, ASSURED CLOUD COMPUT, P10
   Charron-Bost B, 2009, DISTRIB COMPUT, V22, P49, DOI 10.1007/s00446-009-0084-6
   Cholewa A., 2014, Tech. Rep., Technical report
   Cholewa A, 2015, SCI COMPUT PROGRAM, V112, P24, DOI 10.1016/j.scico.2015.06.001
   Clavel M., 2007, All About Maude, A High-Performance Logical Framework, volume 4350 of Lecture Notes in Computer Science, V4350
   Clavel M., 2023, Tech. rep.
   Comon-Lundh H, 2005, LECT NOTES COMPUT SC, V3467, P294
   Drager Klaus, 2009, International Journal on Software Tools for Technology Transfer, V11, P27, DOI 10.1007/s10009-008-0092-z
   Durán F, 2022, LECT NOTES ARTIF INT, V13385, P529, DOI 10.1007/978-3-031-10769-6_31
   Edelkamp S., 2004, International Journal on Software Tools for Technology Transfer, V5, P247, DOI 10.1007/s10009-002-0104-3
   Edelkamp S, 2012, HEURISTIC SEARCH: THEORY AND APPLICATIONS, P1
   Edelkamp S., 2001, Model Checking Software. 8th International SPIN Workshop. Proceedings (Lecture Notes in Computer Science Vol.2057), P57
   Edelkamp S., 2001, ELECT NOTES THEORETI, V55, P343
   Edelkamp S, 2009, LECT NOTES COMPUT SC, V5348, P65
   Escobar S, 2007, LECT NOTES COMPUT SC, V4533, P153
   Escobar S, 2014, INFORM COMPUT, V238, P157, DOI 10.1016/j.ic.2014.07.007
   Escobar S, 2012, J LOGIC ALGEBR PROGR, V81, P898, DOI 10.1016/j.jlap.2012.01.002
   Escobar S, 2009, LECT NOTES COMPUT SC, V5705, P1, DOI 10.1007/978-3-642-03829-7_1
   Farzan A, 2006, LECT NOTES COMPUT SC, V4019, P142
   Farzan A, 2007, ELECTRON NOTES THEOR, V176, P61, DOI 10.1016/j.entcs.2007.06.008
   Fraer R., 2000, LNCS, V1855, P389
   Grov J., 2014, Formal Modeling and Analysis of Google's Megastore in Real-Time Maude, Specification, Algebra, and Software: Essays Dedicated to Kokichi Futatsugi, P494
   Hansen E., 2002, Abstraction, Reformulation, and Approximation. 5th International Symposium, SARA 2002. Proceedings (Lecture Notes in Artificial Intelligence Vol.2371), P83
   Rios LHO, 2010, LECT NOTES ARTIF INT, V6404, P253, DOI 10.1007/978-3-642-16138-4_26
   Hullot Jean-Marie., 1980, CADE, volume 87 of Lecture Notes in Computer Science, V87, P318
   Jensen RM, 2002, EIGHTEENTH NATIONAL CONFERENCE ON ARTIFICIAL INTELLIGENCE (AAAI-02)/FOURTEENTH INNOVATIVE APPLICATIONS OF ARTIFICIAL INTELLIGENCE CONFERENCE (IAAI-02), PROCEEDINGS, P668
   John Annu, 2013, Model Checking Software. 20th International Symposium, SPIN 2013. Proceedings, P209, DOI 10.1007/978-3-642-39176-7_14
   John A, 2013, 2013 FORMAL METHODS IN COMPUTER-AIDED DESIGN (FMCAD), P201
   JOUANNAUD JP, 1983, LECT NOTES COMPUT SC, V154, P361
   Kang Byeongjee, 2022, FTSCS 2022: Proceedings of the 8th ACM SIGPLAN International Workshop on Formal Techniques for Safety-Critical Systems, P34, DOI 10.1145/3563822.3568017
   Kang B., 2022, Supplementary materials
   Konnov I, 2017, INFORM COMPUT, V252, P95, DOI 10.1016/j.ic.2016.03.006
   Kupferschmid S, 2006, LECT NOTES COMPUT SC, V3925, P35
   Kyungmin Bae, 2014, Rewriting and Typed Lambda Calculi. Joint International Conference, RTA-TLCA 2014, Held as Part of the Vienna Summer of Logic, VSL 2014. Proceedings: LNCS 8560, P61, DOI 10.1007/978-3-319-08918-8_5
   Lee J, 2022, INT J SOFTW TOOLS TE, V24, P911, DOI 10.1007/s10009-022-00665-z
   Lien E, 2009, SEFM 2009: SEVENTH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING AND FORMAL METHODS, P273, DOI 10.1109/SEFM.2009.11
   Liu S, 2019, FORM ASP COMPUT, V31, P503, DOI 10.1007/s00165-019-00489-w
   Lluch Lafuente A., 2012, LNCS, V7635, P430
   Lluch-Lafuente A, 2002, LECT NOTES COMPUT SC, V2318, P112
   Lopez-rueda Raul, 2022, Formal Methods and Software Engineering: 23rd International Conference on Formal Engineering Methods, ICFEM 2022, Proceedings. Lecture Notes in Computer Science (13478), P20, DOI 10.1007/978-3-031-17244-1_2
   Lucas S, 2016, J LOG ALGEBR METHODS, V85, P67, DOI 10.1016/j.jlamp.2015.06.001
   Martí-Oliet N, 2005, ELECTRON NOTES THEOR, V137, P105, DOI 10.1016/j.entcs.2005.01.041
   Meseguer J., 2007, Higher-Order and Symbolic Computation, V20, P123, DOI 10.1007/s10990-007-9000-6
   MESEGUER J, 1992, THEOR COMPUT SCI, V96, P73, DOI 10.1016/0304-3975(92)90182-F
   Meseguer J, 1998, LECT NOTES COMPUT SC, V1376, P18
   Meseguer J, 2008, THEOR COMPUT SCI, V403, P239, DOI 10.1016/j.tcs.2008.04.040
   Meseguer J, 2020, J LOG ALGEBR METHODS, V110, DOI 10.1016/j.jlamp.2019.100483
   Meseguer J, 2012, J LOGIC ALGEBR PROGR, V81, P721, DOI 10.1016/j.jlap.2012.06.003
   Ölveczky PC, 2006, FORM METHOD SYST DES, V29, P253, DOI 10.1007/s10703-006-0015-0
   Olveczky P.C., 2017, Designing Reliable Distributed Systems
   Ölveczky PC, 2009, THEOR COMPUT SCI, V410, P254, DOI 10.1016/j.tcs.2008.09.022
   Reffel F, 1999, LECT NOTES COMPUT SC, V1708, P195
   Riesco A, 2009, ELECTRON NOTES THEOR, V238, P249, DOI 10.1016/j.entcs.2009.05.023
   Rocha C, 2017, J LOG ALGEBR METHODS, V86, P269, DOI 10.1016/j.jlamp.2016.10.001
   Skeirik S, 2020, FUND INFORM, V173, P315, DOI 10.3233/FI-2020-1926
   Tsuchiya T, 2011, DISTRIB COMPUT, V23, P341, DOI 10.1007/s00446-010-0123-3
   Verdejo A., 2003, Formal Aspects of Computing, V14, P228, DOI 10.1007/s001650300003
   Wirsing M, 2002, THEOR COMPUT SCI, V285, P519, DOI 10.1016/S0304-3975(01)00367-X
   Yang CH, 1998, 1998 DESIGN AUTOMATION CONFERENCE, PROCEEDINGS, P599, DOI 10.1109/DAC.1998.724542
NR 68
TC 0
Z9 0
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUL
PY 2024
VL 235
AR 103097
DI 10.1016/j.scico.2024.103097
EA MAR 2024
PG 31
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA OH4E0
UT WOS:001206359100001
DA 2024-08-05
ER

PT J
AU Thierry-Mieg, Y
   Renault, E
   Paviot-Adet, E
   Poitrenaud, D
AF Thierry-Mieg, Yann
   Renault, Etienne
   Paviot-Adet, Emmanuel
   Poitrenaud, Denis
TI A model-checker exploiting structural reductions even with stutter
   sensitive LTL
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Model-checking; LTL; Stutter-sensitivity; Automata; Structural reduction
AB In [1] we proposed to verify LTL properties using a fine grain analysis classifying formulae into four classes (stutter, shortening, lengthening insensitive or none of these). With this classification we extend the applicability of structural reduction to two new classes of formulas, when classical techniques are only applicable for stutter insensitive formulas. This comes at the price of a semidecision procedure where only some verdicts are reliable. In this paper, we present an implementation of this approach, built as an extension to the ITSTools model-checker that relies on the Spot library to analyze automata. This new approach significantly improves the ITS-tools model-checker when verifying properties that are not stutter insensitive. It can also be used as a front-end simplification step for any other model-checker.
C1 [Thierry-Mieg, Yann; Paviot-Adet, Emmanuel; Poitrenaud, Denis] Sorbonne Univ, LIP6, CNRS, Paris, France.
   [Renault, Etienne] LRE, EPITA, Le Kremlin Bicetre, France.
   [Paviot-Adet, Emmanuel; Poitrenaud, Denis] Univ Paris Cite, Paris, France.
C3 Centre National de la Recherche Scientifique (CNRS); Sorbonne
   Universite; Universite Paris Cite
RP Renault, E (corresponding author), LRE, EPITA, Le Kremlin Bicetre, France.
EM renault@lrde.epita.fr
OI RENAULT, Etienne/0000-0001-9013-4413
CR Babiak T, 2015, LECT NOTES COMPUT SC, V9206, P479, DOI 10.1007/978-3-319-21690-4_31
   BERTHELOT G, 1986, LECT NOTES COMPUT SC, V222, P19
   David A, 2012, LECT NOTES COMPUT SC, V7214, P492, DOI 10.1007/978-3-642-28756-5_36
   Duret-Lutz A, 2004, IEEE COMPUTER SOCIETY'S 12TH ANNUAL INTERNATIONAL SYMPOSIUM ON MODELING, ANALYSIS, AND SIMULATION OF COMPUTER AND TELECOMMUNICATIONS SYSTEMS - PROCEEDINGS, P76, DOI 10.1109/MASCOT.2004.1348184
   Duret-Lutz A, 2022, LECT NOTES COMPUT SC, V13372, P174, DOI 10.1007/978-3-031-13188-2_9
   Duret-Lutz A, 2016, LECT NOTES COMPUT SC, V9938, P122, DOI 10.1007/978-3-319-46520-3_8
   Dwyer M. B., 1998, Proceedings of FMSP'98. Second Workshop on Formal Methods in Software Practice, P7, DOI 10.1145/298595.298598
   Etessami K., 2000, CONCUR 2000 - Concurrency Theory. 11th International Conference. Proceedings (Lecture Notes in Computer Science Vol.1877), P153
   Howar Falk, 2021, International Journal on Software Tools for Technology Transfer, P917, DOI 10.1007/s10009-021-00617-z
   Kordon F, 2021, Complete results for the 2021 edition of the model checking contest
   Paviot-Adet E, 2022, LECT NOTES COMPUT SC, V13273, P170, DOI 10.1007/978-3-031-08679-3_11
   Peled D.A., 1996, DIMACS Series in Discrete Mathematics and Theoretical Computer Science, V29
   Somenzi F., 2000, LNCS, V1855, P247
   Thierry-Mieg Yann, 2015, Tools and Algorithms for the Construction and Analysis of Systems. 21st International Conference, TACAS 2015, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2015. Proceedings: LNCS 9035, P231, DOI 10.1007/978-3-662-46681-0_20
   Thierry-Mieg Y, 2020, LECT NOTES COMPUT SC, V12152, P303, DOI 10.1007/978-3-030-51831-8_15
NR 15
TC 0
Z9 0
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUL
PY 2024
VL 235
AR 103089
DI 10.1016/j.scico.2024.103089
EA FEB 2024
PG 5
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA MW9X8
UT WOS:001196802600001
DA 2024-08-05
ER

PT J
AU Cubillos, J
   Aponte, J
   Gomez, D
   Rojas, E
AF Cubillos, Juan
   Aponte, Jairo
   Gomez, Diana
   Rojas, Edwar
TI Agile effort estimation in Colombia: An assessment and opportunities for
   improvement
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Effort estimation; Agile effort estimation; Agile software development;
   Software development effort estimation; Software measurement
ID SOFTWARE-DEVELOPMENT; ACCURACY; MODEL
AB Effort estimation is fundamental for the development of software projects and critical to their success. The objective of this paper is to understand how Colombian agile practitioners perform effort estimates and to identify opportunities for improvement based on these results. For this purpose, we conducted an exploratory survey study using as instrument an on-line questionnaire answered by agile practitioners with experience in effort estimation. Data was collected from 60 agile practitioners and the main findings are: (1) Agile practitioners prefer non-algorithmic estimation techniques, mainly those based on Expert Judgment. (2) Most of the respondents perceive that their estimates have a medium accuracy level; however, in most cases, no formal analysis of the accuracy level is carried out. (3) The determining effort predictors/cost drivers are characteristics of the project team (size, experience, and skills) and attributes of the software to be built (complexity, type, and domain). (4) The use of datasets for estimation is not common; proprietary datasets predominate and are used for productivity comparisons within the company. (5) Most of the results of related studies are comparable with ours; however, there are significant differences in terms of the roles involved and the techniques used in the effort estimation process. Based on the results and findings of the survey, we identified key opportunities to improve estimation accuracy through (1) software measurement standardization, (2) use of effort datasets, (3) implementation of techniques for measuring accuracy levels, and (4) knowledge management in effort estimation.
C1 [Cubillos, Juan; Aponte, Jairo; Gomez, Diana; Rojas, Edwar] Univ Nacl Colombia, Fac Ingn, Ciudad Univ, Bogota, Colombia.
C3 Universidad Nacional de Colombia
RP Cubillos, J (corresponding author), Univ Nacl Colombia, Fac Ingn, Ciudad Univ, Bogota, Colombia.
EM jmcubillosa@unal.edu.co; jhaponte@unal.edu.co; dgomez@unal.edu.co;
   erojas@unal.edu.co
CR Abrahamsson P, 2011, INT SYMP EMP SOFTWAR, P400, DOI 10.1109/ESEM.2011.58
   Abran A, 2015, SOFTWARE PROJECT ESTIMATION: THE FUNDAMENTALS FOR PROVIDING HIGH QUALITY INFORMATION TO DECISION MAKERS, P161
   Abualkishik AZ, 2017, INFORM SOFTWARE TECH, V86, P1, DOI 10.1016/j.infsof.2017.02.005
   [Anonymous], 2022, Survey-English version
   [Anonymous], 2004, GUID PROJ MAN BOD KN, V3rd
   Arnuphaptrairong Tharwon, 2016, International Multiconference of Engineers and Computer Scientists 2016 (IMECS). Proceedings, P668
   Bardsiri A.K., 2015, J. Telecommun. Electron. Comput. Eng., V7, P87
   Bardsiri VK, 2013, SOFTWARE QUAL J, V21, P501, DOI 10.1007/s11219-012-9183-x
   Bosu MF, 2019, ACM J DATA INF QUAL, V11, DOI 10.1145/3328746
   Chemuturi M., 2009, Software estimation best practices, tools techniques: A complete guide for software project estimators
   Dejaeger K, 2012, IEEE T SOFTWARE ENG, V38, P375, DOI 10.1109/TSE.2011.55
   Fernández-Diego M, 2020, IEEE ACCESS, V8, P166768, DOI 10.1109/ACCESS.2020.3021664
   Gomez D., 2023, CIBSE 2023
   Gonzalez-Ladron-De-Guevara F., 2014, INT S EMP SOFTW ENG
   Halimawan N., 2021, ICIC Express Lett., V15, P1109
   Haugen NC, 2006, AGILE 2006, PROCEEDINGS, P23, DOI 10.1109/AGILE.2006.16
   Hoc H.T., 2023, LNNS, V596
   Idri A, 2018, J SOFTW-EVOL PROC, V30, DOI 10.1002/smr.1925
   Idri A, 2016, STUD COMPUT INTELL, V653, P1, DOI 10.1007/978-3-319-33810-1_1
   IFPUG, 2021, Simple Function Point (SFP) Counting Practices Manual
   IFPUG, 2023, IFPUG
   ISBSG, 2023, ISBSG-international software benchmarking standards group
   ISO/IEC, 2007, ISO14143-1 Information Technology-Software Measurement-Functional Size Measurement
   JASP Team, 2022, JASP VERS 0 16 3 COM
   Kitchenham B. A., 2001, IEE Proceedings-Software, V148, P81, DOI 10.1049/ip-sen:20010506
   Kocaguneli E, 2012, IEEE T SOFTWARE ENG, V38, P1403, DOI 10.1109/TSE.2011.111
   Kodmelwar M.K., 2019, Int. J. Recent Technol. Eng., V7, P111
   Lavazza L, 2012, PROCEEDINGS OF THE 2012 JOINT CONFERENCE OF THE 22ND INTERNATIONAL WORKSHOP ON SOFTWARE MEASUREMENT AND THE 2012 SEVENTH INTERNATIONAL CONFERENCE ON SOFTWARE PROCESS AND PRODUCT MEASUREMENT (IWSM-MENSURA 2012), P221, DOI 10.1109/IWSM-MENSURA.2012.39
   Linaker J., 2015, Guidelines for Conducting Surveys in Software Engineering
   Mahmood Y, 2022, SOFTWARE PRACT EXPER, V52, P39, DOI 10.1002/spe.3009
   Mahnic V, 2012, J SYST SOFTWARE, V85, P2086, DOI 10.1016/j.jss.2012.04.005
   MAJCHRZAK M., 2016, Central and Eastern European Journal of Management and Economics (CEEJME), P261
   Malgonde O, 2019, EMPIR SOFTW ENG, V24, P1017, DOI 10.1007/s10664-018-9647-0
   Meli R., 2014, Simple Function Point-Functional Size Measurement Method Reference Manual-v01.01, P30
   Meli R., 2011, SOFTWARE MEASUREMENT
   Meli R., 2011, UKSMA COSMIC C 22 AN
   Meli R., 2011, SOFTW MEAS EUR FORM
   Menzies T, 2012, EMPIR SOFTW ENG, V17, P1, DOI 10.1007/s10664-011-9193-5
   Molokken K, 2003, 2003 INTERNATIONAL SYMPOSIUM ON EMPIRICAL SOFTWARE ENGINEERING, PROCEEDINGS, P223, DOI 10.1109/ISESE.2003.1237981
   Practice P.M.I., 2019, Standard for Project Estimating, V1st
   Prokopova Z., 2019, Analysis of the Software Project Estimation Process: A Case Study, V984
   QSM, 2023, QSM software project database-QSM SLIM-estimate
   Quesada-Lopez C., 2014, P 8 ACM IEEE INT S E
   Ramessur Melvina Autar, 2020, Advanced Computing and Intelligent Engineering. Proceedings of ICACIE 2018. Advances in Intelligent Systems and Computing (AISC 1089), P507, DOI 10.1007/978-981-15-1483-8_43
   Rosa W, 2023, J SYST SOFTWARE, V203, DOI 10.1016/j.jss.2023.111739
   Saeed A, 2018, PROCEEDINGS OF 2018 7TH INTERNATIONAL CONFERENCE ON SOFTWARE AND COMPUTER APPLICATIONS (ICSCA 2018), P82, DOI 10.1145/3185089.3185140
   Sampath Kumar P., 2021, Improving Accuracy of Software Estimation Using Stacking Ensemble Method, P219
   Saunders M.N.K., 2015, RES METHODS BUSINESS
   Setiadi Ahmad, 2021, 2021 International Seminar on Intelligent Technology and Its Applications (ISITIA), P197, DOI 10.1109/ISITIA52817.2021.9502208
   Standish Group, 2018, Standish Group Report
   Stensrud E, 2002, EIGHTH IEEE SYMPOSIUM ON SOFTWARE METRICS, PROCEEDINGS, P3, DOI 10.1109/METRIC.2002.1011320
   Trendowicz A., 2014, Software project effort estimation: Foundations and best practice guidelines for success
   Unlu H., 2021, 2021 TURK NAT SOFTW
   Usman M., 2014, PROC INT C PREDICTIV, P82
   Usman M., 2015, ACM INT C P SERIES, V27, P10
   Vera T., 2018, Survey of Software Development Effort Estimation Taxonomies
   Vera T., 2018, Understanding the Software Development Effort Estimation in Chilean Small
   Verner J, 2007, PROCEEDINGS OF THE SECOND INTERNATIONAL CONFERENCE ON RESEARCH CHALLENGES IN INFORMATION SCIENCE: RCIS 2008, P71
   Wen JF, 2012, INFORM SOFTWARE TECH, V54, P41, DOI 10.1016/j.infsof.2011.09.002
NR 59
TC 0
Z9 0
U1 1
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP
PY 2024
VL 236
AR 103115
DI 10.1016/j.scico.2024.103115
EA APR 2024
PG 16
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA RH9Y6
UT WOS:001226903800003
OA hybrid
DA 2024-08-05
ER

PT J
AU Dong, YK
   Cheng, XT
   Yang, YF
   Zhang, LL
   Wang, SQ
   Kong, LJ
AF Dong, Yukun
   Cheng, Xiaotong
   Yang, Yufei
   Zhang, Lulu
   Wang, Shuqi
   Kong, Lingjie
TI A method to identify overfitting program repair patches based on
   expression tree
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Overfitting patch; Test input generation; Automatic program repair;
   Expression tree; Coverage criteria
AB The primary aim of Automatic Program Repair (APR) is to automatically repair defective programs, with the intention of reducing the amount of effort required by developers. However, APR techniques may produce overfitting patches that do not truly repair the program, allowing the program to pass all test cases. This paper provides a comprehensive review of the overfitting problem and adds to the existing research on overfitting in conditional statements. Our proposed method, ETPAT (Expression Tree -based Patch Assessment Technique), implements expression trees and targeted coverage criteria to identify differences between the original and the patched program. We utilize ETPAT to verify test case adequacy. In parallel, ETPAT also guides the generation of corresponding test cases via equivalence class information, which may be added to the original test suite, making it more robust while also preventing the repair technique from generating comparable overfitting patches. With reference to the patch set in the BuggyJavaJML benchmark, ETPAT recognized 77/82 (93.9%) overfitting patches out of 120 patches related to conditional constraints, displaying superior accuracy rates and fewer test cases required than the original repair tool.
C1 [Dong, Yukun; Cheng, Xiaotong; Yang, Yufei; Zhang, Lulu; Wang, Shuqi; Kong, Lingjie] China Univ Petr East China, Qingdao Inst Software, Coll Comp Sci & Technol, 66 Changjiang West Rd, Qingdao, Shandong, Peoples R China.
C3 China University of Petroleum
RP Dong, YK (corresponding author), China Univ Petr East China, Qingdao Inst Software, Coll Comp Sci & Technol, 66 Changjiang West Rd, Qingdao, Shandong, Peoples R China.
EM dongyk@upc.edu.cn
OI , Yukun Dong/0000-0003-0787-5806
FU Shandong Provincial Natural Science Foundation [ZR2021MF058]
FX <B>Acknowledgements</B> This work was supported by the Shandong
   Provincial Natural Science Foundation (ZR2021MF058) .
CR Ammann P., 2016, Introduction to Software Testing
   Chakraborty S., 2018, Codit: code editing with tree-based neuralmachine translation
   Chen T. Y., 1999, Proceedings Sixth Asia Pacific Software Engineering Conference (ASPEC'99) (Cat. No.PR00509), P606, DOI 10.1109/APSEC.1999.809656
   Chen TY, 1996, INFORM PROCESS LETT, V60, P135, DOI 10.1016/S0020-0190(96)00135-4
   Chilenski J.J., 2001, INVESTIGATION 3 FORM
   CHILENSKI JJ, 1994, SOFTWARE ENG J, V9, P193, DOI 10.1049/sej.1994.0025
   Coles H., 2016, P 25 INT S SOFTWARE, P449
   Durieux T, 2019, ESEC/FSE'2019: PROCEEDINGS OF THE 2019 27TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P302, DOI 10.1145/3338906.3338911
   Durieux T, 2016, 2016 IEEE/ACM 11TH INTERNATIONAL WORKSHOP IN AUTOMATION OF SOFTWARE TEST (AST), P85, DOI [10.1145/2896921.2896931, 10.1109/AST.2016.021]
   Gargantini A, 2011, INFORM SOFTWARE TECH, V53, P1263, DOI 10.1016/j.infsof.2011.06.008
   Ginelli D, 2022, EMPIR SOFTW ENG, V27, DOI 10.1007/s10664-021-10100-7
   Hallé S, 2022, FME WORKS FORM, P23, DOI 10.1145/3524482.3527659
   He Y., 2019, Automated patch assessment for program repair at scale, DOI [10.1007/s10664-020-09920-w, DOI 10.1007/S10664-020-09920-W]
   He YY, 2019, INTEG COMMUN NAVIG, DOI [10.1109/icnsurv.2019.8735415, 10.1109/ibf.2019.8665475, 10.1109/IBF.2019.8665475]
   Ismayilzada E, 2024, ACM T SOFTW ENG METH, V33, DOI 10.1145/3625293
   Jiang JJ, 2019, SCI CHINA INFORM SCI, V62, DOI 10.1007/s11432-018-1465-6
   Jiang JJ, 2018, ISSTA'18: PROCEEDINGS OF THE 27TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, P298, DOI 10.1145/3213846.3213871
   Jiang N, 2023, Arxiv, DOI arXiv:2302.01857
   Jin W., 2010, ACM SIGS INT S FDN S
   Kaminski G, 2008, SOFTW TEST VERIF REL, V18, P149, DOI 10.1002/stvr.386
   Kaminski G, 2011, SOFTW TEST VERIF REL, V21, P155, DOI 10.1002/stvr.442
   Kuhn DR, 2004, IEEE T SOFTWARE ENG, V30, P418, DOI 10.1109/TSE.2004.24
   Lau MF, 2009, LECT NOTES COMPUT SC, V5570, P44
   Le Goues C, 2012, IEEE T SOFTWARE ENG, V38, P54, DOI 10.1109/TSE.2011.104
   Le XBD, 2017, ESEC/FSE 2017: PROCEEDINGS OF THE 2017 11TH JOINT MEETING ON FOUNDATIONS OF SOFTWARE ENGINEERING, P593, DOI 10.1145/3106237.3106309
   Le XBD, 2016, 2016 IEEE 23RD INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER), VOL 1, P213, DOI 10.1109/SANER.2016.76
   Lee J, 2022, PROC INT CONF SOFTW, P1532, DOI 10.1145/3510003.3510186
   Li Y, 2022, PROC INT CONF SOFTW, P511, DOI 10.1145/3510003.3510177
   Lin B, 2022, ACM T SOFTW ENG METH, V31, DOI 10.1145/3505247
   Liu K, 2020, PROC INT CONF SOFTW, P615, DOI 10.1145/3377811.3380338
   Martinez M, 2016, P 25 INT S SOFTWARE, P441, DOI 10.1145/2931037.2948705
   Martinez M, 2019, J SYST SOFTWARE, V151, P65, DOI 10.1016/j.jss.2019.01.069
   Nilizadeh A, 2022, IEEE INT CONF SOFTW, P480, DOI 10.1109/ICST53961.2022.00061
   Nilizadeh A, 2021, IEEE INT CONF SOFTW, P229, DOI 10.1109/ICST49551.2021.00033
   Pan K, 2009, EMPIR SOFTW ENG, V14, P286, DOI 10.1007/s10664-008-9077-5
   Paul TK, 2012, INT CONF QUAL SOFTW, P144, DOI 10.1109/QSIC.2012.41
   Paul T.K., 2014, Proceedings of the 29th Annual ACM Symposium on Applied Computing - SAC'14, P1301
   Qi YH, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P254, DOI 10.1145/2568225.2568254
   Qi Z, 2015, P 2015 INT S SOFTWAR, P24, DOI [DOI 10.1145/2771783.2771791, 10.1145/2771783.2771791, 10.1145/2771783]
   Singh R.K., 2006, ACM SIGSOFT Software Engineering Notes, V31, P1
   Smith EK, 2015, 2015 10TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE 2015) PROCEEDINGS, P532, DOI 10.1145/2786805.2786825
   Sobreira V, 2018, 2018 25TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION AND REENGINEERING (SANER 2018), P130, DOI 10.1109/SANER.2018.8330203
   Tan SH, 2016, FSE'16: PROCEEDINGS OF THE 2016 24TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON FOUNDATIONS OF SOFTWARE ENGINEERING, P727, DOI 10.1145/2950290.2950295
   Taneja K., 2008, 25 IEEE ACM INT C AU, P15
   Tian H, 2023, ACM T SOFTW ENG METH, V32, DOI 10.1145/3576039
   Tian HY, 2020, IEEE INT CONF AUTOM, P981, DOI 10.1145/3324884.3416532
   Vilkomir SA, 2006, FORM ASP COMPUT, V18, P42, DOI 10.1007/s00165-005-0084-7
   Vilkomir S, 2015, IEEE ICST WORKSHOP
   Wang SW, 2020, IEEE INT CONF AUTOM, P968, DOI 10.1145/3324884.3416590
   Xia CS, 2022, PROCEEDINGS OF THE 30TH ACM JOINT MEETING EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, ESEC/FSE 2022, P959, DOI 10.1145/3540250.3549101
   Xiong YF, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P789, DOI 10.1145/3180155.3180182
   Xiong YF, 2017, PROC INT CONF SOFTW, P416, DOI 10.1109/ICSE.2017.45
   Xuan JF, 2017, IEEE T SOFTWARE ENG, V43, P34, DOI 10.1109/TSE.2016.2560811
   Yang B, 2020, PROCEEDINGS OF THE 2020 IEEE 2ND INTERNATIONAL WORKSHOP ON INTELLIGENT BUG FIXING (IBF '20), P1, DOI [10.1109/ibf50092.2020.9034821, 10.1109/IBF50092.2020.9034821]
   Ye H, 2022, IEEE INT CONF AUTOM, DOI 10.1145/3551349.3556926
   Ye H, 2021, Arxiv, DOI arXiv:1910.12057
   Ye H, 2022, PROC INT CONF SOFTW, P1506, DOI 10.1145/3510003.3510222
   Yuen TY, 2006, J SYST SOFTWARE, V79, P577, DOI 10.1016/j.jss.2005.05.030
   Yu YT, 2006, J SYST SOFTWARE, V79, P820, DOI 10.1016/j.jss.2005.08.016
   Yu Z., 2017, Test case generation for program repair: a study of feasibility and effectiveness
   Yu Z., 2018, arXiv
   Yuan Y, 2020, IEEE T SOFTWARE ENG, V46, P1040, DOI 10.1109/TSE.2018.2874648
   Zhu Q., 2021, A syntax-guided edit decoder for neural program repair
   US
NR 64
TC 0
Z9 0
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUL
PY 2024
VL 235
AR 103105
DI 10.1016/j.scico.2024.103105
EA MAR 2024
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA QN7K6
UT WOS:001221614900001
DA 2024-08-05
ER

PT J
AU Politano, M
   Bengolea, V
   Molina, F
   Aguirre, N
   Frias, M
   Ponzio, P
AF Politano, Mariano
   Bengolea, Valeria
   Molina, Facundo
   Aguirre, Nazareno
   Frias, Marcelo
   Ponzio, Pablo
TI BEAPI: A tool for bounded exhaustive input generation from APIs
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Software testing; Automated test generation; Bounded exhaustive testing
AB Bounded exhaustive testing is a very effective technique for bug finding, which proposes to test a given program under all valid bounded inputs, for a bound provided by the developer. Existing bounded exhaustive testing techniques require the developer to provide a precise specification of the valid inputs. Such specifications are rarely present as part of the software under test, and writing them can be costly and challenging. To address this situation we propose BEAPI, a tool that given a Java class under test, generates a bounded exhaustive set of objects of the class solely employing the methods of the class, without the need for a specification. BEAPI creates sequences of calls to methods from the class' public API, and executes them to generate inputs. BEAPI implements very effective pruning techniques that allow it to generate inputs efficiently. We experimentally assessed BEAPI in several case studies from the literature, and showed that it performs comparably to the best existing specification -based bounded exhaustive generation tool (Korat), without requiring a specification of the valid inputs.
C1 [Politano, Mariano; Bengolea, Valeria; Aguirre, Nazareno; Ponzio, Pablo] Univ Rio Cuarto, Rio Cuarto, Argentina.
   [Molina, Facundo] IMDEA Software, Madrid, Spain.
   [Aguirre, Nazareno; Ponzio, Pablo] Natl Council Sci & Tech Res CONICET, Santa Fe, Argentina.
   [Frias, Marcelo] Univ Texas El Paso, El Paso, TX USA.
C3 Universidad Nacional Rio Cuarto; IMDEA Software Institute; Consejo
   Nacional de Investigaciones Cientificas y Tecnicas (CONICET); University
   of Texas System; University of Texas El Paso
RP Politano, M (corresponding author), Univ Rio Cuarto, Rio Cuarto, Argentina.
EM naguirre@dc.exa.unrc.edu.ar
CR Al Awar N, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3485543
   Andoni A., 2002, Tech. Rep., V10
   BEAPI Reproducible, Empirical evaluation
   Boyapati C., 2002, Software Engineering Notes, V27, P123, DOI 10.1145/566171.566191
   github, BEAPI tool
   Gligoric M., 2010, ICSE, P225, DOI 10.1145/1806799.1806835
   google, ROOPS Benchmark
   Java Apache, Commons
   Khurshid S., 2001, Notes Theor. Comput. Sci., V55, P322, DOI [10.1016/S1571-0661(04)00260-9, DOI 10.1016/S1571-0661(04)00260-9]
   Marinov D, 2001, 16TH ANNUAL INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING (ASE 2001), PROCEEDINGS, P22, DOI 10.1109/ASE.2001.989787
   Pacheco C, 2007, PROC INT CONF SOFTW, P75
   Pacheco Carlos., 2008, International Symposium on Software Testing and Analysis (ISSTA), P87
   Politano Mariano, 2023, Fundamental Approaches to Software Engineering: 26th International Conference, FASE 2023, Held as Part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2023, Proceedings. Lecture Notes in Computer Science (13991), P111, DOI 10.1007/978-3-031-30826-0_6
   Ponzio P, 2019, LECT NOTES COMPUT SC, V11424, P427, DOI 10.1007/978-3-030-16722-6_25
   Rosner N, 2014, ACM SIGPLAN NOTICES, V49, P655, DOI [10.1145/2714064.2660232, 10.1145/2660193.2660232]
   Siddiqui JH, 2009, LECT NOTES COMPUT SC, V5885, P88, DOI 10.1007/978-3-642-10373-5_5
   Sullivan K., 2004, Software Engineering Notes, V29, P133, DOI 10.1145/1013886.1007531
   Visser W., 2006, P ACM SIGSOFT INT S, P37
   Xianghua RobbyDeng., 2006, ISoLA'06, P137
   US
NR 20
TC 0
Z9 0
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC
PY 2024
VL 238
AR 103153
DI 10.1016/j.scico.2024.103153
EA JUN 2024
PG 8
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA XT1G0
UT WOS:001263831100001
DA 2024-08-05
ER

PT J
AU Alkhomsan, MN
   Alshayeb, M
   Baslyman, M
AF Alkhomsan, Mashail N.
   Alshayeb, Mohammad
   Baslyman, Malak
TI Toward a novel taxonomy to capture code smells caused by refactoring
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Code smell; Refactoring; Maintainability; Refactoring sequence;
   Technical debt
AB Code smells tend to have an impact on software quality attributes such as reusability, maintainability, and understandability. These are code flaws that do not necessarily prevent the system from operating; rather, they increase the possibility of defects occurring in the future. Hence, to maintain code quality, code smells should be detected and corrected through refactoring. The objective of this paper is to investigate the associated risk of applying refactoring techniques and reveal the bad smells that may appear when fixing other bad smells. We conducted several controlled experiments to identify the smells that emerge after refactoring. The experiments resulted in a novel taxonomy revealing 9 bad smells that may appear as a result of fixing other bad smells. This represents the first study attempting to systematically identify and organize such refactoring-smell relationships into a taxonomy. The research results can assist developers in relating different bad smells to each other and helping them determine the refactoring technique that should be applied when certain smells are present. Moreover, the results can be beneficial in breaking the cycle of bad smells. Such knowledge tends to enhance code refactoring, which in turn will improve software quality and avoid technical debt.
C1 [Alkhomsan, Mashail N.; Alshayeb, Mohammad; Baslyman, Malak] King Fahd Univ Petr & Minerals, Informat & Comp Sci Dept, Dhahran 31261, Saudi Arabia.
   [Alkhomsan, Mashail N.] Jouf Univ, Comp & Informat Sci Dept, Sakaka 72388, Saudi Arabia.
   [Alshayeb, Mohammad] Interdisciplinary Res Ctr Intelligent Secure Syst, Dhahran 31261, Saudi Arabia.
   [Baslyman, Malak] Interdisciplinary Res Ctr Finance & Digital Econ, Dhahran 31261, Saudi Arabia.
C3 King Fahd University of Petroleum & Minerals; Al Jouf University
RP Alkhomsan, MN (corresponding author), King Fahd Univ Petr & Minerals, Informat & Comp Sci Dept, Dhahran 31261, Saudi Arabia.
EM g201901710@kfupm.edu.sa
OI Baslyman, Malak/0000-0003-4002-4480
FU King Fahd University of Petroleum and Minerals
FX The authors acknowledge the support of King Fahd University of Petroleum
   and Minerals in the development of this work.
CR Abbes M, 2011, EUR CON SFTWR MTNCE, P181, DOI 10.1109/CSMR.2011.24
   AbuHassan A, 2024, J SOFTW-EVOL PROC, V36, DOI 10.1002/smr.2401
   AbuHassan A, 2021, J SOFTW-EVOL PROC, V33, DOI 10.1002/smr.2320
   Allen EB, 2000, SEVENTH INTERNATIONAL SOFTWARE METRICS SYMPOSIUM - METRICS 2001, PROCEEDINGS, P124, DOI 10.1109/METRIC.2001.915521
   Alshayeb M, 2009, INFORM SOFTWARE TECH, V51, P1319, DOI 10.1016/j.infsof.2009.04.002
   Asmare MB, 2020, IEEE WORK CONF MIN S, P327, DOI 10.1145/3379597.3387467
   Baqais AAB, 2020, SOFTWARE QUAL J, V28, P459, DOI 10.1007/s11219-019-09477-y
   Bouktif S, 2006, GECCO 2006: GENETIC AND EVOLUTIONARY COMPUTATION CONFERENCE, VOL 1 AND 2, P1885
   Cardoso B., 2015, P ANN C BRAZ S INF S, V1, P347
   Cedrim D, 2017, ESEC/FSE 2017: PROCEEDINGS OF THE 2017 11TH JOINT MEETING ON FOUNDATIONS OF SOFTWARE ENGINEERING, P465, DOI 10.1145/3106237.3106259
   Deligiannis I, 2004, J SYST SOFTWARE, V72, P129, DOI 10.1016/S0164-1212(03)00240-1
   Fontana FA, 2015, 2015 IEEE 7TH INTERNATIONAL WORKSHOP ON MANAGING TECHNICAL DEBT (MTD) PROCEEDINGS, P16, DOI 10.1109/MTD.2015.7332620
   Fontana FA, 2012, J OBJECT TECHNOL, V11, DOI 10.5381/jot.2012.11.2.a5
   Fowler M., 2018, Refactoring: improving the design of existing code
   Haque MS, 2018, ACMSE '18: PROCEEDINGS OF THE ACMSE 2018 CONFERENCE, DOI 10.1145/3190645.3190697
   Jaafar F, 2017, 2017 IEEE INTERNATIONAL CONFERENCE ON SOFTWARE QUALITY, RELIABILITY AND SECURITY (QRS), P274, DOI 10.1109/QRS.2017.38
   Jabangwe R, 2015, EMPIR SOFTW ENG, V20, P640, DOI 10.1007/s10664-013-9291-7
   Jerzyk Marcel, 2023, Developments in Information and Knowledge, V7, P543
   Kataoka Y, 2002, PROC IEEE INT CONF S, P576, DOI 10.1109/ICSM.2002.1167822
   Kaur A, 2020, ARCH COMPUT METHOD E, V27, P1267, DOI 10.1007/s11831-019-09348-6
   Khomh F, 2012, EMPIR SOFTW ENG, V17, P243, DOI 10.1007/s10664-011-9171-y
   Kim M., 2012, P ACM SIGSOFT 20 INT, P1, DOI [10.1145/2393596.2393655.FSE'12, DOI 10.1145/2393596.2393655.FSE'12]
   Lerthathairat P., 2011, Proceedings of the Eighth International Joint Conference on Computer Science and Software Engineering (JCSSE 2011), P319, DOI 10.1109/JCSSE.2011.5930141
   Liu H, 2012, IEEE T SOFTWARE ENG, V38, P220, DOI 10.1109/TSE.2011.9
   Lozano Angelo., 2007, Ninth International Workshop on Principles of software evolution, P31
   Mäntylä M, 2003, PROC IEEE INT CONF S, P381, DOI 10.1109/ICSM.2003.1235447
   Martinez-Guerra R., 2006, Proceedings of the 45th IEEE Conference on Decision and Control (IEEE Cat. No. 06CH37770)
   Meananeatra P., 2011, 2011 5th Malaysian Conference in Software Engineering (MySEC), P113, DOI 10.1109/MySEC.2011.6140653
   Meananeatra P, 2012, IEEE INT CONF AUTOM, P406, DOI 10.1145/2351676.2351760
   Mens T, 2004, IEEE T SOFTWARE ENG, V30, P126, DOI 10.1109/TSE.2004.1265817
   Min Zhang, 2011, 2011 IEEE Fourth International Conference on Software Testing, Verification and Validation Workshops (ICSTW), P458, DOI 10.1109/ICSTW.2011.69
   Moha N., 2007, P 22 IEEE ACM INT C, P527, DOI [10.1145/1321631.1321727, DOI 10.1145/1321631.1321727]
   Moha N, 2010, FORM ASP COMPUT, V22, P345, DOI 10.1007/s00165-009-0115-x
   Mohan M, 2016, J SYST SOFTWARE, V120, P183, DOI 10.1016/j.jss.2016.05.019
   Murphy-Hill E, 2010, SOFTVIS 2010: PROCEEDINGS OF THE 2010 INTERNATIONAL SYMPOSIUM ON SOFTWARE VISUALIZATION, P5
   Ouni A, 2015, SOFTWARE QUAL J, V23, P323, DOI 10.1007/s11219-014-9233-7
   Palomba F, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P482, DOI 10.1145/3180155.3182532
   Palomba F, 2017, 2017 IEEE INTERNATIONAL WORKSHOP ON MACHINE LEARNING TECHNIQUES FOR SOFTWARE QUALITY EVALUATION (MALTESQUE), P8, DOI 10.1109/MALTESQUE.2017.7882010
   Rasool G, 2017, ARAB J SCI ENG, V42, P483, DOI 10.1007/s13369-016-2238-8
   Santos J., 2018, A Systematic Review On the Code Smell Effect
   Singjai A, 2021, INFORM SOFTWARE TECH, V134, DOI 10.1016/j.infsof.2021.106539
   Sommerville I., 2000, Software Engineering, V6
   Sousa BL, 2019, SOFTWARE PRACT EXPER, V49, P1079, DOI 10.1002/spe.2697
   Tsantalis N., Welcome to JDeodorant
   Vidal SA, 2016, AUTOMAT SOFTW ENG, V23, P501, DOI 10.1007/s10515-014-0175-x
   Wagey BC, 2015, 2015 INTERNATIONAL CONFERENCE ON DATA AND SOFTWARE ENGINEERING (ICODSE), P25, DOI 10.1109/ICODSE.2015.7436966
   Webster BruceF., 1995, PITFALLS OBJECT ORIE
   Yamashita A, 2013, INFORM SOFTWARE TECH, V55, P2223, DOI 10.1016/j.infsof.2013.08.002
NR 48
TC 0
Z9 0
U1 1
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP
PY 2024
VL 236
AR 103120
DI 10.1016/j.scico.2024.103120
EA APR 2024
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA SB4L0
UT WOS:001231985200001
DA 2024-08-05
ER

PT J
AU Del Giudice, N
   Matteucci, L
   Quadrini, M
   Rehman, A
   Loreti, M
AF Del Giudice, Nicola
   Matteucci, Lorenzo
   Quadrini, Michela
   Rehman, Aniqa
   Loreti, Michele
TI Sibilla: A tool for reasoning about collective systems
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Collective systems; Specification languages; Property specification;
   Verification
ID MODEL-CHECKING; BIO-PEPA; EXTENSION; CALCULUS
AB Formal approaches and tools have been defined, implemented and successfully applied to support the design and development of Collective Adaptive Systems. These tools are highly specialised in their fields, and their integration requires an effort. In this paper, we introduce Sibilla, a Java modular tool that facilitates the integration of multiple specification languages for supporting quantitative analysis of systems. After a description of the general architecture of Sibilla, the main features of the tool are discussed via simple examples.
C1 [Del Giudice, Nicola; Matteucci, Lorenzo; Quadrini, Michela; Rehman, Aniqa; Loreti, Michele] Univ Camerino, Via Madonna Carceri 9, I-62032 Camerino, Italy.
C3 University of Camerino
RP Loreti, M (corresponding author), Univ Camerino, Via Madonna Carceri 9, I-62032 Camerino, Italy.
EM michele.loreti@unicam.it
OI Loreti, Michele/0000-0003-3061-863X; Del Giudice,
   Nicola/0000-0002-5194-0823
FU Italian PRIN project "IT-MaTTerS" [2017FTXR7S]; POR MARCHE FESR
   2014-2020, project "MIRACLE" [CUP B28I19000330007]
FX This research has been partially supported by Italian PRIN project
   "IT-MaTTerS" n, 2017FTXR7S, and by POR MARCHE FESR 2014-2020, project
   "MIRACLE", CUP B28I19000330007.
CR Abd Alrahman Y, 2020, SCI COMPUT PROGRAM, V192, DOI 10.1016/j.scico.2020.102428
   Abd Alrahman Y, 2019, INFORM COMPUT, V268, DOI 10.1016/j.ic.2019.104457
   Abd Alrahman Y, 2015, 30TH ANNUAL ACM SYMPOSIUM ON APPLIED COMPUTING, VOLS I AND II, P1840, DOI 10.1145/2695664.2695668
   Abeywickrama Dhaminda B., 2015, Software Engineering for Collective Autonomic Systems. The ASCENS Approach: LNCS 8998, P429, DOI 10.1007/978-3-319-16310-9_13
   Alur R, 2015, PRINCIPLES OF CYBER-PHYSICAL SYSTEMS, P1
   Aspnes James, 2009, Middleware for Network Eccentric and Mobile Applications, P97
   Bellifemine F., 1999, PAAM99. Proceedings of the Fourth International Conference on the Practical Applications of Intelligent Agents and Multi-agent Technology, P97
   Bernardo M, 1998, INFORM COMPUT, V144, P83, DOI 10.1006/inco.1998.2706
   Bettini L, 2003, LECT NOTES COMPUT SC, V2874, P88
   Bisong E., 2019, BUILDING MACHINE LEA, P59, DOI [10.1007/978-1-4842-4470-8_19, DOI 10.1007/978-1-4842-4470-8_19, 10.1007/978-1-4842-4470-8_7, DOI 10.1007/978-1-4842-4470-87]
   Boreale M, 2006, LECT NOTES COMPUT SC, V4184, P38
   Boreale M, 2015, MATH STRUCT COMP SCI, V25, P666, DOI 10.1017/S0960129512000953
   Bortolussi L, 2015, ELECTRON PROC THEOR, P16, DOI 10.4204/EPTCS.194.2
   Bortolussi L, 2013, PERFORM EVALUATION, V70, P317, DOI 10.1016/j.peva.2013.01.001
   Cappello I, 2011, LECT NOTES COMPUT SC, V6582, P522, DOI 10.1007/978-3-642-20401-2_25
   Ciocchetta F, 2008, ELECTRON NOTES THEOR, V194, P103, DOI 10.1016/j.entcs.2007.12.008
   Ciocchetta F, 2009, INT CONF QUANT EVAL, P309, DOI 10.1109/QEST.2009.27
   De Nicola R, 2007, THEOR COMPUT SCI, V382, P42, DOI 10.1016/j.tcs.2007.05.008
   De Nicola R, 2020, J LOG ALGEBR METHODS, V111, DOI 10.1016/j.jlamp.2019.100511
   De Nicola R, 2014, ACM T AUTON ADAP SYS, V9, DOI 10.1145/2619998
   De Nicola R, 2009, ELECTRON NOTES THEOR, V229, P11, DOI 10.1016/j.entcs.2009.07.071
   Del Giudice N, 2022, 2022 IEEE INTERNATIONAL CONFERENCE ON AUTONOMIC COMPUTING AND SELF-ORGANIZING SYSTEMS COMPANION (ACSOS-C 2022), P82, DOI 10.1109/ACSOSC56246.2022.00038
   Del Giudice N, 2022, LECT NOTES COMPUT SC, V13271, P92, DOI 10.1007/978-3-031-08143-9_6
   Donze Alexandre, 2013, Computer Aided Verification. 25th International Conference, CAV 2013. Proceedings. LNCS 8044, P264, DOI 10.1007/978-3-642-39799-8_19
   Elowitz MB, 2000, NATURE, V403, P335, DOI 10.1038/35002125
   Galpin V, 2018, ACM T MODEL COMPUT S, V28, DOI 10.1145/3155338
   Gilmore S., 1994, Computer Performance Evaluation. Modelling Techniques and Tools. 7th International Conference Proceedings, P353
   Hennessy M., 1998, Journal of Computer Science and Technology (English Language Edition), V13, DOI 10.1007/BF02946490
   Hensel C, 2022, INT J SOFTW TOOLS TE, V24, P589, DOI 10.1007/s10009-021-00633-z
   Hillston J., 1994, Ph.D. thesis
   Hillston J, 2016, LECT NOTES COMPUT SC, V9826, P167, DOI 10.1007/978-3-319-43425-4_12
   Hoare C. A. R., 1983, Communications of the ACM, V26, P100, DOI 10.1145/357980.358021
   Holzl Matthias, 2008, Software-Intensive Systems and New Computing Paradigms, P1
   K. Team, Pyjnius
   Kluyver T, 2016, POSITIONING AND POWER IN ACADEMIC PUBLISHING: PLAYERS, AGENTS AND AGENDAS, P87, DOI 10.3233/978-1-61499-649-1-87
   Kwiatkowska M, 2002, LECT NOTES COMPUT SC, V2324, P200
   Latella D, 2017, LECT NOTES COMPUT SC, V10206, P303, DOI 10.1007/978-3-662-54580-5_18
   Latella D, 2015, SCI COMPUT PROGRAM, V110, P23, DOI 10.1016/j.scico.2015.06.009
   Le Boudec JY, 2007, INT CONF QUANT EVAL, P3, DOI 10.1109/QEST.2007.8
   Loreti M, 2016, LECT NOTES COMPUT SC, V9700, P83, DOI 10.1007/978-3-319-34096-8_4
   Luke S., 2003, Proceedings of Agent 2003 Conference on Challenges in Social Simulation, V9
   Maler O, 2004, LECT NOTES COMPUT SC, V3253, P152, DOI 10.1007/978-3-540-30206-3_12
   Michele L, 2022, LECT NOTES COMPUT SC, V13479, P133, DOI 10.1007/978-3-031-16336-4_7
   Milner R., 1989, Communication and concurrency
   Milner Robin, 1999, Communicating and mobile systems: The pi calculus
   Nicola RD, 2021, SCI COMPUT PROGRAM, V202, DOI 10.1016/j.scico.2020.102567
   North MJ, 2013, COMPLEX ADAPT SYST M, V1, DOI 10.1186/2194-3206-1-3
   Pianini D, 2013, J SIMUL, V7, P202, DOI 10.1057/jos.2012.27
   Priami C, 1995, COMPUT J, V38, P578, DOI 10.1093/comjnl/38.7.578
   Pugliese R, 2012, J APPL LOGIC, V10, P2, DOI 10.1016/j.jal.2011.11.002
   Reenskaug Trygve., 1996, WORKING OBJECTS OORA
   Ross S. M., 1996, Stochastic processes, V2
   Taillandier P, 2019, GEOINFORMATICA, V23, P299, DOI 10.1007/s10707-018-00339-6
   Tisue S., 2004, INT C COMPL SYST, P16
   van Lon Rinde R. S., 2012, 2012 IEEE 6th International Conference on Self-Adaptive and Self-Organizing Systems (SASO 2012), P231, DOI 10.1109/SASO.2012.41
   Vissat LL, 2016, ELECTRON P THEOR COM, P82, DOI 10.4204/EPTCS.227.6
   WANGERSKY PJ, 1978, ANNU REV ECOL SYST, V9, P189, DOI 10.1146/annurev.es.09.110178.001201
NR 57
TC 0
Z9 0
U1 1
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUL
PY 2024
VL 235
AR 103095
DI 10.1016/j.scico.2024.103095
EA MAR 2024
PG 11
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA OP8N2
UT WOS:001208571600001
DA 2024-08-05
ER

PT J
AU van den Berg, B
   Schrijvers, T
AF van den Berg, Birthe
   Schrijvers, Tom
TI A framework for higher-order effects & handlers
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Algebraic effects and handlers; Higher-order effects and handlers; Free
   monad; Datatypes a la carte
AB Algebraic effects & handlers are a modular approach for modeling side-effects in functional programming. Their syntax is defined in terms of a signature of effectful operations, encoded as a functor, that are plugged into the free monad; their denotational semantics is defined by fold-style handlers that only interpret their part of the syntax and forward the rest. However, not all effects are algebraic: some need to access an internal computation. For example, scoped effects distinguish between a computation in scope and out of scope; parallel effects parallelize over a computation, latent effects defer a computation. Separate definitions have been proposed for these higher-order effects and their corresponding handlers, often leading to expedient and complex monad definitions. In this work we propose a generic framework for higher-order effects, generalizing algebraic effects & handlers: a generic free monad with higher-order effect signatures and a corresponding interpreter. Specializing this higher-order syntax leads to various definitions of previously defined (scoped, parallel, latent) and novel (writer, bracketing) effects. Furthermore, we formally show our framework theoretically correct, also putting different effect instances on formal footing; a significant contribution for parallel, latent, writer and bracketing effects.
C1 [van den Berg, Birthe; Schrijvers, Tom] Katholieke Univ Leuven, Leuven, Belgium.
C3 KU Leuven
RP Schrijvers, T (corresponding author), Katholieke Univ Leuven, Leuven, Belgium.
EM tom.schrijvers@kuleuven.be
OI Schrijvers, Tom/0000-0001-8771-5559
CR Bird R., 1999, Formal Aspects of Computing, V11, P200, DOI 10.1007/s001650050047
   Boisseau G, 2018, PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES, DOI 10.1145/3236779
   Brachthäuser JI, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428194
   Clark K.L., 1977, Inf. Process., V77
   Gibbons J, 2011, ACM SIGPLAN NOTICES, V46, P2, DOI 10.1145/2034574.2034777
   Gill A., 2008, mtl: monad transformer library
   Hillerstrom Daniel, 2016, TYDE ICFP, P15, DOI DOI 10.1145/2976022.2976033
   Hinze Ralf, 2012, Mathematics of Program Construction. Proceedings 11th International Conference, MPC 2012, P324, DOI 10.1007/978-3-642-31113-0_16
   HUGHES RJM, 1986, INFORM PROCESS LETT, V22, P141, DOI 10.1016/0020-0190(86)90059-1
   Jaskelioff M, 2011, LECT NOTES COMPUT SC, V5836, P233, DOI 10.1007/978-3-642-24452-0_13
   Jaskelioff M, 2009, LECT NOTES COMPUT SC, V5502, P64, DOI 10.1007/978-3-642-00590-9_6
   Johann P., 2016, Haskell programming with nested types: a principled approach
   Johann P, 2007, LECT NOTES COMPUT SC, V4583, P207
   King A., 2019, eff-screaming fast extensible effects for less
   Kiselyov O., 2019, Extensible-effects: an alternative to monad transformers
   Kiselyov O, 2018, ELECTRON P THEOR COM, P23, DOI 10.4204/EPTCS.285.2
   Kiselyov O, 2015, ACM SIGPLAN NOTICES, V50, P94, DOI 10.1145/2804302.2804319
   Leijen D, 2014, ELECTRON PROC THEOR, P100, DOI 10.4204/EPTCS.153.8
   Lindley S, 2017, ACM SIGPLAN NOTICES, V52, P500, DOI 10.1145/3093333.3009897
   Maguire Sandy, 2019, polysemy: higher-order, low-boilerplate free monads
   Marlow S, 2001, ACM SIGPLAN NOTICES, V36, P274, DOI 10.1145/381694.378858
   MOGGI E, 1991, INFORM COMPUT, V93, P55, DOI 10.1016/0890-5401(91)90052-4
   Moggi E., 1989, Tech. Rep. ECS-LFCS-90-113
   Paszke A, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3473593
   Pauwels K, 2019, LECT NOTES COMPUT SC, V11825, P18, DOI 10.1007/978-3-030-33636-3_2
   Piróg M, 2018, LICS'18: PROCEEDINGS OF THE 33RD ANNUAL ACM/IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P809, DOI 10.1145/3209108.3209166
   Plotkin G, 2003, APPL CATEGOR STRUCT, V11, P69, DOI 10.1023/A:1023064908962
   Plotkin G, 2009, LECT NOTES COMPUT SC, V5502, P80, DOI 10.1007/978-3-642-00590-9_7
   Plotkin GD, 2013, LOG METH COMPUT SCI, V9, DOI 10.2168/LMCS-9(4:23)2013
   Poulsen CB, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3571255
   Rivas E, 2017, J FUNCT PROGRAM, V27, DOI 10.1017/S0956796817000132
   Rix R., 2018, fused-effects: a fast, flexible, fused effect system
   Schrijvers T, 2019, PROCEEDINGS OF THE 12TH ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON HASKELL (HASKELL '19), P98, DOI 10.1145/3331545.3342595
   Swierstra W, 2008, J FUNCT PROGRAM, V18, P423, DOI 10.1017/S0956796808006758
   Thomson P, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3547639
   van den Berg B, 2021, LECT NOTES COMPUT SC, V13008, P182, DOI 10.1007/978-3-030-89051-3_11
   Wadler P., 1995, Advanced Functional Programming. First International Spring School on Advanced Functional Programming Techniques. Tutorial Text, P24
   Waern L., 2022, In-other-words: a higher-order effect system where the sky's the limit
   Wu N, 2014, ACM SIGPLAN NOTICES, V49, P1, DOI 10.1145/2633357.2633358
   Xie N., 2021, arXiv
   Yang ZX, 2022, LECT NOTES COMPUT SC, V13240, P462, DOI 10.1007/978-3-030-99336-8_17
   Yang ZX, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3473578
NR 42
TC 0
Z9 0
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAY
PY 2024
VL 234
AR 103086
DI 10.1016/j.scico.2024.103086
EA JAN 2024
PG 32
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA JV2B5
UT WOS:001175861000001
OA hybrid
DA 2024-08-05
ER

PT J
AU Belenchia, M
   Corradini, F
   Quadrini, M
   Loreti, M
AF Belenchia, Matteo
   Corradini, Flavio
   Quadrini, Michela
   Loreti, Michele
TI LIBMG : A Python library for programming graph neural networks in μc
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Graph neural networks; Model checking; Computation tree logic; Formal
   verification; Explainability; Visualization
AB Graph neural networks have proven their effectiveness across a wide spectrum of graph -based tasks. Despite their successes, they share the same limitations as other deep learning architectures and pose additional challenges for their formal verification. To overcome these problems, we proposed a specification language, mu G , that can be used to program graph neural networks. This language has been implemented in a Python library called LIBMG that handles the definition, compilation, visualization, and explanation of mu G graph neural network models. We illustrate its usage by showing how it was used to implement a Computation Tree Logic model checker in our previous work, and evaluate its performance on the benchmarks of the Model Checking Contest. In the future, we plan to use mu G to further investigate the issues of explainability and verification of graph neural networks.
C1 [Belenchia, Matteo; Corradini, Flavio; Quadrini, Michela; Loreti, Michele] Univ Camerino, Camerino, Italy.
C3 University of Camerino
RP Belenchia, M (corresponding author), Univ Camerino, Camerino, Italy.
EM matteo.belenchia@unicam.it; flavio.corradini@unicam.it;
   michela.quadrini@unicam.it; michele.loreti@unicam.it
FX We thank Lorenzo Verducci and Lorenzo Matteucci for their help in
   developing the visualizer package.
CR Abadi M, 2016, PROCEEDINGS OF OSDI'16: 12TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P265
   Amparore E, 2019, LECT NOTES COMPUT SC, V11429, P50, DOI 10.1007/978-3-030-17502-3_4
   [Anonymous], 2022, Pyvis: Python package for creating and visualizing interactive network graphs
   Bai SJ, 2019, ADV NEUR IN, V32
   Belenchia Matteo, 2023, Formal Techniques for Distributed Objects, Components, and Systems: 43rd IFIP WG 6.1 International Conference, FORTE 2023, Held as Part of the 18th International Federated Conference on Distributed Computing Techniques, DisCoTec 2023, Proceedings. Lecture Notes in Computer Science (13910), P37, DOI 10.1007/978-3-031-35355-0_4
   Bunte Olav, 2019, Tools and Algorithms for the Construction and Analysis of Systems. 25th International Conference, TACAS 2019. Held as Part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2019. Proceedings: Lecture Notes in Computer Science (11428), P21, DOI 10.1007/978-3-030-17465-1_2
   Clarke EM, 2008, LECT NOTES COMPUT SC, V5000, P196
   Grattarola D, 2021, IEEE COMPUT INTELL M, V16, P99, DOI 10.1109/MCI.2020.3039072
   Kipf T.N., 2017, INT C LEARN REPR, P1
   Rokotyan N., 2022, Cosmograph: GPU-accelerated force graph layout and rendering
   Salzer M., 2022, INT C LEARN REPR
   Shinan E., 2023, Lark-a parsing toolkit for Python
NR 12
TC 0
Z9 0
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC
PY 2024
VL 238
AR 103165
DI 10.1016/j.scico.2024.103165
EA JUN 2024
PG 11
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA XB5S8
UT WOS:001259243000001
DA 2024-08-05
ER

PT J
AU Gazda, A
   Koska, O
AF Gazda, Arnaud
   Koska, Oceane
TI A pragma based C plus plus framework for hybrid quantum/classical
   computation
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Quantum; HPC; Hybrid computing; C plus plus; Framework
ID QUANTUM; STANDARD; OPENMP
AB Quantum computers promise exponential speed ups over classical computers for various tasks. This emerging technology is expected to have its first huge impact in High Performance Computing (HPC), as it can solve problems beyond the reach of HPC. To that end, HPC will require quantum accelerators, which will enable applications to run on both classical and quantum devices, via hybrid quantum-classical nodes. Hybrid quantum-HPC applications should be scalable, executable on Quantum Error Corrected (QEC) devices, and could use quantumclassical primitives. However, the lack of scalability, poor performances, and inability to insert classical schemes within quantum applications has prevented current quantum frameworks from being adopted by the HPC community. This paper specifies the requirements of a hybrid quantum-classical framework compatible with HPC environments, and introduces a novel hardware-agnostic framework called Q-Pragma. This framework extends the classical programming language C++ heavily used in HPC via the addition of pragma directives to manage quantum computations.
C1 [Gazda, Arnaud; Koska, Oceane] Eviden Quantum Lab, Les Clayes Sous Bois, France.
   [Koska, Oceane] Lab Interdisciplinaire Sci Numer, Gif Sur Yvette, Saclay, France.
RP Gazda, A (corresponding author), Eviden Quantum Lab, Les Clayes Sous Bois, France.
EM arnaud.gazda@eviden.com; oceane.koska@eviden.com
FU France 2030 under the French National Research Agency [ANR-22-PNCQ-0002]
FX This work is part of HQI initiative and is supported by France 2030
   under the French National Research Agency award number
   "ANR-22-PNCQ-0002". The authors acknowledge Maxime Oliva and Stanley
   Cheah for their comments and feedbacks, which greatly improved this
   article. The authors would also like to show their gratitude to Marc
   Baboulin and Cyril Allouche for sharing their insights. The authors
   sincerely appreciate the support of the Eviden Quantum Lab team. Without
   our valued team, Q-Pragma framework implementation would not have been
   possible.
CR Abhari Ali, 2012, Scaffold: Quantum programming language
   Anderson E., 1999, LAPACK Users Guide, V3rd edn, DOI DOI 10.1137/1.9780898719604
   Andreopoulos C., 2015, arXiv
   Backus John, 1979, Ann. Hist. Comput., P21
   Bertels K, 2020, DES AUT TEST EUROPE, P139, DOI 10.23919/DATE48585.2020.9116502
   Bichsel B, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P286, DOI 10.1145/3385412.3386007
   Blackford LS, 2002, ACM T MATH SOFTWARE, V28, P135, DOI 10.1145/567806.567807
   Chan HHS, 2023, SCI ADV, V9, DOI 10.1126/sciadv.abo7484
   Cirq Developers, 2023, Cirq
   Cross A, 2022, ACM T QUANTUM COMPUT, V3, DOI 10.1145/3505636
   Dagum L, 1998, IEEE COMPUT SCI ENG, V5, P46, DOI 10.1109/99.660313
   DiVincenzo DP, 2000, FORTSCHR PHYS, V48, P771, DOI 10.1002/1521-3978(200009)48:9/11<771::AID-PROP771>3.0.CO;2-E
   Eviden Quantum Lab, 2020, myQLM: Quantum Computing Framework
   Gidney C, 2021, QUANTUM-AUSTRIA, V5, DOI 10.22331/q-2021-04-15-433
   Gilyén A, 2019, ACM S THEORY COMPUT, P193, DOI 10.1145/3313276.3316366
   Green AS, 2013, ACM SIGPLAN NOTICES, V48, P333, DOI 10.1145/2499370.2462177
   Häner T, 2018, QUANTUM SCI TECHNOL, V3, DOI 10.1088/2058-9565/aaa5cc
   Huang Q, 2008, PDCAT 2008: NINTH INTERNATIONAL CONFERENCE ON PARALLEL AND DISTRIBUTED COMPUTING, APPLICATIONS AND TECHNOLOGIES, PROCEEDINGS, P151, DOI 10.1109/PDCAT.2008.38
   Humble TS, 2021, IEEE MICRO, V41, P15, DOI 10.1109/MM.2021.3099140
   JavadiAbhari A, 2015, PARALLEL COMPUT, V45, P2, DOI 10.1016/j.parco.2014.12.001
   Kassal I, 2011, ANNU REV PHYS CHEM, V62, P185, DOI 10.1146/annurev-physchem-032210-103512
   Kernighan Brian W., 2006, The C programming language
   Lee S, 2009, ACM SIGPLAN NOTICES, V44, P101, DOI 10.1145/1594835.1504194
   Martyn JM, 2021, PRX QUANTUM, V2, DOI 10.1103/PRXQuantum.2.040203
   Mccaskey A, 2021, ACM T QUANTUM COMPUT, V2, DOI 10.1145/3462670
   Mykhailova Mariia, 2018, Microsoft Q# coding contest
   Mykhailova Mariia, 2019, Microsoft Q# coding contest
   Nielsen Michael, 2012, Quantum Computation and Quantum Information, P528
   NVIDIA CUDA Quantum development team, 2023, Cuda quantum
   Qiskit contributors, 2023, Qiskit: An open-source framework for quantum computing
   Shor PW, 1997, SIAM J COMPUT, V26, P1484, DOI 10.1137/S0036144598347011
   Steiger DS, 2018, QUANTUM-AUSTRIA, V2, DOI 10.22331/q-2018-01-31-49
   Stone JE, 2010, COMPUT SCI ENG, V12, P66, DOI 10.1109/MCSE.2010.69
   Stroustrup B., 1997, The C++ Programming Language, V3rd
   Svore K, 2018, RWDSL2018: PROCEEDINGS OF THE REAL WORLD DOMAIN SPECIFIC LANGUAGES WORKSHOP 2018, DOI 10.1145/3183895.3183901
   Vingelmann Peter, 2020, NVIDIA
NR 36
TC 0
Z9 0
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP
PY 2024
VL 236
AR 103119
DI 10.1016/j.scico.2024.103119
EA APR 2024
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA SC1F9
UT WOS:001232162100001
OA Green Submitted
DA 2024-08-05
ER

PT J
AU Yaman, SG
   Ribeiro, P
   Burholt, C
   Jones, M
   Cavalcanti, A
   Calinescu, R
AF Yaman, Sinem Getir
   Ribeiro, Pedro
   Burholt, Charlie
   Jones, Maddie
   Cavalcanti, Ana
   Calinescu, Radu
TI Toolkit for specification, validation and verification of social, legal,
   ethical, empathetic and cultural requirements for autonomous agents
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Autonomous agents; Social legal ethical empathethic and cultural
   requirements; Verification and validation
AB A growing range of applications use AI and other autonomous agents to perform tasks that raise social, legal, ethical, empathetic, and cultural (SLEEC) concerns. To support a framework for the consideration of these concerns, we introduce SLEEC-TK, a toolkit for specification, validation, and verification of SLEEC requirements. SLEEC-TK is an Eclipse-based environment for defining SLEEC rules in a domain-specific language with a timed process algebraic semantics. SLEEC-TK uses model checking to identify redundant and conflicting rules, and to verify conformance of design models with SLEEC rules. We illustrate the use of SLEEC-TK for an assistive-care robot.
C1 [Yaman, Sinem Getir; Ribeiro, Pedro; Burholt, Charlie; Jones, Maddie; Cavalcanti, Ana; Calinescu, Radu] Univ York, Dept Comp Sci, York, England.
C3 University of York - UK
RP Yaman, SG; Ribeiro, P (corresponding author), Univ York, Dept Comp Sci, York, England.
EM sinem.getir.yaman@york.ac.uk; pedro.ribeiro@york.ac.uk
OI Cavalcanti, Ana Lucia Caneca/0000-0002-0831-1976; Ribeiro,
   Pedro/0000-0003-4319-4872; Calinescu, Radu/0000-0002-2678-9260
FU EPSRC [EP/V026747/1]; Institute for Software Engineering and Software
   Technology 'Jose Maria Troya Linero' at the University of Malaga; Royal
   Academy of Engineering [EP/V026801/1, EP/R025479/1];  [CiET1718/45]
FX The development of SLEEC-TK was funded by the EPSRC project 'UKRI TAS
   Node in Resilience', EP/V026747/1. The work of Pedro Ribeiro is funded
   by EPSRC RoboTest EP/R025479/1. The work of Radu Calinescu is also
   funded by the Institute for Software Engineering and Software Technology
   'Jose Maria Troya Linero' at the University of Malaga. The work of Ana
   Cavalcanti is also funded by the Royal Academy of Engineering grant
   CiET1718/45 and 'UKRI TAS Verifiability Node EP/V026801/1'.
CR Dennis LA, 2015, Arxiv, DOI arXiv:1504.03592
   Alfieri C., 2022, 1 INT C HYBR HUM ART, V354, P128
   Baxter J, 2022, ACTA INFORM, V59, P125, DOI 10.1007/s00236-020-00394-3
   Feng N, 2023, IEEE INT CONF AUTOM, P1776, DOI 10.1109/ASE56229.2023.00152
   Fjeld Jessica., 2020, Principled Artificial Intelligence: Mapping Consensus in Ethical and Rights-Based Approaches to Principles for AI, DOI [DOI 10.2139/SSRN.3518482, 10.2139/ssrn.3518482]
   Gibson-Robinson T., 2014, Lecture Notes in Computer Science, V8413, P187
   Miyazawa A, 2019, SOFTW SYST MODEL, V18, P3097, DOI 10.1007/s10270-018-00710-z
   Roscoe AW, 2010, TEXTS COMPUT SCI, P3, DOI 10.1007/978-1-84882-258-0_1
   Solanki P., 2023, AI Ethics, V3, P223, DOI DOI 10.1007/S43681-022-00195-Z
   Townsend B, 2022, MIND MACH, V32, P683, DOI 10.1007/s11023-022-09614-w
   Winfield A., 2022, IEEE standard for transparency of autonomous systems, DOI [10 .1109 /IEEESTD .2022 .9726144, DOI 10.1109/IEEESTD.2022.9726144]
   Yaman Sinem Getir, 2023, Fundamental Approaches to Software Engineering: 26th International Conference, FASE 2023, Held as Part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2023, Proceedings. Lecture Notes in Computer Science (13991), P241, DOI 10.1007/978-3-031-30826-0_13
   Yaman S. Getir, 2023, arXiv
NR 13
TC 0
Z9 0
U1 8
U2 8
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP
PY 2024
VL 236
AR 103118
DI 10.1016/j.scico.2024.103118
EA APR 2024
PG 6
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA RV1B6
UT WOS:001230333100001
OA hybrid
DA 2024-08-05
ER

PT J
AU Yang, HW
   Gu, XG
   Chen, X
   Zheng, LW
   Cui, ZQ
AF Yang, Huiwen
   Gu, Xiguo
   Chen, Xiang
   Zheng, Liwei
   Cui, Zhanqi
TI CrossFuzz: Cross-contract fuzzing for smart contract vulnerability
   detection
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Smart contract; Fuzz testing; Cross-contract vulnerability; Security
   vulnerability detection
ID ETHEREUM
AB Context:: Smart contracts are computer programs that run on a blockchain. As the functions implemented by smart contracts become increasingly complex, the number of cross -contract interactions within them also rises. Consequently, the combinatorial explosion of transaction sequences poses a significant challenge for smart contract security vulnerability detection. Existing static analysis -based methods for detecting cross -contract vulnerabilities suffer from high false -positive rates and cannot generate test cases, while fuzz testing -based methods exhibit low code coverage and may not accurately detect security vulnerabilities. Objective:: The goal of this paper is to address the above limitations and efficiently detect crosscontract vulnerabilities. To achieve this goal, we present CrossFuzz, a fuzz testing -based method for detecting cross -contract vulnerabilities. Method:: First, CrossFuzz generates parameters of constructors by tracing data propagation paths. Then, it collects inter -contract data flow information. Finally, CrossFuzz optimizes mutation strategies for transaction sequences based on inter -contract data flow information to improve the performance of fuzz testing. Results:: We implemented CrossFuzz, which is an extension of ConFuzzius, and conducted experiments on a real -world dataset containing 396 smart contracts. The results show that CrossFuzz outperforms xFuzz, a fuzz testing -based tool optimized for cross -contract vulnerability detection, with a 10.58% increase in bytecode coverage. Furthermore, CrossFuzz detects 1.82 times more security vulnerabilities than ConFuzzius. Conclusion:: Our method utilizes data flow information to optimize mutation strategies. It significantly improves the efficiency of fuzz testing for detecting cross -contract vulnerabilities.
C1 [Yang, Huiwen; Gu, Xiguo; Zheng, Liwei; Cui, Zhanqi] Beijing Informat Sci & Technol Univ, Sch Comp Sci, Beijing, Peoples R China.
   [Yang, Huiwen; Cui, Zhanqi] Nanjing Univ Aeronaut & Astronaut, Key Lab Safety Crit Software, Minist Ind & Informat, Nanjing, Peoples R China.
   [Chen, Xiang] Nantong Univ, Sch Informat Sci & Technol, Nantong, Peoples R China.
C3 Beijing Information Science & Technology University; Nanjing University
   of Aeronautics & Astronautics; Nantong University
RP Cui, ZQ (corresponding author), Beijing Informat Sci & Technol Univ, Sch Comp Sci, Beijing, Peoples R China.
EM czq@bistu.edu.cn
OI Yang, Huiwen/0009-0008-5420-7388; Cui, Zhanqi/0000-0002-5537-9236
FU Jiangsu Provincial Frontier Leading Technology Fundamental Research
   Project [BK20202001]; Innovation (Science and Engineering) Project of
   Scientific Research Base of Nanjing University of Aeronautics and
   Astronautics [NJ2023031]; National Natural Science Foundation of China
   [61702041]; Beijing Information Science and Technology University
   "Qin-Xin Talent" Cultivation Project [QXTCP C201906]
FX This work was supported in part by the Jiangsu Provincial Frontier
   Leading Technology Fundamental Research Project (No. BK20202001) , the
   Innovation (Science and Engineering) Project of Scientific Research Base
   of Nanjing University of Aeronautics and Astronautics (No. NJ2023031) ,
   the National Natural Science Foundation of China (No. 61702041) , and
   the Beijing Information Science and Technology University "Qin-Xin
   Talent" Cultivation Project (No. QXTCP C201906) . Parts of this work are
   based on the master's thesis of the first author [31] .
CR Alharby M, 2018, 2018 INTERNATIONAL CONFERENCE ON CLOUD COMPUTING, BIG DATA AND BLOCKCHAIN (ICCBB 2018), P96
   Chen JC, 2021, IEEE T SOFTWARE ENG, V48, P2189, DOI 10.1109/TSE.2021.3054928
   Chen JC, 2022, IEEE T SOFTWARE ENG, V48, P327, DOI 10.1109/TSE.2020.2989002
   Choi J, 2021, 2021 36TH IEEE/ACM INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING ASE 2021, P227, DOI 10.1109/ASE51524.2021.9678888
   Feist J, 2019, 2019 IEEE/ACM 2ND INTERNATIONAL WORKSHOP ON EMERGING TRENDS IN SOFTWARE ENGINEERING FOR BLOCKCHAIN (WETSEB 2019), P8, DOI 10.1109/WETSEB.2019.00008
   Gao JB, 2019, 2019 IEEE/ACM 41ST INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING: COMPANION PROCEEDINGS (ICSE-COMPANION 2019), P23, DOI 10.1109/ICSE-Companion.2019.00029
   Gao ZP, 2021, IEEE T SOFTWARE ENG, V47, P2874, DOI 10.1109/TSE.2020.2971482
   He JX, 2019, PROCEEDINGS OF THE 2019 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY (CCS'19), P531, DOI 10.1145/3319535.3363230
   Huang JJ, 2021, IEEE T INF FOREN SEC, V16, P2144, DOI 10.1109/TIFS.2021.3050051
   Jiang B, 2018, IEEE INT CONF AUTOM, P259, DOI 10.1145/3238147.3238177
   Kochovski P, 2020, J GRID COMPUT, V18, P673, DOI 10.1007/s10723-020-09534-y
   Krupp J, 2018, PROCEEDINGS OF THE 27TH USENIX SECURITY SYMPOSIUM, P1317
   Li T, 2022, IEEE INTERNET THINGS, V9, P7959, DOI 10.1109/JIOT.2021.3106942
   Liao ZQ, 2022, PROCEEDINGS OF THE 31ST ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, ISSTA 2022, P752, DOI 10.1145/3533767.3534222
   Liu ZG, 2023, IEEE T KNOWL DATA EN, V35, P1296, DOI 10.1109/TKDE.2021.3095196
   Liu ZG, 2023, IEEE T INF FOREN SEC, V18, P1237, DOI 10.1109/TIFS.2023.3237370
   Luu L, 2016, CCS'16: PROCEEDINGS OF THE 2016 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P254, DOI 10.1145/2976749.2978309
   Mossberg M, 2019, 34TH IEEE/ACM INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING (ASE 2019), P1186, DOI 10.1109/ASE.2019.00133
   Nguyen TD, 2020, PROC INT CONF SOFTW, P778, DOI 10.1145/3377811.3380334
   Raj A, 2023, INT J SOFTW INNOV, V11, P27, DOI 10.4018/ijsi.315742
   Ren M, 2021, ISSTA '21: PROCEEDINGS OF THE 30TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, P566, DOI 10.1145/3460319.3464837
   Saini A, 2022, IEEE INTERNET THINGS, V9, P14005, DOI 10.1109/JIOT.2022.3145406
   Su H, 2022, IEEE INTERNET THINGS, V9, P19073, DOI 10.1109/JIOT.2022.3163582
   Tikhomirov S, 2018, 2018 IEEE/ACM 1ST INTERNATIONAL WORKSHOP ON EMERGING TRENDS IN SOFTWARE ENGINEERING FOR BLOCKCHAIN (WETSEB), P9, DOI 10.1145/3194113.3194115
   Torres CF, 2021, 2021 IEEE EUROPEAN SYMPOSIUM ON SECURITY AND PRIVACY (EUROS&P 2021), P103, DOI 10.1109/EuroSP51992.2021.00018
   Wang Lei, 2017, Journal of Software, V28, P860, DOI 10.13328/j.cnki.jos.005190
   Wang W, 2021, IEEE T NETW SCI ENG, V8, P1133, DOI 10.1109/TNSE.2020.2968505
   Wüstholz V, 2020, PROCEEDINGS OF THE 28TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE '20), P1398, DOI 10.1145/3368089.3417064
   Xue Y.X., 2022, IEEE Trans. Dependable Secure Comput., P1
   Xue YX, 2020, IEEE INT CONF AUTOM, P1029, DOI 10.1145/3324884.3416553
   Yang H.W., 2023, M.S. thesis
NR 31
TC 3
Z9 3
U1 17
U2 17
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAY
PY 2024
VL 234
AR 103076
DI 10.1016/j.scico.2023.103076
EA JAN 2024
PG 18
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GS8N6
UT WOS:001154754200001
OA hybrid
DA 2024-08-05
ER

PT J
AU Mezenner, I
   Bouyakoub, S
   Bouyakoub, FM
AF Mezenner, Imene
   Bouyakoub, Samia
   Bouyakoub, Faycal M. 'hamed
TI S2O: A smart objects orchestrator framework based on the web of things
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Internet of Things; Web of Things; RESTful Web service; BPEL; Temporal
   constraints; Smart home
ID SERVICE COMPOSITION; BPEL; IOT
AB The Web of Things (WoT) is a new paradigm in which everyday objects are connected to the Internet using popular Web technologies. The smart things are abstracted into RESTful Web services to facilitate their manipulation. The composition of these objects within the same business process creates an automated, time-synchronized routine that can perform even the most complex tasks. BPEL is an orchestration language that defines the process responsible for coordinating the Web services involved. However, this language presents some limitations in this context. BPEL 2.0 does not support RESTful Web services; its specification is incompatible with this architectural style of services. Moreover, its temporal expressivity is insufficient to cover all the constraints that may arise when composing services. This work aims to adapt BPEL to the requirements of the WoT environment, enabling it to create processes that invoke the smart things in precise time intervals. The solution is to exploit one of BPEL's strengths: its extensibility. The BPEL specification is enriched with four activities that reflect the REST uniform interface. They include the necessary attributes to send the request to the target object and receive the response in convened format representation. Also, temporal attributes are added to BPEL elements to schedule their start, end, and duration of execution. The manual addition of these temporal values requires a verification of their accuracy. The BPEL process must be reviewed to ensure its validity before its execution. A temporal Petri Net is proposed to detect any conflicts or inconsistencies between BPEL activities. As a result, associating the formal model with the extension allows BPEL to orchestrate smart things represented by RESTful Web services according to a well-defined temporal scenario. They respect the REST constraints and provide the BPEL activities with temporal attributes for efficient time management. The approach can be applied in all application areas to create temporal scenarios.
C1 [Mezenner, Imene; Bouyakoub, Samia; Bouyakoub, Faycal M. 'hamed] Univ Sci & Technol Houari Boumediene, Comp Sci Fac, LSI Lab, Bab Ezzoua, Algeria.
C3 University Science & Technology Houari Boumediene
RP Mezenner, I (corresponding author), Univ Sci & Technol Houari Boumediene, Comp Sci Fac, LSI Lab, Bab Ezzoua, Algeria.
EM imezenner@usthb.dz
CR Ahmed AIA, 2019, IEEE ACCESS, V7, P155472, DOI 10.1109/ACCESS.2019.2948027
   Akribopoulos O., 2010, 2010 Developments in Esystems Engineering
   Anvari M, 2018, PROCEEDINGS OF THE INTERNATIONAL CONFERENCE ON SMART CITIES AND INTERNET OF THINGS (SCIOT'18), DOI 10.1145/3269961.3269973
   ApacheODE, 2022, about us
   Baylov K., 2014, P 15 INT C COMP SYST, P264
   Booth D., 2004, WEB SERVICES ARCHITE
   Bouyakoub S., 2022, Int. J. Softw. Innovat. (IJSI), V10, P1
   Box D., 2000, SIMPLE OBJECT ACCESS
   Chinnici Roberto., 2007, Web services description language (wsdl) version 2.0 part 1: Core language
   Christensen E., 2001, WEB SERVICE DESCRIPT
   Deze Zeng, 2011, Journal of Communications, V6, P424, DOI 10.4304/jcm.6.6.424-438
   Domingos D, 2014, J UNIVERS COMPUT SCI, V20, P1109
   Fielding R.T., 2000, Doctoral Dissertation
   Garriga M, 2016, J NETW COMPUT APPL, V60, P32, DOI 10.1016/j.jnca.2015.11.020
   Georgakopoulos D, 2008, COOP INFORM SYST, P1
   Guinard D., 2010, 2010 Internet of Things (IOT 2010), DOI 10.1109/IOT.2010.5678452
   Guinard D., 2011, A Web of Things Application Architecture - Integrating the Real-World into the Web
   Guinard D., 2016, Building the Web of Things, V1st
   Hadley M.J., 2006, WEB APPL DESCRIPTION
   Hatzivasilis G, 2018, IEEE INT WORKSH COMP, P140
   Haupt F, 2014, IEEE INT ENTERP DIST, P110, DOI 10.1109/EDOC.2014.24
   Huf A, 2019, J NETW COMPUT APPL, V143, P89, DOI 10.1016/j.jnca.2019.06.008
   ISO, 2021, ISO/IEC 20924:2021 information technology-Internet of Things (IoT)-vocabulary
   Jabeur N, 2016, FACTA UNIV-SER ELECT, V29, P367, DOI 10.2298/FUEE1603367J
   Kallel S, 2009, ECOWS'09: PROCEEDINGS OF THE 7TH IEEE EUROPEAN CONFERENCE ON WEB SERVICES, P148, DOI 10.1109/ECOWS.2009.15
   Kamilaris A, 2016, 2016 IEEE 3RD WORLD FORUM ON INTERNET OF THINGS (WF-IOT), P442, DOI 10.1109/WF-IoT.2016.7845467
   Krawiec P., 2017, Beyond the Internet of Things: Everything Interconnected, P323
   Lee J, 2015, IEEE T SERV COMPUT, V8, P240, DOI 10.1109/TSC.2014.2310213
   Li XH, 2014, 2014 FIFTH INTERNATIONAL CONFERENCE ON INTELLIGENT SYSTEMS DESIGN AND ENGINEERING APPLICATIONS (ISDEA), P744, DOI 10.1109/ISDEA.2014.169
   Mena Manel, 2021, MEDES '21: Proceedings of the 13th International Conference on Management of Digital EcoSystems, P112, DOI 10.1145/3444757.3485102
   Mezenner I., 2019, 2019 INT C THEORETIC
   Minerva R., 2015, IEEE INTERNET INITIA
   Nitzsche J., 2007, Business Process Management
   OASIS, 2007, Web services business process execution language
   Overdick H, 2008, WS SO AG TE, V2, P129, DOI 10.1007/978-3-7643-8864-5_9
   Pautasso C., 2008, Business Process Management
   Peltz C, 2003, COMPUTER, V36, P46, DOI 10.1109/MC.2003.1236471
   Peng Y.Y., 2009, 2009 IEEE INT C SERV
   Saini A, 2016, INT J COMPUT SCI ENG, V13, P87, DOI 10.1504/IJCSE.2016.10000019
   Sharma N, 2019, Internet of things and big data analytics for smart generation, V154, P27, DOI [DOI 10.1007/978-3-030-04203-53, 10.1007/978-3-030-04203-5_3, DOI 10.1007/978-3-030-04203-5_3]
   Spiess P, 2009, 2009 IEEE INTERNATIONAL CONFERENCE ON WEB SERVICES, VOLS 1 AND 2, P968, DOI 10.1109/ICWS.2009.98
   Tahamtan A, 2011, ICEIS 2011: PROCEEDINGS OF THE 13TH INTERNATIONAL CONFERENCE ON ENTERPRISE INFORMATION SYSTEMS, VOL 3, P34
   Thakar U, 2016, INT CONF ADV COMPU, P500, DOI 10.1109/IACC.2016.99
   Wu B., 2013, 2013 IEEE INT C SERV
   Xie W., 2016, Advances in Information and Computer Security
   Zhang LL, 2014, INT C INTEL HUM MACH, P62, DOI 10.1109/IHMSC.2014.23
NR 46
TC 0
Z9 0
U1 1
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP
PY 2024
VL 236
AR 103130
DI 10.1016/j.scico.2024.103130
EA MAY 2024
PG 37
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA TC1Q4
UT WOS:001238972000001
DA 2024-08-05
ER

PT J
AU Ansari, SG
   Prasetya, ISWB
   Dastani, M
   Keller, G
   Prandi, D
   Kifetew, FM
   Dignum, F
AF Ansari, Saba Gholizadeh
   Prasetya, I. S. W. B.
   Dastani, Mehdi
   Keller, Gabriele
   Prandi, Davide
   Kifetew, Fitsum Meshesha
   Dignum, Frank
TI PX-MBT: A framework for model-based player experience testing
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE PX testing; Emotion modeling; Model-based testing; Agent-based testing
AB As video games become more complex and widespread, player experience (PX) testing becomes crucial in the game industry. Attracting and retaining players are key elements to guarantee the success of a game in the highly competitive market. Although a number of techniques have been introduced to measure the emotional aspect of the experience, automated testing of player experience still needs to be explored. This paper presents PX-MBT , a framework for automated player experience testing with emotion pattern verification. PX-MBT (1) utilizes a model -based testing approach for test suite generation, (2) employs a computational model of emotions developed based on a psychological theory of emotions to model players' emotions during game -plays with an intelligent agent, and (3) verifies emotion patterns given by game designers on executed test suites to identify PX-issues. We explain PX-MBT architecture and provide an example along with its result in emotion pattern verification, which asserts the evolution of emotions over time, and heat -maps to showcase the spatial distribution of emotions on the game map.
C1 [Ansari, Saba Gholizadeh; Prasetya, I. S. W. B.; Dastani, Mehdi; Keller, Gabriele] Univ Utrecht, Utrecht, Netherlands.
   [Prandi, Davide; Kifetew, Fitsum Meshesha] Fdn Bruno Kessler, Trento, Italy.
   [Dignum, Frank] Umea Univ, Umea, Sweden.
C3 Utrecht University; Fondazione Bruno Kessler; Umea University
RP Ansari, SG (corresponding author), Univ Utrecht, Utrecht, Netherlands.
EM s.gholizadehansari@uu.nl
FU EU H2020 iv4XR project [856716]
FX This work is funded by EU H2020 iv4XR project, grant nr. 856716.
CR Alves R, 2014, PROCEEDINGS OF THE NORDICHI'14: THE 8TH NORDIC CONFERENCE ON HUMAN-COMPUTER INTERACTION: FUN, FAST, FOUNDATIONAL, P93, DOI 10.1145/2639189.2641208
   [Anonymous], 1992, The affective reasoner: a process model of emotions in a multiagent system
   [Anonymous], 1988, COGNITIVE STRUCTURE
   Ansari S.G., 2021, 9 INT WORKSH ENG MUL
   Ansari S.G., 2023, INT C FUND APPR SOFT
   Ansari SG, 2020, IEEE INT CONF SOFTW, P430, DOI 10.1109/ICST46399.2020.00056
   Baier C, 2008, PRINCIPLES OF MODEL CHECKING, P1
   Bartneck C., 2002, Integrating the OCC Model of Emotions in Embodied Characters
   Callahan J, 1996, P 1996 SPIN WORKSH, V353
   Demeure V, 2011, PRESENCE-VIRTUAL AUG, V20, P431, DOI 10.1162/PRES_a_00065
   Desmet P, 2007, INT J DES, V1, P57
   Fang XW, 2010, INT J HUM-COMPUT INT, V26, P868, DOI 10.1080/10447318.2010.496337
   Ferdous R, 2022, IEEE INT CONF AUTOM, DOI 10.1145/3551349.3560507
   Ferdous R, 2023, SCI COMPUT PROGRAM, V227, DOI 10.1016/j.scico.2023.102942
   Guckelsberger C, 2017, CHI PLAY'17: PROCEEDINGS OF THE ANNUAL SYMPOSIUM ON COMPUTER-HUMAN INTERACTION IN PLAY, P305, DOI 10.1145/3116595.3116631
   Hebig R, 2018, ESEC/FSE'18: PROCEEDINGS OF THE 2018 26TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P445, DOI 10.1145/3236024.3236046
   Jennett C, 2008, INT J HUM-COMPUT ST, V66, P641, DOI 10.1016/j.ijhcs.2008.04.004
   Kwiatkowska M, 2002, LECT NOTES COMPUT SC, V2324, P200
   Mirza-Babaei Pejman., 2013, Proceedings of the SIGCHI Conference on Human Factors in Computing Systems - CHI '13, P1499, DOI [10.1145/2470654.2466200, DOI 10.1145/2470654.2466200]
   Myers G.J., 2011, The art of software testing, VVolume 1
   Nacke L., 2008, P 2008 C FUT PLAY RE, P81, DOI [10.1145/1496984.1496998, DOI 10.1145/1496984.1496998]
   Nacke LE, 2015, HUM-COMPUT INT-SPRIN, P63, DOI 10.1007/978-3-319-15985-0_4
   Ochs M., 2008, 7 INT JOINT C AUT AG, V1
   Panichella A, 2018, IEEE T SOFTWARE ENG, V44, P122, DOI 10.1109/TSE.2017.2663435
   Prasetya ISWB, 2020, LECT NOTES ARTIF INT, V12589, P21, DOI 10.1007/978-3-030-66534-0_2
   Procci K, 2012, COMPUT HUM BEHAV, V28, P2306, DOI 10.1016/j.chb.2012.06.039
   Reilly W.S., 1996, Believable Social and Emotional Agents
   Vermeeren A.P., 2010, P 6 NORDIC C HUM COM
NR 28
TC 0
Z9 0
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP
PY 2024
VL 236
AR 103108
DI 10.1016/j.scico.2024.103108
EA APR 2024
PG 6
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA RH9Y6
UT WOS:001226903800002
OA hybrid
DA 2024-08-05
ER

PT J
AU Yu, DJ
   Yang, QX
   Chen, X
   Chen, J
   Wang, SX
   Xu, YH
AF Yu, Dongjin
   Yang, Quanxin
   Chen, Xin
   Chen, Jie
   Wang, Sixuan
   Xu, Yihang
TI Actionable code smell identification with fusion learning of metrics and
   semantics
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Actionable code smell; Design smell; Implementation smell; Code
   semantics; Code metrics
ID BAD
AB Code smell detection is one of the essential tasks in the field of software engineering. Identifying whether a code snippet has a code smell is subjective and varies by programming language, developer, and development method. Moreover, developers tend to focus on code smells that have a real impact on development and ignore insignificant ones. However, existing static code analysis tools and code smell detection approaches exhibit a high false positive rate in detecting code smells, which makes insignificant smells drown out those smells that developers value. Therefore, accurately reporting those actionable code smells that developers tend to spend energy on refactoring can prevent developers from getting lost in the sea of smells and improve refactoring efficiency. In this paper, we aim to detect actionable code smells that developers tend to refactor. Specifically, we first collect actionable and non -actionable code smells from projects with numerous historical versions to construct our datasets. Then, we propose a dualstream model for fusion learning of code metrics and code semantics to detect actionable code smells. On the one hand, code metrics quantify the code's structure and even some rules or patterns, providing fundamental information for detecting code smells. On the other hand, code semantics encompass information about developers' refactoring tendencies, which prove valuable in detecting actionable code smells. Extensive experiments show that our approach can detect actionable code smells more accurately compared to existing approaches.
C1 [Yu, Dongjin; Yang, Quanxin; Chen, Xin; Chen, Jie; Wang, Sixuan; Xu, Yihang] Hangzhou Dianzi Univ, Coll Comp Sci & Technol, Hangzhou 310018, Zhejiang, Peoples R China.
C3 Hangzhou Dianzi University
RP Yu, DJ (corresponding author), Hangzhou Dianzi Univ, Coll Comp Sci & Technol, Hangzhou 310018, Zhejiang, Peoples R China.
EM yudj@hdu.edu.cn
RI Xu, Yihang/GPK-0410-2022
OI Xu, Yihang/0000-0002-3757-728X; Yang, Quanxin/0000-0002-8764-9878
FU National Natural Science Foundation of China [62372145]; Industrial
   Internet Innovation and Development Project of the Ministry of Industry
   and Information Technology [TC2008033, TC200802G]; Key Research and
   Development Program of Zhejiang Province [2023C03200]; Natural Science
   Foundation of Zhejiang Province [LY23F020016]
FX This research was supported by the National Natural Science Foundation
   of China (No. 62372145) , the Industrial Internet Innovation and
   Development Project of the Ministry of Industry and Information
   Technology (No. TC200802G, No. TC2008033) , the Key Research and
   Development Program of Zhejiang Province (No. 2023C03200) and the
   Natural Science Foundation of Zhejiang Province (No. LY23F020016) . The
   authors gratefully acknowledge all the participants in the evaluation
   process for their help.
CR Barbez A, 2019, PROC IEEE INT CONF S, P114, DOI 10.1109/ICSME.2019.00021
   Bobkov D, 2018, IEEE ROBOT AUTOM LET, V3, P865, DOI 10.1109/LRA.2018.2792681
   Boussaa Mohamed, 2013, Search Based Software Engineering. 5th International Symposium, SSBSE 2013. Proceedings: LNCS 8084, P50, DOI 10.1007/978-3-642-39742-4_6
   Boutaib S, 2022, APPL SOFT COMPUT, V129, DOI 10.1016/j.asoc.2022.109620
   Boutaib S, 2021, EXPERT SYST APPL, V166, DOI 10.1016/j.eswa.2020.114076
   Cervantes Humberto, 2020, TechDebt '20: Proceedings of the 3rd International Conference on Technical Debt, P115, DOI 10.1145/3387906.3388633
   Cruz D, 2020, 2020 IEEE/ACM INTERNATIONAL CONFERENCE ON TECHNICAL DEBT, TECHDEBT, P31, DOI 10.1145/3387906.3388618
   Cunningham W., 1993, OOPS Messenger, V4, P29
   Das D, 2021, APPL COMPUT REV, V21, P20, DOI 10.1145/3512753.3512755
   Di Nucci D, 2018, 2018 25TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION AND REENGINEERING (SANER 2018), P612, DOI 10.1109/SANER.2018.8330266
   Eposhi A, 2019, INT C PROGRAM COMPRE, P148, DOI 10.1109/ICPC.2019.00032
   Feng Q, 2019, 34TH IEEE/ACM INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING (ASE 2019), P986, DOI 10.1109/ASE.2019.00095
   Fontana F. A., 2012, Proceedings 2012 Third International Workshop on Managing Technical Debt (MTD 2012), P15, DOI 10.1109/MTD.2012.6225993
   Gong A, 2020, 2020 IEEE 20TH INTERNATIONAL CONFERENCE ON SOFTWARE QUALITY, RELIABILITY, AND SECURITY (QRS 2020), P30, DOI 10.1109/QRS51102.2020.00017
   Guo DY, 2021, Arxiv, DOI arXiv:2009.08366
   Guo XL, 2019, 11TH ASIA-PACIFIC SYMPOSIUM ON INTERNETWARE (INTERNETWARE 2019), DOI 10.1145/3361242.3361257
   Hadj-Kacem M, 2019, IEEE IJCNN
   Imran A, 2019, PROC IEEE INT CONF S, P644, DOI 10.1109/ICSME.2019.00104
   Kaur A, 2017, 2017 INTERNATIONAL CONFERENCE ON MACHINE LEARNING AND DATA SCIENCE (MLDS 2017), P9, DOI 10.1109/MLDS.2017.8
   Kessentini M, 2011, LECT NOTES COMPUT SC, V6603, P401, DOI 10.1007/978-3-642-19811-3_28
   Kipf T.N., 2017, INT C LEARN REPR, P1
   Kiyak E.O., 2019, 2019 3 INT S MULT ST, P1
   Kuechler A., 2022, INF SEC C
   Kurbatova Z., 2020, Recommendation of Move Method Refactoring Using Path-Based Representation of Code, P315
   Lenarduzzi V, 2019, PROCEEDINGS OF THE 3RD ACM SIGSOFT INTERNATIONAL WORKSHOP ON MACHINE LEARNING TECHNIQUES FOR SOFTWARE QUALITY EVALUATION (MALTESQUE '19), P37, DOI 10.1145/3340482.3342747
   Li Yujia, 2015, ARXIV151105493
   Lin TY, 2020, IEEE T PATTERN ANAL, V42, P318, DOI 10.1109/TPAMI.2018.2858826
   Liu H, 2018, IEEE INT CONF AUTOM, P385, DOI 10.1145/3238147.3238166
   Liu H, 2021, IEEE T SOFTWARE ENG, V47, P1811, DOI 10.1109/TSE.2019.2936376
   Liu H, 2016, IEEE T SOFTWARE ENG, V42, P544, DOI 10.1109/TSE.2015.2503740
   Madeyski L., 2020, P 24 INT C EV ASS SO
   Mansoor U, 2017, SOFTWARE QUAL J, V25, P529, DOI 10.1007/s11219-016-9309-7
   Marinescu C., 2005, INT C SMART MULT
   Moha N, 2010, IEEE T SOFTWARE ENG, V36, P20, DOI 10.1109/TSE.2009.50
   Ouni A, 2013, AUTOMAT SOFTW ENG, V20, P47, DOI 10.1007/s10515-011-0098-8
   Palomba F, 2015, IEEE T SOFTWARE ENG, V41, P462, DOI 10.1109/TSE.2014.2372760
   Palomba F, 2013, IEEE INT CONF AUTOM, P268, DOI 10.1109/ASE.2013.6693086
   Pang S, 2020, IEEE INT C INT ROBOT, P10386, DOI 10.1109/IROS45743.2020.9341791
   Patnaik Archana, 2021, DSMLAI '21': Proceedings of the International Conference on Data Science, Machine Learning and Artificial Intelligence, P178, DOI 10.1145/3484824.3484911
   Philipp P, 2019, INT CONF SOFT COMP, P73, DOI [10.1109/ISCMI47871.2019.9004296, 10.1109/iscmi47871.2019.9004296]
   Saca MA, 2017, 2017 IEEE 37TH CENTRAL AMERICA AND PANAMA CONVENTION (CONCAPAN XXXVII)
   Schnappinger M, 2021, PROCEEDINGS OF EVALUATION AND ASSESSMENT IN SOFTWARE ENGINEERING (EASE 2021), P160, DOI 10.1145/3463274.3463315
   Sharma T, 2019, 2019 IEEE/ACM INTERNATIONAL CONFERENCE ON TECHNICAL DEBT (TECHDEBT 2019), P59, DOI 10.1109/TechDebt.2019.00018
   Sharma T, 2018, PROC IEEE ACM INT C, P546, DOI 10.1145/3183440.3183460
   Sharma T, 2017, INT SYMP EMP SOFTWAR, P424, DOI 10.1109/ESEM.2017.57
   Sharma T, 2016, 2016 IEEE/ACM 1ST INTERNATIONAL WORKSHOP ON BRINGING ARCHITECTURAL DESIGN THINKING INTO DEVELOPERS DAILY ACTIVITIES (BRIDGE), P1, DOI [10.1145/2896935.2896938, 10.1109/Bridge.2016.009]
   Sharma T, 2016, 13TH WORKING CONFERENCE ON MINING SOFTWARE REPOSITORIES (MSR 2016), P189, DOI [10.1145/2901739.2901761, 10.1109/MSR.2016.028]
   Shen L, 2020, ASIA PAC SOFWR ENG, P276, DOI 10.1109/APSEC51365.2020.00036
   Taguchi G., 1987, System of Experimental Design: Engineering Methods to Optimize Quality and Minimize Costs, V1st
   Tsantalis N, 2008, CSMR 2008: 12TH EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, P329
   Tsantalis N, 2011, EUR CON SFTWR MTNCE, P25, DOI 10.1109/CSMR.2011.7
   Tufano M, 2017, IEEE T SOFTWARE ENG, V43, P1063, DOI 10.1109/TSE.2017.2653105
   Vaswani A, 2017, ADV NEUR IN, V30
   Wang HZ, 2020, IEEE INT SYMP PARAL, P448, DOI 10.1109/ISPA-BDCloud-SocialCom-SustainCom51426.2020.00082
   Wang WH, 2020, PROCEEDINGS OF THE 2020 IEEE 27TH INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER '20), P261, DOI [10.1109/saner48275.2020.9054857, 10.1109/SANER48275.2020.9054857]
   Wang X, 2020, IEEE INT CONF AUTOM, P871, DOI 10.1145/3324884.3416583
   Yin X, 2021, P INT COMP SOFTW APP, P942, DOI 10.1109/COMPSAC51774.2021.00127
   Yu DJ, 2023, INFORM SOFTWARE TECH, V156, DOI 10.1016/j.infsof.2022.107130
   Yu J, 2021, IEEE INT C S Q R S, P738, DOI 10.1109/QRS54544.2021.00083
   Zhang J, 2019, PROC INT CONF SOFTW, P783, DOI 10.1109/ICSE.2019.00086
NR 60
TC 0
Z9 0
U1 3
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP
PY 2024
VL 236
AR 103110
DI 10.1016/j.scico.2024.103110
EA APR 2024
PG 25
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA PZ8I2
UT WOS:001217986700001
DA 2024-08-05
ER

PT J
AU Becker, P
   Papa, MF
   Olsina, L
AF Becker, Pablo
   Papa, Maria Fernanda
   Olsina, Luis
TI Exploratory study on the syntactic and semantic consistency of terms in
   project management glossaries to provide recommendations for a project
   management ontology
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Exploratory study; Terms; Project management glossary; Syntactic and
   semantic consistency; Recommendations; Project core ontology
AB This paper shows an exploratory study of the syntactic and semantic similarities and discrepancies of the terms of four selected project management glossaries. The main purpose of this study is to provide recommendations on adoptions and adaptations of labels and/or definitions of project management glossary terms to be included in a new or existing project management ontology. As a result, a list of recommended terms for a project management ontology to be built is analyzed. The recommendation of terms will be limited to generic terms that can be located at the core level instead of the domain level in the context of an ontological architecture. In particular, the list of terms will be discussed in light of a previously developed project management ontology that will be updated in future work. Another goal of this work is to evaluate the level of syntactic and semantic consistency and harmonization that currently exists in these glossaries. As a result, it becomes apparent from this early research that many opportunities exist to improve these terminologies for greater consistency, harmonization, and standardization in the field.
C1 [Becker, Pablo; Papa, Maria Fernanda; Olsina, Luis] UNLPam, Fac Ingn, GIDIS Web, Gen Pico, LP, Argentina.
RP Becker, P (corresponding author), UNLPam, Fac Ingn, GIDIS Web, Gen Pico, LP, Argentina.
EM beckerp@ing.unlpam.edu.ar
FU Engineering School at UNLPam, Argentina [09/F079]
FX <B>Acknowledgments</B> This line of research is supported partially by
   the Engineering School at UNLPam, Argentina, in the project coded
   09/F079.
CR Abels S, 2006, LECT NOTES COMPUT SC, V4277, P813
   [Anonymous], 2013, PMBOK Guide, V5th
   [Anonymous], 2017, P2M - A guidebook of program project management for enterprise innovation (Project Management Association of Japan
   APM Association For Project Management, 2021, APM Glossary
   Aramo-Immonen H., 2009, Doctoral dissertation
   Arnicane V, 2016, FRONT ARTIF INTEL AP, V291, P313, DOI 10.3233/978-1-61499-714-6-313
   Becker P, 2022, SOFTWARE QUAL J, V30, P1003, DOI 10.1007/s11219-022-09592-3
   BSI, 2019, BSI 6079.
   Henderson-Sellers B, 2014, COMPUT STAND INTER, V36, P563, DOI 10.1016/j.csi.2013.11.001
   IAPM, 2021, International association of project managers, project managers' guide and agile project managers' guide
   ISO, 2018, ISO/TR 21506
   ISO, 2022, ISO 704
   Olsina L., 2023, Communications in Computer and Information Science, V1718, P73, DOI [10.1007/978-3-031-35924-8_5, DOI 10.1007/978-3-031-35924-8_5]
   Olsina L, 2024, SOFTWARE QUAL J, V32, P27, DOI 10.1007/s11219-023-09638-0
   Papa M.F., 2023, 26 IBEROAMERICAN C S, P31, DOI [10.5753/cibse.2023.24691, DOI 10.5753/CIBSE.2023.24691]
   PMBOK, 2021, PMBOK Guide, a guide to the project management body of knowledge
   PRINCE2, 2017, PRINCE2, 6th edition glossaries of terms
   Rivera B., 2016, CLEI Electr. J., V19, P1
   Ruiz Bertol F.J., 2008, REICIS, V4, P6
   Tebes G., 2022, 25 IBEROAMERICAN C S, P278, DOI [10.5753/cibse.2022.20978, DOI 10.5753/CIBSE.2022.20978]
   Tebes G, 2021, J COMPUT SCI TECHNOL, V21, P126, DOI 10.24215/16666038.21.e12
   Wideman M., 2012, Wideman's project management glossary v5.5
NR 22
TC 0
Z9 0
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUL
PY 2024
VL 235
AR 103094
DI 10.1016/j.scico.2024.103094
EA FEB 2024
PG 18
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA MY3D5
UT WOS:001197148300001
DA 2024-08-05
ER

PT J
AU Savary-Leblanc, M
   Le Pallec, X
   Gérard, S
AF Savary-Leblanc, Maxime
   Le Pallec, Xavier
   Gerard, Sebastien
TI The Modeling Assistant Recommender: A UML class diagram recommender
   system
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Software modeling; Recommender system; Software assistant; Model
   repository
AB IDEs are in full mutation thanks to more and more intelligent code completion and validation functionalities. These intelligent features also facilitate the creation of new ways of programming such as low-code or no-code. In the meantime, modeling environments still suffer, for the most part, from their outdated interfaces, their too basic features, or their lack of usability. Our research work on the topic of modeling assistance has led to the creation of a first building block to initiate a revolution similar to development environments in the landscape of modeling. In this paper, we present the Modeling Assistant Recommender, a score-based multi-criteria recommendation system for class diagrams.
C1 [Savary-Leblanc, Maxime; Le Pallec, Xavier] Univ Lille, Cent Lille, CNRS, IRCICA,UMR 9189 CRIStAL, F-59000 Lille, France.
   [Gerard, Sebastien] Univ Paris Saclay, CEA, List, F-91120 Palaiseau, France.
C3 Universite de Lille; Centrale Lille; Centre National de la Recherche
   Scientifique (CNRS); CEA; Universite Paris Cite; Universite Paris Saclay
RP Savary-Leblanc, M (corresponding author), Univ Lille, Cent Lille, CNRS, IRCICA,UMR 9189 CRIStAL, F-59000 Lille, France.
EM maxime.savaryleblanc@gmail.com
CR Hebig R, 2016, 19TH ACM/IEEE INTERNATIONAL CONFERENCE ON MODEL DRIVEN ENGINEERING LANGUAGES AND SYSTEMS (MODELS'16), P173, DOI 10.1145/2976767.2976778
   López JAH, 2024, SCI COMPUT PROGRAM, V231, DOI 10.1016/j.scico.2023.103009
   Lu J, 2015, DECIS SUPPORT SYST, V74, P12, DOI 10.1016/j.dss.2015.03.008
   Mussbacher G, 2020, SOFTW SYST MODEL, V19, P1045, DOI 10.1007/s10270-020-00814-5
   Savary-Leblanc M., 2021, Augmenting software engineers with modeling assistants
   Savary-Leblanc M., 2021, 33 INT C SOFTWARE EN, P327
   Savary-Leblanc M, 2023, SOFTWARE PRACT EXPER, V53, P856, DOI 10.1002/spe.3170
   Savary-Leblanc M, 2021, 24TH ACM/IEEE INTERNATIONAL CONFERENCE ON MODEL-DRIVEN ENGINEERING LANGUAGES AND SYSTEMS COMPANION (MODELS-C 2021), P631, DOI 10.1109/MODELS-C53483.2021.00097
   Yan ZQ, 2012, INFORM SOFTWARE TECH, V54, P380, DOI 10.1016/j.infsof.2011.11.005
NR 9
TC 0
Z9 0
U1 1
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAY
PY 2024
VL 234
AR 103090
DI 10.1016/j.scico.2024.103090
EA FEB 2024
PG 5
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA LA2U2
UT WOS:001183995700001
DA 2024-08-05
ER

PT J
AU Zong, X
   Zheng, S
   Zou, HT
   Yu, HL
   Gao, S
AF Zong, Xing
   Zheng, Shang
   Zou, Haitao
   Yu, Hualong
   Gao, Shang
TI GraphPyRec: A novel graph-based approach for fine-grained Python code
   recommendation
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Software engineering; Software development; Abstract syntax tree; Code
   graph; Code recommendation
AB Artificial intelligence has been widely applied in software engineering areas such as code recommendation. Significant progress has been made in code recommendation for static languages in recent years, but it remains challenging for dynamic languages like Python as accurately determining data flows before runtime is difficult. This limitation hinders data flow analysis, affecting the performance of code recommendation methods that rely on code analysis. In this study, a graph-based Python recommendation approach (GraphPyRec) is proposed by converting source code into a graph representation that captures both semantic and dynamic information. Nodes represent semantic information, with unique rules defined for various code statements. Edges depict control flow and data flow, utilizing a child-sibling-like process and a dedicated algorithm for data transfer extraction. Alongside the graph, a bag of words is created to include essential names, and a pre-trained BERT model transforms it into vectors. These vectors are integrated into a Gated Graph Neural Network (GGNN) process of the code recommendation model, enhancing its effectiveness and accuracy. To validate the proposed method, we crawled over a million lines of code from GitHub. Experimental results show that GraphPyRec outperforms existing mainstream Python code recommendation methods, achieving Top-1, 5, and 10 accuracy rates of 68.52%, 88.92%, and 94.05%, respectively, along with a Mean Reciprocal Rank (MRR) of 0.772.
C1 [Zong, Xing; Zheng, Shang; Zou, Haitao; Yu, Hualong; Gao, Shang] Jiangsu Univ Sci & Technol, Sch Comp, ZhenJiang 212100, JiangSu, Peoples R China.
C3 Jiangsu University of Science & Technology
RP Zheng, S (corresponding author), Jiangsu Univ Sci & Technol, Sch Comp, ZhenJiang 212100, JiangSu, Peoples R China.
EM szheng@just.edu.cn
FU National Natural Science Foundation of China [62176107]
FX This work was supported in part by the National Natural Science
   Foundation of China under Grant 62176107.
CR Alizadehsani Z, 2023, ENG APPL ARTIF INTEL, V123, DOI 10.1016/j.engappai.2023.106304
   Allamanis M, 2018, Arxiv, DOI arXiv:1711.00740
   Allamanis M, 2018, ACM COMPUT SURV, V51, DOI 10.1145/3212695
   Allamanis M, 2016, PR MACH LEARN RES, V48
   Allamanis M, 2015, 2015 10TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE 2015) PROCEEDINGS, P38, DOI 10.1145/2786805.2786849
   Allamanis M, 2013, IEEE WORK CONF MIN S, P207, DOI 10.1109/MSR.2013.6624029
   Alon U., 2018, arXiv
   Nguyen AT, 2018, 2018 25TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION AND REENGINEERING (SANER 2018), P323, DOI 10.1109/SANER.2018.8330220
   Nguyen AT, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE COMPANION 2014), P544, DOI 10.1145/2591062.2591072
   Ariza-Casabona A, 2023, LECT NOTES COMPUT SC, V13980, P49, DOI 10.1007/978-3-031-28244-7_4
   Ben-Nun T, 2018, ADV NEUR IN, V31
   Bhoopchand A., 2016, arXiv
   Cavnar W.B., 1994, Proceedings of SDAIR-94, 3rd annual symposium on document analysis and information retrieval, V161175, P14
   Chen C, 2022, IEEE T SOFTWARE ENG, V48, P2987, DOI 10.1109/TSE.2021.3074309
   Chen C, 2019, SCI CHINA INFORM SCI, V62, DOI 10.1007/s11432-018-9821-9
   D'Souza AR, 2016, IEEE INT WORK C SO, P51, DOI 10.1109/SCAM.2016.22
   Dam H., 2016, arXiv
   Devlin J, 2019, Arxiv, DOI arXiv:1810.04805
   Efstathiou Vasiliki, 2019, 2019 IEEE/ACM 16th International Conference on Mining Software Repositories (MSR), P29, DOI 10.1109/MSR.2019.00015
   Feng YH, 2023, P INT COMP SOFTW APP, P876, DOI 10.1109/COMPSAC57700.2023.00117
   Franks C, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 2, P705, DOI 10.1109/ICSE.2015.228
   Fritz L, 2017, PROCEEDINGS OF THE 2017 ACM SIGPLAN WORKSHOP ON PARTIAL EVALUATION AND PROGRAM MANIPULATION (PEPM'17), P89, DOI 10.1145/3018882.3018888
   Gorbovitski M, 2010, ACM SIGPLAN NOTICES, V45, P27, DOI 10.1145/1899661.1869635
   Guo DY, 2021, Arxiv, DOI arXiv:2009.08366
   He XC, 2021, PROC INT CONF SOFTW, P1634, DOI 10.1109/ICSE43902.2021.00145
   Hellendoorn V. J., 2020, INT C LEARN REPR
   Hellendoorn VJ, 2017, ESEC/FSE 2017: PROCEEDINGS OF THE 2017 11TH JOINT MEETING ON FOUNDATIONS OF SOFTWARE ENGINEERING, P763, DOI 10.1145/3106237.3106290
   Hindle A, 2016, COMMUN ACM, V59, P122, DOI 10.1145/2902362
   Izadi M, 2022, PROC INT CONF SOFTW, P401, DOI 10.1145/3510003.3510172
   Joulin A, 2016, Arxiv, DOI [arXiv:1607.01759, DOI 10.48550/ARXIV.1607.01759]
   LeClair A, 2020, INT C PROGRAM COMPRE, P184, DOI 10.1145/3387904.3389268
   Li Y, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360588
   Li YJ, 2017, Arxiv, DOI arXiv:1511.05493
   Nadim M, 2022, AUTOMAT SOFTW ENG, V29, DOI 10.1007/s10515-022-00326-0
   Nguyen A.T., 2014, 29 IEEE ACM INT C AU, P457, DOI [10.1145/2642937.2643010, DOI 10.1145/2642937.2643010]
   Nguyen A.T., 2013, P 2013 9 JOINT M FDN, P651
   Nguyen T.T., 2013, P JOINT M EUR SOFTW, P532, DOI DOI 10.1145/2491411.2491458
   Raychev V, 2014, ACM SIGPLAN NOTICES, V49, P419, DOI [10.1145/2666356.2594321, 10.1145/2594291.2594321]
   Salib M., 2004, Ph.D. thesis
   Takerngsaksiri W., 2024, Inf. Softw. Technol., P165
   Tin Kam Ho, 1995, Proceedings of the Third International Conference on Document Analysis and Recognition, P278, DOI 10.1109/ICDAR.1995.598994
   Tu ZP, 2014, 22ND ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (FSE 2014), P269, DOI 10.1145/2635868.2635875
   Tufano M, 2018, IEEE WORK CONF MIN S, P542, DOI 10.1145/3196398.3196431
   Vaswani A, 2017, ADV NEUR IN, V30
   Wainakh Y., 2019, EVALUATING SEMANTIC
   Wan Y, 2019, 34TH IEEE/ACM INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING (ASE 2019), P13, DOI 10.1109/ASE.2019.00012
   Wang WH, 2020, PROCEEDINGS OF THE 2020 IEEE 27TH INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER '20), P261, DOI [10.1109/saner48275.2020.9054857, 10.1109/SANER48275.2020.9054857]
   White M, 2019, 2019 IEEE 26TH INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION AND REENGINEERING (SANER), P479, DOI [10.1109/SANER.2019.8668043, 10.1109/saner.2019.8668043]
   White M, 2015, 12TH WORKING CONFERENCE ON MINING SOFTWARE REPOSITORIES (MSR 2015), P334, DOI 10.1109/MSR.2015.38
   Xie RS, 2019, PROC INT SYMP SOFTW, P369, DOI 10.1109/ISSRE.2019.00044
   Xu ZG, 2016, FSE'16: PROCEEDINGS OF THE 2016 24TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON FOUNDATIONS OF SOFTWARE ENGINEERING, P607, DOI 10.1145/2950290.2950343
   Yu T., 2020, arXiv
   Yu ZP, 2020, AAAI CONF ARTIF INTE, V34, P1145
   Zhang J, 2019, PROC INT CONF SOFTW, P783, DOI 10.1109/ICSE.2019.00086
   Zhang W, 2014, ACM SIGPLAN NOTICES, V49, P727, DOI [10.1145/2660193.2660223, 10.1145/2714064.2660223]
   Zhao G, 2018, ESEC/FSE'18: PROCEEDINGS OF THE 2018 26TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P141, DOI 10.1145/3236024.3236068
   Zheng S, 2021, COMPUT ELECTR ENG, V94, DOI 10.1016/j.compeleceng.2021.107370
   Zhou P, 2016, PROCEEDINGS OF THE 54TH ANNUAL MEETING OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS (ACL 2016), VOL 2, P207, DOI 10.18653/v1/p16-2034
   Zhou Y., 2019, Adv Neural Inf Process Syst, V32
NR 59
TC 0
Z9 0
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC
PY 2024
VL 238
AR 103166
DI 10.1016/j.scico.2024.103166
EA JUN 2024
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA YD7Q9
UT WOS:001266618600001
DA 2024-08-05
ER

PT J
AU Kahan, E
   Genero, M
   Oliveros, A
AF Kahan, Ezequiel
   Genero, Marcela
   Oliveros, Alejandro
TI Refining a design thinking-based requirements elicitation process:
   Insights from a focus group
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Requirement elicitation; Design thinking; Focus group
ID EMPATHY
AB Requirements elicitation processes have a series of challenges and limitations in terms of business process focus, system transparency, and dealing with the complexity resulting from interdependence. The Design Thinking approach, which focuses on people and on understanding the context of problems, can contribute to solving them. For this reason, a requirements elicitation process based on Design Thinking has been defined, consisting of three activities: Empathise, Synthesise, and Ideate. For refining this process, a focus group discussion with experts was conducted. The experts provided feedback, specifically on the role of empathy in the process, its domain of application and activities. The results analysed from the focus group confirm the usefulness of the process and generate a series of lessons learned that allowed us to continue refining it. This paper presents the cited process, the main characteristics and results of the focus group and the refined process.
C1 [Kahan, Ezequiel; Oliveros, Alejandro] Univ Nacl 3 Febrero Buenos Aires, Buenos Aires, Argentina.
   [Genero, Marcela] Univ Castilla La Mancha, Ciudad Real, Spain.
C3 Universidad de Castilla-La Mancha
RP Kahan, E (corresponding author), Univ Nacl 3 Febrero Buenos Aires, Buenos Aires, Argentina.
EM ezequiel.kahan@untref.edu.ar; Marcela.Genero@uclm.es;
   aoliveros@untref.edu.ar
FU ADAGIO (Consejeria de Educacion, Cultura y Deportes de la JCCM)
   [SBLPY/21/180501/000061]; AETHER-UCLM (MICINN) [PID2020-112540RB-C42];
   UNION [2022-GRIN-34110]; European Regional Development Fund (FEDER);
   Proyecto de investigacion en Procesos de desarrollo de Software (linea
   de investigacion en Ingenieria de requisitos, UNTREF, Argentina)
FX The research presented in this paper is part of the following projects:
   ADAGIO (Consejeria de Educacion, Cultura y Deportes de la JCCM,
   SBLPY/21/180501/000061), AETHER-UCLM (MICINN, PID2020-112540RB-C42),
   UNION (2022 -GRIN-34110-Financial support for the execution of applied
   research projects, within the framework of the UCLM Own Research Plan,
   co-financed at 85 % by the European Regional Development Fund (FEDER)
   and "Proyecto de investigacion en Procesos de desarrollo de Software
   (linea de investigacion en Ingenieria de requisitos, UNTREF,
   Argentina)".
CR Amaral L., 2022, PREPRINT, DOI [10.22541/au.166671185.55017806/v1, DOI 10.22541/AU.166671185.55017806/V1]
   [Anonymous], 2012, The Scrum Guide, Software in 30 Days, P133, DOI [10.1002/9781119203278.app2, DOI 10.1002/9781119203278.APP2]
   [Anonymous], 2010, Institute of Design at Stanford: an Introduction to Design Thinking PROCESS GUIDE
   Baxter G, 2011, INTERACT COMPUT, V23, P4, DOI 10.1016/j.intcom.2010.07.003
   Brown T, 2008, HARVARD BUS REV, V86, P84
   Canedo ED, 2022, INT J SOFTW ENG KNOW, V32, P1527, DOI 10.1142/S0218194022500607
   Carlgren L, 2016, CREAT INNOV MANAG, V25, P38, DOI 10.1111/caim.12153
   Carroll N., 2016, Aligning healthcare innovation and software requirements through design thinking, DOI [10.1145/2897683.2897687, DOI 10.1145/2897683.2897687]
   Cross N, 2007, BOARD INT RES DES, P017
   de Souza Filho J.C., 2021, INT C ENT INF SYST I
   designcouncil, Framework for Innovation: Design Council's evolved Double Diamond Model
   Ferreira B, 2018, IET SOFTW, V12, P280, DOI 10.1049/iet-sen.2017.0313
   Gasparini A., 2015, The eighth international conference on advances in computer-human interactions (ACHI'15), P49
   GREENSON RR, 1960, INT J PSYCHOANAL, V41, P418
   Hehn J., 2018, AM C INF SYST
   Hehn J., 2018, MULTIKONFERENZ WIRTS
   Hehn J, 2020, IEEE SOFTWARE, V37, P25, DOI 10.1109/MS.2019.2957715
   Hehn J, 2018, INT REQUIR ENG CONF, P400, DOI 10.1109/RE.2018.00-18
   Jarke M, 2010, LECT NOTES COMPUT SC, V6051, P470, DOI 10.1007/978-3-642-13094-6_36
   Kahan Ezequiel, 2022, Advances in Information Systems Development: Crossing Boundaries Between Development and Operations in Information Systems. Lecture Notes in Information Systems and Organisation (55), P199, DOI 10.1007/978-3-030-95354-6_12
   Kahan E., 2023, CIBSE 2023
   Kahan E., 2019, QUALITY INFORM COMMU, P79, DOI DOI 10.1007/978-3-030-29238-66
   Köppen E, 2015, UNDERST INNOV, P15, DOI 10.1007/978-3-319-06823-7_2
   Kontio J., 2008, Guide to advanced empirical software engineering, P93, DOI [DOI 10.1007/978-1-84800-044-5_4, 10.1007/978-1-84800-044-54]
   Kress G.L., 2012, Design Thinking Research, P189
   Levy M, 2019, INT REQUIR ENG CONF, P351, DOI 10.1109/RE.2019.00044
   Levy M, 2018, 2018 IEEE 5TH INTERNATIONAL WORKSHOP ON EVOLVING SECURITY & PRIVACY REQUIREMENTS ENGINEERING (ESPRE 2018), P9, DOI 10.1109/ESPRE.2018.00008
   Lima Dantas Douglas, 2020, Distributed, Ambient and Pervasive Interactions. 8th International Conference, DAPI 2020 Held as Part of the 22nd HCI International Conference, HCII 2020. Proceedings. Lecture Notes in Computer Science (LNCS 12203), P85, DOI 10.1007/978-3-030-50344-4_7
   Loucopoulos P., 1995, SYSTEM REQUIREMENTS
   Lyytinen K., 2009, Revised and Invited Papers
   Martins HF, 2019, INFORMATION, V10, DOI 10.3390/info10120371
   Meireles M., 2021, ACM INT C P SER, DOI [10.1145/3474624.3477064, DOI 10.1145/3474624.3477064]
   Meireles M.A.C., 2022, P AMIA ANN FALL S
   Pinto F.A., 2022, Anais
   Prestes M, 2020, LECT NOTES BUS INF P, V383, P73, DOI 10.1007/978-3-030-49392-9_5
   Razoumnikova OlgaM., 2013, Encyclopedia of Creativity, Invention, Innovation and Entrepreneurship, P546, DOI [DOI 10.1007/978-1-4614-3858-8_362, 10.1007/978-1-4614-3858-8_362]
   Sommerville I., 2017, Software Engineering, V10th
   Vetterli C., 2013, JUMPSTARTING SCRUM D
   Vetterli C, 2013, IEEE INTERNET COMPUT, V17, P91, DOI 10.1109/MIC.2013.32
   Waloszek G., 2012, Introduction to Design Thinking - SAP User Experience Community
   Wohlin C., 2012, Experimentation in Software Engineering, DOI [10.1007/978-3-642-29044-2., DOI 10.1007/978-3-642-29044-2]
   Wohlin C, 2020, INFORM SOFTWARE TECH, V127, DOI 10.1016/j.infsof.2020.106366
NR 42
TC 0
Z9 0
U1 1
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT
PY 2024
VL 237
AR 103137
DI 10.1016/j.scico.2024.103137
EA MAY 2024
PG 16
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA TW4N3
UT WOS:001244284100001
DA 2024-08-05
ER

PT J
AU Dong, HZ
   Ren, HM
   Shi, JL
   Xie, YC
   Hu, XD
AF Dong, Haozhen
   Ren, Hongmin
   Shi, Jialiang
   Xie, Yichen
   Hu, Xudong
TI Neighborhood contrastive learning-based graph neural network for bug
   triaging
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Software maintenance; Bug triage; Graph neural network; Contrastive
   learning
AB Researchers have been developing automatic bug triaging techniques by leveraging bug information sourced from bug tracking systems. Recent studies have modeled the bug -developer relationship as a graph, introducing graph neural networks for bug triaging. Despite achieving positive outcomes, these methods overlook issues related to data sparsity and fail to fully exploit implicit relationships within the graph. In addressing these challenges, we present the Neighborhood Contrastive Learning -based Graph Neural Network Bug Triaging framework, abbreviated as NCGBT. Our approach models the relationship between bugs and developers as a bipartite graph. We utilize a pre -trained language model to acquire the initial representation of bug nodes. Employing a basic graph neural network framework, we learn the representation of all nodes and leverage these representations to predict developers for a given bug. Our proposed strategy involves neighborhood contrastive learning applied to the basic graph neural network approach. We take into account the neighbors of nodes from both structural and semantic perspectives, utilizing them as contrastive objects. Extensive experiments conducted on three public datasets demonstrate the effectiveness of the NCGBT framework.
C1 [Dong, Haozhen; Ren, Hongmin; Shi, Jialiang; Xie, Yichen; Hu, Xudong] Shanghai Maritime Univ, Coll Informat Engn, Shanghai, Peoples R China.
C3 Shanghai Maritime University
RP Shi, JL (corresponding author), Shanghai Maritime Univ, Coll Informat Engn, Shanghai, Peoples R China.
EM shijialiang0067@stu.shmtu.edu.cn
OI Shi, Jialiang/0009-0002-8765-6901
CR Alazzam I, 2020, IEEE T COMPUT SOC SY, V7, P1288, DOI 10.1109/TCSS.2020.3017501
   Anvik J., 2006, 28th International Conference on Software Engineering Proceedings, P937, DOI 10.1145/1134285.1134457
   Anvik J., 2006, Proceedings of the 28th international conference on Software engineering. ICSE'06, P361, DOI [10.1145/1134285.1134336, DOI 10.1145/1134285.1134336]
   Badashian AS, 2016, LECT NOTES COMPUT SC, V9633, P231, DOI 10.1007/978-3-662-49665-7_14
   Bettenburg N, 2008, PROC IEEE INT CONF S, P337, DOI 10.1109/ICSM.2008.4658082
   Dai J, 2023, J SYST SOFTWARE, V200, DOI 10.1016/j.jss.2023.111667
   Devlin J, 2019, Arxiv, DOI arXiv:1810.04805
   Fang S, 2021, IEEE T RELIAB, V70, P563, DOI 10.1109/TR.2021.3074412
   Giorgi J, 2021, Arxiv, DOI arXiv:2006.03659
   Hassani K, 2020, INT C MACHINE LEARNI, P4116, DOI DOI 10.48550/ARXIV.2006.05582
   He XN, 2020, PROCEEDINGS OF THE 43RD INTERNATIONAL ACM SIGIR CONFERENCE ON RESEARCH AND DEVELOPMENT IN INFORMATION RETRIEVAL (SIGIR '20), P639, DOI 10.1145/3397271.3401063
   He XN, 2017, PROCEEDINGS OF THE 26TH INTERNATIONAL CONFERENCE ON WORLD WIDE WEB (WWW'17), P173, DOI 10.1145/3038912.3052569
   Hu H, 2014, PROC INT SYMP SOFTW, P122, DOI 10.1109/ISSRE.2014.17
   Jahanshahi H, 2022, INFORM SOFTWARE TECH, V151, DOI 10.1016/j.infsof.2022.107025
   Jeong G, 2009, 7TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P111, DOI 10.1145/1595696.1595715
   Jonsson L, 2016, EMPIR SOFTW ENG, V21, P1533, DOI 10.1007/s10664-015-9401-9
   Karypis G., 2001, Proceedings of the 2001 ACM CIKM. Tenth International Conference on Information and Knowledge Management, P247, DOI 10.1145/502585.502627
   Li JN, 2021, Arxiv, DOI arXiv:2005.04966
   Li ZX, 2021, 2021 36TH IEEE/ACM INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING ASE 2021, P1183, DOI 10.1109/ASE51524.2021.9678863
   Lin ZH, 2022, PROCEEDINGS OF THE ACM WEB CONFERENCE 2022 (WWW'22), P2320, DOI 10.1145/3485447.3512104
   Liu YX, 2023, IEEE T KNOWL DATA EN, V35, P5879, DOI 10.1109/TKDE.2022.3172903
   Mi H., 2016, arXiv
   Moon TK, 1996, IEEE SIGNAL PROC MAG, V13, P47, DOI 10.1109/79.543975
   Park J.-w., 2011, Costriage: a cost-aware triage algorithm for bug reporting systems, V25, P139, DOI DOI 10.1609/AAAI.V25I1.7839
   Rendle S, 2012, Arxiv, DOI [arXiv:1205.2618, 10.48550/arXiv.1205.2618]
   Sarwar B., 2001, Proceedings of the 10th internationalConference on World Wide Web (Hong Kong, Hong Kong, May 01-05, P285, DOI DOI 10.1145/371920.372071
   Sun Fan-Yun, 2019, arXiv
   Sun JN, 2019, IEEE DATA MINING, P1306, DOI 10.1109/ICDM.2019.00165
   Tang H, 2023, IEEE T MULTIMEDIA, V25, P339, DOI 10.1109/TMM.2021.3126146
   Tecimer KA, 2022, INFORM SOFTWARE TECH, V149, DOI 10.1016/j.infsof.2022.106956
   Tüzün E, 2022, IEEE SOFTWARE, V39, P85, DOI 10.1109/MS.2021.3098670
   van den Oord A, 2019, Arxiv, DOI [arXiv:1807.03748, DOI 10.48550/ARXIV.1807.03748]
   Veličkovic P, 2018, Arxiv, DOI [arXiv:1809.10341, DOI 10.48550/ARXIV.1809.10341]
   Wu HR, 2022, KNOWL-BASED SYST, V241, DOI 10.1016/j.knosys.2022.108308
   Wu JC, 2021, SIGIR '21 - PROCEEDINGS OF THE 44TH INTERNATIONAL ACM SIGIR CONFERENCE ON RESEARCH AND DEVELOPMENT IN INFORMATION RETRIEVAL, P726, DOI 10.1145/3404835.3462862
   Wu L, 2019, PROCEEDINGS OF THE 42ND INTERNATIONAL ACM SIGIR CONFERENCE ON RESEARCH AND DEVELOPMENT IN INFORMATION RETRIEVAL (SIGIR '19), P235, DOI 10.1145/3331184.3331214
   Xuan JF, 2017, Arxiv, DOI arXiv:1704.04769
   Xuan JF, 2015, IEEE T KNOWL DATA EN, V27, P264, DOI 10.1109/TKDE.2014.2324590
   Yao TS, 2021, PROCEEDINGS OF THE 30TH ACM INTERNATIONAL CONFERENCE ON INFORMATION & KNOWLEDGE MANAGEMENT, CIKM 2021, P4321, DOI 10.1145/3459637.3481952
   You Yuning, 2020, Adv Neural Inf Process Syst
   Zhu YQ, 2021, PROCEEDINGS OF THE WORLD WIDE WEB CONFERENCE 2021 (WWW 2021), P2069, DOI 10.1145/3442381.3449802
NR 41
TC 0
Z9 0
U1 3
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUL
PY 2024
VL 235
AR 103093
DI 10.1016/j.scico.2024.103093
EA FEB 2024
PG 12
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA NV9A1
UT WOS:001203336500001
OA hybrid
DA 2024-08-05
ER

PT J
AU Ignaim, K
   Fernandes, JM
   Ferreira, AL
AF Ignaim, Karam
   Fernandes, Joao M.
   Ferreira, Andre L.
TI An industrial experience of using reference architectures for mapping
   features to code
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Software product line; Feature model; Feature location; Maintenance;
   Traceability; Mapping
ID SOFTWARE PRODUCT LINES
AB Context: Software Product Lines (SPLs) constitute a popular method for encouraging the methodical reuse of software artefacts. Just like any other piece of software, SPLs require management throughout their evolution, namely to preserve the consistency between requirements and the code. Problem: Over time, for a given SPL, many change requests are made and all of them need to be integrated in a consistent and coordinated way. The evolution of an SPL is facilitated if there exist links between its artefacts, namely between each feature and its respective pieces of implementation code. Method: This paper proposes FMap, a systematic feature mapping approach to be used within SPLs. FMap traces a Feature Model (FM) to other artefacts of an SPL, the reference architecture, and the code, and it establishes connections between each feature of the FM and its locations in the code -base. Additionally, we have created a tool called friendlyMapper to provide some automatic support for the approach. Using two case studies from two different companies, FMap and friendlyMapper are evaluated. Results: The evaluation of the case studies indicates that the FMap approach outperforms the baseline approach (i.e., the branching approach). Contribution: This work contributes with FMap, a novel tool-based approach that supports featurearchitecture-code mappings based on reference architecture. FMap assists software engineers in adapting the evolution of the SPLs to accommodate new features and change requests as the SPLs evolve. The case studies for both companies demonstrate that the approach is applicable to real -world products and is able to support feature traceability and maintain consistency among features, architecture, and code.
C1 [Ignaim, Karam] Al Balqa Appl Univ BAU, Prince Abdullah bin Ghazi Fac Informat & Commun Te, Dept Software Engn, Salt, Jordan.
   [Fernandes, Joao M.; Ferreira, Andre L.] Univ Minho, ALGORITMI, Braga, Portugal.
   [Fernandes, Joao M.; Ferreira, Andre L.] Univ Minho, Dept Informat, Braga, Portugal.
   [Ferreira, Andre L.] Bosch Car Multimedia Portugal, Braga, Portugal.
C3 Al-Balqa Applied University; Universidade do Minho; Universidade do
   Minho
RP Ignaim, K (corresponding author), Al Balqa Appl Univ BAU, Prince Abdullah bin Ghazi Fac Informat & Commun Te, Dept Software Engn, Salt, Jordan.
EM karam.ignaim@bau.edu.jo; jmf@di.uminho.pt; Andre.Ferreira2@pt.bosch.com
FU T-Fundacao para a Ciencia e a Tecnologia within the R&D Units Project
   Scope [UIDB/00319/2020]
FX We would like to thank the classical sensor development team at Bosch
   Car Multimedia S.A. and particularly the project manager, Jana Seidl,
   for her help and support. We would also like to thank the software
   engineers at Pioneers Company. This work has been supported by
   FCT-Fundacao para a Ciencia e a Tecnologia within the R&D Units Project
   Scope UIDB/00319/2020.
CR Abukwaik H, 2018, PROC IEEE INT CONF S, P529, DOI 10.1109/ICSME.2018.00049
   AL-Msie'deen Ra'Fat, 2013, Safe and Secure Software Reuse. 13th International Conference on Software Reuse, ICSR 2013. Proceedings: LNCS 7925, P302, DOI 10.1007/978-3-642-38977-1_22
   Al-Msie'deen R., 2014, P 11 INT C CONCEPT L, P95
   Al-Msiedeen R., 2014, Ph.D. thesis
   Alves V, 2010, INFORM SOFTWARE TECH, V52, P806, DOI 10.1016/j.infsof.2010.03.014
   Apel S., 2013, Feature-Oriented Software Product Lines, P3, DOI DOI 10.1007/978-3-642-37521-7
   Assuncao W.K.G., 2014, 18 INT SOFTWARE PROD, V2, P52, DOI [/10.1145/2647908.2655967, DOI 10.1145/2647908.2655967]
   Berger T, 2010, LECT NOTES COMPUT SC, V6287, P498, DOI 10.1007/978-3-642-15579-6_48
   Bragança A, 2007, SPLC 2007: 11TH INTERNATIONAL SOFTWARE PRODUCT LINE CONFERENCE, PROCEEDINGS, P3, DOI 10.1109/SPLINE.2007.17
   Broy M, 2009, COMPUTER, V42, P98, DOI 10.1109/MC.2009.413
   Buzaid F., 2021, 4 SMART CITIES S SCS, P72, DOI 10.1049/icp.2022.0316
   Couto MV, 2011, EUR CON SFTWR MTNCE, P191, DOI 10.1109/CSMR.2011.25
   Davril Jean-Marc., 2013, JOINT M EUR SOFTW EN, P290, DOI DOI 10.1145/2491411.2491455
   Díaz J, 2015, REQUIR ENG, V20, P323, DOI 10.1007/s00766-014-0203-1
   Eriksson M, 2005, LECT NOTES COMPUT SC, V3714, P33
   Eyal-Salman H., 2013, 1 INT WORKSHOP REVER, P17
   Feigenspan Janet, 2010, Proceedings of the 18th IEEE International Conference on Program Comprehension (ICPC 2010), P34, DOI 10.1109/ICPC.2010.15
   Gomaa H, 2011, SOFTWARE MODELING AND DESIGN: UML, USE CASES, PATTERNS, AND SOFTWARE ARCHITECTURES, P1, DOI 10.1017/CBO9780511779183
   Gomaa H, 2006, LECT NOTES COMPUT SC, V4039, P440
   Gotel O. C. Z., 1994, Proceedings of the First International Conference on Requirements Engineering (Cat. No.94TH0613-0), P94, DOI 10.1109/ICRE.1994.292398
   Hakimi Y., 2021, 5 INT C NETWORKING A, P1, DOI [10.1109/ICNAS53565.2021.9628950, DOI 10.1109/ICNAS53565.2021.9628950]
   Heidenreich F, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P943
   Ignaim K, 2019, 23RD INTERNATIONAL SYSTEMS AND SOFTWARE PRODUCT LINE CONFERENCE(SPLC 2019), VOL B, P183, DOI 10.1145/3307630.3342409
   Janota M, 2008, LECT NOTES COMPUT SC, V4961, P31, DOI 10.1007/978-3-540-78743-3_3
   Linsbauer Lukas., 2013, P 17 INT SOFTW PROD, P131
   Martinez J, 2016, LECT NOTES COMPUT SC, V9679, P267, DOI 10.1007/978-3-319-35122-3_18
   Martinez Jabier, 2015, P 19 INT C SOFTW PRO, P101, DOI DOI 10.1145/2791060.2791086
   Mortara J, 2020, PROCEEDINGS OF THE 14TH INTERNATIONAL WORKING CONFERENCE ON VARIABILITY MODELLING OF SOFTWARE-INTENSIVE SYSTEMS (VAMOS '20), DOI 10.1145/3377024.3377037
   Olsson T, 2022, J SYST SOFTWARE, V183, DOI 10.1016/j.jss.2021.111095
   Olszak A, 2012, SCI COMPUT PROGRAM, V77, P131, DOI 10.1016/j.scico.2010.10.007
   Pohl K., 2005, SOFTWARE PRODUCT LIN, V10
   Sepúlveda S, 2016, INFORM SOFTWARE TECH, V69, P16, DOI 10.1016/j.infsof.2015.08.007
   Seriai A.-D., 2013, 25 INT C SOFTWARE EN, P244
   She S, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P461, DOI 10.1145/1985793.1985856
   Sinkala ZT, 2022, LECT NOTES COMPUT SC, V13365, P86, DOI 10.1007/978-3-031-15116-3_5
   van der Linden Frank, 2007, Software Product Lines in Action: The Best Industrial Practice in Product Line Engineering, DOI [10.1007/978-3-540-71437-8, DOI 10.1007/978-3-540-71437-8]
   Wanderley F., 2012, 16 INT SOFTWARE PROD, V2, P18, DOI [/10.1145/2364412.2364416, DOI 10.1145/2364412.2364416]
   Yinxing Xue, 2012, 2012 19th Working Conference on Reverse Engineering (WCRE), P145, DOI 10.1109/WCRE.2012.24
   Zheng YJ, 2017, 2017 IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ARCHITECTURE (ICSA 2017), P225, DOI 10.1109/ICSA.2017.13
   Zheng YJ, 2012, PROC INT CONF SOFTW, P628, DOI 10.1109/ICSE.2012.6227154
   Ziadi T, 2012, EUR CON SFTWR MTNCE, P417, DOI 10.1109/CSMR.2012.52
NR 41
TC 1
Z9 1
U1 4
U2 4
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAY
PY 2024
VL 234
AR 103087
DI 10.1016/j.scico.2024.103087
EA FEB 2024
PG 16
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA KG7C4
UT WOS:001178860300001
DA 2024-08-05
ER

PT J
AU Jesus, J
   Sampaio, A
AF Jesus, Joabe
   Sampaio, Augusto
TI Local deadlock analysis of Simulink models based on timed behavioural
   patterns and theorem proving
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE CSP; CSP-prover; Block diagrams; Simulink; Deadlock analysis
ID CONTROL LAW DIAGRAMS
AB Compositional deadlock analysis of process networks is a well-known challenge. We propose a compositional deadlock analysis strategy for timed process networks, more specifically, those obtained from Simulink multi -rate block diagrams. We handle models with both acyclic and cyclic communication graphs. Particularly, the latter naturally happens in Simulink models with feedback, among other kinds of cycles. Since there is no general solution to analyse cyclic models in a compositional way, we explore the use of behavioural patterns that allow the verification to be carried out in a compositional fashion. We represent process networks in tock - CSP , a dialect of CSP that allows modelling time aspects using a special tock event. The verification approach is implemented as a new package in CSP - Prover , a theorem prover for CSP which is itself implemented in Isabelle / HOL . To illustrate the overall approach and, particularly, how it can scale, we consider several variations of an actuation system with increasing complexity. We show that the examples are instances of the client/server and the asynchronous dynamic timed behaviour patterns. These patterns and all verification steps are formalised using CSP - Prover .
C1 [Jesus, Joabe; Sampaio, Augusto] Fed Univ Pernambuco UFPE, Ave Jornalista Anibal Fernandes,s-n Cidade Univ, BR-50740560 Recife, PE, Brazil.
C3 Universidade Federal de Pernambuco
RP Jesus, J (corresponding author), Fed Univ Pernambuco UFPE, Ave Jornalista Anibal Fernandes,s-n Cidade Univ, BR-50740560 Recife, PE, Brazil.
EM jbjj@cin.ufpe.br; acas@cin.ufpe.br
FU National Institute of Science and Technology for Software Engineering
   (INES) [CNPq/465614/2014-0, FACEPE/APQ/0388-1.03/14, 16,12]
FX This work was partially supported by the National Institute of Science
   and Technology for Software Engineering (INES) , grants
   CNPq/465614/2014-0 and FACEPE/APQ/0388-1.03/14. We would like to thank
   Pedro Antonino and Bill Roscoe for the discussions on the extension of
   the approach in [16,12] to handle tock-CSP models and the referees of
   SBMF 2022 for their comments.
CR ALPERN B, 1985, INFORM PROCESS LETT, V21, P181, DOI 10.1016/0020-0190(85)90056-0
   Antonino P.R.G., 2013, Master's thesis
   Antonino P, 2014, LECT NOTES COMPUT SC, V8442, P62, DOI 10.1007/978-3-319-06410-9_5
   Arthan R, 2000, ICFEM 2000: THIRD INTERNATIONAL CONFERENCE ON FORMAL ENGINEERING METHODS, PROCEEDINGS, P169, DOI 10.1109/ICFEM.2000.873817
   Back R.-J., 1998, Refinement Calculus: A Systematic Introduction
   Baheti Radhakisan, 2011, The Impact of Control Technology, V12, P161, DOI DOI 10.1145/1795194.1795205
   Baxter J, 2023, ACM T COMPUT LOG, V24, DOI 10.1145/3572837
   Baxter J, 2022, ACTA INFORM, V59, P125, DOI 10.1007/s00236-020-00394-3
   Bernard R., 2007, 1 IFAC WORKSH DEP CO
   Bernardeschi C, 2018, IEEE T SOFTWARE ENG, V44, P512, DOI 10.1109/TSE.2017.2694423
   Boström P, 2016, SOFTW SYST MODEL, V15, P1141, DOI 10.1007/s10270-015-0477-x
   Boström P, 2011, LECT NOTES COMPUT SC, V6991, P291, DOI 10.1007/978-3-642-24559-6_21
   Bouissou O, 2012, ACM SIGPLAN NOTICES, V47, P129, DOI 10.1145/2345141.2248437
   Brookes S.D., 1985, Logics and Models of Concurrent Systems, P305
   Cavalcanti A, 2005, LECT NOTES COMPUT SC, V3582, P253
   Chen CQ, 2006, LECT NOTES COMPUT SC, V4260, P74
   Conserva MS, 2018, INFORM PROCESS LETT, V133, P21, DOI 10.1016/j.ipl.2017.12.011
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Demarchi F.L., 2005, Thesis of master in science
   Didier Andre, 2012, Formal Methods: Foundations and Applications. Proceedings 15th Brazilian Symposium, SBMF 2012, P115, DOI 10.1007/978-3-642-33296-8_10
   Dragomir Iulia, 2016, Model-Checking Software. 23rd International Symposium, SPIN 2016, co-located with ETAPS 2016. Proceedings: LNCS 9641, P38, DOI 10.1007/978-3-319-32582-8_3
   Evans N, 2005, J LOGIC ALGEBR PROGR, V64, P253, DOI 10.1016/j.jlap.2004.09.005
   Evans N, 2000, LECT NOTES COMPUT SC, V1895, P222
   Farias A., 2008, J. Braz. Comput. Soc, V14
   Gibson-Robinson T., 2014, Lecture Notes in Computer Science, V8413, P187
   Gibson-Robinson T., 2013, Failures Divergences Refinement (FDR) Version 3
   Gigante Gabriella, 2012, Leveraging Applications of Formal Methods, Verification and Validation. Applications and Case Studies. Proceedings of the 5th International Symposium, ISoLA 2012, P205, DOI 10.1007/978-3-642-34032-1_21
   Grijo L.F., 2004, Thesis of master in science,
   Hoare C.A.R., 1998, Unifying theories of programming
   HOARE CAR, 1978, COMMUN ACM, V21, P666, DOI 10.1145/359576.359585
   Horvath B., 2020, P 23 ACM IEEE INT C
   ISO/IEC, 2023, Tech. Rep. 15288
   Isobe Y, 2005, LECT NOTES COMPUT SC, V3440, P108
   Isobe Y., 2004, User Guide CSP-Prover
   Isobe Y., 2008, JSSST Comput. Softw., V25, P85
   Isobe Y., 2005, Japanese Lecture Notes Series, V31, P257
   Jesus J., 2023, Local Deadlock Analysis of Simulink Models based on Timed Behavioural Patterns and Theorem Proving: Running Example WebSite
   Jesus J., 2023, CSP-Prover GitHub Repository: jbjj-phd branch
   Jesus J, 2022, LECT NOTES COMPUT SC, V13768, P91, DOI 10.1007/978-3-031-22476-8_6
   Jesus J, 2011, LECT NOTES COMPUT SC, V6991, P323, DOI 10.1007/978-3-642-24559-6_23
   LEE EA, 1987, P IEEE, V75, P1235, DOI 10.1109/PROC.1987.13876
   Mathworks, 2019, Simulink User's Guide
   Mathworks, 2019, Simulink Design Verifier User's Guide
   Mathworks, 2008, Simulink Validation and Verification 2 User's Guide
   Oliveira MVM, 2013, LECT NOTES COMPUT SC, V8137, P46, DOI 10.1007/978-3-642-40561-7_4
   Meenakshi B, 2006, LECT NOTES COMPUT SC, V4260, P606
   Morel L., 2007, Design and validation of digital controllers for hydraulic systems
   Mota A., 2002, WORKSH MET FORM
   Mota A., 2002, Model Checking CSPZ: Techniques to Overcome State Explosion
   Mota A, 2010, LECT NOTES COMPUT SC, V6351, P361, DOI 10.1007/978-3-642-15651-9_27
   NASA, 2020, NASA System Engineering Handbook
   Ogata K., 1997, Modern Control Engineering, V6th
   OWRE S, 1992, LECT NOTES ARTIF INT, V607, P748
   Paulson L.C., 1994, J. Automat. Reason., V5, DOI DOI 10.1007/BFB0030541
   Peleska J, 2005, LECT NOTES COMPUT SC, V3525, P293
   Pratt R.W., 2000, FLIGHT CONTROL SYSTE
   Preoteasa V, 2022, INFORM COMPUT, V285, DOI 10.1016/j.ic.2021.104819
   Preoteasa V, 2019, LECT NOTES COMPUT SC, V11388, P577, DOI 10.1007/978-3-030-11245-5_27
   Roscoe A., 1997, The Theory and Practice of Concurrency
   ROSCOE AW, 1987, INFORM COMPUT, V75, P289, DOI 10.1016/0890-5401(87)90004-6
   Rossum G, 2009, Python 3 Reference Manual, DOI DOI 10.5555/1593511
   Samuel DG, 2009, ELECTRON NOTES THEOR, V250, P119, DOI 10.1016/j.entcs.2009.08.021
   Scholten C.S., 1982, A Class of Simple Communication Patterns, P334
   Sun Q, 2022, LECT NOTES COMPUT SC, V13649, P134, DOI 10.1007/978-3-031-21213-0_9
   Taha S., 2019, Hol-csp version 2.0, Archive of Formal Proofs
   Visser W, 2012, SOFTW SYST MODEL, V11, P541, DOI 10.1007/s10270-012-0281-9
   Xu X, 2023, J LOG ALGEBR METHODS, V130, DOI 10.1016/j.jlamp.2022.100809
   Ye K., 2019, Compositional Assume-Guarantee Reasoning of Control Law Diagrams Using UTP, from Astrophysics to Unconventional Computation
   Zeyda F, 2009, LECT NOTES COMPUT SC, V5423, P151
   Zhan N., 2016, Formal Verification of Simulink/Stateflow Diagrams: A Deductive Approach
   Zhang W, 2023, J SYST ARCHITECT, V141, DOI 10.1016/j.sysarc.2023.102922
   Zhang W, 2022, WIREL COMMUN MOB COM, V2022, DOI 10.1155/2022/8015896
NR 72
TC 0
Z9 0
U1 2
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP
PY 2024
VL 236
AR 103113
DI 10.1016/j.scico.2024.103113
EA APR 2024
PG 38
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA RT6C4
UT WOS:001229940000001
DA 2024-08-05
ER

PT J
AU Haltermann, J
   Jakobs, MC
   Richter, C
   Wehrheim, H
AF Haltermann, Jan
   Jakobs, Marie-Christine
   Richter, Cedric
   Wehrheim, Heike
TI Parallel program analysis on path ranges
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Ranged symbolic execution; Cooperative software verification; Parallel
   configurable program analysis
ID SYMBOLIC EXECUTION; MODEL CHECKING; VERIFICATION; ABSTRACTIONS
AB Symbolic execution is a software verification technique symbolically running programs and thereby checking for bugs. Ranged symbolic execution performs symbolic execution on program parts, so-called path ranges , in parallel. Due to the parallelism, verification is accelerated and hence scales to larger programs. In this paper, we discuss a generalization of ranged symbolic execution to arbitrary program analyses. More specifically, we present a verification approach that splits programs into path ranges and then runs arbitrary analyses on the ranges in parallel. Our approach in particular allows to run different analyses on different program parts. We have implemented this generalization on top of the tool CPA CHECKER and evaluated it on programs from the SVCOMP benchmark. Our evaluation shows that verification can benefit from the parallelization of the verification task, but also needs a form of work stealing (between analyses) to become efficient.
C1 [Haltermann, Jan; Richter, Cedric; Wehrheim, Heike] Carl von Ossietzky Univ Oldenburg, Dept Comp Sci, Ammerlaender Heerstr 114-118, D-26129 Oldenburg, Germany.
   [Jakobs, Marie-Christine] Ludwig Maximilians Univ Munchen, Dept Comp Sci, Oettingenstr 67, D-80538 Munich, Germany.
C3 Carl von Ossietzky Universitat Oldenburg; University of Munich
RP Haltermann, J (corresponding author), Carl von Ossietzky Univ Oldenburg, Dept Comp Sci, Ammerlaender Heerstr 114-118, D-26129 Oldenburg, Germany.
EM jan.haltermann@uol.de; m.jakobs@lmu.de; cedric.richter@uol.de;
   heike.wehrheim@uol.de
FU German Research Foundation (DFG) [WE2290/13-1, WE2290/13-2]
FX Partially supported by the German Research Foundation
   (DFG)-WE2290/13-1(Coop) and WE2290/13-2(Coop2).
CR Albarghouthi A, 2012, LECT NOTES COMPUT SC, V7214, P157, DOI 10.1007/978-3-642-28756-5_12
   Alshmrany KM, 2021, LECT NOTES COMPUT SC, V12740, P85, DOI 10.1007/978-3-030-79379-1_6
   Avgerinos T, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P1083, DOI 10.1145/2568225.2568293
   Baars A., 2011, 2011 26th IEEE/ACM International Conference on Automated Software Engineering, P53, DOI 10.1109/ASE.2011.6100119
   Baluda M, 2015, INT WORKSH AUT TEST, P16, DOI [10.1145/2804322.2804325, DOI 10.1145/2804322.2804325]
   Barnat J, 2003, 18TH IEEE INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING, PROCEEDINGS, P106, DOI 10.1109/ASE.2003.1240299
   Beckman NelsE., 2008, Proceedings of the 2008 international symposium on Software testing and analysis, ISSTA '08, P3, DOI DOI 10.1145/1390630.1390634
   Beyer Dirk, 2020, Leveraging Applications of Formal Methods, Verification and Validation. Verification. Principles. 9th International Symposium on Leveraging Applications of Formal Methods, ISoLA 2020. Proceedings. Lecture Notes in Computer Science (LNCS 12476), P143, DOI 10.1007/978-3-030-61362-4_8
   Beyer Dirk, 2018, Leveraging Applications of Formal Methods, Verification and Validation. Verification. 8th International Symposium, ISoLA 2018. Proceedings: Lecture Notes in Computer Science (LNCS 11245), P144, DOI 10.1007/978-3-030-03421-4_11
   Beyer Dirk, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P184, DOI 10.1007/978-3-642-22110-1_16
   Beyer D., 2010, 2010 Formal Methods in Computer-Aided Design (FMCAD 2010), P189
   Beyer Dirk, 2008, 2008 23rd IEEE/ACM International Conference on Automated Software Engineering, P29, DOI 10.1109/ASE.2008.13
   Beyer D., 2013, ESEC FSE, P389, DOI [10.1145/2491411.2491429, DOI 10.1145/2491411.2491429]
   Beyer D., 2012, P ACM SIGSOFT 20 INT, P57, DOI DOI 10.1145/2393596.2393664
   Beyer D, 2007, LECT NOTES COMPUT SC, V4590, P504
   Beyer D, 2022, ACM T SOFTW ENG METH, V31, DOI 10.1145/3477579
   Beyer D, 2022, PROC INT CONF SOFTW, P536, DOI 10.1145/3510003.3510064
   Beyer D, 2022, LECT NOTES COMPUT SC, V13243, P561, DOI 10.1007/978-3-030-99524-9_31
   Beyer D, 2019, LECT NOTES COMPUT SC, V11424, P389, DOI 10.1007/978-3-030-16722-6_23
   Beyer D, 2018, IEEE INT CONF AUTOM, P634, DOI 10.1145/3238147.3238195
   Beyer D, 2019, LECT NOTES COMPUT SC, V11781, P189, DOI 10.1007/978-3-030-31784-3_11
   Beyer D, 2019, INT J SOFTW TOOLS TE, V21, P1, DOI 10.1007/s10009-017-0469-y
   Beyer D, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P1182, DOI 10.1145/3180155.3180259
   Beyer D, 2018, J AUTOM REASONING, V60, P299, DOI 10.1007/s10817-017-9432-6
   Beyer D, 2016, FSE'16: PROCEEDINGS OF THE 2016 24TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON FOUNDATIONS OF SOFTWARE ENGINEERING, P326, DOI 10.1145/2950290.2950351
   Beyer D, 2015, 2015 10TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE 2015) PROCEEDINGS, P721, DOI 10.1145/2786805.2786867
   Beyer D, 2015, LECT NOTES COMPUT SC, V9206, P622, DOI 10.1007/978-3-319-21690-4_42
   Beyer D, 2013, LECT NOTES COMPUT SC, V7793, P146, DOI 10.1007/978-3-642-37057-1_11
   Boldo S, 2009, LECT NOTES COMPUT SC, V5625, P59, DOI 10.1007/978-3-642-02614-0_10
   Braione P, 2017, PROCEEDINGS OF THE 26TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS (ISSTA'17), P90, DOI 10.1145/3092703.3092715
   Bucur S, 2011, EUROSYS 11: PROCEEDINGS OF THE EUROSYS 2011 CONFERENCE, P183
   Chalupa Marek, 2024, Tools and Algorithms for the Construction and Analysis of Systems: 30th International Conference, TACAS 2024, Held as Part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2024, Proceedings. Lecture Notes in Computer Science (14572), P353, DOI 10.1007/978-3-031-57256-2_20
   Chebaro O., 2012, P SAC ACM, P1284, DOI DOI 10.1145/2245276.2231980
   Chen TY, 2021, PROCEEDINGS OF THE 29TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE '21), P1154, DOI 10.1145/3468264.3468626
   Chowdhury AB, 2019, LECT NOTES COMPUT SC, V11429, P244, DOI 10.1007/978-3-030-17502-3_22
   Christakis Maria, 2012, FM 2012: Formal Methods. Proceedings of the 18th International Symposium, P132, DOI 10.1007/978-3-642-32759-9_13
   Christakis M, 2021, LECT NOTES COMPUT SC, V12759, P201, DOI 10.1007/978-3-030-81685-8_9
   Christakis M, 2016, PROC INT CONF SOFTW, P144, DOI 10.1145/2884781.2884843
   Ciortea Liviu, 2009, Operating Systems Review, V43, P5, DOI 10.1145/1713254.1713257
   Clarke E.M., 2000, COMPUTER AIDED VERIF, V1855, P154
   Cousot P., 1979, 6 ACM S PRINC PROGR, P269, DOI [DOI 10.1145/567752.567778, 10.1145/567752.567778]
   Cousot P, 2007, LECT NOTES COMPUT SC, V4435, P272
   Csallner C, 2005, PROC INT CONF SOFTW, P422
   Czech M, 2015, LECT NOTES COMPUT SC, V9033, P100, DOI 10.1007/978-3-662-46675-9_7
   Czech Mike., 2017, Proceedings of the 3rd ACM SIGSOFT International Workshop on Software Analytics, SWAN 2017, P23, DOI [DOI 10.1145/3121257.3121262, 10 . 1145 / 3121257 . 3121262]
   Daca P, 2016, LECT NOTES COMPUT SC, V9583, P328, DOI 10.1007/978-3-662-49122-5_16
   Dams DR, 2006, LECT NOTES COMPUT SC, V4111, P138
   Dangl Matthias, 2015, Tools and Algorithms for the Construction and Analysis of Systems. 21st International Conference, TACAS 2015, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2015. Proceedings: LNCS 9035, P423, DOI 10.1007/978-3-662-46681-0_34
   Demyanova Y, 2015, LECT NOTES COMPUT SC, V9206, P561, DOI 10.1007/978-3-319-21690-4_39
   Dijkstra EdsgerW., 1990, TEXTS MONOGRAPHS COM
   Ferles K, 2017, ESEC/FSE 2017: PROCEEDINGS OF THE 2017 11TH JOINT MEETING ON FOUNDATIONS OF SOFTWARE ENGINEERING, P174, DOI 10.1145/3106237.3106249
   Funes D., 2012, SIGSOFT Softw. Eng. Notes, V37, P1, DOI [/10.1145/2382756.2382799, DOI 10.1145/2382756.2382799]
   Gadelha MR, 2018, IEEE INT CONF AUTOM, P888, DOI 10.1145/3238147.3240481
   Galeotti JP, 2013, PROC INT SYMP SOFTW, P360, DOI 10.1109/ISSRE.2013.6698889
   Gamma E., 1993, ECOOP '93 - Object-Oriented Programming. 7th European Conference Proceedings, P406
   Gao M, 2016, IEEE INT WORK C SO, P127, DOI 10.1109/SCAM.2016.26
   Garavel H., 2001, LNCS, P217
   Gargantini A., 2015, P ICST IEEE, P1
   Ge X, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P992, DOI 10.1145/1985793.1985971
   Gerrard MJ, 2019, 2019 IEEE/ACM 41ST INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING: COMPANION PROCEEDINGS (ICSE-COMPANION 2019), P35, DOI 10.1109/ICSE-Companion.2019.00032
   Godefroid P, 2005, ACM SIGPLAN NOTICES, V40, P213, DOI 10.1145/1064978.1065036
   Godefroid P., 2008, P NDSS INT SOC
   Godefroid P, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P43, DOI 10.1145/1706299.1706307
   Groce A., 2012, INT S SOFTW TEST AN, P78, DOI DOI 10.1145/2338965.2336763
   Gulavani B.S., 2006, SIGSOFT FSE, P117, DOI [10.1145/1181775.1181790, DOI 10.1145/1181775.1181790]
   Guowei Yang, 2015, ACM SIGSOFT Software Engineering Notes, V40, P1, DOI 10.1145/2830719.2830729
   Haltermann Jan, 2023, Fundamental Approaches to Software Engineering: 26th International Conference, FASE 2023, Held as Part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2023, Proceedings. Lecture Notes in Computer Science (13991), P195, DOI 10.1007/978-3-031-30826-0_11
   Haltermann J., 2023, Replication package for article 'Parallel program analysis on path ranges', DOI [10.5281/zenodo.8398988, DOI 10.5281/ZENODO.8398988]
   Haltermann J., 2023, LNCS, V14323, P145, DOI [10.1007/978-3-031-47115-5_9, DOI 10.1007/978-3-031-47115-5_9]
   Haltermann J, 2021, LECT NOTES COMPUT SC, V12649, P108, DOI 10.1007/978-3-030-71500-7_6
   Heizmann Matthias, 2013, Computer Aided Verification. 25th International Conference, CAV 2013. Proceedings. LNCS 8044, P36, DOI 10.1007/978-3-642-39799-8_2
   Heizmann M, 2018, LECT NOTES COMPUT SC, V10806, P447, DOI 10.1007/978-3-319-89963-3_30
   Helm D, 2020, PROCEEDINGS OF THE 28TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE '20), P184, DOI 10.1145/3368089.3409765
   Henzinger TA, 2004, ACM SIGPLAN NOTICES, V39, P232, DOI 10.1145/982962.964021
   Henzinger TA, 2002, ACM SIGPLAN NOTICES, V37, P58, DOI 10.1145/565816.503279
   Holík L, 2016, LECT NOTES COMPUT SC, V10028, P202, DOI 10.1007/978-3-319-49052-6_13
   Holzmann G.J., 2008, P ASE IEEE, P1
   Huster S, 2017, LECT NOTES COMPUT SC, V10533, P54, DOI 10.1007/978-3-319-67549-7_4
   Inkumsah Kobi, 2008, 2008 23rd IEEE/ACM International Conference on Automated Software Engineering, P297, DOI 10.1109/ASE.2008.40
   Inverso O, 2020, PROCEEDINGS OF THE 25TH ACM SIGPLAN SYMPOSIUM ON PRINCIPLES AND PRACTICE OF PARALLEL PROGRAMMING (PPOPP '20), P202, DOI 10.1145/3332466.3374529
   Jakobs M.-C., 2017, LNCS, V10469, P120
   Jalote P., 2006, P WODA ACM, P11
   Jia Y, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 1, P540, DOI 10.1109/ICSE.2015.71
   KING JC, 1976, COMMUN ACM, V19, P385, DOI 10.1145/360248.360252
   Kumar R., 2004, P PDMC ENTCS, V3, P19
   Lerda F, 1999, LECT NOTES COMPUT SC, V1680, P22
   Li K., 2012, P ISSTA ACM, P298
   Majumdar R, 2007, PROC INT CONF SOFTW, P416
   Milanese M, 2024, LECT NOTES COMPUT SC, V14499, P50, DOI 10.1007/978-3-031-50524-9_3
   Misailovic S., 2007, P FSE ACM, P135
   Nguyen TL, 2017, IEEE INT CONF AUTOM, P753, DOI 10.1109/ASE.2017.8115686
   Noller Y, 2020, PROC INT CONF SOFTW, P1273, DOI 10.1145/3377811.3380363
   Noller Y, 2018, ISSTA'18: PROCEEDINGS OF THE 27TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, P322, DOI 10.1145/3213846.3213868
   Pauck F, 2019, ESEC/FSE'2019: PROCEEDINGS OF THE 2019 27TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P374, DOI 10.1145/3338906.3338915
   Post Hendrik, 2008, 2008 23rd IEEE/ACM International Conference on Automated Software Engineering, P188, DOI 10.1109/ASE.2008.29
   Qiu R, 2018, LECT NOTES COMPUT SC, V10811, P416, DOI 10.1007/978-3-319-77935-5_28
   Rice J. R., 1976, Advances in computers, vol.15, P65, DOI 10.1016/S0065-2458(08)60520-3
   Richter C, 2020, AUTOMAT SOFTW ENG, V27, P153, DOI 10.1007/s10515-020-00270-x
   Sakti Abdelilah, 2012, Search Based Software Engineering. Proceedings of the 4th International Symposium (SSBSE 2012), P213, DOI 10.1007/978-3-642-33119-0_16
   Sherman E, 2018, LECT NOTES COMPUT SC, V10806, P249, DOI 10.1007/978-3-319-89963-3_15
   Siddiqui JH, 2012, ACM SIGPLAN NOTICES, V47, P523, DOI 10.1145/2398857.2384654
   Singh Shikhar, 2020, Formal Methods and Software Engineering. 22nd International Conference on Formal Engineering Methods, ICFEM 2020. Proceedings. Lecture Notes in Computer Science (LNCS 12531), P107, DOI 10.1007/978-3-030-63406-3_7
   Singh S, 2021, Arxiv, DOI arXiv:2106.02179
   Staats M., 2010, ISSTA, P183, DOI DOI 10.1145/1831708.1831732
   Stephens N, 2016, 23RD ANNUAL NETWORK AND DISTRIBUTED SYSTEM SECURITY SYMPOSIUM (NDSS 2016), DOI 10.14722/ndss.2016.23368
   Stern U, 1997, LECT NOTES COMPUT SC, V1254, P256
   SV-Benchmarks Community, 2023, SV-benchmarks
   Tschannen J, 2011, LECT NOTES COMPUT SC, V7041, P382, DOI 10.1007/978-3-642-24690-6_26
   Tulsian V., 2014, P MSR ACM, P132, DOI DOI 10.1145/2597073.2597080
   Wei GN, 2023, PROC INT CONF SOFTW, P1316, DOI 10.1109/ICSE48619.2023.00116
   Yang GW, 2019, INNOV SYST SOFTW ENG, V15, P325, DOI 10.1007/s11334-019-00331-9
   Yin BH, 2019, LECT NOTES COMPUT SC, V11822, P247, DOI 10.1007/978-3-030-32304-2_13
   Yin L, 2019, PROC INT CONF SOFTW, P643, DOI 10.1109/ICSE.2019.00074
   Yorsh G., 2006, ISSTA 06 P 2006 INT, P145, DOI [10.1145/1146238.1146255, DOI 10.1145/1146238.1146255]
   Zhou L, 2013, 2013 INTERNATIONAL CONFERENCE ON ADVANCED CLOUD AND BIG DATA (CBD), P58, DOI 10.1109/CBD.2013.31
NR 115
TC 0
Z9 0
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC
PY 2024
VL 238
AR 103154
DI 10.1016/j.scico.2024.103154
EA JUN 2024
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA WA2P3
UT WOS:001252085900001
OA hybrid, Green Submitted
DA 2024-08-05
ER

PT J
AU Arcaini, P
   Cetinkaya, A
AF Arcaini, Paolo
   Cetinkaya, Ahmet
TI CRAG - a combinatorial testing-based generator of road geometries for
   ADS testing
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Autonomous driving; Combinatorial testing; Search-based testing
AB Simulation-based testing of autonomous driving systems (ADS) consists in finding scenarios in which the ADS misbehaves, e.g., it leads the car to drive off the road. The road geometry is an important feature of the scenario, as it has a direct impact on the ADS, e.g., its ability to keep the car inside the driving lane. In this paper, we present CRAG, a road generator for ADS testing. CRAG uses combinatorial testing to explore high level road configurations, and search for finding concrete road geometries in these configurations. CRAG has been designed in a way that it can be easily extended in terms of generator of combinatorial test suites, search algorithms, and test goals.
C1 [Arcaini, Paolo] Natl Inst Informat, Tokyo, Japan.
   [Cetinkaya, Ahmet] Shibaura Inst Technol, Tokyo, Japan.
C3 Research Organization of Information & Systems (ROIS); National
   Institute of Informatics (NII) - Japan; Shibaura Institute of Technology
RP Arcaini, P (corresponding author), Natl Inst Informat, Tokyo, Japan.
EM arcaini@nii.ac.jp; ahmet@shibaura-it.ac.jp
RI Arcaini, Paolo/J-3616-2017
OI Arcaini, Paolo/0000-0002-6253-4062
FU Engineerable AI Techniques for Practical Applications of High-Quality
   Machine Learning-based Systems Project, JST-Mirai [JPMJMI20B8]; ERATO
   HASUO Metamathematics for Systems Design Project, JST [JPMJER1603];
   Japan Society for the Promotion of Science (JSPS) KAKENHI [JP20K14771,
   JP23K03913]
FX Paolo Arcaini is supported by Engineerable AI Techniques for Practical
   Applications of High-Quality Machine Learning-based Systems Project
   (Grant Number JPMJMI20B8) , JST-Mirai (Grant Number JPMJMI20B8) ; and by
   ERATO HASUO Metamathematics for Systems Design Project (No. JPMJER1603)
   , JST, Funding Reference number 10.13039/501100009024 ERATO. Ahmet
   Cetinkaya is supported by Japan Society for the Promotion of Science
   (JSPS) KAKENHI Grant Numbers JP20K14771 and JP23K03913.
CR Arcaini P., 2024, Code and experimental results of the paper "CRAG-a combinatorial testing-based generator of road geometries for ads testing
   Arcaini P, 2023, 2023 IEEE/ACM INTERNATIONAL WORKSHOP ON SEARCH-BASED AND FUZZ TESTING, SBFT, P41, DOI 10.1109/SBFT59156.2023.00008
   Arcuri A, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P1, DOI 10.1145/1985793.1985795
   Ayerdi J, 2023, 2023 IEEE/ACM INTERNATIONAL WORKSHOP ON SEARCH-BASED AND FUZZ TESTING, SBFT, P37, DOI 10.1109/SBFT59156.2023.00006
   Bäck T, 1993, EVOL COMPUT, V1, P1, DOI 10.1162/evco.1993.1.1.1
   BeamNG GmbH, 2023, BeamNG.tech
   Biagiola M, 2023, 2023 IEEE/ACM INTERNATIONAL WORKSHOP ON SEARCH-BASED AND FUZZ TESTING, SBFT, P45, DOI 10.1109/SBFT59156.2023.00010
   Castellano E, 2022, 15TH SEARCH-BASED SOFTWARE TESTING WORKSHOP (SBST 2022), P47, DOI 10.1145/3526072.3527532
   Castellano E, 2021, IEEE INT C S Q R S, P167, DOI 10.1109/QRS54544.2021.00028
   Castellano E, 2021, 2021 IEEE/ACM 14TH INTERNATIONAL WORKSHOP ON SEARCH-BASED SOFTWARE TESTING (SBST 2021), P36, DOI 10.1109/SBST52555.2021.00016
   Crepinsek M, 2013, ACM COMPUT SURV, V45, DOI 10.1145/2480741.2480752
   De Vivo D., 2023, 2023 IEEE ACM INT WO, P39
   Ferdous R, 2023, 2023 IEEE/ACM INTERNATIONAL WORKSHOP ON SEARCH-BASED AND FUZZ TESTING, SBFT, P59, DOI 10.1109/SBFT59156.2023.00018
   Ferdous R, 2022, 15TH SEARCH-BASED SOFTWARE TESTING WORKSHOP (SBST 2022), P51, DOI 10.1145/3526072.3527534
   Gambi A, 2022, 15TH SEARCH-BASED SOFTWARE TESTING WORKSHOP (SBST 2022), P25, DOI 10.1145/3526072.3527538
   Gambi A, 2019, PROCEEDINGS OF THE 28TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS (ISSTA '19), P318, DOI 10.1145/3293882.3330566
   Gambi A, 2019, 2019 IEEE/ACM 41ST INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING: COMPANION PROCEEDINGS (ICSE-COMPANION 2019), P27, DOI 10.1109/ICSE-Companion.2019.00030
   Humeniuk D, 2023, 2023 IEEE/ACM INTERNATIONAL WORKSHOP ON SEARCH-BASED AND FUZZ TESTING, SBFT, P49, DOI 10.1109/SBFT59156.2023.00011
   Humeniuk D, 2022, 15TH SEARCH-BASED SOFTWARE TESTING WORKSHOP (SBST 2022), P43, DOI 10.1145/3526072.3527531
   Humeniuk D, 2021, 2021 IEEE/ACM 14TH INTERNATIONAL WORKSHOP ON SEARCH-BASED SOFTWARE TESTING (SBST 2021), P42, DOI 10.1109/SBST52555.2021.00019
   Kitchenham B, 2017, EMPIR SOFTW ENG, V22, P579, DOI 10.1007/s10664-016-9437-5
   Klikovits S, 2023, SCI COMPUT PROGRAM, V230, DOI 10.1016/j.scico.2023.102996
   Klück F, 2021, 2021 IEEE/ACM 14TH INTERNATIONAL WORKSHOP ON SEARCH-BASED SOFTWARE TESTING (SBST 2021), P38, DOI 10.1109/SBST52555.2021.00017
   Kobayashi S., 2019, Differential Geometry of Curves and Surfaces
   Moghadam MH, 2021, 2021 IEEE/ACM 14TH INTERNATIONAL WORKSHOP ON SEARCH-BASED SOFTWARE TESTING (SBST 2021), P40, DOI 10.1109/SBST52555.2021.00018
   Nie CH, 2011, ACM COMPUT SURV, V43, DOI 10.1145/1883612.1883618
   Panichella S, 2021, 2021 IEEE/ACM 14TH INTERNATIONAL WORKSHOP ON SEARCH-BASED SOFTWARE TESTING (SBST 2021), P20, DOI 10.1109/SBST52555.2021.00011
   Peltomäki J, 2022, 15TH SEARCH-BASED SOFTWARE TESTING WORKSHOP (SBST 2022), P53, DOI 10.1145/3526072.3527535
   PICT, 2023, Pairwise independent combinatorial testing
   Starace LLL, 2022, 15TH SEARCH-BASED SOFTWARE TESTING WORKSHOP (SBST 2022), P49, DOI 10.1145/3526072.3527533
   Tuncali CE, 2018, IEEE INT VEH SYM, P1555
   Wagner M, 2020, IEEE ICST WORKSHOP, P191, DOI 10.1109/ICSTW50294.2020.00041
   Winsten J, 2023, 2023 IEEE/ACM INTERNATIONAL WORKSHOP ON SEARCH-BASED AND FUZZ TESTING, SBFT, P43, DOI 10.1109/SBFT59156.2023.00009
   Yan SY, 2022, 15TH SEARCH-BASED SOFTWARE TESTING WORKSHOP (SBST 2022), P41, DOI 10.1145/3526072.3527530
   Yu LB, 2013, 2013 IEEE SIXTH INTERNATIONAL CONFERENCE ON SOFTWARE TESTING, VERIFICATION AND VALIDATION (ICST 2013), P370, DOI 10.1109/ICST.2013.52
   Yurtsever E, 2020, IEEE ACCESS, V8, P58443, DOI 10.1109/ACCESS.2020.2983149
   Zhao D, 2017, Arxiv, DOI arXiv:1707.04792
   Zhong Z., 2021, arXiv
   Zohdinasab T, 2021, ISSTA '21: PROCEEDINGS OF THE 30TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, P79, DOI 10.1145/3460319.3464811
NR 39
TC 0
Z9 0
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC
PY 2024
VL 238
AR 103171
DI 10.1016/j.scico.2024.103171
EA JUL 2024
PG 9
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA YW5P2
UT WOS:001271538300001
DA 2024-08-05
ER

PT J
AU Chen, JF
   Yin, YM
   Cai, SH
   Wang, WJ
   Wang, SR
   Chen, JM
AF Chen, Jinfu
   Yin, Yemin
   Cai, Saihua
   Wang, Weijia
   Wang, Shengran
   Chen, Jiming
TI iGnnVD: A novel software vulnerability detection model based on
   integrated graph neural networks
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Software security; Vulnerability detection; Graph convolution network;
   Graph attention networks; Ensemble learning
AB Software vulnerability detection is a challenging task in the security field, the boom of deep learning technology promotes the development of automatic vulnerability detection. Compared with sequence -based deep learning models, graph neural network (GNN) can learn the structural features of code, it performs well in the field of vulnerability detection for source code. However, different GNNs have different detection results for the same code, and using a single kind of GNN may lead to high false positive rate and false negative rate. In addition, the complex structure of source code causes single GNN model cannot effectively learn their depth feature, thereby leading to low detection accuracy. To solve these limitations, we propose a software vulnerability detection model called iGnnVD based on the integrated graph neural networks. In the proposed iGnnVD model, the base detectors including GCN, GAT and APPNP are first constructed to capture the bidirectional information in the code graph structure with bidirectional structure; And then, the residual connection is used to aggregate the features while retaining the features each time; Finally, the convolutional layer is used to perform the aggregated classification. In addition, an integration module that analyzes the detection results of three detectors for final classification is designed using a voting strategy to solve the problem of high false positive rate and false negative rate caused by using a single kind of base detector. We perform extensive experiments on three datasets and experimental results show that the proposed iGnnVD model can improve the detection accuracy of vulnerabilities in source code as well as reduce the false positive rate and false negative rate compared with existing deep learning -based vulnerability detection models, it also has good stability.
C1 [Chen, Jinfu; Yin, Yemin; Cai, Saihua; Wang, Weijia; Wang, Shengran; Chen, Jiming] Jiangsu Univ, Sch Comp Sci & Commun Engn, Zhenjiang 212013, Jiangsu, Peoples R China.
   [Chen, Jinfu; Yin, Yemin; Cai, Saihua; Wang, Weijia; Wang, Shengran; Chen, Jiming] Jiangsu Univ, Jiangsu Key Lab Secur Technol Ind Cyberspace, Zhenjiang 212013, Jiangsu, Peoples R China.
C3 Jiangsu University; Jiangsu University
RP Chen, JF; Chen, JM (corresponding author), Jiangsu Univ, Sch Comp Sci & Commun Engn, Zhenjiang 212013, Jiangsu, Peoples R China.
EM jinfuchen@ujs.edu.cn; 2212108027@stmail.ujs.edu.cn; caisaih@ujs.edu.cn;
   2212108033@stmail.ujs.edu.cn; 2112308197@stmail.ujs.edu.cn;
   jmchen@ujs.edu.cn
OI Chen, Jinfu/0000-0002-3124-5452
FU National Natural Science Foundation of China (NSFC) [62172194, 62202206,
   U1836116]; Natural Science Foundation of Jiangsu Province [BK20220515];
   Leading-edge Technology Program of Jiangsu Natural Science Foundation
   [BK20202001]; China Postdoctoral Science Foundation [2023T160275];
   Postdoctoral Science Foundation of Jiangsu Province [KYCX22_3667];
   Qinglan Project of Jiangsu Province
FX <B>Acknowledgements</B> This work was partly supported by the National
   Natural Science Foundation of China (NSFC) (Grant nos. 62172194,
   62202206 and U1836116) , the Natural Science Foundation of Jiangsu
   Province (Grant no. BK20220515) , the Leading-edge Technology Program of
   Jiangsu Natural Science Foundation (Grant no. BK20202001) , the China
   Postdoctoral Science Foundation (Grant no. 2023T160275) , the
   Postdoctoral Science Foundation of Jiangsu Province (Grant no.
   KYCX22_3667) and Qinglan Project of Jiangsu Province.
CR Arcuri A, 2014, SOFTW TEST VERIF REL, V24, P219, DOI 10.1002/stvr.1486
   Brin S., 1998, Technical report., V98, P161, DOI DOI 10.1109/IISWC.2012.6402911
   Brody S, 2022, Arxiv, DOI arXiv:2105.14491
   Buda M, 2018, NEURAL NETWORKS, V106, P249, DOI 10.1016/j.neunet.2018.07.011
   Cao SC, 2022, PROC INT CONF SOFTW, P1456, DOI 10.1145/3510003.3510219
   Cao SC, 2021, INFORM SOFTWARE TECH, V136, DOI 10.1016/j.infsof.2021.106576
   Chakraborty S, 2022, IEEE T SOFTWARE ENG, V48, P3280, DOI 10.1109/TSE.2021.3087402
   Chen J., 2021, DEPENDABLE SOFTWARE, V7, P161
   Chen JF, 2024, INFORM SOFTWARE TECH, V171, DOI 10.1016/j.infsof.2024.107453
   Chen JF, 2023, J SYST SOFTWARE, V204, DOI 10.1016/j.jss.2023.111772
   Fang ZJ, 2017, SCI CHINA INFORM SCI, V60, DOI 10.1007/s11432-015-5422-7
   Ferschke O., 2012, CLEF ONLINE WORKING, P1
   Gasteiger J, 2018, arXiv, DOI DOI 10.48550/ARXIV.1810.05997
   Grieco G, 2016, CODASPY'16: PROCEEDINGS OF THE SIXTH ACM CONFERENCE ON DATA AND APPLICATION SECURITY AND PRIVACY, P85, DOI 10.1145/2857705.2857720
   Guo WB, 2022, COMPUT SECUR, V121, DOI 10.1016/j.cose.2022.102823
   Hin D, 2022, IEEE WORK CONF MIN S, P596, DOI 10.1145/3524842.3527949
   Dam HK, 2018, Arxiv, DOI arXiv:1802.00921
   Kim S, 2017, P IEEE S SECUR PRIV, P595, DOI 10.1109/SP.2017.62
   Li Z, 2022, IEEE T DEPEND SECURE, V19, P2821, DOI 10.1109/TDSC.2021.3076142
   Li Z, 2018, 25TH ANNUAL NETWORK AND DISTRIBUTED SYSTEM SECURITY SYMPOSIUM (NDSS 2018), DOI 10.14722/ndss.2018.23158
   Liu SG, 2020, IEEE T FUZZY SYST, V28, P1329, DOI 10.1109/TFUZZ.2019.2958558
   Kipf TN, 2017, Arxiv, DOI arXiv:1609.02907
   Novak M, 2019, ACM T COMPUT EDUC, V19, DOI 10.1145/3313290
   Reynolds ZP, 2017, 2017 IEEE/ACM 4TH INTERNATIONAL WORKSHOP ON SOFTWARE ENGINEERING RESEARCH AND INDUSTRIAL PRACTICE (SER&IP 2017), P55, DOI 10.1109/SER-IP.2017..20
   Russell RL, 2018, 2018 17TH IEEE INTERNATIONAL CONFERENCE ON MACHINE LEARNING AND APPLICATIONS (ICMLA), P757, DOI 10.1109/ICMLA.2018.00120
   Shi HY, 2019, IEEE T IND INFORM, V15, P6551, DOI 10.1109/TII.2019.2929739
   Sun XB, 2019, SCI CHINA INFORM SCI, V62, DOI 10.1007/s11432-017-9459-5
   Nguyen VA, 2022, PROC IEEE ACM INT C, P178, DOI [10.1109/ICSE-Companion55297.2022.9793807, 10.1145/3510454.3516865]
   Veličkovic P, 2018, Arxiv, DOI arXiv:1710.10903
   Wang Jingjing, 2021, 2021 4th International Conference on Artificial Intelligence and Big Data (ICAIBD), P76, DOI 10.1109/ICAIBD51990.2021.9459075
   Wu YM, 2022, PROC INT CONF SOFTW, P2365, DOI 10.1145/3510003.3510229
   Younis A, 2016, CODASPY'16: PROCEEDINGS OF THE SIXTH ACM CONFERENCE ON DATA AND APPLICATION SECURITY AND PRIVACY, P97, DOI 10.1145/2857705.2857750
   Zhou Y., 2019, P 33 C ADV NEUR INF, P8
   Zhu CL, 2019, PROCEEDINGS OF THE 2ND INTERNATIONAL CONFERENCE ON COMPUTER SCIENCE AND SOFTWARE ENGINEERING (CSSE 2019), DOI 10.1145/3339363.3339383
   Zhuang Y, 2020, PROCEEDINGS OF THE TWENTY-NINTH INTERNATIONAL JOINT CONFERENCE ON ARTIFICIAL INTELLIGENCE, P3283
NR 35
TC 0
Z9 0
U1 3
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC
PY 2024
VL 238
AR 103156
DI 10.1016/j.scico.2024.103156
EA JUN 2024
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA WN8B0
UT WOS:001255636400001
DA 2024-08-05
ER

PT J
AU Jimenez, S
   Rakic, G
   Takahashi, S
   Cardozo, N
AF Jimenez, Stephannie
   Rakic, Gordana
   Takahashi, Silvia
   Cardozo, Nicolas
TI O UT OF STEP : Code clone detection for mobile apps across different
   language codebases
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Code-clone detection; Mobile apps; Program analysis
AB Clone detection provides insight about replicated fragments in a code base. With the rise of multilanguage code bases, new techniques addressing cross -language code clone detection enable the analysis of polyglot systems. Such techniques have not yet been applied to the mobile apps' domain, which are naturally polyglot. Native mobile app developers must synchronize their code base in at least two different programming languages. App synchronization is a difficult and time-consuming maintenance task, as features can rapidly diverge between platforms, and feature identification must be performed manually. The end goal of this work is to provide an analysis framework to reduce the impact of app synchronization. A first step in this direction consists in a structural algorithm for cross -language clone detection, called O UT OF S TEP , exploiting the idea behind enriched concrete syntax trees. Such trees are used as a common intermediate representation built from programming languages' grammars, to detect similarities between app code bases. Our technique finds code similarities with over 80% for the evaluation of language features, where Type 1-3 clones are manually injected for the analysis of both single- and crosslanguage cases for Kotlin and Dart. We validate the feasibility and correctness of our approach through the evaluation of the main language constructs for Kotlin and Dart. To validate the effectiveness we use a first case study detecting clones between 12 sorting algorithms across Kotlin and Dart, identifying clone similarities with a precision between 67% and 95%. Finally, we use a corpus of 144 mobile apps implemented in Kotlin and Dart, correctly identifying code similarities for the full application logic.
C1 [Jimenez, Stephannie; Takahashi, Silvia; Cardozo, Nicolas] Univ Los Andes, Syst & Comp Engn Dept, Bogota, Colombia.
   [Rakic, Gordana] Univ Novi Sad, Fac Sci, Novi Sad, Serbia.
C3 Universidad de los Andes (Colombia); University of Novi Sad
RP Cardozo, N (corresponding author), Univ Los Andes, Syst & Comp Engn Dept, Bogota, Colombia.
EM s.jimenez16@uniandes.edu.co; gordana.rakic@dmi.uns.ac.rs;
   stakahas@uniandes.edu.co; n.cardozo@uniandes.edu.co
OI Rakic, Gordana/0000-0001-7366-5159; Cardozo, Nicolas/0000-0002-1094-9952
FU Ministry of Science, Technological Development and Innovation of the
   Republic of Serbia [451-03-65/2024-03/200125]; 
   [451-03-66/2024-03/200125]
FX We would like to thank the anonymous reviewers for their comments to
   improve earlier versions of this document. This publication is supported
   in part by the Ministry of Science, Technological Development and
   Innovation of the Republic of Serbia (Grants No.
   451-03-66/2024-03/200125 & 451-03-65/2024-03/200125) .
CR Al-Omari F., 2012, 2012 19th Working Conference on Reverse Engineering (WCRE), P405, DOI 10.1109/WCRE.2012.50
   Alam A.I., 2023, 2023 IEEE INT C SOFT, P1
   Ankali S.B., 2021, Int. J. Intell. Syst. Appl., V13
   [Anonymous], 2021, PMD: an extensible cross-language static code analyzer
   [Anonymous], 2021, Code Clone Analysis: Research, Tools, and Practices, P93
   Basili V.R., 1994, Encyclopedia of software engineering, P528
   Bellon S, 2007, IEEE T SOFTWARE ENG, V33, P577, DOI 10.1109/TSE.2007.70725
   Budimac Z., 2012, Proceedings of the Fifth Balkan Conference in Informatics, BCI'12, P287, DOI DOI 10.1145/2371316.2371380
   Cardozo N., 2024, Clonecorp: Cross-language clone detection dataset, volume v1.0.0
   Cheng X, 2017, IEICE T INF SYST, VE100D, P273, DOI 10.1587/transinf.2016EDP7334
   Cordy JR, 2011, CONF PROC INT SYMP C, P219, DOI 10.1109/ICPC.2011.26
   Duc A.N., 2014, P S EMP SOFTW ENG ME, P1
   Falke R, 2008, EMPIR SOFTW ENG, V13, P601, DOI 10.1007/s10664-008-9073-9
   Göde N, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P311, DOI 10.1145/1985793.1985836
   Göde N, 2009, EUR CON SFTWR MTNCE, P219, DOI 10.1109/CSMR.2009.20
   Gokhale P, 2014, 2014 INTERNATIONAL CONFERENCE ON CIRCUITS, SYSTEMS, COMMUNICATION AND INFORMATION TECHNOLOGY APPLICATIONS (CSCITA), P289, DOI 10.1109/CSCITA.2014.6839274
   Gordon S., 2021, xsgordon/duplo-fork: C/C++/Java duplicate source code block finder
   Harris S., 2018, Simian-similarity analyser | duplicate code detection for the enterprise | overview
   Jimenez S., 2023, IB AM C SOFTW ENG CI, P107
   Kamiya T, 2002, IEEE T SOFTWARE ENG, V28, P654, DOI 10.1109/TSE.2002.1019480
   Koschke R, 2006, WORK CONF REVERSE EN, P253
   Kraft Nicholas A., 2008, SEKE 2008. The 20th International Conference Proceedings on Software Engineering & Knowledge Engineering, P54
   Li J., 2023, INT C AUT SOFTW ENG, P13
   Li W, 2022, PROCEEDINGS OF THE 31ST USENIX SECURITY SYMPOSIUM, P2513
   Lingxiao J., 2018, skyhover/deckard: code clone detection, clone-related bug detection, sematic clone analysis
   Mehrotra N., 2023, Trans. Softw. Eng.
   Mondal M, 2020, J SYST SOFTWARE, V159, DOI 10.1016/j.jss.2019.110429
   Nafi KW, 2019, 34TH IEEE/ACM INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING (ASE 2019), P1026, DOI 10.1109/ASE.2019.00099
   Nichols L, 2019, LECT NOTES COMPUT SC, V11424, P247, DOI 10.1007/978-3-030-16722-6_14
   Nunkesser R, 2018, 2018 IEEE/ACM 5TH INTERNATIONAL CONFERENCE ON MOBILE SOFTWARE ENGINEERING AND SYSTEMS (MOBILESOFT), P214, DOI 10.1145/3197231.3197260
   Paiva A., 2016, Dolly or shaun? A survey to verify code clones detected using similar sequences of method calls
   Parr T., 2013, The Definitive ANTLR 4 Reference, V1
   Patkar Nitish, 2020, EASE2020. Proceedings of the Evaluation and Assessment in Software Engineering, P180, DOI 10.1145/3383219.3383238
   Perez Daniel, 2019, 2019 IEEE/ACM 16th International Conference on Mining Software Repositories (MSR), P518, DOI 10.1109/MSR.2019.00078
   Pinku S.N., 2023, P IEEE ACM INT C PRO
   Rakie G., 2013, P INT MULT INF SOC, P211
   Rakie G., 2015, Ph.D. thesis
   Rattan D, 2013, INFORM SOFTWARE TECH, V55, P1165, DOI 10.1016/j.infsof.2013.01.008
   Roy CK, 2018, 2018 25TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION AND REENGINEERING (SANER 2018), P26, DOI 10.1109/SANER.2018.8330194
   Roy CK, 2009, SCI COMPUT PROGRAM, V74, P470, DOI 10.1016/j.scico.2009.02.007
   Sajnani H, 2016, PROC INT CONF SOFTW, P1157, DOI 10.1145/2884781.2884877
   Shobha G., 2021, P IEMIS 2020, V2, P645
   Svajlenko J, 2021, IEEE T SOFTWARE ENG, V47, P1060, DOI 10.1109/TSE.2019.2912962
   Tao CN, 2022, INT C PROGRAM COMPRE, P413, DOI 10.1145/3524610.3527911
   Ul Ain Q, 2019, IEEE ACCESS, V7, P86121, DOI 10.1109/ACCESS.2019.2918202
   Vislavski T., 2018, SQAMIA
   Vislayski T, 2018, 2018 25TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION AND REENGINEERING (SANER 2018), P512, DOI 10.1109/SANER.2018.8330250
   Wagner S, 2016, PEERJ COMPUT SCI, DOI 10.7717/peerj-cs.49
   Walker A, 2019, APPL COMPUT REV, V19, P28, DOI [10.1145/3338840.3355654, 10.1145/3381307.3381310]
   Yahya MA, 2023, COMPUTERS, V12, DOI 10.3390/computers12010012
   Yang J., 2023, Cross-language source code clone detection based on graph neural network
   Yuan Y, 2012, IEEE INT CONF AUTOM, P286, DOI 10.1145/2351676.2351725
   Zakeri-Nasrabadi M, 2023, J SYST SOFTWARE, V204, DOI 10.1016/j.jss.2023.111796
   Zhang F, 2020, SCI PROGRAMMING-NETH, V2020, DOI 10.1155/2020/8865413
NR 54
TC 0
Z9 0
U1 3
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP
PY 2024
VL 236
AR 103112
DI 10.1016/j.scico.2024.103112
EA APR 2024
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA RH9Y6
UT WOS:001226903800001
OA hybrid
DA 2024-08-05
ER

PT J
AU Castiglioni, V
   Loreti, M
   Tini, S
AF Castiglioni, Valentina
   Loreti, Michele
   Tini, Simone
TI STARK : A tool for the analysis of CPSs robustness
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Uncertainty; Robustness; Cyber-physical systems
ID STATISTICAL-MODEL CHECKING
AB We present the Software Tool for the Analysis of Robustness in the unKnown environment (S TARK ), our Java tool for the specification, analysis and verification of robustness properties of CyberPhysical Systems (CPSs). S TARK includes: (i) a specification language for systems behaviour, perturbations, distances on systems behaviours, and requirements on systems behaviour expressed in the Robustness Temporal Logic ( RobTL ), a temporal logic for the specification and verification of properties on the evolution of distances between the behaviours of CPSs, and thus also of robustness properties; (ii) a module for the simulation of system behaviours and their perturbed versions; (iii) a module for the evaluation of distances between behaviours; (iv) a statistical model checker for RobTL formulae.
C1 [Castiglioni, Valentina] Eindhoven Univ Technol, Eindhoven, Netherlands.
   [Loreti, Michele] Univ Camerino, Camerino, Italy.
   [Tini, Simone] Univ Insubria, Como, Italy.
C3 Eindhoven University of Technology; University of Camerino; University
   of Insubria
RP Castiglioni, V (corresponding author), Eindhoven Univ Technol, Eindhoven, Netherlands.
EM v.castiglioni@tue.nl; michele.loreti@unicam.it;
   simone.tini@uninsubria.it
OI Castiglioni, Valentina/0000-0002-8112-6523
CR Arora S, 2022, LECT NOTES COMPUT SC, V13255, P61, DOI 10.1007/978-3-031-15077-7_4
   Baier C, 2016, NATO SCI PEAC SECUR, V45, P1, DOI 10.3233/978-1-61499-627-9-1
   Cassandras C.G., 2007, STOCHASTIC HYBRID SY
   Castiglioni Valentina, 2023, Coordination Models and Languages: 25th IFIP WG 6.1 International Conference, COORDINATION 2023, Held as Part of the 18th International Federated Conference on Distributed Computing Techniques, DisCoTec 2023, Proceedings. Lecture Notes in Computer Science (13908), P115, DOI 10.1007/978-3-031-35361-1_6
   Castiglioni V., 2022, arXiv, DOI [DOI 10.48550/ARXIV.2212.11158, 10.48550/arXiv.2212.11158]
   Castiglioni V., 2023, CEUR WORKSHOP P, V3587, P15
   Castiglioni V, 2023, LOG METH COMPUT SCI, V19, DOI 10.46298/LMCS-19(3:2)2023
   Castiglioni V, 2021, LECT NOTES COMPUT SC, V12719, P60, DOI 10.1007/978-3-030-78089-0_4
   Chong S., 2023, 26 ACM INT C HYBR SY
   Clarkson M. R., 2014, POST2014, P265, DOI [DOI 10.1007/978-3-642-54792-8, 10.1007/978-3-642-54792]
   Franzle M., 2016, Dagstuhl Rep., V6, P29, DOI [DOI 10.4230/DAGREP.6.9.29, 10.4230/DagRep.6.9.29]
   Gamma E., 1995, DESIGN PATTERNS ELEM
   Hu JH, 2000, LECT NOTES COMPUT SC, V1790, P160
   Huang YL, 2009, INT J CRIT INFR PROT, V2, P73, DOI 10.1016/j.ijcip.2009.06.001
   Kwiatkowska M, 2007, LECT NOTES COMPUT SC, V4486, P220
   Micskei Zoltan., 2012, Resilience Assessment and Evaluation of Computing Systems, P323, DOI [10.1007/978-3-642-29032-9_16, DOI 10.1007/978-3-642-29032-9_16]
   Rajkumar R, 2010, DES AUT CON, P731
   Rungger M, 2016, IEEE T AUTOMAT CONTR, V61, P2108, DOI 10.1109/TAC.2015.2492438
   Sen K, 2005, LECT NOTES COMPUT SC, V3576, P266
   Shahrokni A, 2013, INFORM SOFTWARE TECH, V55, P1, DOI 10.1016/j.infsof.2012.06.002
   Sontag ED, 2008, LECT NOTES MATH, V1932, P163
   Vaserstein L. N., 1969, PROBL PEREDACHI INF, V5, P64
   Wang Y, 2019, ACM T EMBED COMPUT S, V18, DOI 10.1145/3358232
   Xiang J., 2021, 34 IEEE COMP SEC FDN, P1
NR 24
TC 0
Z9 0
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP
PY 2024
VL 236
AR 103134
DI 10.1016/j.scico.2024.103134
EA APR 2024
PG 11
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA PW8S0
UT WOS:001217216000001
OA hybrid
DA 2024-08-05
ER

PT J
AU Liang, Z
   Ren, DJ
   Xue, B
   Wang, J
   Yang, WJ
   Liu, WW
AF Liang, Zhen
   Ren, Dejin
   Xue, Bai
   Wang, Ji
   Yang, Wenjing
   Liu, Wanwei
TI Verifying safety of neural networks from topological perspectives
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Safety verification; Neural networks; Boundary analysis; Homeomorphisms;
   Open maps
ID VERIFICATION
AB Neural networks (NNs) are increasingly applied in safety -critical systems such as autonomous vehicles. However, they are fragile and are often ill-behaved. Consequently, their behaviors should undergo rigorous guarantees before deployment in practice. In this paper, we propose a set -boundary reachability method to investigate the safety verification problem of NNs from topological perspectives. Given an NN with an input set and a safe set, the safety verification problem is to determine whether all outputs of the NN resulting from the input set fall within the safe set. In our method, the homeomorphism property of NNs is first exploited, which establishes rigorous guarantees between the boundaries of the input set and the boundaries of the output set. A homeomorphism is a special case of open maps, and consequently our set -boundary method is considered to be generalized to situations with open map property then 2 . The exploitation of these two properties facilitates reachability computations via extracting subsets of the input set rather than the entire input set, thus controlling the wrapping effect in reachability analysis and facilitating the reduction of computation burdens for safety verification. The homeomorphism property exists in some widely used NNs such as invertible residual networks (i-ResNets) and Neural ordinary differential equations (Neural ODEs), and the open map is a less strict topological property and is easier to satisfy compared with homeomorphisms. For NNs establishing either of these two properties, our set -boundary reachability method only needs to perform reachability analysis on the boundary of the input set. Moreover, for NNs that do not feature these properties with respect to the input set, we also explore subsets of the input set for establishing the local homeomorphism property and then abandon these subsets for reachability computations. Finally, some examples demonstrate the performance of our proposed method.
C1 [Liang, Zhen; Wang, Ji; Yang, Wenjing; Liu, Wanwei] Natl Univ Def Technol, Coll Comp Sci & Technol, Changsha 410073, Hunan, Peoples R China.
   [Ren, Dejin] Univ Chinese Acad Sci, Beijing 100190, Peoples R China.
   [Ren, Dejin; Xue, Bai] Chinese Acad Sci, Inst Software, Key Lab Syst Software, Beijing 100190, Peoples R China.
   [Ren, Dejin; Xue, Bai] Chinese Acad Sci, Inst Software, State Key Lab Comp Sci, Beijing 100190, Peoples R China.
   [Liu, Wanwei] Natl Univ Def Technol, Key Lab Software Engn Complex Syst, Changsha 410073, Hunan, Peoples R China.
C3 National University of Defense Technology - China; Chinese Academy of
   Sciences; University of Chinese Academy of Sciences, CAS; Chinese
   Academy of Sciences; Institute of Software, CAS; Chinese Academy of
   Sciences; Institute of Software, CAS; National University of Defense
   Technology - China
RP Liu, WW (corresponding author), Natl Univ Def Technol, Coll Comp Sci & Technol, Changsha 410073, Hunan, Peoples R China.
EM liangzhen@nudt.edu.cn; wwliu@nudt.edu.cn
OI Liang, Zhen/0000-0002-1171-7061
FU National Key R&D Program of China [2022YFA1005101, 2021ZD0140301];
   National Natural Science Foundation of China [91948303-1, 61836005,
   61872371, 62032024]; CAS Pioneer Hundred Talents Program; Basic Research
   Program of Institute of Software, CAS [ISCAS-JCMS-202302]
FX This work is supported by the National Key R&D Program of China No.
   2022YFA1005101 and No. 2021ZD0140301, the National Natural Science
   Foundation of China under Grant No. 91948303-1, No. 61836005, No.
   61872371 and No. 62032024, the CAS Pioneer Hundred Talents Program and
   Basic Research Program of Institute of Software, CAS under Grant No.
   ISCAS-JCMS-202302.
CR Akintunde ME, 2019, AAAI CONF ARTIF INTE, P6006
   Althoff M., 2015, P WORKSH APPL VER CO, V34, P120, DOI [10.29007/zbkv, DOI 10.29007/ZBKV]
   Ardizzone Lynton, 2018, INT C LEARN REPR
   Behrmann J, 2019, PR MACH LEARN RES, V97
   Changliu Liu, 2021, Foundations and Trends in Optimization, V4, P244, DOI 10.1561/2400000035
   Chen RTQ, 2018, 32 C NEURAL INFORM P, V31
   Clevert DA, 2016, Arxiv, DOI [arXiv:1511.07289, DOI 10.48550/ARXIV.1511.07289]
   Cousot P., 1977, Conference Record of the Fourth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P238, DOI [10.1145/512950.512973, DOI 10.1145/512950.512973]
   Dahnert M, 2021, ADV NEUR IN, V34
   Dupont E, 2019, ADV NEUR IN, V32
   Dutta S, 2017, Arxiv, DOI arXiv:1709.09130
   Ehlers R, 2017, LECT NOTES COMPUT SC, V10482, P269, DOI 10.1007/978-3-319-68167-2_19
   Furui S, 2012, IEEE SIGNAL PROC MAG, V29, P16, DOI 10.1109/MSP.2012.2209906
   Gehr T, 2018, P IEEE S SECUR PRIV, P3, DOI 10.1109/SP.2018.00058
   Ghorbani A, 2019, AAAI CONF ARTIF INTE, P3681
   Goldblatt R.I., 1982, Br. J. Philos. Sci., V33, P95
   Gomez AN, 2017, ADV NEUR IN, V30
   Gowal S, 2019, Arxiv, DOI arXiv:1810.12715
   Gruenbacher S, 2021, Arxiv, DOI arXiv:2107.08467
   Gruenbacher S, 2020, IEEE DECIS CONTR P, P1556, DOI 10.1109/CDC42340.2020.9304042
   Grunbacher S, 2021, AAAI CONF ARTIF INTE, V35, P11525
   Hasani R, 2020, PR MACH LEARN RES, V119
   Tran HD, 2019, ACM T EMBED COMPUT S, V18, DOI 10.1145/3358230
   Hoang-Dung Tran, 2019, Formal Methods - The Next 30 Years. Third World Congress, FM 2019. Proceedings. Lecture Notes in Computer Science (LNCS 11800), P670, DOI 10.1007/978-3-030-30942-8_39
   Huang C, 2019, ACM T EMBED COMPUT S, V18, DOI 10.1145/3358228
   Huang XW, 2017, LECT NOTES COMPUT SC, V10426, P3, DOI 10.1007/978-3-319-63387-9_1
   Ivanov R, 2021, LECT NOTES COMPUT SC, V12759, P249, DOI 10.1007/978-3-030-81685-8_11
   Ivanov R, 2021, ACM T EMBED COMPUT S, V20, DOI [10.1145/3419742, 10.1145/3477023]
   Jacobsen JH, 2018, Arxiv, DOI [arXiv:1802.07088, 10.48550/arXiv.1802.07088]
   Joshi K.D., 1983, Introduction to general topology
   Kaith S.P.S., 2023, A Comprehensive Textbook on Metric Spaces
   Karch T, 2021, ADV NEUR IN, V34
   Katz G, 2019, LECT NOTES COMPUT SC, V11561, P443, DOI 10.1007/978-3-030-25540-4_26
   Katz G, 2017, LECT NOTES COMPUT SC, V10426, P97, DOI 10.1007/978-3-319-63387-9_5
   Kochdumper N, 2022, Arxiv, DOI arXiv:2207.02715
   Krantz S. G., 2002, IMPLICIT FUNCTION TH
   Lechner M, 2020, NAT MACH INTELL, V2, P642, DOI 10.1038/s42256-020-00237-3
   Liang Zhen, 2023, Theoretical Aspects of Software Engineering: 17th International Symposium, TASE 2023, Proceedings. Lecture Notes in Computer Science (13931), P248, DOI 10.1007/978-3-031-35257-7_15
   Liu WW, 2020, J COMPUT SCI TECH-CH, V35, P1365, DOI 10.1007/s11390-020-0546-7
   Lomuscio A, 2017, Arxiv, DOI arXiv:1706.07351
   Maas A.L., 2013, ICML WORK DEEP LEARN, V28
   Lopez DM, 2022, LECT NOTES COMPUT SC, V13465, P258, DOI 10.1007/978-3-031-15839-1_15
   Massey W.S., 2019, A Basic Course in Algebraic Topology, V127
   Mendelson B., 1990, Introduction to topology
   Naitzat G, 2020, J MACH LEARN RES, V21
   Owen MP, 2019, IEEEAAIA DIGIT AVION, DOI 10.1109/dasc43569.2019.9081758
   Pengfei Yang, 2021, Tools and Algorithms for the Construction and Analysis of Systems. 27th International Conference, TACAS 2021. Held as Part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2021. Proceedings. Lecture Notes in Computer Science (LNCS 12651), P389, DOI 10.1007/978-3-030-72016-2_21
   Rudin W., 1964, PRINCIPLES MATH ANAL
   Singh G, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290354
   Singh G, 2018, ADV NEUR IN, V31
   Stein E.M., 2011, Fourier analysis: an introduction
   Tambon F, 2022, AUTOMAT SOFTW ENG, V29, DOI 10.1007/s10515-022-00337-x
   Tian Y, 2021, APPL OPTICS, V60, P7466, DOI 10.1364/AO.432397
   Tran HD, 2019, FME WORKS FORM, P31, DOI 10.1109/FormaliSE.2019.00012
   Wang SQ, 2018, ADV NEUR IN, V31
   Xiang W., 2017, Reachable set computation and safety verification for neural networks with relu activations
   Xiang WM, 2018, Arxiv, DOI arXiv:1805.09944
   Xiang WM, 2018, IEEE T NEUR NET LEAR, V29, P5777, DOI 10.1109/TNNLS.2018.2808470
   Xue B, 2021, IEEE T AUTOMAT CONTR, V66, P283, DOI 10.1109/TAC.2020.2977993
   Xue B, 2017, IEEE T AUTOMAT CONTR, V62, P3518, DOI 10.1109/TAC.2016.2615599
   Xue B, 2016, LECT NOTES COMPUT SC, V9779, P457, DOI 10.1007/978-3-319-41528-4_25
   Yuan WZ, 2021, Arxiv, DOI arXiv:2106.11520
   Zhang J, 2020, INFORM SOFTWARE TECH, V123, DOI 10.1016/j.infsof.2020.106296
NR 63
TC 0
Z9 0
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP
PY 2024
VL 236
AR 103121
DI 10.1016/j.scico.2024.103121
EA APR 2024
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA SB3I5
UT WOS:001231956700001
OA Green Submitted
DA 2024-08-05
ER

PT J
AU Bartlett, A
   Liem, CCS
   Panichella, A
AF Bartlett, Antony
   Liem, Cynthia C. S.
   Panichella, Annibale
TI Multi-objective differential evolution in the generation of adversarial
   examples
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Differential evolution; Adversarial examples; Deep learning search-based
   software; engineering; Software testing
ID OPTIMIZATION; ALGORITHM
AB Adversarial examples remain a critical concern for the robustness of deep learning models, showcasing vulnerabilities to subtle input manipulations. While earlier research focused on generating such examples using white-box strategies, later research focused on gradient-based black-box strategies, as models' internals often are not accessible to external attackers. This paper extends our prior work by exploring a gradient-free search-based algorithm for adversarial example generation, with particular emphasis on differential evolution (DE). Building on top of the classic DE operators, we propose five variants of gradient-free algorithms: a singleobjective approach ( GA DE ), two multi-objective variations ( NSGA-II DE and MOEA/D DE ), and two many-objective strategies ( NSGA-III DE and AGE-MOEA DE ). Our study on five canonical image classification models shows that whilst GA DE variant remains the fastest approach, NSGA-II DE consistently produces more minimal adversarial attacks (i.e., with fewer image perturbations). Moreover, we found that applying a post-process minimization to our adversarial images, would further reduce the number of changes and overall delta variation (image noise).
C1 [Bartlett, Antony; Liem, Cynthia C. S.; Panichella, Annibale] Delft Univ Technol TU Delft, Mekelweg 5, NL-2628 CD Delft, Netherlands.
C3 Delft University of Technology
RP Bartlett, A (corresponding author), Delft Univ Technol TU Delft, Mekelweg 5, NL-2628 CD Delft, Netherlands.
EM a.j.bartlett@tudelft.nl; c.c.s.liem@tudelft.nl; a.panichella@tudelft.nl
OI Bartlett, Antony/0009-0008-2654-8556
FX The authors declare that they have no known competing financial
   interests or personal relationships that could have appeared to
   influence the work reported in this paper.
CR Nguyen A, 2015, PROC CVPR IEEE, P427, DOI 10.1109/CVPR.2015.7298640
   Antony B., sbft23' special edition (2.0.0), DOI [10.5281/zenodo.10250866, DOI 10.5281/ZENODO.10250866]
   Bartlett A., 2023, 2023 IEEE ACM INT WO, P1
   Blank J, 2020, IEEE ACCESS, V8, P89497, DOI 10.1109/ACCESS.2020.2990567
   Chan K, 2022, LECT NOTES COMPUT SC, V13711, P83, DOI 10.1007/978-3-031-21251-2_6
   Chollet F., 2015, Keras
   Chugh T, 2019, SOFT COMPUT, V23, P3137, DOI 10.1007/s00500-017-2965-0
   Conover W. J., 1999, PRACTICAL NONPARAMET
   Das I, 1998, SIAM J OPTIMIZ, V8, P631, DOI 10.1137/S1052623496307510
   Deb K, 2002, IEEE T EVOLUT COMPUT, V6, P182, DOI 10.1109/4235.996017
   Deb K, 2014, IEEE T EVOLUT COMPUT, V18, P577, DOI 10.1109/TEVC.2013.2281535
   Devroey X, 2023, SOFTW TEST VERIF REL, V33, DOI 10.1002/stvr.1838
   García S, 2009, J HEURISTICS, V15, P617, DOI 10.1007/s10732-008-9080-4
   Ghamizi S, 2020, PROCEEDINGS OF THE 28TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE '20), P1089, DOI 10.1145/3368089.3409739
   Goodfellow IJ, 2015, P 3 INT C LEARNING R
   Guo JJ, 2020, IEEE T WIREL COMMUN, V19, P2827, DOI [10.1109/TWC.2020.2968430, 10.1109/TNSE.2020.2997359]
   He KM, 2015, Arxiv, DOI [arXiv:1512.03385, DOI 10.48550/ARXIV.1512.03385]
   Holland J. H., 1992, ADAPTATION NATURAL A, DOI DOI 10.7551/MITPRESS/1090.001.0001
   Ishida S, 2021, ARTIF LIFE ROBOT, V26, P243, DOI 10.1007/s10015-020-00671-x
   Khare S, 2019, INTERSPEECH, P3208, DOI 10.21437/Interspeech.2019-2420
   Kim J, 2019, PROC INT CONF SOFTW, P1039, DOI 10.1109/ICSE.2019.00108
   Krizhevsky A, 2009, CIFAR-10 dataset
   Liem C.C.S., 2020, P IEEE ACM 42 INT C
   Lin J., 2020, Black-box adversarial sample generation based on differential evolution
   Ma L, 2018, PROC INT SYMP SOFTW, P100, DOI 10.1109/ISSRE.2018.00021
   Montgomery J, 2010, IEEE C EVOL COMPUTAT
   Moosavi-Dezfooli S.-M., 2015, arXiv, DOI [DOI 10.48550/ARXIV.1511.04599, 10.48550/ARXIV.1511.04599]
   NEMENYI P, 1962, BIOMETRICS, V18, P263
   Panichella A, 2021, 2021 ACM/IEEE 43RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING: NEW IDEAS AND EMERGING RESULTS (ICSE-NIER 2021), P66, DOI 10.1109/ICSE-NIER52604.2021.00022
   Panichella A, 2021, INFORM SOFTWARE TECH, V130, DOI 10.1016/j.infsof.2020.106411
   Panichella A, 2019, PROCEEDINGS OF THE 2019 GENETIC AND EVOLUTIONARY COMPUTATION CONFERENCE (GECCO'19), P595, DOI 10.1145/3321707.3321839
   Pei KX, 2019, COMMUN ACM, V62, P137, DOI 10.1145/3361566
   Russakovsky O, 2015, INT J COMPUT VISION, V115, P211, DOI 10.1007/s11263-015-0816-y
   Salimans T, 2017, Arxiv, DOI [arXiv:1703.03864, DOI 10.48550/ARXIV.1703.03864, 10.48550/arXiv.1703.03864]
   Simonyan K, 2015, Arxiv, DOI arXiv:1409.1556
   Smeulders AWM, 2000, IEEE T PATTERN ANAL, V22, P1349, DOI 10.1109/34.895972
   Storn R, 1997, J GLOBAL OPTIM, V11, P341, DOI 10.1023/A:1008202821328
   Su JW, 2019, IEEE T EVOLUT COMPUT, V23, P828, DOI 10.1109/TEVC.2019.2890858
   Sun W, 2022, Arxiv, DOI arXiv:2206.08638
   Suzuki T, 2019, IEEE C EVOL COMPUTAT, P2136, DOI [10.1109/CEC.2019.8790123, 10.1109/cec.2019.8790123]
   Szegedy C, 2014, Arxiv, DOI arXiv:1312.6199
   Szegedy C, 2016, PROC CVPR IEEE, P2818, DOI 10.1109/CVPR.2016.308
   Tian YC, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P303, DOI 10.1145/3180155.3180220
   Zhang PC, 2022, IEEE T SOFTWARE ENG, V48, P4630, DOI 10.1109/TSE.2021.3124006
   Zhang QF, 2007, IEEE T EVOLUT COMPUT, V11, P712, DOI 10.1109/TEVC.2007.892759
   Zhou Y., 2021, An evolutionary-based black-box attack to deep neural network classifiers, DOI [10.1007/s11036-019-01499-x, DOI 10.1007/S11036-019-01499-X]
NR 46
TC 0
Z9 0
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC
PY 2024
VL 238
AR 103169
DI 10.1016/j.scico.2024.103169
EA JUL 2024
PG 16
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA ZE5Y0
UT WOS:001273644300001
OA hybrid
DA 2024-08-05
ER

PT J
AU Prokic, S
   Luburic, N
   Slivka, J
   Kovacevic, A
AF Prokic, Simona
   Luburic, Nikola
   Slivka, Jelena
   Kovacevic, Aleksandar
TI Prescriptive procedure for manual code smell annotation
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Code smell; Manual annotation; Maintainability,; Software quality
ID MACHINE LEARNING TECHNIQUES; BAD SMELLS
AB - Code smells are structures in code that present potential software maintainability issues. Manually constructing high-quality datasets to train ML models for code smell detection is challenging. Inconsistent annotations, small size, non-realistic smell-to-non-smell ratio, and poor smell coverage hinder the dataset quality. These issues arise mainly due to the time-consuming nature of manual annotation and annotators ' disagreements caused by ambiguous and vague smell definitions. To address challenges related to building high-quality datasets suitable for training ML models for smell detection, we designed a prescriptive procedure for manual code smell annotation. The proposed procedure represents an extension of our previous work, aiming to support the annotation of any smell defined by Fowler. We validated the procedure by employing three annotators to annotate smells following the proposed annotation procedure. The main contribution of this paper is a prescriptive annotation procedure that benefits the following stakeholders: annotators building high-quality smell datasets that can be used to train ML models, ML researchers building ML models for smell detection, and software engineers employing ML models to enhance the software maintainability. Secondary contributions are the code smell dataset containing Data Class, Feature Envy, and Refused Bequest, and DataSet Explorer tool which supports annotators during the annotation procedure.
C1 [Prokic, Simona; Luburic, Nikola; Slivka, Jelena; Kovacevic, Aleksandar] Univ Novi Sad, Fac Tech Sci, Dept Comp & Control Engn, Novi Sad, Serbia.
C3 University of Novi Sad
RP Prokic, S (corresponding author), Univ Novi Sad, Fac Tech Sci, Trg Dositeja Obradovica 6, Novi Sad 21000, Serbia.
EM simona.prokic@uns.ac.rs
FU Science Fund of the Republic of Serbia [6521051]; Ministry of Science,
   Technological Development and Innovation [451-03-65/2024-03/200156];
   Faculty of Technical Sciences, University of Novi Sad [01-3394/1]
FX This research is supported by the Science Fund of the Republic of
   Serbia, Grant No 6521051, AI-Clean CaDET and the Ministry of Science,
   Technological Development and Innovation through contract no.
   451-03-65/2024-03/200156, and the Faculty of Technical Sciences,
   University of Novi Sad through project "Scientific and Artistic Research
   Work of Researchers in Teaching and Associate Positions at the Faculty
   of Technical Sciences, University of Novi Sad" (No. 01-3394/1) . Our
   funders had no involvement in the study design, collection, analysis,
   and interpretation of the data, writing of the report, or the decision
   to submit the article for publication.
CR AbuHassan A, 2021, J SOFTW-EVOL PROC, V33, DOI 10.1002/smr.2320
   Azeem MI, 2019, INFORM SOFTWARE TECH, V108, P115, DOI 10.1016/j.infsof.2018.12.009
   Barbez A, 2020, J SYST SOFTWARE, V161, DOI 10.1016/j.jss.2019.110486
   Brdar Ilija, 2022, 2022 IEEE 20th Jubilee International Symposium on Intelligent Systems and Informatics (SISY), P403, DOI 10.1109/SISY56759.2022.10036248
   Bryton S, 2010, QUATIC 2010: SEVENTH INTERNATIONAL CONFERENCE ON THE QUALITY OF INFORMATION AND COMMUNICATIONS TECHNOLOGY, P337, DOI 10.1109/QUATIC.2010.60
   Caram FL, 2019, INT J SOFTW ENG KNOW, V29, P285, DOI 10.1142/S021819401950013X
   Davani AM, 2022, T ASSOC COMPUT LING, V10, P92, DOI 10.1162/tacl_a_00449
   Di Nucci D, 2018, 2018 25TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION AND REENGINEERING (SANER 2018), P612, DOI 10.1109/SANER.2018.8330266
   Fontana FA, 2016, EMPIR SOFTW ENG, V21, P1143, DOI 10.1007/s10664-015-9378-4
   Fontana FA, 2017, KNOWL-BASED SYST, V128, P43, DOI 10.1016/j.knosys.2017.04.014
   Fontana FA, 2016, 2016 IEEE 23RD INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER), VOL 1, P609, DOI 10.1109/SANER.2016.84
   Fowler M., 2018, Refactoring: improving the design of existing code
   Fowler M., 1999, Refactoring: Improving the Design of Existing Programs
   Grodzicka H., 2020, Data-Centr. Bus. Applicat.: Tow. Softw. Develop, P137, DOI DOI 10.1007/978-3-030-34706-2_8
   Hadj-Kacem M, 2019, IEEE IJCNN
   Hassaine S, 2010, QUATIC 2010: SEVENTH INTERNATIONAL CONFERENCE ON THE QUALITY OF INFORMATION AND COMMUNICATIONS TECHNOLOGY, P343, DOI 10.1109/QUATIC.2010.61
   Hayes AF, 2007, COMMUN METHODS MEAS, V1, P77, DOI 10.1080/19312450709336664
   Hozano M, 2018, INFORM SOFTWARE TECH, V93, P130, DOI 10.1016/j.infsof.2017.09.002
   Hozano M, 2017, ICEIS: PROCEEDINGS OF THE 19TH INTERNATIONAL CONFERENCE ON ENTERPRISE INFORMATION SYSTEMS - VOL 2, P474, DOI 10.5220/0006338804740482
   Ide N., 2017, Handbook Of Linguistic Annotation, V1
   IEEE, 1990, 610121990 IEEE, P12
   ISO/IEC, 2011, ISO/ IEC 25010-System and Software engineering-System and software Quality Requirements and Evaluation (SQuaRE)-System and software quality modelsInternet
   Jermakovics A., 2008, 23 ACM SIGPLAN C OBJ, P749, DOI [10.1145/1449814.1449843, DOI 10.1145/1449814.1449843]
   Kaur A, 2020, ARCH COMPUT METHOD E, V27, P1267, DOI 10.1007/s11831-019-09348-6
   Khomh F, 2011, J SYST SOFTWARE, V84, P559, DOI 10.1016/j.jss.2010.11.921
   Khomh F, 2009, INT CONF QUAL SOFTW, P305, DOI 10.1109/QSIC.2009.47
   Kovacevic A, 2024, NEURAL COMPUT APPL, DOI 10.1007/s00521-024-09551-y
   Kovacevic A, 2022, EXPERT SYST APPL, V204, DOI 10.1016/j.eswa.2022.117607
   Kreimer J, 2005, ELECTRON NOTES THEOR, V141, P117, DOI 10.1016/j.entcs.2005.02.059
   Lacerda G, 2020, J SYST SOFTWARE, V167, DOI 10.1016/j.jss.2020.110610
   LANDIS JR, 1977, BIOMETRICS, V33, P159, DOI 10.2307/2529310
   Lehtinen TOA, 2014, INFORM SOFTWARE TECH, V56, P623, DOI 10.1016/j.infsof.2014.01.015
   Lewowski T., 2022, Develop. Informat. Knowl. Manage. Bus. Appl, V3, P285
   Lewowski T, 2022, INFORM SOFTWARE TECH, V144, DOI 10.1016/j.infsof.2021.106783
   Madeyski Lech, 2020, EASE2020. Proceedings of the Evaluation and Assessment in Software Engineering, P342, DOI 10.1145/3383219.3383264
   Madeyski L, 2023, INFORM SOFTWARE TECH, V155, DOI 10.1016/j.infsof.2022.107112
   Maiga A., 2012, 2012 19th Working Conference on Reverse Engineering (WCRE), P466, DOI 10.1109/WCRE.2012.56
   Mäntylä M, 2003, PROC IEEE INT CONF S, P381, DOI 10.1109/ICSM.2003.1235447
   Mäntylä MV, 2006, EMPIR SOFTW ENG, V11, P395, DOI 10.1007/s10664-006-9002-8
   Mäntylä MV, 2004, PROC IEEE INT CONF S, P399, DOI 10.1109/ICSM.2004.1357825
   Mayvan BB, 2020, J SOFTW-EVOL PROC, V32, DOI 10.1002/smr.2255
   Menshawy Rana S., 2021, 2021 International Mobile, Intelligent, and Ubiquitous Computing Conference (MIUCC), P78, DOI 10.1109/MIUCC52538.2021.9447669
   Mkaouer MW, 2017, EMPIR SOFTW ENG, V22, P894, DOI 10.1007/s10664-016-9426-8
   Ng A., 2017, Machine learning yearning, P30
   Oortwijn Y., 2021, P WORKSH HUM EV NLP, P131
   Palomba F, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P482, DOI 10.1145/3180155.3182532
   Palomba F, 2018, INFORM SOFTWARE TECH, V99, P1, DOI 10.1016/j.infsof.2018.02.004
   Palomba F, 2015, 12TH WORKING CONFERENCE ON MINING SOFTWARE REPOSITORIES (MSR 2015), P482, DOI 10.1109/MSR.2015.69
   Palomba F, 2014, PROC IEEE INT CONF S, P101, DOI 10.1109/ICSME.2014.32
   Palomba F, 2013, IEEE INT CONF AUTOM, P268, DOI 10.1109/ASE.2013.6693086
   Pantiuchina J, 2020, ACM T SOFTW ENG METH, V29, DOI 10.1145/3408302
   Pecorelli F, 2020, IEEE WORK CONF MIN S, P220, DOI 10.1145/3379597.3387457
   Pecorelli F, 2019, INT C PROGRAM COMPRE, P93, DOI 10.1109/ICPC.2019.00023
   Pressman R.S., 2005, Software Engineering: A Practitioner's Approach
   Prokic S., 2023, 2023 46th MIPRO ICT and Electronics Convention (MIPRO), P1664, DOI 10.23919/MIPRO57284.2023.10159875
   Pustejovsky J., 2012, Natural Language Annotation For Machine Learning: A guide to Corpus-Building For Applications
   Röttger P, 2022, NAACL 2022: THE 2022 CONFERENCE OF THE NORTH AMERICAN CHAPTER OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS: HUMAN LANGUAGE TECHNOLOGIES, P175
   Santos Jose Amancio M., 2017, Journal of Software Engineering Research and Development, V5, DOI 10.1186/s40411-017-0042-0
   Schumacher Jan., 2010, Proc. ACMIEEE Int. Symp. on Empirical Software Eng. and Measurement. ESEM '10, V8, P1, DOI [10.1145/1852786.1852797, DOI 10.1145/1852786.1852797]
   Seaman CB, 1999, IEEE T SOFTWARE ENG, V25, P557, DOI 10.1109/32.799955
   Sharma T, 2018, J SYST SOFTWARE, V138, P158, DOI 10.1016/j.jss.2017.12.034
   Skipina M., 2023, Automatic detection of Feature envy and data class code smells using machine learning, DOI [10.1016/j.eswa.2023.122855, DOI 10.1016/J.ESWA.2023.122855]
   Slivka J., 2020, Grant No 6521051
   Slivka J, 2023, SCI COMPUT PROGRAM, V230, DOI 10.1016/j.scico.2023.102999
   Taibi D, 2017, INFORM SOFTWARE TECH, V92, P223, DOI 10.1016/j.infsof.2017.08.008
   Tu JZ, 2020, KNOWL INF SYST, V62, P1341, DOI 10.1007/s10115-019-01386-7
   Vale G, 2015, 2015 12TH INTERNATIONAL CONFERENCE ON INFORMATION TECHNOLOGY - NEW GENERATIONS, P427, DOI 10.1109/ITNG.2015.75
   Van Vliet H., 2008, Software Engineering: Principles and Practice, V13
   Vaucher S, 2009, WORK CONF REVERSE EN, P145, DOI 10.1109/WCRE.2009.23
   Vidgen B, 2021, 2021 CONFERENCE OF THE NORTH AMERICAN CHAPTER OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS: HUMAN LANGUAGE TECHNOLOGIES (NAACL-HLT 2021), P2289
   Vidgen B, 2021, 59TH ANNUAL MEETING OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS AND THE 11TH INTERNATIONAL JOINT CONFERENCE ON NATURAL LANGUAGE PROCESSING, VOL 1 (ACL-IJCNLP 2021), P1667
   Wang YJ, 2018, P INT COMP SOFTW APP, P48, DOI 10.1109/COMPSAC.2018.00015
   Wieringa R, 2014, J SYST SOFTWARE, V95, P19, DOI 10.1016/j.jss.2013.11.1097
   Yang J, 2015, EMPIR SOFTW ENG, V20, P1095, DOI 10.1007/s10664-014-9316-x
   Zakeri-Nasrabadi M, 2023, ACM COMPUT SURV, V55, DOI 10.1145/3596908
NR 75
TC 0
Z9 0
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC
PY 2024
VL 238
AR 103168
DI 10.1016/j.scico.2024.103168
EA JUL 2024
PG 29
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA YC9T2
UT WOS:001266412500001
DA 2024-08-05
ER

PT J
AU Zhang, C
   Chen, JF
   Cai, SH
   Zhang, W
   Sosu, RNA
   Chen, HB
AF Zhang, Chi
   Chen, Jinfu
   Cai, Saihua
   Zhang, Wen
   Sosu, Rexford Nii Ayitey
   Chen, Haibo
TI TR-Fuzz: A syntax valid tool for fuzzing C compilers
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Compiler testing; C programs; Software vulnerability; Fuzzing; Test
   cases
ID GENERATION
AB Compilers play a critical role in current software construction. However, the vulnerabilities or bugs within the compiler can pose significant challenges to ensuring the security of the resultant software. In recent years, many compilers have made use of testing techniques to address and mitigate such concerns. Fuzzing is widely used among these techniques to detect software bugs. However, when fuzzing compilers, there are still shortcomings in terms of the diversity and validity of test cases. This paper introduces TR-Fuzz, a fuzzing tool specifically designed for C compilers based on Transformer. Leveraging position embedding and multi-head attention mechanisms, TR-Fuzz establishes relationships among data, facilitating the generation of wellformed C programs for compiler testing. In addition, we use different generation strategies in the process of program generation to improve the performance of TR-Fuzz. We validate the effectiveness of TR-Fuzz through the comparison with existing fuzzing tools for C compilers. The experimental results show that TR-Fuzz increases the pass rate of the generated C programs by an average of about 12% and improves the coverage of programs under test compared with the existing tools. Benefiting from the improved pass rate and coverage, we found five bugs in GCC-9.
C1 [Zhang, Chi; Chen, Jinfu; Cai, Saihua; Zhang, Wen; Sosu, Rexford Nii Ayitey; Chen, Haibo] Jiangsu Univ, Sch Comp Sci & Commun Engn, Zhenjiang 212013, Peoples R China.
   [Zhang, Chi; Chen, Jinfu; Cai, Saihua; Chen, Haibo] Jiangsu Univ, Jiangsu Key Lab Secur Technol Ind Cyberspace, Zhenjiang 212013, Peoples R China.
   [Sosu, Rexford Nii Ayitey] Ghana Commun Technol Univ, Fac Comp & Informat Syst, Accra, Ghana.
C3 Jiangsu University; Jiangsu University
RP Chen, JF (corresponding author), Jiangsu Univ, Sch Comp Sci & Commun Engn, Zhenjiang 212013, Peoples R China.; Chen, JF (corresponding author), Jiangsu Univ, Jiangsu Key Lab Secur Technol Ind Cyberspace, Zhenjiang 212013, Peoples R China.
EM jinfuchen@ujs.edu.cn
OI Chen, Jinfu/0000-0002-3124-5452
FU National Natural Science Foundation of China [62172194, 62202206,
   U1836116]; National Key R & D Program of China [2020YFB1005500]; Natural
   Science Foundation of Jiangsu Province, China [BK20220515]; Leading
   -edge Technology Program of Jiangsu Provincial Natural Science Foun-
   dation, China [BK20202001]; Graduate Research Innovation Project of
   Jiangsu Province [KYCX21_3375]
FX This work was partly supported by the National Natural Science
   Foundation of China (Grant numbers: 62172194, 62202206 and U1836116) ,
   the National Key R & D Program of China (Grant number: 2020YFB1005500) ,
   the Natural Science Foundation of Jiangsu Province, China (Grant number:
   BK20220515) , the Leading -edge Technology Program of Jiangsu Provincial
   Natural Science Foun- dation, China (Grant number: BK20202001) , and the
   Graduate Research Innovation Project of Jiangsu Province (Grant number:
   KYCX21_3375) .
CR [Anonymous], 2023, GCC testsuite
   Bahdanau D, 2016, Arxiv, DOI arXiv:1409.0473
   Barr ET, 2015, IEEE T SOFTWARE ENG, V41, P507, DOI 10.1109/TSE.2014.2372785
   Böhme M, 2022, PROC INT CONF SOFTW, P1621, DOI 10.1145/3510003.3510230
   Bohme M., 2016, Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security. CCS'16. Vienna, P1032, DOI [DOI 10.1145/2976749.2978428, 10.1145/2976749.2978428]
   Böhme M, 2021, IEEE SOFTWARE, V38, P79, DOI 10.1109/MS.2020.3016773
   Chen C, 2018, COMPUT SECUR, V75, P118, DOI 10.1016/j.cose.2018.02.002
   Chen HX, 2020, PROCEEDINGS OF THE 29TH USENIX SECURITY SYMPOSIUM, P2325
   Chen J., 2022, 37 IEEE ACM INT C AU, P1
   Chen JF, 2023, J SOFTW-EVOL PROC, V35, DOI 10.1002/smr.2537
   Chen JJ, 2016, PROC INT CONF SOFTW, P180, DOI 10.1145/2884781.2884878
   Chen TY, 2016, COMPUTER, V49, P48, DOI 10.1109/MC.2016.176
   Cummins C, 2018, ISSTA'18: PROCEEDINGS OF THE 27TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, P95, DOI 10.1145/3213846.3213848
   Deng YL, 2023, PROCEEDINGS OF THE 32ND ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, ISSTA 2023, P423, DOI 10.1145/3597926.3598067
   Donaldson AF, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P1017, DOI 10.1145/3453483.3454092
   Du ZJ, 2022, PROC INT CONF SOFTW, P2440, DOI 10.1145/3510003.3510197
   Even-Mendoza K, 2023, PROCEEDINGS OF THE 32ND ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, ISSTA 2023, P1219, DOI 10.1145/3597926.3598130
   Gan ST, 2020, PROCEEDINGS OF THE 29TH USENIX SECURITY SYMPOSIUM, P2577
   GCC, 2023, The GNU Compiler Collection
   github, Recent papers related to fuzzing
   Godefroid P, 2017, IEEE INT CONF AUTOM, P50, DOI 10.1109/ASE.2017.8115618
   Guo JL, 2020, 58TH ANNUAL MEETING OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS (ACL 2020), P376
   Herrera A, 2021, ISSTA '21: PROCEEDINGS OF THE 30TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, P230, DOI 10.1145/3460319.3464795
   Jiang H, 2021, IEEE T SOFTWARE ENG, V48, P2339, DOI 10.1109/TSE.2021.3058671
   Keneshloo Y, 2020, IEEE T NEUR NET LEAR, V31, P2469, DOI 10.1109/TNNLS.2019.2929141
   Klees G, 2018, PROCEEDINGS OF THE 2018 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY (CCS'18), P2123, DOI 10.1145/3243734.3243804
   Koroglu Y, 2019, INT WORKSH AUTOMAT, P28, DOI 10.1109/AST.2019.00010
   Kossatchev AS, 2005, PROGRAM COMPUT SOFT+, V31, P10, DOI 10.1007/s11086-005-0002-z
   Kouris P, 2021, COMPUT LINGUIST, V47, P813, DOI [10.1162/COLI_a_00417, 10.1162/coli_a_00417]
   Lattner C, 2004, INT SYM CODE GENER, P75, DOI 10.1109/cgo.2004.1281665
   Li XT, 2022, LECT NOTES COMPUT SC, V13407, P359, DOI 10.1007/978-3-031-15777-6_20
   Liu X, 2019, AAAI CONF ARTIF INTE, P1044
   Liu XW, 2022, PROCEEDINGS OF THE 31ST ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, ISSTA 2022, P391, DOI 10.1145/3533767.3534403
   LLVM, 2023, About us
   Lu YC, 2021, 2021 IEEE/CVF INTERNATIONAL CONFERENCE ON COMPUTER VISION (ICCV 2021), P15911, DOI 10.1109/ICCV48922.2021.01563
   Lyu CY, 2019, PROCEEDINGS OF THE 28TH USENIX SECURITY SYMPOSIUM, P1949
   Manès VJM, 2021, IEEE T SOFTWARE ENG, V47, P2312, DOI 10.1109/TSE.2019.2946563
   Molina F, 2022, PROC INT CONF SOFTW, P1008, DOI 10.1145/3510003.3510120
   Nicolae MI, 2023, PROCEEDINGS OF THE 31ST ACM JOINT MEETING EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, ESEC/FSE 2023, P133, DOI 10.1145/3611643.3616308
   Olsthoorn M, 2020, IEEE INT CONF AUTOM, P1224, DOI 10.1145/3324884.3418930
   peach.tech, Peach fuzzer: discover Unknown Vulnerabilities
   Rawat S, 2017, 24TH ANNUAL NETWORK AND DISTRIBUTED SYSTEM SECURITY SYMPOSIUM (NDSS 2017), DOI 10.14722/ndss.2017.23404
   She DD, 2022, P IEEE S SECUR PRIV, P2194, DOI [10.1109/SP46214.2022.9833761, 10.1109/SP46214.2022.00129]
   She DD, 2020, PROCEEDINGS OF THE 28TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE '20), P737, DOI 10.1145/3368089.3409723
   Sun F, 2019, PROCEEDINGS OF THE 28TH ACM INTERNATIONAL CONFERENCE ON INFORMATION & KNOWLEDGE MANAGEMENT (CIKM '19), P1441, DOI 10.1145/3357384.3357895
   Tang YX, 2020, FRONT COMPUT SCI-CHI, V14, P1, DOI 10.1007/s11704-019-8231-0
   Tu HX, 2023, IEEE T RELIAB, V72, P343, DOI 10.1109/TR.2022.3171220
   Vaswani A, 2017, ADV NEUR IN, V30
   Venugopalan S, 2015, IEEE I CONF COMP VIS, P4534, DOI 10.1109/ICCV.2015.515
   Wang JJ, 2017, P IEEE S SECUR PRIV, P579, DOI 10.1109/SP.2017.23
   Wang JJ, 2019, PROC INT CONF SOFTW, P724, DOI 10.1109/ICSE.2019.00081
   Wu MY, 2023, PROCEEDINGS OF THE 31ST ACM JOINT MEETING EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, ESEC/FSE 2023, P1062, DOI 10.1145/3611643.3616277
   Xiao DW, 2022, P ACM MEAS ANAL COMP, V6, DOI 10.1145/3508035
   Xu HR, 2020, IEEE IJCNN, DOI 10.1109/ijcnn48605.2020.9206911
   Yang XJ, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P283
   Zalewski M., 2022, American Fuzzy Lop
   Zong PY, 2020, PROCEEDINGS OF THE 29TH USENIX SECURITY SYMPOSIUM, P2255
NR 57
TC 0
Z9 0
U1 1
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC
PY 2024
VL 238
AR 103155
DI 10.1016/j.scico.2024.103155
EA JUN 2024
PG 15
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA XB4M1
UT WOS:001259210100001
DA 2024-08-05
ER

PT J
AU Liu, S
   Keung, JW
   Yang, Z
   Liao, YH
   Li, YS
AF Liu, Shuo
   Keung, Jacky Wai
   Yang, Zhen
   Liao, Yihan
   Li, Yishu
TI TerGEC: A graph enhanced contrastive approach for program termination
   analysis
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Code representation learning; Graph neural networks; Contrastive
   learning; Termination analysis
AB Context: Programs with non -termination behavior induce various bugs, such as denial -of -service vulnerability and memory exhaustion. Hence the ability to detect non -termination programs before software deployment is crucial. Existing detection methods are either execution -based or deep learning -based. Despite great advances, their limitations are evident. The former requires complex sandbox environments for execution, while the latter lacks fine-grained analysis. Objective: To overcome the above limitations, this paper proposes a graph -enhanced contrastive approach, namely TerGEC, which combines both inter -class and intra-class semantics to carry out a more fine-grained analysis and exempt execution during the detection process. Methods: In detail, TerGEC analyzes behaviors of programs from Abstract Syntax Trees (ASTs), thereby capturing intra-class semantics both syntactically and lexically. Besides, it incorporates contrastive learning to learn the discrepancy between program behaviors of termination and nontermination, thereby acquiring inter -class semantics. In addition, graph augmentation is designed to improve the robustness. Weighted contrastive loss and focal loss are also equipped in TerGEC to alleviate the classes -imbalance problem during the non -termination detection. Consequently, the whole detection process can be handled more fine-grained, and the execution can also be exempted due to the nature of deep learning. Results: We evaluate TerGEC on five datasets of both Python and C languages. Extensive experiments demonstrate TerGEC achieves the best performance overall. Among all experimented datasets, TerGEC outperforms state-of-the-art baselines by 8 .20% in terms of mAP and by 17 .07% in terms of AUC on average. Conclusion: TerGEC is capable of detecting non -terminating programs with high precision, showing that the combination of inter -class and intra-class learning, along with our proposed classes -imbalance solutions, is significantly effective in practice.
C1 [Liu, Shuo; Keung, Jacky Wai; Liao, Yihan; Li, Yishu] City Univ Hong Kong, Dept Comp Sci, Hong Kong, Peoples R China.
   [Yang, Zhen] Shandong Univ, Sch Comp Sci & Technol, Qingdao, Peoples R China.
C3 City University of Hong Kong; Shandong University
RP Yang, Z (corresponding author), Shandong Univ, Sch Comp Sci & Technol, Qingdao, Peoples R China.
EM sliu273-c@my.cityu.edu.hk; Jacky.Keung@cityu.edu.hk;
   zhenyang@sdu.edu.cn; yihanliao4-c@my.cityu.edu.hk;
   yishuli5-c@my.cityu.edu.hk
OI Keung, Jacky/0000-0002-3803-9600; LIAO, Yihan/0000-0002-8002-9190; LIU,
   Shuo/0000-0002-8877-3678; LI, Yishu/0000-0003-4017-4294
FU General Research Fund of the Research Grants Council of Hong Kong; City
   University of Hong Kong [6000796, 9229109, 9229098, 9220103, 9229029]
FX <B>Acknowledgement</B> This work is supported in part by the General
   Research Fund of the Research Grants Council of Hong Kong and the
   research funds of City University of Hong Kong (6000796, 9229109,
   9229098, 9220103, 9229029) .
CR Allamanis M, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P91, DOI 10.1145/3385412.3385997
   Allamanis Miltiadis, 2018, INT C LEARNING REPRE
   Allamanis Miltiadis, 2021, Advances in Neural Information Processing Systems, V34, P27865
   Almeida AA, 2020, SCI COMPUT PROGRAM, V195, DOI 10.1016/j.scico.2020.102474
   Alon Y, 2022, PROCEEDINGS OF THE 30TH ACM JOINT MEETING EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, ESEC/FSE 2022, P910, DOI 10.1145/3540250.3549095
   Austin J., 2021, arXiv, DOI DOI 10.48550/ARXIV.2108.07732
   Ben-Amram AM, 2017, LECT NOTES COMPUT SC, V10427, P601, DOI 10.1007/978-3-319-63390-9_32
   Ben-Amram AM, 2014, J ACM, V61, DOI 10.1145/2629488
   Bradley AR, 2005, LECT NOTES COMPUT SC, V3576, P491
   Brockschmidt M, 2019, 25TH AMERICAS CONFERENCE ON INFORMATION SYSTEMS (AMCIS 2019)
   Brunsfeld Max, Tree-sitter
   Chatterjee K, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P1033, DOI 10.1145/3453483.3454093
   Chen H.-Y., 2014, International Conference on Tools and Algorithms for the Construction and Analysis of Systems, P156
   Chen M., 2021, arXiv, DOI DOI 10.48550/ARXIV.2107.03374
   Chen T, 2020, PR MACH LEARN RES, V119
   Chung JY, 2014, Arxiv, DOI [arXiv:1412.3555, DOI 10.48550/ARXIV.1412.3555]
   Clevert D., 2016, arXiv, P1
   Cook B, 2014, 2014 FORMAL METHODS IN COMPUTER-AIDED DESIGN (FMCAD), P67, DOI 10.1109/FMCAD.2014.6987597
   Dasgupta S, 2013, Arxiv, DOI arXiv:1301.3849
   Feng S, 2021, INFORM SOFTWARE TECH, V139, DOI 10.1016/j.infsof.2021.106662
   Fernandes Patrick, 2019, 7 INT C LEARN REPR I
   Fey M., 2019, ICLR WORKSHOP REPRES
   Frohn F, 2019, 2019 FORMAL METHODS IN COMPUTER AIDED DESIGN (FMCAD), P221, DOI [10.23919/FMCAD.2019.8894271, 10.23919/fmcad.2019.8894271]
   Gao L, 2020, Arxiv, DOI arXiv:2101.00027
   Gao X, 2020, PROC INT CONF SOFTW, P1147, DOI 10.1145/3377811.3380415
   Giacobbe M, 2022, PROCEEDINGS OF THE 30TH ACM JOINT MEETING EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, ESEC/FSE 2022, P633, DOI 10.1145/3540250.3549120
   Giesl Jurgen, 2019, The Termination and Complexity Competition
   Gonnord L, 2015, ACM SIGPLAN NOTICES, V50, P608, DOI [10.1145/2813885.2737976, 10.1145/2737924.2737976]
   Gori M, 2005, IEEE IJCNN, P729
   Graves A, 2012, STUD COMPUT INTELL, V385, P1, DOI [10.1162/neco.1997.9.8.1735, 10.1007/978-3-642-24797-2, 10.1162/neco.1997.9.1.1]
   Gupta AK, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P147, DOI 10.1145/1328438.1328459
   Hamilton WL, 2017, ADV NEUR IN, V30
   He KM, 2015, IEEE I CONF COMP VIS, P1026, DOI 10.1109/ICCV.2015.123
   Hou ZY, 2022, PROCEEDINGS OF THE 28TH ACM SIGKDD CONFERENCE ON KNOWLEDGE DISCOVERY AND DATA MINING, KDD 2022, P594, DOI 10.1145/3534678.3539321
   Inala Jeevana Priya, 2022, Adv. Neural Inf. Process. Syst., P13419
   Ketema J, 2017, SCI COMPUT PROGRAM, V148, P107, DOI 10.1016/j.scico.2017.04.009
   Khosla P., 2020, Adv. Neural Inf. Process. Syst, P18661, DOI DOI 10.48550/ARXIV.2004.11362
   Kingma D. P., 2014, arXiv
   Kipf T.N., 2017, INT C LEARN REPR, P1
   Le TC, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428257
   Li Y., 2016, ICLR, P1
   Liu S, 2024, Arxiv, DOI arXiv:2402.06247
   Maas A.L., 2013, P ICML CIT, V30, P3
   Nair V., 2010, Proceedings of the 27th International Conference on Machine Learning (ICML-10), P807
   Podelski A, 2004, LECT NOTES COMPUT SC, V2937, P239
   Romero A., 2018, INT C LEARN REPR, P2920, DOI DOI 10.48550/ARXIV.1710.10903
   Shi Y., 2021, P 30 INT JOINT C ART, P1548, DOI [DOI 10.24963/IJCAI.2021/214, 10.24963/ijcai.2021/ 214]
   Tan W, 2021, NEURAL COMPUT APPL, V33, P9939, DOI 10.1007/s00521-021-05763-8
   Tsung-Yi Lin, 2017, 2017 IEEE International Conference on Computer Vision (ICCV), P2999, DOI 10.1109/ICCV.2017.324
   Urban C, 2016, LECT NOTES COMPUT SC, V9636, P54, DOI 10.1007/978-3-662-49674-9_4
   Wang Y, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428205
   Wang Y, 2019, ACM T GRAPHIC, V38, DOI 10.1145/3326362
   Xu K, 2019, PROC INT CONF PARAL, DOI 10.1145/3337821.3337923
   Xu RC, 2022, PROC INT CONF SOFTW, P499, DOI 10.1145/3510003.3510220
   Xue PY, 2024, Arxiv, DOI arXiv:2404.14824
   Xue Y., 2022, P INT C MACH LEARN I, P24851
   Yamada A, 2015, SCI COMPUT PROGRAM, V111, P110, DOI 10.1016/j.scico.2014.07.009
   Yang SR, 2023, Arxiv, DOI arXiv:2204.08610
   Yang Z, 2024, Arxiv, DOI arXiv:2404.14646
   Yang Z, 2024, INFORM SOFTWARE TECH, V166, DOI 10.1016/j.infsof.2023.107365
   Yang Z, 2021, INT C PROGRAM COMPRE, P1, DOI 10.1109/ICPC52881.2021.00010
   You Yuning, 2020, Adv Neural Inf Process Syst
   Zhang KC, 2022, INT C PROGRAM COMPRE, P378, DOI 10.1145/3524610.3527905
   Zhang LF, 2022, LECT NOTES COMPUT SC, V13686, P1, DOI 10.1007/978-3-031-19809-0_1
   Zhang YF, 2022, PROCEEDINGS OF THE 28TH ACM SIGKDD CONFERENCE ON KNOWLEDGE DISCOVERY AND DATA MINING, KDD 2022, P2524, DOI 10.1145/3534678.3539425
   Zhu YQ, 2020, Arxiv, DOI arXiv:2006.04131
   Zhu YQ, 2021, PROCEEDINGS OF THE WORLD WIDE WEB CONFERENCE 2021 (WWW 2021), P2069, DOI 10.1145/3442381.3449802
NR 67
TC 0
Z9 0
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT
PY 2024
VL 237
AR 103141
DI 10.1016/j.scico.2024.103141
EA MAY 2024
PG 14
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA XU4T0
UT WOS:001264184100001
DA 2024-08-05
ER

PT J
AU Hong, WJ
   Chen, ZB
   Zhang, YF
   Yu, HB
   Du, YD
   Wang, J
AF Hong, Weijiang
   Chen, Zhenbang
   Zhang, Yufeng
   Yu, Hengbiao
   Du, Yide
   Wang, Ji
TI Verification of message-passing uninterpreted programs
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Message-passing; Uninterpreted programs; Communicating finite-state
   machine
AB Message-passing programs involve several processes with channel-based communications to deal with tasks concurrently. The complex computations and communications between processes make the verification of message-passing programs hard. By regarding the functions in programs as uninterpreted functions, we focus on the verification problem of message-passing uninterpreted programs. Although the usage of uninterpreted functions alleviates the computational difficulties brought by functions, the verification problem is still undecidable in general. In this work, we provide a decidable subclass of message-passing uninterpreted programs, wherein programs in this subclass satisfy the property of k-record coherence. The decidability result closely relies on communicating finite-state machine (CFM) with bounded channels. Based on the decidability result, we proposed a verification framework for message-passing uninterpreted programs.
C1 [Hong, Weijiang; Chen, Zhenbang; Yu, Hengbiao; Du, Yide; Wang, Ji] Natl Univ Def Technol, Coll Comp, Changsha, Peoples R China.
   [Hong, Weijiang; Chen, Zhenbang; Yu, Hengbiao; Du, Yide; Wang, Ji] Natl Univ Def Technol, State Key Lab Complex & Crit Software Environm, Changsha, Peoples R China.
   [Hong, Weijiang; Wang, Ji] Natl Univ Def Technol, State Key Lab High Performance Comp, Changsha, Peoples R China.
   [Zhang, Yufeng] Hunan Univ, Coll Comp Sci & Elect Engn, Changsha, Peoples R China.
C3 National University of Defense Technology - China; National University
   of Defense Technology - China; National University of Defense Technology
   - China; Hunan University
RP Chen, ZB; Wang, J (corresponding author), Natl Univ Def Technol, Coll Comp, Changsha, Peoples R China.
EM hongweijiang17@nudt.edu.cn; zbchen@nudt.edu.cn; yufengzhang@hnu.edu.cn;
   hengbiaoyu@nudt.edu.cn; dyd1024@nudt.edu.cn; wj@nudt.edu.cn
FU National Key R&D Program of China [2022YFB4501903]; NSFC Programs
   [62172429, 62032024, 62372162, 62272471, 62002363]
FX <B>Acknowledgements</B> This work was supported by National Key R&D
   Program of China (No. 2022YFB4501903) and the NSFC Programs (No.
   62172429, 62032024, 62372162, 62272471, and 62002363) .
CR Abdulla PA, 1996, INFORM COMPUT, V127, P91, DOI 10.1006/inco.1996.0053
   Ben-Ari M., 1990, PHI Series in computer science
   BRAND D, 1983, J ACM, V30, P323, DOI 10.1145/322374.322380
   Du YD, 2022, LECT NOTES COMPUT SC, V13299, P148, DOI 10.1007/978-3-031-10363-6_10
   Erlang, about us
   Finkel A, 2001, THEOR COMPUT SCI, V256, P63, DOI 10.1016/S0304-3975(00)00102-X
   Forejt V, 2017, ACM T PROGR LANG SYS, V39, DOI 10.1145/3095075
   Genest B, 2007, FUND INFORM, V80, P147
   Gopalakrishnan G, 2011, COMMUN ACM, V54, P82, DOI 10.1145/2043174.2043194
   Hong WJ, 2021, LECT NOTES COMPUT SC, V13047, P545, DOI 10.1007/978-3-030-90870-6_29
   KALE LV, 1993, SIGPLAN NOTICES, V28, P91, DOI 10.1145/167962.165874
   Kim JS, 1998, LECT NOTES COMPUT SC, V1362, P202
   Krogmeier P, 2020, LECT NOTES COMPUT SC, V12225, P634, DOI 10.1007/978-3-030-53291-8_32
   Kuske D., 2021, Handbook of Automata Theory, P1147
   La Torre S, 2008, LECT NOTES COMPUT SC, V4963, P299, DOI 10.1007/978-3-540-78800-3_21
   La Torre S, 2010, LECT NOTES COMPUT SC, V6174, P629, DOI 10.1007/978-3-642-14295-6_54
   Luo Z., 2017, P 24 EUROPEAN MPI US
   Mathur Umang, 2020, Tools and Algorithms for the Construction and Analysis of Systems. 26th International Conference, TACAS 2020. Held as Part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2020. Proceedings. Lecture Notes in Computer Science (LNCS 12079), P158, DOI 10.1007/978-3-030-45237-7_10
   Mathur U, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290359
   Mathur U, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371103
   MPI, A message-passing interface standard
   NELSON G, 1980, J ACM, V27, P356, DOI 10.1145/322186.322198
   Schneider F.B, 1997, Graduate Texts in Computer Science
   Shoham S., 2021, arXiv
   Siegel SF, 2011, MATH COMPUT SCI, V5, P395, DOI 10.1007/s11786-011-0100-7
   Torre S.L., 2019, LIPIcs, V150
   Vakkalanka S, 2008, PPOPP'08: PROCEEDINGS OF THE 2008 ACM SIGPLAN SYMPOSIUM ON PRINCIPLES AND PRACTICE OF PARALLEL PROGRAMMING, P285, DOI 10.1145/1345206.1345258
   Yu HBA, 2020, PROC INT CONF SOFTW, P1248, DOI 10.1145/3377811.3380419
NR 28
TC 0
Z9 0
U1 2
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAY
PY 2024
VL 234
AR 103075
DI 10.1016/j.scico.2023.103075
EA JAN 2024
PG 18
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GO2E7
UT WOS:001153538500001
DA 2024-08-05
ER

PT J
AU Macías, JA
   Borges, CR
AF Macias, Jose A.
   Borges, Clemente R.
TI Monitoring and forecasting usability indicators: A business intelligence
   approach for leveraging user-centered evaluation data
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Usability; User experience; User-centered software development; Human
   -centered organization; Human-computer interaction; Business
   intelligence
ID INFORMATION-TECHNOLOGY; ANALYTICS; DASHBOARD; QUALITY; WEB; ACCEPTANCE
AB Monitoring performance indicators has become a main concern for most organizations today. While much attention has been paid to developing economic, bioinformatics, health, and social media dashboards, little or no attention has been devoted to monitoring and forecasting usability indicators. This can be of interest for analyzing the degree of perceived satisfaction and usability of interactive software products designed or just developed, being also useful as general strategic indicators in human-centered organizations. This paper presents an approach including main measures, Key Performance Indicators, trends, and forecasts to deal with usability information over time and produce new knowledge based on historical data. Also, an instance has been implemented, including data obtained from real software evaluations. Target users have evaluated the approach to validate its suitability, obtaining successful usability results that denote the adequacy of the approach presented.
C1 [Macias, Jose A.] Univ Autonoma Madrid, Comp Engn Dept, Madrid, Spain.
   [Borges, Clemente R.] Deutsch Elektronen Synchrotron DESY Natl Res Ctr, Hamburg, Germany.
   [Macias, Jose A.] Tomas & Valiente 11, Madrid 28049, Spain.
C3 Autonomous University of Madrid
RP Macías, JA (corresponding author), Tomas & Valiente 11, Madrid 28049, Spain.
EM j.macias@uam.es
RI Macias, Jose Antonio/B-5397-2014
OI Macias, Jose Antonio/0000-0001-5071-0076
FU Spanish Research Agency [TED2021-129381B-C21, PID2021-122270OB-I00]
FX This work was partially supported by the Spanish Research Agency [grant
   numbers TED2021-129381B-C21 and PID2021-122270OB-I00] .
CR Ahn J, 2019, J LEARN ANAL, V6, P70, DOI 10.18608/jla.2019.62.5
   Ain N, 2019, DECIS SUPPORT SYST, V125, DOI 10.1016/j.dss.2019.113113
   Alturki R, 2017, Usability Testing of Fitness Mobile Application: Methodology and Quantitative Results, P97, DOI [10.5121/CSIT.2017.71108, DOI 10.5121/CSIT.2017.71108]
   [Anonymous], 2018, Ergonomics of Human-System Interaction-Part 11: Usability: Definitions and Concepts
   Macías JA, 2012, IEEE T SYST MAN CY C, V42, P1365, DOI 10.1109/TSMCC.2012.2187052
   Arias-Hernandez R., 2011, Interactions, V18, P51, DOI DOI 10.1145/1897239.1897249
   Atoum I, 2023, SCI COMPUT PROGRAM, V226, DOI 10.1016/j.scico.2023.102929
   Barone D, 2011, LECT NOTES COMPUT SC, V6998, P448, DOI 10.1007/978-3-642-24606-7_35
   Batziakoudi K., 2020, ECIS
   Beri B., 2013, Int. J. Comput. Appl, V72
   Biduski D, 2020, COMPUT HUM BEHAV, V104, DOI 10.1016/j.chb.2019.106169
   Borges CR, 2014, COMPUT SCI INF SYST, V11, P481, DOI 10.2298/CSIS131130032B
   Brooke J., 1996, SUS-a quick and dirty usability scale, DOI [DOI 10.1201/9781498710411-35, DOI 10.1201/9781498710411]
   Castells P., 2002, Revista Iberoamericana de Inteligencia Artificial, V6, P25
   Cayola L, 2018, INFORM SOFTWARE TECH, V97, P163, DOI 10.1016/j.infsof.2018.01.010
   Chen HC, 2012, MIS QUART, V36, P1165
   Cui WQ, 2019, IEEE ACCESS, V7, P81555, DOI 10.1109/ACCESS.2019.2923736
   Cybulski J.L., 2014, PROC 7 INT SYM VISUA, P212, DOI [10.1145/2636240.2636866, DOI 10.1145/2636240.2636866]
   Cybulski JL, 2015, INT J SOFTW ENG KNOW, V25, P231, DOI 10.1142/S0218194015400082
   Dahmen J, 2019, SENSORS-BASEL, V19, DOI 10.3390/s19051181
   DAVIS FD, 1989, MIS QUART, V13, P319, DOI 10.2307/249008
   Delen D, 2018, J BUS ANAL, V1, P2, DOI 10.1080/2573234X.2018.1507324
   Dowding D, 2019, CIN-COMPUT INFORM NU, V37, P11, DOI 10.1097/CIN.0000000000000484
   Dowding D, 2018, APPL CLIN INFORM, V9, P511, DOI 10.1055/s-0038-1666842
   Eckerson WW., 2010, PERFORMANCE DASHBOAR
   Ehrenmueller-Jensen M., 2020, Self-Service AI With Power BI Desktop: Machine Learning Insights for Business, P53, DOI [10.1007/978-1-4842-6231-3_3, DOI 10.1007/978-1-4842-6231-3_3]
   Few S., 2006, Information Dashboard Design
   Finstad K, 2010, INTERACT COMPUT, V22, P323, DOI 10.1016/j.intcom.2010.04.004
   Fisher Danyel, 2012, Interactions, V19, P50, DOI 10.1145/2168931.2168943
   Fränti P, 2018, APPL INTELL, V48, P4743, DOI 10.1007/s10489-018-1238-7
   Goodfellow J., 2014, arXiv, DOI DOI 10.48550/ARXIV.1406.2661
   Goodhue DL, 1995, MANAGE SCI, V41, P1827, DOI 10.1287/mnsc.41.12.1827
   Graham L., 2008, J. Humanit. Soc. Sci., V2
   Harrin E, 2008, Comput. J., V51, P743, DOI [10.1093/comjnl/bxm114, DOI 10.1093/COMJNL/BXM114]
   Hernando R, 2023, BEHAV INFORM TECHNOL, V42, P360, DOI 10.1080/0144929X.2021.2022209
   Hinderks A, 2019, COMPUT STAND INTER, V65, P38, DOI 10.1016/j.csi.2019.01.007
   Hvannberg ET, 2007, INTERACT COMPUT, V19, P225, DOI 10.1016/j.intcom.2006.10.001
   ISO, 2016, ISO 27500:2016
   Kohavi R, 2002, COMMUN ACM, V45, P45, DOI 10.1145/545151.545177
   Kokoç M, 2021, BEHAV INFORM TECHNOL, V40, P161, DOI 10.1080/0144929X.2019.1680731
   Kuusela H, 2000, AM J PSYCHOL, V113, P387, DOI 10.2307/1423365
   Lund A. M., 2001, Usability Interface, V8, P3, DOI DOI 10.1177/1078087402250360
   Macias J.A., 2001, C HUM FACT COMP SYST, P349, DOI [10.1145/634067.634273, DOI 10.1145/634067.634273]
   Macias J.A., 2001, P 10 INT C HUM COMP
   Macías JA, 2001, COMPUTERS AND EDUCATION: TOWARDS AN INTERCONNECTED SOCIETY, P235
   Macías JA, 2002, SIXTH INTERNATIONAL CONFERENCE ON INFORMATION VISUALISATION, PROCEEDINGS, P535, DOI 10.1109/IV.2002.1028826
   Macías JA, 2008, WORLD WIDE WEB, V11, P253, DOI 10.1007/s11280-008-0043-3
   Macías JA, 2021, WORLD WIDE WEB, V24, P2099, DOI 10.1007/s11280-021-00950-y
   Macias Jose A., 2009, New Trends on Human-Computer Interaction, DOI [10.1007/978-1-84882-352-5, DOI 10.1007/978-1-84882-352-5]
   Mahalakshmi G, 2016, 2016 INTERNATIONAL CONFERENCE ON COMPUTING TECHNOLOGIES AND INTELLIGENT DATA ENGINEERING (ICCTIDE'16)
   Marr B., 2012, Key performance indicators (KPI): The 75 measures every manager needs to know
   Martín M, 2023, INT J HUM-COMPUT INT, V39, P183, DOI 10.1080/10447318.2022.2041885
   Martinez William, 2018, JMIR Hum Factors, V5, pe26, DOI 10.2196/humanfactors.9569
   MeasuringU, 2023, About Us
   Meiyuzi Gao, 2018, Proceedings of the Human Factors and Ergonomics Society Annual Meeting, V62, P1414, DOI 10.1177/1541931218621322
   Microsoft, 2021, Microsoft Power BI
   Mitchell J.J., 2013, New Directions for Student Services, P71, DOI DOI 10.1002/SS.20050
   Negash S., 2004, COMMUN ASSOC INF SYS, V13, P177, DOI [10.17705/1CAIS.01315, DOI 10.17705/1CAIS.01315]
   Nielsen J., 1990, SIGCHI Bulletin, P249
   NIELSEN J, 1993, HUMAN FACTORS IN COMPUTING SYSTEMS, P206
   Nielsen J, 1993, Usability Engineering, V1
   Nielsen J., 2012, Thinking Aloud: The #1 Usability Tool
   Nielsen Jakob, 2005, 10 Usability Heuristics for User Interface Design
   Pappas Lisa, 2011, Human Interface and the Management of Information. Interacting with Information. Proceedings Symposium on Human Interface 2011. Held as Part of HCI International 2011, P249, DOI 10.1007/978-3-642-21793-7_29
   Parmenter D., 2015, Key Performance Indicators-Developing, Implementing, and Using Winning KPIs
   Pastushenko O, 2021, EXPERT SYST, V38, DOI 10.1111/exsy.12434
   Patki N, 2016, PROCEEDINGS OF 3RD IEEE/ACM INTERNATIONAL CONFERENCE ON DATA SCIENCE AND ADVANCED ANALYTICS, (DSAA 2016), P399, DOI 10.1109/DSAA.2016.49
   PostgreSQL, 2021, About Us
   Quintal C, 2021, UNIVERSAL ACCESS INF, V20, P203, DOI 10.1007/s10209-020-00726-7
   Rojas LA, 2019, J SYST SOFTWARE, V158, DOI 10.1016/j.jss.2019.110417
   Sánchez E, 2019, REQUIR ENG, V24, P181, DOI 10.1007/s00766-017-0282-x
   Sauro J, 2012, QUANTIFYING THE USER EXPERIENCE: PRACTICAL STATISTICS FOR USER RESEARCH, P1
   Sauro J., 2005, P C HUMAN FACTORS CO, P401, DOI [10.1145/1054972.1055028, DOI 10.1145/1054972.1055028]
   Schall MC, 2017, CIN-COMPUT INFORM NU, V35, P281, DOI 10.1097/CIN.0000000000000325
   Scholtz J, 2006, IEEE CONF VIS ANAL, P145
   SelectHub, 2021, Top Business Intelligence Software 2021
   Smyl S, 2020, INT J FORECASTING, V36, P75, DOI 10.1016/j.ijforecast.2019.03.017
   Tang FC, 2017, BEHAV INFORM TECHNOL, V36, P1125, DOI 10.1080/0144929X.2017.1355014
   Tullis T, 2013, Measuring the User Experience, Second Edition: Collecting, Analyzing, and Presenting Usability Metrics
   Vaishnavi V., 2019, Design Science Research in Information Systems
   Vassiliadis P, 2009, INT J DATA WAREHOUS, V5, P1, DOI 10.4018/jdwm.2009070101
   Venkatesh V, 2003, MIS QUART, V27, P425, DOI 10.2307/30036540
   Veral R, 2019, INT J HUM-COMPUT ST, V122, P184, DOI 10.1016/j.ijhcs.2018.09.012
   Wieder B, 2015, PROCEDIA COMPUT SCI, V64, P1163, DOI 10.1016/j.procs.2015.08.599
   Wu DTY, 2019, APPL CLIN INFORM, V10, P859, DOI 10.1055/s-0039-1698466
   Xu L, 2019, Arxiv, DOI [arXiv:1907.00503, 10.48550/arXiv.1907.00503, DOI 10.48550/ARXIV.1907.00503]
   Young GW, 2020, INT J HUM-COMPUT ST, V140, DOI 10.1016/j.ijhcs.2020.102429
NR 87
TC 0
Z9 0
U1 3
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAY
PY 2024
VL 234
AR 103077
DI 10.1016/j.scico.2023.103077
EA JAN 2024
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GR0W2
UT WOS:001154289800001
OA Green Published, hybrid
DA 2024-08-05
ER

EF