FN Clarivate Analytics Web of Science
VR 1.0
PT J
AU Pirkelbauer, P
   Parent, S
   Marcus, M
   Stroustrup, B
AF Pirkelbauer, Peter
   Parent, Sean
   Marcus, Mat
   Stroustrup, Bjarne
TI Dynamic algorithm selection for runtime concepts
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 23rd Annual ACM Symposium on Applied Computing
CY MAR 16-20, 2008
CL Fortaleza, BRAZIL
SP ACM SIGAC, Univ Fortaleza, Federal Univ Ceara
DE Generic programming; Runtime polymorphism; C plus; Standard template
   library
ID C++
AB A key benefit of generic programming is its support for producing modules with clean separation. In particular, generic algorithms are written to work with a wide variety of types without requiring modifications to them. The Runtime concept idiom extends this support by allowing unmodified concrete types to behave in a runtime polymorphic manner. In this paper, we describe one implementation of the runtime concept idiom, in the domain of the C++ standard template library (STL). We complement the runtime concept idiom with an algorithm library that considers both type and concept information to maximize performance when selecting algorithm implementations. We present two implementations, one in ISO C++ and one using an experimental language extension. We use our implementations to describe and measure the performance of runtime-polymorphic analogs of several STL algorithms. The tests demonstrate the effects of different compile-time vs. run-time algorithm selection choices. (C) 2009 Elsevier B.V. All rights reserved.
C1 [Pirkelbauer, Peter; Stroustrup, Bjarne] Texas A&M Univ, College Stn, TX 77843 USA.
   [Parent, Sean] Adobe Syst Inc, San Jose, CA USA.
C3 Texas A&M University System; Texas A&M University College Station; Adobe
   Systems Inc.
RP Pirkelbauer, P (corresponding author), Texas A&M Univ, TAMU 3112, College Stn, TX 77843 USA.
EM peter.pirkelbauer@tamu.edu; sparent@adobe.com; mmarcus@emarcus.org;
   bs@cs.tamu.edu
RI Pirkelbauer, Peter/AAQ-2582-2020
OI Pirkelbauer, Peter/0000-0003-4185-5008
CR Abrahams D, 2004, C++ template metaprogramming: concepts, tools, and techniques from Boost and beyond
   *AD SYST INC, 2005, AD SOURC LIB
   ALEXANDRESCU A, 2001, AW C DEPTH SERIES
   *AM NAT STAND I, 1998, 14882 ISOIEC AM NAT
   AN P, 2001, LCPC 01
   [Anonymous], 2008, Boost c++ libraries
   Austern MatthewH., 1998, Generic programming and the STL: Using and extending the C++ Standard Template Library
   BECKER P, 2008, STANDARD PR IN PRESS
   BECKER T, 2007, MULTIPARADIGM PROGRA
   Bettini L, 2006, SOFTWARE PRACT EXPER, V36, P581, DOI 10.1002/spe.709
   BOURDEV L, 2006, WORKSH LIB CENTR SOF
   Cleeland C., 1997, Pattern Languages of Program Design
   DEHNERT JC, 2000, INT SEM GEN PROGR
   *ED DES GROUP, 2008, C FRONT END
   Gamma E., 1994, Design patterns: Elements of reusable object-oriented software
   GREGOR D, 2006, OOPSLA 06
   JARVI J, 2007, GPCE 07
   JARVI J, 2006, PLDI 06
   MARCUS M, 2007, MULTIPARADIGM PROGRA
   PARENT S, 2007, CONCEPT BASED RUNTIM
   PARENT S, 2005, OBJECTS UNDERSTANDIN
   PIRKELBAUER P, 2008, SAC 08
   PIRKELBAUER P, 2007, GPCE 07
   Shalit A., 1996, The Dylan reference manual: the definitive guide to the new object-oriented dynamic language
   Shopyrin D, 2006, IEEE SOFTWARE, V23, P62, DOI 10.1109/MS.2006.77
   SMARAGDAKIS Y, 2001, GCSE 00
   Smith Julian., 2003, Draft proposal for adding Multimethods to C++
   STROUSTRUP B, 2005, LNCS, V4339
   Stroustrup B., 1994, The Design and Evolution of C++
   Stroustrup Bjarne., 2007, HOPL 3, p4
   VELDHUIZEN TL, 1998, ISCOPE 98
NR 31
TC 1
Z9 2
U1 0
U2 1
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 1
PY 2010
VL 75
IS 9
SI SI
BP 773
EP 786
DI 10.1016/j.scico.2009.04.002
PG 14
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 627NG
UT WOS:000280045900003
DA 2024-07-18
ER

PT J
AU Ortin, F
   Redondo, JM
   Perez-Schofield, JBG
AF Ortin, Francisco
   Redondo, Jose Manuel
   Garcia Perez-Schofield, J. Baltasar
TI Efficient virtual machine support of runtime structural reflection
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Structural reflection; Dynamically typed languages; JIT compilation;
   SSCLI; Virtual machine; Prototype-based object-oriented model
AB Increasing trends towards adaptive, distributed, generative and pervasive software have made object-oriented dynamically typed languages become increasingly popular. These languages offer dynamic software evolution by means of reflection, facilitating the development of dynamic systems. Unfortunately, this dynamism commonly imposes a runtime performance penalty. In this paper, we describe how to extend a production JIT-compiler virtual machine to support runtime object-oriented structural reflection offered by many dynamic languages. Our approach improves runtime performance of dynamic languages running on statically typed virtual machines. At the same time, existing statically typed languages are still supported by the virtual machine.
   We have extended the NET platform with runtime structural reflection adding prototype-based object-oriented semantics to the statically typed class-based model of NET, supporting both kinds of programming languages. The assessment of runtime performance and memory consumption has revealed that a direct support of structural reflection in a production JIT-based virtual machine designed for statically typed languages provides a significant performance improvement for dynamically typed languages. (C) 2009 Elsevier B.V. All rights reserved.
C1 [Ortin, Francisco; Redondo, Jose Manuel] Univ Oviedo, Dept Comp Sci, Oviedo 33007, Spain.
   [Garcia Perez-Schofield, J. Baltasar] Univ Vigo, Dept Comp Sci, Orense 32004, Spain.
C3 University of Oviedo; Universidade de Vigo
RP Ortin, F (corresponding author), Univ Oviedo, Dept Comp Sci, Calvo Sotelo S-N, Oviedo 33007, Spain.
EM ortin@lsi.uniovi.es; redondojose@uniovi.es; jgarcia@uvigo.es
RI Garcia Perez-schofield, Baltasar/S-1171-2017; López, José Manuel
   Redondo/K-9605-2014; Ortin, Francisco/K-9272-2014
OI Garcia Perez-schofield, Baltasar/0000-0002-0603-2842; López, José Manuel
   Redondo/0000-0002-0939-0186; Ortin, Francisco/0000-0003-1199-8649
CR ABADI M, 1991, ACM T PROGR LANG SYS, V13, P237, DOI 10.1145/103135.103138
   ABADI M, 1994, 120 SRC
   ABADY M, 1998, THEORY OBJECTS
   Ancona M., 2004, P 2004 ACM S APPL CO, P1503
   [Anonymous], PLDI 91
   Beck Kent., 1994, Simple Smalltalk Testing: With Patterns
   Bobrow D., 1993, Object-Oriented Programming-The CLOS Perspective
   BOLLERT K, 1999, EUR C OBJ OR PROGR E
   BRACHA G, 1993, SIGPLAN NOTICES, V28, P215, DOI 10.1145/167962.165893
   BRUCKSCHLEGEL T, 2005, MICROBENCHMARKING C
   Bull JM, 2000, CONCURRENCY-PRACT EX, V12, P375, DOI 10.1002/1096-9128(200005)12:6<375::AID-CPE480>3.0.CO;2-M
   Cazzola W, 2004, J OBJECT TECHNOLOGY, V3, P117
   CHAMBERS C, 1989, P ACM C PROGR LANG D
   Chiba S, 2000, LECT NOTES COMPUT SC, V1850, P313
   Crane D., 2005, AJAX ACTION
   Dahm M., 1999, JIT'99. Java-Information-Tag 1999, P267
   Deutsch PeterL., 1984, Proceedings of the 11th ACM SIGACT-SIGPLAN symposium on Principles of Programming Languages, POPL '84, P297, DOI [10.1145/800017.800542, DOI 10.1145/800017.800542]
   Diehl S, 2000, FUTURE GENER COMP SY, V16, P739, DOI 10.1016/S0167-739X(99)00088-6
   *DOTGNU, DOTGNU PROJ GNU FREE
   Ducasse S, 2006, ACM T PROGR LANG SYS, V28, P331, DOI 10.1145/1119479.1119483
   GOLM M, 1997, LECT NOTES COMPUTER, V1357, P507
   HARPER R, 1995, ACM SIGPLAN NOTI JAN, P130
   Hirsch P., 2005, Strategic Organization, V3, P229, DOI 10.1177/1476127005052881
   HOLZLE U, 1994, CSTR941520 STANF U
   HUGUNIN J, 2007, MICROSOFT MIX 2007
   Ierusalimschy R, 1996, SOFTWARE PRACT EXPER, V26, P635, DOI 10.1002/(SICI)1097-024X(199606)26:6<635::AID-SPE26>3.0.CO;2-P
   *JSR, 292 JSR
   *JSR, 223 JSR
   *JSR, 241 JSR
   Kiczales G., 1991, The Art of the Metaobject Protocol
   KLEINODER J, 1996, P INT WORKSH OBJ OR, P420
   Kniesel G., 2004, Research Reports on Mathematical and Computing Sciences Series C (Computer Science), P111
   KRIL P, 2008, INFOWORLD       0131
   KRINTZ CA, COLLECTION PHOENIX C
   Landi W, 2004, ACM SIGPLAN NOTICES, V39, P473, DOI 10.1145/989393.989440
   MATSUMOTO Y, 2003, 3 INT RUB C
   Meijer E., 2004, P OOPSLA WORKSH REV
   Meijer Erik, 2000, TECHNICAL OVERVIEW C
   MILNER R, 1978, J COMPUT SYST SCI, V17, P348, DOI 10.1016/0022-0000(78)90014-4
   Moors A, 2008, ACM SIGPLAN NOTICES, V43, P423, DOI 10.1145/1449955.1449798
   MULET P, 1993, INT S OBJ TECHN ADV, P128
   Nierstrasz O, 2005, LECT NOTES COMPUT SC, V3628, P1, DOI 10.1007/11550679_1
   Ogawa H, 2000, LECT NOTES COMPUT SC, V1850, P362
   PEREZSCHOFIELD JBG, 2008, J VISUAL LANG COMPUT, V19, P273
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Rigo Armin., 2004, P 2004 ACM SIGPLAN W, P15, DOI DOI 10.1145/1014007.1014010
   RODDICK JF, 1995, INFORM SOFTWARE TECH, V37, P383, DOI 10.1016/0950-5849(95)91494-K
   *RUB GARD, ASP OR RUB
   Serrano M, 1999, LECT NOTES COMPUT SC, V1628, P391
   Shalit A., 1996, The Dylan reference manual: the definitive guide to the new object-oriented dynamic language
   Siek J, 2007, LECT NOTES COMPUT SC, V4609, P2
   SINGER J, 2003, ACM P 2 INT C PRINC, P167
   SKARRA AH, 1987, RES DIRECTIONS OBJEC
   Stutz D., 2003, SHARED SOURCE CLI ES
   *SUN MICR OPENJDK, DAV MACH MULT REN JA
   TAN L, 1989, P 1 INT C DED OBJ OR
   Tanter É, 2003, ACM SIGPLAN NOTICES, V38, P27, DOI 10.1145/949343.949309
   Thomas D., 2005, AGILE WEB DEV RAILS
   Thomas Dave., 2004, PROGRAMMING RUBY, Vfirst
   UDELL J, 2003, INFOWORLD        AUG
   UNGAR D, 1987, SIGPLAN NOTICES, V22, P227, DOI 10.1145/38807.38828
   UNGAR D, 1991, LISP SYMBOLIC COMPUT
   Van Rossum G, 2003, Python Language Reference Manual
   VANDERPERREN W, 2004, P DYN ASP WORKSH DAW
   WEICKER RP, 1984, COMMUN ACM, V27, P1013, DOI 10.1145/358274.358283
   Welch I, 2000, LECT NOTES COMPUT SC, V1826, P155
   [No title captured]
   [No title captured]
   [No title captured]
   B ZORN CLI BENCHMARK
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
NR 75
TC 27
Z9 29
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD AUG 15
PY 2009
VL 74
IS 10
BP 836
EP 860
DI 10.1016/j.scico.2009.04.001
PG 25
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 482WF
UT WOS:000268920000003
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Zhang, LL
   Krintz, C
AF Zhang, Lingli
   Krintz, Chandra
TI As-if-serial exception handling semantics for Java futures
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Java; Exception handling; Concurrent programming; Futures
ID RESOLUTION
AB Exception handling enables programmers to specify the behavior of a program when an exceptional event occurs at runtime. Exception handling, thus, facilitates software fault tolerance and the production of reliable and robust software systems. With the recent emergence of multi-processor systems and parallel programming constructs, techniques are needed that provide exception handling support in these environments that are intuitive and easy to use. Unfortunately, extant semantics of exception handling for concurrent settings is significantly more complex to reason about than their serial counterparts.
   In this paper, we investigate a similarly intuitive semantics for exception handling for the future parallel programming construct in Java. Futures are used by programmers to identify potentially asynchronous computations and to introduce parallelism into sequential programs. The intent of futures is to provide some performance benefits through the use of method-level concurrency while maintaining as-if-serial semantics that novice programmers can easily understand - the semantics of a program with futures is the same as that for an equivalent serial version of the program. We extend this model to provide asif-serial exception handling semantics. Using this model our runtime delivers exceptions to the same point it would deliver them if the program was executed sequentially. We present the design and implementation of our approach and evaluate its efficiency using an open source Java virtual machine. (C) 2009 Elsevier B.V. All rights reserved.
C1 [Krintz, Chandra] Univ Calif Santa Barbara, Dept Comp Sci, Santa Barbara, CA 93106 USA.
   [Zhang, Lingli] Microsoft Corp, Redmond, WA 98052 USA.
C3 University of California System; University of California Santa Barbara;
   Microsoft
RP Krintz, C (corresponding author), Univ Calif Santa Barbara, Dept Comp Sci, Santa Barbara, CA 93106 USA.
EM Lingli.Zhang@microsoft.com; ckrintz@cs.ucsb.edu
FU Microsoft and NSF [CCF-0444412, CNS-0546737]
FX We sincerely thank the reviewers of this article for providing use with
   very detailed and thoughtful suggestions for its improvement. This work
   was funded in part by Microsoft and NSF grants CCF-0444412 and
   CNS-0546737.
CR ALLAN E, 2005, FORTRESS LANGUAGE SP
   ALLAN E, 2006, FORTRESS LANGUAGE SP
   [Anonymous], JAVA REMOTE METHOD I
   ARNOLD M, 2000, ACM C OBJ OR PROGR S
   Blackburn StephenM., 2004, Proceedings of the 4th International Symposium on Memory Management, ISMM '04, P143, DOI DOI 10.1145/1029873.1029891
   BLUMOFE R, 1995, ACM SIGPL PRINC PRAC, P207
   CALLAHAN D, 1990, 2 WORKSH LANG COMP P, P95
   CAMPBELL RH, 1986, IEEE T SOFTWARE ENG, V12, P811, DOI 10.1109/TSE.1986.6312984
   Chamberlain BL, 2007, INT J HIGH PERFORM C, V21, P291, DOI 10.1177/1094342007078442
   CHARLES P, 2005, ACM C OBJ OR PROGR S, P519
   CRISTIAN F, 1982, IEEE T COMPUT, V31, P531, DOI 10.1109/TC.1982.1676035
   DANAHER J, 2005, THESIS MIT
   Ellis T.M. R., 1994, FORTRAN 90 PROGRAMMI
   Frigo M, 1998, ACM SIGPLAN NOTICES, V33, P212, DOI 10.1145/277652.277725
   Gosling J., 2000, The Java Language Specification
   GRIMSHAW AS, 1993, COMPUTER, V26, P39, DOI 10.1109/2.211896
   HALSTEAD RH, 1985, ACM T PROGR LANG SYS, V7, P501, DOI 10.1145/4472.4478
   HILL GW, 1970, COMMUN ACM, V13, P617, DOI 10.1145/355598.362775
   *IBM, IBM JIK RES VIRT MAC
   *INT, 1995, 86521995E ISO IEC IN
   ISSARNY V, 1993, J OBJECT-ORIENT PROG, V6, P29
   *JSR, 166 JSR
   KRISHNAMURTHY A, 1993, ACM IEEE C SUP, P262
   Lea Doug, 2000, JAVA, P36
   LEE I, 2005, THESIS MIT
   LISKOV BH, 1979, IEEE T SOFTWARE ENG, V5, P546, DOI 10.1109/TSE.1979.230191
   LOMET DB, 1977, ACM C LANG DES REL S, P128
   Meyer B., 1992, Eiffel: The Language
   MOHR E, 1991, IEEE T PARALL DISTR, V2, P264, DOI 10.1109/71.86103
   Randell B., 1975, SIGPLAN Notices, V10, P437, DOI 10.1145/390016.808467
   Romanovsky A, 1996, INT CON DISTR COMP S, P545, DOI 10.1109/ICDCS.1996.508004
   Stroustrup B., 1991, C PROGRAMMING LANGUA, VSecond
   Tazuneki S, 2000, SEVENTH INTERNATIONAL CONFERENCE ON PARALLEL AND DISTRIBUTED SYSTEMS: WORKSHOPS, PROCEEDINGS, P75, DOI 10.1109/PADSW.2000.884518
   Van Nieuwpoort RV, 2005, SCALABLE COMPUT-PRAC, V6, P19
   Welc A, 2005, ACM SIGPLAN NOTICES, V40, P439, DOI 10.1145/1103845.1094845
   Xu J, 1998, INT CON DISTR COMP S, P12, DOI 10.1109/ICDCS.1998.679465
   Xu J, 2000, IEEE T PARALL DISTR, V11, P1019, DOI 10.1109/71.888642
   ZHANG L, 2007, INT C PAR ARCH COMP
   ZHANG L, 2006, INT C PAR DISTR COMP
   ZHANG L, 2007, INT C PRINC PRACT PR
NR 40
TC 2
Z9 2
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR 1
PY 2009
VL 74
IS 5-6
SI SI
BP 314
EP 332
DI 10.1016/j.scico.2009.01.006
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 436CT
UT WOS:000265390900005
DA 2024-07-18
ER

PT J
AU Kourie, DG
   Obiedkov, S
   Watson, BW
   van der Merwe, D
AF Kourie, Derrick G.
   Obiedkov, Sergei
   Watson, Bruce W.
   van der Merwe, Dean
TI An incremental algorithm to construct a lattice of set intersections
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Concept lattice; Closure system; incremental algorithm; Correctness by
   construction
ID FORMAL CONCEPT ANALYSIS; GALOIS LATTICES
AB An incremental algorithm to construct a lattice from a collection of sets is derived, refined, analyzed, and related to a similar previously published algorithm for constructing concept lattices. The lattice constructed by the algorithm is the one obtained by closing the collection of sets with respect to set intersection. The analysis explains the empirical efficiency of the related concept lattice construction algorithm that had been observed in previous studies. The derivation highlights the effectiveness of a correctness-by-construction approach to algorithm development. (c) 2008 Elsevier B.V. All rights reserved.
C1 [Kourie, Derrick G.; Obiedkov, Sergei; Watson, Bruce W.; van der Merwe, Dean] Univ Pretoria, Dept Comp Sci, ZA-0002 Pretoria, South Africa.
   [Obiedkov, Sergei] Higher Sch Econ, Dept Appl Math, Moscow, Russia.
C3 University of Pretoria; HSE University (National Research University
   Higher School of Economics)
RP Kourie, DG (corresponding author), Univ Pretoria, Dept Comp Sci, ZA-0002 Pretoria, South Africa.
EM dkourie@cs.up.ac.za; sergei.obj@gmail.com; watson@bruce-watson.com;
   dean.van.der.merwe@sap.com
RI Obiedkov, Sergei/GYJ-8277-2022; Obiedkov, Sergei/D-9642-2014
OI Obiedkov, Sergei/0000-0003-1497-4001
CR [Anonymous], 1984, 831 FB4 TH DARMST
   AREVALO G, 2003, P LMO 03, P47
   Birkhoff G., 1973, Lattice Theory
   BORDAT JP, 1978, MATH SCI HUMAINES, V23, P243
   Carpineto C, 1996, MACH LEARN, V24, P95
   Carpineto C., 2004, CONCEPT DATA ANAL TH, V1st, P155
   Davey B. A., 2002, INTRO LATTICES ORDER, V2nd, DOI DOI 10.1017/CBO9780511809088
   Dekel U, 2002, APPL CONCEPT LATTICE
   FERRE S, 2003, USING CONCEPTUAL STR, P171
   FREEMAN LC, 1993, SOCIOL METHODOL, V23, P127, DOI 10.2307/271008
   Ganter B, 1999, Formal concept analysis: Mathematical foundations
   GODIN R, 1995, COMPUT INTELL-US, V11, P246, DOI 10.1111/j.1467-8640.1995.tb00031.x
   GODIN R, 1993, P 8 ANN C OBJ OR PRO, P394
   Grigoriev PA, 2003, LECT NOTES ARTIF INT, V2843, P311
   HUCHARD M, 2000, THEORETICAL INFORMAT, V34, P521
   Kuznetsov SO, 2004, LECT NOTES ARTIF INT, V2961, P287
   Kuznetsov SO, 2002, J EXP THEOR ARTIF IN, V14, P189, DOI 10.1080/09528130210164170
   Lindig C, 1997, PROC INT CONF SOFTW, P349, DOI 10.1145/253228.253354
   Newman D., 1998, UCI REPOSITORY MACHI
   Norris EugeneM., 1978, REV ROUMAINE MATH MA, V23, P243
   Nourine L, 1999, INFORM PROCESS LETT, V71, P199, DOI 10.1016/S0020-0190(99)00108-8
   Priss U, 2005, LECT NOTES ARTIF INT, V3626, P149
   Roth C., 2006, P INT C CONC LATT TH, P205
   Snelting G., 1998, Software Engineering Notes, V23, P99, DOI 10.1145/291252.288273
   Stumme G., 2001, P INT JOINT C ARTIFI, P225
   Tilley T, 2005, LECT NOTES ARTIF INT, V3626, P250
   Valtchev P, 2004, LECT NOTES ARTIF INT, V2961, P352
   Valtchev P, 2002, J EXP THEOR ARTIF IN, V14, P115, DOI 10.1080/09528130210164198
   Valtchev P, 2001, LECT NOTES ARTIF INT, V2120, P290
   Van der Merwe FJ, 2002, J EXP THEOR ARTIF IN, V14, P229, DOI 10.1080/09528130210164215
   VANDERMERWE FJ, 2003, THESIS U PRETORIA
   VANDERMERWE FJ, 2004, LNCS, V2961, P411
   WIILE R, 1982, ORDERED SETS, P445
NR 33
TC 38
Z9 44
U1 0
U2 7
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 1
PY 2009
VL 74
IS 3
BP 128
EP 142
DI 10.1016/j.scico.2008.09.015
PG 15
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 402NY
UT WOS:000263021600003
OA hybrid
DA 2024-07-18
ER

PT J
AU Tratt, L
AF Tratt, Laurence
TI Model transformations in MT
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT Model Transformation Track held at the 21st Annual ACM Symposium on
   Applied Computing
CY APR 23-27, 2006
CL Dijon, FRANCE
SP ACM
DE model transformations; MT; converge; DSL
AB Model transformations are recognised as a vital aspect of Model Driven Development, but current approaches cover only a small part of the possible spectrum. In this paper I present the NIT model transformation which shows how a QVT-like language can be extended with novel pattern matching constructs, how tracing information can be automatically constructed and visualized, and how the transformed model is pruned of extraneous elements. As MT is implemented as a DSL within the Converge language, this paper also demonstrates how a general purpose language can be embedded in a model transformation language, and how DSL development can aid experimentation and exploration of new parts of the model transformation spectrum. (c) 2007 Elsevier B.V. All rights reserved.
C1 [Tratt, Laurence] Kings Coll London, Dept Comp Sci, London WC2R 2LS, England.
C3 University of London; King's College London
RP Tratt, L (corresponding author), Kings Coll London, Dept Comp Sci, London WC2R 2LS, England.
EM laurie@tratt.net
RI Tratt, Laurence/A-8594-2013
OI Tratt, Laurence/0000-0002-5258-3805
CR AGRAWAL A, 2006, DESIGN LANGUAGE MODE, V5
   Balogh A., 2006, Applied Computing 2006. 21st Annual ACM Symposium on Applied Computing, P1280, DOI 10.1145/1141277.1141575
   Bezivin J., 2003, 2 OOPSLA WORKSH GEN
   Bezivin J., 2002, GENERATIVE TECHNIQUE
   BOCKER H, 1990, P ACM C OBJ OR PROGR, P89
   Clark T., 2004, APPL METAMODELLING F
   Czarnecki K, 2006, IBM SYST J, V45, P621, DOI 10.1147/sj.453.0621
   *DSTC IBM CBOP, 2003, AD20030803 DSTC IBM
   Egyed A, 2001, PROC INT CONF SOFTW, P123, DOI 10.1109/ICSE.2001.919087
   GARDNER T, 2003, AD030802 OMG
   Gerber A, 2002, LECT NOTES COMPUT SC, V2505, P90
   GRISWOLD RE, 1996, PEER PEER COMMUNICAT
   Jones Richard., 1999, GARBAGE COLLECTION A
   Jones S.Peyton., 2003, Haskell 98 Languages and Libraries: The Revised Report
   Jouault F, 2006, LECT NOTES COMPUT SC, V3844, P128
   KALNINS A, 2005, MODEL TRANSFORMATION
   Konigs A., 2005, MODEL TRANSFORMATION
   MURZEK M, 2005, MODEL TRANSFORMATION
   Nickel U., 2000, Proceedings of the 2000 International Conference on Software Engineering. ICSE 2000 the New Millennium, P742, DOI 10.1109/ICSE.2000.870485
   *OBJ MAN GROUP, 2005, FORMAL050505 OBJ MAN
   *OMG, 2003, AD030327 OMG
   *QVT PARTN, 2003, AD030808 OMG QVT PAR
   Sánchez Cuadrado J, 2006, LECT NOTES COMPUT SC, V4066, P158
   Schurr Andy., 1999, HDB GRAPH GRAMMARS C, P487
   Sheard T., 2002, P HASK WORKSH 2002
   Tratt L., 2005, Software and Systems Modeling, V4, P112, DOI [DOI 10.1007/S10270-004-0070-1, 10.1007/s10270-004-0070-1]
   TRATT L, 2005, TR0502 DEP COMP SCI
   TRATT L, P DYN LANG S OCT 200, P49
   TRATT L, 2006, P ACM S APPL COMP AP, P1296
   Tratt L., 2005, TR0501 DEP COMP SCI
   VANROSSUM G, PYTHON 2 3 REFERENCE
NR 31
TC 2
Z9 2
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 1
PY 2007
VL 68
IS 3
BP 196
EP 213
DI 10.1016/j.scico.2007.05.003
PG 18
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 243BZ
UT WOS:000251771200006
DA 2024-07-18
ER

PT J
AU Martin, CE
   Curtis, SA
   Rewitzky, I
AF Martin, C. E.
   Curtis, S. A.
   Rewitzky, I.
TI Modelling angelic and demonic nondeterminism with multirelations
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 7th International Conference on Mathematics of Program Construction
CY JUL 12-14, 2004
CL Stirling, SCOTLAND
SP Cornell Univ, Univ Stirling, Formal Aspects Comp Sci, Specialist Grp
DE multirelation; predicate transformer; agent; strongest postcondition;
   angelic nondeterminism; demonic nondeterminism; resource sharing
AB This paper presents an introduction to a calculus of binary multirelations, which can model both angelic and demonic kinds of non-determinism. The isomorphism between up-closed multirelations and monotonic predicate transformers allows a different view of program transformation, and program transformation calculations using multirelations are easier to perform in some circumstances. multirelations are illustrated by modelling both kinds of nondeterministic behaviour in games and resource-sharing protocols. (c) 2006 Elsevier B.V. All rights reserved.
C1 Oxford Brookes Univ, Dept Comp, Oxford OX3 0BP, England.
   Univ Stellenbosch, Dept Math, ZA-7600 Stellenbosch, South Africa.
C3 Oxford Brookes University; Stellenbosch University
RP Martin, CE (corresponding author), Oxford Brookes Univ, Dept Comp, Oxford OX3 0BP, England.
EM cemartin@brookes.ac.uk
OI Martin, Clare/0000-0002-3147-3746
CR [Anonymous], 1999, COMPUTATIONAL LOGIC, DOI DOI 10.1007/978-3-642-58622-4
   [Anonymous], 2001, WINNING WAYS YOUR MA
   Back Ralph-Johan, 1998, GRADUATE TEXTS COMPU
   Backhouse R.C, 1993, LNCS, V755, P7
   Barr M., 1990, Category Theory for Computing Science
   Bird Richard, 1997, Algebra of Programming
   BIRD RS, 1990, U TEXAS AUSTIN YEAR, P287
   Davey B. A., 2002, INTRO LATTICES ORDER, V2nd, DOI DOI 10.1017/CBO9780511809088
   DAWSON CB, 1997, COLL MATH J, V28, P82
   DEMOOR O, 1992, INFORM PROCESS LETT, V43, P113, DOI 10.1016/0020-0190(92)90001-C
   DIJKSTRA EW, 1990, PREDIATE CALCULUS PR
   HESSELINK WH, 2004, MULTIRELATIONS PREDI
   LYNCH N, 1992, LECT NOTES COMPUT SC, V600, P397, DOI 10.1007/BFb0032002
   Morgan C., 1998, Programming from Specification, VThird
   PAULY M, 2002, PROGRAMMING VERIFYIN
   Rewitzky I, 2003, LECT NOTES COMPUT SC, V2929, P256
   SCHMIDT G, 1988, RELATIONEN GRAFEN
   WARD NTE, 1994, REFINEMENT CALCULUS
NR 18
TC 21
Z9 22
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR 15
PY 2007
VL 65
IS 2
SI SI
BP 140
EP 158
DI 10.1016/j.scico.2006.01.007
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 144YK
UT WOS:000244832300004
DA 2024-07-18
ER

PT J
AU Cachopo, J
   Rito-Silva, A
AF Cachopo, Joao
   Rito-Silva, Antonio
TI Versioned boxes as the basis for memory transactions
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT OOPSLA Workshop on Synchronization and Concurrent in Object-Oriented
   Languages
CY 2005
CL San Diego, CA
DE software transactional memory; transactions; conflict reduction;
   multi-version concurrency control
AB In this paper, we propose the use of Versioned Boxes, which keep a history of values, as the basis for language-level memory transactions. Unlike previous work on software transactional memory, in our proposal read-only transactions never conflict with any other concurrent transaction. This may improve significantly the concurrency on applications which have longer transactions and a high read/write ratio.
   Furthermore, we discuss how we can reduce transaction conflicts by delaying computations and re-executing only parts of a transaction in case of a conflict. We propose two language-level abstractions to support these strategies: the per-transaction boxes and the restartable transactions.
   Finally, we lay out the basis for a more generic model, which better supports fine-grained restartable transactions. The goal of this new model is to generalize the previous two abstractions to reduce conflicts. (c) 2006 Elsevier B.V. All rights reserved.
C1 Univ Tecn Lisboa, INESC ID, P-1000029 Lisbon, Portugal.
C3 Universidade de Lisboa; INESC-ID
RP Cachopo, J (corresponding author), Univ Tecn Lisboa, INESC ID, Rua Alves Redol 9, P-1000029 Lisbon, Portugal.
EM Joao.Cachopo@inesc-id.pt; Rito.Silva@inesc-id.pt
RI Silva, António Rito/O-3911-2019; Cachopo, Joao/C-5540-2008
OI Silva, António Rito/0000-0001-9840-457X; Cachopo,
   Joao/0000-0002-7290-0417
CR BERNSTEIN PA, 1983, ACM T DATABASE SYST, V8, P465, DOI 10.1145/319996.319998
   COPLIEN JO, 1992, ADV CPLUSPLUS PROGRA
   GRAHAM P, 1994, P INT S OBJ OR METH, V858, P313
   Guerraoui Rachid., 2005, P 24 ANN ACM S PRINC
   HARLIHY M, 2003, P 22 ANN ACM S PRINC, P92
   Harris T, 2003, ACM SIGPLAN NOTICES, V38, P388, DOI 10.1145/949343.949340
   Harris T., 2005, P ACM SIGPLAN S PRIN
   Lindholm Tim., 1999, JAVA VIRTUAL MACHINE, V2nd
   MOSS JEB, 2005, WORKSH SYNCHR CONC O
   Reed David P., 1978, THESIS MIT CAMBRIDGE
   REED DP, 1983, ACM T COMPUT SYST, V1, P3, DOI 10.1145/357353.357355
   Reuter A, 1992, T PROCESSING CONCEPT
   Scherer WilliamN., 2005, P 24 ANN ACM S PRINC
   SCHERER WN, 2004, P ACM PODC WORKSH CO
   Shavit N., 1995, Proceedings of the Fourteenth Annual ACM Symposium on Principles of Distributed Computing, P204, DOI 10.1145/224964.224987
NR 15
TC 61
Z9 79
U1 2
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 1
PY 2006
VL 63
IS 2
BP 172
EP 185
DI 10.1016/j.scico.2006.05.009
PG 14
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 103XT
UT WOS:000241921200005
OA Bronze, Green Published
DA 2024-07-18
ER

PT J
AU Moss, JEB
   Hosking, AL
AF Moss, J. Eliot B.
   Hosking, Antony L.
TI Nested transactional memory: Model and architecture sketches
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT OOPSLA Workshop on Synchronization and Concurrent in Object-Oriented
   Languages
CY 2005
CL San Diego, CA
DE nested transactions; transactional memory; closed nesting; open nesting
ID CONCURRENCY
AB We offer a reference model for nested transactions at the level of memory accesses, and sketch possible hardware architecture designs that implement that model. We describe both closed and open nesting. The model is abstract in that it does not relate to hardware, such as caches, but describes memory as seen by each transaction, memory access conflicts, and the effects of commits and aborts. The hardware sketches describe approaches to implementing the model using bounded size caches in a processor with overflows to memory. In addition to a model that will support concurrency within a transaction, we describe a simpler model that we call linear nesting. Linear nesting supports only a single thread of execution in a transaction nest, but may be easier to implement. While we hope that the model is a good target to which to compile transactions from source languages, the mapping from source constructs to nested transactional memory is beyond the scope of the paper. (c) 2006 Elsevier B.V. All rights reserved.
C1 Univ Massachusetts, Dept Comp Sci, Amherst, MA 01003 USA.
   Purdue Univ, Dept Comp Sci, W Lafayette, IN 47907 USA.
C3 University of Massachusetts System; University of Massachusetts Amherst;
   Purdue University System; Purdue University
RP Moss, JEB (corresponding author), Univ Massachusetts, Dept Comp Sci, Amherst, MA 01003 USA.
EM moss@cs.umass.edu; hosking@cs.purdue.edu
RI Hosking, Antony/G-3618-2012
OI Hosking, Antony/0000-0002-4487-6923
CR Ananian CS, 2005, INT S HIGH PERF COMP, P316, DOI 10.1109/HPCA.2005.41
   BEERI C, 1989, J ACM, V36, P230, DOI 10.1145/62044.62046
   CHRYSANTHIS PK, 1994, ACM T DATABASE SYST, V19, P450, DOI 10.1145/185827.185843
   Hammond L, 2004, ACM SIGPLAN NOTICES, V39, P1, DOI 10.1145/1037187.1024395
   HAMMOND L, 2004, P INT S COMP ARCH DE, V32, P102
   HARRIS T, 2003, P ACM C OBJ OR PROGR, V38, P388
   HERLIHY M., 1993, P 20 ANN INT S COMPU, P289, DOI DOI 10.1145/165123.165164.URL
   Jagannathan S, 2004, LECT NOTES COMPUT SC, V2949, P183
   Moss J.E., 1985, NESTED T APPROACH RE
   Moss J. E. B., 1982, Proceedings of the Second Symposium on Reliability in Distributed Software and Database Systems, P33
   Moss J. E. B., 2005, OOPSLA 2005 WORKSH S
   MOSS JEB, 1986, P ACM SIGMOD INT C M, P72
   MOSS JEB, 1981, THESIS MIT CAMBRIDGE
   MOSS JEB, 260 MIT LAB COMP SCI
   Rajwar R, 2005, CONF PROC INT SYMP C, P494, DOI 10.1109/ISCA.2005.54
   Rajwar R, 2001, INT SYMP MICROARCH, P294, DOI 10.1109/MICRO.2001.991127
   Rajwar Ravi., 2002, Proceedings of the 10th International Conference on Architectural Support for Programming Languages and Operating Systems, ASPLOS-X, P5, DOI [10.1145/605397.605399, DOI 10.1145/605397.605399]
   Reuter A, 1993, T PROCESSING CONCEPT
   Shavit N., 1995, Proceedings of the Fourteenth Annual ACM Symposium on Principles of Distributed Computing, P204, DOI 10.1145/224964.224987
   Vitek J, 2004, LECT NOTES COMPUT SC, V2986, P249
   Weikum G., 1992, CONCEPTS APPL MULTIL, P515
   Welc A, 2004, LECT NOTES COMPUT SC, V3086, P519
NR 22
TC 44
Z9 57
U1 1
U2 2
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 1
PY 2006
VL 63
IS 2
BP 186
EP 201
DI 10.1016/j.scico.2006.05.010
PG 16
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 103XT
UT WOS:000241921200006
DA 2024-07-18
ER

PT J
AU Focardi, R
   Lucchi, R
   Zavattaro, G
AF Focardi, Riccardo
   Lucchi, Roberto
   Zavattaro, Gianluigi
TI Secure shared data-space coordination languages: A process algebraic
   survey
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT International Workshop on Security Issues in Coordination Models,
   Languages, and Systems
CY JUN 28-29, 2003
CL Eindhoven, NETHERLANDS
DE coordination models and languages; tuple spaces; security
ID MOBILITY; KLAIM; MODEL; LINDA
AB Shared data-space coordination languages, which provide a means to program interactions between decoupled entities abstracting away from their internal behavior, represent a powerful framework for programming network applications over the Internet and, in general, in open systems where the entities involved are not known a priori. In this context, where programs may run in an untrusted environment, new challenges come into play such as to provide a means to support security. In this paper we outline the most significant security threats emerging in this context and we present a survey, in a process algebraic setting, of the most interesting shared data-space coordination languages. (c) 2006 Elsevier B.V. All rights reserved.
C1 Univ Bologna, Dipartimento Sci Informaz, I-40127 Bologna, Italy.
   Univ Ca Foscari Venezia, Dipartimento Informat, I-30172 Venice, Ve, Italy.
C3 University of Bologna; Universita Ca Foscari Venezia
RP Zavattaro, G (corresponding author), Univ Bologna, Dipartimento Sci Informaz, Mura Anteo Zamboni 7, I-40127 Bologna, Italy.
EM focardi@dsi.unive.it; lucchi@cs.unibo.it; zavattar@cs.unibo.it
RI Focardi, Riccardo/A-8281-2016
OI Focardi, Riccardo/0000-0003-0101-0692
CR BETTINI L, 2003, LECT NOTES COMPUTER, V2604, P175
   Bravetti M, 2005, THEOR COMPUT SCI, V346, P28, DOI 10.1016/j.tcs.2005.08.004
   Bravetti M, 2004, LECT NOTES COMPUT SC, V2949, P55
   BRAVETTI M, 2003, ENTCS
   BUSI N, 2003, P 2003 ACM S APPL CO, P380
   De Nicola R, 1998, IEEE T SOFTWARE ENG, V24, P315, DOI 10.1109/32.685256
   Di Pierro A, 2004, LECT NOTES COMPUT SC, V2949, P119
   GELERNTER D, 1985, ACM T PROGR LANG SYS, V7, P80, DOI 10.1145/2363.2433
   Gorla D, 2003, LECT NOTES COMPUT SC, V2719, P119
   Gorrieri R, 2006, FUND INFORM, V73, P479
   Gosling James, 1996, The Java Language Specification
   HANDOREAN R, 2003, ENTCS
   LUCCHI R, 2004, P ACM S APPL COMP SA, P487
   Murphy AL, 2001, INT CON DISTR COMP S, P524, DOI 10.1109/ICDSC.2001.918983
   OMICINI A, 2003, ENTCS
   Schneier B., 2015, APPL CRYPTOGRAPHY, VSecond
   *SCI COMP ASS, 1995, LIND US GUID REF MAN
   *SUN MICR INC, 2002, JAV SPAC SERV SPEC
   Vitek J, 2003, SCI COMPUT PROGRAM, V46, P163, DOI 10.1016/S0167-6423(02)00090-4
   WYCKOFF P, 1998, IBM SYSTEM J     AUG
NR 20
TC 8
Z9 8
U1 0
U2 0
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV
PY 2006
VL 63
IS 1
BP 3
EP 15
DI 10.1016/j.scico.2005.07.011
PG 13
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 096DD
UT WOS:000241356300002
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Herrmann, CA
   Langhammer, T
AF Herrmann, Christoph A.
   Langhammer, Tobias
TI Combining partial evaluation and staged interpretation in the
   implementation of domain-specific languages
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 1st MetalOCaml Workshop
CY OCT, 2004
CL Vancouver, CANADA
SP Natl Sci Fdn
DE binding-time improvement; compilation; domain-specific languages;
   meta-programming; partial evaluation; staged interpretation
AB We propose a combination of partial evaluation and staged interpretation with MetaOCaml for rapid prototyping of domain-specific languages. Interpretation is an easy way to implement such languages. MetaOCaml can eliminate the overhead of interpretation at run-time, if the interpreter is written in a staged form, i.e., takes the source program separate from the input data in a first stage. Partial evaluation of the source program with values known at compile time can further improve the target code performance. Additional aggressive optimizations are possible due to the absence of general recursion. Algebraic simplifications can even achieve binding-time improvements during the online partial evaluation. Our approach both saves the application programmer completely from binding-time considerations and exploits staged interpretation with MetaOCaml for target code generation.
   The example domain presented in this paper is image processing, in which the domain-specific language permits the specification of convolution matrices, summations, case distinctions and non-local pixel accesses. All expressions known at compile time are simplified and all remaining expressions are turned into MetaOCaml code parts, which are combined to form the compiled application program.
   The example specifications deal with filtering by convolution and iterations in a series of images for wave effects and temperature distribution.
   The experimental results show significant speed-ups if online partial evaluation with algebraic simplifications is used for the elimination of interpretation overhead and optimization of code expressions. (c) 2006 Elsevier B.V. All rights reserved.
C1 Univ Passau, D-94032 Passau, Germany.
   Konrad Zuse Zentrum Informat Tech Berlin ZIB, Dept Comp Sci Res, D-14195 Berlin, Germany.
C3 University of Passau; Zuse Institute Berlin
RP Herrmann, CA (corresponding author), Univ Passau, Innstr 33,Room 128, D-94032 Passau, Germany.
EM herrmann@uni-passau.de
CR ANDERSEN PH, 1996, SOFTWARE ENG SCI COM, P78
   [Anonymous], 1993, Partial Evaluation and Automatic Program Generation
   Beckmann O, 2003, LECT NOTES COMPUT SC, V3016, P291
   Calcagno C, 2004, LECT NOTES COMPUT SC, V2986, P79
   Christensen NH, 2004, ACM T PROGR LANG SYS, V26, P191, DOI 10.1145/963778.963784
   COHEN A, SEARCH PROGRAM GENER
   Czarnecki K, 2003, LECT NOTES COMPUT SC, V3016, P51
   ECKHARDT J, 2005, IMPLICITLY HETEROGEN
   Elliott C, 2000, LECT NOTES COMPUT SC, V1924, P9
   Futamura Y., 1971, Systems, Compurters, Controls, V25, P45
   *GIMP DOC TEAM, 2002, GIMP US MAN
   GLUCK R, 1994, PROCEEDINGS OF THE 1994 INTERNATIONAL CONFERENCE ON COMPUTER LANGUAGES, P183, DOI 10.1109/ICCL.1994.288382
   Glück R, 1999, LECT NOTES COMPUT SC, V1706, P326
   GUENTER B, 1995, P 22 ANN C COMP GRAP, P343
   Herrmann C. A., 2001, Semantics, Applications, and Implementation of Program Generation. Second International Workshop, SAIG 2001. Proceedings (Lecture Notes in Computer Science Vol.2196), P199
   HERRMANN CA, 2004, MIP0410 U PASS DEP I
   Herrmann CA, 2005, PARALLEL PROCESS LET, V15, P305, DOI 10.1142/S0129626405002234
   Hudak P., 1996, ACM COMPUTING SURVEY, V28
   *INT CORP, 1997, INT IM PROC LIB REF
   JONES ND, 1995, S PART EV SEM BAS PR, P24
   Kiselyov Oleg., 2004, EMSOFT 04, P249
   LANGHAMMER T, 2005, THESIS
   Lengauer C, 2003, LECT NOTES COMPUT SC, V3016, P73
   Mcnamara B, 2004, J FUNCT PROGRAM, V14, P429, DOI 10.1017/S0956796803004969
   SPERBER M, 1997, S PROGR LANG DES IMP, P215
   Taha W, 2003, LECT NOTES COMPUT SC, V3016, P30
   Taha W, 2001, LECT NOTES COMPUT SC, V2053, P257
   The MathWorks Inc, IM PROC TOOLB
   Thibault Scott, 2000, HIGHER ORDER SYMBOLI, V13
NR 29
TC 10
Z9 10
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP
PY 2006
VL 62
IS 1
BP 47
EP 65
DI 10.1016/j.scico.2006.02.002
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 066UL
UT WOS:000239255500004
OA hybrid
DA 2024-07-18
ER

PT J
AU Sohn, SY
   Lee, JS
AF Sohn, SY
   Lee, JS
TI Cost of ownership model for a CRM system
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE COO; CRM system; yield loss cost
ID INSPECTION
AB A procurement decision about a CRM system is heavily influenced by the initial purchase cost rather than the effect of the operating cost and utilization over the lifetime. In this paper, we propose a Cost of Ownership (COO) model for a CRM system which takes into account not only the initial cost, but also the operation cost, and the opportunity cost due to customer mismanagement over a life-cycle. In particular, the opportunity cost due to customer mismanagement, which is related to the performance of the CRM system, is used as a key cost factor to reflect the financial impact of the system. We employ an engineering economy model to compare various systems with different life spans. A numerical example is given for comparison of the COO of alternative systems along with sensitivity analysis for an optimal procurement decision. (c) 2005 Elsevier B.V. All rights reserved.
C1 Yonsei Univ, Dept Comp Sci & Ind Syst Engn, Seoul 120749, South Korea.
C3 Yonsei University
RP Sohn, SY (corresponding author), Yonsei Univ, Dept Comp Sci & Ind Syst Engn, Seoul 120749, South Korea.
EM sohns@yonsei.ac.kr; exponentlee@yonsei.ac.kr
RI Sohn, So Young/G-8043-2012
CR BAYER J, 2001, TERADATA CRM WHITE P
   Berson A., 2000, BUILDING DATAMINING
   Dance D. L., 1996, IEEE Transactions on Components, Packaging & Manufacturing Technology, Part C (Manufacturing), V19, P57, DOI 10.1109/3476.484205
   David JS, 2002, COMMUN ACM, V45, P101, DOI 10.1145/502269.502273
   EISENFELD B, 2004, TEN TIPS LOWERING CR
   *HEWS GROUP, MAKK COMP BUS CAS CR
   LECKIE R, 1997, TEST COST RED WORKSH
   *MET GROUP INC, 2000, ERP PLATF REL AN TOT
   NIKOLIC T, 2002, IDENTIFY REALIZE MEA
   PFAFF D, MEASURE SUCCESS YOUR
   *RIGHTNOW TECHN, 2004, RIGHTCHANN MAK SUR Y
   SHAHNAM E, CUSTOMER RELATIONSHI
   SKIERA B, 2000, CUSTOMER RELATIONSHI
   Sohn SY, 2003, IEEE T ELECTRON PACK, V26, P338, DOI 10.1109/TEPM.2003.822081
   Sohn SY, 2003, IEEE T SEMICONDUCT M, V16, P565, DOI [10.1109/TSM.2003.815897, 10.1109/TSM.2003.8158971]
   THOMPSON E, GARTNER CRM VISION B
   Verhoef C, 2002, SCI COMPUT PROGRAM, V45, P1, DOI 10.1016/S0167-6423(02)00106-5
   WEST R, 2002, HEUG 2002 C EX FOR L
   2003, ACCENTURE CMR ROI MA
   2003, CRM CONTRACT CTR S S
NR 20
TC 7
Z9 7
U1 2
U2 13
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR
PY 2006
VL 60
IS 1
BP 68
EP 81
DI 10.1016/j.scico.2005.06.004
PG 14
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 008MV
UT WOS:000235045800003
DA 2024-07-18
ER

PT J
AU Berghammer, R
   Reuter, F
AF Berghammer, R
   Reuter, F
TI A linear approximation algorithm for bin packing with absolute
   approximation factor 3/2
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE bin packing; approximation algorithm; formal program development
AB We present a new approximation algorithm for the bin packing problem which has a linear running time and an absolute approximation factor of 3/2. It is known that this approximation factor is the best factor achievable, unless P = NP. (C) 2003 Elsevier Science B.V. All rights reserved.
C1 Univ Kiel, Inst Informat & Prakt Math, D-24098 Kiel, Germany.
C3 University of Kiel
RP Berghammer, R (corresponding author), Univ Kiel, Inst Informat & Prakt Math, Olshaussenstr 40, D-24098 Kiel, Germany.
CR [Anonymous], 1996, APPROXIMATION ALGORI
   [No title captured]
   [No title captured]
NR 3
TC 10
Z9 15
U1 0
U2 2
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUL
PY 2003
VL 48
IS 1
BP 67
EP 80
DI 10.1016/S0167-6423(03)00011-X
PG 14
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 690VN
UT WOS:000183571300004
OA Bronze
DA 2024-07-18
ER

PT J
AU Liu, SQ
   Zhou, Y
   Ji, LB
   Han, TT
   Chen, TL
AF Liu, Shuqi
   Zhou, Yu
   Ji, Longbing
   Han, Tingting
   Chen, Taolue
TI Enhancing test reuse with GUI events deduplication and adaptive semantic
   matching
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Test reuse; GUI events deduplication; Semantic matching; Adaptive
   strategy; Test oracle
AB Developers typically employ Graphical User Interface (GUI) testing to ensure the expected behavior of applications, but they face the challenge of designing appropriate test cases with functional features. Recently, researchers have proposed several test reuse methods based on semantic matching to alleviate the burden. However, the limited text semantic information and semantic matching rules between events severely limit the existing test reuse methods. In this paper, we propose TREADROID (Test Reuse EnhAncer for anDROID applications), a framework that combines GUI events deduplication with the adaptive semantic matching strategy to enhance the usability of the reused tests. Considering the connection between widget attribute texts, we categorize attributes and measure widget similarity based on the same corresponding attributes as well as across attributes in the same group. In addition, we propose a deduplication strategy for GUI events to reduce the redundancy caused by reusing a test with unique functionality. To further bridge the semantic gap, we design a two-stage adaptive matching strategy to search for the target test with functionality closer to that of the source test. Experimental evaluation against the baseline methods on 25 applications demonstrates that: (i) the adaptive semantic matching strategy overall improves the performance of widget mapping; (ii) GUI events deduplication dramatically increases the precision of events on average, even reaching 100% for multiple tests; (iii) TREADROID can significantly reduce the manual effort of creating tests for similar applications.
C1 [Liu, Shuqi; Zhou, Yu; Ji, Longbing] Nanjing Univ Aeronaut & Astronaut, Coll Comp Sci & Technol, Nanjing, Peoples R China.
   [Han, Tingting; Chen, Taolue] Birkbeck Univ London, Dept Comp Sci, London, England.
C3 Nanjing University of Aeronautics & Astronautics; University of London;
   Birkbeck University London
RP Zhou, Y (corresponding author), Nanjing Univ Aeronaut & Astronaut, Coll Comp Sci & Technol, Nanjing, Peoples R China.; Chen, TL (corresponding author), Birkbeck Univ London, Dept Comp Sci, London, England.
EM liushuqi@nuaa.edu.cn; zhouyu@nuaa.edu.cn; jlb_nuaa@nuaa.edu.cn;
   t.han@bbk.ac.uk; t.chen@bbk.ac.uk
RI Han, Tingting/AFL-9459-2022
OI Chen, Taolue/0000-0002-5993-1665
FU National Natural Science Foundation of China [61972197, 62372232,
   KFKT2022A03]; Collaborative Innovation Center of Novel Software
   Technology and Industrialization; State Key Laboratory of Novel Software
   Technology; Nanjing University [62272397]; Birkbeck BEI School Project
   (EFFECT)
FX This work is supported by the National Natural Science Foundation of
   China (No. 61972197, No. 62372232) , the Collaborative Innovation Center
   of Novel Software Technology and Industrialization. T. Chen is partially
   supported by an oversea grant from the State Key Laboratory of Novel
   Software Technology, Nanjing University (KFKT2022A03) , Birkbeck BEI
   School Project (EFFECT) , and National Natural Science Foundation of
   China (No. 62272397) .
CR Amalfitano D, 2012, IEEE INT CONF AUTOM, P258, DOI 10.1145/2351676.2351717
   android, Ui/application exerciser monkey
   Behrang F, 2019, 34TH IEEE/ACM INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING (ASE 2019), P54, DOI 10.1109/ASE.2019.00016
   Behrang F, 2018, PROC IEEE ACM INT C, P384, DOI 10.1145/3183440.3195019
   Choudhary SR, 2015, IEEE INT CONF AUTOM, P429, DOI 10.1109/ASE.2015.89
   Craftdroid, About us
   Dong Z, 2020, PROC INT CONF SOFTW, P481, DOI 10.1145/3377811.3380402
   Ermuth Markus, 2016, P INT S SOFTW TEST A, P82
   F-droid, About us
   google, About us
   Gu TX, 2019, PROC INT CONF SOFTW, P269, DOI 10.1109/ICSE.2019.00042
   Hu G, 2018, ESEC/FSE'18: PROCEEDINGS OF THE 2018 26TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P269, DOI 10.1145/3236024.3236055
   Joorabchi Mona Erfani, 2013, 2013 ACM / IEEE International Symposium on Empirical Software Engineering and Measurement (ESEM), P15, DOI 10.1109/ESEM.2013.9
   Kochhar PS, 2015, IEEE ICST WORKSHOP
   LEVENSHT.VI, 1965, DOKL AKAD NAUK SSSR+, V163, P845
   [李聪 Li Cong], 2022, [软件学报, Journal of Software], V33, P1612
   Liang J., Rida: cross-app record and replay for Android
   Lin JW, 2019, 34TH IEEE/ACM INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING (ASE 2019), P42, DOI 10.1109/ASE.2019.00015
   Linares-Vásquez M, 2017, PROC IEEE INT CONF S, P613, DOI 10.1109/ICSME.2017.47
   Linares-Vásquez M, 2015, 12TH WORKING CONFERENCE ON MINING SOFTWARE REPOSITORIES (MSR 2015), P111, DOI 10.1109/MSR.2015.18
   Liu SQ, 2022, IEEE INT C S Q R S, P703, DOI 10.1109/QRS57517.2022.00076
   Lu X, 2016, 2016 IEEE/ACM INTERNATIONAL CONFERENCE ON MOBILE SOFTWARE ENGINEERING AND SYSTEMS (MOBILESOFT 2016), P301, DOI [10.1109/MobileSoft.2016.070, 10.1145/2897073.2897721]
   Machiry A., 2013, P 2013 9 JOINT M FDN, P224
   Mahmood R, 2014, 22ND ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (FSE 2014), P599, DOI 10.1145/2635868.2635896
   Mao K., 2016, P 25 INT S SOFTW TES, P94
   Mao K, 2017, IEEE INT CONF AUTOM, P16, DOI 10.1109/ASE.2017.8115614
   Mao Q, 2022, J SYST SOFTWARE, V183, DOI 10.1016/j.jss.2021.111085
   Mariani L, 2021, ISSTA '21: PROCEEDINGS OF THE 30TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, P177, DOI 10.1145/3460319.3464827
   Mariani L, 2021, 2021 IEEE/ACM INTERNATIONAL CONFERENCE ON AUTOMATION OF SOFTWARE TEST (AST 2021), P70, DOI 10.1109/AST52587.2021.00016
   Mariani L, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P280, DOI 10.1145/3180155.3180162
   Memon A, 2003, 10TH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P260, DOI 10.1109/WCRE.2003.1287256
   Mikolov Tomas, 2013, Advances in Neural Information Processing Systems, P3111, DOI DOI 10.48550/ARXIV.1310.4546
   Mirzaei N, 2016, PROC INT CONF SOFTW, P559, DOI 10.1145/2884781.2884853
   Mirzaei N, 2015, 2015 IEEE 26TH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING (ISSRE), P461, DOI 10.1109/ISSRE.2015.7381839
   Rau A, 2018, LECT NOTES COMPUT SC, V10845, P50, DOI 10.1007/978-3-319-91662-0_4
   Rosenfeld A, 2018, 2018 IEEE/ACM 5TH INTERNATIONAL CONFERENCE ON MOBILE SOFTWARE ENGINEERING AND SYSTEMS (MOBILESOFT), P122, DOI 10.1145/3197231.3197241
   Su T, 2017, ESEC/FSE 2017: PROCEEDINGS OF THE 2017 11TH JOINT MEETING ON FOUNDATIONS OF SOFTWARE ENGINEERING, P245, DOI 10.1145/3106237.3106298
   Wang J, 2020, PROC INT CONF SOFTW, P469, DOI 10.1145/3377811.3380382
   Zhao Yixue, 2022, ESEC/FSE 2022: Proceedings of the 30th ACM Joint European Software Engineering Conference and Symposium on the Foundations of Software Engineering, P421, DOI 10.1145/3540250.3549134
   Zhao YX, 2020, PROCEEDINGS OF THE 28TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE '20), P1190, DOI 10.1145/3368089.3409708
   Zhou Y., 2020, IEEE Trans. Softw. Eng.
NR 41
TC 0
Z9 0
U1 4
U2 4
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN
PY 2024
VL 232
AR 103052
DI 10.1016/j.scico.2023.103052
EA NOV 2023
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA Z3ZP5
UT WOS:001111496600001
DA 2024-07-18
ER

PT J
AU Mahe, E
   Gaston, C
   Le Gall, P
AF Mahe, Erwan
   Gaston, Christophe
   Le Gall, Pascale
TI Denotational and operational semantics for interaction languages:
   Application to trace analysis
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Interactions; Sequence diagrams; Formal language; Denotational
   semantics; Operational semantics
ID SEQUENCE DIAGRAMS
AB Graphical depictions of distributed systems' behaviors in the form of Sequence Diagrams (SD) are widely used, with formalisms such as Message Sequence Charts (MSC) or UML-SD. Yet, only restricted subsets of these languages are associated to formal semantics, most of which are given by translation towards other formalisms. These translational approaches are the only ones enabling formal verification thanks to the ecosystem and tools associated to the target formalism. However, traceability of SD concepts is lost and the translation of some operators, in particular the weakly sequential loop, is problematic. In this paper, we define an Interaction Language to encode SD and ground it formally by associating it to three different semantics which we prove to be equivalent. A "denotational" semantics, relying on composing operators over sets of traces (sequences of atomic actions) allows one to reason on algebraic properties of SD. A structural "operational" semantics apprehends SD as executable objects which can express traces one action after the other. It also bridges the gap between the two other semantics and enables proving their equivalence. A functional style "execution" semantics separates two concerns intertwined in the operational semantics that is: identifying immediately executable actions (frontier actions) and computing follow-up SD which specify continuations of behaviors. The use of positions to identify frontier actions resolves non determinism as every distinct occurrence of these actions have unique positions and are associated to a unique follow-up SD. Additionally, this enables visualizing frontier actions in SD as well as the execution of SD.These three semantics constitute a framework which enable using SD directly for formal verification. Traceability of SD concepts and executed actions is preserved and the weakly sequential loops are treated as any other operator.
C1 [Mahe, Erwan; Gaston, Christophe] Univ Paris Saclay, CEA, List, F-91120 Palaiseau, France.
   [Le Gall, Pascale] Univ Paris Saclay, Cent Supelec, F-91192 Gif Sur Yvette, France.
C3 CEA; Universite Paris Cite; Universite Paris Saclay; Universite Paris
   Saclay; Universite Paris Cite
RP Mahe, E (corresponding author), Univ Paris Saclay, CEA, List, F-91120 Palaiseau, France.
EM erwan.mahe@cea.fr
CR Alur R, 1999, LECT NOTES COMPUT SC, V1664, P114
   Baeten J, 2000, Computing Science Reports
   Bannour B, 2011, ASIA PAC SOFWR ENG, P219, DOI [10.1109/APSC.2011.40, 10.1109/APSEC.2011.40]
   Benharrat N, 2017, LECT NOTES COMPUT SC, V10533, P276, DOI 10.1007/978-3-319-67549-7_17
   Damm W, 2001, FORM METHOD SYST DES, V19, P45, DOI 10.1023/A:1011227529550
   de Bakker JW., 1996, CONTROL FLOW SEMANTI
   Dershowitz Nachum, 1991, Rewrite Systems, P243
   Eichner C, 2005, LECT NOTES COMPUT SC, V3530, P133
   Firley T, 1999, LECT NOTES COMPUT SC, V1723, P645
   Harel D, 2008, SOFTW SYST MODEL, V7, P237, DOI 10.1007/s10270-007-0054-z
   Hoare C.A.R., 1998, International Series in Computer Science
   ITU, 2011, Message Sequence Chart (MSC).
   Jacobs J, 2015, LECT NOTES COMPUT SC, V8938, P71, DOI 10.1007/978-3-319-15201-1_5
   Katoen J.P., 1998, 1 WORKSHOP SDL MSC S, P197
   Knapp A., 2017, 7 C ALG COALG COMP S
   Knapp A, 2007, LECT NOTES COMPUT SC, V4364, P42
   Korp M, 2009, LECT NOTES COMPUT SC, V5595, P295, DOI 10.1007/978-3-642-02348-4_21
   Letichevsky AA, 2005, LECT NOTES COMPUT SC, V3530, P117
   Longuet D., 2012, P ACM S APPL COMP SA, P1332
   Lu LJ, 2014, ACM T SOFTW ENG METH, V23, DOI 10.1145/2523108
   Mahe Erwan, 2023, Fundamentals of Software Engineering: 10th International Conference, FSEN 2023, Revised Selected Papers. Lecture Notes in Computer Science (14155), P88, DOI 10.1007/978-3-031-42441-0_7
   Mahe E, Coq proof for soundness of equivalence relation for semantically equivalent interactions
   Mahe E., Coq proof for the equivalence of the semantics
   Mahe E, Proof of convergence of the TRS using TTT2 and CSI
   Mahe E, 2023, Arxiv, DOI arXiv:2306.02983
   Mahe E, 2021, 36TH ANNUAL ACM SYMPOSIUM ON APPLIED COMPUTING, SAC 2021, P1815, DOI 10.1145/3412841.3442054
   Mahe E, 2022, LECT NOTES COMPUT SC, V13299, P113, DOI 10.1007/978-3-031-10363-6_8
   Mahe E, 2020, LECT NOTES COMPUT SC, V12076, P482, DOI 10.1007/978-3-030-45234-6_24
   Mahe Erwan, 2022, HIBOU tool
   Mauw S, 1999, COMPUT NETW, V31, P1785, DOI 10.1016/S1389-1286(99)00060-2
   Mauw S, 1997, SDL '97 - TIME FOR TESTING, P291, DOI 10.1016/B978-044482816-3/50020-4
   Micskei Z, 2011, SOFTW SYST MODEL, V10, P489, DOI 10.1007/s10270-010-0157-9
   OMG Object Management Group, 2017, UNIFIED MODELING LAN
   Parrow J., 2001, Handbook of Process Algebra, P479, DOI [10.1016/B978-044482830-9/50026-6, DOI 10.1016/B978-044482830-9/50026-6]
   Plotkin GD, 2004, J LOGIC ALGEBR PROGR, V60-1, P17, DOI 10.1016/j.jlap.2004.03.002
   Reniers M., 1999, Ph.D. thesis
   Rosu G, 2003, LECT NOTES COMPUT SC, V2706, P499
   Simmonds J, 2009, IEEE T SERV COMPUT, V2, P223, DOI 10.1109/TSC.2009.16
   Störrle H, 2003, 200S IEEE SYMPOSIUM ON HUMAN CENTRIC COMPUTING LANGUAGES AND ENVIRONMENTS, P129
   Zankl H, 2011, LECT NOTES ARTIF INT, V6803, P499, DOI 10.1007/978-3-642-22438-6_38
   Zhu Huibiao, 2001, Correct Hardware Design and Verification Methods. 11th IFIP WG 10.5 Advanced Research Working Conference, CHARME 2001. Proceedings (Lecture Notes in Computer Science Vol.2144), P449
NR 41
TC 1
Z9 1
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN
PY 2024
VL 232
AR 103034
DI 10.1016/j.scico.2023.103034
EA OCT 2023
PG 31
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA Y1AW2
UT WOS:001102673700001
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Bortin, M
AF Bortin, Maksym
TI Structured development of implementations for divide-and-conquer
   specifications
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Implementation; Synthesis; Design tactics
ID DESIGN
AB The paper presents a systematic approach to the derivation of implementations from abstract specifications featuring a few structural properties common to a large variety of algorithmic problems starting with sorting. The method is applied in a case study which is first concerned with weighted finite matroids and the algorithmic construction of their optimal bases in general, and then with the computation of optimal job schedules as an instance.& COPY; 2023 Elsevier B.V. All rights reserved.
C1 [Bortin, Maksym] Tallinn Univ Technol, Dept Software Sci, Tallinn, Estonia.
C3 Tallinn University of Technology
RP Bortin, M (corresponding author), Tallinn Univ Technol, Dept Software Sci, Tallinn, Estonia.
EM maksym.bortin@taltech.ee
FU Estonian IT Academy [2014-2020.4.05.19-0001]
FX Research supported by the Estonian IT Academy under grant
   2014-2020.4.05.19-0001.
CR Bird Richard, 1997, Algebra of Programming
   Bjorner A., 1992, ENCY MATH ITS APPL, P284
   Bortin M, 2022, LECT NOTES COMPUT SC, V13768, P73, DOI 10.1007/978-3-031-22476-8_5
   Bortin Maksym., 2006, Nordic Journal of Computing, V13, P2
   Brassard G., 1988, Algorithmics: theory practice
   Doornbos H., 1995, Mathematics of Program Construction. Third International Conference, MPC '95 Proceedings, P242
   Ehrig H., 1999, IFIP REPORTS, P201
   SMITH DR, 1990, SCI COMPUT PROGRAM, V14, P305, DOI 10.1016/0167-6423(90)90025-9
   SMITH DR, 1987, SCI COMPUT PROGRAM, V8, P213, DOI 10.1016/0167-6423(87)90034-7
   SMITH DR, 1985, SCI COMPUT PROGRAM, V5, P37, DOI 10.1016/0167-6423(85)90003-6
   White N., 1986, ENCY MATH ITS APPL
NR 11
TC 0
Z9 0
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN
PY 2024
VL 231
AR 103011
DI 10.1016/j.scico.2023.103011
EA AUG 2023
PG 15
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA S2FQ1
UT WOS:001069381900001
DA 2024-07-18
ER

PT J
AU Chen, LQ
   Wei, DP
   Yin, BH
   Wang, J
AF Chen, Liqian
   Wei, Dengping
   Yin, Banghu
   Wang, Ji
TI Static analysis of linear absolute value equalities among variables of a
   program
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 23rd International Conference on Coordination Models and Languages
   (COORDINATION)
CY JUN 14-18, 2021
CL ELECTR NETWORK
DE Abstract interpretation; Abstract domain; Absolute value; Invariant;
   Interval
ID ABSTRACT DOMAIN; EQUIVALENCE; PRECISE
AB The classic linear (technically, affine) equality abstract domain, which can infer linear equality relations among variables of a program automatically, is one of the earliest and fundamental abstract domains. However, it cannot express non-convex properties that appear naturally due to the inherent disjunctive behaviors in programs. In this paper, we introduce a new abstract domain, namely the abstract domain of linear absolute value equalities (AVE), which generalizes the linear equality abstract domain with absolute value terms of variables. More clearly, we leverage the absolute value function to design the new abstract domain for discovering linear equality relations among values and absolute values of program variables. Moreover, since linear absolute value equalities can only express limited form of inequalities while programs often involve various inequalities, to help the AVE domain, we propose a so-called signed interval abstract domain as an extension of the classic interval abstract domain. The key idea is to use two intervals to track respectively the positive part and the negative part of the interval range for each variable. On this basis, we propose to combine the two new abstract domains to improve precision of each other during analysis. Experimental results are encouraging: In practice, the AVE abstract domain (together with the signed interval abstract domain) can find interesting piece-wise linear invariants that are non-convex and out of the expressiveness of the linear equality domain.(c) 2022 Elsevier B.V. All rights reserved.
C1 [Chen, Liqian; Wei, Dengping; Yin, Banghu; Wang, Ji] Natl Univ Def Technol, Changsha 410073, Peoples R China.
   [Chen, Liqian] Hunan Key Lab Software Engn Complex Syst, Changsha 410073, Peoples R China.
   [Wang, Ji] State Key Lab High Performance Comp, Changsha 410073, Peoples R China.
C3 National University of Defense Technology - China
RP Chen, LQ; Wei, DP (corresponding author), Natl Univ Def Technol, Changsha 410073, Peoples R China.
EM lqchen@nudt.edu.cn; dpwei@nudt.edu.cn
RI Li, Kunpeng/KFS-6306-2024; wang, liangyu/KHD-1769-2024
FU National Natural Science Foundation of China;  [61872445];  [62032024]; 
   [62102432]
FX Acknowledgement This work is supported by the National Natural Science
   Foundation of China (Nos. 61872445, 62032024, 62102432) .
CR Allamigeon X, 2008, LECT NOTES COMPUT SC, V5079, P189
   Anitescu M, 1997, OPTIM METHOD SOFTW, V7, P265, DOI 10.1080/10556789708805657
   [Anonymous], 2012, The GNU Multiple Precision Complex Library
   Chen LQ, 2021, 2021 INTERNATIONAL SYMPOSIUM ON THEORETICAL ASPECTS OF SOFTWARE ENGINEERING (TASE 2021), P47, DOI 10.1109/TASE52547.2021.00020
   Chen LQ, 2014, LECT NOTES COMPUT SC, V8723, P101, DOI 10.1007/978-3-319-10936-7_7
   Chen LQ, 2011, LECT NOTES COMPUT SC, V6602, P156, DOI 10.1007/978-3-642-19718-5_9
   Chen LQ, 2010, LECT NOTES COMPUT SC, V5944, P112, DOI 10.1007/978-3-642-11319-2_11
   Chen L, 2009, LECT NOTES COMPUT SC, V5673, P309, DOI 10.1007/978-3-642-03237-0_21
   CHUA LO, 1988, IEEE T CIRCUITS SYST, V35, P101, DOI 10.1109/31.1705
   Cortesi A, 2013, ELECTRON PROC THEOR, P325, DOI 10.4204/EPTCS.129.19
   Cousot P., 1979, 6 ACM S PRINCIPLES P, P269, DOI DOI 10.1145/567752.567778
   Cousot P., 1976, P 2 INT S PROGR PAR
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Cousot Patrick, 1978, P 5 ACM SIGACT SIGPL, p84S96, DOI DOI 10.1145/512760.512770
   Dillig I, 2013, ACM SIGPLAN NOTICES, V48, P443, DOI [10.1145/2509136.2509511, 10.1145/2544173.2509511]
   EAVES BC, 1981, MATH OPER RES, V6, P475, DOI 10.1287/moor.6.4.475
   Elder M, 2014, ACM T PROGR LANG SYS, V36, DOI 10.1145/2651361
   Feret J, 2001, GETCO 00, V39, P1
   GRANGER P, 1991, LECT NOTES COMPUT SC, V493, P169
   GRANGER P, 1989, INT J COMPUT MATH, V30, P165, DOI 10.1080/00207168908803778
   Gulavani LS, 2008, LECT NOTES COMPUT SC, V5123, P370
   Gulwani S, 2003, ACM SIGPLAN NOTICES, V38, P74, DOI 10.1145/640128.604138
   Gulwani S, 2009, ACM SIGPLAN NOTICES, V44, P127, DOI 10.1145/1594834.1480898
   Hladík M, 2018, COMPUT OPTIM APPL, V69, P243, DOI 10.1007/s10589-017-9939-0
   Hu J, 2012, J GLOBAL OPTIM, V53, P29, DOI 10.1007/s10898-010-9644-3
   Jeannet B, 2009, LECT NOTES COMPUT SC, V5643, P661, DOI 10.1007/978-3-642-02658-4_52
   KARR M, 1976, ACTA INFORM, V6, P133, DOI 10.1007/BF00268497
   King A, 2008, LECT NOTES COMPUT SC, V5123, P281
   Lalire G., INTERPROC
   Mangasarian OL, 2007, COMPUT OPTIM APPL, V36, P43, DOI 10.1007/s10589-006-0395-5
   MANGASARIAN OL, 1995, SIAM J MATRIX ANAL A, V16, P359, DOI 10.1137/S0895479893262734
   Miné A, 2017, FOUND TRENDS PROGRAM, V4, pI, DOI 10.1561/2500000034
   Müller-Olm M, 2007, ACM T PROGR LANG SYS, V29, DOI 10.1145/1275497.1275504
   Müller-Olm M, 2004, LECT NOTES COMPUT SC, V3142, P1016
   Müller-Olm M, 2004, ACM SIGPLAN NOTICES, V39, P330, DOI 10.1145/982962.964029
   Schrijver A., 1998, THEORY LINEAR INTEGE
   Sen R, 2007, MEMOCODE'07: FIFTH ACM & IEEE INTERNATIONAL CONFERENCE ON FORMAL METHODS AND MODELS FOR CO-DESIGN, PROCEEDINGS, P39
   Sharma Rahul, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P703, DOI 10.1007/978-3-642-22110-1_57
   Sharma T, 2017, LECT NOTES COMPUT SC, V10145, P500, DOI 10.1007/978-3-319-52234-0_27
   Zhang YH, 2020, PROCEEDINGS OF THE 28TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE '20), P826, DOI 10.1145/3368089.3409720
NR 40
TC 2
Z9 2
U1 1
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN
PY 2023
VL 225
SI SI
AR 102906
DI 10.1016/j.scico.2022.102906
EA NOV 2022
PG 18
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 7T5ZH
UT WOS:000911523700004
DA 2024-07-18
ER

PT J
AU Schewe, KD
   Ferrarotti, F
AF Schewe, Klaus-Dieter
   Ferrarotti, Flavio
TI Behavioural theory of reflective algorithms I: Reflective sequential
   algorithms
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Adaptivity; Abstract state machine; Linguistic reflection; Behavioural
   theory; Tree algebra
ID LINGUISTIC REFLECTION; PARALLEL; THESIS; LOGIC
AB We develop a behavioural theory of reflective sequential algorithms (RSAs), i.e. sequential algorithms that can modify their own behaviour. The theory comprises a set of language -independent postulates defining the class of RSAs, an abstract machine model, and the proof that all RSAs are captured by this machine model. As in Gurevich & rsquo;s behavioural theory for sequential algorithms RSAs are sequential-time, bounded parallel algorithms, where the bound depends on the algorithm only and not on the input. Different from the class of sequential algorithms every state of an RSA includes a representation of the algorithm in that state, thus enabling linguistic reflection. Bounded exploration is preserved using terms as values. The model of reflective sequential abstract state machines (rsASMs) extends sequential ASMs using extended states that include an updatable representation of the main ASM rule to be executed by the machine in that state. Updates to the representation of ASM signatures and rules are realised by means of a sophisticated tree algebra. (c) 2022 Elsevier B.V. All rights reserved.
C1 [Schewe, Klaus-Dieter] Zhejiang Univ, UIUC Inst, Haining, Peoples R China.
   [Ferrarotti, Flavio] Software Competence Ctr Hagenberg, Hagenberg, Austria.
C3 Zhejiang University; Softwarepark Hagenberg
RP Schewe, KD (corresponding author), Zhejiang Univ, UIUC Inst, Haining, Peoples R China.
EM kdschewe@acm.org; flavio.ferrarotti@scch.at
OI Ferrarotti, Flavio/0000-0003-2278-8233; Schewe,
   Klaus-Dieter/0000-0002-8309-1803
CR Balasubramaniam D., 2004, P 1 ACM SIGSOFT WORK, P18
   Blass A., 2003, ACM Transactions on Computational Logic, V4, P578, DOI 10.1145/937555.937561
   Börger E, 2017, J UNIVERS COMPUT SCI, V23, P129
   BOOKER LB, 1989, ARTIF INTELL, V40, P235, DOI 10.1016/0004-3702(89)90050-7
   Borger E., 2003, Formal Aspects of Computing, V15, P237, DOI 10.1007/s00165-003-0012-7
   Borger E., 2003, ABSTRACT STATE MACHI
   Börger E, 2020, FUND INFORM, V177, P1, DOI 10.3233/FI-2020-1978
   Börger E, 2016, ACTA INFORM, V53, P469, DOI 10.1007/s00236-015-0249-7
   Cooper R., 1995, PERSISTENT OBJECT SY, P332
   Dearle A, 2010, Arxiv, DOI arXiv:1006.3724
   Dershowitz N, 2016, LOG J IGPL, V24, P346, DOI 10.1093/jigpal/jzw008
   Ehrenfeucht A, 2017, THEOR COMPUT SCI, V682, P79, DOI 10.1016/j.tcs.2016.12.031
   Ferrarotti F, 2018, ANN MATH ARTIF INTEL, V83, P321, DOI 10.1007/s10472-017-9569-3
   Ferrarotti F, 2018, LECT NOTES COMPUT SC, V10742, P117, DOI 10.1007/978-3-319-74313-4_10
   Ferrarotti F, 2017, LOG J IGPL, V25, P700, DOI 10.1093/jigpal/jzx021
   Ferrarotti F, 2016, THEOR COMPUT SCI, V649, P25, DOI 10.1016/j.tcs.2016.08.013
   Goldber D. E., 1988, Machine Learning, V3, P95, DOI 10.1023/A:1022602019183
   Goldberg David E, 1989, GENETIC ALGORITHMS S
   Greenwood R. M., 2001, Software Process Technology. 8th European Workshop, EWSPT 2001. Proceedings (Lecture Notes in Computer Science Vol.2077), P27
   Gurevich Y., 2000, ACM T COMPUT LOG, V1, P77, DOI DOI 10.1145/343369.343384
   Gurevich Y, 2007, BULL EUR ASSOC THEOR, P82
   Gurevich Yuri, 1995, SPECIFICATION VALIDA, P9
   Harrison B., 2001, Semantics, Applications, and Implementation of Program Generation. Second International Workshop, SAIG 2001. Proceedings (Lecture Notes in Computer Science Vol.2196), P163
   Holland J. H., 2006, Journal of Systems Science and Complexity, V19, P1, DOI 10.1007/s11424-006-0001-z
   Holland J.H., 1992, Adaptation in Natural and Artificial Systems, DOI DOI 10.7551/MITPRESS/1090.001.0001
   HOLLAND JH, 1962, J ACM, V9, P297, DOI 10.1145/321127.321128
   Holland JH, 2012, SCHOLARPEDIA, V7, P1482, DOI [DOI 10.4249/SCH0LARPEDIA.1482, DOI 10.4249/SCHOLARPEDIA.1482]
   Jones Simon Peyton, 2003, Journal of Functional Programming, V13, P1
   Kirby G, 1998, SOFTWARE PRACT EXPER, V28, P1045, DOI 10.1002/(SICI)1097-024X(199808)28:10<1045::AID-SPE191>3.0.CO;2-F
   Kirby G.N.C., 1995, PERSISTENT OBJECT SY, P355
   Kirby G.N.C., 1992, THESIS U ST ANDREWS
   Koza JR, 2004, SOFT COMPUT, V8, P318, DOI [10.1007/s00500-03-0288-9, 10.1007/s00500-003-0288-9]
   KOZA JR, 1994, STAT COMPUT, V4, P87, DOI 10.1007/BF00175355
   LAMPORT L, 1979, IEEE T COMPUT, V28, P690, DOI 10.1109/TC.1979.1675439
   Lynch N. A., 1996, DISTRIBUTED ALGORITH
   MAHFOUD SW, 1995, PARALLEL COMPUT, V21, P1, DOI 10.1016/0167-8191(94)00071-H
   Paun G., 2002, MEMBRANE COMPUTING I
   Paun G., 1998, DNA Computing. New Computing Paradigms
   Popplestone R., 2002, Formal Aspects of Computing, V13, P196, DOI 10.1007/s001650200009
   Riccobene E, 2014, LECT NOTES COMPUT SC, V8477, P204, DOI 10.1007/978-3-662-43652-3_17
   Schewe Klaus-Dieter, 2012, Abstract State Machines, Alloy, B, VDM, and Z. Proceedings Third International Conference, ABZ 2012, P341, DOI 10.1007/978-3-642-30885-7_27
   Schewe K.-D., 1994, 6 INT C MANAGEMENT D
   Schewe K.-D., 2017, P AUSTRALASIAN COMPU
   Schewe KD, 2011, FRONT ARTIF INTEL AP, V225, P37, DOI 10.3233/978-1-60750-690-4-37
   Schewe KD, 2010, ACTA CYBERN, V19, P765
   Schewe KD, 2010, J UNIVERS COMPUT SCI, V16, P3043
   Sheard T., 1988, Proceedings 1988 International Conference on Computer Languages (IEEE Cat. No.88CH2647-6), P194, DOI 10.1109/ICCL.1988.13064
   Sheard T, 2004, ACM SIGPLAN NOTICES, V39, P119, DOI 10.1145/1052883.1052897
   Sheard T., 2001, Semantics, Applications, and Implementation of Program Generation. Second International Workshop, SAIG 2001. Proceedings (Lecture Notes in Computer Science Vol.2196), P2
   SHEARD T, 1989, ACM T DATABASE SYST, V14, P322, DOI 10.1145/68012.68014
   SHEARD T, 1992, COMPUT LANG, V17, P157, DOI 10.1016/0096-0551(92)90026-J
   Smith B. C., 1984, P 11 ACM SIGACT SIGP, P23, DOI [DOI 10.1145/800017.800513, 10.1145/800017.800513]
   STEMPLE D, 1991, DATABASE PROGRAMMING LANGUAGES : BULK TYPES & PERSISTENT DATA, P357
   STEMPLE D, 1990, LECT NOTES COMPUT SC, V416, P269
   STEMPLE D, 2000, ESPRIT BAS RES SER, P158
   Sussman G. J., 1998, Higher-Order and Symbolic Computation, V11, P405, DOI 10.1023/A:1010035624696
   Taha W, 2000, THEOR COMPUT SCI, V248, P211, DOI 10.1016/S0304-3975(00)00053-0
   Tauber M., 2010, 2010 Fourth IEEE International Conference on Self-Adaptive and Self-Organizing Systems Workshop (SASOW), P9, DOI 10.1109/SASOW.2010.40
   VandenBussche J, 1996, J COMPUT SYST SCI, V52, P537, DOI 10.1006/jcss.1996.0040
NR 59
TC 0
Z9 0
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 1
PY 2022
VL 223
AR 102864
DI 10.1016/j.scico.2022.102864
EA SEP 2022
PG 30
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 4V5MH
UT WOS:000859520500005
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Bardin, S
   Kosmatov, N
   Marcozzi, M
   Delahaye, M
AF Bardin, Sebastien
   Kosmatov, Nikolai
   Marcozzi, Michael
   Delahaye, Mickael
TI Specify and measure, cover and reveal: A unified framework for automated
   test generation
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Software testing; Test generation; Symbolic execution; Static analysis;
   Coverage criteria
ID EXPERIENCE
AB Automatic test input generation (ATG) is a major topic in software engineering, analysis and security. In this paper, we bridge the gap between state-of-the-art white-box ATG techniques, especially Dynamic Symbolic Execution, and the diversity of test objectives that they may be used to cover in practice, including many of those defined by common source-code coverage criteria. We define a new coverage specification mechanism, called labels, for specifying test objectives, and prove it to be both expressive and amenable to efficient automation. We present an efficient approach for detecting - revealing - infeasible (i.e. uncoverable) test objectives expressed as labels. We demonstrate that measuring the achieved coverage can be efficiently performed for labels. Finally, we propose an innovative extension of DSE resulting in an efficient support for label coverage, while the existing naive approach induces an exponential blow-up of the search space. Experiments show that our ATG technique yields very significant savings and confirm the interest of infeasible label detection, enabling to lift DSE to label coverage with only a slight overhead. Overall, we show that label coverage provides the basis of a rich framework allowing one to express and handle test objectives from various contexts in an efficient and generic manner. To illustrate this framework, we describe LTEST, an all-in-one testing toolset based on labels and used in the industry, which offers automatic program annotation, ATG, coverage measurement and detection of infeasible test objectives. (C) 2021 Elsevier B.V. All rights reserved.
C1 [Bardin, Sebastien; Kosmatov, Nikolai; Marcozzi, Michael] Univ Paris Saclay, List, CEA, Palaiseau, France.
   [Kosmatov, Nikolai] Thales Res & Technol, Palaiseau, France.
   [Marcozzi, Michael] Imperial Coll London, London, England.
   [Delahaye, Mickael] DGA, Bruz, France.
C3 Universite Paris Saclay; CEA; Universite Paris Cite; Thales Group;
   Imperial College London
RP Kosmatov, N (corresponding author), Thales Res & Technol, Palaiseau, France.
EM sebastien.bardin@cea.fr; nikolaikosmatov@gmail.com;
   michael.marcozzi@cea.fr; mickael.delahaye@inria.fr
OI Delahaye, Mickael/0000-0002-3723-1983
FU EU FP7 (project STANCE) [317753]; French ANR (project BINSEC)
   [ANR12INSE0002]
FX The authors would like to thank the FRAMA-C and PATHCRAWLER team members
   for providing the tools and support, Fran?ois Cheynier for initial
   experiments with labels, as well as David R. Maclver and Alastair F.
   Donaldson for useful?discussions about propertybased testing. Many
   thanks to the anonymous reviewers for many helpful comments and
   suggestions. This work was partially funded by EU FP7 (project STANCE,
   grant 317753) and French ANR (project BINSEC, grant ANR12INSE0002) .
CR Ammann Paul, 2008, Introduction to software testing, V1st
   Ammann Paul, 2014, ICST 2014
   Andrews J.H., 2005, ICSE 2005
   [Anonymous], 2008, NETWORK DISTRIBUTED
   Bardin S., 2018, ISOLA 2018
   Bardin S., 2014, ICST 2014
   Bardin S., 2014, TAP 2014
   Bardin S., 2015, ICST 2015
   Bardin S., 2008, IEEE ICST 2008
   Bardin S., 2009, ICST 2009
   Bardin S, 2011, SOFTW TEST VERIF REL, V21, P29, DOI 10.1002/stvr.423
   Botella B., 2009, AST 2009
   Bulwahn Lukas, 2012, Lecture Notes in Computer Science, P92
   Burnim J., 2008, ASE 2008
   Cadar C., 2008, OSDI 2008, p209{224
   Cadar C., 2006, CCS 2006
   Cadar C, 2008, ACM T INFORM SYST SE, V12, DOI 10.1145/1455518.1455522
   Cadar Cristian., 2013, COMMUN ACM
   Chebaro O., 2012, SAC 2012
   Chebaro O., 2010, TAP 2010
   Chekam Thierry Titcheu, 2017, ICSE 2017
   CHILENSKI JJ, 1994, SOFTWARE ENG J, V9, P193, DOI 10.1049/sej.1994.0025
   Claessen K, 2011, ACM SIGPLAN NOTICES, V46, P53, DOI 10.1145/1988042.1988046
   Cuoq P., 2012, SEFM 2012
   De Moura L, 2011, COMMUN ACM, V54, P69, DOI 10.1145/1995376.1995394
   DeMillo R.A., 1991, IEEE T SOFTW ENG, V17
   DEMILLO RA, 1978, COMPUTER, V11, P34, DOI 10.1109/C-M.1978.218136
   Frankl P. G., 1998, Software Engineering Notes, V23, P153, DOI 10.1145/291252.288298
   Godefroid P., 2008, EMSOFT 2008
   Godefroid P, 2012, COMMUN ACM, V55, P40, DOI 10.1145/2093548.2093564
   Godefroid Patrice., 2005, PLDI 2005
   Howden W.E., 1982, IEEE T SOFTW ENG, V8
   Jamrozik K., 2013, TAP 2013
   Just R., 2012, ICST 2012
   Just R, 2014, 22ND ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (FSE 2014), P654, DOI 10.1145/2635868.2635929
   KING JC, 1976, COMMUN ACM, V19, P385, DOI 10.1145/360248.360252
   Kochhar PS, 2015, 2015 22ND INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER), P560, DOI 10.1109/SANER.2015.7081877
   Korel B., 1996, ICSE 1996
   Lampropoulos L, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360607
   Lavillonniere E., 2019, TAP 2019
   Le Hoang V., 2018, TAP 2018
   Ma Y.S., 2006, ICSE 2006
   Marcozzi Michael, 2018, 40 INT C SOFTW ENG I
   Marcozzi Michael, 2017, ICST 17
   Marinescu Paul Dan, 2013, EUR SOFTW ENG C ACM
   Martin T, 2020, LECT NOTES COMPUT SC, V12546, P337, DOI 10.1007/978-3-030-63461-2_18
   Necula G.C., 2002, CC 2002
   Nica S., 2012, WORKSH FORM METH DEV
   Offut A.J., 1993, ICSE 1993
   Offutt A. J., 1992, ACM Transactions on Software Engineering and Methodology, V1, P5, DOI 10.1145/125489.125473
   Offutt A.J., 1996, ISSETR9601 G MAS U D
   Offutt A.J., 1994, SOFTW TEST VERIF REL, V4
   OFFUTT AJ, 1994, IEEE T SOFTWARE ENG, V20, P337, DOI 10.1109/32.286422
   OFFUTT AJ, 2001, MUTATION TESTING NEW
   Pandita R., 2010, ICSM 2010
   Papadakis I, 2009, 2009 IEEE/WIC/ACM INTERNATIONAL JOINT CONFERENCES ON WEB INTELLIGENCE (WI) AND INTELLIGENT AGENT TECHNOLOGIES (IAT), VOL 3, P96
   Papadakis M., 2010, ISSRE 2010
   Papadakis M., 2011, SOFTW QUAL J, V19
   Papadakis M., 2010, AST 2010 ICSE 2010
   Radio Technical Commission for Aeronautics, 1992, RTCA DO178 B SOFTW C
   Reid Stuart C., 1995, EUROSTAR 95
   Sen K., 2005, ESEC FSE 2005
   Staats M., 2010, ISSTA 2010
   Staats M., 2009, NASA FORM METH S 200
   Su T., 2014, SERE 2014
   Su T., 2015, IEEE ACM 37 IEEE INT
   Tillmann N., 2008, TAP 2008
   Untch R.H., 1993, ISSTA
   WEYUKER EJ, 1993, IEEE T SOFTWARE ENG, V19, P912, DOI 10.1109/32.241773
   Williams N., 2004, ASE 2004
   WONG WE, 1995, J SYST SOFTWARE, V31, P185, DOI 10.1016/0164-1212(94)00098-0
   WOODWARD MR, 1980, IEEE T SOFTWARE ENG, V6, P278, DOI 10.1109/TSE.1980.230473
   Xie T., 2009, DSN 2009
   Yates D., 1989, P ACM SIGSOFT 89 3 S, P48
   Zhang L., 2010, ICSM 2010
   Zhu H, 1997, ACM COMPUT SURV, V29, P366, DOI 10.1145/267580.267590
NR 76
TC 2
Z9 2
U1 3
U2 4
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUL 1
PY 2021
VL 207
AR 102641
DI 10.1016/j.scico.2021.102641
EA MAR 2021
PG 29
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA RQ5SW
UT WOS:000642479600002
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Chardet, M
   Coullon, H
   Robillard, S
AF Chardet, Maverick
   Coullon, Helene
   Robillard, Simon
TI Toward safe and efficient reconfiguration with Concerto
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Reconfiguration; Component-based models; Coordination; Parallelism;
   Distributed software
ID COMPONENT MODEL; ARCHITECTURE; ROBUST
AB For large-scale distributed systems that need to adapt to a changing environment, conducting a reconfiguration is a challenging task. In particular, efficient reconfigurations require the coordination of multiple tasks with complex dependencies. We present Concerto, a model used to manage the lifecycle of software components and coordinate their reconfiguration operations. Concerto promotes efficiency with a fine-grained representation of dependencies and parallel execution of reconfiguration actions, both within components and between them. In this paper, the elements of the model are described as well as their formal semantics. In addition, we outline a performance model that can be used to estimate the time required by reconfigurations, and we describe an implementation of the model. The evaluation demonstrates the accuracy of the performance estimations, and illustrates the performance gains provided by the execution model of Concerto compared to state-of-the-art systems. (C) 2020 Elsevier B.V. All rights reserved.
C1 [Chardet, Maverick; Coullon, Helene; Robillard, Simon] UBL, INRIA, LS2N, IMT Atlantique, F-44307 Nantes, France.
C3 IMT - Institut Mines-Telecom; IMT Atlantique; Inria
RP Coullon, H (corresponding author), UBL, INRIA, LS2N, IMT Atlantique, F-44307 Nantes, France.
EM helene.coullon@imt-atlantique.fr
OI Coullon, Helene/0000-0003-2573-2147; Robillard,
   Simon/0000-0003-4751-380X
CR [Anonymous], 2013, TOPOLOGY ORCHESTRATI
   [Anonymous], 2018, TECH REP
   Armstrong R, 2006, CONCURR COMP-PRACT E, V18, P215, DOI 10.1002/cpe.911
   Ballouli R.E., 2018, FORMAL ASPECTS COMPO
   Basu A, 2006, I C SOFTW ENG FORM M, P3
   Baude F., 2014, SOFTW PRACT EXP
   Baude F, 2009, ANN TELECOMMUN, V64, P5, DOI 10.1007/s12243-008-0068-8
   Bigot J, 2014, COMPUTING, V96, P1115, DOI 10.1007/s00607-013-0368-3
   Binz T, 2013, LECT NOTES COMPUT SC, V8274, P692, DOI 10.1007/978-3-642-45005-1_62
   Blair G, 2009, ANN TELECOMMUN, V64, P1, DOI 10.1007/s12243-009-0086-1
   Bouchenak S, 2006, 2006 IEEE INTERNATIONAL CONFERENCE ON CLUSTER COMPUTING, VOLS 1 AND 2, P40
   Boyer F, 2017, SOFTWARE PRACT EXPER, V47, P1729, DOI 10.1002/spe.2499
   Brogi A, 2018, J SYST SOFTWARE, V139, P189, DOI 10.1016/j.jss.2018.02.005
   Brogi A, 2017, LECT NOTES COMPUT SC, V10319, P178, DOI 10.1007/978-3-319-59746-1_10
   Brogi A, 2016, LECT NOTES COMPUT SC, V9846, P219, DOI 10.1007/978-3-319-44482-6_14
   Broto L, 2008, APPLIED COMPUTING 2008, VOLS 1-3, P1658
   Bruneton E, 2006, SOFTWARE PRACT EXPER, V36, P1257, DOI 10.1002/spe.767
   Buisson J, 2016, J SYST SOFTWARE, V122, P430, DOI 10.1016/j.jss.2015.11.039
   Camara J, 2013, LAT-AM SYMP DEP COMP, P1, DOI 10.1109/LADC.2013.17
   Chardet M., 2018, 4PAD 2018 5 INT S FO, P1
   Chardet M., 2020, CCGRID 2020, P2020
   Coullon H, 2019, LECT NOTES COMPUT SC, V11918, P120, DOI 10.1007/978-3-030-34968-4_7
   Darrous J, 2018, 2018 18TH IEEE/ACM INTERNATIONAL SYMPOSIUM ON CLUSTER, CLOUD AND GRID COMPUTING (CCGRID), P553, DOI 10.1109/CCGRID.2018.00082
   Dastjerdi Amir Vahid, 2016, Internet of Things, P61, DOI [10.1016/B978 -0-12-805395-9.00004-6. arXiv: 1601.02752, DOI 10.1016/B978-0-12-805395-9.00004-6.ARXIV:1601.02752]
   David PC, 2006, LECT NOTES COMPUT SC, V4089, P82
   David PC, 2009, ANN TELECOMMUN, V64, P45, DOI 10.1007/s12243-008-0073-y
   Di Cosmo R, 2015, LECT NOTES COMPUT SC, V9435, P397, DOI 10.1007/978-3-662-48616-0_28
   Di Cosmo R, 2014, INFORM COMPUT, V239, P100, DOI 10.1016/j.ic.2014.11.002
   Durán F, 2016, J SYST SOFTWARE, V122, P524, DOI 10.1016/j.jss.2015.09.020
   Edmonds A, 2012, IEEE INTERNET COMPUT, V16, P15, DOI 10.1109/MIC.2012.65
   Fischer J, 2012, ACM SIGPLAN NOTICES, V47, P263, DOI 10.1145/2345156.2254096
   Flissi A, 2008, IEEE ACM INT SYMP, P177, DOI 10.1109/CCGRID.2008.59
   Gaspar N., 2013, LNCS, V8348, P137
   Goldsack Patrick, 2009, Operating Systems Review, V43, P16, DOI 10.1145/1496909.1496915
   Henrio L., 2008, P COMPFRAME HPC GECO
   Hu PF, 2017, J NETW COMPUT APPL, V98, P27, DOI 10.1016/j.jnca.2017.09.002
   Kephart JO, 2003, COMPUTER, V36, P41, DOI 10.1109/MC.2003.1160055
   Korte F, 2018, CLOSER: PROCEEDINGS OF THE 8TH INTERNATIONAL CONFERENCE ON CLOUD COMPUTING AND SERVICES SCIENCE, P100, DOI 10.5220/0006693001000111
   Krupitzer C, 2015, PERVASIVE MOB COMPUT, V17, P184, DOI 10.1016/j.pmcj.2014.09.009
   Lanore V, 2015, 2015 18TH INTERNATIONAL ACM SIGSOFT SYMPOSIUM ON COMPONENT-BASED SOFTWARE ENGINEERING (CBSE), P1, DOI 10.1145/2737166.2737169
   Litoiu M., 2017, SOFTWARE ENG SELFADA, P9640
   Mouradian C, 2018, IEEE COMMUN SURV TUT, V20, P416, DOI 10.1109/COMST.2017.2771153
   Muthanna A, 2019, J SENS ACTUAT NETW, V8, DOI 10.3390/jsan8010015
   Nierstrasz O., 2009, MODEL CENTRIC CONTEX, P128
   Object Management Group, 2006, CORBA COMP MOD
   Object Management Group, 2006, Deployment and Configuration of Component-based Distributed Applications
   Oreizy P, 1998, PROC INT CONF SOFTW, P177, DOI 10.1109/ICSE.1998.671114
   Paik H.-y., 2017, SERVICE COMPONENT AR, P203
   Seinturier L, 2012, SOFTWARE PRACT EXPER, V42, P559, DOI 10.1002/spe.1077
   Szyperski C., 2002, Component Software: Beyond Object-Oriented Programming
   Nguyen TL, 2019, LECT NOTES COMPUT SC, V11725, P273, DOI 10.1007/978-3-030-29400-7_20
   Wan ZY, 2000, ACM SIGPLAN NOTICES, V35, P242, DOI 10.1145/358438.349331
NR 52
TC 4
Z9 4
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR 1
PY 2021
VL 203
AR 102582
DI 10.1016/j.scico.2020.102582
PG 31
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA PQ7UT
UT WOS:000606750500002
OA Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Belzner, L
   Wirsing, M
AF Belzner, Lenz
   Wirsing, Martin
TI Synthesizing safe policies under probabilistic constraints with
   reinforcement learning and Bayesian model checking
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Policy synthesis; Constrained Markov decision process; Safe
   reinforcement learning; Bayesian model checking; Probabilistic
   constraints
AB We propose to leverage epistemic uncertainty about constraint satisfaction of a reinforcement learner in safety critical domains. We introduce a framework for specification of requirements for reinforcement learners in constrained settings, including confidence about results. We show that an agent's confidence in constraint satisfaction provides a useful signal for balancing optimization and safety in the learning process. (C) 2021 Elsevier B.V. All rights reserved.
EM belzner@ifi.lmu.de
CR Abdennadher N., MARGARIA STEFFEN, P257
   Abeywickrama DB, 2020, INT J SOFTW TOOLS TE, V22, P399, DOI 10.1007/s10009-020-00554-3
   Abeywickrama DB, 2012, 2012 IEEE 19TH INTERNATIONAL CONFERENCE AND WORKSHOPS ON ENGINEERING OF COMPUTER BASED SYSTEMS (ECBS), P33, DOI 10.1109/ECBS.2012.30
   Alshiekh M., 2018, Proceedings of the AAAI Conference on Artifcial Intelligence, V32, DOI DOI 10.1609/AAAI.V32I1.11797
   Altman E., 1999, Constrained Markov Decision Processes, V7
   Amodei Dario, 2016, CONCRETE PROBLEMS AI
   Arulkumaran K, 2017, IEEE SIGNAL PROC MAG, V34, P26, DOI 10.1109/MSP.2017.2743240
   Avni G, 2019, LECT NOTES COMPUT SC, V11561, P630, DOI 10.1007/978-3-030-25540-4_36
   Bacci E, 2020, LECT NOTES COMPUT SC, V12288, P231, DOI 10.1007/978-3-030-57628-8_14
   Baier Christel, 2019, Computing and Software Science: State of the Art and Perspectives. Lecture Notes in Computer Science (LNCS 10000), P420, DOI 10.1007/978-3-319-91908-9_21
   Baier C, 2008, PRINCIPLES OF MODEL CHECKING, P1
   Baier C, 2018, HDB MODEL CHECKING, P963, DOI [DOI 10.1007/978-3-319-10575-8, DOI 10.1007/978-3-319-10575-828, DOI 10.1007/978-3-319-10575-8_28]
   Baier JA, 2008, AI MAG, V29, P25, DOI 10.1609/aimag.v29i4.2204
   Belzner L., 2019, ARXIV200100496
   Belzner L, 2017, 2017 IEEE/ACM 3RD INTERNATIONAL WORKSHOP ON SOFTWARE ENGINEERING FOR SMART CYBER-PHYSICAL SYSTEMS (SESCPS 2017), P10, DOI 10.1109/SEsCPS.2017.2
   Belzner L, 2016, 2016 IEEE 1ST INTERNATIONAL WORKSHOPS ON FOUNDATIONS AND APPLICATIONS OF SELF* SYSTEMS (FAS*W), P118, DOI 10.1109/FAS-W.2016.36
   Belzner L, 2016, LECT NOTES COMPUT SC, V9539, P1, DOI 10.1007/978-3-319-28934-2_1
   Bharadwaj Suda, 2019, 2019 American Control Conference (ACC), P1048
   Bures Tomas, 2013, 2013 IEEE 7th International Conference on Self-Adaptation and Self-Organizing Systems Workshops, P71, DOI 10.1109/SASOW.2013.23
   Chow Y, 2018, ADV NEUR IN, V31
   Chow Y, 2018, J MACH LEARN RES, V18
   Clarke EM, 2011, LECT NOTES COMPUT SC, V6996, P1, DOI 10.1007/978-3-642-24372-1_1
   DARDENNE A, 1993, SCI COMPUT PROGRAM, V20, P3, DOI 10.1016/0167-6423(93)90021-G
   DIACONIS P, 1979, ANN STAT, V7, P269, DOI 10.1214/aos/1176344611
   Dobbs I, 1990, OPTIMISATION STABILI
   Drugan M.M, 2015, ESANN
   Fulton N, 2018, AAAI CONF ARTIF INTE, P6485
   Fulton N, 2019, LECT NOTES COMPUT SC, V11427, P413, DOI 10.1007/978-3-030-17462-0_28
   García J, 2015, J MACH LEARN RES, V16, P1437
   Ge YY, 2019, IEEE ACCESS, V7, P165007, DOI 10.1109/ACCESS.2019.2952651
   Glorot X., 2011, JMLR Proceedings, V15, P315, DOI DOI 10.1002/ECS2.1832
   Guldstrand Larsen Kim, 2018, Leveraging Applications of Formal Methods, Verification and Validation. Verification. 8th International Symposium, ISoLA 2018. Proceedings: Lecture Notes in Computer Science (LNCS 11245), P261, DOI 10.1007/978-3-030-03421-4_17
   Haesaert S, 2018, IFAC PAPERSONLINE, V51, P73, DOI 10.1016/j.ifacol.2018.08.013
   Hasanbeig M., 2020, AAMAS, P483
   Hasanbeig M, 2020, LECT NOTES COMPUT SC, V12288, P1, DOI 10.1007/978-3-030-57628-8_1
   Holzl Matthias, 2015, Software Engineering for Collective Autonomic Systems. The ASCENS Approach: LNCS 8998, P325, DOI 10.1007/978-3-319-16310-9_9
   Holzl M.M., 2016, T FDN MASTERING CHAN, V1, P201
   Jaeger Manfred, 2020, Leveraging Applications of Formal Methods, Verification and Validation. Verification. Principles. 9th International Symposium on Leveraging Applications of Formal Methods, ISoLA 2020. Proceedings. Lecture Notes in Computer Science (LNCS 12476), P275, DOI 10.1007/978-3-030-61362-4_15
   Jansen Nils, 2020, LEIBNIZ INT P INFORM, V171, DOI 10.4230/LIPIcs.CONCUR.2020.3
   Jha SK, 2009, LECT N BIOINFORMAT, V5688, P218, DOI 10.1007/978-3-642-03845-7_15
   Junges S, 2016, LECT NOTES COMPUT SC, V9636, P130, DOI 10.1007/978-3-662-49674-9_8
   Klima R, 2019, AAMAS '19: PROCEEDINGS OF THE 18TH INTERNATIONAL CONFERENCE ON AUTONOMOUS AGENTS AND MULTIAGENT SYSTEMS, P350
   Kwiatkowska Marta, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P585, DOI 10.1007/978-3-642-22110-1_47
   Legay A, 2010, LECT NOTES COMPUT SC, V6418, P122, DOI 10.1007/978-3-642-16612-9_11
   Li D., 2019, PLANT SOIL, DOI DOI 10.1007/S11104-019-04274-9
   Lütjens B, 2019, IEEE INT CONF ROBOT, P8662, DOI [10.1109/icra.2019.8793611, 10.1109/ICRA.2019.8793611]
   Magee Jeff., 2006, CONCURRENCY STATE MO
   Mahadevan S, 1996, MACH LEARN, V22, P159, DOI 10.1007/BF00114727
   Phan T., 2020, P 19 INT C AUT AG MU
   Pinto L., 2017, P 34 INT C MACH LEAR, V70, P2817, DOI 10.48550/arXiv.1703.02702
   Pnueli A., 1977, 18th Annual Symposium on Foundations of Computer Science, P46, DOI 10.1109/SFCS.1977.32
   Ray A., 2019, ARXIV191001708
   Resende M.G.C., 2018, Handbook of heuristics, P177
   Roijers DM, 2013, J ARTIF INTELL RES, V48, P67, DOI 10.1613/jair.3987
   Russell S, 2015, AI MAG, V36, P105, DOI 10.1609/aimag.v36i4.2577
   Salimans T., 2017, ARXIV170303864
   Schafer Dirk, 2018, Discovery Science. 21st International Conference, DS 2018. Proceedings: Lecture Notes in Artificial Intelligence (LNAI 11198), P161, DOI 10.1007/978-3-030-01771-2_11
   Seshia S.A., 2020, ARXIV200700085
   Steffen B., 2018, LECT NOTES COMPUTER, V1246
   Waschneck B, 2018, PROC CIRP, V72, P1264, DOI 10.1016/j.procir.2018.03.212
   Wirsing M., 2011, International Symposium on Formal Methods for Components and Objects, P1
   Wirsing Martin., 2015, Software Engineering for Collective Autonomic Systems, The ASCENS Approach, V8998
   Zuliani P, 2010, HSSC 10: PROCEEDINGS OF THE 13TH ACM INTERNATIONAL CONFERENCE ON HYBRID SYSTEMS: COMPUTATION AND CONTROL, P243
NR 63
TC 1
Z9 1
U1 1
U2 13
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 1
PY 2021
VL 206
AR 102620
DI 10.1016/j.scico.2021.102620
EA FEB 2021
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA RI2XD
UT WOS:000636771400009
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Ali, A
   Gravino, C
AF Ali, Asad
   Gravino, Carmine
TI Improving software effort estimation using bio-inspired algorithms to
   select relevant features: An empirical study
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Bio-inspired algorithms; Feature selection; Effort estimation;
   Estimation techniques
ID OPTIMIZATION; MODEL; PREDICTION; CLASSIFICATION; VALIDATION; REGRESSION
AB Context: Bio-inspired feature selection algorithms got the attention of the researchers in the domain of Software Development Effort Estimations (SDEE) because they can improve the prediction accuracy of existing estimation techniques, such as machine learning methods.
   Objective: This paper aims to analyze different feature selection algorithms and assess the role they can play to increase the accuracy of software development effort predictions. Method: We have performed an empirical study considering commonly used bio-inspired feature selection algorithms in the domain of SDEE, i.e., Genetic Algorithm (GA), Particle Swarm Optimization, Ant Colony Optimization, Tabu Search, Harmony Search (HS), and Firefly algorithm, and four traditional non-bio-inspired algorithms, i.e., Best-First Search (BFS), Greedy Stepwise, Subset Forward Selection, and Random Search, used in combination with five widely used estimation techniques and applied to eight widely used SDEE datasets.
   Results: The performed analysis suggests that almost all (bio-inspired) feature selection algorithms have outperformed the baseline estimation techniques (i.e., techniques employed without any feature selection algorithms) in the majority of the experiments and hence we can conclude that feature selection algorithms can help in the domain of SDEE to increase the prediction accuracy. Similarly, HS and GA are considered as best performed bio-inspired algorithms because they provided significantly better results than the non-bio-inspired algorithms in a greater number of experiments. Moreover, we also compared the results of various employed bio-inspired algorithms, and, again, GA and HS came out as the best performed bio-inspired feature selection algorithms.
   Conclusion: From our results, if we have to pick feature selection algorithms (from both bio- and non-bio-inspired) and recommend them for future investigations, we would suggest HS because it provided better effort predictions in more combinations of datasets and estimation techniques than the other considered bio- and non-bio-inspired algorithms. Among the non-bio-inspired algorithms, BFS is the one that provided better predictions. (C) 2021 Elsevier B.V. All rights reserved.
C1 [Ali, Asad; Gravino, Carmine] Univ Salerno, Dept Comp Sci, Via Giovanni Paolo II,132, I-84084 Fisciano, SA, Italy.
C3 University of Salerno
RP Ali, A (corresponding author), Univ Salerno, Dept Comp Sci, Via Giovanni Paolo II,132, I-84084 Fisciano, SA, Italy.
EM aali@unisa.it; gravino@unisa.it
RI Ali, Asad/ADR-6159-2022
OI Ali, Asad/0000-0001-7465-1090
CR ALBRECHT AJ, 1983, IEEE T SOFTWARE ENG, V9, P639, DOI 10.1109/TSE.1983.235271
   Portilla-Flores EA, 2017, IEEE ACCESS, V5, P25759, DOI 10.1109/ACCESS.2017.2771741
   Algabri M, 2015, 2015 5TH NATIONAL SYMPOSIUM ON INFORMATION TECHNOLOGY: TOWARDS NEW SMART WORLD (NSITNSW)
   Ali A, 2019, J SOFTW-EVOL PROC, V31, DOI 10.1002/smr.2211
   Aljahdali S., 2010, INT C COMP SYST APPL, P1, DOI DOI 10.1109/AICCSA.2010.5586985
   Andrews JH, 2011, IEEE T SOFTWARE ENG, V37, P80, DOI 10.1109/TSE.2010.46
   [Anonymous], 2008, Proceedings of the 4th international workshop on Predictor models in software engineering, DOI [DOI 10.1145/1370788.1370804, 10.1145/1370788.1370804]
   [Anonymous], 2017, IEEE T SOFTWARE ENG, DOI DOI 10.1109/TSE.2016.2584050
   [Anonymous], 2002, Applied Statistics for Software Managers
   Arcuri A, 2014, SOFTW TEST VERIF REL, V24, P219, DOI 10.1002/stvr.1486
   Baker YS, 2014, INT CONF MACH LEARN, P241, DOI 10.1109/ICMLC.2014.7009123
   Balasaraswathi V.R., 2017, Journal of Communications and Information Networks, V2, P107, DOI [10.1007/s41650-017-0033-7, DOI 10.1007/S41650-017-0033-7]
   Bardsiri VK, 2013, SOFTWARE QUAL J, V21, P501, DOI 10.1007/s11219-012-9183-x
   Basir MA, 2019, J INF COMMUN TECHNOL, V18, P35
   Behnood A, 2017, CONSTR BUILD MATER, V142, P199, DOI 10.1016/j.conbuildmat.2017.03.061
   Benala TR, 2018, SWARM EVOL COMPUT, V38, P158, DOI 10.1016/j.swevo.2017.07.009
   Bergstra J, 2012, J MACH LEARN RES, V13, P281
   Binitha S., 2012, Int. J. Soft Comput. Eng, V2, P137, DOI DOI 10.1007/S11269-015-0943-9
   Boehm BW., 1981, Software Engineering Economics
   Boughaci Dalila, 2018, Vietnam Journal of Computer Science, V5, P107, DOI 10.1007/s40595-018-0107-y
   Braga PL, 2007, IEEE IJCNN, P1595, DOI 10.1109/IJCNN.2007.4371196
   Briand L. C., 1999, Proceedings of the 1999 International Conference on Software Engineering (IEEE Cat. No.99CB37002), P313, DOI 10.1109/ICSE.1999.841022
   Briand LC, 2000, SEVENTH INTERNATIONAL SOFTWARE METRICS SYMPOSIUM - METRICS 2001, PROCEEDINGS, P260, DOI 10.1109/METRIC.2001.915534
   Charette RN, 2005, IEEE SPECTRUM, V42, P42, DOI 10.1109/MSPEC.2005.1502528
   CHEN Z, 2005, ACM SIGSOFT SOFTWARE, V30, P1
   China Yun F, 2010, EFFORT ESTIMATION DA
   Dan Z, 2013, 2013 IEEE INTERNATIONAL CONFERENCE ON SERVICE OPERATIONS AND LOGISTICS, AND INFORMATICS (SOLI), P180, DOI 10.1109/SOLI.2013.6611406
   De Marco Lucia, 2013, 2013 39th Euromicro Conference on Software Engineering and Advanced Applications (SEAA), P349, DOI 10.1109/SEAA.2013.41
   De Marco L, 2014, PROC INT CONF CLOUD, P42
   del Bianco V, 2014, INFORM SOFTWARE TECH, V56, P1253, DOI 10.1016/j.infsof.2014.04.009
   Di Martino S, 2016, INFORM SOFTWARE TECH, V72, P90, DOI 10.1016/j.infsof.2015.12.001
   Dorigo M., 2011, Encyclopedia of machine learning, P36, DOI [10.1007/978-0-387-30164-8_22, DOI 10.1007/978-0-387-30164-8]
   El Emam K, 2008, IEEE SOFTWARE, V25, P84, DOI 10.1109/MS.2008.107
   Elish MO, 2009, EXPERT SYST APPL, V36, P10774, DOI 10.1016/j.eswa.2009.02.013
   Ferrucci F, 2010, ICEIS 2010: PROCEEDINGS OF THE 12TH INTERNATIONAL CONFERENCE ON ENTERPRISE INFORMATION SYSTEMS, VOL 1: DATABASES AND INFORMATION SYSTEMS INTEGRATION, P236
   Fong S, 2018, PROCEEDINGS OF 2018 10TH INTERNATIONAL CONFERENCE ON MACHINE LEARNING AND COMPUTING (ICMLC 2018), P122, DOI 10.1145/3195106.3195167
   Frank E, 2004, BIOINFORMATICS, V20, P2479, DOI 10.1093/bioinformatics/bth261
   Galinina A., 2012, INFORM TECHNOL MANAG, V15, P45
   Gandomi AH, 2012, COMMUN NONLINEAR SCI, V17, P4831, DOI 10.1016/j.cnsns.2012.05.010
   Ghamisi P, 2015, IEEE GEOSCI REMOTE S, V12, P309, DOI 10.1109/LGRS.2014.2337320
   Gharehchopogh, 2014, INDIAN J SCI TECHNOL, V7, P795
   Gharehchopogh F. S., 2014, INT J ACAD RES, V6
   Glover F., 1998, Tabu Search
   Gravino C, 2019, P EUR C SOFTW ENG AD
   Hall M., 2009, ACM SIGKDD Explor. Newsl, V11, P18, DOI DOI 10.1145/1656274.1656278
   Hall Mark., ADV DATA MINING WEKA
   Haq E.U., 2019, COMPUT INTEL NEUROSC, V2019
   Hosni M., 2017, P 27 INT WORKSH SOFT, P207
   Hosni M, 2018, FRONT ARTIF INTEL AP, V303, P439, DOI 10.3233/978-1-61499-900-3-439
   Huang Yuan, 1999, IEEE SMC'99 Conference Proceedings. 1999 IEEE International Conference on Systems, Man, and Cybernetics (Cat. No.99CH37028), P132, DOI 10.1109/ICSMC.1999.825221
   Jafari SMS, 2016, 2016 1ST CONFERENCE ON SWARM INTELLIGENCE AND EVOLUTIONARY COMPUTATION (CSIEC 2016), P131, DOI 10.1109/CSIEC.2016.7482119
   Jin-Cherng Lin, 2011, Proceedings of the 2011 International Symposium on Computer Science and Society (ISCCS 2011), P349, DOI 10.1109/ISCCS.2011.113
   Jodpimai P, 2018, INT J COMPUT APPL T, V58, P17, DOI 10.1504/IJCAT.2018.10015262
   Jovic A, 2015, 2015 8TH INTERNATIONAL CONVENTION ON INFORMATION AND COMMUNICATION TECHNOLOGY, ELECTRONICS AND MICROELECTRONICS (MIPRO), P1200, DOI 10.1109/MIPRO.2015.7160458
   Kaur M, 2014, PROCEEDINGS OF THE 2014 INTERNATIONAL CONFERENCE ON ISSUES AND CHALLENGES IN INTELLIGENT COMPUTING TECHNIQUES (ICICT), P140, DOI 10.1109/ICICICT.2014.6781267
   KEMERER CF, 1987, COMMUN ACM, V30, P416, DOI 10.1145/22899.22906
   Keung J, 2013, AUTOMAT SOFTW ENG, V20, P543, DOI 10.1007/s10515-012-0108-5
   Kishore R., 2017, INT J RES APPL SCI E, V6
   KITCHENHAM B, 1995, IEEE SOFTWARE, V12, P52, DOI 10.1109/52.391832
   Kitchenham B. A., 2001, IEE Proceedings-Software, V148, P81, DOI 10.1049/ip-sen:20010506
   Kitchenham B, 2009, INFORM SOFTWARE TECH, V51, P7, DOI 10.1016/j.infsof.2008.09.009
   Langdon WB, 2016, INFORM SOFTWARE TECH, V73, P16, DOI 10.1016/j.infsof.2016.01.003
   Langsari K, 2017, 2017 4TH INTERNATIONAL CONFERENCE ON ELECTRICAL ENGINEERING, COMPUTER SCIENCE AND INFORMATICS (EECSI), P453
   Lee CP, 2011, APPL SOFT COMPUT, V11, P208, DOI 10.1016/j.asoc.2009.11.010
   Li YF, 2007, IN C IND ENG ENG MAN, P1256, DOI 10.1109/IEEM.2007.4419393
   Lin Jin-cherng, 2012, AUTOMATICALLY ESTIMA
   Liu H, 2005, IEEE T KNOWL DATA EN, V17, P491, DOI 10.1109/TKDE.2005.66
   Liu Q, 2019, CLUSTER COMPUT, V22, pS6953, DOI 10.1007/s10586-018-1884-x
   Maleki I., 2014, INT J INNOVATION APP, V5, P72
   Mendes E, 2005, J SYST SOFTWARE, V77, P157, DOI 10.1016/j.jss.2004.08.034
   Menzies Tim., 2005, Proceedings of the 20th IEEE/ACM international Conference on Automated software engineering, P384
   MIYAZAKI Y, 1994, J SYST SOFTWARE, V27, P3, DOI 10.1016/0164-1212(94)90110-4
   Moosavi SHS, 2017, ENG APPL ARTIF INTEL, V60, P1, DOI 10.1016/j.engappai.2017.01.006
   Murillo-Morera Juan, 2017, Journal of Software Engineering Research and Development, V5, DOI 10.1186/s40411-017-0037-x
   Neumann Geoffrey, 2015, Search-Based Software Engineering. 7th International Symposium, SSBSE 2015. Proceedings: LNCS 9275, P318, DOI 10.1007/978-3-319-22183-0_29
   Nogueira S., 2016, Joint European Conference on Machine Learning and Knowledge Discovery in Databases, P442, DOI [10.1007/978-3-319-46227-1_28, DOI 10.1007/978-3-319-46227-1_28]
   Oliveira ALI, 2006, NEUROCOMPUTING, V69, P1749, DOI 10.1016/j.neucom.2005.12.119
   Oliveira ALI, 2010, INFORM SOFTWARE TECH, V52, P1155, DOI 10.1016/j.infsof.2010.05.009
   Osman H, 2018, ARXIV180704486
   Piotrowski AP, 2020, SWARM EVOL COMPUT, V58, DOI 10.1016/j.swevo.2020.100718
   Pourali Amir, 2015, B SEANCES ACAD R SCI, V4, P106
   Qian J., 2008, JOINT C GIS BUILT EN, V7147, p71471J
   ROYSTON JP, 1982, J R STAT SOC C-APPL, V31, P115
   Saadi M. H., 2015, INT J APPL EVOLUTION, V6, P39
   Sachan RK, 2016, PROCEDIA COMPUT SCI, V89, P492, DOI 10.1016/j.procs.2016.06.107
   Sarro F., 2011, P 12 INT C PROD FOC, P38
   Sarro F., 2012, Proceedings of the 27th Annual ACM Symposium on Applied Computing, SAC '12, P1215, DOI DOI 10.1145/2245276.2231967
   Sarro F, 2012, P 27 ANN ACM S APPL, P1221, DOI DOI 10.1145/2245276.2231968
   Sarro F, 2016, PROC INT CONF SOFTW, P619, DOI 10.1145/2884781.2884830
   Satapathy SM., 2014, STORY POINT APPROACH
   Schneider A, 2010, DTSCH ARZTEBL INT, V107, P776, DOI [10.3238/arztebl.2010.0776, 10.3238/arztebl.2010.0799]
   Sharma M, 2021, ARCH COMPUT METHOD E, V28, P1103, DOI 10.1007/s11831-020-09412-6
   Sharma S., 2016, INT J ADV RES COMPUT, V6
   Shepperd M, 1997, IEEE T SOFTWARE ENG, V23, P736, DOI 10.1109/32.637387
   Shepperd M, 2013, IEEE T SOFTWARE ENG, V39, P1208, DOI 10.1109/TSE.2013.11
   Shepperd M, 2012, INFORM SOFTWARE TECH, V54, P820, DOI 10.1016/j.infsof.2011.12.008
   Shin M, 2000, IEEE T SOFTWARE ENG, V26, P567, DOI 10.1109/32.852743
   Shirabad S., 2005, The PROMISE Repository of Software Engineering Databases
   Sigweni B., 2015, Finnish Software Effort Dataset
   Sigweni M. Shepperd, 2016, P EASE 16
   Singh SP, 2018, J KING SAUD U COMPUT
   Smialowski P, 2010, BIOINFORMATICS, V26, P440, DOI 10.1093/bioinformatics/btp621
   Subitsha P., INT J TECHNOL ENHANC, V2
   Trelea IC, 2003, INFORM PROCESS LETT, V85, P317, DOI 10.1016/S0020-0190(02)00447-7
   Venkataiah V, 2017, LECT NOTE NETW SYST, V5, P315, DOI 10.1007/978-981-10-3226-4_32
   Wang HJ, 2009, PROC INT C TOOLS ART, P83, DOI 10.1109/ICTAI.2009.20
   Wang L, 2014, OPTIM METHOD SOFTW, V29, P703, DOI 10.1080/10556788.2013.834900
   Wiens TS, 2008, ECOL MODEL, V212, P244, DOI 10.1016/j.ecolmodel.2007.10.005
   Xue B, 2014, APPL SOFT COMPUT, V18, P261, DOI 10.1016/j.asoc.2013.09.018
   Yang X.-S., 2017, Nature-inspired Algorithms and Applied Optimization, V744
   Yang XS, 2009, STUD COMPUT INTELL, V191, P1, DOI 10.1109/MILCOM.2009.5379772
   Yang Xin-She, 2013, PREPRINT
   Yanli Liu, 2012, Information Computing and Applications. Proceedings of the Third International Conference, ICICA 2012, P246, DOI 10.1007/978-3-642-34062-8_32
NR 113
TC 13
Z9 13
U1 1
U2 5
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAY 1
PY 2021
VL 205
AR 102621
DI 10.1016/j.scico.2021.102621
EA FEB 2021
PG 27
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA RC1OV
UT WOS:000632572100001
DA 2024-07-18
ER

PT J
AU Guanciale, R
   Tuosto, E
AF Guanciale, Roberto
   Tuosto, Emilio
TI PomCho: Atool chain for choreographic design
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Choreography; Model-driven development; Message-passing applications;
   Pomset
AB We present a tool chain for model-driven development of asynchronous message-passing applications. The key features of the tool allow designers to identify misbehaviour leading to unsound communications, to provide counterexamples, and to suggest possible corrections as well as to project global specifications to local models in order to generate executable implementations. (C) 2020 Published by Elsevier B.V.
C1 [Guanciale, Roberto] KTH, Stockholm, Sweden.
   [Tuosto, Emilio] GSSI, Laquila, Italy.
   [Tuosto, Emilio] Univ Leicester, Leicester, Leics, England.
C3 Royal Institute of Technology; Gran Sasso Science Institute (GSSI);
   University of Leicester
RP Guanciale, R (corresponding author), KTH, Stockholm, Sweden.
EM robertog@kth.se; emilio.tuosto@gssi.it
FU EU H2020 RISE programme under the Marie Sklodowska-Curie grant [778233];
   MIUR project PRIN 2017FTXR7S IT MATTERS(Methods and Tools for
   Trustworthy Smart Systems); TrustFull project - Swedish Foundation for
   Strategic Research [RIT17-0036]; Swedish Foundation for Strategic
   Research (SSF) [RIT17-0036] Funding Source: Swedish Foundation for
   Strategic Research (SSF)
FX Research partly supported by the EU H2020 RISE programme under the Marie
   Sklodowska-Curie grant agreement No 778233, MIUR project PRIN 2017FTXR7S
   IT MATTERS(Methods and Tools for Trustworthy Smart Systems) and the
   TrustFull project, funded by the Swedish Foundation for Strategic
   Research (grant RIT17-0036).
CR Abu-Aisheh Z., 2015, INT C PATT REC APPL
   Alur R., 1996, Tools and Algorithms for the Construction and Analysis of Systems. Second International Workshop, TACAS '96. Proceedings, P35
   Alur R, 2003, IEEE T SOFTWARE ENG, V29, P623, DOI 10.1109/TSE.2003.1214326
   Autili M, 2019, LECT NOTES COMPUT SC, V11533, P92, DOI 10.1007/978-3-030-22397-7_6
   BenAbdallah H, 1997, LECT NOTES COMPUT SC, V1217, P259, DOI 10.1007/BFb0035393
   Bocchi L, 2014, LECT NOTES COMPUT SC, V8410, P493
   Carbone M, 2007, ELECTRON NOTES THEOR, V171, P127, DOI 10.1016/j.entcs.2006.12.041
   GARCIA OM, 2020, JADA JAVA DEADLOCK A, P169, DOI DOI 10.15581/004.38.169-189
   Gaudin Emmanuel, 2013, SDL 2013: Model-Driven Dependability Engineering. 16th International SDL Forum. Proceedings: LNCS 7916, P19, DOI 10.1007/978-3-642-38911-5_2
   Gay S., 2009, BEHAV TYPES THEORY T
   Guanciale R, 2019, J LOG ALGEBR METHODS, V108, P69, DOI 10.1016/j.jlamp.2019.06.003
   Guanciale R, 2019, LECT NOTES COMPUT SC, V11533, P237, DOI 10.1007/978-3-030-22397-7_14
   Guanciale R, 2016, ELECTRON P THEOR COM, P67, DOI 10.4204/EPTCS.223.5
   Gunter E. L., 2003, International Journal on Software Tools for Technology Transfer, V5, P78, DOI 10.1007/s10009-002-0085-2
   Gunter E. L., 2001, Tools and Algorithms for the Construction and Analysis of Systems. 7th International Conference, TACAS 2001. Held as Part of the Joint European Conferences on Theory and Practice of Software, ETAPS 2001. Proceedings (Lecture Notes in Computer Science Vol.2031), P496
   Harel D., 2003, COME LETS PLAY SCENA, DOI 10.1007/978-3-642-19029-2
   Honda K, 2016, J ACM, V63, DOI 10.1145/2827695
   Hüttel H, 2016, ACM COMPUT SURV, V49, DOI 10.1145/2873052
   Lange J., 2015, CHORGRAM
   Muscholl A, 2005, LECT NOTES COMPUT SC, V3466, P43
   PRATT V, 1986, INT J PARALLEL PROG, V15, P33, DOI 10.1007/BF01379149
   Tuosto E, 2018, J LOG ALGEBR METHODS, V95, P17, DOI 10.1016/j.jlamp.2017.11.002
   Van der Aalst W., 2011, PROCESS MINING DISCO, V2
NR 23
TC 4
Z9 4
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 1
PY 2021
VL 202
AR 102535
DI 10.1016/j.scico.2020.102535
PG 12
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA PC2SJ
UT WOS:000596856600003
DA 2024-07-18
ER

PT J
AU Kallis, R
   Di Sorbo, A
   Canfora, G
   Panichella, S
AF Kallis, Rafael
   Di Sorbo, Andrea
   Canfora, Gerardo
   Panichella, Sebastiano
TI Predicting issue types on GitHub
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Software maintenance and evolution; Issue reports management; Labeling
   unstructured data
AB Software maintenance and evolution involves critical activities for the success of software projects. To support such activities and keep code up-to-date and error-free, software communities make use of issue trackers, i.e., tools for signaling, handling, and addressing the issues occurring in software systems. However, in popular projects, tens or hundreds of issue reports are daily submitted. In this context, identifying the type of each submitted report (e.g., bug report, feature request, etc.) would facilitate the management and the prioritization of the issues to address. To support issue handling activities, in this paper, we propose TICKET TAGGER, a GitHub app analyzing the issue title and description through machine learning techniques to automatically recognize the types of reports submitted on GitHub and assign labels to each issue accordingly. We empirically evaluated the tool's prediction performance on about 30,000 GitHub issues. Our results show that the Ticket Tagger can identify the correct labels to assign to GitHub issues with reasonably high effectiveness. Considering these results and the fact that the tool is designed to be easily integrated in the GitHub issue management process, Ticket Tagger consists in a useful solution for developers. (C) 2020 Elsevier B.V. All rights reserved.
C1 [Kallis, Rafael] Valdon Grp, Seilergraben 53, CH-8001 Zurich, Switzerland.
   [Di Sorbo, Andrea; Canfora, Gerardo] Univ Sannio, Piazza Guerrazzi, I-82100 Benevento, Italy.
   [Panichella, Sebastiano] Zurich Univ Appl Sci, Obere Kirchgasse 2, CH-8400 Winterthur, Switzerland.
C3 University of Sannio; Zurich University of Applied Sciences
RP Kallis, R (corresponding author), Valdon Grp, Seilergraben 53, CH-8001 Zurich, Switzerland.
EM rk@rafaelkallis.com; disorbo@unisannio.it; canfora@unisannio.it;
   panc@zhaw.ch
OI Di Sorbo, Andrea/0000-0002-3192-739X; Panichella,
   Sebastiano/0000-0003-4120-626X
FU Horizon 2020 (EU Commission) [957254-COSMOS]
FX The authors express their gratitude and appreciation towards the
   anonymous reviewers who dedicated their considerable time and expertise
   to the paper. Sebastiano Panichella gratefully acknowledges the Horizon
   2020 (EU Commission) support for the project COSMOS(DevOps for Complex
   Cyber-physical Systems), Project No. 957254-COSMOS).
CR ALLEN DM, 1974, TECHNOMETRICS, V16, P125, DOI 10.2307/1267500
   Antoniol Giuliano, 2008, P 2008 C CTR ADV STU
   Baeza-Yates Ricardo, 1999, MODERN INFORM RETRIE, V463
   Bissyandé TF, 2013, PROC INT SYMP SOFTW, P188, DOI 10.1109/ISSRE.2013.6698918
   Cabot J, 2015, 2015 22ND INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER), P550, DOI 10.1109/SANER.2015.7081875
   Izquierdo JLC, 2015, 2015 22ND INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER), P479, DOI 10.1109/SANER.2015.7081860
   Di Sorbo A, 2021, J SOFTW-EVOL PROC, V33, DOI 10.1002/smr.2316
   Di Sorbo A, 2016, 2016 IEEE/ACM 38TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING COMPANION (ICSE-C), P641, DOI 10.1145/2889160.2889170
   Di Sorbo A, 2016, FSE'16: PROCEEDINGS OF THE 2016 24TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON FOUNDATIONS OF SOFTWARE ENGINEERING, P499, DOI 10.1145/2950290.2950299
   Fan Q, 2017, INT SYMP EMP SOFTWAR, P121, DOI 10.1109/ESEM.2017.19
   Harald H. Vogt, 2010, SAVE SOFTWARE MAINTE, V2
   Herbold S, 2020, EMPIR SOFTW ENG, V25, P5333, DOI 10.1007/s10664-020-09885-w
   Joulin A., 2017, P 15 C EUR CHAPT ASS, P427, DOI DOI 10.18653/V1/E17-2068
   Kallis R, 2019, PROC IEEE INT CONF S, P406, DOI 10.1109/ICSME.2019.00070
   Liao ZF, 2018, IEEE ACCESS, V6, P24003, DOI 10.1109/ACCESS.2018.2810295
   Panichella S, 2015, PROC IEEE INT CONF S, P281, DOI 10.1109/ICSM.2015.7332474
   Panichella S, 2014, PROC IEEE INT CONF S, P251, DOI 10.1109/ICSME.2014.47
   Russo ER, 2019, J SYST SOFTWARE, V156, P84, DOI 10.1016/j.jss.2019.06.001
   Yang XL, 2016, J COMPUT SCI TECH-CH, V31, P910, DOI 10.1007/s11390-016-1672-0
   Zhou Y, 2016, J SOFTW-EVOL PROC, V28, P150, DOI 10.1002/smr.1770
NR 20
TC 42
Z9 45
U1 0
U2 10
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAY 1
PY 2021
VL 205
AR 102598
DI 10.1016/j.scico.2020.102598
EA FEB 2021
PG 7
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA RC1OV
UT WOS:000632572100006
OA Green Submitted, Green Accepted
DA 2024-07-18
ER

PT J
AU Zhang, WX
   Oliveira, BCDS
AF Zhang, Weixin
   Oliveira, Bruno C. d S.
TI CASTOR: Programming with extensible generative visitors
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Modularity; Visitor pattern; Pattern matching; Metaprogramming; OOP
AB Much recent work on type-safe extensibility for Object-Oriented languages has focused on design patterns that require modest type system features. Examples of such design patterns include Object Algebras, Extensible Visitors, Finally Tagless interpreters, or Polymorphic Embeddings. Those techniques, which often use a functional style, can solve basic forms of the Expression Problem. However, they have important limitations.
   This paper presents CASTOR: a Scala framework for programming with extensible, generative visitors. CASTOR has several advantages over previous approaches. Firstly, CASTOR comes with support for (type-safe) pattern matching to complement its visitors with a concise notation to express operations. Secondly, CASTOR supports type-safe interpreters (a la Finally Tagless), but with additional support for pattern matching and a generally recursive style. Thirdly, CASTOR enables many operations to be defined using an imperative style, which is significantly more performant than a functional style (especially in the JVM platform). Finally, functional techniques usually only support tree structures well, but graph structures are poorly supported. CASTOR supports type-safe extensible programming on graph structures. The key to CASTOR'S usability is the use of annotations to automatically generate large amounts of boilerplate code to simplify programming with extensible visitors. To illustrate the applicability of CASTOR we present several applications and two case studies. The first case study compares the ability of CASTOR for modularizing the interpreters from the "Types and Programming Languages" book with previous modularization work. The second case study on UML activity diagrams illustrates the imperative aspects of CASTOR, as well as its support for hierarchical datatypes and graphs. (C) 2020 Elsevier B.V. All rights reserved.
C1 [Zhang, Weixin; Oliveira, Bruno C. d S.] Univ Hong Kong, Hong Kong, Peoples R China.
C3 University of Hong Kong
RP Zhang, WX (corresponding author), Univ Hong Kong, Hong Kong, Peoples R China.
EM wxzhang2@cs.hku.hk; bruno@cs.hku.hk
RI dos Santos Oliveira, Bruno Cesar/I-7977-2013
OI Zhang, Weixin/0000-0001-7105-0783
FU Hong Kong Research Grant Council [17210617, 17209519]
FX We thank the anonymous reviewers and James Noble for their helpful
   comments that significantly improve the presentation of this paper. This
   work was funded by Hong Kong Research Grant Council projects number
   17210617 and 17209519.
CR [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], 2004, TECH REP
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], 1997, The Definition of Standard ML
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], 2003, Haskell 98 language and libraries: the revised report
   Bahr P, 2011, WGP 11: PROCEEDINGS OF THE 2011 ACM SIGPLAN WORKSHOP ON GENERIC PROGRAMMING, P83
   Buchlovsky P, 2006, ELECTRON NOTES THEOR, V155, P309, DOI 10.1016/j.entcs.2005.11.061
   Burmako  Eugene, 2017, THESIS
   Carette J, 2009, J FUNCT PROGRAM, V19, P509, DOI 10.1017/S0956796809007205
   Church A, 1936, AM J MATH, V58, P345, DOI 10.2307/2371045
   Clifton C, 2000, ACM SIGPLAN NOTICES, V35, P130, DOI 10.1145/354222.353181
   Combemale B, 2018, COMPUT LANG SYST STR, V54, P139, DOI 10.1016/j.cl.2018.05.004
   Ducasse S, 2006, ACM T PROGR LANG SYS, V28, P331, DOI 10.1145/1119479.1119483
   Fowler M, 2005, Language workbenches: The killer-app for domain specific languages?
   Gamma Erich., 1994, DESIGN PATTERNS
   Garrigue J., 2000, WORKSH FDN SOFTW ENG
   Garrigue J, 1998, ML WORKSH, P1
   Geller F., 2010, PATTERN MATCHING OBJ, V36
   Gibbons Jeremy., 2003, FUN PROGRAMMING, P41
   Hinze R, 2006, J FUNCT PROGRAM, V16, P451, DOI 10.1017/S0956796806006022
   Homer Michael., 2012, Proceedings of the 8th symposium on Dynamic languages, DLS '12, P17, DOI [10.1145/2384577.2384581, DOI 10.1145/2384577.2384581]
   Kiselyov Oleg, 2012, Generic and Indexed Programming. International Spring School, SSGIP 2010. Revised Lectures, P130, DOI 10.1007/978-3-642-32202-0_3
   Liu J., 2003, PADL
   LOH A, 2006, P 8 ACM SIGPLAN INT
   Martin RobertC., 2002, PRINCIPLES PATTERNS
   Mayerhofer T., 2015, TTC 15, V15, P2
   Meyer B, 2006, COMPUTER, V39, P23, DOI 10.1109/MC.2006.227
   Oliveira BCDS, 2013, LECT NOTES COMPUT SC, V7920, P27, DOI 10.1007/978-3-642-39038-8_2
   Pati T, 2014, SOFTWARE PRACT EXPER, V44, P699, DOI 10.1002/spe.2167
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Rompf T, 2011, ACM SIGPLAN NOTICES, V46, P127, DOI 10.1145/1942788.1868314
   Steinberg D., 2008, EMF: Eclipse Modeling Framework, Vsecond
   Swierstra W, 2008, J FUNCT PROGRAM, V18, P423, DOI 10.1017/S0956796808006758
   Vacchi E, 2015, COMPUT LANG SYST STR, V43, P1, DOI 10.1016/j.cl.2015.02.001
   Zhang WQ, 2018, COMM COM INF SC, V857, P17, DOI 10.1007/978-981-13-1026-3_2
NR 65
TC 2
Z9 2
U1 0
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29a, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUL 1
PY 2020
VL 193
AR 102449
DI 10.1016/j.scico.2020.102449
PG 33
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA LG6EP
UT WOS:000528192000004
OA Bronze
DA 2024-07-18
ER

PT J
AU Avanzini, M
   Dal Lago, U
   Yamada, A
AF Avanzini, Martin
   Dal Lago, Ugo
   Yamada, Akihisa
TI On probabilistic term rewriting
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Probabilistic abstract reduction systems; Probabilistic term rewriting;
   Almost sure termination; Interpretation method
ID TERMINATION ANALYSIS
AB We study the termination problem for probabilistic term rewrite systems. We prove that the interpretation method is sound and complete for a strengthening of positive almost sure termination, when abstract reduction systems and term rewrite systems are considered. Two instances of the interpretation method-polynomial and matrix interpretations-are analyzed and shown to capture interesting and nontrivial examples when automated. We capture probabilistic computation in a novel way by means of multidistribution reduction sequences, thus accounting for both the nondeterminism in the choice of the redex and the probabilism intrinsic in firing each rule. (C) 2019 The Authors. Published by Elsevier B.V.
C1 [Avanzini, Martin; Dal Lago, Ugo] INRIA Sophia Antipolis, Biot, France.
   [Dal Lago, Ugo] Univ Bologna, Bologna, Italy.
   [Yamada, Akihisa] Natl Inst Informat, Tokyo, Japan.
C3 University of Bologna; Research Organization of Information & Systems
   (ROIS); National Institute of Informatics (NII) - Japan
RP Avanzini, M; Dal Lago, U (corresponding author), INRIA Sophia Antipolis, Biot, France.; Dal Lago, U (corresponding author), Univ Bologna, Bologna, Italy.; Yamada, A (corresponding author), Natl Inst Informat, Tokyo, Japan.
EM martin.avanzini@inria.fr; ugo.dallago@unibo.it; akihisayamada@nii.ac.jp
RI Yamada, Akihisa/AAQ-4545-2020; Dal Lago, Ugo/AAA-6022-2020
OI Dal Lago, Ugo/0000-0001-9200-070X; Yamada, Akihisa/0000-0001-8872-2240
FU ANR [14CE250005 ELICA, 16CE250011 REPAS]; FWF [Y757]; JSPS-INRIA
   bilateral joint research project "CRECOGI"; ERC Consolidator Grant
   [DLV-818616 DIAPASON]; JST ERATO HASUO Metamathematics for Systems
   Design Project [JPMJER1603]
FX This work is partially supported by the ANR projects 14CE250005 ELICA
   and 16CE250011 REPAS, the FWF project Y757, the JSPS-INRIA bilateral
   joint research project "CRECOGI", the ERC Consolidator Grant DLV-818616
   DIAPASON, and JST ERATO HASUO Metamathematics for Systems Design Project
   (No. JPMJER1603).
CR Agha G, 2006, ELECTRON NOTES THEOR, V153, P213, DOI 10.1016/j.entcs.2005.10.040
   [Anonymous], P 10 DICE 6 FOPARA
   [Anonymous], 1975, ATP25 U TEX
   [Anonymous], 1956, Automata Studies, Annals of Mathematics Studies
   [Anonymous], LOG METHODS COMPUT S
   Avanzini M., 2013, THESIS
   Avanzini M, 2018, LECT NOTES COMPUT SC, V10818, P132, DOI 10.1007/978-3-319-90686-7_9
   Baader Franz, 1998, TERM REWRITING ALL
   Bournez O, 2005, LECT NOTES COMPUT SC, V3467, P323
   Bournez O, 2002, LECT NOTES COMPUT SC, V2378, P252
   Bournez O, 2006, LECT NOTES COMPUT SC, V4098, P357
   Chakarov Aleksandar, 2013, Computer Aided Verification. 25th International Conference, CAV 2013. Proceedings. LNCS 8044, P511, DOI 10.1007/978-3-642-39799-8_34
   Chatterjee K, 2016, LECT NOTES COMPUT SC, V9779, P3, DOI 10.1007/978-3-319-41528-4_1
   Dal Lago U, 2017, LECT NOTES COMPUT SC, V10201, P393, DOI 10.1007/978-3-662-54434-1_15
   Dal Lago U, 2012, RAIRO-THEOR INF APPL, V46, P413, DOI 10.1051/ita/2012012
   Endrullis J, 2008, J AUTOM REASONING, V40, P195, DOI 10.1007/s10817-007-9087-9
   Fioriti LMF, 2015, ACM SIGPLAN NOTICES, V50, P489, DOI 10.1145/2676726.2677001
   Fu HF, 2019, LECT NOTES COMPUT SC, V11388, P468, DOI 10.1007/978-3-030-11245-5_22
   Fuhs C, 2007, LECT NOTES COMPUT SC, V4501, P340
   GILL J, 1977, SIAM J COMPUT, V6, P675, DOI 10.1137/0206049
   Gnaedig Isabelle, 2007, Proceedings of the 9th International ACM SIGPLAN Conference on Principles and Practice of Declarative Programming (PPDP'07), P167, DOI 10.1145/1273920.1273943
   GOLDWASSER S, 1984, J COMPUT SYST SCI, V28, P270, DOI 10.1016/0022-0000(84)90070-9
   Hirokawa Nao, 2014, Rewriting and Typed Lambda Calculi. Joint International Conference, RTA-TLCA 2014, Held as Part of the Vienna Summer of Logic, VSL 2014. Proceedings: LNCS 8560, P257, DOI 10.1007/978-3-319-08918-8_18
   HOFBAUER D, 1989, LECT NOTES COMPUT SC, V355, P167
   JONES C, 1989, FOURTH ANNUAL SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P186
   Kaminski BL, 2018, J ACM, V65, DOI 10.1145/3208102
   Kaminski BL, 2015, LECT NOTES COMPUT SC, V9234, P307, DOI 10.1007/978-3-662-48057-1_24
   Lankford D., 1979, MTP3 LOUIS TU
   Lucas S, 2005, RAIRO-THEOR INF APPL, V39, P547, DOI 10.1051/ita:2005029
   McIver A., 2018, J P ACM PROGRAM LANG, V2, P33
   Motwani Rajeev, 1995, RANDOMIZED ALGORITHM
   Nestor C, 2008, BIOL REPROD, P220
   Ngo N.C., 2018, PROC 39 PLDI, P496
   Puterman ML., 2014, MARKOV DECISION PROC, DOI DOI 10.1002/9780470316887
   RABIN MO, 1963, INFORM CONTROL, V6, P230, DOI 10.1016/S0019-9958(63)90290-0
   Saheb-Djahromi N., 1978, Mathematical Foundations of Computer Science 1978, P442
   SANTOS ES, 1969, P AM MATH SOC, V22, P704, DOI 10.2307/2037463
   Terese, 2003, CAMBRIDGE TRACTS THE, V55
   Yamada Akihisa, 2014, Rewriting and Typed Lambda Calculi. Joint International Conference, RTA-TLCA 2014, Held as Part of the Vienna Summer of Logic, VSL 2014. Proceedings: LNCS 8560, P466, DOI 10.1007/978-3-319-08918-8_32
NR 39
TC 13
Z9 13
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 1
PY 2020
VL 185
AR 102338
DI 10.1016/j.scico.2019.102338
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA JR6VU
UT WOS:000499761400004
OA Green Submitted, Green Published, hybrid
DA 2024-07-18
ER

PT J
AU Damiani, F
   Lienhardt, M
   Paolini, L
AF Damiani, Ferruccio
   Lienhardt, Michael
   Paolini, Luca
TI A formal model for Multi Software Product Lines
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Core calculus; Delta-oriented programming; Featherweight Java; Multi
   software product line
ID CHECKING; VARIABILITY
AB A Software Product Line (SPL) is a family of similar programs generated from a common artifact base. A Multi SPL (MPL) is a set of interdependent SPLs that are typically managed and developed in a decentralized fashion. Delta-Oriented Programming (DOP) is a flexible and modular approach to implement SPLs. This paper presents new concepts that extend DOP to support the implementation of MPLs. These extensions aim to accommodate compositional analyses. They are presented by means of a core calculus for delta-oriented MPLs of Java programs. Suitability for MPL compositional analyses is demonstrated by compositional reuse of existing SPL analysis techniques. (C) 2018 Elsevier B.V. All rights reserved.
C1 [Damiani, Ferruccio; Lienhardt, Michael; Paolini, Luca] Univ Turin, Dipartimento Informat, Turin, Italy.
C3 University of Turin
RP Damiani, F (corresponding author), Univ Turin, Dipartimento Informat, Turin, Italy.
EM ferruccio.damiani@unito.it; michael.lienhardt@unito.it;
   luca.paolini@unito.it
RI Ferruccio, Damiani/D-2383-2011; Paolini, Luca/M-8924-2019
OI Ferruccio, Damiani/0000-0001-8109-1706; Paolini,
   Luca/0000-0002-4126-0170
FU EU Horizon 2020 project HyVar [644298]; ICT COST Action [IC1402 ARVI];
   Ateneo/CSP project RunVar [D16D15000360005]; H2020 - Industrial
   Leadership [644298] Funding Source: H2020 - Industrial Leadership
FX This work has been partially supported by: EU Horizon 2020 project HyVar
   (www.hyvar-project.eu), GA No. 644298; ICT COST Action IC1402 ARVI
   (www.cost-arvi.eu); Ateneo/CSP D16D15000360005 project RunVar
   (runvar-project.di.unito.it).
CR [Anonymous], 2014, INT C PRINC PRACT PR
   [Anonymous], 2008, P WORKSH MOD COMP GE
   [Anonymous], 2016, Feature-Oriented Software Product Lines
   Batory D, 2004, IEEE T SOFTWARE ENG, V30, P355, DOI 10.1109/TSE.2004.23
   Batory D, 2005, LECT NOTES COMPUT SC, V3714, P7
   Bettini L, 2013, ACTA INFORM, V50, P77, DOI 10.1007/s00236-012-0173-z
   Bubel R., 2016, LNCS, V9960, P130, DOI [10.1007/978-3-319-46508-1, DOI 10.1007/978-3-319-46508-1]
   Chesta C, 2016, LECT NOTES COMPUT SC, V9953, P497, DOI 10.1007/978-3-319-47169-3_40
   Damiani Ferruccio, 2017, Integrated Formal Methods. 13th International Conference, IFM 2017. Proceedings: LNCS 10510, P111, DOI 10.1007/978-3-319-66845-1_8
   Damiani Ferruccio, 2012, Leveraging Applications of Formal Methods, Verification and Validation. Technologies for Mastering Change. Technologies for Mastering Change. Proceedings of the 5th International Symposium, ISoLA 2012, P193, DOI 10.1007/978-3-642-34026-0_15
   Damiani F., 2012, P16 INT SOFTW PROD L, V2, P53, DOI [10.1145/2364412.2364422, DOI 10.1145/2364412.2364422]
   Damiani  F., 2012, ROC 27 ANN ACM S APP, P1737
   Damiani F, 2018, SPLC'18: PROCEEDINGS OF THE 22ND INTERNATIONAL SYSTEMS AND SOFTWARE PRODUCT LINE CONFERENCE, VOL 1, P264, DOI 10.1145/3233027.3236401
   Damiani F, 2017, LECT NOTES COMPUT SC, V10522, P67, DOI 10.1007/978-3-319-68972-2_5
   Damiani F, 2017, SOFTW SYST MODEL, V16, P1223, DOI 10.1007/s10270-016-0516-2
   Damiani F, 2016, LECT NOTES COMPUT SC, V9681, P47, DOI 10.1007/978-3-319-33693-0_4
   Damiani F, 2014, 18TH INTERNATIONAL SOFTWARE PRODUCT LINE CONFERENCE (SPLC 2014), VOL 1, P232, DOI 10.1145/2648511.2648536
   Damiani Ferruccio, 2018, Principled Software Development: Essays Dedicated to Arnd PoetzschHeffter on the Occasion of his 60th Birthday, P99
   de Roever W.P., 1998, CAMBRIDGE TRACTS THE, V46
   Delaware B, 2009, 7TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P243, DOI 10.1145/1595696.1595733
   Din CC, 2018, J LOG ALGEBR METHODS, V95, P82, DOI 10.1016/j.jlamp.2017.11.004
   Faitelson D, 2011, INT J SYST ASSUR ENG, V2, P144, DOI 10.1007/s13198-011-0060-y
   Hahnle Reiner, 2013, Automated Deduction - CADE-24. 24th International Conference on Automated Deduction. Proceedings: LNCS 7898, P300, DOI 10.1007/978-3-642-38574-2_21
   Hahnle Reiner, 2012, Leveraging Applications of Formal Methods, Verification and Validation. Technologies for Mastering Change. Technologies for Mastering Change. Proceedings of the 5th International Symposium, ISoLA 2012, P32, DOI 10.1007/978-3-642-34026-0_4
   HAREL D, 1987, SCI COMPUT PROGRAM, V8, P231, DOI 10.1016/0167-6423(87)90035-9
   Holl G, 2012, INFORM SOFTWARE TECH, V54, P828, DOI 10.1016/j.infsof.2012.02.002
   Igarashi A, 2001, ACM T PROGR LANG SYS, V23, P396, DOI 10.1145/503502.503505
   Johnsen EB, 2012, LNCS, P142, DOI DOI 10.1007/978-3-642-25271-6_8
   Kästner C, 2012, ACM SIGPLAN NOTICES, V47, P773, DOI 10.1145/2398857.2384673
   Kamburjan E, 2017, COMM COM INF SC, V694, P55, DOI 10.1007/978-3-319-53946-1_4
   Lienhardt Michael, 2012, Leveraging Applications of Formal Methods, Verification and Validation. Technologies for Mastering Change. Technologies for Mastering Change. Proceedings of the 5th International Symposium, ISoLA 2012, P178, DOI 10.1007/978-3-642-34026-0_14
   Lienhardt M, 2017, ACM INT CONF PR SER, P89, DOI 10.1145/3168365.3170425
   Lienhardt M, 2018, SCI COMPUT PROGRAM, V166, P3, DOI 10.1016/j.scico.2018.05.007
   Northrop L., 2001, SOFTWARE PRODUCT LIN
   Pohl K., 2005, SOFTWARE PRODUCT LIN, V10
   Schaefer I., 2012, International Journal on Software Tools for Technology Transfer (STTT), V14, P477, DOI [DOI 10.1007/S10009-012-0253-Y, 10.1007/s10009-012-0253-y]
   Schaefer I, 2010, LECT NOTES COMPUT SC, V6287, P77, DOI 10.1007/978-3-642-15579-6_6
   Schaefer Ina, 2010, P 2 INT WORKSH FEAT, P49
   Schröter R, 2016, PROC INT CONF SOFTW, P667, DOI 10.1145/2884781.2884823
   Schröter R, 2014, 18TH INTERNATIONAL SOFTWARE PRODUCT LINE CONFERENCE (SPLC 2014), VOL 1, P102, DOI 10.1145/2648511.2648522
   Schroter  R., 2013, 7 INT WORKSH VAR MOD
   Schroter  R., 2013, P 17 INT SOFTW PROD, P96
   Thaker Sahil., 2007, P 6 INT C GENERATIVE, P95
   Thüm T, 2016, TENTH INTERNATIONAL WORKSHOP ON VARIABILITY MODELLING OF SOFTWARE-INTENSIVE SYSTEMS (VAMOS 2016), P97, DOI 10.1145/2866614.2866628
   Thüm T, 2014, ACM COMPUT SURV, V47, DOI 10.1145/2580950
   von Rhein A, 2016, J LOG ALGEBR METHODS, V85, P125, DOI 10.1016/j.jlamp.2015.06.007
   Winkelmann Tim, 2016, CEUR WORKSHOP PROCEEDINGS, V1559, P40
NR 47
TC 9
Z9 9
U1 0
U2 7
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR 1
PY 2019
VL 172
BP 203
EP 231
DI 10.1016/j.scico.2018.11.005
PG 29
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA HK8HC
UT WOS:000458229000010
OA Green Submitted, hybrid
DA 2024-07-18
ER

PT J
AU Rodriguez-Echeverria, R
   Preciado, JC
   Sierra, J
   Conejero, JM
   Sanchez-Figueroa, F
AF Rodriguez-Echeverria, Roberto
   Preciado, Juan C.
   Sierra, Javier
   Conejero, Jose M.
   Sanchez-Figueroa, Fernando
TI AutoCRUD: Automatic generation of CRUD specifications in interaction
   flow modelling language
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Model driven web engineering; IFML; CRUD; Tool
AB Data-intensive Web applications are usually developed by means of specific Web application frameworks, which provide, among other features, the proper tools to automate redundant tasks, e.g. the implementation of CRUD operations. However, although Model-Driven Web Engineering (MDWE) approaches have defined specific languages and tools to significantly reduce development efforts, the provision of such automation tools has been traditionally neglected. This paper presents AutoCRUD, a WebRatio plug-in automating the generation of CRUD operations in OMG Interacting Flow Modelling Language (IFML). It has been developed as a joint effort by academia and industry to assess its validity in a real scenario. (C) 2018 Elsevier B.V. All rights reserved.
C1 [Rodriguez-Echeverria, Roberto; Preciado, Juan C.; Sierra, Javier; Conejero, Jose M.; Sanchez-Figueroa, Fernando] Univ Extremadura, Av Univ S-N, Caceres, Spain.
C3 Universidad de Extremadura
RP Rodriguez-Echeverria, R (corresponding author), Univ Extremadura, Av Univ S-N, Caceres, Spain.
EM rre@unex.es
RI Rodriguez-Echeverria, Roberto/B-4964-2014; Manzano, José M.
   Conejero/AAF-9336-2019
OI Rodriguez-Echeverria, Roberto/0000-0002-6545-0913; Manzano, José M.
   Conejero/0000-0003-2640-679X
FU MINECO, FEDER, UE [TIN2015-69957-R]; Consejeria de Economia e
   Infraestructuras de Junta de Extremadura (Spain) - European Regional
   Development Fund (ERDF) [GR15098, 1816055]; Homeria Open Solutions, S.L.
FX Funded and supported by TIN2015-69957-R (MINECO, FEDER, UE) project,
   Consejeria de Economia e Infraestructuras de Junta de Extremadura
   (Spain) - European Regional Development Fund (ERDF) - GR15098 project
   and 1816055 project and Homeria Open Solutions, S.L.
CR Acerbis R, 2015, LECT NOTES COMPUT SC, V9114, P605, DOI 10.1007/978-3-319-19890-3_39
   Brambilla M., 2014, Interaction Flow Modeling Language: Model-Driven UI Engineering of Web and Mobile Apps with IFML
   Fowler M., 2002, Patterns of Enterprise Application Architecture
   Mbarki S., 2008, INFOCOMP, V7, P84
   Papotti Paulo Eduardo, 2013, Advanced Information Systems Engineering. 25th International Conference, CAiSE 2013. Proceedings: LNCS 7908, P321, DOI 10.1007/978-3-642-38709-8_21
   Rodriguez-Echeverria R, 2016, PROCEEDINGS OF THE 12TH INTERNATIONAL CONFERENCE ON WEB INFORMATION SYSTEMS AND TECHNOLOGIES, VOL 1 (WEBIST), P307, DOI 10.5220/0005923003070314
NR 6
TC 7
Z9 8
U1 0
U2 3
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 15
PY 2018
VL 168
BP 165
EP 168
DI 10.1016/j.scico.2018.09.004
PG 4
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA HA6JG
UT WOS:000450385200008
OA Bronze
DA 2024-07-18
ER

PT J
AU Gornes, PD
   Gurov, D
   Huisman, M
   Artho, C
AF Gornes, Pedro de C.
   Gurov, Dilian
   Huisman, Marieke
   Artho, Cyrille
TI Specification and verification of synchronization with condition
   variables
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Concurrency; Formal verification; Java; Condition variables
ID ATOMICITY
AB This paper proposes a technique to specify and verify the correct synchronization of concurrent programs with condition variables. We define correctness of synchronization as the liveness property: "every thread synchronizing under a set of condition variables eventually exits the synchronization block", under the assumption that every such thread eventually reaches its synchronization block. Our technique does not avoid the combinatorial explosion of interleavings of thread behaviours, Instead, we alleviate it by abstracting away all details that are irrelevant to the synchronization behaviour of the program, which is typically significantly smaller than its overall behaviour. First, we introduce SyncTask, a simple imperative language to specify parallel computations that synchronize via condition variables. We consider a SyncTask program to have a correct synchronization iff it terminates. Further, to relieve the programmer from the burden of providing specifications in SyncTask, we introduce an economic annotation scheme for Java programs to assist the automated extraction of SyncTask programs capturing the synchronization behaviour of the underlying program. We show that every Java program annotated according to the scheme (and satisfying the assumption mentioned above) has a correct synchronization iff its corresponding SyncTask program terminates. We then show how to transform the verification of termination of the SyncTask program into a standard reachability problem over Coloured Petri Nets that is efficiently solvable by existing Petri Net analysis tools. Both the SyncTask program extraction and the generation of Petri Nets are implemented in our STAVE tool. We evaluate the proposed framework on a number of test cases. (C) 2018 Elsevier B.V. All rights reserved.
C1 [Gornes, Pedro de C.; Gurov, Dilian; Artho, Cyrille] KTH Royal Inst Technol, Stockholm, Sweden.
   [Huisman, Marieke] Univ Twente, Enschede, Netherlands.
C3 Royal Institute of Technology; University of Twente
RP Gornes, PD (corresponding author), KTH Royal Inst Technol, Stockholm, Sweden.
EM pedrodcg@kth.se; dilian@kth.se; m.huisman@utwente.nl; artho@kth.se
RI Gurov, Dilian/ITU-2606-2023
OI Huisman, Marieke/0000-0003-4467-072X; Gurov, Dilian/0000-0002-0074-8786;
   de Carvalho Gomes, Pedro/0000-0002-6468-1605
FU ERC [258405]; European Research Council (ERC) [258405] Funding Source:
   European Research Council (ERC)
FX Supported by ERC grant 258405 for the VerCors project.
CR [Anonymous], 2014, The Java Language Specification, Java SE
   Artho C, 2004, LECT NOTES COMPUT SC, V3299, P150
   Artho C, 2003, SOFTW TEST VERIF REL, V13, P207, DOI 10.1002/stvr.281
   Cenciarelli P., 1999, LECT NOTES COMP SCI, V1523, P157
   Comes P., 2015, SYNCTASK VERIFIER
   Dias Ricardo J, 2012, P 8 INT HAIF VER C H, P8, DOI [10.1007/978-3-642-39611-3_8, DOI 10.1007/978-3-642-39611-3_8]
   Dingle Nicholas J., 2009, Performance Evaluation Review, V36, P34, DOI 10.1145/1530873.1530881
   Flanagan C, 2004, ACM SIGPLAN NOTICES, V39, P256, DOI 10.1145/982962.964023
   Gomes P. de Carvalho, 2015, TECH REP
   Gomes P. de Carvalho, 2017, SPECIFICATION VERIFI, P3
   HOARE CAR, 1974, COMMUN ACM, V17, P549, DOI 10.1145/355620.361161
   International Organization for Standardization, 2011, INF TECHN PROGR LANG
   Jensen Kurt, 2007, International Journal on Software Tools for Technology Transfer, V9, P213, DOI 10.1007/s10009-007-0038-x
   Jensen K., 2006, TECH REP
   Jensen K, 2009, COLOURED PETRI NETS: MODELLING AND VALIDATION OF CONCURRENT SYSTEMS, P1, DOI 10.1007/b95112
   Kaiser C, 2009, LECT NOTES COMPUT SC, V5570, P90, DOI 10.1007/978-3-642-01924-1_7
   Kavi KM, 2002, INT J PARALLEL PROG, V30, P353, DOI 10.1023/A:1019917329895
   LAMPORT L, 1979, IEEE T COMPUT, V28, P690, DOI 10.1109/TC.1979.1675439
   Leavens GT, 1999, SPRING INT SER ENG C, V523, P175
   Leino KRM, 2010, LECT NOTES COMPUT SC, V6012, P407, DOI 10.1007/978-3-642-11957-6_22
   Leungwattanakit W, 2014, IEEE T SOFTWARE ENG, V40, P483, DOI 10.1109/TSE.2013.49
   Lu S, 2008, ACM SIGPLAN NOTICES, V43, P329, DOI 10.1145/1353536.1346323
   Milner R., 1999, COMMUNICATING MOBILE, P52
   Miné A, 2012, LOG METH COMPUT SCI, V8, DOI 10.2168/LMCS-8(1:26)2012
   Monat R, 2017, LECT NOTES COMPUT SC, V10145, P386, DOI 10.1007/978-3-319-52234-0_21
   Mund Jakob, 2013, Automated Technology for Verification and Analysis. 11th International Symposium, ATVA 2013. Proceedings: LNCS 8172, P516, DOI 10.1007/978-3-319-02444-8_45
   Musuvathi M., 2008, Proceedings of the 8th USENIX conference on Operating systems design and implementation, OSDI'08, P267
   Popeea C, 2012, LECT NOTES COMPUT SC, V7214, P237, DOI 10.1007/978-3-642-28756-5_17
   Raychev V, 2013, LECT NOTES COMPUT SC, V7935, P283, DOI 10.1007/978-3-642-38856-9_16
   Rustan K, 2009, LECT NOTES COMPUT SC, V5502, P378, DOI 10.1007/978-3-642-00590-9_27
   van der Aalst Wil M. P., 2013, Transactions on Petri Nets and Other Models of Concurrency VII, P6, DOI 10.1007/978-3-642-38143-0_2
   Visser W., 2003, Automated Software Engineering, V10, P203, DOI 10.1023/A:1022920129859
   Wang C, 2014, LECT NOTES COMPUT SC, V8318, P376, DOI 10.1007/978-3-642-54013-4_21
   Westergaard M, 2012, LECT NOTES COMPUT SC, V7400, P146, DOI 10.1007/978-3-642-35179-2_7
NR 34
TC 4
Z9 4
U1 1
U2 7
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 1
PY 2018
VL 163
BP 174
EP 189
DI 10.1016/j.scico.2018.05.001
PG 16
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GN0MN
UT WOS:000438662800011
OA Green Submitted, Green Published
DA 2024-07-18
ER

PT J
AU Milojkovic, N
   Béra, C
   Ghafari, M
   Nierstrasz, O
AF Milojkovic, Nevena
   Bera, Clement
   Ghafari, Mohammad
   Nierstrasz, Oscar
TI Mining inline cache data to order inferred types in dynamic languages
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Type inference; Dynamically-typed languages; Inline caches
AB The lack of static type information in dynamically-typed languages often poses obstacles for developers. Type inference algorithms can help, but inferring precise type information requires complex algorithms that are often slow.
   A simple approach that considers only the locally used interface of variables can identify potential classes for variables, but popular interfaces can generate a large number of false positives. We propose an approach called inline-cache type inference (ICTI) to augment the precision of fast and simple type inference algorithms. ICTI uses type information available in the inline caches during multiple software runs, to provide a ranked list of possible classes that most likely represent a variable's type. We evaluate 101 through a proof-of concept that we implement in Pharo Smalltalk. The analysis of the top-n + 2 inferred types (where n is the number of recorded run-time types for a variable) for 5486 variables from four different software systems shows that ICTI produces promising results for about 75% of the variables. For more than 90% of variables, the correct run-time type is present among first six inferred types. Our ordering shows a twofold improvement when compared with the unordered basic approach, i.e., for a significant number of variables for which the basic approach offered ambiguous results, ICTI was able to promote the correct type to the top of the list. (C) 2017 Elsevier B.V. All rights reserved.
C1 [Milojkovic, Nevena; Ghafari, Mohammad; Nierstrasz, Oscar] Univ Bern, Software Composit Grp, Bern, Switzerland.
   [Bera, Clement] INRIA Lille Nord Europe, RMOD, Villeneuve Dascq, France.
C3 University of Bern
RP Milojkovic, N (corresponding author), Univ Bern, Software Composit Grp, Bern, Switzerland.
EM nevena@inf.unibe.ch
OI Ghafari, Mohammad/0000-0002-1986-9668; Nierstrasz,
   Oscar/0000-0002-9975-9791
FU Swiss National Science Foundation (SNSF) [200020-162352]; Ministere de
   l'enseignement superieur et de la recherche, Conseil regional Nord-Pas
   de Calais, CPER Nord-Pas de Calais/FEDER DATA Advanced data science and
   technologies
FX We gratefully acknowledge the financial support of the Swiss National
   Science Foundation for the project "Agile Software Analysis" (SNSF
   project No. 200020-162352, Jan 1, 2016 - Dec. 30, 2018).; This work was
   supported by Ministere de l'enseignement superieur et de la recherche,
   Conseil regional Nord-Pas de Calais, CPER Nord-Pas de Calais/FEDER DATA
   Advanced data science and technologies 2015-2020.
CR Agesen O., 1993, ECOOP '93 - Object-Oriented Programming. 7th European Conference Proceedings, P247
   Agesen O, 1995, LECT NOTES COMPUT SC, V952, P2
   Aiken Alexander., 1991, POPL 91, P279, DOI DOI 10.1145/99583.99621
   Allende E, 2014, SCI COMPUT PROGRAM, V96, P52, DOI 10.1016/j.scico.2013.06.006
   An D., 2011, P 38 ACM S PRINC PRO, P459
   [Anonymous], THESIS
   [Anonymous], P 2001 S JAVATM VIRT
   Araya VP, 2013, DEEP INTO PHARO, P209
   Beck Kent, 1997, SMALLTALK BEST PRACT
   Bera C., 2013, DEEP INTO PHARO, P38
   Bolin, 2010, CLOSURE DEFINITIVE G
   Bolz Carl Friedrich, 2009, P 4 WORKSH IMPL COMP, P18, DOI [10.1145/1565824.1565827, DOI 10.1145/1565824.1565827]
   Callaú O, 2015, ACM SIGPLAN NOTICES, V50, P135, DOI 10.1145/2661088.2661091
   CARTWRIGHT R, 1991, SIGPLAN NOTICES, V26, P278, DOI 10.1145/113446.113469
   Chis A, 2014, LECT NOTES COMPUT SC, V8706, P102, DOI 10.1007/978-3-319-11245-9_6
   Davies Julius., 2011, MSR, P183, DOI DOI 10.1145/1985441.1985468
   Deutsch L.Peter., 1984, PRINCIPLES PROGRAMMI
   Deutsch L. Peter, 1984, P 11 ACM SIGACT SIGP, P297, DOI [10.1145/800017.800542, DOI 10.1145/800017.800542]
   DUCASSE S, 2000, P COSET 00 2 INT S C
   Ducasse S., 2005, Proceedings of the 10th European Software Engineering Conference Held Jointly with 13th ACM SIGSOFT International Symposium on Foundations of Software Engineering, ESEC/FSE-13, P99
   Ducasse Stephane, 2005, RCOST SOFTWARE TECHN, P55
   Faldborg M., 2015, THESIS
   Fernandes H., 2007, MORPHIC INTERFACES U
   FOOTE B, 1989, SIGPLAN NOTICES, V24, P327, DOI 10.1145/74878.74911
   Furr M., 2009, THESIS
   Goldberg A., 1983, Smalltalk 80: The Language and Its Implementation
   GRAVER JO, 1990, CONFERENCE RECORD OF THE SEVENTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P136, DOI 10.1145/96709.96722
   Hackett B, 2012, ACM SIGPLAN NOTICES, V47, P239, DOI 10.1145/2345156.2254094
   Hiller Martin, 2012, Proceedings of the DASIA 2012. Data Systems In Aerospace, P40
   HOLZLE U, 1994, SIGPLAN NOTICES, V29, P326
   Holzle U., 1991, P EUROPEAN C OBJECT, P21, DOI DOI 10.1007/BFB0057013
   Holzle Urs, 1991, EUR C OBJ OR PROGR E
   Kleinschmager S., 2012, 2012 IEEE 20th International Conference on Program Comprehension, P153
   Livshits B, 2015, COMMUN ACM, V58, P44, DOI 10.1145/2644805
   MILNER R, 1978, J COMPUT SYST SCI, V17, P348, DOI 10.1016/0022-0000(78)90014-4
   Milojkovic N., 2017, 25 IEEE INT C PROGR
   Milojkovic N, 2016, PROCEEDINGS OF THE 11TH EDITION OF THE INTERNATIONAL WORKSHOP ON SMALLTALK TECHNOLOGIES, (IWST 2016), DOI 10.1145/2991041.2991047
   Milojkovic N, 2016, ONWARD!'16: PROCEEDINGS OF THE 2016 ACM INTERNATIONAL SYMPOSIUM ON NEW IDEAS, NEW PARADIGMS, AND REFLECTIONS ON PROGRAMMING AND SOFTWARE, P43, DOI 10.1145/2986012.2986017
   Milojkovic N, 2015, INT C PROGRAM COMPRE, P186, DOI 10.1109/ICPC.2015.29
   Odgaard M. P., 2014, THESIS
   Pall M., 2005, THE LUAJIT PROJECT
   PALSBERG J, 1991, SIGPLAN NOTICES, V26, P146
   Pluquet F, 2009, ACM SIGPLAN NOTICES, V44, P69, DOI 10.1145/1837513.1640145
   Rapicault P, 1998, LECT NOTES COMPUT SC, V1543, P76
   Salib M., 2004, PROC PYCON 04, P2
   SHAPIRO SS, 1965, BIOMETRIKA, V52, P591, DOI 10.1093/biomet/52.3-4.591
   Smit R., PEGON
   Souza Carlos., 2014, Proceedings of the 13th international conference on Modularity, P109, DOI DOI 10.1145/2577080.2582208
   Spasojevic B., 2014, P 2014 ACM INT S NEW, P133, DOI DOI 10.1145/2661136.2661141
   Spasojevic B, 2016, 2016 IEEE 23RD INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER), VOL 1, P283, DOI 10.1109/SANER.2016.41
   Spiza Samuel., 2014, 13th International Conference on Modularity, MODULARITY '14, Lugano, Switzerland, April 22-26, 2014, P99, DOI 10.1145/2577080.2577098
   Spoon AlexanderS., 2005, Proceedings of the Dynamic Languages Symposium (DLS), P35
   Spoon SA, 2004, LECT NOTES COMPUT SC, V3086, P51
   Thomas D., 2009, PROGRAMMING RUBY 1 9
   Tobin-Hochstadt S., TYPED RACKET GUIDE
   UNGAR D, 1987, SIGPLAN NOTICES, V22, P227, DOI 10.1145/38807.38828
   Xu ZG, 2016, FSE'16: PROCEEDINGS OF THE 2016 24TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON FOUNDATIONS OF SOFTWARE ENGINEERING, P607, DOI 10.1145/2950290.2950343
   Zandstra M., 2013, PHP OBJECTS PATTERNS
NR 58
TC 0
Z9 0
U1 0
U2 5
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 1
PY 2018
VL 161
SI SI
BP 105
EP 121
DI 10.1016/j.scico.2017.11.003
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GI7ZZ
UT WOS:000434742900007
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Kiehn, A
   Aggarwal, D
AF Kiehn, Astrid
   Aggarwal, Deepanker
TI A study of mutable checkpointing and related algorithms
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Snapshot; Checkpointing; Consistency; Formal verification; Distributed
   computing
AB Mutable Checkpointing algorithms (MC), [7-9], stand for snapshot algorithms that take checkpoints of processes with causally induced dependencies to the initiating process, only. They classify as coordinated snapshot algorithms with communication induced checkpointing. To specify and verify such algorithms formally, we introduce a formal framework in which their operational semantics can easily be expressed. Within this framework correctness of the algorithms follows from an invariant which explains how snapshots are incrementally built up. For MC and the related blocking queue algorithms of [26,27] some adaptations are required as they take a partial snapshot, only. However, both can be proven in the given framework and in this way we equip them with a direct, constructive consistency proof. (C) 2017 Elsevier B.V. All rights reserved.
C1 [Kiehn, Astrid] Indian Inst Technol Mandi, Mandi, India.
   [Aggarwal, Deepanker] Univ Wisconsin, Madison, WI USA.
   [Kiehn, Astrid] Indraprastha Inst Informat Technol Delhi, Delhi, India.
C3 Indian Institute of Technology System (IIT System); Indian Institute of
   Technology (IIT) - Mandi; University of Wisconsin System; University of
   Wisconsin Madison; Indraprastha Institute of Information Technology
   Delhi
RP Kiehn, A (corresponding author), Indian Inst Technol Mandi, Mandi, India.; Kiehn, A (corresponding author), Indraprastha Inst Informat Technol Delhi, Delhi, India.
EM astrid@iitmandi.ac.in
CR ABADI M, 1991, THEOR COMPUT SCI, V82, P253, DOI 10.1016/0304-3975(91)90224-P
   Aggarwal D., 2015, LECT NOTES COMPUT SC, V9392
   Aggarwal D., 2015, IIITDTR2015008
   Andriamiarina MB, 2014, COMPUT SCI INF SYST, V11, P251, DOI 10.2298/CSIS130122007A
   [Anonymous], 2002, Lect. Notes Comput. Sci
   [Anonymous], 2013, DISTRIBUTED ALGORITH, DOI DOI 10.1007/978-3-642-38123-2
   Ben-Ari M., 2008, Principles of the Spin Model Checker
   Cansell D, 2008, MONOGR THEOR COMPUT, P47, DOI 10.1007/978-3-540-74107-7_3
   Cao GH, 2003, THEOR COMPUT SCI, V290, P1127, DOI 10.1016/S0304-3975(02)00566-2
   Cao GH, 2001, IEEE T PARALL DISTR, V12, P157, DOI 10.1109/71.910871
   Cao GH, 1998, IEEE T PARALL DISTR, V9, P1213, DOI 10.1109/71.737697
   Chandy K.M., 1988, PARALLEL PROGRAM DES
   CHANDY KM, 1985, ACM T COMPUT SYST, V3, P63, DOI 10.1145/214451.214456
   Clint M., 1973, ACTA INFORM, V2
   Fuzzati R, 2007, ACTA INFORM, V44, P377, DOI 10.1007/s00236-007-0052-1
   Holzmann GJ, 2004, The SPIN model checker: primer and reference manual, V1003
   Kiehn A, 2014, LECT NOTES COMPUT SC, V8314, P134, DOI 10.1007/978-3-642-45249-9_9
   Kshemkalyani Ajay D., 2011, Distributed computing: principles, algorithms, and systems
   Kufner P., 2012, LECT NOTES COMPUT SC, V7604
   Lai Ten H., 1987, INF PROCESS LETT, V25
   Lynch N. A., 1996, DISTRIBUTED ALGORITH
   Marzullo K., 1993, DISTRIBUTED SYSTEMS
   Ogata K., 2012, LECT NOTES COMPUT SC, V7635
   OWICKI S, 1976, ACTA INFORM, V6, P319, DOI 10.1007/BF00268134
   Singh P, 2003, LECT NOTES COMPUT SC, V2775, P65
   Singh R, 2003, INT C WIR NETW
NR 26
TC 1
Z9 2
U1 0
U2 0
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD AUG 1
PY 2018
VL 160
SI SI
BP 78
EP 92
DI 10.1016/j.scico.2017.03.009
PG 15
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GG2HS
UT WOS:000432511400005
OA hybrid
DA 2024-07-18
ER

PT J
AU Zhang, M
   Dai, F
   Mallet, F
AF Zhang, Min
   Dai, Feng
   Mallet, Frederic
TI Periodic scheduling for MARTE/CCSL: Theory and practice
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Periodic scheduling; MARTE/CCSL; Maude; Rewriting logic; Model checking
ID TIME; SEMANTICS; LANGUAGE
AB The UML profile for Modeling and Analysis of Real-Time and Embedded systems (MARTE) is used to design and analyze real-time and embedded systems. The Clock Constraint Specification Language (CCSL) is a companion language for MARTE. It introduces logical clocks as first class citizens as a way to formally specify the expected behavior of models, thus allowing formal verification. CCSL describes the expected infinite behaviors of reactive embedded systems. In this paper we introduce and focus on the notion of periodic schedule to allow for a nice finite abstraction of these infinite behaviors. After studying the theoretical properties of those schedules we give a practical way to deal with them based on the executable operational semantics of CCSL in rewriting logic with Maude. We also propose an algorithm to find automatically periodic schedulers with the proposed sufficient condition, and to perform formal analysis of CCSL constraints by means of customized simulation and bounded LTL model checking. (C) 2017 Elsevier B.V. All rights reserved.
C1 [Zhang, Min; Dai, Feng] ECNU, Shanghai Key Lab Trustworthy Comp, Shanghai, Peoples R China.
   [Zhang, Min; Dai, Feng; Mallet, Frederic] ECNU, MoE Int Joint Lab Trustworthy Software, Shanghai, Peoples R China.
   [Mallet, Frederic] Univ Cote dAzur, CNRS, I3S, Nice, France.
   [Mallet, Frederic] INRIA Sophia Antipolis Mediterranee, Valbonne, France.
C3 East China Normal University; East China Normal University; Universite
   Cote d'Azur; Centre National de la Recherche Scientifique (CNRS)
RP Mallet, F (corresponding author), ECNU, MoE Int Joint Lab Trustworthy Software, Shanghai, Peoples R China.
EM zhangmin@sei.ecnu.edu.cn; fdai_itlogic@163.com; Frederic.Mallet@unice.fr
RI Mallet, Frederic/HKW-6782-2023; Mallet, Frédéric/H-3942-2011; Zhang,
   Min/AAY-2920-2021
OI Mallet, Frédéric/0000-0002-9088-9821; Zhang, Min/0000-0003-1938-2902
FU National Natural Science Foundation of China (NSFC) [61502171]; French
   Clarity Project
FX We thank all the anonymous reviewers including those who reviewed the
   workshop version published in FTSCS 2015 for their valuable comments on
   this work. This research was supported by The National Natural Science
   Foundation of China (NSFC) project: No. 61502171 and by the French
   Clarity Project.<SUP>3</SUP>
CR [Anonymous], 2009, 6925 INRIA
   Benveniste A, 2003, P IEEE, V91, P64, DOI 10.1109/JPROC.2002.805826
   BERRY G, 1992, SCI COMPUT PROGRAM, V19, P87, DOI 10.1016/0167-6423(92)90005-V
   Clavel M., 2007, LECT NOTES COMPUT SC, V4350
   Cousot P, 1996, ACM COMPUT SURV, V28, P324, DOI 10.1145/234528.234740
   Cucu L, 2008, ANN OPER RES, V159, P41, DOI 10.1007/s10479-007-0279-9
   DeAntoni J, 2012, LECT NOTES COMPUT SC, V7304, P34, DOI 10.1007/978-3-642-30561-0_4
   Feiler P.H., 2007, Flow latency analysis with the architecture analysis design language (AADL)
   Gascon R., 2011, Proceedings of the 2011 Eighteenth International Symposium on Temporal Representation and Reasoning (TIME 2011), P141, DOI 10.1109/TIME.2011.10
   Huafeng Yu, 2011, 2011 9th IEEE/ACM International Conference on Formal Methods and Models for Codesign (MEMOCODE 2011), P21, DOI 10.1109/MEMCOD.2011.5970507
   LAMPORT L, 1978, COMMUN ACM, V21, P558, DOI 10.1145/359545.359563
   Leroux M, 2005, LECT NOTES COMPUT SC, V3707, P489
   LIU CL, 1973, J ACM, V20, P46, DOI 10.1145/321738.321743
   Mallet F, 2015, SCI COMPUT PROGRAM, V106, P78, DOI 10.1016/j.scico.2015.03.001
   Mallet F, 2013, P ACM IEEE INT CONF, P157
   Mallet F, 2008, INNOV SYST SOFTW ENG, V4, P309, DOI 10.1007/s11334-008-0055-2
   Meseguer J, 1998, LECT NOTES COMPUT SC, V1376, P18
   Meseguer J, 2007, THEOR COMPUT SCI, V373, P213, DOI 10.1016/j.tcs.2006.12.018
   Meseguer J, 2013, INFORM COMPUT, V231, P38, DOI 10.1016/j.ic.2013.08.004
   Meseguer J, 2012, J LOGIC ALGEBR PROGR, V81, P721, DOI 10.1016/j.jlap.2012.06.003
   Ölveczky PC, 2014, LECT NOTES COMPUT SC, V8663, P42, DOI 10.1007/978-3-319-12904-4_3
   Potop-Butucaru D., 2009, EMBEDDED SYSTEMS DES, P1
   Suryadevara J, 2013, LECT NOTES COMPUT SC, V8137, P1, DOI 10.1007/978-3-642-40561-7_1
   Xu QG, 2016, LECT NOTES COMPUT SC, V9984, P18, DOI 10.1007/978-3-319-47677-3_2
   Yin L, 2011, 2011 16TH IEEE INTERNATIONAL CONFERENCE ON ENGINEERING OF COMPLEX COMPUTER SYSTEMS (ICECCS), P65, DOI 10.1109/ICECCS.2011.14
   Zhang M., 2015, CCIS, P37
NR 26
TC 14
Z9 14
U1 0
U2 3
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR 1
PY 2018
VL 154
BP 42
EP 60
DI 10.1016/j.scico.2017.08.015
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA FW1RT
UT WOS:000425077800003
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU van den Hove, G
AF van den Hove, Gauthier
TI Dissolving a half century old problem about the implementation of
   procedures
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Static link; Block; Closure; Lexical scope; Procedure
ID ALGOL-60; BLOCKS
AB We investigate the semantics of the procedure concept, and of one of the main techniques introduced by E. W. Dijkstra in his article Recursive Programming to implement it, namely the "static link," sometimes also called "access link" or "lexical link." We show that a confusion about that technique persists, even in recent textbooks. Our analysis is meant to clarify the meaning of that technique, and of the procedure concept. Our main contribution is to propose a better characterization of the "static link." (C) 2017 Elsevier B.V. All rights reserved.
C1 [van den Hove, Gauthier] CWI, SWAT, Sci Pk 123, NL-1098 XG Amsterdam, Netherlands.
RP van den Hove, G (corresponding author), CWI, SWAT, Sci Pk 123, NL-1098 XG Amsterdam, Netherlands.
EM ghe@cwi.nl
FU NWO (Netherlands Organisation for Scientific Research) Free Competition
   Grant [612.001.003]
FX This research was supported by the NWO (Netherlands Organisation for
   Scientific Research) Free Competition Grant number 612.001.003.
CR [Anonymous], 2012, Concepts of programming languages
   [Anonymous], 2006, COMPILERS PRINCIPLES
   Appel A.W., 1999, MODEM COMPILER IMPLE
   Appel A.W., 2002, MODERN COMPILER IMPL, V2nd
   Appel A.W., 1999, Modern Compiler Implementation in Java
   ARMBRUSTER D, 1988, THEOR COMPUT SCI, V56, P3, DOI 10.1016/0304-3975(86)90003-4
   BACKUS JW, 1960, COMMUN ACM, V3, P299, DOI 10.1145/367236.367262
   Breuel T. M., 1988, USENIX Proceedings. C++ Conference, P293
   Dijkstra E.W., 1960, NUMER MATH, V2, P312, DOI DOI 10.1007/BF01386232
   Dijkstra E. W., 1961, ALGOL B S, V10, P1
   Grau A. A, 1967, TRANSLATION OF ALGOL, V60
   IRONS ET, 1961, COMMUN ACM, V4, P65, DOI 10.1145/366062.366090
   JOHNSTON J. B., 1971, SIGPLAN NOTICES, V6, P55
   KANDZIA P, 1974, LNCS, V14, P97
   Knuth D.E., 1964, ALGOL B, V17, P7
   KNUTH DE, 1961, COMMUN ACM, V4, P268, DOI 10.1145/366573.366599
   LANDIN PJ, 1964, COMPUT J, V6, P308, DOI 10.1093/comjnl/6.4.308
   Langmaack H., 2010, INFORM SPEKTRUM, V33, P384
   Langmaack H., 2010, INFORM SPEKTRUM, V33, P634
   Langmaack H., 2010, INFORMATIK SPEKTRUM, V33, P302
   McGowan C. L., 1972, Proceedings of an ACM Conference on Proving Assertations about Programs, P191, DOI 10.1145/800235.807085
   McGowan C.L., ACM SIGACF NEWS, V14, P191
   MITCHELL JohnC., 2003, CONCEPTS PROGRAMMING
   Muchnick S., 1997, ADV COMPILER DESIGN
   Parsons T.W., 1992, Introduction to compiler construction
   Randell B., 1964, ALGOL 60 IMPLEMENTAT
   SAMET PA, 1965, COMPUT J, V8, P21, DOI 10.1093/comjnl/8.1.21
   Scott ML, 2009, PROGRAMMING LANGUAGE PRAGMATICS, 3RD EDITION, P1
   Tennent R.D., 1981, Principles of Programming Languages
   Waite W.M., 1993, INTRO COMPILER CONST
   WAITE WM, 1984, COMPILER CONSTRUCTIO
   WATSON D, 1989, HIGH LEVEL LANGUAGES
   Wilhelm R., 2012, COMMUNICATIONS
   Wilhelm R., 1995, Compiler Design
   WINKLMANN K, 1982, ACTA INFORM, V18, P299, DOI 10.1007/BF00263196
   WIRTH N, 1996, COMPILER CONSTRUCTIO
   Zonneveld J. A., 1964, ALGOL B, V18, P9
NR 37
TC 0
Z9 0
U1 0
U2 1
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 15
PY 2017
VL 150
BP 75
EP 86
DI 10.1016/j.scico.2017.07.007
PG 12
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA FK3IT
UT WOS:000413379500005
OA Green Published, Bronze
DA 2024-07-18
ER

PT J
AU Rahli, V
   Guaspari, D
   Bickford, M
   Constable, RL
AF Rahli, Vincent
   Guaspari, David
   Bickford, Mark
   Constable, Robert L.
TI EventML: Specification, verification, and implementation of
   crash-tolerant state machine replication systems
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Nuprl; EventML; Formal verification; Fault tolerant distributed systems;
   Event logic
ID TIME; CONSENSUS; CHECKING; PROOF
AB Distributed programs are known to be extremely difficult to implement, test, verify, and maintain. This is due in part to the large number of possible unforeseen interactions among components, and to the difficulty of precisely specifying what the programs should accomplish in a formal language that is intuitively clear to the programmers. We discuss here a methodology that has proven itself in building a state of the art implementation of Multi-Paxos and other distributed protocols used in a deployed database system. This article focuses on the logical foundations as well as the basic ideas of formal EventML programming, illustrated by implementing a fault-tolerant consensus protocol and showing how we prove its safety properties with the Nuprl proof assistant. (C) 2017 Elsevier B.V. All rights reserved.
C1 [Rahli, Vincent] Univ Luxembourg, SnT, Luxembourg, Luxembourg.
   [Bickford, Mark; Constable, Robert L.] Cornell Univ, Ithaca, NY USA.
C3 University of Luxembourg; Cornell University
RP Rahli, V (corresponding author), Univ Luxembourg, SnT, Luxembourg, Luxembourg.
EM vincent.rahli@gmail.com; markb@cs.cornell.edu; rc@cs.cornell.edu
OI Rahli, Vincent/0000-0002-5914-8224; Bickford, Mark/0000-0003-2294-7601
FU DARPA CRASH [FA8750-10-2-0238]; SnT; National Research Fund Luxembourg
   (FNR), through PEARL [FNR/P14/8149128]
FX This work was partially supported by the DARPA CRASH project, award
   number FA8750-10-2-0238, by the SnT, and by the National Research Fund
   Luxembourg (FNR), through PEARL grant FNR/P14/8149128.
CR Abrial Jean-Raymond, 2010, International Journal on Software Tools for Technology Transfer, V12, P447, DOI 10.1007/s10009-010-0145-y
   Abrial J R, 2010, Modeling in Event-B: system and softeng
   Alberti Francesco, 2010, ELECT COMMUN EASST, V35
   Allen Stuart F., 2006, J. Applied Logic, P428
   Anand A, 2015, LECT NOTES COMPUT SC, V9236, P34, DOI 10.1007/978-3-319-22102-1_3
   Andriamiarina MB, 2014, LECT NOTES COMPUT SC, V8477, P117, DOI 10.1007/978-3-662-43652-3_9
   [Anonymous], 1997, The Theory and Practice of Concurrency
   [Anonymous], 1987, PODC
   [Anonymous], 1997, The Definition of Standard ML
   Azaiez S, 2016, LECT NOTES COMPUT SC, V9675, P70, DOI 10.1007/978-3-319-33600-8_4
   Azmy N, 2016, LECT NOTES COMPUT SC, V9675, P86, DOI 10.1007/978-3-319-33600-8_5
   Bertot Y., 2004, TEXT THEORET COMP S
   Bickford M, 2009, LECT NOTES COMPUT SC, V5582, P140, DOI 10.1007/978-3-642-02414-6_9
   Bickford Mark, 2012, LANG DISTR ALG WORKS
   Bickford Mark, 2010, GENERATING EVENT LOG
   Bogdanov Andrej, 2001, THESIS MIT CAMBRIDGE
   Bokor P, 2011, I C DEPEND SYS NETWO, P73, DOI 10.1109/DSN.2011.5958208
   Bolosky W. J., 2007, Operating Systems Review, V41, P17, DOI 10.1145/1243418.1243422
   Bryans JW, 2011, LECT NOTES COMPUT SC, V6991, P553, DOI 10.1007/978-3-642-24559-6_37
   Charron-Bost B., 2009, INT J SOFTWARE INFOR, V3, P273
   Charron-Bost B, 2011, LECT NOTES COMPUT SC, V6976, P120, DOI 10.1007/978-3-642-24550-3_11
   Charron-Bost B, 2009, DISTRIB COMPUT, V22, P49, DOI 10.1007/s00446-009-0084-6
   Chaudhuri K, 2010, LECT NOTES ARTIF INT, V6173, P142
   Constable R L, 1986, Implementing mathematics with the Nuprl proof development system
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   FISCHER MJ, 1985, J ACM, V32, P374, DOI 10.1145/3149.214121
   Furst A, 2014, LECT NOTES COMPUT SC, V8739, P323, DOI 10.1007/978-3-319-10181-1_20
   Garland S., 2004, MITLCSTR961
   Georgiou Chryssis, 2009, International Journal on Software Tools for Technology Transfer, V11, P153, DOI 10.1007/s10009-008-0097-7
   Gordon Michael J.C., 1979, LECT NOTES COMPUT SC, V78
   Hawblitzel C, 2015, SOSP'15: PROCEEDINGS OF THE TWENTY-FIFTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P1, DOI 10.1145/2815400.2815428
   John A, 2013, 2013 FORMAL METHODS IN COMPUTER-AIDED DESIGN (FMCAD), P201
   Joshi R, 2003, FORM METHOD SYST DES, V22, P125, DOI 10.1023/A:1022969405325
   Kitchin D, 2006, LECT NOTES COMPUT SC, V4137, P477
   Kitchin D, 2009, LECT NOTES COMPUT SC, V5522, P1, DOI 10.1007/978-3-642-02138-1_1
   Kitchin David, 2013, THESIS U TEXAS AUSTI
   Klein G, 2009, SOSP'09: PROCEEDINGS OF THE TWENTY-SECOND ACM SIGOPS SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P207
   LAMPORT L, 1994, ACM T PROGR LANG SYS, V16, P872, DOI 10.1145/177492.177726
   LAMPORT L, 1978, COMMUN ACM, V21, P558, DOI 10.1145/359545.359563
   Lamport L, 1998, ACM T COMPUT SYST, V16, P133, DOI 10.1145/279227.279229
   Lamport L, 2004, SPECIFYING SYSTEMS T
   Lincoln P., 1993, Digest of Papers FTCS-23 The Twenty-Third International Symposium on Fault-Tolerant Computing, P402, DOI 10.1109/FTCS.1993.627343
   Loo B. T., 2005, P 20 ACM S OP SYST P, P75, DOI [10.1145/1095810.1095818, DOI 10.1145/1095810.1095818]
   Lu TX, 2011, LECT NOTES COMPUT SC, V6722, P244, DOI 10.1007/978-3-642-21461-5_16
   Lynch N. A., 1996, DISTRIBUTED ALGORITH
   Mery D., 2011, P 2 S INF COMM TECHN, P179, DOI DOI 10.1145/2069216.2069252
   Moggi E., 1989, Proceedings. Fourth Annual Symposium on Logic in Computer Science (Cat. No.89CH2753-2), P14, DOI 10.1109/LICS.1989.39155
   Newcombe C, 2015, COMMUN ACM, V58, P66, DOI 10.1145/2699417
   Newcombe C, 2014, LECT NOTES COMPUT SC, V8477, P25, DOI 10.1007/978-3-662-43652-3_3
   Ongaro Diego, 2014, 2014 USENIX ANN TECH, P305, DOI DOI 10.1007/0-387-34805-0_21
   Rahli V, 2013, LECT NOTES COMPUT SC, V7998, P261, DOI 10.1007/978-3-642-39634-2_20
   Rahli Vincent, 2012, 10 INT WORKSH US INT
   Rahli Vincent, 2012, 20 IEEE INT C NETW P, P1
   Rahli Vincent, 2015, ELECT COMMUN EASST
   Rustan K, 2010, LECT NOTES ARTIF INT, V6355, P348, DOI 10.1007/978-3-642-17511-4_20
   Saissi H, 2013, SYM REL DIST SYST, P133, DOI 10.1109/SRDS.2013.22
   Schiper N, 2014, I C DEPEND SYS NETWO, P395, DOI 10.1109/DSN.2014.45
   Schiper Nicolas, 2012, P 8 WORKSH HOT TOP S
   SCHNEIDER FB, 1990, COMPUT SURV, V22, P299, DOI 10.1145/98163.98167
   Stephen J., 2000, FDN COMPONENT BASED, P285
   Tauber Joshua A., 2004, THESIS MIT CAMBRIDGE
   Tsuchiya T, 2008, LECT NOTES COMPUT SC, V5218, P466, DOI 10.1007/978-3-540-87779-0_32
   van Renesse R, 2015, ACM COMPUT SURV, V47, DOI 10.1145/2673577
   Wang AD, 2009, LECT NOTES COMPUT SC, V5418, P61, DOI 10.1007/978-3-540-92995-6_5
   Wang Anduo, 2009, 8 ACM WORKSH HOT TOP
   WILCOX JR, 2015, P 36 ACM SIGPLAN C P, V50, P357, DOI DOI 10.1145/2737924.2737958
   Woos D, 2016, PROCEEDINGS OF THE 5TH ACM SIGPLAN CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS (CPP'16), P154, DOI 10.1145/2854065.2854081
NR 67
TC 9
Z9 10
U1 0
U2 9
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 15
PY 2017
VL 148
SI SI
BP 26
EP 48
DI 10.1016/j.scico.2017.05.009
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA FJ8ZB
UT WOS:000413056100003
OA Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Schmidt-Schauss, M
   Sabel, D
AF Schmidt-Schauss, Manfred
   Sabel, David
TI Improvements in a call-by-need functional core language: Common
   subexpression elimination and resource preserving translations
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Semantics; Lambda calculus; Functional programming; Lazy evaluation;
   Improvement
AB An improvement is a correct program transformation that optimizes the program, where the criterion is that the number of computation steps until a value is obtained is not strictly increased in any context. This paper investigates improvements in both - an untyped and a polymorphically typed variant - of a call-by-need lambda calculus with letrec, case, constructors and seq. Besides showing that several local transformations are optimizations, a main result of this paper is a proof that common subexpression elimination is correct and an improvement, which proves a conjecture and thus closes a gap in the improvement theory of Moran and Sands. The improvement relation used in this paper is generic in which essential computation steps are counted and thus the obtained results apply for several notions of improvement. Besides the small-step operational semantics, also an abstract machine semantics is considered for counting computation steps. We show for several length measures that the call-by-need calculus of Moran and Sands and our calculus are equivalent. (C) 2017 Elsevier B.V. All rights reserved.
C1 [Schmidt-Schauss, Manfred; Sabel, David] Goethe Univ, Frankfurt, Germany.
C3 Goethe University Frankfurt
RP Schmidt-Schauss, M (corresponding author), Goethe Univ, Frankfurt, Germany.
EM schauss@ki.informatik.uni-frankfurt.de;
   sabel@ki.informatik.uni-frankfurt.de
RI ; Sabel, David/A-1068-2014
OI Schmidt-Schauss, Manfred/0000-0001-8809-7385; Sabel,
   David/0000-0002-5109-3273
FU Deutsche Forschungsgemeinschaft (DFG) [SA 2908/3-1]
FX The second author is supported by the Deutsche Forschungsgemeinschaft
   (DFG) under grant SA 2908/3-1.
CR Ariola Z. M., 1997, Journal of Functional Programming, V7, P265, DOI 10.1017/S0956796897002724
   Bird R., 2014, THINKING FUNCTIONALL
   Girard J.-Y., 1994, PROOFS TYPES
   Gustavsson J, 2001, ACM SIGPLAN NOTICES, V36, P265, DOI 10.1145/507669.507667
   Hackett J., 2014, 19 INT C FUNCT PROGR, P95
   HUGHES J, 1989, COMPUT J, V32, P98, DOI 10.1093/comjnl/32.2.98
   Johann P, 2006, FUND INFORM, V69, P63
   Jones SP, 2002, J FUNCT PROGRAM, V12, P393, DOI 10.1017/S0956796802004331
   Kutzner A, 1999, ACM SIGPLAN NOTICES, V34, P324, DOI 10.1145/291251.289462
   Marlow Simon, 2010, Haskell 2010 language report
   Moran A., 1999, Conference Record of POPL '99. 26th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P43, DOI 10.1145/292540.292547
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Pitts A. M., 2000, Mathematical Structures in Computer Science, V10, P321, DOI 10.1017/S0960129500003066
   Pitts A.M., 1998, HIGHER ORDER OPERATI, P275
   Sabel D., 2014, OASICS, V40, P63, DOI DOI 10.4230/0ASICS.WPTE.2014.63
   Sabel D, 2008, MATH STRUCT COMP SCI, V18, P501, DOI 10.1017/S0960129508006774
   Sabel D, 2011, PPDP 11 - PROCEEDINGS OF THE 2011 SYMPOSIUM ON PRINCIPLES AND PRACTICES OF DECLARATIVE PROGRAMMING, P101
   Schmidt-Schauss M., 2013, LIPICS, V21, P239
   Schmidt-Schauss M., 2015, 27 S IMPL APPL FUNCT
   Schmidt-Schauss M., 2016, 55 GOETH U FRANKF MA
   Schmidt-Schauss M, 2008, J FUNCT PROGRAM, V18, P503, DOI 10.1017/S0956796807006624
   Schmidt-Schauss M, 2015, PROCEEDINGS OF THE 17TH INTERNATIONAL SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING (PPDP 2015), P220, DOI 10.1145/2790449.2790512
   Schmidt-Schauss M, 2015, LOG METH COMPUT SCI, V11, DOI 10.2168/LMCS-11(1:7)2015
   Schmidt-Schauss M, 2010, THEOR COMPUT SCI, V411, P1521, DOI 10.1016/j.tcs.2009.12.001
   Sculthorpe N., 2012, LECT NOTES COMPUT SC, V8241, P86
   Sestoft P., 1997, Journal of Functional Programming, V7, P231, DOI 10.1017/S0956796897002712
   Vytiniotis D., 2013, LIPICS, V21, P20
NR 27
TC 1
Z9 1
U1 0
U2 5
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 1
PY 2017
VL 147
BP 3
EP 26
DI 10.1016/j.scico.2017.01.001
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA FG3CK
UT WOS:000410014200002
DA 2024-07-18
ER

PT J
AU Bagge, AH
AF Bagge, Anya Helene
TI Managing facts and resources with the Pica IDE infrastructure library
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 4th International Workshop on Academic Software Development Tools and
   Techniques
CY JUL 01, 2013
CL Montpellier, FRANCE
DE IDEs; Editor-integrated compilers; Eclipse; Magnolia programming
   language; Compilation by transformation; Error marks; Facts; Resources
ID LANGUAGE
AB Classical compiler architecture is centred around producing object code in a batch oriented fashion. Integrated development environments (IDES) present new challenges to the language implementer: information should be (almost) instantly available, and should be dynamically updated and presented even for incorrect code, as the user is editing. To increase responsiveness, it may be necessary to compute information incrementally, and to make use of multicore processors. An existing compiler cannot easily be adapted to provide IDE services without impacting the user experience; typically, IDE developers have to develop their own language frontends particularly targeted at IDE use. In this paper, we discuss the design of a library, Pica, for managing resources and information and easing IDE integration, and show how it is applied in the Eclipse IDE for the experimental Magnolia programming language. (C) 2016 Elsevier B.V. All rights reserved.
C1 [Bagge, Anya Helene] Univ Bergen, Dept Informat, Bergen, Norway.
C3 University of Bergen
RP Bagge, AH (corresponding author), Univ Bergen, Dept Informat, Bergen, Norway.
EM anya@ii.uib.no
OI Bagge, Anya Helene/0000-0001-6695-2045
CR Bagge A.H., 2015, P 2015 ACM SIGPLAN I, P83
   Bagge AH, 2010, ELECTRON NOTES THEOR, V253, P37, DOI 10.1016/j.entcs.2010.08.030
   Bagge AH, 2009, ELECTRON NOTES THEOR, V238, P17, DOI 10.1016/j.entcs.2009.09.038
   Bagge Anya Helene, 2009, THESIS
   Bravenboer M, 2008, SCI COMPUT PROGRAM, V72, P52, DOI 10.1016/j.scico.2007.11.003
   Charles P, 2009, OOPSLA 2009, CONFERENCE PROCEEDINGS, P191
   DELISLE NM, 1984, SIGPLAN NOTICES, V19, P49, DOI 10.1145/390011.808248
   Efftinge Sven., 2006, WORKSHOP MODELING S, V32, P118
   Gomanyuk SV, 2008, PROGRAM COMPUT SOFT+, V34, P225, DOI 10.1134/S0361768808040063
   JetBrains, MPS MET SYST
   Kats LCL, 2010, ACM SIGPLAN NOTICES, V45, P444, DOI 10.1145/1932682.1869497
   Klint Paul, 2012, Software Language Engineering. 4th International Conference, SLE 2011. Revised Selected Papers, P1, DOI 10.1007/978-3-642-28830-2_1
   Klint P, 2011, LECT NOTES COMPUT SC, V6491, P222, DOI 10.1007/978-3-642-18023-1_6
   Klint P, 2009, IEEE INT WORK C SO, P168, DOI 10.1109/SCAM.2009.28
   Lhotak J., 2004, LECT NOTES COMPUT SC, V2985, P2725
   REISS SP, 1984, SIGPLAN NOTICES, V19, P30, DOI 10.1145/390011.808246
   REISS SP, 1984, SIGPLAN NOTICES, V19, P144, DOI 10.1145/502949.502889
   SCHWARTZ MD, 1984, SIGPLAN NOTICES, V19, P122, DOI 10.1145/502949.502887
   TEITELBAUM T, 1981, COMMUN ACM, V24, P563, DOI 10.1145/358746.358755
   TEITELMAN W, 1981, COMPUTER, V14, P25, DOI 10.1109/C-M.1981.220410
NR 20
TC 0
Z9 0
U1 0
U2 6
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 1
PY 2017
VL 134
SI SI
BP 100
EP 111
DI 10.1016/j.scico.2016.09.004
PG 12
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA EF1GE
UT WOS:000390072500008
OA hybrid
DA 2024-07-18
ER

PT J
AU Hills, M
   Klint, P
   Vinju, JJ
AF Hills, Mark
   Klint, Paul
   Vinju, Jurgen J.
TI Enabling PHP software engineering research in Rascal
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 4th International Workshop on Academic Software Development Tools and
   Techniques
CY JUL 01, 2013
CL Montpellier, FRANCE
DE Meta-programming; Program analysis; Empirical software engineering;
   Dynamic languages; PHP
ID LANGUAGE
AB Today, PHP is one of the most popular programming languages, and is commonly used in the open source community and in industry to build large application frameworks and web applications. In this paper, we discuss our ongoing work on PHP AiR, a framework for PHP Analysis in Rascal. PHP AiR is focused especially on program analysis and empirical software engineering, and is being used actively and effectively in work on evaluating PHP feature usage and system evolution, on program analysis for refactoring and security validation, and on source code metrics. We describe the requirements and design decisions for PHP AiR, summarize current research using PHP AiR, discuss lessons learned, and briefly sketch future work. (C) 2016 Elsevier B.V. All rights reserved.
C1 [Hills, Mark] East Carolina Univ, Greenville, NC 27858 USA.
   [Klint, Paul; Vinju, Jurgen J.] Ctr Wiskunde & Informat, Amsterdam, Netherlands.
   [Vinju, Jurgen J.] INRIA Lille Nord Europe, Lille, France.
C3 University of North Carolina; East Carolina University
RP Hills, M (corresponding author), East Carolina Univ, Greenville, NC 27858 USA.
EM mhills@cs.ecu.edu; Paul.Klint@cwi.nl; Jurgen.Vinju@cwi.nl
OI Hills, Mark/0000-0003-0996-9275
CR Anderson P, 2005, PROG COMPREHEN, P147, DOI 10.1109/WPC.2005.37
   [Anonymous], 2007, The Definitive ANTLR Reference: Building Domain-Specific Languages
   [Anonymous], 2005, International Conference on World Wide Web, DOI [10.1145/1060745.1060809, DOI 10.1145/1060745.1060809]
   Balland E, 2007, LECT NOTES COMPUT SC, V4533, P36
   Basten B, 2015, 2015 IEEE 1ST INTERNATIONAL WORKSHOP ON SOFTWARE ANALYTICS (SWAN), P25, DOI 10.1109/SWAN.2015.7070485
   Beyer D., 2006, 28th International Conference on Software Engineering Proceedings, P807, DOI 10.1145/1134285.1134420
   Biggar P., 2010, THESIS TRINITY COLL
   Bravenboer M, 2008, SCI COMPUT PROGRAM, V72, P52, DOI 10.1016/j.scico.2007.11.003
   Ceri S., 1990, Logic Programming and Databases, DOI [10.1007/978-3-642-83952-8, DOI 10.1007/978-3-642-83952-8_6]
   Charles P, 2009, OOPSLA 2009, CONFERENCE PROCEEDINGS, P191
   Cordy JR, 2006, SCI COMPUT PROGRAM, V61, P190, DOI 10.1016/j.scico.2006.04.002
   Demeyer S., 2001, TECH REP
   HEERING J, 1989, SIGPLAN NOTICES, V24, P43, DOI 10.1145/71605.71607
   Hiller Martin, 2012, Proceedings of the DASIA 2012. Data Systems In Aerospace, P40
   Hills M., 2013, LNCS, V7745, P372
   Hills M., 2013, Proceedings of ISSTA 2013, P325, DOI DOI 10.1145/2483760.2483786
   Hills M., 2014, P 29 ACM IEEE INT C, P503
   Hills M, 2015, IEEE INT CONF AUTOM, P563, DOI 10.1109/ASE.2015.72
   Hills M, 2015, 2015 22ND INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER), P525, DOI 10.1109/SANER.2015.7081870
   Hills M, 2014, LECT NOTES COMPUT SC, V8706, P322, DOI 10.1007/978-3-319-11245-9_18
   Hills M, 2014, 2014 SOFTWARE EVOLUTION WEEK - IEEE CONFERENCE ON SOFTWARE MAINTENANCE, REENGINEERING, AND REVERSE ENGINEERING (CSMR-WCRE), P454, DOI 10.1109/CSMR-WCRE.2014.6747217
   Hills M, 2011, LECT NOTES COMPUT SC, V6705, P228, DOI 10.1007/978-3-642-21952-8_17
   Holt RC, 2000, SEVENTH WORKING CONFERENCE ON REVERSE ENGINEERING - PROCEEDINGS, P162, DOI 10.1109/WCRE.2000.891463
   Holt RC, 2008, WORK CONF REVERSE EN, P5, DOI 10.1109/WCRE.2008.34
   Huang Y.-W., 2004, P 13 INT C WORLD WID, P40, DOI [10.1145/988672.988679, DOI 10.1145/988672.988679]
   Jovanovic N., 2006, PLAS 2006. Proceedings of the 2006 Programming Languages and Analysis for Security Workshop, P27, DOI 10.1145/1134744.1134751
   Jovanovic N, 2006, P IEEE S SECUR PRIV, P258, DOI 10.1109/SP.2006.29
   Klint P., 2008, WORKING SESSION QUER
   Klint P, 2009, IEEE INT WORK C SO, P168, DOI 10.1109/SCAM.2009.28
   MCCARTHY J, 1960, COMMUN ACM, V3, P184, DOI 10.1145/367177.367199
   Moreau P. -E., 1998, POSTC WORKSH IMPL TE
   Muller H. A., 1988, Proceedings of the 10th International Conference on Software Engineering (Cat. No.88CH2554-4), P80, DOI 10.1109/ICSE.1988.93690
   Rucareanu I., 2013, THESIS
   Samimi H, 2012, PROC INT CONF SOFTW, P277, DOI 10.1109/ICSE.2012.6227186
   Steindorfer M. J., 2014, P 2014 INT C GEN PRO, P11
   Steindorfer MJ, 2015, ACM SIGPLAN NOTICES, V50, P783, DOI [10.1145/2858965.2814312, 10.1145/2814270.2814312]
   Tamang A., 2015, THESIS
   van den Bos J, 2011, ELECTRON PROC THEOR, P15, DOI 10.4204/EPTCS.56.2
   van den Brand M. G. J., 2001, Compiler Construction. 10th International Conference, CC 2001. Held as Part of the Joint European Conferences on Theory and Practice of Software, ETAPS 2001. Proceedings (Lecture Notes in Computer Science Vol.2027), P365
   van den Brand MGJ, 2007, INFORM SOFTWARE TECH, V49, P55, DOI 10.1016/j.infsof.2006.08.009
   van den Brand MGJ, 2000, SOFTWARE PRACT EXPER, V30, P259, DOI 10.1002/(SICI)1097-024X(200003)30:3<259::AID-SPE298>3.0.CO;2-Y
   Wassermann G, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P171, DOI 10.1145/1368088.1368112
   Wohlin C., 2012, Experimentation in Software Engineering
   Zhao H, 2012, ACM SIGPLAN NOTICES, V47, P575, DOI 10.1145/2398857.2384658
NR 44
TC 7
Z9 8
U1 3
U2 37
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 1
PY 2017
VL 134
SI SI
BP 37
EP 46
DI 10.1016/j.scico.2016.05.003
PG 10
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA EF1GE
UT WOS:000390072500004
OA hybrid
DA 2024-07-18
ER

PT J
AU Kelter, T
   Marwedel, P
AF Kelter, Timon
   Marwedel, Peter
TI Parallelism analysis: Precise WCET values for complex multi-core systems
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE WCET; Multi-core; Parallelism; Shared resources
ID EFFICIENT; PREDICTION
AB In the verification of safety-critical real-time systems, the problem of determining the worst-case execution time (WCET) of a task is of utmost importance. Safe formal methods have been established for solving the single-task, single-core WCET problem. The de facto standard approach uses abstract interpretation to derive basic block execution times and a combinatorial path analysis which derives the longest path through the program. WCET analyses for multi-core computers have extended this methodology by assuming that shared resources are partitioned in either time or space and that therefore each core can still be analyzed separately. For real-world multi-cores this assumption is often not true, making the classic WCET analysis approach either inapplicable or very imprecise. To overcome this, we present a technique to explore the interleavings of a parallel task system as well as an exclusion criterion to prove that certain interleavings can never occur. We show how this technique can be integrated into existing WCET analysis approaches and finally show that the average WCET of a collection of real-time benchmarks could be reduced by a factor of up to 11.96 using this new analysis type. (C) 2016 Elsevier B.V. All rights reserved.
C1 [Kelter, Timon; Marwedel, Peter] TU Dortmund, Dept Comp Sci, Otto Hahn Str 16, D-44227 Dortmund, Germany.
C3 Dortmund University of Technology
RP Kelter, T (corresponding author), TU Dortmund, Dept Comp Sci, Otto Hahn Str 16, D-44227 Dortmund, Germany.
EM timon.kelter@tu-dortmund.de; peter.marwedel@tu-dortmund.de
FU EU COST Action: Timing Analysis On Code-Level (TACLe) [IC1202]
FX This work was partially supported by EU COST Action IC1202: Timing
   Analysis On Code-Level (TACLe). The authors would also like to thank
   Synopsys for the provision of the virtual prototyping IDE COMET.
CR [Anonymous], 2007, COMPILERS PRINCIPLES
   [Anonymous], THESIS
   [Anonymous], 3 INT WORKSH FORM TE
   [Anonymous], P 6 INT WORKSH WORST
   Chattopadhyay S, 2012, IEEE REAL TIME, P99, DOI 10.1109/RTAS.2012.26
   Chow J.H., 1992, ICPP, P192
   Chugh R, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P316, DOI 10.1145/1375581.1375620
   Cousot P., 1980, Automata, Languages and Programming, Seventh Colloquium, P119
   Cousot P., 1984, AUTOMATIC PROGRAM CO, P243
   Ferdinand C, 2004, INT FED INFO PROC, V156, P377
   Ferdinand C, 1999, REAL-TIME SYST, V17, P131, DOI 10.1023/A:1008186323068
   Gopalakrishnan G, 2011, COMMUN ACM, V54, P82, DOI 10.1145/2043174.2043194
   GRUNWALD D, 1993, SIGPLAN NOTICES, V28, P159, DOI 10.1145/173284.155349
   Gustaysson A., 2011, REAL TIME SWEDEN 201, P104
   Hahn S., 2015, CRTS
   Kamil A., 2006, P 18 INT C LANG COMP
   Kelter T., 2013, P 13 INT WORKSH WORS
   Kelter T, 2014, REAL-TIME SYST, V50, P185, DOI 10.1007/s11241-013-9189-x
   Kelter T, 2011, EUROMICRO, P3, DOI 10.1109/ECRTS.2011.9
   Kildall G. A., 1973, Conference Record of ACM Symposium on Principles of Programming Languages, P194
   Kleinsorge J., 2013, P INT C EMB SOFTW EM
   Knoop J, 1996, ACM T PROGR LANG SYS, V18, P268, DOI 10.1145/229542.229545
   Li Y, 2009, REAL TIM SYST SYMP P, P57, DOI [10.1109/RTSS.2009.32, 10.1109/ICTM.2009.5412893]
   Li YTS, 1997, IEEE T COMPUT AID D, V16, P1477, DOI 10.1109/43.664229
   Mine A., 2012, LOG METH COMPUT SCI, V8, P63, DOI DOI 10.2168/LMCS-8
   Mittermayr R., 2012, OASICS, V23, P59, DOI [10.4230/OASIcs.WCET, DOI 10.4230/OASICS.WCET]
   Naumovich G, 1999, LECT NOTES COMPUT SC, V1687, P338, DOI 10.1145/318774.319252
   *OSEK VDX, 2001, OSEK VDX TIM TRIGG O
   Potop-Butucaru D., 2013, RR8234 INRIA
   Ramalingam G, 2000, ACM T PROGR LANG SYS, V22, P416, DOI 10.1145/349214.349241
   Schliecker S., 2008, CODESISSS, P161
   Schranzhofer A, 2010, DES AUT CON, P332
   Souyris J., 2007, 5 INT WORKSH WORST C, V1
   Synopsys Inc, 2015, COMET SYST ENG IDE
   TAYLOR RN, 1983, ACTA INFORM, V19, P57, DOI 10.1007/BF00263928
   TAYLOR RN, 1983, COMMUN ACM, V26, P362, DOI 10.1145/69586.69587
   Thesing S., 2004, SAFE PRECISE WCET DE
   Valmari A., 1989, PARLE '89. Parallel Architectures and Languages Europe. Vol. II: Parallel Languages Proceedings, P89
   Vollmer J., 1995, Parallel Architectures and Compilation Techniques. Proceedings of the IFIP WG10.3 Working Conference. PACT'95, P168
   Wilhelm R, 2008, ACM T EMBED COMPUT S, V7, DOI 10.1145/1347375.1347389
   Wilhelm S., 2012, THESIS
NR 41
TC 5
Z9 5
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 1
PY 2017
VL 133
SI SI
BP 175
EP 193
DI 10.1016/j.scico.2016.01.007
PN 2
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA EF1GC
UT WOS:000390072300005
OA hybrid
DA 2024-07-18
ER

PT J
AU Seceleanu, C
   Johansson, M
   Suryadevara, J
   Sapienza, G
   Seceleanu, T
   Ellevseth, SE
   Pettersson, P
AF Seceleanu, Cristina
   Johansson, Morgan
   Suryadevara, Jagadish
   Sapienza, Gaetana
   Seceleanu, Tiberiu
   Ellevseth, Stein-Erik
   Pettersson, Paul
TI Analyzing a wind turbine system: From simulation to formal verification
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Wind turbine system; Model-based testing; MaTeLo; Model checking; UPPAAL
ID MODEL; TOOL; LANGUAGE
AB Many industrial systems are hybrid by nature, most often being made of a discrete controller that senses and regulates the execution of a plant characterized by continuous dynamics. Examples of such systems include wind turbines that convert wind energy into electrical energy. Designing industrial control systems is challenging, due to the mixed nature of requirements (functional, timing, etc.) as well as due to the complexity stemming from the interaction of the controller with the plant. Model-based techniques help in tackling the design challenges, whereas methods such as simulation with tools like MATLABISimulink can be employed for analysis. Although practical, these methods alone cannot ensure full predictability, due to the fact that they cannot guarantee system properties for all possible executions of the system model. In order to ensure that the system will behave as expected under any operational circumstance, formal verification and validation procedures need to be added to the actual development process. In this paper, we propose an extension of the iFEST (industrial Framework for Embedded Systems Tools) process and platform for embedded systems design with model-based testing using MaTeLo, and model checking time-dependent requirements with the UPPAAL tool, as means of increasing the confidence in the system's behavior. To show the feasibility of the techniques on industrially-sized systems, we analyze a wind turbine industrial prototype model against functional and timing requirements. We capture the execution semantics of the plant and controller components of the wind turbine via logical clocks and constraints expressed in the clock constraint specification language (CCSL) of UML MARTE, after which we construct real-time models amenable to model checking, by mapping the timed behavior (expressed in CCSL) of the real-time components of the wind turbine, onto timed automata. Our work is a first application on an industrial wind turbine system of complementary methods for formal analysis, that is, model-based testing, and model checking a mathematically tractable system abstraction based on data obtained by simulating the system with MATLAB/Simulink. We also discuss relevant modeling and verification challenges encountered during our experiences with the wind turbine system. (C) 2016 Elsevier B.V. All rights reserved.
C1 [Seceleanu, Cristina; Sapienza, Gaetana; Seceleanu, Tiberiu; Pettersson, Paul] Malardalen Univ, Sch Innovat Design & Engn, Vasteras, Sweden.
   [Johansson, Morgan; Sapienza, Gaetana; Seceleanu, Tiberiu] ABB Corp Res, Baden, Switzerland.
   [Suryadevara, Jagadish] Volvo Construct Equipment, Eskilstuna, Sweden.
   [Ellevseth, Stein-Erik] ABB Corp Res, Oslo, Norway.
C3 Malardalen University; ABB; Volvo; ABB
RP Seceleanu, C (corresponding author), Malardalen Univ, Sch Innovat Design & Engn, Vasteras, Sweden.
EM cristina.seceleanu@mdh.se; morgan.ejohansson@se.abb.com;
   jagadish.suryadevara@volvo.com; gaetana.sapienza@se.abb.com;
   tiberiu.seceleanu@se.abb.com; steinee@eunet.no; paul.pettersson@mdh.se
RI Seceleanu, Cristina/AAG-7625-2020
OI seceleanu, tiberiu/0000-0003-1996-1234; Seceleanu,
   Cristina/0000-0003-2870-2680; Pettersson, Paul/0000-0003-4040-3480
FU ARTEMIS JU; VINNOVA, Swedish Governmental Agency for Innovation Systems,
   (MBAT project) [269335]; VINNOVA, Swedish Governmental Agency for
   Innovation Systems, (iFEST project) [100203]; Swedish Knowledge
   Foundation, within DPAC (Dependable Platforms for Autonomous Systems and
   Control) project
FX This work has been supported by funding from the ARTEMIS JU, and from
   VINNOVA, the Swedish Governmental Agency for Innovation Systems, grant
   agreement number 269335 (MBAT project), and grant agreement number
   100203 (iFEST project), and from the Swedish Knowledge Foundation,
   within the DPAC (Dependable Platforms for Autonomous Systems and
   Control) project.
CR Abdoul T, 2008, IEEE INT C ENG COMP, P263, DOI 10.1109/ICECCS.2008.24
   ALUR R, 1994, THEOR COMPUT SCI, V126, P183, DOI 10.1016/0304-3975(94)90010-8
   Alur R., 1999, Computer Aided Verification. 11th International Conference, CAV'99. Proceedings (Lecture Notes in Computer Science Vol.1633), P8
   ALUR R, 1993, INFORM COMPUT, V104, P2, DOI 10.1006/inco.1993.1024
   Alur R., 2011, 2011 International Conference on Embedded Software (EMSOFT 2011), P273
   André C, 2007, LECT NOTES COMPUT SC, V4735, P559
   [Anonymous], 2008, EASTADL2
   [Anonymous], 2012, PLASTICS ADDITIVES
   [Anonymous], [No title captured]
   [Anonymous], P 10 WORKSH QUANT AS
   [Anonymous], 2010, HP APPL LIFECYCLE MA
   [Anonymous], 2009, Res. Rep. RR-6925
   Back RJ, 2002, APSEC 2002: NINTH ASIA PACIFIC SOFTWARE ENGINEERING CONFERENCE, P147, DOI 10.1109/APSEC.2002.1182984
   Behrmann G., 2006, TUTORIAL UPPAAL 4 0, P1
   Biehl M., 2010, P 3 WORKSH MOD DRIV
   Björnander S, 2011, 2011 16TH IEEE INTERNATIONAL CONFERENCE ON ENGINEERING OF COMPLEX COMPUTER SYSTEMS (ICECCS), P355, DOI 10.1109/ICECCS.2011.43
   Bouyssounouse B., 2005, PROGRAMMING SOFTWARE, V3436
   Bujorianu M.L., 2011, INFORM CONTROL AUTOM, V85, P337
   Burkart R, 2011, IEEE DECIS CONTR P, P5485
   Chakraborty S, 2015, INT J SOFTW TOOLS TE, V17, P537, DOI 10.1007/s10009-014-0345-y
   David A, 2000, EUROMICRO, P165, DOI 10.1109/EMRTS.2000.854004
   Engels A, 1997, LECT NOTES COMPUT SC, V1217, P384, DOI 10.1007/BFb0035401
   Enoiu EP, 2012, IEEE INT C ENG COMP, P328, DOI 10.1109/ICECCS.2012.42
   Feng Q, 2010, INT CONF COMP SCI, P140, DOI 10.1109/ICCSIT.2010.5564585
   Goknil Arda, 2013, Software Architecture. 7th European Conference, ECSA 2013. Proceedings: LNCS 7584, P89, DOI 10.1007/978-3-642-39031-9_8
   Graaf H, 2003, IEEE SOFTWARE, V20, P61, DOI 10.1109/MS.2003.1241368
   Guiotto A., 2003, DASIA 2003, V532, P30
   Havelund K., 1999, Formal Methods for Real-Time and Probabilistic Systems. 5th International AMAST Workshop, ARTS'99. Proceedings, P277
   Hessel A, 2004, LECT NOTES COMPUT SC, V2931, P114
   Hugues J, 2008, ACM T EMBED COMPUT S, V7, DOI 10.1145/1376804.1376810
   JAHANIAN F, 1994, IEEE T SOFTWARE ENG, V20, P933, DOI 10.1109/32.368134
   Kang EY, 2013, RELIAB ENG SYST SAFE, V120, P127, DOI 10.1016/j.ress.2013.06.007
   Larsen K. G., 1997, International Journal on Software Tools for Technology Transfer, V1, P134, DOI 10.1007/s100090050010
   Liebel G, 2014, LECT NOTES COMPUT SC, V8767, P166, DOI 10.1007/978-3-319-11653-2_11
   Lindahl M, 1998, LECT NOTES COMPUT SC, V1384, P281, DOI 10.1007/BFb0054178
   Lindahl Magnus, 2001, International Journal on Software Tools for Technology Transfer, V3, P353, DOI [10.1007/s100090100048, DOI 10.1007/S100090100048]
   Mallet F, 2009, PROCEEDINGS OF THE 12TH IEEE INTERNATIONAL SYMPOSIUM ON OBJECT/COMPONENT/SERVICE-ORIENTED REAL-TIME DISTRIBUTED COMPUTING, P249, DOI 10.1109/ISORC.2009.18
   Marinescu R, 2015, ADV COMPUT, V98, P89, DOI 10.1016/bs.adcom.2015.03.003
   Marinescu R, 2015, COMM COM INF SC, V476, P189, DOI 10.1007/978-3-319-17581-2_13
   Mathworks, 2014, MATLAB SIMUL DES TOO
   MetaCase, 2016, METAEDIT VERS 5 1
   Norris J. R., 1998, MARKOV CHAINS
   OMG, 2009, UML PROF MARTE V1 0
   Peraldi-Frati MA, 2012, IEEE INT C ENG COMP, P230, DOI 10.1109/ICECCS.2012.5
   Qureshi TN, 2011, LECT NOTES COMPUT SC, V6903, P328, DOI 10.1007/978-3-642-23798-0_35
   Seceleanu T, 2013, COMPUTER, V46, P68, DOI 10.1109/MC.2013.297
   Slutej D, 2009, ELECTRON NOTES THEOR, V253, P161, DOI 10.1016/j.entcs.2009.09.034
   Suryadevara Jagadish, 2013, 2013 39th Euromicro Conference on Software Engineering and Advanced Applications (SEAA), P268, DOI 10.1109/SEAA.2013.46
   Suryadevara J, 2014, Formal Techniques for Safety-Critical Systems, P229
   Suryadevara J, 2013, LECT NOTES COMPUT SC, V8137, P1, DOI 10.1007/978-3-642-40561-7_1
   Twiflex, 2016, IND DISC BRAK
   Vulgarakis A, 2010, EUROMICRO CONF PROC, P113, DOI 10.1109/SEAA.2010.48
   Wolvers Ronald, 2013, 2013 39th Euromicro Conference on Software Engineering and Advanced Applications (SEAA), P244, DOI 10.1109/SEAA.2013.63
NR 53
TC 12
Z9 13
U1 2
U2 15
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 1
PY 2017
VL 133
SI SI
BP 216
EP 242
DI 10.1016/j.scico.2016.09.007
PN 2
PG 27
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA EF1GC
UT WOS:000390072300007
OA hybrid
DA 2024-07-18
ER

PT J
AU Ait-Ameur, Y
   Méry, D
AF Ait-Ameur, Yamine
   Mery, Dominique
TI Making explicit domain knowledge in formal system development
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE System design models; Explicit vs. implicit semantics; Ontologies and
   ontology engineering; Models verification and validation; Domain
   knowledge
ID WEB SERVICES; SEMANTICS
AB Modeling languages are concerned with providing techniques and tool support for the design, synthesis and analysis of the models resulting from a given modeling activity, this activity being usually part of a system development model or process. These languages quite successfully focused on the analysis of the designed system exploiting the expressed semantic power of the underlying modeling language. The semantics of these modeling languages are well understood by the system designers and/or the modeling language users i.e. implicit semantics.
   In general, modeling languages are not equipped with resources, concepts or entities handling explicitly domain engineering features and characteristics (domain knowledge) in. which the modeled systems evolve.
   Indeed, the designer has to explicitly handle the knowledge issued and/or mined from an analysis of this application domain i.e. explicit semantics. Nowadays, making explicit the domain knowledge inside system design models does not obey to any methodological rule validated by the practice. The modeling languages users introduce through types, constraints, profiles, etc. these domain knowledge features.
   Our claim is that ontologies are good candidates for handling explicit domain knowledge. They define domain theories and provide resources for uniquely identifying domain knowledge concepts. Therefore, allowing models to make references to ontologies is a modular solution for models to explicitly handle domain knowledge.
   Overcoming the absence of explicit semantics expression in the modeling languages used to specify systems models will increase the robustness of the designed system models. Indeed, the axioms and theorems resulting from the ontologies, thanks to references, can be used to strengthen the properties of the designed models.
   The objective of this paper is to offer rigorous mechanisms for handling domain knowledge in design models. This paper also shows how these mechanisms are set up in the cases of static, dynamic and formal models. (C) 2015 Elsevier B.V. All rights reserved.
C1 [Ait-Ameur, Yamine] INPT ENSEEIHT, IRIT, Toulouse, France.
   [Mery, Dominique] Univ Lorraine, LORIA, Nancy, France.
C3 Universite de Toulouse; Universite Toulouse III - Paul Sabatier;
   Universite Federale Toulouse Midi-Pyrenees (ComUE); Institut National
   Polytechnique de Toulouse; Universite de Lorraine
RP Ait-Ameur, Y (corresponding author), INPT ENSEEIHT, IRIT, Toulouse, France.; Méry, D (corresponding author), Univ Lorraine, LORIA, Nancy, France.
EM yamine@enseeiht.fr; dominique.mery@loria.fr
RI AMEUR, Yamine AIT/AAH-6612-2020
OI Yamine, AIT AMEUR/0000-0003-4582-9712
FU Agence Nationale de la Recherche (ANR) [ANR-13-INSE-0001]; Agence
   Nationale de la Recherche (ANR) [ANR-13-INSE-0001] Funding Source:
   Agence Nationale de la Recherche (ANR)
FX This work was supported by grant ANR-13-INSE-0001 (The IMPEX Project
   http://impex.gforge.inria.fr) from the Agence Nationale de la Recherche
   (ANR).
CR Abrial Jean-Raymond, 2010, International Journal on Software Tools for Technology Transfer, V12, P447, DOI 10.1007/s10009-010-0145-y
   Abrial J R, 2010, Modeling in Event-B: system and softeng
   Abrial JR, 1998, LECT NOTES COMPUT SC, V1393, P83
   Ait-Ameur Y., 1998, 1358420 ISOIS
   Ait-Ameur Y., 2013, STUDIES COMPUTATIONA, V488, P3
   Ait-Ameur Y, 2014, LECT NOTES COMPUT SC, V8803, P604, DOI 10.1007/978-3-662-45231-8_50
   Ait-Ameur Y, 2009, 2009 IEEE CONGRESS ON SERVICES (SERVICES-1 2009), VOLS 1 AND 2, P211, DOI 10.1109/SERVICES-I.2009.41
   Ait-Sadoune I, 2013, LECT NOTES COMPUT SC, V8220, P1, DOI 10.1007/978-3-642-41221-9_1
   Ait-Sadoune I, 2010, STUD COMPUT INTELL, V296, P51, DOI 10.1007/978-3-642-13273-5_4
   AITSADOUNE I, 2009, 14 IEEE INT C ENG CO, P1
   [Anonymous], 2011, Text Processing with GATE (Version 6)
   [Anonymous], 2007, WEB SERV BUS PROC EX
   [Anonymous], CEUR WORKSHOP P
   [Anonymous], 1984, NAT C AI
   [Anonymous], 1998, ISO1358442
   Barlatier P, 2012, APPL ONTOL, V7, P311, DOI 10.3233/AO-2012-0113
   Belaid Nabil, 2011, International Journal of Electronic Business Management, V9, P296
   Bertot Y., 2004, TEXT THEORET COMP S
   Bijan S.E.P., 2004, P INT WORKSH DESCR L, P6
   Bjorner D., 2006, EATCS SERIES
   Bjorner D., 2006, TEXTS THEORETICAL CO
   BJORNER D, 2007, EATCS TXB COMPUTER S
   Bjorner D, 2010, LECT NOTES COMPUT SC, V5930, P22, DOI 10.1007/978-3-642-11512-7_3
   Bontcheva K., 2004, Natural Language Engineering, V10, P349, DOI 10.1017/S1351324904003468
   Booch Grady, 1999, UNIFIED MODELING LAN, DOI DOI 10.1007/3-540-40011-7_10
   Brickley Dan., 2014, Rdf vocabulary description language 1.1:rdf schema w3c recomendation
   Broekstra J, 2002, LECT NOTES COMPUT SC, V2342, P54
   Broekstra J., 2004, SWAD EUR WORKSH SEM
   Chebieb A., 2015, P 9 INT S THEOR ASP
   Chebotko A., 2005, International Journal on Semantic Web and Information Systems, V1, P50, DOI 10.4018/jswis.2005010104
   Clarke Edmund M., 2001, Model Checking
   Connolly D., DAML OIL REFERENCE D
   Coutaz J, 2012, HUM FACTORS ERGON, P1195
   Dapoigny R, 2013, LECT NOTES ARTIF INT, V7735, P135
   Dehainsala H., 2007, LNCS
   Despres S, 2006, LECT NOTES COMPUT SC, V4031, P1014
   Fankam C, 2007, WEBIST 2007: Proceedings of the Third International Conference on Web Information Systems and Technologies, Vol WIA, P254
   Farquhar A, 1997, INT J HUM-COMPUT ST, V46, P707, DOI 10.1006/ijhc.1996.0121
   France R, 1998, COMPUT STAND INTER, V19, P325, DOI 10.1016/S0920-5489(98)00020-8
   Gabrilovich E, 2009, J ARTIF INTELL RES, V34, P443, DOI 10.1613/jair.2669
   Garlan David, 2002, P 1 WORKSH SELFH HEA, P27, DOI [10.1145/582128.582134, DOI 10.1145/582128.582134]
   GOGUEN JA, 1984, LECT NOTES COMPUT SC, V164, P221
   Gruber T.R., 1993, Formal Ontology in Conceptual Analysis and Knowledge Representation
   Haarslev V., 2001, Automated Reasoning. First International Joint Conference, IJCAR 2001. Proceedings (Lecture Notes in Artificial Intelligence Vol.2083), P701
   Haarslev V., 2001, CEUR WORKSHOP P, V49
   Handschuh S, 2003, IEEE INTELL SYST, V18, P42, DOI 10.1109/MIS.2003.1234768
   Handschuh S, 2003, COMPUT NETW, V42, P579, DOI 10.1016/S1389-1286(03)00226-3
   Harris S., 2003, Proc. of PSSS'03, P1
   Hitzler P., 2009, W3C RECOMM, V27
   Hopcroft J.E., 1979, Introduction to Automata Theory, Languages, and Computation
   JACKSON M, 1995, PROC INT CONF SOFTW, P15, DOI 10.1145/225014.225016
   Jean S, 2007, LECT NOTES BUS INF P, V1, P238
   Knublauch H, 2004, LECT NOTES COMPUT SC, V3298, P229
   Lange Christoph, 2012, 11th International Conference, AISC 2012 19th Symposium, Calculemus 2012. Proceedings 5th International Workshop, DML 2012. 11th International Conference, MKM 2012. Systems and Projects, Held as Part of CICM 2012, P463, DOI 10.1007/978-3-642-31374-5_37
   Lu Y, 2013, INT J COMPUT INTEG M, V26, P140, DOI 10.1080/0951192X.2012.681917
   Manna Z., 1995, TEMPORAL LOGICS REAC
   Manna Z., 1992, TEMPORAL LOGICS REAC
   Martin D., 2005, Semantic Web Services and Web Process Composition. First International Workshop, SWSSWPC 2004. Revised Selected Papers (Lecture Notes in Computer Science Vol.3387), P26
   Mastella LS, 2009, LECT NOTES COMPUT SC, V5588, P203, DOI 10.1007/978-3-642-02843-4_22
   Milner R., 1989, Communication and concurrency
   Milner R, 1982, CALCULUS COMMUNICATI
   Motik B., 2008, ERCIM NEWS, V72
   Owre S., 1993, TECHNICAL REPORT
   Pan Z., 2003, PRACTICAL SCALABLE S, P109
   Park M.J., 2007, LECT NOTES COMPUTER, V4443
   Pierra G., 2010, 1358432 ISO
   Pierra G., 2003, P 10 ISPE INT C CONC
   Pierra G., 1996, 1358442 ISO DIS
   Pierra G, 2008, LECT NOTES COMPUT SC, V4900, P174
   Platzer A, 2008, LECT NOTES ARTIF INT, V5195, P171, DOI 10.1007/978-3-540-71070-7_15
   Roman D, 2005, APPL ONTOL, V1, P77
   Stocker M., 2008, 6 INT WORKSH OWL EXP
   Thevenin D, 1999, HUMAN-COMPUTER INTERACTION - INTERACT '99, P110
   Trinkunas J, 2007, INF TECHNOL CONTROL, V36, P126
   Uschold M, 2003, AI MAG, V24, P25
   van Lamsweerde A, 1998, IEEE T SOFTWARE ENG, V24, P1089, DOI 10.1109/32.738341
   W. OWL Working Group, 2009, OWL 2 web ontology language: document overview
   Zave P, 1997, ACM COMPUT SURV, V29, P315, DOI 10.1145/267580.267581
   Zave P., 1997, ACM Transactions on Software Engineering and Methodology, V6, P1, DOI 10.1145/237432.237434
   Zayas DS, 2010, IEEE INT C ENG COMP, P355, DOI [10.1109/ICECCS.2010.35, 10.1109/ICECCS.2010.56]
NR 80
TC 17
Z9 18
U1 0
U2 9
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 1
PY 2016
VL 121
SI SI
BP 100
EP 127
DI 10.1016/j.scico.2015.12.004
PG 28
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DH6YU
UT WOS:000372938800007
OA Bronze, Green Accepted
DA 2024-07-18
ER

PT J
AU Barra, E
   Morato, J
AF Barra, Eduardo
   Morato, Jorge
TI Early knowledge organization assisted by aspects
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Advanced separation of concerns; Aspect oriented programming;
   Ontologies; Early aspects; Requirements engineering
ID PRINCIPLES; ONTOLOGIES
AB Throughout the lifecycle of software products, changes arise. The repercussions of these changes increase in more advanced stages of the development process. The aspect-oriented proposal is a software development paradigm that provides principles to manage changes. However, the current proposals for the development of the early stages of software do not provide an effective means for functional changes and updates. This paper presents a knowledge modeling methodology in the aspect-oriented context focused on the early stages of the software development. This methodology aims to ease the software evolution through a standardized knowledge representation, a multidimensional organization, and an appropriate advanced separation of concerns. The proposal of a conceptual modeling of early-aspect provides the means for an organization of multidimensional knowledge. The use of ontological techniques under the principles of knowledge-engineering allows specification of early knowledge. This paper presents a case study developed using the methodology and is used as a base to evaluate the methodology, comparing the efficiency in the changes against classic approaches. The results show that it is possible to ease the changes with the proposal presented in this paper. (C) 2015 Elsevier B.V. All rights reserved.
C1 [Barra, Eduardo; Morato, Jorge] Univ Carlos III Madrid, Dept Comp Sci, Avda Univ 30, Madrid 28911, Spain.
C3 Universidad Carlos III de Madrid
RP Barra, E (corresponding author), Univ Carlos III Madrid, Dept Comp Sci, Avda Univ 30, Madrid 28911, Spain.
EM ebarra@kr.inf.uc3m.es; jmorato@inf.uc3m.es
RI Morato, Jorge/A-5456-2011
OI Morato, Jorge/0000-0002-7530-9753
CR [Anonymous], AOSD ONTOLOGY 1 0 PU
   [Anonymous], IEEE1471
   [Anonymous], 1996, PATTERN ORIENTED SOF
   [Anonymous], ONTOLOGICAL ENG
   [Anonymous], 2013, Chaos Manifesto 2013: Think Big Act Small
   Baniassad E, 2004, PROC INT CONF SOFTW, P158, DOI 10.1109/ICSE.2004.1317438
   Baniassad E., 2005, ASPECT ORIENTED ANAL
   Barra E., 2007, 1 WORKSH ASP ARCH DE
   Brewster C, 2004, IEEE INTELL SYST, V19, P72, DOI 10.1109/MIS.2004.1265889
   Brichau J, 2002, LECT NOTES COMPUT SC, V2323, P107
   Elrad T, 2001, COMMUN ACM, V44, P28
   ESA-Board-for-Software-Standardisation-and-Control, 1994, ESA SOFTW ENG STAND, P156
   Filman R., 2004, ASPECT ORIENTED SOFT
   Flower L., 1981, COLL COMPOS COMMUN, V32, P365, DOI DOI 10.2307/356600
   FUENTES L, 2006, P WORKSH MOD BAS DEV, P10
   GAO, 1979, CONTR COMP SOFTW DEV
   Garcia A., 2006, SIGSOFT SOFTW ENG NO, V31, P6
   Garlan D., 1993, Advances in software engineering and knowledge engineering, P1
   Gruber TR, 1995, INT J HUM-COMPUT ST, V43, P907, DOI 10.1006/ijhc.1995.1081
   Grundy J, 1999, IEEE INTERNATIONAL SYMPOSIUM ON REQUIREMENTS ENGINEERING, PROCEEDINGS, P84, DOI 10.1109/ISRE.1999.777988
   Han Y., 2005, P 6 INT WORKSH ASP O
   Hjorland B, 2013, INFORM PROCESS MANAG, V49, P545, DOI 10.1016/j.ipm.2012.10.001
   IEEE, 1998, 8301998 IEEE
   Jacobson Ivar., 2005, ASPECT ORIENTED SOFT
   Jureta IJ, 2008, INT REQUIR ENG CONF, P71, DOI 10.1109/RE.2008.13
   Kaiya H, 2006, RE'06: 14TH IEEE INTERNATIONAL REQUIREMENTS ENGINEERING CONFERENCE, PROCEEDINGS, P189
   Kazman R, 1996, IEEE SOFTWARE, V13, P47, DOI 10.1109/52.542294
   Kiczales G, 1997, LECT NOTES COMPUT SC, V1241, P220, DOI 10.1007/BFb0053381
   Kiczales G., 2001, ECOOP 2001 - Object-Oriented Programming. 15th European Conference. Proceedings (Lecture Notes in Computer Science Vol.2072), P327
   Laddad R., 2003, ASPECTJ ACTION PRACT
   Lasheras J, 2009, J RES PRACT INF TECH, V41, P119
   Moreira A, 2005, 13TH IEEE INTERNATIONAL CONFERENCE ON REQUIREMENTS ENGINEERING, PROCEEDINGS, P285, DOI 10.1109/RE.2005.46
   Navasa A., 2002, P ASP OR SOFTW DEV 2
   Ossher H., 2000, Proceedings of the 2000 International Conference on Software Engineering. ICSE 2000 the New Millennium, P734, DOI 10.1109/ICSE.2000.870483
   Perry D. E., 1992, SIGSOFT Software Engineering Notes, V17, P40, DOI 10.1145/141874.141884
   Pressman R. S., 2010, Software Engineering: A Practitioner's Approach
   Rashid A, 2002, IEEE JOINT INTERNATIONAL CONFERENCE ON REQUIREMENTS ENGINEERING, PROCEEDINGS, P199, DOI 10.1109/ICRE.2002.1048526
   Rashid A., 2003, AOSD 2003 P 2 INT C, P11
   Schauerhuber A., 2006, 8 INT WORKSH ASP OR
   Sommerville I, 1997, ANN SOFTW ENG, V3, P101, DOI 10.1023/A:1018946223345
   Sommerville I., 1999, REQUIREMENTS ENG GOO
   Souag A, 2013, 2013 IEEE 37TH ANNUAL COMPUTER SOFTWARE AND APPLICATIONS CONFERENCE WORKSHOPS (COMPSACW), P101, DOI 10.1109/COMPSACW.2013.124
   Stecklein J.M., 2004, ERROR COST ESCALATIO
   Tekinerdogan B, 2004, FOURTH WORKING IEEE/IFIP CONFERENCE ON SOFTWARE ARCHITECTURE (WICSA 2004), PROCEEDINGS, P5, DOI 10.1109/WICSA.2004.1310685
   Thayer R.H., 2005, SOFTWARE ENG DEV P E, V1e
   Weston N, 2009, REQUIR ENG, V14, P247, DOI 10.1007/s00766-009-0083-y
   Yu YJ, 2004, 12TH IEEE INTERNATIONAL REQUIREMENTS ENGINEERING CONFERENCE, PROCEEDINGS, P38
NR 47
TC 0
Z9 0
U1 0
U2 18
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 1
PY 2016
VL 121
SI SI
BP 34
EP 54
DI 10.1016/j.scico.2015.07.007
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DH6YU
UT WOS:000372938800004
OA Bronze
DA 2024-07-18
ER

PT J
AU Viera, M
   Swierstra, SD
AF Viera, Marcos
   Swierstra, S. Doaitse
TI Compositional compiler construction: Oberon0
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE First-class attribute grammars; First-class grammars; Haskell; Oberon0;
   LDTA Tool Challenge
AB We describe an implementation of an Oberon0 compiler using the techniques proposed in the CoCoCo project. The compiler is constructed out of a collection of pre-compiled, statically type-checked language-definition fragments written in Haskell. (C) 2015 Elsevier B.V. All rights reserved.
C1 [Viera, Marcos] Univ Republica, Inst Comp, Montevideo, Uruguay.
   [Swierstra, S. Doaitse] Univ Utrecht, Dept Comp Sci, NL-3508 TB Utrecht, Netherlands.
C3 Universidad de la Republica, Uruguay; Utrecht University
RP Viera, M (corresponding author), Univ Republica, Inst Comp, Montevideo, Uruguay.
EM mviera@fing.edu.uy
OI Swierstra, Doaitse/0000-0001-6758-4280
CR [Anonymous], [No title captured]
   [Anonymous], P 4 INT WORKSH TYP L
   BAARS A, 2009, PREL P 9 WORKSH LANG, P18
   KASTENS U, 1994, ACTA INFORM, V31, P601, DOI 10.1007/BF01177548
   Kiselyov Oleg, 2004, HASKELL 04, P96, DOI DOI 10.1145/1017472.1017488
   Lammel R., 1999, Proceedings of the 1999 ACM SIGPLAN. Workshop on Partial Evaluation and Semantics-Based Program Manipulation (PEPM'99), P131
   Lammel R., 2006, GPCE 06, P161
   Mcbride C, 2008, J FUNCT PROGRAM, V18, P1, DOI 10.1017/S0956796807006326
   Swierstra S.D., 2000, HASK WORKSH
   Swierstra SD, 2009, LECT NOTES COMPUT SC, V5520, P252, DOI 10.1007/978-3-642-03153-3_6
   Swierstra W, 2008, J FUNCT PROGRAM, V18, P423, DOI 10.1017/S0956796808006758
   Viera M., 2012, P 12 WORKSH LANG DES, P47
   Viera M, 2014, SCI COMPUT PROGRAM, V96, P211, DOI 10.1016/j.scico.2014.01.014
   Viera M, 2009, ICFP'09: PROCEEDINGS OF THE 2009 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P245
   Viera Marcos, 2012, P 12 WORKSH LANG DES
   Wirth N., 1996, INT COMPUTER SCI SER
NR 16
TC 2
Z9 2
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 15
PY 2015
VL 114
BP 45
EP 56
DI 10.1016/j.scico.2015.10.008
PG 12
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CZ5DX
UT WOS:000367123800005
OA Green Published, Bronze
DA 2024-07-18
ER

PT J
AU Beszédes, A
   Schrettner, L
   Csaba, B
   Gergely, T
   Jász, J
   Gyimóthy, T
AF Beszedes, Arpad
   Schrettner, Lajos
   Csaba, Bela
   Gergely, Tamas
   Jasz, Judit
   Gyimothy, Tibor
TI Empirical investigation of SEA-based dependence cluster properties
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Source code dependence analysis; Dependence clusters; Linchpins and
   linchpin sets; Static Execute After; Change impact analysis
AB Dependence clusters are (maximal) groups of source code entities that each depend on the other according to some dependence relation. Such clusters are generally seen as detrimental to many software engineering activities, but their formation and overall structure are not well understood yet. In a set of subject programs from moderate to large sizes, we observed frequent occurrence of dependence clusters using Static Execute After (SEA) dependences (SEA is a conservative yet efficiently computable dependence relation on program procedures). We identified potential linchpins; these are procedures that can primarily be made responsible for keeping the cluster together. Furthermore, we found that as the size of the system increases, it is more likely that multiple procedures are jointly responsible as sets of linchpins. We also give a heuristic method based on structural metrics for locating possible linchpins as their exact identification is unfeasible in practice, and presently there are no better ways than the brute-force method. We defined novel metrics to be able to uncover clusters of different sizes in programs, and also to relate programs in terms of their degree of clusterization. Finally, we present a possible application of SEA-based dependences in change impact analysis, and investigate the effect of dependence clusters on the successfulness of this activity. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Beszedes, Arpad; Schrettner, Lajos; Gergely, Tamas; Jasz, Judit; Gyimothy, Tibor] Univ Szeged, Dept Software Engn, Szeged, Hungary.
   [Csaba, Bela] Univ Szeged, Dept Set Theory & Math Log, Szeged, Hungary.
C3 Szeged University; Szeged University
RP Beszédes, A (corresponding author), Univ Szeged, Dept Software Engn, Szeged, Hungary.
EM beszedes@inf.u-szeged.hu; schrettner@inf.u-szeged.hu;
   bcsaba@math.u-szeged.hu; gertom@inf.u-szeged.hu; jasy@inf.u-szeged.hu;
   gyimothy@inf.u-szeged.hu
RI Gergely, Tamás/ABA-7259-2021; Jász, Judit/ABA-6962-2021; Csaba,
   Bela/M-4188-2018; Gyimothy, Tibor/M-3705-2018
OI Gergely, Tamás/0000-0001-7504-3580; Csaba, Bela/0000-0002-6696-3219;
   Jasz, Judit/0000-0001-6176-9401; Beszedes, Arpad/0000-0002-5421-9302;
   Gyimothy, Tibor/0000-0002-2123-7387
FU Hungarian National Grants [GOP-1.1.1-11-2011-0049]; EU FP7 STREP project
   REPARA [TAMOP-4.2.2.A-11/1/KONV-2012-0073, ICT-609666]
FX The authors would like to thank Z. Herczeg, L. Lango Cs. Osztrogonac, J.
   Taylor, D. Tengeri and B. Vancsics for their supporting work in this
   research. This research was partially supported by the Hungarian
   National Grants GOP-1.1.1-11-2011-0049 and
   TAMOP-4.2.2.A-11/1/KONV-2012-0073 the EU FP7 STREP project REPARA
   (ICT-609666).
CR Acharya M, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P746, DOI 10.1145/1985793.1985898
   Alon N., 2008, The Probabilistic Method
   [Anonymous], 1977, Flow Analysis of Computer Programs
   Beszédes A, 2007, PROC IEEE INT CONF S, P254
   Beszédes A, 2013, IEEE INT WORK C SO, P1, DOI 10.1109/SCAM.2013.6648178
   Beszédes A, 2012, 2012 28TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE (ICSM), P46, DOI 10.1109/ICSM.2012.6405252
   Binkley D, 2005, PROC IEEE INT CONF S, P177
   Binkley D, 2007, FoSE 2007: Future of Software Engineering, P104, DOI 10.1109/FOSE.2007.27
   Binkley D, 2013, ACM T PROGR LANG SYS, V35, DOI 10.1145/2491522.2491524
   Binkley D, 2009, IEEE INT WORK C SO, P89, DOI 10.1109/SCAM.2009.18
   Binkley D, 2010, J SYST SOFTWARE, V83, P96, DOI 10.1016/j.jss.2009.03.038
   Black S, 2009, 2009 35TH EUROMICRO CONFERENCE ON SOFTWARE ENGINEERING AND ADVANCED APPLICATIONS, PROCEEDINGS, P3, DOI 10.1109/SEAA.2009.94
   Bohner S. A., 1996, SOFTWARE CHANGE IMPA
   Csaba B, 2013, EUR CON SFTWR MTNCE, P345, DOI 10.1109/CSMR.2013.46
   Ferenc R, 2002, PROC IEEE INT CONF S, P172, DOI 10.1109/ICSM.2002.1167764
   GCC, 2014, GNU COMP COLL
   Hajnal A, 2012, J SOFTW-EVOL PROC, V24, P67, DOI 10.1002/smr.533
   Hamilton J, 2012, 2012 28TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE (ICSM), P579, DOI 10.1109/ICSM.2012.6405325
   Harman M, 2009, ACM T PROGR LANG SYS, V32, DOI 10.1145/1596527.1596528
   HORWITZ S, 1990, ACM T PROGR LANG SYS, V12, P26, DOI [10.1145/77606.77608, 10.1145/960116.53994]
   Islam S., 2013, J SYST SOFTW
   Islam S, 2010, SOFTVIS 2010: PROCEEDINGS OF THE 2010 INTERNATIONAL SYMPOSIUM ON SOFTWARE VISUALIZATION, P93
   Jász J, 2008, PROC IEEE INT CONF S, P137, DOI 10.1109/ICSM.2008.4658062
   Jgsz J., 2009, THESIS U SZEGED
   Kawarabayashi K, 2010, ANN IEEE SYMP FOUND, P153, DOI 10.1109/FOCS.2010.22
   Mitchell BS, 2006, IEEE T SOFTWARE ENG, V32, P193, DOI 10.1109/TSE.2006.31
   Schrettner L., 2012, 2012 12th IEEE Working Conference on Source Code Analysis and Manipulation (SCAM 2012), P24, DOI 10.1109/SCAM.2012.22
   WebKit, 2014, WEBKIT OP SOURC PROJ
   WEISER M, 1984, IEEE T SOFTWARE ENG, V10, P352, DOI 10.1109/TSE.1984.5010248
NR 29
TC 2
Z9 2
U1 0
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUL 1
PY 2015
VL 105
BP 3
EP 25
DI 10.1016/j.scico.2014.09.010
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CK4MT
UT WOS:000356198600002
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Gupta, G
AF Gupta, Gopal
TI Language-based software engineering
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Domain specific languages; Software engineering
ID CORRECT CODE GENERATION; SPECIFICATION; VERIFICATION
AB We present a language-centric view of the software development process. We argue that success of the domain-specific language (DSL) methodology depends on being able to rapidly craft a DSL's implementation infrastructure. We present logic programming as a rapid way of developing this implementation infrastructure. We also present a language-centric view of a software system as a processor of its input language. (C) 2014 Elsevier B.V. All rights reserved.
C1 Univ Texas Dallas, Dept Comp Sci, Richardson, TX 75083 USA.
C3 University of Texas System; University of Texas Dallas
RP Gupta, G (corresponding author), Univ Texas Dallas, Dept Comp Sci, Richardson, TX 75083 USA.
EM gupta@utdallas.edu
FU Erik Jonsson Endowed Chair
FX I am grateful to Enrico Pantelli, Qian Wang, Hai-Feng Guo and Michael
   Leuschel for discussions. Support from the Erik Jonsson Endowed Chair is
   also gratefully acknowledged.
CR [Anonymous], 2011, SIGBED REV
   Gupta G, 1997, REAL TIM SYST SYMP P, P230, DOI 10.1109/REAL.1997.641285
   Gupta G, 2002, LECT NOTES ARTIF INT, V2407, P211
   Gupta G., 1999, The Logic Programming Paradigm, P127
   Gupta G., 2002, LNCS, V2257, P82
   Interoperate Inc., 2011, WHIT PAP
   Jones ND, 1996, ACM COMPUT SURV, V28, P480, DOI 10.1145/243439.243447
   Kiczales G., 1996, ACM COMPUT SURV A, V28A
   Kirby J.  Jr., 1999, Proceedings 15th Annual Computer Security Applications Conference (ACSAC'99), P109, DOI 10.1109/CSAC.1999.816018
   Klint P., 2010, LDTA
   Leuschel M, 2004, THEOR PRACT LOG PROG, V4, P543, DOI 10.1017/S1471068404002078
   Leveson NG, 1999, LECT NOTES COMPUT SC, V1687, P127, DOI 10.1145/318774.318937
   Marple K., 2008, TECHNICAL REPORT
   Mernik M, 2005, ACM COMPUT SURV, V37, P316, DOI 10.1145/1118890.1118892
   Pontelli Enrico, 2003, J Bioinform Comput Biol, V1, P201, DOI 10.1142/S0219720003000101
   Royce W.W., 1970, P IEEE WESCON IEEE, P1
   STERLING L, 1994, ART PROLOG
   van Deursen A, 2000, ACM SIGPLAN NOTICES, V35, P26, DOI 10.1145/352029.352035
   Wang Q, 2005, LECT NOTES COMPUT SC, V3350, P98
   Wang Q, 2005, ELECTRON NOTES THEOR, V118, P87, DOI 10.1016/j.entcs.2004.11.008
   Wang Qian, 2005, ACM S APPL COMP MAR
NR 21
TC 8
Z9 8
U1 1
U2 7
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 1
PY 2015
VL 97
SI SI
BP 37
EP 40
DI 10.1016/j.scico.2014.02.010
PN 1
PG 4
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AU6PR
UT WOS:000345725100007
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Preda, MD
   Gabbrielli, M
   Giallorenzo, S
   Lanese, I
   Mauro, J
AF Preda, Mila Dalla
   Gabbrielli, Maurizio
   Giallorenzo, Saverio
   Lanese, Ivan
   Mauro, Jacopo
TI Developing correct, distributed, adaptive software
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Choreography languages; Adaptation; Abstract interpretation
ID INFORMATION
AB We illustrate our approach to develop and verify distributed, adaptive software systems. The cornerstone of our framework is the use of choreography languages, which allow us to obtain correctness by construction. Workflow Patterns are also used as abstract tools to design real systems, while techniques based on abstract interpretation and on dynamic verification are integrated in our framework to reduce the complexity of verification. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Preda, Mila Dalla; Gabbrielli, Maurizio; Giallorenzo, Saverio; Lanese, Ivan; Mauro, Jacopo] Univ Bologna, Lab Focus INRIA, Dept Comp Sci, I-40126 Bologna, Italy.
C3 University of Bologna
RP Gabbrielli, M (corresponding author), Univ Bologna, Lab Focus INRIA, Dept Comp Sci, I-40126 Bologna, Italy.
RI Lanese, Ivan/HNP-9572-2023; Giallorenzo, Saverio/M-5713-2018
OI Giallorenzo, Saverio/0000-0002-3658-6395; Mauro,
   Jacopo/0000-0002-5285-2868; GABBRIELLI, MAURIZIO/0000-0003-0609-8662
CR [Anonymous], 5 INT WORKSH WEB SER
   [Anonymous], 2013, P INT C ASP OR SOFTW, DOI [DOI 10.1145/2451436, DOI 10.1145/2451436.2451461, 10.1145/2451436.2451461]
   Basu S, 2012, ACM SIGPLAN NOTICES, V47, P191, DOI 10.1145/2103621.2103680
   Bergstra JA, 1998, SCI COMPUT PROGRAM, V31, P205, DOI 10.1016/S0167-6423(97)00021-X
   Bhargavan K, 2009, PROCEEDINGS OF THE 22ND IEEE COMPUTER SECURITY FOUNDATIONS SYMPOSIUM, P124, DOI 10.1109/CSF.2009.26
   Bocchi L, 2013, LECT NOTES COMPUT SC, V7892, P50
   Bragaglia Stefano, 2012, Rules on the Web: Research and Applications. Proceedings of the 6th International Symposium, RuleML 2012, P151, DOI 10.1007/978-3-642-32689-9_12
   Bravetti M, 2007, LECT NOTES COMPUT SC, V4829, P34
   Bucchiarone A., 2012, Proceedings of the 2012 IEEE 19th International Conference on Web Services (ICWS), P33, DOI 10.1109/ICWS.2012.56
   Capecchi S, 2011, ELECTRON P THEOR COM, P16, DOI 10.4204/EPTCS.64.2
   Capecchi S, 2010, LECT NOTES COMPUT SC, V6269, P237, DOI 10.1007/978-3-642-15375-4_17
   Carbone M, 2013, ACM SIGPLAN NOTICES, V48, P263, DOI 10.1145/2480359.2429101
   Carbone M, 2012, ACM T PROGR LANG SYS, V34, DOI 10.1145/2220365.2220367
   Castagna G, 2012, LOG METH COMPUT SCI, V8, DOI 10.2168/LMCS-8(1:24)2012
   Chen WK, 2001, INT CON DISTR COMP S, P635, DOI 10.1109/ICDSC.2001.918994
   Dalla Preda M, 2013, SAFE RUN TIME ADAPTA
   Dalla Preda M, 2010, LECT NOTES COMPUT SC, V6337, P218, DOI 10.1007/978-3-642-15769-1_14
   Gabbrielli M., 2013, WORKFLOW PATTERNS CO
   Ghezzi C., 2011, SEAMS, P50
   Giacobazzi R, 2004, ACM SIGPLAN NOTICES, V39, P186, DOI 10.1145/982962.964017
   Giacobazzi R, 2010, J COMPUT SECUR, V18, P751, DOI 10.3233/JCS-2009-0382
   Goetz S., 2008, RAM SE, P21
   Honda K, 2008, ACM SIGPLAN NOTICES, V43, P273, DOI 10.1145/1328897.1328472
   Klint P, 2009, IEEE INT WORK C SO, P168, DOI 10.1109/SCAM.2009.28
   KOWALSKI R, 1986, NEW GENERAT COMPUT, V4, P67, DOI 10.1007/BF03037383
   Lanese I, 2010, LECT NOTES COMPUT SC, V6084, P284, DOI 10.1007/978-3-642-15640-3_19
   Lanese I, 2008, SEFM 2008: SIXTH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING AND FORMAL METHODS, PROCEEDINGS, P323, DOI 10.1109/SEFM.2008.11
   Leite L., 2012, SERVICE ORIENTED COM, V7, P1
   Montesi F, 2007, ECOWS 07: PROCEEDING OF THE 5TH IEEE EUROPEAN CONFERENCE ON WEB SERVICES, P13, DOI 10.1109/ECOWS.2007.19
   Planul J, 2009, LECT NOTES COMPUT SC, V5710, P511, DOI 10.1007/978-3-642-04081-8_34
   Van der Aalst WMP, 2003, DISTRIB PARALLEL DAT, V14, P5, DOI 10.1023/A:1022883727209
   Yang Z., 2002, WOSS 02, P85
   Zhang J, 2009, AOSD'09: 8TH INTERNATIONAL CONFERENCE ON ASPECT-ORIENTED SOFTWARE DEVELOPMENT, P161
NR 33
TC 4
Z9 4
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 1
PY 2015
VL 97
SI SI
BP 41
EP 46
DI 10.1016/j.scico.2013.11.019
PN 1
PG 6
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AU6PR
UT WOS:000345725100008
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Viera, M
   Swierstra, SD
AF Viera, Marcos
   Swierstra, S. Doaitse
TI Attribute grammar macros
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Attribute grammar macro; Extensible language; First-class attribute
   grammar; Attribute redefinition; Haskell
ID LANGUAGE
AB Having extensible languages is appealing, but raises the question of how to construct extensible compilers and how to compose compilers out of a collection of pre-compiled components. We show how having attribute grammar fragments as first-class values can be put into good use to answer this question; the approach leads naturally to a plug-in architecture, in which a core compiler can be constructed out of a (collection of) precompiled component(s), to which extra components can safely be added as the need arises. We extend AspectAG, our Haskell library for building strongly typed first-class attribute grammars, with a set of combinators that make it easy to describe new semantics in terms of already existing semantics, just as syntax macros extend the syntax of a language. We especially show how semantics thus defined can be redefined, thus adapting some aspects of the behavior as defined by the macro system only. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Viera, Marcos] Univ Republica, Inst Computac, Montevideo, Uruguay.
   [Swierstra, S. Doaitse] Univ Utrecht, Dept Comp Sci, NL-3508 TB Utrecht, Netherlands.
C3 Universidad de la Republica, Uruguay; Utrecht University
RP Viera, M (corresponding author), Univ Republica, Inst Computac, Montevideo, Uruguay.
CR [Anonymous], 2012, P 8 ACM SIGPLAN WORK, DOI [10.1145/2103786.2103795, DOI 10.1145/2103786.2103795]
   Bravenboer M, 2008, SCI COMPUT PROGRAM, V72, P52, DOI 10.1016/j.scico.2007.11.003
   Cartwright R., 1994, Theoretical Aspects of Computer Software. International Symposium TACS '94 Proceedings, P244
   De Moor O., 2000, Informatica, V24, P329
   de Moor O, 2000, LECT NOTES COMPUT SC, V1799, P121
   Dijkstra A, 2006, LECT NOTES COMPUT SC, V3945, P30
   Dijkstra A, 2009, HASKELL'09: PROCEEDINGS OF THE 2009 ACM SIGPLAN HASKELL SYMPOSIUM, P93
   Ekman T, 2007, SCI COMPUT PROGRAM, V69, P14, DOI 10.1016/j.scico.2007.02.003
   Heeren B, 2003, ACM SIGPLAN NOTICES, V38, P3, DOI 10.1145/944746.944707
   Kaminski T., 2011, SILVER REFERENCE MAN
   Kaminski Ted, 2012, Lecture Notes in Computer Science, V7745, P352, DOI DOI 10.1007/978-3-642-36089-3_20
   Kiselyov O, 2013, ACM SIGPLAN NOTICES, V48, P59, DOI 10.1145/2503778.2503791
   Kiselyov Oleg, 2004, HASKELL 04, P96, DOI DOI 10.1145/1017472.1017488
   LEAVENWORTH BM, 1966, COMMUN ACM, V9, P790, DOI 10.1145/365876.365879
   Maddox W., 1989, SEMANTICALLY SENSITI
   Martins P., 2013, LNCS
   McBride C, 2002, J FUNCT PROGRAM, V12, P375, DOI 10.1017/S0956796802004355
   Mernik M, 2005, COMPUT LANG SYST STR, V31, P1, DOI 10.1016/j.cl.2004.02.001
   Saraiva J, 2002, LECT NOTES COMPUT SC, V2487, P268
   Schrijvers T, 2011, ACM SIGPLAN NOTICES, V46, P32, DOI 10.1145/2034574.2034781
   Sloane A. M., 2009, P 9 WORKSH LANG DESC
   Swierstra SD, 2009, LECT NOTES COMPUT SC, V5520, P252, DOI 10.1007/978-3-642-03153-3_6
   Swierstra SD, 2009, J FUNCT PROGRAM, V19, P1, DOI 10.1017/S0956796808006990
   Van Wyk E., 2002, LNCS, V2304
   Van Wyk E, 2010, SCI COMPUT PROGRAM, V75, P39, DOI 10.1016/j.scico.2009.07.004
   Viera M., 2012, UUCS2012016
   Viera M., 2013, THESIS UTRECHT U
   Viera M., 2012, P 12 WORKSH LANG DES, P47
   Viera M, 2009, ACM SIGPLAN NOTICES, V44, P245, DOI 10.1145/1631687.1596586
   Wadler R, 1998, EXPRESION RPOBLEM
   Wirth N., 1996, INT COMPUTER SCI SER
NR 31
TC 2
Z9 2
U1 0
U2 3
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 15
PY 2014
VL 96
BP 211
EP 229
DI 10.1016/j.scico.2014.01.014
PN 2
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AT8JY
UT WOS:000345180900004
DA 2024-07-18
ER

PT J
AU García-Pérez, A
   Nogueira, P
AF Garcia-Perez, A.
   Nogueira, P.
TI On the syntactic and functional correspondence between hybrid (or
   layered) normalisers and abstract machines
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Operational semantics; Program transformation; Reduction strategies;
   Abstract machines; Full reduction
AB We show how to connect the syntactic and the functional correspondence for normalisers and abstract machines implementing hybrid (or layered) reduction strategies, that is, strategies that depend on subsidiary sub-strategies. Many fundamental strategies in the literature are hybrid, in particular, many full-reducing strategies, and many full-reducing and complete strategies that deliver a fully reduced result when it exists. If we follow the standard program-transformation steps the abstract machines obtained for hybrids after the syntactic correspondence cannot be refunctionalised, and the junction with the functional correspondence is severed. However, a solution is possible based on establishing the shape invariant of well-formed continuation stacks. We illustrate the problem and the solution with the derivation of substitution-based normalisers for normal order, a hybrid, full-reducing, and complete strategy of the pure lambda calculus. The machine we obtain is a substitution-based, eval/apply, open-terms version of Pierre Cregut's full-reducing Krivine machine KN. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Garcia-Perez, A.] IMDEA Software Inst, Madrid 28223, Spain.
   [Garcia-Perez, A.; Nogueira, P.] Univ Politecn Madrid, Babel Res Grp, E-28660 Madrid, Spain.
C3 IMDEA Software Institute; Universidad Politecnica de Madrid
RP García-Pérez, A (corresponding author), IMDEA Software Inst, Campus Montegancedo, Madrid 28223, Spain.
EM agarcia@babel.ls.fi.upm.es; pablo.nogueira@upm.es
RI García-Pérez, Álvaro/AFB-0654-2022
OI García-Pérez, Álvaro/0000-0002-9558-6037
FU Spanish 'Ministerio de Economia y Competitividad' through project
   DESAFIOS10 [TIN2009-14599-C03-00]; 'Ministerio de Economia y
   Competitividad' through project STRONGSOFT [TIN2012-39391-C04-02];
   'Comunidad de Madrid' through programme PROMETIDOS [P2009/TIC-1465];
   Comunidad de Madrid grant [CPI/0622/2008]
FX Research partially funded by the Spanish 'Ministerio de Economia y
   Competitividad' through projects DESAFIOS10 TIN2009-14599-C03-00 and
   STRONGSOFT TIN2012-39391-C04-02, and by 'Comunidad de Madrid' through
   programme PROMETIDOS P2009/TIC-1465. The first author has been supported
   by Comunidad de Madrid grant CPI/0622/2008.
CR Aehlig K, 2004, MATH STRUCT COMP SCI, V14, P587, DOI 10.1017/S096012950400427X
   Ager M.S., 2003, RS0314 BRICS AARH U
   Ager Mads Sig, 2003, Proceedings of the 5th ACM SIGPLAN International Conference on Principles and Practice of Declaritive Programming, P8, DOI DOI 10.1145/888251.888254
   Ager MS, 2005, THEOR COMPUT SCI, V342, P149, DOI 10.1016/j.tcs.2005.06.008
   [Anonymous], 1984, The Lambda Calculus: Its Syntax and Semantics
   BARENDREGT HP, 1987, INFORM COMPUT, V75, P191, DOI 10.1016/0890-5401(87)90001-0
   Biernacka M, 2005, LOG METH COMPUT SCI, V1, DOI 10.2168/LMCS-1(2:5)2005
   Biernacka M, 2008, ACM T COMPUT LOG, V9, DOI 10.1145/1297658.1297664
   Cregut Pierre, 2007, Higher-Order and Symbolic Computation, V20, P209, DOI 10.1007/s10990-007-9015-z
   Cregut Pierre, 1990, LISP FUNCTIONAL PROG, P333, DOI [10.1145/91556.91681, DOI 10.1145/91556.91681]
   Curien P.-L., 1993, PROG THEOR CONPUT SC
   Curry H., 1958, Combinatory Logic, VI
   Danvy O., 2011, Proceedings of the 2011 ACM SIGPLAN Workshop on Partial Evaluation and Program Manipulation, PEPM 2011, Austin, TX, USA, January 24-25, 2011, P1, DOI DOI 10.1145/1929501.1929503
   Danvy O., 2004, RS0426 BRICS AARH U
   Danvy O., 2013, SCI M HON PIERR LOUI
   Danvy O., 2013, P 23 S LOG BAS PROGR, P145
   Danvy O, 2008, INFORM PROCESS LETT, V106, P100, DOI 10.1016/j.ipl.2007.10.010
   Danvy O, 2005, ELECTRON NOTES THEOR, V124, P79, DOI 10.1016/j.entcs.2005.01.007
   Danvy Olivier, 2006, THESIS AARHUS U
   Dershowitz N., 1981, Automata, Languages and Programming. Eighth Colloquium, P448
   Felleisen M., 1987, THESIS INDIANA U
   Ganz SE, 1999, ACM SIGPLAN NOTICES, V34, P18, DOI 10.1145/317765.317779
   Garcia-Perez A., 2013, P PARTIAL EVALUATION, P107
   Garcia-Perez A., 2013, 15 INT S PRINCIPLES, P85, DOI DOI 10.1145/2505879.2505887
   Geupel O., 1989, MIP8922 U PASSAU
   Grégoire B, 2002, ACM SIGPLAN NOTICES, V37, P235, DOI 10.1145/583852.581501
   GUTTAG JV, 1983, SIAM J COMPUT, V12, P189, DOI 10.1137/0212012
   KAHN G, 1987, LECT NOTES COMPUT SC, V247, P22
   Klein C, 2012, ACM SIGPLAN NOTICES, V47, P285, DOI 10.1145/2103621.2103691
   LANDIN PJ, 1964, COMPUT J, V6, P308, DOI 10.1093/comjnl/6.4.308
   Leroy X., 1991, 117 INRIA
   Munk J., 2008, THESIS AARHUS U DENM
   Paolini L, 1999, RAIRO-INF THEOR APPL, V33, P507, DOI 10.1051/ita:1999130
   Paulson L, 1996, ML for the Working Programmer
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   PLOTKIN G, 1981, FN19 DAIMI AARH U DE
   Plotkin G. D., 1975, Theoretical Computer Science, V1, P125, DOI 10.1016/0304-3975(75)90017-1
   Ronchi Della Rocca S., 2004, TEXT THEORET COMP S
   Sestoft P, 2002, LECT NOTES COMPUT SC, V2566, P420
NR 39
TC 5
Z9 5
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 1
PY 2014
VL 95
BP 176
EP 199
DI 10.1016/j.scico.2014.05.011
PN 2
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AS9RG
UT WOS:000344578700003
OA Bronze
DA 2024-07-18
ER

PT J
AU Milicevic, A
   Jackson, D
AF Milicevic, Aleksandar
   Jackson, Daniel
TI Preventing arithmetic overflows in Alloy
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Arithmetic overflows; Partial functions; Logic; First order; Alloy
ID LOGIC
AB In a bounded analysis, arithmetic operators become partial, and a different semantics becomes necessary. One approach, mimicking programming languages, is for overflow to result in wrap-around. Although easy to implement, wrap-around produces unexpected counterexamples that do not correspond to cases that would arise in the unbounded setting. This paper describes a new approach, implemented in the latest version of the Alloy Analyzer, in which instances that would involve overflow are suppressed, and consequently, spurious counterexamples are eliminated. The key idea is to interpret quantifiers so that bound variables range only over values that do not cause overflow. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Milicevic, Aleksandar; Jackson, Daniel] MIT, Comp Sci & Artificial Intelligence Lab, Cambridge, MA 02139 USA.
C3 Massachusetts Institute of Technology (MIT)
RP Milicevic, A (corresponding author), MIT, Comp Sci & Artificial Intelligence Lab, 32 Vassar St, Cambridge, MA 02139 USA.
EM aleks@csail.mit.edu; dnj@csail.mit.edu
FU National Science Foundation [CCF-1138967]
FX This material is based upon work partially supported by the National
   Science Foundation under Grant No. CCF-1138967. We would like to thank
   Marc Frappier for carefully checking our formal semantics and suggesting
   numerous improvements. We also thank the anonymous reviewers for their
   thoughtful comments on the drafts of this paper.
CR Abrial Jean-Raymond, 2010, International Journal on Software Tools for Technology Transfer, V12, P447, DOI 10.1007/s10009-010-0145-y
   Abrial J.-R., 1996, B BOOK ASSIGNING PRO
   Arthan R., 1996, CADE 13 WORKSH MECH
   Barrett C., 2010, P 8 INT WORKSHOP SAT, V13, P14
   Cormen Thomas H., 2001, INTRO ALGORITHMS
   Dennis G, 2009, THESIS MIT
   Farmer W.M., 1995, ERKENNTNIS, V43, P279
   GIRARD JY, 1987, THEOR COMPUT SCI, V50, P1, DOI 10.1016/0304-3975(87)90045-4
   Gries D., 1993, TEXTS MONOGRAPHS COM
   Jackson Daniel, 2006, Software abstractions: Logic, language, and analysis
   Jones C.B., 2011, INT J SOFTW INFORM, V5, P55
   Jones CB., 1990, SYSTEMATIC SOFTWARE
   Jones CB, 2006, ELECTRON NOTES THEOR, V145, P3, DOI 10.1016/j.entcs.2005.10.002
   Kang E., 2008, P 1 INT C STAT MACH
   Leino K.R.M., 2010, LNCS, V6355
   Marinov D., 2001, ASE 01
   Milicevic A., 2011, ICSE
   PARNAS DL, 1993, IEEE T SOFTWARE ENG, V19, P856, DOI 10.1109/32.241769
   SPIVEY JM, 1988, CAMBRIDGE TRACTS THE
   Stoddart B, 1999, FORM METHOD SYST DES, V15, P201, DOI 10.1023/A:1008797018928
   Torlak E., 2008, THESIS MIT
   Tortak E, 2007, LECT NOTES COMPUT SC, V4424, P632
NR 22
TC 3
Z9 4
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 15
PY 2014
VL 94
SI SI
BP 203
EP 216
DI 10.1016/j.scico.2014.05.009
PN 2
PG 14
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AS1JW
UT WOS:000344038500008
OA Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Ware, S
   Malik, R
AF Ware, Simon
   Malik, Robi
TI An algorithm to test the conflict preorder
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 10th International Workshop on the Foundation of Coordination Languages
   and Software Architectures (FOCLASA)
CT 10th International Workshop on the Foundation of Coordination Languages
   and Software Architectures (FOCLASA)
CY SEP 10-10, 2011
CY SEP 10-10, 2011
CL Aachen, GERMANY
CL Aachen, GERMANY
DE Finite automata; Process algebra; Model checking; Nonblocking
AB This paper proposes a way to effectively compare the potential of processes to cause conflict. In discrete event systems theory, two concurrent systems are said to be in conflict if they can get trapped in a situation where they are both waiting or running endlessly, forever unable to complete their common task. The conflict preorder is a process-algebraic pre-congruence that compares two processes based on their possible conflicts in combination with other processes. This paper improves on previous theoretical descriptions of the conflict preorder by introducing less conflicting pairs as a concrete state-based characterisation. Based on this characterisation, an effective algorithm is presented to determine whether two processes are related according to the conflict preorder. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Ware, Simon; Malik, Robi] Univ Waikato, Dept Comp Sci, Hamilton, New Zealand.
C3 University of Waikato
RP Ware, S (corresponding author), Univ Waikato, Dept Comp Sci, Hamilton, New Zealand.
EM siw4@waikato.ac.nz; robi@waikato.ac.nz
CR Akesson K, 2006, WODES 2006: EIGHTH INTERNATIONAL WORKSHOP ON DISCRETE EVENT SYSTEMS, PROCEEDINGS, P384
   [Anonymous], 2001, INTRO AUTOMATA THEOR
   [Anonymous], 2001, HDB PROCESS ALGEBRA, DOI DOI 10.1016/B978-044482830-9/50019-9
   Bolognesi T., 1987, Protocol Specification, Testing, and Verification, VII. Proceedings of the IFIP WG 6.1 Seventh International Conference, P165
   BRYANT RE, 1986, IEEE T COMPUT, V35, P677, DOI 10.1109/TC.1986.1676819
   Cassandras C. G., 2009, Introduction to Discrete Event Systems
   DENICOLA R, 1984, THEOR COMPUT SCI, V34, P83, DOI 10.1016/0304-3975(84)90113-0
   Dijkstra E. W., 1971, Acta Informatica, V1, P115, DOI 10.1007/BF00289519
   Flordal H, 2009, SIAM J CONTROL OPTIM, V48, P1914, DOI 10.1137/070695526
   Hoare CAR., 1985, Communicating Sequential Processes
   Htittel H., 1996, RS9639 U AARH DEP CO
   Leduc R., 2012, P 11 INT WORKSH DISC, V45, P163
   Leduc R.J., 2002, THESIS U TOR DEP EL
   Malik R, 2010, 052010 U WAIK DEP CO
   Malik R, 2004, P 7 INT WORKSH DISCR, P277, DOI 10.1016/S1474-6670(17)30757-7
   Malik R, 2006, INT J FOUND COMPUT S, V17, P797, DOI 10.1142/S012905410600411X
   MILNER R., 1989, SERIES COMPUTER SCI
   Mooij AJ, 2010, J LOGIC ALGEBR PROGR, V79, P233, DOI 10.1016/j.jlap.2009.12.001
   Natarajan V, 1995, LECT NOTES COMPUT SC, V944, P648
   RAMADGE PJG, 1989, P IEEE, V77, P81, DOI 10.1109/5.21072
   Rensink A, 2007, INFORM COMPUT, V205, P125, DOI 10.1016/j.ic.2006.06.002
   Su R, 2010, AUTOMATICA, V46, P968, DOI 10.1016/j.automatica.2010.02.025
   Ware S., 2011, P 10 INT WORKSH FDN, P34, DOI DOI 10.4204/EPTCS.58.3
   Zhang ZH, 2002, SYNTHESIS AND CONTROL OF DISCRETE EVENT SYSTEMS, P77
NR 24
TC 2
Z9 2
U1 0
U2 1
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 1
PY 2014
VL 89
SI SI
BP 23
EP 40
DI 10.1016/j.scico.2013.09.006
PN A
PG 18
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA AJ8BX
UT WOS:000337928800003
DA 2024-07-18
ER

PT J
AU Jaksic, S
   Padovani, L
AF Jaksic, Svetlana
   Padovani, Luca
TI Exception handling for copyless messaging
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Copy less message passing; Session types; Exception handling; Memory
   leak prevention
AB Copyless messaging is a communication paradigm in which only pointers to messages are exchanged between sender and receiver processes. Because of its intrinsically low overhead, copyless messaging is suitable for the efficient implementation of communication-intensive software systems where processes have access to a shared address space. Unfortunately, the very nature of the paradigm fosters the proliferation of programming errors due to the explicit use of pointers and to the sharing of data. In this paper we study a type discipline for copyless messaging that, together with some minimal support from the runtime system, is able to guarantee the absence of communication errors, memory faults, and memory leaks in the presence of exceptions. To formalize the semantics of processes we draw inspiration from software transactional memories: in our case a transaction is a process that is meant to accomplish some exchange of messages and that should either be executed completely, or should have no observable effect if aborted by an exception. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Jaksic, Svetlana] Univ Novom Sadu, Fak Tehn Nauka, Novi Sad 21000, Serbia.
   [Padovani, Luca] Univ Turin, Dipartimento Informat, I-10149 Turin, Italy.
C3 University of Turin
RP Padovani, L (corresponding author), Univ Turin, Dipartimento Informat, Corso Svizzera 185, I-10149 Turin, Italy.
EM sjaksic@uns.ac.rs; padovani@di.unito.it
OI Padovani, Luca/0000-0001-9097-1297
FU Cost Action IC0901, the Serbian Ministry of Education and Science
   [ON174026, III44006]
FX This work has been partially supported by Cost Action IC0901, the
   Serbian Ministry of Education and Science (projects ON174026 and
   11144006). We wish to thank the anonymous reviewers who have provided
   several suggestions for improving the paper. We are grateful to Sara
   Capecchi and Elena Giachino who were keen on discussing some aspects of
   the semantics of distributed exception handling, and to Mariangiola
   Dezani for reading and commenting on an early draft of the paper.
CR Albert E, 2007, ISMM'07: PROCEEDINGS OF THE 2007 INTERNATIONAL SYMPOSIUM ON MEMORY MANAGEMENT, P105
   [Anonymous], 1999, Communicating and Mobile Systems: The Calculus
   Bono V, 2012, LOG METH COMPUT SCI, V8, DOI 10.2168/LMCS-8(1:17)2012
   Capecchi S, 2010, LEIBNIZ INT PR INFOR, V8, P338, DOI 10.4230/LIPIcs.FSTTCS.2010.338
   Carbone M, 2008, LECT NOTES COMPUT SC, V5201, P402, DOI 10.1007/978-3-540-85361-9_32
   Donnelly K, 2006, ACM SIGPLAN NOTICES, V41, P124, DOI 10.1145/1160074.1159821
   Fahndrich M., 2006, Operating Systems Review, V40, P177, DOI 10.1145/1218063.1217953
   Ferreira C, 2011, LECT NOTES COMPUT SC, V6582, P302, DOI 10.1007/978-3-642-20401-2_14
   Finley S., 2008, TECHNICAL REPORT
   Gay S, 2005, ACTA INFORM, V42, P191, DOI 10.1007/s00236-005-0177-z
   Hammond K, 2000, LNCS, V2011, P122
   Harris Tim., 2005, PPoPP '05: Proceedings of the tenth ACM SIGPLAN symposium on Principles and practice of parallel programming, P48, DOI DOI 10.1145/1065944.1065952
   Hofmann M, 2006, LECT NOTES COMPUT SC, V3924, P22
   Hofmann M, 2003, ACM SIGPLAN NOTICES, V38, P185, DOI 10.1145/640128.604148
   Honda K, 1998, LECT NOTES COMPUT SC, V1381, P122, DOI 10.1007/BFb0053567
   Honda K., 1993, CONCUR '93. 4th International Conference on Concurrency Theory Proceedings, P509
   Hunt Galen C., 2007, Operating Systems Review, V41, P37, DOI 10.1145/1243418.1243424
   Hunt G. C., 2005, MSRTR2005135
   Iwama Futoshi, 2006, P 2006 ACM SIGPLAN W, P38, DOI DOI 10.1145/1111542.1111550
   Jaksic S., 2012, P 14 INT ACM SIGPLAN, V84, P151
   JONES SLP, 1987, LECT NOTES COMPUT SC, V274, P98
   Loidl HW, 2002, CCGRID 2002: 2ND IEEE/ACM INTERNATIONAL SYMPOSIUM ON CLUSTER COMPUTING AND THE GRID, PROCEEDINGS, P311, DOI 10.1109/CCGRID.2002.1017152
   Stengel Z, 2009, ISSTA 2009: INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, P13
   Suenaga K, 2012, ACM SIGPLAN NOTICES, V47, P1, DOI 10.1145/2398857.2384618
   Tofte M, 1997, INFORM COMPUT, V132, P109, DOI 10.1006/inco.1996.2613
   Trinder PW, 1996, ACM SIGPLAN NOTICES, V31, P79, DOI 10.1145/249069.231392
   Villard J, 2010, LECT NOTES COMPUT SC, V6015, P275, DOI 10.1007/978-3-642-12002-2_23
   Villard J, 2009, LECT NOTES COMPUT SC, V5904, P194, DOI 10.1007/978-3-642-10672-9_15
   Weimer W, 2004, ACM SIGPLAN NOTICES, V39, P419, DOI 10.1145/1035292.1029011
   Weimer W, 2008, ACM T PROGR LANG SYS, V30, DOI 10.1145/1330017.1330019
   Weimer W, 2006, LECT NOTES COMPUT SC, V4119, P22
NR 31
TC 3
Z9 3
U1 0
U2 2
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAY 1
PY 2014
VL 84
SI SI
BP 22
EP 51
DI 10.1016/j.scico.2013.05.001
PG 30
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AE6EZ
UT WOS:000334084700003
OA hybrid, Green Published
DA 2024-07-18
ER

PT J
AU Mazur, T
   Lowe, G
AF Mazur, Tomasz
   Lowe, Gavin
TI CSP-based counter abstraction for systems with node identifiers
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Model checking; PMCP; Type reduction; CSP; Counter abstraction
ID MODEL CHECKING; VERIFICATION
AB The Parameterised Model Checking Problem asks whether an implementation Impl(t) satisfies a specification Spec(t) for all instantiations of parameter t. In general, t can determine numerous entities: the number of processes used in a network, the type of data, the capacities of buffers, etc. The main theme of this paper is automation of uniform verification of a subclass of PMCP with the parameter of the first kind, i.e. where it determines the number of processes used in a network. We use CSP as our formalism.
   Counter abstraction is a technique that replaces a concrete state space by an abstract one, where each abstract state is a tuple of integer counters (c(1), ..., c(k)) such that for each i, c(i) counts how many node processes are currently in the i-th state. Each counter c(i) is given a finite threshold z(i) and we interpret c(i) = z(i) as there being z(l) or more processes in the i-th state.
   Standard counter abstraction techniques require all processes to be identical, which means that nodes cannot use node identifiers. In this paper we present how counter abstraction techniques can be extended to processes that make use of node identifiers in a symmetrical way. Our method creates a process Abstr that is independent of t and is refined by phi(Impl(T)) for all sufficiently large T, where phi maps all (sufficiently large) instantiations T of the parameter to some fixed type. By transitivity of refinement, testing if Abstr refines Spec(phi(t)) implies that Spec(phi(t)) is refined by phi(Impl(T)). Then, using the type reduction theory from Mazur and Lowe (2012) [29], we can deduce that Spec(T) is refined by Impl(T) for all sufficiently large T, thus obtaining a positive answer to the original verification problem. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Mazur, Tomasz; Lowe, Gavin] Univ Oxford, Dept Comp Sci, Oxford OX1 3QD, England.
C3 University of Oxford
RP Lowe, G (corresponding author), Univ Oxford, Dept Comp Sci, Wolfson Bldg,Parks Rd, Oxford OX1 3QD, England.
EM tomasz.mazur@gmail.com; gavin.lowe@cs.ox.ac.uk
FU EPSRC; ONR; EPSRC [EP/E035590/1] Funding Source: UKRI
FX We would like to thank Bill Roscoe, Marta Kwiatkowska, Ranko Lazic, John
   Lugton and the anonymous referees for very useful comments. We would
   also like to thank Tom Gibson-Robinson for allowing us to build on his
   parser and type checker. This work was partially funded by EPSRC and
   ONR.
CR Abdulla PA, 2009, FORM METHOD SYST DES, V34, P126, DOI 10.1007/s10703-008-0062-9
   [Anonymous], 1995, Temporal verification of reactive systems-safety
   [Anonymous], 1997, The Theory and Practice of Concurrency
   [Anonymous], THESIS STANFORD U
   APT KR, 1986, INFORM PROCESS LETT, V22, P307, DOI 10.1016/0020-0190(86)90071-2
   Basler G., 2010, FORMAL METHODS SYSTE
   Bolton C, 2005, THEOR COMPUT SCI, V330, P407, DOI 10.1016/j.tcs.2004.10.004
   Broadfoot P.J., 2001, THESIS U OXFORD
   Clarke E.M., 1987, P 6 ANN ACM S PRINCI, P294, DOI DOI 10.1145/41840.41865
   Clarke E.M., 2006, INT C VER MOD CHECK
   Clarke. E. M., 1982, LOGICS OF PROGRAMS, P52, DOI [10 . 1007 / BFb0025774, DOI 10.1007/BFB0025774]
   CLARKE EM, 1994, ACM T PROGR LANG SYS, V16, P1512, DOI 10.1145/186025.186051
   CLARKE EM, 1986, ACM T PROGR LANG SYS, V8, P244, DOI 10.1145/5397.5399
   Clarke EM, 1999, MODEL CHECKING, P1
   Formal Systems (Europe) Ltd, 1999, FAIL DIV REF FDR 2 U
   Gibson-Robinson T., 2010, THESIS U OXFORD
   Graf S, 1997, LECT NOTES COMPUT SC, V1254, P72
   HOARE CAR, 1974, COMMUN ACM, V17, P549, DOI 10.1145/355620.361161
   Hoare CAR., 1985, Communicating Sequential Processes
   Kesten Y, 2000, INFORM COMPUT, V163, P203, DOI 10.1006/inco.2000.3000
   Lahiri SK, 2004, LECT NOTES COMPUT SC, V2937, P267
   Lazic R.S., 1999, THESIS U OXFORD
   Lowe G., 1996, Tools and Algorithms for the Construction and Analysis of Systems. Second International Workshop, TACAS '96. Proceedings, P147
   LOWE G, 1995, INFORM PROCESS LETT, V56, P131, DOI 10.1016/0020-0190(95)00144-2
   Lowe G., 2004, AVIS 04
   Lubachevsky B., 1984, ACTA INFORM
   Lugton J., 2012, THESIS U OXFORD
   Mazur T., 2010, THESIS U OXFORD
   Mazur T, 2009, ELECTRON NOTES THEOR, V250, P171, DOI 10.1016/j.entcs.2009.08.012
   Mazur T, 2012, LOG METH COMPUT SCI, V8, DOI 10.2168/LMCS-8(1:04)2012
   McMillan KL, 1999, LECT NOTES COMPUT SC, V1703, P219
   Pnueli A., 2002, Computer Aided Verification. 14th International Conference, CAV 2002. Proceedings (Lecture Notes in Computer Science Vol.2404), P107
   PONG F, 1995, IEEE T PARALL DISTR, V6, P773, DOI 10.1109/71.406955
   Roscoe AW, 2010, TEXTS COMPUT SCI, P3, DOI 10.1007/978-1-84882-258-0_1
   Roscoe A. W., 1999, Journal of Computer Security, V7, P147
   Roscoe AW, 1998, 11TH IEEE COMPUTER SECURITY FOUNDATIONS WORKSHOP - PROCEEDINGS, P84, DOI 10.1109/CSFW.1998.683158
   Roscoe AW., 1995, Tools and Algorithms for the Construction and Analysis of Systems, P133, DOI [10.1007/3-540-60630-0_7, DOI 10.1007/3-540-60630-0]
   Sagiv S., 2001, ACM T PROGRAMMING LA, V22
   Sipser M., 1996, Introduction to the Theory of Computation, V1
   Stallings W., 1998, Operating systems
   Sufrin B., 2008, P COMM PROC ARCH
   Sun J, 2009, LECT NOTES COMPUT SC, V5850, P123, DOI 10.1007/978-3-642-05089-3_9
   Tanenbaum AndrewS., 1987, OPERATING SYSTEMS DE
   Thompson R., 2010, THESIS U OXFORD
   Wachter B, 2007, LECT NOTES COMPUT SC, V4349, P182
   Xu J., 2005, THESIS NEW YORK U
NR 46
TC 7
Z9 7
U1 0
U2 3
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 15
PY 2014
VL 81
SI SI
BP 3
EP 52
DI 10.1016/j.scico.2013.03.018
PG 50
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AB0JS
UT WOS:000331478600002
OA hybrid
DA 2024-07-18
ER

PT J
AU Nicholson, J
   Eden, AH
   Gasparis, E
   Kazman, R
AF Nicholson, Jon
   Eden, Amnon H.
   Gasparis, Epameinondas
   Kazman, Rick
TI Automated verification of design patterns: A case study
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Object-oriented design; Modeling and specification; Automated
   verification; Visual languages; Design description languages
ID SPECIFICATION
AB Representing design decisions for complex software systems, tracing them to code, and enforcing them throughout the lifecycle are pressing concerns for software architects and developers. To be of practical use, specification and modeling languages for software design need to combine rigor with abstraction and simplicity, and be supported by automated design verification tools that require minimal human intervention. This paper examines closely the use of the visual language of Codecharts for representing design decisions and demonstrate the process of verifying the conformance of a program to the chart. We explicate the abstract semantics of segments of the Java package java.awt as a finite structures, specify the Composite design pattern as a Codechart and unpack it as a set of formulas, and prove that the structure representing the program satisfies the formulas. We also describe a set of tools for modeling design patterns with Codecharts and for verifying the conformance of native (plain) Java programs to the charts. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Nicholson, Jon] Univ Brighton, Sch Comp Engn & Math, Brighton BN2 4AT, E Sussex, England.
   [Eden, Amnon H.; Gasparis, Epameinondas] Univ Essex, Sch Comp Sci & Elect Engn, Colchester CO4 3SQ, Essex, England.
   [Kazman, Rick] Carnegie Mellon Univ, Inst Software Engn, Pittsburgh, PA 15213 USA.
   [Kazman, Rick] Univ Hawaii, Honolulu, HI 96822 USA.
C3 University of Brighton; University of Essex; Carnegie Mellon University;
   Software Engineering Institute; University of Hawaii System
RP Eden, AH (corresponding author), Univ Essex, Sch Comp Sci & Elect Engn, Colchester CO4 3SQ, Essex, England.
EM a@eden-study.org
OI Nicholson, Jon/0000-0002-2115-4514
FU UK's Engineering and Physical Sciences Research Council (EPSRC);
   University of Essex's Research Promotion Fund
FX This work was partially funded by the UK's Engineering and Physical
   Sciences Research Council (EPSRC) and the University of Essex's Research
   Promotion Fund. The authors wish to thank Raymond Turner for his
   numerous contributions to this project. We also wish to thank Olumide
   Iyaniwura, Gu Bo, Maple Tao Liang, Dimitrious Fragkos, Omololu Ayodeji,
   Xu Yi, and Christina Maniati for their contributions to this research.
CR [Anonymous], ACM SIGSOFT SOFTWARE
   [Anonymous], 2007, P 3 INT WORKSHOP PRE, DOI DOI 10.1109/PROMISE.2007.6
   Blewitt A., 2006, HEDGEHOG AUTOMATIC V
   Blewitt A., 2007, DESIGN PATTERNS FORM
   BROOKS FP, 1987, COMPUTER, V20, P10, DOI 10.1109/MC.1987.1663532
   Craig I., 1999, INTERPRETATION OBJEC
   Eden A.H., 2013, FORMAL METHODS SYSTE
   Eden A.H., 2011, CODECHARTS ROADMAPS
   Eden A.H., 2007, CSM474 U ESS SCH COM
   Fabry J, 2004, COMPUT LANG SYST STR, V30, P21, DOI 10.1016/j.cl.2003.09.002
   Fowler M., 2003, UML DISTILLED BRIEF
   France RB, 2004, IEEE T SOFTWARE ENG, V30, P193, DOI 10.1109/TSE.2004.1271174
   Gamma Erich., 1994, DESIGN PATTERNS
   GIBBS WW, 1994, SCI AM, V271, P72
   Gosling J., 2005, Java Language Specification, Vthird
   Guéhéneuc YG, 2008, IEEE T SOFTWARE ENG, V34, P667, DOI 10.1109/TSE.2008.48
   Huth MichaelR. A., 2000, LOGIC COMPUTER SCI M
   Lehman MeirM., 1997, Lecture Notes in Computer Science, V1149, P108
   Lu LJ, 2010, J UNIVERS COMPUT SCI, V16, P2455
   Maplesden D., 2007, DESIGN PATTERNS FORM
   Nicholson J., 2007, CSM471 U ESS SCH COM
   OMG: Business process model and notation (BPMN) version 2. 0, 2011, TECHNICAL REPORT
   SEEMANN J., 1998, Proceedings of 5th international symposium on Foundations of Software Engineering, P10, DOI DOI 10.1145/288195.288207
   Stelting S., 2002, Applied Java Patterns
   *SUN MICR, 2004, JAV 2 PLATF STAND ED
   Taibi T., 2007, Design patterns formalization techniques
   Turner R, 2005, J LOGIC COMPUT, V15, P623, DOI 10.1093/logcom/exi052
   WING JM, 1990, COMPUTER, V23, P8, DOI 10.1109/2.58215
   Zhu H, 2009, P INT COMP SOFTW APP, P228, DOI 10.1109/COMPSAC.2009.37
   [No title captured]
   [No title captured]
NR 31
TC 16
Z9 16
U1 0
U2 10
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 1
PY 2014
VL 80
BP 211
EP 222
DI 10.1016/j.scico.2013.05.007
PN B
PG 12
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 292FH
UT WOS:000329887100001
OA Green Submitted, hybrid
DA 2024-07-18
ER

PT J
AU Iliasov, A
   Troubitsyna, E
   Laibinis, L
   Romanovsky, A
   Varpaaniemi, K
   Ilic, D
   Latvala, T
AF Iliasov, Alexei
   Troubitsyna, Elena
   Laibinis, Linas
   Romanovsky, Alexander
   Varpaaniemi, Kimmo
   Ilic, Dubravka
   Latvala, Timo
TI Developing mode-rich satellite software by refinement in Event-B
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Mode consistency; Event-B; Refinement; Components; Formal verification;
   On-board software
AB One of the guarantees that the designers of on-board satellite systems need to provide, so as to ensure their dependability, is that the mode transition scheme is implemented correctly, i.e. that the states of system components are consistent with the global system mode. There is still, however, a lack of scalable approaches to developing and verifying systems with complex mode transitions. This paper presents an approach to the formal development of mode-rich systems by refinement in Event-B. We formalise the concepts of modes and mode transitions as well as deriving specification and refinement patterns which support correct-by-construction system development. The proposed approach is validated by a formal development of the Attitude and Orbit Control System (AOCS) undertaken within the ICT DEPLOY project. The experience gained in the course of developing such a complex industrial system as AOCS, shows that Event-B refinement provides the engineers with a scalable formal technique. Moreover, the case study has demonstrated that Event-B can facilitate formal development of mode-rich systems and, in particular, proof-based verification of their mode consistency. (C) 2012 Elsevier B.V. All rights reserved.
C1 [Iliasov, Alexei; Romanovsky, Alexander] Newcastle Univ, Newcastle Upon Tyne NE1 7RU, Tyne & Wear, England.
   [Troubitsyna, Elena; Laibinis, Linas] Abo Akad Univ, Turku, Finland.
C3 Newcastle University - UK; Abo Akademi University
RP Laibinis, L (corresponding author), Abo Akad Univ, Turku, Finland.
EM alexei.iliasov@ncl.ac.uk; elena.troubitsyna@abo.fi;
   linas.laibinis@abo.fi; alexander.romanovsky@ncl.ac.uk;
   Kimmo.Varpaaniemi@ssf.fi; Dubravka.Ilic@ssf.fi; Timo.Latvala@ssf.fi
RI Laibinis, Linas/H-1695-2016; Troubitsyna, Elena/AAY-2172-2021
OI Laibinis, Linas/0000-0002-1200-0847; Romanovsky,
   Alexander/0000-0002-4076-3331
FU FP7 ICT DEPLOY Project; EPSRC/UK TrAmS-2 platform grant; EPSRC
   [EP/J008133/1] Funding Source: UKRI
FX This work is supported by the FP7 ICT DEPLOY Project and the EPSRC/UK
   TrAmS-2 platform grant.
CR Abrial J.R., 2010, MODELLING EVENT B
   Abrial J-R., 1996, The B Book
   [Anonymous], 2010, DEPLOY DELIVERABLE D
   [Anonymous], TECHNICAL REPORT
   Back R., 1996, FORM ASP COMPUT, V8, P1, DOI [10.1007/BF01214918, DOI 10.1007/BF01214918]
   Brown T., 2001, P 20 DIG AV SYST C, V2
   Buth B, 2004, LECT NOTES COMPUT SC, V3219, P101
   Dotti F., 2009, LECT NOTES COMPUTER, V5885
   European Cooperation for Space Standardization, 2009, SOFTW GEN REQ ECSS E
   Heimdahl MPE, 1996, IEEE T SOFTWARE ENG, V22, P363, DOI 10.1109/32.508311
   Hirsch D, 2006, LECT NOTES COMPUT SC, V4344, P113
   Iliasov A., 2010, LECT NOTES COMPUTER
   ILIASOV A, 2010, EVENT B MODEL ATTITU
   Iliasov A, 2010, LECT NOTES COMPUT SC, V5977, P174, DOI 10.1007/978-3-642-11811-1_14
   JAHANIAN F, 1994, IEEE T SOFTWARE ENG, V20, P933, DOI 10.1109/32.368134
   Kofron J, 2009, INFORM SOFTWARE TECH, V51, P31, DOI 10.1016/j.infsof.2008.09.011
   Laibinis L, 2004, PROCEEDINGS OF THE SECOND INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING AND FORMAL METHODS, P346, DOI 10.1109/SEFM.2004.1347539
   Leveson Nancy, 1997, P WORKSH HUM ERR SYS, P132
   LOPATKIN I, 2010, P 2 INT WORKSH SOFTW
   Maraninchi F., 1998, EUR S PROGR
   *RODIN, DEL D7 EV B LANG
   RUBEL B, 1995, PATTERN LANGUAGES OF PROGRAM DESIGN, P119
   RUGINA AE, 2009, P 12 EUR WORKSH DEP
   Rushby J, 2002, RELIAB ENG SYST SAFE, V75, P167, DOI 10.1016/S0951-8320(01)00092-8
   Varpaaniemi K., EVENT B PROJECT DEPS
NR 25
TC 13
Z9 13
U1 0
U2 9
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUL 1
PY 2013
VL 78
IS 7
BP 884
EP 905
DI 10.1016/j.scico.2012.04.010
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 164PJ
UT WOS:000320421700008
OA Bronze
DA 2024-07-18
ER

PT J
AU Viroli, M
   Beal, J
   Usbeck, K
AF Viroli, Mirko
   Beal, Jacob
   Usbeck, Kyle
TI Operational semantics of proto
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Spatial computing; Distributed algorithms; Amorphous medium; Operational
   semantics; Proto
ID CALCULUS
AB The Proto spatial computing language in Beal and Bachrach (2006) [1] simplifies the creation of scalable, robust, distributed programs by abstracting a network of locally communicating devices as a continuous geometric manifold. However, Proto's successful application in a number of domains is challenging its coherence across different platforms and distributions. We thus present a complete operational semantics for the Proto language, as executed asynchronously on a network of fast message-passing devices. This semantics covers all of the operations of the three space-time operator families unique to Proto restriction, feedback, and neighborhood as well as the current pointwise operations that it shares with most other languages. This formalization will provide a reference to aid implementers in preserving language coherence across platforms, domains, and distributions. The formalization process has also advanced the Proto language in several ways, which we explain in detail. (C) 2012 Elsevier B.V. All rights reserved.
C1 [Viroli, Mirko] Alma Mater Studiorum Univ Bologna, I-47521 Cesena, FC, Italy.
   [Beal, Jacob; Usbeck, Kyle] BBN Technol, Cambridge, MA 02138 USA.
C3 University of Bologna; Raytheon Technologies; Raytheon BBN Technologies
RP Viroli, M (corresponding author), Alma Mater Studiorum Univ Bologna, Via Venezia 52, I-47521 Cesena, FC, Italy.
EM mirko.viroli@unibo.it; jakebeal@bbn.com; kusbeck@bbn.com
OI Beal, Jacob/0000-0002-1663-5102; Viroli, Mirko/0000-0003-2702-5702
FU EU FP7 project "SAPERE - Self-aware Pervasive Service Ecosystems"
   [256873]; DARPA DSO [W91CRB-11-C-0052]
FX Partial support for this work was provided by the EU FP7 project "SAPERE
   - Self-aware Pervasive Service Ecosystems" under contract No. 256873 and
   by DARPA DSO under contract W91CRB-11-C-0052; the views and conclusions
   contained in this document are those of the authors and not those of the
   sponsors or the US or EU government.
CR [Anonymous], 2004, WORKSHOP DATA MANAGE, DOI DOI 10.1145/1052199.1052213
   [Anonymous], 27 ANN ACM S APPL CO
   [Anonymous], P 2011 ACM S APPL CO
   Ashley-Rollman Michael P., 2007, 2007 IEEE/RSJ International Conference on Intelligent Robots and Systems, P2794, DOI 10.1109/IROS.2007.4399480
   Bachrach J., 2007, MITCSAILTR2007017
   Bachrach J., 2006, DISTR COMP SENS SYST, P1
   Bachrach J, 2010, NEURAL COMPUT APPL, V19, P825, DOI 10.1007/s00521-010-0382-8
   Beal J, 2006, IEEE INTELL SYST, V21, P10, DOI 10.1109/MIS.2006.29
   Beal J, 2005, LECT NOTES COMPUT SC, V3566, P121
   Beal J., 2010, 2010 Fourth IEEE International Conference on Self-Adaptive and Self-Organizing Systems Workshop (SASOW), P206, DOI 10.1109/SASOW.2010.74
   Beal J., 2005, LARG SCAL MULT SYST, P1
   Beal J., 2012, COMPUTER J
   Beal J., 2010, 45th Asilomar Conference on Signals, Systems, and Computers, P1
   Beal J, 2013, FORMAL AND PRACTICAL ASPECTS OF DOMAIN-SPECIFIC LANGUAGES: RECENT DEVELOPMENTS, P436, DOI 10.4018/978-1-4666-2092-6.ch016
   Beal J, 2011, PLOS ONE, V6, DOI 10.1371/journal.pone.0022490
   Beal J, 2008, SASOW 2008: SECOND IEEE INTERNATIONAL CONFERENCE ON SELF-ADAPTIVE AND SELF-ORGANIZING SYSTEMS WORKSHOPS, PROCEEDINGS, P284, DOI 10.1109/SASOW.2008.14
   Beal J, 2008, APPLIED COMPUTING 2008, VOLS 1-3, P1969
   De Rosa M, 2008, IEEE INT CONF ROBOT, P3156, DOI 10.1109/ROBOT.2008.4543691
   Giavitto Jean-Louis, 2002, 722002 U EVR
   Gummadi R, 2005, LECT NOTES COMPUT SC, V3560, P126
   Henriques PR, 2005, IEE P-SOFTW, V152, P54, DOI 10.1049/ip-sen:20041317
   Igarashi A, 2001, ACM T PROGR LANG SYS, V23, P396, DOI 10.1145/503502.503505
   Mamei M, 2009, ACM T SOFTW ENG METH, V18, DOI 10.1145/1538942.1538945
   Mernik M, 2005, ACM COMPUT SURV, V37, P316, DOI 10.1145/1118890.1118892
   MILNER R, 1992, INFORM COMPUT, V100, P1, DOI [10.1016/0890-5401(92)90008-4, 10.1016/0890-5401(92)90009-5]
   Montagna S., 2012, MOBILE NETW APPL, P1
   Ricci A, 2011, SCI COMPUT PROGRAM, V76, P37, DOI 10.1016/j.scico.2010.06.012
   TURNER DN, 1995, THESIS U EDINBURGH
   Viroli Mirko, 2012, Coordination Models and Languages. Proceedings 14th International Conference, COORDINATION 2012, P212, DOI 10.1007/978-3-642-30829-1_15
   Viroli M, 2011, ACM T AUTON ADAP SYS, V6, DOI 10.1145/1968513.1968517
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
NR 31
TC 6
Z9 7
U1 0
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 1
PY 2013
VL 78
IS 6
BP 633
EP 656
DI 10.1016/j.scico.2012.12.003
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 133JJ
UT WOS:000318134400003
OA Bronze
DA 2024-07-18
ER

PT J
AU Lumpe, M
AF Lumpe, Markus
TI Partition refinement of Component Interaction Automata
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Automata-based specification; Partition refinement; Emergent properties
ID PROTOCOLS; MODEL
AB Component Interaction Automata provide a fitting model to capture and analyze the temporal facets of hierarchically-structured component-oriented software systems. However, the rules governing composition typically suffer from combinatorial state explosion, an effect that can impede modeling languages, like Component Interaction Automata, from being successful in real-world scenarios. We must, therefore, find some appropriate ways to counteract state explosion, one of which is partition refinement through bisimulation, in particular, weak bisimulation. While this technique can yield the desired state space reduction, it does not consider synchronization cliques, that is, groups of states that are interconnected solely by internal synchronization transitions. Synchronization cliques give rise to action prefixes, local states that encapsulate preconditions for a component's ability to interact with the environment. Furthermore, both the existence and the size of synchronization cliques can be used as an indicator for the success of partition refinement. In particular, the more frequent synchronization cliques are and the more states they entail, the more likely it is that partition refinement can reduce the state space. But, there may be other factors that impact the refinement process. For this reason, we study, in this paper, how partition refinement behaves under weak bisimulation, how synchronization cliques emerge when using weak bisimulation, how we make state space reduction through partition refinement aware of the existence of synchronization cliques, and what other attributes of Component Interaction Automata specifications can provides us with additional cues to forecast the possible outcome of the partition refinement process. (C) 2011 Elsevier B.V. All rights reserved.
C1 Swinburne Univ Technol, Fac Informat & Commun Technol, Hawthorn, Vic 3122, Australia.
C3 Swinburne University of Technology
RP Lumpe, M (corresponding author), Swinburne Univ Technol, Fac Informat & Commun Technol, POB 218, Hawthorn, Vic 3122, Australia.
EM mlumpe@swin.edu.au
CR ADLER RL, 1965, T AM MATH SOC, V114, P309, DOI 10.2307/1994177
   Agresti A, 2002, CATEGORICAL DATA ANA
   [Anonymous], 1981, Lecture Notes in Computer Science, DOI [10.1007/BFb0017309, DOI 10.1007/BFB0017309]
   [Anonymous], 2010, THESIS SWINBURNE U T
   Arbab F, 2004, MATH STRUCT COMP SCI, V14, P329, DOI 10.1017/S0960129504004153
   Beugnard A, 1999, COMPUTER, V32, P38, DOI 10.1109/2.774917
   Brim L., 2006, SIGSOFT SOFTWARE ENG, V31, P1
   Broy M, 2006, LECT NOTES COMPUT SC, V3938, P26
   Cardelli L., 1997, COMPUTER SCI ENG HDB, V2nd, P2208
   Cerná I, 2007, ELECTRON NOTES THEOR, V182, P39, DOI 10.1016/j.entcs.2006.09.030
   Chakrabarti A., 2002, Computer Aided Verification. 14th International Conference, CAV 2002. Proceedings (Lecture Notes in Computer Science Vol.2404), P428
   Concas G, 2006, EUROPHYS LETT, V76, P1221, DOI 10.1209/epl/i2006-10384-1
   de Alfaro L, 2005, LECT NOTES COMPUT SC, V3717, P81
   De Alfaro L, 2002, LECT NOTES COMPUT SC, V2491, P108
   de Alfaro L., 2001, Software Engineering Notes, V26, P109, DOI 10.1145/503271.503226
   de Alfaro Luca, 2004, ELECTRON NOTES THEOR, V97, P3
   Fortunato S, 2010, PHYS REP, V486, P75, DOI 10.1016/j.physrep.2009.11.002
   Gansner E.R., 2009, DRAWING GRAPHS DOT
   Gini C., 1921, ECON J, V31, P124, DOI [DOI 10.2307/2223319, 10.2307/2223319]
   Habib M., 1999, International Journal of Foundations of Computer Science, V10, P147, DOI 10.1142/S0129054199000125
   Hermanns H., 2002, Lect. Notes in Comput. Sci, V2428
   Hopcroft J. E., 2007, AUTOMATA THEORY LANG
   Inverardi P, 2000, ACM T SOFTW ENG METH, V9, P239, DOI 10.1145/352591.352593
   Jacobs B., EATCS B, V62, P222
   Jean guySchneider., 1999, SOFTWARE ARCHITECTUR, P13
   Lee Edward A., 2001, EMSOFT, P237
   Limpert E, 2001, BIOSCIENCE, V51, P341, DOI 10.1641/0006-3568(2001)051[0341:LNDATS]2.0.CO;2
   LP S., 2009, STAT US GUID REL
   Lumpe Markus, 2010, Proceedings of the 21st Australian Software Engineering Conference (ASWEC 2010), P235, DOI 10.1109/ASWEC.2010.35
   LUMPE M, 1999, THESIS U BERN
   Lumpe M, 2010, ELECTRON NOTES THEOR, V263, P179, DOI 10.1016/j.entcs.2010.05.011
   Lumpe M, 2010, ELECTRON P THEOR COM, P12, DOI 10.4204/EPTCS.37.2
   Lumpe M, 2008, LECT NOTES COMPUT SC, V5282, P130, DOI 10.1007/978-3-540-87891-9_9
   Lunch N.A., P 6 ANN ACM S PRINC, P137
   Mateescu R, 2008, LECT NOTES COMPUT SC, V5364, P84, DOI 10.1007/978-3-540-89652-4_10
   McCabe T. J., 1976, IEEE Transactions on Software Engineering, VSE-2, P308, DOI 10.1109/TSE.1976.233837
   McIlroy M.D., 1969, SOFTWARE ENG REPORT, V1, P138
   Milner R., 1989, Communication and concurrency
   Nash J. F, 1950, THESIS PRINCETON U
   Newman MEJ, 2003, SIAM REV, V45, P167, DOI 10.1137/S003614450342480
   Nierstrasz O., 1995, Object-Oriented Software Composition, P3
   NYMAN U, 2008, THESIS AALBORG U
   PAIGE R, 1987, SIAM J COMPUT, V16, P973, DOI 10.1137/0216062
   Pierce B.C., P 8 IEEE LOG COMP SC, P376
   Pistore M, 2001, INFORM COMPUT, V164, P264, DOI 10.1006/inco.2000.2895
   Plasil F, 2002, IEEE T SOFTWARE ENG, V28, P1056, DOI 10.1109/TSE.2002.1049404
   Potanin A, 2005, COMMUN ACM, V48, P99, DOI 10.1145/1060710.1060716
   Puntigam F, 1997, LECT NOTES COMPUT SC, V1241, P367
   RAMAMOORTHY CV, 1988, IEEE T SOFTWARE ENG, V14, P1145, DOI 10.1109/32.7625
   Seco JC, 2000, LECT NOTES COMPUT SC, V1850, P108
   Sen A., 1997, On economic inequality, V2
   SHANNON CE, 1948, BELL SYST TECH J, V27, P623, DOI 10.1002/j.1538-7305.1948.tb00917.x
   SHAPIRO SS, 1965, BIOMETRIKA, V52, P591, DOI 10.1093/biomet/52.3-4.591
   Shaw M., 1996, SOFTWARE ARCHITECTUR
   Szyperski C., 2002, Component Software: Beyond Object-Oriented Programming
   ter Beek M. H., 2003, Computer Supported Cooperative Work: The Journal of Collaborative Computing, V12, P21, DOI 10.1023/A:1022407907596
   Valverde S., 2003, CONDMAT03072782003 A
   Vasa R, 2005, 2005 INTERNATIONAL SYMPOSIUM ON EMPIRICAL SOFTWARE ENGINEERING (ISESE), PROCEEDINGS, P463, DOI 10.1109/ISESE.2005.1541855
   Vasa R, 2007, LECT NOTES COMPUT SC, V4829, P235
   Vasa R, 2009, PROC IEEE INT CONF S, P179, DOI 10.1109/ICSM.2009.5306322
   yWorks GmbH, 2010, YED GRAPH ED
NR 61
TC 1
Z9 1
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 1
PY 2012
VL 78
IS 1
BP 27
EP 45
DI 10.1016/j.scico.2011.10.014
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 024RD
UT WOS:000310125400003
OA Bronze
DA 2024-07-18
ER

PT J
AU Günther, S
   Sunkle, S
AF Guenther, Sebastian
   Sunkle, Sagar
TI rbFeatures: Feature-oriented programming with Ruby
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Feature-oriented programming; Domain-specific languages; Dynamic
   programming languages
ID VARIABILITY; VARIANTS; SUPPORT
AB Features are pieces of core functionality of a program that is relevant to particular stakeholders. Features pose dependencies and constraints among each other. These dependencies and constraints describe the possible number of variants of the program: A valid feature configuration generates a specific variant with unique behavior. Feature-Oriented Programming is used to implement features as program units. This paper introduces rbFeatures, a feature-oriented programming language implemented on top of the dynamic programming language Ruby. With rbFeatures, programmers use software product lines, variants, and features as first-class entities. This allows several runtime reflection and modification capabilities, including the extension of the product line with new features and the provision of multiple variants. The paper gives a broad overview to the implementation and application of rbFeatures. We explain how features as first-class entities are designed and implemented, and discuss how the semantics of features are carefully added to Ruby programs. We show two case studies: The expression product line, a common example in feature-oriented programming, and a web application. (C) 2011 Elsevier B.V. All rights reserved.
C1 [Guenther, Sebastian; Sunkle, Sagar] Univ Magdeburg, Fac Comp Sci, D-39106 Magdeburg, Germany.
C3 Otto von Guericke University
RP Günther, S (corresponding author), Univ Magdeburg, Fac Comp Sci, D-39106 Magdeburg, Germany.
EM sebastian.guenther@ovgu.de; sagar.sunkle@ovgu.de
CR [Anonymous], 1996, CMUSEI96TR010
   [Anonymous], 2000, Generative programming: methods, tools, and applications
   Apel S, 2005, LECT NOTES COMPUT SC, V3676, P125
   Apel S., 2007, THESIS O VONGUERICKE
   Apel S, 2012, SCI COMPUT PROGRAM, V77, P174, DOI 10.1016/j.scico.2010.07.005
   Apel S, 2009, J OBJECT TECHNOL, V8, P49, DOI 10.5381/jot.2009.8.5.c5
   Apel S, 2009, PROC INT CONF SOFTW, P221, DOI 10.1109/ICSE.2009.5070523
   Appeltauer Malte, 2009, P 1 ACM INT WORKSHOP, P1, DOI DOI 10.1145/1562112.1562118
   Aracic I, 2006, LECT NOTES COMPUT SC, V3880, P135
   Asikainen T, 2004, LECT NOTES COMPUT SC, V3014, P225
   Bak K., 2010, 3 INT C SOF IN PRESS
   Batory D, 2004, PROC INT CONF SOFTW, P702, DOI 10.1109/ICSE.2004.1317496
   Batory D, 2003, PROC INT CONF SOFTW, P187, DOI 10.1109/ICSE.2003.1201199
   Batory D, 2005, LECT NOTES COMPUT SC, V3714, P7
   Becker Martin., 2003, P 1 WORKSHOP SOFTWAR, P19
   Benavides D., 2006, 11 JORN ING SOFTW BA, P367
   Benavides D, 2010, INFORM SYST, V35, P615, DOI 10.1016/j.is.2010.01.001
   Bergel A, 2005, COMPUT LANG SYST STR, V31, P107, DOI 10.1016/j.cl.2004.11.002
   Beuche D, 2004, SCI COMPUT PROGRAM, V53, P333, DOI 10.1016/j.scico.2003.04.005
   Boucher Q., 2010, Proc. of VaMoS10, P159
   Boucher Q., 2010, Proceedings of the International Conference on Automated Software Engineering, ASE '10, P333
   Chitchyan R., 2003, WORKSH SOFTW ENG PRO
   COPLIEN JO, 2000, THESIS VRIJE U BRUSS
   Costanza P., 2008, P 12 INT C SOFTW PRO, P9
   Czarnecki Krzysztof., 2005, Software Process: Improvement and Practice, P2005
   Flanagan D.Y. Matsumoto., 2008, The Ruby Programming Language
   Günther S, 2010, IEEE SOFTWARE, V27, P25, DOI 10.1109/MS.2010.91
   Gunther S., 2009, FIN0162009 O VONG U
   Gunther S., 2010, P 2 INT WORKSH FEAT, P80, DOI DOI 10.1145/1868688.1868700
   Gunther S., 2009, 3 WORKSH CTR VER LAR, P11
   Herrmann S, 2007, APPL ONTOL, V2, P181
   Hirschfeld R, 2008, J OBJECT TECHNOL, V7, P125, DOI 10.5381/jot.2008.7.3.a4
   Hudak P, 1998, FIFTH INTERNATIONAL CONFERENCE ON SOFTWARE REUSE - PROCEEDINGS, P134, DOI 10.1109/ICSR.1998.685738
   Kästner C, 2007, SPLC 2007: 11TH INTERNATIONAL SOFTWARE PRODUCT LINE CONFERENCE, PROCEEDINGS, P223, DOI 10.1109/SPLINE.2007.12
   Kästner C, 2009, J OBJECT TECHNOL, V8, P59
   Kästner C, 2009, PROC INT CONF SOFTW, P611, DOI 10.1109/ICSE.2009.5070568
   Kästner C, 2009, LECT NOTES BUS INF P, V33, P175
   Kästner C, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P311, DOI 10.1145/1368088.1368131
   Kang Kyo C, 1990, Technical Report
   Kiczales G, 1997, LECT NOTES COMPUT SC, V1241, P220, DOI 10.1007/BFb0053381
   Kiczales G., 2001, ECOOP 2001 - Object-Oriented Programming. 15th European Conference. Proceedings (Lecture Notes in Computer Science Vol.2072), P327
   Lopez-Herrejon R. E., 2001, Generative and Component-Based Software Engineering. Third International Conference, GCSE 2001. Proceedings (Lecture Notes in Computer Science Vol.2186), P10
   Lopez-Herrejon RE, 2005, LECT NOTES COMPUT SC, V3586, P169
   Loughran N, 2008, LECT NOTES COMPUT SC, V4954, P36
   Mezini M., 2004, Software Engineering Notes, V29, P127, DOI 10.1145/1041685.1029915
   Prehofer C, 1997, LECT NOTES COMPUT SC, V1241, P419
   Rajan H, 2005, PROC INT CONF SOFTW, P59
   Rosenmüller M, 2008, GPCE'08: PROCEEDINGS OF THE ACM SIGPLAN SEVENTH INTERNATIONAL CONFERENCE ON GENERATIVE PROGRAMMING AND COMPONENT ENGINEERING, P3
   Scharli N., 2003, P 17 EUR C OBJ OR PR, V2743, P327
   Sinnema M., 2004, P 2 WORKSH SOFTW VAR
   Sinnema M, 2007, INFORM SOFTWARE TECH, V49, P717, DOI 10.1016/j.infsof.2006.08.001
   Smaragdakis Y, 2002, ACM T SOFTW ENG METH, V11, P215, DOI 10.1145/505145.505148
   Sunkle Sagar, 2008, P WORKSH MOD COMP GE, P27
   Tarr P., 1999, Proceedings of the 1999 International Conference on Software Engineering (IEEE Cat. No.99CB37002), P107, DOI 10.1109/ICSE.1999.841000
   Thomas D., 2009, PROGRAMMING RUBY 1 9
   van Deursen A, 2000, ACM SIGPLAN NOTICES, V35, P26, DOI 10.1145/352029.352035
   van Deursen A., 2002, Journal of Computing and Information Technology - CIT, V10, P1, DOI 10.2498/cit.2002.01.01
   Wampler D., 2009, Programming Scala
   Zhang HY, 2004, SCI COMPUT PROGRAM, V53, P381, DOI 10.1016/j.scico.2003.04.007
   [No title captured]
NR 60
TC 10
Z9 11
U1 0
U2 4
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR 1
PY 2012
VL 77
IS 3
BP 152
EP 173
DI 10.1016/j.scico.2010.12.007
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 898NB
UT WOS:000300748000003
OA Bronze
DA 2024-07-18
ER

PT J
AU Parra, C
   Blanc, X
   Cleve, A
   Duchien, L
AF Parra, Carlos
   Blanc, Xavier
   Cleve, Anthony
   Duchien, Laurence
TI Unifying design and runtime software adaptation using aspect models
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Aspect oriented modeling; Software product lines
AB Software systems are seen more and more as evolutive systems. At the design phase, software is constantly in adaptation by the building process itself, and at runtime, it can be adapted in response to changing conditions in the executing environment such as location or resources. Adaptation is generally difficult to specify because of its crosscutting impact on software. This article introduces an approach to unify adaptation at design and at runtime based on Aspect Oriented Modeling. Our approach proposes a unified aspect metamodel and a platform that realizes two different weaving processes to achieve design and runtime adaptations. This approach is used in a Dynamic Software Product Line which derives products that can be configured at design time and adapted at runtime in order to dynamically fit new requirements or resource changes. Such products are implemented using the Service Component Architecture and Java. Finally, we illustrate the use of our approach based on an adaptive e-shopping scenario. The main advantages of this unification are: a clear separation of concerns, the self-contained aspect model that can be weaved during the design and execution, and the platform independence guaranteed by two different types of weaving. (C) 2011 Elsevier B.V. All rights reserved.
C1 [Parra, Carlos; Cleve, Anthony; Duchien, Laurence] Univ Lille 1, LIFL CNRS UMR 8022, INRIA Lille Nord Europe, Lille, France.
   [Blanc, Xavier] Univ Bordeaux 1, Bordeaux, France.
C3 Universite de Lille; Universite de Bordeaux
RP Parra, C (corresponding author), Univ Lille 1, LIFL CNRS UMR 8022, INRIA Lille Nord Europe, Lille, France.
EM carlos.parra@inria.fr; xavier.blanc@labri.fr; anthony.cleve@inria.fr;
   laurence.duchien@inria.fr
OI Parra, Carlos/0000-0002-9695-3775
FU Conseil Regional Nord-Pas-de-Calais; Oseo/ANVAR; Fonds Unique
   Interministeriel; ERCIM
FX This work is funded by the Conseil Regional Nord-Pas-de-Calais,
   Oseo/ANVAR, and the Fonds Unique Interministeriel, under the CAPPUCINO
   project. This research was carried out during the tenure of an ERCIM
   "Alain Bensoussan" Fellowship.
CR [Anonymous], 2006, IEEE COMPUTER
   [Anonymous], P 3 INT WORKSH MOD R
   ARBOLEDA H., 2009, P MEM 12 C IB SOFTW, P59
   *ASP, ASP OR MOD WORKSH SE
   Baniassad E, 2004, PROC INT CONF SOFTW, P158, DOI 10.1109/ICSE.2004.1317438
   Bastida L., 2008, Proceedings of the 2nd international workshop on Systems development in SOA environments, P19, DOI DOI 10.1145/1370916.1370921
   Batista T, 2005, LECT NOTES COMPUT SC, V3527, P1
   Bencomo N., 2008, P 2 INT WORKSH DYN S
   Brooks FrederickP., 1995, IEEE Software, V12, P57, DOI [10.1109/MS.1995.10041, DOI 10.1109/MS.1995.10041]
   Bruneton E, 2006, SOFTWARE PRACT EXPER, V36, P1257, DOI 10.1002/spe.767
   Clarke S, 2002, SCI COMPUT PROGRAM, V44, P71, DOI 10.1016/S0167-6423(02)00030-8
   COULSON G, 2004, IASTED C SOFTW ENG A, P684
   Czarnecki K, 2005, LECT NOTES COMPUT SC, V3676, P422
   David PC, 2006, LECT NOTES COMPUT SC, V4089, P82
   Deelstra S, 2004, LECT NOTES COMPUT SC, V3154, P165
   Fraser S.D., 2007, COMPANION 22 ACM SIG, P1026
   Jézéquel JM, 2008, SOFTW SYST MODEL, V7, P209, DOI 10.1007/s10270-008-0080-5
   Kang K. C., 1990, Technical Report
   Kiczales G, 1997, LECT NOTES COMPUT SC, V1241, P220, DOI 10.1007/BFb0053381
   Kienzle J, 2009, AOSD'09: 8TH INTERNATIONAL CONFERENCE ON ASPECT-ORIENTED SOFTWARE DEVELOPMENT, P87
   Kuhlemann M., 2009, Proceedings of the 8th International Conference on Generative Programming and Component Engineering, Denver, Colorado, P177, DOI [10.1145/1621607.1621634, DOI 10.1145/1621607.1621634]
   Lehman MeirM., 1997, Lecture Notes in Computer Science, V1149, P108
   Lundesgaard SA, 2007, LECT NOTES COMPUT SC, V4531, P76
   Morin B, 2009, PROC INT CONF SOFTW, P122, DOI 10.1109/ICSE.2009.5070514
   Morin B, 2008, LECT NOTES COMPUT SC, V5301, P782, DOI 10.1007/978-3-540-87875-9_54
   Northrop L., 2001, SOFTWARE PRODUCT LIN
   *OP SOA, SERV COMP ARCH SPEC
   *OW2 CONS, FSCRIPT FPATH
   Parra C, 2010, LECT NOTES COMPUT SC, V6285, P230, DOI 10.1007/978-3-642-15114-9_18
   Parra Carlos., 2009, Proceedings of the 13th International Software Product Line Conference, SPLC'09, P131
   Perrouin G, 2008, SPLC 2008: 12TH INTERNATIONAL SOFTWARE PRODUCT LINE CONFERENCE, PROCEEDINGS, P339, DOI 10.1109/SPLC.2008.38
   Pessemier N, 2008, INT J COMPUT APPL T, V31, P94, DOI 10.1504/IJCAT.2008.017722
   Reddy YR, 2006, LECT NOTES COMPUT SC, V3880, P75
   SANCHEZ P, 2009, P 1 INT C SOFTW LANG, P188
   Schobbens PY, 2006, RE'06: 14TH IEEE INTERNATIONAL REQUIREMENTS ENGINEERING CONFERENCE, PROCEEDINGS, P139
   SEINTURIER L, 2009, 6 IEEE INT C SERV CO, P268
   Svahnberg M, 2005, SOFTWARE PRACT EXPER, V35, P705, DOI 10.1002/spe.652
   Tarr P., 1999, Proceedings of the 1999 International Conference on Software Engineering (IEEE Cat. No.99CB37002), P107, DOI 10.1109/ICSE.1999.841000
   Voelter M, 2007, SPLC 2007: 11TH INTERNATIONAL SOFTWARE PRODUCT LINE CONFERENCE, PROCEEDINGS, P233, DOI 10.1109/SPLINE.2007.23
   WAGELAAR D, 2008, P 1 INT C THEOR PRAC, P152
   Zhang Ji, 2006, P 28 INT C SOFTW ENG, P371
   1968, NAT SOFTW ENG C
NR 42
TC 15
Z9 15
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 1
PY 2011
VL 76
IS 12
SI SI
BP 1247
EP 1260
DI 10.1016/j.scico.2010.12.005
PG 14
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 793FX
UT WOS:000292806900012
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Heinzl, R
   Schwaha, P
AF Heinzl, Rene
   Schwaha, Philipp
TI A generic topology library
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Algebraic topology; Data structures; Traversal operations; Data access;
   Iterator categories; Fiber bundles; Partially ordered sets
ID TEMPLATE LIBRARY
AB Requirements in scientific computing emerge from various areas such as algebraic topology, geometrical algebra, and differential topology with different notations. Cell and complex properties are introduced in order to derive a common specification for properties of data structures. Only topological properties are used, thereby separating the actual data storage structure from the stored data. Several theoretical topological properties are introduced, and traversal capabilities which excel current implementations are presented and accompanied by selected examples.
   This work focuses on extracting these necessary mathematical concepts and introduces generic programming concepts necessary to fully transfer the mathematical concepts. Not only theoretical contributions are presented, but they are also demonstrated by means of applications in scientific computing. (c) 2009 Elsevier B.V. All rights reserved.
C1 [Heinzl, Rene; Schwaha, Philipp] Inst Microelect, Vienna, Austria.
C3 Technische Universitat Wien
RP Heinzl, R (corresponding author), Inst Microelect, Gusshausstr 27-29, Vienna, Austria.
EM heinzl@iue.tuwien.ac.at
FU Austrian Science Fund FWF [P19532-N13]; Austrian Science Fund (FWF)
   [P19532] Funding Source: Austrian Science Fund (FWF)
FX We want to thank Werner Benger, Franz Stimpfl, Michael Spevak, our
   colleagues, and especially the (unknown) reviewers for their valuable
   input and discussions, which significantly improved the readability and
   context of this paper. We also want to thank Prof. Siegfried Selberherr
   for the resources at the Institute of Microelectronics. This work was
   supported by the Austrian Science Fund FWF, project P19532-N13.
CR ABRAHAMS D, 2003, N1477030060 ISOIECJT
   [Anonymous], 1990, Introduction to Lattices and Order
   [Anonymous], BOOST LAMBD LIB
   [Anonymous], STREAM: sustainable memory bandwidth in high performance computers
   [Anonymous], 1998, P 1998 ACM IEEE C SU
   Austern MatthewH., 1998, Generic programming and the STL: Using and extending the C++ Standard Template Library
   BAGGE O, 2003, THESIS U BERGEN
   BENGER W, 2004, THESIS FREIE U BERLI
   BERTI G, 2000, THESIS TECHNISCHE U
   BERTI G, 2002, P COMP SCI ICCS, V2331
   *BOOST, BOOST FUS 2 0
   Boost, BOOST PHOEN 2 0
   Boost, Boost C++ Libraries
   Butler D. M., 1992, Computers in Physics, V6, P576
   EDELSBRUNNER H, 1985, ACM, V85, P251
   Grasser T, 2003, P IEEE, V91, P251, DOI 10.1109/JPROC.2002.808150
   GREGOR D, 2006, N2039060109 ISOIEC J
   Haveraaen M., 1999, NORDIC J COMPUT, V3, P241
   HEINZL R, 2006, P POOSC C NANT FRANC
   HEINZL R, 2007, THESIS TECHNISCHE U
   *IBM CORP, 1993, YORKT HEIGHTS
   Janich K., 2001, TOPOLOGIE
   KOVALEVSKY V, 1989, COMPUTER VISION IMAG, V161, P141
   LACHAUD J, WRITING GENERIC DIGI
   LEE L, 2002, JGI 02
   LIENHARDT P, 1989, SCG 89
   McNamara B, 2001, ACM SIGPLAN NOTICES, V36, P25, DOI 10.1145/375431.375417
   OANCEA CE, 2005, P OBJ OR PROGR SYST
   PION S, 2006, P OBJ OR PROGR SYST
   REIS GD, 2005, P OBJ OR PROGR SYST
   SCHWAHA P, 2007, P 2 ICSOFT 2007 BARC
   Siek J., 1999, MAYFLY PATTERN LIGHT
   Siek J., 2002, The Boost Graph Library: User Guide and Reference Manual
   Siek JG, 1999, COMPUT SCI ENG, V1, P70, DOI 10.1109/5992.805137
   SINGLER J, 2008, P IWMSE LEIPZ GERM
   Singler J, 2007, LECT NOTES COMPUT SC, V4641, P682
   Veldhuizen T., 1995, C++ Report, V7, P26
   Veldhuizen T., 1995, C++ Report, V7, P36
   Veldhuizen T. L., 1998, P SIAM WORKSH OBJ OR
   ZALEWSKI M, 2005, P OBJ OR PROGR SYST
   [No title captured]
NR 41
TC 2
Z9 2
U1 0
U2 0
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD APR 1
PY 2011
VL 76
IS 4
SI SI
BP 324
EP 346
DI 10.1016/j.scico.2009.09.007
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 727WU
UT WOS:000287834500008
DA 2024-07-18
ER

PT J
AU Pion, S
   Fabri, A
AF Pion, Sylvain
   Fabri, Andreas
TI A generic lazy evaluation scheme for exact geometric computations
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Computational geometry; Exact geometric computation; Numerical
   robustness; Interval arithmetic; Lazy evaluation; Generic programming; C
   plus; CGAL
ID KERNEL
AB We present a generic C++ design to perform exact geometric computations efficiently using lazy evaluations. Exact geometric computations are critical for the robustness of geometric algorithms. Their efficiency is also important for many applications, hence the need for delaying the costly exact computations at run time until they are actually needed, if at all. Our approach is generic and extensible in the sense that it is possible to make it a library that users can apply to their own geometric objects and primitives. It involves techniques such as generic functor-adaptors, static and dynamic polymorphism, reference counting for the management of directed acyclic graphs, and exception handling for triggering exact computations when needed. It also relies on multi-precision arithmetic as well as interval arithmetic. We apply our approach to the whole geometry kernel of CGAL. (c) 2010 Elsevier B.V. All rights reserved.
C1 [Pion, Sylvain] INRIA, Sophia Antipolis, France.
   [Fabri, Andreas] GeometryFactory, Grasse, France.
C3 Inria
RP Pion, S (corresponding author), INRIA Sophia Antipolis Mediterranee, BP 93, F-06902 Sophia Antipolis, France.
EM Sylvain.Pion@sophia.inria.fr; andreas.fabri@geometryfactory.com
FU EU [IST-006413]
FX This research is supported in part by the IST Programme of the EU as a
   Shared-cost RID (FET Open) Project under Contract No IST-006413 (ACS -
   Algorithms for Complex Shapes).
CR Benouamer M. O., 1993, CCCG. Proceedings of the Fifth Canadian Conference on Computational Geometry, P73
   Brönnimann H, 2001, DISCRETE APPL MATH, V109, P25, DOI 10.1016/S0166-218X(00)00231-6
   BRONNIMANN H, 2009, CGAL USER REFERENCE
   BURNIKEL C, 1996, MPI1961001
   Cazals F, 2008, PROCEEDINGS OF THE TWENTY-FOURTH ANNUAL SYMPOSIUM ON COMPUTATIONAL GEOMETRY (SGG'08), P182, DOI 10.1145/1377676.1377705
   *CGAL, 2009, US REF MAN
   DECASTRO PMM, 2009, CGAL USER REFERENCE
   EMIRIS IZ, 2004, P 20 ANN ACM S COMP, P438
   Funke S, 2002, COMP GEOM-THEOR APPL, V22, P99, DOI 10.1016/S0925-7721(01)00046-3
   *GMP, GNU MULT PREC ARITHM
   GOLDBERG D, 1991, COMPUT SURV, V23, P5, DOI 10.1145/103162.103163
   GREGOR D, 2006, OOPSLA 06, P291
   Gregor D, 2007, APPLIED COMPUTING 2007, VOL 1 AND 2, P1101, DOI 10.1145/1244002.1244243
   Hert S, 2007, COMP GEOM-THEOR APPL, V38, P16, DOI 10.1016/j.comgeo.2006.11.004
   KARAMCHETI V, 1999, CORE LIB PROJECT
   KETTNER L, 2005, WORKSH LIB CENTR SOF
   Kettner L, 2008, COMP GEOM-THEOR APPL, V40, P61, DOI 10.1016/j.comgeo.2007.06.003
   Moore R. E., 1966, INTERVAL ANAL
   PION S, 1999, THESIS U NICE SOPHIA
   Veldhuizen T., 1995, C++ Report, V7, P26
   YAP CK, 2004, HDB DISCRETE COMPUTA, pCH41
NR 21
TC 14
Z9 17
U1 0
U2 2
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD APR 1
PY 2011
VL 76
IS 4
SI SI
BP 307
EP 323
DI 10.1016/j.scico.2010.09.003
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 727WU
UT WOS:000287834500007
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Li, GD
   Palmer, R
   DeLisi, M
   Gopalakrishnan, G
   Kirby, RM
AF Li, Guodong
   Palmer, Robert
   DeLisi, Michael
   Gopalakrishnan, Ganesh
   Kirby, Robert M.
TI Formal specification of MPI 2.0: Case study in specifying a practical
   concurrent programming API
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE MPI; Formal specification; TLA; Model checking
AB We describe the first formal specification of a non-trivial subset of MPI, the dominant communication API in high performance computing. Engineering a formal specification for a non-trivial concurrency API requires the right combination of rigor, executability, and traceability, while also serving as a smooth elaboration of a pre-existing informal specification. It also requires the modularization of reusable specification components to keep the length of the specification in check. Long-lived APIs such as MPI are not usually 'textbook minimalistic' because they support a diverse array of applications, a diverse community of users, and have efficient implementations over decades of computing hardware. We choose the TLA+ notation to write our specifications, and describe how we organized the specification of around 200 of the 300 MPI 2.0 functions. We detail a handful of these functions in this paper, and assess our specification with respect to the aforementioned requirements. We close with a description of possible approaches that may help render the act of writing, understanding, and validating the specifications of concurrency APIs much more productive. (C) 2010 Elsevier B.V. All rights reserved.
C1 [Li, Guodong; DeLisi, Michael; Gopalakrishnan, Ganesh; Kirby, Robert M.] Univ Utah, Sch Comp, Salt Lake City, UT 84112 USA.
   [Palmer, Robert] Microsoft Corp, Redmond, WA 98052 USA.
C3 Utah System of Higher Education; University of Utah; Microsoft
RP Li, GD (corresponding author), Univ Utah, Sch Comp, Salt Lake City, UT 84112 USA.
EM ligd@cs.utah.edu; Robert.Palmer@microsoft.com; delisi@gmail.com;
   ganesh@cs.utah.edu; kirby@cs.utah.edu
FU Division of Computing and Communication Foundations; Direct For Computer
   & Info Scie & Enginr [0903408] Funding Source: National Science
   Foundation
CR ABADI M, 1994, FORMAL SYSTEMS SPECI, P21
   [Anonymous], The abstract state machine language
   [Anonymous], HOL THEOREM PROVER
   [Anonymous], Formal Specification of PHP Grammar
   BARRUS S, 2004, UUCS04008
   BATSON B, 2002, FORMAL METHODS COMPO, P242
   BISHOP S., 2006, Symposium on the Principles of Programming Languages (POPL), P55
   BISHOP S, 2005, SIGCOMM 05, P265
   BOEHM HJ, 2005, P 2005 ACM SIGPLAN C, P261
   Chapman B., 2008, USING OPENMP
   DANALIS A, 2005, SC 05, P58
   Eijk P.V., 1989, FORMAL DESCRIPTION T
   Gabriel E, 2004, LECT NOTES COMPUT SC, V3241, P97
   GEIST A, 2008, COMMUNICATION
   Georgelin Philippe., 1999, A formal specification of the MPI primitives and communication mechanisms
   Gropp W, 1996, PARALLEL COMPUT, V22, P789, DOI 10.1016/0167-8191(96)00024-5
   GROPP WD, 2001, 8 INT C HIGH PERF CO, P81
   Harrison J, 2003, FORM METHOD SYST DES, V22, P143, DOI 10.1023/A:1022973506233
   Herlihy M., 2008, ART MULTIPROCESSOR P
   Holzmann GJ, 1997, IEEE T SOFTWARE ENG, V23, P279, DOI 10.1109/32.588521
   *IEEE, 1987, 8541987 ANSIIEEE
   JACKSON D., 2002, TOOLS ALGORITHMS CON, P20
   Jackson Daniel., 2000, P 22 INT C SOFTWARE, P730
   JIUXING DKP, 2004, INT J PARALLEL PROG, V32, P167
   KUCHERA W, 2003, 0301 MICH TU
   LAMPORT L, WIN32 THREADS API SP
   LEIJENS D., 2008, The Design of a Task Parallel Library
   LI G, 2009, UUCS09003
   Li GD, 2008, PPOPP'08: PROCEEDINGS OF THE 2008 ACM SIGPLAN SYMPOSIUM ON PRINCIPLES AND PRACTICE OF PARALLEL PROGRAMMING, P283, DOI 10.1145/1345206.1345257
   *MICR, 2007, PHOEN AC PROGR
   *MPI, 2008, MESS PASS INT STAND
   *MPI, 1995, MESS PASS INT STAND
   *MULT, MULT COMM API
   Nielson F., 1999, Principles of Program Analysis
   Norrish M., 1998, Ph. D. Dissertation
   Pacheco P., 1996, Parallel Programming with MPI
   PALMER R, 2006, UUCS06012
   PALMER R., 2007, ACM workshop on Parallel and Distributed Dystems, P43
   Palmer R, 2006, ELECTRON NOTES THEOR, V144, P95, DOI 10.1016/j.entcs.2006.01.007
   Palmer Robert., 2007, FMICS: Proceedings of the 12th Workshop on Formal Methods for Industrial Critical Systems, P164
   Pervez S, 2006, LECT NOTES COMPUT SC, V4192, P30
   REINDERS J, 2008, INTEL THREAD BUILDIN
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   SIEGEL SF, 2003, UMCS2003036 DEP COMP
   Siegel SF, 2007, LECT NOTES COMPUT SC, V4349, P44
   Siegel StephenF., 2005, PPoPP '05: Proceedings of the Tenth ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming, P95
   SQUYRES JM, 2003, P 10 EUR PVM MPI US, P379
   TRAFF JL, 2007, P REC ADV PAR VIRT M, P36
   Veanes M., 2008, Formal methods and testing, chapter Model-based testing of object-oriented reactive systems with spec explorer, P39, DOI DOI 10.1007/978-3-540-78917-8
   CT C THROUGHPUT COMP
   TLA TEMPORAL LOGIC A
NR 51
TC 7
Z9 7
U1 0
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 1
PY 2011
VL 76
IS 2
SI SI
BP 65
EP 81
DI 10.1016/j.scico.2010.03.007
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 693JO
UT WOS:000285220600002
DA 2024-07-18
ER

PT J
AU Schmitz, S
AF Schmitz, Sylvain
TI An experimental ambiguity detection tool
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Grammar verification; Disambiguation; GLR
ID CONTEXT-FREE GRAMMARS; LR PARSERS
AB Although programs convey an unambiguous meaning, the grammars used in practice to describe their syntax are often ambiguous, and completed with disambiguation rules. Whether these rules achieve the removal of all the ambiguities while preserving the original intended language can be difficult to ensure. We present an experimental ambiguity detection tool for GNU Bison, and illustrate how it can assist a grammatical development for a subset of Standard ML. (C) 2009 Elsevier B.V. All rights reserved.
C1 [Schmitz, Sylvain] ENS Cachan, LSV, Cachan, France.
   [Schmitz, Sylvain] CNRS, F-75700 Paris, France.
C3 Universite Paris Saclay; Centre National de la Recherche Scientifique
   (CNRS)
RP Schmitz, S (corresponding author), ENS Cachan, LSV, Cachan, France.
EM Sylvain.Schmitz@lsv.ens-cachan.fr
OI Schmitz, Sylvain/0000-0002-4101-4308
CR Aho A.V., 1972, SERIES AUTOMATIC COM
   AHO AV, 1975, COMMUN ACM, V18, P441, DOI 10.1145/360933.360969
   [Anonymous], 2007, The Definitive ANTLR Reference: Building Domain-Specific Languages
   [Anonymous], 1986, Efficient parsing for natural language
   [Anonymous], ANSIMILSTD1815A1983
   [Anonymous], 1997, The Definition of Standard ML
   BAKER TP, 1981, J COMPUT SYST SCI, V22, P243, DOI 10.1016/0022-0000(81)90030-1
   BASTEN HJS, 2008, ELECT NOTES IN PRESS
   Billot S., 1989, ACL 89, P143, DOI DOI 10.3115/981623.981641
   BOULLIER P, 1984, THESIS U ORLEANS
   Brabrand C, 2007, LECT NOTES COMPUT SC, V4783, P214
   CANTOR DG, 1962, J ACM, V9, P477, DOI 10.1145/321138.321145
   CAUCAL D, 1990, RAIRO-INF THEOR APPL, V24, P339, DOI 10.1051/ita/1990240403391
   Chomsky N., 1963, STUDIES LOGIC, P118
   Culik K.  II, 1973, Journal of Computer and System Sciences, V7, P66, DOI 10.1016/S0022-0000(73)80050-9
   DONNELY C, 2006, BISON VERSION 2 3
   EARLEY J, 1970, COMMUN ACM, V13, P94, DOI 10.1145/362007.362035
   FLOYD RW, 1962, COMMUN ACM, V5, P526, DOI 10.1145/368959.368993
   Gosling James, 1996, The Java Language Specification
   Grune Dick., 1990, PARSING TECHNIQUES P
   HEILBRUNNER S, 1983, J COMPUT SYST SCI, V27, P1, DOI 10.1016/0022-0000(83)90026-0
   Hunt III H. B., 1974, 15 ANN S SWITCH AUT, P127, DOI DOI 10.1109/SWAT.1974.21
   *ISO, 1998, 14882 ISOIEC
   JOHNSON SC, 1975, 32 A T BELL LAB
   KAHRS S, 1993, ECSLFCS93257 U ED
   Kernighan B.W., 1988, The C Programming Language
   Klint P, 2005, ACM T SOFTW ENG METH, V14, P331, DOI 10.1145/1072997.1073000
   Klint P., 1994, ASMICS WORKSH PARS T, P89
   Lämmel R, 2001, SOFTWARE PRACT EXPER, V31, P1395, DOI 10.1002/spe.423
   Lee P., 1997, USING SML NJ SYSTEM
   McPeak S, 2004, LECT NOTES COMPUT SC, V2985, P73
   MOHRI M, 2001, TEXT SPEECH LANGUAGE, V17, P153
   POPLAWSKI DA, 1979, J COMPUT SYST SCI, V18, P218, DOI 10.1016/0022-0000(79)90031-X
   Purdom P., 1974, BIT (Nordisk Tidskrift for Informationsbehandling), V14, P326, DOI 10.1007/BF01933232
   Reeder J, 2005, BMC BIOINFORMATICS, V6, DOI 10.1186/1471-2105-6-153
   ROSSBERG A, 2006, DEFECTS REVISED DEFI
   Schmitz S, 2007, LECT NOTES COMPUT SC, V4596, P692
   Schmitz S, 2006, LECT NOTES COMPUT SC, V4036, P95
   Schroer Friedrich Wilhelm, 2001, AMBER, an ambiguity checker for context-free grammars
   Scott E, 2006, ACM T PROGR LANG SYS, V28, P577, DOI 10.1145/1146809.1146810
   Szymanski T. G., 1976, SIAM Journal on Computing, V5, P231, DOI 10.1137/0205019
   TAI KC, 1979, ACM T PROGR LANG SYS, V1, P295, DOI DOI 10.1145/357073.357083
   van den Brand MGJ, 2002, LECT NOTES COMPUT SC, V2304, P143
NR 43
TC 4
Z9 5
U1 0
U2 1
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 1
PY 2010
VL 75
IS 1-2
BP 71
EP 84
DI 10.1016/j.scico.2009.07.002
PG 14
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 539CK
UT WOS:000273230800006
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Lemos, OAL
   Franchin, IG
   Masiero, PC
AF Lazzarini Lemos, Otavio Augusto
   Franchin, Ivan Gustavo
   Masiero, Paulo Cesar
TI Integration testing of Object-Oriented and Aspect-Oriented programs: A
   structural pairwise approach for Java
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Software testing; Object-Oriented programming; Aspect-Oriented
   programming; Structural testing; Integration testing; Testing criteria;
   Testing Object-Oriented programs; Testing Aspect-Oriented programs; Java
ID COVERAGE; CRITERIA
AB Several testing approaches focus on finding faults in software units of implementation. A problem not addressed by unit testing is the interaction among units, with respect to the correctness of their interfaces. In this paper a structural integration testing approach for Object-Oriented (00) and Aspect-Oriented (AO) Java programs is presented. To make the activity more feasible, we address the testing of pairs of units (i.e., methods and pieces of advice). A model called PWDU (PairWise Def-Use) graph to represent the flow of control and data between pairs of units is proposed. Based on the PWDU, the following family of testing criteria is defined: all-pairwise-integrated-nodes (control-flow based), all-pairwise-integrated-edges (control-flow based), and all-pairwise-integrated-uses (data-flow based). To evaluate the proposed approach, an implementation of the criteria in a testing tool is presented along with an example of usage and an exploratory study. The study with 7 AO programs that are also 00 was conducted to investigate the cost of application and usefulness of the approach. Results provided evidence that the criteria are practical and useful for integration testing of 00 and AO programs. (C) 2009 Elsevier B.V. All rights reserved.
C1 [Lazzarini Lemos, Otavio Augusto; Franchin, Ivan Gustavo; Masiero, Paulo Cesar] ICMC USP, Dept Sistemas Comp, BR-13560970 Sao Carlos, SP, Brazil.
RP Lemos, OAL (corresponding author), ICMC USP, Dept Sistemas Comp, Caixa Postal 668, BR-13560970 Sao Carlos, SP, Brazil.
EM oall@icmc.usp.br
RI Masiero, Paulo Cesar/E-5882-2011; Lemos, Otavio/M-9278-2013
OI Lemos, Otavio/0000-0001-6481-5311
FU FAPESP, Brazil [2004/15186-3]; CNPq, Brazil [308330/2007-2]
FX The authors would like to thank FAPESP, Brazil (grant number
   2004/15186-3), and CNPq, Brazil (grant number 308330/2007-2), for
   financial support; and Jose C. Maldonado, Auri M. R. Vincenzi and Marcio
   E. Delamaro for making the initial version of JaBUTi available to us.
CR [Anonymous], 2003, ASPECTJ PROGR GUID
   BASILI VR, 1984, COMMUN ACM, V27, P42, DOI 10.1145/69605.2085
   Bertolino A, 2007, FOSE 2007: FUTURE OF SOFTWARE ENGINEERING, P85, DOI 10.1109/FOSE.2007.25
   BODKIN R, 2005, ENTERPRISE ASPECTJ T
   Delamaro ME, 2001, IEEE T SOFTWARE ENG, V27, P228, DOI 10.1109/32.910859
   Elrad T, 2001, COMMUN ACM, V44, P33, DOI 10.1145/383845.383854
   Franchin I.G., 2007, 21 SBES JOAO PESS PB, P377
   HALEY A, 1984, J SYST SOFTWARE, V4, P309, DOI 10.1016/0164-1212(84)90030-X
   Harrold M. J., 1994, SIGSOFT Software Engineering Notes, V19, P154, DOI 10.1145/195274.195402
   Harrold M. J., 1992, International Conference on Software Engineering, P68, DOI 10.1109/ICSE.1992.753491
   HARROLD MJ, 2001, OOPSLA 2001, P312
   Hilsdale E., 2004, INT C ASPECT ORIENTE, P26
   Kiczales G, 2005, PROC INT CONF SOFTW, P49
   KICZALES G, 1997, P EUR C OBJ OR PROGR, V1241, P220
   Lemos OAL, 2007, J SYST SOFTWARE, V80, P862, DOI 10.1016/j.jss.2006.08.022
   LEMOS OAL, 2008, P 32 ANN IEEE SOFTW
   LEMOS OAL, 2006, WTAOP 06, P33
   LEMOS OAL, 2009, POINTCUT BASED UNPUB
   LESIECKI N, 2005, IBM DEVELOPERWORKS
   Lindholm Tim., 1999, JAVA VIRTUAL MACHINE, V2nd
   LINNENKUGEL U, 1990, ISCI 90, P709
   MALDONADO JC, 1991, THESIS UNICAMP CAMPI
   Mortensen M., 2005, P 1 WORKSH TEST ASP
   Myers G J., 2004, The Art of Software Testing, V2nd ed.
   Orso A., 2004, Scaling regression testing to large software systems, P241
   PARADKAR A, 1996, P 1996 C CTR ADV STU, P30
   *PROGR TOOLS GROUP, 2007, ABC ASP COMP ASPECTJ
   RAPPS S, 1985, IEEE T SOFTWARE ENG, V11, P367, DOI 10.1109/TSE.1985.232226
   RINARD M, 2004, P 12 ACM SIGSOFT INT, P147
   Souter AL, 2003, IEEE T SOFTWARE ENG, V29, P1005, DOI 10.1109/TSE.2003.1245302
   SOUTER AL, 2000, ISSTA 00, P49
   SOUTER AL, 1999, PASTE 99, P47
   STOBIE K, 2005, QUEUE, V3, P30
   Tai KC, 2002, IEEE T SOFTWARE ENG, V28, P109, DOI 10.1109/32.979992
   VILELA PRS, 1999, AN 13 S BRAS ENG SOF, P393
   Vincenzi AMR, 2006, SOFTWARE PRACT EXPER, V36, P1513, DOI 10.1002/spe.726
   Vincenzi AMR, 2005, SCI COMPUT PROGRAM, V56, P211, DOI 10.1016/j.scico.2004.11.013
   WEYUKER EJ, 1988, COMMUN ACM, V31, P668, DOI 10.1145/62959.62963
   WEYUKER EJ, 1979, INT J COMPUT INF SCI, V8, P387, DOI 10.1007/BF00995175
   WHALEY J, 1999, OOPSLA, P187
   WILDE N, 1992, IEEE T SOFTWARE ENG, V18, P1038, DOI 10.1109/TSE.1992.1263033
   Xu GQ, 2007, PROC INT CONF SOFTW, P65
   Zhao J, 2003, 27TH ANNUAL INTERNATIONAL COMPUTER SOFTWARE AND APPLICATIONS CONFERENCE, PROCEEDINGS, P188, DOI 10.1109/CMPSAC.2003.1245340
   Zhu H, 1997, ACM COMPUT SURV, V29, P366, DOI 10.1145/267580.267590
NR 44
TC 15
Z9 16
U1 0
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD AUG 15
PY 2009
VL 74
IS 10
BP 861
EP 878
DI 10.1016/j.scico.2009.05.001
PG 18
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 482WF
UT WOS:000268920000004
OA Bronze
DA 2024-07-18
ER

PT J
AU Morgan, C
AF Morgan, Carroll
TI <i>The Shadow Knows</i>: Refinement and security in sequential programs
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 8th International Conference on Mathematics of Program Construction
CY JUL 03-05, 2006
CL Kuressaare, ESTONIA
SP Estonian Minist Educ & Res, Natl Ctr Excellence Programme
DE Security; Privacy; Hoare logic; Specification; Implementation; Logic of
   knowledge
ID INFORMATION-FLOW; MULTIAGENT SYSTEMS
AB Stepwise refinement is a crucial conceptual tool for system development, encouraging program construction via a number of separate correctness-preserving stages which ideally can be understood in isolation. A crucial conceptual component of security is an adversary's ignorance of concealed information. We suggest a novel method of combining these two ideas.
   Our suggestion is based on a mathematical definition of "ignorance-preserving" refinement that extends classical refinement by limiting an adversary's access to concealed information: moving from specification to implementation should never increase that access. The novelty is the way we achieve this in the context of sequential programs.
   Specifically we give an operational model (and detailed justification for it), a basic sequential programming language and its operational semantics in that model, a "logic of ignorance" interpreted over the same model, then a program-logical semantics bringing those together - and finally we use the logic to establish, via refinement, the correctness of a real (though small) protocol: Rivest's Oblivious Transfer. A previous report* treated Chaum's Dining Cryptographers similarly.
   In passing we solve the Refinement Paradox for sequential programs. (C) 2009 Elsevier B.V. All rights reserved.
C1 Univ New S Wales, Sch Comp Sci & Engn, Sydney, NSW 2052, Australia.
C3 University of New South Wales Sydney
RP Morgan, C (corresponding author), Univ New S Wales, Sch Comp Sci & Engn, Sydney, NSW 2052, Australia.
EM carrollm@cse.unsw.edu.au
RI Jia, Chuanchang/AAA-5513-2020
CR [Anonymous], ACM SIGOPS OPERATING
   [Anonymous], 1994, PRENTICE HALL INT SE
   [Anonymous], 1983, P 2 ANN ACM S PRINCI, DOI [10.1145/800221.806716, DOI 10.1145/800221.806716]
   Back Ralph-Johan, 1998, GRADUATE TEXTS COMPU
   BACK RJ, 1978, A19784 U HELS DEP CO
   Bossi A, 2003, I C SOFTW ENG FORM M, P44, DOI 10.1109/SEFM.2003.1236206
   Chaum D., 1988, Journal of Cryptology, V1, P65, DOI 10.1007/BF00206326
   Dijkstra E. W., 1976, A Discipline of Pro-gramming
   ENGELHARDT K, 2005, UNPUB
   Fagin R, 1995, Reasoning about knowledge
   Goguen J. A., 1984, Proceedings of the 1984 Symposium on Security and Privacy, P75
   Halpern J, 2002, P IEEE CSFW, P32, DOI 10.1109/CSFW.2002.1021805
   Halpern JY, 2003, P IEEE CSFW, P75, DOI 10.1109/CSFW.2003.1212706
   HALPERN JY, 1990, J ACM, V37, P549, DOI 10.1145/79147.79161
   Hintikka J., 2005, Knowledge and Belief. An Introduction to the Logic of the Two Notions
   HOARE CAR, 1969, COMMUN ACM, V12, P576, DOI 10.1145/363235.363259
   Jacob J., 1988, Proceedings of the 1988 IEEE Symposium on Security and Privacy (Cat. No.88CH2558-5), P14, DOI 10.1109/SECPRI.1988.8094
   Joshi R, 2000, SCI COMPUT PROGRAM, V37, P113, DOI 10.1016/S0167-6423(99)00024-6
   Mantel H, 2001, P IEEE S SECUR PRIV, P78, DOI 10.1109/SECPRI.2001.924289
   Mantel H, 2000, P IEEE CSFW, P185, DOI 10.1109/CSFW.2000.856936
   McIver A., 2005, TECHNICAL MONOGRAPHS
   Morgan C., 1994, On the Refinement Calculus
   MORGAN C, 2006, UNPUB
   Morgan C, 2006, LECT NOTES COMPUT SC, V4014, P359, DOI 10.1007/11783596_21
   Rivest R. L, 1999, Unconditionally secure commitment and oblivious transfer schemes using private channels and a trusted initializer
   Roscoe A. W., 1996, Journal of Computer Security, V4, P27
   Sabelfeld A, 2004, LECT NOTES COMPUT SC, V3233, P174
   Sabelfeld A, 2003, IEEE J SEL AREA COMM, V21, P5, DOI 10.1109/JSAC.2002.806121
   Sabelfeld A., 2001, Higher-Order and Symbolic Computation, V14, P59, DOI 10.1023/A:1011553200337
   SMYTH MB, 1978, J COMPUT SYST SCI, V16, P23, DOI 10.1016/0022-0000(78)90048-X
   WIRTH N, 1971, COMMUN ACM, V14, P221, DOI 10.1145/362575.362577
NR 31
TC 24
Z9 26
U1 0
U2 2
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 1
PY 2009
VL 74
IS 8
SI SI
BP 629
EP 653
DI 10.1016/j.scico.2007.09.003
PG 25
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 454GZ
UT WOS:000266671700007
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Solin, K
   von Wright, J
AF Solin, Kim
   von Wright, Joakim
TI Enabledness and termination in refinement algebra
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 8th International Conference on Mathematics of Program Construction
CY JUL 03-05, 2006
CL Kuressaare, ESTONIA
SP Estonian Minist Educ & Res, Natl Ctr Excellence Programme
DE Refinement algebra; Enabledness; Termination; Action systems
ID KLEENE ALGEBRA
AB Refinement algebras are abstract algebras for reasoning about programs in a total correctness framework. We extend a reduct of von Wright's demonic refinement algebra with two operators for modelling enabledness and termination of programs. We show how the operators can be used for expressing relations between programs and apply the algebra to reasoning about action systems. (C) 2009 Elsevier B.V. All rights reserved.
C1 [Solin, Kim; von Wright, Joakim] Abo Akad Univ, Dept IT, FIN-20520 Turku, Finland.
C3 Abo Akademi University
RP Solin, K (corresponding author), Uppsala Univ, Dept Philosophy, Box 627, SE-75126 Uppsala, Sweden.
EM kim.solin@filosofi.uu.se
CR Aboul-Hosn Kamal., 2006, J APPL NONCLASSICAL, V16, P9
   [Anonymous], 1994, PRENTICE HALL INT SE
   [Anonymous], 1983, P 2 ANN ACM S PRINCI, DOI [10.1145/800221.806716, DOI 10.1145/800221.806716]
   Back R.J.R., 1980, Mathematical Center Tracts, V131
   Back Ralph-Johan, 1998, GRADUATE TEXTS COMPU
   BACK RJ, 1991, STRUCT PROGRAM, V12, P17
   Back RJR, 1999, ACTA INFORM, V36, P295, DOI 10.1007/s002360050163
   BACK RJR, 1989, LECT NOTES COMPUT SC, V366, P199
   CHEN W, 1990, SCI COMPUT PROGRAM, V15, P1, DOI 10.1016/0167-6423(90)90042-C
   Cohen E, 2000, LECT NOTES COMPUT SC, V1837, P45
   Desharnais J, 2006, ACM T COMPUT LOG, V7, P798, DOI 10.1145/1183278.1183285
   Dijkstra E. W., 1976, A Discipline of Pro-gramming
   Floyd R.W., 1967, P S APPL MATH, V19, P19
   Gries D., 1981, Texts and Monographs in Computer Science
   Höfner P, 2008, ELECTRON NOTES THEOR, V201, P197, DOI 10.1016/j.entcs.2008.02.021
   Höfner P, 2007, LECT NOTES ARTIF INT, V4603, P279
   Höfner P, 2006, LECT NOTES COMPUT SC, V4136, P222
   KOZEN D, 1994, INFORM COMPUT, V110, P366, DOI 10.1006/inco.1994.1037
   Kozen D, 1997, ACM T PROGR LANG SYS, V19, P427, DOI 10.1145/256167.256195
   Meinicke L, 2008, ELECTRON NOTES THEOR, V201, P177, DOI 10.1016/j.entcs.2008.02.020
   Möller B, 2007, SCI COMPUT PROGRAM, V65, P195, DOI 10.1016/j.scico.2006.01.010
   NELSON G, 1989, ACM T PROGR LANG SYS, V11, P517, DOI 10.1145/69558.69559
   Solin K, 2007, LECT NOTES COMPUT SC, V4576, P337, DOI 10.1007/978-3-540-73445-1_24
   Solin K, 2006, LECT NOTES COMPUT SC, V4014, P397, DOI 10.1007/11783596_23
   Solin K, 2006, LECT NOTES COMPUT SC, V4136, P373
   von Wright J, 2004, SCI COMPUT PROGRAM, V51, P23, DOI 10.1016/j.scico.2003.09.002
   von Wright J, 2002, LECT NOTES COMPUT SC, V2386, P233
   [No title captured]
NR 28
TC 10
Z9 10
U1 0
U2 0
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 1
PY 2009
VL 74
IS 8
SI SI
BP 654
EP 668
DI 10.1016/j.scico.2007.11.004
PG 15
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 454GZ
UT WOS:000266671700008
DA 2024-07-18
ER

PT J
AU Cabot, J
   Teniente, E
AF Cabot, J.
   Teniente, E.
TI Transformation techniques for OCL constraints
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT Model Transformation Track held at the 21st Annual ACM Symposium on
   Applied Computing
CY APR 23-27, 2006
CL Dijon, FRANCE
SP ACM
DE OCL; integrity constraints; transformation
AB Constraints play a key role in the definition of conceptual schemas. In the UML, constraints are usually specified by means of invariants written in the OCL. However, due to the high expressiveness of the OCL, the designer has different syntactic alternatives to express each constraint. The techniques presented in this paper assist the designer during the definition of the constraints by means of generating equivalent alternatives for the initially defined ones. Moreover, in the context of the MDA, transformations between these different alternatives are required as part of the PIM-to-PIM, PIM-to-PSM or PIM-to-code transformations of the original conceptual schema. (c) 2007 Elsevier B.V. All rights reserved.
C1 [Cabot, J.] Univ Oberta Catalunya, E-08018 Barcelona, Spain.
   [Teniente, E.] Univ Politecn Cataluna, Dept Lleguatges & Sist Informat, E-08034 Barcelona, Spain.
C3 UOC Universitat Oberta de Catalunya; Universitat Politecnica de
   Catalunya
RP Cabot, J (corresponding author), Univ Oberta Catalunya, Rambla Poblenou 156, E-08018 Barcelona, Spain.
EM jcabot@uoc.edu
RI Teniente, Ernest/L-4313-2014; Cabot, Jordi/P-7723-2015
OI Cabot, Jordi/0000-0003-2418-2489
CR [Anonymous], 1999, Graphs, Networks and Algorithm
   [Anonymous], PTC031014 OMG
   BRUCKER AD, 2006, 525 ETH
   CABOT J, 2006, P 2006 ACM S APPL CO, P1196
   CABOT J, TOOL TRANSFORMATION
   Cabot J, 2006, LECT NOTES COMPUT SC, V4001, P81, DOI 10.1007/11767138_7
   Cabot J, 2006, LECT NOTES COMPUT SC, V4066, P256
   CORREA A, 2006, SOFTWARE SYSTEMS MOD, V6
   *DRESD, DRESD OCL TOOLK
   Giese M, 2005, LECT NOTES COMPUT SC, V3713, P309, DOI 10.1007/11557432_23
   Gogolla M, 2002, LECT NOTES COMPUT SC, V2263, P85
   HOLT J, 2004, IEEE, pCH9
   *ISO, 1982, ISOTC97SC5WG3
   LEDRU Y, 2004, CAISE WORKSH RIG, V1, P329
   Markovic SA, 2005, LECT NOTES COMPUT SC, V3713, P280, DOI 10.1007/11557432_21
   McAllister A, 1998, DATA KNOWL ENG, V27, P255, DOI 10.1016/S0169-023X(98)00007-X
   *OMG, 2005, AD20050302 OMG
   OMG, 2003, MDA GUID VERS 1 0 1
   *OMG, 2003, FORMAL030502 OMG
   OMG, 2003, Tech. rep. ptc/03-08-02
   Suny┬u┬ G., 2001, LNCS, V2185, P134
NR 21
TC 33
Z9 34
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 1
PY 2007
VL 68
IS 3
BP 179
EP 195
DI 10.1016/j.scico.2007.05.001
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 243BZ
UT WOS:000251771200005
OA Green Accepted, Green Published
DA 2024-07-18
ER

PT J
AU Ouyang, C
   Verbeek, E
   van der Aalst, WMP
   Breutel, S
   Dumas, M
   ter Hofstede, AHM
AF Ouyang, Chun
   Verbeek, Eric
   van der Aalst, Wil M. P.
   Breutel, Stephan
   Dumas, Marlon
   ter Hofstede, Arthur H. M.
TI Formal semantics and analysis of control flow in WS-BPEL
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE business process modeling; Web services; BPEL; tool-based verification;
   Petri nets
AB Web service composition refers to the creation of new (Web) services by combining functionalities provided by existing ones. A number of domain-specific languages for service composition have been proposed, with consensus being formed around a process-oriented language known as WS-BPEL (or BPEL). The kernel of BPEL consists of simple communication primitives that may be combined using control-flow constructs expressing sequence, branching, parallelism, synchronization, etc. We present a comprehensive and rigorously defined mapping of BPEL constructs onto Petri net structures, and use this for the analysis of various dynamic properties related to unreachable activities, conflicting messages, garbage collection, conformance checking, and deadlocks and lifelocks in interaction processes. We use a mapping onto Petri nets because this allows us to use existing theoretical results and analysis tools. Unlike approaches based on finite state machines, we do not need to construct the state space, and can use structural analysis (e.g., transition invariants) instead. We have implemented a tool that translates BPEL processes into Petri nets and then applies Petri-net-based analysis techniques. This tool has been tested on different examples, and has been used to answer a variety of questions. (c) 2007 Elsevier B.V. All rights reserved.
C1 Queensland Univ Technol, Fac Informat Technol, Brisbane, Qld 4001, Australia.
   Eindhoven Univ Technol, Dept Math & Comp Sci, NL-5600 MB Eindhoven, Netherlands.
C3 Queensland University of Technology (QUT); Eindhoven University of
   Technology
RP Ouyang, C (corresponding author), Queensland Univ Technol, Fac Informat Technol, GPO Box 2434, Brisbane, Qld 4001, Australia.
EM c.ouyang@qut.edu.au; h.m.w.verbeek@tm.tue.nl; w.m.p.v.d.aalst@tm.tue.nl;
   sw.breutel@ut.edu.au; m.dumas@qut.edu.au; a.terhofstede@qut.edu.au
RI van der Aalst, Wil/G-1248-2011; Dumas, Marlon/H-2757-2015; ter Hofstede,
   Arthur/I-9787-2012
OI van der Aalst, Wil/0000-0002-0955-6940; Dumas,
   Marlon/0000-0002-9247-7476; Ouyang, Chun/0000-0001-7098-5480; Verbeek,
   Eric/0000-0002-1658-9679; ter Hofstede, Arthur/0000-0002-2730-0201
CR Alonso G., 2003, Web services: Concepts, architectures and applications
   Andrews Tony., 2003, Business process execution language for web services
   [Anonymous], 2002, Workflow management: models, methods, and systems
   Arkin A., 2005, WEB SERVICES BUSINES
   BILLINGTON J, 1999, LECT NOTES COMPUTER, V1605
   Brandle M., 2003, THESIS HUMBOLDT U BE
   Casati F, 2001, INFORM SYST, V26, P143, DOI 10.1016/S0306-4379(01)00014-X
   DEHNERT J, 2003, THESIS TU BERLIN BER
   FARAHBOD R, 2004, SFUCMPTTR200403 SIM
   Ferrara A., 2004, Proceedings of the 2nd International Conference on Service-Oriented Computing, ICSOC '04, P242
   FISTEUS JA, 2004, P 5 INT C EL COMM WE, V3180, P76
   Foster H, 2005, 2005 IEEE International Conference on Web Services, Vols 1 and 2, Proceedings, P95, DOI 10.1145/1117696.1117716
   Foster H, 2003, 18TH IEEE INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING, PROCEEDINGS, P152, DOI 10.1109/ASE.2003.1240303
   Fu X, 2004, LECT NOTES COMPUT SC, V3114, P510
   Fu X., 2004, P 13 INT C WORLD WID, P621
   Hinz S, 2005, LECT NOTES COMPUT SC, V3649, P220, DOI 10.1007/11538394_15
   Kiepuszewski B, 2003, ACTA INFORM, V39, P143, DOI 10.1007/s00236-002-0105-4
   KOSHKINA M, 2003, CS200311 YORK U
   Lohmann N, 2006, LECT NOTES COMPUT SC, V4102, P17
   Martens A, 2005, LECT NOTES COMPUT SC, V3442, P19, DOI 10.1007/978-3-540-31984-9_3
   Martinez J., 1982, Informatik-Fachbrichte, V52, P301
   MURATA T, 1989, P IEEE, V77, P541, DOI 10.1109/5.24143
   Ouyang C, 2005, LECT NOTES COMPUT SC, V3826, P484
   OUYANG C, 2005, BPM0515 WSBPEL
   OUYANG C, 2005, TOOLS SESS 2 INT WOR
   Peterson J.L., 1981, Petri Net Theory and the Modeling of Systems
   STALHL C, 2005, 188 BPEL HUMB U BERL
   van der Aalst WMP, 2005, INFORM SYST, V30, P245, DOI 10.1016/j.is.2004.02.002
   van der Aalst WMP, 1997, LECT NOTES COMPUT SC, V1248, P407
   VANDERAALST WMP, 2008, IN PRESS MIDDLEWARE
   VanGlabbeek RJ, 1996, J ACM, V43, P555, DOI 10.1145/233551.233556
   VERBEEK H., 2005, Proceedings of the Second International Workshop on Applications of Petri Nets to Coordination, Workow and Business Process Management, P59
   Verbeek HMW, 2001, COMPUT J, V44, P246, DOI 10.1093/comjnl/44.4.246
   VERBEEK HMW, 2006, BETA WORKING PAPER S, V156
NR 34
TC 161
Z9 199
U1 0
U2 15
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUL 1
PY 2007
VL 67
IS 2-3
BP 162
EP 198
DI 10.1016/j.scico.2007.03.002
PG 37
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 192AW
UT WOS:000248174100002
OA Green Submitted, Bronze, Green Published
DA 2024-07-18
ER

PT J
AU Shehata, M
   Eberlein, A
   Fapojuwo, A
AF Shehata, Mohamed
   Eberlein, Armin
   Fapojuwo, Abraham
TI Using semi-formal methods for detecting interactions among smart homes
   policies
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE feature interaction; policies; semi-formal methods; smart homes
AB Feature Interaction is a problem mostly considered in the telecommunications domain. Many solutions for detecting interactions between telephony features have been reported. In this paper, we investigate the feature interaction problem beyond the traditional telecommunications domain and look at interactions between policies in other domains. We propose the use of semi-formal methods for detecting interactions between policies in the smart homes domain. The novelty of this research is threefold: firstly, a six step semi-formal approach, called IRIS (Identifying Requirements Interactions using Semi-formal methods), for detecting interactions is presented. A major component within IRIS, which is an interaction taxonomy, is also presented. Secondly, we extend the scope of the problem of feature interactions beyond telecommunication features and investigate interactions between policies in the smart homes domain. Thirdly, in order to show how IRIS is used to detect interactions between policies, a case study of the smart homes domain is conducted. A complete description of the results obtained is also provided. Our approach was successfully applied to the smart homes domain and was able to discover 83 interactions among 35 user policies using only 525 pairwise comparisons as opposed to 630 a human expert would have to do. These results support the paper's main claim of being able to use the semiformal approach IRIS to detect interactions between policies. Furthermore, these results are to date the most complete publication of interactions between policies in the smart homes domain. (c) 2007 Elsevier B.V. All rights reserved.
C1 Univ Calgary, Dept Elect & Comp Engn, Calgary, AB, Canada.
   Amer Univ Sharjah, Dept Comp Engn, Sharjah, U Arab Emirates.
   Benha Univ, Shoubra Fac Engn, Dept Elect & Comp Engn, Cairo, Egypt.
C3 University of Calgary; American University of Sharjah; Egyptian
   Knowledge Bank (EKB); Benha University
RP Shehata, M (corresponding author), Univ Calgary, Dept Elect & Comp Engn, 2500 Univ Dr NW, Calgary, AB, Canada.
EM Msshchat@ucalgary.ca; Eberlein@ucalgary.ca; Fapojuwo@ucalgary.ca
RI Shehata, Mohamed S./AER-6269-2022
OI Shehata, Mohamed S./0000-0002-8464-8650; Eberlein,
   Armin/0000-0003-1104-8424
CR ALEXANDER I, 2001, GET MORE DOOR DXL LI
   Amer M, 2000, FEATURE INTERACTIONS IN TELECOMMUNICATIONS AND SOFTWARE SYSTEMS VI, P94
   Amyot D., 2003, FEATURE INTERACTIONS
   AMYOT D, 2002, 3 SDL MSC WORKSH SAM, V2599
   [Anonymous], 2000, FEATURE INTERACTIONS
   [Anonymous], 1989, Modern structured analysis
   BANDARA AK, 2003, 4 IEEE WORKSH POL NE
   Blair L, 2005, FEATURE INTERACTIONS IN TELECOMMUNICATIONS AND SOFTWARE SYSTEMS VIII, P39
   Booch Grady, 1999, UNIFIED MODELING LAN, DOI DOI 10.1007/3-540-40011-7_10
   BOUMA L, 1994, FEATURE INTERACTIONS
   Briere D., 2003, SMART HOMES DUMMIES
   Calder M, 2003, COMPUT NETW, V41, P115, DOI 10.1016/S1389-1286(02)00352-3
   CAMERON EJ, 1993, IEEE COMMUN MAG, V31, P64, DOI 10.1109/35.199613
   Cheng K.E., 1995, FEATURE INTERACTIONS
   Damianou N., 2000, Ponder: A language for specifying security and management policies for distributed systems
   De Marco A, 2003, FEATURE INTERACTIONS IN TELECOMMUNICATIONS AND SOFTWARE SYSTEMS VII, P247
   DeMarco T., 1978, STRUCTURED ANAL SYST
   DINI P, 1997, FEATURE INTERACTIONS
   EDGE M, 2000, POTENTIAL SMART HOME, V10
   Fu Q, 2000, COMPUT NETW, V32, P433, DOI 10.1016/S1389-1286(00)00009-8
   HEISEL M, 2000, LANGUAGE CONSTRUCTS
   JACKSON D, 1996, COMPUTER         APR, P21
   Kimbler K., 1998, FEATURE INTERACTIONS
   KOLBERG M, 2003, IEEE COMMUNICATIONS, V41
   Lupu EC, 1999, IEEE T SOFTWARE ENG, V25, P852, DOI 10.1109/32.824414
   LUTFIYYA HL, 2003, P 4 IEEE INT WORKSH
   MICHAEL JB, 2002, P 3 INT WORKSH POL D
   PLATH M, 2000, 6 INT WORKSH FEAT IN
   Reiff-Marganiec S, 2003, FEATURE INTERACTIONS IN TELECOMMUNICATIONS AND SOFTWARE SYSTEMS VII, P239
   SHEHATA M, 2003, ECBS 2003 10 IEEE S
   SHEHATA M, 2004, SE 2004 IASTED INT C
   SHEHATA M, 2002, 6 IASTED INT C SOFTW
   SHEHATA M, 2004, ECBS 2004 11 IEEE IN
   SLOMAN M, 2001, P 2 INT WORKSH POL D
   Smith RalphLee., 1988, Smart House: The Coming Revolution in Housing
   VELTHUIJSEN G, 1992, INT WORKSH FEAT INT
   VERMA M, 2004, P 5 IEEE INT WORKSH
   Yee G, 2003, FEATURE INTERACTIONS IN TELECOMMUNICATIONS AND SOFTWARE SYSTEMS VII, P231
   ZAVE P, 1999, P 19 INT NATO SUMM S
NR 39
TC 21
Z9 24
U1 0
U2 6
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUL 1
PY 2007
VL 67
IS 2-3
BP 125
EP 161
DI 10.1016/j.scico.2006.11.002
PG 37
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 192AW
UT WOS:000248174100001
DA 2024-07-18
ER

PT J
AU Cutumisu, M
   Onuczko, C
   McNaughton, M
   Roy, T
   Schaeffer, J
   Schumacher, A
   Siegel, J
   Szafron, D
   Waugh, K
   Carbonaro, M
   Duff, H
   Gillis, S
AF Cutumisu, Maria
   Onuczko, Curtis
   McNaughton, Matthew
   Roy, Thomas
   Schaeffer, Jonathan
   Schumacher, Allan
   Siegel, Jeff
   Szafron, Duane
   Waugh, Kevin
   Carbonaro, Mike
   Duff, Harvey
   Gillis, Stephanie
TI ScriptEase: A generative/adaptive programming paradigm for game
   scripting
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE generative pattern; computer game; scripting language; adaptive
   programming; game scripting; game authoring; game agent
ID DESIGN PATTERNS
AB The traditional approach to implementing interactions between a player character (PC) and objects in computer games is to write scripts in a procedural scripting language. These scripts are usually so complex that they must be written by a computer programmer rather than by the author of the game story. This interruption in the game story authoring process has two distinct disadvantages: it increases the cost of game production and it introduces a disconnect between the author's intentions and the interactions produced from the programmer's written scripts. We introduce a mechanism to solve these problems. We show that game authors (non-programmers) can generate the necessary scripts for implementing meaningful interactions between the PC and game objects using a three-step process. In the first step, the author uses a generative pattern (concept) to create a high-level description of a commonly occurring game scenario. In the second step, the author uses a standard set of adaptation operations to customize the high-level description to the particular circumstances of the story that is being told. In the third step, the author presses a button that automatically generates scripting code from the adapted pattern. We describe the results of three studies in which a combined total of 56 game story authors used this three-step process to construct Neverwinter Nights game stories, using a tool called ScriptEase. We believe that this generative/adaptive process is the key to future game story scripting. More generally, this article advocates the development of adaptive programming as an alternative to current constructive programming techniques, as well as the application of adaptive programming in many domains. (c) 2007 Elsevier B.V. All rights reserved.
C1 Univ Alberta, Dept Comp Sci, Edmonton, AB T6G 2E8, Canada.
   Univ Alberta, Fac Educ, Edmonton, AB T6G 2G5, Canada.
C3 University of Alberta; University of Alberta
RP Szafron, D (corresponding author), Univ Alberta, Dept Comp Sci, Edmonton, AB T6G 2E8, Canada.
EM duane@cs.ualberta.ca
RI Cutumisu, Maria/JZD-3707-2024
OI Cutumisu, Maria/0000-0003-2475-9647
CR *ALIC V2 0, 2006, LEARN PROGR INT 3D G
   *AN CORP, 2006, AN GAM
   [Anonymous], 2004, Patterns in game design (game development series)
   Bosch J, 1998, J OBJECT-ORIENT PROG, V11, P18
   Budinsky FJ, 1996, IBM SYST J, V35, P151, DOI 10.1147/sj.352.0151
   Chase C.I., 1985, The ninth mental measurements yearbook, P1631
   Cordy JR, 2002, INFORM SOFTWARE TECH, V44, P827, DOI 10.1016/S0950-5849(02)00104-0
   Cutumisu M., 2006, 28th International Conference on Software Engineering Proceedings, P132, DOI 10.1145/1134285.1134305
   Cutumisu M, 2006, IEEE INTELL SYST, V21, P19, DOI 10.1109/MIS.2006.92
   CZARNECKI K, 2000, GENERATIVE PROGRAMMI, P503
   DAWSON B, 2002, GAME SCRIPTING PYTHO
   *GAM EL, 2006, 3D GRAPH ENG TOOLS E
   Gamma Erich., 1994, DESIGN PATTERNS
   GUO Z, 2005, 10 INT WORKSH HIGH L
   *INT BACC ORG, INT BACC PROGR
   KREIMEIER B, 2004, GAME DESIGN PATTERNS
   Lieberherr K., 1996, ADAPTIVE OBJECT ORIE
   *LUA, 2006, PROGR LANG
   MacDonald S, 2002, PARALLEL COMPUT, V28, P1663, DOI 10.1016/S0167-8191(02)00190-4
   MACDONALD S, 2002, 17 IEEE INT C AUT SO, P23
   McNaughton M, 2004, 19TH INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING, PROCEEDINGS, P88
   *PYTH, 2006, PROGR LANG
   RICH C, 1988, IEEE COMPUT, V21, P40
   Szafron D., 2005, INTERACTIVE MULTIMED, V7, P13
   Torrance E.P., 1998, TORRANCE TESTS CREAT
   Torrance E.P., 1992, TORRANCE TESTS CREAT
   Torrance E.P., 2003, TORRANCE TESTS CREAT
   Torrance E.P., 1990, TORRANCE TESTS CREAT
   Wile D. S., 2001, Journal of Computing and Information Technology - CIT, V9, P263, DOI 10.2498/cit.2001.04.01
   ZACHARY RA, 1985, J CLIN PSYCHOL, V41, P820, DOI 10.1002/1097-4679(198511)41:6<820::AID-JCLP2270410616>3.0.CO;2-X
   ZACHARY RA, 2003, SHIPLEY I LIVING SCA
NR 31
TC 13
Z9 19
U1 0
U2 5
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 1
PY 2007
VL 67
IS 1
BP 32
EP 58
DI 10.1016/j.scico.2007.01.005
PG 27
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 187HK
UT WOS:000247838100003
DA 2024-07-18
ER

PT J
AU Clarisó, R
   Cortadella, J
AF Clariso, Robert
   Cortadella, Jordi
TI The octahedron abstract domain
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 11th International Static Analysis Symposium (SAS 2004)
CY AUG 26-28, 2004
CL Verona, ITALY
DE abstract interpretation; numerical abstract domains; relational abstract
   domains; convex polyhedra
ID VERIFICATION
AB An interesting area in static analysis is the study of numerical properties. Complex properties can be analyzed using abstract interpretation, provided that an adequate abstract domain is defined. Each domain can represent and manipulate a family of properties, providing a different trade-off between the precision and complexity of the analysis. The contribution of this paper is a new numerical abstract domain called octahedron that represents constraints of the form (Sigma x(i) - Sigma x(j) >= k). The implementation of octahedra is based on a new kind of decision diagram called Octahedron Decision Diagrams (OhDD). (c) 2006 Elsevier B.V. All rights reserved.
C1 Univ Oberta Catalunya, Barcelona, Spain.
   Univ Politecn Cataluna, Dept Llenguatges & Sistemes Informat, Barcelona, Spain.
C3 UOC Universitat Oberta de Catalunya; Universitat Politecnica de
   Catalunya
RP Clarisó, R (corresponding author), Univ Oberta Catalunya, Barcelona, Spain.
EM rclariso@uoc.edu
RI Cortadella, Jordi/F-1886-2013; Clariso, Robert/B-5450-2009
OI Cortadella, Jordi/0000-0001-8114-250X; Clariso,
   Robert/0000-0001-9639-0186
CR ALUR R, 1994, THEOR COMPUT SCI, V126, P183, DOI 10.1016/0304-3975(94)90010-8
   Asarin E, 1997, LECT NOTES COMPUT SC, V1201, P346, DOI 10.1007/BFb0014737
   Avis D, 2002, MATHEMATICAL SOFTWARE, PROCEEDINGS, P350, DOI 10.1142/9789812777171_0037
   BAGNARA R, 1997, THESIS U PISA
   Behrmann G., 1999, Computer Aided Verification. 11th International Conference, CAV'99. Proceedings (Lecture Notes in Computer Science Vol.1633), P341
   BRYANT RE, 1986, IEEE T COMPUT, V35, P677, DOI 10.1109/TC.1986.1676819
   CHERNIKOVA N, 1964, USSR COMP MATH MATH, V6, P282
   Clarisó R, 2004, ASIA S PACIF DES AUT, P628, DOI 10.1109/ASPDAC.2004.1337668
   CLARISO R, 1977, P ACM S PRINC PROGR, P238
   CLARISO R, 2005, P INT C APPL CONC SY, P122
   CLARISO R, 1978, P ACM S PRINC PROGR, P84
   Dill D. L., 1990, Automatic Verification Methods for Finite State Systems. International Workshop Proceedings, P197
   Dor Nurit., 2003, PLDI 03, P155, DOI [10.1145/781131.781149, DOI 10.1145/781131.781149]
   FERNANDEZ F, 1988, 437 IRISA
   Fujita M, 1997, FORM METHOD SYST DES, V10, P149, DOI 10.1023/A:1008647823331
   GERBER AJ, 1977, SIGOPS OPERATING SYS, V11, P6
   Halbwachs N, 1997, FORM METHOD SYST DES, V11, P157, DOI 10.1023/A:1008678014487
   HENZINGER TA, 1991, THESIS STANFORD U
   MAURAS C, 1996, 3 WORKSH SYNCHR PROG
   MCMULLEN P, 1970, MATHEMATIKA, V17, P179, DOI 10.1112/S0025579300002850
   MINATO S, 1993, ACM IEEE D, P272
   Miné A, 2001, EIGHTH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P310, DOI 10.1109/WCRE.2001.957836
   MOLLER J, 1999, COMPUTER SCI LOGIC
   Muller DavidE., 1959, P INT S THEORY SWITC, P204
   MURATA T, 1977, IEEE T AUTOMAT CONTR, V22, P412, DOI 10.1109/TAC.1977.1101509
   PIGUET C, 1998, Patent No. 5748522
   RUDELL R, 1993, 1993 IEEE/ACM INTERNATIONAL CONFERENCE ON COMPUTER-AIDED DESIGN - DIGEST OF TECHNICAL PAPERS, P42, DOI 10.1109/ICCAD.1993.580029
   Sankaranarayanan S, 2005, LECT NOTES COMPUT SC, V3385, P25
   Simon A, 2003, LECT NOTES COMPUT SC, V2664, P71, DOI 10.1007/3-540-45013-0_7
   Sohn K., 1991, Proceedings of the Tenth ACM SIGACT-SIGMOD-SIGART Symposium on Principles of Database Systems, P216, DOI 10.1145/113413.113433
   Somenzi Fabio., Cudd: Colorado university decision diagram package
   VANGELDER A, 1990, PROCEEDINGS OF THE NINTH ACM SIGACT-SIGMOD-SIGART SYMPOSIUM ON PRINCIPLES OF DATABASE SYSTEMS, P47, DOI 10.1145/298514.298541
   VERGE HL, 1992, 635 IRISA
   Wang F, 2000, LECT NOTES COMPUT SC, V1785, P157
   WANG F, 2004, P INT C COMP AID VER
NR 35
TC 30
Z9 33
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 1
PY 2007
VL 64
IS 1
BP 115
EP 139
DI 10.1016/j.scico.2006.03.009
PG 25
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 118ES
UT WOS:000242925700007
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Cohen, A
   Donadio, S
   Garzaran, MJ
   Herrmann, C
   Kiselyov, O
   Padua, D
AF Cohen, Albert
   Donadio, Sebastien
   Garzaran, Maria-Jesus
   Herrmann, Christoph
   Kiselyov, Oleg
   Padua, David
TI In search of a program generator to implement generic transformations
   for high-performance computing
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 1st MetalOCaml Workshop
CY OCT, 2004
CL Vancouver, CANADA
SP Natl Sci Fdn
DE multi-stage programming; loop transformations; adaptive libraries;
   application-specific program generators
AB The quality of compiler-optimized code for high-performance applications is far behind what optimization and domain experts can achieve by hand. Although it may seem surprising at first glance, the performance gap has been widening over time, due to the tremendous complexity increase in microprocessor and memory architectures, and to the rising level of abstraction of popular programming languages and styles. This paper explores in-between solutions, neither fully automatic nor fully manual ways to adapt a computationally intensive application to the target architecture. By mimicking complex sequences of transformations useful to optimize real codes, we show that generative programming is a practical means to implement architecture-aware optimizations for high-performance applications.
   This work explores the promises of generative programming languages and techniques for the high-performance computing expert. We show that complex, architecture-specific optimizations can be implemented in a type-safe, purely generative framework. Peak performance is achievable through the careful combination of a high-level, multi-stage evaluation language - MetaOCaml with low-level code generation techniques. Nevertheless, our results also show that generative approaches for high-performance computing do not come without technical caveats and implementation barriers concerning productivity and reuse. We describe these difficulties and identify ways to hide or overcome them, from abstract syntaxes to heterogeneous generators of code generators, combining high-level and type-safe multi-stage programming with a back-end generator of imperative code. (c) 2006 Elsevier B.V. All rights reserved.
C1 INRIA Futurs, ALCHEMY Grp, Orsay, France.
   Univ Versailles, PRiSM, F-78000 Versailles, France.
   Univ Illinois, DCS, Urbana, IL 61801 USA.
   Univ Passau, FMI, D-8390 Passau, Germany.
   FNMOC, Monterey, CA USA.
C3 Universite Paris Saclay; University of Illinois System; University of
   Illinois Urbana-Champaign; University of Passau
RP Cohen, A (corresponding author), INRIA Futurs, ALCHEMY Grp, Orsay, France.
EM albert.cohen@inria.fr
RI Padua, David/AAI-7326-2020
CR August DI, 1998, CONF PROC INT SYMP C, P227, DOI 10.1109/ISCA.1998.694777
   Bastoul C, 2004, 13TH INTERNATIONAL CONFERENCE ON PARALLEL ARCHITECTURE AND COMPILATION TECHNIQUES, PROCEEDINGS, P7, DOI 10.1109/PACT.2004.1342537
   BASTOUL C, 2003, LNCS, P23
   BECKMANN O, 2003, P 2003 DAGST WORKSH
   Bik AJC, 2002, INT J PARALLEL PROG, V30, P65, DOI 10.1023/A:1014230429447
   BOULET P, SPPOC SYMBOLIC PARAM
   Calcagno C, 2004, LECT NOTES COMPUT SC, V2986, P79
   CALCAGNO C, 2003, ACM SIGPLAN SIGSOFT, P57
   CARETTE J, 2005, LNCS, V3676
   CHAUHAN A, 2001, ACM INT C SUP ICS 04, P92
   Cohen A, 2004, LECT NOTES COMPUT SC, V3149, P292
   COHEN A, 2005, ACM INT C SUP JUN, P151
   Cooper KD, 2002, J SUPERCOMPUT, V23, P7, DOI 10.1023/A:1015729001611
   Darte A., 2000, SCHEDULING AUTOMATIC
   De Rose L, 1999, ACM T PROGR LANG SYS, V21, P286, DOI 10.1145/316686.316693
   EKHARDT J, 2005, LNCS, V3676
   FEAUTRIER P, 1992, INT J PARALLEL PROG, V21, P389, DOI 10.1007/BF01379404
   FEAUTRIER P, 1988, RAIRO-RECH OPER, V22, P243
   Feautrier P., 1988, P 2 INT C SUPERCOMPU, P429
   Frigo M, 1998, INT CONF ACOUST SPEE, P1381, DOI 10.1109/ICASSP.1998.681704
   Herrmann C. A., 2000, Parallel Processing Letters, V10, P239, DOI 10.1016/S0129-6264(00)00023-8
   Herrmann C. A., 1999, Journal of Functional Programming, V9, P279, DOI 10.1017/S0956796899003287
   Herrmann CA, 2005, PARALLEL PROCESS LET, V15, P305, DOI 10.1142/S0129626405002234
   KELLY W, 1996, CSTR3725 U MAR
   Kennedy K., 2000, Proceedings 14th International Parallel and Distributed Processing Symposium. IPDPS 2000, P297, DOI 10.1109/IPDPS.2000.845999
   Kennedy Ken, 2002, Optimizing Compilers for Modern Architectures
   Kiselyov Oleg., 2004, EMSOFT 04, P249
   Kisuki T., 2000, P CPC 10 COMP PAR CO, P35
   Lattner C, 2004, INT SYM CODE GENER, P75, DOI 10.1109/CGO.2004.1281665
   LENGAUER C, 2003, LNCS, V3016
   Li XM, 2004, INT SYM CODE GENER, P111
   LIANG S, 1995, ACM S PRINC PROGR LA, P333
   Llosa J, 1996, PROCEEDINGS OF THE 1996 CONFERENCE ON PARALLEL ARCHITECTURES AND COMPILATION TECHNIQUES (PACT '96), P80, DOI 10.1109/PACT.1996.554030
   LOECHNER V, INT J PARALLEL PROGR, V25
   Merrill Jason., 2003, Proceedings of the GCC Developers Summit May 25-27, 2003, Ottawa, Ontario Canada, P171
   PARELLO D, 2004, ACM SUP 04 PITTSB PE, P15
   Poletto M, 1999, ACM T PROGR LANG SYS, V21, P324, DOI 10.1145/316686.316697
   PUGH W, 1992, COMMUN ACM, V35, P102, DOI 10.1145/135226.135233
   Püschel M, 2004, INT J HIGH PERFORM C, V18, P21, DOI 10.1177/1094342004041291
   QUINLAN DJ, 2003, LNCS, V2958, P524
   Rauchwerger L, 1999, IEEE T PARALL DISTR, V10, P160, DOI 10.1109/71.752782
   Smith M., 2000, Accounting, Organisations and Society, P1
   Taha W, 2003, ACM SIGPLAN NOTICES, V38, P26, DOI 10.1145/640128.604134
   Taha W., 2000, PEPM, P34, DOI DOI 10.1145/328690.328697
   TURNER DA, 1979, SOFTWARE PRACT EXPER, V9, P31, DOI 10.1002/spe.4380090105
   van Deursen A, 2000, ACM SIGPLAN NOTICES, V35, P26, DOI 10.1145/352029.352035
   Veldhuizen T., 1995, C++ Report, V7, P36
   VELDHUIZEN T, 1998, SIAM WORKSH OBJ OR M, P21
   Whaley RC, 2001, PARALLEL COMPUT, V27, P3, DOI 10.1016/S0167-8191(00)00087-9
   WOLF ME, 1992, THESIS STANFORD U
   YOTOV K, 2003, ACM S PROGR LANG DES, P63
NR 51
TC 22
Z9 24
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP
PY 2006
VL 62
IS 1
BP 25
EP 46
DI 10.1016/j.scico.2005.10.013
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 066UL
UT WOS:000239255500003
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Begel, A
   Graham, SL
AF Begel, Andrew
   Graham, Susan L.
TI XGLR - an algorithm for ambiguity in programming languages
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 4th Workshop on Language Descriptions,Tools and Applications (LDTA 04)
CY 2004
CL Barcelona, SPAIN
DE GLR; XGLR; embedded languages; harmonia; programming-by-voice
AB Automatically generated lexers and parsers for programming languages have a long history. Although they are well suited for many languages, many widely used generators, among them Flex and Bison, fail to handle input stream ambiguities that arise in embedded languages, in legacy languages, and in programming by voice. We have developed Blender, a combined lexer and parser generator that enables designers to describe many classes of embedded languages and to handle ambiguities in spoken input and in legacy languages. We have enhanced the incremental lexing and parsing algorithms in our Harmonia framework to analyse lexical, syntactic and semantic ambiguities. The combination of better language description and enhanced analysis provides a powerful platform on which to build the next generation of language analysis tools. (c) 2006 Elsevier B.V. All rights reserved.
C1 Univ Calif Berkeley, Div Comp Sci, EECS, Berkeley, CA 94720 USA.
C3 University of California System; University of California Berkeley
RP Begel, A (corresponding author), 1 Microsoft Way, Redmond, WA 98052 USA.
EM Andrew.Begel@microsoft.com; graham@cs.berkeley.edu
RI Begel, Andrew/AAP-9630-2020
OI Begel, Andrew/0000-0002-7425-4818
CR Aycock J., 2002, Journal of Computing and Information Technology - CIT, V10, P55, DOI 10.2498/cit.2002.01.04
   Aycock J, 2001, SOFTWARE PRACT EXPER, V31, P803, DOI 10.1002/spe.390
   BEGEL A, 2005, EECS20068
   BEGEL A, 2005, IEEE S VIS LANG HUM
   Begel Andrew, 2005, AVIOS SPEECH TECHN S
   BOSHERNITSAN M, UCBCSD011149 EECS
   CORBETT RP, 1985, THESIS U CALIFORNIA
   Dean TR, 2003, CASCON '03, P266
   DONNELLY C, 1990, BISON YACC COMPATIBL
   FELDMAN SI, 1979, SIGPLAN 79 P 1979 SI, P98
   Gould C, 2004, PROC INT CONF SOFTW, P645, DOI 10.1109/ICSE.2004.1317486
   Johnson StevenC., 1979, UNIX PROGRAMMERS MAN, V2, P353
   Klint P., 1993, ACM Transactions on Software Engineering and Methodology, V2, P176, DOI 10.1145/151257.151260
   Koppler R, 1997, SOFTWARE PRACT EXPER, V27, P637, DOI 10.1002/(SICI)1097-024X(199706)27:6<637::AID-SPE99>3.0.CO;2-3
   Lesk M.E., 1979, UNIX PROGRAMMERS MAN, V2, P388
   McPeak S, 2004, LECT NOTES COMPUT SC, V2985, P73
   PARR TJ, 1995, SOFTWARE PRACT EXPER, V25, P789, DOI 10.1002/spe.4380250705
   Paxson V., 1988, Flex-fast lexical analyzer generator
   REKERS J, 1992, THESIS U AMSTERDAM
   SALOMON DJ, 1989, P SIGPLAN 89 C PROGR, V24, P80
   Tomita Masaru, 1986, INT SERIES ENG COMPU
   van den Brand MGJ, 2002, LECT NOTES COMPUT SC, V2304, P143
   VANDEVANTER ML, 2000, P 2 INT S CONSTR SOF, P39
   Visser Eelco., 1997, Scannerless Generalized-LR Parsing
   Visser Eelco, 1997, Syntax Definition for Language Prototyping
   Wagner TA, 1998, ACM T PROGR LANG SYS, V20, P980, DOI 10.1145/293677.293678
   Wagner TA, 1997, COMPCON IEEE, P62, DOI 10.1109/CMPCON.1997.584674
   WAGNER TA, 1997, UNPUB GEN INCREMENTA
   WAGNER TA, 1997, P 1997 ACM SIGPLAN C, P31
   WAGNER TA, 1998, UCBCSD97946
   Yelick K, 1998, CONCURRENCY-PRACT EX, V10, P825, DOI 10.1002/(SICI)1096-9128(199809/11)10:11/13<825::AID-CPE383>3.0.CO;2-H
NR 31
TC 4
Z9 4
U1 0
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD AUG
PY 2006
VL 61
IS 3
BP 211
EP 227
DI 10.1016/j.scico.2006.04.003
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 055UC
UT WOS:000238475000003
DA 2024-07-18
ER

PT J
AU Steinder, M
   Sethi, AS
AF Steinder, M
   Sethi, AS
TI A survey of fault localization techniques in computer networks
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Review
DE fault localization; event correlation; root cause analysis
ID IDENTIFICATION
AB Fault localization, a central aspect of network fault management, is a process of deducing the exact source of a failure from a set of observed failure indications. It has been a focus of research activity since the advent of modem communication systems, which produced numerous fault localization techniques. However, as communication systems evolved becoming more complex and offering new capabilities, the requirements imposed on fault localization techniques have changed as well. It is fair to say that despite this research effort, fault localization in complex communication systems remains an open research problem. This paper discusses the challenges of fault localization in complex communication systems and presents an overview of solutions proposed in the course of the last ten years, while discussing their advantages and shortcomings. The survey is followed by the presentation of potential directions for future research in this area. (C) 2004 Elsevier B.V. All rights reserved.
C1 IBM Corp, TJ Watson Res Ctr, Hawthorne, NY USA.
C3 International Business Machines (IBM)
RP IBM Corp, TJ Watson Res Ctr, Hawthorne, NY USA.
EM steinder@us.ibm.com
CR [Anonymous], 1995, IMPLEMENTATION
   [Anonymous], P 9 INT WORKSH DISTR
   Appleby K., 2002, Journal of Network and Systems Management, V10, P171, DOI 10.1023/A:1015954732370
   BAGCHI S, 2001, 12 INT WORKSH DISTR
   BIERMAN A, 2000, 2922 RFC IETF NETW W
   BOULOUTAS AT, 1994, IEEE T COMMUN, V42, P523, DOI 10.1109/TCOMM.1994.577079
   BOULOUTAS AT, 1995, J NETWORK SYSTEMS MA, V3
   Breitbart Y., 2000, Proceedings IEEE INFOCOM 2000. Conference on Computer Communications. Nineteenth Annual Joint Conference of the IEEE Computer and Communications Societies (Cat. No.00CH37064), P265, DOI 10.1109/INFCOM.2000.832196
   BROWN A, 2001, INTEGRATED NETWORK M, V7
   BRUGNONI S, 1993, INTEGRATED NETWORK M, V3
   Case J., 1990, 1157 RFC IETF NETW W
   CASE JD, 1996, 1905 RFC IETF NETW W
   Chao C. S., 2001, Journal of Network and Systems Management, V9, P183, DOI 10.1023/A:1011315125608
   COMERFORD R, 2000, IEEE SPECTRUM, V37
   COOPER GF, 1988, KSL8727 STANF U
   DECKER E, 1993, 1493 RFC IETF NETW W
   DENG RH, 1993, IFIP TRANS C, V12, P697
   DUPUY A, 1989, INTEGRATED NETWORK M, V1, P101
   DUPUY A, 1991, INTEGRATED NETWORK M, V2, P639
   ENSEL C, 1999, WORKSH OP U ASS OVUA
   FAKHOURI S, 2001, IEEE INT C CLUST COM
   FECKO M, 2001, IEEE MIL COMM C MILC
   FESTOR O, 2001, 12 INT WORKSH DISTR
   FORMAN G, 1998, 9 INT WORKSH DISTR S, P142
   Foster I, 1999, GRID: BLUEPRINT FOR A NEW COMPUTING INFRASTRUCTURE, P259
   FRONTINI M, 1991, INTEGRATED NETWORK M, V2, P519
   Gardner RD, 1998, NOMS '98 - 1998 IEEE NETWORK OPERATIONS AND MANAGEMENT SYMPOSIUM, VOLS 1-3, P713, DOI 10.1109/NOMS.1998.655211
   Gardner RD, 1996, IEEE GLOBECOM 1996 - CONFERENCE RECORD, VOLS 1-3, P136, DOI 10.1109/GLOCOM.1996.594348
   GARDNER RD, 1997, P IEEE GLOBECOM TOR
   GOLDMAN J, 1989, INTEGRATED NETWORK M, V1, P333
   GOPAL R, 2000, P NETW OP MAN S HON, P729
   Govindan R., 2000, Proceedings IEEE INFOCOM 2000. Conference on Computer Communications. Nineteenth Annual Joint Conference of the IEEE Computer and Communications Societies (Cat. No.00CH37064), P1371, DOI 10.1109/INFCOM.2000.832534
   Graham S., 2002, BUILDING WEB SERVICE
   Gruschke Boris., 1998, Proceedings of the 9th IFIP/IEEE International Workshop on Distributed Systems: Operations Management (DSOM 98), P130
   Hasan M, 1999, INTEGRATED NETWORK MANAGEMENT VI, P233, DOI 10.1109/INM.1999.770686
   HASSELMEYER P, 2001, 12 INT WORKSH DISTR
   HECKERMAN D, 1995, COMMUN ACM, V38, P27, DOI 10.1145/203330.203336
   HEGERING HG, 1993, INTEGRATED NETWORK M, V3
   Hoffner Y, 2001, COMPUT NETW, V37, P111, DOI 10.1016/S1389-1286(01)00210-9
   HONG JW, 2000, P NETW OP MAN S HON
   Hong P., 1991, Integrated Network Management, II. Proceedings of the IFIP TC6/WG6.6 Second International Symposium, P481
   Hood CS, 1997, IEEE INFOCOM SER, P1147, DOI 10.1109/INFCOM.1997.631137
   Houk K., 1995, INTEGRATED NETWORK M, P226
   *ISO, 95961 ISO
   *ISO, 1991, 101654 ISOIEC
   Jakobson G., 1993, IEEE Network, V7, P52, DOI 10.1109/65.244794
   Jakobson G., 1995, INTEGRATED NETWORK M, P290, DOI [DOI 10.1007/978-0-387-34890-2, DOI 10.1007/978-0-387-34890-2-26, 10.1007/978-0-387-34890-2-26]
   JORDAAN JF, 1993, IFIP TRANS C, V12, P683
   JOSEPH C, 1989, INTEGRATED NETWORK MANAGEMENT, 1, P627
   KAR G, 2000, P NETW OP MAN S HON
   KARKER S, 1997, J NETW SYST MANAG, V5, P109
   KATKER S, 1996, P IFIP IEEE INT C DI, P187
   Katzela I, 1995, IEEE ACM T NETWORK, V3, P753, DOI 10.1109/90.477721
   KATZELA I, 1996, THESIS COLUMBIA U NE
   KATZELA I, 1995, INTEGRATED NETWORK M, V4, P250
   KELLER A, 2000, P 5 IEEE S COMP COMM
   KITKER S, 1997, INTEGRATED NETWORK M, V5, P583
   Klemettinen M., 1999, Journal of Network and Systems Management, V7, P395, DOI 10.1023/A:1018787815779
   Kliger S., 1995, Integrated Network Management IV, P266
   KRISHNAN I, 1991, INTEGRATED NETWORK M, V2
   LAZAR A, 1997, INTEGRATED NETWORK M, V5
   LEWIS L, 1993, IFIP TRANS C, V12, P671
   Liu G, 1999, INTEGRATED NETWORK MANAGEMENT VI, P247, DOI 10.1109/INM.1999.770687
   Lo CC, 1999, COMPUT COMMUN, V22, P432, DOI 10.1016/S0140-3664(99)00045-6
   LOR KWE, 1993, IFIP TRANS C, V12, P659
   LOWECAMP B, 2001, P ACM SIGCOMM, P239
   MANSOURISAMANI M, 1997, IEE IOP BCS DISTRIBU, V4
   MCCLOGHRIE K, 1991, 1213 RFC IETF NETW W
   MEANDZIJA B, 1989, INTEGRATED NETWORK M
   MEYER JA, 1996, HDB PERCPETION COGNI, P325
   MOHAN C, 2002, P 3 VLDB WORKSH TECH
   Novaes M, 2000, LECT NOTES COMPUT SC, V1960, P169
   Nygate TA., 1995, INTEGRATED NETWORK M, P278, DOI DOI 10.1007/978-0-387-34890-2_25
   Ohsie D, 1997, INTEGRATED NETWORK MANAGEMENT V, P625
   PATEL A, 1989, INTEGRATED NETWORK M, V1, P647
   PEARL J, 1988, POBABILISTIC REASONI
   PERLMAN R, 1999, BRIDGES ROUTES SWITC
   Ramanathan S., 2000, Journal of Network and Systems Management, V8, P457, DOI 10.1023/A:1026478332185
   REDDY A, 2000, IEEE J SEL AREA COMM, V18, P723
   Roman S., 1992, Graduate Texts in Mathematics, V134
   Russell S., 1995, Prentice Hall series in artificial intelligence, V25, P27
   Russell S., 1996, ARTIF INTELL, P89
   Schow PH, 1996, PROCEEDINGS OF THE IEEE SECOND INTERNATIONAL WORKSHOP ON SYSTEMS MANAGEMENT, P142, DOI 10.1109/IWSM.1996.534157
   Scott C., 1999, VIRTUAL PRIVATE NETW
   SETHI AS, 1998, 9 INT WORKSH DISTR S
   SETHI AS, 1995, INTEGRATED NETWORK M, V4
   SIAMWALLA R, 1998, DISCOVERING INTERNET
   SLOMAN M, 1999, INTEGRATED NETWORK M, V6
   *SMARTS, 2001, AUT ROOT CAUS AN COD
   SMYTH P, 1994, IEEE J SEL AREA COMM, V12, P1600, DOI 10.1109/49.339929
   STADLER R, 2002, P NETW OP MAN S FLOR
   Steinder M, 2004, COMPUT NETW, V45, P537, DOI 10.1016/j.comnet.2004.01.007
   Steinder M, 2002, NOMS 2002: IEEE/IFIP NETWORK OPERATIONS AND MANAGEMENT SYMPOSIUM, P375, DOI 10.1109/NOMS.2002.1015595
   STEINDER M, 2004, IFIP NETWORKING
   STEINDER M, 2004, IN PRESS IEEE ACM T
   SUTTER MT, 1988, IEEE NETWORK     SEP, P43
   TIVOLI, 2000, NETVIEW UNIX ADM GUI
   WANG C, 1993, IEEE J SEL AREA COMM, V11, P1449, DOI 10.1109/49.257936
   WANG Z, 1989, INTEGRATED NETWORK M, V1, P345
   Wietgrefe H, 2002, NOMS 2002: IEEE/IFIP NETWORK OPERATIONS AND MANAGEMENT SYMPOSIUM, P391, DOI 10.1109/NOMS.2002.1015597
   Wu P, 1998, NOMS '98 - 1998 IEEE NETWORK OPERATIONS AND MANAGEMENT SYMPOSIUM, VOLS 1-3, P733, DOI 10.1109/NOMS.1998.655214
   YAMAHIRA T, 1989, INTEGRATED NEWORK MA, V1, P637
   Yemini SA, 1996, IEEE COMMUN MAG, V34, P82, DOI 10.1109/35.492975
   1998, P IEEE IFIP NETW OP
NR 104
TC 220
Z9 284
U1 0
U2 19
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV
PY 2004
VL 53
IS 2
BP 165
EP 194
DI 10.1016/j.scico.2004.01.010
PG 30
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 858DB
UT WOS:000224169400004
DA 2024-07-18
ER

PT J
AU Glew, N
   Palsberg, J
AF Glew, N
   Palsberg, J
TI Type-safe method inlining
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE types; objects; inlining
ID JAVA; CALCULUS
AB In a typed language such as Java, inlining of virtual methods does not always preserve typability. The best known solution to this problem is to insert type casts, which may hurt performance. This paper presents a solution that never hurts performance. The solution is based on a transformation that modifies static type annotations and changes some virtual calls into static calls, which can then be safely inlined. The transformation is parametrised by a flow analysis, and for any analysis that satisfies certain conditions, the transformation is correct and idempotent. The paper presents the transformation, the conditions on the flow analysis, and proves the correctness properties in the context of a variant of Featherweight Java. (C) 2004 Elsevier B.V. All rights reserved.
C1 Intel Corp, Santa Clara, CA 95054 USA.
   Univ Calif Los Angeles, Dept Comp Sci, Los Angeles, CA 90095 USA.
C3 Intel Corporation; University of California System; University of
   California Los Angeles
RP Intel Corp, Santa Clara, CA 95054 USA.
EM aglew@acm.org; palsberg@ucla.edu
RI Palsberg, Jens/JYO-6826-2024
OI Palsberg, Jens/0000-0003-4747-365X
CR ANDERSEN LO, 1992, 1992 WORKSH PART EV, P54
   Bacon D. F., 1997, THESIS U CALIFORNIA
   Bacon DF, 1996, ACM SIGPLAN NOTICES, V31, P324, DOI 10.1145/236338.236371
   Dean J, 1995, LECT NOTES COMPUT SC, V952, P77, DOI 10.1007/3-540-49538-x_5
   Detlefs D, 1999, LECT NOTES COMPUT SC, V1628, P258
   ELLIS ME, 1990, ANNOTATED CPLUSPLUS
   FAHNDRICH M, 1997, 4 INT STAT AN S SAS, P114
   Fowler M., 2018, Refactoring: Improving the Design of Existing Code
   FOWLER M, 1999, LNCS
   Gagnon EM, 2000, LECT NOTES COMPUT SC, V1824, P199
   GLEW N, 2003, C OBJ OR PROGR SYST
   GLEW N, 2000, C OBJ OR PROGR SYST
   GLEW N, 2000, C OBJ OR PROGR SYST, P311
   GLEW N, 2003, UNPUB METHOD INLININ
   GOSLIN J, 1996, JAVA LANGUAGE SPECIF
   Heintze N., 1995, Static Analysis. Second International Symposium, SAS'95. Proceedings, P189
   Igarashi A, 2001, ACM T PROGR LANG SYS, V23, P396, DOI 10.1145/503502.503505
   ISHIZAKI K, 2000, C OBJ OR PROGR SYST, P294
   JAGANNATHAN S, 1997, LNCS, P232
   Knoblock TB, 2001, ACM T PROGR LANG SYS, V23, P243, DOI 10.1145/383043.383045
   LINDHOLM T, 1996, JAVA VIRTUAL MACHINE
   Morrisett G, 1999, ACM T PROGR LANG SYS, V21, P527, DOI 10.1145/319301.319345
   MORRISETT G, 1996, ACM SIGPLAN WORKSH C
   Nielson F., 1989, PARLE '89. Parallel Architectures and Languages Europe. Vol. II: Parallel Languages Proceedings, P357
   Palsberg J, 1998, ACM T PROGR LANG SYS, V20, P1251, DOI 10.1145/295656.295662
   PALSBERG J, 1995, ACM T PROGR LANG SYS, V17, P576, DOI 10.1145/210184.210187
   Palsberg J, 2001, J FUNCT PROGRAM, V11, P263, DOI 10.1017/S095679680100394X
   PALSBERG J, 1995, ACM T PROGR LANG SYS, V17, P47, DOI 10.1145/200994.201001
   Palsberg J., 1994, OBJECT ORIENTED TYPE
   Tarditi David, 1996, 1996 ACM SIGPLAN C P, P181
   TIP F, 2003, UNPUB REFACTORING GE
   TIP F, 2000, C OBJ OR PROGR SYST, P281
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
   WRIGTH A, 1998, ACM WORKSH TYP COMP, P9
   [No title captured]
NR 35
TC 4
Z9 9
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD AUG
PY 2004
VL 52
IS 1-3
BP 281
EP 306
DI 10.1016/j.scico.2004.03.009
PG 26
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 841OS
UT WOS:000222940800009
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Zdun, U
AF Zdun, U
TI Supporting incremental and experimental software evolution by runtime
   method transformations
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE runtime method transformation; software evolution; software adaptation;
   patterns
AB Transformations of object-oriented methods are a prevalent object-oriented programming technique, but in many languages they are not supported at runtime. Therefore it can be hard to apply method transformations for incremental or experimental software evolution, or other problems that require runtime software behavior adaptation. The goal of the work presented in this paper is to provide a better conceptual and technical support for runtime method transformations. A non-intrusive model for method transformations and a set of runtime method transformation primitives are presented. We also present a pattern language for implementing dynamic method abstractions and combining them with languages that do not support dynamic methods natively. As a case study we introduce a runtime transformation framework for the dynamic configuration and composition language Frag, its connection to Java, and an end user programming example. (C) 2004 Elsevier B.V. All rights reserved.
C1 Vienna Univ Econ & BA, Dept Informat Syst, New Media Lab, Vienna, Austria.
C3 Vienna University of Economics & Business
RP Vienna Univ Econ & BA, Dept Informat Syst, New Media Lab, Vienna, Austria.
EM zdun@acm.org
RI Zdun, Uwe/AFR-2161-2022
CR Alexander C., 1979, The Timeless Way of Building
   [Anonymous], 2000, PATTERNS CONCURRENT
   [Anonymous], 1993, A Small Matter of Programming
   [Anonymous], 1993, Partial Evaluation and Automatic Program Generation
   [Anonymous], CSR9525 CWI
   [Anonymous], ELECT NOTES THEORETI
   Bergmans L, 2001, COMMUN ACM, V44, P51, DOI 10.1145/383845.383857
   Bobrow D.G., 1988, SIGPLAN NOTICES, V23
   Box D., 2000, SIMPLE OBJECT ACCESS
   BRACHA G, 1990, SIGPLAN NOTICES, V25, P303, DOI 10.1145/97946.97982
   Brant J., 1998, ECOOP'98 - Object-Oriented Programming. 12th European Conference. Proceedings, P396, DOI 10.1007/BFb0054101
   BRANT J, 2003, REFACTORING BROWSER
   BURKE B, 2003, JBOSS ASPECT ORIENTE
   CHIBA S, 2003, JAVASSIST
   Czarnecki Krysztof., 1999, GENERATIVE PROGRAMMI
   DEJONG M, 2003, TEL JAVA INTEGRATION
   *ETSI MHP, 2001, 101 ETSIMHP
   Fowler M., 2018, Refactoring: Improving the Design of Existing Code
   Gamma Erich., 1994, DESIGN PATTERNS
   Goldberg A., 1989, Smalltalk-80 : The Language
   HEINLEIN C, 2003, 20035 U ULM ULM INF
   Hirschfeld R, 2003, LECT NOTES COMPUT SC, V2591, P216
   *IONA TECHN LTD, 1993, ORB ARCH
   Kiczales G, 1997, LECT NOTES COMPUT SC, V1241, P220, DOI 10.1007/BFb0053381
   Kiczales G, 2001, COMMUN ACM, V44, P59, DOI 10.1145/383845.383858
   KICZALES G, 1991, ART METABOJECT PROTO
   KNIESEL G, 2002, LNCS, V2548
   Kristensen B. B., 1996, Theory and Practice of Object Systems, V2, P143, DOI 10.1002/(SICI)1096-9942(1996)2:3<143::AID-TAPO2>3.0.CO;2-X
   Lammel R., 2002, PROC AOSD 02, P41, DOI DOI 10.1145/508386.508392
   LETONDAL C, 2001, THESIS U PARIS 11 OR
   LETONDAL C, 2003, P 2 INT WORKSH UN SO
   MAES P, 1987, SIGPLAN NOTICES, V22, P147
   Matsumoto Yukihiro., 2001, RUBY NUTSHELL
   MOON DA, 1986, SIGPLAN NOTICES, V21, P1, DOI 10.1145/960112.28698
   Neumann G, 2000, USENIX ASSOCIATION PROCEEDINGS OF THE 7TH USENIX TCL/TK CONFERENCE (TCL/2K), P163
   Ousterhout J. K., 1990, Proceedings of the Winter 1990 USENIX Conference, P133
   Ousterhout JK, 1998, COMPUTER, V31, P23, DOI 10.1109/2.660187
   Popovici Andrei., 2003, AOSD 03, P100
   Smith B. C., 1984, P 11 ACM SIGACT SIGP, P23, DOI [DOI 10.1145/800017.800513, 10.1145/800017.800513]
   SNEED HM, 2000, ANN SOFTWARE ENG, V9
   Steele G.L., 1984, Common LISP: The Language, V2nd
   *SWIG PROJ, 2003, SIMPL WRAPP INT GEN
   TARR P, 2003, HYPER J
   UNGAR D, 1987, P OOPSLA 87, P227
   Wall Larry., 1996, PROGRAMMING PERL, Vsecond
   WANG N, 2001, P 6 USENIX C OBJ OR
   ZDUN U, 2004, DRAFT IEE P SOFTWARE
   ZDUN U, 2003, FRAG
   ZDUN U, 2003, P EUR 2003 IRS GERM
   ZDUN U, 2004, 8 EUR C SOFTW MAINT
NR 50
TC 3
Z9 3
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD AUG
PY 2004
VL 52
IS 1-3
BP 131
EP 163
DI 10.1016/j.scico.2004.03.005
PG 33
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 841OS
UT WOS:000222940800005
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Requet, A
AF Requet, A
TI A B model for ensuring soundness of a large subset of the Java Card
   virtual machine
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 5th ERCIM International Workshop on Forman Methods for Industrial
   Critical Systems (FMICS)
CY APR 03-04, 2000
CL BERLIN, GERMANY
SP GMD Res Inst Open Communicat Syst
DE B method; Java Card; formal specification
AB Java Cards are a new generation of smart cards that use the Java programming language. As smart cards are usually used to supply security to an information system, security requirements are very strong. The byte code interpreter and verifier are crucial components of such cards, and proving their safety can become a competitive advantage. Previous works have been done on methodology for proving the soundness of the byte code interpreter and verifier using the B method. It refines an abstract defensive interpreter into a byte code verifier and a byte code interpreter. However, this work had only been tested on a very small subset of the Java Card instruction set. This paper presents a work aiming at verifying the scalability of this previous work. The original instruction subset of about 10 instructions has been extended to a larger subset of more than one hundred instructions, and the additional cost of the proof has been managed by modifying the specification in order to group opcodes by properties. (C) 2002 Elsevier Science B.V. All rights reserved.
C1 Gemplus Res Lab, F-13881 Gemenos, France.
C3 Gemalto
RP Requet, A (corresponding author), Gemplus Res Lab, Av Pic Bertagne,BP 100, F-13881 Gemenos, France.
CR ABADI M, 1998, P 25 ACM S PRINC PRO
   Abrial J.-R., 1996, B BOOK ASSIGNING PRO
   ALBERDA M, 1996, P 2 SMART CARD RES A, P111
   CASSET L, 1999, P ECOOP 99 WORKSH FO
   Denney E, 2000, LECT NOTES COMPUT SC, V1782, P104
   FREUND S, 1999, SPECIFICATION VERIFI
   FREUND SN, 1998, P ACM C OBJ OR PROGR
   GOLDBERG A, 1997, SPECIFICATION JAVA L
   GUREVITCH Y, SPECIFICATION VERIFI
   LANET JL, 1998, LNCS, V1820, P85
   LINDHOLM T, 1996, JAVA VIRTUAL MACHINE
   MOTRE S, 2000, AFADL 2000 GREN FRAN
   NIPKOW T, 1998, 25 P ACM S PRINC PRO
   Posegga J, 1998, LECT NOTES COMPUT SC, V1485, P175, DOI 10.1007/BFb0055863
   Pusch C, 1999, LECT NOTES COMPUT SC, V1579, P89
   QIAN Z, 1998, LEAST TYPES MEMORY L
   STEPNEY S, 2000, LECT NOTES COMPUTER, V1878, P364
   *SUN MICR, 1999, JAV CARD 2 1 VIR MAC
   SYME D, 1997, PROVING JAVA TYPE SO
NR 19
TC 2
Z9 2
U1 0
U2 0
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR
PY 2003
VL 46
IS 3
BP 283
EP 306
AR PII S0167-6423(02)00095-3
DI 10.1016/S0167-6423(02)00095-3
PG 24
WC Computer Science, Software Engineering
WE Conference Proceedings Citation Index - Science (CPCI-S); Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 634AF
UT WOS:000180317300005
DA 2024-07-18
ER

PT J
AU Chen, J
   Zhang, ZY
   Yu, DJ
   Hu, HY
AF Chen, Jie
   Zhang, Ziyuan
   Yu, Dongjin
   Hu, Haiyang
TI What makes a real change in software performance? An empirical study on
   analyzing the factors that affect the triagement of performance change
   points
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Software performance; Change point; Empirical study
AB Performance tests can be automatically done on each commit version with a continuous integration system. After code changes are pushed to the repository, multiple benchmark tests are run to measure system's performance. Change point detection technology analyzes all these outcomes to identify commits that significantly change performance automatically. However, a considerable number of automatically detected change points are tagged as not being actionable (false positive). Typically, validating potential change points by hand is difficult, time-consuming, and thus creates a bottleneck in the testing process.Our work focuses on identifying what factors affect performance change point triagement and triaging whether a newly detected change point is true positive or not automatically. We start by extracting 34 features from four dimensions i.e., Configuration, Time Series, Version, and Context. We utilize a random forest classifier to triage the change points based on the proposed features. The results indicate that most of the proposed features differ significantly between true positive and false positive change points. On average, our model obtains an AUC of 0.881, which is statistically considerably better than two state-of-the-art approaches. We also look into the most important features for triagement and discover that version related features are the most essential factors.
C1 [Chen, Jie; Yu, Dongjin; Hu, Haiyang] Hangzhou Dianzi Univ, Sch Comp Sci & Technol, Hangzhou 310018, Peoples R China.
   [Zhang, Ziyuan] Hangzhou Dianzi Univ, Zhuoyue Honors Coll, Hangzhou 310018, Peoples R China.
C3 Hangzhou Dianzi University; Hangzhou Dianzi University
RP Chen, J (corresponding author), Hangzhou Dianzi Univ, Sch Comp Sci & Technol, Hangzhou 310018, Peoples R China.
EM cjie@hdu.edu.cn
RI Zhang, Ziyuan/HZL-7216-2023
OI Zhang, Ziyuan/0000-0002-4547-5283
FU National Science Foundation of China [62372145, 61702144]; Zhejiang
   Provincial National Science Foundation of China [LQ17F020003]
FX This work was supported by the National Science Foundation of China (No.
   62372145, 61702144) , the Zhejiang Provincial National Science
   Foundation of China (No. LQ17F020003) .
CR Bauer Andre, 2022, ICPE '22: Companion of the 2022 ACM/SPEC International Conference on Performance Engineering, P29, DOI 10.1145/3491204.3527486
   Breiman L, 2001, MACH LEARN, V45, P5, DOI 10.1023/A:1010933404324
   Chawla N. V., 2011, SMOTE SYNTHETIC MINO
   Chen J, 2022, COMPANION OF THE 2022 ACM/SPEC INTERNATIONAL CONFERENCE ON PERFORMANCE ENGINEERING, ICPE 2022, P33, DOI 10.1145/3491204.3527487
   Chen J, 2019, INT C PROGRAM COMPRE, P300, DOI 10.1109/ICPC.2019.00049
   Chen JF, 2022, IEEE T SOFTWARE ENG, V48, P1529, DOI 10.1109/TSE.2020.3023955
   Chen Tianqi, 2015, R package version 0.4-2 1.4, V1, P1
   Chicco D, 2020, BMC GENOMICS, V21, DOI 10.1186/s12864-019-6413-7
   Corder G.W., 2009, NONPARAMETRIC STAT N
   CORTES C, 1995, MACH LEARN, V20, P273, DOI 10.1007/BF00994018
   Daly D, 2021, PROCEEDINGS OF THE ACM/SPEC INTERNATIONAL CONFERENCE ON PERFORMANCE ENGINEERING (ICPE '21), P33, DOI 10.1145/3427921.3450234
   Daly D, 2020, PROCEEDINGS OF THE ACM/SPEC INTERNATIONAL CONFERENCE ON PERFORMANCE ENGINEERING (ICPE'20), P67, DOI 10.1145/3358960.3375791
   DAWID AP, 1984, J ROY STAT SOC A STA, V147, P278, DOI 10.2307/2981683
   Fan YR, 2020, IEEE T SOFTWARE ENG, V46, P495, DOI 10.1109/TSE.2018.2864217
   Fawcett T, 2006, PATTERN RECOGN LETT, V27, P861, DOI 10.1016/j.patrec.2005.10.010
   Goldberger J., 2004, Neighbourhood Components Analysis
   Graves TL, 2000, IEEE T SOFTWARE ENG, V26, P653, DOI 10.1109/32.859533
   Hess M. R., 2004, ANN M AM ED RES ASS, P1
   Javed O, 2020, IEEE INT CONF AUTOM, P1344, DOI 10.1145/3324884.3415288
   Jiarpakdee J, 2021, IEEE T SOFTWARE ENG, V47, P320, DOI 10.1109/TSE.2019.2891758
   Kalibera T., 2020, Quantifying Performance Changes with Effect Size Confidence Intervals
   Laaber C, 2021, EMPIR SOFTW ENG, V26, DOI 10.1007/s10664-021-09996-y
   Laaber C, 2019, PROCEEDINGS OF THE 28TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS (ISSTA '19), P410, DOI 10.1145/3293882.3338982
   Laaber C, 2019, EMPIR SOFTW ENG, V24, P2469, DOI 10.1007/s10664-019-09681-1
   Leznik Mark, 2022, P 11 ACM SPEC INT C
   Matsumoto Shinsuke, 2010, INT C PRED MOD SOFTW, P1
   MATTHEWS BW, 1975, BIOCHIM BIOPHYS ACTA, V405, P442, DOI 10.1016/0005-2795(75)90109-9
   McCallum A., 1998, AAAI 98 WORKSH LEARN, V752, P41, DOI DOI 10.1109/TSMC.1985.6313426
   McCulloch WS, 2016, EMBODIMENTS OF MIND, P19
   Nguyen ThanhHD., 2012, P 3 ACMSPEC INT C PE, P299
   Park C, 2022, COMMUN STAT-SIMUL C, V51, P2619, DOI 10.1080/03610918.2019.1699114
   Quinlan J. R., 1986, Machine Learning, V1, P81, DOI 10.1007/BF00116251
   Rahman Foyzur, 2013, P 2013 9 JOINT M FDN, P147
   Rao P.V., 1969, J. Qual. Technol., V1, P72
   Reed LJ, 1929, J PHYS CHEM-US, V33, P760, DOI 10.1021/j150299a014
   Rennie J., 2003, ICML
   Selakovic M, 2016, PROC INT CONF SOFTW, P61, DOI 10.1145/2884781.2884829
   Tantithamthavorn C, 2019, IEEE T SOFTWARE ENG, V45, P683, DOI 10.1109/TSE.2018.2794977
   Tantithamthavorn C, 2016, PROC INT CONF SOFTW, P321, DOI 10.1145/2884781.2884857
   Wang JJ, 2019, INFORM SOFTWARE TECH, V110, P139, DOI 10.1016/j.infsof.2019.03.003
   Weisstein Eric W., 2004, Bonferroni correction
   WILCOXON F, 1945, BIOMETRICS BULL, V1, P80, DOI 10.1093/jee/39.2.269
   Wu HC, 2008, ACM T INFORM SYST, V26, DOI 10.1145/1361684.1361686
   Yatish S, 2019, PROC INT CONF SOFTW, P654, DOI 10.1109/ICSE.2019.00075
   Yüksel U, 2013, PROC IEEE INT CONF S, P532, DOI 10.1109/ICSM.2013.89
   Zhang H., 2004, AA, V1, P3
   Zhou Y, 2016, J SOFTW-EVOL PROC, V28, P150, DOI 10.1002/smr.1770
NR 47
TC 0
Z9 0
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR
PY 2024
VL 233
AR 103068
DI 10.1016/j.scico.2023.103068
EA DEC 2023
PG 16
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DC9H8
UT WOS:001129945700001
DA 2024-07-18
ER

PT J
AU Acher, M
   Perrouin, G
   Cordy, M
AF Acher, Mathieu
   Perrouin, Gilles
   Cordy, Maxime
TI BURST: Benchmarking uniform random sampling techniques
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Configurable systems; Software product lines; Variability model;
   Sampling; SAT
AB BURST is a benchmarking platform for uniform random sampling (URS) techniques. Given: i) the description of a sampling space provided as a Boolean formula (DIMACS), and ii) a sampling budget (time and strength of uniformity), BURST evaluates ten samplers for scalability and uniformity. BURST measures scalability based on the time required to produce a sample, and uniformity based on the state-of-the-art and proven statistical test Barbarik. BURST is easily extendable to new samplers and offers: i) 128 feature models (for highly-configurable systems), ii) many other models mined from the artificial intelligence/satisfiability solving benchmarks. BURST envisions supporting URS assessment and design across multiple research communities.(c) 2022 Elsevier B.V. All rights reserved.
C1 [Acher, Mathieu] Univ Rennes, Inst Univ France IUF, CNRS, Inria,IRISA, Rennes, France.
   [Perrouin, Gilles] Univ Namur, Fac Comp Sci, PReCISE, NaDI, Namur, Belgium.
   [Cordy, Maxime] Univ Luxembourg, SnT, Esch Sur Alzette, Luxembourg.
C3 Universite de Rennes; Inria; Centre National de la Recherche
   Scientifique (CNRS); University of Namur; University of Luxembourg
RP Acher, M (corresponding author), Univ Rennes, Inst Univ France IUF, CNRS, Inria,IRISA, Rennes, France.
EM mathieu.acher@irisa.fr
RI Perrouin, Gilles/I-1621-2019
OI Perrouin, Gilles/0000-0002-8431-0377; Acher, Mathieu/0000-0003-1483-3858
FU CMS [ANR-17-CE25-0010-01]; FNR Luxembourg
   [C19/IS/13566661/BEEHIVE/Cordy]
FX The authors would particularly like to thank Kuldeep S. Meel from
   National University of Singapore, Mate Soos from Zalando Germany and
   their colleagues for their help setting up and fixing Barbarik as well
   as the CMS samplers. This research was partly funded by the
   ANR-17-CE25-0010-01 VaryVary project. Gilles Perrouin is a Research
   Associate at the FNRS. Maxime Cordy was supported by FNR Luxembourg
   (grant C19/IS/13566661/BEEHIVE/Cordy) .
CR Acher M, 2021, SPLC '21 - PROCEEDINGS OF THE 25TH ACM INTERNATIONAL SYSTEMS AND SOFTWARE PRODUCT LINE CONFERENCE, VOL B, P36, DOI 10.1145/3461002.3473070
   Achlioptas D, 2018, LECT NOTES COMPUT SC, V10929, P135, DOI 10.1007/978-3-319-94144-8_9
   Batory D, 2005, LECT NOTES COMPUT SC, V3714, P7
   Chakraborty S, 2019, AAAI CONF ARTIF INTE, P7777
   Cordy M, 2020, LECT NOTES COMPUT SC, V12076, P294, DOI 10.1007/978-3-030-45234-6_15
   de Laillevault AD, 2015, GECCO'15: PROCEEDINGS OF THE 2015 GENETIC AND EVOLUTIONARY COMPUTATION CONFERENCE, P815, DOI 10.1145/2739480.2754760
   Dutra R, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P549, DOI 10.1145/3180155.3180248
   Golia Priyanka, 2021, 2021 Formal Methods in Computer Aided Design (FMCAD), P222, DOI 10.34727/2021/isbn.978-3-85448-046-4_31
   Halin A, 2019, EMPIR SOFTW ENG, V24, P674, DOI 10.1007/s10664-018-9635-4
   Heradio Ruben, 2020, SPLC '20: Proceedings of the 24th ACM Conference on Systems and Software Product Line: Volume A, DOI 10.1145/3382025.3414951
   Heradio R, 2022, EMPIR SOFTW ENG, V27, DOI 10.1007/s10664-021-10102-5
   Kang Kyo C, 1990, Technical Report
   Knüppel A, 2017, ESEC/FSE 2017: PROCEEDINGS OF THE 2017 11TH JOINT MEETING ON FOUNDATIONS OF SOFTWARE ENGINEERING, P291, DOI 10.1145/3106237.3106252
   Krieter S, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P898, DOI 10.1145/3180155.3180159
   Liang Jia Hui, 2015, P 19 INT C SOFTW PRO, P91, DOI [10.1145/2791060, DOI 10.1145/2791060]
   Medeiros F, 2016, PROC INT CONF SOFTW, P643, DOI 10.1145/2884781.2884793
   Meel K.S., 2020, ADV NEURAL INFORM PR
   Oh J, 2017, ESEC/FSE 2017: PROCEEDINGS OF THE 2017 11TH JOINT MEETING ON FOUNDATIONS OF SOFTWARE ENGINEERING, P61, DOI 10.1145/3106237.3106273
   Plazar Q, 2019, IEEE INT CONF SOFTW, P240, DOI 10.1109/ICST.2019.00032
   Raible M, 2015, JHIPSTER MINIBOOK
   Schobbens PY, 2006, RE'06: 14TH IEEE INTERNATIONAL REQUIREMENTS ENGINEERING CONFERENCE, PROCEEDINGS, P139
   Sharma S., 2018, P INT C LOGIC PROGRA
   Soos M, 2020, LECT NOTES COMPUT SC, V12224, P463, DOI 10.1007/978-3-030-53288-8_22
   Soos M, 2019, AAAI CONF ARTIF INTE, P1592
NR 24
TC 1
Z9 1
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR
PY 2023
VL 226
AR 102914
DI 10.1016/j.scico.2022.102914
EA FEB 2023
PG 5
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA A2VK5
UT WOS:000953759100001
OA Green Submitted, hybrid
DA 2024-07-18
ER

PT J
AU Mogensen, TAE
AF Mogensen, Torben Aegidius
TI Hermes: A reversible language for lightweight encryption
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Lightweight encryption; Side-channel attacks; Reversible programming
   languages; Domain-specific languages
AB Hermes is a domain-specific language for writing lightweight encryption algorithms: It is reversible, so it is not necessary to write separate encryption and decryption procedures. Hermes uses a type system that avoids several types of side-channel attacks, by ensuring no secret values are left in memory and that operations on secret data spend time independent of the value of this data, thus preventing timing-based attacks. We show a complete formal specification of Hermes, argue absence of timing-based attacks (under reasonable assumptions), and compare implementations of well-known lightweight encryption algorithms in Hermes and C. (C) 2021 Elsevier B.V. All rights reserved.
C1 [Mogensen, Torben Aegidius] Univ Copenhagen, DIKU, Univ Pk 5, DK-2100 Copenhagen O, Denmark.
C3 University of Copenhagen
RP Mogensen, TAE (corresponding author), Univ Copenhagen, DIKU, Univ Pk 5, DK-2100 Copenhagen O, Denmark.
EM torbenm@di.ku.dk
RI Mogensen, Torben AEgidius/L-9560-2016
OI Mogensen, Torben AEgidius/0000-0003-4862-9193
CR A Mogensen T., 2017, Introduction to Compiler Design
   Agat J., 2000, Conference Record of POPL'00: 27th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages. Papers Presented at the Symposium, P40, DOI 10.1145/325694.325702
   [Anonymous], 2009, Advanced Encryption Standard
   [Anonymous], 1993, Partial Evaluation and Automatic Program Generation
   Askarov A, 2010, PROCEEDINGS OF THE 17TH ACM CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY (CCS'10), P297, DOI 10.1145/1866307.1866341
   Beaulieu Ray., 2013, IACR Cryptology ePrint Archive, V2013, P404
   Bernstein D. J., 2005, TECH REP
   Boyar J., 2009, CRYPTOLOGY EPRINT AR
   Haas A, 2017, ACM SIGPLAN NOTICES, V52, P185, DOI [10.1145/3062341.3062363, 10.1145/3140587.3062363]
   HATCLIFF J, 1999, LECT NOTES COMPUTER, V1706
   Kocher P, 2019, P IEEE S SECUR PRIV, P1, DOI 10.1109/SP.2019.00002
   Lutz C, 1986, Janus: a time-reversible language
   Mogensen T.AE., 2011, SIGPLAN WORKSHOP PAR, P23, DOI DOI 10.1145/1929501.1929506
   Mogensen TAE, 2020, LECT NOTES COMPUT SC, V12227, P93, DOI 10.1007/978-3-030-52482-1_5
   Mogensen TA, 2019, LECT NOTES COMPUT SC, V11964, P243, DOI 10.1007/978-3-030-37487-7_21
   Nipkow T., 2012, NATO Science for Peace and Security Series-D: Information and Communication Security, V33, P319, DOI [10.3233/978-1-61499-028-4-319, DOI 10.3233/978-1-61499-028-4-319]
   NIST, 2001, FEDERAL INFORM PROCE, V197
   Odzhan, AES DUST
   Palsberg J., 1995, Static Analysis. Second International Symposium, SAS'95. Proceedings, P314
   Paolini L., 2018, 21 INT C TYPES PROOF, V69, DOI DOI 10.4230/LIPICS.TYPES.2015.7
   Rivest R. L., 1995, Fast Software Encryption. Second International Workshop. Proceedings, P86
   Smith G, 2007, ADV INF SEC, P291
   Táborsky D, 2018, LECT NOTES COMPUT SC, V11106, P331, DOI 10.1007/978-3-319-99498-7_23
   Watt C., 2018, CORR
   Wheeler D. J., 1995, Fast Software Encryption. Second International Workshop. Proceedings, P363
   Wikipedia, TIN ENCR ALG
   Wikipedia, SPECK CIPH
   Wikipedia, RC5
   Wikipedia, RED PIK CIPH
   Yokoyama T., 2008, P 5 C COMPUTING FRON, P43, DOI DOI 10.1145/1366230.1366239
NR 30
TC 3
Z9 3
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR 1
PY 2022
VL 215
AR 102746
DI 10.1016/j.scico.2021.102746
EA NOV 2021
PG 26
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA YN9RV
UT WOS:000747588600003
DA 2024-07-18
ER

PT J
AU Ssanyu, J
   Bainomugisha, E
   Kanagwa, B
AF Ssanyu, Jackline
   Bainomugisha, Engineer
   Kanagwa, Benjamin
TI PAMOJA: A component framework for grammar-aware engineering
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Component-based software development; Grammarware; Component frameworks;
   Programming environments; Software architectures
ID LANGUAGE; IMPLEMENTATION
AB PAMOJA is a Java-based component framework for Grammar-Aware Engineering (GAE) in an Integrated Development Environment (IDE). The PAMOJA system is being developed to explore the possibility of Component-Based Software Development (CBSD) in the grammarware field. Our main goal is to develop a coherent set of small GAE components, where each component is dedicated to a single well-defined task. The components should fit into a general-purpose framework like NetBeans or Eclipse and it should be possible to manipulate them inside the IDE just like any other component. This paper describes the PAMOJA architecture supporting this development style. We illustrate its use with the aid of examples, and present a case of composing new components at a higher level from the existing GAE components. For this case, we use a hybrid text/structure editor application as an example. This case study serves as a proof of concept of our approach. (C) 2021 Elsevier B.V. All rights reserved.
C1 [Ssanyu, Jackline; Bainomugisha, Engineer; Kanagwa, Benjamin] Makerere Univ, Dept Comp Sci, POB 7062, Kampala, Uganda.
   [Ssanyu, Jackline] Kyambogo Univ, Dept Comp Sci, POB 1, Kampala, Uganda.
C3 Makerere University
RP Ssanyu, J (corresponding author), Kyambogo Univ, Dept Comp Sci, POB 1, Kampala, Uganda.
EM jssanyu@kyu.ac.ug; ebainomugisha@cis.mak.ac.ug; bkanagwa@cis.mak.ac.ug
RI ; Bainomugisha, Engineer/N-6925-2017
OI Kanagwa, Benjamin/0000-0002-9056-3696; Bainomugisha,
   Engineer/0000-0002-3304-4144; Ssanyu, Jackline/0000-0001-7733-3602
CR [Anonymous], 2007, P 22 IEEE ACM INT C
   [Anonymous], 2006, COMPILERS PRINCIPLES
   ANTLR, AN TOOL LANG REC **NON-TRADITIONAL**
   Apache Software Foundation, AP NET BEANS AP NET BEANS
   Basten B, 2015, SCI COMPUT PROGRAM, V114, P7, DOI 10.1016/j.scico.2015.11.003
   Bauer F., 1977, COMPILER CONSTRUCTIO, V2nd
   Bergstra J. A., 1996, Coordination Languages and Models. First International Conference COORDINATION '96. Proceedings, P75
   Bettini L., 2016, Implementing Domain Specific Languages with Xtext and Xtend
   Butting A, 2019, J SYST SOFTWARE, V152, P50, DOI 10.1016/j.jss.2019.02.026
   Centrum Wiskunde and Informatica (CWI), RASC MET LANG IDE RASC MET LANG IDE
   Charles P, 2009, ACM SIGPLAN NOTICES, V44, P191, DOI 10.1145/1639949.1640104
   Cleenewerck T, 2003, LECT NOTES COMPUT SC, V2830, P245
   de Jonge M, 2000, P 2 INT S CONSTR SOF INT S CONSTR SOFTW E, V5, P68
   DIJKSTRA EW, 1975, COMMUN ACM, V18, P453, DOI [10.1145/360933.360975, 10.1145/390016.808417]
   Eclipse Foundation, ECL PLATF OP INN COL ECL PLATF OP INN COL
   Eclipse Foundation, XTEXT LANG ENG ENG E XTEXT LANG ENG ENG E
   Embarcadero Technologies, DELPH IDE DELPH IDE
   Fors N, 2015, SCI COMPUT PROGRAM, V114, P74, DOI 10.1016/j.scico.2015.02.002
   Gamma E., 1994, Design patterns: Elements of reusable object-oriented software
   Grinkrug E., 2010, P 12 INT WORKSH COMP P 12 INT WORKSH COMP
   Hedin G., 2001, Electronic Notes in Theoretical Computer Science, V44, DOI 10.1016/S1571-0661(04)80920-4
   Hedin G, 2011, LECT NOTES COMPUT SC, V6491, P166, DOI 10.1007/978-3-642-18023-1_4
   Henriques PR, 2005, IEE P-SOFTW, V152, P54, DOI 10.1049/ip-sen:20041317
   Humm B., 2011, Communications in Computer and Information Science, V275, P82
   Jet Brains, INTELLIJ IDEA CAPABL
   Kats LCL, 2010, ACM SIGPLAN NOTICES, V45, P444, DOI 10.1145/1932682.1869497
   Klint P, 2005, ACM T SOFTW ENG METH, V14, P331, DOI 10.1145/1072997.1073000
   Klint P., 1993, ACM Transactions on Software Engineering and Methodology, V2, P176, DOI 10.1145/151257.151260
   Levine J.R., 1992, LEX YACC
   Loberbauer M., COMPILER GENERATOR C
   MetaBorg Revision, SPOOF LANG WORKB SPOOF LANG WORKB
   Microsystems Sun, 1997, JAVABEANS API SPEC JAVABEANS API SPEC
   Nikander P, 1998, PROCEEDINGS OF THE SEVENTH USENIX SECURITY SYMPOSIUM, P107
   Poll E, 2018, FORMAL METHODS SECUR
   Praehofer H, 2001, FUTURE GENER COMP SY, V17, P539, DOI 10.1016/S0167-739X(00)00038-8
   Sloane AM, 2015, SCI COMPUT PROGRAM, V114, P20, DOI 10.1016/j.scico.2015.10.010
   Sloane AM, 2011, LECT NOTES COMPUT SC, V6491, P408, DOI 10.1007/978-3-642-18023-1_12
   Soderberg E., 2011, P 11 WORKSH LANG DES P 11 WORKSH LANG DES, P1
   Ssanyu J., 2021, PAMOJA GRAMMAR AWARE
   StatBeans, STATGRAPHICS JAVABEA
   Szyperski C., 2002, Component Software: Beyond Object-Oriented Programming
   Tomita Masaru, 1991, Generalized LR parsing
   Vacchi E, 2015, COMPUT LANG SYST STR, V43, P1, DOI 10.1016/j.cl.2015.02.001
   van Binsbergen LT, 2020, J COMPUT LANG, V58, DOI 10.1016/j.cola.2020.100945
   van Binsbergen LT, 2019, J LOG ALGEBR METHODS, V103, P184, DOI 10.1016/j.jlamp.2018.12.004
   Van Den Brand M., 1996, ACM Transactions on Software Engineering and Methodology, V5, P1, DOI 10.1145/226155.226156
   van den Brand M, 2005, IEE P-SOFTW, V152, P70, DOI 10.1049/ip-sen:20041181
   van den Brand M. G. J., 2001, Electronic Notes in Theoretical Computer Science, V44, DOI 10.1016/S1571-0661(04)80917-4
   van den Brand M, 2015, SCI COMPUT PROGRAM, V114, P1, DOI 10.1016/j.scico.2015.10.015
   Van Wyk E, 2010, SCI COMPUT PROGRAM, V75, P39, DOI 10.1016/j.scico.2009.07.004
   Wilhelm R., 2013, COMPILER DESIGN
   Wirth N, 2017, COMPILER CONSTRUCTIO
   Wu XQ, 2010, COMPUT LANG SYST STR, V36, P16, DOI 10.1016/j.cl.2009.01.002
NR 53
TC 1
Z9 1
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 1
PY 2021
VL 211
AR 102703
DI 10.1016/j.scico.2021.102703
EA JUL 2021
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA TY1NH
UT WOS:000683550800004
DA 2024-07-18
ER

PT J
AU Zerouali, A
   Mens, T
   De Roover, C
AF Zerouali, Ahmed
   Mens, Tom
   De Roover, Coen
TI On the usage of <i>JavaScript</i>, Python and <i>Ruby</i> packages in
   Docker Hub images
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Software containerization; Docker; Software vulnerability; Outdated
   software; Third-party library
ID CONTAINERS
AB Docker is one of the most popular containerization technologies. A Docker container can be saved into an image including all environmental packages required to run it, such as system and third-party packages from language-specific package repositories. Relying on its modularity, an image can be shared and included in other images to simplify the way of building and packaging new software. However, some package managers allow to include duplicated packages in an image, increasing its footprint; and outdated packages may miss new features and bug fixes or contain reported security vulnerabilities, putting the image in which they are contained at risk. Previous research has focused on studying operating system packages within Docker images, but little attention has been given to third-party packages. This article empirically studies installation practices, outdatedness and vulnerabilities of JavaScript, Python and Ruby packages installed in 3,000 popular community Docker Hub images. In many cases, these installed packages missed important releases leading to potential vulnerabilities of the images. Our findings suggest that maintainers of Docker Hub community images should invest more effort in updating outdated packages contained in those images in order to significantly reduce the number of vulnerabilities. In addition to this, Python community images are generally much less outdated and much less subject to vulnerabilities than NodeJS and Ruby community images. Specifically for NodeJS community images, elimination of duplicate package releases could lead to a significant reduction in their image footprint. (C) 2021 Elsevier B.V. All rights reserved.
C1 [Zerouali, Ahmed; De Roover, Coen] Vrije Univ Brussel, Software Languages Lab, Brussels, Belgium.
   [Mens, Tom] Univ Mons, Software Engn Lab, Mons, Belgium.
C3 Vrije Universiteit Brussel; University of Mons
RP Zerouali, A (corresponding author), Vrije Univ Brussel, Software Languages Lab, Brussels, Belgium.
EM ahmed.zerouali@vub.be; tom.mens@umons.ac.be; coen.de.roover@vub.be
RI Zerouali, Ahmed/AAH-4948-2020
OI De Roover, Coen/0000-0002-1710-1268
FU FWO-Vlaanderen [30446992 SECOAssist]; F.R.S.-FNRS; FNRS [T.0017.18,
   J.0151.20]
FX We express our gratitude to the security team of Snyk.io for providing
   us with the full dataset of vulnerability reports. This research was
   partially funded by the Excellence of Science project 30446992
   SECOAssist financed by FWO-Vlaanderen and F.R.S.-FNRS, as well as FNRS
   research grants T.0017.18 and J.0151.20.
CR Acharya A, 2018, EUR CONF NETW COMMUN, P282, DOI 10.1109/EuCNC.2018.8443248
   Anchore.io, 2017, SNAPSH CONT EC
   Bernstein D, 2014, IEEE CLOUD COMPUT, V1, P81, DOI 10.1109/MCC.2014.51
   Bettini A., 2015, VULNERABILITY EXPLOI
   Cito J, 2017, IEEE WORK CONF MIN S, P323, DOI 10.1109/MSR.2017.67
   Cox J, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 2, P109, DOI 10.1109/ICSE.2015.140
   Decan A, 2019, EMPIR SOFTW ENG, V24, P381, DOI 10.1007/s10664-017-9589-y
   Decan A, 2018, IEEE WORK CONF MIN S, P181, DOI 10.1145/3196398.3196401
   Gummaraju J., 2015, 30 OFFICIAL IMAGES D
   Katz J, 2020, **DATA OBJECT**, DOI [10.5281/zenodo.3626071, DOI 10.5281/ZENODO.3626071]
   Kula RG, 2018, EMPIR SOFTW ENG, V23, P384, DOI 10.1007/s10664-017-9521-5
   Li Z, 2017, INT CON ADV INFO NET, P955, DOI 10.1109/AINA.2017.79
   Lu Z.Z., 2019, FUNDAMENTALS RELIABI
   Martin A, 2018, COMPUT COMMUN, V122, P30, DOI 10.1016/j.comcom.2018.03.011
   Node.js Docker Team, NOD
   Oumaziz MA, 2019, PROC IEEE INT CONF S, P524, DOI 10.1109/ICSME.2019.00086
   Preston-Werner T., 2013, SEMANTIC VERSIONING
   Reps T, 2020, INT C SOFTW ENG
   Romano J., 2006, P ANN M SO ASS I RES
   Salza P, 2018, INT C PROGRAM COMPRE, P255, DOI 10.1145/3196321.3196341
   Shire MI, 2020, ERGONOMICS, V63, P1044, DOI 10.1080/00140139.2020.1783459
   Shu R, 2017, PROCEEDINGS OF THE SEVENTH ACM CONFERENCE ON DATA AND APPLICATION SECURITY AND PRIVACY (CODASPY'17), P269, DOI 10.1145/3029806.3029832
   Socchi E., 2019, THESIS U OSLO
   Stack Overflow, 2020, 2020 STACK OV DEV SU
   Turnbull J., 2014, DOCKER BOOK CONTAINE
   Wohlin C., 2000, EXPT SOFTWARE ENG IN
   Zaman S., 2011, Proceedings of the 8th working conference on mining software repositories, P93, DOI [10.1145/1985441.1985457, DOI 10.1145/1985441.1985457]
   Zerouali A., 2019, J SOFTW EVOL PROCESS
   Zerouali A, 2019, 2019 IEEE 26TH INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION AND REENGINEERING (SANER), P491, DOI [10.1109/saner.2019.8668013, 10.1109/SANER.2019.8668013]
   Zerouali A, 2019, 2019 IEEE 26TH INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION AND REENGINEERING (SANER), P619, DOI [10.1109/saner.2019.8667984, 10.1109/SANER.2019.8667984]
NR 30
TC 8
Z9 10
U1 0
U2 19
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUL 1
PY 2021
VL 207
AR 102653
DI 10.1016/j.scico.2021.102653
EA APR 2021
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA RQ5SW
UT WOS:000642479600004
DA 2024-07-18
ER

PT J
AU Ancona, D
   Franceschini, L
   Ferrando, A
   Mascardi, V
AF Ancona, Davide
   Franceschini, Luca
   Ferrando, Angelo
   Mascardi, Viviana
TI RML: Theory and practice of a domain specific language for runtime
   verification
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Runtime verification; Domain specific language; Operational semantics
ID MODEL CHECKING; SYSTEMS; LOGIC; TAXONOMY
AB Runtime verification (RV) is an approach to verification consisting in dynamically checking that the event traces generated by single runs of a system under scrutiny (SUS) are compliant with the formal specification of its expected correct behavior.
   RML (Runtime Monitoring Language) is a simple but powerful Domain Specific Language (DSL) for RV which is able to express non context-free properties. When designing RML, particular care has been taken to favor abstraction and simplicity, to better support reusability and portability of specifications and interoperability of the monitors generated from them; this is mainly achieved by decoupling the two problems of property specification and event generation, and by minimizing the available primitive constructs.
   The formalization and implementation of RML is based on a trace calculus with a fully deterministic rewriting semantics. The semantics of RML is defined by translation into such a calculus, which, in fact, is used as intermediate representation (IR) by the RML compiler. The effectiveness of RML and its methodological impact on RV are presented through interesting patterns that can be adapted to different contexts requiring verification of standard properties. A collection of tested examples is provided, together with benchmarks showing that the deterministic semantics and the performed dynamic optimizations based on the laws of the trace calculus significantly improve the performances of the generated monitors. (C) 2021 Elsevier B.V. All rights reserved.
C1 [Ancona, Davide; Franceschini, Luca; Mascardi, Viviana] Univ Genoa, DIBRIS, Via Dodecaneso 35, I-16146 Genoa, Italy.
   [Ferrando, Angelo] Univ Manchester, Manchester, Lancs, England.
C3 University of Genoa; University of Manchester
RP Ancona, D (corresponding author), Univ Genoa, DIBRIS, Via Dodecaneso 35, I-16146 Genoa, Italy.
EM davide.ancona@unige.it; luca.franceschini@dibris.unige.it;
   angelo.ferrando@manchester.ac.uk; viviana.mascardi@unige.it
RI Ferrando, Angelo/ABC-9750-2020
OI Ferrando, Angelo/0000-0002-8711-4670
CR Aceto L., 2018, CONCUR LIPICS, V118, DOI [10.4230/LIPIcs.CONCUR.2018.34, DOI 10.4230/LIPICS.CONCUR.2018.34]
   Aceto L, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290365
   Ahrendt W., 2016, LECT NOTES COMPUTER, V10001
   Ahrendt W, 2017, FORM METHOD SYST DES, V51, P200, DOI 10.1007/s10703-017-0274-y
   Ahrendt W, 2015, LECT NOTES COMPUT SC, V9109, P108, DOI 10.1007/978-3-319-19249-9_8
   Akroun L, 2018, FORM METHOD SYST DES, V52, P260, DOI 10.1007/s10703-017-0285-8
   Alberti M, 2005, LECT NOTES ARTIF INT, V3673, P135
   Allan C, 2005, ACM SIGPLAN NOTICES, V40, P345, DOI 10.1145/1103845.1094839
   Alur R, 2004, LECT NOTES COMPUT SC, V2988, P467
   Alur R, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290363
   Ancona Davide, 2016, Theory and Practice of Formal Methods. Essays Dedicated to Frank de Boer on the Occasion of His 60th Birthday. LNCS 9660, P47, DOI 10.1007/978-3-319-30734-3_6
   Ancona Davide, 2013, Declarative Agent Languages and Technologies X. 10th International Workshop, DALT 2012. Revised Selected Papers, P76, DOI 10.1007/978-3-642-37890-4_5
   Ancona D., 2017, FTFJP ECOOP, P10
   Ancona D., 2016, P WORKSH OBJ AG COL, V1664, P35
   Ancona D, 2018, COMPANION PROCEEDINGS FOR THE ISSTA/ECOOP 2018 WORKSHOPS, P24, DOI 10.1145/3236454.3236476
   Ancona D, 2018, ELECTRON P THEOR COM, P27, DOI 10.4204/EPTCS.264.4
   Ancona D, 2017, AAMAS'17: PROCEEDINGS OF THE 16TH INTERNATIONAL CONFERENCE ON AUTONOMOUS AGENTS AND MULTIAGENT SYSTEMS, P1457
   Ancona D, 2016, FOUND TRENDS PROGRAM, V3, pI, DOI 10.1561/2500000031
   Ancona D, 2016, ACM SIGPLAN NOTICES, V51, P568, DOI 10.1145/3022671.2983992
   Ancona D, 2015, PROCEEDINGS OF THE 2015 INTERNATIONAL CONFERENCE ON AUTONOMOUS AGENTS & MULTIAGENT SYSTEMS (AAMAS'15), P1019
   Ancona D, 2015, INTELL ARTIF, V9, P131, DOI 10.3233/IA-150084
   Ancona D, 2014, LECT NOTES COMPUT SC, V8586, P282
   [Anonymous], 1989, Principles of Database and Knowledge-Base Systems
   [Anonymous], 1980, CALCULUS COMMUNICATI, DOI DOI 10.1007/3-540-10235-3
   [Anonymous], 2013, P 2013 9 JOINT M FDN, DOI [10.1145/2491411.2491447, DOI 10.1145/2491411.2491447]
   [Anonymous], 2007, Developing Multi-Agent Systems with JADE
   Atig M.F., 2017, FSTTCS 2017, P11
   BarHillel Y., 1964, LANGUAGE INFORMATION, P116
   Barringer H, 2004, LECT NOTES COMPUT SC, V2937, P44
   Barringer Howard, 2012, FM 2012: Formal Methods. Proceedings of the 18th International Symposium, P68, DOI 10.1007/978-3-642-32759-9_9
   Barringer Howard, 2011, FM 2011: Formal Methods. Proceedings 17th International Symposium on Formal Methods, P57, DOI 10.1007/978-3-642-21437-0_7
   Barringer H, 2010, J LOGIC COMPUT, V20, P675, DOI 10.1093/logcom/exn076
   Bartocci Ezio, 2018, Lectures on Runtime. Verification Introductory and Advanced Topics. LNCS 10457, P1, DOI 10.1007/978-3-319-75632-5_1
   Bauer A, 2007, LECT NOTES COMPUT SC, V4839, P126
   Bauer A, 2006, 2006 AUSTRALIAN SOFTWARE ENGINEERING CONFERENCE, PROCEEDINGS, P243
   Bauer A, 2011, ACM T SOFTW ENG METH, V20, DOI 10.1145/2000799.2000800
   Blech J.O., 2012, Proceedings of the 10th International Conference on Formal Engineering Methods: Formal Methods and Software Engineering (SEFM), P494, DOI DOI 10.1007/978-3-642-34281-3_34
   Bodden E, 2007, LECT NOTES COMPUT SC, V4609, P525
   Boer Frank S., 2014, Formal Methods for Executable Software Models. 14th International School on Formal Methods for the Design of Computer, Communication, and Software Systems, SFM 2014. Advanced Lectures: LNCS 8483, P217, DOI 10.1007/978-3-319-07317-0_6
   Bollig Benedikt, 2012, 2012 IEEE Sixth International Symposium on Theoretical Aspects of Software Engineering (TASE 2012), P85, DOI 10.1109/TASE.2012.43
   Bordini R., 2007, PROGRAMMING MULTIAGE
   Briola D., 2014, CILC CEUR WORKSHOP P, V1195, P319
   Briola D, 2015, STUD COMPUT INTELL, V570, P81, DOI 10.1007/978-3-319-10422-5_10
   BROOKES SD, 1984, J ACM, V31, P560, DOI 10.1145/828.833
   Brorkens M., 2002, Electr. Notes Theor. Comput. Sci., V70, P21
   Calegari R, 2021, AUTON AGENT MULTI-AG, V35, DOI 10.1007/s10458-020-09478-3
   Castagna G, 2012, LOG METH COMPUT SCI, V8, DOI 10.2168/LMCS-8(1:24)2012
   Cau A, 1997, LECT NOTES COMPUT SC, V1231, P79
   Chen F, 2005, LECT NOTES COMPUT SC, V3440, P546
   Chen F, 2009, LECT NOTES COMPUT SC, V5505, P246, DOI 10.1007/978-3-642-00768-2_23
   Chen F, 2007, OOPSLA: 22ND INTERNATIONAL CONFERENCE ON OBJECT-ORIENTED PROGRAMMING, SYSTEMS, LANGUAGES, AND APPLICATIONS, PROCEEDINGS, P569
   Chimento JM, 2015, LECT NOTES COMPUT SC, V9333, P297, DOI 10.1007/978-3-319-23820-3_21
   Clemente Lorenzo, 2014, CONCUR 2014 - Concurrency Theory. 25th International Conference, CONCUR 2014. Proceedings: LNCS 8704, P281, DOI 10.1007/978-3-662-44584-6_20
   Cok DR, 2011, LECT NOTES COMPUT SC, V6617, P472, DOI 10.1007/978-3-642-20398-5_35
   Colombo Christian, 2012, Software Engineering and Formal Methods. Proceedings of the 10th International Conference, SEFM 2012, P218, DOI 10.1007/978-3-642-33826-7_15
   Colombo C, 2013, ELECTRON PROC THEOR, P1, DOI 10.4204/EPTCS.108.1
   Colombo C, 2009, SEFM 2009: SEVENTH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING AND FORMAL METHODS, P33, DOI 10.1109/SEFM.2009.13
   Colombo C, 2009, LECT NOTES COMPUT SC, V5596, P135, DOI 10.1007/978-3-642-03240-0_13
   Convent L, 2018, LNCS, V11254
   COURCELLE B, 1983, THEOR COMPUT SCI, V25, P95, DOI 10.1016/0304-3975(83)90059-2
   D'Angelo B, 2005, 12TH INTERNATIONAL SYMPOSIUM ON TEMPORAL REPRESENTATION AND REASONING, PROCEEDINGS, P166, DOI 10.1109/TIME.2005.26
   Davis JC, 2018, ESEC/FSE'18: PROCEEDINGS OF THE 2018 26TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P246, DOI 10.1145/3236024.3236027
   Delgado N, 2004, IEEE T SOFTWARE ENG, V30, P859, DOI 10.1109/TSE.2004.91
   Deniélou PM, 2012, LECT NOTES COMPUT SC, V7211, P194, DOI 10.1007/978-3-642-28869-2_10
   Dennis LA, 2012, AUTOMAT SOFTW ENG, V19, P5, DOI 10.1007/s10515-011-0088-x
   Engberg U., 1986, DAIMI REP SER, V15
   Falcone Y., 2013, Eng. Dependable Softw. Syst., P141, DOI [10.3233/978-1- 61499-207-3-141, DOI 10.3233/978-1-61499-207-3-141]
   Falcone Y, 2018, LECT NOTES COMPUT SC, V11237, P241, DOI 10.1007/978-3-030-03769-7_14
   Faymonville P, 2016, LECT NOTES COMPUT SC, V10012, P152, DOI 10.1007/978-3-319-46982-9_10
   Ferrando Angelo, 2020, Towards Autonomous Robotic Systems. 21st Annual Conference, TAROS 2020. Proceedings. Lecture Notes in Artificial Intelligence, Subseries of Lecture Notes in Computer Science (LNCS 12228), P387, DOI 10.1007/978-3-030-63486-5_40
   Ferrando A, 2017, AAMAS'17: PROCEEDINGS OF THE 16TH INTERNATIONAL CONFERENCE ON AUTONOMOUS AGENTS AND MULTIAGENT SYSTEMS, P239
   Ferrando A, 2018, PROCEEDINGS OF THE 17TH INTERNATIONAL CONFERENCE ON AUTONOMOUS AGENTS AND MULTIAGENT SYSTEMS (AAMAS' 18), P1933
   Ferrando A, 2018, LECT NOTES COMPUT SC, V11237, P263, DOI 10.1007/978-3-030-03769-7_15
   Ferrando A, 2016, LECT NOTES COMPUT SC, V10093, P39, DOI 10.1007/978-3-319-50983-9_3
   FORGY CL, 1982, ARTIF INTELL, V19, P17, DOI 10.1016/0004-3702(82)90020-0
   Franceschini L., 2020, THESIS DIBRIS U GENO
   Frisch A, 2008, J ACM, V55, DOI 10.1145/1391289.1391293
   Gamma Erich., 1994, DESIGN PATTERNS
   Gammie P, 2004, LECT NOTES COMPUT SC, V3114, P479
   HALBWACHS N, 1992, IEEE T SOFTWARE ENG, V18, P785, DOI 10.1109/32.159839
   Havelund K., 2000, Int. J. Softw. Tools Technol. Transfer, V2, P366, DOI [DOI 10.1007/S100090050043, 10.1007/s100090050043]
   Havelund K, 2008, LECT NOTES COMPUT SC, V4171, P374
   Havelund K, 2015, INT J SOFTW TOOLS TE, V17, P143, DOI 10.1007/s10009-014-0309-2
   HOARE CAR, 1969, COMMUN ACM, V12, P576, DOI 10.1145/363235.363259
   Hoenicke J., 2006, THESIS CARL OSSIETZK
   Hopcroft J.E., 1979, Introduction to Automata Theory, Languages, and Computation
   Jin D, 2012, PROC INT CONF SOFTW, P1427, DOI 10.1109/ICSE.2012.6227231
   Kahlon V, 2005, LECT NOTES COMPUT SC, V3576, P505
   Kiczales G, 1997, LECT NOTES COMPUT SC, V1241, P220, DOI 10.1007/BFb0053381
   Kiczales G., 2001, ECOOP 2001 - Object-Oriented Programming. 15th European Conference. Proceedings (Lecture Notes in Computer Science Vol.2072), P327
   Klint P, 2009, IEEE INT WORK C SO, P168, DOI 10.1109/SCAM.2009.28
   KOZEN D, 1983, THEOR COMPUT SCI, V27, P333, DOI 10.1016/0304-3975(82)90125-6
   Kroiss C, 2014, AAMAS'14: PROCEEDINGS OF THE 2014 INTERNATIONAL CONFERENCE ON AUTONOMOUS AGENTS & MULTIAGENT SYSTEMS, P1567
   LARSEN KG, 1990, THEOR COMPUT SCI, V72, P265, DOI 10.1016/0304-3975(90)90038-J
   Leavens Gary T, 2006, SIGSOFT Softw. Eng. Notes, V31, P1, DOI [10.1145/1127878.1127884, DOI 10.1145/1127878.1127884]
   Leroy X, 2009, INFORM COMPUT, V207, P284, DOI 10.1016/j.ic.2007.12.004
   Leucker M, 2018, 33RD ANNUAL ACM SYMPOSIUM ON APPLIED COMPUTING, P1925, DOI 10.1145/3167132.3167338
   Leucker M, 2009, J LOGIC ALGEBR PROGR, V78, P293, DOI 10.1016/j.jlap.2008.08.004
   Lomuscio A, 2006, LECT NOTES COMPUT SC, V3920, P450
   Martin M, 2005, ACM SIGPLAN NOTICES, V40, P365, DOI 10.1145/1103845.1094840
   Mascardi Viviana, 2013, AI*IA 2013: Advances in Artificial Intelligence. XIIIth International Conference of the Italian Association for Artificial Intelligence. Proceedings: LNCS 8249, P300, DOI 10.1007/978-3-319-03524-6_26
   MEYER B, 1992, COMPUTER, V25, P40, DOI 10.1109/2.161279
   Mizzi R., 2012, THESIS INTELLIGENCE
   Pandya P.K., 2000, SPECIFYING DECIDING
   PARR TJ, 1995, SOFTWARE PRACT EXPER, V25, P789, DOI 10.1002/spe.4380250705
   Peuli A., 1993, Proceedings of Eighth Annual IEEE Symposium on Logic in Computer Science (Cat. No.93CH3328-2), P124, DOI 10.1109/LICS.1993.287594
   Pnueli A, 2006, LECT NOTES COMPUT SC, V4085, P573
   Pnueli A., 1977, 18th Annual Symposium on Foundations of Computer Science, P46, DOI 10.1109/SFCS.1977.32
   Prior A. N., 1957, Time and Modality
   Reger Giles, 2015, Tools and Algorithms for the Construction and Analysis of Systems. 21st International Conference, TACAS 2015, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2015. Proceedings: LNCS 9035, P596, DOI 10.1007/978-3-662-46681-0_55
   Reger G, 2016, LECT NOTES COMPUT SC, V9953, P339, DOI 10.1007/978-3-319-47169-3_25
   Simon L, 2006, LECT NOTES COMPUT SC, V4079, P330, DOI 10.1007/11799573_25
   Sokolsky O, 2012, FORM METHOD SYST DES, V41, P233, DOI 10.1007/s10703-012-0174-0
   Thati P, 2005, ELECTRON NOTES THEOR, V113, P145, DOI 10.1016/j.entcs.2004.01.029
NR 114
TC 10
Z9 11
U1 0
U2 5
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAY 1
PY 2021
VL 205
AR 102610
DI 10.1016/j.scico.2021.102610
EA JAN 2021
PG 56
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA RC1OV
UT WOS:000632572100004
DA 2024-07-18
ER

PT J
AU Wasser, N
   Tabar, AH
   Hähnle, R
AF Wasser, Nathan
   Tabar, Asmae Heydari
   Haehnle, Reiner
TI Automated model extraction: From non-deterministic C code to active
   objects
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 21st IFIP WG 6.1 International Conference on Coordination Models and
   Languages (COORDINATION) Held as Part of the 14th International
   Federated Conference on Distributed Computing Techniques (DisCoTec)
CY JUN 17-21, 2019
CL Kongens Lyngby, DENMARK
SP Int Federat Informat Proc WG 6 1, Tech Univ Denmark, Dept Appl Math & Comp Sci, Nord IoT Hub
DE Non-deterministic behavior; Model extraction; Model validation
ID VERIFICATION
AB The C programming language is well-known to have a large amount of underspecified behavior that often results in non-determinism even of sequential programs. In many application areas, not necessarily safety-critical ones, this is highly undesirable. A number of approaches and tools that statically analyze such behavior have been suggested, but they suffer from a high number of false positives and negatives. We present a novel model-based approach to analyzing non-determinism that works by automatic extraction of a faithful model of a given C program in a concurrent active object language. The extracted model renders any non-deterministic behavior of the C program in terms of explicit concurrency. This opens the door to global, semantic analyses. We give a fully formal account of the model extraction process and present an experimental evaluation of its implementation in the model extraction tool C2ABS. (C) 2021 Elsevier B.V. All rights reserved.
C1 [Wasser, Nathan; Tabar, Asmae Heydari; Haehnle, Reiner] Tech Univ Darmstadt, Dept Comp Sci, D-64289 Darmstadt, Germany.
C3 Technical University of Darmstadt
RP Wasser, N (corresponding author), Tech Univ Darmstadt, Dept Comp Sci, D-64289 Darmstadt, Germany.
EM wasser@cs.tu-darmstadt.de
OI Hahnle, Reiner/0000-0001-8000-7613
FU Hessian LOEWE initiative within the Software-Factory 4.0 project
FX This work was funded by the Hessian LOEWE initiative within the
   Software-Factory 4.0 project. We thank Rudi Schlatte for his help and
   fruitful discussions, and the three anonymous reviewers for critical
   reading of earlier drafts which helped improve and clarify this
   manuscript.
CR Albert E, 2016, PROCEEDINGS OF THE 25TH INTERNATIONAL CONFERENCE ON COMPILER CONSTRUCTION (CC 2016), P269, DOI 10.1145/2892208.2892236
   Albert E, 2014, SERV ORIENTED COMPUT, V8, P323, DOI 10.1007/s11761-013-0148-0
   Bagnara R, 2018, LECT NOTES COMPUT SC, V11002, P5, DOI 10.1007/978-3-319-99725-4_2
   Cousot P, 2005, LECT NOTES COMPUT SC, V3444, P21
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   De Boer F, 2017, ACM COMPUT SURV, V50, DOI 10.1145/3122848
   Ellison C, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P533
   Hahnle Reiner, 2013, Formal Methods for Components and Objects. 11th International Symposium, FMCO 2012. Revised Lectures: LNCS 7866, P1, DOI 10.1007/978-3-642-40615-7_1
   Holzmann GJ, 2002, IEEE T SOFTWARE ENG, V28, P364, DOI 10.1109/TSE.2002.995426
   ISO, 1999, 98991999 ISO ISOIEC
   Johnsen E.B., 2011, Lecture Notes in Computer Science, V6957, P142, DOI [10.1007/978- 3- 642-25271-6 8, DOI 10.1007/978-3-642-25271-6]
   Kamburjan E, 2019, LECT NOTES ARTIF INT, V11714, P391, DOI 10.1007/978-3-030-29026-9_22
   Kim W, 1996, 3RD INTERNATIONAL CONFERENCE ON HIGH PERFORMANCE COMPUTING, PROCEEDINGS, P62, DOI 10.1109/HIPC.1996.565798
   Krebbers R, 2014, ACM SIGPLAN NOTICES, V49, P101, DOI 10.1145/2535838.2535878
   Krebbers Robbert, 2015, THESIS RADBOUD U NIJ
   Leroy X, 2009, COMMUN ACM, V52, P107, DOI 10.1145/1538788.1538814
   Memarian K, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290380
   Memarian K, 2016, ACM SIGPLAN NOTICES, V51, P1, DOI [10.1145/2908080.2908081, 10.1145/2980983.2908081]
   Motor Industry Research Association, 2013, MISRA C 2012 GUID US
   Norrish Michael, 1998, UCAMCLTR453
   Papaspyrou NS, 2001, COMP STAND INTER, V23, P169, DOI 10.1016/S0920-5489(01)00059-9
   Raza A, 2006, LECT NOTES COMPUT SC, V4006, P71
   Sirjani M, 2004, FUND INFORM, V63, P385
   Wasser Nathan, 2019, Fundamentals of Software Engineering. 8th International Conference, FSEN 2019. Revised Selected Papers. Lecture Notes in Computer Science (LNCS 11761), P213, DOI 10.1007/978-3-030-31517-7_15
   Wong Peter Y. H., 2012, International Journal on Software Tools for Technology Transfer, V14, P567, DOI 10.1007/s10009-012-0250-1
NR 25
TC 2
Z9 2
U1 1
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD APR 1
PY 2021
VL 204
AR 102597
DI 10.1016/j.scico.2020.102597
EA JAN 2021
PG 28
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA QH9AO
UT WOS:000618565200006
DA 2024-07-18
ER

PT J
AU Tesonea, P
   Ducasse, S
   Polito, G
   Fabresse, L
   Bouraqadi, N
AF Tesonea, Pablo
   Ducasse, Stephane
   Polito, Guillermo
   Fabresse, Luc
   Bouraqadi, Noury
TI A new modular implementation for stateful traits
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Traits; Dynamic languages; Meta-object protocol; Language extension;
   Modular languages; Metaclass specialization
AB The term traits is overloaded in the literature. In this work we refer to traits as the stateless model and implementation described in Schaerli et al. articles.
   Traits provide a flexible way to support multiple inheritance code reuse in the context of a single inheritance language. The Pharo programming language includes the second implementation of stateless traits based on the original version of Schaerli's one. Even if it is the second iteration of such an implementation, it presents several limitations. First, it does not support state in traits. Second, its implementation is monolithic i.e., it is deeply coupled with the rest of the language kernel: it cannot be loaded nor unloaded. Furthermore, trait support impacts all classes, even classes not using traits. In addition, while the development tools include full support to work with classes, trait support is more limited because classes and traits do not present the same Metaobject Protocol(MOP). Finally, being monolithic and integrated in the language kernel, it is difficult to extend this current implementation.
   This article describes a new modularand extensible implementation of traits: it is easily loadable and unloadable as any other package. In addition, classes not using traits are not impacted. Finally, this new implementation includes a new and carefully designed Metaobject Protocol (MOP) that is compatible with both classes and traits. This allows one to reuse existing tools as they do not require special support for traits. Then, following the semantics proposed for statefultraits in [6], we present a new implementation of stateful traits. This implementation is an extension of our new modular implementation. We implemented modular traits using specialized metaclasses as our main language extension mechanism. By replacing the implementation we reduced the Pharo Language Kernel size by 15%. This model and implementation are used in production since Pharo7.0 (January 2019). (C) 2020 Elsevier B.V. All rights reserved.
C1 [Tesonea, Pablo; Ducasse, Stephane] Inria Lille Nord Europe, Villeneuve Dascq, France.
   [Tesonea, Pablo; Fabresse, Luc; Bouraqadi, Noury] Univ Lille, IMT Lille Douai, Unite Rech Informat Automat, F-59000 Lille, France.
   [Polito, Guillermo] Univ Lille, CNRS, CRIStAL Ctr Rech Informat Signal & Automat Lille, Cent Lille,INRIA,UMR 9189, F-59000 Lille, France.
C3 Universite de Lille; IMT - Institut Mines-Telecom; IMT Nord Europe;
   Centre National de la Recherche Scientifique (CNRS); Inria; Universite
   de Lille; Centrale Lille
RP Tesonea, P (corresponding author), Inria Lille Nord Europe, Villeneuve Dascq, France.
EM pablo.tesone@inria.fr
OI Fabresse, Luc/0000-0002-2223-7258; Ducasse, Stephane/0000-0001-6070-6599
FU I-Site ERC-Generator Multi project 2018-2022; Metropole Europeenne de
   Lille
FX This work is supported by I-Site ERC-Generator Multi project 2018-2022.
   We gratefully acknowledge the financial support of the Metropole
   Europeenne de Lille.
CR Allen Eric, 2005, Em: Sun Microsystems, V139, P140
   Bak L., 2002, ECOOP 02 WORKSH INH
   Bergel A, 2007, LECT NOTES COMPUT SC, V4406, P66
   Bettini L, 2013, SCI COMPUT PROGRAM, V78, P521, DOI 10.1016/j.scico.2011.06.007
   Bettini Lorenzo, 2016, J SYST SOFTW, V131
   Bi Xuan, 2018, 32 EUR C OBJ OR PROG
   Black A.P., 2009, PHARO EXAMPLE
   Bono V, 2012, LECT NOTES COMPUT SC, V7313, P560, DOI 10.1007/978-3-642-31057-7_25
   Bouraqadi N, 2004, COMPUT LANG SYST STR, V30, P49, DOI 10.1016/j.cl.2003.09.003
   Bouraqadi-Saadani NMN, 1998, ACM SIGPLAN NOTICES, V33, P84, DOI 10.1145/286942.286949
   BRACHA G, 1990, SIGPLAN NOTICES, V25, P303, DOI 10.1145/97946.97982
   Cazzola Walter, 2017, ART SCI ENG PROGRAMM, V1
   Danforth Scott, 1994, P TOOLS EUROPE 94 VE, P63
   Dierk Konig with., 2007, Groovy in Action
   Ducasse S, 2006, ACM T PROGR LANG SYS, V28, P331, DOI 10.1145/1119479.1119483
   Ducasse S, 2005, COMPUT LANG SYST STR, V31, P143, DOI 10.1016/j.cl.2004.11.003
   Ducasse S, 2007, OOPSLA: 22ND INTERNATIONAL CONFERENCE ON OBJECT-ORIENTED PROGRAMMING, SYSTEMS, LANGUAGES, AND APPLICATIONS, PROCEEDINGS, P171
   Fisher Kathleen, 2004, EL P FOOL, V2004
   Flanagan David, 1997, JAVASCRIPT DEFINITIV
   Flatt M, 2006, LECT NOTES COMPUT SC, V4279, P270
   Forman I, 1999, PUTTING METACLASSES
   Ghan Bir Singh, 1994, OOPS Messenger, V5, P34
   Goldberg A., 1989, Smalltalk-80 : The Language
   Holzle U., 1991, SELF MANUAL
   Kiczales G., 1991, The Art of the Metaobject Protocol
   Lienhard Adrian, 2004, THESIS
   Lockhart Josh., 2015, Modern PHP: New Features and Good Practices
   Lutz M., 2001, Programming Python
   Malayeri D, 2009, ACM SIGPLAN NOTICES, V44, P21, DOI 10.1145/1639949.1640092
   Matsakis N. D., 2014, P 2014 ACM SIGADA AN, V34, P103, DOI [DOI 10.1145/2663171.2663188, 10.1145/2663171.2663188]
   Naddeo Marco, 2017, THESIS
   Nierstrasz O., 2005, ACM SIGSOFT SOFTWARE, V30, P1, DOI [DOI 10.1145/1095430, 10.1145/1095430.1081707, DOI 10.1145/1095430.1081707]
   Nierstrasz O, 2006, J OBJECT TECHNOL, V5, P129, DOI 10.5381/jot.2006.5.4.a4
   Nierstrasz Oscar Marius, 2005, ADDING TRAITS STAT T
   Odersky M., 2007, TECHNICAL REPORT
   POLITO G, 2017, ART SCI ENG PROGRAMM, V7, DOI DOI 10.1038/S41598-017-08278-2
   Polito Guillermo, 2015, THESIS
   Polito Guillermo, 2014, SCI COMPUT PROGRAM
   Randal Allison, 2004, PERL 6 PARROT ESSENT
   Razavi R, 2005, COMPUT LANG SYST STR, V31, P199, DOI 10.1016/j.cl.2004.11.001
   Reppy J, 2007, LECT NOTES COMPUT SC, V4609, P373
   Ressia Jorge, 2012, P 34 INT C SOFTW ENG
   Sakkinen M., 1989, ECOOP '89. Proceedings of the 1989 European Conference on Object-Oriented Programming, P39
   Schärli N, 2003, LECT NOTES COMPUT SC, V2743, P248
   Schinz Michel, 2005, EPFL SUPERCOMPUT REV
   Tesone Pablo, 2018, SAC 2018
   van Cutsem Tom, 2011, P PLASTIC 11
NR 47
TC 7
Z9 7
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 1
PY 2020
VL 195
AR 102470
DI 10.1016/j.scico.2020.102470
PG 18
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA LR7RO
UT WOS:000535893800001
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Neele, T
   Willemse, TAC
   Groote, JF
AF Neele, Thomas
   Willemse, Tim A. C.
   Groote, Jan Friso
TI Finding compact proofs for infinite-data parameterised Boolean equation
   systems
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 15th International Conference on Formal Aspects of Component Software
   (FACS)
CY OCT 10-12, 2018
CL Pohang, SOUTH KOREA
DE Symbolic model checking; Modal mu-calculus; Parameterised Boolean
   equation system; Bisimulation; Infinite state system
ID CHECKING
AB Parameterised Boolean Equation Systems (PBESs) can be used to represent many different kinds of decision problems. Most notably, model checking and equivalence problems can be encoded in a PBES. Traditional techniques to solve PBESs, such as instantiation techniques, cannot deal with PBESs with an infinite data domain. We propose an approach that can solve PBESs with infinite data by computing the bisimulation quotient of the underlying graph structure. Furthermore, we show how this technique can be improved by repeatedly searching for finite proofs. We also apply knowledge of intermediate solutions in an early termination heuristic. Unlike existing approaches, our technique is not restricted to subfragments of PBESs. Compared to similar procedures that operate on behavioural models, our technique is also more general: it is not restricted to model checking with finite action sets. Experimental results show that our ideas work well in practice and support a wider range of models and properties than state-of-the-art techniques. (C) 2020 Elsevier B.V. All rights reserved.
C1 [Neele, Thomas; Willemse, Tim A. C.; Groote, Jan Friso] Eindhoven Univ Technol, Eindhoven, Netherlands.
C3 Eindhoven University of Technology
RP Neele, T (corresponding author), Eindhoven Univ Technol, Eindhoven, Netherlands.
EM T.S.Neele@tue.nl; T.A.C.Willemse@tue.nl; J.F.Groote@tue.nl
OI Neele, Thomas/0000-0001-6117-9129; Groote, Jan Friso/0000-0003-2196-6587
CR ALUR R, 1992, LECT NOTES COMPUT SC, V630, P340
   [Anonymous], 1981, Lecture Notes in Computer Science, DOI [10.1007/BFb0017309, DOI 10.1007/BFB0017309]
   Behrmann G, 2004, LECT NOTES COMPUT SC, V3185, P200
   BOUAJJANI A, 1992, SCI COMPUT PROGRAM, V18, P247, DOI 10.1016/0167-6423(92)90018-7
   Bunte O, 2019, LECT NOTES COMPUT SC, V11428, P21, DOI 10.1007/978-3-030-17465-1_2
   Chen TL, 2007, LECT NOTES COMPUT SC, V4703, P120
   Clarke EdmundM., 2000, Proceedings of the International Conference on Computer Aided Veri cation (CAV), P154, DOI 10.1007/1072216715
   Cranen Sjoerd, 2013, CONCUR 2013 - Concurrency Theory. 24th International Conference, CONCUR 2013. Proceedings: LNCS 8052, P470, DOI 10.1007/978-3-642-40184-8_33
   Cranen Sjoerd, 2012, Theoretical Aspects of Computing - ICTAC 2012. Proceedings of the 9th International Colloquium, P198, DOI 10.1007/978-3-642-32943-2_16
   Cranen S, 2015, ACM T COMPUT LOG, V16, DOI 10.1145/2740964
   Fisler K, 1999, LECT NOTES COMPUT SC, V1703, P338
   Fontana Peter, 2014, Formal Modeling and Analysis of Timed Systems. 12th International Conference, FORMATS 2014. Proceedings. LNCS: 8711, P115, DOI 10.1007/978-3-319-10512-3_9
   Garavel Hubert, 2013, International Journal on Software Tools for Technology Transfer, V15, P89, DOI 10.1007/s10009-012-0244-z
   Groote JF, 2005, THEOR COMPUT SCI, V343, P332, DOI 10.1016/j.tcs.2005.06.016
   Groote JF, 2005, SCI COMPUT PROGRAM, V56, P251, DOI 10.1016/j.scico.2004.08.002
   Hesselink WH, 1998, INFORM PROCESS LETT, V68, P173, DOI 10.1016/S0020-0190(98)00158-6
   Kant G, 2012, ELECTRON P THEOR COM, P50, DOI 10.4204/EPTCS.99.7
   Keiren J.J.A., 2009, P HVC 09 HAIF ISR OC, V6405, P102
   Keiren JJA, 2014, LECT NOTES COMPUT SC, V8837, P219, DOI 10.1007/978-3-319-11936-6_16
   Knuth D.E., 1991, Artificial Intelligence and Mathematical Theory of Computation, P207
   Koolen RPJ, 2015, LECT NOTES COMPUT SC, V9364, P14, DOI 10.1007/978-3-319-24953-7_3
   KOZEN D, 1983, THEOR COMPUT SCI, V27, P333, DOI 10.1016/0304-3975(82)90125-6
   LAMPORT L, 1974, COMMUN ACM, V17, P453, DOI 10.1145/361082.361093
   Lee D., 1992, STOC, P264
   Mader A., 1995, LECT NOTES COMPUT SC, V1019, P72
   Nagae Y., 2017, EPICS, V265, P67
   Nagae Y., 2016, EPTCS, V235, P46
   Neele Thomas, 2018, Formal Aspects of Component Software. 15th International Conference (FACS 2018). Proceedings: Lecture Notes in Computer Science (LNCS 11222), P216, DOI 10.1007/978-3-030-02146-7_11
   Orzan S, 2009, LECT NOTES COMPUT SC, V5505, P230, DOI 10.1007/978-3-642-00768-2_22
   Ploeger B, 2011, INFORM COMPUT, V209, P637, DOI 10.1016/j.ic.2010.11.025
   Tripakis S, 2001, FORM METHOD SYST DES, V18, P25, DOI 10.1023/A:1008734703554
   Wesselink W., 2018, P ARQNL 2018 AFFILIA, V2095, P86
   Willemse TAC, 2010, LECT NOTES COMPUT SC, V6269, P584, DOI 10.1007/978-3-642-15375-4_40
   Zielonka W, 1998, THEOR COMPUT SCI, V200, P135, DOI 10.1016/S0304-3975(98)00009-7
NR 34
TC 1
Z9 1
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR 1
PY 2020
VL 188
AR 102389
DI 10.1016/j.scico.2019.102389
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA KM3JO
UT WOS:000514017500001
OA Green Published, hybrid
DA 2024-07-18
ER

PT J
AU Hamana, M
   Abe, T
   Kikuchi, K
AF Hamana, Makoto
   Abe, Tatsuya
   Kikuchi, Kentaro
TI Polymorphic computation systems: Theory and practice of confluence with
   call-by-value
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 14th International Symposium on Functional and Logic Programming (FLOPS)
CY MAY 09-11, 2018
CL Nagoya, JAPAN
SP Japan Soc Software Sci & Technol, Special Interest Grp Programming & Programming Languages
DE Polymorphism; lambda-calculus; Type inference; Second-order algebraic
   theory; Confluence
ID TERMINATION; ALGEBRA
AB We present a new framework of polymorphic computation rules that can accommodate a distinction between values and non-values. It is suitable for analysing fundamental calculi of programming languages. We develop a type inference algorithm and new criteria to check the confluence property. These techniques are then implemented in our automated confluence checking tool PolySOL. Its effectiveness is demonstrated through examination of various calculi, including the call-by-need lambda-calculus, Moggi's computational lambdacalculus, and skew-monoidal categories. (C) 2019 Elsevier B.V. All rights reserved.
C1 [Hamana, Makoto] Gunma Univ, Dept Comp Sci, Maebashi, Gunma, Japan.
   [Abe, Tatsuya] Chiba Inst Technol, STAIR Lab, Narashino, Chiba, Japan.
   [Kikuchi, Kentaro] Tohoku Univ, Res Inst Elect Commun, Sendai, Miyagi, Japan.
C3 Gunma University; Chiba Institute of Technology; Tohoku University
RP Hamana, M (corresponding author), Gunma Univ, Dept Comp Sci, Maebashi, Gunma, Japan.
EM hamana@cs.gunma-u.ac.jp; abet@stair.center;
   kentaro.kikuchi@riec.tohoku.ac.jp
RI Hamana, Makoto/IVU-8283-2023
OI Hamana, Makoto/0000-0002-3064-8225; Abe, Tatsuya/0000-0002-3887-0787
FU JSPS KAKENHI [JP17K00092, JP17K00005, JP19K11891]; Grants-in-Aid for
   Scientific Research [20H04164] Funding Source: KAKEN
FX The first author is grateful to Masahito Hasegawa for his question about
   methods to check confluence of Moggi's computational lambda-calculus
   using the earlier tool, SOL. The author was thereby enlightened to the
   necessity of proper treatment of call -by-value calculi, which led to
   the framework described in this paper. This work was partly supported by
   JSPS KAKENHI Grant Numbers JP17K00092, JP17K00005 and JP19K11891.
CR Altenkirch T, 2015, LOG METH COMPUT SCI, V11, DOI 10.2168/LMCS-11(1:3)2015
   [Anonymous], [No title captured]
   [Anonymous], 1999, Communicating and Mobile Systems: The Calculus
   [Anonymous], [No title captured]
   [Anonymous], 2016, SCSS
   [Anonymous], 1984, The Lambda Calculus: Its Syntax and Semantics
   [Anonymous], 1970, Computational Problems in Abstract Algebra, DOI DOI 10.1016/B978-0-08-012975-4.50028-X
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   Baader Franz, 1998, TERM REWRITING ALL
   Damas L., 1982, C REC 9 ANN ACM S PR, P207, DOI DOI 10.1145/582153.582176
   Fiore M, 2013, IEEE S LOG, DOI 10.1109/LICS.2013.59
   Fiore M, 2010, LECT NOTES COMPUT SC, V6281, P368, DOI 10.1007/978-3-642-15155-2_33
   Fiore M, 2010, LECT NOTES COMPUT SC, V6247, P320, DOI 10.1007/978-3-642-15205-4_26
   Hamana M, 2005, LECT NOTES COMPUT SC, V3467, P135
   Hamana M, 2004, LECT NOTES COMPUT SC, V3302, P348
   Hamana Makoto, 2007, Proceedings of the 9th International ACM SIGPLAN Conference on Principles and Practice of Declarative Programming (PPDP'07), P97, DOI 10.1145/1273920.1273933
   Hamana M, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110266
   Hamana M, 2018, LECT NOTES COMPUT SC, V10818, P99, DOI 10.1007/978-3-319-90686-7_7
   Hamana M, 2018, MATH STRUCT COMP SCI, V28, P287, DOI 10.1017/S096012951600027X
   Hamana M, 2012, LECT NOTES COMPUT SC, V7294, P136, DOI 10.1007/978-3-642-29822-6_13
   Hamana M, 2011, LECT NOTES COMPUT SC, V6604, P381, DOI 10.1007/978-3-642-19805-2_26
   Hamana M, 2010, LECT NOTES COMPUT SC, V5979, P62, DOI 10.1007/978-3-642-11999-6_5
   HUET G, 1980, J ACM, V27, P797, DOI 10.1145/322217.322230
   Jouannaud JP, 2007, J ACM, V54, DOI 10.1145/1206035.1206037
   Jouannaud JP, 2015, ACM T COMPUT LOG, V16, DOI 10.1145/2699913
   Lane S.Mac., 1971, GRADUATE TEXTS MATH, V5
   Lindley S, 2005, LECT NOTES COMPUT SC, V3461, P262
   Maraist J., 1998, Journal of Functional Programming, V8, P275, DOI 10.1017/S0956796898003037
   Mayr R, 1998, THEOR COMPUT SCI, V192, P3, DOI 10.1016/S0304-3975(97)00143-6
   Miller D., 1991, Journal of Logic and Computation, V1, P497, DOI 10.1093/logcom/1.4.497
   Moggi E., 1988, LFCS report ECS-LFCS-88-66
   Nagele J, 2017, LECT NOTES ARTIF INT, V10395, P385, DOI 10.1007/978-3-319-63046-5_24
   NIPKOW T, 1991, SIXTH ANNUAL IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P342
   Ohta Y, 2006, LECT NOTES COMPUT SC, V4098, P166
   Plotkin G. D., 1975, Theoretical Computer Science, V1, P125, DOI 10.1016/0304-3975(75)90017-1
   Sabry A, 1997, ACM T PROGR LANG SYS, V19, P916, DOI 10.1145/267959.269968
   Staton S, 2015, ACM SIGPLAN NOTICES, V50, P395, DOI [10.1145/2676726.2676999, 10.1145/2775051.2676999]
   Staton S, 2013, IEEE S LOG, P519, DOI 10.1109/LICS.2013.58
   Staton S, 2013, LECT NOTES COMPUT SC, V7794, P401, DOI 10.1007/978-3-642-37075-5_26
   Szlachányi K, 2012, ADV MATH, V231, P1694, DOI 10.1016/j.aim.2012.06.027
   Uustalu T, 2014, ELECTRON PROC THEOR, P68, DOI 10.4204/EPTCS.153.5
   Yamada Akihisa, 2014, Rewriting and Typed Lambda Calculi. Joint International Conference, RTA-TLCA 2014, Held as Part of the Vienna Summer of Logic, VSL 2014. Proceedings: LNCS 8560, P466, DOI 10.1007/978-3-319-08918-8_32
NR 43
TC 2
Z9 2
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29a, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 15
PY 2020
VL 187
AR 102322
DI 10.1016/j.scico.2019.102322
PG 30
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA KM2YN
UT WOS:000513988800007
OA Bronze
DA 2024-07-18
ER

PT J
AU Bouraoui, A
   Gharbi, I
AF Bouraoui, Amina
   Gharbi, Imen
TI Model driven engineering of accessible and multi-platform graphical user
   interfaces by parameterized model transformations
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Model based development; Model transformation; User interface;
   Accessibility; Adaptability; Multi-platform user interfaces
AB With the spectacular development of pervasive computing and the widespread use of mobile technologies, the user usually resorts to a wide variety of user platforms. Moreover, the applications deployed on such platforms usually lack specific support for people suffering from disabilities. This is especially valid in the Tunisian context where the current status of digital accessibility is far from being perfect since the developer's community still ignores accessibility-related programming techniques. Consequently, further efforts are still required to resolve the issues related to the growing variety of available devices and of accessibility difficulties met by different categories of users.
   Therefore, in this paper we are introducing a model driven approach that aims to assist local and worldwide communities of developers throughout the development process of accessible user interfaces (UIs) targeting several emerging platforms. Based on a set of models from different abstraction levels followed by transformations, this approach provides a generic framework that integrates accessibility concerns starting from the design time. It allows the generation of accessible interfaces with a focus on the graphical and adaptation aspects on various platforms regardless of the developer expertise in UI accessibility. (C) 2018 Elsevier B.V. All rights reserved.
C1 [Bouraoui, Amina] Univ Tunis El Manar, Inst Super Technol Med ISTMT, 9 Rue Zouhair Essafi, Tunis, Tunisia.
   [Bouraoui, Amina; Gharbi, Imen] Univ Manouba, ENSI, Natl Sch Comp Sci, Riadi GLORY, Campus Univ, Manouba, Tunisia.
C3 Universite de Tunis-El-Manar; Universite de la Manouba
RP Bouraoui, A (corresponding author), Univ Tunis El Manar, Inst Super Technol Med ISTMT, 9 Rue Zouhair Essafi, Tunis, Tunisia.; Bouraoui, A (corresponding author), Univ Manouba, ENSI, Natl Sch Comp Sci, Riadi GLORY, Campus Univ, Manouba, Tunisia.
EM hannibal.a@topnet.tn; imen.gharbi@ensi-uma.tn
OI Bouraoui, Amina/0000-0002-9531-3776
CR Akoumianakis D, 1999, ERGONOMICS, V42, P1283, DOI 10.1080/001401399184956
   [Anonymous], XHTML 1 0 EXT HYPERT
   [Anonymous], 2012, SYNTHESIS LECT SOFTW
   [Anonymous], 1999, P SIGCHI C HUM FACT, DOI DOI 10.1145/302979.303126
   [Anonymous], P INT WORKSH S MOD S
   [Anonymous], RAPP MOND HAND
   Baumann  R., 2014, REH ENG ASS TECHN SO
   Bouillon L, 2005, THIRD LATIN AMERICAN WEB CONGRESS, PROCEEDINGS, P3
   Bouraoui A, 2018, LECT NOTES COMPUT SC, V10896, P357, DOI 10.1007/978-3-319-94277-3_56
   Brambilla M., 2014, Interaction Flow Modeling Language: Model-Driven UI Engineering of Web and Mobile Apps with IFML
   Caldwell Ben, 2008, WWW CONSORTIUM W3C, V290, P1
   Calvary G, 2003, INTERACT COMPUT, V15, P289, DOI 10.1016/S0953-5438(03)00010-9
   Chmielewski J, 2016, PERS UBIQUIT COMPUT, V20, P185, DOI 10.1007/s00779-016-0903-2
   Collignon B, 2008, APPLIED COMPUTING 2008, VOLS 1-3, P1634
   Czarnecki K., 2003, P 2 OOPSLA WORKSH GE, V45, P1
   da Silva AR, 2015, COMPUT LANG SYST STR, V43, P139, DOI 10.1016/j.cl.2015.06.001
   Dalai  M., 2011, XAML DEV REFERENCE
   Doukas  C., 2013, GLOB INF INFR S 2013, P1
   Duran-Limon H. A., 2003, TECHNICAL REPORT
   Gajos KZ, 2010, ARTIF INTELL, V174, P910, DOI 10.1016/j.artint.2010.05.005
   Gronback R.C., 2009, THE ECLIPSE SERIES
   Guerrero-García J, 2009, LA-WEB: 2009 LATIN AMERICAN WEB CONGRESS, P36, DOI 10.1109/LA-WEB.2009.40
   Hammoudi  S., 2005, REV SCI TECHNOL INF, V10, P67
   Heitkotter Henning, 2013, P 28 ANN ACM S APPL, P526
   Helms J, 2009, HUM-COMPUT INT-SPRIN, P139, DOI 10.1007/978-1-84800-907-3_7
   Instance nationale des telecommunications, TABL BORD TEL MOB
   Jindal  G., 2013, INT J COMPUT APPL EN, V2, P202
   Kessentini M, 2012, SOFTW SYST MODEL, V11, P209, DOI 10.1007/s10270-010-0175-7
   Klyne G., COMPOSITE CAPABILITY
   Kolovos DS, 2006, LECT NOTES COMPUT SC, V4199, P215
   Krainz  E., 2016, P 6 INT C HUM CTR SO, P374
   Kusel A, 2015, SOFTW SYST MODEL, V14, P537, DOI 10.1007/s10270-013-0343-7
   Lachgar M., 2015, 2015 3 WORLD C COMPL, P1, DOI [10.1109/ICoCS.2015.7483269, DOI 10.1109/ICOCS.2015.7483269]
   Limbourg Q, 2005, LECT NOTES COMPUT SC, V3425, P200
   Mens T, 2006, ELECTRON NOTES THEOR, V152, P125, DOI 10.1016/j.entcs.2005.10.021
   Michotte B, 2008, FOURTH INTERNATIONAL CONFERENCE ON AUTONOMIC AND AUTONOMOUS SYSTEMS (ICAS 2008), P15, DOI 10.1109/ICAS.2008.29
   Min BK, 2011, 2011 IEEE REGION 10 CONFERENCE TENCON 2011, P201, DOI 10.1109/TENCON.2011.6129092
   Miñón R, 2016, UNIVERSAL ACCESS INF, V15, P153, DOI 10.1007/s10209-015-0406-3
   Mitrovic N., 2016, P 10 INT C MOB UB CO, P96
   Monfort V, 2009, LECT NOTES COMPUT SC, V5900, P175, DOI 10.1007/978-3-642-10383-4_12
   Morris J., 2011, Android User Interface Development Beginner's Guide
   Mouloudi A., 2015, 3 WORLD C COMPL SYST, P1, DOI 10.1109/ICoCS.2015.7483318
   Object Management Group, AD20020410 OMG
   Object Management Group, 2014, OMG DOC
   OMG, AD030107 OMG
   OMG, 2015, MET FAC MOF COR SPEC
   Paterno Fabio, 2008, International Journal of Web Engineering and Technology, V4, P235, DOI 10.1504/IJWET.2008.018099
   Paterno F, 2009, ACM T COMPUT-HUM INT, V16, DOI 10.1145/1614390.1614394
   Pilgrim  M., 2006, EMBEDDING ACCESSIBIL
   Raneburger D, 2014, COMM COM INF SC, V457, P180, DOI 10.1007/978-3-662-44920-2_12
   Rutter R., 2007, Web accessibility: Web standards and regulatory compliance: Apress
   Sabraoui A., 2012, em 2012 IEEE International Conference on Complex Systems (ICCS), P1, DOI DOI 10.1109/ICOCS.2012.6458567
   Sendall S, 2003, IEEE SOFTWARE, V20, P42, DOI 10.1109/MS.2003.1231150
   Son H.S., 2013, International Journal of Software Engineering i Its Applications, V7, P415, DOI [10.1016/j.scico.2018.11.002, DOI 10.1016/J.SCICO.2018.11.002]
   Stanciulescu  A., 2008, P 3 INT WORKSH GRAPH, P37
   Stephanidis C., 2001, Universal Access in the Information Society, V1, P40
   Trani JF, 2015, J HUM DEV CAPABIL, V16, P518, DOI 10.1080/19452829.2015.1091808
   Umuhoza E, 2016, LECT NOTES COMPUT SC, V9847, P93, DOI 10.1007/978-3-319-44215-0_8
   Usman Muhammad, 2014, 2014 21st Asia-Pacific Software Engineering Conference (APSEC), P111, DOI 10.1109/APSEC.2014.26
   Vale S., 2008, P 1 INT WORKSH MOD D, V340, P121
   Vtilter  M., 2013, MODEL DRIVEN SOFTWAR
   Wohlin C., 2012, Experimentation in Software Engineering
NR 62
TC 6
Z9 6
U1 2
U2 8
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR 1
PY 2019
VL 172
BP 63
EP 101
DI 10.1016/j.scico.2018.11.002
PG 39
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA HK8HC
UT WOS:000458229000004
OA Bronze
DA 2024-07-18
ER

PT J
AU Ameller, D
   Burgués, X
   Costal, D
   Farre, C
   Franch, X
AF Ameller, David
   Burgues, Xavier
   Costal, Dolors
   Farre, Carles
   Franch, Xavier
TI Non-functional requirements in model-driven development of
   service-oriented architectures
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Model-driven development; Non-functional requirements; Quality
   requirement; Service-oriented architecture; Systematic literature review
ID GENERATION
AB Any software development process needs to consider non-functional requirements (NFR) in order to deliver a system that complies with its stakeholders' expectations. In a previous mapping study about model-driven development (MDD) for service-oriented architectures (SOA) we found a limited number of approaches managing NFR. The present work aims at analyzing in detail the state of the art in the management of NFR in MDD processes which produce SOA. We have conducted a systematic literature review following a rigorous protocol. We have taken as initial point the mapping study mentioned above and have used the subset of the 31 papers from this study (clustered into 15 approaches) that referred to NFR. We have analyzed them qualitatively in order to answer six research questions. We have built a Software Engineering theory to formalize this analysis. As result we highlight that most of approaches focus exclusively on security and reliability and we observe that NFR are expressed mainly as annotations of functional models represented in UML. From our perspective, existing research on the topic of this study is still scarce and without any evidence of transferability to industry. This situation suggests the need for further investigation efforts in order to produce validated MDD methods capable of generating SOA satisfying NFR stated by stakeholders. (C) 2018 Elsevier B.V. All rights reserved.
C1 [Ameller, David; Burgues, Xavier; Costal, Dolors; Farre, Carles; Franch, Xavier] Univ Politecn Cataluna, Dept ESSI, Jordi Girona Salgado 1-3, ES-08034 Barcelona, Spain.
C3 Universitat Politecnica de Catalunya
RP Burgués, X (corresponding author), Univ Politecn Cataluna, Dept ESSI, Jordi Girona Salgado 1-3, ES-08034 Barcelona, Spain.
EM dameller@essi.upc.edu; diafebus@essi.upc.edu; dolors@essi.upc.edu;
   farre@essi.upc.edu; franch@essi.upc.edu
RI Farré, Carles/A-4062-2008; Farré, Carles/ABG-2966-2020; Franch,
   Xavier/A-8588-2008; Costal, Dolors/F-7862-2016; Burgues,
   Xavier/G-2152-2016
OI Farré, Carles/0000-0001-5814-3782; Farré, Carles/0000-0001-5814-3782;
   Costal, Dolors/0000-0002-7340-0414; Burgues, Xavier/0000-0001-6974-9886
FU Spanish MICINN [TIN2016-79269-R]
FX This work has been partially supported by the Spanish MICINN [project
   TIN2016-79269-R].
CR Alam MM, 2004, INMIC 2004: 8TH INTERNATIONAL MULTITOPIC CONFERENCE, PROCEEDINGS, P498
   Alves V, 2010, INFORM SOFTWARE TECH, V52, P806, DOI 10.1016/j.infsof.2010.03.014
   Ameller D, 2016, SOFTWARE QUAL J, V24, P271, DOI 10.1007/s11219-015-9268-4
   Ameller D, 2015, INT REQUIR ENG CONF, P208, DOI 10.1109/RE.2015.7320424
   Ameller D, 2015, INFORM SOFTWARE TECH, V62, P42, DOI 10.1016/j.infsof.2015.02.006
   Ameller D, 2013, IEEE SOFTWARE, V30, P61, DOI 10.1109/MS.2012.176
   [Anonymous], 84021994 ISO IEC
   [Anonymous], SEKE 2011
   [Anonymous], C2M EEMDD ECMFA 2010
   [Anonymous], IEEE RE 2010
   [Anonymous], SPECIAL PUBLICATION
   [Anonymous], E INFORM
   [Anonymous], UML PROF MOD QUAL SE
   [Anonymous], TECHNICAL REPORT
   [Anonymous], IEEE SOFTW
   [Anonymous], GUIDE ADV EMPIRICAL
   Anzböck R, 2005, LECT NOTES COMPUT SC, V3649, P64, DOI 10.1007/11538394_5
   Atkinson C, 2003, IEEE SOFTWARE, V20, P36, DOI 10.1109/MS.2003.1231149
   Bocciarelli P, 2011, SOFTW SYST MODEL, V10, P265, DOI 10.1007/s10270-010-0150-3
   Borek M, 2012, IEEE ANNU SOFTW ENG, P62, DOI 10.1109/SEW.2012.13
   Brambilla M., 2012, Model-Driven Software Engineering in Practice, DOI [DOI 10.1007/978-3-031-02549-5, 10.2200/S00441ED1V01Y201208SWE001, DOI 10.2200/S00441ED1V01Y201208SWE001]
   Chan K, 2007, INFORM SYST FRONT, V9, P209, DOI 10.1007/s10796-007-9033-8
   Chung L., 2000, Non-functional Requirements in Software Engineering
   Chung L, 2009, LECT NOTES COMPUT SC, V5600, P363, DOI 10.1007/978-3-642-02463-4_19
   D'Ambrogio A, 2006, ICWS 2006: IEEE INTERNATIONAL CONFERENCE ON WEB SERVICES, PROCEEDINGS, P789
   Delessy NA, 2008, ARES 2008: PROCEEDINGS OF THE THIRD INTERNATIONAL CONFERENCE ON AVAILABILITY, SECURITY AND RELIABILITY, P416, DOI 10.1109/ARES.2008.89
   Erl T, 2005, SERVICE ORIENTED ARC
   Erl T., 2012, Soa with rest: Principles, patterns constraints for building enterprise solutions with rest, V1st
   Franch X, 2003, IEEE SOFTWARE, V20, P34, DOI 10.1109/MS.2003.1159027
   Gilmore S, 2011, SOFTW SYST MODEL, V10, P287, DOI 10.1007/s10270-010-0155-y
   Glinz M, 2007, INT REQUIR ENG CONF, P21, DOI 10.1109/RE.2007.45
   Gronmo R, 2005, LECT NOTES COMPUT SC, V3543, P68
   Hafner M, 2006, LECT NOTES COMPUT SC, V4199, P275
   ISO/IEC, 2010, Technical report
   Jensen M, 2009, 16TH ANNUAL IEEE INTERNATIONAL CONFERENCE AND WORKSHOP ON THE ENGINEERING OF COMPUTER BASED SYSTEMS, PROCEEDINGS, P340, DOI 10.1109/ECBS.2009.14
   Jiang M, 2007, USIC 2007: PROCEEDINGS OF THE SEVENTH INTERNATIONAL CONFERENCE ON QUALITY SOFTWARE, P100
   Kim S, 2009, J SYST SOFTWARE, V82, P1211, DOI 10.1016/j.jss.2009.03.102
   Kitchenham B., 2007, Joint Report
   Kitchenham BA, 2002, IEEE T SOFTWARE ENG, V28, P721, DOI 10.1109/TSE.2002.1027796
   Lawrence B, 2001, IEEE SOFTWARE, V18, P62, DOI 10.1109/52.965804
   Manset D, 2006, ICEIS 2006: PROCEEDINGS OF THE EIGHTH INTERNATIONAL CONFERENCE ON ENTERPRISE INFORMATION SYSTEMS, P322
   Matthew MacKenzie C., 2006, Technical Report
   Mehmood A, 2013, INFORM SOFTWARE TECH, V55, P395, DOI 10.1016/j.infsof.2012.09.003
   Mellor SJ, 2003, IEEE SOFTWARE, V20, P14, DOI 10.1109/MS.2003.1231145
   Menzel M., 2010, 2010 IEEE 7th International Conference on Services Computing (SCC 2010), P146, DOI 10.1109/SCC.2010.63
   Menzel Michael, 2010, 2010 IEEE International Conference on Web Services (ICWS), P243, DOI 10.1109/ICWS.2010.25
   Menzel M, 2009, 2009 IEEE INTERNATIONAL CONFERENCE ON SERVICES COMPUTING, P251, DOI 10.1109/SCC.2009.57
   Menzel M, 2009, 2009 INTERNATIONAL CONFERENCE ON AVAILABILITY, RELIABILITY, AND SECURITY (ARES), VOLS 1 AND 2, P41, DOI 10.1109/ARES.2009.90
   Mohagheghi P, 2013, EMPIR SOFTW ENG, V18, P89, DOI 10.1007/s10664-012-9196-x
   MYLOPOULOS J, 1992, IEEE T SOFTWARE ENG, V18, P483, DOI 10.1109/32.142871
   Nagaratnam N, 2005, IBM SYST J, V44, P847, DOI 10.1147/sj.444.0847
   Nakamura Y, 2005, P IEEE I C SERV COMP, P7
   Papazoglou MP, 2003, COMMUN ACM, V46, P25, DOI 10.1145/944217.944233
   Petersen K., 2007, Systematic Mapping Studies in Software Engineering, P1
   Pohl K., 2011, Requirements Engineering Fundamentals, V1st
   Satoh F, 2008, IEEE CONGRESS ON SERVICES 2008, PT I, PROCEEDINGS, P307, DOI 10.1109/SERVICES-1.2008.82
   Satoh F, 2006, ICWS 2006: IEEE INTERNATIONAL CONFERENCE ON WEB SERVICES, PROCEEDINGS, P585
   Wada H, 2008, INT J WEB SERV RES, V5, P1, DOI 10.4018/jwsr.2008100101
   Wada H, 2007, P IEEE I C SERV COMP, P187
   Wada H, 2011, J DATABASE MANAGE, V22, P93, DOI 10.4018/jdm.2011040104
NR 60
TC 9
Z9 9
U1 0
U2 20
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 15
PY 2018
VL 168
BP 18
EP 37
DI 10.1016/j.scico.2018.08.001
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA HA6JG
UT WOS:000450385200002
OA Bronze, Green Published
DA 2024-07-18
ER

PT J
AU Lienhardt, M
   Damiani, F
   Testa, L
   Turin, G
AF Lienhardt, Michael
   Damiani, Ferruccio
   Testa, Lorenzo
   Turin, Gianluca
TI On checking delta-oriented product lines of statecharts
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Core calculus; Delta-oriented programming; Software product line;
   Software product line analysis; Statechart
ID MODEL CHECKING
AB A Software Product Line (SPL) is a set of programs, called variants, which are generated from a common artifact base. Delta-Oriented Programming (DOP) is a flexible approach to implement SPLs. In this article, we provide a foundation for rigorous development of delta-oriented product lines of statecharts. We introduce a core language for statecharts, we define DOP on top of it, we present an analysis ensuring that a product line is well-formed (i.e., all variants can be generated and are well-formed statecharts), and we illustrate how an implementation of the analysis has been applied to an industrial case study. (C) 2018 Elsevier B.V. All rights reserved.
C1 [Lienhardt, Michael; Damiani, Ferruccio; Testa, Lorenzo; Turin, Gianluca] Univ Torino, Turin, Italy.
C3 University of Turin
RP Damiani, F (corresponding author), Univ Torino, Turin, Italy.
EM mlienhar@di.unito.it; ferruccio.damiani@unito.it;
   lorenzo.testa@edu.unito.it; gianluca.turin@edu.unito.it
RI Ferruccio, Damiani/D-2383-2011
OI Ferruccio, Damiani/0000-0001-8109-1706
FU project HyVar (European Union's Horizon 2020 research and innovation
   programme) [644298]; ICT COST Action [IC1402 ARVI]; Ateneo/CSP project
   RunVar; H2020 - Industrial Leadership [644298] Funding Source: H2020 -
   Industrial Leadership
FX This work has been partially supported by project HyVar
   (www.hyvar-project.eu, this project has received funding from the
   European Union's Horizon 2020 research and innovation programme under
   grant agreement No 644298), by ICT COST Action IC1402 ARVI
   (www.cost-arvi.eu), and by Ateneo/CSP project RunVar
   (www.runvar-project.di.unito.it).
CR [Anonymous], VAMOS 08
   [Anonymous], 2016, Feature-Oriented Software Product Lines
   [Anonymous], 2000, Generative programming: methods, tools, and applications
   Batory D, 2004, IEEE T SOFTWARE ENG, V30, P355, DOI 10.1109/TSE.2004.23
   Batory D, 2005, LECT NOTES COMPUT SC, V3714, P7
   Bettini L, 2013, ACTA INFORM, V50, P77, DOI 10.1007/s00236-012-0173-z
   Chesta C, 2016, LECT NOTES COMPUT SC, V9953, P497, DOI 10.1007/978-3-319-47169-3_40
   Classen A, 2013, IEEE T SOFTWARE ENG, V39, P1069, DOI 10.1109/TSE.2012.86
   Damiani F, 2016, ELECTRON P THEOR COM, P2, DOI 10.4204/EPTCS.206.2
   Damiani F, 2016, LECT NOTES COMPUT SC, V9953, P579, DOI 10.1007/978-3-319-47169-3_45
   Damiani F, 2016, LECT NOTES COMPUT SC, V9681, P47, DOI 10.1007/978-3-319-33693-0_4
   Delaware B, 2009, 7TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P243, DOI 10.1145/1595696.1595733
   Dubinsky Y, 2013, EUR CON SFTWR MTNCE, P25, DOI 10.1109/CSMR.2013.13
   Fischbein D., 2006, ROSATEA 06, P39
   Gruler A, 2008, LECT NOTES COMPUT SC, V5051, P113, DOI 10.1007/978-3-540-68863-1_8
   HAREL D, 1987, SCI COMPUT PROGRAM, V8, P231, DOI 10.1016/0167-6423(87)90035-9
   Igarashi A, 2001, ACM T PROGR LANG SYS, V23, P396, DOI 10.1145/503502.503505
   Lienhardt Michael, 2012, Leveraging Applications of Formal Methods, Verification and Validation. Technologies for Mastering Change. Technologies for Mastering Change. Proceedings of the 5th International Symposium, ISoLA 2012, P178, DOI 10.1007/978-3-642-34026-0_14
   Lochau M, 2016, J LOG ALGEBR METHODS, V85, P245, DOI 10.1016/j.jlamp.2015.09.004
   Luna C, 2008, P INT C CHIL COMPUT, P32, DOI 10.1109/SCCC.2008.19
   Maggiolo-Schettini A., 1996, CONCUR '96: Concurrency Theory. 7th International Conference. Proceedings, P687
   Nieke M, 2016, LECT NOTES COMPUT SC, V9953, P563, DOI 10.1007/978-3-319-47169-3_44
   Nieke Michael., 2017, P 11 INT WORKSHOP VA, P92, DOI DOI 10.1145/3023956.3023962
   Northrop L., 2001, SOFTWARE PRODUCT LIN
   Schaefer I., 2010, P INT WORKSH VAR MOD, V37
   Schaefer I., 2012, International Journal on Software Tools for Technology Transfer (STTT), V14, P477, DOI [DOI 10.1007/S10009-012-0253-Y, 10.1007/s10009-012-0253-y]
   Schaefer I, 2010, LECT NOTES COMPUT SC, V6287, P77, DOI 10.1007/978-3-642-15579-6_6
   Schaefer Ina, 2010, P 2 INT WORKSH FEAT, P49
   Seidl Christoph., 2014, MODELLIERUNG 2014, VP-225, P81
   ter Beek MH, 2016, J LOG ALGEBR METHODS, V85, P287, DOI 10.1016/j.jlamp.2015.11.006
   Thaker Sahil., 2007, P 6 INT C GENERATIVE, P95
   Thüm T, 2014, ACM COMPUT SURV, V47, DOI 10.1145/2580950
   Uselton AC, 1994, LECT NOTES COMPUT SC, V836, P2
   von der Beeck M., 2002, Softw. Syst. Model., V1, DOI [10.1007/s10270-002-0012-8, DOI 10.1007/S10270-002-0012-8]
   Wille David., 2017, Proceedings of the Eleventh International Workshop on Variability Modelling of Software-intensive Systems, VaMoS 2017, Eindhoven, Netherlands, February 1-3, 2017, P36, DOI DOI 10.1145/3023956.3023957
   [No title captured]
NR 36
TC 11
Z9 11
U1 0
U2 5
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 15
PY 2018
VL 166
BP 3
EP 34
DI 10.1016/j.scico.2018.05.007
PG 32
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GV5OO
UT WOS:000446152000002
OA Bronze
DA 2024-07-18
ER

PT J
AU Wille, D
   Babur, Ö
   Cleophas, L
   Seidl, C
   van den Brand, M
   Schaefer, I
AF Wille, David
   Babur, Onder
   Cleophas, Loek
   Seidl, Christoph
   van den Brand, Mark
   Schaefer, Ina
TI Improving custom-tailored variability mining using outlier and cluster
   detection
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Variability mining; Block-based language; Outlier and cluster detection;
   Conceptual framework; Clone-and-own
ID MODELS; STATECHARTS
AB To satisfy demand for customized software solutions, companies commonly use so-called clone-and-own approaches to reuse functionality by copying existing realization artifacts and modifying them to create new product variants. Lacking clear documentation about the variability relations (i.e., the common and varying parts), the resulting variants have to be developed, maintained and evolved in isolation. In previous work, we introduced a semiautomatic mining algorithm allowing custom-tailored identification of distinct variability relations for block-based model variants (e.g., MATLAB/Simulink models or statecharts) using user-adjustable metrics. However, variants completely unrelated with other variants (i.e., outliers) can negatively influence the usefulness of the generated variability relations for developers maintaining the variants (e.g., erroneous relations might be identified). In addition, splitting the compared models into smaller sets (i.e., clusters) can be sensible to provide developers separate view points on different variable system features. In further previous work, we proposed statistical clustering capable of identifying such outliers and clusters. The contribution of this paper is twofold. First, we present guidelines and a generic implementation that both ease adaptation of our variability mining algorithm for new languages. Second, we integrate our clustering approach as a preprocessing step to the mining. This allows users to remove outliers prior to executing variability mining on suggested clusters. Using models from two industrial case studies, we show feasibility of the approach and discuss how our clustering can support our variability mining in identifying sensible variability information. (C) 2018 Elsevier B.V. All rights reserved.
C1 [Wille, David; Seidl, Christoph; Schaefer, Ina] Tech Univ Carolo Wilhelmina Braunschweig, Braunschweig, Germany.
   [Babur, Onder; Cleophas, Loek; van den Brand, Mark] Eindhoven Univ Technol, Eindhoven, Netherlands.
   [Cleophas, Loek] Stellenbosch Univ, Stellenbosch, South Africa.
C3 Braunschweig University of Technology; Eindhoven University of
   Technology; Stellenbosch University
RP Wille, D (corresponding author), Tech Univ Carolo Wilhelmina Braunschweig, Braunschweig, Germany.
EM d.wille@tu-braunschweig.de; O.Babur@tue.nl; L.G.W.A.Cleophas@tue.nl;
   c.seidl@tu-braunschweig.de; M.G.J.v.d.Brand@tue.nl;
   i.schaefer@tu-braunschweig.de
RI Babur, Önder/HNI-9589-2023
OI van den Brand, Mark/0000-0003-3529-6182; Cleophas,
   Loek/0000-0002-7221-3676; Babur, Onder/0000-0002-1460-2825
FU European Commission [H2020-644298]
FX This work was partially supported by the European Commission within the
   project HyVar under grant agreement H2020-644298.
CR Al-Batran B, 2011, LECT NOTES COMPUT SC, V6981, P258, DOI 10.1007/978-3-642-24485-8_19
   Alalfi MH, 2014, PROC IEEE INT CONF S, P486, DOI 10.1109/ICSME.2014.79
   Alalfi MH, 2012, 2012 28TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE (ICSM), P295, DOI 10.1109/ICSM.2012.6405285
   Alanen M, 2003, LECT NOTES COMPUT SC, V2863, P2
   Altmanninger K, 2009, INT J WEB INF SYST, V5, P271, DOI 10.1108/17440080910983556
   [Anonymous], 2013, JOINT M EUR SOFTW EN, DOI DOI 10.1145/2491411.2491446
   [Anonymous], 2007, 541 QUEENS U KINGST
   [Anonymous], 2006, GAMMA 06, DOI DOI 10.1145/1138304.1138307
   [Anonymous], 2000, Generative programming: methods, tools, and applications
   Babur Ö, 2017, LECT NOTES COMPUT SC, V10139, P510, DOI 10.1007/978-3-319-51963-0_40
   Babur Ö, 2016, PROCEEDINGS OF THE 4TH INTERNATIONAL CONFERENCE ON MODEL-DRIVEN ENGINEERING AND SOFTWARE DEVELOPMENT (MODELSWARD 2016), P361
   Babur Ö, 2016, IEEE INT CONF AUTOM, P888, DOI 10.1145/2970276.2975938
   Babur Ö, 2016, LECT NOTES COMPUT SC, V9764, P3, DOI 10.1007/978-3-319-42061-5_1
   Basciani F, 2016, LECT NOTES COMPUT SC, V9694, P342, DOI 10.1007/978-3-319-39696-5_21
   Chawathe S. S., 1996, SIGMOD Record, V25, P493, DOI 10.1145/235968.233366
   Clements RC., 2001, SOFTWARE PRODUCT LIN
   Deissenboeck F, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P603, DOI 10.1145/1368088.1368172
   Deza E., 2009, Encyclopedia of Distances
   Dubinsky Y, 2013, EUR CON SFTWR MTNCE, P25, DOI 10.1109/CSMR.2013.13
   Font J., 2015, P 19 INT C SOFTW PRO, P46, DOI DOI 10.1145/2791060.2791085
   Font Jaime., 2015, P 19 INT C SOFTWARE, P411, DOI [DOI 10.1145/2791060.2793678, 10.1145/2791060.2793678]
   Frank H, 1999, LECT NOTES COMPUT SC, V1728, P430
   Holthusen, 2014, P 18 INT SOFTW PROD, V2, P36, DOI DOI 10.1145/2647908.2655965
   Kapser C, 2006, WORK CONF REVERSE EN, P19
   Kehrer T, 2012, IEEE INT CONF AUTOM, P306, DOI 10.1145/2351676.2351731
   Kehrer T, 2012, 2012 28TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE (ICSM), P638, DOI 10.1109/ICSM.2012.6405342
   Kelter U., 2005, SOFTWARE ENG, P105
   Klatt Benjamin, 2013, P INT WORKSHOP REVER, P1
   Koschke Rainer, 2007, DAGST SEM P
   Lity S., 2012, 201207 TECHN U BRAUN
   Manning Christopher D., 2008, INTRO INFORM RETRIEV
   Martinez J, 2014, LECT NOTES COMPUT SC, V8569, P117
   Martinez Jabier, 2016, SPLC, P119
   Mehra A., 2005, ASE, P204, DOI DOI 10.1145/1101908.1101940
   Melnik S, 2002, PROC INT CONF DATA, P117, DOI 10.1109/ICDE.2002.994702
   Nejati S, 2007, PROC INT CONF SOFTW, P54
   Nejati S, 2012, IEEE T SOFTWARE ENG, V38, P1355, DOI 10.1109/TSE.2011.112
   Oster S., 2011, P 15 INT SOFTW PROD, V6, P1
   Pham NH, 2009, PROC INT CONF SOFTW, P276, DOI 10.1109/ICSE.2009.5070528
   Pohl K., 2005, SOFTWARE PRODUCT LIN, V10
   Rubin J., 2013, Domain Engineering, P29, DOI DOI 10.1007/978-3-642-36654-3
   Rubin J, 2013, LECT NOTES COMPUT SC, V7793, P83, DOI 10.1007/978-3-642-37057-1_7
   Rubin J, 2012, LECT NOTES COMPUT SC, V7212, P285, DOI 10.1007/978-3-642-28872-2_20
   Ryssel U., 2010, GPCE '10, 9th International Conference on Generative Programming and Component Engineering, P23
   Ryssel U., 2011, P INT SOFTW PROD LIN, V2, P1, DOI [DOI 10.1145/2019136.2019141, 10.1145/2019136.2019141]
   Ryssel U, 2012, SCI COMPUT PROGRAM, V77, P83, DOI 10.1016/j.scico.2010.06.005
   Sabetzadeh M, 2003, 18TH IEEE INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING, PROCEEDINGS, P12, DOI 10.1109/ASE.2003.1240290
   She S, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P461, DOI 10.1145/1985793.1985856
   Stephan Matthew, 2013, MODELSWARD 2013. 1st International Conference on Model-Driven Engineering and Software Development. Proceedings, P265
   Stephan M., 2011, 582 QUEENS U SCH COM
   Strüber D, 2016, LECT NOTES COMPUT SC, V9633, P122, DOI 10.1007/978-3-662-49665-7_8
   Uchitel S., 2004, Software Engineering Notes, V29, P43, DOI 10.1145/1041685.1029904
   WESTON N., 2009, P 13 INT SOFTWARE PR, P211
   Whittle J., 2000, Proceedings of the 2000 International Conference on Software Engineering. ICSE 2000 the New Millennium, P314, DOI 10.1109/ICSE.2000.870422
   Wille D, 2016, PROCEEDINGS OF THE 7TH INTERNATIONAL WORKSHOP ON FEATURE-ORIENTED SOFTWARE DEVELOPMENT (FOSD'16), P63, DOI 10.1145/3001867.3001875
   Wille D, 2016, LECT NOTES COMPUT SC, V9953, P547, DOI 10.1007/978-3-319-47169-3_43
   Wille D, 2014, 22ND ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (FSE 2014), P817, DOI 10.1145/2635868.2661681
   Wille D, 2013, PROCEEDINGS OF THE 17TH INTERNATIONAL SOFTWARE PRODUCT LINE CONFERENCE CO-LOCATED WORKSHOPS (SPLC'13 WORKSHOPS), P44
   Wille D, 2016, 2016 IEEE 23RD INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER), VOL 1, P271, DOI 10.1109/SANER.2016.13
   Wille David., 2017, Proceedings of the Eleventh International Workshop on Variability Modelling of Software-intensive Systems, VaMoS 2017, Eindhoven, Netherlands, February 1-3, 2017, P36, DOI DOI 10.1145/3023956.3023957
   Xiaorui Zhang, 2011, Proceedings of the 2011 15th International Software Product Line Conference (SPLC 2011), P90, DOI 10.1109/SPLC.2011.24
   Xing Z., 2005, 20 IEEEACM INT C AUT, P54, DOI DOI 10.1145/1101908.1101919
   Zhengping Liang, 2014, Journal of Software, V9, P1810, DOI 10.4304/jsw.9.7.1810-1817
NR 63
TC 10
Z9 10
U1 0
U2 7
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 1
PY 2018
VL 163
BP 62
EP 84
DI 10.1016/j.scico.2018.04.002
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GN0MN
UT WOS:000438662800004
DA 2024-07-18
ER

PT J
AU Tommasel, A
   Godoy, D
   Zunino, A
AF Tommasel, Antonela
   Godoy, Daniela
   Zunino, Alejandro
TI <i>SMArtOp</i>: A Java library for distributing high-dimensional
   sparse-matrix arithmetic operations
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Big-scale sparse-matrix; Matrix arithmetic operation; Distributed
   computing
AB Sparse-matrix operations are commonplace in computational science, and novel solutions for speeding-up them are essential for numerous applications. SMArtOp is a software for efficiently dividing and distributing the processing of large-scale sparse-matrix arithmetic operations. This software relies on both the distinctive characteristics of each type of arithmetic operation and the particular matrices involved to split the operations into parallel and simpler tasks. Experimental evaluation showed the speeding-up and resource consumption advantages of the proposed software, in comparison to other linear-algebra libraries. (C) 2017 Elsevier B.V. All rights reserved.
C1 [Tommasel, Antonela; Godoy, Daniela; Zunino, Alejandro] Consejo Nacl Invest Cient & Tecn, UNICEN, ISISTAN, Fac Cs Exactas, Campus Univ,B7001BB0, Tandil, Argentina.
C3 Consejo Nacional de Investigaciones Cientificas y Tecnicas (CONICET)
RP Tommasel, A (corresponding author), Consejo Nacl Invest Cient & Tecn, UNICEN, ISISTAN, Fac Cs Exactas, Campus Univ,B7001BB0, Tandil, Argentina.
EM antonela.tommasel@isistan.unicen.edu.ar
RI Godoy, Daniela/W-2190-2017; Zunino, Alejandro/W-2100-2017; Tommasel,
   Antonela/V-1561-2019
OI Godoy, Daniela/0000-0002-5185-4570; Zunino,
   Alejandro/0000-0002-9537-3541; 
CR Dong YX, 2012, IEEE DATA MINING, P181, DOI 10.1109/ICDM.2012.140
   Elmroth E, 2004, SIAM REV, V46, P3, DOI 10.1137/S0036144503428693
   Lee A, 2010, J COMPUT GRAPH STAT, V19, P769, DOI 10.1198/jcgs.2010.10039
   Moreira JE, 2001, COMMUN ACM, V44, P102, DOI 10.1145/383845.383867
   Oyarzun G, 2014, COMPUT FLUIDS, V92, P244, DOI 10.1016/j.compfluid.2013.10.035
   Tommasel A, 2017, KNOWL INF SYST, V51, P459, DOI 10.1007/s10115-016-0981-5
NR 6
TC 0
Z9 0
U1 1
U2 12
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 15
PY 2017
VL 150
BP 26
EP 30
DI 10.1016/j.scico.2017.06.005
PG 5
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA FK3IT
UT WOS:000413379500002
OA Bronze
DA 2024-07-18
ER

PT J
AU Barták, R
   Chrpa, L
   Dovier, A
   Vodrázka, J
   Zhou, NF
AF Bartak, Roman
   Chrpa, Lukas
   Dovier, Agostino
   Vodrazka, Jindrich
   Zhou, Neng-Fa
TI Modeling and solving planning problems in tabled logic programming:
   Experience from the Cave Diving domain
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Planning; Domain modeling; Logic programming; Tabling
ID SEARCH
AB Action planning deals with the problem of finding a sequence of actions transferring the world from a given state to a desired (goal) state. This problem is important in various areas such as robotics, manufacturing, transportation, autonomic computing, computer games, etc. Action planning is a form of a reachability problem in a huge state space so it is critical to efficiently represent world states and actions (transitions between states).
   In this paper we present a modeling framework for planning problems based on tabled logic programming that exploits a planner module in the Picat language. In particular, we suggest techniques for structured representation of states and for including control knowledge in the description of actions. We demonstrate these techniques using the complex planning domain Cave Diving from the International Planning Competition. Experimentally, we show properties of the model for different search approaches and we compare the performance of the proposed approach with state-of-the-art automated planners. The focus of this paper is on providing guidelines for manual modeling of planning domains rather than on automated reformulation of models. (C) 2017 Elsevier B.V. All rights reserved.
C1 [Bartak, Roman; Chrpa, Lukas; Vodrazka, Jindrich] Charles Univ Prague, Fac Math & Phys, Prague, Czech Republic.
   [Chrpa, Lukas] Czech Tech Univ, Artificial Intelligence Ctr, Prague, Czech Republic.
   [Dovier, Agostino] Univ Udine, Dip Sci Matemat Informat & Fis, Udine, Italy.
   [Zhou, Neng-Fa] CUNY Brooklyn Coll, Brooklyn, NY 11210 USA.
C3 Charles University Prague; Czech Technical University Prague; University
   of Udine; City University of New York (CUNY) System; Brooklyn College
   (CUNY)
RP Barták, R (corresponding author), Charles Univ Prague, Fac Math & Phys, Prague, Czech Republic.
EM bartak@ktiml.mff.cuni.cz; luk.chrpa@gmail.com; agostino.dovier@uniud.it;
   vodrazka@ktiml.mff.cuni.cz; nzhou@acm.org
RI Dovier, Agostino/JAO-3262-2023; Chrpa, Lukáš/AAM-2462-2020; Barták,
   Roman/N-8554-2017; Vodrazka, Jindrich/Q-3789-2017
OI Chrpa, Lukáš/0000-0001-9713-7748; Barták, Roman/0000-0002-6717-8175;
   Vodrazka, Jindrich/0000-0003-0371-4052; Dovier,
   Agostino/0000-0003-2052-8593
FU Czech Science Foundation [P103-15-19877S, P202-17-17125Y]; INdAM GNCS;
   Charles University Grant Agency [241515]; NSF [CCF1618046]
FX Roman Bartak was supported by the Czech Science Foundation under the
   project P103-15-19877S. Lula Chrpa was supported by the Czech Science
   Foundation under the project P202-17-17125Y. Agostino Dovier was
   partially supported by INdAM GNCS 2014 and 2015 projects. Jindrich
   Vodraika was supported by the Charles University Grant Agency under the
   project No. 241515. Neng-Fa Zhou was supported in part by the NSF under
   grant number CCF1618046.
CR Bacchus F, 2000, ARTIF INTELL, V116, P123, DOI 10.1016/S0004-3702(99)00071-5
   BACKSTROM C, 1995, COMPUT INTELL, V11, P625, DOI 10.1111/j.1467-8640.1995.tb00052.x
   Baier J.A., 2007, P 17 INT C AUTOMATED, P26
   Barták R, 2015, PROCEEDINGS OF THE 17TH INTERNATIONAL SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING (PPDP 2015), P31, DOI 10.1145/2790449.2790521
   Barták R, 2014, THEOR PRACT LOG PROG, V14, P697, DOI 10.1017/S1471068414000295
   Bartak Roman, 2016, P 29 INT FLOR ART IN, P8
   Blum AL, 1997, ARTIF INTELL, V90, P281, DOI 10.1016/S0004-3702(96)00047-1
   Cenamor I., 2014, IPC 2014 planner abstracts, P35
   Chrpa L, 2016, FIFTEENTH INTERNATIONAL CONFERENCE ON THE PRINCIPLES OF KNOWLEDGE REPRESENTATION AND REASONING, P545
   Chrpa L, 2014, P I C AUTOMAT PLAN S, P65
   De Bortoli Marco, 2016, P 31 IT C COMP LOG, P132
   Dovier A, 2010, THEOR PRACT LOG PROG, V10, P167, DOI 10.1017/S1471068410000013
   FIKES RE, 1971, ARTIF INTELL, V2, P189, DOI 10.1016/0004-3702(71)90010-5
   Fox M, 1999, IJCAI-99: PROCEEDINGS OF THE SIXTEENTH INTERNATIONAL JOINT CONFERENCE ON ARTIFICIAL INTELLIGENCE, VOLS 1 & 2, P956
   Gelfond M., 1998, ELECT T ARTIFICIAL I, V2, P193
   Haslum Patrik, 2003, ICAPS WORKSH PDDL
   Hewitt C., 1969, P 1 INT JOINT C ARTI, P295
   KAUTZ H, 1992, ECAI 92 - 10TH EUROPEAN CONFERENCE ON ARTIFICIAL INTELLIGENCE : PROCEEDINGS, P359
   KORF RE, 1985, ARTIF INTELL, V27, P97, DOI 10.1016/0004-3702(85)90084-0
   KOWALSKI R, 1986, NEW GENERAT COMPUT, V4, P67, DOI 10.1007/BF03037383
   Kvarnström J, 2003, J ARTIF INTELL RES, V20, P343, DOI 10.1613/jair.1189
   LAND AH, 1960, ECONOMETRICA, V28, P497, DOI 10.2307/1910129
   Lipovetzky N., 2014, 8 INT PLANN COMP DES, P6
   Malitsky Yuri, 2014, 8 INT PLANN COMPETIT, P71
   MCCARTHY J, 1963, 2 STANF U ART INT LA
   McDermott Drew, 1998, 98003 CVC
   Nau D, 2003, J ARTIF INTELL RES, V20, P379, DOI 10.1613/jair.1141
   NILSSON N, 1984, 323 AI CTR SRI INT
   Richter S, 2010, J ARTIF INTELL RES, V39, P127, DOI 10.1613/jair.2972
   Riddle PatriciaJ., 2015, Proceedings of the 8th Symposium on Combinatorial Search (SoCS), P214
   Thielscher Michael., 1998, ELECT T ARTIFICIAL I, V2, P179
   Torralba A., 2014, INT PLANNING COMPETI, P105
   WARREN DS, 1992, COMMUN ACM, V35, P93, DOI 10.1145/131295.131299
   Xie F., 2014, The 2014 International Planning Competition, P39
   Zhou N. F., 2015, CONSTRAINT SOLVING P
   Zhou NF, 2008, THEOR PRACT LOG PROG, V8, P81, DOI 10.1017/S147106840700316X
   Zhou NF, 2015, THEOR PRACT LOG PROG, V15, P543, DOI 10.1017/S1471068415000216
   Zhou NF, 2013, FUND INFORM, V124, P561, DOI 10.3233/FI-2013-849
   Zhou NF, 2012, THEOR PRACT LOG PROG, V12, P547, DOI 10.1017/S1471068412000178
   Zhou Neng-Fa, 2014, COMBINATORIAL SEARCH
NR 40
TC 0
Z9 0
U1 0
U2 9
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 1
PY 2017
VL 147
BP 54
EP 77
DI 10.1016/j.scico.2017.04.007
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA FG3CK
UT WOS:000410014200004
OA hybrid
DA 2024-07-18
ER

PT J
AU Jongmans, SSTQ
   Kappé, T
   Arbab, E
AF Jongmans, S. -S. T. Q.
   Kappe, T.
   Arbab, E.
TI Constraint automata with memory cells and their composition
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Coordination; Constraint automata; Composition; Reo; Performance
ID COMPONENT CONNECTORS; REO CIRCUITS; COORDINATION; SYNCHRONIZATION;
   VERIFICATION; SYSTEMS; MODEL
AB Over the past decades, coordination languages emerged for modeling and implementing concurrency protocols among components in component-based systems. Coordination languages allow programmers to express concurrency protocols at a higher and more appropriate level of abstraction than what traditional programming and scripting languages offer.
   In this paper, we extend a significant coordination model constraint automata with a mechanism to finitely and compactly deal with infinite data domains, including foundational notions as behavior and equivalence (based on languages), weak and strong congruence (based on bisimulation), and composition. We also address the act of composing a number of simple primitive constraint automata into a complex composite one, by discussing two alternative composition approaches and by analyzing their performance in a number of experiments. (C) 2017 Elsevier B.V. All rights reserved.
C1 [Jongmans, S. -S. T. Q.] Open Univ Netherlands, Valkenburgerweg 177, NL-6419 AT Heerlen, Netherlands.
   [Jongmans, S. -S. T. Q.] Radboud Univ Nijmegen, Toernooiveld 212, NL-6525 EC Nijmegen, Netherlands.
   [Jongmans, S. -S. T. Q.; Kappe, T.; Arbab, E.] Ctr Wiskunde & Informat, Sci Pk 123, NL-1098 XG Amsterdam, Netherlands.
   [Kappe, T.; Arbab, E.] Leiden Univ, Niels Bohrweg 1, NL-2333 CA Leiden, Netherlands.
C3 Open University Netherlands; Radboud University Nijmegen; Leiden
   University; Leiden University - Excl LUMC
RP Jongmans, SSTQ (corresponding author), Open Univ Netherlands, Valkenburgerweg 177, NL-6419 AT Heerlen, Netherlands.; Jongmans, SSTQ (corresponding author), Radboud Univ Nijmegen, Toernooiveld 212, NL-6525 EC Nijmegen, Netherlands.; Jongmans, SSTQ (corresponding author), Ctr Wiskunde & Informat, Sci Pk 123, NL-1098 XG Amsterdam, Netherlands.
EM ssj@ou.nl; kappe@cwi.nl; farhad@cwi.nl
OI Kappe, Tobias/0000-0002-6068-880X
CR Arbab F, 2005, SCI COMPUT PROGRAM, V55, P3, DOI 10.1016/j.scico.2004.05.010
   Arbab F, 2004, MATH STRUCT COMP SCI, V14, P329, DOI 10.1017/S0960129504004153
   Arbab F, 2003, LECT NOTES COMPUT SC, V2755, P34
   Arbab F., 2013, P WEB SERV FORM METH, V7843, P118
   Arbab F, 2007, SOFTW SYST MODEL, V6, P59, DOI 10.1007/s10270-006-0009-9
   Arbab F, 2008, COMM COM INF SC, V17, P108
   Baier C, 2006, SCI COMPUT PROGRAM, V61, P75, DOI 10.1016/j.scico.2005.10.008
   Baier C, 2011, LECT NOTES COMPUT SC, V6659, P114, DOI 10.1007/978-3-642-21455-4_4
   Baier C, 2010, LECT NOTES COMPUT SC, V6416, P97, DOI 10.1007/978-3-642-16561-0_15
   Baier C, 2009, LECT NOTES COMPUT SC, V5751, P82
   Baier C, 2009, LECT NOTES COMPUT SC, V5521, P247, DOI 10.1007/978-3-642-02053-7_13
   Basu A, 2006, I C SOFTW ENG FORM M, P3
   Bliudze S, 2008, IEEE T COMPUT, V57, P1315, DOI 10.1109/TC.2008.26
   Bliudze S, 2010, FORM METHOD SYST DES, V36, P167, DOI 10.1007/s10703-010-0091-z
   Changizi B., 2010, PREP FESCA 2010, P147
   Chatterjee S, 2012, IEEE DES TEST COMPUT, V29, P80, DOI 10.1109/MDT.2012.2205998
   Clarke D, 2007, SCI COMPUT PROGRAM, V66, P205, DOI 10.1016/j.scico.2007.01.009
   Costa D. M., 2010, THESIS
   Dokter K, 2017, J LOG ALGEBR METHODS, V86, P134, DOI 10.1016/j.jlamp.2016.09.008
   Dokter K, 2015, ELECTRON P THEOR COM, P3, DOI 10.4204/EPTCS.189.3
   Gerth R., 1995, INT C PROTOCOL SPECI, P3
   Ghassemi F., 2006, ENTCS, V159, P99
   Hoperoft J., 2001, INTRO AUTOMATA THEOR, P37
   Izadi M, 2011, THESIS
   Izadi M, 2011, SOFTW SYST MODEL, V10, P183, DOI 10.1007/s10270-010-0152-1
   Jongmans S.-S., 2015, FM1506 CWI
   Jongmans SSTQ, 2016, SCI COMPUT PROGRAM, V115, P199, DOI 10.1016/j.scico.2015.09.001
   Jongmans S.-S.T.Q., 2016, THESIS
   Jongmans SSTQ, 2016, LECT NOTES COMPUT SC, V9539, P217, DOI 10.1007/978-3-319-28934-2_12
   Jongmans SSTQ, 2014, ELECTRON PROC THEOR, P38, DOI 10.4204/EPTCS.166.5
   Jongmans SSTQ, 2015, SERV ORIENTED COMPUT, V9, P311, DOI 10.1007/s11761-015-0177-y
   Jongmans SSTQ, 2015, LECT NOTES COMPUT SC, V9392, P238, DOI 10.1007/978-3-319-24644-4_17
   Jongmans SSTQ, 2012, SCI ANN COMPUT SCI, V22, P201, DOI 10.7561/SACS.2012.1.201
   Kappe T., 2016, P V2CPS 2016
   Klein J., 2012, THESIS
   Klüppelholz S, 2010, SCI COMPUT PROGRAM, V75, P398, DOI 10.1016/j.scico.2009.07.007
   Klüppelholz S, 2009, SCI COMPUT PROGRAM, V74, P688, DOI 10.1016/j.scico.2008.09.020
   Kluppelholz  Sascha, 2012, THESIS
   Koehler C., 2009, P SAC 2009, P1369, DOI DOI 10.1145/1529282.1529587
   Krause C, 2013, J VISUAL LANG COMPUT, V24, P153, DOI 10.1016/j.jvlc.2012.09.002
   Meng S, 2011, SCI COMPUT PROGRAM, V76, P651, DOI 10.1016/j.scico.2010.03.002
   Pourvatan Bahman, 2012, Formal Aspects of Component Software. 7th International Workshop, FACS 2010. Revised Selected Papers, P237, DOI 10.1007/978-3-642-27269-1_14
   Pourvatan B, 2007, LECT NOTES COMPUT SC, V4767, P412
   Pourvatan B, 2012, SCI COMPUT PROGRAM, V77, P848, DOI 10.1016/j.scico.2011.04.001
   Proenca Jose, 2011, THESIS
   Puff F. Arbab, 2011, LNCS, V7000, P169
   Rautenberg W, 2010, UNIVERSITEXT, P41, DOI 10.1007/978-1-4419-1221-3_2
   Reisig Wolfgang, 1985, EATCS MONOGRAPHS THE, V4, P3
   Sirjani M, 2004, FUND INFORM, V63, P385
   Sirjani M, 2006, LECT NOTES COMPUT SC, V4038, P281
NR 50
TC 8
Z9 8
U1 0
U2 4
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 15
PY 2017
VL 146
SI SI
BP 50
EP 86
DI 10.1016/j.scico.2017.03.006
PG 37
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA FD2ZE
UT WOS:000407402500004
OA Green Published
DA 2024-07-18
ER

PT J
AU Luo, C
   He, F
   Ghezzi, C
AF Luo, Chen
   He, Fei
   Ghezzi, Carlo
TI Inferring software behavioral models with MapReduce
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Model inference; Parametric trace; Log analysis; MapReduce
AB In the real world practice, software systems are often built without developing any explicit upfront model. This can cause serious problems that may hinder: the almost inevitable future evolution, since at best the only documentation about the software is in the form of source code comments. To address this problem, research has been focusing on automatic inference of models by applying machine learning algorithms to execution logs. However, the logs generated by a real software system may be very large and the inference algorithm can exceed the processing capacity of,a single computer.
   This paper proposes a scalable, general approach to the inference of behavior models that can handle large execution logs via parallel and distributed algorithms implemented using the MapReduce programming model and executed on a cluster-of interconnected execution nodes. The approach consists of two distributed phases that perform trace slicing and model synthesis. For each phase, a distributed algorithm using MapReduce is developed. With the parallel data processing capacity of MapReduce, the problem of inferring behavior models from large logs can be efficiently solved. The technique is implemented on top of Hadoop. Experiments on Amazon clusters show efficiency and scalability of our approach. (C) 2017 Elsevier B.V. All rights reserved.
C1 [Luo, Chen; He, Fei] Tsinghua Univ, Tsinghua Natl Lab Informat Sci & Technol TNList, Key Lab Informat Syst Secur, Minist Educ,Sch Software, Beijing 100084, Peoples R China.
   [Luo, Chen] Univ Calif Irvine, Irvine, CA USA.
   [Ghezzi, Carlo] Politecn Milan, Milan, Italy.
   [Luo, Chen] Tsinghua Univ, Beijing, Peoples R China.
C3 Tsinghua University; University of California System; University of
   California Irvine; Polytechnic University of Milan; Tsinghua University
RP He, F (corresponding author), Tsinghua Univ, Tsinghua Natl Lab Informat Sci & Technol TNList, Key Lab Informat Syst Secur, Minist Educ,Sch Software, Beijing 100084, Peoples R China.
EM cluo8@uci.edu; hefei@tsinghua.edu.cn; carlo.ghezzi@polimi.it
RI Luo, Chen/AAA-9615-2020; Luo, Chen/AAC-4300-2019
OI Luo, Chen/0000-0002-2180-7749; He, Fei/0000-0002-4266-875X
FU Chinese National 973 Plan [2010CB328003]; NSF of China [61672310,
   61272001, 91218302]; Chinese National Key Technology RD Program
   [SQ2012BAJY4052]
FX We thank Dr. Srdjan Krstic for his comments to our manuscript. This work
   was supported in part by the Chinese National 973 Plan (2010CB328003),
   the NSF of China (61672310, 61272001, 91218302) and the Chinese National
   Key Technology R&D Program (SQ2012BAJY4052).
CR Aarts Fides, 2012, FM 2012: Formal Methods. Proceedings of the 18th International Symposium, P10, DOI 10.1007/978-3-642-32759-9_4
   Aarts F, 2010, LECT NOTES COMPUT SC, V6435, P188, DOI 10.1007/978-3-642-16573-3_14
   Alur R, 2005, ACM SIGPLAN NOTICES, V40, P98, DOI 10.1145/1047659.1040314
   Ammons G, 2002, ACM SIGPLAN NOTICES, V37, P4, DOI 10.1145/565816.503275
   ANGLUIN D, 1987, INFORM COMPUT, V75, P87, DOI 10.1016/0890-5401(87)90052-6
   [Anonymous], 2013, Proceedings of the International Symposium on Software Testing and Analysis (ISSTA), DOI [10.1145/2483760.2483783, DOI 10.1145/2483760.2483783]
   [Anonymous], 2007, 6th joint meeting of the European Software Engineering Conference and the ACM SIGSOFT Symposium on the Foundations of Software Engineering (ESEC/FSE), DOI DOI 10.1145/1287624.1287632
   Barre B., 2013, LNCS, P184, DOI [10.1007/978-3-642-35632-2_20, DOI 10.1007/978-3-642-35632-2_20]
   Basin D., 2016, FORM METHODS SYST DE, P1
   Basin D, 2010, LECT NOTES COMPUT SC, V6174, P1, DOI 10.1007/978-3-642-14295-6_1
   Berg T, 2006, LECT NOTES COMPUT SC, V3922, P107
   Bersani MM, 2016, PROC INT CONF SOFTW, P888, DOI 10.1145/2884781.2884832
   BESCHASTNIKH I., 2011, P 19 ACM SIGSOFT S 1, P267, DOI DOI 10.1145/2025113.2025151
   Beschastnikh I, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P468, DOI 10.1145/2568225.2568246
   Beschastnikh I, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P252, DOI 10.1109/ICSE.2013.6606571
   Bianculli Domenico, 2014, Software Engineering and Formal Methods. 12th International Conference, SEFM 2014. Proceedings: LNCS 8702, P144, DOI 10.1007/978-3-319-10431-7_11
   BIERMANN AW, 1972, IEEE T COMPUT, VC 21, P592, DOI 10.1109/TC.1972.5009015
   Blackburn SM, 2006, ACM SIGPLAN NOTICES, V41, P169, DOI 10.1145/1167515.1167488
   Busany N, 2015, 2015 10TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE 2015) PROCEEDINGS, P898, DOI 10.1145/2786805.2803198
   Cassel Sofia, 2014, Software Engineering and Formal Methods. 12th International Conference, SEFM 2014. Proceedings: LNCS 8702, P250, DOI 10.1007/978-3-319-10431-7_18
   Clarke EdmundM., 2000, Proceedings of the International Conference on Computer Aided Veri cation (CAV), P154, DOI 10.1007/1072216715
   Comparetti PM, 2009, P IEEE S SECUR PRIV, P110, DOI 10.1109/SP.2009.14
   Cook J. E., 1998, ACM Transactions on Software Engineering and Methodology, V7, P215, DOI 10.1145/287000.287001
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Dallmeier V., 2010, P 19 INT S SOFTWARE, P85, DOI [DOI 10.1145/1831708.1831719, 10.1145/1831708.1831719]
   Dallmeier V., 2006, P 2006 INT WORKSH DY, P17, DOI DOI 10.1145/1138912.1138918
   de Caso G, 2012, IEEE T SOFTWARE ENG, V38, P141, DOI 10.1109/TSE.2010.98
   Dean J, 2004, USENIX ASSOCIATION PROCEEDINGS OF THE SIXTH SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION (OSDE '04), P137
   Dupont P, 2008, APPL ARTIF INTELL, V22, P77, DOI 10.1080/08839510701853200
   Ernst M. D., 1999, Proceedings of the 1999 International Conference on Software Engineering (IEEE Cat. No.99CB37002), P213, DOI 10.1109/ICSE.1999.841011
   Ghezzi C, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P277, DOI 10.1145/2568225.2568234
   Ghezzi C, 2009, PROC INT CONF SOFTW, P430, DOI 10.1109/ICSE.2009.5070542
   Giannakopoulou D, 2012, LECT NOTES COMPUT SC, V7460, P248, DOI 10.1007/978-3-642-33125-1_18
   Heule MJH, 2013, EMPIR SOFTW ENG, V18, P825, DOI 10.1007/s10664-012-9222-z
   Heule MJH, 2010, LECT NOTES ARTIF INT, V6339, P66, DOI 10.1007/978-3-642-15488-1_7
   Howar Falk, 2012, Leveraging Applications of Formal Methods, Verification and Validation. Technologies for Mastering Change. Technologies for Mastering Change. Proceedings of the 5th International Symposium, ISoLA 2012, P554, DOI 10.1007/978-3-642-34026-0_41
   Howar F, 2012, LECT NOTES COMPUT SC, V7148, P251, DOI 10.1007/978-3-642-27940-9_17
   Howar F, 2011, LECT NOTES COMPUT SC, V6538, P263, DOI 10.1007/978-3-642-18275-4_19
   KOYMANS R, 1990, REAL-TIME SYST, V2, P255, DOI 10.1007/BF01995674
   Krka I, 2014, 22ND ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (FSE 2014), P178, DOI 10.1145/2635868.2635890
   Lamprier S, 2014, IEEE INT C ENG COMP, P166, DOI 10.1109/ICECCS.2014.31
   Lang K. J., 1998, Grammatical Inference. 4th International Colloquium, ICGI-98. Proceedings, P1, DOI 10.1007/BFb0054059
   Le TDB, 2015, IEEE INT CONF AUTOM, P115, DOI 10.1109/ASE.2015.83
   Lee C, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P591, DOI 10.1145/1985793.1985874
   Lee KH, 2011, SIGMOD REC, V40, P11, DOI 10.1145/2094114.2094118
   Li KQ, 2006, LECT NOTES COMPUT SC, V4229, P436
   Li WC, 2010, DES AUT CON, P755
   Lo D., 2006, SIGSOFT FSE, P265
   Lo D, 2006, WORK CONF REVERSE EN, P51
   Lo D, 2009, 7TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P345, DOI 10.1145/1595696.1595761
   Lorenzoli D, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P501, DOI 10.1145/1368088.1368157
   Luo C, 2015, LECT NOTES COMPUT SC, V9409, P135, DOI 10.1007/978-3-319-25942-0_9
   Mariani Leonardo, 2008, 2008 IEEE International Symposium on Software Reliability Engineering, P117, DOI 10.1109/ISSRE.2008.48
   Mariani L, 2007, IEEE SOFTWARE, V24, P76, DOI 10.1109/MS.2007.138
   Mariani Leonardo, 2010, P 2 INT WORKSH PRINC, P22, DOI [10.1145/1808885.1808891, DOI 10.1145/1808885.1808891]
   Medhat R, 2015, 2015 PROCEEDINGS OF THE INTERNATIONAL CONFERENCE ON EMBEDDED SOFTWARE (EMSOFT), P177, DOI 10.1109/EMSOFT.2015.7318273
   Ohmann T., 2014, P IEEE ACM INT C AUT, P19, DOI [10.1145/2642937.2642988, DOI 10.1145/2642937.2642988, 10.1145/2642937, DOI 10.1145/2642937]
   Oncina Jose, 1992, Advances in Structural and Syntactic Pattern Recognition, Volume 5 of the Series in Machine Perception and Artificial Intelligence, P99, DOI [10.1142/9789812797919_0007, DOI 10.1142/97898127979190007, DOI 10.1142/9789812797919_0007]
   Raman A. V., 1997, P WORKSH AUT IND GRA
   Scholkopf B., 1998, Advances in Kernel Methods: Support Vector Learning
   Shoham S, 2008, IEEE T SOFTWARE ENG, V34, P651, DOI 10.1109/TSE.2008.63
   Thollard Franck., 2000, PROC INT C MACHINE L, P975
   Walkinshaw Neil, 2008, 2008 23rd IEEE/ACM International Conference on Automated Software Engineering, P248, DOI 10.1109/ASE.2008.35
   Walkinshaw N., 2015, EMPIR SOFTW ENG, V21, P1
   Walkinshaw N, 2007, 14TH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P209, DOI 10.1109/WCRE.2007.45
   Walkinshaw N, 2008, SOFTW TEST VERIF REL, V18, P99, DOI 10.1002/stvr.380
   Wang S, 2015, ART SCI ANAL SOFTWAR, P623, DOI [10.1016/B978-0-12-411519-4.00021-5, DOI 10.1016/B978-0-12-411519-4.00021-5]
   Whaley J., 2002, Software Engineering Notes, V27, P221, DOI 10.1145/566171.566212
   Xiao H, 2013, IEEE INT CONF AUTOM, P432, DOI 10.1109/ASE.2013.6693101
   Xie T, 2004, LECT NOTES COMPUT SC, V3308, P290
NR 70
TC 8
Z9 8
U1 0
U2 10
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 1
PY 2017
VL 145
BP 13
EP 36
DI 10.1016/j.scico.2017.04.004
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA EY9KG
UT WOS:000404316900002
DA 2024-07-18
ER

PT J
AU Fichera, L
   Messina, F
   Pappalardo, G
   Santoro, C
AF Fichera, Loris
   Messina, Fabrizio
   Pappalardo, Giuseppe
   Santoro, Corrado
TI A Python framework for programming autonomous robots using a declarative
   approach
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Robot programming; BDI model; AgentSpeak(L); Python; Operator
   overloading
ID AGENT; ARCHITECTURE; SYSTEM
AB This paper describes PROFETA (standing for Python RObotic Framework for dEsigning sTrAtegies), a framework for the programming of autonomous robots based on the Belief Desire-Intention (BDI) software model. PROFETA is inspired by AgentSpeak(L), a formal language for the creation of BDI software agents. The framework is implemented in Python, and utilizes the metaprogramming capabilities offered by this language to implement the operational semantics of AgentSpeak(L). PROFETA provides a flexible environment offering both traditional object-oriented imperative constructs and declarative constructs, enabling the definition of a robot's high-level behavior in a simple, natural way. The contributions of this paper, in the area of software design and development, are: (i) a methodology, equipped with suitable technical solutions, to extend the Python programming language with AgentSpeak(L) declarative constructs; and (ii) a unified environment enabling software components for robots to be developed using a single language (Python) within a single runtime environment (the Python virtual machine). A comparison between PROFETA and other similar frameworks is provided, illustrating common aspects and key differences. (C) 2017 Elsevier B.V. All rights reserved.
C1 [Fichera, Loris; Messina, Fabrizio; Pappalardo, Giuseppe; Santoro, Corrado] Univ Catania, Dept Math & Comp Sci, I-95124 Catania, Italy.
   [Fichera, Loris] Vanderbilt Univ, Dept Mech Engn, Nashville, TN 37235 USA.
C3 University of Catania; Vanderbilt University
RP Santoro, C (corresponding author), Univ Catania, Dept Math & Comp Sci, I-95124 Catania, Italy.
EM messina@dmi.unict.it; santoro@dmi.unict.it
RI messina, fabrizio/AAX-8113-2021; Pappalardo, giuseppe/JYQ-6132-2024
OI messina, fabrizio/0000-0002-3685-3879; Fichera,
   Loris/0000-0001-7347-9479
FU PRISMA PONO4a2 A/F; CLARA; MEDNETNA - Italian Ministry of University
FX This work is partially supported by projects PRISMA PONO4a2 A/F, CLARA
   and MEDNETNA funded by the Italian Ministry of University.
CR [Anonymous], GAM DEV C AUD LECT
   [Anonymous], 2001, 5 INT C AUT AG
   [Anonymous], JACK INT AG AG MAN
   [Anonymous], 2014, The Java Language Specification, Java SE
   [Anonymous], JACK AN AG INFR PROV
   Arkin R., 1998, BEHAV BASED ROBOTICS
   Bellifemine F, 2008, INFORM SOFTWARE TECH, V50, P10, DOI 10.1016/j.infsof.2007.10.008
   Boissier O, 2013, SCI COMPUT PROGRAM, V78, P747, DOI 10.1016/j.scico.2011.10.004
   Bordini R., 2007, PROGRAMMING MULTIAGE
   Bordini RH, 2006, LECT NOTES COMPUT SC, V3900, P143
   Bradshaw J.M., 1997, SOFTWARE AGENTS
   Bratman M.E., 1987, Intention, Plans, and Practical Reason
   Braubach L, 2005, LECT NOTES ARTIF INT, V3346, P44
   Bresciani P, 2004, AUTON AGENT MULTI-AG, V8, P203, DOI 10.1023/B:AGNT.0000018806.20944.ef
   BROOKS RA, 1986, IEEE T ROBOTIC AUTOM, V2, P14, DOI 10.1109/JRA.1986.1087032
   Busetta P., 2000, ATAL '99: 6th international workshop on intelligent agents VI, agent theories, architectures, and languages (ATAL), P277
   Cossentino M., 2005, AGENT ORIENTED METHO
   d'Inverno M, 1998, LECT NOTES ARTIF INT, V1365, P155, DOI 10.1007/BFb0026757
   de Silva L, 2016, STUD COMPUT INTELL, V640, P179, DOI 10.1007/978-3-319-30337-6_17
   Di Stefano A., 2005, ERLANG 05, P62
   Di Stefano A., 2004, AMA TABOO JOINT WORK
   Di Stefano A., 2003, AMA TABOO JOINT WORK
   Di Stefano A, 2009, SOFTWARE PRACT EXPER, V39, P137, DOI 10.1002/spe.894
   Diaz A.F., 2013, LNCS LNAI, V7837, P1, DOI DOI 10.1007/978-3-642-38700-5_1
   DISTEFANO A, 2004, ACEC 2004 WORKSH WET
   Fichera L., 2010, WOA
   Fichera L, 2011, COMM COM INF SC, V156, P57
   Fortino Giancarlo, 2013, Multiagent System Technologies. 11th German Conference, MATES 2013. Proceedings: LNCS 8076, P264, DOI 10.1007/978-3-642-40776-5_23
   Fortino G, 2015, ENG APPL ARTIF INTEL, V41, P287, DOI 10.1016/j.engappai.2015.01.012
   Fortino G, 2012, LECT NOTES COMPUT SC, V7270, P61, DOI 10.1007/978-3-642-32066-8_3
   Georgeff M., 1987, P 6 NATL C ARTIFICIA, P677
   Gottifredi S., 2008, 14 C ARG CIENC COMP
   HAREL D, 1987, SCI COMPUT PROGRAM, V8, P231, DOI 10.1016/0167-6423(87)90035-9
   Hyde R., 2010, ART ASSEMBLY LANGUAG
   INGRAND FF, 1992, IEEE EXPERT, V7, P34, DOI 10.1109/64.180407
   Jennings NR, 2000, ARTIF INTELL, V117, P277, DOI 10.1016/S0004-3702(99)00107-1
   Jensen A.S., 2010, IMPLEMENTING LEGO AG
   Johansson A., 2012, 2012 IEEE Conference on Computational Intelligence and Games (CIG 2012), P355, DOI 10.1109/CIG.2012.6374177
   Kernighan B.W., 1988, C PROGRAMMING LANGUA, V2
   Klingenberg A., 2010, PROTOTYPISCHE ENTWIC
   Kolbe F., 2013, THESIS
   Kravari K, 2015, JASSS-J ARTIF SOC S, V18, DOI 10.18564/jasss.2661
   Marzinotto A, 2014, IEEE INT CONF ROBOT, P5420, DOI 10.1109/ICRA.2014.6907656
   Messina F., 2014, P IEEE ASME 10 INT C, P1
   Mordenti A., 2012, PROGRAMMING ROBOTS A
   Murphy R.R., 2001, INTRO AL ROBOTICS
   Myers K.L., 1996, P 3 INT C AL PLANN S
   Nicosia V., 2006, P 12 INT ERL US C EU
   Orkin Jeff., 2004, AI Game Program- ming Wisdom, V2, P217
   Padgham L., 2004, WILEY SERIES AGENT T
   Pavon J., 2005, Agent-oriented Methodologies, P236
   Pokahr A, 2005, MU S ART SOC SIM ORG, V15, P149, DOI 10.1007/0-387-26350-0_6
   Quigley M, 2009, IEEE INT CONF ROBOT, P3604
   Rao A. S., 1995, ICMAS-95 Proceedings. First International Conference on Multi-Agent Systems, P312
   Rao A. S., 1996, Agents Breaking Away. 7th European Workshop on Modelling Autonomous Agents in a Multi-Agent World, MAAMAW '96 Proceedings, P42, DOI 10.1007/BFb0031845
   Rockel S., 2012, P IEEE INT C MULT FU
   Rusu R.B., 2004, P IEEE TTTC AUT QUAL
   Santoro C., 2007, ERLANG 07
   Semwal T, 2015, P 2015 C ADV ROB, P20
   Siegwart R., 2004, INTRO AUTONOMOUS MOB
   Soriano Angel, 2013, Advances on Practical Applications of Agents and Multi-Agent Systems. 11th International Conference, PAAMS 2013. Proceedings, P320, DOI 10.1007/978-3-642-38073-0_37
   VANBREEMEN AJ, 2003, P 1 INT WORKSH ADV S
   vansRossum G., 2011, PYTHON LANGUAGE REFE
   WEISS G., 1999, MULTIAGENT SYSTEMS
   Wilkins D. E., 1997, TECHNICAL REPORT
   WOOLDRIDGE M, 2001, LECT NOTES COMPUTER, P1
NR 66
TC 20
Z9 22
U1 2
U2 25
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 1
PY 2017
VL 139
BP 36
EP 55
DI 10.1016/j.scico.2017.01.003
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA EP9JX
UT WOS:000397691000002
OA hybrid
DA 2024-07-18
ER

PT J
AU Martínez, S
   Tisi, M
   Douence, R
AF Martinez, Salvador
   Tisi, Massimo
   Douence, Remi
TI Reactive model transformation with ATL
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Model-driven engineering; Model transformations; Reactive programming
AB Model-driven applications may maintain large networks of structured data models and transformations among them. The development of such applications is complicated by the need to reflect on the whole network any runtime update performed on models or transformation logic. If not carefully designed, the execution of such updates may be computationally expensive. In this paper we propose a reactive paradigm for programming model transformations, and we implement a reactive model-transformation engine. We argue that this paradigm facilitates the development of autonomous model-driven systems that react to update and request events from the host application by identifying and performing only the needed computation. We implement such approach by providing a reactive engine for the An transformation language. We evaluate the usage scenarios that this paradigm supports and we experimentally measure its ability to reduce computation time in transformation-based applications. (C) 2016 Elsevier B.V. All rights reserved.
C1 [Martinez, Salvador; Tisi, Massimo] LINA, Mines Nantes, Inria, AtlanMod Team, Nantes, France.
   [Douence, Remi] LINA, Mines Nantes, Inria, Ascola Team, Nantes, France.
C3 IMT - Institut Mines-Telecom; IMT Atlantique; Inria; Inria; IMT -
   Institut Mines-Telecom; IMT Atlantique
RP Martínez, S (corresponding author), LINA, Mines Nantes, Inria, AtlanMod Team, Nantes, France.
EM salva.martinez.perez@gmail.com
RI Douence, Remi/KGL-9014-2024; Martínez, Salvador/F-2081-2016
OI Martínez, Salvador/0000-0002-3978-9876
FU MONDO project [EU ICT-611125]
FX This work is partially supported by the MONDO (EU ICT-611125) project.
CR [Anonymous], 2014, P 8 ACM INT C DISTR
   Bainomugisha E, 2013, ACM COMPUT SURV, V45, DOI 10.1145/2501654.2501666
   Beaudoux O, 2010, LECT NOTES COMPUT SC, V6394, P91
   Bergmann G., 2009, ELECT COMMUN EASST, V18
   Bergmann G., 2008, INCREMENTAL PATTERN
   Bergmann G, 2015, LECT NOTES COMPUT SC, V9152, P101, DOI 10.1007/978-3-319-21155-8_8
   BERRY G, 1992, SCI COMPUT PROGRAM, V19, P87, DOI 10.1016/0167-6423(92)90005-V
   BOUSSINOT F, 1991, SOFTWARE PRACT EXPER, V21, P401, DOI 10.1002/spe.4380210406
   Boyland John Tang., 2002, Electronic Notes in Theoretical Computer Science, V65, P9
   Cabot J, 2006, LECT NOTES COMPUT SC, V4001, P81, DOI 10.1007/11767138_7
   Clavel M., 2008, ELECT COMMUN EASST, V15
   Dávid I, 2014, LECT NOTES COMPUT SC, V8767, P68, DOI 10.1007/978-3-319-11653-2_5
   Giese H, 2009, SOFTW SYST MODEL, V8, P21, DOI 10.1007/s10270-008-0089-9
   Hammer MA, 2014, ACM SIGPLAN NOTICES, V49, P156, DOI [10.1145/2594291.2594324, 10.1145/2666356.2594324]
   Harel D., 1985, DEV REACTIVE SYSTEMS, P477
   Hearnden D, 2006, LECT NOTES COMPUT SC, V4199, P321
   Henderson Peter, 1976, P 3 ACM SIGACT SIGPL, P95, DOI DOI 10.1145/800168.811543
   Hudak Paul., 2007, Proceedings of the third ACM SIGPLAN conference on History of programming languages, P12, DOI DOI 10.1145/1238844.1238856
   International Organization for Standardization, 2013, 167392013 ISO IFC
   Jouault F, 2006, LECT NOTES COMPUT SC, V3844, P128
   Jouault F, 2010, LECT NOTES COMPUT SC, V6142, P123, DOI 10.1007/978-3-642-13688-7_9
   Nakamura H, 2001, ACM SIGPLAN NOTICES, V36, P156, DOI 10.1145/504311.504294
   *OMG, 2005, MOF QVT FIN AD SPEC
   *OMG, PTC031014 OMG
   PENNINGS M, 1992, LECT NOTES COMPUT SC, V631, P130, DOI 10.1007/3-540-55844-6_132
   Ráth I, 2008, LECT NOTES COMPUT SC, V5063, P107, DOI 10.1007/978-3-540-69927-9_8
   Salvaneschi G., 2013, P 12 ANN INT C ASP O, P37
   Schott Steffen., 2003, DocEng '03, P9
   Smith D., 2007, Journal of Building Information Modeling, P12
   Taentzer G., 2005, P WORKSH MOD TRANSF, P1
   Tisi M., 2015, OCL 2015 15 INT WORK, P46
   Tisi M, 2011, LECT NOTES COMPUT SC, V6981, P32, DOI 10.1007/978-3-642-24485-8_4
   Varro D., 2016, SOFTW SYST MODEL, P1
   Visser E, 2003, LECT NOTES COMPUT SC, V3016, P216
   VOGT H, 1991, LECT NOTES COMPUT SC, V528, P231
   Wan ZY, 2000, ACM SIGPLAN NOTICES, V35, P242, DOI 10.1145/358438.349331
   Wijngaarden J. V., 2003, TECH REP
   Xiong B, 2007, IEEE INT CON AUTO SC, P1016
NR 38
TC 17
Z9 17
U1 0
U2 4
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR 1
PY 2017
VL 136
BP 1
EP 16
DI 10.1016/j.scico.2016.08.006
PG 16
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA EK0QV
UT WOS:000393633100001
OA Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Bodei, C
   Dinh, VD
   Ferrari, GL
AF Bodei, Chiara
   Viet Dung Dinh
   Ferrari, Gian-Luigi
TI Checking global usage of resources handled with local policies
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Network resources; Process calculi; Publish-subscribe systems; Formal
   methods; Control flow analysis
ID ACCESS-CONTROL; CALCULUS; PI; LOGIC; LINEARITY; LANGUAGE; MODEL
AB We present a methodology to reason about resource usage (acquisition, release, revision, and so on) and, in particular, to predict bad usage of resources. Keeping in mind the interplay between local and global information that occur in application-resource interactions, we model resources as entities with local policies and we study global properties that govern overall interactions. Formally, our model is an extension of pi-calculus with primitives to manage resources. To predict possible bad usage of resources, we develop a Control Flow Analysis that computes a static over-approximation of process behaviour. (C) 2016 Elsevier B.V. All rights reserved.
C1 [Bodei, Chiara; Viet Dung Dinh; Ferrari, Gian-Luigi] Univ Pisa, Dipartimento Informat, Pisa, Italy.
C3 University of Pisa
RP Bodei, C (corresponding author), Univ Pisa, Dipartimento Informat, Pisa, Italy.
EM chiara@di.unipi.it; dinh@di.unipi.it; giangi@di.unipi.it
OI BODEI, CHIARA/0000-0002-0586-9333; FERRARI,
   GIAN-LUIGI/0000-0003-3548-5514
FU European FET Project "ASCENS"; Italian MIUR PRIN project "Security
   Horizons"; University of Pisa [PRA_2016_64]
FX Research supported by the European FET Project "ASCENS", by the Italian
   MIUR PRIN project "Security Horizons" and by project PRA_2016_64
   "Through the fog", funded by the University of Pisa.
CR Abowd G. D., 2000, ACM Transactions on Computer-Human Interaction, V7, P29, DOI 10.1145/344949.344988
   Acciai L, 2010, INFORM COMPUT, V208, P1118, DOI 10.1016/j.ic.2009.10.011
   Aldrich J., 2009, OOPSLA COMPANION, P1015, DOI DOI 10.1145/1639950
   [Anonymous], 1986, P 1 S LOG COMP SCI L
   [Anonymous], 1999, P 1999 WORKSH NEW SE
   [Anonymous], 2009, DEP ELECT ENG COMPUT
   [Anonymous], 2008, P 2008 GRID COMP ENV, DOI DOI 10.1109/GCE.2008.4738443
   Atzori L, 2010, COMPUT NETW, V54, P2787, DOI 10.1016/j.comnet.2010.05.010
   Baier C, 2008, PRINCIPLES OF MODEL CHECKING, P1
   Banerjee A, 2005, LECT NOTES COMPUT SC, V3362, P27
   Bartoletti M, 2005, LECT NOTES COMPUT SC, V3441, P316
   Bartoletti M., 2008, TR0807 U PIS DIP INF
   Bartoletti M, 2015, MATH STRUCT COMP SCI, V25, P710, DOI 10.1017/S096012951200093X
   Bartoletti M, 2010, IEEE S LOG, P332, DOI 10.1109/LICS.2010.25
   Bartoletti M, 2009, LECT NOTES COMPUT SC, V5511, P52, DOI 10.1007/978-3-642-03459-6_4
   Bartoletti M, 2009, ACM T PROGR LANG SYS, V31, DOI 10.1145/1552309.1552313
   Bistarelli S, 1997, J ACM, V44, P201, DOI 10.1145/256303.256306
   Bodei C, 2001, INFORM COMPUT, V168, P68, DOI 10.1006/inco.2000.3020
   Bodei C., 2011, P PROGR LANG APPR CO
   Bodei C, 2005, J COMPUT SECUR, V13, P347
   Bodei C, 2011, ELECTRON PROC THEOR, P49, DOI 10.4204/EPTCS.58.4
   Bodei C, 2012, LECT NOTES COMPUT SC, V7564, P1, DOI 10.1007/978-3-642-33260-9_1
   Bodei C, 2010, LECT NOTES COMPUT SC, V6194, P29, DOI 10.1007/978-3-642-14458-5_2
   Bodei C, 2009, LECT NOTES COMPUT SC, V5511, P70, DOI 10.1007/978-3-642-03459-6_5
   Bodei C, 2009, THEOR COMPUT SCI, V410, P3110, DOI 10.1016/j.tcs.2008.09.036
   Boreale M, 2006, LECT NOTES COMPUT SC, V4184, P38
   Brewer D. F. C., 1989, Proceedings 1989 IEEE Symposium on Security and Privacy (Cat. No.89CH2703-7), P206, DOI 10.1109/SECPRI.1989.36295
   Buscemi MG, 2007, LECT NOTES COMPUT SC, V4421, P18
   Buyya R, 2009, FUTURE GENER COMP SY, V25, P599, DOI 10.1016/j.future.2008.12.001
   Caires L, 2003, INFORM COMPUT, V186, P194, DOI 10.1016/S0890-5401(03)00137-8
   Caires L, 2007, LECT NOTES COMPUT SC, V4661, P98
   Cardelli L, 2000, THEOR COMPUT SCI, V240, P177, DOI 10.1016/S0304-3975(99)00231-5
   Castagna G, 2009, ACM T PROGR LANG SYS, V31, DOI 10.1145/1538917.1538920
   Collinson M, 2010, FORM ASP COMPUT, V22, P483, DOI 10.1007/s00165-010-0155-2
   de Vries E, 2010, ELECTRON P THEOR COM, P26, DOI 10.4204/EPTCS.22.3
   Demers Alan, 1987, P 6 ANN ACM S PRINCI, P1, DOI [DOI 10.1145/41840.41841, 10.1145/41840.41841]
   Dinh V. D., 2011, THESIS
   Ferrari G. L., 2002, ENTCS, V66, P52
   Fong PWL, 2004, P IEEE S SECUR PRIV, P43
   Fournet C, 2003, ACM T PROGR LANG SYS, V25, P360, DOI 10.1145/641909.641912
   Francalanza A., 2012, CS201202 MALT U DEP
   Gao H, 2007, LECT NOTES COMPUT SC, V4846, P150
   GELERNTER D, 1985, ACM T PROGR LANG SYS, V7, P80, DOI 10.1145/2363.2433
   Giachino Elena, 2014, CONCUR 2014 - Concurrency Theory. 25th International Conference, CONCUR 2014. Proceedings: LNCS 8704, P63, DOI 10.1007/978-3-662-44584-6_6
   Gordon A. D., 2008, P WORKSH RIS RIS DEC
   Guidi C, 2006, LECT NOTES COMPUT SC, V4294, P327
   Hamlen KW, 2006, ACM T PROGR LANG SYS, V28, P175, DOI 10.1145/1111596.1111601
   Honda K, 2004, ACM SIGPLAN NOTICES, V39, P163, DOI 10.1145/1016848.1016874
   Igarashi A, 2005, ACM T PROGR LANG SYS, V27, P264, DOI 10.1145/1057387.1057390
   Igarashi A, 2001, ACM SIGPLAN NOTICES, V36, P128, DOI 10.1145/373243.360215
   Kempe D, 2003, ANN IEEE SYMP FOUND, P482, DOI 10.1109/SFCS.2003.1238221
   Kobayashi N, 1999, ACM T PROGR LANG SYS, V21, P914, DOI 10.1145/330249.330251
   Kobayashi N., 2007, TYPICAL
   Kobayashi N., 2006, Logical Methods in Computer Science, V2, P1
   Lapadula A, 2007, LECT NOTES COMPUT SC, V4421, P33
   Ligatti J., 2005, J. Inf. Secur., V4, P2, DOI [10.1007/s10207-004-0046-8, DOI 10.1007/S10207-004-0046-8]
   Lim J.B., 2013, UBIQUITOUS INFORM TE, p[214, 781]
   Lim J, 2014, INT J COMMUN SYST, V27, P852, DOI 10.1002/dac.2638
   Nielson HR, 2012, ACM COMPUT SURV, V44, DOI 10.1145/2071389.2071392
   Nielson HR, 2002, LECT NOTES COMPUT SC, V2566, P223
   O'Hearn PW, 1999, B SYMB LOG, V5, P215, DOI 10.2307/421090
   Oracle-Corporation, 2011, TRY WITH RES STAT
   Padovani L, 2014, JOINT M 23 EACSL ANN
   Papazoglou MP, 2007, COMPUTER, V40, P38, DOI 10.1109/MC.2007.400
   Sangiorgi Davide, 2001, -calculus: A Theory of Mobile Processes
   Schneider F. B., 2000, ACM Transactions on Information and Systems Security, V3, P30, DOI 10.1145/353323.353382
   Skalka C, 2004, LECT NOTES COMPUT SC, V3302, P107
   STROM RE, 1986, IEEE T SOFTWARE ENG, V12, P157, DOI 10.1109/TSE.1986.6312929
   Sunshine J, 2011, OOPSLA 11: PROCEEDINGS OF THE 2011 ACM INTERNATIONAL CONFERENCE ON OBJECT ORIENTED PROGRAMMING SYSTEMS LANGUAGES AND APPLICATIONS, P713
   Teller D, 2004, INT FED INFO PROC, V155, P605
   Turon A., 2011, ELECT NOTES THEORETI, V276, P313
   Vieira HT, 2008, LECT NOTES COMPUT SC, V4960, P269
   Yoshida N, 2007, J LOGIC ALGEBR PROGR, V72, P207, DOI 10.1016/j.jlap.2007.02.011
NR 73
TC 4
Z9 4
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 1
PY 2017
VL 133
BP 20
EP 50
DI 10.1016/j.scico.2016.06.005
PN 1
PG 31
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA EE2CJ
UT WOS:000389391000002
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Campbell, B
   Stark, I
AF Campbell, Brian
   Stark, Ian
TI Randomised testing of a microprocessor model using SMT-solver state
   generation
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Randomised testing; Microprocessor models; HOL; SMT
ID VERIFICATION
AB We validate a HOL4 model of the ARM Cortex-M0 microcontroller core by testing the model's behaviour on randomly chosen instructions against real chips from several manufacturers.
   The model and our intended application involve precise timing information about instruction execution, but the implementations are pipelined, so checking the behaviour of single instructions would not give us sufficient confidence in the model. Thus we test the model using sequences of randomly chosen instructions.
   The main challenge is to meet the constraints on the initial and intermediate execution states: we must ensure that memory accesses are in range and that we respect restrictions on the instructions. By careful transformation of these constraints an off-the-shelf SMT solver can be used to find suitable states for executing test sequences. We also use additional constraints to test our hypotheses about the timing anomalies encountered. (C) 2015 Elsevier B.V. All rights reserved.
C1 [Campbell, Brian; Stark, Ian] Univ Edinburgh, LFCS, Sch Informat, Edinburgh EH8 9YL, Midlothian, Scotland.
C3 University of Edinburgh
RP Campbell, B (corresponding author), Univ Edinburgh, LFCS, Sch Informat, Edinburgh EH8 9YL, Midlothian, Scotland.
EM Brian.Campbell@ed.ac.uk; lan.Stark@ed.ac.uk
OI Campbell, Brian/0000-0001-6941-5034
FU Engineering and Physical Sciences Research Council [EP/K008528/1]; EPSRC
   [EP/K008528/1] Funding Source: UKRI
FX Support for this work was provided by the Engineering and Physical
   Sciences Research Council Programme Grant EP/K008528/1, Rigorous
   Engineering for Mainstream Systems (REMS). Our thanks go to Anthony Fox,
   Magnus Myreen, Peter Sewell and the other members of the REMS project
   for their assistance.
CR AHARON A, 1991, IBM SYST J, V30, P527, DOI 10.1147/sj.304.0527
   Amadio RM, 2014, LECT NOTES COMPUT SC, V8552, P1, DOI 10.1007/978-3-319-12466-7_1
   ARM Ltd, 2010, 03371 DDI ARM
   ARM Ltd, 2013, 0479C DDI ARM
   ARM Ltd, 2009, 0432C DDI ARM
   ARM Ltd, 2010, 0419C DDI ARM
   Beyer S., 2006, International Journal on Software Tools for Technology Transfer, V8, P411, DOI 10.1007/s10009-006-0204-6
   Bin E, 2002, IBM SYST J, V41, P386, DOI 10.1147/sj.413.0386
   Bounimova E, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P122, DOI 10.1109/ICSE.2013.6606558
   Brucker Achim D., 2013, Tests and Proofs. 7th International Conference, TAP 2013. Proceedings: LNCS 7942, P76, DOI 10.1007/978-3-642-38916-0_5
   Campbell Brian, 2014, Formal Methods for Industrial Critical Systems. 19th International Conference, FMICS 2014. Proceedings: LNCS 8718, P185, DOI 10.1007/978-3-319-10702-8_13
   Fox Anthony, 2012, Interactive Theorem Proving. Proceedings of the Third International Conference, ITP 2012, P338, DOI 10.1007/978-3-642-32347-8_23
   Fox A, 2003, LECT NOTES COMPUT SC, V2758, P25
   Fox A, 2010, LECT NOTES COMPUT SC, V6172, P243, DOI 10.1007/978-3-642-14052-5_18
   Kamkin A., 2011, 2011 IEEE Fourth International Conference on Software Testing, Verification and Validation Workshops (ICSTW), P47, DOI 10.1109/ICSTW.2011.35
   Martignoni L, 2013, ACM T SOFTW ENG METH, V22, DOI 10.1145/2522920.2522922
   Morrisett G, 2012, ACM SIGPLAN NOTICES, V47, P395, DOI 10.1145/2345156.2254111
   Myreen MO, 2012, Proceedings of the 12th Conference on Formal Methods in Computer-Aided Design (FMCAD 2012), P78
   Sen K., 2005, P 10 EUR SOFTW ENG C, V30, P263, DOI DOI 10.1145/1081706.1081750
   Strother J., 1998, LNCS, V1522, P334
   Wagstaff H., 2014, P 2014 INT C COMP AR
   Weber Tjark, 2011, International Journal on Software Tools for Technology Transfer, V13, P419, DOI 10.1007/s10009-011-0188-8
   Wilhelm R, 2008, ACM T EMBED COMPUT S, V7, DOI 10.1145/1347375.1347389
NR 23
TC 6
Z9 6
U1 0
U2 1
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR 1
PY 2016
VL 118
BP 60
EP 76
DI 10.1016/j.scico.2015.10.012
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DX8JP
UT WOS:000384634200005
OA Green Accepted
DA 2024-07-18
ER

PT J
AU Sloane, AM
   Roberts, M
AF Sloane, Anthony M.
   Roberts, Matthew
TI Oberon-0 in Kiama
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Oberon-0; Attribute grammars; Term rewriting; Scala; Mixins
AB The Kiama language processing library is a collection of domain-specific languages for software language processing embedded in the Scala programming language. The standard Scala parsing library is augmented by Kiama's facilities for defining attribute grammars, strategy-based rewriting rules and combinator-based pretty-printing. We describe how we used Kiama to implement an Oberon-0 compiler as part of the 2011 LDTA Tool Challenge. In addition, we explain how Scala enabled a modular approach to the challenge. Traits were used to define components that addressed the processing tasks for each Oberon-0 sub-language. Combining the traits as mixins yielded the challenge artefacts. We conclude by reflecting on the strengths and weaknesses of Kiama that were revealed by the challenge and point to some future directions. (C) 2015 Elsevier B.V. All rights reserved.
C1 [Sloane, Anthony M.; Roberts, Matthew] Macquarie Univ, Dept Comp, Sydney, NSW 2109, Australia.
C3 Macquarie University
RP Sloane, AM (corresponding author), Macquarie Univ, Dept Comp, Sydney, NSW 2109, Australia.
EM Anthony.Sloane@mq.edu.au; Matthew.Roberts@mq.edu.au
OI Sloane, Anthony/0000-0002-6802-7360; Roberts,
   Matthew/0000-0002-2553-6157
CR [Anonymous], 2010, Programming in Scala
   Burmako E., 2013, P 4 ANN SCAL WORKSH
   Ford B, 2004, ACM SIGPLAN NOTICES, V39, P111, DOI 10.1145/982962.964011
   KASTENS U, 1994, ACTA INFORM, V31, P601, DOI 10.1007/BF01177548
   Odersky M, 2005, ACM SIGPLAN NOTICES, V40, P41, DOI 10.1145/1103845.1094815
   Sloane AM, 2014, SCI COMPUT PROGRAM, V96, P488, DOI 10.1016/j.scico.2014.02.011
   Sloane AM, 2014, LECT NOTES COMPUT SC, V8706, P191, DOI 10.1007/978-3-319-11245-9_11
   Sloane AM, 2013, SCI COMPUT PROGRAM, V78, P1752, DOI 10.1016/j.scico.2011.11.005
   Sloane AM, 2011, LECT NOTES COMPUT SC, V6491, P408, DOI 10.1007/978-3-642-18023-1_12
   Swierstra SD, 2009, J FUNCT PROGRAM, V19, P1, DOI 10.1017/S0956796808006990
   Visser E, 2003, LECT NOTES COMPUT SC, V3016, P216
   Visser E, 2008, LECT NOTES COMPUT SC, V5235, P291, DOI 10.1007/978-3-540-88643-3_7
   WIRTH N, 1996, COMPILER CONSTRUCTIO
NR 13
TC 8
Z9 8
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 15
PY 2015
VL 114
BP 20
EP 32
DI 10.1016/j.scico.2015.10.010
PG 13
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CZ5DX
UT WOS:000367123800003
DA 2024-07-18
ER

PT J
AU Li, Y
   Sun, M
AF Li, Yi
   Sun, Meng
TI Modeling and verification of component connectors in Coq
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Coordination; Reo; Connector; Coq; Verification
ID COORDINATION; CHECKING; REO
AB Connectors have emerged as a powerful concept for composition and coordination of concurrent activities encapsulated as components and services. Compositional coordination languages like Reo, serve as a means to formally specify and implement connectors. They support large-scale distributed applications by allowing construction of complex component connectors out of simpler ones. In this paper, we present a new approach to modeling and verification of Reo connectors via Coq, a proof assistant based on higher-order logic and A.-calculus. Basic notions in Reo, like nodes and channels, are defined by inductive types. By tracing the data streams, we provide a method for simulation of the behavior and output of a given Reo connector. With input constraints specified, connectors' properties can be proved by induction. Furthermore, properties specified in LTL can be verified using a simulation-based model-checking approach. An access control system is investigated to show our approach. (C) 2015 Elsevier B.V. All rights reserved.
C1 [Li, Yi; Sun, Meng] Peking Univ, Sch Math Sci, LMAM & DI, Beijing 100871, Peoples R China.
C3 Peking University
RP Sun, M (corresponding author), Peking Univ, Sch Math Sci, LMAM & DI, Beijing 100871, Peoples R China.
EM liyi_math@pku.edu.cn; sunmeng@math.pku.edu.cn
RI SUN, MENG/KQA-2135-2024
OI Sun, Meng/0000-0001-6550-7396
FU National Natural Science Foundation of China [61202069, 61272160];
   Research Fund for the Doctoral Program of Higher Education of China
   [20120001120103]
FX The work was partially supported by the National Natural Science
   Foundation of China under grant no. 61202069 and 61272160, and Research
   Fund for the Doctoral Program of Higher Education of China under grant
   no. 20120001120103.
CR Aichernig BK, 2009, THIRD INTERNATIONAL SYMPOSIUM ON THEORETICAL ASPECTS OF SOFTWARE ENGINEERING, PROCEEDINGS, P147, DOI 10.1109/TASE.2009.14
   [Anonymous], 1991, Artificial Intelligence and Mathematical Theory of Computation. Academic Press
   Arbab F, 2004, MATH STRUCT COMP SCI, V14, P329, DOI 10.1017/S0960129504004153
   Arbab F, 2003, LECT NOTES COMPUT SC, V2755, P34
   ARBAB F, 2009, P ESEC FSE 09, P287, DOI DOI 10.1145/1595696.1595745
   Arbab F, 2007, SOFTW SYST MODEL, V6, P59, DOI 10.1007/s10270-006-0009-9
   Arbab F, 2007, LECT NOTES COMPUT SC, V4467, P286
   Arbab F, 2009, LECT NOTES COMPUT SC, V5521, P268, DOI 10.1007/978-3-642-02053-7_14
   Baier C, 2006, SCI COMPUT PROGRAM, V61, P75, DOI 10.1016/j.scico.2005.10.008
   Baier C, 2010, LECT NOTES COMPUT SC, V6416, P97, DOI 10.1007/978-3-642-16561-0_15
   Bertot Y., 2004, TEXT THEORET COMP S
   Ciancarini P, 1996, ACM COMPUT SURV, V28, P300, DOI 10.1145/234528.234732
   Clarke D, 2007, SCI COMPUT PROGRAM, V66, P205, DOI 10.1016/j.scico.2007.01.009
   Clarke E, 2001, FORM METHOD SYST DES, V19, P7, DOI 10.1023/A:1011276507260
   Khosravi R, 2008, LECT NOTES COMPUT SC, V5052, P169, DOI 10.1007/978-3-540-68265-3_11
   Klüppelholz S, 2009, SCI COMPUT PROGRAM, V74, P688, DOI 10.1016/j.scico.2008.09.020
   Kokash N, 2012, FORM ASP COMPUT, V24, P187, DOI 10.1007/s00165-011-0191-6
   Kraemer FA, 2006, 2006 IEEE/WIC/ACM INTERNATIONAL CONFERENCE ON WEB INTELLIGENCE AND INTELLIGENT AGENT TECHNOLOGY, WORKSHOPS PROCEEDINGS, P129, DOI 10.1109/WI-IATW.2006.121
   Li Y, 2014, LECT NOTES COMPUT SC, V8348, P273, DOI 10.1007/978-3-319-07602-7_17
   Meng S, 2012, SCI COMPUT PROGRAM, V77, P799, DOI 10.1016/j.scico.2011.04.002
   Mousavi MR, 2006, ELECTRON NOTES THEOR, V154, P83, DOI 10.1016/j.entcs.2005.12.034
   Ramasubbu Narayan., 2007, Proceedings of the the 6th joint meeting of the European software engineering conference and the ACM SIGSOFT symposium on The foundations of software engineering, P125
   Shtrichman O., 2000, Proceedings of the The International Conference on Computer Aided Verification (CAV), P480
   Sun Meng, 2012, 2012 IEEE Sixth International Symposium on Theoretical Aspects of Software Engineering (TASE 2012), P201, DOI 10.1109/TASE.2012.36
NR 24
TC 6
Z9 6
U1 0
U2 6
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 1
PY 2015
VL 113
BP 285
EP 301
DI 10.1016/j.scico.2015.10.016
PN 3
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CY2HW
UT WOS:000366230400005
OA Bronze
DA 2024-07-18
ER

PT J
AU Gladisch, C
   Tyszberowicz, S
AF Gladisch, Christoph
   Tyszberowicz, Shmuel
TI Specifying linked data structures in JML for combining formal
   verification and testing
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT Brazilian Symposium on Formal Methods (SBMF)
CY SEP 29-OCT 03, 2013
CL Brasilia, BRAZIL
DE Java Modeling Language (JML); Specification; Formal verification;
   Testing; Linked data structures
ID DYNAMIC FRAMES; METHOD CALLS; SPECIFICATION
AB We show how to write concise and readable specifications of linked data structures that are applicable for both formal deductive verification and testing. A singly linked list and a binary search tree are provided as examples. The main characteristic of the specifications is the use of observer methods, in particular to express reachability of elements in a data structure. The specifications are written in the Java Modeling Language (JML) and do not require extensions of that language. This paper addresses a mixed audience of users and developers in the fields of formal verification, testing, and specification language design. We provide an in-depth description of the proposed specifications and analyze the implications both for verification and testing. Based on this analysis we have developed verification techniques that are implemented in the deductive verification tool KeY and enable fully automatic verification of the linked list example. This techniques are also described in this paper. (C) 2015 Elsevier B.V. All rights reserved.
C1 [Gladisch, Christoph] Karlsruhe Inst Technol, Inst Theoret Informat, D-76021 Karlsruhe, Germany.
   [Tyszberowicz, Shmuel] Acad Coll Tel Aviv Yaffo, Sch Comp Sci, Tel Aviv, Israel.
C3 Helmholtz Association; Karlsruhe Institute of Technology
RP Gladisch, C (corresponding author), Karlsruhe Inst Technol, Inst Theoret Informat, D-76021 Karlsruhe, Germany.
EM gladisch@kit.edu
CR Albert E, 2012, LECT NOTES COMPUT SC, V7212, P130, DOI 10.1007/978-3-642-28872-2_10
   Becker K., CLASS LINKEDLIST
   Beckert B, 2005, LECT NOTES ARTIF INT, V3835, P154, DOI 10.1007/11591191_12
   Beckert B., 2007, LECT NOTES COMPUT SC, V4334
   Bouajjani A, 2011, FORM METHOD SYST DES, V38, P158, DOI 10.1007/s10703-011-0111-7
   Boyapati C., 2002, Software Engineering Notes, V27, P123, DOI 10.1145/566171.566191
   Bruns D., 2013, INT J SOFTW TOOLS TE, P1
   Bruns D., 2011, 90248287 I THEOR INF
   Burdy L., 2005, International Journal on Software Tools for Technology Transfer, V7, P212, DOI 10.1007/s10009-004-0167-4
   Chain P., 2005, FMCO LECT NOTES COMP, V4111, P342
   Cheon Y., 2007, DEP TECHNICAL REPORT
   Cohen E, 2009, LECT NOTES COMPUT SC, V5674, P23, DOI 10.1007/978-3-642-03359-9_2
   Cok DR, 2005, J OBJECT TECHNOL, V4, P77, DOI 10.5381/jot.2005.4.8.a4
   Darvas A, 2006, J OBJECT TECHNOL, V5, P59, DOI 10.5381/jot.2006.5.5.a3
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Detlefs D, 2005, J ACM, V52, P365, DOI 10.1145/1066100.1066102
   du Bousquet L, 2010, J AUTOM REASONING, V45, P415, DOI 10.1007/s10817-009-9132-y
   Gladisch Christoph, 2013, Formal Methods: Foundations and Applications. 16th Brazilian Symposium, SBMF 2013. Proceedings: LNCS 8195, P99, DOI 10.1007/978-3-642-41071-0_8
   Grunwald Daniel, 2014, Hardware and Software: Verification and Testing. 10th International Haifa Verification Conference, HVC 2014. Proceedings: LNCS 8855, P99, DOI 10.1007/978-3-319-13338-6_9
   Grunwald D., 2013, THESIS KIT
   Itzhaky Shachar., 2013, CAV, P756, DOI 10.1007/978-3-642-39799-8_53
   Jackson D, 2012, SOFTWARE ABSTRACTIONS: LOGIC, LANGUAGE, AND ANALYSIS, P1
   Jacobs B, 2007, J OBJECT TECHNOL, V6, P5
   Jensen JB, 2011, J OBJECT TECHNOL, V10, DOI 10.5381/jot.2011.10.1.a2
   Kassios IT, 2011, FORM ASP COMPUT, V23, P267, DOI 10.1007/s00165-010-0152-5
   Lahiri SK, 2006, ACM SIGPLAN NOTICES, V41, P115, DOI 10.1145/1111320.1111048
   Leavens GT, 2007, FORM ASP COMPUT, V19, P159, DOI 10.1007/s00165-007-0026-7
   Leavens Gary T, 2006, SIGSOFT Softw. Eng. Notes, V31, P1, DOI [10.1145/1127878.1127884, DOI 10.1145/1127878.1127884]
   Leino KRM, 2009, NATO SCI PEAC SECUR, V22, P231, DOI 10.3233/978-1-58603-976-9-231
   Lev-Ami T, 2009, LOG METH COMPUT SCI, V5, DOI 10.2168/LMCS-5(2:12)2009
   Manevich R, 2005, LECT NOTES COMPUT SC, V3385, P181
   Marinov D., 2001, AUTOMAT SOFTW ENG, P322
   Müller P, 2003, CONCURR COMP-PRACT E, V15, P117, DOI 10.1002/cpe.713
   Nelson G., 1983, POPL 83, P38
   Nguyen HH, 2008, LECT NOTES COMPUT SC, V4905, P203, DOI 10.1007/978-3-540-78163-9_19
   Parkinson M, 2005, ACM SIGPLAN NOTICES, V40, P247, DOI 10.1145/1047659.1040326
   Rajamani SK, 2009, LECT NOTES COMPUT SC, V5779, P25, DOI 10.1007/978-3-642-04694-0_2
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   ROBBY E, 2004, LECT NOTES COMPUTER, V2988, P404
   Smans J, 2009, LECT NOTES COMPUT SC, V5653, P148, DOI 10.1007/978-3-642-03013-0_8
   van Staden S, 2010, LECT NOTES COMPUT SC, V6183, P151, DOI 10.1007/978-3-642-14107-2_8
   Weiss B., 2011, deductive verification of object-oriented software: dynamic frames, dynamic logic and predicate abstraction
   Wenzel M, 2008, LECT NOTES COMPUT SC, V5170, P33, DOI 10.1007/978-3-540-71067-7_7
   Zee K, 2008, ACM SIGPLAN NOTICES, V43, P349, DOI 10.1145/1379022.1375624
   [No title captured]
NR 45
TC 4
Z9 4
U1 0
U2 14
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP
PY 2015
VL 107
BP 19
EP 40
DI 10.1016/j.scico.2015.02.005
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA CM5DZ
UT WOS:000357708300003
DA 2024-07-18
ER

PT J
AU Mu, SC
   Lyu, YH
   Morihata, A
AF Mu, Shin-Cheng
   Lyu, Yu-Han
   Morihata, Akimasa
TI Approximate by thinning: Deriving fully polynomial-time approximation
   schemes
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Approximation algorithms; Program derivation
ID OPTIMIZATION PROBLEMS; ALGORITHMS; MAXIMUM
AB The fully polynomial-time approximation scheme (FPTAS) is a class of approximation algorithms for optimisation problems that is able to deliver an approximate solution within any chosen ratio in polynomial time. By generalising Bird and de Moor's Thinning Theorem to a property between three orderings, we come up with a datatype-generic strategy for constructing fold-based FPTASs. Greedy, thinning, and approximation algorithms can thus be seen as a series of generalisations. Components needed in constructing an FPTAS are often natural extensions of those in the thinning algorithm, Design of complex FPTASs is thus made easier, and some of the resulting algorithms turn out to be simpler than those in previous works. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Mu, Shin-Cheng] Acad Sinica, Inst Informat Sci, Taipei, Taiwan.
   [Lyu, Yu-Han] Dartmouth Coll, Dept Comp Sci, Hanover, NH 03755 USA.
   [Morihata, Akimasa] Univ Tokyo, Grad Sch Arts & Sci, Tokyo 1138654, Japan.
C3 Academia Sinica - Taiwan; Dartmouth College; University of Tokyo
RP Mu, SC (corresponding author), Acad Sinica, Inst Informat Sci, Taipei, Taiwan.
EM scm@iis.sinica.edu.tw; yuhanlyu@cs.dartmouth.edu;
   morihata@graco.c.u-tokyo.ac.jp
RI Morihata, Akimasa/KFR-7683-2024; Mu, Shin-Cheng/ABA-7746-2020
OI Morihata, Akimasa/0000-0003-2741-5954; Mu,
   Shin-Cheng/0000-0002-4755-601X; Lyu, Yu-Han/0000-0002-9344-0499
CR [Anonymous], 1999, COMPLEXITY APPROXIMA, DOI DOI 10.1007/978-3-642-58412-1
   AUSIELLO G, 1995, THEOR COMPUT SCI, V150, P1, DOI 10.1016/0304-3975(94)00291-P
   Backhouse R. C., 1991, SER WORKSHOPS COMPUT, P303
   BACKHOUSE RC, 1991, P IFIP TC2 WG2 1 WOR, P287
   BACKHOUSE RC, 1992, LECT NOTES COMPUTER, V755, P7
   Bird R, 2005, J FUNCT PROGRAM, V15, P679, DOI 10.1017/S0956796805005642
   Bird R, 2002, LECT NOTES COMPUT SC, V2297, P281
   Bird R.S, 1997, INT SER COMPUT SCI
   Bird RS, 2001, J FUNCT PROGRAM, V11, P411, DOI 10.1017/S0956796801004038
   BIRD RS, 1990, RES TOPICS FUNCTIONA, P287
   Curtis S., 1997, IFIP TC2 WORK C ALG, P1
   CURTIS S, 1995, THESIS OXFORD U
   deMoor O, 1995, LECT NOTES COMPUT SC, V982, P1, DOI 10.1007/BFb0026809
   DOERR B, 2009, GECCO 09, P771
   Escoffier B, 2010, COMPUT SCI REV, V4, P19, DOI 10.1016/j.cosrev.2009.11.001
   GAREY MR, 1978, J ACM, V25, P499, DOI 10.1145/322077.322090
   Gries D., 1993, LOGICAL APPROACH DIS
   Halman N, 2008, PROCEEDINGS OF THE NINETEENTH ANNUAL ACM-SIAM SYMPOSIUM ON DISCRETE ALGORITHMS, P700
   Halman N, 2009, OPER RES LETT, V37, P239, DOI 10.1016/j.orl.2009.03.002
   Hinze R., 2000, S PRINC PROGR LANG B, P119
   HOROWITZ E, 1976, J ACM, V23, P317, DOI 10.1145/321941.321951
   IBARRA OH, 1975, J ACM, V22, P463, DOI 10.1145/321906.321909
   Ito T, 2005, INT J FOUND COMPUT S, V16, P803, DOI 10.1142/S0129054105003303
   Jansson P., 1997, S PRINC PROGR LANG
   Kleinberg Jon, 2005, ALGORITHM DESIGN
   Korte B., 1981, Nonlinear Programming, V4, P415
   Mcbride C, 2008, J FUNCT PROGRAM, V18, P1, DOI 10.1017/S0956796807006326
   Morihata A, 2011, NEW GENERAT COMPUT, V29, P31, DOI 10.1007/s00354-010-0098-4
   Mu SC, 2010, WGP 2010: PROCEEDINGS OF THE 2010 ACM SIGPLAN WORKSHOP ON GENERIC PROGRAMMING, P97
   NEMHAUSER GL, 1969, MANAGE SCI, V15, P494, DOI 10.1287/mnsc.15.9.494
   Sasano I, 2000, ACM SIGPLAN NOTICES, V35, P137, DOI 10.1145/357766.351254
   SASANO I, 2001, LECT NOTES COMPUTER, V2196, P72
   Williamson D. P., 2011, DESIGN APPROXIMATION, DOI DOI 10.1017/CBO9780511921735
   Woeginger GJ, 2000, INFORMS J COMPUT, V12, P57, DOI 10.1287/ijoc.12.1.57.11901
NR 34
TC 0
Z9 0
U1 0
U2 2
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 1
PY 2015
VL 98
BP 484
EP 515
DI 10.1016/j.scico.2014.07.001
PN 4
PG 32
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AY7LJ
UT WOS:000347741400003
OA Bronze
DA 2024-07-18
ER

PT J
AU Song, M
   Tilevich, E
AF Song, Myoungkyu
   Tilevich, Eli
TI Reusing metadata across components, applications, and languages
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Software reuse; Metadata; Non-functional concerns; Annotations; XML;
   Domain-specific language
ID DOMAIN-SPECIFIC LANGUAGE; SOFTWARE REUSE
AB Among the well-known means to increase programmer productivity and decrease development effort is systematic software reuse. Although large scale reuse remains an elusive goal, programmers have been successfully reusing individual software artifacts, including components, libraries, and specifications. One software artifact that is not amenable to reuse is metadata, which has become an essential part of modern software development. Specifically, mainstream metadata formats, including XML and Java 5 annotations, are not amenable to systematic reuse. As a result, software that uses metadata cannot fully reap the benefits traditionally associated with systematic reuse. To address this lack of metadata reusability, this article presents Pattern-Based Structural Expressions (PBSE), a new metadata format that is not only reusable, but also offers conciseness and maintainability advantages. PBSE can be reused both across individual program components and across entire applications. In addition, PBSE make it possible to reuse metadata-expressed functionality across languages. In particular, we show how implementations of nonfunctional concerns (commonly expressed through metadata) in existing languages can be reused in emerging languages via automated metadata translation. Because metadata constitutes an intrinsic part of modern software applications, the ability to systematically reuse metadata is essential for improving programmer productivity and decreasing development effort. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Song, Myoungkyu] Univ Texas Austin, Dept Elect & Comp Engn, Austin, TX 78712 USA.
   [Tilevich, Eli] Virginia Tech, Dept Comp Sci, Blacksburg, VA USA.
C3 University of Texas System; University of Texas Austin; Virginia
   Polytechnic Institute & State University
RP Song, M (corresponding author), Univ Texas Austin, Dept Elect & Comp Engn, Austin, TX 78712 USA.
EM mksong1117@utexas.edu; tilevich@cs.vt.edu
OI Tilevich, Eli/0000-0003-2415-6926
FU National Science Foundation [CCF-111656]; IBM through an X10 Innovation
   Award [89]; Division of Computing and Communication Foundations; Direct
   For Computer & Info Scie & Enginr [1116565] Funding Source: National
   Science Foundation
FX This research was supported by the National Science Foundation through
   the Grant CCF-111656 and by IBM through an X10 Innovation Award [89].
CR Abdelmeged A, 2009, IWPSE-EVOL 09: ERCIM WORKSHOP ON SOFTWARE EVOLUTION (EVOL) AND INTERNATIONAL WORKSHOP ON PRINCIPLES OF SOFTWARE EVOLUTION (IWPSE), P89
   Anderson J.W., CSUNIT UNIT TESTING
   [Anonymous], 2011, ICML
   Batory D., 1992, ACM Transactions on Software Engineering and Methodology, V1, P355, DOI 10.1145/136586.136587
   Benzaken V, 2003, ACM SIGPLAN NOTICES, V38, P51, DOI 10.1145/944746.944711
   Beust C., 2007, NEXT GENERATION JAVA
   Boag S., 2007, W3C XQUERY 1 0 XML Q
   Bravenboer M, 2004, ACM SIGPLAN NOTICES, V39, P365, DOI 10.1145/1035292.1029007
   Brown WH., 1998, AntiPatterns: refactoring software, architectures, and projects in crisis
   BURTON BA, 1987, IEEE SOFTWARE, V4, P25, DOI 10.1109/MS.1987.231060
   CALDIERA G, 1991, COMPUTER, V24, P61, DOI 10.1109/2.67210
   Cepa V., 2004, GENERATIVE PROGRAMMI, P319
   Charles Nutter O.B., JRUBY RUBY PROGRAMMI
   Cleenewerck T., 2004, P EUR C OBJ OR PROGR
   Csallner C, 2004, SOFTWARE PRACT EXPER, V34, P1025, DOI 10.1002/spe.602
   Dagum L, 1998, IEEE COMPUT SCI ENG, V5, P46, DOI 10.1109/99.660313
   DeMichiel L., JSR 153 ENTERPRISE J
   Devadithya T., 2007, P 2007 SPRING SIMULA, V2, P435
   Douence R., 2001, LECT NOTES COMPUTER, V2192, P170, DOI DOI 10.1007/3-540-45429-2_13
   Duggan D, 2000, LECT NOTES COMPUT SC, V1850, P179
   Eichberg M, 2005, LECT NOTES COMPUT SC, V3442, P237, DOI 10.1007/978-3-540-31984-9_18
   Fahndrich M., 2006, GPCE 06 P 5 INT C GE, P275, DOI DOI 10.1145/1173706.1173748
   Fisher K, 2005, ACM SIGPLAN NOTICES, V40, P295, DOI 10.1145/1064978.1065046
   Fluri B, 2007, IEEE T SOFTWARE ENG, V33, P725, DOI 10.1109/TSE.2007.70731
   Frakes WB, 2005, IEEE T SOFTWARE ENG, V31, P529, DOI 10.1109/TSE.2005.85
   Godby C.J., 2003, DCMI 03 P 2003 INT C, P1
   Godefroid P, 2005, ACM SIGPLAN NOTICES, V40, P213, DOI 10.1145/1064978.1065036
   GRISS ML, 1993, IBM SYST J, V32, P548, DOI 10.1147/sj.324.0548
   Haefliger S, 2008, MANAGE SCI, V54, P180, DOI 10.1287/mnsc.1070.0748
   Hamill Paul, 2004, Unit Test Frameworks: Tools for High-quality Software Development
   Hernández MA, 2008, PROC VLDB ENDOW, V1, P260
   Hosoya H, 2001, ACM SIGPLAN NOTICES, V36, P67, DOI 10.1145/373243.360209
   Hosoya Haruo, 2003, ACM T INTERNET TECHN, V3, DOI DOI 10.1145/767193.767195
   Huang SS, 2007, LECT NOTES COMPUT SC, V4609, P399
   Huang SS, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P79, DOI 10.1145/1375581.1375592
   Khatchadourian R., 2009, INT C AUT SOFTW ENG
   Kiczales G., 2001, ECOOP 2001 - Object-Oriented Programming. 15th European Conference. Proceedings (Lecture Notes in Computer Science Vol.2072), P327
   Kienzle J, 2002, LECT NOTES COMPUT SC, V2374, P37
   Koppen C., 2004, EUR INT WORKSH ASP S
   Lamping John, 1997, P EUR C OBJ OR PROGR
   Lashuk I, 2009, PROCEEDINGS OF THE CONFERENCE ON HIGH PERFORMANCE COMPUTING NETWORKING, STORAGE AND ANALYSIS
   Lee K, 2003, ACM SIGPLAN NOTICES, V38, P205, DOI 10.1145/949343.949324
   Liechti O, 1998, COMPUT NETWORKS ISDN, V30, P11, DOI 10.1016/S0169-7552(98)00039-7
   Lin JM, 1997, P INT COMP SOFTW APP, P402, DOI 10.1109/CMPSAC.1997.625023
   Liu J, 2003, LECT NOTES COMPUT SC, V2562, P110
   Masmoudi Anis, 2008, International Journal of Advanced Media and Communication, V2, P35, DOI 10.1504/IJAMC.2008.016213
   Massol V., 2004, JUNIT IN ACTION
   Mastroianni C., 2003, Proceedings International Parallel and Distributed Processing Symposium, DOI 10.1109/IPDPS.2003.1213204
   Miller E. J., 2001, Journal of Library Administration, V34, P245, DOI 10.1300/J111v34n03_04
   Millstein T, 2009, ACM T PROGR LANG SYS, V31, DOI 10.1145/1462166.1462168
   Milosavljevic B., 2002, P 2 WORKSHOP INTERME, P59
   Milthorpe J., 2011, P INT PAR DISTR PROC
   Morik K, 2004, INTELLIGENT TECHNOLOGIES FOR INFORMATION ANALYSIS, P47
   Noguera C, 2008, LECT NOTES COMPUT SC, V5095, P48, DOI 10.1007/978-3-540-69100-6_4
   Noguera C, 2012, 2012 28TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE (ICSM), P337, DOI 10.1109/ICSM.2012.6405291
   Odersky M., 2004, An overview of the Scala programming language
   Orso A., 2000, 2 INT WORKSH ENG DIS
   Perkins Jeff H., 2005, PASTE 05, P111, DOI DOI 10.1145/1108768.1108818
   Popa L., 2002, Proceedings of the Twenty-eighth International Conference on Very Large Data Bases, P598
   POULIN JS, 1993, IBM SYST J, V32, P567, DOI 10.1147/sj.324.0567
   Ravichandran T, 2003, COMMUN ACM, V46, P109, DOI 10.1145/859670.859678
   Ravichandran T., 2003, SIGMIS DATABASE, V34, P45, DOI DOI 10.1145/957758.957764
   Roock S., 2002, P INT C EXTREME PROG
   Ruotsalo T, 2007, LECT NOTES COMPUT SC, V4825, P409
   Saraswat Vijay., 2011, X10 language specification
   Schmid K, 2002, ICSE 2002: PROCEEDINGS OF THE 24TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P593, DOI 10.1109/ICSE.2002.1008004
   SMITH TF, 1981, J MOL BIOL, V147, P195, DOI 10.1016/0022-2836(81)90087-5
   Song M, 2012, PROC INT CONF SOFTW, P694, DOI 10.1109/ICSE.2012.6227148
   Sousa J., 2010, P 2010 AOSD WORKSH D, V3
   Stoerzer M, 2005, PROC IEEE INT CONF S, P653
   The X10 Team, IBM RES SMITH WAT AL
   The X10 Team, IBM RES NUM INT IMPL
   Tilevich E., X10 INNOVATION AWARD
   Tourwe T., 2003, P INT C SOFTW MAINT
   Vatkina M., JSR 318 ENTERPRISE J
   WHITE CA, 1994, J CHEM PHYS, V101, P6593, DOI 10.1063/1.468354
   White J, 2009, IEEE SOFTWARE, V26, P47, DOI 10.1109/MS.2009.95
NR 77
TC 4
Z9 6
U1 0
U2 4
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 1
PY 2015
VL 98
BP 617
EP 644
DI 10.1016/j.scico.2014.09.002
PN 4
PG 28
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AY7LJ
UT WOS:000347741400008
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Aichernig, BK
   Jöbstl, E
   Tiran, S
AF Aichernig, Bernhard K.
   Joebstl, Elisabeth
   Tiran, Stefan
TI Model-based mutation testing via symbolic refinement checking
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Model-based testing; Mutation testing; Constraint solving; Refinement;
   Action systems
ID TEST-GENERATION
AB In model-based mutation testing, a test model is mutated for test case generation. The resulting test cases are able to detect whether the faults in the mutated models have been implemented in the system under test. For this purpose, a conformance check between the original and the mutated model is required. The generated counterexamples serve as basis for the test cases. Unfortunately, conformance checking is a hard problem and requires sophisticated verification techniques. Previous attempts using an explicit conformance checker suffered state space explosion. In this paper, we present several optimisations of a symbolic conformance checker using constraint solving techniques. The tool efficiently checks the refinement between non-deterministic test models. Compared to previous implementations, we could reduce our runtimes by 97%. In a new industrial case study, our optimisations can reduce the runtime from over 6 hours to less than 3 minutes. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Aichernig, Bernhard K.; Joebstl, Elisabeth; Tiran, Stefan] Graz Univ Technol, Itute Software Technol, A-8010 Graz, Austria.
   [Tiran, Stefan] Austrian Inst Technol GmbH, A-1220 Vienna, Austria.
C3 Graz University of Technology; Austrian Institute of Technology (AIT)
RP Aichernig, BK (corresponding author), Graz Univ Technol, Itute Software Technol, Inffeldgasse 16b-2, A-8010 Graz, Austria.
EM alchernig@ist.tugraz.at; joebstl@ist.tugraz.at; stiran@ist.tugraz.at
OI Aichernig, Bernhard/0000-0002-3484-5584
FU ARTEMIS Joint Undertaking [269335]; Austrian Research Promotion Agency
   (FFG) under program line Trust in IT Systems [829583]
FX We are grateful to the three anonymous reviewers for their valuable
   feedback that considerably improved the paper. We also thank Rupert
   Schlick (AIT Vienna) for his assistance on the particle counter use case
   and our student Martin Tappler for help during the implementation of
   test case construction. Research herein was funded by ARTEMIS Joint
   Undertaking under grant agreement number 269335 (MBAT) and from the
   Austrian Research Promotion Agency (FFG) under program line Trust in IT
   Systems, project number 829583 (TRUFAL).
CR Aichernig Bernhard K., 2013, Tests and Proofs. 7th International Conference, TAP 2013. Proceedings: LNCS 7942, P1, DOI 10.1007/978-3-642-38916-0_1
   Aichernig B. K., 2012, 2012 IEEE Fifth International Conference on Software Testing, Verification and Validation (ICST 2012), P752, DOI 10.1109/ICST.2012.169
   Aichernig B. K., 2011, Proceedings 2011 IEEE Fourth International Conference on Software Testing, Verification and Validation (ICST 2011), P120, DOI 10.1109/ICST.2011.57
   Aichernig B.K., 2014, LNCS IN PRESS, V8570
   Aichernig BK, 2007, SEFM 2007: FIFTH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING AND FORMAL METHODS, PROCEEDINGS, P215, DOI 10.1109/SEFM.2007.29
   Aichernig BK, 2012, ELECTRON PROC THEOR, P88, DOI 10.4204/EPTCS.80.7
   Aichernig BK, 2012, INT CONF QUAL SOFTW, P21, DOI 10.1109/QSIC.2012.58
   Aichernig BK, 2009, FORM ASP COMPUT, V21, P33, DOI 10.1007/s00165-008-0083-6
   Alpern B., 1988, Conference Record of the Fifteenth Annual ACM Symposium on Principles of Programming Languages, P1, DOI 10.1145/73560.73561
   Ammann PE, 1998, SECOND INTERNATIONAL CONFERENCE ON FORMAL ENGINEERING METHODS, PROCEEDINGS, P46, DOI 10.1109/ICFEM.1998.730569
   [Anonymous], THESIS U QUEENSLAND
   [Anonymous], 1983, P 2 ANN ACM S PRINCI, DOI [10.1145/800221.806716, DOI 10.1145/800221.806716]
   BACK RJ, 1991, STRUCT PROGRAM, V12, P17
   BACK RJR, 1988, ACM T PROGR LANG SYS, V10, P513, DOI 10.1145/48022.48023
   Boroday S, 2007, ELECTRON NOTES THEOR, V190, P3, DOI 10.1016/j.entcs.2007.08.002
   Brandl H., 2010, Proceedings of the Tenth International Conference on Quality Software (QSIC 2010), P3, DOI 10.1109/QSIC.2010.53
   BUDD TA, 1985, COMPUT LANG, V10, P63, DOI 10.1016/0096-0551(85)90011-6
   Carlsson M., 1997, Programming Languages: Implementations, Logics, and Programs. 9th International Symposium, PLILP'97, Including a Special Track on Declarative Programming Languages in Education. Proceedings, P191, DOI 10.1007/BFb0033845
   Clarke E, 2001, FORM METHOD SYST DES, V19, P7, DOI 10.1023/A:1011276507260
   DEMILLO RA, 1978, COMPUTER, V11, P34, DOI 10.1109/C-M.1978.218136
   Dijkstra EdsgerW., 1990, TEXTS MONOGRAPHS COM
   Gotlieb A., 1998, Software Engineering Notes, V23, P53, DOI 10.1145/271775.271790
   Gotlieb A, 2000, LECT NOTES ARTIF INT, V1861, P399
   HAMLET RG, 1977, IEEE T SOFTWARE ENG, V3, P279, DOI 10.1109/TSE.1977.231145
   Hoare C. A. R., 1998, Unifying Theories of Programming
   Jobstl E., 2014, THESIS GRAZ U TECHNO
   Nogueira S, 2008, LECT NOTES COMPUT SC, V5160, P258, DOI 10.1007/978-3-540-85762-4_18
   Okun V., 2003, WSEAS Transactions on Systems, V2, P77
   Roscoe A.W., 1994, MODEL CHECKING CSP, P353
   Tretmans J, 1996, SOFTWARE-CONC TOOL, V17, P103
   Utting M., 2007, PRACTICAL MODEL BASE
   Utting M, 2012, SOFTW TEST VERIF REL, V22, P297, DOI 10.1002/stvr.456
   Whittemore J, 2001, DES AUT CON, P542, DOI 10.1109/DAC.2001.935567
   Wotawa Franz, 2010, Proceedings of the IEEE Third International Conference on Software Testing Verification and Validation - Workshops (ICSTW 2010), P325, DOI 10.1109/ICSTW.2010.11
   Yue Jia, 2011, IEEE Transactions on Software Engineering, V37, P649, DOI 10.1109/TSE.2010.62
NR 35
TC 18
Z9 18
U1 0
U2 4
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 1
PY 2015
VL 97
SI SI
BP 383
EP 404
DI 10.1016/j.scico.2014.05.004
PN 4
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AW8YO
UT WOS:000346545400002
OA Bronze
DA 2024-07-18
ER

PT J
AU Godfrey, MW
AF Godfrey, Michael W.
TI Understanding software artifact provenance
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Software artifact provenance; Software analytics; Code cloning
AB In a well designed software system, units of related functionality are organized into modules and classes, which are in turn arranged into inheritance trees, package hierarchies, components, libraries, frameworks, and services. The trade-offs between simplicity versus flexibility and power are carefully considered, and interfaces are designed that expose the key functional properties of a component while hiding much of the complexity of the implementation details. However, over time the design integrity of a well-engineered system tends to decay as new features are added, as new quality attributes are emphasized, and as old architectural knowledge is lost when experienced development personnel shift to new jobs. Consequently, as developers and as users we often find ourselves looking at a piece of functionality or other design artifact and wondering, "Why is this here?" That is, we would like to examine the provenance of an artifact to understand its history and why it is where it is within the current design of the system. In this brief paper, we sketch some of the dimensions of the broad problem of extracting and reasoning about the provenance of software development artifacts. As a motivating example, we also describe some recent related work that uses hashing to quickly and accurately identify version information of embedded Java libraries. (C) 2013 Elsevier B.V. All rights reserved.
C1 Univ Waterloo, David R Cheriton Sch Comp Sci, Waterloo, ON N2L 3G1, Canada.
C3 University of Waterloo
RP Godfrey, MW (corresponding author), Univ Waterloo, David R Cheriton Sch Comp Sci, Waterloo, ON N2L 3G1, Canada.
EM migod@uwaterloo.ca
RI Godfrey, Michael W/A-1068-2008
CR Davies J.A., 2011, P 8 IEEE WORK C MIN
   Di Penta M., 2010, P 32 ACM IEEE INT C
   Gil Y., 2013, PROV MODEL PRIMER W3
   Hemel A., 2011, P 8 IEEE WORK C MIN
   Hindle A.J., 2009, P IEEE INT C SOFTW M
   Kapser C.J., 2008, EMPIR SOFT ENG, V13
   Kersten M., 2006, P 14 ACM INT S FDN S
   Lu R., 2010, P 5 ACM S INF COMP C
   Menzies T., 2013, IEEE SOFTW, V30
   Nagappan N., 2009, IEEE SOFTW, V26
   Robillard M.P., 2010, IEEE SOFTW, V27
   Simmhan YL, 2005, SIGMOD REC, V34, P31, DOI 10.1145/1084805.1084812
   Sun C., 2010, P 32 ACM IEEE INT C
   Wang X., 2008, P 30 ACM IEEE INT C
NR 14
TC 8
Z9 9
U1 0
U2 9
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 1
PY 2015
VL 97
SI SI
BP 86
EP 90
DI 10.1016/j.scico.2013.11.021
PN 1
PG 5
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AU6PR
UT WOS:000345725100016
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Mosses, PD
AF Mosses, Peter D.
TI Semantics of programming languages: Using ASF plus SDF
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Component-based semantics; Action semantics; ASF plus SDF; Modularity;
   Reuse
AB A semantic specification of a programming language can be relevant for programmers to understand software written in the language, as well as for the implementers of a language to understand the intentions of its designers. In the early 1980s, Jan Heering and Paul Klint envisioned complete language specifications as libraries of reusable individual constructs, supported by a generic programming environment. This led to the development of the ASF+SDF specification language and its Meta-Environment.
   This paper first recalls how programming languages can be specified in ASF+SDF. It then analyses the apparent difficulty of reusing the specifications of individual constructs, and considers some alternative styles of semantics that have been supported using ASF+SDF and its Meta-Environment. It is suggested that these alternative styles could facilitate reuse when specifying programming languages in RASCAL, which has superseded ASF+SDF. (C) 2013 Elsevier B.V. All rights reserved.
C1 Swansea Univ, Dept Comp Sci, Swansea SA2 8PP, W Glam, Wales.
C3 Swansea University
RP Mosses, PD (corresponding author), Swansea Univ, Dept Comp Sci, Singleton Pk, Swansea SA2 8PP, W Glam, Wales.
EM p.d.mosses@swansea.ac.uk
RI Mosses, Peter/A-8206-2019
FU EPSRC grant [EP/I032495/1, 19]; EPSRC [EP/I032495/1] Funding Source:
   UKRI
FX Thanks to the reviewers and Martin Churchill for their helpful comments
   on previous versions. This work was supported by an EPSRC grant
   (EP/I032495/1) to Swansea University for the PLANCOMPS project [19].
CR Basten B., 2011, LECT NOTES COMPUT SC, V6940, P283
   Bergstra J. A., 1989, ALGEBRAIC SPECIFICAT
   Churchill M, 2013, LECT NOTES COMPUT SC, V7794, P97, DOI 10.1007/978-3-642-37075-5_7
   Doh KG, 2003, SCI COMPUT PROGRAM, V47, P3, DOI 10.1016/S0167-6423(02)00107-7
   Heering J, 2000, ACM SIGPLAN NOTICES, V35, P39, DOI 10.1145/351159.351173
   Heering J., 1995, 9504 U AMST PROGR RE, P1
   Mosses P.D., 2006, TEACHING FORMAL METH
   Mosses P. D., 2009, NOTES THEOR COMPUT S, V229, P49
   Mosses P. D., 1986, FORMAL DESCRIPTION P, VIII, P135
   Mosses P.D., 2008, VISIONS COMPUTER SCI, P275, DOI DOI 10.14236/EWIC/VOCS2008.23
   Mosses PD, 2004, J LOGIC ALGEBR PROGR, V60-1, P195, DOI 10.1016/j.jlap.2004.03.008
   Mosses PD, 1996, LECT NOTES COMPUT SC, V1113, P37
   MOSSES PD, 1992, CAMBRIDGE TRACTS THE, V26
   van den Bos J, 2011, ELECTRON PROC THEOR, P15, DOI 10.4204/EPTCS.56.2
   van den Brand M. G. J., 2001, Compiler Construction. 10th International Conference, CC 2001. Held as Part of the Joint European Conferences on Theory and Practice of Software, ETAPS 2001. Proceedings (Lecture Notes in Computer Science Vol.2027), P365
   van den Brand M, 2006, SCI COMPUT PROGRAM, V61, P245, DOI 10.1016/j.scico.2006.04.005
   van der Storm T., 2003, THESIS U AMSTERDAM
   van Deursen A., 1996, Algebraic Methodology and Software Technology. 5th International Conference, AMAST '96. Proceedings, P579, DOI 10.1007/BFb0014346
   van Deursen A., 1994, THESIS U AMSTERDAM
NR 19
TC 1
Z9 2
U1 0
U2 3
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 1
PY 2015
VL 97
SI SI
BP 2
EP 10
DI 10.1016/j.scico.2013.11.038
PN 1
PG 9
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AU6PR
UT WOS:000345725100002
OA Bronze
DA 2024-07-18
ER

PT J
AU Allende, E
   Callaú, O
   Fabry, J
   Tanter, É
   Denker, M
AF Allende, Esteban
   Callau, Oscar
   Fabry, Johan
   Tanter, Eric
   Denker, Marcus
TI Gradual typing for Smalltalk
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Type systems; Gradual typing; Smalltalk
AB Being able to combine static and dynamic typing within the same language has clear benefits in order to support the evolution of prototypes or scripts into mature robust programs. While being an emblematic dynamic object-oriented language, Smalltalk is lagging behind in this regard. We report on the design, implementation and application of Gradualtalk, a gradually-typed Smalltalk meant to enable incremental typing of existing programs. The main design goal of the type system is to support the features of the Smalltalk language, like metaclasses and blocks, live programming, and to accommodate the programming idioms used in practice. We studied a number of existing projects in order to determine the features to include in the type system. As a result, Gradualtalk is a practical approach to gradual types in Smalltalk, with a novel blend of type system features that accommodate most programming idioms. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Allende, Esteban; Callau, Oscar; Fabry, Johan; Tanter, Eric] Univ Chile, Comp Sci Dept DCC, PLEIAD Lab, Santiago, Chile.
   [Denker, Marcus] Inria Lille Nord Europe, RMoD, Lille, France.
C3 Universidad de Chile
RP Callaú, O (corresponding author), Univ Chile, Comp Sci Dept DCC, PLEIAD Lab, Santiago, Chile.
EM eallende@dcc.uchile.cl; oalvarez@dcc.uchile.cl; jfabry@dcc.uchile.cl;
   etanter@dcc.uchile.cl; marcus.denker@inria.fr
RI Tanter, Éric/A-7955-2008
OI Tanter, Éric/0000-0002-7359-890X
FU FONDECYT [1110051]; INRIA Associated Team PLOMO
FX This work is partially funded by FONDECYT Project 1110051, and the INRIA
   Associated Team PLOMO.
CR Ancona D., 2007, P 2007 S DYN LANG DL, P53, DOI DOI 10.1145/1297081.1297091
   Anderson C, 2005, LECT NOTES COMPUT SC, V3586, P428
   [Anonymous], OOPSLA WORKSHOP REVI
   [Anonymous], 2010, P 37 ANN ACM SIGPLAN
   [Anonymous], 2009, LECT NOTES COMPUTER, V5502
   BRACHA G, 1993, SIGPLAN NOTICES, V28, P215, DOI 10.1145/167962.165893
   Bracha G., STRONGTALK TYPE SYST
   Callaú O, 2013, IEEE SOFTWARE, V30, P74, DOI 10.1109/MS.2012.49
   Cardelli L., 1997, COMPUTER SCI ENG HDB, V2nd, P2208
   CARTWRIGHT R, 1991, SIGPLAN NOTICES, V26, P278, DOI 10.1145/113446.113469
   Doligez D., 2011, OCAML SYSTEM RELEASE
   Figueroa I., 2012, P 11 WORKSH FDN ASP, P21
   Findler RB, 2002, ACM SIGPLAN NOTICES, V37, P48, DOI 10.1145/583852.581484
   Furr M., 2009, THESIS U MARYLAND
   Goldberg A., 1983, Smalltalk 80: The Language and Its Implementation
   GRAVER JO, 1990, CONFERENCE RECORD OF THE SEVENTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P136, DOI 10.1145/96709.96722
   Guha A, 2011, LECT NOTES COMPUT SC, V6602, P256, DOI 10.1007/978-3-642-19718-5_14
   Haldiman N, 2009, COMPUT LANG SYST STR, V35, P48, DOI 10.1016/j.cl.2008.06.003
   Herman David, 2010, Higher-Order and Symbolic Computation, V23, P59, DOI 10.1007/s10990-011-9066-z
   Ina L, 2011, ACM SIGPLAN NOTICES, V46, P609, DOI 10.1145/2076021.2048114
   JOHNSON RE, 1986, SIGPLAN NOTICES, V21, P315, DOI 10.1145/960112.28728
   JOHNSON RE, 1988, SIGPLAN NOTICES, V23, P18, DOI 10.1145/62084.62086
   Knowles K, 2010, ACM T PROGR LANG SYS, V32, DOI 10.1145/1667048.1667051
   Malayeri D, 2008, LECT NOTES COMPUT SC, V5142, P260, DOI 10.1007/978-3-540-70592-5_12
   Malayeri D, 2009, LECT NOTES COMPUT SC, V5502, P95, DOI 10.1007/978-3-642-00590-9_8
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Pluquet F, 2009, ACM SIGPLAN NOTICES, V44, P69, DOI 10.1145/1837513.1640145
   Rastogi A, 2012, ACM SIGPLAN NOTICES, V47, P481, DOI 10.1145/2103621.2103714
   Saito C, 2009, ACM SIGPLAN NOTICES, V44, P263, DOI 10.1145/1639949.1640109
   Schärli N, 2003, LECT NOTES COMPUT SC, V2743, P248
   Siek J, 2007, LECT NOTES COMPUT SC, V4609, P2
   Siek J, 2009, LECT NOTES COMPUT SC, V5502, P17, DOI 10.1007/978-3-642-00590-9_2
   Siek Jeremy, 2006, WORKSHOP SCHEME FUNC, P81
   Siek JG, 2010, ACM SIGPLAN NOTICES, V45, P365, DOI 10.1145/1707801.1706342
   Tobin-Hochstadt S., TYPED RACKET GUIDE
   Tobin-Hochstadt S., 2010, THESIS NE U
   Tobin-Hochstadt S, 2010, ACM SIGPLAN NOTICES, V45, P117, DOI 10.1145/1932681.1863561
   Wadler P, 2009, LECT NOTES COMPUT SC, V5502, P1, DOI 10.1007/978-3-642-00590-9_1
   Wolff R, 2011, LECT NOTES COMPUT SC, V6813, P459, DOI 10.1007/978-3-642-22655-7_22
   Wrigstad T, 2010, ACM SIGPLAN NOTICES, V45, P377, DOI 10.1145/1707801.1706343
NR 40
TC 14
Z9 14
U1 0
U2 4
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 15
PY 2014
VL 96
SI SI
BP 52
EP 69
DI 10.1016/j.scico.2013.06.006
PN 1
PG 18
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AT8JX
UT WOS:000345180800005
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Faria, C
   Serra, I
   Girardi, R
AF Faria, Carla
   Serra, Ivo
   Girardi, Rosario
TI A domain-independent process for automatic ontology population from text
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Ontologies; Ontology population; Natural language processing;
   Information extraction
ID EXTRACTION
AB Ontology Population looks for instantiating the constituent elements of an ontology, like properties and non-taxonomic relationships. Manual population by domain experts and knowledge engineers is an expensive and time consuming task. Fast ontology population is critical for the success of knowledge-based applications. Thus, automatic or semi-automatic approaches are needed. This work proposes a generic process approaching the Automatic Ontology Population problem by specifying its phases and the techniques used to perform the activities on each phase. The main contribution of the work here described is a domain-independent process for the automatic population of ontologies from text that applies natural language processing and information extraction techniques to acquire and classify ontology instances. This is a new approach for automatic ontology population that uses an ontology to automatically generate rules to extract instances from text and classify them in ontology classes. These rules can be generated from ontologies of any domain, making the proposed process domain-independent and therefore, allowing the instantiation of ontologies quickly and at a low cost. Four experiments using a legal and a tourism corpora were conducted in order to evaluate l the proposed process. Results indicate that this approach can extract and classify instances with high effectiveness with the additional advantage of domain independence. Some techniques representing the state of the art of this field are also described along with the solutions they adopt for each phase of the Automatic Ontology Population process with their advantages and limitations. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Faria, Carla] Fed Inst Educ Sci Tecnol Maranhao IFMA, Dept Comp Sci, Sao Luis, MA, Brazil.
   [Serra, Ivo; Girardi, Rosario] Fed Univ Maranhao UFMA, Dept Comp Sci, Sao Luis, MA, Brazil.
C3 Instituto Federal do Maranhao; Universidade Federal do Maranhao
RP Girardi, R (corresponding author), Fed Univ Maranhao UFMA, Dept Comp Sci, Sao Luis, MA, Brazil.
EM carlafaria@ifma.edu.br; ivocserra@gmail.com; rosariogirardi@gmail.com
RI Girardi, Rosario/G-2659-2018
FU CNPq, agency of the Brazilian government; CAPES, agency of the Brazilian
   government; FAPEMA, agency of the Brazilian government
FX This work is supported by CNPq, CAPES and FAPEMA, research funding
   agencies of the Brazilian government.
CR Allen J., 1995, Natural Language Understanding
   [Anonymous], 1987, Term weighting approaches in automatic text retrieval
   [Anonymous], 2000, HDB NATURAL LANGUAGE
   Bird Steven, 2009, NATURAL LANGUAGE PRO, DOI DOI 10.1007/S10579-010-9124-X
   Bishoop C. M., 2006, PATTERN RECOGNITION
   Carlson Andrew, 2010, P 3 ACM INT C WEB SE, DOI 10.1145/ 1718487.1718501
   Cimiano P., 2005, WWW, P332
   Cimiano P., 2005, PROC INT C RECENT AD, P166
   COWIE J, 2000, HDB NATURAL LANGUAGE, P241
   Cruanes J., 2011, P NAT LANG INF SYST
   Cunningham H., 2002, P 40 ANN M ASS COMP, P168
   Cunningham H., 2005, Information Extraction, V2nd
   Dellschaft K, 2006, LECT NOTES COMPUT SC, V4273, P228
   Dias-da-Silva B.C., 2004, TECHNICAL REPORT
   Etzioni O, 2004, P 13 INT C WORLD WID, P100, DOI DOI 10.1145/988672.988687
   Evans R., 2003, P INT C REC ADV NAT, P137
   Faria C., 2004, THESIS FEDERAL U MAR
   Faria C, 2013, PROCEEDINGS OF THE 2013 10TH INTERNATIONAL CONFERENCE ON INFORMATION TECHNOLOGY: NEW GENERATIONS, P613, DOI 10.1109/ITNG.2013.94
   Faria C, 2012, INT CONF INTELL SYST, P297, DOI 10.1109/ISDA.2012.6416554
   Faria C, 2011, ADV INTEL SOFT COMPU, V87, P319
   Fellbaum C., 1998, WORDNET ELECT LEXICA, DOI DOI 10.7551/MITPRESS/7287.001.0001
   Fleischman M., 2002, P COLING TAIP TAIW
   GIRARDI MR, 1995, J SYST SOFTWARE, V30, P249, DOI 10.1016/0164-1212(94)00137-C
   Girardi R, 2010, KEOD 2010: PROCEEDINGS OF THE INTERNATIONAL CONFERENCE ON KNOWLEDGE ENGINEERING AND ONTOLOGY DEVELOPMENT, P480
   Guarino N, 1999, IEEE INTELL SYST APP, V14, P70, DOI 10.1109/5254.769887
   Harris Z., 1995, PHILOS LINGUISTICS, P26
   Hearst M, 1998, WORDNET ELECT LEXICA
   KARKALETSIS V, 2006, ACQUIRING REPRESENTI
   MACEDO MJC, 2010, CGCC UFMA FINAL DEGR
   Marcus M. P., 1993, Computational Linguistics, V19, P313, DOI DOI 10.21236/ADA273556
   Ruiz-Martínez JM, 2012, KNOWL-BASED SYST, V36, P68, DOI 10.1016/j.knosys.2012.06.002
   Maynard D, 2008, FRONT ARTIF INTEL AP, V167, P107
   Maynard Diana., 2009, INT C DIGITAL LIB SE
   NIERENBURG S, 2004, ONTOLOGICAL SEMANTIC
   Ruiz-Martinez Juana M., 2008, 2008 IEEE/WIC/ACM International Conference on Web Intelligence and Intelligent Agent Technology - Workshops, P316, DOI 10.1109/WIIAT.2008.278
   RUSSEL S, 2013, Inteligencia Artificial, V3
   Tan P. N., 2016, INTRO DATA MINING
   Tanev H.T., 2006, Proceedings of EACL-2006, P17
   Yildiz B, 2007, LECT NOTES COMPUT SC, V4707, P660
NR 39
TC 26
Z9 31
U1 0
U2 13
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 1
PY 2014
VL 95
SI SI
BP 26
EP 43
DI 10.1016/j.scico.2013.12.005
PN 1
PG 18
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AS9RF
UT WOS:000344578600003
OA Bronze
DA 2024-07-18
ER

PT J
AU Bugliesi, M
   Marin, A
   Rossi, S
AF Bugliesi, M.
   Marin, A.
   Rossi, S.
TI Model checking adaptive service compositions
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 7th International Workshop on Formal Aspects of Component Software
   (FACS)
CY OCT 14-16, 2010
CL Guimaraes, PORTUGAL
DE Process algebra; Non-interference; Model-checking; Web services
ID WEB; SECURITY; CONTRACTS
AB We present a logic-based verification framework for multilevel security and transactional correctness of service oriented architectures. The framework is targeted at the analysis of data confidentiality, enforced by non-interference, and of service responsiveness, captured by a notion of compliance that implies deadlock and livelock freedom. We isolate a class of modal mu-calculus formulae, interpreted over service configurations, that characterise configurations satisfying the properties of interest. We then investigate an adaptation technique based on the use of coercion filters to block any action that might potentially break security or transactional correctness. Based on the above, we devise a model checking algorithm for adaptive service compositions which automatically synthesises the maximal (most expressive/permissive) filter enforcing the desired security and correctness properties. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Bugliesi, M.; Marin, A.; Rossi, S.] Univ Ca Foscari Venezia, I-30172 Venice, Italy.
C3 Universita Ca Foscari Venezia
RP Rossi, S (corresponding author), Dipartimento Sci Ambientali Informat & Stat DAIS, Via Torino 155, I-30172 Venice, Italy.
EM bugliesi@unive.it; marin@dais.unive.it; srossi@dais.unive.it
RI ROSSI, Sabina/ABD-2601-2020
OI Bugliesi, Michele/0000-0002-4567-3351
CR Allen R., 1997, ACM Transactions on Software Engineering and Methodology, V6, P213, DOI 10.1145/258077.258078
   Alves A., Web Services Business Process Execution Language Version 2.0
   [Anonymous], 2005, P 10 EUROPEAN SOFTWA, DOI [10.1145/1095430.1081713, DOI 10.1145/1095430.1081713]
   Baresi L, 2007, IET SOFTW, V1, P219, DOI 10.1049/iet-sen:20070027
   Basciutti T., 2010, THESIS U CAFOSCARI V
   Bentakouk L, 2009, LECT NOTES COMPUT SC, V5826, P16, DOI 10.1007/978-3-642-05031-2_2
   Bernardi G, 2009, PROCEEDINGS OF THE 10TH INTERNATIONAL SYMPOSIUM ON SYMBOLIC AND NUMERIC ALGORITHMS FOR SCIENTIFIC COMPUTING, P327, DOI 10.1109/SYNASC.2008.38
   Bernardi G., 2009, THESIS U CAFOSCARI V
   Bertolino A, 2009, 7TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P141, DOI 10.1145/1595696.1595719
   Booth David., 2007, WEB SERVICES DESCRIP
   Bracciali A., 2002, P INT C PAR DISTR PR, P1372
   Bravetti M., 2008, LNCS, V5387, P37
   Bravetti M, 2007, LECT NOTES COMPUT SC, V4829, P34
   Bravetti M, 2008, FUND INFORM, V89, P451
   Brogi A., 2004, Electronic Notes in Theoretical Computer Science, V105, P73, DOI DOI 10.1016/J.ENTCS.2004.05.007
   Brogi A, 2007, INT J WEB SERV RES, V4, P1, DOI 10.4018/jwsr.2007070101
   Carpineti S, 2006, LECT NOTES COMPUT SC, V4184, P148
   Castagna G, 2008, ACM SIGPLAN NOTICES, V43, P261, DOI 10.1145/1328897.1328471
   Castagna G, 2009, ACM T PROGR LANG SYS, V31, DOI 10.1145/1538917.1538920
   Chan KSM, 2009, LECT NOTES COMPUT SC, V4907, P363, DOI 10.1007/978-3-540-93851-4_36
   Clarke EM, 1999, MODEL CHECKING, P1
   Cleaveland R., 1996, Computer Aided Verification. 8th International Conference, CAV '96. Proceedings, P394
   Focardi R, 2006, J COMPUT SECUR, V14, P65, DOI 10.3233/JCS-2006-14103
   Fu X., 2004, P 13 INT C WORLD WID, P621
   Giannakopoulou D, 2002, ASE 2002: 17TH IEEE INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING, P3, DOI 10.1109/ASE.2002.1114984
   Goguen J. A., 1982, Proceedings of the 1982 Symposium on Security and Privacy, P11
   INVERARDI P, 2001, LNCS, V2029, P60
   KALER C, 2004, WEB SERVICES SECURE
   Kaler C., 2004, WEB SERVICES TRUST L
   KOZEN D, 1983, THEOR COMPUT SCI, V27, P333, DOI 10.1016/0304-3975(82)90125-6
   Laneve C, 2007, LECT NOTES COMPUT SC, V4703, P212
   Lohmann N, 2006, LECT NOTES COMPUT SC, V4102, P17
   Mader A., 1995, LECT NOTES COMPUT SC, V1019, P72
   Martinell F, 2007, ELECTRON NOTES THEOR, V179, P31, DOI 10.1016/j.entcs.2006.08.029
   McLean J., 1990, Proceedings. 1990 IEEE Computer Society Symposium on Research in Security and Privacy (Cat. No.90CH2884-5), P180, DOI 10.1109/RISP.1990.63849
   Milner R., 1989, PRENTICE HALL INT SE, V92
   Muller-Olm M., 1998, ELECT NOTES THEOR CO, V18, P159, DOI DOI 10.1016/S1571-0661(05)80257-9
   Nakajima S, 2004, LECT NOTES COMPUT SC, V3140, P488
   Openld Foundation, OP AUTH
   Ouyang C, 2007, SCI COMPUT PROGRAM, V67, P162, DOI 10.1016/j.scico.2007.03.002
   Rossi Sabina, 2010, INT WORKSHOP FORMAL, P106
   Sabelfeld A, 2003, IEEE J SEL AREA COMM, V21, P5, DOI 10.1109/JSAC.2002.806121
   Salaün G, 2012, IEEE T SERV COMPUT, V5, P290, DOI 10.1109/TSC.2011.9
   Sangiorgi D, 2009, ACM T PROGR LANG SYS, V31, DOI 10.1145/1516507.1516510
   Singhal A., 2007, 80095 NAT I STAND TE
   Tarek M., 2006, Web Services, European Conference on, P306, DOI [10.1109/ECOWS.2006.38, DOI 10.1109/ECOWS.2006.38]
   Tivoli M, 2008, SCI COMPUT PROGRAM, V71, P181, DOI 10.1016/j.scico.2008.03.001
   van der Aalst WMP, 2008, ACM T INTERNET TECHN, V8, DOI 10.1145/1361186.1361189
   Web Services Choreography Working Group, WEB SERV CHOR DESCR
   Yu F., 2008, Proceedings of the 16th ACM SIGSOFT International Symposium on Foundations of Software Engineering, SIGSOFT '08/FSE-16, P192
   Zhao XP, 2006, LECT NOTES COMPUT SC, V4184, P273
   [No title captured]
NR 52
TC 0
Z9 0
U1 0
U2 6
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 15
PY 2014
VL 94
BP 289
EP 306
DI 10.1016/j.scico.2013.11.031
PN 3
PG 18
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA AS1JY
UT WOS:000344038700003
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Dongol, B
   Hayes, IJ
   Derrick, J
AF Dongol, Brijesh
   Hayes, Ian J.
   Derrick, John
TI Deriving real-time action systems with multiple time bands using
   algebraic reasoning
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Sampling logic; Action systems; Time bands; Algebraic reasoning; Program
   refinement
ID REFINEMENT; PROGRESS; DERIVATION
AB The verify-while-develop paradigm allows one to incrementally develop programs from their specifications using a series of calculations against the remaining proof obligations. This paper presents a derivation method for real-time systems with realistic constraints on their behaviour. We develop a high-level interval-based logic that provides flexibility in an implementation, yet allows algebraic reasoning over multiple granularities and sampling multiple sensors with delay. The semantics of an action system is given in terms of interval predicates and algebraic operators to unify the logics for an action system and its properties, which in turn simplifies the calculations and derivations. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Dongol, Brijesh; Derrick, John] Univ Sheffield, Dept Comp Sci, Sheffield S1 4DP, S Yorkshire, England.
   [Hayes, Ian J.] Univ Queensland, Sch Informat Technol & Elect Engn, Brisbane, Qld 4072, Australia.
C3 University of Sheffield; University of Queensland
RP Dongol, B (corresponding author), Univ Sheffield, Dept Comp Sci, Sheffield S1 4DP, S Yorkshire, England.
EM B.Dongol@sheffield.ac.uk; Ian.Hayes@itee.uq.edu.au;
   J.Derrick@dcs.shef.ac.uk
RI Dongol, Brijesh/ABB-2935-2020
OI Dongol, Brijesh/0000-0003-0446-3507; Derrick, John/0000-0002-6631-8914;
   Hayes, Ian/0000-0003-3649-392X
FU EPSRC Grant [EP/J003727/1]; ARC Discovery Grant [DP130102901]; EPSRC
   [EP/J003727/1] Funding Source: UKRI
FX Brijesh Dongol and John Derrick are supported by EPSRC Grant
   EP/J003727/1.; Ian Hayes is supported by ARC Discovery Grant
   DP130102901.
CR Aichernig BK, 2009, LECT NOTES COMPUT SC, V5885, P206, DOI 10.1007/978-3-642-10373-5_11
   Back R.-J., 1998, Refinement Calculus
   Back R.-J., 2000, LECT NOTES COMPUTER, V1926, P73
   Back R. J. R., 2003, Formal Aspects of Computing, V15, P103, DOI 10.1007/s00165-003-0005-6
   BACK RJ, 1991, STRUCT PROGRAM, V12, P17
   Back RJR, 1999, ACTA INFORM, V36, P295, DOI 10.1007/s002360050163
   Back RJR, 1994, LECT NOTES COMPUT SC, V836, P367
   Broy M, 2001, THEOR COMPUT SCI, V253, P3, DOI 10.1016/S0304-3975(00)00087-6
   Burns A, 2006, STRUCTURE FOR DEPENDABILITY: COMPUTER-BASED SYSTEMS FROM AN INTERDISCIPLINARY PERSPECTIVE, P74, DOI 10.1007/1-84628-111-3_4
   Burns A, 2010, REAL-TIME SYST, V45, P106, DOI 10.1007/s11241-010-9094-5
   Chandy K.M., 1988, PARALLEL PROGRAM DES
   Coleman JW, 2007, J LOGIC COMPUT, V17, P807, DOI 10.1093/logcom/exm030
   De Wulf M, 2008, FORM METHOD SYST DES, V33, P45, DOI 10.1007/s10703-008-0056-7
   DIJKSTRA EW, 1975, COMMUN ACM, V18, P453, DOI [10.1145/360933.360975, 10.1145/390016.808417]
   Dongol Brijesh, 2012, Relational and Algebraic Methods in Computer Science. Proceedings 13th International Conference, RAMiCS 2012, P50, DOI 10.1007/978-3-642-33314-9_4
   Dongol Brijesh, 2012, Mathematics of Program Construction. Proceedings 11th International Conference, MPC 2012, P102, DOI 10.1007/978-3-642-31113-0_7
   Dongol Brijesh, 2012, Integrated Formal Methods. Proceedings 9th International Conference, IFM 2012, P39, DOI 10.1007/978-3-642-30729-4_4
   Dongol B., 2013, FORM ASP CO IN PRESS
   Dongol B., 2009, THESIS U QUEENSLAND
   Dongol B, 2008, FORM ASP COMPUT, V20, P141, DOI 10.1007/s00165-007-0037-4
   Dongol B, 2006, LECT NOTES COMPUT SC, V4014, P140, DOI 10.1007/11783596_11
   Dongol B, 2013, SCI COMPUT PROGRAM, V78, P2047, DOI 10.1016/j.scico.2012.07.008
   Dongol B, 2010, LECT NOTES COMPUT SC, V6120, P119, DOI 10.1007/978-3-642-13321-3_9
   Dongol B, 2009, IEEE AUS SOFT ENGR, P3, DOI 10.1109/ASWEC.2009.12
   Feijen W.H.J., 1999, METHOD MULTIPROGRAMM
   Fidge C. J., 1997, Formal Aspects of Computing, V9, P175, DOI 10.1007/BF01211618
   Guelev D.P., 2002, ELECT NOTES THEOR CO, V65, P101
   Gupta V, 1997, LECT NOTES COMPUT SC, V1201, P331, DOI 10.1007/BFb0014736
   Hayes IJ, 2013, COMPUT J, V56, P741, DOI 10.1093/comjnl/bxt005
   Hayes IJ, 2003, LECT NOTES COMPUT SC, V2805, P154
   Hayes IJ, 2001, ACTA INFORM, V37, P385, DOI 10.1007/PL00013311
   Henzinger T. A., 1999, Computer Aided Verification. 11th International Conference, CAV'99. Proceedings (Lecture Notes in Computer Science Vol.1633), P208
   Henzinger TA, 1996, IEEE S LOG, P278, DOI 10.1109/LICS.1996.561342
   Höfner P, 2008, J LOGIC ALGEBR PROGR, V76, P35, DOI 10.1016/j.jlap.2007.10.004
   Höfner P, 2009, J LOGIC ALGEBR PROGR, V78, P74, DOI 10.1016/j.jlap.2008.08.005
   Hooman J, 2000, REAL-TIME SYST, V19, P61, DOI 10.1023/A:1008188323123
   JONES CB, 1983, ACM T PROGR LANG SYS, V5, P596, DOI 10.1145/69575.69577
   Jones CB, 2007, LECT NOTES COMPUT SC, V4700, P364
   Manna Z., 1992, Temporal verification of reactive and concurrent systems: Specification
   Meinicke L, 2006, LECT NOTES COMPUT SC, V4014, P316, DOI 10.1007/11783596_19
   Moszkowski B., 1995, Proceedings First IEEE International Conference on Engineering of Complex Comput Systems. Held jointly with 5th CSESAW, 3rd IEEE RTAW and 20th IFAC/IFIP WRTP (Cat. No.95TB100007), P238, DOI 10.1109/ICECCS.1995.479336
   Moszkowski B.C., 1997, LNCS, V1536, P439
   Moszkowski BC, 2000, IEEE S LOG, P241
   Roever W. P. de, 1996, CAMBRIDGE TRACTS THE, V47
   Rönkkö M, 2003, THEOR COMPUT SCI, V290, P937, DOI 10.1016/S0304-3975(02)00547-9
   Rönkkö M, 1999, LECT NOTES COMPUT SC, V1567, P304
   von Karger B, 2000, SCI COMPUT PROGRAM, V37, P139, DOI 10.1016/S0167-6423(99)00025-8
   von Karger B., 2000, LECT NOTES COMPUTER, V2297, P309
   Wei K., 2010, FORMALISING TIMEBAND
   Westerlund T, 2007, ELECTRON NOTES THEOR, V187, P91, DOI 10.1016/j.entcs.2006.08.046
   Zhou C., 2004, EATCS: Monographs in Theoretical Computer Science
NR 51
TC 4
Z9 4
U1 0
U2 1
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 1
PY 2014
VL 85
SI SI
BP 137
EP 165
DI 10.1016/j.scico.2013.08.009
PN B
PG 29
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CC8KX
UT WOS:000350618700004
OA hybrid, Green Submitted
DA 2024-07-18
ER

PT J
AU Catano, N
   Ahmed, I
   Siminiceanu, RI
   Aldrich, J
AF Catano, Nestor
   Ahmed, Ijaz
   Siminiceanu, Radu I.
   Aldrich, Jonathan
TI A case study on the lightweight verification of a multi-threaded task
   server
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Concurrency; Parallelism; Formal methods; Specification; Verification;
   Model checking; Program analysis
ID MODEL-CHECKING; SPECIFICATIONS; TYPESTATE
AB We present a case study on the verification of the design of a commercial multi-threaded task server (MTTS), developed by the Novabase company, used for massively parallelizing computational tasks. In a first stage, we employed the Plural tool, which is designed to perform lightweight verification of Java programs using a data-flow analysis (DFA) framework, to specify and verify the MTTS. We wrote the Plural specification for the MTTS based on the code developed by Novabase, its informal documentation, and our discussions with Novabase engineers, who validated our understanding of the MTTS application. The Plural specification language is based on typestates and access permissions. In a second stage, we developed the Pulse tool, which enhances the analysis performed by Plural, and used the tool on the MTTS specifications. Pulse translates Plural specifications into an abstract state-machine model that captures the semantics of all the possible concurrent programs implementing the given specifications, and uses the evmdd-smc symbolic model checker to verify the machine model. The experimental results on the MTTS specification show that the exhaustive model-checking approach scales reasonably well and is efficient at finding errors in specifications that were not previously detected with the data-flow analysis (DFA) capabilities of Plural. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Catano, Nestor; Ahmed, Ijaz] Carnegie Mellon Univ, Pittsburgh, PA 15213 USA.
   [Catano, Nestor] Univ Madeira, Funchal, Portugal.
   [Ahmed, Ijaz] Madeira ITI, Funchal, Portugal.
   [Siminiceanu, Radu I.] Natl Inst Aerosp, Hampton, VA USA.
   [Aldrich, Jonathan] Carnegie Mellon Univ, Sch Comp Sci, Inst Software Res, Pittsburgh, PA 15213 USA.
C3 Carnegie Mellon University; Universidade da Madeira; National Institute
   for Aerospace; Carnegie Mellon University
RP Catano, N (corresponding author), Carnegie Mellon Univ, Pittsburgh, PA 15213 USA.
EM nestor.catano@gmail.com; ijaz.ahmed@m-iti.org; radu@nianet.org;
   jonathan.aldrich@cs.cmu.edu
OI Aldrich, Jonathan/0000-0003-0631-5591; Catano,
   Nestor/0000-0001-5015-5893
FU Portuguese Research Agency FCT through the CMU-Portugal program, R&D
   Project Aeminium [CMU-PT/SE/0038/2008]; Fundação para a Ciência e a
   Tecnologia [CMU-PT/SE/0038/2008] Funding Source: FCT
FX This work has been supported by the Portuguese Research Agency FCT
   through the CMU-Portugal program, R&D Project Aeminium,
   CMU-PT/SE/0038/2008,
CR Ahmed I., 2011, PULSE TOOL
   Ahmed I., 2010, ARCHITECTURE NOVABAS
   Ball T., 2001, Model Checking Software. 8th International SPIN Workshop. Proceedings (Lecture Notes in Computer Science Vol.2057), P103
   Bierhoff K, 2007, ACM SIGPLAN NOTICES, V42, P301, DOI 10.1145/1297105.1297050
   Bokowski B, 1999, ACM SIGPLAN NOTICES, V34, P82, DOI 10.1145/320385.320392
   Boyapati C, 2002, ACM SIGPLAN NOTICES, V37, P211, DOI 10.1145/583854.582440
   Boyland J., 2001, ECOOP 2001 - Object-Oriented Programming. 15th European Conference. Proceedings (Lecture Notes in Computer Science Vol.2072), P2
   Boyland J, 2003, LECT NOTES COMPUT SC, V2694, P55
   Breunesse CB, 2005, SCI COMPUT PROGRAM, V55, P53, DOI 10.1016/j.scico.2004.05.011
   Cata~no N., 2002, FME 2002, V2391, P272
   CLARKE EM, 1986, ACM T PROGR LANG SYS, V8, P244, DOI 10.1145/5397.5399
   Corbett J. C., 2002, International Journal on Software Tools for Technology Transfer, V4, P34, DOI 10.1007/s100090200075
   de Moura L., 2003, SRICSL0102
   DeLine R, 2001, ACM SIGPLAN NOTICES, V36, P59, DOI 10.1145/381694.378811
   DeLine Rob, 2004, The Fugue Protocol Technical Report MSR-TR-2004-07. Checker: Is Your Software Baroque?
   Galloway A, 2009, LECT NOTES COMPUT SC, V5403, P74, DOI 10.1007/978-3-540-93900-9_10
   GIRARD JY, 1987, THEOR COMPUT SCI, V50, P1, DOI 10.1016/0304-3975(87)90045-4
   Heimdahl MPE, 1996, IEEE T SOFTWARE ENG, V22, P363, DOI 10.1109/32.508311
   Jackson D, 2002, ACM T SOFTW ENG METH, V11, P256, DOI 10.1145/505145.505149
   Jacobs B, 2011, LECT NOTES COMPUT SC, V6617, P41, DOI 10.1007/978-3-642-20398-5_4
   Leavens Gary T, 2006, SIGSOFT Softw. Eng. Notes, V31, P1, DOI [10.1145/1127878.1127884, DOI 10.1145/1127878.1127884]
   Plagge Daniel, 2010, International Journal on Software Tools for Technology Transfer, V12, P9, DOI 10.1007/s10009-009-0132-3
   Plagge D, 2007, LECT NOTES COMPUT SC, V4591, P480
   Rodriguez R. E., 2006, International Journal on Software Tools for Technology Transfer, V8, P280, DOI 10.1007/s10009-005-0218-5
   Roux Pierre., 2010, Proc. of the 2nd NASA Formal Methods Symposium, P222
   Smith G, 2005, LECT NOTES COMPUT SC, V3455, P85
   Stork Sven., 2009, Proceeding of the 24th ACM SIGPLAN conference companion on Object oriented programming systems languages and applications, P933
   STROM RE, 1986, IEEE T SOFTWARE ENG, V12, P157, DOI 10.1109/TSE.1986.6312929
   Wahls T., 2009, 24 ACM S APPL COMP S, P404
   Wong PYH, 2011, SCI COMPUT PROGRAM, V76, P942, DOI 10.1016/j.scico.2010.09.007
NR 30
TC 4
Z9 4
U1 0
U2 5
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 1
PY 2014
VL 80
BP 169
EP 187
DI 10.1016/j.scico.2013.01.004
PN A
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 292FG
UT WOS:000329887000012
OA hybrid, Green Submitted
DA 2024-07-18
ER

PT J
AU Krebs, N
   Schmitz, L
AF Krebs, Nico
   Schmitz, Lothar
TI JACCIE: A Java-based compiler-compiler for generating, visualizing and
   debugging compiler components
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Compiler-compiler; Compiler generation; Visualization of compiling
   techniques
AB Many programmers live in happy ignorance of their compilers' internal workings. Others may want to take a look at what is going on inside a compiler in much the same way that they use a debugger to watch their compiled programs execute. While conventional compilers are black boxes whose internals are hidden from the user, the JACCIE tool set helps to open up the box and have a look at what is going on inside.
   Technically speaking, JACCIE is a compiler-compiler that, from suitable formal descriptions, generates the scanner, parser, and attribute evaluator components of a compiler and presents them in a visual debugging environment. It offers a number of alternative parser generators producing both top-down (LL) and bottom-up parsers of the LR variety, including SLR(1) and LALR(1) parsers, thus allowing users to experiment with different parsing strategies and to get a "feel" for their relative pros and cons. When designing JACCIE, the main emphasis was on two ergonomic goals that we considered important for educational software. Firstly, give user control over the program and not vice versa, e.g., our parsers (and other components) can be directed to go step-by-step forwards or backwards or to leap to some point in the input indicated by the users. Secondly, overcome the sometimes severe size limitations of computer displays by offering the same information in multiple representations that complement each other and by dividing information in smaller chunks that can be traversed in a meaningful way.
   In this paper, after outlining the architecture of JACCIE, we discuss some of its technical and ergonomic aspects in detail, give a brief introduction into the use of JACCIE and its documentation, show an example application done with JACCIE, and finally discuss related work and future plans. (C) 2012 Elsevier B.V. All rights reserved.
C1 [Krebs, Nico; Schmitz, Lothar] Univ Bundeswehr Munchen, Fak Informat, Munich, Germany.
C3 Bundeswehr University Munich
RP Schmitz, L (corresponding author), Univ Bundeswehr Munchen, Fak Informat, Munich, Germany.
EM Nico.Krebs@unibw.de; Lothar.Schmitz@unibw.de
CR Allauzen C, 2006, LECT NOTES COMPUT SC, V4162, P110
   [Anonymous], 2007, COMPILERS PRINCIPLES
   [Anonymous], 2007, PARSING TECHNIQUES P
   [Anonymous], 1960, IRE transactions on Electronic Computers, DOI [DOI 10.1109/TEC.1960.5221603, 10.1109/TEC.1960.5221603]
   Berg A., 1985, 1985 ACM SIGSMALL Symposium on Small Systems, P70, DOI 10.1145/317164.317173
   Borghoff U., 2006, Long-Term Preservation of Digital Documents: Principles and Practices
   Bovet J, 2008, SOFTWARE PRACT EXPER, V38, P1305, DOI 10.1002/spe.872
   EARLEY J, 1970, COMMUN ACM, V13, P94, DOI 10.1145/362007.362035
   FURUTA R, 1991, SOFTWARE PRACT EXPER, V21, P119, DOI 10.1002/spe.4380210202
   HEILBRUNNER S, 1981, THEOR COMPUT SCI, V15, P117, DOI 10.1016/0304-3975(81)90067-0
   Johnstone Adrian., 2004, 4 WORKSHOP LANGUAGE, P97
   Jonassen D., 1988, Instructional designs for microcomputer courseware, P151
   Jorgensen A., 2011, LDTA 11 LANGUAGE DES
   KASTENS U, 1980, ACTA INFORM, V13, P229, DOI 10.1007/BF00288644
   Klint P, 2005, ACM T SOFTW ENG METH, V14, P331, DOI 10.1145/1072997.1073000
   Knuth D. E., 1968, Mathematical Systems Theory, V2, P127, DOI 10.1007/BF01692511
   KNUTH DE, 1965, INFORM CONTROL, V8, P607, DOI 10.1016/S0019-9958(65)90426-2
   Levine J., 1992, LEX VACC
   Lorie R. A., 2002, JCDL 2002. Proceedings of the Second ACM/IEEE-CS Joint Conference on Digital Libraries, P312, DOI 10.1145/544220.544296
   Mernik M, 2002, LECT NOTES COMPUT SC, V2304, P1
   SCHMITZ L, 1984, INT J COMPUT MATH, V15, P99, DOI 10.1080/00207168408803404
   Tomita M., 1985, P 9 INT JOINT C ART, P756
   [No title captured]
NR 23
TC 6
Z9 6
U1 1
U2 46
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 1
PY 2014
VL 79
SI SI
BP 101
EP 115
DI 10.1016/j.scico.2012.03.001
PG 15
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 246RH
UT WOS:000326556300008
OA hybrid
DA 2024-07-18
ER

PT J
AU Sarimbekov, A
   Sewe, A
   Binder, W
   Moret, P
   Mezini, M
AF Sarimbekov, Aibek
   Sewe, Andreas
   Binder, Walter
   Moret, Philippe
   Mezini, Mira
TI JP2: Call-site aware calling context profiling for the Java Virtual
   Machine
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Calling context profiling; Bytecode instrumentation; Dynamic metrics;
   Selective profiling
ID ACCURATE
AB Calling context profiling fulfills programmers' information needs to obtain a complete picture of a program's inter- and intra-procedural control flow, which are important for workload characterization, debugging, profiling, program comprehension, and reverse engineering. Many existing calling context profilers for Java, however, resort to sampling or other incomplete instrumentation techniques; thus, they collect incomplete profiles only. In this article we present JP2, a new calling context profiler for the Java Virtual Machine, which collects profiles that are not only complete but also call-site aware; that is, JP2 is able to distinguish between multiple call sites within a single method. JP2 supports selective profiling of the dynamic extent of chosen methods and supports profiling of native method invocations. Moreover, produced profiles contain execution statistics at the level of individual basic blocks of code, thereby preserving the intra-procedural control flow of the profiled applications. We rigorously evaluate the overhead incurred by JP2. This overhead is acceptable in tasks such as workload characterization. JP2 is freely available under an Open Source license. (C) 2012 Elsevier B.V. All rights reserved.
C1 [Sarimbekov, Aibek; Binder, Walter; Moret, Philippe] Univ Lugano, Fac Informat, Lugano, Switzerland.
   [Sewe, Andreas; Mezini, Mira] Tech Univ Darmstadt, Software Technol Grp, Darmstadt, Germany.
C3 Universita della Svizzera Italiana; Technical University of Darmstadt
RP Sarimbekov, A (corresponding author), Univ Lugano, Fac Informat, Lugano, Switzerland.
EM aibek.sarimbekov@usi.ch; sewe@st.informatik.tu-darmstadt.de;
   walter.binder@usi.ch; philippe.moret@usi.ch;
   mezini@st.informatik.tu-darmstadt.de
OI Binder, Walter/0000-0002-2477-2182
FU Swiss National Science Foundation; Center for Advanced Security Research
   Darmstadt
FX This work is supported by the Swiss National Science Foundation and by
   the Center for Advanced Security Research Darmstadt.
CR Alpern B, 2000, IBM SYST J, V39, P211, DOI 10.1147/sj.391.0211
   Ammons G., P 10 C PROGR LANG DE, P85
   [Anonymous], 2010, W3C WORKING DRAFT
   Arnold M., P 14 C PROGR LANG DE, P168
   Arnold M., 2000, RC21789 IBM TJ WATS
   Artzi S, 2008, LECT NOTES COMPUT SC, V5142, P542, DOI 10.1007/978-3-540-70592-5_23
   BALL T, 1994, ACM T PROGR LANG SYS, V16, P1319, DOI 10.1145/183432.183527
   Binder W, 2005, LECT NOTES COMPUT SC, V3780, P178
   Binder W., P 5 INT S PRINC PRAC, P135
   Binder W, 2009, SOFTWARE PRACT EXPER, V39, P47, DOI 10.1002/spe.890
   Blackburn S.M., P 21 C OBJ OR PROGR, P169
   Bond M.D., P 22 C OBJ OR PROGR, P97
   Cooper B.F., 1998, CUCS85398
   Dmitriev M., P 4 INT WORKSH SOFTW, P139
   Dufour B., P 18 C OBJ OR PROGR, P149
   Dufour B., 18 ACM SIGPLAN C OBJ, P306
   LARUS JR, 1994, SOFTWARE PRACT EXPER, V24, P197, DOI 10.1002/spe.4380240204
   Liang S., P 5 USENIX C OBJ OR, P229
   Lin Z., P 15 ANN NETW DISTR
   Moret P., P WORKSH PART EV PRO, P151
   Moret P., P 10 INT C ASP OR SO, P129
   Rountev A, 2005, LECT NOTES COMPUT SC, V3442, P289, DOI 10.1007/978-3-540-31984-9_22
   Sarimbekov A., P 6 WORKSH BYT SEM V
   Sarimbekov A., P 9 INT C PRINC PRAC, P11
   Schoeberl M, 2008, J SYST ARCHITECT, V54, P265, DOI 10.1016/j.sysarc.2007.06.001
   Sewe A., P 26 C OBJ OR PROGR, P657
   Spivey JM, 2004, SOFTWARE PRACT EXPER, V34, P249, DOI 10.1002/spe.562
   Srivastava A, 2004, ACM SIGPLAN NOTICES, V39, P528, DOI 10.1145/989393.989446
   *SUN MICR INC, 2000, JAV VIRT MACH PROF I
   Sun Microsystems Inc, 2004, JVM TOOL INT JVMTI V
   The Standard Performance Evaluation Corporation, 1998, SPEC JVM8 BENCHM
   Whaley John., 2000, JAVA 00, P78
   Zhuang X, 2006, ACM SIGPLAN NOTICES, V41, P263, DOI 10.1145/1133981.1134012
NR 33
TC 14
Z9 14
U1 0
U2 25
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 1
PY 2014
VL 79
SI SI
BP 146
EP 157
DI 10.1016/j.scico.2011.11.003
PG 12
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 246RH
UT WOS:000326556300011
OA hybrid
DA 2024-07-18
ER

PT J
AU Eklund, U
   Gustavsson, H
AF Eklund, Ulrik
   Gustavsson, Hakan
TI Architecting automotive product lines: Industrial practice
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Architecting; Process; Case study; Automotive industry
AB This paper presents an in-depth view of how architects work with maintaining product line architectures at two internationally well-known automotive companies.
   The case study shows several interesting results. The process of managing architectural changes as well as the information the architects maintain and update is surprisingly similar between the two companies, despite that one has a strong line organisation and the other a strong project organisation. The architecting process found does not differ from what can be seen in other business domains. What does differ is that the architects studied see themselves interacting much more with other stakeholders than architects in general. The actual architectures are based on similar technology, e.g. CAN, but the network topology, S/W deployment and interfaces are totally different. The results indicate how the company's different core values influence the architects when defining and maintaining the architectures over time.
   One company maintains four similar architectures in parallel, each at a different stage in their respective life-cycle, while the other has a single architecture for all products since 2002. The organisational belonging of the architects in the former company has been turbulent in contrast to the latter and there is some speculation if this is correlated. (C) 2012 Elsevier B.V. All rights reserved.
C1 [Eklund, Ulrik] Volvo Car Corp, Gothenburg, Sweden.
   [Gustavsson, Hakan] Scania, Sodertalje, Sweden.
C3 Volvo; Scania
RP Eklund, U (corresponding author), Volvo Car Corp, Gothenburg, Sweden.
EM ueklund@volvocars.com; hakan.gustavsson@scania.se
FU Knowledge Foundation; Swedish Agency for Innovation Systems (VINNOVA) as
   part of the FFI program
FX This work has been financially supported by the Knowledge Foundation and
   the Swedish Agency for Innovation Systems (VINNOVA) as part of the FFI
   program. None of the funding agencies have been directly involved in the
   study design, data collection and analysis or in the writing of this
   paper.
CR [Anonymous], STRATEGIES MANAGEMEN
   [Anonymous], P ASME INT DES ENG T
   [Anonymous], SCRUM PAPERS NUTS BO
   [Anonymous], IEEE1471
   [Anonymous], J SYSTEMS SOFTWARE
   AUTOSAR, 2010, AUTOSAR SPEC
   Axelsson J, 2009, 2009 JOINT WORKING IEEE/IFIP CONFERENCE ON SOFTWARE ARCHITECTURE AND EUROPEAN CONFERENCE ON SOFTWARE ARCHITECTURE, P101, DOI 10.1109/WICSA.2009.5290796
   Bass L., 2013, SOFTWARE ARCHITECTUR
   BERGSJO D, 2010, P INT C ENG DES DUBR
   Brannick T, 2007, ORGAN RES METHODS, V10, P59, DOI 10.1177/1094428106289253
   BROY M, 2006, P 28 INT C SOFTW ENG, P55
   Buhrdorf R, 2004, LECT NOTES COMPUT SC, V3014, P317
   Casparsson L., 1998, VOLVO TECHNOLOGY REP, P9
   Cloutier R, 2010, SYSTEMS ENG, V13, P14, DOI 10.1002/sys.20129
   CONWAY ME, 1968, DATAMATION, V14, P28
   Coplien J., 2010, LEAN ARCHITECTURE AG
   Crnkovic I., 2002, BUILDING RELIABLE CO
   Dobrica L, 2002, IEEE T SOFTWARE ENG, V28, P638, DOI 10.1109/TSE.2002.1019479
   EAST-EEA, DEF LANG AUT EMB EL
   EDSTROM A, 2006, ELEKTRONIKTIDNINGEN
   EDSTROM A, 2008, ELEKTRONIKTIDNINGEN, P26
   Eeles P., 2010, The Process of Software Architecting
   EKLUND U, 2005, SIGSOFT SOFTW ENG NO, V30, P1
   Farenhorst R, 2009, 2009 JOINT WORKING IEEE/IFIP CONFERENCE ON SOFTWARE ARCHITECTURE AND EUROPEAN CONFERENCE ON SOFTWARE ARCHITECTURE, P61, DOI 10.1109/WICSA.2009.5290792
   Grimm K, 2003, PROC INT CONF SOFTW, P498, DOI 10.1109/ICSE.2003.1201228
   Heinecke H., 2004, SAE CONVERGENCE
   HENDERSON RM, 1990, ADMIN SCI QUART, V35, P9, DOI 10.2307/2393549
   Hofmeister C, 2006, 5TH WORKING IEEE/IFIP CONFERENCE ON SOFTWARE ARCHITECTURE, PROCEEDINGS, P77
   Johnson H.T., 2000, Profit beyond Measure: Extraordinary Results through Attention to Work and People
   Kratochvil Milan., 2005, GROWING MODULAR MASS
   Liang P, 2010, COLLABORATIVE SOFTWARE ENGINEERING, P343, DOI 10.1007/978-3-642-10294-3_17
   Melin K., 1998, VOLVO S80 ELECT SYST, P3
   Morgan J., 2020, The Toyota Product Development System: integrating People, Process, and Technology
   Muller G., 2004, TECHNOLOGY POLICY MA
   Müller R, 2009, INT J MANAG PROJ BUS, V2, P70, DOI 10.1108/17538370910930527
   Northrop L., 2001, SOFTWARE PRODUCT LIN
   Peti P, 2005, ISORC 2005: EIGHTH IEEE INTERNATIONAL SYMPOSIUM ON OBJECT-ORIENTED REAL-TIME DISTRIBUTED COMPUTING, PROCEEDINGS, P2
   Pretschner A, 2007, FOSE 2007: FUTURE OF SOFTWARE ENGINEERING, P55, DOI 10.1109/FOSE.2007.22
   Pugh S., 1990, TOTAL DESIGN INTEGRA
   Raymond A.E., 1951, J ROYAL AERONAUTICAL
   *SAE, 2009, J1939 SAE
   Schulte-Coerne V, 2009, EUR CON SFTWR MTNCE, P315, DOI 10.1109/CSMR.2009.27
   Steger M, 2004, LECT NOTES COMPUT SC, V3154, P34
   Svahnberg M, 2005, SOFTWARE PRACT EXPER, V35, P705, DOI 10.1002/spe.652
   Tischer C, 2007, SPLC 2007: 11TH INTERNATIONAL SOFTWARE PRODUCT LINE CONFERENCE, PROCEEDINGS, P269, DOI 10.1109/SPLINE.2007.20
   Unphon Hataichanok, 2008, Proceedings of the IASTED International Conference on Software Engineering, as part of the 26th IASTED International Multi-Conference on Applied Informatics, P178
   Voget S., 2002, SOFTWARE PRODUCT LIN, P121
NR 47
TC 10
Z9 10
U1 0
U2 14
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 1
PY 2013
VL 78
IS 12
BP 2347
EP 2359
DI 10.1016/j.scico.2012.06.008
PG 13
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 234SL
UT WOS:000325664500005
OA hybrid
DA 2024-07-18
ER

PT J
AU Hartmann, H
   Keren, M
   Matsinger, A
   Rubin, J
   Trew, T
   Yatzkar-Haham, T
AF Hartmann, Herman
   Keren, Mila
   Matsinger, Aart
   Rubin, Julia
   Trew, Tim
   Yatzkar-Haham, Tali
TI Using MDA for integration of heterogeneous components in software supply
   chains
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Software product line engineering; Software supply chains; Model driven
   engineering; Component technology; Resource constrained products;
   Software integration
ID ARCHITECTURE; COTS
AB Software product lines are increasingly built using components from specialized suppliers. A company that is in the middle of a supply chain has to integrate components from its suppliers and offer (partially configured) products to its customers. To satisfy both the variability required by each customer and the variability required to satisfy different customers' needs, it may be necessary for such a company to use components from different suppliers, partly offering the same feature set. This leads to a product line with alternative components, possibly using different mechanisms for interfacing, binding and variability, which commonly occurs in embedded software development.
   In this paper, we describe the limitations of the current practice of combining heterogeneous components in a product line and describe the challenges that arise from software supply chains. We introduce a model-driven approach for automating the integration between components that can generate a partially or fully configured variant, including glue between mismatched components. We analyze the consequences of using this approach in an industrial context, using a case study derived from an existing supply chain and describe the process and roles associated with this approach. (C) 2012 Elsevier B.V. All rights reserved.
C1 [Hartmann, Herman; Matsinger, Aart; Trew, Tim] NXP Semicond, Eindhoven, Netherlands.
   [Keren, Mila; Rubin, Julia; Yatzkar-Haham, Tali] IBM Res, Haifa, Israel.
   [Hartmann, Herman] Univ Groningen, Groningen, Netherlands.
C3 NXP Semiconductors; International Business Machines (IBM); University of
   Groningen
RP Hartmann, H (corresponding author), Univ Groningen, Groningen, Netherlands.
EM hermanhartmann@gmail.com; keren@il.ibm.com; aartmatsinger@gmail.com;
   mjulia@il.ibm.com; tiptrew@theiet.org; tali@il.ibm.com
CR [Anonymous], MODELWARE 511731 D5
   [Anonymous], 2300432007 ISOIEC
   [Anonymous], P SPLC 07
   [Anonymous], 2300412007 ISOIEC
   [Anonymous], P 1 INT WORKSH VAR M
   [Anonymous], P SPLC09
   [Anonymous], 1990, FEATURE ORIENTED DOM
   [Anonymous], P 6 OOPSLA WORKSH DO
   [Anonymous], 2007, 7 OOPSLA WORKSH DOM
   [Anonymous], P 2 EUR WORKSH MOD D
   [Anonymous], 2004, Software Factories
   [Anonymous], Z39502003 ANSINISO
   [Anonymous], 2008, P 2 STEV S ORG EUSTA
   [Anonymous], P 3 IEEE INT C IND I
   [Anonymous], LECT NOTES COMPUTER
   [Anonymous], P EUZDC2008
   [Anonymous], P SPLC08
   [Anonymous], 2000, Generative programming: methods, tools, and applications
   [Anonymous], BUILDING PRODUCT POP
   Atkinson Colin., 2002, COMPONENT BASED PROD
   Avgeriou P, 2005, LECT NOTES COMPUT SC, V3412, P248
   Blair G, 2009, ANN TELECOMMUN, V64, P1, DOI 10.1007/s12243-009-0086-1
   Cunha A., 2007, P IEEE INTERNATONAL, P1
   Czarnecki K., 2005, Software Process Improvement and Practice, V10, P143, DOI 10.1002/spip.225
   Egyed A., 2006, Automated Software Engineering, V13, P41, DOI 10.1007/s10515-006-5466-4
   Fleurey F., 2009, A generic language and tool for variability modeling
   Gay D, 2003, ACM SIGPLAN NOTICES, V38, P1, DOI 10.1145/780822.781133
   Kim SD, 2005, LECT NOTES COMPUT SC, V3480, P57
   Kistler R, 2008, IEEE INT C EMERG, P295, DOI 10.1109/ETFA.2008.4638410
   Mohagheghi P, 2008, LECT NOTES COMPUT SC, V5095, P432, DOI 10.1007/978-3-540-69100-6_31
   Pohl K., 2005, SOFTWARE PRODUCT LIN, V10
   Stahl Thomas., 2005, Model-Driven Software Development: Technology, Engineering, Management
   Sturgeon T.J., 2003, EXPLORING RISKS VALU
   van Gurp J, 2001, WORKING IEEE/IFIP CONFERENCE ON SOFTWARE ARCHITECTURE, PROCEEDINGS, P45, DOI 10.1109/WICSA.2001.948406
   Wallnau K., 2002, Building systems from commercial components
   Weiss D.M., 1999, Software Product-Line Engineering-A Family-Based Software Development Process
   Yang FQ, 1997, SCI CHINA SER E, V40, P405, DOI 10.1007/BF02919427
   Zhao W, 2004, EIGHTH IEEE INTERNATIONAL ENTERPRISE DISTRIBUTED OBJECT COMPUTING CONFERENCE, PROCEEDINGS, P275
NR 38
TC 2
Z9 3
U1 0
U2 14
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 1
PY 2013
VL 78
IS 12
BP 2313
EP 2330
DI 10.1016/j.scico.2012.04.004
PG 18
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 234SL
UT WOS:000325664500003
OA Green Published, hybrid
DA 2024-07-18
ER

PT J
AU Astefanoaei, L
   de Boer, FS
   Dastani, M
   Meyer, JJC
AF Astefanoaei, L.
   de Boer, F. S.
   Dastani, M.
   Meyer, J. -J. Ch.
TI A weakest precondition calculus for BUnity
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Assertions; BDI agents; Belief updates; Correctness; Inductive
   invariants; Leads-to properties
AB We present a weakest precondition calculus for belief updates in a high-level agent specification language. The weakest precondition calculus supports a deductive method which allows us to reason about important safety and leads-to properties of the semantics of agent specifications. (C) 2012 Elsevier B.V. All rights reserved.
C1 [Astefanoaei, L.] INRIA Grenoble Rhone Alpes, F-38334 Montbonnot St Martin, Saint Ismier, France.
   [de Boer, F. S.] Ctr Wiskunde & Informat, Dept Software Engn, NL-1090 GB Amsterdam, Netherlands.
   [Dastani, M.; Meyer, J. -J. Ch.] Univ Utrecht, Intelligent Syst Grp, NL-3508 TB Utrecht, Netherlands.
C3 Utrecht University
RP Astefanoaei, L (corresponding author), INRIA Grenoble Rhone Alpes, Inovallee,655 Ave Europe, F-38334 Montbonnot St Martin, Saint Ismier, France.
EM lacramioara.astefanoaei@gmail.com; f.s.de.boer@cwi.nl; mehdi@cs.uu.nl;
   jj@cs.uu.nl
CR [Anonymous], 1992, TEMPORAL LOGIC REACT, DOI DOI 10.1007/978-1-4612-0931-7
   [Anonymous], 1997, Solving the frame problem-a mathematical investigation of the common sense law of inertia
   ASTEFANOAEI L, 2008, AAMAS, P705
   Barnett Mike, 2005, PASTE, V31, P82, DOI [DOI 10.1145/1108792, DOI 10.1145/1108792.1108813]
   BERGSTRA JA, 1982, J COMPUT SYST SCI, V25, P267, DOI 10.1016/0022-0000(82)90013-7
   Bradley A. R., 2007, The Calculus of Computation
   Bradley AR, 2008, FORM ASP COMPUT, V20, P379, DOI 10.1007/s00165-008-0080-9
   Cavalcanti A, 2000, IEEE T SOFTWARE ENG, V26, P713, DOI 10.1109/32.879810
   Chandy K.M., 1988, PARALLEL PROGRAM DES
   Dastani M, 2008, AUTON AGENT MULTI-AG, V16, P214, DOI 10.1007/s10458-008-9036-y
   Dijkstra E. W., 1976, A Discipline of Pro-gramming
   Filliâtre JC, 2007, LECT NOTES COMPUT SC, V4590, P173
   Harel D., 1978, ICALP, V62, P268
   Jacobs B, 2004, J LOGIC ALGEBR PROGR, V58, P61, DOI 10.1016/j.jlap.2003.07.005
   Jutla C. S., 1989, Proceedings of the Eighth Annual ACM Symposium on Principles of Distributed Computing, P249, DOI 10.1145/72981.72999
   Laibinis L, 2000, LECT NOTES COMPUT SC, V1869, P372
   LAMPORT L, 1990, ACM T PROGR LANG SYS, V12, P396, DOI 10.1145/78969.78970
   McCarthy J., 1969, Machine Intelligence, VVol. 4, P463
   Misra J., 2001, A Discipline of Multiprogramming
   Nelson G., 1979, ACM Transactions on Programming Languages and Systems, V1, P245, DOI 10.1145/357073.357079
   Nieuwenhuis R, 2007, LECT NOTES COMPUT SC, V4533, P2
   Pedreschi D, 1998, INFORM PROCESS LETT, V67, P145, DOI 10.1016/S0020-0190(98)00098-2
   Reiter R., 2001, Knowledge in Action: Logical Foundations for Specifying and Implementing Dynamical Systems
   Scherl RB, 2003, ARTIF INTELL, V144, P1, DOI 10.1016/S0004-3702(02)00365-X
   Winograd T, 1971, THESIS ARTIFICIAL IN
NR 25
TC 1
Z9 1
U1 0
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 1
PY 2013
VL 78
IS 9
BP 1278
EP 1293
DI 10.1016/j.scico.2012.05.009
PG 16
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 179QJ
UT WOS:000321536100006
OA hybrid
DA 2024-07-18
ER

PT J
AU Almeida, JB
   Barbosa, M
   Pinto, JS
   Vieira, B
AF Bacelar Almeida, J.
   Barbosa, Manuel
   Pinto, Jorge S.
   Vieira, Barbara
TI Formal verification of side-channel countermeasures using
   self-composition
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Cryptographic algorithms; Program verification; Program equivalence;
   Self-composition; Side-channel countermeasures
ID SECURE INFORMATION-FLOW
AB Formal verification of cryptographic software implementations poses significant challenges for off-the-shelf tools. This is due to the domain-specific characteristics of the code, involving aggressive optimizations and non-functional security requirements, namely the critical aspect of countermeasures against side-channel attacks. In this paper, we extend previous results supporting the practicality of self-composition proofs of non-interference and generalizations thereof. We tackle the formal verification of high-level security policies adopted in the implementation of the recently proposed NaCl cryptographic library. We formalize these policies and propose a formal verification approach based on self-composition, extending the range of security policies that could previously be handled using this technique. We demonstrate our results by addressing compliance with the NaCl security policies in real-world cryptographic code, highlighting the potential for automation of our techniques. (C) 2011 Elsevier B.V. All rights reserved.
C1 [Bacelar Almeida, J.; Barbosa, Manuel; Pinto, Jorge S.; Vieira, Barbara] Univ Minho, CCTC Dept Informat, P-4710057 Braga, Portugal.
C3 Universidade do Minho
RP Pinto, JS (corresponding author), Univ Minho, CCTC Dept Informat, Campus Gualtar, P-4710057 Braga, Portugal.
EM jba@di.uminho.pt; mbb@di.uminho.pt; jsp@di.uminho.pt;
   barbarasv@di.uminho.pt
RI Pinto, Jorge Sousa/P-4312-2019; Pinto, Jorge S/B-9851-2008; Barbosa,
   Manuel/C-3095-2008; Bacelar Almeida, Jose/I-8105-2015
OI Pinto, Jorge Sousa/0000-0002-0892-3577; Barbosa,
   Manuel/0000-0002-6848-5564; Bacelar Almeida, Jose/0000-0003-0011-7455
FU SMART; ENIAC [GA 120224]
FX This work was partially supported by project SMART, funded by ENIAC
   joint Undertaking (GA 120224).
CR Aciicmez O., 2007, P 2 ACM S INF COMP C, P312, DOI DOI 10.1145/1229285.1266999
   Agat J., 2000, Conference Record of POPL'00: 27th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages. Papers Presented at the Symposium, P40, DOI 10.1145/325694.325702
   Almeida JB, 2010, INNOV SYST SOFTW ENG, V6, P203, DOI 10.1007/s11334-010-0127-y
   Almeida JB, 2009, LECT NOTES COMPUT SC, V5825, P37, DOI 10.1007/978-3-642-04570-7_5
   Banerjee A, 2005, J FUNCT PROGRAM, V15, P131, DOI 10.1017/S0956796804005453
   BARNETT M, 2004, LNCS, V3362, P49, DOI [DOI 10.1007/978-3-540-30569-9_3, 10.1007]
   Barthe G, 2004, P IEEE CSFW, P100, DOI 10.1109/CSFW.2004.1310735
   Baudin Patrick, 2008, ACSL ANSI ISO C SPEC
   Bernstein Daniel J., 2011, CRYPTOGRAPHY NACI
   Ceara Dumitru, 2010, Proceedings of the IEEE Third International Conference on Software Testing Verification and Validation - Workshops (ICSTW 2010), P371, DOI 10.1109/ICSTW.2010.28
   Chang R, 2009, PROCEEDINGS OF THE 22ND IEEE COMPUTER SECURITY FOUNDATIONS SYMPOSIUM, P186, DOI 10.1109/CSF.2009.13
   DENNING DE, 1977, COMMUN ACM, V20, P504, DOI 10.1145/359636.359712
   Dufay G, 2005, LECT NOTES ARTIF INT, V3632, P116
   Filliâtre JC, 2007, LECT NOTES COMPUT SC, V4590, P173
   Käsper E, 2009, LECT NOTES COMPUT SC, V5747, P1
   Leavens Gary T, 2006, SIGSOFT Softw. Eng. Notes, V31, P1, DOI [10.1145/1127878.1127884, DOI 10.1145/1127878.1127884]
   Leino K. R. M., 1998, Mathematics of Program Construction. 4th International Conference, MPC'98. Proceedings, P254
   Leivant Daniel., 1985, P 12 ACM SIGACT SIGP, P132
   Molnar D, 2006, LECT NOTES COMPUT SC, V3935, P156
   Myers A. C., 1999, Conference Record of POPL '99. 26th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P228, DOI 10.1145/292540.292561
   Myers AC, 2006, J COMPUT SECUR, V14, P157, DOI 10.3233/JCS-2006-14203
   Naumann DA, 2006, LECT NOTES COMPUT SC, V4189, P279
   Osvik D. A., 2005, Topics in Cryptology-CT-RSA 2006. The Cryptographers' Track at the RAS Conference 2006. Proceedings (Lecture Notes in Computer Science Vol.3860), P1
   Sabelfeld A., 2003, IEEE J SEL AREAS COM, V21
   Svenningsson Josef, 2009, Formal Aspects in Security and Trust. 6th International Workshop, FAST 2009. Revised Selected Papers, P111
   Terauchi T, 2005, LECT NOTES COMPUT SC, V3672, P352
   Tse S, 2005, LECT NOTES COMPUT SC, V3444, P279
   Vaughan JA, 2007, P IEEE S SECUR PRIV, P192, DOI 10.1109/SP.2007.5
   Volpano D., 1997, TAPSOFT '97: Theory and Practice of Software Development. 7th International Joint Conference CAAP/FASE. Proceedings, P607, DOI 10.1007/BFb0030629
   Volpano D, 1997, P IEEE CSFW, P156, DOI 10.1109/CSFW.1997.596807
   Warnier Martijn, 2005, ICISR05034
NR 31
TC 21
Z9 23
U1 0
U2 11
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUL 1
PY 2013
VL 78
IS 7
BP 796
EP 812
DI 10.1016/j.scico.2011.10.008
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 164PJ
UT WOS:000320421700003
OA Green Published, Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Bettini, L
   Capecchi, S
   Damiani, F
AF Bettini, Lorenzo
   Capecchi, Sara
   Damiani, Ferruccio
TI On flexible dynamic trait replacement for JAVA-like languages
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Featherweight Java; Trait; Type system
ID FEATHERWEIGHT JAVA; MULTIPLE DISPATCH; OBJECT; DELEGATION
AB Dynamic trait replacement is a programming language feature for changing the objects' behavior at runtime by replacing some of the objects' methods. In previous work on dynamic trait replacement for JAVA-like languages, the objects' methods that may be replaced must correspond exactly to a named trait used in the object's class definition. In this paper we propose the notion of replaceable: a programming language feature that decouples the trait replacement operation code and the class declaration code, thus making it possible to refactor classes and to perform unanticipated trait replacement operations without invalidating existing code. We give a formal account of our proposal through a core calculus, FDTJ (FEATHERWEIGHT DYNAMIC TRAIT JAVA), equipped With a static type system guaranteeing that in a well-typed program no runtime type error will take place. (C) 2012 Elsevier B.V. All rights reserved.
C1 [Bettini, Lorenzo; Capecchi, Sara; Damiani, Ferruccio] Univ Turin, Dipartimento Informat, I-10124 Turin, Italy.
C3 University of Turin
RP Bettini, L (corresponding author), Univ Turin, Dipartimento Informat, I-10124 Turin, Italy.
EM bettini@di.unito.it; capecchi@di.unito.it; damiani@di.unito.it
RI Ferruccio, Damiani/D-2383-2011
OI Ferruccio, Damiani/0000-0001-8109-1706; Bettini,
   Lorenzo/0000-0002-4481-8096; CAPECCHI, SARA/0000-0001-6157-2932
FU MIUR DISCO-Distribution, Interaction, Specification, Composition for
   Object Systems
FX This work has been partially supported by MIUR DISCO-Distribution,
   Interaction, Specification, Composition for Object Systems.
CR Abadi M, 1995, LECT NOTES COMPUT SC, V915, P471
   Aldrich J., 2009, OOPSLA COMPANION, P1015, DOI DOI 10.1145/1639950
   Allen Eric., 2008, FORTRESS LANGUAGE SP
   Ancona D, 2003, ACM T PROGR LANG SYS, V25, P641, DOI 10.1145/937563.937567
   [Anonymous], 1998, P 25 ACM SIGPLAN SIG, DOI DOI 10.1145/268946.268961
   Bettini L., 2009, FTFJP
   Bettini L, 2008, P PPPJ, P171
   Bettini L, 2011, SCI COMPUT PROGRAM, V76, P992, DOI 10.1016/j.scico.2010.04.006
   Bettini L, 2009, SCI COMPUT PROGRAM, V74, P261, DOI 10.1016/j.scico.2009.01.007
   Bono V, 2008, INT FED INFO PROC, V273, P367
   BRACHA G, 1990, SIGPLAN NOTICES, V25, P303, DOI 10.1145/97946.97982
   Büchi M, 2000, LECT NOTES COMPUT SC, V1850, P201
   CASTAGNA G, 1995, THEOR COMPUT SCI, V151, P297, DOI 10.1016/0304-3975(95)00071-4
   Chambers C., 2000, Conference Record of POPL'00: 27th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages. Papers Presented at the Symposium, P277, DOI 10.1145/325694.325731
   Clifton C, 2000, ACM SIGPLAN NOTICES, V35, P130, DOI 10.1145/354222.353181
   Damiani F, 2003, LECT NOTES COMPUT SC, V2841, P97
   DEMICHIEL LG, 1987, LECT NOTES COMPUT SC, V276, P151
   Drossopoulou S, 2002, ACM T PROGR LANG SYS, V24, P153, DOI 10.1145/514952.514955
   Ducasse S, 2006, ACM T PROGR LANG SYS, V28, P331, DOI 10.1145/1119479.1119483
   Ernst E., 1999, Nordic Journal of Computing, V6, P72
   Gamma E., 1994, Design patterns: Elements of reusable object-oriented software
   Gil J, 2008, ACM SIGPLAN NOTICES, V43, P73, DOI 10.1145/1449955.1449771
   Harrison W., 1997, 20946 RC IBM TJ WATS
   Igarashi A, 2001, ACM T PROGR LANG SYS, V23, P396, DOI 10.1145/503502.503505
   Kniesel G, 1999, LECT NOTES COMPUT SC, V1628, P351
   LIEBERMAN H, 1986, SIGPLAN NOTICES, V21, P214, DOI 10.1145/960112.28718
   Liquori L., 2008, ACM TOPLAS, V30
   Malayeri D, 2008, LECT NOTES COMPUT SC, V5142, P260, DOI 10.1007/978-3-540-70592-5_12
   MUGRIDGE WB, 1991, LECT NOTES COMPUT SC, V512, P307
   Nierstrasz O, 2006, J OBJECT TECHNOL, V5, P129, DOI 10.5381/jot.2006.5.4.a4
   Odersky M., 2007, TECHNICAL REPORT
   Ostermann K, 2002, LECT NOTES COMPUT SC, V2374, P89
   Ostermann K, 2001, ACM SIGPLAN NOTICES, V36, P283, DOI 10.1145/504311.504303
   Ostermann K, 2008, J OBJECT TECHNOL, V7, P121, DOI 10.5381/jot.2008.7.1.a4
   Reppv J., 2006, FOOL WOOD
   Reppy J, 2007, LECT NOTES COMPUT SC, V4609, P373
   Saini D., 2010, FTFJP
   Salzman L, 2005, LECT NOTES COMPUT SC, V3586, P312
   Schärli N, 2003, LECT NOTES COMPUT SC, V2743, P248
   Smith C, 2005, LECT NOTES COMPUT SC, V3586, P453
   UNGAR D, 1987, SIGPLAN NOTICES, V22, P227, DOI 10.1145/38807.38828
   Ungar D., 1991, LISP and Symbolic Computation, V4, P223, DOI 10.1007/BF01806107
   VanLimberghen M, 1996, OBJECT ORIENTED SYST, V3, P1
   VIEGA J, 1998, CS9803 UVA COMP SCI
NR 44
TC 9
Z9 9
U1 2
U2 8
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUL 1
PY 2013
VL 78
IS 7
BP 907
EP 932
DI 10.1016/j.scico.2012.11.003
PG 26
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 164PJ
UT WOS:000320421700010
OA Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Khakpour, N
   Jalili, S
   Talcott, C
   Sirjani, M
   Mousavi, M
AF Khakpour, Narges
   Jalili, Saeed
   Talcott, Carolyn
   Sirjani, Marjan
   Mousavi, MoharnmadReza
TI Formal modeling of evolving self-adaptive systems
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Adaptive systems; Formal modeling; Policy-based systems; Algebra; Actor
   models; Software engineering
ID COORDINATION MODEL; VERIFICATION; FRAMEWORK; ACTORS
AB In this paper, we present a formal model, named PobSAM (Policy-based Self-Adaptive Model), for developing and modeling self-adaptive evolving systems. In this model, policies are used as a mechanism to direct and adapt the behavior of self-adaptive systems. A PobSAM model is a collection of autonomous managers and managed actors. The managed actors are dedicated to the functional behavior while the autonomous managers govern the behavior of managed actors by enforcing suitable policies. A manager has a set of configurations including two types of policies: governing policies and adaptation policies. To adapt the system behavior in response to the changes, the managers switch among different configurations. We employ the combination of an algebraic formalism and an actor-based model to specify this model formally. Managed actors are expressed by an actor model. Managers are modeled as meta-actors whose configurations are described using a multi-sorted algebra called CA. We provide an operational semantics for PobSAM using labeled transition systems. Furthermore, we provide behavioral equivalence of different sorts of CA in terms of splitting bisimulation and prioritized splitting bisimulation. Equivalent managers send the same set of messages to the actors. Using our behavioral equivalence theory, we can prove that the overall behavior of the system is preserved by substituting a manager by an equivalent one. (C) 2011 Elsevier B.V. All rights reserved.
C1 [Khakpour, Narges; Jalili, Saeed] Tarbiat Modares Univ, Tehran, Iran.
   [Talcott, Carolyn] SRI Int, Menlo Pk, CA 94025 USA.
   [Sirjani, Marjan] Reykjavik Univ, Reykjavik, Iceland.
   [Sirjani, Marjan] Univ Tehran, Tehran, Iran.
   [Sirjani, Marjan] IPM, Tehran, Iran.
   [Mousavi, MoharnmadReza] Eindhoven Univ Technol, NL-5600 MB Eindhoven, Netherlands.
C3 Tarbiat Modares University; SRI International; Reykjavik University;
   University of Tehran; Eindhoven University of Technology
RP Jalili, S (corresponding author), Tarbiat Modares Univ, Tehran, Iran.
EM nkhakpour@modares.ac.ir; sjalili@modares.ac.ir; clt@cs.stanford.edu;
   msirjani@ut.ac.ir; m.r.mousavi@tue.nl
RI Mousavi, Mohammad Reza/A-3410-2013; Jalili, Saeed/ABD-4271-2021
OI Jalili, Saeed/0000-0002-4333-3097; Khakpour, Narges/0000-0002-0377-5595;
   Mousavi, Mohammad Reza/0000-0002-4869-6794
CR Adler R, 2007, LECT NOTES COMPUT SC, V4789, P76
   Andersson J, 2009, LECT NOTES COMPUT SC, V5525, P27, DOI 10.1007/978-3-642-02161-9_2
   Andova S, 2009, ELECTRON NOTES THEOR, V255, P23, DOI 10.1016/j.entcs.2009.10.023
   Anthony Richard, 2007, HOT TOPICS AUTONOMIC, P55
   Anthony RJ, 2006, INT WORKSHOP DATABAS, P108, DOI 10.1109/DEXA.2006.63
   Arbab F, 2004, MATH STRUCT COMP SCI, V14, P329, DOI 10.1017/S0960129504004153
   Baeten J.C.M., 2009, CAMBRIDGE TRACTS THE
   Bergstra JA, 2007, J LOGIC ALGEBR PROGR, V70, P172, DOI 10.1016/j.jlap.2006.08.004
   Bergstra JA, 2005, LECT NOTES COMPUT SC, V3838, P445
   Bergstra Jan A., 1985, LNCS, P9
   Biyani KN, 2008, J PARALLEL DISTR COM, V68, P1097, DOI 10.1016/j.jpdc.2008.02.005
   Bradbury J.S., 2004, Proceedings of the 1st ACM SIGSOFT Workshop on Self-managed Systems. WOSS '04, P28, DOI [10.1145/1075405.1075411, DOI 10.1145/1075405.1075411]
   Cheng BHC, 2009, LECT NOTES COMPUT SC, V5525, P1, DOI 10.1007/978-3-642-02161-9_1
   David PC, 2003, LECT NOTES COMPUT SC, V2893, P1
   Efstratiou C., 2001, Mobile Data Management. Second International Conference, MDM 2001. Proceedings (Lecture Notes in Computer Science Vol.1987), P15
   Efstratiou C, 2002, THIRD INTERNATION WORKSHOP ON POLICIES FOR DISTRIBUTED SYSTEMS AND NETWORKS, PROCEEDINGS, P13, DOI 10.1109/POLICY.2002.1011289
   Ehrig H, 2010, LECT NOTES COMPUT SC, V6013, P139, DOI 10.1007/978-3-642-12029-9_10
   Fritsch S, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P571, DOI 10.1145/1368088.1368166
   Greenwood P, 2006, LECT NOTES COMPUT SC, V4242, P30
   HOFMEISTER C, 1993, THESIS U MARYLAND
   Khakpour N, 2010, ELECTRON NOTES THEOR, V263, P129, DOI 10.1016/j.entcs.2010.05.008
   Khakpour Narges, 2011, ASSURING CORRECTNESS
   Koehler C, 2008, ELECTRON NOTES THEOR, V194, P77, DOI 10.1016/j.entcs.2008.03.100
   KRAMER J, 1990, IEEE T SOFTWARE ENG, V16, P1293, DOI 10.1109/32.60317
   Le Metayer D, 1998, IEEE T SOFTWARE ENG, V24, P521, DOI 10.1109/32.708567
   Lymberopoulos L., 2003, Journal of Network and Systems Management, V11, P277, DOI 10.1023/A:1025719407427
   Magee Jeff, 1996, P 4 ACM SIGSOFT FDN
   McKinley Philip. K., 2004, TECHNICAL REPORT
   Oreizy P, 1998, PROC INT CONF SOFTW, P177, DOI 10.1109/ICSE.1998.671114
   Ren SP, 2006, LECT NOTES COMPUT SC, V4038, P247
   Schaefer Ina, 2006, P WORKSH TRUSTW SOFT
   Schneider Klaus., 2006, International Workshop on Self-Adaptation and Self-Managing Systems, P16
   Sirjani M, 2004, FUND INFORM, V63, P385
   Sloman M, 2010, COMPUT J, V53, P1113, DOI 10.1093/comjnl/bxp102
   Taentzer G, 2000, LECT NOTES COMPUT SC, V1764, P179
   Talcott CL, 2006, ELECTRON NOTES THEOR, V150, P143, DOI 10.1016/j.entcs.2005.12.028
   Talcott CL, 2007, ELECTRON NOTES THEOR, V181, P97, DOI 10.1016/j.entcs.2007.01.056
   Wermelinger M, 1997, SECOND INTERNATIONAL WORKSHOP ON SOFTWARE ENGINEERING FOR PARALLEL AND DISTRIBUTED SYSTEMS, PROCEEDINGS, P243, DOI 10.1109/PDSE.1997.596843
   Zhang J, 2009, AOSD'09: 8TH INTERNATIONAL CONFERENCE ON ASPECT-ORIENTED SOFTWARE DEVELOPMENT, P161
   Zhang Ji., 2005, WADS 05, P1, DOI DOI 10.1145/1083217.1083220
   Zhang Ji, 2006, P 28 INT C SOFTW ENG, P371
   2003, IBM SYST J, V42
NR 42
TC 34
Z9 35
U1 0
U2 4
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 1
PY 2012
VL 78
IS 1
BP 3
EP 26
DI 10.1016/j.scico.2011.09.004
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 024RD
UT WOS:000310125400002
DA 2024-07-18
ER

PT J
AU Ahrendt, W
   Dylla, M
AF Ahrendt, Wolfgang
   Dylla, Maximilian
TI A system for compositional verification of asynchronous objects
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 11th International Conference on Formal Engineering Methods (ICFEM)
CY DEC 09-12, 2009
CL Rio de Janeiro, BRAZIL
SP Pontificia Univ Catolica Rio de Janeiro, Univ York, Inst Mil Engenharia
DE Verification; Concurrency; Semantics; Object-orientation
ID NETWORKS
AB We present a semantics, calculus, and system for compositional verification of Creol, an object-oriented modelling language for concurrent distributed applications. The system is an instance of KeY, a framework for object-oriented software verification, which has so far been applied foremost to sequential Java. Building on KeY characteristic concepts, like dynamic logic, sequent calculus, symbolic execution via explicit substitutions, and the taclet rule language, the presented system addresses functional correctness of Creol models featuring local cooperative thread parallelism and global communication via asynchronous method calls. The calculus heavily operates on communication histories specified by the interfaces of Creol units. Two example scenarios demonstrate the usage of the system. This article extends the conference paper of Ahrendt and Dylla (2009) [5] with a denotational semantics of Creol and an assumption-commitment style semantics of the logic. (C) 2010 Elsevier B.V. All rights reserved.
C1 [Ahrendt, Wolfgang] Chalmers Univ Technol, Dept Comp Sci & Engn, Gothenburg, Sweden.
   [Dylla, Maximilian] Univ Saarland, Saarbrucken Grad Sch Comp Sci, Saarbrucken, Germany.
C3 Chalmers University of Technology; Saarland University
RP Ahrendt, W (corresponding author), Chalmers Univ Technol, Dept Comp Sci & Engn, Gothenburg, Sweden.
EM ahrendt@chalmers.se; mdylla@mpi-inf.mpg.de
OI Ahrendt, Wolfgang/0000-0002-5671-2555
CR Abraham E, 2005, THEOR COMPUT SCI, V331, P251, DOI 10.1016/j.tcs.2004.09.019
   Abrial J.-R., 1996, B BOOK ASSIGNING PRO
   Ahrendt W., 2007, Verification of Object-Oriented Software. The KeY Approach, P409
   Ahrendt W., 2009, LNCS IN PRESS
   Ahrendt W, 2009, LECT NOTES COMPUT SC, V5885, P387, DOI 10.1007/978-3-642-10373-5_20
   [Anonymous], 1980, LNCS
   [Anonymous], 2007, The Definitive ANTLR Reference: Building Domain-Specific Languages
   [Anonymous], 1999, Communicating and Mobile Systems: The Calculus
   [Anonymous], 1988, P 11 AUSTR COMP SCI
   [Anonymous], LNCS
   [Anonymous], 2004, J. Obj. Technol., DOI [10.5381/jot.2004.3.6.a2, DOI 10.5381/JOT.2004.3.6.A2]
   [Anonymous], 2001, Cambridge Tracts in Theoretical Computer Science
   Apt K. R., 1980, ACM Transactions on Programming Languages and Systems, V2, P359, DOI 10.1145/357103.357110
   Baker H. G.  Jr., 1977, SIGPLAN Notices, V12, P55, DOI 10.1145/872734.806932
   Barnett M, 2004, LECT NOTES COMPUT SC, V3125, P54
   Barnett M, 2006, LECT NOTES COMPUT SC, V4111, P364
   Baum M., 2006, PROOF VISUALIZATION
   Beckert B., 2007, Verification of Object-Oriented Software. The KeY Approach, P69
   Beckert B., 2007, C SOFTW ENG FORM MET
   Beckert Bernhard., 2007, LNCS, V4334
   Blanchette J.C., 2008, THESIS U OSLO OSLO
   Bubel R., 2007, Verification of Object-Oriented Software. The KeY Approach, P569
   Dahl Ole-Johan, 1977, P FOND PROGR, P57
   Darab M.A.D., 2010, THESIS CHALMERS U TE
   de Boer FS, 2007, LECT NOTES COMPUT SC, V4421, P316
   de Boer FS, 2009, LECT NOTES COMPUT SC, V5885, P367, DOI 10.1007/978-3-642-10373-5_19
   de Boer FS, 2002, THEOR COMPUT SCI, V274, P3, DOI 10.1016/S0304-3975(00)00304-2
   Dovland J., 2008, 351 U OSL DEP INF
   Dovland J., 2006, 315 U OSL DEP INF
   Dovland J, 2008, ELECTRON NOTES THEOR, V203, P19, DOI 10.1016/j.entcs.2008.04.084
   Dylla M., 2009, THESIS CHALMERS U TE
   Filliatre J.-C., 2007, LNCS, V4590
   Flanagan C, 2002, ACM SIGPLAN NOTICES, V37, P234, DOI 10.1145/543552.512558
   Giese M., 2007, Verification of Object-Oriented Software. The KeY Approach, P21
   HAREL D, 2000, FOUNDAT COMPUT, P3
   HOARE CAR, 1969, COMMUN ACM, V12, P576, DOI 10.1145/363235.363259
   Hoare CAR., 1985, Communicating Sequential Processes
   Hooman J., 2003, COMPOSITIONAL UNPUB
   Jacobs B, 2005, SEFM 2005: THIRD IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING AND FORMAL METHODS, PROCEEDINGS, P137, DOI 10.1109/SEFM.2005.39
   Johnsen E. B., 2002, Formal Methods for Open Object-Based Distributed Systems V. IFIP TC6/WG6.1. Fifth International Conference on Formal Methods for Open Object-Based Distributed Systems (FMOODS 2002), P45
   Johnsen E. B., 2006, THEORETICAL COMPUTER, V365
   Johnsen EB, 2004, PROCEEDINGS OF THE SECOND INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING AND FORMAL METHODS, P188, DOI 10.1109/SEFM.2004.1347520
   Johnsen EB, 2004, LECT NOTES COMPUT SC, V2635, P137
   Johnsen EB, 2007, SOFTW SYST MODEL, V6, P39, DOI 10.1007/s10270-006-0011-2
   Johnsen EB, 2009, ELECTRON NOTES THEOR, V243, P89, DOI 10.1016/j.entcs.2009.07.007
   JONES CB, 1981, THESIS OXFORD U UK
   LISKOV B, 1988, SIGPLAN NOTICES, V23, P260
   MISRA J, 1981, IEEE T SOFTWARE ENG, V7, P417, DOI 10.1109/TSE.1981.230844
   Mostowski W., 2007, Verification of Object-Oriented Software. The KeY Approach, P533
   Mostowski W., 2007, CEUR WS, V259
   Mürk O, 2007, LECT NOTES ARTIF INT, V4603, P385
   Nanchen S., 2004, 436 ETH ZUR
   OWICKI S, 1976, ACTA INFORM, V6, P319, DOI 10.1007/BF00268134
   Platzer A, 2008, LECT NOTES ARTIF INT, V5195, P171, DOI 10.1007/978-3-540-71070-7_15
   Rummer P., 2007, Verification of Object-Oriented Software. The KeY Approach, P179
   Schmitt PH, 2007, SEFM 2007: FIFTH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING AND FORMAL METHODS, PROCEEDINGS, P47, DOI 10.1109/SEFM.2007.30
   SOUNDARARAJAN N, 1984, ACM T PROGR LANG SYS, V6, P647, DOI 10.1145/1780.1805
   ZWIERS J, 1989, LNCS, V321
NR 58
TC 14
Z9 14
U1 0
U2 5
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 1
PY 2012
VL 77
IS 12
SI SI
BP 1289
EP 1309
DI 10.1016/j.scico.2010.08.003
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 005EH
UT WOS:000308732800005
OA Bronze
DA 2024-07-18
ER

PT J
AU Djoko, SD
   Douence, R
   Fradet, P
AF Djoko, Simplice Djoko
   Douence, Remi
   Fradet, Pascal
TI Aspects preserving properties
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Aspect weaving; Proofs; Semantics; Temporal properties
ID LANGUAGE
AB Aspect Oriented Programming can arbitrarily distort the semantics of programs. In particular, weaving can invalidate crucial safety and liveness properties of the base program. In this article, we identify categories of aspects that preserve some classes of properties. Specialized aspect languages are then designed to ensure that aspects belong to a specific category and, therefore, that woven programs will preserve the corresponding properties.
   Our categories of aspects, inspired by Katz's, comprise observers, aborters, confiners and weak intruders. Observers introduce new instructions and a new local state but they do not modify the base program's state and control-flow. Aborters are observers which may also abort executions. Confiners only ensure that executions remain in the reachable states of the base program. Weak intruders are confiners between two advice executions. These categories (along with two others) are defined formally based on a language independent abstract semantics framework. The classes of preserved properties are defined as subsets of LTL for deterministic programs and CTL* for non-deterministic ones. We can formally prove that, for any program, the weaving of any aspect in a category preserves any property in the related class.
   We present, for most aspect categories, a specialized aspect language which ensures that any aspect written in that language belongs to the corresponding category. It can be proved that these languages preserve the corresponding classes of properties by construction. The aspect languages share the same expressive pointcut language and are designed w.r.t. a common imperative base language.
   Each category and language is illustrated by simple examples. The appendix provides semantics and two instances of proofs: the proof of preservation of properties by a category and the proof that all aspects written in a language belong to the corresponding category. (C) 2011 Elsevier B.V. All rights reserved.
C1 [Douence, Remi] Ecole Mines Nantes, INRIA, LINA, F-44307 Nantes 3, France.
   [Djoko, Simplice Djoko] Inria Grenoble Rhone Alpes, INRIA, EMN, LINA, F-38330 Montbonnot St Martin, France.
C3 IMT - Institut Mines-Telecom; IMT Atlantique; Inria; Inria
RP Douence, R (corresponding author), Ecole Mines Nantes, INRIA, LINA, 4 Rue Alfred Kastler, F-44307 Nantes 3, France.
EM djokomi@yahoo.fr; douence@emn.fr; Pascal.Fradet@inria.fr
RI Douence, Remi/KGL-9014-2024
FU AOSD-Europe network of excellence
FX This work has been supported by the AOSD-Europe network of excellence.
CR Aksit M., P INT C ASP OR SOFTW, P39
   Aksit M, 2009, AOSD'09: 8TH INTERNATIONAL CONFERENCE ON ASPECT-ORIENTED SOFTWARE DEVELOPMENT, P39
   Aldrich J, 2005, LECT NOTES COMPUT SC, V3586, P144
   [Anonymous], 1992, TEMPORAL LOGIC REACT, DOI DOI 10.1007/978-1-4612-0931-7
   Barthe G., 2008, FOAL 08, P9
   Bruns G, 2004, LECT NOTES COMPUT SC, V3170, P209
   Chapman M., 2006, AOSD 2006 IND TRACK, VIAI-TR-2006-3
   Clarke Edmund M., 1983, C RECORD 10 ANN ACM, P117, DOI [DOI 10.1145/567067.567080, 10.1145/567067]
   Clifton C., FOAL 2002 P FDN ASP, P33
   Clifton C, 2006, SCI COMPUT PROGRAM, V63, P321, DOI 10.1016/j.scico.2006.02.009
   Coady Y., 2001, Software Engineering Notes, V26, P88, DOI 10.1145/503271.503223
   Colcombet T., S PRINC PROGR LANG P, P54
   Dantas DS, 2006, ACM SIGPLAN NOTICES, V41, P383, DOI 10.1145/1111320.1111071
   Dantas DS, 2005, ACM SIGPLAN NOTICES, V40, P306, DOI 10.1145/1090189.1086404
   Djoko S. D., 2006, CASB COMMON ASPECT S, V5
   Djoko S. Djoko, 2009, THESIS U NANTES
   Djoko S. Djoko, 2008, AOSDEUROPEINRIA18
   Djoko SD, 2008, PEPM'08: PROCEEDINGS OF THE 2008 ACM SIGPLAN SYMPOSIUM ON PARTIAL EVALUATION AND SEMANTICS-BASED PROGRAM MANIPULATION, P135, DOI 10.1145/1328408.1328429
   Djoko SD, 2008, SEFM 2008: SIXTH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING AND FORMAL METHODS, PROCEEDINGS, P227, DOI 10.1109/SEFM.2008.21
   Douence R, 2004, LECT NOTES COMPUT SC, V3286, P95
   Douence R, 2002, LECT NOTES COMPUT SC, V2487, P173
   Douence R., 2004, C SPED ORIENTED SOFT, P141
   Fradet P, 2004, LECT NOTES COMPUT SC, V3302, P21
   FRADET P, 2007, P 6 INT C GEN PROGR, P165
   Gibbons J, 2005, FUND INFORM, V66, P353
   Goldman M, 2007, LECT NOTES COMPUT SC, V4424, P308
   Jagadeesan R, 2003, LECT NOTES COMPUT SC, V2743, P54
   Jagadeesan R, 2006, SCI COMPUT PROGRAM, V63, P267, DOI 10.1016/j.scico.2006.02.008
   Katz E., FOAL 10, P43
   Katz E, 2009, FOAL09: FOUNDATIONS OF ASPECT-ORIENTED LANGUAGES, P7
   Katz S, 2006, LECT NOTES COMPUT SC, V3880, P106
   Kiczales G, 1997, LECT NOTES COMPUT SC, V1241, P220, DOI 10.1007/BFb0053381
   Kiczales G, 2001, COMMUN ACM, V44, P59, DOI 10.1145/383845.383858
   Kirchner C, 2007, LECT NOTES COMPUT SC, V4421, P110
   Krishnamurthi S., 2004, Software Engineering Notes, V29, P137, DOI 10.1145/1041685.1029916
   Lammel R., 2002, PROC AOSD 02, P41, DOI DOI 10.1145/508386.508392
   Lippert M., 2000, Proceedings of the 2000 International Conference on Software Engineering. ICSE 2000 the New Millennium, P418, DOI 10.1109/ICSE.2000.870432
   LOPES CV, 1997, THESIS NE U BOSTON
   Masuhara H, 2005, ACM SIGPLAN NOTICES, V40, P320, DOI 10.1145/1090189.1086405
   Mendhekar A., 1997, SPL97009P9710044 XER
   Nagy I., 2005, P INT C NETOBJECTDAY, P19
   NIELSON F., 1992, SEMANTICS APPL FORMA
   Oliveira BrunoC. d. S., 2010, ASPECT ORIENTED SOFT, P109, DOI [DOI 10.1145/1739230.1739244, 10.1145/1739230.1739244]
   Prasad Sistla A., 1985, Proceedings of the fourth annual ACM symposium on Principles of distributed computing, P39
   Rinard M., 2004, Software Engineering Notes, V29, P147, DOI 10.1145/1041685.1029917
   Walker D, 2003, ACM SIGPLAN NOTICES, V38, P127, DOI 10.1145/944746.944718
   Wand M, 2004, ACM T PROGR LANG SYS, V26, P890, DOI 10.1145/1018203.1018208
   Winskel G., 1993, The Formal Semantics of Programming Languages
NR 48
TC 4
Z9 5
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR 1
PY 2012
VL 77
IS 3
BP 393
EP 422
DI 10.1016/j.scico.2011.10.010
PG 30
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 898NB
UT WOS:000300748000013
OA Green Submitted, hybrid
DA 2024-07-18
ER

PT J
AU Valero, V
   Macià, H
   Pardo, JJ
   Cambronero, ME
   Díaz, G
AF Valero, Valentin
   Macia, Hermenegilda
   Jose Pardo, Juan
   Emilia Cambronero, Maria
   Diaz, Gregorio
TI Transforming Web Services Choreographies with priorities and time
   constraints into prioritized-time colored Petri nets
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Web Services; Web Service composition; Priorities; Choreography; Timed
   colored Petri nets
ID SEMANTICS; REO
AB A Web Service is a self-describing, self-contained modular application that can be published, located, and invoked over a network, such as the Internet. Web Service composition provides a way to obtain value-added services by combining different existing facilities, which are then able to support the integration of commercial applications. WS-CDL (Web Services Choreography Description Language) is a W3C candidate recommendation for the description of peer-to-peer collaborations by participants in a Web Services composition. This paper focuses on several important aspects of WS-CDL, namely, data variables, timed restrictions, as well as the priorization of collaborations. In WS-CDL there are no priorities, thus, one of our first goals is to provide a WS-CDL definition of prioritized collaborations. We also define a semantics of WS-CDL (with priorities) by means of prioritized-timed colored Petri nets. (C) 2011 Elsevier B.V. All rights reserved.
C1 [Valero, Valentin; Macia, Hermenegilda; Jose Pardo, Juan; Emilia Cambronero, Maria; Diaz, Gregorio] Univ Castilla La Mancha, Escuela Super Ingn Informat, Albacete 02071, Spain.
C3 Universidad de Castilla-La Mancha
RP Valero, V (corresponding author), Univ Castilla La Mancha, Escuela Super Ingn Informat, Campus Univ S-N, Albacete 02071, Spain.
EM Valentin.Valero@uclm.es; Hermenegilda.Macia@uclm.es;
   JuanJose.Pardo@uclm.es; MEmilia.Cambronero@uclm.es;
   Gregorio.Diaz@uclm.es
RI Diaz-Descalzo, Gregorio/H-9912-2015; Mateo, Juan José
   Pardo/AAB-2154-2019; Valero, Valentin/G-8268-2015
OI Diaz-Descalzo, Gregorio/0000-0002-9116-9535; Valero,
   Valentin/0000-0003-3462-7656; Cambronero, Maria/0000-0003-2153-8830
FU Spanish Government; FEDER [TIN2009-14312-C02-02]; JCCLM
   [PEII09-0232-7745]
FX This work received financial support from the Spanish Government
   (cofinanced by FEDER funds) through the TIN2009-14312-C02-02 Project,
   and the JCCLM Regional Project PEII09-0232-7745.
CR ALONSO G, 2002, WEB SERVICES
   Andrews T., 2003, BPEL4WS BUSINESS PRO
   [Anonymous], Web Service Choreography Interface
   [Anonymous], WEB SERVICES CHOREOG
   Arbab F, 2004, MATH STRUCT COMP SCI, V14, P329, DOI 10.1017/S0960129504004153
   Bause F, 1996, ACTA INFORM, V33, P669, DOI 10.1007/s002360050065
   Ben-Hafaiedh I, 2011, J LOGIC ALGEBR PROGR, V80, P194, DOI 10.1016/j.jlap.2010.10.001
   BEST E, 1992, THEOR COMPUT SCI, V96, P175, DOI 10.1016/0304-3975(92)90184-H
   Best E, 1998, ACTA INFORM, V35, P813, DOI 10.1007/s002360050144
   Best E., 2001, MONO THEOR COMP SCI
   Bolognesi T., 1990, P 10 INT IFIP WG6 1
   BOWDEN FDJ, 1996, P 2 AUSTR JAP WORKSH
   Brogi A., 2004, ELECT NOTES THEORETI
   Bultan T, 2006, IEEE INTERNET COMPUT, V10, P18, DOI 10.1109/MIC.2006.1
   Carbone M, 2007, LECT NOTES COMPUT SC, V4421, P2
   Hamadi R., 2003, ADC 03
   Hoare CAR., 1985, Communicating Sequential Processes
   Jensen K., 1997, MONOGRAPHS THEORETIC
   Jensen K, 2009, COLOURED PETRI NETS: MODELLING AND VALIDATION OF CONCURRENT SYSTEMS, P1, DOI 10.1007/b95112
   Laneve C, 2006, LECT NOTES COMPUT SC, V3921, P32
   Lohmann N, 2008, LECT NOTES COMPUT SC, V4937, P77
   Marsan M. A., 1985, International Workshop on Timed Petri Nets (Cat. No. 2187-3), P80
   Martens A, 2005, LECT NOTES COMPUT SC, V3442, P19, DOI 10.1007/978-3-540-31984-9_3
   Merlin P. M., 1974, A study of the recoverability of computing systems
   Milner R., 1989, Communication and concurrency
   Peterson J.L., 1981, Petri Net Theory and the Modeling of Systems
   Qiu Zongyan, 2007, P WORLD WIDE WEB C W, P973, DOI 10.1145/1242572.1242704
   Ramchandani C., 1973, Analysis of asynchronous concurrent systems by timed petri nets
   Roohi N, 2009, ELECTRON NOTES THEOR, V255, P159, DOI 10.1016/j.entcs.2009.10.030
   Ruiz V. V., 1993, Proceedings. 5th International Workshop on Petri Nets and Performance Models (Cat. No.93TH0558-7), P56, DOI 10.1109/PNPM.1993.393435
   SALAUN G, 2004, 2 INT C WEB SERV
   Sifakis J., 1977, Measuring, Modelling and Evaluating Computer Systems, P75
   Tasharofi S, 2009, ELECTRON NOTES THEOR, V229, P155, DOI 10.1016/j.entcs.2009.06.034
   Thomas JP, 2003, IEEE INTERNATIONAL CONFERENCE ON E-COMMERCE, P391, DOI 10.1109/COEC.2003.1210275
   van der Aalst W.M.P., 2006, DAGSTUHL SEMINAR P
   VANDERAALST WMP, 1995, REAL-TIME SYST, V9, P241, DOI 10.1007/BF01088807
   VANDERAALST WMP, 1993, LECT NOTES COMPUTER, V691, P451
   VERBEEK H., 2005, Proceedings of the Second International Workshop on Applications of Petri Nets to Coordination, Workow and Business Process Management, P59
   W3C, WEB SERV DESCR LANG
   Wang J., 1998, Timed Petri Nets Theory and Application
   Yang HL, 2006, ICWS 2006: IEEE INTERNATIONAL CONFERENCE ON WEB SERVICES, PROCEEDINGS, P893
   YEUNG WL, 2006, P 4 IEEE EUR C WEB S, P297
NR 42
TC 6
Z9 7
U1 0
U2 9
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR 1
PY 2012
VL 77
IS 3
BP 290
EP 313
DI 10.1016/j.scico.2011.05.002
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 898NB
UT WOS:000300748000009
DA 2024-07-18
ER

PT J
AU Munkby, G
   Schupp, S
AF Munkby, Gustav
   Schupp, Sibylle
TI Automating exception-safety classification
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Strong exception-safety guarantee; Rollback semantics; Data-flow
   analysis; Program safety; Exception handling
ID STATIC ANALYSIS; SUPPORT
AB Exception handling mechanisms provide a structured way to deal with exceptional circumstances, making it easier to read and reason about programs. Exception handling, however, cannot avoid the problem that the transfer of control might leave the program in an inconsistent state-resources might leak, invariants might be violated, the program state might be changed. Since client code often needs to know how a program behaves in the presence of exceptions, the exception-safety classification distinguishes three different classes of safety guarantees; this classification is used, for example, during the review process in the Boost organization for standardized libraries in C++. Classifying the safety level of a procedure requires understanding program invariants and tracking program state at any given point in the code, which is error-prone when done by hand. Yet, no tool support is available to date. In this paper we present the first automated analysis for exception guarantees. Since the safety level of an arbitrary procedure is undecidable, the analysis conservatively approximates exception safety. The analysis is based on the theory of backward data-flow analysis and recognizes two of the three safety guarantees, the strong and the no-throw guarantee, and provides counterexamples otherwise. A prototype implementation is available. (c) 2008 Elsevier B.V. All rights reserved.
C1 [Munkby, Gustav; Schupp, Sibylle] Chalmers, Dept Comp Sci & Engn, S-41296 Gothenburg, Sweden.
C3 Chalmers University of Technology
RP Munkby, G (corresponding author), Chalmers, Dept Comp Sci & Engn, S-41296 Gothenburg, Sweden.
EM gustav.munkby@chalmers.se; schupp@chalmers.se
FU Swedish industry; Swedish Government
FX This work was in part supported by the project CEDES, which is funded
   within the Intelligent Vehicle Safety Systems (IVSS) program, a joint
   research program by the Swedish industry and Government. We thank the
   reviewers for their insightful comments and suggestions.
CR ABRAHAMS D, 1998, LECT NOTES COMPUTER, P69
   ABRAHAMS D, 1997, N1086970048R1 C STAN
   Alexandrescu A., 2003, C C USERS J, V21, P40
   [Anonymous], 2000, The C++ Programming Language
   COSTA B, 2007, EDOC MANUAL
   Cristian F., 1979, Proceedings of the 4th International Conference on Software Engineering, P42
   DAWES B, 2008, BOOST LIB REQUIREMEN
   GOODENOUGH JB, 1975, P 2 ACM S PRINC PROG, P204
   Gregor D, 2006, ACM SIGPLAN NOTICES, V41, P291, DOI 10.1145/1167515.1167499
   KAM JB, 1976, J ACM, V23, P158, DOI 10.1145/321921.321938
   Kildall Gary A., 1973, Proceedings of the 1st Annual ACM SIGACT-SIGPLAN Symposium on Principles of Programming Languages. POPL'73, P194
   McPeak S, 2004, LECT NOTES COMPUT SC, V2985, P73
   MCPEAK S, 2005, ELKHOUND ELSA
   MUNKBY G, 2006, THESIS CHALMERS U
   NIELSEN F, 1999, PRINCIPLES PROGRAM A
   RANDELL B, 1975, P INT C REL SOFTW, P437, DOI DOI 10.1145/800027.808467
   Robillard MP, 2003, ACM T SOFTW ENG METH, V12, P191, DOI 10.1145/941566.941569
   ROZENTAL G, 2007, BOOST TEST LIB
   Ryder B. G., 2003, Software Engineering Notes, V28, P29, DOI 10.1145/882240.882258
   SCHAEFER CF, 1993, SOFTWARE PRACT EXPER, V23, P1157, DOI 10.1002/spe.4380231007
   Stroustrup B., 1994, The Design and Evolution of C++
   SUTTER H, 2004, AW C DEPTH SERIES
NR 22
TC 0
Z9 0
U1 0
U2 1
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD APR 1
PY 2011
VL 76
IS 4
SI SI
BP 278
EP 289
DI 10.1016/j.scico.2008.06.004
PG 12
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 727WU
UT WOS:000287834500005
DA 2024-07-18
ER

PT J
AU Oancea, CE
   Watt, SM
AF Oancea, Cosmin E.
   Watt, Stephen M.
TI An architecture for generic extensions
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Generics; C plus plus templates; Software component architecture;
   Middleware; Curiously reoccurring template pattern (CRTP); Type members
AB We examine what is necessary to allow generic libraries to be used naturally in a multi-language, potentially distributed environment. Language-neutral library interfaces usually do not support the full range of programming idioms that are available when a library is used natively. We investigate how to structure the language bindings of the neutral interface to achieve a better expressibility and code re-use. We furthermore address how language-neutral interfaces can be extended with import bindings to recover the desired programming idioms. We also address the question of how these extensions can be organized to minimize the performance overhead that arises from using objects in manners not anticipated by the original library designers. Our approach is to treat a library as a software component and to view the problem as one of component extension. We use C++ as an example of a mature language, with libraries using a variety of patterns, and use the Standard Template Library as an example of a complex library for which efficiency is important. By viewing the library extension problem as one of component organization, we enhance software composibility, hierarchy maintenance and architecture independence. (c) 2009 Elsevier B.V. All rights reserved.
C1 [Oancea, Cosmin E.] Texas A&M Univ, Dept Comp Sci & Engn, College Stn, TX 77843 USA.
   [Watt, Stephen M.] Univ Western Ontario, Dept Comp Sci, London, ON N6A 5B7, Canada.
C3 Texas A&M University System; Texas A&M University College Station;
   Western University (University of Western Ontario)
RP Oancea, CE (corresponding author), Texas A&M Univ, Dept Comp Sci & Engn, College Stn, TX 77843 USA.
EM coancea@cs.tamu.edu; watt@csd.uwo.ca
FU Natural Sciences and Engineering Research Council of Canada
FX The authors were supported by the Natural Sciences and Engineering
   Research Council of Canada.
CR CANNING P, 1989, ACM S FUNCTIONAL PRO, P273
   COPLIEN JO, 1995, CURIOUSLY RECURRING, P2427
   CZARNECKI K, 1999, ACM SIGSOFT SOFTWARE, V24, P2
   Ernst E., 2001, ECOOP 2001 - Object-Oriented Programming. 15th European Conference. Proceedings (Lecture Notes in Computer Science Vol.2072), P303
   Gregor D., 2006, OOPSLA '06, P291, DOI DOI 10.1145/1167473.1167499
   Hongwei Xi, 2003, SIGPLAN Notices, V38, P224, DOI 10.1145/640128.604150
   Järvi J, 2005, ACM SIGPLAN NOTICES, V40, P1, DOI 10.1145/1103845.1094813
   Johnson R., 1996, EUROPLOP
   KENNEDY A, 2005, P 20 ANN ACM SIGPLAN, P21
   *MICR, 1996, DCOM TECHN OV
   Musser D., STL TUTORIAL REFEREN
   OANCEA C, 2005, P 20 ANN ACM SIGPLAN, P147
   ODERSKY M, 2003, P ACM EUR C OBJ OR P
   ODERSKY M, 2004, 200464 IC EPFL LAUS
   OMG, 2000, COMM OBJ REQ BROK AR
   Siegel J., 2000, CORBA 3 Fundamentals and Programming
   Smaragdakis Y., 2000, P GCSE 00 P 2 INT S, P163
   Stepanov A, 1995, 9511R1 HP LAB
   *SUN MICR, JAV NAT INT
   WATT SM, 1994, AXIOM LIB COMPILER U
   [No title captured]
   [No title captured]
NR 22
TC 1
Z9 1
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD APR 1
PY 2011
VL 76
IS 4
SI SI
BP 258
EP 277
DI 10.1016/j.scico.2009.09.008
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 727WU
UT WOS:000287834500004
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Spinellis, D
AF Spinellis, Diomidis
TI CScout: A refactoring browser for C
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE C; Browser; Refactoring; Preprocessor
ID CODE; TRADE; TOOLS
AB Despite its maturity and popularity, the C programming language still lacks tool support for reliably performing even simple refactoring, browsing, or analysis operations. This is primarily due to identifier scope complications introduced by the C preprocessor. The CScout refactoring browser analyses complete program families by tagging the original identifiers with their precise location and classifying them into equivalence classes orthogonal to the C language's namespace and scope extents. A web-based user interface provides programmers with an intuitive source code analysis and navigation front-end, while an SQL-based back-end allows more complex source code analysis and manipulation. CScout has been successfully applied to many medium and large-sized proprietary and open-source projects identifying thousands of modest refactoring opportunities. (C) 2009 Elsevier B.V. All rights reserved.
C1 Athens Univ Econ & Business, Dept Management Sci & Technol, GR-10434 Athens, Greece.
C3 Athens University of Economics & Business
RP Spinellis, D (corresponding author), Athens Univ Econ & Business, Dept Management Sci & Technol, Patis 76, GR-10434 Athens, Greece.
EM dds@aueb.gr
RI Spinellis, Diomidis/E-3600-2010
OI Spinellis, Diomidis/0000-0003-4231-1897
CR *AM NAT STAND INF, 1989, 98991990 ISOIEC AM N
   [Anonymous], CGO 04
   [Anonymous], 2006, Programming in lua
   ANTONIOL G, 1997, ICSM 97
   AVERSANO L, 2002, SCAM 02
   Badros GJ, 2000, SOFTWARE PRACT EXPER, V30, P907, DOI 10.1002/(SICI)1097-024X(20000710)30:8<907::AID-SPE324>3.0.CO;2-I
   BAXTER ID, 2001, WCRE 01
   CHEN YF, 1990, IEEE T SOFTWARE ENG, V16, P325, DOI 10.1109/32.48940
   Cooke D, 1999, COMPUTER, V32, P58, DOI 10.1109/MC.1999.762801
   De Volder K, 2006, LECT NOTES COMPUT SC, V3819, P88
   *DEV EXPR INC, 2009, REF YOUR COD REF
   Ernst MD, 2002, IEEE T SOFTWARE ENG, V28, P1146, DOI 10.1109/TSE.2002.1158288
   FAVRE JM, 1996, P INT C SOFTW MAINT
   Fielding R. T, 2002, ACM Transactions on Internet Technology (TOIT), V2, P115, DOI [DOI 10.1145/514183.514185, 10.1145/514183.514185]
   Fowler M., 2000, Refactoring: Improving the Design of Existing Code
   GARRIDO A, 2002, IWPSE 02
   GARRIDO A, 2005, ICSM 05
   Garrido Alejandra., 2005, PROGRAM REFACTORING
   Gasner E. R., 1993, IEEE T SOFTWARE ENG, V19, P124
   Ghiya R, 2001, ACM SIGPLAN NOTICES, V36, P47, DOI 10.1145/381694.378806
   Griswold W. G., 1993, ACM Transactions on Software Engineering and Methodology, V2, P228, DOI 10.1145/152388.152389
   Holt RC, 2006, SCI COMPUT PROGRAM, V60, P149, DOI 10.1016/j.scico.2005.10.003
   HU Y, 2000, ICSM 00
   Hunt A., 2000, PRAGMATIC PROGRAMMER
   *INT ORG STAND, 1999, 98991999 ISOIEC INT
   JANZEN D, 2003, AOSD 03
   JIM T, 2002, USENIX TECHN C P USE
   LAMPOUDI S, 2002, USENIX TECHN C P FRE
   Lapierre S., 2001, Software Engineering Notes, V26, P53, DOI 10.1145/505894.505907
   Li ZM, 2006, IEEE T SOFTWARE ENG, V32, P176, DOI 10.1109/TSE.2006.28
   LINTON MA, 1984, SDE 1
   Livadas P, 1994, IEEE 3 WORKSH PROGR
   MILANOVA A, 2004, AUTOMAT SOFTW ENG, V1, P7
   Murphy GC, 2006, IEEE SOFTWARE, V23, P76, DOI 10.1109/MS.2006.105
   Nicholas D., 1978, LIT BIBLIOMETRICS
   Owens M., 2006, The Definitive Guide to SQLite
   Parnas D. L., 1976, IEEE Transactions on Software Engineering, VSe-2, P1, DOI 10.1109/TSE.1976.233797
   PROSSER DF, 1986, X3J1186196 ANSI
   ROBERTS D, 1997, THEOR PRACT OBJ SYST, V3, P39
   ROSKIND JA, 1990, GRAMMAR FILE DPANSI
   SCHAEFER D, 2008, CODE ANAL REFACTORIN
   Snelting G., 1996, ACM Transactions on Software Engineering and Methodology, V5, P146, DOI 10.1145/227607.227613
   Spinellis D, 2006, IEEE SOFTWARE, V23, P98, DOI 10.1109/MS.2006.70
   SPINELLIS D, 2003, OPEN SOURCE PERSPECT
   SPINELLIS D, 2008, ICSE 08
   Spinellis D, 2008, IEEE SOFTWARE, V25, P89, DOI 10.1109/MS.2008.101
   Spinellis D, 2006, DR DOBBS J, V31, P58
   Spinellis D, 2009, J SOFTW MAINT EVOL-R, V21, P233, DOI 10.1002/smr.369
   STALLMAN RM, 1984, INTERACTIVE PROGRAMM, P300
   STEIMANN F, 2009, ECOOP 09
   Stroustrup B., 1997, The C++ Programming Language
   Sutter Herb, 2004, C++ coding standards: 101 rules, guidelines, and best practices
   TO Q, 2001, ICSM 01
   Tokuda L., 2001, Automated Software Engineering, V8, P89, DOI 10.1023/A:1008715808855
   VIDACS L, 2004, CSMR 04
   VITTEK M, 2003, CSMR 03
   Waddington DG, 2005, ELECTRON NOTES THEOR, V141, P35, DOI 10.1016/j.entcs.2005.04.037
   Weiss D.M., 1999, Software Product-Line Engineering-A Family-Based Software Development Process
   WUYTS R, 1998, TOOLS 98
NR 59
TC 15
Z9 16
U1 0
U2 2
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD APR
PY 2010
VL 75
IS 4
BP 216
EP 231
DI 10.1016/j.scico.2009.09.003
PG 16
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 580QR
UT WOS:000276464800003
DA 2024-07-18
ER

PT J
AU Bringer, J
   Chabanne, H
   Kindarji, B
AF Bringer, Julien
   Chabanne, Herve
   Kindarji, Bruno
TI The best of both worlds: Applying secure sketches to cancelable
   biometrics
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Fingerprint biometrics; Cancelable biometrics; Secure sketches; Security
ID VERIFICATION; TEMPLATES
AB Cancelable biometrics and secure sketches have been introduced with the same purpose in mind: to protect the privacy of biometric templates while keeping the ability to match this protected data against a reference. The paradigm beyond cancelable biometrics is to perform an irreversible transformation over images and to make matching over transformed images. On one hand, a drawback of this technique is that for biometrics using a matching algorithm relying on some complex characteristics, such as the ones used for fingerprints, the irreversible transformation tends to break the underlying structure, thus degrading the performance accuracy. On the other hand. for secure sketches, matching is reduced to an error correction and we show here that applying secure sketch error correction to cancelable biometrics allows one to keep good matching performance. Moreover, the security's advantages of both schemes adds up together. (C) 2008 Elsevier B.V. All rights reserved.
C1 [Bringer, Julien; Chabanne, Herve; Kindarji, Bruno] Sagem Secur, Osny, France.
   [Kindarji, Bruno] TELECOM ParisTech, Paris, France.
C3 IMT - Institut Mines-Telecom; Institut Polytechnique de Paris; Telecom
   Paris
RP Bringer, J (corresponding author), Sagem Secur, Osny, France.
EM julien.bringer@sagem.com; herve.chabanne@sagem.com;
   bruno.kindarji@sagem.com
RI Bringer, Julien/KVY-0557-2024
FU French ANR RNRT
FX This work is partially supported by the French ANR RNRT project BACH.
CR ANG R, 2005, LNCS, V3574
   [Anonymous], LNCS
   [Anonymous], LNCS
   Bazen AM, 2004, IEEE T CIRC SYST VID, V14, P86, DOI 10.1109/TCSVT.2003.818356
   Bazen AM, 2002, IEEE T PATTERN ANAL, V24, P905, DOI 10.1109/TPAMI.2002.1017618
   BAZEN AM, 2004, 4 IEEE BEN SIGN PROC
   Bringer J, 2006, IEEE T INFORM THEORY, V52, P2266, DOI 10.1109/TIT.2006.872861
   BRINGER J, 2007, IEEE 1 INT C BIOM TH
   BUHAN I, 2007, ASIACCS
   COHEN G, 2004, IEEE INT S INF THEOR
   COHEN G, 2006, IEEE INF THEORY WORK
   Daugman J, 2003, PATTERN RECOGN, V36, P279, DOI 10.1016/S0031-3203(02)00030-4
   DAVIDA G, 1998, P IEEE S SEC PRIV
   DAVIDA GI, 1999, LNCS, V1746
   DODIS Y, 2006, LNCS, V4117
   DODIS Y, 2004, LNCS, V3027
   Hao F, 2006, IEEE T COMPUT, V55, P1081, DOI 10.1109/TC.2006.138
   Juels A., 1999, ACM C COMP COMM SEC
   KEVENAAR TAM, 2005, P 4 IEEE WORKSH AUT
   LINNARTZ JPM, 2003, LNCS, V2688
   MacWilliams F. J., 1988, THEORY ERROR CORRECT
   Maio D, 2002, IEEE T PATTERN ANAL, V24, P402, DOI 10.1109/34.990140
   Muller D. E., 1954, IRE Trans. Electron. Comp, VEC-3, P6, DOI 10.1109/IREPGELC.1954.6499441
   Prabakhar S., 2003, HDB FINGERPRINT RECO
   Ratha NK, 2007, IEEE T PATTERN ANAL, V29, P561, DOI 10.1109/TPAMI.2007.1004
   Ratha NK, 2001, IBM SYST J, V40, P614, DOI 10.1147/sj.403.0614
   REED IS, 1954, IEEE T INFORM THEORY, V4, P38, DOI DOI 10.1109/TIT.1954.105746
   Sutcu Y, 2007, IEEE T INF FOREN SEC, V2, P503, DOI 10.1109/TIFS.2007.902022
   TUYLS P, 2004, LNCS, V3087
   TUYLS P, 2005, LNCS, V3546
NR 30
TC 35
Z9 41
U1 0
U2 0
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 1
PY 2008
VL 74
IS 1-2
BP 43
EP 51
DI 10.1016/j.scico.2008.09.016
PG 9
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 386PX
UT WOS:000261896200006
DA 2024-07-18
ER

PT J
AU Daylight, EG
   Vandecappelle, A
   Catthoor, F
AF Daylight, Edgar G.
   Vandecappelle, Arnout
   Catthoor, Francky
TI The formalism underlying EASYMAP: A precompiler for refinement-based
   exploration of hierarchical data organizations
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE hierarchical data organization; abstract data type refinement; formal
   tool design; embedded systems; separation logic; data structure design
ID MEMORY MANAGEMENT; SYSTEMS
AB In the computer science community, data structure design is mainly conducted at a high level abstraction under the implicit assumption that the platform contains a monolithic memory. Exploiting platform-related knowledge such as available on-chip and off-chip memory sizes, the cache size, and the number of SDRAM banks is mainly conducted in the system engineering community when the refined data structure has already been chosen. A convergence of both communities is desirable since this can lead to powerful optimizations.
   To achieve the convergence mentioned above, data-related transformations have been researched extensively in the recent past. Many of these transformations have a direct and large impact on memory footprint, execution time and energy consumption. Unfortunately, however, the most effective transformations are applied manually (e.g. in C code) and these result in a very time-consuming and error-prone design process. To overcome this burden, our general research goal is to develop a computer-aided design tool, called EASYMAP, that helps the designer to correctly construct the C code of an efficient but difficult-to-understand data structure. The formal design Of EASYMAP is the topic of this article with the emphasis on Cha, the internal language of EASYMAP. Cha is based on a novel extension of Separation Logic's spatial conjunction operator (*), allowing it to concisely describe access operations of an irregularly accessed complex data organization. cha is the basic building block Of EASYMAP; it serves the purpose of automating EASYMAP's refinement process and proving that it is correct by construction. (c) 2008 Elsevier B.V. All rights reserved.
C1 [Daylight, Edgar G.; Vandecappelle, Arnout; Catthoor, Francky] IMEC VZW, DESICS Div, B-3001 Heverlee, Belgium.
   [Daylight, Edgar G.] Katholieke Univ Leuven, Dept Comp Sci, Louvain, Belgium.
   [Catthoor, Francky] Katholieke Univ Leuven, Dept Elect Engn, Louvain, Belgium.
C3 IMEC; KU Leuven; KU Leuven
RP Daylight, EG (corresponding author), IMEC VZW, DESICS Div, Kapeldreef 75, B-3001 Heverlee, Belgium.
EM egdaylight@yahoo.com; arnout.vandecappelle@gmail.com; catthoor@imec.be
CR AHMED A, 2003, 18 ANN IEE LICS OTT
   Aho A. V., 1983, DATA STRUCTURES ALGO
   [Anonymous], 1992, Semantics with applications: a formal introduction
   [Anonymous], 2002, LICS
   Atienza D, 2004, DESIGN, AUTOMATION AND TEST IN EUROPE CONFERENCE AND EXHIBITION, VOLS 1 AND 2, PROCEEDINGS, P532, DOI 10.1109/DATE.2004.1268900
   Atienza D, 2004, LECT NOTES COMPUT SC, V3254, P510
   Atienza D, 2006, ACM T DES AUTOMAT EL, V11, P465, DOI 10.1145/1142155.1142165
   Berger E. D., 2001, P 2001 ACM SIGPLAN C
   BIRKEDAL L, POPL 04, P220
   Blaine L., 1991, CONSTRUCTING PROGRAM, P165
   Blume W., 1994, Proceedings Supercomputing '94 (Cat. No.94CH34819), P528, DOI 10.1109/SUPERC.1994.344316
   BURSTALL RM, 1977, J ACM, V24, P44, DOI 10.1145/321992.321996
   Catthoor F., 1998, CUSTOM MEMORY MANAGE
   CHILIMBI TM, 2000, IEEE COMPUTER
   CHIRICA LM, 1986, ACM T PROGR LANG SYS, V8, P185, DOI 10.1145/5397.30847
   DASILVA JL, 1998, EFFICIENT SYSTEM EXP, P76
   DASILVA JL, 1999, THESIS IMEC KU LEUVE
   Daylight EG, 2004, IEEE T VLSI SYST, V12, P269, DOI 10.1109/TVLSI.2004.824303
   DAYLIGHT EG, 2004, FORMAL FDN EMBEDDED
   DAYLIGHT EG, 2004, SPACE 2004 SEMANTICS
   DAYLIGHT EG, 2006, THESIS DEP COMP SCI
   de Roever Willem-Paul, 1998, Data Refinement Model-Oriented Proof methods and their Comparison
   DEGREEF E, 1998, STORAGE SIZE REDUCTI
   Dijkstra E. W., 1968, BIT (Nordisk Tidskrift for Informationsbehandling), V8, P174, DOI 10.1007/BF01933419
   DOLD A, INT J FDN COMPUTER S, V14, P659
   GOERIGK W, P POST SESS CC 96 IN
   GOGUEN J, 1997, ALGEBRAIC SEMANTICS
   GOGUEN JA, 1988, SRICSL8809
   Guttag J. V., 2002, SOFTWARE PIONEERS, P443, DOI [10.1007/978-3-642-59412-0_28, DOI 10.1007/978-3-642-59412-0_28]
   Hicks Michael, 2004, P 4 INT S MEM MAN VA, P73, DOI DOI 10.1145/1029873.1029883
   Hind M, 2001, ACM SIGPLAN NOTICES, P54
   Hoare C. A. R., 1972, Acta Informatica, V1, P271, DOI 10.1007/BF00289507
   Hoare C.A.R., 1961, Communications of the ACM, V4, P321, DOI [DOI 10.1145/366622.366647, DOI 10.1145/366622.366644]
   HOARE CAR, 1969, COMMUN ACM, V12, P576, DOI 10.1145/363235.363259
   HOARE CAR, 2002, SOFTWARE PIONEERS, P357
   ISHTIAQ S, 2001, P 28 ACM SIGPLAN LON
   Jim T, 2002, USENIX ASSOCIATION PROCEEDINGS OF THE GENERAL TRACK, P275
   JIMENEZPEREZ G, 1997, S SOFTW REUS BOST MA, P136
   JONES SP, 1998, P 1997 WORKSH IMPL F
   KELLY W, 1993, CSTR3193 CS U MAR
   KERNIGHAN BW, 1998, PROGRAMMING LANGUAGE
   Kistler T, 2000, ACM T PROGR LANG SYS, V22, P490, DOI 10.1145/353926.353937
   LATTNER C, 2003, UIUCDCSR20032340 U I
   LEEMAN M, 2003, P ANN S VER LARG SYS
   MASLOV V, 1994, POPL 94 21 ACM SIGPL, P311
   MCCARTHY J, 1967, P S APPL MATH AM MAT
   Moller T., 1999, Real-Time Rendering
   MOORE JS, 1986, MECHANICALLY VERIFIE
   Muchnick S., 1997, ADV COMPILER DESIGN
   O'Hearn PW., 2001, Local reasoning about programs that alter data structures, volume 2142 of LNCS, V2142, P1
   OHEARN P, 2004, POPL
   Parkinson M.J., 2005, POPL
   PARNAS DL, 1972, COMMUN ACM, V15, P1053, DOI 10.1145/361598.361623
   Parnas DL., 2002, SOFTWARE PIONEERS CO, P399
   PAULSON LC, 1996, WORKING PROGRAMMER
   PAVLOVIC D, 2003, UNU IIST 10 ANN C FO
   *PHIL EL N AM CORP, 1997, TRIMEDIA TM 1000 PRE
   PUGH W, 1994, ACM T PROGR LANG SYS, V16, P1248, DOI 10.1145/183432.183525
   Pym DavidJ., 2002, The Semantics and Proof Theory of the Logic of Bunched Implications
   SCHWARTZ JT, 1975, POPL, P36
   SEKANINA M, 1995, INTRO SHAPE ANAL
   SMARAGDAKIS Y, 1997, DISTIL TRANSFORMATIO
   Temmerman M, 2005, LECT NOTES COMPUT SC, V3553, P445
   Walker D, 2000, ACM T PROGR LANG SYS, V22, P701, DOI 10.1145/363911.363923
   WALKER D, 2000, WORKSH TYP COMP MONT
   WILHELM R, CC 2000
   WIRTH N, 1971, COMMUN ACM, V14, P221, DOI 10.1145/362575.362577
   Wuytack S., 1995, Proceedings. 1995 International Symposium on Low Power Design, P51, DOI 10.1145/224081.224091
   WUYTACK S, 1999, IEEE T COMPUTER AIDE, V18
   Zhong Y., PLDI 04
NR 70
TC 0
Z9 0
U1 0
U2 3
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD AUG 1
PY 2008
VL 72
IS 3
BP 71
EP 135
DI 10.1016/j.scico.2008.03.002
PG 65
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 349KB
UT WOS:000259278600001
DA 2024-07-18
ER

PT J
AU Fruja, NG
AF Fruja, Nicu G.
TI Towards proving type safety of .NET CIL
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE type safety; bytecode verification; CLR; CIL; .NET; operational
   semantics; virtual machines; security
ID BYTECODE VERIFIER; VIRTUAL MACHINE; JAVA; LANGUAGE; SYSTEM
AB A crucial role in the Microsoft.NIET Framework Common Language Runtime (CLR) security model is played by type safety of the Common intermediate Language (CIL). In this paper, we formally prove type safety of a large subset of CIL To do so, we begin by specifying the static and dynamic semantics of CIL by providing an abstract interpreter for CIL programs. We then formalize the bytecode verification algorithm, whose job it is to compute a well-typing for a given method. We then prove type safety of well-typed methods, i.e., the execution according to the semantics model of legal and well-typed methods does not lead to any run-time type violations. Finally, to prove CIL's type safety, we show that the verification algorithm is sound, i.e., the typings it produces are well-typings, and complete, i.e., if a well-typing exists, then the algorithm computes one. (c) 2008 Elsevier B.V. All rights reserved.
C1 Swiss Int Air Lines Ltd, CH-8058 Zurich, Switzerland.
RP Fruja, NG (corresponding author), Swiss Int Air Lines Ltd, CH-8058 Zurich, Switzerland.
EM NicuGeorgian.Fruja@swiss.com
CR [Anonymous], 2001, Java and the Java Virtual Machine: Definition, Verification, Validation
   [Anonymous], 2005, ECMA335
   BORGER E, 2003, ABSTRACTS STATE MACH
   BORGER E, 1999, FM TRENDS 98, P1
   DOWD T, 2001, ELECT NOTES THEORETI, V59, P73
   DOYON S, 2000, SAC 00, P821
   Dybvig R.K., 2003, SCHEME PROGRAMMING L, V3rd
   *ECMA INT, 2006, ECMA367
   *FDN SOFTW ENG GRO, ABSTR STAT MACH LANG
   FRAUENFELDER M, 2006, THESIS
   FREUND S, 2000, THESIS STANFORD U
   Freund SN, 1999, ACM T PROGR LANG SYS, V21, P1196, DOI 10.1145/330643.330646
   Freund SN, 2003, J AUTOM REASONING, V30, P271, DOI 10.1023/A:1025011624925
   Fruja NG, 2006, LECT NOTES COMPUT SC, V3924, P325
   Fruja NG, 2003, LECT NOTES COMPUT SC, V2589, P244
   Fruja NG, 2006, J OBJECT TECHNOL, V5, P5, DOI 10.5381/jot.2006.5.3.a1
   Glesner S, 2003, LECT NOTES COMPUT SC, V2589, P293
   GORDON A, 2003, Patent No. 6560774
   GORDON A, 2001, PRINCIPLES PROGRAMMI, P248
   Gough KJ, 2001, LECT NOTES COMPUT SC, V1897, P278
   GOUGH KJ, 2001, ACSAC 01, P55
   Hartel PH, 2001, ACM COMPUT SURV, V33, P517, DOI 10.1145/503112.503115
   Igarashi A, 1999, ACM SIGPLAN NOTICES, V34, P132, DOI 10.1145/320385.320395
   Jacobs B, 2000, LECT NOTES COMPUT SC, V1816, P150
   Kahn G., 1987, STACS 87. 4th Annual Symposium on Theoretical Aspects of Computer Science. Proceedings, P22, DOI 10.1007/BFb0039592
   Klein G, 2006, ACM T PROGR LANG SYS, V28, P619, DOI 10.1145/1146809.1146811
   Lindholm Tim., 1999, JAVA VIRTUAL MACHINE, V2nd
   Marrocco Christian, 2005, THESIS
   *MERC PROJ, NET DOC
   *MICR, MICR NET FRAM 2 0 SO
   *NET FRAM CLASS LI, SYST DEL CLASS
   *NET FRAM CLASS LI, SYST RUNTIMETYPEHAND
   *NET FRAM CLASS LI, SYST VALUETYPE CLASS
   *OB MICR, 1999, COMP PASC LANG REP
   OCALLAHAN R, 1999, P 26 ACM S PRINC PRO, P70
   Pusch C, 1999, LECT NOTES COMPUT SC, V1579, P89
   QIAN Z, 1997, CONSTRAINT BASED SPE
   Shiel S, 2005, ELECTRON NOTES THEOR, V141, P35, DOI 10.1016/j.entcs.2005.02.039
   Stärk RF, 2003, J AUTOM REASONING, V30, P323, DOI 10.1023/A:1025003423108
   STARK RF, 2001, PROBLEM BYTECODE VER
   Stata R, 1999, ACM T PROGR LANG SYS, V21, P90, DOI 10.1145/314602.314606
   SYME D, 1999, LNCS, V1523, P83
   SYME D, 1998, DECLARATIVE THEOREM
   JGNAT GNAT BASED ADA
   2006, NET LANGUAGES
NR 45
TC 4
Z9 4
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD AUG 1
PY 2008
VL 72
IS 3
BP 176
EP 219
DI 10.1016/j.scico.2008.05.004
PG 44
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 349KB
UT WOS:000259278600003
OA Bronze
DA 2024-07-18
ER

PT J
AU Yeung, WL
   Leung, KRPH
   Wang, J
   Dong, W
AF Yeung, W. L.
   Leung, K. R. P. H.
   Wang, Ji
   Dong, Wei
TI Modelling and model checking suspendible business processes via
   statechart diagrams and CSP
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE statechart diagrams; history mechanism; object behaviour; process
   modelling; model checking
AB When modelling object behaviour with UML statechart diagrams, the history mechanism can be useful for modelling the suspension of a "normal" business process upon certain "abnormal" events together with the subsequent resumption, as illustrated by the examples in this paper. However, previous approaches to model checking statechart diagrams often ignore the history mechanism. We enhanced such a previous approach based on Communicating Sequential Processes (CSP) and developed a support tool for it. (c) 2006 Elsevier B.V. All rights reserved.
C1 Lingnan Univ, Dept Comp & Decis Sci, Hong Kong, Hong Kong, Peoples R China.
   Hong Kong Inst Vocat Educ, Dept Informat & Commun Technol, Hong Kong, Hong Kong, Peoples R China.
   Natl Lab Parallel & Distributed Proc, Changsha, Hunan, Peoples R China.
C3 Lingnan University; National University of Defense Technology - China
RP Yeung, WL (corresponding author), Lingnan Univ, Dept Comp & Decis Sci, Hong Kong, Hong Kong, Peoples R China.
EM wlyeung@ln.edu.hk
OI YEUNG, Wing Lok/0000-0001-6099-4148
CR [Anonymous], 1999, XSL TRANSF XSLT VERS
   Augusto JC, 2003, LECT NOTES COMPUT SC, V2890, P207
   AUGUSTO JC, 2003, P 3 WORKSH AUT VER C, P253
   Bhaduri Purandar., 2004, Model Checking of Statechart Models: Survey and Research Directions
   Bienmuller T., 2000, Proc. Int. Conf. Comput.-Aided Verification, V1855, P561, DOI DOI 10.1007/1072216745
   BORGER E, 2000, LNCS, V1912, P223
   Butler M, 2000, LECT NOTES COMPUT SC, V1945, P61
   Cheng BHC, 2000, DSN 2000: INTERNATIONAL CONFERENCE ON DEPENDABLE SYSTEMS AND NETWORKS, PROCEEDINGS, P305, DOI 10.1109/ICDSN.2000.857554
   DERBEECK MV, 1994, LNCS, V863, P128
   DONG W, 2001, P 8 AS PAC SOFTW ENG
   *FORM SYST EUR LTD, 2003, FAIL DIV REF FDR2 US
   Gnesi S., 2004, P 2 ACIS INT C SOFTW
   GNESI S, 1999, HASE 99 4 IEEE INT S, P46
   HAREL D, 1987, SCI COMPUT PROGRAM, V8, P231, DOI 10.1016/0167-6423(87)90035-9
   Harel D, 2004, LECT NOTES COMPUT SC, V3147, P325
   Hoare CAR., 1985, Communicating Sequential Processes
   Lam VSW, 2001, 2001 AUSTRALIAN SOFTWARE ENGINEERING CONFERENCE, PROCEEDINGS, P213, DOI 10.1109/ASWEC.2001.948515
   McMillan K. L., 1993, Symbolic model checking
   Mikk E, 1999, 2ND IEEE WORKSHOP ON INDUSTRIAL STRENGTH FORMAL SPECIFICATION TECHNIQUES - PROCEEDINGS, P90, DOI 10.1109/WIFT.1998.766303
   Ng MY, 2003, I C SOFTW ENG FORM M, P138
   *OBJ MAN GROUP, 2003, OMG UN MOD LANG SPEC
   Object Management Group, 2002, OMG XML MET INT XMI
   PARNAS DL, 1972, COMMUN ACM, V15, P1053, DOI 10.1145/361598.361623
   Pingree PJ, 2004, LECT NOTES COMPUT SC, V3114, P466
   Roscoe A.W., 1998, THEORY PRACTICE CONC
   Roscoe AW., 1995, Tools and Algorithms for the Construction and Analysis of Systems, P133, DOI [10.1007/3-540-60630-0_7, DOI 10.1007/3-540-60630-0]
   ROSCOE B, 2003, COMPILING STATEMATE
   Schafer T., 2001, ELECT NOTES THEORETI, V47, P1
   Schinz I, 2004, PROCEEDINGS OF THE SECOND INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING AND FORMAL METHODS, P174, DOI 10.1109/SEFM.2004.1347518
   von der Beeck Michael., 2001, P 4 INT C UNIFIED MO, P406
   Wai Ming Ho, 1999, 14th IEEE International Conference on Automated Software Engineering, P275, DOI 10.1109/ASE.1999.802320
   Yeung WL, 2005, 12TH ASIA-PACIFIC SOFTWARE ENGINEERING CONFERENCE, PROCEEDINGS, P176, DOI 10.1109/APSEC.2005.70
   YEUNG WL, FORMALIZING UML STAT
NR 33
TC 6
Z9 9
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR 1
PY 2007
VL 65
IS 1
BP 14
EP 29
DI 10.1016/j.scico.2006.08.007
PG 16
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 144CB
UT WOS:000244771700004
DA 2024-07-18
ER

PT J
AU Bergstra, JA
   Klint, P
AF Bergstra, Jan A.
   Klint, Paul
TI About "trivial" software patents: the IsNot case
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE software patents; trivial patents; intellectual property rights;
   software engineering; patent life cycle; software engineering life
   cycle; open source software; prior am patent claims; patent policy
ID ALGEBRA
AB So-called "trivial" software patents undermine the patenting system and are detrimental for innovation. In this paper we use a case-based approach to get a better understanding of this phenomenon. First, we establish a baseline for studying the relation between software development and intellectual property rights by formulating a life cycle for the patenting system as well as three variations of the software life cycle: the defensive patent-aware software life cycle that prevents patent infringements, the more offensive patent-based software life cycle that aims both at preventing infringements and at creating new patents, and the IPR-based software life cycle that considers all forms of protection of intellectual property rights including copyright and secrecy.
   Next, we study an application for a software patent concerning the inequality operator and a granted European patent on memory managernent. We also briefly mention other examples of trivial patents. These examples serve to clarify the issues that arise when integrating patents in the software life cycle.
   In an extensive discussion, we cover the difference between expression and idea, the role of patent claims, software patents versus computer implemented inventions, the role of prior art, implications of software patents for open source software, for education, and for government-funded research. We conclude the discussion with the formulation of an "integrity axiom" for software patent authors and owners and sketch an agenda for software patent research.
   We conclude that patents are too important to be left to lawyers and economists and that a complete reinterpretation of the patenting system from a software engineering perspective is necessary to understand all ramifications of software patents. We end with explicit conclusions and policy recommendations. (c) 2006 Elsevier B.V. All rights reserved.
C1 Ctr Wiskunde Informat, Software Engn Dept, NL-1098 SJ Amsterdam, Netherlands.
   Univ Amsterdam, Inst Informat, NL-1012 WX Amsterdam, Netherlands.
   Univ Utrecht, Fac Philosophy, NL-3508 TC Utrecht, Netherlands.
C3 University of Amsterdam; Utrecht University
RP Klint, P (corresponding author), Ctr Wiskunde Informat, Software Engn Dept, Kruislaan 413, NL-1098 SJ Amsterdam, Netherlands.
EM janb@science.uva.nl
CR [Anonymous], PATENTS KNOWLEDGE BA
   *ANSI, 1977, X391978 ANSI
   *ANSI, 15391980 ANSI ISO
   BAKELS R, 2005, COMMUNICATION
   Bergstra J. A., 1989, ALGEBRAIC SPECIFICAT
   Bergstra JA, 1998, SCI COMPUT PROGRAM, V31, P205, DOI 10.1016/S0167-6423(97)00021-X
   Bergstra JA, 2002, J LOGIC ALGEBR PROGR, V51, P125, DOI 10.1016/S1567-8326(02)00018-8
   BERGSTRA JA, 1990, J ACM, V37, P335, DOI 10.1145/77600.77621
   BERGSTRA JA, 1998, QUESTIONES INFINITAE, V28
   BESSEN J, 2004, 0317R PHIL FED RES B
   *DIG EQ CORP, 1974, PDP1145 DIG EQ CORP
   Dijkstra EW., 1959, NUMER MATH, V1, P269, DOI [10.1007/BF01386390, DOI 10.1007/BF01386390]
   *FFII, SOFTW PT QUEST AN PR
   Gosling James, 1996, The Java Language Specification
   HALBERSZTADT J, 2001, REMARKS PATENTABILIT
   Hall B. H., 2000, PRODUCTIVITY, P177
   Hugenholtz P.B., 2002, PATENTABILITY COMPUT
   KERNIGHAM BW, 1978, C PROGRAMMING LANGUA
   Klint P, 2003, PROG COMPREHEN, P2
   LENING C, 2003, PATENT SEARCHING GLO
   MERRELL PE, 2005, COMMUNICATION
   MURPHY M, 2005, SEATTLE POST INTELLI
   PARK J, 2005, EVOLUTION IND KNOWLE
   PLOTKIN R, 2004, 0416 BOST U SCH LAW
   PLOTKIN R, 2003, INT REV LAW COMPUTER, V17
   SAMUELSON P, 1990, COMMUN ACM, V33, P23, DOI 10.1145/79173.79175
   VANDENBRAND MGJ, 2001, LECT NOTES COMPUTER, V2027, P365
   VANVLIET H, 2000, SOFTWARE ENG PRINCIP
   2003, CEPIS UPGRADE EUROPE, V4, P24
NR 29
TC 10
Z9 10
U1 0
U2 11
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 1
PY 2007
VL 64
IS 3
BP 264
EP 285
DI 10.1016/j.scico.2006.09.003
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 122SH
UT WOS:000243246500002
OA Bronze, Green Published
DA 2024-07-18
ER

PT J
AU Garg, A
   Kazman, R
   Chen, HM
AF Garg, Aditya
   Kazman, Rick
   Chen, Hong-Mei
TI Interface descriptions for enterprise architecture
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 4th International Workshop on Systems/Software Architectures
CY JUN, 2005
CL Las Vegas, NV
DE software architecture; enterprise architecture; architecture analysis
AB This paper describes our experiences in implementing a repository-based system that records and manages architectural information for an organization-wide set of enterprise information systems. The system is called Interface Descriptions for Enterprise Architecture (IDEA). The IDEA system business case and system creation are discussed, and the use of the system is exemplified by applying it to a set of information systems within a large corporation. We show how the existence of a managed enterprise architecture description enables an important set of analyses: risk analyses, architecture analyses, and change management analyses. Finally, we discuss how the IDEA system has the potential to catalyze even more profound change by changing how the various systems' stakeholders interact. (c) 2006 Published by Elsevier B.V.
C1 FedEx Corp, Dallas, TX USA.
   Univ Hawaii, Honolulu, HI 96822 USA.
C3 University of Hawaii System
RP Garg, A (corresponding author), FedEx Corp, Dallas, TX USA.
EM agarg@alumni.cmu.edu; kaziyian@sei.cmu.edu; hmchen@hawaii.edu
RI Chen, Hongmei/L-1798-2015
CR Aiken P, 1998, INFORM SYST MANAGE, V15, P55, DOI 10.1201/1078/43186.15.4.19980901/31151.8
   [Anonymous], P 17 INT C SOFTW ENG
   BENMENACHEM M, 2004, IEEE SOFTWARE    SEP
   Clements P., 2001, EVALUATING SOFTWARE
   Fox MS, 1998, AI MAG, V19, P109
   Hammer M., 1994, REENGINEERING CORPOR
   HENDERSON JC, 1993, IBM SYST J, V32, P4
   KAZMAN R, 1999, J AUTOMATED SOFTWARE, V6, P107, DOI DOI 10.1023/A:1008781513258
   Kettinger WJ, 1997, MIS QUART, V21, P55, DOI 10.2307/249742
   PAPAZOGLOU MP, 1999, INTELLIGENT INFORM A
   *STAT OFF, 2003, SOFTW ASS MAN
   van Deursen A, 2004, FOURTH WORKING IEEE/IFIP CONFERENCE ON SOFTWARE ARCHITECTURE (WICSA 2004), PROCEEDINGS, P122, DOI 10.1109/WICSA.2004.1310696
   WAND Y, P 9 WORKSH INF TECHN, P137
   Zachman J. A., 1987, IBM SYSTEMS J, V26
NR 14
TC 14
Z9 16
U1 0
U2 9
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN
PY 2006
VL 61
IS 1
BP 4
EP 15
DI 10.1016/j.scico.2005.11.001
PG 12
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 043QP
UT WOS:000237616700002
OA Bronze
DA 2024-07-18
ER

PT J
AU Holt, RC
   Schürr, A
   Sim, SE
   Winter, A
AF Holt, RC
   Schürr, A
   Sim, SE
   Winter, A
TI GXL:: A graph-based standard exchange format for reengineering
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE graph exchange language; graph-based tools; data interoperability;
   reengineering; XML
ID VISUALIZATION
AB GXL (Graph eXchange Language) is an XML-based standard exchange format for sharing data between tools. Formally, GXL represents typed, attributed, directed, ordered graphs which are extended to represent hypergraphs and hierarchical graphs. This flexible data model can be used for object-relational data and a wide variety of graphs. An advantage of GXL is that it can be used to exchange instance graphs together with their corresponding schema information in a uniform format. i.e. using a common document type specification. This paper describes GXL and shows how GXL is used to provide interoperability of graph-based tools. GXL has been ratified by reengineering and graph transformation research communities and is being considered for adoption by other communities. (c) 2005 Elsevier B.V. All rights reserved.
C1 Univ Waterloo, Sch Comp Sci, Waterloo, ON N2L 3G1, Canada.
   Tech Univ Darmstadt, Real Time Syst Lab, D-64283 Darmstadt, Germany.
   Univ Calif Irvine, Dept Informat, Irvine, CA 92697 USA.
   Univ Koblenz Landau, Inst Software Technol, D-56070 Koblenz, Germany.
C3 University of Waterloo; Technical University of Darmstadt; University of
   California System; University of California Irvine; University of
   Koblenz & Landau
RP Univ Waterloo, Sch Comp Sci, Waterloo, ON N2L 3G1, Canada.
EM holt@plg.uwaterloo.ca; andy.schuerr@es.tu-darmstadt.de; ses@ics.uci.edu;
   winter@uni-koblenz.de
CR Berge Claude, 1976, Graphs and Hypergraphs
   BISCHOFBERGER WR, 1992, USENIX C(PLUS-PLUS) TECHNICAL CONFERENCE PROCEEDINGS, P67
   BOWMAN IT, 1999, 1 INT S CONSTR SOFTW
   BRANDES U, 2001, LNCS, V2265, P501
   Brandes U, 2005, ELECTRON NOTES THEOR, V127, P113, DOI 10.1016/j.entcs.2004.12.037
   BUSATTO G, 2001, ABSTRACT MODEL HIERA
   Castello R., 2002, Journal of Graph Algorithms and Applications, V6, DOI 10.7155/jgaa.00056
   CHAOUIYA C, 2003, GINML GXL BASED FORM
   Chen KR, 2001, PROC IEEE INT CONF S, P230, DOI 10.1109/ICSM.2001.972736
   CHEN YF, 1990, IEEE T SOFTWARE ENG, V16, P325, DOI 10.1109/32.48940
   Chen YF, 1998, IEEE T SOFTWARE ENG, V24, P682, DOI 10.1109/32.713323
   Chen YFR, 1995, INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE, 1995 PROCEEDINGS, P66, DOI 10.1109/ICSM.1995.526528
   CREW RF, 1997, C DOM SPEC LANG SANT
   DAHM P, 1998, 1198 U KOBL LAND I I
   *DAT EXCH GROUP, 1998, M CASCON 1998
   Dean TR, 2001, EIGHTH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P59, DOI 10.1109/WCRE.2001.957810
   DEVANBU PT, 1992, 14TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING : PROCEEDINGS, P307
   EASTERBROOK S, 2001, CSC444F SOFTWARE ENG, V1
   EBERG J, 2001, INTEROPERABILITY REV
   Ebert J, 1998, SECOND EUROMICRO CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, PROCEEDINGS, P165, DOI 10.1109/CSMR.1998.665793
   Ebert J., 1999, Sixth Working Conference on Reverse Engineering (Cat. No.PR00303), P89, DOI 10.1109/WCRE.1999.806950
   EBERT J, ENTCS, V72
   EBERT J, 1996, LECT NOTES COMPUTER, V1157, P163
   *ECMA EUR COMP MAN, 1993, TR55 ECMA EUR COMP M
   Eichelberger H, 2002, LECT NOTES COMPUT SC, V2269, P295
   Fahmy H, 2000, PROC IEEE INT CONF S, P88, DOI 10.1109/ICSM.2000.883020
   Ferenc R, 2002, SIXTH EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, PROCEEDINGS, P59, DOI 10.1109/CSMR.2002.995790
   Ferenc R, 2001, EIGHTH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P49, DOI 10.1109/WCRE.2001.957809
   FERENC R, 2001, S PROGR LANG SOFTW T, P16
   FROHLICH M, 1996, DAVINCI V2 0X ONLINE
   Oechsle R, 2002, LECT NOTES COMPUT SC, V2269, P176
   OMMERING R, 1998, SOFTWARE PRACTICE EX, V28, P371
   *U ERL NURNB, DIAG DIAGR ED GEN
   WEISER M, 1984, IEEE T SOFTWARE ENG, V10, P352, DOI 10.1109/TSE.1984.5010248
   WORKSH DAGST SEM 030
   2000, 1 EU WORK GROUP APPL
NR 36
TC 36
Z9 40
U1 0
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD APR
PY 2006
VL 60
IS 2
BP 149
EP 170
DI 10.1016/j.scico.2005.10.003
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 019VA
UT WOS:000235863600004
DA 2024-07-18
ER

PT J
AU Umphress, DA
   Hendrix, TD
   Cross, JH
   Maghsoodloo, S
AF Umphress, DA
   Hendrix, TD
   Cross, JH
   Maghsoodloo, S
TI Software visualizations for improving and measuring the
   comprehensibility of source code
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE software visualization; control structure diagram; complexity profile
   graph; software comprehension; controlled experiments
AB Experiments were performed to measure the relationship of two software visualizations to software comprehension. The Control Structure Diagram (CSD) was examined for its influence on aiding the comprehension of software source code, and the Complexity Profile Graph (CPG) was examined for its ability to measure source code comprehensibility. Test subjects were asked to respond to questions regarding a code specimen written in Java. Statistical analysis of the data collected from the first experiment revealed that the CSD was highly significant in enhancing the subject's performance in this program comprehension task. Similar analysis of data collected from the second experiment showed that the measure of complexity calculated by the CPG correlated with the amount of time required to correctly understand the source code. The CPG was found to cue the software developer to complex portions of the code that might require special attention; the CSD was found to aid in understanding specific details of the code. The results of these experiments along with the planned follow-on experiments promise to shed light on fundamental questions regarding the role software visualizations can play in program comprehensibility. (c) 2005 Elsevier B.V. All rights reserved.
C1 Auburn Univ, Dept Comp Sci & Software Engn, Auburn, AL 36849 USA.
   Auburn Univ, Dept Ind & Syst Engn, Auburn, AL 36849 USA.
C3 Auburn University System; Auburn University; Auburn University System;
   Auburn University
RP Auburn Univ, Dept Comp Sci & Software Engn, 107 Dunstan Hall, Auburn, AL 36849 USA.
EM umphrda@auburn.edu
OI Maghsoodloo, Saeed/0000-0002-4072-5730
CR BARNES JGP, 1984, PROGRAMMING ADA
   CANT SN, 1995, INFORM SOFTWARE TECH, V37, P351, DOI 10.1016/0950-5849(95)91491-H
   Cross J. H.  II, 1998, Empirical Software Engineering, V3, P131, DOI 10.1023/A:1008085415145
   CURTIS B, 1989, J SYST SOFTWARE, V9, P167, DOI 10.1016/0164-1212(89)90019-8
   Goolkasian P, 1996, MEM COGNITION, V24, P584, DOI 10.3758/BF03201085
   Hendrix D, 2002, IEEE T SOFTWARE ENG, V28, P463, DOI 10.1109/TSE.2002.1000450
   HENDRIX TD, 1998, P SIGADA 98 WASH DC
   Koschke R, 2003, J SOFTW MAINT EVOL-R, V15, P87, DOI 10.1002/smr.270
   MCQUAID PA, 1994, THESIS AUBURN U
   Price B. A., 1993, Journal of Visual Languages and Computing, V4, P211, DOI 10.1006/jvlc.1993.1015
   ROMAN GC, 1992, P INT C SOFTW ENG, P412
   YANG J, 2001, THESIS AUBURN U
NR 12
TC 9
Z9 9
U1 0
U2 3
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD APR
PY 2006
VL 60
IS 2
BP 121
EP 133
DI 10.1016/j.scico.2005.10.001
PG 13
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 019VA
UT WOS:000235863600002
OA Bronze
DA 2024-07-18
ER

PT J
AU Denti, E
   Omicini, A
   Ricci, A
AF Denti, E
   Omicini, A
   Ricci, A
TI Multi-paradigm Java-Prolog integration in tuProlog
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Java; Prolog; language integration; reflection; agent infrastructures
AB tuProlog is a Java-based Prolog engine explicitly designed to be minimal, dynamically configurable, and support full and clean Prolog/Java integration. In this paper, we discuss the tuProlog approach to Prolog/Java multi-paradigm integration. After tuProlog motivations and requirements, we present some examples of bidirectional Prolog/Java integration and discuss the model and architecture of the tuProlog system. Then, we focus on the specific issue of the access to Java resources from tuProlog, discuss the essentials of its implementation, and compare it extensively with many other relevant related approaches and systems. (c) 2005 Elsevier B.V. All rights reserved.
C1 Univ Bologna, Alma Mater Studiorum, DEIS, I-40136 Bologna, Italy.
   Univ Bologna, Alma Mater Studiorum, DEIS, I-47023 Cesena, Italy.
C3 University of Bologna; University of Bologna
RP Denti, E (corresponding author), Univ Bologna, Alma Mater Studiorum, DEIS, Viale Risorgimento 2, I-40136 Bologna, Italy.
EM enrico.denti@unibo.it; andrea.omicini@unibo.it; a.ricci@unibo.it
RI Omicini, Andrea/G-5284-2013; Ricci, Alessandro/AFQ-1187-2022; Denti,
   Enrico/X-1803-2019
OI Omicini, Andrea/0000-0002-6655-3869; Ricci,
   Alessandro/0000-0002-9222-5092; Denti, Enrico/0000-0003-1687-8793
CR Bentley GE, 2001, BLAKE-ILLUSTRATED Q, V34, P129
   Benton N, 1999, ACM SIGPLAN NOTICES, V34, P126, DOI 10.1145/317765.317791
   Bothner Per, 1998, KAWA COMPILING SCHEM
   Denti E, 2001, AUTON AGENT MULTI-AG, V4, P139, DOI 10.1023/A:1010039317965
   DENTI E, RAMAKRISHNAN, P184
   Deransart Pierre., 1996, PROLOG
   FINNE S, 2000, ELECT NOTES THEORETI, V41
   IGARASHI A, 2002, LNCS, V2347
   Meehan G, 1999, SOFTWARE PRACT EXPER, V29, P617, DOI 10.1002/(SICI)1097-024X(199906)29:7<617::AID-SPE250>3.0.CO;2-E
   Omicini A., 1999, Autonomous Agents and Multi-Agent Systems, V2, P251, DOI 10.1023/A:1010060322135
   OMICINI A, 1994, LNCS, V821, P194
   RAMAKRISHNAN I, 2001, LNCS, V1990
   Reinke C, 1999, LECT NOTES COMPUT SC, V1595, P200
   Tarau P., 1998, INT WORKSH IMPL TECH, P1
   Tolksdorf Robert., 2008, PROGRAMMING LANGUAGE
   TYAGI S, RAMAKRISHNAN, P322
   WAKELING D, 1998, LNCS, V1490, P335
   [No title captured]
NR 18
TC 40
Z9 42
U1 0
U2 0
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD AUG
PY 2005
VL 57
IS 2
BP 217
EP 250
DI 10.1016/j.scico.2005.02.001
PG 34
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 949PY
UT WOS:000230801800004
DA 2024-07-18
ER

PT J
AU Fröhlich, PH
   Gal, A
   Franz, M
AF Fröhlich, PH
   Gal, A
   Franz, M
TI Supporting software composition at the programming language level
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE component-oriented software development; programming languages;
   distributed extensibility; language paradigms beyond object-oriented
   programming
AB We are in the midst of a paradigm shift toward component-oriented software development, and significant progress has been made in understanding and harnessing this new paradigm. Oddly enough. however, the new paradigm does not currently extend to the level at which components themselves are constructed. While we have composition architectures and languages that describe how systems are put together out of atomic program parts, the parts themselves are still constructed on the basis of a previous paradigm: object-oriented programming. We argue that this mismatch impedes the progress of compositional software design: many of the assumptions that underlie object-oriented languages simply do not apply in the open and dynamic contexts of component software environments. What, then, would a programming language that supported component-oriented programming at the smallest granularity look like? Lagoona, our project to develop such a language, tries to answer this question. This paper motivates the key concepts behind Lagoona and briefly describes their realization (using Lagoona itself as the implementation language) in the context of Microsoft's NET environment. (c) 2004 Elsevier B.V. All rights reserved.
C1 Univ Calif Riverside, Dept Comp Sci & Engn, Riverside, CA 92521 USA.
   Univ Calif Irvine, Sch Comp & Informat Sci, Irvine, CA USA.
C3 University of California System; University of California Riverside;
   University of California System; University of California Irvine
RP Univ Calif Riverside, Dept Comp Sci & Engn, Riverside, CA 92521 USA.
EM phf@acm.org
CR BOBROW DG, 1986, P C OBJ OR PROGR SYS, P17
   BUCHI M, 1998, P 13 ACM C OBJ OR PR, P362
   CARDELLI L, 1985, COMPUT SURV, V17, P471, DOI 10.1145/6041.6042
   CARDELLI L, 1989, 45 SRC
   Chambers C., 1997, CECIL LANGUAGE SPECI
   Czarnecki K., 2000, GEN PROGRAMMING METH
   ELLIS MA, 1990, ANNOTATED C REF MANU
   FINDLER RB, 1998, P 3 ACM SIGPLAN INT, P94
   Franz M, 1997, SOFTWARE-CONC TOOL, V18, P14
   FRANZ M, 1995, SOFTWARE-CONC TOOL, V16, P14
   Fröhlich PH, 2001, LECT NOTES COMPUT SC, V1897, P90
   FROHLICH PH, 2002, P INH WORKSH ECOOP T
   FROHLICH PH, 2001, NUCCS0106 COLL COMP, P15
   FROHLICH PH, 2003, THESIS SCH INF COMP
   Gamma E., 1994, Design patterns: Elements of reusable object-oriented software
   Gosling J., 2000, The Java Language Specification
   KICZALES G, 1997, P EUR C OBJ OR PROG
   Kistler T, 2003, ACM T PROGR LANG SYS, V25, P500, DOI 10.1145/778559.778562
   LAUFER K, 1998, CISRC698TR20 DEP COM
   Leavens G.T., 2000, FDN COMPONENT BASED
   Lindholm Tim., 1999, JAVA VIRTUAL MACHINE, V2nd
   LISKOV B, 1979, MITLCSTR225 MIT LAB
   McIlroy M.D., 1969, SOFTWARE ENG REPORT, V1, P138
   Meyer B., 1992, Eiffel: The Language
   Mikhajlov L, 1999, LECT NOTES COMPUT SC, V1709, P1301
   MIKHAJLOV L, 1998, LNCS, V1445, P355
   Millstein T, 1999, LECT NOTES COMPUT SC, V1628, P279
   MOSSENBOCK H, 1991, STRUCT PROGRAM, V12, P179
   MOSSENBOCK H, 1989, OBJECT OBERON OBJECT
   Murer S, 1996, ACM T PROGR LANG SYS, V18, P1, DOI 10.1145/225540.225541
   *OBJ MAN GROUP, 1999, COMM OBJ REQ BROK
   SNYDER A, 1986, SIGPLAN NOTICES, V21, P38, DOI 10.1145/960112.28702
   *SUN MICR, 1997, JAVABEANS SPEC VERS
   Szyperski C., 2002, Component Software-Beyond Object-Oriented Programming
   SZYPERSKI CA, 1992, LECT NOTES COMPUT SC, V615, P19, DOI 10.1007/BFb0053028
   Wirth N., 1992, Project Oberon: the design of an operating system and compiler
   WIRTH N, 1988, PRACTICE EXPERIENCE, V18, P671
NR 37
TC 4
Z9 4
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD APR
PY 2005
VL 56
IS 1-2
BP 41
EP 57
DI 10.1016/j.scico.2004.11.004
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 908SR
UT WOS:000227811000004
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Washizaki, H
   Fukazawa, Y
AF Washizaki, H
   Fukazawa, Y
TI A technique for automatic component extraction from object-oriented
   programs by refactoring
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE component-based development (CBD); refactoting; object-oriented
   programming; software reuse; software component; JavaBeans
AB Component-based software development (CBD) is based on building software systems from previously-existing software components. In CBD, reuse of common parts in component form can reduce the development cost of new systems, and reduce the maintenance cost associated with the support of these systems. However, existing programs have usually been built using another paradigm, such as the object-oriented (00) paradigm. 00 programs cannot be reused rapidly or effectively in the CBD paradigm even if they contain reusable functions. In this paper, we propose a technique for extracting components from existing 00 programs by our new refactoring "Extract Component". Our technique of refactoring can identify and extract reusable components composed of classes from 00 programs, and modify the surrounding parts of extracted components in original programs. We have developed a system that performs our refactoring automatically and extracts Java-Beans components from Java programs. As a result of evaluation experiments, it is found that our system is useful for extracting reusable components along with usage examples from Java programs. (c) 2004 Elsevier B.V. All rights reserved.
C1 Natl Inst Informat, Res Ctr Testbeds & Prototyping, Chiyoda Ku, Tokyo 1018430, Japan.
   Waseda Univ, Dept Comp Sci, Shinjuku Ku, Tokyo 1698555, Japan.
C3 Research Organization of Information & Systems (ROIS); National
   Institute of Informatics (NII) - Japan; Waseda University
RP Natl Inst Informat, Res Ctr Testbeds & Prototyping, Chiyoda Ku, 2-1-2 Hitotsubashi, Tokyo 1018430, Japan.
EM washizaki@acm.org; fukazawa@waseda.jp
RI 鷲崎, 弘宜/AAG-1448-2019
OI 鷲崎, 弘宜/0000-0002-1417-9879
CR BECK J, 1993, PROC INT CONF SOFTW, P509, DOI 10.1109/ICSE.1993.346015
   CHIDAMBER SR, 1994, IEEE T SOFTWARE ENG, V20, P476, DOI 10.1109/32.295895
   CIMITILE A, 1995, J SYST SOFTWARE, V28, P117, DOI 10.1016/0164-1212(94)00049-S
   DEMICHIEL LG, 2003, ENTERPRISE JAVA BEAN
   DOVAL D, 1999, P SOFTW TECHN ENG PR, P73
   Fowler M., 2018, Refactoring: Improving the Design of Existing Code
   GALL H, 1998, P 7 INT C INF PROC M, P726
   Gamma Erich., 1999, Design Patterns: Elements of Reusable Object-Oriented Software
   Gamma Erich., 1994, DESIGN PATTERNS
   Girard JF, 1997, PROCEEDINGS OF THE FOURTH WORKING CONFERENCE ON REVERSE ENGINEERING, P66, DOI 10.1109/WCRE.1997.624577
   HAMILTON G, 1997, JAVA BEANS 1 01 SPEC
   Hopkins J, 2000, COMMUN ACM, V43, P27, DOI 10.1145/352183.352198
   HUTCHENS DH, 1985, IEEE T SOFTWARE ENG, V11, P749, DOI 10.1109/TSE.1985.232524
   KOSCHKE R, 1999, P 6 WORK C REV ENG A, P256
   Larsen L, 1996, PROC INT CONF SOFTW, P495, DOI 10.1109/ICSE.1996.493444
   Lee JK, 2001, APSEC 2001: EIGHTH ASIA-PACIFIC SOFTWARE ENGINEERING CONFERENCE, PROCEEDINGS, P79
   Lehmann Erich Leo, 1975, Nonparametrics: statistical methods based on ranks
   Lindig C, 1997, PROC INT CONF SOFTW, P349, DOI 10.1145/253228.253354
   Lorenz DH, 2001, PROC INT CONF SOFTW, P253, DOI 10.1109/ICSE.2001.919099
   Muller H. A., 1993, Journal of Software Maintenance: Research and Practice, V5, P181, DOI 10.1002/smr.4360050402
   Opdyke W. F., 1992, Refactoring object-oriented frameworks
   Snelting G, 2000, ACM T PROGR LANG SYS, V22, P540, DOI 10.1145/353926.353940
   Song M., 2002, P 6 IASTED INT C SOF, P241
   SZYPERSKI C, 1999, COMPONENT SOFTWARE B
   Valasareddi RR, 1998, FIFTH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P50, DOI 10.1109/WCRE.1998.723175
   Washizaki H, 2003, NINTH INTERNATIONAL SOFTWARE METRICS SYMPOSIUM, PROCEEDINGS, P211, DOI 10.1109/METRIC.2003.1232469
NR 26
TC 23
Z9 25
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD APR
PY 2005
VL 56
IS 1-2
BP 99
EP 116
DI 10.1016/j.scico.2004.11.007
PG 18
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 908SR
UT WOS:000227811000007
DA 2024-07-18
ER

PT J
AU Broy, M
AF Broy, M
TI A semantic and methodological essence of message sequence charts
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
AB Message sequence charts (MSCs) are a technique to describe patterns of interaction between the components of interactive distributed systems by specific interaction diagrams. MSCs have evolved in telecommunication applications, defined as a standard, and have become very popular in the design of software architectures and, generally, of distributed or object-oriented software systems. They are used frequently to describe scenarios of interactions illustrating instances of use cases. Nevertheless, both the semantics of MSCs as a technique of specification and their methodological and technical role in the development process have not been precisely and sufficiently clarified, so far. Also their formalization, although tackled by a number of papers, is not well focused with respect to their methodological usage.
   In this paper, we suggest a semantic model for MSCs in terms of logical propositions characterizing stream-processing functions. This formalization allows us to apply MSCs as an intuitively clear specification technique with a precisely defined meaning. The MSCs provide, in particular, specifications for the components of a system. Our approach is in contrast to other semantic models for MSCs suggested in the literature (see Ladkin, Leue, in: R.L. Tenney et al. (Eds.), Formal Description Techniques VI, North-Holland, 1994, pp. 301-316, and Formal Aspects of Computing 7 (1995) 473-509) where the meaning of MSCs is explained using state transition machines or traces. We define the meaning of MSCs in a more abstract way by a logical technique specifying the components of a system. By this approach MSCs are used for the decomposition of systems into components. Along these lines, we discuss the systematic application of MSCs in the software development process. (C) 2004 Elsevier B.V All rights reserved.
C1 Tech Univ Munich, Inst Informat, D-80290 Munich, Germany.
C3 Technical University of Munich
RP Broy, M (corresponding author), Tech Univ Munich, Inst Informat, D-80290 Munich, Germany.
EM broy@in.tum.de
CR Alur R, 1996, SOFTWARE-CONC TOOL, V17, P70
   Alur R., 1996, 2 INT C TOOLS ALGORI, P35
   [Anonymous], 1991, OBJECT ORIENTED DESI
   [Anonymous], 1980, CALCULUS COMMUNICATI, DOI DOI 10.1007/3-540-10235-3
   [Anonymous], 1974, INFORM PROCESSING
   Ben-Abdallah H., 1997, 9704 U WAT DEP EL CO
   BENABDALLAH H, 1996, 9612 U WAT DEP EL CO
   BENABDALLAH H, 1997, P FORTE PSTV 97
   Berry G., 1988, 842 INRIA
   Booch G., 1997, Unified Modeling Language Semantics and Notation Guide 1.0
   Broy M, 1998, LECT NOTES COMPUT SC, V1536, P130, DOI 10.1007/3-540-49213-5_6
   Broy M., 1991, Formal Aspects of Computing, V3, P21, DOI 10.1007/BF01211434
   BROY M, 1997, TUMI9705 URL
   BROY M, 2003, FM2003 SAT WORKSH FO
   COBBEN JMH, 1998, 9719 CSR EINDH U TEC
   DAMM W, 1999, FMOODS 99
   Engels AG, 2002, SCI COMPUT PROGRAM, V44, P253, DOI 10.1016/S0167-6423(02)00022-9
   FACCHI C, 1996, THESIS TU MUNCHEN
   GRAUBMANN P, 1993, P 6 SDL FOR SDL 93 U
   GROSU R, 1999, 9914 TUMI
   Harel D., 2003, COME LETS PLAY SCENA, DOI 10.1007/978-3-642-19029-2
   Hennessy Matthew, 1980, LNCS, V85, P299, DOI DOI 10.1007/3-540-10003-2_79
   HINKEL U, 1998, THESIS TU MUNCHEN
   Hoare CAR., 1985, Communicating Sequential Processes
   HOARE CAR, 1981, TECHNICAL MONOGRAPH
   Holzmann GJ, 1997, BELL LABS TECH J, V2, P86, DOI 10.1002/bltj.2034
   Jacobsen I., 1992, OBJECT ORIENTED SOFT
   KAHN G, 1977, P IFIP 77, P994
   KLEIN C, 1997, ANFORDERUNGSSPEZIFIK
   Kruger I, 1999, P DIPES 98 KLUW
   KRUGER IH, 2000, THESIS TU MUNCHEN
   Ladkin P. B., 1995, Formal Aspects of Computing, V7, P473, DOI 10.1007/BF01211629
   LADKIN PB, 1994, FORMAL DESCRIPTION T, V6, P301
   MAUW S, 1994, COMPUT J, V37, P269, DOI 10.1093/comjnl/37.4.269
   MAUW S, 2001, HDB SOFTWARE ENG KNO, P437
   Rumbaugh J., 1991, OBJECT ORIENTED MODE
   RUMPE B, 1996, THESIS TU MUNCHEN
   SELIC B, 1996, 960514REV TR
   Selic B., 1994, REAL TIME OBJECT ORI
   ZAVE P, 1997, ACM T SOFTWARE E JAN
NR 40
TC 12
Z9 12
U1 0
U2 0
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB
PY 2005
VL 54
IS 2-3
BP 213
EP 256
DI 10.1016/j.scico.2004.04.003
PG 44
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 874ZC
UT WOS:000225388200002
DA 2024-07-18
ER

PT J
AU Wang, YM
   Verbowski, C
   Dunagan, J
   Chen, Y
   Wang, HJ
   Yuan, C
   Zhang, Z
AF Wang, YM
   Verbowski, C
   Dunagan, J
   Chen, Y
   Wang, HJ
   Yuan, C
   Zhang, Z
TI Strider: a black-box, state-based approach to change and configuration
   management and support
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
AB We describe a new approach, called Strider, to Change and Configuration Management and Support (CCMS). Strider is a black-box approach: without relying on specifications, it uses state differencing to identify potential causes of differing program behaviors, uses state tracing to identify actual, run-time state dependencies, and uses statistical behavior modeling for noise filtering. Strider is a state-based approach: instead of linking vague, high level descriptions and symptoms to relevant actions, it models management and support problems in terms of individual, named pieces of low level configuration state and provides precise mappings to user-friendly information through a computer genomics database. We use troubleshooting of configuration failures to demonstrate that the Strider approach reduces problem complexity by several orders of magnitude, making root-cause analysis possible. (C) 2004 Elsevier B.V. All rights reserved.
C1 Microsoft Res, Syst Management Grp, Redmond, WA USA.
   Microsoft Res Asia, Beijing, Peoples R China.
C3 Microsoft; Microsoft; Microsoft Research Asia
RP Microsoft Res, Syst Management Grp, Redmond, WA USA.
EM ymwang@microsoft.com
CR [Anonymous], P INT C DEP SYST NET
   Apap F., 2002, P 5 INT S REC ADV IN
   Bailey E., 1997, MAXIMUM RPM
   Burgess M, 1998, PROCEEDINGS OF THE TWELFTH SYSTEMS ADMINISTRATION CONFERENCE (LISA XII), P283
   BURGESS M, 1995, COMPUT SYST, V8, P309
   BURGESS M, 2002, P IFIP IEEE 13 INT W
   BURGESS M, 1998, SOFTWARE PRACITE EXP, V28
   Church K. W., 1991, Computer Speech and Language, V5, P19, DOI 10.1016/0885-2308(91)90016-J
   COUCH A, 1999, P LISA
   DEANIS C, 2001, HUMAN GENOME
   Engler D. R., 2001, P ACM S OP SYST PRIN
   GOOD IJ, 1953, BIOMETRIKA, V40, P237, DOI 10.2307/2333344
   GOTSCH V, 2001, P LISA
   HART J, 2002, P LISA
   KELLER A, 2002, J NETWORK SYSTEMS MA, V10
   LARSSON M, 2001, P INT C SOFTW ENG IC
   LIBLIT B, 2003, P ACM SIGPLAN 2003 C, P141
   OSTERLUND R, 2000, P LISA
   REDSTONE JA, 2003, P HOTOS
   SOLOMON DA, 2000, MICROSOFT WINDOWS 20
   SUN Y, 2001, P LISA
   TRAUGOTT S, 1998, P LISA
   WANG YM, 2003, P INT C DEP SYST NET
NR 23
TC 14
Z9 26
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV
PY 2004
VL 53
IS 2
BP 143
EP 164
DI 10.1016/j.scico.2003.12.009
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 858DB
UT WOS:000224169400003
DA 2024-07-18
ER

PT J
AU Hedin, G
   Magnusson, E
AF Hedin, G
   Magnusson, E
TI JastAdd - an aspect-oriented compiler construction system
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT Workshop on Language Descriptions, Tools and Applications
CY 2001
CL GENOA, ITALY
DE reference attributed grammars; aspect-oriented programming; compiler
   construction; visitor pattern; Java
AB We describe JastAdd, a Java-based system for compiler construction. JastAdd is centered around an object-oriented representation of the abstract syntax tree where reference variables can be used to link together different parts of the tree. JastAdd supports the combination of declarative techniques (using Reference Attributed Grammars) and imperative techniques (using ordinary Java code) in implementing the compiler. The behavior can be modularized into different aspects, e.g. name analysis, type checking, code generation, etc., that are woven together into classes using aspect-oriented programming techniques, providing a safer and more powerful alternative to the Visitor pattern. The JastAdd system is independent of the underlying parsing technology and supports any noncircular dependencies between computations, thereby allowing general multi-pass compilation. The attribute evaluator (optimal recursive evaluation) is implemented very conveniently using Java classes, interfaces, and virtual methods. (C) 2002 Elsevier Science B.V. All rights reserved.
C1 Lund Univ, Dept Comp Sci, S-22100 Lund, Sweden.
C3 Lund University
RP Hedin, G (corresponding author), Lund Univ, Dept Comp Sci, Box 118, S-22100 Lund, Sweden.
CR [Anonymous], PROGRAMMING LANGUAGE
   [Anonymous], 1996, Ph.D. Dissertation
   Bjarnason E., 1999, Nordic Journal of Computing, V6, P36
   DEMOOR O, 1999, S LECT NOTES COMPUTE, V1799, P121
   GAGNON EM, 1998, P TOOLS 26 US 98 IEE
   GAMMA E, 1995, DESIGN PATTERNS
   HARRISON W, 1993, SIGPLAN NOTICES, V28, P411, DOI 10.1145/167962.165932
   Hedin G., 1989, ECOOP '89. Proceedings of the 1989 European Conference on Object-Oriented Programming, P329
   Hedin G., 2000, Informatica, V24, P301
   JALILI F, 1983, ACM SIGPLAN NOTICES, V18, P35
   JOURDAN M, 1984, LECT NOTES COMPUT SC, V167, P167
   Kiczales G, 1997, LECT NOTES COMPUT SC, V1241, P220, DOI 10.1007/BFb0053381
   Kiczales Gregor, 2001, LNCS, V2072, P327, DOI DOI 10.1007/3-540-45337-718
   KNUDSEN JL, P ASP OR PROGR WORKS
   KRISTENSEN BB, 1983, INTEGRATED INTERACTI
   KUIPERS T, 2001, P LDTA 01 GEN IT APR
   Lieberherr K., 1996, ADAPTIVE OBJECT ORIE
   MADSEN OL, 1980, LECTURE NOTES COMPUT, V94, P259
   MADSEN OL, 1988, P HAW INT C SYST SCI, V21
   PoetzschHeffter A, 1997, ACTA INFORM, V34, P737, DOI 10.1007/s002360050105
   Woolf B., 1997, PATTERN LANGUAGES PR
NR 21
TC 79
Z9 86
U1 0
U2 0
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD APR
PY 2003
VL 47
IS 1
BP 37
EP 58
AR PII S0167-6423(02)00109-0
DI 10.1016/S0167-6423(02)00109-0
PG 22
WC Computer Science, Software Engineering
WE Conference Proceedings Citation Index - Science (CPCI-S); Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 644ED
UT WOS:000180904200003
DA 2024-07-18
ER

PT J
AU Mateescu, R
   Sighireanu, M
AF Mateescu, R
   Sighireanu, M
TI Efficient on-the-fly model-checking for regular alternation-free
   mu-calculus
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 5th ERCIM International Workshop on Forman Methods for Industrial
   Critical Systems (FMICS)
CY APR 03-04, 2000
CL BERLIN, GERMANY
SP GMD Res Inst Open Communicat Syst
DE boolean equation system; diagnostic; labeled transition system;
   model-checking; Mu-calculus; specification; temporal logic; verification
ID PROPOSITIONAL DYNAMIC LOGIC; TEMPORAL LOGIC; VERIFICATION; SYSTEMS
AB Model-checking is a successful technique for automatically verifying concurrent finite-state systems. When designing a model-checker, a good compromise must be made between the expressive power of the property description formalism, the complexity of the model-checking problem, and the user-friendliness of the interface. We present a temporal logic and an associated model-checking method that attempt to fulfill these criteria. The logic is an extension of the alternation-free mu-calculus with ACTL-like action formulas and PDL-like regular expressions, allowing a concise and intuitive description of safety, liveness, and fairness properties over labeled transition systems. The model-checking method is based upon a succinct translation of the verification problem into a boolean equation system, which is solved by means of an efficient local algorithm having a good average complexity. The algorithm also allows to generate full diagnostic information (examples and counterexamples) for temporal formulas. This method is at the heart of the EVALUATOR 3.0 model-checker that we implemented within the CADP toolbox using the generic OPEN/CAESAR environment for on-the-fly verification. (C) 2002 Elsevier Science B.V. All rights reserved.
C1 INRIA Rhone Alpes, VASY, F-38330 Montbonnot St Martin, France.
   Univ Paris 07, LIAFA, F-75251 Paris, France.
C3 Universite Paris Cite
RP INRIA Rhone Alpes, VASY, 655,Ave Europe, F-38330 Montbonnot St Martin, France.
EM radu.mateescu@inria.fr; mihaela.sighireanu@liafa.jussieu.fr
CR Allen Emerson E., 1986, LICS, P267
   ANDERSEN HR, 1994, THEOR COMPUT SCI, V126, P3, DOI 10.1016/0304-3975(94)90266-6
   [Anonymous], P 24 ACM S FDN COMP
   [Anonymous], 1996, ser. Lecture Notes in Computer Science
   ARNOLD A, 1988, INFORM PROCESS LETT, V29, P57, DOI 10.1016/0020-0190(88)90029-4
   ARTS T, 2001, P 6 INT WORKSH FORM, P131
   Bekic H., 1984, Programming Languages and Their Definition - Hans Bekic (1936-1982), P30, DOI [10.1007/BFb0048939, DOI 10.1007/BFB0048939]
   BRADFIELD J, 1992, VERIFYING TEMPORAL S
   Carreira P. J., 2000, FMICS, P345
   CLARKE E, 1996, LNCS, V1102, P419
   CLARKE EM, 1986, ACM T PROGR LANG SYS, V8, P244, DOI 10.1145/5397.5399
   CLEAVELAND R, 1992, LECT NOTES COMPUT SC, V575, P48
   CORNEJO MA, 2001, P 3 IFIP WG 6 1 INT, P229
   Dechering P, 2000, LECT NOTES COMPUT SC, V1906, P335
   DECHERING PFG, 2000, SENR0015 CWI
   Dill DavidL., 1996, P 8 INT C COMPUTER A, P390
   Dong YF, 1999, LECT NOTES COMPUT SC, V1579, P74
   Dwyer M. B., 1999, P 21 INT C SOFTW ENG
   Fantechi A, 1999, LECT NOTES COMPUT SC, V1641, P228
   FERNANDEZ JC, 1996, LECT NOTES COMPUTER, V1102, P437
   FERNANDEZ JC, 1996, LECT NOTES COMPUTER, V1102, P348
   FERNANDEZ JC, 1995, 9507 SPECTRE VERIMAG
   FISCHER MJ, 1979, J COMPUT SYST SCI, V18, P194, DOI 10.1016/0022-0000(79)90046-1
   GARAVEL H, 1990, PROTOCOL SPECIFICATION, TESTING, AND VERIFICATION, X, P379
   Garavel H, 1998, LECT NOTES COMPUT SC, V1384, P68
   GROOTE JF, P 6 INT WORKSH FORM, P1
   GROOTE JF, 1990, CSR9076 CWI
   HAMAGUCHI K, 1991, LECT NOTES COMPUT SC, V531, P253, DOI 10.1007/BFb0023739
   Holzmann GJ, 1997, IEEE T SOFTWARE ENG, V23, P279, DOI 10.1109/32.588521
   *ISO IEC, 1988, 8807 ISO IEC
   KOZEN D, 1983, THEOR COMPUT SCI, V27, P333, DOI 10.1016/0304-3975(82)90125-6
   LARSEN KG, 1988, LECT NOTES COMPUT SC, V299, P215
   Liu XX, 1998, LECT NOTES COMPUT SC, V1384, P5
   LOGRIPPO L, 1999, P 7 IFIP INT WORK C
   MADER A, 1997, 8 VERSAL
   Manna Z., 1992, The temporal logic of reactive and concurrent systems: specifications, V1
   Mateescu R, 2000, LECT NOTES COMPUT SC, V1785, P251
   Mateescu R., 1998, P 2 INT WORKSH VER M
   Nicola R.D., 1990, LECT NOTES COMPUTER, V469, P407
   Ramakrishna YS, 1997, LECT NOTES COMPUT SC, V1254, P143
   SAGE M, 1999, P 17 INT SYST SAF C
   SIMON D, 1998, INT J ROBOT RES, V17, P338
   STEFFEN B, 1994, INFORM COMPUT, V110, P149, DOI 10.1006/inco.1994.1028
   STREETT RS, 1982, INFORM CONTROL, V54, P121, DOI 10.1016/S0019-9958(82)91258-X
   THOMAS W, 1989, LECT NOTES COMPUT SC, V354, P690, DOI 10.1007/BFb0013041
   TRONCI E, 1995, IEEE S LOG, P408, DOI 10.1109/LICS.1995.523275
   VARDI MY, 1994, INFORM COMPUT, V115, P1, DOI 10.1006/inco.1994.1092
   VERGAUWEN B, 1994, LNCS, V820, P304
   WOLPER P, 1983, INFORM CONTROL, V56, P72, DOI 10.1016/S0019-9958(83)80051-5
NR 49
TC 71
Z9 74
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR
PY 2003
VL 46
IS 3
BP 255
EP 281
AR PII S0167-6423(02)00094-1
DI 10.1016/S0167-6423(02)00094-1
PG 27
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 634AF
UT WOS:000180317300004
OA Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Kurtev, I
   Hooman, J
   Schuts, M
   van der Munnik, D
AF Kurtev, Ivan
   Hooman, Jozef
   Schuts, Mathijs
   van der Munnik, Daan
TI Model based component development and analysis with ComMA
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Model-driven engineering; Interface modeling; Component modeling;
   Domain-specific languages; Component-based development
AB The lack of explicit and precise specifications of software interfaces between components often leads to integration issues during development and maintenance. To address this, we have developed a framework named ComMA (Component Modeling and Analysis) that supports modelbased engineering of high-tech systems by precisely defining components and their interfaces. The framework is a family of Domain Specific Languages (DSLs) for modeling component interfaces, protocol state machines, time and data constraints, and constraints on relations between events of multiple interfaces. From these models a number of artifacts can be generated automatically to support analysis and various engineering tasks. ComMA has been developed in close collaboration with the Philips IGT business unit that develops minimally-invasive X-ray systems. This paper presents the experience we gained in creating the ComMA framework and its application in industrial practice. We describe and reflect on the technical, organizational and process-related aspects of deploying a non-trivial MDE solution in an industrial setting.
C1 [Kurtev, Ivan] Eindhoven Univ Technol, Eindhoven, Netherlands.
   [Kurtev, Ivan] Capgemini Engn, Eindhoven, Netherlands.
   [Hooman, Jozef] TNO ESI, Eindhoven, Netherlands.
   [Schuts, Mathijs] Radboud Univ Nijmegen, Nijmegen, Netherlands.
   [Schuts, Mathijs; van der Munnik, Daan] Philips, Best, Netherlands.
C3 Eindhoven University of Technology; Radboud University Nijmegen; Philips
RP Kurtev, I (corresponding author), Eindhoven Univ Technol, Eindhoven, Netherlands.; Kurtev, I (corresponding author), Capgemini Engn, Eindhoven, Netherlands.
EM i.kurtev@tue.nl
OI Kurtev, Ivan/0009-0003-3783-405X
FU Netherlands Ministry of Economic Affairs and Climate [TKI-HTSM/23.0181]
FX The research is carried out as part of the "Model -Based Testing with
   ComMA" program under the responsibility of TNO-ESI in cooperation with
   Philips. The research activities are supported by the Netherlands
   Ministry of Economic Affairs and Climate, and TKI-HTSM/23.0181. Our
   thanks goes to Wytse Oortwijn for his valuable feedback on the
   manuscript and to the anonymous reviewers for their constructive
   suggestions that helped greatly to improve the structure and the content
   of the paper.
CR Afroozeh A., 2012, Lecture Notes in Computer Science, V7745, P224
   [Anonymous], 2009, SAE AS5506A
   [Anonymous], 2019, UML profile for MARTE (Modeling and Analysis of Real-Time and Embedded systems)
   [Anonymous], 2023, Language server protocol (LSP)
   Basu A., 2011, Lecture Notes in Computer Science, V7119, P1
   Baudry B, 2010, COMMUN ACM, V53, P139, DOI 10.1145/1743546.1743583
   Brambilla M., 2012, Model-Driven Software Engineering in Practice, DOI [DOI 10.1007/978-3-031-02549-5, 10.2200/S00441ED1V01Y201208SWE001, DOI 10.2200/S00441ED1V01Y201208SWE001]
   Broadfoot GH, 2005, LECT NOTES COMPUT SC, V3582, P548
   Butting A, 2018, SPLC'18: PROCEEDINGS OF THE 22ND INTERNATIONAL SYSTEMS AND SOFTWARE PRODUCT LINE CONFERENCE, VOL 1, P65, DOI 10.1145/3233027.3233037
   Ciccozzi F, 2019, 2019 ACM/IEEE 22ND INTERNATIONAL CONFERENCE ON MODEL DRIVEN ENGINEERING LANGUAGES AND SYSTEMS COMPANION (MODELS-C 2019), P425, DOI 10.1109/MODELS-C.2019.00068
   Codemotion, 2019, Domain-specific languages could scale up your code with ComMA
   Combemale Benoit, 2009, Journal of Software, V4, P943, DOI 10.4304/jsw.4.9.943-958
   de Alfaro L., 2001, Software Engineering Notes, V26, P109, DOI 10.1145/503271.503226
   Dezyne, 2022, about us
   Dwyer M. B., 1999, Proceedings of the 1999 International Conference on Software Engineering (IEEE Cat. No.99CB37002), P411, DOI 10.1109/ICSE.1999.841031
   Falcone Y., 2013, Eng. Dependable Softw. Syst., P141, DOI [10.3233/978-1- 61499-207-3-141, DOI 10.3233/978-1-61499-207-3-141]
   Falcone Y, 2021, INT J SOFTW TOOLS TE, V23, P255, DOI 10.1007/s10009-021-00609-z
   Falcone Y, 2015, SOFTW SYST MODEL, V14, P173, DOI 10.1007/s10270-013-0323-y
   Haber A., 2016, Montiarc-architectural modeling and simulation of interactive distributed systems
   Hatcliff J, 2012, ACM COMPUT SURV, V44, DOI 10.1145/2187671.2187678
   Hendriks D, 2022, Master's thesis
   Hilbrands B., 2022, CEUR Workshop Proceedings, V3170, P21
   Hoeijmakers T.P, 2022, Master's thesis
   Kähkönen K, 2009, LECT NOTES COMPUT SC, V5779, P93, DOI 10.1007/978-3-642-04694-0_7
   Kim H, 2013, PROCEDIA COMPUT SCI, V16, P98, DOI 10.1016/j.procs.2013.01.011
   Kurtev Ivan, 2022, A Journey from Process Algebra via Timed Automata to Model Learning: Essays Dedicated to Frits Vaandrager on the Occasion of His 60th Birthday. Lecture Notes in Computer Science (13560), P382, DOI 10.1007/978-3-031-15629-8_21
   Kurtev Ivan, 2017, ModelEd, TestEd, TrustEd - Essays Dedicated to Ed Brinksma on the Occasion of His 60th Birthday. LNCS 10500, P335, DOI 10.1007/978-3-319-68270-9_17
   Kurtev I, 2017, MODELSWARD: PROCEEDINGS OF THE 5TH INTERNATIONAL CONFERENCE ON MODEL-DRIVEN ENGINEERING AND SOFTWARE DEVELOPMENT, P345, DOI 10.5220/0006133103450352
   Larson Brian R., 2013, NASA Formal Methods. 5th International Symposium, NFM 2013. Proceedings, P276, DOI 10.1007/978-3-642-38088-4_19
   Leavens G., 2003, DESIGN CONTRACT JML
   Leucker M, 2009, J LOGIC ALGEBR PROGR, V78, P293, DOI 10.1016/j.jlap.2008.08.004
   Ölveczky PC, 2010, LECT NOTES COMPUT SC, V6117, P47, DOI 10.1007/978-3-642-13464-7_5
   Pommereau F, 2015, LECT NOTES COMPUT SC, V9115, P254, DOI 10.1007/978-3-319-19488-2_13
   POOSL, 2023, early validation by simulation
   POTTS C, 1993, IEEE SOFTWARE, V10, P19, DOI 10.1109/52.232392
   Roos N, 2020, Bits & Chips
   Cuadrado JS, 2020, J OBJECT TECHNOL, V19, DOI 10.5381/jot.2020.19.2.a10
   Schuts M, 2017, Improving interface specifications with ComMA, Bits & Chips
   Sirius, 2023, About us
   Staal K, 2016, Integrating textual and graphical editing
   Systems Modeling Language (SysML), 2017, about us
   Unified Modeling Language (UML), 2017, about us
   UP4ALL, 2015, Uppsala, Uppaal
   Xtend, 2015, about us
   Xtext, 2015, about us
NR 45
TC 0
Z9 0
U1 1
U2 5
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR
PY 2024
VL 233
AR 103067
DI 10.1016/j.scico.2023.103067
EA NOV 2023
PG 14
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CM5D1
UT WOS:001125671200001
OA Green Published, hybrid
DA 2024-07-18
ER

PT J
AU Tvardovskii, A
   El-Fakih, K
   Yevtushenko, N
AF Tvardovskii, Aleksandr
   El-Fakih, Khaled
   Yevtushenko, Nina
TI Testing and incremental conformance testing of timed state machines
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Conformance testing; Model-based testing; Incremental regression
   testing; Software evolution and maintenance; Timed finite state machines
ID PROTOCOL; COVERAGE; FAULTS
AB We present methods for testing and incremental testing of systems modeled as finite state machines with timeouts (TFSMs). For testing, we establish an appropriate fault model and show how a complete test suite can be derived for a given TFSM specification using traditional FSM-based test derivation approaches considering an untimed FSM abstraction of the given specification. In addition, we consider reducing the cost of testing a modified or an evolving TFSM specification by the selection of appropriate incremental test suites that can verify whether the modified parts of a modified specification are correctly implemented in a corresponding implementation under test. In particular, we define the incremental testing problem for TFSMs and investigate appropriate fault models that can be used for incremental test derivation and accordingly propose related test selection algorithms. According to conducted experiments length and run time (sum of time delays) of obtained test suites are much lower than their theoretic upper bounds; in some cases, these bounds are linear. In addition, for incremental testing, when the modified part is up to 20% of the whole specification, length and run time of incremental test suites are at least twice as less than those obtained using the whole modified specification.
C1 [Tvardovskii, Aleksandr] Natl Res Tomsk State Univ, Tomsk, Russia.
   [El-Fakih, Khaled] Amer Univ Sharjah, Coll Engn, Sharjah, U Arab Emirates.
   [Yevtushenko, Nina] Ivannikov Inst Syst Programming RAS, Moscow, Russia.
C3 Tomsk State University; American University of Sharjah; Ivannikov
   Institute for System Programming of the RAS
RP El-Fakih, K (corresponding author), Amer Univ Sharjah, Coll Engn, Sharjah, U Arab Emirates.
EM tvardal@mail.ru; kelfakih@aus.edu; evtushenko@ispras.ru
FU RSF [22-29-01189]; AUS FRG19-M Grant
FX This work was partly supported by the RSF project 22-29-01189 and AUS
   FRG19-M Grant.
CR [Anonymous], 1992, RFC793
   [Anonymous], 1999, Testing Object-Oriented Systems: Models, Patterns, and Tools
   Bin Waez MT, 2013, COMPUT SCI REV, V9, P1, DOI 10.1016/j.cosrev.2013.05.001
   Bresolin D, 2021, FORM METHOD SYST DES, V59, P77, DOI 10.1007/s10703-022-00396-6
   Bresolin D, 2014, ELECTRON PROC THEOR, P203, DOI 10.4204/EPTCS.161.18
   Chen W. H., 2011, PROC FORMAL TECHN NE, P285
   CHOW TS, 1978, IEEE T SOFTWARE ENG, V4, P178, DOI 10.1109/TSE.1978.231496
   Dorofeeva R, 2010, INFORM SOFTWARE TECH, V52, P1286, DOI 10.1016/j.infsof.2010.07.001
   El-Fakih K, 2022, SOFTW TEST VERIF REL, V32, DOI 10.1002/stvr.1789
   El-Fakih K, 2004, IEEE T SOFTWARE ENG, V30, P425, DOI 10.1109/TSE.2004.31
   El-Fakih KA, 2012, PROGRAM COMPUT SOFT+, V38, P201, DOI 10.1134/S0361768812040019
   El-Fakih K, 2014, SCI COMPUT PROGRAM, V80, P343, DOI 10.1016/j.scico.2013.09.008
   El-Fakih K, 2009, LECT NOTES COMPUT SC, V5826, P66, DOI 10.1007/978-3-642-05031-2_5
   En-Nouaary A, 2002, IEEE T SOFTWARE ENG, V28, P1023, DOI 10.1109/TSE.2002.1049402
   Endo AT, 2013, INFORM SOFTWARE TECH, V55, P1045, DOI 10.1016/j.infsof.2013.01.001
   Fontana P, 2014, ACM COMPUT SURV, V46, DOI 10.1145/2518102
   Friedman A., 1971, Computer Applications in Electrical Engineering Series
   FUJIWARA S, 1991, IEEE T SOFTWARE ENG, V17, P591, DOI 10.1109/32.87284
   Gill A., 1962, Introduction to the Theory of Finite-State Machines
   Haydar M, 2004, LECT NOTES COMPUT SC, V3235, P115
   Heerink L, 2000, INT FED INFO PROC, V48, P211
   Hessel Anders, 2008, Formal Methods and Testing. An Outcome of the FORTEST Network. Revised Selected Papers, P77, DOI 10.1007/978-3-540-78917-8_3
   Hierons RM, 2004, IEEE T COMPUT, V53, P1330, DOI 10.1109/TC.2004.85
   Hierons RM, 2009, J LOGIC ALGEBR PROGR, V78, P98, DOI 10.1016/j.jlap.2008.06.001
   Hogrefe D., 1992, Tech. Rep. IAM- 91-012
   Huang WL, 2017, FORM ASP COMPUT, V29, P335, DOI 10.1007/s00165-016-0402-2
   Jin Hyun Kim, 2015, Formal Methods for Industrial Critical Systems. 20th International Workshop, FMICS 2015. Proceedings: LNCS 9128, P47, DOI 10.1007/978-3-319-19458-5_4
   Lee D, 1996, P IEEE, V84, P1090, DOI 10.1109/5.533956
   Lee D, 1996, IEEE T COMMUN, V44, P631, DOI 10.1109/26.494307
   LEE D, 1994, IEEE T COMPUT, V43, P306, DOI 10.1109/12.272431
   Merayo MG, 2008, COMPUT NETW, V52, P432, DOI 10.1016/j.comnet.2007.10.002
   PETRENKO A, 1994, IFIP TRANS C, V19, P363
   Petrenko A, 2005, IEEE T COMPUT, V54, P1154, DOI 10.1109/TC.2005.152
   Pomeranz I, 1997, IEEE T COMPUT, V46, P783, DOI 10.1109/12.599899
   rfc -editor, RFC1350,
   Schmaltz J, 2008, LECT NOTES COMPUT SC, V5215, P250, DOI 10.1007/978-3-540-85778-5_18
   Shabaldina N, 2015, PROCEEDINGS OF 2015 IEEE EAST-WEST DESIGN & TEST SYMPOSIUM (EWDTS)
   Simao A, 2009, IET SOFTW, V3, P91, DOI 10.1049/iet-sen.2008.0018
   Simao A, 2012, SOFTW TEST VERIF REL, V22, P435, DOI 10.1002/stvr.452
   Springintveld J, 2001, THEOR COMPUT SCI, V254, P225, DOI 10.1016/S0304-3975(99)00134-6
   Tretmans G., 1992, Ph.D. thesis
   Tvardovskii A, 2018, LECT NOTES COMPUT SC, V11146, P149, DOI 10.1007/978-3-319-99927-2_13
   Utting M, 2012, SOFTW TEST VERIF REL, V22, P297, DOI 10.1002/stvr.456
   Vasilevskii M. P., 1973, FAILURE DIAGNOSIS AU
   von Bochmann G., 1994, SIGSOFT Software Engineering Notes, P109
   Zhigulin M., 2011, Proceedings of the 11th International Conference on Quality Software (QSIC 2011), P141, DOI 10.1109/QSIC.2011.30
NR 46
TC 1
Z9 1
U1 1
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR
PY 2024
VL 233
AR 103053
DI 10.1016/j.scico.2023.103053
EA NOV 2023
PG 18
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA IG4K3
UT WOS:001165161100001
DA 2024-07-18
ER

PT J
AU Arshad, H
   Horne, R
   Johansen, C
   Owe, O
   Willemse, TAC
AF Arshad, Hamed
   Horne, Ross
   Johansen, Christian
   Owe, Olaf
   Willemse, Tim A. C.
TI XACML2mCRL2: Automatic transformation of XACML policies into mCRL2
   specifications
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE XACML; mCRL2; Formal verification; Access control
AB The eXtensible Access Control Markup Language (XACML) is a popular OASIS standard for the specification of fine-grained access control policies. However, the standard does not provide a proper solution for the verification of XACML access control policies before their deployment. The first step for the formal verification of XACML policies is to formally specify such policies. Hence, this paper presents XACML2mCRL2, a tool for the automatic translation of XACML access control policies into mCRL2. The mCRL2 specifications generated by our tool can be used for formal verification of important properties of access control policies, such as completeness or inconsistency, using the well-known mCRL2 toolset.
C1 [Arshad, Hamed; Owe, Olaf] Univ Oslo, Oslo, Norway.
   [Horne, Ross] Univ Strathclyde, Comp & Informat Sci, Glasgow, Scotland.
   [Johansen, Christian] Norwegian Univ Sci & Technol, Gjovik, Norway.
   [Willemse, Tim A. C.] Eindhoven Univ Technol, Eindhoven, Netherlands.
C3 University of Oslo; University of Strathclyde; Norwegian University of
   Science & Technology (NTNU); Eindhoven University of Technology
RP Arshad, H (corresponding author), Univ Oslo, Oslo, Norway.
EM hamedar@ifi.uio.no; ross.horne@strath.ac.uk; christian.johansen@ntnu.no;
   olaf@ifi.uio.no; T.A.C.Willemse@tue.nl
RI Arshad, Hamed/D-3598-2017
OI Arshad, Hamed/0000-0003-3885-7408
CR Ahmadi S, 2020, SOFT COMPUT, V24, P16081, DOI 10.1007/s00500-020-04925-5
   Arshad H., 2022, GitHub repository for "Process algebra can save lives: static analysis of XACML access control policies using mCRL2
   Arshad H, 2022, LECT NOTES COMPUT SC, V13273, P11, DOI 10.1007/978-3-031-08679-3_2
   Bunte O, 2019, LECT NOTES COMPUT SC, V11428, P21, DOI 10.1007/978-3-030-17465-1_2
   Clark J., 1999, XSL Transformations (XSLT) Version 1.0, P1
   Groote JF, 2014, MODELING AND ANALYSIS OF COMMUNICATING SYSTEMS, P1
   Groote JF, 2021, LECT NOTES COMPUT SC, V12719, P226, DOI 10.1007/978-3-030-78089-0_15
   Groote JF, 2020, LECT NOTES COMPUT SC, V12018, P25, DOI 10.1007/978-3-030-40914-2_2
   Parducci Bill., 2013, OASIS Standard, P1
NR 9
TC 0
Z9 0
U1 2
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR
PY 2024
VL 232
AR 103046
DI 10.1016/j.scico.2023.103046
EA OCT 2023
PG 10
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA Y7SC9
UT WOS:001107212400001
OA Green Published, hybrid, Green Accepted
DA 2024-07-18
ER

PT J
AU Yohannis, A
   Kolovos, D
   García-Domínguez, A
AF Yohannis, Alfa
   Kolovos, Dimitris
   Garcia-Dominguez, Antonio
TI Exploring complex models with picto web
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Complex models; Model exploration; Picto web; Visualisation
AB Picto Web is a multi-tenant web-based tool for complex model exploration. It can transform different types of models into a variety of transient web-based views in formats such as HTML, Graphviz and PlantUML using rule-based model-to-text transformations. Picto Web implements a lazy view computation approach to support large models and complex transformations efficiently, and includes model and transformation template monitoring and push notification facilities to automatically recompute views when either are modified and deliver updated views to clients. The tool is packaged as a Docker container for ease of deployment.
C1 [Yohannis, Alfa; Kolovos, Dimitris; Garcia-Dominguez, Antonio] Univ York, York, England.
C3 University of York - UK
RP Yohannis, A (corresponding author), Univ York, York, England.
EM alfa.ryano@gmail.com
RI Garcia Dominguez, Antonio/IAN-2064-2023
OI Garcia Dominguez, Antonio/0000-0002-4744-9150; Yohannis,
   Alfa/0000-0003-4425-3731
FU HICLASS InnovateUK project [113213]
FX The work in this paper has been funded through the HICLASS InnovateUK
   project (contract no. 113213) .
CR Boccara N, 2010, GRAD TEXTS PHYS, P1, DOI 10.1007/978-1-4419-6562-2
   Eclipse, 2022, Eclipse layout kernel (elk)
   Eclipse Foundation, 2022, Documentation: Eclipse Graphical Language Server Platform
   Klosterman RE, 2012, ENVIRON PLANN B, V39, P1, DOI 10.1068/b38155
   Kolovos D., 2020, P 23 INT C MOD DRIV, P12, DOI [10.1145/3365438.3410943, DOI 10.1145/3365438.3410943]
   Ogunyomi B, 2019, SOFTW SYST MODEL, V18, P367, DOI 10.1007/s10270-018-0666-5
   Rose LM, 2008, LECT NOTES COMPUT SC, V5095, P1, DOI 10.1007/978-3-540-69100-6_1
   Schneider C, 2013, S VIS LANG HUM CEN C, P75, DOI 10.1109/VLHCC.2013.6645246
   Sprotty, 2022, eclipse/sprotty: a diagramming framework for the web
   Yohannis A, 2022, ACM/IEEE 25TH INTERNATIONAL CONFERENCE ON MODEL DRIVEN ENGINEERING LANGUAGES AND SYSTEMS, MODELS 2022 COMPANION, P56, DOI 10.1145/3550356.3559094
NR 10
TC 0
Z9 0
U1 1
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN
PY 2024
VL 232
AR 103037
DI 10.1016/j.scico.2023.103037
EA OCT 2023
PG 7
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA Y1IW4
UT WOS:001102884100001
OA hybrid, Green Accepted
DA 2024-07-18
ER

PT J
AU Gobert, M
   Meurice, L
   Cleve, A
AF Gobert, Maxime
   Meurice, Loup
   Cleve, Anthony
TI Modeling, manipulating and evolving hybrid polystores with HyDRa
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Polystores; Data modeling; Code generation
AB Data-intensive system evolution is a complex and error-prone process, as most evolution scenarios impact several interdependent artefacts such as the application code, the data structures or data instances. This process is becoming even more challenging with the emergence of heterogeneous database architectures, commonly called hybrid polystores, that rely on a combination of several, possibly overlapping relational and NoSQL databases. This paper presents HyDRa, a framework aiming to facilitate the design, the manipulation and evolution of polystores thanks to (1) a novel modeling language representing conceptually and physically the databases and (2) an automatically generated conceptual data access API (Application Programming Interface). HyDRa automatically enforces cross-database data integrity constraints, does not require developers to master multiple data models and query languages and protect application code from schema and data reconfiguration changes.& COPY; 2023 Elsevier B.V. All rights reserved.
C1 [Gobert, Maxime; Meurice, Loup; Cleve, Anthony] Univ Namur, Namur Digital Inst, Namur, Belgium.
C3 University of Namur
RP Gobert, M (corresponding author), Univ Namur, Namur Digital Inst, Namur, Belgium.
EM maxime.gobert@unamur.be
FU F.R.S.-FNRS; FWO via the EOS project [30446992 SECO-ASSIST]
FX This research is supported by the F.R.S.-FNRS and FWO via the EOS
   project 30446992 SECO-ASSIST.
CR [Anonymous], 6 RUL THUMB MONG SCH
   [Anonymous], SPRING DAT RED RETW
   [Anonymous], CASS DAT MOD BEST PR
   [Anonymous], HBAS SCHEM CAS STUD
   Basciani F., 2020, MODELS 20 ACM IEEE 2, DOI [/10.1145/3417990.3421999, DOI 10.1145/3417990.3421999]
   Benats P, 2021, LECT NOTES COMPUT SC, V13011, P87, DOI 10.1007/978-3-030-89022-3_8
   Bugiotti F, 2014, LECT NOTES COMPUT SC, V8824, P223, DOI 10.1007/978-3-319-12206-9_18
   Chao Zhang, 2019, Performance Evaluation and Benchmarking for the Era of Artificial Intelligence. 10th TPC Technology Conference, TPCTC 2018. Revised Selected Papers: Lecture Notes in Computer Science (LNCS 11135), P7, DOI 10.1007/978-3-030-11404-6_2
   de Lima C. a., 2015, Proceedings of the 17th International Conference on Information Integration and Web-Based Applications Services, P1
   Gobert M., 2021, HYDRA REPOSITORY
   Gobert M., 2022, SANER
   Gobert M., 2021, ER
   Holubova I., 2019, ER 2019
   Khurana A., 2012, CISC VIS NETW IND GL
   Pokorny J., IDEAS16
   Rossel G., 2017, Database Syst. J, V8, P12
   Roy-Hubara N., 2020, SOSYM
   Sadalage P.J., 2013, NoSQL distilled: a brief guide to the emerging world of polyglot persistence
   Storl U., 2015, BTW
NR 19
TC 0
Z9 0
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD AUG
PY 2023
VL 230
AR 102972
DI 10.1016/j.scico.2023.102972
EA JUN 2023
PG 7
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA N2TI7
UT WOS:001035595200001
DA 2024-07-18
ER

PT J
AU Kamburjan, E
   Scaletta, M
   Rollshausen, N
AF Kamburjan, Eduard
   Scaletta, Marco
   Rollshausen, Nils
TI Deductive verification of active objects with Crowbar
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Deductive verification; Symbolic execution; Active objects
ID BEHAVIORAL TYPES
AB We present Crowbar, a deductive verification tool for the Active Object language ABS. Crowbar implements novel specification approaches specifically for distributed systems. For user interaction, counterexamples are presented as executable programs. Crowbar has a modular structure to explore further approaches, and was applied in the largest Active Objects verification study. (c) 2023 The Author(s). Published by Elsevier B.V. This is an open access article under the CC BY license (http://creativecommons .org /licenses /by /4 .0/).
C1 [Kamburjan, Eduard] Univ Oslo, Oslo, Norway.
   [Scaletta, Marco; Rollshausen, Nils] Tech Univ Darmstadt, Darmstadt, Germany.
C3 University of Oslo; Technical University of Darmstadt
RP Kamburjan, E (corresponding author), Univ Oslo, Oslo, Norway.
EM eduard@ifi.uio.no; scaletta@cs.tu-darmstadt.de;
   nils.rollshausen@stud.tu-darmstadt.de
RI Rollshausen, Nils/KUJ-2100-2024
OI Rollshausen, Nils/0000-0003-2445-8684; Kamburjan,
   Eduard/0000-0002-0996-2543
CR Ahrendt Wolfgang, 2016, LNCS, V10001
   Albert E, 2014, SERV ORIENTED COMPUT, V8, P323, DOI 10.1007/s11761-013-0148-0
   Ancona D, 2016, FOUND TRENDS PROGRAM, V3, pI, DOI 10.1561/2500000031
   [Anonymous], CLOC TOOL VERSION 1
   Bagherzadeh M, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428282
   Barnett M., 2005, LECT NOTES COMPUT SC, V4111
   Beckert Bernhard, 2013, Automated Deduction - CADE-24. 24th International Conference on Automated Deduction. Proceedings: LNCS 7898, P315, DOI 10.1007/978-3-642-38574-2_22
   Beckert B, 2001, LECT NOTES COMPUT SC, V2041, P6
   Bezirgiannis N, 2019, LECT NOTES COMPUT SC, V11424, P332, DOI 10.1007/978-3-030-16722-6_20
   Bjork J, 2013, INNOV SYST SOFTW ENG, V9, P29, DOI 10.1007/s11334-012-0184-5
   Bubel R, 2019, LECT NOTES COMPUT SC, V11918, P83, DOI 10.1007/978-3-030-34968-4_5
   Bubel R, 2015, LECT NOTES ARTIF INT, V9323, P307, DOI 10.1007/978-3-319-24312-2_21
   C. Consortium, 2019, COMP
   Clarke D., 2011, S FORM METH COMP OBJ, V6957, P204
   De Boer F, 2017, ACM COMPUT SURV, V50, DOI 10.1145/3122848
   de Gouw S, 2019, J AUTOM REASONING, V62, P93, DOI 10.1007/s10817-017-9426-4
   de Gouw S, 2015, LECT NOTES COMPUT SC, V9206, P273, DOI 10.1007/978-3-319-21690-4_16
   Din Crystal Chang, 2015, Formal Methods and Software Engineering. 17th International Conference on Formal Engineering Methods (ICFEM 2015). Proceedings: LNCS 9407, P217, DOI 10.1007/978-3-319-25423-4_14
   Din CC, 2015, LECT NOTES ARTIF INT, V9195, P517, DOI 10.1007/978-3-319-21401-6_35
   Din CC, 2015, FORM ASP COMPUT, V27, P551, DOI 10.1007/s00165-014-0322-y
   Din CC, 2014, J LOG ALGEBR METHODS, V83, P360, DOI 10.1016/j.jlamp.2014.03.003
   Filliâtre JC, 2013, LECT NOTES COMPUT SC, V7792, P125, DOI 10.1007/978-3-642-37036-6_8
   Gordon CS, 2019, PROCEEDINGS OF THE 9TH ACM SIGPLAN INTERNATIONAL WORKSHOP ON PROGRAMMING BASED ON ACTORS, AGENTS, AND DECENTRALIZED CONTROL (AGERE '19), P11, DOI 10.1145/3358499.3361221
   HOARE CAR, 1969, COMMUN ACM, V12, P576, DOI 10.1145/363235.363259
   Honda K, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P273, DOI 10.1145/2827695
   Johnsen E.B., 2010, LNCS, P142, DOI 10.1007/978-3-642-25271-6_8
   Kamburjan Eduard, 2017, Reliability, Safety, and Security of Railway Systems. Modelling, Analysis, Verification, and Certification. Second International Conference, RSSRail 2017. Proceedings LNCS 10598, P131, DOI 10.1007/978-3-319-68499-4_9
   Kamburjan E., 2020, THESIS TU DARMSTADT
   Kamburjan E., 2022, RIGHT KIND NONDETERM, V365, P1
   Kamburjan E., 2021, HSCC 21
   Kamburjan E., 2020, BEHAV CONTRACTS COOP
   Kamburjan E, 2019, Arxiv, DOI arXiv:1906.05704
   Kamburjan E, 2019, LECT NOTES ARTIF INT, V11714, P391, DOI 10.1007/978-3-030-29026-9_22
   Kamburjan E, 2018, LECT NOTES COMPUT SC, V11023, P214, DOI 10.1007/978-3-319-98938-9_13
   Kamburjan E, 2018, SCI COMPUT PROGRAM, V166, P167, DOI 10.1016/j.scico.2018.07.001
   Kamburjan E, 2016, LECT NOTES COMPUT SC, V10009, P296, DOI 10.1007/978-3-319-47846-3_19
   Kamburjan Eduard, 2018, ECEASST, V76, DOI DOI 10.14279/TUJ.ECEASST.76.1070
   Kuiter E, 2022, VAMOS'22: 16TH INTERNATIONAL WORKING CONFERENCE ON VARIABILITY MODELLING OF SOFTWARE-INTENSIVE SYSTEMS, DOI 10.1145/3510466.3511272
   Leavens G.T., 2013, JML Reference Manual
   Lin J., 2018, INT CON ADV INFO NET, P407
   Lin JC, 2016, LECT NOTES COMPUT SC, V9633, P49, DOI 10.1007/978-3-662-49665-7_4
   Mitsch S., 2020, Deductive Software Verification: Future Perspectives: Reflections on the Occasion of 20 Years of KeY, P21
   Pardo Raul, 2022, POLYM CHEM-UK, V13572, P369
   Platzer A, 2012, IEEE S LOG, P541, DOI 10.1109/LICS.2012.64
   Rollshausen N., 2021, THESIS TU DARMSTADT
   Scaletta Marco, 2021, GPCE 2021: Proceedings of the 20th ACM SIGPLAN International Conference on Generative Programming: Concepts and Experiences, P69, DOI 10.1145/3486609.3487200
   Schlatte Rudolf, 2021, Coordination Models and Languages. 23rd IFIP WG 6.1 International Conference, COORDINATION 2021 Held as Part of the 16th International Federated Conference on Distributed Computing Techniques, DisCoTec 2021. Proceedings. Lecture Notes in Computer Science (LNCS 12717), P3, DOI 10.1007/978-3-030-78142-2_1
   Schlatte Rudolf, 2018, Its All About Coordination - Essays to Celebrate the Lifelong Scientific Achievements of Farhad Arbab. Lecture Notes in Computer Science (LNCS 10865), P107, DOI 10.1007/978-3-319-90089-6_8
   Sirjani M, 2005, J UNIVERS COMPUT SCI, V11, P1054
   Sirjani M, 2004, FUND INFORM, V63, P385
   Turin Gianluca, 2020, Leveraging Applications of Formal Methods, Verification and Validation. Verification. Principles. 9th International Symposium on Leveraging Applications of Formal Methods, ISoLA 2020. Proceedings. Lecture Notes in Computer Science (LNCS 12476), P558, DOI 10.1007/978-3-030-61362-4_32
   Wasser N, 2021, SCI COMPUT PROGRAM, V204, DOI 10.1016/j.scico.2020.102597
NR 52
TC 2
Z9 2
U1 1
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR
PY 2023
VL 226
AR 102928
DI 10.1016/j.scico.2023.102928
EA FEB 2023
PG 10
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA E3WS3
UT WOS:000974888100001
OA hybrid
DA 2024-07-18
ER

PT J
AU Mammar, A
   Afendi, M
   Laleau, R
AF Mammar, Amel
   Afendi, Meryem
   Laleau, Regine
TI Modeling and proving hybrid programs with EVENT-B: An approach by
   generalization and instantiation
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Cyber-physical system; Hybrid system; Refinement; Differential
   refinement logic; Correctness proof
ID SYSTEMS; KEYMAERA
AB Hybrid systems are one of the most common mathematical models for Cyber-Physical Systems (CPSs). They combine discrete dynamics represented by state machines or finite automata with continuous behaviors represented by differential equations. The measurement of continuous behaviors is performed by sensors. When these sensors have a continuous access to these measurements, this kind of model is called an Event-Triggered model. The properties of such models are easier to prove, while their implementation is difficult in practice. Therefore, it is preferable to introduce a more concrete kind of model, called Time-Triggered models, where the sensors take periodic measurements. Contrary to Event-Triggered models, Time-Triggered models are much easier to implement, but much more difficult to verify. Based on the differential refinement logic (dRL), a dynamic logic for refinement relations on hybrid systems, it is possible to prove that a Time-Triggered model refines an Event-Triggered model. However, being done by hand, this proof is error -prone since no prover is available to support this logic. To overcome this limit, this paper introduces another correct-by-construction approach to prove this refinement, based on EVENT-B to take advantage of its well-defined refinement process and its support tools. We use the RODIN platform to develop EVENT-B models and its associated provers (automatic and interactive) to ensure their correctness. The obtained EVENT-B models are generic and can be then instantiated to model and prove any specific CPS. The proposed approach is illustrated by two frequently used CPS case studies. (C) 2022 Elsevier B.V. All rights reserved.
C1 [Mammar, Amel] Inst Polytech Paris, Telecom SudParis, SAMOVAR, Paris, France.
   [Afendi, Meryem; Laleau, Regine] Univ Paris Est Creteil, LACL, F-94010 Creteil, France.
C3 IMT - Institut Mines-Telecom; Institut Polytechnique de Paris; Telecom
   SudParis; Universite Paris-Est-Creteil-Val-de-Marne (UPEC)
RP Mammar, A (corresponding author), Inst Polytech Paris, Telecom SudParis, SAMOVAR, Paris, France.
EM amel.mammar@telecom-sudparis.eu; meryem.afendi@u-pec.fr; laleau@u-pec.fr
OI MAMMAR, AMEL/0000-0003-0016-6898
FU French National Research Agency (Agence Nationale de la Recherche ANR)
   [ANR-17-CE25-0005]; Agence Nationale de la Recherche (ANR)
   [ANR-17-CE25-0005] Funding Source: Agence Nationale de la Recherche
   (ANR)
FX This work is partially supported by grant ANR-17-CE25-0005 (the DISCONT
   project [23] ) from the French National Research Agency (Agence
   Nationale de la Recherche ANR) .
CR Abrial J R, 2010, Modeling in Event-B: system and softeng
   Afendi Meryem, 2020, Rigorous State-Based Methods. 7th International Conference, ABZ 2020. Proceedings. Lecture Notes in Computer Science (LNCS 12071), P139, DOI 10.1007/978-3-030-48077-6_10
   Armstrong A, 2016, FORM ASP COMPUT, V28, P265, DOI 10.1007/s00165-015-0343-1
   Banach R, 2018, SCI COMPUT PROGRAM, V156, P21, DOI 10.1016/j.scico.2017.12.011
   Banach R, 2017, INT J SOFTW TOOLS TE, V19, P205, DOI 10.1007/s10009-015-0409-7
   Banach R, 2015, SCI COMPUT PROGRAM, V105, P92, DOI 10.1016/j.scico.2015.02.003
   Bohrer B, 2017, PROCEEDINGS OF THE 6TH ACM SIGPLAN CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS, CPP'17, P208, DOI 10.1145/3018610.3018616
   Buga A, 2018, COMPUT LANG SYST STR, V54, P297, DOI 10.1016/j.cl.2018.07.004
   Butler M., 2016, MODELLING REFINING H
   Butler M., 2010, MATH EXTENSION EVENT
   Chaochen Z., 1995, International Hybrid Systems Workshop, P511
   Cheng Z, 2020, THESIS U LORRAINE IN
   DISCONT ANR Project, US
   Dupont Guillaume, 2018, Abstract State Machines, Alloy, B, TLA, VDM, and Z. 6th International Conference, ABZ 2018. Proceedings: LNCS 10817, P155, DOI 10.1007/978-3-319-91271-4_11
   EBRP ANR Project, US
   Foster S, 2020, LECT NOTES COMPUT SC, V12062, P169, DOI 10.1007/978-3-030-43520-2_11
   Fulton N, 2015, LECT NOTES ARTIF INT, V9195, P527, DOI 10.1007/978-3-319-21401-6_36
   HOARE CAR, 1978, COMMUN ACM, V21, P666, DOI 10.1145/359576.359585
   Huerta J.J., 2019, VERIFICATION COMPONE
   Jifeng H., 1994, A Classical Mind, Essays in Honour of C.A.R. Hoare, P171
   KOPETZ H, 1991, LECT NOTES COMPUT SC, V563, P87
   Lee EA, 2008, ISORC 2008: 11TH IEEE SYMPOSIUM ON OBJECT/COMPONENT/SERVICE-ORIENTED REAL-TIME DISTRIBUTED COMPUTING - PROCEEDINGS, P363, DOI 10.1109/ISORC.2008.25
   Liu J, 2010, LECT NOTES COMPUT SC, V6461, P1, DOI [10.1109/PCSPA.2010.9, 10.1007/978-3-642-17164-2_1]
   Loos SM, 2016, PROCEEDINGS OF THE 31ST ANNUAL ACM-IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE (LICS 2016), P505, DOI 10.1145/2933575.2934555
   Mammar A., US
   Mitsch S., 2019, ARCH20, V20, P141
   MORGAN C, 1990, SERIES COMPUTER SCI
   Platzer A, 2008, LECT NOTES ARTIF INT, V5195, P171, DOI 10.1007/978-3-540-71070-7_15
   Platzer A, 2017, J AUTOM REASONING, V59, P219, DOI 10.1007/s10817-016-9385-1
   Quesel JD, 2016, INT J SOFTW TOOLS TE, V18, P67, DOI 10.1007/s10009-015-0367-0
   Su W, 2014, SCI COMPUT PROGRAM, V94, P164, DOI 10.1016/j.scico.2014.04.015
   van Beek DA, 2006, J LOGIC ALGEBR PROGR, V68, P129, DOI 10.1016/j.jlap.2005.10.005
   Zimmermann P., 2018, Computational mathematics with SageMath
   Zou L., 2013, P INT C EMBEDDED SOF, P1
NR 34
TC 0
Z9 0
U1 0
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 1
PY 2022
VL 222
AR 102856
DI 10.1016/j.scico.2022.102856
EA AUG 2022
PG 26
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 4N6NR
UT WOS:000854135700004
OA hybrid
DA 2024-07-18
ER

PT J
AU AlOmar, EA
   Christians, B
   Busho, M
   AlKhalid, AH
   Ouni, A
   Newman, C
   Mkaouer, MW
AF AlOmar, Eman Abdullah
   Christians, Ben
   Busho, Mihal
   AlKhalid, Ahmed Hamad
   Ouni, Ali
   Newman, Christian
   Mkaouer, Mohamed Wiem
TI SATDBailiff-mining and tracking self-admitted technical debt
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Self-admitted technical debt; Mining software repositories
AB Self-Admitted Technical Debt (SATD) is a metaphorical concept to describe the self documented addition of technical debt to a software project in the form of source code comments. SATD can linger in projects and degrade source-code quality, but it can also be more visible than unintentionally added or undocumented technical debt. Understanding the implications of adding SATD to a software project is important because developers can benefit from a better understanding of the quality trade-offs they are making. However, empirical studies, analyzing the survivability and removal of SATD comments, are challenged by potential code changes or SATD comment updates that may interfere with properly tracking their appearance, existence, and removal. In this paper, we propose SATDBailiff, a tool that uses an existing state-of-the-art SATD detection tool, to identify SATD in method comments, then properly track their lifespan. SATDBailiff is given as input links to open source projects, and its output is a list of all identified SATDs, and for each detected SATD, SATDBailiff reports all its associated changes, including any updates to its text, all the way to reporting its removal. The goal of SATDBailiff is to aid researchers and practitioners in better tracking SATDs instances, and providing them with a reliable tool that can be easily extended. SATDBailiff was validated using a dataset of previously detected and manually validated SATD instances. SATDBailiff is publicly available as an open source, along with the manual analysis of SATD instances associated with its validation, on the project website.1 (c) 2021 Elsevier B.V. All rights reserved.
C1 [AlOmar, Eman Abdullah; Christians, Ben; Busho, Mihal; AlKhalid, Ahmed Hamad; Newman, Christian; Mkaouer, Mohamed Wiem] Rochester Inst Technol, Rochester, NY 14623 USA.
   [Ouni, Ali] Univ Quebec, ETS Montreal, Montreal, PQ, Canada.
C3 Rochester Institute of Technology; University of Quebec; Ecole de
   Technologie Superieure - Canada; University of Quebec Montreal
RP Mkaouer, MW (corresponding author), Rochester Inst Technol, Rochester, NY 14623 USA.
EM eman.alomar@mail.rit.edu; bbc7909@rit.edu; mb5185@rit.edu;
   aa5130@rit.edu; ali.ouni@etsmtl.ca; cdnvse@rit.edu; mwmvse@rit.edu
RI AlOmar, Eman Abdullah/ABW-2622-2022; Ouni, Ali/Y-8280-2019; Mkaouer,
   Mohamed Wiem/N-7476-2017
OI AlOmar, Eman Abdullah/0000-0003-1800-9268; Ouni,
   Ali/0000-0003-4708-0362; Mkaouer, Mohamed Wiem/0000-0001-6010-7561;
   Newman, Christian/0000-0002-8838-4074
CR [Anonymous], 2018, EMPIR SOFTW ENG, DOI DOI 10.1007/s10664-017-9522-4
   Bavota G, 2016, 13TH WORKING CONFERENCE ON MINING SOFTWARE REPOSITORIES (MSR 2016), P315, DOI [10.1109/MSR.2016.040, 10.1145/2901739.2901742]
   Cunningham W., 1993, OOPS Messenger, V4, P29
   Farias MAD, 2020, INFORM SOFTWARE TECH, V121, DOI 10.1016/j.infsof.2020.106270
   Iammarino M, 2019, PROC IEEE INT CONF S, P186, DOI 10.1109/ICSME.2019.00029
   Kruchten P, 2012, IEEE SOFTWARE, V29, P18, DOI 10.1109/MS.2012.167
   Liu ZX, 2018, PROC IEEE ACM INT C, P9, DOI 10.1145/3183440.3183478
   Maldonado ED, 2017, PROC IEEE INT CONF S, P238, DOI 10.1109/ICSME.2017.8
   Maldonado ED, 2015, 2015 IEEE 7TH INTERNATIONAL WORKSHOP ON MANAGING TECHNICAL DEBT (MTD) PROCEEDINGS, P9, DOI 10.1109/MTD.2015.7332619
   Maldonado ED, 2017, IEEE T SOFTWARE ENG, V43, P1044, DOI 10.1109/TSE.2017.2654244
   Potdar A, 2014, PROC IEEE INT CONF S, P91, DOI 10.1109/ICSME.2014.31
   Wehaibi S, 2016, 2016 IEEE 23RD INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER), VOL 1, P179, DOI 10.1109/SANER.2016.72
   Zampetti F, 2020, PROCEEDINGS OF THE 2020 IEEE 27TH INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER '20), P355, DOI [10.1109/SANER48275.2020.9054868, 10.1109/saner48275.2020.9054868]
   Zampetti F, 2018, IEEE WORK CONF MIN S, P526, DOI 10.1145/3196398.3196423
NR 14
TC 7
Z9 15
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 1
PY 2022
VL 213
AR 102693
DI 10.1016/j.scico.2021.102693
EA SEP 2021
PG 18
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA WK4MQ
UT WOS:000709701700001
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Jain, S
   Saha, A
AF Jain, Shivani
   Saha, Anju
TI Improving performance with hybrid feature selection and ensemble machine
   learning techniques for code smell detection
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Code smell; Machine learning; Ensemble machine learning; Hybrid feature
   selection; Stacking
ID CLASSIFIER; REGRESSION; DESIGN
AB Maintaining large and complex software is a significant task in IT industry. One reason for that is the development of code smells which are design flaws that lead to future bugs and errors. Code smells can be treated with regular refactoring, and their detection is the first step in the software maintenance process. Detecting code smells with machine learning algorithms eliminate the need of extensive knowledge required regarding properties of code smell and threshold values. Ensemble machine learning algorithms use a combination of several same or different classifiers to further aid the performance and reduces the variance. In our study, three hybrid feature selection techniques with ensemble machine learning algorithms are employed to improve the performance in detecting code smells. Seven machine learning classifiers with different kernel variations, along with three boosting designs, two stacking methods, and bagging were implemented. For feature selection, combination of filter-wrapper, filter-embedded, and wrapper-embedded methods have been executed. Performance measures for detecting four code smells are evaluated and are compared with the performance when feature selection is not employed. It is found out that performance measure after application of hybrid feature selection increased, accuracy by 21.43%, AUC value by 53.24%, and f-measure by 76.06%. Univariate ROC with Lasso is the best hybrid feature selection technique with 90.48% accuracy and 94.5% ROC AUC value. Random Forest and Logistic regression are the best performing machine learning classifiers. Data class is most detectable code smell. Stacking always gave better results when compared with individual classifiers. (C) 2021 Elsevier B.V. All rights reserved.
C1 [Jain, Shivani; Saha, Anju] GGS Indraprastha Univ, USIC&T, Sect 16 C, Delhi 110078, India.
C3 GGS Indraprastha University
RP Saha, A (corresponding author), GGS Indraprastha Univ, USIC&T, Sect 16 C, Delhi 110078, India.
EM shivani.1091@gmail.com; anju_kochhar@yahoo.com
RI Jain, Shivani/AAU-1672-2020
OI Jain, Shivani/0000-0001-8856-0675
CR Abdelwahab M, 2017, INT CONF ACOUST SPEE, P5000, DOI 10.1109/ICASSP.2017.7953108
   Agrawal RK, 2020, APPL SOFT COMPUT, V89, DOI 10.1016/j.asoc.2020.106092
   Ali U., 2020, INT J MOD ED COMPUT, V12
   Amari S, 1999, NEURAL NETWORKS, V12, P783, DOI 10.1016/S0893-6080(99)00032-5
   [Anonymous], 2008, FEATURE EXTRACTION F
   [Anonymous], IJCAI 2001 WORKSHOP
   [Anonymous], 2010, 2010 IEEE International Conference on Software Maintenance, DOI [10.1109/ICSM.2010.5609564, DOI 10.1109/ICSM.2010.5609564]
   [Anonymous], 2018, REFACTORING IMPROVIN
   Azeem MI, 2019, INFORM SOFTWARE TECH, V108, P115, DOI 10.1016/j.infsof.2018.12.009
   Benesty J, 2009, SPRINGER TOP SIGN PR, V2, P37, DOI 10.1007/978-3-642-00296-0_5
   Breiman L., 2001, Machine Learning, V45, P5, DOI 10.1023/A:1010933404324
   Breiman L, 1996, MACH LEARN, V24, P123, DOI 10.1007/bf00058655
   Chandrashekar G, 2014, COMPUT ELECTR ENG, V40, P16, DOI 10.1016/j.compeleceng.2013.11.024
   Chawla NV, 2002, J ARTIF INTELL RES, V16, P321, DOI 10.1613/jair.953
   Chen TQ, 2016, KDD'16: PROCEEDINGS OF THE 22ND ACM SIGKDD INTERNATIONAL CONFERENCE ON KNOWLEDGE DISCOVERY AND DATA MINING, P785, DOI 10.1145/2939672.2939785
   Chiew KL, 2019, INFORM SCIENCES, V484, P153, DOI 10.1016/j.ins.2019.01.064
   Coleman Cody, 2019, ACM SIGOPS Operating Systems Review, V53, P14, DOI 10.1145/3352020.3352024
   Conover W. J., 1998, PRACTICAL NONPARAMET, V3rd
   Di Nucci D, 2018, 2018 25TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION AND REENGINEERING (SANER 2018), P612, DOI 10.1109/SANER.2018.8330266
   Du XD, 2020, APPL SOFT COMPUT, V97, DOI 10.1016/j.asoc.2020.106758
   Faris H, 2020, PROG ARTIF INTELL, V9, P31, DOI 10.1007/s13748-019-00197-9
   Fernandes E, 2016, PROCEEDINGS OF THE 20TH INTERNATIONAL CONFERENCE ON EVALUATION AND ASSESSMENT IN SOFTWARE ENGINEERING 2016 (EASE '16), DOI 10.1145/2915970.2915984
   Fontana FA, 2016, EMPIR SOFTW ENG, V21, P1143, DOI 10.1007/s10664-015-9378-4
   Fontana FA, 2013, PROC IEEE INT CONF S, P396, DOI 10.1109/ICSM.2013.56
   Freund Y., 1996, Machine Learning. Proceedings of the Thirteenth International Conference (ICML '96), P148
   Freund Y, 1997, J COMPUT SYST SCI, V55, P119, DOI 10.1006/jcss.1997.1504
   Friedman J., 2001, ELEMENTS STAT LEARNI, V1, DOI DOI 10.1007/978-0-387-84858-7
   Friedman JH, 2001, ANN STAT, V29, P1189, DOI 10.1214/aos/1013203451
   Friedman JH, 2002, COMPUT STAT DATA AN, V38, P367, DOI 10.1016/S0167-9473(01)00065-2
   Ganea G, 2017, SCI COMPUT PROGRAM, V134, P19, DOI 10.1016/j.scico.2015.02.007
   GEMAN S, 1992, NEURAL COMPUT, V4, P1, DOI 10.1162/neco.1992.4.1.1
   Guyon I., 2003, Journal of Machine Learning Research, V3, P1157, DOI 10.1162/153244303322753616
   Hall M., 2009, ACM SIGKDD Explor. Newsl, V11, P18, DOI DOI 10.1145/1656274.1656278
   Hall M.A., 1999, P 17 INT C MACHINE L, P359
   Hall MA, 2003, IEEE T KNOWL DATA EN, V15, P1437, DOI 10.1109/TKDE.2003.1245283
   Hassaine S, 2010, QUATIC 2010: SEVENTH INTERNATIONAL CONFERENCE ON THE QUALITY OF INFORMATION AND COMMUNICATIONS TECHNOLOGY, P343, DOI 10.1109/QUATIC.2010.61
   Hengpraprohm S, 2020, INTELIGENCIA ARTIFIC, V23, P100, DOI 10.4114/intartif.vol23iss65pp100-114
   Hesterberg T, 2008, STAT SURV, V2, P61, DOI 10.1214/08-SS035
   Ho T. K., 2002, SERIES MACHINE PERCE, V47, P171
   HO TK, 1994, IEEE T PATTERN ANAL, V16, P66, DOI 10.1109/34.273716
   Jain S., 2019, SOFTW ENG KNOWL ENG
   Jain S., EVOL INTELL, P1
   Jeon H, 2020, APPL SCI-BASEL, V10, DOI 10.3390/app10093211
   Jiarpakdee J, 2020, EMPIR SOFTW ENG, V25, P3590, DOI 10.1007/s10664-020-09848-1
   Jinny S.V., 2020, HEALTH TECHNOL-GER, P1
   Jovic A, 2015, 2015 8TH INTERNATIONAL CONVENTION ON INFORMATION AND COMMUNICATION TECHNOLOGY, ELECTRONICS AND MICROELECTRONICS (MIPRO), P1200, DOI 10.1109/MIPRO.2015.7160458
   Kaur A, 2017, 2017 INTERNATIONAL CONFERENCE ON MACHINE LEARNING AND DATA SCIENCE (MLDS 2017), P9, DOI 10.1109/MLDS.2017.8
   Khomh F, 2011, J SYST SOFTWARE, V84, P559, DOI 10.1016/j.jss.2010.11.921
   Khomh F, 2009, INT CONF QUAL SOFTW, P305, DOI 10.1109/QSIC.2009.47
   Kiziloz HE, 2021, NEUROCOMPUTING, V419, P97, DOI 10.1016/j.neucom.2020.07.113
   Kohavi R, 1997, ARTIF INTELL, V97, P273, DOI 10.1016/S0004-3702(97)00043-X
   Kursa MB, 2010, J STAT SOFTW, V36, P1, DOI 10.18637/jss.v036.i11
   Langelier G., 2005, Proc. IEEE/ACM Automated Software Engineering, P214
   Le NQK, 2020, J PERS MED, V10, DOI 10.3390/jpm10030128
   Levner I, 2005, BMC BIOINFORMATICS, V6, DOI 10.1186/1471-2105-6-68
   Li H., 2012, P 5 WORKSH REF TOOLS, P32, DOI [10.1145/2328876.2328881, DOI 10.1145/2328876.2328881]
   Liao YH, 2002, COMPUT SECUR, V21, P439, DOI 10.1016/S0167-4048(02)00514-X
   Liu Y, 2017, EXPERT SYST APPL, V80, P323, DOI 10.1016/j.eswa.2017.03.042
   López V, 2014, INFORM SCIENCES, V257, P1, DOI 10.1016/j.ins.2013.09.038
   Lopez-Rincon A, 2020, CANCERS, V12, DOI 10.3390/cancers12071785
   Ma Y, 2012, ENSEMBLE MACHINE LEARNING: METHODS AND APPLICATIONS, P1, DOI 10.1007/978-1-4419-9326-7
   Madasu A, 2020, MULTIMED TOOLS APPL, V79, P6313, DOI 10.1007/s11042-019-08409-z
   Maiga A., 2012, 2012 19th Working Conference on Reverse Engineering (WCRE), P466, DOI 10.1109/WCRE.2012.56
   Maneerat N., 2011, Proceedings of the Eighth International Joint Conference on Computer Science and Software Engineering (JCSSE 2011), P331, DOI 10.1109/JCSSE.2011.5930143
   Mäntylä MV, 2006, EMPIR SOFTW ENG, V11, P395, DOI 10.1007/s10664-006-9002-8
   Marinescu R, 2004, PROC IEEE INT CONF S, P350, DOI 10.1109/ICSM.2004.1357820
   Mens T, 2004, IEEE T SOFTWARE ENG, V30, P126, DOI 10.1109/TSE.2004.1265817
   Menze BH, 2009, BMC BIOINFORMATICS, V10, DOI 10.1186/1471-2105-10-213
   Mitchell R, 2017, PEERJ COMPUT SCI, DOI 10.7717/peerj-cs.127
   Moha N, 2010, IEEE T SOFTWARE ENG, V36, P20, DOI 10.1109/TSE.2009.50
   Navot A, 2006, LECT NOTES COMPUT SC, V3940, P127
   Pecorelli F, 2020, J SYST SOFTWARE, V169, DOI 10.1016/j.jss.2020.110693
   Pecorelli F, 2019, INT C PROGRAM COMPRE, P93, DOI 10.1109/ICPC.2019.00023
   Pedregosa F, 2011, J MACH LEARN RES, V12, P2825
   Peng CYJ, 2002, J EDUC RES, V96, P3, DOI 10.1080/00220670209598786
   Polikar R., 2006, IEEE Circuits and Systems Magazine, V6, P21, DOI 10.1109/MCAS.2006.1688199
   Prasad R, 2018, SOIL TILL RES, V181, P63, DOI 10.1016/j.still.2018.03.021
   PUDIL P, 1994, PATTERN RECOGN LETT, V15, P1119, DOI 10.1016/0167-8655(94)90127-9
   Rani N., 2020, J. Theor. Appl. Inf. Technol., V98, P624
   Rao P.S., 2020, EXPERT SYST APPL
   Rodriguez-Galiano VF, 2018, SCI TOTAL ENVIRON, V624, P661, DOI 10.1016/j.scitotenv.2017.12.152
   Saeys Y, 2008, LECT NOTES ARTIF INT, V5212, P313, DOI 10.1007/978-3-540-87481-2_21
   Shen L, 2020, ASIA PAC SOFWR ENG, P276, DOI 10.1109/APSEC51365.2020.00036
   Silwattananusarn T., 2020, ARXIV PREPRINT ARXIV
   Sokolova M, 2009, INFORM PROCESS MANAG, V45, P427, DOI 10.1016/j.ipm.2009.03.002
   Sundararajan K, 2020, COMPUT INTEL NEUROSC, V2020, DOI 10.1155/2020/2860479
   Tang J., 2014, DATA CLASSIFICATION, P37, DOI DOI 10.1201/B17320
   Tempero E, 2010, ASIA PAC SOFWR ENG, P336, DOI 10.1109/APSEC.2010.46
   Travassos GH, 1999, ACM SIGPLAN NOTICES, V34, P47, DOI 10.1145/320385.320389
   Tufano M, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 1, P403, DOI 10.1109/ICSE.2015.59
   Tuo Shi, 2020, 2020 IEEE International Conference on Power, Intelligent Computing and Systems (ICPICS), P140, DOI 10.1109/ICPICS50287.2020.9202012
   Vaucher S, 2009, WORK CONF REVERSE EN, P145, DOI 10.1109/WCRE.2009.23
   Verma AK, 2020, APPL BIOCHEM BIOTECH, V191, P637, DOI 10.1007/s12010-019-03222-8
   Weerts H.J., 2020, ARXIV PREPRINT ARXIV
   Weston J, 2001, ADV NEUR IN, V13, P668
   You MY, 2012, INT J COMPUT INT SYS, V5, P668, DOI 10.1080/18756891.2012.718113
   Zhang C, 2016, ASIA-PAC POWER ENERG, P1264, DOI 10.1109/APPEEC.2016.7779696
   Zhang DH, 2018, IEEE ACCESS, V6, P21020, DOI 10.1109/ACCESS.2018.2818678
   Zhang JB, 2021, INT J GEOGR INF SCI, V35, P193, DOI 10.1080/13658816.2020.1726923
   Zhang JP, 2004, LECT NOTES COMPUT SC, V3338, P296
   Zhang M, 2011, J SOFTW MAINT EVOL-R, V23, P179, DOI 10.1002/smr.521
   Zhou KB, 2020, MEAS SCI TECHNOL, V31, DOI 10.1088/1361-6501/ab4a45
   Zhu J, 2009, STAT INTERFACE, V2, P349
NR 103
TC 26
Z9 27
U1 1
U2 15
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 1
PY 2021
VL 212
AR 102713
DI 10.1016/j.scico.2021.102713
EA AUG 2021
PG 34
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Social Science Citation Index (SSCI)
SC Computer Science
GA UW4HG
UT WOS:000700118500003
DA 2024-07-18
ER

PT J
AU Ge, N
   Dal Zilio, S
   Liu, HY
   Zhang, L
   Zhang, LY
AF Ge, Ning
   Dal Zilio, Silvano
   Liu, Hongyu
   Zhang, Li
   Zhang, Lianyi
TI RT-MOBS: A compositional observer semantics of time Petri net for
   real-time property specification language based on μ-calculus
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Real-time requirements; Property specification patterns; Model checking;
   Observer; Time Petri net
AB We define a new verification method, called RT-MOBS, for checking real-time requirements based on Time Petri nets (TPN). Our approach supports requirements specified using a very expressive pattern language, the Property Specification Language (PSL) of Autili, Grusnke et al., and relies on marking observers' verification. RT-MOBS has many distinctive features, such as a focus on performances, a compositional method for deriving the observer and the target property directly from the structure of the specification pattern, and the ability to deal with the whole real-time fragment of PSL. We demonstrate the effectiveness of our approach from three industrial use cases: a mobile ad-hoc network system; the model of a flight management system, which is realistic with respect to the industry use during the architecture evaluation phase; and a model of an order to cash smart contract. Our experimental results show that we can achieve performances that are several orders of magnitude better than with methods based on an interpretation of patterns into Linear Temporal Logic (LTL) formulas. (C) 2021 Elsevier B.V. All rights reserved.
C1 [Ge, Ning] Beihang Univ, Sch Software, Beijing, Peoples R China.
   [Dal Zilio, Silvano] Univ Toulouse, CNRS, LAAS, Toulouse, France.
   [Liu, Hongyu] Huawei Technol Co Ltd, Beijing, Peoples R China.
   [Zhang, Li] Beihang Univ, Sch Comp Sci & Engn, Beijing, Peoples R China.
   [Zhang, Lianyi] Beijing Simulat Ctr, Sci & Technol Special Syst Simulat Lab, Beijing, Peoples R China.
   [Ge, Ning] Nanjing Univ Aeronaut & Astronaut, Minist Ind & Informat Technol, Key Lab Safety Crit Software, Nanjing, Peoples R China.
C3 Beihang University; Universite de Toulouse; Centre National de la
   Recherche Scientifique (CNRS); Huawei Technologies; Beihang University;
   Nanjing University of Aeronautics & Astronautics
RP Zhang, L (corresponding author), Beihang Univ, Sch Comp Sci & Engn, Beijing, Peoples R China.
EM lily@buaa.edu.cn
RI Dal Zilio, Silvano/AAV-6461-2021; Ge, Ning/C-3524-2013
OI Dal Zilio, Silvano/0000-0002-6002-2696; 
FU National Key Research and Development Program of China [2018YFB1402702];
   National Natural Science Foundation of China [61902011, 61732019]; Key
   Laboratory of Safety-Critical Software (Nanjing University of
   Aeronautics and Astronautics), Ministry of Industry and Information
   Technology [NJ2018014]
FX This work was supported by the National Key Research and Development
   Program of China Grant No. 2018YFB1402702, National Natural Science
   Foundation of China Grant No. 61902011 and No. 61732019, and Grant No.
   NJ2018014 of the Key Laboratory of Safety-Critical Software (Nanjing
   University of Aeronautics and Astronautics), Ministry of Industry and
   Information Technology.
CR A. Specification, 2002, TECH REP PARTS 1 2 7
   A. Specification, 2005, TECHNICAL REPORT
   Abid N, 2012, LECT NOTES COMPUT SC, V7437, P1, DOI 10.1007/978-3-642-32469-7_1
   Alur R., 1991, Techniques for Automatic Verification of Real-Time Systems
   Autili M, 2015, IEEE T SOFTWARE ENG, V41, P620, DOI 10.1109/TSE.2015.2398877
   Berthomieu B, 2004, INT J PROD RES, V42, P2741, DOI [10.1080/00207540412331312688, 10.1080/00207540410001705257]
   Berthomieu B, 2003, LECT NOTES COMPUT SC, V2619, P442
   Bozga M, 1998, LECT NOTES COMPUT SC, V1427, P546, DOI 10.1007/BFb0028779
   C. Enginering,, 2005, AFDXARINC 664 TUTORI
   Castillos K.C., 2013, IFM 2013, V7940, P316, DOI [10.1007/978-3-642-38613-822, DOI 10.1007/978-3-642-38613-822]
   Czepa C, 2020, IEEE T SOFTWARE ENG, V46, P100, DOI 10.1109/TSE.2018.2859926
   Dal-Zilio Silvano, 2015, LECT NOTES COMPUTER, V9541, P90
   Dwyer M. B., 1999, Proceedings of the 1999 International Conference on Software Engineering (IEEE Cat. No.99CB37002), P411, DOI 10.1109/ICSE.1999.841031
   EMERSON EA, 1982, SCI COMPUT PROGRAM, V2, P241, DOI 10.1016/0167-6423(83)90017-5
   Ge N., 2017, 11 INT S THEOR ASP S, P1
   Gruhn V, 2006, ELECTRON NOTES THEOR, V153, P117, DOI 10.1016/j.entcs.2005.10.035
   Konrad S, 2005, PROC INT CONF SOFTW, P372
   Kopetz H, 2011, Real-time systems series, V2
   KOYMANS R, 1990, REAL-TIME SYST, V2, P255, DOI 10.1007/BF01995674
   Kwiatkowska Marta, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P585, DOI 10.1007/978-3-642-22110-1_47
   Larsen K. G., 1997, International Journal on Software Tools for Technology Transfer, V1, P134, DOI 10.1007/s100090050010
   Lauer M., 2011, Proceedings of the 2011 IEEE 13th International Symposium on High-Assurance Systems Engineering (HASE 2011), P212, DOI 10.1109/HASE.2011.48
   Lauer M., 2011, Proceedings of IEEE ETFA, P1
   Lauer M, 2010, LECT NOTES COMPUT SC, V6415, P243, DOI 10.1007/978-3-642-16558-0_21
   Lime D, 2009, LECT NOTES COMPUT SC, V5505, P54, DOI 10.1007/978-3-642-00768-2_6
   López-Pintado O, 2019, SOFTWARE PRACT EXPER, V49, P1162, DOI 10.1002/spe.2702
   Menasche M., 1983, P IFIP 9 WORLD COMP
   MERLIN PM, 1976, IEEE T COMMUN, V24, P1036, DOI 10.1109/TCOM.1976.1093424
   Moser L. E., 1997, ACM Transactions on Software Engineering and Methodology, V6, P31, DOI 10.1145/237432.237438
   Pnueli A., 1977, 18th Annual Symposium on Foundations of Computer Science, P46, DOI 10.1109/SFCS.1977.32
   STIRLING C, 1991, THEOR COMPUT SCI, V89, P161, DOI 10.1016/0304-3975(90)90110-4
NR 31
TC 2
Z9 3
U1 0
U2 4
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 1
PY 2021
VL 206
AR 102624
DI 10.1016/j.scico.2021.102624
EA MAR 2021
PG 15
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA RI2XD
UT WOS:000636771400011
DA 2024-07-18
ER

PT J
AU Kaplar, S
   Zaric, M
   Ducasse, S
AF Kaplar, Sebastijan
   Zaric, Miroslav
   Ducasse, Stephane
TI NewWave: Workflow engine
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Workflow engine; Pharo; Business process
AB An ever-increasing demand for information systems in the last few decades brought many new opportunities but also presented new challenges for companies in the landscape of doing business globally. In these terms, software systems need to adapt almost instantaneously to new requirements, opportunities, and customer expectations. Process aware systems have become integral part in business information system solutions, finding their place at different locations. This paper presents a workflow engine NEWWAVE, created with the goal to enable an extensible workflow management system, to facilitate easy specification and implementation of application business logic with focus on simplicity and immediate feedback. Through seamless integration with Pharo applications, libraries, tools, and leveraging Pharo's live environment, the NEWWAVE enables users to create dynamically adaptable process models to facilitate the flexible adaptation of business logic. (C) 2020 Elsevier B.V. All rights reserved.
C1 [Kaplar, Sebastijan; Zaric, Miroslav] Univ Novi Sad, Fac Tech Sci, Novi Sad, Serbia.
   [Ducasse, Stephane] INRIA Lille Nord Europe, Villeneuve Dascq, France.
C3 University of Novi Sad
RP Zaric, M (corresponding author), Univ Novi Sad, Fac Tech Sci, Novi Sad, Serbia.
EM miroslavzaric@uns.ac.rs
OI Zaric, Miroslav/0000-0003-4671-3834; Ducasse,
   Stephane/0000-0001-6070-6599
CR Alegria Julio A. Hurtado, 2013, J SOFTW EVOL PROCESS
   Araya VP, 2013, DEEP INTO PHARO, P209
   Dragos Manolescu, 2000, THESIS
   Ducasse S, 2007, IEEE SOFTWARE, V24, P56, DOI 10.1109/MS.2007.144
   Ducasse Stephane, 2010, DYNAMIC WEB DEV SEAS
   GEORGAKOPOULOS D, 1995, DISTRIB PARALLEL DAT, V3, P119, DOI 10.1007/BF01277643
   Kaplar Sebastijan, 2019, INT WORKSH SMALLT TE
   Khoshafian S., 1995, Introduction to groupware, workflow, and workgroup computing
   Netstyle.ch GmbH, 2005, WORKFL MAN SYST WHIT
   Renggli L, 2007, LECT NOTES COMPUT SC, V4735, P106
   Renggli Lukas, 2006, THESIS
NR 11
TC 0
Z9 0
U1 1
U2 11
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR 1
PY 2021
VL 203
AR 102581
DI 10.1016/j.scico.2020.102581
PG 7
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA PQ7UT
UT WOS:000606750500006
DA 2024-07-18
ER

PT J
AU Pinheiro, P
   Viana, JC
   Ribeiro, M
   Fernandes, L
   Ferrari, F
   Gheyi, R
   Fonseca, B
AF Pinheiro, Pedro
   Viana, Jose Carlos
   Ribeiro, Marcio
   Fernandes, Leo
   Ferrari, Fabiano
   Gheyi, Rohit
   Fonseca, Baldoino
TI Mutating code annotations: An empirical evaluation on Java and C#
   programs
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Mutation testing; Code annotations; Mining bugs
ID OPERATORS
AB Mutation testing injects code changes to check whether tests can detect them. Mutation testing tools use mutation operators that modify program elements such as operators, names, and entire statements. Most existing mutation operators focus on imperative and object-oriented language constructs. However, many current projects use meta programming through code annotations. In a previous work, we have proposed nine mutation operators for code annotations focused on the Java programming language. In this article, we extend our previous work by mapping the operators to the C# language. Moreover, we enlarge the empirical evaluation. In particular, we mine Java and C# projects that make heavy use of annotations to identify annotation-related faults. We analyzed 200 faults and categorized them as "misuse," when the developer did not appear to know how to use the code annotations properly, and "wrong annotation parsing" when the developer incorrectly parsed annotation code (by using reflection, for example). Our operators mimic 95% of the 200 mined faults. In particular, three operators can mimic 82% of the faults in Java projects and 84% of the faults in C# projects. In addition, we provide an extended and improved repository hosted on GitHub with the 200 code annotation faults we analyzed. We organize the repository according to the type of errors made by the programmers while dealing with code annotations, and to the mutation operator that can mimic the faults. Last but not least, we also provide a mutation engine, based on these operators, which is publicly available and can be incorporated into existing or new mutation tools. The engine works for Java and C#. As implications for practice, our operators can help developers to improve test suites and parsers of annotated code. (C) 2020 Elsevier B.V. All rights reserved.
C1 [Pinheiro, Pedro; Viana, Jose Carlos; Ribeiro, Marcio; Fonseca, Baldoino] Univ Fed Alagoas, Comp Inst, Maceio, AL, Brazil.
   [Fernandes, Leo] IFAL, Informat Coord, Maceio, AL, Brazil.
   [Ferrari, Fabiano] Univ Fed Sao Carlos, Comp Dept, Sao Carlos, SP, Brazil.
   [Gheyi, Rohit] Univ Fed Campina Grande, Dept Comp & Syst, Campina Grande, PB, Brazil.
C3 Universidade Federal de Alagoas; Instituto Federal de Alagoas (IFAL);
   Universidade Federal de Sao Carlos; Universidade Federal de Campina
   Grande
RP Ribeiro, M (corresponding author), Univ Fed Alagoas, Comp Inst, Maceio, AL, Brazil.
EM pmop@ic.ufal.br; jcvf@ic.ufal.br; marcio@ic.ufal.br; lfmo@cin.ufpe.br;
   fcferrari@ufscar.br; rohit@dsc.ufcg.edu.br; baldoino@ic.ufal.br
RI Ferrari, Fabiano Cutigi/AAC-1392-2019; Fonseca, Baldoino/JUV-2819-2023;
   Ribeiro, Marcio/C-8356-2017
OI Ferrari, Fabiano Cutigi/0000-0002-7339-8529; Fonseca,
   Baldoino/0000-0002-0730-0319; Ribeiro, Marcio/0000-0002-4293-4261;
   Fernandes, Leonardo/0000-0001-9090-2232
FU CNPq [421306/2018-1, 426005/2018-0, 309844/2018-5, 311442/2019-6,
   306310/2016-3]; CAPES [175956, 117875]; FAPESP [2016/21251-0]; INES 2.0,
   CNPq [65614/2014-0]
FX This work was partially funded by CNPq (421306/2018-1, 426005/2018-0,
   309844/2018-5, 311442/2019-6, and 306310/2016-3), CAPES grants (175956
   and 117875), and FAPESP (grant 2016/21251-0). This research was also
   partially funded by INES 2.0, CNPq grant 65614/2014-0.
CR Acree A. T., 1979, GITICS7908 SCH INF C
   Agrawal H., 1989, Design of mutant operators for the C programming language
   Al-Hajjaji M, 2016, TENTH INTERNATIONAL WORKSHOP ON VARIABILITY MODELLING OF SOFTWARE-INTENSIVE SYSTEMS (VAMOS 2016), P81, DOI 10.1145/2866614.2866626
   Ammann P, 2014, 2014 IEEE SEVENTH INTERNATIONAL CONFERENCE ON SOFTWARE TESTING, VERIFICATION AND VALIDATION (ICST), P21, DOI 10.1109/ICST.2014.13
   Andrews JH, 2005, PROC INT CONF SOFTW, P402, DOI 10.1145/1062455.1062530
   Araujo C.A., 2016, J SOFTW ENG RES DEV, V4
   Baudry B, 2005, SOFTW TEST VERIF REL, V15, P73, DOI 10.1002/stvr.313
   Bauer Christian., 2006, Java Persistence with Hibernate
   Bradbury J., 2006, P 2 WORKSH MUT AN MU
   Chekam TT, 2017, PROC INT CONF SOFTW, P597, DOI 10.1109/ICSE.2017.61
   Chevalley P, 2001, APSEC 2001: EIGHTH ASIA-PACIFIC SOFTWARE ENGINEERING CONFERENCE, PROCEEDINGS, P267, DOI 10.1109/APSEC.2001.991487
   Coles H., 2019, PITEST MUTATION TEST
   Coles H., 2016, P 25 INT S SOFTWARE, P449
   Córdoba-Sánchez I, 2016, COMPUT LANG SYST STR, V45, P164, DOI 10.1016/j.cl.2016.02.002
   Daran M., 1996, SIGSOFT Software Engineering Notes, V21, P158, DOI [10.1145/229000.226313, 10.1145/226295.226313]
   Darwin I., 2010, ADV SOFTW ENG, P1
   Delamaro Marcio, 2001, 15 BRAZ S SOFTW ENG, P386
   Delgado-Pérez P, 2017, INFORM SOFTWARE TECH, V81, P169, DOI 10.1016/j.infsof.2016.07.002
   DEMILLO RA, 1978, COMPUTER, V11, P34, DOI 10.1109/C-M.1978.218136
   Deng L, 2015, IEEE INT CONF MOB, P19, DOI 10.1109/MASS.2015.25
   Derezinska A., 2011, 2011 IEEE Fourth International Conference on Software Testing, Verification and Validation Workshops (ICSTW), P342, DOI 10.1109/ICSTW.2011.54
   Derezinska A, 2006, INT FED INFO PROC, V227, P283
   Derezinska A, 2006, INT CONF QUAL SOFTW, P227
   Estero-Botaro Antonia, 2010, Proceedings of the IEEE Third International Conference on Software Testing Verification and Validation - Workshops (ICSTW 2010), P142, DOI 10.1109/ICSTW.2010.36
   Fernandes L, 2017, PROCEEDINGS OF THE 16TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON GENERATIVE PROGRAMMING: CONCEPTS AND EXPERIENCES (GPCE'17), P187, DOI 10.1145/3136040.3136053
   Ferrari Fabiano Cutigi, 2008, 2008 First IEEE International Conference on Software Testing, Verification and Validation (ICST '08), P52, DOI 10.1109/ICST.2008.37
   GitHub Inc, 2019, GITH SEARCH REST API
   HAMLET RG, 1977, IEEE T SOFTWARE ENG, V3, P279, DOI 10.1109/TSE.1977.231145
   Jia Y, 2011, IEEE T SOFTWARE ENG, V37, P649, DOI 10.1109/TSE.2010.62
   Jia Y, 2009, INFORM SOFTWARE TECH, V51, P1379, DOI 10.1016/j.infsof.2009.04.016
   Johnson R., 2006, SPRING JAVA J2EE APP
   Just R., 2014, P 2014 INT S SOFTW T, P433
   Just R, 2014, 22ND ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (FSE 2014), P654, DOI 10.1145/2635868.2635929
   Ma YS, 2005, SOFTW TEST VERIF REL, V15, P97, DOI 10.1002/stvr.308
   Ma YS, 2002, 13TH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P352, DOI 10.1109/ISSRE.2002.1173287
   Madeyski L, 2014, IEEE T SOFTWARE ENG, V40, P23, DOI 10.1109/TSE.2013.44
   Mathur A.P., 2007, FDN SOFTWARE TESTING
   Noguera C, 2007, J SOFTW MAINT EVOL-R, V19, P253, DOI 10.1002/smr.349
   Offutt A.J., 2000, MUTATION TESTING NEW, P34
   Papadakis M, 2019, ADV COMPUT, V112, P275, DOI 10.1016/bs.adcom.2018.03.015
   Papadakis M, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 1, P936, DOI 10.1109/ICSE.2015.103
   Petrovic G, 2018, IEEE ICST WORKSHOP, P47, DOI 10.1109/ICSTW.2018.00027
   Pinheiro P., 2018, Proceedings of the III Brazilian Symposium on Systematic and Automated Software Testing - SAST'18, P77
   Piotr Trzpil, 2019, VISUALMUTATOR NET MU
   Pizzoleto AV, 2019, J SYST SOFTWARE, V157, DOI 10.1016/j.jss.2019.07.100
   Rocha M. T., 2011, 23 INT C SOFTW ENG K, P426
   Schuler D, 2013, SOFTW TEST VERIF REL, V23, P353, DOI 10.1002/stvr.1473
   Sullivan A, 2017, IEEE INT CONF SOFTW, P264, DOI 10.1109/ICST.2017.31
   Tahchiev P., 2010, JUnit in Action, V2nd
   Wohlin C., 2000, EXPT SOFTWARE ENG IN
NR 50
TC 6
Z9 6
U1 0
U2 9
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 1
PY 2020
VL 191
AR 102418
DI 10.1016/j.scico.2020.102418
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA KW9NS
UT WOS:000521511000002
OA Bronze
DA 2024-07-18
ER

PT J
AU De Nicola, R
   Di Stefano, L
   Inverso, O
AF De Nicola, Rocco
   Di Stefano, Luca
   Inverso, Omar
TI Multi-agent systems with virtual stigmergy
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Multi-agent systems; Stigmergic interaction; Emergent behavior;
   Attribute-based communication; Agent-based modeling
ID MODEL; SWARM
AB We introduce a simple language for multi-agent systems that lends itself to intuitive design of local specifications. Agents operate on (parts of) a decentralized data structure, the stigmergy, that contains their (partial) knowledge. Such knowledge is asynchronously propagated across local stigmergies. In this way, local changes may influence global behavior. The main novelty is that our interaction mechanism combines stigmergic interaction with attribute-based communication. Specific conditions for interaction can be expressed in the form of predicates over exposed features of the agents. Additionally, agents may access a global environment. After presenting the language, we show its expressiveness by considering some illustrative case studies. We also include preliminary results towards automated verification via a mechanizable symbolic encoding that enables us to exploit verification tools developed for mainstream languages. (C) 2019 Elsevier B.V. All rights reserved.
C1 [De Nicola, Rocco] IMT Sch Adv Studies, Lucca, Italy.
   [Di Stefano, Luca; Inverso, Omar] GSSI, Laquila, Italy.
C3 IMT School for Advanced Studies Lucca; Gran Sasso Science Institute
   (GSSI)
RP Di Stefano, L (corresponding author), GSSI, Laquila, Italy.
EM luca.distefano@gssi.it
RI Di Stefano, Luca/O-6976-2017; De Nicola, Rocco/B-8584-2012
OI Di Stefano, Luca/0000-0003-1922-3151; Inverso, Omar/0000-0002-9348-1979;
   De Nicola, Rocco/0000-0003-4691-7570
FU MIUR project PRIN [2017FTXR7S]
FX Work partially funded by MIUR project PRIN 2017FTXR7S IT MATTERS
   (Methods and Tools for Trustworthy Smart Systems).
CR Abd Alrahman Y, 2016, LECT NOTES COMPUT SC, V9688, P1, DOI 10.1007/978-3-319-39570-8_1
   Angluin D., 2004, PODC 04, P290, DOI [DOI 10.1145/1011767.1011810, 10.1145/1011767.1011810]
   Angluin D, 2008, DISTRIB COMPUT, V21, P87, DOI 10.1007/s00446-008-0059-z
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], 2007, WILEY SERIES AGENT T
   [Anonymous], 2009, Middleware for Network Eccentric and Mobile Applications
   [Anonymous], 2003, Notices of the American mathematical society
   [Anonymous], [No title captured]
   Auger C, 2013, LECT NOTES COMPUT SC, V8255, P178, DOI 10.1007/978-3-319-03089-0_13
   Bachrach J, 2010, NEURAL COMPUT APPL, V19, P825, DOI 10.1007/s00521-010-0382-8
   Bachrach Jonathan., 2008, Proceedings of the 7th international joint conference on Autonomous agents and multiagent systems, V3, P1175
   Bayindir L, 2016, NEUROCOMPUTING, V172, P292, DOI 10.1016/j.neucom.2015.05.116
   Beyer Dirk, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P184, DOI 10.1007/978-3-642-22110-1_16
   Blondin M, 2018, LECT NOTES COMPUT SC, V10981, P604, DOI 10.1007/978-3-319-96145-3_34
   Boissier O, 2013, SCI COMPUT PROGRAM, V78, P747, DOI 10.1016/j.scico.2011.10.004
   Bordini RH, 2006, AUTON AGENT MULTI-AG, V12, P239, DOI 10.1007/s10458-006-5955-7
   Bradley AR, 2011, LECT NOTES COMPUT SC, V6538, P70, DOI 10.1007/978-3-642-18275-4_7
   Brambilla M, 2013, SWARM INTELL-US, V7, P1, DOI 10.1007/s11721-012-0075-2
   Brat Guillaume, 2014, Software Engineering and Formal Methods. 12th International Conference, SEFM 2014. Proceedings: LNCS 8702, P271, DOI 10.1007/978-3-319-10431-7_20
   Bucheli S, 2015, LECT NOTES ARTIF INT, V9287, P69, DOI 10.1007/978-3-319-22416-9_9
   Cavada R, 2014, LECT NOTES COMPUT SC, V8559, P334, DOI 10.1007/978-3-319-08867-9_22
   Chen HY, 2015, IEEE INT CONF AUTOM, P53, DOI 10.1109/ASE.2015.10
   Damiani F, 2016, SCI COMPUT PROGRAM, V117, P17, DOI 10.1016/j.scico.2015.11.005
   Dastani M., 2014, AGENT ORIENTED SOFTW, P213, DOI [DOI 10.1007/978-3-642-54432-311, DOI 10.1007/978-3-642-54432-3_11]
   De Nicola R, 2018, LECT NOTES COMPUT SC, V11176, P351, DOI 10.1007/978-3-030-04771-9_26
   De Nicola R, 2018, FRONT ROBOT AI, V5, DOI 10.3389/frobt.2018.00094
   Echeverria Gilberto, 2012, Simulation, Modeling, and Programming for Autonomous Robots. Proceedings of the Third International Conference, SIMPAR 2012, P197, DOI 10.1007/978-3-642-34327-8_20
   Efrima A, 2009, THEOR COMPUT SCI, V410, P1355, DOI 10.1016/j.tcs.2008.04.042
   Gadelha MR, 2018, IEEE INT CONF AUTOM, P888, DOI 10.1145/3238147.3240481
   Grimm V, 2005, SCIENCE, V310, P987, DOI 10.1126/science.1116681
   Herd B, 2015, LECT NOTES ARTIF INT, V9318, P109, DOI 10.1007/978-3-319-26184-3_7
   Hillston J., 2013, International Symposium on Trustworthy Global Computing, P14, DOI DOI 10.1007/978-3-319-05119-2_1
   Hrabia CE, 2018, KNOWL ENG REV, V33, DOI 10.1017/S0269888918000176
   Kant Gijs, 2015, Tools and Algorithms for the Construction and Analysis of Systems. 21st International Conference, TACAS 2015, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2015. Proceedings: LNCS 9035, P692, DOI 10.1007/978-3-662-46681-0_61
   Koenig N., 2004, 2004 IEEE/RSJ International Conference on Intelligent Robots and Systems (IROS) (IEEE Cat. No.04CH37566), P2149
   Lachele Johannes, 2012, Simulation, Modeling, and Programming for Autonomous Robots. Proceedings of the Third International Conference, SIMPAR 2012, P375, DOI 10.1007/978-3-642-34327-8_34
   Lal Akash, 2012, Computer Aided Verification. Proceedings 24th International Conference, CAV 2012, P427, DOI 10.1007/978-3-642-31424-7_32
   LAMPORT L, 1978, COMMUN ACM, V21, P558, DOI 10.1145/359545.359563
   Legay A, 2010, LECT NOTES COMPUT SC, V6418, P122, DOI 10.1007/978-3-642-16612-9_11
   Liggett T.M, 2005, Classics in Mathematics
   Löwe S, 2013, LECT NOTES COMPUT SC, V7795, P610, DOI 10.1007/978-3-642-36742-7_44
   Lomuscio A, 2017, INT J SOFTW TOOLS TE, V19, P9, DOI 10.1007/s10009-015-0378-x
   Loreti M, 2016, LECT NOTES COMPUT SC, V9700, P83, DOI 10.1007/978-3-319-34096-8_4
   Nicola Rocco, 2015, Software Engineering for Collective Autonomic Systems. The ASCENS Approach: LNCS 8998, P3, DOI 10.1007/978-3-319-16310-9_1
   O'Brien M, 2014, LECT NOTES COMPUT SC, V8810, P462, DOI 10.1007/978-3-319-11900-7_39
   Okubo A., 1986, Advances in Biophysics, V22, P1, DOI 10.1016/0065-227X(86)90003-1
   Philippou A, 2013, SCI ANN COMPUT SCI, V23, P119, DOI 10.7561/SACS.2013.1.119
   Pinciroli C., 2015, 9 EAI INT C BIO INSP, P287
   Pinciroli C, 2016, 2016 IEEE/RSJ INTERNATIONAL CONFERENCE ON INTELLIGENT ROBOTS AND SYSTEMS (IROS 2016), P3794, DOI 10.1109/IROS.2016.7759558
   Pinciroli C, 2012, SWARM INTELL-US, V6, P271, DOI 10.1007/s11721-012-0072-5
   Pitonakova Lenka, 2018, Towards Autonomous Robotic Systems. 19th Annual Conference, TAROS 2018 Proceedings: Lecture Notes in Artificial Intelligence (LNAI 10965), P357, DOI 10.1007/978-3-319-96728-8_30
   Pitonakova L, 2017, IEEE INT C INT ROBOT, P727, DOI 10.1109/IROS.2017.8202231
   Rakamaric Z, 2014, LECT NOTES COMPUT SC, V8559, P106, DOI 10.1007/978-3-319-08867-9_7
   Reynolds CW., 1987, SIGGRAPH Comput. Graph., V21, P25, DOI [10.1145/37402.37406, DOI 10.1145/37402.37406]
   Ricci A, 2007, LECT NOTES ARTIF INT, V4389, P124
   Rohmer E, 2013, IEEE INT C INT ROBOT, P1321, DOI 10.1109/IROS.2013.6696520
   Scheidler A, 2016, IEEE T CYBERNETICS, V46, P1175, DOI 10.1109/TCYB.2015.2429118
   Suzuki I, 1999, SIAM J COMPUT, V28, P1347, DOI 10.1137/S009753979628292X
   Tesfatsion L, 2002, ARTIF LIFE, V8, P55, DOI 10.1162/106454602753694765
   Toner J, 1998, PHYS REV E, V58, P4828, DOI 10.1103/PhysRevE.58.4828
   Venet Arnaud J., 2012, Computer Aided Verification. Proceedings 24th International Conference, CAV 2012, P139, DOI 10.1007/978-3-642-31424-7_15
   Weyns D, 2005, KNOWL ENG REV, V20, P127, DOI 10.1017/S0269888905000457
   Weyns D, 2004, FUND INFORM, V63, P125
NR 65
TC 10
Z9 10
U1 0
U2 4
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29a, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 15
PY 2020
VL 187
AR 102345
DI 10.1016/j.scico.2019.102345
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA KM2YN
UT WOS:000513988800003
OA Bronze
DA 2024-07-18
ER

PT J
AU Bowles, J
   Caminati, MB
   Cha, S
   Mendoza, J
AF Bowles, J.
   Caminati, M. B.
   Cha, S.
   Mendoza, J.
TI A framework for automated conflict detection and resolution in medical
   guidelines
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Clinical guidelines; Formal methods; SMT solvers; Theorem provers;
   Isabelle/HOL
ID DISEASES; MODELS
AB Common chronic conditions are routinely treated following standardised procedures known as clinical guidelines. For patients suffering from two or more chronic conditions, known as multimorbidity, several guidelines have to be applied simultaneously, which may lead to severe adverse effects when the combined recommendations and prescribed medications are inconsistent or incomplete. This paper presents an automated formal framework to detect, highlight and resolve conflicts in the treatments used for patients with multimorbidities focusing on medications. The presented extended framework has a front-end which takes guidelines captured in a standard modelling language and returns the visualisation of the detected conflicts as well as suggested alternative treatments. Internally, the guidelines are transformed into formal models capturing the possible unfoldings of the guidelines. The back-end takes the formal models associated with multiple guidelines and checks their correctness with a theorem prover, and inherent inconsistencies with a constraint solver. Key to our approach is the use of an optimising constraint solver which enables us to search for the best solution that resolves/minimises conflicts according to medication efficacy and the degree of severity in case of harmful combinations, also taking into account their temporal overlapping. The approach is illustrated throughout with a real medical example. (C) 2019 Elsevier B.V. All rights reserved.
C1 [Bowles, J.; Caminati, M. B.; Mendoza, J.] Univ St Andrews, Sch Comp Sci, Jack Cole Bldg, St Andrews KY16 9SX, Fife, Scotland.
   [Cha, S.] Tech Univ Munich, Automat & Informat Syst, Munich, Germany.
C3 University of St Andrews; Technical University of Munich
RP Bowles, J (corresponding author), Univ St Andrews, Sch Comp Sci, Jack Cole Bldg, St Andrews KY16 9SX, Fife, Scotland.
EM jkfb@st-andrews.ac.uk; mbc8@st-andrews.ac.uk; suhyun.cha@tum.de;
   jjm20@st-andrews.ac.uk
RI Cha, Suhyun/W-3096-2019; Caminati, Marco/D-5723-2016
OI Cha, Suhyun/0000-0001-7477-8008; Bowles, Juliana/0000-0002-5918-9114;
   Caminati, Marco/0000-0002-4529-5442
FU MRC [MR/S003819/1]; EPSRC [EP/M014290/1]; EPSRC [EP/M014290/1] Funding
   Source: UKRI; MRC [MR/S003819/1] Funding Source: UKRI
FX This research is supported by the MRC-funded UK Research and Innovation
   grant MR/S003819/1 and by EPSRC grant EP/M014290/1.
CR [Anonymous], 2016, JSAT
   [Anonymous], 2015, P 21 INT C TOOLS ALG
   Barrett C., 2010, P 8 INT WORKSHOP SAT, V13, P14
   Bilici E, 2018, DIGIT HEALTH, V4, DOI 10.1177/2055207618804927
   Blanchette JC, 2013, J AUTOM REASONING, V51, P109, DOI 10.1007/s10817-013-9278-5
   Bowles J., 2017, 2017 INT S THEOR ASP, P1
   Bowles JKF, 2016, ASIA PAC SOFWR ENG, P313, DOI [10.1109/APSEC.2016.051, 10.1109/APSEC.2016.18]
   Bowles J, 2018, LECT NOTES COMPUT SC, V11176, P146, DOI 10.1007/978-3-030-04771-9_12
   Bowles J, 2017, LECT NOTES COMPUT SC, V10487, P233, DOI 10.1007/978-3-319-68034-7_14
   Bowles JKF, 2017, LECT NOTES COMPUT SC, V10610, P209, DOI 10.1007/978-3-319-68690-5_13
   Bowles JKF, 2006, LECT NOTES COMPUT SC, V4019, P189
   Boyd CM, 2005, JAMA-J AM MED ASSOC, V294, P716, DOI 10.1001/jama.294.6.716
   Braun L, 2014, 2014 European Frequency and Time Forum (EFTF), P9, DOI 10.1109/EFTF.2014.7331414
   Bryans JW, 2010, LECT NOTES COMPUT SC, V6371, P33, DOI 10.1007/978-3-642-15898-8_3
   Burwitz M., 2013, WIRTSCHAFTSINF, P83
   Chinosi M, 2012, COMPUT STAND INTER, V34, P124, DOI 10.1016/j.csi.2011.06.002
   Defen Zhang, 2009, Proceedings of the 2009 Fifth International Joint Conference on INC, IMS and IDC, P1102, DOI 10.1109/NCM.2009.271
   Dijkman R. M., 2007, TECH REP
   Dijkman RM, 2008, INFORM SOFTWARE TECH, V50, P1281, DOI 10.1016/j.infsof.2008.02.006
   Fraccaro P, 2015, JMIR MED INF, V3, DOI 10.2196/medinform.3503
   Han R., 2011, P NETTAB 2011 WORKSH, P66
   Hashemian N., 2012, 25 IEEE INT S COMPUT, P1, DOI [10.1109/CBMS.2012.6266322, DOI 10.1109/CBMS.2012.6266322]
   Hillston J., 2005, DISTINGUISHED DISSER, V12
   Holzmann GJ, 1997, IEEE T SOFTWARE ENG, V23, P279, DOI 10.1109/32.588521
   Hughes LD, 2013, AGE AGEING, V42, P62, DOI 10.1093/ageing/afs100
   Kovalov A, 2016, LECT NOTES COMPUT SC, V9681, P376, DOI 10.1007/978-3-319-33693-0_24
   Küster-Filipe J, 2006, THEOR COMPUT SCI, V351, P203, DOI 10.1016/j.tcs.2005.09.068
   Liang HZ, 2008, LECT NOTES COMPUT SC, V5301, P204, DOI 10.1007/978-3-540-87875-9_15
   Lin FR, 2001, INT J MED INFORM, V62, P11, DOI 10.1016/S1386-5056(01)00126-5
   NIELSEN M, 1981, THEOR COMPUT SCI, V13, P85, DOI 10.1016/0304-3975(81)90112-2
   Nielsen Mogens, 1995, Handbook of Logic in Computer Science, V4, P1, DOI [10.5555/218623.218630, DOI 10.5555/218623.218630]
   Nipkow Tobias, 2002, ISABELLE HOL PROOF A
   Riaño D, 2017, J BIOMED INFORM, V75, P1, DOI 10.1016/j.jbi.2017.09.009
   Rubin B, 2008, MIDDLE E FOCUS, P7
   S. Government, 2015, POL GUID
   Weber P, 2018, J SOFTW-EVOL PROC, V30, DOI 10.1002/smr.1898
   Widl M., 2013, LNCS, V7745, P164, DOI [10.1007/978-3-642-36089-310, DOI 10.1007/978-3-642-36089-310]
   Yamasathien S, 2014, INT CONF DIGIT INFO, P211, DOI 10.1109/DICTAP.2014.6821684
   Yang X, 2012, BMC GENOMICS, V13, DOI 10.1186/1471-2164-13-475
   Zamborlini V, 2017, ARTIF INTELL MED, V81, P78, DOI 10.1016/j.artmed.2017.03.012
   Zamborlini V, 2014, LECT NOTES ARTIF INT, V8876, P591, DOI 10.1007/978-3-319-13704-9_44
NR 41
TC 5
Z9 7
U1 1
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD AUG 1
PY 2019
VL 182
BP 42
EP 63
DI 10.1016/j.scico.2019.07.002
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA JA1IN
UT WOS:000487570800002
PM 32029957
OA hybrid, Green Published
DA 2024-07-18
ER

PT J
AU Luthmann, L
   Mennicke, S
   Lochau, M
AF Luthmann, Lars
   Mennicke, Stephan
   Lochau, Malte
TI Unifying modal interface theories and compositional input/output
   conformance testing
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Interface theories; Modal transition systems; Input/output conformance
   testing; Compositionality
ID REFINEMENT; AUTOMATA
AB We present a novel formal foundation for model-based testing of component-based software systems, unifying principles from modal interface theories and input/output conformance testing. Our theory relies on Modal Interface Automata with Input Refusals (IR-MIA) as behavioral formalism for both the specification and the implementation under test. IR-MIA models allow for a fine-grained distinction between mandatory and optional, as well as between underspecified and forbidden input/output behaviors, thus improving expressiveness of existing approaches in various ways. The input/output conformance relation on IR-MIA, called modal-irioco, therefore supports positive and negative conformance testing with optimistic and pessimistic environmental assumptions and is preserved under modal refinement. Our theory further adapts a variety of different composition operators from interfaces theories to IR-MIA models, each enjoying-under moderate restrictions-desirable compositionality properties with respect to the modalirioco relation. Those operators include interface conjunction for incrementally integrating multiple perspectives on the same component, as well as parallel composition with multicast and hiding for integrating multiple concurrently interacting components. Furthermore, a quotient operator on IR-MIA, serving as the inverse to parallel composition, facilitates decomposition of conformance testing, thus providing a solution to the unknown-component problem. (C) 2018 Elsevier B.V. All rights reserved.
C1 [Luthmann, Lars; Lochau, Malte] Tech Univ Darmstadt, Real Time Syst Lab, Magdalenenstr 4, D-64289 Darmstadt, Germany.
   [Mennicke, Stephan] TU Braunschweig, Inst Programming & React Syst, Muhlenpfordtstr 23, D-38106 Braunschweig, Germany.
C3 Technical University of Darmstadt; Braunschweig University of Technology
RP Luthmann, L (corresponding author), Tech Univ Darmstadt, Real Time Syst Lab, Magdalenenstr 4, D-64289 Darmstadt, Germany.
EM lars.luthmann@es.tu-darmstadt.de
OI Luthmann, Lars/0000-0002-9868-365X; Mennicke,
   Stephan/0000-0002-3293-2940
FU German Research Foundation (DFG) [SPP 1593, LO 2198/2-1, GO-671/6-2]
FX Supported by the German Research Foundation (DFG) in the Priority
   Programme SPP 1593: Design For Future - Managed Software Evolution (LO
   2198/2-1).; Supported by the German Research Foundation (DFG) in grant
   GO-671/6-2.
CR Aarts F, 2010, LECT NOTES COMPUT SC, V6269, P71, DOI 10.1007/978-3-642-15375-4_6
   Alur R, 1998, LECT NOTES COMPUT SC, V1466, P163, DOI 10.1007/BFb0055622
   [Anonymous], 2009, Proc. ACM IEEE Int. Conf. Embedded Software, DOI DOI 10.1145/1629335.1629348
   Bauer SS, 2010, LECT NOTES COMPUT SC, V6015, P175, DOI 10.1007/978-3-642-12002-2_15
   Belinfante A, 2010, LECT NOTES COMPUT SC, V6015, P266, DOI 10.1007/978-3-642-12002-2_21
   Benes N, 2009, LECT NOTES COMPUT SC, V5684, P112, DOI 10.1007/978-3-642-03466-4_7
   Beohar Harsh, 2014, P 29 ACM S APPL COMP, P1272, DOI [10.1145/2554850.2554949, DOI 10.1145/2554850.2554949]
   Bourdonov IB, 2006, ELECTRON NOTES THEOR, V164, P83, DOI 10.1016/j.entcs.2006.09.008
   Bujtor F, 2016, THEOR COMPUT SCI, V642, P24, DOI 10.1016/j.tcs.2016.06.011
   Bujtor F, 2015, 2015 15TH INTERNATIONAL CONFERENCE ON APPLICATIONS OF CONCURRENCY TO SYSTEM DESIGN (ACSD), P60, DOI 10.1109/ACSD.2015.21
   Bujtor F, 2015, LECT NOTES COMPUT SC, V8939, P152, DOI 10.1007/978-3-662-46078-8_13
   Clements P., 2002, Software product lines
   Daca P, 2014, 2014 IEEE SEVENTH INTERNATIONAL CONFERENCE ON SOFTWARE TESTING, VERIFICATION AND VALIDATION (ICST), P373, DOI 10.1109/ICST.2014.50
   de Alfaro L, 2005, NATO SCI SER II-MATH, V195, P83
   de Alfaro L., 2001, Software Engineering Notes, V26, P109, DOI 10.1145/503271.503226
   DENICOLA R, 1995, THEOR COMPUT SCI, V138, P391, DOI 10.1016/0304-3975(95)92307-J
   DENICOLA R, 1987, ACTA INFORM, V24, P211, DOI 10.1007/BF00264365
   Gregorio-Rodríguez C, 2013, LECT NOTES COMPUT SC, V7892, P114
   Heerink L., 1997, Formal Description Techniques and Protocol Specification, Testing and Verification. FORTE X/PSTV XVII'97. IFIP TC6 WG6.1 Joint International Conference on Formal Description Techniques for Distributed Systems and Communication Protocols (FORTE X) and Protocol Specification, Testing and Verification (PSTV XVII), P23
   Larsen U, 1988, Eur J Popul, V3, P203, DOI 10.1109/LICS.1988.5119
   Lochau Malte, 2014, Formal Methods for Executable Software Models. 14th International School on Formal Methods for the Design of Computer, Communication, and Software Systems, SFM 2014. Advanced Lectures: LNCS 8483, P310, DOI 10.1007/978-3-319-07317-0_8
   Lüttgen G, 2015, ACTA INFORM, V52, P305, DOI 10.1007/s00236-014-0211-0
   Luthmann L., 2016, LNCS, P54
   Luthmann  L., 2015, FMSPLE 2015, P1
   Luthmann  L., 2016, COMPOSITIONALITY DEC
   Noroozi N, 2013, ELECTRON PROC THEOR, P51, DOI 10.4204/EPTCS.111.5
   Noroozi N, 2014, LECT NOTES COMPUT SC, V8348, P291, DOI 10.1007/978-3-319-07602-7_18
   Noroozi N, 2011, LECT NOTES COMPUT SC, V7041, P334, DOI 10.1007/978-3-642-24690-6_23
   Nyman U, 2007, LECT NOTES COMPUT SC, V4421, P64
   PHILLIPS I, 1987, THEOR COMPUT SCI, V50, P241, DOI 10.1016/0304-3975(87)90117-4
   Raclet JB, 2011, FUND INFORM, V108, P119, DOI 10.3233/FI-2011-416
   Rensink A, 2007, INFORM COMPUT, V205, P125, DOI 10.1016/j.ic.2006.06.002
   ter Beek MH, 2016, J LOG ALGEBR METHODS, V85, P287, DOI 10.1016/j.jlamp.2015.11.006
   Tretmans  J., TRCTIT9626
   Vaandrager F. W., 1991, Proceedings of Sixth Annual IEEE Symposium on Logic in Computer Science (Cat. No.91CH3025-4), P387, DOI 10.1109/LICS.1991.151662
   van der Bijl M, 2004, LECT NOTES COMPUT SC, V2931, P86
   Veanes Margus, 2012, International Journal on Software Tools for Technology Transfer, V14, P387, DOI 10.1007/s10009-011-0215-9
   Veanes M, 2009, LECT NOTES COMPUT SC, V5684, P322, DOI 10.1007/978-3-642-03466-4_21
   Villa T., 2011, UNKNOWN COMPONENT PR
NR 39
TC 4
Z9 4
U1 0
U2 4
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR 1
PY 2019
VL 172
BP 27
EP 47
DI 10.1016/j.scico.2018.09.008
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA HK8HC
UT WOS:000458229000002
OA hybrid
DA 2024-07-18
ER

PT J
AU Hoang, TS
   Snook, C
   Salehi, A
   Butler, M
   Ladenberger, L
AF Thai Son Hoang
   Snook, Colin
   Salehi, Asieh
   Butler, Michael
   Ladenberger, Lukas
TI Validating and verifying the requirements and design of a haemodialysis
   machine using the Rodin toolset
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE ProR; ProB; iUML-B; BMotion studio; Co-simulation
ID EVENT-B; CORRECTNESS; SOFTWARE; SAFETY
AB We present a formal specification and analysis of a haemodialysis machine (HD machine) in Event-B using the Rodin Toolset. The medical device domain is a particularly complex multidisciplinary field involving disparate branches of engineering, biological and medical fields as well as a critical patient-machine interface. Requirements include safety properties, process steps, human-machine interfaces, timing constraints, dynamic control algorithms, and design features. Our aim is to demonstrate that the Event-B based modelling, verification and validation tools deal with the variety of requirements involved in a typical medical device. We utilise ProR for structuring and tracking requirements. We model the HD machine using iUML-B state-machines and class diagrams, and build a corresponding BMotion Studio visualisation. For verification, we use both theorem proving and model checking techniques. We validate the design of the system using (i) diagrams to aid the modelling of the sequential properties of the requirements, and (ii) ProB-based animation and visualisation tools to explore the system's behaviour. Some of the safety properties involve dynamic behaviour which is difficult to verify in Event-B. For these properties we use (iii) co-simulation tools to validate against a continuous model of the physical behaviour. We conclude that the Event-B based modelling tools are particularly rich in verification and validation techniques and with the help of supporting tools for requirements tracking, are able to address the different kinds of requirements in a medical device. (C) 2017 Elsevier B.V. All rights reserved.
C1 [Thai Son Hoang; Snook, Colin; Salehi, Asieh; Butler, Michael] Univ Southampton, ECS, Southampton, Hants, England.
   [Ladenberger, Lukas] Univ Dusseldorf, Dusseldorf, Germany.
C3 University of Southampton; Heinrich Heine University Dusseldorf
RP Hoang, TS; Snook, C (corresponding author), Univ Southampton, ECS, Southampton, Hants, England.
EM T.S.Hoang@ecs.soton.ac.uk; cfs@ecs.soton.ac.uk; asf08r@ecs.soton.ac.uk;
   mjb@ecs.soton.ac.uk; ladenberger@cs.uni-dusseldorf.de
RI Hoang, Thai Son/H-6159-2019
OI Hoang, Thai Son/0000-0003-4095-0732; Salehi Fathabadi,
   Asieh/0000-0002-0508-3066; Snook, Colin/0000-0002-0210-0983
CR Abrial Jean-Raymond, 2012, Abstract State Machines, Alloy, B, VDM, and Z. Proceedings Third International Conference, ABZ 2012, P178, DOI 10.1007/978-3-642-30885-7_13
   Abrial Jean-Raymond, 2010, International Journal on Software Tools for Technology Transfer, V12, P447, DOI 10.1007/s10009-010-0145-y
   Abrial J R, 2010, Modeling in Event-B: system and softeng
   [Anonymous], 13485 ISO
   [Anonymous], LECT NOTES COMPUTER
   [Anonymous], 2006, 623042006 IEC
   [Anonymous], 2005, 6060112005 IEC 1
   Arcaini P, 2016, LECT NOTES COMPUT SC, V9675, P344, DOI 10.1007/978-3-319-33600-8_30
   Banach R, 2016, LECT NOTES COMPUT SC, V9675, P376, DOI 10.1007/978-3-319-33600-8_32
   Behrmann G, 2004, LECT NOTES COMPUT SC, V3185, P200
   Berthing Jesper, 2012, Integrated Formal Methods. Proceedings 9th International Conference, IFM 2012, P69, DOI 10.1007/978-3-642-30729-4_6
   Dassault Systemes, CAT SYST ENG DYM
   Daw Z, 2014, INT J COMPUT ASS RAD, V9, P145, DOI 10.1007/s11548-013-0919-2
   Déharbe D, 2014, SCI COMPUT PROGRAM, V94, P130, DOI 10.1016/j.scico.2014.04.012
   Fayolle T, 2016, LECT NOTES COMPUT SC, V9675, P394, DOI 10.1007/978-3-319-33600-8_33
   FMI Steering Committee, FUNCT MOCK UP INT
   Gehlot V, 2006, COMPUTER, V39, P54, DOI 10.1109/MC.2006.125
   Gomes AO, 2016, LECT NOTES COMPUT SC, V9675, P409, DOI 10.1007/978-3-319-33600-8_34
   Guo C., 2016, 7 ACM IEEE INT C CYB
   Hansen D, 2016, SCI COMPUT PROGRAM, V131, P109, DOI 10.1016/j.scico.2016.04.014
   Hoang T.S., 2013, IND DEPLOYMENT SYSTE, P211
   Hudon S, 2016, SOFTW SYST MODEL, V15, P1091, DOI 10.1007/s10270-015-0456-2
   ISO, 2007, 14971 ISO
   Jastram M, 2012, THESIS
   Jetley R, 2006, COMPUTER, V39, P61, DOI 10.1109/MC.2006.113
   Kamali M, 2017, LECT NOTES COMPUT SC, V10466, P189, DOI 10.1007/978-3-319-66176-6_13
   Ladenberger L., 2016, BMOTION STUDIO PROB
   Ladenberger L, 2009, LECT NOTES COMPUT SC, V5825, P202, DOI 10.1007/978-3-642-04570-7_17
   LAMPORT L, 1977, IEEE T SOFTWARE ENG, V3, P125, DOI 10.1109/TSE.1977.229904
   Lamport L., 2002, SPECIFYING SYSTEMS T
   Leuschel Michael, 2008, International Journal on Software Tools for Technology Transfer, V10, P185, DOI 10.1007/s10009-007-0063-9
   Mashkoor A., 2015, HEMODIALYSIS MACHINE
   Object Management Group, 2016, REQ INT FORM REQIF
   Sandler K., 2010, KILLED CODE SOFTWARE, P308
   Sarshogh M. R., ECEASST, V46
   Savicks V., 2014, P 2014 SUMM SIM MULT
   Savicks V., 2012, ROD WORKSH 2012 FONT, P31
   Siavashi F., 2013, P 25 NORD WORKSH PRO, P13
   Singh Neeraj Kumar, 2015, Digital Human Modeling. Applications in Health, Safety, Ergonomics and Risk Management: Ergonomics and Health. 6th International Conference, DHM 2015, held as part of HCI International 2015. Proceedings: LNCS 9185, P374, DOI 10.1007/978-3-319-21070-4_38
   Singh N. K., 2013, USING EVENT B CRITIC
   Snook C, 2014, P ROD WORKSH 2014 TO, P29
   Snook C., 2011, P B2011 WORKSH LIM
   Software Engineering and Programming Languages Group, 2017, PROB US MAN LTL MOD
   Hoang TS, 2016, LECT NOTES COMPUT SC, V9675, P360, DOI 10.1007/978-3-319-33600-8_31
   Hoang TS, 2011, LECT NOTES COMPUT SC, V6991, P456, DOI 10.1007/978-3-642-24559-6_31
   Vain J, 2016, IEEE INT C ENG COMP, P126, DOI [10.1109/ICECCS.2016.024, 10.1109/ICECCS.2016.20]
   Wallace DoloresR., 2001, International Journal of Reliability Quality and Safety Engineering, V8, P351, DOI DOI 10.1142/S021853930100058X
NR 47
TC 3
Z9 3
U1 0
U2 9
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 15
PY 2018
VL 158
BP 122
EP 147
DI 10.1016/j.scico.2017.11.002
PG 26
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GE4CX
UT WOS:000431163000008
OA Bronze, Green Accepted
DA 2024-07-18
ER

PT J
AU Daniel, G
   Sunyé, G
   Benelallam, A
   Tisi, M
   Vernageau, Y
   Gómez, A
   Cabot, J
AF Daniel, Gwendal
   Sunye, Gerson
   Benelallam, Amine
   Tisi, Massimo
   Vernageau, Yoann
   Gomez, Abel
   Cabot, Jordi
TI NeoEMF: A multi-database model persistence framework for very large
   models
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Model persistence; Scalability; Large models
AB The growing role of Model Driven Engineering (MDE) techniques in industry has emphasized scalability of existing model persistence solutions as a major issue. Specifically, there is a need to store, query, and transform very large models in an efficient way. SeireMI persistence solutions based on relational and NoSQL databases have been proposed to achieve scalability. However, they often rely on a single data. store,. which suits a specific modeling activity, but may not be optimized for other use cases. This paper presents NEoEMF, a tool that tackles this issue by providing a multi-database model persistence framework. Tool website: http://www.neoemf.com (C) 2017 Elsevier B.V. All rights reserved.
C1 [Daniel, Gwendal; Sunye, Gerson; Benelallam, Amine; Tisi, Massimo; Vernageau, Yoann] INRIA, AtlanMod Team, IMT Atlantique, LS2N, Nantes, France.
   [Gomez, Abel; Cabot, Jordi] Univ Oberta Catalunya, Barcelona, Spain.
   [Cabot, Jordi] ICREA, Barcelona, Spain.
C3 Inria; IMT - Institut Mines-Telecom; IMT Atlantique; UOC Universitat
   Oberta de Catalunya; ICREA
RP Daniel, G (corresponding author), INRIA, AtlanMod Team, IMT Atlantique, LS2N, Nantes, France.
EM gwendal.daniel@inria.fr; gerson.sunye@inria.fr;
   amine.benelallam@inria.fr; massimo.tisi@inria.fr;
   yoann.vernageau@inria.fr; agomezlla@uoc.edu; jordi.cabot@icrea.cat
RI Gómez, Abel/J-8652-2012; Cabot, Jordi/P-7723-2015
OI Gómez, Abel/0000-0003-1344-8472; Daniel, Gwendal/0000-0003-0692-0628;
   Cabot, Jordi/0000-0003-2418-2489
CR Daniel G, 2016, INT CONF RES CHAL, P225
   Eclipse Foundation, 2016, CDO MOD REP CDO
   Pagán JE, 2015, SOFTW SYST MODEL, V14, P219, DOI 10.1007/s10270-013-0326-8
   Gómez A, 2015, LECT NOTES COMPUT SC, V9033, P19, DOI 10.1007/978-3-662-46675-9_2
   Gomez Abel, 2015, P 3 BIGMDE WORKSH CE, P42
   Hutchinson J, 2014, SCI COMPUT PROGRAM, V89, P144, DOI 10.1016/j.scico.2013.03.017
   Shah SM, 2014, LECT NOTES COMPUT SC, V8767, P586, DOI 10.1007/978-3-319-11653-2_36
NR 7
TC 21
Z9 23
U1 1
U2 6
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 1
PY 2017
VL 149
SI SI
BP 9
EP 14
DI 10.1016/j.scico.2017.08.002
PG 6
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA FL0GP
UT WOS:000413889900003
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Ketema, J
   Donaldson, AF
AF Ketema, Jeroen
   Donaldson, Alastair F.
TI Termination analysis for GPU kernels
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 15th International Workshop on Automated Verification of Critical
   Systems (AVoCS)
CY SEP, 2015
CL Heriot Watt Univ, Edinburgh, SCOTLAND
SP Altran, D RisQ, Formal Methods Europe, Scottish Informat & Comp Sci Alliance
HO Heriot Watt Univ
DE Termination; Abstraction; GPUs; Concurrency
AB We describe a thread-modular technique for proving termination of massively parallel GPU kernels. The technique reduces the termination problem for these kernels to a sequential termination problem by abstracting the shared state, and as such allows us to leverage termination analysis techniques for sequential programs. An implementation in KITTeL is able to show termination of 94% of 604 kernels collected from various sources. (C) 2017 Elsevier B.V. All rights reserved.
C1 [Ketema, Jeroen; Donaldson, Alastair F.] Imperial Coll London, Dept Comp, London, England.
C3 Imperial College London
RP Ketema, J; Donaldson, AF (corresponding author), Imperial Coll London, Dept Comp, London, England.
EM jketema@imperial.ac.uk; afd@imperial.ac.uk
FU EU FP7 STREP project CARP [287767]
FX This work was supported by the EU FP7 STREP project CARP (project number
   287767).
CR Albert Elvira, 2013, Automated Technology for Verification and Analysis. 11th International Symposium, ATVA 2013. Proceedings: LNCS 8172, P349, DOI 10.1007/978-3-319-02444-8_25
   Albert E., 2011, LNCS, V7078, P238, DOI DOI 10.1007/978-3-642-25318-8_
   Alglave J, 2015, ACM SIGPLAN NOTICES, V50, P577, DOI [10.1145/2775054.2694391, 10.1145/2694344.2694391]
   [Anonymous], P 14 INT WORKSH TERM
   [Anonymous], 2013, GPR, DOI [DOI 10.1145/2400682.2400713, DOI 10.19476/J.YSXB.1004.0609.2013.09.014]
   [Anonymous], CORR
   [Anonymous], 1999, Using MPI: Portable Parallel Programming with the Message Passing Interface
   [Anonymous], P ACM SIGPLAN 2006 C
   [Anonymous], OPENCL SPEC VERS 12
   [Anonymous], CUDA C PROGRAMMING G
   [Anonymous], IMPACT1201 UILL URB
   [Anonymous], 2004, GPU gems
   Bakhoda A, 2009, INT SYM PERFORM ANAL, P163, DOI 10.1109/ISPASS.2009.4919648
   Bardsley E, 2014, LECT NOTES COMPUT SC, V8559, P226, DOI 10.1007/978-3-319-08867-9_15
   Bardsley E, 2014, LECT NOTES COMPUT SC, V8430, P230, DOI 10.1007/978-3-319-06200-6_18
   Betts A, 2015, ACM T PROGR LANG SYS, V37, DOI 10.1145/2743017
   Brockschmidt M, 2016, LECT NOTES COMPUT SC, V9636, P387, DOI 10.1007/978-3-662-49674-9_22
   Burtscher M., 2012, 2012 IEEE International Symposium on Workload Characterization (IISWC 2012), P141, DOI 10.1109/IISWC.2012.6402918
   Cates JE, 2004, MED IMAGE ANAL, V8, P217, DOI 10.1016/j.media.2004.06.022
   Che SA, 2009, I S WORKL CHAR PROC, P44, DOI 10.1109/IISWC.2009.5306797
   Chong N, 2014, ACM SIGPLAN NOTICES, V49, P397, DOI 10.1145/2535838.2535882
   Chong N, 2013, ACM SIGPLAN NOTICES, V48, P605, DOI [10.1145/2544173.2509517, 10.1145/2509136.2509517]
   Collingbourne P, 2013, LECT NOTES COMPUT SC, V7792, P270, DOI 10.1007/978-3-642-37036-6_16
   Cook B, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P320, DOI 10.1145/1250734.1250771
   Cook B, 2013, LECT NOTES COMPUT SC, V7795, P47, DOI 10.1007/978-3-642-36742-7_4
   Corder G.W., 2009, NONPARAMETRIC STAT N
   Danalis A., 2010, Proceedings of the 3rd Workshop on General-Purpose Computation on Graphics Processing Units, P63, DOI [10.1145/1735688.1735702, DOI 10.1145/1735688.1735702]
   Falke S, 2011, LEIBNIZ INT PR INFOR, V10, P41, DOI 10.4230/LIPIcs.RTA.2011.41
   Falke S, 2012, LECT NOTES COMPUT SC, V7152, P261, DOI 10.1007/978-3-642-27705-4_21
   Flanagan C., 2001, FME 2001: Formal Methods for Increasing Software Productivity. International Symposium on Formal Methods Europe. Proceedings (Lecture Notes in Computer Science Vol.2021), P500
   Heizmann Matthias, 2013, Automated Technology for Verification and Analysis. 11th International Symposium, ATVA 2013. Proceedings: LNCS 8172, P365, DOI 10.1007/978-3-319-02444-8_26
   Jeannet B, 2009, LECT NOTES COMPUT SC, V5643, P661, DOI 10.1007/978-3-642-02658-4_52
   JONES CB, 1983, ACM T PROGR LANG SYS, V5, P596, DOI 10.1145/69575.69577
   KOGGE PM, 1973, IEEE T COMPUT, VC-22, P786, DOI 10.1109/TC.1973.5009159
   Kop C, 2015, LECT NOTES COMPUT SC, V9450, P549, DOI 10.1007/978-3-662-48899-7_38
   Kupriyanov A, 2014, LECT NOTES COMPUT SC, V8559, P814, DOI 10.1007/978-3-319-08867-9_54
   LAMPORT L, 1979, IEEE T COMPUT, V28, P690, DOI 10.1109/TC.1979.1675439
   Leavens G.T., 2013, JML Reference Manual
   Podelski A, 2004, IEEE S LOG, P32, DOI 10.1109/LICS.2004.1319598
   Popeea C, 2012, LECT NOTES COMPUT SC, V7214, P237, DOI 10.1007/978-3-642-28756-5_17
   Pouchet L-N, POLYBENCH C POLYHEDR
   Ströder T, 2014, LECT NOTES ARTIF INT, V8562, P208, DOI 10.1007/978-3-319-08587-6_15
NR 42
TC 3
Z9 3
U1 0
U2 4
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 15
PY 2017
VL 148
SI SI
BP 107
EP 122
DI 10.1016/j.scico.2017.04.009
PG 16
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA FJ8ZB
UT WOS:000413056100007
OA Bronze
DA 2024-07-18
ER

PT J
AU Asada, K
   Sato, R
   Kobayashi, N
AF Asada, Kazuyuki
   Sato, Ryosuke
   Kobayashi, Naoki
TI Verifying relational properties of functional programs by first-order
   refinement
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Automated verification; Higher-order functional language; Refinement
   types
AB Much progress has been made recently on fully automated verification of higher-order functional programs, based on refinement types and higher-order model checking. Most of those verification techniques are, however, based on first-order refinement types, hence unable to verify certain properties of flinctions (such as the equality of two recursive functions and the monotonicity of a function, which we call relational properties). To relax this limitation, we introduce a restricted form of higher-order refinement types where refinement.predicates can refer td functions, and formalize a systematic program transformation to reduce type checking/inference for higher-order refinement types to that for first-order refinement types, so that the latter can be automatically solved by using an existing software model checker. We also prove the soundness of the transformation, and report on implementation and experiments. (C) 2016 Elsevier B.V. All rights reserved.
C1 [Asada, Kazuyuki; Sato, Ryosuke; Kobayashi, Naoki] Univ Tokyo, Tokyo 1138654, Japan.
C3 University of Tokyo
RP Asada, K; Sato, R; Kobayashi, N (corresponding author), Univ Tokyo, Tokyo 1138654, Japan.
EM asada@kb.is.s.u-tokyo.ac.jp; ryosuke@kb.is.s.u-tokyo.ac.jp;
   koba@kb.is.s.u-tokyo.ac.jp
RI Sato, Ryosuke/KCY-8676-2024; Asada, Kazuyuki/T-6595-2019
OI Sato, Ryosuke/0000-0001-8679-2747; Asada, Kazuyuki/0000-0001-8782-2119;
   Kobayashi, Naoki/0000-0002-0537-0604
FU Kakenhi [23220001, 15H05706]; Grants-in-Aid for Scientific Research
   [23220001] Funding Source: KAKEN
FX We would like to thank Naohiko Hoshino and anonymous referees for useful
   comments. This work was supported by Kakenhi 23220001 and 15H05706.
CR [Anonymous], 2012, P ACM SIGPLAN 2012 W
   [Anonymous], 1992, Semantics of programming languages: structures and techniques
   Barthe G, 2014, ACM SIGPLAN NOTICES, V49, P193, DOI 10.1145/2535838.2535847
   Bengtson J, 2011, ACM T PROGR LANG SYS, V33, DOI 10.1145/1890028.1890031
   Honda K, 1999, THEOR COMPUT SCI, V221, P393, DOI 10.1016/S0304-3975(99)00039-0
   Hongwei Xu, 1999, Conference Record of POPL '99. 26th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P214
   Knowles K, 2007, LECT NOTES COMPUT SC, V4421, P505
   Knowles K, 2010, ACM T PROGR LANG SYS, V32, DOI 10.1145/1667048.1667051
   Kobayashi N, 2013, J ACM, V60, DOI 10.1145/2487241.2487246
   Kobayashi N, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P222
   Moggi E., 1989, Proceedings. Fourth Annual Symposium on Logic in Computer Science (Cat. No.89CH2753-2), P14, DOI 10.1109/LICS.1989.39155
   Ong CHL, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P587, DOI 10.1145/1926385.1926453
   Rondon PM, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P159, DOI 10.1145/1375581.1375602
   Sato Ryosuke, 2013, P PEPM 2013, P53
   Suter P, 2011, LECT NOTES COMPUT SC, V6887, P298, DOI 10.1007/978-3-642-23702-7_23
   Suter P, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P199, DOI 10.1145/1706299.1706325
   Terauchi T, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P119, DOI 10.1145/1706299.1706315
   Unno H, 2013, ACM SIGPLAN NOTICES, V48, P75, DOI 10.1145/2480359.2429081
   Unno H, 2009, PPDP'09: PROCEEDINGS OF THE 11TH INTERNATIONAL ACM SIGPLAN SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING, P277, DOI 10.1145/1599410.1599445
   Vazou N, 2013, LECT NOTES COMPUT SC, V7792, P209, DOI 10.1007/978-3-642-37036-6_13
   Wei-Ngan Chin, 1993, Proceedings of the ACM SIGPLAN Symposium on Partial Evaluation and Semantics-Based Program Manipulation. PEPM'93, P119, DOI 10.1145/154630.154643
   Xu DN, 2009, ACM SIGPLAN NOTICES, V44, P41, DOI 10.1145/1594834.1480889
   Zhu H, 2013, LECT NOTES COMPUT SC, V7737, P295
NR 23
TC 6
Z9 8
U1 0
U2 2
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD APR 1
PY 2017
VL 137
BP 2
EP 62
DI 10.1016/j.scico.2016.02.007
PG 61
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA EO8WY
UT WOS:000396972400002
OA hybrid
DA 2024-07-18
ER

PT J
AU Hebig, R
   Wang, HY
AF Hebig, Regina
   Wang, Haoyu
TI On tackling quality threats for the assessment of measurement programs:
   A case study on the distribution of metric usage and knowledge
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Measurement programs; Robust assessment; Empirical study
ID SOFTWARE PROCESS IMPROVEMENT; AGILE; PERFORMANCE; SUCCESS; TEAM
AB Context Measurement programs are subject to changing requirements, causing the need for a robustness to compensate these changes. Existing methods enable the assessment of measurement programs and their robustness with the help of company representatives. Goal: However, it is not clear how much the spread of knowledge among roles and differences between company internal organizations influence the result and quality of the assessment. Thus, it is not known today who and how many representatives should be interviewed to get reliable results. Method: To address these points we performed a case study on the assessment method MeSRAM, spanning 18 interviews with 14 representatives of 4 different organizations within a large international communication company. Results: Managers are able to answer more questions and their answers are more often correct than those of engineers. Furthermore, most errors occur for questions about the use of concrete metrics, while for aspects about the metrics' infrastructure no conflicting answers occurred. We also identified 6 reasons for gaining incorrect answers. Conclusion: The assessment of measurement programs requires additional care to ensure the quality of the results. (C) 2016 Elsevier B.V. All rights reserved.
C1 [Hebig, Regina] Chalmers Univ Gothenburg, SE-41296 Gothenburg, Sweden.
   [Wang, Haoyu] Ericsson China Commun Co Ltd, CBC, Beijing, Peoples R China.
C3 Chalmers University of Technology; Ericsson
RP Hebig, R (corresponding author), Chalmers Univ Gothenburg, SE-41296 Gothenburg, Sweden.
EM hebig@chalmers.se; haoyu.h.wang@ericsson.com
RI Yalvaç, Dilara/D-4093-2018; Hebig, Regina/B-5284-2015
OI Hebig, Regina/0000-0002-1459-2081; Wang, Haoyu/0000-0002-5972-0569
CR Agarwal A, 2006, EUR J OPER RES, V173, P211, DOI 10.1016/j.ejor.2004.12.005
   Alshayeb M, 2005, J SYST SOFTWARE, V74, P269, DOI 10.1016/j.jss.2004.02.002
   [Anonymous], 2013, P LEAN ENT SOFTW SYS
   [Anonymous], P MENSURA
   [Anonymous], 2002, Balanced Scorecard, Step by Step
   [Anonymous], ISO 9000 HDB
   Baddoo N, 2002, J SYST SOFTWARE, V62, P85, DOI 10.1016/S0164-1212(01)00125-X
   Baddoo N., 2002, Software Process Improvement and Practice, V7, P17, DOI 10.1002/spip.151
   Beecham S, 2003, EMPIR SOFTW ENG, V8, P7, DOI 10.1023/A:1021764731148
   Boehm B, 2002, COMPUTER, V35, P64, DOI 10.1109/2.976920
   Briand LC, 2000, J SYST SOFTWARE, V51, P245, DOI 10.1016/S0164-1212(99)00102-8
   Buglione L, 2002, ADV ENG SOFTW, V33, P1, DOI 10.1016/S0965-9978(01)00050-3
   Buglione L., 1999, P INT WORKSH SOFTW M, P1
   Catal C, 2009, EXPERT SYST APPL, V36, P7346, DOI 10.1016/j.eswa.2008.10.027
   COMER P, 1993, SOFTWARE QUAL J, V2, P277, DOI 10.1007/BF00403770
   DASKALANTONAKIS MK, 1990, QUAL ENG, V3, P27
   Dess GG, 2001, ACAD MANAGE REV, V26, P446, DOI 10.2307/259187
   Díaz-Ley M, 2008, IET SOFTW, V2, P417, DOI 10.1049/iet-sen:20080026
   Díaz-Ley M, 2010, ADV ENG SOFTW, V41, P1223, DOI 10.1016/j.advengsoft.2010.06.007
   Dingsoyr T, 2014, IT PROF, V16, P22, DOI 10.1109/MITP.2013.19
   Dubinsky Y, 2005, AGILE 2005, Proceedings, P12, DOI 10.1109/ADC.2005.8
   Duvall Paul M., 2007, Continuous integration: improving software quality and reducing risk
   Dybå T, 2005, IEEE T SOFTWARE ENG, V31, P410, DOI 10.1109/TSE.2005.53
   Ghobadi S, 2015, INFORM MANAGE-AMSTER, V52, P82, DOI 10.1016/j.im.2014.10.008
   Green GC, 2005, INFORM SOFTWARE TECH, V47, P543, DOI 10.1016/j.infsof.2004.10.004
   Guinan PJ, 1998, INFORM SYST RES, V9, P101, DOI 10.1287/isre.9.2.101
   Harjumaa L, 2008, LECT NOTES COMPUT SC, V5089, P230, DOI 10.1007/978-3-540-69566-0_20
   Hartmann D, 2006, AGILE 2006, Proceedings, P126, DOI 10.1109/AGILE.2006.17
   Heidenberg Jeanette, 2010, Proceedings of the 2010 17th IEEE International Conference and Workshops on Engineering of Computer-Based Systems (ECBS 2010), P306, DOI 10.1109/ECBS.2010.43
   Heidenberg J, 2013, LECT NOTES BUS INF P, V149, P165
   da Costa JMH, 2014, R&D MANAGE, V44, P370, DOI 10.1111/radm.12074
   Kettunen P, 2009, TECHNOVATION, V29, P408, DOI 10.1016/j.technovation.2008.10.003
   Kilpi T, 2001, IEEE SOFTWARE, V18, P72, DOI 10.1109/52.965808
   Layman L, 2006, J SYST ARCHITECT, V52, P654, DOI 10.1016/j.sysarc.2006.06.009
   Lee CL, 2011, MANAGE ACCOUNT RES, V22, P84, DOI 10.1016/j.mar.2010.10.003
   Lehman WEK, 2002, J SUBST ABUSE TREAT, V22, P197, DOI 10.1016/S0740-5472(02)00233-7
   Maximilien EM, 2003, PROC INT CONF SOFTW, P564, DOI 10.1109/ICSE.2003.1201238
   Niessink F, 2001, INFORM SOFTWARE TECH, V43, P617, DOI 10.1016/S0950-5849(01)00168-9
   Petersen K, 2012, LECT NOTES BUS INF P, V111, P108
   Rus I, 2002, IEEE SOFTWARE, V19, P26, DOI 10.1109/MS.2002.1003450
   Schuh P., 2004, Integrating Agile Development in the Real World (Programming Series)
   Shahnewaz S., 2014, SEKE, P437
   Staron M, 2016, J SYST SOFTWARE, V113, P76, DOI 10.1016/j.jss.2015.10.051
   Staron M, 2012, LECT NOTES BUS INF P, V111, P93
   Staron M, 2013, 2013 JOINT CONFERENCE OF THE 23RD INTERNATIONAL WORKSHOP ON SOFTWARE MEASUREMENT AND THE 2013 EIGHTH INTERNATIONAL CONFERENCE ON SOFTWARE PROCESS AND PRODUCT MEASUREMENT (IWSM-MENSURA), P191, DOI 10.1109/IWSM-Mensura.2013.35
   Tahir T, 2016, INFORM SOFTWARE TECH, V73, P101, DOI 10.1016/j.infsof.2016.01.014
   Vasanthapriyan S, 2015, 2015 IEEE INTERNATIONAL CONFERENCE ON SOFTWARE QUALITY, RELIABILITY AND SECURITY - COMPANION (QRS-C 2015), P237, DOI 10.1109/QRS-C.2015.48
   Viana Davi, 2012, 16th International Conference on Evaluation & Assessment in Software Engineering (EASE 2012), P121, DOI 10.1049/ic.2012.0015
   WALZ DB, 1993, COMMUN ACM, V36, P63, DOI 10.1145/163430.163447
   Wohlin C., 2012, Experimentation in Software Engineering
   Xenos M, 1997, INFORM SOFTWARE TECH, V39, P417, DOI 10.1016/S0950-5849(96)01154-8
NR 51
TC 1
Z9 1
U1 0
U2 6
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 15
PY 2017
VL 135
SI SI
BP 45
EP 74
DI 10.1016/j.scico.2016.09.006
PG 30
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA EJ5OM
UT WOS:000393267600004
OA hybrid
DA 2024-07-18
ER

PT J
AU Hansen, D
   Leuschel, M
AF Hansen, Dominik
   Leuschel, Michael
TI Translating B to TLA<SUP>+</SUP> for validation with TLC
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE B-Method; TLA(+); Tool support; Model checking; Animation
ID MODEL CHECKING
AB The state-based formal methods B and TLA(+) share the common base of predicate logic, arithmetic and set theory. However, there are still considerable differences, such as the way to specify state transitions, the different approaches to typing, and the available tool support. In this paper, we present a translation from B to TLA(+) so as to validate B specifications using the model checker TLC. The translation includes many adaptations and optimizations to allow for efficient checking by TLC. Moreover, we present a way to validate liveness properties for B specifications under fairness conditions. Our implemented translator, TLC4B, automatically translates a B specification to TLA(+), invokes the model checker TLC, and translates the results back to B. We use PROB to double check the counter examples produced by TLC and replay them in the PROB animator. TLC4B can also transmit constant values, precalculated by PROB, to TLC. This allows the user to combine the strength of both tools, i.e. PROB's constraint solving abilities and TLC's highly tuned model checking core. Furthermore, we demonstrate an approach to optimize the model checking process by encoding proof information in the translated TLA(+) specification. We also present a series of case studies and benchmark tests comparing TLC4B and PROB. (C) 2016 Elsevier B.V. All rights reserved.
C1 [Hansen, Dominik; Leuschel, Michael] Univ Dusseldorf, Inst Informat, Dusseldorf, Germany.
C3 Heinrich Heine University Dusseldorf
RP Hansen, D; Leuschel, M (corresponding author), Univ Dusseldorf, Inst Informat, Dusseldorf, Germany.
EM hansen@cs.uni-duesseldorf.de; leuschel@cs.uni-duesseldorf.de
FU EU FP7 project [287563]; DFG [LE 2377/1-2]
FX Part of this research has been sponsored by the EU funded FP7 project
   287563 (ADVANCE) and the DFG funded project LE 2377/1-2 (Gepavas). We
   are grateful to Ivaylo Dobrikov for various discussions and support in
   developing the Tcl/Tk interface of TLc4B. Finally, we are grateful to
   the reviewers of ABZ and SCP for their constructive feedback.
CR Aaltonen T, 2001, J UNIVERS COMPUT SCI, V7, P3
   Abrial J.-R., 2003, Formal Aspects of Computing, V14, P215, DOI 10.1007/s001650300002
   Abrial J R, 2010, Modeling in Event-B: system and softeng
   Abrial J-R., 1996, The B Book
   Arid IAS, 2008, COMM COM INF SC, V17, P37
   Bendisposto J., 2015, THESIS
   Bendisposto J, 2009, LECT NOTES COMPUT SC, V5885, P504, DOI 10.1007/978-3-642-10373-5_26
   Bernard E, 2004, SOFTWARE PRACT EXPER, V34, P915, DOI 10.1002/spe.597
   Bernin F., 2004, CHDL SERIES
   BOWEN J, 1995, INFORM SOFTWARE TECH, V37, P269, DOI 10.1016/0950-5849(95)99362-Q
   Cousineau D., 2012, LECT NOTES COMPUTER, V7436, P147, DOI 10.1007/978-3-642-32759-914
   Déharbe D, 2013, SCI COMPUT PROGRAM, V78, P310, DOI 10.1016/j.scico.2011.03.007
   Derrick J, 2011, FORM ASP COMPUT, V23, P43, DOI 10.1007/s00165-009-0126-7
   Drey Z, 2009, LECT NOTES COMPUT SC, V5658, P78, DOI 10.1007/978-3-642-03034-5_5
   Frappier M, 2010, LECT NOTES COMPUT SC, V6447, P581, DOI 10.1007/978-3-642-16901-4_38
   Gafni E, 2003, DISTRIB COMPUT, V16, P1, DOI [10.1007/s00446-002-0070-8, 10.1007/S00446-002-0070-8]
   Graw Gunter., 2004, Electronic Notes in Theoretical Computer Science, V101, P3, DOI DOI 10.1016/J.ENTCS.2004.09.006
   Grieskamp W., 2000, ZB 2000: Formal Specification and Development in Z and B. First International Conference of B and Z Users. Proceedings (Lecture Notes in Computer Science Vol.1878), P414
   Hallerstede S, 2003, SYSTEM SPECIFICATION AND DESIGN LANGUAGES, P315
   Hansen D., 2012, LNCS, V7321, P24, DOI 10.1007/978-3-642-30729-43
   Hansen D, 2014, LECT NOTES COMPUT SC, V8477, P40, DOI 10.1007/978-3-662-43652-3_4
   Ifill W, 2001, SPRING INT SER ENG C, V577, P43
   Kolyang T., 1996, P 9 INT C THEOR PROV, P283
   Kraemer FA, 2009, J SYST SOFTWARE, V82, P2068, DOI 10.1016/j.jss.2009.06.057
   Lamport L., 2015, TLA HYPERBOOK
   Lamport L., 2002, SPECIFYING SYSTEMS T
   Lamport L, 2009, LECT NOTES COMPUT SC, V5684, P36, DOI 10.1007/978-3-642-03466-4_2
   Langbacka T., 1994, Higher Order Logic Theorem Proving and Its Applications. 7th International Workshop Proceedings, P332
   Leuschel Michael, 2008, International Journal on Software Tools for Technology Transfer, V10, P185, DOI 10.1007/s10009-007-0063-9
   Leuschel M, 2014, LECT NOTES COMPUT SC, V8477, P101, DOI 10.1007/978-3-662-43652-3_8
   Leuschel M, 2010, ANN MATH ARTIF INTEL, V59, P81, DOI 10.1007/s10472-010-9208-8
   Malik P, 2010, LECT NOTES COMPUT SC, V5977, P377, DOI 10.1007/978-3-642-11811-1_28
   Mammar A., 2014, FORM ASP COMPUT, P1
   Mikhailov L., 2002, ZB 2002: Formal Specification and Development in Z and B. 2nd International Conference of B and Z Users. Proceedings (Lecture Notes in Computer Science Vol.2272), P140
   Mosbahi O, 2007, ICSOFT 2007: PROCEEDINGS OF THE SECOND INTERNATIONAL CONFERENCE ON SOFTWARE AND DATA TECHNOLOGIES, VOL SE, P304
   Plagge Daniel, 2012, FM 2012: Formal Methods. Proceedings of the 18th International Symposium, P372, DOI 10.1007/978-3-642-32759-9_31
   Plagge D., 2010, STTT, V11, P9
   Reynolds M., 1998, TR9802 KINGS COLL LO
   Yu Y, 1999, LECT NOTES COMPUT SC, V1703, P54
NR 39
TC 3
Z9 4
U1 0
U2 2
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 1
PY 2016
VL 131
BP 109
EP 125
DI 10.1016/j.scico.2016.04.014
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA EB8FQ
UT WOS:000387627300008
OA Bronze
DA 2024-07-18
ER

PT J
AU Jafari, A
   Khamespanah, E
   Sirjani, M
   Hermanns, H
   Cimini, M
AF Jafari, Ali
   Khamespanah, Ehsan
   Sirjani, Marjan
   Hermanns, Holger
   Cimini, Matteo
TI PTRebeca: Modeling and analysis of distributed and asynchronous systems
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Probabilistic Timed Automata; Timed Markov Decision Process; IMCA model
   checker; Probabilistic Timed Rebeca; Model checking; Performance
   analysis
AB Distributed systems exhibit probabilistic and non-deterministic behaviors and may have time constraints. Probabilistic Timed Rebeca (PTRebeca) is introduced as a timed and probabilistic actor-based language for modeling distributed real-time systems with asynchronous message passing. The semantics of PTRebeca is a Timed Markov Decision Process. In this paper, we provide SOS rules for PTRebeca, introduce a new tool-set and describe the corresponding mappings. The tool-set automatically generates a Markov Automaton from a PTRebeca model in the form of the input language of the Interactive Markov Chain Analyzer (IMCA). The IMCA can be used as a back-end model checker for performance analysis of PTRebeca models against expected reachability and probabilistic reachability properties. Comparing to the existing tool-set, proposed in the conference paper, we now have the ability of analyzing significantly larger models, and we also can add different rewards to the model. We show the applicability of our approach and efficiency of our tool by analyzing a Network on Chip architecture as a real-world case study. (C) 2016 Elsevier B.V. All rights reserved.
C1 [Jafari, Ali; Khamespanah, Ehsan; Sirjani, Marjan] Reykjavik Univ, Sch Comp Sci, Reykjavik, Iceland.
   [Jafari, Ali; Khamespanah, Ehsan; Sirjani, Marjan] CRESS, Reykjavik, Iceland.
   [Khamespanah, Ehsan] Univ Tehran, Sch ECE, Tehran, Iran.
   [Sirjani, Marjan] Malardalen Univ, Embedded Syst, Vasteras, Sweden.
   [Hermanns, Holger] Univ Saarland, Sch Comp Sci, D-66123 Saarbrucken, Germany.
   [Cimini, Matteo] Indiana Univ, Ctr Res Extreme Scale Technol, Bloomington, IN 47405 USA.
C3 Reykjavik University; University of Tehran; Malardalen University;
   Saarland University; Indiana University System; Indiana University
   Bloomington
RP Jafari, A (corresponding author), Reykjavik Univ, Sch Comp Sci, Reykjavik, Iceland.; Jafari, A (corresponding author), CRESS, Reykjavik, Iceland.
EM ali11@ru.is
OI Hermanns, Holger/0000-0002-2766-9615
FU project "Timed Asynchronous Reactive Objects in Distributed Systems:
   TARO" of the Icelandic Research Fund [110020021]
FX The work on this paper was supported by the project "Timed Asynchronous
   Reactive Objects in Distributed Systems: TARO" (nr. 110020021) of the
   Icelandic Research Fund.
CR Aceto L, 2011, ELECTRON P THEOR COM, P1, DOI 10.4204/EPTCS.58.1
   Agha G., 1991, REX WORKSH, V489, P1
   Agha G., 1990, ACTORS-A Model of Concurrent Computation in Distributed Systems, Artificial Intelligence
   Agha G. A., 1997, Journal of Functional Programming, V7, P1, DOI 10.1017/S095679689700261X
   Agha G, 2006, ELECTRON NOTES THEOR, V153, P213, DOI 10.1016/j.entcs.2005.10.040
   [Anonymous], 1981, Technical Report DAIMI FN-19
   Astley M., ACTOR FOUNDRY JAVA B
   Baier C., 2004, PROBMELA MODELING LA
   Baier C, 2010, COMMUN ACM, V53, P76, DOI 10.1145/1810891.1810912
   Bentea Lucian, 2012, Formal Verification of Object-Oriented Software. International Conference, FoVeOOS 2011. Revised Selected Papers, P105, DOI 10.1007/978-3-642-31762-0_8
   BERTSEKAS DP, 1991, MATH OPER RES, V16, P580, DOI 10.1287/moor.16.3.580
   Ciesinski F, 2008, LECT NOTES COMPUT SC, V5156, P60, DOI 10.1007/978-3-540-85114-1_7
   Ciesinski F, 2006, INT CONF QUANT EVAL, P131
   Coste N, 2009, LECT NOTES COMPUT SC, V5643, P204, DOI 10.1007/978-3-642-02658-4_18
   David A, 2015, INT J SOFTW TOOLS TE, V17, P17, DOI 10.1007/s10009-013-0286-x
   de Alfaro L, 1999, LECT NOTES COMPUT SC, V1664, P66
   Derman C, 1970, Finite State Markovian Decision Processes
   Eisentraut C, 2010, IEEE S LOG, P342, DOI 10.1109/LICS.2010.41
   Guck Dennis, 2013, Quantitative Evaluation of Systems. 10th International Conference, QEST 2013. Proceedings: LNCS 8054, P55, DOI 10.1007/978-3-642-40196-1_5
   Guck Dennis, 2012, NASA Formal Methods. Proceedings of the 4th International Symposium, NFM 2012, P8, DOI 10.1007/978-3-642-28891-3_4
   Guck D, 2014, LOG METH COMPUT SCI, V10, DOI 10.2168/LMCS-10(3:17)2014
   Guck D, 2014, LECT NOTES COMPUT SC, V8837, P168, DOI 10.1007/978-3-319-11936-6_13
   Hahn EM, 2013, FORM METHOD SYST DES, V43, P191, DOI 10.1007/s10703-012-0167-z
   Haller P, 2007, LECT NOTES COMPUT SC, V4467, P171
   Hartmanns A, 2009, INT CONF QUANT EVAL, P187, DOI 10.1109/QEST.2009.41
   Hermanns H., 2002, INTERACTIVE MARKOV C
   HEWITT C, 1972, THESIS MIT CAMBRIDGE
   Hinton A, 2006, LECT NOTES COMPUT SC, V3920, P441
   Holzmann GJ, 1997, IEEE T SOFTWARE ENG, V23, P279, DOI 10.1109/32.588521
   Hosseini A, 2008, IEEE INT SYMP CIRC S, P2653, DOI 10.1109/ISCAS.2008.4542002
   Jafari A., 2014, P AVOCS 14
   Johnsen EB, 2007, SOFTW SYST MODEL, V6, P39, DOI 10.1007/s10270-006-0011-2
   Karmani R.K., 2009, P 7 INT C PRINC PRAC, P11
   Khamespanah E., 2014, J SCI COMPUTER PROGR
   Khamespanah Ehsan, 2016, P SPIN 16
   Kwiatkowska M, 2006, FORM METHOD SYST DES, V29, P33, DOI 10.1007/s10703-006-0005-2
   Lamport L, 2005, LECT NOTES COMPUT SC, V3725, P162
   Linderman LE, 2013, STRUCT CONTROL HLTH, V20, P1007, DOI 10.1002/stc.1514
   Segala R., 1995, THESIS
   Sen K, 2005, INT CONF QUANT EVAL, P251, DOI 10.1109/QEST.2005.42
   Sharifi Z., 2013, P PDPTA 13
   Sharifi Z., 2013, P AVOCS 13
   Sirjani M, 2004, FUND INFORM, V63, P385
   Sirjani M., 2001, CSTR8001
   Sirjani M, 2011, LECT NOTES COMPUT SC, V7000, P20, DOI 10.1007/978-3-642-24933-4_3
   Srinivasan S, 2008, LECT NOTES COMPUT SC, V5142, P104, DOI 10.1007/978-3-540-70592-5_6
   Varshosaz Mahsa., 2012, Formal Methods and Software Engineering, volume 7635 of Lecture Notes in Computer Science, V7635, P135, DOI DOI 10.1007/978-3-642-34281-312
NR 47
TC 17
Z9 17
U1 0
U2 6
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 15
PY 2016
VL 128
SI SI
BP 22
EP 50
DI 10.1016/j.scico.2016.03.004
PG 29
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DS2JI
UT WOS:000380595400003
DA 2024-07-18
ER

PT J
AU Lahami, M
   Krichen, M
   Jmaiel, M
AF Lahami, Mariam
   Krichen, Moez
   Jmaiel, Mohamed
TI Safe and efficient runtime testing framework applied in dynamic and
   distributed systems
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Runtime testing; Dynamic structural adaptations; Distributed test
   execution; Resource awareness; TTCN-3
ID VERIFICATION
AB This paper provides a standard-based and resource aware Runtime Testing Framework For Adaptable and Distributed Systems (RTF4ADS). Based on the runtime testing approach, RTF4ADS performs safely and efficiently tests on the final operational environment of such dynamic systems. Indeed, our proposal (1) looks for a minimal set of tests to re execute written in a standardized notation, (2) assigns the involved test components in execution nodes while respecting resources and connectivity constraints and finally (3) performs distributed testing at runtime while it prevents test processes from interfering with business processes. Implementation details of the proposed research prototype are presented. To demonstrate the validity and the usefulness of RTF4ADS, a case study in the healthcare domain implemented using the Open Services Gateway Initiative (OSGi) platform is illustrated. The experiments that we conducted show a reasonable overhead introduced by RTF4ADS. They also demonstrate the efficiency of this framework in testing dynamic and distributed systems while reducing side effects of this validation technique. (C) 2016 Elsevier B.V. All rights reserved.
C1 [Lahami, Mariam; Krichen, Moez; Jmaiel, Mohamed] Univ Sfax, Natl Sch Engineers Sfax, ReDCAD Lab, BP 1173, Sfax 3038, Tunisia.
   [Krichen, Moez] Al Baha Univ, Fac Comp Sci & Informat Technol, Al Baha, Saudi Arabia.
   [Jmaiel, Mohamed] Res Ctr Comp Sci Multimedia & Digital Data Proc S, BP 275, Sakiet Ezzit 3021, Sfax, Tunisia.
C3 Universite de Sfax; Ecole Nationale dIngenieurs de Sfax (ENIS); Al Baha
   University; Universite de Sfax; Centre de Recherche en Numerique de Sfax
   (CRNS)
RP Lahami, M (corresponding author), Univ Sfax, Natl Sch Engineers Sfax, ReDCAD Lab, BP 1173, Sfax 3038, Tunisia.
EM mariam.lahami@redcad.org
RI Krichen, Moez/AAH-5074-2020
OI Krichen, Moez/0000-0001-8873-9755; Lahami, Mariam/0000-0002-2231-6917
CR Alhazbi Saleh, 2007, Journal of Computer Sciences, V3, P499, DOI 10.3844/jcssp.2007.499.505
   [Anonymous], 2006, P 6 INT WORKSH SOFTW
   [Anonymous], 10 INT WORKSH SOFTW
   [Anonymous], 2013, SOFTWARE ENG SELF AD
   [Anonymous], 2010, PRINCIPLES APPL DIST
   [Anonymous], 2003, P 6 INT S AUT DEC SY
   [Anonymous], P 14 VLDB C LOS ANG
   Bai XY, 2007, P INT COMP SOFTW APP, P368
   Barringer H, 2007, LECT NOTES COMPUT SC, V4839, P97
   Bianculli D., 2013, P 2 INT WORKSH QUAL
   Bourcier J., 2008, THESIS U JOSEPH FOUR
   Brandes U., 2001, GRAPH DRAWING, P501
   Brenner D, 2007, INFORM SYST FRONT, V9, P151, DOI 10.1007/s10796-007-9029-4
   Chatley R, 2004, LECT NOTES COMPUT SC, V2984, P129
   CHEN IY, 2008, 6 ANN IEEE INT C PER, P704
   Chu Matt, 2008, 2008 First IEEE International Conference on Software Testing, Verification and Validation (ICST '08), P509, DOI 10.1109/ICST.2008.13
   De Angelis F, 2014, LECT NOTES COMPUT SC, V8829, P107, DOI 10.1007/978-3-319-11737-9_8
   ETSI, 2005, METH TEST SPEC MTS T
   Fredericks EM, 2014, 9TH INTERNATIONAL SYMPOSIUM ON SOFTWARE ENGINEERING FOR ADAPTIVE AND SELF-MANAGING SYSTEMS (SEAMS 2014), P17, DOI 10.1145/2593929.2593937
   Fredericks EM, 2013, PROCEEDINGS OF THE 8TH INTERNATIONAL SYMPOSIUM ON SOFTWARE ENGINEERING FOR ADAPTIVE AND SELF-MANAGING SYSTEMS (SEAMS 2013), P169, DOI 10.1109/SEAMS.2013.6595504
   Goldsby HJ, 2008, LECT NOTES COMPUT SC, V5002, P212
   González A, 2009, IEEE ICST WORKSHOP, P19, DOI 10.1109/ICSTW.2009.9
   González A, 2008, 2008 23RD IEEE/ACM INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING WORKSHOPS, PROCEEDINGS, P41, DOI 10.1109/ASEW.2008.4686292
   Graves TL, 2001, ACM T SOFTW ENG METH, V10, P184, DOI 10.1145/367008.367020
   Greiler Michaela, 2010, P 2 INT WORKSHOP PRI, P36
   Hielscher J, 2008, LECT NOTES COMPUT SC, V5377, P122, DOI 10.1007/978-3-540-89897-9_11
   Institute of Electrical and Electronics Engineers (IEEE), 610121990R2002 IEEE
   Inverardi P, 1998, NINTH INTERNATIONAL WORKSHOP ON SOFTWARE SPECIFICATION AND DESIGN, PROCEEDINGS, P116, DOI 10.1109/IWSSD.1998.667926
   Jussien Narendra., 2008, Open-Source Software for Integer and Contraint Programming, OSSICP'08, P1
   King Tariq M., 2011, Autonomic and Trusted Computing. Proceedings 8th International Conference (ATC 2011), P31, DOI 10.1007/978-3-642-23496-5_3
   KRAMER J, 1985, IEEE T SOFTWARE ENG, V11, P424, DOI 10.1109/TSE.1985.232231
   Lahami M., 2011, REV NOUVELLES TECHNO
   Li BX, 2005, ACM SIGPLAN NOTICES, V40, P29, DOI 10.1145/1107541.1107546
   Meetei Mutum Zico, 2012, 2012 5th International Conference on BioMedical Engineering and Informatics (BMEI), P1326, DOI 10.1109/BMEI.2012.6512950
   Murphy C, 2009, SECOND INTERNATIONAL CONFERENCE ON SOFTWARE TESTING, VERIFICATION, AND VALIDATION, PROCEEDINGS, P111, DOI 10.1109/ICST.2009.18
   Niebuhr D, 2009, 4TH ACM INTERNATIONAL WORKSHOP ON SERVICES INTEGRATION IN PERVASIVE ENVIRONMENTS-SIPE 09, P7
   Nielsen B., 2012, LECT NOTES COMPUTER, V7641
   Open Services Gateway Initiative, 2005, OSGI SERV GAT SPEC
   Pan N., 2012, Proceedings of the 2012 ACM Research in Applied Computation Symposium, P356, DOI DOI 10.1145/2401603.2401682
   PIEL E, 2009, P 2009 ESEC FSE WORK, P3
   Piel É, 2010, LECT NOTES COMPUT SC, V6435, P79, DOI 10.1007/978-3-642-16573-3_7
   Ramirez Alain., 2008, ACM SE 46, P304
   Reddy S., 2013, WORKSH EN TECHN INFR
   Rothermel G, 1996, IEEE T SOFTWARE ENG, V22, P529, DOI 10.1109/32.536955
   Schieferdecker I, 2010, LECT NOTES COMPUT SC, V6435, P1, DOI 10.1007/978-3-642-16573-3_1
   Suliman D, 2006, P INT COMP SOFTW APP, P171
   Varshney U, 2007, MOBILE NETW APPL, V12, P113, DOI 10.1007/s11036-007-0017-1
   Wang QX, 2004, P INT COMP SOFTW APP, P166
   Zouari M, 2014, J UNIVERS COMPUT SCI, V20, P431
NR 49
TC 24
Z9 24
U1 0
U2 9
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 15
PY 2016
VL 122
BP 1
EP 28
DI 10.1016/j.scico.2016.02.002
PG 28
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DI5NN
UT WOS:000373546000001
OA Bronze
DA 2024-07-18
ER

PT J
AU Leather, S
   Jeuring, J
   Löh, A
   Schuur, B
AF Leather, Sean
   Jeuring, Johan
   Loh, Andres
   Schuur, Bram
TI Type-changing rewriting and semantics-preserving transformation
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Automatic program transformation; Type-changing rewriting;
   Semantics-preserving program transformation; Type-and-transform systems
AB We have identified a class of whole-program transformations that are regular in structure and require changing the types of terms throughout a program while simultaneously preserving the initial semantics after transformation. This class of transformations cannot be safely performed with typical term rewriting techniques, which do not allow for changing the types of terms.
   In this paper, we present a formalization of type-and-transform systems, an automated approach to the whole-program transformation of terms of one type to terms of a different, isomorphic type using type-changing rewrite rules. A type-and-transform system defines typing and semantics relations between all corresponding source and target subprograms such that a complete transformation guarantees that the whole programs have equivalent types and semantics. We describe the type-and-transform system for the lambda calculus with let-polymorphism and general recursion, including several examples from the literature and properties of the system. (C) 2015 Elsevier B.V. All rights reserved.
C1 [Leather, Sean; Jeuring, Johan; Schuur, Bram] Univ Utrecht, NL-3508 TC Utrecht, Netherlands.
   [Jeuring, Johan] Open Univ, Heerlen, Netherlands.
   [Loh, Andres] Well Typed LLP, Regensburg, Germany.
C3 Utrecht University; Open University Netherlands
RP Leather, S (corresponding author), Univ Utrecht, NL-3508 TC Utrecht, Netherlands.
EM s.p.leather@uu.nl; j.t.jeuring@uu.nl; andres@well-typed.com;
   bramschuur@gmail.com
OI Loh, Andres/0000-0002-7492-7293
FU Netherlands Organization for Scientific Research (NWO) through project
   "Real-Life Datatype-Generic Programming" [612.063.613]
FX This work has been partially funded by the Netherlands Organization for
   Scientific Research (NWO) through the project "Real-Life
   Datatype-Generic Programming" (612.063.613).
CR Baader Franz, 1998, TERM REWRITING ALL
   Backhouse R., 1995, Category Theory and Computer Science. 6th International Conference, CTCS '95 Proceedings, P159
   Coutts D, 2007, LECT NOTES COMPUT SC, V4354, P50
   Cunha A., 2006, Proceedings of the 7th International Workshop on Rule-Based Programming (RULE 2006), ENTCS, P17
   Damas L., 1982, C REC 9 ANN ACM S PR, P207, DOI DOI 10.1145/582153.582176
   Erwig M, 2007, SCI COMPUT PROGRAM, V67, P199, DOI 10.1016/j.scico.2007.01.003
   Farmer A, 2012, ACM SIGPLAN NOTICES, V47, P1, DOI 10.1145/2430532.2364508
   Fowler M., 2018, Refactoring: Improving the Design of Existing Code
   Freyd P., 1990, Proceedings. Fifth Annual IEEE Symposium on Logic in Computer Science (90CH2897-7), P498, DOI 10.1109/LICS.1990.113772
   Gibbons J, 2007, LECT NOTES COMPUT SC, V4719, P1
   Gibbons J, 2008, LECT NOTES COMPUT SC, V5133, P110
   Gifford DK, 1986, P 1986 ACM C LISP FU, P28, DOI DOI 10.1145/319838.319848
   Gill A, 2009, J FUNCT PROGRAM, V19, P227, DOI 10.1017/S0956796809007175
   Harper T., 2011, IMPLEMENTATION APPL, P125
   Hinze R, 2006, J FUNCT PROGRAM, V16, P197, DOI 10.1017/S0956796805005769
   Hinze R, 2000, LECT NOTES COMPUT SC, V1837, P2
   HUGHES RJM, 1986, INFORM PROCESS LETT, V22, P141, DOI 10.1016/0020-0190(86)90059-1
   Kiessling R., 2003, P INT WORKSH TYP PRO, P259
   Kiselyov O, 2005, ACM SIGPLAN NOTICES, V40, P192, DOI 10.1145/1090189.1086390
   Leather S., 2011, P INT C IMPL APPL FU, P159
   Leather S, 2014, PEPM '14: PROCEEDINGS OF THE ACM SIGPLAN WORKSHOP ON PARTIAL EVALUATION AND PROGRAM MANIPULATION, P109, DOI 10.1145/2543728.2543734
   Li H., 2003, Proceedings of the 2003 ACM SIGPLAN workshop on Haskell, ACM, P27
   Meijer E., 1995, Conference Record of FPCA '95. SIGPLAN-SIGARCH-WG2.8. Conference on Functional Programming Languages and Computer Architecture, P324, DOI 10.1145/224164.224225
   MILNER R, 1978, J COMPUT SYST SCI, V17, P348, DOI 10.1016/0022-0000(78)90014-4
   Mitchell J.C., 1986, C RECORD 13 ANN ACM, P263, DOI [10.1145/512644.512669, DOI 10.1145/512644.512669]
   Pitts Andrew M., 2005, Advanced Topics in Types and Programming Languages, P245
   Reynolds J. C., 1983, Information Processing 83. Proceedings of the IFIP 9th World Computer Congress, P513
   Schuur B., 2013, THESIS
   Sculthorpe N., 2012, P INT C IMPL APPL FU
   Sculthorpe N, 2014, J FUNCT PROGRAM, V24, P113, DOI 10.1017/S0956796814000045
   SLEEP MR, 1982, SOFTWARE PRACT EXPER, V12, P1082, DOI 10.1002/spe.4380121109
   Swamy N, 2009, ICFP'09: PROCEEDINGS OF THE 2009 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P329
   Swierstra W, 2008, J FUNCT PROGRAM, V18, P423, DOI 10.1017/S0956796808006758
   Tullsen M., 2002, THESIS
   van Eekelen J., 2013, P WORKSH HASK REW TE
   Visser E, 2005, J SYMB COMPUT, V40, P831, DOI 10.1016/j.jsc.2004.12.011
   Wadler P., 1987, Conference Record of the Fourteenth Annual ACM Symposium on Principles of Programming Languages, P307, DOI 10.1145/41625.41653
   Wadler P., 1989, FPCA 89 P 4 INT C FU, P347
   Weirich Stephanie., 2011, Proceedings of the 16th ACM SIGPLAN International Conference on Functional Programming, P333
   Yakushev AR, 2009, ICFP'09: PROCEEDINGS OF THE 2009 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P233
NR 40
TC 0
Z9 0
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 15
PY 2015
VL 112
BP 145
EP 169
DI 10.1016/j.scico.2015.07.009
PN 2
PG 25
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CW3HD
UT WOS:000364881700003
OA Green Published, Green Submitted
DA 2024-07-18
ER

PT J
AU Viroli, M
   Pianini, D
   Montagna, S
   Stevenson, G
   Zambonelli, F
AF Viroli, Mirko
   Pianini, Danilo
   Montagna, Sara
   Stevenson, Graeme
   Zambonelli, Franco
TI A coordination model of pervasive service ecosystems
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 28th ACM Symposium on Applied Computing (SAC) on Programming Languages
   Track
CY MAR 18-22, 2013
CL Coimbra, PORTUGAL
SP ACM, ACM Special Interest Grp Appl Comp
DE Coordination models and languages; Pervasive computing; Service
   ecosystems; Process algebras; Self-organisation
ID SUBJECTIVE COORDINATION; CALCULUS; ORGANIZATION; LANGUAGES
AB The complexity of pervasive computing systems is rapidly increasing, and this calls for service models and coordination approaches intrinsically manifesting self-organisation of component interactions. The goal of this paper is to provide a coordination model (formalised as a process algebra) capturing the relevant aspects of such systems. It should allow the behaviour of large-scale, situated, and self-organising systems to be conveniently expressed, paving the way towards their rigorous study as well as development of supporting platforms. Focusing on the recently introduced concept of pervasive ecosystems, the proposed model revolves around (i) the notion of a distributed and dynamic space of "live semantic annotations" (wrapping data, knowledge, and the relevant facts about activities of humans, devices, and services) upon which autonomous agents coordinate and (ii) a small set of chemical-resembling coordination rules that enforce mechanisms of diffusion, aggregation, decay, and bonding between such annotations. (C) 2015 Elsevier B.V. All rights reserved.
C1 [Viroli, Mirko; Pianini, Danilo; Montagna, Sara] Alma Mater Studiorum Univ Bologna, Bologna, Italy.
   [Stevenson, Graeme] Univ St Andrews, St Andrews KY16 9AJ, Fife, Scotland.
   [Zambonelli, Franco] Univ Modena & Reggio Emilia, Modena, Italy.
C3 University of Bologna; University of St Andrews; Universita di Modena e
   Reggio Emilia
RP Viroli, M (corresponding author), Alma Mater Studiorum Univ Bologna, Bologna, Italy.
EM mirko.viroli@unibo.it; danilo.pianini@unibo.it; sara.montagna@unibo.it;
   graeme.stevenson@st-andrews.ac.uk; franco.zambonelli@unimore.it
RI MONTAGNA, SARA/KLC-3779-2024; Pianini, Danilo/H-6091-2019
OI MONTAGNA, SARA/0000-0001-5390-4319; Pianini, Danilo/0000-0002-8392-5409;
   Zambonelli, Franco/0000-0002-6837-8806; Viroli,
   Mirko/0000-0003-2702-5702
FU EU [256873]
FX This paper has been supported by the EU FP7 project "SAPERE - Self-aware
   Pervasive Service Ecosystems" under contract No. 256873.
CR [Anonymous], 25 ANN ACM S APPL CO, DOI DOI 10.1145/1774088.1774515
   [Anonymous], 27 ANN ACM S APPL CO
   [Anonymous], IEEE INT C SELF AD S
   [Anonymous], 1 INT WORKSH AD SERV
   [Anonymous], CYBERNETICS SYSTEMS
   [Anonymous], LECT NOTES COMPUTER
   [Anonymous], 1 INT WORKSH AD SERV
   [Anonymous], 2009, P 2009 ACM S APPL CO, DOI DOI 10.1145/1529282.1529585
   Banatre Jean-Pierre, 2009, Journal of Software, V4, P738, DOI 10.4304/jsw.4.7.738-746
   BANATRE JP, 1993, COMMUN ACM, V36, P98, DOI 10.1145/151233.151242
   Beal J, 2006, IEEE INTELL SYST, V21, P10, DOI 10.1109/MIS.2006.29
   Beal J., ARXIV12025509 CORR
   Beal J, 2013, FORMAL AND PRACTICAL ASPECTS OF DOMAIN-SPECIFIC LANGUAGES: RECENT DEVELOPMENTS, P436, DOI 10.4018/978-1-4666-2092-6.ch016
   Beal J, 2008, APPLIED COMPUTING 2008, VOLS 1-3, P1969
   BERRY G, 1992, THEOR COMPUT SCI, V96, P217, DOI 10.1016/0304-3975(92)90185-I
   Bortolussi L, 2013, LECT NOTES COMPUT SC, V7890, P1, DOI 10.1007/978-3-642-38493-6_1
   Busi N, 1998, THEOR COMPUT SCI, V192, P167, DOI 10.1016/S0304-3975(97)00149-7
   Busi N., 1997, Electronic Notes in Theoretical Computer Science, V7, DOI 10.1016/S1571-0661(05)80467-0
   Cabri G, 2000, IEEE INTERNET COMPUT, V4, P26, DOI 10.1109/4236.865084
   Cardelli L, 2000, THEOR COMPUT SCI, V240, P177, DOI 10.1016/S0304-3975(99)00231-5
   Castelli G., 2012, 2012 IEEE International Conference on Pervasive Computing and Communications Workshops (PerCom Workshops), P137, DOI 10.1109/PerComW.2012.6197465
   Castelli G, 2012, INT CONF SELF SELF, P205, DOI 10.1109/SASOW.2012.43
   Ciancarini P, 1996, ACM COMPUT SURV, V28, P300, DOI 10.1145/234528.234732
   De Nicola R, 1998, IEEE T SOFTWARE ENG, V24, P315, DOI 10.1109/32.685256
   De Nicola R., 2005, P 20 ANN ACM S APPL, P428
   Ferscha Alois, 2012, 2012 IEEE 6th International Conference on Self-Adaptive and Self-Organizing Systems (SASO 2012), P211, DOI 10.1109/SASO.2012.35
   GELERNTER D, 1985, ACM T PROGR LANG SYS, V7, P80, DOI 10.1145/2363.2433
   GELERNTER D, 1992, COMMUN ACM, V35, P96, DOI 10.1145/129630.129635
   Gorrieri R, 2006, FUND INFORM, V73, P479
   Igarashi A, 2001, ACM T PROGR LANG SYS, V23, P396, DOI 10.1145/503502.503505
   Lanese I., 2013, P 28 ANN ACM S APPL, P1339
   Fernandez-Marquez JL, 2013, NAT COMPUT, V12, P43, DOI 10.1007/s11047-012-9324-y
   Mamei M, 2009, ACM T SOFTW ENG METH, V18, DOI 10.1145/1538942.1538945
   Massink Mieke, 2012, Coordination Models and Languages. Proceedings 14th International Conference, COORDINATION 2012, P152, DOI 10.1007/978-3-642-30829-1_11
   Miller E., 2004, RDF PRIMER
   MILNER R, 1992, INFORM COMPUT, V100, P1, DOI [10.1016/0890-5401(92)90008-4, 10.1016/0890-5401(92)90009-5]
   Molesini A., 2013, 1 INT WORKSH ENG MUL, P144
   Montagna S., 2012, 2012 IEEE 6th International Conference on Self-Adaptive and Self-Organizing Systems (SASO 2012), P169, DOI 10.1109/SASO.2012.25
   Montagna S, 2013, MOBILE NETW APPL, V18, P398, DOI 10.1007/s11036-012-0411-1
   Murphy AL, 2006, ACM T SOFTW ENG METH, V15, P279, DOI 10.1145/1151695.1151698
   Nardini E., 2011, 26 ANN ACM S APPL CO, VII, P869
   Nixon LJB, 2008, KNOWL ENG REV, V23, P181, DOI 10.1017/S0269888907001221
   Omicini A, 2005, APPL ALGEBR ENG COMM, V16, P151, DOI 10.1007/s00200-005-0174-z
   Omicini A, 2003, LECT NOTES ARTIF INT, V2586, P179
   Omicini A., 1999, Autonomous Agents and Multi-Agent Systems, V2, P251, DOI 10.1023/A:1010060322135
   Omicini A, 2011, KNOWL ENG REV, V26, P53, DOI 10.1017/S026988891000041X
   Pianini D, 2013, J SIMUL, V7, P202, DOI 10.1057/jos.2012.27
   Ranganathan A, 2003, KNOWL ENG REV, V18, P209, DOI 10.1017/S0269888904000037
   Ricci A, 2002, LECT NOTES COMPUT SC, V2315, P291
   Stevenson G., 2013, 1 INT WORKSH SENS BI
   Stevenson G., 2013, Proceedings of the 28th Annual ACM Symposium on Applied Computing, P1369
   Terepeta Michal, 2012, Coordination Models and Languages. Proceedings 14th International Conference, COORDINATION 2012, P137, DOI 10.1007/978-3-642-30829-1_10
   Viroli Mirko, 2012, Coordination Models and Languages. Proceedings 14th International Conference, COORDINATION 2012, P212, DOI 10.1007/978-3-642-30829-1_15
   Viroli M., 2013, SPAT COMP WORKSH SCW
   Viroli M., 2013, COMMUN COMPUT PHYS, V393, P114, DOI 10.1007/978-3-642-45364-9
   Viroli M, 2006, FUND INFORM, V73, P507
   Viroli M, 2014, LECT NOTES COMPUT SC, V8459, P163, DOI 10.1007/978-3-662-43376-8_11
   Viroli M, 2013, ADAPTIVE WEB SERVICES FOR MODULAR AND REUSABLE SOFTWARE DEVELOPMENT: TACTICS AND SOLUTIONS, P207, DOI 10.4018/978-1-4666-2089-6.ch008
   Viroli M, 2011, ACM T AUTON ADAP SYS, V6, DOI 10.1145/1968513.1968517
   Viroli M, 2010, INFORM SCIENCES, V180, P1876, DOI 10.1016/j.ins.2009.11.021
   Viroli M, 2009, LECT NOTES COMPUT SC, V5521, P143, DOI 10.1007/978-3-642-02053-7_8
   Ye J, 2012, PERVASIVE MOB COMPUT, V8, P36, DOI 10.1016/j.pmcj.2011.01.004
   Zambonelli F, 2005, LECT NOTES COMPUT SC, V3457, P44
   Zambonelli F, 2004, THIRTEENTH IEEE INTERNATIONAL WORKSHOPS ON ENABLING TECHNOLOGIES: INFRASTRUCTURE FOR COLLABORATIVE ENTERPRISES, PROCEEDINGS, P4, DOI 10.1109/ENABL.2004.57
   Zambonelli F, 2011, INT J PERVASIVE COMP, V7, P186, DOI 10.1108/17427371111172997
   Zambonelli F, 2011, PROCEDIA COMPUT SCI, V7, P197, DOI 10.1016/j.procs.2011.09.006
NR 66
TC 10
Z9 10
U1 0
U2 3
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 15
PY 2015
VL 110
BP 3
EP 22
DI 10.1016/j.scico.2015.06.003
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA CR3VX
UT WOS:000361262300002
OA Bronze
DA 2024-07-18
ER

PT J
AU Löwe, M
   König, H
   Schulz, C
   Schultchen, M
AF Loewe, Michael
   Koenig, Harald
   Schulz, Christoph
   Schultchen, Marius
TI Algebraic graph transformations with inheritance and abstraction
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT Brazilian Symposium on Formal Methods (SBMF)
CY SEP 29-OCT 03, 2013
CL Brasilia, BRAZIL
DE Graph transformation; Inheritance; Abstraction; Adhesive HLR category
AB In this paper, we propose a new approach to inheritance and abstraction in the context of algebraic graph transformation by providing a suitable categorial framework which reflects the semantics of class-based inheritance in software engineering. Inheritance is modelled by a type graph T that comes equipped with a partial order. Typed graphs are arrows with codomain T which preserve graph structures up to inheritance. Morphisms between typed graphs are "down typing" graph morphisms: An object of class t can be mapped to an object of a subclass of t. Abstract classes are modelled by a subset of vertices of the type graph. We prove that this structure is an adhesive HLR category, i.e. pushouts along extremal monomorphisms are "well-behaved". This infers validity of classical results such as the Local Church Rosser Theorem, the Parallelism Theorem, and the Concurrency Theorem. (C) 2015 Elsevier B.V. All rights reserved.
C1 [Loewe, Michael; Koenig, Harald; Schulz, Christoph; Schultchen, Marius] FHDW Hannover Univ Appl Sci, D-30173 Hannover, Germany.
RP Schulz, C (corresponding author), FHDW Hannover Univ Appl Sci, Freundallee 15, D-30173 Hannover, Germany.
EM Michael.Loewe@fhdw.de; Harald.Koenig@fhdw.de; Christoph.Schulz@fhdw.de;
   Marius.Schultchen@web.de
CR Adamek J., 2004, Abstract and Concrete Categories
   [Anonymous], UN MOD LANG UML VERS
   de Lara J, 2007, THEOR COMPUT SCI, V376, P139, DOI 10.1016/j.tcs.2007.02.001
   Ehrig H, 2004, LECT NOTES COMPUT SC, V3256, P161
   Ehrig H., 2006, MONO THEOR COMP SCI, DOI 10.1007/3-540-31188-2
   Ehrig H, 2006, FUND INFORM, V74, P1
   Ehrig H, 2014, MATH STRUCT COMP SCI, V24, DOI 10.1017/S0960129512000357
   Ehrig Hartmut, 1991, Math. Struct. Comput. Sci., V1, P361, DOI DOI 10.1017/S0960129500001353
   Ferreira APL, 2004, LECT NOTES COMPUT SC, V3256, P416
   Golas U, 2012, THEOR COMPUT SCI, V424, P46, DOI 10.1016/j.tcs.2012.01.032
   Guerra E., 2006, UC3MTRCS0601
   Hermann F, 2009, LECT NOTES COMPUT SC, V5503, P325
   Lack S, 2004, LECT NOTES COMPUT SC, V2987, P273
   Lowe Michael, 2013, Formal Methods: Foundations and Applications. 16th Brazilian Symposium, SBMF 2013. Proceedings: LNCS 8195, P211, DOI 10.1007/978-3-642-41071-0_15
   LOWE M, 1993, THEOR COMPUT SCI, V109, P181, DOI 10.1016/0304-3975(93)90068-5
   Lowe M., 2013, 0201303 FACHH WIRTSC
   Macionis J.J., 2007, SOCIOLOGY
   Meyer B., 1998, Object-oriented software construction (Second Edi)
   Rutle A., 2008, P 2008 EUR AM C TEL, P1, DOI DOI 10.1145/1621087.1621105
NR 19
TC 4
Z9 4
U1 0
U2 1
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP
PY 2015
VL 107
BP 2
EP 18
DI 10.1016/j.scico.2015.02.004
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA CM5DZ
UT WOS:000357708300002
DA 2024-07-18
ER

PT J
AU Bodeveix, JP
   Filali, M
   Garnacho, M
   Spadotti, R
   Yang, ZB
AF Bodeveix, Jean-Paul
   Filali, Mamoun
   Garnacho, Manuel
   Spadotti, Regis
   Yang, Zhibin
TI Towards a verified transformation from AADL to the formal
   component-based language FIACRE
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT Dagstuhl Seminar on Architecture-Driven Semantic Analysis of Embedded
   Systems
CY JUL 01-06, 2012
CL GERMANY
DE Formal verification; Architecture description languages; Model driven
   engineering; Model transformation; Timed transition systems
ID MODELS
AB During the last decade. AADL is an emerging architecture description languages addressing the modeling of embedded systems. Several research projects have shown that AADL concepts are well suited to the design of embedded systems. Moreover, AADL has a precise execution model which has proved to be one key feature for effective early analysis. In this paper, we are concerned with the foundational aspects of the verification support for AADL. More precisely, we propose a verification toolchain for AADL models through its transformation to the FIACRE language which is the pivot verification language of the TOPCASED project: high level models can be transformed to FIACRE models and then model-checked. Then, we investigate how to prove the correctness of the transformation from AADL into FIACRE and present related elementary ingredients: the semantics of AADL and FIACRE subsets expressed in a common framework, namely timed transition systems. We also briefly discuss experimental validation of the work. (C) 2015 Elsevier B.V. All rights reserved.
C1 [Bodeveix, Jean-Paul; Filali, Mamoun; Garnacho, Manuel; Spadotti, Regis; Yang, Zhibin] Univ Toulouse, IRIT, CNRS, Toulouse, France.
   [Yang, Zhibin] Nanjing Univ Aeronaut & Astronaut, Coll Comp Sci & Technol, Nanjing, Jiangsu, Peoples R China.
C3 Universite de Toulouse; Universite Toulouse III - Paul Sabatier;
   Universite Federale Toulouse Midi-Pyrenees (ComUE); Institut National
   Polytechnique de Toulouse; Centre National de la Recherche Scientifique
   (CNRS); Nanjing University of Aeronautics & Astronautics
RP Bodeveix, JP (corresponding author), Univ Toulouse, IRIT, CNRS, Toulouse, France.
EM filali@irir.fr
FU project TOPCASED; project QUARTEFT
FX This work has been mainly sponsored by the projects TOPCASED and
   QUARTEFT. The authors thank the members of these projects that have also
   participated in this work (Patrick Farail and Pierre Gaufillet from
   Airbus, Pierre Dissaux from Ellidis, Bernard Berthomieu, Silvano Dal
   Zilio and Francois Vernadat from LAAS CNRS).
CR Abdoul T, 2008, IEEE INT C ENG COMP, P263, DOI 10.1109/ICECCS.2008.24
   Abid N, 2012, LECT NOTES COMPUT SC, V7437, P1, DOI 10.1007/978-3-642-32469-7_1
   [Anonymous], 1989, PRENTICE HALL INT SE
   [Anonymous], EUR C EMB REAL TIM S
   [Anonymous], WEB SERV FORM METH 8
   [Anonymous], 2011, AS5506 ANN BEH SPEC
   ARNOLD A, 1994, PRENTICE HALL INT SE
   Berthomieu B, 2009, LECT NOTES COMPUT SC, V5570, P207, DOI 10.1007/978-3-642-01924-1_15
   Bertot Y., 2004, TEXT THEORET COMP S
   Bozzano M, 2011, COMPUT J, V54, P754, DOI 10.1093/comjnl/bxq024
   Bozzano M, 2010, LECT NOTES COMPUT SC, V6174, P562, DOI 10.1007/978-3-642-14295-6_48
   Chkouri MY, 2009, LECT NOTES COMPUT SC, V5421, P5, DOI 10.1007/978-3-642-01648-6_2
   CMU, 2006, EXT OP SOURC AADL TO
   Feiler Peter., 2013, Model-Based Engineering with AADL
   Filali-Amine M, 2010, LECT NOTES COMPUT SC, V5977, P245, DOI 10.1007/978-3-642-11811-1_19
   França RB, 2007, IEEE INT C ENG COMP, P377, DOI 10.1109/ICECCS.2007.41
   Garnacho Manuel, 2013, Formal Modeling and Analysis of Timed Systems. Proceedings of 11th International Conference (FORMATS 2013): LNCS 8053, P106, DOI 10.1007/978-3-642-40229-6_8
   Gössler G, 2003, LECT NOTES COMPUT SC, V3188, P314
   HENZINGER TA, 1992, LECT NOTES COMPUT SC, V600, P226, DOI 10.1007/BFb0031995
   HENZINGER TA, 1994, INFORM COMPUT, V112, P273, DOI 10.1006/inco.1994.1060
   Henzinger TA, 2003, IEEE CONTR SYST MAG, V23, P50, DOI 10.1109/MCS.2003.1172829
   Henzinger Thomas A., 1991, P 18 ACM SIGPLAN SIG, P353, DOI [10.1145/99583.99629, DOI 10.1145/99583.99629]
   Hoare CAR., 1985, Communicating Sequential Processes
   Hugues J, 2008, ACM T EMBED COMPUT S, V7, DOI 10.1145/1376804.1376810
   Izerrouken N., 2010, Proceedings of the 1st Workshop on Critical Automotive applications: Robustness Safety, P53
   Jahier Erwan, 2007, VIRTUAL EXECUTION AA, P134
   Jean-Francois R, 2008, IEEE INT C ENG COMP, P282, DOI 10.1109/ICECCS.2008.28
   MA Y, 2009, ICESS, P607, DOI DOI 10.1109/ICESS.2009.47
   Monteverde D., 2008, MODEL BASED ARCHITEC
   Ölveczky PC, 2010, LECT NOTES COMPUT SC, V6117, P47, DOI 10.1007/978-3-642-13464-7_5
   Raclet JB, 2011, FUND INFORM, V108, P119, DOI 10.3233/FI-2011-416
   Rugina AE, 2008, EDCC-7: SEVENTH EUROPEAN DEPENDABLE COMPUTING CONFERENCE, PROCEEDINGS, P85, DOI 10.1109/EDCC-7.2008.14
   Rushby J., 1996, Foundations of Software Technology and Theoretical Computer Science. 16th Conference Proceedings, P43
   SAE, 2009, AS5506A
   Sokolsky Oleg, 2006, IPDPS
   Spadotti Regis, APOTA CASE STUDY
   Steinberg D, 2009, EMF ECLIPSE MODELING, V2nd
   Zalila F, 2013, LECT NOTES COMPUT SC, V8216, P266, DOI 10.1007/978-3-642-41366-7_23
   Zilio Silvano Dal, 2015, 15036 EMS
NR 39
TC 14
Z9 17
U1 0
U2 4
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD AUG 1
PY 2015
VL 106
SI SI
BP 30
EP 53
DI 10.1016/j.scico.2015.03.003
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA CQ4RF
UT WOS:000360591600003
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Stol, KJ
   Fitzgerald, B
AF Stol, Klaas-Jan
   Fitzgerald, Brian
TI Theory-oriented software engineering
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Theory-oriented software engineering; Software engineering research;
   Theory fragment; Theory building; Empirical research
ID DESIGN; SCIENCE; FRAMEWORK; EVOLUTION; VALIDITY
AB There has been a growing interest in the role of theory within Software Engineering (SE) research. For several decades, researchers within the SE research community have argued that, to become a 'real' engineering science, SE needs to develop stronger theoretical foundations. However, so far, the role of theory is neither fully appreciated nor well understood in SE research. Without a good common understanding of what theory is, what it constitutes in SE research, and the various roles it can play in SE research, it is difficult to appreciate how theory building can help to strengthen SE research. in this paper we discuss the importance of theory and conceptualization, and review the key components that comprise a theory. We then present the Research Path Schema (RPS), which is an adaptation of an analytical framework from the social sciences. The RPS defines a research study as consisting of three components: some phenomenon, system or substance that a researcher is interested in; some technique or method to study that substance; and some form of conceptualization or theory that provides an explanation for, or abstraction of the observations made in a study. Different research studies have a different archetypical 'architecture,' depending on the selection of these three components. Consequently, the role of the conceptualization or theory will be different for each archetypical study design, or selected research path. We conclude this paper by outlining a number of implications for future SE research, and argue for a Theory-Oriented Software Engineering research perspective, which can complement the recent focus on Evidence Based Software Engineering. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Stol, Klaas-Jan; Fitzgerald, Brian] Univ Limerick, Lero Irish Software Engn Res Ctr, Limerick, Ireland.
C3 University of Limerick
RP Stol, KJ (corresponding author), Univ Limerick, Lero Irish Software Engn Res Ctr, Limerick, Ireland.
EM klaas-jan.stol@lero.ie; bf@lero.ie
RI Stol, Klaas-Jan/I-6269-2013; Fitzgerald, Brian/E-7790-2010
OI Stol, Klaas-Jan/0000-0002-1038-5050; Fitzgerald,
   Brian/0000-0001-9193-2863
FU Science Foundation Ireland [10/CE/I1855]
FX We thank the anonymous reviewers for their constructive and thoughtful
   feedback which has helped to improve this paper, in particular the
   distinction between variance and process theories, as well as Section 4
   that presents more extensive illustrations of the RPS in software
   engineering research studies. This work was supported, in part, by
   Science Foundation Ireland grant 10/CE/I1855 to Lero-the Irish Software
   Engineering Research Centre (www.lero.ie).
CR [Anonymous], J MANAG INF SYST
   [Anonymous], P 17 ANN INT COMP SO
   [Anonymous], SOFTW ENG NOTES
   [Anonymous], P JAIS THEORY DEV WO
   [Anonymous], 2012, CASE STUDY RES SOFTW, DOI DOI 10.1002/9781118181034
   [Anonymous], 2008, GUIDE ADV EMPIRICAL
   [Anonymous], P SEMAT WORKSH GEN T
   [Anonymous], THEORY CONSTRUCTION
   [Anonymous], PROGRAM EVOLUTION PR
   [Anonymous], SYSTEMIST
   [Anonymous], C SPONS NAT SCI COMM
   [Anonymous], 1977, Treatise on Basic Philosophy. Ontology I: The Furniture of the World
   BACHARACH SB, 1989, ACAD MANAGE REV, V14, P496, DOI 10.2307/258555
   Basili VR, 2007, COMMUN ACM, V50, P33, DOI 10.1145/1297797.1297819
   Bass L., 1997, SOFTWARE ARCHITECTUR
   Beecham S, 2008, INFORM SOFTWARE TECH, V50, P860, DOI 10.1016/j.infsof.2007.09.004
   Beecham S, 2013, 2013 IEEE 8TH INTERNATIONAL CONFERENCE ON GLOBAL SOFTWARE ENGINEERING (ICGSE 2013), P41, DOI 10.1109/ICGSE.2013.14
   BELADY LA, 1976, IBM SYST J, V15, P225, DOI 10.1147/sj.153.0225
   Bourgeois L.J., 1979, ACAD MANAGE REV, V4, P443, DOI [10.5465/amr.1979.4289127, DOI 10.5465/AMR.1979.4289127]
   Bowman I. T., 1999, Proceedings of the 1999 International Conference on Software Engineering (IEEE Cat. No.99CB37002), P555, DOI 10.1109/ICSE.1999.841045
   Box G., 1987, Empirical Model-Building and Response Surfaces, DOI DOI 10.1080/00401706.1988.10488371
   Briand L, 2012, IEEE SOFTWARE, V29, P96, DOI 10.1109/MS.2012.86
   BRINBERG D, 1986, J MARKETING, V50, P161, DOI 10.2307/1251293
   Brinberg David., 1985, VALIDITY RES PROCESS
   Broy M, 2011, COMPUTER, V44, P19, DOI 10.1109/MC.2011.305
   Bunge M., 1967, Scientific Research, V1
   Carroll JM, 2000, EUR J INFORM SYST, V9, P235, DOI 10.1057/palgrave/ejis/3000374
   Cartwright M, 2000, IEEE T SOFTWARE ENG, V26, P786, DOI 10.1109/32.879814
   Chalofsky N.E., 1996, NEW DIRECTIONS ADULT, V72, P51
   CHIDAMBER SR, 1994, IEEE T SOFTWARE ENG, V20, P476, DOI 10.1109/32.295895
   Coleman G, 2007, INFORM SOFTWARE TECH, V49, P654, DOI 10.1016/j.infsof.2007.02.011
   Corley KG, 2011, ACAD MANAGE REV, V36, P12, DOI 10.5465/amr.2009.0486
   Creswell JW, 2000, THEOR PRACT, V39, P124, DOI 10.1207/s15430421tip3903_2
   Crowston K., 2004, P 2004 ACM WORKSH IN, P18, DOI DOI 10.1145/1029997.1030003
   Cruzes DS, 2011, INFORM SOFTWARE TECH, V53, P440, DOI 10.1016/j.infsof.2011.01.004
   DENNING P, 2013, COMMUN ACM, V56, P35
   Denning PJ, 2007, COMMUN ACM, V50, P13, DOI 10.1145/1272516.1272529
   Denning PJ, 2005, COMMUN ACM, V48, P27, DOI 10.1145/1053291.1053309
   Dubin R., 1978, THEORY BUILDING
   Edwards HM, 2009, INFORM SOFTWARE TECH, V51, P785, DOI 10.1016/j.infsof.2008.08.008
   Endres A., 2003, A Handbook of Software and Systems Engineering: Empirical Observations, Laws, and Theories
   Feller J., 2005, PERSPECTIVES FREE OP
   Fitzgerald B, 1998, J INF TECHNOL-UK, V13, P313, DOI 10.1057/jit.1998.9
   Glaser B. G., 1967, DISCOVERY GROUNDED T, DOI 10.1515/9783111660211/html
   Glass RL, 1996, COMMUN ACM, V39, P11, DOI 10.1145/240455.240458
   Godfrey MW, 2014, J SOFTW-EVOL PROC, V26, P613, DOI 10.1002/smr.1636
   Gonzalez-Barahona JM, 2014, J SOFTW-EVOL PROC, V26, P589, DOI 10.1002/smr.1615
   Gregor S, 2007, J ASSOC INF SYST, V8, P312, DOI 10.17705/1jais.00129
   Gregor S, 2006, MIS QUART, V30, P611
   Hall T, 2009, ACM T SOFTW ENG METH, V18, DOI 10.1145/1525880.1525883
   Hannay JE, 2007, IEEE T SOFTWARE ENG, V33, P87, DOI 10.1109/TSE.2007.12
   Harrison R, 1998, IEEE T SOFTWARE ENG, V24, P491, DOI 10.1109/32.689404
   Herraiz I, 2013, ACM COMPUT SURV, V46, DOI 10.1145/2543581.2543595
   Homans GeorgeC., 1964, Handbook of Modern Sociology, P951
   Hunt SD, 2008, ORGAN STUD, V29, P1469, DOI 10.1177/0170840608099521
   Jansen A, 2006, 5TH WORKING IEEE/IFIP CONFERENCE ON SOFTWARE ARCHITECTURE, PROCEEDINGS, P109
   Johnson P., 2012, IEEE Software, V29, P94, DOI 10.1109/MS.2012.127
   Johnson P., 2013, ACM SIGSOFT SOFTW EN, V38, P47, DOI DOI 10.1145/2507288.2529923
   Kaplan Abraham., 1964, The conduct of inquiry: Methodology for behavioral science
   Kitchenham BA, 2004, PROC INT CONF SOFTW, P273
   Kuhn Thomas S, 2012, STRUCTURE SCI REVOLU, DOI DOI 10.7208/CHICAGO/9780226458144.001.0001
   LaMantia MJ, 2008, SEVENTH WORKING IEEE/IFIP CONFERENCE ON SOFTWARE ARCHITECTURE, PROCEEDINGS, P83, DOI 10.1109/WICSA.2008.49
   Lawrence M. J., 1982, Sixth International Conference on Software Engineering, P188
   Lehman M.M., 2001, IWPSE 01 P 4 INT WOR, P70
   Leshem S, 2007, INNOV EDUC TEACH INT, V44, P93, DOI 10.1080/14703290601081407
   Lewin K, 1945, SOCIOMETRY, V8, P126, DOI 10.2307/2785233
   Lynham SA., 2002, Advances in Developing Human Resources, V4, P221, DOI [DOI 10.1177/1523422302043002, 10.1177/15222302004003002]
   MARCH ST, 1995, DECIS SUPPORT SYST, V15, P251, DOI 10.1016/0167-9236(94)00041-2
   MCGRATH JE, 1983, J CONSUM RES, V10, P115, DOI 10.1086/208951
   Medawar P., 1964, BBC TALK
   Medvidovic N, 2000, IEEE T SOFTWARE ENG, V26, P70, DOI 10.1109/32.825767
   Merton R.K., 1968, SOCIAL STRUCTURE SOC
   Mockus A, 2002, ACM T SOFTW ENG METH, V11, P309, DOI 10.1145/567793.567795
   Mockus A., 2000, Proceedings of the 2000 International Conference on Software Engineering. ICSE 2000 the New Millennium, P263, DOI 10.1109/ICSE.2000.870417
   Morgan L, 2013, EUR J INFORM SYST, V22, P569, DOI 10.1057/ejis.2012.44
   NISBETT R.E., 2005, GEOGRAPHY THOUGHT AS
   Offutt J, 2013, IEEE SOFTWARE, V30, P96, DOI 10.1109/MS.2013.12
   Petriu D, 2000, IEEE T SOFTWARE ENG, V26, P1049, DOI 10.1109/32.881717
   Pfleeger Shari Lawrence, 2001, ACM SIGSOFT Software Engineering Notes, V26, P16, DOI DOI 10.1145/505532.505535
   Pfleeger SL, 1999, COMPUTER, V32, P32, DOI 10.1109/2.796106
   Ralph P, 2010, LECT NOTES COMPUT SC, V6105, P139, DOI 10.1007/978-3-642-13335-0_10
   Reichenbach Hans., 1938, Experience and Prediction
   Reynolds P.D., 1971, PRIMER THEORY CONSTR
   Robson C., 2002, Real World Research, V2nd
   Sandelowski M, 2000, RES NURS HEALTH, V23, P334, DOI 10.1002/1098-240X(200008)23:4<334::AID-NUR9>3.0.CO;2-G
   Schwarz Andrew, 2007, Data Base for Advances in Information Systems, V38, P29, DOI 10.1145/1278253.1278259
   Sharp H, 2004, EMPIR SOFTW ENG, V9, P353, DOI 10.1023/B:EMSE.0000039884.79385.54
   SHAW M, 1990, IEEE SOFTWARE, V7, P15, DOI 10.1109/52.60586
   Sjoberg D. I. K., 2008, Guide to Advanced Empirical Software Engineering, P312
   Sjoberg DIK, 2007, LECT NOTES COMPUT SC, V4336, P111
   Stol KJ, 2014, ACM T SOFTW ENG METH, V23, DOI 10.1145/2533685
   Stol KJ, 2013, 2013 2ND SEMAT WORKSHOP ON A GENERAL THEORY OF SOFTWARE ENGINEERING (GTSE), P5, DOI 10.1109/GTSE.2013.6613863
   Stol KJ, 2011, LECT NOTES COMPUT SC, V6903, P147, DOI 10.1007/978-3-642-23798-0_15
   Stol KJ, 2009, 2009 ICSE WORKSHOP ON EMERGING TRENDS IN FREE-LIBRE-OPEN SOURCE SOFTWARE RESEARCH AND DEVELOPMENT, P19, DOI 10.1109/FLOSS.2009.5071355
   Suddaby R, 2006, ACAD MANAGE J, V49, P633, DOI 10.5465/AMJ.2006.22083020
   SUTTON RI, 1995, ADMIN SCI QUART, V40, P371, DOI 10.2307/2393788
   Swanson E. B., 1976, 2nd International Conference on Software Engineering, P492
   Tofan D., 2011, INT C SOFTW ENG WAIK, P916
   Venable J. R., 2006, P 1 INT C DES SCI IN, P1
   Wand Y, 1999, ACM T DATABASE SYST, V24, P494, DOI 10.1145/331983.331989
   Weber R, 2003, MIS QUART, V27, pIII
   WEICK KE, 1989, ACAD MANAGE REV, V14, P516, DOI 10.2307/258556
   WEICK KE, 1995, ADMIN SCI QUART, V40, P385, DOI 10.2307/2393789
   WHETTEN DA, 1989, ACAD MANAGE REV, V14, P490, DOI 10.2307/258554
   Wieringa R, 2011, INT SYMP EMP SOFTWAR, P295, DOI 10.1109/ESEM.2011.38
   Yadav MS, 2010, J MARKETING, V74, P1, DOI 10.1509/jmkg.74.1.1
NR 106
TC 29
Z9 30
U1 3
U2 36
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD APR 1
PY 2015
VL 101
BP 79
EP 98
DI 10.1016/j.scico.2014.11.010
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Social Science Citation Index (SSCI)
SC Computer Science
GA CC6XZ
UT WOS:000350513600006
OA Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Marr, S
   Renaux, T
   Hoste, L
   De Meuter, W
AF Marr, Stefan
   Renaux, Thierry
   Hoste, Lode
   De Meuter, Wolfgang
TI Parallel gesture recognition with soft real-time guarantees
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Gesture recognition; Rete; Soft real-time guarantees; Complex event
   processing; Multicore
ID ALGORITHM; PATTERN; RETE
AB Using imperative programming to process event streams, such as those generated by multi-touch devices and 3D cameras, has significant engineering drawbacks. Declarative approaches solve common problems but so far, they have not been able to scale on multicore systems while providing guaranteed response times.
   We propose PARTE, a parallel scalable complex event processing engine that allows for a declarative definition of event patterns and provides soft real-time guarantees for their recognition. The proposed approach extends the classical Rete algorithm and maps event matching onto a graph of actor nodes. Using a tiered event matching model, PARTE provides upper bounds on the detection latency by relying on a combination of non-blocking message passing between Rete nodes and safe memory management techniques. The performance evaluation shows the scalability of our approach on up to 64 cores. Moreover, it indicates that PARTE's design choices lead to more predictable performance compared to a PARTE variant without soft real-time guarantees. Finally, the evaluation indicates further that gesture recognition can benefit from the exposed parallelism with superlinear speedups. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Marr, Stefan; Renaux, Thierry; Hoste, Lode; De Meuter, Wolfgang] Vrije Univ Brussel, Software Languages Lab, Brussels, Belgium.
C3 Vrije Universiteit Brussel
RP Marr, S (corresponding author), Vrije Univ Brussel, Software Languages Lab, Brussels, Belgium.
EM smarr@vub.ac.be; trenaux@vub.ac.be; lhoste@vub.ac.be; wdmeuter@vub.ac.be
RI Marr, Stefan/JXN-7556-2024; Hoste, Levi/AAF-2764-2019
OI Marr, Stefan/0000-0001-9059-5180; Hoste, Levi/0000-0001-9733-1049;
   Renaux, Thierry/0000-0002-9301-2187; DE MEUTER,
   WOLFGANG/0000-0002-5229-5627
FU Institute for the Promotion of Innovation through Science and Technology
   in Flanders (IWT-Vlaanderen), Belgium; MobiCra<SUP>NT</SUP> project -
   INNOV<SUP>IRIS</SUP>
FX Lode Hoste is supported by a doctoral scholarship of the Institute for
   the Promotion of Innovation through Science and Technology in Flanders
   (IWT-Vlaanderen), Belgium. Stefan Marr is supported by the
   MobiCra<SUP>NT</SUP> project funded by INNOV<SUP>IRIS</SUP>.
CR AGHA G, 1990, COMMUN ACM, V33, P125, DOI 10.1145/83880.84528
   AKSCYN RM, 1988, COMMUN ACM, V31, P820, DOI 10.1145/48511.48513
   [Anonymous], P 27 ANN ACM S APPL
   Aref MM, 1998, PARALLEL COMPUT, V24, P763, DOI 10.1016/S0167-8191(98)00003-9
   Cheng A. M. K., 2000, Proceedings 14th International Parallel and Distributed Processing Symposium. IPDPS 2000, P399, DOI 10.1109/IPDPS.2000.846012
   DAI H, 1992, INFORM SOFTWARE TECH, V34, P739, DOI 10.1016/0950-5849(92)90169-P
   El-Haj Mahmoud A.A., 2006, THESIS N CAROLINA ST
   FLEMING PJ, 1986, COMMUN ACM, V29, P218, DOI 10.1145/5666.5673
   FORGY CL, 1982, ARTIF INTELL, V19, P17, DOI 10.1016/0004-3702(82)90020-0
   Georges A, 2007, ACM SIGPLAN NOTICES, V42, P57, DOI 10.1145/1297105.1297033
   Goldstein D., 1991, P 2 ANN CLIPS C LANG, P287
   Gupta A., 1986, 13th Annual International Symposium on Computer Architecture (Cat. No.86CH2291-3), P28
   Gupta A., 1988, Proceedings of the 1988 International Conference on Parallel Processing, P271
   Hammond T, 2005, COMPUT GRAPH-UK, V29, P518, DOI 10.1016/j.cag.2005.05.005
   Harris T.L., 2001, PRAGMATIC IMPLEMENTA
   Hoste L., 2013, P 2 INT C PATT REC A, P6
   Hoste L., 2013, P NIME 2013 13 INT C
   Hoste L., 2011, Proceedings of the 13th international conference on multimodal interfaces - ICMI'11, P97
   Kampstra P., 2008, Journal of Statistical Software, V28, P1, DOI [10.18637/jss.v028.c01, DOI 10.18637/JSS.V028.C01, 10.18637/jss.v028.c01.papers3://publication/uuid/692988CE-7E10-498E-96EC-E7A0CE3620A3]
   Kloukinas C, 2007, LECT NOTES COMPUT SC, V4657, P210
   Laffey T., 1998, AI MAG, V9, P27
   Liu J., 2000, Real-Time Systems
   Michael Maged M., 2002, P 21 ANN S PRINC DIS, P21, DOI [10.1145/571825.571829, DOI 10.1145/571825.571829]
   Miller R., 1968, AFIPS Fall Joint Computer Conference, P267, DOI [10.1145/1476589.1476628, DOI 10.1145/1476589.1476628]
   Miranker DanielP., 1987, P 6 NATL C ARTIFICIA, V1, P42
   Moskal J, 2008, LECT NOTES COMPUT SC, V5321, P73, DOI 10.1007/978-3-540-88808-6_10
   Oflazer K., 1985, THESIS CARNEGIE MELL
   Richardson T., 2013, SOFTW PRACT EXP
   SAKOE H, 1978, IEEE T ACOUST SPEECH, V26, P43, DOI 10.1109/TASSP.1978.1163055
   Scholliers C, 2011, TEI 2011: PROCEEDINGS OF THE FIFTH INTERNATIONAL CONFERENCE ON TANGIBLE EMBEDDED AND EMBODIED INTERACTION, P49
   Shotton J., 2011, CVPR, V2, P7
   Tirea M, 2012, INT SYMP SYMB NUMERI, P365, DOI 10.1109/SYNASC.2011.11
   Wilson AD, 1999, IEEE T PATTERN ANAL, V21, P884, DOI 10.1109/34.790429
   Wobbrock JO, 2007, UIST 2007: PROCEEDINGS OF THE 20TH ANNUAL ACM SYMPOSIUM ON USER INTERFACE SOFTWARE AND TECHNOLOGY, P159
NR 34
TC 1
Z9 1
U1 0
U2 9
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 1
PY 2015
VL 98
SI SI
BP 159
EP 183
DI 10.1016/j.scico.2014.02.012
PN 2
PG 25
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AY7LF
UT WOS:000347741000004
OA Green Accepted
DA 2024-07-18
ER

PT J
AU Bettini, L
   Damiani, F
   Schaefer, I
AF Bettini, Lorenzo
   Damiani, Ferruccio
   Schaefer, Ina
TI Implementing type-safe software product lines using parametric traits
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Featherweight Java; Feature model; Software product line; Trait; Type
   system
ID MINIMAL CORE CALCULUS; FEATHERWEIGHT JIGSAW; JAVA; INHERITANCE
AB A software product line (SPL) is a set of related software systems with well-defined commonality and variability that are developed by reusing common artifacts. In this paper, we present a novel technique for implementing SPLs by exploiting mechanisms for fine-grained reuse which are orthogonal to class-based inheritance. In our approach the concepts of type, behavior, and state are separated into different and orthogonal linguistic concepts: interfaces, traits and classes, respectively. We formalize our proposal by means Of FEATHERWEIGHT PARAMETRIC TRAIT JAVA (FPTJ), a minimal core calculus where units of product functionality are modeled by parametric traits. Traits are a well-known construct for fine-grained reuse of behavior. Parametric traits are traits parameterized by interface names and class names. Parametric traits are applied to interface names and class names to generate traits that can be assembled in other (possibly parametric) traits or in classes that are used to build products. The composition of product functionality is realized by explicit operators of the calculus, allowing code manipulations for modeling product variability. The FPTJ type system ensures that the products in the SPL are type-safe by inspecting the parametric traits and classes shared by different products only once. Therefore, type-safety of an extension of a (type-safe) FPTJ SPL can be guaranteed by inspecting only the newly added parts. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Bettini, Lorenzo; Damiani, Ferruccio] Univ Turin, Dipartimento Informat, I-10124 Turin, Italy.
   [Schaefer, Ina] Tech Univ Carolo Wilhelmina Braunschweig, Inst Software Engn & Automot Informat, Braunschweig, Germany.
C3 University of Turin; Braunschweig University of Technology
RP Damiani, F (corresponding author), Univ Turin, Dipartimento Informat, I-10124 Turin, Italy.
EM damiani@di.unito.it
RI Ferruccio, Damiani/D-2383-2011
OI Ferruccio, Damiani/0000-0001-8109-1706; Bettini,
   Lorenzo/0000-0002-4481-8096
FU MIUR (proj. DISCO); MIUR (proj. CINA); Ateneo/CSP (proj. SALT); Ateneo
   Italo-Tedesco/Deutsch-Italienisches Hochschulzentrum (Vigoni project
   "Language constructs and type systems for object oriented program
   components"); Deutsche Forschungsgemeinschaft [SCHA1635/2-1]; EU project
   [FP7-231620 HATS]
FX This work has been partially supported by MIUR (proj. DISCO and proj.
   CINA) and Ateneo/CSP (proj. SALT). The authors of this work have been
   partially supported by the Ateneo Italo-Tedesco/Deutsch-Italienisches
   Hochschulzentrum (Vigoni project "Language constructs and type systems
   for object oriented program components"), the Deutsche
   Forschungsgemeinschaft (proj. SCHA1635/2-1) and the EU project
   FP7-231620 HATS. The authors are listed in alphabetical order.
CR Allen E., 2008, FORTRESS LANAGUAGE S
   Ancona D, 2005, ACM SIGPLAN NOTICES, V40, P26, DOI 10.1145/1047659.1040308
   Ancona D, 2003, ACM T PROGR LANG SYS, V25, P641, DOI 10.1145/937563.937567
   [Anonymous], 1997, Object-oriented software construction
   [Anonymous], 1990, FEATURE ORIENTED DOM
   [Anonymous], 1998, P 25 ACM SIGPLAN SIG, DOI DOI 10.1145/268946.268961
   Apel S, 2010, AUTOMAT SOFTW ENG, V17, P251, DOI 10.1007/s10515-010-0066-8
   Apel S, 2008, GPCE'08: PROCEEDINGS OF THE ACM SIGPLAN SEVENTH INTERNATIONAL CONFERENCE ON GENERATIVE PROGRAMMING AND COMPONENT ENGINEERING, P101
   Bassett P.G., 1997, FRAMING SOFTWARE REU, V1st
   Batory D, 2003, PROC INT CONF SOFTW, P187, DOI 10.1109/ICSE.2003.1201199
   Batory D, 2005, LECT NOTES COMPUT SC, V3714, P7
   Bergel A, 2008, COMPUT LANG SYST STR, V34, P83, DOI 10.1016/j.cl.2007.05.003
   Bettini L., 2013, P PRINC PRACT PROGR
   Bettini L, 2013, SCI COMPUT PROGRAM, V78, P907, DOI 10.1016/j.scico.2012.11.003
   Bettini L, 2013, ACTA INFORM, V50, P77, DOI 10.1007/s00236-012-0173-z
   Bettini L, 2013, SCI COMPUT PROGRAM, V78, P521, DOI 10.1016/j.scico.2011.06.007
   Bettini L, 2013, SCI COMPUT PROGRAM, V78, P218, DOI 10.1016/j.scico.2011.10.006
   Bettini Lorenzo., 2010, Proceedings of the 2010 ACM Symposium on Applied Computing, SAC '10, P2096
   Black AP, 2003, ACM SIGPLAN NOTICES, V38, P47, DOI 10.1145/949343.949311
   Bono V., 2007, P FORM TECHN JAV LIK
   Bono V, 2008, INT FED INFO PROC, V273, P367
   BRACHA G, 1990, SIGPLAN NOTICES, V25, P303, DOI 10.1145/97946.97982
   Bracha G., 2016, The Dart Programming Language. Always learning
   Cassou D., 2007, ICDL, P50
   COOK WR, 1990, CONFERENCE RECORD OF THE SEVENTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P125, DOI 10.1145/96709.96721
   COOK WR, 1991, LECT NOTES COMPUT SC, V489, P151
   Damiani F., 2013, FORM ASP COMPUT, P1
   Damiani F., 2012, P16 INT SOFTW PROD L, V2, P53, DOI [10.1145/2364412.2364422, DOI 10.1145/2364412.2364422]
   Damiani F., 2011, P FORM TECHN JAV LIK
   Delaware B, 2009, FOAL09: FOUNDATIONS OF ASPECT-ORIENTED LANGUAGES, P31
   Ducasse S, 2006, ACM T PROGR LANG SYS, V28, P331, DOI 10.1145/1119479.1119483
   Ernst E, 1999, LECT NOTES COMPUT SC, V1628, P67
   Ernst E., 2008, EXPRESSION PROBLEM S
   Hahnle R., 2012, LECT NOTES COMPUTER, V7609, P32
   Igarashi A, 2001, ACM T PROGR LANG SYS, V23, P396, DOI 10.1145/503502.503505
   Kästner C, 2007, SPLC 2007: 11TH INTERNATIONAL SOFTWARE PRODUCT LINE CONFERENCE, PROCEEDINGS, P223, DOI 10.1109/SPLINE.2007.12
   Kästner C, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P311, DOI 10.1145/1368088.1368131
   Kastner Christian, 2008, 2008 23rd IEEE/ACM International Conference on Automated Software Engineering, P258, DOI 10.1109/ASE.2008.36
   Krueger C, 2002, IEEE SOFTWARE, V19, P29, DOI 10.1109/MS.2002.1020284
   Lagorio G., 2009, EL P FDN OBJ OR LANG
   Lagorio G, 2012, INFORM COMPUT, V214, P86, DOI 10.1016/j.ic.2012.02.004
   Lagorio G, 2009, LECT NOTES COMPUT SC, V5653, P244, DOI 10.1007/978-3-642-03013-0_12
   Liquori L, 2008, THEOR COMPUT SCI, V398, P243, DOI 10.1016/j.tcs.2008.01.051
   Liquori L, 2008, ACM T PROGR LANG SYS, V30, DOI 10.1145/1330017.1330022
   Lopez-Herrejon RE, 2005, LECT NOTES COMPUT SC, V3586, P169
   Loughran N, 2004, LECT NOTES COMPUT SC, V3107, P127
   MIKHAJLOV L, 1998, LNCS, V1445, P355
   Murphy-Hill EmersonR., 2005, OOPSLA 05, P282, DOI 10.1145/1094855.1094963
   Nierstrasz O, 2006, J OBJECT TECHNOL, V5, P129, DOI 10.5381/jot.2006.5.4.a4
   Northrop L., 2001, SOFTWARE PRODUCT LIN
   Odersky M., 2005, EL P FDN OBJ OR LANG
   Odersky M., 2007, TECHNICAL REPORT
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Pohl K., 2005, SOFTWARE PRODUCT LIN, V10
   Quitslund P. J., 2004, P 2004 OOPSLA WORKSH, P37
   Reppy J., 2006, EL P FOOL WOOD
   Reppy J, 2007, LECT NOTES COMPUT SC, V4609, P373
   Schaefer I, 2010, LECT NOTES COMPUT SC, V6287, P77, DOI 10.1007/978-3-642-15579-6_6
   Schaefer Ina., 2011, P 10 INT C ASPECT OR, P43, DOI [10.1145/1960275.1960283, DOI 10.1145/1960275.1960283]
   Schaefer Ina, 2010, P 2 INT WORKSH FEAT, P49
   Schärli N, 2003, LECT NOTES COMPUT SC, V2743, P248
   Schwerhoff M., 2010, VERIFYING SCALA TRAI
   Smaragdakis Y, 2002, ACM T SOFTW ENG METH, V11, P215, DOI 10.1145/505145.505148
   Smith C, 2005, LECT NOTES COMPUT SC, V3586, P453
   SNYDER A, 1986, SIGPLAN NOTICES, V21, P38, DOI 10.1145/960112.28702
   Strnisa R, 2007, ACM SIGPLAN NOTICES, V42, P499, DOI 10.1145/1297105.1297064
   Tarr P., 1999, Proceedings of the 1999 International Conference on Software Engineering (IEEE Cat. No.99CB37002), P107, DOI 10.1109/ICSE.1999.841000
   Thaker Sahil., 2007, P 6 INT C GENERATIVE, P95
   Thum T., 2012, P 11 INT C GEN PROGR, P11, DOI DOI 10.1145/2371401.2371404
   Torgersen M, 2004, LECT NOTES COMPUT SC, V3086, P123
   Ungar D., 1991, LISP and Symbolic Computation, V4, P223, DOI 10.1007/BF01806107
   VanLimberghen M, 1996, OBJECT ORIENTED SYST, V3, P1
NR 72
TC 5
Z9 5
U1 0
U2 8
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 1
PY 2015
VL 97
BP 282
EP 308
DI 10.1016/j.scico.2013.07.016
PN 3
PG 27
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AW8YN
UT WOS:000346545300002
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Brada, P
   Jezek, K
AF Brada, Premek
   Jezek, Kamil
TI Repository and meta-data design for efficient component consistency
   verification
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Software component; Resource-constrained devices; Compatibility;
   Repository; Meta-data
ID SERVICE
AB Composing a complete component-based application as well as updating a subset of its components may involve complex issues of maintaining application consistency. Its verification is a computationally-intensive problem, especially for behavioural compatibility or extra-functional property assessment. This poses serious challenge on resource-constrained devices which represent an important future computing platform. This work describes an approach that addresses this challenge by separating the tasks of obtaining the results of component consistency evaluation and using them in deployment and update processes. The first task in our approach is performed by a repository with sufficient computational resources. The results are transformed into rich, remotely accessible meta-data which are easily checked by the component frameworks and application management agents on the devices. Experiences with a prototype implementation called CRCE as well as validation measurements suggest that the approach can make application consistency evaluation feasible in resource-constrained scenarios. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Brada, Premek; Jezek, Kamil] Univ W Bohemia, Fac Sci Appl, Plzen 30614, Czech Republic.
C3 University of West Bohemia Pilsen
RP Brada, P (corresponding author), Univ W Bohemia, Fac Sci Appl, Plzen 30614, Czech Republic.
EM brada@kiv.zcu.cz; kjezek@ntis.zcu.cz
RI Brada, Premek/GRR-9271-2022; Brada, Premek/D-1180-2016; Brada,
   Premek/Z-2715-2019
OI Brada, Premek/0000-0001-5617-6396; Brada, Premek/0000-0001-5617-6396; 
FU Czech Science Foundation [P103/11/1489]
FX This work was supported by the Czech Science Foundation under the grant
   number P103/11/1489 "Methods of development and verification of
   component-based applications using natural language specifications".
CR Admodisastro N, 2011, LECT NOTES COMPUT SC, V6903, P180, DOI 10.1007/978-3-642-23798-0_17
   Ali M, 2013, 2013 IEEE SEVENTH INTERNATIONAL SYMPOSIUM ON SERVICE-ORIENTED SYSTEM ENGINEERING (SOSE 2013), P113, DOI 10.1109/SOSE.2013.35
   Alvaro A, 2005, EUROMICRO-SEAA 2005: 31ST EUROMICRO CONFERENCE ON SOFTWARE ENGINEERING AND ADVANCED APPLICATIONS, PROCEEDINGS, P106
   [Anonymous], 2010, SEM VERS
   [Anonymous], P 25 INT C SOFTW ENG
   Arevalo G., 2007, CLA 07, P237
   Artho C., 2012, 2012 9th IEEE Working Conference on Mining Software Repositories (MSR 2012), P141, DOI 10.1109/MSR.2012.6224274
   Azmeh Zeina, 2010, Proceedings of the Fifth International Conference on Internet and Web Applications and Services (ICIW 2010), P363, DOI 10.1109/ICIW.2010.60
   Becker S, 2009, J SYST SOFTWARE, V82, P3, DOI 10.1016/j.jss.2008.03.066
   Beugnard A, 1999, COMPUTER, V32, P38, DOI 10.1109/2.774917
   Blair G, 2009, ANN TELECOMMUN, V64, P1, DOI 10.1007/s12243-009-0086-1
   Brada P, 2009, 2009 35TH EUROMICRO CONFERENCE ON SOFTWARE ENGINEERING AND ADVANCED APPLICATIONS, PROCEEDINGS, P388, DOI 10.1109/SEAA.2009.91
   Brada P, 2006, EUROMICRO CONF PROC, P38, DOI 10.1109/EUROMICRO.2006.50
   Bures T, 2006, FOURTH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING RESEARCH, MANAGEMENT AND APPLICATIONS, PROCEEDINGS, P40, DOI 10.1109/SERA.2006.62
   Clarke Edmund M., 1997, P INT C FDN SOFTW TE, P54, DOI DOI 10.1007/BFB0058022
   Driss M., 2011, P 13 INT C INF INT W
   Flores A, 2009, ELECTRON NOTES THEOR, V236, P101, DOI 10.1016/j.entcs.2009.03.017
   George B., 2006, P 10 ECOOP WORKSH QU, P21
   Iribarne L, 2004, COMPUT J, V47, P342, DOI 10.1093/comjnl/47.3.342
   Jezek K, 2013, COMM COM INF SC, V275, P203
   Klusch M, 2008, WHITESTEIN SER SOFTW, P59, DOI 10.1007/978-3-7643-8575-0_4
   Navas JF, 2011, ACM SIGPLAN NOTICES, V46, P73, DOI 10.1145/1942788.1868306
   Paolucci M, 2002, LECT NOTES COMPUT SC, V2342, P333
   Pietschmann S., 2010, INT J ADV INTERNET T, V2, P277
   Pietschmann S., 2011, P 5 INT WORKSH WEB A
   Plasil F, 2002, IEEE T SOFTW ENG, V28
   Potuzak T., 2011, P 2 E EUR REG C ENG
   Rausch A, 2008, LECT NOTES COMPUT SC, V5153, P1
   Taylor Richard N., 2010, Software Architecture-Foundations, Theory, and Practice.
   Tietz V., 2012, ICIW 2012 7 INT C IN, P123
   Wang YQ, 2003, LECT NOTES COMPUT SC, V2910, P194
   Ye Y., 2000, SOFTWARE REUSE ADV S, P9
   Zaremski A.M., 1997, ACM Transactions on Software Engineering Methodology, V6
NR 33
TC 1
Z9 1
U1 0
U2 4
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 1
PY 2015
VL 97
BP 349
EP 365
DI 10.1016/j.scico.2014.06.013
PN 3
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AW8YN
UT WOS:000346545300007
DA 2024-07-18
ER

PT J
AU Cleve, A
   Gobert, M
   Meurice, L
   Maes, J
   Weber, J
AF Cleve, Anthony
   Gobert, Maxime
   Meurice, Loup
   Maes, Jerome
   Weber, Jens
TI Understanding database schema evolution: A case study
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Database understanding; Schema evolution; Software repository mining
ID REVERSE; DEPENDENCIES
AB Database reverse engineering (DRE) has traditionally been carried out by considering three main information sources: (1) the database schema, (2) the stored data, and (3) the application programs. Not all of these information sources are always available, or of sufficient quality to inform the DRE process. For example, getting access to real-world data is often extremely problematic for information systems that maintain private data. In recent years, the analysis of the evolution history of software programs have gained an increasing role in reverse engineering in general, but comparatively little such research has been carried out in the context of database reverse engineering. The goal of this paper is to contribute to narrowing this gap and exploring the use of the database evolution history as an additional information source to aid database schema reverse engineering. We present a tool-supported method for analyzing the evolution history of legacy databases, and we report on a large-scale case study of reverse engineering a complex information system and curate it as a benchmark for future research efforts within the community. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Cleve, Anthony; Gobert, Maxime; Meurice, Loup; Maes, Jerome] Univ Namur, Namur, Belgium.
   [Weber, Jens] Univ Victoria, Victoria, BC V8W 2Y2, Canada.
C3 University of Namur; University of Victoria
RP Cleve, A (corresponding author), Univ Namur, Namur, Belgium.
RI Weber, Jens/B-4498-2011
OI Gobert, Maxime/0000-0002-2239-9468
FU F.R.S.-FNRS
FX This work has been supported by the F.R.S.-FNRS, in the context of the
   DISSE research project.
CR CHIANG RHL, 1994, DATA KNOWL ENG, V12, P107, DOI 10.1016/0169-023X(94)90011-6
   Cleve Anthony, 2011, Journal on Data Semantics XV: LNCS 6720, P130, DOI 10.1007/978-3-642-22630-4_5
   Cleve A, 2006, WORK CONF REVERSE EN, P157
   Cornelissen B, 2011, IEEE T SOFTWARE ENG, V37, P341, DOI 10.1109/TSE.2010.47
   Curino CA, 2008, ICEIS 2008: PROCEEDINGS OF THE TENTH INTERNATIONAL CONFERENCE ON ENTERPRISE INFORMATION SYSTEMS, VOL DISI, P323
   D'Ambros M, 2012, EMPIR SOFTW ENG, V17, P531, DOI 10.1007/s10664-011-9173-9
   D'Ambros M, 2009, IEEE T SOFTWARE ENG, V35, P720, DOI 10.1109/TSE.2009.17
   Di Lucca GA, 2000, PROC IEEE INT CONF S, P52, DOI 10.1109/ICSM.2000.883005
   Gobert M, 2013, PROC IEEE INT CONF S, P472, DOI 10.1109/ICSM.2013.75
   Göde N, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P311, DOI 10.1145/1985793.1985836
   Guo PJ, 2010, Proceedings of the 32nd ACM/IEEE International Conference on Software Engineering, P495
   Henrard J., 2003, THESIS U NAMUR
   Lehman M. M., 1980, Journal of Systems and Software, V1, P213, DOI 10.1016/0164-1212(79)90022-0
   Lehman MM, 1997, FOURTH INTERNATIONAL SOFTWARE METRICS SYMPOSIUM, PROCEEDINGS, P20, DOI 10.1109/METRIC.1997.637156
   Lin DY, 2009, IWPSE-EVOL 09: ERCIM WORKSHOP ON SOFTWARE EVOLUTION (EVOL) AND INTERNATIONAL WORKSHOP ON PRINCIPLES OF SOFTWARE EVOLUTION (IWPSE), P31
   Lopes S, 2002, INFORM SYST, V27, P1, DOI 10.1016/S0306-4379(01)00027-8
   MARKOWITZ VM, 1990, IEEE T SOFTWARE ENG, V16, P777, DOI 10.1109/32.57618
   McNair A, 2007, 14TH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P130, DOI 10.1109/WCRE.2007.52
   NAVATHE SB, 1988, P 8 ENT REL APPR BRI, P305
   Pannurat N., ARXIV10043272 CORR
   Petit JM, 1994, LECT NOTES COMPUT SC, V881, P369
   PREMERLANI WJ, 1994, COMMUN ACM, V37, P42, DOI 10.1145/175290.175293
   Rahm E, 2006, SIGMOD REC, V35, P30, DOI 10.1145/1228268.1228273
   Wettel R, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P551, DOI 10.1145/1985793.1985868
   Yao H, 2008, DATA MIN KNOWL DISC, V16, P197, DOI 10.1007/s10618-007-0083-9
   Zaidman A, 2011, EMPIR SOFTW ENG, V16, P325, DOI 10.1007/s10664-010-9143-7
NR 26
TC 21
Z9 24
U1 0
U2 8
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 1
PY 2015
VL 97
SI SI
BP 113
EP 121
DI 10.1016/j.scico.2013.11.025
PN 1
PG 9
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AU6PR
UT WOS:000345725100020
OA Bronze
DA 2024-07-18
ER

PT J
AU Heinen, J
   Jansen, C
   Katoen, JP
   Noll, T
AF Heinen, Jonathan
   Jansen, Christina
   Katoen, Joost-Pieter
   Noll, Thomas
TI Verifying pointer programs using graph grammars
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Hyperedge replacement grammars; Java bytecode; Dynamic data structures;
   Verification
ID MODEL
AB This paper argues that graph grammars naturally model dynamic data structures such as lists, trees and combinations thereof. These grammars can be exploited to obtain finite abstractions of pointer-manipulating programs, thus enabling model checking. Experimental results for verifying Lindstrom's variant of the Deutsch-Schorr-Waite tree traversal algorithm illustrate this. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Heinen, Jonathan; Jansen, Christina; Katoen, Joost-Pieter; Noll, Thomas] Rhein Westfal TH Aachen, Software Modeling & Verificat Grp, Aachen, Germany.
C3 RWTH Aachen University
RP Noll, T (corresponding author), Rhein Westfal TH Aachen, Software Modeling & Verificat Grp, Aachen, Germany.
RI Katoen, Joost-Pieter/O-3307-2018
OI Katoen, Joost-Pieter/0000-0002-6143-1926; Noll,
   Thomas/0000-0002-1865-1798
FU EU FP7 project CARP (Correct and Efficient Accelerator Programming)
FX This research has partially been funded by EU FP7 project CARP (Correct
   and Efficient Accelerator Programming), http://www.carpprojecteu.
CR [Anonymous], 1976, J GEOM
   Bogudlov I, 2007, LECT NOTES COMPUT SC, V4590, P221
   Bornat R, 2000, LECT NOTES COMPUT SC, V1837, P102
   Bouajjani A, 2006, LECT NOTES COMPUT SC, V4134, P52
   Calcagno C, 2011, J ACM, V58, DOI 10.1145/2049697.2049700
   Drewes F., 1997, Handbook of Graph Grammars and Computing by Graph Transformation, V1, P95, DOI [10.1142/9789812384720, DOI 10.1142/9789812384720, DOI 10.1142/9789812384720_0002]
   Fradet P., 1996, Programming Languages and Systems - ESOP '96. 6th European Symposium on Programming. Proceedings, P125
   Heinen J., 2012, LECT NOTES COMPUT SC, V7421, P142
   Hinman PG., 2005, Fundamentals of mathematical logic
   Hoare CAR, 1999, LECT NOTES COMPUT SC, V1628, P1
   Jansen C, 2011, LECT NOTES COMPUT SC, V6638, P323, DOI 10.1007/978-3-642-21254-3_25
   Lindstrom G., 1973, Information Processing Letters, V2, P47, DOI 10.1016/0020-0190(73)90012-4
   Loginov A, 2006, LECT NOTES COMPUT SC, V4134, P261
   Pnueli A., 1977, 18th Annual Symposium on Foundations of Computer Science, P46, DOI 10.1109/SFCS.1977.32
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Sagiv M, 2002, ACM T PROGR LANG SYS, V24, P217, DOI 10.1145/514188.514190
   SCHORR H, 1967, COMMUN ACM, V10, P501, DOI 10.1145/363534.363554
NR 17
TC 2
Z9 2
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 1
PY 2015
VL 97
SI SI
BP 157
EP 162
DI 10.1016/j.scico.2013.11.012
PN 1
PG 6
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AU6PR
UT WOS:000345725100026
OA Bronze
DA 2024-07-18
ER

PT J
AU Welsch, Y
   Poetzsch-Heffter, A
AF Welsch, Yannick
   Poetzsch-Heffter, Arnd
TI A fully abstract trace-based semantics for reasoning about backward
   compatibility of class libraries
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 14th Brazilian Symposium on Formal Methods (SBMF)
CY SEP 26-30, 2011
CL Sao Paulo, BRAZIL
SP CNPq, Brazilian Sci & Technol Res Council, CAPES, Brazilian Higher Educ Fund Council, FAPESP, Sao Paulo Res Fdn, Google Inc, Univ Sao Paulo, Univ Presbiteriana Mackenzie
DE Full abstraction; Class libraries; Trace semantics; Contextual preorder;
   Backward compatibility
ID REPRESENTATION INDEPENDENCE; OWNERSHIP; BISIMULATIONS; INVARIANTS;
   REFINEMENT; LOGIC; JAVA
AB Backward compatibility is the property that an old version of a library can safely be replaced by a new version without breaking existing clients. Formal reasoning about backward compatibility requires an adequate semantic model to compare the behavior of two library implementations. In the object-oriented setting with inheritance and callbacks, such a model must account for the complex interface between library implementations and clients.
   In this paper, we develop a fully abstract trace-based semantics for class libraries in object-oriented languages, in particular for Java-like sealed packages. Our approach enhances a standard operational semantics such that the change of control between the library and the client context is made explicit in terms of interaction labels. By using traces over these labels, we abstract from the data representation in the heap, support class hiding, and provide fully abstract package denotations. Soundness and completeness of the trace semantics is proven using specialized simulation relations on the enhanced operational semantics. The simulation relations also provide a proof method for reasoning about backward compatibility. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Welsch, Yannick; Poetzsch-Heffter, Arnd] Univ Kaiserslautern, Dept Comp Sci, D-67663 Kaiserslautern, Germany.
C3 University of Kaiserslautern
RP Welsch, Y (corresponding author), Univ Kaiserslautern, Dept Comp Sci, D-67663 Kaiserslautern, Germany.
EM welsch@cs.uni-kl.de; poetzsch@cs.uni-kl.de
CR Abadi M, 2003, LECT NOTES COMPUT SC, V2772, P11
   Abraham E., 2004, Theoretical Aspects of Computing - ICTAC 2004. First International Colloquium. Revised Selected Papers (Lecture Notes in Computer Science Vol.3407), P37
   [Anonymous], 2007, EVOLVING JAVA BASED
   [Anonymous], 1997, Object-oriented software construction
   [Anonymous], ECMA334
   Back R.-J., 2000, Formal Aspects of Computing, V12, P18, DOI 10.1007/s001650070034
   Back R.-J., 1998, Refinement Calculus
   Banerjee A, 2005, J ACM, V52, P894, DOI 10.1145/1101821.1101824
   Banerjee A, 2005, LECT NOTES COMPUT SC, V3586, P387
   Barnett M, 2006, LECT NOTES COMPUT SC, V4111, P364
   Clarke DG, 1998, ACM SIGPLAN NOTICES, V33, P48, DOI 10.1145/286942.286947
   Cook William R., 1989, PhD dissertation
   Damiani F., 2012, TYPE SYSTEM CHECKING, P1737
   Dig D, 2006, J SOFTW MAINT EVOL-R, V18, P83, DOI 10.1002/smr.328
   Drossopoulou S, 2008, LECT NOTES COMPUT SC, V5142, P412, DOI 10.1007/978-3-540-70592-5_18
   Eclipse PDE API tools, 2008, ECLIPSE PDE API TOOL
   Filipovic I, 2010, THEOR COMPUT SCI, V411, P4379, DOI 10.1016/j.tcs.2010.09.021
   Filipovic I, 2010, FORM ASP COMPUT, V22, P547, DOI 10.1007/s00165-009-0125-8
   Flatt Matthew., 1999, FORMAL SYNTAX SEMANT, V1523, P241, DOI [10.1007/3-540-48737-9_7, DOI 10.1007/3-540-48737-9_7]
   Geilmann K., 2011, INT WORKSH AL CONF O
   Godlin B, 2009, DES AUT CON, P466
   Gosling J., 2005, Java Language Specification, Vthird
   Gotsman A, 2011, LECT NOTES COMPUT SC, V6756, P453, DOI 10.1007/978-3-642-22012-8_36
   Grothoff C, 2001, ACM SIGPLAN NOTICES, V36, P241, DOI 10.1145/504311.504300
   Hennessy M., 1980, Automata, Languages and Programming, Seventh Colloquium, P299
   Hennessy M., 1988, An algebraic theory of processes
   Hoare C. A. R., 1972, Acta Informatica, V1, P271, DOI 10.1007/BF00289507
   Igarashi A, 2001, ACM T PROGR LANG SYS, V23, P396, DOI 10.1145/503502.503505
   Jeffrey A, 2005, LECT NOTES COMPUT SC, V3444, P423
   Jeffrey A, 2005, THEOR COMPUT SCI, V338, P17, DOI 10.1016/j.tcs.2004.10.012
   Johnsen E.B., 2011, Lecture Notes in Computer Science, V6957, P142, DOI [10.1007/978- 3- 642-25271-6 8, DOI 10.1007/978-3-642-25271-6]
   Koutavas V, 2006, LECT NOTES COMPUT SC, V3924, P146
   KOUTAVAS V, 2007, INF WORKSH REC FOOL
   Lamport L, 2012, J FIX POINT THEORY A, V11, P43, DOI 10.1007/s11784-012-0071-6
   Leino KRM, 2012, FORM ASP COMPUT, V24, P519, DOI 10.1007/s00165-012-0254-3
   Leino KRM, 2004, LECT NOTES COMPUT SC, V3086, P491
   Mikhajlova A., 1997, FME '97: Industrial Applications and Strengthened Foundations of Formal Methods. 4th International Symposium of Formal Methods Europe. Proceedings, P82
   Milner R., 1977, Theoretical Computer Science, V4, P1, DOI 10.1016/0304-3975(77)90053-6
   Morgan Carroll, 1994, Programming from specifications
   Morris J.H., 1968, 57 MIT LAB COMP SCI
   Müller P, 2006, SCI COMPUT PROGRAM, V62, P253, DOI 10.1016/j.scico.2006.03.001
   Naumann DA, 2012, THEOR COMPUT SCI, V433, P60, DOI 10.1016/j.tcs.2012.02.009
   Plotkin G. D., 1977, Theoretical Computer Science, V5, P223, DOI 10.1016/0304-3975(77)90044-5
   Poetzsch-Heffter A, 1999, LECT NOTES COMPUT SC, V1576, P162
   Sangiorgi D, 2007, IEEE S LOG, P293, DOI 10.1109/LICS.2007.17
   Schäfer J, 2010, LECT NOTES COMPUT SC, V6183, P275, DOI 10.1007/978-3-642-14107-2_13
   STEFFEN M, 2006, OBJECT CONNECTIVITY
   Sumii E, 2007, THEOR COMPUT SCI, V375, P169, DOI 10.1016/j.tcs.2006.12.032
   Sumii E, 2007, J ACM, V54, DOI 10.1145/1284320.1284325
   Welsch Y, 2012, P 14 WORKSH FORM TEC, P35
   Welsch Y., 2010, INTERNAL REPORT
   Welsch Y., 2013, BACKWARD COMPATIBILI
   Welsch Y, 2011, LECT NOTES COMPUT SC, V7021, P28, DOI 10.1007/978-3-642-25032-3_3
   Woodcock J., 1996, SPECIFICATION REFINE
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
NR 55
TC 7
Z9 7
U1 0
U2 16
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 15
PY 2014
VL 92
BP 129
EP 161
DI 10.1016/j.scico.2013.10.002
PN B
PG 33
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA AK7HA
UT WOS:000338598100004
DA 2024-07-18
ER

PT J
AU Beohar, H
   Cuijpers, PJL
AF Beohar, H.
   Cuijpers, P. J. L.
TI Avoiding diamonds in desynchronisation
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 9th International Symposium on Formal Aspects of Component Software
   (FACS)
CY SEP 12-14, 2012
CL Mountain View, CA
DE Synchrony to asynchrony; Desynchronisation; Branching bisimulation;
   Equivalence checking of infinite state systems
ID SUPERVISORY CONTROL; COMMUNICATION
AB The design of concurrent systems often assumes synchronous communication between different parts of a system. When system components are physically apart, this assumption becomes inappropriate. Desynchronisation is a technique that aims to implement a synchronous design in an asynchronous manner by placing buffers between the components of the synchronous design. When queues are used as buffers, the so-called 'diamond property' (among others) ensures correct operation of the desynchronised design. However, this property is difficult to establish in practice.
   In this paper, we give sufficient and necessary conditions under which a concrete synchronous design (i.e., without the unobservable action) is equivalent to an asynchronous design and formally prove that the diamond property is no longer needed for desynchronisation when half-duplex queues are used as a communication buffer. Furthermore, we discuss how the half-duplex condition can be further relaxed when the diamond property can be partially guaranteed. To illustrate how this theory may be applied, we desynchronise the synchronous systems that are synthesised using supervisory control theory. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Beohar, H.] Halmstad Univ, Ctr Res Embedded Syst, S-30118 Halmstad, Sweden.
   [Cuijpers, P. J. L.] Eindhoven Univ Technol, Dept Math & Comp Sci, NL-5600 MB Eindhoven, Netherlands.
C3 Halmstad University; Eindhoven University of Technology
RP Beohar, H (corresponding author), Halmstad Univ, Ctr Res Embedded Syst, S-30118 Halmstad, Sweden.
EM harsh.beohar@hh.se; P.J.L.Cuijpers@tue.nl
OI Cuijpers, Pieter/0000-0002-5487-4972
CR ALFARO L, 2005, NATO SCI SERIES, V195, P83
   [Anonymous], FN19 DAIMI
   Baeten J., 2009, Process Algebra: Equational Theories of Communicating Processes
   Balemi S., 1992, THESIS SWISS FEDERAL
   Basu S., 2011, P 20 INT C WORLD WID, P795
   Basu S, 2012, LECT NOTES COMPUT SC, V7148, P56, DOI 10.1007/978-3-642-27940-9_5
   Beohar H., 2013, THESIS EINDHOVEN U T
   Beohar H., 2012, 9 INT S FORM ASP COM
   Beohaw H, 2011, SCI ANN COMPUT SCI, V21, P5
   BRAND D, 1983, J ACM, V30, P323, DOI 10.1145/322374.322380
   Cécé G, 2005, INFORM COMPUT, V202, P166, DOI 10.1016/j.ic.2005.05.006
   Fabian M, 1998, IEEE DECIS CONTR P, P3305, DOI 10.1109/CDC.1998.758209
   Fabian M, 1996, IEEE DECIS CONTR P, P2213, DOI 10.1109/CDC.1996.572970
   Fischer C., 1996, LECT NOTES COMPUTER, V1119, P735
   Forschelen S., 2010, Master's Thesis
   Glabbeek R.J.v., 1993, P 4 INT C CONC THEOR, P66
   Groote Jan Friso., 2007, METHODS MODELLING SO
   Hennicker R, 2010, LECT NOTES COMPUT SC, V6028, P154
   HOARE CAR, 1978, COMMUN ACM, V21, P666, DOI 10.1145/359576.359585
   Mateescu R., 2010, SPECIFICATION ANAL A, P141
   Peters K, 2011, ELECTRON PROC THEOR, P89, DOI 10.4204/EPTCS.64.7
   RAMADGE PJ, 1987, SIAM J CONTROL OPTIM, V25, P206, DOI 10.1137/0325013
   Salaün G, 2009, LECT NOTES COMPUT SC, V5423, P167
   Tanenbaum A.S., 2002, COMPUT NETW, VFourth
   UDDING J, 1984, THESIS EINDHOVEN U T
NR 25
TC 2
Z9 2
U1 0
U2 4
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 1
PY 2014
VL 91
SI SI
BP 45
EP 69
DI 10.1016/j.scico.2013.12.002
PN A
PG 25
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA AK4NL
UT WOS:000338401300003
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Sowe, SK
   Cerone, A
   Settas, D
AF Sowe, Sulayman K.
   Cerone, Antonio
   Settas, Dimitrios
TI An empirical study of FOSS developers patterns of contribution:
   Challenges for data linkage and analysis
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Open Source Software developers; Open Source Software projects; Software
   repositories; Concurrent Versions System; Mailing lists
ID KNOWLEDGE; PROJECTS
AB The majority of Free and Open Source Software (FOSS) developers are mobile and often use different identities in the projects or communities they participate in. These characteristics pose challenges for researchers studying the presence and contributions of developers across multiple repositories. In this paper, we present a methodology, employ various statistical measures, and leverage Bayesian networks to study the patterns of contribution of 502 developers in both Version Control System (VCS) and mailing list repositories in 20 GNOME projects. Our findings shows that only a small percentage of developers are contributing to both repositories and this cohort is making more commits than they are posting messages to mailing lists. The implications of these findings for understanding the patterns of contribution in FOSS projects and on the quality of the final product are discussed. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Sowe, Sulayman K.] NICT, Informat Serv Platform Lab, Kyoto, Japan.
   [Cerone, Antonio; Settas, Dimitrios] UNU IIST, Macau, Peoples R China.
C3 National Institute of Information & Communications Technology (NICT) -
   Japan
RP Sowe, SK (corresponding author), NICT, Informat Serv Platform Lab, Kyoto, Japan.
EM sowe@nict.go.jp; antonio@iist.unu.edu; settdimi@iist.unu.edu
RI Sowe, Dr. Sulayman K/C-1737-2015
OI Sowe, Dr. Sulayman K/0000-0002-8605-2009
FU Japan Society for the Promotion of Science (JSPS), JSPS FOSSINA Project
   [P10807]; Macao Science and Technology Development Fund [019/2011/A1];
   Austrian Science Fund (FWF) [P10807] Funding Source: Austrian Science
   Fund (FWF)
FX We are grateful to the FLOSSMETRICS project for providing access to the
   data and tools used in this study. We also wish to acknowledge the
   excellent comments we received from anonymous reviewers of both the
   OpenCert 2010 Workshop and the Science of Computer Programming Journal.
   The first author wishes to acknowledge the Japan Society for the
   Promotion of Science (JSPS) for sponsoring this research, JSPS FOSSINA
   Project ID: P10807. This work has also been supported by Macao Science
   and Technology Development Fund, File No. 019/2011/A1, in the context of
   the PPAeL project.
CR Amor J., P PROMISE 2006 2 INT
   [Anonymous], 1975, MYTHICAL MAN MONTH E
   [Anonymous], 2007, PROMISE 07, DOI DOI 10.1109/PROMISE.2007.10
   [Anonymous], 2003, RES METHODS BUSINESS
   Beaver J., PROMISE 09 P 5 INT C
   Bird Christian, 2006, P MSR, P137, DOI DOI 10.1145/1137983.1138016
   Capiluppi A, 2003, SEVENTH EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, PROCEEDINGS, P317, DOI 10.1109/CSMR.2003.1192440
   Cerone A., 2012, ELECT COMM EASST, V48
   Cerone A., 2011, ELECT COMMUNICATIONS, V48
   Cerone A., 2011, ELECT COMM EASST, V48
   CHENG J, 2000, PREPROCESSOR SYSTEM
   CHENG J, 1998, POWERCONSTRUCTOR SYS
   Dalle JM, 2007, INT FED INFO PROC, V234, P247
   Dinh-Trong TT, 2005, IEEE T SOFTWARE ENG, V31, P481, DOI 10.1109/TSE.2005.73
   Druzdzel M., 2010, GENIE2 0 SYSTEM
   Gousios G., 2008, P 2008 INT WORKING C, P129, DOI [DOI 10.1145/1370750.1370781, 10.1145/1370750.1370781]
   Haefliger S, 2008, MANAGE SCI, V54, P180, DOI 10.1287/mnsc.1070.0748
   Jensen F. V., 2007, Bayesian networks and decision graphs
   Jones S.R.Q., 2004, INF SYST RES, V15
   Ju Long, 2006, Journal of Information, Information Technology & Organizations, V1, P75
   Kremenek T., 2009, THESIS STANFORD CA U
   Kuk G, 2006, MANAGE SCI, V52, P1031, DOI 10.1287/mnsc.1060.0551
   Lan Yuqing, 2008, 2008 International Conference on Computer Science and Software Engineering (CSSE 2008), P758, DOI 10.1109/CSSE.2008.1039
   Liu Y., 2008, International Journal of Advanced Science and Technology, V1, P35
   Madey G., AM C INF SYST AMCIS2, P1806
   Massey B., 2005, PROMISE 05 P 2005 WO, P1
   Mockus A, 2002, ACM T SOFTW ENG METH, V11, P309, DOI 10.1145/567793.567795
   Norusis MarijaJ., 2004, STAT PROCEDURES COMP
   Robles Gregorio, 2009, International Journal of Open Source Software & Processes, V1, P24, DOI 10.4018/jossp.2009010102
   Robles G, 2006, INT FED INFO PROC, V203, P273
   Scacchi W., 2006, Software Process Improvement and Practice, V11, P95, DOI 10.1002/spip.255
   Settas DL, 2009, KNOWL ENG REV, V24, P287, DOI 10.1017/S0269888909990075
   Shaikh S.A., 2009, FDN TECHNIQUES OPEN, V20
   Sowe S.K., 2007, Emerging free and open source software practices
   Sowe S.K., 2010, J ELECT COMMUNICATIO, V33, P442
   Sowe S.K., 2008, 3 INT WORKSH PUBL DA
   Sowe S, 2006, INFORM SOFTWARE TECH, V48, P1025, DOI 10.1016/j.infsof.2005.12.019
   Sowe SK, 2008, J SYST SOFTWARE, V81, P431, DOI 10.1016/j.jss.2007.03.086
   Sowe SK, 2007, INT FED INFO PROC, V234, P147
   SQO-OSS, 2009, IST200533331 SQO OSS
   SQO-OSS, 2009, IST200533331 SQO 0SS
   Stamelos I, 2002, INFORM SYST J, V12, P43, DOI 10.1046/j.1365-2575.2002.00117.x
   Valverde S, 2006, IEEE INTELL SYST, V21, P36, DOI 10.1109/MIS.2006.34
   Wagner S, 2010, INFORM SOFTWARE TECH, V52, P1230, DOI 10.1016/j.infsof.2010.03.016
NR 44
TC 2
Z9 2
U1 0
U2 8
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 1
PY 2014
VL 91
SI SI
BP 249
EP 265
DI 10.1016/j.scico.2013.11.033
PN B
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AK4NO
UT WOS:000338401600007
OA hybrid
DA 2024-07-18
ER

PT J
AU Gonzalez-Calleros, J
   Osterloh, JP
   Feil, R
   Lüdtke, A
AF Gonzalez-Calleros, Juan
   Osterloh, Jan-Patrick
   Feil, Rene
   Luedtke, Andreas
TI Automated UI evaluation based on a cognitive architecture and UsiXML
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Ul evaluation; UsiXML; Cognitive architecture; CASCaS; UsabilityAdviser
ID USER INTERFACES
AB In this paper, we will present a method for automated UI evaluation. Based on a formal Ul description in UsiXML, the cognitive architecture CASCaS will be used to predict human performance on the UI, in terms of task execution time, workload and possible human errors. In addition, the UsabilityAdviser tool can be used to check the UI description against a set of usability rules. This approach fits well into the human performance and error analysis proposed in the European project HUMAN, where virtual testers (CASCaS) are used to evaluate assistant systems and their HMI. A first step for realizing this approach has been made by implementing a 3D rendering engine for UsiXML. (C) 2013 Elsevier B.V. All rights reserved.
C1 Benemerita Univ Autonoma Puebla, Fac Comp Sci, Puebla 72000, Mexico.
   [Osterloh, Jan-Patrick; Feil, Rene; Luedtke, Andreas] OFFIS, Inst Informat Technol, D-26121 Oldenburg, Germany.
C3 Benemerita Universidad Autonoma de Puebla
RP Osterloh, JP (corresponding author), OFFIS, Inst Informat Technol, Escherweg 2, D-26121 Oldenburg, Germany.
EM osterloh@offis.de; juan.gonzalez@cs.buap.mx;
   rene.feil@informatik.uni-oldenburg.de; luedtke@offis.de
RI Calleros, Juan Manuel Gonzalez/AAL-9968-2020; Osterloh,
   Jan-Patrick/IWU-9474-2023
OI Calleros, Juan Manuel Gonzalez/0000-0002-9661-3615; Osterloh,
   Jan-Patrick/0000-0002-4200-3002; Ludtke, Andreas/0000-0002-2219-8391
FU HUMAN European project - European Commission
   [FP7-AAT-2007-RTD-1/CP-FP-211988, 20080026]
FX We gratefully acknowledge the support of the HUMAN European project
   (Model based Analysis of Human Errors during Aircraft Cockpit System
   Design, project funded by FP7-AAT-2007-RTD-1/CP-FP-211988 from European
   Commission), and the ITEA2 Call 3 UsiXML project under reference
   20080026.
CR Anderson J.R., 2000, LEARN MEMORY
   Anderson JR, 2004, PSYCHOL REV, V111, P1036, DOI 10.1037/0033-295x.111.4.1036
   [Anonymous], 1994, TASK CTR USER INTERF
   Barboni E., 2006, P HCI AER HCI AER 20, P81
   Beirekdar Abdo, 2002, P 4 INT C COMPUTER A, P337
   Bellamy R., 2010, EVALUATION USABILITY
   Bierbaum C.R., ADA210763 US ARM RES, V1
   Bossche P., 2006, THESIS U CATHOLIQUE
   Calvary G, 2002, CAMELEON REFERENCE F
   Coyette A, 2007, LECT NOTES COMPUT SC, V4401, P160
   EJohn B.E, 2011, USING PREDICTIVE HUM
   García JG, 2008, J UNIVERS COMPUT SCI, V14, P3160
   LUDTKE A, 2006, P INT C HUM COMP INT, P40
   Lüdtke A, 2009, LECT NOTES COMPUT SC, V5726, P471, DOI 10.1007/978-3-642-03655-2_53
   McCathieNevile Ch., 2000, 7 W3C
   Mollwitz V., 2006, AFMS HDB USERS
   Raskin Jef., 2000, HUMANE INTERFACE
   RASMUSSEN J, 1983, IEEE T SYST MAN CYB, V13, P257, DOI 10.1109/TSMC.1983.6313160
   Smith S.L., 1984, A154907 NTIS AD
   Vanderdonckt J, 2005, LECT NOTES COMPUT SC, V3520, P16
   VANDERDONCKT J., 2005, J WEB ENG, V4, P102
   Weber L., 2009, 8 BERLINER WERKSTATT, V8, P86
   Wortelen B., 2009, 8 BERLINER WERKSTATT, V8, P80
NR 23
TC 3
Z9 5
U1 1
U2 10
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 15
PY 2014
VL 86
SI SI
BP 43
EP 57
DI 10.1016/j.scico.2013.04.004
PG 15
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AG7OW
UT WOS:000335608500004
OA hybrid
DA 2024-07-18
ER

PT J
AU Morgan, C
AF Morgan, Carroll
TI An old new notation for elementary probability theory
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Probability theory; Eindhoven quantifier notation; Hidden Markov Models;
   Monads; Haskell
ID MONADS
AB The Eindhoven approach to quantifier notation is 40 years old. We extend it by adding "distribution comprehensions" systematically to its repertoire: we believe the resulting notation for elementary probability theory is new.
   After a step-by-step explanation of the proposed notational innovations, with small examples, we give as our exemplary case study the probabilistic reasoning associated with a quantitative noninterference semantics based on Hidden Markov Models of computation. Although that example was the motivation for this work, we believe the proposal here will be more generally applicable: and so we also revisit a number of popular puzzles, to illustrate the notation's wider utility.
   Finally, we review the connection between comprehension notations and (category-theoretic) monads, and show how the Haskell approach to monad comprehensions applies to the distribution comprehensions we have introduced. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Morgan, Carroll] Univ New S Wales, Sydney, NSW 2052, Australia.
C3 University of New South Wales Sydney
RP Morgan, C (corresponding author), Univ New S Wales, Sydney, NSW 2052, Australia.
EM carrollm@cse.unsw.edu.au
FU Dutch NWO [040.11.303]; Australian ARC [DP1092464]; Australian Research
   Council [DP1092464] Funding Source: Australian Research Council
FX I I am grateful for the support of the Dutch NWO (Grant 040.11.303) and
   the Australian ARC (Grant DP1092464).
CR Altenkirch T, 2010, LECT NOTES COMPUT SC, V6014, P297, DOI 10.1007/978-3-642-12032-9_21
   [Anonymous], 2010, HASK REP
   [Anonymous], 1990, Predicate Calculus and Program Semantics
   Cheng S., A CRASH COURSE ON TH
   Deng Y., 2007, P LICS 07
   Dijkstra E. W., 1976, A Discipline of Pro-gramming
   Erwig M, 2006, J FUNCT PROGRAM, V16, P21, DOI 10.1017/S0956796805005721
   Fremlin D. H., 2000, MEASURE THEORY, VI-IV
   Fric R, 2010, STUD LOGICA, V94, P215, DOI 10.1007/s11225-010-9232-z
   Gibbons J, 2011, ACM SIGPLAN NOTICES, V46, P2, DOI 10.1145/2034574.2034777
   Goguen J. A., 1984, Proceedings of the 1984 Symposium on Security and Privacy, P75
   Hayes IJ., 1987, SPECIFICATION CASE S
   Hehner ECR, 2011, FORM ASP COMPUT, V23, P391, DOI 10.1007/s00165-010-0157-0
   Jurafsky D., 2000, Speech and language processing: An introduction to natural language processing, computational linguistics, and speech recognition
   Kiselyov O, 2009, LECT NOTES COMPUT SC, V5658, P360, DOI 10.1007/978-3-642-03034-5_17
   Kowalski E., Measure and Integral
   Lawvere F.W., 1962, PREPRINT
   McIver A., 2012, P LICS 2012
   McIver A, 2010, LECT NOTES COMPUT SC, V6199, P223, DOI 10.1007/978-3-642-14162-1_19
   Mclver A.K., 2013, MATH STRUCT IN PRESS
   Mclver A.K., 2005, TECH MONO COMP SCI
   Morgan C, 1996, ACM T PROGR LANG SYS, V18, P325, DOI 10.1145/229542.229547
   Morgan Carroll, 2012, Mathematics of Program Construction. Proceedings 11th International Conference, MPC 2012, P48, DOI 10.1007/978-3-642-31113-0_5
   Morgan C, 2010, FORM ASP COMPUT, P1
   Morgan C, 2006, LECT NOTES COMPUT SC, V4014, P359, DOI 10.1007/11783596_21
   Morgan C, 2009, SCI COMPUT PROGRAM, V74, P629, DOI 10.1016/j.scico.2007.09.003
   Oliveira J., 2012, IMPLEMENTATION APPLI, P52, DOI [10.1007/978-3-642-13321-3, DOI 10.1007/978-3-642-13321-3]
   Oliveira JN, 2012, FORM ASP COMPUT, V24, P433, DOI 10.1007/s00165-012-0240-9
   Ramsey N, 2002, ACM SIGPLAN NOTICES, V37, P154, DOI 10.1145/565816.503288
   Wadler P., 2013, COMMUNICATION
   Wadler Philip, 1992, Mathematical Structures in Computer Science, P61
NR 31
TC 0
Z9 0
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 1
PY 2014
VL 85
SI SI
BP 115
EP 136
DI 10.1016/j.scico.2013.09.003
PN B
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CC8KX
UT WOS:000350618700003
OA hybrid
DA 2024-07-18
ER

PT J
AU Macedonio, D
   Merro, M
AF Macedonio, Damiano
   Merro, Massimo
TI A semantic analysis of key management protocols for wireless sensor
   networks
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Wireless sensor network; Key management protocol; Security analysis;
   Process calculus
ID SECURITY PROTOCOLS; MOBILITY MODELS; CALCULUS; FRAMEWORK; MULTICAST
AB Gorrieri and Martinelli's timed Generalized Non-Deducibility on Compositions (tGNDC) schema is a well-known general framework for the formal verification of security protocols in a concurrent scenario. We generalise the tGNDC schema to verify wireless network security protocols. Our generalisation relies on a simple timed broadcasting process calculus whose operational semantics is given in terms of a labelled transition system which is used to derive a standard simulation theory. We apply our tGNDC framework to perform a security analysis of three well-known key management protocols for wireless sensor networks: mu TESLA, LEAP+ and LiSP. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Macedonio, Damiano; Merro, Massimo] Univ Verona, Dipartimento Informat, I-37100 Verona, Italy.
C3 University of Verona
RP Merro, M (corresponding author), Univ Verona, Dipartimento Informat, I-37100 Verona, Italy.
EM massimo.merro@univr.it
OI Merro, Massimo/0000-0002-1712-7492
FU Dipartimento di Informatica Verona [AdR1601/11]; PRIN national project
   "Security Horizons"
FX The first author is supported by research fellowship n. AdR1601/11,
   funded by Dipartimento di Informatica Verona. Work partially supported
   by the PRIN 2010-2011 national project "Security Horizons".
CR Anderson R, 2004, 12TH IEEE INTERNATIONAL CONFERENCE ON NETWORK PROTOCOLS - PROCEEDINGS, P206, DOI 10.1109/ICNP.2004.1348111
   [Anonymous], 2004, Proc. 2nd ACM workshop on Security of Ad hoc and Sensor Networks, DOI DOI 10.1145/1029102.1029113
   [Anonymous], Proceedings of the 2Nd International Conference on Embedded Networked Sensor Systems. SenSys'04, DOI DOI 10.1145/1031495.1031515
   Armando A, 2005, LECT NOTES COMPUT SC, V3576, P281
   Arnaud M, 2010, 2010 23RD IEEE COMPUTER SECURITY FOUNDATIONS SYMPOSIUM (CSF), P59, DOI 10.1109/CSF.2010.12
   Ballardin F, 2011, LECT NOTES COMPUT SC, V6561, P206, DOI 10.1007/978-3-642-19751-2_14
   Basagni S., 2001, MOBIHOC 2001. Proceedings of the 2001 ACM International Symposium on Mobile Ad Hoc Networking and Computing, P156, DOI 10.1145/501416.501438
   Bertot Y, 2008, LECT NOTES COMPUT SC, V5170, P12, DOI 10.1007/978-3-540-71067-7_3
   Blackshear S., 2010, SAC, P1985
   Chae Hoon Lim, 2008, 2008 28th International Conference on Distributed Computing Systems Workshops (ICDCS Workshops), P376, DOI 10.1109/ICDCS.Workshops.2008.93
   DIFFIE W, 1976, IEEE T INFORM THEORY, V22, P644, DOI 10.1109/TIT.1976.1055638
   Focardi R, 1999, LECT NOTES COMPUT SC, V1708, P794
   Gallina L, 2010, IFIP ADV INF COMM TE, V323, P20
   Ghassemi F, 2011, THEOR COMPUT SCI, V412, P3262, DOI 10.1016/j.tcs.2011.03.017
   Ghassemi F, 2010, FUND INFORM, V105, P375, DOI 10.3233/FI-2010-371
   Godskesen JC, 2007, LECT NOTES COMPUT SC, V4467, P132
   Godskesen JC, 2009, LECT NOTES COMPUT SC, V5521, P106, DOI 10.1007/978-3-642-02053-7_6
   Gorrieri R, 2004, SCI COMPUT PROGRAM, V50, P23, DOI 10.1016/j.scico.2004.01.001
   Gorrieri R, 2008, J AUTOM REASONING, V41, P325, DOI 10.1007/s10817-008-9112-7
   HENNESSY M, 1995, INFORM COMPUT, V117, P221, DOI 10.1006/inco.1995.1041
   Johnson D.B., 1996, Mobile Computing, DOI DOI 10.1007/978-0-585-29603-65
   Kouzapas D, 2011, LECT NOTES COMPUT SC, V6722, P213, DOI 10.1007/978-3-642-21461-5_14
   Lanese I, 2010, THEOR COMPUT SCI, V411, P1928, DOI 10.1016/j.tcs.2010.01.023
   Luk M, 2007, PROCEEDINGS OF THE SIXTH INTERNATIONAL SYMPOSIUM ON INFORMATION PROCESSING IN SENSOR NETWORKS, P479, DOI 10.1109/IPSN.2007.4379708
   Macedonio Damiano, 2012, NASA Formal Methods. Proceedings of the 4th International Symposium, NFM 2012, P403, DOI 10.1007/978-3-642-28891-3_36
   Merro M, 2010, LECT NOTES COMPUT SC, V5961, P228
   Merro M, 2009, INFORM COMPUT, V207, P194, DOI 10.1016/j.ic.2007.11.010
   Milner R., 1989, Communication and concurrency
   Misra S, 2009, COMPUT COMMUN NETW S, P1, DOI 10.1007/978-1-84800-328-6
   Nanz S, 2006, THEOR COMPUT SCI, V367, P203, DOI 10.1016/j.tcs.2006.08.036
   NICOLLIN X, 1992, LECT NOTES COMPUT SC, V575, P376
   Nipkow T., 2002, ISABELLE HOL PROOF A, DOI DOI 10.1007/3-540-45949-9
   Papadimitratos P, 2003, 2003 SYMPOSIUM ON APPLICATIONS AND THE INTERNET WORKSHOPS, PROCEEDINGS, P379, DOI 10.1109/SAINTW.2003.1210190
   Park T., 2004, ACM T EMBED COMPUT S, V3, P634, DOI DOI 10.1145/1015047.1015056
   Perrig A, 2002, WIREL NETW, V8, P521, DOI 10.1023/A:1016598314198
   RIVEST RL, 1978, COMMUN ACM, V21, P120, DOI [10.1145/359340.359342, 10.1145/357980.358017]
   Singh A, 2008, LECT NOTES COMPUT SC, V5052, P296, DOI 10.1007/978-3-540-68265-3_19
   Song L, 2010, IFIP ADV INF COMM TE, V323, P86
   Sundararaman B., 2005, Ad Hoc Networks, V3, P281, DOI 10.1016/j.adhoc.2005.01.002
   Tobarra L., 2007, P 4 C IBEROAM SEGUR, P1
   Tobarra L, 2009, TELECOMMUN SYST, V40, P91, DOI 10.1007/s11235-008-9131-z
   Zhu S., 2006, ACM Transactions on Sensor Networks, V2, P500, DOI DOI 10.1145/1218556.1218559
   ZHU S, 2003, SENSYS, P308
NR 43
TC 18
Z9 20
U1 0
U2 18
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 15
PY 2014
VL 81
SI SI
BP 53
EP 78
DI 10.1016/j.scico.2013.01.005
PG 26
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AB0JS
UT WOS:000331478600003
OA Green Submitted
DA 2024-07-18
ER

PT J
AU De Smet, B
   Lempereur, L
   Sharafi, Z
   Guéhéneuc, YG
   Antoniol, G
   Habra, N
AF De Smet, Benoit
   Lempereur, Lorent
   Sharafi, Zohreh
   Gueheneuc, Yann-Gael
   Antoniol, Giuliano
   Habra, Naji
TI TAUPE: Visualizing and analyzing eye-tracking data
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Eye-tracking; Visualization; Analysis; Compatibility; Extensibility
ID UML CLASS DIAGRAMS; COMPREHENSION; CONSTRUCTION; MOVEMENTS; LAYOUT
AB Program comprehension is an essential part of any maintenance activity. It allows developers to build mental models of the program before undertaking any change. It has been studied by the research community for many years with the aim to devise models and tools to understand and ease this activity. Recently, researchers have introduced the use of eye-tracking devices to gather and analyze data about the developers' cognitive processes during program comprehension. However, eye-tracking devices are not completely reliable and, thus, recorded data sometimes must be processed, filtered, or corrected. Moreover, the analysis software tools packaged with eye-tracking devices are not open-source and do not always provide extension points to seamlessly integrate new sophisticated analyses. Consequently, we develop the TAUPE software system to help researchers visualize, analyze, and edit the data recorded by eye-tracking devices. The two main objectives of TAUPE are compatibility and extensibility so that researchers can easily: (1) apply the system on any eye-tracking data and (2) extend the system with their own analyses. To meet our objectives, we base the development of TAUPE: (1) on well-known good practices, such as design patterns and a plug-in architecture using reflection, (2) on a thorough documentation, validation, and verification process, and (3) on lessons learned from existing analysis software systems. This paper describes the context of development of TAUPE, the architectural and design choices made during its development, and its documentation, validation and verification process. It also illustrates the application of TAUPE in three experiments on the use of design patterns by developers during program comprehension. (C) 2012 Elsevier B.V. All rights reserved.
C1 [De Smet, Benoit; Lempereur, Lorent; Habra, Naji] FUNDP, Res Ctr Informat Syst Engn, Namur, Belgium.
   [Sharafi, Zohreh; Gueheneuc, Yann-Gael] Ecole Polytech Montreal, Ptidej Team, Quebec City, PQ, Canada.
   [Antoniol, Giuliano] Ecole Polytech Montreal, Soccer Lab, Quebec City, PQ, Canada.
C3 University of Namur; Universite de Montreal; Polytechnique Montreal;
   Universite de Montreal; Polytechnique Montreal
RP Guéhéneuc, YG (corresponding author), Ecole Polytech Montreal, Ptidej Team, Quebec City, PQ, Canada.
EM yann-gael.gueheneuc@polymtl.ca
RI Sharafi, Zohreh/HRC-2499-2023; Guéhéneuc, Yann-Gaël/K-9371-2019
FU Gueheneuc's Canada Research Chair on Software Patterns and Patterns of
   Software and NSERC Discovery Grant
FX This work has been partially funded by the Gueheneuc's Canada Research
   Chair on Software Patterns and Patterns of Software and NSERC Discovery
   Grant.
CR Aho AV., 1974, DESIGN ANAL COMPUTER
   [Anonymous], 1950, AERONAUTICAL ENG REV
   [Anonymous], 1973, VISUAL INFORM PROCES
   [Anonymous], 1990, IEEE STAND GLOSS SOF
   [Anonymous], 2006, ENCY HUMAN COMPUTER
   [Anonymous], 2007, THEORY PRACTICE
   [Anonymous], 1997, ACM SIGACT NEWS
   Beck K, 1998, JAVA REP, V3, P37
   Bednarik R., 2006, Proceedings. ETRA 2006. Symposium on Eye Tracking Research and Applications, P125, DOI 10.1145/1117309.1117356
   Bellay B, 1997, PROCEEDINGS OF THE FOURTH WORKING CONFERENCE ON REVERSE ENGINEERING, P2, DOI 10.1109/WCRE.1997.624571
   Binkley D, 2009, INT C PROGRAM COMPRE, P158, DOI 10.1109/ICPC.2009.5090039
   Boehm B. W., 2002, SOFTWARE ENG EC, P641
   Boehm Barry., 2005, FDN EMPIRICAL SOFTWA
   Brooks R., 1978, 3rd International Conference on Software Engineering, P196
   Brooks R., 1978, USING BEHAV THEORY P
   Chabris CF, 2005, LECT NOTES COMPUT SC, V3426, P36
   Eichelberger Holger., 2003, SOFTVIS 03 PROC 2003, P159, DOI DOI 10.1145/774833.774857
   Endres A., 2003, A Handbook of Software and Systems Engineering: Empirical Observations, Laws, and Theories
   Eye Response Technologies, 2009, GAZETRACKER REF MAN
   Gamma Erich R.J., 1995, DESIGN PATTERNS ELEM
   Gerardo Cepeda Porras, 2010, EMPIRICAL SOFTWARE E, V15
   Goldberg JH, 1999, INT J IND ERGONOM, V24, P631, DOI 10.1016/S0169-8141(98)00068-7
   GUEHENEUC Y.-G., 2004, Proceedings of the 14th IBM Centers for Advanced Studies Conference (CASCON), P28
   Gueheneuc Y.G., 2009, INT J SOFTWARE SCI C, V1
   Gueheneuc Y.-G., 2006, Proceedings of the 2006 conference of the Center for Advanced Studies on Collaborative research, P1, DOI DOI 10.1145/1188966.1188968
   Hadar I., 2004, Journal of Object Technolgoy, V1, P143, DOI [10.5381/jot.2004.3.1.a3, DOI 10.5381/JOT.2004.3.1.A3]
   Hamlet D., 2005, FDN EMPIRICAL SOFTWA, V19
   ISO/IEC, 1996, 14977 ISOIEC
   Jackson D., 1999, Proceedings of the 1999 International Conference on Software Engineering (IEEE Cat. No.99CB37002), P194, DOI 10.1109/ICSE.1999.841009
   Jacob R.J.K., 2002, COMMENTARY SECTION 4
   Jeanmart S., 2008, 2008FSE16 ACM SIGSOF
   Jeanmart S., 2009, P 3 INT S EMP SOFTW
   Jeanmart S., 2008, THESIS U NOTRE DAME
   JUST MA, 1976, COGNITIVE PSYCHOL, V8, P441, DOI 10.1016/0010-0285(76)90015-3
   Kienle HM, 2010, ADV COMPUT, V79, P189, DOI 10.1016/S0065-2458(10)79005-7
   LEHMAN MM, 1980, P IEEE, V68, P1060, DOI 10.1109/PROC.1980.11805
   Machine Seeing, 2010, SEEING MACH WEBS FAC
   Murphy GC, 2005, LECT NOTES COMPUT SC, V3586, P33
   Palmer S., 1999, VISION SCI PHOTONS P
   Perry D. E., 1992, SIGSOFT Software Engineering Notes, V17, P40, DOI 10.1145/141874.141884
   Poole A., 2004, PEOPL COMP 18 DES LI
   Potel M., 1996, MVP MODEL VIEW PRESE
   Purchase H. C., 2002, Journal of Graph Algorithms and Applications, V6, DOI 10.7155/jgaa.00054
   Rajlich V, 2002, FIRST IEEE INTERNATIONAL CONFERENCE ON COGNITIVE INFORMATICS, PROCEEDINGS, P343, DOI 10.1109/COGINF.2002.1039316
   Rayner K, 1998, PSYCHOL BULL, V124, P372, DOI 10.1037/0033-2909.124.3.372
   San Agustin J., 2010, Proceedings of the 2010 Symposium on Eye-Tracking Research Applications - ETRA '10, P77, DOI DOI 10.1145/1743666.1743685
   Sharif Bonita, 2010, Proceedings of the 18th IEEE International Conference on Program Comprehension (ICPC 2010), P196, DOI 10.1109/ICPC.2010.41
   Sharif B, 2009, IEEE INT WORK VIS SO, P11, DOI 10.1109/VISSOF.2009.5336430
   Sharma B., 2010, P 26 IEEE INT C SOFT, P1, DOI DOI 10.1109/ICSM.2010.5609582
   Simon F, 2001, FIFTH EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, PROCEEDINGS, P30, DOI 10.1109/CSMR.2001.914965
   SOLOWAY E, 1986, COMMUN ACM, V29, P850, DOI 10.1145/6592.6594
   Sommerville I., 1996, Software Engineering, V5th
   Spinellis D., 2003, Code Reading: The Open Source Perspective
   SR Research Ltd, 2006, EYELINK 2 US MAN VER
   Storey MAD, 1999, J SYST SOFTWARE, V44, P171, DOI 10.1016/S0164-1212(98)10055-9
   Sun D, 2005, PROG COMPREHEN, P317
   Swartz F., 2004, UI MODEL STRUCTURE
   Uwano H., 2005, Eye Tracking Research and Applications Symposium (ETRA), V2005, P133
   Van Den Plas B., 2009, THESIS U NOTRE DAME
   VONMAYRHAUSER A, 1995, COMPUTER, V28, P44, DOI 10.1109/2.402076
   Wilkinson L, 2009, AM STAT, V63, P179, DOI 10.1198/tas.2009.0033
   Yusuf S, 2007, INT C PROGRAM COMPRE, P113
NR 62
TC 29
Z9 33
U1 2
U2 22
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 1
PY 2014
VL 79
SI SI
BP 260
EP 278
DI 10.1016/j.scico.2012.01.004
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 246RH
UT WOS:000326556300018
DA 2024-07-18
ER

PT J
AU Gil, M
   Serral, E
   Valderas, P
   Pelechano, V
AF Gil, Miriam
   Serral, Estefania
   Valderas, Pedro
   Pelechano, Vicente
TI Designing for user attention: A method for supporting unobtrusive
   routine tasks
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Unobtrusive routine tasks; Obtrusiveness adaptation; Ambient
   Intelligence; Model-based approach
ID RUNTIME; MODELS; SYSTEMS
AB The automation of user routine tasks is one of the most important challenges in the development of Ambient Intelligence systems. However, this automation may be annoying since some tasks may grab users attention in inappropriate situations. Since user attention is a valuable resource, task automation must behave in a considerate manner demanding user attention only when it is required. To address this issue, this work presents a systematic method for supporting the design and automation of unobtrusive routine tasks that can adjust their obtrusiveness level at runtime according to the user attentional resources and context. This method proposes to design the routine tasks that the system must carry out and how they must interact with users in terms of obtrusiveness. The method also provides a software infrastructure that makes the execution of the tasks at the appropriate obtrusiveness degree a reality. Finally, the system has been validated by means of usefulness and performance tests and a practical case study that demonstrates the correctness and applicability of our approach without compromising system performance. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Gil, Miriam; Valderas, Pedro; Pelechano, Vicente] Univ Politecn Valencia, Ctr Invest Metodos Prod Software, Valencia 46022, Spain.
   [Serral, Estefania] Vienna Univ Technol, Christian Doppler Lab Software Engn Integrat Flex, Vienna, Austria.
C3 Universitat Politecnica de Valencia; Technische Universitat Wien
RP Gil, M (corresponding author), Univ Politecn Valencia, Ctr Invest Metodos Prod Software, Camino Vera S-N, Valencia 46022, Spain.
EM mgil@pros.upv.es; estefania.serral@tuwien.ac.at; pvalderas@pros.upv.es;
   pele@pros.upv.es
RI Gil, Miriam/HGD-5342-2022; Gil, Miriam/AAB-1461-2020; Pelechano,
   Vicente/S-4344-2016; Valderas, Pedro/X-3605-2018; Serral,
   Estefanía/I-8123-2018
OI Gil, Miriam/0000-0002-2987-1825; Pelechano, Vicente/0000-0003-1090-230X;
   Valderas, Pedro/0000-0002-4156-0675; Serral,
   Estefanía/0000-0001-7579-910X
FU MICINN [EVERYWARE TIN2010-18011]; ERDF; Christian Doppler
   Forschungsgesellschaft; BMWFJ, Austria
FX This work has been developed with the support of MICINN under the
   project EVERYWARE TIN2010-18011 and co-financed with ERDF, in the grants
   program FPU, and it has also been supported by the Christian Doppler
   Forschungsgesellschaft and the BMWFJ, Austria.
CR [Anonymous], UPGRADE
   [Anonymous], 2004, WORKSH ADV CONT MOD
   Aztiria A, 2010, ARTIF INTELL REV, V34, P35, DOI 10.1007/s10462-010-9160-3
   Blumendorf M, 2010, EICS 2010: PROCEEDINGS OF THE 2010 ACM SIGCHI SYMPOSIUM ON ENGINEERING INTERACTIVE COMPUTING SYSTEMS, P9
   BUXTON B, 1995, GRAPH INTER, P239
   Calvary G, 2003, INTERACT COMPUT, V15, P289, DOI 10.1016/S0953-5438(03)00010-9
   Castanedo F, 2011, J INTELL ROBOT SYST, V62, P299, DOI 10.1007/s10846-010-9448-1
   Cetina C, 2009, COMPUTER, V42, P37, DOI 10.1109/MC.2009.309
   Clerckx T, 2008, LECT NOTES COMPUT SC, V4940, P89, DOI 10.1007/978-3-540-92698-6_6
   Cook DJ, 2003, PROCEEDINGS OF THE FIRST IEEE INTERNATIONAL CONFERENCE ON PERVASIVE COMPUTING AND COMMUNICATIONS (PERCOM 2003), P521, DOI 10.1109/PERCOM.2003.1192783
   De Bruijn J., 2003, TECHNICAL REPORT
   Fabro M. D. D., ECL MOD S
   García-Herranz M, 2010, J UNIVERS COMPUT SCI, V16, P1633
   Garlan D., 2002, IEEE Pervasive Computing, V1, P22, DOI 10.1109/MPRV.2002.1012334
   Gibbs WW, 2005, SCI AM, V292, P54, DOI 10.1038/scientificamerican0105-54
   Hagras H, 2004, IEEE INTELL SYST, V19, P12, DOI 10.1109/MIS.2004.61
   Henricksen K, 2006, SOFTWARE PRACT EXPER, V36, P1307, DOI 10.1002/spe.760
   Hervás R, 2011, PERS UBIQUIT COMPUT, V15, P409, DOI 10.1007/s00779-010-0363-z
   Hinckley K., 2001, 01UIST. Proceedings of the 14th Annual ACM Symposium on User Interface Software and Technology, P191, DOI 10.1145/502348.502382
   Ho J., 2005, P SIGCHI C HUMAN FAC, P909
   Horvitz E, 2003, COMMUN ACM, V46, P52, DOI 10.1145/636772.636798
   Johnson P., 1999, Human-Computer Interaction: Ergonomics and User Interfaces. Proceedings of HCI International '99 (8th International Conference on Human-Computer Interaction), P1199
   Jones C., 1991, APPL SOFTWARE MEASUR
   Ju W, 2008, DES ISSUES, V24, P72, DOI 10.1162/desi.2008.24.3.72
   KITCHENHAM B, 1995, IEEE SOFTWARE, V12, P52, DOI 10.1109/52.391832
   LEWIS JR, 1995, INT J HUM-COMPUT INT, V7, P57, DOI 10.1080/10447319509526110
   Morin B, 2009, COMPUTER, V42, P44, DOI 10.1109/MC.2009.327
   Mostéfaoui GK, 2004, IEEE/ACS INTERNATIONAL CONFERENCE ON PERVASIVE SERVICES, PROCEEDINGS, P39
   Neal D. T., 2009, OXFORD HDB HUMAN ACT
   Paterno F., 2003, MODEL BASED NATURAL, P592
   Paterno Fabio., 2002, The Handbook of Analysis for Human-Computer Interaction, P483, DOI DOI 10.1111/J.1467-923X.1954.TB00152.X
   Ramchurn SD, 2004, PROCEEDINGS OF MOBIQUITOUS 2004, P364
   Rashidi P, 2009, IEEE T SYST MAN CY A, V39, P949, DOI 10.1109/TSMCA.2009.2025137
   Runeson P, 2009, EMPIR SOFTW ENG, V14, P131, DOI 10.1007/s10664-008-9102-8
   Serral E., 2011, P 20 INT C INF SYST
   Serral E., 2010, UCAMI 10, P201
   Serral E., 2011, INFORM SYSTEMS DEV, P671
   Serral E, 2010, PERVASIVE MOB COMPUT, V6, P254, DOI 10.1016/j.pmcj.2009.07.006
   Serral E, 2010, LECT NOTES COMPUT SC, V6051, P378, DOI 10.1007/978-3-642-13094-6_30
   Tedre Matti, 2008, Interactions, V15, P47, DOI 10.1145/1390085.1390096
   Vastenburg MH, 2008, PERS UBIQUIT COMPUT, V12, P555, DOI 10.1007/s00779-007-0176-x
   Wohlin C., 2000, EXPT SOFTWARE ENG IN
NR 42
TC 5
Z9 6
U1 0
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 1
PY 2013
VL 78
IS 10
BP 1987
EP 2008
DI 10.1016/j.scico.2013.03.002
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 200RJ
UT WOS:000323086300014
OA Green Published, Bronze
DA 2024-07-18
ER

PT J
AU Scott, E
   Johnstone, A
AF Scott, Elizabeth
   Johnstone, Adrian
TI GLL parse-tree generation
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Generalised parsing; Recursive descent; GLL parsing; RNGLR and RIGLR
   parsing; Context free languages
ID COMPILER; RECOGNITION; ALGORITHM; LANGUAGES; TIME
AB Backtracking techniques which are often used to extend recursive descent (RD) parsers can have explosive run-times and cannot deal with grammars with left recursion. GLL parsers are fully general, worst-case cubic parsers which have the recursive descent-like property that they are easy to write and to use for grammar debugging. They have the direct relationship with the grammar that an RD parser has. In this paper we give an algorithm for generating GLL parsers which build an SPPF representation of the derivations of the input, complementing our existing GLL recognition algorithm, and we show that such parsers and recognisers are worst-case cubic. (C) 2012 Elsevier B.V. All rights reserved.
C1 [Scott, Elizabeth; Johnstone, Adrian] Univ London, Dept Comp Sci, Egham, Surrey, England.
C3 University of London; Royal Holloway University London
RP Scott, E (corresponding author), Univ London, Dept Comp Sci, Egham, Surrey, England.
EM e.scott@rhul.ac.uk; a.johnstone@rhul.ac.uk
FU EPSRC [EP/I032509/1] Funding Source: UKRI
CR Aho A.V., 1972, PARSING SERIES AUTOM, V1
   [Anonymous], GEN LR PARSING
   [Anonymous], 1986, Efficient parsing for natural language
   Aycock J, 1999, LECT NOTES COMPUT SC, V1575, P32
   BREUER PT, 1995, SOFTWARE PRACT EXPER, V25, P1263, DOI 10.1002/spe.4380251106
   EARLEY J, 1970, COMMUN ACM, V13, P94, DOI 10.1145/362007.362035
   Ford B, 2004, ACM SIGPLAN NOTICES, V39, P111, DOI 10.1145/982962.964011
   Ford B, 2002, ACM SIGPLAN NOTICES, V37, P36, DOI 10.1145/583852.581483
   Johnstone A, 1998, LECT NOTES COMPUT SC, V1383, P16
   Johnstone A, 2011, LECT NOTES COMPUT SC, V6563, P42, DOI 10.1007/978-3-642-19440-5_4
   KNUTH DE, 1965, INFORM CONTROL, V8, P607, DOI 10.1016/S0019-9958(65)90426-2
   Parr T., 1996, Language translation using PCCTS and C++
   Scott E, 2005, COMPUT J, V48, P565, DOI 10.1093/comjnl/bxh102
   Scott E, 2007, ACTA INFORM, V44, P427, DOI 10.1007/s00236-007-0054-z
   Scott E, 2006, ACM T PROGR LANG SYS, V28, P577, DOI 10.1145/1146809.1146810
   Scott E, 2010, SCI COMPUT PROGRAM, V75, P55, DOI 10.1016/j.scico.2009.07.001
   Scott Elizabeth, 2009, ELECT NOTES THEORETI
   UKKONEN E, 1985, INFORM PROCESS LETT, V20, P99, DOI 10.1016/0020-0190(85)90072-9
   Van den Brand MGJ, 2002, ACM T PROGR LANG SYS, V24, P334, DOI 10.1145/567097.567099
   Visser E, 2003, LECT NOTES COMPUT SC, V3016, P216
   Wöss A, 2003, LECT NOTES COMPUT SC, V2789, P192
   YOUNGER DH, 1967, INFORM CONTROL, V10, P189, DOI 10.1016/S0019-9958(67)80007-X
NR 22
TC 26
Z9 27
U1 1
U2 5
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 1
PY 2013
VL 78
IS 10
BP 1828
EP 1844
DI 10.1016/j.scico.2012.03.005
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 200RJ
UT WOS:000323086300005
OA Bronze
DA 2024-07-18
ER

PT J
AU Mu, KD
   Jin, Z
   Liu, WR
   Zowghi, D
   Wei, B
AF Mu, Kedian
   Jin, Zhi
   Liu, Weiru
   Zowghi, Didar
   Wei, Bo
TI Measuring the significance of inconsistency in the Viewpoints framework
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Requirements; Measure of inconsistency; Significance of inconsistency;
   Viewpoints
ID HANDLING INCONSISTENCY; REQUIREMENTS; PERSPECTIVES; INTERPLAY; LOGIC
AB Measuring inconsistency is crucial to effective inconsistency management in software development. A complete measurement of inconsistency should focus on not only the degree but also the significance of inconsistency. However, most of the approaches available only take the degree of inconsistency into account. The significance of inconsistency has not yet been given much needed consideration. This paper presents an approach for measuring the significance of inconsistency arising from different viewpoints in the Viewpoints framework. We call an individual set of requirements belonging to different viewpoints a combined requirements collection in this paper. We argue that the significance of inconsistency arising in a combined requirements collection is closely associated with global priority levels of requirements involved in the inconsistency. Here we assume that the global priority level of an individual requirement captures the relative importance of every viewpoint including this requirement as well as the local priority level of the requirement within the viewpoint. Then we use the synthesis of global priority levels of all the requirements in a combined collection to measure the significance of the collection. Following this, we present a scoring matrix function to measure the significance of inconsistency in an inconsistent combined requirements collection, which describes the contribution made by each subset of the requirements collection to the significance of the set of requirements involved in the inconsistency. An ordering relationship between inconsistencies of two combined requirements collections, termed more significant than, is also presented by comparing their significance scoring matrix functions. Finally, these techniques were implemented in a prototype tool called IncMeasurer, which we developed as a proof of concept. (C) 2012 Elsevier B.V. All rights reserved.
C1 [Mu, Kedian] Peking Univ, Sch Math Sci, Beijing 100871, Peoples R China.
   [Jin, Zhi] Peking Univ, Minist Educ, Key Lab High Confidence Software Technol, Beijing 100871, Peoples R China.
   [Jin, Zhi] Peking Univ, Sch Elect Engn & Comp Sci, Beijing 100871, Peoples R China.
   [Liu, Weiru] Queens Univ Belfast, Sch Elect Elect Engn & Comp Sci, Belfast BT7 1NN, Antrim, North Ireland.
   [Zowghi, Didar] Univ Technol Sydney, Fac Engn & Informat Technol, Sch Software, Sydney, NSW 2007, Australia.
   [Wei, Bo] Chinese Acad Sci, Acad Math & Syst Sci, Beijing 100190, Peoples R China.
C3 Peking University; Peking University; Peking University; Queens
   University Belfast; University of Technology Sydney; Chinese Academy of
   Sciences; Academy of Mathematics & System Sciences, CAS
RP Mu, KD (corresponding author), Peking Univ, Sch Math Sci, Beijing 100871, Peoples R China.
EM mukedian@math.pku.edu.cn
RI Zowghi, Didar/AAF-2345-2019; Jin, Zhi/E-1288-2013; Liu,
   Weiru/IRZ-8858-2023
OI Zowghi, Didar/0000-0002-6051-0155; 
FU National Natural Science Foundation of China [61170300, 60703061];
   National Basic Research 973 program of China [2009CB320701]; Key Project
   of National Natural Science Foundation of China [90818026];
   International Science Linkages Programme - Australia-China Special Fund
   for Science & Technology Cooperation Round 7 [CH070139]
FX The authors are grateful to reviewers for their valuable comments. The
   authors would like to thank Dr. Guohui Xiao for his help on construction
   of the tool support. This work was partly supported by the National
   Natural Science Foundation of China under Grant Nos 61170300 and
   60703061, the National Basic Research 973 program of China under Grant
   No. 2009CB320701, and the Key Project of National Natural Science
   Foundation of China under Grant No. 90818026. Didar Zowghi was supported
   by the Research Grant (CH070139) under the International Science
   Linkages Programme - Australia-China Special Fund for Science &
   Technology Cooperation Round 7.
CR [Anonymous], 2000, ACM SIGSOFT S FDN SO, DOI DOI 10.1145/357474.355063
   [Anonymous], 2005, Just enough requirements management: where software development meets marketing
   Barragáns AB, 2005, 2005 AUSTRALIAN SOFTWARE ENGINEERING CONFERENCE, PROCEEDINGS, P58, DOI 10.1109/ASWEC.2005.29
   Martínez ABB, 2008, REQUIR ENG, V13, P187, DOI 10.1007/s00766-008-0064-6
   Benferhat S, 2000, FR ART INT, V54, P3
   BIRD R, 2003, P 2003 ACM SIGPLAN W, P1
   Castro S, 2011, SCI COMPUT PROGRAM, V76, P1113, DOI 10.1016/j.scico.2010.09.001
   Cook S. A., 1971, Proceedings of the 3rd annual ACM symposium on theory of computing, P151
   FINKELSTEIN A, 1992, INT J SOFTW ENG KNOW, V2, P31, DOI 10.1142/S0218194092000038
   Gervasi V, 2005, ACM T SOFTW ENG METH, V14, P277, DOI 10.1145/1072997.1072999
   Grant J, 2008, ARTIF INTELL, V172, P1064, DOI 10.1016/j.artint.2007.11.006
   Grant J, 2006, J INTELL INF SYST, V27, P159, DOI 10.1007/s10844-006-2974-4
   Grover C., 1994, P 32 ANN M ASS COMP, P17
   Hunter A, 2004, KNOWL INF SYST, V6, P528, DOI 10.1007/s10115-003-0125-6
   Hunter A, 2004, LECT NOTES COMPUT SC, V3300, P191
   Hunter A., 1998, ACM Transactions on Software Engineering and Methodology, V7, P335, DOI 10.1145/292182.292187
   Hunter A, 2002, EIGHTEENTH NATIONAL CONFERENCE ON ARTIFICIAL INTELLIGENCE (AAAI-02)/FOURTEENTH INNOVATIVE APPLICATIONS OF ARTIFICIAL INTELLIGENCE CONFERENCE (IAAI-02), PROCEEDINGS, P68
   Hunter A., 2006, P KNOWLEDGE REPRESEN, P249
   Hunter A., 2003, Proceedings of the 2003 International Joint Conference on AI (IJCAI03), P468
   Hunter A., 2008, KR, P358
   IEEEStd830-1998, 1998, IEEESTD8301998
   Karlsson J, 1997, IEEE SOFTWARE, V14, P67, DOI 10.1109/52.605933
   Knight K, 2002, J PHILOS LOGIC, V31, P77, DOI 10.1023/A:1015015709557
   Konieczny S, 2003, IJCAI, P106
   Lang J., P KR2002, P277
   Liu XQ, 2006, J SYST SOFTWARE, V79, P1649, DOI 10.1016/j.jss.2006.03.012
   Malouf R, 2007, COMPUT LINGUIST, V33, P153, DOI 10.1162/coli.2007.33.2.153
   Marques-Silva J, 2009, FRONT ARTIF INTEL AP, V185, P131, DOI 10.3233/978-1-58603-929-5-131
   Martínez ABB, 2008, INFORM SOFTWARE TECH, V50, P296, DOI 10.1016/j.infsof.2007.02.001
   McAreavey K, 2012, FRONT ARTIF INTEL AP, V241, P192, DOI 10.3233/978-1-61499-096-3-192
   Mu KD, 2005, LECT NOTES COMPUT SC, V3571, P440
   Mu KD, 2008, J SYST SCI COMPLEX, V21, P574, DOI 10.1007/s11424-008-9136-4
   Mu K, 2007, LECT NOTES ARTIF INT, V4798, P103
   Mu KD, 2013, INT J APPROX REASON, V54, P109, DOI 10.1016/j.ijar.2012.07.006
   Mu KDA, 2012, J LOGIC COMPUT, V22, P481, DOI 10.1093/jigpal/exr002
   Mu KD, 2009, FUND INFORM, V91, P631, DOI 10.3233/FI-2009-0062
   Nuseibeh B, 2003, PROC INT CONF SOFTW, P676, DOI 10.1109/ICSE.2003.1201254
   Nuseibeh B, 2001, J SYST SOFTWARE, V58, P171, DOI 10.1016/S0164-1212(01)00036-X
   Nuseibeh B, 2000, COMPUTER, V33, P24, DOI 10.1109/2.839317
   Pardee J.W., 1996, SATISFY DELIGHT YOUR
   REITER R, 1987, ARTIF INTELL, V32, P57, DOI 10.1016/0004-3702(87)90062-2
   Russo A., 2001, HDB SOFTWARE ENG KNO, VI, P889
   Ryan Lawrence, 2004, Master's thesis
   Shafer G, 1976, MATH THEORY EVIDENCE, DOI DOI 10.1080/00401706.1978.10489628
   van Lamsweerde A, 1998, IEEE T SOFTWARE ENG, V24, P908, DOI 10.1109/32.730542
   Wiegers K., 1999, Software Development, V7, P48
   Wiegers K.E., SOFTWARE REQUIREMENT, V2003
   Zowghi D, 2003, INFORM SOFTWARE TECH, V45, P993, DOI 10.1016/S0950-5849(03)00100-9
NR 48
TC 14
Z9 14
U1 0
U2 9
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 1
PY 2013
VL 78
IS 9
BP 1572
EP 1599
DI 10.1016/j.scico.2012.12.006
PG 28
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 179QJ
UT WOS:000321536100019
OA Bronze
DA 2024-07-18
ER

PT J
AU Bettini, L
   Damiani, F
   Geilmann, K
   Schäfer, J
AF Bettini, Lorenzo
   Damiani, Ferruccio
   Geilmann, Kathrin
   Schaefer, Jan
TI Combining traits with boxes and ownership types in a Java-like setting
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Boxes; Featherweight Java; Ownership types; Traits
ID OBJECT; REPRESENTATION; ENCAPSULATION; FEATHERTRAIT; EXTENSION; CALCULUS
AB The box model is a lightweight component model for the object-oriented paradigm, which structures the flat object-heap into hierarchical runtime components called boxes. Boxes have clear runtime boundaries that divide the objects of a box into objects that can be used to interact with the box (the boundary objects) and objects that are encapsulated and represent the state of the box (the local objects). The distinction into local and boundary objects is statically achieved by an ownership type system for boxes that uses domain annotations to classify objects into local and boundary objects and that guarantees that local objects can never be directly accessed by the context of a box. A trait is a set of methods divorced from any class hierarchy. Traits are units of fine-grained reuse that can be composed together to form classes or other traits. This paper integrates traits into an ownership type system for boxes. This combination is fruitful in two ways: it can statically guarantee encapsulation of objects and still provide fine-grained reuse among classes that goes beyond the possibilities of standard inheritance. It also solves a specific problem of the box ownership type system: namely that box classes cannot inherit from standard classes (and vice versa), and thus code sharing between these two kinds of classes was not possible in this setting so far. We present an ownership type system and the corresponding soundness proofs that guarantee encapsulation of objects in an object-oriented language with traits. (C) 2011 Elsevier B.V. All rights reserved.
C1 [Bettini, Lorenzo; Damiani, Ferruccio] Univ Turin, Dipartimento Informat, I-10124 Turin, Italy.
   [Geilmann, Kathrin; Schaefer, Jan] Univ Kaiserslautern, Dept Comp Sci, D-67663 Kaiserslautern, Germany.
C3 University of Turin; University of Kaiserslautern
RP Damiani, F (corresponding author), Univ Turin, Dipartimento Informat, I-10124 Turin, Italy.
EM damiani@di.unito.it
RI Ferruccio, Damiani/D-2383-2011
OI Ferruccio, Damiani/0000-0001-8109-1706; Bettini,
   Lorenzo/0000-0002-4481-8096
FU EU [FP7-231620]; German-Italian University Centre; MIUR
FX The authors of this paper are listed in alphabetical order. This work
   has been partially supported by the EU project FP7-231620 HATS, by the
   German-Italian University Centre (Vigoni program), and by MIUR (PRIN
   2008 DISCO).
CR Agarwal R., 2003, VERIFICATION MODEL C, P77
   Aldrich J, 2004, LECT NOTES COMPUT SC, V3086, P1
   Aldrich J, 2002, ACM SIGPLAN NOTICES, V37, P311, DOI 10.1145/583854.582448
   Aldrich J, 2002, ICSE 2002: PROCEEDINGS OF THE 24TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P187, DOI 10.1109/ICSE.2002.1007967
   Aldrich J, 2008, SEVENTH WORKING IEEE/IFIP CONFERENCE ON SOFTWARE ARCHITECTURE, PROCEEDINGS, P211, DOI 10.1109/WICSA.2008.48
   Allen Eric., 2008, FORTRESS LANGUAGE SP
   Ancona D, 2003, ACM T PROGR LANG SYS, V25, P641, DOI 10.1145/937563.937567
   [Anonymous], 1998, P 25 ACM SIGPLAN SIG, DOI DOI 10.1145/268946.268961
   Bettini L, 2013, SCI COMPUT PROGRAM, V78, P521, DOI 10.1016/j.scico.2011.06.007
   Bettini L, 2010, LECT NOTES COMPUT SC, V6116, P46, DOI 10.1007/978-3-642-13414-2_4
   Bettini Lorenzo., 2010, Proceedings of the 2010 ACM Symposium on Applied Computing, SAC '10, P2096
   Black A.P., 2007, Squeak by Example
   Bono V., 2007, FTFJP
   Bono V, 2008, INT FED INFO PROC, V273, P367
   Boyapati C, 2003, ACM SIGPLAN NOTICES, V38, P213, DOI 10.1145/640128.604156
   Boyapati C, 2002, ACM SIGPLAN NOTICES, V37, P211, DOI 10.1145/583854.582440
   Boyapati C, 2001, ACM SIGPLAN NOTICES, V36, P56, DOI 10.1145/504311.504287
   Boyapati C., 2004, THESIS MIT
   BRACHA G, 1990, SIGPLAN NOTICES, V25, P303, DOI 10.1145/97946.97982
   Cameron N., 2007, P 22 ANN ACM SIGPLAN, P460
   Cameron N, 2010, ACM SIGPLAN NOTICES, V45, P618, DOI 10.1145/1932682.1869510
   Clarke D, 2002, ACM SIGPLAN NOTICES, V37, P292, DOI 10.1145/583854.582447
   Clarke D., 2003, LECT NOTES COMPUTER, V2743
   Clarke D. G., 2001, ECOOP 2001 - Object-Oriented Programming. 15th European Conference. Proceedings (Lecture Notes in Computer Science Vol.2072), P53
   Clarke David, 2001, Ph.D. Dissertation
   Clarke DG, 1998, ACM SIGPLAN NOTICES, V33, P48, DOI 10.1145/286942.286947
   Cunningham D, 2008, LECT NOTES COMPUT SC, V5382, P72, DOI 10.1007/978-3-540-92188-2_4
   Dietl W., 2011, EUR C OBJ OR PROGR E
   Dietl W, 2007, LECT NOTES COMPUT SC, V4609, P28
   Dietl W, 2005, J OBJECT TECHNOL, V4, P5, DOI 10.5381/jot.2005.4.8.a1
   Ducasse S, 2006, ACM T PROGR LANG SYS, V28, P331, DOI 10.1145/1119479.1119483
   FELLEISEN M, 1992, THEOR COMPUT SCI, V103, P235, DOI 10.1016/0304-3975(92)90014-7
   Fisher K., 2004, FOOL
   Gosling J., 2000, The Java Language Specification
   Grothoff C, 2001, ACM SIGPLAN NOTICES, V36, P241, DOI 10.1145/504311.504300
   Igarashi A, 2001, ACM T PROGR LANG SYS, V23, P396, DOI 10.1145/503502.503505
   Krishnaswami N, 2005, ACM SIGPLAN NOTICES, V40, P96, DOI 10.1145/1064978.1065023
   Kühne T, 2007, ACM SIGPLAN NOTICES, V42, P229
   Lagorio G., 2009, FOOL
   Leino KRM, 2004, LECT NOTES COMPUT SC, V3086, P491
   Liquori L, 2008, THEOR COMPUT SCI, V398, P243, DOI 10.1016/j.tcs.2008.01.051
   Liquori L, 2008, ACM T PROGR LANG SYS, V30, DOI 10.1145/1330017.1330022
   Liu Y., 2008, INT WORKSH AL CONF O
   Lu Y, 2006, ACM SIGPLAN NOTICES, V41, P359, DOI 10.1145/1111320.1111069
   Lu Y, 2006, LECT NOTES COMPUT SC, V4067, P99
   Ma KK, 2007, ACM SIGPLAN NOTICES, V42, P423, DOI 10.1145/1297105.1297059
   Müller P, 2007, ACM SIGPLAN NOTICES, V42, P461, DOI 10.1145/1297105.1297061
   Muller P., 2002, LNCS, V2262
   Muller P., 2000, FTFJP
   Nageli S., 2006, THESIS
   Nierstrasz O, 2006, J OBJECT TECHNOL, V5, P129, DOI 10.5381/jot.2006.5.4.a4
   Noble J., 1998, ECOOP'98 - Object-Oriented Programming. 12th European Conference. Proceedings, P158, DOI 10.1007/BFb0054091
   Odersky M., 2007, TECHNICAL REPORT
   Poetzsch-Heffter A., 2007, LNCS, V4444
   Poetzsch-Heffter A, 2007, LECT NOTES COMPUT SC, V4468, P157
   Poetzsch-Heffter A, 2006, LECT NOTES COMPUT SC, V4111, P313
   Potanin A, 2006, ACM SIGPLAN NOTICES, V41, P311, DOI 10.1145/1167515.1167500
   Reppy J., 2006, FOOL WOOD
   Reppy J, 2007, LECT NOTES COMPUT SC, V4609, P373
   Schafer J., 2007, Journal of Object Technology, V6, P71
   Schärli N, 2003, LECT NOTES COMPUT SC, V2743, P248
   Smith C, 2005, LECT NOTES COMPUT SC, V3586, P453
   Smith M., 2005, ECCOP WORKSH FTFJP 2
   Szyperski C., 2002, Component Software: Beyond Object-Oriented Programming
   Ungar D., 1991, LISP and Symbolic Computation, V4, P223, DOI 10.1007/BF01806107
   VanLimberghen M, 1996, OBJECT ORIENTED SYST, V3, P1
   Vitek J, 2001, SOFTWARE PRACT EXPER, V31, P507, DOI 10.1002/spe.369
   Zhao T, 2003, ACM SIGPLAN NOTICES, V38, P135, DOI 10.1145/949343.949318
NR 68
TC 4
Z9 4
U1 0
U2 9
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 1
PY 2013
VL 78
IS 2
SI SI
BP 218
EP 247
DI 10.1016/j.scico.2011.10.006
PG 30
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 056WS
UT WOS:000312522700005
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Fok, CL
   Roman, GC
   Lu, CY
AF Fok, Chien-Liang
   Roman, Gruia-Catalin
   Lu, Chenyang
TI Adaptive service provisioning for enhanced energy efficiency and
   flexibility in wireless sensor networks
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Wireless sensor networks; Service-oriented computing; Middleware;
   Adaptation; Resource availability; Energy efficiency
ID SYSTEM
AB Energy constraints and high connectivity dynamics render Wireless Sensor Networks (WSNs) difficult to program and use. Software applications must be coordinated not only functionally, as is traditionally done, but also in terms of resource utilization and adaptation to a dynamic environment. This paper presents Adaptive Servilla, a middleware that provides adaptive service provisioning capabilities to coordinate the resources used by WSN applications. It demonstrates how adaptive service provisioning enables WSN applications to be more energy efficient while better able to adapt to the changing availability of network resources. This is achieved through novel service binding strategies that automatically adapt application behavior when opportunities for energy savings surface, and switching providers in response to changes in the network topology. The former is accomplished by providing limited information about a provider's energy efficiency, systematically exploiting opportunities for sharing service invocations, and exploiting the broadcast nature of wireless communication in WSNs. The latter is accomplished by monitoring provider availability, seamlessly switching providers when necessary, and judiciously searching for new providers. Adaptive Servilla was implemented on TinyOS and evaluated using two disparate WSN platforms, the TelosB and Imote2. Empirical results show that adaptive service provisioning enables energy-aware service binding decisions that result in increased energy efficiency and service availability, while imposing minimal additional burden on the application, service, and device developers. Two applications, medical patient monitoring and structural health monitoring, demonstrate the efficacy of Adaptive Servilla. (C) 2011 Elsevier B.V. All rights reserved.
C1 [Fok, Chien-Liang; Roman, Gruia-Catalin; Lu, Chenyang] Washington Univ, St Louis, MO 63130 USA.
C3 Washington University (WUSTL)
RP Fok, CL (corresponding author), Washington Univ, St Louis, MO 63130 USA.
EM liang@cse.wustl.edu; roman@cse.wustl.edu; lu@cse.wustl.edu
FU National Science Foundation [CNS-0520220, CNS-0627126, CNS-0708460]
FX This work is funded by the National Science Foundation under grants
   CNS-0520220, CNS-0627126, and CNS-0708460.
CR Anastasi G, 2009, AD HOC NETW, V7, P537, DOI 10.1016/j.adhoc.2008.06.003
   [Anonymous], 2006, MidSens '06: Proceedings of the international workshop on Middleware for sensor networks, pag
   [Anonymous], 2010, PRINCIPLES CEREAL SC, DOI DOI 10.1109/NESEA.2010.5678061
   [Anonymous], Proceedings of the 2Nd International Conference on Embedded Networked Sensor Systems. SenSys'04, DOI DOI 10.1145/1031495.1031515
   Arch Rock, ARCH ROCK ARCH ROCK
   Arora A, 2009, 2009 INTERNATIONAL CONFERENCE ON INFORMATION PROCESSING IN SENSOR NETWORKS (IPSN 2009), P13
   Avilés-López E, 2009, SERV ORIENTED COMPUT, V3, P99, DOI 10.1007/s11761-009-0043-x
   Cao Q, 2008, 2008 INTERNATIONAL CONFERENCE ON INFORMATION PROCESSING IN SENSOR NETWORKS, PROCEEDINGS, P233, DOI 10.1109/IPSN.2008.54
   Chipara Octav, 2009, AMIA Annu Symp Proc, V2009, P103
   Chipara Octav., 2010, Proceedings of the 8th ACM Conference on Embedded Networked Sensor Systems, SenSys '10, P155
   Choi YG, 2007, LECT NOTES COMPUT SC, V4706, P1085
   Chong S, 2010, PROCEEDINGS OF THE 9TH ACM/IEEE INTERNATIONAL CONFERENCE ON INFORMATION PROCESSING IN SENSOR NETWORKS, P82, DOI 10.1145/1791212.1791223
   Croft J, 2010, PROCEEDINGS OF THE 9TH ACM/IEEE INTERNATIONAL CONFERENCE ON INFORMATION PROCESSING IN SENSOR NETWORKS, P70
   Culler D, 2004, COMPUTER, V37, P41, DOI 10.1109/MC.2004.93
   Danev B, 2009, 2009 INTERNATIONAL CONFERENCE ON INFORMATION PROCESSING IN SENSOR NETWORKS (IPSN 2009), P25
   Delicato FC, 2005, CLUSTER COMPUT, V8, P211, DOI 10.1007/s10586-005-6186-4
   Dunkels A, 2004, CONF LOCAL COMPUT NE, P455
   Dutta P, 2008, 2008 INTERNATIONAL CONFERENCE ON INFORMATION PROCESSING IN SENSOR NETWORKS, PROCEEDINGS, P283, DOI 10.1109/IPSN.2008.58
   Fok C.-L., 2009, THESIS WASHINGTON U
   Fok CL, 2012, SCI COMPUT PROGRAM, V77, P663, DOI 10.1016/j.scico.2010.11.006
   Fok CL, 2009, ACM T AUTON ADAP SYS, V4, DOI 10.1145/1552297.1552299
   Fok CL, 2005, 2005 FOURTH INTERNATIONAL SYMPOSIUM ON INFORMATION PROCESSING IN SENSOR NETWORKS, P382
   Frey D, 2007, LECT NOTES COMPUT SC, V4467, P37
   Gay D, 2003, ACM SIGPLAN NOTICES, V38, P1, DOI 10.1145/780822.781133
   Gnawali O, 2009, SENSYS 09: PROCEEDINGS OF THE 7TH ACM CONFERENCE ON EMBEDDED NETWORKED SENSOR SYSTEMS, P1, DOI 10.1145/1644038.1644040
   Hackmann G., 2010, P 1 ACMIEEE INT C CY, P119, DOI [10.1145/1795194.1795211, DOI 10.1145/1795194.1795211]
   Hackmann G, 2008, SENSYS'08: PROCEEDINGS OF THE 6TH ACM CONFERENCE ON EMBEDDED NETWORKED SENSOR SYSTEMS, P57
   Han CC, 2005, PROCEEDINGS OF THE THIRD INTERNATIONAL CONFERENCE ON MOBILE SYSTEMS, APPLICATIONS, AND SERVICES (MOBISYS 2005), P163, DOI 10.1145/1067170.1067188
   Handorean R, 2006, INT J WEB SERV RES, V3, P1, DOI 10.4018/jwsr.2006070101
   Hill J, 2000, ACM SIGPLAN NOTICES, V35, P93, DOI 10.1145/384264.379006
   Jiang XF, 2007, PROCEEDINGS OF THE SIXTH INTERNATIONAL SYMPOSIUM ON INFORMATION PROCESSING IN SENSOR NETWORKS, P186, DOI 10.1109/IPSN.2007.4379678
   Kushwaha M., 2007, 2nd International Conference On Communication Systems Software and Middleware, P1, DOI DOI 10.1109/COMSWA.2007.382431
   Kyasanur P, 2006, 2006 IEEE INTERNATIONAL CONFERENCE ON MOBILE ADHOC AND SENSOR SYSTEMS, VOLS 1 AND 2, P884
   Levis P, 2005, USENIX ASSOCIATION PROCEEDINGS OF THE 2ND SYMPOSIUM ON NETWORKED SYSTEMS DESIGN & IMPLEMENTATION (NSDI '05), P343
   Levis P, 2004, USENIX ASSOCIATION PROCEEDINGS OF THE FIRST SYMPOSIUM ON NETWORKED SYSTEMS DESIGN AND IMPLEMENTATION (NSDI'04), P15
   Levis P, 2002, ACM SIGPLAN NOTICES, V37, P85, DOI 10.1145/605432.605407
   Li L, 2008, LECT NOTES COMPUT SC, V5364, P347
   Luk M, 2007, PROCEEDINGS OF THE SIXTH INTERNATIONAL SYMPOSIUM ON INFORMATION PROCESSING IN SENSOR NETWORKS, P479, DOI 10.1109/IPSN.2007.4379708
   Mainland G, 2005, USENIX Association Proceedings of the 2nd Symposium on Networked Systems Design & Implementation (NSDI '05), P315
   Marin-Perianu Raluca, 2007, 2007 32nd IEEE Conference on Local Computer Networks, P841
   Marin-Perianu R, 2006, C LOCAL COMPUT NETW, P931
   Marrón PJ, 2006, LECT NOTES COMPUT SC, V3868, P212
   Meshkova Elena, 2008, 2008 IEEE International Conference on Sensor Networks, Ubiquitous, and Trustworthy Computing (SUTC '08), P146, DOI 10.1109/SUTC.2008.43
   Michiels S., 2006, Proc. 1st Int'l Workshop Middleware for Sensor Networks (MidSens 06), P7
   Necula G. C., 1997, Conference Record of POPL '97: The 24th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P106, DOI 10.1145/263699.263712
   Papazoglou MP, 2003, FOURTH INTERNATIONAL CONFERENCE ON WEB INFORMATION SYSTEMS ENGINEERING, PROCEEDINGS, P3
   Papazoglou MP, 2003, COMMUN ACM, V46, P25, DOI 10.1145/944217.944233
   Perrig A, 2004, COMMUN ACM, V47, P53, DOI 10.1145/990680.990707
   Polastre J, 2005, 2005 Fourth International Symposium on Information Processing in Sensor Networks, P364
   Prinsloo JacoM., 2006, P 2006 ANN RES C S A, V204, P145, DOI DOI 10.1145/1216262.1216278
   Priyantha NB, 2008, SENSYS'08: PROCEEDINGS OF THE 6TH ACM CONFERENCE ON EMBEDDED NETWORKED SENSOR SYSTEMS, P253
   Reinhardt A., 2011, 2011 IEEE International Conference on Pervasive Computing and Communications Workshops (PerCom Workshops 2011). PerCom-Workshops 2011: 2011 IEEE International Conference on Pervasive Computing and Communications Workshops (PERCOM Workshops 2011), P172, DOI 10.1109/PERCOMW.2011.5766863
   Rubio B., 2007, Systems and Networks Communications, P36
   Santini S., 2006, P 3 INT C NETWORKED, P29
   Scholz A, 2009, IEEE INTL CONF IND I, P599, DOI 10.1109/INDIN.2009.5195871
   Sen R, 2008, LECT NOTES COMPUT SC, V5052, P280, DOI 10.1007/978-3-540-68265-3_18
   Singh A, 2008, LECT NOTES COMPUT SC, V5052, P296, DOI 10.1007/978-3-540-68265-3_19
   Sommer S, 2009, PROCEEDINGS OF THE 2009 SIXTH INTERNATIONAL CONFERENCE ON INFORMATION TECHNOLOGY: NEW GENERATIONS, VOLS 1-3, P1036, DOI 10.1109/ITNG.2009.256
   Sun YH, 2009, SENSYS 09: PROCEEDINGS OF THE 7TH ACM CONFERENCE ON EMBEDDED NETWORKED SENSOR SYSTEMS, P407
   TinyOS Documentation Wiki, TINYOS DOC WIK IMOTE
   Van Cutsem T, 2007, LECT NOTES COMPUT SC, V4467, P231
   Viroli M, 2009, LECT NOTES COMPUT SC, V5521, P143, DOI 10.1007/978-3-642-02053-7_8
   Waterman J., 2009, PELOTON COORDINATED, P9
NR 63
TC 9
Z9 9
U1 0
U2 26
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 1
PY 2013
VL 78
IS 2
SI SI
BP 195
EP 217
DI 10.1016/j.scico.2011.12.006
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 056WS
UT WOS:000312522700004
OA hybrid
DA 2024-07-18
ER

PT J
AU Dubrovin, J
   Junttila, T
   Heljanko, K
AF Dubrovin, Jori
   Junttila, Tommi
   Heljanko, Keijo
TI Exploiting step semantics for efficient bounded model checking of
   asynchronous systems
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Bounded model checking; Step encodings; Process semantics; Asynchronous
   systems; SMT
ID SATISFIABILITY; VERIFICATION
AB This paper discusses bounded model checking (BMC) for asynchronous systems. Bounded model checking is a technique that employs the power of efficient SAT and SMT solvers for model checking. The main contribution of this paper is the presentation of a simple modeling formalism independent way of translating an asynchronous system into a transition formula for three partial order semantics: the there exists-step semantics, its generalization, the relaxed there exists-step semantics, and a novel variant that combines the latter with the idea of process semantics. Step and process semantics have been introduced in earlier works for different low level asynchronous system formalisms to improve the efficiency of BMC. However, this paper is the first one showing how to translate the semantics for any asynchronous system modeling formalism including high-level data manipulation operations while encoding the independence of actions in a dynamic fashion. Thus, the approaches have been extended to cover a larger class of modeling formalisms. The technical approach uses the notion of a coherent encoding of the transition relation, making for a simple and elegant translation of the partial order semantics in question. The presented translations have been implemented and we present extensive empirical results comparing the efficiency of the different translations to each other as well as to an explicit state model checker DiVinE on its own BEEM benchmark suite. (c) 2011 Elsevier B.V. All rights reserved.
C1 [Dubrovin, Jori; Junttila, Tommi; Heljanko, Keijo] Aalto Univ, Sch Sci, Dept Informat & Comp Sci, FI-00076 Aalto, Finland.
C3 Aalto University
RP Dubrovin, J (corresponding author), Aalto Univ, Sch Sci, Dept Informat & Comp Sci, POB 15400, FI-00076 Aalto, Finland.
EM Jori.Dubrovin@tkk.fi; Tommi.Junttila@tkk.fi; Keijo.Heljanko@tkk.fi
RI Heljanko, Keijo/C-7603-2011; Dubrovin, Jori/E-7355-2012
OI Heljanko, Keijo/0000-0002-4547-2701; 
FU Academy of Finland [122399, 126860, 128050, 139402]; Hecse (Helsinki
   Graduate School in Computer Science and Engineering); Emil Aaltonen
   Foundation; Foundation of Nokia Corporation; Academy of Finland (AKA)
   [128050, 126860] Funding Source: Academy of Finland (AKA)
FX Work financially supported by Academy of Finland (projects 122399,
   126860, 128050, and 139402), Hecse (Helsinki Graduate School in Computer
   Science and Engineering), the Emil Aaltonen Foundation, and the
   Foundation of Nokia Corporation.
CR Abdulla PA, 2007, LECT NOTES COMPUT SC, V4590, P145
   [Anonymous], 1997, Handbook of Formal Languages
   Baier C, 2008, PRINCIPLES OF MODEL CHECKING, P1
   Barnat J, 2009, 2009 INTERNATIONAL WORKSHOP ON HIGH PERFORMANCE COMPUTATIONAL SYSTEMS BIOLOGY, PROCEEDINGS, P31, DOI 10.1109/HiBi.2009.10
   Barrett C, 2009, FRONT ARTIF INTEL AP, V185, P825, DOI 10.3233/978-1-58603-929-5-825
   BEST E, 1987, THEOR COMPUT SCI, V55, P87, DOI 10.1016/0304-3975(87)90090-9
   Biere A, 1999, LECT NOTES COMPUT SC, V1579, P193
   Biere A, 2006, LOG METH COMPUT SCI, V2, DOI 10.2168/LMCS-2(5:5)2006
   Bouajjani A, 2007, LECT NOTES COMPUT SC, V4639, P1
   Brummayer R, 2009, LECT NOTES COMPUT SC, V5505, P174, DOI 10.1007/978-3-642-00768-2_16
   Bultan T, 1997, LECT NOTES COMPUT SC, V1254, P400
   BURCH JR, 1992, INFORM COMPUT, V98, P142, DOI 10.1016/0890-5401(92)90017-A
   Burckhardt S, 2007, ACM SIGPLAN NOTICES, V42, P12, DOI 10.1145/1273442.1250737
   Clarke EM, 1999, MODEL CHECKING, P1
   Dimopoulos Y., 1997, Recent Advances in AI Planning. 4th European Conference on Planning, ECP'97 Proceedings, P169, DOI 10.1007/3-540-63912-8_84
   Dubrovin J, 2008, LECT NOTES COMPUT SC, V5051, P96, DOI 10.1007/978-3-540-68863-1_7
   Dubrovin J, 2010, LECT NOTES COMPUT SC, V5944, P146, DOI 10.1007/978-3-642-11319-2_13
   Een N., 2003, ELECT NOTES THEORETI, V89, P543, DOI 10.1016/s1571-0661(05)82542-3
   Esparza J., 2008, EATCS MONOGRAPHS THE
   Ghilardi S, 2008, LECT NOTES ARTIF INT, V5195, P67, DOI 10.1007/978-3-540-71070-7_6
   Graf S, 1997, LECT NOTES COMPUT SC, V1254, P72
   Heljanko K, 2003, THEOR PRACT LOG PROG, V3, P519, DOI 10.1017/S1471068403001790
   Heljanko K., 2001, CONCUR 2001 - Concurrency Theory. 12th International Conference. Proceedings (Lecture Notes in Computer Science Vol.2154), P218
   Holzmann GJ, 1997, IEEE T SOFTWARE ENG, V23, P279, DOI 10.1109/32.588521
   Junttila T, 2008, LECT NOTES ARTIF INT, V5330, P290, DOI 10.1007/978-3-540-89439-1_21
   Jussila T., 2005, International Journal on Software Tools for Technology Transfer, V7, P89, DOI 10.1007/s10009-004-0178-1
   Jussila T, 2004, FOURTH INTERNATIONAL CONFERENCE ON APPLICATION OF CONCURRENCY TO SYSTEM DESIGN, PROCEEDINGS, P197, DOI 10.1109/CSD.2004.1309132
   Jussila T., 2005, A97 HELS U TECHN LAB
   Kahlon V, 2009, LECT NOTES COMPUT SC, V5643, P398, DOI 10.1007/978-3-642-02658-4_31
   Kautz H, 1996, PROCEEDINGS OF THE THIRTEENTH NATIONAL CONFERENCE ON ARTIFICIAL INTELLIGENCE AND THE EIGHTH INNOVATIVE APPLICATIONS OF ARTIFICIAL INTELLIGENCE CONFERENCE, VOLS 1 AND 2, P1194
   Kesten Y, 2001, THEOR COMPUT SCI, V256, P93, DOI 10.1016/S0304-3975(00)00103-1
   Malinowski J, 2010, LECT NOTES COMPUT SC, V6015, P405, DOI 10.1007/978-3-642-12002-2_34
   Marques-Silva J, 2009, FRONT ARTIF INTEL AP, V185, P131, DOI 10.3233/978-1-58603-929-5-131
   McMillan KennethL., 1993, CAV 92 P 4 INT WORKS, P164, DOI [10.1007/3-540-56496-914, DOI 10.1007/3-540-56496-914]
   McMillan KL, 2003, LECT NOTES COMPUT SC, V2725, P1
   Ogata S, 2004, LECT NOTES COMPUT SC, V3299, P79
   Pelánek R, 2007, LECT NOTES COMPUT SC, V4595, P263
   RANISE S., 2006, The SMT-LIB standard: Version 1.2
   Rintanen J, 2006, ARTIF INTELL, V170, P1031, DOI 10.1016/j.artint.2006.08.002
   Rybina T, 2003, LECT NOTES COMPUT SC, V2890, P222
   SRI International, 2009, YIC 2 0 PROT SOFTW
   Valmari A., 1998, Lectures on Petri Nets I: Basic Models. Advances in Petri Nets, P429
   Wang C, 2008, LECT NOTES COMPUT SC, V4963, P382, DOI 10.1007/978-3-540-78800-3_29
   Wehrle M, 2007, LECT NOTES COMPUT SC, V4830, P244
   YOUNGER DH, 1963, IEEE T CIRCUITS SYST, VCT10, P238, DOI 10.1109/TCT.1963.1082116
NR 45
TC 4
Z9 7
U1 0
U2 4
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 1
PY 2012
VL 77
IS 10-11
SI SI
BP 1095
EP 1121
DI 10.1016/j.scico.2011.07.005
PG 27
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 980JQ
UT WOS:000306889800005
OA Bronze
DA 2024-07-18
ER

PT J
AU Mateescu, R
   Wijs, A
AF Mateescu, Radu
   Wijs, Anton
TI Sequential and distributed on-the-fly computation of weak tau-confluence
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Boolean equation system; Branching bisimulation; Labelled transition
   system; Partial order reduction; On-the-fly verification
ID MODEL-CHECKING
AB The notion of tau-confluence provides a form of partial order reduction of Labelled Transition Systems (LTSS), by enabling to identify the tau-transitions, whose execution does not alter the observable behaviour of the system. Several forms of tau-confluence adequate with branching bisimulation were studied in the literature, ranging from strong to weak forms according to the length of tau-transition sequences considered. Weak tau-confluence is more complex to compute than strong tau-confluence, but provides better LTS reductions. In this paper, we aim at devising an efficient detection of weak tau-confluent transitions during an on-the-fly exploration of LTSS. With this purpose, we define and prove new encodings of several weak tau-confluence variants using alternation-free Boolean equation systems (BESS), and we apply efficient local BES resolution algorithms to perform the detection. The resulting reduction module, developed within the CADP toolbox using the generic OPEN/CAESAR environment for LTS exploration, was tested in both a sequential and a distributed setting on numerous examples of large LTSS underpinning communication protocols and distributed systems. These experiments assessed the efficiency of the reduction and enabled us to identify the best variants of weak tau-confluence that are useful in practice. (c) 2011 Elsevier B.V. All rights reserved.
C1 [Mateescu, Radu] INRIA Rhone Alpes VASY, F-38330 Montbonnot St Martin, France.
   [Wijs, Anton] Tech Univ Eindhoven, NL-5600 MB Eindhoven, Netherlands.
C3 Eindhoven University of Technology
RP Mateescu, R (corresponding author), INRIA Rhone Alpes VASY, 655 Av Europe, F-38330 Montbonnot St Martin, France.
EM Radu.Mateescu@inria.fr; A.J.Wijs@tue.nl
RI Wijs, Anton/A-9694-2019
OI Wijs, Anton/0000-0002-2071-9624
FU EC-MOAN project of the FP6-NEST-PATH-COM European program [043235]
FX This research was partially funded by the EC-MOAN project no. 043235 of
   the FP6-NEST-PATH-COM European program.
CR ANDERSEN HR, 1994, THEOR COMPUT SCI, V126, P3, DOI 10.1016/0304-3975(94)90266-6
   [Anonymous], 1952, INTRO METAMATHEMATIC
   [Anonymous], 1997, Verification of Modal Properties Using Boolean Equation Systems
   [Anonymous], LECT NOTES COMPUTER
   [Anonymous], 2003, The Spin Model Checker: Primer and Reference Manual
   ARNOLD A, 1988, INFORM PROCESS LETT, V29, P57, DOI 10.1016/0020-0190(88)90029-4
   Blom S., 2002, Computer Aided Verification. 14th International Conference, CAV 2002. Proceedings (Lecture Notes in Computer Science Vol.2404), P596
   Blom S.C.C., 2001, SENR0123 CWI
   Ciardo G., 2001, 1 EFF EUR SCH TRENDS
   Garavel H, 2006, LECT NOTES COMPUT SC, V3920, P445
   Garavel H, 1998, LECT NOTES COMPUT SC, V1384, P68
   Garavel H, 2007, LECT NOTES COMPUT SC, V4590, P158
   Godefroid P., 1990, DIMACS SERIES DISCRE, V3, P321, DOI [10.1090/dimacs/003/21, DOI 10.1090/DIMACS/003/21]
   Groote JF, 1996, THEOR COMPUT SCI, V170, P47, DOI 10.1016/S0304-3975(96)80702-X
   Mateescu R, 2003, SCI COMPUT PROGRAM, V46, P255, DOI 10.1016/S0167-6423(02)00094-1
   Mateescu R., 2006, International Journal on Software Tools for Technology Transfer, V8, P37, DOI 10.1007/s10009-005-0194-9
   Mateescu R, 2000, LECT NOTES COMPUT SC, V1785, P251
   Mateescu R., 2009, RR7000 INRIA
   Mateescu R., 2005, P 10 INT WORKSH FORM, P80
   Mateescu R, 2008, LECT NOTES COMPUT SC, V5156, P196, DOI 10.1007/978-3-540-85114-1_15
   Pace GJ, 2003, LECT NOTES COMPUT SC, V2725, P446
   Peled D, 1998, LECT NOTES COMPUT SC, V1427, P17, DOI 10.1007/BFb0028727
   Stern U., 1997, P CAV 97
   Tarjan R., 1972, SIAM Journal on Computing, V1, P146, DOI 10.1137/0201010
   Tarski A., 1955, PAC J MATH, V7, P440
   Vergauwen B., 1994, Automata, Languages and Programming. 21st International Colloquium, ICALP 94. Proceedings, P304
   Xiaoqun Du, 1999, International Journal on Software Tools for Technology Transfer, V2, P219, DOI 10.1007/s100090050031
   Ying M., 2000, THEORETICAL COMPUTER, V43, P555
NR 28
TC 3
Z9 3
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 1
PY 2012
VL 77
IS 10-11
SI SI
BP 1075
EP 1094
DI 10.1016/j.scico.2011.07.004
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 980JQ
UT WOS:000306889800004
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Wong, PYH
   Gibbons, J
AF Wong, Peter Y. H.
   Gibbons, Jeremy
TI Property specifications for workflow modelling
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 7th International Conference on Integrated Formal Methods
CY FEB 16-19, 2009
CL Dusseldorf, GERMANY
DE Compatibility; CSP; Workflow specification; Linear temporal logic;
   Property specification patterns; Workflow verification
AB Previously we provided two formal behavioural semantics for the Business Process Modelling Notation (BPMN) in the process algebra CSP. By exploiting CSP's refinement orderings, developers may formally compare their BPMN models. However, BPMN is not a specification language, and it is difficult and sometimes impossible to use it to construct behavioural properties against which other BPMN models may be verified. This paper considers a pattern-based approach to expressing behavioural properties. We describe a property specification language PL for capturing a generalisation of Dwyer et al.'s Property Specification Patterns, and present a translation from PL into a bounded, positive fragment of linear temporal logic, which can then be automatically translated into CSP for simple refinement checking. We present a detailed example studying the behavioural properties of an airline ticket reservation business process. Using the same example we also describe some recent results on expressing behavioural compatibility within our semantic models. These results lead to a compositional approach for ensuring deadlock freedom of interacting business processes. (C) 2010 Elsevier B.V. All rights reserved.
C1 [Wong, Peter Y. H.; Gibbons, Jeremy] Univ Oxford, Comp Lab, Oxford OX1 2JD, England.
C3 University of Oxford
RP Wong, PYH (corresponding author), Univ Oxford, Comp Lab, Oxford OX1 2JD, England.
EM peter.wong@comlab.ox.ac.uk; jeremy.gibbons@comlab.ox.ac.uk
OI Gibbons, Jeremy/0000-0002-8426-9917
CR [Anonymous], 1992, TEMPORAL LOGIC REACT, DOI DOI 10.1007/978-1-4612-0931-7
   [Anonymous], 2003, BUSINESS PROCESS EXE
   [Anonymous], LNCS
   [Anonymous], 1999, Concurrency-state models and Java programs
   ARBAB F, 2008, CCIS, V17
   ARBAB F, 2004, MATH STRUCTURES COMP, V14
   BRAVETTI M, 2007, P 9 INT C COORD MOD
   Bravetti Mario, 2007, P 6 INT S SOFTW COMP
   DIJKMAN RM, 2008, SEMANTICS ANAL BUSIN
   *FORM SYST EUR LTD, 1998, FAIL DIV REF FDR2 US
   Foster H, 2004, IEEE INTERNATIONAL CONFERENCE ON WEB SERVICES, PROCEEDINGS, P738, DOI 10.1109/ICWS.2004.1314806
   FOSTER H, 2006, IEEE INT C INT WEB A
   HINTON A, 2006, LNCS, V3920
   *INT STAND ORG, 1989, 8807 INT STAND ORG
   *INT TEL UN, 1996, Z120 INT TEL UN
   LAPADULA A, 2007, LNCS, V4421
   Leuschel M., 2001, FME 2001: Formal Methods for Increasing Software Productivity. International Symposium on Formal Methods Europe. Proceedings (Lecture Notes in Computer Science Vol.2021), P99
   Lowe G., 2008, FORMAL ASPECTS COMPU, V20
   MATTHEW B, 1999, P 21 INT C SOFTW ENG
   Mukarram Ahmed, 1992, THESIS U OXFORD
   *OBJ MAN GROUP, 2006, BUS PROC MOD NOT BPM
   Plagge Daniel, 2010, International Journal on Software Tools for Technology Transfer, V12, P9, DOI 10.1007/s10009-009-0132-3
   PRANDI D, 2008, LNCS, V5052
   Reed JN, 2004, FORM ASP COMPUT, V16, P394, DOI 10.1007/s00165-004-0050-9
   ROSCOE AW, 1998, THEOR PRACTICE CONCU
   Sun J, 2008, TASE 2008: SECOND IFIP/IEEE INTERNATIONAL SYMPOSIUM ON THEORETICAL ASPECTS OF SOFTWARE ENGINEERING, PROCEEDINGS, P23, DOI 10.1109/TASE.2008.12
   W3C, 2002, WEB SERV CHOR INT WS
   WONG P, 2008, P 7 INT WORKSH FDN C
   Wong PYH, 2008, INT CONF QUAL SOFTW, P126, DOI 10.1109/QSIC.2008.6
   WONG PYH, MODEL CHECKING BPMN
   WONG PYH, 2008, LNCS, V5256
   WONG PYH, 2010, THESIS U OXFORD
   SPEC PATTERNS
   [No title captured]
   [No title captured]
NR 35
TC 11
Z9 13
U1 0
U2 8
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 1
PY 2011
VL 76
IS 10
SI SI
BP 942
EP 967
DI 10.1016/j.scico.2010.09.007
PG 26
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 785MK
UT WOS:000292232900007
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Oliveira, M
   Zeyda, F
   Cavalcanti, A
AF Oliveira, Marcel
   Zeyda, Frank
   Cavalcanti, Ana
TI A tactic language for refinement of state-rich concurrent specifications
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 13th Refinement Workshop
CY MAY 27, 2008
CL Turku, FINLAND
SP British Comp Soc (BCS)
DE Concurrency; Refinement calculus; Tactics; Control law diagrams
AB Circus is a refinement language in which specifications define both data and behavioural aspects of concurrent systems using a combination of Z and CSP. Its refinement theory and calculus are distinctive, but since refinements may be long and repetitive, the practical application of this technique can be hard. Useful strategies have been identified, described, and used, and by documenting them as tactics, they can be expressed and repeatedly applied as single transformation rules. Here, we present ArcAngelC, a language for defining such tactics; we present the language, its semantics, and its application in the formalisation of an existing strategy for verification of Ada implementations of control systems specified by Simulink diagrams. We also discuss its mechanisation in a theorem prover, ProofPower-Z. (C) 2010 Elsevier B.V. All rights reserved.
C1 [Oliveira, Marcel] Univ Fed Rio Grande do Norte, Dept Informat & Matemat Aplicada, BR-59072970 Natal, RN, Brazil.
   [Zeyda, Frank; Cavalcanti, Ana] Univ York, Dept Comp Sci, York YO10 5GH, N Yorkshire, England.
C3 Universidade Federal do Rio Grande do Norte; University of York - UK
RP Oliveira, M (corresponding author), Univ Fed Rio Grande do Norte, Dept Informat & Matemat Aplicada, BR-59072970 Natal, RN, Brazil.
EM marcel@dimap.ufrn.br
RI Ines, INCT/J-9550-2013
OI Oliveira, Marcel/0000-0002-3023-2748; Cavalcanti, Ana Lucia
   Caneca/0000-0002-0831-1976; Zeyda, Frank/0009-0009-4251-4740
FU EPSRC [EP/E025366/1, EP/H017461/1] Funding Source: UKRI
CR [Anonymous], 1992, The Z Notation
   [Anonymous], 1979, LECT NOTES COMPUTER
   [Anonymous], The ProofPower
   Arthan R, 2000, ICFEM 2000: THIRD INTERNATIONAL CONFERENCE ON FORMAL ENGINEERING METHODS, PROCEEDINGS, P169, DOI 10.1109/ICFEM.2000.873817
   Back R. J. R., 1990, Formal Aspects of Computing, V2, P247, DOI 10.1007/BF01888227
   Butler M, 1997, SPR S DISC MATH, P40
   Carrington D, 1998, FORM ASP COMPUT, V10, P97, DOI 10.1007/s001650050006
   CARRINGTON D, 1994, 948 U QUEENSLAND SOF
   Cavalcanti A, 2005, LECT NOTES COMPUT SC, V3582, P253
   Cavalcanti A., 2003, Formal Aspects of Computing, V15, P146, DOI 10.1007/s00165-003-0006-5
   CAVALCANTI ALC, 1999, FORM ASP COMPUT, V10, P267
   Cavalcanti A, 2006, IEEE INT C ENG COMP, P269
   DELAHAYE D, 2000, LNCS LNAI, V1955, P377
   Fischer C, 1998, LECT NOTES COMPUT SC, V1493, P5, DOI 10.1007/BFb0056022
   Groves L., 1992, 5th Refinement Workshop. Proceedings, P272
   Grundy J., 1992, 5th Refinement Workshop. Proceedings, P230
   Gurgel AC, 2008, LECT NOTES COMPUT SC, V5238, P349
   Hoare CAR., 1985, Communicating Sequential Processes
   Hunt B., 2001, A guide to MATLAB: For beginners and experienced users
   Kirchner F, 2007, ELECTRON NOTES THEOR, V174, P47, DOI 10.1016/j.entcs.2006.10.057
   MACLANE S, 1991, GRADUATE TEXTS MATH
   Mahony B, 1998, PROC INT CONF SOFTW, P95, DOI 10.1109/ICSE.1998.671106
   MARTIN A, 1997, 9715 U QUEENSL SOFTW
   MARTIN A, 1997, 9716 U QUEENSL SOFTW
   MARTIN A, 1995, INFINITE LISTS SPECI
   Martin A, 1993, TACTIC SEMANTICS REA
   Martin A. P., 1996, Formal Aspects of Computing, V8, P479, DOI 10.1007/BF01213535
   MORGAN C, 1990, ACTA INFORM, V27, P481, DOI 10.1007/BF00277386
   Morgan Carroll, 1994, Programming from specifications
   Nickson R, 1994, THESIS VICTORIA U WE
   Oliveira M., 2003, Formal Aspects of Computing, V15, P28, DOI 10.1007/s00165-003-0003-8
   Oliveira M, 2004, PROCEEDINGS OF THE SECOND INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING AND FORMAL METHODS, P310, DOI 10.1109/SEFM.2004.1347535
   Oliveira MVM, 2008, ELECTRON NOTES THEOR, V214, P203, DOI 10.1016/j.entcs.2008.06.010
   Oliveira M, 2009, FORM ASP COMPUT, V21, P3, DOI 10.1007/s00165-007-0052-5
   OLIVEIRA MVM, 2008, 6 IEEE INT C SOFTW E, P281
   OLIVEIRA MVM, 2006, YCST200602 U YORK DE
   OLIVEIRA MVM, 2007, ARCANGEIC
   OLIVEIRA MVM, 2000, TACTICS REFINEMENT
   OLIVEIRA MVM, 2002, THESIS U FEDERAL PER
   OLIVEIRA MVM, 2002, TACTICS EXAMPLES THE
   OWRE S, 2003, NASA C PUBLICATION, P1
   Paulson LawrenceC., 1987, LOGIC COMPUTATION
   SAALTINK, 1997, LECT NOTES COMPUTER, V1212, P72
   SAMPAIO ACA, 2002, LECT NOTES COMPUTER, V2391, P451
   Treharne H., 1999, IFM'99. Proceedings of the 1st International Conference on Integrated Formal Methods, P437
   VANDESNEPSCHEUT JL, 1994, LECT NOTES COMPUTER, V782, P35
   VICKERS T, 1994, TRCS9405 AUSTR NATL
   VICKERS T, 1990, 5 AUSTR SOFTW ENG C, P39
   VONWRIGHT J, 1993, FORM METHOD SYST DES, V3, P49, DOI 10.1007/BF01383984
   Woodcock J., 1996, Using Z: Specification, Refinement, and Proof
   Xavier M.A., 2006, SBMF 2006 BRAZILIAN, P105
   Zeyda F, 2009, ELECTRON NOTES THEOR, V259, P225, DOI 10.1016/j.entcs.2009.12.027
NR 52
TC 3
Z9 3
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 1
PY 2011
VL 76
IS 9
SI SI
BP 792
EP 833
DI 10.1016/j.scico.2010.11.012
PG 42
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 765IY
UT WOS:000290700100005
OA hybrid
DA 2024-07-18
ER

PT J
AU van Gastel, B
   Lensink, L
   Smetsers, S
   van Eekelen, M
AF van Gastel, Bernard
   Lensink, Leonard
   Smetsers, Sjaak
   van Eekelen, Marko
TI Deadlock and starvation free reentrant readers-writers: A case study
   combining model checking with theorem proving
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Model checking; Theorem proving; Readers-writers algorithm; SPIN; PVS
ID VERIFICATION; JAVA
AB The classic readers-writers problem has been extensively studied. This holds to a lesser degree for the reentrant version, where it is allowed to nest locking actions. Such nesting is useful when a library is created with various procedures each starting and ending with a lock operation. Allowing nesting makes it possible for these procedures to call each other.
   We considered an existing widely used industrial implementation of the reentrant readers-writers problem. Staying close to the original code, we modelled and analyzed it using a model checker resulting in the detection of a serious error: a possible deadlock situation. The model was improved and checked satisfactorily for a fixed number of processes. To achieve a correctness result for an arbitrary number of processes the model was converted to a specification that was proven with a theorem prover. Furthermore, we studied starvation. Using model checking we found a starvation problem. We have fixed the problem and checked the solution. Combining model checking with theorem proving appeared to be very effective in reducing the time of the verification process. (C) 2010 Elsevier B.V. All rights reserved.
C1 [van Gastel, Bernard; Lensink, Leonard; Smetsers, Sjaak; van Eekelen, Marko] Radboud Univ Nijmegen, Inst Comp & Informat Sci, Nijmegen, Netherlands.
   [van Eekelen, Marko] Open Univ Netherlands, Sch Comp Sci, Nijmegen, Netherlands.
C3 Radboud University Nijmegen; Open University Netherlands
RP van Eekelen, M (corresponding author), Radboud Univ Nijmegen, Inst Comp & Informat Sci, Nijmegen, Netherlands.
EM b.vangastel@cs.ru.nl; l.lensink@cs.ru.nl; s.smetsers@cs.ru.nl;
   marko@cs.ru.nl
RI van Eekelen, Marko C.J.D./F-5757-2010
OI Lensink, Leonard/0000-0002-2400-2532
FU FMICS2008
FX This paper is an extended version of van Gastel et al. (2009) [13] which
   received the EASST Best Software Science Paper Award of FMICS2008.
CR Anand S, 2007, LECT NOTES COMPUT SC, V4424, P134
   Andrews T, 2004, LECT NOTES COMPUT SC, V3114, P484
   [Anonymous], CONCURRENCY PRACTICE
   [Anonymous], LECT NOTES COMPUTER
   [Anonymous], 2019, LCP ISABELLE 2019
   [Anonymous], DOBBS J
   [Anonymous], P WORK USER INT THEO
   [Anonymous], ERCIM NEWS SPECIAL T
   [Anonymous], TEXTS THEORETICAL CO
   [Anonymous], SOFTWARE ENG RES PRA
   [Anonymous], SIGSOFT SOFTW ENG NO
   [Anonymous], SOFTW ENG 2000 P 200
   [Anonymous], THESIS RADBOUD U NIJ
   [Anonymous], THESIS RADBOUD U NIJ
   [Anonymous], ICISR08012 RADB U NI
   [Anonymous], STTT
   Ben-Ari M., 2008, Principles of the Spin Model Checker
   Clarke Edmund M., 1983, C RECORD 10 ANN ACM, P117, DOI [DOI 10.1145/567067.567080, 10.1145/567067]
   COURTOIS PJ, 1971, COMMUN ACM, V14, P667, DOI 10.1145/362759.362813
   Ha V, 2004, PROC INT CONF SOFTW, P304, DOI 10.1109/ICSE.2004.1317453
   Havelund K., 1996, FME '96: Industrial Benefit and Advances in Formal Methods. Third International Symposium of Formal Methods Europe. Proceedings, P662
   Havelund K., 2000, Int. J. Softw. Tools Technol. Transfer, V2, P366, DOI [DOI 10.1007/S100090050043, 10.1007/s100090050043]
   Holzmann GJ, 2004, The SPIN model checker: primer and reference manual, V1003
   Jacobs B, 2007, FORM ASP COMPUT, V19, P191, DOI 10.1007/s00165-006-0013-4
   Katz S., 2001, FME 2001: Formal Methods for Increasing Software Productivity. International Symposium on Formal Methods Europe. Proceedings (Lecture Notes in Computer Science Vol.2021), P419
   Larsen K. G., 1997, International Journal on Software Tools for Technology Transfer, V1, P134, DOI 10.1007/s100090050010
   Leavens GT, 2007, LECT NOTES COMPUT SC, V4590, P37
   OWRE S, 1992, LECT NOTES ARTIF INT, V607, P748
   Queille JP, 2008, LECT NOTES COMPUT SC, V5000, P216
   van Eekelen M, 2008, LECT NOTES COMPUT SC, V4916, P182
   van Gastel B, 2009, LECT NOTES COMPUT SC, V5596, P85, DOI 10.1007/978-3-642-03240-0_10
   Visser W., 2003, Automated Software Engineering, V10, P203, DOI 10.1023/A:1022920129859
NR 32
TC 1
Z9 1
U1 0
U2 5
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 1
PY 2011
VL 76
IS 2
SI SI
BP 82
EP 99
DI 10.1016/j.scico.2010.03.004
PG 18
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 693JO
UT WOS:000285220600003
OA Green Published
DA 2024-07-18
ER

PT J
AU Talcott, C
   Sirjani, M
   Ren, SP
AF Talcott, Carolyn
   Sirjani, Marjan
   Ren, Shangping
TI Comparing three coordination models: Reo, ARC, and PBRD
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Coordination languages; Actor languages; Reo; Policy Based Russian Dolls
   (PBRD); Actor Role Coordinator (ARC); Constraint automata
ID COMPONENT CONNECTORS; LOGIC; SEMANTICS; SYSTEMS
AB Three models of coordination - Reo, Actors-Roles-Coordinators (ARC), and Policy-based Russian Dolls (PBRD) - are compared and contrasted according to a set of coordination features. Mappings between their semantic models are defined. Use of the models is illustrated by a small case study. (C) 2009 Elsevier B.V. All rights reserved.
C1 [Talcott, Carolyn] SRI Int, Comp Sci Lab, Menlo Pk, CA 94025 USA.
   [Sirjani, Marjan] Univ Tehran, Dept Elect & Comp Engn, Tehran 14174, Iran.
   [Sirjani, Marjan] Reykjavik Univ, Sch Comp Sci, Reykjavik, Iceland.
   [Ren, Shangping] IIT, Dept Comp Sci, Chicago, IL 60616 USA.
C3 SRI International; University of Tehran; Reykjavik University; Illinois
   Institute of Technology
RP Talcott, C (corresponding author), SRI Int, Comp Sci Lab, 333 Ravenswood Ave, Menlo Pk, CA 94025 USA.
EM clt@cs.stanford.edu; msirjani@ut.ac.ir; ren@iit.edu
RI Ren, Shangping/B-5683-2019
FU NSF [CCR-0311348, CNS-0431832, CNS-0746643]
FX The first author was supported in part by the NSF grant CCR-0311348. The
   second author was supported in part by NSF grants CNS-0431832 and
   CNS-0746643.
CR Agha G., 1993, IEEE Parallel & Distributed Technology: Systems & Applications, V1, P3, DOI 10.1109/88.218170
   Agha G., 1986, Actors: a model of concurrent computation in distributed systems
   AGHA G, 1992, P IFIP C DEP COMP CR
   Agha GulA., 1997, J FUNCT PROGRAM, V7, P1
   [Anonymous], P 2009 ACM S APPL CO
   [Anonymous], 2007, LNCS
   [Anonymous], 2006, INTERACTIVE COMPUTAT
   Arbab F, 2005, SCI COMPUT PROGRAM, V55, P3, DOI 10.1016/j.scico.2004.05.010
   Arbab F, 2004, MATH STRUCT COMP SCI, V14, P329, DOI 10.1017/S0960129504004153
   Arbab F, 2004, PROCEEDINGS OF THE SECOND INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING AND FORMAL METHODS, P198, DOI 10.1109/SEFM.2004.1347521
   Arbab F, 2003, LECT NOTES COMPUT SC, V2755, P34
   Arbab F., 2004, ELECT NOTES THEORETI, V97, P25
   Arbab F., 2006, LOBJET, V12, P33
   ARBAB F, 1996, LECT NOTES COMPUT SC, V1061, P34
   ARBAB F, 2008, PRIMA, P42
   Arbab F, 2008, COMM COM INF SC, V17, P108
   Arbab Farhad., 1998, Bulletin of the Dutch Association for Theoretical Computer Science NVTI, P11
   BAE K, 2008, 9 INT WORKSH RUL BAS
   Baier C, 2006, SCI COMPUT PROGRAM, V61, P75, DOI 10.1016/j.scico.2005.10.008
   BERRY A, 1998, P 1998 ACM S APPL CO, P178
   BICKFORD M, 2005, 20052010 CORN U
   Bistarelli S, 2006, ACM T COMPUT LOG, V7, P563, DOI 10.1145/1149114.1149118
   CABRI G, 2003, LNCS, V2940, P243
   CARLSON B, 1994, MIT PS LOG, P339
   CARLSON B, 1995, THESIS UPPSALA U SWE
   CHANG PH, 2007, 22 ANN ACM S APPL CO, P1286
   Chang PH, 2007, LECT NOTES COMPUT SC, V4531, P239
   CHEN N, 2007, P HAW INT C SYST SCI
   Cheong Elaine., 2005, Proceedings of the 3rd international conference on Embedded networked sensor systems, SenSys '05, P302
   CLARKE D, 2004, ISOLA, P9
   Clarke D, 2008, FUND INFORM, V82, P361
   Clarke D, 2006, ELECTRON NOTES THEOR, V154, P101, DOI 10.1016/j.entcs.2005.12.035
   Clarke D, 2006, ELECTRON NOTES THEOR, V159, P61, DOI 10.1016/j.entcs.2005.12.062
   Clarke EM, 1999, MODEL CHECKING, P1
   CLINGER W, 1981, AITR633 MIT
   Colman A, 2005, LECT NOTES COMPUT SC, V3454, P63
   CREMONINI M, 2000, LNCS, V1906, P369
   Cruz JC, 1999, LECT NOTES COMPUT SC, V1594, P355
   De Nicola R, 1998, IEEE T SOFTWARE ENG, V24, P315, DOI 10.1109/32.685256
   De Nicola R, 2006, ELECTRON NOTES THEOR, V153, P161, DOI 10.1016/j.entcs.2005.10.037
   Denker G., 2000, Electronic Notes in Theoretical Computer Science, V36, P405
   Dill D. L., 1990, P INT WORKSH AUT VER, P197
   Frolund S., 1996, COORDINATING DISTRIB
   GELERNTER D, 1985, ACM T PROGR LANG SYS, V7, P80, DOI 10.1145/2363.2433
   Gorrieri R, 1998, THEOR COMPUT SCI, V192, P163, DOI 10.1016/S0304-3975(97)00148-5
   HENTENRYCK PV, 1998, J LOGIC PROGRAM, V37, P293
   Hewitt C, 2007, LECT NOTES ARTIF INT, V4386, P293
   Klüppelholz S, 2007, ELECTRON NOTES THEOR, V175, P19, DOI 10.1016/j.entcs.2007.03.003
   Koehler C, 2007, LECT NOTES COMPUT SC, V4749, P625
   LAZOVIK A, 2007, ICSOC, P398
   Mason IA, 1999, THEOR COMPUT SCI, V220, P409, DOI 10.1016/S0304-3975(99)00009-2
   MENG S, 2007, P 22 ANN ACM S APPL, P346
   Meseguer J, 2002, LECT NOTES COMPUT SC, V2374, P1
   MESEGUER J, 1992, THEOR COMPUT SCI, V96, P73, DOI 10.1016/0304-3975(92)90182-F
   Meseguer J., 2008, LNCS, V5065
   Mousavi MR, 2006, ELECTRON NOTES THEOR, V154, P83, DOI 10.1016/j.entcs.2005.12.034
   Omicini A, 2007, ELECTRON NOTES THEOR, V175, P97, DOI 10.1016/j.entcs.2007.03.006
   Omicini Andrea., 2001, DECLARATIVE PROGRAMM, V48, P179, DOI DOI 10.1016/S1571-0661(04)00156-2
   Papadopoulos G.A., 1998, Advances in Computers, P330
   Picco G. P., 1999, Proceedings of the 1999 International Conference on Software Engineering (IEEE Cat. No.99CB37002), P368, DOI 10.1109/ICSE.1999.841027
   Pourvatan B, 2007, LECT NOTES COMPUT SC, V4767, P412
   Ren SP, 2006, LECT NOTES COMPUT SC, V4038, P247
   SARASWAT VA, 1994, IEEE S LOG, P71, DOI 10.1109/LICS.1994.316085
   Saraswat Vijay A., 1993, Concurrent Constraint Programming
   TALCOTT C, 2006, P 1 INT WORKSH METH, V150, P143
   TALCOTT C, 2007, P 2 INT WORKSH METH, V181, P97
   Talcott C. L., 1998, Higher-Order and Symbolic Computation, V11, P281, DOI 10.1023/A:1010042915896
   Tasharofi S., 2008, ELECT NOTES THEORETI, V159, P99
   Tasharofi S, 2008, LECT NOTES COMPUT SC, V4937, P108
   Varela C, 1999, LECT NOTES COMPUT SC, V1594, P166
   Venkatasubramanian N, 2004, ACM T SOFTW ENG METH, V13, P86, DOI 10.1145/1005561.1005564
   Venkatasubramanian N., 1995, Proceedings of the Fourteenth Annual ACM Symposium on Principles of Distributed Computing, P144, DOI 10.1145/224964.224981
   Zhang W, 2007, LECT NOTES ARTIF INT, V4389, P170
   [No title captured]
NR 74
TC 7
Z9 8
U1 1
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 1
PY 2011
VL 76
IS 1
SI SI
BP 3
EP 22
DI 10.1016/j.scico.2009.11.006
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 684BH
UT WOS:000284521500002
DA 2024-07-18
ER

PT J
AU Cleophas, L
   Watson, BW
   Zwaan, G
AF Cleophas, Loek
   Watson, Bruce W.
   Zwaan, Gerard
TI A new taxonomy of sublinear right-to-left scanning keyword pattern
   matching algorithms
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Finite automata; Algorithm taxonomies; Pattern matching
ID STRINGS; SEARCH
AB A new taxonomy of sublinear (multiple) keyword pattern matching algorithms is presented. Based on an earlier taxonomy by the second and third authors, this new taxonomy includes not only suffix-based algorithms, but also factor- and factor-oracle-based algorithms. In particular, we show how suffix-based (Commentz-Walter like), factor- and factor-oracle-based sublinear keyword pattern matching algorithms can be seen as instantiations of a general sublinear algorithm skeleton. During processing, such algorithms shift or jump through the text in a forward or left-to-right direction, and read backward or right-to-left starting from positions in the text, i.e. they read suffixes of certain prefixes of the text. They use finite automata for efficient computation of string membership in a certain language. In addition, we show shift functions defined for the suffix-based algorithms to be reusable for factor- and factor-oracle-based algorithms. The taxonomy is based on deriving the algorithms from a common starting point by adding algorithm and problem details, to arrive at efficient or well-known algorithms. Such a presentation provides correctness arguments for the algorithms as well as clarity on how the algorithms are related to one another. In addition, it is helpful in the construction of a toolkit of the algorithms. (C) 2010 Elsevier B.V. All rights reserved.
C1 [Cleophas, Loek; Zwaan, Gerard] Eindhoven Univ Technol, Dept Math & Comp Sci, Software Engn & Technol Grp, NL-5600 MB Eindhoven, Netherlands.
   [Cleophas, Loek; Watson, Bruce W.] Univ Pretoria, Dept Comp Sci, FASTAR Res Grp, ZA-0002 Pretoria, South Africa.
C3 Eindhoven University of Technology; University of Pretoria
RP Cleophas, L (corresponding author), Eindhoven Univ Technol, Dept Math & Comp Sci, Software Engn & Technol Grp, POB 513, NL-5600 MB Eindhoven, Netherlands.
EM loek@loekcleophas.com; bruce@fastar.org; g.zwaan@tue.nl
OI Cleophas, Loek/0000-0002-7221-3676
CR AHO AV, 1975, COMMUN ACM, V18, P333, DOI 10.1145/360825.360855
   ALLAUZEN C, 2001, LNCS, V2089
   [Anonymous], HDB THEORETICAL COMP
   [Anonymous], 1997, Pattern matching algorithms
   [Anonymous], 1990, Predicate Calculus and Program Semantics
   [Anonymous], 1995, THESIS TU EINDHOVEN
   [Anonymous], 9911 U MARN LA VALL
   BARLASZABO G, 2002, THESIS U PRETORIA
   BOYER RS, 1977, COMMUN ACM, V20, P62
   Cleophas Loek, 2005, Journal of Automata, Languages and Combinatorics, V10, P627
   CLEOPHAS L, 2004, 0401 TU EINDH DEP MA
   CLEOPHAS L, 2004, 0407 TU EINDH DEP MA
   Cleophas L., 2008, Ph.D. thesis
   CLEOPHAS L, 2004, LNCS, V3246
   CLEOPHAS LGW, 2003, THESIS TU EINDHOVEN
   Commentz-Walter B., 1979, P 6 INT C AUT LANG P
   COMMENTZWALTER B, 1979, 7909007 TR IBM GERM
   Crochemore M, 1999, INFORM PROCESS LETT, V71, P107, DOI 10.1016/S0020-0190(99)00092-7
   CROCHEMORE M, 1994, ALGORITHMICA, V12, P247, DOI 10.1007/BF01185427
   CROCHEMORE M, 1997, HDB FORMAL LANGUAGES, V2
   Crochemore M., 2007, Algorithms on strings, DOI DOI 10.1017/CBO9780511546853
   Crochemore M, 2003, JEWELS STRINGOLOGY T
   Dijkstra E. W., 1976, A Discipline of Pro-gramming
   FAN JJ, 1993, IEEE T KNOWL DATA EN, V5, P339, DOI 10.1109/69.219740
   FAN JJ, 1994, COMPUTER ALGORITHMS, P91
   HORSPOOL RN, 1980, SOFTWARE PRACT EXPER, V10, P501, DOI 10.1002/spe.4380100608
   JONKERS HBM, 1983, 166 MATH CTR
   Knuth D. E., 1977, SIAM Journal on Computing, V6, P323, DOI 10.1137/0206024
   Mancheron A., 2004, P PRAG STRING C 2004
   MISH FC, 1993, M WEBSTERS COLLEGIAT
   Navarro G., 2002, FLEXIBLE PATTERN MAT
   NAVARRO G, 2000, ACM J EXPT ALGORITHM, V5
   Smyth W.F., 2003, Computing Patterns in Strings
   SUNDAY DM, 1990, COMMUN ACM, V33, P132, DOI 10.1145/79173.79184
   VANDENEIJNDE J, 1992, 9204 TU EINDH FAC CO
   Watson BW, 2004, SOFTWARE PRACT EXPER, V34, P697, DOI 10.1002/spe.590
   Watson BW, 1996, SCI COMPUT PROGRAM, V27, P85, DOI 10.1016/0167-6423(96)00008-1
   WATSON BW, 2000, P PRAG STRING CLUB W
   Wu S., 1994, TR9417 U AR DEP COMP
NR 39
TC 10
Z9 12
U1 0
U2 1
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 1
PY 2010
VL 75
IS 11
SI SI
BP 1095
EP 1112
DI 10.1016/j.scico.2010.04.012
PG 18
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 641MD
UT WOS:000281129600009
DA 2024-07-18
ER

PT J
AU Maurer, WD
AF Maurer, Ward Douglas
TI Simple section interchange and properties of non-computable functions
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Instruction theory; Non-computable functions; Formal methods; Partially
   defined instructions
ID COMPUTER INSTRUCTIONS; PROGRAMS
AB We here extend our earlier work on the theory of partially defined computer instructions and guards to cover partially defined computer expressions and programs. The notion of the relevant region of an expression is generalized to conditional relevant regions, and we specify upper bounds on these for expressions built up from simpler ones. We then proceed to specify upper bounds on the input and output regions of programs containing goto statements, even though the state transformations of such programs are not necessarily computable. This is then combined with our earlier commutativity results to obtain a general condition under which two simple sections of such a program commute with each other, and therefore may be interchanged, or possibly done in parallel. (C) 2010 Elsevier B.V. All rights reserved.
C1 George Washington Univ, Dept Comp Sci, Washington, DC 20052 USA.
C3 George Washington University
RP Maurer, WD (corresponding author), George Washington Univ, Dept Comp Sci, Washington, DC 20052 USA.
EM maurer@gwu.edu
CR Allen F., 1974, Information Processing 74 (Software), P398
   Allen F. E., 1969, Annual review in automatic programming, vol.5, P239
   ALLEN R, 1987, ACM T PROGR LANG SYS, V9, P491, DOI 10.1145/29873.29875
   [Anonymous], 2001, OPTIMIZING COMPILERS
   [Anonymous], COMPILER DESIGN IMPL
   BERNSTEIN AJ, 1966, IEEE TRANS ELECTRON, VEC15, P757, DOI 10.1109/PGEC.1966.264565
   Davis M, 1958, Computability and Unsolvability
   de Bakker J. W., 1969, ADV INFORMATION SYST, V2, P173
   KENNEDY K, 1981, PROGRAM FLOW ANAL TH, P1
   Linger R.C., 1979, Structured Programming; Theory and Practice the Systems Programming Series
   Maurer WD, 2008, SCI COMPUT PROGRAM, V72, P220, DOI 10.1016/j.scico.2008.06.001
   MAURER WD, 1966, J ACM, V13, P226, DOI 10.1145/321328.321334
   Maurer WD, 2006, SCI COMPUT PROGRAM, V60, P244, DOI 10.1016/j.scico.2005.09.001
   MAURER WD, 2009, TRGWU09004 COMP SCI
   Sreedhar VugranamC., 1995, Proceedings of the 22nd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages (POPL), P62
   Wegman MarkN., 1985, Proceedings of Symposium on Principles of Programming Languages (POPL), P291, DOI 10.1145/318593.318659
   Wolfe M.J., 1996, High Performance Compilers For Parallel Computing
   [No title captured]
NR 18
TC 0
Z9 0
U1 0
U2 0
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 1
PY 2010
VL 75
IS 11
SI SI
BP 1142
EP 1164
DI 10.1016/j.scico.2010.05.001
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 641MD
UT WOS:000281129600011
DA 2024-07-18
ER

PT J
AU Frisby, N
   Kimmell, G
   Weaver, P
   Alexander, P
AF Frisby, Nicolas
   Kimmell, Garrin
   Weaver, Philip
   Alexander, Perry
TI Constructing language processors with algebra combinators
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 6th International Conference on Generative Programming and Component
   Engineering
CY OCT 01-03, 2007
CL Salzburg, AUSTRIA
SP ACM SIGPLAN, ACM SIGSOFT
DE Generic programming; Modular semantics
AB Modular Monadic Semantics (MMS) is a well-known mechanism for structuring modular denotational semantic definitions for programming languages. The principal attraction of MMS is that families of language constructs can be independently specified and later combined in a mix-and-match fashion to create a complete language semantics. This has proved useful for constructing formal, yet executable, semantics when prototyping languages. In this work we demonstrate that MMS has an additional software engineering benefit. In addition to composing semantics for various language constructs, we can use MMS to compose various differing semantics for the same language constructs. This capability allows us to compose and reuse orthogonal language tasks such as type checking and compilation. We describe algebra combinators, the principal vehicle for achieving this reuse, along with a series of applications of the technique for common language processing tasks. (C) 2010 Elsevier B.V. All rights reserved.
C1 [Frisby, Nicolas; Kimmell, Garrin; Alexander, Perry] Univ Kansas, Informat Technol & Telecommun Ctr, Dept Elect Engn & Comp Sci, Lawrence, KS 66045 USA.
   [Weaver, Philip] Signalicorp, Portland, OR 97212 USA.
C3 University of Kansas
RP Kimmell, G (corresponding author), Univ Kansas, Informat Technol & Telecommun Ctr, Dept Elect Engn & Comp Sci, 2335 Irving Hill Rd, Lawrence, KS 66045 USA.
EM nfrisby@ittc.ku.edu; kimmell@ittc.ku.edu; pweaver@signalicorp.com;
   alex@ittc.ku.edu
CR Abbott M, 2005, FUND INFORM, V65, P1
   Alexander P., 2006, SYSTEM LEVEL DESIGN
   [Anonymous], 2005, P GT2005 ASME TURB E
   [Anonymous], 2003, Haskell 98 language and libraries: the revised report
   Bawden A., 1999, Proceedings of the 1999 ACM SIGPLAN. Workshop on Partial Evaluation and Semantics-Based Program Manipulation (PEPM'99), P4
   CARTWRIGHT R, 1994, LNCS, V789, P244
   Duponcheel L., 1995, USING CATAMORPHISMS
   ESPINOSA DA, 1995, THESIS COLUMBIA U
   GAYO JEL, 2001, ELECT NOTES THEORETI, V44
   HARRISON WL, 2000, P INT C MATH PROGR C, P213
   Huet Gerard P., 1997, Journal of Functional Programming, V7, P549
   Hutton G., 1998, P 3 ACM SIGPLAN INT, P280
   *IEEE, 1994, IEEE STAND VHDL LANG
   Jansson P., 1997, POPL 1997, P470
   Jones M. P., 1993, YALEUDCSRR1004
   Jones MP, 2000, LECT NOTES COMPUT SC, V1782, P230
   JONES SP, 2001, ENG THEORIES SOFTWAR, V180
   Lämmel R, 2003, LECT NOTES COMPUT SC, V2562, P357
   Lämmel R, 2003, ACM SIGPLAN NOTICES, V38, P26, DOI 10.1145/640136.604179
   LAMMEL R, 2002, LNCS, V2257, P137
   LAMMEL R, 2000, P WGP 2000, P46
   Lammel Ralf., 2004, ICFP 04, P244
   LIANG S, 1996, LECT NOTES COMPUTER, V1058, P219
   Liang Sheng, 1995, P 22 ACM SIGPLAN SIG, P333, DOI DOI 10.1145/199448.199528
   MALCOLM G, 1990, THESIS GRONINGEN U
   Mcbride C, 2008, J FUNCT PROGRAM, V18, P1, DOI 10.1017/S0956796807006326
   Meertens L., 1992, Formal Aspects of Computing, V4, P413, DOI 10.1007/BF01211391
   MEIJER E, 1991, LECT NOTES COMPUT SC, V523, P124
   MEIJER E, 1995, LECT NOTES COMPUTER, V925, P228
   MOGGI E, 1991, INFORM COMPUT, V93, P55, DOI 10.1016/0890-5401(91)90052-4
   MOGGI E, 1990, ECSLFCS90113
   Sheard T, 2004, J FUNCT PROGRAM, V14, P547, DOI 10.1017/S095679680300488X
   Sheard T., 1997, Proceedings of the ACM SIGPLAN Symposium on Partial Evaluation and Semantics-Based Program Manipulation, PEPM '97, P22, DOI 10.1145/258993.258999
   STEELE G, 1994, P ACM S PRINC PROGR, P472
   Visser Eelco., 2001, REWRITING TECHNIQUES, V2051, P357, DOI DOI 10.1007/3-540-45127-7_27.URL
   WADLER P, 1990, PROCEEDINGS OF THE 1990 ACM CONFERENCE ON LISP AND FUNCTIONAL PROGRAMMING, P61, DOI 10.1145/91556.91592
   WADLER P, 1995, LNCS, V925, P24
   WEAVER P, 2007, P INT C GEN PROGR CO, P155
NR 38
TC 0
Z9 0
U1 0
U2 2
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUL 1
PY 2010
VL 75
IS 7
SI SI
BP 543
EP 572
DI 10.1016/j.scico.2009.12.007
PG 30
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 603YE
UT WOS:000278243200005
DA 2024-07-18
ER

PT J
AU Weber, B
   Mutschler, B
   Reichert, M
AF Weber, Barbara
   Mutschler, Bela
   Reichert, Manfred
TI Investigating the effort of using business process management
   technology: Results from a controlled experiment
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Process-aware information system; Workflow management; Case handling;
   Controlled experiment; Information systems engineering
ID CHANGE SUPPORT FEATURES; INFORMATION-SYSTEMS; CHANGE PATTERNS; DYNAMIC
   CHANGES; COST FACTORS; MODELS
AB Business Process Management (BPM) technology has become an important instrument for supporting complex coordination scenarios and for improving business process performance. When considering its use, however, enterprises typically have to rely on vendor promises or qualitative reports. What is still missing and what is demanded by IT decision makers are quantitative evaluations based on empirical and experimental research. This paper picks up this demand and illustrates how experimental research can be applied to technologies enabling enterprises to coordinate their business processes and to associate them with related artifacts and resources. The conducted experiment compares the effort for implementing and maintaining a sample business process either based on standard workflow technology or on a case handling system. We motivate and describe the experimental design, discuss threats for the validity of our experimental results (as well as risk mitigations), and present the results of our experiment. In general, more experimental research is needed in order to obtain valid data on the various aspects and effects of BPM technology and BPM tools. (C) 2009 Elsevier B.V. All rights reserved.
C1 [Weber, Barbara] Univ Innsbruck, Dept Comp Sci, A-6020 Innsbruck, Austria.
   [Mutschler, Bela] Hsch Ravensburg Weingarten, D-88241 Weingarten, Germany.
   [Reichert, Manfred] Univ Ulm, Inst Databases & Informat Syst, D-89069 Ulm, Germany.
C3 University of Innsbruck; Ulm University
RP Weber, B (corresponding author), Univ Innsbruck, Dept Comp Sci, Technikerstr 21A, A-6020 Innsbruck, Austria.
EM barbara.weber@uibk.ac.at; bela.mutschler@hs-weingarten.de;
   manfred.reichert@uni-ulm.de
RI Reichert, Manfred U/ABB-4469-2020
OI Weber, Barbara/0000-0002-6004-4860
CR [Anonymous], 2003, Proceedings of the 7th International Conference on Empirical Assessment in Software Engineering
   [Anonymous], P 14 INT C SOFTW ENG
   [Anonymous], IEEE COMPUTER
   [Anonymous], 2004, Workflow Management: Models, Methods, and Systems
   [Anonymous], 2019, Business Process Management: Concepts, Languages, Architectures
   Barros A, 2005, LECT NOTES COMPUT SC, V3649, P302, DOI 10.1007/11538394_20
   BASILI VR, 1986, IEEE T SOFTWARE ENG, V12, P733, DOI 10.1109/TSE.1986.6312975
   BASILI VR, 1988, IEEE T SOFTWARE ENG, V14, P758, DOI 10.1109/32.6156
   Choenni S., 2003, ELECT J INFORM SYSTE, V6
   Dehnert J, 2004, INT J COOP INF SYST, V13, P289, DOI 10.1142/S0218843004000973
   Dumas M, 2005, PROCESS-AWARE INFORMATION SYSTEMS: BRIDGING PEOPLE AND SOFTWARE THROUGH PROCESS TECHNOLOGY, P1, DOI 10.1002/0471741442
   Juristo N., 2013, BASICS SOFTWARE ENG
   Lott C. M., 1996, Empirical Software Engineering, V1, P241, DOI 10.1007/BF00127447
   Mutschler B, 2008, LECT NOTES COMPUT SC, V5074, P510
   Mutschler B, 2008, IEEE T SYST MAN CY C, V38, P280, DOI 10.1109/TSMCC.2008.919197
   Mutschler B, 2007, LECT NOTES COMPUT SC, V4495, P589
   MYERS GJ, 1978, COMMUN ACM, V21, P760, DOI 10.1145/359588.359602
   Puhlmann R, 2005, LECT NOTES COMPUT SC, V3649, P153, DOI 10.1007/11538394_11
   Reason P., 2006, Handbook of Action Research: Concise Paperback Edition
   Reichert M, 2005, PROC INT CONF DATA, P1113
   Reichert M, 1998, J INTELL INF SYST, V10, P93, DOI 10.1023/A:1008604709862
   Reijers HA, 2005, INT J INFORM MANAGE, V25, P458, DOI 10.1016/j.ijinfomgt.2005.06.008
   Rinderle S, 2004, DATA KNOWL ENG, V50, P9, DOI 10.1016/j.datak.2004.01.002
   Rinderle S, 2004, DISTRIB PARALLEL DAT, V16, P91, DOI 10.1023/B:DAPD.0000026270.78463.77
   Rinderle-Ma S, 2008, LECT NOTES COMPUT SC, V5231, P279, DOI 10.1007/978-3-540-87877-3_21
   Russell N., 2006, Workflow Control-Flow Patterns: A Revised View
   RUSSELL N, 2004, FITTR200401 QUEENSL
   Russell N, 2006, LECT NOTES COMPUT SC, V4001, P288, DOI 10.1007/11767138_20
   Scheer A.W., 1999, ARIS BUSINESS PROCES
   Sheskin D. J., 2000, Handbook of Parametric and Nonparametric Statistical Procedures
   Sjoberg DIK, 2005, IEEE T SOFTWARE ENG, V31, P733, DOI 10.1109/TSE.2005.97
   van der Aalst WMP, 2005, DATA KNOWL ENG, V53, P129, DOI 10.1016/j.datak.2004.07.003
   Van der Aalst WMP, 2003, DISTRIB PARALLEL DAT, V14, P5, DOI 10.1023/A:1022883727209
   Weber B, 2008, DATA KNOWL ENG, V66, P438, DOI 10.1016/j.datak.2008.05.001
   Weber B, 2008, LECT NOTES COMPUT SC, V5074, P124
   Weber B, 2007, LECT NOTES COMPUT SC, V4495, P574
   Wohed P, 2006, LECT NOTES COMPUT SC, V4102, P161
   Wohlin C., 2000, EXPT SOFTWARE ENG IN
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
NR 55
TC 22
Z9 23
U1 0
U2 9
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAY 1
PY 2010
VL 75
IS 5
SI SI
BP 292
EP 310
DI 10.1016/j.scico.2009.12.003
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 583YV
UT WOS:000276717500002
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Cornélio, M
   Cavalcanti, A
   Sampaio, A
AF Cornelio, Marcio
   Cavalcanti, Ana
   Sampaio, Augusto
TI Sound refactorings
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Refactoring; Formal methods; Refinement calculus; Object-oriented
   programming
ID WEAKEST PRECONDITION SEMANTICS; PROGRAMS
AB Refactoring consists in restructuring an object-oriented program without changing its behaviour. In this paper, we present refactorings as transformation rules for programs written in a refinement language inspired on Java that allows reasoning about object-oriented programs and specifications. A set of programming laws is available for the imperative constructs of this language as well as for its object-oriented features; soundness of the laws is proved against a weakest precondition semantics, The proof that the refactoring rules preserve behaviour (semantics) is accomplished by the application of these programming laws and data simulation. As illustration of our approach to refactoring, we use our rules to restructure a program to be in accordance with a design pattern. (C) 2009 Elsevier B.V. All rights reserved.
C1 [Cornelio, Marcio] Univ Pernambuco, Dept Sistemas & Computacao, BR-50720001 Recife, PE, Brazil.
   [Cavalcanti, Ana] Univ York, Dept Comp Sci, York Y010 5DD, N Yorkshire, England.
   [Sampaio, Augusto] Univ Fed Pernambuco, Ctr Informat, BR-50740540 Recife, PE, Brazil.
C3 Universidade de Pernambuco (UPE); University of York - UK; Universidade
   Federal de Pernambuco
RP Cornélio, M (corresponding author), Univ Pernambuco, Dept Sistemas & Computacao, BR-50720001 Recife, PE, Brazil.
EM marciocornelio@acm.org; Ana.Cavalcanti@cs.york.ac.uk; acas@cin.ufpe.br
RI Ines, INCT/J-9550-2013
OI Cavalcanti, Ana Lucia Caneca/0000-0002-0831-1976
FU EPSRC [EP/H017461/1] Funding Source: UKRI
CR [Anonymous], 1997, Object-oriented software construction
   [Anonymous], 1994, ADDISON WESLEY PROFE
   Arnold Ken., 1996, The Java Programming Language
   Back R. J. R., 1987, PROCEDURAL ABSTRAC A
   Banerjee A, 2005, LECT NOTES COMPUT SC, V3586, P387
   BANNWART F, 2006, THESIS ETH ZURICH
   Bannwart F, 2006, LECT NOTES COMPUT SC, V4085, P492
   Binkley D., 1996, Advances in Computers, V43, P1
   Borba P, 2004, SCI COMPUT PROGRAM, V52, P53, DOI 10.1016/j.scico.2004.03.003
   Borba P, 2003, LECT NOTES COMPUT SC, V2743, P457
   Cavalcanti A, 2000, IEEE T SOFTWARE ENG, V26, P713, DOI 10.1109/32.879810
   Cavalcanti A, 1999, LECT NOTES COMPUT SC, V1709, P1439
   CAVALCANTI ALC, 2002, LNCS, V2391, P471
   Cavalcanti A, 2006, LECT NOTES COMPUT SC, V4010, P200
   CINNEIDE MO, 2000, THESIS TRINITY COLL
   Cornélio M, 2005, ELECTRON NOTES THEOR, V130, P281, DOI 10.1016/j.entcs.2005.03.015
   CORNELIO ML, 2004, THESIS U FEDERAL PER
   Cornelis K, 2002, CERN REPORT, V2002, P11
   de Freitas L, 2007, J UNIVERS COMPUT SCI, V13, P721
   Dijkstra E. W., 1976, A Discipline of Pro-gramming
   EKMAN T, 2008, REFACTORING BUGS
   Ettinger R., 2006, THESIS U OXFORD
   Fowler M., 2018, Refactoring: Improving the Design of Existing Code
   Hoare C. A. R., 1998, Unifying Theories of Programming
   HOARE CAR, 1987, COMMUN ACM, V30, P672, DOI 10.1145/27651.27653
   JUNIOR AC, 2007, ELECT NOTES THEORETI, V184, P39, DOI DOI 10.1016/J.ENTCS.2007.03.014
   Kniesel G, 2004, SCI COMPUT PROGRAM, V52, P9, DOI 10.1016/j.scico.2004.03.002
   Lakhotia A, 1998, INFORM SOFTWARE TECH, V40, P677, DOI 10.1016/S0950-5849(98)00091-3
   MARLOWE TJ, 1990, ACTA INFORM, V28, P121, DOI 10.1007/BF01237234
   MARUYAMA K, 2001, SSR 01, P31, DOI DOI 10.1145/375212.375233
   Mens T, 2005, J SOFTW MAINT EVOL-R, V17, P247, DOI 10.1002/smr.316
   Morgan C.C., 1988, TECHNICAL MONOGRAPH
   Morgan Carroll, 1994, Programming from specifications
   Nakagawa A., 1999, CAFEOBJ USERS MANUAL
   Opdyke W. F., 1992, Refactoring object-oriented frameworks
   PHILIPPS J, 2001, P 10 OOPSLA WORKSH B
   Roberts D., 1999, Ph. D. Dissertation
   Santos T, 2006, LECT NOTES COMPUT SC, V4010, P18
   SRIDHARAN M, 2006, PLDI 06, P387
   TIP F, 1995, J PROGRAM LANG, V3, P121
   TOKUDA LA, 1999, THESIS U TEXAS AUSTI
   [No title captured]
   2009, ECLIPSE ORG ECLIPSE
NR 43
TC 14
Z9 15
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR
PY 2010
VL 75
IS 3
BP 106
EP 133
DI 10.1016/j.scico.2009.10.001
PG 28
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 561LD
UT WOS:000274977800002
DA 2024-07-18
ER

PT J
AU Hoang, TS
   Kuruma, H
   Basin, D
   Abrial, JR
AF Hoang, Thai Son
   Kuruma, Hironobu
   Basin, David
   Abrial, Jean-Raymond
TI Developing topology discovery in Event-B
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Formal methods; Routing; Refinement; Event-B; Topology discovery
ID VERIFICATION; PROTOCOLS
AB We present a formal development in Event-B of a distributed topology discovery algorithm. Distributed topology discovery is at the core of several routing algorithms and is the problem of each node in a network discovering and maintaining information on the network topology. One of the key challenges in developing this algorithm is specifying the problem itself We provide a specification that includes both safety properties, formalizing invariants that should hold in all system states, and liveness properties that characterize when the system reaches stable states. We prove these properties by appropriately combining proofs of invariants, event refinement, event convergence, and deadlock freedom. The combination of these features is novel and should be useful for formalizing and developing other kinds of semi-reactive systems, which are systems that react to, but do not modify, their environment. Our entire development has been formalized and machine checked using the Rodin tool. (C) 2009 Elsevier B.V. All rights reserved.
C1 [Hoang, Thai Son; Basin, David; Abrial, Jean-Raymond] ETH, Dept Comp Sci, Zurich, Switzerland.
   [Kuruma, Hironobu] Hitachi Syst Dev Lab, Yokohama, Kanagawa, Japan.
C3 Swiss Federal Institutes of Technology Domain; ETH Zurich; Hitachi
   Limited
RP Basin, D (corresponding author), ETH, Dept Comp Sci, Zurich, Switzerland.
EM basin@inf.ethz.ch
RI Hoang, Thai Son/H-6159-2019
OI Hoang, Thai Son/0000-0003-4095-0732
CR Abrial J.-R., 2003, Formal Aspects of Computing, V14, P215, DOI 10.1007/s001650300002
   Abrial J.-R., 1996, B BOOK ASSIGNING PRO
   Abrial Jean-Raymond, 2006, ICFEM 2006, V4260, P588
   ABRIAL JR, 2009, MODELING EV IN PRESS
   ABRIAL JR, 2006, APPL EVENT B, V21
   [Anonymous], IEEE S WIR PERS MOB
   [Anonymous], 2003, RFC3626
   [Anonymous], 2003, The Spin Model Checker: Primer and Reference Manual
   BACK RJR, 1989, DISTRIB COMPUT, V3, P73, DOI 10.1007/BF01558665
   Baier C, 2008, PRINCIPLES OF MODEL CHECKING, P1
   BAO JJL, 1999, P 8 INT C COMPC OMM, P358
   Bhargavan K, 2002, J ACM, V49, P538, DOI 10.1145/581771.581775
   Clausen T., 2003, REQUEST COMMENTS
   Devillers M, 2000, FORM METHOD SYST DES, V16, P307, DOI 10.1023/A:1008764923992
   DIJKSTRA EW, 1974, COMMUN ACM, V17, P643, DOI 10.1145/361179.361202
   Dijkstra EW., 1959, NUMER MATH, V1, P269, DOI [10.1007/BF01386390, DOI 10.1007/BF01386390]
   GOUDA MG, 1991, IEEE T COMPUT, V40, P448, DOI 10.1109/12.88464
   LAMPORT L, 1994, ACM T PROGR LANG SYS, V16, P872, DOI 10.1145/177492.177726
   Lynch N. A., 1996, DISTRIBUTED ALGORITH
   MANNA Z, 1991, THEOR COMPUT SCI, V83, P97, DOI 10.1016/0304-3975(91)90041-Y
   Moreau L, 2001, SCI COMPUT PROGRAM, V39, P249, DOI 10.1016/S0167-6423(00)00011-3
   Moy J., 1994, OSPF Version 2
   Moy J. T., 1998, OSPF: Anatomy of an Internet Routing Protocol
   MUSUVATHI M, 2002, OSDI 02, P75
   SHANKAR AU, 1992, ACM T PROGR LANG SYS, V14, P417, DOI 10.1145/129393.129394
   Tanenbaum A.S., 2002, COMPUT NETW, VFourth
   TEL G, 2001, INTRO DISTRIBUTED AL
NR 27
TC 13
Z9 13
U1 0
U2 5
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV
PY 2009
VL 74
IS 11-12
BP 879
EP 899
DI 10.1016/j.scico.2009.07.006
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 533IX
UT WOS:000272818200001
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Würthinger, T
   Wimmer, C
   Mössenböck, H
AF Wuerthinger, Thomas
   Wimmer, Christian
   Moessenboeck, Hanspeter
TI Array bounds check elimination in the context of deoptimization
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Java; Array bounds check elimination; Just-in-time compilation;
   Optimization; Performance
AB Whenever an array element is accessed, Java virtual machines execute a compare instruction to ensure that the index value is within the valid bounds. This reduces the execution speed of Java programs. Array bounds check elimination identifies situations in which such checks are redundant and can be removed. We present an array bounds check elimination algorithm for the Java HotSpot(TM) VM based on static analysis in the just-in-time compiler.
   The algorithm works on an intermediate representation in static single assignment form and maintains conditions for index expressions. It fully removes bounds checks if it can be proven that they never fail. Whenever possible, it moves bounds checks out of loops. The static number of checks remains the same, but a check inside a loop is likely to be executed more often. If such a check fails, the executing program falls back to interpreted mode, avoiding the problem that an exception is thrown at the wrong place.
   The evaluation shows a speedup near to the theoretical maximum for the scientific SciMark benchmark suite and also significant improvements for some Java Grande benchmarks. The algorithm slightly increases the execution speed for the SPEQvm98 benchmark suite. The evaluation of the DaCapo benchmarks shows that array bounds checks do not have a significant impact on the performance of object-oriented applications. (C) 2009 Elsevier B.V. All rights reserved.
C1 [Wuerthinger, Thomas; Wimmer, Christian; Moessenboeck, Hanspeter] Johannes Kepler Univ Linz, Inst Syst Software, Christian Doppler Lab Automated Software Engn, Linz, Austria.
C3 Johannes Kepler University Linz
RP Würthinger, T (corresponding author), Johannes Kepler Univ Linz, Inst Syst Software, Christian Doppler Lab Automated Software Engn, Linz, Austria.
EM wuerthinger@ssw.jku.at; wimmer@ssw.jku.at; moessenboeck@ssw.jku.at
RI Mössenböck, Hanspeter/C-6203-2013
OI Mössenböck, Hanspeter/0000-0001-7706-7308
CR AGGARWAL A, 2001, P ACM SIGPLAN C PROG, P214
   Blackburn Stephen M., 2006, P 21 ANN ACM SIGPLAN, DOI [10.1145/1167473.1167488, DOI 10.1145/1167473.1167488, DOI 10.1145/1167515.1167488, 10.1145/1167515.1167488]
   Bodik R, 2000, ACM SIGPLAN NOTICES, V35, P321, DOI 10.1145/358438.349342
   Briggs P, 1997, SOFTWARE PRACT EXPER, V27, P701, DOI 10.1002/(SICI)1097-024X(199706)27:6<701::AID-SPE104>3.0.CO;2-0
   Bull JM, 2000, CONCURRENCY-PRACT EX, V12, P375, DOI 10.1002/1096-9128(200005)12:6<375::AID-CPE480>3.0.CO;2-M
   Burke M. G., 1999, Proceedings of the ACM 1999 Java Grande Conference, P129, DOI 10.1145/304065.304113
   CLICK C, 1995, ACM SIGPLAN WORKSH I, P35
   CYTRON R, 1991, ACM T PROGR LANG SYS, V13, P451, DOI 10.1145/115372.115320
   DMITRIEV M, 2001, TR200198 SUN MICR IN
   Ghemawat S, 2000, ACM SIGPLAN NOTICES, V35, P334, DOI 10.1145/358438.349343
   GRIESEMER R, 2000, SCH N WIRTH ART SIMP, P133
   GUPTA R, 1990, SIGPLAN NOTICES, V25, P272, DOI 10.1145/93548.93581
   Gupta R., 1993, ACM Letters on Programming Languages and Systems, V2, P135, DOI 10.1145/176454.176507
   HOLZLE U, 1992, P ACM SIGPLAN C PROG, P32, DOI DOI 10.1145/143095.143114
   HOLZLE U, 1994, P ACM SIGPLAN 94 C P, P326, DOI DOI 10.1145/178243.178478
   Hummel J, 1997, CONCURRENCY-PRACT EX, V9, P1003, DOI 10.1002/(SICI)1096-9128(199711)9:11<1003::AID-CPE346>3.0.CO;2-G
   Kawahito M, 2000, ACM SIGPLAN NOTICES, V35, P139, DOI 10.1145/384264.379234
   Kotzmann T, 2008, ACM T ARCHIT CODE OP, V5, DOI 10.1145/1369396.1370017
   MIKHEEV VV, 2002, LNCS, V2304, P101
   Paleczny M, 2001, USENIX ASSOCIATION PROCEEDINGS JAVA(TM) VIRTUAL MACHINE RESEARCH AND TECHNOLOGY SYMPOSIUM, P1
   POZO R, 1999, SCIMARK 2 0
   Qian F, 2002, LECT NOTES COMPUT SC, V2304, P325
   *STAND PERF EV COR, 1998, SPECJVM98 BENCHM
   *SUN MICR INC, 2007, JAV PLATF STAND ED 7
   *SUN MICR INC, 2007, JAV PLATF DEB ARCH
   Wimmer Christian., 2005, P ACMUSENIX INT C VI, P132
   Wurthinger Thomas., 2007, PPPJ 07, P125
   XI H, 1999, P CASCOON 99 NOV, P110
NR 28
TC 7
Z9 8
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR 1
PY 2009
VL 74
IS 5-6
SI SI
BP 279
EP 295
DI 10.1016/j.scico.2009.01.002
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 436CT
UT WOS:000265390900003
OA Bronze
DA 2024-07-18
ER

PT J
AU Chung, MH
AF Chung, Myung-Hoon
TI Science Code .Net: Object-oriented programming for science
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE object-oriented programming; .NET; C#; framework design; numerical
   recipes; physical sciences
ID FRAMEWORK; DESIGN; JAVA
AB We propose an object-oriented programming library system for Science in a similar structure of NET framework. We call the system Science Code .Net. Presenting rules of thumb, we show how to enhance readability of Science Code .Net. As an initial progress, several namespaces have been constructed. We explain the structure of classes in each namespace. As a challenge to the programming community, a perspective view of Science Code .Net is discussed. (C) 2008 Elsevier B.V. All rights reserved.
C1 Hongik Univ, Coll Sci & Technol, Shinan Li 339800, Choongnam, South Korea.
C3 Hongik University
RP Chung, MH (corresponding author), Hongik Univ, Coll Sci & Technol, Shinan Li 339800, Choongnam, South Korea.
EM mhchung@hongik.ac.kr
CR Abrahamyan S, 2000, COMPUT PHYS COMMUN, V132, P224, DOI 10.1016/S0010-4655(00)00150-8
   Chekanov S, 2005, COMPUT PHYS COMMUN, V173, P175, DOI 10.1016/j.cpc.2005.03.114
   Chung MH, 2004, INT J MOD PHYS C, V15, P185, DOI 10.1142/S0129183104005607
   Cunningham HC, 2006, SCI COMPUT PROGRAM, V59, P147, DOI 10.1016/j.scico.2005.07.009
   De Raedt H, 2003, COMPUT PHYS COMMUN, V156, P43, DOI 10.1016/S0010-4655(03)00414-4
   Decyk VK, 2004, COMPUT PHYS COMMUN, V164, P80, DOI 10.1016/j.cpc.2004.06.011
   Lang S., 1987, LINEAR ALGEBRA
   Lang S., 1986, 1 COURSE CALCULUS, V5ta
   *MICR, NET HOM
   *NETL, REP UTK ORNL
   Rajsbaum S, 2005, SCI COMPUT PROGRAM, V54, P25, DOI 10.1016/j.scico.2004.05.004
NR 11
TC 2
Z9 2
U1 0
U2 4
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAY 1
PY 2008
VL 71
IS 3
BP 242
EP 247
DI 10.1016/j.scico.2008.01.003
PG 6
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 322VD
UT WOS:000257402500004
OA Bronze
DA 2024-07-18
ER

PT J
AU Gruhn, V
   Laue, R
AF Gruhn, Volker
   Laue, Ralf
TI What business process modelers can learn from programmers
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE business process modeling; modeling style; style rules
AB For building business process models (BPM), business process analysts usually use graphical languages like BPNM or UML. One purpose of such models is to serve as a base for communication between the stakeholders in the software development process. Furthermore, modern model-centric software engineering approaches have the potential to enable the generation of software directly from the models. For these reasons, the quality of BPMs is critical for the success of software development. This raises the question, how we can benefit from well-established practices for improving the quality of software if we switch from code-centric to BPM-centric software engineering. In this article, we discuss how to apply concepts comparable to structured programming" to BPMs. The main contribution is a discussion of the benefits of style checking for improving the quality of BPMs.
   By analyzing 285 BPMs (modeled as Event Driven Process Chains (EPC)), we found that checking restrictions for "good modeling style" has three positive effects: It can improve the quality of the BPM by substituting "bad constructs" automatically. it helps to identify erroneous models and it can make model-to-code transformations much easier. (c) 2006 Elsevier B.V. All rights reserved.
C1 Univ Leipzig, Fac Comp Sci, D-04109 Leipzig, Germany.
C3 Leipzig University
RP Gruhn, V (corresponding author), Univ Leipzig, Fac Comp Sci, Klostergasse 3, D-04109 Leipzig, Germany.
EM gruhn@ebus.informatik.uni-leipzig.de;
   laue@ebus.informatik.uni-leipzig.de
CR Ambler SW., 2003, ELEMENTS UML STYLE
   Cardoso Jorge., 2005, The Workflow Handbook, P199
   Cuntz N., 2004, EPK 2004 GESCHAFTSPR, P7
   Cuntz N., 2005, EPK 2005, P7
   Dehnert J, 2004, INT J COOP INF SYST, V13, P289, DOI 10.1142/S0218843004000973
   Dijkstra E., 1969, Notes on structured programming
   DIJKSTRA EW, 1968, COMMUN ACM, V11, P147, DOI 10.1145/362929.362947
   GAMMA E, 1993, LECT NOTES COMPUTER, V707, P406, DOI DOI 10.1007/3-540-47910-4_21
   GRONBACK R, 2004, BORL C 11 15 SEPT SA
   GRUHN V, 2006, BIS 2006
   GRUHN V, 2005, GESCHAFTSPROZESSMANA, P176
   HOLL A, 2004, INFORM SYSTEMS RES S, V27
   Kernighan BrianW., 1982, ELEMENTS PROGRAMMING
   Kiepuszewski B, 2000, LECT NOTES COMPUT SC, V1789, P431
   Kindler E, 2004, LECT NOTES COMPUT SC, V3080, P82
   KONING H, 2002, SIGDOC 02 P 20 ANN I, P90
   LANGNER P, RELATING EVENT DRIVE
   Liu R, 2005, LECT NOTES COMPUT SC, V3649, P268, DOI 10.1007/11538394_18
   Mendling J., 2006, BPM-06-08, BPM Center Report
   MOTSCHNIGPITRIK R, 2002, 10 EUR C INF SYST EC
   Reichert M, 1998, J INTELL INF SYST, V10, P93, DOI 10.1023/A:1008604709862
   Rittgen P, 2002, ISSUES AND TRENDS OF INFORMATION TECHNOLOGY MANAGEMENT IN CONTEMPORARY ORGANIZATIONS, VOLS 1 AND 2, P679
   Rittgen P, 2000, WIRTSCHAFTSINF, V42, P27, DOI 10.1007/BF03250714
   Scheer August-Wilhelm., 1994, BUSINESS PROCESS ENG
   STORRLE H, 2004, S VIS LANG HUM CENTR, P235
   THOM LH, 2005, XML4BPM 2005 P 2 GL, P65
   Van der Aalst WMP, 1998, J CIRCUIT SYST COMP, V8, P21, DOI 10.1142/S0218126698000043
   van der Aalst WMP, 1999, INFORM SOFTWARE TECH, V41, P639, DOI 10.1016/S0950-5849(99)00016-6
   van derAalst W MP., 2002, EPK 2002 BUSINESS PR, P71
   van Dongen BF, 2005, LECT NOTES COMPUT SC, V3520, P372
   VANDONGEN BF, 2005, BETA WORKING PAPER S
   WYNN MT, 2005, ICATPN, P423
NR 32
TC 38
Z9 40
U1 2
U2 7
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR 1
PY 2007
VL 65
IS 1
BP 4
EP 13
DI 10.1016/j.scico.2006.08.003
PG 10
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 144CB
UT WOS:000244771700003
DA 2024-07-18
ER

PT J
AU Gulwani, S
   Necula, GC
AF Gulwani, Sumit
   Necula, George C.
TI A polynomial-time algorithm for global value numbering
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 11th International Static Analysis Symposium (SAS 2004)
CY AUG 26-28, 2004
CL Verona, ITALY
DE global value numbering; uninterpreted functions; abstract
   interpretation; Herbrand equivalence
AB We describe a polynomial-time algorithm for global value numbering, which is the problem of discovering equivalences among program sub-expressions. We treat all conditionals as non-deterministic and all program operators as uninterpreted. We show that there are programs for which the set of all equivalences contains terms whose value graph representation requires exponential size. Our algorithm discovers all equivalences among terms of size at most s in time that grows linearly with s. For global value numbering, it suffices to choose s to be the size of the program. Earlier deterministic algorithms for the same problem are either incomplete or take exponential time. We provide a detailed analytical comparison of some of these algorithms. (c) 2006 Elsevier B.V. All rights reserved.
C1 Microsoft Corp, Redmond, WA 98052 USA.
   Univ Calif Berkeley, Dept Comp Sci, Berkeley, CA 94720 USA.
C3 Microsoft; University of California System; University of California
   Berkeley
RP Gulwani, S (corresponding author), Microsoft Corp, 1 Microsoft Way, Redmond, WA 98052 USA.
EM sumitg@microsoft.com; necula@cs.berkeley.edu
CR Alpern B., 1988, Conference Record of the Fifteenth Annual ACM Symposium on Principles of Programming Languages, P1, DOI 10.1145/73560.73561
   CLICK C, 1995, SIGPLAN NOTICES, V30, P246, DOI 10.1145/223428.207154
   COUSOT P, 1977, 4 ANN ACM S PRINC PR, P234
   CYTRON R, 1991, ACM T PROGR LANG SYS, V13, P451, DOI 10.1145/115372.115320
   Gargi K, 2002, ACM SIGPLAN NOTICES, V37, P45, DOI 10.1145/543552.512536
   GULWANI S, 2004, LNCWS, V3328
   GULWANI S, 2004, 31 ANN ACM S POPL AC
   Kildall G. A., 1973, Conference Record of ACM Symposium on Principles of Programming Languages, P194
   Muchnick StevenS., 2000, ADV COMPILER DESIGN
   MULLEROLM M, 2005, LNCS, V3385
   MULLEROLM M, 2005, LNCS
   Necula G. C., 2000, SIGPLAN Notices, V35, P83, DOI 10.1145/358438.349314
   PNEULI A, 1998, LNCS, V1384, P151
   ROSEN BK, 1988, 15TH POPL SAN DIEG, P12
   Rüthing O, 1999, LECT NOTES COMPUT SC, V1694, P232
   RUTHING O, 1990, LNCS, V432, P389
   WEGMAN MN, 1991, ACM T PROGR LANG SYS, V13, P181, DOI 10.1145/103135.103136
NR 17
TC 2
Z9 2
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 1
PY 2007
VL 64
IS 1
BP 97
EP 114
DI 10.1016/j.scico.2006.03.005
PG 18
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 118ES
UT WOS:000242925700006
DA 2024-07-18
ER

PT J
AU Veerman, N
AF Veerman, Niels
TI Automated mass maintenance of a software portfolio
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE software maintenance; reengineering; cobol; software portfolio; mass
   modification; mass maintenance; mass update; automated maintenance;
   tool-supported maintenance; automatic transformations
ID RENOVATION FACTORIES; LEGACY ASSETS; TRANSFORMATIONS; SYSTEMS; CODE; TXL
AB This is an experience report on automated mass maintenance of a large Cobol software portfolio. A company in the financial services and insurance industry upgraded their database system to a new version, affecting their entire software portfolio. The database system was accessed by the portfolio of 45 systems, totalling nearly 3000 programs and covering over 4 million lines of Cobol code. We upgraded the programs to the new database version using several automatic tools, and we performed an automated analysis supporting further manual modifications by the system experts. The automatic tools were built using a combination of lexical and syntactic technology, and they were deployed in a mass update factory to allow large-scale application to the software portfolio. The updated portfolio has been accepted and taken into production by the company, serving over 600 employees with the new database version. In this paper, we discuss the automated upgrade from problem statement to project costs. (c) 2006 Elsevier B.V. All rights reserved.
C1 Vrije Univ Amsterdam, Dept Comp Sci, NL-1081 HV Amsterdam, Netherlands.
C3 Vrije Universiteit Amsterdam
RP Veerman, N (corresponding author), Vrije Univ Amsterdam, Dept Comp Sci, Boelelaan 1081A, NL-1081 HV Amsterdam, Netherlands.
EM nveerman@cs.vu.nl
CR [Anonymous], P 2 INT WORKSH THEOR
   BAXTER ID, 1992, COMMUN ACM, V35, P73, DOI 10.1145/129852.129859
   BAXTER ID, 2004, P INT C SOFTW MAINT
   BENNETT KH, 2004, P 8 EUR WORK C SOFTW
   Bergstra J.A., 1989, ALGEBRAIC SPECIFICAT, P1
   Blasband D, 2001, EIGHTH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P291, DOI 10.1109/WCRE.2001.957834
   BOYLE J, 1998, J AUTOMATED SOFTWARE, V5, P321
   BOYLE JM, 1998, 2 IR WORKSH FORM MET
   Brunekreef J, 2002, SCI COMPUT PROGRAM, V45, P175, DOI 10.1016/S0167-6423(02)00060-6
   *CALCE, COMP AID LIF CYCL EN
   CORDY JR, 1991, COMPUT LANG, V16, P97, DOI 10.1016/0096-0551(91)90019-6
   Cordy JR, 2002, INFORM SOFTWARE TECH, V44, P827, DOI 10.1016/S0950-5849(02)00104-0
   Ebert J., 2002, ELECT NOTES THEORETI, V72
   EIDORFF PH, 1999, ACM SIGPLAN NOTICES, P1
   *ELTIS, EXT LIF INF SYST
   Faust D, 2003, SOFTWARE PRACT EXPER, V33, P933, DOI 10.1002/spe.530
   Fokkink W, 1999, LECT NOTES COMPUT SC, V1577, P98
   FREEDMAN DP, 1982, HDB WALKTHROUGHS INS
   HALL B, 1996, S TXP 96 IT REV CONT
   HEERING J, 1989, SIGPLAN NOTICES, V24, P43, DOI 10.1145/71605.71607
   Jones C., 1999, SOFTWARE PROJECT MAN
   JONES N, 1998, YEAR 2000 MARKET OVE
   Klint P, 2005, ACM T SOFTW ENG METH, V14, P331, DOI 10.1145/1072997.1073000
   Klint P., 1993, ACM Transactions on Software Engineering and Methodology, V2, P176, DOI 10.1145/151257.151260
   Klusener AS, 2005, SCI COMPUT PROGRAM, V54, P143, DOI 10.1016/j.scico.2004.03.012
   Klusener AS, 2004, SOFTWARE QUAL J, V12, P297, DOI 10.1023/B:SQJO.0000039790.04885.13
   Klusener S, 2003, PROC IEEE INT CONF S, P373, DOI 10.1109/ICSM.2003.1235445
   Kort J., 2002, ELECT NOTES THEORETI, V65
   Krause A., 2000, BASICS S S PLUS, V2nd
   Lämmel R, 2001, SOFTWARE PRACT EXPER, V31, P1395, DOI 10.1002/spe.423
   Lämmel R, 2001, IEEE SOFTWARE, V18, P78, DOI 10.1109/52.965809
   LAMMEL R, 2001, LNCS, V2021, P550
   LAMMEL R, 1999, VS COBOL 2 GRAMMAR V
   LAMMEL R, 2004, SCI COMPUTER PROGRAM, V52
   LINOS PK, 2004, P 20 IEEE INT C SOFT
   *PROJ BAUH, SOFTW ARCH SOFTW REE
   SCHWARTZ RL, 1991, PROGRAMMING PERL
   Sellink A, 2002, SCI COMPUT PROGRAM, V45, P193, DOI 10.1016/S0167-6423(02)00061-8
   SELLINK A, 1999, 7 INT WORKSH PROGR C
   SELLINK MPA, 2000, P 4 EUR C SOFTW MAIN, P161
   Sneed H. M., 1999, Sixth Working Conference on Reverse Engineering (Cat. No.PR00303), P204, DOI 10.1109/WCRE.1999.806961
   Sneed HM, 1998, SECOND EUROMICRO CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, PROCEEDINGS, P2, DOI 10.1109/CSMR.1998.665726
   STOREY MA, 2003, P 10 WORK C REV ENG
   van den Brand M, 2000, SCI COMPUT PROGRAM, V36, P209, DOI 10.1016/S0167-6423(99)00037-4
   van den Brand M, 1998, SECOND EUROMICRO CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, PROCEEDINGS, P11, DOI 10.1109/CSMR.1998.665727
   Van Den Brand M., 1996, ACM Transactions on Software Engineering and Methodology, V5, P1, DOI 10.1145/226155.226156
   van den Brand M, 1998, PROG COMPREHEN, P108, DOI 10.1109/WPC.1998.693325
   van den Brand M., 2000, P RULE2000
   Van den Brand MGJ, 2003, ACM T SOFTW ENG METH, V12, P152, DOI 10.1145/941566.941568
   van Deursen A, 1999, LECT NOTES COMPUT SC, V1577, P1
   vandenBrand M, 1997, PROCEEDINGS OF THE FOURTH WORKING CONFERENCE ON REVERSE ENGINEERING, P144, DOI 10.1109/WCRE.1997.624585
   vandenBrand M, 1997, ACM SIGPLAN NOTICES, V32, P54, DOI 10.1145/251621.251633
   VANDENBRAND M, 1996, P 23 SEM CURR TRENDS, P235
   VANDENBRAND M, ASFPLUSSDF METAENVIR
   VANDENBRAND MGJ, 2006, C SOFTW MAINT REENG
   VANDENBRAND MGJ, 2001, LECT NOTES COMPUTER, V2027, P365
   VANDENBRAND MGJ, 1996, LECT NOTES COMPUTER, V1101, P9
   Veerman N, 2005, SCI COMPUT PROGRAM, V57, P129, DOI 10.1016/j.scico.2005.01.001
   Veerman N, 2004, J SOFTW MAINT EVOL-R, V16, P219, DOI 10.1002/smr.295
   VEERMAN N, 2006, IN PRESS SOFTWARE PR
   Verhoef C, 2005, SCI COMPUT PROGRAM, V56, P315, DOI 10.1016/j.scico.2004.08.004
   Verhoef C, 2000, ANN SOFTW ENG, V9, P315, DOI 10.1023/A:1018941228255
   Verhoef C, 2002, SCI COMPUT PROGRAM, V45, P1, DOI 10.1016/S0167-6423(02)00106-5
   VERHOEF C, REALITIES LARGE SOFT
   VISAGGIO G, 2004, P 12 IEEE INT WORKSH
   Visser Eelco., 1997, Scannerless Generalized-LR Parsing
   Ward MP, 2004, SCI COMPUT PROGRAM, V52, P213, DOI 10.1016/j.scico.2004.03.007
NR 67
TC 4
Z9 6
U1 0
U2 3
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 15
PY 2006
VL 62
IS 3
BP 287
EP 317
DI 10.1016/j.scico.2006.04.006
PG 31
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 078HA
UT WOS:000240092100005
OA Bronze
DA 2024-07-18
ER

PT J
AU Swamy, N
   Hicks, M
   Morrisett, G
   Grossman, D
   Jim, T
AF Swamy, Nikhil
   Hicks, Michael
   Morrisett, Greg
   Grossman, Dan
   Jim, Trevor
TI Safe manual memory management in Cyclone
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE memory management; unique pointers; reference counting; memory safety;
   regions; reaps; cyclone
AB The goal of the Cyclone project is to investigate how to make a low-level C-like language safe. Our most difficult challenge has been providing programmers with control over memory management while retaining safety. This paper describes our experience trying to integrate and use effectively two previously-proposed, safe memory-management mechanisms: statically-scoped regions and tracked pointers. We found that these typing mechanisms can be combined to build alternative memory-management abstractions, such as reference counted objects and arenas with dynamic lifetimes, and thus provide a flexible basis. Our experience - potting C programs and device drivers, and building new applications for resource-constrained systems - confirms that experts can use these features to improve memory footprint and sometimes to improve throughput when used instead of, or in combination with, conservative garbage collection. (c) 2006 Elsevier B.V. All rights reserved.
C1 Univ Maryland, Dept Comp Sci, College Pk, MD 20742 USA.
   Harvard Univ, Div Engn & Appl Sci, Cambridge, MA 02138 USA.
   Univ Washington, Dept Comp Sci & Engn, Seattle, WA 98195 USA.
   AT&T Labs Res, Florham Pk, NJ 07932 USA.
C3 University System of Maryland; University of Maryland College Park;
   Harvard University; University of Washington; University of Washington
   Seattle; AT&T
RP Swamy, N (corresponding author), Univ Maryland, Dept Comp Sci, AV Williams Bldg, College Pk, MD 20742 USA.
EM nswamy@cs.umd.edu; mwh@cs.umd.edu; greg@eecs.harvard.edu;
   djg@cs.washington.edu; trevor@research.att.com
OI Morrisett, John/0000-0002-2619-5614
CR Achten P., 1995, Journal of Functional Programming, V5, P81, DOI 10.1017/S0956796800001258
   AIKEN A, 1995, P ACM SIGPLAN C PROG, P174
   AIKEN A, 2003, PLDI 03, P129
   [Anonymous], 2001, P 2001 ACM SIGPLAN S, DOI DOI 10.1145/379605.379665
   [Anonymous], 1990, PROGRAMMING CONCEPTS
   BAKER HG, 1992, SIGPLAN NOTICES, V27, P89, DOI 10.1145/142137.142162
   BELLELLA G, 2000, REAL TIME SPECIFICAT
   BOEHM HJ, 1988, SOFTWARE PRACT EXPER, V18, P807, DOI 10.1002/spe.4380180902
   BOYAPATI C, 2003, P ACM SIGPLAN 2003 C, P324
   Boyland J, 2001, SOFTWARE PRACT EXPER, V31, P533, DOI 10.1002/spe.370
   CARDELLI L, 1991, P INT C THEOR ASP CO, P750
   Clarke D, 2003, LECT NOTES COMPUT SC, V2743, P176
   DeLine Robert., 2001, Proceedings of the ACM SIGPLAN 2001 conference on Programming language design and implementation, P59, DOI DOI 10.1145/381694.378811
   DEUTSCH LP, 1976, COMMUN ACM, V19, P522, DOI 10.1145/360336.360345
   FAHNDRICH M, 2002, PLDI 02, P13
   FLUET M, 2004, INF P SEM PROGR AN C
   GAY D, 2001, P ACM C PROGR LANG D, P70
   GROSSMAN D, 2002, P ACM C PROGR LANG D, P282, DOI DOI 10.1145/512529.512563
   GROSSMAN D, 2006, ACM T PROGRAMMING LA, V28
   GROSSMAN D, 2003, THESIS CORNELL U
   HALLENBERG N, 2002, P ACM C PROGR LANG D, P141
   HARMS DE, 1991, IEEE T SOFTWARE ENG, V17, P424, DOI 10.1109/32.90445
   HAWBLITZEL C, 2000, THESIS CORNELL U
   Henglein Fritz., 2001, Proceedings of the 3rd ACM SIGPLAN International Conference on Principles and Practice of Declarative Programming, P175, DOI [10.1145/773184.773203, DOI 10.1145/773184.773203]
   HERTZ M, 2005, P ACM C OBJ OR PROGR
   Hicks M, 2003, 2003 IEEE CONFERENCE ON OPEN ARCHITECTURES AND NETWORK PROGRAMMING PROCEEDINGS, P87, DOI 10.1109/OPNARC.2003.1196376
   Hicks Michael, 2004, P 4 INT S MEM MAN VA, P73, DOI DOI 10.1145/1029873.1029883
   Jim T, 2002, USENIX ASSOCIATION PROCEEDINGS OF THE GENERAL TRACK, P275
   Mazières D, 2001, USENIX ASSOCIATION PROCEEDINGS OF THE 2001 USENIX ANNUAL TECHNICAL CONFERENCE, P261
   Provos N., libevent - An Event Notification Library
   Smith F, 2000, LECT NOTES COMPUT SC, V1782, P366
   TERAUCHI T, 2004, UCBCSD041314
   Tofte M, 1997, INFORM COMPUT, V132, P109, DOI 10.1006/inco.1996.2613
   TOFTE M, 2002, PROGRAMMING REGIONS
   Walker D, 2000, ACM T PROGR LANG SYS, V22, P701, DOI 10.1145/363911.363923
   WALKER D, 2000, P WORKSH TYP COMP TI, P177
   WALKER D, 2005, SUBSTRUCTURAL TYPE S, pCH1
   WALKER D, 2001, P INT C FUNCT PROGR, P181
   WANG DC, 2001, P 28 ACM S PRINC PRO, P166
   Xi Hongwei., 1999, Proceedings of the 26th ACM SIGPLAN-SIGACT symposium on Principles of programming languages, P214
   ZORN B, 1993, SOFTWARE PRACT EXPER, V23, P733, DOI 10.1002/spe.4380230704
   [No title captured]
NR 42
TC 25
Z9 35
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 1
PY 2006
VL 62
IS 2
BP 122
EP 144
DI 10.1016/j.scico.2006.02.003
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 075VM
UT WOS:000239913600003
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Brogi, A
   Canal, C
   Pimentel, E
AF Brogi, Antonio
   Canal, Carlos
   Pimentel, Ernesto
TI On the semantics of software adaptation
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 2nd International Workshop on Foundations of Languages and Software
   Architectures (FOCLASA 03)
CY SEP 02, 2003
CL -Coordination, Marseilles, FRANCE
HO -Coordination
DE software adaptation; formal methods
ID ARCHITECTURAL MISMATCH; COMPONENT ADAPTATION
AB The problem of adapting heterogeneous software components that present mismatching interaction behaviour is one of the crucial problems in Component-Based Software Engineering. A promising approach to solve this problem is based on an adaptation methodology relying on extending component interfaces with protocol information which describes their interaction behaviour, and using a high-level notation to express the intended connection between component interfaces. The adaptor specification defines a component-in-the-middle capable of making two components interact successfully, according to certain constraints. The aim of this paper is to contribute to setting a theoretical foundation for software adaptation following this approach. A formal analysis of adaptor specifications is presented, and their usage to feature different forms of flexible adaptations is illustrated. (c) 2006 Elsevier B.V. All fights reserved.
C1 Univ Pisa, Dept Comp Sci, Pisa, Italy.
   Univ Malaga, Dept Comp Sci, Malaga, Spain.
C3 University of Pisa; Universidad de Malaga
RP Brogi, A (corresponding author), Univ Pisa, Dept Comp Sci, Pisa, Italy.
EM brogi@di.unipi.it; canal@lcc.uma.es; ernesto@lcc.uma.es
RI Brogi, Antonio/HLQ-2040-2023; Pimentel, Ernesto/AAC-3810-2019; Canal,
   Carlos/H-4782-2015
OI Pimentel, Ernesto/0000-0002-7125-8434; Canal,
   Carlos/0000-0002-8002-0372; Brogi, Antonio/0000-0003-2048-2468
CR Allen R., 1997, ACM Transactions on Software Engineering and Methodology, V6, P213, DOI 10.1145/258077.258078
   Bergel A, 2005, J UNIVERS COMPUT SCI, V11, P1613
   BOSCH J, 1998, LNCS, V1357, P379
   Bracciali A, 2005, J SYST SOFTWARE, V74, P45, DOI 10.1016/j.jss.2003.05.007
   Brogi A, 2004, LECT NOTES COMPUT SC, V2949, P71
   BROGI A, 2003, IN PRESS ELECT NOTES, V85
   Brown AW, 1998, IEEE SOFTWARE, V15, P37, DOI 10.1109/52.714622
   CAMPBELL GH, 1999, ICSE 1999, P685
   Canal C, 2004, LECT NOTES COMPUT SC, V3344, P133
   Canal C, 2001, SCI COMPUT PROGRAM, V41, P105, DOI 10.1016/S0167-6423(01)00002-8
   Compare D, 1999, SCI COMPUT PROGRAM, V33, P101, DOI 10.1016/S0167-6423(98)00006-9
   DeLine R, 2001, IEEE T SOFTWARE ENG, V27, P124, DOI 10.1109/32.908958
   DUCASSE S, 1997, LNCS, V1301
   GARLAN D, 1995, IEEE SOFTWARE, V12, P17, DOI 10.1109/52.469757
   HEINEMAN GT, 1999, ICSE 99 WORKSH CBSE
   Inverardi P, 2003, J SYST SOFTWARE, V65, P173, DOI 10.1016/S0164-1212(02)00037-7
   INVERARDI P, 2001, LNCS, V2029, P60
   SPITZNAGEL B, 2003, ICSE, P374
   Vallecillo A, 2000, LECT NOTES COMPUT SC, V1964, P256
   WALLNAU KC, 2001, SEI SERIES SOFTWARE
   Wermelinger M, 1998, IEEE T SOFTWARE ENG, V24, P331, DOI 10.1109/32.685257
   Yellin DM, 1997, ACM T PROGR LANG SYS, V19, P292, DOI 10.1145/244795.244801
NR 22
TC 8
Z9 10
U1 0
U2 2
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUL
PY 2006
VL 61
IS 2
BP 136
EP 151
DI 10.1016/j.scico.2005.10.009
PG 16
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 049MM
UT WOS:000238020600004
OA Bronze
DA 2024-07-18
ER

PT J
AU Ung, D
   Cifuentes, C
AF Ung, D
   Cifuentes, C
TI Dynamic binary translation using run-time feedbacks
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE dynamic compilation; run-time profiling; dynamic execution; binary
   translation; reverse engineering; re-engineering; virtual machine
ID MACHINE INSTRUCTIONS
AB Dynamic binary translation is the process of translating, modifying and rewriting executable (binary) code from one machine to another at run-time. This process of low-level re-engineering consists of a reverse engineering phase followed by a forward engineering phase.
   UQDBT, the University of Queensland Dynamic Binary Translator, is a machine-adaptable translator. Adaptability is provided through the specification of properties of machines and their instruction sets, allowing the support of different pairs of source and target machines. Most binary translators are closely bound to a pair of machines, making analyses and code hard to reuse.
   Like most virtual machines. UQDBT performs generic optimizations that apply to a variety of machines. Frequently executed code is translated to native code by the use of edge weight instrumentation, which makes UQDBT converge more quickly than systems based on instruction speculation.
   In this paper, we describe the architecture and run-time feedback optimizations performed by the UQDBT system, and provide results obtained in the x86 and SPARC (R) platforms. (c) 2005 Published by Elsevier B.V.
C1 Univ Queensland, Dept Informat Technol & Elect Engn, St Lucia, Qld 4067, Australia.
   Sun Microsyst Labs, Menlo Pk, CA 94025 USA.
C3 University of Queensland
RP Univ Queensland, Dept Informat Technol & Elect Engn, St Lucia, Qld 4067, Australia.
EM davidu@gcc.gnu.org; cristina.cifuentes@sun.com
CR [Anonymous], P INT C MEAS MOD COM
   [Anonymous], 2000, PLDI '00
   Cifuentes C, 1998, PROG COMPREHEN, P126, DOI 10.1109/WPC.1998.693332
   Cifuentes C, 2000, COMPUTER, V33, P60, DOI 10.1109/2.825697
   CIFUENTES C, 1999, P WORKSH BIN TRANSL, P12
   DEAVER D, 1999, P HOT CHIPS 11 S HIG
   FORDIN S, 1996, WABI 2 OPENING WINDO
   GORTON R, DIGITAL FREEPORT EXP
   GRIESEMER R, 2000, SCH NICKLAUS WIRTH A
   Hookway R. J., 1997, Digital Technical Journal, V9, P3
   HOSTETTER MJ, 1996, EXECUTOR INTERNALS E
   LE BC, 1998, P ASPLOS 98 ACM SIGO, V32, P151
   MAY C, 1994, SPECIFICATION NEW FA
   POLETTO M, 1997, ACM SIGPLAN C PROGRA, P109
   RAMSEY N, 1995, PROCEEDINGS OF THE 1995 USENIX TECHNICAL CONFERENCE, P289
   Ramsey N, 1997, ACM T PROGR LANG SYS, V19, P492, DOI 10.1145/256167.256225
   SEEGER J, 1995, APPLES MAC EMULATOR
   SITES RL, 1993, COMMUN ACM, V36, P69, DOI 10.1145/151220.151227
   Ung D, 1997, AUSTRALIAN SOFTWARE ENGINEERING CONFERENCE - PROCEEDINGS, P60, DOI 10.1109/ASWEC.1997.623755
   UNG D, 2000, P WORKSH DYN AD COMP, P37
   WEAVER D, 1993, SPARC ARCHITECTURE M
   WITCHEL E, 1996, P SIGMETRICS 96 C ME
   [No title captured]
   [No title captured]
NR 24
TC 9
Z9 11
U1 0
U2 5
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD APR
PY 2006
VL 60
IS 2
BP 189
EP 204
DI 10.1016/j.scico.2005.10.005
PG 16
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 019VA
UT WOS:000235863600006
DA 2024-07-18
ER

PT J
AU Puder, A
AF Puder, A
TI XML11 - an abstract windowing protocol
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT Academic Emergency Medicine Consensus Conference on Ethical Conduct of
   Resuscitation Research
CY MAY 21, 2005
CL New York, NY
DE window protocol; XML; code migration; implicit middleware
AB This paper describes XML11, an abstract windowing protocol inspired by the X11-protocol developed by MIT XML11 is an XML-based protocol that allows asynchronous wUI updates of widgets to an end-device. To overcome high-latency connections, XML11 allows migration of application logic to the end-device. Implicit middleware enables transparent interaction between the end-device and the server. The middleware is implicit, because the programmer is unaware of the distribution. The prototype implementation of XML11 runs in any standard web browser without Java capabilities on the client side and replaces AWT/Swing on the server side. This also allows us to expose legacy AWT/Swing applications as web applications. (c) 2005 Elsevier B.V. All rights reserved.
C1 San Francisco State Univ, Dept Comp Sci, San Francisco, CA 94132 USA.
C3 California State University System; San Francisco State University
RP San Francisco State Univ, Dept Comp Sci, 1600 Holloway Ave, San Francisco, CA 94132 USA.
EM arno@sfsu.edu
CR BADROS GJ, 2000, MARKUP LANGUAGE JAVA
   Dahm M., 1999, JIT'99. Java-Information-Tag 1999, P267
   Emmerich W., 2000, Proceedings of the 2000 International Conference on Software Engineering. ICSE 2000 the New Millennium, P397, DOI 10.1109/ICSE.2000.870430
   KOLLHOF JK, JSOLAIT JAVASCRIPT L
   LEE TH, SWINGWEB
   Mamas E, 2000, SEVENTH WORKING CONFERENCE ON REVERSE ENGINEERING - PROCEEDINGS, P172, DOI 10.1109/WCRE.2000.891464
   McArthur G, 2002, NINTH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P199, DOI 10.1109/WCRE.2002.1173078
   MCFARLANE G, XMON X PROTOCOL MONI
   MEYER J, 1996, ASSEMBLER JAVA VIRTU
   MWLETIC JI, 2002, SOURCE CODE FILES ST, P289
NR 10
TC 2
Z9 3
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN
PY 2006
VL 59
IS 1-2
BP 97
EP 108
DI 10.1016/j.scico.2005.07.006
PG 12
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 993HZ
UT WOS:000233946500007
DA 2024-07-18
ER

PT J
AU Guyer, SZ
   Lin, C
AF Guyer, SZ
   Lin, C
TI Error checking with client-driven pointer analysis
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 10th International Static Analysis Symposium (SAS 2003)
CY JUN 11-13, 2003
CL SAN DIEGO, CA
SP ACM
DE pointer analysis; context-sensitive; flow-sensitive; adaptive analysis;
   error checking; error detection
AB This paper presents a new client-driven pointer analysis algorithm that automatically adjusts its precision in response to the needs of client analyses. Using five significant error detection problems as clients, we evaluate our algorithm on 18 real C programs. We compare the accuracy and performance of our algorithm against several commonly used fixed-precision algorithms. We find that the client-driven approach effectively balances cost and precision, often producing results as accurate as fixed-precision algorithms that are many times more costly. Our algorithm works because many client problems only need a small amount of extra precision applied to selected portions of each input program. (c) 2005 Elsevier B.V. All rights reserved.
C1 Univ Texas, Dept Comp Sci, Austin, TX 78712 USA.
C3 University of Texas System; University of Texas Austin
RP Univ Texas, Dept Comp Sci, Austin, TX 78712 USA.
EM sammy@cs.utexas.edu
CR ANDERSEN LO, 1994, 9419 DIKU
   [Anonymous], 2000, Programming Perl
   [Anonymous], 2009, P 30 ACM SIGPLAN C P
   Ball T., 2001, INT SPIN WORKSH MOD
   BRYLOW D, 2003, ACM SIGSOFT S FDN SO, P198
   CHASE DR, 1990, SIGPLAN NOTICES, V25, P296, DOI 10.1145/93548.93585
   CYTRON R, 1989, CONFERENCE RECORD OF THE SIXTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P25, DOI 10.1145/75277.75280
   Das M, 2002, ACM SIGPLAN NOTICES, V37, P57, DOI 10.1145/543552.512538
   EMAMI M, 1994, P ACM SIGPLAN 94 C P, P242
   Foster JS, 2002, ACM SIGPLAN NOTICES, V37, P1, DOI 10.1145/543552.512531
   Foster JS, 2000, LECT NOTES COMPUT SC, V1824, P175
   Ghiya R, 1996, INT J PARALLEL PROG, V24, P547
   GUYER SZ, 1999, 2 C DOM SPEC LANG OC, P39
   GUYER SZ, 2002, 0204 TR U TEX AUST
   GUYER SZ, 2003, 10 AN INT STAT AN S, P214
   GUYER SZ, 2000, LANGUAGES COMPILERS, P221
   Heintze Nevin., 2001, ACM SIGPLAN C PROGRA, P24
   Hind M, 2001, ACM SIGPLAN NOTICES, P54
   Hind M, 2001, SCI COMPUT PROGRAM, V39, P31, DOI 10.1016/S0167-6423(00)00014-9
   HORWITZ S, 1995, P 3 ACM SIGSOFT S FD, P104
   LANDI W, 1992, P ACM SIGPLAN 96 PRO
   LHOTAK O, 2004, SIGPLAN C PROGR LANG, P158
   LIVSHITS VB, 2003, ACM SIGSOFT S FDN SO, P317
   PLEVYAK J, 1994, SIGPLAN NOTICES, V29, P324, DOI 10.1145/191081.191130
   RUF E, 1995, SIGPLAN C PROGR LANG, P13
   SHANKAR U, 2001, P 10 USENIX SEC S
   Steensgaard Bjarne., 1996, POINTS TO ANAL ALMOS, P32
   STOCKS PA, 1998, INT S SOFTW TEST AN, P21
   STOLTZ E, 1994, P S APPLIED COMPUTIN, P400
   STROM RE, 1986, IEEE T SOFTWARE ENG, V12, P157, DOI 10.1109/TSE.1986.6312929
   WHALEY J, 2004, SIGPLAN C PROGR LANG, P131
   Zhang S, 1998, ACM SIGPLAN NOTICES, V33, P11, DOI 10.1145/277633.277635
   [No title captured]
   [No title captured]
   [No title captured], DOI [10.1145/512927.512945, DOI 10.1145/512927.512945]
NR 35
TC 29
Z9 34
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT
PY 2005
VL 58
IS 1-2
BP 83
EP 114
DI 10.1016/j.scico.2005.02.005
PG 32
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 968PY
UT WOS:000232175700005
DA 2024-07-18
ER

PT J
AU Ponsini, O
   Fédèle, C
   Kounalis, E
AF Ponsini, O
   Fédèle, C
   Kounalis, E
TI Rewriting of imperative programs into logical equations
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE imperative program transformation; operational semantics; equational
   semantics; compiling; rewriting; rewrite system; program verification
AB This paper describes SOSSub(C): a system for automatically translating programs written in Sub(C), a simple imperative language, into a set of first-order equations. This set of equations represents a SubC program and has a precise mathematical meaning; moreover, the standard techniques for mechanizing equational reasoning can be used for verifying properties of programs. Part of the system itself is formulated abstractly as a set of first-order rewrite rules. Then, the rewrite rules are proven to be terminating and confluent. This means that our system produces, for a given SubC program, a unique set of equations. In our work, simple imperative programs are equational theories of a logical system within which proofs can be derived. (c) 2004 Elsevier B.V. All rights reserved.
C1 CNRS, UNSA, Lab I3S, UMR 6070, F-06903 Sophia Antipolis, France.
C3 Centre National de la Recherche Scientifique (CNRS); Universite Cote
   d'Azur
RP Ponsini, O (corresponding author), CNRS, UNSA, Lab I3S, UMR 6070, Route Lucioles,BP 121, F-06903 Sophia Antipolis, France.
EM ponsini@i3s.unice.fr; Carine.Fedele@unice.fr; kounalis@i3s.unice.fr
CR [Anonymous], 1996, Algebraic Semantics of Imperative Programs, DOI DOI 10.7551/MITPRESS/1188.001.0001
   [Anonymous], 1970, Computational Problems in Abstract Algebra, DOI DOI 10.1016/B978-0-08-012975-4.50028-X
   ANTOY S, 1994, IEEE T SOFTWARE ENG, V20, P259, DOI 10.1109/32.277574
   BAADER F, 1998, TERM REWRITING THAT
   BARRAS B, 1997, VERSION V61 TECH REP
   Bergstra JA, 1997, ACM T PROGR LANG SYS, V19, P639, DOI 10.1145/265943.265944
   BOUHOULA A, 1992, LECT NOTES ARTIF INT, V624, P460
   DASILVA FQ, 1994, P INT C COMPUTING IN, P17
   FEDELE C, 1999, P 14 IEEE INT C AUT, P283
   FIELD J, 1998, ACM COMPUT SURV, V30, P2
   Filliatre J., 1998, LECT NOTES COMPUTER, V1657, P78, DOI [10.1007/3- 540- 48167- 2\_6, DOI 10.1007/3-540-48167-2]
   GARLAND S, 1991, 82 DIT EQ CORP SYST
   GIBBONS H, 1998, P IWFM98 2 IR WORKSH
   HOARE CAR, 1969, COMMUN ACM, V12, P576, DOI 10.1145/363235.363259
   Jacobs B, 2003, THEOR COMPUT SCI, V291, P329, DOI 10.1016/S0304-3975(02)00366-3
   JUELLIG R, 1996, LECT NOTES COMPUTER, V1101, P551
   KAPUR D, 1988, LECT NOTES COMPUT SC, V310, P768, DOI 10.1007/BFb0012889
   MILNER R, 1979, LECT NOTES COMPUTER, V74, P146
   MOGGI E, 1991, INFORM COMPUT, V93, P55, DOI 10.1016/0890-5401(91)90052-4
   OWRE S, 1992, LECT NOTES ARTIF INT, V607, P748
   PONSINI O, 2002, P IASTED INT C APPL, P164
   SCHWEIZER D, 1997, P DEP COMP CRIT APPL, V11
   SCOTT D, 1971, 21 S COMP AUT POL I, P19
   Thiemann Peter, 1998, P 3 ACM SIGPLAN INT, DOI DOI 10.1145/289423.289429
   TRAYNOR O, 1997, LNCS, V1349, P586
   Ward M., 1993, Journal of Software Maintenance: Research and Practice, V5, P101, DOI 10.1002/smr.4360050204
NR 26
TC 3
Z9 3
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAY-JUN
PY 2005
VL 56
IS 3
BP 363
EP 401
DI 10.1016/j.scico.2004.10.001
PG 39
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 929JH
UT WOS:000229341900005
DA 2024-07-18
ER

PT J
AU Verhoef, C
AF Verhoef, C
TI Quantifying the value of IT-investments
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE valuation; discounted cash flow (DCF); net present value (NPV); internal
   rate of return (IRR); payback period (PBP); return on investment (ROI);
   risk-adjusted return on capital (RAROC); weighted average cost of
   information technology (WACIT); IT-investment management; quantitative
   IT-portfolio management; total cost of ownership (TCO); requirements
   creep; time compression; failure risk; overrun risk
ID RELIABILITY
AB We described a method to quantify the value of investments in software systems. For that, we adopted the classical risk-adjusted discounted cash flow model and geared it towards the field of information technology. This resulted in a scenario-based approach incorporating two IT-specific risks that can substantially influence IT-appraisals. They are requirements creep and time compression. To account for the risk of failed IT-projects and overrun risks we proposed the Weighted Average Cost of Information Technology (WACIT). WACIT adjusts the well-known Weighted Average Cost of Capital, commonly used in discounted cash flow models. We proposed several methods to approximate WACIT ranging from an investment-specific rate to a (company-wide) one inferred from a quantitative IT-portfolio analysis. We illustrated our quantitative IT-investment management approach by way of a published example. For various risk-scenarios, we calculated using this example the impact on the firm's share price, standard economic indicators like NPV, IRR, PBP, ROI, RAROC, and more, in order to come to grips with the appraisal of information technology-the largest production factor of today. (c) 2004 Elsevier B.V. All rights reserved.
C1 Free Univ Amsterdam, Dept Math & Comp Sci, NL-1081 HV Amsterdam, Netherlands.
C3 Vrije Universiteit Amsterdam
RP Free Univ Amsterdam, Dept Math & Comp Sci, Boelelaan 1081A, NL-1081 HV Amsterdam, Netherlands.
EM x@cs.vu.nl
CR Albrecht A.J., 1979, Em Proceedings of the Joint SHARE, GUIDE, and IBM Application Development Symposium, P83
   [Anonymous], 1972, Numerical Analysis and Computational Theory and Practice
   [Anonymous], 1995, Chaos
   Boehm BW., 1981, Software Engineering Economics
   Buckley A., 2002, European Management Journal, V20, P512
   DEMARCO T, 1982, CONTROLLING SOFTWARE
   Dreger J.B., 1989, FUNCTION POINT ANAL
   GARDNER C, 2002, AMALGAMATED WIDGET D
   GARDNER C, 2002, DETERMINE VALUE PROJ
   GARMUS D, 2001, FUNCTIN POINT ANAL M
   Garvey P., 2000, PROBABILITY METHODS
   Hamming RW., 1973, Numerical Methods of Scientists and Engineers
   Huet S., 1996, STAT TOOLS NONLINEAR, V2nd
   Johnson J., 1995, APPL DEV TRENDS, V2, P41
   Jones C., 2000, Software assessment, benchmarks, and best practices
   Jones C., 1998, Estimating Software Cost
   Jones C., 1994, Assessment and control of software risks
   KEMERER CF, 1993, COMMUN ACM, V36, P85, DOI 10.1145/151220.151230
   KEMERER CF, 1992, IEEE T SOFTWARE ENG, V18, P1011, DOI 10.1109/32.177370
   Kersten B., 2003, Cutter IT Journal, V16, P27
   KERSTEN HMP, 2001, INTERNATIONALE ICT T
   Klusener AS, 2004, SOFTWARE QUAL J, V12, P297, DOI 10.1023/B:SQJO.0000039790.04885.13
   Krause A., 2000, BASICS S S PLUS, V2nd
   Pinheiro J. A., 2000, MIXED EFFECTS MODELS, DOI DOI 10.1007/B98882
   PISELLO T, 2003, DIGITAL PUBLICATIO D, V10
   PITTS DR, 1997, METRICS PROBLEM SOLV
   Putnam L., 1992, MEASURES EXCELLENCE
   PUTNAM LH, 1984, P INT SOC PAR AN 6 A, V3, P443
   VENABLES WN, 1999, MODERN APPL SAT SPLU
   Verhoef C, 2002, SCI COMPUT PROGRAM, V45, P1, DOI 10.1016/S0167-6423(02)00106-5
   VERHOEF C, 2002, GETTING TOP IT
   VERHOEF C, 2004, IN PRESS SCI COMPUTE
   Wadsworth S., 1992, Statistical Models
   Wolfram S., 1999, The Mathematica, Vfourth
NR 34
TC 15
Z9 22
U1 0
U2 8
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAY-JUN
PY 2005
VL 56
IS 3
BP 315
EP 342
DI 10.1016/j.scico.2004.08.004
PG 28
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 929JH
UT WOS:000229341900003
OA Bronze
DA 2024-07-18
ER

PT J
AU Plosila, J
   Sere, K
   Waldén, M
AF Plosila, J
   Sere, K
   Waldén, M
TI Asynchronous system synthesis
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 1st International Symposium on Formal Methods for Components and Objects
CY NOV 05-11, 2002
CL LEIDEN, NETHERLANDS
SP Lorentz Ctr, IST Project Omega, Dutch Inst Programming Res & Algorithm, Royal Netherlands Acad Arts & Sci, Centrum Wiskunde Informat, Leiden Inst Adv Comp Sci
AB We propose a method for synthesising a set of components from a high-level specification of the intended behaviour of the target system. The designer proceeds via correctness-preserving transformation steps towards an implementable architecture of components which communicate asynchronously. The interface model of each component specifies the communication protocol used. At each step a pre-defined component is extracted and the correctness of the step is proved. This ensures the compatibility of the components. We use Action Systems as our formal approach to system design. The method is inspired by hardware-oriented approaches with their component libraries, but is more general. We also explore the possibility of using tool support to administer the derivation, as well as to assist in correctness proofs. Here we rely on the tools supporting the B Method, as this method is closely related to Action Systems and has good tool support. (C) 2004 Elsevier B.V. All rights reserved.
C1 Abo Akad Univ, Dept Comp Sci, TUCS, SF-20520 Turku, Finland.
   Abo Akad Univ, Dept Informat Technol, TUCS, SF-20520 Turku, Finland.
C3 Abo Akademi University; Abo Akademi University
RP Abo Akad Univ, Dept Comp Sci, TUCS, Lemminkainengatan 14, SF-20520 Turku, Finland.
EM kaisa.sere@abo.fi
OI Plosila, Juha/0000-0003-4018-5495
CR Abrial J-R., 1996, The B Book
   [Anonymous], 1983, P 2 ANN ACM S PRINCI, DOI [10.1145/800221.806716, DOI 10.1145/800221.806716]
   Back R. J. R., 1996, Formal Aspects of Computing, V8, P324, DOI 10.1007/BF01214918
   BACK RJ, 1991, STRUCT PROGRAM, V12, P17
   BACK RJR, 1993, A141
   BACK RJR, 1994, LNCS, V873, P1
   BONSANGUE MM, 1999, FORMAL METHODS OPEN
   Butler M, 1999, LECT NOTES COMPUT SC, V1708, P490
   BUTLER M, 1996, P 1 C B METH H HABR, P155
   DIJKSTRA EW, 1976, DISCIPLINE PROGR
   HOARE CAR, 1985, COMMUNICATING
   LDEALFARO TA, 2001, P 1 INT WORKSH EMV S
   LEE EA, 2001, 1 WORKSH EMB SOFTW E
   LIPTON RJ, 1975, COMMUN ACM, V18, P717, DOI 10.1145/361227.361234
   NEILSON DS, 1996, BTECHNOLOGIES SYSTEM
   PEETERS AMG, 1996, THESIS U TECHNOLOGY
   PLOSILA J, 2003, P FMCO 2002 INT S FO
   PLOSILA J, 1999, THESIS U TURKU TRUKU
   RUKSENAS R, 2004, THESIS TURKU CTR COM
   SECELEANU T, 2001, THESIS TURKU CTR COM
   SEKERINSKI E, 1998, FACIT
   Sere K., 2000, Formal Aspects of Computing, V12, P278, DOI 10.1007/PL00003935
   VONWRIGHT J, 1994, P 6 BCS FACS REF WOR
   Walden R, 1998, FORM METHOD SYST DES, V13, P5, DOI 10.1023/A:1008688421367
NR 24
TC 3
Z9 3
U1 0
U2 0
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR
PY 2005
VL 55
IS 1-3
BP 259
EP 288
DI 10.1016/j.scico.2004.05.018
PG 30
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 899FQ
UT WOS:000227130700010
OA Bronze
DA 2024-07-18
ER

PT J
AU Goedicke, M
   Köllmann, C
   Zdun, U
AF Goedicke, M
   Köllmann, C
   Zdun, U
TI Designing runtime variation points in product line architectures:: three
   cases
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
AB Software product lines provide a common architecture, reusable code, and other common assets for a set of related software products. Variation is a central requirement in this context, as the product line components have to be instantiated, composed, and configured in the context of the products. In many approaches either static composition techniques or dynamic composition techniques based on loose relationships, such as association, aggregation, and replacement of entities, are proposed to design the variation points. If the domain of the product requires runtime variation, however, these approaches do not provide any central management facility for the runtime variation points. As a solution to this problem, we propose a pattern language that provides a domain-specific variation language and runtime variation point management facilities as part of the product line. We present three case studies from the areas of interactive digital television and document archiving in which we have applied this pattern language. (C) 2004 Elsevier B.V. All rights reserved.
C1 Univ Duisburg Essen, Inst Comp Sci & Business Informat Syst, Essen, Germany.
   Vienna Univ Econ, Dept Informat Syst, Vienna, Austria.
C3 University of Duisburg Essen; Vienna University of Economics & Business
RP Univ Duisburg Essen, Inst Comp Sci & Business Informat Syst, Campus Essen, Essen, Germany.
EM goedicke@cs.uni-essen.de; koellmann@cs.uni-essen.de; zdun@acm.org
RI Zdun, Uwe/AFR-2161-2022
CR Alexander C., 1977, PATTERN LANGUAGE TOW
   [Anonymous], 1996, Pattern oriented software architecture: a system of patters
   [Anonymous], 2000, PATTERNS CONCURRENT
   [Anonymous], 2000, SOFTWARE ARCHITECTUR
   Bass Len, 2012, SEI S SOFTW
   Bosch J., 2000, Design and Use of Software Architectures: Adopting and Evolving a Product-Line Approach
   BOSCH J, 2001, P PROD FAM ARCH WORK, P13
   CAMPBELL G, 1998, P OOPSLA 98 OBJ TECH
   Clements P., 2002, Software product lines
   DEJONG M, 2003, TEL JAVA INTEGRATION
   Gamma E., 1994, Design patterns: Elements of reusable object-oriented software
   Goedicke M, 2002, J SOFTW MAINT EVOL-R, V14, P1, DOI 10.1002/smr.243
   GOEDICKE M, 2001, P EUR 2001 IRS GERM, P317
   Keepence B, 1999, IEEE SOFTWARE, V16, P102, DOI 10.1109/52.776957
   Kiczales G, 1997, LECT NOTES COMPUT SC, V1241, P220, DOI 10.1007/BFb0053381
   Kiczales G, 2001, COMMUN ACM, V44, P59, DOI 10.1145/383845.383858
   MENZINI M, 1998, P C OBJ OR PROGR SYS, V33, P97
   MYLLYMAKI T, 2002, 30 TAMP U TECHN I SO
   Sneed HM, 2000, ANN SOFTW ENG, V9, P293, DOI 10.1023/A:1018989111417
   SVAHNBERG M, 2002, TAXONOMY VARIABILITY, P1103
   van Gurp J, 2001, WORKING IEEE/IFIP CONFERENCE ON SOFTWARE ARCHITECTURE, PROCEEDINGS, P45, DOI 10.1109/WICSA.2001.948406
   VANGURP J, 2000, P 2 LAND ARCHT C
   VOGEL O, 2001, P EUR 2001 IRS GERM, P113
   ZDUN U, 2002, P EUR 2002 IRS GERM, P195
NR 24
TC 15
Z9 17
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC
PY 2004
VL 53
IS 3
BP 353
EP 380
DI 10.1016/j.scico.2003.04.006
PG 28
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 863UY
UT WOS:000224590100006
DA 2024-07-18
ER

EF